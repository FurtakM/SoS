// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export vehiclesFrom05 , resourcesFrom05 , fastBreakthrough , stevensStatus , apeTechsStatus ; export techMatPredStatus ; export vehsFrom06 , resourcesFrom06 ; export dial_SibTechsBlocker , dial_VsevolodContactBlocker , dial_TrapDialogBlocker , dial_ConvoyDialogBlocker , dial_NorthBlocker , dial_EndMissionDialogBlocker ; export claimOvsyenkoBase , claimTerminalBase , lostAgainBase ; export immortalVsevolodTeam , savedVsevolod , vsevolodWaitGorky ; export canGoNorth ; export enableVsevolodCounter ; export canSpawnReinforces ; export canEndMission ; export canRemoveUnits ; export timeToAttack ; export cratesSpawned ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 308 0 0
// vehiclesFrom05 = LoadVariable ( 05_Tanks_4 , [ ] ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 05_Tanks_4
  31: PPUSH
  32: EMPTY
  33: PPUSH
  34: CALL_OW 30
  38: ST_TO_ADDR
// resourcesFrom05 = LoadVariable ( 05_ResourcesInCargo_3 , [ ] ) ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: LD_STRING 05_ResourcesInCargo_3
  46: PPUSH
  47: EMPTY
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// fastBreakthrough = LoadVariable ( 05_FastBreakthrough_6 , false ) ;
  54: LD_ADDR_EXP 3
  58: PUSH
  59: LD_STRING 05_FastBreakthrough_6
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// stevensStatus = LoadVariable ( 05_StevensStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 4
  74: PUSH
  75: LD_STRING 05_StevensStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// apeTechsStatus = LoadVariable ( 05_ApeTechsStatus_7 , [ 0 , 0 , 0 ] ) ;
  86: LD_ADDR_EXP 5
  90: PUSH
  91: LD_STRING 05_ApeTechsStatus_7
  93: PPUSH
  94: LD_INT 0
  96: PUSH
  97: LD_INT 0
  99: PUSH
 100: LD_INT 0
 102: PUSH
 103: EMPTY
 104: LIST
 105: LIST
 106: LIST
 107: PPUSH
 108: CALL_OW 30
 112: ST_TO_ADDR
// techMatPredStatus = state_enabled ;
 113: LD_ADDR_EXP 6
 117: PUSH
 118: LD_INT 1
 120: ST_TO_ADDR
// vehsFrom06 = [ ] ;
 121: LD_ADDR_EXP 7
 125: PUSH
 126: EMPTY
 127: ST_TO_ADDR
// resourcesFrom06 = [ ] ;
 128: LD_ADDR_EXP 8
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// dial_SibTechsBlocker = false ;
 135: LD_ADDR_EXP 9
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// dial_VsevolodContactBlocker = false ;
 143: LD_ADDR_EXP 10
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// dial_TrapDialogBlocker = false ;
 151: LD_ADDR_EXP 11
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// dial_ConvoyDialogBlocker = false ;
 159: LD_ADDR_EXP 12
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// dial_NorthBlocker = false ;
 167: LD_ADDR_EXP 13
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// dial_EndMissionDialogBlocker = false ;
 175: LD_ADDR_EXP 14
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// claimOvsyenkoBase = false ;
 183: LD_ADDR_EXP 15
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// claimTerminalBase = false ;
 191: LD_ADDR_EXP 16
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// lostAgainBase = false ;
 199: LD_ADDR_EXP 17
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// immortalVsevolodTeam = true ;
 207: LD_ADDR_EXP 18
 211: PUSH
 212: LD_INT 1
 214: ST_TO_ADDR
// savedVsevolod = false ;
 215: LD_ADDR_EXP 19
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// vsevolodWaitGorky = false ;
 223: LD_ADDR_EXP 20
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// enableVsevolodCounter = false ;
 231: LD_ADDR_EXP 22
 235: PUSH
 236: LD_INT 0
 238: ST_TO_ADDR
// canGoNorth = false ;
 239: LD_ADDR_EXP 21
 243: PUSH
 244: LD_INT 0
 246: ST_TO_ADDR
// canSpawnReinforces = false ;
 247: LD_ADDR_EXP 23
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// canEndMission = false ;
 255: LD_ADDR_EXP 24
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// canRemoveUnits = false ;
 263: LD_ADDR_EXP 25
 267: PUSH
 268: LD_INT 0
 270: ST_TO_ADDR
// timeToAttack = 0 0$00 ;
 271: LD_ADDR_EXP 26
 275: PUSH
 276: LD_INT 0
 278: ST_TO_ADDR
// cratesSpawned = 0 ;
 279: LD_ADDR_EXP 27
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// PrepareRussians ;
 287: CALL 913 0 0
// PrepareAmericans ;
 291: CALL 3344 0 0
// Nef_PrepareNature ;
 295: CALL 4459 0 0
// MissionIntro ;
 299: CALL 16068 0 0
// end ; end_of_file
 303: LD_VAR 0 1
 307: RET
// export function InitMapConfig ; begin
 308: LD_INT 0
 310: PPUSH
// BaseMapConfig ;
 311: CALL 324 0 0
// MissionMapConfig ;
 315: CALL 414 0 0
// end ;
 319: LD_VAR 0 1
 323: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 324: LD_INT 0
 326: PPUSH
// animalsAmount = [ 3 , 3 , 1 , 3 , 0 ] ;
 327: LD_ADDR_EXP 28
 331: PUSH
 332: LD_INT 3
 334: PUSH
 335: LD_INT 3
 337: PUSH
 338: LD_INT 1
 340: PUSH
 341: LD_INT 3
 343: PUSH
 344: LD_INT 0
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 354: LD_ADDR_EXP 29
 358: PUSH
 359: LD_INT 2
 361: PUSH
 362: LD_INT 2
 364: PUSH
 365: LD_INT 2
 367: PUSH
 368: LD_INT 2
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: LIST
 375: LIST
 376: ST_TO_ADDR
// animalsAgression = 3 ;
 377: LD_ADDR_EXP 30
 381: PUSH
 382: LD_INT 3
 384: ST_TO_ADDR
// debugMode = 0 ;
 385: LD_ADDR_EXP 33
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// missionPrefix = 06_ ;
 393: LD_ADDR_EXP 31
 397: PUSH
 398: LD_STRING 06_
 400: ST_TO_ADDR
// previousMissionPrefix = 05_ ;
 401: LD_ADDR_EXP 32
 405: PUSH
 406: LD_STRING 05_
 408: ST_TO_ADDR
// end ;
 409: LD_VAR 0 1
 413: RET
// export enemySkillLevel ; export ovsyenkoStartCrates , terminalStartSiberite ; export trapAmount ; export vsevolodSaveTime ; function MissionMapConfig ; begin
 414: LD_INT 0
 416: PPUSH
// enemySkillLevel = [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 417: LD_ADDR_EXP 34
 421: PUSH
 422: LD_INT 3
 424: PUSH
 425: LD_INT 4
 427: PUSH
 428: LD_INT 5
 430: PUSH
 431: LD_INT 6
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: PUSH
 440: LD_OWVAR 67
 444: ARRAY
 445: ST_TO_ADDR
// ovsyenkoStartCrates = [ 150 , 100 , 50 , 30 ] [ Difficulty ] ;
 446: LD_ADDR_EXP 35
 450: PUSH
 451: LD_INT 150
 453: PUSH
 454: LD_INT 100
 456: PUSH
 457: LD_INT 50
 459: PUSH
 460: LD_INT 30
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_OWVAR 67
 473: ARRAY
 474: ST_TO_ADDR
// terminalStartSiberite = [ 100 , 70 , 50 , 30 ] [ Difficulty ] ;
 475: LD_ADDR_EXP 36
 479: PUSH
 480: LD_INT 100
 482: PUSH
 483: LD_INT 70
 485: PUSH
 486: LD_INT 50
 488: PUSH
 489: LD_INT 30
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: PUSH
 498: LD_OWVAR 67
 502: ARRAY
 503: ST_TO_ADDR
// trapAmount = [ rand ( 4 , 5 ) , rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] ;
 504: LD_ADDR_EXP 37
 508: PUSH
 509: LD_INT 4
 511: PPUSH
 512: LD_INT 5
 514: PPUSH
 515: CALL_OW 12
 519: PUSH
 520: LD_INT 5
 522: PPUSH
 523: LD_INT 6
 525: PPUSH
 526: CALL_OW 12
 530: PUSH
 531: LD_INT 6
 533: PPUSH
 534: LD_INT 7
 536: PPUSH
 537: CALL_OW 12
 541: PUSH
 542: LD_INT 7
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: PUSH
 551: LD_OWVAR 67
 555: ARRAY
 556: ST_TO_ADDR
// vsevolodSaveTime = [ 12 12$0 , 11 11$0 , 10 10$0 , 10 10$0 ] [ Difficulty ] ;
 557: LD_ADDR_EXP 38
 561: PUSH
 562: LD_INT 25200
 564: PUSH
 565: LD_INT 23100
 567: PUSH
 568: LD_INT 21000
 570: PUSH
 571: LD_INT 21000
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: LD_OWVAR 67
 584: ARRAY
 585: ST_TO_ADDR
// end ;
 586: LD_VAR 0 1
 590: RET
// every 0 0$1 trigger debugMode do var i ;
 591: LD_EXP 33
 595: IFFALSE 910
 597: GO 599
 599: DISABLE
 600: LD_INT 0
 602: PPUSH
// begin enable ;
 603: ENABLE
// FogOff ( your_side ) ;
 604: LD_OWVAR 2
 608: PPUSH
 609: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 613: LD_ADDR_VAR 0 1
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_OWVAR 2
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: LD_INT 2
 632: PUSH
 633: LD_INT 21
 635: PUSH
 636: LD_INT 1
 638: PUSH
 639: EMPTY
 640: LIST
 641: LIST
 642: PUSH
 643: LD_INT 21
 645: PUSH
 646: LD_INT 2
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: LIST
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PPUSH
 662: CALL_OW 69
 666: PUSH
 667: FOR_IN
 668: IFFALSE 684
// SetLives ( i , 1000 ) ;
 670: LD_VAR 0 1
 674: PPUSH
 675: LD_INT 1000
 677: PPUSH
 678: CALL_OW 234
 682: GO 667
 684: POP
 685: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 686: LD_ADDR_VAR 0 1
 690: PUSH
 691: LD_INT 22
 693: PUSH
 694: LD_OWVAR 2
 698: PUSH
 699: EMPTY
 700: LIST
 701: LIST
 702: PUSH
 703: LD_INT 21
 705: PUSH
 706: LD_INT 1
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: PPUSH
 717: CALL_OW 69
 721: PUSH
 722: FOR_IN
 723: IFFALSE 787
// begin SetSkill ( i , skill_combat , 10 ) ;
 725: LD_VAR 0 1
 729: PPUSH
 730: LD_INT 1
 732: PPUSH
 733: LD_INT 10
 735: PPUSH
 736: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 740: LD_VAR 0 1
 744: PPUSH
 745: LD_INT 2
 747: PPUSH
 748: LD_INT 10
 750: PPUSH
 751: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 755: LD_VAR 0 1
 759: PPUSH
 760: LD_INT 3
 762: PPUSH
 763: LD_INT 10
 765: PPUSH
 766: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 770: LD_VAR 0 1
 774: PPUSH
 775: LD_INT 4
 777: PPUSH
 778: LD_INT 10
 780: PPUSH
 781: CALL_OW 237
// end ;
 785: GO 722
 787: POP
 788: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 789: LD_ADDR_VAR 0 1
 793: PUSH
 794: LD_INT 22
 796: PUSH
 797: LD_OWVAR 2
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: PUSH
 806: LD_INT 2
 808: PUSH
 809: LD_INT 30
 811: PUSH
 812: LD_INT 0
 814: PUSH
 815: EMPTY
 816: LIST
 817: LIST
 818: PUSH
 819: LD_INT 30
 821: PUSH
 822: LD_INT 1
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: LIST
 833: PUSH
 834: EMPTY
 835: LIST
 836: LIST
 837: PPUSH
 838: CALL_OW 69
 842: PUSH
 843: FOR_IN
 844: IFFALSE 908
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 846: LD_VAR 0 1
 850: PPUSH
 851: CALL_OW 274
 855: PPUSH
 856: LD_INT 1
 858: PPUSH
 859: LD_INT 9999
 861: PPUSH
 862: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 866: LD_VAR 0 1
 870: PPUSH
 871: CALL_OW 274
 875: PPUSH
 876: LD_INT 2
 878: PPUSH
 879: LD_INT 9999
 881: PPUSH
 882: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 886: LD_VAR 0 1
 890: PPUSH
 891: CALL_OW 274
 895: PPUSH
 896: LD_INT 3
 898: PPUSH
 899: LD_INT 9999
 901: PPUSH
 902: CALL_OW 277
// end ;
 906: GO 843
 908: POP
 909: POP
// end ; end_of_file
 910: PPOPN 1
 912: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Platonov , Kirilenkova , Belkov , Belkov2 ; export Vsevolod , vsevolodTeam , Petr , Igor , Boris ; export ConvoyBoris , ConvoyIbrahim ; export function PrepareRussians ; begin
 913: LD_INT 0
 915: PPUSH
// PrepareHeroes ;
 916: CALL 925 0 0
// end ;
 920: LD_VAR 0 1
 924: RET
// function PrepareHeroes ; var i , j , car , tmp , cargoList , bigCargoList , point , areaPoints , nearPosition , burlakPosition , distance , index ; begin
 925: LD_INT 0
 927: PPUSH
 928: PPUSH
 929: PPUSH
 930: PPUSH
 931: PPUSH
 932: PPUSH
 933: PPUSH
 934: PPUSH
 935: PPUSH
 936: PPUSH
 937: PPUSH
 938: PPUSH
 939: PPUSH
// point = [ 170 , 208 ] ;
 940: LD_ADDR_VAR 0 8
 944: PUSH
 945: LD_INT 170
 947: PUSH
 948: LD_INT 208
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: ST_TO_ADDR
// areaPoints = AreaToList ( RussianSpawnArea1 , 0 ) ;
 955: LD_ADDR_VAR 0 9
 959: PUSH
 960: LD_INT 1
 962: PPUSH
 963: LD_INT 0
 965: PPUSH
 966: CALL_OW 517
 970: ST_TO_ADDR
// uc_side = 3 ;
 971: LD_ADDR_OWVAR 20
 975: PUSH
 976: LD_INT 3
 978: ST_TO_ADDR
// uc_nation = 3 ;
 979: LD_ADDR_OWVAR 21
 983: PUSH
 984: LD_INT 3
 986: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , 0 ) ;
 987: LD_ADDR_EXP 39
 991: PUSH
 992: LD_STRING Burlak
 994: PPUSH
 995: LD_INT 1
 997: PPUSH
 998: LD_INT 0
1000: PPUSH
1001: CALL 11785 0 3
1005: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , true , 0 ) ;
1006: LD_ADDR_EXP 44
1010: PUSH
1011: LD_STRING Titov
1013: PPUSH
1014: LD_INT 1
1016: PPUSH
1017: LD_INT 0
1019: PPUSH
1020: CALL 11785 0 3
1024: ST_TO_ADDR
// Dolgov := PrepareUnitExt ( Dolgov , true , 0 ) ;
1025: LD_ADDR_EXP 45
1029: PUSH
1030: LD_STRING Dolgov
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_INT 0
1038: PPUSH
1039: CALL 11785 0 3
1043: ST_TO_ADDR
// Lipshchin := PrepareUnitExt ( Lipshchin , true , 0 ) ;
1044: LD_ADDR_EXP 46
1048: PUSH
1049: LD_STRING Lipshchin
1051: PPUSH
1052: LD_INT 1
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL 11785 0 3
1062: ST_TO_ADDR
// Karamazov := PrepareUnitExt ( Karamazov , true , class_engineer ) ;
1063: LD_ADDR_EXP 40
1067: PUSH
1068: LD_STRING Karamazov
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: LD_INT 2
1076: PPUSH
1077: CALL 11785 0 3
1081: ST_TO_ADDR
// Petrovova := PrepareUnitExt ( Petrovova , true , 0 ) ;
1082: LD_ADDR_EXP 41
1086: PUSH
1087: LD_STRING Petrovova
1089: PPUSH
1090: LD_INT 1
1092: PPUSH
1093: LD_INT 0
1095: PPUSH
1096: CALL 11785 0 3
1100: ST_TO_ADDR
// Gleb := PrepareUnitExt ( Gleb , true , 0 ) ;
1101: LD_ADDR_EXP 42
1105: PUSH
1106: LD_STRING Gleb
1108: PPUSH
1109: LD_INT 1
1111: PPUSH
1112: LD_INT 0
1114: PPUSH
1115: CALL 11785 0 3
1119: ST_TO_ADDR
// Petrosyan := PrepareUnitExt ( Petrosyan , true , 0 ) ;
1120: LD_ADDR_EXP 43
1124: PUSH
1125: LD_STRING Petrosyan
1127: PPUSH
1128: LD_INT 1
1130: PPUSH
1131: LD_INT 0
1133: PPUSH
1134: CALL 11785 0 3
1138: ST_TO_ADDR
// Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
1139: LD_ADDR_EXP 47
1143: PUSH
1144: LD_STRING Platonov
1146: PPUSH
1147: LD_INT 0
1149: PPUSH
1150: LD_INT 0
1152: PPUSH
1153: CALL 11785 0 3
1157: ST_TO_ADDR
// if TestCharacters ( 04_Kirilenkova ) then
1158: LD_STRING 04_Kirilenkova
1160: PPUSH
1161: CALL_OW 28
1165: IFFALSE 1192
// begin Kirilenkova := CreateCharacter ( 04_Kirilenkova ) ;
1167: LD_ADDR_EXP 48
1171: PUSH
1172: LD_STRING 04_Kirilenkova
1174: PPUSH
1175: CALL_OW 34
1179: ST_TO_ADDR
// SetClass ( Kirilenkova , class_scientistic ) ;
1180: LD_EXP 48
1184: PPUSH
1185: LD_INT 4
1187: PPUSH
1188: CALL_OW 336
// end ; if TestCharacters ( 04_Belkov ) then
1192: LD_STRING 04_Belkov
1194: PPUSH
1195: CALL_OW 28
1199: IFFALSE 1226
// begin Belkov := CreateCharacter ( 04_Belkov ) ;
1201: LD_ADDR_EXP 49
1205: PUSH
1206: LD_STRING 04_Belkov
1208: PPUSH
1209: CALL_OW 34
1213: ST_TO_ADDR
// SetClass ( Belkov , class_soldier ) ;
1214: LD_EXP 49
1218: PPUSH
1219: LD_INT 1
1221: PPUSH
1222: CALL_OW 336
// end ; if TestCharacters ( 04_Belkov2 ) then
1226: LD_STRING 04_Belkov2
1228: PPUSH
1229: CALL_OW 28
1233: IFFALSE 1260
// begin Belkov2 := CreateCharacter ( 04_Belkov2 ) ;
1235: LD_ADDR_EXP 50
1239: PUSH
1240: LD_STRING 04_Belkov2
1242: PPUSH
1243: CALL_OW 34
1247: ST_TO_ADDR
// SetClass ( Belkov2 , class_soldier ) ;
1248: LD_EXP 50
1252: PPUSH
1253: LD_INT 1
1255: PPUSH
1256: CALL_OW 336
// end ; for i := 1 to vehiclesFrom05 do
1260: LD_ADDR_VAR 0 2
1264: PUSH
1265: DOUBLE
1266: LD_INT 1
1268: DEC
1269: ST_TO_ADDR
1270: LD_EXP 1
1274: PUSH
1275: FOR_TO
1276: IFFALSE 1938
// begin uc_nation = vehiclesFrom05 [ i ] [ 1 ] ;
1278: LD_ADDR_OWVAR 21
1282: PUSH
1283: LD_EXP 1
1287: PUSH
1288: LD_VAR 0 2
1292: ARRAY
1293: PUSH
1294: LD_INT 1
1296: ARRAY
1297: ST_TO_ADDR
// vc_chassis := vehiclesFrom05 [ i ] [ 2 ] ;
1298: LD_ADDR_OWVAR 37
1302: PUSH
1303: LD_EXP 1
1307: PUSH
1308: LD_VAR 0 2
1312: ARRAY
1313: PUSH
1314: LD_INT 2
1316: ARRAY
1317: ST_TO_ADDR
// vc_engine = vehiclesFrom05 [ i ] [ 3 ] ;
1318: LD_ADDR_OWVAR 39
1322: PUSH
1323: LD_EXP 1
1327: PUSH
1328: LD_VAR 0 2
1332: ARRAY
1333: PUSH
1334: LD_INT 3
1336: ARRAY
1337: ST_TO_ADDR
// vc_control = vehiclesFrom05 [ i ] [ 4 ] ;
1338: LD_ADDR_OWVAR 38
1342: PUSH
1343: LD_EXP 1
1347: PUSH
1348: LD_VAR 0 2
1352: ARRAY
1353: PUSH
1354: LD_INT 4
1356: ARRAY
1357: ST_TO_ADDR
// vc_weapon := vehiclesFrom05 [ i ] [ 5 ] ;
1358: LD_ADDR_OWVAR 40
1362: PUSH
1363: LD_EXP 1
1367: PUSH
1368: LD_VAR 0 2
1372: ARRAY
1373: PUSH
1374: LD_INT 5
1376: ARRAY
1377: ST_TO_ADDR
// uc_direction := 0 ;
1378: LD_ADDR_OWVAR 24
1382: PUSH
1383: LD_INT 0
1385: ST_TO_ADDR
// vc_fuel_battery := Rand ( 10 , 15 ) ;
1386: LD_ADDR_OWVAR 41
1390: PUSH
1391: LD_INT 10
1393: PPUSH
1394: LD_INT 15
1396: PPUSH
1397: CALL_OW 12
1401: ST_TO_ADDR
// car := CreateVehicle ;
1402: LD_ADDR_VAR 0 4
1406: PUSH
1407: CALL_OW 45
1411: ST_TO_ADDR
// distance = 999 ;
1412: LD_ADDR_VAR 0 12
1416: PUSH
1417: LD_INT 999
1419: ST_TO_ADDR
// index = 1 ;
1420: LD_ADDR_VAR 0 13
1424: PUSH
1425: LD_INT 1
1427: ST_TO_ADDR
// for j := 1 to areaPoints [ 1 ] do
1428: LD_ADDR_VAR 0 3
1432: PUSH
1433: DOUBLE
1434: LD_INT 1
1436: DEC
1437: ST_TO_ADDR
1438: LD_VAR 0 9
1442: PUSH
1443: LD_INT 1
1445: ARRAY
1446: PUSH
1447: FOR_TO
1448: IFFALSE 1619
// begin if GetDistXY ( point [ 1 ] , point [ 2 ] , areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ) < distance then
1450: LD_VAR 0 8
1454: PUSH
1455: LD_INT 1
1457: ARRAY
1458: PPUSH
1459: LD_VAR 0 8
1463: PUSH
1464: LD_INT 2
1466: ARRAY
1467: PPUSH
1468: LD_VAR 0 9
1472: PUSH
1473: LD_INT 1
1475: ARRAY
1476: PUSH
1477: LD_VAR 0 3
1481: ARRAY
1482: PPUSH
1483: LD_VAR 0 9
1487: PUSH
1488: LD_INT 2
1490: ARRAY
1491: PUSH
1492: LD_VAR 0 3
1496: ARRAY
1497: PPUSH
1498: CALL_OW 298
1502: PUSH
1503: LD_VAR 0 12
1507: LESS
1508: IFFALSE 1617
// begin distance = GetDistXY ( point [ 1 ] , point [ 2 ] , areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ) ;
1510: LD_ADDR_VAR 0 12
1514: PUSH
1515: LD_VAR 0 8
1519: PUSH
1520: LD_INT 1
1522: ARRAY
1523: PPUSH
1524: LD_VAR 0 8
1528: PUSH
1529: LD_INT 2
1531: ARRAY
1532: PPUSH
1533: LD_VAR 0 9
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PUSH
1542: LD_VAR 0 3
1546: ARRAY
1547: PPUSH
1548: LD_VAR 0 9
1552: PUSH
1553: LD_INT 2
1555: ARRAY
1556: PUSH
1557: LD_VAR 0 3
1561: ARRAY
1562: PPUSH
1563: CALL_OW 298
1567: ST_TO_ADDR
// nearPosition = [ areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ] ;
1568: LD_ADDR_VAR 0 10
1572: PUSH
1573: LD_VAR 0 9
1577: PUSH
1578: LD_INT 1
1580: ARRAY
1581: PUSH
1582: LD_VAR 0 3
1586: ARRAY
1587: PUSH
1588: LD_VAR 0 9
1592: PUSH
1593: LD_INT 2
1595: ARRAY
1596: PUSH
1597: LD_VAR 0 3
1601: ARRAY
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: ST_TO_ADDR
// index = j ;
1607: LD_ADDR_VAR 0 13
1611: PUSH
1612: LD_VAR 0 3
1616: ST_TO_ADDR
// end ; end ;
1617: GO 1447
1619: POP
1620: POP
// if not burlakPosition then
1621: LD_VAR 0 11
1625: NOT
1626: IFFALSE 1638
// burlakPosition = nearPosition ;
1628: LD_ADDR_VAR 0 11
1632: PUSH
1633: LD_VAR 0 10
1637: ST_TO_ADDR
// if areaPoints then
1638: LD_VAR 0 9
1642: IFFALSE 1690
// begin areaPoints = Delete2D ( areaPoints , 1 , index ) ;
1644: LD_ADDR_VAR 0 9
1648: PUSH
1649: LD_VAR 0 9
1653: PPUSH
1654: LD_INT 1
1656: PPUSH
1657: LD_VAR 0 13
1661: PPUSH
1662: CALL 12614 0 3
1666: ST_TO_ADDR
// areaPoints = Delete2D ( areaPoints , 2 , index ) ;
1667: LD_ADDR_VAR 0 9
1671: PUSH
1672: LD_VAR 0 9
1676: PPUSH
1677: LD_INT 2
1679: PPUSH
1680: LD_VAR 0 13
1684: PPUSH
1685: CALL 12614 0 3
1689: ST_TO_ADDR
// end ; PlaceUnitXY ( car , nearPosition [ 1 ] , nearPosition [ 2 ] , false ) ;
1690: LD_VAR 0 4
1694: PPUSH
1695: LD_VAR 0 10
1699: PUSH
1700: LD_INT 1
1702: ARRAY
1703: PPUSH
1704: LD_VAR 0 10
1708: PUSH
1709: LD_INT 2
1711: ARRAY
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 48
// case vehiclesFrom05 [ i ] [ 6 ] of Bur :
1720: LD_EXP 1
1724: PUSH
1725: LD_VAR 0 2
1729: ARRAY
1730: PUSH
1731: LD_INT 6
1733: ARRAY
1734: PUSH
1735: LD_STRING Bur
1737: DOUBLE
1738: EQUAL
1739: IFTRUE 1743
1741: GO 1760
1743: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
1744: LD_EXP 39
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL_OW 52
1758: GO 1936
1760: LD_STRING Kar
1762: DOUBLE
1763: EQUAL
1764: IFTRUE 1768
1766: GO 1785
1768: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
1769: LD_EXP 40
1773: PPUSH
1774: LD_VAR 0 4
1778: PPUSH
1779: CALL_OW 52
1783: GO 1936
1785: LD_STRING Ptr
1787: DOUBLE
1788: EQUAL
1789: IFTRUE 1793
1791: GO 1810
1793: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
1794: LD_EXP 41
1798: PPUSH
1799: LD_VAR 0 4
1803: PPUSH
1804: CALL_OW 52
1808: GO 1936
1810: LD_STRING Glb
1812: DOUBLE
1813: EQUAL
1814: IFTRUE 1818
1816: GO 1835
1818: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
1819: LD_EXP 42
1823: PPUSH
1824: LD_VAR 0 4
1828: PPUSH
1829: CALL_OW 52
1833: GO 1936
1835: LD_STRING Pet
1837: DOUBLE
1838: EQUAL
1839: IFTRUE 1843
1841: GO 1860
1843: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
1844: LD_EXP 43
1848: PPUSH
1849: LD_VAR 0 4
1853: PPUSH
1854: CALL_OW 52
1858: GO 1936
1860: LD_STRING Dol
1862: DOUBLE
1863: EQUAL
1864: IFTRUE 1868
1866: GO 1885
1868: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
1869: LD_EXP 45
1873: PPUSH
1874: LD_VAR 0 4
1878: PPUSH
1879: CALL_OW 52
1883: GO 1936
1885: LD_STRING Lip
1887: DOUBLE
1888: EQUAL
1889: IFTRUE 1893
1891: GO 1910
1893: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
1894: LD_EXP 46
1898: PPUSH
1899: LD_VAR 0 4
1903: PPUSH
1904: CALL_OW 52
1908: GO 1936
1910: LD_STRING Tit
1912: DOUBLE
1913: EQUAL
1914: IFTRUE 1918
1916: GO 1935
1918: POP
// PlaceHumanInUnit ( Titov , car ) ; end ;
1919: LD_EXP 44
1923: PPUSH
1924: LD_VAR 0 4
1928: PPUSH
1929: CALL_OW 52
1933: GO 1936
1935: POP
// end ;
1936: GO 1275
1938: POP
1939: POP
// cargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
1940: LD_ADDR_VAR 0 6
1944: PUSH
1945: LD_INT 22
1947: PUSH
1948: LD_INT 3
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: PUSH
1955: LD_INT 21
1957: PUSH
1958: LD_INT 2
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: LD_INT 34
1970: PUSH
1971: LD_INT 51
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 34
1980: PUSH
1981: LD_INT 32
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: PUSH
1988: LD_INT 34
1990: PUSH
1991: LD_INT 12
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: LIST
2008: PPUSH
2009: CALL_OW 69
2013: ST_TO_ADDR
// bigCargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 89 ] ] ) ;
2014: LD_ADDR_VAR 0 7
2018: PUSH
2019: LD_INT 22
2021: PUSH
2022: LD_INT 3
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PUSH
2029: LD_INT 21
2031: PUSH
2032: LD_INT 2
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: PUSH
2039: LD_INT 34
2041: PUSH
2042: LD_INT 89
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: PPUSH
2054: CALL_OW 69
2058: ST_TO_ADDR
// if cargoList then
2059: LD_VAR 0 6
2063: IFFALSE 2253
// for i = 1 to cargoList do
2065: LD_ADDR_VAR 0 2
2069: PUSH
2070: DOUBLE
2071: LD_INT 1
2073: DEC
2074: ST_TO_ADDR
2075: LD_VAR 0 6
2079: PUSH
2080: FOR_TO
2081: IFFALSE 2251
// if resourcesFrom05 then
2083: LD_EXP 2
2087: IFFALSE 2249
// begin if not resourcesFrom05 [ i ] [ 1 ] > 100 or resourcesFrom05 [ i ] [ 2 ] > 100 or resourcesFrom05 [ i ] [ 3 ] > 100 then
2089: LD_EXP 2
2093: PUSH
2094: LD_VAR 0 2
2098: ARRAY
2099: PUSH
2100: LD_INT 1
2102: ARRAY
2103: PUSH
2104: LD_INT 100
2106: GREATER
2107: NOT
2108: PUSH
2109: LD_EXP 2
2113: PUSH
2114: LD_VAR 0 2
2118: ARRAY
2119: PUSH
2120: LD_INT 2
2122: ARRAY
2123: PUSH
2124: LD_INT 100
2126: GREATER
2127: OR
2128: PUSH
2129: LD_EXP 2
2133: PUSH
2134: LD_VAR 0 2
2138: ARRAY
2139: PUSH
2140: LD_INT 3
2142: ARRAY
2143: PUSH
2144: LD_INT 100
2146: GREATER
2147: OR
2148: IFFALSE 2249
// begin AddCargo ( cargoList [ i ] , 1 , resourcesFrom05 [ i ] [ 1 ] ) ;
2150: LD_VAR 0 6
2154: PUSH
2155: LD_VAR 0 2
2159: ARRAY
2160: PPUSH
2161: LD_INT 1
2163: PPUSH
2164: LD_EXP 2
2168: PUSH
2169: LD_VAR 0 2
2173: ARRAY
2174: PUSH
2175: LD_INT 1
2177: ARRAY
2178: PPUSH
2179: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resourcesFrom05 [ i ] [ 2 ] ) ;
2183: LD_VAR 0 6
2187: PUSH
2188: LD_VAR 0 2
2192: ARRAY
2193: PPUSH
2194: LD_INT 2
2196: PPUSH
2197: LD_EXP 2
2201: PUSH
2202: LD_VAR 0 2
2206: ARRAY
2207: PUSH
2208: LD_INT 2
2210: ARRAY
2211: PPUSH
2212: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resourcesFrom05 [ i ] [ 3 ] ) ;
2216: LD_VAR 0 6
2220: PUSH
2221: LD_VAR 0 2
2225: ARRAY
2226: PPUSH
2227: LD_INT 3
2229: PPUSH
2230: LD_EXP 2
2234: PUSH
2235: LD_VAR 0 2
2239: ARRAY
2240: PUSH
2241: LD_INT 3
2243: ARRAY
2244: PPUSH
2245: CALL_OW 291
// end ; end ;
2249: GO 2080
2251: POP
2252: POP
// if bigCargoList then
2253: LD_VAR 0 7
2257: IFFALSE 2446
// for i = 1 to bigCargoList do
2259: LD_ADDR_VAR 0 2
2263: PUSH
2264: DOUBLE
2265: LD_INT 1
2267: DEC
2268: ST_TO_ADDR
2269: LD_VAR 0 7
2273: PUSH
2274: FOR_TO
2275: IFFALSE 2444
// if resourcesFrom05 then
2277: LD_EXP 2
2281: IFFALSE 2442
// begin if resourcesFrom05 [ i ] [ 1 ] > 100 or resourcesFrom05 [ i ] [ 2 ] > 100 or resourcesFrom05 [ i ] [ 3 ] > 100 then
2283: LD_EXP 2
2287: PUSH
2288: LD_VAR 0 2
2292: ARRAY
2293: PUSH
2294: LD_INT 1
2296: ARRAY
2297: PUSH
2298: LD_INT 100
2300: GREATER
2301: PUSH
2302: LD_EXP 2
2306: PUSH
2307: LD_VAR 0 2
2311: ARRAY
2312: PUSH
2313: LD_INT 2
2315: ARRAY
2316: PUSH
2317: LD_INT 100
2319: GREATER
2320: OR
2321: PUSH
2322: LD_EXP 2
2326: PUSH
2327: LD_VAR 0 2
2331: ARRAY
2332: PUSH
2333: LD_INT 3
2335: ARRAY
2336: PUSH
2337: LD_INT 100
2339: GREATER
2340: OR
2341: IFFALSE 2442
// begin AddCargo ( bigCargoList [ i ] , 1 , resourcesFrom05 [ i ] [ 1 ] ) ;
2343: LD_VAR 0 7
2347: PUSH
2348: LD_VAR 0 2
2352: ARRAY
2353: PPUSH
2354: LD_INT 1
2356: PPUSH
2357: LD_EXP 2
2361: PUSH
2362: LD_VAR 0 2
2366: ARRAY
2367: PUSH
2368: LD_INT 1
2370: ARRAY
2371: PPUSH
2372: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 2 , resourcesFrom05 [ i ] [ 2 ] ) ;
2376: LD_VAR 0 7
2380: PUSH
2381: LD_VAR 0 2
2385: ARRAY
2386: PPUSH
2387: LD_INT 2
2389: PPUSH
2390: LD_EXP 2
2394: PUSH
2395: LD_VAR 0 2
2399: ARRAY
2400: PUSH
2401: LD_INT 2
2403: ARRAY
2404: PPUSH
2405: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 3 , resourcesFrom05 [ i ] [ 3 ] ) ;
2409: LD_VAR 0 7
2413: PUSH
2414: LD_VAR 0 2
2418: ARRAY
2419: PPUSH
2420: LD_INT 3
2422: PPUSH
2423: LD_EXP 2
2427: PUSH
2428: LD_VAR 0 2
2432: ARRAY
2433: PUSH
2434: LD_INT 3
2436: ARRAY
2437: PPUSH
2438: CALL_OW 291
// end ; end ;
2442: GO 2274
2444: POP
2445: POP
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_class , class_engineer ] ] ) then
2446: LD_INT 22
2448: PUSH
2449: LD_INT 3
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PUSH
2456: LD_INT 21
2458: PUSH
2459: LD_INT 1
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PUSH
2466: LD_INT 23
2468: PUSH
2469: LD_INT 3
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: PUSH
2476: LD_INT 25
2478: PUSH
2479: LD_INT 2
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: EMPTY
2487: LIST
2488: LIST
2489: LIST
2490: LIST
2491: PPUSH
2492: CALL_OW 69
2496: NOT
2497: IFFALSE 2602
// begin if IsOk ( Lipshchin ) then
2499: LD_EXP 46
2503: PPUSH
2504: CALL_OW 302
2508: IFFALSE 2524
// SetClass ( Lipshchin , class_engineer ) else
2510: LD_EXP 46
2514: PPUSH
2515: LD_INT 2
2517: PPUSH
2518: CALL_OW 336
2522: GO 2602
// begin tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ;
2524: LD_ADDR_VAR 0 5
2528: PUSH
2529: LD_INT 22
2531: PUSH
2532: LD_INT 3
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: PUSH
2539: LD_INT 21
2541: PUSH
2542: LD_INT 1
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: PUSH
2549: LD_INT 23
2551: PUSH
2552: LD_INT 3
2554: PUSH
2555: EMPTY
2556: LIST
2557: LIST
2558: PUSH
2559: LD_INT 50
2561: PUSH
2562: EMPTY
2563: LIST
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: PPUSH
2571: CALL_OW 69
2575: ST_TO_ADDR
// SetClass ( tmp [ rand ( 0 , tmp ) ] , class_engineer ) ;
2576: LD_VAR 0 5
2580: PUSH
2581: LD_INT 0
2583: PPUSH
2584: LD_VAR 0 5
2588: PPUSH
2589: CALL_OW 12
2593: ARRAY
2594: PPUSH
2595: LD_INT 2
2597: PPUSH
2598: CALL_OW 336
// end ; end ; SetTech ( tech_ApeLang , 3 , apeTechsStatus [ 1 ] ) ;
2602: LD_INT 1
2604: PPUSH
2605: LD_INT 3
2607: PPUSH
2608: LD_EXP 5
2612: PUSH
2613: LD_INT 1
2615: ARRAY
2616: PPUSH
2617: CALL_OW 322
// SetTech ( tech_ApePsych , 3 , apeTechsStatus [ 2 ] ) ;
2621: LD_INT 2
2623: PPUSH
2624: LD_INT 3
2626: PPUSH
2627: LD_EXP 5
2631: PUSH
2632: LD_INT 2
2634: ARRAY
2635: PPUSH
2636: CALL_OW 322
// SetTech ( tech_ApeAgres , 3 , apeTechsStatus [ 3 ] ) ;
2640: LD_INT 11
2642: PPUSH
2643: LD_INT 3
2645: PPUSH
2646: LD_EXP 5
2650: PUSH
2651: LD_INT 3
2653: ARRAY
2654: PPUSH
2655: CALL_OW 322
// end ;
2659: LD_VAR 0 1
2663: RET
// export function PrepareVsevolod ; var i , un ; begin
2664: LD_INT 0
2666: PPUSH
2667: PPUSH
2668: PPUSH
// uc_side = 6 ;
2669: LD_ADDR_OWVAR 20
2673: PUSH
2674: LD_INT 6
2676: ST_TO_ADDR
// uc_nation = 3 ;
2677: LD_ADDR_OWVAR 21
2681: PUSH
2682: LD_INT 3
2684: ST_TO_ADDR
// vsevolodTeam = [ ] ;
2685: LD_ADDR_EXP 52
2689: PUSH
2690: EMPTY
2691: ST_TO_ADDR
// Vsevolod := PrepareUnitExt ( Vsevolod , false , class_soldier ) ;
2692: LD_ADDR_EXP 51
2696: PUSH
2697: LD_STRING Vsevolod
2699: PPUSH
2700: LD_INT 0
2702: PPUSH
2703: LD_INT 1
2705: PPUSH
2706: CALL 11785 0 3
2710: ST_TO_ADDR
// PlaceUnitArea ( Vsevolod , VsevolodSpawnArea , false ) ;
2711: LD_EXP 51
2715: PPUSH
2716: LD_INT 7
2718: PPUSH
2719: LD_INT 0
2721: PPUSH
2722: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Vsevolod ;
2726: LD_ADDR_EXP 52
2730: PUSH
2731: LD_EXP 52
2735: PUSH
2736: LD_EXP 51
2740: ADD
2741: ST_TO_ADDR
// Petr = PrepareUnitExt ( SPetr , false , class_engineer ) ;
2742: LD_ADDR_EXP 53
2746: PUSH
2747: LD_STRING SPetr
2749: PPUSH
2750: LD_INT 0
2752: PPUSH
2753: LD_INT 2
2755: PPUSH
2756: CALL 11785 0 3
2760: ST_TO_ADDR
// PlaceUnitArea ( Petr , VsevolodSpawnArea , false ) ;
2761: LD_EXP 53
2765: PPUSH
2766: LD_INT 7
2768: PPUSH
2769: LD_INT 0
2771: PPUSH
2772: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Petr ;
2776: LD_ADDR_EXP 52
2780: PUSH
2781: LD_EXP 52
2785: PUSH
2786: LD_EXP 53
2790: ADD
2791: ST_TO_ADDR
// Igor = PrepareUnitExt ( SIgor , false , class_soldier ) ;
2792: LD_ADDR_EXP 54
2796: PUSH
2797: LD_STRING SIgor
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: LD_INT 1
2805: PPUSH
2806: CALL 11785 0 3
2810: ST_TO_ADDR
// PlaceUnitArea ( Igor , VsevolodSpawnArea , false ) ;
2811: LD_EXP 54
2815: PPUSH
2816: LD_INT 7
2818: PPUSH
2819: LD_INT 0
2821: PPUSH
2822: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Igor ;
2826: LD_ADDR_EXP 52
2830: PUSH
2831: LD_EXP 52
2835: PUSH
2836: LD_EXP 54
2840: ADD
2841: ST_TO_ADDR
// Boris = PrepareUnitExt ( SBoris , false , class_soldier ) ;
2842: LD_ADDR_EXP 55
2846: PUSH
2847: LD_STRING SBoris
2849: PPUSH
2850: LD_INT 0
2852: PPUSH
2853: LD_INT 1
2855: PPUSH
2856: CALL 11785 0 3
2860: ST_TO_ADDR
// PlaceUnitArea ( Boris , VsevolodSpawnArea , false ) ;
2861: LD_EXP 55
2865: PPUSH
2866: LD_INT 7
2868: PPUSH
2869: LD_INT 0
2871: PPUSH
2872: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Boris ;
2876: LD_ADDR_EXP 52
2880: PUSH
2881: LD_EXP 52
2885: PUSH
2886: LD_EXP 55
2890: ADD
2891: ST_TO_ADDR
// end ;
2892: LD_VAR 0 1
2896: RET
// export function SpawnPlatonovReinforces ; var i , un , veh ; begin
2897: LD_INT 0
2899: PPUSH
2900: PPUSH
2901: PPUSH
2902: PPUSH
// uc_side = 3 ;
2903: LD_ADDR_OWVAR 20
2907: PUSH
2908: LD_INT 3
2910: ST_TO_ADDR
// uc_nation = 3 ;
2911: LD_ADDR_OWVAR 21
2915: PUSH
2916: LD_INT 3
2918: ST_TO_ADDR
// PrepareSoldier ( false , 4 ) ;
2919: LD_INT 0
2921: PPUSH
2922: LD_INT 4
2924: PPUSH
2925: CALL_OW 381
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] , rand ( 50 , 60 ) ) ;
2929: LD_INT 22
2931: PPUSH
2932: LD_INT 1
2934: PPUSH
2935: LD_INT 1
2937: PPUSH
2938: LD_INT 43
2940: PUSH
2941: LD_INT 44
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PUSH
2948: LD_INT 1
2950: PPUSH
2951: LD_INT 2
2953: PPUSH
2954: CALL_OW 12
2958: ARRAY
2959: PPUSH
2960: LD_INT 50
2962: PPUSH
2963: LD_INT 60
2965: PPUSH
2966: CALL_OW 12
2970: PPUSH
2971: CALL 46863 0 5
// veh = CreateVehicle ;
2975: LD_ADDR_VAR 0 4
2979: PUSH
2980: CALL_OW 45
2984: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
2985: LD_VAR 0 4
2989: PPUSH
2990: LD_INT 0
2992: PPUSH
2993: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 230 , false ) ;
2997: LD_VAR 0 4
3001: PPUSH
3002: LD_INT 134
3004: PPUSH
3005: LD_INT 230
3007: PPUSH
3008: LD_INT 0
3010: PPUSH
3011: CALL_OW 48
// if Belkov then
3015: LD_EXP 49
3019: IFFALSE 3037
// PlaceHumanInUnit ( Belkov , veh ) else
3021: LD_EXP 49
3025: PPUSH
3026: LD_VAR 0 4
3030: PPUSH
3031: CALL_OW 52
3035: GO 3090
// if Difficulty = 1 or Difficulty = 2 then
3037: LD_OWVAR 67
3041: PUSH
3042: LD_INT 1
3044: EQUAL
3045: PUSH
3046: LD_OWVAR 67
3050: PUSH
3051: LD_INT 2
3053: EQUAL
3054: OR
3055: IFFALSE 3090
// begin ConvoyBoris = PrepareUnitExt ( SCBoris , false , class_soldier ) ;
3057: LD_ADDR_EXP 56
3061: PUSH
3062: LD_STRING SCBoris
3064: PPUSH
3065: LD_INT 0
3067: PPUSH
3068: LD_INT 1
3070: PPUSH
3071: CALL 11785 0 3
3075: ST_TO_ADDR
// PlaceHumanInUnit ( ConvoyBoris , veh ) ;
3076: LD_EXP 56
3080: PPUSH
3081: LD_VAR 0 4
3085: PPUSH
3086: CALL_OW 52
// end ; PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3090: LD_INT 22
3092: PPUSH
3093: LD_INT 1
3095: PPUSH
3096: LD_INT 1
3098: PPUSH
3099: LD_INT 51
3101: PPUSH
3102: LD_INT 50
3104: PPUSH
3105: LD_INT 60
3107: PPUSH
3108: CALL_OW 12
3112: PPUSH
3113: CALL 46863 0 5
// veh = CreateVehicle ;
3117: LD_ADDR_VAR 0 4
3121: PUSH
3122: CALL_OW 45
3126: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3127: LD_VAR 0 4
3131: PPUSH
3132: LD_INT 0
3134: PPUSH
3135: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 233 , false ) ;
3139: LD_VAR 0 4
3143: PPUSH
3144: LD_INT 134
3146: PPUSH
3147: LD_INT 233
3149: PPUSH
3150: LD_INT 0
3152: PPUSH
3153: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
3157: LD_VAR 0 4
3161: PPUSH
3162: LD_INT 1
3164: PPUSH
3165: LD_INT 100
3167: PPUSH
3168: CALL_OW 290
// if Belkov2 then
3172: LD_EXP 50
3176: IFFALSE 3194
// PlaceHumanInUnit ( Belkov2 , veh ) else
3178: LD_EXP 50
3182: PPUSH
3183: LD_VAR 0 4
3187: PPUSH
3188: CALL_OW 52
3192: GO 3237
// if Difficulty = 1 then
3194: LD_OWVAR 67
3198: PUSH
3199: LD_INT 1
3201: EQUAL
3202: IFFALSE 3237
// begin ConvoyIbrahim = PrepareUnitExt ( SCIbrahim , false , class_soldier ) ;
3204: LD_ADDR_EXP 57
3208: PUSH
3209: LD_STRING SCIbrahim
3211: PPUSH
3212: LD_INT 0
3214: PPUSH
3215: LD_INT 1
3217: PPUSH
3218: CALL 11785 0 3
3222: ST_TO_ADDR
// PlaceHumanInUnit ( ConvoyIbrahim , veh ) ;
3223: LD_EXP 57
3227: PPUSH
3228: LD_VAR 0 4
3232: PPUSH
3233: CALL_OW 52
// end ; if Kirilenkova then
3237: LD_EXP 48
3241: IFFALSE 3339
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3243: LD_INT 22
3245: PPUSH
3246: LD_INT 1
3248: PPUSH
3249: LD_INT 1
3251: PPUSH
3252: LD_INT 51
3254: PPUSH
3255: LD_INT 50
3257: PPUSH
3258: LD_INT 60
3260: PPUSH
3261: CALL_OW 12
3265: PPUSH
3266: CALL 46863 0 5
// veh = CreateVehicle ;
3270: LD_ADDR_VAR 0 4
3274: PUSH
3275: CALL_OW 45
3279: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3280: LD_VAR 0 4
3284: PPUSH
3285: LD_INT 0
3287: PPUSH
3288: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 236 , false ) ;
3292: LD_VAR 0 4
3296: PPUSH
3297: LD_INT 134
3299: PPUSH
3300: LD_INT 236
3302: PPUSH
3303: LD_INT 0
3305: PPUSH
3306: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
3310: LD_VAR 0 4
3314: PPUSH
3315: LD_INT 1
3317: PPUSH
3318: LD_INT 100
3320: PPUSH
3321: CALL_OW 290
// PlaceHumanInUnit ( Kirilenkova , veh ) ;
3325: LD_EXP 48
3329: PPUSH
3330: LD_VAR 0 4
3334: PPUSH
3335: CALL_OW 52
// end ; end ; end_of_file
3339: LD_VAR 0 1
3343: RET
// export VanHouten ; export ovsyenkoBase , terminalBase , headAmBase ; export trapTeam , convoyTeam , attackTeam ; export function PrepareAmericans ; begin
3344: LD_INT 0
3346: PPUSH
// PrepareOvsyenko ;
3347: CALL 3364 0 0
// PrepareTerminal ;
3351: CALL 3565 0 0
// PrepareMainAmericanBase ;
3355: CALL 3648 0 0
// end ;
3359: LD_VAR 0 1
3363: RET
// function PrepareOvsyenko ; var soldiersAmount ; begin
3364: LD_INT 0
3366: PPUSH
3367: PPUSH
// uc_side = 1 ;
3368: LD_ADDR_OWVAR 20
3372: PUSH
3373: LD_INT 1
3375: ST_TO_ADDR
// uc_nation = nation_american ;
3376: LD_ADDR_OWVAR 21
3380: PUSH
3381: LD_INT 1
3383: ST_TO_ADDR
// soldiersAmount = 3 ;
3384: LD_ADDR_VAR 0 2
3388: PUSH
3389: LD_INT 3
3391: ST_TO_ADDR
// if fastBreakthrough then
3392: LD_EXP 3
3396: IFFALSE 3414
// begin RemoveUnit ( ovs_bun2 ) ;
3398: LD_INT 229
3400: PPUSH
3401: CALL_OW 64
// RemoveUnit ( ovs_bun3 ) ;
3405: LD_INT 258
3407: PPUSH
3408: CALL_OW 64
// end else
3412: GO 3422
// soldiersAmount = 4 ;
3414: LD_ADDR_VAR 0 2
3418: PUSH
3419: LD_INT 4
3421: ST_TO_ADDR
// ovsyenkoBase := Nef_PrepareBase ( ovsyenko , OvsyenkoBaseArea , ovsyenko , enemySkillLevel , [ ovsyenkoStartCrates , 50 , 0 ] , 1 , [ soldiersAmount , 1 , 0 , 1 ] ) ;
3422: LD_ADDR_EXP 59
3426: PUSH
3427: LD_INT 86
3429: PPUSH
3430: LD_INT 3
3432: PPUSH
3433: LD_STRING ovsyenko
3435: PPUSH
3436: LD_EXP 34
3440: PPUSH
3441: LD_EXP 35
3445: PUSH
3446: LD_INT 50
3448: PUSH
3449: LD_INT 0
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: LIST
3456: PPUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_VAR 0 2
3464: PUSH
3465: LD_INT 1
3467: PUSH
3468: LD_INT 0
3470: PUSH
3471: LD_INT 1
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: PPUSH
3480: CALL 12686 0 7
3484: ST_TO_ADDR
// case Difficulty of 1 :
3485: LD_OWVAR 67
3489: PUSH
3490: LD_INT 1
3492: DOUBLE
3493: EQUAL
3494: IFTRUE 3498
3496: GO 3511
3498: POP
// PlaceWeaponTurret ( ovs_bun1 , us_double_gun ) ; 2 :
3499: LD_INT 97
3501: PPUSH
3502: LD_INT 5
3504: PPUSH
3505: CALL_OW 431
3509: GO 3560
3511: LD_INT 2
3513: DOUBLE
3514: EQUAL
3515: IFTRUE 3519
3517: GO 3532
3519: POP
// PlaceWeaponTurret ( ovs_bun1 , us_light_gun ) ; 3 .. 4 :
3520: LD_INT 97
3522: PPUSH
3523: LD_INT 3
3525: PPUSH
3526: CALL_OW 431
3530: GO 3560
3532: LD_INT 3
3534: DOUBLE
3535: GREATEREQUAL
3536: IFFALSE 3544
3538: LD_INT 4
3540: DOUBLE
3541: LESSEQUAL
3542: IFTRUE 3546
3544: GO 3559
3546: POP
// PlaceWeaponTurret ( ovs_bun1 , us_gatling_gun ) ; end ;
3547: LD_INT 97
3549: PPUSH
3550: LD_INT 4
3552: PPUSH
3553: CALL_OW 431
3557: GO 3560
3559: POP
// end ;
3560: LD_VAR 0 1
3564: RET
// function PrepareTerminal ; begin
3565: LD_INT 0
3567: PPUSH
// uc_side = 1 ;
3568: LD_ADDR_OWVAR 20
3572: PUSH
3573: LD_INT 1
3575: ST_TO_ADDR
// uc_nation = nation_american ;
3576: LD_ADDR_OWVAR 21
3580: PUSH
3581: LD_INT 1
3583: ST_TO_ADDR
// terminalBase := Nef_PrepareBase ( terminal , terminalBaseArea , terminal , enemySkillLevel , [ 100 , 50 , 0 ] , 1 , [ 2 , 1 , 0 , 0 ] ) ;
3584: LD_ADDR_EXP 60
3588: PUSH
3589: LD_INT 168
3591: PPUSH
3592: LD_INT 4
3594: PPUSH
3595: LD_STRING terminal
3597: PPUSH
3598: LD_EXP 34
3602: PPUSH
3603: LD_INT 100
3605: PUSH
3606: LD_INT 50
3608: PUSH
3609: LD_INT 0
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: PPUSH
3617: LD_INT 1
3619: PPUSH
3620: LD_INT 2
3622: PUSH
3623: LD_INT 1
3625: PUSH
3626: LD_INT 0
3628: PUSH
3629: LD_INT 0
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL 12686 0 7
3642: ST_TO_ADDR
// end ;
3643: LD_VAR 0 1
3647: RET
// function PrepareMainAmericanBase ; begin
3648: LD_INT 0
3650: PPUSH
// uc_side = 1 ;
3651: LD_ADDR_OWVAR 20
3655: PUSH
3656: LD_INT 1
3658: ST_TO_ADDR
// uc_nation = nation_american ;
3659: LD_ADDR_OWVAR 21
3663: PUSH
3664: LD_INT 1
3666: ST_TO_ADDR
// if fastBreakthrough then
3667: LD_EXP 3
3671: IFFALSE 3680
// RemoveUnit ( ovs_bun2 ) ;
3673: LD_INT 229
3675: PPUSH
3676: CALL_OW 64
// headAmBase := Nef_PrepareBase ( headamdepot , HeadAmericanBaseArea ,  , enemySkillLevel , [ 3000 , 1000 , 0 ] , 1 , [ 9 , 3 , 6 , 2 ] ) ;
3680: LD_ADDR_EXP 61
3684: PUSH
3685: LD_INT 106
3687: PPUSH
3688: LD_INT 5
3690: PPUSH
3691: LD_STRING 
3693: PPUSH
3694: LD_EXP 34
3698: PPUSH
3699: LD_INT 3000
3701: PUSH
3702: LD_INT 1000
3704: PUSH
3705: LD_INT 0
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: LIST
3712: PPUSH
3713: LD_INT 1
3715: PPUSH
3716: LD_INT 9
3718: PUSH
3719: LD_INT 3
3721: PUSH
3722: LD_INT 6
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: PPUSH
3734: CALL 12686 0 7
3738: ST_TO_ADDR
// VanHouten = PrepareUnitExt ( VanHouten , false , class_soldier ) ;
3739: LD_ADDR_EXP 58
3743: PUSH
3744: LD_STRING VanHouten
3746: PPUSH
3747: LD_INT 0
3749: PPUSH
3750: LD_INT 1
3752: PPUSH
3753: CALL 11785 0 3
3757: ST_TO_ADDR
// headAmBase = headAmBase ^ VanHouten ;
3758: LD_ADDR_EXP 61
3762: PUSH
3763: LD_EXP 61
3767: PUSH
3768: LD_EXP 58
3772: ADD
3773: ST_TO_ADDR
// PlaceUnitXYR ( VanHouten , 35 , 57 , 3 , false ) ;
3774: LD_EXP 58
3778: PPUSH
3779: LD_INT 35
3781: PPUSH
3782: LD_INT 57
3784: PPUSH
3785: LD_INT 3
3787: PPUSH
3788: LD_INT 0
3790: PPUSH
3791: CALL_OW 50
// end ;
3795: LD_VAR 0 1
3799: RET
// export function PrepareTrap ; var i , un , nearEnemyUnit ; begin
3800: LD_INT 0
3802: PPUSH
3803: PPUSH
3804: PPUSH
3805: PPUSH
// uc_side = 1 ;
3806: LD_ADDR_OWVAR 20
3810: PUSH
3811: LD_INT 1
3813: ST_TO_ADDR
// uc_nation = nation_american ;
3814: LD_ADDR_OWVAR 21
3818: PUSH
3819: LD_INT 1
3821: ST_TO_ADDR
// for i := 1 to trapAmount do
3822: LD_ADDR_VAR 0 2
3826: PUSH
3827: DOUBLE
3828: LD_INT 1
3830: DEC
3831: ST_TO_ADDR
3832: LD_EXP 37
3836: PUSH
3837: FOR_TO
3838: IFFALSE 3972
// begin PrepareSoldier ( false , enemySkillLevel ) ;
3840: LD_INT 0
3842: PPUSH
3843: LD_EXP 34
3847: PPUSH
3848: CALL_OW 381
// un = CreateHuman ;
3852: LD_ADDR_VAR 0 3
3856: PUSH
3857: CALL_OW 44
3861: ST_TO_ADDR
// trapTeam = trapTeam ^ un ;
3862: LD_ADDR_EXP 62
3866: PUSH
3867: LD_EXP 62
3871: PUSH
3872: LD_VAR 0 3
3876: ADD
3877: ST_TO_ADDR
// PlaceUnitArea ( un , TrapSpawnArea , false ) ;
3878: LD_VAR 0 3
3882: PPUSH
3883: LD_INT 11
3885: PPUSH
3886: LD_INT 0
3888: PPUSH
3889: CALL_OW 49
// nearEnemyUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] ] ) , un ) ;
3893: LD_ADDR_VAR 0 4
3897: PUSH
3898: LD_INT 22
3900: PUSH
3901: LD_INT 3
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: PUSH
3908: EMPTY
3909: LIST
3910: PPUSH
3911: CALL_OW 69
3915: PPUSH
3916: LD_VAR 0 3
3920: PPUSH
3921: CALL_OW 74
3925: ST_TO_ADDR
// ComAgressiveMove ( un , GetX ( nearEnemyUnit ) , GetY ( nearEnemyUnit ) ) ;
3926: LD_VAR 0 3
3930: PPUSH
3931: LD_VAR 0 4
3935: PPUSH
3936: CALL_OW 250
3940: PPUSH
3941: LD_VAR 0 4
3945: PPUSH
3946: CALL_OW 251
3950: PPUSH
3951: CALL_OW 114
// AddComAgressiveMove ( un , 106 , 124 ) ;
3955: LD_VAR 0 3
3959: PPUSH
3960: LD_INT 106
3962: PPUSH
3963: LD_INT 124
3965: PPUSH
3966: CALL_OW 174
// end ;
3970: GO 3837
3972: POP
3973: POP
// end ;
3974: LD_VAR 0 1
3978: RET
// export function PrepareSoldiersInBunkers ; begin
3979: LD_INT 0
3981: PPUSH
// PrepareSolBun ( enemySkilLLevel , non_bun1 ) ;
3982: LD_EXP 34
3986: PPUSH
3987: LD_INT 236
3989: PPUSH
3990: CALL 15230 0 2
// PrepareSolBun ( enemySkilLLevel , non_bun2 ) ;
3994: LD_EXP 34
3998: PPUSH
3999: LD_INT 240
4001: PPUSH
4002: CALL 15230 0 2
// PrepareSolBun ( enemySkilLLevel , non_bun3 ) ;
4006: LD_EXP 34
4010: PPUSH
4011: LD_INT 243
4013: PPUSH
4014: CALL 15230 0 2
// end ;
4018: LD_VAR 0 1
4022: RET
// export function PrepareConvoy ; var i , un , veh ; begin
4023: LD_INT 0
4025: PPUSH
4026: PPUSH
4027: PPUSH
4028: PPUSH
// convoyTeam = [ ] ;
4029: LD_ADDR_EXP 63
4033: PUSH
4034: EMPTY
4035: ST_TO_ADDR
// uc_side = 1 ;
4036: LD_ADDR_OWVAR 20
4040: PUSH
4041: LD_INT 1
4043: ST_TO_ADDR
// uc_nation = nation_american ;
4044: LD_ADDR_OWVAR 21
4048: PUSH
4049: LD_INT 1
4051: ST_TO_ADDR
// for i := 1 to 2 do
4052: LD_ADDR_VAR 0 2
4056: PUSH
4057: DOUBLE
4058: LD_INT 1
4060: DEC
4061: ST_TO_ADDR
4062: LD_INT 2
4064: PUSH
4065: FOR_TO
4066: IFFALSE 4197
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
4068: LD_INT 3
4070: PPUSH
4071: LD_INT 1
4073: PPUSH
4074: LD_INT 1
4076: PPUSH
4077: LD_INT 12
4079: PPUSH
4080: LD_INT 80
4082: PPUSH
4083: CALL 46863 0 5
// veh = CreateVehicle ;
4087: LD_ADDR_VAR 0 4
4091: PUSH
4092: CALL_OW 45
4096: ST_TO_ADDR
// AddCargo ( veh , mat_cans , 100 ) ;
4097: LD_VAR 0 4
4101: PPUSH
4102: LD_INT 1
4104: PPUSH
4105: LD_INT 100
4107: PPUSH
4108: CALL_OW 291
// convoyTeam = convoyTeam ^ veh ;
4112: LD_ADDR_EXP 63
4116: PUSH
4117: LD_EXP 63
4121: PUSH
4122: LD_VAR 0 4
4126: ADD
4127: ST_TO_ADDR
// PlaceUnitArea ( veh , AmericanSpawnArea1 , false ) ;
4128: LD_VAR 0 4
4132: PPUSH
4133: LD_INT 8
4135: PPUSH
4136: LD_INT 0
4138: PPUSH
4139: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
4143: LD_INT 0
4145: PPUSH
4146: LD_EXP 34
4150: PPUSH
4151: CALL_OW 383
// un = CreateHuman ;
4155: LD_ADDR_VAR 0 3
4159: PUSH
4160: CALL_OW 44
4164: ST_TO_ADDR
// convoyTeam = convoyTeam ^ un ;
4165: LD_ADDR_EXP 63
4169: PUSH
4170: LD_EXP 63
4174: PUSH
4175: LD_VAR 0 3
4179: ADD
4180: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4181: LD_VAR 0 3
4185: PPUSH
4186: LD_VAR 0 4
4190: PPUSH
4191: CALL_OW 52
// end ;
4195: GO 4065
4197: POP
4198: POP
// end ;
4199: LD_VAR 0 1
4203: RET
// export function PrepareAttack ; var i , un , veh ; begin
4204: LD_INT 0
4206: PPUSH
4207: PPUSH
4208: PPUSH
4209: PPUSH
// uc_side = 1 ;
4210: LD_ADDR_OWVAR 20
4214: PUSH
4215: LD_INT 1
4217: ST_TO_ADDR
// uc_nation = nation_american ;
4218: LD_ADDR_OWVAR 21
4222: PUSH
4223: LD_INT 1
4225: ST_TO_ADDR
// for i := 1 to 4 do
4226: LD_ADDR_VAR 0 2
4230: PUSH
4231: DOUBLE
4232: LD_INT 1
4234: DEC
4235: ST_TO_ADDR
4236: LD_INT 4
4238: PUSH
4239: FOR_TO
4240: IFFALSE 4379
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_light_gun , us_double_gun , us_gatling_gun ] [ Rand ( 1 , 3 ) ] , 80 ) ;
4242: LD_INT 3
4244: PPUSH
4245: LD_INT 1
4247: PPUSH
4248: LD_INT 1
4250: PPUSH
4251: LD_INT 3
4253: PUSH
4254: LD_INT 5
4256: PUSH
4257: LD_INT 4
4259: PUSH
4260: EMPTY
4261: LIST
4262: LIST
4263: LIST
4264: PUSH
4265: LD_INT 1
4267: PPUSH
4268: LD_INT 3
4270: PPUSH
4271: CALL_OW 12
4275: ARRAY
4276: PPUSH
4277: LD_INT 80
4279: PPUSH
4280: CALL 46863 0 5
// veh = CreateVehicle ;
4284: LD_ADDR_VAR 0 4
4288: PUSH
4289: CALL_OW 45
4293: ST_TO_ADDR
// attackTeam = attackTeam ^ veh ;
4294: LD_ADDR_EXP 64
4298: PUSH
4299: LD_EXP 64
4303: PUSH
4304: LD_VAR 0 4
4308: ADD
4309: ST_TO_ADDR
// PlaceUnitArea ( veh , AmericanSpawnArea2 , false ) ;
4310: LD_VAR 0 4
4314: PPUSH
4315: LD_INT 17
4317: PPUSH
4318: LD_INT 0
4320: PPUSH
4321: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
4325: LD_INT 0
4327: PPUSH
4328: LD_EXP 34
4332: PPUSH
4333: CALL_OW 383
// un = CreateHuman ;
4337: LD_ADDR_VAR 0 3
4341: PUSH
4342: CALL_OW 44
4346: ST_TO_ADDR
// attackTeam = attackTeam ^ un ;
4347: LD_ADDR_EXP 64
4351: PUSH
4352: LD_EXP 64
4356: PUSH
4357: LD_VAR 0 3
4361: ADD
4362: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4363: LD_VAR 0 3
4367: PPUSH
4368: LD_VAR 0 4
4372: PPUSH
4373: CALL_OW 52
// end ;
4377: GO 4239
4379: POP
4380: POP
// for i := 1 to 3 do
4381: LD_ADDR_VAR 0 2
4385: PUSH
4386: DOUBLE
4387: LD_INT 1
4389: DEC
4390: ST_TO_ADDR
4391: LD_INT 3
4393: PUSH
4394: FOR_TO
4395: IFFALSE 4452
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4397: LD_INT 0
4399: PPUSH
4400: LD_EXP 34
4404: PPUSH
4405: CALL_OW 381
// un = CreateHuman ;
4409: LD_ADDR_VAR 0 3
4413: PUSH
4414: CALL_OW 44
4418: ST_TO_ADDR
// attackTeam = attackTeam ^ un ;
4419: LD_ADDR_EXP 64
4423: PUSH
4424: LD_EXP 64
4428: PUSH
4429: LD_VAR 0 3
4433: ADD
4434: ST_TO_ADDR
// PlaceUnitArea ( un , AmericanSpawnArea2 , false ) ;
4435: LD_VAR 0 3
4439: PPUSH
4440: LD_INT 17
4442: PPUSH
4443: LD_INT 0
4445: PPUSH
4446: CALL_OW 49
// end ;
4450: GO 4394
4452: POP
4453: POP
// end ; end_of_file
4454: LD_VAR 0 1
4458: RET
// export function Nef_PrepareNature ; var i , un ; begin
4459: LD_INT 0
4461: PPUSH
4462: PPUSH
4463: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
4464: LD_ADDR_VAR 0 2
4468: PUSH
4469: DOUBLE
4470: LD_INT 1
4472: DEC
4473: ST_TO_ADDR
4474: LD_EXP 28
4478: PUSH
4479: LD_INT 1
4481: ARRAY
4482: PUSH
4483: FOR_TO
4484: IFFALSE 4594
// begin uc_side = 0 ;
4486: LD_ADDR_OWVAR 20
4490: PUSH
4491: LD_INT 0
4493: ST_TO_ADDR
// uc_nation = nation_nature ;
4494: LD_ADDR_OWVAR 21
4498: PUSH
4499: LD_INT 0
4501: ST_TO_ADDR
// hc_class = class_apeman ;
4502: LD_ADDR_OWVAR 28
4506: PUSH
4507: LD_INT 12
4509: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4510: LD_ADDR_OWVAR 31
4514: PUSH
4515: LD_EXP 29
4519: PUSH
4520: LD_INT 1
4522: ARRAY
4523: PUSH
4524: LD_EXP 29
4528: PUSH
4529: LD_INT 2
4531: ARRAY
4532: PUSH
4533: LD_EXP 29
4537: PUSH
4538: LD_INT 3
4540: ARRAY
4541: PUSH
4542: LD_EXP 29
4546: PUSH
4547: LD_INT 4
4549: ARRAY
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4557: LD_ADDR_OWVAR 35
4561: PUSH
4562: LD_EXP 30
4566: ST_TO_ADDR
// un = CreateHuman ;
4567: LD_ADDR_VAR 0 3
4571: PUSH
4572: CALL_OW 44
4576: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4577: LD_VAR 0 3
4581: PPUSH
4582: LD_INT 2
4584: PPUSH
4585: LD_INT 0
4587: PPUSH
4588: CALL_OW 49
// end ;
4592: GO 4483
4594: POP
4595: POP
// for i := 1 to animalsAmount [ 2 ] do
4596: LD_ADDR_VAR 0 2
4600: PUSH
4601: DOUBLE
4602: LD_INT 1
4604: DEC
4605: ST_TO_ADDR
4606: LD_EXP 28
4610: PUSH
4611: LD_INT 2
4613: ARRAY
4614: PUSH
4615: FOR_TO
4616: IFFALSE 4726
// begin uc_side = 0 ;
4618: LD_ADDR_OWVAR 20
4622: PUSH
4623: LD_INT 0
4625: ST_TO_ADDR
// uc_nation = nation_nature ;
4626: LD_ADDR_OWVAR 21
4630: PUSH
4631: LD_INT 0
4633: ST_TO_ADDR
// hc_class = class_phororhacos ;
4634: LD_ADDR_OWVAR 28
4638: PUSH
4639: LD_INT 18
4641: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4642: LD_ADDR_OWVAR 31
4646: PUSH
4647: LD_EXP 29
4651: PUSH
4652: LD_INT 1
4654: ARRAY
4655: PUSH
4656: LD_EXP 29
4660: PUSH
4661: LD_INT 2
4663: ARRAY
4664: PUSH
4665: LD_EXP 29
4669: PUSH
4670: LD_INT 3
4672: ARRAY
4673: PUSH
4674: LD_EXP 29
4678: PUSH
4679: LD_INT 4
4681: ARRAY
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4689: LD_ADDR_OWVAR 35
4693: PUSH
4694: LD_EXP 30
4698: ST_TO_ADDR
// un = CreateHuman ;
4699: LD_ADDR_VAR 0 3
4703: PUSH
4704: CALL_OW 44
4708: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4709: LD_VAR 0 3
4713: PPUSH
4714: LD_INT 2
4716: PPUSH
4717: LD_INT 0
4719: PPUSH
4720: CALL_OW 49
// end ;
4724: GO 4615
4726: POP
4727: POP
// for i := 1 to animalsAmount [ 3 ] do
4728: LD_ADDR_VAR 0 2
4732: PUSH
4733: DOUBLE
4734: LD_INT 1
4736: DEC
4737: ST_TO_ADDR
4738: LD_EXP 28
4742: PUSH
4743: LD_INT 3
4745: ARRAY
4746: PUSH
4747: FOR_TO
4748: IFFALSE 4858
// begin uc_side = 0 ;
4750: LD_ADDR_OWVAR 20
4754: PUSH
4755: LD_INT 0
4757: ST_TO_ADDR
// uc_nation = nation_nature ;
4758: LD_ADDR_OWVAR 21
4762: PUSH
4763: LD_INT 0
4765: ST_TO_ADDR
// hc_class = class_tiger ;
4766: LD_ADDR_OWVAR 28
4770: PUSH
4771: LD_INT 14
4773: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4774: LD_ADDR_OWVAR 31
4778: PUSH
4779: LD_EXP 29
4783: PUSH
4784: LD_INT 1
4786: ARRAY
4787: PUSH
4788: LD_EXP 29
4792: PUSH
4793: LD_INT 2
4795: ARRAY
4796: PUSH
4797: LD_EXP 29
4801: PUSH
4802: LD_INT 3
4804: ARRAY
4805: PUSH
4806: LD_EXP 29
4810: PUSH
4811: LD_INT 4
4813: ARRAY
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4821: LD_ADDR_OWVAR 35
4825: PUSH
4826: LD_EXP 30
4830: ST_TO_ADDR
// un = CreateHuman ;
4831: LD_ADDR_VAR 0 3
4835: PUSH
4836: CALL_OW 44
4840: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4841: LD_VAR 0 3
4845: PPUSH
4846: LD_INT 2
4848: PPUSH
4849: LD_INT 0
4851: PPUSH
4852: CALL_OW 49
// end ;
4856: GO 4747
4858: POP
4859: POP
// for i := 1 to animalsAmount [ 4 ] do
4860: LD_ADDR_VAR 0 2
4864: PUSH
4865: DOUBLE
4866: LD_INT 1
4868: DEC
4869: ST_TO_ADDR
4870: LD_EXP 28
4874: PUSH
4875: LD_INT 4
4877: ARRAY
4878: PUSH
4879: FOR_TO
4880: IFFALSE 4990
// begin uc_side = 0 ;
4882: LD_ADDR_OWVAR 20
4886: PUSH
4887: LD_INT 0
4889: ST_TO_ADDR
// uc_nation = nation_nature ;
4890: LD_ADDR_OWVAR 21
4894: PUSH
4895: LD_INT 0
4897: ST_TO_ADDR
// hc_class = 21 ;
4898: LD_ADDR_OWVAR 28
4902: PUSH
4903: LD_INT 21
4905: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4906: LD_ADDR_OWVAR 31
4910: PUSH
4911: LD_EXP 29
4915: PUSH
4916: LD_INT 1
4918: ARRAY
4919: PUSH
4920: LD_EXP 29
4924: PUSH
4925: LD_INT 2
4927: ARRAY
4928: PUSH
4929: LD_EXP 29
4933: PUSH
4934: LD_INT 3
4936: ARRAY
4937: PUSH
4938: LD_EXP 29
4942: PUSH
4943: LD_INT 4
4945: ARRAY
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4953: LD_ADDR_OWVAR 35
4957: PUSH
4958: LD_EXP 30
4962: ST_TO_ADDR
// un = CreateHuman ;
4963: LD_ADDR_VAR 0 3
4967: PUSH
4968: CALL_OW 44
4972: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4973: LD_VAR 0 3
4977: PPUSH
4978: LD_INT 2
4980: PPUSH
4981: LD_INT 0
4983: PPUSH
4984: CALL_OW 49
// end ;
4988: GO 4879
4990: POP
4991: POP
// for i := 1 to animalsAmount [ 5 ] do
4992: LD_ADDR_VAR 0 2
4996: PUSH
4997: DOUBLE
4998: LD_INT 1
5000: DEC
5001: ST_TO_ADDR
5002: LD_EXP 28
5006: PUSH
5007: LD_INT 5
5009: ARRAY
5010: PUSH
5011: FOR_TO
5012: IFFALSE 5073
// begin uc_side = 0 ;
5014: LD_ADDR_OWVAR 20
5018: PUSH
5019: LD_INT 0
5021: ST_TO_ADDR
// uc_nation = nation_nature ;
5022: LD_ADDR_OWVAR 21
5026: PUSH
5027: LD_INT 0
5029: ST_TO_ADDR
// vc_chassis := 31 ;
5030: LD_ADDR_OWVAR 37
5034: PUSH
5035: LD_INT 31
5037: ST_TO_ADDR
// vc_control := control_rider ;
5038: LD_ADDR_OWVAR 38
5042: PUSH
5043: LD_INT 4
5045: ST_TO_ADDR
// un := CreateVehicle ;
5046: LD_ADDR_VAR 0 3
5050: PUSH
5051: CALL_OW 45
5055: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
5056: LD_VAR 0 3
5060: PPUSH
5061: LD_INT 2
5063: PPUSH
5064: LD_INT 0
5066: PPUSH
5067: CALL_OW 49
// end ;
5071: GO 5011
5073: POP
5074: POP
// end ; end_of_file
5075: LD_VAR 0 1
5079: RET
// every 0 0$1 do
5080: GO 5082
5082: DISABLE
// InitAIManager ( 1 , 2 , UnitFilter ( ovsyenkoBase , [ f_type , unit_human ] ) , OvsyenkoBaseArea , OvsyenkoHealArea , false , false , 0 , 0 , 0 , 0 , 0 ) ;
5083: LD_INT 1
5085: PPUSH
5086: LD_INT 2
5088: PPUSH
5089: LD_EXP 59
5093: PPUSH
5094: LD_INT 21
5096: PUSH
5097: LD_INT 1
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PPUSH
5104: CALL_OW 72
5108: PPUSH
5109: LD_INT 3
5111: PPUSH
5112: LD_INT 6
5114: PPUSH
5115: LD_INT 0
5117: PPUSH
5118: LD_INT 0
5120: PPUSH
5121: LD_INT 0
5123: PPUSH
5124: LD_INT 0
5126: PPUSH
5127: LD_INT 0
5129: PPUSH
5130: LD_INT 0
5132: PPUSH
5133: LD_INT 0
5135: PPUSH
5136: CALL 5248 0 12
5140: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_weapon , us_bulldozer ] ] ) do var unit ;
5141: LD_INT 22
5143: PUSH
5144: LD_INT 1
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: LD_INT 50
5153: PUSH
5154: EMPTY
5155: LIST
5156: PUSH
5157: LD_INT 34
5159: PUSH
5160: LD_INT 14
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: LIST
5171: PPUSH
5172: CALL_OW 69
5176: IFFALSE 5245
5178: GO 5180
5180: DISABLE
5181: LD_INT 0
5183: PPUSH
// begin enable ;
5184: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_weapon , us_bulldozer ] ] ) do
5185: LD_ADDR_VAR 0 1
5189: PUSH
5190: LD_INT 22
5192: PUSH
5193: LD_INT 1
5195: PUSH
5196: EMPTY
5197: LIST
5198: LIST
5199: PUSH
5200: LD_INT 50
5202: PUSH
5203: EMPTY
5204: LIST
5205: PUSH
5206: LD_INT 34
5208: PUSH
5209: LD_INT 14
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: LIST
5220: PPUSH
5221: CALL_OW 69
5225: PUSH
5226: FOR_IN
5227: IFFALSE 5243
// CutTreeInArea ( unit , TreeArea ) ;
5229: LD_VAR 0 1
5233: PPUSH
5234: LD_INT 18
5236: PPUSH
5237: CALL 15087 0 2
5241: GO 5226
5243: POP
5244: POP
// end ;
5245: PPOPN 1
5247: END
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , repairArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack , canRebuild ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , offensiveUnits , offensiveReadyCounter , target1 , target2 , defenceUnits , weapons , chassis , baseBuildings , destroyedBuildings , destroyedBuilding , constructedBuilding , constructedBuildings , depot , factory , lab , bunkers , barracks , controlTowers , attackBuildings , enemyBuildings , damageBuilding , damageUnit , emptyBunkers , enemyUnits ; begin
5248: LD_INT 0
5250: PPUSH
5251: PPUSH
5252: PPUSH
5253: PPUSH
5254: PPUSH
5255: PPUSH
5256: PPUSH
5257: PPUSH
5258: PPUSH
5259: PPUSH
5260: PPUSH
5261: PPUSH
5262: PPUSH
5263: PPUSH
5264: PPUSH
5265: PPUSH
5266: PPUSH
5267: PPUSH
5268: PPUSH
5269: PPUSH
5270: PPUSH
5271: PPUSH
5272: PPUSH
5273: PPUSH
5274: PPUSH
5275: PPUSH
5276: PPUSH
5277: PPUSH
5278: PPUSH
5279: PPUSH
5280: PPUSH
5281: PPUSH
5282: PPUSH
5283: PPUSH
5284: PPUSH
5285: PPUSH
5286: PPUSH
5287: PPUSH
// personel = [ ] ;
5288: LD_ADDR_VAR 0 19
5292: PUSH
5293: EMPTY
5294: ST_TO_ADDR
// vehicles = [ ] ;
5295: LD_ADDR_VAR 0 25
5299: PUSH
5300: EMPTY
5301: ST_TO_ADDR
// destroyedBuildings = [ ] ;
5302: LD_ADDR_VAR 0 35
5306: PUSH
5307: EMPTY
5308: ST_TO_ADDR
// for unit in basePersonel do
5309: LD_ADDR_VAR 0 18
5313: PUSH
5314: LD_VAR 0 3
5318: PUSH
5319: FOR_IN
5320: IFFALSE 5340
// personel = personel ^ unit ;
5322: LD_ADDR_VAR 0 19
5326: PUSH
5327: LD_VAR 0 19
5331: PUSH
5332: LD_VAR 0 18
5336: ADD
5337: ST_TO_ADDR
5338: GO 5319
5340: POP
5341: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ] ] ) do
5342: LD_ADDR_VAR 0 24
5346: PUSH
5347: LD_VAR 0 4
5351: PPUSH
5352: LD_INT 22
5354: PUSH
5355: LD_VAR 0 1
5359: PUSH
5360: EMPTY
5361: LIST
5362: LIST
5363: PUSH
5364: LD_INT 21
5366: PUSH
5367: LD_INT 2
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: PUSH
5374: LD_INT 50
5376: PUSH
5377: EMPTY
5378: LIST
5379: PUSH
5380: LD_INT 3
5382: PUSH
5383: LD_INT 2
5385: PUSH
5386: LD_INT 34
5388: PUSH
5389: LD_INT 12
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: PUSH
5396: LD_INT 34
5398: PUSH
5399: LD_INT 51
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PUSH
5406: LD_INT 34
5408: PUSH
5409: LD_INT 32
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: PUSH
5416: LD_INT 34
5418: PUSH
5419: LD_INT 31
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: PUSH
5426: EMPTY
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: PPUSH
5443: CALL_OW 70
5447: PUSH
5448: FOR_IN
5449: IFFALSE 5469
// vehicles = vehicles ^ vehicle ;
5451: LD_ADDR_VAR 0 25
5455: PUSH
5456: LD_VAR 0 25
5460: PUSH
5461: LD_VAR 0 24
5465: ADD
5466: ST_TO_ADDR
5467: GO 5448
5469: POP
5470: POP
// repeat soldiers = [ ] ;
5471: LD_ADDR_VAR 0 20
5475: PUSH
5476: EMPTY
5477: ST_TO_ADDR
// engineers = [ ] ;
5478: LD_ADDR_VAR 0 21
5482: PUSH
5483: EMPTY
5484: ST_TO_ADDR
// mechanics = [ ] ;
5485: LD_ADDR_VAR 0 22
5489: PUSH
5490: EMPTY
5491: ST_TO_ADDR
// scientists = [ ] ;
5492: LD_ADDR_VAR 0 23
5496: PUSH
5497: EMPTY
5498: ST_TO_ADDR
// baseBuildings = [ ] ;
5499: LD_ADDR_VAR 0 34
5503: PUSH
5504: EMPTY
5505: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5506: LD_ADDR_VAR 0 39
5510: PUSH
5511: LD_VAR 0 4
5515: PPUSH
5516: LD_INT 22
5518: PUSH
5519: LD_VAR 0 1
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: PUSH
5528: LD_INT 21
5530: PUSH
5531: LD_INT 3
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: PUSH
5538: LD_INT 50
5540: PUSH
5541: EMPTY
5542: LIST
5543: PUSH
5544: LD_INT 2
5546: PUSH
5547: LD_INT 30
5549: PUSH
5550: LD_INT 0
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: PUSH
5557: LD_INT 30
5559: PUSH
5560: LD_INT 1
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: LIST
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: PPUSH
5578: CALL_OW 70
5582: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
5583: LD_ADDR_VAR 0 40
5587: PUSH
5588: LD_VAR 0 4
5592: PPUSH
5593: LD_INT 22
5595: PUSH
5596: LD_VAR 0 1
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: LD_INT 21
5607: PUSH
5608: LD_INT 3
5610: PUSH
5611: EMPTY
5612: LIST
5613: LIST
5614: PUSH
5615: LD_INT 50
5617: PUSH
5618: EMPTY
5619: LIST
5620: PUSH
5621: LD_INT 2
5623: PUSH
5624: LD_INT 30
5626: PUSH
5627: LD_INT 2
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: PUSH
5634: LD_INT 30
5636: PUSH
5637: LD_INT 3
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: LIST
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: PPUSH
5655: CALL_OW 70
5659: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5660: LD_ADDR_VAR 0 41
5664: PUSH
5665: LD_VAR 0 4
5669: PPUSH
5670: LD_INT 22
5672: PUSH
5673: LD_VAR 0 1
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: LD_INT 21
5684: PUSH
5685: LD_INT 3
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: PUSH
5692: LD_INT 50
5694: PUSH
5695: EMPTY
5696: LIST
5697: PUSH
5698: LD_INT 2
5700: PUSH
5701: LD_INT 30
5703: PUSH
5704: LD_INT 6
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: PUSH
5711: LD_INT 30
5713: PUSH
5714: LD_INT 7
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: PUSH
5721: LD_INT 30
5723: PUSH
5724: LD_INT 8
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: PUSH
5737: EMPTY
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: PPUSH
5743: CALL_OW 70
5747: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
5748: LD_ADDR_VAR 0 42
5752: PUSH
5753: LD_VAR 0 4
5757: PPUSH
5758: LD_INT 22
5760: PUSH
5761: LD_VAR 0 1
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: LD_INT 21
5772: PUSH
5773: LD_INT 3
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PUSH
5780: LD_INT 50
5782: PUSH
5783: EMPTY
5784: LIST
5785: PUSH
5786: LD_INT 2
5788: PUSH
5789: LD_INT 30
5791: PUSH
5792: LD_INT 31
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: LD_INT 30
5801: PUSH
5802: LD_INT 32
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: LIST
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: LIST
5818: LIST
5819: PPUSH
5820: CALL_OW 70
5824: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
5825: LD_ADDR_VAR 0 43
5829: PUSH
5830: LD_VAR 0 4
5834: PPUSH
5835: LD_INT 22
5837: PUSH
5838: LD_VAR 0 1
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PUSH
5847: LD_INT 21
5849: PUSH
5850: LD_INT 3
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: PUSH
5857: LD_INT 50
5859: PUSH
5860: EMPTY
5861: LIST
5862: PUSH
5863: LD_INT 2
5865: PUSH
5866: LD_INT 30
5868: PUSH
5869: LD_INT 4
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: PUSH
5876: LD_INT 30
5878: PUSH
5879: LD_INT 5
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: LIST
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: PPUSH
5897: CALL_OW 70
5901: ST_TO_ADDR
// controlTowers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_vehicle ] ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5902: LD_ADDR_VAR 0 44
5906: PUSH
5907: LD_VAR 0 4
5911: PPUSH
5912: LD_INT 22
5914: PUSH
5915: LD_VAR 0 1
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: PUSH
5924: LD_INT 50
5926: PUSH
5927: EMPTY
5928: LIST
5929: PUSH
5930: LD_INT 2
5932: PUSH
5933: LD_INT 21
5935: PUSH
5936: LD_INT 3
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: PUSH
5943: LD_INT 21
5945: PUSH
5946: LD_INT 2
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: LIST
5957: PUSH
5958: LD_INT 2
5960: PUSH
5961: LD_INT 30
5963: PUSH
5964: LD_INT 36
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: PUSH
5971: LD_INT 34
5973: PUSH
5974: LD_INT 31
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: LIST
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: PPUSH
5992: CALL_OW 70
5996: ST_TO_ADDR
// constructedBuildings = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] ] ) ;
5997: LD_ADDR_VAR 0 38
6001: PUSH
6002: LD_VAR 0 4
6006: PPUSH
6007: LD_INT 22
6009: PUSH
6010: LD_VAR 0 1
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: PUSH
6019: LD_INT 21
6021: PUSH
6022: LD_INT 3
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: PUSH
6029: LD_INT 3
6031: PUSH
6032: LD_INT 57
6034: PUSH
6035: EMPTY
6036: LIST
6037: PUSH
6038: EMPTY
6039: LIST
6040: LIST
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: LIST
6046: PPUSH
6047: CALL_OW 70
6051: ST_TO_ADDR
// for i := 1 to personel do
6052: LD_ADDR_VAR 0 14
6056: PUSH
6057: DOUBLE
6058: LD_INT 1
6060: DEC
6061: ST_TO_ADDR
6062: LD_VAR 0 19
6066: PUSH
6067: FOR_TO
6068: IFFALSE 6236
// begin if GetLives ( personel [ i ] ) = 1000 then
6070: LD_VAR 0 19
6074: PUSH
6075: LD_VAR 0 14
6079: ARRAY
6080: PPUSH
6081: CALL_OW 256
6085: PUSH
6086: LD_INT 1000
6088: EQUAL
6089: IFFALSE 6111
// SetTag ( personel [ i ] , 1 ) else
6091: LD_VAR 0 19
6095: PUSH
6096: LD_VAR 0 14
6100: ARRAY
6101: PPUSH
6102: LD_INT 1
6104: PPUSH
6105: CALL_OW 109
6109: GO 6191
// if GetLives ( personel [ i ] ) <= 950 and GetLives ( personel [ i ] ) > 250 then
6111: LD_VAR 0 19
6115: PUSH
6116: LD_VAR 0 14
6120: ARRAY
6121: PPUSH
6122: CALL_OW 256
6126: PUSH
6127: LD_INT 950
6129: LESSEQUAL
6130: PUSH
6131: LD_VAR 0 19
6135: PUSH
6136: LD_VAR 0 14
6140: ARRAY
6141: PPUSH
6142: CALL_OW 256
6146: PUSH
6147: LD_INT 250
6149: GREATER
6150: AND
6151: IFFALSE 6191
// begin SetTag ( personel [ i ] , 0 ) ;
6153: LD_VAR 0 19
6157: PUSH
6158: LD_VAR 0 14
6162: ARRAY
6163: PPUSH
6164: LD_INT 0
6166: PPUSH
6167: CALL_OW 109
// ComMoveToArea ( personel [ i ] , healArea ) ;
6171: LD_VAR 0 19
6175: PUSH
6176: LD_VAR 0 14
6180: ARRAY
6181: PPUSH
6182: LD_VAR 0 5
6186: PPUSH
6187: CALL_OW 113
// end ; if GetLives ( personel [ i ] ) < 100 then
6191: LD_VAR 0 19
6195: PUSH
6196: LD_VAR 0 14
6200: ARRAY
6201: PPUSH
6202: CALL_OW 256
6206: PUSH
6207: LD_INT 100
6209: LESS
6210: IFFALSE 6234
// personel = personel diff personel [ i ] ;
6212: LD_ADDR_VAR 0 19
6216: PUSH
6217: LD_VAR 0 19
6221: PUSH
6222: LD_VAR 0 19
6226: PUSH
6227: LD_VAR 0 14
6231: ARRAY
6232: DIFF
6233: ST_TO_ADDR
// end ;
6234: GO 6067
6236: POP
6237: POP
// for i := 1 to vehicles do
6238: LD_ADDR_VAR 0 14
6242: PUSH
6243: DOUBLE
6244: LD_INT 1
6246: DEC
6247: ST_TO_ADDR
6248: LD_VAR 0 25
6252: PUSH
6253: FOR_TO
6254: IFFALSE 6616
// begin if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
6256: LD_VAR 0 25
6260: PUSH
6261: LD_VAR 0 14
6265: ARRAY
6266: PUSH
6267: LD_INT 1
6269: ARRAY
6270: PPUSH
6271: CALL_OW 256
6275: PUSH
6276: LD_INT 1000
6278: EQUAL
6279: IFFALSE 6443
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
6281: LD_VAR 0 25
6285: PUSH
6286: LD_VAR 0 14
6290: ARRAY
6291: PUSH
6292: LD_INT 1
6294: ARRAY
6295: PPUSH
6296: CALL_OW 263
6300: PUSH
6301: LD_INT 1
6303: EQUAL
6304: IFFALSE 6383
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) and IsOK ( vehicles [ i ] [ 2 ] ) then
6306: LD_VAR 0 25
6310: PUSH
6311: LD_VAR 0 14
6315: ARRAY
6316: PUSH
6317: LD_INT 2
6319: ARRAY
6320: PPUSH
6321: CALL_OW 310
6325: NOT
6326: PUSH
6327: LD_VAR 0 25
6331: PUSH
6332: LD_VAR 0 14
6336: ARRAY
6337: PUSH
6338: LD_INT 2
6340: ARRAY
6341: PPUSH
6342: CALL_OW 302
6346: AND
6347: IFFALSE 6383
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
6349: LD_VAR 0 25
6353: PUSH
6354: LD_VAR 0 14
6358: ARRAY
6359: PUSH
6360: LD_INT 2
6362: ARRAY
6363: PPUSH
6364: LD_VAR 0 25
6368: PUSH
6369: LD_VAR 0 14
6373: ARRAY
6374: PUSH
6375: LD_INT 1
6377: ARRAY
6378: PPUSH
6379: CALL_OW 120
// if offensiveUnits < vehiclesToAttackAmount then
6383: LD_VAR 0 27
6387: PUSH
6388: LD_VAR 0 10
6392: LESS
6393: IFFALSE 6419
// SetTag ( vehicles [ i ] [ 1 ] , 2 ) else
6395: LD_VAR 0 25
6399: PUSH
6400: LD_VAR 0 14
6404: ARRAY
6405: PUSH
6406: LD_INT 1
6408: ARRAY
6409: PPUSH
6410: LD_INT 2
6412: PPUSH
6413: CALL_OW 109
6417: GO 6441
// SetTag ( vehicles [ i ] [ 1 ] , 3 ) ;
6419: LD_VAR 0 25
6423: PUSH
6424: LD_VAR 0 14
6428: ARRAY
6429: PUSH
6430: LD_INT 1
6432: ARRAY
6433: PPUSH
6434: LD_INT 3
6436: PPUSH
6437: CALL_OW 109
// end else
6441: GO 6564
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 and GetLives ( vehicles [ i ] [ 1 ] ) > 250 and GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
6443: LD_VAR 0 25
6447: PUSH
6448: LD_VAR 0 14
6452: ARRAY
6453: PUSH
6454: LD_INT 1
6456: ARRAY
6457: PPUSH
6458: CALL_OW 256
6462: PUSH
6463: LD_INT 650
6465: LESSEQUAL
6466: PUSH
6467: LD_VAR 0 25
6471: PUSH
6472: LD_VAR 0 14
6476: ARRAY
6477: PUSH
6478: LD_INT 1
6480: ARRAY
6481: PPUSH
6482: CALL_OW 256
6486: PUSH
6487: LD_INT 250
6489: GREATER
6490: AND
6491: PUSH
6492: LD_VAR 0 25
6496: PUSH
6497: LD_VAR 0 14
6501: ARRAY
6502: PUSH
6503: LD_INT 1
6505: ARRAY
6506: PPUSH
6507: CALL_OW 263
6511: PUSH
6512: LD_INT 1
6514: EQUAL
6515: AND
6516: IFFALSE 6564
// begin SetTag ( vehicles [ i ] [ 1 ] , 0 ) ;
6518: LD_VAR 0 25
6522: PUSH
6523: LD_VAR 0 14
6527: ARRAY
6528: PUSH
6529: LD_INT 1
6531: ARRAY
6532: PPUSH
6533: LD_INT 0
6535: PPUSH
6536: CALL_OW 109
// ComMoveToArea ( vehicles [ i ] [ 1 ] , repairArea ) ;
6540: LD_VAR 0 25
6544: PUSH
6545: LD_VAR 0 14
6549: ARRAY
6550: PUSH
6551: LD_INT 1
6553: ARRAY
6554: PPUSH
6555: LD_VAR 0 6
6559: PPUSH
6560: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
6564: LD_VAR 0 25
6568: PUSH
6569: LD_VAR 0 14
6573: ARRAY
6574: PUSH
6575: LD_INT 1
6577: ARRAY
6578: PPUSH
6579: CALL_OW 256
6583: PUSH
6584: LD_INT 250
6586: LESS
6587: IFFALSE 6614
// begin vehicles = vehicles diff [ vehicles [ i ] ] ;
6589: LD_ADDR_VAR 0 25
6593: PUSH
6594: LD_VAR 0 25
6598: PUSH
6599: LD_VAR 0 25
6603: PUSH
6604: LD_VAR 0 14
6608: ARRAY
6609: PUSH
6610: EMPTY
6611: LIST
6612: DIFF
6613: ST_TO_ADDR
// end ; end ;
6614: GO 6253
6616: POP
6617: POP
// for i := 1 to personel do
6618: LD_ADDR_VAR 0 14
6622: PUSH
6623: DOUBLE
6624: LD_INT 1
6626: DEC
6627: ST_TO_ADDR
6628: LD_VAR 0 19
6632: PUSH
6633: FOR_TO
6634: IFFALSE 6685
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
6636: LD_ADDR_VAR 0 20
6640: PUSH
6641: LD_VAR 0 20
6645: PUSH
6646: LD_VAR 0 19
6650: PUSH
6651: LD_VAR 0 14
6655: ARRAY
6656: PPUSH
6657: LD_INT 25
6659: PUSH
6660: LD_INT 1
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: LD_INT 50
6669: PUSH
6670: EMPTY
6671: LIST
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PPUSH
6677: CALL_OW 72
6681: ADD
6682: ST_TO_ADDR
6683: GO 6633
6685: POP
6686: POP
// if soldiers and UnitFilter ( bunkers , [ f_empty ] ) then
6687: LD_VAR 0 20
6691: PUSH
6692: LD_VAR 0 42
6696: PPUSH
6697: LD_INT 58
6699: PUSH
6700: EMPTY
6701: LIST
6702: PPUSH
6703: CALL_OW 72
6707: AND
6708: IFFALSE 6966
// begin for i := 1 to soldiers do
6710: LD_ADDR_VAR 0 14
6714: PUSH
6715: DOUBLE
6716: LD_INT 1
6718: DEC
6719: ST_TO_ADDR
6720: LD_VAR 0 20
6724: PUSH
6725: FOR_TO
6726: IFFALSE 6962
// if GetTag ( soldiers [ i ] ) = 1 then
6728: LD_VAR 0 20
6732: PUSH
6733: LD_VAR 0 14
6737: ARRAY
6738: PPUSH
6739: CALL_OW 110
6743: PUSH
6744: LD_INT 1
6746: EQUAL
6747: IFFALSE 6960
// begin if GetTaskList ( soldiers [ i ] ) then
6749: LD_VAR 0 20
6753: PUSH
6754: LD_VAR 0 14
6758: ARRAY
6759: PPUSH
6760: CALL_OW 437
6764: IFFALSE 6853
// if GetTaskList ( soldiers [ i ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( soldiers [ i ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
6766: LD_VAR 0 20
6770: PUSH
6771: LD_VAR 0 14
6775: ARRAY
6776: PPUSH
6777: CALL_OW 437
6781: PUSH
6782: LD_INT 1
6784: ARRAY
6785: PUSH
6786: LD_INT 1
6788: ARRAY
6789: PUSH
6790: LD_STRING e
6792: EQUAL
6793: PUSH
6794: LD_VAR 0 20
6798: PUSH
6799: LD_VAR 0 14
6803: ARRAY
6804: PPUSH
6805: CALL_OW 437
6809: PUSH
6810: LD_INT 1
6812: ARRAY
6813: PUSH
6814: LD_INT 4
6816: ARRAY
6817: PPUSH
6818: CALL_OW 266
6822: PUSH
6823: LD_INT 4
6825: PUSH
6826: LD_INT 5
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: IN
6833: AND
6834: IFFALSE 6853
// SetTaskList ( soldiers [ i ] , [ ] ) ;
6836: LD_VAR 0 20
6840: PUSH
6841: LD_VAR 0 14
6845: ARRAY
6846: PPUSH
6847: EMPTY
6848: PPUSH
6849: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
6853: LD_ADDR_VAR 0 49
6857: PUSH
6858: LD_VAR 0 42
6862: PPUSH
6863: LD_INT 3
6865: PUSH
6866: LD_INT 59
6868: PUSH
6869: EMPTY
6870: LIST
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PPUSH
6876: CALL_OW 72
6880: PUSH
6881: FOR_IN
6882: IFFALSE 6958
// if not HasTask ( soldiers [ i ] ) and not GetBType ( IsInUnit ( soldiers [ i ] ) ) in [ b_breastwork , b_bunker ] then
6884: LD_VAR 0 20
6888: PUSH
6889: LD_VAR 0 14
6893: ARRAY
6894: PPUSH
6895: CALL_OW 314
6899: NOT
6900: PUSH
6901: LD_VAR 0 20
6905: PUSH
6906: LD_VAR 0 14
6910: ARRAY
6911: PPUSH
6912: CALL_OW 310
6916: PPUSH
6917: CALL_OW 266
6921: PUSH
6922: LD_INT 31
6924: PUSH
6925: LD_INT 32
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: IN
6932: NOT
6933: AND
6934: IFFALSE 6956
// ComEnterUnit ( soldiers [ i ] , emptyBunkers ) ;
6936: LD_VAR 0 20
6940: PUSH
6941: LD_VAR 0 14
6945: ARRAY
6946: PPUSH
6947: LD_VAR 0 49
6951: PPUSH
6952: CALL_OW 120
6956: GO 6881
6958: POP
6959: POP
// end ;
6960: GO 6725
6962: POP
6963: POP
// end else
6964: GO 7138
// if soldiers and barracks then
6966: LD_VAR 0 20
6970: PUSH
6971: LD_VAR 0 43
6975: AND
6976: IFFALSE 7098
// begin for i := 1 to soldiers do
6978: LD_ADDR_VAR 0 14
6982: PUSH
6983: DOUBLE
6984: LD_INT 1
6986: DEC
6987: ST_TO_ADDR
6988: LD_VAR 0 20
6992: PUSH
6993: FOR_TO
6994: IFFALSE 7094
// if GetTag ( soldiers [ i ] ) = 1 and UnitFilter ( soldiers [ i ] , [ f_outside ] ) and not HasTask ( soldiers [ i ] ) then
6996: LD_VAR 0 20
7000: PUSH
7001: LD_VAR 0 14
7005: ARRAY
7006: PPUSH
7007: CALL_OW 110
7011: PUSH
7012: LD_INT 1
7014: EQUAL
7015: PUSH
7016: LD_VAR 0 20
7020: PUSH
7021: LD_VAR 0 14
7025: ARRAY
7026: PPUSH
7027: LD_INT 56
7029: PUSH
7030: EMPTY
7031: LIST
7032: PPUSH
7033: CALL_OW 72
7037: AND
7038: PUSH
7039: LD_VAR 0 20
7043: PUSH
7044: LD_VAR 0 14
7048: ARRAY
7049: PPUSH
7050: CALL_OW 314
7054: NOT
7055: AND
7056: IFFALSE 7092
// ComEnterUnit ( soldiers [ i ] , barracks [ rand ( 1 , barracks ) ] ) ;
7058: LD_VAR 0 20
7062: PUSH
7063: LD_VAR 0 14
7067: ARRAY
7068: PPUSH
7069: LD_VAR 0 43
7073: PUSH
7074: LD_INT 1
7076: PPUSH
7077: LD_VAR 0 43
7081: PPUSH
7082: CALL_OW 12
7086: ARRAY
7087: PPUSH
7088: CALL_OW 120
7092: GO 6993
7094: POP
7095: POP
// end else
7096: GO 7138
// for i := 1 to soldiers do
7098: LD_ADDR_VAR 0 14
7102: PUSH
7103: DOUBLE
7104: LD_INT 1
7106: DEC
7107: ST_TO_ADDR
7108: LD_VAR 0 20
7112: PUSH
7113: FOR_TO
7114: IFFALSE 7136
// SetTag ( soldiers [ i ] , 3 ) ;
7116: LD_VAR 0 20
7120: PUSH
7121: LD_VAR 0 14
7125: ARRAY
7126: PPUSH
7127: LD_INT 3
7129: PPUSH
7130: CALL_OW 109
7134: GO 7113
7136: POP
7137: POP
// for i := 1 to personel do
7138: LD_ADDR_VAR 0 14
7142: PUSH
7143: DOUBLE
7144: LD_INT 1
7146: DEC
7147: ST_TO_ADDR
7148: LD_VAR 0 19
7152: PUSH
7153: FOR_TO
7154: IFFALSE 7195
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
7156: LD_ADDR_VAR 0 21
7160: PUSH
7161: LD_VAR 0 21
7165: PUSH
7166: LD_VAR 0 19
7170: PUSH
7171: LD_VAR 0 14
7175: ARRAY
7176: PPUSH
7177: LD_INT 25
7179: PUSH
7180: LD_INT 2
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PPUSH
7187: CALL_OW 72
7191: ADD
7192: ST_TO_ADDR
7193: GO 7153
7195: POP
7196: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
7197: LD_VAR 0 21
7201: PUSH
7202: LD_VAR 0 4
7206: PPUSH
7207: LD_INT 22
7209: PUSH
7210: LD_VAR 0 1
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PUSH
7219: LD_INT 21
7221: PUSH
7222: LD_INT 3
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: LD_INT 3
7231: PUSH
7232: LD_INT 24
7234: PUSH
7235: LD_INT 1000
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: LIST
7250: PPUSH
7251: CALL_OW 70
7255: AND
7256: IFFALSE 7484
// begin for i := 1 to engineers do
7258: LD_ADDR_VAR 0 14
7262: PUSH
7263: DOUBLE
7264: LD_INT 1
7266: DEC
7267: ST_TO_ADDR
7268: LD_VAR 0 21
7272: PUSH
7273: FOR_TO
7274: IFFALSE 7480
// if GetTag ( engineers [ i ] ) = 1 then
7276: LD_VAR 0 21
7280: PUSH
7281: LD_VAR 0 14
7285: ARRAY
7286: PPUSH
7287: CALL_OW 110
7291: PUSH
7292: LD_INT 1
7294: EQUAL
7295: IFFALSE 7478
// begin if GetTaskList ( engineers [ i ] ) then
7297: LD_VAR 0 21
7301: PUSH
7302: LD_VAR 0 14
7306: ARRAY
7307: PPUSH
7308: CALL_OW 437
7312: IFFALSE 7360
// if GetTaskList ( engineers [ i ] ) [ 1 ] [ 1 ] = e then
7314: LD_VAR 0 21
7318: PUSH
7319: LD_VAR 0 14
7323: ARRAY
7324: PPUSH
7325: CALL_OW 437
7329: PUSH
7330: LD_INT 1
7332: ARRAY
7333: PUSH
7334: LD_INT 1
7336: ARRAY
7337: PUSH
7338: LD_STRING e
7340: EQUAL
7341: IFFALSE 7360
// SetTaskList ( engineers [ i ] , [ ] ) ;
7343: LD_VAR 0 21
7347: PUSH
7348: LD_VAR 0 14
7352: ARRAY
7353: PPUSH
7354: EMPTY
7355: PPUSH
7356: CALL_OW 446
// if IsInUnit ( engineers [ i ] ) then
7360: LD_VAR 0 21
7364: PUSH
7365: LD_VAR 0 14
7369: ARRAY
7370: PPUSH
7371: CALL_OW 310
7375: IFFALSE 7392
// ComExitBuilding ( engineers [ i ] ) ;
7377: LD_VAR 0 21
7381: PUSH
7382: LD_VAR 0 14
7386: ARRAY
7387: PPUSH
7388: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7392: LD_ADDR_VAR 0 47
7396: PUSH
7397: LD_VAR 0 4
7401: PPUSH
7402: LD_INT 22
7404: PUSH
7405: LD_VAR 0 1
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: LD_INT 21
7416: PUSH
7417: LD_INT 3
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: PUSH
7424: LD_INT 3
7426: PUSH
7427: LD_INT 24
7429: PUSH
7430: LD_INT 1000
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: PPUSH
7446: CALL_OW 70
7450: PUSH
7451: FOR_IN
7452: IFFALSE 7476
// AddComRepairBuilding ( engineers [ i ] , damageBuilding ) ;
7454: LD_VAR 0 21
7458: PUSH
7459: LD_VAR 0 14
7463: ARRAY
7464: PPUSH
7465: LD_VAR 0 47
7469: PPUSH
7470: CALL_OW 190
7474: GO 7451
7476: POP
7477: POP
// end ;
7478: GO 7273
7480: POP
7481: POP
// end else
7482: GO 7791
// if engineers and destroyedBuildings then
7484: LD_VAR 0 21
7488: PUSH
7489: LD_VAR 0 35
7493: AND
7494: IFFALSE 7670
// begin for i := 1 to engineers do
7496: LD_ADDR_VAR 0 14
7500: PUSH
7501: DOUBLE
7502: LD_INT 1
7504: DEC
7505: ST_TO_ADDR
7506: LD_VAR 0 21
7510: PUSH
7511: FOR_TO
7512: IFFALSE 7666
// if GetTag ( engineers [ i ] ) = 1 then
7514: LD_VAR 0 21
7518: PUSH
7519: LD_VAR 0 14
7523: ARRAY
7524: PPUSH
7525: CALL_OW 110
7529: PUSH
7530: LD_INT 1
7532: EQUAL
7533: IFFALSE 7664
// begin if IsInUnit ( engineers [ i ] ) then
7535: LD_VAR 0 21
7539: PUSH
7540: LD_VAR 0 14
7544: ARRAY
7545: PPUSH
7546: CALL_OW 310
7550: IFFALSE 7567
// ComExitBuilding ( engineers [ i ] ) ;
7552: LD_VAR 0 21
7556: PUSH
7557: LD_VAR 0 14
7561: ARRAY
7562: PPUSH
7563: CALL_OW 122
// for j := 1 to destroyedBuildings / 4 do
7567: LD_ADDR_VAR 0 15
7571: PUSH
7572: DOUBLE
7573: LD_INT 1
7575: DEC
7576: ST_TO_ADDR
7577: LD_VAR 0 35
7581: PUSH
7582: LD_INT 4
7584: DIVREAL
7585: PUSH
7586: FOR_TO
7587: IFFALSE 7662
// AddComBuild ( engineers [ i ] , destroyedBuildings [ j ] , destroyedBuildings [ j + 1 ] , destroyedBuildings [ j + 2 ] , destroyedBuildings [ j + 3 ] ) ;
7589: LD_VAR 0 21
7593: PUSH
7594: LD_VAR 0 14
7598: ARRAY
7599: PPUSH
7600: LD_VAR 0 35
7604: PUSH
7605: LD_VAR 0 15
7609: ARRAY
7610: PPUSH
7611: LD_VAR 0 35
7615: PUSH
7616: LD_VAR 0 15
7620: PUSH
7621: LD_INT 1
7623: PLUS
7624: ARRAY
7625: PPUSH
7626: LD_VAR 0 35
7630: PUSH
7631: LD_VAR 0 15
7635: PUSH
7636: LD_INT 2
7638: PLUS
7639: ARRAY
7640: PPUSH
7641: LD_VAR 0 35
7645: PUSH
7646: LD_VAR 0 15
7650: PUSH
7651: LD_INT 3
7653: PLUS
7654: ARRAY
7655: PPUSH
7656: CALL_OW 205
7660: GO 7586
7662: POP
7663: POP
// end ;
7664: GO 7511
7666: POP
7667: POP
// end else
7668: GO 7791
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot and not destroyedBuildings then
7670: LD_VAR 0 21
7674: PUSH
7675: LD_VAR 0 21
7679: PPUSH
7680: LD_INT 56
7682: PUSH
7683: EMPTY
7684: LIST
7685: PPUSH
7686: CALL_OW 72
7690: AND
7691: PUSH
7692: LD_VAR 0 39
7696: AND
7697: PUSH
7698: LD_VAR 0 35
7702: NOT
7703: AND
7704: IFFALSE 7791
// for i := 1 to engineers do
7706: LD_ADDR_VAR 0 14
7710: PUSH
7711: DOUBLE
7712: LD_INT 1
7714: DEC
7715: ST_TO_ADDR
7716: LD_VAR 0 21
7720: PUSH
7721: FOR_TO
7722: IFFALSE 7789
// begin if GetTag ( engineers [ i ] ) = 1 and not HasTask ( engineers [ i ] ) then
7724: LD_VAR 0 21
7728: PUSH
7729: LD_VAR 0 14
7733: ARRAY
7734: PPUSH
7735: CALL_OW 110
7739: PUSH
7740: LD_INT 1
7742: EQUAL
7743: PUSH
7744: LD_VAR 0 21
7748: PUSH
7749: LD_VAR 0 14
7753: ARRAY
7754: PPUSH
7755: CALL_OW 314
7759: NOT
7760: AND
7761: IFFALSE 7787
// ComEnterUnit ( engineers [ i ] , depot [ 1 ] ) ;
7763: LD_VAR 0 21
7767: PUSH
7768: LD_VAR 0 14
7772: ARRAY
7773: PPUSH
7774: LD_VAR 0 39
7778: PUSH
7779: LD_INT 1
7781: ARRAY
7782: PPUSH
7783: CALL_OW 120
// end ;
7787: GO 7721
7789: POP
7790: POP
// for i := 1 to personel do
7791: LD_ADDR_VAR 0 14
7795: PUSH
7796: DOUBLE
7797: LD_INT 1
7799: DEC
7800: ST_TO_ADDR
7801: LD_VAR 0 19
7805: PUSH
7806: FOR_TO
7807: IFFALSE 7848
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
7809: LD_ADDR_VAR 0 22
7813: PUSH
7814: LD_VAR 0 22
7818: PUSH
7819: LD_VAR 0 19
7823: PUSH
7824: LD_VAR 0 14
7828: ARRAY
7829: PPUSH
7830: LD_INT 25
7832: PUSH
7833: LD_INT 3
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PPUSH
7840: CALL_OW 72
7844: ADD
7845: ST_TO_ADDR
7846: GO 7806
7848: POP
7849: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
7850: LD_VAR 0 22
7854: PUSH
7855: LD_VAR 0 4
7859: PPUSH
7860: LD_INT 22
7862: PUSH
7863: LD_VAR 0 1
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: LD_INT 21
7874: PUSH
7875: LD_INT 2
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: PUSH
7882: LD_INT 3
7884: PUSH
7885: LD_INT 24
7887: PUSH
7888: LD_INT 1000
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: LIST
7903: PPUSH
7904: CALL_OW 70
7908: AND
7909: IFFALSE 8489
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7911: LD_ADDR_VAR 0 48
7915: PUSH
7916: LD_VAR 0 4
7920: PPUSH
7921: LD_INT 22
7923: PUSH
7924: LD_VAR 0 1
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PUSH
7933: LD_INT 21
7935: PUSH
7936: LD_INT 2
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: PUSH
7943: LD_INT 3
7945: PUSH
7946: LD_INT 24
7948: PUSH
7949: LD_INT 1000
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: LIST
7964: PPUSH
7965: CALL_OW 70
7969: PUSH
7970: FOR_IN
7971: IFFALSE 8485
// begin if GetDistUnitArea ( damageUnit , repairArea ) <= 5 then
7973: LD_VAR 0 48
7977: PPUSH
7978: LD_VAR 0 6
7982: PPUSH
7983: CALL_OW 299
7987: PUSH
7988: LD_INT 5
7990: LESSEQUAL
7991: IFFALSE 8080
// for i := 1 to vehicles do
7993: LD_ADDR_VAR 0 14
7997: PUSH
7998: DOUBLE
7999: LD_INT 1
8001: DEC
8002: ST_TO_ADDR
8003: LD_VAR 0 25
8007: PUSH
8008: FOR_TO
8009: IFFALSE 8078
// if vehicles [ i ] [ 1 ] = damageUnit then
8011: LD_VAR 0 25
8015: PUSH
8016: LD_VAR 0 14
8020: ARRAY
8021: PUSH
8022: LD_INT 1
8024: ARRAY
8025: PUSH
8026: LD_VAR 0 48
8030: EQUAL
8031: IFFALSE 8076
// begin ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
8033: LD_VAR 0 25
8037: PUSH
8038: LD_VAR 0 14
8042: ARRAY
8043: PUSH
8044: LD_INT 2
8046: ARRAY
8047: PPUSH
8048: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
8052: LD_VAR 0 25
8056: PUSH
8057: LD_VAR 0 14
8061: ARRAY
8062: PUSH
8063: LD_INT 2
8065: ARRAY
8066: PPUSH
8067: LD_VAR 0 48
8071: PPUSH
8072: CALL_OW 189
// end ;
8076: GO 8008
8078: POP
8079: POP
// for i := 1 to mechanics do
8080: LD_ADDR_VAR 0 14
8084: PUSH
8085: DOUBLE
8086: LD_INT 1
8088: DEC
8089: ST_TO_ADDR
8090: LD_VAR 0 22
8094: PUSH
8095: FOR_TO
8096: IFFALSE 8264
// if GetTag ( mechanics [ i ] ) = 1 and IsInUnit ( mechanics [ i ] ) in [ b_workshop , b_factory ] then
8098: LD_VAR 0 22
8102: PUSH
8103: LD_VAR 0 14
8107: ARRAY
8108: PPUSH
8109: CALL_OW 110
8113: PUSH
8114: LD_INT 1
8116: EQUAL
8117: PUSH
8118: LD_VAR 0 22
8122: PUSH
8123: LD_VAR 0 14
8127: ARRAY
8128: PPUSH
8129: CALL_OW 310
8133: PUSH
8134: LD_INT 2
8136: PUSH
8137: LD_INT 3
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: IN
8144: AND
8145: IFFALSE 8262
// begin if GetTaskList ( mechanics [ i ] ) then
8147: LD_VAR 0 22
8151: PUSH
8152: LD_VAR 0 14
8156: ARRAY
8157: PPUSH
8158: CALL_OW 437
8162: IFFALSE 8210
// if GetTaskList ( mechanics [ i ] ) [ 1 ] [ 1 ] = e then
8164: LD_VAR 0 22
8168: PUSH
8169: LD_VAR 0 14
8173: ARRAY
8174: PPUSH
8175: CALL_OW 437
8179: PUSH
8180: LD_INT 1
8182: ARRAY
8183: PUSH
8184: LD_INT 1
8186: ARRAY
8187: PUSH
8188: LD_STRING e
8190: EQUAL
8191: IFFALSE 8210
// SetTaskList ( mechanics [ i ] , [ ] ) ;
8193: LD_VAR 0 22
8197: PUSH
8198: LD_VAR 0 14
8202: ARRAY
8203: PPUSH
8204: EMPTY
8205: PPUSH
8206: CALL_OW 446
// if IsInUnit ( mechanics [ i ] ) then
8210: LD_VAR 0 22
8214: PUSH
8215: LD_VAR 0 14
8219: ARRAY
8220: PPUSH
8221: CALL_OW 310
8225: IFFALSE 8242
// ComExitBuilding ( mechanics [ i ] ) ;
8227: LD_VAR 0 22
8231: PUSH
8232: LD_VAR 0 14
8236: ARRAY
8237: PPUSH
8238: CALL_OW 122
// AddComRepairVehicle ( mechanics [ i ] , damageUnit ) ;
8242: LD_VAR 0 22
8246: PUSH
8247: LD_VAR 0 14
8251: ARRAY
8252: PPUSH
8253: LD_VAR 0 48
8257: PPUSH
8258: CALL_OW 189
// end ;
8262: GO 8095
8264: POP
8265: POP
// if GetLives ( damageUnit ) < 250 and IsInArea ( damageUnit , baseArea ) then
8266: LD_VAR 0 48
8270: PPUSH
8271: CALL_OW 256
8275: PUSH
8276: LD_INT 250
8278: LESS
8279: PUSH
8280: LD_VAR 0 48
8284: PPUSH
8285: LD_VAR 0 4
8289: PPUSH
8290: CALL_OW 308
8294: AND
8295: IFFALSE 8483
// for i := 1 to personel do
8297: LD_ADDR_VAR 0 14
8301: PUSH
8302: DOUBLE
8303: LD_INT 1
8305: DEC
8306: ST_TO_ADDR
8307: LD_VAR 0 19
8311: PUSH
8312: FOR_TO
8313: IFFALSE 8481
// if GetTag ( mechanics [ i ] ) = 1 and IsInUnit ( mechanics [ i ] ) in [ b_workshop , b_factory ] then
8315: LD_VAR 0 22
8319: PUSH
8320: LD_VAR 0 14
8324: ARRAY
8325: PPUSH
8326: CALL_OW 110
8330: PUSH
8331: LD_INT 1
8333: EQUAL
8334: PUSH
8335: LD_VAR 0 22
8339: PUSH
8340: LD_VAR 0 14
8344: ARRAY
8345: PPUSH
8346: CALL_OW 310
8350: PUSH
8351: LD_INT 2
8353: PUSH
8354: LD_INT 3
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: IN
8361: AND
8362: IFFALSE 8479
// begin if GetTaskList ( mechanics [ i ] ) then
8364: LD_VAR 0 22
8368: PUSH
8369: LD_VAR 0 14
8373: ARRAY
8374: PPUSH
8375: CALL_OW 437
8379: IFFALSE 8427
// if GetTaskList ( mechanics [ i ] ) [ 1 ] [ 1 ] = e then
8381: LD_VAR 0 22
8385: PUSH
8386: LD_VAR 0 14
8390: ARRAY
8391: PPUSH
8392: CALL_OW 437
8396: PUSH
8397: LD_INT 1
8399: ARRAY
8400: PUSH
8401: LD_INT 1
8403: ARRAY
8404: PUSH
8405: LD_STRING e
8407: EQUAL
8408: IFFALSE 8427
// SetTaskList ( mechanics [ i ] , [ ] ) ;
8410: LD_VAR 0 22
8414: PUSH
8415: LD_VAR 0 14
8419: ARRAY
8420: PPUSH
8421: EMPTY
8422: PPUSH
8423: CALL_OW 446
// if IsInUnit ( mechanics [ i ] ) then
8427: LD_VAR 0 22
8431: PUSH
8432: LD_VAR 0 14
8436: ARRAY
8437: PPUSH
8438: CALL_OW 310
8442: IFFALSE 8459
// ComExitBuilding ( mechanics [ i ] ) ;
8444: LD_VAR 0 22
8448: PUSH
8449: LD_VAR 0 14
8453: ARRAY
8454: PPUSH
8455: CALL_OW 122
// AddComRepairVehicle ( mechanics [ i ] , damageUnit ) ;
8459: LD_VAR 0 22
8463: PUSH
8464: LD_VAR 0 14
8468: ARRAY
8469: PPUSH
8470: LD_VAR 0 48
8474: PPUSH
8475: CALL_OW 189
// end ;
8479: GO 8312
8481: POP
8482: POP
// end ;
8483: GO 7970
8485: POP
8486: POP
// end else
8487: GO 8786
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and UnitFilter ( controlTowers , [ f_empty ] ) then
8489: LD_VAR 0 22
8493: PUSH
8494: LD_VAR 0 22
8498: PPUSH
8499: LD_INT 56
8501: PUSH
8502: EMPTY
8503: LIST
8504: PPUSH
8505: CALL_OW 72
8509: AND
8510: PUSH
8511: LD_VAR 0 44
8515: PPUSH
8516: LD_INT 58
8518: PUSH
8519: EMPTY
8520: LIST
8521: PPUSH
8522: CALL_OW 72
8526: AND
8527: IFFALSE 8644
// begin for i := 1 to mechanics do
8529: LD_ADDR_VAR 0 14
8533: PUSH
8534: DOUBLE
8535: LD_INT 1
8537: DEC
8538: ST_TO_ADDR
8539: LD_VAR 0 22
8543: PUSH
8544: FOR_TO
8545: IFFALSE 8640
// if GetTag ( mechanics [ i ] ) = 1 and not HasTask ( mechanics [ i ] ) and not IsInUnit ( mechanics [ i ] ) then
8547: LD_VAR 0 22
8551: PUSH
8552: LD_VAR 0 14
8556: ARRAY
8557: PPUSH
8558: CALL_OW 110
8562: PUSH
8563: LD_INT 1
8565: EQUAL
8566: PUSH
8567: LD_VAR 0 22
8571: PUSH
8572: LD_VAR 0 14
8576: ARRAY
8577: PPUSH
8578: CALL_OW 314
8582: NOT
8583: AND
8584: PUSH
8585: LD_VAR 0 22
8589: PUSH
8590: LD_VAR 0 14
8594: ARRAY
8595: PPUSH
8596: CALL_OW 310
8600: NOT
8601: AND
8602: IFFALSE 8638
// ComEnterUnit ( mechanics [ i ] , controlTowers [ rand ( 1 , controlTowers ) ] ) ;
8604: LD_VAR 0 22
8608: PUSH
8609: LD_VAR 0 14
8613: ARRAY
8614: PPUSH
8615: LD_VAR 0 44
8619: PUSH
8620: LD_INT 1
8622: PPUSH
8623: LD_VAR 0 44
8627: PPUSH
8628: CALL_OW 12
8632: ARRAY
8633: PPUSH
8634: CALL_OW 120
8638: GO 8544
8640: POP
8641: POP
// end else
8642: GO 8786
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
8644: LD_VAR 0 22
8648: PUSH
8649: LD_VAR 0 22
8653: PPUSH
8654: LD_INT 56
8656: PUSH
8657: EMPTY
8658: LIST
8659: PPUSH
8660: CALL_OW 72
8664: AND
8665: PUSH
8666: LD_VAR 0 40
8670: AND
8671: IFFALSE 8786
// for i := 1 to mechanics do
8673: LD_ADDR_VAR 0 14
8677: PUSH
8678: DOUBLE
8679: LD_INT 1
8681: DEC
8682: ST_TO_ADDR
8683: LD_VAR 0 22
8687: PUSH
8688: FOR_TO
8689: IFFALSE 8784
// if GetTag ( mechanics [ i ] ) = 1 and not HasTask ( mechanics [ i ] ) and not IsInUnit ( mechanics [ i ] ) then
8691: LD_VAR 0 22
8695: PUSH
8696: LD_VAR 0 14
8700: ARRAY
8701: PPUSH
8702: CALL_OW 110
8706: PUSH
8707: LD_INT 1
8709: EQUAL
8710: PUSH
8711: LD_VAR 0 22
8715: PUSH
8716: LD_VAR 0 14
8720: ARRAY
8721: PPUSH
8722: CALL_OW 314
8726: NOT
8727: AND
8728: PUSH
8729: LD_VAR 0 22
8733: PUSH
8734: LD_VAR 0 14
8738: ARRAY
8739: PPUSH
8740: CALL_OW 310
8744: NOT
8745: AND
8746: IFFALSE 8782
// ComEnterUnit ( mechanics [ i ] , factory [ rand ( 1 , factory ) ] ) ;
8748: LD_VAR 0 22
8752: PUSH
8753: LD_VAR 0 14
8757: ARRAY
8758: PPUSH
8759: LD_VAR 0 40
8763: PUSH
8764: LD_INT 1
8766: PPUSH
8767: LD_VAR 0 40
8771: PPUSH
8772: CALL_OW 12
8776: ARRAY
8777: PPUSH
8778: CALL_OW 120
8782: GO 8688
8784: POP
8785: POP
// for i := 1 to personel do
8786: LD_ADDR_VAR 0 14
8790: PUSH
8791: DOUBLE
8792: LD_INT 1
8794: DEC
8795: ST_TO_ADDR
8796: LD_VAR 0 19
8800: PUSH
8801: FOR_TO
8802: IFFALSE 8843
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
8804: LD_ADDR_VAR 0 23
8808: PUSH
8809: LD_VAR 0 23
8813: PUSH
8814: LD_VAR 0 19
8818: PUSH
8819: LD_VAR 0 14
8823: ARRAY
8824: PPUSH
8825: LD_INT 25
8827: PUSH
8828: LD_INT 4
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PPUSH
8835: CALL_OW 72
8839: ADD
8840: ST_TO_ADDR
8841: GO 8801
8843: POP
8844: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
8845: LD_VAR 0 23
8849: PUSH
8850: LD_VAR 0 4
8854: PPUSH
8855: LD_INT 22
8857: PUSH
8858: LD_VAR 0 1
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PUSH
8867: LD_INT 21
8869: PUSH
8870: LD_INT 1
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PUSH
8877: LD_INT 3
8879: PUSH
8880: LD_INT 24
8882: PUSH
8883: LD_INT 1000
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: LIST
8898: PPUSH
8899: CALL_OW 70
8903: AND
8904: IFFALSE 9341
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
8906: LD_ADDR_VAR 0 48
8910: PUSH
8911: LD_VAR 0 4
8915: PPUSH
8916: LD_INT 22
8918: PUSH
8919: LD_VAR 0 1
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: PUSH
8928: LD_INT 21
8930: PUSH
8931: LD_INT 1
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: PUSH
8938: LD_INT 3
8940: PUSH
8941: LD_INT 24
8943: PUSH
8944: LD_INT 1000
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: LIST
8959: PPUSH
8960: CALL_OW 70
8964: PUSH
8965: FOR_IN
8966: IFFALSE 9337
// begin if GetDistUnitArea ( damageUnit , healArea ) <= 5 then
8968: LD_VAR 0 48
8972: PPUSH
8973: LD_VAR 0 5
8977: PPUSH
8978: CALL_OW 299
8982: PUSH
8983: LD_INT 5
8985: LESSEQUAL
8986: IFFALSE 9146
// for i := 1 to scientists do
8988: LD_ADDR_VAR 0 14
8992: PUSH
8993: DOUBLE
8994: LD_INT 1
8996: DEC
8997: ST_TO_ADDR
8998: LD_VAR 0 23
9002: PUSH
9003: FOR_TO
9004: IFFALSE 9144
// if GetTag ( scientists [ i ] ) = 1 then
9006: LD_VAR 0 23
9010: PUSH
9011: LD_VAR 0 14
9015: ARRAY
9016: PPUSH
9017: CALL_OW 110
9021: PUSH
9022: LD_INT 1
9024: EQUAL
9025: IFFALSE 9142
// begin if GetTaskList ( scientists [ i ] ) then
9027: LD_VAR 0 23
9031: PUSH
9032: LD_VAR 0 14
9036: ARRAY
9037: PPUSH
9038: CALL_OW 437
9042: IFFALSE 9090
// if GetTaskList ( scientists [ i ] ) [ 1 ] [ 1 ] = e then
9044: LD_VAR 0 23
9048: PUSH
9049: LD_VAR 0 14
9053: ARRAY
9054: PPUSH
9055: CALL_OW 437
9059: PUSH
9060: LD_INT 1
9062: ARRAY
9063: PUSH
9064: LD_INT 1
9066: ARRAY
9067: PUSH
9068: LD_STRING e
9070: EQUAL
9071: IFFALSE 9090
// SetTaskList ( scientists [ i ] , [ ] ) ;
9073: LD_VAR 0 23
9077: PUSH
9078: LD_VAR 0 14
9082: ARRAY
9083: PPUSH
9084: EMPTY
9085: PPUSH
9086: CALL_OW 446
// if IsInUnit ( scientists [ i ] ) then
9090: LD_VAR 0 23
9094: PUSH
9095: LD_VAR 0 14
9099: ARRAY
9100: PPUSH
9101: CALL_OW 310
9105: IFFALSE 9122
// ComExitBuilding ( scientists [ i ] ) ;
9107: LD_VAR 0 23
9111: PUSH
9112: LD_VAR 0 14
9116: ARRAY
9117: PPUSH
9118: CALL_OW 122
// AddComHeal ( scientists [ i ] , damageUnit ) ;
9122: LD_VAR 0 23
9126: PUSH
9127: LD_VAR 0 14
9131: ARRAY
9132: PPUSH
9133: LD_VAR 0 48
9137: PPUSH
9138: CALL_OW 188
// end ;
9142: GO 9003
9144: POP
9145: POP
// if GetLives ( damageUnit ) < 250 and IsInArea ( damageUnit , baseArea ) then
9146: LD_VAR 0 48
9150: PPUSH
9151: CALL_OW 256
9155: PUSH
9156: LD_INT 250
9158: LESS
9159: PUSH
9160: LD_VAR 0 48
9164: PPUSH
9165: LD_VAR 0 4
9169: PPUSH
9170: CALL_OW 308
9174: AND
9175: IFFALSE 9335
// for i := 1 to scientists do
9177: LD_ADDR_VAR 0 14
9181: PUSH
9182: DOUBLE
9183: LD_INT 1
9185: DEC
9186: ST_TO_ADDR
9187: LD_VAR 0 23
9191: PUSH
9192: FOR_TO
9193: IFFALSE 9333
// if GetTag ( scientists [ i ] ) = 1 then
9195: LD_VAR 0 23
9199: PUSH
9200: LD_VAR 0 14
9204: ARRAY
9205: PPUSH
9206: CALL_OW 110
9210: PUSH
9211: LD_INT 1
9213: EQUAL
9214: IFFALSE 9331
// begin if GetTaskList ( scientists [ i ] ) then
9216: LD_VAR 0 23
9220: PUSH
9221: LD_VAR 0 14
9225: ARRAY
9226: PPUSH
9227: CALL_OW 437
9231: IFFALSE 9279
// if GetTaskList ( scientists [ i ] ) [ 1 ] [ 1 ] = e then
9233: LD_VAR 0 23
9237: PUSH
9238: LD_VAR 0 14
9242: ARRAY
9243: PPUSH
9244: CALL_OW 437
9248: PUSH
9249: LD_INT 1
9251: ARRAY
9252: PUSH
9253: LD_INT 1
9255: ARRAY
9256: PUSH
9257: LD_STRING e
9259: EQUAL
9260: IFFALSE 9279
// SetTaskList ( scientists [ i ] , [ ] ) ;
9262: LD_VAR 0 23
9266: PUSH
9267: LD_VAR 0 14
9271: ARRAY
9272: PPUSH
9273: EMPTY
9274: PPUSH
9275: CALL_OW 446
// if IsInUnit ( scientists [ i ] ) then
9279: LD_VAR 0 23
9283: PUSH
9284: LD_VAR 0 14
9288: ARRAY
9289: PPUSH
9290: CALL_OW 310
9294: IFFALSE 9311
// ComExitBuilding ( scientists [ i ] ) ;
9296: LD_VAR 0 23
9300: PUSH
9301: LD_VAR 0 14
9305: ARRAY
9306: PPUSH
9307: CALL_OW 122
// AddComHeal ( scientists [ i ] , damageUnit ) ;
9311: LD_VAR 0 23
9315: PUSH
9316: LD_VAR 0 14
9320: ARRAY
9321: PPUSH
9322: LD_VAR 0 48
9326: PPUSH
9327: CALL_OW 188
// end ;
9331: GO 9192
9333: POP
9334: POP
// end ;
9335: GO 8965
9337: POP
9338: POP
// end else
9339: GO 9483
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
9341: LD_VAR 0 23
9345: PUSH
9346: LD_VAR 0 23
9350: PPUSH
9351: LD_INT 56
9353: PUSH
9354: EMPTY
9355: LIST
9356: PPUSH
9357: CALL_OW 72
9361: AND
9362: PUSH
9363: LD_VAR 0 41
9367: AND
9368: IFFALSE 9483
// for i := 1 to scientists do
9370: LD_ADDR_VAR 0 14
9374: PUSH
9375: DOUBLE
9376: LD_INT 1
9378: DEC
9379: ST_TO_ADDR
9380: LD_VAR 0 23
9384: PUSH
9385: FOR_TO
9386: IFFALSE 9481
// if GetTag ( scientists [ i ] ) = 1 and not HasTask ( scientists [ i ] ) and not IsInUnit ( scientists [ i ] ) then
9388: LD_VAR 0 23
9392: PUSH
9393: LD_VAR 0 14
9397: ARRAY
9398: PPUSH
9399: CALL_OW 110
9403: PUSH
9404: LD_INT 1
9406: EQUAL
9407: PUSH
9408: LD_VAR 0 23
9412: PUSH
9413: LD_VAR 0 14
9417: ARRAY
9418: PPUSH
9419: CALL_OW 314
9423: NOT
9424: AND
9425: PUSH
9426: LD_VAR 0 23
9430: PUSH
9431: LD_VAR 0 14
9435: ARRAY
9436: PPUSH
9437: CALL_OW 310
9441: NOT
9442: AND
9443: IFFALSE 9479
// ComEnterUnit ( scientists [ i ] , lab [ rand ( 1 , lab ) ] ) ;
9445: LD_VAR 0 23
9449: PUSH
9450: LD_VAR 0 14
9454: ARRAY
9455: PPUSH
9456: LD_VAR 0 41
9460: PUSH
9461: LD_INT 1
9463: PPUSH
9464: LD_VAR 0 41
9468: PPUSH
9469: CALL_OW 12
9473: ARRAY
9474: PPUSH
9475: CALL_OW 120
9479: GO 9385
9481: POP
9482: POP
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , us_bulldozer ] ] ) then
9483: LD_INT 22
9485: PUSH
9486: LD_VAR 0 1
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PUSH
9495: LD_INT 34
9497: PUSH
9498: LD_INT 14
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PPUSH
9509: CALL_OW 69
9513: NOT
9514: IFFALSE 9541
// AddComConstruct ( factory [ 1 ] , us_heavy_tracked , engine_combustion , control_remote , us_bulldozer ) ;
9516: LD_VAR 0 40
9520: PUSH
9521: LD_INT 1
9523: ARRAY
9524: PPUSH
9525: LD_INT 4
9527: PPUSH
9528: LD_INT 1
9530: PPUSH
9531: LD_INT 2
9533: PPUSH
9534: LD_INT 14
9536: PPUSH
9537: CALL_OW 185
// if vehicles < vehiclesAmount and factory then
9541: LD_VAR 0 25
9545: PUSH
9546: LD_VAR 0 8
9550: LESS
9551: PUSH
9552: LD_VAR 0 40
9556: AND
9557: IFFALSE 9805
// begin tmp = vehiclesAmount - vehicles ;
9559: LD_ADDR_VAR 0 16
9563: PUSH
9564: LD_VAR 0 8
9568: PUSH
9569: LD_VAR 0 25
9573: MINUS
9574: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
9575: LD_ADDR_VAR 0 32
9579: PUSH
9580: LD_VAR 0 1
9584: PPUSH
9585: LD_VAR 0 2
9589: PPUSH
9590: CALL 14415 0 2
9594: ST_TO_ADDR
// for i := 1 to tmp do
9595: LD_ADDR_VAR 0 14
9599: PUSH
9600: DOUBLE
9601: LD_INT 1
9603: DEC
9604: ST_TO_ADDR
9605: LD_VAR 0 16
9609: PUSH
9610: FOR_TO
9611: IFFALSE 9801
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
9613: LD_ADDR_VAR 0 16
9617: PUSH
9618: LD_VAR 0 32
9622: PUSH
9623: LD_INT 1
9625: PPUSH
9626: LD_VAR 0 32
9630: PPUSH
9631: CALL_OW 12
9635: ARRAY
9636: ST_TO_ADDR
// if tmp in [ 6 , 34 , 14 , 71 , 47 ] then
9637: LD_VAR 0 16
9641: PUSH
9642: LD_INT 6
9644: PUSH
9645: LD_INT 34
9647: PUSH
9648: LD_INT 14
9650: PUSH
9651: LD_INT 71
9653: PUSH
9654: LD_INT 47
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: IN
9664: IFFALSE 9702
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
9666: LD_ADDR_VAR 0 33
9670: PUSH
9671: LD_INT 4
9673: PUSH
9674: EMPTY
9675: LIST
9676: PUSH
9677: LD_INT 14
9679: PUSH
9680: EMPTY
9681: LIST
9682: PUSH
9683: LD_INT 24
9685: PUSH
9686: EMPTY
9687: LIST
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: LIST
9693: PUSH
9694: LD_VAR 0 2
9698: ARRAY
9699: ST_TO_ADDR
9700: GO 9756
// chassis = [ [ us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
9702: LD_ADDR_VAR 0 33
9706: PUSH
9707: LD_INT 3
9709: PUSH
9710: LD_INT 4
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: PUSH
9717: LD_INT 13
9719: PUSH
9720: LD_INT 14
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: PUSH
9727: LD_INT 21
9729: PUSH
9730: LD_INT 23
9732: PUSH
9733: LD_INT 24
9735: PUSH
9736: LD_INT 22
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: LIST
9749: PUSH
9750: LD_VAR 0 2
9754: ARRAY
9755: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_remote , tmp ) ;
9756: LD_VAR 0 40
9760: PUSH
9761: LD_INT 1
9763: ARRAY
9764: PPUSH
9765: LD_VAR 0 33
9769: PUSH
9770: LD_INT 1
9772: PPUSH
9773: LD_VAR 0 33
9777: PPUSH
9778: CALL_OW 12
9782: ARRAY
9783: PPUSH
9784: LD_INT 1
9786: PPUSH
9787: LD_INT 2
9789: PPUSH
9790: LD_VAR 0 16
9794: PPUSH
9795: CALL_OW 185
// end ;
9799: GO 9610
9801: POP
9802: POP
// end else
9803: GO 9818
// ComCancel ( factory [ 1 ] ) ;
9805: LD_VAR 0 40
9809: PUSH
9810: LD_INT 1
9812: ARRAY
9813: PPUSH
9814: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ] ] ) do
9818: LD_ADDR_VAR 0 24
9822: PUSH
9823: LD_VAR 0 4
9827: PPUSH
9828: LD_INT 22
9830: PUSH
9831: LD_VAR 0 1
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PUSH
9840: LD_INT 21
9842: PUSH
9843: LD_INT 2
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 50
9852: PUSH
9853: EMPTY
9854: LIST
9855: PUSH
9856: LD_INT 3
9858: PUSH
9859: LD_INT 2
9861: PUSH
9862: LD_INT 34
9864: PUSH
9865: LD_INT 12
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PUSH
9872: LD_INT 34
9874: PUSH
9875: LD_INT 51
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PUSH
9882: LD_INT 34
9884: PUSH
9885: LD_INT 32
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: PUSH
9892: LD_INT 34
9894: PUSH
9895: LD_INT 31
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: PPUSH
9919: CALL_OW 70
9923: PUSH
9924: FOR_IN
9925: IFFALSE 10080
// begin vehicleInList = false ;
9927: LD_ADDR_VAR 0 26
9931: PUSH
9932: LD_INT 0
9934: ST_TO_ADDR
// for i := 1 to vehicles do
9935: LD_ADDR_VAR 0 14
9939: PUSH
9940: DOUBLE
9941: LD_INT 1
9943: DEC
9944: ST_TO_ADDR
9945: LD_VAR 0 25
9949: PUSH
9950: FOR_TO
9951: IFFALSE 9981
// if vehicle in vehicles [ i ] then
9953: LD_VAR 0 24
9957: PUSH
9958: LD_VAR 0 25
9962: PUSH
9963: LD_VAR 0 14
9967: ARRAY
9968: IN
9969: IFFALSE 9979
// vehicleInList = true ;
9971: LD_ADDR_VAR 0 26
9975: PUSH
9976: LD_INT 1
9978: ST_TO_ADDR
9979: GO 9950
9981: POP
9982: POP
// if not vehicleInList then
9983: LD_VAR 0 26
9987: NOT
9988: IFFALSE 10078
// begin if vehicles < vehiclesToAttackAmount then
9990: LD_VAR 0 25
9994: PUSH
9995: LD_VAR 0 10
9999: LESS
10000: IFFALSE 10041
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] ] ] else
10002: LD_ADDR_VAR 0 25
10006: PUSH
10007: LD_VAR 0 25
10011: PUSH
10012: LD_VAR 0 24
10016: PUSH
10017: LD_VAR 0 24
10021: PPUSH
10022: CALL_OW 313
10026: PUSH
10027: LD_INT 1
10029: ARRAY
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PUSH
10035: EMPTY
10036: LIST
10037: ADD
10038: ST_TO_ADDR
10039: GO 10078
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] ] ] ;
10041: LD_ADDR_VAR 0 25
10045: PUSH
10046: LD_VAR 0 25
10050: PUSH
10051: LD_VAR 0 24
10055: PUSH
10056: LD_VAR 0 24
10060: PPUSH
10061: CALL_OW 313
10065: PUSH
10066: LD_INT 1
10068: ARRAY
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: PUSH
10074: EMPTY
10075: LIST
10076: ADD
10077: ST_TO_ADDR
// end ; end ;
10078: GO 9924
10080: POP
10081: POP
// for enemyUnits in FilterAllUnits ( [ f_enemy , side ] ) do
10082: LD_ADDR_VAR 0 50
10086: PUSH
10087: LD_INT 81
10089: PUSH
10090: LD_VAR 0 1
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PPUSH
10099: CALL_OW 69
10103: PUSH
10104: FOR_IN
10105: IFFALSE 10623
// begin offensiveUnits = [ ] ;
10107: LD_ADDR_VAR 0 27
10111: PUSH
10112: EMPTY
10113: ST_TO_ADDR
// offensiveReadyCounter = 0 ;
10114: LD_ADDR_VAR 0 28
10118: PUSH
10119: LD_INT 0
10121: ST_TO_ADDR
// for i := 1 to vehicles do
10122: LD_ADDR_VAR 0 14
10126: PUSH
10127: DOUBLE
10128: LD_INT 1
10130: DEC
10131: ST_TO_ADDR
10132: LD_VAR 0 25
10136: PUSH
10137: FOR_TO
10138: IFFALSE 10346
// if GetTag ( vehicles [ i ] [ 1 ] ) = 2 then
10140: LD_VAR 0 25
10144: PUSH
10145: LD_VAR 0 14
10149: ARRAY
10150: PUSH
10151: LD_INT 1
10153: ARRAY
10154: PPUSH
10155: CALL_OW 110
10159: PUSH
10160: LD_INT 2
10162: EQUAL
10163: IFFALSE 10344
// begin if GetLives ( vehicles [ i ] [ 1 ] ) > 650 then
10165: LD_VAR 0 25
10169: PUSH
10170: LD_VAR 0 14
10174: ARRAY
10175: PUSH
10176: LD_INT 1
10178: ARRAY
10179: PPUSH
10180: CALL_OW 256
10184: PUSH
10185: LD_INT 650
10187: GREATER
10188: IFFALSE 10204
// offensiveReadyCounter = offensiveReadyCounter + 1 ;
10190: LD_ADDR_VAR 0 28
10194: PUSH
10195: LD_VAR 0 28
10199: PUSH
10200: LD_INT 1
10202: PLUS
10203: ST_TO_ADDR
// if IsInArea ( vehicles [ i ] [ 1 ] , baseArea ) then
10204: LD_VAR 0 25
10208: PUSH
10209: LD_VAR 0 14
10213: ARRAY
10214: PUSH
10215: LD_INT 1
10217: ARRAY
10218: PPUSH
10219: LD_VAR 0 4
10223: PPUSH
10224: CALL_OW 308
10228: IFFALSE 10256
// offensiveUnits = offensiveUnits ^ vehicles [ i ] [ 1 ] ;
10230: LD_ADDR_VAR 0 27
10234: PUSH
10235: LD_VAR 0 27
10239: PUSH
10240: LD_VAR 0 25
10244: PUSH
10245: LD_VAR 0 14
10249: ARRAY
10250: PUSH
10251: LD_INT 1
10253: ARRAY
10254: ADD
10255: ST_TO_ADDR
// for j = 1 to personel do
10256: LD_ADDR_VAR 0 15
10260: PUSH
10261: DOUBLE
10262: LD_INT 1
10264: DEC
10265: ST_TO_ADDR
10266: LD_VAR 0 19
10270: PUSH
10271: FOR_TO
10272: IFFALSE 10342
// if personel [ j ] = vehicles [ i ] [ 2 ] then
10274: LD_VAR 0 19
10278: PUSH
10279: LD_VAR 0 15
10283: ARRAY
10284: PUSH
10285: LD_VAR 0 25
10289: PUSH
10290: LD_VAR 0 14
10294: ARRAY
10295: PUSH
10296: LD_INT 2
10298: ARRAY
10299: EQUAL
10300: IFFALSE 10340
// personel = ReplaceIn ( personel , [ j , personel [ j ] ] , 3 ) ;
10302: LD_ADDR_VAR 0 19
10306: PUSH
10307: LD_VAR 0 19
10311: PPUSH
10312: LD_VAR 0 15
10316: PUSH
10317: LD_VAR 0 19
10321: PUSH
10322: LD_VAR 0 15
10326: ARRAY
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PPUSH
10332: LD_INT 3
10334: PPUSH
10335: CALL 46985 0 3
10339: ST_TO_ADDR
10340: GO 10271
10342: POP
10343: POP
// end ;
10344: GO 10137
10346: POP
10347: POP
// if vehiclesToAttackAmount <= offensiveReadyCounter then
10348: LD_VAR 0 10
10352: PUSH
10353: LD_VAR 0 28
10357: LESSEQUAL
10358: IFFALSE 10621
// begin for i := 1 to offensiveUnits do
10360: LD_ADDR_VAR 0 14
10364: PUSH
10365: DOUBLE
10366: LD_INT 1
10368: DEC
10369: ST_TO_ADDR
10370: LD_VAR 0 27
10374: PUSH
10375: FOR_TO
10376: IFFALSE 10619
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , offensiveUnits [ i ] ) ;
10378: LD_ADDR_VAR 0 29
10382: PUSH
10383: LD_INT 81
10385: PUSH
10386: LD_INT 1
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL_OW 69
10397: PPUSH
10398: LD_VAR 0 27
10402: PUSH
10403: LD_VAR 0 14
10407: ARRAY
10408: PPUSH
10409: CALL_OW 74
10413: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , offensiveUnits [ i ] ) ;
10414: LD_ADDR_VAR 0 30
10418: PUSH
10419: LD_INT 81
10421: PUSH
10422: LD_INT 1
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: LD_INT 2
10431: PUSH
10432: LD_INT 59
10434: PUSH
10435: EMPTY
10436: LIST
10437: PUSH
10438: LD_INT 21
10440: PUSH
10441: LD_INT 1
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PUSH
10448: LD_INT 21
10450: PUSH
10451: LD_INT 2
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: EMPTY
10469: LIST
10470: PPUSH
10471: CALL_OW 69
10475: PPUSH
10476: LD_VAR 0 27
10480: PUSH
10481: LD_VAR 0 14
10485: ARRAY
10486: PPUSH
10487: CALL_OW 74
10491: ST_TO_ADDR
// if GetDistUnits ( offensiveUnits [ i ] , target1 ) + 9 < GetDistUnits ( offensiveUnits [ i ] , target2 ) then
10492: LD_VAR 0 27
10496: PUSH
10497: LD_VAR 0 14
10501: ARRAY
10502: PPUSH
10503: LD_VAR 0 29
10507: PPUSH
10508: CALL_OW 296
10512: PUSH
10513: LD_INT 9
10515: PLUS
10516: PUSH
10517: LD_VAR 0 27
10521: PUSH
10522: LD_VAR 0 14
10526: ARRAY
10527: PPUSH
10528: LD_VAR 0 30
10532: PPUSH
10533: CALL_OW 296
10537: LESS
10538: IFFALSE 10562
// ComAttackUnit ( offensiveUnits [ i ] , target1 ) else
10540: LD_VAR 0 27
10544: PUSH
10545: LD_VAR 0 14
10549: ARRAY
10550: PPUSH
10551: LD_VAR 0 29
10555: PPUSH
10556: CALL_OW 115
10560: GO 10582
// ComAttackUnit ( offensiveUnits [ i ] , target2 ) ;
10562: LD_VAR 0 27
10566: PUSH
10567: LD_VAR 0 14
10571: ARRAY
10572: PPUSH
10573: LD_VAR 0 30
10577: PPUSH
10578: CALL_OW 115
// AddComAgressiveMove ( offensiveUnits [ i ] , GetX ( enemyUnits ) , GetY ( enemyUnits ) ) ;
10582: LD_VAR 0 27
10586: PUSH
10587: LD_VAR 0 14
10591: ARRAY
10592: PPUSH
10593: LD_VAR 0 50
10597: PPUSH
10598: CALL_OW 250
10602: PPUSH
10603: LD_VAR 0 50
10607: PPUSH
10608: CALL_OW 251
10612: PPUSH
10613: CALL_OW 174
// end ;
10617: GO 10375
10619: POP
10620: POP
// end ; end ;
10621: GO 10104
10623: POP
10624: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
10625: LD_ADDR_VAR 0 50
10629: PUSH
10630: LD_VAR 0 7
10634: PPUSH
10635: LD_INT 81
10637: PUSH
10638: LD_VAR 0 1
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: PPUSH
10647: CALL_OW 70
10651: PUSH
10652: FOR_IN
10653: IFFALSE 10881
// begin defenceUnits = [ ] ;
10655: LD_ADDR_VAR 0 31
10659: PUSH
10660: EMPTY
10661: ST_TO_ADDR
// for i := 1 to personel do
10662: LD_ADDR_VAR 0 14
10666: PUSH
10667: DOUBLE
10668: LD_INT 1
10670: DEC
10671: ST_TO_ADDR
10672: LD_VAR 0 19
10676: PUSH
10677: FOR_TO
10678: IFFALSE 10725
// if GetTag ( personel [ i ] ) = 3 then
10680: LD_VAR 0 19
10684: PUSH
10685: LD_VAR 0 14
10689: ARRAY
10690: PPUSH
10691: CALL_OW 110
10695: PUSH
10696: LD_INT 3
10698: EQUAL
10699: IFFALSE 10723
// defenceUnits = defenceUnits ^ personel [ i ] ;
10701: LD_ADDR_VAR 0 31
10705: PUSH
10706: LD_VAR 0 31
10710: PUSH
10711: LD_VAR 0 19
10715: PUSH
10716: LD_VAR 0 14
10720: ARRAY
10721: ADD
10722: ST_TO_ADDR
10723: GO 10677
10725: POP
10726: POP
// for i := 1 to vehicles do
10727: LD_ADDR_VAR 0 14
10731: PUSH
10732: DOUBLE
10733: LD_INT 1
10735: DEC
10736: ST_TO_ADDR
10737: LD_VAR 0 25
10741: PUSH
10742: FOR_TO
10743: IFFALSE 10798
// if GetTag ( vehicles [ i ] [ 1 ] ) = 3 then
10745: LD_VAR 0 25
10749: PUSH
10750: LD_VAR 0 14
10754: ARRAY
10755: PUSH
10756: LD_INT 1
10758: ARRAY
10759: PPUSH
10760: CALL_OW 110
10764: PUSH
10765: LD_INT 3
10767: EQUAL
10768: IFFALSE 10796
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
10770: LD_ADDR_VAR 0 31
10774: PUSH
10775: LD_VAR 0 31
10779: PUSH
10780: LD_VAR 0 25
10784: PUSH
10785: LD_VAR 0 14
10789: ARRAY
10790: PUSH
10791: LD_INT 1
10793: ARRAY
10794: ADD
10795: ST_TO_ADDR
10796: GO 10742
10798: POP
10799: POP
// ComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
10800: LD_VAR 0 31
10804: PPUSH
10805: LD_INT 3
10807: PUSH
10808: LD_INT 60
10810: PUSH
10811: EMPTY
10812: LIST
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PPUSH
10818: CALL_OW 72
10822: PPUSH
10823: LD_VAR 0 50
10827: PPUSH
10828: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , GetX ( enemyUnits ) , GetY ( enemyUnits ) ) ;
10832: LD_VAR 0 31
10836: PPUSH
10837: LD_INT 3
10839: PUSH
10840: LD_INT 60
10842: PUSH
10843: EMPTY
10844: LIST
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PPUSH
10850: CALL_OW 72
10854: PPUSH
10855: LD_VAR 0 50
10859: PPUSH
10860: CALL_OW 250
10864: PPUSH
10865: LD_VAR 0 50
10869: PPUSH
10870: CALL_OW 251
10874: PPUSH
10875: CALL_OW 174
// end ;
10879: GO 10652
10881: POP
10882: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
10883: LD_ADDR_VAR 0 45
10887: PUSH
10888: LD_INT 22
10890: PUSH
10891: LD_VAR 0 1
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: PUSH
10900: LD_INT 2
10902: PUSH
10903: LD_INT 30
10905: PUSH
10906: LD_INT 31
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: LD_INT 30
10915: PUSH
10916: LD_INT 32
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: PUSH
10923: LD_INT 30
10925: PUSH
10926: LD_INT 33
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PUSH
10933: LD_INT 30
10935: PUSH
10936: LD_INT 4
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: LD_INT 30
10945: PUSH
10946: LD_INT 5
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: PPUSH
10965: CALL_OW 69
10969: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
10970: LD_ADDR_VAR 0 46
10974: PUSH
10975: LD_INT 81
10977: PUSH
10978: LD_VAR 0 1
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PUSH
10987: LD_INT 21
10989: PUSH
10990: LD_INT 3
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: PUSH
10997: LD_INT 58
10999: PUSH
11000: EMPTY
11001: LIST
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: PPUSH
11008: CALL_OW 69
11012: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
11013: LD_VAR 0 45
11017: PUSH
11018: LD_VAR 0 46
11022: AND
11023: IFFALSE 11093
// for i in attackBuildings do
11025: LD_ADDR_VAR 0 14
11029: PUSH
11030: LD_VAR 0 45
11034: PUSH
11035: FOR_IN
11036: IFFALSE 11091
// for j in enemyBuildings do
11038: LD_ADDR_VAR 0 15
11042: PUSH
11043: LD_VAR 0 46
11047: PUSH
11048: FOR_IN
11049: IFFALSE 11087
// if GetDistUnits ( i , j ) < 12 then
11051: LD_VAR 0 14
11055: PPUSH
11056: LD_VAR 0 15
11060: PPUSH
11061: CALL_OW 296
11065: PUSH
11066: LD_INT 12
11068: LESS
11069: IFFALSE 11085
// ComAttackUnit ( i , j ) ;
11071: LD_VAR 0 14
11075: PPUSH
11076: LD_VAR 0 15
11080: PPUSH
11081: CALL_OW 115
11085: GO 11048
11087: POP
11088: POP
11089: GO 11035
11091: POP
11092: POP
// if canRebuild then
11093: LD_VAR 0 12
11097: IFFALSE 11766
// begin tmp = false ;
11099: LD_ADDR_VAR 0 16
11103: PUSH
11104: LD_INT 0
11106: ST_TO_ADDR
// unit = false ;
11107: LD_ADDR_VAR 0 18
11111: PUSH
11112: LD_INT 0
11114: ST_TO_ADDR
// for destroyedBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 250 ] ] ] ) do
11115: LD_ADDR_VAR 0 36
11119: PUSH
11120: LD_VAR 0 4
11124: PPUSH
11125: LD_INT 22
11127: PUSH
11128: LD_VAR 0 1
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 21
11139: PUSH
11140: LD_INT 3
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: LD_INT 3
11149: PUSH
11150: LD_INT 24
11152: PUSH
11153: LD_INT 250
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: LIST
11168: PPUSH
11169: CALL_OW 70
11173: PUSH
11174: FOR_IN
11175: IFFALSE 11277
// begin unit = destroyedBuilding ;
11177: LD_ADDR_VAR 0 18
11181: PUSH
11182: LD_VAR 0 36
11186: ST_TO_ADDR
// for i := 1 to destroyedBuildings / 4 do
11187: LD_ADDR_VAR 0 14
11191: PUSH
11192: DOUBLE
11193: LD_INT 1
11195: DEC
11196: ST_TO_ADDR
11197: LD_VAR 0 35
11201: PUSH
11202: LD_INT 4
11204: DIVREAL
11205: PUSH
11206: FOR_TO
11207: IFFALSE 11273
// if destroyedBuildings [ i + 1 ] = GetX ( destroyedBuilding ) and destroyedBuildings [ i + 2 ] = GetY ( destroyedBuilding ) then
11209: LD_VAR 0 35
11213: PUSH
11214: LD_VAR 0 14
11218: PUSH
11219: LD_INT 1
11221: PLUS
11222: ARRAY
11223: PUSH
11224: LD_VAR 0 36
11228: PPUSH
11229: CALL_OW 250
11233: EQUAL
11234: PUSH
11235: LD_VAR 0 35
11239: PUSH
11240: LD_VAR 0 14
11244: PUSH
11245: LD_INT 2
11247: PLUS
11248: ARRAY
11249: PUSH
11250: LD_VAR 0 36
11254: PPUSH
11255: CALL_OW 251
11259: EQUAL
11260: AND
11261: IFFALSE 11271
// tmp = true ;
11263: LD_ADDR_VAR 0 16
11267: PUSH
11268: LD_INT 1
11270: ST_TO_ADDR
11271: GO 11206
11273: POP
11274: POP
// end ;
11275: GO 11174
11277: POP
11278: POP
// if not tmp and unit then
11279: LD_VAR 0 16
11283: NOT
11284: PUSH
11285: LD_VAR 0 18
11289: AND
11290: IFFALSE 11550
// begin if GetBType ( unit ) = 1 then
11292: LD_VAR 0 18
11296: PPUSH
11297: CALL_OW 266
11301: PUSH
11302: LD_INT 1
11304: EQUAL
11305: IFFALSE 11359
// destroyedBuildings = destroyedBuildings ^ [ 0 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11307: LD_ADDR_VAR 0 35
11311: PUSH
11312: LD_VAR 0 35
11316: PUSH
11317: LD_INT 0
11319: PUSH
11320: LD_VAR 0 18
11324: PPUSH
11325: CALL_OW 250
11329: PUSH
11330: LD_VAR 0 18
11334: PPUSH
11335: CALL_OW 251
11339: PUSH
11340: LD_VAR 0 18
11344: PPUSH
11345: CALL_OW 254
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: ADD
11356: ST_TO_ADDR
11357: GO 11550
// if GetBType ( unit ) = 3 then
11359: LD_VAR 0 18
11363: PPUSH
11364: CALL_OW 266
11368: PUSH
11369: LD_INT 3
11371: EQUAL
11372: IFFALSE 11426
// destroyedBuildings = destroyedBuildings ^ [ 2 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11374: LD_ADDR_VAR 0 35
11378: PUSH
11379: LD_VAR 0 35
11383: PUSH
11384: LD_INT 2
11386: PUSH
11387: LD_VAR 0 18
11391: PPUSH
11392: CALL_OW 250
11396: PUSH
11397: LD_VAR 0 18
11401: PPUSH
11402: CALL_OW 251
11406: PUSH
11407: LD_VAR 0 18
11411: PPUSH
11412: CALL_OW 254
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: ADD
11423: ST_TO_ADDR
11424: GO 11550
// if GetBType ( unit ) = 5 then
11426: LD_VAR 0 18
11430: PPUSH
11431: CALL_OW 266
11435: PUSH
11436: LD_INT 5
11438: EQUAL
11439: IFFALSE 11493
// destroyedBuildings = destroyedBuildings ^ [ 4 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11441: LD_ADDR_VAR 0 35
11445: PUSH
11446: LD_VAR 0 35
11450: PUSH
11451: LD_INT 4
11453: PUSH
11454: LD_VAR 0 18
11458: PPUSH
11459: CALL_OW 250
11463: PUSH
11464: LD_VAR 0 18
11468: PPUSH
11469: CALL_OW 251
11473: PUSH
11474: LD_VAR 0 18
11478: PPUSH
11479: CALL_OW 254
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: ADD
11490: ST_TO_ADDR
11491: GO 11550
// destroyedBuildings = destroyedBuildings ^ [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ;
11493: LD_ADDR_VAR 0 35
11497: PUSH
11498: LD_VAR 0 35
11502: PUSH
11503: LD_VAR 0 18
11507: PPUSH
11508: CALL_OW 266
11512: PUSH
11513: LD_VAR 0 18
11517: PPUSH
11518: CALL_OW 250
11522: PUSH
11523: LD_VAR 0 18
11527: PPUSH
11528: CALL_OW 251
11532: PUSH
11533: LD_VAR 0 18
11537: PPUSH
11538: CALL_OW 254
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: ADD
11549: ST_TO_ADDR
// end ; for constructedBuilding in constructedBuildings do
11550: LD_ADDR_VAR 0 37
11554: PUSH
11555: LD_VAR 0 38
11559: PUSH
11560: FOR_IN
11561: IFFALSE 11764
// for i := 1 to destroyedBuildings / 4 do
11563: LD_ADDR_VAR 0 14
11567: PUSH
11568: DOUBLE
11569: LD_INT 1
11571: DEC
11572: ST_TO_ADDR
11573: LD_VAR 0 35
11577: PUSH
11578: LD_INT 4
11580: DIVREAL
11581: PUSH
11582: FOR_TO
11583: IFFALSE 11760
// if destroyedBuildings [ i + 1 ] = GetX ( constructedBuilding ) and destroyedBuildings [ i + 2 ] = GetY ( constructedBuilding ) and IsOK ( constructedBuilding ) then
11585: LD_VAR 0 35
11589: PUSH
11590: LD_VAR 0 14
11594: PUSH
11595: LD_INT 1
11597: PLUS
11598: ARRAY
11599: PUSH
11600: LD_VAR 0 37
11604: PPUSH
11605: CALL_OW 250
11609: EQUAL
11610: PUSH
11611: LD_VAR 0 35
11615: PUSH
11616: LD_VAR 0 14
11620: PUSH
11621: LD_INT 2
11623: PLUS
11624: ARRAY
11625: PUSH
11626: LD_VAR 0 37
11630: PPUSH
11631: CALL_OW 251
11635: EQUAL
11636: AND
11637: PUSH
11638: LD_VAR 0 37
11642: PPUSH
11643: CALL_OW 302
11647: AND
11648: IFFALSE 11758
// begin destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11650: LD_ADDR_VAR 0 35
11654: PUSH
11655: LD_VAR 0 35
11659: PPUSH
11660: LD_INT 1
11662: PPUSH
11663: CALL_OW 3
11667: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11668: LD_ADDR_VAR 0 35
11672: PUSH
11673: LD_VAR 0 35
11677: PPUSH
11678: LD_INT 1
11680: PPUSH
11681: CALL_OW 3
11685: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11686: LD_ADDR_VAR 0 35
11690: PUSH
11691: LD_VAR 0 35
11695: PPUSH
11696: LD_INT 1
11698: PPUSH
11699: CALL_OW 3
11703: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11704: LD_ADDR_VAR 0 35
11708: PUSH
11709: LD_VAR 0 35
11713: PPUSH
11714: LD_INT 1
11716: PPUSH
11717: CALL_OW 3
11721: ST_TO_ADDR
// if GetType ( constructedBuilding ) in [ b_bunker , b_turret ] then
11722: LD_VAR 0 37
11726: PPUSH
11727: CALL_OW 247
11731: PUSH
11732: LD_INT 32
11734: PUSH
11735: LD_INT 33
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: IN
11742: IFFALSE 11758
// AddComPlaceWeapon ( constructedBuilding , weapons ) ;
11744: LD_VAR 0 37
11748: PPUSH
11749: LD_VAR 0 32
11753: PPUSH
11754: CALL_OW 208
// end ;
11758: GO 11582
11760: POP
11761: POP
11762: GO 11560
11764: POP
11765: POP
// end ; wait ( 0 0$01 ) ;
11766: LD_INT 35
11768: PPUSH
11769: CALL_OW 67
// until not personel ;
11773: LD_VAR 0 19
11777: NOT
11778: IFFALSE 5471
// end ; end_of_file
11780: LD_VAR 0 13
11784: RET
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
11785: LD_INT 0
11787: PPUSH
11788: PPUSH
// if debugMode then
11789: LD_EXP 33
11793: IFFALSE 11810
// unit := NewCharacter ( ident ) ;
11795: LD_ADDR_VAR 0 5
11799: PUSH
11800: LD_VAR 0 1
11804: PPUSH
11805: CALL_OW 25
11809: ST_TO_ADDR
// if exist_mode and not debugMode then
11810: LD_VAR 0 2
11814: PUSH
11815: LD_EXP 33
11819: NOT
11820: AND
11821: IFFALSE 11846
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
11823: LD_ADDR_VAR 0 5
11827: PUSH
11828: LD_EXP 32
11832: PUSH
11833: LD_VAR 0 1
11837: STR
11838: PPUSH
11839: CALL_OW 34
11843: ST_TO_ADDR
11844: GO 11868
// if not debugMode then
11846: LD_EXP 33
11850: NOT
11851: IFFALSE 11868
// unit := NewCharacter ( ident ) ;
11853: LD_ADDR_VAR 0 5
11857: PUSH
11858: LD_VAR 0 1
11862: PPUSH
11863: CALL_OW 25
11867: ST_TO_ADDR
// if class then
11868: LD_VAR 0 3
11872: IFFALSE 11888
// SetClass ( unit , class ) ;
11874: LD_VAR 0 5
11878: PPUSH
11879: LD_VAR 0 3
11883: PPUSH
11884: CALL_OW 336
// result := unit ;
11888: LD_ADDR_VAR 0 4
11892: PUSH
11893: LD_VAR 0 5
11897: ST_TO_ADDR
// end ;
11898: LD_VAR 0 4
11902: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
11903: LD_INT 0
11905: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
11906: LD_VAR 0 1
11910: PPUSH
11911: CALL_OW 255
11915: PUSH
11916: LD_VAR 0 3
11920: EQUAL
11921: PUSH
11922: LD_VAR 0 1
11926: PPUSH
11927: CALL_OW 302
11931: AND
11932: IFFALSE 11954
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
11934: LD_VAR 0 1
11938: PPUSH
11939: LD_EXP 31
11943: PUSH
11944: LD_VAR 0 2
11948: STR
11949: PPUSH
11950: CALL_OW 38
// end ;
11954: LD_VAR 0 4
11958: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
11959: LD_INT 0
11961: PPUSH
11962: PPUSH
11963: PPUSH
// resultCharactersToSave = [ ] ;
11964: LD_ADDR_VAR 0 6
11968: PUSH
11969: EMPTY
11970: ST_TO_ADDR
// for unit in characters do
11971: LD_ADDR_VAR 0 5
11975: PUSH
11976: LD_VAR 0 1
11980: PUSH
11981: FOR_IN
11982: IFFALSE 12030
// if GetSide ( unit ) = side and IsOK ( unit ) then
11984: LD_VAR 0 5
11988: PPUSH
11989: CALL_OW 255
11993: PUSH
11994: LD_VAR 0 3
11998: EQUAL
11999: PUSH
12000: LD_VAR 0 5
12004: PPUSH
12005: CALL_OW 302
12009: AND
12010: IFFALSE 12028
// resultCharactersToSave = resultCharactersToSave ^ unit ;
12012: LD_ADDR_VAR 0 6
12016: PUSH
12017: LD_VAR 0 6
12021: PUSH
12022: LD_VAR 0 5
12026: ADD
12027: ST_TO_ADDR
12028: GO 11981
12030: POP
12031: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
12032: LD_VAR 0 6
12036: PPUSH
12037: LD_EXP 31
12041: PUSH
12042: LD_VAR 0 2
12046: STR
12047: PPUSH
12048: CALL_OW 38
// end ;
12052: LD_VAR 0 4
12056: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
12057: LD_INT 0
12059: PPUSH
12060: PPUSH
// for unit in units do
12061: LD_ADDR_VAR 0 5
12065: PUSH
12066: LD_VAR 0 1
12070: PUSH
12071: FOR_IN
12072: IFFALSE 12095
// PlaceUnitArea ( unit , area , spawnMode ) ;
12074: LD_VAR 0 5
12078: PPUSH
12079: LD_VAR 0 2
12083: PPUSH
12084: LD_VAR 0 3
12088: PPUSH
12089: CALL_OW 49
12093: GO 12071
12095: POP
12096: POP
// end ;
12097: LD_VAR 0 4
12101: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
12102: LD_INT 0
12104: PPUSH
12105: PPUSH
12106: PPUSH
12107: PPUSH
// units = characters ;
12108: LD_ADDR_VAR 0 9
12112: PUSH
12113: LD_VAR 0 1
12117: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod , Kirilenkova ] ;
12118: LD_ADDR_VAR 0 9
12122: PUSH
12123: LD_VAR 0 9
12127: PUSH
12128: LD_EXP 39
12132: PUSH
12133: LD_EXP 40
12137: PUSH
12138: LD_EXP 41
12142: PUSH
12143: LD_EXP 42
12147: PUSH
12148: LD_EXP 43
12152: PUSH
12153: LD_EXP 44
12157: PUSH
12158: LD_EXP 45
12162: PUSH
12163: LD_EXP 46
12167: PUSH
12168: LD_EXP 51
12172: PUSH
12173: LD_EXP 48
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: DIFF
12190: ST_TO_ADDR
// if not units and not canTalkHero then
12191: LD_VAR 0 9
12195: NOT
12196: PUSH
12197: LD_VAR 0 5
12201: NOT
12202: AND
12203: IFFALSE 12207
// exit ;
12205: GO 12380
// if not units then
12207: LD_VAR 0 9
12211: NOT
12212: IFFALSE 12233
// units = characters diff [ Burlak ] ;
12214: LD_ADDR_VAR 0 9
12218: PUSH
12219: LD_VAR 0 1
12223: PUSH
12224: LD_EXP 39
12228: PUSH
12229: EMPTY
12230: LIST
12231: DIFF
12232: ST_TO_ADDR
// if not units and canTalkHero then
12233: LD_VAR 0 9
12237: NOT
12238: PUSH
12239: LD_VAR 0 5
12243: AND
12244: IFFALSE 12248
// exit ;
12246: GO 12380
// speaker := units [ rand ( 1 , units ) ] ;
12248: LD_ADDR_VAR 0 8
12252: PUSH
12253: LD_VAR 0 9
12257: PUSH
12258: LD_INT 1
12260: PPUSH
12261: LD_VAR 0 9
12265: PPUSH
12266: CALL_OW 12
12270: ARRAY
12271: ST_TO_ADDR
// if radio then
12272: LD_VAR 0 4
12276: IFFALSE 12325
// begin if GetSex ( speaker ) = sex_male then
12278: LD_VAR 0 8
12282: PPUSH
12283: CALL_OW 258
12287: PUSH
12288: LD_INT 1
12290: EQUAL
12291: IFFALSE 12309
// SayRadio ( speaker , dialogMID ) else
12293: LD_VAR 0 8
12297: PPUSH
12298: LD_VAR 0 2
12302: PPUSH
12303: CALL_OW 94
12307: GO 12323
// SayRadio ( speaker , dialogFID ) ;
12309: LD_VAR 0 8
12313: PPUSH
12314: LD_VAR 0 3
12318: PPUSH
12319: CALL_OW 94
// end else
12323: GO 12370
// begin if GetSex ( speaker ) = sex_male then
12325: LD_VAR 0 8
12329: PPUSH
12330: CALL_OW 258
12334: PUSH
12335: LD_INT 1
12337: EQUAL
12338: IFFALSE 12356
// Say ( speaker , dialogMID ) else
12340: LD_VAR 0 8
12344: PPUSH
12345: LD_VAR 0 2
12349: PPUSH
12350: CALL_OW 88
12354: GO 12370
// Say ( speaker , dialogFID ) ;
12356: LD_VAR 0 8
12360: PPUSH
12361: LD_VAR 0 3
12365: PPUSH
12366: CALL_OW 88
// end ; result := speaker ;
12370: LD_ADDR_VAR 0 6
12374: PUSH
12375: LD_VAR 0 8
12379: ST_TO_ADDR
// end ;
12380: LD_VAR 0 6
12384: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
12385: LD_INT 0
12387: PPUSH
12388: PPUSH
// dir := GetDir ( bunker ) - 3 ;
12389: LD_ADDR_VAR 0 4
12393: PUSH
12394: LD_VAR 0 2
12398: PPUSH
12399: CALL_OW 254
12403: PUSH
12404: LD_INT 3
12406: MINUS
12407: ST_TO_ADDR
// if dir < 0 then
12408: LD_VAR 0 4
12412: PUSH
12413: LD_INT 0
12415: LESS
12416: IFFALSE 12432
// dir := 6 + dir ;
12418: LD_ADDR_VAR 0 4
12422: PUSH
12423: LD_INT 6
12425: PUSH
12426: LD_VAR 0 4
12430: PLUS
12431: ST_TO_ADDR
// SetDir ( un , dir ) ;
12432: LD_VAR 0 1
12436: PPUSH
12437: LD_VAR 0 4
12441: PPUSH
12442: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
12446: LD_VAR 0 1
12450: PPUSH
12451: LD_VAR 0 2
12455: PPUSH
12456: CALL_OW 52
// result = un ;
12460: LD_ADDR_VAR 0 3
12464: PUSH
12465: LD_VAR 0 1
12469: ST_TO_ADDR
// end ;
12470: LD_VAR 0 3
12474: RET
// export function AddComCaptureBuilding ( engs , building ) ; var eng ; begin
12475: LD_INT 0
12477: PPUSH
12478: PPUSH
// for eng in engs do
12479: LD_ADDR_VAR 0 4
12483: PUSH
12484: LD_VAR 0 1
12488: PUSH
12489: FOR_IN
12490: IFFALSE 12607
// if GetClass ( eng ) = class_engineer and IsOK ( eng ) and building and not GetSide ( building ) = GetSide ( eng ) then
12492: LD_VAR 0 4
12496: PPUSH
12497: CALL_OW 257
12501: PUSH
12502: LD_INT 2
12504: EQUAL
12505: PUSH
12506: LD_VAR 0 4
12510: PPUSH
12511: CALL_OW 302
12515: AND
12516: PUSH
12517: LD_VAR 0 2
12521: AND
12522: PUSH
12523: LD_VAR 0 2
12527: PPUSH
12528: CALL_OW 255
12532: PUSH
12533: LD_VAR 0 4
12537: PPUSH
12538: CALL_OW 255
12542: EQUAL
12543: NOT
12544: AND
12545: IFFALSE 12605
// AddTaskList ( eng , [ [ e , GetX ( building ) , GetY ( building ) , building , 0 , 0 , 0 ] ] ) end ;
12547: LD_VAR 0 4
12551: PPUSH
12552: LD_STRING e
12554: PUSH
12555: LD_VAR 0 2
12559: PPUSH
12560: CALL_OW 250
12564: PUSH
12565: LD_VAR 0 2
12569: PPUSH
12570: CALL_OW 251
12574: PUSH
12575: LD_VAR 0 2
12579: PUSH
12580: LD_INT 0
12582: PUSH
12583: LD_INT 0
12585: PUSH
12586: LD_INT 0
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: PUSH
12598: EMPTY
12599: LIST
12600: PPUSH
12601: CALL_OW 447
12605: GO 12489
12607: POP
12608: POP
12609: LD_VAR 0 3
12613: RET
// export function Delete2D ( tab , firstIndex , secondIndex ) ; var i , list , tabPom ; begin
12614: LD_INT 0
12616: PPUSH
12617: PPUSH
12618: PPUSH
12619: PPUSH
// tabPom := Delete ( tab [ firstIndex ] , secondIndex ) ;
12620: LD_ADDR_VAR 0 7
12624: PUSH
12625: LD_VAR 0 1
12629: PUSH
12630: LD_VAR 0 2
12634: ARRAY
12635: PPUSH
12636: LD_VAR 0 3
12640: PPUSH
12641: CALL_OW 3
12645: ST_TO_ADDR
// tab := Replace ( tab , firstIndex , tabPom ) ;
12646: LD_ADDR_VAR 0 1
12650: PUSH
12651: LD_VAR 0 1
12655: PPUSH
12656: LD_VAR 0 2
12660: PPUSH
12661: LD_VAR 0 7
12665: PPUSH
12666: CALL_OW 1
12670: ST_TO_ADDR
// result := tab ;
12671: LD_ADDR_VAR 0 4
12675: PUSH
12676: LD_VAR 0 1
12680: ST_TO_ADDR
// end ;
12681: LD_VAR 0 4
12685: RET
// export function Nef_PrepareBase ( base_dep , area , name , skill , sources , nation , personel ) ; var i , j , d , b , f , x , un , base , side , buildings , tmp ; begin
12686: LD_INT 0
12688: PPUSH
12689: PPUSH
12690: PPUSH
12691: PPUSH
12692: PPUSH
12693: PPUSH
12694: PPUSH
12695: PPUSH
12696: PPUSH
12697: PPUSH
12698: PPUSH
12699: PPUSH
// result := [ ] ;
12700: LD_ADDR_VAR 0 8
12704: PUSH
12705: EMPTY
12706: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12707: LD_VAR 0 1
12711: PPUSH
12712: CALL_OW 266
12716: PUSH
12717: LD_INT 0
12719: PUSH
12720: LD_INT 1
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: IN
12727: NOT
12728: IFFALSE 12732
// exit ;
12730: GO 14410
// if name then
12732: LD_VAR 0 3
12736: IFFALSE 12752
// SetBName ( base_dep , name ) ;
12738: LD_VAR 0 1
12742: PPUSH
12743: LD_VAR 0 3
12747: PPUSH
12748: CALL_OW 500
// base := GetBase ( base_dep ) ;
12752: LD_ADDR_VAR 0 16
12756: PUSH
12757: LD_VAR 0 1
12761: PPUSH
12762: CALL_OW 274
12766: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12767: LD_ADDR_VAR 0 17
12771: PUSH
12772: LD_VAR 0 1
12776: PPUSH
12777: CALL_OW 255
12781: ST_TO_ADDR
// if sources then
12782: LD_VAR 0 5
12786: IFFALSE 12833
// for i = 1 to 3 do
12788: LD_ADDR_VAR 0 9
12792: PUSH
12793: DOUBLE
12794: LD_INT 1
12796: DEC
12797: ST_TO_ADDR
12798: LD_INT 3
12800: PUSH
12801: FOR_TO
12802: IFFALSE 12831
// AddResourceType ( base , i , sources [ i ] ) ;
12804: LD_VAR 0 16
12808: PPUSH
12809: LD_VAR 0 9
12813: PPUSH
12814: LD_VAR 0 5
12818: PUSH
12819: LD_VAR 0 9
12823: ARRAY
12824: PPUSH
12825: CALL_OW 276
12829: GO 12801
12831: POP
12832: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12833: LD_ADDR_VAR 0 18
12837: PUSH
12838: LD_VAR 0 16
12842: PPUSH
12843: LD_VAR 0 2
12847: PPUSH
12848: LD_INT 1
12850: PPUSH
12851: CALL 49733 0 3
12855: ST_TO_ADDR
// InitHc ;
12856: CALL_OW 19
// InitUc ;
12860: CALL_OW 18
// uc_side := side ;
12864: LD_ADDR_OWVAR 20
12868: PUSH
12869: LD_VAR 0 17
12873: ST_TO_ADDR
// uc_nation := nation ;
12874: LD_ADDR_OWVAR 21
12878: PUSH
12879: LD_VAR 0 6
12883: ST_TO_ADDR
// if buildings then
12884: LD_VAR 0 18
12888: IFFALSE 14269
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12890: LD_ADDR_VAR 0 19
12894: PUSH
12895: LD_VAR 0 18
12899: PPUSH
12900: LD_INT 2
12902: PUSH
12903: LD_INT 30
12905: PUSH
12906: LD_INT 29
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PUSH
12913: LD_INT 30
12915: PUSH
12916: LD_INT 30
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: LIST
12927: PPUSH
12928: CALL_OW 72
12932: ST_TO_ADDR
// if tmp then
12933: LD_VAR 0 19
12937: IFFALSE 12985
// for i in tmp do
12939: LD_ADDR_VAR 0 9
12943: PUSH
12944: LD_VAR 0 19
12948: PUSH
12949: FOR_IN
12950: IFFALSE 12983
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12952: LD_VAR 0 9
12956: PPUSH
12957: CALL_OW 250
12961: PPUSH
12962: LD_VAR 0 9
12966: PPUSH
12967: CALL_OW 251
12971: PPUSH
12972: LD_VAR 0 17
12976: PPUSH
12977: CALL_OW 441
12981: GO 12949
12983: POP
12984: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12985: LD_VAR 0 18
12989: PPUSH
12990: LD_INT 2
12992: PUSH
12993: LD_INT 30
12995: PUSH
12996: LD_INT 31
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: PUSH
13003: LD_INT 30
13005: PUSH
13006: LD_INT 32
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: PUSH
13013: LD_INT 30
13015: PUSH
13016: LD_INT 33
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: PPUSH
13029: CALL_OW 72
13033: IFFALSE 13132
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13035: LD_ADDR_VAR 0 9
13039: PUSH
13040: LD_VAR 0 18
13044: PPUSH
13045: LD_INT 2
13047: PUSH
13048: LD_INT 30
13050: PUSH
13051: LD_INT 31
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PUSH
13058: LD_INT 30
13060: PUSH
13061: LD_INT 32
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: LD_INT 30
13070: PUSH
13071: LD_INT 33
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: PPUSH
13084: CALL_OW 72
13088: PUSH
13089: FOR_IN
13090: IFFALSE 13130
// begin if not GetBWeapon ( i ) then
13092: LD_VAR 0 9
13096: PPUSH
13097: CALL_OW 269
13101: NOT
13102: IFFALSE 13128
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13104: LD_VAR 0 9
13108: PPUSH
13109: LD_VAR 0 9
13113: PPUSH
13114: LD_VAR 0 2
13118: PPUSH
13119: CALL 51995 0 2
13123: PPUSH
13124: CALL_OW 431
// end ;
13128: GO 13089
13130: POP
13131: POP
// end ; for i = 1 to personel do
13132: LD_ADDR_VAR 0 9
13136: PUSH
13137: DOUBLE
13138: LD_INT 1
13140: DEC
13141: ST_TO_ADDR
13142: LD_VAR 0 7
13146: PUSH
13147: FOR_TO
13148: IFFALSE 14249
// begin if i > 4 then
13150: LD_VAR 0 9
13154: PUSH
13155: LD_INT 4
13157: GREATER
13158: IFFALSE 13162
// break ;
13160: GO 14249
// case i of 1 :
13162: LD_VAR 0 9
13166: PUSH
13167: LD_INT 1
13169: DOUBLE
13170: EQUAL
13171: IFTRUE 13175
13173: GO 13266
13175: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13176: LD_ADDR_VAR 0 13
13180: PUSH
13181: LD_VAR 0 18
13185: PPUSH
13186: LD_INT 22
13188: PUSH
13189: LD_VAR 0 17
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 58
13200: PUSH
13201: EMPTY
13202: LIST
13203: PUSH
13204: LD_INT 2
13206: PUSH
13207: LD_INT 30
13209: PUSH
13210: LD_INT 31
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: PUSH
13217: LD_INT 30
13219: PUSH
13220: LD_INT 32
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: PUSH
13227: LD_INT 30
13229: PUSH
13230: LD_INT 4
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PUSH
13237: LD_INT 30
13239: PUSH
13240: LD_INT 5
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: LIST
13258: PPUSH
13259: CALL_OW 72
13263: ST_TO_ADDR
13264: GO 13499
13266: LD_INT 2
13268: DOUBLE
13269: EQUAL
13270: IFTRUE 13274
13272: GO 13336
13274: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13275: LD_ADDR_VAR 0 13
13279: PUSH
13280: LD_VAR 0 18
13284: PPUSH
13285: LD_INT 22
13287: PUSH
13288: LD_VAR 0 17
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: LD_INT 2
13299: PUSH
13300: LD_INT 30
13302: PUSH
13303: LD_INT 0
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PUSH
13310: LD_INT 30
13312: PUSH
13313: LD_INT 1
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: LIST
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: PPUSH
13329: CALL_OW 72
13333: ST_TO_ADDR
13334: GO 13499
13336: LD_INT 3
13338: DOUBLE
13339: EQUAL
13340: IFTRUE 13344
13342: GO 13417
13344: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_control_tower ] , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13345: LD_ADDR_VAR 0 13
13349: PUSH
13350: LD_VAR 0 18
13354: PPUSH
13355: LD_INT 22
13357: PUSH
13358: LD_VAR 0 17
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: LD_INT 2
13369: PUSH
13370: LD_INT 30
13372: PUSH
13373: LD_INT 36
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PUSH
13380: LD_INT 30
13382: PUSH
13383: LD_INT 2
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: PUSH
13390: LD_INT 30
13392: PUSH
13393: LD_INT 3
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 72
13414: ST_TO_ADDR
13415: GO 13499
13417: LD_INT 4
13419: DOUBLE
13420: EQUAL
13421: IFTRUE 13425
13423: GO 13498
13425: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13426: LD_ADDR_VAR 0 13
13430: PUSH
13431: LD_VAR 0 18
13435: PPUSH
13436: LD_INT 22
13438: PUSH
13439: LD_VAR 0 17
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 2
13450: PUSH
13451: LD_INT 30
13453: PUSH
13454: LD_INT 6
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: PUSH
13461: LD_INT 30
13463: PUSH
13464: LD_INT 7
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PUSH
13471: LD_INT 30
13473: PUSH
13474: LD_INT 8
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PPUSH
13491: CALL_OW 72
13495: ST_TO_ADDR
13496: GO 13499
13498: POP
// if i = 1 then
13499: LD_VAR 0 9
13503: PUSH
13504: LD_INT 1
13506: EQUAL
13507: IFFALSE 13625
// begin tmp := [ ] ;
13509: LD_ADDR_VAR 0 19
13513: PUSH
13514: EMPTY
13515: ST_TO_ADDR
// for j in f do
13516: LD_ADDR_VAR 0 10
13520: PUSH
13521: LD_VAR 0 13
13525: PUSH
13526: FOR_IN
13527: IFFALSE 13607
// if GetBType ( j ) in [ b_breastwork , b_bunker ] then
13529: LD_VAR 0 10
13533: PPUSH
13534: CALL_OW 266
13538: PUSH
13539: LD_INT 31
13541: PUSH
13542: LD_INT 32
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: IN
13549: IFFALSE 13576
// tmp := Insert ( tmp , 1 , j ) else
13551: LD_ADDR_VAR 0 19
13555: PUSH
13556: LD_VAR 0 19
13560: PPUSH
13561: LD_INT 1
13563: PPUSH
13564: LD_VAR 0 10
13568: PPUSH
13569: CALL_OW 2
13573: ST_TO_ADDR
13574: GO 13605
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13576: LD_ADDR_VAR 0 19
13580: PUSH
13581: LD_VAR 0 19
13585: PPUSH
13586: LD_VAR 0 19
13590: PUSH
13591: LD_INT 1
13593: PLUS
13594: PPUSH
13595: LD_VAR 0 10
13599: PPUSH
13600: CALL_OW 2
13604: ST_TO_ADDR
13605: GO 13526
13607: POP
13608: POP
// if tmp then
13609: LD_VAR 0 19
13613: IFFALSE 13625
// f := tmp ;
13615: LD_ADDR_VAR 0 13
13619: PUSH
13620: LD_VAR 0 19
13624: ST_TO_ADDR
// end ; x := personel [ i ] ;
13625: LD_ADDR_VAR 0 14
13629: PUSH
13630: LD_VAR 0 7
13634: PUSH
13635: LD_VAR 0 9
13639: ARRAY
13640: ST_TO_ADDR
// if x = - 1 then
13641: LD_VAR 0 14
13645: PUSH
13646: LD_INT 1
13648: NEG
13649: EQUAL
13650: IFFALSE 13844
// begin for j in f do
13652: LD_ADDR_VAR 0 10
13656: PUSH
13657: LD_VAR 0 13
13661: PUSH
13662: FOR_IN
13663: IFFALSE 13840
// repeat InitHc ;
13665: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13669: LD_VAR 0 10
13673: PPUSH
13674: CALL_OW 266
13678: PUSH
13679: LD_INT 5
13681: EQUAL
13682: IFFALSE 13737
// begin if UnitsInside ( j ) < 3 then
13684: LD_VAR 0 10
13688: PPUSH
13689: CALL_OW 313
13693: PUSH
13694: LD_INT 3
13696: LESS
13697: IFFALSE 13718
// PrepareHuman ( false , i , skill ) else
13699: LD_INT 0
13701: PPUSH
13702: LD_VAR 0 9
13706: PPUSH
13707: LD_VAR 0 4
13711: PPUSH
13712: CALL_OW 380
13716: GO 13735
// PrepareHuman ( false , i , skill ) ;
13718: LD_INT 0
13720: PPUSH
13721: LD_VAR 0 9
13725: PPUSH
13726: LD_VAR 0 4
13730: PPUSH
13731: CALL_OW 380
// end else
13735: GO 13754
// PrepareHuman ( false , i , skill ) ;
13737: LD_INT 0
13739: PPUSH
13740: LD_VAR 0 9
13744: PPUSH
13745: LD_VAR 0 4
13749: PPUSH
13750: CALL_OW 380
// un := CreateHuman ;
13754: LD_ADDR_VAR 0 15
13758: PUSH
13759: CALL_OW 44
13763: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13764: LD_ADDR_VAR 0 8
13768: PUSH
13769: LD_VAR 0 8
13773: PPUSH
13774: LD_INT 1
13776: PPUSH
13777: LD_VAR 0 15
13781: PPUSH
13782: CALL_OW 2
13786: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13787: LD_VAR 0 15
13791: PPUSH
13792: LD_VAR 0 10
13796: PPUSH
13797: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13801: LD_VAR 0 10
13805: PPUSH
13806: CALL_OW 313
13810: PUSH
13811: LD_INT 6
13813: EQUAL
13814: PUSH
13815: LD_VAR 0 10
13819: PPUSH
13820: CALL_OW 266
13824: PUSH
13825: LD_INT 32
13827: PUSH
13828: LD_INT 31
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: IN
13835: OR
13836: IFFALSE 13665
13838: GO 13662
13840: POP
13841: POP
// end else
13842: GO 14247
// for j = 1 to x do
13844: LD_ADDR_VAR 0 10
13848: PUSH
13849: DOUBLE
13850: LD_INT 1
13852: DEC
13853: ST_TO_ADDR
13854: LD_VAR 0 14
13858: PUSH
13859: FOR_TO
13860: IFFALSE 14245
// begin InitHc ;
13862: CALL_OW 19
// if not f then
13866: LD_VAR 0 13
13870: NOT
13871: IFFALSE 13960
// begin PrepareHuman ( false , i , skill ) ;
13873: LD_INT 0
13875: PPUSH
13876: LD_VAR 0 9
13880: PPUSH
13881: LD_VAR 0 4
13885: PPUSH
13886: CALL_OW 380
// un := CreateHuman ;
13890: LD_ADDR_VAR 0 15
13894: PUSH
13895: CALL_OW 44
13899: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13900: LD_ADDR_VAR 0 8
13904: PUSH
13905: LD_VAR 0 8
13909: PPUSH
13910: LD_INT 1
13912: PPUSH
13913: LD_VAR 0 15
13917: PPUSH
13918: CALL_OW 2
13922: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13923: LD_VAR 0 15
13927: PPUSH
13928: LD_VAR 0 1
13932: PPUSH
13933: CALL_OW 250
13937: PPUSH
13938: LD_VAR 0 1
13942: PPUSH
13943: CALL_OW 251
13947: PPUSH
13948: LD_INT 10
13950: PPUSH
13951: LD_INT 0
13953: PPUSH
13954: CALL_OW 50
// continue ;
13958: GO 13859
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 3 and GetBType ( f [ 1 ] ) = b_control_tower ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13960: LD_VAR 0 13
13964: PUSH
13965: LD_INT 1
13967: ARRAY
13968: PPUSH
13969: CALL_OW 313
13973: PUSH
13974: LD_VAR 0 13
13978: PUSH
13979: LD_INT 1
13981: ARRAY
13982: PPUSH
13983: CALL_OW 266
13987: PUSH
13988: LD_INT 32
13990: PUSH
13991: LD_INT 31
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: IN
13998: AND
13999: PUSH
14000: LD_VAR 0 13
14004: PUSH
14005: LD_INT 1
14007: ARRAY
14008: PPUSH
14009: CALL_OW 313
14013: PUSH
14014: LD_INT 3
14016: EQUAL
14017: PUSH
14018: LD_VAR 0 13
14022: PUSH
14023: LD_INT 1
14025: ARRAY
14026: PPUSH
14027: CALL_OW 266
14031: PUSH
14032: LD_INT 36
14034: EQUAL
14035: AND
14036: OR
14037: PUSH
14038: LD_VAR 0 13
14042: PUSH
14043: LD_INT 1
14045: ARRAY
14046: PPUSH
14047: CALL_OW 313
14051: PUSH
14052: LD_INT 6
14054: EQUAL
14055: OR
14056: IFFALSE 14076
// f := Delete ( f , 1 ) ;
14058: LD_ADDR_VAR 0 13
14062: PUSH
14063: LD_VAR 0 13
14067: PPUSH
14068: LD_INT 1
14070: PPUSH
14071: CALL_OW 3
14075: ST_TO_ADDR
// if not f then
14076: LD_VAR 0 13
14080: NOT
14081: IFFALSE 14099
// begin x := x + 2 ;
14083: LD_ADDR_VAR 0 14
14087: PUSH
14088: LD_VAR 0 14
14092: PUSH
14093: LD_INT 2
14095: PLUS
14096: ST_TO_ADDR
// continue ;
14097: GO 13859
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14099: LD_VAR 0 13
14103: PUSH
14104: LD_INT 1
14106: ARRAY
14107: PPUSH
14108: CALL_OW 266
14112: PUSH
14113: LD_INT 5
14115: EQUAL
14116: IFFALSE 14175
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14118: LD_VAR 0 13
14122: PUSH
14123: LD_INT 1
14125: ARRAY
14126: PPUSH
14127: CALL_OW 313
14131: PUSH
14132: LD_INT 3
14134: LESS
14135: IFFALSE 14156
// PrepareHuman ( false , i , skill ) else
14137: LD_INT 0
14139: PPUSH
14140: LD_VAR 0 9
14144: PPUSH
14145: LD_VAR 0 4
14149: PPUSH
14150: CALL_OW 380
14154: GO 14173
// PrepareHuman ( false , i , skill ) ;
14156: LD_INT 0
14158: PPUSH
14159: LD_VAR 0 9
14163: PPUSH
14164: LD_VAR 0 4
14168: PPUSH
14169: CALL_OW 380
// end else
14173: GO 14192
// PrepareHuman ( false , i , skill ) ;
14175: LD_INT 0
14177: PPUSH
14178: LD_VAR 0 9
14182: PPUSH
14183: LD_VAR 0 4
14187: PPUSH
14188: CALL_OW 380
// un := CreateHuman ;
14192: LD_ADDR_VAR 0 15
14196: PUSH
14197: CALL_OW 44
14201: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14202: LD_ADDR_VAR 0 8
14206: PUSH
14207: LD_VAR 0 8
14211: PPUSH
14212: LD_INT 1
14214: PPUSH
14215: LD_VAR 0 15
14219: PPUSH
14220: CALL_OW 2
14224: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14225: LD_VAR 0 15
14229: PPUSH
14230: LD_VAR 0 13
14234: PUSH
14235: LD_INT 1
14237: ARRAY
14238: PPUSH
14239: CALL_OW 52
// end ;
14243: GO 13859
14245: POP
14246: POP
// end ;
14247: GO 13147
14249: POP
14250: POP
// result := result ^ buildings ;
14251: LD_ADDR_VAR 0 8
14255: PUSH
14256: LD_VAR 0 8
14260: PUSH
14261: LD_VAR 0 18
14265: ADD
14266: ST_TO_ADDR
// end else
14267: GO 14410
// begin for i = 1 to personel do
14269: LD_ADDR_VAR 0 9
14273: PUSH
14274: DOUBLE
14275: LD_INT 1
14277: DEC
14278: ST_TO_ADDR
14279: LD_VAR 0 7
14283: PUSH
14284: FOR_TO
14285: IFFALSE 14408
// begin if i > 4 then
14287: LD_VAR 0 9
14291: PUSH
14292: LD_INT 4
14294: GREATER
14295: IFFALSE 14299
// break ;
14297: GO 14408
// x := personel [ i ] ;
14299: LD_ADDR_VAR 0 14
14303: PUSH
14304: LD_VAR 0 7
14308: PUSH
14309: LD_VAR 0 9
14313: ARRAY
14314: ST_TO_ADDR
// if x = - 1 then
14315: LD_VAR 0 14
14319: PUSH
14320: LD_INT 1
14322: NEG
14323: EQUAL
14324: IFFALSE 14328
// continue ;
14326: GO 14284
// PrepareHuman ( false , i , skill ) ;
14328: LD_INT 0
14330: PPUSH
14331: LD_VAR 0 9
14335: PPUSH
14336: LD_VAR 0 4
14340: PPUSH
14341: CALL_OW 380
// un := CreateHuman ;
14345: LD_ADDR_VAR 0 15
14349: PUSH
14350: CALL_OW 44
14354: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14355: LD_VAR 0 15
14359: PPUSH
14360: LD_VAR 0 1
14364: PPUSH
14365: CALL_OW 250
14369: PPUSH
14370: LD_VAR 0 1
14374: PPUSH
14375: CALL_OW 251
14379: PPUSH
14380: LD_INT 10
14382: PPUSH
14383: LD_INT 0
14385: PPUSH
14386: CALL_OW 50
// result := result ^ un ;
14390: LD_ADDR_VAR 0 8
14394: PUSH
14395: LD_VAR 0 8
14399: PUSH
14400: LD_VAR 0 15
14404: ADD
14405: ST_TO_ADDR
// end ;
14406: GO 14284
14408: POP
14409: POP
// end ; end ;
14410: LD_VAR 0 8
14414: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
14415: LD_INT 0
14417: PPUSH
14418: PPUSH
14419: PPUSH
14420: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
14421: LD_ADDR_VAR 0 6
14425: PUSH
14426: LD_INT 34
14428: PUSH
14429: LD_INT 71
14431: PUSH
14432: LD_INT 70
14434: PUSH
14435: LD_INT 69
14437: PUSH
14438: LD_INT 39
14440: PUSH
14441: LD_INT 31
14443: PUSH
14444: LD_INT 14
14446: PUSH
14447: LD_INT 10
14449: PUSH
14450: LD_INT 40
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: ST_TO_ADDR
// resultWeapons = [ ] ;
14464: LD_ADDR_VAR 0 5
14468: PUSH
14469: EMPTY
14470: ST_TO_ADDR
// for i := 1 to weaponTechs do
14471: LD_ADDR_VAR 0 4
14475: PUSH
14476: DOUBLE
14477: LD_INT 1
14479: DEC
14480: ST_TO_ADDR
14481: LD_VAR 0 6
14485: PUSH
14486: FOR_TO
14487: IFFALSE 14674
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
14489: LD_VAR 0 6
14493: PUSH
14494: LD_VAR 0 4
14498: ARRAY
14499: PPUSH
14500: LD_VAR 0 2
14504: PPUSH
14505: CALL_OW 482
14509: PUSH
14510: LD_VAR 0 6
14514: PUSH
14515: LD_VAR 0 4
14519: ARRAY
14520: PPUSH
14521: LD_VAR 0 1
14525: PPUSH
14526: CALL_OW 321
14530: PUSH
14531: LD_INT 2
14533: EQUAL
14534: AND
14535: IFFALSE 14672
// case nation of nation_american :
14537: LD_VAR 0 2
14541: PUSH
14542: LD_INT 1
14544: DOUBLE
14545: EQUAL
14546: IFTRUE 14550
14548: GO 14585
14550: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
14551: LD_ADDR_VAR 0 5
14555: PUSH
14556: LD_VAR 0 5
14560: PUSH
14561: LD_VAR 0 6
14565: PUSH
14566: LD_VAR 0 4
14570: ARRAY
14571: PPUSH
14572: LD_VAR 0 2
14576: PPUSH
14577: CALL 14691 0 2
14581: ADD
14582: ST_TO_ADDR
14583: GO 14672
14585: LD_INT 2
14587: DOUBLE
14588: EQUAL
14589: IFTRUE 14593
14591: GO 14628
14593: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
14594: LD_ADDR_VAR 0 5
14598: PUSH
14599: LD_VAR 0 5
14603: PUSH
14604: LD_VAR 0 6
14608: PUSH
14609: LD_VAR 0 4
14613: ARRAY
14614: PPUSH
14615: LD_VAR 0 2
14619: PPUSH
14620: CALL 14691 0 2
14624: ADD
14625: ST_TO_ADDR
14626: GO 14672
14628: LD_INT 3
14630: DOUBLE
14631: EQUAL
14632: IFTRUE 14636
14634: GO 14671
14636: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
14637: LD_ADDR_VAR 0 5
14641: PUSH
14642: LD_VAR 0 5
14646: PUSH
14647: LD_VAR 0 6
14651: PUSH
14652: LD_VAR 0 4
14656: ARRAY
14657: PPUSH
14658: LD_VAR 0 2
14662: PPUSH
14663: CALL 14691 0 2
14667: ADD
14668: ST_TO_ADDR
14669: GO 14672
14671: POP
// end ;
14672: GO 14486
14674: POP
14675: POP
// result = resultWeapons ;
14676: LD_ADDR_VAR 0 3
14680: PUSH
14681: LD_VAR 0 5
14685: ST_TO_ADDR
// end ;
14686: LD_VAR 0 3
14690: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
14691: LD_INT 0
14693: PPUSH
// case tech of tech_AdvMet :
14694: LD_VAR 0 1
14698: PUSH
14699: LD_INT 34
14701: DOUBLE
14702: EQUAL
14703: IFTRUE 14707
14705: GO 14735
14707: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
14708: LD_ADDR_VAR 0 3
14712: PUSH
14713: LD_INT 6
14715: PUSH
14716: LD_STRING 
14718: PUSH
14719: LD_INT 46
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: LIST
14726: PUSH
14727: LD_VAR 0 2
14731: ARRAY
14732: ST_TO_ADDR
14733: GO 15024
14735: LD_INT 71
14737: DOUBLE
14738: EQUAL
14739: IFTRUE 14743
14741: GO 14771
14743: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
14744: LD_ADDR_VAR 0 3
14748: PUSH
14749: LD_STRING 
14751: PUSH
14752: LD_STRING 
14754: PUSH
14755: LD_INT 47
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: LIST
14762: PUSH
14763: LD_VAR 0 2
14767: ARRAY
14768: ST_TO_ADDR
14769: GO 15024
14771: LD_INT 70
14773: DOUBLE
14774: EQUAL
14775: IFTRUE 14779
14777: GO 14807
14779: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
14780: LD_ADDR_VAR 0 3
14784: PUSH
14785: LD_STRING 
14787: PUSH
14788: LD_INT 26
14790: PUSH
14791: LD_STRING 
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: LIST
14798: PUSH
14799: LD_VAR 0 2
14803: ARRAY
14804: ST_TO_ADDR
14805: GO 15024
14807: LD_INT 69
14809: DOUBLE
14810: EQUAL
14811: IFTRUE 14815
14813: GO 14843
14815: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
14816: LD_ADDR_VAR 0 3
14820: PUSH
14821: LD_INT 4
14823: PUSH
14824: LD_INT 25
14826: PUSH
14827: LD_INT 43
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: LIST
14834: PUSH
14835: LD_VAR 0 2
14839: ARRAY
14840: ST_TO_ADDR
14841: GO 15024
14843: LD_INT 39
14845: DOUBLE
14846: EQUAL
14847: IFTRUE 14851
14849: GO 14879
14851: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
14852: LD_ADDR_VAR 0 3
14856: PUSH
14857: LD_INT 5
14859: PUSH
14860: LD_INT 27
14862: PUSH
14863: LD_INT 44
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: LIST
14870: PUSH
14871: LD_VAR 0 2
14875: ARRAY
14876: ST_TO_ADDR
14877: GO 15024
14879: LD_INT 31
14881: DOUBLE
14882: EQUAL
14883: IFTRUE 14887
14885: GO 14915
14887: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
14888: LD_ADDR_VAR 0 3
14892: PUSH
14893: LD_STRING 
14895: PUSH
14896: LD_STRING 
14898: PUSH
14899: LD_INT 49
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: LIST
14906: PUSH
14907: LD_VAR 0 2
14911: ARRAY
14912: ST_TO_ADDR
14913: GO 15024
14915: LD_INT 14
14917: DOUBLE
14918: EQUAL
14919: IFTRUE 14923
14921: GO 14951
14923: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
14924: LD_ADDR_VAR 0 3
14928: PUSH
14929: LD_INT 10
14931: PUSH
14932: LD_STRING 
14934: PUSH
14935: LD_STRING 
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: LIST
14942: PUSH
14943: LD_VAR 0 2
14947: ARRAY
14948: ST_TO_ADDR
14949: GO 15024
14951: LD_INT 10
14953: DOUBLE
14954: EQUAL
14955: IFTRUE 14959
14957: GO 14987
14959: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
14960: LD_ADDR_VAR 0 3
14964: PUSH
14965: LD_INT 9
14967: PUSH
14968: LD_STRING 
14970: PUSH
14971: LD_STRING 
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: LIST
14978: PUSH
14979: LD_VAR 0 2
14983: ARRAY
14984: ST_TO_ADDR
14985: GO 15024
14987: LD_INT 40
14989: DOUBLE
14990: EQUAL
14991: IFTRUE 14995
14993: GO 15023
14995: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
14996: LD_ADDR_VAR 0 3
15000: PUSH
15001: LD_INT 7
15003: PUSH
15004: LD_INT 28
15006: PUSH
15007: LD_INT 45
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: LIST
15014: PUSH
15015: LD_VAR 0 2
15019: ARRAY
15020: ST_TO_ADDR
15021: GO 15024
15023: POP
// end ;
15024: LD_VAR 0 3
15028: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
15029: LD_INT 0
15031: PPUSH
15032: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
15033: LD_ADDR_VAR 0 2
15037: PUSH
15038: LD_VAR 0 1
15042: PPUSH
15043: LD_INT 1
15045: PPUSH
15046: CALL_OW 289
15050: PUSH
15051: LD_VAR 0 1
15055: PPUSH
15056: LD_INT 2
15058: PPUSH
15059: CALL_OW 289
15063: PUSH
15064: LD_VAR 0 1
15068: PPUSH
15069: LD_INT 3
15071: PPUSH
15072: CALL_OW 289
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: LIST
15081: ST_TO_ADDR
// end ;
15082: LD_VAR 0 2
15086: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
15087: LD_INT 0
15089: PPUSH
15090: PPUSH
// area = ListEnvironmentArea ( area ) ;
15091: LD_ADDR_VAR 0 2
15095: PUSH
15096: LD_VAR 0 2
15100: PPUSH
15101: CALL_OW 353
15105: ST_TO_ADDR
// if bulldozer > 0 then
15106: LD_VAR 0 1
15110: PUSH
15111: LD_INT 0
15113: GREATER
15114: IFFALSE 15225
// for i = area downto 1 do
15116: LD_ADDR_VAR 0 4
15120: PUSH
15121: DOUBLE
15122: LD_VAR 0 2
15126: INC
15127: ST_TO_ADDR
15128: LD_INT 1
15130: PUSH
15131: FOR_DOWNTO
15132: IFFALSE 15223
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
15134: LD_VAR 0 2
15138: PUSH
15139: LD_VAR 0 4
15143: ARRAY
15144: PUSH
15145: LD_INT 1
15147: ARRAY
15148: PPUSH
15149: LD_VAR 0 2
15153: PUSH
15154: LD_VAR 0 4
15158: ARRAY
15159: PUSH
15160: LD_INT 2
15162: ARRAY
15163: PPUSH
15164: CALL_OW 351
15168: IFFALSE 15221
// if not HasTask ( bulldozer ) then
15170: LD_VAR 0 1
15174: PPUSH
15175: CALL_OW 314
15179: NOT
15180: IFFALSE 15221
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
15182: LD_VAR 0 1
15186: PPUSH
15187: LD_VAR 0 2
15191: PUSH
15192: LD_VAR 0 4
15196: ARRAY
15197: PUSH
15198: LD_INT 1
15200: ARRAY
15201: PPUSH
15202: LD_VAR 0 2
15206: PUSH
15207: LD_VAR 0 4
15211: ARRAY
15212: PUSH
15213: LD_INT 2
15215: ARRAY
15216: PPUSH
15217: CALL_OW 171
15221: GO 15131
15223: POP
15224: POP
// end ;
15225: LD_VAR 0 3
15229: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
15230: LD_INT 0
15232: PPUSH
15233: PPUSH
15234: PPUSH
// uc_side := GetSide ( b ) ;
15235: LD_ADDR_OWVAR 20
15239: PUSH
15240: LD_VAR 0 2
15244: PPUSH
15245: CALL_OW 255
15249: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
15250: LD_ADDR_OWVAR 21
15254: PUSH
15255: LD_VAR 0 2
15259: PPUSH
15260: CALL_OW 248
15264: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
15265: LD_INT 0
15267: PPUSH
15268: LD_INT 1
15270: PPUSH
15271: LD_VAR 0 1
15275: PPUSH
15276: CALL_OW 380
// un = CreateHuman ;
15280: LD_ADDR_VAR 0 4
15284: PUSH
15285: CALL_OW 44
15289: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
15290: LD_ADDR_VAR 0 5
15294: PUSH
15295: LD_VAR 0 2
15299: PPUSH
15300: CALL_OW 254
15304: PUSH
15305: LD_INT 3
15307: MINUS
15308: ST_TO_ADDR
// if dir < 0 then
15309: LD_VAR 0 5
15313: PUSH
15314: LD_INT 0
15316: LESS
15317: IFFALSE 15333
// dir := 6 + dir ;
15319: LD_ADDR_VAR 0 5
15323: PUSH
15324: LD_INT 6
15326: PUSH
15327: LD_VAR 0 5
15331: PLUS
15332: ST_TO_ADDR
// SetDir ( un , dir ) ;
15333: LD_VAR 0 4
15337: PPUSH
15338: LD_VAR 0 5
15342: PPUSH
15343: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
15347: LD_VAR 0 4
15351: PPUSH
15352: LD_VAR 0 2
15356: PPUSH
15357: CALL_OW 52
// result = un ;
15361: LD_ADDR_VAR 0 3
15365: PUSH
15366: LD_VAR 0 4
15370: ST_TO_ADDR
// end ;
15371: LD_VAR 0 3
15375: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others , max , test1 , test2 ; begin
15376: LD_INT 0
15378: PPUSH
15379: PPUSH
15380: PPUSH
15381: PPUSH
15382: PPUSH
15383: PPUSH
15384: PPUSH
15385: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Burlak , Vsevolod ] ;
15386: LD_ADDR_VAR 0 3
15390: PUSH
15391: LD_INT 22
15393: PUSH
15394: LD_INT 3
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 21
15403: PUSH
15404: LD_INT 1
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 23
15413: PUSH
15414: LD_INT 3
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: LIST
15425: PPUSH
15426: CALL_OW 69
15430: PUSH
15431: LD_EXP 39
15435: PUSH
15436: LD_EXP 51
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: DIFF
15445: ST_TO_ADDR
// charsToChoose = charsToChoose diff vsevolodTeam ;
15446: LD_ADDR_VAR 0 3
15450: PUSH
15451: LD_VAR 0 3
15455: PUSH
15456: LD_EXP 52
15460: DIFF
15461: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam diff Vsevolod ;
15462: LD_ADDR_EXP 52
15466: PUSH
15467: LD_EXP 52
15471: PUSH
15472: LD_EXP 51
15476: DIFF
15477: ST_TO_ADDR
// max = charsToChoose div 2 + charsToChoose mod 2 ;
15478: LD_ADDR_VAR 0 6
15482: PUSH
15483: LD_VAR 0 3
15487: PUSH
15488: LD_INT 2
15490: DIV
15491: PUSH
15492: LD_VAR 0 3
15496: PUSH
15497: LD_INT 2
15499: MOD
15500: PLUS
15501: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 0 , 3 , [ Burlak , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_not_hired ] ^ vsevolodTeam ^ [ sel_not_changeable , Vsevolod ] , [ class_soldier , class_mechanic , class_engineer , class_scientistic ] ) ;
15502: LD_ADDR_VAR 0 4
15506: PUSH
15507: LD_STRING text
15509: PPUSH
15510: LD_INT 0
15512: PPUSH
15513: LD_INT 3
15515: PPUSH
15516: LD_EXP 39
15520: PUSH
15521: LD_INT -3
15523: PUSH
15524: LD_INT -5
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: PUSH
15532: LD_VAR 0 3
15536: ADD
15537: PUSH
15538: LD_INT -2
15540: PUSH
15541: EMPTY
15542: LIST
15543: ADD
15544: PUSH
15545: LD_EXP 52
15549: ADD
15550: PUSH
15551: LD_INT -4
15553: PUSH
15554: LD_EXP 51
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: ADD
15563: PPUSH
15564: LD_INT 1
15566: PUSH
15567: LD_INT 3
15569: PUSH
15570: LD_INT 2
15572: PUSH
15573: LD_INT 4
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: PPUSH
15582: CALL_OW 42
15586: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) , 6 ) ;
15587: LD_INT 22
15589: PUSH
15590: LD_INT 3
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 21
15599: PUSH
15600: LD_INT 1
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: LD_INT 23
15609: PUSH
15610: LD_INT 3
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: LIST
15621: PPUSH
15622: CALL_OW 69
15626: PPUSH
15627: LD_INT 6
15629: PPUSH
15630: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
15634: LD_VAR 0 4
15638: PPUSH
15639: LD_INT 3
15641: PPUSH
15642: CALL_OW 235
// SetSide ( Burlak , 3 ) ;
15646: LD_EXP 39
15650: PPUSH
15651: LD_INT 3
15653: PPUSH
15654: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
15658: LD_ADDR_VAR 0 2
15662: PUSH
15663: LD_INT 22
15665: PUSH
15666: LD_INT 6
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: LD_INT 21
15675: PUSH
15676: LD_INT 1
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PPUSH
15687: CALL_OW 69
15691: PUSH
15692: FOR_IN
15693: IFFALSE 15726
// if IsInUnit ( i ) then
15695: LD_VAR 0 2
15699: PPUSH
15700: CALL_OW 310
15704: IFFALSE 15724
// begin ComExitVehicle ( i ) ;
15706: LD_VAR 0 2
15710: PPUSH
15711: CALL_OW 121
// ComExitBuilding ( i ) ;
15715: LD_VAR 0 2
15719: PPUSH
15720: CALL_OW 122
// end ;
15724: GO 15692
15726: POP
15727: POP
// if not Vsevolod in selectedPeople then
15728: LD_EXP 51
15732: PUSH
15733: LD_VAR 0 4
15737: IN
15738: NOT
15739: IFFALSE 15756
// ExtSaveCharacter ( Vsevolod , Vsevolod , 6 ) ;
15741: LD_EXP 51
15745: PPUSH
15746: LD_STRING Vsevolod
15748: PPUSH
15749: LD_INT 6
15751: PPUSH
15752: CALL 11903 0 3
// if not Karamazov in selectedPeople then
15756: LD_EXP 40
15760: PUSH
15761: LD_VAR 0 4
15765: IN
15766: NOT
15767: IFFALSE 15784
// ExtSaveCharacter ( Karamazov , VSKaramazov , 6 ) ;
15769: LD_EXP 40
15773: PPUSH
15774: LD_STRING VSKaramazov
15776: PPUSH
15777: LD_INT 6
15779: PPUSH
15780: CALL 11903 0 3
// if not Petrovova in selectedPeople then
15784: LD_EXP 41
15788: PUSH
15789: LD_VAR 0 4
15793: IN
15794: NOT
15795: IFFALSE 15812
// ExtSaveCharacter ( Petrovova , VSPetrovova , 6 ) ;
15797: LD_EXP 41
15801: PPUSH
15802: LD_STRING VSPetrovova
15804: PPUSH
15805: LD_INT 6
15807: PPUSH
15808: CALL 11903 0 3
// if not Gleb in selectedPeople then
15812: LD_EXP 42
15816: PUSH
15817: LD_VAR 0 4
15821: IN
15822: NOT
15823: IFFALSE 15840
// ExtSaveCharacter ( Gleb , VSGleb , 6 ) ;
15825: LD_EXP 42
15829: PPUSH
15830: LD_STRING VSGleb
15832: PPUSH
15833: LD_INT 6
15835: PPUSH
15836: CALL 11903 0 3
// if not Petrosyan in selectedPeople then
15840: LD_EXP 43
15844: PUSH
15845: LD_VAR 0 4
15849: IN
15850: NOT
15851: IFFALSE 15868
// ExtSaveCharacter ( Petrosyan , VSPetrosyan , 6 ) ;
15853: LD_EXP 43
15857: PPUSH
15858: LD_STRING VSPetrosyan
15860: PPUSH
15861: LD_INT 6
15863: PPUSH
15864: CALL 11903 0 3
// if not Titov in selectedPeople then
15868: LD_EXP 44
15872: PUSH
15873: LD_VAR 0 4
15877: IN
15878: NOT
15879: IFFALSE 15896
// ExtSaveCharacter ( Titov , VSTitov , 6 ) ;
15881: LD_EXP 44
15885: PPUSH
15886: LD_STRING VSTitov
15888: PPUSH
15889: LD_INT 6
15891: PPUSH
15892: CALL 11903 0 3
// if not Dolgov in selectedPeople then
15896: LD_EXP 45
15900: PUSH
15901: LD_VAR 0 4
15905: IN
15906: NOT
15907: IFFALSE 15924
// ExtSaveCharacter ( Dolgov , VSDolgov , 6 ) ;
15909: LD_EXP 45
15913: PPUSH
15914: LD_STRING VSDolgov
15916: PPUSH
15917: LD_INT 6
15919: PPUSH
15920: CALL 11903 0 3
// if not Lipshchin in selectedPeople then
15924: LD_EXP 46
15928: PUSH
15929: LD_VAR 0 4
15933: IN
15934: NOT
15935: IFFALSE 15952
// ExtSaveCharacter ( Lipshchin , VSLipshchin , 6 ) ;
15937: LD_EXP 46
15941: PPUSH
15942: LD_STRING VSLipshchin
15944: PPUSH
15945: LD_INT 6
15947: PPUSH
15948: CALL 11903 0 3
// others = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod ] ;
15952: LD_ADDR_VAR 0 5
15956: PUSH
15957: LD_INT 22
15959: PUSH
15960: LD_INT 6
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: LD_INT 21
15969: PUSH
15970: LD_INT 1
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: LD_INT 23
15979: PUSH
15980: LD_INT 3
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: LIST
15991: PPUSH
15992: CALL_OW 69
15996: PUSH
15997: LD_EXP 40
16001: PUSH
16002: LD_EXP 41
16006: PUSH
16007: LD_EXP 42
16011: PUSH
16012: LD_EXP 43
16016: PUSH
16017: LD_EXP 44
16021: PUSH
16022: LD_EXP 45
16026: PUSH
16027: LD_EXP 46
16031: PUSH
16032: LD_EXP 51
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: DIFF
16047: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_vsevolod , 6 ) ;
16048: LD_VAR 0 5
16052: PPUSH
16053: LD_STRING other_survivors_with_vsevolod
16055: PPUSH
16056: LD_INT 6
16058: PPUSH
16059: CALL 11959 0 3
// end ; end_of_file
16063: LD_VAR 0 1
16067: RET
// export function MissionIntro ; var i , ruEng , unit ; begin
16068: LD_INT 0
16070: PPUSH
16071: PPUSH
16072: PPUSH
16073: PPUSH
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) ;
16074: LD_EXP 39
16078: PPUSH
16079: CALL_OW 310
16083: PPUSH
16084: CALL_OW 87
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
16088: LD_ADDR_VAR 0 4
16092: PUSH
16093: LD_INT 22
16095: PUSH
16096: LD_INT 3
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: LD_INT 21
16105: PUSH
16106: LD_INT 2
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PPUSH
16117: CALL_OW 69
16121: PUSH
16122: FOR_IN
16123: IFFALSE 16187
// begin if ( i mod 2 ) = 0 then
16125: LD_VAR 0 2
16129: PUSH
16130: LD_INT 2
16132: MOD
16133: PUSH
16134: LD_INT 0
16136: EQUAL
16137: IFFALSE 16156
// ComMoveXY ( unit , 156 , 205 ) else
16139: LD_VAR 0 4
16143: PPUSH
16144: LD_INT 156
16146: PPUSH
16147: LD_INT 205
16149: PPUSH
16150: CALL_OW 111
16154: GO 16171
// ComMoveXY ( unit , 160 , 215 ) ;
16156: LD_VAR 0 4
16160: PPUSH
16161: LD_INT 160
16163: PPUSH
16164: LD_INT 215
16166: PPUSH
16167: CALL_OW 111
// i = i + 1 ;
16171: LD_ADDR_VAR 0 2
16175: PUSH
16176: LD_VAR 0 2
16180: PUSH
16181: LD_INT 1
16183: PLUS
16184: ST_TO_ADDR
// end ;
16185: GO 16122
16187: POP
16188: POP
// if IsOK ( Karamazov ) then
16189: LD_EXP 40
16193: PPUSH
16194: CALL_OW 302
16198: IFFALSE 16212
// ruEng = Karamazov else
16200: LD_ADDR_VAR 0 3
16204: PUSH
16205: LD_EXP 40
16209: ST_TO_ADDR
16210: GO 16295
// if IsOK ( Lipshchin ) then
16212: LD_EXP 46
16216: PPUSH
16217: CALL_OW 302
16221: IFFALSE 16235
// ruEng = Lipshchin else
16223: LD_ADDR_VAR 0 3
16227: PUSH
16228: LD_EXP 46
16232: ST_TO_ADDR
16233: GO 16295
// ruEng = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_class , class_engineer ] ] ) [ 1 ] ;
16235: LD_ADDR_VAR 0 3
16239: PUSH
16240: LD_INT 22
16242: PUSH
16243: LD_INT 3
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 21
16252: PUSH
16253: LD_INT 1
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 23
16262: PUSH
16263: LD_INT 3
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 25
16272: PUSH
16273: LD_INT 2
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: PPUSH
16286: CALL_OW 69
16290: PUSH
16291: LD_INT 1
16293: ARRAY
16294: ST_TO_ADDR
// wait ( 0 0$3 ) ;
16295: LD_INT 105
16297: PPUSH
16298: CALL_OW 67
// CenterOnXY ( 160 , 213 ) ;
16302: LD_INT 160
16304: PPUSH
16305: LD_INT 213
16307: PPUSH
16308: CALL_OW 84
// wait ( 0 0$3 ) ;
16312: LD_INT 105
16314: PPUSH
16315: CALL_OW 67
// CenterOnXY ( 149 , 211 ) ;
16319: LD_INT 149
16321: PPUSH
16322: LD_INT 211
16324: PPUSH
16325: CALL_OW 84
// repeat ComMoveXY ( IsInUnit ( ruEng ) , 149 , 212 ) ;
16329: LD_VAR 0 3
16333: PPUSH
16334: CALL_OW 310
16338: PPUSH
16339: LD_INT 149
16341: PPUSH
16342: LD_INT 212
16344: PPUSH
16345: CALL_OW 111
// wait ( 0 0$1 ) ;
16349: LD_INT 35
16351: PPUSH
16352: CALL_OW 67
// until GetDistUnitXY ( IsInUnit ( ruEng ) , 149 , 212 ) <= 2 ;
16356: LD_VAR 0 3
16360: PPUSH
16361: CALL_OW 310
16365: PPUSH
16366: LD_INT 149
16368: PPUSH
16369: LD_INT 212
16371: PPUSH
16372: CALL_OW 297
16376: PUSH
16377: LD_INT 2
16379: LESSEQUAL
16380: IFFALSE 16329
// ComExitVehicle ( ruEng ) ;
16382: LD_VAR 0 3
16386: PPUSH
16387: CALL_OW 121
// wait ( 0 0$1 ) ;
16391: LD_INT 35
16393: PPUSH
16394: CALL_OW 67
// AddComCaptureBuilding ( ruEng , rudepot ) ;
16398: LD_VAR 0 3
16402: PPUSH
16403: LD_INT 74
16405: PPUSH
16406: CALL 12475 0 2
// repeat wait ( 0 0$1 ) ;
16410: LD_INT 35
16412: PPUSH
16413: CALL_OW 67
// until GetSide ( rudepot ) = 3 ;
16417: LD_INT 74
16419: PPUSH
16420: CALL_OW 255
16424: PUSH
16425: LD_INT 3
16427: EQUAL
16428: IFFALSE 16410
// ComEnterUnit ( ruEng , rudepot ) ;
16430: LD_VAR 0 3
16434: PPUSH
16435: LD_INT 74
16437: PPUSH
16438: CALL_OW 120
// wait ( 0 0$2 ) ;
16442: LD_INT 70
16444: PPUSH
16445: CALL_OW 67
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
16449: LD_INT 22
16451: PUSH
16452: LD_INT 6
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PPUSH
16459: CALL_OW 69
16463: PPUSH
16464: LD_INT 3
16466: PPUSH
16467: CALL_OW 235
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
16471: LD_ADDR_VAR 0 4
16475: PUSH
16476: LD_INT 22
16478: PUSH
16479: LD_INT 3
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 21
16488: PUSH
16489: LD_INT 1
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PPUSH
16500: CALL_OW 69
16504: PUSH
16505: FOR_IN
16506: IFFALSE 16539
// if GetType ( IsInUnit ( unit ) ) = unit_vehicle then
16508: LD_VAR 0 4
16512: PPUSH
16513: CALL_OW 310
16517: PPUSH
16518: CALL_OW 247
16522: PUSH
16523: LD_INT 2
16525: EQUAL
16526: IFFALSE 16537
// ComExitVehicle ( unit ) ;
16528: LD_VAR 0 4
16532: PPUSH
16533: CALL_OW 121
16537: GO 16505
16539: POP
16540: POP
// if ruEng = Karamazov then
16541: LD_VAR 0 3
16545: PUSH
16546: LD_EXP 40
16550: EQUAL
16551: IFFALSE 16567
// Say ( Karamazov , DStart-Kar-1 ) else
16553: LD_EXP 40
16557: PPUSH
16558: LD_STRING DStart-Kar-1
16560: PPUSH
16561: CALL_OW 88
16565: GO 16591
// if ruEng = Lipshchin then
16567: LD_VAR 0 3
16571: PUSH
16572: LD_EXP 46
16576: EQUAL
16577: IFFALSE 16591
// Say ( Lipshchin , DStart-Lip-1 ) ;
16579: LD_EXP 46
16583: PPUSH
16584: LD_STRING DStart-Lip-1
16586: PPUSH
16587: CALL_OW 88
// ComExitBuilding ( ruEng ) ;
16591: LD_VAR 0 3
16595: PPUSH
16596: CALL_OW 122
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 250 ] ] ] ) do
16600: LD_ADDR_VAR 0 4
16604: PUSH
16605: LD_INT 22
16607: PUSH
16608: LD_INT 3
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: LD_INT 21
16617: PUSH
16618: LD_INT 3
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 3
16627: PUSH
16628: LD_INT 24
16630: PUSH
16631: LD_INT 250
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: LIST
16646: PPUSH
16647: CALL_OW 69
16651: PUSH
16652: FOR_IN
16653: IFFALSE 16706
// AddComRepairBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , unit ) ;
16655: LD_INT 22
16657: PUSH
16658: LD_INT 3
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PUSH
16665: LD_INT 21
16667: PUSH
16668: LD_INT 1
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: PUSH
16675: LD_INT 25
16677: PUSH
16678: LD_INT 2
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: LIST
16689: PPUSH
16690: CALL_OW 69
16694: PPUSH
16695: LD_VAR 0 4
16699: PPUSH
16700: CALL_OW 190
16704: GO 16652
16706: POP
16707: POP
// Say ( Burlak , DStart-Bur-1 ) ;
16708: LD_EXP 39
16712: PPUSH
16713: LD_STRING DStart-Bur-1
16715: PPUSH
16716: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-1 ) ;
16720: LD_EXP 47
16724: PPUSH
16725: LD_STRING DStart-Pla-1
16727: PPUSH
16728: CALL_OW 94
// Say ( Burlak , DStart-Bur-2 ) ;
16732: LD_EXP 39
16736: PPUSH
16737: LD_STRING DStart-Bur-2
16739: PPUSH
16740: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-2 ) ;
16744: LD_EXP 47
16748: PPUSH
16749: LD_STRING DStart-Pla-2
16751: PPUSH
16752: CALL_OW 94
// if IsOK ( Petrovova ) then
16756: LD_EXP 41
16760: PPUSH
16761: CALL_OW 302
16765: IFFALSE 16779
// Say ( Petrovova , DStart-Ptr-2 ) ;
16767: LD_EXP 41
16771: PPUSH
16772: LD_STRING DStart-Ptr-2
16774: PPUSH
16775: CALL_OW 88
// InGameOff ;
16779: CALL_OW 9
// ChangeMissionObjectives ( MStart ) ;
16783: LD_STRING MStart
16785: PPUSH
16786: CALL_OW 337
// SaveForQuickRestart ;
16790: CALL_OW 22
// wait ( 0 0$10 ) ;
16794: LD_INT 350
16796: PPUSH
16797: CALL_OW 67
// if IsOK ( Petrosyan ) then
16801: LD_EXP 43
16805: PPUSH
16806: CALL_OW 302
16810: IFFALSE 16826
// Say ( Petrosyan , DMatPrediction-Pty-1 ) else
16812: LD_EXP 43
16816: PPUSH
16817: LD_STRING DMatPrediction-Pty-1
16819: PPUSH
16820: CALL_OW 88
16824: GO 16849
// if IsOK ( Dolgov ) then
16826: LD_EXP 45
16830: PPUSH
16831: CALL_OW 302
16835: IFFALSE 16849
// Say ( Dolgov , DMatPrediction-Dol-1 ) ;
16837: LD_EXP 45
16841: PPUSH
16842: LD_STRING DMatPrediction-Dol-1
16844: PPUSH
16845: CALL_OW 88
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16849: LD_EXP 43
16853: PPUSH
16854: CALL_OW 302
16858: PUSH
16859: LD_EXP 45
16863: PPUSH
16864: CALL_OW 302
16868: OR
16869: IFFALSE 16883
// Say ( Burlak , DMatPrediction-Bur-1 ) ;
16871: LD_EXP 39
16875: PPUSH
16876: LD_STRING DMatPrediction-Bur-1
16878: PPUSH
16879: CALL_OW 88
// if IsOK ( Petrosyan ) then
16883: LD_EXP 43
16887: PPUSH
16888: CALL_OW 302
16892: IFFALSE 16908
// Say ( Petrosyan , DMatPrediction-Pty-2 ) else
16894: LD_EXP 43
16898: PPUSH
16899: LD_STRING DMatPrediction-Pty-2
16901: PPUSH
16902: CALL_OW 88
16906: GO 16931
// if IsOK ( Dolgov ) then
16908: LD_EXP 45
16912: PPUSH
16913: CALL_OW 302
16917: IFFALSE 16931
// Say ( Dolgov , DMatPrediction-Dol-2 ) ;
16919: LD_EXP 45
16923: PPUSH
16924: LD_STRING DMatPrediction-Dol-2
16926: PPUSH
16927: CALL_OW 88
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16931: LD_EXP 43
16935: PPUSH
16936: CALL_OW 302
16940: PUSH
16941: LD_EXP 45
16945: PPUSH
16946: CALL_OW 302
16950: OR
16951: IFFALSE 16965
// Say ( Burlak , DMatPrediction-Bur-2 ) ;
16953: LD_EXP 39
16957: PPUSH
16958: LD_STRING DMatPrediction-Bur-2
16960: PPUSH
16961: CALL_OW 88
// if IsOK ( Petrosyan ) then
16965: LD_EXP 43
16969: PPUSH
16970: CALL_OW 302
16974: IFFALSE 16990
// Say ( Petrosyan , DMatPrediction-Pty-3 ) else
16976: LD_EXP 43
16980: PPUSH
16981: LD_STRING DMatPrediction-Pty-3
16983: PPUSH
16984: CALL_OW 88
16988: GO 17013
// if IsOK ( Dolgov ) then
16990: LD_EXP 45
16994: PPUSH
16995: CALL_OW 302
16999: IFFALSE 17013
// Say ( Dolgov , DMatPrediction-Dol-3 ) ;
17001: LD_EXP 45
17005: PPUSH
17006: LD_STRING DMatPrediction-Dol-3
17008: PPUSH
17009: CALL_OW 88
// ChangeMissionObjectives ( MPred ) ;
17013: LD_STRING MPred
17015: PPUSH
17016: CALL_OW 337
// end ;
17020: LD_VAR 0 1
17024: RET
// every 0 0$1 trigger not UnitFilter ( ovsyenkoBase , [ f_type , unit_human ] ) do
17025: LD_EXP 59
17029: PPUSH
17030: LD_INT 21
17032: PUSH
17033: LD_INT 1
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PPUSH
17040: CALL_OW 72
17044: NOT
17045: IFFALSE 17267
17047: GO 17049
17049: DISABLE
// begin DialogueOn ;
17050: CALL_OW 6
// Say ( Burlak , DOvsyenkoTaken-Bur-1 ) ;
17054: LD_EXP 39
17058: PPUSH
17059: LD_STRING DOvsyenkoTaken-Bur-1
17061: PPUSH
17062: CALL_OW 88
// SayRadio ( Platonov , DOvsyenkoTaken-Pla-1 ) ;
17066: LD_EXP 47
17070: PPUSH
17071: LD_STRING DOvsyenkoTaken-Pla-1
17073: PPUSH
17074: CALL_OW 94
// if IsOK ( Karamazov ) then
17078: LD_EXP 40
17082: PPUSH
17083: CALL_OW 302
17087: IFFALSE 17101
// Say ( Karamazov , DOvsyenkoTaken-Kar-1 ) ;
17089: LD_EXP 40
17093: PPUSH
17094: LD_STRING DOvsyenkoTaken-Kar-1
17096: PPUSH
17097: CALL_OW 88
// if IsOK ( Titov ) then
17101: LD_EXP 44
17105: PPUSH
17106: CALL_OW 302
17110: IFFALSE 17124
// Say ( Titov , DOvsyenkoTaken-Tit-1 ) ;
17112: LD_EXP 44
17116: PPUSH
17117: LD_STRING DOvsyenkoTaken-Tit-1
17119: PPUSH
17120: CALL_OW 88
// if IsOK ( Lipshchin ) and ( IsOK ( Karamazov ) or IsOK ( Titov ) ) then
17124: LD_EXP 46
17128: PPUSH
17129: CALL_OW 302
17133: PUSH
17134: LD_EXP 40
17138: PPUSH
17139: CALL_OW 302
17143: PUSH
17144: LD_EXP 44
17148: PPUSH
17149: CALL_OW 302
17153: OR
17154: AND
17155: IFFALSE 17192
// begin Say ( Lipshchin , DOvsyenkoTaken-Lip-1 ) ;
17157: LD_EXP 46
17161: PPUSH
17162: LD_STRING DOvsyenkoTaken-Lip-1
17164: PPUSH
17165: CALL_OW 88
// if IsOK ( Gleb ) then
17169: LD_EXP 42
17173: PPUSH
17174: CALL_OW 302
17178: IFFALSE 17192
// Say ( Gleb , DOvsyenkoTaken-Glb-1 ) ;
17180: LD_EXP 42
17184: PPUSH
17185: LD_STRING DOvsyenkoTaken-Glb-1
17187: PPUSH
17188: CALL_OW 88
// end ; DialogueOff ;
17192: CALL_OW 7
// ChangeMissionObjectives ( MOutCapture ) ;
17196: LD_STRING MOutCapture
17198: PPUSH
17199: CALL_OW 337
// ChangeMissionObjectives ( MAddMine ) ;
17203: LD_STRING MAddMine
17205: PPUSH
17206: CALL_OW 337
// claimOvsyenkoBase = true ;
17210: LD_ADDR_EXP 15
17214: PUSH
17215: LD_INT 1
17217: ST_TO_ADDR
// wait ( 1 1$10 ) ;
17218: LD_INT 2450
17220: PPUSH
17221: CALL_OW 67
// InitAIManager ( 1 , 1 , headAmBase , HeadAmericanBaseArea , HeadAmericanHealArea , false , HeadAmericanBaseArea , 6 , 2 , 4 , true , true ) ;
17225: LD_INT 1
17227: PPUSH
17228: LD_INT 1
17230: PPUSH
17231: LD_EXP 61
17235: PPUSH
17236: LD_INT 5
17238: PPUSH
17239: LD_INT 9
17241: PPUSH
17242: LD_INT 0
17244: PPUSH
17245: LD_INT 5
17247: PPUSH
17248: LD_INT 6
17250: PPUSH
17251: LD_INT 2
17253: PPUSH
17254: LD_INT 4
17256: PPUSH
17257: LD_INT 1
17259: PPUSH
17260: LD_INT 1
17262: PPUSH
17263: CALL 5248 0 12
// end ;
17267: END
// export function Dial_SibTechs ; begin
17268: LD_INT 0
17270: PPUSH
// dial_SibTechsBlocker = true ;
17271: LD_ADDR_EXP 9
17275: PUSH
17276: LD_INT 1
17278: ST_TO_ADDR
// DialogueOn ;
17279: CALL_OW 6
// if IsOK ( Petrosyan ) then
17283: LD_EXP 43
17287: PPUSH
17288: CALL_OW 302
17292: IFFALSE 17308
// Say ( Petrosyan , DSibResearch-Pty-1 ) else
17294: LD_EXP 43
17298: PPUSH
17299: LD_STRING DSibResearch-Pty-1
17301: PPUSH
17302: CALL_OW 88
17306: GO 17331
// if IsOK ( Dolgov ) then
17308: LD_EXP 45
17312: PPUSH
17313: CALL_OW 302
17317: IFFALSE 17331
// Say ( Dolgov , DSibResearch-Dol-1 ) ;
17319: LD_EXP 45
17323: PPUSH
17324: LD_STRING DSibResearch-Dol-1
17326: PPUSH
17327: CALL_OW 88
// Say ( Burlak , DSibResearch-Bur-1 ) ;
17331: LD_EXP 39
17335: PPUSH
17336: LD_STRING DSibResearch-Bur-1
17338: PPUSH
17339: CALL_OW 88
// SayRadio ( Platonov , DSibResearch-Pla-1 ) ;
17343: LD_EXP 47
17347: PPUSH
17348: LD_STRING DSibResearch-Pla-1
17350: PPUSH
17351: CALL_OW 94
// DialogueOff ;
17355: CALL_OW 7
// ChangeMissionObjectives ( MResearch ) ;
17359: LD_STRING MResearch
17361: PPUSH
17362: CALL_OW 337
// SetRestrict ( b_ext_siberium , 3 , true ) ;
17366: LD_INT 21
17368: PPUSH
17369: LD_INT 3
17371: PPUSH
17372: LD_INT 1
17374: PPUSH
17375: CALL_OW 324
// SetRestrict ( b_siberite_power , 3 , true ) ;
17379: LD_INT 28
17381: PPUSH
17382: LD_INT 3
17384: PPUSH
17385: LD_INT 1
17387: PPUSH
17388: CALL_OW 324
// SetRestrict ( b_lab_siberium , 3 , true ) ;
17392: LD_INT 11
17394: PPUSH
17395: LD_INT 3
17397: PPUSH
17398: LD_INT 1
17400: PPUSH
17401: CALL_OW 324
// SetRestrict ( b_lab_spacetime , 3 , true ) ;
17405: LD_INT 14
17407: PPUSH
17408: LD_INT 3
17410: PPUSH
17411: LD_INT 1
17413: PPUSH
17414: CALL_OW 324
// end ;
17418: LD_VAR 0 1
17422: RET
// export function Dial_ResearchMatPredictions ; begin
17423: LD_INT 0
17425: PPUSH
// techMatPredStatus = state_researched ;
17426: LD_ADDR_EXP 6
17430: PUSH
17431: LD_INT 2
17433: ST_TO_ADDR
// ChangeMissionObjectives ( MOutPred ) ;
17434: LD_STRING MOutPred
17436: PPUSH
17437: CALL_OW 337
// DialogueOn ;
17441: CALL_OW 6
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
17445: LD_EXP 43
17449: PPUSH
17450: CALL_OW 302
17454: PUSH
17455: LD_EXP 45
17459: PPUSH
17460: CALL_OW 302
17464: OR
17465: IFFALSE 17587
// begin if IsOK ( Petrosyan ) then
17467: LD_EXP 43
17471: PPUSH
17472: CALL_OW 302
17476: IFFALSE 17492
// Say ( Petrosyan , DNoMaterial-Pty-1 ) else
17478: LD_EXP 43
17482: PPUSH
17483: LD_STRING DNoMaterial-Pty-1
17485: PPUSH
17486: CALL_OW 88
17490: GO 17515
// if IsOK ( Dolgov ) then
17492: LD_EXP 45
17496: PPUSH
17497: CALL_OW 302
17501: IFFALSE 17515
// Say ( Dolgov , DNoMaterial-Dol-1 ) ;
17503: LD_EXP 45
17507: PPUSH
17508: LD_STRING DNoMaterial-Dol-1
17510: PPUSH
17511: CALL_OW 88
// Say ( Burlak , DNoMaterial-Bur-1 ) ;
17515: LD_EXP 39
17519: PPUSH
17520: LD_STRING DNoMaterial-Bur-1
17522: PPUSH
17523: CALL_OW 88
// if IsOK ( Petrosyan ) then
17527: LD_EXP 43
17531: PPUSH
17532: CALL_OW 302
17536: IFFALSE 17552
// Say ( Petrosyan , DNoMaterial-Pty-2 ) else
17538: LD_EXP 43
17542: PPUSH
17543: LD_STRING DNoMaterial-Pty-2
17545: PPUSH
17546: CALL_OW 88
17550: GO 17575
// if IsOK ( Dolgov ) then
17552: LD_EXP 45
17556: PPUSH
17557: CALL_OW 302
17561: IFFALSE 17575
// Say ( Dolgov , DNoMaterial-Dol-2 ) ;
17563: LD_EXP 45
17567: PPUSH
17568: LD_STRING DNoMaterial-Dol-2
17570: PPUSH
17571: CALL_OW 88
// Say ( Burlak , DNoMaterial-Bur-2 ) ;
17575: LD_EXP 39
17579: PPUSH
17580: LD_STRING DNoMaterial-Bur-2
17582: PPUSH
17583: CALL_OW 88
// end ; DialogueOff ;
17587: CALL_OW 7
// end ;
17591: LD_VAR 0 1
17595: RET
// every 0 0$1 trigger not dial_SibTechsBlocker and ( GetResourceVisibility ( 116 , 123 , 3 ) or GetResourceVisibility ( 72 , 86 , 3 ) ) do
17596: LD_EXP 9
17600: NOT
17601: PUSH
17602: LD_INT 116
17604: PPUSH
17605: LD_INT 123
17607: PPUSH
17608: LD_INT 3
17610: PPUSH
17611: CALL_OW 440
17615: PUSH
17616: LD_INT 72
17618: PPUSH
17619: LD_INT 86
17621: PPUSH
17622: LD_INT 3
17624: PPUSH
17625: CALL_OW 440
17629: OR
17630: AND
17631: IFFALSE 17640
17633: GO 17635
17635: DISABLE
// Dial_SibTechs ;
17636: CALL 17268 0 0
17640: END
// every 5 5$0 trigger claimOvsyenkoBase do
17641: LD_EXP 15
17645: IFFALSE 17669
17647: GO 17649
17649: DISABLE
// begin PrepareVsevolod ;
17650: CALL 2664 0 0
// ComAgressiveMove ( vsevolodTeam , 61 , 45 ) ;
17654: LD_EXP 52
17658: PPUSH
17659: LD_INT 61
17661: PPUSH
17662: LD_INT 45
17664: PPUSH
17665: CALL_OW 114
// end ;
17669: END
// every 0 0$1 trigger immortalVsevolodTeam do var unit ;
17670: LD_EXP 18
17674: IFFALSE 17712
17676: GO 17678
17678: DISABLE
17679: LD_INT 0
17681: PPUSH
// begin enable ;
17682: ENABLE
// for unit in vsevolodTeam do
17683: LD_ADDR_VAR 0 1
17687: PUSH
17688: LD_EXP 52
17692: PUSH
17693: FOR_IN
17694: IFFALSE 17710
// SetLives ( unit , 1000 ) ;
17696: LD_VAR 0 1
17700: PPUSH
17701: LD_INT 1000
17703: PPUSH
17704: CALL_OW 234
17708: GO 17693
17710: POP
17711: POP
// end ;
17712: PPOPN 1
17714: END
// every 0 0$1 trigger GetLives ( ter_bun1 ) <= 650 or GetLives ( ter_arm1 ) <= 650 do var belkovSavedIn02 , tmp , speaker ;
17715: LD_INT 170
17717: PPUSH
17718: CALL_OW 256
17722: PUSH
17723: LD_INT 650
17725: LESSEQUAL
17726: PUSH
17727: LD_INT 174
17729: PPUSH
17730: CALL_OW 256
17734: PUSH
17735: LD_INT 650
17737: LESSEQUAL
17738: OR
17739: IFFALSE 18900
17741: GO 17743
17743: DISABLE
17744: LD_INT 0
17746: PPUSH
17747: PPUSH
17748: PPUSH
// begin ComMoveXY ( UnitFilter ( terminalBase , [ f_type , unit_human ] ) , 35 , 58 ) ;
17749: LD_EXP 60
17753: PPUSH
17754: LD_INT 21
17756: PUSH
17757: LD_INT 1
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PPUSH
17764: CALL_OW 72
17768: PPUSH
17769: LD_INT 35
17771: PPUSH
17772: LD_INT 58
17774: PPUSH
17775: CALL_OW 111
// SetSide ( UnitFilter ( terminalBase , [ f_type , unit_building ] ) , 6 ) ;
17779: LD_EXP 60
17783: PPUSH
17784: LD_INT 21
17786: PUSH
17787: LD_INT 3
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PPUSH
17794: CALL_OW 72
17798: PPUSH
17799: LD_INT 6
17801: PPUSH
17802: CALL_OW 235
// immortalVsevolodTeam = false ;
17806: LD_ADDR_EXP 18
17810: PUSH
17811: LD_INT 0
17813: ST_TO_ADDR
// ComEnterUnit ( [ Vsevolod , vsevolodTeam [ 3 ] ] , ter_arm1 ) ;
17814: LD_EXP 51
17818: PUSH
17819: LD_EXP 52
17823: PUSH
17824: LD_INT 3
17826: ARRAY
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PPUSH
17832: LD_INT 174
17834: PPUSH
17835: CALL_OW 120
// ComEnterUnit ( vsevolodTeam [ 4 ] , ter_bun1 ) ;
17839: LD_EXP 52
17843: PUSH
17844: LD_INT 4
17846: ARRAY
17847: PPUSH
17848: LD_INT 170
17850: PPUSH
17851: CALL_OW 120
// SetLives ( Petr , 500 ) ;
17855: LD_EXP 53
17859: PPUSH
17860: LD_INT 500
17862: PPUSH
17863: CALL_OW 234
// ComEnterUnit ( vsevolodTeam [ 2 ] , terminal ) ;
17867: LD_EXP 52
17871: PUSH
17872: LD_INT 2
17874: ARRAY
17875: PPUSH
17876: LD_INT 168
17878: PPUSH
17879: CALL_OW 120
// wait ( 0 0$5 ) ;
17883: LD_INT 175
17885: PPUSH
17886: CALL_OW 67
// DialogueOn ;
17890: CALL_OW 6
// if IsOK ( Dolgov ) then
17894: LD_EXP 45
17898: PPUSH
17899: CALL_OW 302
17903: IFFALSE 17917
// Say ( Dolgov , DVsevolod-Dol-1 ) ;
17905: LD_EXP 45
17909: PPUSH
17910: LD_STRING DVsevolod-Dol-1
17912: PPUSH
17913: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-1 ) ;
17917: LD_EXP 51
17921: PPUSH
17922: LD_STRING DVsevolod-Vse-1
17924: PPUSH
17925: CALL_OW 94
// if IsOK ( Gleb ) then
17929: LD_EXP 42
17933: PPUSH
17934: CALL_OW 302
17938: IFFALSE 17976
// begin Say ( Burlak , DVsevolod-Bur-1 ) ;
17940: LD_EXP 39
17944: PPUSH
17945: LD_STRING DVsevolod-Bur-1
17947: PPUSH
17948: CALL_OW 88
// Say ( Gleb , DVsevolod-Glb-1 ) ;
17952: LD_EXP 42
17956: PPUSH
17957: LD_STRING DVsevolod-Glb-1
17959: PPUSH
17960: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-2 ) ;
17964: LD_EXP 51
17968: PPUSH
17969: LD_STRING DVsevolod-Vse-2
17971: PPUSH
17972: CALL_OW 94
// end ; Say ( Burlak , DVsevolod-Bur-2 ) ;
17976: LD_EXP 39
17980: PPUSH
17981: LD_STRING DVsevolod-Bur-2
17983: PPUSH
17984: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-3 ) ;
17988: LD_EXP 51
17992: PPUSH
17993: LD_STRING DVsevolod-Vse-3
17995: PPUSH
17996: CALL_OW 94
// Say ( Burlak , DVsevolod-Bur-3 ) ;
18000: LD_EXP 39
18004: PPUSH
18005: LD_STRING DVsevolod-Bur-3
18007: PPUSH
18008: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-4 ) ;
18012: LD_EXP 51
18016: PPUSH
18017: LD_STRING DVsevolod-Vse-4
18019: PPUSH
18020: CALL_OW 94
// Say ( Burlak , DVsevolod-Bur-4 ) ;
18024: LD_EXP 39
18028: PPUSH
18029: LD_STRING DVsevolod-Bur-4
18031: PPUSH
18032: CALL_OW 88
// if IsOK ( Gleb ) then
18036: LD_EXP 42
18040: PPUSH
18041: CALL_OW 302
18045: IFFALSE 18073
// begin Say ( Gleb , DVsevolod-Glb-4 ) ;
18047: LD_EXP 42
18051: PPUSH
18052: LD_STRING DVsevolod-Glb-4
18054: PPUSH
18055: CALL_OW 88
// Say ( Burlak , DVsevolod-Bur-5 ) ;
18059: LD_EXP 39
18063: PPUSH
18064: LD_STRING DVsevolod-Bur-5
18066: PPUSH
18067: CALL_OW 88
// end else
18071: GO 18147
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-RSol1-5 ,  , false , true ) ;
18073: LD_INT 22
18075: PUSH
18076: LD_INT 3
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 21
18085: PUSH
18086: LD_INT 1
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 50
18095: PUSH
18096: EMPTY
18097: LIST
18098: PUSH
18099: LD_INT 26
18101: PUSH
18102: LD_INT 1
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 23
18111: PUSH
18112: LD_INT 3
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: PPUSH
18126: CALL_OW 69
18130: PPUSH
18131: LD_STRING DVsevolod-RSol1-5
18133: PPUSH
18134: LD_STRING 
18136: PPUSH
18137: LD_INT 0
18139: PPUSH
18140: LD_INT 1
18142: PPUSH
18143: CALL 12102 0 5
// Say ( Burlak , DVsevolod-Bur-6 ) ;
18147: LD_EXP 39
18151: PPUSH
18152: LD_STRING DVsevolod-Bur-6
18154: PPUSH
18155: CALL_OW 88
// CenterOnXY ( 59 , 40 ) ;
18159: LD_INT 59
18161: PPUSH
18162: LD_INT 40
18164: PPUSH
18165: CALL_OW 84
// RevealFogArea ( 3 , TerminalBaseArea ) ;
18169: LD_INT 3
18171: PPUSH
18172: LD_INT 4
18174: PPUSH
18175: CALL_OW 332
// if IsOK ( Dolgov ) then
18179: LD_EXP 45
18183: PPUSH
18184: CALL_OW 302
18188: IFFALSE 18204
// Say ( Dolgov , DVsevolod-Dol-6 ) else
18190: LD_EXP 45
18194: PPUSH
18195: LD_STRING DVsevolod-Dol-6
18197: PPUSH
18198: CALL_OW 88
18202: GO 18278
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-Dol-6 ,  , false , true ) ;
18204: LD_INT 22
18206: PUSH
18207: LD_INT 3
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 21
18216: PUSH
18217: LD_INT 1
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 50
18226: PUSH
18227: EMPTY
18228: LIST
18229: PUSH
18230: LD_INT 26
18232: PUSH
18233: LD_INT 1
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 23
18242: PUSH
18243: LD_INT 3
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: PPUSH
18257: CALL_OW 69
18261: PPUSH
18262: LD_STRING DVsevolod-Dol-6
18264: PPUSH
18265: LD_STRING 
18267: PPUSH
18268: LD_INT 0
18270: PPUSH
18271: LD_INT 1
18273: PPUSH
18274: CALL 12102 0 5
// Say ( Burlak , DVsevolod-Bur-7 ) ;
18278: LD_EXP 39
18282: PPUSH
18283: LD_STRING DVsevolod-Bur-7
18285: PPUSH
18286: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-7 ) ;
18290: LD_EXP 51
18294: PPUSH
18295: LD_STRING DVsevolod-Vse-7
18297: PPUSH
18298: CALL_OW 94
// DialogueOff ;
18302: CALL_OW 7
// ChangeMissionObjectives ( MVsevolod ) ;
18306: LD_STRING MVsevolod
18308: PPUSH
18309: CALL_OW 337
// enableVsevolodCounter = true ;
18313: LD_ADDR_EXP 22
18317: PUSH
18318: LD_INT 1
18320: ST_TO_ADDR
// canGoNorth = true ;
18321: LD_ADDR_EXP 21
18325: PUSH
18326: LD_INT 1
18328: ST_TO_ADDR
// PrepareSoldiersInBunkers ;
18329: CALL 3979 0 0
// wait ( 0 0$7 ) ;
18333: LD_INT 245
18335: PPUSH
18336: CALL_OW 67
// belkovSavedIn02 = TestCharacters ( 02_Belkov ) ;
18340: LD_ADDR_VAR 0 1
18344: PUSH
18345: LD_STRING 02_Belkov
18347: PPUSH
18348: CALL_OW 28
18352: ST_TO_ADDR
// DialogueOn ;
18353: CALL_OW 6
// if belkovSavedIn02 then
18357: LD_VAR 0 1
18361: IFFALSE 18562
// begin if IsOK ( Gleb ) then
18363: LD_EXP 42
18367: PPUSH
18368: CALL_OW 302
18372: IFFALSE 18386
// Say ( Gleb , DHelp1-Glb-1 ) ;
18374: LD_EXP 42
18378: PPUSH
18379: LD_STRING DHelp1-Glb-1
18381: PPUSH
18382: CALL_OW 88
// if IsOK ( Dolgov ) then
18386: LD_EXP 45
18390: PPUSH
18391: CALL_OW 302
18395: IFFALSE 18409
// Say ( Dolgov , DHelp1-Dol-1 ) ;
18397: LD_EXP 45
18401: PPUSH
18402: LD_STRING DHelp1-Dol-1
18404: PPUSH
18405: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Gleb , Dolgov , Titov ] ;
18409: LD_ADDR_VAR 0 2
18413: PUSH
18414: LD_INT 22
18416: PUSH
18417: LD_INT 3
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 21
18426: PUSH
18427: LD_INT 1
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 50
18436: PUSH
18437: EMPTY
18438: LIST
18439: PUSH
18440: LD_INT 26
18442: PUSH
18443: LD_INT 1
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 23
18452: PUSH
18453: LD_INT 3
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: PPUSH
18467: CALL_OW 69
18471: PUSH
18472: LD_EXP 42
18476: PUSH
18477: LD_EXP 45
18481: PUSH
18482: LD_EXP 44
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: LIST
18491: DIFF
18492: ST_TO_ADDR
// DialogRandom ( tmp , DHelp1-RSol1-1 ,  , false , true ) ;
18493: LD_VAR 0 2
18497: PPUSH
18498: LD_STRING DHelp1-RSol1-1
18500: PPUSH
18501: LD_STRING 
18503: PPUSH
18504: LD_INT 0
18506: PPUSH
18507: LD_INT 1
18509: PPUSH
18510: CALL 12102 0 5
// if IsOK ( Titov ) then
18514: LD_EXP 44
18518: PPUSH
18519: CALL_OW 302
18523: IFFALSE 18537
// Say ( Titov , DHelp1-Tit-1 ) ;
18525: LD_EXP 44
18529: PPUSH
18530: LD_STRING DHelp1-Tit-1
18532: PPUSH
18533: CALL_OW 88
// if IsOK ( Gleb ) then
18537: LD_EXP 42
18541: PPUSH
18542: CALL_OW 302
18546: IFFALSE 18560
// Say ( Gleb , DHelp1-Glb-2 ) ;
18548: LD_EXP 42
18552: PPUSH
18553: LD_STRING DHelp1-Glb-2
18555: PPUSH
18556: CALL_OW 88
// end else
18560: GO 18773
// begin if IsOK ( Titov ) then
18562: LD_EXP 44
18566: PPUSH
18567: CALL_OW 302
18571: IFFALSE 18585
// Say ( Titov , DHelp2-Tit-1 ) ;
18573: LD_EXP 44
18577: PPUSH
18578: LD_STRING DHelp2-Tit-1
18580: PPUSH
18581: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Gleb , Titov ] ;
18585: LD_ADDR_VAR 0 2
18589: PUSH
18590: LD_INT 22
18592: PUSH
18593: LD_INT 3
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 21
18602: PUSH
18603: LD_INT 1
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 50
18612: PUSH
18613: EMPTY
18614: LIST
18615: PUSH
18616: LD_INT 26
18618: PUSH
18619: LD_INT 1
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PUSH
18626: LD_INT 23
18628: PUSH
18629: LD_INT 3
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: PPUSH
18643: CALL_OW 69
18647: PUSH
18648: LD_EXP 42
18652: PUSH
18653: LD_EXP 44
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: DIFF
18662: ST_TO_ADDR
// speaker = DialogRandom ( tmp , DHelp2-RSol1-1 ,  , false , true ) ;
18663: LD_ADDR_VAR 0 3
18667: PUSH
18668: LD_VAR 0 2
18672: PPUSH
18673: LD_STRING DHelp2-RSol1-1
18675: PPUSH
18676: LD_STRING 
18678: PPUSH
18679: LD_INT 0
18681: PPUSH
18682: LD_INT 1
18684: PPUSH
18685: CALL 12102 0 5
18689: ST_TO_ADDR
// if IsOK ( Gleb ) then
18690: LD_EXP 42
18694: PPUSH
18695: CALL_OW 302
18699: IFFALSE 18713
// Say ( Gleb , DHelp2-Glb-1 ) ;
18701: LD_EXP 42
18705: PPUSH
18706: LD_STRING DHelp2-Glb-1
18708: PPUSH
18709: CALL_OW 88
// tmp = tmp diff speaker ;
18713: LD_ADDR_VAR 0 2
18717: PUSH
18718: LD_VAR 0 2
18722: PUSH
18723: LD_VAR 0 3
18727: DIFF
18728: ST_TO_ADDR
// DialogRandom ( tmp , DHelp2-RSol2-1 ,  , false , true ) ;
18729: LD_VAR 0 2
18733: PPUSH
18734: LD_STRING DHelp2-RSol2-1
18736: PPUSH
18737: LD_STRING 
18739: PPUSH
18740: LD_INT 0
18742: PPUSH
18743: LD_INT 1
18745: PPUSH
18746: CALL 12102 0 5
// if IsOK ( Titov ) then
18750: LD_EXP 44
18754: PPUSH
18755: CALL_OW 302
18759: IFFALSE 18773
// Say ( Titov , DHelp2-Tit-2 ) ;
18761: LD_EXP 44
18765: PPUSH
18766: LD_STRING DHelp2-Tit-2
18768: PPUSH
18769: CALL_OW 88
// end ; Say ( Burlak , DHelp3-Bur-1 ) ;
18773: LD_EXP 39
18777: PPUSH
18778: LD_STRING DHelp3-Bur-1
18780: PPUSH
18781: CALL_OW 88
// if IsOK ( Lipshchin ) then
18785: LD_EXP 46
18789: PPUSH
18790: CALL_OW 302
18794: IFFALSE 18810
// Say ( Lipshchin , DHelp3-Lip-1 ) else
18796: LD_EXP 46
18800: PPUSH
18801: LD_STRING DHelp3-Lip-1
18803: PPUSH
18804: CALL_OW 88
18808: GO 18884
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-Dol-6 ,  , false , true ) ;
18810: LD_INT 22
18812: PUSH
18813: LD_INT 3
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 21
18822: PUSH
18823: LD_INT 1
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 50
18832: PUSH
18833: EMPTY
18834: LIST
18835: PUSH
18836: LD_INT 26
18838: PUSH
18839: LD_INT 1
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 23
18848: PUSH
18849: LD_INT 3
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: PPUSH
18863: CALL_OW 69
18867: PPUSH
18868: LD_STRING DVsevolod-Dol-6
18870: PPUSH
18871: LD_STRING 
18873: PPUSH
18874: LD_INT 0
18876: PPUSH
18877: LD_INT 1
18879: PPUSH
18880: CALL 12102 0 5
// Say ( Burlak , DHelp3-Bur-2 ) ;
18884: LD_EXP 39
18888: PPUSH
18889: LD_STRING DHelp3-Bur-2
18891: PPUSH
18892: CALL_OW 88
// DialogueOff ;
18896: CALL_OW 7
// end ;
18900: PPOPN 3
18902: END
// every 0 0$1 trigger claimOvsyenkoBase and not FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] , [ f_type , unit_vehicle ] ] ] ) and FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
18903: LD_EXP 15
18907: PUSH
18908: LD_INT 3
18910: PPUSH
18911: LD_INT 22
18913: PUSH
18914: LD_INT 3
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 2
18923: PUSH
18924: LD_INT 21
18926: PUSH
18927: LD_INT 1
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 59
18936: PUSH
18937: EMPTY
18938: LIST
18939: PUSH
18940: LD_INT 21
18942: PUSH
18943: LD_INT 2
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PPUSH
18960: CALL_OW 70
18964: NOT
18965: AND
18966: PUSH
18967: LD_INT 3
18969: PPUSH
18970: LD_INT 22
18972: PUSH
18973: LD_INT 1
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 2
18982: PUSH
18983: LD_INT 21
18985: PUSH
18986: LD_INT 1
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 21
18995: PUSH
18996: LD_INT 2
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: LIST
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PPUSH
19012: CALL_OW 70
19016: AND
19017: IFFALSE 19184
19019: GO 19021
19021: DISABLE
// begin lostAgainBase = true ;
19022: LD_ADDR_EXP 17
19026: PUSH
19027: LD_INT 1
19029: ST_TO_ADDR
// SetSide ( FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , 1 ) ;
19030: LD_INT 3
19032: PPUSH
19033: LD_INT 22
19035: PUSH
19036: LD_INT 3
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 21
19045: PUSH
19046: LD_INT 3
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PPUSH
19057: CALL_OW 70
19061: PPUSH
19062: LD_INT 1
19064: PPUSH
19065: CALL_OW 235
// if IsOK ( Gleb ) then
19069: LD_EXP 42
19073: PPUSH
19074: CALL_OW 302
19078: IFFALSE 19104
// begin Say ( Gleb , DOvsyenkoCaptured-Glb-1 ) ;
19080: LD_EXP 42
19084: PPUSH
19085: LD_STRING DOvsyenkoCaptured-Glb-1
19087: PPUSH
19088: CALL_OW 88
// Say ( Burlak , DOvsyenkoCaptured-Bur-1 ) ;
19092: LD_EXP 39
19096: PPUSH
19097: LD_STRING DOvsyenkoCaptured-Bur-1
19099: PPUSH
19100: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Gleb , DOvsyenkoCaptured-RSol1-1 ,  , false , true ) ;
19104: LD_INT 22
19106: PUSH
19107: LD_INT 3
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 21
19116: PUSH
19117: LD_INT 1
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 50
19126: PUSH
19127: EMPTY
19128: LIST
19129: PUSH
19130: LD_INT 26
19132: PUSH
19133: LD_INT 1
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 23
19142: PUSH
19143: LD_INT 3
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: PPUSH
19157: CALL_OW 69
19161: PUSH
19162: LD_EXP 42
19166: DIFF
19167: PPUSH
19168: LD_STRING DOvsyenkoCaptured-RSol1-1
19170: PPUSH
19171: LD_STRING 
19173: PPUSH
19174: LD_INT 0
19176: PPUSH
19177: LD_INT 1
19179: PPUSH
19180: CALL 12102 0 5
// end ;
19184: END
// every 0 0$1 trigger FilterUnitsInArea ( TrapArea , [ [ f_side , 3 ] , [ f_ok ] ] ) do
19185: LD_INT 12
19187: PPUSH
19188: LD_INT 22
19190: PUSH
19191: LD_INT 3
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 50
19200: PUSH
19201: EMPTY
19202: LIST
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PPUSH
19208: CALL_OW 70
19212: IFFALSE 19221
19214: GO 19216
19216: DISABLE
// PrepareTrap ;
19217: CALL 3800 0 0
19221: END
// every 0 0$1 trigger not dial_TrapDialogBlocker do var tmp , speaker , unit ;
19222: LD_EXP 11
19226: NOT
19227: IFFALSE 19445
19229: GO 19231
19231: DISABLE
19232: LD_INT 0
19234: PPUSH
19235: PPUSH
19236: PPUSH
// begin enable ;
19237: ENABLE
// for unit in trapTeam do
19238: LD_ADDR_VAR 0 3
19242: PUSH
19243: LD_EXP 62
19247: PUSH
19248: FOR_IN
19249: IFFALSE 19443
// if See ( 3 , unit ) then
19251: LD_INT 3
19253: PPUSH
19254: LD_VAR 0 3
19258: PPUSH
19259: CALL_OW 292
19263: IFFALSE 19441
// begin dial_TrapDialogBlocker = true ;
19265: LD_ADDR_EXP 11
19269: PUSH
19270: LD_INT 1
19272: ST_TO_ADDR
// DialogueOn ;
19273: CALL_OW 6
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Gleb ;
19277: LD_ADDR_VAR 0 1
19281: PUSH
19282: LD_INT 22
19284: PUSH
19285: LD_INT 3
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 21
19294: PUSH
19295: LD_INT 1
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 50
19304: PUSH
19305: EMPTY
19306: LIST
19307: PUSH
19308: LD_INT 26
19310: PUSH
19311: LD_INT 1
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 23
19320: PUSH
19321: LD_INT 3
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: PPUSH
19335: CALL_OW 69
19339: PUSH
19340: LD_EXP 42
19344: DIFF
19345: ST_TO_ADDR
// speaker = DialogRandom ( tmp , DPartyAttacked-RSol1-1 ,  , false , true ) ;
19346: LD_ADDR_VAR 0 2
19350: PUSH
19351: LD_VAR 0 1
19355: PPUSH
19356: LD_STRING DPartyAttacked-RSol1-1
19358: PPUSH
19359: LD_STRING 
19361: PPUSH
19362: LD_INT 0
19364: PPUSH
19365: LD_INT 1
19367: PPUSH
19368: CALL 12102 0 5
19372: ST_TO_ADDR
// tmp = tmp diff speaker ;
19373: LD_ADDR_VAR 0 1
19377: PUSH
19378: LD_VAR 0 1
19382: PUSH
19383: LD_VAR 0 2
19387: DIFF
19388: ST_TO_ADDR
// if IsOK ( Gleb ) then
19389: LD_EXP 42
19393: PPUSH
19394: CALL_OW 302
19398: IFFALSE 19412
// Say ( Gleb , DPartyAttacked-Glb-1 ) ;
19400: LD_EXP 42
19404: PPUSH
19405: LD_STRING DPartyAttacked-Glb-1
19407: PPUSH
19408: CALL_OW 88
// DialogRandom ( tmp , DPartyAttacked-RSol1-2 ,  , false , true ) ;
19412: LD_VAR 0 1
19416: PPUSH
19417: LD_STRING DPartyAttacked-RSol1-2
19419: PPUSH
19420: LD_STRING 
19422: PPUSH
19423: LD_INT 0
19425: PPUSH
19426: LD_INT 1
19428: PPUSH
19429: CALL 12102 0 5
// DialogueOff ;
19433: CALL_OW 7
// exit ;
19437: POP
19438: POP
19439: GO 19445
// end ;
19441: GO 19248
19443: POP
19444: POP
// end ;
19445: PPOPN 3
19447: END
// every 0 0$1 trigger not savedVsevolod and IsOK ( Vsevolod ) and FilterUnitsInArea ( TerminalBaseArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ [ f_type , unit_human ] , [ f_nation , nation_russian ] ] , [ f_type , unit_vehicle ] ] ] ) do var nearUnit , unit , maleRandomUnits ;
19448: LD_EXP 19
19452: NOT
19453: PUSH
19454: LD_EXP 51
19458: PPUSH
19459: CALL_OW 302
19463: AND
19464: PUSH
19465: LD_INT 4
19467: PPUSH
19468: LD_INT 22
19470: PUSH
19471: LD_INT 3
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 50
19480: PUSH
19481: EMPTY
19482: LIST
19483: PUSH
19484: LD_INT 2
19486: PUSH
19487: LD_INT 21
19489: PUSH
19490: LD_INT 1
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 23
19499: PUSH
19500: LD_INT 3
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 21
19513: PUSH
19514: LD_INT 2
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: LIST
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: LIST
19530: PPUSH
19531: CALL_OW 70
19535: AND
19536: IFFALSE 20178
19538: GO 19540
19540: DISABLE
19541: LD_INT 0
19543: PPUSH
19544: PPUSH
19545: PPUSH
// begin savedVsevolod = true ;
19546: LD_ADDR_EXP 19
19550: PUSH
19551: LD_INT 1
19553: ST_TO_ADDR
// ChangeMissionObjectives ( MVsevolodOut ) ;
19554: LD_STRING MVsevolodOut
19556: PPUSH
19557: CALL_OW 337
// unit = FilterUnitsInArea ( TerminalBaseArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ [ f_type , unit_human ] , [ f_nation , nation_russian ] ] , [ f_type , unit_vehicle ] ] ] ) ;
19561: LD_ADDR_VAR 0 2
19565: PUSH
19566: LD_INT 4
19568: PPUSH
19569: LD_INT 22
19571: PUSH
19572: LD_INT 3
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 50
19581: PUSH
19582: EMPTY
19583: LIST
19584: PUSH
19585: LD_INT 2
19587: PUSH
19588: LD_INT 21
19590: PUSH
19591: LD_INT 1
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 23
19600: PUSH
19601: LD_INT 3
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 21
19614: PUSH
19615: LD_INT 2
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: LIST
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: LIST
19631: PPUSH
19632: CALL_OW 70
19636: ST_TO_ADDR
// unit = unit [ 1 ] ;
19637: LD_ADDR_VAR 0 2
19641: PUSH
19642: LD_VAR 0 2
19646: PUSH
19647: LD_INT 1
19649: ARRAY
19650: ST_TO_ADDR
// if GetType ( unit ) = unit_vehicle then
19651: LD_VAR 0 2
19655: PPUSH
19656: CALL_OW 247
19660: PUSH
19661: LD_INT 2
19663: EQUAL
19664: IFFALSE 19685
// unit = UnitsInside ( unit ) [ 1 ] ;
19666: LD_ADDR_VAR 0 2
19670: PUSH
19671: LD_VAR 0 2
19675: PPUSH
19676: CALL_OW 313
19680: PUSH
19681: LD_INT 1
19683: ARRAY
19684: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
19685: LD_INT 22
19687: PUSH
19688: LD_INT 6
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PPUSH
19695: CALL_OW 69
19699: PPUSH
19700: LD_INT 3
19702: PPUSH
19703: CALL_OW 235
// if not unit = Burlak then
19707: LD_VAR 0 2
19711: PUSH
19712: LD_EXP 39
19716: EQUAL
19717: NOT
19718: IFFALSE 19895
// begin vsevolodWaitGorky = true ;
19720: LD_ADDR_EXP 20
19724: PUSH
19725: LD_INT 1
19727: ST_TO_ADDR
// DialogueOn ;
19728: CALL_OW 6
// Say ( Vsevolod , DOtherMeetVsev-Vse-1 ) ;
19732: LD_EXP 51
19736: PPUSH
19737: LD_STRING DOtherMeetVsev-Vse-1
19739: PPUSH
19740: CALL_OW 88
// if GetSex ( unit ) = sex_female then
19744: LD_VAR 0 2
19748: PPUSH
19749: CALL_OW 258
19753: PUSH
19754: LD_INT 2
19756: EQUAL
19757: IFFALSE 19877
// begin maleRandomUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff vsevolodTeam ;
19759: LD_ADDR_VAR 0 3
19763: PUSH
19764: LD_INT 22
19766: PUSH
19767: LD_INT 3
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 21
19776: PUSH
19777: LD_INT 1
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 50
19786: PUSH
19787: EMPTY
19788: LIST
19789: PUSH
19790: LD_INT 26
19792: PUSH
19793: LD_INT 1
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 23
19802: PUSH
19803: LD_INT 3
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: PPUSH
19817: CALL_OW 69
19821: PUSH
19822: LD_EXP 52
19826: DIFF
19827: ST_TO_ADDR
// maleRandomUnits = maleRandomUnits diff Gleb ;
19828: LD_ADDR_VAR 0 3
19832: PUSH
19833: LD_VAR 0 3
19837: PUSH
19838: LD_EXP 42
19842: DIFF
19843: ST_TO_ADDR
// if maleRandomUnits then
19844: LD_VAR 0 3
19848: IFFALSE 19875
// DialogRandom ( maleRandomUnits [ 1 ] , DOtherMeetVsev-RSol1-1 ,  , false , true ) ;
19850: LD_VAR 0 3
19854: PUSH
19855: LD_INT 1
19857: ARRAY
19858: PPUSH
19859: LD_STRING DOtherMeetVsev-RSol1-1
19861: PPUSH
19862: LD_STRING 
19864: PPUSH
19865: LD_INT 0
19867: PPUSH
19868: LD_INT 1
19870: PPUSH
19871: CALL 12102 0 5
// end else
19875: GO 19889
// Say ( unit , DOtherMeetVsev-RSol1-1 ) ;
19877: LD_VAR 0 2
19881: PPUSH
19882: LD_STRING DOtherMeetVsev-RSol1-1
19884: PPUSH
19885: CALL_OW 88
// DialogueOff ;
19889: CALL_OW 7
// end else
19893: GO 20178
// begin DialogueOn ;
19895: CALL_OW 6
// Say ( Vsevolod , DMeetVsev-Vse-1 ) ;
19899: LD_EXP 51
19903: PPUSH
19904: LD_STRING DMeetVsev-Vse-1
19906: PPUSH
19907: CALL_OW 88
// Say ( Burlak , DMeetVsev-Bur-1 ) ;
19911: LD_EXP 39
19915: PPUSH
19916: LD_STRING DMeetVsev-Bur-1
19918: PPUSH
19919: CALL_OW 88
// if lostAgainBase then
19923: LD_EXP 17
19927: IFFALSE 19967
// begin Say ( Vsevolod , DMeetVsev2-Vse-1 ) ;
19929: LD_EXP 51
19933: PPUSH
19934: LD_STRING DMeetVsev2-Vse-1
19936: PPUSH
19937: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-1 ) ;
19941: LD_EXP 39
19945: PPUSH
19946: LD_STRING DMeetVsev2-Bur-1
19948: PPUSH
19949: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-2 ) ;
19953: LD_EXP 51
19957: PPUSH
19958: LD_STRING DMeetVsev2-Vse-2
19960: PPUSH
19961: CALL_OW 88
// end else
19965: GO 20003
// begin Say ( Vsevolod , DMeetVsev2-Vse-2a ) ;
19967: LD_EXP 51
19971: PPUSH
19972: LD_STRING DMeetVsev2-Vse-2a
19974: PPUSH
19975: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-2 ) ;
19979: LD_EXP 39
19983: PPUSH
19984: LD_STRING DMeetVsev2-Bur-2
19986: PPUSH
19987: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-3 ) ;
19991: LD_EXP 51
19995: PPUSH
19996: LD_STRING DMeetVsev2-Vse-3
19998: PPUSH
19999: CALL_OW 88
// end ; Say ( Burlak , DMeetVsev3-Bur-1 ) ;
20003: LD_EXP 39
20007: PPUSH
20008: LD_STRING DMeetVsev3-Bur-1
20010: PPUSH
20011: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-1 ) ;
20015: LD_EXP 51
20019: PPUSH
20020: LD_STRING DMeetVsev3-Vse-1
20022: PPUSH
20023: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-2 ) ;
20027: LD_EXP 39
20031: PPUSH
20032: LD_STRING DMeetVsev3-Bur-2
20034: PPUSH
20035: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-2 ) ;
20039: LD_EXP 51
20043: PPUSH
20044: LD_STRING DMeetVsev3-Vse-2
20046: PPUSH
20047: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-3 ) ;
20051: LD_EXP 39
20055: PPUSH
20056: LD_STRING DMeetVsev3-Bur-3
20058: PPUSH
20059: CALL_OW 88
// if stevensStatus = 0 then
20063: LD_EXP 4
20067: PUSH
20068: LD_INT 0
20070: EQUAL
20071: IFFALSE 20085
// Say ( Burlak , DMeetVsev4-Bur-1 ) ;
20073: LD_EXP 39
20077: PPUSH
20078: LD_STRING DMeetVsev4-Bur-1
20080: PPUSH
20081: CALL_OW 88
// Say ( Burlak , DMeetVsev5-Bur-1 ) ;
20085: LD_EXP 39
20089: PPUSH
20090: LD_STRING DMeetVsev5-Bur-1
20092: PPUSH
20093: CALL_OW 88
// Say ( Vsevolod , DMeetVsev5-Vse-1 ) ;
20097: LD_EXP 51
20101: PPUSH
20102: LD_STRING DMeetVsev5-Vse-1
20104: PPUSH
20105: CALL_OW 88
// Say ( Burlak , DMeetVsev6-Bur-1 ) ;
20109: LD_EXP 39
20113: PPUSH
20114: LD_STRING DMeetVsev6-Bur-1
20116: PPUSH
20117: CALL_OW 88
// Say ( Vsevolod , DMeetVsev6-Vse-1 ) ;
20121: LD_EXP 51
20125: PPUSH
20126: LD_STRING DMeetVsev6-Vse-1
20128: PPUSH
20129: CALL_OW 88
// DialogueOff ;
20133: CALL_OW 7
// wait ( 0 0$20 ) ;
20137: LD_INT 700
20139: PPUSH
20140: CALL_OW 67
// PrepareConvoy ;
20144: CALL 4023 0 0
// ComMoveXY ( convoyTeam , 57 , 40 ) ;
20148: LD_EXP 63
20152: PPUSH
20153: LD_INT 57
20155: PPUSH
20156: LD_INT 40
20158: PPUSH
20159: CALL_OW 111
// AddComMoveXY ( convoyTeam , 37 , 59 ) ;
20163: LD_EXP 63
20167: PPUSH
20168: LD_INT 37
20170: PPUSH
20171: LD_INT 59
20173: PPUSH
20174: CALL_OW 171
// end ; end ;
20178: PPOPN 3
20180: END
// every 0 0$1 trigger vsevolodWaitGorky and GetDistUnits ( Vsevolod , Burlak ) <= 7 do
20181: LD_EXP 20
20185: PUSH
20186: LD_EXP 51
20190: PPUSH
20191: LD_EXP 39
20195: PPUSH
20196: CALL_OW 296
20200: PUSH
20201: LD_INT 7
20203: LESSEQUAL
20204: AND
20205: IFFALSE 20501
20207: GO 20209
20209: DISABLE
// begin vsevolodWaitGorky = false ;
20210: LD_ADDR_EXP 20
20214: PUSH
20215: LD_INT 0
20217: ST_TO_ADDR
// DialogueOn ;
20218: CALL_OW 6
// Say ( Vsevolod , DMeetVsev-Vse-1 ) ;
20222: LD_EXP 51
20226: PPUSH
20227: LD_STRING DMeetVsev-Vse-1
20229: PPUSH
20230: CALL_OW 88
// Say ( Burlak , DMeetVsev-Bur-1 ) ;
20234: LD_EXP 39
20238: PPUSH
20239: LD_STRING DMeetVsev-Bur-1
20241: PPUSH
20242: CALL_OW 88
// if lostAgainBase then
20246: LD_EXP 17
20250: IFFALSE 20290
// begin Say ( Vsevolod , DMeetVsev2-Vse-1 ) ;
20252: LD_EXP 51
20256: PPUSH
20257: LD_STRING DMeetVsev2-Vse-1
20259: PPUSH
20260: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-1 ) ;
20264: LD_EXP 39
20268: PPUSH
20269: LD_STRING DMeetVsev2-Bur-1
20271: PPUSH
20272: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-2 ) ;
20276: LD_EXP 51
20280: PPUSH
20281: LD_STRING DMeetVsev2-Vse-2
20283: PPUSH
20284: CALL_OW 88
// end else
20288: GO 20326
// begin Say ( Vsevolod , DMeetVsev2-Vse-2a ) ;
20290: LD_EXP 51
20294: PPUSH
20295: LD_STRING DMeetVsev2-Vse-2a
20297: PPUSH
20298: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-2 ) ;
20302: LD_EXP 39
20306: PPUSH
20307: LD_STRING DMeetVsev2-Bur-2
20309: PPUSH
20310: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-3 ) ;
20314: LD_EXP 51
20318: PPUSH
20319: LD_STRING DMeetVsev2-Vse-3
20321: PPUSH
20322: CALL_OW 88
// end ; Say ( Burlak , DMeetVsev3-Bur-1 ) ;
20326: LD_EXP 39
20330: PPUSH
20331: LD_STRING DMeetVsev3-Bur-1
20333: PPUSH
20334: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-1 ) ;
20338: LD_EXP 51
20342: PPUSH
20343: LD_STRING DMeetVsev3-Vse-1
20345: PPUSH
20346: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-2 ) ;
20350: LD_EXP 39
20354: PPUSH
20355: LD_STRING DMeetVsev3-Bur-2
20357: PPUSH
20358: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-2 ) ;
20362: LD_EXP 51
20366: PPUSH
20367: LD_STRING DMeetVsev3-Vse-2
20369: PPUSH
20370: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-3 ) ;
20374: LD_EXP 39
20378: PPUSH
20379: LD_STRING DMeetVsev3-Bur-3
20381: PPUSH
20382: CALL_OW 88
// if stevensStatus = 0 then
20386: LD_EXP 4
20390: PUSH
20391: LD_INT 0
20393: EQUAL
20394: IFFALSE 20408
// Say ( Burlak , DMeetVsev4-Bur-1 ) ;
20396: LD_EXP 39
20400: PPUSH
20401: LD_STRING DMeetVsev4-Bur-1
20403: PPUSH
20404: CALL_OW 88
// Say ( Burlak , DMeetVsev5-Bur-1 ) ;
20408: LD_EXP 39
20412: PPUSH
20413: LD_STRING DMeetVsev5-Bur-1
20415: PPUSH
20416: CALL_OW 88
// Say ( Vsevolod , DMeetVsev5-Vse-1 ) ;
20420: LD_EXP 51
20424: PPUSH
20425: LD_STRING DMeetVsev5-Vse-1
20427: PPUSH
20428: CALL_OW 88
// Say ( Vsevolod , DMeetVsev6-Vse-1 ) ;
20432: LD_EXP 51
20436: PPUSH
20437: LD_STRING DMeetVsev6-Vse-1
20439: PPUSH
20440: CALL_OW 88
// Say ( Burlak , DMeetVsev6-Bur-1 ) ;
20444: LD_EXP 39
20448: PPUSH
20449: LD_STRING DMeetVsev6-Bur-1
20451: PPUSH
20452: CALL_OW 88
// DialogueOff ;
20456: CALL_OW 7
// wait ( 0 0$20 ) ;
20460: LD_INT 700
20462: PPUSH
20463: CALL_OW 67
// PrepareConvoy ;
20467: CALL 4023 0 0
// ComMoveXY ( convoyTeam , 57 , 40 ) ;
20471: LD_EXP 63
20475: PPUSH
20476: LD_INT 57
20478: PPUSH
20479: LD_INT 40
20481: PPUSH
20482: CALL_OW 111
// AddComMoveXY ( convoyTeam , 37 , 59 ) ;
20486: LD_EXP 63
20490: PPUSH
20491: LD_INT 37
20493: PPUSH
20494: LD_INT 59
20496: PPUSH
20497: CALL_OW 171
// end ;
20501: END
// every 0 0$1 trigger not dial_ConvoyDialogBlocker do var tmp , speaker , unit ;
20502: LD_EXP 12
20506: NOT
20507: IFFALSE 20637
20509: GO 20511
20511: DISABLE
20512: LD_INT 0
20514: PPUSH
20515: PPUSH
20516: PPUSH
// begin enable ;
20517: ENABLE
// for unit in convoyTeam do
20518: LD_ADDR_VAR 0 3
20522: PUSH
20523: LD_EXP 63
20527: PUSH
20528: FOR_IN
20529: IFFALSE 20635
// if See ( 3 , unit ) and not IsInArea ( unit , InsideBaseArea ) then
20531: LD_INT 3
20533: PPUSH
20534: LD_VAR 0 3
20538: PPUSH
20539: CALL_OW 292
20543: PUSH
20544: LD_VAR 0 3
20548: PPUSH
20549: LD_INT 19
20551: PPUSH
20552: CALL_OW 308
20556: NOT
20557: AND
20558: IFFALSE 20633
// begin dial_ConvoyDialogBlocker = true ;
20560: LD_ADDR_EXP 12
20564: PUSH
20565: LD_INT 1
20567: ST_TO_ADDR
// DialogueOn ;
20568: CALL_OW 6
// speaker = UnitFilter ( convoyTeam , [ f_type , unit_human ] ) [ 1 ] ;
20572: LD_ADDR_VAR 0 2
20576: PUSH
20577: LD_EXP 63
20581: PPUSH
20582: LD_INT 21
20584: PUSH
20585: LD_INT 1
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PPUSH
20592: CALL_OW 72
20596: PUSH
20597: LD_INT 1
20599: ARRAY
20600: ST_TO_ADDR
// Say ( speaker , DTruck-Sol1-1 ) ;
20601: LD_VAR 0 2
20605: PPUSH
20606: LD_STRING DTruck-Sol1-1
20608: PPUSH
20609: CALL_OW 88
// Say ( Burlak , DTruck-Bur-1 ) ;
20613: LD_EXP 39
20617: PPUSH
20618: LD_STRING DTruck-Bur-1
20620: PPUSH
20621: CALL_OW 88
// DialogueOff ;
20625: CALL_OW 7
// exit ;
20629: POP
20630: POP
20631: GO 20637
// end ;
20633: GO 20528
20635: POP
20636: POP
// end ;
20637: PPOPN 3
20639: END
// every 0 0$1 trigger timeToAttack >= vsevolodSaveTime do
20640: LD_EXP 26
20644: PUSH
20645: LD_EXP 38
20649: GREATEREQUAL
20650: IFFALSE 20689
20652: GO 20654
20654: DISABLE
// begin PrepareAttack ;
20655: CALL 4204 0 0
// ComAgressiveMove ( attackTeam , 60 , 41 ) ;
20659: LD_EXP 64
20663: PPUSH
20664: LD_INT 60
20666: PPUSH
20667: LD_INT 41
20669: PPUSH
20670: CALL_OW 114
// AddComAgressiveMove ( attackTeam , 107 , 125 ) ;
20674: LD_EXP 64
20678: PPUSH
20679: LD_INT 107
20681: PPUSH
20682: LD_INT 125
20684: PPUSH
20685: CALL_OW 174
// end ;
20689: END
// every 1 trigger not savedVsevolod and GetLives ( Vsevolod ) <= 500 do
20690: LD_EXP 19
20694: NOT
20695: PUSH
20696: LD_EXP 51
20700: PPUSH
20701: CALL_OW 256
20705: PUSH
20706: LD_INT 500
20708: LESSEQUAL
20709: AND
20710: IFFALSE 20735
20712: GO 20714
20714: DISABLE
// begin DialogueOn ;
20715: CALL_OW 6
// SayRadio ( Vsevolod , DDieVsev2-Vse-1 ) ;
20719: LD_EXP 51
20723: PPUSH
20724: LD_STRING DDieVsev2-Vse-1
20726: PPUSH
20727: CALL_OW 94
// DialogueOff ;
20731: CALL_OW 7
// end ;
20735: END
// export function Dial_ResearchTauField ; var speaker , sci , randomTalkDialog ; begin
20736: LD_INT 0
20738: PPUSH
20739: PPUSH
20740: PPUSH
20741: PPUSH
// DialogueOn ;
20742: CALL_OW 6
// if IsOK ( Petrosyan ) then
20746: LD_EXP 43
20750: PPUSH
20751: CALL_OW 302
20755: IFFALSE 20771
// Say ( Petrosyan , DStasis-Pty-1 ) else
20757: LD_EXP 43
20761: PPUSH
20762: LD_STRING DStasis-Pty-1
20764: PPUSH
20765: CALL_OW 88
20769: GO 20993
// if IsOK ( Dolgov ) then
20771: LD_EXP 45
20775: PPUSH
20776: CALL_OW 302
20780: IFFALSE 20796
// Say ( Dolgov , DStasis-Dol-1 ) else
20782: LD_EXP 45
20786: PPUSH
20787: LD_STRING DStasis-Dol-1
20789: PPUSH
20790: CALL_OW 88
20794: GO 20993
// begin sci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] , [ f_nation , nation_russian ] ] ) diff Burlak ;
20796: LD_ADDR_VAR 0 3
20800: PUSH
20801: LD_INT 22
20803: PUSH
20804: LD_INT 3
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 21
20813: PUSH
20814: LD_INT 1
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 50
20823: PUSH
20824: EMPTY
20825: LIST
20826: PUSH
20827: LD_INT 26
20829: PUSH
20830: LD_INT 1
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 25
20839: PUSH
20840: LD_INT 4
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 23
20849: PUSH
20850: LD_INT 3
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: PPUSH
20865: CALL_OW 69
20869: PUSH
20870: LD_EXP 39
20874: DIFF
20875: ST_TO_ADDR
// if not sci then
20876: LD_VAR 0 3
20880: NOT
20881: IFFALSE 20952
// sci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Burlak ;
20883: LD_ADDR_VAR 0 3
20887: PUSH
20888: LD_INT 22
20890: PUSH
20891: LD_INT 3
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 21
20900: PUSH
20901: LD_INT 1
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 50
20910: PUSH
20911: EMPTY
20912: LIST
20913: PUSH
20914: LD_INT 26
20916: PUSH
20917: LD_INT 1
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 23
20926: PUSH
20927: LD_INT 3
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: PPUSH
20941: CALL_OW 69
20945: PUSH
20946: LD_EXP 39
20950: DIFF
20951: ST_TO_ADDR
// if sci then
20952: LD_VAR 0 3
20956: IFFALSE 20993
// begin speaker = DialogRandom ( sci , DStasis-RSol1-1 ,  , false , true ) ;
20958: LD_ADDR_VAR 0 2
20962: PUSH
20963: LD_VAR 0 3
20967: PPUSH
20968: LD_STRING DStasis-RSol1-1
20970: PPUSH
20971: LD_STRING 
20973: PPUSH
20974: LD_INT 0
20976: PPUSH
20977: LD_INT 1
20979: PPUSH
20980: CALL 12102 0 5
20984: ST_TO_ADDR
// randomTalkDialog = true ;
20985: LD_ADDR_VAR 0 4
20989: PUSH
20990: LD_INT 1
20992: ST_TO_ADDR
// end ; end ; if IsOK ( Petrosyan ) or IsOK ( Dolgov ) or randomTalkDialog then
20993: LD_EXP 43
20997: PPUSH
20998: CALL_OW 302
21002: PUSH
21003: LD_EXP 45
21007: PPUSH
21008: CALL_OW 302
21012: OR
21013: PUSH
21014: LD_VAR 0 4
21018: OR
21019: IFFALSE 21116
// begin Say ( Burlak , DStasis-Bur-1 ) ;
21021: LD_EXP 39
21025: PPUSH
21026: LD_STRING DStasis-Bur-1
21028: PPUSH
21029: CALL_OW 88
// if IsOK ( Petrosyan ) then
21033: LD_EXP 43
21037: PPUSH
21038: CALL_OW 302
21042: IFFALSE 21058
// Say ( Petrosyan , DStasis-Pty-2 ) else
21044: LD_EXP 43
21048: PPUSH
21049: LD_STRING DStasis-Pty-2
21051: PPUSH
21052: CALL_OW 88
21056: GO 21104
// if IsOK ( Dolgov ) then
21058: LD_EXP 45
21062: PPUSH
21063: CALL_OW 302
21067: IFFALSE 21083
// Say ( Dolgov , DStasis-Dol-2 ) else
21069: LD_EXP 45
21073: PPUSH
21074: LD_STRING DStasis-Dol-2
21076: PPUSH
21077: CALL_OW 88
21081: GO 21104
// DialogRandom ( speaker , DStasis-RSol1-2 ,  , false , true ) ;
21083: LD_VAR 0 2
21087: PPUSH
21088: LD_STRING DStasis-RSol1-2
21090: PPUSH
21091: LD_STRING 
21093: PPUSH
21094: LD_INT 0
21096: PPUSH
21097: LD_INT 1
21099: PPUSH
21100: CALL 12102 0 5
// Say ( Burlak , DStasis-Bur-2 ) ;
21104: LD_EXP 39
21108: PPUSH
21109: LD_STRING DStasis-Bur-2
21111: PPUSH
21112: CALL_OW 88
// end ; DialogueOff ;
21116: CALL_OW 7
// if GetTech ( tech_SibEng , 3 ) = state_researched then
21120: LD_INT 22
21122: PPUSH
21123: LD_INT 3
21125: PPUSH
21126: CALL_OW 321
21130: PUSH
21131: LD_INT 2
21133: EQUAL
21134: IFFALSE 21143
// ChangeMissionObjectives ( MOutResearch ) ;
21136: LD_STRING MOutResearch
21138: PPUSH
21139: CALL_OW 337
// end ;
21143: LD_VAR 0 1
21147: RET
// every 0 0$01 trigger GetTech ( tech_SibEng , 3 ) = state_researched and GetTech ( tech_TauField , 3 ) = state_researched and not dial_EndMissionDialogBlocker do var depots , depot , sibCounter ;
21148: LD_INT 22
21150: PPUSH
21151: LD_INT 3
21153: PPUSH
21154: CALL_OW 321
21158: PUSH
21159: LD_INT 2
21161: EQUAL
21162: PUSH
21163: LD_INT 30
21165: PPUSH
21166: LD_INT 3
21168: PPUSH
21169: CALL_OW 321
21173: PUSH
21174: LD_INT 2
21176: EQUAL
21177: AND
21178: PUSH
21179: LD_EXP 14
21183: NOT
21184: AND
21185: IFFALSE 21528
21187: GO 21189
21189: DISABLE
21190: LD_INT 0
21192: PPUSH
21193: PPUSH
21194: PPUSH
// begin wait ( 0 0$15 ) ;
21195: LD_INT 525
21197: PPUSH
21198: CALL_OW 67
// depots = FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21202: LD_ADDR_VAR 0 1
21206: PUSH
21207: LD_INT 22
21209: PUSH
21210: LD_INT 3
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 50
21219: PUSH
21220: EMPTY
21221: LIST
21222: PUSH
21223: LD_INT 21
21225: PUSH
21226: LD_INT 3
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 2
21235: PUSH
21236: LD_INT 30
21238: PUSH
21239: LD_INT 0
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 30
21248: PUSH
21249: LD_INT 1
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: LIST
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: PPUSH
21267: CALL_OW 69
21271: ST_TO_ADDR
// sibCounter = 0 ;
21272: LD_ADDR_VAR 0 3
21276: PUSH
21277: LD_INT 0
21279: ST_TO_ADDR
// for depot in depots do
21280: LD_ADDR_VAR 0 2
21284: PUSH
21285: LD_VAR 0 1
21289: PUSH
21290: FOR_IN
21291: IFFALSE 21324
// sibCounter = sibCounter + GetResourceType ( GetBase ( depot ) , mat_siberit ) ;
21293: LD_ADDR_VAR 0 3
21297: PUSH
21298: LD_VAR 0 3
21302: PUSH
21303: LD_VAR 0 2
21307: PPUSH
21308: CALL_OW 274
21312: PPUSH
21313: LD_INT 3
21315: PPUSH
21316: CALL_OW 275
21320: PLUS
21321: ST_TO_ADDR
21322: GO 21290
21324: POP
21325: POP
// if sibCounter >= 100 then
21326: LD_VAR 0 3
21330: PUSH
21331: LD_INT 100
21333: GREATEREQUAL
21334: IFFALSE 21520
// begin ChangeMissionObjectives ( MOutMine ) ;
21336: LD_STRING MOutMine
21338: PPUSH
21339: CALL_OW 337
// dial_EndMissionDialogBlocker = true ;
21343: LD_ADDR_EXP 14
21347: PUSH
21348: LD_INT 1
21350: ST_TO_ADDR
// DialogueOn ;
21351: CALL_OW 6
// SayRadio ( Platonov , DNextMiss1-Pla-1 ) ;
21355: LD_EXP 47
21359: PPUSH
21360: LD_STRING DNextMiss1-Pla-1
21362: PPUSH
21363: CALL_OW 94
// if not savedVsevolod then
21367: LD_EXP 19
21371: NOT
21372: IFFALSE 21418
// begin SayRadio ( Platonov , DNextMiss2-Pla-1 ) ;
21374: LD_EXP 47
21378: PPUSH
21379: LD_STRING DNextMiss2-Pla-1
21381: PPUSH
21382: CALL_OW 94
// Say ( Burlak , DNextMiss4-Bur-1 ) ;
21386: LD_EXP 39
21390: PPUSH
21391: LD_STRING DNextMiss4-Bur-1
21393: PPUSH
21394: CALL_OW 88
// SayRadio ( Vsevolod , DDieVsev1-Vse-1 ) ;
21398: LD_EXP 51
21402: PPUSH
21403: LD_STRING DDieVsev1-Vse-1
21405: PPUSH
21406: CALL_OW 94
// ForceFinishGame ;
21410: CALL 22201 0 0
// exit ;
21414: GO 21528
// end else
21416: GO 21454
// begin SayRadio ( Platonov , DNextMiss3-Pla-1 ) ;
21418: LD_EXP 47
21422: PPUSH
21423: LD_STRING DNextMiss3-Pla-1
21425: PPUSH
21426: CALL_OW 94
// SayRadio ( Platonov , DNextMiss4-Pla-1 ) ;
21430: LD_EXP 47
21434: PPUSH
21435: LD_STRING DNextMiss4-Pla-1
21437: PPUSH
21438: CALL_OW 94
// Say ( Burlak , DNextMiss4-Bur-1 ) ;
21442: LD_EXP 39
21446: PPUSH
21447: LD_STRING DNextMiss4-Bur-1
21449: PPUSH
21450: CALL_OW 88
// end ; DialogueOff ;
21454: CALL_OW 7
// SelectCharacters ;
21458: CALL 15376 0 0
// canSpawnReinforces = true ;
21462: LD_ADDR_EXP 23
21466: PUSH
21467: LD_INT 1
21469: ST_TO_ADDR
// canRemoveUnits = true ;
21470: LD_ADDR_EXP 25
21474: PUSH
21475: LD_INT 1
21477: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_friend , true ) ;
21478: LD_INT 1
21480: PPUSH
21481: LD_INT 6
21483: PPUSH
21484: LD_INT 1
21486: PPUSH
21487: LD_INT 1
21489: PPUSH
21490: CALL_OW 80
// SetAreaMapShow ( ExitMapArea , 1 ) ;
21494: LD_INT 14
21496: PPUSH
21497: LD_INT 1
21499: PPUSH
21500: CALL_OW 424
// ChangeMissionObjectives ( MOutResearch ) ;
21504: LD_STRING MOutResearch
21506: PPUSH
21507: CALL_OW 337
// ChangeMissionObjectives ( MCars ) ;
21511: LD_STRING MCars
21513: PPUSH
21514: CALL_OW 337
// exit ;
21518: GO 21528
// end ; wait ( 0 0$10 ) ;
21520: LD_INT 350
21522: PPUSH
21523: CALL_OW 67
// enable ;
21527: ENABLE
// end ;
21528: PPOPN 3
21530: END
// every 0 0$1 trigger canRemoveUnits do var un ;
21531: LD_EXP 25
21535: IFFALSE 21645
21537: GO 21539
21539: DISABLE
21540: LD_INT 0
21542: PPUSH
// begin enable ;
21543: ENABLE
// SetLives ( Vsevolod , 1000 ) ;
21544: LD_EXP 51
21548: PPUSH
21549: LD_INT 1000
21551: PPUSH
21552: CALL_OW 234
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , ExitMapArea ) ;
21556: LD_INT 22
21558: PUSH
21559: LD_INT 6
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 21
21568: PUSH
21569: LD_INT 1
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PPUSH
21580: CALL_OW 69
21584: PPUSH
21585: LD_INT 14
21587: PPUSH
21588: CALL_OW 113
// for un in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
21592: LD_ADDR_VAR 0 1
21596: PUSH
21597: LD_INT 14
21599: PPUSH
21600: LD_INT 22
21602: PUSH
21603: LD_INT 6
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 21
21612: PUSH
21613: LD_INT 1
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PPUSH
21624: CALL_OW 70
21628: PUSH
21629: FOR_IN
21630: IFFALSE 21643
// RemoveUnit ( un ) ;
21632: LD_VAR 0 1
21636: PPUSH
21637: CALL_OW 64
21641: GO 21629
21643: POP
21644: POP
// end ;
21645: PPOPN 1
21647: END
// every 1 trigger not canGoNorth and FilterUnitsInArea ( NorthBlockerArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do var unit ;
21648: LD_EXP 21
21652: NOT
21653: PUSH
21654: LD_INT 15
21656: PPUSH
21657: LD_INT 22
21659: PUSH
21660: LD_INT 3
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: LD_INT 50
21669: PUSH
21670: EMPTY
21671: LIST
21672: PUSH
21673: LD_INT 2
21675: PUSH
21676: LD_INT 21
21678: PUSH
21679: LD_INT 1
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 21
21688: PUSH
21689: LD_INT 2
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: LIST
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: LIST
21705: PPUSH
21706: CALL_OW 70
21710: AND
21711: IFFALSE 21843
21713: GO 21715
21715: DISABLE
21716: LD_INT 0
21718: PPUSH
// begin enable ;
21719: ENABLE
// for unit in FilterUnitsInArea ( NorthBlockerArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
21720: LD_ADDR_VAR 0 1
21724: PUSH
21725: LD_INT 15
21727: PPUSH
21728: LD_INT 22
21730: PUSH
21731: LD_INT 3
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: LD_INT 50
21740: PUSH
21741: EMPTY
21742: LIST
21743: PUSH
21744: LD_INT 2
21746: PUSH
21747: LD_INT 21
21749: PUSH
21750: LD_INT 1
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 21
21759: PUSH
21760: LD_INT 2
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: LIST
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: LIST
21776: PPUSH
21777: CALL_OW 70
21781: PUSH
21782: FOR_IN
21783: IFFALSE 21799
// ComMoveToArea ( unit , NorthBlockerReturnArea ) ;
21785: LD_VAR 0 1
21789: PPUSH
21790: LD_INT 16
21792: PPUSH
21793: CALL_OW 113
21797: GO 21782
21799: POP
21800: POP
// if not dial_NorthBlocker then
21801: LD_EXP 13
21805: NOT
21806: IFFALSE 21843
// begin dial_NorthBlocker = true ;
21808: LD_ADDR_EXP 13
21812: PUSH
21813: LD_INT 1
21815: ST_TO_ADDR
// Say ( Burlak , DMoveNorth-Bur-1 ) ;
21816: LD_EXP 39
21820: PPUSH
21821: LD_STRING DMoveNorth-Bur-1
21823: PPUSH
21824: CALL_OW 88
// wait ( 0 0$5 ) ;
21828: LD_INT 175
21830: PPUSH
21831: CALL_OW 67
// dial_NorthBlocker = false ;
21835: LD_ADDR_EXP 13
21839: PUSH
21840: LD_INT 0
21842: ST_TO_ADDR
// end ; end ;
21843: PPOPN 1
21845: END
// every 2 2$30 trigger canSpawnReinforces do
21846: LD_EXP 23
21850: IFFALSE 21906
21852: GO 21854
21854: DISABLE
// begin SpawnPlatonovReinforces ;
21855: CALL 2897 0 0
// CenterOnXY ( 134 , 233 ) ;
21859: LD_INT 134
21861: PPUSH
21862: LD_INT 233
21864: PPUSH
21865: CALL_OW 84
// if Kirilenkova and IsPlaced ( Kirilenkova ) then
21869: LD_EXP 48
21873: PUSH
21874: LD_EXP 48
21878: PPUSH
21879: CALL_OW 305
21883: AND
21884: IFFALSE 21898
// Say ( Kirilenkova , DMeetKirilenkova-Kir-1 ) ;
21886: LD_EXP 48
21890: PPUSH
21891: LD_STRING DMeetKirilenkova-Kir-1
21893: PPUSH
21894: CALL_OW 88
// canEndMission = true ;
21898: LD_ADDR_EXP 24
21902: PUSH
21903: LD_INT 1
21905: ST_TO_ADDR
// end ; end_of_file
21906: END
// export function Lose_Burlak ; begin
21907: LD_INT 0
21909: PPUSH
// YouLost ( Burlak ) ;
21910: LD_STRING Burlak
21912: PPUSH
21913: CALL_OW 104
// end ;
21917: LD_VAR 0 1
21921: RET
// export function Lose_Gleb ; begin
21922: LD_INT 0
21924: PPUSH
// SayRadio ( Platonov , DKillGleb-Pla-1 ) ;
21925: LD_EXP 47
21929: PPUSH
21930: LD_STRING DKillGleb-Pla-1
21932: PPUSH
21933: CALL_OW 94
// YouLost ( Gleb ) ;
21937: LD_STRING Gleb
21939: PPUSH
21940: CALL_OW 104
// end ;
21944: LD_VAR 0 1
21948: RET
// every 0 0$1 trigger not canEndMission and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_engineer ] , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
21949: LD_EXP 24
21953: NOT
21954: PUSH
21955: LD_INT 22
21957: PUSH
21958: LD_INT 3
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 2
21967: PUSH
21968: LD_INT 25
21970: PUSH
21971: LD_INT 2
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 30
21980: PUSH
21981: LD_INT 1
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 30
21990: PUSH
21991: LD_INT 0
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 30
22000: PUSH
22001: LD_INT 6
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 30
22010: PUSH
22011: LD_INT 7
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 30
22020: PUSH
22021: LD_INT 8
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PPUSH
22041: CALL_OW 69
22045: NOT
22046: AND
22047: IFFALSE 22059
22049: GO 22051
22051: DISABLE
// YouLost ( NoDepotNoEngineerNoLab ) ;
22052: LD_STRING NoDepotNoEngineerNoLab
22054: PPUSH
22055: CALL_OW 104
22059: END
// export function Lose_NoDepotNoEngineerNoLab ; begin
22060: LD_INT 0
22062: PPUSH
// YouLost ( NoDepotNoEngineerNoLab ) ;
22063: LD_STRING NoDepotNoEngineerNoLab
22065: PPUSH
22066: CALL_OW 104
// end ; end_of_file
22070: LD_VAR 0 1
22074: RET
// every 0 0$5 trigger canEndMission and not FilterUnitsExceptArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_and , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ] ) do var units , qr ;
22075: LD_EXP 24
22079: PUSH
22080: LD_INT 14
22082: PPUSH
22083: LD_INT 22
22085: PUSH
22086: LD_INT 3
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 50
22095: PUSH
22096: EMPTY
22097: LIST
22098: PUSH
22099: LD_INT 2
22101: PUSH
22102: LD_INT 21
22104: PUSH
22105: LD_INT 1
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 1
22114: PUSH
22115: LD_INT 21
22117: PUSH
22118: LD_INT 2
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 59
22127: PUSH
22128: EMPTY
22129: LIST
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: LIST
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: LIST
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: LIST
22145: PPUSH
22146: CALL_OW 71
22150: NOT
22151: AND
22152: IFFALSE 22198
22154: GO 22156
22156: DISABLE
22157: LD_INT 0
22159: PPUSH
22160: PPUSH
// begin case Query ( QEndGame ) of 1 :
22161: LD_STRING QEndGame
22163: PPUSH
22164: CALL_OW 97
22168: PUSH
22169: LD_INT 1
22171: DOUBLE
22172: EQUAL
22173: IFTRUE 22177
22175: GO 22196
22177: POP
// begin SetRewards ;
22178: CALL 22225 0 0
// SavePlayerCharacters ;
22182: CALL 22389 0 0
// SaveGlobalVariables ;
22186: CALL 22778 0 0
// YouWin ;
22190: CALL_OW 103
// end ; end ;
22194: GO 22197
22196: POP
// enable ;
22197: ENABLE
// end ;
22198: PPOPN 2
22200: END
// export function ForceFinishGame ; begin
22201: LD_INT 0
22203: PPUSH
// SetRewards ;
22204: CALL 22225 0 0
// SavePlayerCharacters ;
22208: CALL 22389 0 0
// SaveGlobalVariables ;
22212: CALL 22778 0 0
// YouWin ;
22216: CALL_OW 103
// end ;
22220: LD_VAR 0 1
22224: RET
// function SetRewards ; begin
22225: LD_INT 0
22227: PPUSH
// if savedVsevolod then
22228: LD_EXP 19
22232: IFFALSE 22246
// AddMedal ( Vsevolod , 1 ) else
22234: LD_STRING Vsevolod
22236: PPUSH
22237: LD_INT 1
22239: PPUSH
22240: CALL_OW 101
22244: GO 22257
// AddMedal ( Vsevolod , - 1 ) ;
22246: LD_STRING Vsevolod
22248: PPUSH
22249: LD_INT 1
22251: NEG
22252: PPUSH
22253: CALL_OW 101
// if not lostAgainBase then
22257: LD_EXP 17
22261: NOT
22262: IFFALSE 22276
// AddMedal ( Ovsyenko , 1 ) else
22264: LD_STRING Ovsyenko
22266: PPUSH
22267: LD_INT 1
22269: PPUSH
22270: CALL_OW 101
22274: GO 22287
// AddMedal ( Ovsyenko , - 1 ) ;
22276: LD_STRING Ovsyenko
22278: PPUSH
22279: LD_INT 1
22281: NEG
22282: PPUSH
22283: CALL_OW 101
// if GetTech ( tech_MatPred , 3 ) = state_researched then
22287: LD_INT 9
22289: PPUSH
22290: LD_INT 3
22292: PPUSH
22293: CALL_OW 321
22297: PUSH
22298: LD_INT 2
22300: EQUAL
22301: IFFALSE 22315
// AddMedal ( Prediction , 1 ) else
22303: LD_STRING Prediction
22305: PPUSH
22306: LD_INT 1
22308: PPUSH
22309: CALL_OW 101
22313: GO 22326
// AddMedal ( Prediction , - 1 ) ;
22315: LD_STRING Prediction
22317: PPUSH
22318: LD_INT 1
22320: NEG
22321: PPUSH
22322: CALL_OW 101
// GiveMedals ( Main ) ;
22326: LD_STRING Main
22328: PPUSH
22329: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ) ;
22333: LD_INT 22
22335: PUSH
22336: LD_INT 3
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 21
22345: PUSH
22346: LD_INT 1
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: LD_INT 23
22355: PUSH
22356: LD_INT 3
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 50
22365: PUSH
22366: EMPTY
22367: LIST
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: PPUSH
22375: CALL_OW 69
22379: PPUSH
22380: CALL_OW 43
// end ;
22384: LD_VAR 0 1
22388: RET
// function SavePlayerCharacters ; var randomsToSave ; begin
22389: LD_INT 0
22391: PPUSH
22392: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
22393: LD_EXP 39
22397: PPUSH
22398: LD_STRING Burlak
22400: PPUSH
22401: LD_INT 3
22403: PPUSH
22404: CALL 11903 0 3
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
22408: LD_EXP 40
22412: PPUSH
22413: LD_STRING Karamazov
22415: PPUSH
22416: LD_INT 3
22418: PPUSH
22419: CALL 11903 0 3
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
22423: LD_EXP 41
22427: PPUSH
22428: LD_STRING Petrovova
22430: PPUSH
22431: LD_INT 3
22433: PPUSH
22434: CALL 11903 0 3
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
22438: LD_EXP 42
22442: PPUSH
22443: LD_STRING Gleb
22445: PPUSH
22446: LD_INT 3
22448: PPUSH
22449: CALL 11903 0 3
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
22453: LD_EXP 43
22457: PPUSH
22458: LD_STRING Petrosyan
22460: PPUSH
22461: LD_INT 3
22463: PPUSH
22464: CALL 11903 0 3
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
22468: LD_EXP 45
22472: PPUSH
22473: LD_STRING Dolgov
22475: PPUSH
22476: LD_INT 3
22478: PPUSH
22479: CALL 11903 0 3
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
22483: LD_EXP 46
22487: PPUSH
22488: LD_STRING Lipshchin
22490: PPUSH
22491: LD_INT 3
22493: PPUSH
22494: CALL 11903 0 3
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
22498: LD_EXP 44
22502: PPUSH
22503: LD_STRING Titov
22505: PPUSH
22506: LD_INT 3
22508: PPUSH
22509: CALL 11903 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
22513: LD_EXP 48
22517: PPUSH
22518: LD_STRING Kirilenkova
22520: PPUSH
22521: LD_INT 3
22523: PPUSH
22524: CALL 11903 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
22528: LD_EXP 49
22532: PPUSH
22533: LD_STRING Belkov
22535: PPUSH
22536: LD_INT 3
22538: PPUSH
22539: CALL 11903 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
22543: LD_EXP 50
22547: PPUSH
22548: LD_STRING Belkov2
22550: PPUSH
22551: LD_INT 3
22553: PPUSH
22554: CALL 11903 0 3
// ExtSaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
22558: LD_INT 22
22560: PUSH
22561: LD_INT 3
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 21
22570: PUSH
22571: LD_INT 1
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 2
22580: PUSH
22581: LD_INT 25
22583: PUSH
22584: LD_INT 12
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 25
22593: PUSH
22594: LD_INT 16
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 25
22603: PUSH
22604: LD_INT 15
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: LIST
22621: PPUSH
22622: CALL_OW 69
22626: PPUSH
22627: LD_STRING other_apemans
22629: PPUSH
22630: LD_INT 3
22632: PPUSH
22633: CALL 11959 0 3
// randomsToSave = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 ] ;
22637: LD_ADDR_VAR 0 2
22641: PUSH
22642: LD_INT 22
22644: PUSH
22645: LD_INT 3
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 21
22654: PUSH
22655: LD_INT 1
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 23
22664: PUSH
22665: LD_INT 3
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 50
22674: PUSH
22675: EMPTY
22676: LIST
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: PPUSH
22684: CALL_OW 69
22688: PUSH
22689: LD_EXP 39
22693: PUSH
22694: LD_EXP 40
22698: PUSH
22699: LD_EXP 41
22703: PUSH
22704: LD_EXP 42
22708: PUSH
22709: LD_EXP 43
22713: PUSH
22714: LD_EXP 44
22718: PUSH
22719: LD_EXP 45
22723: PUSH
22724: LD_EXP 46
22728: PUSH
22729: LD_EXP 48
22733: PUSH
22734: LD_EXP 49
22738: PUSH
22739: LD_EXP 50
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: DIFF
22757: ST_TO_ADDR
// ExtSaveCharacters ( randomsToSave , other_survivors , 3 ) ;
22758: LD_VAR 0 2
22762: PPUSH
22763: LD_STRING other_survivors
22765: PPUSH
22766: LD_INT 3
22768: PPUSH
22769: CALL 11959 0 3
// end ;
22773: LD_VAR 0 1
22777: RET
// function SaveGlobalVariables ; var i , driver , driverShortName ; begin
22778: LD_INT 0
22780: PPUSH
22781: PPUSH
22782: PPUSH
22783: PPUSH
// resourcesFrom06 = [ ] ;
22784: LD_ADDR_EXP 8
22788: PUSH
22789: EMPTY
22790: ST_TO_ADDR
// SaveVariable ( techMatPredStatus , 06_TechMatPredStatus_1 ) ;
22791: LD_EXP 6
22795: PPUSH
22796: LD_STRING 06_TechMatPredStatus_1
22798: PPUSH
22799: CALL_OW 39
// for i in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_occupied ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , 89 ] ] ] ) do
22803: LD_ADDR_VAR 0 2
22807: PUSH
22808: LD_INT 14
22810: PPUSH
22811: LD_INT 22
22813: PUSH
22814: LD_INT 3
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 59
22823: PUSH
22824: EMPTY
22825: LIST
22826: PUSH
22827: LD_INT 2
22829: PUSH
22830: LD_INT 34
22832: PUSH
22833: LD_INT 51
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 34
22842: PUSH
22843: LD_INT 32
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 34
22852: PUSH
22853: LD_INT 12
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 34
22862: PUSH
22863: LD_INT 89
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: LIST
22881: PPUSH
22882: CALL_OW 70
22886: PUSH
22887: FOR_IN
22888: IFFALSE 22916
// resourcesFrom06 = resourcesFrom06 ^ [ GetMultiCargo ( i ) ] ;
22890: LD_ADDR_EXP 8
22894: PUSH
22895: LD_EXP 8
22899: PUSH
22900: LD_VAR 0 2
22904: PPUSH
22905: CALL 15029 0 1
22909: PUSH
22910: EMPTY
22911: LIST
22912: ADD
22913: ST_TO_ADDR
22914: GO 22887
22916: POP
22917: POP
// SaveVariable ( resourcesFrom06 , 06_ResourcesInCargo_3 ) ;
22918: LD_EXP 8
22922: PPUSH
22923: LD_STRING 06_ResourcesInCargo_3
22925: PPUSH
22926: CALL_OW 39
// for i in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ) do
22930: LD_ADDR_VAR 0 2
22934: PUSH
22935: LD_INT 14
22937: PPUSH
22938: LD_INT 22
22940: PUSH
22941: LD_INT 3
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 21
22950: PUSH
22951: LD_INT 2
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 59
22960: PUSH
22961: EMPTY
22962: LIST
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: LIST
22968: PPUSH
22969: CALL_OW 70
22973: PUSH
22974: FOR_IN
22975: IFFALSE 23379
// begin driver = UnitsInside ( i ) [ 1 ] ;
22977: LD_ADDR_VAR 0 3
22981: PUSH
22982: LD_VAR 0 2
22986: PPUSH
22987: CALL_OW 313
22991: PUSH
22992: LD_INT 1
22994: ARRAY
22995: ST_TO_ADDR
// if driver = Burlak then
22996: LD_VAR 0 3
23000: PUSH
23001: LD_EXP 39
23005: EQUAL
23006: IFFALSE 23016
// driverShortName = Bur ;
23008: LD_ADDR_VAR 0 4
23012: PUSH
23013: LD_STRING Bur
23015: ST_TO_ADDR
// if driver = Karamazov then
23016: LD_VAR 0 3
23020: PUSH
23021: LD_EXP 40
23025: EQUAL
23026: IFFALSE 23036
// driverShortName = Kar ;
23028: LD_ADDR_VAR 0 4
23032: PUSH
23033: LD_STRING Kar
23035: ST_TO_ADDR
// if driver = Petrovova then
23036: LD_VAR 0 3
23040: PUSH
23041: LD_EXP 41
23045: EQUAL
23046: IFFALSE 23056
// driverShortName = Ptr ;
23048: LD_ADDR_VAR 0 4
23052: PUSH
23053: LD_STRING Ptr
23055: ST_TO_ADDR
// if driver = Gleb then
23056: LD_VAR 0 3
23060: PUSH
23061: LD_EXP 42
23065: EQUAL
23066: IFFALSE 23076
// driverShortName = Glb ;
23068: LD_ADDR_VAR 0 4
23072: PUSH
23073: LD_STRING Glb
23075: ST_TO_ADDR
// if driver = Petrosyan then
23076: LD_VAR 0 3
23080: PUSH
23081: LD_EXP 43
23085: EQUAL
23086: IFFALSE 23096
// driverShortName = Pet ;
23088: LD_ADDR_VAR 0 4
23092: PUSH
23093: LD_STRING Pet
23095: ST_TO_ADDR
// if driver = Dolgov then
23096: LD_VAR 0 3
23100: PUSH
23101: LD_EXP 45
23105: EQUAL
23106: IFFALSE 23116
// driverShortName = Dol ;
23108: LD_ADDR_VAR 0 4
23112: PUSH
23113: LD_STRING Dol
23115: ST_TO_ADDR
// if driver = Lipshchin then
23116: LD_VAR 0 3
23120: PUSH
23121: LD_EXP 46
23125: EQUAL
23126: IFFALSE 23136
// driverShortName = Lip ;
23128: LD_ADDR_VAR 0 4
23132: PUSH
23133: LD_STRING Lip
23135: ST_TO_ADDR
// if driver = Titov then
23136: LD_VAR 0 3
23140: PUSH
23141: LD_EXP 44
23145: EQUAL
23146: IFFALSE 23156
// driverShortName = Tit ;
23148: LD_ADDR_VAR 0 4
23152: PUSH
23153: LD_STRING Tit
23155: ST_TO_ADDR
// if driver = Kirilenkova then
23156: LD_VAR 0 3
23160: PUSH
23161: LD_EXP 48
23165: EQUAL
23166: IFFALSE 23176
// driverShortName = Kir ;
23168: LD_ADDR_VAR 0 4
23172: PUSH
23173: LD_STRING Kir
23175: ST_TO_ADDR
// if driver = Belkov then
23176: LD_VAR 0 3
23180: PUSH
23181: LD_EXP 49
23185: EQUAL
23186: IFFALSE 23196
// driverShortName = Bel ;
23188: LD_ADDR_VAR 0 4
23192: PUSH
23193: LD_STRING Bel
23195: ST_TO_ADDR
// if driver = Belkov2 then
23196: LD_VAR 0 3
23200: PUSH
23201: LD_EXP 50
23205: EQUAL
23206: IFFALSE 23216
// driverShortName = Bel2 ;
23208: LD_ADDR_VAR 0 4
23212: PUSH
23213: LD_STRING Bel2
23215: ST_TO_ADDR
// if not driver in [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 ] then
23216: LD_VAR 0 3
23220: PUSH
23221: LD_EXP 39
23225: PUSH
23226: LD_EXP 40
23230: PUSH
23231: LD_EXP 41
23235: PUSH
23236: LD_EXP 42
23240: PUSH
23241: LD_EXP 43
23245: PUSH
23246: LD_EXP 44
23250: PUSH
23251: LD_EXP 45
23255: PUSH
23256: LD_EXP 46
23260: PUSH
23261: LD_EXP 48
23265: PUSH
23266: LD_EXP 49
23270: PUSH
23271: LD_EXP 50
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: IN
23289: NOT
23290: IFFALSE 23300
// driverShortName = rand ;
23292: LD_ADDR_VAR 0 4
23296: PUSH
23297: LD_STRING rand
23299: ST_TO_ADDR
// vehsFrom06 = vehsFrom06 ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , driverShortName ] ] ;
23300: LD_ADDR_EXP 7
23304: PUSH
23305: LD_EXP 7
23309: PUSH
23310: LD_VAR 0 2
23314: PPUSH
23315: CALL_OW 248
23319: PUSH
23320: LD_VAR 0 2
23324: PPUSH
23325: CALL_OW 265
23329: PUSH
23330: LD_VAR 0 2
23334: PPUSH
23335: CALL_OW 262
23339: PUSH
23340: LD_VAR 0 2
23344: PPUSH
23345: CALL_OW 263
23349: PUSH
23350: LD_VAR 0 2
23354: PPUSH
23355: CALL_OW 264
23359: PUSH
23360: LD_VAR 0 4
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: PUSH
23373: EMPTY
23374: LIST
23375: ADD
23376: ST_TO_ADDR
// end ;
23377: GO 22974
23379: POP
23380: POP
// SaveVariable ( vehsFrom06 , 06_Vehicles_2 ) ;
23381: LD_EXP 7
23385: PPUSH
23386: LD_STRING 06_Vehicles_2
23388: PPUSH
23389: CALL_OW 39
// SaveVariable ( savedVsevolod , 06_VsevolodStatus_4 ) ;
23393: LD_EXP 19
23397: PPUSH
23398: LD_STRING 06_VsevolodStatus_4
23400: PPUSH
23401: CALL_OW 39
// end ; end_of_file
23405: LD_VAR 0 1
23409: RET
// on UnitDestroyed ( unit ) do begin if unit in ovsyenkoBase then
23410: LD_VAR 0 1
23414: PUSH
23415: LD_EXP 59
23419: IN
23420: IFFALSE 23438
// ovsyenkoBase = ovsyenkoBase diff unit ;
23422: LD_ADDR_EXP 59
23426: PUSH
23427: LD_EXP 59
23431: PUSH
23432: LD_VAR 0 1
23436: DIFF
23437: ST_TO_ADDR
// if unit = Burlak then
23438: LD_VAR 0 1
23442: PUSH
23443: LD_EXP 39
23447: EQUAL
23448: IFFALSE 23454
// Lose_Burlak ;
23450: CALL 21907 0 0
// if unit = Vsevolod and GetSide ( Vsevolod ) = 3 then
23454: LD_VAR 0 1
23458: PUSH
23459: LD_EXP 51
23463: EQUAL
23464: PUSH
23465: LD_EXP 51
23469: PPUSH
23470: CALL_OW 255
23474: PUSH
23475: LD_INT 3
23477: EQUAL
23478: AND
23479: IFFALSE 23489
// savedVsevolod = false ;
23481: LD_ADDR_EXP 19
23485: PUSH
23486: LD_INT 0
23488: ST_TO_ADDR
// if unit = ovsyenko and GetSide ( ovsyenko ) = 3 then
23489: LD_VAR 0 1
23493: PUSH
23494: LD_INT 86
23496: EQUAL
23497: PUSH
23498: LD_INT 86
23500: PPUSH
23501: CALL_OW 255
23505: PUSH
23506: LD_INT 3
23508: EQUAL
23509: AND
23510: IFFALSE 23520
// lostAgainBase = true ;
23512: LD_ADDR_EXP 17
23516: PUSH
23517: LD_INT 1
23519: ST_TO_ADDR
// end ;
23520: PPOPN 1
23522: END
// on UnitDestroyed_Extra ( unit , killer_side , killer_unit ) do begin if unit = Gleb and killer_side = 3 then
23523: LD_VAR 0 1
23527: PUSH
23528: LD_EXP 42
23532: EQUAL
23533: PUSH
23534: LD_VAR 0 2
23538: PUSH
23539: LD_INT 3
23541: EQUAL
23542: AND
23543: IFFALSE 23549
// Lose_Gleb ;
23545: CALL 21922 0 0
// if unit = Vsevolod then
23549: LD_VAR 0 1
23553: PUSH
23554: LD_EXP 51
23558: EQUAL
23559: IFFALSE 23569
// savedVsevolod = false ;
23561: LD_ADDR_EXP 19
23565: PUSH
23566: LD_INT 0
23568: ST_TO_ADDR
// end ;
23569: PPOPN 3
23571: END
// on BuildingComplete ( building ) do begin end ;
23572: PPOPN 1
23574: END
// on BuildingCaptured ( building , side , human ) do begin if GetSide ( human ) = 3 and GetBType ( building ) = b_siberite_mine and not dial_SibTechsBlocker then
23575: LD_VAR 0 3
23579: PPUSH
23580: CALL_OW 255
23584: PUSH
23585: LD_INT 3
23587: EQUAL
23588: PUSH
23589: LD_VAR 0 1
23593: PPUSH
23594: CALL_OW 266
23598: PUSH
23599: LD_INT 30
23601: EQUAL
23602: AND
23603: PUSH
23604: LD_EXP 9
23608: NOT
23609: AND
23610: IFFALSE 23616
// Dial_SibTechs ;
23612: CALL 17268 0 0
// if GetSide ( human ) = 3 and GetBType ( building ) in [ b_depot , b_warehouse ] and GetResourceType ( GetBase ( building ) , mat_siberit ) > 0 and not dial_SibTechsBlocker then
23616: LD_VAR 0 3
23620: PPUSH
23621: CALL_OW 255
23625: PUSH
23626: LD_INT 3
23628: EQUAL
23629: PUSH
23630: LD_VAR 0 1
23634: PPUSH
23635: CALL_OW 266
23639: PUSH
23640: LD_INT 0
23642: PUSH
23643: LD_INT 1
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: IN
23650: AND
23651: PUSH
23652: LD_VAR 0 1
23656: PPUSH
23657: CALL_OW 274
23661: PPUSH
23662: LD_INT 3
23664: PPUSH
23665: CALL_OW 275
23669: PUSH
23670: LD_INT 0
23672: GREATER
23673: AND
23674: PUSH
23675: LD_EXP 9
23679: NOT
23680: AND
23681: IFFALSE 23687
// Dial_SibTechs ;
23683: CALL 17268 0 0
// end ;
23687: PPOPN 3
23689: END
// on Contact ( side1 , side2 ) do begin end ;
23690: PPOPN 2
23692: END
// on VehicleConstructed ( vehicle , building ) do var side , controlTowers , tmp ;
23693: LD_INT 0
23695: PPUSH
23696: PPUSH
23697: PPUSH
// begin if GetSide ( vehicle ) = 1 then
23698: LD_VAR 0 1
23702: PPUSH
23703: CALL_OW 255
23707: PUSH
23708: LD_INT 1
23710: EQUAL
23711: IFFALSE 23878
// begin controlTowers = FilterUnitsInArea ( HeadAmericanBaseArea , [ [ f_side , 1 ] , [ f_ok ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_vehicle ] ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23713: LD_ADDR_VAR 0 4
23717: PUSH
23718: LD_INT 5
23720: PPUSH
23721: LD_INT 22
23723: PUSH
23724: LD_INT 1
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 50
23733: PUSH
23734: EMPTY
23735: LIST
23736: PUSH
23737: LD_INT 2
23739: PUSH
23740: LD_INT 21
23742: PUSH
23743: LD_INT 3
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 21
23752: PUSH
23753: LD_INT 2
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 2
23767: PUSH
23768: LD_INT 30
23770: PUSH
23771: LD_INT 36
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 34
23780: PUSH
23781: LD_INT 31
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: LIST
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: PPUSH
23799: CALL_OW 70
23803: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote and controlTowers then
23804: LD_VAR 0 1
23808: PPUSH
23809: CALL_OW 263
23813: PUSH
23814: LD_INT 2
23816: EQUAL
23817: PUSH
23818: LD_VAR 0 4
23822: AND
23823: IFFALSE 23878
// begin tmp = UnitsInside ( controlTowers [ 1 ] ) ;
23825: LD_ADDR_VAR 0 5
23829: PUSH
23830: LD_VAR 0 4
23834: PUSH
23835: LD_INT 1
23837: ARRAY
23838: PPUSH
23839: CALL_OW 313
23843: ST_TO_ADDR
// if tmp then
23844: LD_VAR 0 5
23848: IFFALSE 23878
// LinkVehicleToHuman ( vehicle , tmp [ rand ( 1 , tmp ) ] ) ;
23850: LD_VAR 0 1
23854: PPUSH
23855: LD_VAR 0 5
23859: PUSH
23860: LD_INT 1
23862: PPUSH
23863: LD_VAR 0 5
23867: PPUSH
23868: CALL_OW 12
23872: ARRAY
23873: PPUSH
23874: CALL_OW 53
// end ; end ; end ;
23878: PPOPN 5
23880: END
// on ResearchComplete ( research , building ) do begin if research = tech_TauField then
23881: LD_VAR 0 1
23885: PUSH
23886: LD_INT 30
23888: EQUAL
23889: IFFALSE 23895
// Dial_ResearchTauField ;
23891: CALL 20736 0 0
// if research = tech_SibEng and GetTech ( tech_TauField , 3 ) = state_researched then
23895: LD_VAR 0 1
23899: PUSH
23900: LD_INT 22
23902: EQUAL
23903: PUSH
23904: LD_INT 30
23906: PPUSH
23907: LD_INT 3
23909: PPUSH
23910: CALL_OW 321
23914: PUSH
23915: LD_INT 2
23917: EQUAL
23918: AND
23919: IFFALSE 23928
// ChangeMissionObjectives ( MOutResearch ) ;
23921: LD_STRING MOutResearch
23923: PPUSH
23924: CALL_OW 337
// if research = tech_MatPred then
23928: LD_VAR 0 1
23932: PUSH
23933: LD_INT 9
23935: EQUAL
23936: IFFALSE 23942
// Dial_ResearchMatPredictions ;
23938: CALL 17423 0 0
// end ; end_of_file
23942: PPOPN 2
23944: END
// every 0 0$1 trigger enableVsevolodCounter do
23945: LD_EXP 22
23949: IFFALSE 23969
23951: GO 23953
23953: DISABLE
// begin enable ;
23954: ENABLE
// timeToAttack = timeToAttack + 0 0$01 ;
23955: LD_ADDR_EXP 26
23959: PUSH
23960: LD_EXP 26
23964: PUSH
23965: LD_INT 35
23967: PLUS
23968: ST_TO_ADDR
// end ; end_of_file
23969: END
// every 0 0$01 do var timer ;
23970: GO 23972
23972: DISABLE
23973: LD_INT 0
23975: PPUSH
// begin timer := 5 5$30 ;
23976: LD_ADDR_VAR 0 1
23980: PUSH
23981: LD_INT 11550
23983: ST_TO_ADDR
// repeat wait ( timer ) ;
23984: LD_VAR 0 1
23988: PPUSH
23989: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
23993: LD_INT 3
23995: PPUSH
23996: LD_INT 5
23998: PPUSH
23999: CALL_OW 12
24003: PPUSH
24004: LD_INT 20
24006: PPUSH
24007: LD_INT 1
24009: PPUSH
24010: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
24014: LD_ADDR_EXP 27
24018: PUSH
24019: LD_EXP 27
24023: PUSH
24024: LD_INT 1
24026: PLUS
24027: ST_TO_ADDR
// until cratesSpawned = 3 ;
24028: LD_EXP 27
24032: PUSH
24033: LD_INT 3
24035: EQUAL
24036: IFFALSE 23984
// end ; end_of_file
24038: PPOPN 1
24040: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
24041: LD_INT 0
24043: PPUSH
// ar_miner := 81 ;
24044: LD_ADDR_EXP 72
24048: PUSH
24049: LD_INT 81
24051: ST_TO_ADDR
// ar_crane := 88 ;
24052: LD_ADDR_EXP 71
24056: PUSH
24057: LD_INT 88
24059: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24060: LD_ADDR_EXP 66
24064: PUSH
24065: LD_INT 89
24067: ST_TO_ADDR
// us_hack := 99 ;
24068: LD_ADDR_EXP 67
24072: PUSH
24073: LD_INT 99
24075: ST_TO_ADDR
// us_artillery := 97 ;
24076: LD_ADDR_EXP 68
24080: PUSH
24081: LD_INT 97
24083: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24084: LD_ADDR_EXP 69
24088: PUSH
24089: LD_INT 91
24091: ST_TO_ADDR
// ar_mortar := 92 ;
24092: LD_ADDR_EXP 70
24096: PUSH
24097: LD_INT 92
24099: ST_TO_ADDR
// ru_radar := 98 ;
24100: LD_ADDR_EXP 65
24104: PUSH
24105: LD_INT 98
24107: ST_TO_ADDR
// tech_Artillery := 80 ;
24108: LD_ADDR_EXP 73
24112: PUSH
24113: LD_INT 80
24115: ST_TO_ADDR
// tech_RadMat := 81 ;
24116: LD_ADDR_EXP 74
24120: PUSH
24121: LD_INT 81
24123: ST_TO_ADDR
// tech_BasicTools := 82 ;
24124: LD_ADDR_EXP 75
24128: PUSH
24129: LD_INT 82
24131: ST_TO_ADDR
// tech_Cargo := 83 ;
24132: LD_ADDR_EXP 76
24136: PUSH
24137: LD_INT 83
24139: ST_TO_ADDR
// tech_Track := 84 ;
24140: LD_ADDR_EXP 77
24144: PUSH
24145: LD_INT 84
24147: ST_TO_ADDR
// tech_Crane := 85 ;
24148: LD_ADDR_EXP 78
24152: PUSH
24153: LD_INT 85
24155: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24156: LD_ADDR_EXP 79
24160: PUSH
24161: LD_INT 86
24163: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24164: LD_ADDR_EXP 80
24168: PUSH
24169: LD_INT 87
24171: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
24172: LD_ADDR_EXP 81
24176: PUSH
24177: LD_INT 88
24179: ST_TO_ADDR
// class_mastodont := 31 ;
24180: LD_ADDR_EXP 82
24184: PUSH
24185: LD_INT 31
24187: ST_TO_ADDR
// class_horse := 21 ;
24188: LD_ADDR_EXP 83
24192: PUSH
24193: LD_INT 21
24195: ST_TO_ADDR
// end ;
24196: LD_VAR 0 1
24200: RET
// every 1 do
24201: GO 24203
24203: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
24204: CALL 24041 0 0
24208: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24209: LD_INT 0
24211: PPUSH
// if p2 = 100 then
24212: LD_VAR 0 2
24216: PUSH
24217: LD_INT 100
24219: EQUAL
24220: IFFALSE 25223
// begin if not StreamModeActive then
24222: LD_EXP 84
24226: NOT
24227: IFFALSE 24237
// StreamModeActive := true ;
24229: LD_ADDR_EXP 84
24233: PUSH
24234: LD_INT 1
24236: ST_TO_ADDR
// if p3 = 0 then
24237: LD_VAR 0 3
24241: PUSH
24242: LD_INT 0
24244: EQUAL
24245: IFFALSE 24251
// InitStreamMode ;
24247: CALL 25383 0 0
// if p3 = 1 then
24251: LD_VAR 0 3
24255: PUSH
24256: LD_INT 1
24258: EQUAL
24259: IFFALSE 24269
// sRocket := true ;
24261: LD_ADDR_EXP 89
24265: PUSH
24266: LD_INT 1
24268: ST_TO_ADDR
// if p3 = 2 then
24269: LD_VAR 0 3
24273: PUSH
24274: LD_INT 2
24276: EQUAL
24277: IFFALSE 24287
// sSpeed := true ;
24279: LD_ADDR_EXP 88
24283: PUSH
24284: LD_INT 1
24286: ST_TO_ADDR
// if p3 = 3 then
24287: LD_VAR 0 3
24291: PUSH
24292: LD_INT 3
24294: EQUAL
24295: IFFALSE 24305
// sEngine := true ;
24297: LD_ADDR_EXP 90
24301: PUSH
24302: LD_INT 1
24304: ST_TO_ADDR
// if p3 = 4 then
24305: LD_VAR 0 3
24309: PUSH
24310: LD_INT 4
24312: EQUAL
24313: IFFALSE 24323
// sSpec := true ;
24315: LD_ADDR_EXP 87
24319: PUSH
24320: LD_INT 1
24322: ST_TO_ADDR
// if p3 = 5 then
24323: LD_VAR 0 3
24327: PUSH
24328: LD_INT 5
24330: EQUAL
24331: IFFALSE 24341
// sLevel := true ;
24333: LD_ADDR_EXP 91
24337: PUSH
24338: LD_INT 1
24340: ST_TO_ADDR
// if p3 = 6 then
24341: LD_VAR 0 3
24345: PUSH
24346: LD_INT 6
24348: EQUAL
24349: IFFALSE 24359
// sArmoury := true ;
24351: LD_ADDR_EXP 92
24355: PUSH
24356: LD_INT 1
24358: ST_TO_ADDR
// if p3 = 7 then
24359: LD_VAR 0 3
24363: PUSH
24364: LD_INT 7
24366: EQUAL
24367: IFFALSE 24377
// sRadar := true ;
24369: LD_ADDR_EXP 93
24373: PUSH
24374: LD_INT 1
24376: ST_TO_ADDR
// if p3 = 8 then
24377: LD_VAR 0 3
24381: PUSH
24382: LD_INT 8
24384: EQUAL
24385: IFFALSE 24395
// sBunker := true ;
24387: LD_ADDR_EXP 94
24391: PUSH
24392: LD_INT 1
24394: ST_TO_ADDR
// if p3 = 9 then
24395: LD_VAR 0 3
24399: PUSH
24400: LD_INT 9
24402: EQUAL
24403: IFFALSE 24413
// sHack := true ;
24405: LD_ADDR_EXP 95
24409: PUSH
24410: LD_INT 1
24412: ST_TO_ADDR
// if p3 = 10 then
24413: LD_VAR 0 3
24417: PUSH
24418: LD_INT 10
24420: EQUAL
24421: IFFALSE 24431
// sFire := true ;
24423: LD_ADDR_EXP 96
24427: PUSH
24428: LD_INT 1
24430: ST_TO_ADDR
// if p3 = 11 then
24431: LD_VAR 0 3
24435: PUSH
24436: LD_INT 11
24438: EQUAL
24439: IFFALSE 24449
// sRefresh := true ;
24441: LD_ADDR_EXP 97
24445: PUSH
24446: LD_INT 1
24448: ST_TO_ADDR
// if p3 = 12 then
24449: LD_VAR 0 3
24453: PUSH
24454: LD_INT 12
24456: EQUAL
24457: IFFALSE 24467
// sExp := true ;
24459: LD_ADDR_EXP 98
24463: PUSH
24464: LD_INT 1
24466: ST_TO_ADDR
// if p3 = 13 then
24467: LD_VAR 0 3
24471: PUSH
24472: LD_INT 13
24474: EQUAL
24475: IFFALSE 24485
// sDepot := true ;
24477: LD_ADDR_EXP 99
24481: PUSH
24482: LD_INT 1
24484: ST_TO_ADDR
// if p3 = 14 then
24485: LD_VAR 0 3
24489: PUSH
24490: LD_INT 14
24492: EQUAL
24493: IFFALSE 24503
// sFlag := true ;
24495: LD_ADDR_EXP 100
24499: PUSH
24500: LD_INT 1
24502: ST_TO_ADDR
// if p3 = 15 then
24503: LD_VAR 0 3
24507: PUSH
24508: LD_INT 15
24510: EQUAL
24511: IFFALSE 24521
// sKamikadze := true ;
24513: LD_ADDR_EXP 108
24517: PUSH
24518: LD_INT 1
24520: ST_TO_ADDR
// if p3 = 16 then
24521: LD_VAR 0 3
24525: PUSH
24526: LD_INT 16
24528: EQUAL
24529: IFFALSE 24539
// sTroll := true ;
24531: LD_ADDR_EXP 109
24535: PUSH
24536: LD_INT 1
24538: ST_TO_ADDR
// if p3 = 17 then
24539: LD_VAR 0 3
24543: PUSH
24544: LD_INT 17
24546: EQUAL
24547: IFFALSE 24557
// sSlow := true ;
24549: LD_ADDR_EXP 110
24553: PUSH
24554: LD_INT 1
24556: ST_TO_ADDR
// if p3 = 18 then
24557: LD_VAR 0 3
24561: PUSH
24562: LD_INT 18
24564: EQUAL
24565: IFFALSE 24575
// sLack := true ;
24567: LD_ADDR_EXP 111
24571: PUSH
24572: LD_INT 1
24574: ST_TO_ADDR
// if p3 = 19 then
24575: LD_VAR 0 3
24579: PUSH
24580: LD_INT 19
24582: EQUAL
24583: IFFALSE 24593
// sTank := true ;
24585: LD_ADDR_EXP 113
24589: PUSH
24590: LD_INT 1
24592: ST_TO_ADDR
// if p3 = 20 then
24593: LD_VAR 0 3
24597: PUSH
24598: LD_INT 20
24600: EQUAL
24601: IFFALSE 24611
// sRemote := true ;
24603: LD_ADDR_EXP 114
24607: PUSH
24608: LD_INT 1
24610: ST_TO_ADDR
// if p3 = 21 then
24611: LD_VAR 0 3
24615: PUSH
24616: LD_INT 21
24618: EQUAL
24619: IFFALSE 24629
// sPowell := true ;
24621: LD_ADDR_EXP 115
24625: PUSH
24626: LD_INT 1
24628: ST_TO_ADDR
// if p3 = 22 then
24629: LD_VAR 0 3
24633: PUSH
24634: LD_INT 22
24636: EQUAL
24637: IFFALSE 24647
// sTeleport := true ;
24639: LD_ADDR_EXP 118
24643: PUSH
24644: LD_INT 1
24646: ST_TO_ADDR
// if p3 = 23 then
24647: LD_VAR 0 3
24651: PUSH
24652: LD_INT 23
24654: EQUAL
24655: IFFALSE 24665
// sOilTower := true ;
24657: LD_ADDR_EXP 120
24661: PUSH
24662: LD_INT 1
24664: ST_TO_ADDR
// if p3 = 24 then
24665: LD_VAR 0 3
24669: PUSH
24670: LD_INT 24
24672: EQUAL
24673: IFFALSE 24683
// sShovel := true ;
24675: LD_ADDR_EXP 121
24679: PUSH
24680: LD_INT 1
24682: ST_TO_ADDR
// if p3 = 25 then
24683: LD_VAR 0 3
24687: PUSH
24688: LD_INT 25
24690: EQUAL
24691: IFFALSE 24701
// sSheik := true ;
24693: LD_ADDR_EXP 122
24697: PUSH
24698: LD_INT 1
24700: ST_TO_ADDR
// if p3 = 26 then
24701: LD_VAR 0 3
24705: PUSH
24706: LD_INT 26
24708: EQUAL
24709: IFFALSE 24719
// sEarthquake := true ;
24711: LD_ADDR_EXP 124
24715: PUSH
24716: LD_INT 1
24718: ST_TO_ADDR
// if p3 = 27 then
24719: LD_VAR 0 3
24723: PUSH
24724: LD_INT 27
24726: EQUAL
24727: IFFALSE 24737
// sAI := true ;
24729: LD_ADDR_EXP 125
24733: PUSH
24734: LD_INT 1
24736: ST_TO_ADDR
// if p3 = 28 then
24737: LD_VAR 0 3
24741: PUSH
24742: LD_INT 28
24744: EQUAL
24745: IFFALSE 24755
// sCargo := true ;
24747: LD_ADDR_EXP 128
24751: PUSH
24752: LD_INT 1
24754: ST_TO_ADDR
// if p3 = 29 then
24755: LD_VAR 0 3
24759: PUSH
24760: LD_INT 29
24762: EQUAL
24763: IFFALSE 24773
// sDLaser := true ;
24765: LD_ADDR_EXP 129
24769: PUSH
24770: LD_INT 1
24772: ST_TO_ADDR
// if p3 = 30 then
24773: LD_VAR 0 3
24777: PUSH
24778: LD_INT 30
24780: EQUAL
24781: IFFALSE 24791
// sExchange := true ;
24783: LD_ADDR_EXP 130
24787: PUSH
24788: LD_INT 1
24790: ST_TO_ADDR
// if p3 = 31 then
24791: LD_VAR 0 3
24795: PUSH
24796: LD_INT 31
24798: EQUAL
24799: IFFALSE 24809
// sFac := true ;
24801: LD_ADDR_EXP 131
24805: PUSH
24806: LD_INT 1
24808: ST_TO_ADDR
// if p3 = 32 then
24809: LD_VAR 0 3
24813: PUSH
24814: LD_INT 32
24816: EQUAL
24817: IFFALSE 24827
// sPower := true ;
24819: LD_ADDR_EXP 132
24823: PUSH
24824: LD_INT 1
24826: ST_TO_ADDR
// if p3 = 33 then
24827: LD_VAR 0 3
24831: PUSH
24832: LD_INT 33
24834: EQUAL
24835: IFFALSE 24845
// sRandom := true ;
24837: LD_ADDR_EXP 133
24841: PUSH
24842: LD_INT 1
24844: ST_TO_ADDR
// if p3 = 34 then
24845: LD_VAR 0 3
24849: PUSH
24850: LD_INT 34
24852: EQUAL
24853: IFFALSE 24863
// sShield := true ;
24855: LD_ADDR_EXP 134
24859: PUSH
24860: LD_INT 1
24862: ST_TO_ADDR
// if p3 = 35 then
24863: LD_VAR 0 3
24867: PUSH
24868: LD_INT 35
24870: EQUAL
24871: IFFALSE 24881
// sTime := true ;
24873: LD_ADDR_EXP 135
24877: PUSH
24878: LD_INT 1
24880: ST_TO_ADDR
// if p3 = 36 then
24881: LD_VAR 0 3
24885: PUSH
24886: LD_INT 36
24888: EQUAL
24889: IFFALSE 24899
// sTools := true ;
24891: LD_ADDR_EXP 136
24895: PUSH
24896: LD_INT 1
24898: ST_TO_ADDR
// if p3 = 101 then
24899: LD_VAR 0 3
24903: PUSH
24904: LD_INT 101
24906: EQUAL
24907: IFFALSE 24917
// sSold := true ;
24909: LD_ADDR_EXP 101
24913: PUSH
24914: LD_INT 1
24916: ST_TO_ADDR
// if p3 = 102 then
24917: LD_VAR 0 3
24921: PUSH
24922: LD_INT 102
24924: EQUAL
24925: IFFALSE 24935
// sDiff := true ;
24927: LD_ADDR_EXP 102
24931: PUSH
24932: LD_INT 1
24934: ST_TO_ADDR
// if p3 = 103 then
24935: LD_VAR 0 3
24939: PUSH
24940: LD_INT 103
24942: EQUAL
24943: IFFALSE 24953
// sFog := true ;
24945: LD_ADDR_EXP 105
24949: PUSH
24950: LD_INT 1
24952: ST_TO_ADDR
// if p3 = 104 then
24953: LD_VAR 0 3
24957: PUSH
24958: LD_INT 104
24960: EQUAL
24961: IFFALSE 24971
// sReset := true ;
24963: LD_ADDR_EXP 106
24967: PUSH
24968: LD_INT 1
24970: ST_TO_ADDR
// if p3 = 105 then
24971: LD_VAR 0 3
24975: PUSH
24976: LD_INT 105
24978: EQUAL
24979: IFFALSE 24989
// sSun := true ;
24981: LD_ADDR_EXP 107
24985: PUSH
24986: LD_INT 1
24988: ST_TO_ADDR
// if p3 = 106 then
24989: LD_VAR 0 3
24993: PUSH
24994: LD_INT 106
24996: EQUAL
24997: IFFALSE 25007
// sTiger := true ;
24999: LD_ADDR_EXP 103
25003: PUSH
25004: LD_INT 1
25006: ST_TO_ADDR
// if p3 = 107 then
25007: LD_VAR 0 3
25011: PUSH
25012: LD_INT 107
25014: EQUAL
25015: IFFALSE 25025
// sBomb := true ;
25017: LD_ADDR_EXP 104
25021: PUSH
25022: LD_INT 1
25024: ST_TO_ADDR
// if p3 = 108 then
25025: LD_VAR 0 3
25029: PUSH
25030: LD_INT 108
25032: EQUAL
25033: IFFALSE 25043
// sWound := true ;
25035: LD_ADDR_EXP 112
25039: PUSH
25040: LD_INT 1
25042: ST_TO_ADDR
// if p3 = 109 then
25043: LD_VAR 0 3
25047: PUSH
25048: LD_INT 109
25050: EQUAL
25051: IFFALSE 25061
// sBetray := true ;
25053: LD_ADDR_EXP 116
25057: PUSH
25058: LD_INT 1
25060: ST_TO_ADDR
// if p3 = 110 then
25061: LD_VAR 0 3
25065: PUSH
25066: LD_INT 110
25068: EQUAL
25069: IFFALSE 25079
// sContamin := true ;
25071: LD_ADDR_EXP 117
25075: PUSH
25076: LD_INT 1
25078: ST_TO_ADDR
// if p3 = 111 then
25079: LD_VAR 0 3
25083: PUSH
25084: LD_INT 111
25086: EQUAL
25087: IFFALSE 25097
// sOil := true ;
25089: LD_ADDR_EXP 119
25093: PUSH
25094: LD_INT 1
25096: ST_TO_ADDR
// if p3 = 112 then
25097: LD_VAR 0 3
25101: PUSH
25102: LD_INT 112
25104: EQUAL
25105: IFFALSE 25115
// sStu := true ;
25107: LD_ADDR_EXP 123
25111: PUSH
25112: LD_INT 1
25114: ST_TO_ADDR
// if p3 = 113 then
25115: LD_VAR 0 3
25119: PUSH
25120: LD_INT 113
25122: EQUAL
25123: IFFALSE 25133
// sBazooka := true ;
25125: LD_ADDR_EXP 126
25129: PUSH
25130: LD_INT 1
25132: ST_TO_ADDR
// if p3 = 114 then
25133: LD_VAR 0 3
25137: PUSH
25138: LD_INT 114
25140: EQUAL
25141: IFFALSE 25151
// sMortar := true ;
25143: LD_ADDR_EXP 127
25147: PUSH
25148: LD_INT 1
25150: ST_TO_ADDR
// if p3 = 115 then
25151: LD_VAR 0 3
25155: PUSH
25156: LD_INT 115
25158: EQUAL
25159: IFFALSE 25169
// sRanger := true ;
25161: LD_ADDR_EXP 137
25165: PUSH
25166: LD_INT 1
25168: ST_TO_ADDR
// if p3 = 116 then
25169: LD_VAR 0 3
25173: PUSH
25174: LD_INT 116
25176: EQUAL
25177: IFFALSE 25187
// sComputer := true ;
25179: LD_ADDR_EXP 138
25183: PUSH
25184: LD_INT 1
25186: ST_TO_ADDR
// if p3 = 117 then
25187: LD_VAR 0 3
25191: PUSH
25192: LD_INT 117
25194: EQUAL
25195: IFFALSE 25205
// s30 := true ;
25197: LD_ADDR_EXP 139
25201: PUSH
25202: LD_INT 1
25204: ST_TO_ADDR
// if p3 = 118 then
25205: LD_VAR 0 3
25209: PUSH
25210: LD_INT 118
25212: EQUAL
25213: IFFALSE 25223
// s60 := true ;
25215: LD_ADDR_EXP 140
25219: PUSH
25220: LD_INT 1
25222: ST_TO_ADDR
// end ; if p2 = 101 then
25223: LD_VAR 0 2
25227: PUSH
25228: LD_INT 101
25230: EQUAL
25231: IFFALSE 25359
// begin case p3 of 1 :
25233: LD_VAR 0 3
25237: PUSH
25238: LD_INT 1
25240: DOUBLE
25241: EQUAL
25242: IFTRUE 25246
25244: GO 25253
25246: POP
// hHackUnlimitedResources ; 2 :
25247: CALL 36955 0 0
25251: GO 25359
25253: LD_INT 2
25255: DOUBLE
25256: EQUAL
25257: IFTRUE 25261
25259: GO 25268
25261: POP
// hHackSetLevel10 ; 3 :
25262: CALL 37088 0 0
25266: GO 25359
25268: LD_INT 3
25270: DOUBLE
25271: EQUAL
25272: IFTRUE 25276
25274: GO 25283
25276: POP
// hHackSetLevel10YourUnits ; 4 :
25277: CALL 37173 0 0
25281: GO 25359
25283: LD_INT 4
25285: DOUBLE
25286: EQUAL
25287: IFTRUE 25291
25289: GO 25298
25291: POP
// hHackInvincible ; 5 :
25292: CALL 37621 0 0
25296: GO 25359
25298: LD_INT 5
25300: DOUBLE
25301: EQUAL
25302: IFTRUE 25306
25304: GO 25313
25306: POP
// hHackInvisible ; 6 :
25307: CALL 37732 0 0
25311: GO 25359
25313: LD_INT 6
25315: DOUBLE
25316: EQUAL
25317: IFTRUE 25321
25319: GO 25328
25321: POP
// hHackChangeYourSide ; 7 :
25322: CALL 37789 0 0
25326: GO 25359
25328: LD_INT 7
25330: DOUBLE
25331: EQUAL
25332: IFTRUE 25336
25334: GO 25343
25336: POP
// hHackChangeUnitSide ; 8 :
25337: CALL 37831 0 0
25341: GO 25359
25343: LD_INT 8
25345: DOUBLE
25346: EQUAL
25347: IFTRUE 25351
25349: GO 25358
25351: POP
// hHackFog ; end ;
25352: CALL 37932 0 0
25356: GO 25359
25358: POP
// end ; end ;
25359: LD_VAR 0 7
25363: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
25364: GO 25366
25366: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
25367: LD_STRING initStreamRollete();
25369: PPUSH
25370: CALL_OW 559
// InitStreamMode ;
25374: CALL 25383 0 0
// DefineStreamItems ( ) ;
25378: CALL 25847 0 0
// end ;
25382: END
// function InitStreamMode ; begin
25383: LD_INT 0
25385: PPUSH
// streamModeActive := false ;
25386: LD_ADDR_EXP 84
25390: PUSH
25391: LD_INT 0
25393: ST_TO_ADDR
// normalCounter := 36 ;
25394: LD_ADDR_EXP 85
25398: PUSH
25399: LD_INT 36
25401: ST_TO_ADDR
// hardcoreCounter := 16 ;
25402: LD_ADDR_EXP 86
25406: PUSH
25407: LD_INT 16
25409: ST_TO_ADDR
// sRocket := false ;
25410: LD_ADDR_EXP 89
25414: PUSH
25415: LD_INT 0
25417: ST_TO_ADDR
// sSpeed := false ;
25418: LD_ADDR_EXP 88
25422: PUSH
25423: LD_INT 0
25425: ST_TO_ADDR
// sEngine := false ;
25426: LD_ADDR_EXP 90
25430: PUSH
25431: LD_INT 0
25433: ST_TO_ADDR
// sSpec := false ;
25434: LD_ADDR_EXP 87
25438: PUSH
25439: LD_INT 0
25441: ST_TO_ADDR
// sLevel := false ;
25442: LD_ADDR_EXP 91
25446: PUSH
25447: LD_INT 0
25449: ST_TO_ADDR
// sArmoury := false ;
25450: LD_ADDR_EXP 92
25454: PUSH
25455: LD_INT 0
25457: ST_TO_ADDR
// sRadar := false ;
25458: LD_ADDR_EXP 93
25462: PUSH
25463: LD_INT 0
25465: ST_TO_ADDR
// sBunker := false ;
25466: LD_ADDR_EXP 94
25470: PUSH
25471: LD_INT 0
25473: ST_TO_ADDR
// sHack := false ;
25474: LD_ADDR_EXP 95
25478: PUSH
25479: LD_INT 0
25481: ST_TO_ADDR
// sFire := false ;
25482: LD_ADDR_EXP 96
25486: PUSH
25487: LD_INT 0
25489: ST_TO_ADDR
// sRefresh := false ;
25490: LD_ADDR_EXP 97
25494: PUSH
25495: LD_INT 0
25497: ST_TO_ADDR
// sExp := false ;
25498: LD_ADDR_EXP 98
25502: PUSH
25503: LD_INT 0
25505: ST_TO_ADDR
// sDepot := false ;
25506: LD_ADDR_EXP 99
25510: PUSH
25511: LD_INT 0
25513: ST_TO_ADDR
// sFlag := false ;
25514: LD_ADDR_EXP 100
25518: PUSH
25519: LD_INT 0
25521: ST_TO_ADDR
// sKamikadze := false ;
25522: LD_ADDR_EXP 108
25526: PUSH
25527: LD_INT 0
25529: ST_TO_ADDR
// sTroll := false ;
25530: LD_ADDR_EXP 109
25534: PUSH
25535: LD_INT 0
25537: ST_TO_ADDR
// sSlow := false ;
25538: LD_ADDR_EXP 110
25542: PUSH
25543: LD_INT 0
25545: ST_TO_ADDR
// sLack := false ;
25546: LD_ADDR_EXP 111
25550: PUSH
25551: LD_INT 0
25553: ST_TO_ADDR
// sTank := false ;
25554: LD_ADDR_EXP 113
25558: PUSH
25559: LD_INT 0
25561: ST_TO_ADDR
// sRemote := false ;
25562: LD_ADDR_EXP 114
25566: PUSH
25567: LD_INT 0
25569: ST_TO_ADDR
// sPowell := false ;
25570: LD_ADDR_EXP 115
25574: PUSH
25575: LD_INT 0
25577: ST_TO_ADDR
// sTeleport := false ;
25578: LD_ADDR_EXP 118
25582: PUSH
25583: LD_INT 0
25585: ST_TO_ADDR
// sOilTower := false ;
25586: LD_ADDR_EXP 120
25590: PUSH
25591: LD_INT 0
25593: ST_TO_ADDR
// sShovel := false ;
25594: LD_ADDR_EXP 121
25598: PUSH
25599: LD_INT 0
25601: ST_TO_ADDR
// sSheik := false ;
25602: LD_ADDR_EXP 122
25606: PUSH
25607: LD_INT 0
25609: ST_TO_ADDR
// sEarthquake := false ;
25610: LD_ADDR_EXP 124
25614: PUSH
25615: LD_INT 0
25617: ST_TO_ADDR
// sAI := false ;
25618: LD_ADDR_EXP 125
25622: PUSH
25623: LD_INT 0
25625: ST_TO_ADDR
// sCargo := false ;
25626: LD_ADDR_EXP 128
25630: PUSH
25631: LD_INT 0
25633: ST_TO_ADDR
// sDLaser := false ;
25634: LD_ADDR_EXP 129
25638: PUSH
25639: LD_INT 0
25641: ST_TO_ADDR
// sExchange := false ;
25642: LD_ADDR_EXP 130
25646: PUSH
25647: LD_INT 0
25649: ST_TO_ADDR
// sFac := false ;
25650: LD_ADDR_EXP 131
25654: PUSH
25655: LD_INT 0
25657: ST_TO_ADDR
// sPower := false ;
25658: LD_ADDR_EXP 132
25662: PUSH
25663: LD_INT 0
25665: ST_TO_ADDR
// sRandom := false ;
25666: LD_ADDR_EXP 133
25670: PUSH
25671: LD_INT 0
25673: ST_TO_ADDR
// sShield := false ;
25674: LD_ADDR_EXP 134
25678: PUSH
25679: LD_INT 0
25681: ST_TO_ADDR
// sTime := false ;
25682: LD_ADDR_EXP 135
25686: PUSH
25687: LD_INT 0
25689: ST_TO_ADDR
// sTools := false ;
25690: LD_ADDR_EXP 136
25694: PUSH
25695: LD_INT 0
25697: ST_TO_ADDR
// sSold := false ;
25698: LD_ADDR_EXP 101
25702: PUSH
25703: LD_INT 0
25705: ST_TO_ADDR
// sDiff := false ;
25706: LD_ADDR_EXP 102
25710: PUSH
25711: LD_INT 0
25713: ST_TO_ADDR
// sFog := false ;
25714: LD_ADDR_EXP 105
25718: PUSH
25719: LD_INT 0
25721: ST_TO_ADDR
// sReset := false ;
25722: LD_ADDR_EXP 106
25726: PUSH
25727: LD_INT 0
25729: ST_TO_ADDR
// sSun := false ;
25730: LD_ADDR_EXP 107
25734: PUSH
25735: LD_INT 0
25737: ST_TO_ADDR
// sTiger := false ;
25738: LD_ADDR_EXP 103
25742: PUSH
25743: LD_INT 0
25745: ST_TO_ADDR
// sBomb := false ;
25746: LD_ADDR_EXP 104
25750: PUSH
25751: LD_INT 0
25753: ST_TO_ADDR
// sWound := false ;
25754: LD_ADDR_EXP 112
25758: PUSH
25759: LD_INT 0
25761: ST_TO_ADDR
// sBetray := false ;
25762: LD_ADDR_EXP 116
25766: PUSH
25767: LD_INT 0
25769: ST_TO_ADDR
// sContamin := false ;
25770: LD_ADDR_EXP 117
25774: PUSH
25775: LD_INT 0
25777: ST_TO_ADDR
// sOil := false ;
25778: LD_ADDR_EXP 119
25782: PUSH
25783: LD_INT 0
25785: ST_TO_ADDR
// sStu := false ;
25786: LD_ADDR_EXP 123
25790: PUSH
25791: LD_INT 0
25793: ST_TO_ADDR
// sBazooka := false ;
25794: LD_ADDR_EXP 126
25798: PUSH
25799: LD_INT 0
25801: ST_TO_ADDR
// sMortar := false ;
25802: LD_ADDR_EXP 127
25806: PUSH
25807: LD_INT 0
25809: ST_TO_ADDR
// sRanger := false ;
25810: LD_ADDR_EXP 137
25814: PUSH
25815: LD_INT 0
25817: ST_TO_ADDR
// sComputer := false ;
25818: LD_ADDR_EXP 138
25822: PUSH
25823: LD_INT 0
25825: ST_TO_ADDR
// s30 := false ;
25826: LD_ADDR_EXP 139
25830: PUSH
25831: LD_INT 0
25833: ST_TO_ADDR
// s60 := false ;
25834: LD_ADDR_EXP 140
25838: PUSH
25839: LD_INT 0
25841: ST_TO_ADDR
// end ;
25842: LD_VAR 0 1
25846: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
25847: LD_INT 0
25849: PPUSH
25850: PPUSH
25851: PPUSH
25852: PPUSH
25853: PPUSH
// result := [ ] ;
25854: LD_ADDR_VAR 0 1
25858: PUSH
25859: EMPTY
25860: ST_TO_ADDR
// if campaign_id = 1 then
25861: LD_OWVAR 69
25865: PUSH
25866: LD_INT 1
25868: EQUAL
25869: IFFALSE 29035
// begin case mission_number of 1 :
25871: LD_OWVAR 70
25875: PUSH
25876: LD_INT 1
25878: DOUBLE
25879: EQUAL
25880: IFTRUE 25884
25882: GO 25960
25884: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
25885: LD_ADDR_VAR 0 1
25889: PUSH
25890: LD_INT 2
25892: PUSH
25893: LD_INT 4
25895: PUSH
25896: LD_INT 11
25898: PUSH
25899: LD_INT 12
25901: PUSH
25902: LD_INT 15
25904: PUSH
25905: LD_INT 16
25907: PUSH
25908: LD_INT 22
25910: PUSH
25911: LD_INT 23
25913: PUSH
25914: LD_INT 26
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 101
25930: PUSH
25931: LD_INT 102
25933: PUSH
25934: LD_INT 106
25936: PUSH
25937: LD_INT 116
25939: PUSH
25940: LD_INT 117
25942: PUSH
25943: LD_INT 118
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: ST_TO_ADDR
25958: GO 29033
25960: LD_INT 2
25962: DOUBLE
25963: EQUAL
25964: IFTRUE 25968
25966: GO 26052
25968: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
25969: LD_ADDR_VAR 0 1
25973: PUSH
25974: LD_INT 2
25976: PUSH
25977: LD_INT 4
25979: PUSH
25980: LD_INT 11
25982: PUSH
25983: LD_INT 12
25985: PUSH
25986: LD_INT 15
25988: PUSH
25989: LD_INT 16
25991: PUSH
25992: LD_INT 22
25994: PUSH
25995: LD_INT 23
25997: PUSH
25998: LD_INT 26
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 101
26014: PUSH
26015: LD_INT 102
26017: PUSH
26018: LD_INT 105
26020: PUSH
26021: LD_INT 106
26023: PUSH
26024: LD_INT 108
26026: PUSH
26027: LD_INT 116
26029: PUSH
26030: LD_INT 117
26032: PUSH
26033: LD_INT 118
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: ST_TO_ADDR
26050: GO 29033
26052: LD_INT 3
26054: DOUBLE
26055: EQUAL
26056: IFTRUE 26060
26058: GO 26148
26060: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
26061: LD_ADDR_VAR 0 1
26065: PUSH
26066: LD_INT 2
26068: PUSH
26069: LD_INT 4
26071: PUSH
26072: LD_INT 5
26074: PUSH
26075: LD_INT 11
26077: PUSH
26078: LD_INT 12
26080: PUSH
26081: LD_INT 15
26083: PUSH
26084: LD_INT 16
26086: PUSH
26087: LD_INT 22
26089: PUSH
26090: LD_INT 26
26092: PUSH
26093: LD_INT 36
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 101
26110: PUSH
26111: LD_INT 102
26113: PUSH
26114: LD_INT 105
26116: PUSH
26117: LD_INT 106
26119: PUSH
26120: LD_INT 108
26122: PUSH
26123: LD_INT 116
26125: PUSH
26126: LD_INT 117
26128: PUSH
26129: LD_INT 118
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: ST_TO_ADDR
26146: GO 29033
26148: LD_INT 4
26150: DOUBLE
26151: EQUAL
26152: IFTRUE 26156
26154: GO 26252
26156: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
26157: LD_ADDR_VAR 0 1
26161: PUSH
26162: LD_INT 2
26164: PUSH
26165: LD_INT 4
26167: PUSH
26168: LD_INT 5
26170: PUSH
26171: LD_INT 8
26173: PUSH
26174: LD_INT 11
26176: PUSH
26177: LD_INT 12
26179: PUSH
26180: LD_INT 15
26182: PUSH
26183: LD_INT 16
26185: PUSH
26186: LD_INT 22
26188: PUSH
26189: LD_INT 23
26191: PUSH
26192: LD_INT 26
26194: PUSH
26195: LD_INT 36
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 101
26214: PUSH
26215: LD_INT 102
26217: PUSH
26218: LD_INT 105
26220: PUSH
26221: LD_INT 106
26223: PUSH
26224: LD_INT 108
26226: PUSH
26227: LD_INT 116
26229: PUSH
26230: LD_INT 117
26232: PUSH
26233: LD_INT 118
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: ST_TO_ADDR
26250: GO 29033
26252: LD_INT 5
26254: DOUBLE
26255: EQUAL
26256: IFTRUE 26260
26258: GO 26372
26260: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
26261: LD_ADDR_VAR 0 1
26265: PUSH
26266: LD_INT 2
26268: PUSH
26269: LD_INT 4
26271: PUSH
26272: LD_INT 5
26274: PUSH
26275: LD_INT 6
26277: PUSH
26278: LD_INT 8
26280: PUSH
26281: LD_INT 11
26283: PUSH
26284: LD_INT 12
26286: PUSH
26287: LD_INT 15
26289: PUSH
26290: LD_INT 16
26292: PUSH
26293: LD_INT 22
26295: PUSH
26296: LD_INT 23
26298: PUSH
26299: LD_INT 25
26301: PUSH
26302: LD_INT 26
26304: PUSH
26305: LD_INT 36
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: PUSH
26324: LD_INT 101
26326: PUSH
26327: LD_INT 102
26329: PUSH
26330: LD_INT 105
26332: PUSH
26333: LD_INT 106
26335: PUSH
26336: LD_INT 108
26338: PUSH
26339: LD_INT 109
26341: PUSH
26342: LD_INT 112
26344: PUSH
26345: LD_INT 116
26347: PUSH
26348: LD_INT 117
26350: PUSH
26351: LD_INT 118
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: ST_TO_ADDR
26370: GO 29033
26372: LD_INT 6
26374: DOUBLE
26375: EQUAL
26376: IFTRUE 26380
26378: GO 26512
26380: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
26381: LD_ADDR_VAR 0 1
26385: PUSH
26386: LD_INT 2
26388: PUSH
26389: LD_INT 4
26391: PUSH
26392: LD_INT 5
26394: PUSH
26395: LD_INT 6
26397: PUSH
26398: LD_INT 8
26400: PUSH
26401: LD_INT 11
26403: PUSH
26404: LD_INT 12
26406: PUSH
26407: LD_INT 15
26409: PUSH
26410: LD_INT 16
26412: PUSH
26413: LD_INT 20
26415: PUSH
26416: LD_INT 21
26418: PUSH
26419: LD_INT 22
26421: PUSH
26422: LD_INT 23
26424: PUSH
26425: LD_INT 25
26427: PUSH
26428: LD_INT 26
26430: PUSH
26431: LD_INT 30
26433: PUSH
26434: LD_INT 31
26436: PUSH
26437: LD_INT 32
26439: PUSH
26440: LD_INT 36
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 101
26466: PUSH
26467: LD_INT 102
26469: PUSH
26470: LD_INT 105
26472: PUSH
26473: LD_INT 106
26475: PUSH
26476: LD_INT 108
26478: PUSH
26479: LD_INT 109
26481: PUSH
26482: LD_INT 112
26484: PUSH
26485: LD_INT 116
26487: PUSH
26488: LD_INT 117
26490: PUSH
26491: LD_INT 118
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: ST_TO_ADDR
26510: GO 29033
26512: LD_INT 7
26514: DOUBLE
26515: EQUAL
26516: IFTRUE 26520
26518: GO 26632
26520: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
26521: LD_ADDR_VAR 0 1
26525: PUSH
26526: LD_INT 2
26528: PUSH
26529: LD_INT 4
26531: PUSH
26532: LD_INT 5
26534: PUSH
26535: LD_INT 7
26537: PUSH
26538: LD_INT 11
26540: PUSH
26541: LD_INT 12
26543: PUSH
26544: LD_INT 15
26546: PUSH
26547: LD_INT 16
26549: PUSH
26550: LD_INT 20
26552: PUSH
26553: LD_INT 21
26555: PUSH
26556: LD_INT 22
26558: PUSH
26559: LD_INT 23
26561: PUSH
26562: LD_INT 25
26564: PUSH
26565: LD_INT 26
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 101
26586: PUSH
26587: LD_INT 102
26589: PUSH
26590: LD_INT 103
26592: PUSH
26593: LD_INT 105
26595: PUSH
26596: LD_INT 106
26598: PUSH
26599: LD_INT 108
26601: PUSH
26602: LD_INT 112
26604: PUSH
26605: LD_INT 116
26607: PUSH
26608: LD_INT 117
26610: PUSH
26611: LD_INT 118
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: ST_TO_ADDR
26630: GO 29033
26632: LD_INT 8
26634: DOUBLE
26635: EQUAL
26636: IFTRUE 26640
26638: GO 26780
26640: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
26641: LD_ADDR_VAR 0 1
26645: PUSH
26646: LD_INT 2
26648: PUSH
26649: LD_INT 4
26651: PUSH
26652: LD_INT 5
26654: PUSH
26655: LD_INT 6
26657: PUSH
26658: LD_INT 7
26660: PUSH
26661: LD_INT 8
26663: PUSH
26664: LD_INT 11
26666: PUSH
26667: LD_INT 12
26669: PUSH
26670: LD_INT 15
26672: PUSH
26673: LD_INT 16
26675: PUSH
26676: LD_INT 20
26678: PUSH
26679: LD_INT 21
26681: PUSH
26682: LD_INT 22
26684: PUSH
26685: LD_INT 23
26687: PUSH
26688: LD_INT 25
26690: PUSH
26691: LD_INT 26
26693: PUSH
26694: LD_INT 30
26696: PUSH
26697: LD_INT 31
26699: PUSH
26700: LD_INT 32
26702: PUSH
26703: LD_INT 36
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 101
26730: PUSH
26731: LD_INT 102
26733: PUSH
26734: LD_INT 103
26736: PUSH
26737: LD_INT 105
26739: PUSH
26740: LD_INT 106
26742: PUSH
26743: LD_INT 108
26745: PUSH
26746: LD_INT 109
26748: PUSH
26749: LD_INT 112
26751: PUSH
26752: LD_INT 116
26754: PUSH
26755: LD_INT 117
26757: PUSH
26758: LD_INT 118
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: ST_TO_ADDR
26778: GO 29033
26780: LD_INT 9
26782: DOUBLE
26783: EQUAL
26784: IFTRUE 26788
26786: GO 26936
26788: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
26789: LD_ADDR_VAR 0 1
26793: PUSH
26794: LD_INT 2
26796: PUSH
26797: LD_INT 4
26799: PUSH
26800: LD_INT 5
26802: PUSH
26803: LD_INT 6
26805: PUSH
26806: LD_INT 7
26808: PUSH
26809: LD_INT 8
26811: PUSH
26812: LD_INT 11
26814: PUSH
26815: LD_INT 12
26817: PUSH
26818: LD_INT 15
26820: PUSH
26821: LD_INT 16
26823: PUSH
26824: LD_INT 20
26826: PUSH
26827: LD_INT 21
26829: PUSH
26830: LD_INT 22
26832: PUSH
26833: LD_INT 23
26835: PUSH
26836: LD_INT 25
26838: PUSH
26839: LD_INT 26
26841: PUSH
26842: LD_INT 28
26844: PUSH
26845: LD_INT 30
26847: PUSH
26848: LD_INT 31
26850: PUSH
26851: LD_INT 32
26853: PUSH
26854: LD_INT 36
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 101
26882: PUSH
26883: LD_INT 102
26885: PUSH
26886: LD_INT 103
26888: PUSH
26889: LD_INT 105
26891: PUSH
26892: LD_INT 106
26894: PUSH
26895: LD_INT 108
26897: PUSH
26898: LD_INT 109
26900: PUSH
26901: LD_INT 112
26903: PUSH
26904: LD_INT 114
26906: PUSH
26907: LD_INT 116
26909: PUSH
26910: LD_INT 117
26912: PUSH
26913: LD_INT 118
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: ST_TO_ADDR
26934: GO 29033
26936: LD_INT 10
26938: DOUBLE
26939: EQUAL
26940: IFTRUE 26944
26942: GO 27140
26944: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
26945: LD_ADDR_VAR 0 1
26949: PUSH
26950: LD_INT 2
26952: PUSH
26953: LD_INT 4
26955: PUSH
26956: LD_INT 5
26958: PUSH
26959: LD_INT 6
26961: PUSH
26962: LD_INT 7
26964: PUSH
26965: LD_INT 8
26967: PUSH
26968: LD_INT 9
26970: PUSH
26971: LD_INT 10
26973: PUSH
26974: LD_INT 11
26976: PUSH
26977: LD_INT 12
26979: PUSH
26980: LD_INT 13
26982: PUSH
26983: LD_INT 14
26985: PUSH
26986: LD_INT 15
26988: PUSH
26989: LD_INT 16
26991: PUSH
26992: LD_INT 17
26994: PUSH
26995: LD_INT 18
26997: PUSH
26998: LD_INT 19
27000: PUSH
27001: LD_INT 20
27003: PUSH
27004: LD_INT 21
27006: PUSH
27007: LD_INT 22
27009: PUSH
27010: LD_INT 23
27012: PUSH
27013: LD_INT 24
27015: PUSH
27016: LD_INT 25
27018: PUSH
27019: LD_INT 26
27021: PUSH
27022: LD_INT 28
27024: PUSH
27025: LD_INT 30
27027: PUSH
27028: LD_INT 31
27030: PUSH
27031: LD_INT 32
27033: PUSH
27034: LD_INT 36
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: PUSH
27068: LD_INT 101
27070: PUSH
27071: LD_INT 102
27073: PUSH
27074: LD_INT 103
27076: PUSH
27077: LD_INT 104
27079: PUSH
27080: LD_INT 105
27082: PUSH
27083: LD_INT 106
27085: PUSH
27086: LD_INT 107
27088: PUSH
27089: LD_INT 108
27091: PUSH
27092: LD_INT 109
27094: PUSH
27095: LD_INT 110
27097: PUSH
27098: LD_INT 111
27100: PUSH
27101: LD_INT 112
27103: PUSH
27104: LD_INT 114
27106: PUSH
27107: LD_INT 116
27109: PUSH
27110: LD_INT 117
27112: PUSH
27113: LD_INT 118
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: ST_TO_ADDR
27138: GO 29033
27140: LD_INT 11
27142: DOUBLE
27143: EQUAL
27144: IFTRUE 27148
27146: GO 27352
27148: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
27149: LD_ADDR_VAR 0 1
27153: PUSH
27154: LD_INT 2
27156: PUSH
27157: LD_INT 3
27159: PUSH
27160: LD_INT 4
27162: PUSH
27163: LD_INT 5
27165: PUSH
27166: LD_INT 6
27168: PUSH
27169: LD_INT 7
27171: PUSH
27172: LD_INT 8
27174: PUSH
27175: LD_INT 9
27177: PUSH
27178: LD_INT 10
27180: PUSH
27181: LD_INT 11
27183: PUSH
27184: LD_INT 12
27186: PUSH
27187: LD_INT 13
27189: PUSH
27190: LD_INT 14
27192: PUSH
27193: LD_INT 15
27195: PUSH
27196: LD_INT 16
27198: PUSH
27199: LD_INT 17
27201: PUSH
27202: LD_INT 18
27204: PUSH
27205: LD_INT 19
27207: PUSH
27208: LD_INT 20
27210: PUSH
27211: LD_INT 21
27213: PUSH
27214: LD_INT 22
27216: PUSH
27217: LD_INT 23
27219: PUSH
27220: LD_INT 24
27222: PUSH
27223: LD_INT 25
27225: PUSH
27226: LD_INT 26
27228: PUSH
27229: LD_INT 28
27231: PUSH
27232: LD_INT 30
27234: PUSH
27235: LD_INT 31
27237: PUSH
27238: LD_INT 32
27240: PUSH
27241: LD_INT 34
27243: PUSH
27244: LD_INT 36
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 101
27282: PUSH
27283: LD_INT 102
27285: PUSH
27286: LD_INT 103
27288: PUSH
27289: LD_INT 104
27291: PUSH
27292: LD_INT 105
27294: PUSH
27295: LD_INT 106
27297: PUSH
27298: LD_INT 107
27300: PUSH
27301: LD_INT 108
27303: PUSH
27304: LD_INT 109
27306: PUSH
27307: LD_INT 110
27309: PUSH
27310: LD_INT 111
27312: PUSH
27313: LD_INT 112
27315: PUSH
27316: LD_INT 114
27318: PUSH
27319: LD_INT 116
27321: PUSH
27322: LD_INT 117
27324: PUSH
27325: LD_INT 118
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: ST_TO_ADDR
27350: GO 29033
27352: LD_INT 12
27354: DOUBLE
27355: EQUAL
27356: IFTRUE 27360
27358: GO 27580
27360: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
27361: LD_ADDR_VAR 0 1
27365: PUSH
27366: LD_INT 1
27368: PUSH
27369: LD_INT 2
27371: PUSH
27372: LD_INT 3
27374: PUSH
27375: LD_INT 4
27377: PUSH
27378: LD_INT 5
27380: PUSH
27381: LD_INT 6
27383: PUSH
27384: LD_INT 7
27386: PUSH
27387: LD_INT 8
27389: PUSH
27390: LD_INT 9
27392: PUSH
27393: LD_INT 10
27395: PUSH
27396: LD_INT 11
27398: PUSH
27399: LD_INT 12
27401: PUSH
27402: LD_INT 13
27404: PUSH
27405: LD_INT 14
27407: PUSH
27408: LD_INT 15
27410: PUSH
27411: LD_INT 16
27413: PUSH
27414: LD_INT 17
27416: PUSH
27417: LD_INT 18
27419: PUSH
27420: LD_INT 19
27422: PUSH
27423: LD_INT 20
27425: PUSH
27426: LD_INT 21
27428: PUSH
27429: LD_INT 22
27431: PUSH
27432: LD_INT 23
27434: PUSH
27435: LD_INT 24
27437: PUSH
27438: LD_INT 25
27440: PUSH
27441: LD_INT 26
27443: PUSH
27444: LD_INT 27
27446: PUSH
27447: LD_INT 28
27449: PUSH
27450: LD_INT 30
27452: PUSH
27453: LD_INT 31
27455: PUSH
27456: LD_INT 32
27458: PUSH
27459: LD_INT 33
27461: PUSH
27462: LD_INT 34
27464: PUSH
27465: LD_INT 36
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 101
27506: PUSH
27507: LD_INT 102
27509: PUSH
27510: LD_INT 103
27512: PUSH
27513: LD_INT 104
27515: PUSH
27516: LD_INT 105
27518: PUSH
27519: LD_INT 106
27521: PUSH
27522: LD_INT 107
27524: PUSH
27525: LD_INT 108
27527: PUSH
27528: LD_INT 109
27530: PUSH
27531: LD_INT 110
27533: PUSH
27534: LD_INT 111
27536: PUSH
27537: LD_INT 112
27539: PUSH
27540: LD_INT 113
27542: PUSH
27543: LD_INT 114
27545: PUSH
27546: LD_INT 116
27548: PUSH
27549: LD_INT 117
27551: PUSH
27552: LD_INT 118
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: ST_TO_ADDR
27578: GO 29033
27580: LD_INT 13
27582: DOUBLE
27583: EQUAL
27584: IFTRUE 27588
27586: GO 27796
27588: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
27589: LD_ADDR_VAR 0 1
27593: PUSH
27594: LD_INT 1
27596: PUSH
27597: LD_INT 2
27599: PUSH
27600: LD_INT 3
27602: PUSH
27603: LD_INT 4
27605: PUSH
27606: LD_INT 5
27608: PUSH
27609: LD_INT 8
27611: PUSH
27612: LD_INT 9
27614: PUSH
27615: LD_INT 10
27617: PUSH
27618: LD_INT 11
27620: PUSH
27621: LD_INT 12
27623: PUSH
27624: LD_INT 14
27626: PUSH
27627: LD_INT 15
27629: PUSH
27630: LD_INT 16
27632: PUSH
27633: LD_INT 17
27635: PUSH
27636: LD_INT 18
27638: PUSH
27639: LD_INT 19
27641: PUSH
27642: LD_INT 20
27644: PUSH
27645: LD_INT 21
27647: PUSH
27648: LD_INT 22
27650: PUSH
27651: LD_INT 23
27653: PUSH
27654: LD_INT 24
27656: PUSH
27657: LD_INT 25
27659: PUSH
27660: LD_INT 26
27662: PUSH
27663: LD_INT 27
27665: PUSH
27666: LD_INT 28
27668: PUSH
27669: LD_INT 30
27671: PUSH
27672: LD_INT 31
27674: PUSH
27675: LD_INT 32
27677: PUSH
27678: LD_INT 33
27680: PUSH
27681: LD_INT 34
27683: PUSH
27684: LD_INT 36
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 101
27722: PUSH
27723: LD_INT 102
27725: PUSH
27726: LD_INT 103
27728: PUSH
27729: LD_INT 104
27731: PUSH
27732: LD_INT 105
27734: PUSH
27735: LD_INT 106
27737: PUSH
27738: LD_INT 107
27740: PUSH
27741: LD_INT 108
27743: PUSH
27744: LD_INT 109
27746: PUSH
27747: LD_INT 110
27749: PUSH
27750: LD_INT 111
27752: PUSH
27753: LD_INT 112
27755: PUSH
27756: LD_INT 113
27758: PUSH
27759: LD_INT 114
27761: PUSH
27762: LD_INT 116
27764: PUSH
27765: LD_INT 117
27767: PUSH
27768: LD_INT 118
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: ST_TO_ADDR
27794: GO 29033
27796: LD_INT 14
27798: DOUBLE
27799: EQUAL
27800: IFTRUE 27804
27802: GO 28028
27804: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
27805: LD_ADDR_VAR 0 1
27809: PUSH
27810: LD_INT 1
27812: PUSH
27813: LD_INT 2
27815: PUSH
27816: LD_INT 3
27818: PUSH
27819: LD_INT 4
27821: PUSH
27822: LD_INT 5
27824: PUSH
27825: LD_INT 6
27827: PUSH
27828: LD_INT 7
27830: PUSH
27831: LD_INT 8
27833: PUSH
27834: LD_INT 9
27836: PUSH
27837: LD_INT 10
27839: PUSH
27840: LD_INT 11
27842: PUSH
27843: LD_INT 12
27845: PUSH
27846: LD_INT 13
27848: PUSH
27849: LD_INT 14
27851: PUSH
27852: LD_INT 15
27854: PUSH
27855: LD_INT 16
27857: PUSH
27858: LD_INT 17
27860: PUSH
27861: LD_INT 18
27863: PUSH
27864: LD_INT 19
27866: PUSH
27867: LD_INT 20
27869: PUSH
27870: LD_INT 21
27872: PUSH
27873: LD_INT 22
27875: PUSH
27876: LD_INT 23
27878: PUSH
27879: LD_INT 24
27881: PUSH
27882: LD_INT 25
27884: PUSH
27885: LD_INT 26
27887: PUSH
27888: LD_INT 27
27890: PUSH
27891: LD_INT 28
27893: PUSH
27894: LD_INT 29
27896: PUSH
27897: LD_INT 30
27899: PUSH
27900: LD_INT 31
27902: PUSH
27903: LD_INT 32
27905: PUSH
27906: LD_INT 33
27908: PUSH
27909: LD_INT 34
27911: PUSH
27912: LD_INT 36
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 101
27954: PUSH
27955: LD_INT 102
27957: PUSH
27958: LD_INT 103
27960: PUSH
27961: LD_INT 104
27963: PUSH
27964: LD_INT 105
27966: PUSH
27967: LD_INT 106
27969: PUSH
27970: LD_INT 107
27972: PUSH
27973: LD_INT 108
27975: PUSH
27976: LD_INT 109
27978: PUSH
27979: LD_INT 110
27981: PUSH
27982: LD_INT 111
27984: PUSH
27985: LD_INT 112
27987: PUSH
27988: LD_INT 113
27990: PUSH
27991: LD_INT 114
27993: PUSH
27994: LD_INT 116
27996: PUSH
27997: LD_INT 117
27999: PUSH
28000: LD_INT 118
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: ST_TO_ADDR
28026: GO 29033
28028: LD_INT 15
28030: DOUBLE
28031: EQUAL
28032: IFTRUE 28036
28034: GO 28260
28036: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
28037: LD_ADDR_VAR 0 1
28041: PUSH
28042: LD_INT 1
28044: PUSH
28045: LD_INT 2
28047: PUSH
28048: LD_INT 3
28050: PUSH
28051: LD_INT 4
28053: PUSH
28054: LD_INT 5
28056: PUSH
28057: LD_INT 6
28059: PUSH
28060: LD_INT 7
28062: PUSH
28063: LD_INT 8
28065: PUSH
28066: LD_INT 9
28068: PUSH
28069: LD_INT 10
28071: PUSH
28072: LD_INT 11
28074: PUSH
28075: LD_INT 12
28077: PUSH
28078: LD_INT 13
28080: PUSH
28081: LD_INT 14
28083: PUSH
28084: LD_INT 15
28086: PUSH
28087: LD_INT 16
28089: PUSH
28090: LD_INT 17
28092: PUSH
28093: LD_INT 18
28095: PUSH
28096: LD_INT 19
28098: PUSH
28099: LD_INT 20
28101: PUSH
28102: LD_INT 21
28104: PUSH
28105: LD_INT 22
28107: PUSH
28108: LD_INT 23
28110: PUSH
28111: LD_INT 24
28113: PUSH
28114: LD_INT 25
28116: PUSH
28117: LD_INT 26
28119: PUSH
28120: LD_INT 27
28122: PUSH
28123: LD_INT 28
28125: PUSH
28126: LD_INT 29
28128: PUSH
28129: LD_INT 30
28131: PUSH
28132: LD_INT 31
28134: PUSH
28135: LD_INT 32
28137: PUSH
28138: LD_INT 33
28140: PUSH
28141: LD_INT 34
28143: PUSH
28144: LD_INT 36
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 101
28186: PUSH
28187: LD_INT 102
28189: PUSH
28190: LD_INT 103
28192: PUSH
28193: LD_INT 104
28195: PUSH
28196: LD_INT 105
28198: PUSH
28199: LD_INT 106
28201: PUSH
28202: LD_INT 107
28204: PUSH
28205: LD_INT 108
28207: PUSH
28208: LD_INT 109
28210: PUSH
28211: LD_INT 110
28213: PUSH
28214: LD_INT 111
28216: PUSH
28217: LD_INT 112
28219: PUSH
28220: LD_INT 113
28222: PUSH
28223: LD_INT 114
28225: PUSH
28226: LD_INT 116
28228: PUSH
28229: LD_INT 117
28231: PUSH
28232: LD_INT 118
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: ST_TO_ADDR
28258: GO 29033
28260: LD_INT 16
28262: DOUBLE
28263: EQUAL
28264: IFTRUE 28268
28266: GO 28404
28268: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
28269: LD_ADDR_VAR 0 1
28273: PUSH
28274: LD_INT 2
28276: PUSH
28277: LD_INT 4
28279: PUSH
28280: LD_INT 5
28282: PUSH
28283: LD_INT 7
28285: PUSH
28286: LD_INT 11
28288: PUSH
28289: LD_INT 12
28291: PUSH
28292: LD_INT 15
28294: PUSH
28295: LD_INT 16
28297: PUSH
28298: LD_INT 20
28300: PUSH
28301: LD_INT 21
28303: PUSH
28304: LD_INT 22
28306: PUSH
28307: LD_INT 23
28309: PUSH
28310: LD_INT 25
28312: PUSH
28313: LD_INT 26
28315: PUSH
28316: LD_INT 30
28318: PUSH
28319: LD_INT 31
28321: PUSH
28322: LD_INT 32
28324: PUSH
28325: LD_INT 33
28327: PUSH
28328: LD_INT 34
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 101
28354: PUSH
28355: LD_INT 102
28357: PUSH
28358: LD_INT 103
28360: PUSH
28361: LD_INT 106
28363: PUSH
28364: LD_INT 108
28366: PUSH
28367: LD_INT 112
28369: PUSH
28370: LD_INT 113
28372: PUSH
28373: LD_INT 114
28375: PUSH
28376: LD_INT 116
28378: PUSH
28379: LD_INT 117
28381: PUSH
28382: LD_INT 118
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: ST_TO_ADDR
28402: GO 29033
28404: LD_INT 17
28406: DOUBLE
28407: EQUAL
28408: IFTRUE 28412
28410: GO 28636
28412: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
28413: LD_ADDR_VAR 0 1
28417: PUSH
28418: LD_INT 1
28420: PUSH
28421: LD_INT 2
28423: PUSH
28424: LD_INT 3
28426: PUSH
28427: LD_INT 4
28429: PUSH
28430: LD_INT 5
28432: PUSH
28433: LD_INT 6
28435: PUSH
28436: LD_INT 7
28438: PUSH
28439: LD_INT 8
28441: PUSH
28442: LD_INT 9
28444: PUSH
28445: LD_INT 10
28447: PUSH
28448: LD_INT 11
28450: PUSH
28451: LD_INT 12
28453: PUSH
28454: LD_INT 13
28456: PUSH
28457: LD_INT 14
28459: PUSH
28460: LD_INT 15
28462: PUSH
28463: LD_INT 16
28465: PUSH
28466: LD_INT 17
28468: PUSH
28469: LD_INT 18
28471: PUSH
28472: LD_INT 19
28474: PUSH
28475: LD_INT 20
28477: PUSH
28478: LD_INT 21
28480: PUSH
28481: LD_INT 22
28483: PUSH
28484: LD_INT 23
28486: PUSH
28487: LD_INT 24
28489: PUSH
28490: LD_INT 25
28492: PUSH
28493: LD_INT 26
28495: PUSH
28496: LD_INT 27
28498: PUSH
28499: LD_INT 28
28501: PUSH
28502: LD_INT 29
28504: PUSH
28505: LD_INT 30
28507: PUSH
28508: LD_INT 31
28510: PUSH
28511: LD_INT 32
28513: PUSH
28514: LD_INT 33
28516: PUSH
28517: LD_INT 34
28519: PUSH
28520: LD_INT 36
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 101
28562: PUSH
28563: LD_INT 102
28565: PUSH
28566: LD_INT 103
28568: PUSH
28569: LD_INT 104
28571: PUSH
28572: LD_INT 105
28574: PUSH
28575: LD_INT 106
28577: PUSH
28578: LD_INT 107
28580: PUSH
28581: LD_INT 108
28583: PUSH
28584: LD_INT 109
28586: PUSH
28587: LD_INT 110
28589: PUSH
28590: LD_INT 111
28592: PUSH
28593: LD_INT 112
28595: PUSH
28596: LD_INT 113
28598: PUSH
28599: LD_INT 114
28601: PUSH
28602: LD_INT 116
28604: PUSH
28605: LD_INT 117
28607: PUSH
28608: LD_INT 118
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: ST_TO_ADDR
28634: GO 29033
28636: LD_INT 18
28638: DOUBLE
28639: EQUAL
28640: IFTRUE 28644
28642: GO 28792
28644: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
28645: LD_ADDR_VAR 0 1
28649: PUSH
28650: LD_INT 2
28652: PUSH
28653: LD_INT 4
28655: PUSH
28656: LD_INT 5
28658: PUSH
28659: LD_INT 7
28661: PUSH
28662: LD_INT 11
28664: PUSH
28665: LD_INT 12
28667: PUSH
28668: LD_INT 15
28670: PUSH
28671: LD_INT 16
28673: PUSH
28674: LD_INT 20
28676: PUSH
28677: LD_INT 21
28679: PUSH
28680: LD_INT 22
28682: PUSH
28683: LD_INT 23
28685: PUSH
28686: LD_INT 25
28688: PUSH
28689: LD_INT 26
28691: PUSH
28692: LD_INT 30
28694: PUSH
28695: LD_INT 31
28697: PUSH
28698: LD_INT 32
28700: PUSH
28701: LD_INT 33
28703: PUSH
28704: LD_INT 34
28706: PUSH
28707: LD_INT 35
28709: PUSH
28710: LD_INT 36
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 101
28738: PUSH
28739: LD_INT 102
28741: PUSH
28742: LD_INT 103
28744: PUSH
28745: LD_INT 106
28747: PUSH
28748: LD_INT 108
28750: PUSH
28751: LD_INT 112
28753: PUSH
28754: LD_INT 113
28756: PUSH
28757: LD_INT 114
28759: PUSH
28760: LD_INT 115
28762: PUSH
28763: LD_INT 116
28765: PUSH
28766: LD_INT 117
28768: PUSH
28769: LD_INT 118
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: ST_TO_ADDR
28790: GO 29033
28792: LD_INT 19
28794: DOUBLE
28795: EQUAL
28796: IFTRUE 28800
28798: GO 29032
28800: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
28801: LD_ADDR_VAR 0 1
28805: PUSH
28806: LD_INT 1
28808: PUSH
28809: LD_INT 2
28811: PUSH
28812: LD_INT 3
28814: PUSH
28815: LD_INT 4
28817: PUSH
28818: LD_INT 5
28820: PUSH
28821: LD_INT 6
28823: PUSH
28824: LD_INT 7
28826: PUSH
28827: LD_INT 8
28829: PUSH
28830: LD_INT 9
28832: PUSH
28833: LD_INT 10
28835: PUSH
28836: LD_INT 11
28838: PUSH
28839: LD_INT 12
28841: PUSH
28842: LD_INT 13
28844: PUSH
28845: LD_INT 14
28847: PUSH
28848: LD_INT 15
28850: PUSH
28851: LD_INT 16
28853: PUSH
28854: LD_INT 17
28856: PUSH
28857: LD_INT 18
28859: PUSH
28860: LD_INT 19
28862: PUSH
28863: LD_INT 20
28865: PUSH
28866: LD_INT 21
28868: PUSH
28869: LD_INT 22
28871: PUSH
28872: LD_INT 23
28874: PUSH
28875: LD_INT 24
28877: PUSH
28878: LD_INT 25
28880: PUSH
28881: LD_INT 26
28883: PUSH
28884: LD_INT 27
28886: PUSH
28887: LD_INT 28
28889: PUSH
28890: LD_INT 29
28892: PUSH
28893: LD_INT 30
28895: PUSH
28896: LD_INT 31
28898: PUSH
28899: LD_INT 32
28901: PUSH
28902: LD_INT 33
28904: PUSH
28905: LD_INT 34
28907: PUSH
28908: LD_INT 35
28910: PUSH
28911: LD_INT 36
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: PUSH
28952: LD_INT 101
28954: PUSH
28955: LD_INT 102
28957: PUSH
28958: LD_INT 103
28960: PUSH
28961: LD_INT 104
28963: PUSH
28964: LD_INT 105
28966: PUSH
28967: LD_INT 106
28969: PUSH
28970: LD_INT 107
28972: PUSH
28973: LD_INT 108
28975: PUSH
28976: LD_INT 109
28978: PUSH
28979: LD_INT 110
28981: PUSH
28982: LD_INT 111
28984: PUSH
28985: LD_INT 112
28987: PUSH
28988: LD_INT 113
28990: PUSH
28991: LD_INT 114
28993: PUSH
28994: LD_INT 115
28996: PUSH
28997: LD_INT 116
28999: PUSH
29000: LD_INT 117
29002: PUSH
29003: LD_INT 118
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: ST_TO_ADDR
29030: GO 29033
29032: POP
// end else
29033: GO 29264
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
29035: LD_ADDR_VAR 0 1
29039: PUSH
29040: LD_INT 1
29042: PUSH
29043: LD_INT 2
29045: PUSH
29046: LD_INT 3
29048: PUSH
29049: LD_INT 4
29051: PUSH
29052: LD_INT 5
29054: PUSH
29055: LD_INT 6
29057: PUSH
29058: LD_INT 7
29060: PUSH
29061: LD_INT 8
29063: PUSH
29064: LD_INT 9
29066: PUSH
29067: LD_INT 10
29069: PUSH
29070: LD_INT 11
29072: PUSH
29073: LD_INT 12
29075: PUSH
29076: LD_INT 13
29078: PUSH
29079: LD_INT 14
29081: PUSH
29082: LD_INT 15
29084: PUSH
29085: LD_INT 16
29087: PUSH
29088: LD_INT 17
29090: PUSH
29091: LD_INT 18
29093: PUSH
29094: LD_INT 19
29096: PUSH
29097: LD_INT 20
29099: PUSH
29100: LD_INT 21
29102: PUSH
29103: LD_INT 22
29105: PUSH
29106: LD_INT 23
29108: PUSH
29109: LD_INT 24
29111: PUSH
29112: LD_INT 25
29114: PUSH
29115: LD_INT 26
29117: PUSH
29118: LD_INT 27
29120: PUSH
29121: LD_INT 28
29123: PUSH
29124: LD_INT 29
29126: PUSH
29127: LD_INT 30
29129: PUSH
29130: LD_INT 31
29132: PUSH
29133: LD_INT 32
29135: PUSH
29136: LD_INT 33
29138: PUSH
29139: LD_INT 34
29141: PUSH
29142: LD_INT 35
29144: PUSH
29145: LD_INT 36
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 101
29188: PUSH
29189: LD_INT 102
29191: PUSH
29192: LD_INT 103
29194: PUSH
29195: LD_INT 104
29197: PUSH
29198: LD_INT 105
29200: PUSH
29201: LD_INT 106
29203: PUSH
29204: LD_INT 107
29206: PUSH
29207: LD_INT 108
29209: PUSH
29210: LD_INT 109
29212: PUSH
29213: LD_INT 110
29215: PUSH
29216: LD_INT 111
29218: PUSH
29219: LD_INT 112
29221: PUSH
29222: LD_INT 113
29224: PUSH
29225: LD_INT 114
29227: PUSH
29228: LD_INT 115
29230: PUSH
29231: LD_INT 116
29233: PUSH
29234: LD_INT 117
29236: PUSH
29237: LD_INT 118
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: ST_TO_ADDR
// if result then
29264: LD_VAR 0 1
29268: IFFALSE 29557
// begin normal :=  ;
29270: LD_ADDR_VAR 0 3
29274: PUSH
29275: LD_STRING 
29277: ST_TO_ADDR
// hardcore :=  ;
29278: LD_ADDR_VAR 0 4
29282: PUSH
29283: LD_STRING 
29285: ST_TO_ADDR
// for i = 1 to normalCounter do
29286: LD_ADDR_VAR 0 5
29290: PUSH
29291: DOUBLE
29292: LD_INT 1
29294: DEC
29295: ST_TO_ADDR
29296: LD_EXP 85
29300: PUSH
29301: FOR_TO
29302: IFFALSE 29403
// begin tmp := 0 ;
29304: LD_ADDR_VAR 0 2
29308: PUSH
29309: LD_STRING 0
29311: ST_TO_ADDR
// if result [ 1 ] then
29312: LD_VAR 0 1
29316: PUSH
29317: LD_INT 1
29319: ARRAY
29320: IFFALSE 29385
// if result [ 1 ] [ 1 ] = i then
29322: LD_VAR 0 1
29326: PUSH
29327: LD_INT 1
29329: ARRAY
29330: PUSH
29331: LD_INT 1
29333: ARRAY
29334: PUSH
29335: LD_VAR 0 5
29339: EQUAL
29340: IFFALSE 29385
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
29342: LD_ADDR_VAR 0 1
29346: PUSH
29347: LD_VAR 0 1
29351: PPUSH
29352: LD_INT 1
29354: PPUSH
29355: LD_VAR 0 1
29359: PUSH
29360: LD_INT 1
29362: ARRAY
29363: PPUSH
29364: LD_INT 1
29366: PPUSH
29367: CALL_OW 3
29371: PPUSH
29372: CALL_OW 1
29376: ST_TO_ADDR
// tmp := 1 ;
29377: LD_ADDR_VAR 0 2
29381: PUSH
29382: LD_STRING 1
29384: ST_TO_ADDR
// end ; normal := normal & tmp ;
29385: LD_ADDR_VAR 0 3
29389: PUSH
29390: LD_VAR 0 3
29394: PUSH
29395: LD_VAR 0 2
29399: STR
29400: ST_TO_ADDR
// end ;
29401: GO 29301
29403: POP
29404: POP
// for i = 1 to hardcoreCounter do
29405: LD_ADDR_VAR 0 5
29409: PUSH
29410: DOUBLE
29411: LD_INT 1
29413: DEC
29414: ST_TO_ADDR
29415: LD_EXP 86
29419: PUSH
29420: FOR_TO
29421: IFFALSE 29526
// begin tmp := 0 ;
29423: LD_ADDR_VAR 0 2
29427: PUSH
29428: LD_STRING 0
29430: ST_TO_ADDR
// if result [ 2 ] then
29431: LD_VAR 0 1
29435: PUSH
29436: LD_INT 2
29438: ARRAY
29439: IFFALSE 29508
// if result [ 2 ] [ 1 ] = 100 + i then
29441: LD_VAR 0 1
29445: PUSH
29446: LD_INT 2
29448: ARRAY
29449: PUSH
29450: LD_INT 1
29452: ARRAY
29453: PUSH
29454: LD_INT 100
29456: PUSH
29457: LD_VAR 0 5
29461: PLUS
29462: EQUAL
29463: IFFALSE 29508
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
29465: LD_ADDR_VAR 0 1
29469: PUSH
29470: LD_VAR 0 1
29474: PPUSH
29475: LD_INT 2
29477: PPUSH
29478: LD_VAR 0 1
29482: PUSH
29483: LD_INT 2
29485: ARRAY
29486: PPUSH
29487: LD_INT 1
29489: PPUSH
29490: CALL_OW 3
29494: PPUSH
29495: CALL_OW 1
29499: ST_TO_ADDR
// tmp := 1 ;
29500: LD_ADDR_VAR 0 2
29504: PUSH
29505: LD_STRING 1
29507: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
29508: LD_ADDR_VAR 0 4
29512: PUSH
29513: LD_VAR 0 4
29517: PUSH
29518: LD_VAR 0 2
29522: STR
29523: ST_TO_ADDR
// end ;
29524: GO 29420
29526: POP
29527: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
29528: LD_STRING getStreamItemsFromMission("
29530: PUSH
29531: LD_VAR 0 3
29535: STR
29536: PUSH
29537: LD_STRING ","
29539: STR
29540: PUSH
29541: LD_VAR 0 4
29545: STR
29546: PUSH
29547: LD_STRING ")
29549: STR
29550: PPUSH
29551: CALL_OW 559
// end else
29555: GO 29564
// ToLua ( getStreamItemsFromMission("","") ) ;
29557: LD_STRING getStreamItemsFromMission("","")
29559: PPUSH
29560: CALL_OW 559
// end ;
29564: LD_VAR 0 1
29568: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
29569: LD_EXP 84
29573: PUSH
29574: LD_EXP 89
29578: AND
29579: IFFALSE 29703
29581: GO 29583
29583: DISABLE
29584: LD_INT 0
29586: PPUSH
29587: PPUSH
// begin enable ;
29588: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
29589: LD_ADDR_VAR 0 2
29593: PUSH
29594: LD_INT 22
29596: PUSH
29597: LD_OWVAR 2
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 2
29608: PUSH
29609: LD_INT 34
29611: PUSH
29612: LD_INT 7
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: LD_INT 34
29621: PUSH
29622: LD_INT 45
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: LD_INT 34
29631: PUSH
29632: LD_INT 28
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 34
29641: PUSH
29642: LD_INT 47
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PPUSH
29660: CALL_OW 69
29664: ST_TO_ADDR
// if not tmp then
29665: LD_VAR 0 2
29669: NOT
29670: IFFALSE 29674
// exit ;
29672: GO 29703
// for i in tmp do
29674: LD_ADDR_VAR 0 1
29678: PUSH
29679: LD_VAR 0 2
29683: PUSH
29684: FOR_IN
29685: IFFALSE 29701
// begin SetLives ( i , 0 ) ;
29687: LD_VAR 0 1
29691: PPUSH
29692: LD_INT 0
29694: PPUSH
29695: CALL_OW 234
// end ;
29699: GO 29684
29701: POP
29702: POP
// end ;
29703: PPOPN 2
29705: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
29706: LD_EXP 84
29710: PUSH
29711: LD_EXP 90
29715: AND
29716: IFFALSE 29800
29718: GO 29720
29720: DISABLE
29721: LD_INT 0
29723: PPUSH
29724: PPUSH
// begin enable ;
29725: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
29726: LD_ADDR_VAR 0 2
29730: PUSH
29731: LD_INT 22
29733: PUSH
29734: LD_OWVAR 2
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 32
29745: PUSH
29746: LD_INT 3
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PPUSH
29757: CALL_OW 69
29761: ST_TO_ADDR
// if not tmp then
29762: LD_VAR 0 2
29766: NOT
29767: IFFALSE 29771
// exit ;
29769: GO 29800
// for i in tmp do
29771: LD_ADDR_VAR 0 1
29775: PUSH
29776: LD_VAR 0 2
29780: PUSH
29781: FOR_IN
29782: IFFALSE 29798
// begin SetLives ( i , 0 ) ;
29784: LD_VAR 0 1
29788: PPUSH
29789: LD_INT 0
29791: PPUSH
29792: CALL_OW 234
// end ;
29796: GO 29781
29798: POP
29799: POP
// end ;
29800: PPOPN 2
29802: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
29803: LD_EXP 84
29807: PUSH
29808: LD_EXP 87
29812: AND
29813: IFFALSE 29906
29815: GO 29817
29817: DISABLE
29818: LD_INT 0
29820: PPUSH
// begin enable ;
29821: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
29822: LD_ADDR_VAR 0 1
29826: PUSH
29827: LD_INT 22
29829: PUSH
29830: LD_OWVAR 2
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 2
29841: PUSH
29842: LD_INT 25
29844: PUSH
29845: LD_INT 5
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 25
29854: PUSH
29855: LD_INT 9
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 25
29864: PUSH
29865: LD_INT 8
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PPUSH
29882: CALL_OW 69
29886: PUSH
29887: FOR_IN
29888: IFFALSE 29904
// begin SetClass ( i , 1 ) ;
29890: LD_VAR 0 1
29894: PPUSH
29895: LD_INT 1
29897: PPUSH
29898: CALL_OW 336
// end ;
29902: GO 29887
29904: POP
29905: POP
// end ;
29906: PPOPN 1
29908: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
29909: LD_EXP 84
29913: PUSH
29914: LD_EXP 88
29918: AND
29919: PUSH
29920: LD_OWVAR 65
29924: PUSH
29925: LD_INT 7
29927: LESS
29928: AND
29929: IFFALSE 29943
29931: GO 29933
29933: DISABLE
// begin enable ;
29934: ENABLE
// game_speed := 7 ;
29935: LD_ADDR_OWVAR 65
29939: PUSH
29940: LD_INT 7
29942: ST_TO_ADDR
// end ;
29943: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
29944: LD_EXP 84
29948: PUSH
29949: LD_EXP 91
29953: AND
29954: IFFALSE 30156
29956: GO 29958
29958: DISABLE
29959: LD_INT 0
29961: PPUSH
29962: PPUSH
29963: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29964: LD_ADDR_VAR 0 3
29968: PUSH
29969: LD_INT 81
29971: PUSH
29972: LD_OWVAR 2
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 21
29983: PUSH
29984: LD_INT 1
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PPUSH
29995: CALL_OW 69
29999: ST_TO_ADDR
// if not tmp then
30000: LD_VAR 0 3
30004: NOT
30005: IFFALSE 30009
// exit ;
30007: GO 30156
// if tmp > 5 then
30009: LD_VAR 0 3
30013: PUSH
30014: LD_INT 5
30016: GREATER
30017: IFFALSE 30029
// k := 5 else
30019: LD_ADDR_VAR 0 2
30023: PUSH
30024: LD_INT 5
30026: ST_TO_ADDR
30027: GO 30039
// k := tmp ;
30029: LD_ADDR_VAR 0 2
30033: PUSH
30034: LD_VAR 0 3
30038: ST_TO_ADDR
// for i := 1 to k do
30039: LD_ADDR_VAR 0 1
30043: PUSH
30044: DOUBLE
30045: LD_INT 1
30047: DEC
30048: ST_TO_ADDR
30049: LD_VAR 0 2
30053: PUSH
30054: FOR_TO
30055: IFFALSE 30154
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
30057: LD_VAR 0 3
30061: PUSH
30062: LD_VAR 0 1
30066: ARRAY
30067: PPUSH
30068: LD_VAR 0 1
30072: PUSH
30073: LD_INT 4
30075: MOD
30076: PUSH
30077: LD_INT 1
30079: PLUS
30080: PPUSH
30081: CALL_OW 259
30085: PUSH
30086: LD_INT 10
30088: LESS
30089: IFFALSE 30152
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
30091: LD_VAR 0 3
30095: PUSH
30096: LD_VAR 0 1
30100: ARRAY
30101: PPUSH
30102: LD_VAR 0 1
30106: PUSH
30107: LD_INT 4
30109: MOD
30110: PUSH
30111: LD_INT 1
30113: PLUS
30114: PPUSH
30115: LD_VAR 0 3
30119: PUSH
30120: LD_VAR 0 1
30124: ARRAY
30125: PPUSH
30126: LD_VAR 0 1
30130: PUSH
30131: LD_INT 4
30133: MOD
30134: PUSH
30135: LD_INT 1
30137: PLUS
30138: PPUSH
30139: CALL_OW 259
30143: PUSH
30144: LD_INT 1
30146: PLUS
30147: PPUSH
30148: CALL_OW 237
30152: GO 30054
30154: POP
30155: POP
// end ;
30156: PPOPN 3
30158: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
30159: LD_EXP 84
30163: PUSH
30164: LD_EXP 92
30168: AND
30169: IFFALSE 30189
30171: GO 30173
30173: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
30174: LD_INT 4
30176: PPUSH
30177: LD_OWVAR 2
30181: PPUSH
30182: LD_INT 0
30184: PPUSH
30185: CALL_OW 324
30189: END
// every 0 0$1 trigger StreamModeActive and sShovel do
30190: LD_EXP 84
30194: PUSH
30195: LD_EXP 121
30199: AND
30200: IFFALSE 30220
30202: GO 30204
30204: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
30205: LD_INT 19
30207: PPUSH
30208: LD_OWVAR 2
30212: PPUSH
30213: LD_INT 0
30215: PPUSH
30216: CALL_OW 324
30220: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
30221: LD_EXP 84
30225: PUSH
30226: LD_EXP 93
30230: AND
30231: IFFALSE 30333
30233: GO 30235
30235: DISABLE
30236: LD_INT 0
30238: PPUSH
30239: PPUSH
// begin enable ;
30240: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
30241: LD_ADDR_VAR 0 2
30245: PUSH
30246: LD_INT 22
30248: PUSH
30249: LD_OWVAR 2
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 2
30260: PUSH
30261: LD_INT 34
30263: PUSH
30264: LD_INT 11
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 34
30273: PUSH
30274: LD_INT 30
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: LIST
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PPUSH
30290: CALL_OW 69
30294: ST_TO_ADDR
// if not tmp then
30295: LD_VAR 0 2
30299: NOT
30300: IFFALSE 30304
// exit ;
30302: GO 30333
// for i in tmp do
30304: LD_ADDR_VAR 0 1
30308: PUSH
30309: LD_VAR 0 2
30313: PUSH
30314: FOR_IN
30315: IFFALSE 30331
// begin SetLives ( i , 0 ) ;
30317: LD_VAR 0 1
30321: PPUSH
30322: LD_INT 0
30324: PPUSH
30325: CALL_OW 234
// end ;
30329: GO 30314
30331: POP
30332: POP
// end ;
30333: PPOPN 2
30335: END
// every 0 0$1 trigger StreamModeActive and sBunker do
30336: LD_EXP 84
30340: PUSH
30341: LD_EXP 94
30345: AND
30346: IFFALSE 30366
30348: GO 30350
30350: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
30351: LD_INT 32
30353: PPUSH
30354: LD_OWVAR 2
30358: PPUSH
30359: LD_INT 0
30361: PPUSH
30362: CALL_OW 324
30366: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
30367: LD_EXP 84
30371: PUSH
30372: LD_EXP 95
30376: AND
30377: IFFALSE 30558
30379: GO 30381
30381: DISABLE
30382: LD_INT 0
30384: PPUSH
30385: PPUSH
30386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
30387: LD_ADDR_VAR 0 2
30391: PUSH
30392: LD_INT 22
30394: PUSH
30395: LD_OWVAR 2
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 33
30406: PUSH
30407: LD_INT 3
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PPUSH
30418: CALL_OW 69
30422: ST_TO_ADDR
// if not tmp then
30423: LD_VAR 0 2
30427: NOT
30428: IFFALSE 30432
// exit ;
30430: GO 30558
// side := 0 ;
30432: LD_ADDR_VAR 0 3
30436: PUSH
30437: LD_INT 0
30439: ST_TO_ADDR
// for i := 1 to 8 do
30440: LD_ADDR_VAR 0 1
30444: PUSH
30445: DOUBLE
30446: LD_INT 1
30448: DEC
30449: ST_TO_ADDR
30450: LD_INT 8
30452: PUSH
30453: FOR_TO
30454: IFFALSE 30502
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
30456: LD_OWVAR 2
30460: PUSH
30461: LD_VAR 0 1
30465: NONEQUAL
30466: PUSH
30467: LD_OWVAR 2
30471: PPUSH
30472: LD_VAR 0 1
30476: PPUSH
30477: CALL_OW 81
30481: PUSH
30482: LD_INT 2
30484: EQUAL
30485: AND
30486: IFFALSE 30500
// begin side := i ;
30488: LD_ADDR_VAR 0 3
30492: PUSH
30493: LD_VAR 0 1
30497: ST_TO_ADDR
// break ;
30498: GO 30502
// end ;
30500: GO 30453
30502: POP
30503: POP
// if not side then
30504: LD_VAR 0 3
30508: NOT
30509: IFFALSE 30513
// exit ;
30511: GO 30558
// for i := 1 to tmp do
30513: LD_ADDR_VAR 0 1
30517: PUSH
30518: DOUBLE
30519: LD_INT 1
30521: DEC
30522: ST_TO_ADDR
30523: LD_VAR 0 2
30527: PUSH
30528: FOR_TO
30529: IFFALSE 30556
// if Prob ( 60 ) then
30531: LD_INT 60
30533: PPUSH
30534: CALL_OW 13
30538: IFFALSE 30554
// SetSide ( i , side ) ;
30540: LD_VAR 0 1
30544: PPUSH
30545: LD_VAR 0 3
30549: PPUSH
30550: CALL_OW 235
30554: GO 30528
30556: POP
30557: POP
// end ;
30558: PPOPN 3
30560: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
30561: LD_EXP 84
30565: PUSH
30566: LD_EXP 97
30570: AND
30571: IFFALSE 30690
30573: GO 30575
30575: DISABLE
30576: LD_INT 0
30578: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
30579: LD_ADDR_VAR 0 1
30583: PUSH
30584: LD_INT 22
30586: PUSH
30587: LD_OWVAR 2
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 21
30598: PUSH
30599: LD_INT 1
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 3
30608: PUSH
30609: LD_INT 23
30611: PUSH
30612: LD_INT 0
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: LIST
30627: PPUSH
30628: CALL_OW 69
30632: PUSH
30633: FOR_IN
30634: IFFALSE 30688
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
30636: LD_VAR 0 1
30640: PPUSH
30641: CALL_OW 257
30645: PUSH
30646: LD_INT 1
30648: PUSH
30649: LD_INT 2
30651: PUSH
30652: LD_INT 3
30654: PUSH
30655: LD_INT 4
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: IN
30664: IFFALSE 30686
// SetClass ( un , rand ( 1 , 4 ) ) ;
30666: LD_VAR 0 1
30670: PPUSH
30671: LD_INT 1
30673: PPUSH
30674: LD_INT 4
30676: PPUSH
30677: CALL_OW 12
30681: PPUSH
30682: CALL_OW 336
30686: GO 30633
30688: POP
30689: POP
// end ;
30690: PPOPN 1
30692: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
30693: LD_EXP 84
30697: PUSH
30698: LD_EXP 96
30702: AND
30703: IFFALSE 30782
30705: GO 30707
30707: DISABLE
30708: LD_INT 0
30710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
30711: LD_ADDR_VAR 0 1
30715: PUSH
30716: LD_INT 22
30718: PUSH
30719: LD_OWVAR 2
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 21
30730: PUSH
30731: LD_INT 3
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PPUSH
30742: CALL_OW 69
30746: ST_TO_ADDR
// if not tmp then
30747: LD_VAR 0 1
30751: NOT
30752: IFFALSE 30756
// exit ;
30754: GO 30782
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
30756: LD_VAR 0 1
30760: PUSH
30761: LD_INT 1
30763: PPUSH
30764: LD_VAR 0 1
30768: PPUSH
30769: CALL_OW 12
30773: ARRAY
30774: PPUSH
30775: LD_INT 100
30777: PPUSH
30778: CALL_OW 234
// end ;
30782: PPOPN 1
30784: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
30785: LD_EXP 84
30789: PUSH
30790: LD_EXP 98
30794: AND
30795: IFFALSE 30893
30797: GO 30799
30799: DISABLE
30800: LD_INT 0
30802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30803: LD_ADDR_VAR 0 1
30807: PUSH
30808: LD_INT 22
30810: PUSH
30811: LD_OWVAR 2
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 21
30822: PUSH
30823: LD_INT 1
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PPUSH
30834: CALL_OW 69
30838: ST_TO_ADDR
// if not tmp then
30839: LD_VAR 0 1
30843: NOT
30844: IFFALSE 30848
// exit ;
30846: GO 30893
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
30848: LD_VAR 0 1
30852: PUSH
30853: LD_INT 1
30855: PPUSH
30856: LD_VAR 0 1
30860: PPUSH
30861: CALL_OW 12
30865: ARRAY
30866: PPUSH
30867: LD_INT 1
30869: PPUSH
30870: LD_INT 4
30872: PPUSH
30873: CALL_OW 12
30877: PPUSH
30878: LD_INT 3000
30880: PPUSH
30881: LD_INT 9000
30883: PPUSH
30884: CALL_OW 12
30888: PPUSH
30889: CALL_OW 492
// end ;
30893: PPOPN 1
30895: END
// every 0 0$1 trigger StreamModeActive and sDepot do
30896: LD_EXP 84
30900: PUSH
30901: LD_EXP 99
30905: AND
30906: IFFALSE 30926
30908: GO 30910
30910: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
30911: LD_INT 1
30913: PPUSH
30914: LD_OWVAR 2
30918: PPUSH
30919: LD_INT 0
30921: PPUSH
30922: CALL_OW 324
30926: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
30927: LD_EXP 84
30931: PUSH
30932: LD_EXP 100
30936: AND
30937: IFFALSE 31020
30939: GO 30941
30941: DISABLE
30942: LD_INT 0
30944: PPUSH
30945: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
30946: LD_ADDR_VAR 0 2
30950: PUSH
30951: LD_INT 22
30953: PUSH
30954: LD_OWVAR 2
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 21
30965: PUSH
30966: LD_INT 3
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PPUSH
30977: CALL_OW 69
30981: ST_TO_ADDR
// if not tmp then
30982: LD_VAR 0 2
30986: NOT
30987: IFFALSE 30991
// exit ;
30989: GO 31020
// for i in tmp do
30991: LD_ADDR_VAR 0 1
30995: PUSH
30996: LD_VAR 0 2
31000: PUSH
31001: FOR_IN
31002: IFFALSE 31018
// SetBLevel ( i , 10 ) ;
31004: LD_VAR 0 1
31008: PPUSH
31009: LD_INT 10
31011: PPUSH
31012: CALL_OW 241
31016: GO 31001
31018: POP
31019: POP
// end ;
31020: PPOPN 2
31022: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
31023: LD_EXP 84
31027: PUSH
31028: LD_EXP 101
31032: AND
31033: IFFALSE 31144
31035: GO 31037
31037: DISABLE
31038: LD_INT 0
31040: PPUSH
31041: PPUSH
31042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31043: LD_ADDR_VAR 0 3
31047: PUSH
31048: LD_INT 22
31050: PUSH
31051: LD_OWVAR 2
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 25
31062: PUSH
31063: LD_INT 1
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PPUSH
31074: CALL_OW 69
31078: ST_TO_ADDR
// if not tmp then
31079: LD_VAR 0 3
31083: NOT
31084: IFFALSE 31088
// exit ;
31086: GO 31144
// un := tmp [ rand ( 1 , tmp ) ] ;
31088: LD_ADDR_VAR 0 2
31092: PUSH
31093: LD_VAR 0 3
31097: PUSH
31098: LD_INT 1
31100: PPUSH
31101: LD_VAR 0 3
31105: PPUSH
31106: CALL_OW 12
31110: ARRAY
31111: ST_TO_ADDR
// if Crawls ( un ) then
31112: LD_VAR 0 2
31116: PPUSH
31117: CALL_OW 318
31121: IFFALSE 31132
// ComWalk ( un ) ;
31123: LD_VAR 0 2
31127: PPUSH
31128: CALL_OW 138
// SetClass ( un , class_sniper ) ;
31132: LD_VAR 0 2
31136: PPUSH
31137: LD_INT 5
31139: PPUSH
31140: CALL_OW 336
// end ;
31144: PPOPN 3
31146: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
31147: LD_EXP 84
31151: PUSH
31152: LD_EXP 102
31156: AND
31157: PUSH
31158: LD_OWVAR 67
31162: PUSH
31163: LD_INT 4
31165: LESS
31166: AND
31167: IFFALSE 31186
31169: GO 31171
31171: DISABLE
// begin Difficulty := Difficulty + 1 ;
31172: LD_ADDR_OWVAR 67
31176: PUSH
31177: LD_OWVAR 67
31181: PUSH
31182: LD_INT 1
31184: PLUS
31185: ST_TO_ADDR
// end ;
31186: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
31187: LD_EXP 84
31191: PUSH
31192: LD_EXP 103
31196: AND
31197: IFFALSE 31300
31199: GO 31201
31201: DISABLE
31202: LD_INT 0
31204: PPUSH
// begin for i := 1 to 5 do
31205: LD_ADDR_VAR 0 1
31209: PUSH
31210: DOUBLE
31211: LD_INT 1
31213: DEC
31214: ST_TO_ADDR
31215: LD_INT 5
31217: PUSH
31218: FOR_TO
31219: IFFALSE 31298
// begin uc_nation := nation_nature ;
31221: LD_ADDR_OWVAR 21
31225: PUSH
31226: LD_INT 0
31228: ST_TO_ADDR
// uc_side := 0 ;
31229: LD_ADDR_OWVAR 20
31233: PUSH
31234: LD_INT 0
31236: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
31237: LD_ADDR_OWVAR 29
31241: PUSH
31242: LD_INT 12
31244: PUSH
31245: LD_INT 12
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: ST_TO_ADDR
// hc_agressivity := 20 ;
31252: LD_ADDR_OWVAR 35
31256: PUSH
31257: LD_INT 20
31259: ST_TO_ADDR
// hc_class := class_tiger ;
31260: LD_ADDR_OWVAR 28
31264: PUSH
31265: LD_INT 14
31267: ST_TO_ADDR
// hc_gallery :=  ;
31268: LD_ADDR_OWVAR 33
31272: PUSH
31273: LD_STRING 
31275: ST_TO_ADDR
// hc_name :=  ;
31276: LD_ADDR_OWVAR 26
31280: PUSH
31281: LD_STRING 
31283: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
31284: CALL_OW 44
31288: PPUSH
31289: LD_INT 0
31291: PPUSH
31292: CALL_OW 51
// end ;
31296: GO 31218
31298: POP
31299: POP
// end ;
31300: PPOPN 1
31302: END
// every 0 0$1 trigger StreamModeActive and sBomb do
31303: LD_EXP 84
31307: PUSH
31308: LD_EXP 104
31312: AND
31313: IFFALSE 31322
31315: GO 31317
31317: DISABLE
// StreamSibBomb ;
31318: CALL 31323 0 0
31322: END
// export function StreamSibBomb ; var i , x , y ; begin
31323: LD_INT 0
31325: PPUSH
31326: PPUSH
31327: PPUSH
31328: PPUSH
// result := false ;
31329: LD_ADDR_VAR 0 1
31333: PUSH
31334: LD_INT 0
31336: ST_TO_ADDR
// for i := 1 to 16 do
31337: LD_ADDR_VAR 0 2
31341: PUSH
31342: DOUBLE
31343: LD_INT 1
31345: DEC
31346: ST_TO_ADDR
31347: LD_INT 16
31349: PUSH
31350: FOR_TO
31351: IFFALSE 31550
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31353: LD_ADDR_VAR 0 3
31357: PUSH
31358: LD_INT 10
31360: PUSH
31361: LD_INT 20
31363: PUSH
31364: LD_INT 30
31366: PUSH
31367: LD_INT 40
31369: PUSH
31370: LD_INT 50
31372: PUSH
31373: LD_INT 60
31375: PUSH
31376: LD_INT 70
31378: PUSH
31379: LD_INT 80
31381: PUSH
31382: LD_INT 90
31384: PUSH
31385: LD_INT 100
31387: PUSH
31388: LD_INT 110
31390: PUSH
31391: LD_INT 120
31393: PUSH
31394: LD_INT 130
31396: PUSH
31397: LD_INT 140
31399: PUSH
31400: LD_INT 150
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 1
31422: PPUSH
31423: LD_INT 15
31425: PPUSH
31426: CALL_OW 12
31430: ARRAY
31431: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31432: LD_ADDR_VAR 0 4
31436: PUSH
31437: LD_INT 10
31439: PUSH
31440: LD_INT 20
31442: PUSH
31443: LD_INT 30
31445: PUSH
31446: LD_INT 40
31448: PUSH
31449: LD_INT 50
31451: PUSH
31452: LD_INT 60
31454: PUSH
31455: LD_INT 70
31457: PUSH
31458: LD_INT 80
31460: PUSH
31461: LD_INT 90
31463: PUSH
31464: LD_INT 100
31466: PUSH
31467: LD_INT 110
31469: PUSH
31470: LD_INT 120
31472: PUSH
31473: LD_INT 130
31475: PUSH
31476: LD_INT 140
31478: PUSH
31479: LD_INT 150
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 1
31501: PPUSH
31502: LD_INT 15
31504: PPUSH
31505: CALL_OW 12
31509: ARRAY
31510: ST_TO_ADDR
// if ValidHex ( x , y ) then
31511: LD_VAR 0 3
31515: PPUSH
31516: LD_VAR 0 4
31520: PPUSH
31521: CALL_OW 488
31525: IFFALSE 31548
// begin result := [ x , y ] ;
31527: LD_ADDR_VAR 0 1
31531: PUSH
31532: LD_VAR 0 3
31536: PUSH
31537: LD_VAR 0 4
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: ST_TO_ADDR
// break ;
31546: GO 31550
// end ; end ;
31548: GO 31350
31550: POP
31551: POP
// if result then
31552: LD_VAR 0 1
31556: IFFALSE 31616
// begin ToLua ( playSibBomb() ) ;
31558: LD_STRING playSibBomb()
31560: PPUSH
31561: CALL_OW 559
// wait ( 0 0$14 ) ;
31565: LD_INT 490
31567: PPUSH
31568: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
31572: LD_VAR 0 1
31576: PUSH
31577: LD_INT 1
31579: ARRAY
31580: PPUSH
31581: LD_VAR 0 1
31585: PUSH
31586: LD_INT 2
31588: ARRAY
31589: PPUSH
31590: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
31594: LD_VAR 0 1
31598: PUSH
31599: LD_INT 1
31601: ARRAY
31602: PPUSH
31603: LD_VAR 0 1
31607: PUSH
31608: LD_INT 2
31610: ARRAY
31611: PPUSH
31612: CALL_OW 429
// end ; end ;
31616: LD_VAR 0 1
31620: RET
// every 0 0$1 trigger StreamModeActive and sReset do
31621: LD_EXP 84
31625: PUSH
31626: LD_EXP 106
31630: AND
31631: IFFALSE 31643
31633: GO 31635
31635: DISABLE
// YouLost (  ) ;
31636: LD_STRING 
31638: PPUSH
31639: CALL_OW 104
31643: END
// every 0 0$1 trigger StreamModeActive and sFog do
31644: LD_EXP 84
31648: PUSH
31649: LD_EXP 105
31653: AND
31654: IFFALSE 31668
31656: GO 31658
31658: DISABLE
// FogOff ( your_side ) ;
31659: LD_OWVAR 2
31663: PPUSH
31664: CALL_OW 344
31668: END
// every 0 0$1 trigger StreamModeActive and sSun do
31669: LD_EXP 84
31673: PUSH
31674: LD_EXP 107
31678: AND
31679: IFFALSE 31707
31681: GO 31683
31683: DISABLE
// begin solar_recharge_percent := 0 ;
31684: LD_ADDR_OWVAR 79
31688: PUSH
31689: LD_INT 0
31691: ST_TO_ADDR
// wait ( 5 5$00 ) ;
31692: LD_INT 10500
31694: PPUSH
31695: CALL_OW 67
// solar_recharge_percent := 100 ;
31699: LD_ADDR_OWVAR 79
31703: PUSH
31704: LD_INT 100
31706: ST_TO_ADDR
// end ;
31707: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
31708: LD_EXP 84
31712: PUSH
31713: LD_EXP 108
31717: AND
31718: IFFALSE 31957
31720: GO 31722
31722: DISABLE
31723: LD_INT 0
31725: PPUSH
31726: PPUSH
31727: PPUSH
// begin tmp := [ ] ;
31728: LD_ADDR_VAR 0 3
31732: PUSH
31733: EMPTY
31734: ST_TO_ADDR
// for i := 1 to 6 do
31735: LD_ADDR_VAR 0 1
31739: PUSH
31740: DOUBLE
31741: LD_INT 1
31743: DEC
31744: ST_TO_ADDR
31745: LD_INT 6
31747: PUSH
31748: FOR_TO
31749: IFFALSE 31854
// begin uc_nation := nation_nature ;
31751: LD_ADDR_OWVAR 21
31755: PUSH
31756: LD_INT 0
31758: ST_TO_ADDR
// uc_side := 0 ;
31759: LD_ADDR_OWVAR 20
31763: PUSH
31764: LD_INT 0
31766: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
31767: LD_ADDR_OWVAR 29
31771: PUSH
31772: LD_INT 12
31774: PUSH
31775: LD_INT 12
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: ST_TO_ADDR
// hc_agressivity := 20 ;
31782: LD_ADDR_OWVAR 35
31786: PUSH
31787: LD_INT 20
31789: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
31790: LD_ADDR_OWVAR 28
31794: PUSH
31795: LD_INT 17
31797: ST_TO_ADDR
// hc_gallery :=  ;
31798: LD_ADDR_OWVAR 33
31802: PUSH
31803: LD_STRING 
31805: ST_TO_ADDR
// hc_name :=  ;
31806: LD_ADDR_OWVAR 26
31810: PUSH
31811: LD_STRING 
31813: ST_TO_ADDR
// un := CreateHuman ;
31814: LD_ADDR_VAR 0 2
31818: PUSH
31819: CALL_OW 44
31823: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
31824: LD_VAR 0 2
31828: PPUSH
31829: LD_INT 1
31831: PPUSH
31832: CALL_OW 51
// tmp := tmp ^ un ;
31836: LD_ADDR_VAR 0 3
31840: PUSH
31841: LD_VAR 0 3
31845: PUSH
31846: LD_VAR 0 2
31850: ADD
31851: ST_TO_ADDR
// end ;
31852: GO 31748
31854: POP
31855: POP
// repeat wait ( 0 0$1 ) ;
31856: LD_INT 35
31858: PPUSH
31859: CALL_OW 67
// for un in tmp do
31863: LD_ADDR_VAR 0 2
31867: PUSH
31868: LD_VAR 0 3
31872: PUSH
31873: FOR_IN
31874: IFFALSE 31948
// begin if IsDead ( un ) then
31876: LD_VAR 0 2
31880: PPUSH
31881: CALL_OW 301
31885: IFFALSE 31905
// begin tmp := tmp diff un ;
31887: LD_ADDR_VAR 0 3
31891: PUSH
31892: LD_VAR 0 3
31896: PUSH
31897: LD_VAR 0 2
31901: DIFF
31902: ST_TO_ADDR
// continue ;
31903: GO 31873
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
31905: LD_VAR 0 2
31909: PPUSH
31910: LD_INT 3
31912: PUSH
31913: LD_INT 22
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PPUSH
31927: CALL_OW 69
31931: PPUSH
31932: LD_VAR 0 2
31936: PPUSH
31937: CALL_OW 74
31941: PPUSH
31942: CALL_OW 115
// end ;
31946: GO 31873
31948: POP
31949: POP
// until not tmp ;
31950: LD_VAR 0 3
31954: NOT
31955: IFFALSE 31856
// end ;
31957: PPOPN 3
31959: END
// every 0 0$1 trigger StreamModeActive and sTroll do
31960: LD_EXP 84
31964: PUSH
31965: LD_EXP 109
31969: AND
31970: IFFALSE 32024
31972: GO 31974
31974: DISABLE
// begin ToLua ( displayTroll(); ) ;
31975: LD_STRING displayTroll();
31977: PPUSH
31978: CALL_OW 559
// wait ( 3 3$00 ) ;
31982: LD_INT 6300
31984: PPUSH
31985: CALL_OW 67
// ToLua ( hideTroll(); ) ;
31989: LD_STRING hideTroll();
31991: PPUSH
31992: CALL_OW 559
// wait ( 1 1$00 ) ;
31996: LD_INT 2100
31998: PPUSH
31999: CALL_OW 67
// ToLua ( displayTroll(); ) ;
32003: LD_STRING displayTroll();
32005: PPUSH
32006: CALL_OW 559
// wait ( 1 1$00 ) ;
32010: LD_INT 2100
32012: PPUSH
32013: CALL_OW 67
// ToLua ( hideTroll(); ) ;
32017: LD_STRING hideTroll();
32019: PPUSH
32020: CALL_OW 559
// end ;
32024: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
32025: LD_EXP 84
32029: PUSH
32030: LD_EXP 110
32034: AND
32035: IFFALSE 32098
32037: GO 32039
32039: DISABLE
32040: LD_INT 0
32042: PPUSH
// begin p := 0 ;
32043: LD_ADDR_VAR 0 1
32047: PUSH
32048: LD_INT 0
32050: ST_TO_ADDR
// repeat game_speed := 1 ;
32051: LD_ADDR_OWVAR 65
32055: PUSH
32056: LD_INT 1
32058: ST_TO_ADDR
// wait ( 0 0$1 ) ;
32059: LD_INT 35
32061: PPUSH
32062: CALL_OW 67
// p := p + 1 ;
32066: LD_ADDR_VAR 0 1
32070: PUSH
32071: LD_VAR 0 1
32075: PUSH
32076: LD_INT 1
32078: PLUS
32079: ST_TO_ADDR
// until p >= 60 ;
32080: LD_VAR 0 1
32084: PUSH
32085: LD_INT 60
32087: GREATEREQUAL
32088: IFFALSE 32051
// game_speed := 4 ;
32090: LD_ADDR_OWVAR 65
32094: PUSH
32095: LD_INT 4
32097: ST_TO_ADDR
// end ;
32098: PPOPN 1
32100: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
32101: LD_EXP 84
32105: PUSH
32106: LD_EXP 111
32110: AND
32111: IFFALSE 32257
32113: GO 32115
32115: DISABLE
32116: LD_INT 0
32118: PPUSH
32119: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32120: LD_ADDR_VAR 0 1
32124: PUSH
32125: LD_INT 22
32127: PUSH
32128: LD_OWVAR 2
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 2
32139: PUSH
32140: LD_INT 30
32142: PUSH
32143: LD_INT 0
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 30
32152: PUSH
32153: LD_INT 1
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: LIST
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PPUSH
32169: CALL_OW 69
32173: ST_TO_ADDR
// if not depot then
32174: LD_VAR 0 1
32178: NOT
32179: IFFALSE 32183
// exit ;
32181: GO 32257
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
32183: LD_ADDR_VAR 0 2
32187: PUSH
32188: LD_VAR 0 1
32192: PUSH
32193: LD_INT 1
32195: PPUSH
32196: LD_VAR 0 1
32200: PPUSH
32201: CALL_OW 12
32205: ARRAY
32206: PPUSH
32207: CALL_OW 274
32211: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
32212: LD_VAR 0 2
32216: PPUSH
32217: LD_INT 1
32219: PPUSH
32220: LD_INT 0
32222: PPUSH
32223: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
32227: LD_VAR 0 2
32231: PPUSH
32232: LD_INT 2
32234: PPUSH
32235: LD_INT 0
32237: PPUSH
32238: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
32242: LD_VAR 0 2
32246: PPUSH
32247: LD_INT 3
32249: PPUSH
32250: LD_INT 0
32252: PPUSH
32253: CALL_OW 277
// end ;
32257: PPOPN 2
32259: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
32260: LD_EXP 84
32264: PUSH
32265: LD_EXP 112
32269: AND
32270: IFFALSE 32367
32272: GO 32274
32274: DISABLE
32275: LD_INT 0
32277: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32278: LD_ADDR_VAR 0 1
32282: PUSH
32283: LD_INT 22
32285: PUSH
32286: LD_OWVAR 2
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 21
32297: PUSH
32298: LD_INT 1
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 3
32307: PUSH
32308: LD_INT 23
32310: PUSH
32311: LD_INT 0
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: LIST
32326: PPUSH
32327: CALL_OW 69
32331: ST_TO_ADDR
// if not tmp then
32332: LD_VAR 0 1
32336: NOT
32337: IFFALSE 32341
// exit ;
32339: GO 32367
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
32341: LD_VAR 0 1
32345: PUSH
32346: LD_INT 1
32348: PPUSH
32349: LD_VAR 0 1
32353: PPUSH
32354: CALL_OW 12
32358: ARRAY
32359: PPUSH
32360: LD_INT 200
32362: PPUSH
32363: CALL_OW 234
// end ;
32367: PPOPN 1
32369: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
32370: LD_EXP 84
32374: PUSH
32375: LD_EXP 113
32379: AND
32380: IFFALSE 32459
32382: GO 32384
32384: DISABLE
32385: LD_INT 0
32387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
32388: LD_ADDR_VAR 0 1
32392: PUSH
32393: LD_INT 22
32395: PUSH
32396: LD_OWVAR 2
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 21
32407: PUSH
32408: LD_INT 2
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PPUSH
32419: CALL_OW 69
32423: ST_TO_ADDR
// if not tmp then
32424: LD_VAR 0 1
32428: NOT
32429: IFFALSE 32433
// exit ;
32431: GO 32459
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
32433: LD_VAR 0 1
32437: PUSH
32438: LD_INT 1
32440: PPUSH
32441: LD_VAR 0 1
32445: PPUSH
32446: CALL_OW 12
32450: ARRAY
32451: PPUSH
32452: LD_INT 60
32454: PPUSH
32455: CALL_OW 234
// end ;
32459: PPOPN 1
32461: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
32462: LD_EXP 84
32466: PUSH
32467: LD_EXP 114
32471: AND
32472: IFFALSE 32571
32474: GO 32476
32476: DISABLE
32477: LD_INT 0
32479: PPUSH
32480: PPUSH
// begin enable ;
32481: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
32482: LD_ADDR_VAR 0 1
32486: PUSH
32487: LD_INT 22
32489: PUSH
32490: LD_OWVAR 2
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 61
32501: PUSH
32502: EMPTY
32503: LIST
32504: PUSH
32505: LD_INT 33
32507: PUSH
32508: LD_INT 2
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: LIST
32519: PPUSH
32520: CALL_OW 69
32524: ST_TO_ADDR
// if not tmp then
32525: LD_VAR 0 1
32529: NOT
32530: IFFALSE 32534
// exit ;
32532: GO 32571
// for i in tmp do
32534: LD_ADDR_VAR 0 2
32538: PUSH
32539: LD_VAR 0 1
32543: PUSH
32544: FOR_IN
32545: IFFALSE 32569
// if IsControledBy ( i ) then
32547: LD_VAR 0 2
32551: PPUSH
32552: CALL_OW 312
32556: IFFALSE 32567
// ComUnlink ( i ) ;
32558: LD_VAR 0 2
32562: PPUSH
32563: CALL_OW 136
32567: GO 32544
32569: POP
32570: POP
// end ;
32571: PPOPN 2
32573: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
32574: LD_EXP 84
32578: PUSH
32579: LD_EXP 115
32583: AND
32584: IFFALSE 32724
32586: GO 32588
32588: DISABLE
32589: LD_INT 0
32591: PPUSH
32592: PPUSH
// begin ToLua ( displayPowell(); ) ;
32593: LD_STRING displayPowell();
32595: PPUSH
32596: CALL_OW 559
// uc_side := 0 ;
32600: LD_ADDR_OWVAR 20
32604: PUSH
32605: LD_INT 0
32607: ST_TO_ADDR
// uc_nation := 2 ;
32608: LD_ADDR_OWVAR 21
32612: PUSH
32613: LD_INT 2
32615: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
32616: LD_ADDR_OWVAR 37
32620: PUSH
32621: LD_INT 14
32623: ST_TO_ADDR
// vc_engine := engine_siberite ;
32624: LD_ADDR_OWVAR 39
32628: PUSH
32629: LD_INT 3
32631: ST_TO_ADDR
// vc_control := control_apeman ;
32632: LD_ADDR_OWVAR 38
32636: PUSH
32637: LD_INT 5
32639: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
32640: LD_ADDR_OWVAR 40
32644: PUSH
32645: LD_INT 29
32647: ST_TO_ADDR
// un := CreateVehicle ;
32648: LD_ADDR_VAR 0 2
32652: PUSH
32653: CALL_OW 45
32657: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32658: LD_VAR 0 2
32662: PPUSH
32663: LD_INT 1
32665: PPUSH
32666: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
32670: LD_INT 35
32672: PPUSH
32673: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
32677: LD_VAR 0 2
32681: PPUSH
32682: LD_INT 22
32684: PUSH
32685: LD_OWVAR 2
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PPUSH
32694: CALL_OW 69
32698: PPUSH
32699: LD_VAR 0 2
32703: PPUSH
32704: CALL_OW 74
32708: PPUSH
32709: CALL_OW 115
// until IsDead ( un ) ;
32713: LD_VAR 0 2
32717: PPUSH
32718: CALL_OW 301
32722: IFFALSE 32670
// end ;
32724: PPOPN 2
32726: END
// every 0 0$1 trigger StreamModeActive and sStu do
32727: LD_EXP 84
32731: PUSH
32732: LD_EXP 123
32736: AND
32737: IFFALSE 32753
32739: GO 32741
32741: DISABLE
// begin ToLua ( displayStucuk(); ) ;
32742: LD_STRING displayStucuk();
32744: PPUSH
32745: CALL_OW 559
// ResetFog ;
32749: CALL_OW 335
// end ;
32753: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
32754: LD_EXP 84
32758: PUSH
32759: LD_EXP 116
32763: AND
32764: IFFALSE 32905
32766: GO 32768
32768: DISABLE
32769: LD_INT 0
32771: PPUSH
32772: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
32773: LD_ADDR_VAR 0 2
32777: PUSH
32778: LD_INT 22
32780: PUSH
32781: LD_OWVAR 2
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 21
32792: PUSH
32793: LD_INT 1
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PPUSH
32804: CALL_OW 69
32808: ST_TO_ADDR
// if not tmp then
32809: LD_VAR 0 2
32813: NOT
32814: IFFALSE 32818
// exit ;
32816: GO 32905
// un := tmp [ rand ( 1 , tmp ) ] ;
32818: LD_ADDR_VAR 0 1
32822: PUSH
32823: LD_VAR 0 2
32827: PUSH
32828: LD_INT 1
32830: PPUSH
32831: LD_VAR 0 2
32835: PPUSH
32836: CALL_OW 12
32840: ARRAY
32841: ST_TO_ADDR
// SetSide ( un , 0 ) ;
32842: LD_VAR 0 1
32846: PPUSH
32847: LD_INT 0
32849: PPUSH
32850: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
32854: LD_VAR 0 1
32858: PPUSH
32859: LD_OWVAR 3
32863: PUSH
32864: LD_VAR 0 1
32868: DIFF
32869: PPUSH
32870: LD_VAR 0 1
32874: PPUSH
32875: CALL_OW 74
32879: PPUSH
32880: CALL_OW 115
// wait ( 0 0$20 ) ;
32884: LD_INT 700
32886: PPUSH
32887: CALL_OW 67
// SetSide ( un , your_side ) ;
32891: LD_VAR 0 1
32895: PPUSH
32896: LD_OWVAR 2
32900: PPUSH
32901: CALL_OW 235
// end ;
32905: PPOPN 2
32907: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
32908: LD_EXP 84
32912: PUSH
32913: LD_EXP 117
32917: AND
32918: IFFALSE 33024
32920: GO 32922
32922: DISABLE
32923: LD_INT 0
32925: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32926: LD_ADDR_VAR 0 1
32930: PUSH
32931: LD_INT 22
32933: PUSH
32934: LD_OWVAR 2
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 2
32945: PUSH
32946: LD_INT 30
32948: PUSH
32949: LD_INT 0
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 30
32958: PUSH
32959: LD_INT 1
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: LIST
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PPUSH
32975: CALL_OW 69
32979: ST_TO_ADDR
// if not depot then
32980: LD_VAR 0 1
32984: NOT
32985: IFFALSE 32989
// exit ;
32987: GO 33024
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
32989: LD_VAR 0 1
32993: PUSH
32994: LD_INT 1
32996: ARRAY
32997: PPUSH
32998: CALL_OW 250
33002: PPUSH
33003: LD_VAR 0 1
33007: PUSH
33008: LD_INT 1
33010: ARRAY
33011: PPUSH
33012: CALL_OW 251
33016: PPUSH
33017: LD_INT 70
33019: PPUSH
33020: CALL_OW 495
// end ;
33024: PPOPN 1
33026: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
33027: LD_EXP 84
33031: PUSH
33032: LD_EXP 118
33036: AND
33037: IFFALSE 33248
33039: GO 33041
33041: DISABLE
33042: LD_INT 0
33044: PPUSH
33045: PPUSH
33046: PPUSH
33047: PPUSH
33048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
33049: LD_ADDR_VAR 0 5
33053: PUSH
33054: LD_INT 22
33056: PUSH
33057: LD_OWVAR 2
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 21
33068: PUSH
33069: LD_INT 1
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PPUSH
33080: CALL_OW 69
33084: ST_TO_ADDR
// if not tmp then
33085: LD_VAR 0 5
33089: NOT
33090: IFFALSE 33094
// exit ;
33092: GO 33248
// for i in tmp do
33094: LD_ADDR_VAR 0 1
33098: PUSH
33099: LD_VAR 0 5
33103: PUSH
33104: FOR_IN
33105: IFFALSE 33246
// begin d := rand ( 0 , 5 ) ;
33107: LD_ADDR_VAR 0 4
33111: PUSH
33112: LD_INT 0
33114: PPUSH
33115: LD_INT 5
33117: PPUSH
33118: CALL_OW 12
33122: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
33123: LD_ADDR_VAR 0 2
33127: PUSH
33128: LD_VAR 0 1
33132: PPUSH
33133: CALL_OW 250
33137: PPUSH
33138: LD_VAR 0 4
33142: PPUSH
33143: LD_INT 3
33145: PPUSH
33146: LD_INT 12
33148: PPUSH
33149: CALL_OW 12
33153: PPUSH
33154: CALL_OW 272
33158: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
33159: LD_ADDR_VAR 0 3
33163: PUSH
33164: LD_VAR 0 1
33168: PPUSH
33169: CALL_OW 251
33173: PPUSH
33174: LD_VAR 0 4
33178: PPUSH
33179: LD_INT 3
33181: PPUSH
33182: LD_INT 12
33184: PPUSH
33185: CALL_OW 12
33189: PPUSH
33190: CALL_OW 273
33194: ST_TO_ADDR
// if ValidHex ( x , y ) then
33195: LD_VAR 0 2
33199: PPUSH
33200: LD_VAR 0 3
33204: PPUSH
33205: CALL_OW 488
33209: IFFALSE 33244
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
33211: LD_VAR 0 1
33215: PPUSH
33216: LD_VAR 0 2
33220: PPUSH
33221: LD_VAR 0 3
33225: PPUSH
33226: LD_INT 3
33228: PPUSH
33229: LD_INT 6
33231: PPUSH
33232: CALL_OW 12
33236: PPUSH
33237: LD_INT 1
33239: PPUSH
33240: CALL_OW 483
// end ;
33244: GO 33104
33246: POP
33247: POP
// end ;
33248: PPOPN 5
33250: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
33251: LD_EXP 84
33255: PUSH
33256: LD_EXP 119
33260: AND
33261: IFFALSE 33355
33263: GO 33265
33265: DISABLE
33266: LD_INT 0
33268: PPUSH
33269: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
33270: LD_ADDR_VAR 0 2
33274: PUSH
33275: LD_INT 22
33277: PUSH
33278: LD_OWVAR 2
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 32
33289: PUSH
33290: LD_INT 1
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 21
33299: PUSH
33300: LD_INT 2
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: LIST
33311: PPUSH
33312: CALL_OW 69
33316: ST_TO_ADDR
// if not tmp then
33317: LD_VAR 0 2
33321: NOT
33322: IFFALSE 33326
// exit ;
33324: GO 33355
// for i in tmp do
33326: LD_ADDR_VAR 0 1
33330: PUSH
33331: LD_VAR 0 2
33335: PUSH
33336: FOR_IN
33337: IFFALSE 33353
// SetFuel ( i , 0 ) ;
33339: LD_VAR 0 1
33343: PPUSH
33344: LD_INT 0
33346: PPUSH
33347: CALL_OW 240
33351: GO 33336
33353: POP
33354: POP
// end ;
33355: PPOPN 2
33357: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
33358: LD_EXP 84
33362: PUSH
33363: LD_EXP 120
33367: AND
33368: IFFALSE 33434
33370: GO 33372
33372: DISABLE
33373: LD_INT 0
33375: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33376: LD_ADDR_VAR 0 1
33380: PUSH
33381: LD_INT 22
33383: PUSH
33384: LD_OWVAR 2
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 30
33395: PUSH
33396: LD_INT 29
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PPUSH
33407: CALL_OW 69
33411: ST_TO_ADDR
// if not tmp then
33412: LD_VAR 0 1
33416: NOT
33417: IFFALSE 33421
// exit ;
33419: GO 33434
// DestroyUnit ( tmp [ 1 ] ) ;
33421: LD_VAR 0 1
33425: PUSH
33426: LD_INT 1
33428: ARRAY
33429: PPUSH
33430: CALL_OW 65
// end ;
33434: PPOPN 1
33436: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
33437: LD_EXP 84
33441: PUSH
33442: LD_EXP 122
33446: AND
33447: IFFALSE 33576
33449: GO 33451
33451: DISABLE
33452: LD_INT 0
33454: PPUSH
// begin uc_side := 0 ;
33455: LD_ADDR_OWVAR 20
33459: PUSH
33460: LD_INT 0
33462: ST_TO_ADDR
// uc_nation := nation_arabian ;
33463: LD_ADDR_OWVAR 21
33467: PUSH
33468: LD_INT 2
33470: ST_TO_ADDR
// hc_gallery :=  ;
33471: LD_ADDR_OWVAR 33
33475: PUSH
33476: LD_STRING 
33478: ST_TO_ADDR
// hc_name :=  ;
33479: LD_ADDR_OWVAR 26
33483: PUSH
33484: LD_STRING 
33486: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
33487: LD_INT 1
33489: PPUSH
33490: LD_INT 11
33492: PPUSH
33493: LD_INT 10
33495: PPUSH
33496: CALL_OW 380
// un := CreateHuman ;
33500: LD_ADDR_VAR 0 1
33504: PUSH
33505: CALL_OW 44
33509: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33510: LD_VAR 0 1
33514: PPUSH
33515: LD_INT 1
33517: PPUSH
33518: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
33522: LD_INT 35
33524: PPUSH
33525: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
33529: LD_VAR 0 1
33533: PPUSH
33534: LD_INT 22
33536: PUSH
33537: LD_OWVAR 2
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PPUSH
33546: CALL_OW 69
33550: PPUSH
33551: LD_VAR 0 1
33555: PPUSH
33556: CALL_OW 74
33560: PPUSH
33561: CALL_OW 115
// until IsDead ( un ) ;
33565: LD_VAR 0 1
33569: PPUSH
33570: CALL_OW 301
33574: IFFALSE 33522
// end ;
33576: PPOPN 1
33578: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
33579: LD_EXP 84
33583: PUSH
33584: LD_EXP 124
33588: AND
33589: IFFALSE 33601
33591: GO 33593
33593: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
33594: LD_STRING earthquake(getX(game), 0, 32)
33596: PPUSH
33597: CALL_OW 559
33601: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
33602: LD_EXP 84
33606: PUSH
33607: LD_EXP 125
33611: AND
33612: IFFALSE 33703
33614: GO 33616
33616: DISABLE
33617: LD_INT 0
33619: PPUSH
// begin enable ;
33620: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
33621: LD_ADDR_VAR 0 1
33625: PUSH
33626: LD_INT 22
33628: PUSH
33629: LD_OWVAR 2
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 21
33640: PUSH
33641: LD_INT 2
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 33
33650: PUSH
33651: LD_INT 3
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: LIST
33662: PPUSH
33663: CALL_OW 69
33667: ST_TO_ADDR
// if not tmp then
33668: LD_VAR 0 1
33672: NOT
33673: IFFALSE 33677
// exit ;
33675: GO 33703
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
33677: LD_VAR 0 1
33681: PUSH
33682: LD_INT 1
33684: PPUSH
33685: LD_VAR 0 1
33689: PPUSH
33690: CALL_OW 12
33694: ARRAY
33695: PPUSH
33696: LD_INT 1
33698: PPUSH
33699: CALL_OW 234
// end ;
33703: PPOPN 1
33705: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
33706: LD_EXP 84
33710: PUSH
33711: LD_EXP 126
33715: AND
33716: IFFALSE 33857
33718: GO 33720
33720: DISABLE
33721: LD_INT 0
33723: PPUSH
33724: PPUSH
33725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33726: LD_ADDR_VAR 0 3
33730: PUSH
33731: LD_INT 22
33733: PUSH
33734: LD_OWVAR 2
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 25
33745: PUSH
33746: LD_INT 1
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PPUSH
33757: CALL_OW 69
33761: ST_TO_ADDR
// if not tmp then
33762: LD_VAR 0 3
33766: NOT
33767: IFFALSE 33771
// exit ;
33769: GO 33857
// un := tmp [ rand ( 1 , tmp ) ] ;
33771: LD_ADDR_VAR 0 2
33775: PUSH
33776: LD_VAR 0 3
33780: PUSH
33781: LD_INT 1
33783: PPUSH
33784: LD_VAR 0 3
33788: PPUSH
33789: CALL_OW 12
33793: ARRAY
33794: ST_TO_ADDR
// if Crawls ( un ) then
33795: LD_VAR 0 2
33799: PPUSH
33800: CALL_OW 318
33804: IFFALSE 33815
// ComWalk ( un ) ;
33806: LD_VAR 0 2
33810: PPUSH
33811: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
33815: LD_VAR 0 2
33819: PPUSH
33820: LD_INT 9
33822: PPUSH
33823: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
33827: LD_INT 28
33829: PPUSH
33830: LD_OWVAR 2
33834: PPUSH
33835: LD_INT 2
33837: PPUSH
33838: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
33842: LD_INT 29
33844: PPUSH
33845: LD_OWVAR 2
33849: PPUSH
33850: LD_INT 2
33852: PPUSH
33853: CALL_OW 322
// end ;
33857: PPOPN 3
33859: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
33860: LD_EXP 84
33864: PUSH
33865: LD_EXP 127
33869: AND
33870: IFFALSE 33981
33872: GO 33874
33874: DISABLE
33875: LD_INT 0
33877: PPUSH
33878: PPUSH
33879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33880: LD_ADDR_VAR 0 3
33884: PUSH
33885: LD_INT 22
33887: PUSH
33888: LD_OWVAR 2
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 25
33899: PUSH
33900: LD_INT 1
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PPUSH
33911: CALL_OW 69
33915: ST_TO_ADDR
// if not tmp then
33916: LD_VAR 0 3
33920: NOT
33921: IFFALSE 33925
// exit ;
33923: GO 33981
// un := tmp [ rand ( 1 , tmp ) ] ;
33925: LD_ADDR_VAR 0 2
33929: PUSH
33930: LD_VAR 0 3
33934: PUSH
33935: LD_INT 1
33937: PPUSH
33938: LD_VAR 0 3
33942: PPUSH
33943: CALL_OW 12
33947: ARRAY
33948: ST_TO_ADDR
// if Crawls ( un ) then
33949: LD_VAR 0 2
33953: PPUSH
33954: CALL_OW 318
33958: IFFALSE 33969
// ComWalk ( un ) ;
33960: LD_VAR 0 2
33964: PPUSH
33965: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33969: LD_VAR 0 2
33973: PPUSH
33974: LD_INT 8
33976: PPUSH
33977: CALL_OW 336
// end ;
33981: PPOPN 3
33983: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
33984: LD_EXP 84
33988: PUSH
33989: LD_EXP 128
33993: AND
33994: IFFALSE 34138
33996: GO 33998
33998: DISABLE
33999: LD_INT 0
34001: PPUSH
34002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
34003: LD_ADDR_VAR 0 2
34007: PUSH
34008: LD_INT 22
34010: PUSH
34011: LD_OWVAR 2
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 21
34022: PUSH
34023: LD_INT 2
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 2
34032: PUSH
34033: LD_INT 34
34035: PUSH
34036: LD_INT 12
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 34
34045: PUSH
34046: LD_INT 51
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 34
34055: PUSH
34056: LD_INT 32
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: LIST
34073: PPUSH
34074: CALL_OW 69
34078: ST_TO_ADDR
// if not tmp then
34079: LD_VAR 0 2
34083: NOT
34084: IFFALSE 34088
// exit ;
34086: GO 34138
// for i in tmp do
34088: LD_ADDR_VAR 0 1
34092: PUSH
34093: LD_VAR 0 2
34097: PUSH
34098: FOR_IN
34099: IFFALSE 34136
// if GetCargo ( i , mat_artifact ) = 0 then
34101: LD_VAR 0 1
34105: PPUSH
34106: LD_INT 4
34108: PPUSH
34109: CALL_OW 289
34113: PUSH
34114: LD_INT 0
34116: EQUAL
34117: IFFALSE 34134
// SetCargo ( i , mat_siberit , 100 ) ;
34119: LD_VAR 0 1
34123: PPUSH
34124: LD_INT 3
34126: PPUSH
34127: LD_INT 100
34129: PPUSH
34130: CALL_OW 290
34134: GO 34098
34136: POP
34137: POP
// end ;
34138: PPOPN 2
34140: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
34141: LD_EXP 84
34145: PUSH
34146: LD_EXP 129
34150: AND
34151: IFFALSE 34334
34153: GO 34155
34155: DISABLE
34156: LD_INT 0
34158: PPUSH
34159: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34160: LD_ADDR_VAR 0 2
34164: PUSH
34165: LD_INT 22
34167: PUSH
34168: LD_OWVAR 2
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PPUSH
34177: CALL_OW 69
34181: ST_TO_ADDR
// if not tmp then
34182: LD_VAR 0 2
34186: NOT
34187: IFFALSE 34191
// exit ;
34189: GO 34334
// for i := 1 to 2 do
34191: LD_ADDR_VAR 0 1
34195: PUSH
34196: DOUBLE
34197: LD_INT 1
34199: DEC
34200: ST_TO_ADDR
34201: LD_INT 2
34203: PUSH
34204: FOR_TO
34205: IFFALSE 34332
// begin uc_side := your_side ;
34207: LD_ADDR_OWVAR 20
34211: PUSH
34212: LD_OWVAR 2
34216: ST_TO_ADDR
// uc_nation := nation_american ;
34217: LD_ADDR_OWVAR 21
34221: PUSH
34222: LD_INT 1
34224: ST_TO_ADDR
// vc_chassis := us_morphling ;
34225: LD_ADDR_OWVAR 37
34229: PUSH
34230: LD_INT 5
34232: ST_TO_ADDR
// vc_engine := engine_siberite ;
34233: LD_ADDR_OWVAR 39
34237: PUSH
34238: LD_INT 3
34240: ST_TO_ADDR
// vc_control := control_computer ;
34241: LD_ADDR_OWVAR 38
34245: PUSH
34246: LD_INT 3
34248: ST_TO_ADDR
// vc_weapon := us_double_laser ;
34249: LD_ADDR_OWVAR 40
34253: PUSH
34254: LD_INT 10
34256: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
34257: LD_VAR 0 2
34261: PUSH
34262: LD_INT 1
34264: ARRAY
34265: PPUSH
34266: CALL_OW 310
34270: NOT
34271: IFFALSE 34318
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
34273: CALL_OW 45
34277: PPUSH
34278: LD_VAR 0 2
34282: PUSH
34283: LD_INT 1
34285: ARRAY
34286: PPUSH
34287: CALL_OW 250
34291: PPUSH
34292: LD_VAR 0 2
34296: PUSH
34297: LD_INT 1
34299: ARRAY
34300: PPUSH
34301: CALL_OW 251
34305: PPUSH
34306: LD_INT 12
34308: PPUSH
34309: LD_INT 1
34311: PPUSH
34312: CALL_OW 50
34316: GO 34330
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
34318: CALL_OW 45
34322: PPUSH
34323: LD_INT 1
34325: PPUSH
34326: CALL_OW 51
// end ;
34330: GO 34204
34332: POP
34333: POP
// end ;
34334: PPOPN 2
34336: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
34337: LD_EXP 84
34341: PUSH
34342: LD_EXP 130
34346: AND
34347: IFFALSE 34569
34349: GO 34351
34351: DISABLE
34352: LD_INT 0
34354: PPUSH
34355: PPUSH
34356: PPUSH
34357: PPUSH
34358: PPUSH
34359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34360: LD_ADDR_VAR 0 6
34364: PUSH
34365: LD_INT 22
34367: PUSH
34368: LD_OWVAR 2
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 21
34379: PUSH
34380: LD_INT 1
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 3
34389: PUSH
34390: LD_INT 23
34392: PUSH
34393: LD_INT 0
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: LIST
34408: PPUSH
34409: CALL_OW 69
34413: ST_TO_ADDR
// if not tmp then
34414: LD_VAR 0 6
34418: NOT
34419: IFFALSE 34423
// exit ;
34421: GO 34569
// s1 := rand ( 1 , 4 ) ;
34423: LD_ADDR_VAR 0 2
34427: PUSH
34428: LD_INT 1
34430: PPUSH
34431: LD_INT 4
34433: PPUSH
34434: CALL_OW 12
34438: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
34439: LD_ADDR_VAR 0 4
34443: PUSH
34444: LD_VAR 0 6
34448: PUSH
34449: LD_INT 1
34451: ARRAY
34452: PPUSH
34453: LD_VAR 0 2
34457: PPUSH
34458: CALL_OW 259
34462: ST_TO_ADDR
// if s1 = 1 then
34463: LD_VAR 0 2
34467: PUSH
34468: LD_INT 1
34470: EQUAL
34471: IFFALSE 34491
// s2 := rand ( 2 , 4 ) else
34473: LD_ADDR_VAR 0 3
34477: PUSH
34478: LD_INT 2
34480: PPUSH
34481: LD_INT 4
34483: PPUSH
34484: CALL_OW 12
34488: ST_TO_ADDR
34489: GO 34499
// s2 := 1 ;
34491: LD_ADDR_VAR 0 3
34495: PUSH
34496: LD_INT 1
34498: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
34499: LD_ADDR_VAR 0 5
34503: PUSH
34504: LD_VAR 0 6
34508: PUSH
34509: LD_INT 1
34511: ARRAY
34512: PPUSH
34513: LD_VAR 0 3
34517: PPUSH
34518: CALL_OW 259
34522: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
34523: LD_VAR 0 6
34527: PUSH
34528: LD_INT 1
34530: ARRAY
34531: PPUSH
34532: LD_VAR 0 2
34536: PPUSH
34537: LD_VAR 0 5
34541: PPUSH
34542: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
34546: LD_VAR 0 6
34550: PUSH
34551: LD_INT 1
34553: ARRAY
34554: PPUSH
34555: LD_VAR 0 3
34559: PPUSH
34560: LD_VAR 0 4
34564: PPUSH
34565: CALL_OW 237
// end ;
34569: PPOPN 6
34571: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
34572: LD_EXP 84
34576: PUSH
34577: LD_EXP 131
34581: AND
34582: IFFALSE 34661
34584: GO 34586
34586: DISABLE
34587: LD_INT 0
34589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
34590: LD_ADDR_VAR 0 1
34594: PUSH
34595: LD_INT 22
34597: PUSH
34598: LD_OWVAR 2
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 30
34609: PUSH
34610: LD_INT 3
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PPUSH
34621: CALL_OW 69
34625: ST_TO_ADDR
// if not tmp then
34626: LD_VAR 0 1
34630: NOT
34631: IFFALSE 34635
// exit ;
34633: GO 34661
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
34635: LD_VAR 0 1
34639: PUSH
34640: LD_INT 1
34642: PPUSH
34643: LD_VAR 0 1
34647: PPUSH
34648: CALL_OW 12
34652: ARRAY
34653: PPUSH
34654: LD_INT 1
34656: PPUSH
34657: CALL_OW 234
// end ;
34661: PPOPN 1
34663: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
34664: LD_EXP 84
34668: PUSH
34669: LD_EXP 132
34673: AND
34674: IFFALSE 34786
34676: GO 34678
34678: DISABLE
34679: LD_INT 0
34681: PPUSH
34682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
34683: LD_ADDR_VAR 0 2
34687: PUSH
34688: LD_INT 22
34690: PUSH
34691: LD_OWVAR 2
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 2
34702: PUSH
34703: LD_INT 30
34705: PUSH
34706: LD_INT 27
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 30
34715: PUSH
34716: LD_INT 26
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 30
34725: PUSH
34726: LD_INT 28
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PPUSH
34743: CALL_OW 69
34747: ST_TO_ADDR
// if not tmp then
34748: LD_VAR 0 2
34752: NOT
34753: IFFALSE 34757
// exit ;
34755: GO 34786
// for i in tmp do
34757: LD_ADDR_VAR 0 1
34761: PUSH
34762: LD_VAR 0 2
34766: PUSH
34767: FOR_IN
34768: IFFALSE 34784
// SetLives ( i , 1 ) ;
34770: LD_VAR 0 1
34774: PPUSH
34775: LD_INT 1
34777: PPUSH
34778: CALL_OW 234
34782: GO 34767
34784: POP
34785: POP
// end ;
34786: PPOPN 2
34788: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
34789: LD_EXP 84
34793: PUSH
34794: LD_EXP 133
34798: AND
34799: IFFALSE 35086
34801: GO 34803
34803: DISABLE
34804: LD_INT 0
34806: PPUSH
34807: PPUSH
34808: PPUSH
// begin i := rand ( 1 , 7 ) ;
34809: LD_ADDR_VAR 0 1
34813: PUSH
34814: LD_INT 1
34816: PPUSH
34817: LD_INT 7
34819: PPUSH
34820: CALL_OW 12
34824: ST_TO_ADDR
// case i of 1 :
34825: LD_VAR 0 1
34829: PUSH
34830: LD_INT 1
34832: DOUBLE
34833: EQUAL
34834: IFTRUE 34838
34836: GO 34848
34838: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
34839: LD_STRING earthquake(getX(game), 0, 32)
34841: PPUSH
34842: CALL_OW 559
34846: GO 35086
34848: LD_INT 2
34850: DOUBLE
34851: EQUAL
34852: IFTRUE 34856
34854: GO 34870
34856: POP
// begin ToLua ( displayStucuk(); ) ;
34857: LD_STRING displayStucuk();
34859: PPUSH
34860: CALL_OW 559
// ResetFog ;
34864: CALL_OW 335
// end ; 3 :
34868: GO 35086
34870: LD_INT 3
34872: DOUBLE
34873: EQUAL
34874: IFTRUE 34878
34876: GO 34982
34878: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34879: LD_ADDR_VAR 0 2
34883: PUSH
34884: LD_INT 22
34886: PUSH
34887: LD_OWVAR 2
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 25
34898: PUSH
34899: LD_INT 1
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PPUSH
34910: CALL_OW 69
34914: ST_TO_ADDR
// if not tmp then
34915: LD_VAR 0 2
34919: NOT
34920: IFFALSE 34924
// exit ;
34922: GO 35086
// un := tmp [ rand ( 1 , tmp ) ] ;
34924: LD_ADDR_VAR 0 3
34928: PUSH
34929: LD_VAR 0 2
34933: PUSH
34934: LD_INT 1
34936: PPUSH
34937: LD_VAR 0 2
34941: PPUSH
34942: CALL_OW 12
34946: ARRAY
34947: ST_TO_ADDR
// if Crawls ( un ) then
34948: LD_VAR 0 3
34952: PPUSH
34953: CALL_OW 318
34957: IFFALSE 34968
// ComWalk ( un ) ;
34959: LD_VAR 0 3
34963: PPUSH
34964: CALL_OW 138
// SetClass ( un , class_mortar ) ;
34968: LD_VAR 0 3
34972: PPUSH
34973: LD_INT 8
34975: PPUSH
34976: CALL_OW 336
// end ; 4 :
34980: GO 35086
34982: LD_INT 4
34984: DOUBLE
34985: EQUAL
34986: IFTRUE 34990
34988: GO 35064
34990: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
34991: LD_ADDR_VAR 0 2
34995: PUSH
34996: LD_INT 22
34998: PUSH
34999: LD_OWVAR 2
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 30
35010: PUSH
35011: LD_INT 29
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PPUSH
35022: CALL_OW 69
35026: ST_TO_ADDR
// if not tmp then
35027: LD_VAR 0 2
35031: NOT
35032: IFFALSE 35036
// exit ;
35034: GO 35086
// CenterNowOnUnits ( tmp [ 1 ] ) ;
35036: LD_VAR 0 2
35040: PUSH
35041: LD_INT 1
35043: ARRAY
35044: PPUSH
35045: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
35049: LD_VAR 0 2
35053: PUSH
35054: LD_INT 1
35056: ARRAY
35057: PPUSH
35058: CALL_OW 65
// end ; 5 .. 7 :
35062: GO 35086
35064: LD_INT 5
35066: DOUBLE
35067: GREATEREQUAL
35068: IFFALSE 35076
35070: LD_INT 7
35072: DOUBLE
35073: LESSEQUAL
35074: IFTRUE 35078
35076: GO 35085
35078: POP
// StreamSibBomb ; end ;
35079: CALL 31323 0 0
35083: GO 35086
35085: POP
// end ;
35086: PPOPN 3
35088: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
35089: LD_EXP 84
35093: PUSH
35094: LD_EXP 134
35098: AND
35099: IFFALSE 35255
35101: GO 35103
35103: DISABLE
35104: LD_INT 0
35106: PPUSH
35107: PPUSH
35108: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
35109: LD_ADDR_VAR 0 2
35113: PUSH
35114: LD_INT 81
35116: PUSH
35117: LD_OWVAR 2
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 2
35128: PUSH
35129: LD_INT 21
35131: PUSH
35132: LD_INT 1
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 21
35141: PUSH
35142: LD_INT 2
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: LIST
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PPUSH
35158: CALL_OW 69
35162: ST_TO_ADDR
// if not tmp then
35163: LD_VAR 0 2
35167: NOT
35168: IFFALSE 35172
// exit ;
35170: GO 35255
// p := 0 ;
35172: LD_ADDR_VAR 0 3
35176: PUSH
35177: LD_INT 0
35179: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35180: LD_INT 35
35182: PPUSH
35183: CALL_OW 67
// p := p + 1 ;
35187: LD_ADDR_VAR 0 3
35191: PUSH
35192: LD_VAR 0 3
35196: PUSH
35197: LD_INT 1
35199: PLUS
35200: ST_TO_ADDR
// for i in tmp do
35201: LD_ADDR_VAR 0 1
35205: PUSH
35206: LD_VAR 0 2
35210: PUSH
35211: FOR_IN
35212: IFFALSE 35243
// if GetLives ( i ) < 1000 then
35214: LD_VAR 0 1
35218: PPUSH
35219: CALL_OW 256
35223: PUSH
35224: LD_INT 1000
35226: LESS
35227: IFFALSE 35241
// SetLives ( i , 1000 ) ;
35229: LD_VAR 0 1
35233: PPUSH
35234: LD_INT 1000
35236: PPUSH
35237: CALL_OW 234
35241: GO 35211
35243: POP
35244: POP
// until p > 20 ;
35245: LD_VAR 0 3
35249: PUSH
35250: LD_INT 20
35252: GREATER
35253: IFFALSE 35180
// end ;
35255: PPOPN 3
35257: END
// every 0 0$1 trigger StreamModeActive and sTime do
35258: LD_EXP 84
35262: PUSH
35263: LD_EXP 135
35267: AND
35268: IFFALSE 35303
35270: GO 35272
35272: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
35273: LD_INT 28
35275: PPUSH
35276: LD_OWVAR 2
35280: PPUSH
35281: LD_INT 2
35283: PPUSH
35284: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
35288: LD_INT 30
35290: PPUSH
35291: LD_OWVAR 2
35295: PPUSH
35296: LD_INT 2
35298: PPUSH
35299: CALL_OW 322
// end ;
35303: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
35304: LD_EXP 84
35308: PUSH
35309: LD_EXP 136
35313: AND
35314: IFFALSE 35435
35316: GO 35318
35318: DISABLE
35319: LD_INT 0
35321: PPUSH
35322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
35323: LD_ADDR_VAR 0 2
35327: PUSH
35328: LD_INT 22
35330: PUSH
35331: LD_OWVAR 2
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 21
35342: PUSH
35343: LD_INT 1
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 3
35352: PUSH
35353: LD_INT 23
35355: PUSH
35356: LD_INT 0
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: LIST
35371: PPUSH
35372: CALL_OW 69
35376: ST_TO_ADDR
// if not tmp then
35377: LD_VAR 0 2
35381: NOT
35382: IFFALSE 35386
// exit ;
35384: GO 35435
// for i in tmp do
35386: LD_ADDR_VAR 0 1
35390: PUSH
35391: LD_VAR 0 2
35395: PUSH
35396: FOR_IN
35397: IFFALSE 35433
// begin if Crawls ( i ) then
35399: LD_VAR 0 1
35403: PPUSH
35404: CALL_OW 318
35408: IFFALSE 35419
// ComWalk ( i ) ;
35410: LD_VAR 0 1
35414: PPUSH
35415: CALL_OW 138
// SetClass ( i , 2 ) ;
35419: LD_VAR 0 1
35423: PPUSH
35424: LD_INT 2
35426: PPUSH
35427: CALL_OW 336
// end ;
35431: GO 35396
35433: POP
35434: POP
// end ;
35435: PPOPN 2
35437: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
35438: LD_EXP 84
35442: PUSH
35443: LD_EXP 137
35447: AND
35448: IFFALSE 35736
35450: GO 35452
35452: DISABLE
35453: LD_INT 0
35455: PPUSH
35456: PPUSH
35457: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
35458: LD_OWVAR 2
35462: PPUSH
35463: LD_INT 9
35465: PPUSH
35466: LD_INT 1
35468: PPUSH
35469: LD_INT 1
35471: PPUSH
35472: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
35476: LD_INT 9
35478: PPUSH
35479: LD_OWVAR 2
35483: PPUSH
35484: CALL_OW 343
// uc_side := 9 ;
35488: LD_ADDR_OWVAR 20
35492: PUSH
35493: LD_INT 9
35495: ST_TO_ADDR
// uc_nation := 2 ;
35496: LD_ADDR_OWVAR 21
35500: PUSH
35501: LD_INT 2
35503: ST_TO_ADDR
// hc_name := Dark Warrior ;
35504: LD_ADDR_OWVAR 26
35508: PUSH
35509: LD_STRING Dark Warrior
35511: ST_TO_ADDR
// hc_gallery :=  ;
35512: LD_ADDR_OWVAR 33
35516: PUSH
35517: LD_STRING 
35519: ST_TO_ADDR
// hc_noskilllimit := true ;
35520: LD_ADDR_OWVAR 76
35524: PUSH
35525: LD_INT 1
35527: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
35528: LD_ADDR_OWVAR 31
35532: PUSH
35533: LD_INT 30
35535: PUSH
35536: LD_INT 30
35538: PUSH
35539: LD_INT 30
35541: PUSH
35542: LD_INT 30
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: ST_TO_ADDR
// un := CreateHuman ;
35551: LD_ADDR_VAR 0 3
35555: PUSH
35556: CALL_OW 44
35560: ST_TO_ADDR
// hc_noskilllimit := false ;
35561: LD_ADDR_OWVAR 76
35565: PUSH
35566: LD_INT 0
35568: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
35569: LD_VAR 0 3
35573: PPUSH
35574: LD_INT 1
35576: PPUSH
35577: CALL_OW 51
// ToLua ( playRanger() ) ;
35581: LD_STRING playRanger()
35583: PPUSH
35584: CALL_OW 559
// p := 0 ;
35588: LD_ADDR_VAR 0 2
35592: PUSH
35593: LD_INT 0
35595: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35596: LD_INT 35
35598: PPUSH
35599: CALL_OW 67
// p := p + 1 ;
35603: LD_ADDR_VAR 0 2
35607: PUSH
35608: LD_VAR 0 2
35612: PUSH
35613: LD_INT 1
35615: PLUS
35616: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
35617: LD_VAR 0 3
35621: PPUSH
35622: CALL_OW 256
35626: PUSH
35627: LD_INT 1000
35629: LESS
35630: IFFALSE 35644
// SetLives ( un , 1000 ) ;
35632: LD_VAR 0 3
35636: PPUSH
35637: LD_INT 1000
35639: PPUSH
35640: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
35644: LD_VAR 0 3
35648: PPUSH
35649: LD_INT 81
35651: PUSH
35652: LD_OWVAR 2
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 91
35663: PUSH
35664: LD_VAR 0 3
35668: PUSH
35669: LD_INT 30
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: LIST
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PPUSH
35681: CALL_OW 69
35685: PPUSH
35686: LD_VAR 0 3
35690: PPUSH
35691: CALL_OW 74
35695: PPUSH
35696: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
35700: LD_VAR 0 2
35704: PUSH
35705: LD_INT 80
35707: GREATER
35708: PUSH
35709: LD_VAR 0 3
35713: PPUSH
35714: CALL_OW 301
35718: OR
35719: IFFALSE 35596
// if un then
35721: LD_VAR 0 3
35725: IFFALSE 35736
// RemoveUnit ( un ) ;
35727: LD_VAR 0 3
35731: PPUSH
35732: CALL_OW 64
// end ;
35736: PPOPN 3
35738: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
35739: LD_EXP 138
35743: IFFALSE 35859
35745: GO 35747
35747: DISABLE
35748: LD_INT 0
35750: PPUSH
35751: PPUSH
35752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
35753: LD_ADDR_VAR 0 2
35757: PUSH
35758: LD_INT 81
35760: PUSH
35761: LD_OWVAR 2
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 21
35772: PUSH
35773: LD_INT 1
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PPUSH
35784: CALL_OW 69
35788: ST_TO_ADDR
// if not tmp then
35789: LD_VAR 0 2
35793: NOT
35794: IFFALSE 35798
// exit ;
35796: GO 35859
// ToLua ( playComputer() ) ;
35798: LD_STRING playComputer()
35800: PPUSH
35801: CALL_OW 559
// for i in tmp do
35805: LD_ADDR_VAR 0 1
35809: PUSH
35810: LD_VAR 0 2
35814: PUSH
35815: FOR_IN
35816: IFFALSE 35857
// for j := 1 to 4 do
35818: LD_ADDR_VAR 0 3
35822: PUSH
35823: DOUBLE
35824: LD_INT 1
35826: DEC
35827: ST_TO_ADDR
35828: LD_INT 4
35830: PUSH
35831: FOR_TO
35832: IFFALSE 35853
// SetSkill ( i , j , 10 ) ;
35834: LD_VAR 0 1
35838: PPUSH
35839: LD_VAR 0 3
35843: PPUSH
35844: LD_INT 10
35846: PPUSH
35847: CALL_OW 237
35851: GO 35831
35853: POP
35854: POP
35855: GO 35815
35857: POP
35858: POP
// end ;
35859: PPOPN 3
35861: END
// every 0 0$1 trigger s30 do var i , tmp ;
35862: LD_EXP 139
35866: IFFALSE 35935
35868: GO 35870
35870: DISABLE
35871: LD_INT 0
35873: PPUSH
35874: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
35875: LD_ADDR_VAR 0 2
35879: PUSH
35880: LD_INT 22
35882: PUSH
35883: LD_OWVAR 2
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PPUSH
35892: CALL_OW 69
35896: ST_TO_ADDR
// if not tmp then
35897: LD_VAR 0 2
35901: NOT
35902: IFFALSE 35906
// exit ;
35904: GO 35935
// for i in tmp do
35906: LD_ADDR_VAR 0 1
35910: PUSH
35911: LD_VAR 0 2
35915: PUSH
35916: FOR_IN
35917: IFFALSE 35933
// SetLives ( i , 300 ) ;
35919: LD_VAR 0 1
35923: PPUSH
35924: LD_INT 300
35926: PPUSH
35927: CALL_OW 234
35931: GO 35916
35933: POP
35934: POP
// end ;
35935: PPOPN 2
35937: END
// every 0 0$1 trigger s60 do var i , tmp ;
35938: LD_EXP 140
35942: IFFALSE 36011
35944: GO 35946
35946: DISABLE
35947: LD_INT 0
35949: PPUSH
35950: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
35951: LD_ADDR_VAR 0 2
35955: PUSH
35956: LD_INT 22
35958: PUSH
35959: LD_OWVAR 2
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PPUSH
35968: CALL_OW 69
35972: ST_TO_ADDR
// if not tmp then
35973: LD_VAR 0 2
35977: NOT
35978: IFFALSE 35982
// exit ;
35980: GO 36011
// for i in tmp do
35982: LD_ADDR_VAR 0 1
35986: PUSH
35987: LD_VAR 0 2
35991: PUSH
35992: FOR_IN
35993: IFFALSE 36009
// SetLives ( i , 600 ) ;
35995: LD_VAR 0 1
35999: PPUSH
36000: LD_INT 600
36002: PPUSH
36003: CALL_OW 234
36007: GO 35992
36009: POP
36010: POP
// end ;
36011: PPOPN 2
36013: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
36014: LD_INT 0
36016: PPUSH
// case cmd of 301 :
36017: LD_VAR 0 1
36021: PUSH
36022: LD_INT 301
36024: DOUBLE
36025: EQUAL
36026: IFTRUE 36030
36028: GO 36062
36030: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
36031: LD_VAR 0 6
36035: PPUSH
36036: LD_VAR 0 7
36040: PPUSH
36041: LD_VAR 0 8
36045: PPUSH
36046: LD_VAR 0 4
36050: PPUSH
36051: LD_VAR 0 5
36055: PPUSH
36056: CALL 37263 0 5
36060: GO 36183
36062: LD_INT 302
36064: DOUBLE
36065: EQUAL
36066: IFTRUE 36070
36068: GO 36107
36070: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
36071: LD_VAR 0 6
36075: PPUSH
36076: LD_VAR 0 7
36080: PPUSH
36081: LD_VAR 0 8
36085: PPUSH
36086: LD_VAR 0 9
36090: PPUSH
36091: LD_VAR 0 4
36095: PPUSH
36096: LD_VAR 0 5
36100: PPUSH
36101: CALL 37354 0 6
36105: GO 36183
36107: LD_INT 303
36109: DOUBLE
36110: EQUAL
36111: IFTRUE 36115
36113: GO 36152
36115: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
36116: LD_VAR 0 6
36120: PPUSH
36121: LD_VAR 0 7
36125: PPUSH
36126: LD_VAR 0 8
36130: PPUSH
36131: LD_VAR 0 9
36135: PPUSH
36136: LD_VAR 0 4
36140: PPUSH
36141: LD_VAR 0 5
36145: PPUSH
36146: CALL 36188 0 6
36150: GO 36183
36152: LD_INT 304
36154: DOUBLE
36155: EQUAL
36156: IFTRUE 36160
36158: GO 36182
36160: POP
// hHackTeleport ( unit , x , y ) ; end ;
36161: LD_VAR 0 2
36165: PPUSH
36166: LD_VAR 0 4
36170: PPUSH
36171: LD_VAR 0 5
36175: PPUSH
36176: CALL 37947 0 3
36180: GO 36183
36182: POP
// end ;
36183: LD_VAR 0 12
36187: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
36188: LD_INT 0
36190: PPUSH
36191: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
36192: LD_VAR 0 1
36196: PUSH
36197: LD_INT 1
36199: LESS
36200: PUSH
36201: LD_VAR 0 1
36205: PUSH
36206: LD_INT 3
36208: GREATER
36209: OR
36210: PUSH
36211: LD_VAR 0 5
36215: PPUSH
36216: LD_VAR 0 6
36220: PPUSH
36221: CALL_OW 428
36225: OR
36226: IFFALSE 36230
// exit ;
36228: GO 36950
// uc_side := your_side ;
36230: LD_ADDR_OWVAR 20
36234: PUSH
36235: LD_OWVAR 2
36239: ST_TO_ADDR
// uc_nation := nation ;
36240: LD_ADDR_OWVAR 21
36244: PUSH
36245: LD_VAR 0 1
36249: ST_TO_ADDR
// bc_level = 1 ;
36250: LD_ADDR_OWVAR 43
36254: PUSH
36255: LD_INT 1
36257: ST_TO_ADDR
// case btype of 1 :
36258: LD_VAR 0 2
36262: PUSH
36263: LD_INT 1
36265: DOUBLE
36266: EQUAL
36267: IFTRUE 36271
36269: GO 36282
36271: POP
// bc_type := b_depot ; 2 :
36272: LD_ADDR_OWVAR 42
36276: PUSH
36277: LD_INT 0
36279: ST_TO_ADDR
36280: GO 36894
36282: LD_INT 2
36284: DOUBLE
36285: EQUAL
36286: IFTRUE 36290
36288: GO 36301
36290: POP
// bc_type := b_warehouse ; 3 :
36291: LD_ADDR_OWVAR 42
36295: PUSH
36296: LD_INT 1
36298: ST_TO_ADDR
36299: GO 36894
36301: LD_INT 3
36303: DOUBLE
36304: EQUAL
36305: IFTRUE 36309
36307: GO 36320
36309: POP
// bc_type := b_lab ; 4 .. 9 :
36310: LD_ADDR_OWVAR 42
36314: PUSH
36315: LD_INT 6
36317: ST_TO_ADDR
36318: GO 36894
36320: LD_INT 4
36322: DOUBLE
36323: GREATEREQUAL
36324: IFFALSE 36332
36326: LD_INT 9
36328: DOUBLE
36329: LESSEQUAL
36330: IFTRUE 36334
36332: GO 36386
36334: POP
// begin bc_type := b_lab_half ;
36335: LD_ADDR_OWVAR 42
36339: PUSH
36340: LD_INT 7
36342: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
36343: LD_ADDR_OWVAR 44
36347: PUSH
36348: LD_INT 10
36350: PUSH
36351: LD_INT 11
36353: PUSH
36354: LD_INT 12
36356: PUSH
36357: LD_INT 15
36359: PUSH
36360: LD_INT 14
36362: PUSH
36363: LD_INT 13
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: PUSH
36374: LD_VAR 0 2
36378: PUSH
36379: LD_INT 3
36381: MINUS
36382: ARRAY
36383: ST_TO_ADDR
// end ; 10 .. 13 :
36384: GO 36894
36386: LD_INT 10
36388: DOUBLE
36389: GREATEREQUAL
36390: IFFALSE 36398
36392: LD_INT 13
36394: DOUBLE
36395: LESSEQUAL
36396: IFTRUE 36400
36398: GO 36477
36400: POP
// begin bc_type := b_lab_full ;
36401: LD_ADDR_OWVAR 42
36405: PUSH
36406: LD_INT 8
36408: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
36409: LD_ADDR_OWVAR 44
36413: PUSH
36414: LD_INT 10
36416: PUSH
36417: LD_INT 12
36419: PUSH
36420: LD_INT 14
36422: PUSH
36423: LD_INT 13
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: PUSH
36432: LD_VAR 0 2
36436: PUSH
36437: LD_INT 9
36439: MINUS
36440: ARRAY
36441: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
36442: LD_ADDR_OWVAR 45
36446: PUSH
36447: LD_INT 11
36449: PUSH
36450: LD_INT 15
36452: PUSH
36453: LD_INT 12
36455: PUSH
36456: LD_INT 15
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: PUSH
36465: LD_VAR 0 2
36469: PUSH
36470: LD_INT 9
36472: MINUS
36473: ARRAY
36474: ST_TO_ADDR
// end ; 14 :
36475: GO 36894
36477: LD_INT 14
36479: DOUBLE
36480: EQUAL
36481: IFTRUE 36485
36483: GO 36496
36485: POP
// bc_type := b_workshop ; 15 :
36486: LD_ADDR_OWVAR 42
36490: PUSH
36491: LD_INT 2
36493: ST_TO_ADDR
36494: GO 36894
36496: LD_INT 15
36498: DOUBLE
36499: EQUAL
36500: IFTRUE 36504
36502: GO 36515
36504: POP
// bc_type := b_factory ; 16 :
36505: LD_ADDR_OWVAR 42
36509: PUSH
36510: LD_INT 3
36512: ST_TO_ADDR
36513: GO 36894
36515: LD_INT 16
36517: DOUBLE
36518: EQUAL
36519: IFTRUE 36523
36521: GO 36534
36523: POP
// bc_type := b_ext_gun ; 17 :
36524: LD_ADDR_OWVAR 42
36528: PUSH
36529: LD_INT 17
36531: ST_TO_ADDR
36532: GO 36894
36534: LD_INT 17
36536: DOUBLE
36537: EQUAL
36538: IFTRUE 36542
36540: GO 36570
36542: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
36543: LD_ADDR_OWVAR 42
36547: PUSH
36548: LD_INT 19
36550: PUSH
36551: LD_INT 23
36553: PUSH
36554: LD_INT 19
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: LIST
36561: PUSH
36562: LD_VAR 0 1
36566: ARRAY
36567: ST_TO_ADDR
36568: GO 36894
36570: LD_INT 18
36572: DOUBLE
36573: EQUAL
36574: IFTRUE 36578
36576: GO 36589
36578: POP
// bc_type := b_ext_radar ; 19 :
36579: LD_ADDR_OWVAR 42
36583: PUSH
36584: LD_INT 20
36586: ST_TO_ADDR
36587: GO 36894
36589: LD_INT 19
36591: DOUBLE
36592: EQUAL
36593: IFTRUE 36597
36595: GO 36608
36597: POP
// bc_type := b_ext_radio ; 20 :
36598: LD_ADDR_OWVAR 42
36602: PUSH
36603: LD_INT 22
36605: ST_TO_ADDR
36606: GO 36894
36608: LD_INT 20
36610: DOUBLE
36611: EQUAL
36612: IFTRUE 36616
36614: GO 36627
36616: POP
// bc_type := b_ext_siberium ; 21 :
36617: LD_ADDR_OWVAR 42
36621: PUSH
36622: LD_INT 21
36624: ST_TO_ADDR
36625: GO 36894
36627: LD_INT 21
36629: DOUBLE
36630: EQUAL
36631: IFTRUE 36635
36633: GO 36646
36635: POP
// bc_type := b_ext_computer ; 22 :
36636: LD_ADDR_OWVAR 42
36640: PUSH
36641: LD_INT 24
36643: ST_TO_ADDR
36644: GO 36894
36646: LD_INT 22
36648: DOUBLE
36649: EQUAL
36650: IFTRUE 36654
36652: GO 36665
36654: POP
// bc_type := b_ext_track ; 23 :
36655: LD_ADDR_OWVAR 42
36659: PUSH
36660: LD_INT 16
36662: ST_TO_ADDR
36663: GO 36894
36665: LD_INT 23
36667: DOUBLE
36668: EQUAL
36669: IFTRUE 36673
36671: GO 36684
36673: POP
// bc_type := b_ext_laser ; 24 :
36674: LD_ADDR_OWVAR 42
36678: PUSH
36679: LD_INT 25
36681: ST_TO_ADDR
36682: GO 36894
36684: LD_INT 24
36686: DOUBLE
36687: EQUAL
36688: IFTRUE 36692
36690: GO 36703
36692: POP
// bc_type := b_control_tower ; 25 :
36693: LD_ADDR_OWVAR 42
36697: PUSH
36698: LD_INT 36
36700: ST_TO_ADDR
36701: GO 36894
36703: LD_INT 25
36705: DOUBLE
36706: EQUAL
36707: IFTRUE 36711
36709: GO 36722
36711: POP
// bc_type := b_breastwork ; 26 :
36712: LD_ADDR_OWVAR 42
36716: PUSH
36717: LD_INT 31
36719: ST_TO_ADDR
36720: GO 36894
36722: LD_INT 26
36724: DOUBLE
36725: EQUAL
36726: IFTRUE 36730
36728: GO 36741
36730: POP
// bc_type := b_bunker ; 27 :
36731: LD_ADDR_OWVAR 42
36735: PUSH
36736: LD_INT 32
36738: ST_TO_ADDR
36739: GO 36894
36741: LD_INT 27
36743: DOUBLE
36744: EQUAL
36745: IFTRUE 36749
36747: GO 36760
36749: POP
// bc_type := b_turret ; 28 :
36750: LD_ADDR_OWVAR 42
36754: PUSH
36755: LD_INT 33
36757: ST_TO_ADDR
36758: GO 36894
36760: LD_INT 28
36762: DOUBLE
36763: EQUAL
36764: IFTRUE 36768
36766: GO 36779
36768: POP
// bc_type := b_armoury ; 29 :
36769: LD_ADDR_OWVAR 42
36773: PUSH
36774: LD_INT 4
36776: ST_TO_ADDR
36777: GO 36894
36779: LD_INT 29
36781: DOUBLE
36782: EQUAL
36783: IFTRUE 36787
36785: GO 36798
36787: POP
// bc_type := b_barracks ; 30 :
36788: LD_ADDR_OWVAR 42
36792: PUSH
36793: LD_INT 5
36795: ST_TO_ADDR
36796: GO 36894
36798: LD_INT 30
36800: DOUBLE
36801: EQUAL
36802: IFTRUE 36806
36804: GO 36817
36806: POP
// bc_type := b_solar_power ; 31 :
36807: LD_ADDR_OWVAR 42
36811: PUSH
36812: LD_INT 27
36814: ST_TO_ADDR
36815: GO 36894
36817: LD_INT 31
36819: DOUBLE
36820: EQUAL
36821: IFTRUE 36825
36823: GO 36836
36825: POP
// bc_type := b_oil_power ; 32 :
36826: LD_ADDR_OWVAR 42
36830: PUSH
36831: LD_INT 26
36833: ST_TO_ADDR
36834: GO 36894
36836: LD_INT 32
36838: DOUBLE
36839: EQUAL
36840: IFTRUE 36844
36842: GO 36855
36844: POP
// bc_type := b_siberite_power ; 33 :
36845: LD_ADDR_OWVAR 42
36849: PUSH
36850: LD_INT 28
36852: ST_TO_ADDR
36853: GO 36894
36855: LD_INT 33
36857: DOUBLE
36858: EQUAL
36859: IFTRUE 36863
36861: GO 36874
36863: POP
// bc_type := b_oil_mine ; 34 :
36864: LD_ADDR_OWVAR 42
36868: PUSH
36869: LD_INT 29
36871: ST_TO_ADDR
36872: GO 36894
36874: LD_INT 34
36876: DOUBLE
36877: EQUAL
36878: IFTRUE 36882
36880: GO 36893
36882: POP
// bc_type := b_siberite_mine ; end ;
36883: LD_ADDR_OWVAR 42
36887: PUSH
36888: LD_INT 30
36890: ST_TO_ADDR
36891: GO 36894
36893: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
36894: LD_ADDR_VAR 0 8
36898: PUSH
36899: LD_VAR 0 5
36903: PPUSH
36904: LD_VAR 0 6
36908: PPUSH
36909: LD_VAR 0 3
36913: PPUSH
36914: CALL_OW 47
36918: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
36919: LD_OWVAR 42
36923: PUSH
36924: LD_INT 32
36926: PUSH
36927: LD_INT 33
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: IN
36934: IFFALSE 36950
// PlaceWeaponTurret ( b , weapon ) ;
36936: LD_VAR 0 8
36940: PPUSH
36941: LD_VAR 0 4
36945: PPUSH
36946: CALL_OW 431
// end ;
36950: LD_VAR 0 7
36954: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
36955: LD_INT 0
36957: PPUSH
36958: PPUSH
36959: PPUSH
36960: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36961: LD_ADDR_VAR 0 4
36965: PUSH
36966: LD_INT 22
36968: PUSH
36969: LD_OWVAR 2
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 2
36980: PUSH
36981: LD_INT 30
36983: PUSH
36984: LD_INT 0
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 30
36993: PUSH
36994: LD_INT 1
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: LIST
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PPUSH
37010: CALL_OW 69
37014: ST_TO_ADDR
// if not tmp then
37015: LD_VAR 0 4
37019: NOT
37020: IFFALSE 37024
// exit ;
37022: GO 37083
// for i in tmp do
37024: LD_ADDR_VAR 0 2
37028: PUSH
37029: LD_VAR 0 4
37033: PUSH
37034: FOR_IN
37035: IFFALSE 37081
// for j = 1 to 3 do
37037: LD_ADDR_VAR 0 3
37041: PUSH
37042: DOUBLE
37043: LD_INT 1
37045: DEC
37046: ST_TO_ADDR
37047: LD_INT 3
37049: PUSH
37050: FOR_TO
37051: IFFALSE 37077
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
37053: LD_VAR 0 2
37057: PPUSH
37058: CALL_OW 274
37062: PPUSH
37063: LD_VAR 0 3
37067: PPUSH
37068: LD_INT 99999
37070: PPUSH
37071: CALL_OW 277
37075: GO 37050
37077: POP
37078: POP
37079: GO 37034
37081: POP
37082: POP
// end ;
37083: LD_VAR 0 1
37087: RET
// export function hHackSetLevel10 ; var i , j ; begin
37088: LD_INT 0
37090: PPUSH
37091: PPUSH
37092: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
37093: LD_ADDR_VAR 0 2
37097: PUSH
37098: LD_INT 21
37100: PUSH
37101: LD_INT 1
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PPUSH
37108: CALL_OW 69
37112: PUSH
37113: FOR_IN
37114: IFFALSE 37166
// if IsSelected ( i ) then
37116: LD_VAR 0 2
37120: PPUSH
37121: CALL_OW 306
37125: IFFALSE 37164
// begin for j := 1 to 4 do
37127: LD_ADDR_VAR 0 3
37131: PUSH
37132: DOUBLE
37133: LD_INT 1
37135: DEC
37136: ST_TO_ADDR
37137: LD_INT 4
37139: PUSH
37140: FOR_TO
37141: IFFALSE 37162
// SetSkill ( i , j , 10 ) ;
37143: LD_VAR 0 2
37147: PPUSH
37148: LD_VAR 0 3
37152: PPUSH
37153: LD_INT 10
37155: PPUSH
37156: CALL_OW 237
37160: GO 37140
37162: POP
37163: POP
// end ;
37164: GO 37113
37166: POP
37167: POP
// end ;
37168: LD_VAR 0 1
37172: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
37173: LD_INT 0
37175: PPUSH
37176: PPUSH
37177: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
37178: LD_ADDR_VAR 0 2
37182: PUSH
37183: LD_INT 22
37185: PUSH
37186: LD_OWVAR 2
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 21
37197: PUSH
37198: LD_INT 1
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PPUSH
37209: CALL_OW 69
37213: PUSH
37214: FOR_IN
37215: IFFALSE 37256
// begin for j := 1 to 4 do
37217: LD_ADDR_VAR 0 3
37221: PUSH
37222: DOUBLE
37223: LD_INT 1
37225: DEC
37226: ST_TO_ADDR
37227: LD_INT 4
37229: PUSH
37230: FOR_TO
37231: IFFALSE 37252
// SetSkill ( i , j , 10 ) ;
37233: LD_VAR 0 2
37237: PPUSH
37238: LD_VAR 0 3
37242: PPUSH
37243: LD_INT 10
37245: PPUSH
37246: CALL_OW 237
37250: GO 37230
37252: POP
37253: POP
// end ;
37254: GO 37214
37256: POP
37257: POP
// end ;
37258: LD_VAR 0 1
37262: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
37263: LD_INT 0
37265: PPUSH
// uc_side := your_side ;
37266: LD_ADDR_OWVAR 20
37270: PUSH
37271: LD_OWVAR 2
37275: ST_TO_ADDR
// uc_nation := nation ;
37276: LD_ADDR_OWVAR 21
37280: PUSH
37281: LD_VAR 0 1
37285: ST_TO_ADDR
// InitHc ;
37286: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
37290: LD_INT 0
37292: PPUSH
37293: LD_VAR 0 2
37297: PPUSH
37298: LD_VAR 0 3
37302: PPUSH
37303: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
37307: LD_VAR 0 4
37311: PPUSH
37312: LD_VAR 0 5
37316: PPUSH
37317: CALL_OW 428
37321: PUSH
37322: LD_INT 0
37324: EQUAL
37325: IFFALSE 37349
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
37327: CALL_OW 44
37331: PPUSH
37332: LD_VAR 0 4
37336: PPUSH
37337: LD_VAR 0 5
37341: PPUSH
37342: LD_INT 1
37344: PPUSH
37345: CALL_OW 48
// end ;
37349: LD_VAR 0 6
37353: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
37354: LD_INT 0
37356: PPUSH
37357: PPUSH
// uc_side := your_side ;
37358: LD_ADDR_OWVAR 20
37362: PUSH
37363: LD_OWVAR 2
37367: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
37368: LD_VAR 0 1
37372: PUSH
37373: LD_INT 1
37375: PUSH
37376: LD_INT 2
37378: PUSH
37379: LD_INT 3
37381: PUSH
37382: LD_INT 4
37384: PUSH
37385: LD_INT 5
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: IN
37395: IFFALSE 37407
// uc_nation := nation_american else
37397: LD_ADDR_OWVAR 21
37401: PUSH
37402: LD_INT 1
37404: ST_TO_ADDR
37405: GO 37450
// if chassis in [ 11 , 12 , 13 , 14 ] then
37407: LD_VAR 0 1
37411: PUSH
37412: LD_INT 11
37414: PUSH
37415: LD_INT 12
37417: PUSH
37418: LD_INT 13
37420: PUSH
37421: LD_INT 14
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: IN
37430: IFFALSE 37442
// uc_nation := nation_arabian else
37432: LD_ADDR_OWVAR 21
37436: PUSH
37437: LD_INT 2
37439: ST_TO_ADDR
37440: GO 37450
// uc_nation := nation_russian ;
37442: LD_ADDR_OWVAR 21
37446: PUSH
37447: LD_INT 3
37449: ST_TO_ADDR
// vc_chassis := chassis ;
37450: LD_ADDR_OWVAR 37
37454: PUSH
37455: LD_VAR 0 1
37459: ST_TO_ADDR
// vc_engine := engine ;
37460: LD_ADDR_OWVAR 39
37464: PUSH
37465: LD_VAR 0 2
37469: ST_TO_ADDR
// vc_control := control ;
37470: LD_ADDR_OWVAR 38
37474: PUSH
37475: LD_VAR 0 3
37479: ST_TO_ADDR
// vc_weapon := weapon ;
37480: LD_ADDR_OWVAR 40
37484: PUSH
37485: LD_VAR 0 4
37489: ST_TO_ADDR
// un := CreateVehicle ;
37490: LD_ADDR_VAR 0 8
37494: PUSH
37495: CALL_OW 45
37499: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
37500: LD_VAR 0 8
37504: PPUSH
37505: LD_INT 0
37507: PPUSH
37508: LD_INT 5
37510: PPUSH
37511: CALL_OW 12
37515: PPUSH
37516: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
37520: LD_VAR 0 8
37524: PPUSH
37525: LD_VAR 0 5
37529: PPUSH
37530: LD_VAR 0 6
37534: PPUSH
37535: LD_INT 1
37537: PPUSH
37538: CALL_OW 48
// end ;
37542: LD_VAR 0 7
37546: RET
// export hInvincible ; every 1 do
37547: GO 37549
37549: DISABLE
// hInvincible := [ ] ;
37550: LD_ADDR_EXP 141
37554: PUSH
37555: EMPTY
37556: ST_TO_ADDR
37557: END
// every 10 do var i ;
37558: GO 37560
37560: DISABLE
37561: LD_INT 0
37563: PPUSH
// begin enable ;
37564: ENABLE
// if not hInvincible then
37565: LD_EXP 141
37569: NOT
37570: IFFALSE 37574
// exit ;
37572: GO 37618
// for i in hInvincible do
37574: LD_ADDR_VAR 0 1
37578: PUSH
37579: LD_EXP 141
37583: PUSH
37584: FOR_IN
37585: IFFALSE 37616
// if GetLives ( i ) < 1000 then
37587: LD_VAR 0 1
37591: PPUSH
37592: CALL_OW 256
37596: PUSH
37597: LD_INT 1000
37599: LESS
37600: IFFALSE 37614
// SetLives ( i , 1000 ) ;
37602: LD_VAR 0 1
37606: PPUSH
37607: LD_INT 1000
37609: PPUSH
37610: CALL_OW 234
37614: GO 37584
37616: POP
37617: POP
// end ;
37618: PPOPN 1
37620: END
// export function hHackInvincible ; var i ; begin
37621: LD_INT 0
37623: PPUSH
37624: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
37625: LD_ADDR_VAR 0 2
37629: PUSH
37630: LD_INT 2
37632: PUSH
37633: LD_INT 21
37635: PUSH
37636: LD_INT 1
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 21
37645: PUSH
37646: LD_INT 2
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: LIST
37657: PPUSH
37658: CALL_OW 69
37662: PUSH
37663: FOR_IN
37664: IFFALSE 37725
// if IsSelected ( i ) then
37666: LD_VAR 0 2
37670: PPUSH
37671: CALL_OW 306
37675: IFFALSE 37723
// begin if i in hInvincible then
37677: LD_VAR 0 2
37681: PUSH
37682: LD_EXP 141
37686: IN
37687: IFFALSE 37707
// hInvincible := hInvincible diff i else
37689: LD_ADDR_EXP 141
37693: PUSH
37694: LD_EXP 141
37698: PUSH
37699: LD_VAR 0 2
37703: DIFF
37704: ST_TO_ADDR
37705: GO 37723
// hInvincible := hInvincible union i ;
37707: LD_ADDR_EXP 141
37711: PUSH
37712: LD_EXP 141
37716: PUSH
37717: LD_VAR 0 2
37721: UNION
37722: ST_TO_ADDR
// end ;
37723: GO 37663
37725: POP
37726: POP
// end ;
37727: LD_VAR 0 1
37731: RET
// export function hHackInvisible ; var i , j ; begin
37732: LD_INT 0
37734: PPUSH
37735: PPUSH
37736: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
37737: LD_ADDR_VAR 0 2
37741: PUSH
37742: LD_INT 21
37744: PUSH
37745: LD_INT 1
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PPUSH
37752: CALL_OW 69
37756: PUSH
37757: FOR_IN
37758: IFFALSE 37782
// if IsSelected ( i ) then
37760: LD_VAR 0 2
37764: PPUSH
37765: CALL_OW 306
37769: IFFALSE 37780
// ComForceInvisible ( i ) ;
37771: LD_VAR 0 2
37775: PPUSH
37776: CALL_OW 496
37780: GO 37757
37782: POP
37783: POP
// end ;
37784: LD_VAR 0 1
37788: RET
// export function hHackChangeYourSide ; begin
37789: LD_INT 0
37791: PPUSH
// if your_side = 8 then
37792: LD_OWVAR 2
37796: PUSH
37797: LD_INT 8
37799: EQUAL
37800: IFFALSE 37812
// your_side := 0 else
37802: LD_ADDR_OWVAR 2
37806: PUSH
37807: LD_INT 0
37809: ST_TO_ADDR
37810: GO 37826
// your_side := your_side + 1 ;
37812: LD_ADDR_OWVAR 2
37816: PUSH
37817: LD_OWVAR 2
37821: PUSH
37822: LD_INT 1
37824: PLUS
37825: ST_TO_ADDR
// end ;
37826: LD_VAR 0 1
37830: RET
// export function hHackChangeUnitSide ; var i , j ; begin
37831: LD_INT 0
37833: PPUSH
37834: PPUSH
37835: PPUSH
// for i in all_units do
37836: LD_ADDR_VAR 0 2
37840: PUSH
37841: LD_OWVAR 3
37845: PUSH
37846: FOR_IN
37847: IFFALSE 37925
// if IsSelected ( i ) then
37849: LD_VAR 0 2
37853: PPUSH
37854: CALL_OW 306
37858: IFFALSE 37923
// begin j := GetSide ( i ) ;
37860: LD_ADDR_VAR 0 3
37864: PUSH
37865: LD_VAR 0 2
37869: PPUSH
37870: CALL_OW 255
37874: ST_TO_ADDR
// if j = 8 then
37875: LD_VAR 0 3
37879: PUSH
37880: LD_INT 8
37882: EQUAL
37883: IFFALSE 37895
// j := 0 else
37885: LD_ADDR_VAR 0 3
37889: PUSH
37890: LD_INT 0
37892: ST_TO_ADDR
37893: GO 37909
// j := j + 1 ;
37895: LD_ADDR_VAR 0 3
37899: PUSH
37900: LD_VAR 0 3
37904: PUSH
37905: LD_INT 1
37907: PLUS
37908: ST_TO_ADDR
// SetSide ( i , j ) ;
37909: LD_VAR 0 2
37913: PPUSH
37914: LD_VAR 0 3
37918: PPUSH
37919: CALL_OW 235
// end ;
37923: GO 37846
37925: POP
37926: POP
// end ;
37927: LD_VAR 0 1
37931: RET
// export function hHackFog ; begin
37932: LD_INT 0
37934: PPUSH
// FogOff ( true ) ;
37935: LD_INT 1
37937: PPUSH
37938: CALL_OW 344
// end ;
37942: LD_VAR 0 1
37946: RET
// export function hHackTeleport ( unit , x , y ) ; begin
37947: LD_INT 0
37949: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
37950: LD_VAR 0 1
37954: PPUSH
37955: LD_VAR 0 2
37959: PPUSH
37960: LD_VAR 0 3
37964: PPUSH
37965: LD_INT 1
37967: PPUSH
37968: LD_INT 1
37970: PPUSH
37971: CALL_OW 483
// CenterOnXY ( x , y ) ;
37975: LD_VAR 0 2
37979: PPUSH
37980: LD_VAR 0 3
37984: PPUSH
37985: CALL_OW 84
// end ; end_of_file
37989: LD_VAR 0 4
37993: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
37994: LD_INT 0
37996: PPUSH
37997: PPUSH
37998: PPUSH
37999: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
38000: LD_VAR 0 1
38004: PPUSH
38005: CALL_OW 264
38009: PUSH
38010: LD_EXP 69
38014: EQUAL
38015: IFFALSE 38087
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
38017: LD_INT 68
38019: PPUSH
38020: LD_VAR 0 1
38024: PPUSH
38025: CALL_OW 255
38029: PPUSH
38030: CALL_OW 321
38034: PUSH
38035: LD_INT 2
38037: EQUAL
38038: IFFALSE 38050
// eff := 70 else
38040: LD_ADDR_VAR 0 4
38044: PUSH
38045: LD_INT 70
38047: ST_TO_ADDR
38048: GO 38058
// eff := 30 ;
38050: LD_ADDR_VAR 0 4
38054: PUSH
38055: LD_INT 30
38057: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
38058: LD_VAR 0 1
38062: PPUSH
38063: CALL_OW 250
38067: PPUSH
38068: LD_VAR 0 1
38072: PPUSH
38073: CALL_OW 251
38077: PPUSH
38078: LD_VAR 0 4
38082: PPUSH
38083: CALL_OW 495
// end ; end ;
38087: LD_VAR 0 2
38091: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
38092: LD_INT 0
38094: PPUSH
// end ;
38095: LD_VAR 0 4
38099: RET
// export function SOS_Command ( cmd ) ; begin
38100: LD_INT 0
38102: PPUSH
// end ;
38103: LD_VAR 0 2
38107: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
38108: LD_INT 0
38110: PPUSH
// end ;
38111: LD_VAR 0 6
38115: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
38116: LD_INT 0
38118: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
38119: LD_VAR 0 1
38123: PUSH
38124: LD_INT 250
38126: EQUAL
38127: PUSH
38128: LD_VAR 0 2
38132: PPUSH
38133: CALL_OW 264
38137: PUSH
38138: LD_EXP 72
38142: EQUAL
38143: AND
38144: IFFALSE 38165
// MinerPlaceMine ( unit , x , y ) ;
38146: LD_VAR 0 2
38150: PPUSH
38151: LD_VAR 0 4
38155: PPUSH
38156: LD_VAR 0 5
38160: PPUSH
38161: CALL 40514 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
38165: LD_VAR 0 1
38169: PUSH
38170: LD_INT 251
38172: EQUAL
38173: PUSH
38174: LD_VAR 0 2
38178: PPUSH
38179: CALL_OW 264
38183: PUSH
38184: LD_EXP 72
38188: EQUAL
38189: AND
38190: IFFALSE 38211
// MinerDetonateMine ( unit , x , y ) ;
38192: LD_VAR 0 2
38196: PPUSH
38197: LD_VAR 0 4
38201: PPUSH
38202: LD_VAR 0 5
38206: PPUSH
38207: CALL 40791 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
38211: LD_VAR 0 1
38215: PUSH
38216: LD_INT 252
38218: EQUAL
38219: PUSH
38220: LD_VAR 0 2
38224: PPUSH
38225: CALL_OW 264
38229: PUSH
38230: LD_EXP 72
38234: EQUAL
38235: AND
38236: IFFALSE 38257
// MinerCreateMinefield ( unit , x , y ) ;
38238: LD_VAR 0 2
38242: PPUSH
38243: LD_VAR 0 4
38247: PPUSH
38248: LD_VAR 0 5
38252: PPUSH
38253: CALL 41208 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
38257: LD_VAR 0 1
38261: PUSH
38262: LD_INT 253
38264: EQUAL
38265: PUSH
38266: LD_VAR 0 2
38270: PPUSH
38271: CALL_OW 257
38275: PUSH
38276: LD_INT 5
38278: EQUAL
38279: AND
38280: IFFALSE 38301
// ComBinocular ( unit , x , y ) ;
38282: LD_VAR 0 2
38286: PPUSH
38287: LD_VAR 0 4
38291: PPUSH
38292: LD_VAR 0 5
38296: PPUSH
38297: CALL 41579 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
38301: LD_VAR 0 1
38305: PUSH
38306: LD_INT 254
38308: EQUAL
38309: PUSH
38310: LD_VAR 0 2
38314: PPUSH
38315: CALL_OW 264
38319: PUSH
38320: LD_EXP 67
38324: EQUAL
38325: AND
38326: PUSH
38327: LD_VAR 0 3
38331: PPUSH
38332: CALL_OW 263
38336: PUSH
38337: LD_INT 3
38339: EQUAL
38340: AND
38341: IFFALSE 38357
// HackDestroyVehicle ( unit , selectedUnit ) ;
38343: LD_VAR 0 2
38347: PPUSH
38348: LD_VAR 0 3
38352: PPUSH
38353: CALL 39874 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
38357: LD_VAR 0 1
38361: PUSH
38362: LD_INT 255
38364: EQUAL
38365: PUSH
38366: LD_VAR 0 2
38370: PPUSH
38371: CALL_OW 264
38375: PUSH
38376: LD_INT 14
38378: PUSH
38379: LD_INT 53
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: IN
38386: AND
38387: PUSH
38388: LD_VAR 0 4
38392: PPUSH
38393: LD_VAR 0 5
38397: PPUSH
38398: CALL_OW 488
38402: AND
38403: IFFALSE 38427
// CutTreeXYR ( unit , x , y , 12 ) ;
38405: LD_VAR 0 2
38409: PPUSH
38410: LD_VAR 0 4
38414: PPUSH
38415: LD_VAR 0 5
38419: PPUSH
38420: LD_INT 12
38422: PPUSH
38423: CALL 38440 0 4
// end ;
38427: LD_VAR 0 6
38431: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
38432: LD_INT 0
38434: PPUSH
// end ;
38435: LD_VAR 0 4
38439: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
38440: LD_INT 0
38442: PPUSH
38443: PPUSH
38444: PPUSH
38445: PPUSH
38446: PPUSH
38447: PPUSH
38448: PPUSH
38449: PPUSH
38450: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
38451: LD_VAR 0 1
38455: NOT
38456: PUSH
38457: LD_VAR 0 2
38461: PPUSH
38462: LD_VAR 0 3
38466: PPUSH
38467: CALL_OW 488
38471: NOT
38472: OR
38473: PUSH
38474: LD_VAR 0 4
38478: NOT
38479: OR
38480: IFFALSE 38484
// exit ;
38482: GO 38824
// list := [ ] ;
38484: LD_ADDR_VAR 0 13
38488: PUSH
38489: EMPTY
38490: ST_TO_ADDR
// if x - r < 0 then
38491: LD_VAR 0 2
38495: PUSH
38496: LD_VAR 0 4
38500: MINUS
38501: PUSH
38502: LD_INT 0
38504: LESS
38505: IFFALSE 38517
// min_x := 0 else
38507: LD_ADDR_VAR 0 7
38511: PUSH
38512: LD_INT 0
38514: ST_TO_ADDR
38515: GO 38533
// min_x := x - r ;
38517: LD_ADDR_VAR 0 7
38521: PUSH
38522: LD_VAR 0 2
38526: PUSH
38527: LD_VAR 0 4
38531: MINUS
38532: ST_TO_ADDR
// if y - r < 0 then
38533: LD_VAR 0 3
38537: PUSH
38538: LD_VAR 0 4
38542: MINUS
38543: PUSH
38544: LD_INT 0
38546: LESS
38547: IFFALSE 38559
// min_y := 0 else
38549: LD_ADDR_VAR 0 8
38553: PUSH
38554: LD_INT 0
38556: ST_TO_ADDR
38557: GO 38575
// min_y := y - r ;
38559: LD_ADDR_VAR 0 8
38563: PUSH
38564: LD_VAR 0 3
38568: PUSH
38569: LD_VAR 0 4
38573: MINUS
38574: ST_TO_ADDR
// max_x := x + r ;
38575: LD_ADDR_VAR 0 9
38579: PUSH
38580: LD_VAR 0 2
38584: PUSH
38585: LD_VAR 0 4
38589: PLUS
38590: ST_TO_ADDR
// max_y := y + r ;
38591: LD_ADDR_VAR 0 10
38595: PUSH
38596: LD_VAR 0 3
38600: PUSH
38601: LD_VAR 0 4
38605: PLUS
38606: ST_TO_ADDR
// for _x = min_x to max_x do
38607: LD_ADDR_VAR 0 11
38611: PUSH
38612: DOUBLE
38613: LD_VAR 0 7
38617: DEC
38618: ST_TO_ADDR
38619: LD_VAR 0 9
38623: PUSH
38624: FOR_TO
38625: IFFALSE 38742
// for _y = min_y to max_y do
38627: LD_ADDR_VAR 0 12
38631: PUSH
38632: DOUBLE
38633: LD_VAR 0 8
38637: DEC
38638: ST_TO_ADDR
38639: LD_VAR 0 10
38643: PUSH
38644: FOR_TO
38645: IFFALSE 38738
// begin if not ValidHex ( _x , _y ) then
38647: LD_VAR 0 11
38651: PPUSH
38652: LD_VAR 0 12
38656: PPUSH
38657: CALL_OW 488
38661: NOT
38662: IFFALSE 38666
// continue ;
38664: GO 38644
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38666: LD_VAR 0 11
38670: PPUSH
38671: LD_VAR 0 12
38675: PPUSH
38676: CALL_OW 351
38680: PUSH
38681: LD_VAR 0 11
38685: PPUSH
38686: LD_VAR 0 12
38690: PPUSH
38691: CALL_OW 554
38695: AND
38696: IFFALSE 38736
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38698: LD_ADDR_VAR 0 13
38702: PUSH
38703: LD_VAR 0 13
38707: PPUSH
38708: LD_VAR 0 13
38712: PUSH
38713: LD_INT 1
38715: PLUS
38716: PPUSH
38717: LD_VAR 0 11
38721: PUSH
38722: LD_VAR 0 12
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PPUSH
38731: CALL_OW 2
38735: ST_TO_ADDR
// end ;
38736: GO 38644
38738: POP
38739: POP
38740: GO 38624
38742: POP
38743: POP
// if not list then
38744: LD_VAR 0 13
38748: NOT
38749: IFFALSE 38753
// exit ;
38751: GO 38824
// for i in list do
38753: LD_ADDR_VAR 0 6
38757: PUSH
38758: LD_VAR 0 13
38762: PUSH
38763: FOR_IN
38764: IFFALSE 38822
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
38766: LD_VAR 0 1
38770: PPUSH
38771: LD_STRING M
38773: PUSH
38774: LD_VAR 0 6
38778: PUSH
38779: LD_INT 1
38781: ARRAY
38782: PUSH
38783: LD_VAR 0 6
38787: PUSH
38788: LD_INT 2
38790: ARRAY
38791: PUSH
38792: LD_INT 0
38794: PUSH
38795: LD_INT 0
38797: PUSH
38798: LD_INT 0
38800: PUSH
38801: LD_INT 0
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: PUSH
38813: EMPTY
38814: LIST
38815: PPUSH
38816: CALL_OW 447
38820: GO 38763
38822: POP
38823: POP
// end ;
38824: LD_VAR 0 5
38828: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38829: LD_EXP 144
38833: NOT
38834: IFFALSE 38884
38836: GO 38838
38838: DISABLE
// begin initHack := true ;
38839: LD_ADDR_EXP 144
38843: PUSH
38844: LD_INT 1
38846: ST_TO_ADDR
// hackTanks := [ ] ;
38847: LD_ADDR_EXP 145
38851: PUSH
38852: EMPTY
38853: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38854: LD_ADDR_EXP 146
38858: PUSH
38859: EMPTY
38860: ST_TO_ADDR
// hackLimit := 3 ;
38861: LD_ADDR_EXP 147
38865: PUSH
38866: LD_INT 3
38868: ST_TO_ADDR
// hackDist := 12 ;
38869: LD_ADDR_EXP 148
38873: PUSH
38874: LD_INT 12
38876: ST_TO_ADDR
// hackCounter := [ ] ;
38877: LD_ADDR_EXP 149
38881: PUSH
38882: EMPTY
38883: ST_TO_ADDR
// end ;
38884: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38885: LD_EXP 144
38889: PUSH
38890: LD_INT 34
38892: PUSH
38893: LD_EXP 67
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PPUSH
38902: CALL_OW 69
38906: AND
38907: IFFALSE 39162
38909: GO 38911
38911: DISABLE
38912: LD_INT 0
38914: PPUSH
38915: PPUSH
// begin enable ;
38916: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38917: LD_ADDR_VAR 0 1
38921: PUSH
38922: LD_INT 34
38924: PUSH
38925: LD_EXP 67
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PPUSH
38934: CALL_OW 69
38938: PUSH
38939: FOR_IN
38940: IFFALSE 39160
// begin if not i in hackTanks then
38942: LD_VAR 0 1
38946: PUSH
38947: LD_EXP 145
38951: IN
38952: NOT
38953: IFFALSE 39036
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38955: LD_ADDR_EXP 145
38959: PUSH
38960: LD_EXP 145
38964: PPUSH
38965: LD_EXP 145
38969: PUSH
38970: LD_INT 1
38972: PLUS
38973: PPUSH
38974: LD_VAR 0 1
38978: PPUSH
38979: CALL_OW 1
38983: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38984: LD_ADDR_EXP 146
38988: PUSH
38989: LD_EXP 146
38993: PPUSH
38994: LD_EXP 146
38998: PUSH
38999: LD_INT 1
39001: PLUS
39002: PPUSH
39003: EMPTY
39004: PPUSH
39005: CALL_OW 1
39009: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
39010: LD_ADDR_EXP 149
39014: PUSH
39015: LD_EXP 149
39019: PPUSH
39020: LD_EXP 149
39024: PUSH
39025: LD_INT 1
39027: PLUS
39028: PPUSH
39029: EMPTY
39030: PPUSH
39031: CALL_OW 1
39035: ST_TO_ADDR
// end ; if not IsOk ( i ) then
39036: LD_VAR 0 1
39040: PPUSH
39041: CALL_OW 302
39045: NOT
39046: IFFALSE 39059
// begin HackUnlinkAll ( i ) ;
39048: LD_VAR 0 1
39052: PPUSH
39053: CALL 39165 0 1
// continue ;
39057: GO 38939
// end ; HackCheckCapturedStatus ( i ) ;
39059: LD_VAR 0 1
39063: PPUSH
39064: CALL 39608 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
39068: LD_ADDR_VAR 0 2
39072: PUSH
39073: LD_INT 81
39075: PUSH
39076: LD_VAR 0 1
39080: PPUSH
39081: CALL_OW 255
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 33
39092: PUSH
39093: LD_INT 3
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 91
39102: PUSH
39103: LD_VAR 0 1
39107: PUSH
39108: LD_EXP 148
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 50
39120: PUSH
39121: EMPTY
39122: LIST
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: PPUSH
39130: CALL_OW 69
39134: ST_TO_ADDR
// if not tmp then
39135: LD_VAR 0 2
39139: NOT
39140: IFFALSE 39144
// continue ;
39142: GO 38939
// HackLink ( i , tmp ) ;
39144: LD_VAR 0 1
39148: PPUSH
39149: LD_VAR 0 2
39153: PPUSH
39154: CALL 39301 0 2
// end ;
39158: GO 38939
39160: POP
39161: POP
// end ;
39162: PPOPN 2
39164: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
39165: LD_INT 0
39167: PPUSH
39168: PPUSH
39169: PPUSH
// if not hack in hackTanks then
39170: LD_VAR 0 1
39174: PUSH
39175: LD_EXP 145
39179: IN
39180: NOT
39181: IFFALSE 39185
// exit ;
39183: GO 39296
// index := GetElementIndex ( hackTanks , hack ) ;
39185: LD_ADDR_VAR 0 4
39189: PUSH
39190: LD_EXP 145
39194: PPUSH
39195: LD_VAR 0 1
39199: PPUSH
39200: CALL 46770 0 2
39204: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
39205: LD_EXP 146
39209: PUSH
39210: LD_VAR 0 4
39214: ARRAY
39215: IFFALSE 39296
// begin for i in hackTanksCaptured [ index ] do
39217: LD_ADDR_VAR 0 3
39221: PUSH
39222: LD_EXP 146
39226: PUSH
39227: LD_VAR 0 4
39231: ARRAY
39232: PUSH
39233: FOR_IN
39234: IFFALSE 39260
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
39236: LD_VAR 0 3
39240: PUSH
39241: LD_INT 1
39243: ARRAY
39244: PPUSH
39245: LD_VAR 0 3
39249: PUSH
39250: LD_INT 2
39252: ARRAY
39253: PPUSH
39254: CALL_OW 235
39258: GO 39233
39260: POP
39261: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
39262: LD_ADDR_EXP 146
39266: PUSH
39267: LD_EXP 146
39271: PPUSH
39272: LD_VAR 0 4
39276: PPUSH
39277: EMPTY
39278: PPUSH
39279: CALL_OW 1
39283: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
39284: LD_VAR 0 1
39288: PPUSH
39289: LD_INT 0
39291: PPUSH
39292: CALL_OW 505
// end ; end ;
39296: LD_VAR 0 2
39300: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
39301: LD_INT 0
39303: PPUSH
39304: PPUSH
39305: PPUSH
// if not hack in hackTanks or not vehicles then
39306: LD_VAR 0 1
39310: PUSH
39311: LD_EXP 145
39315: IN
39316: NOT
39317: PUSH
39318: LD_VAR 0 2
39322: NOT
39323: OR
39324: IFFALSE 39328
// exit ;
39326: GO 39603
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
39328: LD_ADDR_VAR 0 2
39332: PUSH
39333: LD_VAR 0 1
39337: PPUSH
39338: LD_VAR 0 2
39342: PPUSH
39343: LD_INT 1
39345: PPUSH
39346: LD_INT 1
39348: PPUSH
39349: CALL 47420 0 4
39353: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
39354: LD_ADDR_VAR 0 5
39358: PUSH
39359: LD_EXP 145
39363: PPUSH
39364: LD_VAR 0 1
39368: PPUSH
39369: CALL 46770 0 2
39373: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
39374: LD_EXP 146
39378: PUSH
39379: LD_VAR 0 5
39383: ARRAY
39384: PUSH
39385: LD_EXP 147
39389: LESS
39390: IFFALSE 39579
// begin for i := 1 to vehicles do
39392: LD_ADDR_VAR 0 4
39396: PUSH
39397: DOUBLE
39398: LD_INT 1
39400: DEC
39401: ST_TO_ADDR
39402: LD_VAR 0 2
39406: PUSH
39407: FOR_TO
39408: IFFALSE 39577
// begin if hackTanksCaptured [ index ] = hackLimit then
39410: LD_EXP 146
39414: PUSH
39415: LD_VAR 0 5
39419: ARRAY
39420: PUSH
39421: LD_EXP 147
39425: EQUAL
39426: IFFALSE 39430
// break ;
39428: GO 39577
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
39430: LD_ADDR_EXP 149
39434: PUSH
39435: LD_EXP 149
39439: PPUSH
39440: LD_VAR 0 5
39444: PPUSH
39445: LD_EXP 149
39449: PUSH
39450: LD_VAR 0 5
39454: ARRAY
39455: PUSH
39456: LD_INT 1
39458: PLUS
39459: PPUSH
39460: CALL_OW 1
39464: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
39465: LD_ADDR_EXP 146
39469: PUSH
39470: LD_EXP 146
39474: PPUSH
39475: LD_VAR 0 5
39479: PUSH
39480: LD_EXP 146
39484: PUSH
39485: LD_VAR 0 5
39489: ARRAY
39490: PUSH
39491: LD_INT 1
39493: PLUS
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PPUSH
39499: LD_VAR 0 2
39503: PUSH
39504: LD_VAR 0 4
39508: ARRAY
39509: PUSH
39510: LD_VAR 0 2
39514: PUSH
39515: LD_VAR 0 4
39519: ARRAY
39520: PPUSH
39521: CALL_OW 255
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PPUSH
39530: CALL 46985 0 3
39534: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
39535: LD_VAR 0 2
39539: PUSH
39540: LD_VAR 0 4
39544: ARRAY
39545: PPUSH
39546: LD_VAR 0 1
39550: PPUSH
39551: CALL_OW 255
39555: PPUSH
39556: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
39560: LD_VAR 0 2
39564: PUSH
39565: LD_VAR 0 4
39569: ARRAY
39570: PPUSH
39571: CALL_OW 141
// end ;
39575: GO 39407
39577: POP
39578: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39579: LD_VAR 0 1
39583: PPUSH
39584: LD_EXP 146
39588: PUSH
39589: LD_VAR 0 5
39593: ARRAY
39594: PUSH
39595: LD_INT 0
39597: PLUS
39598: PPUSH
39599: CALL_OW 505
// end ;
39603: LD_VAR 0 3
39607: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
39608: LD_INT 0
39610: PPUSH
39611: PPUSH
39612: PPUSH
39613: PPUSH
// if not hack in hackTanks then
39614: LD_VAR 0 1
39618: PUSH
39619: LD_EXP 145
39623: IN
39624: NOT
39625: IFFALSE 39629
// exit ;
39627: GO 39869
// index := GetElementIndex ( hackTanks , hack ) ;
39629: LD_ADDR_VAR 0 4
39633: PUSH
39634: LD_EXP 145
39638: PPUSH
39639: LD_VAR 0 1
39643: PPUSH
39644: CALL 46770 0 2
39648: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39649: LD_ADDR_VAR 0 3
39653: PUSH
39654: DOUBLE
39655: LD_EXP 146
39659: PUSH
39660: LD_VAR 0 4
39664: ARRAY
39665: INC
39666: ST_TO_ADDR
39667: LD_INT 1
39669: PUSH
39670: FOR_DOWNTO
39671: IFFALSE 39843
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39673: LD_ADDR_VAR 0 5
39677: PUSH
39678: LD_EXP 146
39682: PUSH
39683: LD_VAR 0 4
39687: ARRAY
39688: PUSH
39689: LD_VAR 0 3
39693: ARRAY
39694: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39695: LD_VAR 0 5
39699: PUSH
39700: LD_INT 1
39702: ARRAY
39703: PPUSH
39704: CALL_OW 302
39708: NOT
39709: PUSH
39710: LD_VAR 0 5
39714: PUSH
39715: LD_INT 1
39717: ARRAY
39718: PPUSH
39719: CALL_OW 255
39723: PUSH
39724: LD_VAR 0 1
39728: PPUSH
39729: CALL_OW 255
39733: NONEQUAL
39734: OR
39735: IFFALSE 39841
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39737: LD_VAR 0 5
39741: PUSH
39742: LD_INT 1
39744: ARRAY
39745: PPUSH
39746: CALL_OW 305
39750: PUSH
39751: LD_VAR 0 5
39755: PUSH
39756: LD_INT 1
39758: ARRAY
39759: PPUSH
39760: CALL_OW 255
39764: PUSH
39765: LD_VAR 0 1
39769: PPUSH
39770: CALL_OW 255
39774: EQUAL
39775: AND
39776: IFFALSE 39800
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39778: LD_VAR 0 5
39782: PUSH
39783: LD_INT 1
39785: ARRAY
39786: PPUSH
39787: LD_VAR 0 5
39791: PUSH
39792: LD_INT 2
39794: ARRAY
39795: PPUSH
39796: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39800: LD_ADDR_EXP 146
39804: PUSH
39805: LD_EXP 146
39809: PPUSH
39810: LD_VAR 0 4
39814: PPUSH
39815: LD_EXP 146
39819: PUSH
39820: LD_VAR 0 4
39824: ARRAY
39825: PPUSH
39826: LD_VAR 0 3
39830: PPUSH
39831: CALL_OW 3
39835: PPUSH
39836: CALL_OW 1
39840: ST_TO_ADDR
// end ; end ;
39841: GO 39670
39843: POP
39844: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39845: LD_VAR 0 1
39849: PPUSH
39850: LD_EXP 146
39854: PUSH
39855: LD_VAR 0 4
39859: ARRAY
39860: PUSH
39861: LD_INT 0
39863: PLUS
39864: PPUSH
39865: CALL_OW 505
// end ;
39869: LD_VAR 0 2
39873: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39874: LD_INT 0
39876: PPUSH
39877: PPUSH
39878: PPUSH
39879: PPUSH
// if not hack in hackTanks then
39880: LD_VAR 0 1
39884: PUSH
39885: LD_EXP 145
39889: IN
39890: NOT
39891: IFFALSE 39895
// exit ;
39893: GO 39980
// index := GetElementIndex ( hackTanks , hack ) ;
39895: LD_ADDR_VAR 0 5
39899: PUSH
39900: LD_EXP 145
39904: PPUSH
39905: LD_VAR 0 1
39909: PPUSH
39910: CALL 46770 0 2
39914: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39915: LD_ADDR_VAR 0 4
39919: PUSH
39920: DOUBLE
39921: LD_INT 1
39923: DEC
39924: ST_TO_ADDR
39925: LD_EXP 146
39929: PUSH
39930: LD_VAR 0 5
39934: ARRAY
39935: PUSH
39936: FOR_TO
39937: IFFALSE 39978
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39939: LD_EXP 146
39943: PUSH
39944: LD_VAR 0 5
39948: ARRAY
39949: PUSH
39950: LD_VAR 0 4
39954: ARRAY
39955: PUSH
39956: LD_INT 1
39958: ARRAY
39959: PUSH
39960: LD_VAR 0 2
39964: EQUAL
39965: IFFALSE 39976
// KillUnit ( vehicle ) ;
39967: LD_VAR 0 2
39971: PPUSH
39972: CALL_OW 66
39976: GO 39936
39978: POP
39979: POP
// end ;
39980: LD_VAR 0 3
39984: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39985: LD_EXP 150
39989: NOT
39990: IFFALSE 40025
39992: GO 39994
39994: DISABLE
// begin initMiner := true ;
39995: LD_ADDR_EXP 150
39999: PUSH
40000: LD_INT 1
40002: ST_TO_ADDR
// minersList := [ ] ;
40003: LD_ADDR_EXP 151
40007: PUSH
40008: EMPTY
40009: ST_TO_ADDR
// minerMinesList := [ ] ;
40010: LD_ADDR_EXP 152
40014: PUSH
40015: EMPTY
40016: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
40017: LD_ADDR_EXP 153
40021: PUSH
40022: LD_INT 5
40024: ST_TO_ADDR
// end ;
40025: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
40026: LD_EXP 150
40030: PUSH
40031: LD_INT 34
40033: PUSH
40034: LD_EXP 72
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PPUSH
40043: CALL_OW 69
40047: AND
40048: IFFALSE 40511
40050: GO 40052
40052: DISABLE
40053: LD_INT 0
40055: PPUSH
40056: PPUSH
40057: PPUSH
40058: PPUSH
// begin enable ;
40059: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
40060: LD_ADDR_VAR 0 1
40064: PUSH
40065: LD_INT 34
40067: PUSH
40068: LD_EXP 72
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PPUSH
40077: CALL_OW 69
40081: PUSH
40082: FOR_IN
40083: IFFALSE 40155
// begin if not i in minersList then
40085: LD_VAR 0 1
40089: PUSH
40090: LD_EXP 151
40094: IN
40095: NOT
40096: IFFALSE 40153
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
40098: LD_ADDR_EXP 151
40102: PUSH
40103: LD_EXP 151
40107: PPUSH
40108: LD_EXP 151
40112: PUSH
40113: LD_INT 1
40115: PLUS
40116: PPUSH
40117: LD_VAR 0 1
40121: PPUSH
40122: CALL_OW 1
40126: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
40127: LD_ADDR_EXP 152
40131: PUSH
40132: LD_EXP 152
40136: PPUSH
40137: LD_EXP 152
40141: PUSH
40142: LD_INT 1
40144: PLUS
40145: PPUSH
40146: EMPTY
40147: PPUSH
40148: CALL_OW 1
40152: ST_TO_ADDR
// end end ;
40153: GO 40082
40155: POP
40156: POP
// for i := minerMinesList downto 1 do
40157: LD_ADDR_VAR 0 1
40161: PUSH
40162: DOUBLE
40163: LD_EXP 152
40167: INC
40168: ST_TO_ADDR
40169: LD_INT 1
40171: PUSH
40172: FOR_DOWNTO
40173: IFFALSE 40509
// begin if IsLive ( minersList [ i ] ) then
40175: LD_EXP 151
40179: PUSH
40180: LD_VAR 0 1
40184: ARRAY
40185: PPUSH
40186: CALL_OW 300
40190: IFFALSE 40218
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
40192: LD_EXP 151
40196: PUSH
40197: LD_VAR 0 1
40201: ARRAY
40202: PPUSH
40203: LD_EXP 152
40207: PUSH
40208: LD_VAR 0 1
40212: ARRAY
40213: PPUSH
40214: CALL_OW 505
// if not minerMinesList [ i ] then
40218: LD_EXP 152
40222: PUSH
40223: LD_VAR 0 1
40227: ARRAY
40228: NOT
40229: IFFALSE 40233
// continue ;
40231: GO 40172
// for j := minerMinesList [ i ] downto 1 do
40233: LD_ADDR_VAR 0 2
40237: PUSH
40238: DOUBLE
40239: LD_EXP 152
40243: PUSH
40244: LD_VAR 0 1
40248: ARRAY
40249: INC
40250: ST_TO_ADDR
40251: LD_INT 1
40253: PUSH
40254: FOR_DOWNTO
40255: IFFALSE 40505
// begin side := GetSide ( minersList [ i ] ) ;
40257: LD_ADDR_VAR 0 3
40261: PUSH
40262: LD_EXP 151
40266: PUSH
40267: LD_VAR 0 1
40271: ARRAY
40272: PPUSH
40273: CALL_OW 255
40277: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
40278: LD_ADDR_VAR 0 4
40282: PUSH
40283: LD_EXP 152
40287: PUSH
40288: LD_VAR 0 1
40292: ARRAY
40293: PUSH
40294: LD_VAR 0 2
40298: ARRAY
40299: PUSH
40300: LD_INT 1
40302: ARRAY
40303: PPUSH
40304: LD_EXP 152
40308: PUSH
40309: LD_VAR 0 1
40313: ARRAY
40314: PUSH
40315: LD_VAR 0 2
40319: ARRAY
40320: PUSH
40321: LD_INT 2
40323: ARRAY
40324: PPUSH
40325: CALL_OW 428
40329: ST_TO_ADDR
// if not tmp then
40330: LD_VAR 0 4
40334: NOT
40335: IFFALSE 40339
// continue ;
40337: GO 40254
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
40339: LD_VAR 0 4
40343: PUSH
40344: LD_INT 81
40346: PUSH
40347: LD_VAR 0 3
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PPUSH
40356: CALL_OW 69
40360: IN
40361: PUSH
40362: LD_EXP 152
40366: PUSH
40367: LD_VAR 0 1
40371: ARRAY
40372: PUSH
40373: LD_VAR 0 2
40377: ARRAY
40378: PUSH
40379: LD_INT 1
40381: ARRAY
40382: PPUSH
40383: LD_EXP 152
40387: PUSH
40388: LD_VAR 0 1
40392: ARRAY
40393: PUSH
40394: LD_VAR 0 2
40398: ARRAY
40399: PUSH
40400: LD_INT 2
40402: ARRAY
40403: PPUSH
40404: CALL_OW 458
40408: AND
40409: IFFALSE 40503
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
40411: LD_EXP 152
40415: PUSH
40416: LD_VAR 0 1
40420: ARRAY
40421: PUSH
40422: LD_VAR 0 2
40426: ARRAY
40427: PUSH
40428: LD_INT 1
40430: ARRAY
40431: PPUSH
40432: LD_EXP 152
40436: PUSH
40437: LD_VAR 0 1
40441: ARRAY
40442: PUSH
40443: LD_VAR 0 2
40447: ARRAY
40448: PUSH
40449: LD_INT 2
40451: ARRAY
40452: PPUSH
40453: LD_VAR 0 3
40457: PPUSH
40458: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40462: LD_ADDR_EXP 152
40466: PUSH
40467: LD_EXP 152
40471: PPUSH
40472: LD_VAR 0 1
40476: PPUSH
40477: LD_EXP 152
40481: PUSH
40482: LD_VAR 0 1
40486: ARRAY
40487: PPUSH
40488: LD_VAR 0 2
40492: PPUSH
40493: CALL_OW 3
40497: PPUSH
40498: CALL_OW 1
40502: ST_TO_ADDR
// end ; end ;
40503: GO 40254
40505: POP
40506: POP
// end ;
40507: GO 40172
40509: POP
40510: POP
// end ;
40511: PPOPN 4
40513: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
40514: LD_INT 0
40516: PPUSH
40517: PPUSH
// result := false ;
40518: LD_ADDR_VAR 0 4
40522: PUSH
40523: LD_INT 0
40525: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
40526: LD_VAR 0 1
40530: PPUSH
40531: CALL_OW 264
40535: PUSH
40536: LD_EXP 72
40540: EQUAL
40541: NOT
40542: IFFALSE 40546
// exit ;
40544: GO 40786
// index := GetElementIndex ( minersList , unit ) ;
40546: LD_ADDR_VAR 0 5
40550: PUSH
40551: LD_EXP 151
40555: PPUSH
40556: LD_VAR 0 1
40560: PPUSH
40561: CALL 46770 0 2
40565: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
40566: LD_EXP 152
40570: PUSH
40571: LD_VAR 0 5
40575: ARRAY
40576: PUSH
40577: LD_EXP 153
40581: GREATEREQUAL
40582: IFFALSE 40586
// exit ;
40584: GO 40786
// ComMoveXY ( unit , x , y ) ;
40586: LD_VAR 0 1
40590: PPUSH
40591: LD_VAR 0 2
40595: PPUSH
40596: LD_VAR 0 3
40600: PPUSH
40601: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40605: LD_INT 35
40607: PPUSH
40608: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
40612: LD_VAR 0 1
40616: PPUSH
40617: LD_VAR 0 2
40621: PPUSH
40622: LD_VAR 0 3
40626: PPUSH
40627: CALL 77542 0 3
40631: NOT
40632: PUSH
40633: LD_VAR 0 1
40637: PPUSH
40638: CALL_OW 314
40642: AND
40643: IFFALSE 40647
// exit ;
40645: GO 40786
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40647: LD_VAR 0 2
40651: PPUSH
40652: LD_VAR 0 3
40656: PPUSH
40657: CALL_OW 428
40661: PUSH
40662: LD_VAR 0 1
40666: EQUAL
40667: PUSH
40668: LD_VAR 0 1
40672: PPUSH
40673: CALL_OW 314
40677: NOT
40678: AND
40679: IFFALSE 40605
// PlaySoundXY ( x , y , PlantMine ) ;
40681: LD_VAR 0 2
40685: PPUSH
40686: LD_VAR 0 3
40690: PPUSH
40691: LD_STRING PlantMine
40693: PPUSH
40694: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
40698: LD_VAR 0 2
40702: PPUSH
40703: LD_VAR 0 3
40707: PPUSH
40708: LD_VAR 0 1
40712: PPUSH
40713: CALL_OW 255
40717: PPUSH
40718: LD_INT 0
40720: PPUSH
40721: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40725: LD_ADDR_EXP 152
40729: PUSH
40730: LD_EXP 152
40734: PPUSH
40735: LD_VAR 0 5
40739: PUSH
40740: LD_EXP 152
40744: PUSH
40745: LD_VAR 0 5
40749: ARRAY
40750: PUSH
40751: LD_INT 1
40753: PLUS
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PPUSH
40759: LD_VAR 0 2
40763: PUSH
40764: LD_VAR 0 3
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PPUSH
40773: CALL 46985 0 3
40777: ST_TO_ADDR
// result := true ;
40778: LD_ADDR_VAR 0 4
40782: PUSH
40783: LD_INT 1
40785: ST_TO_ADDR
// end ;
40786: LD_VAR 0 4
40790: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40791: LD_INT 0
40793: PPUSH
40794: PPUSH
40795: PPUSH
// if not unit in minersList then
40796: LD_VAR 0 1
40800: PUSH
40801: LD_EXP 151
40805: IN
40806: NOT
40807: IFFALSE 40811
// exit ;
40809: GO 41203
// index := GetElementIndex ( minersList , unit ) ;
40811: LD_ADDR_VAR 0 6
40815: PUSH
40816: LD_EXP 151
40820: PPUSH
40821: LD_VAR 0 1
40825: PPUSH
40826: CALL 46770 0 2
40830: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40831: LD_ADDR_VAR 0 5
40835: PUSH
40836: DOUBLE
40837: LD_EXP 152
40841: PUSH
40842: LD_VAR 0 6
40846: ARRAY
40847: INC
40848: ST_TO_ADDR
40849: LD_INT 1
40851: PUSH
40852: FOR_DOWNTO
40853: IFFALSE 41014
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40855: LD_EXP 152
40859: PUSH
40860: LD_VAR 0 6
40864: ARRAY
40865: PUSH
40866: LD_VAR 0 5
40870: ARRAY
40871: PUSH
40872: LD_INT 1
40874: ARRAY
40875: PUSH
40876: LD_VAR 0 2
40880: EQUAL
40881: PUSH
40882: LD_EXP 152
40886: PUSH
40887: LD_VAR 0 6
40891: ARRAY
40892: PUSH
40893: LD_VAR 0 5
40897: ARRAY
40898: PUSH
40899: LD_INT 2
40901: ARRAY
40902: PUSH
40903: LD_VAR 0 3
40907: EQUAL
40908: AND
40909: IFFALSE 41012
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40911: LD_EXP 152
40915: PUSH
40916: LD_VAR 0 6
40920: ARRAY
40921: PUSH
40922: LD_VAR 0 5
40926: ARRAY
40927: PUSH
40928: LD_INT 1
40930: ARRAY
40931: PPUSH
40932: LD_EXP 152
40936: PUSH
40937: LD_VAR 0 6
40941: ARRAY
40942: PUSH
40943: LD_VAR 0 5
40947: ARRAY
40948: PUSH
40949: LD_INT 2
40951: ARRAY
40952: PPUSH
40953: LD_VAR 0 1
40957: PPUSH
40958: CALL_OW 255
40962: PPUSH
40963: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40967: LD_ADDR_EXP 152
40971: PUSH
40972: LD_EXP 152
40976: PPUSH
40977: LD_VAR 0 6
40981: PPUSH
40982: LD_EXP 152
40986: PUSH
40987: LD_VAR 0 6
40991: ARRAY
40992: PPUSH
40993: LD_VAR 0 5
40997: PPUSH
40998: CALL_OW 3
41002: PPUSH
41003: CALL_OW 1
41007: ST_TO_ADDR
// exit ;
41008: POP
41009: POP
41010: GO 41203
// end ; end ;
41012: GO 40852
41014: POP
41015: POP
// for i := minerMinesList [ index ] downto 1 do
41016: LD_ADDR_VAR 0 5
41020: PUSH
41021: DOUBLE
41022: LD_EXP 152
41026: PUSH
41027: LD_VAR 0 6
41031: ARRAY
41032: INC
41033: ST_TO_ADDR
41034: LD_INT 1
41036: PUSH
41037: FOR_DOWNTO
41038: IFFALSE 41201
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
41040: LD_EXP 152
41044: PUSH
41045: LD_VAR 0 6
41049: ARRAY
41050: PUSH
41051: LD_VAR 0 5
41055: ARRAY
41056: PUSH
41057: LD_INT 1
41059: ARRAY
41060: PPUSH
41061: LD_EXP 152
41065: PUSH
41066: LD_VAR 0 6
41070: ARRAY
41071: PUSH
41072: LD_VAR 0 5
41076: ARRAY
41077: PUSH
41078: LD_INT 2
41080: ARRAY
41081: PPUSH
41082: LD_VAR 0 2
41086: PPUSH
41087: LD_VAR 0 3
41091: PPUSH
41092: CALL_OW 298
41096: PUSH
41097: LD_INT 6
41099: LESS
41100: IFFALSE 41199
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
41102: LD_EXP 152
41106: PUSH
41107: LD_VAR 0 6
41111: ARRAY
41112: PUSH
41113: LD_VAR 0 5
41117: ARRAY
41118: PUSH
41119: LD_INT 1
41121: ARRAY
41122: PPUSH
41123: LD_EXP 152
41127: PUSH
41128: LD_VAR 0 6
41132: ARRAY
41133: PUSH
41134: LD_VAR 0 5
41138: ARRAY
41139: PUSH
41140: LD_INT 2
41142: ARRAY
41143: PPUSH
41144: LD_VAR 0 1
41148: PPUSH
41149: CALL_OW 255
41153: PPUSH
41154: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
41158: LD_ADDR_EXP 152
41162: PUSH
41163: LD_EXP 152
41167: PPUSH
41168: LD_VAR 0 6
41172: PPUSH
41173: LD_EXP 152
41177: PUSH
41178: LD_VAR 0 6
41182: ARRAY
41183: PPUSH
41184: LD_VAR 0 5
41188: PPUSH
41189: CALL_OW 3
41193: PPUSH
41194: CALL_OW 1
41198: ST_TO_ADDR
// end ; end ;
41199: GO 41037
41201: POP
41202: POP
// end ;
41203: LD_VAR 0 4
41207: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
41208: LD_INT 0
41210: PPUSH
41211: PPUSH
41212: PPUSH
41213: PPUSH
41214: PPUSH
41215: PPUSH
41216: PPUSH
41217: PPUSH
41218: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
41219: LD_VAR 0 1
41223: PPUSH
41224: CALL_OW 264
41228: PUSH
41229: LD_EXP 72
41233: EQUAL
41234: NOT
41235: PUSH
41236: LD_VAR 0 1
41240: PUSH
41241: LD_EXP 151
41245: IN
41246: NOT
41247: OR
41248: IFFALSE 41252
// exit ;
41250: GO 41574
// index := GetElementIndex ( minersList , unit ) ;
41252: LD_ADDR_VAR 0 6
41256: PUSH
41257: LD_EXP 151
41261: PPUSH
41262: LD_VAR 0 1
41266: PPUSH
41267: CALL 46770 0 2
41271: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
41272: LD_ADDR_VAR 0 8
41276: PUSH
41277: LD_EXP 153
41281: PUSH
41282: LD_EXP 152
41286: PUSH
41287: LD_VAR 0 6
41291: ARRAY
41292: MINUS
41293: ST_TO_ADDR
// if not minesFreeAmount then
41294: LD_VAR 0 8
41298: NOT
41299: IFFALSE 41303
// exit ;
41301: GO 41574
// tmp := [ ] ;
41303: LD_ADDR_VAR 0 7
41307: PUSH
41308: EMPTY
41309: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
41310: LD_ADDR_VAR 0 5
41314: PUSH
41315: DOUBLE
41316: LD_INT 1
41318: DEC
41319: ST_TO_ADDR
41320: LD_VAR 0 8
41324: PUSH
41325: FOR_TO
41326: IFFALSE 41521
// begin _d := rand ( 0 , 5 ) ;
41328: LD_ADDR_VAR 0 11
41332: PUSH
41333: LD_INT 0
41335: PPUSH
41336: LD_INT 5
41338: PPUSH
41339: CALL_OW 12
41343: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
41344: LD_ADDR_VAR 0 12
41348: PUSH
41349: LD_INT 2
41351: PPUSH
41352: LD_INT 6
41354: PPUSH
41355: CALL_OW 12
41359: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
41360: LD_ADDR_VAR 0 9
41364: PUSH
41365: LD_VAR 0 2
41369: PPUSH
41370: LD_VAR 0 11
41374: PPUSH
41375: LD_VAR 0 12
41379: PPUSH
41380: CALL_OW 272
41384: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
41385: LD_ADDR_VAR 0 10
41389: PUSH
41390: LD_VAR 0 3
41394: PPUSH
41395: LD_VAR 0 11
41399: PPUSH
41400: LD_VAR 0 12
41404: PPUSH
41405: CALL_OW 273
41409: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
41410: LD_VAR 0 9
41414: PPUSH
41415: LD_VAR 0 10
41419: PPUSH
41420: CALL_OW 488
41424: PUSH
41425: LD_VAR 0 9
41429: PUSH
41430: LD_VAR 0 10
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_VAR 0 7
41443: IN
41444: NOT
41445: AND
41446: PUSH
41447: LD_VAR 0 9
41451: PPUSH
41452: LD_VAR 0 10
41456: PPUSH
41457: CALL_OW 458
41461: NOT
41462: AND
41463: IFFALSE 41505
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
41465: LD_ADDR_VAR 0 7
41469: PUSH
41470: LD_VAR 0 7
41474: PPUSH
41475: LD_VAR 0 7
41479: PUSH
41480: LD_INT 1
41482: PLUS
41483: PPUSH
41484: LD_VAR 0 9
41488: PUSH
41489: LD_VAR 0 10
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PPUSH
41498: CALL_OW 1
41502: ST_TO_ADDR
41503: GO 41519
// i := i - 1 ;
41505: LD_ADDR_VAR 0 5
41509: PUSH
41510: LD_VAR 0 5
41514: PUSH
41515: LD_INT 1
41517: MINUS
41518: ST_TO_ADDR
// end ;
41519: GO 41325
41521: POP
41522: POP
// for i in tmp do
41523: LD_ADDR_VAR 0 5
41527: PUSH
41528: LD_VAR 0 7
41532: PUSH
41533: FOR_IN
41534: IFFALSE 41572
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
41536: LD_VAR 0 1
41540: PPUSH
41541: LD_VAR 0 5
41545: PUSH
41546: LD_INT 1
41548: ARRAY
41549: PPUSH
41550: LD_VAR 0 5
41554: PUSH
41555: LD_INT 2
41557: ARRAY
41558: PPUSH
41559: CALL 40514 0 3
41563: NOT
41564: IFFALSE 41570
// exit ;
41566: POP
41567: POP
41568: GO 41574
41570: GO 41533
41572: POP
41573: POP
// end ;
41574: LD_VAR 0 4
41578: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
41579: LD_INT 0
41581: PPUSH
41582: PPUSH
41583: PPUSH
41584: PPUSH
41585: PPUSH
41586: PPUSH
41587: PPUSH
// if not GetClass ( unit ) = class_sniper then
41588: LD_VAR 0 1
41592: PPUSH
41593: CALL_OW 257
41597: PUSH
41598: LD_INT 5
41600: EQUAL
41601: NOT
41602: IFFALSE 41606
// exit ;
41604: GO 41994
// dist := 8 ;
41606: LD_ADDR_VAR 0 5
41610: PUSH
41611: LD_INT 8
41613: ST_TO_ADDR
// viewRange := 12 ;
41614: LD_ADDR_VAR 0 7
41618: PUSH
41619: LD_INT 12
41621: ST_TO_ADDR
// side := GetSide ( unit ) ;
41622: LD_ADDR_VAR 0 6
41626: PUSH
41627: LD_VAR 0 1
41631: PPUSH
41632: CALL_OW 255
41636: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41637: LD_INT 61
41639: PPUSH
41640: LD_VAR 0 6
41644: PPUSH
41645: CALL_OW 321
41649: PUSH
41650: LD_INT 2
41652: EQUAL
41653: IFFALSE 41663
// viewRange := 16 ;
41655: LD_ADDR_VAR 0 7
41659: PUSH
41660: LD_INT 16
41662: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41663: LD_VAR 0 1
41667: PPUSH
41668: LD_VAR 0 2
41672: PPUSH
41673: LD_VAR 0 3
41677: PPUSH
41678: CALL_OW 297
41682: PUSH
41683: LD_VAR 0 5
41687: GREATER
41688: IFFALSE 41767
// begin ComMoveXY ( unit , x , y ) ;
41690: LD_VAR 0 1
41694: PPUSH
41695: LD_VAR 0 2
41699: PPUSH
41700: LD_VAR 0 3
41704: PPUSH
41705: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41709: LD_INT 35
41711: PPUSH
41712: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41716: LD_VAR 0 1
41720: PPUSH
41721: LD_VAR 0 2
41725: PPUSH
41726: LD_VAR 0 3
41730: PPUSH
41731: CALL 77542 0 3
41735: NOT
41736: IFFALSE 41740
// exit ;
41738: GO 41994
// until GetDistUnitXY ( unit , x , y ) < dist ;
41740: LD_VAR 0 1
41744: PPUSH
41745: LD_VAR 0 2
41749: PPUSH
41750: LD_VAR 0 3
41754: PPUSH
41755: CALL_OW 297
41759: PUSH
41760: LD_VAR 0 5
41764: LESS
41765: IFFALSE 41709
// end ; ComTurnXY ( unit , x , y ) ;
41767: LD_VAR 0 1
41771: PPUSH
41772: LD_VAR 0 2
41776: PPUSH
41777: LD_VAR 0 3
41781: PPUSH
41782: CALL_OW 118
// wait ( 5 ) ;
41786: LD_INT 5
41788: PPUSH
41789: CALL_OW 67
// _d := GetDir ( unit ) ;
41793: LD_ADDR_VAR 0 10
41797: PUSH
41798: LD_VAR 0 1
41802: PPUSH
41803: CALL_OW 254
41807: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
41808: LD_ADDR_VAR 0 8
41812: PUSH
41813: LD_VAR 0 1
41817: PPUSH
41818: CALL_OW 250
41822: PPUSH
41823: LD_VAR 0 10
41827: PPUSH
41828: LD_VAR 0 5
41832: PPUSH
41833: CALL_OW 272
41837: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
41838: LD_ADDR_VAR 0 9
41842: PUSH
41843: LD_VAR 0 1
41847: PPUSH
41848: CALL_OW 251
41852: PPUSH
41853: LD_VAR 0 10
41857: PPUSH
41858: LD_VAR 0 5
41862: PPUSH
41863: CALL_OW 273
41867: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41868: LD_VAR 0 8
41872: PPUSH
41873: LD_VAR 0 9
41877: PPUSH
41878: CALL_OW 488
41882: NOT
41883: IFFALSE 41887
// exit ;
41885: GO 41994
// ComAnimCustom ( unit , 1 ) ;
41887: LD_VAR 0 1
41891: PPUSH
41892: LD_INT 1
41894: PPUSH
41895: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41899: LD_VAR 0 8
41903: PPUSH
41904: LD_VAR 0 9
41908: PPUSH
41909: LD_VAR 0 6
41913: PPUSH
41914: LD_VAR 0 7
41918: PPUSH
41919: CALL_OW 330
// repeat wait ( 1 ) ;
41923: LD_INT 1
41925: PPUSH
41926: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
41930: LD_VAR 0 1
41934: PPUSH
41935: CALL_OW 316
41939: PUSH
41940: LD_VAR 0 1
41944: PPUSH
41945: CALL_OW 314
41949: OR
41950: PUSH
41951: LD_VAR 0 1
41955: PPUSH
41956: CALL_OW 302
41960: NOT
41961: OR
41962: PUSH
41963: LD_VAR 0 1
41967: PPUSH
41968: CALL_OW 301
41972: OR
41973: IFFALSE 41923
// RemoveSeeing ( _x , _y , side ) ;
41975: LD_VAR 0 8
41979: PPUSH
41980: LD_VAR 0 9
41984: PPUSH
41985: LD_VAR 0 6
41989: PPUSH
41990: CALL_OW 331
// end ; end_of_file
41994: LD_VAR 0 4
41998: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41999: LD_INT 0
42001: PPUSH
42002: PPUSH
// if exist_mode then
42003: LD_VAR 0 2
42007: IFFALSE 42032
// unit := CreateCharacter ( prefix & ident ) else
42009: LD_ADDR_VAR 0 5
42013: PUSH
42014: LD_VAR 0 3
42018: PUSH
42019: LD_VAR 0 1
42023: STR
42024: PPUSH
42025: CALL_OW 34
42029: ST_TO_ADDR
42030: GO 42047
// unit := NewCharacter ( ident ) ;
42032: LD_ADDR_VAR 0 5
42036: PUSH
42037: LD_VAR 0 1
42041: PPUSH
42042: CALL_OW 25
42046: ST_TO_ADDR
// result := unit ;
42047: LD_ADDR_VAR 0 4
42051: PUSH
42052: LD_VAR 0 5
42056: ST_TO_ADDR
// end ;
42057: LD_VAR 0 4
42061: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
42062: LD_INT 0
42064: PPUSH
42065: PPUSH
// if not side or not nation then
42066: LD_VAR 0 1
42070: NOT
42071: PUSH
42072: LD_VAR 0 2
42076: NOT
42077: OR
42078: IFFALSE 42082
// exit ;
42080: GO 42850
// case nation of nation_american :
42082: LD_VAR 0 2
42086: PUSH
42087: LD_INT 1
42089: DOUBLE
42090: EQUAL
42091: IFTRUE 42095
42093: GO 42309
42095: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
42096: LD_ADDR_VAR 0 4
42100: PUSH
42101: LD_INT 35
42103: PUSH
42104: LD_INT 45
42106: PUSH
42107: LD_INT 46
42109: PUSH
42110: LD_INT 47
42112: PUSH
42113: LD_INT 82
42115: PUSH
42116: LD_INT 83
42118: PUSH
42119: LD_INT 84
42121: PUSH
42122: LD_INT 85
42124: PUSH
42125: LD_INT 86
42127: PUSH
42128: LD_INT 1
42130: PUSH
42131: LD_INT 2
42133: PUSH
42134: LD_INT 6
42136: PUSH
42137: LD_INT 15
42139: PUSH
42140: LD_INT 16
42142: PUSH
42143: LD_INT 7
42145: PUSH
42146: LD_INT 12
42148: PUSH
42149: LD_INT 13
42151: PUSH
42152: LD_INT 10
42154: PUSH
42155: LD_INT 14
42157: PUSH
42158: LD_INT 20
42160: PUSH
42161: LD_INT 21
42163: PUSH
42164: LD_INT 22
42166: PUSH
42167: LD_INT 25
42169: PUSH
42170: LD_INT 32
42172: PUSH
42173: LD_INT 27
42175: PUSH
42176: LD_INT 36
42178: PUSH
42179: LD_INT 69
42181: PUSH
42182: LD_INT 39
42184: PUSH
42185: LD_INT 34
42187: PUSH
42188: LD_INT 40
42190: PUSH
42191: LD_INT 48
42193: PUSH
42194: LD_INT 49
42196: PUSH
42197: LD_INT 50
42199: PUSH
42200: LD_INT 51
42202: PUSH
42203: LD_INT 52
42205: PUSH
42206: LD_INT 53
42208: PUSH
42209: LD_INT 54
42211: PUSH
42212: LD_INT 55
42214: PUSH
42215: LD_INT 56
42217: PUSH
42218: LD_INT 57
42220: PUSH
42221: LD_INT 58
42223: PUSH
42224: LD_INT 59
42226: PUSH
42227: LD_INT 60
42229: PUSH
42230: LD_INT 61
42232: PUSH
42233: LD_INT 62
42235: PUSH
42236: LD_INT 80
42238: PUSH
42239: LD_INT 82
42241: PUSH
42242: LD_INT 83
42244: PUSH
42245: LD_INT 84
42247: PUSH
42248: LD_INT 85
42250: PUSH
42251: LD_INT 86
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: ST_TO_ADDR
42307: GO 42774
42309: LD_INT 2
42311: DOUBLE
42312: EQUAL
42313: IFTRUE 42317
42315: GO 42543
42317: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
42318: LD_ADDR_VAR 0 4
42322: PUSH
42323: LD_INT 35
42325: PUSH
42326: LD_INT 45
42328: PUSH
42329: LD_INT 46
42331: PUSH
42332: LD_INT 47
42334: PUSH
42335: LD_INT 82
42337: PUSH
42338: LD_INT 83
42340: PUSH
42341: LD_INT 84
42343: PUSH
42344: LD_INT 85
42346: PUSH
42347: LD_INT 87
42349: PUSH
42350: LD_INT 70
42352: PUSH
42353: LD_INT 1
42355: PUSH
42356: LD_INT 11
42358: PUSH
42359: LD_INT 3
42361: PUSH
42362: LD_INT 4
42364: PUSH
42365: LD_INT 5
42367: PUSH
42368: LD_INT 6
42370: PUSH
42371: LD_INT 15
42373: PUSH
42374: LD_INT 18
42376: PUSH
42377: LD_INT 7
42379: PUSH
42380: LD_INT 17
42382: PUSH
42383: LD_INT 8
42385: PUSH
42386: LD_INT 20
42388: PUSH
42389: LD_INT 21
42391: PUSH
42392: LD_INT 22
42394: PUSH
42395: LD_INT 72
42397: PUSH
42398: LD_INT 26
42400: PUSH
42401: LD_INT 69
42403: PUSH
42404: LD_INT 39
42406: PUSH
42407: LD_INT 40
42409: PUSH
42410: LD_INT 41
42412: PUSH
42413: LD_INT 42
42415: PUSH
42416: LD_INT 43
42418: PUSH
42419: LD_INT 48
42421: PUSH
42422: LD_INT 49
42424: PUSH
42425: LD_INT 50
42427: PUSH
42428: LD_INT 51
42430: PUSH
42431: LD_INT 52
42433: PUSH
42434: LD_INT 53
42436: PUSH
42437: LD_INT 54
42439: PUSH
42440: LD_INT 55
42442: PUSH
42443: LD_INT 56
42445: PUSH
42446: LD_INT 60
42448: PUSH
42449: LD_INT 61
42451: PUSH
42452: LD_INT 62
42454: PUSH
42455: LD_INT 66
42457: PUSH
42458: LD_INT 67
42460: PUSH
42461: LD_INT 68
42463: PUSH
42464: LD_INT 81
42466: PUSH
42467: LD_INT 82
42469: PUSH
42470: LD_INT 83
42472: PUSH
42473: LD_INT 84
42475: PUSH
42476: LD_INT 85
42478: PUSH
42479: LD_INT 87
42481: PUSH
42482: LD_INT 88
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: ST_TO_ADDR
42541: GO 42774
42543: LD_INT 3
42545: DOUBLE
42546: EQUAL
42547: IFTRUE 42551
42549: GO 42773
42551: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
42552: LD_ADDR_VAR 0 4
42556: PUSH
42557: LD_INT 46
42559: PUSH
42560: LD_INT 47
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: LD_INT 2
42568: PUSH
42569: LD_INT 82
42571: PUSH
42572: LD_INT 83
42574: PUSH
42575: LD_INT 84
42577: PUSH
42578: LD_INT 85
42580: PUSH
42581: LD_INT 86
42583: PUSH
42584: LD_INT 11
42586: PUSH
42587: LD_INT 9
42589: PUSH
42590: LD_INT 20
42592: PUSH
42593: LD_INT 19
42595: PUSH
42596: LD_INT 21
42598: PUSH
42599: LD_INT 24
42601: PUSH
42602: LD_INT 22
42604: PUSH
42605: LD_INT 25
42607: PUSH
42608: LD_INT 28
42610: PUSH
42611: LD_INT 29
42613: PUSH
42614: LD_INT 30
42616: PUSH
42617: LD_INT 31
42619: PUSH
42620: LD_INT 37
42622: PUSH
42623: LD_INT 38
42625: PUSH
42626: LD_INT 32
42628: PUSH
42629: LD_INT 27
42631: PUSH
42632: LD_INT 33
42634: PUSH
42635: LD_INT 69
42637: PUSH
42638: LD_INT 39
42640: PUSH
42641: LD_INT 34
42643: PUSH
42644: LD_INT 40
42646: PUSH
42647: LD_INT 71
42649: PUSH
42650: LD_INT 23
42652: PUSH
42653: LD_INT 44
42655: PUSH
42656: LD_INT 48
42658: PUSH
42659: LD_INT 49
42661: PUSH
42662: LD_INT 50
42664: PUSH
42665: LD_INT 51
42667: PUSH
42668: LD_INT 52
42670: PUSH
42671: LD_INT 53
42673: PUSH
42674: LD_INT 54
42676: PUSH
42677: LD_INT 55
42679: PUSH
42680: LD_INT 56
42682: PUSH
42683: LD_INT 57
42685: PUSH
42686: LD_INT 58
42688: PUSH
42689: LD_INT 59
42691: PUSH
42692: LD_INT 63
42694: PUSH
42695: LD_INT 64
42697: PUSH
42698: LD_INT 65
42700: PUSH
42701: LD_INT 82
42703: PUSH
42704: LD_INT 83
42706: PUSH
42707: LD_INT 84
42709: PUSH
42710: LD_INT 85
42712: PUSH
42713: LD_INT 86
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: ST_TO_ADDR
42771: GO 42774
42773: POP
// if state > - 1 and state < 3 then
42774: LD_VAR 0 3
42778: PUSH
42779: LD_INT 1
42781: NEG
42782: GREATER
42783: PUSH
42784: LD_VAR 0 3
42788: PUSH
42789: LD_INT 3
42791: LESS
42792: AND
42793: IFFALSE 42850
// for i in result do
42795: LD_ADDR_VAR 0 5
42799: PUSH
42800: LD_VAR 0 4
42804: PUSH
42805: FOR_IN
42806: IFFALSE 42848
// if GetTech ( i , side ) <> state then
42808: LD_VAR 0 5
42812: PPUSH
42813: LD_VAR 0 1
42817: PPUSH
42818: CALL_OW 321
42822: PUSH
42823: LD_VAR 0 3
42827: NONEQUAL
42828: IFFALSE 42846
// result := result diff i ;
42830: LD_ADDR_VAR 0 4
42834: PUSH
42835: LD_VAR 0 4
42839: PUSH
42840: LD_VAR 0 5
42844: DIFF
42845: ST_TO_ADDR
42846: GO 42805
42848: POP
42849: POP
// end ;
42850: LD_VAR 0 4
42854: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42855: LD_INT 0
42857: PPUSH
42858: PPUSH
42859: PPUSH
// result := true ;
42860: LD_ADDR_VAR 0 3
42864: PUSH
42865: LD_INT 1
42867: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42868: LD_ADDR_VAR 0 5
42872: PUSH
42873: LD_VAR 0 2
42877: PPUSH
42878: CALL_OW 480
42882: ST_TO_ADDR
// if not tmp then
42883: LD_VAR 0 5
42887: NOT
42888: IFFALSE 42892
// exit ;
42890: GO 42941
// for i in tmp do
42892: LD_ADDR_VAR 0 4
42896: PUSH
42897: LD_VAR 0 5
42901: PUSH
42902: FOR_IN
42903: IFFALSE 42939
// if GetTech ( i , side ) <> state_researched then
42905: LD_VAR 0 4
42909: PPUSH
42910: LD_VAR 0 1
42914: PPUSH
42915: CALL_OW 321
42919: PUSH
42920: LD_INT 2
42922: NONEQUAL
42923: IFFALSE 42937
// begin result := false ;
42925: LD_ADDR_VAR 0 3
42929: PUSH
42930: LD_INT 0
42932: ST_TO_ADDR
// exit ;
42933: POP
42934: POP
42935: GO 42941
// end ;
42937: GO 42902
42939: POP
42940: POP
// end ;
42941: LD_VAR 0 3
42945: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42946: LD_INT 0
42948: PPUSH
42949: PPUSH
42950: PPUSH
42951: PPUSH
42952: PPUSH
42953: PPUSH
42954: PPUSH
42955: PPUSH
42956: PPUSH
42957: PPUSH
42958: PPUSH
42959: PPUSH
42960: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42961: LD_VAR 0 1
42965: NOT
42966: PUSH
42967: LD_VAR 0 1
42971: PPUSH
42972: CALL_OW 257
42976: PUSH
42977: LD_INT 9
42979: NONEQUAL
42980: OR
42981: IFFALSE 42985
// exit ;
42983: GO 43558
// side := GetSide ( unit ) ;
42985: LD_ADDR_VAR 0 9
42989: PUSH
42990: LD_VAR 0 1
42994: PPUSH
42995: CALL_OW 255
42999: ST_TO_ADDR
// tech_space := tech_spacanom ;
43000: LD_ADDR_VAR 0 12
43004: PUSH
43005: LD_INT 29
43007: ST_TO_ADDR
// tech_time := tech_taurad ;
43008: LD_ADDR_VAR 0 13
43012: PUSH
43013: LD_INT 28
43015: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
43016: LD_ADDR_VAR 0 11
43020: PUSH
43021: LD_VAR 0 1
43025: PPUSH
43026: CALL_OW 310
43030: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
43031: LD_VAR 0 11
43035: PPUSH
43036: CALL_OW 247
43040: PUSH
43041: LD_INT 2
43043: EQUAL
43044: IFFALSE 43048
// exit ;
43046: GO 43558
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43048: LD_ADDR_VAR 0 8
43052: PUSH
43053: LD_INT 81
43055: PUSH
43056: LD_VAR 0 9
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 3
43067: PUSH
43068: LD_INT 21
43070: PUSH
43071: LD_INT 3
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PPUSH
43086: CALL_OW 69
43090: ST_TO_ADDR
// if not tmp then
43091: LD_VAR 0 8
43095: NOT
43096: IFFALSE 43100
// exit ;
43098: GO 43558
// if in_unit then
43100: LD_VAR 0 11
43104: IFFALSE 43128
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
43106: LD_ADDR_VAR 0 10
43110: PUSH
43111: LD_VAR 0 8
43115: PPUSH
43116: LD_VAR 0 11
43120: PPUSH
43121: CALL_OW 74
43125: ST_TO_ADDR
43126: GO 43148
// enemy := NearestUnitToUnit ( tmp , unit ) ;
43128: LD_ADDR_VAR 0 10
43132: PUSH
43133: LD_VAR 0 8
43137: PPUSH
43138: LD_VAR 0 1
43142: PPUSH
43143: CALL_OW 74
43147: ST_TO_ADDR
// if not enemy then
43148: LD_VAR 0 10
43152: NOT
43153: IFFALSE 43157
// exit ;
43155: GO 43558
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
43157: LD_VAR 0 11
43161: PUSH
43162: LD_VAR 0 11
43166: PPUSH
43167: LD_VAR 0 10
43171: PPUSH
43172: CALL_OW 296
43176: PUSH
43177: LD_INT 13
43179: GREATER
43180: AND
43181: PUSH
43182: LD_VAR 0 1
43186: PPUSH
43187: LD_VAR 0 10
43191: PPUSH
43192: CALL_OW 296
43196: PUSH
43197: LD_INT 12
43199: GREATER
43200: OR
43201: IFFALSE 43205
// exit ;
43203: GO 43558
// missile := [ 1 ] ;
43205: LD_ADDR_VAR 0 14
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: EMPTY
43214: LIST
43215: ST_TO_ADDR
// if Researched ( side , tech_space ) then
43216: LD_VAR 0 9
43220: PPUSH
43221: LD_VAR 0 12
43225: PPUSH
43226: CALL_OW 325
43230: IFFALSE 43259
// missile := Insert ( missile , missile + 1 , 2 ) ;
43232: LD_ADDR_VAR 0 14
43236: PUSH
43237: LD_VAR 0 14
43241: PPUSH
43242: LD_VAR 0 14
43246: PUSH
43247: LD_INT 1
43249: PLUS
43250: PPUSH
43251: LD_INT 2
43253: PPUSH
43254: CALL_OW 2
43258: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
43259: LD_VAR 0 9
43263: PPUSH
43264: LD_VAR 0 13
43268: PPUSH
43269: CALL_OW 325
43273: PUSH
43274: LD_VAR 0 10
43278: PPUSH
43279: CALL_OW 255
43283: PPUSH
43284: LD_VAR 0 13
43288: PPUSH
43289: CALL_OW 325
43293: NOT
43294: AND
43295: IFFALSE 43324
// missile := Insert ( missile , missile + 1 , 3 ) ;
43297: LD_ADDR_VAR 0 14
43301: PUSH
43302: LD_VAR 0 14
43306: PPUSH
43307: LD_VAR 0 14
43311: PUSH
43312: LD_INT 1
43314: PLUS
43315: PPUSH
43316: LD_INT 3
43318: PPUSH
43319: CALL_OW 2
43323: ST_TO_ADDR
// if missile < 2 then
43324: LD_VAR 0 14
43328: PUSH
43329: LD_INT 2
43331: LESS
43332: IFFALSE 43336
// exit ;
43334: GO 43558
// x := GetX ( enemy ) ;
43336: LD_ADDR_VAR 0 4
43340: PUSH
43341: LD_VAR 0 10
43345: PPUSH
43346: CALL_OW 250
43350: ST_TO_ADDR
// y := GetY ( enemy ) ;
43351: LD_ADDR_VAR 0 5
43355: PUSH
43356: LD_VAR 0 10
43360: PPUSH
43361: CALL_OW 251
43365: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
43366: LD_ADDR_VAR 0 6
43370: PUSH
43371: LD_VAR 0 4
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PPUSH
43380: LD_INT 1
43382: PPUSH
43383: CALL_OW 12
43387: PLUS
43388: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43389: LD_ADDR_VAR 0 7
43393: PUSH
43394: LD_VAR 0 5
43398: PUSH
43399: LD_INT 1
43401: NEG
43402: PPUSH
43403: LD_INT 1
43405: PPUSH
43406: CALL_OW 12
43410: PLUS
43411: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43412: LD_VAR 0 6
43416: PPUSH
43417: LD_VAR 0 7
43421: PPUSH
43422: CALL_OW 488
43426: NOT
43427: IFFALSE 43449
// begin _x := x ;
43429: LD_ADDR_VAR 0 6
43433: PUSH
43434: LD_VAR 0 4
43438: ST_TO_ADDR
// _y := y ;
43439: LD_ADDR_VAR 0 7
43443: PUSH
43444: LD_VAR 0 5
43448: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43449: LD_ADDR_VAR 0 3
43453: PUSH
43454: LD_INT 1
43456: PPUSH
43457: LD_VAR 0 14
43461: PPUSH
43462: CALL_OW 12
43466: ST_TO_ADDR
// case i of 1 :
43467: LD_VAR 0 3
43471: PUSH
43472: LD_INT 1
43474: DOUBLE
43475: EQUAL
43476: IFTRUE 43480
43478: GO 43497
43480: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43481: LD_VAR 0 1
43485: PPUSH
43486: LD_VAR 0 10
43490: PPUSH
43491: CALL_OW 115
43495: GO 43558
43497: LD_INT 2
43499: DOUBLE
43500: EQUAL
43501: IFTRUE 43505
43503: GO 43527
43505: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43506: LD_VAR 0 1
43510: PPUSH
43511: LD_VAR 0 6
43515: PPUSH
43516: LD_VAR 0 7
43520: PPUSH
43521: CALL_OW 153
43525: GO 43558
43527: LD_INT 3
43529: DOUBLE
43530: EQUAL
43531: IFTRUE 43535
43533: GO 43557
43535: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43536: LD_VAR 0 1
43540: PPUSH
43541: LD_VAR 0 6
43545: PPUSH
43546: LD_VAR 0 7
43550: PPUSH
43551: CALL_OW 154
43555: GO 43558
43557: POP
// end ;
43558: LD_VAR 0 2
43562: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43563: LD_INT 0
43565: PPUSH
43566: PPUSH
43567: PPUSH
43568: PPUSH
43569: PPUSH
43570: PPUSH
// if not unit or not building then
43571: LD_VAR 0 1
43575: NOT
43576: PUSH
43577: LD_VAR 0 2
43581: NOT
43582: OR
43583: IFFALSE 43587
// exit ;
43585: GO 43745
// x := GetX ( building ) ;
43587: LD_ADDR_VAR 0 5
43591: PUSH
43592: LD_VAR 0 2
43596: PPUSH
43597: CALL_OW 250
43601: ST_TO_ADDR
// y := GetY ( building ) ;
43602: LD_ADDR_VAR 0 6
43606: PUSH
43607: LD_VAR 0 2
43611: PPUSH
43612: CALL_OW 251
43616: ST_TO_ADDR
// for i = 0 to 5 do
43617: LD_ADDR_VAR 0 4
43621: PUSH
43622: DOUBLE
43623: LD_INT 0
43625: DEC
43626: ST_TO_ADDR
43627: LD_INT 5
43629: PUSH
43630: FOR_TO
43631: IFFALSE 43743
// begin _x := ShiftX ( x , i , 3 ) ;
43633: LD_ADDR_VAR 0 7
43637: PUSH
43638: LD_VAR 0 5
43642: PPUSH
43643: LD_VAR 0 4
43647: PPUSH
43648: LD_INT 3
43650: PPUSH
43651: CALL_OW 272
43655: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43656: LD_ADDR_VAR 0 8
43660: PUSH
43661: LD_VAR 0 6
43665: PPUSH
43666: LD_VAR 0 4
43670: PPUSH
43671: LD_INT 3
43673: PPUSH
43674: CALL_OW 273
43678: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43679: LD_VAR 0 7
43683: PPUSH
43684: LD_VAR 0 8
43688: PPUSH
43689: CALL_OW 488
43693: NOT
43694: IFFALSE 43698
// continue ;
43696: GO 43630
// if HexInfo ( _x , _y ) = 0 then
43698: LD_VAR 0 7
43702: PPUSH
43703: LD_VAR 0 8
43707: PPUSH
43708: CALL_OW 428
43712: PUSH
43713: LD_INT 0
43715: EQUAL
43716: IFFALSE 43741
// begin ComMoveXY ( unit , _x , _y ) ;
43718: LD_VAR 0 1
43722: PPUSH
43723: LD_VAR 0 7
43727: PPUSH
43728: LD_VAR 0 8
43732: PPUSH
43733: CALL_OW 111
// exit ;
43737: POP
43738: POP
43739: GO 43745
// end ; end ;
43741: GO 43630
43743: POP
43744: POP
// end ;
43745: LD_VAR 0 3
43749: RET
// export function ScanBase ( side , base_area ) ; begin
43750: LD_INT 0
43752: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43753: LD_ADDR_VAR 0 3
43757: PUSH
43758: LD_VAR 0 2
43762: PPUSH
43763: LD_INT 81
43765: PUSH
43766: LD_VAR 0 1
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PPUSH
43775: CALL_OW 70
43779: ST_TO_ADDR
// end ;
43780: LD_VAR 0 3
43784: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43785: LD_INT 0
43787: PPUSH
43788: PPUSH
43789: PPUSH
43790: PPUSH
// result := false ;
43791: LD_ADDR_VAR 0 2
43795: PUSH
43796: LD_INT 0
43798: ST_TO_ADDR
// side := GetSide ( unit ) ;
43799: LD_ADDR_VAR 0 3
43803: PUSH
43804: LD_VAR 0 1
43808: PPUSH
43809: CALL_OW 255
43813: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43814: LD_ADDR_VAR 0 4
43818: PUSH
43819: LD_VAR 0 1
43823: PPUSH
43824: CALL_OW 248
43828: ST_TO_ADDR
// case nat of 1 :
43829: LD_VAR 0 4
43833: PUSH
43834: LD_INT 1
43836: DOUBLE
43837: EQUAL
43838: IFTRUE 43842
43840: GO 43853
43842: POP
// tech := tech_lassight ; 2 :
43843: LD_ADDR_VAR 0 5
43847: PUSH
43848: LD_INT 12
43850: ST_TO_ADDR
43851: GO 43892
43853: LD_INT 2
43855: DOUBLE
43856: EQUAL
43857: IFTRUE 43861
43859: GO 43872
43861: POP
// tech := tech_mortar ; 3 :
43862: LD_ADDR_VAR 0 5
43866: PUSH
43867: LD_INT 41
43869: ST_TO_ADDR
43870: GO 43892
43872: LD_INT 3
43874: DOUBLE
43875: EQUAL
43876: IFTRUE 43880
43878: GO 43891
43880: POP
// tech := tech_bazooka ; end ;
43881: LD_ADDR_VAR 0 5
43885: PUSH
43886: LD_INT 44
43888: ST_TO_ADDR
43889: GO 43892
43891: POP
// if Researched ( side , tech ) then
43892: LD_VAR 0 3
43896: PPUSH
43897: LD_VAR 0 5
43901: PPUSH
43902: CALL_OW 325
43906: IFFALSE 43933
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43908: LD_ADDR_VAR 0 2
43912: PUSH
43913: LD_INT 5
43915: PUSH
43916: LD_INT 8
43918: PUSH
43919: LD_INT 9
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: LIST
43926: PUSH
43927: LD_VAR 0 4
43931: ARRAY
43932: ST_TO_ADDR
// end ;
43933: LD_VAR 0 2
43937: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43938: LD_INT 0
43940: PPUSH
43941: PPUSH
43942: PPUSH
// if not mines then
43943: LD_VAR 0 2
43947: NOT
43948: IFFALSE 43952
// exit ;
43950: GO 44096
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43952: LD_ADDR_VAR 0 5
43956: PUSH
43957: LD_INT 81
43959: PUSH
43960: LD_VAR 0 1
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 3
43971: PUSH
43972: LD_INT 21
43974: PUSH
43975: LD_INT 3
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PPUSH
43990: CALL_OW 69
43994: ST_TO_ADDR
// for i in mines do
43995: LD_ADDR_VAR 0 4
43999: PUSH
44000: LD_VAR 0 2
44004: PUSH
44005: FOR_IN
44006: IFFALSE 44094
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
44008: LD_VAR 0 4
44012: PUSH
44013: LD_INT 1
44015: ARRAY
44016: PPUSH
44017: LD_VAR 0 4
44021: PUSH
44022: LD_INT 2
44024: ARRAY
44025: PPUSH
44026: CALL_OW 458
44030: NOT
44031: IFFALSE 44035
// continue ;
44033: GO 44005
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
44035: LD_VAR 0 4
44039: PUSH
44040: LD_INT 1
44042: ARRAY
44043: PPUSH
44044: LD_VAR 0 4
44048: PUSH
44049: LD_INT 2
44051: ARRAY
44052: PPUSH
44053: CALL_OW 428
44057: PUSH
44058: LD_VAR 0 5
44062: IN
44063: IFFALSE 44092
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
44065: LD_VAR 0 4
44069: PUSH
44070: LD_INT 1
44072: ARRAY
44073: PPUSH
44074: LD_VAR 0 4
44078: PUSH
44079: LD_INT 2
44081: ARRAY
44082: PPUSH
44083: LD_VAR 0 1
44087: PPUSH
44088: CALL_OW 456
// end ;
44092: GO 44005
44094: POP
44095: POP
// end ;
44096: LD_VAR 0 3
44100: RET
// export function Count ( array ) ; var i ; begin
44101: LD_INT 0
44103: PPUSH
44104: PPUSH
// result := 0 ;
44105: LD_ADDR_VAR 0 2
44109: PUSH
44110: LD_INT 0
44112: ST_TO_ADDR
// for i in array do
44113: LD_ADDR_VAR 0 3
44117: PUSH
44118: LD_VAR 0 1
44122: PUSH
44123: FOR_IN
44124: IFFALSE 44148
// if i then
44126: LD_VAR 0 3
44130: IFFALSE 44146
// result := result + 1 ;
44132: LD_ADDR_VAR 0 2
44136: PUSH
44137: LD_VAR 0 2
44141: PUSH
44142: LD_INT 1
44144: PLUS
44145: ST_TO_ADDR
44146: GO 44123
44148: POP
44149: POP
// end ;
44150: LD_VAR 0 2
44154: RET
// export function IsEmpty ( building ) ; begin
44155: LD_INT 0
44157: PPUSH
// if not building then
44158: LD_VAR 0 1
44162: NOT
44163: IFFALSE 44167
// exit ;
44165: GO 44210
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
44167: LD_ADDR_VAR 0 2
44171: PUSH
44172: LD_VAR 0 1
44176: PUSH
44177: LD_INT 22
44179: PUSH
44180: LD_VAR 0 1
44184: PPUSH
44185: CALL_OW 255
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 58
44196: PUSH
44197: EMPTY
44198: LIST
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PPUSH
44204: CALL_OW 69
44208: IN
44209: ST_TO_ADDR
// end ;
44210: LD_VAR 0 2
44214: RET
// export function IsNotFull ( building ) ; begin
44215: LD_INT 0
44217: PPUSH
// if not building then
44218: LD_VAR 0 1
44222: NOT
44223: IFFALSE 44227
// exit ;
44225: GO 44246
// result := UnitsInside ( building ) < 6 ;
44227: LD_ADDR_VAR 0 2
44231: PUSH
44232: LD_VAR 0 1
44236: PPUSH
44237: CALL_OW 313
44241: PUSH
44242: LD_INT 6
44244: LESS
44245: ST_TO_ADDR
// end ;
44246: LD_VAR 0 2
44250: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
44251: LD_INT 0
44253: PPUSH
44254: PPUSH
44255: PPUSH
44256: PPUSH
// tmp := [ ] ;
44257: LD_ADDR_VAR 0 3
44261: PUSH
44262: EMPTY
44263: ST_TO_ADDR
// list := [ ] ;
44264: LD_ADDR_VAR 0 5
44268: PUSH
44269: EMPTY
44270: ST_TO_ADDR
// for i = 16 to 25 do
44271: LD_ADDR_VAR 0 4
44275: PUSH
44276: DOUBLE
44277: LD_INT 16
44279: DEC
44280: ST_TO_ADDR
44281: LD_INT 25
44283: PUSH
44284: FOR_TO
44285: IFFALSE 44358
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
44287: LD_ADDR_VAR 0 3
44291: PUSH
44292: LD_VAR 0 3
44296: PUSH
44297: LD_INT 22
44299: PUSH
44300: LD_VAR 0 1
44304: PPUSH
44305: CALL_OW 255
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 91
44316: PUSH
44317: LD_VAR 0 1
44321: PUSH
44322: LD_INT 6
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 30
44332: PUSH
44333: LD_VAR 0 4
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: LIST
44346: PUSH
44347: EMPTY
44348: LIST
44349: PPUSH
44350: CALL_OW 69
44354: ADD
44355: ST_TO_ADDR
44356: GO 44284
44358: POP
44359: POP
// for i = 1 to tmp do
44360: LD_ADDR_VAR 0 4
44364: PUSH
44365: DOUBLE
44366: LD_INT 1
44368: DEC
44369: ST_TO_ADDR
44370: LD_VAR 0 3
44374: PUSH
44375: FOR_TO
44376: IFFALSE 44464
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
44378: LD_ADDR_VAR 0 5
44382: PUSH
44383: LD_VAR 0 5
44387: PUSH
44388: LD_VAR 0 3
44392: PUSH
44393: LD_VAR 0 4
44397: ARRAY
44398: PPUSH
44399: CALL_OW 266
44403: PUSH
44404: LD_VAR 0 3
44408: PUSH
44409: LD_VAR 0 4
44413: ARRAY
44414: PPUSH
44415: CALL_OW 250
44419: PUSH
44420: LD_VAR 0 3
44424: PUSH
44425: LD_VAR 0 4
44429: ARRAY
44430: PPUSH
44431: CALL_OW 251
44435: PUSH
44436: LD_VAR 0 3
44440: PUSH
44441: LD_VAR 0 4
44445: ARRAY
44446: PPUSH
44447: CALL_OW 254
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: PUSH
44458: EMPTY
44459: LIST
44460: ADD
44461: ST_TO_ADDR
44462: GO 44375
44464: POP
44465: POP
// result := list ;
44466: LD_ADDR_VAR 0 2
44470: PUSH
44471: LD_VAR 0 5
44475: ST_TO_ADDR
// end ;
44476: LD_VAR 0 2
44480: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44481: LD_INT 0
44483: PPUSH
44484: PPUSH
44485: PPUSH
44486: PPUSH
44487: PPUSH
44488: PPUSH
44489: PPUSH
// if not factory then
44490: LD_VAR 0 1
44494: NOT
44495: IFFALSE 44499
// exit ;
44497: GO 45092
// if control = control_apeman then
44499: LD_VAR 0 4
44503: PUSH
44504: LD_INT 5
44506: EQUAL
44507: IFFALSE 44616
// begin tmp := UnitsInside ( factory ) ;
44509: LD_ADDR_VAR 0 8
44513: PUSH
44514: LD_VAR 0 1
44518: PPUSH
44519: CALL_OW 313
44523: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44524: LD_VAR 0 8
44528: PPUSH
44529: LD_INT 25
44531: PUSH
44532: LD_INT 12
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PPUSH
44539: CALL_OW 72
44543: NOT
44544: IFFALSE 44554
// control := control_manual ;
44546: LD_ADDR_VAR 0 4
44550: PUSH
44551: LD_INT 1
44553: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44554: LD_ADDR_VAR 0 8
44558: PUSH
44559: LD_VAR 0 1
44563: PPUSH
44564: CALL 44251 0 1
44568: ST_TO_ADDR
// if tmp then
44569: LD_VAR 0 8
44573: IFFALSE 44616
// begin for i in tmp do
44575: LD_ADDR_VAR 0 7
44579: PUSH
44580: LD_VAR 0 8
44584: PUSH
44585: FOR_IN
44586: IFFALSE 44614
// if i [ 1 ] = b_ext_radio then
44588: LD_VAR 0 7
44592: PUSH
44593: LD_INT 1
44595: ARRAY
44596: PUSH
44597: LD_INT 22
44599: EQUAL
44600: IFFALSE 44612
// begin control := control_remote ;
44602: LD_ADDR_VAR 0 4
44606: PUSH
44607: LD_INT 2
44609: ST_TO_ADDR
// break ;
44610: GO 44614
// end ;
44612: GO 44585
44614: POP
44615: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44616: LD_VAR 0 1
44620: PPUSH
44621: LD_VAR 0 2
44625: PPUSH
44626: LD_VAR 0 3
44630: PPUSH
44631: LD_VAR 0 4
44635: PPUSH
44636: LD_VAR 0 5
44640: PPUSH
44641: CALL_OW 448
44645: IFFALSE 44680
// begin result := [ chassis , engine , control , weapon ] ;
44647: LD_ADDR_VAR 0 6
44651: PUSH
44652: LD_VAR 0 2
44656: PUSH
44657: LD_VAR 0 3
44661: PUSH
44662: LD_VAR 0 4
44666: PUSH
44667: LD_VAR 0 5
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: ST_TO_ADDR
// exit ;
44678: GO 45092
// end ; _chassis := AvailableChassisList ( factory ) ;
44680: LD_ADDR_VAR 0 9
44684: PUSH
44685: LD_VAR 0 1
44689: PPUSH
44690: CALL_OW 475
44694: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44695: LD_ADDR_VAR 0 11
44699: PUSH
44700: LD_VAR 0 1
44704: PPUSH
44705: CALL_OW 476
44709: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44710: LD_ADDR_VAR 0 12
44714: PUSH
44715: LD_VAR 0 1
44719: PPUSH
44720: CALL_OW 477
44724: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44725: LD_ADDR_VAR 0 10
44729: PUSH
44730: LD_VAR 0 1
44734: PPUSH
44735: CALL_OW 478
44739: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44740: LD_VAR 0 9
44744: NOT
44745: PUSH
44746: LD_VAR 0 11
44750: NOT
44751: OR
44752: PUSH
44753: LD_VAR 0 12
44757: NOT
44758: OR
44759: PUSH
44760: LD_VAR 0 10
44764: NOT
44765: OR
44766: IFFALSE 44801
// begin result := [ chassis , engine , control , weapon ] ;
44768: LD_ADDR_VAR 0 6
44772: PUSH
44773: LD_VAR 0 2
44777: PUSH
44778: LD_VAR 0 3
44782: PUSH
44783: LD_VAR 0 4
44787: PUSH
44788: LD_VAR 0 5
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: ST_TO_ADDR
// exit ;
44799: GO 45092
// end ; if not chassis in _chassis then
44801: LD_VAR 0 2
44805: PUSH
44806: LD_VAR 0 9
44810: IN
44811: NOT
44812: IFFALSE 44838
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44814: LD_ADDR_VAR 0 2
44818: PUSH
44819: LD_VAR 0 9
44823: PUSH
44824: LD_INT 1
44826: PPUSH
44827: LD_VAR 0 9
44831: PPUSH
44832: CALL_OW 12
44836: ARRAY
44837: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44838: LD_VAR 0 2
44842: PPUSH
44843: LD_VAR 0 3
44847: PPUSH
44848: CALL 45097 0 2
44852: NOT
44853: IFFALSE 44912
// repeat engine := _engine [ 1 ] ;
44855: LD_ADDR_VAR 0 3
44859: PUSH
44860: LD_VAR 0 11
44864: PUSH
44865: LD_INT 1
44867: ARRAY
44868: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44869: LD_ADDR_VAR 0 11
44873: PUSH
44874: LD_VAR 0 11
44878: PPUSH
44879: LD_INT 1
44881: PPUSH
44882: CALL_OW 3
44886: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44887: LD_VAR 0 2
44891: PPUSH
44892: LD_VAR 0 3
44896: PPUSH
44897: CALL 45097 0 2
44901: PUSH
44902: LD_VAR 0 11
44906: PUSH
44907: EMPTY
44908: EQUAL
44909: OR
44910: IFFALSE 44855
// if not control in _control then
44912: LD_VAR 0 4
44916: PUSH
44917: LD_VAR 0 12
44921: IN
44922: NOT
44923: IFFALSE 44949
// control := _control [ rand ( 1 , _control ) ] ;
44925: LD_ADDR_VAR 0 4
44929: PUSH
44930: LD_VAR 0 12
44934: PUSH
44935: LD_INT 1
44937: PPUSH
44938: LD_VAR 0 12
44942: PPUSH
44943: CALL_OW 12
44947: ARRAY
44948: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44949: LD_VAR 0 2
44953: PPUSH
44954: LD_VAR 0 5
44958: PPUSH
44959: CALL 45317 0 2
44963: NOT
44964: IFFALSE 45023
// repeat weapon := _weapon [ 1 ] ;
44966: LD_ADDR_VAR 0 5
44970: PUSH
44971: LD_VAR 0 10
44975: PUSH
44976: LD_INT 1
44978: ARRAY
44979: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44980: LD_ADDR_VAR 0 10
44984: PUSH
44985: LD_VAR 0 10
44989: PPUSH
44990: LD_INT 1
44992: PPUSH
44993: CALL_OW 3
44997: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44998: LD_VAR 0 2
45002: PPUSH
45003: LD_VAR 0 5
45007: PPUSH
45008: CALL 45317 0 2
45012: PUSH
45013: LD_VAR 0 10
45017: PUSH
45018: EMPTY
45019: EQUAL
45020: OR
45021: IFFALSE 44966
// result := [ ] ;
45023: LD_ADDR_VAR 0 6
45027: PUSH
45028: EMPTY
45029: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45030: LD_VAR 0 1
45034: PPUSH
45035: LD_VAR 0 2
45039: PPUSH
45040: LD_VAR 0 3
45044: PPUSH
45045: LD_VAR 0 4
45049: PPUSH
45050: LD_VAR 0 5
45054: PPUSH
45055: CALL_OW 448
45059: IFFALSE 45092
// result := [ chassis , engine , control , weapon ] ;
45061: LD_ADDR_VAR 0 6
45065: PUSH
45066: LD_VAR 0 2
45070: PUSH
45071: LD_VAR 0 3
45075: PUSH
45076: LD_VAR 0 4
45080: PUSH
45081: LD_VAR 0 5
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: ST_TO_ADDR
// end ;
45092: LD_VAR 0 6
45096: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
45097: LD_INT 0
45099: PPUSH
// if not chassis or not engine then
45100: LD_VAR 0 1
45104: NOT
45105: PUSH
45106: LD_VAR 0 2
45110: NOT
45111: OR
45112: IFFALSE 45116
// exit ;
45114: GO 45312
// case engine of engine_solar :
45116: LD_VAR 0 2
45120: PUSH
45121: LD_INT 2
45123: DOUBLE
45124: EQUAL
45125: IFTRUE 45129
45127: GO 45167
45129: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
45130: LD_ADDR_VAR 0 3
45134: PUSH
45135: LD_INT 11
45137: PUSH
45138: LD_INT 12
45140: PUSH
45141: LD_INT 13
45143: PUSH
45144: LD_INT 14
45146: PUSH
45147: LD_INT 1
45149: PUSH
45150: LD_INT 2
45152: PUSH
45153: LD_INT 3
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: ST_TO_ADDR
45165: GO 45296
45167: LD_INT 1
45169: DOUBLE
45170: EQUAL
45171: IFTRUE 45175
45173: GO 45237
45175: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
45176: LD_ADDR_VAR 0 3
45180: PUSH
45181: LD_INT 11
45183: PUSH
45184: LD_INT 12
45186: PUSH
45187: LD_INT 13
45189: PUSH
45190: LD_INT 14
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: LD_INT 2
45198: PUSH
45199: LD_INT 3
45201: PUSH
45202: LD_INT 4
45204: PUSH
45205: LD_INT 5
45207: PUSH
45208: LD_INT 21
45210: PUSH
45211: LD_INT 23
45213: PUSH
45214: LD_INT 22
45216: PUSH
45217: LD_INT 24
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: ST_TO_ADDR
45235: GO 45296
45237: LD_INT 3
45239: DOUBLE
45240: EQUAL
45241: IFTRUE 45245
45243: GO 45295
45245: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45246: LD_ADDR_VAR 0 3
45250: PUSH
45251: LD_INT 13
45253: PUSH
45254: LD_INT 14
45256: PUSH
45257: LD_INT 2
45259: PUSH
45260: LD_INT 3
45262: PUSH
45263: LD_INT 4
45265: PUSH
45266: LD_INT 5
45268: PUSH
45269: LD_INT 21
45271: PUSH
45272: LD_INT 22
45274: PUSH
45275: LD_INT 23
45277: PUSH
45278: LD_INT 24
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: ST_TO_ADDR
45293: GO 45296
45295: POP
// result := ( chassis in result ) ;
45296: LD_ADDR_VAR 0 3
45300: PUSH
45301: LD_VAR 0 1
45305: PUSH
45306: LD_VAR 0 3
45310: IN
45311: ST_TO_ADDR
// end ;
45312: LD_VAR 0 3
45316: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
45317: LD_INT 0
45319: PPUSH
// if not chassis or not weapon then
45320: LD_VAR 0 1
45324: NOT
45325: PUSH
45326: LD_VAR 0 2
45330: NOT
45331: OR
45332: IFFALSE 45336
// exit ;
45334: GO 46398
// case weapon of us_machine_gun :
45336: LD_VAR 0 2
45340: PUSH
45341: LD_INT 2
45343: DOUBLE
45344: EQUAL
45345: IFTRUE 45349
45347: GO 45379
45349: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
45350: LD_ADDR_VAR 0 3
45354: PUSH
45355: LD_INT 1
45357: PUSH
45358: LD_INT 2
45360: PUSH
45361: LD_INT 3
45363: PUSH
45364: LD_INT 4
45366: PUSH
45367: LD_INT 5
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: ST_TO_ADDR
45377: GO 46382
45379: LD_INT 3
45381: DOUBLE
45382: EQUAL
45383: IFTRUE 45387
45385: GO 45417
45387: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
45388: LD_ADDR_VAR 0 3
45392: PUSH
45393: LD_INT 1
45395: PUSH
45396: LD_INT 2
45398: PUSH
45399: LD_INT 3
45401: PUSH
45402: LD_INT 4
45404: PUSH
45405: LD_INT 5
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: ST_TO_ADDR
45415: GO 46382
45417: LD_INT 11
45419: DOUBLE
45420: EQUAL
45421: IFTRUE 45425
45423: GO 45455
45425: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45426: LD_ADDR_VAR 0 3
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: LD_INT 2
45436: PUSH
45437: LD_INT 3
45439: PUSH
45440: LD_INT 4
45442: PUSH
45443: LD_INT 5
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: ST_TO_ADDR
45453: GO 46382
45455: LD_INT 4
45457: DOUBLE
45458: EQUAL
45459: IFTRUE 45463
45461: GO 45489
45463: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45464: LD_ADDR_VAR 0 3
45468: PUSH
45469: LD_INT 2
45471: PUSH
45472: LD_INT 3
45474: PUSH
45475: LD_INT 4
45477: PUSH
45478: LD_INT 5
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: ST_TO_ADDR
45487: GO 46382
45489: LD_INT 5
45491: DOUBLE
45492: EQUAL
45493: IFTRUE 45497
45495: GO 45523
45497: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45498: LD_ADDR_VAR 0 3
45502: PUSH
45503: LD_INT 2
45505: PUSH
45506: LD_INT 3
45508: PUSH
45509: LD_INT 4
45511: PUSH
45512: LD_INT 5
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: ST_TO_ADDR
45521: GO 46382
45523: LD_INT 9
45525: DOUBLE
45526: EQUAL
45527: IFTRUE 45531
45529: GO 45557
45531: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45532: LD_ADDR_VAR 0 3
45536: PUSH
45537: LD_INT 2
45539: PUSH
45540: LD_INT 3
45542: PUSH
45543: LD_INT 4
45545: PUSH
45546: LD_INT 5
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: ST_TO_ADDR
45555: GO 46382
45557: LD_INT 7
45559: DOUBLE
45560: EQUAL
45561: IFTRUE 45565
45563: GO 45591
45565: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45566: LD_ADDR_VAR 0 3
45570: PUSH
45571: LD_INT 2
45573: PUSH
45574: LD_INT 3
45576: PUSH
45577: LD_INT 4
45579: PUSH
45580: LD_INT 5
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: ST_TO_ADDR
45589: GO 46382
45591: LD_INT 12
45593: DOUBLE
45594: EQUAL
45595: IFTRUE 45599
45597: GO 45625
45599: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45600: LD_ADDR_VAR 0 3
45604: PUSH
45605: LD_INT 2
45607: PUSH
45608: LD_INT 3
45610: PUSH
45611: LD_INT 4
45613: PUSH
45614: LD_INT 5
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: ST_TO_ADDR
45623: GO 46382
45625: LD_INT 13
45627: DOUBLE
45628: EQUAL
45629: IFTRUE 45633
45631: GO 45659
45633: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45634: LD_ADDR_VAR 0 3
45638: PUSH
45639: LD_INT 2
45641: PUSH
45642: LD_INT 3
45644: PUSH
45645: LD_INT 4
45647: PUSH
45648: LD_INT 5
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: ST_TO_ADDR
45657: GO 46382
45659: LD_INT 14
45661: DOUBLE
45662: EQUAL
45663: IFTRUE 45667
45665: GO 45685
45667: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45668: LD_ADDR_VAR 0 3
45672: PUSH
45673: LD_INT 4
45675: PUSH
45676: LD_INT 5
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: ST_TO_ADDR
45683: GO 46382
45685: LD_INT 6
45687: DOUBLE
45688: EQUAL
45689: IFTRUE 45693
45691: GO 45711
45693: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45694: LD_ADDR_VAR 0 3
45698: PUSH
45699: LD_INT 4
45701: PUSH
45702: LD_INT 5
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: ST_TO_ADDR
45709: GO 46382
45711: LD_INT 10
45713: DOUBLE
45714: EQUAL
45715: IFTRUE 45719
45717: GO 45737
45719: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45720: LD_ADDR_VAR 0 3
45724: PUSH
45725: LD_INT 4
45727: PUSH
45728: LD_INT 5
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: ST_TO_ADDR
45735: GO 46382
45737: LD_INT 22
45739: DOUBLE
45740: EQUAL
45741: IFTRUE 45745
45743: GO 45771
45745: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45746: LD_ADDR_VAR 0 3
45750: PUSH
45751: LD_INT 11
45753: PUSH
45754: LD_INT 12
45756: PUSH
45757: LD_INT 13
45759: PUSH
45760: LD_INT 14
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: ST_TO_ADDR
45769: GO 46382
45771: LD_INT 23
45773: DOUBLE
45774: EQUAL
45775: IFTRUE 45779
45777: GO 45805
45779: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45780: LD_ADDR_VAR 0 3
45784: PUSH
45785: LD_INT 11
45787: PUSH
45788: LD_INT 12
45790: PUSH
45791: LD_INT 13
45793: PUSH
45794: LD_INT 14
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: ST_TO_ADDR
45803: GO 46382
45805: LD_INT 24
45807: DOUBLE
45808: EQUAL
45809: IFTRUE 45813
45811: GO 45839
45813: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45814: LD_ADDR_VAR 0 3
45818: PUSH
45819: LD_INT 11
45821: PUSH
45822: LD_INT 12
45824: PUSH
45825: LD_INT 13
45827: PUSH
45828: LD_INT 14
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: ST_TO_ADDR
45837: GO 46382
45839: LD_INT 30
45841: DOUBLE
45842: EQUAL
45843: IFTRUE 45847
45845: GO 45873
45847: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45848: LD_ADDR_VAR 0 3
45852: PUSH
45853: LD_INT 11
45855: PUSH
45856: LD_INT 12
45858: PUSH
45859: LD_INT 13
45861: PUSH
45862: LD_INT 14
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: ST_TO_ADDR
45871: GO 46382
45873: LD_INT 25
45875: DOUBLE
45876: EQUAL
45877: IFTRUE 45881
45879: GO 45899
45881: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45882: LD_ADDR_VAR 0 3
45886: PUSH
45887: LD_INT 13
45889: PUSH
45890: LD_INT 14
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: ST_TO_ADDR
45897: GO 46382
45899: LD_INT 27
45901: DOUBLE
45902: EQUAL
45903: IFTRUE 45907
45905: GO 45925
45907: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45908: LD_ADDR_VAR 0 3
45912: PUSH
45913: LD_INT 13
45915: PUSH
45916: LD_INT 14
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: ST_TO_ADDR
45923: GO 46382
45925: LD_EXP 70
45929: DOUBLE
45930: EQUAL
45931: IFTRUE 45935
45933: GO 45961
45935: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45936: LD_ADDR_VAR 0 3
45940: PUSH
45941: LD_INT 11
45943: PUSH
45944: LD_INT 12
45946: PUSH
45947: LD_INT 13
45949: PUSH
45950: LD_INT 14
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: ST_TO_ADDR
45959: GO 46382
45961: LD_INT 28
45963: DOUBLE
45964: EQUAL
45965: IFTRUE 45969
45967: GO 45987
45969: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45970: LD_ADDR_VAR 0 3
45974: PUSH
45975: LD_INT 13
45977: PUSH
45978: LD_INT 14
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: ST_TO_ADDR
45985: GO 46382
45987: LD_INT 29
45989: DOUBLE
45990: EQUAL
45991: IFTRUE 45995
45993: GO 46013
45995: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45996: LD_ADDR_VAR 0 3
46000: PUSH
46001: LD_INT 13
46003: PUSH
46004: LD_INT 14
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: ST_TO_ADDR
46011: GO 46382
46013: LD_INT 31
46015: DOUBLE
46016: EQUAL
46017: IFTRUE 46021
46019: GO 46039
46021: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
46022: LD_ADDR_VAR 0 3
46026: PUSH
46027: LD_INT 13
46029: PUSH
46030: LD_INT 14
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: ST_TO_ADDR
46037: GO 46382
46039: LD_INT 26
46041: DOUBLE
46042: EQUAL
46043: IFTRUE 46047
46045: GO 46065
46047: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
46048: LD_ADDR_VAR 0 3
46052: PUSH
46053: LD_INT 13
46055: PUSH
46056: LD_INT 14
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: ST_TO_ADDR
46063: GO 46382
46065: LD_INT 42
46067: DOUBLE
46068: EQUAL
46069: IFTRUE 46073
46071: GO 46099
46073: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
46074: LD_ADDR_VAR 0 3
46078: PUSH
46079: LD_INT 21
46081: PUSH
46082: LD_INT 22
46084: PUSH
46085: LD_INT 23
46087: PUSH
46088: LD_INT 24
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: ST_TO_ADDR
46097: GO 46382
46099: LD_INT 43
46101: DOUBLE
46102: EQUAL
46103: IFTRUE 46107
46105: GO 46133
46107: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
46108: LD_ADDR_VAR 0 3
46112: PUSH
46113: LD_INT 21
46115: PUSH
46116: LD_INT 22
46118: PUSH
46119: LD_INT 23
46121: PUSH
46122: LD_INT 24
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: ST_TO_ADDR
46131: GO 46382
46133: LD_INT 44
46135: DOUBLE
46136: EQUAL
46137: IFTRUE 46141
46139: GO 46167
46141: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
46142: LD_ADDR_VAR 0 3
46146: PUSH
46147: LD_INT 21
46149: PUSH
46150: LD_INT 22
46152: PUSH
46153: LD_INT 23
46155: PUSH
46156: LD_INT 24
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: ST_TO_ADDR
46165: GO 46382
46167: LD_INT 45
46169: DOUBLE
46170: EQUAL
46171: IFTRUE 46175
46173: GO 46201
46175: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
46176: LD_ADDR_VAR 0 3
46180: PUSH
46181: LD_INT 21
46183: PUSH
46184: LD_INT 22
46186: PUSH
46187: LD_INT 23
46189: PUSH
46190: LD_INT 24
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: ST_TO_ADDR
46199: GO 46382
46201: LD_INT 49
46203: DOUBLE
46204: EQUAL
46205: IFTRUE 46209
46207: GO 46235
46209: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
46210: LD_ADDR_VAR 0 3
46214: PUSH
46215: LD_INT 21
46217: PUSH
46218: LD_INT 22
46220: PUSH
46221: LD_INT 23
46223: PUSH
46224: LD_INT 24
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: ST_TO_ADDR
46233: GO 46382
46235: LD_INT 51
46237: DOUBLE
46238: EQUAL
46239: IFTRUE 46243
46241: GO 46269
46243: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
46244: LD_ADDR_VAR 0 3
46248: PUSH
46249: LD_INT 21
46251: PUSH
46252: LD_INT 22
46254: PUSH
46255: LD_INT 23
46257: PUSH
46258: LD_INT 24
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: ST_TO_ADDR
46267: GO 46382
46269: LD_INT 52
46271: DOUBLE
46272: EQUAL
46273: IFTRUE 46277
46275: GO 46303
46277: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
46278: LD_ADDR_VAR 0 3
46282: PUSH
46283: LD_INT 21
46285: PUSH
46286: LD_INT 22
46288: PUSH
46289: LD_INT 23
46291: PUSH
46292: LD_INT 24
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: ST_TO_ADDR
46301: GO 46382
46303: LD_INT 53
46305: DOUBLE
46306: EQUAL
46307: IFTRUE 46311
46309: GO 46329
46311: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
46312: LD_ADDR_VAR 0 3
46316: PUSH
46317: LD_INT 23
46319: PUSH
46320: LD_INT 24
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: ST_TO_ADDR
46327: GO 46382
46329: LD_INT 46
46331: DOUBLE
46332: EQUAL
46333: IFTRUE 46337
46335: GO 46355
46337: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
46338: LD_ADDR_VAR 0 3
46342: PUSH
46343: LD_INT 23
46345: PUSH
46346: LD_INT 24
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: ST_TO_ADDR
46353: GO 46382
46355: LD_INT 47
46357: DOUBLE
46358: EQUAL
46359: IFTRUE 46363
46361: GO 46381
46363: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46364: LD_ADDR_VAR 0 3
46368: PUSH
46369: LD_INT 23
46371: PUSH
46372: LD_INT 24
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: ST_TO_ADDR
46379: GO 46382
46381: POP
// result := ( chassis in result ) ;
46382: LD_ADDR_VAR 0 3
46386: PUSH
46387: LD_VAR 0 1
46391: PUSH
46392: LD_VAR 0 3
46396: IN
46397: ST_TO_ADDR
// end ;
46398: LD_VAR 0 3
46402: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46403: LD_INT 0
46405: PPUSH
46406: PPUSH
46407: PPUSH
46408: PPUSH
46409: PPUSH
46410: PPUSH
46411: PPUSH
// result := array ;
46412: LD_ADDR_VAR 0 5
46416: PUSH
46417: LD_VAR 0 1
46421: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46422: LD_VAR 0 1
46426: NOT
46427: PUSH
46428: LD_VAR 0 2
46432: NOT
46433: OR
46434: PUSH
46435: LD_VAR 0 3
46439: NOT
46440: OR
46441: PUSH
46442: LD_VAR 0 2
46446: PUSH
46447: LD_VAR 0 1
46451: GREATER
46452: OR
46453: PUSH
46454: LD_VAR 0 3
46458: PUSH
46459: LD_VAR 0 1
46463: GREATER
46464: OR
46465: IFFALSE 46469
// exit ;
46467: GO 46765
// if direction then
46469: LD_VAR 0 4
46473: IFFALSE 46537
// begin d := 1 ;
46475: LD_ADDR_VAR 0 9
46479: PUSH
46480: LD_INT 1
46482: ST_TO_ADDR
// if i_from > i_to then
46483: LD_VAR 0 2
46487: PUSH
46488: LD_VAR 0 3
46492: GREATER
46493: IFFALSE 46519
// length := ( array - i_from ) + i_to else
46495: LD_ADDR_VAR 0 11
46499: PUSH
46500: LD_VAR 0 1
46504: PUSH
46505: LD_VAR 0 2
46509: MINUS
46510: PUSH
46511: LD_VAR 0 3
46515: PLUS
46516: ST_TO_ADDR
46517: GO 46535
// length := i_to - i_from ;
46519: LD_ADDR_VAR 0 11
46523: PUSH
46524: LD_VAR 0 3
46528: PUSH
46529: LD_VAR 0 2
46533: MINUS
46534: ST_TO_ADDR
// end else
46535: GO 46598
// begin d := - 1 ;
46537: LD_ADDR_VAR 0 9
46541: PUSH
46542: LD_INT 1
46544: NEG
46545: ST_TO_ADDR
// if i_from > i_to then
46546: LD_VAR 0 2
46550: PUSH
46551: LD_VAR 0 3
46555: GREATER
46556: IFFALSE 46576
// length := i_from - i_to else
46558: LD_ADDR_VAR 0 11
46562: PUSH
46563: LD_VAR 0 2
46567: PUSH
46568: LD_VAR 0 3
46572: MINUS
46573: ST_TO_ADDR
46574: GO 46598
// length := ( array - i_to ) + i_from ;
46576: LD_ADDR_VAR 0 11
46580: PUSH
46581: LD_VAR 0 1
46585: PUSH
46586: LD_VAR 0 3
46590: MINUS
46591: PUSH
46592: LD_VAR 0 2
46596: PLUS
46597: ST_TO_ADDR
// end ; if not length then
46598: LD_VAR 0 11
46602: NOT
46603: IFFALSE 46607
// exit ;
46605: GO 46765
// tmp := array ;
46607: LD_ADDR_VAR 0 10
46611: PUSH
46612: LD_VAR 0 1
46616: ST_TO_ADDR
// for i = 1 to length do
46617: LD_ADDR_VAR 0 6
46621: PUSH
46622: DOUBLE
46623: LD_INT 1
46625: DEC
46626: ST_TO_ADDR
46627: LD_VAR 0 11
46631: PUSH
46632: FOR_TO
46633: IFFALSE 46753
// begin for j = 1 to array do
46635: LD_ADDR_VAR 0 7
46639: PUSH
46640: DOUBLE
46641: LD_INT 1
46643: DEC
46644: ST_TO_ADDR
46645: LD_VAR 0 1
46649: PUSH
46650: FOR_TO
46651: IFFALSE 46739
// begin k := j + d ;
46653: LD_ADDR_VAR 0 8
46657: PUSH
46658: LD_VAR 0 7
46662: PUSH
46663: LD_VAR 0 9
46667: PLUS
46668: ST_TO_ADDR
// if k > array then
46669: LD_VAR 0 8
46673: PUSH
46674: LD_VAR 0 1
46678: GREATER
46679: IFFALSE 46689
// k := 1 ;
46681: LD_ADDR_VAR 0 8
46685: PUSH
46686: LD_INT 1
46688: ST_TO_ADDR
// if not k then
46689: LD_VAR 0 8
46693: NOT
46694: IFFALSE 46706
// k := array ;
46696: LD_ADDR_VAR 0 8
46700: PUSH
46701: LD_VAR 0 1
46705: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46706: LD_ADDR_VAR 0 10
46710: PUSH
46711: LD_VAR 0 10
46715: PPUSH
46716: LD_VAR 0 8
46720: PPUSH
46721: LD_VAR 0 1
46725: PUSH
46726: LD_VAR 0 7
46730: ARRAY
46731: PPUSH
46732: CALL_OW 1
46736: ST_TO_ADDR
// end ;
46737: GO 46650
46739: POP
46740: POP
// array := tmp ;
46741: LD_ADDR_VAR 0 1
46745: PUSH
46746: LD_VAR 0 10
46750: ST_TO_ADDR
// end ;
46751: GO 46632
46753: POP
46754: POP
// result := array ;
46755: LD_ADDR_VAR 0 5
46759: PUSH
46760: LD_VAR 0 1
46764: ST_TO_ADDR
// end ;
46765: LD_VAR 0 5
46769: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46770: LD_INT 0
46772: PPUSH
46773: PPUSH
// result := 0 ;
46774: LD_ADDR_VAR 0 3
46778: PUSH
46779: LD_INT 0
46781: ST_TO_ADDR
// if not array or not value in array then
46782: LD_VAR 0 1
46786: NOT
46787: PUSH
46788: LD_VAR 0 2
46792: PUSH
46793: LD_VAR 0 1
46797: IN
46798: NOT
46799: OR
46800: IFFALSE 46804
// exit ;
46802: GO 46858
// for i = 1 to array do
46804: LD_ADDR_VAR 0 4
46808: PUSH
46809: DOUBLE
46810: LD_INT 1
46812: DEC
46813: ST_TO_ADDR
46814: LD_VAR 0 1
46818: PUSH
46819: FOR_TO
46820: IFFALSE 46856
// if value = array [ i ] then
46822: LD_VAR 0 2
46826: PUSH
46827: LD_VAR 0 1
46831: PUSH
46832: LD_VAR 0 4
46836: ARRAY
46837: EQUAL
46838: IFFALSE 46854
// begin result := i ;
46840: LD_ADDR_VAR 0 3
46844: PUSH
46845: LD_VAR 0 4
46849: ST_TO_ADDR
// exit ;
46850: POP
46851: POP
46852: GO 46858
// end ;
46854: GO 46819
46856: POP
46857: POP
// end ;
46858: LD_VAR 0 3
46862: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46863: LD_INT 0
46865: PPUSH
// vc_chassis := chassis ;
46866: LD_ADDR_OWVAR 37
46870: PUSH
46871: LD_VAR 0 1
46875: ST_TO_ADDR
// vc_engine := engine ;
46876: LD_ADDR_OWVAR 39
46880: PUSH
46881: LD_VAR 0 2
46885: ST_TO_ADDR
// vc_control := control ;
46886: LD_ADDR_OWVAR 38
46890: PUSH
46891: LD_VAR 0 3
46895: ST_TO_ADDR
// vc_weapon := weapon ;
46896: LD_ADDR_OWVAR 40
46900: PUSH
46901: LD_VAR 0 4
46905: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46906: LD_ADDR_OWVAR 41
46910: PUSH
46911: LD_VAR 0 5
46915: ST_TO_ADDR
// end ;
46916: LD_VAR 0 6
46920: RET
// export function WantPlant ( unit ) ; var task ; begin
46921: LD_INT 0
46923: PPUSH
46924: PPUSH
// result := false ;
46925: LD_ADDR_VAR 0 2
46929: PUSH
46930: LD_INT 0
46932: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46933: LD_ADDR_VAR 0 3
46937: PUSH
46938: LD_VAR 0 1
46942: PPUSH
46943: CALL_OW 437
46947: ST_TO_ADDR
// if task then
46948: LD_VAR 0 3
46952: IFFALSE 46980
// if task [ 1 ] [ 1 ] = p then
46954: LD_VAR 0 3
46958: PUSH
46959: LD_INT 1
46961: ARRAY
46962: PUSH
46963: LD_INT 1
46965: ARRAY
46966: PUSH
46967: LD_STRING p
46969: EQUAL
46970: IFFALSE 46980
// result := true ;
46972: LD_ADDR_VAR 0 2
46976: PUSH
46977: LD_INT 1
46979: ST_TO_ADDR
// end ;
46980: LD_VAR 0 2
46984: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46985: LD_INT 0
46987: PPUSH
46988: PPUSH
46989: PPUSH
46990: PPUSH
// if pos < 1 then
46991: LD_VAR 0 2
46995: PUSH
46996: LD_INT 1
46998: LESS
46999: IFFALSE 47003
// exit ;
47001: GO 47306
// if pos = 1 then
47003: LD_VAR 0 2
47007: PUSH
47008: LD_INT 1
47010: EQUAL
47011: IFFALSE 47044
// result := Replace ( arr , pos [ 1 ] , value ) else
47013: LD_ADDR_VAR 0 4
47017: PUSH
47018: LD_VAR 0 1
47022: PPUSH
47023: LD_VAR 0 2
47027: PUSH
47028: LD_INT 1
47030: ARRAY
47031: PPUSH
47032: LD_VAR 0 3
47036: PPUSH
47037: CALL_OW 1
47041: ST_TO_ADDR
47042: GO 47306
// begin tmp := arr ;
47044: LD_ADDR_VAR 0 6
47048: PUSH
47049: LD_VAR 0 1
47053: ST_TO_ADDR
// s_arr := [ tmp ] ;
47054: LD_ADDR_VAR 0 7
47058: PUSH
47059: LD_VAR 0 6
47063: PUSH
47064: EMPTY
47065: LIST
47066: ST_TO_ADDR
// for i = 1 to pos - 1 do
47067: LD_ADDR_VAR 0 5
47071: PUSH
47072: DOUBLE
47073: LD_INT 1
47075: DEC
47076: ST_TO_ADDR
47077: LD_VAR 0 2
47081: PUSH
47082: LD_INT 1
47084: MINUS
47085: PUSH
47086: FOR_TO
47087: IFFALSE 47132
// begin tmp := tmp [ pos [ i ] ] ;
47089: LD_ADDR_VAR 0 6
47093: PUSH
47094: LD_VAR 0 6
47098: PUSH
47099: LD_VAR 0 2
47103: PUSH
47104: LD_VAR 0 5
47108: ARRAY
47109: ARRAY
47110: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
47111: LD_ADDR_VAR 0 7
47115: PUSH
47116: LD_VAR 0 7
47120: PUSH
47121: LD_VAR 0 6
47125: PUSH
47126: EMPTY
47127: LIST
47128: ADD
47129: ST_TO_ADDR
// end ;
47130: GO 47086
47132: POP
47133: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
47134: LD_ADDR_VAR 0 6
47138: PUSH
47139: LD_VAR 0 6
47143: PPUSH
47144: LD_VAR 0 2
47148: PUSH
47149: LD_VAR 0 2
47153: ARRAY
47154: PPUSH
47155: LD_VAR 0 3
47159: PPUSH
47160: CALL_OW 1
47164: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
47165: LD_ADDR_VAR 0 7
47169: PUSH
47170: LD_VAR 0 7
47174: PPUSH
47175: LD_VAR 0 7
47179: PPUSH
47180: LD_VAR 0 6
47184: PPUSH
47185: CALL_OW 1
47189: ST_TO_ADDR
// for i = s_arr downto 2 do
47190: LD_ADDR_VAR 0 5
47194: PUSH
47195: DOUBLE
47196: LD_VAR 0 7
47200: INC
47201: ST_TO_ADDR
47202: LD_INT 2
47204: PUSH
47205: FOR_DOWNTO
47206: IFFALSE 47290
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
47208: LD_ADDR_VAR 0 6
47212: PUSH
47213: LD_VAR 0 7
47217: PUSH
47218: LD_VAR 0 5
47222: PUSH
47223: LD_INT 1
47225: MINUS
47226: ARRAY
47227: PPUSH
47228: LD_VAR 0 2
47232: PUSH
47233: LD_VAR 0 5
47237: PUSH
47238: LD_INT 1
47240: MINUS
47241: ARRAY
47242: PPUSH
47243: LD_VAR 0 7
47247: PUSH
47248: LD_VAR 0 5
47252: ARRAY
47253: PPUSH
47254: CALL_OW 1
47258: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
47259: LD_ADDR_VAR 0 7
47263: PUSH
47264: LD_VAR 0 7
47268: PPUSH
47269: LD_VAR 0 5
47273: PUSH
47274: LD_INT 1
47276: MINUS
47277: PPUSH
47278: LD_VAR 0 6
47282: PPUSH
47283: CALL_OW 1
47287: ST_TO_ADDR
// end ;
47288: GO 47205
47290: POP
47291: POP
// result := s_arr [ 1 ] ;
47292: LD_ADDR_VAR 0 4
47296: PUSH
47297: LD_VAR 0 7
47301: PUSH
47302: LD_INT 1
47304: ARRAY
47305: ST_TO_ADDR
// end ; end ;
47306: LD_VAR 0 4
47310: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
47311: LD_INT 0
47313: PPUSH
47314: PPUSH
// if not list then
47315: LD_VAR 0 1
47319: NOT
47320: IFFALSE 47324
// exit ;
47322: GO 47415
// i := list [ pos1 ] ;
47324: LD_ADDR_VAR 0 5
47328: PUSH
47329: LD_VAR 0 1
47333: PUSH
47334: LD_VAR 0 2
47338: ARRAY
47339: ST_TO_ADDR
// if not i then
47340: LD_VAR 0 5
47344: NOT
47345: IFFALSE 47349
// exit ;
47347: GO 47415
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
47349: LD_ADDR_VAR 0 1
47353: PUSH
47354: LD_VAR 0 1
47358: PPUSH
47359: LD_VAR 0 2
47363: PPUSH
47364: LD_VAR 0 1
47368: PUSH
47369: LD_VAR 0 3
47373: ARRAY
47374: PPUSH
47375: CALL_OW 1
47379: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47380: LD_ADDR_VAR 0 1
47384: PUSH
47385: LD_VAR 0 1
47389: PPUSH
47390: LD_VAR 0 3
47394: PPUSH
47395: LD_VAR 0 5
47399: PPUSH
47400: CALL_OW 1
47404: ST_TO_ADDR
// result := list ;
47405: LD_ADDR_VAR 0 4
47409: PUSH
47410: LD_VAR 0 1
47414: ST_TO_ADDR
// end ;
47415: LD_VAR 0 4
47419: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47420: LD_INT 0
47422: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47423: LD_ADDR_VAR 0 5
47427: PUSH
47428: LD_VAR 0 1
47432: PPUSH
47433: CALL_OW 250
47437: PPUSH
47438: LD_VAR 0 1
47442: PPUSH
47443: CALL_OW 251
47447: PPUSH
47448: LD_VAR 0 2
47452: PPUSH
47453: LD_VAR 0 3
47457: PPUSH
47458: LD_VAR 0 4
47462: PPUSH
47463: CALL 47473 0 5
47467: ST_TO_ADDR
// end ;
47468: LD_VAR 0 5
47472: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47473: LD_INT 0
47475: PPUSH
47476: PPUSH
47477: PPUSH
47478: PPUSH
// if not list then
47479: LD_VAR 0 3
47483: NOT
47484: IFFALSE 47488
// exit ;
47486: GO 47876
// result := [ ] ;
47488: LD_ADDR_VAR 0 6
47492: PUSH
47493: EMPTY
47494: ST_TO_ADDR
// for i in list do
47495: LD_ADDR_VAR 0 7
47499: PUSH
47500: LD_VAR 0 3
47504: PUSH
47505: FOR_IN
47506: IFFALSE 47708
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47508: LD_ADDR_VAR 0 9
47512: PUSH
47513: LD_VAR 0 7
47517: PPUSH
47518: LD_VAR 0 1
47522: PPUSH
47523: LD_VAR 0 2
47527: PPUSH
47528: CALL_OW 297
47532: ST_TO_ADDR
// if not result then
47533: LD_VAR 0 6
47537: NOT
47538: IFFALSE 47564
// result := [ [ i , tmp ] ] else
47540: LD_ADDR_VAR 0 6
47544: PUSH
47545: LD_VAR 0 7
47549: PUSH
47550: LD_VAR 0 9
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: EMPTY
47560: LIST
47561: ST_TO_ADDR
47562: GO 47706
// begin if result [ result ] [ 2 ] < tmp then
47564: LD_VAR 0 6
47568: PUSH
47569: LD_VAR 0 6
47573: ARRAY
47574: PUSH
47575: LD_INT 2
47577: ARRAY
47578: PUSH
47579: LD_VAR 0 9
47583: LESS
47584: IFFALSE 47626
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47586: LD_ADDR_VAR 0 6
47590: PUSH
47591: LD_VAR 0 6
47595: PPUSH
47596: LD_VAR 0 6
47600: PUSH
47601: LD_INT 1
47603: PLUS
47604: PPUSH
47605: LD_VAR 0 7
47609: PUSH
47610: LD_VAR 0 9
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PPUSH
47619: CALL_OW 2
47623: ST_TO_ADDR
47624: GO 47706
// for j = 1 to result do
47626: LD_ADDR_VAR 0 8
47630: PUSH
47631: DOUBLE
47632: LD_INT 1
47634: DEC
47635: ST_TO_ADDR
47636: LD_VAR 0 6
47640: PUSH
47641: FOR_TO
47642: IFFALSE 47704
// begin if tmp < result [ j ] [ 2 ] then
47644: LD_VAR 0 9
47648: PUSH
47649: LD_VAR 0 6
47653: PUSH
47654: LD_VAR 0 8
47658: ARRAY
47659: PUSH
47660: LD_INT 2
47662: ARRAY
47663: LESS
47664: IFFALSE 47702
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47666: LD_ADDR_VAR 0 6
47670: PUSH
47671: LD_VAR 0 6
47675: PPUSH
47676: LD_VAR 0 8
47680: PPUSH
47681: LD_VAR 0 7
47685: PUSH
47686: LD_VAR 0 9
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PPUSH
47695: CALL_OW 2
47699: ST_TO_ADDR
// break ;
47700: GO 47704
// end ; end ;
47702: GO 47641
47704: POP
47705: POP
// end ; end ;
47706: GO 47505
47708: POP
47709: POP
// if result and not asc then
47710: LD_VAR 0 6
47714: PUSH
47715: LD_VAR 0 4
47719: NOT
47720: AND
47721: IFFALSE 47796
// begin tmp := result ;
47723: LD_ADDR_VAR 0 9
47727: PUSH
47728: LD_VAR 0 6
47732: ST_TO_ADDR
// for i = tmp downto 1 do
47733: LD_ADDR_VAR 0 7
47737: PUSH
47738: DOUBLE
47739: LD_VAR 0 9
47743: INC
47744: ST_TO_ADDR
47745: LD_INT 1
47747: PUSH
47748: FOR_DOWNTO
47749: IFFALSE 47794
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47751: LD_ADDR_VAR 0 6
47755: PUSH
47756: LD_VAR 0 6
47760: PPUSH
47761: LD_VAR 0 9
47765: PUSH
47766: LD_VAR 0 7
47770: MINUS
47771: PUSH
47772: LD_INT 1
47774: PLUS
47775: PPUSH
47776: LD_VAR 0 9
47780: PUSH
47781: LD_VAR 0 7
47785: ARRAY
47786: PPUSH
47787: CALL_OW 1
47791: ST_TO_ADDR
47792: GO 47748
47794: POP
47795: POP
// end ; tmp := [ ] ;
47796: LD_ADDR_VAR 0 9
47800: PUSH
47801: EMPTY
47802: ST_TO_ADDR
// if mode then
47803: LD_VAR 0 5
47807: IFFALSE 47876
// begin for i = 1 to result do
47809: LD_ADDR_VAR 0 7
47813: PUSH
47814: DOUBLE
47815: LD_INT 1
47817: DEC
47818: ST_TO_ADDR
47819: LD_VAR 0 6
47823: PUSH
47824: FOR_TO
47825: IFFALSE 47864
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47827: LD_ADDR_VAR 0 9
47831: PUSH
47832: LD_VAR 0 9
47836: PPUSH
47837: LD_VAR 0 7
47841: PPUSH
47842: LD_VAR 0 6
47846: PUSH
47847: LD_VAR 0 7
47851: ARRAY
47852: PUSH
47853: LD_INT 1
47855: ARRAY
47856: PPUSH
47857: CALL_OW 1
47861: ST_TO_ADDR
47862: GO 47824
47864: POP
47865: POP
// result := tmp ;
47866: LD_ADDR_VAR 0 6
47870: PUSH
47871: LD_VAR 0 9
47875: ST_TO_ADDR
// end ; end ;
47876: LD_VAR 0 6
47880: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47881: LD_INT 0
47883: PPUSH
47884: PPUSH
47885: PPUSH
47886: PPUSH
47887: PPUSH
47888: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47889: LD_ADDR_VAR 0 5
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: EMPTY
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: ST_TO_ADDR
// if not x or not y then
47911: LD_VAR 0 2
47915: NOT
47916: PUSH
47917: LD_VAR 0 3
47921: NOT
47922: OR
47923: IFFALSE 47927
// exit ;
47925: GO 49579
// if not range then
47927: LD_VAR 0 4
47931: NOT
47932: IFFALSE 47942
// range := 10 ;
47934: LD_ADDR_VAR 0 4
47938: PUSH
47939: LD_INT 10
47941: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47942: LD_ADDR_VAR 0 8
47946: PUSH
47947: LD_INT 81
47949: PUSH
47950: LD_VAR 0 1
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 92
47961: PUSH
47962: LD_VAR 0 2
47966: PUSH
47967: LD_VAR 0 3
47971: PUSH
47972: LD_VAR 0 4
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 3
47985: PUSH
47986: LD_INT 21
47988: PUSH
47989: LD_INT 3
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: LIST
48004: PPUSH
48005: CALL_OW 69
48009: ST_TO_ADDR
// if not tmp then
48010: LD_VAR 0 8
48014: NOT
48015: IFFALSE 48019
// exit ;
48017: GO 49579
// for i in tmp do
48019: LD_ADDR_VAR 0 6
48023: PUSH
48024: LD_VAR 0 8
48028: PUSH
48029: FOR_IN
48030: IFFALSE 49554
// begin points := [ 0 , 0 , 0 ] ;
48032: LD_ADDR_VAR 0 9
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: LIST
48050: ST_TO_ADDR
// bpoints := 1 ;
48051: LD_ADDR_VAR 0 10
48055: PUSH
48056: LD_INT 1
48058: ST_TO_ADDR
// case GetType ( i ) of unit_human :
48059: LD_VAR 0 6
48063: PPUSH
48064: CALL_OW 247
48068: PUSH
48069: LD_INT 1
48071: DOUBLE
48072: EQUAL
48073: IFTRUE 48077
48075: GO 48655
48077: POP
// begin if GetClass ( i ) = 1 then
48078: LD_VAR 0 6
48082: PPUSH
48083: CALL_OW 257
48087: PUSH
48088: LD_INT 1
48090: EQUAL
48091: IFFALSE 48112
// points := [ 10 , 5 , 3 ] ;
48093: LD_ADDR_VAR 0 9
48097: PUSH
48098: LD_INT 10
48100: PUSH
48101: LD_INT 5
48103: PUSH
48104: LD_INT 3
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: LIST
48111: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
48112: LD_VAR 0 6
48116: PPUSH
48117: CALL_OW 257
48121: PUSH
48122: LD_INT 2
48124: PUSH
48125: LD_INT 3
48127: PUSH
48128: LD_INT 4
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: LIST
48135: IN
48136: IFFALSE 48157
// points := [ 3 , 2 , 1 ] ;
48138: LD_ADDR_VAR 0 9
48142: PUSH
48143: LD_INT 3
48145: PUSH
48146: LD_INT 2
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: LIST
48156: ST_TO_ADDR
// if GetClass ( i ) = 5 then
48157: LD_VAR 0 6
48161: PPUSH
48162: CALL_OW 257
48166: PUSH
48167: LD_INT 5
48169: EQUAL
48170: IFFALSE 48191
// points := [ 130 , 5 , 2 ] ;
48172: LD_ADDR_VAR 0 9
48176: PUSH
48177: LD_INT 130
48179: PUSH
48180: LD_INT 5
48182: PUSH
48183: LD_INT 2
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: LIST
48190: ST_TO_ADDR
// if GetClass ( i ) = 8 then
48191: LD_VAR 0 6
48195: PPUSH
48196: CALL_OW 257
48200: PUSH
48201: LD_INT 8
48203: EQUAL
48204: IFFALSE 48225
// points := [ 35 , 35 , 30 ] ;
48206: LD_ADDR_VAR 0 9
48210: PUSH
48211: LD_INT 35
48213: PUSH
48214: LD_INT 35
48216: PUSH
48217: LD_INT 30
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: LIST
48224: ST_TO_ADDR
// if GetClass ( i ) = 9 then
48225: LD_VAR 0 6
48229: PPUSH
48230: CALL_OW 257
48234: PUSH
48235: LD_INT 9
48237: EQUAL
48238: IFFALSE 48259
// points := [ 20 , 55 , 40 ] ;
48240: LD_ADDR_VAR 0 9
48244: PUSH
48245: LD_INT 20
48247: PUSH
48248: LD_INT 55
48250: PUSH
48251: LD_INT 40
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: LIST
48258: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
48259: LD_VAR 0 6
48263: PPUSH
48264: CALL_OW 257
48268: PUSH
48269: LD_INT 12
48271: PUSH
48272: LD_INT 16
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: IN
48279: IFFALSE 48300
// points := [ 5 , 3 , 2 ] ;
48281: LD_ADDR_VAR 0 9
48285: PUSH
48286: LD_INT 5
48288: PUSH
48289: LD_INT 3
48291: PUSH
48292: LD_INT 2
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: LIST
48299: ST_TO_ADDR
// if GetClass ( i ) = 17 then
48300: LD_VAR 0 6
48304: PPUSH
48305: CALL_OW 257
48309: PUSH
48310: LD_INT 17
48312: EQUAL
48313: IFFALSE 48334
// points := [ 100 , 50 , 75 ] ;
48315: LD_ADDR_VAR 0 9
48319: PUSH
48320: LD_INT 100
48322: PUSH
48323: LD_INT 50
48325: PUSH
48326: LD_INT 75
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: LIST
48333: ST_TO_ADDR
// if GetClass ( i ) = 15 then
48334: LD_VAR 0 6
48338: PPUSH
48339: CALL_OW 257
48343: PUSH
48344: LD_INT 15
48346: EQUAL
48347: IFFALSE 48368
// points := [ 10 , 5 , 3 ] ;
48349: LD_ADDR_VAR 0 9
48353: PUSH
48354: LD_INT 10
48356: PUSH
48357: LD_INT 5
48359: PUSH
48360: LD_INT 3
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: LIST
48367: ST_TO_ADDR
// if GetClass ( i ) = 14 then
48368: LD_VAR 0 6
48372: PPUSH
48373: CALL_OW 257
48377: PUSH
48378: LD_INT 14
48380: EQUAL
48381: IFFALSE 48402
// points := [ 10 , 0 , 0 ] ;
48383: LD_ADDR_VAR 0 9
48387: PUSH
48388: LD_INT 10
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: LIST
48401: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48402: LD_VAR 0 6
48406: PPUSH
48407: CALL_OW 257
48411: PUSH
48412: LD_INT 11
48414: EQUAL
48415: IFFALSE 48436
// points := [ 30 , 10 , 5 ] ;
48417: LD_ADDR_VAR 0 9
48421: PUSH
48422: LD_INT 30
48424: PUSH
48425: LD_INT 10
48427: PUSH
48428: LD_INT 5
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: LIST
48435: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48436: LD_VAR 0 1
48440: PPUSH
48441: LD_INT 5
48443: PPUSH
48444: CALL_OW 321
48448: PUSH
48449: LD_INT 2
48451: EQUAL
48452: IFFALSE 48469
// bpoints := bpoints * 1.8 ;
48454: LD_ADDR_VAR 0 10
48458: PUSH
48459: LD_VAR 0 10
48463: PUSH
48464: LD_REAL  1.80000000000000E+0000
48467: MUL
48468: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48469: LD_VAR 0 6
48473: PPUSH
48474: CALL_OW 257
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: LD_INT 2
48484: PUSH
48485: LD_INT 3
48487: PUSH
48488: LD_INT 4
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: IN
48497: PUSH
48498: LD_VAR 0 1
48502: PPUSH
48503: LD_INT 51
48505: PPUSH
48506: CALL_OW 321
48510: PUSH
48511: LD_INT 2
48513: EQUAL
48514: AND
48515: IFFALSE 48532
// bpoints := bpoints * 1.2 ;
48517: LD_ADDR_VAR 0 10
48521: PUSH
48522: LD_VAR 0 10
48526: PUSH
48527: LD_REAL  1.20000000000000E+0000
48530: MUL
48531: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48532: LD_VAR 0 6
48536: PPUSH
48537: CALL_OW 257
48541: PUSH
48542: LD_INT 5
48544: PUSH
48545: LD_INT 7
48547: PUSH
48548: LD_INT 9
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: LIST
48555: IN
48556: PUSH
48557: LD_VAR 0 1
48561: PPUSH
48562: LD_INT 52
48564: PPUSH
48565: CALL_OW 321
48569: PUSH
48570: LD_INT 2
48572: EQUAL
48573: AND
48574: IFFALSE 48591
// bpoints := bpoints * 1.5 ;
48576: LD_ADDR_VAR 0 10
48580: PUSH
48581: LD_VAR 0 10
48585: PUSH
48586: LD_REAL  1.50000000000000E+0000
48589: MUL
48590: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48591: LD_VAR 0 1
48595: PPUSH
48596: LD_INT 66
48598: PPUSH
48599: CALL_OW 321
48603: PUSH
48604: LD_INT 2
48606: EQUAL
48607: IFFALSE 48624
// bpoints := bpoints * 1.1 ;
48609: LD_ADDR_VAR 0 10
48613: PUSH
48614: LD_VAR 0 10
48618: PUSH
48619: LD_REAL  1.10000000000000E+0000
48622: MUL
48623: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48624: LD_ADDR_VAR 0 10
48628: PUSH
48629: LD_VAR 0 10
48633: PUSH
48634: LD_VAR 0 6
48638: PPUSH
48639: LD_INT 1
48641: PPUSH
48642: CALL_OW 259
48646: PUSH
48647: LD_REAL  1.15000000000000E+0000
48650: MUL
48651: MUL
48652: ST_TO_ADDR
// end ; unit_vehicle :
48653: GO 49483
48655: LD_INT 2
48657: DOUBLE
48658: EQUAL
48659: IFTRUE 48663
48661: GO 49471
48663: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48664: LD_VAR 0 6
48668: PPUSH
48669: CALL_OW 264
48673: PUSH
48674: LD_INT 2
48676: PUSH
48677: LD_INT 42
48679: PUSH
48680: LD_INT 24
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: LIST
48687: IN
48688: IFFALSE 48709
// points := [ 25 , 5 , 3 ] ;
48690: LD_ADDR_VAR 0 9
48694: PUSH
48695: LD_INT 25
48697: PUSH
48698: LD_INT 5
48700: PUSH
48701: LD_INT 3
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: LIST
48708: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48709: LD_VAR 0 6
48713: PPUSH
48714: CALL_OW 264
48718: PUSH
48719: LD_INT 4
48721: PUSH
48722: LD_INT 43
48724: PUSH
48725: LD_INT 25
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: LIST
48732: IN
48733: IFFALSE 48754
// points := [ 40 , 15 , 5 ] ;
48735: LD_ADDR_VAR 0 9
48739: PUSH
48740: LD_INT 40
48742: PUSH
48743: LD_INT 15
48745: PUSH
48746: LD_INT 5
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: LIST
48753: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48754: LD_VAR 0 6
48758: PPUSH
48759: CALL_OW 264
48763: PUSH
48764: LD_INT 3
48766: PUSH
48767: LD_INT 23
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: IN
48774: IFFALSE 48795
// points := [ 7 , 25 , 8 ] ;
48776: LD_ADDR_VAR 0 9
48780: PUSH
48781: LD_INT 7
48783: PUSH
48784: LD_INT 25
48786: PUSH
48787: LD_INT 8
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: LIST
48794: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48795: LD_VAR 0 6
48799: PPUSH
48800: CALL_OW 264
48804: PUSH
48805: LD_INT 5
48807: PUSH
48808: LD_INT 27
48810: PUSH
48811: LD_INT 44
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: LIST
48818: IN
48819: IFFALSE 48840
// points := [ 14 , 50 , 16 ] ;
48821: LD_ADDR_VAR 0 9
48825: PUSH
48826: LD_INT 14
48828: PUSH
48829: LD_INT 50
48831: PUSH
48832: LD_INT 16
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: LIST
48839: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48840: LD_VAR 0 6
48844: PPUSH
48845: CALL_OW 264
48849: PUSH
48850: LD_INT 6
48852: PUSH
48853: LD_INT 46
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: IN
48860: IFFALSE 48881
// points := [ 32 , 120 , 70 ] ;
48862: LD_ADDR_VAR 0 9
48866: PUSH
48867: LD_INT 32
48869: PUSH
48870: LD_INT 120
48872: PUSH
48873: LD_INT 70
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: LIST
48880: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48881: LD_VAR 0 6
48885: PPUSH
48886: CALL_OW 264
48890: PUSH
48891: LD_INT 7
48893: PUSH
48894: LD_INT 28
48896: PUSH
48897: LD_INT 45
48899: PUSH
48900: LD_EXP 70
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: IN
48911: IFFALSE 48932
// points := [ 35 , 20 , 45 ] ;
48913: LD_ADDR_VAR 0 9
48917: PUSH
48918: LD_INT 35
48920: PUSH
48921: LD_INT 20
48923: PUSH
48924: LD_INT 45
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: LIST
48931: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48932: LD_VAR 0 6
48936: PPUSH
48937: CALL_OW 264
48941: PUSH
48942: LD_INT 47
48944: PUSH
48945: EMPTY
48946: LIST
48947: IN
48948: IFFALSE 48969
// points := [ 67 , 45 , 75 ] ;
48950: LD_ADDR_VAR 0 9
48954: PUSH
48955: LD_INT 67
48957: PUSH
48958: LD_INT 45
48960: PUSH
48961: LD_INT 75
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: LIST
48968: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48969: LD_VAR 0 6
48973: PPUSH
48974: CALL_OW 264
48978: PUSH
48979: LD_INT 26
48981: PUSH
48982: EMPTY
48983: LIST
48984: IN
48985: IFFALSE 49006
// points := [ 120 , 30 , 80 ] ;
48987: LD_ADDR_VAR 0 9
48991: PUSH
48992: LD_INT 120
48994: PUSH
48995: LD_INT 30
48997: PUSH
48998: LD_INT 80
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: LIST
49005: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
49006: LD_VAR 0 6
49010: PPUSH
49011: CALL_OW 264
49015: PUSH
49016: LD_INT 22
49018: PUSH
49019: EMPTY
49020: LIST
49021: IN
49022: IFFALSE 49043
// points := [ 40 , 1 , 1 ] ;
49024: LD_ADDR_VAR 0 9
49028: PUSH
49029: LD_INT 40
49031: PUSH
49032: LD_INT 1
49034: PUSH
49035: LD_INT 1
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: LIST
49042: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
49043: LD_VAR 0 6
49047: PPUSH
49048: CALL_OW 264
49052: PUSH
49053: LD_INT 29
49055: PUSH
49056: EMPTY
49057: LIST
49058: IN
49059: IFFALSE 49080
// points := [ 70 , 200 , 400 ] ;
49061: LD_ADDR_VAR 0 9
49065: PUSH
49066: LD_INT 70
49068: PUSH
49069: LD_INT 200
49071: PUSH
49072: LD_INT 400
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: LIST
49079: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
49080: LD_VAR 0 6
49084: PPUSH
49085: CALL_OW 264
49089: PUSH
49090: LD_INT 14
49092: PUSH
49093: LD_INT 53
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: IN
49100: IFFALSE 49121
// points := [ 40 , 10 , 20 ] ;
49102: LD_ADDR_VAR 0 9
49106: PUSH
49107: LD_INT 40
49109: PUSH
49110: LD_INT 10
49112: PUSH
49113: LD_INT 20
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: LIST
49120: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
49121: LD_VAR 0 6
49125: PPUSH
49126: CALL_OW 264
49130: PUSH
49131: LD_INT 9
49133: PUSH
49134: EMPTY
49135: LIST
49136: IN
49137: IFFALSE 49158
// points := [ 5 , 70 , 20 ] ;
49139: LD_ADDR_VAR 0 9
49143: PUSH
49144: LD_INT 5
49146: PUSH
49147: LD_INT 70
49149: PUSH
49150: LD_INT 20
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: LIST
49157: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
49158: LD_VAR 0 6
49162: PPUSH
49163: CALL_OW 264
49167: PUSH
49168: LD_INT 10
49170: PUSH
49171: EMPTY
49172: LIST
49173: IN
49174: IFFALSE 49195
// points := [ 35 , 110 , 70 ] ;
49176: LD_ADDR_VAR 0 9
49180: PUSH
49181: LD_INT 35
49183: PUSH
49184: LD_INT 110
49186: PUSH
49187: LD_INT 70
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: LIST
49194: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
49195: LD_VAR 0 6
49199: PPUSH
49200: CALL_OW 265
49204: PUSH
49205: LD_INT 25
49207: EQUAL
49208: IFFALSE 49229
// points := [ 80 , 65 , 100 ] ;
49210: LD_ADDR_VAR 0 9
49214: PUSH
49215: LD_INT 80
49217: PUSH
49218: LD_INT 65
49220: PUSH
49221: LD_INT 100
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: LIST
49228: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
49229: LD_VAR 0 6
49233: PPUSH
49234: CALL_OW 263
49238: PUSH
49239: LD_INT 1
49241: EQUAL
49242: IFFALSE 49277
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
49244: LD_ADDR_VAR 0 10
49248: PUSH
49249: LD_VAR 0 10
49253: PUSH
49254: LD_VAR 0 6
49258: PPUSH
49259: CALL_OW 311
49263: PPUSH
49264: LD_INT 3
49266: PPUSH
49267: CALL_OW 259
49271: PUSH
49272: LD_INT 4
49274: MUL
49275: MUL
49276: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
49277: LD_VAR 0 6
49281: PPUSH
49282: CALL_OW 263
49286: PUSH
49287: LD_INT 2
49289: EQUAL
49290: IFFALSE 49341
// begin j := IsControledBy ( i ) ;
49292: LD_ADDR_VAR 0 7
49296: PUSH
49297: LD_VAR 0 6
49301: PPUSH
49302: CALL_OW 312
49306: ST_TO_ADDR
// if j then
49307: LD_VAR 0 7
49311: IFFALSE 49341
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
49313: LD_ADDR_VAR 0 10
49317: PUSH
49318: LD_VAR 0 10
49322: PUSH
49323: LD_VAR 0 7
49327: PPUSH
49328: LD_INT 3
49330: PPUSH
49331: CALL_OW 259
49335: PUSH
49336: LD_INT 3
49338: MUL
49339: MUL
49340: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
49341: LD_VAR 0 6
49345: PPUSH
49346: CALL_OW 264
49350: PUSH
49351: LD_INT 5
49353: PUSH
49354: LD_INT 6
49356: PUSH
49357: LD_INT 46
49359: PUSH
49360: LD_INT 44
49362: PUSH
49363: LD_INT 47
49365: PUSH
49366: LD_INT 45
49368: PUSH
49369: LD_INT 28
49371: PUSH
49372: LD_INT 7
49374: PUSH
49375: LD_INT 27
49377: PUSH
49378: LD_INT 29
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: IN
49393: PUSH
49394: LD_VAR 0 1
49398: PPUSH
49399: LD_INT 52
49401: PPUSH
49402: CALL_OW 321
49406: PUSH
49407: LD_INT 2
49409: EQUAL
49410: AND
49411: IFFALSE 49428
// bpoints := bpoints * 1.2 ;
49413: LD_ADDR_VAR 0 10
49417: PUSH
49418: LD_VAR 0 10
49422: PUSH
49423: LD_REAL  1.20000000000000E+0000
49426: MUL
49427: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49428: LD_VAR 0 6
49432: PPUSH
49433: CALL_OW 264
49437: PUSH
49438: LD_INT 6
49440: PUSH
49441: LD_INT 46
49443: PUSH
49444: LD_INT 47
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: LIST
49451: IN
49452: IFFALSE 49469
// bpoints := bpoints * 1.2 ;
49454: LD_ADDR_VAR 0 10
49458: PUSH
49459: LD_VAR 0 10
49463: PUSH
49464: LD_REAL  1.20000000000000E+0000
49467: MUL
49468: ST_TO_ADDR
// end ; unit_building :
49469: GO 49483
49471: LD_INT 3
49473: DOUBLE
49474: EQUAL
49475: IFTRUE 49479
49477: GO 49482
49479: POP
// ; end ;
49480: GO 49483
49482: POP
// for j = 1 to 3 do
49483: LD_ADDR_VAR 0 7
49487: PUSH
49488: DOUBLE
49489: LD_INT 1
49491: DEC
49492: ST_TO_ADDR
49493: LD_INT 3
49495: PUSH
49496: FOR_TO
49497: IFFALSE 49550
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49499: LD_ADDR_VAR 0 5
49503: PUSH
49504: LD_VAR 0 5
49508: PPUSH
49509: LD_VAR 0 7
49513: PPUSH
49514: LD_VAR 0 5
49518: PUSH
49519: LD_VAR 0 7
49523: ARRAY
49524: PUSH
49525: LD_VAR 0 9
49529: PUSH
49530: LD_VAR 0 7
49534: ARRAY
49535: PUSH
49536: LD_VAR 0 10
49540: MUL
49541: PLUS
49542: PPUSH
49543: CALL_OW 1
49547: ST_TO_ADDR
49548: GO 49496
49550: POP
49551: POP
// end ;
49552: GO 48029
49554: POP
49555: POP
// result := Replace ( result , 4 , tmp ) ;
49556: LD_ADDR_VAR 0 5
49560: PUSH
49561: LD_VAR 0 5
49565: PPUSH
49566: LD_INT 4
49568: PPUSH
49569: LD_VAR 0 8
49573: PPUSH
49574: CALL_OW 1
49578: ST_TO_ADDR
// end ;
49579: LD_VAR 0 5
49583: RET
// export function DangerAtRange ( unit , range ) ; begin
49584: LD_INT 0
49586: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49587: LD_ADDR_VAR 0 3
49591: PUSH
49592: LD_VAR 0 1
49596: PPUSH
49597: CALL_OW 255
49601: PPUSH
49602: LD_VAR 0 1
49606: PPUSH
49607: CALL_OW 250
49611: PPUSH
49612: LD_VAR 0 1
49616: PPUSH
49617: CALL_OW 251
49621: PPUSH
49622: LD_VAR 0 2
49626: PPUSH
49627: CALL 47881 0 4
49631: ST_TO_ADDR
// end ;
49632: LD_VAR 0 3
49636: RET
// export function DangerInArea ( side , area ) ; begin
49637: LD_INT 0
49639: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49640: LD_ADDR_VAR 0 3
49644: PUSH
49645: LD_VAR 0 2
49649: PPUSH
49650: LD_INT 81
49652: PUSH
49653: LD_VAR 0 1
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PPUSH
49662: CALL_OW 70
49666: ST_TO_ADDR
// end ;
49667: LD_VAR 0 3
49671: RET
// export function IsExtension ( b ) ; begin
49672: LD_INT 0
49674: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49675: LD_ADDR_VAR 0 2
49679: PUSH
49680: LD_VAR 0 1
49684: PUSH
49685: LD_INT 23
49687: PUSH
49688: LD_INT 20
49690: PUSH
49691: LD_INT 22
49693: PUSH
49694: LD_INT 17
49696: PUSH
49697: LD_INT 24
49699: PUSH
49700: LD_INT 21
49702: PUSH
49703: LD_INT 19
49705: PUSH
49706: LD_INT 16
49708: PUSH
49709: LD_INT 25
49711: PUSH
49712: LD_INT 18
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: IN
49727: ST_TO_ADDR
// end ;
49728: LD_VAR 0 2
49732: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49733: LD_INT 0
49735: PPUSH
49736: PPUSH
49737: PPUSH
// result := [ ] ;
49738: LD_ADDR_VAR 0 4
49742: PUSH
49743: EMPTY
49744: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49745: LD_ADDR_VAR 0 5
49749: PUSH
49750: LD_VAR 0 2
49754: PPUSH
49755: LD_INT 21
49757: PUSH
49758: LD_INT 3
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PPUSH
49765: CALL_OW 70
49769: ST_TO_ADDR
// if not tmp then
49770: LD_VAR 0 5
49774: NOT
49775: IFFALSE 49779
// exit ;
49777: GO 49843
// if checkLink then
49779: LD_VAR 0 3
49783: IFFALSE 49833
// begin for i in tmp do
49785: LD_ADDR_VAR 0 6
49789: PUSH
49790: LD_VAR 0 5
49794: PUSH
49795: FOR_IN
49796: IFFALSE 49831
// if GetBase ( i ) <> base then
49798: LD_VAR 0 6
49802: PPUSH
49803: CALL_OW 274
49807: PUSH
49808: LD_VAR 0 1
49812: NONEQUAL
49813: IFFALSE 49829
// ComLinkToBase ( base , i ) ;
49815: LD_VAR 0 1
49819: PPUSH
49820: LD_VAR 0 6
49824: PPUSH
49825: CALL_OW 169
49829: GO 49795
49831: POP
49832: POP
// end ; result := tmp ;
49833: LD_ADDR_VAR 0 4
49837: PUSH
49838: LD_VAR 0 5
49842: ST_TO_ADDR
// end ;
49843: LD_VAR 0 4
49847: RET
// export function ComComplete ( units , b ) ; var i ; begin
49848: LD_INT 0
49850: PPUSH
49851: PPUSH
// if not units then
49852: LD_VAR 0 1
49856: NOT
49857: IFFALSE 49861
// exit ;
49859: GO 49951
// for i in units do
49861: LD_ADDR_VAR 0 4
49865: PUSH
49866: LD_VAR 0 1
49870: PUSH
49871: FOR_IN
49872: IFFALSE 49949
// if BuildingStatus ( b ) = bs_build then
49874: LD_VAR 0 2
49878: PPUSH
49879: CALL_OW 461
49883: PUSH
49884: LD_INT 1
49886: EQUAL
49887: IFFALSE 49947
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49889: LD_VAR 0 4
49893: PPUSH
49894: LD_STRING h
49896: PUSH
49897: LD_VAR 0 2
49901: PPUSH
49902: CALL_OW 250
49906: PUSH
49907: LD_VAR 0 2
49911: PPUSH
49912: CALL_OW 251
49916: PUSH
49917: LD_VAR 0 2
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: PUSH
49940: EMPTY
49941: LIST
49942: PPUSH
49943: CALL_OW 446
49947: GO 49871
49949: POP
49950: POP
// end ;
49951: LD_VAR 0 3
49955: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49956: LD_INT 0
49958: PPUSH
49959: PPUSH
49960: PPUSH
49961: PPUSH
49962: PPUSH
49963: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49964: LD_VAR 0 1
49968: NOT
49969: PUSH
49970: LD_VAR 0 1
49974: PPUSH
49975: CALL_OW 263
49979: PUSH
49980: LD_INT 2
49982: NONEQUAL
49983: OR
49984: IFFALSE 49988
// exit ;
49986: GO 50304
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49988: LD_ADDR_VAR 0 6
49992: PUSH
49993: LD_INT 22
49995: PUSH
49996: LD_VAR 0 1
50000: PPUSH
50001: CALL_OW 255
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 2
50012: PUSH
50013: LD_INT 30
50015: PUSH
50016: LD_INT 36
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 34
50025: PUSH
50026: LD_INT 31
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: LIST
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PPUSH
50042: CALL_OW 69
50046: ST_TO_ADDR
// if not tmp then
50047: LD_VAR 0 6
50051: NOT
50052: IFFALSE 50056
// exit ;
50054: GO 50304
// result := [ ] ;
50056: LD_ADDR_VAR 0 2
50060: PUSH
50061: EMPTY
50062: ST_TO_ADDR
// for i in tmp do
50063: LD_ADDR_VAR 0 3
50067: PUSH
50068: LD_VAR 0 6
50072: PUSH
50073: FOR_IN
50074: IFFALSE 50145
// begin t := UnitsInside ( i ) ;
50076: LD_ADDR_VAR 0 4
50080: PUSH
50081: LD_VAR 0 3
50085: PPUSH
50086: CALL_OW 313
50090: ST_TO_ADDR
// if t then
50091: LD_VAR 0 4
50095: IFFALSE 50143
// for j in t do
50097: LD_ADDR_VAR 0 7
50101: PUSH
50102: LD_VAR 0 4
50106: PUSH
50107: FOR_IN
50108: IFFALSE 50141
// result := Replace ( result , result + 1 , j ) ;
50110: LD_ADDR_VAR 0 2
50114: PUSH
50115: LD_VAR 0 2
50119: PPUSH
50120: LD_VAR 0 2
50124: PUSH
50125: LD_INT 1
50127: PLUS
50128: PPUSH
50129: LD_VAR 0 7
50133: PPUSH
50134: CALL_OW 1
50138: ST_TO_ADDR
50139: GO 50107
50141: POP
50142: POP
// end ;
50143: GO 50073
50145: POP
50146: POP
// if not result then
50147: LD_VAR 0 2
50151: NOT
50152: IFFALSE 50156
// exit ;
50154: GO 50304
// mech := result [ 1 ] ;
50156: LD_ADDR_VAR 0 5
50160: PUSH
50161: LD_VAR 0 2
50165: PUSH
50166: LD_INT 1
50168: ARRAY
50169: ST_TO_ADDR
// if result > 1 then
50170: LD_VAR 0 2
50174: PUSH
50175: LD_INT 1
50177: GREATER
50178: IFFALSE 50290
// begin for i = 2 to result do
50180: LD_ADDR_VAR 0 3
50184: PUSH
50185: DOUBLE
50186: LD_INT 2
50188: DEC
50189: ST_TO_ADDR
50190: LD_VAR 0 2
50194: PUSH
50195: FOR_TO
50196: IFFALSE 50288
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
50198: LD_ADDR_VAR 0 4
50202: PUSH
50203: LD_VAR 0 2
50207: PUSH
50208: LD_VAR 0 3
50212: ARRAY
50213: PPUSH
50214: LD_INT 3
50216: PPUSH
50217: CALL_OW 259
50221: PUSH
50222: LD_VAR 0 2
50226: PUSH
50227: LD_VAR 0 3
50231: ARRAY
50232: PPUSH
50233: CALL_OW 432
50237: MINUS
50238: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
50239: LD_VAR 0 4
50243: PUSH
50244: LD_VAR 0 5
50248: PPUSH
50249: LD_INT 3
50251: PPUSH
50252: CALL_OW 259
50256: PUSH
50257: LD_VAR 0 5
50261: PPUSH
50262: CALL_OW 432
50266: MINUS
50267: GREATEREQUAL
50268: IFFALSE 50286
// mech := result [ i ] ;
50270: LD_ADDR_VAR 0 5
50274: PUSH
50275: LD_VAR 0 2
50279: PUSH
50280: LD_VAR 0 3
50284: ARRAY
50285: ST_TO_ADDR
// end ;
50286: GO 50195
50288: POP
50289: POP
// end ; ComLinkTo ( vehicle , mech ) ;
50290: LD_VAR 0 1
50294: PPUSH
50295: LD_VAR 0 5
50299: PPUSH
50300: CALL_OW 135
// end ;
50304: LD_VAR 0 2
50308: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
50309: LD_INT 0
50311: PPUSH
50312: PPUSH
50313: PPUSH
50314: PPUSH
50315: PPUSH
50316: PPUSH
50317: PPUSH
50318: PPUSH
50319: PPUSH
50320: PPUSH
50321: PPUSH
50322: PPUSH
50323: PPUSH
// result := [ ] ;
50324: LD_ADDR_VAR 0 7
50328: PUSH
50329: EMPTY
50330: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
50331: LD_VAR 0 1
50335: PPUSH
50336: CALL_OW 266
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: LD_INT 1
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: IN
50351: NOT
50352: IFFALSE 50356
// exit ;
50354: GO 51990
// if name then
50356: LD_VAR 0 3
50360: IFFALSE 50376
// SetBName ( base_dep , name ) ;
50362: LD_VAR 0 1
50366: PPUSH
50367: LD_VAR 0 3
50371: PPUSH
50372: CALL_OW 500
// base := GetBase ( base_dep ) ;
50376: LD_ADDR_VAR 0 15
50380: PUSH
50381: LD_VAR 0 1
50385: PPUSH
50386: CALL_OW 274
50390: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50391: LD_ADDR_VAR 0 16
50395: PUSH
50396: LD_VAR 0 1
50400: PPUSH
50401: CALL_OW 255
50405: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50406: LD_ADDR_VAR 0 17
50410: PUSH
50411: LD_VAR 0 1
50415: PPUSH
50416: CALL_OW 248
50420: ST_TO_ADDR
// if sources then
50421: LD_VAR 0 5
50425: IFFALSE 50472
// for i = 1 to 3 do
50427: LD_ADDR_VAR 0 8
50431: PUSH
50432: DOUBLE
50433: LD_INT 1
50435: DEC
50436: ST_TO_ADDR
50437: LD_INT 3
50439: PUSH
50440: FOR_TO
50441: IFFALSE 50470
// AddResourceType ( base , i , sources [ i ] ) ;
50443: LD_VAR 0 15
50447: PPUSH
50448: LD_VAR 0 8
50452: PPUSH
50453: LD_VAR 0 5
50457: PUSH
50458: LD_VAR 0 8
50462: ARRAY
50463: PPUSH
50464: CALL_OW 276
50468: GO 50440
50470: POP
50471: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50472: LD_ADDR_VAR 0 18
50476: PUSH
50477: LD_VAR 0 15
50481: PPUSH
50482: LD_VAR 0 2
50486: PPUSH
50487: LD_INT 1
50489: PPUSH
50490: CALL 49733 0 3
50494: ST_TO_ADDR
// InitHc ;
50495: CALL_OW 19
// InitUc ;
50499: CALL_OW 18
// uc_side := side ;
50503: LD_ADDR_OWVAR 20
50507: PUSH
50508: LD_VAR 0 16
50512: ST_TO_ADDR
// uc_nation := nation ;
50513: LD_ADDR_OWVAR 21
50517: PUSH
50518: LD_VAR 0 17
50522: ST_TO_ADDR
// if buildings then
50523: LD_VAR 0 18
50527: IFFALSE 51849
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50529: LD_ADDR_VAR 0 19
50533: PUSH
50534: LD_VAR 0 18
50538: PPUSH
50539: LD_INT 2
50541: PUSH
50542: LD_INT 30
50544: PUSH
50545: LD_INT 29
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 30
50554: PUSH
50555: LD_INT 30
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: LIST
50566: PPUSH
50567: CALL_OW 72
50571: ST_TO_ADDR
// if tmp then
50572: LD_VAR 0 19
50576: IFFALSE 50624
// for i in tmp do
50578: LD_ADDR_VAR 0 8
50582: PUSH
50583: LD_VAR 0 19
50587: PUSH
50588: FOR_IN
50589: IFFALSE 50622
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50591: LD_VAR 0 8
50595: PPUSH
50596: CALL_OW 250
50600: PPUSH
50601: LD_VAR 0 8
50605: PPUSH
50606: CALL_OW 251
50610: PPUSH
50611: LD_VAR 0 16
50615: PPUSH
50616: CALL_OW 441
50620: GO 50588
50622: POP
50623: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50624: LD_VAR 0 18
50628: PPUSH
50629: LD_INT 2
50631: PUSH
50632: LD_INT 30
50634: PUSH
50635: LD_INT 32
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 30
50644: PUSH
50645: LD_INT 33
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: LIST
50656: PPUSH
50657: CALL_OW 72
50661: IFFALSE 50749
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50663: LD_ADDR_VAR 0 8
50667: PUSH
50668: LD_VAR 0 18
50672: PPUSH
50673: LD_INT 2
50675: PUSH
50676: LD_INT 30
50678: PUSH
50679: LD_INT 32
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 30
50688: PUSH
50689: LD_INT 33
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: LIST
50700: PPUSH
50701: CALL_OW 72
50705: PUSH
50706: FOR_IN
50707: IFFALSE 50747
// begin if not GetBWeapon ( i ) then
50709: LD_VAR 0 8
50713: PPUSH
50714: CALL_OW 269
50718: NOT
50719: IFFALSE 50745
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50721: LD_VAR 0 8
50725: PPUSH
50726: LD_VAR 0 8
50730: PPUSH
50731: LD_VAR 0 2
50735: PPUSH
50736: CALL 51995 0 2
50740: PPUSH
50741: CALL_OW 431
// end ;
50745: GO 50706
50747: POP
50748: POP
// end ; for i = 1 to personel do
50749: LD_ADDR_VAR 0 8
50753: PUSH
50754: DOUBLE
50755: LD_INT 1
50757: DEC
50758: ST_TO_ADDR
50759: LD_VAR 0 6
50763: PUSH
50764: FOR_TO
50765: IFFALSE 51829
// begin if i > 4 then
50767: LD_VAR 0 8
50771: PUSH
50772: LD_INT 4
50774: GREATER
50775: IFFALSE 50779
// break ;
50777: GO 51829
// case i of 1 :
50779: LD_VAR 0 8
50783: PUSH
50784: LD_INT 1
50786: DOUBLE
50787: EQUAL
50788: IFTRUE 50792
50790: GO 50872
50792: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50793: LD_ADDR_VAR 0 12
50797: PUSH
50798: LD_VAR 0 18
50802: PPUSH
50803: LD_INT 22
50805: PUSH
50806: LD_VAR 0 16
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 58
50817: PUSH
50818: EMPTY
50819: LIST
50820: PUSH
50821: LD_INT 2
50823: PUSH
50824: LD_INT 30
50826: PUSH
50827: LD_INT 32
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 30
50836: PUSH
50837: LD_INT 4
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 30
50846: PUSH
50847: LD_INT 5
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: LIST
50864: PPUSH
50865: CALL_OW 72
50869: ST_TO_ADDR
50870: GO 51094
50872: LD_INT 2
50874: DOUBLE
50875: EQUAL
50876: IFTRUE 50880
50878: GO 50942
50880: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50881: LD_ADDR_VAR 0 12
50885: PUSH
50886: LD_VAR 0 18
50890: PPUSH
50891: LD_INT 22
50893: PUSH
50894: LD_VAR 0 16
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 2
50905: PUSH
50906: LD_INT 30
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 30
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: LIST
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PPUSH
50935: CALL_OW 72
50939: ST_TO_ADDR
50940: GO 51094
50942: LD_INT 3
50944: DOUBLE
50945: EQUAL
50946: IFTRUE 50950
50948: GO 51012
50950: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50951: LD_ADDR_VAR 0 12
50955: PUSH
50956: LD_VAR 0 18
50960: PPUSH
50961: LD_INT 22
50963: PUSH
50964: LD_VAR 0 16
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 2
50975: PUSH
50976: LD_INT 30
50978: PUSH
50979: LD_INT 2
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 30
50988: PUSH
50989: LD_INT 3
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: LIST
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PPUSH
51005: CALL_OW 72
51009: ST_TO_ADDR
51010: GO 51094
51012: LD_INT 4
51014: DOUBLE
51015: EQUAL
51016: IFTRUE 51020
51018: GO 51093
51020: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
51021: LD_ADDR_VAR 0 12
51025: PUSH
51026: LD_VAR 0 18
51030: PPUSH
51031: LD_INT 22
51033: PUSH
51034: LD_VAR 0 16
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 2
51045: PUSH
51046: LD_INT 30
51048: PUSH
51049: LD_INT 6
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 30
51058: PUSH
51059: LD_INT 7
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 30
51068: PUSH
51069: LD_INT 8
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PPUSH
51086: CALL_OW 72
51090: ST_TO_ADDR
51091: GO 51094
51093: POP
// if i = 1 then
51094: LD_VAR 0 8
51098: PUSH
51099: LD_INT 1
51101: EQUAL
51102: IFFALSE 51213
// begin tmp := [ ] ;
51104: LD_ADDR_VAR 0 19
51108: PUSH
51109: EMPTY
51110: ST_TO_ADDR
// for j in f do
51111: LD_ADDR_VAR 0 9
51115: PUSH
51116: LD_VAR 0 12
51120: PUSH
51121: FOR_IN
51122: IFFALSE 51195
// if GetBType ( j ) = b_bunker then
51124: LD_VAR 0 9
51128: PPUSH
51129: CALL_OW 266
51133: PUSH
51134: LD_INT 32
51136: EQUAL
51137: IFFALSE 51164
// tmp := Insert ( tmp , 1 , j ) else
51139: LD_ADDR_VAR 0 19
51143: PUSH
51144: LD_VAR 0 19
51148: PPUSH
51149: LD_INT 1
51151: PPUSH
51152: LD_VAR 0 9
51156: PPUSH
51157: CALL_OW 2
51161: ST_TO_ADDR
51162: GO 51193
// tmp := Insert ( tmp , tmp + 1 , j ) ;
51164: LD_ADDR_VAR 0 19
51168: PUSH
51169: LD_VAR 0 19
51173: PPUSH
51174: LD_VAR 0 19
51178: PUSH
51179: LD_INT 1
51181: PLUS
51182: PPUSH
51183: LD_VAR 0 9
51187: PPUSH
51188: CALL_OW 2
51192: ST_TO_ADDR
51193: GO 51121
51195: POP
51196: POP
// if tmp then
51197: LD_VAR 0 19
51201: IFFALSE 51213
// f := tmp ;
51203: LD_ADDR_VAR 0 12
51207: PUSH
51208: LD_VAR 0 19
51212: ST_TO_ADDR
// end ; x := personel [ i ] ;
51213: LD_ADDR_VAR 0 13
51217: PUSH
51218: LD_VAR 0 6
51222: PUSH
51223: LD_VAR 0 8
51227: ARRAY
51228: ST_TO_ADDR
// if x = - 1 then
51229: LD_VAR 0 13
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: EQUAL
51238: IFFALSE 51447
// begin for j in f do
51240: LD_ADDR_VAR 0 9
51244: PUSH
51245: LD_VAR 0 12
51249: PUSH
51250: FOR_IN
51251: IFFALSE 51443
// repeat InitHc ;
51253: CALL_OW 19
// if GetBType ( j ) = b_barracks then
51257: LD_VAR 0 9
51261: PPUSH
51262: CALL_OW 266
51266: PUSH
51267: LD_INT 5
51269: EQUAL
51270: IFFALSE 51340
// begin if UnitsInside ( j ) < 3 then
51272: LD_VAR 0 9
51276: PPUSH
51277: CALL_OW 313
51281: PUSH
51282: LD_INT 3
51284: LESS
51285: IFFALSE 51321
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51287: LD_INT 0
51289: PPUSH
51290: LD_INT 5
51292: PUSH
51293: LD_INT 8
51295: PUSH
51296: LD_INT 9
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: LIST
51303: PUSH
51304: LD_VAR 0 17
51308: ARRAY
51309: PPUSH
51310: LD_VAR 0 4
51314: PPUSH
51315: CALL_OW 380
51319: GO 51338
// PrepareHuman ( false , i , skill ) ;
51321: LD_INT 0
51323: PPUSH
51324: LD_VAR 0 8
51328: PPUSH
51329: LD_VAR 0 4
51333: PPUSH
51334: CALL_OW 380
// end else
51338: GO 51357
// PrepareHuman ( false , i , skill ) ;
51340: LD_INT 0
51342: PPUSH
51343: LD_VAR 0 8
51347: PPUSH
51348: LD_VAR 0 4
51352: PPUSH
51353: CALL_OW 380
// un := CreateHuman ;
51357: LD_ADDR_VAR 0 14
51361: PUSH
51362: CALL_OW 44
51366: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51367: LD_ADDR_VAR 0 7
51371: PUSH
51372: LD_VAR 0 7
51376: PPUSH
51377: LD_INT 1
51379: PPUSH
51380: LD_VAR 0 14
51384: PPUSH
51385: CALL_OW 2
51389: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51390: LD_VAR 0 14
51394: PPUSH
51395: LD_VAR 0 9
51399: PPUSH
51400: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51404: LD_VAR 0 9
51408: PPUSH
51409: CALL_OW 313
51413: PUSH
51414: LD_INT 6
51416: EQUAL
51417: PUSH
51418: LD_VAR 0 9
51422: PPUSH
51423: CALL_OW 266
51427: PUSH
51428: LD_INT 32
51430: PUSH
51431: LD_INT 31
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: IN
51438: OR
51439: IFFALSE 51253
51441: GO 51250
51443: POP
51444: POP
// end else
51445: GO 51827
// for j = 1 to x do
51447: LD_ADDR_VAR 0 9
51451: PUSH
51452: DOUBLE
51453: LD_INT 1
51455: DEC
51456: ST_TO_ADDR
51457: LD_VAR 0 13
51461: PUSH
51462: FOR_TO
51463: IFFALSE 51825
// begin InitHc ;
51465: CALL_OW 19
// if not f then
51469: LD_VAR 0 12
51473: NOT
51474: IFFALSE 51563
// begin PrepareHuman ( false , i , skill ) ;
51476: LD_INT 0
51478: PPUSH
51479: LD_VAR 0 8
51483: PPUSH
51484: LD_VAR 0 4
51488: PPUSH
51489: CALL_OW 380
// un := CreateHuman ;
51493: LD_ADDR_VAR 0 14
51497: PUSH
51498: CALL_OW 44
51502: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51503: LD_ADDR_VAR 0 7
51507: PUSH
51508: LD_VAR 0 7
51512: PPUSH
51513: LD_INT 1
51515: PPUSH
51516: LD_VAR 0 14
51520: PPUSH
51521: CALL_OW 2
51525: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51526: LD_VAR 0 14
51530: PPUSH
51531: LD_VAR 0 1
51535: PPUSH
51536: CALL_OW 250
51540: PPUSH
51541: LD_VAR 0 1
51545: PPUSH
51546: CALL_OW 251
51550: PPUSH
51551: LD_INT 10
51553: PPUSH
51554: LD_INT 0
51556: PPUSH
51557: CALL_OW 50
// continue ;
51561: GO 51462
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51563: LD_VAR 0 12
51567: PUSH
51568: LD_INT 1
51570: ARRAY
51571: PPUSH
51572: CALL_OW 313
51576: PUSH
51577: LD_VAR 0 12
51581: PUSH
51582: LD_INT 1
51584: ARRAY
51585: PPUSH
51586: CALL_OW 266
51590: PUSH
51591: LD_INT 32
51593: PUSH
51594: LD_INT 31
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: IN
51601: AND
51602: PUSH
51603: LD_VAR 0 12
51607: PUSH
51608: LD_INT 1
51610: ARRAY
51611: PPUSH
51612: CALL_OW 313
51616: PUSH
51617: LD_INT 6
51619: EQUAL
51620: OR
51621: IFFALSE 51641
// f := Delete ( f , 1 ) ;
51623: LD_ADDR_VAR 0 12
51627: PUSH
51628: LD_VAR 0 12
51632: PPUSH
51633: LD_INT 1
51635: PPUSH
51636: CALL_OW 3
51640: ST_TO_ADDR
// if not f then
51641: LD_VAR 0 12
51645: NOT
51646: IFFALSE 51664
// begin x := x + 2 ;
51648: LD_ADDR_VAR 0 13
51652: PUSH
51653: LD_VAR 0 13
51657: PUSH
51658: LD_INT 2
51660: PLUS
51661: ST_TO_ADDR
// continue ;
51662: GO 51462
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51664: LD_VAR 0 12
51668: PUSH
51669: LD_INT 1
51671: ARRAY
51672: PPUSH
51673: CALL_OW 266
51677: PUSH
51678: LD_INT 5
51680: EQUAL
51681: IFFALSE 51755
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51683: LD_VAR 0 12
51687: PUSH
51688: LD_INT 1
51690: ARRAY
51691: PPUSH
51692: CALL_OW 313
51696: PUSH
51697: LD_INT 3
51699: LESS
51700: IFFALSE 51736
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51702: LD_INT 0
51704: PPUSH
51705: LD_INT 5
51707: PUSH
51708: LD_INT 8
51710: PUSH
51711: LD_INT 9
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: LIST
51718: PUSH
51719: LD_VAR 0 17
51723: ARRAY
51724: PPUSH
51725: LD_VAR 0 4
51729: PPUSH
51730: CALL_OW 380
51734: GO 51753
// PrepareHuman ( false , i , skill ) ;
51736: LD_INT 0
51738: PPUSH
51739: LD_VAR 0 8
51743: PPUSH
51744: LD_VAR 0 4
51748: PPUSH
51749: CALL_OW 380
// end else
51753: GO 51772
// PrepareHuman ( false , i , skill ) ;
51755: LD_INT 0
51757: PPUSH
51758: LD_VAR 0 8
51762: PPUSH
51763: LD_VAR 0 4
51767: PPUSH
51768: CALL_OW 380
// un := CreateHuman ;
51772: LD_ADDR_VAR 0 14
51776: PUSH
51777: CALL_OW 44
51781: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51782: LD_ADDR_VAR 0 7
51786: PUSH
51787: LD_VAR 0 7
51791: PPUSH
51792: LD_INT 1
51794: PPUSH
51795: LD_VAR 0 14
51799: PPUSH
51800: CALL_OW 2
51804: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51805: LD_VAR 0 14
51809: PPUSH
51810: LD_VAR 0 12
51814: PUSH
51815: LD_INT 1
51817: ARRAY
51818: PPUSH
51819: CALL_OW 52
// end ;
51823: GO 51462
51825: POP
51826: POP
// end ;
51827: GO 50764
51829: POP
51830: POP
// result := result ^ buildings ;
51831: LD_ADDR_VAR 0 7
51835: PUSH
51836: LD_VAR 0 7
51840: PUSH
51841: LD_VAR 0 18
51845: ADD
51846: ST_TO_ADDR
// end else
51847: GO 51990
// begin for i = 1 to personel do
51849: LD_ADDR_VAR 0 8
51853: PUSH
51854: DOUBLE
51855: LD_INT 1
51857: DEC
51858: ST_TO_ADDR
51859: LD_VAR 0 6
51863: PUSH
51864: FOR_TO
51865: IFFALSE 51988
// begin if i > 4 then
51867: LD_VAR 0 8
51871: PUSH
51872: LD_INT 4
51874: GREATER
51875: IFFALSE 51879
// break ;
51877: GO 51988
// x := personel [ i ] ;
51879: LD_ADDR_VAR 0 13
51883: PUSH
51884: LD_VAR 0 6
51888: PUSH
51889: LD_VAR 0 8
51893: ARRAY
51894: ST_TO_ADDR
// if x = - 1 then
51895: LD_VAR 0 13
51899: PUSH
51900: LD_INT 1
51902: NEG
51903: EQUAL
51904: IFFALSE 51908
// continue ;
51906: GO 51864
// PrepareHuman ( false , i , skill ) ;
51908: LD_INT 0
51910: PPUSH
51911: LD_VAR 0 8
51915: PPUSH
51916: LD_VAR 0 4
51920: PPUSH
51921: CALL_OW 380
// un := CreateHuman ;
51925: LD_ADDR_VAR 0 14
51929: PUSH
51930: CALL_OW 44
51934: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51935: LD_VAR 0 14
51939: PPUSH
51940: LD_VAR 0 1
51944: PPUSH
51945: CALL_OW 250
51949: PPUSH
51950: LD_VAR 0 1
51954: PPUSH
51955: CALL_OW 251
51959: PPUSH
51960: LD_INT 10
51962: PPUSH
51963: LD_INT 0
51965: PPUSH
51966: CALL_OW 50
// result := result ^ un ;
51970: LD_ADDR_VAR 0 7
51974: PUSH
51975: LD_VAR 0 7
51979: PUSH
51980: LD_VAR 0 14
51984: ADD
51985: ST_TO_ADDR
// end ;
51986: GO 51864
51988: POP
51989: POP
// end ; end ;
51990: LD_VAR 0 7
51994: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51995: LD_INT 0
51997: PPUSH
51998: PPUSH
51999: PPUSH
52000: PPUSH
52001: PPUSH
52002: PPUSH
52003: PPUSH
52004: PPUSH
52005: PPUSH
52006: PPUSH
52007: PPUSH
52008: PPUSH
52009: PPUSH
52010: PPUSH
52011: PPUSH
52012: PPUSH
// result := false ;
52013: LD_ADDR_VAR 0 3
52017: PUSH
52018: LD_INT 0
52020: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
52021: LD_VAR 0 1
52025: NOT
52026: PUSH
52027: LD_VAR 0 1
52031: PPUSH
52032: CALL_OW 266
52036: PUSH
52037: LD_INT 32
52039: PUSH
52040: LD_INT 33
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: IN
52047: NOT
52048: OR
52049: IFFALSE 52053
// exit ;
52051: GO 53162
// nat := GetNation ( tower ) ;
52053: LD_ADDR_VAR 0 12
52057: PUSH
52058: LD_VAR 0 1
52062: PPUSH
52063: CALL_OW 248
52067: ST_TO_ADDR
// side := GetSide ( tower ) ;
52068: LD_ADDR_VAR 0 16
52072: PUSH
52073: LD_VAR 0 1
52077: PPUSH
52078: CALL_OW 255
52082: ST_TO_ADDR
// x := GetX ( tower ) ;
52083: LD_ADDR_VAR 0 10
52087: PUSH
52088: LD_VAR 0 1
52092: PPUSH
52093: CALL_OW 250
52097: ST_TO_ADDR
// y := GetY ( tower ) ;
52098: LD_ADDR_VAR 0 11
52102: PUSH
52103: LD_VAR 0 1
52107: PPUSH
52108: CALL_OW 251
52112: ST_TO_ADDR
// if not x or not y then
52113: LD_VAR 0 10
52117: NOT
52118: PUSH
52119: LD_VAR 0 11
52123: NOT
52124: OR
52125: IFFALSE 52129
// exit ;
52127: GO 53162
// weapon := 0 ;
52129: LD_ADDR_VAR 0 18
52133: PUSH
52134: LD_INT 0
52136: ST_TO_ADDR
// fac_list := [ ] ;
52137: LD_ADDR_VAR 0 17
52141: PUSH
52142: EMPTY
52143: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
52144: LD_ADDR_VAR 0 6
52148: PUSH
52149: LD_VAR 0 1
52153: PPUSH
52154: CALL_OW 274
52158: PPUSH
52159: LD_VAR 0 2
52163: PPUSH
52164: LD_INT 0
52166: PPUSH
52167: CALL 49733 0 3
52171: PPUSH
52172: LD_INT 30
52174: PUSH
52175: LD_INT 3
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PPUSH
52182: CALL_OW 72
52186: ST_TO_ADDR
// if not factories then
52187: LD_VAR 0 6
52191: NOT
52192: IFFALSE 52196
// exit ;
52194: GO 53162
// for i in factories do
52196: LD_ADDR_VAR 0 8
52200: PUSH
52201: LD_VAR 0 6
52205: PUSH
52206: FOR_IN
52207: IFFALSE 52232
// fac_list := fac_list union AvailableWeaponList ( i ) ;
52209: LD_ADDR_VAR 0 17
52213: PUSH
52214: LD_VAR 0 17
52218: PUSH
52219: LD_VAR 0 8
52223: PPUSH
52224: CALL_OW 478
52228: UNION
52229: ST_TO_ADDR
52230: GO 52206
52232: POP
52233: POP
// if not fac_list then
52234: LD_VAR 0 17
52238: NOT
52239: IFFALSE 52243
// exit ;
52241: GO 53162
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
52243: LD_ADDR_VAR 0 5
52247: PUSH
52248: LD_INT 4
52250: PUSH
52251: LD_INT 5
52253: PUSH
52254: LD_INT 9
52256: PUSH
52257: LD_INT 10
52259: PUSH
52260: LD_INT 6
52262: PUSH
52263: LD_INT 7
52265: PUSH
52266: LD_INT 11
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 27
52280: PUSH
52281: LD_INT 28
52283: PUSH
52284: LD_INT 26
52286: PUSH
52287: LD_INT 30
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 43
52298: PUSH
52299: LD_INT 44
52301: PUSH
52302: LD_INT 46
52304: PUSH
52305: LD_INT 45
52307: PUSH
52308: LD_INT 47
52310: PUSH
52311: LD_INT 49
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: LIST
52326: PUSH
52327: LD_VAR 0 12
52331: ARRAY
52332: ST_TO_ADDR
// list := list isect fac_list ;
52333: LD_ADDR_VAR 0 5
52337: PUSH
52338: LD_VAR 0 5
52342: PUSH
52343: LD_VAR 0 17
52347: ISECT
52348: ST_TO_ADDR
// if not list then
52349: LD_VAR 0 5
52353: NOT
52354: IFFALSE 52358
// exit ;
52356: GO 53162
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
52358: LD_VAR 0 12
52362: PUSH
52363: LD_INT 3
52365: EQUAL
52366: PUSH
52367: LD_INT 49
52369: PUSH
52370: LD_VAR 0 5
52374: IN
52375: AND
52376: PUSH
52377: LD_INT 31
52379: PPUSH
52380: LD_VAR 0 16
52384: PPUSH
52385: CALL_OW 321
52389: PUSH
52390: LD_INT 2
52392: EQUAL
52393: AND
52394: IFFALSE 52454
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52396: LD_INT 22
52398: PUSH
52399: LD_VAR 0 16
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 35
52410: PUSH
52411: LD_INT 49
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 91
52420: PUSH
52421: LD_VAR 0 1
52425: PUSH
52426: LD_INT 10
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: LIST
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: LIST
52438: PPUSH
52439: CALL_OW 69
52443: NOT
52444: IFFALSE 52454
// weapon := ru_time_lapser ;
52446: LD_ADDR_VAR 0 18
52450: PUSH
52451: LD_INT 49
52453: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52454: LD_VAR 0 12
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: LD_INT 2
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: IN
52469: PUSH
52470: LD_INT 11
52472: PUSH
52473: LD_VAR 0 5
52477: IN
52478: PUSH
52479: LD_INT 30
52481: PUSH
52482: LD_VAR 0 5
52486: IN
52487: OR
52488: AND
52489: PUSH
52490: LD_INT 6
52492: PPUSH
52493: LD_VAR 0 16
52497: PPUSH
52498: CALL_OW 321
52502: PUSH
52503: LD_INT 2
52505: EQUAL
52506: AND
52507: IFFALSE 52672
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52509: LD_INT 22
52511: PUSH
52512: LD_VAR 0 16
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 2
52523: PUSH
52524: LD_INT 35
52526: PUSH
52527: LD_INT 11
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 35
52536: PUSH
52537: LD_INT 30
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 91
52551: PUSH
52552: LD_VAR 0 1
52556: PUSH
52557: LD_INT 18
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: LIST
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: LIST
52569: PPUSH
52570: CALL_OW 69
52574: NOT
52575: PUSH
52576: LD_INT 22
52578: PUSH
52579: LD_VAR 0 16
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 2
52590: PUSH
52591: LD_INT 30
52593: PUSH
52594: LD_INT 32
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 30
52603: PUSH
52604: LD_INT 33
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 91
52618: PUSH
52619: LD_VAR 0 1
52623: PUSH
52624: LD_INT 12
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: LIST
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: LIST
52636: PUSH
52637: EMPTY
52638: LIST
52639: PPUSH
52640: CALL_OW 69
52644: PUSH
52645: LD_INT 2
52647: GREATER
52648: AND
52649: IFFALSE 52672
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52651: LD_ADDR_VAR 0 18
52655: PUSH
52656: LD_INT 11
52658: PUSH
52659: LD_INT 30
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_VAR 0 12
52670: ARRAY
52671: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52672: LD_VAR 0 18
52676: NOT
52677: PUSH
52678: LD_INT 40
52680: PPUSH
52681: LD_VAR 0 16
52685: PPUSH
52686: CALL_OW 321
52690: PUSH
52691: LD_INT 2
52693: EQUAL
52694: AND
52695: PUSH
52696: LD_INT 7
52698: PUSH
52699: LD_VAR 0 5
52703: IN
52704: PUSH
52705: LD_INT 28
52707: PUSH
52708: LD_VAR 0 5
52712: IN
52713: OR
52714: PUSH
52715: LD_INT 45
52717: PUSH
52718: LD_VAR 0 5
52722: IN
52723: OR
52724: AND
52725: IFFALSE 52979
// begin hex := GetHexInfo ( x , y ) ;
52727: LD_ADDR_VAR 0 4
52731: PUSH
52732: LD_VAR 0 10
52736: PPUSH
52737: LD_VAR 0 11
52741: PPUSH
52742: CALL_OW 546
52746: ST_TO_ADDR
// if hex [ 1 ] then
52747: LD_VAR 0 4
52751: PUSH
52752: LD_INT 1
52754: ARRAY
52755: IFFALSE 52759
// exit ;
52757: GO 53162
// height := hex [ 2 ] ;
52759: LD_ADDR_VAR 0 15
52763: PUSH
52764: LD_VAR 0 4
52768: PUSH
52769: LD_INT 2
52771: ARRAY
52772: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52773: LD_ADDR_VAR 0 14
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: LD_INT 2
52783: PUSH
52784: LD_INT 3
52786: PUSH
52787: LD_INT 5
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: ST_TO_ADDR
// for i in tmp do
52796: LD_ADDR_VAR 0 8
52800: PUSH
52801: LD_VAR 0 14
52805: PUSH
52806: FOR_IN
52807: IFFALSE 52977
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52809: LD_ADDR_VAR 0 9
52813: PUSH
52814: LD_VAR 0 10
52818: PPUSH
52819: LD_VAR 0 8
52823: PPUSH
52824: LD_INT 5
52826: PPUSH
52827: CALL_OW 272
52831: PUSH
52832: LD_VAR 0 11
52836: PPUSH
52837: LD_VAR 0 8
52841: PPUSH
52842: LD_INT 5
52844: PPUSH
52845: CALL_OW 273
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52854: LD_VAR 0 9
52858: PUSH
52859: LD_INT 1
52861: ARRAY
52862: PPUSH
52863: LD_VAR 0 9
52867: PUSH
52868: LD_INT 2
52870: ARRAY
52871: PPUSH
52872: CALL_OW 488
52876: IFFALSE 52975
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52878: LD_ADDR_VAR 0 4
52882: PUSH
52883: LD_VAR 0 9
52887: PUSH
52888: LD_INT 1
52890: ARRAY
52891: PPUSH
52892: LD_VAR 0 9
52896: PUSH
52897: LD_INT 2
52899: ARRAY
52900: PPUSH
52901: CALL_OW 546
52905: ST_TO_ADDR
// if hex [ 1 ] then
52906: LD_VAR 0 4
52910: PUSH
52911: LD_INT 1
52913: ARRAY
52914: IFFALSE 52918
// continue ;
52916: GO 52806
// h := hex [ 2 ] ;
52918: LD_ADDR_VAR 0 13
52922: PUSH
52923: LD_VAR 0 4
52927: PUSH
52928: LD_INT 2
52930: ARRAY
52931: ST_TO_ADDR
// if h + 7 < height then
52932: LD_VAR 0 13
52936: PUSH
52937: LD_INT 7
52939: PLUS
52940: PUSH
52941: LD_VAR 0 15
52945: LESS
52946: IFFALSE 52975
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52948: LD_ADDR_VAR 0 18
52952: PUSH
52953: LD_INT 7
52955: PUSH
52956: LD_INT 28
52958: PUSH
52959: LD_INT 45
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: LIST
52966: PUSH
52967: LD_VAR 0 12
52971: ARRAY
52972: ST_TO_ADDR
// break ;
52973: GO 52977
// end ; end ; end ;
52975: GO 52806
52977: POP
52978: POP
// end ; if not weapon then
52979: LD_VAR 0 18
52983: NOT
52984: IFFALSE 53044
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52986: LD_ADDR_VAR 0 5
52990: PUSH
52991: LD_VAR 0 5
52995: PUSH
52996: LD_INT 11
52998: PUSH
52999: LD_INT 30
53001: PUSH
53002: LD_INT 49
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: LIST
53009: DIFF
53010: ST_TO_ADDR
// if not list then
53011: LD_VAR 0 5
53015: NOT
53016: IFFALSE 53020
// exit ;
53018: GO 53162
// weapon := list [ rand ( 1 , list ) ] ;
53020: LD_ADDR_VAR 0 18
53024: PUSH
53025: LD_VAR 0 5
53029: PUSH
53030: LD_INT 1
53032: PPUSH
53033: LD_VAR 0 5
53037: PPUSH
53038: CALL_OW 12
53042: ARRAY
53043: ST_TO_ADDR
// end ; if weapon then
53044: LD_VAR 0 18
53048: IFFALSE 53162
// begin tmp := CostOfWeapon ( weapon ) ;
53050: LD_ADDR_VAR 0 14
53054: PUSH
53055: LD_VAR 0 18
53059: PPUSH
53060: CALL_OW 451
53064: ST_TO_ADDR
// j := GetBase ( tower ) ;
53065: LD_ADDR_VAR 0 9
53069: PUSH
53070: LD_VAR 0 1
53074: PPUSH
53075: CALL_OW 274
53079: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
53080: LD_VAR 0 9
53084: PPUSH
53085: LD_INT 1
53087: PPUSH
53088: CALL_OW 275
53092: PUSH
53093: LD_VAR 0 14
53097: PUSH
53098: LD_INT 1
53100: ARRAY
53101: GREATEREQUAL
53102: PUSH
53103: LD_VAR 0 9
53107: PPUSH
53108: LD_INT 2
53110: PPUSH
53111: CALL_OW 275
53115: PUSH
53116: LD_VAR 0 14
53120: PUSH
53121: LD_INT 2
53123: ARRAY
53124: GREATEREQUAL
53125: AND
53126: PUSH
53127: LD_VAR 0 9
53131: PPUSH
53132: LD_INT 3
53134: PPUSH
53135: CALL_OW 275
53139: PUSH
53140: LD_VAR 0 14
53144: PUSH
53145: LD_INT 3
53147: ARRAY
53148: GREATEREQUAL
53149: AND
53150: IFFALSE 53162
// result := weapon ;
53152: LD_ADDR_VAR 0 3
53156: PUSH
53157: LD_VAR 0 18
53161: ST_TO_ADDR
// end ; end ;
53162: LD_VAR 0 3
53166: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
53167: LD_INT 0
53169: PPUSH
53170: PPUSH
// result := true ;
53171: LD_ADDR_VAR 0 3
53175: PUSH
53176: LD_INT 1
53178: ST_TO_ADDR
// if array1 = array2 then
53179: LD_VAR 0 1
53183: PUSH
53184: LD_VAR 0 2
53188: EQUAL
53189: IFFALSE 53249
// begin for i = 1 to array1 do
53191: LD_ADDR_VAR 0 4
53195: PUSH
53196: DOUBLE
53197: LD_INT 1
53199: DEC
53200: ST_TO_ADDR
53201: LD_VAR 0 1
53205: PUSH
53206: FOR_TO
53207: IFFALSE 53245
// if array1 [ i ] <> array2 [ i ] then
53209: LD_VAR 0 1
53213: PUSH
53214: LD_VAR 0 4
53218: ARRAY
53219: PUSH
53220: LD_VAR 0 2
53224: PUSH
53225: LD_VAR 0 4
53229: ARRAY
53230: NONEQUAL
53231: IFFALSE 53243
// begin result := false ;
53233: LD_ADDR_VAR 0 3
53237: PUSH
53238: LD_INT 0
53240: ST_TO_ADDR
// break ;
53241: GO 53245
// end ;
53243: GO 53206
53245: POP
53246: POP
// end else
53247: GO 53257
// result := false ;
53249: LD_ADDR_VAR 0 3
53253: PUSH
53254: LD_INT 0
53256: ST_TO_ADDR
// end ;
53257: LD_VAR 0 3
53261: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
53262: LD_INT 0
53264: PPUSH
53265: PPUSH
// if not array1 or not array2 then
53266: LD_VAR 0 1
53270: NOT
53271: PUSH
53272: LD_VAR 0 2
53276: NOT
53277: OR
53278: IFFALSE 53282
// exit ;
53280: GO 53346
// result := true ;
53282: LD_ADDR_VAR 0 3
53286: PUSH
53287: LD_INT 1
53289: ST_TO_ADDR
// for i = 1 to array1 do
53290: LD_ADDR_VAR 0 4
53294: PUSH
53295: DOUBLE
53296: LD_INT 1
53298: DEC
53299: ST_TO_ADDR
53300: LD_VAR 0 1
53304: PUSH
53305: FOR_TO
53306: IFFALSE 53344
// if array1 [ i ] <> array2 [ i ] then
53308: LD_VAR 0 1
53312: PUSH
53313: LD_VAR 0 4
53317: ARRAY
53318: PUSH
53319: LD_VAR 0 2
53323: PUSH
53324: LD_VAR 0 4
53328: ARRAY
53329: NONEQUAL
53330: IFFALSE 53342
// begin result := false ;
53332: LD_ADDR_VAR 0 3
53336: PUSH
53337: LD_INT 0
53339: ST_TO_ADDR
// break ;
53340: GO 53344
// end ;
53342: GO 53305
53344: POP
53345: POP
// end ;
53346: LD_VAR 0 3
53350: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
53351: LD_INT 0
53353: PPUSH
53354: PPUSH
53355: PPUSH
// pom := GetBase ( fac ) ;
53356: LD_ADDR_VAR 0 5
53360: PUSH
53361: LD_VAR 0 1
53365: PPUSH
53366: CALL_OW 274
53370: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
53371: LD_ADDR_VAR 0 4
53375: PUSH
53376: LD_VAR 0 2
53380: PUSH
53381: LD_INT 1
53383: ARRAY
53384: PPUSH
53385: LD_VAR 0 2
53389: PUSH
53390: LD_INT 2
53392: ARRAY
53393: PPUSH
53394: LD_VAR 0 2
53398: PUSH
53399: LD_INT 3
53401: ARRAY
53402: PPUSH
53403: LD_VAR 0 2
53407: PUSH
53408: LD_INT 4
53410: ARRAY
53411: PPUSH
53412: CALL_OW 449
53416: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53417: LD_ADDR_VAR 0 3
53421: PUSH
53422: LD_VAR 0 5
53426: PPUSH
53427: LD_INT 1
53429: PPUSH
53430: CALL_OW 275
53434: PUSH
53435: LD_VAR 0 4
53439: PUSH
53440: LD_INT 1
53442: ARRAY
53443: GREATEREQUAL
53444: PUSH
53445: LD_VAR 0 5
53449: PPUSH
53450: LD_INT 2
53452: PPUSH
53453: CALL_OW 275
53457: PUSH
53458: LD_VAR 0 4
53462: PUSH
53463: LD_INT 2
53465: ARRAY
53466: GREATEREQUAL
53467: AND
53468: PUSH
53469: LD_VAR 0 5
53473: PPUSH
53474: LD_INT 3
53476: PPUSH
53477: CALL_OW 275
53481: PUSH
53482: LD_VAR 0 4
53486: PUSH
53487: LD_INT 3
53489: ARRAY
53490: GREATEREQUAL
53491: AND
53492: ST_TO_ADDR
// end ;
53493: LD_VAR 0 3
53497: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53498: LD_INT 0
53500: PPUSH
53501: PPUSH
53502: PPUSH
53503: PPUSH
// pom := GetBase ( building ) ;
53504: LD_ADDR_VAR 0 3
53508: PUSH
53509: LD_VAR 0 1
53513: PPUSH
53514: CALL_OW 274
53518: ST_TO_ADDR
// if not pom then
53519: LD_VAR 0 3
53523: NOT
53524: IFFALSE 53528
// exit ;
53526: GO 53698
// btype := GetBType ( building ) ;
53528: LD_ADDR_VAR 0 5
53532: PUSH
53533: LD_VAR 0 1
53537: PPUSH
53538: CALL_OW 266
53542: ST_TO_ADDR
// if btype = b_armoury then
53543: LD_VAR 0 5
53547: PUSH
53548: LD_INT 4
53550: EQUAL
53551: IFFALSE 53561
// btype := b_barracks ;
53553: LD_ADDR_VAR 0 5
53557: PUSH
53558: LD_INT 5
53560: ST_TO_ADDR
// if btype = b_depot then
53561: LD_VAR 0 5
53565: PUSH
53566: LD_INT 0
53568: EQUAL
53569: IFFALSE 53579
// btype := b_warehouse ;
53571: LD_ADDR_VAR 0 5
53575: PUSH
53576: LD_INT 1
53578: ST_TO_ADDR
// if btype = b_workshop then
53579: LD_VAR 0 5
53583: PUSH
53584: LD_INT 2
53586: EQUAL
53587: IFFALSE 53597
// btype := b_factory ;
53589: LD_ADDR_VAR 0 5
53593: PUSH
53594: LD_INT 3
53596: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53597: LD_ADDR_VAR 0 4
53601: PUSH
53602: LD_VAR 0 5
53606: PPUSH
53607: LD_VAR 0 1
53611: PPUSH
53612: CALL_OW 248
53616: PPUSH
53617: CALL_OW 450
53621: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53622: LD_ADDR_VAR 0 2
53626: PUSH
53627: LD_VAR 0 3
53631: PPUSH
53632: LD_INT 1
53634: PPUSH
53635: CALL_OW 275
53639: PUSH
53640: LD_VAR 0 4
53644: PUSH
53645: LD_INT 1
53647: ARRAY
53648: GREATEREQUAL
53649: PUSH
53650: LD_VAR 0 3
53654: PPUSH
53655: LD_INT 2
53657: PPUSH
53658: CALL_OW 275
53662: PUSH
53663: LD_VAR 0 4
53667: PUSH
53668: LD_INT 2
53670: ARRAY
53671: GREATEREQUAL
53672: AND
53673: PUSH
53674: LD_VAR 0 3
53678: PPUSH
53679: LD_INT 3
53681: PPUSH
53682: CALL_OW 275
53686: PUSH
53687: LD_VAR 0 4
53691: PUSH
53692: LD_INT 3
53694: ARRAY
53695: GREATEREQUAL
53696: AND
53697: ST_TO_ADDR
// end ;
53698: LD_VAR 0 2
53702: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53703: LD_INT 0
53705: PPUSH
53706: PPUSH
53707: PPUSH
// pom := GetBase ( building ) ;
53708: LD_ADDR_VAR 0 4
53712: PUSH
53713: LD_VAR 0 1
53717: PPUSH
53718: CALL_OW 274
53722: ST_TO_ADDR
// if not pom then
53723: LD_VAR 0 4
53727: NOT
53728: IFFALSE 53732
// exit ;
53730: GO 53833
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53732: LD_ADDR_VAR 0 5
53736: PUSH
53737: LD_VAR 0 2
53741: PPUSH
53742: LD_VAR 0 1
53746: PPUSH
53747: CALL_OW 248
53751: PPUSH
53752: CALL_OW 450
53756: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53757: LD_ADDR_VAR 0 3
53761: PUSH
53762: LD_VAR 0 4
53766: PPUSH
53767: LD_INT 1
53769: PPUSH
53770: CALL_OW 275
53774: PUSH
53775: LD_VAR 0 5
53779: PUSH
53780: LD_INT 1
53782: ARRAY
53783: GREATEREQUAL
53784: PUSH
53785: LD_VAR 0 4
53789: PPUSH
53790: LD_INT 2
53792: PPUSH
53793: CALL_OW 275
53797: PUSH
53798: LD_VAR 0 5
53802: PUSH
53803: LD_INT 2
53805: ARRAY
53806: GREATEREQUAL
53807: AND
53808: PUSH
53809: LD_VAR 0 4
53813: PPUSH
53814: LD_INT 3
53816: PPUSH
53817: CALL_OW 275
53821: PUSH
53822: LD_VAR 0 5
53826: PUSH
53827: LD_INT 3
53829: ARRAY
53830: GREATEREQUAL
53831: AND
53832: ST_TO_ADDR
// end ;
53833: LD_VAR 0 3
53837: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53838: LD_INT 0
53840: PPUSH
53841: PPUSH
53842: PPUSH
53843: PPUSH
53844: PPUSH
53845: PPUSH
53846: PPUSH
53847: PPUSH
53848: PPUSH
53849: PPUSH
53850: PPUSH
// result := false ;
53851: LD_ADDR_VAR 0 8
53855: PUSH
53856: LD_INT 0
53858: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53859: LD_VAR 0 5
53863: NOT
53864: PUSH
53865: LD_VAR 0 1
53869: NOT
53870: OR
53871: PUSH
53872: LD_VAR 0 2
53876: NOT
53877: OR
53878: PUSH
53879: LD_VAR 0 3
53883: NOT
53884: OR
53885: IFFALSE 53889
// exit ;
53887: GO 54703
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53889: LD_ADDR_VAR 0 14
53893: PUSH
53894: LD_VAR 0 1
53898: PPUSH
53899: LD_VAR 0 2
53903: PPUSH
53904: LD_VAR 0 3
53908: PPUSH
53909: LD_VAR 0 4
53913: PPUSH
53914: LD_VAR 0 5
53918: PUSH
53919: LD_INT 1
53921: ARRAY
53922: PPUSH
53923: CALL_OW 248
53927: PPUSH
53928: LD_INT 0
53930: PPUSH
53931: CALL 55940 0 6
53935: ST_TO_ADDR
// if not hexes then
53936: LD_VAR 0 14
53940: NOT
53941: IFFALSE 53945
// exit ;
53943: GO 54703
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53945: LD_ADDR_VAR 0 17
53949: PUSH
53950: LD_VAR 0 5
53954: PPUSH
53955: LD_INT 22
53957: PUSH
53958: LD_VAR 0 13
53962: PPUSH
53963: CALL_OW 255
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 2
53974: PUSH
53975: LD_INT 30
53977: PUSH
53978: LD_INT 0
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 30
53987: PUSH
53988: LD_INT 1
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: LIST
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PPUSH
54004: CALL_OW 72
54008: ST_TO_ADDR
// for i = 1 to hexes do
54009: LD_ADDR_VAR 0 9
54013: PUSH
54014: DOUBLE
54015: LD_INT 1
54017: DEC
54018: ST_TO_ADDR
54019: LD_VAR 0 14
54023: PUSH
54024: FOR_TO
54025: IFFALSE 54701
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54027: LD_ADDR_VAR 0 13
54031: PUSH
54032: LD_VAR 0 14
54036: PUSH
54037: LD_VAR 0 9
54041: ARRAY
54042: PUSH
54043: LD_INT 1
54045: ARRAY
54046: PPUSH
54047: LD_VAR 0 14
54051: PUSH
54052: LD_VAR 0 9
54056: ARRAY
54057: PUSH
54058: LD_INT 2
54060: ARRAY
54061: PPUSH
54062: CALL_OW 428
54066: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
54067: LD_VAR 0 14
54071: PUSH
54072: LD_VAR 0 9
54076: ARRAY
54077: PUSH
54078: LD_INT 1
54080: ARRAY
54081: PPUSH
54082: LD_VAR 0 14
54086: PUSH
54087: LD_VAR 0 9
54091: ARRAY
54092: PUSH
54093: LD_INT 2
54095: ARRAY
54096: PPUSH
54097: CALL_OW 351
54101: PUSH
54102: LD_VAR 0 14
54106: PUSH
54107: LD_VAR 0 9
54111: ARRAY
54112: PUSH
54113: LD_INT 1
54115: ARRAY
54116: PPUSH
54117: LD_VAR 0 14
54121: PUSH
54122: LD_VAR 0 9
54126: ARRAY
54127: PUSH
54128: LD_INT 2
54130: ARRAY
54131: PPUSH
54132: CALL_OW 488
54136: NOT
54137: OR
54138: PUSH
54139: LD_VAR 0 13
54143: PPUSH
54144: CALL_OW 247
54148: PUSH
54149: LD_INT 3
54151: EQUAL
54152: OR
54153: IFFALSE 54159
// exit ;
54155: POP
54156: POP
54157: GO 54703
// if not tmp then
54159: LD_VAR 0 13
54163: NOT
54164: IFFALSE 54168
// continue ;
54166: GO 54024
// result := true ;
54168: LD_ADDR_VAR 0 8
54172: PUSH
54173: LD_INT 1
54175: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
54176: LD_VAR 0 6
54180: PUSH
54181: LD_VAR 0 13
54185: PPUSH
54186: CALL_OW 247
54190: PUSH
54191: LD_INT 2
54193: EQUAL
54194: AND
54195: PUSH
54196: LD_VAR 0 13
54200: PPUSH
54201: CALL_OW 263
54205: PUSH
54206: LD_INT 1
54208: EQUAL
54209: AND
54210: IFFALSE 54374
// begin if IsDrivenBy ( tmp ) then
54212: LD_VAR 0 13
54216: PPUSH
54217: CALL_OW 311
54221: IFFALSE 54225
// continue ;
54223: GO 54024
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
54225: LD_VAR 0 6
54229: PPUSH
54230: LD_INT 3
54232: PUSH
54233: LD_INT 60
54235: PUSH
54236: EMPTY
54237: LIST
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 3
54245: PUSH
54246: LD_INT 55
54248: PUSH
54249: EMPTY
54250: LIST
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PPUSH
54260: CALL_OW 72
54264: IFFALSE 54372
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
54266: LD_ADDR_VAR 0 18
54270: PUSH
54271: LD_VAR 0 6
54275: PPUSH
54276: LD_INT 3
54278: PUSH
54279: LD_INT 60
54281: PUSH
54282: EMPTY
54283: LIST
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 3
54291: PUSH
54292: LD_INT 55
54294: PUSH
54295: EMPTY
54296: LIST
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PPUSH
54306: CALL_OW 72
54310: PUSH
54311: LD_INT 1
54313: ARRAY
54314: ST_TO_ADDR
// if IsInUnit ( driver ) then
54315: LD_VAR 0 18
54319: PPUSH
54320: CALL_OW 310
54324: IFFALSE 54335
// ComExit ( driver ) ;
54326: LD_VAR 0 18
54330: PPUSH
54331: CALL 79124 0 1
// AddComEnterUnit ( driver , tmp ) ;
54335: LD_VAR 0 18
54339: PPUSH
54340: LD_VAR 0 13
54344: PPUSH
54345: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
54349: LD_VAR 0 18
54353: PPUSH
54354: LD_VAR 0 7
54358: PPUSH
54359: CALL_OW 173
// AddComExitVehicle ( driver ) ;
54363: LD_VAR 0 18
54367: PPUSH
54368: CALL_OW 181
// end ; continue ;
54372: GO 54024
// end ; if not cleaners or not tmp in cleaners then
54374: LD_VAR 0 6
54378: NOT
54379: PUSH
54380: LD_VAR 0 13
54384: PUSH
54385: LD_VAR 0 6
54389: IN
54390: NOT
54391: OR
54392: IFFALSE 54699
// begin if dep then
54394: LD_VAR 0 17
54398: IFFALSE 54534
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54400: LD_ADDR_VAR 0 16
54404: PUSH
54405: LD_VAR 0 17
54409: PUSH
54410: LD_INT 1
54412: ARRAY
54413: PPUSH
54414: CALL_OW 250
54418: PPUSH
54419: LD_VAR 0 17
54423: PUSH
54424: LD_INT 1
54426: ARRAY
54427: PPUSH
54428: CALL_OW 254
54432: PPUSH
54433: LD_INT 5
54435: PPUSH
54436: CALL_OW 272
54440: PUSH
54441: LD_VAR 0 17
54445: PUSH
54446: LD_INT 1
54448: ARRAY
54449: PPUSH
54450: CALL_OW 251
54454: PPUSH
54455: LD_VAR 0 17
54459: PUSH
54460: LD_INT 1
54462: ARRAY
54463: PPUSH
54464: CALL_OW 254
54468: PPUSH
54469: LD_INT 5
54471: PPUSH
54472: CALL_OW 273
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54481: LD_VAR 0 16
54485: PUSH
54486: LD_INT 1
54488: ARRAY
54489: PPUSH
54490: LD_VAR 0 16
54494: PUSH
54495: LD_INT 2
54497: ARRAY
54498: PPUSH
54499: CALL_OW 488
54503: IFFALSE 54534
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54505: LD_VAR 0 13
54509: PPUSH
54510: LD_VAR 0 16
54514: PUSH
54515: LD_INT 1
54517: ARRAY
54518: PPUSH
54519: LD_VAR 0 16
54523: PUSH
54524: LD_INT 2
54526: ARRAY
54527: PPUSH
54528: CALL_OW 111
// continue ;
54532: GO 54024
// end ; end ; r := GetDir ( tmp ) ;
54534: LD_ADDR_VAR 0 15
54538: PUSH
54539: LD_VAR 0 13
54543: PPUSH
54544: CALL_OW 254
54548: ST_TO_ADDR
// if r = 5 then
54549: LD_VAR 0 15
54553: PUSH
54554: LD_INT 5
54556: EQUAL
54557: IFFALSE 54567
// r := 0 ;
54559: LD_ADDR_VAR 0 15
54563: PUSH
54564: LD_INT 0
54566: ST_TO_ADDR
// for j = r to 5 do
54567: LD_ADDR_VAR 0 10
54571: PUSH
54572: DOUBLE
54573: LD_VAR 0 15
54577: DEC
54578: ST_TO_ADDR
54579: LD_INT 5
54581: PUSH
54582: FOR_TO
54583: IFFALSE 54697
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54585: LD_ADDR_VAR 0 11
54589: PUSH
54590: LD_VAR 0 13
54594: PPUSH
54595: CALL_OW 250
54599: PPUSH
54600: LD_VAR 0 10
54604: PPUSH
54605: LD_INT 2
54607: PPUSH
54608: CALL_OW 272
54612: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54613: LD_ADDR_VAR 0 12
54617: PUSH
54618: LD_VAR 0 13
54622: PPUSH
54623: CALL_OW 251
54627: PPUSH
54628: LD_VAR 0 10
54632: PPUSH
54633: LD_INT 2
54635: PPUSH
54636: CALL_OW 273
54640: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54641: LD_VAR 0 11
54645: PPUSH
54646: LD_VAR 0 12
54650: PPUSH
54651: CALL_OW 488
54655: PUSH
54656: LD_VAR 0 11
54660: PPUSH
54661: LD_VAR 0 12
54665: PPUSH
54666: CALL_OW 428
54670: NOT
54671: AND
54672: IFFALSE 54695
// begin ComMoveXY ( tmp , _x , _y ) ;
54674: LD_VAR 0 13
54678: PPUSH
54679: LD_VAR 0 11
54683: PPUSH
54684: LD_VAR 0 12
54688: PPUSH
54689: CALL_OW 111
// break ;
54693: GO 54697
// end ; end ;
54695: GO 54582
54697: POP
54698: POP
// end ; end ;
54699: GO 54024
54701: POP
54702: POP
// end ;
54703: LD_VAR 0 8
54707: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54708: LD_INT 0
54710: PPUSH
// result := true ;
54711: LD_ADDR_VAR 0 3
54715: PUSH
54716: LD_INT 1
54718: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54719: LD_VAR 0 2
54723: PUSH
54724: LD_INT 24
54726: DOUBLE
54727: EQUAL
54728: IFTRUE 54738
54730: LD_INT 33
54732: DOUBLE
54733: EQUAL
54734: IFTRUE 54738
54736: GO 54763
54738: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54739: LD_ADDR_VAR 0 3
54743: PUSH
54744: LD_INT 32
54746: PPUSH
54747: LD_VAR 0 1
54751: PPUSH
54752: CALL_OW 321
54756: PUSH
54757: LD_INT 2
54759: EQUAL
54760: ST_TO_ADDR
54761: GO 55083
54763: LD_INT 20
54765: DOUBLE
54766: EQUAL
54767: IFTRUE 54771
54769: GO 54796
54771: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54772: LD_ADDR_VAR 0 3
54776: PUSH
54777: LD_INT 6
54779: PPUSH
54780: LD_VAR 0 1
54784: PPUSH
54785: CALL_OW 321
54789: PUSH
54790: LD_INT 2
54792: EQUAL
54793: ST_TO_ADDR
54794: GO 55083
54796: LD_INT 22
54798: DOUBLE
54799: EQUAL
54800: IFTRUE 54810
54802: LD_INT 36
54804: DOUBLE
54805: EQUAL
54806: IFTRUE 54810
54808: GO 54835
54810: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54811: LD_ADDR_VAR 0 3
54815: PUSH
54816: LD_INT 15
54818: PPUSH
54819: LD_VAR 0 1
54823: PPUSH
54824: CALL_OW 321
54828: PUSH
54829: LD_INT 2
54831: EQUAL
54832: ST_TO_ADDR
54833: GO 55083
54835: LD_INT 30
54837: DOUBLE
54838: EQUAL
54839: IFTRUE 54843
54841: GO 54868
54843: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54844: LD_ADDR_VAR 0 3
54848: PUSH
54849: LD_INT 20
54851: PPUSH
54852: LD_VAR 0 1
54856: PPUSH
54857: CALL_OW 321
54861: PUSH
54862: LD_INT 2
54864: EQUAL
54865: ST_TO_ADDR
54866: GO 55083
54868: LD_INT 28
54870: DOUBLE
54871: EQUAL
54872: IFTRUE 54882
54874: LD_INT 21
54876: DOUBLE
54877: EQUAL
54878: IFTRUE 54882
54880: GO 54907
54882: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54883: LD_ADDR_VAR 0 3
54887: PUSH
54888: LD_INT 21
54890: PPUSH
54891: LD_VAR 0 1
54895: PPUSH
54896: CALL_OW 321
54900: PUSH
54901: LD_INT 2
54903: EQUAL
54904: ST_TO_ADDR
54905: GO 55083
54907: LD_INT 16
54909: DOUBLE
54910: EQUAL
54911: IFTRUE 54915
54913: GO 54942
54915: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54916: LD_ADDR_VAR 0 3
54920: PUSH
54921: LD_EXP 77
54925: PPUSH
54926: LD_VAR 0 1
54930: PPUSH
54931: CALL_OW 321
54935: PUSH
54936: LD_INT 2
54938: EQUAL
54939: ST_TO_ADDR
54940: GO 55083
54942: LD_INT 19
54944: DOUBLE
54945: EQUAL
54946: IFTRUE 54956
54948: LD_INT 23
54950: DOUBLE
54951: EQUAL
54952: IFTRUE 54956
54954: GO 54983
54956: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54957: LD_ADDR_VAR 0 3
54961: PUSH
54962: LD_EXP 76
54966: PPUSH
54967: LD_VAR 0 1
54971: PPUSH
54972: CALL_OW 321
54976: PUSH
54977: LD_INT 2
54979: EQUAL
54980: ST_TO_ADDR
54981: GO 55083
54983: LD_INT 17
54985: DOUBLE
54986: EQUAL
54987: IFTRUE 54991
54989: GO 55016
54991: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54992: LD_ADDR_VAR 0 3
54996: PUSH
54997: LD_INT 39
54999: PPUSH
55000: LD_VAR 0 1
55004: PPUSH
55005: CALL_OW 321
55009: PUSH
55010: LD_INT 2
55012: EQUAL
55013: ST_TO_ADDR
55014: GO 55083
55016: LD_INT 18
55018: DOUBLE
55019: EQUAL
55020: IFTRUE 55024
55022: GO 55049
55024: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
55025: LD_ADDR_VAR 0 3
55029: PUSH
55030: LD_INT 40
55032: PPUSH
55033: LD_VAR 0 1
55037: PPUSH
55038: CALL_OW 321
55042: PUSH
55043: LD_INT 2
55045: EQUAL
55046: ST_TO_ADDR
55047: GO 55083
55049: LD_INT 27
55051: DOUBLE
55052: EQUAL
55053: IFTRUE 55057
55055: GO 55082
55057: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
55058: LD_ADDR_VAR 0 3
55062: PUSH
55063: LD_INT 35
55065: PPUSH
55066: LD_VAR 0 1
55070: PPUSH
55071: CALL_OW 321
55075: PUSH
55076: LD_INT 2
55078: EQUAL
55079: ST_TO_ADDR
55080: GO 55083
55082: POP
// end ;
55083: LD_VAR 0 3
55087: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
55088: LD_INT 0
55090: PPUSH
55091: PPUSH
55092: PPUSH
55093: PPUSH
55094: PPUSH
55095: PPUSH
55096: PPUSH
55097: PPUSH
55098: PPUSH
55099: PPUSH
55100: PPUSH
// result := false ;
55101: LD_ADDR_VAR 0 6
55105: PUSH
55106: LD_INT 0
55108: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
55109: LD_VAR 0 1
55113: NOT
55114: PUSH
55115: LD_VAR 0 1
55119: PPUSH
55120: CALL_OW 266
55124: PUSH
55125: LD_INT 0
55127: PUSH
55128: LD_INT 1
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: IN
55135: NOT
55136: OR
55137: PUSH
55138: LD_VAR 0 2
55142: NOT
55143: OR
55144: PUSH
55145: LD_VAR 0 5
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: LD_INT 1
55155: PUSH
55156: LD_INT 2
55158: PUSH
55159: LD_INT 3
55161: PUSH
55162: LD_INT 4
55164: PUSH
55165: LD_INT 5
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: IN
55176: NOT
55177: OR
55178: PUSH
55179: LD_VAR 0 3
55183: PPUSH
55184: LD_VAR 0 4
55188: PPUSH
55189: CALL_OW 488
55193: NOT
55194: OR
55195: IFFALSE 55199
// exit ;
55197: GO 55935
// side := GetSide ( depot ) ;
55199: LD_ADDR_VAR 0 9
55203: PUSH
55204: LD_VAR 0 1
55208: PPUSH
55209: CALL_OW 255
55213: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
55214: LD_VAR 0 9
55218: PPUSH
55219: LD_VAR 0 2
55223: PPUSH
55224: CALL 54708 0 2
55228: NOT
55229: IFFALSE 55233
// exit ;
55231: GO 55935
// pom := GetBase ( depot ) ;
55233: LD_ADDR_VAR 0 10
55237: PUSH
55238: LD_VAR 0 1
55242: PPUSH
55243: CALL_OW 274
55247: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55248: LD_ADDR_VAR 0 11
55252: PUSH
55253: LD_VAR 0 2
55257: PPUSH
55258: LD_VAR 0 1
55262: PPUSH
55263: CALL_OW 248
55267: PPUSH
55268: CALL_OW 450
55272: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
55273: LD_VAR 0 10
55277: PPUSH
55278: LD_INT 1
55280: PPUSH
55281: CALL_OW 275
55285: PUSH
55286: LD_VAR 0 11
55290: PUSH
55291: LD_INT 1
55293: ARRAY
55294: GREATEREQUAL
55295: PUSH
55296: LD_VAR 0 10
55300: PPUSH
55301: LD_INT 2
55303: PPUSH
55304: CALL_OW 275
55308: PUSH
55309: LD_VAR 0 11
55313: PUSH
55314: LD_INT 2
55316: ARRAY
55317: GREATEREQUAL
55318: AND
55319: PUSH
55320: LD_VAR 0 10
55324: PPUSH
55325: LD_INT 3
55327: PPUSH
55328: CALL_OW 275
55332: PUSH
55333: LD_VAR 0 11
55337: PUSH
55338: LD_INT 3
55340: ARRAY
55341: GREATEREQUAL
55342: AND
55343: NOT
55344: IFFALSE 55348
// exit ;
55346: GO 55935
// if GetBType ( depot ) = b_depot then
55348: LD_VAR 0 1
55352: PPUSH
55353: CALL_OW 266
55357: PUSH
55358: LD_INT 0
55360: EQUAL
55361: IFFALSE 55373
// dist := 28 else
55363: LD_ADDR_VAR 0 14
55367: PUSH
55368: LD_INT 28
55370: ST_TO_ADDR
55371: GO 55381
// dist := 36 ;
55373: LD_ADDR_VAR 0 14
55377: PUSH
55378: LD_INT 36
55380: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55381: LD_VAR 0 1
55385: PPUSH
55386: LD_VAR 0 3
55390: PPUSH
55391: LD_VAR 0 4
55395: PPUSH
55396: CALL_OW 297
55400: PUSH
55401: LD_VAR 0 14
55405: GREATER
55406: IFFALSE 55410
// exit ;
55408: GO 55935
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55410: LD_ADDR_VAR 0 12
55414: PUSH
55415: LD_VAR 0 2
55419: PPUSH
55420: LD_VAR 0 3
55424: PPUSH
55425: LD_VAR 0 4
55429: PPUSH
55430: LD_VAR 0 5
55434: PPUSH
55435: LD_VAR 0 1
55439: PPUSH
55440: CALL_OW 248
55444: PPUSH
55445: LD_INT 0
55447: PPUSH
55448: CALL 55940 0 6
55452: ST_TO_ADDR
// if not hexes then
55453: LD_VAR 0 12
55457: NOT
55458: IFFALSE 55462
// exit ;
55460: GO 55935
// hex := GetHexInfo ( x , y ) ;
55462: LD_ADDR_VAR 0 15
55466: PUSH
55467: LD_VAR 0 3
55471: PPUSH
55472: LD_VAR 0 4
55476: PPUSH
55477: CALL_OW 546
55481: ST_TO_ADDR
// if hex [ 1 ] then
55482: LD_VAR 0 15
55486: PUSH
55487: LD_INT 1
55489: ARRAY
55490: IFFALSE 55494
// exit ;
55492: GO 55935
// height := hex [ 2 ] ;
55494: LD_ADDR_VAR 0 13
55498: PUSH
55499: LD_VAR 0 15
55503: PUSH
55504: LD_INT 2
55506: ARRAY
55507: ST_TO_ADDR
// for i = 1 to hexes do
55508: LD_ADDR_VAR 0 7
55512: PUSH
55513: DOUBLE
55514: LD_INT 1
55516: DEC
55517: ST_TO_ADDR
55518: LD_VAR 0 12
55522: PUSH
55523: FOR_TO
55524: IFFALSE 55854
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55526: LD_VAR 0 12
55530: PUSH
55531: LD_VAR 0 7
55535: ARRAY
55536: PUSH
55537: LD_INT 1
55539: ARRAY
55540: PPUSH
55541: LD_VAR 0 12
55545: PUSH
55546: LD_VAR 0 7
55550: ARRAY
55551: PUSH
55552: LD_INT 2
55554: ARRAY
55555: PPUSH
55556: CALL_OW 488
55560: NOT
55561: PUSH
55562: LD_VAR 0 12
55566: PUSH
55567: LD_VAR 0 7
55571: ARRAY
55572: PUSH
55573: LD_INT 1
55575: ARRAY
55576: PPUSH
55577: LD_VAR 0 12
55581: PUSH
55582: LD_VAR 0 7
55586: ARRAY
55587: PUSH
55588: LD_INT 2
55590: ARRAY
55591: PPUSH
55592: CALL_OW 428
55596: PUSH
55597: LD_INT 0
55599: GREATER
55600: OR
55601: PUSH
55602: LD_VAR 0 12
55606: PUSH
55607: LD_VAR 0 7
55611: ARRAY
55612: PUSH
55613: LD_INT 1
55615: ARRAY
55616: PPUSH
55617: LD_VAR 0 12
55621: PUSH
55622: LD_VAR 0 7
55626: ARRAY
55627: PUSH
55628: LD_INT 2
55630: ARRAY
55631: PPUSH
55632: CALL_OW 351
55636: OR
55637: IFFALSE 55643
// exit ;
55639: POP
55640: POP
55641: GO 55935
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55643: LD_ADDR_VAR 0 8
55647: PUSH
55648: LD_VAR 0 12
55652: PUSH
55653: LD_VAR 0 7
55657: ARRAY
55658: PUSH
55659: LD_INT 1
55661: ARRAY
55662: PPUSH
55663: LD_VAR 0 12
55667: PUSH
55668: LD_VAR 0 7
55672: ARRAY
55673: PUSH
55674: LD_INT 2
55676: ARRAY
55677: PPUSH
55678: CALL_OW 546
55682: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55683: LD_VAR 0 8
55687: PUSH
55688: LD_INT 1
55690: ARRAY
55691: PUSH
55692: LD_VAR 0 8
55696: PUSH
55697: LD_INT 2
55699: ARRAY
55700: PUSH
55701: LD_VAR 0 13
55705: PUSH
55706: LD_INT 2
55708: PLUS
55709: GREATER
55710: OR
55711: PUSH
55712: LD_VAR 0 8
55716: PUSH
55717: LD_INT 2
55719: ARRAY
55720: PUSH
55721: LD_VAR 0 13
55725: PUSH
55726: LD_INT 2
55728: MINUS
55729: LESS
55730: OR
55731: PUSH
55732: LD_VAR 0 8
55736: PUSH
55737: LD_INT 3
55739: ARRAY
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: LD_INT 8
55746: PUSH
55747: LD_INT 9
55749: PUSH
55750: LD_INT 10
55752: PUSH
55753: LD_INT 11
55755: PUSH
55756: LD_INT 12
55758: PUSH
55759: LD_INT 13
55761: PUSH
55762: LD_INT 16
55764: PUSH
55765: LD_INT 17
55767: PUSH
55768: LD_INT 18
55770: PUSH
55771: LD_INT 19
55773: PUSH
55774: LD_INT 20
55776: PUSH
55777: LD_INT 21
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: IN
55795: NOT
55796: OR
55797: PUSH
55798: LD_VAR 0 8
55802: PUSH
55803: LD_INT 5
55805: ARRAY
55806: NOT
55807: OR
55808: PUSH
55809: LD_VAR 0 8
55813: PUSH
55814: LD_INT 6
55816: ARRAY
55817: PUSH
55818: LD_INT 1
55820: PUSH
55821: LD_INT 2
55823: PUSH
55824: LD_INT 7
55826: PUSH
55827: LD_INT 9
55829: PUSH
55830: LD_INT 10
55832: PUSH
55833: LD_INT 11
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: IN
55844: NOT
55845: OR
55846: IFFALSE 55852
// exit ;
55848: POP
55849: POP
55850: GO 55935
// end ;
55852: GO 55523
55854: POP
55855: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55856: LD_VAR 0 9
55860: PPUSH
55861: LD_VAR 0 3
55865: PPUSH
55866: LD_VAR 0 4
55870: PPUSH
55871: LD_INT 20
55873: PPUSH
55874: CALL 47881 0 4
55878: PUSH
55879: LD_INT 4
55881: ARRAY
55882: IFFALSE 55886
// exit ;
55884: GO 55935
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55886: LD_VAR 0 2
55890: PUSH
55891: LD_INT 29
55893: PUSH
55894: LD_INT 30
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: IN
55901: PUSH
55902: LD_VAR 0 3
55906: PPUSH
55907: LD_VAR 0 4
55911: PPUSH
55912: LD_VAR 0 9
55916: PPUSH
55917: CALL_OW 440
55921: NOT
55922: AND
55923: IFFALSE 55927
// exit ;
55925: GO 55935
// result := true ;
55927: LD_ADDR_VAR 0 6
55931: PUSH
55932: LD_INT 1
55934: ST_TO_ADDR
// end ;
55935: LD_VAR 0 6
55939: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55940: LD_INT 0
55942: PPUSH
55943: PPUSH
55944: PPUSH
55945: PPUSH
55946: PPUSH
55947: PPUSH
55948: PPUSH
55949: PPUSH
55950: PPUSH
55951: PPUSH
55952: PPUSH
55953: PPUSH
55954: PPUSH
55955: PPUSH
55956: PPUSH
55957: PPUSH
55958: PPUSH
55959: PPUSH
55960: PPUSH
55961: PPUSH
55962: PPUSH
55963: PPUSH
55964: PPUSH
55965: PPUSH
55966: PPUSH
55967: PPUSH
55968: PPUSH
55969: PPUSH
55970: PPUSH
55971: PPUSH
55972: PPUSH
55973: PPUSH
55974: PPUSH
55975: PPUSH
55976: PPUSH
55977: PPUSH
55978: PPUSH
55979: PPUSH
55980: PPUSH
55981: PPUSH
55982: PPUSH
55983: PPUSH
55984: PPUSH
55985: PPUSH
55986: PPUSH
55987: PPUSH
55988: PPUSH
55989: PPUSH
55990: PPUSH
55991: PPUSH
55992: PPUSH
55993: PPUSH
55994: PPUSH
55995: PPUSH
55996: PPUSH
55997: PPUSH
55998: PPUSH
55999: PPUSH
// result = [ ] ;
56000: LD_ADDR_VAR 0 7
56004: PUSH
56005: EMPTY
56006: ST_TO_ADDR
// temp_list = [ ] ;
56007: LD_ADDR_VAR 0 9
56011: PUSH
56012: EMPTY
56013: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
56014: LD_VAR 0 4
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: LD_INT 2
56027: PUSH
56028: LD_INT 3
56030: PUSH
56031: LD_INT 4
56033: PUSH
56034: LD_INT 5
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: IN
56045: NOT
56046: PUSH
56047: LD_VAR 0 1
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: LD_INT 1
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: IN
56062: PUSH
56063: LD_VAR 0 5
56067: PUSH
56068: LD_INT 1
56070: PUSH
56071: LD_INT 2
56073: PUSH
56074: LD_INT 3
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: LIST
56081: IN
56082: NOT
56083: AND
56084: OR
56085: IFFALSE 56089
// exit ;
56087: GO 74480
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
56089: LD_VAR 0 1
56093: PUSH
56094: LD_INT 6
56096: PUSH
56097: LD_INT 7
56099: PUSH
56100: LD_INT 8
56102: PUSH
56103: LD_INT 13
56105: PUSH
56106: LD_INT 12
56108: PUSH
56109: LD_INT 15
56111: PUSH
56112: LD_INT 11
56114: PUSH
56115: LD_INT 14
56117: PUSH
56118: LD_INT 10
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: IN
56132: IFFALSE 56142
// btype = b_lab ;
56134: LD_ADDR_VAR 0 1
56138: PUSH
56139: LD_INT 6
56141: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
56142: LD_VAR 0 6
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: LD_INT 2
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: LIST
56160: IN
56161: NOT
56162: PUSH
56163: LD_VAR 0 1
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: LD_INT 2
56176: PUSH
56177: LD_INT 3
56179: PUSH
56180: LD_INT 6
56182: PUSH
56183: LD_INT 36
56185: PUSH
56186: LD_INT 4
56188: PUSH
56189: LD_INT 5
56191: PUSH
56192: LD_INT 31
56194: PUSH
56195: LD_INT 32
56197: PUSH
56198: LD_INT 33
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: IN
56214: NOT
56215: PUSH
56216: LD_VAR 0 6
56220: PUSH
56221: LD_INT 1
56223: EQUAL
56224: AND
56225: OR
56226: PUSH
56227: LD_VAR 0 1
56231: PUSH
56232: LD_INT 2
56234: PUSH
56235: LD_INT 3
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: IN
56242: NOT
56243: PUSH
56244: LD_VAR 0 6
56248: PUSH
56249: LD_INT 2
56251: EQUAL
56252: AND
56253: OR
56254: IFFALSE 56264
// mode = 0 ;
56256: LD_ADDR_VAR 0 6
56260: PUSH
56261: LD_INT 0
56263: ST_TO_ADDR
// case mode of 0 :
56264: LD_VAR 0 6
56268: PUSH
56269: LD_INT 0
56271: DOUBLE
56272: EQUAL
56273: IFTRUE 56277
56275: GO 67730
56277: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56278: LD_ADDR_VAR 0 11
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 0
56295: PUSH
56296: LD_INT 1
56298: NEG
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 1
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 1
56316: PUSH
56317: LD_INT 1
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: LD_INT 1
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 1
56347: NEG
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 1
56359: NEG
56360: PUSH
56361: LD_INT 2
56363: NEG
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: LD_INT 2
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: LD_INT 1
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: LD_INT 2
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: LD_INT 2
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 1
56413: NEG
56414: PUSH
56415: LD_INT 1
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 1
56424: PUSH
56425: LD_INT 3
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: LD_INT 3
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: NEG
56445: PUSH
56446: LD_INT 2
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56471: LD_ADDR_VAR 0 12
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: LD_INT 0
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 1
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 1
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: NEG
56541: PUSH
56542: LD_INT 1
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 1
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 2
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 2
56573: PUSH
56574: LD_INT 1
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 1
56583: NEG
56584: PUSH
56585: LD_INT 1
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 2
56594: NEG
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 2
56605: NEG
56606: PUSH
56607: LD_INT 1
56609: NEG
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 2
56617: NEG
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 3
56628: NEG
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 3
56639: NEG
56640: PUSH
56641: LD_INT 1
56643: NEG
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56667: LD_ADDR_VAR 0 13
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: LD_INT 0
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: LD_INT 1
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 1
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 1
56705: PUSH
56706: LD_INT 1
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: LD_INT 1
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 1
56748: NEG
56749: PUSH
56750: LD_INT 2
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 2
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 2
56770: PUSH
56771: LD_INT 2
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 1
56780: PUSH
56781: LD_INT 2
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 2
56790: NEG
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 2
56802: NEG
56803: PUSH
56804: LD_INT 2
56806: NEG
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 2
56814: NEG
56815: PUSH
56816: LD_INT 3
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 3
56826: NEG
56827: PUSH
56828: LD_INT 2
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 3
56838: NEG
56839: PUSH
56840: LD_INT 3
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56866: LD_ADDR_VAR 0 14
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: LD_INT 1
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 1
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: LD_INT 1
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 1
56924: NEG
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: NEG
56936: PUSH
56937: LD_INT 1
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 1
56947: NEG
56948: PUSH
56949: LD_INT 2
56951: NEG
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: LD_INT 2
56962: NEG
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 1
56970: PUSH
56971: LD_INT 1
56973: NEG
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 1
56981: PUSH
56982: LD_INT 2
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: LD_INT 2
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: LD_INT 1
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 1
57012: NEG
57013: PUSH
57014: LD_INT 3
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: LD_INT 3
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: LD_INT 2
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57062: LD_ADDR_VAR 0 15
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 0
57079: PUSH
57080: LD_INT 1
57082: NEG
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: LD_INT 0
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: LD_INT 1
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: LD_INT 1
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: LD_INT 1
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 2
57154: PUSH
57155: LD_INT 0
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 2
57164: PUSH
57165: LD_INT 1
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 1
57174: NEG
57175: PUSH
57176: LD_INT 1
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 2
57185: NEG
57186: PUSH
57187: LD_INT 0
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 2
57196: NEG
57197: PUSH
57198: LD_INT 1
57200: NEG
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 2
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 3
57219: PUSH
57220: LD_INT 0
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 3
57229: PUSH
57230: LD_INT 1
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57255: LD_ADDR_VAR 0 16
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 0
57272: PUSH
57273: LD_INT 1
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 1
57283: PUSH
57284: LD_INT 0
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 1
57293: PUSH
57294: LD_INT 1
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 0
57303: PUSH
57304: LD_INT 1
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 1
57313: NEG
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: LD_INT 1
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: LD_INT 2
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 2
57348: PUSH
57349: LD_INT 1
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 2
57358: PUSH
57359: LD_INT 2
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: LD_INT 2
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 2
57378: NEG
57379: PUSH
57380: LD_INT 1
57382: NEG
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 2
57390: NEG
57391: PUSH
57392: LD_INT 2
57394: NEG
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 3
57402: PUSH
57403: LD_INT 2
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 3
57412: PUSH
57413: LD_INT 3
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 2
57422: PUSH
57423: LD_INT 3
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57448: LD_ADDR_VAR 0 17
57452: PUSH
57453: LD_INT 0
57455: PUSH
57456: LD_INT 0
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 1
57476: PUSH
57477: LD_INT 0
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 1
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 0
57496: PUSH
57497: LD_INT 1
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 1
57506: NEG
57507: PUSH
57508: LD_INT 0
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: LD_INT 1
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: LD_INT 2
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 0
57541: PUSH
57542: LD_INT 2
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 1
57552: PUSH
57553: LD_INT 1
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 2
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 2
57573: PUSH
57574: LD_INT 1
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 2
57583: PUSH
57584: LD_INT 2
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 1
57593: PUSH
57594: LD_INT 2
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: LD_INT 2
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 1
57613: NEG
57614: PUSH
57615: LD_INT 1
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 2
57624: NEG
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 2
57635: NEG
57636: PUSH
57637: LD_INT 1
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 2
57647: NEG
57648: PUSH
57649: LD_INT 2
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57678: LD_ADDR_VAR 0 18
57682: PUSH
57683: LD_INT 0
57685: PUSH
57686: LD_INT 0
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: LD_INT 1
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 1
57706: PUSH
57707: LD_INT 0
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: LD_INT 1
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 0
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: LD_INT 0
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 1
57747: NEG
57748: PUSH
57749: LD_INT 1
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 1
57759: NEG
57760: PUSH
57761: LD_INT 2
57763: NEG
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: LD_INT 2
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 1
57782: PUSH
57783: LD_INT 1
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 2
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 2
57803: PUSH
57804: LD_INT 1
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 2
57813: PUSH
57814: LD_INT 2
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: LD_INT 2
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 0
57833: PUSH
57834: LD_INT 2
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 1
57843: NEG
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 2
57854: NEG
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 2
57865: NEG
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 2
57877: NEG
57878: PUSH
57879: LD_INT 2
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57908: LD_ADDR_VAR 0 19
57912: PUSH
57913: LD_INT 0
57915: PUSH
57916: LD_INT 0
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 0
57925: PUSH
57926: LD_INT 1
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 1
57936: PUSH
57937: LD_INT 0
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 1
57946: PUSH
57947: LD_INT 1
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 0
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 1
57966: NEG
57967: PUSH
57968: LD_INT 0
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 1
57977: NEG
57978: PUSH
57979: LD_INT 1
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 1
57989: NEG
57990: PUSH
57991: LD_INT 2
57993: NEG
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: LD_INT 2
58004: NEG
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 1
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 2
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 2
58033: PUSH
58034: LD_INT 1
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 2
58043: PUSH
58044: LD_INT 2
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 1
58053: PUSH
58054: LD_INT 2
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: LD_INT 2
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 1
58073: NEG
58074: PUSH
58075: LD_INT 1
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 2
58084: NEG
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 2
58095: NEG
58096: PUSH
58097: LD_INT 1
58099: NEG
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 2
58107: NEG
58108: PUSH
58109: LD_INT 2
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58138: LD_ADDR_VAR 0 20
58142: PUSH
58143: LD_INT 0
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 0
58155: PUSH
58156: LD_INT 1
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 1
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 1
58176: PUSH
58177: LD_INT 1
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: LD_INT 1
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 1
58196: NEG
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 1
58207: NEG
58208: PUSH
58209: LD_INT 1
58211: NEG
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 1
58219: NEG
58220: PUSH
58221: LD_INT 2
58223: NEG
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: LD_INT 2
58234: NEG
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 1
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 2
58253: PUSH
58254: LD_INT 0
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 2
58263: PUSH
58264: LD_INT 1
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 2
58273: PUSH
58274: LD_INT 2
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 1
58283: PUSH
58284: LD_INT 2
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 0
58293: PUSH
58294: LD_INT 2
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 1
58303: NEG
58304: PUSH
58305: LD_INT 1
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 2
58314: NEG
58315: PUSH
58316: LD_INT 0
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 2
58325: NEG
58326: PUSH
58327: LD_INT 1
58329: NEG
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 2
58337: NEG
58338: PUSH
58339: LD_INT 2
58341: NEG
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58368: LD_ADDR_VAR 0 21
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: LD_INT 1
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: PUSH
58397: LD_INT 0
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: LD_INT 1
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 0
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: LD_INT 0
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 1
58437: NEG
58438: PUSH
58439: LD_INT 1
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 1
58449: NEG
58450: PUSH
58451: LD_INT 2
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: LD_INT 2
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 1
58472: PUSH
58473: LD_INT 1
58475: NEG
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 2
58483: PUSH
58484: LD_INT 0
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 2
58493: PUSH
58494: LD_INT 1
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 2
58503: PUSH
58504: LD_INT 2
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 1
58513: PUSH
58514: LD_INT 2
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 0
58523: PUSH
58524: LD_INT 2
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 1
58533: NEG
58534: PUSH
58535: LD_INT 1
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 2
58544: NEG
58545: PUSH
58546: LD_INT 0
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 2
58555: NEG
58556: PUSH
58557: LD_INT 1
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 2
58567: NEG
58568: PUSH
58569: LD_INT 2
58571: NEG
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58598: LD_ADDR_VAR 0 22
58602: PUSH
58603: LD_INT 0
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 0
58615: PUSH
58616: LD_INT 1
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 1
58626: PUSH
58627: LD_INT 0
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 1
58636: PUSH
58637: LD_INT 1
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: LD_INT 1
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 1
58656: NEG
58657: PUSH
58658: LD_INT 0
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 1
58667: NEG
58668: PUSH
58669: LD_INT 1
58671: NEG
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: LD_INT 2
58683: NEG
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: LD_INT 2
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 1
58702: PUSH
58703: LD_INT 1
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 2
58713: PUSH
58714: LD_INT 0
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 2
58723: PUSH
58724: LD_INT 1
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 2
58733: PUSH
58734: LD_INT 2
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 1
58743: PUSH
58744: LD_INT 2
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: LD_INT 2
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: LD_INT 1
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 2
58774: NEG
58775: PUSH
58776: LD_INT 0
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 2
58785: NEG
58786: PUSH
58787: LD_INT 1
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 2
58797: NEG
58798: PUSH
58799: LD_INT 2
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58828: LD_ADDR_VAR 0 23
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: LD_INT 0
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 0
58845: PUSH
58846: LD_INT 1
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 1
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 1
58866: PUSH
58867: LD_INT 1
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 0
58876: PUSH
58877: LD_INT 1
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 1
58886: NEG
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 1
58897: NEG
58898: PUSH
58899: LD_INT 1
58901: NEG
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 1
58909: NEG
58910: PUSH
58911: LD_INT 2
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 0
58921: PUSH
58922: LD_INT 2
58924: NEG
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 1
58932: PUSH
58933: LD_INT 1
58935: NEG
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 2
58943: PUSH
58944: LD_INT 0
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 2
58953: PUSH
58954: LD_INT 1
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 2
58963: PUSH
58964: LD_INT 2
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 1
58973: PUSH
58974: LD_INT 2
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: LD_INT 2
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 1
58993: NEG
58994: PUSH
58995: LD_INT 1
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 2
59004: NEG
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 2
59015: NEG
59016: PUSH
59017: LD_INT 1
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 2
59027: NEG
59028: PUSH
59029: LD_INT 2
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 2
59039: NEG
59040: PUSH
59041: LD_INT 3
59043: NEG
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 1
59051: NEG
59052: PUSH
59053: LD_INT 3
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 1
59063: PUSH
59064: LD_INT 2
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 2
59074: PUSH
59075: LD_INT 1
59077: NEG
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
59108: LD_ADDR_VAR 0 24
59112: PUSH
59113: LD_INT 0
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 0
59125: PUSH
59126: LD_INT 1
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 1
59136: PUSH
59137: LD_INT 0
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 1
59146: PUSH
59147: LD_INT 1
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 0
59156: PUSH
59157: LD_INT 1
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 1
59166: NEG
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 1
59177: NEG
59178: PUSH
59179: LD_INT 1
59181: NEG
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 1
59189: NEG
59190: PUSH
59191: LD_INT 2
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: LD_INT 2
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 1
59212: PUSH
59213: LD_INT 1
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 2
59223: PUSH
59224: LD_INT 0
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 2
59233: PUSH
59234: LD_INT 1
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 2
59243: PUSH
59244: LD_INT 2
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 1
59253: PUSH
59254: LD_INT 2
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 0
59263: PUSH
59264: LD_INT 2
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 1
59273: NEG
59274: PUSH
59275: LD_INT 1
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 2
59284: NEG
59285: PUSH
59286: LD_INT 0
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 2
59295: NEG
59296: PUSH
59297: LD_INT 1
59299: NEG
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 2
59307: NEG
59308: PUSH
59309: LD_INT 2
59311: NEG
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 1
59319: PUSH
59320: LD_INT 2
59322: NEG
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 2
59330: PUSH
59331: LD_INT 1
59333: NEG
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 3
59341: PUSH
59342: LD_INT 1
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 3
59351: PUSH
59352: LD_INT 2
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59384: LD_ADDR_VAR 0 25
59388: PUSH
59389: LD_INT 0
59391: PUSH
59392: LD_INT 0
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: LD_INT 1
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 1
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 1
59422: PUSH
59423: LD_INT 1
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: LD_INT 1
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 1
59442: NEG
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: NEG
59454: PUSH
59455: LD_INT 1
59457: NEG
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 1
59465: NEG
59466: PUSH
59467: LD_INT 2
59469: NEG
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 0
59477: PUSH
59478: LD_INT 2
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 1
59488: PUSH
59489: LD_INT 1
59491: NEG
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 2
59499: PUSH
59500: LD_INT 0
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 2
59509: PUSH
59510: LD_INT 1
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 2
59519: PUSH
59520: LD_INT 2
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 1
59529: PUSH
59530: LD_INT 2
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 0
59539: PUSH
59540: LD_INT 2
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 1
59549: NEG
59550: PUSH
59551: LD_INT 1
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 2
59560: NEG
59561: PUSH
59562: LD_INT 0
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 2
59571: NEG
59572: PUSH
59573: LD_INT 1
59575: NEG
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 2
59583: NEG
59584: PUSH
59585: LD_INT 2
59587: NEG
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 3
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 3
59605: PUSH
59606: LD_INT 2
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 2
59615: PUSH
59616: LD_INT 3
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 1
59625: PUSH
59626: LD_INT 3
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59658: LD_ADDR_VAR 0 26
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: LD_INT 1
59678: NEG
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 1
59686: PUSH
59687: LD_INT 0
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 1
59696: PUSH
59697: LD_INT 1
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 0
59706: PUSH
59707: LD_INT 1
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 1
59716: NEG
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 1
59727: NEG
59728: PUSH
59729: LD_INT 1
59731: NEG
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 1
59739: NEG
59740: PUSH
59741: LD_INT 2
59743: NEG
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 0
59751: PUSH
59752: LD_INT 2
59754: NEG
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 1
59762: PUSH
59763: LD_INT 1
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 2
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 2
59783: PUSH
59784: LD_INT 1
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 2
59793: PUSH
59794: LD_INT 2
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 1
59803: PUSH
59804: LD_INT 2
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 0
59813: PUSH
59814: LD_INT 2
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 1
59823: NEG
59824: PUSH
59825: LD_INT 1
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 2
59834: NEG
59835: PUSH
59836: LD_INT 0
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 2
59845: NEG
59846: PUSH
59847: LD_INT 1
59849: NEG
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 2
59857: NEG
59858: PUSH
59859: LD_INT 2
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 2
59869: PUSH
59870: LD_INT 3
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 1
59879: PUSH
59880: LD_INT 3
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 1
59889: NEG
59890: PUSH
59891: LD_INT 2
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 2
59900: NEG
59901: PUSH
59902: LD_INT 1
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59934: LD_ADDR_VAR 0 27
59938: PUSH
59939: LD_INT 0
59941: PUSH
59942: LD_INT 0
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 0
59951: PUSH
59952: LD_INT 1
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 1
59962: PUSH
59963: LD_INT 0
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 1
59972: PUSH
59973: LD_INT 1
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 0
59982: PUSH
59983: LD_INT 1
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 1
59992: NEG
59993: PUSH
59994: LD_INT 0
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 1
60003: NEG
60004: PUSH
60005: LD_INT 1
60007: NEG
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 1
60015: NEG
60016: PUSH
60017: LD_INT 2
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 0
60027: PUSH
60028: LD_INT 2
60030: NEG
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 1
60038: PUSH
60039: LD_INT 1
60041: NEG
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 2
60049: PUSH
60050: LD_INT 0
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 2
60059: PUSH
60060: LD_INT 1
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 2
60069: PUSH
60070: LD_INT 2
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 1
60079: PUSH
60080: LD_INT 2
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 0
60089: PUSH
60090: LD_INT 2
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 1
60099: NEG
60100: PUSH
60101: LD_INT 1
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 2
60110: NEG
60111: PUSH
60112: LD_INT 0
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 2
60121: NEG
60122: PUSH
60123: LD_INT 1
60125: NEG
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 2
60133: NEG
60134: PUSH
60135: LD_INT 2
60137: NEG
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 1
60145: NEG
60146: PUSH
60147: LD_INT 2
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 2
60156: NEG
60157: PUSH
60158: LD_INT 1
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 3
60167: NEG
60168: PUSH
60169: LD_INT 1
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 3
60179: NEG
60180: PUSH
60181: LD_INT 2
60183: NEG
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60214: LD_ADDR_VAR 0 28
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: LD_INT 0
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: LD_INT 1
60234: NEG
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 1
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 1
60252: PUSH
60253: LD_INT 1
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 0
60262: PUSH
60263: LD_INT 1
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 1
60272: NEG
60273: PUSH
60274: LD_INT 0
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 1
60283: NEG
60284: PUSH
60285: LD_INT 1
60287: NEG
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 1
60295: NEG
60296: PUSH
60297: LD_INT 2
60299: NEG
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 0
60307: PUSH
60308: LD_INT 2
60310: NEG
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 1
60318: PUSH
60319: LD_INT 1
60321: NEG
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 2
60329: PUSH
60330: LD_INT 0
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 2
60339: PUSH
60340: LD_INT 1
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 2
60349: PUSH
60350: LD_INT 2
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 1
60359: PUSH
60360: LD_INT 2
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 0
60369: PUSH
60370: LD_INT 2
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 1
60379: NEG
60380: PUSH
60381: LD_INT 1
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 2
60390: NEG
60391: PUSH
60392: LD_INT 0
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 2
60401: NEG
60402: PUSH
60403: LD_INT 1
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 2
60413: NEG
60414: PUSH
60415: LD_INT 2
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 2
60425: NEG
60426: PUSH
60427: LD_INT 3
60429: NEG
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 1
60437: NEG
60438: PUSH
60439: LD_INT 3
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 3
60449: NEG
60450: PUSH
60451: LD_INT 1
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 3
60461: NEG
60462: PUSH
60463: LD_INT 2
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60496: LD_ADDR_VAR 0 29
60500: PUSH
60501: LD_INT 0
60503: PUSH
60504: LD_INT 0
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: LD_INT 1
60516: NEG
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: LD_INT 0
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 1
60534: PUSH
60535: LD_INT 1
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 0
60544: PUSH
60545: LD_INT 1
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 1
60554: NEG
60555: PUSH
60556: LD_INT 0
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 1
60565: NEG
60566: PUSH
60567: LD_INT 1
60569: NEG
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: LD_INT 2
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 0
60589: PUSH
60590: LD_INT 2
60592: NEG
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 1
60600: PUSH
60601: LD_INT 1
60603: NEG
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 2
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 2
60621: PUSH
60622: LD_INT 1
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 1
60631: PUSH
60632: LD_INT 2
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 0
60641: PUSH
60642: LD_INT 2
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 1
60651: NEG
60652: PUSH
60653: LD_INT 1
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 2
60662: NEG
60663: PUSH
60664: LD_INT 1
60666: NEG
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 2
60674: NEG
60675: PUSH
60676: LD_INT 2
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 2
60686: NEG
60687: PUSH
60688: LD_INT 3
60690: NEG
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 2
60698: PUSH
60699: LD_INT 1
60701: NEG
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 3
60709: PUSH
60710: LD_INT 1
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 1
60719: PUSH
60720: LD_INT 3
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 1
60729: NEG
60730: PUSH
60731: LD_INT 2
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 3
60740: NEG
60741: PUSH
60742: LD_INT 2
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60775: LD_ADDR_VAR 0 30
60779: PUSH
60780: LD_INT 0
60782: PUSH
60783: LD_INT 0
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 0
60792: PUSH
60793: LD_INT 1
60795: NEG
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 1
60803: PUSH
60804: LD_INT 0
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 1
60813: PUSH
60814: LD_INT 1
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 0
60823: PUSH
60824: LD_INT 1
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 1
60833: NEG
60834: PUSH
60835: LD_INT 0
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 1
60844: NEG
60845: PUSH
60846: LD_INT 1
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 1
60856: NEG
60857: PUSH
60858: LD_INT 2
60860: NEG
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 0
60868: PUSH
60869: LD_INT 2
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 1
60879: PUSH
60880: LD_INT 1
60882: NEG
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 2
60890: PUSH
60891: LD_INT 0
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 2
60900: PUSH
60901: LD_INT 1
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 2
60910: PUSH
60911: LD_INT 2
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 1
60920: PUSH
60921: LD_INT 2
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 1
60930: NEG
60931: PUSH
60932: LD_INT 1
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 2
60941: NEG
60942: PUSH
60943: LD_INT 0
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 2
60952: NEG
60953: PUSH
60954: LD_INT 1
60956: NEG
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 1
60964: NEG
60965: PUSH
60966: LD_INT 3
60968: NEG
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 1
60976: PUSH
60977: LD_INT 2
60979: NEG
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 3
60987: PUSH
60988: LD_INT 2
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 2
60997: PUSH
60998: LD_INT 3
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 2
61007: NEG
61008: PUSH
61009: LD_INT 1
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 3
61018: NEG
61019: PUSH
61020: LD_INT 1
61022: NEG
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61053: LD_ADDR_VAR 0 31
61057: PUSH
61058: LD_INT 0
61060: PUSH
61061: LD_INT 0
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 0
61070: PUSH
61071: LD_INT 1
61073: NEG
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 1
61081: PUSH
61082: LD_INT 0
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 1
61091: PUSH
61092: LD_INT 1
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 0
61101: PUSH
61102: LD_INT 1
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 1
61111: NEG
61112: PUSH
61113: LD_INT 0
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 1
61122: NEG
61123: PUSH
61124: LD_INT 1
61126: NEG
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 1
61134: NEG
61135: PUSH
61136: LD_INT 2
61138: NEG
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 1
61146: PUSH
61147: LD_INT 1
61149: NEG
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 2
61157: PUSH
61158: LD_INT 0
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 2
61167: PUSH
61168: LD_INT 1
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 2
61177: PUSH
61178: LD_INT 2
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 1
61187: PUSH
61188: LD_INT 2
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 0
61197: PUSH
61198: LD_INT 2
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 1
61207: NEG
61208: PUSH
61209: LD_INT 1
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 2
61218: NEG
61219: PUSH
61220: LD_INT 1
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 2
61230: NEG
61231: PUSH
61232: LD_INT 2
61234: NEG
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 2
61242: NEG
61243: PUSH
61244: LD_INT 3
61246: NEG
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 2
61254: PUSH
61255: LD_INT 1
61257: NEG
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 3
61265: PUSH
61266: LD_INT 1
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 1
61275: PUSH
61276: LD_INT 3
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 1
61285: NEG
61286: PUSH
61287: LD_INT 2
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 3
61296: NEG
61297: PUSH
61298: LD_INT 2
61300: NEG
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61331: LD_ADDR_VAR 0 32
61335: PUSH
61336: LD_INT 0
61338: PUSH
61339: LD_INT 0
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 0
61348: PUSH
61349: LD_INT 1
61351: NEG
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 1
61359: PUSH
61360: LD_INT 0
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: LD_INT 1
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: LD_INT 1
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 1
61389: NEG
61390: PUSH
61391: LD_INT 0
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 1
61400: NEG
61401: PUSH
61402: LD_INT 1
61404: NEG
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 1
61412: NEG
61413: PUSH
61414: LD_INT 2
61416: NEG
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 0
61424: PUSH
61425: LD_INT 2
61427: NEG
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 1
61435: PUSH
61436: LD_INT 1
61438: NEG
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 2
61446: PUSH
61447: LD_INT 1
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 2
61456: PUSH
61457: LD_INT 2
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 1
61466: PUSH
61467: LD_INT 2
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 0
61476: PUSH
61477: LD_INT 2
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 1
61486: NEG
61487: PUSH
61488: LD_INT 1
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 2
61497: NEG
61498: PUSH
61499: LD_INT 0
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 2
61508: NEG
61509: PUSH
61510: LD_INT 1
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 1
61520: NEG
61521: PUSH
61522: LD_INT 3
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 1
61532: PUSH
61533: LD_INT 2
61535: NEG
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 3
61543: PUSH
61544: LD_INT 2
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 2
61553: PUSH
61554: LD_INT 3
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 2
61563: NEG
61564: PUSH
61565: LD_INT 1
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 3
61574: NEG
61575: PUSH
61576: LD_INT 1
61578: NEG
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61609: LD_ADDR_VAR 0 33
61613: PUSH
61614: LD_INT 0
61616: PUSH
61617: LD_INT 0
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 0
61626: PUSH
61627: LD_INT 1
61629: NEG
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 1
61637: PUSH
61638: LD_INT 0
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 1
61647: PUSH
61648: LD_INT 1
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 0
61657: PUSH
61658: LD_INT 1
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 1
61667: NEG
61668: PUSH
61669: LD_INT 0
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 1
61678: NEG
61679: PUSH
61680: LD_INT 1
61682: NEG
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 1
61690: NEG
61691: PUSH
61692: LD_INT 2
61694: NEG
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 1
61702: PUSH
61703: LD_INT 1
61705: NEG
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 2
61713: PUSH
61714: LD_INT 0
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 2
61723: PUSH
61724: LD_INT 1
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 1
61733: PUSH
61734: LD_INT 2
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 0
61743: PUSH
61744: LD_INT 2
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 1
61753: NEG
61754: PUSH
61755: LD_INT 1
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 2
61764: NEG
61765: PUSH
61766: LD_INT 0
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 2
61775: NEG
61776: PUSH
61777: LD_INT 1
61779: NEG
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 2
61787: NEG
61788: PUSH
61789: LD_INT 2
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 2
61799: NEG
61800: PUSH
61801: LD_INT 3
61803: NEG
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 2
61811: PUSH
61812: LD_INT 1
61814: NEG
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 3
61822: PUSH
61823: LD_INT 1
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 1
61832: PUSH
61833: LD_INT 3
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 1
61842: NEG
61843: PUSH
61844: LD_INT 2
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 3
61853: NEG
61854: PUSH
61855: LD_INT 2
61857: NEG
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61888: LD_ADDR_VAR 0 34
61892: PUSH
61893: LD_INT 0
61895: PUSH
61896: LD_INT 0
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 0
61905: PUSH
61906: LD_INT 1
61908: NEG
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 1
61916: PUSH
61917: LD_INT 0
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 1
61926: PUSH
61927: LD_INT 1
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 0
61936: PUSH
61937: LD_INT 1
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 1
61946: NEG
61947: PUSH
61948: LD_INT 0
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 1
61957: NEG
61958: PUSH
61959: LD_INT 1
61961: NEG
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 1
61969: NEG
61970: PUSH
61971: LD_INT 2
61973: NEG
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: LD_INT 2
61984: NEG
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 1
61992: PUSH
61993: LD_INT 1
61995: NEG
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 2
62003: PUSH
62004: LD_INT 1
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 2
62013: PUSH
62014: LD_INT 2
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 1
62023: PUSH
62024: LD_INT 2
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 1
62033: NEG
62034: PUSH
62035: LD_INT 1
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 2
62044: NEG
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 2
62055: NEG
62056: PUSH
62057: LD_INT 1
62059: NEG
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 2
62067: NEG
62068: PUSH
62069: LD_INT 2
62071: NEG
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 1
62079: NEG
62080: PUSH
62081: LD_INT 3
62083: NEG
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 1
62091: PUSH
62092: LD_INT 2
62094: NEG
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 3
62102: PUSH
62103: LD_INT 2
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 2
62112: PUSH
62113: LD_INT 3
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 2
62122: NEG
62123: PUSH
62124: LD_INT 1
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 3
62133: NEG
62134: PUSH
62135: LD_INT 1
62137: NEG
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62168: LD_ADDR_VAR 0 35
62172: PUSH
62173: LD_INT 0
62175: PUSH
62176: LD_INT 0
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 0
62185: PUSH
62186: LD_INT 1
62188: NEG
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 1
62196: PUSH
62197: LD_INT 0
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 1
62206: PUSH
62207: LD_INT 1
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 0
62216: PUSH
62217: LD_INT 1
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 1
62226: NEG
62227: PUSH
62228: LD_INT 0
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 1
62237: NEG
62238: PUSH
62239: LD_INT 1
62241: NEG
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 2
62249: PUSH
62250: LD_INT 1
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 2
62259: NEG
62260: PUSH
62261: LD_INT 1
62263: NEG
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62280: LD_ADDR_VAR 0 36
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: LD_INT 0
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 0
62297: PUSH
62298: LD_INT 1
62300: NEG
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 1
62308: PUSH
62309: LD_INT 0
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: LD_INT 1
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: LD_INT 1
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 1
62338: NEG
62339: PUSH
62340: LD_INT 0
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 1
62349: NEG
62350: PUSH
62351: LD_INT 1
62353: NEG
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 1
62361: NEG
62362: PUSH
62363: LD_INT 2
62365: NEG
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 1
62373: PUSH
62374: LD_INT 2
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62392: LD_ADDR_VAR 0 37
62396: PUSH
62397: LD_INT 0
62399: PUSH
62400: LD_INT 0
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 0
62409: PUSH
62410: LD_INT 1
62412: NEG
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 1
62420: PUSH
62421: LD_INT 0
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 1
62430: PUSH
62431: LD_INT 1
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 0
62440: PUSH
62441: LD_INT 1
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 1
62450: NEG
62451: PUSH
62452: LD_INT 0
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 1
62461: NEG
62462: PUSH
62463: LD_INT 1
62465: NEG
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: LD_INT 1
62473: PUSH
62474: LD_INT 1
62476: NEG
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 1
62484: NEG
62485: PUSH
62486: LD_INT 1
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62504: LD_ADDR_VAR 0 38
62508: PUSH
62509: LD_INT 0
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 0
62521: PUSH
62522: LD_INT 1
62524: NEG
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 1
62532: PUSH
62533: LD_INT 0
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 1
62542: PUSH
62543: LD_INT 1
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 0
62552: PUSH
62553: LD_INT 1
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 1
62562: NEG
62563: PUSH
62564: LD_INT 0
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 1
62573: NEG
62574: PUSH
62575: LD_INT 1
62577: NEG
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 2
62585: PUSH
62586: LD_INT 1
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 2
62595: NEG
62596: PUSH
62597: LD_INT 1
62599: NEG
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62616: LD_ADDR_VAR 0 39
62620: PUSH
62621: LD_INT 0
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 0
62633: PUSH
62634: LD_INT 1
62636: NEG
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 1
62644: PUSH
62645: LD_INT 0
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 1
62654: PUSH
62655: LD_INT 1
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 0
62664: PUSH
62665: LD_INT 1
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 1
62674: NEG
62675: PUSH
62676: LD_INT 0
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 1
62685: NEG
62686: PUSH
62687: LD_INT 1
62689: NEG
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 1
62697: NEG
62698: PUSH
62699: LD_INT 2
62701: NEG
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 1
62709: PUSH
62710: LD_INT 2
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62728: LD_ADDR_VAR 0 40
62732: PUSH
62733: LD_INT 0
62735: PUSH
62736: LD_INT 0
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 0
62745: PUSH
62746: LD_INT 1
62748: NEG
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 1
62756: PUSH
62757: LD_INT 0
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 1
62766: PUSH
62767: LD_INT 1
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 0
62776: PUSH
62777: LD_INT 1
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 1
62786: NEG
62787: PUSH
62788: LD_INT 0
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 1
62797: NEG
62798: PUSH
62799: LD_INT 1
62801: NEG
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 1
62809: PUSH
62810: LD_INT 1
62812: NEG
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 1
62820: NEG
62821: PUSH
62822: LD_INT 1
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62840: LD_ADDR_VAR 0 41
62844: PUSH
62845: LD_INT 0
62847: PUSH
62848: LD_INT 0
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 0
62857: PUSH
62858: LD_INT 1
62860: NEG
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 1
62868: PUSH
62869: LD_INT 0
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 1
62878: PUSH
62879: LD_INT 1
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 0
62888: PUSH
62889: LD_INT 1
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 1
62898: NEG
62899: PUSH
62900: LD_INT 0
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 1
62909: NEG
62910: PUSH
62911: LD_INT 1
62913: NEG
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 1
62921: NEG
62922: PUSH
62923: LD_INT 2
62925: NEG
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 1
62933: PUSH
62934: LD_INT 1
62936: NEG
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 2
62944: PUSH
62945: LD_INT 0
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 2
62954: PUSH
62955: LD_INT 1
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 2
62964: PUSH
62965: LD_INT 2
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 1
62974: PUSH
62975: LD_INT 2
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 1
62984: NEG
62985: PUSH
62986: LD_INT 1
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 2
62995: NEG
62996: PUSH
62997: LD_INT 0
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 2
63006: NEG
63007: PUSH
63008: LD_INT 1
63010: NEG
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 2
63018: NEG
63019: PUSH
63020: LD_INT 2
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 2
63030: NEG
63031: PUSH
63032: LD_INT 3
63034: NEG
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 2
63042: PUSH
63043: LD_INT 1
63045: NEG
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 3
63053: PUSH
63054: LD_INT 0
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 3
63063: PUSH
63064: LD_INT 1
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 3
63073: PUSH
63074: LD_INT 2
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 3
63083: PUSH
63084: LD_INT 3
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 2
63093: PUSH
63094: LD_INT 3
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 2
63103: NEG
63104: PUSH
63105: LD_INT 1
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 3
63114: NEG
63115: PUSH
63116: LD_INT 0
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 3
63125: NEG
63126: PUSH
63127: LD_INT 1
63129: NEG
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 3
63137: NEG
63138: PUSH
63139: LD_INT 2
63141: NEG
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 3
63149: NEG
63150: PUSH
63151: LD_INT 3
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63190: LD_ADDR_VAR 0 42
63194: PUSH
63195: LD_INT 0
63197: PUSH
63198: LD_INT 0
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 0
63207: PUSH
63208: LD_INT 1
63210: NEG
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 1
63218: PUSH
63219: LD_INT 0
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 1
63228: PUSH
63229: LD_INT 1
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 0
63238: PUSH
63239: LD_INT 1
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 1
63248: NEG
63249: PUSH
63250: LD_INT 0
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 1
63259: NEG
63260: PUSH
63261: LD_INT 1
63263: NEG
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 1
63271: NEG
63272: PUSH
63273: LD_INT 2
63275: NEG
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 0
63283: PUSH
63284: LD_INT 2
63286: NEG
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 1
63294: PUSH
63295: LD_INT 1
63297: NEG
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 2
63305: PUSH
63306: LD_INT 1
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 2
63315: PUSH
63316: LD_INT 2
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 1
63325: PUSH
63326: LD_INT 2
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: LD_INT 2
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 1
63345: NEG
63346: PUSH
63347: LD_INT 1
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 2
63356: NEG
63357: PUSH
63358: LD_INT 1
63360: NEG
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 2
63368: NEG
63369: PUSH
63370: LD_INT 2
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 2
63380: NEG
63381: PUSH
63382: LD_INT 3
63384: NEG
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 1
63392: NEG
63393: PUSH
63394: LD_INT 3
63396: NEG
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 0
63404: PUSH
63405: LD_INT 3
63407: NEG
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 1
63415: PUSH
63416: LD_INT 2
63418: NEG
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 3
63426: PUSH
63427: LD_INT 2
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 3
63436: PUSH
63437: LD_INT 3
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 2
63446: PUSH
63447: LD_INT 3
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 1
63456: PUSH
63457: LD_INT 3
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 0
63466: PUSH
63467: LD_INT 3
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 1
63476: NEG
63477: PUSH
63478: LD_INT 2
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 3
63487: NEG
63488: PUSH
63489: LD_INT 2
63491: NEG
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 3
63499: NEG
63500: PUSH
63501: LD_INT 3
63503: NEG
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63540: LD_ADDR_VAR 0 43
63544: PUSH
63545: LD_INT 0
63547: PUSH
63548: LD_INT 0
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 0
63557: PUSH
63558: LD_INT 1
63560: NEG
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 1
63568: PUSH
63569: LD_INT 0
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 1
63578: PUSH
63579: LD_INT 1
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 0
63588: PUSH
63589: LD_INT 1
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 1
63598: NEG
63599: PUSH
63600: LD_INT 0
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 1
63609: NEG
63610: PUSH
63611: LD_INT 1
63613: NEG
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 1
63621: NEG
63622: PUSH
63623: LD_INT 2
63625: NEG
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 0
63633: PUSH
63634: LD_INT 2
63636: NEG
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 1
63644: PUSH
63645: LD_INT 1
63647: NEG
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 2
63655: PUSH
63656: LD_INT 0
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 2
63665: PUSH
63666: LD_INT 1
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 1
63675: PUSH
63676: LD_INT 2
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 0
63685: PUSH
63686: LD_INT 2
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 1
63695: NEG
63696: PUSH
63697: LD_INT 1
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 2
63706: NEG
63707: PUSH
63708: LD_INT 0
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 2
63717: NEG
63718: PUSH
63719: LD_INT 1
63721: NEG
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 1
63729: NEG
63730: PUSH
63731: LD_INT 3
63733: NEG
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 0
63741: PUSH
63742: LD_INT 3
63744: NEG
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 1
63752: PUSH
63753: LD_INT 2
63755: NEG
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 2
63763: PUSH
63764: LD_INT 1
63766: NEG
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 3
63774: PUSH
63775: LD_INT 0
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 3
63784: PUSH
63785: LD_INT 1
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 1
63794: PUSH
63795: LD_INT 3
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 0
63804: PUSH
63805: LD_INT 3
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 1
63814: NEG
63815: PUSH
63816: LD_INT 2
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 2
63825: NEG
63826: PUSH
63827: LD_INT 1
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 3
63836: NEG
63837: PUSH
63838: LD_INT 0
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 3
63847: NEG
63848: PUSH
63849: LD_INT 1
63851: NEG
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63888: LD_ADDR_VAR 0 44
63892: PUSH
63893: LD_INT 0
63895: PUSH
63896: LD_INT 0
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 0
63905: PUSH
63906: LD_INT 1
63908: NEG
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 1
63916: PUSH
63917: LD_INT 0
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 1
63926: PUSH
63927: LD_INT 1
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 0
63936: PUSH
63937: LD_INT 1
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 1
63946: NEG
63947: PUSH
63948: LD_INT 0
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 1
63957: NEG
63958: PUSH
63959: LD_INT 1
63961: NEG
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 1
63969: NEG
63970: PUSH
63971: LD_INT 2
63973: NEG
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: LD_INT 1
63981: PUSH
63982: LD_INT 1
63984: NEG
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: LD_INT 2
63992: PUSH
63993: LD_INT 0
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 2
64002: PUSH
64003: LD_INT 1
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 2
64012: PUSH
64013: LD_INT 2
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 1
64022: PUSH
64023: LD_INT 2
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 1
64032: NEG
64033: PUSH
64034: LD_INT 1
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 2
64043: NEG
64044: PUSH
64045: LD_INT 0
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 2
64054: NEG
64055: PUSH
64056: LD_INT 1
64058: NEG
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 2
64066: NEG
64067: PUSH
64068: LD_INT 2
64070: NEG
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 2
64078: NEG
64079: PUSH
64080: LD_INT 3
64082: NEG
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 2
64090: PUSH
64091: LD_INT 1
64093: NEG
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 3
64101: PUSH
64102: LD_INT 0
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 3
64111: PUSH
64112: LD_INT 1
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: LD_INT 3
64121: PUSH
64122: LD_INT 2
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 3
64131: PUSH
64132: LD_INT 3
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 2
64141: PUSH
64142: LD_INT 3
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 2
64151: NEG
64152: PUSH
64153: LD_INT 1
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 3
64162: NEG
64163: PUSH
64164: LD_INT 0
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 3
64173: NEG
64174: PUSH
64175: LD_INT 1
64177: NEG
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 3
64185: NEG
64186: PUSH
64187: LD_INT 2
64189: NEG
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 3
64197: NEG
64198: PUSH
64199: LD_INT 3
64201: NEG
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64238: LD_ADDR_VAR 0 45
64242: PUSH
64243: LD_INT 0
64245: PUSH
64246: LD_INT 0
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 0
64255: PUSH
64256: LD_INT 1
64258: NEG
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 1
64266: PUSH
64267: LD_INT 0
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 1
64276: PUSH
64277: LD_INT 1
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 0
64286: PUSH
64287: LD_INT 1
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 1
64296: NEG
64297: PUSH
64298: LD_INT 0
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 1
64307: NEG
64308: PUSH
64309: LD_INT 1
64311: NEG
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 1
64319: NEG
64320: PUSH
64321: LD_INT 2
64323: NEG
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 0
64331: PUSH
64332: LD_INT 2
64334: NEG
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 1
64342: PUSH
64343: LD_INT 1
64345: NEG
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 2
64353: PUSH
64354: LD_INT 1
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 2
64363: PUSH
64364: LD_INT 2
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 1
64373: PUSH
64374: LD_INT 2
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 0
64383: PUSH
64384: LD_INT 2
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 1
64393: NEG
64394: PUSH
64395: LD_INT 1
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 2
64404: NEG
64405: PUSH
64406: LD_INT 1
64408: NEG
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 2
64416: NEG
64417: PUSH
64418: LD_INT 2
64420: NEG
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 2
64428: NEG
64429: PUSH
64430: LD_INT 3
64432: NEG
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 1
64440: NEG
64441: PUSH
64442: LD_INT 3
64444: NEG
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 0
64452: PUSH
64453: LD_INT 3
64455: NEG
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 1
64463: PUSH
64464: LD_INT 2
64466: NEG
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 3
64474: PUSH
64475: LD_INT 2
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 3
64484: PUSH
64485: LD_INT 3
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 2
64494: PUSH
64495: LD_INT 3
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 1
64504: PUSH
64505: LD_INT 3
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 0
64514: PUSH
64515: LD_INT 3
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 1
64524: NEG
64525: PUSH
64526: LD_INT 2
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 3
64535: NEG
64536: PUSH
64537: LD_INT 2
64539: NEG
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 3
64547: NEG
64548: PUSH
64549: LD_INT 3
64551: NEG
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64588: LD_ADDR_VAR 0 46
64592: PUSH
64593: LD_INT 0
64595: PUSH
64596: LD_INT 0
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 0
64605: PUSH
64606: LD_INT 1
64608: NEG
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 1
64616: PUSH
64617: LD_INT 0
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 1
64626: PUSH
64627: LD_INT 1
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 0
64636: PUSH
64637: LD_INT 1
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: LD_INT 1
64646: NEG
64647: PUSH
64648: LD_INT 0
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 1
64657: NEG
64658: PUSH
64659: LD_INT 1
64661: NEG
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 1
64669: NEG
64670: PUSH
64671: LD_INT 2
64673: NEG
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 0
64681: PUSH
64682: LD_INT 2
64684: NEG
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 1
64692: PUSH
64693: LD_INT 1
64695: NEG
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 2
64703: PUSH
64704: LD_INT 0
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 2
64713: PUSH
64714: LD_INT 1
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 1
64723: PUSH
64724: LD_INT 2
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 0
64733: PUSH
64734: LD_INT 2
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 1
64743: NEG
64744: PUSH
64745: LD_INT 1
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 2
64754: NEG
64755: PUSH
64756: LD_INT 0
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 2
64765: NEG
64766: PUSH
64767: LD_INT 1
64769: NEG
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 1
64777: NEG
64778: PUSH
64779: LD_INT 3
64781: NEG
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 0
64789: PUSH
64790: LD_INT 3
64792: NEG
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 1
64800: PUSH
64801: LD_INT 2
64803: NEG
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 2
64811: PUSH
64812: LD_INT 1
64814: NEG
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 3
64822: PUSH
64823: LD_INT 0
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 3
64832: PUSH
64833: LD_INT 1
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 1
64842: PUSH
64843: LD_INT 3
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 0
64852: PUSH
64853: LD_INT 3
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 1
64862: NEG
64863: PUSH
64864: LD_INT 2
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 2
64873: NEG
64874: PUSH
64875: LD_INT 1
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 3
64884: NEG
64885: PUSH
64886: LD_INT 0
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 3
64895: NEG
64896: PUSH
64897: LD_INT 1
64899: NEG
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64936: LD_ADDR_VAR 0 47
64940: PUSH
64941: LD_INT 0
64943: PUSH
64944: LD_INT 0
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 0
64953: PUSH
64954: LD_INT 1
64956: NEG
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 1
64964: PUSH
64965: LD_INT 0
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 1
64974: PUSH
64975: LD_INT 1
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 0
64984: PUSH
64985: LD_INT 1
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 1
64994: NEG
64995: PUSH
64996: LD_INT 0
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 1
65005: NEG
65006: PUSH
65007: LD_INT 1
65009: NEG
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 1
65017: NEG
65018: PUSH
65019: LD_INT 2
65021: NEG
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 0
65029: PUSH
65030: LD_INT 2
65032: NEG
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 1
65040: PUSH
65041: LD_INT 1
65043: NEG
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 2
65051: NEG
65052: PUSH
65053: LD_INT 1
65055: NEG
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 2
65063: NEG
65064: PUSH
65065: LD_INT 2
65067: NEG
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65087: LD_ADDR_VAR 0 48
65091: PUSH
65092: LD_INT 0
65094: PUSH
65095: LD_INT 0
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 0
65104: PUSH
65105: LD_INT 1
65107: NEG
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 1
65115: PUSH
65116: LD_INT 0
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 1
65125: PUSH
65126: LD_INT 1
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 0
65135: PUSH
65136: LD_INT 1
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 1
65145: NEG
65146: PUSH
65147: LD_INT 0
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: LD_INT 1
65156: NEG
65157: PUSH
65158: LD_INT 1
65160: NEG
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 1
65168: NEG
65169: PUSH
65170: LD_INT 2
65172: NEG
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 0
65180: PUSH
65181: LD_INT 2
65183: NEG
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 1
65191: PUSH
65192: LD_INT 1
65194: NEG
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 2
65202: PUSH
65203: LD_INT 0
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 2
65212: PUSH
65213: LD_INT 1
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65234: LD_ADDR_VAR 0 49
65238: PUSH
65239: LD_INT 0
65241: PUSH
65242: LD_INT 0
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 0
65251: PUSH
65252: LD_INT 1
65254: NEG
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: LD_INT 1
65262: PUSH
65263: LD_INT 0
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 1
65272: PUSH
65273: LD_INT 1
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 0
65282: PUSH
65283: LD_INT 1
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 1
65292: NEG
65293: PUSH
65294: LD_INT 0
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 1
65303: NEG
65304: PUSH
65305: LD_INT 1
65307: NEG
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 1
65315: PUSH
65316: LD_INT 1
65318: NEG
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 2
65326: PUSH
65327: LD_INT 0
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 2
65336: PUSH
65337: LD_INT 1
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 2
65346: PUSH
65347: LD_INT 2
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 1
65356: PUSH
65357: LD_INT 2
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65378: LD_ADDR_VAR 0 50
65382: PUSH
65383: LD_INT 0
65385: PUSH
65386: LD_INT 0
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 0
65395: PUSH
65396: LD_INT 1
65398: NEG
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 1
65406: PUSH
65407: LD_INT 0
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 1
65416: PUSH
65417: LD_INT 1
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 0
65426: PUSH
65427: LD_INT 1
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 1
65436: NEG
65437: PUSH
65438: LD_INT 0
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 1
65447: NEG
65448: PUSH
65449: LD_INT 1
65451: NEG
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 2
65459: PUSH
65460: LD_INT 1
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 2
65469: PUSH
65470: LD_INT 2
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 1
65479: PUSH
65480: LD_INT 2
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 0
65489: PUSH
65490: LD_INT 2
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 1
65499: NEG
65500: PUSH
65501: LD_INT 1
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65522: LD_ADDR_VAR 0 51
65526: PUSH
65527: LD_INT 0
65529: PUSH
65530: LD_INT 0
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 0
65539: PUSH
65540: LD_INT 1
65542: NEG
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 1
65550: PUSH
65551: LD_INT 0
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 1
65560: PUSH
65561: LD_INT 1
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 0
65570: PUSH
65571: LD_INT 1
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 1
65580: NEG
65581: PUSH
65582: LD_INT 0
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 1
65591: NEG
65592: PUSH
65593: LD_INT 1
65595: NEG
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 1
65603: PUSH
65604: LD_INT 2
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 0
65613: PUSH
65614: LD_INT 2
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 1
65623: NEG
65624: PUSH
65625: LD_INT 1
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 2
65634: NEG
65635: PUSH
65636: LD_INT 0
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 2
65645: NEG
65646: PUSH
65647: LD_INT 1
65649: NEG
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65669: LD_ADDR_VAR 0 52
65673: PUSH
65674: LD_INT 0
65676: PUSH
65677: LD_INT 0
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 0
65686: PUSH
65687: LD_INT 1
65689: NEG
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: LD_INT 1
65697: PUSH
65698: LD_INT 0
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PUSH
65705: LD_INT 1
65707: PUSH
65708: LD_INT 1
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 0
65717: PUSH
65718: LD_INT 1
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 1
65727: NEG
65728: PUSH
65729: LD_INT 0
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 1
65738: NEG
65739: PUSH
65740: LD_INT 1
65742: NEG
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 1
65750: NEG
65751: PUSH
65752: LD_INT 2
65754: NEG
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 1
65762: NEG
65763: PUSH
65764: LD_INT 1
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 2
65773: NEG
65774: PUSH
65775: LD_INT 0
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 2
65784: NEG
65785: PUSH
65786: LD_INT 1
65788: NEG
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 2
65796: NEG
65797: PUSH
65798: LD_INT 2
65800: NEG
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65820: LD_ADDR_VAR 0 53
65824: PUSH
65825: LD_INT 0
65827: PUSH
65828: LD_INT 0
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 0
65837: PUSH
65838: LD_INT 1
65840: NEG
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: LD_INT 1
65848: PUSH
65849: LD_INT 0
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 1
65858: PUSH
65859: LD_INT 1
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 0
65868: PUSH
65869: LD_INT 1
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 1
65878: NEG
65879: PUSH
65880: LD_INT 0
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 1
65889: NEG
65890: PUSH
65891: LD_INT 1
65893: NEG
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 1
65901: NEG
65902: PUSH
65903: LD_INT 2
65905: NEG
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: LD_INT 0
65913: PUSH
65914: LD_INT 2
65916: NEG
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 1
65924: PUSH
65925: LD_INT 1
65927: NEG
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 2
65935: PUSH
65936: LD_INT 0
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 2
65945: PUSH
65946: LD_INT 1
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 2
65955: PUSH
65956: LD_INT 2
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 1
65965: PUSH
65966: LD_INT 2
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 0
65975: PUSH
65976: LD_INT 2
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 1
65985: NEG
65986: PUSH
65987: LD_INT 1
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 2
65996: NEG
65997: PUSH
65998: LD_INT 0
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 2
66007: NEG
66008: PUSH
66009: LD_INT 1
66011: NEG
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 2
66019: NEG
66020: PUSH
66021: LD_INT 2
66023: NEG
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: LIST
66033: LIST
66034: LIST
66035: LIST
66036: LIST
66037: LIST
66038: LIST
66039: LIST
66040: LIST
66041: LIST
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66050: LD_ADDR_VAR 0 54
66054: PUSH
66055: LD_INT 0
66057: PUSH
66058: LD_INT 0
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 0
66067: PUSH
66068: LD_INT 1
66070: NEG
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: LD_INT 1
66078: PUSH
66079: LD_INT 0
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 1
66088: PUSH
66089: LD_INT 1
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 0
66098: PUSH
66099: LD_INT 1
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: LD_INT 1
66108: NEG
66109: PUSH
66110: LD_INT 0
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: LD_INT 1
66119: NEG
66120: PUSH
66121: LD_INT 1
66123: NEG
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 1
66131: NEG
66132: PUSH
66133: LD_INT 2
66135: NEG
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_INT 0
66143: PUSH
66144: LD_INT 2
66146: NEG
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 1
66154: PUSH
66155: LD_INT 1
66157: NEG
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 2
66165: PUSH
66166: LD_INT 0
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 2
66175: PUSH
66176: LD_INT 1
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 2
66185: PUSH
66186: LD_INT 2
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: PUSH
66193: LD_INT 1
66195: PUSH
66196: LD_INT 2
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 0
66205: PUSH
66206: LD_INT 2
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 1
66215: NEG
66216: PUSH
66217: LD_INT 1
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 2
66226: NEG
66227: PUSH
66228: LD_INT 0
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 2
66237: NEG
66238: PUSH
66239: LD_INT 1
66241: NEG
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 2
66249: NEG
66250: PUSH
66251: LD_INT 2
66253: NEG
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66280: LD_ADDR_VAR 0 55
66284: PUSH
66285: LD_INT 0
66287: PUSH
66288: LD_INT 0
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: LD_INT 0
66297: PUSH
66298: LD_INT 1
66300: NEG
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 1
66308: PUSH
66309: LD_INT 0
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 1
66318: PUSH
66319: LD_INT 1
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 0
66328: PUSH
66329: LD_INT 1
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 1
66338: NEG
66339: PUSH
66340: LD_INT 0
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 1
66349: NEG
66350: PUSH
66351: LD_INT 1
66353: NEG
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 1
66361: NEG
66362: PUSH
66363: LD_INT 2
66365: NEG
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: PUSH
66371: LD_INT 0
66373: PUSH
66374: LD_INT 2
66376: NEG
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 1
66384: PUSH
66385: LD_INT 1
66387: NEG
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 2
66395: PUSH
66396: LD_INT 0
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 2
66405: PUSH
66406: LD_INT 1
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 2
66415: PUSH
66416: LD_INT 2
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 1
66425: PUSH
66426: LD_INT 2
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 0
66435: PUSH
66436: LD_INT 2
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 1
66445: NEG
66446: PUSH
66447: LD_INT 1
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 2
66456: NEG
66457: PUSH
66458: LD_INT 0
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 2
66467: NEG
66468: PUSH
66469: LD_INT 1
66471: NEG
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 2
66479: NEG
66480: PUSH
66481: LD_INT 2
66483: NEG
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: LIST
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: LIST
66504: LIST
66505: LIST
66506: LIST
66507: LIST
66508: LIST
66509: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66510: LD_ADDR_VAR 0 56
66514: PUSH
66515: LD_INT 0
66517: PUSH
66518: LD_INT 0
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 0
66527: PUSH
66528: LD_INT 1
66530: NEG
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: LD_INT 1
66538: PUSH
66539: LD_INT 0
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 1
66548: PUSH
66549: LD_INT 1
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 0
66558: PUSH
66559: LD_INT 1
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 1
66568: NEG
66569: PUSH
66570: LD_INT 0
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 1
66579: NEG
66580: PUSH
66581: LD_INT 1
66583: NEG
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 1
66591: NEG
66592: PUSH
66593: LD_INT 2
66595: NEG
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 0
66603: PUSH
66604: LD_INT 2
66606: NEG
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 1
66614: PUSH
66615: LD_INT 1
66617: NEG
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 2
66625: PUSH
66626: LD_INT 0
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 2
66635: PUSH
66636: LD_INT 1
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 2
66645: PUSH
66646: LD_INT 2
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 1
66655: PUSH
66656: LD_INT 2
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 0
66665: PUSH
66666: LD_INT 2
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 1
66675: NEG
66676: PUSH
66677: LD_INT 1
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 2
66686: NEG
66687: PUSH
66688: LD_INT 0
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 2
66697: NEG
66698: PUSH
66699: LD_INT 1
66701: NEG
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 2
66709: NEG
66710: PUSH
66711: LD_INT 2
66713: NEG
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66740: LD_ADDR_VAR 0 57
66744: PUSH
66745: LD_INT 0
66747: PUSH
66748: LD_INT 0
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PUSH
66755: LD_INT 0
66757: PUSH
66758: LD_INT 1
66760: NEG
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 1
66768: PUSH
66769: LD_INT 0
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 1
66778: PUSH
66779: LD_INT 1
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 0
66788: PUSH
66789: LD_INT 1
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 1
66798: NEG
66799: PUSH
66800: LD_INT 0
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 1
66809: NEG
66810: PUSH
66811: LD_INT 1
66813: NEG
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 1
66821: NEG
66822: PUSH
66823: LD_INT 2
66825: NEG
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 0
66833: PUSH
66834: LD_INT 2
66836: NEG
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 1
66844: PUSH
66845: LD_INT 1
66847: NEG
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 2
66855: PUSH
66856: LD_INT 0
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 2
66865: PUSH
66866: LD_INT 1
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 2
66875: PUSH
66876: LD_INT 2
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 1
66885: PUSH
66886: LD_INT 2
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 0
66895: PUSH
66896: LD_INT 2
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 1
66905: NEG
66906: PUSH
66907: LD_INT 1
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PUSH
66914: LD_INT 2
66916: NEG
66917: PUSH
66918: LD_INT 0
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: LD_INT 2
66927: NEG
66928: PUSH
66929: LD_INT 1
66931: NEG
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: PUSH
66937: LD_INT 2
66939: NEG
66940: PUSH
66941: LD_INT 2
66943: NEG
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66970: LD_ADDR_VAR 0 58
66974: PUSH
66975: LD_INT 0
66977: PUSH
66978: LD_INT 0
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 0
66987: PUSH
66988: LD_INT 1
66990: NEG
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 1
66998: PUSH
66999: LD_INT 0
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: LD_INT 1
67008: PUSH
67009: LD_INT 1
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: LD_INT 0
67018: PUSH
67019: LD_INT 1
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: LD_INT 1
67028: NEG
67029: PUSH
67030: LD_INT 0
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 1
67039: NEG
67040: PUSH
67041: LD_INT 1
67043: NEG
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 1
67051: NEG
67052: PUSH
67053: LD_INT 2
67055: NEG
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 0
67063: PUSH
67064: LD_INT 2
67066: NEG
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 1
67074: PUSH
67075: LD_INT 1
67077: NEG
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 2
67085: PUSH
67086: LD_INT 0
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 2
67095: PUSH
67096: LD_INT 1
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: PUSH
67103: LD_INT 2
67105: PUSH
67106: LD_INT 2
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: LD_INT 1
67115: PUSH
67116: LD_INT 2
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 0
67125: PUSH
67126: LD_INT 2
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 1
67135: NEG
67136: PUSH
67137: LD_INT 1
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: LD_INT 2
67146: NEG
67147: PUSH
67148: LD_INT 0
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: LD_INT 2
67157: NEG
67158: PUSH
67159: LD_INT 1
67161: NEG
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: LD_INT 2
67169: NEG
67170: PUSH
67171: LD_INT 2
67173: NEG
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67200: LD_ADDR_VAR 0 59
67204: PUSH
67205: LD_INT 0
67207: PUSH
67208: LD_INT 0
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 0
67217: PUSH
67218: LD_INT 1
67220: NEG
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 1
67228: PUSH
67229: LD_INT 0
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: LD_INT 1
67238: PUSH
67239: LD_INT 1
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 0
67248: PUSH
67249: LD_INT 1
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 1
67258: NEG
67259: PUSH
67260: LD_INT 0
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: LD_INT 1
67269: NEG
67270: PUSH
67271: LD_INT 1
67273: NEG
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67288: LD_ADDR_VAR 0 60
67292: PUSH
67293: LD_INT 0
67295: PUSH
67296: LD_INT 0
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 0
67305: PUSH
67306: LD_INT 1
67308: NEG
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: LD_INT 1
67316: PUSH
67317: LD_INT 0
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 1
67326: PUSH
67327: LD_INT 1
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 0
67336: PUSH
67337: LD_INT 1
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 1
67346: NEG
67347: PUSH
67348: LD_INT 0
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 1
67357: NEG
67358: PUSH
67359: LD_INT 1
67361: NEG
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: LIST
67371: LIST
67372: LIST
67373: LIST
67374: LIST
67375: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67376: LD_ADDR_VAR 0 61
67380: PUSH
67381: LD_INT 0
67383: PUSH
67384: LD_INT 0
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: LD_INT 0
67393: PUSH
67394: LD_INT 1
67396: NEG
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 1
67404: PUSH
67405: LD_INT 0
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 1
67414: PUSH
67415: LD_INT 1
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 0
67424: PUSH
67425: LD_INT 1
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 1
67434: NEG
67435: PUSH
67436: LD_INT 0
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: LD_INT 1
67445: NEG
67446: PUSH
67447: LD_INT 1
67449: NEG
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: LIST
67463: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67464: LD_ADDR_VAR 0 62
67468: PUSH
67469: LD_INT 0
67471: PUSH
67472: LD_INT 0
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: LD_INT 0
67481: PUSH
67482: LD_INT 1
67484: NEG
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 1
67492: PUSH
67493: LD_INT 0
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: LD_INT 1
67502: PUSH
67503: LD_INT 1
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: LD_INT 0
67512: PUSH
67513: LD_INT 1
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 1
67522: NEG
67523: PUSH
67524: LD_INT 0
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 1
67533: NEG
67534: PUSH
67535: LD_INT 1
67537: NEG
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67552: LD_ADDR_VAR 0 63
67556: PUSH
67557: LD_INT 0
67559: PUSH
67560: LD_INT 0
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 0
67569: PUSH
67570: LD_INT 1
67572: NEG
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: LD_INT 1
67580: PUSH
67581: LD_INT 0
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: LD_INT 1
67590: PUSH
67591: LD_INT 1
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: PUSH
67598: LD_INT 0
67600: PUSH
67601: LD_INT 1
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: LD_INT 1
67610: NEG
67611: PUSH
67612: LD_INT 0
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 1
67621: NEG
67622: PUSH
67623: LD_INT 1
67625: NEG
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67640: LD_ADDR_VAR 0 64
67644: PUSH
67645: LD_INT 0
67647: PUSH
67648: LD_INT 0
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: LD_INT 0
67657: PUSH
67658: LD_INT 1
67660: NEG
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: LD_INT 1
67668: PUSH
67669: LD_INT 0
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 1
67678: PUSH
67679: LD_INT 1
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 0
67688: PUSH
67689: LD_INT 1
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: PUSH
67696: LD_INT 1
67698: NEG
67699: PUSH
67700: LD_INT 0
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 1
67709: NEG
67710: PUSH
67711: LD_INT 1
67713: NEG
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: ST_TO_ADDR
// end ; 1 :
67728: GO 73625
67730: LD_INT 1
67732: DOUBLE
67733: EQUAL
67734: IFTRUE 67738
67736: GO 70361
67738: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67739: LD_ADDR_VAR 0 11
67743: PUSH
67744: LD_INT 1
67746: NEG
67747: PUSH
67748: LD_INT 3
67750: NEG
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: LD_INT 0
67758: PUSH
67759: LD_INT 3
67761: NEG
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 1
67769: PUSH
67770: LD_INT 2
67772: NEG
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: LIST
67782: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67783: LD_ADDR_VAR 0 12
67787: PUSH
67788: LD_INT 2
67790: PUSH
67791: LD_INT 1
67793: NEG
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 3
67801: PUSH
67802: LD_INT 0
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 3
67811: PUSH
67812: LD_INT 1
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: LIST
67823: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67824: LD_ADDR_VAR 0 13
67828: PUSH
67829: LD_INT 3
67831: PUSH
67832: LD_INT 2
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 3
67841: PUSH
67842: LD_INT 3
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PUSH
67849: LD_INT 2
67851: PUSH
67852: LD_INT 3
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: LIST
67863: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67864: LD_ADDR_VAR 0 14
67868: PUSH
67869: LD_INT 1
67871: PUSH
67872: LD_INT 3
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: LD_INT 0
67881: PUSH
67882: LD_INT 3
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: PUSH
67889: LD_INT 1
67891: NEG
67892: PUSH
67893: LD_INT 2
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: LIST
67904: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67905: LD_ADDR_VAR 0 15
67909: PUSH
67910: LD_INT 2
67912: NEG
67913: PUSH
67914: LD_INT 1
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 3
67923: NEG
67924: PUSH
67925: LD_INT 0
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 3
67934: NEG
67935: PUSH
67936: LD_INT 1
67938: NEG
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: LIST
67948: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67949: LD_ADDR_VAR 0 16
67953: PUSH
67954: LD_INT 2
67956: NEG
67957: PUSH
67958: LD_INT 3
67960: NEG
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 3
67968: NEG
67969: PUSH
67970: LD_INT 2
67972: NEG
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: LD_INT 3
67980: NEG
67981: PUSH
67982: LD_INT 3
67984: NEG
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: LIST
67994: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67995: LD_ADDR_VAR 0 17
67999: PUSH
68000: LD_INT 1
68002: NEG
68003: PUSH
68004: LD_INT 3
68006: NEG
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 0
68014: PUSH
68015: LD_INT 3
68017: NEG
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 1
68025: PUSH
68026: LD_INT 2
68028: NEG
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: LIST
68038: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68039: LD_ADDR_VAR 0 18
68043: PUSH
68044: LD_INT 2
68046: PUSH
68047: LD_INT 1
68049: NEG
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: PUSH
68055: LD_INT 3
68057: PUSH
68058: LD_INT 0
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 3
68067: PUSH
68068: LD_INT 1
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: LIST
68079: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68080: LD_ADDR_VAR 0 19
68084: PUSH
68085: LD_INT 3
68087: PUSH
68088: LD_INT 2
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 3
68097: PUSH
68098: LD_INT 3
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 2
68107: PUSH
68108: LD_INT 3
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: LIST
68119: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68120: LD_ADDR_VAR 0 20
68124: PUSH
68125: LD_INT 1
68127: PUSH
68128: LD_INT 3
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: PUSH
68135: LD_INT 0
68137: PUSH
68138: LD_INT 3
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: LD_INT 1
68147: NEG
68148: PUSH
68149: LD_INT 2
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: LIST
68160: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68161: LD_ADDR_VAR 0 21
68165: PUSH
68166: LD_INT 2
68168: NEG
68169: PUSH
68170: LD_INT 1
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: LD_INT 3
68179: NEG
68180: PUSH
68181: LD_INT 0
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_INT 3
68190: NEG
68191: PUSH
68192: LD_INT 1
68194: NEG
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: LIST
68204: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68205: LD_ADDR_VAR 0 22
68209: PUSH
68210: LD_INT 2
68212: NEG
68213: PUSH
68214: LD_INT 3
68216: NEG
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 3
68224: NEG
68225: PUSH
68226: LD_INT 2
68228: NEG
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: LD_INT 3
68236: NEG
68237: PUSH
68238: LD_INT 3
68240: NEG
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: LIST
68250: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
68251: LD_ADDR_VAR 0 23
68255: PUSH
68256: LD_INT 0
68258: PUSH
68259: LD_INT 3
68261: NEG
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: LD_INT 1
68269: NEG
68270: PUSH
68271: LD_INT 4
68273: NEG
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 1
68281: PUSH
68282: LD_INT 3
68284: NEG
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: LIST
68294: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
68295: LD_ADDR_VAR 0 24
68299: PUSH
68300: LD_INT 3
68302: PUSH
68303: LD_INT 0
68305: PUSH
68306: EMPTY
68307: LIST
68308: LIST
68309: PUSH
68310: LD_INT 3
68312: PUSH
68313: LD_INT 1
68315: NEG
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: LD_INT 4
68323: PUSH
68324: LD_INT 1
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: LIST
68335: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
68336: LD_ADDR_VAR 0 25
68340: PUSH
68341: LD_INT 3
68343: PUSH
68344: LD_INT 3
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: LD_INT 4
68353: PUSH
68354: LD_INT 3
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 3
68363: PUSH
68364: LD_INT 4
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: LIST
68375: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68376: LD_ADDR_VAR 0 26
68380: PUSH
68381: LD_INT 0
68383: PUSH
68384: LD_INT 3
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: PUSH
68391: LD_INT 1
68393: PUSH
68394: LD_INT 4
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: LD_INT 1
68403: NEG
68404: PUSH
68405: LD_INT 3
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: LIST
68416: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68417: LD_ADDR_VAR 0 27
68421: PUSH
68422: LD_INT 3
68424: NEG
68425: PUSH
68426: LD_INT 0
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 3
68435: NEG
68436: PUSH
68437: LD_INT 1
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 4
68446: NEG
68447: PUSH
68448: LD_INT 1
68450: NEG
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: LIST
68460: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68461: LD_ADDR_VAR 0 28
68465: PUSH
68466: LD_INT 3
68468: NEG
68469: PUSH
68470: LD_INT 3
68472: NEG
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: LD_INT 3
68480: NEG
68481: PUSH
68482: LD_INT 4
68484: NEG
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: LD_INT 4
68492: NEG
68493: PUSH
68494: LD_INT 3
68496: NEG
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: LIST
68506: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68507: LD_ADDR_VAR 0 29
68511: PUSH
68512: LD_INT 1
68514: NEG
68515: PUSH
68516: LD_INT 3
68518: NEG
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: LD_INT 0
68526: PUSH
68527: LD_INT 3
68529: NEG
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 1
68537: PUSH
68538: LD_INT 2
68540: NEG
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: LD_INT 1
68548: NEG
68549: PUSH
68550: LD_INT 4
68552: NEG
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: LD_INT 0
68560: PUSH
68561: LD_INT 4
68563: NEG
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: LD_INT 1
68571: PUSH
68572: LD_INT 3
68574: NEG
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 1
68582: NEG
68583: PUSH
68584: LD_INT 5
68586: NEG
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 0
68594: PUSH
68595: LD_INT 5
68597: NEG
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: PUSH
68603: LD_INT 1
68605: PUSH
68606: LD_INT 4
68608: NEG
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 1
68616: NEG
68617: PUSH
68618: LD_INT 6
68620: NEG
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 0
68628: PUSH
68629: LD_INT 6
68631: NEG
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: PUSH
68637: LD_INT 1
68639: PUSH
68640: LD_INT 5
68642: NEG
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: LIST
68652: LIST
68653: LIST
68654: LIST
68655: LIST
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: LIST
68661: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68662: LD_ADDR_VAR 0 30
68666: PUSH
68667: LD_INT 2
68669: PUSH
68670: LD_INT 1
68672: NEG
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 3
68680: PUSH
68681: LD_INT 0
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 3
68690: PUSH
68691: LD_INT 1
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: LD_INT 3
68700: PUSH
68701: LD_INT 1
68703: NEG
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: LD_INT 4
68711: PUSH
68712: LD_INT 0
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PUSH
68719: LD_INT 4
68721: PUSH
68722: LD_INT 1
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: LD_INT 4
68731: PUSH
68732: LD_INT 1
68734: NEG
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_INT 5
68742: PUSH
68743: LD_INT 0
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: PUSH
68750: LD_INT 5
68752: PUSH
68753: LD_INT 1
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: PUSH
68760: LD_INT 5
68762: PUSH
68763: LD_INT 1
68765: NEG
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: PUSH
68771: LD_INT 6
68773: PUSH
68774: LD_INT 0
68776: PUSH
68777: EMPTY
68778: LIST
68779: LIST
68780: PUSH
68781: LD_INT 6
68783: PUSH
68784: LD_INT 1
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68805: LD_ADDR_VAR 0 31
68809: PUSH
68810: LD_INT 3
68812: PUSH
68813: LD_INT 2
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 3
68822: PUSH
68823: LD_INT 3
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 2
68832: PUSH
68833: LD_INT 3
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: LD_INT 4
68842: PUSH
68843: LD_INT 3
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 4
68852: PUSH
68853: LD_INT 4
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: LD_INT 3
68862: PUSH
68863: LD_INT 4
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: LD_INT 5
68872: PUSH
68873: LD_INT 4
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 5
68882: PUSH
68883: LD_INT 5
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: LD_INT 4
68892: PUSH
68893: LD_INT 5
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 6
68902: PUSH
68903: LD_INT 5
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 6
68912: PUSH
68913: LD_INT 6
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: PUSH
68920: LD_INT 5
68922: PUSH
68923: LD_INT 6
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: LIST
68934: LIST
68935: LIST
68936: LIST
68937: LIST
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68944: LD_ADDR_VAR 0 32
68948: PUSH
68949: LD_INT 1
68951: PUSH
68952: LD_INT 3
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 0
68961: PUSH
68962: LD_INT 3
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: LD_INT 1
68971: NEG
68972: PUSH
68973: LD_INT 2
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: PUSH
68980: LD_INT 1
68982: PUSH
68983: LD_INT 4
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 0
68992: PUSH
68993: LD_INT 4
68995: PUSH
68996: EMPTY
68997: LIST
68998: LIST
68999: PUSH
69000: LD_INT 1
69002: NEG
69003: PUSH
69004: LD_INT 3
69006: PUSH
69007: EMPTY
69008: LIST
69009: LIST
69010: PUSH
69011: LD_INT 1
69013: PUSH
69014: LD_INT 5
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: PUSH
69021: LD_INT 0
69023: PUSH
69024: LD_INT 5
69026: PUSH
69027: EMPTY
69028: LIST
69029: LIST
69030: PUSH
69031: LD_INT 1
69033: NEG
69034: PUSH
69035: LD_INT 4
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: PUSH
69042: LD_INT 1
69044: PUSH
69045: LD_INT 6
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: PUSH
69052: LD_INT 0
69054: PUSH
69055: LD_INT 6
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: PUSH
69062: LD_INT 1
69064: NEG
69065: PUSH
69066: LD_INT 5
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: LIST
69077: LIST
69078: LIST
69079: LIST
69080: LIST
69081: LIST
69082: LIST
69083: LIST
69084: LIST
69085: LIST
69086: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
69087: LD_ADDR_VAR 0 33
69091: PUSH
69092: LD_INT 2
69094: NEG
69095: PUSH
69096: LD_INT 1
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PUSH
69103: LD_INT 3
69105: NEG
69106: PUSH
69107: LD_INT 0
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: LD_INT 3
69116: NEG
69117: PUSH
69118: LD_INT 1
69120: NEG
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 3
69128: NEG
69129: PUSH
69130: LD_INT 1
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 4
69139: NEG
69140: PUSH
69141: LD_INT 0
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 4
69150: NEG
69151: PUSH
69152: LD_INT 1
69154: NEG
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: PUSH
69160: LD_INT 4
69162: NEG
69163: PUSH
69164: LD_INT 1
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PUSH
69171: LD_INT 5
69173: NEG
69174: PUSH
69175: LD_INT 0
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: LD_INT 5
69184: NEG
69185: PUSH
69186: LD_INT 1
69188: NEG
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: LD_INT 5
69196: NEG
69197: PUSH
69198: LD_INT 1
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: LD_INT 6
69207: NEG
69208: PUSH
69209: LD_INT 0
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: LD_INT 6
69218: NEG
69219: PUSH
69220: LD_INT 1
69222: NEG
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
69242: LD_ADDR_VAR 0 34
69246: PUSH
69247: LD_INT 2
69249: NEG
69250: PUSH
69251: LD_INT 3
69253: NEG
69254: PUSH
69255: EMPTY
69256: LIST
69257: LIST
69258: PUSH
69259: LD_INT 3
69261: NEG
69262: PUSH
69263: LD_INT 2
69265: NEG
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: PUSH
69271: LD_INT 3
69273: NEG
69274: PUSH
69275: LD_INT 3
69277: NEG
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: LD_INT 3
69285: NEG
69286: PUSH
69287: LD_INT 4
69289: NEG
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: LD_INT 4
69297: NEG
69298: PUSH
69299: LD_INT 3
69301: NEG
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: LD_INT 4
69309: NEG
69310: PUSH
69311: LD_INT 4
69313: NEG
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: LD_INT 4
69321: NEG
69322: PUSH
69323: LD_INT 5
69325: NEG
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 5
69333: NEG
69334: PUSH
69335: LD_INT 4
69337: NEG
69338: PUSH
69339: EMPTY
69340: LIST
69341: LIST
69342: PUSH
69343: LD_INT 5
69345: NEG
69346: PUSH
69347: LD_INT 5
69349: NEG
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: PUSH
69355: LD_INT 5
69357: NEG
69358: PUSH
69359: LD_INT 6
69361: NEG
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: LD_INT 6
69369: NEG
69370: PUSH
69371: LD_INT 5
69373: NEG
69374: PUSH
69375: EMPTY
69376: LIST
69377: LIST
69378: PUSH
69379: LD_INT 6
69381: NEG
69382: PUSH
69383: LD_INT 6
69385: NEG
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69405: LD_ADDR_VAR 0 41
69409: PUSH
69410: LD_INT 0
69412: PUSH
69413: LD_INT 2
69415: NEG
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: PUSH
69421: LD_INT 1
69423: NEG
69424: PUSH
69425: LD_INT 3
69427: NEG
69428: PUSH
69429: EMPTY
69430: LIST
69431: LIST
69432: PUSH
69433: LD_INT 1
69435: PUSH
69436: LD_INT 2
69438: NEG
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: LIST
69448: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69449: LD_ADDR_VAR 0 42
69453: PUSH
69454: LD_INT 2
69456: PUSH
69457: LD_INT 0
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: LD_INT 2
69466: PUSH
69467: LD_INT 1
69469: NEG
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: PUSH
69475: LD_INT 3
69477: PUSH
69478: LD_INT 1
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: LIST
69489: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69490: LD_ADDR_VAR 0 43
69494: PUSH
69495: LD_INT 2
69497: PUSH
69498: LD_INT 2
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: LD_INT 3
69507: PUSH
69508: LD_INT 2
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: PUSH
69515: LD_INT 2
69517: PUSH
69518: LD_INT 3
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: LIST
69529: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69530: LD_ADDR_VAR 0 44
69534: PUSH
69535: LD_INT 0
69537: PUSH
69538: LD_INT 2
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: PUSH
69545: LD_INT 1
69547: PUSH
69548: LD_INT 3
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: LD_INT 1
69557: NEG
69558: PUSH
69559: LD_INT 2
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: LIST
69570: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69571: LD_ADDR_VAR 0 45
69575: PUSH
69576: LD_INT 2
69578: NEG
69579: PUSH
69580: LD_INT 0
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: LD_INT 2
69589: NEG
69590: PUSH
69591: LD_INT 1
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_INT 3
69600: NEG
69601: PUSH
69602: LD_INT 1
69604: NEG
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: LIST
69614: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69615: LD_ADDR_VAR 0 46
69619: PUSH
69620: LD_INT 2
69622: NEG
69623: PUSH
69624: LD_INT 2
69626: NEG
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 2
69634: NEG
69635: PUSH
69636: LD_INT 3
69638: NEG
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: PUSH
69644: LD_INT 3
69646: NEG
69647: PUSH
69648: LD_INT 2
69650: NEG
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: EMPTY
69657: LIST
69658: LIST
69659: LIST
69660: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69661: LD_ADDR_VAR 0 47
69665: PUSH
69666: LD_INT 2
69668: NEG
69669: PUSH
69670: LD_INT 3
69672: NEG
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: LD_INT 1
69680: NEG
69681: PUSH
69682: LD_INT 3
69684: NEG
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69694: LD_ADDR_VAR 0 48
69698: PUSH
69699: LD_INT 1
69701: PUSH
69702: LD_INT 2
69704: NEG
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 2
69712: PUSH
69713: LD_INT 1
69715: NEG
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69725: LD_ADDR_VAR 0 49
69729: PUSH
69730: LD_INT 3
69732: PUSH
69733: LD_INT 1
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: PUSH
69740: LD_INT 3
69742: PUSH
69743: LD_INT 2
69745: PUSH
69746: EMPTY
69747: LIST
69748: LIST
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69754: LD_ADDR_VAR 0 50
69758: PUSH
69759: LD_INT 2
69761: PUSH
69762: LD_INT 3
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PUSH
69769: LD_INT 1
69771: PUSH
69772: LD_INT 3
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69783: LD_ADDR_VAR 0 51
69787: PUSH
69788: LD_INT 1
69790: NEG
69791: PUSH
69792: LD_INT 2
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PUSH
69799: LD_INT 2
69801: NEG
69802: PUSH
69803: LD_INT 1
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69814: LD_ADDR_VAR 0 52
69818: PUSH
69819: LD_INT 3
69821: NEG
69822: PUSH
69823: LD_INT 1
69825: NEG
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_INT 3
69833: NEG
69834: PUSH
69835: LD_INT 2
69837: NEG
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69847: LD_ADDR_VAR 0 53
69851: PUSH
69852: LD_INT 1
69854: NEG
69855: PUSH
69856: LD_INT 3
69858: NEG
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PUSH
69864: LD_INT 0
69866: PUSH
69867: LD_INT 3
69869: NEG
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: LD_INT 1
69877: PUSH
69878: LD_INT 2
69880: NEG
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: LIST
69890: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69891: LD_ADDR_VAR 0 54
69895: PUSH
69896: LD_INT 2
69898: PUSH
69899: LD_INT 1
69901: NEG
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: LD_INT 3
69909: PUSH
69910: LD_INT 0
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 3
69919: PUSH
69920: LD_INT 1
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: LIST
69931: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69932: LD_ADDR_VAR 0 55
69936: PUSH
69937: LD_INT 3
69939: PUSH
69940: LD_INT 2
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: LD_INT 3
69949: PUSH
69950: LD_INT 3
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PUSH
69957: LD_INT 2
69959: PUSH
69960: LD_INT 3
69962: PUSH
69963: EMPTY
69964: LIST
69965: LIST
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: LIST
69971: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69972: LD_ADDR_VAR 0 56
69976: PUSH
69977: LD_INT 1
69979: PUSH
69980: LD_INT 3
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: PUSH
69987: LD_INT 0
69989: PUSH
69990: LD_INT 3
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: PUSH
69997: LD_INT 1
69999: NEG
70000: PUSH
70001: LD_INT 2
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: LIST
70012: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70013: LD_ADDR_VAR 0 57
70017: PUSH
70018: LD_INT 2
70020: NEG
70021: PUSH
70022: LD_INT 1
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: PUSH
70029: LD_INT 3
70031: NEG
70032: PUSH
70033: LD_INT 0
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: LD_INT 3
70042: NEG
70043: PUSH
70044: LD_INT 1
70046: NEG
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: LIST
70056: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70057: LD_ADDR_VAR 0 58
70061: PUSH
70062: LD_INT 2
70064: NEG
70065: PUSH
70066: LD_INT 3
70068: NEG
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: LD_INT 3
70076: NEG
70077: PUSH
70078: LD_INT 2
70080: NEG
70081: PUSH
70082: EMPTY
70083: LIST
70084: LIST
70085: PUSH
70086: LD_INT 3
70088: NEG
70089: PUSH
70090: LD_INT 3
70092: NEG
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: LIST
70102: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
70103: LD_ADDR_VAR 0 59
70107: PUSH
70108: LD_INT 1
70110: NEG
70111: PUSH
70112: LD_INT 2
70114: NEG
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: LD_INT 0
70122: PUSH
70123: LD_INT 2
70125: NEG
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: PUSH
70131: LD_INT 1
70133: PUSH
70134: LD_INT 1
70136: NEG
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: LIST
70146: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70147: LD_ADDR_VAR 0 60
70151: PUSH
70152: LD_INT 1
70154: PUSH
70155: LD_INT 1
70157: NEG
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: PUSH
70163: LD_INT 2
70165: PUSH
70166: LD_INT 0
70168: PUSH
70169: EMPTY
70170: LIST
70171: LIST
70172: PUSH
70173: LD_INT 2
70175: PUSH
70176: LD_INT 1
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: LIST
70187: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70188: LD_ADDR_VAR 0 61
70192: PUSH
70193: LD_INT 2
70195: PUSH
70196: LD_INT 1
70198: PUSH
70199: EMPTY
70200: LIST
70201: LIST
70202: PUSH
70203: LD_INT 2
70205: PUSH
70206: LD_INT 2
70208: PUSH
70209: EMPTY
70210: LIST
70211: LIST
70212: PUSH
70213: LD_INT 1
70215: PUSH
70216: LD_INT 2
70218: PUSH
70219: EMPTY
70220: LIST
70221: LIST
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: LIST
70227: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
70228: LD_ADDR_VAR 0 62
70232: PUSH
70233: LD_INT 1
70235: PUSH
70236: LD_INT 2
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: PUSH
70243: LD_INT 0
70245: PUSH
70246: LD_INT 2
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: PUSH
70253: LD_INT 1
70255: NEG
70256: PUSH
70257: LD_INT 1
70259: PUSH
70260: EMPTY
70261: LIST
70262: LIST
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: LIST
70268: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70269: LD_ADDR_VAR 0 63
70273: PUSH
70274: LD_INT 1
70276: NEG
70277: PUSH
70278: LD_INT 1
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: PUSH
70285: LD_INT 2
70287: NEG
70288: PUSH
70289: LD_INT 0
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: PUSH
70296: LD_INT 2
70298: NEG
70299: PUSH
70300: LD_INT 1
70302: NEG
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: LIST
70312: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70313: LD_ADDR_VAR 0 64
70317: PUSH
70318: LD_INT 1
70320: NEG
70321: PUSH
70322: LD_INT 2
70324: NEG
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 2
70332: NEG
70333: PUSH
70334: LD_INT 1
70336: NEG
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 2
70344: NEG
70345: PUSH
70346: LD_INT 2
70348: NEG
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: LIST
70358: ST_TO_ADDR
// end ; 2 :
70359: GO 73625
70361: LD_INT 2
70363: DOUBLE
70364: EQUAL
70365: IFTRUE 70369
70367: GO 73624
70369: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
70370: LD_ADDR_VAR 0 29
70374: PUSH
70375: LD_INT 4
70377: PUSH
70378: LD_INT 0
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: LD_INT 4
70387: PUSH
70388: LD_INT 1
70390: NEG
70391: PUSH
70392: EMPTY
70393: LIST
70394: LIST
70395: PUSH
70396: LD_INT 5
70398: PUSH
70399: LD_INT 0
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: PUSH
70406: LD_INT 5
70408: PUSH
70409: LD_INT 1
70411: PUSH
70412: EMPTY
70413: LIST
70414: LIST
70415: PUSH
70416: LD_INT 4
70418: PUSH
70419: LD_INT 1
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: PUSH
70426: LD_INT 3
70428: PUSH
70429: LD_INT 0
70431: PUSH
70432: EMPTY
70433: LIST
70434: LIST
70435: PUSH
70436: LD_INT 3
70438: PUSH
70439: LD_INT 1
70441: NEG
70442: PUSH
70443: EMPTY
70444: LIST
70445: LIST
70446: PUSH
70447: LD_INT 3
70449: PUSH
70450: LD_INT 2
70452: NEG
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: LD_INT 5
70460: PUSH
70461: LD_INT 2
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: PUSH
70468: LD_INT 3
70470: PUSH
70471: LD_INT 3
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: PUSH
70478: LD_INT 3
70480: PUSH
70481: LD_INT 2
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: PUSH
70488: LD_INT 4
70490: PUSH
70491: LD_INT 3
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 4
70500: PUSH
70501: LD_INT 4
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: LD_INT 3
70510: PUSH
70511: LD_INT 4
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: PUSH
70518: LD_INT 2
70520: PUSH
70521: LD_INT 3
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_INT 2
70530: PUSH
70531: LD_INT 2
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: LD_INT 4
70540: PUSH
70541: LD_INT 2
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: PUSH
70548: LD_INT 2
70550: PUSH
70551: LD_INT 4
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: PUSH
70558: LD_INT 0
70560: PUSH
70561: LD_INT 4
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: PUSH
70568: LD_INT 0
70570: PUSH
70571: LD_INT 3
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: PUSH
70578: LD_INT 1
70580: PUSH
70581: LD_INT 4
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: PUSH
70588: LD_INT 1
70590: PUSH
70591: LD_INT 5
70593: PUSH
70594: EMPTY
70595: LIST
70596: LIST
70597: PUSH
70598: LD_INT 0
70600: PUSH
70601: LD_INT 5
70603: PUSH
70604: EMPTY
70605: LIST
70606: LIST
70607: PUSH
70608: LD_INT 1
70610: NEG
70611: PUSH
70612: LD_INT 4
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: PUSH
70619: LD_INT 1
70621: NEG
70622: PUSH
70623: LD_INT 3
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: LD_INT 2
70632: PUSH
70633: LD_INT 5
70635: PUSH
70636: EMPTY
70637: LIST
70638: LIST
70639: PUSH
70640: LD_INT 2
70642: NEG
70643: PUSH
70644: LD_INT 3
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 3
70653: NEG
70654: PUSH
70655: LD_INT 0
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: PUSH
70662: LD_INT 3
70664: NEG
70665: PUSH
70666: LD_INT 1
70668: NEG
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: PUSH
70674: LD_INT 2
70676: NEG
70677: PUSH
70678: LD_INT 0
70680: PUSH
70681: EMPTY
70682: LIST
70683: LIST
70684: PUSH
70685: LD_INT 2
70687: NEG
70688: PUSH
70689: LD_INT 1
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: PUSH
70696: LD_INT 3
70698: NEG
70699: PUSH
70700: LD_INT 1
70702: PUSH
70703: EMPTY
70704: LIST
70705: LIST
70706: PUSH
70707: LD_INT 4
70709: NEG
70710: PUSH
70711: LD_INT 0
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PUSH
70718: LD_INT 4
70720: NEG
70721: PUSH
70722: LD_INT 1
70724: NEG
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: PUSH
70730: LD_INT 4
70732: NEG
70733: PUSH
70734: LD_INT 2
70736: NEG
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 2
70744: NEG
70745: PUSH
70746: LD_INT 2
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: PUSH
70753: LD_INT 4
70755: NEG
70756: PUSH
70757: LD_INT 4
70759: NEG
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PUSH
70765: LD_INT 4
70767: NEG
70768: PUSH
70769: LD_INT 5
70771: NEG
70772: PUSH
70773: EMPTY
70774: LIST
70775: LIST
70776: PUSH
70777: LD_INT 3
70779: NEG
70780: PUSH
70781: LD_INT 4
70783: NEG
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: PUSH
70789: LD_INT 3
70791: NEG
70792: PUSH
70793: LD_INT 3
70795: NEG
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: PUSH
70801: LD_INT 4
70803: NEG
70804: PUSH
70805: LD_INT 3
70807: NEG
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: PUSH
70813: LD_INT 5
70815: NEG
70816: PUSH
70817: LD_INT 4
70819: NEG
70820: PUSH
70821: EMPTY
70822: LIST
70823: LIST
70824: PUSH
70825: LD_INT 5
70827: NEG
70828: PUSH
70829: LD_INT 5
70831: NEG
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: PUSH
70837: LD_INT 3
70839: NEG
70840: PUSH
70841: LD_INT 5
70843: NEG
70844: PUSH
70845: EMPTY
70846: LIST
70847: LIST
70848: PUSH
70849: LD_INT 5
70851: NEG
70852: PUSH
70853: LD_INT 3
70855: NEG
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: LIST
70886: LIST
70887: LIST
70888: LIST
70889: LIST
70890: LIST
70891: LIST
70892: LIST
70893: LIST
70894: LIST
70895: LIST
70896: LIST
70897: LIST
70898: LIST
70899: LIST
70900: LIST
70901: LIST
70902: LIST
70903: LIST
70904: LIST
70905: LIST
70906: LIST
70907: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70908: LD_ADDR_VAR 0 30
70912: PUSH
70913: LD_INT 4
70915: PUSH
70916: LD_INT 4
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: PUSH
70923: LD_INT 4
70925: PUSH
70926: LD_INT 3
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PUSH
70933: LD_INT 5
70935: PUSH
70936: LD_INT 4
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 5
70945: PUSH
70946: LD_INT 5
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: LD_INT 4
70955: PUSH
70956: LD_INT 5
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: PUSH
70963: LD_INT 3
70965: PUSH
70966: LD_INT 4
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: PUSH
70973: LD_INT 3
70975: PUSH
70976: LD_INT 3
70978: PUSH
70979: EMPTY
70980: LIST
70981: LIST
70982: PUSH
70983: LD_INT 5
70985: PUSH
70986: LD_INT 3
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: PUSH
70993: LD_INT 3
70995: PUSH
70996: LD_INT 5
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: PUSH
71003: LD_INT 0
71005: PUSH
71006: LD_INT 3
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: PUSH
71013: LD_INT 0
71015: PUSH
71016: LD_INT 2
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: PUSH
71023: LD_INT 1
71025: PUSH
71026: LD_INT 3
71028: PUSH
71029: EMPTY
71030: LIST
71031: LIST
71032: PUSH
71033: LD_INT 1
71035: PUSH
71036: LD_INT 4
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: PUSH
71043: LD_INT 0
71045: PUSH
71046: LD_INT 4
71048: PUSH
71049: EMPTY
71050: LIST
71051: LIST
71052: PUSH
71053: LD_INT 1
71055: NEG
71056: PUSH
71057: LD_INT 3
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: PUSH
71064: LD_INT 1
71066: NEG
71067: PUSH
71068: LD_INT 2
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: PUSH
71075: LD_INT 2
71077: PUSH
71078: LD_INT 4
71080: PUSH
71081: EMPTY
71082: LIST
71083: LIST
71084: PUSH
71085: LD_INT 2
71087: NEG
71088: PUSH
71089: LD_INT 2
71091: PUSH
71092: EMPTY
71093: LIST
71094: LIST
71095: PUSH
71096: LD_INT 4
71098: NEG
71099: PUSH
71100: LD_INT 0
71102: PUSH
71103: EMPTY
71104: LIST
71105: LIST
71106: PUSH
71107: LD_INT 4
71109: NEG
71110: PUSH
71111: LD_INT 1
71113: NEG
71114: PUSH
71115: EMPTY
71116: LIST
71117: LIST
71118: PUSH
71119: LD_INT 3
71121: NEG
71122: PUSH
71123: LD_INT 0
71125: PUSH
71126: EMPTY
71127: LIST
71128: LIST
71129: PUSH
71130: LD_INT 3
71132: NEG
71133: PUSH
71134: LD_INT 1
71136: PUSH
71137: EMPTY
71138: LIST
71139: LIST
71140: PUSH
71141: LD_INT 4
71143: NEG
71144: PUSH
71145: LD_INT 1
71147: PUSH
71148: EMPTY
71149: LIST
71150: LIST
71151: PUSH
71152: LD_INT 5
71154: NEG
71155: PUSH
71156: LD_INT 0
71158: PUSH
71159: EMPTY
71160: LIST
71161: LIST
71162: PUSH
71163: LD_INT 5
71165: NEG
71166: PUSH
71167: LD_INT 1
71169: NEG
71170: PUSH
71171: EMPTY
71172: LIST
71173: LIST
71174: PUSH
71175: LD_INT 5
71177: NEG
71178: PUSH
71179: LD_INT 2
71181: NEG
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PUSH
71187: LD_INT 3
71189: NEG
71190: PUSH
71191: LD_INT 2
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: LD_INT 3
71200: NEG
71201: PUSH
71202: LD_INT 3
71204: NEG
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: PUSH
71210: LD_INT 3
71212: NEG
71213: PUSH
71214: LD_INT 4
71216: NEG
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: PUSH
71222: LD_INT 2
71224: NEG
71225: PUSH
71226: LD_INT 3
71228: NEG
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PUSH
71234: LD_INT 2
71236: NEG
71237: PUSH
71238: LD_INT 2
71240: NEG
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: PUSH
71246: LD_INT 3
71248: NEG
71249: PUSH
71250: LD_INT 2
71252: NEG
71253: PUSH
71254: EMPTY
71255: LIST
71256: LIST
71257: PUSH
71258: LD_INT 4
71260: NEG
71261: PUSH
71262: LD_INT 3
71264: NEG
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: PUSH
71270: LD_INT 4
71272: NEG
71273: PUSH
71274: LD_INT 4
71276: NEG
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: PUSH
71282: LD_INT 2
71284: NEG
71285: PUSH
71286: LD_INT 4
71288: NEG
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: PUSH
71294: LD_INT 4
71296: NEG
71297: PUSH
71298: LD_INT 2
71300: NEG
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: PUSH
71306: LD_INT 0
71308: PUSH
71309: LD_INT 4
71311: NEG
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: PUSH
71317: LD_INT 0
71319: PUSH
71320: LD_INT 5
71322: NEG
71323: PUSH
71324: EMPTY
71325: LIST
71326: LIST
71327: PUSH
71328: LD_INT 1
71330: PUSH
71331: LD_INT 4
71333: NEG
71334: PUSH
71335: EMPTY
71336: LIST
71337: LIST
71338: PUSH
71339: LD_INT 1
71341: PUSH
71342: LD_INT 3
71344: NEG
71345: PUSH
71346: EMPTY
71347: LIST
71348: LIST
71349: PUSH
71350: LD_INT 0
71352: PUSH
71353: LD_INT 3
71355: NEG
71356: PUSH
71357: EMPTY
71358: LIST
71359: LIST
71360: PUSH
71361: LD_INT 1
71363: NEG
71364: PUSH
71365: LD_INT 4
71367: NEG
71368: PUSH
71369: EMPTY
71370: LIST
71371: LIST
71372: PUSH
71373: LD_INT 1
71375: NEG
71376: PUSH
71377: LD_INT 5
71379: NEG
71380: PUSH
71381: EMPTY
71382: LIST
71383: LIST
71384: PUSH
71385: LD_INT 2
71387: PUSH
71388: LD_INT 3
71390: NEG
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: PUSH
71396: LD_INT 2
71398: NEG
71399: PUSH
71400: LD_INT 5
71402: NEG
71403: PUSH
71404: EMPTY
71405: LIST
71406: LIST
71407: PUSH
71408: EMPTY
71409: LIST
71410: LIST
71411: LIST
71412: LIST
71413: LIST
71414: LIST
71415: LIST
71416: LIST
71417: LIST
71418: LIST
71419: LIST
71420: LIST
71421: LIST
71422: LIST
71423: LIST
71424: LIST
71425: LIST
71426: LIST
71427: LIST
71428: LIST
71429: LIST
71430: LIST
71431: LIST
71432: LIST
71433: LIST
71434: LIST
71435: LIST
71436: LIST
71437: LIST
71438: LIST
71439: LIST
71440: LIST
71441: LIST
71442: LIST
71443: LIST
71444: LIST
71445: LIST
71446: LIST
71447: LIST
71448: LIST
71449: LIST
71450: LIST
71451: LIST
71452: LIST
71453: LIST
71454: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71455: LD_ADDR_VAR 0 31
71459: PUSH
71460: LD_INT 0
71462: PUSH
71463: LD_INT 4
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: PUSH
71470: LD_INT 0
71472: PUSH
71473: LD_INT 3
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PUSH
71480: LD_INT 1
71482: PUSH
71483: LD_INT 4
71485: PUSH
71486: EMPTY
71487: LIST
71488: LIST
71489: PUSH
71490: LD_INT 1
71492: PUSH
71493: LD_INT 5
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: PUSH
71500: LD_INT 0
71502: PUSH
71503: LD_INT 5
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: PUSH
71510: LD_INT 1
71512: NEG
71513: PUSH
71514: LD_INT 4
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: PUSH
71521: LD_INT 1
71523: NEG
71524: PUSH
71525: LD_INT 3
71527: PUSH
71528: EMPTY
71529: LIST
71530: LIST
71531: PUSH
71532: LD_INT 2
71534: PUSH
71535: LD_INT 5
71537: PUSH
71538: EMPTY
71539: LIST
71540: LIST
71541: PUSH
71542: LD_INT 2
71544: NEG
71545: PUSH
71546: LD_INT 3
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: PUSH
71553: LD_INT 3
71555: NEG
71556: PUSH
71557: LD_INT 0
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: PUSH
71564: LD_INT 3
71566: NEG
71567: PUSH
71568: LD_INT 1
71570: NEG
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: PUSH
71576: LD_INT 2
71578: NEG
71579: PUSH
71580: LD_INT 0
71582: PUSH
71583: EMPTY
71584: LIST
71585: LIST
71586: PUSH
71587: LD_INT 2
71589: NEG
71590: PUSH
71591: LD_INT 1
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: PUSH
71598: LD_INT 3
71600: NEG
71601: PUSH
71602: LD_INT 1
71604: PUSH
71605: EMPTY
71606: LIST
71607: LIST
71608: PUSH
71609: LD_INT 4
71611: NEG
71612: PUSH
71613: LD_INT 0
71615: PUSH
71616: EMPTY
71617: LIST
71618: LIST
71619: PUSH
71620: LD_INT 4
71622: NEG
71623: PUSH
71624: LD_INT 1
71626: NEG
71627: PUSH
71628: EMPTY
71629: LIST
71630: LIST
71631: PUSH
71632: LD_INT 4
71634: NEG
71635: PUSH
71636: LD_INT 2
71638: NEG
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: PUSH
71644: LD_INT 2
71646: NEG
71647: PUSH
71648: LD_INT 2
71650: PUSH
71651: EMPTY
71652: LIST
71653: LIST
71654: PUSH
71655: LD_INT 4
71657: NEG
71658: PUSH
71659: LD_INT 4
71661: NEG
71662: PUSH
71663: EMPTY
71664: LIST
71665: LIST
71666: PUSH
71667: LD_INT 4
71669: NEG
71670: PUSH
71671: LD_INT 5
71673: NEG
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: PUSH
71679: LD_INT 3
71681: NEG
71682: PUSH
71683: LD_INT 4
71685: NEG
71686: PUSH
71687: EMPTY
71688: LIST
71689: LIST
71690: PUSH
71691: LD_INT 3
71693: NEG
71694: PUSH
71695: LD_INT 3
71697: NEG
71698: PUSH
71699: EMPTY
71700: LIST
71701: LIST
71702: PUSH
71703: LD_INT 4
71705: NEG
71706: PUSH
71707: LD_INT 3
71709: NEG
71710: PUSH
71711: EMPTY
71712: LIST
71713: LIST
71714: PUSH
71715: LD_INT 5
71717: NEG
71718: PUSH
71719: LD_INT 4
71721: NEG
71722: PUSH
71723: EMPTY
71724: LIST
71725: LIST
71726: PUSH
71727: LD_INT 5
71729: NEG
71730: PUSH
71731: LD_INT 5
71733: NEG
71734: PUSH
71735: EMPTY
71736: LIST
71737: LIST
71738: PUSH
71739: LD_INT 3
71741: NEG
71742: PUSH
71743: LD_INT 5
71745: NEG
71746: PUSH
71747: EMPTY
71748: LIST
71749: LIST
71750: PUSH
71751: LD_INT 5
71753: NEG
71754: PUSH
71755: LD_INT 3
71757: NEG
71758: PUSH
71759: EMPTY
71760: LIST
71761: LIST
71762: PUSH
71763: LD_INT 0
71765: PUSH
71766: LD_INT 3
71768: NEG
71769: PUSH
71770: EMPTY
71771: LIST
71772: LIST
71773: PUSH
71774: LD_INT 0
71776: PUSH
71777: LD_INT 4
71779: NEG
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PUSH
71785: LD_INT 1
71787: PUSH
71788: LD_INT 3
71790: NEG
71791: PUSH
71792: EMPTY
71793: LIST
71794: LIST
71795: PUSH
71796: LD_INT 1
71798: PUSH
71799: LD_INT 2
71801: NEG
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: PUSH
71807: LD_INT 0
71809: PUSH
71810: LD_INT 2
71812: NEG
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: PUSH
71818: LD_INT 1
71820: NEG
71821: PUSH
71822: LD_INT 3
71824: NEG
71825: PUSH
71826: EMPTY
71827: LIST
71828: LIST
71829: PUSH
71830: LD_INT 1
71832: NEG
71833: PUSH
71834: LD_INT 4
71836: NEG
71837: PUSH
71838: EMPTY
71839: LIST
71840: LIST
71841: PUSH
71842: LD_INT 2
71844: PUSH
71845: LD_INT 2
71847: NEG
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: PUSH
71853: LD_INT 2
71855: NEG
71856: PUSH
71857: LD_INT 4
71859: NEG
71860: PUSH
71861: EMPTY
71862: LIST
71863: LIST
71864: PUSH
71865: LD_INT 4
71867: PUSH
71868: LD_INT 0
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: PUSH
71875: LD_INT 4
71877: PUSH
71878: LD_INT 1
71880: NEG
71881: PUSH
71882: EMPTY
71883: LIST
71884: LIST
71885: PUSH
71886: LD_INT 5
71888: PUSH
71889: LD_INT 0
71891: PUSH
71892: EMPTY
71893: LIST
71894: LIST
71895: PUSH
71896: LD_INT 5
71898: PUSH
71899: LD_INT 1
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: PUSH
71906: LD_INT 4
71908: PUSH
71909: LD_INT 1
71911: PUSH
71912: EMPTY
71913: LIST
71914: LIST
71915: PUSH
71916: LD_INT 3
71918: PUSH
71919: LD_INT 0
71921: PUSH
71922: EMPTY
71923: LIST
71924: LIST
71925: PUSH
71926: LD_INT 3
71928: PUSH
71929: LD_INT 1
71931: NEG
71932: PUSH
71933: EMPTY
71934: LIST
71935: LIST
71936: PUSH
71937: LD_INT 3
71939: PUSH
71940: LD_INT 2
71942: NEG
71943: PUSH
71944: EMPTY
71945: LIST
71946: LIST
71947: PUSH
71948: LD_INT 5
71950: PUSH
71951: LD_INT 2
71953: PUSH
71954: EMPTY
71955: LIST
71956: LIST
71957: PUSH
71958: EMPTY
71959: LIST
71960: LIST
71961: LIST
71962: LIST
71963: LIST
71964: LIST
71965: LIST
71966: LIST
71967: LIST
71968: LIST
71969: LIST
71970: LIST
71971: LIST
71972: LIST
71973: LIST
71974: LIST
71975: LIST
71976: LIST
71977: LIST
71978: LIST
71979: LIST
71980: LIST
71981: LIST
71982: LIST
71983: LIST
71984: LIST
71985: LIST
71986: LIST
71987: LIST
71988: LIST
71989: LIST
71990: LIST
71991: LIST
71992: LIST
71993: LIST
71994: LIST
71995: LIST
71996: LIST
71997: LIST
71998: LIST
71999: LIST
72000: LIST
72001: LIST
72002: LIST
72003: LIST
72004: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
72005: LD_ADDR_VAR 0 32
72009: PUSH
72010: LD_INT 4
72012: NEG
72013: PUSH
72014: LD_INT 0
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: PUSH
72021: LD_INT 4
72023: NEG
72024: PUSH
72025: LD_INT 1
72027: NEG
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: PUSH
72033: LD_INT 3
72035: NEG
72036: PUSH
72037: LD_INT 0
72039: PUSH
72040: EMPTY
72041: LIST
72042: LIST
72043: PUSH
72044: LD_INT 3
72046: NEG
72047: PUSH
72048: LD_INT 1
72050: PUSH
72051: EMPTY
72052: LIST
72053: LIST
72054: PUSH
72055: LD_INT 4
72057: NEG
72058: PUSH
72059: LD_INT 1
72061: PUSH
72062: EMPTY
72063: LIST
72064: LIST
72065: PUSH
72066: LD_INT 5
72068: NEG
72069: PUSH
72070: LD_INT 0
72072: PUSH
72073: EMPTY
72074: LIST
72075: LIST
72076: PUSH
72077: LD_INT 5
72079: NEG
72080: PUSH
72081: LD_INT 1
72083: NEG
72084: PUSH
72085: EMPTY
72086: LIST
72087: LIST
72088: PUSH
72089: LD_INT 5
72091: NEG
72092: PUSH
72093: LD_INT 2
72095: NEG
72096: PUSH
72097: EMPTY
72098: LIST
72099: LIST
72100: PUSH
72101: LD_INT 3
72103: NEG
72104: PUSH
72105: LD_INT 2
72107: PUSH
72108: EMPTY
72109: LIST
72110: LIST
72111: PUSH
72112: LD_INT 3
72114: NEG
72115: PUSH
72116: LD_INT 3
72118: NEG
72119: PUSH
72120: EMPTY
72121: LIST
72122: LIST
72123: PUSH
72124: LD_INT 3
72126: NEG
72127: PUSH
72128: LD_INT 4
72130: NEG
72131: PUSH
72132: EMPTY
72133: LIST
72134: LIST
72135: PUSH
72136: LD_INT 2
72138: NEG
72139: PUSH
72140: LD_INT 3
72142: NEG
72143: PUSH
72144: EMPTY
72145: LIST
72146: LIST
72147: PUSH
72148: LD_INT 2
72150: NEG
72151: PUSH
72152: LD_INT 2
72154: NEG
72155: PUSH
72156: EMPTY
72157: LIST
72158: LIST
72159: PUSH
72160: LD_INT 3
72162: NEG
72163: PUSH
72164: LD_INT 2
72166: NEG
72167: PUSH
72168: EMPTY
72169: LIST
72170: LIST
72171: PUSH
72172: LD_INT 4
72174: NEG
72175: PUSH
72176: LD_INT 3
72178: NEG
72179: PUSH
72180: EMPTY
72181: LIST
72182: LIST
72183: PUSH
72184: LD_INT 4
72186: NEG
72187: PUSH
72188: LD_INT 4
72190: NEG
72191: PUSH
72192: EMPTY
72193: LIST
72194: LIST
72195: PUSH
72196: LD_INT 2
72198: NEG
72199: PUSH
72200: LD_INT 4
72202: NEG
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: PUSH
72208: LD_INT 4
72210: NEG
72211: PUSH
72212: LD_INT 2
72214: NEG
72215: PUSH
72216: EMPTY
72217: LIST
72218: LIST
72219: PUSH
72220: LD_INT 0
72222: PUSH
72223: LD_INT 4
72225: NEG
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: PUSH
72231: LD_INT 0
72233: PUSH
72234: LD_INT 5
72236: NEG
72237: PUSH
72238: EMPTY
72239: LIST
72240: LIST
72241: PUSH
72242: LD_INT 1
72244: PUSH
72245: LD_INT 4
72247: NEG
72248: PUSH
72249: EMPTY
72250: LIST
72251: LIST
72252: PUSH
72253: LD_INT 1
72255: PUSH
72256: LD_INT 3
72258: NEG
72259: PUSH
72260: EMPTY
72261: LIST
72262: LIST
72263: PUSH
72264: LD_INT 0
72266: PUSH
72267: LD_INT 3
72269: NEG
72270: PUSH
72271: EMPTY
72272: LIST
72273: LIST
72274: PUSH
72275: LD_INT 1
72277: NEG
72278: PUSH
72279: LD_INT 4
72281: NEG
72282: PUSH
72283: EMPTY
72284: LIST
72285: LIST
72286: PUSH
72287: LD_INT 1
72289: NEG
72290: PUSH
72291: LD_INT 5
72293: NEG
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: PUSH
72299: LD_INT 2
72301: PUSH
72302: LD_INT 3
72304: NEG
72305: PUSH
72306: EMPTY
72307: LIST
72308: LIST
72309: PUSH
72310: LD_INT 2
72312: NEG
72313: PUSH
72314: LD_INT 5
72316: NEG
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: PUSH
72322: LD_INT 3
72324: PUSH
72325: LD_INT 0
72327: PUSH
72328: EMPTY
72329: LIST
72330: LIST
72331: PUSH
72332: LD_INT 3
72334: PUSH
72335: LD_INT 1
72337: NEG
72338: PUSH
72339: EMPTY
72340: LIST
72341: LIST
72342: PUSH
72343: LD_INT 4
72345: PUSH
72346: LD_INT 0
72348: PUSH
72349: EMPTY
72350: LIST
72351: LIST
72352: PUSH
72353: LD_INT 4
72355: PUSH
72356: LD_INT 1
72358: PUSH
72359: EMPTY
72360: LIST
72361: LIST
72362: PUSH
72363: LD_INT 3
72365: PUSH
72366: LD_INT 1
72368: PUSH
72369: EMPTY
72370: LIST
72371: LIST
72372: PUSH
72373: LD_INT 2
72375: PUSH
72376: LD_INT 0
72378: PUSH
72379: EMPTY
72380: LIST
72381: LIST
72382: PUSH
72383: LD_INT 2
72385: PUSH
72386: LD_INT 1
72388: NEG
72389: PUSH
72390: EMPTY
72391: LIST
72392: LIST
72393: PUSH
72394: LD_INT 2
72396: PUSH
72397: LD_INT 2
72399: NEG
72400: PUSH
72401: EMPTY
72402: LIST
72403: LIST
72404: PUSH
72405: LD_INT 4
72407: PUSH
72408: LD_INT 2
72410: PUSH
72411: EMPTY
72412: LIST
72413: LIST
72414: PUSH
72415: LD_INT 4
72417: PUSH
72418: LD_INT 4
72420: PUSH
72421: EMPTY
72422: LIST
72423: LIST
72424: PUSH
72425: LD_INT 4
72427: PUSH
72428: LD_INT 3
72430: PUSH
72431: EMPTY
72432: LIST
72433: LIST
72434: PUSH
72435: LD_INT 5
72437: PUSH
72438: LD_INT 4
72440: PUSH
72441: EMPTY
72442: LIST
72443: LIST
72444: PUSH
72445: LD_INT 5
72447: PUSH
72448: LD_INT 5
72450: PUSH
72451: EMPTY
72452: LIST
72453: LIST
72454: PUSH
72455: LD_INT 4
72457: PUSH
72458: LD_INT 5
72460: PUSH
72461: EMPTY
72462: LIST
72463: LIST
72464: PUSH
72465: LD_INT 3
72467: PUSH
72468: LD_INT 4
72470: PUSH
72471: EMPTY
72472: LIST
72473: LIST
72474: PUSH
72475: LD_INT 3
72477: PUSH
72478: LD_INT 3
72480: PUSH
72481: EMPTY
72482: LIST
72483: LIST
72484: PUSH
72485: LD_INT 5
72487: PUSH
72488: LD_INT 3
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: PUSH
72495: LD_INT 3
72497: PUSH
72498: LD_INT 5
72500: PUSH
72501: EMPTY
72502: LIST
72503: LIST
72504: PUSH
72505: EMPTY
72506: LIST
72507: LIST
72508: LIST
72509: LIST
72510: LIST
72511: LIST
72512: LIST
72513: LIST
72514: LIST
72515: LIST
72516: LIST
72517: LIST
72518: LIST
72519: LIST
72520: LIST
72521: LIST
72522: LIST
72523: LIST
72524: LIST
72525: LIST
72526: LIST
72527: LIST
72528: LIST
72529: LIST
72530: LIST
72531: LIST
72532: LIST
72533: LIST
72534: LIST
72535: LIST
72536: LIST
72537: LIST
72538: LIST
72539: LIST
72540: LIST
72541: LIST
72542: LIST
72543: LIST
72544: LIST
72545: LIST
72546: LIST
72547: LIST
72548: LIST
72549: LIST
72550: LIST
72551: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72552: LD_ADDR_VAR 0 33
72556: PUSH
72557: LD_INT 4
72559: NEG
72560: PUSH
72561: LD_INT 4
72563: NEG
72564: PUSH
72565: EMPTY
72566: LIST
72567: LIST
72568: PUSH
72569: LD_INT 4
72571: NEG
72572: PUSH
72573: LD_INT 5
72575: NEG
72576: PUSH
72577: EMPTY
72578: LIST
72579: LIST
72580: PUSH
72581: LD_INT 3
72583: NEG
72584: PUSH
72585: LD_INT 4
72587: NEG
72588: PUSH
72589: EMPTY
72590: LIST
72591: LIST
72592: PUSH
72593: LD_INT 3
72595: NEG
72596: PUSH
72597: LD_INT 3
72599: NEG
72600: PUSH
72601: EMPTY
72602: LIST
72603: LIST
72604: PUSH
72605: LD_INT 4
72607: NEG
72608: PUSH
72609: LD_INT 3
72611: NEG
72612: PUSH
72613: EMPTY
72614: LIST
72615: LIST
72616: PUSH
72617: LD_INT 5
72619: NEG
72620: PUSH
72621: LD_INT 4
72623: NEG
72624: PUSH
72625: EMPTY
72626: LIST
72627: LIST
72628: PUSH
72629: LD_INT 5
72631: NEG
72632: PUSH
72633: LD_INT 5
72635: NEG
72636: PUSH
72637: EMPTY
72638: LIST
72639: LIST
72640: PUSH
72641: LD_INT 3
72643: NEG
72644: PUSH
72645: LD_INT 5
72647: NEG
72648: PUSH
72649: EMPTY
72650: LIST
72651: LIST
72652: PUSH
72653: LD_INT 5
72655: NEG
72656: PUSH
72657: LD_INT 3
72659: NEG
72660: PUSH
72661: EMPTY
72662: LIST
72663: LIST
72664: PUSH
72665: LD_INT 0
72667: PUSH
72668: LD_INT 3
72670: NEG
72671: PUSH
72672: EMPTY
72673: LIST
72674: LIST
72675: PUSH
72676: LD_INT 0
72678: PUSH
72679: LD_INT 4
72681: NEG
72682: PUSH
72683: EMPTY
72684: LIST
72685: LIST
72686: PUSH
72687: LD_INT 1
72689: PUSH
72690: LD_INT 3
72692: NEG
72693: PUSH
72694: EMPTY
72695: LIST
72696: LIST
72697: PUSH
72698: LD_INT 1
72700: PUSH
72701: LD_INT 2
72703: NEG
72704: PUSH
72705: EMPTY
72706: LIST
72707: LIST
72708: PUSH
72709: LD_INT 0
72711: PUSH
72712: LD_INT 2
72714: NEG
72715: PUSH
72716: EMPTY
72717: LIST
72718: LIST
72719: PUSH
72720: LD_INT 1
72722: NEG
72723: PUSH
72724: LD_INT 3
72726: NEG
72727: PUSH
72728: EMPTY
72729: LIST
72730: LIST
72731: PUSH
72732: LD_INT 1
72734: NEG
72735: PUSH
72736: LD_INT 4
72738: NEG
72739: PUSH
72740: EMPTY
72741: LIST
72742: LIST
72743: PUSH
72744: LD_INT 2
72746: PUSH
72747: LD_INT 2
72749: NEG
72750: PUSH
72751: EMPTY
72752: LIST
72753: LIST
72754: PUSH
72755: LD_INT 2
72757: NEG
72758: PUSH
72759: LD_INT 4
72761: NEG
72762: PUSH
72763: EMPTY
72764: LIST
72765: LIST
72766: PUSH
72767: LD_INT 4
72769: PUSH
72770: LD_INT 0
72772: PUSH
72773: EMPTY
72774: LIST
72775: LIST
72776: PUSH
72777: LD_INT 4
72779: PUSH
72780: LD_INT 1
72782: NEG
72783: PUSH
72784: EMPTY
72785: LIST
72786: LIST
72787: PUSH
72788: LD_INT 5
72790: PUSH
72791: LD_INT 0
72793: PUSH
72794: EMPTY
72795: LIST
72796: LIST
72797: PUSH
72798: LD_INT 5
72800: PUSH
72801: LD_INT 1
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: PUSH
72808: LD_INT 4
72810: PUSH
72811: LD_INT 1
72813: PUSH
72814: EMPTY
72815: LIST
72816: LIST
72817: PUSH
72818: LD_INT 3
72820: PUSH
72821: LD_INT 0
72823: PUSH
72824: EMPTY
72825: LIST
72826: LIST
72827: PUSH
72828: LD_INT 3
72830: PUSH
72831: LD_INT 1
72833: NEG
72834: PUSH
72835: EMPTY
72836: LIST
72837: LIST
72838: PUSH
72839: LD_INT 3
72841: PUSH
72842: LD_INT 2
72844: NEG
72845: PUSH
72846: EMPTY
72847: LIST
72848: LIST
72849: PUSH
72850: LD_INT 5
72852: PUSH
72853: LD_INT 2
72855: PUSH
72856: EMPTY
72857: LIST
72858: LIST
72859: PUSH
72860: LD_INT 3
72862: PUSH
72863: LD_INT 3
72865: PUSH
72866: EMPTY
72867: LIST
72868: LIST
72869: PUSH
72870: LD_INT 3
72872: PUSH
72873: LD_INT 2
72875: PUSH
72876: EMPTY
72877: LIST
72878: LIST
72879: PUSH
72880: LD_INT 4
72882: PUSH
72883: LD_INT 3
72885: PUSH
72886: EMPTY
72887: LIST
72888: LIST
72889: PUSH
72890: LD_INT 4
72892: PUSH
72893: LD_INT 4
72895: PUSH
72896: EMPTY
72897: LIST
72898: LIST
72899: PUSH
72900: LD_INT 3
72902: PUSH
72903: LD_INT 4
72905: PUSH
72906: EMPTY
72907: LIST
72908: LIST
72909: PUSH
72910: LD_INT 2
72912: PUSH
72913: LD_INT 3
72915: PUSH
72916: EMPTY
72917: LIST
72918: LIST
72919: PUSH
72920: LD_INT 2
72922: PUSH
72923: LD_INT 2
72925: PUSH
72926: EMPTY
72927: LIST
72928: LIST
72929: PUSH
72930: LD_INT 4
72932: PUSH
72933: LD_INT 2
72935: PUSH
72936: EMPTY
72937: LIST
72938: LIST
72939: PUSH
72940: LD_INT 2
72942: PUSH
72943: LD_INT 4
72945: PUSH
72946: EMPTY
72947: LIST
72948: LIST
72949: PUSH
72950: LD_INT 0
72952: PUSH
72953: LD_INT 4
72955: PUSH
72956: EMPTY
72957: LIST
72958: LIST
72959: PUSH
72960: LD_INT 0
72962: PUSH
72963: LD_INT 3
72965: PUSH
72966: EMPTY
72967: LIST
72968: LIST
72969: PUSH
72970: LD_INT 1
72972: PUSH
72973: LD_INT 4
72975: PUSH
72976: EMPTY
72977: LIST
72978: LIST
72979: PUSH
72980: LD_INT 1
72982: PUSH
72983: LD_INT 5
72985: PUSH
72986: EMPTY
72987: LIST
72988: LIST
72989: PUSH
72990: LD_INT 0
72992: PUSH
72993: LD_INT 5
72995: PUSH
72996: EMPTY
72997: LIST
72998: LIST
72999: PUSH
73000: LD_INT 1
73002: NEG
73003: PUSH
73004: LD_INT 4
73006: PUSH
73007: EMPTY
73008: LIST
73009: LIST
73010: PUSH
73011: LD_INT 1
73013: NEG
73014: PUSH
73015: LD_INT 3
73017: PUSH
73018: EMPTY
73019: LIST
73020: LIST
73021: PUSH
73022: LD_INT 2
73024: PUSH
73025: LD_INT 5
73027: PUSH
73028: EMPTY
73029: LIST
73030: LIST
73031: PUSH
73032: LD_INT 2
73034: NEG
73035: PUSH
73036: LD_INT 3
73038: PUSH
73039: EMPTY
73040: LIST
73041: LIST
73042: PUSH
73043: EMPTY
73044: LIST
73045: LIST
73046: LIST
73047: LIST
73048: LIST
73049: LIST
73050: LIST
73051: LIST
73052: LIST
73053: LIST
73054: LIST
73055: LIST
73056: LIST
73057: LIST
73058: LIST
73059: LIST
73060: LIST
73061: LIST
73062: LIST
73063: LIST
73064: LIST
73065: LIST
73066: LIST
73067: LIST
73068: LIST
73069: LIST
73070: LIST
73071: LIST
73072: LIST
73073: LIST
73074: LIST
73075: LIST
73076: LIST
73077: LIST
73078: LIST
73079: LIST
73080: LIST
73081: LIST
73082: LIST
73083: LIST
73084: LIST
73085: LIST
73086: LIST
73087: LIST
73088: LIST
73089: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
73090: LD_ADDR_VAR 0 34
73094: PUSH
73095: LD_INT 0
73097: PUSH
73098: LD_INT 4
73100: NEG
73101: PUSH
73102: EMPTY
73103: LIST
73104: LIST
73105: PUSH
73106: LD_INT 0
73108: PUSH
73109: LD_INT 5
73111: NEG
73112: PUSH
73113: EMPTY
73114: LIST
73115: LIST
73116: PUSH
73117: LD_INT 1
73119: PUSH
73120: LD_INT 4
73122: NEG
73123: PUSH
73124: EMPTY
73125: LIST
73126: LIST
73127: PUSH
73128: LD_INT 1
73130: PUSH
73131: LD_INT 3
73133: NEG
73134: PUSH
73135: EMPTY
73136: LIST
73137: LIST
73138: PUSH
73139: LD_INT 0
73141: PUSH
73142: LD_INT 3
73144: NEG
73145: PUSH
73146: EMPTY
73147: LIST
73148: LIST
73149: PUSH
73150: LD_INT 1
73152: NEG
73153: PUSH
73154: LD_INT 4
73156: NEG
73157: PUSH
73158: EMPTY
73159: LIST
73160: LIST
73161: PUSH
73162: LD_INT 1
73164: NEG
73165: PUSH
73166: LD_INT 5
73168: NEG
73169: PUSH
73170: EMPTY
73171: LIST
73172: LIST
73173: PUSH
73174: LD_INT 2
73176: PUSH
73177: LD_INT 3
73179: NEG
73180: PUSH
73181: EMPTY
73182: LIST
73183: LIST
73184: PUSH
73185: LD_INT 2
73187: NEG
73188: PUSH
73189: LD_INT 5
73191: NEG
73192: PUSH
73193: EMPTY
73194: LIST
73195: LIST
73196: PUSH
73197: LD_INT 3
73199: PUSH
73200: LD_INT 0
73202: PUSH
73203: EMPTY
73204: LIST
73205: LIST
73206: PUSH
73207: LD_INT 3
73209: PUSH
73210: LD_INT 1
73212: NEG
73213: PUSH
73214: EMPTY
73215: LIST
73216: LIST
73217: PUSH
73218: LD_INT 4
73220: PUSH
73221: LD_INT 0
73223: PUSH
73224: EMPTY
73225: LIST
73226: LIST
73227: PUSH
73228: LD_INT 4
73230: PUSH
73231: LD_INT 1
73233: PUSH
73234: EMPTY
73235: LIST
73236: LIST
73237: PUSH
73238: LD_INT 3
73240: PUSH
73241: LD_INT 1
73243: PUSH
73244: EMPTY
73245: LIST
73246: LIST
73247: PUSH
73248: LD_INT 2
73250: PUSH
73251: LD_INT 0
73253: PUSH
73254: EMPTY
73255: LIST
73256: LIST
73257: PUSH
73258: LD_INT 2
73260: PUSH
73261: LD_INT 1
73263: NEG
73264: PUSH
73265: EMPTY
73266: LIST
73267: LIST
73268: PUSH
73269: LD_INT 2
73271: PUSH
73272: LD_INT 2
73274: NEG
73275: PUSH
73276: EMPTY
73277: LIST
73278: LIST
73279: PUSH
73280: LD_INT 4
73282: PUSH
73283: LD_INT 2
73285: PUSH
73286: EMPTY
73287: LIST
73288: LIST
73289: PUSH
73290: LD_INT 4
73292: PUSH
73293: LD_INT 4
73295: PUSH
73296: EMPTY
73297: LIST
73298: LIST
73299: PUSH
73300: LD_INT 4
73302: PUSH
73303: LD_INT 3
73305: PUSH
73306: EMPTY
73307: LIST
73308: LIST
73309: PUSH
73310: LD_INT 5
73312: PUSH
73313: LD_INT 4
73315: PUSH
73316: EMPTY
73317: LIST
73318: LIST
73319: PUSH
73320: LD_INT 5
73322: PUSH
73323: LD_INT 5
73325: PUSH
73326: EMPTY
73327: LIST
73328: LIST
73329: PUSH
73330: LD_INT 4
73332: PUSH
73333: LD_INT 5
73335: PUSH
73336: EMPTY
73337: LIST
73338: LIST
73339: PUSH
73340: LD_INT 3
73342: PUSH
73343: LD_INT 4
73345: PUSH
73346: EMPTY
73347: LIST
73348: LIST
73349: PUSH
73350: LD_INT 3
73352: PUSH
73353: LD_INT 3
73355: PUSH
73356: EMPTY
73357: LIST
73358: LIST
73359: PUSH
73360: LD_INT 5
73362: PUSH
73363: LD_INT 3
73365: PUSH
73366: EMPTY
73367: LIST
73368: LIST
73369: PUSH
73370: LD_INT 3
73372: PUSH
73373: LD_INT 5
73375: PUSH
73376: EMPTY
73377: LIST
73378: LIST
73379: PUSH
73380: LD_INT 0
73382: PUSH
73383: LD_INT 3
73385: PUSH
73386: EMPTY
73387: LIST
73388: LIST
73389: PUSH
73390: LD_INT 0
73392: PUSH
73393: LD_INT 2
73395: PUSH
73396: EMPTY
73397: LIST
73398: LIST
73399: PUSH
73400: LD_INT 1
73402: PUSH
73403: LD_INT 3
73405: PUSH
73406: EMPTY
73407: LIST
73408: LIST
73409: PUSH
73410: LD_INT 1
73412: PUSH
73413: LD_INT 4
73415: PUSH
73416: EMPTY
73417: LIST
73418: LIST
73419: PUSH
73420: LD_INT 0
73422: PUSH
73423: LD_INT 4
73425: PUSH
73426: EMPTY
73427: LIST
73428: LIST
73429: PUSH
73430: LD_INT 1
73432: NEG
73433: PUSH
73434: LD_INT 3
73436: PUSH
73437: EMPTY
73438: LIST
73439: LIST
73440: PUSH
73441: LD_INT 1
73443: NEG
73444: PUSH
73445: LD_INT 2
73447: PUSH
73448: EMPTY
73449: LIST
73450: LIST
73451: PUSH
73452: LD_INT 2
73454: PUSH
73455: LD_INT 4
73457: PUSH
73458: EMPTY
73459: LIST
73460: LIST
73461: PUSH
73462: LD_INT 2
73464: NEG
73465: PUSH
73466: LD_INT 2
73468: PUSH
73469: EMPTY
73470: LIST
73471: LIST
73472: PUSH
73473: LD_INT 4
73475: NEG
73476: PUSH
73477: LD_INT 0
73479: PUSH
73480: EMPTY
73481: LIST
73482: LIST
73483: PUSH
73484: LD_INT 4
73486: NEG
73487: PUSH
73488: LD_INT 1
73490: NEG
73491: PUSH
73492: EMPTY
73493: LIST
73494: LIST
73495: PUSH
73496: LD_INT 3
73498: NEG
73499: PUSH
73500: LD_INT 0
73502: PUSH
73503: EMPTY
73504: LIST
73505: LIST
73506: PUSH
73507: LD_INT 3
73509: NEG
73510: PUSH
73511: LD_INT 1
73513: PUSH
73514: EMPTY
73515: LIST
73516: LIST
73517: PUSH
73518: LD_INT 4
73520: NEG
73521: PUSH
73522: LD_INT 1
73524: PUSH
73525: EMPTY
73526: LIST
73527: LIST
73528: PUSH
73529: LD_INT 5
73531: NEG
73532: PUSH
73533: LD_INT 0
73535: PUSH
73536: EMPTY
73537: LIST
73538: LIST
73539: PUSH
73540: LD_INT 5
73542: NEG
73543: PUSH
73544: LD_INT 1
73546: NEG
73547: PUSH
73548: EMPTY
73549: LIST
73550: LIST
73551: PUSH
73552: LD_INT 5
73554: NEG
73555: PUSH
73556: LD_INT 2
73558: NEG
73559: PUSH
73560: EMPTY
73561: LIST
73562: LIST
73563: PUSH
73564: LD_INT 3
73566: NEG
73567: PUSH
73568: LD_INT 2
73570: PUSH
73571: EMPTY
73572: LIST
73573: LIST
73574: PUSH
73575: EMPTY
73576: LIST
73577: LIST
73578: LIST
73579: LIST
73580: LIST
73581: LIST
73582: LIST
73583: LIST
73584: LIST
73585: LIST
73586: LIST
73587: LIST
73588: LIST
73589: LIST
73590: LIST
73591: LIST
73592: LIST
73593: LIST
73594: LIST
73595: LIST
73596: LIST
73597: LIST
73598: LIST
73599: LIST
73600: LIST
73601: LIST
73602: LIST
73603: LIST
73604: LIST
73605: LIST
73606: LIST
73607: LIST
73608: LIST
73609: LIST
73610: LIST
73611: LIST
73612: LIST
73613: LIST
73614: LIST
73615: LIST
73616: LIST
73617: LIST
73618: LIST
73619: LIST
73620: LIST
73621: ST_TO_ADDR
// end ; end ;
73622: GO 73625
73624: POP
// case btype of b_depot , b_warehouse :
73625: LD_VAR 0 1
73629: PUSH
73630: LD_INT 0
73632: DOUBLE
73633: EQUAL
73634: IFTRUE 73644
73636: LD_INT 1
73638: DOUBLE
73639: EQUAL
73640: IFTRUE 73644
73642: GO 73845
73644: POP
// case nation of nation_american :
73645: LD_VAR 0 5
73649: PUSH
73650: LD_INT 1
73652: DOUBLE
73653: EQUAL
73654: IFTRUE 73658
73656: GO 73714
73658: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73659: LD_ADDR_VAR 0 9
73663: PUSH
73664: LD_VAR 0 11
73668: PUSH
73669: LD_VAR 0 12
73673: PUSH
73674: LD_VAR 0 13
73678: PUSH
73679: LD_VAR 0 14
73683: PUSH
73684: LD_VAR 0 15
73688: PUSH
73689: LD_VAR 0 16
73693: PUSH
73694: EMPTY
73695: LIST
73696: LIST
73697: LIST
73698: LIST
73699: LIST
73700: LIST
73701: PUSH
73702: LD_VAR 0 4
73706: PUSH
73707: LD_INT 1
73709: PLUS
73710: ARRAY
73711: ST_TO_ADDR
73712: GO 73843
73714: LD_INT 2
73716: DOUBLE
73717: EQUAL
73718: IFTRUE 73722
73720: GO 73778
73722: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73723: LD_ADDR_VAR 0 9
73727: PUSH
73728: LD_VAR 0 17
73732: PUSH
73733: LD_VAR 0 18
73737: PUSH
73738: LD_VAR 0 19
73742: PUSH
73743: LD_VAR 0 20
73747: PUSH
73748: LD_VAR 0 21
73752: PUSH
73753: LD_VAR 0 22
73757: PUSH
73758: EMPTY
73759: LIST
73760: LIST
73761: LIST
73762: LIST
73763: LIST
73764: LIST
73765: PUSH
73766: LD_VAR 0 4
73770: PUSH
73771: LD_INT 1
73773: PLUS
73774: ARRAY
73775: ST_TO_ADDR
73776: GO 73843
73778: LD_INT 3
73780: DOUBLE
73781: EQUAL
73782: IFTRUE 73786
73784: GO 73842
73786: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73787: LD_ADDR_VAR 0 9
73791: PUSH
73792: LD_VAR 0 23
73796: PUSH
73797: LD_VAR 0 24
73801: PUSH
73802: LD_VAR 0 25
73806: PUSH
73807: LD_VAR 0 26
73811: PUSH
73812: LD_VAR 0 27
73816: PUSH
73817: LD_VAR 0 28
73821: PUSH
73822: EMPTY
73823: LIST
73824: LIST
73825: LIST
73826: LIST
73827: LIST
73828: LIST
73829: PUSH
73830: LD_VAR 0 4
73834: PUSH
73835: LD_INT 1
73837: PLUS
73838: ARRAY
73839: ST_TO_ADDR
73840: GO 73843
73842: POP
73843: GO 74398
73845: LD_INT 2
73847: DOUBLE
73848: EQUAL
73849: IFTRUE 73859
73851: LD_INT 3
73853: DOUBLE
73854: EQUAL
73855: IFTRUE 73859
73857: GO 73915
73859: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73860: LD_ADDR_VAR 0 9
73864: PUSH
73865: LD_VAR 0 29
73869: PUSH
73870: LD_VAR 0 30
73874: PUSH
73875: LD_VAR 0 31
73879: PUSH
73880: LD_VAR 0 32
73884: PUSH
73885: LD_VAR 0 33
73889: PUSH
73890: LD_VAR 0 34
73894: PUSH
73895: EMPTY
73896: LIST
73897: LIST
73898: LIST
73899: LIST
73900: LIST
73901: LIST
73902: PUSH
73903: LD_VAR 0 4
73907: PUSH
73908: LD_INT 1
73910: PLUS
73911: ARRAY
73912: ST_TO_ADDR
73913: GO 74398
73915: LD_INT 16
73917: DOUBLE
73918: EQUAL
73919: IFTRUE 73977
73921: LD_INT 17
73923: DOUBLE
73924: EQUAL
73925: IFTRUE 73977
73927: LD_INT 18
73929: DOUBLE
73930: EQUAL
73931: IFTRUE 73977
73933: LD_INT 19
73935: DOUBLE
73936: EQUAL
73937: IFTRUE 73977
73939: LD_INT 22
73941: DOUBLE
73942: EQUAL
73943: IFTRUE 73977
73945: LD_INT 20
73947: DOUBLE
73948: EQUAL
73949: IFTRUE 73977
73951: LD_INT 21
73953: DOUBLE
73954: EQUAL
73955: IFTRUE 73977
73957: LD_INT 23
73959: DOUBLE
73960: EQUAL
73961: IFTRUE 73977
73963: LD_INT 24
73965: DOUBLE
73966: EQUAL
73967: IFTRUE 73977
73969: LD_INT 25
73971: DOUBLE
73972: EQUAL
73973: IFTRUE 73977
73975: GO 74033
73977: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73978: LD_ADDR_VAR 0 9
73982: PUSH
73983: LD_VAR 0 35
73987: PUSH
73988: LD_VAR 0 36
73992: PUSH
73993: LD_VAR 0 37
73997: PUSH
73998: LD_VAR 0 38
74002: PUSH
74003: LD_VAR 0 39
74007: PUSH
74008: LD_VAR 0 40
74012: PUSH
74013: EMPTY
74014: LIST
74015: LIST
74016: LIST
74017: LIST
74018: LIST
74019: LIST
74020: PUSH
74021: LD_VAR 0 4
74025: PUSH
74026: LD_INT 1
74028: PLUS
74029: ARRAY
74030: ST_TO_ADDR
74031: GO 74398
74033: LD_INT 6
74035: DOUBLE
74036: EQUAL
74037: IFTRUE 74089
74039: LD_INT 7
74041: DOUBLE
74042: EQUAL
74043: IFTRUE 74089
74045: LD_INT 8
74047: DOUBLE
74048: EQUAL
74049: IFTRUE 74089
74051: LD_INT 13
74053: DOUBLE
74054: EQUAL
74055: IFTRUE 74089
74057: LD_INT 12
74059: DOUBLE
74060: EQUAL
74061: IFTRUE 74089
74063: LD_INT 15
74065: DOUBLE
74066: EQUAL
74067: IFTRUE 74089
74069: LD_INT 11
74071: DOUBLE
74072: EQUAL
74073: IFTRUE 74089
74075: LD_INT 14
74077: DOUBLE
74078: EQUAL
74079: IFTRUE 74089
74081: LD_INT 10
74083: DOUBLE
74084: EQUAL
74085: IFTRUE 74089
74087: GO 74145
74089: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
74090: LD_ADDR_VAR 0 9
74094: PUSH
74095: LD_VAR 0 41
74099: PUSH
74100: LD_VAR 0 42
74104: PUSH
74105: LD_VAR 0 43
74109: PUSH
74110: LD_VAR 0 44
74114: PUSH
74115: LD_VAR 0 45
74119: PUSH
74120: LD_VAR 0 46
74124: PUSH
74125: EMPTY
74126: LIST
74127: LIST
74128: LIST
74129: LIST
74130: LIST
74131: LIST
74132: PUSH
74133: LD_VAR 0 4
74137: PUSH
74138: LD_INT 1
74140: PLUS
74141: ARRAY
74142: ST_TO_ADDR
74143: GO 74398
74145: LD_INT 36
74147: DOUBLE
74148: EQUAL
74149: IFTRUE 74153
74151: GO 74209
74153: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
74154: LD_ADDR_VAR 0 9
74158: PUSH
74159: LD_VAR 0 47
74163: PUSH
74164: LD_VAR 0 48
74168: PUSH
74169: LD_VAR 0 49
74173: PUSH
74174: LD_VAR 0 50
74178: PUSH
74179: LD_VAR 0 51
74183: PUSH
74184: LD_VAR 0 52
74188: PUSH
74189: EMPTY
74190: LIST
74191: LIST
74192: LIST
74193: LIST
74194: LIST
74195: LIST
74196: PUSH
74197: LD_VAR 0 4
74201: PUSH
74202: LD_INT 1
74204: PLUS
74205: ARRAY
74206: ST_TO_ADDR
74207: GO 74398
74209: LD_INT 4
74211: DOUBLE
74212: EQUAL
74213: IFTRUE 74235
74215: LD_INT 5
74217: DOUBLE
74218: EQUAL
74219: IFTRUE 74235
74221: LD_INT 34
74223: DOUBLE
74224: EQUAL
74225: IFTRUE 74235
74227: LD_INT 37
74229: DOUBLE
74230: EQUAL
74231: IFTRUE 74235
74233: GO 74291
74235: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
74236: LD_ADDR_VAR 0 9
74240: PUSH
74241: LD_VAR 0 53
74245: PUSH
74246: LD_VAR 0 54
74250: PUSH
74251: LD_VAR 0 55
74255: PUSH
74256: LD_VAR 0 56
74260: PUSH
74261: LD_VAR 0 57
74265: PUSH
74266: LD_VAR 0 58
74270: PUSH
74271: EMPTY
74272: LIST
74273: LIST
74274: LIST
74275: LIST
74276: LIST
74277: LIST
74278: PUSH
74279: LD_VAR 0 4
74283: PUSH
74284: LD_INT 1
74286: PLUS
74287: ARRAY
74288: ST_TO_ADDR
74289: GO 74398
74291: LD_INT 31
74293: DOUBLE
74294: EQUAL
74295: IFTRUE 74341
74297: LD_INT 32
74299: DOUBLE
74300: EQUAL
74301: IFTRUE 74341
74303: LD_INT 33
74305: DOUBLE
74306: EQUAL
74307: IFTRUE 74341
74309: LD_INT 27
74311: DOUBLE
74312: EQUAL
74313: IFTRUE 74341
74315: LD_INT 26
74317: DOUBLE
74318: EQUAL
74319: IFTRUE 74341
74321: LD_INT 28
74323: DOUBLE
74324: EQUAL
74325: IFTRUE 74341
74327: LD_INT 29
74329: DOUBLE
74330: EQUAL
74331: IFTRUE 74341
74333: LD_INT 30
74335: DOUBLE
74336: EQUAL
74337: IFTRUE 74341
74339: GO 74397
74341: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
74342: LD_ADDR_VAR 0 9
74346: PUSH
74347: LD_VAR 0 59
74351: PUSH
74352: LD_VAR 0 60
74356: PUSH
74357: LD_VAR 0 61
74361: PUSH
74362: LD_VAR 0 62
74366: PUSH
74367: LD_VAR 0 63
74371: PUSH
74372: LD_VAR 0 64
74376: PUSH
74377: EMPTY
74378: LIST
74379: LIST
74380: LIST
74381: LIST
74382: LIST
74383: LIST
74384: PUSH
74385: LD_VAR 0 4
74389: PUSH
74390: LD_INT 1
74392: PLUS
74393: ARRAY
74394: ST_TO_ADDR
74395: GO 74398
74397: POP
// temp_list2 = [ ] ;
74398: LD_ADDR_VAR 0 10
74402: PUSH
74403: EMPTY
74404: ST_TO_ADDR
// for i in temp_list do
74405: LD_ADDR_VAR 0 8
74409: PUSH
74410: LD_VAR 0 9
74414: PUSH
74415: FOR_IN
74416: IFFALSE 74468
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74418: LD_ADDR_VAR 0 10
74422: PUSH
74423: LD_VAR 0 10
74427: PUSH
74428: LD_VAR 0 8
74432: PUSH
74433: LD_INT 1
74435: ARRAY
74436: PUSH
74437: LD_VAR 0 2
74441: PLUS
74442: PUSH
74443: LD_VAR 0 8
74447: PUSH
74448: LD_INT 2
74450: ARRAY
74451: PUSH
74452: LD_VAR 0 3
74456: PLUS
74457: PUSH
74458: EMPTY
74459: LIST
74460: LIST
74461: PUSH
74462: EMPTY
74463: LIST
74464: ADD
74465: ST_TO_ADDR
74466: GO 74415
74468: POP
74469: POP
// result = temp_list2 ;
74470: LD_ADDR_VAR 0 7
74474: PUSH
74475: LD_VAR 0 10
74479: ST_TO_ADDR
// end ;
74480: LD_VAR 0 7
74484: RET
// export function EnemyInRange ( unit , dist ) ; begin
74485: LD_INT 0
74487: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74488: LD_ADDR_VAR 0 3
74492: PUSH
74493: LD_VAR 0 1
74497: PPUSH
74498: CALL_OW 255
74502: PPUSH
74503: LD_VAR 0 1
74507: PPUSH
74508: CALL_OW 250
74512: PPUSH
74513: LD_VAR 0 1
74517: PPUSH
74518: CALL_OW 251
74522: PPUSH
74523: LD_VAR 0 2
74527: PPUSH
74528: CALL 47881 0 4
74532: PUSH
74533: LD_INT 4
74535: ARRAY
74536: ST_TO_ADDR
// end ;
74537: LD_VAR 0 3
74541: RET
// export function PlayerSeeMe ( unit ) ; begin
74542: LD_INT 0
74544: PPUSH
// result := See ( your_side , unit ) ;
74545: LD_ADDR_VAR 0 2
74549: PUSH
74550: LD_OWVAR 2
74554: PPUSH
74555: LD_VAR 0 1
74559: PPUSH
74560: CALL_OW 292
74564: ST_TO_ADDR
// end ;
74565: LD_VAR 0 2
74569: RET
// export function ReverseDir ( unit ) ; begin
74570: LD_INT 0
74572: PPUSH
// if not unit then
74573: LD_VAR 0 1
74577: NOT
74578: IFFALSE 74582
// exit ;
74580: GO 74605
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74582: LD_ADDR_VAR 0 2
74586: PUSH
74587: LD_VAR 0 1
74591: PPUSH
74592: CALL_OW 254
74596: PUSH
74597: LD_INT 3
74599: PLUS
74600: PUSH
74601: LD_INT 6
74603: MOD
74604: ST_TO_ADDR
// end ;
74605: LD_VAR 0 2
74609: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
74610: LD_INT 0
74612: PPUSH
74613: PPUSH
74614: PPUSH
74615: PPUSH
74616: PPUSH
// if not hexes then
74617: LD_VAR 0 2
74621: NOT
74622: IFFALSE 74626
// exit ;
74624: GO 74774
// dist := 9999 ;
74626: LD_ADDR_VAR 0 5
74630: PUSH
74631: LD_INT 9999
74633: ST_TO_ADDR
// for i = 1 to hexes do
74634: LD_ADDR_VAR 0 4
74638: PUSH
74639: DOUBLE
74640: LD_INT 1
74642: DEC
74643: ST_TO_ADDR
74644: LD_VAR 0 2
74648: PUSH
74649: FOR_TO
74650: IFFALSE 74762
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
74652: LD_VAR 0 1
74656: PPUSH
74657: LD_VAR 0 2
74661: PUSH
74662: LD_VAR 0 4
74666: ARRAY
74667: PUSH
74668: LD_INT 1
74670: ARRAY
74671: PPUSH
74672: LD_VAR 0 2
74676: PUSH
74677: LD_VAR 0 4
74681: ARRAY
74682: PUSH
74683: LD_INT 2
74685: ARRAY
74686: PPUSH
74687: CALL_OW 297
74691: PUSH
74692: LD_VAR 0 5
74696: LESS
74697: IFFALSE 74760
// begin hex := hexes [ i ] ;
74699: LD_ADDR_VAR 0 7
74703: PUSH
74704: LD_VAR 0 2
74708: PUSH
74709: LD_VAR 0 4
74713: ARRAY
74714: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74715: LD_ADDR_VAR 0 5
74719: PUSH
74720: LD_VAR 0 1
74724: PPUSH
74725: LD_VAR 0 2
74729: PUSH
74730: LD_VAR 0 4
74734: ARRAY
74735: PUSH
74736: LD_INT 1
74738: ARRAY
74739: PPUSH
74740: LD_VAR 0 2
74744: PUSH
74745: LD_VAR 0 4
74749: ARRAY
74750: PUSH
74751: LD_INT 2
74753: ARRAY
74754: PPUSH
74755: CALL_OW 297
74759: ST_TO_ADDR
// end ; end ;
74760: GO 74649
74762: POP
74763: POP
// result := hex ;
74764: LD_ADDR_VAR 0 3
74768: PUSH
74769: LD_VAR 0 7
74773: ST_TO_ADDR
// end ;
74774: LD_VAR 0 3
74778: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74779: LD_INT 0
74781: PPUSH
74782: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74783: LD_VAR 0 1
74787: NOT
74788: PUSH
74789: LD_VAR 0 1
74793: PUSH
74794: LD_INT 21
74796: PUSH
74797: LD_INT 2
74799: PUSH
74800: EMPTY
74801: LIST
74802: LIST
74803: PUSH
74804: LD_INT 23
74806: PUSH
74807: LD_INT 2
74809: PUSH
74810: EMPTY
74811: LIST
74812: LIST
74813: PUSH
74814: EMPTY
74815: LIST
74816: LIST
74817: PPUSH
74818: CALL_OW 69
74822: IN
74823: NOT
74824: OR
74825: IFFALSE 74829
// exit ;
74827: GO 74876
// for i = 1 to 3 do
74829: LD_ADDR_VAR 0 3
74833: PUSH
74834: DOUBLE
74835: LD_INT 1
74837: DEC
74838: ST_TO_ADDR
74839: LD_INT 3
74841: PUSH
74842: FOR_TO
74843: IFFALSE 74874
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74845: LD_VAR 0 1
74849: PPUSH
74850: CALL_OW 250
74854: PPUSH
74855: LD_VAR 0 1
74859: PPUSH
74860: CALL_OW 251
74864: PPUSH
74865: LD_INT 1
74867: PPUSH
74868: CALL_OW 453
74872: GO 74842
74874: POP
74875: POP
// end ;
74876: LD_VAR 0 2
74880: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74881: LD_INT 0
74883: PPUSH
74884: PPUSH
74885: PPUSH
74886: PPUSH
74887: PPUSH
74888: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
74889: LD_VAR 0 1
74893: NOT
74894: PUSH
74895: LD_VAR 0 2
74899: NOT
74900: OR
74901: PUSH
74902: LD_VAR 0 1
74906: PPUSH
74907: CALL_OW 314
74911: OR
74912: IFFALSE 74916
// exit ;
74914: GO 75357
// x := GetX ( enemy_unit ) ;
74916: LD_ADDR_VAR 0 7
74920: PUSH
74921: LD_VAR 0 2
74925: PPUSH
74926: CALL_OW 250
74930: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74931: LD_ADDR_VAR 0 8
74935: PUSH
74936: LD_VAR 0 2
74940: PPUSH
74941: CALL_OW 251
74945: ST_TO_ADDR
// if not x or not y then
74946: LD_VAR 0 7
74950: NOT
74951: PUSH
74952: LD_VAR 0 8
74956: NOT
74957: OR
74958: IFFALSE 74962
// exit ;
74960: GO 75357
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74962: LD_ADDR_VAR 0 6
74966: PUSH
74967: LD_VAR 0 7
74971: PPUSH
74972: LD_INT 0
74974: PPUSH
74975: LD_INT 4
74977: PPUSH
74978: CALL_OW 272
74982: PUSH
74983: LD_VAR 0 8
74987: PPUSH
74988: LD_INT 0
74990: PPUSH
74991: LD_INT 4
74993: PPUSH
74994: CALL_OW 273
74998: PUSH
74999: EMPTY
75000: LIST
75001: LIST
75002: PUSH
75003: LD_VAR 0 7
75007: PPUSH
75008: LD_INT 1
75010: PPUSH
75011: LD_INT 4
75013: PPUSH
75014: CALL_OW 272
75018: PUSH
75019: LD_VAR 0 8
75023: PPUSH
75024: LD_INT 1
75026: PPUSH
75027: LD_INT 4
75029: PPUSH
75030: CALL_OW 273
75034: PUSH
75035: EMPTY
75036: LIST
75037: LIST
75038: PUSH
75039: LD_VAR 0 7
75043: PPUSH
75044: LD_INT 2
75046: PPUSH
75047: LD_INT 4
75049: PPUSH
75050: CALL_OW 272
75054: PUSH
75055: LD_VAR 0 8
75059: PPUSH
75060: LD_INT 2
75062: PPUSH
75063: LD_INT 4
75065: PPUSH
75066: CALL_OW 273
75070: PUSH
75071: EMPTY
75072: LIST
75073: LIST
75074: PUSH
75075: LD_VAR 0 7
75079: PPUSH
75080: LD_INT 3
75082: PPUSH
75083: LD_INT 4
75085: PPUSH
75086: CALL_OW 272
75090: PUSH
75091: LD_VAR 0 8
75095: PPUSH
75096: LD_INT 3
75098: PPUSH
75099: LD_INT 4
75101: PPUSH
75102: CALL_OW 273
75106: PUSH
75107: EMPTY
75108: LIST
75109: LIST
75110: PUSH
75111: LD_VAR 0 7
75115: PPUSH
75116: LD_INT 4
75118: PPUSH
75119: LD_INT 4
75121: PPUSH
75122: CALL_OW 272
75126: PUSH
75127: LD_VAR 0 8
75131: PPUSH
75132: LD_INT 4
75134: PPUSH
75135: LD_INT 4
75137: PPUSH
75138: CALL_OW 273
75142: PUSH
75143: EMPTY
75144: LIST
75145: LIST
75146: PUSH
75147: LD_VAR 0 7
75151: PPUSH
75152: LD_INT 5
75154: PPUSH
75155: LD_INT 4
75157: PPUSH
75158: CALL_OW 272
75162: PUSH
75163: LD_VAR 0 8
75167: PPUSH
75168: LD_INT 5
75170: PPUSH
75171: LD_INT 4
75173: PPUSH
75174: CALL_OW 273
75178: PUSH
75179: EMPTY
75180: LIST
75181: LIST
75182: PUSH
75183: EMPTY
75184: LIST
75185: LIST
75186: LIST
75187: LIST
75188: LIST
75189: LIST
75190: ST_TO_ADDR
// for i = tmp downto 1 do
75191: LD_ADDR_VAR 0 4
75195: PUSH
75196: DOUBLE
75197: LD_VAR 0 6
75201: INC
75202: ST_TO_ADDR
75203: LD_INT 1
75205: PUSH
75206: FOR_DOWNTO
75207: IFFALSE 75308
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
75209: LD_VAR 0 6
75213: PUSH
75214: LD_VAR 0 4
75218: ARRAY
75219: PUSH
75220: LD_INT 1
75222: ARRAY
75223: PPUSH
75224: LD_VAR 0 6
75228: PUSH
75229: LD_VAR 0 4
75233: ARRAY
75234: PUSH
75235: LD_INT 2
75237: ARRAY
75238: PPUSH
75239: CALL_OW 488
75243: NOT
75244: PUSH
75245: LD_VAR 0 6
75249: PUSH
75250: LD_VAR 0 4
75254: ARRAY
75255: PUSH
75256: LD_INT 1
75258: ARRAY
75259: PPUSH
75260: LD_VAR 0 6
75264: PUSH
75265: LD_VAR 0 4
75269: ARRAY
75270: PUSH
75271: LD_INT 2
75273: ARRAY
75274: PPUSH
75275: CALL_OW 428
75279: PUSH
75280: LD_INT 0
75282: NONEQUAL
75283: OR
75284: IFFALSE 75306
// tmp := Delete ( tmp , i ) ;
75286: LD_ADDR_VAR 0 6
75290: PUSH
75291: LD_VAR 0 6
75295: PPUSH
75296: LD_VAR 0 4
75300: PPUSH
75301: CALL_OW 3
75305: ST_TO_ADDR
75306: GO 75206
75308: POP
75309: POP
// j := GetClosestHex ( unit , tmp ) ;
75310: LD_ADDR_VAR 0 5
75314: PUSH
75315: LD_VAR 0 1
75319: PPUSH
75320: LD_VAR 0 6
75324: PPUSH
75325: CALL 74610 0 2
75329: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
75330: LD_VAR 0 1
75334: PPUSH
75335: LD_VAR 0 5
75339: PUSH
75340: LD_INT 1
75342: ARRAY
75343: PPUSH
75344: LD_VAR 0 5
75348: PUSH
75349: LD_INT 2
75351: ARRAY
75352: PPUSH
75353: CALL_OW 111
// end ;
75357: LD_VAR 0 3
75361: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75362: LD_INT 0
75364: PPUSH
75365: PPUSH
75366: PPUSH
// uc_side = 0 ;
75367: LD_ADDR_OWVAR 20
75371: PUSH
75372: LD_INT 0
75374: ST_TO_ADDR
// uc_nation = 0 ;
75375: LD_ADDR_OWVAR 21
75379: PUSH
75380: LD_INT 0
75382: ST_TO_ADDR
// InitHc_All ( ) ;
75383: CALL_OW 584
// InitVc ;
75387: CALL_OW 20
// if mastodonts then
75391: LD_VAR 0 6
75395: IFFALSE 75462
// for i = 1 to mastodonts do
75397: LD_ADDR_VAR 0 11
75401: PUSH
75402: DOUBLE
75403: LD_INT 1
75405: DEC
75406: ST_TO_ADDR
75407: LD_VAR 0 6
75411: PUSH
75412: FOR_TO
75413: IFFALSE 75460
// begin vc_chassis := 31 ;
75415: LD_ADDR_OWVAR 37
75419: PUSH
75420: LD_INT 31
75422: ST_TO_ADDR
// vc_control := control_rider ;
75423: LD_ADDR_OWVAR 38
75427: PUSH
75428: LD_INT 4
75430: ST_TO_ADDR
// animal := CreateVehicle ;
75431: LD_ADDR_VAR 0 12
75435: PUSH
75436: CALL_OW 45
75440: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75441: LD_VAR 0 12
75445: PPUSH
75446: LD_VAR 0 8
75450: PPUSH
75451: LD_INT 0
75453: PPUSH
75454: CALL 77650 0 3
// end ;
75458: GO 75412
75460: POP
75461: POP
// if horses then
75462: LD_VAR 0 5
75466: IFFALSE 75533
// for i = 1 to horses do
75468: LD_ADDR_VAR 0 11
75472: PUSH
75473: DOUBLE
75474: LD_INT 1
75476: DEC
75477: ST_TO_ADDR
75478: LD_VAR 0 5
75482: PUSH
75483: FOR_TO
75484: IFFALSE 75531
// begin hc_class := 21 ;
75486: LD_ADDR_OWVAR 28
75490: PUSH
75491: LD_INT 21
75493: ST_TO_ADDR
// hc_gallery :=  ;
75494: LD_ADDR_OWVAR 33
75498: PUSH
75499: LD_STRING 
75501: ST_TO_ADDR
// animal := CreateHuman ;
75502: LD_ADDR_VAR 0 12
75506: PUSH
75507: CALL_OW 44
75511: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75512: LD_VAR 0 12
75516: PPUSH
75517: LD_VAR 0 8
75521: PPUSH
75522: LD_INT 0
75524: PPUSH
75525: CALL 77650 0 3
// end ;
75529: GO 75483
75531: POP
75532: POP
// if birds then
75533: LD_VAR 0 1
75537: IFFALSE 75604
// for i = 1 to birds do
75539: LD_ADDR_VAR 0 11
75543: PUSH
75544: DOUBLE
75545: LD_INT 1
75547: DEC
75548: ST_TO_ADDR
75549: LD_VAR 0 1
75553: PUSH
75554: FOR_TO
75555: IFFALSE 75602
// begin hc_class = 18 ;
75557: LD_ADDR_OWVAR 28
75561: PUSH
75562: LD_INT 18
75564: ST_TO_ADDR
// hc_gallery =  ;
75565: LD_ADDR_OWVAR 33
75569: PUSH
75570: LD_STRING 
75572: ST_TO_ADDR
// animal := CreateHuman ;
75573: LD_ADDR_VAR 0 12
75577: PUSH
75578: CALL_OW 44
75582: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75583: LD_VAR 0 12
75587: PPUSH
75588: LD_VAR 0 8
75592: PPUSH
75593: LD_INT 0
75595: PPUSH
75596: CALL 77650 0 3
// end ;
75600: GO 75554
75602: POP
75603: POP
// if tigers then
75604: LD_VAR 0 2
75608: IFFALSE 75692
// for i = 1 to tigers do
75610: LD_ADDR_VAR 0 11
75614: PUSH
75615: DOUBLE
75616: LD_INT 1
75618: DEC
75619: ST_TO_ADDR
75620: LD_VAR 0 2
75624: PUSH
75625: FOR_TO
75626: IFFALSE 75690
// begin hc_class = class_tiger ;
75628: LD_ADDR_OWVAR 28
75632: PUSH
75633: LD_INT 14
75635: ST_TO_ADDR
// hc_gallery =  ;
75636: LD_ADDR_OWVAR 33
75640: PUSH
75641: LD_STRING 
75643: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75644: LD_ADDR_OWVAR 35
75648: PUSH
75649: LD_INT 7
75651: NEG
75652: PPUSH
75653: LD_INT 7
75655: PPUSH
75656: CALL_OW 12
75660: ST_TO_ADDR
// animal := CreateHuman ;
75661: LD_ADDR_VAR 0 12
75665: PUSH
75666: CALL_OW 44
75670: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75671: LD_VAR 0 12
75675: PPUSH
75676: LD_VAR 0 8
75680: PPUSH
75681: LD_INT 0
75683: PPUSH
75684: CALL 77650 0 3
// end ;
75688: GO 75625
75690: POP
75691: POP
// if apemans then
75692: LD_VAR 0 3
75696: IFFALSE 75819
// for i = 1 to apemans do
75698: LD_ADDR_VAR 0 11
75702: PUSH
75703: DOUBLE
75704: LD_INT 1
75706: DEC
75707: ST_TO_ADDR
75708: LD_VAR 0 3
75712: PUSH
75713: FOR_TO
75714: IFFALSE 75817
// begin hc_class = class_apeman ;
75716: LD_ADDR_OWVAR 28
75720: PUSH
75721: LD_INT 12
75723: ST_TO_ADDR
// hc_gallery =  ;
75724: LD_ADDR_OWVAR 33
75728: PUSH
75729: LD_STRING 
75731: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75732: LD_ADDR_OWVAR 35
75736: PUSH
75737: LD_INT 2
75739: NEG
75740: PPUSH
75741: LD_INT 2
75743: PPUSH
75744: CALL_OW 12
75748: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75749: LD_ADDR_OWVAR 31
75753: PUSH
75754: LD_INT 1
75756: PPUSH
75757: LD_INT 3
75759: PPUSH
75760: CALL_OW 12
75764: PUSH
75765: LD_INT 1
75767: PPUSH
75768: LD_INT 3
75770: PPUSH
75771: CALL_OW 12
75775: PUSH
75776: LD_INT 0
75778: PUSH
75779: LD_INT 0
75781: PUSH
75782: EMPTY
75783: LIST
75784: LIST
75785: LIST
75786: LIST
75787: ST_TO_ADDR
// animal := CreateHuman ;
75788: LD_ADDR_VAR 0 12
75792: PUSH
75793: CALL_OW 44
75797: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75798: LD_VAR 0 12
75802: PPUSH
75803: LD_VAR 0 8
75807: PPUSH
75808: LD_INT 0
75810: PPUSH
75811: CALL 77650 0 3
// end ;
75815: GO 75713
75817: POP
75818: POP
// if enchidnas then
75819: LD_VAR 0 4
75823: IFFALSE 75890
// for i = 1 to enchidnas do
75825: LD_ADDR_VAR 0 11
75829: PUSH
75830: DOUBLE
75831: LD_INT 1
75833: DEC
75834: ST_TO_ADDR
75835: LD_VAR 0 4
75839: PUSH
75840: FOR_TO
75841: IFFALSE 75888
// begin hc_class = 13 ;
75843: LD_ADDR_OWVAR 28
75847: PUSH
75848: LD_INT 13
75850: ST_TO_ADDR
// hc_gallery =  ;
75851: LD_ADDR_OWVAR 33
75855: PUSH
75856: LD_STRING 
75858: ST_TO_ADDR
// animal := CreateHuman ;
75859: LD_ADDR_VAR 0 12
75863: PUSH
75864: CALL_OW 44
75868: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75869: LD_VAR 0 12
75873: PPUSH
75874: LD_VAR 0 8
75878: PPUSH
75879: LD_INT 0
75881: PPUSH
75882: CALL 77650 0 3
// end ;
75886: GO 75840
75888: POP
75889: POP
// if fishes then
75890: LD_VAR 0 7
75894: IFFALSE 75961
// for i = 1 to fishes do
75896: LD_ADDR_VAR 0 11
75900: PUSH
75901: DOUBLE
75902: LD_INT 1
75904: DEC
75905: ST_TO_ADDR
75906: LD_VAR 0 7
75910: PUSH
75911: FOR_TO
75912: IFFALSE 75959
// begin hc_class = 20 ;
75914: LD_ADDR_OWVAR 28
75918: PUSH
75919: LD_INT 20
75921: ST_TO_ADDR
// hc_gallery =  ;
75922: LD_ADDR_OWVAR 33
75926: PUSH
75927: LD_STRING 
75929: ST_TO_ADDR
// animal := CreateHuman ;
75930: LD_ADDR_VAR 0 12
75934: PUSH
75935: CALL_OW 44
75939: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75940: LD_VAR 0 12
75944: PPUSH
75945: LD_VAR 0 9
75949: PPUSH
75950: LD_INT 0
75952: PPUSH
75953: CALL 77650 0 3
// end ;
75957: GO 75911
75959: POP
75960: POP
// end ;
75961: LD_VAR 0 10
75965: RET
// export function WantHeal ( sci , unit ) ; begin
75966: LD_INT 0
75968: PPUSH
// if GetTaskList ( sci ) > 0 then
75969: LD_VAR 0 1
75973: PPUSH
75974: CALL_OW 437
75978: PUSH
75979: LD_INT 0
75981: GREATER
75982: IFFALSE 76052
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75984: LD_VAR 0 1
75988: PPUSH
75989: CALL_OW 437
75993: PUSH
75994: LD_INT 1
75996: ARRAY
75997: PUSH
75998: LD_INT 1
76000: ARRAY
76001: PUSH
76002: LD_STRING l
76004: EQUAL
76005: PUSH
76006: LD_VAR 0 1
76010: PPUSH
76011: CALL_OW 437
76015: PUSH
76016: LD_INT 1
76018: ARRAY
76019: PUSH
76020: LD_INT 4
76022: ARRAY
76023: PUSH
76024: LD_VAR 0 2
76028: EQUAL
76029: AND
76030: IFFALSE 76042
// result := true else
76032: LD_ADDR_VAR 0 3
76036: PUSH
76037: LD_INT 1
76039: ST_TO_ADDR
76040: GO 76050
// result := false ;
76042: LD_ADDR_VAR 0 3
76046: PUSH
76047: LD_INT 0
76049: ST_TO_ADDR
// end else
76050: GO 76060
// result := false ;
76052: LD_ADDR_VAR 0 3
76056: PUSH
76057: LD_INT 0
76059: ST_TO_ADDR
// end ;
76060: LD_VAR 0 3
76064: RET
// export function HealTarget ( sci ) ; begin
76065: LD_INT 0
76067: PPUSH
// if not sci then
76068: LD_VAR 0 1
76072: NOT
76073: IFFALSE 76077
// exit ;
76075: GO 76142
// result := 0 ;
76077: LD_ADDR_VAR 0 2
76081: PUSH
76082: LD_INT 0
76084: ST_TO_ADDR
// if GetTaskList ( sci ) then
76085: LD_VAR 0 1
76089: PPUSH
76090: CALL_OW 437
76094: IFFALSE 76142
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76096: LD_VAR 0 1
76100: PPUSH
76101: CALL_OW 437
76105: PUSH
76106: LD_INT 1
76108: ARRAY
76109: PUSH
76110: LD_INT 1
76112: ARRAY
76113: PUSH
76114: LD_STRING l
76116: EQUAL
76117: IFFALSE 76142
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76119: LD_ADDR_VAR 0 2
76123: PUSH
76124: LD_VAR 0 1
76128: PPUSH
76129: CALL_OW 437
76133: PUSH
76134: LD_INT 1
76136: ARRAY
76137: PUSH
76138: LD_INT 4
76140: ARRAY
76141: ST_TO_ADDR
// end ;
76142: LD_VAR 0 2
76146: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76147: LD_INT 0
76149: PPUSH
76150: PPUSH
76151: PPUSH
76152: PPUSH
// if not base_units then
76153: LD_VAR 0 1
76157: NOT
76158: IFFALSE 76162
// exit ;
76160: GO 76249
// result := false ;
76162: LD_ADDR_VAR 0 2
76166: PUSH
76167: LD_INT 0
76169: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76170: LD_ADDR_VAR 0 5
76174: PUSH
76175: LD_VAR 0 1
76179: PPUSH
76180: LD_INT 21
76182: PUSH
76183: LD_INT 3
76185: PUSH
76186: EMPTY
76187: LIST
76188: LIST
76189: PPUSH
76190: CALL_OW 72
76194: ST_TO_ADDR
// if not tmp then
76195: LD_VAR 0 5
76199: NOT
76200: IFFALSE 76204
// exit ;
76202: GO 76249
// for i in tmp do
76204: LD_ADDR_VAR 0 3
76208: PUSH
76209: LD_VAR 0 5
76213: PUSH
76214: FOR_IN
76215: IFFALSE 76247
// begin result := EnemyInRange ( i , 22 ) ;
76217: LD_ADDR_VAR 0 2
76221: PUSH
76222: LD_VAR 0 3
76226: PPUSH
76227: LD_INT 22
76229: PPUSH
76230: CALL 74485 0 2
76234: ST_TO_ADDR
// if result then
76235: LD_VAR 0 2
76239: IFFALSE 76245
// exit ;
76241: POP
76242: POP
76243: GO 76249
// end ;
76245: GO 76214
76247: POP
76248: POP
// end ;
76249: LD_VAR 0 2
76253: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
76254: LD_INT 0
76256: PPUSH
76257: PPUSH
// if not units then
76258: LD_VAR 0 1
76262: NOT
76263: IFFALSE 76267
// exit ;
76265: GO 76337
// result := [ ] ;
76267: LD_ADDR_VAR 0 3
76271: PUSH
76272: EMPTY
76273: ST_TO_ADDR
// for i in units do
76274: LD_ADDR_VAR 0 4
76278: PUSH
76279: LD_VAR 0 1
76283: PUSH
76284: FOR_IN
76285: IFFALSE 76335
// if GetTag ( i ) = tag then
76287: LD_VAR 0 4
76291: PPUSH
76292: CALL_OW 110
76296: PUSH
76297: LD_VAR 0 2
76301: EQUAL
76302: IFFALSE 76333
// result := Replace ( result , result + 1 , i ) ;
76304: LD_ADDR_VAR 0 3
76308: PUSH
76309: LD_VAR 0 3
76313: PPUSH
76314: LD_VAR 0 3
76318: PUSH
76319: LD_INT 1
76321: PLUS
76322: PPUSH
76323: LD_VAR 0 4
76327: PPUSH
76328: CALL_OW 1
76332: ST_TO_ADDR
76333: GO 76284
76335: POP
76336: POP
// end ;
76337: LD_VAR 0 3
76341: RET
// export function IsDriver ( un ) ; begin
76342: LD_INT 0
76344: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76345: LD_ADDR_VAR 0 2
76349: PUSH
76350: LD_VAR 0 1
76354: PUSH
76355: LD_INT 55
76357: PUSH
76358: EMPTY
76359: LIST
76360: PPUSH
76361: CALL_OW 69
76365: IN
76366: ST_TO_ADDR
// end ;
76367: LD_VAR 0 2
76371: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76372: LD_INT 0
76374: PPUSH
76375: PPUSH
// list := [ ] ;
76376: LD_ADDR_VAR 0 5
76380: PUSH
76381: EMPTY
76382: ST_TO_ADDR
// case d of 0 :
76383: LD_VAR 0 3
76387: PUSH
76388: LD_INT 0
76390: DOUBLE
76391: EQUAL
76392: IFTRUE 76396
76394: GO 76529
76396: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76397: LD_ADDR_VAR 0 5
76401: PUSH
76402: LD_VAR 0 1
76406: PUSH
76407: LD_INT 4
76409: MINUS
76410: PUSH
76411: LD_VAR 0 2
76415: PUSH
76416: LD_INT 4
76418: MINUS
76419: PUSH
76420: LD_INT 2
76422: PUSH
76423: EMPTY
76424: LIST
76425: LIST
76426: LIST
76427: PUSH
76428: LD_VAR 0 1
76432: PUSH
76433: LD_INT 3
76435: MINUS
76436: PUSH
76437: LD_VAR 0 2
76441: PUSH
76442: LD_INT 1
76444: PUSH
76445: EMPTY
76446: LIST
76447: LIST
76448: LIST
76449: PUSH
76450: LD_VAR 0 1
76454: PUSH
76455: LD_INT 4
76457: PLUS
76458: PUSH
76459: LD_VAR 0 2
76463: PUSH
76464: LD_INT 4
76466: PUSH
76467: EMPTY
76468: LIST
76469: LIST
76470: LIST
76471: PUSH
76472: LD_VAR 0 1
76476: PUSH
76477: LD_INT 3
76479: PLUS
76480: PUSH
76481: LD_VAR 0 2
76485: PUSH
76486: LD_INT 3
76488: PLUS
76489: PUSH
76490: LD_INT 5
76492: PUSH
76493: EMPTY
76494: LIST
76495: LIST
76496: LIST
76497: PUSH
76498: LD_VAR 0 1
76502: PUSH
76503: LD_VAR 0 2
76507: PUSH
76508: LD_INT 4
76510: PLUS
76511: PUSH
76512: LD_INT 0
76514: PUSH
76515: EMPTY
76516: LIST
76517: LIST
76518: LIST
76519: PUSH
76520: EMPTY
76521: LIST
76522: LIST
76523: LIST
76524: LIST
76525: LIST
76526: ST_TO_ADDR
// end ; 1 :
76527: GO 77227
76529: LD_INT 1
76531: DOUBLE
76532: EQUAL
76533: IFTRUE 76537
76535: GO 76670
76537: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76538: LD_ADDR_VAR 0 5
76542: PUSH
76543: LD_VAR 0 1
76547: PUSH
76548: LD_VAR 0 2
76552: PUSH
76553: LD_INT 4
76555: MINUS
76556: PUSH
76557: LD_INT 3
76559: PUSH
76560: EMPTY
76561: LIST
76562: LIST
76563: LIST
76564: PUSH
76565: LD_VAR 0 1
76569: PUSH
76570: LD_INT 3
76572: MINUS
76573: PUSH
76574: LD_VAR 0 2
76578: PUSH
76579: LD_INT 3
76581: MINUS
76582: PUSH
76583: LD_INT 2
76585: PUSH
76586: EMPTY
76587: LIST
76588: LIST
76589: LIST
76590: PUSH
76591: LD_VAR 0 1
76595: PUSH
76596: LD_INT 4
76598: MINUS
76599: PUSH
76600: LD_VAR 0 2
76604: PUSH
76605: LD_INT 1
76607: PUSH
76608: EMPTY
76609: LIST
76610: LIST
76611: LIST
76612: PUSH
76613: LD_VAR 0 1
76617: PUSH
76618: LD_VAR 0 2
76622: PUSH
76623: LD_INT 3
76625: PLUS
76626: PUSH
76627: LD_INT 0
76629: PUSH
76630: EMPTY
76631: LIST
76632: LIST
76633: LIST
76634: PUSH
76635: LD_VAR 0 1
76639: PUSH
76640: LD_INT 4
76642: PLUS
76643: PUSH
76644: LD_VAR 0 2
76648: PUSH
76649: LD_INT 4
76651: PLUS
76652: PUSH
76653: LD_INT 5
76655: PUSH
76656: EMPTY
76657: LIST
76658: LIST
76659: LIST
76660: PUSH
76661: EMPTY
76662: LIST
76663: LIST
76664: LIST
76665: LIST
76666: LIST
76667: ST_TO_ADDR
// end ; 2 :
76668: GO 77227
76670: LD_INT 2
76672: DOUBLE
76673: EQUAL
76674: IFTRUE 76678
76676: GO 76807
76678: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76679: LD_ADDR_VAR 0 5
76683: PUSH
76684: LD_VAR 0 1
76688: PUSH
76689: LD_VAR 0 2
76693: PUSH
76694: LD_INT 3
76696: MINUS
76697: PUSH
76698: LD_INT 3
76700: PUSH
76701: EMPTY
76702: LIST
76703: LIST
76704: LIST
76705: PUSH
76706: LD_VAR 0 1
76710: PUSH
76711: LD_INT 4
76713: PLUS
76714: PUSH
76715: LD_VAR 0 2
76719: PUSH
76720: LD_INT 4
76722: PUSH
76723: EMPTY
76724: LIST
76725: LIST
76726: LIST
76727: PUSH
76728: LD_VAR 0 1
76732: PUSH
76733: LD_VAR 0 2
76737: PUSH
76738: LD_INT 4
76740: PLUS
76741: PUSH
76742: LD_INT 0
76744: PUSH
76745: EMPTY
76746: LIST
76747: LIST
76748: LIST
76749: PUSH
76750: LD_VAR 0 1
76754: PUSH
76755: LD_INT 3
76757: MINUS
76758: PUSH
76759: LD_VAR 0 2
76763: PUSH
76764: LD_INT 1
76766: PUSH
76767: EMPTY
76768: LIST
76769: LIST
76770: LIST
76771: PUSH
76772: LD_VAR 0 1
76776: PUSH
76777: LD_INT 4
76779: MINUS
76780: PUSH
76781: LD_VAR 0 2
76785: PUSH
76786: LD_INT 4
76788: MINUS
76789: PUSH
76790: LD_INT 2
76792: PUSH
76793: EMPTY
76794: LIST
76795: LIST
76796: LIST
76797: PUSH
76798: EMPTY
76799: LIST
76800: LIST
76801: LIST
76802: LIST
76803: LIST
76804: ST_TO_ADDR
// end ; 3 :
76805: GO 77227
76807: LD_INT 3
76809: DOUBLE
76810: EQUAL
76811: IFTRUE 76815
76813: GO 76948
76815: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76816: LD_ADDR_VAR 0 5
76820: PUSH
76821: LD_VAR 0 1
76825: PUSH
76826: LD_INT 3
76828: PLUS
76829: PUSH
76830: LD_VAR 0 2
76834: PUSH
76835: LD_INT 4
76837: PUSH
76838: EMPTY
76839: LIST
76840: LIST
76841: LIST
76842: PUSH
76843: LD_VAR 0 1
76847: PUSH
76848: LD_INT 4
76850: PLUS
76851: PUSH
76852: LD_VAR 0 2
76856: PUSH
76857: LD_INT 4
76859: PLUS
76860: PUSH
76861: LD_INT 5
76863: PUSH
76864: EMPTY
76865: LIST
76866: LIST
76867: LIST
76868: PUSH
76869: LD_VAR 0 1
76873: PUSH
76874: LD_INT 4
76876: MINUS
76877: PUSH
76878: LD_VAR 0 2
76882: PUSH
76883: LD_INT 1
76885: PUSH
76886: EMPTY
76887: LIST
76888: LIST
76889: LIST
76890: PUSH
76891: LD_VAR 0 1
76895: PUSH
76896: LD_VAR 0 2
76900: PUSH
76901: LD_INT 4
76903: MINUS
76904: PUSH
76905: LD_INT 3
76907: PUSH
76908: EMPTY
76909: LIST
76910: LIST
76911: LIST
76912: PUSH
76913: LD_VAR 0 1
76917: PUSH
76918: LD_INT 3
76920: MINUS
76921: PUSH
76922: LD_VAR 0 2
76926: PUSH
76927: LD_INT 3
76929: MINUS
76930: PUSH
76931: LD_INT 2
76933: PUSH
76934: EMPTY
76935: LIST
76936: LIST
76937: LIST
76938: PUSH
76939: EMPTY
76940: LIST
76941: LIST
76942: LIST
76943: LIST
76944: LIST
76945: ST_TO_ADDR
// end ; 4 :
76946: GO 77227
76948: LD_INT 4
76950: DOUBLE
76951: EQUAL
76952: IFTRUE 76956
76954: GO 77089
76956: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76957: LD_ADDR_VAR 0 5
76961: PUSH
76962: LD_VAR 0 1
76966: PUSH
76967: LD_VAR 0 2
76971: PUSH
76972: LD_INT 4
76974: PLUS
76975: PUSH
76976: LD_INT 0
76978: PUSH
76979: EMPTY
76980: LIST
76981: LIST
76982: LIST
76983: PUSH
76984: LD_VAR 0 1
76988: PUSH
76989: LD_INT 3
76991: PLUS
76992: PUSH
76993: LD_VAR 0 2
76997: PUSH
76998: LD_INT 3
77000: PLUS
77001: PUSH
77002: LD_INT 5
77004: PUSH
77005: EMPTY
77006: LIST
77007: LIST
77008: LIST
77009: PUSH
77010: LD_VAR 0 1
77014: PUSH
77015: LD_INT 4
77017: PLUS
77018: PUSH
77019: LD_VAR 0 2
77023: PUSH
77024: LD_INT 4
77026: PUSH
77027: EMPTY
77028: LIST
77029: LIST
77030: LIST
77031: PUSH
77032: LD_VAR 0 1
77036: PUSH
77037: LD_VAR 0 2
77041: PUSH
77042: LD_INT 3
77044: MINUS
77045: PUSH
77046: LD_INT 3
77048: PUSH
77049: EMPTY
77050: LIST
77051: LIST
77052: LIST
77053: PUSH
77054: LD_VAR 0 1
77058: PUSH
77059: LD_INT 4
77061: MINUS
77062: PUSH
77063: LD_VAR 0 2
77067: PUSH
77068: LD_INT 4
77070: MINUS
77071: PUSH
77072: LD_INT 2
77074: PUSH
77075: EMPTY
77076: LIST
77077: LIST
77078: LIST
77079: PUSH
77080: EMPTY
77081: LIST
77082: LIST
77083: LIST
77084: LIST
77085: LIST
77086: ST_TO_ADDR
// end ; 5 :
77087: GO 77227
77089: LD_INT 5
77091: DOUBLE
77092: EQUAL
77093: IFTRUE 77097
77095: GO 77226
77097: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77098: LD_ADDR_VAR 0 5
77102: PUSH
77103: LD_VAR 0 1
77107: PUSH
77108: LD_INT 4
77110: MINUS
77111: PUSH
77112: LD_VAR 0 2
77116: PUSH
77117: LD_INT 1
77119: PUSH
77120: EMPTY
77121: LIST
77122: LIST
77123: LIST
77124: PUSH
77125: LD_VAR 0 1
77129: PUSH
77130: LD_VAR 0 2
77134: PUSH
77135: LD_INT 4
77137: MINUS
77138: PUSH
77139: LD_INT 3
77141: PUSH
77142: EMPTY
77143: LIST
77144: LIST
77145: LIST
77146: PUSH
77147: LD_VAR 0 1
77151: PUSH
77152: LD_INT 4
77154: PLUS
77155: PUSH
77156: LD_VAR 0 2
77160: PUSH
77161: LD_INT 4
77163: PLUS
77164: PUSH
77165: LD_INT 5
77167: PUSH
77168: EMPTY
77169: LIST
77170: LIST
77171: LIST
77172: PUSH
77173: LD_VAR 0 1
77177: PUSH
77178: LD_INT 3
77180: PLUS
77181: PUSH
77182: LD_VAR 0 2
77186: PUSH
77187: LD_INT 4
77189: PUSH
77190: EMPTY
77191: LIST
77192: LIST
77193: LIST
77194: PUSH
77195: LD_VAR 0 1
77199: PUSH
77200: LD_VAR 0 2
77204: PUSH
77205: LD_INT 3
77207: PLUS
77208: PUSH
77209: LD_INT 0
77211: PUSH
77212: EMPTY
77213: LIST
77214: LIST
77215: LIST
77216: PUSH
77217: EMPTY
77218: LIST
77219: LIST
77220: LIST
77221: LIST
77222: LIST
77223: ST_TO_ADDR
// end ; end ;
77224: GO 77227
77226: POP
// result := list ;
77227: LD_ADDR_VAR 0 4
77231: PUSH
77232: LD_VAR 0 5
77236: ST_TO_ADDR
// end ;
77237: LD_VAR 0 4
77241: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77242: LD_INT 0
77244: PPUSH
77245: PPUSH
77246: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77247: LD_VAR 0 1
77251: NOT
77252: PUSH
77253: LD_VAR 0 2
77257: PUSH
77258: LD_INT 1
77260: PUSH
77261: LD_INT 2
77263: PUSH
77264: LD_INT 3
77266: PUSH
77267: LD_INT 4
77269: PUSH
77270: EMPTY
77271: LIST
77272: LIST
77273: LIST
77274: LIST
77275: IN
77276: NOT
77277: OR
77278: IFFALSE 77282
// exit ;
77280: GO 77374
// tmp := [ ] ;
77282: LD_ADDR_VAR 0 5
77286: PUSH
77287: EMPTY
77288: ST_TO_ADDR
// for i in units do
77289: LD_ADDR_VAR 0 4
77293: PUSH
77294: LD_VAR 0 1
77298: PUSH
77299: FOR_IN
77300: IFFALSE 77343
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
77302: LD_ADDR_VAR 0 5
77306: PUSH
77307: LD_VAR 0 5
77311: PPUSH
77312: LD_VAR 0 5
77316: PUSH
77317: LD_INT 1
77319: PLUS
77320: PPUSH
77321: LD_VAR 0 4
77325: PPUSH
77326: LD_VAR 0 2
77330: PPUSH
77331: CALL_OW 259
77335: PPUSH
77336: CALL_OW 2
77340: ST_TO_ADDR
77341: GO 77299
77343: POP
77344: POP
// if not tmp then
77345: LD_VAR 0 5
77349: NOT
77350: IFFALSE 77354
// exit ;
77352: GO 77374
// result := SortListByListDesc ( units , tmp ) ;
77354: LD_ADDR_VAR 0 3
77358: PUSH
77359: LD_VAR 0 1
77363: PPUSH
77364: LD_VAR 0 5
77368: PPUSH
77369: CALL_OW 77
77373: ST_TO_ADDR
// end ;
77374: LD_VAR 0 3
77378: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77379: LD_INT 0
77381: PPUSH
77382: PPUSH
77383: PPUSH
// result := false ;
77384: LD_ADDR_VAR 0 3
77388: PUSH
77389: LD_INT 0
77391: ST_TO_ADDR
// x := GetX ( building ) ;
77392: LD_ADDR_VAR 0 4
77396: PUSH
77397: LD_VAR 0 2
77401: PPUSH
77402: CALL_OW 250
77406: ST_TO_ADDR
// y := GetY ( building ) ;
77407: LD_ADDR_VAR 0 5
77411: PUSH
77412: LD_VAR 0 2
77416: PPUSH
77417: CALL_OW 251
77421: ST_TO_ADDR
// if not building or not x or not y then
77422: LD_VAR 0 2
77426: NOT
77427: PUSH
77428: LD_VAR 0 4
77432: NOT
77433: OR
77434: PUSH
77435: LD_VAR 0 5
77439: NOT
77440: OR
77441: IFFALSE 77445
// exit ;
77443: GO 77537
// if GetTaskList ( unit ) then
77445: LD_VAR 0 1
77449: PPUSH
77450: CALL_OW 437
77454: IFFALSE 77537
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77456: LD_STRING e
77458: PUSH
77459: LD_VAR 0 1
77463: PPUSH
77464: CALL_OW 437
77468: PUSH
77469: LD_INT 1
77471: ARRAY
77472: PUSH
77473: LD_INT 1
77475: ARRAY
77476: EQUAL
77477: PUSH
77478: LD_VAR 0 4
77482: PUSH
77483: LD_VAR 0 1
77487: PPUSH
77488: CALL_OW 437
77492: PUSH
77493: LD_INT 1
77495: ARRAY
77496: PUSH
77497: LD_INT 2
77499: ARRAY
77500: EQUAL
77501: AND
77502: PUSH
77503: LD_VAR 0 5
77507: PUSH
77508: LD_VAR 0 1
77512: PPUSH
77513: CALL_OW 437
77517: PUSH
77518: LD_INT 1
77520: ARRAY
77521: PUSH
77522: LD_INT 3
77524: ARRAY
77525: EQUAL
77526: AND
77527: IFFALSE 77537
// result := true end ;
77529: LD_ADDR_VAR 0 3
77533: PUSH
77534: LD_INT 1
77536: ST_TO_ADDR
// end ;
77537: LD_VAR 0 3
77541: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77542: LD_INT 0
77544: PPUSH
// result := false ;
77545: LD_ADDR_VAR 0 4
77549: PUSH
77550: LD_INT 0
77552: ST_TO_ADDR
// if GetTaskList ( unit ) then
77553: LD_VAR 0 1
77557: PPUSH
77558: CALL_OW 437
77562: IFFALSE 77645
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77564: LD_STRING M
77566: PUSH
77567: LD_VAR 0 1
77571: PPUSH
77572: CALL_OW 437
77576: PUSH
77577: LD_INT 1
77579: ARRAY
77580: PUSH
77581: LD_INT 1
77583: ARRAY
77584: EQUAL
77585: PUSH
77586: LD_VAR 0 2
77590: PUSH
77591: LD_VAR 0 1
77595: PPUSH
77596: CALL_OW 437
77600: PUSH
77601: LD_INT 1
77603: ARRAY
77604: PUSH
77605: LD_INT 2
77607: ARRAY
77608: EQUAL
77609: AND
77610: PUSH
77611: LD_VAR 0 3
77615: PUSH
77616: LD_VAR 0 1
77620: PPUSH
77621: CALL_OW 437
77625: PUSH
77626: LD_INT 1
77628: ARRAY
77629: PUSH
77630: LD_INT 3
77632: ARRAY
77633: EQUAL
77634: AND
77635: IFFALSE 77645
// result := true ;
77637: LD_ADDR_VAR 0 4
77641: PUSH
77642: LD_INT 1
77644: ST_TO_ADDR
// end ; end ;
77645: LD_VAR 0 4
77649: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77650: LD_INT 0
77652: PPUSH
77653: PPUSH
77654: PPUSH
77655: PPUSH
// if not unit or not area then
77656: LD_VAR 0 1
77660: NOT
77661: PUSH
77662: LD_VAR 0 2
77666: NOT
77667: OR
77668: IFFALSE 77672
// exit ;
77670: GO 77836
// tmp := AreaToList ( area , i ) ;
77672: LD_ADDR_VAR 0 6
77676: PUSH
77677: LD_VAR 0 2
77681: PPUSH
77682: LD_VAR 0 5
77686: PPUSH
77687: CALL_OW 517
77691: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77692: LD_ADDR_VAR 0 5
77696: PUSH
77697: DOUBLE
77698: LD_INT 1
77700: DEC
77701: ST_TO_ADDR
77702: LD_VAR 0 6
77706: PUSH
77707: LD_INT 1
77709: ARRAY
77710: PUSH
77711: FOR_TO
77712: IFFALSE 77834
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77714: LD_ADDR_VAR 0 7
77718: PUSH
77719: LD_VAR 0 6
77723: PUSH
77724: LD_INT 1
77726: ARRAY
77727: PUSH
77728: LD_VAR 0 5
77732: ARRAY
77733: PUSH
77734: LD_VAR 0 6
77738: PUSH
77739: LD_INT 2
77741: ARRAY
77742: PUSH
77743: LD_VAR 0 5
77747: ARRAY
77748: PUSH
77749: EMPTY
77750: LIST
77751: LIST
77752: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
77753: LD_VAR 0 7
77757: PUSH
77758: LD_INT 1
77760: ARRAY
77761: PPUSH
77762: LD_VAR 0 7
77766: PUSH
77767: LD_INT 2
77769: ARRAY
77770: PPUSH
77771: CALL_OW 428
77775: PUSH
77776: LD_INT 0
77778: EQUAL
77779: IFFALSE 77832
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77781: LD_VAR 0 1
77785: PPUSH
77786: LD_VAR 0 7
77790: PUSH
77791: LD_INT 1
77793: ARRAY
77794: PPUSH
77795: LD_VAR 0 7
77799: PUSH
77800: LD_INT 2
77802: ARRAY
77803: PPUSH
77804: LD_VAR 0 3
77808: PPUSH
77809: CALL_OW 48
// result := IsPlaced ( unit ) ;
77813: LD_ADDR_VAR 0 4
77817: PUSH
77818: LD_VAR 0 1
77822: PPUSH
77823: CALL_OW 305
77827: ST_TO_ADDR
// exit ;
77828: POP
77829: POP
77830: GO 77836
// end ; end ;
77832: GO 77711
77834: POP
77835: POP
// end ;
77836: LD_VAR 0 4
77840: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77841: LD_INT 0
77843: PPUSH
77844: PPUSH
77845: PPUSH
// if not side or side > 8 then
77846: LD_VAR 0 1
77850: NOT
77851: PUSH
77852: LD_VAR 0 1
77856: PUSH
77857: LD_INT 8
77859: GREATER
77860: OR
77861: IFFALSE 77865
// exit ;
77863: GO 78052
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77865: LD_ADDR_VAR 0 4
77869: PUSH
77870: LD_INT 22
77872: PUSH
77873: LD_VAR 0 1
77877: PUSH
77878: EMPTY
77879: LIST
77880: LIST
77881: PUSH
77882: LD_INT 21
77884: PUSH
77885: LD_INT 3
77887: PUSH
77888: EMPTY
77889: LIST
77890: LIST
77891: PUSH
77892: EMPTY
77893: LIST
77894: LIST
77895: PPUSH
77896: CALL_OW 69
77900: ST_TO_ADDR
// if not tmp then
77901: LD_VAR 0 4
77905: NOT
77906: IFFALSE 77910
// exit ;
77908: GO 78052
// enable_addtolog := true ;
77910: LD_ADDR_OWVAR 81
77914: PUSH
77915: LD_INT 1
77917: ST_TO_ADDR
// AddToLog ( [ ) ;
77918: LD_STRING [
77920: PPUSH
77921: CALL_OW 561
// for i in tmp do
77925: LD_ADDR_VAR 0 3
77929: PUSH
77930: LD_VAR 0 4
77934: PUSH
77935: FOR_IN
77936: IFFALSE 78043
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77938: LD_STRING [
77940: PUSH
77941: LD_VAR 0 3
77945: PPUSH
77946: CALL_OW 266
77950: STR
77951: PUSH
77952: LD_STRING , 
77954: STR
77955: PUSH
77956: LD_VAR 0 3
77960: PPUSH
77961: CALL_OW 250
77965: STR
77966: PUSH
77967: LD_STRING , 
77969: STR
77970: PUSH
77971: LD_VAR 0 3
77975: PPUSH
77976: CALL_OW 251
77980: STR
77981: PUSH
77982: LD_STRING , 
77984: STR
77985: PUSH
77986: LD_VAR 0 3
77990: PPUSH
77991: CALL_OW 254
77995: STR
77996: PUSH
77997: LD_STRING , 
77999: STR
78000: PUSH
78001: LD_VAR 0 3
78005: PPUSH
78006: LD_INT 1
78008: PPUSH
78009: CALL_OW 268
78013: STR
78014: PUSH
78015: LD_STRING , 
78017: STR
78018: PUSH
78019: LD_VAR 0 3
78023: PPUSH
78024: LD_INT 2
78026: PPUSH
78027: CALL_OW 268
78031: STR
78032: PUSH
78033: LD_STRING ],
78035: STR
78036: PPUSH
78037: CALL_OW 561
// end ;
78041: GO 77935
78043: POP
78044: POP
// AddToLog ( ]; ) ;
78045: LD_STRING ];
78047: PPUSH
78048: CALL_OW 561
// end ;
78052: LD_VAR 0 2
78056: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78057: LD_INT 0
78059: PPUSH
78060: PPUSH
78061: PPUSH
78062: PPUSH
78063: PPUSH
// if not area or not rate or not max then
78064: LD_VAR 0 1
78068: NOT
78069: PUSH
78070: LD_VAR 0 2
78074: NOT
78075: OR
78076: PUSH
78077: LD_VAR 0 4
78081: NOT
78082: OR
78083: IFFALSE 78087
// exit ;
78085: GO 78279
// while 1 do
78087: LD_INT 1
78089: IFFALSE 78279
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78091: LD_ADDR_VAR 0 9
78095: PUSH
78096: LD_VAR 0 1
78100: PPUSH
78101: LD_INT 1
78103: PPUSH
78104: CALL_OW 287
78108: PUSH
78109: LD_INT 10
78111: MUL
78112: ST_TO_ADDR
// r := rate / 10 ;
78113: LD_ADDR_VAR 0 7
78117: PUSH
78118: LD_VAR 0 2
78122: PUSH
78123: LD_INT 10
78125: DIVREAL
78126: ST_TO_ADDR
// time := 1 1$00 ;
78127: LD_ADDR_VAR 0 8
78131: PUSH
78132: LD_INT 2100
78134: ST_TO_ADDR
// if amount < min then
78135: LD_VAR 0 9
78139: PUSH
78140: LD_VAR 0 3
78144: LESS
78145: IFFALSE 78163
// r := r * 2 else
78147: LD_ADDR_VAR 0 7
78151: PUSH
78152: LD_VAR 0 7
78156: PUSH
78157: LD_INT 2
78159: MUL
78160: ST_TO_ADDR
78161: GO 78189
// if amount > max then
78163: LD_VAR 0 9
78167: PUSH
78168: LD_VAR 0 4
78172: GREATER
78173: IFFALSE 78189
// r := r / 2 ;
78175: LD_ADDR_VAR 0 7
78179: PUSH
78180: LD_VAR 0 7
78184: PUSH
78185: LD_INT 2
78187: DIVREAL
78188: ST_TO_ADDR
// time := time / r ;
78189: LD_ADDR_VAR 0 8
78193: PUSH
78194: LD_VAR 0 8
78198: PUSH
78199: LD_VAR 0 7
78203: DIVREAL
78204: ST_TO_ADDR
// if time < 0 then
78205: LD_VAR 0 8
78209: PUSH
78210: LD_INT 0
78212: LESS
78213: IFFALSE 78230
// time := time * - 1 ;
78215: LD_ADDR_VAR 0 8
78219: PUSH
78220: LD_VAR 0 8
78224: PUSH
78225: LD_INT 1
78227: NEG
78228: MUL
78229: ST_TO_ADDR
// wait ( time ) ;
78230: LD_VAR 0 8
78234: PPUSH
78235: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
78239: LD_INT 35
78241: PPUSH
78242: LD_INT 875
78244: PPUSH
78245: CALL_OW 12
78249: PPUSH
78250: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78254: LD_INT 1
78256: PPUSH
78257: LD_INT 5
78259: PPUSH
78260: CALL_OW 12
78264: PPUSH
78265: LD_VAR 0 1
78269: PPUSH
78270: LD_INT 1
78272: PPUSH
78273: CALL_OW 55
// end ;
78277: GO 78087
// end ;
78279: LD_VAR 0 5
78283: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78284: LD_INT 0
78286: PPUSH
78287: PPUSH
78288: PPUSH
78289: PPUSH
78290: PPUSH
78291: PPUSH
78292: PPUSH
78293: PPUSH
// if not turrets or not factories then
78294: LD_VAR 0 1
78298: NOT
78299: PUSH
78300: LD_VAR 0 2
78304: NOT
78305: OR
78306: IFFALSE 78310
// exit ;
78308: GO 78617
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78310: LD_ADDR_VAR 0 10
78314: PUSH
78315: LD_INT 5
78317: PUSH
78318: LD_INT 6
78320: PUSH
78321: EMPTY
78322: LIST
78323: LIST
78324: PUSH
78325: LD_INT 2
78327: PUSH
78328: LD_INT 4
78330: PUSH
78331: EMPTY
78332: LIST
78333: LIST
78334: PUSH
78335: LD_INT 3
78337: PUSH
78338: LD_INT 5
78340: PUSH
78341: EMPTY
78342: LIST
78343: LIST
78344: PUSH
78345: EMPTY
78346: LIST
78347: LIST
78348: LIST
78349: PUSH
78350: LD_INT 24
78352: PUSH
78353: LD_INT 25
78355: PUSH
78356: EMPTY
78357: LIST
78358: LIST
78359: PUSH
78360: LD_INT 23
78362: PUSH
78363: LD_INT 27
78365: PUSH
78366: EMPTY
78367: LIST
78368: LIST
78369: PUSH
78370: EMPTY
78371: LIST
78372: LIST
78373: PUSH
78374: LD_INT 42
78376: PUSH
78377: LD_INT 43
78379: PUSH
78380: EMPTY
78381: LIST
78382: LIST
78383: PUSH
78384: LD_INT 44
78386: PUSH
78387: LD_INT 46
78389: PUSH
78390: EMPTY
78391: LIST
78392: LIST
78393: PUSH
78394: LD_INT 45
78396: PUSH
78397: LD_INT 47
78399: PUSH
78400: EMPTY
78401: LIST
78402: LIST
78403: PUSH
78404: EMPTY
78405: LIST
78406: LIST
78407: LIST
78408: PUSH
78409: EMPTY
78410: LIST
78411: LIST
78412: LIST
78413: ST_TO_ADDR
// result := [ ] ;
78414: LD_ADDR_VAR 0 3
78418: PUSH
78419: EMPTY
78420: ST_TO_ADDR
// for i in turrets do
78421: LD_ADDR_VAR 0 4
78425: PUSH
78426: LD_VAR 0 1
78430: PUSH
78431: FOR_IN
78432: IFFALSE 78615
// begin nat := GetNation ( i ) ;
78434: LD_ADDR_VAR 0 7
78438: PUSH
78439: LD_VAR 0 4
78443: PPUSH
78444: CALL_OW 248
78448: ST_TO_ADDR
// weapon := 0 ;
78449: LD_ADDR_VAR 0 8
78453: PUSH
78454: LD_INT 0
78456: ST_TO_ADDR
// if not nat then
78457: LD_VAR 0 7
78461: NOT
78462: IFFALSE 78466
// continue ;
78464: GO 78431
// for j in list [ nat ] do
78466: LD_ADDR_VAR 0 5
78470: PUSH
78471: LD_VAR 0 10
78475: PUSH
78476: LD_VAR 0 7
78480: ARRAY
78481: PUSH
78482: FOR_IN
78483: IFFALSE 78524
// if GetBWeapon ( i ) = j [ 1 ] then
78485: LD_VAR 0 4
78489: PPUSH
78490: CALL_OW 269
78494: PUSH
78495: LD_VAR 0 5
78499: PUSH
78500: LD_INT 1
78502: ARRAY
78503: EQUAL
78504: IFFALSE 78522
// begin weapon := j [ 2 ] ;
78506: LD_ADDR_VAR 0 8
78510: PUSH
78511: LD_VAR 0 5
78515: PUSH
78516: LD_INT 2
78518: ARRAY
78519: ST_TO_ADDR
// break ;
78520: GO 78524
// end ;
78522: GO 78482
78524: POP
78525: POP
// if not weapon then
78526: LD_VAR 0 8
78530: NOT
78531: IFFALSE 78535
// continue ;
78533: GO 78431
// for k in factories do
78535: LD_ADDR_VAR 0 6
78539: PUSH
78540: LD_VAR 0 2
78544: PUSH
78545: FOR_IN
78546: IFFALSE 78611
// begin weapons := AvailableWeaponList ( k ) ;
78548: LD_ADDR_VAR 0 9
78552: PUSH
78553: LD_VAR 0 6
78557: PPUSH
78558: CALL_OW 478
78562: ST_TO_ADDR
// if not weapons then
78563: LD_VAR 0 9
78567: NOT
78568: IFFALSE 78572
// continue ;
78570: GO 78545
// if weapon in weapons then
78572: LD_VAR 0 8
78576: PUSH
78577: LD_VAR 0 9
78581: IN
78582: IFFALSE 78609
// begin result := [ i , weapon ] ;
78584: LD_ADDR_VAR 0 3
78588: PUSH
78589: LD_VAR 0 4
78593: PUSH
78594: LD_VAR 0 8
78598: PUSH
78599: EMPTY
78600: LIST
78601: LIST
78602: ST_TO_ADDR
// exit ;
78603: POP
78604: POP
78605: POP
78606: POP
78607: GO 78617
// end ; end ;
78609: GO 78545
78611: POP
78612: POP
// end ;
78613: GO 78431
78615: POP
78616: POP
// end ;
78617: LD_VAR 0 3
78621: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78622: LD_INT 0
78624: PPUSH
// if not side or side > 8 then
78625: LD_VAR 0 3
78629: NOT
78630: PUSH
78631: LD_VAR 0 3
78635: PUSH
78636: LD_INT 8
78638: GREATER
78639: OR
78640: IFFALSE 78644
// exit ;
78642: GO 78703
// if not range then
78644: LD_VAR 0 4
78648: NOT
78649: IFFALSE 78660
// range := - 12 ;
78651: LD_ADDR_VAR 0 4
78655: PUSH
78656: LD_INT 12
78658: NEG
78659: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78660: LD_VAR 0 1
78664: PPUSH
78665: LD_VAR 0 2
78669: PPUSH
78670: LD_VAR 0 3
78674: PPUSH
78675: LD_VAR 0 4
78679: PPUSH
78680: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78684: LD_VAR 0 1
78688: PPUSH
78689: LD_VAR 0 2
78693: PPUSH
78694: LD_VAR 0 3
78698: PPUSH
78699: CALL_OW 331
// end ;
78703: LD_VAR 0 5
78707: RET
// export function Video ( mode ) ; begin
78708: LD_INT 0
78710: PPUSH
// ingame_video = mode ;
78711: LD_ADDR_OWVAR 52
78715: PUSH
78716: LD_VAR 0 1
78720: ST_TO_ADDR
// interface_hidden = mode ;
78721: LD_ADDR_OWVAR 54
78725: PUSH
78726: LD_VAR 0 1
78730: ST_TO_ADDR
// end ;
78731: LD_VAR 0 2
78735: RET
// export function Join ( array , element ) ; begin
78736: LD_INT 0
78738: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78739: LD_ADDR_VAR 0 3
78743: PUSH
78744: LD_VAR 0 1
78748: PPUSH
78749: LD_VAR 0 1
78753: PUSH
78754: LD_INT 1
78756: PLUS
78757: PPUSH
78758: LD_VAR 0 2
78762: PPUSH
78763: CALL_OW 1
78767: ST_TO_ADDR
// end ;
78768: LD_VAR 0 3
78772: RET
// export function JoinUnion ( array , element ) ; begin
78773: LD_INT 0
78775: PPUSH
// result := array union element ;
78776: LD_ADDR_VAR 0 3
78780: PUSH
78781: LD_VAR 0 1
78785: PUSH
78786: LD_VAR 0 2
78790: UNION
78791: ST_TO_ADDR
// end ;
78792: LD_VAR 0 3
78796: RET
// export function GetBehemoths ( side ) ; begin
78797: LD_INT 0
78799: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
78800: LD_ADDR_VAR 0 2
78804: PUSH
78805: LD_INT 22
78807: PUSH
78808: LD_VAR 0 1
78812: PUSH
78813: EMPTY
78814: LIST
78815: LIST
78816: PUSH
78817: LD_INT 31
78819: PUSH
78820: LD_INT 25
78822: PUSH
78823: EMPTY
78824: LIST
78825: LIST
78826: PUSH
78827: EMPTY
78828: LIST
78829: LIST
78830: PPUSH
78831: CALL_OW 69
78835: ST_TO_ADDR
// end ;
78836: LD_VAR 0 2
78840: RET
// export function Shuffle ( array ) ; var i , index ; begin
78841: LD_INT 0
78843: PPUSH
78844: PPUSH
78845: PPUSH
// result := [ ] ;
78846: LD_ADDR_VAR 0 2
78850: PUSH
78851: EMPTY
78852: ST_TO_ADDR
// if not array then
78853: LD_VAR 0 1
78857: NOT
78858: IFFALSE 78862
// exit ;
78860: GO 78961
// Randomize ;
78862: CALL_OW 10
// for i = array downto 1 do
78866: LD_ADDR_VAR 0 3
78870: PUSH
78871: DOUBLE
78872: LD_VAR 0 1
78876: INC
78877: ST_TO_ADDR
78878: LD_INT 1
78880: PUSH
78881: FOR_DOWNTO
78882: IFFALSE 78959
// begin index := rand ( 1 , array ) ;
78884: LD_ADDR_VAR 0 4
78888: PUSH
78889: LD_INT 1
78891: PPUSH
78892: LD_VAR 0 1
78896: PPUSH
78897: CALL_OW 12
78901: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78902: LD_ADDR_VAR 0 2
78906: PUSH
78907: LD_VAR 0 2
78911: PPUSH
78912: LD_VAR 0 2
78916: PUSH
78917: LD_INT 1
78919: PLUS
78920: PPUSH
78921: LD_VAR 0 1
78925: PUSH
78926: LD_VAR 0 4
78930: ARRAY
78931: PPUSH
78932: CALL_OW 2
78936: ST_TO_ADDR
// array := Delete ( array , index ) ;
78937: LD_ADDR_VAR 0 1
78941: PUSH
78942: LD_VAR 0 1
78946: PPUSH
78947: LD_VAR 0 4
78951: PPUSH
78952: CALL_OW 3
78956: ST_TO_ADDR
// end ;
78957: GO 78881
78959: POP
78960: POP
// end ;
78961: LD_VAR 0 2
78965: RET
// export function GetBaseMaterials ( base ) ; begin
78966: LD_INT 0
78968: PPUSH
// result := [ 0 , 0 , 0 ] ;
78969: LD_ADDR_VAR 0 2
78973: PUSH
78974: LD_INT 0
78976: PUSH
78977: LD_INT 0
78979: PUSH
78980: LD_INT 0
78982: PUSH
78983: EMPTY
78984: LIST
78985: LIST
78986: LIST
78987: ST_TO_ADDR
// if not base then
78988: LD_VAR 0 1
78992: NOT
78993: IFFALSE 78997
// exit ;
78995: GO 79046
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78997: LD_ADDR_VAR 0 2
79001: PUSH
79002: LD_VAR 0 1
79006: PPUSH
79007: LD_INT 1
79009: PPUSH
79010: CALL_OW 275
79014: PUSH
79015: LD_VAR 0 1
79019: PPUSH
79020: LD_INT 2
79022: PPUSH
79023: CALL_OW 275
79027: PUSH
79028: LD_VAR 0 1
79032: PPUSH
79033: LD_INT 3
79035: PPUSH
79036: CALL_OW 275
79040: PUSH
79041: EMPTY
79042: LIST
79043: LIST
79044: LIST
79045: ST_TO_ADDR
// end ;
79046: LD_VAR 0 2
79050: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79051: LD_INT 0
79053: PPUSH
79054: PPUSH
// result := array ;
79055: LD_ADDR_VAR 0 3
79059: PUSH
79060: LD_VAR 0 1
79064: ST_TO_ADDR
// if size > 0 then
79065: LD_VAR 0 2
79069: PUSH
79070: LD_INT 0
79072: GREATER
79073: IFFALSE 79119
// for i := array downto size do
79075: LD_ADDR_VAR 0 4
79079: PUSH
79080: DOUBLE
79081: LD_VAR 0 1
79085: INC
79086: ST_TO_ADDR
79087: LD_VAR 0 2
79091: PUSH
79092: FOR_DOWNTO
79093: IFFALSE 79117
// result := Delete ( result , result ) ;
79095: LD_ADDR_VAR 0 3
79099: PUSH
79100: LD_VAR 0 3
79104: PPUSH
79105: LD_VAR 0 3
79109: PPUSH
79110: CALL_OW 3
79114: ST_TO_ADDR
79115: GO 79092
79117: POP
79118: POP
// end ;
79119: LD_VAR 0 3
79123: RET
// export function ComExit ( unit ) ; var tmp ; begin
79124: LD_INT 0
79126: PPUSH
79127: PPUSH
// if not IsInUnit ( unit ) then
79128: LD_VAR 0 1
79132: PPUSH
79133: CALL_OW 310
79137: NOT
79138: IFFALSE 79142
// exit ;
79140: GO 79202
// tmp := IsInUnit ( unit ) ;
79142: LD_ADDR_VAR 0 3
79146: PUSH
79147: LD_VAR 0 1
79151: PPUSH
79152: CALL_OW 310
79156: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79157: LD_VAR 0 3
79161: PPUSH
79162: CALL_OW 247
79166: PUSH
79167: LD_INT 2
79169: EQUAL
79170: IFFALSE 79183
// ComExitVehicle ( unit ) else
79172: LD_VAR 0 1
79176: PPUSH
79177: CALL_OW 121
79181: GO 79192
// ComExitBuilding ( unit ) ;
79183: LD_VAR 0 1
79187: PPUSH
79188: CALL_OW 122
// result := tmp ;
79192: LD_ADDR_VAR 0 2
79196: PUSH
79197: LD_VAR 0 3
79201: ST_TO_ADDR
// end ;
79202: LD_VAR 0 2
79206: RET
// export function ComExitAll ( units ) ; var i ; begin
79207: LD_INT 0
79209: PPUSH
79210: PPUSH
// if not units then
79211: LD_VAR 0 1
79215: NOT
79216: IFFALSE 79220
// exit ;
79218: GO 79246
// for i in units do
79220: LD_ADDR_VAR 0 3
79224: PUSH
79225: LD_VAR 0 1
79229: PUSH
79230: FOR_IN
79231: IFFALSE 79244
// ComExit ( i ) ;
79233: LD_VAR 0 3
79237: PPUSH
79238: CALL 79124 0 1
79242: GO 79230
79244: POP
79245: POP
// end ;
79246: LD_VAR 0 2
79250: RET
// export function ResetHc ; begin
79251: LD_INT 0
79253: PPUSH
// InitHc ;
79254: CALL_OW 19
// hc_importance := 0 ;
79258: LD_ADDR_OWVAR 32
79262: PUSH
79263: LD_INT 0
79265: ST_TO_ADDR
// end ;
79266: LD_VAR 0 1
79270: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79271: LD_INT 0
79273: PPUSH
79274: PPUSH
79275: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79276: LD_ADDR_VAR 0 6
79280: PUSH
79281: LD_VAR 0 1
79285: PUSH
79286: LD_VAR 0 3
79290: PLUS
79291: PUSH
79292: LD_INT 2
79294: DIV
79295: ST_TO_ADDR
// if _x < 0 then
79296: LD_VAR 0 6
79300: PUSH
79301: LD_INT 0
79303: LESS
79304: IFFALSE 79321
// _x := _x * - 1 ;
79306: LD_ADDR_VAR 0 6
79310: PUSH
79311: LD_VAR 0 6
79315: PUSH
79316: LD_INT 1
79318: NEG
79319: MUL
79320: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79321: LD_ADDR_VAR 0 7
79325: PUSH
79326: LD_VAR 0 2
79330: PUSH
79331: LD_VAR 0 4
79335: PLUS
79336: PUSH
79337: LD_INT 2
79339: DIV
79340: ST_TO_ADDR
// if _y < 0 then
79341: LD_VAR 0 7
79345: PUSH
79346: LD_INT 0
79348: LESS
79349: IFFALSE 79366
// _y := _y * - 1 ;
79351: LD_ADDR_VAR 0 7
79355: PUSH
79356: LD_VAR 0 7
79360: PUSH
79361: LD_INT 1
79363: NEG
79364: MUL
79365: ST_TO_ADDR
// result := [ _x , _y ] ;
79366: LD_ADDR_VAR 0 5
79370: PUSH
79371: LD_VAR 0 6
79375: PUSH
79376: LD_VAR 0 7
79380: PUSH
79381: EMPTY
79382: LIST
79383: LIST
79384: ST_TO_ADDR
// end ;
79385: LD_VAR 0 5
79389: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79390: LD_INT 0
79392: PPUSH
79393: PPUSH
79394: PPUSH
79395: PPUSH
// task := GetTaskList ( unit ) ;
79396: LD_ADDR_VAR 0 7
79400: PUSH
79401: LD_VAR 0 1
79405: PPUSH
79406: CALL_OW 437
79410: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79411: LD_VAR 0 7
79415: NOT
79416: PUSH
79417: LD_VAR 0 1
79421: PPUSH
79422: LD_VAR 0 2
79426: PPUSH
79427: CALL_OW 308
79431: NOT
79432: AND
79433: IFFALSE 79437
// exit ;
79435: GO 79555
// if IsInArea ( unit , area ) then
79437: LD_VAR 0 1
79441: PPUSH
79442: LD_VAR 0 2
79446: PPUSH
79447: CALL_OW 308
79451: IFFALSE 79469
// begin ComMoveToArea ( unit , goAway ) ;
79453: LD_VAR 0 1
79457: PPUSH
79458: LD_VAR 0 3
79462: PPUSH
79463: CALL_OW 113
// exit ;
79467: GO 79555
// end ; if task [ 1 ] [ 1 ] <> M then
79469: LD_VAR 0 7
79473: PUSH
79474: LD_INT 1
79476: ARRAY
79477: PUSH
79478: LD_INT 1
79480: ARRAY
79481: PUSH
79482: LD_STRING M
79484: NONEQUAL
79485: IFFALSE 79489
// exit ;
79487: GO 79555
// x := task [ 1 ] [ 2 ] ;
79489: LD_ADDR_VAR 0 5
79493: PUSH
79494: LD_VAR 0 7
79498: PUSH
79499: LD_INT 1
79501: ARRAY
79502: PUSH
79503: LD_INT 2
79505: ARRAY
79506: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79507: LD_ADDR_VAR 0 6
79511: PUSH
79512: LD_VAR 0 7
79516: PUSH
79517: LD_INT 1
79519: ARRAY
79520: PUSH
79521: LD_INT 3
79523: ARRAY
79524: ST_TO_ADDR
// if InArea ( x , y , area ) then
79525: LD_VAR 0 5
79529: PPUSH
79530: LD_VAR 0 6
79534: PPUSH
79535: LD_VAR 0 2
79539: PPUSH
79540: CALL_OW 309
79544: IFFALSE 79555
// ComStop ( unit ) ;
79546: LD_VAR 0 1
79550: PPUSH
79551: CALL_OW 141
// end ;
79555: LD_VAR 0 4
79559: RET
// export function Abs ( value ) ; begin
79560: LD_INT 0
79562: PPUSH
// result := value ;
79563: LD_ADDR_VAR 0 2
79567: PUSH
79568: LD_VAR 0 1
79572: ST_TO_ADDR
// if value < 0 then
79573: LD_VAR 0 1
79577: PUSH
79578: LD_INT 0
79580: LESS
79581: IFFALSE 79598
// result := value * - 1 ;
79583: LD_ADDR_VAR 0 2
79587: PUSH
79588: LD_VAR 0 1
79592: PUSH
79593: LD_INT 1
79595: NEG
79596: MUL
79597: ST_TO_ADDR
// end ;
79598: LD_VAR 0 2
79602: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79603: LD_INT 0
79605: PPUSH
79606: PPUSH
79607: PPUSH
79608: PPUSH
79609: PPUSH
79610: PPUSH
79611: PPUSH
79612: PPUSH
// if not unit or not building then
79613: LD_VAR 0 1
79617: NOT
79618: PUSH
79619: LD_VAR 0 2
79623: NOT
79624: OR
79625: IFFALSE 79629
// exit ;
79627: GO 79855
// x := GetX ( building ) ;
79629: LD_ADDR_VAR 0 4
79633: PUSH
79634: LD_VAR 0 2
79638: PPUSH
79639: CALL_OW 250
79643: ST_TO_ADDR
// y := GetY ( building ) ;
79644: LD_ADDR_VAR 0 6
79648: PUSH
79649: LD_VAR 0 2
79653: PPUSH
79654: CALL_OW 251
79658: ST_TO_ADDR
// d := GetDir ( building ) ;
79659: LD_ADDR_VAR 0 8
79663: PUSH
79664: LD_VAR 0 2
79668: PPUSH
79669: CALL_OW 254
79673: ST_TO_ADDR
// r := 4 ;
79674: LD_ADDR_VAR 0 9
79678: PUSH
79679: LD_INT 4
79681: ST_TO_ADDR
// for i := 1 to 5 do
79682: LD_ADDR_VAR 0 10
79686: PUSH
79687: DOUBLE
79688: LD_INT 1
79690: DEC
79691: ST_TO_ADDR
79692: LD_INT 5
79694: PUSH
79695: FOR_TO
79696: IFFALSE 79853
// begin _x := ShiftX ( x , d , r + i ) ;
79698: LD_ADDR_VAR 0 5
79702: PUSH
79703: LD_VAR 0 4
79707: PPUSH
79708: LD_VAR 0 8
79712: PPUSH
79713: LD_VAR 0 9
79717: PUSH
79718: LD_VAR 0 10
79722: PLUS
79723: PPUSH
79724: CALL_OW 272
79728: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79729: LD_ADDR_VAR 0 7
79733: PUSH
79734: LD_VAR 0 6
79738: PPUSH
79739: LD_VAR 0 8
79743: PPUSH
79744: LD_VAR 0 9
79748: PUSH
79749: LD_VAR 0 10
79753: PLUS
79754: PPUSH
79755: CALL_OW 273
79759: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79760: LD_VAR 0 5
79764: PPUSH
79765: LD_VAR 0 7
79769: PPUSH
79770: CALL_OW 488
79774: PUSH
79775: LD_VAR 0 5
79779: PPUSH
79780: LD_VAR 0 7
79784: PPUSH
79785: CALL_OW 428
79789: PPUSH
79790: CALL_OW 247
79794: PUSH
79795: LD_INT 3
79797: PUSH
79798: LD_INT 2
79800: PUSH
79801: EMPTY
79802: LIST
79803: LIST
79804: IN
79805: NOT
79806: AND
79807: IFFALSE 79851
// begin ComMoveXY ( unit , _x , _y ) ;
79809: LD_VAR 0 1
79813: PPUSH
79814: LD_VAR 0 5
79818: PPUSH
79819: LD_VAR 0 7
79823: PPUSH
79824: CALL_OW 111
// result := [ _x , _y ] ;
79828: LD_ADDR_VAR 0 3
79832: PUSH
79833: LD_VAR 0 5
79837: PUSH
79838: LD_VAR 0 7
79842: PUSH
79843: EMPTY
79844: LIST
79845: LIST
79846: ST_TO_ADDR
// exit ;
79847: POP
79848: POP
79849: GO 79855
// end ; end ;
79851: GO 79695
79853: POP
79854: POP
// end ;
79855: LD_VAR 0 3
79859: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79860: LD_INT 0
79862: PPUSH
79863: PPUSH
79864: PPUSH
// result := 0 ;
79865: LD_ADDR_VAR 0 3
79869: PUSH
79870: LD_INT 0
79872: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79873: LD_VAR 0 1
79877: PUSH
79878: LD_INT 0
79880: LESS
79881: PUSH
79882: LD_VAR 0 1
79886: PUSH
79887: LD_INT 8
79889: GREATER
79890: OR
79891: PUSH
79892: LD_VAR 0 2
79896: PUSH
79897: LD_INT 0
79899: LESS
79900: OR
79901: PUSH
79902: LD_VAR 0 2
79906: PUSH
79907: LD_INT 8
79909: GREATER
79910: OR
79911: IFFALSE 79915
// exit ;
79913: GO 79990
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79915: LD_ADDR_VAR 0 4
79919: PUSH
79920: LD_INT 22
79922: PUSH
79923: LD_VAR 0 2
79927: PUSH
79928: EMPTY
79929: LIST
79930: LIST
79931: PPUSH
79932: CALL_OW 69
79936: PUSH
79937: FOR_IN
79938: IFFALSE 79988
// begin un := UnitShoot ( i ) ;
79940: LD_ADDR_VAR 0 5
79944: PUSH
79945: LD_VAR 0 4
79949: PPUSH
79950: CALL_OW 504
79954: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79955: LD_VAR 0 5
79959: PPUSH
79960: CALL_OW 255
79964: PUSH
79965: LD_VAR 0 1
79969: EQUAL
79970: IFFALSE 79986
// begin result := un ;
79972: LD_ADDR_VAR 0 3
79976: PUSH
79977: LD_VAR 0 5
79981: ST_TO_ADDR
// exit ;
79982: POP
79983: POP
79984: GO 79990
// end ; end ;
79986: GO 79937
79988: POP
79989: POP
// end ;
79990: LD_VAR 0 3
79994: RET
// export function GetCargoBay ( units ) ; begin
79995: LD_INT 0
79997: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79998: LD_ADDR_VAR 0 2
80002: PUSH
80003: LD_VAR 0 1
80007: PPUSH
80008: LD_INT 2
80010: PUSH
80011: LD_INT 34
80013: PUSH
80014: LD_INT 12
80016: PUSH
80017: EMPTY
80018: LIST
80019: LIST
80020: PUSH
80021: LD_INT 34
80023: PUSH
80024: LD_INT 51
80026: PUSH
80027: EMPTY
80028: LIST
80029: LIST
80030: PUSH
80031: LD_INT 34
80033: PUSH
80034: LD_INT 32
80036: PUSH
80037: EMPTY
80038: LIST
80039: LIST
80040: PUSH
80041: LD_INT 34
80043: PUSH
80044: LD_EXP 66
80048: PUSH
80049: EMPTY
80050: LIST
80051: LIST
80052: PUSH
80053: EMPTY
80054: LIST
80055: LIST
80056: LIST
80057: LIST
80058: LIST
80059: PPUSH
80060: CALL_OW 72
80064: ST_TO_ADDR
// end ;
80065: LD_VAR 0 2
80069: RET
// export function Negate ( value ) ; begin
80070: LD_INT 0
80072: PPUSH
// result := not value ;
80073: LD_ADDR_VAR 0 2
80077: PUSH
80078: LD_VAR 0 1
80082: NOT
80083: ST_TO_ADDR
// end ;
80084: LD_VAR 0 2
80088: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
80089: LD_INT 0
80091: PPUSH
// if x1 = x2 then
80092: LD_VAR 0 1
80096: PUSH
80097: LD_VAR 0 3
80101: EQUAL
80102: IFFALSE 80136
// begin if y1 > y2 then
80104: LD_VAR 0 2
80108: PUSH
80109: LD_VAR 0 4
80113: GREATER
80114: IFFALSE 80126
// result := 0 else
80116: LD_ADDR_VAR 0 5
80120: PUSH
80121: LD_INT 0
80123: ST_TO_ADDR
80124: GO 80134
// result := 3 ;
80126: LD_ADDR_VAR 0 5
80130: PUSH
80131: LD_INT 3
80133: ST_TO_ADDR
// exit ;
80134: GO 80222
// end ; if y1 = y2 then
80136: LD_VAR 0 2
80140: PUSH
80141: LD_VAR 0 4
80145: EQUAL
80146: IFFALSE 80180
// begin if x1 > x2 then
80148: LD_VAR 0 1
80152: PUSH
80153: LD_VAR 0 3
80157: GREATER
80158: IFFALSE 80170
// result := 1 else
80160: LD_ADDR_VAR 0 5
80164: PUSH
80165: LD_INT 1
80167: ST_TO_ADDR
80168: GO 80178
// result := 4 ;
80170: LD_ADDR_VAR 0 5
80174: PUSH
80175: LD_INT 4
80177: ST_TO_ADDR
// exit ;
80178: GO 80222
// end ; if x1 > x2 and y1 > y2 then
80180: LD_VAR 0 1
80184: PUSH
80185: LD_VAR 0 3
80189: GREATER
80190: PUSH
80191: LD_VAR 0 2
80195: PUSH
80196: LD_VAR 0 4
80200: GREATER
80201: AND
80202: IFFALSE 80214
// result := 2 else
80204: LD_ADDR_VAR 0 5
80208: PUSH
80209: LD_INT 2
80211: ST_TO_ADDR
80212: GO 80222
// result := 5 ;
80214: LD_ADDR_VAR 0 5
80218: PUSH
80219: LD_INT 5
80221: ST_TO_ADDR
// end ;
80222: LD_VAR 0 5
80226: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80227: LD_INT 0
80229: PPUSH
80230: PPUSH
// if not driver or not IsInUnit ( driver ) then
80231: LD_VAR 0 1
80235: NOT
80236: PUSH
80237: LD_VAR 0 1
80241: PPUSH
80242: CALL_OW 310
80246: NOT
80247: OR
80248: IFFALSE 80252
// exit ;
80250: GO 80342
// vehicle := IsInUnit ( driver ) ;
80252: LD_ADDR_VAR 0 3
80256: PUSH
80257: LD_VAR 0 1
80261: PPUSH
80262: CALL_OW 310
80266: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80267: LD_VAR 0 1
80271: PPUSH
80272: LD_STRING \
80274: PUSH
80275: LD_INT 0
80277: PUSH
80278: LD_INT 0
80280: PUSH
80281: LD_INT 0
80283: PUSH
80284: LD_INT 0
80286: PUSH
80287: LD_INT 0
80289: PUSH
80290: LD_INT 0
80292: PUSH
80293: EMPTY
80294: LIST
80295: LIST
80296: LIST
80297: LIST
80298: LIST
80299: LIST
80300: LIST
80301: PUSH
80302: LD_STRING E
80304: PUSH
80305: LD_INT 0
80307: PUSH
80308: LD_INT 0
80310: PUSH
80311: LD_VAR 0 3
80315: PUSH
80316: LD_INT 0
80318: PUSH
80319: LD_INT 0
80321: PUSH
80322: LD_INT 0
80324: PUSH
80325: EMPTY
80326: LIST
80327: LIST
80328: LIST
80329: LIST
80330: LIST
80331: LIST
80332: LIST
80333: PUSH
80334: EMPTY
80335: LIST
80336: LIST
80337: PPUSH
80338: CALL_OW 446
// end ;
80342: LD_VAR 0 2
80346: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80347: LD_INT 0
80349: PPUSH
80350: PPUSH
// if not driver or not IsInUnit ( driver ) then
80351: LD_VAR 0 1
80355: NOT
80356: PUSH
80357: LD_VAR 0 1
80361: PPUSH
80362: CALL_OW 310
80366: NOT
80367: OR
80368: IFFALSE 80372
// exit ;
80370: GO 80462
// vehicle := IsInUnit ( driver ) ;
80372: LD_ADDR_VAR 0 3
80376: PUSH
80377: LD_VAR 0 1
80381: PPUSH
80382: CALL_OW 310
80386: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80387: LD_VAR 0 1
80391: PPUSH
80392: LD_STRING \
80394: PUSH
80395: LD_INT 0
80397: PUSH
80398: LD_INT 0
80400: PUSH
80401: LD_INT 0
80403: PUSH
80404: LD_INT 0
80406: PUSH
80407: LD_INT 0
80409: PUSH
80410: LD_INT 0
80412: PUSH
80413: EMPTY
80414: LIST
80415: LIST
80416: LIST
80417: LIST
80418: LIST
80419: LIST
80420: LIST
80421: PUSH
80422: LD_STRING E
80424: PUSH
80425: LD_INT 0
80427: PUSH
80428: LD_INT 0
80430: PUSH
80431: LD_VAR 0 3
80435: PUSH
80436: LD_INT 0
80438: PUSH
80439: LD_INT 0
80441: PUSH
80442: LD_INT 0
80444: PUSH
80445: EMPTY
80446: LIST
80447: LIST
80448: LIST
80449: LIST
80450: LIST
80451: LIST
80452: LIST
80453: PUSH
80454: EMPTY
80455: LIST
80456: LIST
80457: PPUSH
80458: CALL_OW 447
// end ;
80462: LD_VAR 0 2
80466: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80467: LD_INT 0
80469: PPUSH
80470: PPUSH
80471: PPUSH
// tmp := [ ] ;
80472: LD_ADDR_VAR 0 5
80476: PUSH
80477: EMPTY
80478: ST_TO_ADDR
// for i in units do
80479: LD_ADDR_VAR 0 4
80483: PUSH
80484: LD_VAR 0 1
80488: PUSH
80489: FOR_IN
80490: IFFALSE 80528
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80492: LD_ADDR_VAR 0 5
80496: PUSH
80497: LD_VAR 0 5
80501: PPUSH
80502: LD_VAR 0 5
80506: PUSH
80507: LD_INT 1
80509: PLUS
80510: PPUSH
80511: LD_VAR 0 4
80515: PPUSH
80516: CALL_OW 256
80520: PPUSH
80521: CALL_OW 2
80525: ST_TO_ADDR
80526: GO 80489
80528: POP
80529: POP
// if not tmp then
80530: LD_VAR 0 5
80534: NOT
80535: IFFALSE 80539
// exit ;
80537: GO 80587
// if asc then
80539: LD_VAR 0 2
80543: IFFALSE 80567
// result := SortListByListAsc ( units , tmp ) else
80545: LD_ADDR_VAR 0 3
80549: PUSH
80550: LD_VAR 0 1
80554: PPUSH
80555: LD_VAR 0 5
80559: PPUSH
80560: CALL_OW 76
80564: ST_TO_ADDR
80565: GO 80587
// result := SortListByListDesc ( units , tmp ) ;
80567: LD_ADDR_VAR 0 3
80571: PUSH
80572: LD_VAR 0 1
80576: PPUSH
80577: LD_VAR 0 5
80581: PPUSH
80582: CALL_OW 77
80586: ST_TO_ADDR
// end ;
80587: LD_VAR 0 3
80591: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80592: LD_INT 0
80594: PPUSH
80595: PPUSH
// task := GetTaskList ( mech ) ;
80596: LD_ADDR_VAR 0 4
80600: PUSH
80601: LD_VAR 0 1
80605: PPUSH
80606: CALL_OW 437
80610: ST_TO_ADDR
// if not task then
80611: LD_VAR 0 4
80615: NOT
80616: IFFALSE 80620
// exit ;
80618: GO 80662
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80620: LD_ADDR_VAR 0 3
80624: PUSH
80625: LD_VAR 0 4
80629: PUSH
80630: LD_INT 1
80632: ARRAY
80633: PUSH
80634: LD_INT 1
80636: ARRAY
80637: PUSH
80638: LD_STRING r
80640: EQUAL
80641: PUSH
80642: LD_VAR 0 4
80646: PUSH
80647: LD_INT 1
80649: ARRAY
80650: PUSH
80651: LD_INT 4
80653: ARRAY
80654: PUSH
80655: LD_VAR 0 2
80659: EQUAL
80660: AND
80661: ST_TO_ADDR
// end ;
80662: LD_VAR 0 3
80666: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80667: LD_INT 0
80669: PPUSH
// SetDir ( unit , d ) ;
80670: LD_VAR 0 1
80674: PPUSH
80675: LD_VAR 0 4
80679: PPUSH
80680: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80684: LD_VAR 0 1
80688: PPUSH
80689: LD_VAR 0 2
80693: PPUSH
80694: LD_VAR 0 3
80698: PPUSH
80699: LD_VAR 0 5
80703: PPUSH
80704: CALL_OW 48
// end ;
80708: LD_VAR 0 6
80712: RET
// export function ToNaturalNumber ( number ) ; begin
80713: LD_INT 0
80715: PPUSH
// result := number div 1 ;
80716: LD_ADDR_VAR 0 2
80720: PUSH
80721: LD_VAR 0 1
80725: PUSH
80726: LD_INT 1
80728: DIV
80729: ST_TO_ADDR
// if number < 0 then
80730: LD_VAR 0 1
80734: PUSH
80735: LD_INT 0
80737: LESS
80738: IFFALSE 80748
// result := 0 ;
80740: LD_ADDR_VAR 0 2
80744: PUSH
80745: LD_INT 0
80747: ST_TO_ADDR
// end ;
80748: LD_VAR 0 2
80752: RET
// export function SortByClass ( units , class ) ; var un ; begin
80753: LD_INT 0
80755: PPUSH
80756: PPUSH
// if not units or not class then
80757: LD_VAR 0 1
80761: NOT
80762: PUSH
80763: LD_VAR 0 2
80767: NOT
80768: OR
80769: IFFALSE 80773
// exit ;
80771: GO 80868
// result := [ ] ;
80773: LD_ADDR_VAR 0 3
80777: PUSH
80778: EMPTY
80779: ST_TO_ADDR
// for un in units do
80780: LD_ADDR_VAR 0 4
80784: PUSH
80785: LD_VAR 0 1
80789: PUSH
80790: FOR_IN
80791: IFFALSE 80866
// if GetClass ( un ) = class then
80793: LD_VAR 0 4
80797: PPUSH
80798: CALL_OW 257
80802: PUSH
80803: LD_VAR 0 2
80807: EQUAL
80808: IFFALSE 80835
// result := Insert ( result , 1 , un ) else
80810: LD_ADDR_VAR 0 3
80814: PUSH
80815: LD_VAR 0 3
80819: PPUSH
80820: LD_INT 1
80822: PPUSH
80823: LD_VAR 0 4
80827: PPUSH
80828: CALL_OW 2
80832: ST_TO_ADDR
80833: GO 80864
// result := Replace ( result , result + 1 , un ) ;
80835: LD_ADDR_VAR 0 3
80839: PUSH
80840: LD_VAR 0 3
80844: PPUSH
80845: LD_VAR 0 3
80849: PUSH
80850: LD_INT 1
80852: PLUS
80853: PPUSH
80854: LD_VAR 0 4
80858: PPUSH
80859: CALL_OW 1
80863: ST_TO_ADDR
80864: GO 80790
80866: POP
80867: POP
// end ;
80868: LD_VAR 0 3
80872: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80873: LD_INT 0
80875: PPUSH
80876: PPUSH
80877: PPUSH
80878: PPUSH
80879: PPUSH
80880: PPUSH
80881: PPUSH
// result := [ ] ;
80882: LD_ADDR_VAR 0 4
80886: PUSH
80887: EMPTY
80888: ST_TO_ADDR
// if x - r < 0 then
80889: LD_VAR 0 1
80893: PUSH
80894: LD_VAR 0 3
80898: MINUS
80899: PUSH
80900: LD_INT 0
80902: LESS
80903: IFFALSE 80915
// min_x := 0 else
80905: LD_ADDR_VAR 0 8
80909: PUSH
80910: LD_INT 0
80912: ST_TO_ADDR
80913: GO 80931
// min_x := x - r ;
80915: LD_ADDR_VAR 0 8
80919: PUSH
80920: LD_VAR 0 1
80924: PUSH
80925: LD_VAR 0 3
80929: MINUS
80930: ST_TO_ADDR
// if y - r < 0 then
80931: LD_VAR 0 2
80935: PUSH
80936: LD_VAR 0 3
80940: MINUS
80941: PUSH
80942: LD_INT 0
80944: LESS
80945: IFFALSE 80957
// min_y := 0 else
80947: LD_ADDR_VAR 0 7
80951: PUSH
80952: LD_INT 0
80954: ST_TO_ADDR
80955: GO 80973
// min_y := y - r ;
80957: LD_ADDR_VAR 0 7
80961: PUSH
80962: LD_VAR 0 2
80966: PUSH
80967: LD_VAR 0 3
80971: MINUS
80972: ST_TO_ADDR
// max_x := x + r ;
80973: LD_ADDR_VAR 0 9
80977: PUSH
80978: LD_VAR 0 1
80982: PUSH
80983: LD_VAR 0 3
80987: PLUS
80988: ST_TO_ADDR
// max_y := y + r ;
80989: LD_ADDR_VAR 0 10
80993: PUSH
80994: LD_VAR 0 2
80998: PUSH
80999: LD_VAR 0 3
81003: PLUS
81004: ST_TO_ADDR
// for _x = min_x to max_x do
81005: LD_ADDR_VAR 0 5
81009: PUSH
81010: DOUBLE
81011: LD_VAR 0 8
81015: DEC
81016: ST_TO_ADDR
81017: LD_VAR 0 9
81021: PUSH
81022: FOR_TO
81023: IFFALSE 81124
// for _y = min_y to max_y do
81025: LD_ADDR_VAR 0 6
81029: PUSH
81030: DOUBLE
81031: LD_VAR 0 7
81035: DEC
81036: ST_TO_ADDR
81037: LD_VAR 0 10
81041: PUSH
81042: FOR_TO
81043: IFFALSE 81120
// begin if not ValidHex ( _x , _y ) then
81045: LD_VAR 0 5
81049: PPUSH
81050: LD_VAR 0 6
81054: PPUSH
81055: CALL_OW 488
81059: NOT
81060: IFFALSE 81064
// continue ;
81062: GO 81042
// if GetResourceTypeXY ( _x , _y ) then
81064: LD_VAR 0 5
81068: PPUSH
81069: LD_VAR 0 6
81073: PPUSH
81074: CALL_OW 283
81078: IFFALSE 81118
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81080: LD_ADDR_VAR 0 4
81084: PUSH
81085: LD_VAR 0 4
81089: PPUSH
81090: LD_VAR 0 4
81094: PUSH
81095: LD_INT 1
81097: PLUS
81098: PPUSH
81099: LD_VAR 0 5
81103: PUSH
81104: LD_VAR 0 6
81108: PUSH
81109: EMPTY
81110: LIST
81111: LIST
81112: PPUSH
81113: CALL_OW 1
81117: ST_TO_ADDR
// end ;
81118: GO 81042
81120: POP
81121: POP
81122: GO 81022
81124: POP
81125: POP
// end ;
81126: LD_VAR 0 4
81130: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
81131: LD_INT 0
81133: PPUSH
81134: PPUSH
81135: PPUSH
81136: PPUSH
81137: PPUSH
81138: PPUSH
// if not units then
81139: LD_VAR 0 1
81143: NOT
81144: IFFALSE 81148
// exit ;
81146: GO 81549
// result := UnitFilter ( units , [ f_ok ] ) ;
81148: LD_ADDR_VAR 0 3
81152: PUSH
81153: LD_VAR 0 1
81157: PPUSH
81158: LD_INT 50
81160: PUSH
81161: EMPTY
81162: LIST
81163: PPUSH
81164: CALL_OW 72
81168: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81169: LD_ADDR_VAR 0 7
81173: PUSH
81174: LD_VAR 0 1
81178: PUSH
81179: LD_INT 1
81181: ARRAY
81182: PPUSH
81183: CALL_OW 255
81187: ST_TO_ADDR
// if not result then
81188: LD_VAR 0 3
81192: NOT
81193: IFFALSE 81197
// exit ;
81195: GO 81549
// for i in result do
81197: LD_ADDR_VAR 0 4
81201: PUSH
81202: LD_VAR 0 3
81206: PUSH
81207: FOR_IN
81208: IFFALSE 81547
// begin tag := GetTag ( i ) + 1 ;
81210: LD_ADDR_VAR 0 8
81214: PUSH
81215: LD_VAR 0 4
81219: PPUSH
81220: CALL_OW 110
81224: PUSH
81225: LD_INT 1
81227: PLUS
81228: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
81229: LD_ADDR_VAR 0 6
81233: PUSH
81234: LD_VAR 0 4
81238: PPUSH
81239: CALL_OW 250
81243: PPUSH
81244: LD_VAR 0 4
81248: PPUSH
81249: CALL_OW 251
81253: PPUSH
81254: LD_INT 6
81256: PPUSH
81257: CALL 80873 0 3
81261: ST_TO_ADDR
// if cr then
81262: LD_VAR 0 6
81266: IFFALSE 81305
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81268: LD_VAR 0 4
81272: PPUSH
81273: LD_VAR 0 6
81277: PUSH
81278: LD_INT 1
81280: ARRAY
81281: PUSH
81282: LD_INT 1
81284: ARRAY
81285: PPUSH
81286: LD_VAR 0 6
81290: PUSH
81291: LD_INT 1
81293: ARRAY
81294: PUSH
81295: LD_INT 2
81297: ARRAY
81298: PPUSH
81299: CALL_OW 116
81303: GO 81545
// if path > tag then
81305: LD_VAR 0 2
81309: PUSH
81310: LD_VAR 0 8
81314: GREATER
81315: IFFALSE 81493
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
81317: LD_ADDR_VAR 0 5
81321: PUSH
81322: LD_INT 81
81324: PUSH
81325: LD_VAR 0 7
81329: PUSH
81330: EMPTY
81331: LIST
81332: LIST
81333: PUSH
81334: LD_INT 91
81336: PUSH
81337: LD_VAR 0 4
81341: PUSH
81342: LD_INT 12
81344: PUSH
81345: EMPTY
81346: LIST
81347: LIST
81348: LIST
81349: PUSH
81350: EMPTY
81351: LIST
81352: LIST
81353: PPUSH
81354: CALL_OW 69
81358: ST_TO_ADDR
// if enemy then
81359: LD_VAR 0 5
81363: IFFALSE 81391
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81365: LD_VAR 0 4
81369: PPUSH
81370: LD_VAR 0 5
81374: PPUSH
81375: LD_VAR 0 4
81379: PPUSH
81380: CALL_OW 74
81384: PPUSH
81385: CALL_OW 115
81389: GO 81491
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81391: LD_VAR 0 4
81395: PPUSH
81396: LD_VAR 0 2
81400: PUSH
81401: LD_VAR 0 8
81405: ARRAY
81406: PUSH
81407: LD_INT 1
81409: ARRAY
81410: PPUSH
81411: LD_VAR 0 2
81415: PUSH
81416: LD_VAR 0 8
81420: ARRAY
81421: PUSH
81422: LD_INT 2
81424: ARRAY
81425: PPUSH
81426: CALL_OW 297
81430: PUSH
81431: LD_INT 6
81433: GREATER
81434: IFFALSE 81477
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81436: LD_VAR 0 4
81440: PPUSH
81441: LD_VAR 0 2
81445: PUSH
81446: LD_VAR 0 8
81450: ARRAY
81451: PUSH
81452: LD_INT 1
81454: ARRAY
81455: PPUSH
81456: LD_VAR 0 2
81460: PUSH
81461: LD_VAR 0 8
81465: ARRAY
81466: PUSH
81467: LD_INT 2
81469: ARRAY
81470: PPUSH
81471: CALL_OW 114
81475: GO 81491
// SetTag ( i , tag ) ;
81477: LD_VAR 0 4
81481: PPUSH
81482: LD_VAR 0 8
81486: PPUSH
81487: CALL_OW 109
// end else
81491: GO 81545
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81493: LD_ADDR_VAR 0 5
81497: PUSH
81498: LD_INT 81
81500: PUSH
81501: LD_VAR 0 7
81505: PUSH
81506: EMPTY
81507: LIST
81508: LIST
81509: PPUSH
81510: CALL_OW 69
81514: ST_TO_ADDR
// if enemy then
81515: LD_VAR 0 5
81519: IFFALSE 81545
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81521: LD_VAR 0 4
81525: PPUSH
81526: LD_VAR 0 5
81530: PPUSH
81531: LD_VAR 0 4
81535: PPUSH
81536: CALL_OW 74
81540: PPUSH
81541: CALL_OW 115
// end ; end ;
81545: GO 81207
81547: POP
81548: POP
// end ;
81549: LD_VAR 0 3
81553: RET
