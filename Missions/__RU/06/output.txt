// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export vehiclesFrom05 , resourcesFrom05 , fastBreakthrough , stevensStatus , apeTechsStatus ; export techMatPredStatus ; export vehsFrom06 , resourcesFrom06 ; export dial_SibTechsBlocker , dial_VsevolodContactBlocker , dial_TrapDialogBlocker , dial_ConvoyDialogBlocker , dial_NorthBlocker , dial_EndMissionDialogBlocker ; export claimOvsyenkoBase , claimTerminalBase , lostAgainBase ; export immortalVsevolodTeam , savedVsevolod , vsevolodWaitGorky ; export canGoNorth ; export enableVsevolodCounter ; export canSpawnReinforces ; export canEndMission ; export canRemoveUnits ; export timeToAttack ; export cratesSpawned ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 308 0 0
// vehiclesFrom05 = LoadVariable ( 05_Tanks_4 , [ ] ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 05_Tanks_4
  31: PPUSH
  32: EMPTY
  33: PPUSH
  34: CALL_OW 30
  38: ST_TO_ADDR
// resourcesFrom05 = LoadVariable ( 05_ResourcesInCargo_3 , [ ] ) ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: LD_STRING 05_ResourcesInCargo_3
  46: PPUSH
  47: EMPTY
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// fastBreakthrough = LoadVariable ( 05_FastBreakthrough_6 , false ) ;
  54: LD_ADDR_EXP 3
  58: PUSH
  59: LD_STRING 05_FastBreakthrough_6
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// stevensStatus = LoadVariable ( 05_StevensStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 4
  74: PUSH
  75: LD_STRING 05_StevensStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// apeTechsStatus = LoadVariable ( 05_ApeTechsStatus_7 , [ 0 , 0 , 0 ] ) ;
  86: LD_ADDR_EXP 5
  90: PUSH
  91: LD_STRING 05_ApeTechsStatus_7
  93: PPUSH
  94: LD_INT 0
  96: PUSH
  97: LD_INT 0
  99: PUSH
 100: LD_INT 0
 102: PUSH
 103: EMPTY
 104: LIST
 105: LIST
 106: LIST
 107: PPUSH
 108: CALL_OW 30
 112: ST_TO_ADDR
// techMatPredStatus = state_enabled ;
 113: LD_ADDR_EXP 6
 117: PUSH
 118: LD_INT 1
 120: ST_TO_ADDR
// vehsFrom06 = [ ] ;
 121: LD_ADDR_EXP 7
 125: PUSH
 126: EMPTY
 127: ST_TO_ADDR
// resourcesFrom06 = [ ] ;
 128: LD_ADDR_EXP 8
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// dial_SibTechsBlocker = false ;
 135: LD_ADDR_EXP 9
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// dial_VsevolodContactBlocker = false ;
 143: LD_ADDR_EXP 10
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// dial_TrapDialogBlocker = false ;
 151: LD_ADDR_EXP 11
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// dial_ConvoyDialogBlocker = false ;
 159: LD_ADDR_EXP 12
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// dial_NorthBlocker = false ;
 167: LD_ADDR_EXP 13
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// dial_EndMissionDialogBlocker = false ;
 175: LD_ADDR_EXP 14
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// claimOvsyenkoBase = false ;
 183: LD_ADDR_EXP 15
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// claimTerminalBase = false ;
 191: LD_ADDR_EXP 16
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// lostAgainBase = false ;
 199: LD_ADDR_EXP 17
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// immortalVsevolodTeam = true ;
 207: LD_ADDR_EXP 18
 211: PUSH
 212: LD_INT 1
 214: ST_TO_ADDR
// savedVsevolod = false ;
 215: LD_ADDR_EXP 19
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// vsevolodWaitGorky = false ;
 223: LD_ADDR_EXP 20
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// enableVsevolodCounter = false ;
 231: LD_ADDR_EXP 22
 235: PUSH
 236: LD_INT 0
 238: ST_TO_ADDR
// canGoNorth = false ;
 239: LD_ADDR_EXP 21
 243: PUSH
 244: LD_INT 0
 246: ST_TO_ADDR
// canSpawnReinforces = false ;
 247: LD_ADDR_EXP 23
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// canEndMission = false ;
 255: LD_ADDR_EXP 24
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// canRemoveUnits = false ;
 263: LD_ADDR_EXP 25
 267: PUSH
 268: LD_INT 0
 270: ST_TO_ADDR
// timeToAttack = 0 0$00 ;
 271: LD_ADDR_EXP 26
 275: PUSH
 276: LD_INT 0
 278: ST_TO_ADDR
// cratesSpawned = 0 ;
 279: LD_ADDR_EXP 27
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// PrepareRussians ;
 287: CALL 913 0 0
// PrepareAmericans ;
 291: CALL 3344 0 0
// Nef_PrepareNature ;
 295: CALL 4459 0 0
// MissionIntro ;
 299: CALL 16068 0 0
// end ; end_of_file
 303: LD_VAR 0 1
 307: RET
// export function InitMapConfig ; begin
 308: LD_INT 0
 310: PPUSH
// BaseMapConfig ;
 311: CALL 324 0 0
// MissionMapConfig ;
 315: CALL 414 0 0
// end ;
 319: LD_VAR 0 1
 323: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 324: LD_INT 0
 326: PPUSH
// animalsAmount = [ 3 , 3 , 1 , 3 , 0 ] ;
 327: LD_ADDR_EXP 28
 331: PUSH
 332: LD_INT 3
 334: PUSH
 335: LD_INT 3
 337: PUSH
 338: LD_INT 1
 340: PUSH
 341: LD_INT 3
 343: PUSH
 344: LD_INT 0
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 354: LD_ADDR_EXP 29
 358: PUSH
 359: LD_INT 2
 361: PUSH
 362: LD_INT 2
 364: PUSH
 365: LD_INT 2
 367: PUSH
 368: LD_INT 2
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: LIST
 375: LIST
 376: ST_TO_ADDR
// animalsAgression = 3 ;
 377: LD_ADDR_EXP 30
 381: PUSH
 382: LD_INT 3
 384: ST_TO_ADDR
// debugMode = 0 ;
 385: LD_ADDR_EXP 33
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// missionPrefix = 06_ ;
 393: LD_ADDR_EXP 31
 397: PUSH
 398: LD_STRING 06_
 400: ST_TO_ADDR
// previousMissionPrefix = 05_ ;
 401: LD_ADDR_EXP 32
 405: PUSH
 406: LD_STRING 05_
 408: ST_TO_ADDR
// end ;
 409: LD_VAR 0 1
 413: RET
// export enemySkillLevel ; export ovsyenkoStartCrates , terminalStartSiberite ; export trapAmount ; export vsevolodSaveTime ; function MissionMapConfig ; begin
 414: LD_INT 0
 416: PPUSH
// enemySkillLevel = [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 417: LD_ADDR_EXP 34
 421: PUSH
 422: LD_INT 3
 424: PUSH
 425: LD_INT 4
 427: PUSH
 428: LD_INT 5
 430: PUSH
 431: LD_INT 6
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: PUSH
 440: LD_OWVAR 67
 444: ARRAY
 445: ST_TO_ADDR
// ovsyenkoStartCrates = [ 150 , 100 , 50 , 30 ] [ Difficulty ] ;
 446: LD_ADDR_EXP 35
 450: PUSH
 451: LD_INT 150
 453: PUSH
 454: LD_INT 100
 456: PUSH
 457: LD_INT 50
 459: PUSH
 460: LD_INT 30
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_OWVAR 67
 473: ARRAY
 474: ST_TO_ADDR
// terminalStartSiberite = [ 100 , 70 , 50 , 30 ] [ Difficulty ] ;
 475: LD_ADDR_EXP 36
 479: PUSH
 480: LD_INT 100
 482: PUSH
 483: LD_INT 70
 485: PUSH
 486: LD_INT 50
 488: PUSH
 489: LD_INT 30
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: PUSH
 498: LD_OWVAR 67
 502: ARRAY
 503: ST_TO_ADDR
// trapAmount = [ rand ( 4 , 5 ) , rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] ;
 504: LD_ADDR_EXP 37
 508: PUSH
 509: LD_INT 4
 511: PPUSH
 512: LD_INT 5
 514: PPUSH
 515: CALL_OW 12
 519: PUSH
 520: LD_INT 5
 522: PPUSH
 523: LD_INT 6
 525: PPUSH
 526: CALL_OW 12
 530: PUSH
 531: LD_INT 6
 533: PPUSH
 534: LD_INT 7
 536: PPUSH
 537: CALL_OW 12
 541: PUSH
 542: LD_INT 7
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: PUSH
 551: LD_OWVAR 67
 555: ARRAY
 556: ST_TO_ADDR
// vsevolodSaveTime = [ 12 12$0 , 11 11$0 , 10 10$0 , 10 10$0 ] [ Difficulty ] ;
 557: LD_ADDR_EXP 38
 561: PUSH
 562: LD_INT 25200
 564: PUSH
 565: LD_INT 23100
 567: PUSH
 568: LD_INT 21000
 570: PUSH
 571: LD_INT 21000
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: LD_OWVAR 67
 584: ARRAY
 585: ST_TO_ADDR
// end ;
 586: LD_VAR 0 1
 590: RET
// every 0 0$1 trigger debugMode do var i ;
 591: LD_EXP 33
 595: IFFALSE 910
 597: GO 599
 599: DISABLE
 600: LD_INT 0
 602: PPUSH
// begin enable ;
 603: ENABLE
// FogOff ( your_side ) ;
 604: LD_OWVAR 2
 608: PPUSH
 609: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 613: LD_ADDR_VAR 0 1
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_OWVAR 2
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: LD_INT 2
 632: PUSH
 633: LD_INT 21
 635: PUSH
 636: LD_INT 1
 638: PUSH
 639: EMPTY
 640: LIST
 641: LIST
 642: PUSH
 643: LD_INT 21
 645: PUSH
 646: LD_INT 2
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: LIST
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PPUSH
 662: CALL_OW 69
 666: PUSH
 667: FOR_IN
 668: IFFALSE 684
// SetLives ( i , 1000 ) ;
 670: LD_VAR 0 1
 674: PPUSH
 675: LD_INT 1000
 677: PPUSH
 678: CALL_OW 234
 682: GO 667
 684: POP
 685: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 686: LD_ADDR_VAR 0 1
 690: PUSH
 691: LD_INT 22
 693: PUSH
 694: LD_OWVAR 2
 698: PUSH
 699: EMPTY
 700: LIST
 701: LIST
 702: PUSH
 703: LD_INT 21
 705: PUSH
 706: LD_INT 1
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: PPUSH
 717: CALL_OW 69
 721: PUSH
 722: FOR_IN
 723: IFFALSE 787
// begin SetSkill ( i , skill_combat , 10 ) ;
 725: LD_VAR 0 1
 729: PPUSH
 730: LD_INT 1
 732: PPUSH
 733: LD_INT 10
 735: PPUSH
 736: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 740: LD_VAR 0 1
 744: PPUSH
 745: LD_INT 2
 747: PPUSH
 748: LD_INT 10
 750: PPUSH
 751: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 755: LD_VAR 0 1
 759: PPUSH
 760: LD_INT 3
 762: PPUSH
 763: LD_INT 10
 765: PPUSH
 766: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 770: LD_VAR 0 1
 774: PPUSH
 775: LD_INT 4
 777: PPUSH
 778: LD_INT 10
 780: PPUSH
 781: CALL_OW 237
// end ;
 785: GO 722
 787: POP
 788: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 789: LD_ADDR_VAR 0 1
 793: PUSH
 794: LD_INT 22
 796: PUSH
 797: LD_OWVAR 2
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: PUSH
 806: LD_INT 2
 808: PUSH
 809: LD_INT 30
 811: PUSH
 812: LD_INT 0
 814: PUSH
 815: EMPTY
 816: LIST
 817: LIST
 818: PUSH
 819: LD_INT 30
 821: PUSH
 822: LD_INT 1
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: LIST
 833: PUSH
 834: EMPTY
 835: LIST
 836: LIST
 837: PPUSH
 838: CALL_OW 69
 842: PUSH
 843: FOR_IN
 844: IFFALSE 908
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 846: LD_VAR 0 1
 850: PPUSH
 851: CALL_OW 274
 855: PPUSH
 856: LD_INT 1
 858: PPUSH
 859: LD_INT 9999
 861: PPUSH
 862: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 866: LD_VAR 0 1
 870: PPUSH
 871: CALL_OW 274
 875: PPUSH
 876: LD_INT 2
 878: PPUSH
 879: LD_INT 9999
 881: PPUSH
 882: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 886: LD_VAR 0 1
 890: PPUSH
 891: CALL_OW 274
 895: PPUSH
 896: LD_INT 3
 898: PPUSH
 899: LD_INT 9999
 901: PPUSH
 902: CALL_OW 277
// end ;
 906: GO 843
 908: POP
 909: POP
// end ; end_of_file
 910: PPOPN 1
 912: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Platonov , Kirilenkova , Belkov , Belkov2 ; export Vsevolod , vsevolodTeam , Petr , Igor , Boris ; export ConvoyBoris , ConvoyIbrahim ; export function PrepareRussians ; begin
 913: LD_INT 0
 915: PPUSH
// PrepareHeroes ;
 916: CALL 925 0 0
// end ;
 920: LD_VAR 0 1
 924: RET
// function PrepareHeroes ; var i , j , car , tmp , cargoList , bigCargoList , point , areaPoints , nearPosition , burlakPosition , distance , index ; begin
 925: LD_INT 0
 927: PPUSH
 928: PPUSH
 929: PPUSH
 930: PPUSH
 931: PPUSH
 932: PPUSH
 933: PPUSH
 934: PPUSH
 935: PPUSH
 936: PPUSH
 937: PPUSH
 938: PPUSH
 939: PPUSH
// point = [ 170 , 208 ] ;
 940: LD_ADDR_VAR 0 8
 944: PUSH
 945: LD_INT 170
 947: PUSH
 948: LD_INT 208
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: ST_TO_ADDR
// areaPoints = AreaToList ( RussianSpawnArea1 , 0 ) ;
 955: LD_ADDR_VAR 0 9
 959: PUSH
 960: LD_INT 1
 962: PPUSH
 963: LD_INT 0
 965: PPUSH
 966: CALL_OW 517
 970: ST_TO_ADDR
// uc_side = 3 ;
 971: LD_ADDR_OWVAR 20
 975: PUSH
 976: LD_INT 3
 978: ST_TO_ADDR
// uc_nation = 3 ;
 979: LD_ADDR_OWVAR 21
 983: PUSH
 984: LD_INT 3
 986: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , 0 ) ;
 987: LD_ADDR_EXP 39
 991: PUSH
 992: LD_STRING Burlak
 994: PPUSH
 995: LD_INT 1
 997: PPUSH
 998: LD_INT 0
1000: PPUSH
1001: CALL 11785 0 3
1005: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , true , 0 ) ;
1006: LD_ADDR_EXP 44
1010: PUSH
1011: LD_STRING Titov
1013: PPUSH
1014: LD_INT 1
1016: PPUSH
1017: LD_INT 0
1019: PPUSH
1020: CALL 11785 0 3
1024: ST_TO_ADDR
// Dolgov := PrepareUnitExt ( Dolgov , true , 0 ) ;
1025: LD_ADDR_EXP 45
1029: PUSH
1030: LD_STRING Dolgov
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_INT 0
1038: PPUSH
1039: CALL 11785 0 3
1043: ST_TO_ADDR
// Lipshchin := PrepareUnitExt ( Lipshchin , true , 0 ) ;
1044: LD_ADDR_EXP 46
1048: PUSH
1049: LD_STRING Lipshchin
1051: PPUSH
1052: LD_INT 1
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL 11785 0 3
1062: ST_TO_ADDR
// Karamazov := PrepareUnitExt ( Karamazov , true , class_engineer ) ;
1063: LD_ADDR_EXP 40
1067: PUSH
1068: LD_STRING Karamazov
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: LD_INT 2
1076: PPUSH
1077: CALL 11785 0 3
1081: ST_TO_ADDR
// Petrovova := PrepareUnitExt ( Petrovova , true , 0 ) ;
1082: LD_ADDR_EXP 41
1086: PUSH
1087: LD_STRING Petrovova
1089: PPUSH
1090: LD_INT 1
1092: PPUSH
1093: LD_INT 0
1095: PPUSH
1096: CALL 11785 0 3
1100: ST_TO_ADDR
// Gleb := PrepareUnitExt ( Gleb , true , 0 ) ;
1101: LD_ADDR_EXP 42
1105: PUSH
1106: LD_STRING Gleb
1108: PPUSH
1109: LD_INT 1
1111: PPUSH
1112: LD_INT 0
1114: PPUSH
1115: CALL 11785 0 3
1119: ST_TO_ADDR
// Petrosyan := PrepareUnitExt ( Petrosyan , true , 0 ) ;
1120: LD_ADDR_EXP 43
1124: PUSH
1125: LD_STRING Petrosyan
1127: PPUSH
1128: LD_INT 1
1130: PPUSH
1131: LD_INT 0
1133: PPUSH
1134: CALL 11785 0 3
1138: ST_TO_ADDR
// Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
1139: LD_ADDR_EXP 47
1143: PUSH
1144: LD_STRING Platonov
1146: PPUSH
1147: LD_INT 0
1149: PPUSH
1150: LD_INT 0
1152: PPUSH
1153: CALL 11785 0 3
1157: ST_TO_ADDR
// if TestCharacters ( 04_Kirilenkova ) then
1158: LD_STRING 04_Kirilenkova
1160: PPUSH
1161: CALL_OW 28
1165: IFFALSE 1192
// begin Kirilenkova := CreateCharacter ( 04_Kirilenkova ) ;
1167: LD_ADDR_EXP 48
1171: PUSH
1172: LD_STRING 04_Kirilenkova
1174: PPUSH
1175: CALL_OW 34
1179: ST_TO_ADDR
// SetClass ( Kirilenkova , class_scientistic ) ;
1180: LD_EXP 48
1184: PPUSH
1185: LD_INT 4
1187: PPUSH
1188: CALL_OW 336
// end ; if TestCharacters ( 04_Belkov ) then
1192: LD_STRING 04_Belkov
1194: PPUSH
1195: CALL_OW 28
1199: IFFALSE 1226
// begin Belkov := CreateCharacter ( 04_Belkov ) ;
1201: LD_ADDR_EXP 49
1205: PUSH
1206: LD_STRING 04_Belkov
1208: PPUSH
1209: CALL_OW 34
1213: ST_TO_ADDR
// SetClass ( Belkov , class_soldier ) ;
1214: LD_EXP 49
1218: PPUSH
1219: LD_INT 1
1221: PPUSH
1222: CALL_OW 336
// end ; if TestCharacters ( 04_Belkov2 ) then
1226: LD_STRING 04_Belkov2
1228: PPUSH
1229: CALL_OW 28
1233: IFFALSE 1260
// begin Belkov2 := CreateCharacter ( 04_Belkov2 ) ;
1235: LD_ADDR_EXP 50
1239: PUSH
1240: LD_STRING 04_Belkov2
1242: PPUSH
1243: CALL_OW 34
1247: ST_TO_ADDR
// SetClass ( Belkov2 , class_soldier ) ;
1248: LD_EXP 50
1252: PPUSH
1253: LD_INT 1
1255: PPUSH
1256: CALL_OW 336
// end ; for i := 1 to vehiclesFrom05 do
1260: LD_ADDR_VAR 0 2
1264: PUSH
1265: DOUBLE
1266: LD_INT 1
1268: DEC
1269: ST_TO_ADDR
1270: LD_EXP 1
1274: PUSH
1275: FOR_TO
1276: IFFALSE 1938
// begin uc_nation = vehiclesFrom05 [ i ] [ 1 ] ;
1278: LD_ADDR_OWVAR 21
1282: PUSH
1283: LD_EXP 1
1287: PUSH
1288: LD_VAR 0 2
1292: ARRAY
1293: PUSH
1294: LD_INT 1
1296: ARRAY
1297: ST_TO_ADDR
// vc_chassis := vehiclesFrom05 [ i ] [ 2 ] ;
1298: LD_ADDR_OWVAR 37
1302: PUSH
1303: LD_EXP 1
1307: PUSH
1308: LD_VAR 0 2
1312: ARRAY
1313: PUSH
1314: LD_INT 2
1316: ARRAY
1317: ST_TO_ADDR
// vc_engine = vehiclesFrom05 [ i ] [ 3 ] ;
1318: LD_ADDR_OWVAR 39
1322: PUSH
1323: LD_EXP 1
1327: PUSH
1328: LD_VAR 0 2
1332: ARRAY
1333: PUSH
1334: LD_INT 3
1336: ARRAY
1337: ST_TO_ADDR
// vc_control = vehiclesFrom05 [ i ] [ 4 ] ;
1338: LD_ADDR_OWVAR 38
1342: PUSH
1343: LD_EXP 1
1347: PUSH
1348: LD_VAR 0 2
1352: ARRAY
1353: PUSH
1354: LD_INT 4
1356: ARRAY
1357: ST_TO_ADDR
// vc_weapon := vehiclesFrom05 [ i ] [ 5 ] ;
1358: LD_ADDR_OWVAR 40
1362: PUSH
1363: LD_EXP 1
1367: PUSH
1368: LD_VAR 0 2
1372: ARRAY
1373: PUSH
1374: LD_INT 5
1376: ARRAY
1377: ST_TO_ADDR
// uc_direction := 0 ;
1378: LD_ADDR_OWVAR 24
1382: PUSH
1383: LD_INT 0
1385: ST_TO_ADDR
// vc_fuel_battery := Rand ( 10 , 15 ) ;
1386: LD_ADDR_OWVAR 41
1390: PUSH
1391: LD_INT 10
1393: PPUSH
1394: LD_INT 15
1396: PPUSH
1397: CALL_OW 12
1401: ST_TO_ADDR
// car := CreateVehicle ;
1402: LD_ADDR_VAR 0 4
1406: PUSH
1407: CALL_OW 45
1411: ST_TO_ADDR
// distance = 999 ;
1412: LD_ADDR_VAR 0 12
1416: PUSH
1417: LD_INT 999
1419: ST_TO_ADDR
// index = 1 ;
1420: LD_ADDR_VAR 0 13
1424: PUSH
1425: LD_INT 1
1427: ST_TO_ADDR
// for j := 1 to areaPoints [ 1 ] do
1428: LD_ADDR_VAR 0 3
1432: PUSH
1433: DOUBLE
1434: LD_INT 1
1436: DEC
1437: ST_TO_ADDR
1438: LD_VAR 0 9
1442: PUSH
1443: LD_INT 1
1445: ARRAY
1446: PUSH
1447: FOR_TO
1448: IFFALSE 1619
// begin if GetDistXY ( point [ 1 ] , point [ 2 ] , areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ) < distance then
1450: LD_VAR 0 8
1454: PUSH
1455: LD_INT 1
1457: ARRAY
1458: PPUSH
1459: LD_VAR 0 8
1463: PUSH
1464: LD_INT 2
1466: ARRAY
1467: PPUSH
1468: LD_VAR 0 9
1472: PUSH
1473: LD_INT 1
1475: ARRAY
1476: PUSH
1477: LD_VAR 0 3
1481: ARRAY
1482: PPUSH
1483: LD_VAR 0 9
1487: PUSH
1488: LD_INT 2
1490: ARRAY
1491: PUSH
1492: LD_VAR 0 3
1496: ARRAY
1497: PPUSH
1498: CALL_OW 298
1502: PUSH
1503: LD_VAR 0 12
1507: LESS
1508: IFFALSE 1617
// begin distance = GetDistXY ( point [ 1 ] , point [ 2 ] , areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ) ;
1510: LD_ADDR_VAR 0 12
1514: PUSH
1515: LD_VAR 0 8
1519: PUSH
1520: LD_INT 1
1522: ARRAY
1523: PPUSH
1524: LD_VAR 0 8
1528: PUSH
1529: LD_INT 2
1531: ARRAY
1532: PPUSH
1533: LD_VAR 0 9
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PUSH
1542: LD_VAR 0 3
1546: ARRAY
1547: PPUSH
1548: LD_VAR 0 9
1552: PUSH
1553: LD_INT 2
1555: ARRAY
1556: PUSH
1557: LD_VAR 0 3
1561: ARRAY
1562: PPUSH
1563: CALL_OW 298
1567: ST_TO_ADDR
// nearPosition = [ areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ] ;
1568: LD_ADDR_VAR 0 10
1572: PUSH
1573: LD_VAR 0 9
1577: PUSH
1578: LD_INT 1
1580: ARRAY
1581: PUSH
1582: LD_VAR 0 3
1586: ARRAY
1587: PUSH
1588: LD_VAR 0 9
1592: PUSH
1593: LD_INT 2
1595: ARRAY
1596: PUSH
1597: LD_VAR 0 3
1601: ARRAY
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: ST_TO_ADDR
// index = j ;
1607: LD_ADDR_VAR 0 13
1611: PUSH
1612: LD_VAR 0 3
1616: ST_TO_ADDR
// end ; end ;
1617: GO 1447
1619: POP
1620: POP
// if not burlakPosition then
1621: LD_VAR 0 11
1625: NOT
1626: IFFALSE 1638
// burlakPosition = nearPosition ;
1628: LD_ADDR_VAR 0 11
1632: PUSH
1633: LD_VAR 0 10
1637: ST_TO_ADDR
// if areaPoints then
1638: LD_VAR 0 9
1642: IFFALSE 1690
// begin areaPoints = Delete2D ( areaPoints , 1 , index ) ;
1644: LD_ADDR_VAR 0 9
1648: PUSH
1649: LD_VAR 0 9
1653: PPUSH
1654: LD_INT 1
1656: PPUSH
1657: LD_VAR 0 13
1661: PPUSH
1662: CALL 12614 0 3
1666: ST_TO_ADDR
// areaPoints = Delete2D ( areaPoints , 2 , index ) ;
1667: LD_ADDR_VAR 0 9
1671: PUSH
1672: LD_VAR 0 9
1676: PPUSH
1677: LD_INT 2
1679: PPUSH
1680: LD_VAR 0 13
1684: PPUSH
1685: CALL 12614 0 3
1689: ST_TO_ADDR
// end ; PlaceUnitXY ( car , nearPosition [ 1 ] , nearPosition [ 2 ] , false ) ;
1690: LD_VAR 0 4
1694: PPUSH
1695: LD_VAR 0 10
1699: PUSH
1700: LD_INT 1
1702: ARRAY
1703: PPUSH
1704: LD_VAR 0 10
1708: PUSH
1709: LD_INT 2
1711: ARRAY
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 48
// case vehiclesFrom05 [ i ] [ 6 ] of Bur :
1720: LD_EXP 1
1724: PUSH
1725: LD_VAR 0 2
1729: ARRAY
1730: PUSH
1731: LD_INT 6
1733: ARRAY
1734: PUSH
1735: LD_STRING Bur
1737: DOUBLE
1738: EQUAL
1739: IFTRUE 1743
1741: GO 1760
1743: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
1744: LD_EXP 39
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL_OW 52
1758: GO 1936
1760: LD_STRING Kar
1762: DOUBLE
1763: EQUAL
1764: IFTRUE 1768
1766: GO 1785
1768: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
1769: LD_EXP 40
1773: PPUSH
1774: LD_VAR 0 4
1778: PPUSH
1779: CALL_OW 52
1783: GO 1936
1785: LD_STRING Ptr
1787: DOUBLE
1788: EQUAL
1789: IFTRUE 1793
1791: GO 1810
1793: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
1794: LD_EXP 41
1798: PPUSH
1799: LD_VAR 0 4
1803: PPUSH
1804: CALL_OW 52
1808: GO 1936
1810: LD_STRING Glb
1812: DOUBLE
1813: EQUAL
1814: IFTRUE 1818
1816: GO 1835
1818: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
1819: LD_EXP 42
1823: PPUSH
1824: LD_VAR 0 4
1828: PPUSH
1829: CALL_OW 52
1833: GO 1936
1835: LD_STRING Pet
1837: DOUBLE
1838: EQUAL
1839: IFTRUE 1843
1841: GO 1860
1843: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
1844: LD_EXP 43
1848: PPUSH
1849: LD_VAR 0 4
1853: PPUSH
1854: CALL_OW 52
1858: GO 1936
1860: LD_STRING Dol
1862: DOUBLE
1863: EQUAL
1864: IFTRUE 1868
1866: GO 1885
1868: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
1869: LD_EXP 45
1873: PPUSH
1874: LD_VAR 0 4
1878: PPUSH
1879: CALL_OW 52
1883: GO 1936
1885: LD_STRING Lip
1887: DOUBLE
1888: EQUAL
1889: IFTRUE 1893
1891: GO 1910
1893: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
1894: LD_EXP 46
1898: PPUSH
1899: LD_VAR 0 4
1903: PPUSH
1904: CALL_OW 52
1908: GO 1936
1910: LD_STRING Tit
1912: DOUBLE
1913: EQUAL
1914: IFTRUE 1918
1916: GO 1935
1918: POP
// PlaceHumanInUnit ( Titov , car ) ; end ;
1919: LD_EXP 44
1923: PPUSH
1924: LD_VAR 0 4
1928: PPUSH
1929: CALL_OW 52
1933: GO 1936
1935: POP
// end ;
1936: GO 1275
1938: POP
1939: POP
// cargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
1940: LD_ADDR_VAR 0 6
1944: PUSH
1945: LD_INT 22
1947: PUSH
1948: LD_INT 3
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: PUSH
1955: LD_INT 21
1957: PUSH
1958: LD_INT 2
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: LD_INT 34
1970: PUSH
1971: LD_INT 51
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 34
1980: PUSH
1981: LD_INT 32
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: PUSH
1988: LD_INT 34
1990: PUSH
1991: LD_INT 12
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: LIST
2008: PPUSH
2009: CALL_OW 69
2013: ST_TO_ADDR
// bigCargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 89 ] ] ) ;
2014: LD_ADDR_VAR 0 7
2018: PUSH
2019: LD_INT 22
2021: PUSH
2022: LD_INT 3
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PUSH
2029: LD_INT 21
2031: PUSH
2032: LD_INT 2
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: PUSH
2039: LD_INT 34
2041: PUSH
2042: LD_INT 89
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: PPUSH
2054: CALL_OW 69
2058: ST_TO_ADDR
// if cargoList then
2059: LD_VAR 0 6
2063: IFFALSE 2253
// for i = 1 to cargoList do
2065: LD_ADDR_VAR 0 2
2069: PUSH
2070: DOUBLE
2071: LD_INT 1
2073: DEC
2074: ST_TO_ADDR
2075: LD_VAR 0 6
2079: PUSH
2080: FOR_TO
2081: IFFALSE 2251
// if resourcesFrom05 then
2083: LD_EXP 2
2087: IFFALSE 2249
// begin if not resourcesFrom05 [ i ] [ 1 ] > 100 or resourcesFrom05 [ i ] [ 2 ] > 100 or resourcesFrom05 [ i ] [ 3 ] > 100 then
2089: LD_EXP 2
2093: PUSH
2094: LD_VAR 0 2
2098: ARRAY
2099: PUSH
2100: LD_INT 1
2102: ARRAY
2103: PUSH
2104: LD_INT 100
2106: GREATER
2107: NOT
2108: PUSH
2109: LD_EXP 2
2113: PUSH
2114: LD_VAR 0 2
2118: ARRAY
2119: PUSH
2120: LD_INT 2
2122: ARRAY
2123: PUSH
2124: LD_INT 100
2126: GREATER
2127: OR
2128: PUSH
2129: LD_EXP 2
2133: PUSH
2134: LD_VAR 0 2
2138: ARRAY
2139: PUSH
2140: LD_INT 3
2142: ARRAY
2143: PUSH
2144: LD_INT 100
2146: GREATER
2147: OR
2148: IFFALSE 2249
// begin AddCargo ( cargoList [ i ] , 1 , resourcesFrom05 [ i ] [ 1 ] ) ;
2150: LD_VAR 0 6
2154: PUSH
2155: LD_VAR 0 2
2159: ARRAY
2160: PPUSH
2161: LD_INT 1
2163: PPUSH
2164: LD_EXP 2
2168: PUSH
2169: LD_VAR 0 2
2173: ARRAY
2174: PUSH
2175: LD_INT 1
2177: ARRAY
2178: PPUSH
2179: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resourcesFrom05 [ i ] [ 2 ] ) ;
2183: LD_VAR 0 6
2187: PUSH
2188: LD_VAR 0 2
2192: ARRAY
2193: PPUSH
2194: LD_INT 2
2196: PPUSH
2197: LD_EXP 2
2201: PUSH
2202: LD_VAR 0 2
2206: ARRAY
2207: PUSH
2208: LD_INT 2
2210: ARRAY
2211: PPUSH
2212: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resourcesFrom05 [ i ] [ 3 ] ) ;
2216: LD_VAR 0 6
2220: PUSH
2221: LD_VAR 0 2
2225: ARRAY
2226: PPUSH
2227: LD_INT 3
2229: PPUSH
2230: LD_EXP 2
2234: PUSH
2235: LD_VAR 0 2
2239: ARRAY
2240: PUSH
2241: LD_INT 3
2243: ARRAY
2244: PPUSH
2245: CALL_OW 291
// end ; end ;
2249: GO 2080
2251: POP
2252: POP
// if bigCargoList then
2253: LD_VAR 0 7
2257: IFFALSE 2446
// for i = 1 to bigCargoList do
2259: LD_ADDR_VAR 0 2
2263: PUSH
2264: DOUBLE
2265: LD_INT 1
2267: DEC
2268: ST_TO_ADDR
2269: LD_VAR 0 7
2273: PUSH
2274: FOR_TO
2275: IFFALSE 2444
// if resourcesFrom05 then
2277: LD_EXP 2
2281: IFFALSE 2442
// begin if resourcesFrom05 [ i ] [ 1 ] > 100 or resourcesFrom05 [ i ] [ 2 ] > 100 or resourcesFrom05 [ i ] [ 3 ] > 100 then
2283: LD_EXP 2
2287: PUSH
2288: LD_VAR 0 2
2292: ARRAY
2293: PUSH
2294: LD_INT 1
2296: ARRAY
2297: PUSH
2298: LD_INT 100
2300: GREATER
2301: PUSH
2302: LD_EXP 2
2306: PUSH
2307: LD_VAR 0 2
2311: ARRAY
2312: PUSH
2313: LD_INT 2
2315: ARRAY
2316: PUSH
2317: LD_INT 100
2319: GREATER
2320: OR
2321: PUSH
2322: LD_EXP 2
2326: PUSH
2327: LD_VAR 0 2
2331: ARRAY
2332: PUSH
2333: LD_INT 3
2335: ARRAY
2336: PUSH
2337: LD_INT 100
2339: GREATER
2340: OR
2341: IFFALSE 2442
// begin AddCargo ( bigCargoList [ i ] , 1 , resourcesFrom05 [ i ] [ 1 ] ) ;
2343: LD_VAR 0 7
2347: PUSH
2348: LD_VAR 0 2
2352: ARRAY
2353: PPUSH
2354: LD_INT 1
2356: PPUSH
2357: LD_EXP 2
2361: PUSH
2362: LD_VAR 0 2
2366: ARRAY
2367: PUSH
2368: LD_INT 1
2370: ARRAY
2371: PPUSH
2372: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 2 , resourcesFrom05 [ i ] [ 2 ] ) ;
2376: LD_VAR 0 7
2380: PUSH
2381: LD_VAR 0 2
2385: ARRAY
2386: PPUSH
2387: LD_INT 2
2389: PPUSH
2390: LD_EXP 2
2394: PUSH
2395: LD_VAR 0 2
2399: ARRAY
2400: PUSH
2401: LD_INT 2
2403: ARRAY
2404: PPUSH
2405: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 3 , resourcesFrom05 [ i ] [ 3 ] ) ;
2409: LD_VAR 0 7
2413: PUSH
2414: LD_VAR 0 2
2418: ARRAY
2419: PPUSH
2420: LD_INT 3
2422: PPUSH
2423: LD_EXP 2
2427: PUSH
2428: LD_VAR 0 2
2432: ARRAY
2433: PUSH
2434: LD_INT 3
2436: ARRAY
2437: PPUSH
2438: CALL_OW 291
// end ; end ;
2442: GO 2274
2444: POP
2445: POP
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_class , class_engineer ] ] ) then
2446: LD_INT 22
2448: PUSH
2449: LD_INT 3
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PUSH
2456: LD_INT 21
2458: PUSH
2459: LD_INT 1
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PUSH
2466: LD_INT 23
2468: PUSH
2469: LD_INT 3
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: PUSH
2476: LD_INT 25
2478: PUSH
2479: LD_INT 2
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: EMPTY
2487: LIST
2488: LIST
2489: LIST
2490: LIST
2491: PPUSH
2492: CALL_OW 69
2496: NOT
2497: IFFALSE 2602
// begin if IsOk ( Lipshchin ) then
2499: LD_EXP 46
2503: PPUSH
2504: CALL_OW 302
2508: IFFALSE 2524
// SetClass ( Lipshchin , class_engineer ) else
2510: LD_EXP 46
2514: PPUSH
2515: LD_INT 2
2517: PPUSH
2518: CALL_OW 336
2522: GO 2602
// begin tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ;
2524: LD_ADDR_VAR 0 5
2528: PUSH
2529: LD_INT 22
2531: PUSH
2532: LD_INT 3
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: PUSH
2539: LD_INT 21
2541: PUSH
2542: LD_INT 1
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: PUSH
2549: LD_INT 23
2551: PUSH
2552: LD_INT 3
2554: PUSH
2555: EMPTY
2556: LIST
2557: LIST
2558: PUSH
2559: LD_INT 50
2561: PUSH
2562: EMPTY
2563: LIST
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: PPUSH
2571: CALL_OW 69
2575: ST_TO_ADDR
// SetClass ( tmp [ rand ( 0 , tmp ) ] , class_engineer ) ;
2576: LD_VAR 0 5
2580: PUSH
2581: LD_INT 0
2583: PPUSH
2584: LD_VAR 0 5
2588: PPUSH
2589: CALL_OW 12
2593: ARRAY
2594: PPUSH
2595: LD_INT 2
2597: PPUSH
2598: CALL_OW 336
// end ; end ; SetTech ( tech_ApeLang , 3 , apeTechsStatus [ 1 ] ) ;
2602: LD_INT 1
2604: PPUSH
2605: LD_INT 3
2607: PPUSH
2608: LD_EXP 5
2612: PUSH
2613: LD_INT 1
2615: ARRAY
2616: PPUSH
2617: CALL_OW 322
// SetTech ( tech_ApePsych , 3 , apeTechsStatus [ 2 ] ) ;
2621: LD_INT 2
2623: PPUSH
2624: LD_INT 3
2626: PPUSH
2627: LD_EXP 5
2631: PUSH
2632: LD_INT 2
2634: ARRAY
2635: PPUSH
2636: CALL_OW 322
// SetTech ( tech_ApeAgres , 3 , apeTechsStatus [ 3 ] ) ;
2640: LD_INT 11
2642: PPUSH
2643: LD_INT 3
2645: PPUSH
2646: LD_EXP 5
2650: PUSH
2651: LD_INT 3
2653: ARRAY
2654: PPUSH
2655: CALL_OW 322
// end ;
2659: LD_VAR 0 1
2663: RET
// export function PrepareVsevolod ; var i , un ; begin
2664: LD_INT 0
2666: PPUSH
2667: PPUSH
2668: PPUSH
// uc_side = 6 ;
2669: LD_ADDR_OWVAR 20
2673: PUSH
2674: LD_INT 6
2676: ST_TO_ADDR
// uc_nation = 3 ;
2677: LD_ADDR_OWVAR 21
2681: PUSH
2682: LD_INT 3
2684: ST_TO_ADDR
// vsevolodTeam = [ ] ;
2685: LD_ADDR_EXP 52
2689: PUSH
2690: EMPTY
2691: ST_TO_ADDR
// Vsevolod := PrepareUnitExt ( Vsevolod , false , class_soldier ) ;
2692: LD_ADDR_EXP 51
2696: PUSH
2697: LD_STRING Vsevolod
2699: PPUSH
2700: LD_INT 0
2702: PPUSH
2703: LD_INT 1
2705: PPUSH
2706: CALL 11785 0 3
2710: ST_TO_ADDR
// PlaceUnitArea ( Vsevolod , VsevolodSpawnArea , false ) ;
2711: LD_EXP 51
2715: PPUSH
2716: LD_INT 7
2718: PPUSH
2719: LD_INT 0
2721: PPUSH
2722: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Vsevolod ;
2726: LD_ADDR_EXP 52
2730: PUSH
2731: LD_EXP 52
2735: PUSH
2736: LD_EXP 51
2740: ADD
2741: ST_TO_ADDR
// Petr = PrepareUnitExt ( SPetr , false , class_engineer ) ;
2742: LD_ADDR_EXP 53
2746: PUSH
2747: LD_STRING SPetr
2749: PPUSH
2750: LD_INT 0
2752: PPUSH
2753: LD_INT 2
2755: PPUSH
2756: CALL 11785 0 3
2760: ST_TO_ADDR
// PlaceUnitArea ( Petr , VsevolodSpawnArea , false ) ;
2761: LD_EXP 53
2765: PPUSH
2766: LD_INT 7
2768: PPUSH
2769: LD_INT 0
2771: PPUSH
2772: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Petr ;
2776: LD_ADDR_EXP 52
2780: PUSH
2781: LD_EXP 52
2785: PUSH
2786: LD_EXP 53
2790: ADD
2791: ST_TO_ADDR
// Igor = PrepareUnitExt ( SIgor , false , class_soldier ) ;
2792: LD_ADDR_EXP 54
2796: PUSH
2797: LD_STRING SIgor
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: LD_INT 1
2805: PPUSH
2806: CALL 11785 0 3
2810: ST_TO_ADDR
// PlaceUnitArea ( Igor , VsevolodSpawnArea , false ) ;
2811: LD_EXP 54
2815: PPUSH
2816: LD_INT 7
2818: PPUSH
2819: LD_INT 0
2821: PPUSH
2822: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Igor ;
2826: LD_ADDR_EXP 52
2830: PUSH
2831: LD_EXP 52
2835: PUSH
2836: LD_EXP 54
2840: ADD
2841: ST_TO_ADDR
// Boris = PrepareUnitExt ( SBoris , false , class_soldier ) ;
2842: LD_ADDR_EXP 55
2846: PUSH
2847: LD_STRING SBoris
2849: PPUSH
2850: LD_INT 0
2852: PPUSH
2853: LD_INT 1
2855: PPUSH
2856: CALL 11785 0 3
2860: ST_TO_ADDR
// PlaceUnitArea ( Boris , VsevolodSpawnArea , false ) ;
2861: LD_EXP 55
2865: PPUSH
2866: LD_INT 7
2868: PPUSH
2869: LD_INT 0
2871: PPUSH
2872: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Boris ;
2876: LD_ADDR_EXP 52
2880: PUSH
2881: LD_EXP 52
2885: PUSH
2886: LD_EXP 55
2890: ADD
2891: ST_TO_ADDR
// end ;
2892: LD_VAR 0 1
2896: RET
// export function SpawnPlatonovReinforces ; var i , un , veh ; begin
2897: LD_INT 0
2899: PPUSH
2900: PPUSH
2901: PPUSH
2902: PPUSH
// uc_side = 3 ;
2903: LD_ADDR_OWVAR 20
2907: PUSH
2908: LD_INT 3
2910: ST_TO_ADDR
// uc_nation = 3 ;
2911: LD_ADDR_OWVAR 21
2915: PUSH
2916: LD_INT 3
2918: ST_TO_ADDR
// PrepareSoldier ( false , 4 ) ;
2919: LD_INT 0
2921: PPUSH
2922: LD_INT 4
2924: PPUSH
2925: CALL_OW 381
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] , rand ( 50 , 60 ) ) ;
2929: LD_INT 22
2931: PPUSH
2932: LD_INT 1
2934: PPUSH
2935: LD_INT 1
2937: PPUSH
2938: LD_INT 43
2940: PUSH
2941: LD_INT 44
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PUSH
2948: LD_INT 1
2950: PPUSH
2951: LD_INT 2
2953: PPUSH
2954: CALL_OW 12
2958: ARRAY
2959: PPUSH
2960: LD_INT 50
2962: PPUSH
2963: LD_INT 60
2965: PPUSH
2966: CALL_OW 12
2970: PPUSH
2971: CALL 49139 0 5
// veh = CreateVehicle ;
2975: LD_ADDR_VAR 0 4
2979: PUSH
2980: CALL_OW 45
2984: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
2985: LD_VAR 0 4
2989: PPUSH
2990: LD_INT 0
2992: PPUSH
2993: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 230 , false ) ;
2997: LD_VAR 0 4
3001: PPUSH
3002: LD_INT 134
3004: PPUSH
3005: LD_INT 230
3007: PPUSH
3008: LD_INT 0
3010: PPUSH
3011: CALL_OW 48
// if Belkov then
3015: LD_EXP 49
3019: IFFALSE 3037
// PlaceHumanInUnit ( Belkov , veh ) else
3021: LD_EXP 49
3025: PPUSH
3026: LD_VAR 0 4
3030: PPUSH
3031: CALL_OW 52
3035: GO 3090
// if Difficulty = 1 or Difficulty = 2 then
3037: LD_OWVAR 67
3041: PUSH
3042: LD_INT 1
3044: EQUAL
3045: PUSH
3046: LD_OWVAR 67
3050: PUSH
3051: LD_INT 2
3053: EQUAL
3054: OR
3055: IFFALSE 3090
// begin ConvoyBoris = PrepareUnitExt ( SCBoris , false , class_soldier ) ;
3057: LD_ADDR_EXP 56
3061: PUSH
3062: LD_STRING SCBoris
3064: PPUSH
3065: LD_INT 0
3067: PPUSH
3068: LD_INT 1
3070: PPUSH
3071: CALL 11785 0 3
3075: ST_TO_ADDR
// PlaceHumanInUnit ( ConvoyBoris , veh ) ;
3076: LD_EXP 56
3080: PPUSH
3081: LD_VAR 0 4
3085: PPUSH
3086: CALL_OW 52
// end ; PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3090: LD_INT 22
3092: PPUSH
3093: LD_INT 1
3095: PPUSH
3096: LD_INT 1
3098: PPUSH
3099: LD_INT 51
3101: PPUSH
3102: LD_INT 50
3104: PPUSH
3105: LD_INT 60
3107: PPUSH
3108: CALL_OW 12
3112: PPUSH
3113: CALL 49139 0 5
// veh = CreateVehicle ;
3117: LD_ADDR_VAR 0 4
3121: PUSH
3122: CALL_OW 45
3126: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3127: LD_VAR 0 4
3131: PPUSH
3132: LD_INT 0
3134: PPUSH
3135: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 233 , false ) ;
3139: LD_VAR 0 4
3143: PPUSH
3144: LD_INT 134
3146: PPUSH
3147: LD_INT 233
3149: PPUSH
3150: LD_INT 0
3152: PPUSH
3153: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
3157: LD_VAR 0 4
3161: PPUSH
3162: LD_INT 1
3164: PPUSH
3165: LD_INT 100
3167: PPUSH
3168: CALL_OW 290
// if Belkov2 then
3172: LD_EXP 50
3176: IFFALSE 3194
// PlaceHumanInUnit ( Belkov2 , veh ) else
3178: LD_EXP 50
3182: PPUSH
3183: LD_VAR 0 4
3187: PPUSH
3188: CALL_OW 52
3192: GO 3237
// if Difficulty = 1 then
3194: LD_OWVAR 67
3198: PUSH
3199: LD_INT 1
3201: EQUAL
3202: IFFALSE 3237
// begin ConvoyIbrahim = PrepareUnitExt ( SCIbrahim , false , class_soldier ) ;
3204: LD_ADDR_EXP 57
3208: PUSH
3209: LD_STRING SCIbrahim
3211: PPUSH
3212: LD_INT 0
3214: PPUSH
3215: LD_INT 1
3217: PPUSH
3218: CALL 11785 0 3
3222: ST_TO_ADDR
// PlaceHumanInUnit ( ConvoyIbrahim , veh ) ;
3223: LD_EXP 57
3227: PPUSH
3228: LD_VAR 0 4
3232: PPUSH
3233: CALL_OW 52
// end ; if Kirilenkova then
3237: LD_EXP 48
3241: IFFALSE 3339
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3243: LD_INT 22
3245: PPUSH
3246: LD_INT 1
3248: PPUSH
3249: LD_INT 1
3251: PPUSH
3252: LD_INT 51
3254: PPUSH
3255: LD_INT 50
3257: PPUSH
3258: LD_INT 60
3260: PPUSH
3261: CALL_OW 12
3265: PPUSH
3266: CALL 49139 0 5
// veh = CreateVehicle ;
3270: LD_ADDR_VAR 0 4
3274: PUSH
3275: CALL_OW 45
3279: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3280: LD_VAR 0 4
3284: PPUSH
3285: LD_INT 0
3287: PPUSH
3288: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 236 , false ) ;
3292: LD_VAR 0 4
3296: PPUSH
3297: LD_INT 134
3299: PPUSH
3300: LD_INT 236
3302: PPUSH
3303: LD_INT 0
3305: PPUSH
3306: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
3310: LD_VAR 0 4
3314: PPUSH
3315: LD_INT 1
3317: PPUSH
3318: LD_INT 100
3320: PPUSH
3321: CALL_OW 290
// PlaceHumanInUnit ( Kirilenkova , veh ) ;
3325: LD_EXP 48
3329: PPUSH
3330: LD_VAR 0 4
3334: PPUSH
3335: CALL_OW 52
// end ; end ; end_of_file
3339: LD_VAR 0 1
3343: RET
// export VanHouten ; export ovsyenkoBase , terminalBase , headAmBase ; export trapTeam , convoyTeam , attackTeam ; export function PrepareAmericans ; begin
3344: LD_INT 0
3346: PPUSH
// PrepareOvsyenko ;
3347: CALL 3364 0 0
// PrepareTerminal ;
3351: CALL 3565 0 0
// PrepareMainAmericanBase ;
3355: CALL 3648 0 0
// end ;
3359: LD_VAR 0 1
3363: RET
// function PrepareOvsyenko ; var soldiersAmount ; begin
3364: LD_INT 0
3366: PPUSH
3367: PPUSH
// uc_side = 1 ;
3368: LD_ADDR_OWVAR 20
3372: PUSH
3373: LD_INT 1
3375: ST_TO_ADDR
// uc_nation = nation_american ;
3376: LD_ADDR_OWVAR 21
3380: PUSH
3381: LD_INT 1
3383: ST_TO_ADDR
// soldiersAmount = 3 ;
3384: LD_ADDR_VAR 0 2
3388: PUSH
3389: LD_INT 3
3391: ST_TO_ADDR
// if fastBreakthrough then
3392: LD_EXP 3
3396: IFFALSE 3414
// begin RemoveUnit ( ovs_bun2 ) ;
3398: LD_INT 229
3400: PPUSH
3401: CALL_OW 64
// RemoveUnit ( ovs_bun3 ) ;
3405: LD_INT 258
3407: PPUSH
3408: CALL_OW 64
// end else
3412: GO 3422
// soldiersAmount = 4 ;
3414: LD_ADDR_VAR 0 2
3418: PUSH
3419: LD_INT 4
3421: ST_TO_ADDR
// ovsyenkoBase := Nef_PrepareBase ( ovsyenko , OvsyenkoBaseArea , ovsyenko , enemySkillLevel , [ ovsyenkoStartCrates , 50 , 0 ] , 1 , [ soldiersAmount , 1 , 0 , 1 ] ) ;
3422: LD_ADDR_EXP 59
3426: PUSH
3427: LD_INT 86
3429: PPUSH
3430: LD_INT 3
3432: PPUSH
3433: LD_STRING ovsyenko
3435: PPUSH
3436: LD_EXP 34
3440: PPUSH
3441: LD_EXP 35
3445: PUSH
3446: LD_INT 50
3448: PUSH
3449: LD_INT 0
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: LIST
3456: PPUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_VAR 0 2
3464: PUSH
3465: LD_INT 1
3467: PUSH
3468: LD_INT 0
3470: PUSH
3471: LD_INT 1
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: PPUSH
3480: CALL 12686 0 7
3484: ST_TO_ADDR
// case Difficulty of 1 :
3485: LD_OWVAR 67
3489: PUSH
3490: LD_INT 1
3492: DOUBLE
3493: EQUAL
3494: IFTRUE 3498
3496: GO 3511
3498: POP
// PlaceWeaponTurret ( ovs_bun1 , us_double_gun ) ; 2 :
3499: LD_INT 97
3501: PPUSH
3502: LD_INT 5
3504: PPUSH
3505: CALL_OW 431
3509: GO 3560
3511: LD_INT 2
3513: DOUBLE
3514: EQUAL
3515: IFTRUE 3519
3517: GO 3532
3519: POP
// PlaceWeaponTurret ( ovs_bun1 , us_light_gun ) ; 3 .. 4 :
3520: LD_INT 97
3522: PPUSH
3523: LD_INT 3
3525: PPUSH
3526: CALL_OW 431
3530: GO 3560
3532: LD_INT 3
3534: DOUBLE
3535: GREATEREQUAL
3536: IFFALSE 3544
3538: LD_INT 4
3540: DOUBLE
3541: LESSEQUAL
3542: IFTRUE 3546
3544: GO 3559
3546: POP
// PlaceWeaponTurret ( ovs_bun1 , us_gatling_gun ) ; end ;
3547: LD_INT 97
3549: PPUSH
3550: LD_INT 4
3552: PPUSH
3553: CALL_OW 431
3557: GO 3560
3559: POP
// end ;
3560: LD_VAR 0 1
3564: RET
// function PrepareTerminal ; begin
3565: LD_INT 0
3567: PPUSH
// uc_side = 1 ;
3568: LD_ADDR_OWVAR 20
3572: PUSH
3573: LD_INT 1
3575: ST_TO_ADDR
// uc_nation = nation_american ;
3576: LD_ADDR_OWVAR 21
3580: PUSH
3581: LD_INT 1
3583: ST_TO_ADDR
// terminalBase := Nef_PrepareBase ( terminal , terminalBaseArea , terminal , enemySkillLevel , [ 100 , 50 , 0 ] , 1 , [ 2 , 1 , 0 , 0 ] ) ;
3584: LD_ADDR_EXP 60
3588: PUSH
3589: LD_INT 168
3591: PPUSH
3592: LD_INT 4
3594: PPUSH
3595: LD_STRING terminal
3597: PPUSH
3598: LD_EXP 34
3602: PPUSH
3603: LD_INT 100
3605: PUSH
3606: LD_INT 50
3608: PUSH
3609: LD_INT 0
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: PPUSH
3617: LD_INT 1
3619: PPUSH
3620: LD_INT 2
3622: PUSH
3623: LD_INT 1
3625: PUSH
3626: LD_INT 0
3628: PUSH
3629: LD_INT 0
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL 12686 0 7
3642: ST_TO_ADDR
// end ;
3643: LD_VAR 0 1
3647: RET
// function PrepareMainAmericanBase ; begin
3648: LD_INT 0
3650: PPUSH
// uc_side = 1 ;
3651: LD_ADDR_OWVAR 20
3655: PUSH
3656: LD_INT 1
3658: ST_TO_ADDR
// uc_nation = nation_american ;
3659: LD_ADDR_OWVAR 21
3663: PUSH
3664: LD_INT 1
3666: ST_TO_ADDR
// if fastBreakthrough then
3667: LD_EXP 3
3671: IFFALSE 3680
// RemoveUnit ( ovs_bun2 ) ;
3673: LD_INT 229
3675: PPUSH
3676: CALL_OW 64
// headAmBase := Nef_PrepareBase ( headamdepot , HeadAmericanBaseArea ,  , enemySkillLevel , [ 3000 , 1000 , 0 ] , 1 , [ 9 , 3 , 6 , 2 ] ) ;
3680: LD_ADDR_EXP 61
3684: PUSH
3685: LD_INT 106
3687: PPUSH
3688: LD_INT 5
3690: PPUSH
3691: LD_STRING 
3693: PPUSH
3694: LD_EXP 34
3698: PPUSH
3699: LD_INT 3000
3701: PUSH
3702: LD_INT 1000
3704: PUSH
3705: LD_INT 0
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: LIST
3712: PPUSH
3713: LD_INT 1
3715: PPUSH
3716: LD_INT 9
3718: PUSH
3719: LD_INT 3
3721: PUSH
3722: LD_INT 6
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: PPUSH
3734: CALL 12686 0 7
3738: ST_TO_ADDR
// VanHouten = PrepareUnitExt ( VanHouten , false , class_soldier ) ;
3739: LD_ADDR_EXP 58
3743: PUSH
3744: LD_STRING VanHouten
3746: PPUSH
3747: LD_INT 0
3749: PPUSH
3750: LD_INT 1
3752: PPUSH
3753: CALL 11785 0 3
3757: ST_TO_ADDR
// headAmBase = headAmBase ^ VanHouten ;
3758: LD_ADDR_EXP 61
3762: PUSH
3763: LD_EXP 61
3767: PUSH
3768: LD_EXP 58
3772: ADD
3773: ST_TO_ADDR
// PlaceUnitXYR ( VanHouten , 35 , 57 , 3 , false ) ;
3774: LD_EXP 58
3778: PPUSH
3779: LD_INT 35
3781: PPUSH
3782: LD_INT 57
3784: PPUSH
3785: LD_INT 3
3787: PPUSH
3788: LD_INT 0
3790: PPUSH
3791: CALL_OW 50
// end ;
3795: LD_VAR 0 1
3799: RET
// export function PrepareTrap ; var i , un , nearEnemyUnit ; begin
3800: LD_INT 0
3802: PPUSH
3803: PPUSH
3804: PPUSH
3805: PPUSH
// uc_side = 1 ;
3806: LD_ADDR_OWVAR 20
3810: PUSH
3811: LD_INT 1
3813: ST_TO_ADDR
// uc_nation = nation_american ;
3814: LD_ADDR_OWVAR 21
3818: PUSH
3819: LD_INT 1
3821: ST_TO_ADDR
// for i := 1 to trapAmount do
3822: LD_ADDR_VAR 0 2
3826: PUSH
3827: DOUBLE
3828: LD_INT 1
3830: DEC
3831: ST_TO_ADDR
3832: LD_EXP 37
3836: PUSH
3837: FOR_TO
3838: IFFALSE 3972
// begin PrepareSoldier ( false , enemySkillLevel ) ;
3840: LD_INT 0
3842: PPUSH
3843: LD_EXP 34
3847: PPUSH
3848: CALL_OW 381
// un = CreateHuman ;
3852: LD_ADDR_VAR 0 3
3856: PUSH
3857: CALL_OW 44
3861: ST_TO_ADDR
// trapTeam = trapTeam ^ un ;
3862: LD_ADDR_EXP 62
3866: PUSH
3867: LD_EXP 62
3871: PUSH
3872: LD_VAR 0 3
3876: ADD
3877: ST_TO_ADDR
// PlaceUnitArea ( un , TrapSpawnArea , false ) ;
3878: LD_VAR 0 3
3882: PPUSH
3883: LD_INT 11
3885: PPUSH
3886: LD_INT 0
3888: PPUSH
3889: CALL_OW 49
// nearEnemyUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] ] ) , un ) ;
3893: LD_ADDR_VAR 0 4
3897: PUSH
3898: LD_INT 22
3900: PUSH
3901: LD_INT 3
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: PUSH
3908: EMPTY
3909: LIST
3910: PPUSH
3911: CALL_OW 69
3915: PPUSH
3916: LD_VAR 0 3
3920: PPUSH
3921: CALL_OW 74
3925: ST_TO_ADDR
// ComAgressiveMove ( un , GetX ( nearEnemyUnit ) , GetY ( nearEnemyUnit ) ) ;
3926: LD_VAR 0 3
3930: PPUSH
3931: LD_VAR 0 4
3935: PPUSH
3936: CALL_OW 250
3940: PPUSH
3941: LD_VAR 0 4
3945: PPUSH
3946: CALL_OW 251
3950: PPUSH
3951: CALL_OW 114
// AddComAgressiveMove ( un , 106 , 124 ) ;
3955: LD_VAR 0 3
3959: PPUSH
3960: LD_INT 106
3962: PPUSH
3963: LD_INT 124
3965: PPUSH
3966: CALL_OW 174
// end ;
3970: GO 3837
3972: POP
3973: POP
// end ;
3974: LD_VAR 0 1
3978: RET
// export function PrepareSoldiersInBunkers ; begin
3979: LD_INT 0
3981: PPUSH
// PrepareSolBun ( enemySkilLLevel , non_bun1 ) ;
3982: LD_EXP 34
3986: PPUSH
3987: LD_INT 236
3989: PPUSH
3990: CALL 15230 0 2
// PrepareSolBun ( enemySkilLLevel , non_bun2 ) ;
3994: LD_EXP 34
3998: PPUSH
3999: LD_INT 240
4001: PPUSH
4002: CALL 15230 0 2
// PrepareSolBun ( enemySkilLLevel , non_bun3 ) ;
4006: LD_EXP 34
4010: PPUSH
4011: LD_INT 243
4013: PPUSH
4014: CALL 15230 0 2
// end ;
4018: LD_VAR 0 1
4022: RET
// export function PrepareConvoy ; var i , un , veh ; begin
4023: LD_INT 0
4025: PPUSH
4026: PPUSH
4027: PPUSH
4028: PPUSH
// convoyTeam = [ ] ;
4029: LD_ADDR_EXP 63
4033: PUSH
4034: EMPTY
4035: ST_TO_ADDR
// uc_side = 1 ;
4036: LD_ADDR_OWVAR 20
4040: PUSH
4041: LD_INT 1
4043: ST_TO_ADDR
// uc_nation = nation_american ;
4044: LD_ADDR_OWVAR 21
4048: PUSH
4049: LD_INT 1
4051: ST_TO_ADDR
// for i := 1 to 2 do
4052: LD_ADDR_VAR 0 2
4056: PUSH
4057: DOUBLE
4058: LD_INT 1
4060: DEC
4061: ST_TO_ADDR
4062: LD_INT 2
4064: PUSH
4065: FOR_TO
4066: IFFALSE 4197
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
4068: LD_INT 3
4070: PPUSH
4071: LD_INT 1
4073: PPUSH
4074: LD_INT 1
4076: PPUSH
4077: LD_INT 12
4079: PPUSH
4080: LD_INT 80
4082: PPUSH
4083: CALL 49139 0 5
// veh = CreateVehicle ;
4087: LD_ADDR_VAR 0 4
4091: PUSH
4092: CALL_OW 45
4096: ST_TO_ADDR
// AddCargo ( veh , mat_cans , 100 ) ;
4097: LD_VAR 0 4
4101: PPUSH
4102: LD_INT 1
4104: PPUSH
4105: LD_INT 100
4107: PPUSH
4108: CALL_OW 291
// convoyTeam = convoyTeam ^ veh ;
4112: LD_ADDR_EXP 63
4116: PUSH
4117: LD_EXP 63
4121: PUSH
4122: LD_VAR 0 4
4126: ADD
4127: ST_TO_ADDR
// PlaceUnitArea ( veh , AmericanSpawnArea1 , false ) ;
4128: LD_VAR 0 4
4132: PPUSH
4133: LD_INT 8
4135: PPUSH
4136: LD_INT 0
4138: PPUSH
4139: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
4143: LD_INT 0
4145: PPUSH
4146: LD_EXP 34
4150: PPUSH
4151: CALL_OW 383
// un = CreateHuman ;
4155: LD_ADDR_VAR 0 3
4159: PUSH
4160: CALL_OW 44
4164: ST_TO_ADDR
// convoyTeam = convoyTeam ^ un ;
4165: LD_ADDR_EXP 63
4169: PUSH
4170: LD_EXP 63
4174: PUSH
4175: LD_VAR 0 3
4179: ADD
4180: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4181: LD_VAR 0 3
4185: PPUSH
4186: LD_VAR 0 4
4190: PPUSH
4191: CALL_OW 52
// end ;
4195: GO 4065
4197: POP
4198: POP
// end ;
4199: LD_VAR 0 1
4203: RET
// export function PrepareAttack ; var i , un , veh ; begin
4204: LD_INT 0
4206: PPUSH
4207: PPUSH
4208: PPUSH
4209: PPUSH
// uc_side = 1 ;
4210: LD_ADDR_OWVAR 20
4214: PUSH
4215: LD_INT 1
4217: ST_TO_ADDR
// uc_nation = nation_american ;
4218: LD_ADDR_OWVAR 21
4222: PUSH
4223: LD_INT 1
4225: ST_TO_ADDR
// for i := 1 to 4 do
4226: LD_ADDR_VAR 0 2
4230: PUSH
4231: DOUBLE
4232: LD_INT 1
4234: DEC
4235: ST_TO_ADDR
4236: LD_INT 4
4238: PUSH
4239: FOR_TO
4240: IFFALSE 4379
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_light_gun , us_double_gun , us_gatling_gun ] [ Rand ( 1 , 3 ) ] , 80 ) ;
4242: LD_INT 3
4244: PPUSH
4245: LD_INT 1
4247: PPUSH
4248: LD_INT 1
4250: PPUSH
4251: LD_INT 3
4253: PUSH
4254: LD_INT 5
4256: PUSH
4257: LD_INT 4
4259: PUSH
4260: EMPTY
4261: LIST
4262: LIST
4263: LIST
4264: PUSH
4265: LD_INT 1
4267: PPUSH
4268: LD_INT 3
4270: PPUSH
4271: CALL_OW 12
4275: ARRAY
4276: PPUSH
4277: LD_INT 80
4279: PPUSH
4280: CALL 49139 0 5
// veh = CreateVehicle ;
4284: LD_ADDR_VAR 0 4
4288: PUSH
4289: CALL_OW 45
4293: ST_TO_ADDR
// attackTeam = attackTeam ^ veh ;
4294: LD_ADDR_EXP 64
4298: PUSH
4299: LD_EXP 64
4303: PUSH
4304: LD_VAR 0 4
4308: ADD
4309: ST_TO_ADDR
// PlaceUnitArea ( veh , AmericanSpawnArea2 , false ) ;
4310: LD_VAR 0 4
4314: PPUSH
4315: LD_INT 17
4317: PPUSH
4318: LD_INT 0
4320: PPUSH
4321: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
4325: LD_INT 0
4327: PPUSH
4328: LD_EXP 34
4332: PPUSH
4333: CALL_OW 383
// un = CreateHuman ;
4337: LD_ADDR_VAR 0 3
4341: PUSH
4342: CALL_OW 44
4346: ST_TO_ADDR
// attackTeam = attackTeam ^ un ;
4347: LD_ADDR_EXP 64
4351: PUSH
4352: LD_EXP 64
4356: PUSH
4357: LD_VAR 0 3
4361: ADD
4362: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4363: LD_VAR 0 3
4367: PPUSH
4368: LD_VAR 0 4
4372: PPUSH
4373: CALL_OW 52
// end ;
4377: GO 4239
4379: POP
4380: POP
// for i := 1 to 3 do
4381: LD_ADDR_VAR 0 2
4385: PUSH
4386: DOUBLE
4387: LD_INT 1
4389: DEC
4390: ST_TO_ADDR
4391: LD_INT 3
4393: PUSH
4394: FOR_TO
4395: IFFALSE 4452
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4397: LD_INT 0
4399: PPUSH
4400: LD_EXP 34
4404: PPUSH
4405: CALL_OW 381
// un = CreateHuman ;
4409: LD_ADDR_VAR 0 3
4413: PUSH
4414: CALL_OW 44
4418: ST_TO_ADDR
// attackTeam = attackTeam ^ un ;
4419: LD_ADDR_EXP 64
4423: PUSH
4424: LD_EXP 64
4428: PUSH
4429: LD_VAR 0 3
4433: ADD
4434: ST_TO_ADDR
// PlaceUnitArea ( un , AmericanSpawnArea2 , false ) ;
4435: LD_VAR 0 3
4439: PPUSH
4440: LD_INT 17
4442: PPUSH
4443: LD_INT 0
4445: PPUSH
4446: CALL_OW 49
// end ;
4450: GO 4394
4452: POP
4453: POP
// end ; end_of_file
4454: LD_VAR 0 1
4458: RET
// export function Nef_PrepareNature ; var i , un ; begin
4459: LD_INT 0
4461: PPUSH
4462: PPUSH
4463: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
4464: LD_ADDR_VAR 0 2
4468: PUSH
4469: DOUBLE
4470: LD_INT 1
4472: DEC
4473: ST_TO_ADDR
4474: LD_EXP 28
4478: PUSH
4479: LD_INT 1
4481: ARRAY
4482: PUSH
4483: FOR_TO
4484: IFFALSE 4594
// begin uc_side = 0 ;
4486: LD_ADDR_OWVAR 20
4490: PUSH
4491: LD_INT 0
4493: ST_TO_ADDR
// uc_nation = nation_nature ;
4494: LD_ADDR_OWVAR 21
4498: PUSH
4499: LD_INT 0
4501: ST_TO_ADDR
// hc_class = class_apeman ;
4502: LD_ADDR_OWVAR 28
4506: PUSH
4507: LD_INT 12
4509: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4510: LD_ADDR_OWVAR 31
4514: PUSH
4515: LD_EXP 29
4519: PUSH
4520: LD_INT 1
4522: ARRAY
4523: PUSH
4524: LD_EXP 29
4528: PUSH
4529: LD_INT 2
4531: ARRAY
4532: PUSH
4533: LD_EXP 29
4537: PUSH
4538: LD_INT 3
4540: ARRAY
4541: PUSH
4542: LD_EXP 29
4546: PUSH
4547: LD_INT 4
4549: ARRAY
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4557: LD_ADDR_OWVAR 35
4561: PUSH
4562: LD_EXP 30
4566: ST_TO_ADDR
// un = CreateHuman ;
4567: LD_ADDR_VAR 0 3
4571: PUSH
4572: CALL_OW 44
4576: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4577: LD_VAR 0 3
4581: PPUSH
4582: LD_INT 2
4584: PPUSH
4585: LD_INT 0
4587: PPUSH
4588: CALL_OW 49
// end ;
4592: GO 4483
4594: POP
4595: POP
// for i := 1 to animalsAmount [ 2 ] do
4596: LD_ADDR_VAR 0 2
4600: PUSH
4601: DOUBLE
4602: LD_INT 1
4604: DEC
4605: ST_TO_ADDR
4606: LD_EXP 28
4610: PUSH
4611: LD_INT 2
4613: ARRAY
4614: PUSH
4615: FOR_TO
4616: IFFALSE 4726
// begin uc_side = 0 ;
4618: LD_ADDR_OWVAR 20
4622: PUSH
4623: LD_INT 0
4625: ST_TO_ADDR
// uc_nation = nation_nature ;
4626: LD_ADDR_OWVAR 21
4630: PUSH
4631: LD_INT 0
4633: ST_TO_ADDR
// hc_class = class_phororhacos ;
4634: LD_ADDR_OWVAR 28
4638: PUSH
4639: LD_INT 18
4641: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4642: LD_ADDR_OWVAR 31
4646: PUSH
4647: LD_EXP 29
4651: PUSH
4652: LD_INT 1
4654: ARRAY
4655: PUSH
4656: LD_EXP 29
4660: PUSH
4661: LD_INT 2
4663: ARRAY
4664: PUSH
4665: LD_EXP 29
4669: PUSH
4670: LD_INT 3
4672: ARRAY
4673: PUSH
4674: LD_EXP 29
4678: PUSH
4679: LD_INT 4
4681: ARRAY
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4689: LD_ADDR_OWVAR 35
4693: PUSH
4694: LD_EXP 30
4698: ST_TO_ADDR
// un = CreateHuman ;
4699: LD_ADDR_VAR 0 3
4703: PUSH
4704: CALL_OW 44
4708: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4709: LD_VAR 0 3
4713: PPUSH
4714: LD_INT 2
4716: PPUSH
4717: LD_INT 0
4719: PPUSH
4720: CALL_OW 49
// end ;
4724: GO 4615
4726: POP
4727: POP
// for i := 1 to animalsAmount [ 3 ] do
4728: LD_ADDR_VAR 0 2
4732: PUSH
4733: DOUBLE
4734: LD_INT 1
4736: DEC
4737: ST_TO_ADDR
4738: LD_EXP 28
4742: PUSH
4743: LD_INT 3
4745: ARRAY
4746: PUSH
4747: FOR_TO
4748: IFFALSE 4858
// begin uc_side = 0 ;
4750: LD_ADDR_OWVAR 20
4754: PUSH
4755: LD_INT 0
4757: ST_TO_ADDR
// uc_nation = nation_nature ;
4758: LD_ADDR_OWVAR 21
4762: PUSH
4763: LD_INT 0
4765: ST_TO_ADDR
// hc_class = class_tiger ;
4766: LD_ADDR_OWVAR 28
4770: PUSH
4771: LD_INT 14
4773: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4774: LD_ADDR_OWVAR 31
4778: PUSH
4779: LD_EXP 29
4783: PUSH
4784: LD_INT 1
4786: ARRAY
4787: PUSH
4788: LD_EXP 29
4792: PUSH
4793: LD_INT 2
4795: ARRAY
4796: PUSH
4797: LD_EXP 29
4801: PUSH
4802: LD_INT 3
4804: ARRAY
4805: PUSH
4806: LD_EXP 29
4810: PUSH
4811: LD_INT 4
4813: ARRAY
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4821: LD_ADDR_OWVAR 35
4825: PUSH
4826: LD_EXP 30
4830: ST_TO_ADDR
// un = CreateHuman ;
4831: LD_ADDR_VAR 0 3
4835: PUSH
4836: CALL_OW 44
4840: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4841: LD_VAR 0 3
4845: PPUSH
4846: LD_INT 2
4848: PPUSH
4849: LD_INT 0
4851: PPUSH
4852: CALL_OW 49
// end ;
4856: GO 4747
4858: POP
4859: POP
// for i := 1 to animalsAmount [ 4 ] do
4860: LD_ADDR_VAR 0 2
4864: PUSH
4865: DOUBLE
4866: LD_INT 1
4868: DEC
4869: ST_TO_ADDR
4870: LD_EXP 28
4874: PUSH
4875: LD_INT 4
4877: ARRAY
4878: PUSH
4879: FOR_TO
4880: IFFALSE 4990
// begin uc_side = 0 ;
4882: LD_ADDR_OWVAR 20
4886: PUSH
4887: LD_INT 0
4889: ST_TO_ADDR
// uc_nation = nation_nature ;
4890: LD_ADDR_OWVAR 21
4894: PUSH
4895: LD_INT 0
4897: ST_TO_ADDR
// hc_class = 21 ;
4898: LD_ADDR_OWVAR 28
4902: PUSH
4903: LD_INT 21
4905: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4906: LD_ADDR_OWVAR 31
4910: PUSH
4911: LD_EXP 29
4915: PUSH
4916: LD_INT 1
4918: ARRAY
4919: PUSH
4920: LD_EXP 29
4924: PUSH
4925: LD_INT 2
4927: ARRAY
4928: PUSH
4929: LD_EXP 29
4933: PUSH
4934: LD_INT 3
4936: ARRAY
4937: PUSH
4938: LD_EXP 29
4942: PUSH
4943: LD_INT 4
4945: ARRAY
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4953: LD_ADDR_OWVAR 35
4957: PUSH
4958: LD_EXP 30
4962: ST_TO_ADDR
// un = CreateHuman ;
4963: LD_ADDR_VAR 0 3
4967: PUSH
4968: CALL_OW 44
4972: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4973: LD_VAR 0 3
4977: PPUSH
4978: LD_INT 2
4980: PPUSH
4981: LD_INT 0
4983: PPUSH
4984: CALL_OW 49
// end ;
4988: GO 4879
4990: POP
4991: POP
// for i := 1 to animalsAmount [ 5 ] do
4992: LD_ADDR_VAR 0 2
4996: PUSH
4997: DOUBLE
4998: LD_INT 1
5000: DEC
5001: ST_TO_ADDR
5002: LD_EXP 28
5006: PUSH
5007: LD_INT 5
5009: ARRAY
5010: PUSH
5011: FOR_TO
5012: IFFALSE 5073
// begin uc_side = 0 ;
5014: LD_ADDR_OWVAR 20
5018: PUSH
5019: LD_INT 0
5021: ST_TO_ADDR
// uc_nation = nation_nature ;
5022: LD_ADDR_OWVAR 21
5026: PUSH
5027: LD_INT 0
5029: ST_TO_ADDR
// vc_chassis := 31 ;
5030: LD_ADDR_OWVAR 37
5034: PUSH
5035: LD_INT 31
5037: ST_TO_ADDR
// vc_control := control_rider ;
5038: LD_ADDR_OWVAR 38
5042: PUSH
5043: LD_INT 4
5045: ST_TO_ADDR
// un := CreateVehicle ;
5046: LD_ADDR_VAR 0 3
5050: PUSH
5051: CALL_OW 45
5055: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
5056: LD_VAR 0 3
5060: PPUSH
5061: LD_INT 2
5063: PPUSH
5064: LD_INT 0
5066: PPUSH
5067: CALL_OW 49
// end ;
5071: GO 5011
5073: POP
5074: POP
// end ; end_of_file
5075: LD_VAR 0 1
5079: RET
// every 0 0$1 do
5080: GO 5082
5082: DISABLE
// InitAIManager ( 1 , 2 , UnitFilter ( ovsyenkoBase , [ f_type , unit_human ] ) , OvsyenkoBaseArea , OvsyenkoHealArea , false , false , 0 , 0 , 0 , 0 , 0 ) ;
5083: LD_INT 1
5085: PPUSH
5086: LD_INT 2
5088: PPUSH
5089: LD_EXP 59
5093: PPUSH
5094: LD_INT 21
5096: PUSH
5097: LD_INT 1
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PPUSH
5104: CALL_OW 72
5108: PPUSH
5109: LD_INT 3
5111: PPUSH
5112: LD_INT 6
5114: PPUSH
5115: LD_INT 0
5117: PPUSH
5118: LD_INT 0
5120: PPUSH
5121: LD_INT 0
5123: PPUSH
5124: LD_INT 0
5126: PPUSH
5127: LD_INT 0
5129: PPUSH
5130: LD_INT 0
5132: PPUSH
5133: LD_INT 0
5135: PPUSH
5136: CALL 5248 0 12
5140: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_weapon , us_bulldozer ] ] ) do var unit ;
5141: LD_INT 22
5143: PUSH
5144: LD_INT 1
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: LD_INT 50
5153: PUSH
5154: EMPTY
5155: LIST
5156: PUSH
5157: LD_INT 34
5159: PUSH
5160: LD_INT 14
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: LIST
5171: PPUSH
5172: CALL_OW 69
5176: IFFALSE 5245
5178: GO 5180
5180: DISABLE
5181: LD_INT 0
5183: PPUSH
// begin enable ;
5184: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_weapon , us_bulldozer ] ] ) do
5185: LD_ADDR_VAR 0 1
5189: PUSH
5190: LD_INT 22
5192: PUSH
5193: LD_INT 1
5195: PUSH
5196: EMPTY
5197: LIST
5198: LIST
5199: PUSH
5200: LD_INT 50
5202: PUSH
5203: EMPTY
5204: LIST
5205: PUSH
5206: LD_INT 34
5208: PUSH
5209: LD_INT 14
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: LIST
5220: PPUSH
5221: CALL_OW 69
5225: PUSH
5226: FOR_IN
5227: IFFALSE 5243
// CutTreeInArea ( unit , TreeArea ) ;
5229: LD_VAR 0 1
5233: PPUSH
5234: LD_INT 18
5236: PPUSH
5237: CALL 15087 0 2
5241: GO 5226
5243: POP
5244: POP
// end ;
5245: PPOPN 1
5247: END
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , repairArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack , canRebuild ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , offensiveUnits , offensiveReadyCounter , target1 , target2 , defenceUnits , weapons , chassis , baseBuildings , destroyedBuildings , destroyedBuilding , constructedBuilding , constructedBuildings , depot , factory , lab , bunkers , barracks , controlTowers , attackBuildings , enemyBuildings , damageBuilding , damageUnit , emptyBunkers , enemyUnits ; begin
5248: LD_INT 0
5250: PPUSH
5251: PPUSH
5252: PPUSH
5253: PPUSH
5254: PPUSH
5255: PPUSH
5256: PPUSH
5257: PPUSH
5258: PPUSH
5259: PPUSH
5260: PPUSH
5261: PPUSH
5262: PPUSH
5263: PPUSH
5264: PPUSH
5265: PPUSH
5266: PPUSH
5267: PPUSH
5268: PPUSH
5269: PPUSH
5270: PPUSH
5271: PPUSH
5272: PPUSH
5273: PPUSH
5274: PPUSH
5275: PPUSH
5276: PPUSH
5277: PPUSH
5278: PPUSH
5279: PPUSH
5280: PPUSH
5281: PPUSH
5282: PPUSH
5283: PPUSH
5284: PPUSH
5285: PPUSH
5286: PPUSH
5287: PPUSH
// personel = [ ] ;
5288: LD_ADDR_VAR 0 19
5292: PUSH
5293: EMPTY
5294: ST_TO_ADDR
// vehicles = [ ] ;
5295: LD_ADDR_VAR 0 25
5299: PUSH
5300: EMPTY
5301: ST_TO_ADDR
// destroyedBuildings = [ ] ;
5302: LD_ADDR_VAR 0 35
5306: PUSH
5307: EMPTY
5308: ST_TO_ADDR
// for unit in basePersonel do
5309: LD_ADDR_VAR 0 18
5313: PUSH
5314: LD_VAR 0 3
5318: PUSH
5319: FOR_IN
5320: IFFALSE 5340
// personel = personel ^ unit ;
5322: LD_ADDR_VAR 0 19
5326: PUSH
5327: LD_VAR 0 19
5331: PUSH
5332: LD_VAR 0 18
5336: ADD
5337: ST_TO_ADDR
5338: GO 5319
5340: POP
5341: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ] ] ) do
5342: LD_ADDR_VAR 0 24
5346: PUSH
5347: LD_VAR 0 4
5351: PPUSH
5352: LD_INT 22
5354: PUSH
5355: LD_VAR 0 1
5359: PUSH
5360: EMPTY
5361: LIST
5362: LIST
5363: PUSH
5364: LD_INT 21
5366: PUSH
5367: LD_INT 2
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: PUSH
5374: LD_INT 50
5376: PUSH
5377: EMPTY
5378: LIST
5379: PUSH
5380: LD_INT 3
5382: PUSH
5383: LD_INT 2
5385: PUSH
5386: LD_INT 34
5388: PUSH
5389: LD_INT 12
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: PUSH
5396: LD_INT 34
5398: PUSH
5399: LD_INT 51
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PUSH
5406: LD_INT 34
5408: PUSH
5409: LD_INT 32
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: PUSH
5416: LD_INT 34
5418: PUSH
5419: LD_INT 31
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: PUSH
5426: EMPTY
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: PPUSH
5443: CALL_OW 70
5447: PUSH
5448: FOR_IN
5449: IFFALSE 5469
// vehicles = vehicles ^ vehicle ;
5451: LD_ADDR_VAR 0 25
5455: PUSH
5456: LD_VAR 0 25
5460: PUSH
5461: LD_VAR 0 24
5465: ADD
5466: ST_TO_ADDR
5467: GO 5448
5469: POP
5470: POP
// repeat soldiers = [ ] ;
5471: LD_ADDR_VAR 0 20
5475: PUSH
5476: EMPTY
5477: ST_TO_ADDR
// engineers = [ ] ;
5478: LD_ADDR_VAR 0 21
5482: PUSH
5483: EMPTY
5484: ST_TO_ADDR
// mechanics = [ ] ;
5485: LD_ADDR_VAR 0 22
5489: PUSH
5490: EMPTY
5491: ST_TO_ADDR
// scientists = [ ] ;
5492: LD_ADDR_VAR 0 23
5496: PUSH
5497: EMPTY
5498: ST_TO_ADDR
// baseBuildings = [ ] ;
5499: LD_ADDR_VAR 0 34
5503: PUSH
5504: EMPTY
5505: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5506: LD_ADDR_VAR 0 39
5510: PUSH
5511: LD_VAR 0 4
5515: PPUSH
5516: LD_INT 22
5518: PUSH
5519: LD_VAR 0 1
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: PUSH
5528: LD_INT 21
5530: PUSH
5531: LD_INT 3
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: PUSH
5538: LD_INT 50
5540: PUSH
5541: EMPTY
5542: LIST
5543: PUSH
5544: LD_INT 2
5546: PUSH
5547: LD_INT 30
5549: PUSH
5550: LD_INT 0
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: PUSH
5557: LD_INT 30
5559: PUSH
5560: LD_INT 1
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: LIST
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: PPUSH
5578: CALL_OW 70
5582: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
5583: LD_ADDR_VAR 0 40
5587: PUSH
5588: LD_VAR 0 4
5592: PPUSH
5593: LD_INT 22
5595: PUSH
5596: LD_VAR 0 1
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: LD_INT 21
5607: PUSH
5608: LD_INT 3
5610: PUSH
5611: EMPTY
5612: LIST
5613: LIST
5614: PUSH
5615: LD_INT 50
5617: PUSH
5618: EMPTY
5619: LIST
5620: PUSH
5621: LD_INT 2
5623: PUSH
5624: LD_INT 30
5626: PUSH
5627: LD_INT 2
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: PUSH
5634: LD_INT 30
5636: PUSH
5637: LD_INT 3
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: LIST
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: PPUSH
5655: CALL_OW 70
5659: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5660: LD_ADDR_VAR 0 41
5664: PUSH
5665: LD_VAR 0 4
5669: PPUSH
5670: LD_INT 22
5672: PUSH
5673: LD_VAR 0 1
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: LD_INT 21
5684: PUSH
5685: LD_INT 3
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: PUSH
5692: LD_INT 50
5694: PUSH
5695: EMPTY
5696: LIST
5697: PUSH
5698: LD_INT 2
5700: PUSH
5701: LD_INT 30
5703: PUSH
5704: LD_INT 6
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: PUSH
5711: LD_INT 30
5713: PUSH
5714: LD_INT 7
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: PUSH
5721: LD_INT 30
5723: PUSH
5724: LD_INT 8
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: PUSH
5737: EMPTY
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: PPUSH
5743: CALL_OW 70
5747: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
5748: LD_ADDR_VAR 0 42
5752: PUSH
5753: LD_VAR 0 4
5757: PPUSH
5758: LD_INT 22
5760: PUSH
5761: LD_VAR 0 1
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: LD_INT 21
5772: PUSH
5773: LD_INT 3
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PUSH
5780: LD_INT 50
5782: PUSH
5783: EMPTY
5784: LIST
5785: PUSH
5786: LD_INT 2
5788: PUSH
5789: LD_INT 30
5791: PUSH
5792: LD_INT 31
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: LD_INT 30
5801: PUSH
5802: LD_INT 32
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: LIST
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: LIST
5818: LIST
5819: PPUSH
5820: CALL_OW 70
5824: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
5825: LD_ADDR_VAR 0 43
5829: PUSH
5830: LD_VAR 0 4
5834: PPUSH
5835: LD_INT 22
5837: PUSH
5838: LD_VAR 0 1
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PUSH
5847: LD_INT 21
5849: PUSH
5850: LD_INT 3
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: PUSH
5857: LD_INT 50
5859: PUSH
5860: EMPTY
5861: LIST
5862: PUSH
5863: LD_INT 2
5865: PUSH
5866: LD_INT 30
5868: PUSH
5869: LD_INT 4
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: PUSH
5876: LD_INT 30
5878: PUSH
5879: LD_INT 5
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: LIST
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: PPUSH
5897: CALL_OW 70
5901: ST_TO_ADDR
// controlTowers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_vehicle ] ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5902: LD_ADDR_VAR 0 44
5906: PUSH
5907: LD_VAR 0 4
5911: PPUSH
5912: LD_INT 22
5914: PUSH
5915: LD_VAR 0 1
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: PUSH
5924: LD_INT 50
5926: PUSH
5927: EMPTY
5928: LIST
5929: PUSH
5930: LD_INT 2
5932: PUSH
5933: LD_INT 21
5935: PUSH
5936: LD_INT 3
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: PUSH
5943: LD_INT 21
5945: PUSH
5946: LD_INT 2
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: LIST
5957: PUSH
5958: LD_INT 2
5960: PUSH
5961: LD_INT 30
5963: PUSH
5964: LD_INT 36
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: PUSH
5971: LD_INT 34
5973: PUSH
5974: LD_INT 31
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: LIST
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: PPUSH
5992: CALL_OW 70
5996: ST_TO_ADDR
// constructedBuildings = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] ] ) ;
5997: LD_ADDR_VAR 0 38
6001: PUSH
6002: LD_VAR 0 4
6006: PPUSH
6007: LD_INT 22
6009: PUSH
6010: LD_VAR 0 1
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: PUSH
6019: LD_INT 21
6021: PUSH
6022: LD_INT 3
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: PUSH
6029: LD_INT 3
6031: PUSH
6032: LD_INT 57
6034: PUSH
6035: EMPTY
6036: LIST
6037: PUSH
6038: EMPTY
6039: LIST
6040: LIST
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: LIST
6046: PPUSH
6047: CALL_OW 70
6051: ST_TO_ADDR
// for i := 1 to personel do
6052: LD_ADDR_VAR 0 14
6056: PUSH
6057: DOUBLE
6058: LD_INT 1
6060: DEC
6061: ST_TO_ADDR
6062: LD_VAR 0 19
6066: PUSH
6067: FOR_TO
6068: IFFALSE 6236
// begin if GetLives ( personel [ i ] ) = 1000 then
6070: LD_VAR 0 19
6074: PUSH
6075: LD_VAR 0 14
6079: ARRAY
6080: PPUSH
6081: CALL_OW 256
6085: PUSH
6086: LD_INT 1000
6088: EQUAL
6089: IFFALSE 6111
// SetTag ( personel [ i ] , 1 ) else
6091: LD_VAR 0 19
6095: PUSH
6096: LD_VAR 0 14
6100: ARRAY
6101: PPUSH
6102: LD_INT 1
6104: PPUSH
6105: CALL_OW 109
6109: GO 6191
// if GetLives ( personel [ i ] ) <= 950 and GetLives ( personel [ i ] ) > 250 then
6111: LD_VAR 0 19
6115: PUSH
6116: LD_VAR 0 14
6120: ARRAY
6121: PPUSH
6122: CALL_OW 256
6126: PUSH
6127: LD_INT 950
6129: LESSEQUAL
6130: PUSH
6131: LD_VAR 0 19
6135: PUSH
6136: LD_VAR 0 14
6140: ARRAY
6141: PPUSH
6142: CALL_OW 256
6146: PUSH
6147: LD_INT 250
6149: GREATER
6150: AND
6151: IFFALSE 6191
// begin SetTag ( personel [ i ] , 0 ) ;
6153: LD_VAR 0 19
6157: PUSH
6158: LD_VAR 0 14
6162: ARRAY
6163: PPUSH
6164: LD_INT 0
6166: PPUSH
6167: CALL_OW 109
// ComMoveToArea ( personel [ i ] , healArea ) ;
6171: LD_VAR 0 19
6175: PUSH
6176: LD_VAR 0 14
6180: ARRAY
6181: PPUSH
6182: LD_VAR 0 5
6186: PPUSH
6187: CALL_OW 113
// end ; if GetLives ( personel [ i ] ) < 100 then
6191: LD_VAR 0 19
6195: PUSH
6196: LD_VAR 0 14
6200: ARRAY
6201: PPUSH
6202: CALL_OW 256
6206: PUSH
6207: LD_INT 100
6209: LESS
6210: IFFALSE 6234
// personel = personel diff personel [ i ] ;
6212: LD_ADDR_VAR 0 19
6216: PUSH
6217: LD_VAR 0 19
6221: PUSH
6222: LD_VAR 0 19
6226: PUSH
6227: LD_VAR 0 14
6231: ARRAY
6232: DIFF
6233: ST_TO_ADDR
// end ;
6234: GO 6067
6236: POP
6237: POP
// for i := 1 to vehicles do
6238: LD_ADDR_VAR 0 14
6242: PUSH
6243: DOUBLE
6244: LD_INT 1
6246: DEC
6247: ST_TO_ADDR
6248: LD_VAR 0 25
6252: PUSH
6253: FOR_TO
6254: IFFALSE 6616
// begin if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
6256: LD_VAR 0 25
6260: PUSH
6261: LD_VAR 0 14
6265: ARRAY
6266: PUSH
6267: LD_INT 1
6269: ARRAY
6270: PPUSH
6271: CALL_OW 256
6275: PUSH
6276: LD_INT 1000
6278: EQUAL
6279: IFFALSE 6443
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
6281: LD_VAR 0 25
6285: PUSH
6286: LD_VAR 0 14
6290: ARRAY
6291: PUSH
6292: LD_INT 1
6294: ARRAY
6295: PPUSH
6296: CALL_OW 263
6300: PUSH
6301: LD_INT 1
6303: EQUAL
6304: IFFALSE 6383
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) and IsOK ( vehicles [ i ] [ 2 ] ) then
6306: LD_VAR 0 25
6310: PUSH
6311: LD_VAR 0 14
6315: ARRAY
6316: PUSH
6317: LD_INT 2
6319: ARRAY
6320: PPUSH
6321: CALL_OW 310
6325: NOT
6326: PUSH
6327: LD_VAR 0 25
6331: PUSH
6332: LD_VAR 0 14
6336: ARRAY
6337: PUSH
6338: LD_INT 2
6340: ARRAY
6341: PPUSH
6342: CALL_OW 302
6346: AND
6347: IFFALSE 6383
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
6349: LD_VAR 0 25
6353: PUSH
6354: LD_VAR 0 14
6358: ARRAY
6359: PUSH
6360: LD_INT 2
6362: ARRAY
6363: PPUSH
6364: LD_VAR 0 25
6368: PUSH
6369: LD_VAR 0 14
6373: ARRAY
6374: PUSH
6375: LD_INT 1
6377: ARRAY
6378: PPUSH
6379: CALL_OW 120
// if offensiveUnits < vehiclesToAttackAmount then
6383: LD_VAR 0 27
6387: PUSH
6388: LD_VAR 0 10
6392: LESS
6393: IFFALSE 6419
// SetTag ( vehicles [ i ] [ 1 ] , 2 ) else
6395: LD_VAR 0 25
6399: PUSH
6400: LD_VAR 0 14
6404: ARRAY
6405: PUSH
6406: LD_INT 1
6408: ARRAY
6409: PPUSH
6410: LD_INT 2
6412: PPUSH
6413: CALL_OW 109
6417: GO 6441
// SetTag ( vehicles [ i ] [ 1 ] , 3 ) ;
6419: LD_VAR 0 25
6423: PUSH
6424: LD_VAR 0 14
6428: ARRAY
6429: PUSH
6430: LD_INT 1
6432: ARRAY
6433: PPUSH
6434: LD_INT 3
6436: PPUSH
6437: CALL_OW 109
// end else
6441: GO 6564
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 and GetLives ( vehicles [ i ] [ 1 ] ) > 250 and GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
6443: LD_VAR 0 25
6447: PUSH
6448: LD_VAR 0 14
6452: ARRAY
6453: PUSH
6454: LD_INT 1
6456: ARRAY
6457: PPUSH
6458: CALL_OW 256
6462: PUSH
6463: LD_INT 650
6465: LESSEQUAL
6466: PUSH
6467: LD_VAR 0 25
6471: PUSH
6472: LD_VAR 0 14
6476: ARRAY
6477: PUSH
6478: LD_INT 1
6480: ARRAY
6481: PPUSH
6482: CALL_OW 256
6486: PUSH
6487: LD_INT 250
6489: GREATER
6490: AND
6491: PUSH
6492: LD_VAR 0 25
6496: PUSH
6497: LD_VAR 0 14
6501: ARRAY
6502: PUSH
6503: LD_INT 1
6505: ARRAY
6506: PPUSH
6507: CALL_OW 263
6511: PUSH
6512: LD_INT 1
6514: EQUAL
6515: AND
6516: IFFALSE 6564
// begin SetTag ( vehicles [ i ] [ 1 ] , 0 ) ;
6518: LD_VAR 0 25
6522: PUSH
6523: LD_VAR 0 14
6527: ARRAY
6528: PUSH
6529: LD_INT 1
6531: ARRAY
6532: PPUSH
6533: LD_INT 0
6535: PPUSH
6536: CALL_OW 109
// ComMoveToArea ( vehicles [ i ] [ 1 ] , repairArea ) ;
6540: LD_VAR 0 25
6544: PUSH
6545: LD_VAR 0 14
6549: ARRAY
6550: PUSH
6551: LD_INT 1
6553: ARRAY
6554: PPUSH
6555: LD_VAR 0 6
6559: PPUSH
6560: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
6564: LD_VAR 0 25
6568: PUSH
6569: LD_VAR 0 14
6573: ARRAY
6574: PUSH
6575: LD_INT 1
6577: ARRAY
6578: PPUSH
6579: CALL_OW 256
6583: PUSH
6584: LD_INT 250
6586: LESS
6587: IFFALSE 6614
// begin vehicles = vehicles diff [ vehicles [ i ] ] ;
6589: LD_ADDR_VAR 0 25
6593: PUSH
6594: LD_VAR 0 25
6598: PUSH
6599: LD_VAR 0 25
6603: PUSH
6604: LD_VAR 0 14
6608: ARRAY
6609: PUSH
6610: EMPTY
6611: LIST
6612: DIFF
6613: ST_TO_ADDR
// end ; end ;
6614: GO 6253
6616: POP
6617: POP
// for i := 1 to personel do
6618: LD_ADDR_VAR 0 14
6622: PUSH
6623: DOUBLE
6624: LD_INT 1
6626: DEC
6627: ST_TO_ADDR
6628: LD_VAR 0 19
6632: PUSH
6633: FOR_TO
6634: IFFALSE 6685
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
6636: LD_ADDR_VAR 0 20
6640: PUSH
6641: LD_VAR 0 20
6645: PUSH
6646: LD_VAR 0 19
6650: PUSH
6651: LD_VAR 0 14
6655: ARRAY
6656: PPUSH
6657: LD_INT 25
6659: PUSH
6660: LD_INT 1
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: LD_INT 50
6669: PUSH
6670: EMPTY
6671: LIST
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PPUSH
6677: CALL_OW 72
6681: ADD
6682: ST_TO_ADDR
6683: GO 6633
6685: POP
6686: POP
// if soldiers and UnitFilter ( bunkers , [ f_empty ] ) then
6687: LD_VAR 0 20
6691: PUSH
6692: LD_VAR 0 42
6696: PPUSH
6697: LD_INT 58
6699: PUSH
6700: EMPTY
6701: LIST
6702: PPUSH
6703: CALL_OW 72
6707: AND
6708: IFFALSE 6966
// begin for i := 1 to soldiers do
6710: LD_ADDR_VAR 0 14
6714: PUSH
6715: DOUBLE
6716: LD_INT 1
6718: DEC
6719: ST_TO_ADDR
6720: LD_VAR 0 20
6724: PUSH
6725: FOR_TO
6726: IFFALSE 6962
// if GetTag ( soldiers [ i ] ) = 1 then
6728: LD_VAR 0 20
6732: PUSH
6733: LD_VAR 0 14
6737: ARRAY
6738: PPUSH
6739: CALL_OW 110
6743: PUSH
6744: LD_INT 1
6746: EQUAL
6747: IFFALSE 6960
// begin if GetTaskList ( soldiers [ i ] ) then
6749: LD_VAR 0 20
6753: PUSH
6754: LD_VAR 0 14
6758: ARRAY
6759: PPUSH
6760: CALL_OW 437
6764: IFFALSE 6853
// if GetTaskList ( soldiers [ i ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( soldiers [ i ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
6766: LD_VAR 0 20
6770: PUSH
6771: LD_VAR 0 14
6775: ARRAY
6776: PPUSH
6777: CALL_OW 437
6781: PUSH
6782: LD_INT 1
6784: ARRAY
6785: PUSH
6786: LD_INT 1
6788: ARRAY
6789: PUSH
6790: LD_STRING e
6792: EQUAL
6793: PUSH
6794: LD_VAR 0 20
6798: PUSH
6799: LD_VAR 0 14
6803: ARRAY
6804: PPUSH
6805: CALL_OW 437
6809: PUSH
6810: LD_INT 1
6812: ARRAY
6813: PUSH
6814: LD_INT 4
6816: ARRAY
6817: PPUSH
6818: CALL_OW 266
6822: PUSH
6823: LD_INT 4
6825: PUSH
6826: LD_INT 5
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: IN
6833: AND
6834: IFFALSE 6853
// SetTaskList ( soldiers [ i ] , [ ] ) ;
6836: LD_VAR 0 20
6840: PUSH
6841: LD_VAR 0 14
6845: ARRAY
6846: PPUSH
6847: EMPTY
6848: PPUSH
6849: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
6853: LD_ADDR_VAR 0 49
6857: PUSH
6858: LD_VAR 0 42
6862: PPUSH
6863: LD_INT 3
6865: PUSH
6866: LD_INT 59
6868: PUSH
6869: EMPTY
6870: LIST
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PPUSH
6876: CALL_OW 72
6880: PUSH
6881: FOR_IN
6882: IFFALSE 6958
// if not HasTask ( soldiers [ i ] ) and not GetBType ( IsInUnit ( soldiers [ i ] ) ) in [ b_breastwork , b_bunker ] then
6884: LD_VAR 0 20
6888: PUSH
6889: LD_VAR 0 14
6893: ARRAY
6894: PPUSH
6895: CALL_OW 314
6899: NOT
6900: PUSH
6901: LD_VAR 0 20
6905: PUSH
6906: LD_VAR 0 14
6910: ARRAY
6911: PPUSH
6912: CALL_OW 310
6916: PPUSH
6917: CALL_OW 266
6921: PUSH
6922: LD_INT 31
6924: PUSH
6925: LD_INT 32
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: IN
6932: NOT
6933: AND
6934: IFFALSE 6956
// ComEnterUnit ( soldiers [ i ] , emptyBunkers ) ;
6936: LD_VAR 0 20
6940: PUSH
6941: LD_VAR 0 14
6945: ARRAY
6946: PPUSH
6947: LD_VAR 0 49
6951: PPUSH
6952: CALL_OW 120
6956: GO 6881
6958: POP
6959: POP
// end ;
6960: GO 6725
6962: POP
6963: POP
// end else
6964: GO 7138
// if soldiers and barracks then
6966: LD_VAR 0 20
6970: PUSH
6971: LD_VAR 0 43
6975: AND
6976: IFFALSE 7098
// begin for i := 1 to soldiers do
6978: LD_ADDR_VAR 0 14
6982: PUSH
6983: DOUBLE
6984: LD_INT 1
6986: DEC
6987: ST_TO_ADDR
6988: LD_VAR 0 20
6992: PUSH
6993: FOR_TO
6994: IFFALSE 7094
// if GetTag ( soldiers [ i ] ) = 1 and UnitFilter ( soldiers [ i ] , [ f_outside ] ) and not HasTask ( soldiers [ i ] ) then
6996: LD_VAR 0 20
7000: PUSH
7001: LD_VAR 0 14
7005: ARRAY
7006: PPUSH
7007: CALL_OW 110
7011: PUSH
7012: LD_INT 1
7014: EQUAL
7015: PUSH
7016: LD_VAR 0 20
7020: PUSH
7021: LD_VAR 0 14
7025: ARRAY
7026: PPUSH
7027: LD_INT 56
7029: PUSH
7030: EMPTY
7031: LIST
7032: PPUSH
7033: CALL_OW 72
7037: AND
7038: PUSH
7039: LD_VAR 0 20
7043: PUSH
7044: LD_VAR 0 14
7048: ARRAY
7049: PPUSH
7050: CALL_OW 314
7054: NOT
7055: AND
7056: IFFALSE 7092
// ComEnterUnit ( soldiers [ i ] , barracks [ rand ( 1 , barracks ) ] ) ;
7058: LD_VAR 0 20
7062: PUSH
7063: LD_VAR 0 14
7067: ARRAY
7068: PPUSH
7069: LD_VAR 0 43
7073: PUSH
7074: LD_INT 1
7076: PPUSH
7077: LD_VAR 0 43
7081: PPUSH
7082: CALL_OW 12
7086: ARRAY
7087: PPUSH
7088: CALL_OW 120
7092: GO 6993
7094: POP
7095: POP
// end else
7096: GO 7138
// for i := 1 to soldiers do
7098: LD_ADDR_VAR 0 14
7102: PUSH
7103: DOUBLE
7104: LD_INT 1
7106: DEC
7107: ST_TO_ADDR
7108: LD_VAR 0 20
7112: PUSH
7113: FOR_TO
7114: IFFALSE 7136
// SetTag ( soldiers [ i ] , 3 ) ;
7116: LD_VAR 0 20
7120: PUSH
7121: LD_VAR 0 14
7125: ARRAY
7126: PPUSH
7127: LD_INT 3
7129: PPUSH
7130: CALL_OW 109
7134: GO 7113
7136: POP
7137: POP
// for i := 1 to personel do
7138: LD_ADDR_VAR 0 14
7142: PUSH
7143: DOUBLE
7144: LD_INT 1
7146: DEC
7147: ST_TO_ADDR
7148: LD_VAR 0 19
7152: PUSH
7153: FOR_TO
7154: IFFALSE 7195
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
7156: LD_ADDR_VAR 0 21
7160: PUSH
7161: LD_VAR 0 21
7165: PUSH
7166: LD_VAR 0 19
7170: PUSH
7171: LD_VAR 0 14
7175: ARRAY
7176: PPUSH
7177: LD_INT 25
7179: PUSH
7180: LD_INT 2
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PPUSH
7187: CALL_OW 72
7191: ADD
7192: ST_TO_ADDR
7193: GO 7153
7195: POP
7196: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
7197: LD_VAR 0 21
7201: PUSH
7202: LD_VAR 0 4
7206: PPUSH
7207: LD_INT 22
7209: PUSH
7210: LD_VAR 0 1
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PUSH
7219: LD_INT 21
7221: PUSH
7222: LD_INT 3
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: LD_INT 3
7231: PUSH
7232: LD_INT 24
7234: PUSH
7235: LD_INT 1000
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: LIST
7250: PPUSH
7251: CALL_OW 70
7255: AND
7256: IFFALSE 7484
// begin for i := 1 to engineers do
7258: LD_ADDR_VAR 0 14
7262: PUSH
7263: DOUBLE
7264: LD_INT 1
7266: DEC
7267: ST_TO_ADDR
7268: LD_VAR 0 21
7272: PUSH
7273: FOR_TO
7274: IFFALSE 7480
// if GetTag ( engineers [ i ] ) = 1 then
7276: LD_VAR 0 21
7280: PUSH
7281: LD_VAR 0 14
7285: ARRAY
7286: PPUSH
7287: CALL_OW 110
7291: PUSH
7292: LD_INT 1
7294: EQUAL
7295: IFFALSE 7478
// begin if GetTaskList ( engineers [ i ] ) then
7297: LD_VAR 0 21
7301: PUSH
7302: LD_VAR 0 14
7306: ARRAY
7307: PPUSH
7308: CALL_OW 437
7312: IFFALSE 7360
// if GetTaskList ( engineers [ i ] ) [ 1 ] [ 1 ] = e then
7314: LD_VAR 0 21
7318: PUSH
7319: LD_VAR 0 14
7323: ARRAY
7324: PPUSH
7325: CALL_OW 437
7329: PUSH
7330: LD_INT 1
7332: ARRAY
7333: PUSH
7334: LD_INT 1
7336: ARRAY
7337: PUSH
7338: LD_STRING e
7340: EQUAL
7341: IFFALSE 7360
// SetTaskList ( engineers [ i ] , [ ] ) ;
7343: LD_VAR 0 21
7347: PUSH
7348: LD_VAR 0 14
7352: ARRAY
7353: PPUSH
7354: EMPTY
7355: PPUSH
7356: CALL_OW 446
// if IsInUnit ( engineers [ i ] ) then
7360: LD_VAR 0 21
7364: PUSH
7365: LD_VAR 0 14
7369: ARRAY
7370: PPUSH
7371: CALL_OW 310
7375: IFFALSE 7392
// ComExitBuilding ( engineers [ i ] ) ;
7377: LD_VAR 0 21
7381: PUSH
7382: LD_VAR 0 14
7386: ARRAY
7387: PPUSH
7388: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7392: LD_ADDR_VAR 0 47
7396: PUSH
7397: LD_VAR 0 4
7401: PPUSH
7402: LD_INT 22
7404: PUSH
7405: LD_VAR 0 1
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: LD_INT 21
7416: PUSH
7417: LD_INT 3
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: PUSH
7424: LD_INT 3
7426: PUSH
7427: LD_INT 24
7429: PUSH
7430: LD_INT 1000
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: PPUSH
7446: CALL_OW 70
7450: PUSH
7451: FOR_IN
7452: IFFALSE 7476
// AddComRepairBuilding ( engineers [ i ] , damageBuilding ) ;
7454: LD_VAR 0 21
7458: PUSH
7459: LD_VAR 0 14
7463: ARRAY
7464: PPUSH
7465: LD_VAR 0 47
7469: PPUSH
7470: CALL_OW 190
7474: GO 7451
7476: POP
7477: POP
// end ;
7478: GO 7273
7480: POP
7481: POP
// end else
7482: GO 7791
// if engineers and destroyedBuildings then
7484: LD_VAR 0 21
7488: PUSH
7489: LD_VAR 0 35
7493: AND
7494: IFFALSE 7670
// begin for i := 1 to engineers do
7496: LD_ADDR_VAR 0 14
7500: PUSH
7501: DOUBLE
7502: LD_INT 1
7504: DEC
7505: ST_TO_ADDR
7506: LD_VAR 0 21
7510: PUSH
7511: FOR_TO
7512: IFFALSE 7666
// if GetTag ( engineers [ i ] ) = 1 then
7514: LD_VAR 0 21
7518: PUSH
7519: LD_VAR 0 14
7523: ARRAY
7524: PPUSH
7525: CALL_OW 110
7529: PUSH
7530: LD_INT 1
7532: EQUAL
7533: IFFALSE 7664
// begin if IsInUnit ( engineers [ i ] ) then
7535: LD_VAR 0 21
7539: PUSH
7540: LD_VAR 0 14
7544: ARRAY
7545: PPUSH
7546: CALL_OW 310
7550: IFFALSE 7567
// ComExitBuilding ( engineers [ i ] ) ;
7552: LD_VAR 0 21
7556: PUSH
7557: LD_VAR 0 14
7561: ARRAY
7562: PPUSH
7563: CALL_OW 122
// for j := 1 to destroyedBuildings / 4 do
7567: LD_ADDR_VAR 0 15
7571: PUSH
7572: DOUBLE
7573: LD_INT 1
7575: DEC
7576: ST_TO_ADDR
7577: LD_VAR 0 35
7581: PUSH
7582: LD_INT 4
7584: DIVREAL
7585: PUSH
7586: FOR_TO
7587: IFFALSE 7662
// AddComBuild ( engineers [ i ] , destroyedBuildings [ j ] , destroyedBuildings [ j + 1 ] , destroyedBuildings [ j + 2 ] , destroyedBuildings [ j + 3 ] ) ;
7589: LD_VAR 0 21
7593: PUSH
7594: LD_VAR 0 14
7598: ARRAY
7599: PPUSH
7600: LD_VAR 0 35
7604: PUSH
7605: LD_VAR 0 15
7609: ARRAY
7610: PPUSH
7611: LD_VAR 0 35
7615: PUSH
7616: LD_VAR 0 15
7620: PUSH
7621: LD_INT 1
7623: PLUS
7624: ARRAY
7625: PPUSH
7626: LD_VAR 0 35
7630: PUSH
7631: LD_VAR 0 15
7635: PUSH
7636: LD_INT 2
7638: PLUS
7639: ARRAY
7640: PPUSH
7641: LD_VAR 0 35
7645: PUSH
7646: LD_VAR 0 15
7650: PUSH
7651: LD_INT 3
7653: PLUS
7654: ARRAY
7655: PPUSH
7656: CALL_OW 205
7660: GO 7586
7662: POP
7663: POP
// end ;
7664: GO 7511
7666: POP
7667: POP
// end else
7668: GO 7791
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot and not destroyedBuildings then
7670: LD_VAR 0 21
7674: PUSH
7675: LD_VAR 0 21
7679: PPUSH
7680: LD_INT 56
7682: PUSH
7683: EMPTY
7684: LIST
7685: PPUSH
7686: CALL_OW 72
7690: AND
7691: PUSH
7692: LD_VAR 0 39
7696: AND
7697: PUSH
7698: LD_VAR 0 35
7702: NOT
7703: AND
7704: IFFALSE 7791
// for i := 1 to engineers do
7706: LD_ADDR_VAR 0 14
7710: PUSH
7711: DOUBLE
7712: LD_INT 1
7714: DEC
7715: ST_TO_ADDR
7716: LD_VAR 0 21
7720: PUSH
7721: FOR_TO
7722: IFFALSE 7789
// begin if GetTag ( engineers [ i ] ) = 1 and not HasTask ( engineers [ i ] ) then
7724: LD_VAR 0 21
7728: PUSH
7729: LD_VAR 0 14
7733: ARRAY
7734: PPUSH
7735: CALL_OW 110
7739: PUSH
7740: LD_INT 1
7742: EQUAL
7743: PUSH
7744: LD_VAR 0 21
7748: PUSH
7749: LD_VAR 0 14
7753: ARRAY
7754: PPUSH
7755: CALL_OW 314
7759: NOT
7760: AND
7761: IFFALSE 7787
// ComEnterUnit ( engineers [ i ] , depot [ 1 ] ) ;
7763: LD_VAR 0 21
7767: PUSH
7768: LD_VAR 0 14
7772: ARRAY
7773: PPUSH
7774: LD_VAR 0 39
7778: PUSH
7779: LD_INT 1
7781: ARRAY
7782: PPUSH
7783: CALL_OW 120
// end ;
7787: GO 7721
7789: POP
7790: POP
// for i := 1 to personel do
7791: LD_ADDR_VAR 0 14
7795: PUSH
7796: DOUBLE
7797: LD_INT 1
7799: DEC
7800: ST_TO_ADDR
7801: LD_VAR 0 19
7805: PUSH
7806: FOR_TO
7807: IFFALSE 7848
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
7809: LD_ADDR_VAR 0 22
7813: PUSH
7814: LD_VAR 0 22
7818: PUSH
7819: LD_VAR 0 19
7823: PUSH
7824: LD_VAR 0 14
7828: ARRAY
7829: PPUSH
7830: LD_INT 25
7832: PUSH
7833: LD_INT 3
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PPUSH
7840: CALL_OW 72
7844: ADD
7845: ST_TO_ADDR
7846: GO 7806
7848: POP
7849: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
7850: LD_VAR 0 22
7854: PUSH
7855: LD_VAR 0 4
7859: PPUSH
7860: LD_INT 22
7862: PUSH
7863: LD_VAR 0 1
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: LD_INT 21
7874: PUSH
7875: LD_INT 2
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: PUSH
7882: LD_INT 3
7884: PUSH
7885: LD_INT 24
7887: PUSH
7888: LD_INT 1000
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: LIST
7903: PPUSH
7904: CALL_OW 70
7908: AND
7909: IFFALSE 8489
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7911: LD_ADDR_VAR 0 48
7915: PUSH
7916: LD_VAR 0 4
7920: PPUSH
7921: LD_INT 22
7923: PUSH
7924: LD_VAR 0 1
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PUSH
7933: LD_INT 21
7935: PUSH
7936: LD_INT 2
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: PUSH
7943: LD_INT 3
7945: PUSH
7946: LD_INT 24
7948: PUSH
7949: LD_INT 1000
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: LIST
7964: PPUSH
7965: CALL_OW 70
7969: PUSH
7970: FOR_IN
7971: IFFALSE 8485
// begin if GetDistUnitArea ( damageUnit , repairArea ) <= 5 then
7973: LD_VAR 0 48
7977: PPUSH
7978: LD_VAR 0 6
7982: PPUSH
7983: CALL_OW 299
7987: PUSH
7988: LD_INT 5
7990: LESSEQUAL
7991: IFFALSE 8080
// for i := 1 to vehicles do
7993: LD_ADDR_VAR 0 14
7997: PUSH
7998: DOUBLE
7999: LD_INT 1
8001: DEC
8002: ST_TO_ADDR
8003: LD_VAR 0 25
8007: PUSH
8008: FOR_TO
8009: IFFALSE 8078
// if vehicles [ i ] [ 1 ] = damageUnit then
8011: LD_VAR 0 25
8015: PUSH
8016: LD_VAR 0 14
8020: ARRAY
8021: PUSH
8022: LD_INT 1
8024: ARRAY
8025: PUSH
8026: LD_VAR 0 48
8030: EQUAL
8031: IFFALSE 8076
// begin ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
8033: LD_VAR 0 25
8037: PUSH
8038: LD_VAR 0 14
8042: ARRAY
8043: PUSH
8044: LD_INT 2
8046: ARRAY
8047: PPUSH
8048: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
8052: LD_VAR 0 25
8056: PUSH
8057: LD_VAR 0 14
8061: ARRAY
8062: PUSH
8063: LD_INT 2
8065: ARRAY
8066: PPUSH
8067: LD_VAR 0 48
8071: PPUSH
8072: CALL_OW 189
// end ;
8076: GO 8008
8078: POP
8079: POP
// for i := 1 to mechanics do
8080: LD_ADDR_VAR 0 14
8084: PUSH
8085: DOUBLE
8086: LD_INT 1
8088: DEC
8089: ST_TO_ADDR
8090: LD_VAR 0 22
8094: PUSH
8095: FOR_TO
8096: IFFALSE 8264
// if GetTag ( mechanics [ i ] ) = 1 and IsInUnit ( mechanics [ i ] ) in [ b_workshop , b_factory ] then
8098: LD_VAR 0 22
8102: PUSH
8103: LD_VAR 0 14
8107: ARRAY
8108: PPUSH
8109: CALL_OW 110
8113: PUSH
8114: LD_INT 1
8116: EQUAL
8117: PUSH
8118: LD_VAR 0 22
8122: PUSH
8123: LD_VAR 0 14
8127: ARRAY
8128: PPUSH
8129: CALL_OW 310
8133: PUSH
8134: LD_INT 2
8136: PUSH
8137: LD_INT 3
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: IN
8144: AND
8145: IFFALSE 8262
// begin if GetTaskList ( mechanics [ i ] ) then
8147: LD_VAR 0 22
8151: PUSH
8152: LD_VAR 0 14
8156: ARRAY
8157: PPUSH
8158: CALL_OW 437
8162: IFFALSE 8210
// if GetTaskList ( mechanics [ i ] ) [ 1 ] [ 1 ] = e then
8164: LD_VAR 0 22
8168: PUSH
8169: LD_VAR 0 14
8173: ARRAY
8174: PPUSH
8175: CALL_OW 437
8179: PUSH
8180: LD_INT 1
8182: ARRAY
8183: PUSH
8184: LD_INT 1
8186: ARRAY
8187: PUSH
8188: LD_STRING e
8190: EQUAL
8191: IFFALSE 8210
// SetTaskList ( mechanics [ i ] , [ ] ) ;
8193: LD_VAR 0 22
8197: PUSH
8198: LD_VAR 0 14
8202: ARRAY
8203: PPUSH
8204: EMPTY
8205: PPUSH
8206: CALL_OW 446
// if IsInUnit ( mechanics [ i ] ) then
8210: LD_VAR 0 22
8214: PUSH
8215: LD_VAR 0 14
8219: ARRAY
8220: PPUSH
8221: CALL_OW 310
8225: IFFALSE 8242
// ComExitBuilding ( mechanics [ i ] ) ;
8227: LD_VAR 0 22
8231: PUSH
8232: LD_VAR 0 14
8236: ARRAY
8237: PPUSH
8238: CALL_OW 122
// AddComRepairVehicle ( mechanics [ i ] , damageUnit ) ;
8242: LD_VAR 0 22
8246: PUSH
8247: LD_VAR 0 14
8251: ARRAY
8252: PPUSH
8253: LD_VAR 0 48
8257: PPUSH
8258: CALL_OW 189
// end ;
8262: GO 8095
8264: POP
8265: POP
// if GetLives ( damageUnit ) < 250 and IsInArea ( damageUnit , baseArea ) then
8266: LD_VAR 0 48
8270: PPUSH
8271: CALL_OW 256
8275: PUSH
8276: LD_INT 250
8278: LESS
8279: PUSH
8280: LD_VAR 0 48
8284: PPUSH
8285: LD_VAR 0 4
8289: PPUSH
8290: CALL_OW 308
8294: AND
8295: IFFALSE 8483
// for i := 1 to personel do
8297: LD_ADDR_VAR 0 14
8301: PUSH
8302: DOUBLE
8303: LD_INT 1
8305: DEC
8306: ST_TO_ADDR
8307: LD_VAR 0 19
8311: PUSH
8312: FOR_TO
8313: IFFALSE 8481
// if GetTag ( mechanics [ i ] ) = 1 and IsInUnit ( mechanics [ i ] ) in [ b_workshop , b_factory ] then
8315: LD_VAR 0 22
8319: PUSH
8320: LD_VAR 0 14
8324: ARRAY
8325: PPUSH
8326: CALL_OW 110
8330: PUSH
8331: LD_INT 1
8333: EQUAL
8334: PUSH
8335: LD_VAR 0 22
8339: PUSH
8340: LD_VAR 0 14
8344: ARRAY
8345: PPUSH
8346: CALL_OW 310
8350: PUSH
8351: LD_INT 2
8353: PUSH
8354: LD_INT 3
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: IN
8361: AND
8362: IFFALSE 8479
// begin if GetTaskList ( mechanics [ i ] ) then
8364: LD_VAR 0 22
8368: PUSH
8369: LD_VAR 0 14
8373: ARRAY
8374: PPUSH
8375: CALL_OW 437
8379: IFFALSE 8427
// if GetTaskList ( mechanics [ i ] ) [ 1 ] [ 1 ] = e then
8381: LD_VAR 0 22
8385: PUSH
8386: LD_VAR 0 14
8390: ARRAY
8391: PPUSH
8392: CALL_OW 437
8396: PUSH
8397: LD_INT 1
8399: ARRAY
8400: PUSH
8401: LD_INT 1
8403: ARRAY
8404: PUSH
8405: LD_STRING e
8407: EQUAL
8408: IFFALSE 8427
// SetTaskList ( mechanics [ i ] , [ ] ) ;
8410: LD_VAR 0 22
8414: PUSH
8415: LD_VAR 0 14
8419: ARRAY
8420: PPUSH
8421: EMPTY
8422: PPUSH
8423: CALL_OW 446
// if IsInUnit ( mechanics [ i ] ) then
8427: LD_VAR 0 22
8431: PUSH
8432: LD_VAR 0 14
8436: ARRAY
8437: PPUSH
8438: CALL_OW 310
8442: IFFALSE 8459
// ComExitBuilding ( mechanics [ i ] ) ;
8444: LD_VAR 0 22
8448: PUSH
8449: LD_VAR 0 14
8453: ARRAY
8454: PPUSH
8455: CALL_OW 122
// AddComRepairVehicle ( mechanics [ i ] , damageUnit ) ;
8459: LD_VAR 0 22
8463: PUSH
8464: LD_VAR 0 14
8468: ARRAY
8469: PPUSH
8470: LD_VAR 0 48
8474: PPUSH
8475: CALL_OW 189
// end ;
8479: GO 8312
8481: POP
8482: POP
// end ;
8483: GO 7970
8485: POP
8486: POP
// end else
8487: GO 8786
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and UnitFilter ( controlTowers , [ f_empty ] ) then
8489: LD_VAR 0 22
8493: PUSH
8494: LD_VAR 0 22
8498: PPUSH
8499: LD_INT 56
8501: PUSH
8502: EMPTY
8503: LIST
8504: PPUSH
8505: CALL_OW 72
8509: AND
8510: PUSH
8511: LD_VAR 0 44
8515: PPUSH
8516: LD_INT 58
8518: PUSH
8519: EMPTY
8520: LIST
8521: PPUSH
8522: CALL_OW 72
8526: AND
8527: IFFALSE 8644
// begin for i := 1 to mechanics do
8529: LD_ADDR_VAR 0 14
8533: PUSH
8534: DOUBLE
8535: LD_INT 1
8537: DEC
8538: ST_TO_ADDR
8539: LD_VAR 0 22
8543: PUSH
8544: FOR_TO
8545: IFFALSE 8640
// if GetTag ( mechanics [ i ] ) = 1 and not HasTask ( mechanics [ i ] ) and not IsInUnit ( mechanics [ i ] ) then
8547: LD_VAR 0 22
8551: PUSH
8552: LD_VAR 0 14
8556: ARRAY
8557: PPUSH
8558: CALL_OW 110
8562: PUSH
8563: LD_INT 1
8565: EQUAL
8566: PUSH
8567: LD_VAR 0 22
8571: PUSH
8572: LD_VAR 0 14
8576: ARRAY
8577: PPUSH
8578: CALL_OW 314
8582: NOT
8583: AND
8584: PUSH
8585: LD_VAR 0 22
8589: PUSH
8590: LD_VAR 0 14
8594: ARRAY
8595: PPUSH
8596: CALL_OW 310
8600: NOT
8601: AND
8602: IFFALSE 8638
// ComEnterUnit ( mechanics [ i ] , controlTowers [ rand ( 1 , controlTowers ) ] ) ;
8604: LD_VAR 0 22
8608: PUSH
8609: LD_VAR 0 14
8613: ARRAY
8614: PPUSH
8615: LD_VAR 0 44
8619: PUSH
8620: LD_INT 1
8622: PPUSH
8623: LD_VAR 0 44
8627: PPUSH
8628: CALL_OW 12
8632: ARRAY
8633: PPUSH
8634: CALL_OW 120
8638: GO 8544
8640: POP
8641: POP
// end else
8642: GO 8786
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
8644: LD_VAR 0 22
8648: PUSH
8649: LD_VAR 0 22
8653: PPUSH
8654: LD_INT 56
8656: PUSH
8657: EMPTY
8658: LIST
8659: PPUSH
8660: CALL_OW 72
8664: AND
8665: PUSH
8666: LD_VAR 0 40
8670: AND
8671: IFFALSE 8786
// for i := 1 to mechanics do
8673: LD_ADDR_VAR 0 14
8677: PUSH
8678: DOUBLE
8679: LD_INT 1
8681: DEC
8682: ST_TO_ADDR
8683: LD_VAR 0 22
8687: PUSH
8688: FOR_TO
8689: IFFALSE 8784
// if GetTag ( mechanics [ i ] ) = 1 and not HasTask ( mechanics [ i ] ) and not IsInUnit ( mechanics [ i ] ) then
8691: LD_VAR 0 22
8695: PUSH
8696: LD_VAR 0 14
8700: ARRAY
8701: PPUSH
8702: CALL_OW 110
8706: PUSH
8707: LD_INT 1
8709: EQUAL
8710: PUSH
8711: LD_VAR 0 22
8715: PUSH
8716: LD_VAR 0 14
8720: ARRAY
8721: PPUSH
8722: CALL_OW 314
8726: NOT
8727: AND
8728: PUSH
8729: LD_VAR 0 22
8733: PUSH
8734: LD_VAR 0 14
8738: ARRAY
8739: PPUSH
8740: CALL_OW 310
8744: NOT
8745: AND
8746: IFFALSE 8782
// ComEnterUnit ( mechanics [ i ] , factory [ rand ( 1 , factory ) ] ) ;
8748: LD_VAR 0 22
8752: PUSH
8753: LD_VAR 0 14
8757: ARRAY
8758: PPUSH
8759: LD_VAR 0 40
8763: PUSH
8764: LD_INT 1
8766: PPUSH
8767: LD_VAR 0 40
8771: PPUSH
8772: CALL_OW 12
8776: ARRAY
8777: PPUSH
8778: CALL_OW 120
8782: GO 8688
8784: POP
8785: POP
// for i := 1 to personel do
8786: LD_ADDR_VAR 0 14
8790: PUSH
8791: DOUBLE
8792: LD_INT 1
8794: DEC
8795: ST_TO_ADDR
8796: LD_VAR 0 19
8800: PUSH
8801: FOR_TO
8802: IFFALSE 8843
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
8804: LD_ADDR_VAR 0 23
8808: PUSH
8809: LD_VAR 0 23
8813: PUSH
8814: LD_VAR 0 19
8818: PUSH
8819: LD_VAR 0 14
8823: ARRAY
8824: PPUSH
8825: LD_INT 25
8827: PUSH
8828: LD_INT 4
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PPUSH
8835: CALL_OW 72
8839: ADD
8840: ST_TO_ADDR
8841: GO 8801
8843: POP
8844: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
8845: LD_VAR 0 23
8849: PUSH
8850: LD_VAR 0 4
8854: PPUSH
8855: LD_INT 22
8857: PUSH
8858: LD_VAR 0 1
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PUSH
8867: LD_INT 21
8869: PUSH
8870: LD_INT 1
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PUSH
8877: LD_INT 3
8879: PUSH
8880: LD_INT 24
8882: PUSH
8883: LD_INT 1000
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: LIST
8898: PPUSH
8899: CALL_OW 70
8903: AND
8904: IFFALSE 9341
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
8906: LD_ADDR_VAR 0 48
8910: PUSH
8911: LD_VAR 0 4
8915: PPUSH
8916: LD_INT 22
8918: PUSH
8919: LD_VAR 0 1
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: PUSH
8928: LD_INT 21
8930: PUSH
8931: LD_INT 1
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: PUSH
8938: LD_INT 3
8940: PUSH
8941: LD_INT 24
8943: PUSH
8944: LD_INT 1000
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: LIST
8959: PPUSH
8960: CALL_OW 70
8964: PUSH
8965: FOR_IN
8966: IFFALSE 9337
// begin if GetDistUnitArea ( damageUnit , healArea ) <= 5 then
8968: LD_VAR 0 48
8972: PPUSH
8973: LD_VAR 0 5
8977: PPUSH
8978: CALL_OW 299
8982: PUSH
8983: LD_INT 5
8985: LESSEQUAL
8986: IFFALSE 9146
// for i := 1 to scientists do
8988: LD_ADDR_VAR 0 14
8992: PUSH
8993: DOUBLE
8994: LD_INT 1
8996: DEC
8997: ST_TO_ADDR
8998: LD_VAR 0 23
9002: PUSH
9003: FOR_TO
9004: IFFALSE 9144
// if GetTag ( scientists [ i ] ) = 1 then
9006: LD_VAR 0 23
9010: PUSH
9011: LD_VAR 0 14
9015: ARRAY
9016: PPUSH
9017: CALL_OW 110
9021: PUSH
9022: LD_INT 1
9024: EQUAL
9025: IFFALSE 9142
// begin if GetTaskList ( scientists [ i ] ) then
9027: LD_VAR 0 23
9031: PUSH
9032: LD_VAR 0 14
9036: ARRAY
9037: PPUSH
9038: CALL_OW 437
9042: IFFALSE 9090
// if GetTaskList ( scientists [ i ] ) [ 1 ] [ 1 ] = e then
9044: LD_VAR 0 23
9048: PUSH
9049: LD_VAR 0 14
9053: ARRAY
9054: PPUSH
9055: CALL_OW 437
9059: PUSH
9060: LD_INT 1
9062: ARRAY
9063: PUSH
9064: LD_INT 1
9066: ARRAY
9067: PUSH
9068: LD_STRING e
9070: EQUAL
9071: IFFALSE 9090
// SetTaskList ( scientists [ i ] , [ ] ) ;
9073: LD_VAR 0 23
9077: PUSH
9078: LD_VAR 0 14
9082: ARRAY
9083: PPUSH
9084: EMPTY
9085: PPUSH
9086: CALL_OW 446
// if IsInUnit ( scientists [ i ] ) then
9090: LD_VAR 0 23
9094: PUSH
9095: LD_VAR 0 14
9099: ARRAY
9100: PPUSH
9101: CALL_OW 310
9105: IFFALSE 9122
// ComExitBuilding ( scientists [ i ] ) ;
9107: LD_VAR 0 23
9111: PUSH
9112: LD_VAR 0 14
9116: ARRAY
9117: PPUSH
9118: CALL_OW 122
// AddComHeal ( scientists [ i ] , damageUnit ) ;
9122: LD_VAR 0 23
9126: PUSH
9127: LD_VAR 0 14
9131: ARRAY
9132: PPUSH
9133: LD_VAR 0 48
9137: PPUSH
9138: CALL_OW 188
// end ;
9142: GO 9003
9144: POP
9145: POP
// if GetLives ( damageUnit ) < 250 and IsInArea ( damageUnit , baseArea ) then
9146: LD_VAR 0 48
9150: PPUSH
9151: CALL_OW 256
9155: PUSH
9156: LD_INT 250
9158: LESS
9159: PUSH
9160: LD_VAR 0 48
9164: PPUSH
9165: LD_VAR 0 4
9169: PPUSH
9170: CALL_OW 308
9174: AND
9175: IFFALSE 9335
// for i := 1 to scientists do
9177: LD_ADDR_VAR 0 14
9181: PUSH
9182: DOUBLE
9183: LD_INT 1
9185: DEC
9186: ST_TO_ADDR
9187: LD_VAR 0 23
9191: PUSH
9192: FOR_TO
9193: IFFALSE 9333
// if GetTag ( scientists [ i ] ) = 1 then
9195: LD_VAR 0 23
9199: PUSH
9200: LD_VAR 0 14
9204: ARRAY
9205: PPUSH
9206: CALL_OW 110
9210: PUSH
9211: LD_INT 1
9213: EQUAL
9214: IFFALSE 9331
// begin if GetTaskList ( scientists [ i ] ) then
9216: LD_VAR 0 23
9220: PUSH
9221: LD_VAR 0 14
9225: ARRAY
9226: PPUSH
9227: CALL_OW 437
9231: IFFALSE 9279
// if GetTaskList ( scientists [ i ] ) [ 1 ] [ 1 ] = e then
9233: LD_VAR 0 23
9237: PUSH
9238: LD_VAR 0 14
9242: ARRAY
9243: PPUSH
9244: CALL_OW 437
9248: PUSH
9249: LD_INT 1
9251: ARRAY
9252: PUSH
9253: LD_INT 1
9255: ARRAY
9256: PUSH
9257: LD_STRING e
9259: EQUAL
9260: IFFALSE 9279
// SetTaskList ( scientists [ i ] , [ ] ) ;
9262: LD_VAR 0 23
9266: PUSH
9267: LD_VAR 0 14
9271: ARRAY
9272: PPUSH
9273: EMPTY
9274: PPUSH
9275: CALL_OW 446
// if IsInUnit ( scientists [ i ] ) then
9279: LD_VAR 0 23
9283: PUSH
9284: LD_VAR 0 14
9288: ARRAY
9289: PPUSH
9290: CALL_OW 310
9294: IFFALSE 9311
// ComExitBuilding ( scientists [ i ] ) ;
9296: LD_VAR 0 23
9300: PUSH
9301: LD_VAR 0 14
9305: ARRAY
9306: PPUSH
9307: CALL_OW 122
// AddComHeal ( scientists [ i ] , damageUnit ) ;
9311: LD_VAR 0 23
9315: PUSH
9316: LD_VAR 0 14
9320: ARRAY
9321: PPUSH
9322: LD_VAR 0 48
9326: PPUSH
9327: CALL_OW 188
// end ;
9331: GO 9192
9333: POP
9334: POP
// end ;
9335: GO 8965
9337: POP
9338: POP
// end else
9339: GO 9483
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
9341: LD_VAR 0 23
9345: PUSH
9346: LD_VAR 0 23
9350: PPUSH
9351: LD_INT 56
9353: PUSH
9354: EMPTY
9355: LIST
9356: PPUSH
9357: CALL_OW 72
9361: AND
9362: PUSH
9363: LD_VAR 0 41
9367: AND
9368: IFFALSE 9483
// for i := 1 to scientists do
9370: LD_ADDR_VAR 0 14
9374: PUSH
9375: DOUBLE
9376: LD_INT 1
9378: DEC
9379: ST_TO_ADDR
9380: LD_VAR 0 23
9384: PUSH
9385: FOR_TO
9386: IFFALSE 9481
// if GetTag ( scientists [ i ] ) = 1 and not HasTask ( scientists [ i ] ) and not IsInUnit ( scientists [ i ] ) then
9388: LD_VAR 0 23
9392: PUSH
9393: LD_VAR 0 14
9397: ARRAY
9398: PPUSH
9399: CALL_OW 110
9403: PUSH
9404: LD_INT 1
9406: EQUAL
9407: PUSH
9408: LD_VAR 0 23
9412: PUSH
9413: LD_VAR 0 14
9417: ARRAY
9418: PPUSH
9419: CALL_OW 314
9423: NOT
9424: AND
9425: PUSH
9426: LD_VAR 0 23
9430: PUSH
9431: LD_VAR 0 14
9435: ARRAY
9436: PPUSH
9437: CALL_OW 310
9441: NOT
9442: AND
9443: IFFALSE 9479
// ComEnterUnit ( scientists [ i ] , lab [ rand ( 1 , lab ) ] ) ;
9445: LD_VAR 0 23
9449: PUSH
9450: LD_VAR 0 14
9454: ARRAY
9455: PPUSH
9456: LD_VAR 0 41
9460: PUSH
9461: LD_INT 1
9463: PPUSH
9464: LD_VAR 0 41
9468: PPUSH
9469: CALL_OW 12
9473: ARRAY
9474: PPUSH
9475: CALL_OW 120
9479: GO 9385
9481: POP
9482: POP
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , us_bulldozer ] ] ) then
9483: LD_INT 22
9485: PUSH
9486: LD_VAR 0 1
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PUSH
9495: LD_INT 34
9497: PUSH
9498: LD_INT 14
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PPUSH
9509: CALL_OW 69
9513: NOT
9514: IFFALSE 9541
// AddComConstruct ( factory [ 1 ] , us_heavy_tracked , engine_combustion , control_remote , us_bulldozer ) ;
9516: LD_VAR 0 40
9520: PUSH
9521: LD_INT 1
9523: ARRAY
9524: PPUSH
9525: LD_INT 4
9527: PPUSH
9528: LD_INT 1
9530: PPUSH
9531: LD_INT 2
9533: PPUSH
9534: LD_INT 14
9536: PPUSH
9537: CALL_OW 185
// if vehicles < vehiclesAmount and factory then
9541: LD_VAR 0 25
9545: PUSH
9546: LD_VAR 0 8
9550: LESS
9551: PUSH
9552: LD_VAR 0 40
9556: AND
9557: IFFALSE 9805
// begin tmp = vehiclesAmount - vehicles ;
9559: LD_ADDR_VAR 0 16
9563: PUSH
9564: LD_VAR 0 8
9568: PUSH
9569: LD_VAR 0 25
9573: MINUS
9574: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
9575: LD_ADDR_VAR 0 32
9579: PUSH
9580: LD_VAR 0 1
9584: PPUSH
9585: LD_VAR 0 2
9589: PPUSH
9590: CALL 14415 0 2
9594: ST_TO_ADDR
// for i := 1 to tmp do
9595: LD_ADDR_VAR 0 14
9599: PUSH
9600: DOUBLE
9601: LD_INT 1
9603: DEC
9604: ST_TO_ADDR
9605: LD_VAR 0 16
9609: PUSH
9610: FOR_TO
9611: IFFALSE 9801
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
9613: LD_ADDR_VAR 0 16
9617: PUSH
9618: LD_VAR 0 32
9622: PUSH
9623: LD_INT 1
9625: PPUSH
9626: LD_VAR 0 32
9630: PPUSH
9631: CALL_OW 12
9635: ARRAY
9636: ST_TO_ADDR
// if tmp in [ 6 , 34 , 14 , 71 , 47 ] then
9637: LD_VAR 0 16
9641: PUSH
9642: LD_INT 6
9644: PUSH
9645: LD_INT 34
9647: PUSH
9648: LD_INT 14
9650: PUSH
9651: LD_INT 71
9653: PUSH
9654: LD_INT 47
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: IN
9664: IFFALSE 9702
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
9666: LD_ADDR_VAR 0 33
9670: PUSH
9671: LD_INT 4
9673: PUSH
9674: EMPTY
9675: LIST
9676: PUSH
9677: LD_INT 14
9679: PUSH
9680: EMPTY
9681: LIST
9682: PUSH
9683: LD_INT 24
9685: PUSH
9686: EMPTY
9687: LIST
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: LIST
9693: PUSH
9694: LD_VAR 0 2
9698: ARRAY
9699: ST_TO_ADDR
9700: GO 9756
// chassis = [ [ us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
9702: LD_ADDR_VAR 0 33
9706: PUSH
9707: LD_INT 3
9709: PUSH
9710: LD_INT 4
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: PUSH
9717: LD_INT 13
9719: PUSH
9720: LD_INT 14
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: PUSH
9727: LD_INT 21
9729: PUSH
9730: LD_INT 23
9732: PUSH
9733: LD_INT 24
9735: PUSH
9736: LD_INT 22
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: LIST
9749: PUSH
9750: LD_VAR 0 2
9754: ARRAY
9755: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_remote , tmp ) ;
9756: LD_VAR 0 40
9760: PUSH
9761: LD_INT 1
9763: ARRAY
9764: PPUSH
9765: LD_VAR 0 33
9769: PUSH
9770: LD_INT 1
9772: PPUSH
9773: LD_VAR 0 33
9777: PPUSH
9778: CALL_OW 12
9782: ARRAY
9783: PPUSH
9784: LD_INT 1
9786: PPUSH
9787: LD_INT 2
9789: PPUSH
9790: LD_VAR 0 16
9794: PPUSH
9795: CALL_OW 185
// end ;
9799: GO 9610
9801: POP
9802: POP
// end else
9803: GO 9818
// ComCancel ( factory [ 1 ] ) ;
9805: LD_VAR 0 40
9809: PUSH
9810: LD_INT 1
9812: ARRAY
9813: PPUSH
9814: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ] ] ) do
9818: LD_ADDR_VAR 0 24
9822: PUSH
9823: LD_VAR 0 4
9827: PPUSH
9828: LD_INT 22
9830: PUSH
9831: LD_VAR 0 1
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PUSH
9840: LD_INT 21
9842: PUSH
9843: LD_INT 2
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 50
9852: PUSH
9853: EMPTY
9854: LIST
9855: PUSH
9856: LD_INT 3
9858: PUSH
9859: LD_INT 2
9861: PUSH
9862: LD_INT 34
9864: PUSH
9865: LD_INT 12
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PUSH
9872: LD_INT 34
9874: PUSH
9875: LD_INT 51
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PUSH
9882: LD_INT 34
9884: PUSH
9885: LD_INT 32
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: PUSH
9892: LD_INT 34
9894: PUSH
9895: LD_INT 31
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: PPUSH
9919: CALL_OW 70
9923: PUSH
9924: FOR_IN
9925: IFFALSE 10080
// begin vehicleInList = false ;
9927: LD_ADDR_VAR 0 26
9931: PUSH
9932: LD_INT 0
9934: ST_TO_ADDR
// for i := 1 to vehicles do
9935: LD_ADDR_VAR 0 14
9939: PUSH
9940: DOUBLE
9941: LD_INT 1
9943: DEC
9944: ST_TO_ADDR
9945: LD_VAR 0 25
9949: PUSH
9950: FOR_TO
9951: IFFALSE 9981
// if vehicle in vehicles [ i ] then
9953: LD_VAR 0 24
9957: PUSH
9958: LD_VAR 0 25
9962: PUSH
9963: LD_VAR 0 14
9967: ARRAY
9968: IN
9969: IFFALSE 9979
// vehicleInList = true ;
9971: LD_ADDR_VAR 0 26
9975: PUSH
9976: LD_INT 1
9978: ST_TO_ADDR
9979: GO 9950
9981: POP
9982: POP
// if not vehicleInList then
9983: LD_VAR 0 26
9987: NOT
9988: IFFALSE 10078
// begin if vehicles < vehiclesToAttackAmount then
9990: LD_VAR 0 25
9994: PUSH
9995: LD_VAR 0 10
9999: LESS
10000: IFFALSE 10041
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] ] ] else
10002: LD_ADDR_VAR 0 25
10006: PUSH
10007: LD_VAR 0 25
10011: PUSH
10012: LD_VAR 0 24
10016: PUSH
10017: LD_VAR 0 24
10021: PPUSH
10022: CALL_OW 313
10026: PUSH
10027: LD_INT 1
10029: ARRAY
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PUSH
10035: EMPTY
10036: LIST
10037: ADD
10038: ST_TO_ADDR
10039: GO 10078
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] ] ] ;
10041: LD_ADDR_VAR 0 25
10045: PUSH
10046: LD_VAR 0 25
10050: PUSH
10051: LD_VAR 0 24
10055: PUSH
10056: LD_VAR 0 24
10060: PPUSH
10061: CALL_OW 313
10065: PUSH
10066: LD_INT 1
10068: ARRAY
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: PUSH
10074: EMPTY
10075: LIST
10076: ADD
10077: ST_TO_ADDR
// end ; end ;
10078: GO 9924
10080: POP
10081: POP
// for enemyUnits in FilterAllUnits ( [ f_enemy , side ] ) do
10082: LD_ADDR_VAR 0 50
10086: PUSH
10087: LD_INT 81
10089: PUSH
10090: LD_VAR 0 1
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PPUSH
10099: CALL_OW 69
10103: PUSH
10104: FOR_IN
10105: IFFALSE 10623
// begin offensiveUnits = [ ] ;
10107: LD_ADDR_VAR 0 27
10111: PUSH
10112: EMPTY
10113: ST_TO_ADDR
// offensiveReadyCounter = 0 ;
10114: LD_ADDR_VAR 0 28
10118: PUSH
10119: LD_INT 0
10121: ST_TO_ADDR
// for i := 1 to vehicles do
10122: LD_ADDR_VAR 0 14
10126: PUSH
10127: DOUBLE
10128: LD_INT 1
10130: DEC
10131: ST_TO_ADDR
10132: LD_VAR 0 25
10136: PUSH
10137: FOR_TO
10138: IFFALSE 10346
// if GetTag ( vehicles [ i ] [ 1 ] ) = 2 then
10140: LD_VAR 0 25
10144: PUSH
10145: LD_VAR 0 14
10149: ARRAY
10150: PUSH
10151: LD_INT 1
10153: ARRAY
10154: PPUSH
10155: CALL_OW 110
10159: PUSH
10160: LD_INT 2
10162: EQUAL
10163: IFFALSE 10344
// begin if GetLives ( vehicles [ i ] [ 1 ] ) > 650 then
10165: LD_VAR 0 25
10169: PUSH
10170: LD_VAR 0 14
10174: ARRAY
10175: PUSH
10176: LD_INT 1
10178: ARRAY
10179: PPUSH
10180: CALL_OW 256
10184: PUSH
10185: LD_INT 650
10187: GREATER
10188: IFFALSE 10204
// offensiveReadyCounter = offensiveReadyCounter + 1 ;
10190: LD_ADDR_VAR 0 28
10194: PUSH
10195: LD_VAR 0 28
10199: PUSH
10200: LD_INT 1
10202: PLUS
10203: ST_TO_ADDR
// if IsInArea ( vehicles [ i ] [ 1 ] , baseArea ) then
10204: LD_VAR 0 25
10208: PUSH
10209: LD_VAR 0 14
10213: ARRAY
10214: PUSH
10215: LD_INT 1
10217: ARRAY
10218: PPUSH
10219: LD_VAR 0 4
10223: PPUSH
10224: CALL_OW 308
10228: IFFALSE 10256
// offensiveUnits = offensiveUnits ^ vehicles [ i ] [ 1 ] ;
10230: LD_ADDR_VAR 0 27
10234: PUSH
10235: LD_VAR 0 27
10239: PUSH
10240: LD_VAR 0 25
10244: PUSH
10245: LD_VAR 0 14
10249: ARRAY
10250: PUSH
10251: LD_INT 1
10253: ARRAY
10254: ADD
10255: ST_TO_ADDR
// for j = 1 to personel do
10256: LD_ADDR_VAR 0 15
10260: PUSH
10261: DOUBLE
10262: LD_INT 1
10264: DEC
10265: ST_TO_ADDR
10266: LD_VAR 0 19
10270: PUSH
10271: FOR_TO
10272: IFFALSE 10342
// if personel [ j ] = vehicles [ i ] [ 2 ] then
10274: LD_VAR 0 19
10278: PUSH
10279: LD_VAR 0 15
10283: ARRAY
10284: PUSH
10285: LD_VAR 0 25
10289: PUSH
10290: LD_VAR 0 14
10294: ARRAY
10295: PUSH
10296: LD_INT 2
10298: ARRAY
10299: EQUAL
10300: IFFALSE 10340
// personel = ReplaceIn ( personel , [ j , personel [ j ] ] , 3 ) ;
10302: LD_ADDR_VAR 0 19
10306: PUSH
10307: LD_VAR 0 19
10311: PPUSH
10312: LD_VAR 0 15
10316: PUSH
10317: LD_VAR 0 19
10321: PUSH
10322: LD_VAR 0 15
10326: ARRAY
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PPUSH
10332: LD_INT 3
10334: PPUSH
10335: CALL 49261 0 3
10339: ST_TO_ADDR
10340: GO 10271
10342: POP
10343: POP
// end ;
10344: GO 10137
10346: POP
10347: POP
// if vehiclesToAttackAmount <= offensiveReadyCounter then
10348: LD_VAR 0 10
10352: PUSH
10353: LD_VAR 0 28
10357: LESSEQUAL
10358: IFFALSE 10621
// begin for i := 1 to offensiveUnits do
10360: LD_ADDR_VAR 0 14
10364: PUSH
10365: DOUBLE
10366: LD_INT 1
10368: DEC
10369: ST_TO_ADDR
10370: LD_VAR 0 27
10374: PUSH
10375: FOR_TO
10376: IFFALSE 10619
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , offensiveUnits [ i ] ) ;
10378: LD_ADDR_VAR 0 29
10382: PUSH
10383: LD_INT 81
10385: PUSH
10386: LD_INT 1
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL_OW 69
10397: PPUSH
10398: LD_VAR 0 27
10402: PUSH
10403: LD_VAR 0 14
10407: ARRAY
10408: PPUSH
10409: CALL_OW 74
10413: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , offensiveUnits [ i ] ) ;
10414: LD_ADDR_VAR 0 30
10418: PUSH
10419: LD_INT 81
10421: PUSH
10422: LD_INT 1
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: LD_INT 2
10431: PUSH
10432: LD_INT 59
10434: PUSH
10435: EMPTY
10436: LIST
10437: PUSH
10438: LD_INT 21
10440: PUSH
10441: LD_INT 1
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PUSH
10448: LD_INT 21
10450: PUSH
10451: LD_INT 2
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: EMPTY
10469: LIST
10470: PPUSH
10471: CALL_OW 69
10475: PPUSH
10476: LD_VAR 0 27
10480: PUSH
10481: LD_VAR 0 14
10485: ARRAY
10486: PPUSH
10487: CALL_OW 74
10491: ST_TO_ADDR
// if GetDistUnits ( offensiveUnits [ i ] , target1 ) + 9 < GetDistUnits ( offensiveUnits [ i ] , target2 ) then
10492: LD_VAR 0 27
10496: PUSH
10497: LD_VAR 0 14
10501: ARRAY
10502: PPUSH
10503: LD_VAR 0 29
10507: PPUSH
10508: CALL_OW 296
10512: PUSH
10513: LD_INT 9
10515: PLUS
10516: PUSH
10517: LD_VAR 0 27
10521: PUSH
10522: LD_VAR 0 14
10526: ARRAY
10527: PPUSH
10528: LD_VAR 0 30
10532: PPUSH
10533: CALL_OW 296
10537: LESS
10538: IFFALSE 10562
// ComAttackUnit ( offensiveUnits [ i ] , target1 ) else
10540: LD_VAR 0 27
10544: PUSH
10545: LD_VAR 0 14
10549: ARRAY
10550: PPUSH
10551: LD_VAR 0 29
10555: PPUSH
10556: CALL_OW 115
10560: GO 10582
// ComAttackUnit ( offensiveUnits [ i ] , target2 ) ;
10562: LD_VAR 0 27
10566: PUSH
10567: LD_VAR 0 14
10571: ARRAY
10572: PPUSH
10573: LD_VAR 0 30
10577: PPUSH
10578: CALL_OW 115
// AddComAgressiveMove ( offensiveUnits [ i ] , GetX ( enemyUnits ) , GetY ( enemyUnits ) ) ;
10582: LD_VAR 0 27
10586: PUSH
10587: LD_VAR 0 14
10591: ARRAY
10592: PPUSH
10593: LD_VAR 0 50
10597: PPUSH
10598: CALL_OW 250
10602: PPUSH
10603: LD_VAR 0 50
10607: PPUSH
10608: CALL_OW 251
10612: PPUSH
10613: CALL_OW 174
// end ;
10617: GO 10375
10619: POP
10620: POP
// end ; end ;
10621: GO 10104
10623: POP
10624: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
10625: LD_ADDR_VAR 0 50
10629: PUSH
10630: LD_VAR 0 7
10634: PPUSH
10635: LD_INT 81
10637: PUSH
10638: LD_VAR 0 1
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: PPUSH
10647: CALL_OW 70
10651: PUSH
10652: FOR_IN
10653: IFFALSE 10881
// begin defenceUnits = [ ] ;
10655: LD_ADDR_VAR 0 31
10659: PUSH
10660: EMPTY
10661: ST_TO_ADDR
// for i := 1 to personel do
10662: LD_ADDR_VAR 0 14
10666: PUSH
10667: DOUBLE
10668: LD_INT 1
10670: DEC
10671: ST_TO_ADDR
10672: LD_VAR 0 19
10676: PUSH
10677: FOR_TO
10678: IFFALSE 10725
// if GetTag ( personel [ i ] ) = 3 then
10680: LD_VAR 0 19
10684: PUSH
10685: LD_VAR 0 14
10689: ARRAY
10690: PPUSH
10691: CALL_OW 110
10695: PUSH
10696: LD_INT 3
10698: EQUAL
10699: IFFALSE 10723
// defenceUnits = defenceUnits ^ personel [ i ] ;
10701: LD_ADDR_VAR 0 31
10705: PUSH
10706: LD_VAR 0 31
10710: PUSH
10711: LD_VAR 0 19
10715: PUSH
10716: LD_VAR 0 14
10720: ARRAY
10721: ADD
10722: ST_TO_ADDR
10723: GO 10677
10725: POP
10726: POP
// for i := 1 to vehicles do
10727: LD_ADDR_VAR 0 14
10731: PUSH
10732: DOUBLE
10733: LD_INT 1
10735: DEC
10736: ST_TO_ADDR
10737: LD_VAR 0 25
10741: PUSH
10742: FOR_TO
10743: IFFALSE 10798
// if GetTag ( vehicles [ i ] [ 1 ] ) = 3 then
10745: LD_VAR 0 25
10749: PUSH
10750: LD_VAR 0 14
10754: ARRAY
10755: PUSH
10756: LD_INT 1
10758: ARRAY
10759: PPUSH
10760: CALL_OW 110
10764: PUSH
10765: LD_INT 3
10767: EQUAL
10768: IFFALSE 10796
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
10770: LD_ADDR_VAR 0 31
10774: PUSH
10775: LD_VAR 0 31
10779: PUSH
10780: LD_VAR 0 25
10784: PUSH
10785: LD_VAR 0 14
10789: ARRAY
10790: PUSH
10791: LD_INT 1
10793: ARRAY
10794: ADD
10795: ST_TO_ADDR
10796: GO 10742
10798: POP
10799: POP
// ComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
10800: LD_VAR 0 31
10804: PPUSH
10805: LD_INT 3
10807: PUSH
10808: LD_INT 60
10810: PUSH
10811: EMPTY
10812: LIST
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PPUSH
10818: CALL_OW 72
10822: PPUSH
10823: LD_VAR 0 50
10827: PPUSH
10828: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , GetX ( enemyUnits ) , GetY ( enemyUnits ) ) ;
10832: LD_VAR 0 31
10836: PPUSH
10837: LD_INT 3
10839: PUSH
10840: LD_INT 60
10842: PUSH
10843: EMPTY
10844: LIST
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PPUSH
10850: CALL_OW 72
10854: PPUSH
10855: LD_VAR 0 50
10859: PPUSH
10860: CALL_OW 250
10864: PPUSH
10865: LD_VAR 0 50
10869: PPUSH
10870: CALL_OW 251
10874: PPUSH
10875: CALL_OW 174
// end ;
10879: GO 10652
10881: POP
10882: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
10883: LD_ADDR_VAR 0 45
10887: PUSH
10888: LD_INT 22
10890: PUSH
10891: LD_VAR 0 1
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: PUSH
10900: LD_INT 2
10902: PUSH
10903: LD_INT 30
10905: PUSH
10906: LD_INT 31
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: LD_INT 30
10915: PUSH
10916: LD_INT 32
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: PUSH
10923: LD_INT 30
10925: PUSH
10926: LD_INT 33
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PUSH
10933: LD_INT 30
10935: PUSH
10936: LD_INT 4
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: LD_INT 30
10945: PUSH
10946: LD_INT 5
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: PPUSH
10965: CALL_OW 69
10969: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
10970: LD_ADDR_VAR 0 46
10974: PUSH
10975: LD_INT 81
10977: PUSH
10978: LD_VAR 0 1
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PUSH
10987: LD_INT 21
10989: PUSH
10990: LD_INT 3
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: PUSH
10997: LD_INT 58
10999: PUSH
11000: EMPTY
11001: LIST
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: PPUSH
11008: CALL_OW 69
11012: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
11013: LD_VAR 0 45
11017: PUSH
11018: LD_VAR 0 46
11022: AND
11023: IFFALSE 11093
// for i in attackBuildings do
11025: LD_ADDR_VAR 0 14
11029: PUSH
11030: LD_VAR 0 45
11034: PUSH
11035: FOR_IN
11036: IFFALSE 11091
// for j in enemyBuildings do
11038: LD_ADDR_VAR 0 15
11042: PUSH
11043: LD_VAR 0 46
11047: PUSH
11048: FOR_IN
11049: IFFALSE 11087
// if GetDistUnits ( i , j ) < 12 then
11051: LD_VAR 0 14
11055: PPUSH
11056: LD_VAR 0 15
11060: PPUSH
11061: CALL_OW 296
11065: PUSH
11066: LD_INT 12
11068: LESS
11069: IFFALSE 11085
// ComAttackUnit ( i , j ) ;
11071: LD_VAR 0 14
11075: PPUSH
11076: LD_VAR 0 15
11080: PPUSH
11081: CALL_OW 115
11085: GO 11048
11087: POP
11088: POP
11089: GO 11035
11091: POP
11092: POP
// if canRebuild then
11093: LD_VAR 0 12
11097: IFFALSE 11766
// begin tmp = false ;
11099: LD_ADDR_VAR 0 16
11103: PUSH
11104: LD_INT 0
11106: ST_TO_ADDR
// unit = false ;
11107: LD_ADDR_VAR 0 18
11111: PUSH
11112: LD_INT 0
11114: ST_TO_ADDR
// for destroyedBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 250 ] ] ] ) do
11115: LD_ADDR_VAR 0 36
11119: PUSH
11120: LD_VAR 0 4
11124: PPUSH
11125: LD_INT 22
11127: PUSH
11128: LD_VAR 0 1
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 21
11139: PUSH
11140: LD_INT 3
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: LD_INT 3
11149: PUSH
11150: LD_INT 24
11152: PUSH
11153: LD_INT 250
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: LIST
11168: PPUSH
11169: CALL_OW 70
11173: PUSH
11174: FOR_IN
11175: IFFALSE 11277
// begin unit = destroyedBuilding ;
11177: LD_ADDR_VAR 0 18
11181: PUSH
11182: LD_VAR 0 36
11186: ST_TO_ADDR
// for i := 1 to destroyedBuildings / 4 do
11187: LD_ADDR_VAR 0 14
11191: PUSH
11192: DOUBLE
11193: LD_INT 1
11195: DEC
11196: ST_TO_ADDR
11197: LD_VAR 0 35
11201: PUSH
11202: LD_INT 4
11204: DIVREAL
11205: PUSH
11206: FOR_TO
11207: IFFALSE 11273
// if destroyedBuildings [ i + 1 ] = GetX ( destroyedBuilding ) and destroyedBuildings [ i + 2 ] = GetY ( destroyedBuilding ) then
11209: LD_VAR 0 35
11213: PUSH
11214: LD_VAR 0 14
11218: PUSH
11219: LD_INT 1
11221: PLUS
11222: ARRAY
11223: PUSH
11224: LD_VAR 0 36
11228: PPUSH
11229: CALL_OW 250
11233: EQUAL
11234: PUSH
11235: LD_VAR 0 35
11239: PUSH
11240: LD_VAR 0 14
11244: PUSH
11245: LD_INT 2
11247: PLUS
11248: ARRAY
11249: PUSH
11250: LD_VAR 0 36
11254: PPUSH
11255: CALL_OW 251
11259: EQUAL
11260: AND
11261: IFFALSE 11271
// tmp = true ;
11263: LD_ADDR_VAR 0 16
11267: PUSH
11268: LD_INT 1
11270: ST_TO_ADDR
11271: GO 11206
11273: POP
11274: POP
// end ;
11275: GO 11174
11277: POP
11278: POP
// if not tmp and unit then
11279: LD_VAR 0 16
11283: NOT
11284: PUSH
11285: LD_VAR 0 18
11289: AND
11290: IFFALSE 11550
// begin if GetBType ( unit ) = 1 then
11292: LD_VAR 0 18
11296: PPUSH
11297: CALL_OW 266
11301: PUSH
11302: LD_INT 1
11304: EQUAL
11305: IFFALSE 11359
// destroyedBuildings = destroyedBuildings ^ [ 0 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11307: LD_ADDR_VAR 0 35
11311: PUSH
11312: LD_VAR 0 35
11316: PUSH
11317: LD_INT 0
11319: PUSH
11320: LD_VAR 0 18
11324: PPUSH
11325: CALL_OW 250
11329: PUSH
11330: LD_VAR 0 18
11334: PPUSH
11335: CALL_OW 251
11339: PUSH
11340: LD_VAR 0 18
11344: PPUSH
11345: CALL_OW 254
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: ADD
11356: ST_TO_ADDR
11357: GO 11550
// if GetBType ( unit ) = 3 then
11359: LD_VAR 0 18
11363: PPUSH
11364: CALL_OW 266
11368: PUSH
11369: LD_INT 3
11371: EQUAL
11372: IFFALSE 11426
// destroyedBuildings = destroyedBuildings ^ [ 2 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11374: LD_ADDR_VAR 0 35
11378: PUSH
11379: LD_VAR 0 35
11383: PUSH
11384: LD_INT 2
11386: PUSH
11387: LD_VAR 0 18
11391: PPUSH
11392: CALL_OW 250
11396: PUSH
11397: LD_VAR 0 18
11401: PPUSH
11402: CALL_OW 251
11406: PUSH
11407: LD_VAR 0 18
11411: PPUSH
11412: CALL_OW 254
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: ADD
11423: ST_TO_ADDR
11424: GO 11550
// if GetBType ( unit ) = 5 then
11426: LD_VAR 0 18
11430: PPUSH
11431: CALL_OW 266
11435: PUSH
11436: LD_INT 5
11438: EQUAL
11439: IFFALSE 11493
// destroyedBuildings = destroyedBuildings ^ [ 4 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11441: LD_ADDR_VAR 0 35
11445: PUSH
11446: LD_VAR 0 35
11450: PUSH
11451: LD_INT 4
11453: PUSH
11454: LD_VAR 0 18
11458: PPUSH
11459: CALL_OW 250
11463: PUSH
11464: LD_VAR 0 18
11468: PPUSH
11469: CALL_OW 251
11473: PUSH
11474: LD_VAR 0 18
11478: PPUSH
11479: CALL_OW 254
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: ADD
11490: ST_TO_ADDR
11491: GO 11550
// destroyedBuildings = destroyedBuildings ^ [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ;
11493: LD_ADDR_VAR 0 35
11497: PUSH
11498: LD_VAR 0 35
11502: PUSH
11503: LD_VAR 0 18
11507: PPUSH
11508: CALL_OW 266
11512: PUSH
11513: LD_VAR 0 18
11517: PPUSH
11518: CALL_OW 250
11522: PUSH
11523: LD_VAR 0 18
11527: PPUSH
11528: CALL_OW 251
11532: PUSH
11533: LD_VAR 0 18
11537: PPUSH
11538: CALL_OW 254
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: ADD
11549: ST_TO_ADDR
// end ; for constructedBuilding in constructedBuildings do
11550: LD_ADDR_VAR 0 37
11554: PUSH
11555: LD_VAR 0 38
11559: PUSH
11560: FOR_IN
11561: IFFALSE 11764
// for i := 1 to destroyedBuildings / 4 do
11563: LD_ADDR_VAR 0 14
11567: PUSH
11568: DOUBLE
11569: LD_INT 1
11571: DEC
11572: ST_TO_ADDR
11573: LD_VAR 0 35
11577: PUSH
11578: LD_INT 4
11580: DIVREAL
11581: PUSH
11582: FOR_TO
11583: IFFALSE 11760
// if destroyedBuildings [ i + 1 ] = GetX ( constructedBuilding ) and destroyedBuildings [ i + 2 ] = GetY ( constructedBuilding ) and IsOK ( constructedBuilding ) then
11585: LD_VAR 0 35
11589: PUSH
11590: LD_VAR 0 14
11594: PUSH
11595: LD_INT 1
11597: PLUS
11598: ARRAY
11599: PUSH
11600: LD_VAR 0 37
11604: PPUSH
11605: CALL_OW 250
11609: EQUAL
11610: PUSH
11611: LD_VAR 0 35
11615: PUSH
11616: LD_VAR 0 14
11620: PUSH
11621: LD_INT 2
11623: PLUS
11624: ARRAY
11625: PUSH
11626: LD_VAR 0 37
11630: PPUSH
11631: CALL_OW 251
11635: EQUAL
11636: AND
11637: PUSH
11638: LD_VAR 0 37
11642: PPUSH
11643: CALL_OW 302
11647: AND
11648: IFFALSE 11758
// begin destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11650: LD_ADDR_VAR 0 35
11654: PUSH
11655: LD_VAR 0 35
11659: PPUSH
11660: LD_INT 1
11662: PPUSH
11663: CALL_OW 3
11667: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11668: LD_ADDR_VAR 0 35
11672: PUSH
11673: LD_VAR 0 35
11677: PPUSH
11678: LD_INT 1
11680: PPUSH
11681: CALL_OW 3
11685: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11686: LD_ADDR_VAR 0 35
11690: PUSH
11691: LD_VAR 0 35
11695: PPUSH
11696: LD_INT 1
11698: PPUSH
11699: CALL_OW 3
11703: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11704: LD_ADDR_VAR 0 35
11708: PUSH
11709: LD_VAR 0 35
11713: PPUSH
11714: LD_INT 1
11716: PPUSH
11717: CALL_OW 3
11721: ST_TO_ADDR
// if GetType ( constructedBuilding ) in [ b_bunker , b_turret ] then
11722: LD_VAR 0 37
11726: PPUSH
11727: CALL_OW 247
11731: PUSH
11732: LD_INT 32
11734: PUSH
11735: LD_INT 33
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: IN
11742: IFFALSE 11758
// AddComPlaceWeapon ( constructedBuilding , weapons ) ;
11744: LD_VAR 0 37
11748: PPUSH
11749: LD_VAR 0 32
11753: PPUSH
11754: CALL_OW 208
// end ;
11758: GO 11582
11760: POP
11761: POP
11762: GO 11560
11764: POP
11765: POP
// end ; wait ( 0 0$01 ) ;
11766: LD_INT 35
11768: PPUSH
11769: CALL_OW 67
// until not personel ;
11773: LD_VAR 0 19
11777: NOT
11778: IFFALSE 5471
// end ; end_of_file
11780: LD_VAR 0 13
11784: RET
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
11785: LD_INT 0
11787: PPUSH
11788: PPUSH
// if debugMode then
11789: LD_EXP 33
11793: IFFALSE 11810
// unit := NewCharacter ( ident ) ;
11795: LD_ADDR_VAR 0 5
11799: PUSH
11800: LD_VAR 0 1
11804: PPUSH
11805: CALL_OW 25
11809: ST_TO_ADDR
// if exist_mode and not debugMode then
11810: LD_VAR 0 2
11814: PUSH
11815: LD_EXP 33
11819: NOT
11820: AND
11821: IFFALSE 11846
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
11823: LD_ADDR_VAR 0 5
11827: PUSH
11828: LD_EXP 32
11832: PUSH
11833: LD_VAR 0 1
11837: STR
11838: PPUSH
11839: CALL_OW 34
11843: ST_TO_ADDR
11844: GO 11868
// if not debugMode then
11846: LD_EXP 33
11850: NOT
11851: IFFALSE 11868
// unit := NewCharacter ( ident ) ;
11853: LD_ADDR_VAR 0 5
11857: PUSH
11858: LD_VAR 0 1
11862: PPUSH
11863: CALL_OW 25
11867: ST_TO_ADDR
// if class then
11868: LD_VAR 0 3
11872: IFFALSE 11888
// SetClass ( unit , class ) ;
11874: LD_VAR 0 5
11878: PPUSH
11879: LD_VAR 0 3
11883: PPUSH
11884: CALL_OW 336
// result := unit ;
11888: LD_ADDR_VAR 0 4
11892: PUSH
11893: LD_VAR 0 5
11897: ST_TO_ADDR
// end ;
11898: LD_VAR 0 4
11902: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
11903: LD_INT 0
11905: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
11906: LD_VAR 0 1
11910: PPUSH
11911: CALL_OW 255
11915: PUSH
11916: LD_VAR 0 3
11920: EQUAL
11921: PUSH
11922: LD_VAR 0 1
11926: PPUSH
11927: CALL_OW 302
11931: AND
11932: IFFALSE 11954
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
11934: LD_VAR 0 1
11938: PPUSH
11939: LD_EXP 31
11943: PUSH
11944: LD_VAR 0 2
11948: STR
11949: PPUSH
11950: CALL_OW 38
// end ;
11954: LD_VAR 0 4
11958: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
11959: LD_INT 0
11961: PPUSH
11962: PPUSH
11963: PPUSH
// resultCharactersToSave = [ ] ;
11964: LD_ADDR_VAR 0 6
11968: PUSH
11969: EMPTY
11970: ST_TO_ADDR
// for unit in characters do
11971: LD_ADDR_VAR 0 5
11975: PUSH
11976: LD_VAR 0 1
11980: PUSH
11981: FOR_IN
11982: IFFALSE 12030
// if GetSide ( unit ) = side and IsOK ( unit ) then
11984: LD_VAR 0 5
11988: PPUSH
11989: CALL_OW 255
11993: PUSH
11994: LD_VAR 0 3
11998: EQUAL
11999: PUSH
12000: LD_VAR 0 5
12004: PPUSH
12005: CALL_OW 302
12009: AND
12010: IFFALSE 12028
// resultCharactersToSave = resultCharactersToSave ^ unit ;
12012: LD_ADDR_VAR 0 6
12016: PUSH
12017: LD_VAR 0 6
12021: PUSH
12022: LD_VAR 0 5
12026: ADD
12027: ST_TO_ADDR
12028: GO 11981
12030: POP
12031: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
12032: LD_VAR 0 6
12036: PPUSH
12037: LD_EXP 31
12041: PUSH
12042: LD_VAR 0 2
12046: STR
12047: PPUSH
12048: CALL_OW 38
// end ;
12052: LD_VAR 0 4
12056: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
12057: LD_INT 0
12059: PPUSH
12060: PPUSH
// for unit in units do
12061: LD_ADDR_VAR 0 5
12065: PUSH
12066: LD_VAR 0 1
12070: PUSH
12071: FOR_IN
12072: IFFALSE 12095
// PlaceUnitArea ( unit , area , spawnMode ) ;
12074: LD_VAR 0 5
12078: PPUSH
12079: LD_VAR 0 2
12083: PPUSH
12084: LD_VAR 0 3
12088: PPUSH
12089: CALL_OW 49
12093: GO 12071
12095: POP
12096: POP
// end ;
12097: LD_VAR 0 4
12101: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
12102: LD_INT 0
12104: PPUSH
12105: PPUSH
12106: PPUSH
12107: PPUSH
// units = characters ;
12108: LD_ADDR_VAR 0 9
12112: PUSH
12113: LD_VAR 0 1
12117: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod , Kirilenkova ] ;
12118: LD_ADDR_VAR 0 9
12122: PUSH
12123: LD_VAR 0 9
12127: PUSH
12128: LD_EXP 39
12132: PUSH
12133: LD_EXP 40
12137: PUSH
12138: LD_EXP 41
12142: PUSH
12143: LD_EXP 42
12147: PUSH
12148: LD_EXP 43
12152: PUSH
12153: LD_EXP 44
12157: PUSH
12158: LD_EXP 45
12162: PUSH
12163: LD_EXP 46
12167: PUSH
12168: LD_EXP 51
12172: PUSH
12173: LD_EXP 48
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: DIFF
12190: ST_TO_ADDR
// if not units and not canTalkHero then
12191: LD_VAR 0 9
12195: NOT
12196: PUSH
12197: LD_VAR 0 5
12201: NOT
12202: AND
12203: IFFALSE 12207
// exit ;
12205: GO 12380
// if not units then
12207: LD_VAR 0 9
12211: NOT
12212: IFFALSE 12233
// units = characters diff [ Burlak ] ;
12214: LD_ADDR_VAR 0 9
12218: PUSH
12219: LD_VAR 0 1
12223: PUSH
12224: LD_EXP 39
12228: PUSH
12229: EMPTY
12230: LIST
12231: DIFF
12232: ST_TO_ADDR
// if not units and canTalkHero then
12233: LD_VAR 0 9
12237: NOT
12238: PUSH
12239: LD_VAR 0 5
12243: AND
12244: IFFALSE 12248
// exit ;
12246: GO 12380
// speaker := units [ rand ( 1 , units ) ] ;
12248: LD_ADDR_VAR 0 8
12252: PUSH
12253: LD_VAR 0 9
12257: PUSH
12258: LD_INT 1
12260: PPUSH
12261: LD_VAR 0 9
12265: PPUSH
12266: CALL_OW 12
12270: ARRAY
12271: ST_TO_ADDR
// if radio then
12272: LD_VAR 0 4
12276: IFFALSE 12325
// begin if GetSex ( speaker ) = sex_male then
12278: LD_VAR 0 8
12282: PPUSH
12283: CALL_OW 258
12287: PUSH
12288: LD_INT 1
12290: EQUAL
12291: IFFALSE 12309
// SayRadio ( speaker , dialogMID ) else
12293: LD_VAR 0 8
12297: PPUSH
12298: LD_VAR 0 2
12302: PPUSH
12303: CALL_OW 94
12307: GO 12323
// SayRadio ( speaker , dialogFID ) ;
12309: LD_VAR 0 8
12313: PPUSH
12314: LD_VAR 0 3
12318: PPUSH
12319: CALL_OW 94
// end else
12323: GO 12370
// begin if GetSex ( speaker ) = sex_male then
12325: LD_VAR 0 8
12329: PPUSH
12330: CALL_OW 258
12334: PUSH
12335: LD_INT 1
12337: EQUAL
12338: IFFALSE 12356
// Say ( speaker , dialogMID ) else
12340: LD_VAR 0 8
12344: PPUSH
12345: LD_VAR 0 2
12349: PPUSH
12350: CALL_OW 88
12354: GO 12370
// Say ( speaker , dialogFID ) ;
12356: LD_VAR 0 8
12360: PPUSH
12361: LD_VAR 0 3
12365: PPUSH
12366: CALL_OW 88
// end ; result := speaker ;
12370: LD_ADDR_VAR 0 6
12374: PUSH
12375: LD_VAR 0 8
12379: ST_TO_ADDR
// end ;
12380: LD_VAR 0 6
12384: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
12385: LD_INT 0
12387: PPUSH
12388: PPUSH
// dir := GetDir ( bunker ) - 3 ;
12389: LD_ADDR_VAR 0 4
12393: PUSH
12394: LD_VAR 0 2
12398: PPUSH
12399: CALL_OW 254
12403: PUSH
12404: LD_INT 3
12406: MINUS
12407: ST_TO_ADDR
// if dir < 0 then
12408: LD_VAR 0 4
12412: PUSH
12413: LD_INT 0
12415: LESS
12416: IFFALSE 12432
// dir := 6 + dir ;
12418: LD_ADDR_VAR 0 4
12422: PUSH
12423: LD_INT 6
12425: PUSH
12426: LD_VAR 0 4
12430: PLUS
12431: ST_TO_ADDR
// SetDir ( un , dir ) ;
12432: LD_VAR 0 1
12436: PPUSH
12437: LD_VAR 0 4
12441: PPUSH
12442: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
12446: LD_VAR 0 1
12450: PPUSH
12451: LD_VAR 0 2
12455: PPUSH
12456: CALL_OW 52
// result = un ;
12460: LD_ADDR_VAR 0 3
12464: PUSH
12465: LD_VAR 0 1
12469: ST_TO_ADDR
// end ;
12470: LD_VAR 0 3
12474: RET
// export function AddComCaptureBuilding ( engs , building ) ; var eng ; begin
12475: LD_INT 0
12477: PPUSH
12478: PPUSH
// for eng in engs do
12479: LD_ADDR_VAR 0 4
12483: PUSH
12484: LD_VAR 0 1
12488: PUSH
12489: FOR_IN
12490: IFFALSE 12607
// if GetClass ( eng ) = class_engineer and IsOK ( eng ) and building and not GetSide ( building ) = GetSide ( eng ) then
12492: LD_VAR 0 4
12496: PPUSH
12497: CALL_OW 257
12501: PUSH
12502: LD_INT 2
12504: EQUAL
12505: PUSH
12506: LD_VAR 0 4
12510: PPUSH
12511: CALL_OW 302
12515: AND
12516: PUSH
12517: LD_VAR 0 2
12521: AND
12522: PUSH
12523: LD_VAR 0 2
12527: PPUSH
12528: CALL_OW 255
12532: PUSH
12533: LD_VAR 0 4
12537: PPUSH
12538: CALL_OW 255
12542: EQUAL
12543: NOT
12544: AND
12545: IFFALSE 12605
// AddTaskList ( eng , [ [ e , GetX ( building ) , GetY ( building ) , building , 0 , 0 , 0 ] ] ) end ;
12547: LD_VAR 0 4
12551: PPUSH
12552: LD_STRING e
12554: PUSH
12555: LD_VAR 0 2
12559: PPUSH
12560: CALL_OW 250
12564: PUSH
12565: LD_VAR 0 2
12569: PPUSH
12570: CALL_OW 251
12574: PUSH
12575: LD_VAR 0 2
12579: PUSH
12580: LD_INT 0
12582: PUSH
12583: LD_INT 0
12585: PUSH
12586: LD_INT 0
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: PUSH
12598: EMPTY
12599: LIST
12600: PPUSH
12601: CALL_OW 447
12605: GO 12489
12607: POP
12608: POP
12609: LD_VAR 0 3
12613: RET
// export function Delete2D ( tab , firstIndex , secondIndex ) ; var i , list , tabPom ; begin
12614: LD_INT 0
12616: PPUSH
12617: PPUSH
12618: PPUSH
12619: PPUSH
// tabPom := Delete ( tab [ firstIndex ] , secondIndex ) ;
12620: LD_ADDR_VAR 0 7
12624: PUSH
12625: LD_VAR 0 1
12629: PUSH
12630: LD_VAR 0 2
12634: ARRAY
12635: PPUSH
12636: LD_VAR 0 3
12640: PPUSH
12641: CALL_OW 3
12645: ST_TO_ADDR
// tab := Replace ( tab , firstIndex , tabPom ) ;
12646: LD_ADDR_VAR 0 1
12650: PUSH
12651: LD_VAR 0 1
12655: PPUSH
12656: LD_VAR 0 2
12660: PPUSH
12661: LD_VAR 0 7
12665: PPUSH
12666: CALL_OW 1
12670: ST_TO_ADDR
// result := tab ;
12671: LD_ADDR_VAR 0 4
12675: PUSH
12676: LD_VAR 0 1
12680: ST_TO_ADDR
// end ;
12681: LD_VAR 0 4
12685: RET
// export function Nef_PrepareBase ( base_dep , area , name , skill , sources , nation , personel ) ; var i , j , d , b , f , x , un , base , side , buildings , tmp ; begin
12686: LD_INT 0
12688: PPUSH
12689: PPUSH
12690: PPUSH
12691: PPUSH
12692: PPUSH
12693: PPUSH
12694: PPUSH
12695: PPUSH
12696: PPUSH
12697: PPUSH
12698: PPUSH
12699: PPUSH
// result := [ ] ;
12700: LD_ADDR_VAR 0 8
12704: PUSH
12705: EMPTY
12706: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12707: LD_VAR 0 1
12711: PPUSH
12712: CALL_OW 266
12716: PUSH
12717: LD_INT 0
12719: PUSH
12720: LD_INT 1
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: IN
12727: NOT
12728: IFFALSE 12732
// exit ;
12730: GO 14410
// if name then
12732: LD_VAR 0 3
12736: IFFALSE 12752
// SetBName ( base_dep , name ) ;
12738: LD_VAR 0 1
12742: PPUSH
12743: LD_VAR 0 3
12747: PPUSH
12748: CALL_OW 500
// base := GetBase ( base_dep ) ;
12752: LD_ADDR_VAR 0 16
12756: PUSH
12757: LD_VAR 0 1
12761: PPUSH
12762: CALL_OW 274
12766: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12767: LD_ADDR_VAR 0 17
12771: PUSH
12772: LD_VAR 0 1
12776: PPUSH
12777: CALL_OW 255
12781: ST_TO_ADDR
// if sources then
12782: LD_VAR 0 5
12786: IFFALSE 12833
// for i = 1 to 3 do
12788: LD_ADDR_VAR 0 9
12792: PUSH
12793: DOUBLE
12794: LD_INT 1
12796: DEC
12797: ST_TO_ADDR
12798: LD_INT 3
12800: PUSH
12801: FOR_TO
12802: IFFALSE 12831
// AddResourceType ( base , i , sources [ i ] ) ;
12804: LD_VAR 0 16
12808: PPUSH
12809: LD_VAR 0 9
12813: PPUSH
12814: LD_VAR 0 5
12818: PUSH
12819: LD_VAR 0 9
12823: ARRAY
12824: PPUSH
12825: CALL_OW 276
12829: GO 12801
12831: POP
12832: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12833: LD_ADDR_VAR 0 18
12837: PUSH
12838: LD_VAR 0 16
12842: PPUSH
12843: LD_VAR 0 2
12847: PPUSH
12848: LD_INT 1
12850: PPUSH
12851: CALL 52007 0 3
12855: ST_TO_ADDR
// InitHc ;
12856: CALL_OW 19
// InitUc ;
12860: CALL_OW 18
// uc_side := side ;
12864: LD_ADDR_OWVAR 20
12868: PUSH
12869: LD_VAR 0 17
12873: ST_TO_ADDR
// uc_nation := nation ;
12874: LD_ADDR_OWVAR 21
12878: PUSH
12879: LD_VAR 0 6
12883: ST_TO_ADDR
// if buildings then
12884: LD_VAR 0 18
12888: IFFALSE 14269
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12890: LD_ADDR_VAR 0 19
12894: PUSH
12895: LD_VAR 0 18
12899: PPUSH
12900: LD_INT 2
12902: PUSH
12903: LD_INT 30
12905: PUSH
12906: LD_INT 29
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PUSH
12913: LD_INT 30
12915: PUSH
12916: LD_INT 30
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: LIST
12927: PPUSH
12928: CALL_OW 72
12932: ST_TO_ADDR
// if tmp then
12933: LD_VAR 0 19
12937: IFFALSE 12985
// for i in tmp do
12939: LD_ADDR_VAR 0 9
12943: PUSH
12944: LD_VAR 0 19
12948: PUSH
12949: FOR_IN
12950: IFFALSE 12983
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12952: LD_VAR 0 9
12956: PPUSH
12957: CALL_OW 250
12961: PPUSH
12962: LD_VAR 0 9
12966: PPUSH
12967: CALL_OW 251
12971: PPUSH
12972: LD_VAR 0 17
12976: PPUSH
12977: CALL_OW 441
12981: GO 12949
12983: POP
12984: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12985: LD_VAR 0 18
12989: PPUSH
12990: LD_INT 2
12992: PUSH
12993: LD_INT 30
12995: PUSH
12996: LD_INT 31
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: PUSH
13003: LD_INT 30
13005: PUSH
13006: LD_INT 32
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: PUSH
13013: LD_INT 30
13015: PUSH
13016: LD_INT 33
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: PPUSH
13029: CALL_OW 72
13033: IFFALSE 13132
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13035: LD_ADDR_VAR 0 9
13039: PUSH
13040: LD_VAR 0 18
13044: PPUSH
13045: LD_INT 2
13047: PUSH
13048: LD_INT 30
13050: PUSH
13051: LD_INT 31
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PUSH
13058: LD_INT 30
13060: PUSH
13061: LD_INT 32
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: LD_INT 30
13070: PUSH
13071: LD_INT 33
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: PPUSH
13084: CALL_OW 72
13088: PUSH
13089: FOR_IN
13090: IFFALSE 13130
// begin if not GetBWeapon ( i ) then
13092: LD_VAR 0 9
13096: PPUSH
13097: CALL_OW 269
13101: NOT
13102: IFFALSE 13128
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13104: LD_VAR 0 9
13108: PPUSH
13109: LD_VAR 0 9
13113: PPUSH
13114: LD_VAR 0 2
13118: PPUSH
13119: CALL 54269 0 2
13123: PPUSH
13124: CALL_OW 431
// end ;
13128: GO 13089
13130: POP
13131: POP
// end ; for i = 1 to personel do
13132: LD_ADDR_VAR 0 9
13136: PUSH
13137: DOUBLE
13138: LD_INT 1
13140: DEC
13141: ST_TO_ADDR
13142: LD_VAR 0 7
13146: PUSH
13147: FOR_TO
13148: IFFALSE 14249
// begin if i > 4 then
13150: LD_VAR 0 9
13154: PUSH
13155: LD_INT 4
13157: GREATER
13158: IFFALSE 13162
// break ;
13160: GO 14249
// case i of 1 :
13162: LD_VAR 0 9
13166: PUSH
13167: LD_INT 1
13169: DOUBLE
13170: EQUAL
13171: IFTRUE 13175
13173: GO 13266
13175: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13176: LD_ADDR_VAR 0 13
13180: PUSH
13181: LD_VAR 0 18
13185: PPUSH
13186: LD_INT 22
13188: PUSH
13189: LD_VAR 0 17
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 58
13200: PUSH
13201: EMPTY
13202: LIST
13203: PUSH
13204: LD_INT 2
13206: PUSH
13207: LD_INT 30
13209: PUSH
13210: LD_INT 31
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: PUSH
13217: LD_INT 30
13219: PUSH
13220: LD_INT 32
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: PUSH
13227: LD_INT 30
13229: PUSH
13230: LD_INT 4
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PUSH
13237: LD_INT 30
13239: PUSH
13240: LD_INT 5
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: LIST
13258: PPUSH
13259: CALL_OW 72
13263: ST_TO_ADDR
13264: GO 13499
13266: LD_INT 2
13268: DOUBLE
13269: EQUAL
13270: IFTRUE 13274
13272: GO 13336
13274: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13275: LD_ADDR_VAR 0 13
13279: PUSH
13280: LD_VAR 0 18
13284: PPUSH
13285: LD_INT 22
13287: PUSH
13288: LD_VAR 0 17
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: LD_INT 2
13299: PUSH
13300: LD_INT 30
13302: PUSH
13303: LD_INT 0
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PUSH
13310: LD_INT 30
13312: PUSH
13313: LD_INT 1
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: LIST
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: PPUSH
13329: CALL_OW 72
13333: ST_TO_ADDR
13334: GO 13499
13336: LD_INT 3
13338: DOUBLE
13339: EQUAL
13340: IFTRUE 13344
13342: GO 13417
13344: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_control_tower ] , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13345: LD_ADDR_VAR 0 13
13349: PUSH
13350: LD_VAR 0 18
13354: PPUSH
13355: LD_INT 22
13357: PUSH
13358: LD_VAR 0 17
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: LD_INT 2
13369: PUSH
13370: LD_INT 30
13372: PUSH
13373: LD_INT 36
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PUSH
13380: LD_INT 30
13382: PUSH
13383: LD_INT 2
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: PUSH
13390: LD_INT 30
13392: PUSH
13393: LD_INT 3
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 72
13414: ST_TO_ADDR
13415: GO 13499
13417: LD_INT 4
13419: DOUBLE
13420: EQUAL
13421: IFTRUE 13425
13423: GO 13498
13425: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13426: LD_ADDR_VAR 0 13
13430: PUSH
13431: LD_VAR 0 18
13435: PPUSH
13436: LD_INT 22
13438: PUSH
13439: LD_VAR 0 17
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 2
13450: PUSH
13451: LD_INT 30
13453: PUSH
13454: LD_INT 6
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: PUSH
13461: LD_INT 30
13463: PUSH
13464: LD_INT 7
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PUSH
13471: LD_INT 30
13473: PUSH
13474: LD_INT 8
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PPUSH
13491: CALL_OW 72
13495: ST_TO_ADDR
13496: GO 13499
13498: POP
// if i = 1 then
13499: LD_VAR 0 9
13503: PUSH
13504: LD_INT 1
13506: EQUAL
13507: IFFALSE 13625
// begin tmp := [ ] ;
13509: LD_ADDR_VAR 0 19
13513: PUSH
13514: EMPTY
13515: ST_TO_ADDR
// for j in f do
13516: LD_ADDR_VAR 0 10
13520: PUSH
13521: LD_VAR 0 13
13525: PUSH
13526: FOR_IN
13527: IFFALSE 13607
// if GetBType ( j ) in [ b_breastwork , b_bunker ] then
13529: LD_VAR 0 10
13533: PPUSH
13534: CALL_OW 266
13538: PUSH
13539: LD_INT 31
13541: PUSH
13542: LD_INT 32
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: IN
13549: IFFALSE 13576
// tmp := Insert ( tmp , 1 , j ) else
13551: LD_ADDR_VAR 0 19
13555: PUSH
13556: LD_VAR 0 19
13560: PPUSH
13561: LD_INT 1
13563: PPUSH
13564: LD_VAR 0 10
13568: PPUSH
13569: CALL_OW 2
13573: ST_TO_ADDR
13574: GO 13605
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13576: LD_ADDR_VAR 0 19
13580: PUSH
13581: LD_VAR 0 19
13585: PPUSH
13586: LD_VAR 0 19
13590: PUSH
13591: LD_INT 1
13593: PLUS
13594: PPUSH
13595: LD_VAR 0 10
13599: PPUSH
13600: CALL_OW 2
13604: ST_TO_ADDR
13605: GO 13526
13607: POP
13608: POP
// if tmp then
13609: LD_VAR 0 19
13613: IFFALSE 13625
// f := tmp ;
13615: LD_ADDR_VAR 0 13
13619: PUSH
13620: LD_VAR 0 19
13624: ST_TO_ADDR
// end ; x := personel [ i ] ;
13625: LD_ADDR_VAR 0 14
13629: PUSH
13630: LD_VAR 0 7
13634: PUSH
13635: LD_VAR 0 9
13639: ARRAY
13640: ST_TO_ADDR
// if x = - 1 then
13641: LD_VAR 0 14
13645: PUSH
13646: LD_INT 1
13648: NEG
13649: EQUAL
13650: IFFALSE 13844
// begin for j in f do
13652: LD_ADDR_VAR 0 10
13656: PUSH
13657: LD_VAR 0 13
13661: PUSH
13662: FOR_IN
13663: IFFALSE 13840
// repeat InitHc ;
13665: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13669: LD_VAR 0 10
13673: PPUSH
13674: CALL_OW 266
13678: PUSH
13679: LD_INT 5
13681: EQUAL
13682: IFFALSE 13737
// begin if UnitsInside ( j ) < 3 then
13684: LD_VAR 0 10
13688: PPUSH
13689: CALL_OW 313
13693: PUSH
13694: LD_INT 3
13696: LESS
13697: IFFALSE 13718
// PrepareHuman ( false , i , skill ) else
13699: LD_INT 0
13701: PPUSH
13702: LD_VAR 0 9
13706: PPUSH
13707: LD_VAR 0 4
13711: PPUSH
13712: CALL_OW 380
13716: GO 13735
// PrepareHuman ( false , i , skill ) ;
13718: LD_INT 0
13720: PPUSH
13721: LD_VAR 0 9
13725: PPUSH
13726: LD_VAR 0 4
13730: PPUSH
13731: CALL_OW 380
// end else
13735: GO 13754
// PrepareHuman ( false , i , skill ) ;
13737: LD_INT 0
13739: PPUSH
13740: LD_VAR 0 9
13744: PPUSH
13745: LD_VAR 0 4
13749: PPUSH
13750: CALL_OW 380
// un := CreateHuman ;
13754: LD_ADDR_VAR 0 15
13758: PUSH
13759: CALL_OW 44
13763: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13764: LD_ADDR_VAR 0 8
13768: PUSH
13769: LD_VAR 0 8
13773: PPUSH
13774: LD_INT 1
13776: PPUSH
13777: LD_VAR 0 15
13781: PPUSH
13782: CALL_OW 2
13786: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13787: LD_VAR 0 15
13791: PPUSH
13792: LD_VAR 0 10
13796: PPUSH
13797: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13801: LD_VAR 0 10
13805: PPUSH
13806: CALL_OW 313
13810: PUSH
13811: LD_INT 6
13813: EQUAL
13814: PUSH
13815: LD_VAR 0 10
13819: PPUSH
13820: CALL_OW 266
13824: PUSH
13825: LD_INT 32
13827: PUSH
13828: LD_INT 31
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: IN
13835: OR
13836: IFFALSE 13665
13838: GO 13662
13840: POP
13841: POP
// end else
13842: GO 14247
// for j = 1 to x do
13844: LD_ADDR_VAR 0 10
13848: PUSH
13849: DOUBLE
13850: LD_INT 1
13852: DEC
13853: ST_TO_ADDR
13854: LD_VAR 0 14
13858: PUSH
13859: FOR_TO
13860: IFFALSE 14245
// begin InitHc ;
13862: CALL_OW 19
// if not f then
13866: LD_VAR 0 13
13870: NOT
13871: IFFALSE 13960
// begin PrepareHuman ( false , i , skill ) ;
13873: LD_INT 0
13875: PPUSH
13876: LD_VAR 0 9
13880: PPUSH
13881: LD_VAR 0 4
13885: PPUSH
13886: CALL_OW 380
// un := CreateHuman ;
13890: LD_ADDR_VAR 0 15
13894: PUSH
13895: CALL_OW 44
13899: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13900: LD_ADDR_VAR 0 8
13904: PUSH
13905: LD_VAR 0 8
13909: PPUSH
13910: LD_INT 1
13912: PPUSH
13913: LD_VAR 0 15
13917: PPUSH
13918: CALL_OW 2
13922: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13923: LD_VAR 0 15
13927: PPUSH
13928: LD_VAR 0 1
13932: PPUSH
13933: CALL_OW 250
13937: PPUSH
13938: LD_VAR 0 1
13942: PPUSH
13943: CALL_OW 251
13947: PPUSH
13948: LD_INT 10
13950: PPUSH
13951: LD_INT 0
13953: PPUSH
13954: CALL_OW 50
// continue ;
13958: GO 13859
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 3 and GetBType ( f [ 1 ] ) = b_control_tower ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13960: LD_VAR 0 13
13964: PUSH
13965: LD_INT 1
13967: ARRAY
13968: PPUSH
13969: CALL_OW 313
13973: PUSH
13974: LD_VAR 0 13
13978: PUSH
13979: LD_INT 1
13981: ARRAY
13982: PPUSH
13983: CALL_OW 266
13987: PUSH
13988: LD_INT 32
13990: PUSH
13991: LD_INT 31
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: IN
13998: AND
13999: PUSH
14000: LD_VAR 0 13
14004: PUSH
14005: LD_INT 1
14007: ARRAY
14008: PPUSH
14009: CALL_OW 313
14013: PUSH
14014: LD_INT 3
14016: EQUAL
14017: PUSH
14018: LD_VAR 0 13
14022: PUSH
14023: LD_INT 1
14025: ARRAY
14026: PPUSH
14027: CALL_OW 266
14031: PUSH
14032: LD_INT 36
14034: EQUAL
14035: AND
14036: OR
14037: PUSH
14038: LD_VAR 0 13
14042: PUSH
14043: LD_INT 1
14045: ARRAY
14046: PPUSH
14047: CALL_OW 313
14051: PUSH
14052: LD_INT 6
14054: EQUAL
14055: OR
14056: IFFALSE 14076
// f := Delete ( f , 1 ) ;
14058: LD_ADDR_VAR 0 13
14062: PUSH
14063: LD_VAR 0 13
14067: PPUSH
14068: LD_INT 1
14070: PPUSH
14071: CALL_OW 3
14075: ST_TO_ADDR
// if not f then
14076: LD_VAR 0 13
14080: NOT
14081: IFFALSE 14099
// begin x := x + 2 ;
14083: LD_ADDR_VAR 0 14
14087: PUSH
14088: LD_VAR 0 14
14092: PUSH
14093: LD_INT 2
14095: PLUS
14096: ST_TO_ADDR
// continue ;
14097: GO 13859
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14099: LD_VAR 0 13
14103: PUSH
14104: LD_INT 1
14106: ARRAY
14107: PPUSH
14108: CALL_OW 266
14112: PUSH
14113: LD_INT 5
14115: EQUAL
14116: IFFALSE 14175
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14118: LD_VAR 0 13
14122: PUSH
14123: LD_INT 1
14125: ARRAY
14126: PPUSH
14127: CALL_OW 313
14131: PUSH
14132: LD_INT 3
14134: LESS
14135: IFFALSE 14156
// PrepareHuman ( false , i , skill ) else
14137: LD_INT 0
14139: PPUSH
14140: LD_VAR 0 9
14144: PPUSH
14145: LD_VAR 0 4
14149: PPUSH
14150: CALL_OW 380
14154: GO 14173
// PrepareHuman ( false , i , skill ) ;
14156: LD_INT 0
14158: PPUSH
14159: LD_VAR 0 9
14163: PPUSH
14164: LD_VAR 0 4
14168: PPUSH
14169: CALL_OW 380
// end else
14173: GO 14192
// PrepareHuman ( false , i , skill ) ;
14175: LD_INT 0
14177: PPUSH
14178: LD_VAR 0 9
14182: PPUSH
14183: LD_VAR 0 4
14187: PPUSH
14188: CALL_OW 380
// un := CreateHuman ;
14192: LD_ADDR_VAR 0 15
14196: PUSH
14197: CALL_OW 44
14201: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14202: LD_ADDR_VAR 0 8
14206: PUSH
14207: LD_VAR 0 8
14211: PPUSH
14212: LD_INT 1
14214: PPUSH
14215: LD_VAR 0 15
14219: PPUSH
14220: CALL_OW 2
14224: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14225: LD_VAR 0 15
14229: PPUSH
14230: LD_VAR 0 13
14234: PUSH
14235: LD_INT 1
14237: ARRAY
14238: PPUSH
14239: CALL_OW 52
// end ;
14243: GO 13859
14245: POP
14246: POP
// end ;
14247: GO 13147
14249: POP
14250: POP
// result := result ^ buildings ;
14251: LD_ADDR_VAR 0 8
14255: PUSH
14256: LD_VAR 0 8
14260: PUSH
14261: LD_VAR 0 18
14265: ADD
14266: ST_TO_ADDR
// end else
14267: GO 14410
// begin for i = 1 to personel do
14269: LD_ADDR_VAR 0 9
14273: PUSH
14274: DOUBLE
14275: LD_INT 1
14277: DEC
14278: ST_TO_ADDR
14279: LD_VAR 0 7
14283: PUSH
14284: FOR_TO
14285: IFFALSE 14408
// begin if i > 4 then
14287: LD_VAR 0 9
14291: PUSH
14292: LD_INT 4
14294: GREATER
14295: IFFALSE 14299
// break ;
14297: GO 14408
// x := personel [ i ] ;
14299: LD_ADDR_VAR 0 14
14303: PUSH
14304: LD_VAR 0 7
14308: PUSH
14309: LD_VAR 0 9
14313: ARRAY
14314: ST_TO_ADDR
// if x = - 1 then
14315: LD_VAR 0 14
14319: PUSH
14320: LD_INT 1
14322: NEG
14323: EQUAL
14324: IFFALSE 14328
// continue ;
14326: GO 14284
// PrepareHuman ( false , i , skill ) ;
14328: LD_INT 0
14330: PPUSH
14331: LD_VAR 0 9
14335: PPUSH
14336: LD_VAR 0 4
14340: PPUSH
14341: CALL_OW 380
// un := CreateHuman ;
14345: LD_ADDR_VAR 0 15
14349: PUSH
14350: CALL_OW 44
14354: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14355: LD_VAR 0 15
14359: PPUSH
14360: LD_VAR 0 1
14364: PPUSH
14365: CALL_OW 250
14369: PPUSH
14370: LD_VAR 0 1
14374: PPUSH
14375: CALL_OW 251
14379: PPUSH
14380: LD_INT 10
14382: PPUSH
14383: LD_INT 0
14385: PPUSH
14386: CALL_OW 50
// result := result ^ un ;
14390: LD_ADDR_VAR 0 8
14394: PUSH
14395: LD_VAR 0 8
14399: PUSH
14400: LD_VAR 0 15
14404: ADD
14405: ST_TO_ADDR
// end ;
14406: GO 14284
14408: POP
14409: POP
// end ; end ;
14410: LD_VAR 0 8
14414: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
14415: LD_INT 0
14417: PPUSH
14418: PPUSH
14419: PPUSH
14420: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
14421: LD_ADDR_VAR 0 6
14425: PUSH
14426: LD_INT 34
14428: PUSH
14429: LD_INT 71
14431: PUSH
14432: LD_INT 70
14434: PUSH
14435: LD_INT 69
14437: PUSH
14438: LD_INT 39
14440: PUSH
14441: LD_INT 31
14443: PUSH
14444: LD_INT 14
14446: PUSH
14447: LD_INT 10
14449: PUSH
14450: LD_INT 40
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: ST_TO_ADDR
// resultWeapons = [ ] ;
14464: LD_ADDR_VAR 0 5
14468: PUSH
14469: EMPTY
14470: ST_TO_ADDR
// for i := 1 to weaponTechs do
14471: LD_ADDR_VAR 0 4
14475: PUSH
14476: DOUBLE
14477: LD_INT 1
14479: DEC
14480: ST_TO_ADDR
14481: LD_VAR 0 6
14485: PUSH
14486: FOR_TO
14487: IFFALSE 14674
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
14489: LD_VAR 0 6
14493: PUSH
14494: LD_VAR 0 4
14498: ARRAY
14499: PPUSH
14500: LD_VAR 0 2
14504: PPUSH
14505: CALL_OW 482
14509: PUSH
14510: LD_VAR 0 6
14514: PUSH
14515: LD_VAR 0 4
14519: ARRAY
14520: PPUSH
14521: LD_VAR 0 1
14525: PPUSH
14526: CALL_OW 321
14530: PUSH
14531: LD_INT 2
14533: EQUAL
14534: AND
14535: IFFALSE 14672
// case nation of nation_american :
14537: LD_VAR 0 2
14541: PUSH
14542: LD_INT 1
14544: DOUBLE
14545: EQUAL
14546: IFTRUE 14550
14548: GO 14585
14550: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
14551: LD_ADDR_VAR 0 5
14555: PUSH
14556: LD_VAR 0 5
14560: PUSH
14561: LD_VAR 0 6
14565: PUSH
14566: LD_VAR 0 4
14570: ARRAY
14571: PPUSH
14572: LD_VAR 0 2
14576: PPUSH
14577: CALL 14691 0 2
14581: ADD
14582: ST_TO_ADDR
14583: GO 14672
14585: LD_INT 2
14587: DOUBLE
14588: EQUAL
14589: IFTRUE 14593
14591: GO 14628
14593: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
14594: LD_ADDR_VAR 0 5
14598: PUSH
14599: LD_VAR 0 5
14603: PUSH
14604: LD_VAR 0 6
14608: PUSH
14609: LD_VAR 0 4
14613: ARRAY
14614: PPUSH
14615: LD_VAR 0 2
14619: PPUSH
14620: CALL 14691 0 2
14624: ADD
14625: ST_TO_ADDR
14626: GO 14672
14628: LD_INT 3
14630: DOUBLE
14631: EQUAL
14632: IFTRUE 14636
14634: GO 14671
14636: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
14637: LD_ADDR_VAR 0 5
14641: PUSH
14642: LD_VAR 0 5
14646: PUSH
14647: LD_VAR 0 6
14651: PUSH
14652: LD_VAR 0 4
14656: ARRAY
14657: PPUSH
14658: LD_VAR 0 2
14662: PPUSH
14663: CALL 14691 0 2
14667: ADD
14668: ST_TO_ADDR
14669: GO 14672
14671: POP
// end ;
14672: GO 14486
14674: POP
14675: POP
// result = resultWeapons ;
14676: LD_ADDR_VAR 0 3
14680: PUSH
14681: LD_VAR 0 5
14685: ST_TO_ADDR
// end ;
14686: LD_VAR 0 3
14690: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
14691: LD_INT 0
14693: PPUSH
// case tech of tech_AdvMet :
14694: LD_VAR 0 1
14698: PUSH
14699: LD_INT 34
14701: DOUBLE
14702: EQUAL
14703: IFTRUE 14707
14705: GO 14735
14707: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
14708: LD_ADDR_VAR 0 3
14712: PUSH
14713: LD_INT 6
14715: PUSH
14716: LD_STRING 
14718: PUSH
14719: LD_INT 46
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: LIST
14726: PUSH
14727: LD_VAR 0 2
14731: ARRAY
14732: ST_TO_ADDR
14733: GO 15024
14735: LD_INT 71
14737: DOUBLE
14738: EQUAL
14739: IFTRUE 14743
14741: GO 14771
14743: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
14744: LD_ADDR_VAR 0 3
14748: PUSH
14749: LD_STRING 
14751: PUSH
14752: LD_STRING 
14754: PUSH
14755: LD_INT 47
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: LIST
14762: PUSH
14763: LD_VAR 0 2
14767: ARRAY
14768: ST_TO_ADDR
14769: GO 15024
14771: LD_INT 70
14773: DOUBLE
14774: EQUAL
14775: IFTRUE 14779
14777: GO 14807
14779: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
14780: LD_ADDR_VAR 0 3
14784: PUSH
14785: LD_STRING 
14787: PUSH
14788: LD_INT 26
14790: PUSH
14791: LD_STRING 
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: LIST
14798: PUSH
14799: LD_VAR 0 2
14803: ARRAY
14804: ST_TO_ADDR
14805: GO 15024
14807: LD_INT 69
14809: DOUBLE
14810: EQUAL
14811: IFTRUE 14815
14813: GO 14843
14815: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
14816: LD_ADDR_VAR 0 3
14820: PUSH
14821: LD_INT 4
14823: PUSH
14824: LD_INT 25
14826: PUSH
14827: LD_INT 43
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: LIST
14834: PUSH
14835: LD_VAR 0 2
14839: ARRAY
14840: ST_TO_ADDR
14841: GO 15024
14843: LD_INT 39
14845: DOUBLE
14846: EQUAL
14847: IFTRUE 14851
14849: GO 14879
14851: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
14852: LD_ADDR_VAR 0 3
14856: PUSH
14857: LD_INT 5
14859: PUSH
14860: LD_INT 27
14862: PUSH
14863: LD_INT 44
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: LIST
14870: PUSH
14871: LD_VAR 0 2
14875: ARRAY
14876: ST_TO_ADDR
14877: GO 15024
14879: LD_INT 31
14881: DOUBLE
14882: EQUAL
14883: IFTRUE 14887
14885: GO 14915
14887: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
14888: LD_ADDR_VAR 0 3
14892: PUSH
14893: LD_STRING 
14895: PUSH
14896: LD_STRING 
14898: PUSH
14899: LD_INT 49
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: LIST
14906: PUSH
14907: LD_VAR 0 2
14911: ARRAY
14912: ST_TO_ADDR
14913: GO 15024
14915: LD_INT 14
14917: DOUBLE
14918: EQUAL
14919: IFTRUE 14923
14921: GO 14951
14923: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
14924: LD_ADDR_VAR 0 3
14928: PUSH
14929: LD_INT 10
14931: PUSH
14932: LD_STRING 
14934: PUSH
14935: LD_STRING 
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: LIST
14942: PUSH
14943: LD_VAR 0 2
14947: ARRAY
14948: ST_TO_ADDR
14949: GO 15024
14951: LD_INT 10
14953: DOUBLE
14954: EQUAL
14955: IFTRUE 14959
14957: GO 14987
14959: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
14960: LD_ADDR_VAR 0 3
14964: PUSH
14965: LD_INT 9
14967: PUSH
14968: LD_STRING 
14970: PUSH
14971: LD_STRING 
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: LIST
14978: PUSH
14979: LD_VAR 0 2
14983: ARRAY
14984: ST_TO_ADDR
14985: GO 15024
14987: LD_INT 40
14989: DOUBLE
14990: EQUAL
14991: IFTRUE 14995
14993: GO 15023
14995: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
14996: LD_ADDR_VAR 0 3
15000: PUSH
15001: LD_INT 7
15003: PUSH
15004: LD_INT 28
15006: PUSH
15007: LD_INT 45
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: LIST
15014: PUSH
15015: LD_VAR 0 2
15019: ARRAY
15020: ST_TO_ADDR
15021: GO 15024
15023: POP
// end ;
15024: LD_VAR 0 3
15028: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
15029: LD_INT 0
15031: PPUSH
15032: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
15033: LD_ADDR_VAR 0 2
15037: PUSH
15038: LD_VAR 0 1
15042: PPUSH
15043: LD_INT 1
15045: PPUSH
15046: CALL_OW 289
15050: PUSH
15051: LD_VAR 0 1
15055: PPUSH
15056: LD_INT 2
15058: PPUSH
15059: CALL_OW 289
15063: PUSH
15064: LD_VAR 0 1
15068: PPUSH
15069: LD_INT 3
15071: PPUSH
15072: CALL_OW 289
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: LIST
15081: ST_TO_ADDR
// end ;
15082: LD_VAR 0 2
15086: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
15087: LD_INT 0
15089: PPUSH
15090: PPUSH
// area = ListEnvironmentArea ( area ) ;
15091: LD_ADDR_VAR 0 2
15095: PUSH
15096: LD_VAR 0 2
15100: PPUSH
15101: CALL_OW 353
15105: ST_TO_ADDR
// if bulldozer > 0 then
15106: LD_VAR 0 1
15110: PUSH
15111: LD_INT 0
15113: GREATER
15114: IFFALSE 15225
// for i = area downto 1 do
15116: LD_ADDR_VAR 0 4
15120: PUSH
15121: DOUBLE
15122: LD_VAR 0 2
15126: INC
15127: ST_TO_ADDR
15128: LD_INT 1
15130: PUSH
15131: FOR_DOWNTO
15132: IFFALSE 15223
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
15134: LD_VAR 0 2
15138: PUSH
15139: LD_VAR 0 4
15143: ARRAY
15144: PUSH
15145: LD_INT 1
15147: ARRAY
15148: PPUSH
15149: LD_VAR 0 2
15153: PUSH
15154: LD_VAR 0 4
15158: ARRAY
15159: PUSH
15160: LD_INT 2
15162: ARRAY
15163: PPUSH
15164: CALL_OW 351
15168: IFFALSE 15221
// if not HasTask ( bulldozer ) then
15170: LD_VAR 0 1
15174: PPUSH
15175: CALL_OW 314
15179: NOT
15180: IFFALSE 15221
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
15182: LD_VAR 0 1
15186: PPUSH
15187: LD_VAR 0 2
15191: PUSH
15192: LD_VAR 0 4
15196: ARRAY
15197: PUSH
15198: LD_INT 1
15200: ARRAY
15201: PPUSH
15202: LD_VAR 0 2
15206: PUSH
15207: LD_VAR 0 4
15211: ARRAY
15212: PUSH
15213: LD_INT 2
15215: ARRAY
15216: PPUSH
15217: CALL_OW 171
15221: GO 15131
15223: POP
15224: POP
// end ;
15225: LD_VAR 0 3
15229: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
15230: LD_INT 0
15232: PPUSH
15233: PPUSH
15234: PPUSH
// uc_side := GetSide ( b ) ;
15235: LD_ADDR_OWVAR 20
15239: PUSH
15240: LD_VAR 0 2
15244: PPUSH
15245: CALL_OW 255
15249: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
15250: LD_ADDR_OWVAR 21
15254: PUSH
15255: LD_VAR 0 2
15259: PPUSH
15260: CALL_OW 248
15264: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
15265: LD_INT 0
15267: PPUSH
15268: LD_INT 1
15270: PPUSH
15271: LD_VAR 0 1
15275: PPUSH
15276: CALL_OW 380
// un = CreateHuman ;
15280: LD_ADDR_VAR 0 4
15284: PUSH
15285: CALL_OW 44
15289: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
15290: LD_ADDR_VAR 0 5
15294: PUSH
15295: LD_VAR 0 2
15299: PPUSH
15300: CALL_OW 254
15304: PUSH
15305: LD_INT 3
15307: MINUS
15308: ST_TO_ADDR
// if dir < 0 then
15309: LD_VAR 0 5
15313: PUSH
15314: LD_INT 0
15316: LESS
15317: IFFALSE 15333
// dir := 6 + dir ;
15319: LD_ADDR_VAR 0 5
15323: PUSH
15324: LD_INT 6
15326: PUSH
15327: LD_VAR 0 5
15331: PLUS
15332: ST_TO_ADDR
// SetDir ( un , dir ) ;
15333: LD_VAR 0 4
15337: PPUSH
15338: LD_VAR 0 5
15342: PPUSH
15343: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
15347: LD_VAR 0 4
15351: PPUSH
15352: LD_VAR 0 2
15356: PPUSH
15357: CALL_OW 52
// result = un ;
15361: LD_ADDR_VAR 0 3
15365: PUSH
15366: LD_VAR 0 4
15370: ST_TO_ADDR
// end ;
15371: LD_VAR 0 3
15375: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others , max , test1 , test2 ; begin
15376: LD_INT 0
15378: PPUSH
15379: PPUSH
15380: PPUSH
15381: PPUSH
15382: PPUSH
15383: PPUSH
15384: PPUSH
15385: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Burlak , Vsevolod ] ;
15386: LD_ADDR_VAR 0 3
15390: PUSH
15391: LD_INT 22
15393: PUSH
15394: LD_INT 3
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 21
15403: PUSH
15404: LD_INT 1
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 23
15413: PUSH
15414: LD_INT 3
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: LIST
15425: PPUSH
15426: CALL_OW 69
15430: PUSH
15431: LD_EXP 39
15435: PUSH
15436: LD_EXP 51
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: DIFF
15445: ST_TO_ADDR
// charsToChoose = charsToChoose diff vsevolodTeam ;
15446: LD_ADDR_VAR 0 3
15450: PUSH
15451: LD_VAR 0 3
15455: PUSH
15456: LD_EXP 52
15460: DIFF
15461: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam diff Vsevolod ;
15462: LD_ADDR_EXP 52
15466: PUSH
15467: LD_EXP 52
15471: PUSH
15472: LD_EXP 51
15476: DIFF
15477: ST_TO_ADDR
// max = charsToChoose div 2 + charsToChoose mod 2 ;
15478: LD_ADDR_VAR 0 6
15482: PUSH
15483: LD_VAR 0 3
15487: PUSH
15488: LD_INT 2
15490: DIV
15491: PUSH
15492: LD_VAR 0 3
15496: PUSH
15497: LD_INT 2
15499: MOD
15500: PLUS
15501: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 0 , 3 , [ Burlak , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_not_hired ] ^ vsevolodTeam ^ [ sel_not_changeable , Vsevolod ] , [ class_soldier , class_mechanic , class_engineer , class_scientistic ] ) ;
15502: LD_ADDR_VAR 0 4
15506: PUSH
15507: LD_STRING text
15509: PPUSH
15510: LD_INT 0
15512: PPUSH
15513: LD_INT 3
15515: PPUSH
15516: LD_EXP 39
15520: PUSH
15521: LD_INT -3
15523: PUSH
15524: LD_INT -5
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: PUSH
15532: LD_VAR 0 3
15536: ADD
15537: PUSH
15538: LD_INT -2
15540: PUSH
15541: EMPTY
15542: LIST
15543: ADD
15544: PUSH
15545: LD_EXP 52
15549: ADD
15550: PUSH
15551: LD_INT -4
15553: PUSH
15554: LD_EXP 51
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: ADD
15563: PPUSH
15564: LD_INT 1
15566: PUSH
15567: LD_INT 3
15569: PUSH
15570: LD_INT 2
15572: PUSH
15573: LD_INT 4
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: PPUSH
15582: CALL_OW 42
15586: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) , 6 ) ;
15587: LD_INT 22
15589: PUSH
15590: LD_INT 3
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 21
15599: PUSH
15600: LD_INT 1
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: LD_INT 23
15609: PUSH
15610: LD_INT 3
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: LIST
15621: PPUSH
15622: CALL_OW 69
15626: PPUSH
15627: LD_INT 6
15629: PPUSH
15630: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
15634: LD_VAR 0 4
15638: PPUSH
15639: LD_INT 3
15641: PPUSH
15642: CALL_OW 235
// SetSide ( Burlak , 3 ) ;
15646: LD_EXP 39
15650: PPUSH
15651: LD_INT 3
15653: PPUSH
15654: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
15658: LD_ADDR_VAR 0 2
15662: PUSH
15663: LD_INT 22
15665: PUSH
15666: LD_INT 6
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: LD_INT 21
15675: PUSH
15676: LD_INT 1
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PPUSH
15687: CALL_OW 69
15691: PUSH
15692: FOR_IN
15693: IFFALSE 15726
// if IsInUnit ( i ) then
15695: LD_VAR 0 2
15699: PPUSH
15700: CALL_OW 310
15704: IFFALSE 15724
// begin ComExitVehicle ( i ) ;
15706: LD_VAR 0 2
15710: PPUSH
15711: CALL_OW 121
// ComExitBuilding ( i ) ;
15715: LD_VAR 0 2
15719: PPUSH
15720: CALL_OW 122
// end ;
15724: GO 15692
15726: POP
15727: POP
// if not Vsevolod in selectedPeople then
15728: LD_EXP 51
15732: PUSH
15733: LD_VAR 0 4
15737: IN
15738: NOT
15739: IFFALSE 15756
// ExtSaveCharacter ( Vsevolod , Vsevolod , 6 ) ;
15741: LD_EXP 51
15745: PPUSH
15746: LD_STRING Vsevolod
15748: PPUSH
15749: LD_INT 6
15751: PPUSH
15752: CALL 11903 0 3
// if not Karamazov in selectedPeople then
15756: LD_EXP 40
15760: PUSH
15761: LD_VAR 0 4
15765: IN
15766: NOT
15767: IFFALSE 15784
// ExtSaveCharacter ( Karamazov , VSKaramazov , 6 ) ;
15769: LD_EXP 40
15773: PPUSH
15774: LD_STRING VSKaramazov
15776: PPUSH
15777: LD_INT 6
15779: PPUSH
15780: CALL 11903 0 3
// if not Petrovova in selectedPeople then
15784: LD_EXP 41
15788: PUSH
15789: LD_VAR 0 4
15793: IN
15794: NOT
15795: IFFALSE 15812
// ExtSaveCharacter ( Petrovova , VSPetrovova , 6 ) ;
15797: LD_EXP 41
15801: PPUSH
15802: LD_STRING VSPetrovova
15804: PPUSH
15805: LD_INT 6
15807: PPUSH
15808: CALL 11903 0 3
// if not Gleb in selectedPeople then
15812: LD_EXP 42
15816: PUSH
15817: LD_VAR 0 4
15821: IN
15822: NOT
15823: IFFALSE 15840
// ExtSaveCharacter ( Gleb , VSGleb , 6 ) ;
15825: LD_EXP 42
15829: PPUSH
15830: LD_STRING VSGleb
15832: PPUSH
15833: LD_INT 6
15835: PPUSH
15836: CALL 11903 0 3
// if not Petrosyan in selectedPeople then
15840: LD_EXP 43
15844: PUSH
15845: LD_VAR 0 4
15849: IN
15850: NOT
15851: IFFALSE 15868
// ExtSaveCharacter ( Petrosyan , VSPetrosyan , 6 ) ;
15853: LD_EXP 43
15857: PPUSH
15858: LD_STRING VSPetrosyan
15860: PPUSH
15861: LD_INT 6
15863: PPUSH
15864: CALL 11903 0 3
// if not Titov in selectedPeople then
15868: LD_EXP 44
15872: PUSH
15873: LD_VAR 0 4
15877: IN
15878: NOT
15879: IFFALSE 15896
// ExtSaveCharacter ( Titov , VSTitov , 6 ) ;
15881: LD_EXP 44
15885: PPUSH
15886: LD_STRING VSTitov
15888: PPUSH
15889: LD_INT 6
15891: PPUSH
15892: CALL 11903 0 3
// if not Dolgov in selectedPeople then
15896: LD_EXP 45
15900: PUSH
15901: LD_VAR 0 4
15905: IN
15906: NOT
15907: IFFALSE 15924
// ExtSaveCharacter ( Dolgov , VSDolgov , 6 ) ;
15909: LD_EXP 45
15913: PPUSH
15914: LD_STRING VSDolgov
15916: PPUSH
15917: LD_INT 6
15919: PPUSH
15920: CALL 11903 0 3
// if not Lipshchin in selectedPeople then
15924: LD_EXP 46
15928: PUSH
15929: LD_VAR 0 4
15933: IN
15934: NOT
15935: IFFALSE 15952
// ExtSaveCharacter ( Lipshchin , VSLipshchin , 6 ) ;
15937: LD_EXP 46
15941: PPUSH
15942: LD_STRING VSLipshchin
15944: PPUSH
15945: LD_INT 6
15947: PPUSH
15948: CALL 11903 0 3
// others = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod ] ;
15952: LD_ADDR_VAR 0 5
15956: PUSH
15957: LD_INT 22
15959: PUSH
15960: LD_INT 6
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: LD_INT 21
15969: PUSH
15970: LD_INT 1
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: LD_INT 23
15979: PUSH
15980: LD_INT 3
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: LIST
15991: PPUSH
15992: CALL_OW 69
15996: PUSH
15997: LD_EXP 40
16001: PUSH
16002: LD_EXP 41
16006: PUSH
16007: LD_EXP 42
16011: PUSH
16012: LD_EXP 43
16016: PUSH
16017: LD_EXP 44
16021: PUSH
16022: LD_EXP 45
16026: PUSH
16027: LD_EXP 46
16031: PUSH
16032: LD_EXP 51
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: DIFF
16047: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_vsevolod , 6 ) ;
16048: LD_VAR 0 5
16052: PPUSH
16053: LD_STRING other_survivors_with_vsevolod
16055: PPUSH
16056: LD_INT 6
16058: PPUSH
16059: CALL 11959 0 3
// end ; end_of_file
16063: LD_VAR 0 1
16067: RET
// export function MissionIntro ; var i , ruEng , unit ; begin
16068: LD_INT 0
16070: PPUSH
16071: PPUSH
16072: PPUSH
16073: PPUSH
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) ;
16074: LD_EXP 39
16078: PPUSH
16079: CALL_OW 310
16083: PPUSH
16084: CALL_OW 87
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
16088: LD_ADDR_VAR 0 4
16092: PUSH
16093: LD_INT 22
16095: PUSH
16096: LD_INT 3
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: LD_INT 21
16105: PUSH
16106: LD_INT 2
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PPUSH
16117: CALL_OW 69
16121: PUSH
16122: FOR_IN
16123: IFFALSE 16187
// begin if ( i mod 2 ) = 0 then
16125: LD_VAR 0 2
16129: PUSH
16130: LD_INT 2
16132: MOD
16133: PUSH
16134: LD_INT 0
16136: EQUAL
16137: IFFALSE 16156
// ComMoveXY ( unit , 156 , 205 ) else
16139: LD_VAR 0 4
16143: PPUSH
16144: LD_INT 156
16146: PPUSH
16147: LD_INT 205
16149: PPUSH
16150: CALL_OW 111
16154: GO 16171
// ComMoveXY ( unit , 160 , 215 ) ;
16156: LD_VAR 0 4
16160: PPUSH
16161: LD_INT 160
16163: PPUSH
16164: LD_INT 215
16166: PPUSH
16167: CALL_OW 111
// i = i + 1 ;
16171: LD_ADDR_VAR 0 2
16175: PUSH
16176: LD_VAR 0 2
16180: PUSH
16181: LD_INT 1
16183: PLUS
16184: ST_TO_ADDR
// end ;
16185: GO 16122
16187: POP
16188: POP
// if IsOK ( Karamazov ) then
16189: LD_EXP 40
16193: PPUSH
16194: CALL_OW 302
16198: IFFALSE 16212
// ruEng = Karamazov else
16200: LD_ADDR_VAR 0 3
16204: PUSH
16205: LD_EXP 40
16209: ST_TO_ADDR
16210: GO 16295
// if IsOK ( Lipshchin ) then
16212: LD_EXP 46
16216: PPUSH
16217: CALL_OW 302
16221: IFFALSE 16235
// ruEng = Lipshchin else
16223: LD_ADDR_VAR 0 3
16227: PUSH
16228: LD_EXP 46
16232: ST_TO_ADDR
16233: GO 16295
// ruEng = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_class , class_engineer ] ] ) [ 1 ] ;
16235: LD_ADDR_VAR 0 3
16239: PUSH
16240: LD_INT 22
16242: PUSH
16243: LD_INT 3
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 21
16252: PUSH
16253: LD_INT 1
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 23
16262: PUSH
16263: LD_INT 3
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 25
16272: PUSH
16273: LD_INT 2
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: PPUSH
16286: CALL_OW 69
16290: PUSH
16291: LD_INT 1
16293: ARRAY
16294: ST_TO_ADDR
// wait ( 0 0$3 ) ;
16295: LD_INT 105
16297: PPUSH
16298: CALL_OW 67
// CenterOnXY ( 160 , 213 ) ;
16302: LD_INT 160
16304: PPUSH
16305: LD_INT 213
16307: PPUSH
16308: CALL_OW 84
// wait ( 0 0$3 ) ;
16312: LD_INT 105
16314: PPUSH
16315: CALL_OW 67
// CenterOnXY ( 149 , 211 ) ;
16319: LD_INT 149
16321: PPUSH
16322: LD_INT 211
16324: PPUSH
16325: CALL_OW 84
// repeat ComMoveXY ( IsInUnit ( ruEng ) , 149 , 212 ) ;
16329: LD_VAR 0 3
16333: PPUSH
16334: CALL_OW 310
16338: PPUSH
16339: LD_INT 149
16341: PPUSH
16342: LD_INT 212
16344: PPUSH
16345: CALL_OW 111
// wait ( 0 0$1 ) ;
16349: LD_INT 35
16351: PPUSH
16352: CALL_OW 67
// until GetDistUnitXY ( IsInUnit ( ruEng ) , 149 , 212 ) <= 2 ;
16356: LD_VAR 0 3
16360: PPUSH
16361: CALL_OW 310
16365: PPUSH
16366: LD_INT 149
16368: PPUSH
16369: LD_INT 212
16371: PPUSH
16372: CALL_OW 297
16376: PUSH
16377: LD_INT 2
16379: LESSEQUAL
16380: IFFALSE 16329
// ComExitVehicle ( ruEng ) ;
16382: LD_VAR 0 3
16386: PPUSH
16387: CALL_OW 121
// wait ( 0 0$1 ) ;
16391: LD_INT 35
16393: PPUSH
16394: CALL_OW 67
// AddComCaptureBuilding ( ruEng , rudepot ) ;
16398: LD_VAR 0 3
16402: PPUSH
16403: LD_INT 74
16405: PPUSH
16406: CALL 12475 0 2
// repeat wait ( 0 0$1 ) ;
16410: LD_INT 35
16412: PPUSH
16413: CALL_OW 67
// until GetSide ( rudepot ) = 3 ;
16417: LD_INT 74
16419: PPUSH
16420: CALL_OW 255
16424: PUSH
16425: LD_INT 3
16427: EQUAL
16428: IFFALSE 16410
// ComEnterUnit ( ruEng , rudepot ) ;
16430: LD_VAR 0 3
16434: PPUSH
16435: LD_INT 74
16437: PPUSH
16438: CALL_OW 120
// wait ( 0 0$2 ) ;
16442: LD_INT 70
16444: PPUSH
16445: CALL_OW 67
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
16449: LD_INT 22
16451: PUSH
16452: LD_INT 6
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PPUSH
16459: CALL_OW 69
16463: PPUSH
16464: LD_INT 3
16466: PPUSH
16467: CALL_OW 235
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
16471: LD_ADDR_VAR 0 4
16475: PUSH
16476: LD_INT 22
16478: PUSH
16479: LD_INT 3
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 21
16488: PUSH
16489: LD_INT 1
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PPUSH
16500: CALL_OW 69
16504: PUSH
16505: FOR_IN
16506: IFFALSE 16539
// if GetType ( IsInUnit ( unit ) ) = unit_vehicle then
16508: LD_VAR 0 4
16512: PPUSH
16513: CALL_OW 310
16517: PPUSH
16518: CALL_OW 247
16522: PUSH
16523: LD_INT 2
16525: EQUAL
16526: IFFALSE 16537
// ComExitVehicle ( unit ) ;
16528: LD_VAR 0 4
16532: PPUSH
16533: CALL_OW 121
16537: GO 16505
16539: POP
16540: POP
// if ruEng = Karamazov then
16541: LD_VAR 0 3
16545: PUSH
16546: LD_EXP 40
16550: EQUAL
16551: IFFALSE 16567
// Say ( Karamazov , DStart-Kar-1 ) else
16553: LD_EXP 40
16557: PPUSH
16558: LD_STRING DStart-Kar-1
16560: PPUSH
16561: CALL_OW 88
16565: GO 16591
// if ruEng = Lipshchin then
16567: LD_VAR 0 3
16571: PUSH
16572: LD_EXP 46
16576: EQUAL
16577: IFFALSE 16591
// Say ( Lipshchin , DStart-Lip-1 ) ;
16579: LD_EXP 46
16583: PPUSH
16584: LD_STRING DStart-Lip-1
16586: PPUSH
16587: CALL_OW 88
// ComExitBuilding ( ruEng ) ;
16591: LD_VAR 0 3
16595: PPUSH
16596: CALL_OW 122
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 250 ] ] ] ) do
16600: LD_ADDR_VAR 0 4
16604: PUSH
16605: LD_INT 22
16607: PUSH
16608: LD_INT 3
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: LD_INT 21
16617: PUSH
16618: LD_INT 3
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 3
16627: PUSH
16628: LD_INT 24
16630: PUSH
16631: LD_INT 250
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: LIST
16646: PPUSH
16647: CALL_OW 69
16651: PUSH
16652: FOR_IN
16653: IFFALSE 16706
// AddComRepairBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , unit ) ;
16655: LD_INT 22
16657: PUSH
16658: LD_INT 3
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PUSH
16665: LD_INT 21
16667: PUSH
16668: LD_INT 1
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: PUSH
16675: LD_INT 25
16677: PUSH
16678: LD_INT 2
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: LIST
16689: PPUSH
16690: CALL_OW 69
16694: PPUSH
16695: LD_VAR 0 4
16699: PPUSH
16700: CALL_OW 190
16704: GO 16652
16706: POP
16707: POP
// Say ( Burlak , DStart-Bur-1 ) ;
16708: LD_EXP 39
16712: PPUSH
16713: LD_STRING DStart-Bur-1
16715: PPUSH
16716: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-1 ) ;
16720: LD_EXP 47
16724: PPUSH
16725: LD_STRING DStart-Pla-1
16727: PPUSH
16728: CALL_OW 94
// Say ( Burlak , DStart-Bur-2 ) ;
16732: LD_EXP 39
16736: PPUSH
16737: LD_STRING DStart-Bur-2
16739: PPUSH
16740: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-2 ) ;
16744: LD_EXP 47
16748: PPUSH
16749: LD_STRING DStart-Pla-2
16751: PPUSH
16752: CALL_OW 94
// if IsOK ( Petrovova ) then
16756: LD_EXP 41
16760: PPUSH
16761: CALL_OW 302
16765: IFFALSE 16779
// Say ( Petrovova , DStart-Ptr-2 ) ;
16767: LD_EXP 41
16771: PPUSH
16772: LD_STRING DStart-Ptr-2
16774: PPUSH
16775: CALL_OW 88
// InGameOff ;
16779: CALL_OW 9
// ChangeMissionObjectives ( MStart ) ;
16783: LD_STRING MStart
16785: PPUSH
16786: CALL_OW 337
// SaveForQuickRestart ;
16790: CALL_OW 22
// wait ( 0 0$10 ) ;
16794: LD_INT 350
16796: PPUSH
16797: CALL_OW 67
// if IsOK ( Petrosyan ) then
16801: LD_EXP 43
16805: PPUSH
16806: CALL_OW 302
16810: IFFALSE 16826
// Say ( Petrosyan , DMatPrediction-Pty-1 ) else
16812: LD_EXP 43
16816: PPUSH
16817: LD_STRING DMatPrediction-Pty-1
16819: PPUSH
16820: CALL_OW 88
16824: GO 16849
// if IsOK ( Dolgov ) then
16826: LD_EXP 45
16830: PPUSH
16831: CALL_OW 302
16835: IFFALSE 16849
// Say ( Dolgov , DMatPrediction-Dol-1 ) ;
16837: LD_EXP 45
16841: PPUSH
16842: LD_STRING DMatPrediction-Dol-1
16844: PPUSH
16845: CALL_OW 88
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16849: LD_EXP 43
16853: PPUSH
16854: CALL_OW 302
16858: PUSH
16859: LD_EXP 45
16863: PPUSH
16864: CALL_OW 302
16868: OR
16869: IFFALSE 16883
// Say ( Burlak , DMatPrediction-Bur-1 ) ;
16871: LD_EXP 39
16875: PPUSH
16876: LD_STRING DMatPrediction-Bur-1
16878: PPUSH
16879: CALL_OW 88
// if IsOK ( Petrosyan ) then
16883: LD_EXP 43
16887: PPUSH
16888: CALL_OW 302
16892: IFFALSE 16908
// Say ( Petrosyan , DMatPrediction-Pty-2 ) else
16894: LD_EXP 43
16898: PPUSH
16899: LD_STRING DMatPrediction-Pty-2
16901: PPUSH
16902: CALL_OW 88
16906: GO 16931
// if IsOK ( Dolgov ) then
16908: LD_EXP 45
16912: PPUSH
16913: CALL_OW 302
16917: IFFALSE 16931
// Say ( Dolgov , DMatPrediction-Dol-2 ) ;
16919: LD_EXP 45
16923: PPUSH
16924: LD_STRING DMatPrediction-Dol-2
16926: PPUSH
16927: CALL_OW 88
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16931: LD_EXP 43
16935: PPUSH
16936: CALL_OW 302
16940: PUSH
16941: LD_EXP 45
16945: PPUSH
16946: CALL_OW 302
16950: OR
16951: IFFALSE 16965
// Say ( Burlak , DMatPrediction-Bur-2 ) ;
16953: LD_EXP 39
16957: PPUSH
16958: LD_STRING DMatPrediction-Bur-2
16960: PPUSH
16961: CALL_OW 88
// if IsOK ( Petrosyan ) then
16965: LD_EXP 43
16969: PPUSH
16970: CALL_OW 302
16974: IFFALSE 16990
// Say ( Petrosyan , DMatPrediction-Pty-3 ) else
16976: LD_EXP 43
16980: PPUSH
16981: LD_STRING DMatPrediction-Pty-3
16983: PPUSH
16984: CALL_OW 88
16988: GO 17013
// if IsOK ( Dolgov ) then
16990: LD_EXP 45
16994: PPUSH
16995: CALL_OW 302
16999: IFFALSE 17013
// Say ( Dolgov , DMatPrediction-Dol-3 ) ;
17001: LD_EXP 45
17005: PPUSH
17006: LD_STRING DMatPrediction-Dol-3
17008: PPUSH
17009: CALL_OW 88
// ChangeMissionObjectives ( MPred ) ;
17013: LD_STRING MPred
17015: PPUSH
17016: CALL_OW 337
// end ;
17020: LD_VAR 0 1
17024: RET
// every 0 0$1 trigger not UnitFilter ( ovsyenkoBase , [ f_type , unit_human ] ) do
17025: LD_EXP 59
17029: PPUSH
17030: LD_INT 21
17032: PUSH
17033: LD_INT 1
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PPUSH
17040: CALL_OW 72
17044: NOT
17045: IFFALSE 17267
17047: GO 17049
17049: DISABLE
// begin DialogueOn ;
17050: CALL_OW 6
// Say ( Burlak , DOvsyenkoTaken-Bur-1 ) ;
17054: LD_EXP 39
17058: PPUSH
17059: LD_STRING DOvsyenkoTaken-Bur-1
17061: PPUSH
17062: CALL_OW 88
// SayRadio ( Platonov , DOvsyenkoTaken-Pla-1 ) ;
17066: LD_EXP 47
17070: PPUSH
17071: LD_STRING DOvsyenkoTaken-Pla-1
17073: PPUSH
17074: CALL_OW 94
// if IsOK ( Karamazov ) then
17078: LD_EXP 40
17082: PPUSH
17083: CALL_OW 302
17087: IFFALSE 17101
// Say ( Karamazov , DOvsyenkoTaken-Kar-1 ) ;
17089: LD_EXP 40
17093: PPUSH
17094: LD_STRING DOvsyenkoTaken-Kar-1
17096: PPUSH
17097: CALL_OW 88
// if IsOK ( Titov ) then
17101: LD_EXP 44
17105: PPUSH
17106: CALL_OW 302
17110: IFFALSE 17124
// Say ( Titov , DOvsyenkoTaken-Tit-1 ) ;
17112: LD_EXP 44
17116: PPUSH
17117: LD_STRING DOvsyenkoTaken-Tit-1
17119: PPUSH
17120: CALL_OW 88
// if IsOK ( Lipshchin ) and ( IsOK ( Karamazov ) or IsOK ( Titov ) ) then
17124: LD_EXP 46
17128: PPUSH
17129: CALL_OW 302
17133: PUSH
17134: LD_EXP 40
17138: PPUSH
17139: CALL_OW 302
17143: PUSH
17144: LD_EXP 44
17148: PPUSH
17149: CALL_OW 302
17153: OR
17154: AND
17155: IFFALSE 17192
// begin Say ( Lipshchin , DOvsyenkoTaken-Lip-1 ) ;
17157: LD_EXP 46
17161: PPUSH
17162: LD_STRING DOvsyenkoTaken-Lip-1
17164: PPUSH
17165: CALL_OW 88
// if IsOK ( Gleb ) then
17169: LD_EXP 42
17173: PPUSH
17174: CALL_OW 302
17178: IFFALSE 17192
// Say ( Gleb , DOvsyenkoTaken-Glb-1 ) ;
17180: LD_EXP 42
17184: PPUSH
17185: LD_STRING DOvsyenkoTaken-Glb-1
17187: PPUSH
17188: CALL_OW 88
// end ; DialogueOff ;
17192: CALL_OW 7
// ChangeMissionObjectives ( MOutCapture ) ;
17196: LD_STRING MOutCapture
17198: PPUSH
17199: CALL_OW 337
// ChangeMissionObjectives ( MAddMine ) ;
17203: LD_STRING MAddMine
17205: PPUSH
17206: CALL_OW 337
// claimOvsyenkoBase = true ;
17210: LD_ADDR_EXP 15
17214: PUSH
17215: LD_INT 1
17217: ST_TO_ADDR
// wait ( 1 1$10 ) ;
17218: LD_INT 2450
17220: PPUSH
17221: CALL_OW 67
// InitAIManager ( 1 , 1 , headAmBase , HeadAmericanBaseArea , HeadAmericanHealArea , false , HeadAmericanBaseArea , 6 , 2 , 4 , true , true ) ;
17225: LD_INT 1
17227: PPUSH
17228: LD_INT 1
17230: PPUSH
17231: LD_EXP 61
17235: PPUSH
17236: LD_INT 5
17238: PPUSH
17239: LD_INT 9
17241: PPUSH
17242: LD_INT 0
17244: PPUSH
17245: LD_INT 5
17247: PPUSH
17248: LD_INT 6
17250: PPUSH
17251: LD_INT 2
17253: PPUSH
17254: LD_INT 4
17256: PPUSH
17257: LD_INT 1
17259: PPUSH
17260: LD_INT 1
17262: PPUSH
17263: CALL 5248 0 12
// end ;
17267: END
// export function Dial_SibTechs ; begin
17268: LD_INT 0
17270: PPUSH
// dial_SibTechsBlocker = true ;
17271: LD_ADDR_EXP 9
17275: PUSH
17276: LD_INT 1
17278: ST_TO_ADDR
// DialogueOn ;
17279: CALL_OW 6
// if IsOK ( Petrosyan ) then
17283: LD_EXP 43
17287: PPUSH
17288: CALL_OW 302
17292: IFFALSE 17308
// Say ( Petrosyan , DSibResearch-Pty-1 ) else
17294: LD_EXP 43
17298: PPUSH
17299: LD_STRING DSibResearch-Pty-1
17301: PPUSH
17302: CALL_OW 88
17306: GO 17331
// if IsOK ( Dolgov ) then
17308: LD_EXP 45
17312: PPUSH
17313: CALL_OW 302
17317: IFFALSE 17331
// Say ( Dolgov , DSibResearch-Dol-1 ) ;
17319: LD_EXP 45
17323: PPUSH
17324: LD_STRING DSibResearch-Dol-1
17326: PPUSH
17327: CALL_OW 88
// Say ( Burlak , DSibResearch-Bur-1 ) ;
17331: LD_EXP 39
17335: PPUSH
17336: LD_STRING DSibResearch-Bur-1
17338: PPUSH
17339: CALL_OW 88
// SayRadio ( Platonov , DSibResearch-Pla-1 ) ;
17343: LD_EXP 47
17347: PPUSH
17348: LD_STRING DSibResearch-Pla-1
17350: PPUSH
17351: CALL_OW 94
// DialogueOff ;
17355: CALL_OW 7
// ChangeMissionObjectives ( MResearch ) ;
17359: LD_STRING MResearch
17361: PPUSH
17362: CALL_OW 337
// SetRestrict ( b_ext_siberium , 3 , true ) ;
17366: LD_INT 21
17368: PPUSH
17369: LD_INT 3
17371: PPUSH
17372: LD_INT 1
17374: PPUSH
17375: CALL_OW 324
// SetRestrict ( b_siberite_power , 3 , true ) ;
17379: LD_INT 28
17381: PPUSH
17382: LD_INT 3
17384: PPUSH
17385: LD_INT 1
17387: PPUSH
17388: CALL_OW 324
// SetRestrict ( b_lab_siberium , 3 , true ) ;
17392: LD_INT 11
17394: PPUSH
17395: LD_INT 3
17397: PPUSH
17398: LD_INT 1
17400: PPUSH
17401: CALL_OW 324
// SetRestrict ( b_lab_spacetime , 3 , true ) ;
17405: LD_INT 14
17407: PPUSH
17408: LD_INT 3
17410: PPUSH
17411: LD_INT 1
17413: PPUSH
17414: CALL_OW 324
// end ;
17418: LD_VAR 0 1
17422: RET
// export function Dial_ResearchMatPredictions ; begin
17423: LD_INT 0
17425: PPUSH
// techMatPredStatus = state_researched ;
17426: LD_ADDR_EXP 6
17430: PUSH
17431: LD_INT 2
17433: ST_TO_ADDR
// ChangeMissionObjectives ( MOutPred ) ;
17434: LD_STRING MOutPred
17436: PPUSH
17437: CALL_OW 337
// DialogueOn ;
17441: CALL_OW 6
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
17445: LD_EXP 43
17449: PPUSH
17450: CALL_OW 302
17454: PUSH
17455: LD_EXP 45
17459: PPUSH
17460: CALL_OW 302
17464: OR
17465: IFFALSE 17587
// begin if IsOK ( Petrosyan ) then
17467: LD_EXP 43
17471: PPUSH
17472: CALL_OW 302
17476: IFFALSE 17492
// Say ( Petrosyan , DNoMaterial-Pty-1 ) else
17478: LD_EXP 43
17482: PPUSH
17483: LD_STRING DNoMaterial-Pty-1
17485: PPUSH
17486: CALL_OW 88
17490: GO 17515
// if IsOK ( Dolgov ) then
17492: LD_EXP 45
17496: PPUSH
17497: CALL_OW 302
17501: IFFALSE 17515
// Say ( Dolgov , DNoMaterial-Dol-1 ) ;
17503: LD_EXP 45
17507: PPUSH
17508: LD_STRING DNoMaterial-Dol-1
17510: PPUSH
17511: CALL_OW 88
// Say ( Burlak , DNoMaterial-Bur-1 ) ;
17515: LD_EXP 39
17519: PPUSH
17520: LD_STRING DNoMaterial-Bur-1
17522: PPUSH
17523: CALL_OW 88
// if IsOK ( Petrosyan ) then
17527: LD_EXP 43
17531: PPUSH
17532: CALL_OW 302
17536: IFFALSE 17552
// Say ( Petrosyan , DNoMaterial-Pty-2 ) else
17538: LD_EXP 43
17542: PPUSH
17543: LD_STRING DNoMaterial-Pty-2
17545: PPUSH
17546: CALL_OW 88
17550: GO 17575
// if IsOK ( Dolgov ) then
17552: LD_EXP 45
17556: PPUSH
17557: CALL_OW 302
17561: IFFALSE 17575
// Say ( Dolgov , DNoMaterial-Dol-2 ) ;
17563: LD_EXP 45
17567: PPUSH
17568: LD_STRING DNoMaterial-Dol-2
17570: PPUSH
17571: CALL_OW 88
// Say ( Burlak , DNoMaterial-Bur-2 ) ;
17575: LD_EXP 39
17579: PPUSH
17580: LD_STRING DNoMaterial-Bur-2
17582: PPUSH
17583: CALL_OW 88
// end ; DialogueOff ;
17587: CALL_OW 7
// end ;
17591: LD_VAR 0 1
17595: RET
// every 0 0$1 trigger not dial_SibTechsBlocker and ( GetResourceVisibility ( 116 , 123 , 3 ) or GetResourceVisibility ( 72 , 86 , 3 ) ) do
17596: LD_EXP 9
17600: NOT
17601: PUSH
17602: LD_INT 116
17604: PPUSH
17605: LD_INT 123
17607: PPUSH
17608: LD_INT 3
17610: PPUSH
17611: CALL_OW 440
17615: PUSH
17616: LD_INT 72
17618: PPUSH
17619: LD_INT 86
17621: PPUSH
17622: LD_INT 3
17624: PPUSH
17625: CALL_OW 440
17629: OR
17630: AND
17631: IFFALSE 17640
17633: GO 17635
17635: DISABLE
// Dial_SibTechs ;
17636: CALL 17268 0 0
17640: END
// every 5 5$0 trigger claimOvsyenkoBase do
17641: LD_EXP 15
17645: IFFALSE 17669
17647: GO 17649
17649: DISABLE
// begin PrepareVsevolod ;
17650: CALL 2664 0 0
// ComAgressiveMove ( vsevolodTeam , 61 , 45 ) ;
17654: LD_EXP 52
17658: PPUSH
17659: LD_INT 61
17661: PPUSH
17662: LD_INT 45
17664: PPUSH
17665: CALL_OW 114
// end ;
17669: END
// every 0 0$1 trigger immortalVsevolodTeam do var unit ;
17670: LD_EXP 18
17674: IFFALSE 17712
17676: GO 17678
17678: DISABLE
17679: LD_INT 0
17681: PPUSH
// begin enable ;
17682: ENABLE
// for unit in vsevolodTeam do
17683: LD_ADDR_VAR 0 1
17687: PUSH
17688: LD_EXP 52
17692: PUSH
17693: FOR_IN
17694: IFFALSE 17710
// SetLives ( unit , 1000 ) ;
17696: LD_VAR 0 1
17700: PPUSH
17701: LD_INT 1000
17703: PPUSH
17704: CALL_OW 234
17708: GO 17693
17710: POP
17711: POP
// end ;
17712: PPOPN 1
17714: END
// every 0 0$1 trigger GetLives ( ter_bun1 ) <= 650 or GetLives ( ter_arm1 ) <= 650 do var belkovSavedIn02 , tmp , speaker ;
17715: LD_INT 170
17717: PPUSH
17718: CALL_OW 256
17722: PUSH
17723: LD_INT 650
17725: LESSEQUAL
17726: PUSH
17727: LD_INT 174
17729: PPUSH
17730: CALL_OW 256
17734: PUSH
17735: LD_INT 650
17737: LESSEQUAL
17738: OR
17739: IFFALSE 18900
17741: GO 17743
17743: DISABLE
17744: LD_INT 0
17746: PPUSH
17747: PPUSH
17748: PPUSH
// begin ComMoveXY ( UnitFilter ( terminalBase , [ f_type , unit_human ] ) , 35 , 58 ) ;
17749: LD_EXP 60
17753: PPUSH
17754: LD_INT 21
17756: PUSH
17757: LD_INT 1
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PPUSH
17764: CALL_OW 72
17768: PPUSH
17769: LD_INT 35
17771: PPUSH
17772: LD_INT 58
17774: PPUSH
17775: CALL_OW 111
// SetSide ( UnitFilter ( terminalBase , [ f_type , unit_building ] ) , 6 ) ;
17779: LD_EXP 60
17783: PPUSH
17784: LD_INT 21
17786: PUSH
17787: LD_INT 3
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PPUSH
17794: CALL_OW 72
17798: PPUSH
17799: LD_INT 6
17801: PPUSH
17802: CALL_OW 235
// immortalVsevolodTeam = false ;
17806: LD_ADDR_EXP 18
17810: PUSH
17811: LD_INT 0
17813: ST_TO_ADDR
// ComEnterUnit ( [ Vsevolod , vsevolodTeam [ 3 ] ] , ter_arm1 ) ;
17814: LD_EXP 51
17818: PUSH
17819: LD_EXP 52
17823: PUSH
17824: LD_INT 3
17826: ARRAY
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PPUSH
17832: LD_INT 174
17834: PPUSH
17835: CALL_OW 120
// ComEnterUnit ( vsevolodTeam [ 4 ] , ter_bun1 ) ;
17839: LD_EXP 52
17843: PUSH
17844: LD_INT 4
17846: ARRAY
17847: PPUSH
17848: LD_INT 170
17850: PPUSH
17851: CALL_OW 120
// SetLives ( Petr , 500 ) ;
17855: LD_EXP 53
17859: PPUSH
17860: LD_INT 500
17862: PPUSH
17863: CALL_OW 234
// ComEnterUnit ( vsevolodTeam [ 2 ] , terminal ) ;
17867: LD_EXP 52
17871: PUSH
17872: LD_INT 2
17874: ARRAY
17875: PPUSH
17876: LD_INT 168
17878: PPUSH
17879: CALL_OW 120
// wait ( 0 0$5 ) ;
17883: LD_INT 175
17885: PPUSH
17886: CALL_OW 67
// DialogueOn ;
17890: CALL_OW 6
// if IsOK ( Dolgov ) then
17894: LD_EXP 45
17898: PPUSH
17899: CALL_OW 302
17903: IFFALSE 17917
// Say ( Dolgov , DVsevolod-Dol-1 ) ;
17905: LD_EXP 45
17909: PPUSH
17910: LD_STRING DVsevolod-Dol-1
17912: PPUSH
17913: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-1 ) ;
17917: LD_EXP 51
17921: PPUSH
17922: LD_STRING DVsevolod-Vse-1
17924: PPUSH
17925: CALL_OW 94
// if IsOK ( Gleb ) then
17929: LD_EXP 42
17933: PPUSH
17934: CALL_OW 302
17938: IFFALSE 17976
// begin Say ( Burlak , DVsevolod-Bur-1 ) ;
17940: LD_EXP 39
17944: PPUSH
17945: LD_STRING DVsevolod-Bur-1
17947: PPUSH
17948: CALL_OW 88
// Say ( Gleb , DVsevolod-Glb-1 ) ;
17952: LD_EXP 42
17956: PPUSH
17957: LD_STRING DVsevolod-Glb-1
17959: PPUSH
17960: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-2 ) ;
17964: LD_EXP 51
17968: PPUSH
17969: LD_STRING DVsevolod-Vse-2
17971: PPUSH
17972: CALL_OW 94
// end ; Say ( Burlak , DVsevolod-Bur-2 ) ;
17976: LD_EXP 39
17980: PPUSH
17981: LD_STRING DVsevolod-Bur-2
17983: PPUSH
17984: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-3 ) ;
17988: LD_EXP 51
17992: PPUSH
17993: LD_STRING DVsevolod-Vse-3
17995: PPUSH
17996: CALL_OW 94
// Say ( Burlak , DVsevolod-Bur-3 ) ;
18000: LD_EXP 39
18004: PPUSH
18005: LD_STRING DVsevolod-Bur-3
18007: PPUSH
18008: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-4 ) ;
18012: LD_EXP 51
18016: PPUSH
18017: LD_STRING DVsevolod-Vse-4
18019: PPUSH
18020: CALL_OW 94
// Say ( Burlak , DVsevolod-Bur-4 ) ;
18024: LD_EXP 39
18028: PPUSH
18029: LD_STRING DVsevolod-Bur-4
18031: PPUSH
18032: CALL_OW 88
// if IsOK ( Gleb ) then
18036: LD_EXP 42
18040: PPUSH
18041: CALL_OW 302
18045: IFFALSE 18073
// begin Say ( Gleb , DVsevolod-Glb-4 ) ;
18047: LD_EXP 42
18051: PPUSH
18052: LD_STRING DVsevolod-Glb-4
18054: PPUSH
18055: CALL_OW 88
// Say ( Burlak , DVsevolod-Bur-5 ) ;
18059: LD_EXP 39
18063: PPUSH
18064: LD_STRING DVsevolod-Bur-5
18066: PPUSH
18067: CALL_OW 88
// end else
18071: GO 18147
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-RSol1-5 ,  , false , true ) ;
18073: LD_INT 22
18075: PUSH
18076: LD_INT 3
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 21
18085: PUSH
18086: LD_INT 1
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 50
18095: PUSH
18096: EMPTY
18097: LIST
18098: PUSH
18099: LD_INT 26
18101: PUSH
18102: LD_INT 1
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 23
18111: PUSH
18112: LD_INT 3
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: PPUSH
18126: CALL_OW 69
18130: PPUSH
18131: LD_STRING DVsevolod-RSol1-5
18133: PPUSH
18134: LD_STRING 
18136: PPUSH
18137: LD_INT 0
18139: PPUSH
18140: LD_INT 1
18142: PPUSH
18143: CALL 12102 0 5
// Say ( Burlak , DVsevolod-Bur-6 ) ;
18147: LD_EXP 39
18151: PPUSH
18152: LD_STRING DVsevolod-Bur-6
18154: PPUSH
18155: CALL_OW 88
// CenterOnXY ( 59 , 40 ) ;
18159: LD_INT 59
18161: PPUSH
18162: LD_INT 40
18164: PPUSH
18165: CALL_OW 84
// RevealFogArea ( 3 , TerminalBaseArea ) ;
18169: LD_INT 3
18171: PPUSH
18172: LD_INT 4
18174: PPUSH
18175: CALL_OW 332
// if IsOK ( Dolgov ) then
18179: LD_EXP 45
18183: PPUSH
18184: CALL_OW 302
18188: IFFALSE 18204
// Say ( Dolgov , DVsevolod-Dol-6 ) else
18190: LD_EXP 45
18194: PPUSH
18195: LD_STRING DVsevolod-Dol-6
18197: PPUSH
18198: CALL_OW 88
18202: GO 18278
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-Dol-6 ,  , false , true ) ;
18204: LD_INT 22
18206: PUSH
18207: LD_INT 3
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 21
18216: PUSH
18217: LD_INT 1
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 50
18226: PUSH
18227: EMPTY
18228: LIST
18229: PUSH
18230: LD_INT 26
18232: PUSH
18233: LD_INT 1
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 23
18242: PUSH
18243: LD_INT 3
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: PPUSH
18257: CALL_OW 69
18261: PPUSH
18262: LD_STRING DVsevolod-Dol-6
18264: PPUSH
18265: LD_STRING 
18267: PPUSH
18268: LD_INT 0
18270: PPUSH
18271: LD_INT 1
18273: PPUSH
18274: CALL 12102 0 5
// Say ( Burlak , DVsevolod-Bur-7 ) ;
18278: LD_EXP 39
18282: PPUSH
18283: LD_STRING DVsevolod-Bur-7
18285: PPUSH
18286: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-7 ) ;
18290: LD_EXP 51
18294: PPUSH
18295: LD_STRING DVsevolod-Vse-7
18297: PPUSH
18298: CALL_OW 94
// DialogueOff ;
18302: CALL_OW 7
// ChangeMissionObjectives ( MVsevolod ) ;
18306: LD_STRING MVsevolod
18308: PPUSH
18309: CALL_OW 337
// enableVsevolodCounter = true ;
18313: LD_ADDR_EXP 22
18317: PUSH
18318: LD_INT 1
18320: ST_TO_ADDR
// canGoNorth = true ;
18321: LD_ADDR_EXP 21
18325: PUSH
18326: LD_INT 1
18328: ST_TO_ADDR
// PrepareSoldiersInBunkers ;
18329: CALL 3979 0 0
// wait ( 0 0$7 ) ;
18333: LD_INT 245
18335: PPUSH
18336: CALL_OW 67
// belkovSavedIn02 = TestCharacters ( 02_Belkov ) ;
18340: LD_ADDR_VAR 0 1
18344: PUSH
18345: LD_STRING 02_Belkov
18347: PPUSH
18348: CALL_OW 28
18352: ST_TO_ADDR
// DialogueOn ;
18353: CALL_OW 6
// if belkovSavedIn02 then
18357: LD_VAR 0 1
18361: IFFALSE 18562
// begin if IsOK ( Gleb ) then
18363: LD_EXP 42
18367: PPUSH
18368: CALL_OW 302
18372: IFFALSE 18386
// Say ( Gleb , DHelp1-Glb-1 ) ;
18374: LD_EXP 42
18378: PPUSH
18379: LD_STRING DHelp1-Glb-1
18381: PPUSH
18382: CALL_OW 88
// if IsOK ( Dolgov ) then
18386: LD_EXP 45
18390: PPUSH
18391: CALL_OW 302
18395: IFFALSE 18409
// Say ( Dolgov , DHelp1-Dol-1 ) ;
18397: LD_EXP 45
18401: PPUSH
18402: LD_STRING DHelp1-Dol-1
18404: PPUSH
18405: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Gleb , Dolgov , Titov ] ;
18409: LD_ADDR_VAR 0 2
18413: PUSH
18414: LD_INT 22
18416: PUSH
18417: LD_INT 3
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 21
18426: PUSH
18427: LD_INT 1
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 50
18436: PUSH
18437: EMPTY
18438: LIST
18439: PUSH
18440: LD_INT 26
18442: PUSH
18443: LD_INT 1
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 23
18452: PUSH
18453: LD_INT 3
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: PPUSH
18467: CALL_OW 69
18471: PUSH
18472: LD_EXP 42
18476: PUSH
18477: LD_EXP 45
18481: PUSH
18482: LD_EXP 44
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: LIST
18491: DIFF
18492: ST_TO_ADDR
// DialogRandom ( tmp , DHelp1-RSol1-1 ,  , false , true ) ;
18493: LD_VAR 0 2
18497: PPUSH
18498: LD_STRING DHelp1-RSol1-1
18500: PPUSH
18501: LD_STRING 
18503: PPUSH
18504: LD_INT 0
18506: PPUSH
18507: LD_INT 1
18509: PPUSH
18510: CALL 12102 0 5
// if IsOK ( Titov ) then
18514: LD_EXP 44
18518: PPUSH
18519: CALL_OW 302
18523: IFFALSE 18537
// Say ( Titov , DHelp1-Tit-1 ) ;
18525: LD_EXP 44
18529: PPUSH
18530: LD_STRING DHelp1-Tit-1
18532: PPUSH
18533: CALL_OW 88
// if IsOK ( Gleb ) then
18537: LD_EXP 42
18541: PPUSH
18542: CALL_OW 302
18546: IFFALSE 18560
// Say ( Gleb , DHelp1-Glb-2 ) ;
18548: LD_EXP 42
18552: PPUSH
18553: LD_STRING DHelp1-Glb-2
18555: PPUSH
18556: CALL_OW 88
// end else
18560: GO 18773
// begin if IsOK ( Titov ) then
18562: LD_EXP 44
18566: PPUSH
18567: CALL_OW 302
18571: IFFALSE 18585
// Say ( Titov , DHelp2-Tit-1 ) ;
18573: LD_EXP 44
18577: PPUSH
18578: LD_STRING DHelp2-Tit-1
18580: PPUSH
18581: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Gleb , Titov ] ;
18585: LD_ADDR_VAR 0 2
18589: PUSH
18590: LD_INT 22
18592: PUSH
18593: LD_INT 3
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 21
18602: PUSH
18603: LD_INT 1
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 50
18612: PUSH
18613: EMPTY
18614: LIST
18615: PUSH
18616: LD_INT 26
18618: PUSH
18619: LD_INT 1
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PUSH
18626: LD_INT 23
18628: PUSH
18629: LD_INT 3
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: PPUSH
18643: CALL_OW 69
18647: PUSH
18648: LD_EXP 42
18652: PUSH
18653: LD_EXP 44
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: DIFF
18662: ST_TO_ADDR
// speaker = DialogRandom ( tmp , DHelp2-RSol1-1 ,  , false , true ) ;
18663: LD_ADDR_VAR 0 3
18667: PUSH
18668: LD_VAR 0 2
18672: PPUSH
18673: LD_STRING DHelp2-RSol1-1
18675: PPUSH
18676: LD_STRING 
18678: PPUSH
18679: LD_INT 0
18681: PPUSH
18682: LD_INT 1
18684: PPUSH
18685: CALL 12102 0 5
18689: ST_TO_ADDR
// if IsOK ( Gleb ) then
18690: LD_EXP 42
18694: PPUSH
18695: CALL_OW 302
18699: IFFALSE 18713
// Say ( Gleb , DHelp2-Glb-1 ) ;
18701: LD_EXP 42
18705: PPUSH
18706: LD_STRING DHelp2-Glb-1
18708: PPUSH
18709: CALL_OW 88
// tmp = tmp diff speaker ;
18713: LD_ADDR_VAR 0 2
18717: PUSH
18718: LD_VAR 0 2
18722: PUSH
18723: LD_VAR 0 3
18727: DIFF
18728: ST_TO_ADDR
// DialogRandom ( tmp , DHelp2-RSol2-1 ,  , false , true ) ;
18729: LD_VAR 0 2
18733: PPUSH
18734: LD_STRING DHelp2-RSol2-1
18736: PPUSH
18737: LD_STRING 
18739: PPUSH
18740: LD_INT 0
18742: PPUSH
18743: LD_INT 1
18745: PPUSH
18746: CALL 12102 0 5
// if IsOK ( Titov ) then
18750: LD_EXP 44
18754: PPUSH
18755: CALL_OW 302
18759: IFFALSE 18773
// Say ( Titov , DHelp2-Tit-2 ) ;
18761: LD_EXP 44
18765: PPUSH
18766: LD_STRING DHelp2-Tit-2
18768: PPUSH
18769: CALL_OW 88
// end ; Say ( Burlak , DHelp3-Bur-1 ) ;
18773: LD_EXP 39
18777: PPUSH
18778: LD_STRING DHelp3-Bur-1
18780: PPUSH
18781: CALL_OW 88
// if IsOK ( Lipshchin ) then
18785: LD_EXP 46
18789: PPUSH
18790: CALL_OW 302
18794: IFFALSE 18810
// Say ( Lipshchin , DHelp3-Lip-1 ) else
18796: LD_EXP 46
18800: PPUSH
18801: LD_STRING DHelp3-Lip-1
18803: PPUSH
18804: CALL_OW 88
18808: GO 18884
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-Dol-6 ,  , false , true ) ;
18810: LD_INT 22
18812: PUSH
18813: LD_INT 3
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 21
18822: PUSH
18823: LD_INT 1
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 50
18832: PUSH
18833: EMPTY
18834: LIST
18835: PUSH
18836: LD_INT 26
18838: PUSH
18839: LD_INT 1
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 23
18848: PUSH
18849: LD_INT 3
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: PPUSH
18863: CALL_OW 69
18867: PPUSH
18868: LD_STRING DVsevolod-Dol-6
18870: PPUSH
18871: LD_STRING 
18873: PPUSH
18874: LD_INT 0
18876: PPUSH
18877: LD_INT 1
18879: PPUSH
18880: CALL 12102 0 5
// Say ( Burlak , DHelp3-Bur-2 ) ;
18884: LD_EXP 39
18888: PPUSH
18889: LD_STRING DHelp3-Bur-2
18891: PPUSH
18892: CALL_OW 88
// DialogueOff ;
18896: CALL_OW 7
// end ;
18900: PPOPN 3
18902: END
// every 0 0$1 trigger claimOvsyenkoBase and not FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] , [ f_type , unit_vehicle ] ] ] ) and FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
18903: LD_EXP 15
18907: PUSH
18908: LD_INT 3
18910: PPUSH
18911: LD_INT 22
18913: PUSH
18914: LD_INT 3
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 2
18923: PUSH
18924: LD_INT 21
18926: PUSH
18927: LD_INT 1
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 59
18936: PUSH
18937: EMPTY
18938: LIST
18939: PUSH
18940: LD_INT 21
18942: PUSH
18943: LD_INT 2
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PPUSH
18960: CALL_OW 70
18964: NOT
18965: AND
18966: PUSH
18967: LD_INT 3
18969: PPUSH
18970: LD_INT 22
18972: PUSH
18973: LD_INT 1
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 2
18982: PUSH
18983: LD_INT 21
18985: PUSH
18986: LD_INT 1
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 21
18995: PUSH
18996: LD_INT 2
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: LIST
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PPUSH
19012: CALL_OW 70
19016: AND
19017: IFFALSE 19184
19019: GO 19021
19021: DISABLE
// begin lostAgainBase = true ;
19022: LD_ADDR_EXP 17
19026: PUSH
19027: LD_INT 1
19029: ST_TO_ADDR
// SetSide ( FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , 1 ) ;
19030: LD_INT 3
19032: PPUSH
19033: LD_INT 22
19035: PUSH
19036: LD_INT 3
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 21
19045: PUSH
19046: LD_INT 3
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PPUSH
19057: CALL_OW 70
19061: PPUSH
19062: LD_INT 1
19064: PPUSH
19065: CALL_OW 235
// if IsOK ( Gleb ) then
19069: LD_EXP 42
19073: PPUSH
19074: CALL_OW 302
19078: IFFALSE 19104
// begin Say ( Gleb , DOvsyenkoCaptured-Glb-1 ) ;
19080: LD_EXP 42
19084: PPUSH
19085: LD_STRING DOvsyenkoCaptured-Glb-1
19087: PPUSH
19088: CALL_OW 88
// Say ( Burlak , DOvsyenkoCaptured-Bur-1 ) ;
19092: LD_EXP 39
19096: PPUSH
19097: LD_STRING DOvsyenkoCaptured-Bur-1
19099: PPUSH
19100: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Gleb , DOvsyenkoCaptured-RSol1-1 ,  , false , true ) ;
19104: LD_INT 22
19106: PUSH
19107: LD_INT 3
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 21
19116: PUSH
19117: LD_INT 1
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 50
19126: PUSH
19127: EMPTY
19128: LIST
19129: PUSH
19130: LD_INT 26
19132: PUSH
19133: LD_INT 1
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 23
19142: PUSH
19143: LD_INT 3
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: PPUSH
19157: CALL_OW 69
19161: PUSH
19162: LD_EXP 42
19166: DIFF
19167: PPUSH
19168: LD_STRING DOvsyenkoCaptured-RSol1-1
19170: PPUSH
19171: LD_STRING 
19173: PPUSH
19174: LD_INT 0
19176: PPUSH
19177: LD_INT 1
19179: PPUSH
19180: CALL 12102 0 5
// end ;
19184: END
// every 0 0$1 trigger FilterUnitsInArea ( TrapArea , [ [ f_side , 3 ] , [ f_ok ] ] ) do
19185: LD_INT 12
19187: PPUSH
19188: LD_INT 22
19190: PUSH
19191: LD_INT 3
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 50
19200: PUSH
19201: EMPTY
19202: LIST
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PPUSH
19208: CALL_OW 70
19212: IFFALSE 19221
19214: GO 19216
19216: DISABLE
// PrepareTrap ;
19217: CALL 3800 0 0
19221: END
// every 0 0$1 trigger not dial_TrapDialogBlocker do var tmp , speaker , unit ;
19222: LD_EXP 11
19226: NOT
19227: IFFALSE 19445
19229: GO 19231
19231: DISABLE
19232: LD_INT 0
19234: PPUSH
19235: PPUSH
19236: PPUSH
// begin enable ;
19237: ENABLE
// for unit in trapTeam do
19238: LD_ADDR_VAR 0 3
19242: PUSH
19243: LD_EXP 62
19247: PUSH
19248: FOR_IN
19249: IFFALSE 19443
// if See ( 3 , unit ) then
19251: LD_INT 3
19253: PPUSH
19254: LD_VAR 0 3
19258: PPUSH
19259: CALL_OW 292
19263: IFFALSE 19441
// begin dial_TrapDialogBlocker = true ;
19265: LD_ADDR_EXP 11
19269: PUSH
19270: LD_INT 1
19272: ST_TO_ADDR
// DialogueOn ;
19273: CALL_OW 6
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Gleb ;
19277: LD_ADDR_VAR 0 1
19281: PUSH
19282: LD_INT 22
19284: PUSH
19285: LD_INT 3
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 21
19294: PUSH
19295: LD_INT 1
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 50
19304: PUSH
19305: EMPTY
19306: LIST
19307: PUSH
19308: LD_INT 26
19310: PUSH
19311: LD_INT 1
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 23
19320: PUSH
19321: LD_INT 3
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: PPUSH
19335: CALL_OW 69
19339: PUSH
19340: LD_EXP 42
19344: DIFF
19345: ST_TO_ADDR
// speaker = DialogRandom ( tmp , DPartyAttacked-RSol1-1 ,  , false , true ) ;
19346: LD_ADDR_VAR 0 2
19350: PUSH
19351: LD_VAR 0 1
19355: PPUSH
19356: LD_STRING DPartyAttacked-RSol1-1
19358: PPUSH
19359: LD_STRING 
19361: PPUSH
19362: LD_INT 0
19364: PPUSH
19365: LD_INT 1
19367: PPUSH
19368: CALL 12102 0 5
19372: ST_TO_ADDR
// tmp = tmp diff speaker ;
19373: LD_ADDR_VAR 0 1
19377: PUSH
19378: LD_VAR 0 1
19382: PUSH
19383: LD_VAR 0 2
19387: DIFF
19388: ST_TO_ADDR
// if IsOK ( Gleb ) then
19389: LD_EXP 42
19393: PPUSH
19394: CALL_OW 302
19398: IFFALSE 19412
// Say ( Gleb , DPartyAttacked-Glb-1 ) ;
19400: LD_EXP 42
19404: PPUSH
19405: LD_STRING DPartyAttacked-Glb-1
19407: PPUSH
19408: CALL_OW 88
// DialogRandom ( tmp , DPartyAttacked-RSol1-2 ,  , false , true ) ;
19412: LD_VAR 0 1
19416: PPUSH
19417: LD_STRING DPartyAttacked-RSol1-2
19419: PPUSH
19420: LD_STRING 
19422: PPUSH
19423: LD_INT 0
19425: PPUSH
19426: LD_INT 1
19428: PPUSH
19429: CALL 12102 0 5
// DialogueOff ;
19433: CALL_OW 7
// exit ;
19437: POP
19438: POP
19439: GO 19445
// end ;
19441: GO 19248
19443: POP
19444: POP
// end ;
19445: PPOPN 3
19447: END
// every 0 0$1 trigger not savedVsevolod and IsOK ( Vsevolod ) and FilterUnitsInArea ( TerminalBaseArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ [ f_type , unit_human ] , [ f_nation , nation_russian ] ] , [ f_type , unit_vehicle ] ] ] ) do var nearUnit , unit , maleRandomUnits ;
19448: LD_EXP 19
19452: NOT
19453: PUSH
19454: LD_EXP 51
19458: PPUSH
19459: CALL_OW 302
19463: AND
19464: PUSH
19465: LD_INT 4
19467: PPUSH
19468: LD_INT 22
19470: PUSH
19471: LD_INT 3
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 50
19480: PUSH
19481: EMPTY
19482: LIST
19483: PUSH
19484: LD_INT 2
19486: PUSH
19487: LD_INT 21
19489: PUSH
19490: LD_INT 1
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 23
19499: PUSH
19500: LD_INT 3
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 21
19513: PUSH
19514: LD_INT 2
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: LIST
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: LIST
19530: PPUSH
19531: CALL_OW 70
19535: AND
19536: IFFALSE 20178
19538: GO 19540
19540: DISABLE
19541: LD_INT 0
19543: PPUSH
19544: PPUSH
19545: PPUSH
// begin savedVsevolod = true ;
19546: LD_ADDR_EXP 19
19550: PUSH
19551: LD_INT 1
19553: ST_TO_ADDR
// ChangeMissionObjectives ( MVsevolodOut ) ;
19554: LD_STRING MVsevolodOut
19556: PPUSH
19557: CALL_OW 337
// unit = FilterUnitsInArea ( TerminalBaseArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ [ f_type , unit_human ] , [ f_nation , nation_russian ] ] , [ f_type , unit_vehicle ] ] ] ) ;
19561: LD_ADDR_VAR 0 2
19565: PUSH
19566: LD_INT 4
19568: PPUSH
19569: LD_INT 22
19571: PUSH
19572: LD_INT 3
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 50
19581: PUSH
19582: EMPTY
19583: LIST
19584: PUSH
19585: LD_INT 2
19587: PUSH
19588: LD_INT 21
19590: PUSH
19591: LD_INT 1
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 23
19600: PUSH
19601: LD_INT 3
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 21
19614: PUSH
19615: LD_INT 2
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: LIST
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: LIST
19631: PPUSH
19632: CALL_OW 70
19636: ST_TO_ADDR
// unit = unit [ 1 ] ;
19637: LD_ADDR_VAR 0 2
19641: PUSH
19642: LD_VAR 0 2
19646: PUSH
19647: LD_INT 1
19649: ARRAY
19650: ST_TO_ADDR
// if GetType ( unit ) = unit_vehicle then
19651: LD_VAR 0 2
19655: PPUSH
19656: CALL_OW 247
19660: PUSH
19661: LD_INT 2
19663: EQUAL
19664: IFFALSE 19685
// unit = UnitsInside ( unit ) [ 1 ] ;
19666: LD_ADDR_VAR 0 2
19670: PUSH
19671: LD_VAR 0 2
19675: PPUSH
19676: CALL_OW 313
19680: PUSH
19681: LD_INT 1
19683: ARRAY
19684: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
19685: LD_INT 22
19687: PUSH
19688: LD_INT 6
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PPUSH
19695: CALL_OW 69
19699: PPUSH
19700: LD_INT 3
19702: PPUSH
19703: CALL_OW 235
// if not unit = Burlak then
19707: LD_VAR 0 2
19711: PUSH
19712: LD_EXP 39
19716: EQUAL
19717: NOT
19718: IFFALSE 19895
// begin vsevolodWaitGorky = true ;
19720: LD_ADDR_EXP 20
19724: PUSH
19725: LD_INT 1
19727: ST_TO_ADDR
// DialogueOn ;
19728: CALL_OW 6
// Say ( Vsevolod , DOtherMeetVsev-Vse-1 ) ;
19732: LD_EXP 51
19736: PPUSH
19737: LD_STRING DOtherMeetVsev-Vse-1
19739: PPUSH
19740: CALL_OW 88
// if GetSex ( unit ) = sex_female then
19744: LD_VAR 0 2
19748: PPUSH
19749: CALL_OW 258
19753: PUSH
19754: LD_INT 2
19756: EQUAL
19757: IFFALSE 19877
// begin maleRandomUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff vsevolodTeam ;
19759: LD_ADDR_VAR 0 3
19763: PUSH
19764: LD_INT 22
19766: PUSH
19767: LD_INT 3
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 21
19776: PUSH
19777: LD_INT 1
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 50
19786: PUSH
19787: EMPTY
19788: LIST
19789: PUSH
19790: LD_INT 26
19792: PUSH
19793: LD_INT 1
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 23
19802: PUSH
19803: LD_INT 3
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: PPUSH
19817: CALL_OW 69
19821: PUSH
19822: LD_EXP 52
19826: DIFF
19827: ST_TO_ADDR
// maleRandomUnits = maleRandomUnits diff Gleb ;
19828: LD_ADDR_VAR 0 3
19832: PUSH
19833: LD_VAR 0 3
19837: PUSH
19838: LD_EXP 42
19842: DIFF
19843: ST_TO_ADDR
// if maleRandomUnits then
19844: LD_VAR 0 3
19848: IFFALSE 19875
// DialogRandom ( maleRandomUnits [ 1 ] , DOtherMeetVsev-RSol1-1 ,  , false , true ) ;
19850: LD_VAR 0 3
19854: PUSH
19855: LD_INT 1
19857: ARRAY
19858: PPUSH
19859: LD_STRING DOtherMeetVsev-RSol1-1
19861: PPUSH
19862: LD_STRING 
19864: PPUSH
19865: LD_INT 0
19867: PPUSH
19868: LD_INT 1
19870: PPUSH
19871: CALL 12102 0 5
// end else
19875: GO 19889
// Say ( unit , DOtherMeetVsev-RSol1-1 ) ;
19877: LD_VAR 0 2
19881: PPUSH
19882: LD_STRING DOtherMeetVsev-RSol1-1
19884: PPUSH
19885: CALL_OW 88
// DialogueOff ;
19889: CALL_OW 7
// end else
19893: GO 20178
// begin DialogueOn ;
19895: CALL_OW 6
// Say ( Vsevolod , DMeetVsev-Vse-1 ) ;
19899: LD_EXP 51
19903: PPUSH
19904: LD_STRING DMeetVsev-Vse-1
19906: PPUSH
19907: CALL_OW 88
// Say ( Burlak , DMeetVsev-Bur-1 ) ;
19911: LD_EXP 39
19915: PPUSH
19916: LD_STRING DMeetVsev-Bur-1
19918: PPUSH
19919: CALL_OW 88
// if lostAgainBase then
19923: LD_EXP 17
19927: IFFALSE 19967
// begin Say ( Vsevolod , DMeetVsev2-Vse-1 ) ;
19929: LD_EXP 51
19933: PPUSH
19934: LD_STRING DMeetVsev2-Vse-1
19936: PPUSH
19937: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-1 ) ;
19941: LD_EXP 39
19945: PPUSH
19946: LD_STRING DMeetVsev2-Bur-1
19948: PPUSH
19949: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-2 ) ;
19953: LD_EXP 51
19957: PPUSH
19958: LD_STRING DMeetVsev2-Vse-2
19960: PPUSH
19961: CALL_OW 88
// end else
19965: GO 20003
// begin Say ( Vsevolod , DMeetVsev2-Vse-2a ) ;
19967: LD_EXP 51
19971: PPUSH
19972: LD_STRING DMeetVsev2-Vse-2a
19974: PPUSH
19975: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-2 ) ;
19979: LD_EXP 39
19983: PPUSH
19984: LD_STRING DMeetVsev2-Bur-2
19986: PPUSH
19987: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-3 ) ;
19991: LD_EXP 51
19995: PPUSH
19996: LD_STRING DMeetVsev2-Vse-3
19998: PPUSH
19999: CALL_OW 88
// end ; Say ( Burlak , DMeetVsev3-Bur-1 ) ;
20003: LD_EXP 39
20007: PPUSH
20008: LD_STRING DMeetVsev3-Bur-1
20010: PPUSH
20011: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-1 ) ;
20015: LD_EXP 51
20019: PPUSH
20020: LD_STRING DMeetVsev3-Vse-1
20022: PPUSH
20023: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-2 ) ;
20027: LD_EXP 39
20031: PPUSH
20032: LD_STRING DMeetVsev3-Bur-2
20034: PPUSH
20035: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-2 ) ;
20039: LD_EXP 51
20043: PPUSH
20044: LD_STRING DMeetVsev3-Vse-2
20046: PPUSH
20047: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-3 ) ;
20051: LD_EXP 39
20055: PPUSH
20056: LD_STRING DMeetVsev3-Bur-3
20058: PPUSH
20059: CALL_OW 88
// if stevensStatus = 0 then
20063: LD_EXP 4
20067: PUSH
20068: LD_INT 0
20070: EQUAL
20071: IFFALSE 20085
// Say ( Burlak , DMeetVsev4-Bur-1 ) ;
20073: LD_EXP 39
20077: PPUSH
20078: LD_STRING DMeetVsev4-Bur-1
20080: PPUSH
20081: CALL_OW 88
// Say ( Burlak , DMeetVsev5-Bur-1 ) ;
20085: LD_EXP 39
20089: PPUSH
20090: LD_STRING DMeetVsev5-Bur-1
20092: PPUSH
20093: CALL_OW 88
// Say ( Vsevolod , DMeetVsev5-Vse-1 ) ;
20097: LD_EXP 51
20101: PPUSH
20102: LD_STRING DMeetVsev5-Vse-1
20104: PPUSH
20105: CALL_OW 88
// Say ( Burlak , DMeetVsev6-Bur-1 ) ;
20109: LD_EXP 39
20113: PPUSH
20114: LD_STRING DMeetVsev6-Bur-1
20116: PPUSH
20117: CALL_OW 88
// Say ( Vsevolod , DMeetVsev6-Vse-1 ) ;
20121: LD_EXP 51
20125: PPUSH
20126: LD_STRING DMeetVsev6-Vse-1
20128: PPUSH
20129: CALL_OW 88
// DialogueOff ;
20133: CALL_OW 7
// wait ( 0 0$20 ) ;
20137: LD_INT 700
20139: PPUSH
20140: CALL_OW 67
// PrepareConvoy ;
20144: CALL 4023 0 0
// ComMoveXY ( convoyTeam , 57 , 40 ) ;
20148: LD_EXP 63
20152: PPUSH
20153: LD_INT 57
20155: PPUSH
20156: LD_INT 40
20158: PPUSH
20159: CALL_OW 111
// AddComMoveXY ( convoyTeam , 37 , 59 ) ;
20163: LD_EXP 63
20167: PPUSH
20168: LD_INT 37
20170: PPUSH
20171: LD_INT 59
20173: PPUSH
20174: CALL_OW 171
// end ; end ;
20178: PPOPN 3
20180: END
// every 0 0$1 trigger vsevolodWaitGorky and GetDistUnits ( Vsevolod , Burlak ) <= 7 do
20181: LD_EXP 20
20185: PUSH
20186: LD_EXP 51
20190: PPUSH
20191: LD_EXP 39
20195: PPUSH
20196: CALL_OW 296
20200: PUSH
20201: LD_INT 7
20203: LESSEQUAL
20204: AND
20205: IFFALSE 20501
20207: GO 20209
20209: DISABLE
// begin vsevolodWaitGorky = false ;
20210: LD_ADDR_EXP 20
20214: PUSH
20215: LD_INT 0
20217: ST_TO_ADDR
// DialogueOn ;
20218: CALL_OW 6
// Say ( Vsevolod , DMeetVsev-Vse-1 ) ;
20222: LD_EXP 51
20226: PPUSH
20227: LD_STRING DMeetVsev-Vse-1
20229: PPUSH
20230: CALL_OW 88
// Say ( Burlak , DMeetVsev-Bur-1 ) ;
20234: LD_EXP 39
20238: PPUSH
20239: LD_STRING DMeetVsev-Bur-1
20241: PPUSH
20242: CALL_OW 88
// if lostAgainBase then
20246: LD_EXP 17
20250: IFFALSE 20290
// begin Say ( Vsevolod , DMeetVsev2-Vse-1 ) ;
20252: LD_EXP 51
20256: PPUSH
20257: LD_STRING DMeetVsev2-Vse-1
20259: PPUSH
20260: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-1 ) ;
20264: LD_EXP 39
20268: PPUSH
20269: LD_STRING DMeetVsev2-Bur-1
20271: PPUSH
20272: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-2 ) ;
20276: LD_EXP 51
20280: PPUSH
20281: LD_STRING DMeetVsev2-Vse-2
20283: PPUSH
20284: CALL_OW 88
// end else
20288: GO 20326
// begin Say ( Vsevolod , DMeetVsev2-Vse-2a ) ;
20290: LD_EXP 51
20294: PPUSH
20295: LD_STRING DMeetVsev2-Vse-2a
20297: PPUSH
20298: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-2 ) ;
20302: LD_EXP 39
20306: PPUSH
20307: LD_STRING DMeetVsev2-Bur-2
20309: PPUSH
20310: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-3 ) ;
20314: LD_EXP 51
20318: PPUSH
20319: LD_STRING DMeetVsev2-Vse-3
20321: PPUSH
20322: CALL_OW 88
// end ; Say ( Burlak , DMeetVsev3-Bur-1 ) ;
20326: LD_EXP 39
20330: PPUSH
20331: LD_STRING DMeetVsev3-Bur-1
20333: PPUSH
20334: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-1 ) ;
20338: LD_EXP 51
20342: PPUSH
20343: LD_STRING DMeetVsev3-Vse-1
20345: PPUSH
20346: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-2 ) ;
20350: LD_EXP 39
20354: PPUSH
20355: LD_STRING DMeetVsev3-Bur-2
20357: PPUSH
20358: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-2 ) ;
20362: LD_EXP 51
20366: PPUSH
20367: LD_STRING DMeetVsev3-Vse-2
20369: PPUSH
20370: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-3 ) ;
20374: LD_EXP 39
20378: PPUSH
20379: LD_STRING DMeetVsev3-Bur-3
20381: PPUSH
20382: CALL_OW 88
// if stevensStatus = 0 then
20386: LD_EXP 4
20390: PUSH
20391: LD_INT 0
20393: EQUAL
20394: IFFALSE 20408
// Say ( Burlak , DMeetVsev4-Bur-1 ) ;
20396: LD_EXP 39
20400: PPUSH
20401: LD_STRING DMeetVsev4-Bur-1
20403: PPUSH
20404: CALL_OW 88
// Say ( Burlak , DMeetVsev5-Bur-1 ) ;
20408: LD_EXP 39
20412: PPUSH
20413: LD_STRING DMeetVsev5-Bur-1
20415: PPUSH
20416: CALL_OW 88
// Say ( Vsevolod , DMeetVsev5-Vse-1 ) ;
20420: LD_EXP 51
20424: PPUSH
20425: LD_STRING DMeetVsev5-Vse-1
20427: PPUSH
20428: CALL_OW 88
// Say ( Vsevolod , DMeetVsev6-Vse-1 ) ;
20432: LD_EXP 51
20436: PPUSH
20437: LD_STRING DMeetVsev6-Vse-1
20439: PPUSH
20440: CALL_OW 88
// Say ( Burlak , DMeetVsev6-Bur-1 ) ;
20444: LD_EXP 39
20448: PPUSH
20449: LD_STRING DMeetVsev6-Bur-1
20451: PPUSH
20452: CALL_OW 88
// DialogueOff ;
20456: CALL_OW 7
// wait ( 0 0$20 ) ;
20460: LD_INT 700
20462: PPUSH
20463: CALL_OW 67
// PrepareConvoy ;
20467: CALL 4023 0 0
// ComMoveXY ( convoyTeam , 57 , 40 ) ;
20471: LD_EXP 63
20475: PPUSH
20476: LD_INT 57
20478: PPUSH
20479: LD_INT 40
20481: PPUSH
20482: CALL_OW 111
// AddComMoveXY ( convoyTeam , 37 , 59 ) ;
20486: LD_EXP 63
20490: PPUSH
20491: LD_INT 37
20493: PPUSH
20494: LD_INT 59
20496: PPUSH
20497: CALL_OW 171
// end ;
20501: END
// every 0 0$1 trigger not dial_ConvoyDialogBlocker do var tmp , speaker , unit ;
20502: LD_EXP 12
20506: NOT
20507: IFFALSE 20637
20509: GO 20511
20511: DISABLE
20512: LD_INT 0
20514: PPUSH
20515: PPUSH
20516: PPUSH
// begin enable ;
20517: ENABLE
// for unit in convoyTeam do
20518: LD_ADDR_VAR 0 3
20522: PUSH
20523: LD_EXP 63
20527: PUSH
20528: FOR_IN
20529: IFFALSE 20635
// if See ( 3 , unit ) and not IsInArea ( unit , InsideBaseArea ) then
20531: LD_INT 3
20533: PPUSH
20534: LD_VAR 0 3
20538: PPUSH
20539: CALL_OW 292
20543: PUSH
20544: LD_VAR 0 3
20548: PPUSH
20549: LD_INT 19
20551: PPUSH
20552: CALL_OW 308
20556: NOT
20557: AND
20558: IFFALSE 20633
// begin dial_ConvoyDialogBlocker = true ;
20560: LD_ADDR_EXP 12
20564: PUSH
20565: LD_INT 1
20567: ST_TO_ADDR
// DialogueOn ;
20568: CALL_OW 6
// speaker = UnitFilter ( convoyTeam , [ f_type , unit_human ] ) [ 1 ] ;
20572: LD_ADDR_VAR 0 2
20576: PUSH
20577: LD_EXP 63
20581: PPUSH
20582: LD_INT 21
20584: PUSH
20585: LD_INT 1
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PPUSH
20592: CALL_OW 72
20596: PUSH
20597: LD_INT 1
20599: ARRAY
20600: ST_TO_ADDR
// Say ( speaker , DTruck-Sol1-1 ) ;
20601: LD_VAR 0 2
20605: PPUSH
20606: LD_STRING DTruck-Sol1-1
20608: PPUSH
20609: CALL_OW 88
// Say ( Burlak , DTruck-Bur-1 ) ;
20613: LD_EXP 39
20617: PPUSH
20618: LD_STRING DTruck-Bur-1
20620: PPUSH
20621: CALL_OW 88
// DialogueOff ;
20625: CALL_OW 7
// exit ;
20629: POP
20630: POP
20631: GO 20637
// end ;
20633: GO 20528
20635: POP
20636: POP
// end ;
20637: PPOPN 3
20639: END
// every 0 0$1 trigger timeToAttack >= vsevolodSaveTime do
20640: LD_EXP 26
20644: PUSH
20645: LD_EXP 38
20649: GREATEREQUAL
20650: IFFALSE 20689
20652: GO 20654
20654: DISABLE
// begin PrepareAttack ;
20655: CALL 4204 0 0
// ComAgressiveMove ( attackTeam , 60 , 41 ) ;
20659: LD_EXP 64
20663: PPUSH
20664: LD_INT 60
20666: PPUSH
20667: LD_INT 41
20669: PPUSH
20670: CALL_OW 114
// AddComAgressiveMove ( attackTeam , 107 , 125 ) ;
20674: LD_EXP 64
20678: PPUSH
20679: LD_INT 107
20681: PPUSH
20682: LD_INT 125
20684: PPUSH
20685: CALL_OW 174
// end ;
20689: END
// every 1 trigger not savedVsevolod and GetLives ( Vsevolod ) <= 500 do
20690: LD_EXP 19
20694: NOT
20695: PUSH
20696: LD_EXP 51
20700: PPUSH
20701: CALL_OW 256
20705: PUSH
20706: LD_INT 500
20708: LESSEQUAL
20709: AND
20710: IFFALSE 20735
20712: GO 20714
20714: DISABLE
// begin DialogueOn ;
20715: CALL_OW 6
// SayRadio ( Vsevolod , DDieVsev2-Vse-1 ) ;
20719: LD_EXP 51
20723: PPUSH
20724: LD_STRING DDieVsev2-Vse-1
20726: PPUSH
20727: CALL_OW 94
// DialogueOff ;
20731: CALL_OW 7
// end ;
20735: END
// export function Dial_ResearchTauField ; var speaker , sci , randomTalkDialog ; begin
20736: LD_INT 0
20738: PPUSH
20739: PPUSH
20740: PPUSH
20741: PPUSH
// DialogueOn ;
20742: CALL_OW 6
// if IsOK ( Petrosyan ) then
20746: LD_EXP 43
20750: PPUSH
20751: CALL_OW 302
20755: IFFALSE 20771
// Say ( Petrosyan , DStasis-Pty-1 ) else
20757: LD_EXP 43
20761: PPUSH
20762: LD_STRING DStasis-Pty-1
20764: PPUSH
20765: CALL_OW 88
20769: GO 20993
// if IsOK ( Dolgov ) then
20771: LD_EXP 45
20775: PPUSH
20776: CALL_OW 302
20780: IFFALSE 20796
// Say ( Dolgov , DStasis-Dol-1 ) else
20782: LD_EXP 45
20786: PPUSH
20787: LD_STRING DStasis-Dol-1
20789: PPUSH
20790: CALL_OW 88
20794: GO 20993
// begin sci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] , [ f_nation , nation_russian ] ] ) diff Burlak ;
20796: LD_ADDR_VAR 0 3
20800: PUSH
20801: LD_INT 22
20803: PUSH
20804: LD_INT 3
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 21
20813: PUSH
20814: LD_INT 1
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 50
20823: PUSH
20824: EMPTY
20825: LIST
20826: PUSH
20827: LD_INT 26
20829: PUSH
20830: LD_INT 1
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 25
20839: PUSH
20840: LD_INT 4
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 23
20849: PUSH
20850: LD_INT 3
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: PPUSH
20865: CALL_OW 69
20869: PUSH
20870: LD_EXP 39
20874: DIFF
20875: ST_TO_ADDR
// if not sci then
20876: LD_VAR 0 3
20880: NOT
20881: IFFALSE 20952
// sci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Burlak ;
20883: LD_ADDR_VAR 0 3
20887: PUSH
20888: LD_INT 22
20890: PUSH
20891: LD_INT 3
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 21
20900: PUSH
20901: LD_INT 1
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 50
20910: PUSH
20911: EMPTY
20912: LIST
20913: PUSH
20914: LD_INT 26
20916: PUSH
20917: LD_INT 1
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 23
20926: PUSH
20927: LD_INT 3
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: PPUSH
20941: CALL_OW 69
20945: PUSH
20946: LD_EXP 39
20950: DIFF
20951: ST_TO_ADDR
// if sci then
20952: LD_VAR 0 3
20956: IFFALSE 20993
// begin speaker = DialogRandom ( sci , DStasis-RSol1-1 ,  , false , true ) ;
20958: LD_ADDR_VAR 0 2
20962: PUSH
20963: LD_VAR 0 3
20967: PPUSH
20968: LD_STRING DStasis-RSol1-1
20970: PPUSH
20971: LD_STRING 
20973: PPUSH
20974: LD_INT 0
20976: PPUSH
20977: LD_INT 1
20979: PPUSH
20980: CALL 12102 0 5
20984: ST_TO_ADDR
// randomTalkDialog = true ;
20985: LD_ADDR_VAR 0 4
20989: PUSH
20990: LD_INT 1
20992: ST_TO_ADDR
// end ; end ; if IsOK ( Petrosyan ) or IsOK ( Dolgov ) or randomTalkDialog then
20993: LD_EXP 43
20997: PPUSH
20998: CALL_OW 302
21002: PUSH
21003: LD_EXP 45
21007: PPUSH
21008: CALL_OW 302
21012: OR
21013: PUSH
21014: LD_VAR 0 4
21018: OR
21019: IFFALSE 21116
// begin Say ( Burlak , DStasis-Bur-1 ) ;
21021: LD_EXP 39
21025: PPUSH
21026: LD_STRING DStasis-Bur-1
21028: PPUSH
21029: CALL_OW 88
// if IsOK ( Petrosyan ) then
21033: LD_EXP 43
21037: PPUSH
21038: CALL_OW 302
21042: IFFALSE 21058
// Say ( Petrosyan , DStasis-Pty-2 ) else
21044: LD_EXP 43
21048: PPUSH
21049: LD_STRING DStasis-Pty-2
21051: PPUSH
21052: CALL_OW 88
21056: GO 21104
// if IsOK ( Dolgov ) then
21058: LD_EXP 45
21062: PPUSH
21063: CALL_OW 302
21067: IFFALSE 21083
// Say ( Dolgov , DStasis-Dol-2 ) else
21069: LD_EXP 45
21073: PPUSH
21074: LD_STRING DStasis-Dol-2
21076: PPUSH
21077: CALL_OW 88
21081: GO 21104
// DialogRandom ( speaker , DStasis-RSol1-2 ,  , false , true ) ;
21083: LD_VAR 0 2
21087: PPUSH
21088: LD_STRING DStasis-RSol1-2
21090: PPUSH
21091: LD_STRING 
21093: PPUSH
21094: LD_INT 0
21096: PPUSH
21097: LD_INT 1
21099: PPUSH
21100: CALL 12102 0 5
// Say ( Burlak , DStasis-Bur-2 ) ;
21104: LD_EXP 39
21108: PPUSH
21109: LD_STRING DStasis-Bur-2
21111: PPUSH
21112: CALL_OW 88
// end ; DialogueOff ;
21116: CALL_OW 7
// if GetTech ( tech_SibEng , 3 ) = state_researched then
21120: LD_INT 22
21122: PPUSH
21123: LD_INT 3
21125: PPUSH
21126: CALL_OW 321
21130: PUSH
21131: LD_INT 2
21133: EQUAL
21134: IFFALSE 21143
// ChangeMissionObjectives ( MOutResearch ) ;
21136: LD_STRING MOutResearch
21138: PPUSH
21139: CALL_OW 337
// end ;
21143: LD_VAR 0 1
21147: RET
// every 0 0$01 trigger GetTech ( tech_SibEng , 3 ) = state_researched and GetTech ( tech_TauField , 3 ) = state_researched and not dial_EndMissionDialogBlocker do var depots , depot , sibCounter ;
21148: LD_INT 22
21150: PPUSH
21151: LD_INT 3
21153: PPUSH
21154: CALL_OW 321
21158: PUSH
21159: LD_INT 2
21161: EQUAL
21162: PUSH
21163: LD_INT 30
21165: PPUSH
21166: LD_INT 3
21168: PPUSH
21169: CALL_OW 321
21173: PUSH
21174: LD_INT 2
21176: EQUAL
21177: AND
21178: PUSH
21179: LD_EXP 14
21183: NOT
21184: AND
21185: IFFALSE 21528
21187: GO 21189
21189: DISABLE
21190: LD_INT 0
21192: PPUSH
21193: PPUSH
21194: PPUSH
// begin wait ( 0 0$15 ) ;
21195: LD_INT 525
21197: PPUSH
21198: CALL_OW 67
// depots = FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21202: LD_ADDR_VAR 0 1
21206: PUSH
21207: LD_INT 22
21209: PUSH
21210: LD_INT 3
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 50
21219: PUSH
21220: EMPTY
21221: LIST
21222: PUSH
21223: LD_INT 21
21225: PUSH
21226: LD_INT 3
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 2
21235: PUSH
21236: LD_INT 30
21238: PUSH
21239: LD_INT 0
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 30
21248: PUSH
21249: LD_INT 1
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: LIST
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: PPUSH
21267: CALL_OW 69
21271: ST_TO_ADDR
// sibCounter = 0 ;
21272: LD_ADDR_VAR 0 3
21276: PUSH
21277: LD_INT 0
21279: ST_TO_ADDR
// for depot in depots do
21280: LD_ADDR_VAR 0 2
21284: PUSH
21285: LD_VAR 0 1
21289: PUSH
21290: FOR_IN
21291: IFFALSE 21324
// sibCounter = sibCounter + GetResourceType ( GetBase ( depot ) , mat_siberit ) ;
21293: LD_ADDR_VAR 0 3
21297: PUSH
21298: LD_VAR 0 3
21302: PUSH
21303: LD_VAR 0 2
21307: PPUSH
21308: CALL_OW 274
21312: PPUSH
21313: LD_INT 3
21315: PPUSH
21316: CALL_OW 275
21320: PLUS
21321: ST_TO_ADDR
21322: GO 21290
21324: POP
21325: POP
// if sibCounter >= 100 then
21326: LD_VAR 0 3
21330: PUSH
21331: LD_INT 100
21333: GREATEREQUAL
21334: IFFALSE 21520
// begin ChangeMissionObjectives ( MOutMine ) ;
21336: LD_STRING MOutMine
21338: PPUSH
21339: CALL_OW 337
// dial_EndMissionDialogBlocker = true ;
21343: LD_ADDR_EXP 14
21347: PUSH
21348: LD_INT 1
21350: ST_TO_ADDR
// DialogueOn ;
21351: CALL_OW 6
// SayRadio ( Platonov , DNextMiss1-Pla-1 ) ;
21355: LD_EXP 47
21359: PPUSH
21360: LD_STRING DNextMiss1-Pla-1
21362: PPUSH
21363: CALL_OW 94
// if not savedVsevolod then
21367: LD_EXP 19
21371: NOT
21372: IFFALSE 21418
// begin SayRadio ( Platonov , DNextMiss2-Pla-1 ) ;
21374: LD_EXP 47
21378: PPUSH
21379: LD_STRING DNextMiss2-Pla-1
21381: PPUSH
21382: CALL_OW 94
// Say ( Burlak , DNextMiss4-Bur-1 ) ;
21386: LD_EXP 39
21390: PPUSH
21391: LD_STRING DNextMiss4-Bur-1
21393: PPUSH
21394: CALL_OW 88
// SayRadio ( Vsevolod , DDieVsev1-Vse-1 ) ;
21398: LD_EXP 51
21402: PPUSH
21403: LD_STRING DDieVsev1-Vse-1
21405: PPUSH
21406: CALL_OW 94
// ForceFinishGame ;
21410: CALL 22201 0 0
// exit ;
21414: GO 21528
// end else
21416: GO 21454
// begin SayRadio ( Platonov , DNextMiss3-Pla-1 ) ;
21418: LD_EXP 47
21422: PPUSH
21423: LD_STRING DNextMiss3-Pla-1
21425: PPUSH
21426: CALL_OW 94
// SayRadio ( Platonov , DNextMiss4-Pla-1 ) ;
21430: LD_EXP 47
21434: PPUSH
21435: LD_STRING DNextMiss4-Pla-1
21437: PPUSH
21438: CALL_OW 94
// Say ( Burlak , DNextMiss4-Bur-1 ) ;
21442: LD_EXP 39
21446: PPUSH
21447: LD_STRING DNextMiss4-Bur-1
21449: PPUSH
21450: CALL_OW 88
// end ; DialogueOff ;
21454: CALL_OW 7
// SelectCharacters ;
21458: CALL 15376 0 0
// canSpawnReinforces = true ;
21462: LD_ADDR_EXP 23
21466: PUSH
21467: LD_INT 1
21469: ST_TO_ADDR
// canRemoveUnits = true ;
21470: LD_ADDR_EXP 25
21474: PUSH
21475: LD_INT 1
21477: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_friend , true ) ;
21478: LD_INT 1
21480: PPUSH
21481: LD_INT 6
21483: PPUSH
21484: LD_INT 1
21486: PPUSH
21487: LD_INT 1
21489: PPUSH
21490: CALL_OW 80
// SetAreaMapShow ( ExitMapArea , 1 ) ;
21494: LD_INT 14
21496: PPUSH
21497: LD_INT 1
21499: PPUSH
21500: CALL_OW 424
// ChangeMissionObjectives ( MOutResearch ) ;
21504: LD_STRING MOutResearch
21506: PPUSH
21507: CALL_OW 337
// ChangeMissionObjectives ( MCars ) ;
21511: LD_STRING MCars
21513: PPUSH
21514: CALL_OW 337
// exit ;
21518: GO 21528
// end ; wait ( 0 0$10 ) ;
21520: LD_INT 350
21522: PPUSH
21523: CALL_OW 67
// enable ;
21527: ENABLE
// end ;
21528: PPOPN 3
21530: END
// every 0 0$1 trigger canRemoveUnits do var un ;
21531: LD_EXP 25
21535: IFFALSE 21645
21537: GO 21539
21539: DISABLE
21540: LD_INT 0
21542: PPUSH
// begin enable ;
21543: ENABLE
// SetLives ( Vsevolod , 1000 ) ;
21544: LD_EXP 51
21548: PPUSH
21549: LD_INT 1000
21551: PPUSH
21552: CALL_OW 234
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , ExitMapArea ) ;
21556: LD_INT 22
21558: PUSH
21559: LD_INT 6
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 21
21568: PUSH
21569: LD_INT 1
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PPUSH
21580: CALL_OW 69
21584: PPUSH
21585: LD_INT 14
21587: PPUSH
21588: CALL_OW 113
// for un in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
21592: LD_ADDR_VAR 0 1
21596: PUSH
21597: LD_INT 14
21599: PPUSH
21600: LD_INT 22
21602: PUSH
21603: LD_INT 6
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 21
21612: PUSH
21613: LD_INT 1
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PPUSH
21624: CALL_OW 70
21628: PUSH
21629: FOR_IN
21630: IFFALSE 21643
// RemoveUnit ( un ) ;
21632: LD_VAR 0 1
21636: PPUSH
21637: CALL_OW 64
21641: GO 21629
21643: POP
21644: POP
// end ;
21645: PPOPN 1
21647: END
// every 1 trigger not canGoNorth and FilterUnitsInArea ( NorthBlockerArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do var unit ;
21648: LD_EXP 21
21652: NOT
21653: PUSH
21654: LD_INT 15
21656: PPUSH
21657: LD_INT 22
21659: PUSH
21660: LD_INT 3
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: LD_INT 50
21669: PUSH
21670: EMPTY
21671: LIST
21672: PUSH
21673: LD_INT 2
21675: PUSH
21676: LD_INT 21
21678: PUSH
21679: LD_INT 1
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 21
21688: PUSH
21689: LD_INT 2
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: LIST
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: LIST
21705: PPUSH
21706: CALL_OW 70
21710: AND
21711: IFFALSE 21843
21713: GO 21715
21715: DISABLE
21716: LD_INT 0
21718: PPUSH
// begin enable ;
21719: ENABLE
// for unit in FilterUnitsInArea ( NorthBlockerArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
21720: LD_ADDR_VAR 0 1
21724: PUSH
21725: LD_INT 15
21727: PPUSH
21728: LD_INT 22
21730: PUSH
21731: LD_INT 3
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: LD_INT 50
21740: PUSH
21741: EMPTY
21742: LIST
21743: PUSH
21744: LD_INT 2
21746: PUSH
21747: LD_INT 21
21749: PUSH
21750: LD_INT 1
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 21
21759: PUSH
21760: LD_INT 2
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: LIST
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: LIST
21776: PPUSH
21777: CALL_OW 70
21781: PUSH
21782: FOR_IN
21783: IFFALSE 21799
// ComMoveToArea ( unit , NorthBlockerReturnArea ) ;
21785: LD_VAR 0 1
21789: PPUSH
21790: LD_INT 16
21792: PPUSH
21793: CALL_OW 113
21797: GO 21782
21799: POP
21800: POP
// if not dial_NorthBlocker then
21801: LD_EXP 13
21805: NOT
21806: IFFALSE 21843
// begin dial_NorthBlocker = true ;
21808: LD_ADDR_EXP 13
21812: PUSH
21813: LD_INT 1
21815: ST_TO_ADDR
// Say ( Burlak , DMoveNorth-Bur-1 ) ;
21816: LD_EXP 39
21820: PPUSH
21821: LD_STRING DMoveNorth-Bur-1
21823: PPUSH
21824: CALL_OW 88
// wait ( 0 0$5 ) ;
21828: LD_INT 175
21830: PPUSH
21831: CALL_OW 67
// dial_NorthBlocker = false ;
21835: LD_ADDR_EXP 13
21839: PUSH
21840: LD_INT 0
21842: ST_TO_ADDR
// end ; end ;
21843: PPOPN 1
21845: END
// every 2 2$30 trigger canSpawnReinforces do
21846: LD_EXP 23
21850: IFFALSE 21906
21852: GO 21854
21854: DISABLE
// begin SpawnPlatonovReinforces ;
21855: CALL 2897 0 0
// CenterOnXY ( 134 , 233 ) ;
21859: LD_INT 134
21861: PPUSH
21862: LD_INT 233
21864: PPUSH
21865: CALL_OW 84
// if Kirilenkova and IsPlaced ( Kirilenkova ) then
21869: LD_EXP 48
21873: PUSH
21874: LD_EXP 48
21878: PPUSH
21879: CALL_OW 305
21883: AND
21884: IFFALSE 21898
// Say ( Kirilenkova , DMeetKirilenkova-Kir-1 ) ;
21886: LD_EXP 48
21890: PPUSH
21891: LD_STRING DMeetKirilenkova-Kir-1
21893: PPUSH
21894: CALL_OW 88
// canEndMission = true ;
21898: LD_ADDR_EXP 24
21902: PUSH
21903: LD_INT 1
21905: ST_TO_ADDR
// end ; end_of_file
21906: END
// export function Lose_Burlak ; begin
21907: LD_INT 0
21909: PPUSH
// YouLost ( Burlak ) ;
21910: LD_STRING Burlak
21912: PPUSH
21913: CALL_OW 104
// end ;
21917: LD_VAR 0 1
21921: RET
// export function Lose_Gleb ; begin
21922: LD_INT 0
21924: PPUSH
// SayRadio ( Platonov , DKillGleb-Pla-1 ) ;
21925: LD_EXP 47
21929: PPUSH
21930: LD_STRING DKillGleb-Pla-1
21932: PPUSH
21933: CALL_OW 94
// YouLost ( Gleb ) ;
21937: LD_STRING Gleb
21939: PPUSH
21940: CALL_OW 104
// end ;
21944: LD_VAR 0 1
21948: RET
// every 0 0$1 trigger not canEndMission and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_engineer ] , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
21949: LD_EXP 24
21953: NOT
21954: PUSH
21955: LD_INT 22
21957: PUSH
21958: LD_INT 3
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 2
21967: PUSH
21968: LD_INT 25
21970: PUSH
21971: LD_INT 2
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 30
21980: PUSH
21981: LD_INT 1
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 30
21990: PUSH
21991: LD_INT 0
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 30
22000: PUSH
22001: LD_INT 6
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 30
22010: PUSH
22011: LD_INT 7
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 30
22020: PUSH
22021: LD_INT 8
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PPUSH
22041: CALL_OW 69
22045: NOT
22046: AND
22047: IFFALSE 22059
22049: GO 22051
22051: DISABLE
// YouLost ( NoDepotNoEngineerNoLab ) ;
22052: LD_STRING NoDepotNoEngineerNoLab
22054: PPUSH
22055: CALL_OW 104
22059: END
// export function Lose_NoDepotNoEngineerNoLab ; begin
22060: LD_INT 0
22062: PPUSH
// YouLost ( NoDepotNoEngineerNoLab ) ;
22063: LD_STRING NoDepotNoEngineerNoLab
22065: PPUSH
22066: CALL_OW 104
// end ; end_of_file
22070: LD_VAR 0 1
22074: RET
// every 0 0$5 trigger canEndMission and not FilterUnitsExceptArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_and , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ] ) do var units , qr ;
22075: LD_EXP 24
22079: PUSH
22080: LD_INT 14
22082: PPUSH
22083: LD_INT 22
22085: PUSH
22086: LD_INT 3
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 50
22095: PUSH
22096: EMPTY
22097: LIST
22098: PUSH
22099: LD_INT 2
22101: PUSH
22102: LD_INT 21
22104: PUSH
22105: LD_INT 1
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 1
22114: PUSH
22115: LD_INT 21
22117: PUSH
22118: LD_INT 2
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 59
22127: PUSH
22128: EMPTY
22129: LIST
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: LIST
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: LIST
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: LIST
22145: PPUSH
22146: CALL_OW 71
22150: NOT
22151: AND
22152: IFFALSE 22198
22154: GO 22156
22156: DISABLE
22157: LD_INT 0
22159: PPUSH
22160: PPUSH
// begin case Query ( QEndGame ) of 1 :
22161: LD_STRING QEndGame
22163: PPUSH
22164: CALL_OW 97
22168: PUSH
22169: LD_INT 1
22171: DOUBLE
22172: EQUAL
22173: IFTRUE 22177
22175: GO 22196
22177: POP
// begin SetRewards ;
22178: CALL 22225 0 0
// SavePlayerCharacters ;
22182: CALL 22389 0 0
// SaveGlobalVariables ;
22186: CALL 22778 0 0
// YouWin ;
22190: CALL_OW 103
// end ; end ;
22194: GO 22197
22196: POP
// enable ;
22197: ENABLE
// end ;
22198: PPOPN 2
22200: END
// export function ForceFinishGame ; begin
22201: LD_INT 0
22203: PPUSH
// SetRewards ;
22204: CALL 22225 0 0
// SavePlayerCharacters ;
22208: CALL 22389 0 0
// SaveGlobalVariables ;
22212: CALL 22778 0 0
// YouWin ;
22216: CALL_OW 103
// end ;
22220: LD_VAR 0 1
22224: RET
// function SetRewards ; begin
22225: LD_INT 0
22227: PPUSH
// if savedVsevolod then
22228: LD_EXP 19
22232: IFFALSE 22246
// AddMedal ( Vsevolod , 1 ) else
22234: LD_STRING Vsevolod
22236: PPUSH
22237: LD_INT 1
22239: PPUSH
22240: CALL_OW 101
22244: GO 22257
// AddMedal ( Vsevolod , - 1 ) ;
22246: LD_STRING Vsevolod
22248: PPUSH
22249: LD_INT 1
22251: NEG
22252: PPUSH
22253: CALL_OW 101
// if not lostAgainBase then
22257: LD_EXP 17
22261: NOT
22262: IFFALSE 22276
// AddMedal ( Ovsyenko , 1 ) else
22264: LD_STRING Ovsyenko
22266: PPUSH
22267: LD_INT 1
22269: PPUSH
22270: CALL_OW 101
22274: GO 22287
// AddMedal ( Ovsyenko , - 1 ) ;
22276: LD_STRING Ovsyenko
22278: PPUSH
22279: LD_INT 1
22281: NEG
22282: PPUSH
22283: CALL_OW 101
// if GetTech ( tech_MatPred , 3 ) = state_researched then
22287: LD_INT 9
22289: PPUSH
22290: LD_INT 3
22292: PPUSH
22293: CALL_OW 321
22297: PUSH
22298: LD_INT 2
22300: EQUAL
22301: IFFALSE 22315
// AddMedal ( Prediction , 1 ) else
22303: LD_STRING Prediction
22305: PPUSH
22306: LD_INT 1
22308: PPUSH
22309: CALL_OW 101
22313: GO 22326
// AddMedal ( Prediction , - 1 ) ;
22315: LD_STRING Prediction
22317: PPUSH
22318: LD_INT 1
22320: NEG
22321: PPUSH
22322: CALL_OW 101
// GiveMedals ( Main ) ;
22326: LD_STRING Main
22328: PPUSH
22329: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ) ;
22333: LD_INT 22
22335: PUSH
22336: LD_INT 3
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 21
22345: PUSH
22346: LD_INT 1
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: LD_INT 23
22355: PUSH
22356: LD_INT 3
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 50
22365: PUSH
22366: EMPTY
22367: LIST
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: PPUSH
22375: CALL_OW 69
22379: PPUSH
22380: CALL_OW 43
// end ;
22384: LD_VAR 0 1
22388: RET
// function SavePlayerCharacters ; var randomsToSave ; begin
22389: LD_INT 0
22391: PPUSH
22392: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
22393: LD_EXP 39
22397: PPUSH
22398: LD_STRING Burlak
22400: PPUSH
22401: LD_INT 3
22403: PPUSH
22404: CALL 11903 0 3
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
22408: LD_EXP 40
22412: PPUSH
22413: LD_STRING Karamazov
22415: PPUSH
22416: LD_INT 3
22418: PPUSH
22419: CALL 11903 0 3
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
22423: LD_EXP 41
22427: PPUSH
22428: LD_STRING Petrovova
22430: PPUSH
22431: LD_INT 3
22433: PPUSH
22434: CALL 11903 0 3
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
22438: LD_EXP 42
22442: PPUSH
22443: LD_STRING Gleb
22445: PPUSH
22446: LD_INT 3
22448: PPUSH
22449: CALL 11903 0 3
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
22453: LD_EXP 43
22457: PPUSH
22458: LD_STRING Petrosyan
22460: PPUSH
22461: LD_INT 3
22463: PPUSH
22464: CALL 11903 0 3
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
22468: LD_EXP 45
22472: PPUSH
22473: LD_STRING Dolgov
22475: PPUSH
22476: LD_INT 3
22478: PPUSH
22479: CALL 11903 0 3
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
22483: LD_EXP 46
22487: PPUSH
22488: LD_STRING Lipshchin
22490: PPUSH
22491: LD_INT 3
22493: PPUSH
22494: CALL 11903 0 3
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
22498: LD_EXP 44
22502: PPUSH
22503: LD_STRING Titov
22505: PPUSH
22506: LD_INT 3
22508: PPUSH
22509: CALL 11903 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
22513: LD_EXP 48
22517: PPUSH
22518: LD_STRING Kirilenkova
22520: PPUSH
22521: LD_INT 3
22523: PPUSH
22524: CALL 11903 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
22528: LD_EXP 49
22532: PPUSH
22533: LD_STRING Belkov
22535: PPUSH
22536: LD_INT 3
22538: PPUSH
22539: CALL 11903 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
22543: LD_EXP 50
22547: PPUSH
22548: LD_STRING Belkov2
22550: PPUSH
22551: LD_INT 3
22553: PPUSH
22554: CALL 11903 0 3
// ExtSaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
22558: LD_INT 22
22560: PUSH
22561: LD_INT 3
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 21
22570: PUSH
22571: LD_INT 1
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 2
22580: PUSH
22581: LD_INT 25
22583: PUSH
22584: LD_INT 12
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 25
22593: PUSH
22594: LD_INT 16
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 25
22603: PUSH
22604: LD_INT 15
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: LIST
22621: PPUSH
22622: CALL_OW 69
22626: PPUSH
22627: LD_STRING other_apemans
22629: PPUSH
22630: LD_INT 3
22632: PPUSH
22633: CALL 11959 0 3
// randomsToSave = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 ] ;
22637: LD_ADDR_VAR 0 2
22641: PUSH
22642: LD_INT 22
22644: PUSH
22645: LD_INT 3
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 21
22654: PUSH
22655: LD_INT 1
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 23
22664: PUSH
22665: LD_INT 3
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 50
22674: PUSH
22675: EMPTY
22676: LIST
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: PPUSH
22684: CALL_OW 69
22688: PUSH
22689: LD_EXP 39
22693: PUSH
22694: LD_EXP 40
22698: PUSH
22699: LD_EXP 41
22703: PUSH
22704: LD_EXP 42
22708: PUSH
22709: LD_EXP 43
22713: PUSH
22714: LD_EXP 44
22718: PUSH
22719: LD_EXP 45
22723: PUSH
22724: LD_EXP 46
22728: PUSH
22729: LD_EXP 48
22733: PUSH
22734: LD_EXP 49
22738: PUSH
22739: LD_EXP 50
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: DIFF
22757: ST_TO_ADDR
// ExtSaveCharacters ( randomsToSave , other_survivors , 3 ) ;
22758: LD_VAR 0 2
22762: PPUSH
22763: LD_STRING other_survivors
22765: PPUSH
22766: LD_INT 3
22768: PPUSH
22769: CALL 11959 0 3
// end ;
22773: LD_VAR 0 1
22777: RET
// function SaveGlobalVariables ; var i , driver , driverShortName ; begin
22778: LD_INT 0
22780: PPUSH
22781: PPUSH
22782: PPUSH
22783: PPUSH
// resourcesFrom06 = [ ] ;
22784: LD_ADDR_EXP 8
22788: PUSH
22789: EMPTY
22790: ST_TO_ADDR
// SaveVariable ( techMatPredStatus , 06_TechMatPredStatus_1 ) ;
22791: LD_EXP 6
22795: PPUSH
22796: LD_STRING 06_TechMatPredStatus_1
22798: PPUSH
22799: CALL_OW 39
// for i in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_occupied ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , 89 ] ] ] ) do
22803: LD_ADDR_VAR 0 2
22807: PUSH
22808: LD_INT 14
22810: PPUSH
22811: LD_INT 22
22813: PUSH
22814: LD_INT 3
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 59
22823: PUSH
22824: EMPTY
22825: LIST
22826: PUSH
22827: LD_INT 2
22829: PUSH
22830: LD_INT 34
22832: PUSH
22833: LD_INT 51
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 34
22842: PUSH
22843: LD_INT 32
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 34
22852: PUSH
22853: LD_INT 12
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 34
22862: PUSH
22863: LD_INT 89
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: LIST
22881: PPUSH
22882: CALL_OW 70
22886: PUSH
22887: FOR_IN
22888: IFFALSE 22916
// resourcesFrom06 = resourcesFrom06 ^ [ GetMultiCargo ( i ) ] ;
22890: LD_ADDR_EXP 8
22894: PUSH
22895: LD_EXP 8
22899: PUSH
22900: LD_VAR 0 2
22904: PPUSH
22905: CALL 15029 0 1
22909: PUSH
22910: EMPTY
22911: LIST
22912: ADD
22913: ST_TO_ADDR
22914: GO 22887
22916: POP
22917: POP
// SaveVariable ( resourcesFrom06 , 06_ResourcesInCargo_3 ) ;
22918: LD_EXP 8
22922: PPUSH
22923: LD_STRING 06_ResourcesInCargo_3
22925: PPUSH
22926: CALL_OW 39
// for i in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ) do
22930: LD_ADDR_VAR 0 2
22934: PUSH
22935: LD_INT 14
22937: PPUSH
22938: LD_INT 22
22940: PUSH
22941: LD_INT 3
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 21
22950: PUSH
22951: LD_INT 2
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 59
22960: PUSH
22961: EMPTY
22962: LIST
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: LIST
22968: PPUSH
22969: CALL_OW 70
22973: PUSH
22974: FOR_IN
22975: IFFALSE 23379
// begin driver = UnitsInside ( i ) [ 1 ] ;
22977: LD_ADDR_VAR 0 3
22981: PUSH
22982: LD_VAR 0 2
22986: PPUSH
22987: CALL_OW 313
22991: PUSH
22992: LD_INT 1
22994: ARRAY
22995: ST_TO_ADDR
// if driver = Burlak then
22996: LD_VAR 0 3
23000: PUSH
23001: LD_EXP 39
23005: EQUAL
23006: IFFALSE 23016
// driverShortName = Bur ;
23008: LD_ADDR_VAR 0 4
23012: PUSH
23013: LD_STRING Bur
23015: ST_TO_ADDR
// if driver = Karamazov then
23016: LD_VAR 0 3
23020: PUSH
23021: LD_EXP 40
23025: EQUAL
23026: IFFALSE 23036
// driverShortName = Kar ;
23028: LD_ADDR_VAR 0 4
23032: PUSH
23033: LD_STRING Kar
23035: ST_TO_ADDR
// if driver = Petrovova then
23036: LD_VAR 0 3
23040: PUSH
23041: LD_EXP 41
23045: EQUAL
23046: IFFALSE 23056
// driverShortName = Ptr ;
23048: LD_ADDR_VAR 0 4
23052: PUSH
23053: LD_STRING Ptr
23055: ST_TO_ADDR
// if driver = Gleb then
23056: LD_VAR 0 3
23060: PUSH
23061: LD_EXP 42
23065: EQUAL
23066: IFFALSE 23076
// driverShortName = Glb ;
23068: LD_ADDR_VAR 0 4
23072: PUSH
23073: LD_STRING Glb
23075: ST_TO_ADDR
// if driver = Petrosyan then
23076: LD_VAR 0 3
23080: PUSH
23081: LD_EXP 43
23085: EQUAL
23086: IFFALSE 23096
// driverShortName = Pet ;
23088: LD_ADDR_VAR 0 4
23092: PUSH
23093: LD_STRING Pet
23095: ST_TO_ADDR
// if driver = Dolgov then
23096: LD_VAR 0 3
23100: PUSH
23101: LD_EXP 45
23105: EQUAL
23106: IFFALSE 23116
// driverShortName = Dol ;
23108: LD_ADDR_VAR 0 4
23112: PUSH
23113: LD_STRING Dol
23115: ST_TO_ADDR
// if driver = Lipshchin then
23116: LD_VAR 0 3
23120: PUSH
23121: LD_EXP 46
23125: EQUAL
23126: IFFALSE 23136
// driverShortName = Lip ;
23128: LD_ADDR_VAR 0 4
23132: PUSH
23133: LD_STRING Lip
23135: ST_TO_ADDR
// if driver = Titov then
23136: LD_VAR 0 3
23140: PUSH
23141: LD_EXP 44
23145: EQUAL
23146: IFFALSE 23156
// driverShortName = Tit ;
23148: LD_ADDR_VAR 0 4
23152: PUSH
23153: LD_STRING Tit
23155: ST_TO_ADDR
// if driver = Kirilenkova then
23156: LD_VAR 0 3
23160: PUSH
23161: LD_EXP 48
23165: EQUAL
23166: IFFALSE 23176
// driverShortName = Kir ;
23168: LD_ADDR_VAR 0 4
23172: PUSH
23173: LD_STRING Kir
23175: ST_TO_ADDR
// if driver = Belkov then
23176: LD_VAR 0 3
23180: PUSH
23181: LD_EXP 49
23185: EQUAL
23186: IFFALSE 23196
// driverShortName = Bel ;
23188: LD_ADDR_VAR 0 4
23192: PUSH
23193: LD_STRING Bel
23195: ST_TO_ADDR
// if driver = Belkov2 then
23196: LD_VAR 0 3
23200: PUSH
23201: LD_EXP 50
23205: EQUAL
23206: IFFALSE 23216
// driverShortName = Bel2 ;
23208: LD_ADDR_VAR 0 4
23212: PUSH
23213: LD_STRING Bel2
23215: ST_TO_ADDR
// if not driver in [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 ] then
23216: LD_VAR 0 3
23220: PUSH
23221: LD_EXP 39
23225: PUSH
23226: LD_EXP 40
23230: PUSH
23231: LD_EXP 41
23235: PUSH
23236: LD_EXP 42
23240: PUSH
23241: LD_EXP 43
23245: PUSH
23246: LD_EXP 44
23250: PUSH
23251: LD_EXP 45
23255: PUSH
23256: LD_EXP 46
23260: PUSH
23261: LD_EXP 48
23265: PUSH
23266: LD_EXP 49
23270: PUSH
23271: LD_EXP 50
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: IN
23289: NOT
23290: IFFALSE 23300
// driverShortName = rand ;
23292: LD_ADDR_VAR 0 4
23296: PUSH
23297: LD_STRING rand
23299: ST_TO_ADDR
// vehsFrom06 = vehsFrom06 ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , driverShortName ] ] ;
23300: LD_ADDR_EXP 7
23304: PUSH
23305: LD_EXP 7
23309: PUSH
23310: LD_VAR 0 2
23314: PPUSH
23315: CALL_OW 248
23319: PUSH
23320: LD_VAR 0 2
23324: PPUSH
23325: CALL_OW 265
23329: PUSH
23330: LD_VAR 0 2
23334: PPUSH
23335: CALL_OW 262
23339: PUSH
23340: LD_VAR 0 2
23344: PPUSH
23345: CALL_OW 263
23349: PUSH
23350: LD_VAR 0 2
23354: PPUSH
23355: CALL_OW 264
23359: PUSH
23360: LD_VAR 0 4
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: PUSH
23373: EMPTY
23374: LIST
23375: ADD
23376: ST_TO_ADDR
// end ;
23377: GO 22974
23379: POP
23380: POP
// SaveVariable ( vehsFrom06 , 06_Vehicles_2 ) ;
23381: LD_EXP 7
23385: PPUSH
23386: LD_STRING 06_Vehicles_2
23388: PPUSH
23389: CALL_OW 39
// SaveVariable ( savedVsevolod , 06_VsevolodStatus_4 ) ;
23393: LD_EXP 19
23397: PPUSH
23398: LD_STRING 06_VsevolodStatus_4
23400: PPUSH
23401: CALL_OW 39
// end ; end_of_file
23405: LD_VAR 0 1
23409: RET
// on UnitDestroyed ( unit ) do begin if unit in ovsyenkoBase then
23410: LD_VAR 0 1
23414: PUSH
23415: LD_EXP 59
23419: IN
23420: IFFALSE 23438
// ovsyenkoBase = ovsyenkoBase diff unit ;
23422: LD_ADDR_EXP 59
23426: PUSH
23427: LD_EXP 59
23431: PUSH
23432: LD_VAR 0 1
23436: DIFF
23437: ST_TO_ADDR
// if unit = Burlak then
23438: LD_VAR 0 1
23442: PUSH
23443: LD_EXP 39
23447: EQUAL
23448: IFFALSE 23454
// Lose_Burlak ;
23450: CALL 21907 0 0
// if unit = Vsevolod and GetSide ( Vsevolod ) = 3 then
23454: LD_VAR 0 1
23458: PUSH
23459: LD_EXP 51
23463: EQUAL
23464: PUSH
23465: LD_EXP 51
23469: PPUSH
23470: CALL_OW 255
23474: PUSH
23475: LD_INT 3
23477: EQUAL
23478: AND
23479: IFFALSE 23489
// savedVsevolod = false ;
23481: LD_ADDR_EXP 19
23485: PUSH
23486: LD_INT 0
23488: ST_TO_ADDR
// if unit = ovsyenko and GetSide ( ovsyenko ) = 3 then
23489: LD_VAR 0 1
23493: PUSH
23494: LD_INT 86
23496: EQUAL
23497: PUSH
23498: LD_INT 86
23500: PPUSH
23501: CALL_OW 255
23505: PUSH
23506: LD_INT 3
23508: EQUAL
23509: AND
23510: IFFALSE 23520
// lostAgainBase = true ;
23512: LD_ADDR_EXP 17
23516: PUSH
23517: LD_INT 1
23519: ST_TO_ADDR
// end ;
23520: PPOPN 1
23522: END
// on UnitDestroyed_Extra ( unit , killer_side , killer_unit ) do begin if unit = Gleb and killer_side = 3 then
23523: LD_VAR 0 1
23527: PUSH
23528: LD_EXP 42
23532: EQUAL
23533: PUSH
23534: LD_VAR 0 2
23538: PUSH
23539: LD_INT 3
23541: EQUAL
23542: AND
23543: IFFALSE 23549
// Lose_Gleb ;
23545: CALL 21922 0 0
// if unit = Vsevolod then
23549: LD_VAR 0 1
23553: PUSH
23554: LD_EXP 51
23558: EQUAL
23559: IFFALSE 23569
// savedVsevolod = false ;
23561: LD_ADDR_EXP 19
23565: PUSH
23566: LD_INT 0
23568: ST_TO_ADDR
// end ;
23569: PPOPN 3
23571: END
// on BuildingComplete ( building ) do begin end ;
23572: PPOPN 1
23574: END
// on BuildingCaptured ( building , side , human ) do begin if GetSide ( human ) = 3 and GetBType ( building ) = b_siberite_mine and not dial_SibTechsBlocker then
23575: LD_VAR 0 3
23579: PPUSH
23580: CALL_OW 255
23584: PUSH
23585: LD_INT 3
23587: EQUAL
23588: PUSH
23589: LD_VAR 0 1
23593: PPUSH
23594: CALL_OW 266
23598: PUSH
23599: LD_INT 30
23601: EQUAL
23602: AND
23603: PUSH
23604: LD_EXP 9
23608: NOT
23609: AND
23610: IFFALSE 23616
// Dial_SibTechs ;
23612: CALL 17268 0 0
// if GetSide ( human ) = 3 and GetBType ( building ) in [ b_depot , b_warehouse ] and GetResourceType ( GetBase ( building ) , mat_siberit ) > 0 and not dial_SibTechsBlocker then
23616: LD_VAR 0 3
23620: PPUSH
23621: CALL_OW 255
23625: PUSH
23626: LD_INT 3
23628: EQUAL
23629: PUSH
23630: LD_VAR 0 1
23634: PPUSH
23635: CALL_OW 266
23639: PUSH
23640: LD_INT 0
23642: PUSH
23643: LD_INT 1
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: IN
23650: AND
23651: PUSH
23652: LD_VAR 0 1
23656: PPUSH
23657: CALL_OW 274
23661: PPUSH
23662: LD_INT 3
23664: PPUSH
23665: CALL_OW 275
23669: PUSH
23670: LD_INT 0
23672: GREATER
23673: AND
23674: PUSH
23675: LD_EXP 9
23679: NOT
23680: AND
23681: IFFALSE 23687
// Dial_SibTechs ;
23683: CALL 17268 0 0
// end ;
23687: PPOPN 3
23689: END
// on Contact ( side1 , side2 ) do begin end ;
23690: PPOPN 2
23692: END
// on VehicleConstructed ( vehicle , building ) do var side , controlTowers , tmp ;
23693: LD_INT 0
23695: PPUSH
23696: PPUSH
23697: PPUSH
// begin if GetSide ( vehicle ) = 1 then
23698: LD_VAR 0 1
23702: PPUSH
23703: CALL_OW 255
23707: PUSH
23708: LD_INT 1
23710: EQUAL
23711: IFFALSE 23878
// begin controlTowers = FilterUnitsInArea ( HeadAmericanBaseArea , [ [ f_side , 1 ] , [ f_ok ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_vehicle ] ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23713: LD_ADDR_VAR 0 4
23717: PUSH
23718: LD_INT 5
23720: PPUSH
23721: LD_INT 22
23723: PUSH
23724: LD_INT 1
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 50
23733: PUSH
23734: EMPTY
23735: LIST
23736: PUSH
23737: LD_INT 2
23739: PUSH
23740: LD_INT 21
23742: PUSH
23743: LD_INT 3
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 21
23752: PUSH
23753: LD_INT 2
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 2
23767: PUSH
23768: LD_INT 30
23770: PUSH
23771: LD_INT 36
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 34
23780: PUSH
23781: LD_INT 31
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: LIST
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: PPUSH
23799: CALL_OW 70
23803: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote and controlTowers then
23804: LD_VAR 0 1
23808: PPUSH
23809: CALL_OW 263
23813: PUSH
23814: LD_INT 2
23816: EQUAL
23817: PUSH
23818: LD_VAR 0 4
23822: AND
23823: IFFALSE 23878
// begin tmp = UnitsInside ( controlTowers [ 1 ] ) ;
23825: LD_ADDR_VAR 0 5
23829: PUSH
23830: LD_VAR 0 4
23834: PUSH
23835: LD_INT 1
23837: ARRAY
23838: PPUSH
23839: CALL_OW 313
23843: ST_TO_ADDR
// if tmp then
23844: LD_VAR 0 5
23848: IFFALSE 23878
// LinkVehicleToHuman ( vehicle , tmp [ rand ( 1 , tmp ) ] ) ;
23850: LD_VAR 0 1
23854: PPUSH
23855: LD_VAR 0 5
23859: PUSH
23860: LD_INT 1
23862: PPUSH
23863: LD_VAR 0 5
23867: PPUSH
23868: CALL_OW 12
23872: ARRAY
23873: PPUSH
23874: CALL_OW 53
// end ; end ; end ;
23878: PPOPN 5
23880: END
// on ResearchComplete ( research , building ) do begin if research = tech_TauField then
23881: LD_VAR 0 1
23885: PUSH
23886: LD_INT 30
23888: EQUAL
23889: IFFALSE 23895
// Dial_ResearchTauField ;
23891: CALL 20736 0 0
// if research = tech_SibEng and GetTech ( tech_TauField , 3 ) = state_researched then
23895: LD_VAR 0 1
23899: PUSH
23900: LD_INT 22
23902: EQUAL
23903: PUSH
23904: LD_INT 30
23906: PPUSH
23907: LD_INT 3
23909: PPUSH
23910: CALL_OW 321
23914: PUSH
23915: LD_INT 2
23917: EQUAL
23918: AND
23919: IFFALSE 23928
// ChangeMissionObjectives ( MOutResearch ) ;
23921: LD_STRING MOutResearch
23923: PPUSH
23924: CALL_OW 337
// if research = tech_MatPred then
23928: LD_VAR 0 1
23932: PUSH
23933: LD_INT 9
23935: EQUAL
23936: IFFALSE 23942
// Dial_ResearchMatPredictions ;
23938: CALL 17423 0 0
// end ; end_of_file
23942: PPOPN 2
23944: END
// every 0 0$1 trigger enableVsevolodCounter do
23945: LD_EXP 22
23949: IFFALSE 23969
23951: GO 23953
23953: DISABLE
// begin enable ;
23954: ENABLE
// timeToAttack = timeToAttack + 0 0$01 ;
23955: LD_ADDR_EXP 26
23959: PUSH
23960: LD_EXP 26
23964: PUSH
23965: LD_INT 35
23967: PLUS
23968: ST_TO_ADDR
// end ; end_of_file
23969: END
// every 0 0$01 do var timer ;
23970: GO 23972
23972: DISABLE
23973: LD_INT 0
23975: PPUSH
// begin timer := 5 5$30 ;
23976: LD_ADDR_VAR 0 1
23980: PUSH
23981: LD_INT 11550
23983: ST_TO_ADDR
// repeat wait ( timer ) ;
23984: LD_VAR 0 1
23988: PPUSH
23989: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
23993: LD_INT 3
23995: PPUSH
23996: LD_INT 5
23998: PPUSH
23999: CALL_OW 12
24003: PPUSH
24004: LD_INT 20
24006: PPUSH
24007: LD_INT 1
24009: PPUSH
24010: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
24014: LD_ADDR_EXP 27
24018: PUSH
24019: LD_EXP 27
24023: PUSH
24024: LD_INT 1
24026: PLUS
24027: ST_TO_ADDR
// until cratesSpawned = 3 ;
24028: LD_EXP 27
24032: PUSH
24033: LD_INT 3
24035: EQUAL
24036: IFFALSE 23984
// end ; end_of_file
24038: PPOPN 1
24040: END
// export ru_radar end_of_file export globalGameSaveCounter ; every 0 0$1 do
24041: GO 24043
24043: DISABLE
// begin enable ;
24044: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
24045: LD_STRING updateTimer(
24047: PUSH
24048: LD_OWVAR 1
24052: STR
24053: PUSH
24054: LD_STRING );
24056: STR
24057: PPUSH
24058: CALL_OW 559
// end ;
24062: END
// every 0 0$1 do
24063: GO 24065
24065: DISABLE
// begin globalGameSaveCounter := 0 ;
24066: LD_ADDR_EXP 65
24070: PUSH
24071: LD_INT 0
24073: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
24074: LD_STRING setGameSaveCounter(0)
24076: PPUSH
24077: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
24081: LD_STRING initStreamRollete();
24083: PPUSH
24084: CALL_OW 559
// InitStreamMode ;
24088: CALL 25414 0 0
// DefineStreamItems ( false ) ;
24092: LD_INT 0
24094: PPUSH
24095: CALL 25878 0 1
// end ;
24099: END
// export function SOS_MapStart ( ) ; begin
24100: LD_INT 0
24102: PPUSH
// if streamModeActive then
24103: LD_EXP 66
24107: IFFALSE 24116
// DefineStreamItems ( true ) ;
24109: LD_INT 1
24111: PPUSH
24112: CALL 25878 0 1
// UpdateLuaVariables ( ) ;
24116: CALL 24133 0 0
// UpdateFactoryWaypoints ( ) ;
24120: CALL 38739 0 0
// UpdateWarehouseGatheringPoints ( ) ;
24124: CALL 38996 0 0
// end ;
24128: LD_VAR 0 1
24132: RET
// function UpdateLuaVariables ( ) ; begin
24133: LD_INT 0
24135: PPUSH
// if globalGameSaveCounter then
24136: LD_EXP 65
24140: IFFALSE 24174
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
24142: LD_ADDR_EXP 65
24146: PUSH
24147: LD_EXP 65
24151: PPUSH
24152: CALL 82953 0 1
24156: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
24157: LD_STRING setGameSaveCounter(
24159: PUSH
24160: LD_EXP 65
24164: STR
24165: PUSH
24166: LD_STRING )
24168: STR
24169: PPUSH
24170: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
24174: LD_STRING setGameDifficulty(
24176: PUSH
24177: LD_OWVAR 67
24181: STR
24182: PUSH
24183: LD_STRING )
24185: STR
24186: PPUSH
24187: CALL_OW 559
// end ;
24191: LD_VAR 0 1
24195: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24196: LD_INT 0
24198: PPUSH
// if p2 = stream_mode then
24199: LD_VAR 0 2
24203: PUSH
24204: LD_INT 100
24206: EQUAL
24207: IFFALSE 25210
// begin if not StreamModeActive then
24209: LD_EXP 66
24213: NOT
24214: IFFALSE 24224
// StreamModeActive := true ;
24216: LD_ADDR_EXP 66
24220: PUSH
24221: LD_INT 1
24223: ST_TO_ADDR
// if p3 = 0 then
24224: LD_VAR 0 3
24228: PUSH
24229: LD_INT 0
24231: EQUAL
24232: IFFALSE 24238
// InitStreamMode ;
24234: CALL 25414 0 0
// if p3 = 1 then
24238: LD_VAR 0 3
24242: PUSH
24243: LD_INT 1
24245: EQUAL
24246: IFFALSE 24256
// sRocket := true ;
24248: LD_ADDR_EXP 71
24252: PUSH
24253: LD_INT 1
24255: ST_TO_ADDR
// if p3 = 2 then
24256: LD_VAR 0 3
24260: PUSH
24261: LD_INT 2
24263: EQUAL
24264: IFFALSE 24274
// sSpeed := true ;
24266: LD_ADDR_EXP 70
24270: PUSH
24271: LD_INT 1
24273: ST_TO_ADDR
// if p3 = 3 then
24274: LD_VAR 0 3
24278: PUSH
24279: LD_INT 3
24281: EQUAL
24282: IFFALSE 24292
// sEngine := true ;
24284: LD_ADDR_EXP 72
24288: PUSH
24289: LD_INT 1
24291: ST_TO_ADDR
// if p3 = 4 then
24292: LD_VAR 0 3
24296: PUSH
24297: LD_INT 4
24299: EQUAL
24300: IFFALSE 24310
// sSpec := true ;
24302: LD_ADDR_EXP 69
24306: PUSH
24307: LD_INT 1
24309: ST_TO_ADDR
// if p3 = 5 then
24310: LD_VAR 0 3
24314: PUSH
24315: LD_INT 5
24317: EQUAL
24318: IFFALSE 24328
// sLevel := true ;
24320: LD_ADDR_EXP 73
24324: PUSH
24325: LD_INT 1
24327: ST_TO_ADDR
// if p3 = 6 then
24328: LD_VAR 0 3
24332: PUSH
24333: LD_INT 6
24335: EQUAL
24336: IFFALSE 24346
// sArmoury := true ;
24338: LD_ADDR_EXP 74
24342: PUSH
24343: LD_INT 1
24345: ST_TO_ADDR
// if p3 = 7 then
24346: LD_VAR 0 3
24350: PUSH
24351: LD_INT 7
24353: EQUAL
24354: IFFALSE 24364
// sRadar := true ;
24356: LD_ADDR_EXP 75
24360: PUSH
24361: LD_INT 1
24363: ST_TO_ADDR
// if p3 = 8 then
24364: LD_VAR 0 3
24368: PUSH
24369: LD_INT 8
24371: EQUAL
24372: IFFALSE 24382
// sBunker := true ;
24374: LD_ADDR_EXP 76
24378: PUSH
24379: LD_INT 1
24381: ST_TO_ADDR
// if p3 = 9 then
24382: LD_VAR 0 3
24386: PUSH
24387: LD_INT 9
24389: EQUAL
24390: IFFALSE 24400
// sHack := true ;
24392: LD_ADDR_EXP 77
24396: PUSH
24397: LD_INT 1
24399: ST_TO_ADDR
// if p3 = 10 then
24400: LD_VAR 0 3
24404: PUSH
24405: LD_INT 10
24407: EQUAL
24408: IFFALSE 24418
// sFire := true ;
24410: LD_ADDR_EXP 78
24414: PUSH
24415: LD_INT 1
24417: ST_TO_ADDR
// if p3 = 11 then
24418: LD_VAR 0 3
24422: PUSH
24423: LD_INT 11
24425: EQUAL
24426: IFFALSE 24436
// sRefresh := true ;
24428: LD_ADDR_EXP 79
24432: PUSH
24433: LD_INT 1
24435: ST_TO_ADDR
// if p3 = 12 then
24436: LD_VAR 0 3
24440: PUSH
24441: LD_INT 12
24443: EQUAL
24444: IFFALSE 24454
// sExp := true ;
24446: LD_ADDR_EXP 80
24450: PUSH
24451: LD_INT 1
24453: ST_TO_ADDR
// if p3 = 13 then
24454: LD_VAR 0 3
24458: PUSH
24459: LD_INT 13
24461: EQUAL
24462: IFFALSE 24472
// sDepot := true ;
24464: LD_ADDR_EXP 81
24468: PUSH
24469: LD_INT 1
24471: ST_TO_ADDR
// if p3 = 14 then
24472: LD_VAR 0 3
24476: PUSH
24477: LD_INT 14
24479: EQUAL
24480: IFFALSE 24490
// sFlag := true ;
24482: LD_ADDR_EXP 82
24486: PUSH
24487: LD_INT 1
24489: ST_TO_ADDR
// if p3 = 15 then
24490: LD_VAR 0 3
24494: PUSH
24495: LD_INT 15
24497: EQUAL
24498: IFFALSE 24508
// sKamikadze := true ;
24500: LD_ADDR_EXP 90
24504: PUSH
24505: LD_INT 1
24507: ST_TO_ADDR
// if p3 = 16 then
24508: LD_VAR 0 3
24512: PUSH
24513: LD_INT 16
24515: EQUAL
24516: IFFALSE 24526
// sTroll := true ;
24518: LD_ADDR_EXP 91
24522: PUSH
24523: LD_INT 1
24525: ST_TO_ADDR
// if p3 = 17 then
24526: LD_VAR 0 3
24530: PUSH
24531: LD_INT 17
24533: EQUAL
24534: IFFALSE 24544
// sSlow := true ;
24536: LD_ADDR_EXP 92
24540: PUSH
24541: LD_INT 1
24543: ST_TO_ADDR
// if p3 = 18 then
24544: LD_VAR 0 3
24548: PUSH
24549: LD_INT 18
24551: EQUAL
24552: IFFALSE 24562
// sLack := true ;
24554: LD_ADDR_EXP 93
24558: PUSH
24559: LD_INT 1
24561: ST_TO_ADDR
// if p3 = 19 then
24562: LD_VAR 0 3
24566: PUSH
24567: LD_INT 19
24569: EQUAL
24570: IFFALSE 24580
// sTank := true ;
24572: LD_ADDR_EXP 95
24576: PUSH
24577: LD_INT 1
24579: ST_TO_ADDR
// if p3 = 20 then
24580: LD_VAR 0 3
24584: PUSH
24585: LD_INT 20
24587: EQUAL
24588: IFFALSE 24598
// sRemote := true ;
24590: LD_ADDR_EXP 96
24594: PUSH
24595: LD_INT 1
24597: ST_TO_ADDR
// if p3 = 21 then
24598: LD_VAR 0 3
24602: PUSH
24603: LD_INT 21
24605: EQUAL
24606: IFFALSE 24616
// sPowell := true ;
24608: LD_ADDR_EXP 97
24612: PUSH
24613: LD_INT 1
24615: ST_TO_ADDR
// if p3 = 22 then
24616: LD_VAR 0 3
24620: PUSH
24621: LD_INT 22
24623: EQUAL
24624: IFFALSE 24634
// sTeleport := true ;
24626: LD_ADDR_EXP 100
24630: PUSH
24631: LD_INT 1
24633: ST_TO_ADDR
// if p3 = 23 then
24634: LD_VAR 0 3
24638: PUSH
24639: LD_INT 23
24641: EQUAL
24642: IFFALSE 24652
// sOilTower := true ;
24644: LD_ADDR_EXP 102
24648: PUSH
24649: LD_INT 1
24651: ST_TO_ADDR
// if p3 = 24 then
24652: LD_VAR 0 3
24656: PUSH
24657: LD_INT 24
24659: EQUAL
24660: IFFALSE 24670
// sShovel := true ;
24662: LD_ADDR_EXP 103
24666: PUSH
24667: LD_INT 1
24669: ST_TO_ADDR
// if p3 = 25 then
24670: LD_VAR 0 3
24674: PUSH
24675: LD_INT 25
24677: EQUAL
24678: IFFALSE 24688
// sSheik := true ;
24680: LD_ADDR_EXP 104
24684: PUSH
24685: LD_INT 1
24687: ST_TO_ADDR
// if p3 = 26 then
24688: LD_VAR 0 3
24692: PUSH
24693: LD_INT 26
24695: EQUAL
24696: IFFALSE 24706
// sEarthquake := true ;
24698: LD_ADDR_EXP 106
24702: PUSH
24703: LD_INT 1
24705: ST_TO_ADDR
// if p3 = 27 then
24706: LD_VAR 0 3
24710: PUSH
24711: LD_INT 27
24713: EQUAL
24714: IFFALSE 24724
// sAI := true ;
24716: LD_ADDR_EXP 107
24720: PUSH
24721: LD_INT 1
24723: ST_TO_ADDR
// if p3 = 28 then
24724: LD_VAR 0 3
24728: PUSH
24729: LD_INT 28
24731: EQUAL
24732: IFFALSE 24742
// sCargo := true ;
24734: LD_ADDR_EXP 110
24738: PUSH
24739: LD_INT 1
24741: ST_TO_ADDR
// if p3 = 29 then
24742: LD_VAR 0 3
24746: PUSH
24747: LD_INT 29
24749: EQUAL
24750: IFFALSE 24760
// sDLaser := true ;
24752: LD_ADDR_EXP 111
24756: PUSH
24757: LD_INT 1
24759: ST_TO_ADDR
// if p3 = 30 then
24760: LD_VAR 0 3
24764: PUSH
24765: LD_INT 30
24767: EQUAL
24768: IFFALSE 24778
// sExchange := true ;
24770: LD_ADDR_EXP 112
24774: PUSH
24775: LD_INT 1
24777: ST_TO_ADDR
// if p3 = 31 then
24778: LD_VAR 0 3
24782: PUSH
24783: LD_INT 31
24785: EQUAL
24786: IFFALSE 24796
// sFac := true ;
24788: LD_ADDR_EXP 113
24792: PUSH
24793: LD_INT 1
24795: ST_TO_ADDR
// if p3 = 32 then
24796: LD_VAR 0 3
24800: PUSH
24801: LD_INT 32
24803: EQUAL
24804: IFFALSE 24814
// sPower := true ;
24806: LD_ADDR_EXP 114
24810: PUSH
24811: LD_INT 1
24813: ST_TO_ADDR
// if p3 = 33 then
24814: LD_VAR 0 3
24818: PUSH
24819: LD_INT 33
24821: EQUAL
24822: IFFALSE 24832
// sRandom := true ;
24824: LD_ADDR_EXP 115
24828: PUSH
24829: LD_INT 1
24831: ST_TO_ADDR
// if p3 = 34 then
24832: LD_VAR 0 3
24836: PUSH
24837: LD_INT 34
24839: EQUAL
24840: IFFALSE 24850
// sShield := true ;
24842: LD_ADDR_EXP 116
24846: PUSH
24847: LD_INT 1
24849: ST_TO_ADDR
// if p3 = 35 then
24850: LD_VAR 0 3
24854: PUSH
24855: LD_INT 35
24857: EQUAL
24858: IFFALSE 24868
// sTime := true ;
24860: LD_ADDR_EXP 117
24864: PUSH
24865: LD_INT 1
24867: ST_TO_ADDR
// if p3 = 36 then
24868: LD_VAR 0 3
24872: PUSH
24873: LD_INT 36
24875: EQUAL
24876: IFFALSE 24886
// sTools := true ;
24878: LD_ADDR_EXP 118
24882: PUSH
24883: LD_INT 1
24885: ST_TO_ADDR
// if p3 = 101 then
24886: LD_VAR 0 3
24890: PUSH
24891: LD_INT 101
24893: EQUAL
24894: IFFALSE 24904
// sSold := true ;
24896: LD_ADDR_EXP 83
24900: PUSH
24901: LD_INT 1
24903: ST_TO_ADDR
// if p3 = 102 then
24904: LD_VAR 0 3
24908: PUSH
24909: LD_INT 102
24911: EQUAL
24912: IFFALSE 24922
// sDiff := true ;
24914: LD_ADDR_EXP 84
24918: PUSH
24919: LD_INT 1
24921: ST_TO_ADDR
// if p3 = 103 then
24922: LD_VAR 0 3
24926: PUSH
24927: LD_INT 103
24929: EQUAL
24930: IFFALSE 24940
// sFog := true ;
24932: LD_ADDR_EXP 87
24936: PUSH
24937: LD_INT 1
24939: ST_TO_ADDR
// if p3 = 104 then
24940: LD_VAR 0 3
24944: PUSH
24945: LD_INT 104
24947: EQUAL
24948: IFFALSE 24958
// sReset := true ;
24950: LD_ADDR_EXP 88
24954: PUSH
24955: LD_INT 1
24957: ST_TO_ADDR
// if p3 = 105 then
24958: LD_VAR 0 3
24962: PUSH
24963: LD_INT 105
24965: EQUAL
24966: IFFALSE 24976
// sSun := true ;
24968: LD_ADDR_EXP 89
24972: PUSH
24973: LD_INT 1
24975: ST_TO_ADDR
// if p3 = 106 then
24976: LD_VAR 0 3
24980: PUSH
24981: LD_INT 106
24983: EQUAL
24984: IFFALSE 24994
// sTiger := true ;
24986: LD_ADDR_EXP 85
24990: PUSH
24991: LD_INT 1
24993: ST_TO_ADDR
// if p3 = 107 then
24994: LD_VAR 0 3
24998: PUSH
24999: LD_INT 107
25001: EQUAL
25002: IFFALSE 25012
// sBomb := true ;
25004: LD_ADDR_EXP 86
25008: PUSH
25009: LD_INT 1
25011: ST_TO_ADDR
// if p3 = 108 then
25012: LD_VAR 0 3
25016: PUSH
25017: LD_INT 108
25019: EQUAL
25020: IFFALSE 25030
// sWound := true ;
25022: LD_ADDR_EXP 94
25026: PUSH
25027: LD_INT 1
25029: ST_TO_ADDR
// if p3 = 109 then
25030: LD_VAR 0 3
25034: PUSH
25035: LD_INT 109
25037: EQUAL
25038: IFFALSE 25048
// sBetray := true ;
25040: LD_ADDR_EXP 98
25044: PUSH
25045: LD_INT 1
25047: ST_TO_ADDR
// if p3 = 110 then
25048: LD_VAR 0 3
25052: PUSH
25053: LD_INT 110
25055: EQUAL
25056: IFFALSE 25066
// sContamin := true ;
25058: LD_ADDR_EXP 99
25062: PUSH
25063: LD_INT 1
25065: ST_TO_ADDR
// if p3 = 111 then
25066: LD_VAR 0 3
25070: PUSH
25071: LD_INT 111
25073: EQUAL
25074: IFFALSE 25084
// sOil := true ;
25076: LD_ADDR_EXP 101
25080: PUSH
25081: LD_INT 1
25083: ST_TO_ADDR
// if p3 = 112 then
25084: LD_VAR 0 3
25088: PUSH
25089: LD_INT 112
25091: EQUAL
25092: IFFALSE 25102
// sStu := true ;
25094: LD_ADDR_EXP 105
25098: PUSH
25099: LD_INT 1
25101: ST_TO_ADDR
// if p3 = 113 then
25102: LD_VAR 0 3
25106: PUSH
25107: LD_INT 113
25109: EQUAL
25110: IFFALSE 25120
// sBazooka := true ;
25112: LD_ADDR_EXP 108
25116: PUSH
25117: LD_INT 1
25119: ST_TO_ADDR
// if p3 = 114 then
25120: LD_VAR 0 3
25124: PUSH
25125: LD_INT 114
25127: EQUAL
25128: IFFALSE 25138
// sMortar := true ;
25130: LD_ADDR_EXP 109
25134: PUSH
25135: LD_INT 1
25137: ST_TO_ADDR
// if p3 = 115 then
25138: LD_VAR 0 3
25142: PUSH
25143: LD_INT 115
25145: EQUAL
25146: IFFALSE 25156
// sRanger := true ;
25148: LD_ADDR_EXP 119
25152: PUSH
25153: LD_INT 1
25155: ST_TO_ADDR
// if p3 = 116 then
25156: LD_VAR 0 3
25160: PUSH
25161: LD_INT 116
25163: EQUAL
25164: IFFALSE 25174
// sComputer := true ;
25166: LD_ADDR_EXP 120
25170: PUSH
25171: LD_INT 1
25173: ST_TO_ADDR
// if p3 = 117 then
25174: LD_VAR 0 3
25178: PUSH
25179: LD_INT 117
25181: EQUAL
25182: IFFALSE 25192
// s30 := true ;
25184: LD_ADDR_EXP 121
25188: PUSH
25189: LD_INT 1
25191: ST_TO_ADDR
// if p3 = 118 then
25192: LD_VAR 0 3
25196: PUSH
25197: LD_INT 118
25199: EQUAL
25200: IFFALSE 25210
// s60 := true ;
25202: LD_ADDR_EXP 122
25206: PUSH
25207: LD_INT 1
25209: ST_TO_ADDR
// end ; if p2 = hack_mode then
25210: LD_VAR 0 2
25214: PUSH
25215: LD_INT 101
25217: EQUAL
25218: IFFALSE 25346
// begin case p3 of 1 :
25220: LD_VAR 0 3
25224: PUSH
25225: LD_INT 1
25227: DOUBLE
25228: EQUAL
25229: IFTRUE 25233
25231: GO 25240
25233: POP
// hHackUnlimitedResources ; 2 :
25234: CALL 37485 0 0
25238: GO 25346
25240: LD_INT 2
25242: DOUBLE
25243: EQUAL
25244: IFTRUE 25248
25246: GO 25255
25248: POP
// hHackSetLevel10 ; 3 :
25249: CALL 37618 0 0
25253: GO 25346
25255: LD_INT 3
25257: DOUBLE
25258: EQUAL
25259: IFTRUE 25263
25261: GO 25270
25263: POP
// hHackSetLevel10YourUnits ; 4 :
25264: CALL 37703 0 0
25268: GO 25346
25270: LD_INT 4
25272: DOUBLE
25273: EQUAL
25274: IFTRUE 25278
25276: GO 25285
25278: POP
// hHackInvincible ; 5 :
25279: CALL 38151 0 0
25283: GO 25346
25285: LD_INT 5
25287: DOUBLE
25288: EQUAL
25289: IFTRUE 25293
25291: GO 25300
25293: POP
// hHackInvisible ; 6 :
25294: CALL 38262 0 0
25298: GO 25346
25300: LD_INT 6
25302: DOUBLE
25303: EQUAL
25304: IFTRUE 25308
25306: GO 25315
25308: POP
// hHackChangeYourSide ; 7 :
25309: CALL 38319 0 0
25313: GO 25346
25315: LD_INT 7
25317: DOUBLE
25318: EQUAL
25319: IFTRUE 25323
25321: GO 25330
25323: POP
// hHackChangeUnitSide ; 8 :
25324: CALL 38361 0 0
25328: GO 25346
25330: LD_INT 8
25332: DOUBLE
25333: EQUAL
25334: IFTRUE 25338
25336: GO 25345
25338: POP
// hHackFog ; end ;
25339: CALL 38462 0 0
25343: GO 25346
25345: POP
// end ; if p2 = game_save_mode then
25346: LD_VAR 0 2
25350: PUSH
25351: LD_INT 102
25353: EQUAL
25354: IFFALSE 25409
// begin if p3 = 1 then
25356: LD_VAR 0 3
25360: PUSH
25361: LD_INT 1
25363: EQUAL
25364: IFFALSE 25376
// globalGameSaveCounter := p4 ;
25366: LD_ADDR_EXP 65
25370: PUSH
25371: LD_VAR 0 4
25375: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
25376: LD_VAR 0 3
25380: PUSH
25381: LD_INT 2
25383: EQUAL
25384: PUSH
25385: LD_EXP 65
25389: AND
25390: IFFALSE 25409
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
25392: LD_STRING setGameSaveCounter(
25394: PUSH
25395: LD_EXP 65
25399: STR
25400: PUSH
25401: LD_STRING )
25403: STR
25404: PPUSH
25405: CALL_OW 559
// end ; end ;
25409: LD_VAR 0 7
25413: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
25414: LD_INT 0
25416: PPUSH
// streamModeActive := false ;
25417: LD_ADDR_EXP 66
25421: PUSH
25422: LD_INT 0
25424: ST_TO_ADDR
// normalCounter := 36 ;
25425: LD_ADDR_EXP 67
25429: PUSH
25430: LD_INT 36
25432: ST_TO_ADDR
// hardcoreCounter := 18 ;
25433: LD_ADDR_EXP 68
25437: PUSH
25438: LD_INT 18
25440: ST_TO_ADDR
// sRocket := false ;
25441: LD_ADDR_EXP 71
25445: PUSH
25446: LD_INT 0
25448: ST_TO_ADDR
// sSpeed := false ;
25449: LD_ADDR_EXP 70
25453: PUSH
25454: LD_INT 0
25456: ST_TO_ADDR
// sEngine := false ;
25457: LD_ADDR_EXP 72
25461: PUSH
25462: LD_INT 0
25464: ST_TO_ADDR
// sSpec := false ;
25465: LD_ADDR_EXP 69
25469: PUSH
25470: LD_INT 0
25472: ST_TO_ADDR
// sLevel := false ;
25473: LD_ADDR_EXP 73
25477: PUSH
25478: LD_INT 0
25480: ST_TO_ADDR
// sArmoury := false ;
25481: LD_ADDR_EXP 74
25485: PUSH
25486: LD_INT 0
25488: ST_TO_ADDR
// sRadar := false ;
25489: LD_ADDR_EXP 75
25493: PUSH
25494: LD_INT 0
25496: ST_TO_ADDR
// sBunker := false ;
25497: LD_ADDR_EXP 76
25501: PUSH
25502: LD_INT 0
25504: ST_TO_ADDR
// sHack := false ;
25505: LD_ADDR_EXP 77
25509: PUSH
25510: LD_INT 0
25512: ST_TO_ADDR
// sFire := false ;
25513: LD_ADDR_EXP 78
25517: PUSH
25518: LD_INT 0
25520: ST_TO_ADDR
// sRefresh := false ;
25521: LD_ADDR_EXP 79
25525: PUSH
25526: LD_INT 0
25528: ST_TO_ADDR
// sExp := false ;
25529: LD_ADDR_EXP 80
25533: PUSH
25534: LD_INT 0
25536: ST_TO_ADDR
// sDepot := false ;
25537: LD_ADDR_EXP 81
25541: PUSH
25542: LD_INT 0
25544: ST_TO_ADDR
// sFlag := false ;
25545: LD_ADDR_EXP 82
25549: PUSH
25550: LD_INT 0
25552: ST_TO_ADDR
// sKamikadze := false ;
25553: LD_ADDR_EXP 90
25557: PUSH
25558: LD_INT 0
25560: ST_TO_ADDR
// sTroll := false ;
25561: LD_ADDR_EXP 91
25565: PUSH
25566: LD_INT 0
25568: ST_TO_ADDR
// sSlow := false ;
25569: LD_ADDR_EXP 92
25573: PUSH
25574: LD_INT 0
25576: ST_TO_ADDR
// sLack := false ;
25577: LD_ADDR_EXP 93
25581: PUSH
25582: LD_INT 0
25584: ST_TO_ADDR
// sTank := false ;
25585: LD_ADDR_EXP 95
25589: PUSH
25590: LD_INT 0
25592: ST_TO_ADDR
// sRemote := false ;
25593: LD_ADDR_EXP 96
25597: PUSH
25598: LD_INT 0
25600: ST_TO_ADDR
// sPowell := false ;
25601: LD_ADDR_EXP 97
25605: PUSH
25606: LD_INT 0
25608: ST_TO_ADDR
// sTeleport := false ;
25609: LD_ADDR_EXP 100
25613: PUSH
25614: LD_INT 0
25616: ST_TO_ADDR
// sOilTower := false ;
25617: LD_ADDR_EXP 102
25621: PUSH
25622: LD_INT 0
25624: ST_TO_ADDR
// sShovel := false ;
25625: LD_ADDR_EXP 103
25629: PUSH
25630: LD_INT 0
25632: ST_TO_ADDR
// sSheik := false ;
25633: LD_ADDR_EXP 104
25637: PUSH
25638: LD_INT 0
25640: ST_TO_ADDR
// sEarthquake := false ;
25641: LD_ADDR_EXP 106
25645: PUSH
25646: LD_INT 0
25648: ST_TO_ADDR
// sAI := false ;
25649: LD_ADDR_EXP 107
25653: PUSH
25654: LD_INT 0
25656: ST_TO_ADDR
// sCargo := false ;
25657: LD_ADDR_EXP 110
25661: PUSH
25662: LD_INT 0
25664: ST_TO_ADDR
// sDLaser := false ;
25665: LD_ADDR_EXP 111
25669: PUSH
25670: LD_INT 0
25672: ST_TO_ADDR
// sExchange := false ;
25673: LD_ADDR_EXP 112
25677: PUSH
25678: LD_INT 0
25680: ST_TO_ADDR
// sFac := false ;
25681: LD_ADDR_EXP 113
25685: PUSH
25686: LD_INT 0
25688: ST_TO_ADDR
// sPower := false ;
25689: LD_ADDR_EXP 114
25693: PUSH
25694: LD_INT 0
25696: ST_TO_ADDR
// sRandom := false ;
25697: LD_ADDR_EXP 115
25701: PUSH
25702: LD_INT 0
25704: ST_TO_ADDR
// sShield := false ;
25705: LD_ADDR_EXP 116
25709: PUSH
25710: LD_INT 0
25712: ST_TO_ADDR
// sTime := false ;
25713: LD_ADDR_EXP 117
25717: PUSH
25718: LD_INT 0
25720: ST_TO_ADDR
// sTools := false ;
25721: LD_ADDR_EXP 118
25725: PUSH
25726: LD_INT 0
25728: ST_TO_ADDR
// sSold := false ;
25729: LD_ADDR_EXP 83
25733: PUSH
25734: LD_INT 0
25736: ST_TO_ADDR
// sDiff := false ;
25737: LD_ADDR_EXP 84
25741: PUSH
25742: LD_INT 0
25744: ST_TO_ADDR
// sFog := false ;
25745: LD_ADDR_EXP 87
25749: PUSH
25750: LD_INT 0
25752: ST_TO_ADDR
// sReset := false ;
25753: LD_ADDR_EXP 88
25757: PUSH
25758: LD_INT 0
25760: ST_TO_ADDR
// sSun := false ;
25761: LD_ADDR_EXP 89
25765: PUSH
25766: LD_INT 0
25768: ST_TO_ADDR
// sTiger := false ;
25769: LD_ADDR_EXP 85
25773: PUSH
25774: LD_INT 0
25776: ST_TO_ADDR
// sBomb := false ;
25777: LD_ADDR_EXP 86
25781: PUSH
25782: LD_INT 0
25784: ST_TO_ADDR
// sWound := false ;
25785: LD_ADDR_EXP 94
25789: PUSH
25790: LD_INT 0
25792: ST_TO_ADDR
// sBetray := false ;
25793: LD_ADDR_EXP 98
25797: PUSH
25798: LD_INT 0
25800: ST_TO_ADDR
// sContamin := false ;
25801: LD_ADDR_EXP 99
25805: PUSH
25806: LD_INT 0
25808: ST_TO_ADDR
// sOil := false ;
25809: LD_ADDR_EXP 101
25813: PUSH
25814: LD_INT 0
25816: ST_TO_ADDR
// sStu := false ;
25817: LD_ADDR_EXP 105
25821: PUSH
25822: LD_INT 0
25824: ST_TO_ADDR
// sBazooka := false ;
25825: LD_ADDR_EXP 108
25829: PUSH
25830: LD_INT 0
25832: ST_TO_ADDR
// sMortar := false ;
25833: LD_ADDR_EXP 109
25837: PUSH
25838: LD_INT 0
25840: ST_TO_ADDR
// sRanger := false ;
25841: LD_ADDR_EXP 119
25845: PUSH
25846: LD_INT 0
25848: ST_TO_ADDR
// sComputer := false ;
25849: LD_ADDR_EXP 120
25853: PUSH
25854: LD_INT 0
25856: ST_TO_ADDR
// s30 := false ;
25857: LD_ADDR_EXP 121
25861: PUSH
25862: LD_INT 0
25864: ST_TO_ADDR
// s60 := false ;
25865: LD_ADDR_EXP 122
25869: PUSH
25870: LD_INT 0
25872: ST_TO_ADDR
// end ;
25873: LD_VAR 0 1
25877: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
25878: LD_INT 0
25880: PPUSH
25881: PPUSH
25882: PPUSH
25883: PPUSH
25884: PPUSH
25885: PPUSH
25886: PPUSH
// result := [ ] ;
25887: LD_ADDR_VAR 0 2
25891: PUSH
25892: EMPTY
25893: ST_TO_ADDR
// if campaign_id = 1 then
25894: LD_OWVAR 69
25898: PUSH
25899: LD_INT 1
25901: EQUAL
25902: IFFALSE 29068
// begin case mission_number of 1 :
25904: LD_OWVAR 70
25908: PUSH
25909: LD_INT 1
25911: DOUBLE
25912: EQUAL
25913: IFTRUE 25917
25915: GO 25993
25917: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
25918: LD_ADDR_VAR 0 2
25922: PUSH
25923: LD_INT 2
25925: PUSH
25926: LD_INT 4
25928: PUSH
25929: LD_INT 11
25931: PUSH
25932: LD_INT 12
25934: PUSH
25935: LD_INT 15
25937: PUSH
25938: LD_INT 16
25940: PUSH
25941: LD_INT 22
25943: PUSH
25944: LD_INT 23
25946: PUSH
25947: LD_INT 26
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 101
25963: PUSH
25964: LD_INT 102
25966: PUSH
25967: LD_INT 106
25969: PUSH
25970: LD_INT 116
25972: PUSH
25973: LD_INT 117
25975: PUSH
25976: LD_INT 118
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: ST_TO_ADDR
25991: GO 29066
25993: LD_INT 2
25995: DOUBLE
25996: EQUAL
25997: IFTRUE 26001
25999: GO 26085
26001: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
26002: LD_ADDR_VAR 0 2
26006: PUSH
26007: LD_INT 2
26009: PUSH
26010: LD_INT 4
26012: PUSH
26013: LD_INT 11
26015: PUSH
26016: LD_INT 12
26018: PUSH
26019: LD_INT 15
26021: PUSH
26022: LD_INT 16
26024: PUSH
26025: LD_INT 22
26027: PUSH
26028: LD_INT 23
26030: PUSH
26031: LD_INT 26
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 101
26047: PUSH
26048: LD_INT 102
26050: PUSH
26051: LD_INT 105
26053: PUSH
26054: LD_INT 106
26056: PUSH
26057: LD_INT 108
26059: PUSH
26060: LD_INT 116
26062: PUSH
26063: LD_INT 117
26065: PUSH
26066: LD_INT 118
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: ST_TO_ADDR
26083: GO 29066
26085: LD_INT 3
26087: DOUBLE
26088: EQUAL
26089: IFTRUE 26093
26091: GO 26181
26093: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
26094: LD_ADDR_VAR 0 2
26098: PUSH
26099: LD_INT 2
26101: PUSH
26102: LD_INT 4
26104: PUSH
26105: LD_INT 5
26107: PUSH
26108: LD_INT 11
26110: PUSH
26111: LD_INT 12
26113: PUSH
26114: LD_INT 15
26116: PUSH
26117: LD_INT 16
26119: PUSH
26120: LD_INT 22
26122: PUSH
26123: LD_INT 26
26125: PUSH
26126: LD_INT 36
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 101
26143: PUSH
26144: LD_INT 102
26146: PUSH
26147: LD_INT 105
26149: PUSH
26150: LD_INT 106
26152: PUSH
26153: LD_INT 108
26155: PUSH
26156: LD_INT 116
26158: PUSH
26159: LD_INT 117
26161: PUSH
26162: LD_INT 118
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: ST_TO_ADDR
26179: GO 29066
26181: LD_INT 4
26183: DOUBLE
26184: EQUAL
26185: IFTRUE 26189
26187: GO 26285
26189: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
26190: LD_ADDR_VAR 0 2
26194: PUSH
26195: LD_INT 2
26197: PUSH
26198: LD_INT 4
26200: PUSH
26201: LD_INT 5
26203: PUSH
26204: LD_INT 8
26206: PUSH
26207: LD_INT 11
26209: PUSH
26210: LD_INT 12
26212: PUSH
26213: LD_INT 15
26215: PUSH
26216: LD_INT 16
26218: PUSH
26219: LD_INT 22
26221: PUSH
26222: LD_INT 23
26224: PUSH
26225: LD_INT 26
26227: PUSH
26228: LD_INT 36
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 101
26247: PUSH
26248: LD_INT 102
26250: PUSH
26251: LD_INT 105
26253: PUSH
26254: LD_INT 106
26256: PUSH
26257: LD_INT 108
26259: PUSH
26260: LD_INT 116
26262: PUSH
26263: LD_INT 117
26265: PUSH
26266: LD_INT 118
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: ST_TO_ADDR
26283: GO 29066
26285: LD_INT 5
26287: DOUBLE
26288: EQUAL
26289: IFTRUE 26293
26291: GO 26405
26293: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
26294: LD_ADDR_VAR 0 2
26298: PUSH
26299: LD_INT 2
26301: PUSH
26302: LD_INT 4
26304: PUSH
26305: LD_INT 5
26307: PUSH
26308: LD_INT 6
26310: PUSH
26311: LD_INT 8
26313: PUSH
26314: LD_INT 11
26316: PUSH
26317: LD_INT 12
26319: PUSH
26320: LD_INT 15
26322: PUSH
26323: LD_INT 16
26325: PUSH
26326: LD_INT 22
26328: PUSH
26329: LD_INT 23
26331: PUSH
26332: LD_INT 25
26334: PUSH
26335: LD_INT 26
26337: PUSH
26338: LD_INT 36
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: PUSH
26357: LD_INT 101
26359: PUSH
26360: LD_INT 102
26362: PUSH
26363: LD_INT 105
26365: PUSH
26366: LD_INT 106
26368: PUSH
26369: LD_INT 108
26371: PUSH
26372: LD_INT 109
26374: PUSH
26375: LD_INT 112
26377: PUSH
26378: LD_INT 116
26380: PUSH
26381: LD_INT 117
26383: PUSH
26384: LD_INT 118
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: ST_TO_ADDR
26403: GO 29066
26405: LD_INT 6
26407: DOUBLE
26408: EQUAL
26409: IFTRUE 26413
26411: GO 26545
26413: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
26414: LD_ADDR_VAR 0 2
26418: PUSH
26419: LD_INT 2
26421: PUSH
26422: LD_INT 4
26424: PUSH
26425: LD_INT 5
26427: PUSH
26428: LD_INT 6
26430: PUSH
26431: LD_INT 8
26433: PUSH
26434: LD_INT 11
26436: PUSH
26437: LD_INT 12
26439: PUSH
26440: LD_INT 15
26442: PUSH
26443: LD_INT 16
26445: PUSH
26446: LD_INT 20
26448: PUSH
26449: LD_INT 21
26451: PUSH
26452: LD_INT 22
26454: PUSH
26455: LD_INT 23
26457: PUSH
26458: LD_INT 25
26460: PUSH
26461: LD_INT 26
26463: PUSH
26464: LD_INT 30
26466: PUSH
26467: LD_INT 31
26469: PUSH
26470: LD_INT 32
26472: PUSH
26473: LD_INT 36
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 101
26499: PUSH
26500: LD_INT 102
26502: PUSH
26503: LD_INT 105
26505: PUSH
26506: LD_INT 106
26508: PUSH
26509: LD_INT 108
26511: PUSH
26512: LD_INT 109
26514: PUSH
26515: LD_INT 112
26517: PUSH
26518: LD_INT 116
26520: PUSH
26521: LD_INT 117
26523: PUSH
26524: LD_INT 118
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: ST_TO_ADDR
26543: GO 29066
26545: LD_INT 7
26547: DOUBLE
26548: EQUAL
26549: IFTRUE 26553
26551: GO 26665
26553: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
26554: LD_ADDR_VAR 0 2
26558: PUSH
26559: LD_INT 2
26561: PUSH
26562: LD_INT 4
26564: PUSH
26565: LD_INT 5
26567: PUSH
26568: LD_INT 7
26570: PUSH
26571: LD_INT 11
26573: PUSH
26574: LD_INT 12
26576: PUSH
26577: LD_INT 15
26579: PUSH
26580: LD_INT 16
26582: PUSH
26583: LD_INT 20
26585: PUSH
26586: LD_INT 21
26588: PUSH
26589: LD_INT 22
26591: PUSH
26592: LD_INT 23
26594: PUSH
26595: LD_INT 25
26597: PUSH
26598: LD_INT 26
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: PUSH
26617: LD_INT 101
26619: PUSH
26620: LD_INT 102
26622: PUSH
26623: LD_INT 103
26625: PUSH
26626: LD_INT 105
26628: PUSH
26629: LD_INT 106
26631: PUSH
26632: LD_INT 108
26634: PUSH
26635: LD_INT 112
26637: PUSH
26638: LD_INT 116
26640: PUSH
26641: LD_INT 117
26643: PUSH
26644: LD_INT 118
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: ST_TO_ADDR
26663: GO 29066
26665: LD_INT 8
26667: DOUBLE
26668: EQUAL
26669: IFTRUE 26673
26671: GO 26813
26673: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
26674: LD_ADDR_VAR 0 2
26678: PUSH
26679: LD_INT 2
26681: PUSH
26682: LD_INT 4
26684: PUSH
26685: LD_INT 5
26687: PUSH
26688: LD_INT 6
26690: PUSH
26691: LD_INT 7
26693: PUSH
26694: LD_INT 8
26696: PUSH
26697: LD_INT 11
26699: PUSH
26700: LD_INT 12
26702: PUSH
26703: LD_INT 15
26705: PUSH
26706: LD_INT 16
26708: PUSH
26709: LD_INT 20
26711: PUSH
26712: LD_INT 21
26714: PUSH
26715: LD_INT 22
26717: PUSH
26718: LD_INT 23
26720: PUSH
26721: LD_INT 25
26723: PUSH
26724: LD_INT 26
26726: PUSH
26727: LD_INT 30
26729: PUSH
26730: LD_INT 31
26732: PUSH
26733: LD_INT 32
26735: PUSH
26736: LD_INT 36
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 101
26763: PUSH
26764: LD_INT 102
26766: PUSH
26767: LD_INT 103
26769: PUSH
26770: LD_INT 105
26772: PUSH
26773: LD_INT 106
26775: PUSH
26776: LD_INT 108
26778: PUSH
26779: LD_INT 109
26781: PUSH
26782: LD_INT 112
26784: PUSH
26785: LD_INT 116
26787: PUSH
26788: LD_INT 117
26790: PUSH
26791: LD_INT 118
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: ST_TO_ADDR
26811: GO 29066
26813: LD_INT 9
26815: DOUBLE
26816: EQUAL
26817: IFTRUE 26821
26819: GO 26969
26821: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
26822: LD_ADDR_VAR 0 2
26826: PUSH
26827: LD_INT 2
26829: PUSH
26830: LD_INT 4
26832: PUSH
26833: LD_INT 5
26835: PUSH
26836: LD_INT 6
26838: PUSH
26839: LD_INT 7
26841: PUSH
26842: LD_INT 8
26844: PUSH
26845: LD_INT 11
26847: PUSH
26848: LD_INT 12
26850: PUSH
26851: LD_INT 15
26853: PUSH
26854: LD_INT 16
26856: PUSH
26857: LD_INT 20
26859: PUSH
26860: LD_INT 21
26862: PUSH
26863: LD_INT 22
26865: PUSH
26866: LD_INT 23
26868: PUSH
26869: LD_INT 25
26871: PUSH
26872: LD_INT 26
26874: PUSH
26875: LD_INT 28
26877: PUSH
26878: LD_INT 30
26880: PUSH
26881: LD_INT 31
26883: PUSH
26884: LD_INT 32
26886: PUSH
26887: LD_INT 36
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 101
26915: PUSH
26916: LD_INT 102
26918: PUSH
26919: LD_INT 103
26921: PUSH
26922: LD_INT 105
26924: PUSH
26925: LD_INT 106
26927: PUSH
26928: LD_INT 108
26930: PUSH
26931: LD_INT 109
26933: PUSH
26934: LD_INT 112
26936: PUSH
26937: LD_INT 114
26939: PUSH
26940: LD_INT 116
26942: PUSH
26943: LD_INT 117
26945: PUSH
26946: LD_INT 118
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: ST_TO_ADDR
26967: GO 29066
26969: LD_INT 10
26971: DOUBLE
26972: EQUAL
26973: IFTRUE 26977
26975: GO 27173
26977: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
26978: LD_ADDR_VAR 0 2
26982: PUSH
26983: LD_INT 2
26985: PUSH
26986: LD_INT 4
26988: PUSH
26989: LD_INT 5
26991: PUSH
26992: LD_INT 6
26994: PUSH
26995: LD_INT 7
26997: PUSH
26998: LD_INT 8
27000: PUSH
27001: LD_INT 9
27003: PUSH
27004: LD_INT 10
27006: PUSH
27007: LD_INT 11
27009: PUSH
27010: LD_INT 12
27012: PUSH
27013: LD_INT 13
27015: PUSH
27016: LD_INT 14
27018: PUSH
27019: LD_INT 15
27021: PUSH
27022: LD_INT 16
27024: PUSH
27025: LD_INT 17
27027: PUSH
27028: LD_INT 18
27030: PUSH
27031: LD_INT 19
27033: PUSH
27034: LD_INT 20
27036: PUSH
27037: LD_INT 21
27039: PUSH
27040: LD_INT 22
27042: PUSH
27043: LD_INT 23
27045: PUSH
27046: LD_INT 24
27048: PUSH
27049: LD_INT 25
27051: PUSH
27052: LD_INT 26
27054: PUSH
27055: LD_INT 28
27057: PUSH
27058: LD_INT 30
27060: PUSH
27061: LD_INT 31
27063: PUSH
27064: LD_INT 32
27066: PUSH
27067: LD_INT 36
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 101
27103: PUSH
27104: LD_INT 102
27106: PUSH
27107: LD_INT 103
27109: PUSH
27110: LD_INT 104
27112: PUSH
27113: LD_INT 105
27115: PUSH
27116: LD_INT 106
27118: PUSH
27119: LD_INT 107
27121: PUSH
27122: LD_INT 108
27124: PUSH
27125: LD_INT 109
27127: PUSH
27128: LD_INT 110
27130: PUSH
27131: LD_INT 111
27133: PUSH
27134: LD_INT 112
27136: PUSH
27137: LD_INT 114
27139: PUSH
27140: LD_INT 116
27142: PUSH
27143: LD_INT 117
27145: PUSH
27146: LD_INT 118
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: ST_TO_ADDR
27171: GO 29066
27173: LD_INT 11
27175: DOUBLE
27176: EQUAL
27177: IFTRUE 27181
27179: GO 27385
27181: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
27182: LD_ADDR_VAR 0 2
27186: PUSH
27187: LD_INT 2
27189: PUSH
27190: LD_INT 3
27192: PUSH
27193: LD_INT 4
27195: PUSH
27196: LD_INT 5
27198: PUSH
27199: LD_INT 6
27201: PUSH
27202: LD_INT 7
27204: PUSH
27205: LD_INT 8
27207: PUSH
27208: LD_INT 9
27210: PUSH
27211: LD_INT 10
27213: PUSH
27214: LD_INT 11
27216: PUSH
27217: LD_INT 12
27219: PUSH
27220: LD_INT 13
27222: PUSH
27223: LD_INT 14
27225: PUSH
27226: LD_INT 15
27228: PUSH
27229: LD_INT 16
27231: PUSH
27232: LD_INT 17
27234: PUSH
27235: LD_INT 18
27237: PUSH
27238: LD_INT 19
27240: PUSH
27241: LD_INT 20
27243: PUSH
27244: LD_INT 21
27246: PUSH
27247: LD_INT 22
27249: PUSH
27250: LD_INT 23
27252: PUSH
27253: LD_INT 24
27255: PUSH
27256: LD_INT 25
27258: PUSH
27259: LD_INT 26
27261: PUSH
27262: LD_INT 28
27264: PUSH
27265: LD_INT 30
27267: PUSH
27268: LD_INT 31
27270: PUSH
27271: LD_INT 32
27273: PUSH
27274: LD_INT 34
27276: PUSH
27277: LD_INT 36
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 101
27315: PUSH
27316: LD_INT 102
27318: PUSH
27319: LD_INT 103
27321: PUSH
27322: LD_INT 104
27324: PUSH
27325: LD_INT 105
27327: PUSH
27328: LD_INT 106
27330: PUSH
27331: LD_INT 107
27333: PUSH
27334: LD_INT 108
27336: PUSH
27337: LD_INT 109
27339: PUSH
27340: LD_INT 110
27342: PUSH
27343: LD_INT 111
27345: PUSH
27346: LD_INT 112
27348: PUSH
27349: LD_INT 114
27351: PUSH
27352: LD_INT 116
27354: PUSH
27355: LD_INT 117
27357: PUSH
27358: LD_INT 118
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: ST_TO_ADDR
27383: GO 29066
27385: LD_INT 12
27387: DOUBLE
27388: EQUAL
27389: IFTRUE 27393
27391: GO 27613
27393: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
27394: LD_ADDR_VAR 0 2
27398: PUSH
27399: LD_INT 1
27401: PUSH
27402: LD_INT 2
27404: PUSH
27405: LD_INT 3
27407: PUSH
27408: LD_INT 4
27410: PUSH
27411: LD_INT 5
27413: PUSH
27414: LD_INT 6
27416: PUSH
27417: LD_INT 7
27419: PUSH
27420: LD_INT 8
27422: PUSH
27423: LD_INT 9
27425: PUSH
27426: LD_INT 10
27428: PUSH
27429: LD_INT 11
27431: PUSH
27432: LD_INT 12
27434: PUSH
27435: LD_INT 13
27437: PUSH
27438: LD_INT 14
27440: PUSH
27441: LD_INT 15
27443: PUSH
27444: LD_INT 16
27446: PUSH
27447: LD_INT 17
27449: PUSH
27450: LD_INT 18
27452: PUSH
27453: LD_INT 19
27455: PUSH
27456: LD_INT 20
27458: PUSH
27459: LD_INT 21
27461: PUSH
27462: LD_INT 22
27464: PUSH
27465: LD_INT 23
27467: PUSH
27468: LD_INT 24
27470: PUSH
27471: LD_INT 25
27473: PUSH
27474: LD_INT 26
27476: PUSH
27477: LD_INT 27
27479: PUSH
27480: LD_INT 28
27482: PUSH
27483: LD_INT 30
27485: PUSH
27486: LD_INT 31
27488: PUSH
27489: LD_INT 32
27491: PUSH
27492: LD_INT 33
27494: PUSH
27495: LD_INT 34
27497: PUSH
27498: LD_INT 36
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 101
27539: PUSH
27540: LD_INT 102
27542: PUSH
27543: LD_INT 103
27545: PUSH
27546: LD_INT 104
27548: PUSH
27549: LD_INT 105
27551: PUSH
27552: LD_INT 106
27554: PUSH
27555: LD_INT 107
27557: PUSH
27558: LD_INT 108
27560: PUSH
27561: LD_INT 109
27563: PUSH
27564: LD_INT 110
27566: PUSH
27567: LD_INT 111
27569: PUSH
27570: LD_INT 112
27572: PUSH
27573: LD_INT 113
27575: PUSH
27576: LD_INT 114
27578: PUSH
27579: LD_INT 116
27581: PUSH
27582: LD_INT 117
27584: PUSH
27585: LD_INT 118
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: ST_TO_ADDR
27611: GO 29066
27613: LD_INT 13
27615: DOUBLE
27616: EQUAL
27617: IFTRUE 27621
27619: GO 27829
27621: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
27622: LD_ADDR_VAR 0 2
27626: PUSH
27627: LD_INT 1
27629: PUSH
27630: LD_INT 2
27632: PUSH
27633: LD_INT 3
27635: PUSH
27636: LD_INT 4
27638: PUSH
27639: LD_INT 5
27641: PUSH
27642: LD_INT 8
27644: PUSH
27645: LD_INT 9
27647: PUSH
27648: LD_INT 10
27650: PUSH
27651: LD_INT 11
27653: PUSH
27654: LD_INT 12
27656: PUSH
27657: LD_INT 14
27659: PUSH
27660: LD_INT 15
27662: PUSH
27663: LD_INT 16
27665: PUSH
27666: LD_INT 17
27668: PUSH
27669: LD_INT 18
27671: PUSH
27672: LD_INT 19
27674: PUSH
27675: LD_INT 20
27677: PUSH
27678: LD_INT 21
27680: PUSH
27681: LD_INT 22
27683: PUSH
27684: LD_INT 23
27686: PUSH
27687: LD_INT 24
27689: PUSH
27690: LD_INT 25
27692: PUSH
27693: LD_INT 26
27695: PUSH
27696: LD_INT 27
27698: PUSH
27699: LD_INT 28
27701: PUSH
27702: LD_INT 30
27704: PUSH
27705: LD_INT 31
27707: PUSH
27708: LD_INT 32
27710: PUSH
27711: LD_INT 33
27713: PUSH
27714: LD_INT 34
27716: PUSH
27717: LD_INT 36
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 101
27755: PUSH
27756: LD_INT 102
27758: PUSH
27759: LD_INT 103
27761: PUSH
27762: LD_INT 104
27764: PUSH
27765: LD_INT 105
27767: PUSH
27768: LD_INT 106
27770: PUSH
27771: LD_INT 107
27773: PUSH
27774: LD_INT 108
27776: PUSH
27777: LD_INT 109
27779: PUSH
27780: LD_INT 110
27782: PUSH
27783: LD_INT 111
27785: PUSH
27786: LD_INT 112
27788: PUSH
27789: LD_INT 113
27791: PUSH
27792: LD_INT 114
27794: PUSH
27795: LD_INT 116
27797: PUSH
27798: LD_INT 117
27800: PUSH
27801: LD_INT 118
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: ST_TO_ADDR
27827: GO 29066
27829: LD_INT 14
27831: DOUBLE
27832: EQUAL
27833: IFTRUE 27837
27835: GO 28061
27837: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
27838: LD_ADDR_VAR 0 2
27842: PUSH
27843: LD_INT 1
27845: PUSH
27846: LD_INT 2
27848: PUSH
27849: LD_INT 3
27851: PUSH
27852: LD_INT 4
27854: PUSH
27855: LD_INT 5
27857: PUSH
27858: LD_INT 6
27860: PUSH
27861: LD_INT 7
27863: PUSH
27864: LD_INT 8
27866: PUSH
27867: LD_INT 9
27869: PUSH
27870: LD_INT 10
27872: PUSH
27873: LD_INT 11
27875: PUSH
27876: LD_INT 12
27878: PUSH
27879: LD_INT 13
27881: PUSH
27882: LD_INT 14
27884: PUSH
27885: LD_INT 15
27887: PUSH
27888: LD_INT 16
27890: PUSH
27891: LD_INT 17
27893: PUSH
27894: LD_INT 18
27896: PUSH
27897: LD_INT 19
27899: PUSH
27900: LD_INT 20
27902: PUSH
27903: LD_INT 21
27905: PUSH
27906: LD_INT 22
27908: PUSH
27909: LD_INT 23
27911: PUSH
27912: LD_INT 24
27914: PUSH
27915: LD_INT 25
27917: PUSH
27918: LD_INT 26
27920: PUSH
27921: LD_INT 27
27923: PUSH
27924: LD_INT 28
27926: PUSH
27927: LD_INT 29
27929: PUSH
27930: LD_INT 30
27932: PUSH
27933: LD_INT 31
27935: PUSH
27936: LD_INT 32
27938: PUSH
27939: LD_INT 33
27941: PUSH
27942: LD_INT 34
27944: PUSH
27945: LD_INT 36
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 101
27987: PUSH
27988: LD_INT 102
27990: PUSH
27991: LD_INT 103
27993: PUSH
27994: LD_INT 104
27996: PUSH
27997: LD_INT 105
27999: PUSH
28000: LD_INT 106
28002: PUSH
28003: LD_INT 107
28005: PUSH
28006: LD_INT 108
28008: PUSH
28009: LD_INT 109
28011: PUSH
28012: LD_INT 110
28014: PUSH
28015: LD_INT 111
28017: PUSH
28018: LD_INT 112
28020: PUSH
28021: LD_INT 113
28023: PUSH
28024: LD_INT 114
28026: PUSH
28027: LD_INT 116
28029: PUSH
28030: LD_INT 117
28032: PUSH
28033: LD_INT 118
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: ST_TO_ADDR
28059: GO 29066
28061: LD_INT 15
28063: DOUBLE
28064: EQUAL
28065: IFTRUE 28069
28067: GO 28293
28069: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
28070: LD_ADDR_VAR 0 2
28074: PUSH
28075: LD_INT 1
28077: PUSH
28078: LD_INT 2
28080: PUSH
28081: LD_INT 3
28083: PUSH
28084: LD_INT 4
28086: PUSH
28087: LD_INT 5
28089: PUSH
28090: LD_INT 6
28092: PUSH
28093: LD_INT 7
28095: PUSH
28096: LD_INT 8
28098: PUSH
28099: LD_INT 9
28101: PUSH
28102: LD_INT 10
28104: PUSH
28105: LD_INT 11
28107: PUSH
28108: LD_INT 12
28110: PUSH
28111: LD_INT 13
28113: PUSH
28114: LD_INT 14
28116: PUSH
28117: LD_INT 15
28119: PUSH
28120: LD_INT 16
28122: PUSH
28123: LD_INT 17
28125: PUSH
28126: LD_INT 18
28128: PUSH
28129: LD_INT 19
28131: PUSH
28132: LD_INT 20
28134: PUSH
28135: LD_INT 21
28137: PUSH
28138: LD_INT 22
28140: PUSH
28141: LD_INT 23
28143: PUSH
28144: LD_INT 24
28146: PUSH
28147: LD_INT 25
28149: PUSH
28150: LD_INT 26
28152: PUSH
28153: LD_INT 27
28155: PUSH
28156: LD_INT 28
28158: PUSH
28159: LD_INT 29
28161: PUSH
28162: LD_INT 30
28164: PUSH
28165: LD_INT 31
28167: PUSH
28168: LD_INT 32
28170: PUSH
28171: LD_INT 33
28173: PUSH
28174: LD_INT 34
28176: PUSH
28177: LD_INT 36
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 101
28219: PUSH
28220: LD_INT 102
28222: PUSH
28223: LD_INT 103
28225: PUSH
28226: LD_INT 104
28228: PUSH
28229: LD_INT 105
28231: PUSH
28232: LD_INT 106
28234: PUSH
28235: LD_INT 107
28237: PUSH
28238: LD_INT 108
28240: PUSH
28241: LD_INT 109
28243: PUSH
28244: LD_INT 110
28246: PUSH
28247: LD_INT 111
28249: PUSH
28250: LD_INT 112
28252: PUSH
28253: LD_INT 113
28255: PUSH
28256: LD_INT 114
28258: PUSH
28259: LD_INT 116
28261: PUSH
28262: LD_INT 117
28264: PUSH
28265: LD_INT 118
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: ST_TO_ADDR
28291: GO 29066
28293: LD_INT 16
28295: DOUBLE
28296: EQUAL
28297: IFTRUE 28301
28299: GO 28437
28301: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
28302: LD_ADDR_VAR 0 2
28306: PUSH
28307: LD_INT 2
28309: PUSH
28310: LD_INT 4
28312: PUSH
28313: LD_INT 5
28315: PUSH
28316: LD_INT 7
28318: PUSH
28319: LD_INT 11
28321: PUSH
28322: LD_INT 12
28324: PUSH
28325: LD_INT 15
28327: PUSH
28328: LD_INT 16
28330: PUSH
28331: LD_INT 20
28333: PUSH
28334: LD_INT 21
28336: PUSH
28337: LD_INT 22
28339: PUSH
28340: LD_INT 23
28342: PUSH
28343: LD_INT 25
28345: PUSH
28346: LD_INT 26
28348: PUSH
28349: LD_INT 30
28351: PUSH
28352: LD_INT 31
28354: PUSH
28355: LD_INT 32
28357: PUSH
28358: LD_INT 33
28360: PUSH
28361: LD_INT 34
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 101
28387: PUSH
28388: LD_INT 102
28390: PUSH
28391: LD_INT 103
28393: PUSH
28394: LD_INT 106
28396: PUSH
28397: LD_INT 108
28399: PUSH
28400: LD_INT 112
28402: PUSH
28403: LD_INT 113
28405: PUSH
28406: LD_INT 114
28408: PUSH
28409: LD_INT 116
28411: PUSH
28412: LD_INT 117
28414: PUSH
28415: LD_INT 118
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: ST_TO_ADDR
28435: GO 29066
28437: LD_INT 17
28439: DOUBLE
28440: EQUAL
28441: IFTRUE 28445
28443: GO 28669
28445: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
28446: LD_ADDR_VAR 0 2
28450: PUSH
28451: LD_INT 1
28453: PUSH
28454: LD_INT 2
28456: PUSH
28457: LD_INT 3
28459: PUSH
28460: LD_INT 4
28462: PUSH
28463: LD_INT 5
28465: PUSH
28466: LD_INT 6
28468: PUSH
28469: LD_INT 7
28471: PUSH
28472: LD_INT 8
28474: PUSH
28475: LD_INT 9
28477: PUSH
28478: LD_INT 10
28480: PUSH
28481: LD_INT 11
28483: PUSH
28484: LD_INT 12
28486: PUSH
28487: LD_INT 13
28489: PUSH
28490: LD_INT 14
28492: PUSH
28493: LD_INT 15
28495: PUSH
28496: LD_INT 16
28498: PUSH
28499: LD_INT 17
28501: PUSH
28502: LD_INT 18
28504: PUSH
28505: LD_INT 19
28507: PUSH
28508: LD_INT 20
28510: PUSH
28511: LD_INT 21
28513: PUSH
28514: LD_INT 22
28516: PUSH
28517: LD_INT 23
28519: PUSH
28520: LD_INT 24
28522: PUSH
28523: LD_INT 25
28525: PUSH
28526: LD_INT 26
28528: PUSH
28529: LD_INT 27
28531: PUSH
28532: LD_INT 28
28534: PUSH
28535: LD_INT 29
28537: PUSH
28538: LD_INT 30
28540: PUSH
28541: LD_INT 31
28543: PUSH
28544: LD_INT 32
28546: PUSH
28547: LD_INT 33
28549: PUSH
28550: LD_INT 34
28552: PUSH
28553: LD_INT 36
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 101
28595: PUSH
28596: LD_INT 102
28598: PUSH
28599: LD_INT 103
28601: PUSH
28602: LD_INT 104
28604: PUSH
28605: LD_INT 105
28607: PUSH
28608: LD_INT 106
28610: PUSH
28611: LD_INT 107
28613: PUSH
28614: LD_INT 108
28616: PUSH
28617: LD_INT 109
28619: PUSH
28620: LD_INT 110
28622: PUSH
28623: LD_INT 111
28625: PUSH
28626: LD_INT 112
28628: PUSH
28629: LD_INT 113
28631: PUSH
28632: LD_INT 114
28634: PUSH
28635: LD_INT 116
28637: PUSH
28638: LD_INT 117
28640: PUSH
28641: LD_INT 118
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: ST_TO_ADDR
28667: GO 29066
28669: LD_INT 18
28671: DOUBLE
28672: EQUAL
28673: IFTRUE 28677
28675: GO 28825
28677: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
28678: LD_ADDR_VAR 0 2
28682: PUSH
28683: LD_INT 2
28685: PUSH
28686: LD_INT 4
28688: PUSH
28689: LD_INT 5
28691: PUSH
28692: LD_INT 7
28694: PUSH
28695: LD_INT 11
28697: PUSH
28698: LD_INT 12
28700: PUSH
28701: LD_INT 15
28703: PUSH
28704: LD_INT 16
28706: PUSH
28707: LD_INT 20
28709: PUSH
28710: LD_INT 21
28712: PUSH
28713: LD_INT 22
28715: PUSH
28716: LD_INT 23
28718: PUSH
28719: LD_INT 25
28721: PUSH
28722: LD_INT 26
28724: PUSH
28725: LD_INT 30
28727: PUSH
28728: LD_INT 31
28730: PUSH
28731: LD_INT 32
28733: PUSH
28734: LD_INT 33
28736: PUSH
28737: LD_INT 34
28739: PUSH
28740: LD_INT 35
28742: PUSH
28743: LD_INT 36
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 101
28771: PUSH
28772: LD_INT 102
28774: PUSH
28775: LD_INT 103
28777: PUSH
28778: LD_INT 106
28780: PUSH
28781: LD_INT 108
28783: PUSH
28784: LD_INT 112
28786: PUSH
28787: LD_INT 113
28789: PUSH
28790: LD_INT 114
28792: PUSH
28793: LD_INT 115
28795: PUSH
28796: LD_INT 116
28798: PUSH
28799: LD_INT 117
28801: PUSH
28802: LD_INT 118
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: ST_TO_ADDR
28823: GO 29066
28825: LD_INT 19
28827: DOUBLE
28828: EQUAL
28829: IFTRUE 28833
28831: GO 29065
28833: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
28834: LD_ADDR_VAR 0 2
28838: PUSH
28839: LD_INT 1
28841: PUSH
28842: LD_INT 2
28844: PUSH
28845: LD_INT 3
28847: PUSH
28848: LD_INT 4
28850: PUSH
28851: LD_INT 5
28853: PUSH
28854: LD_INT 6
28856: PUSH
28857: LD_INT 7
28859: PUSH
28860: LD_INT 8
28862: PUSH
28863: LD_INT 9
28865: PUSH
28866: LD_INT 10
28868: PUSH
28869: LD_INT 11
28871: PUSH
28872: LD_INT 12
28874: PUSH
28875: LD_INT 13
28877: PUSH
28878: LD_INT 14
28880: PUSH
28881: LD_INT 15
28883: PUSH
28884: LD_INT 16
28886: PUSH
28887: LD_INT 17
28889: PUSH
28890: LD_INT 18
28892: PUSH
28893: LD_INT 19
28895: PUSH
28896: LD_INT 20
28898: PUSH
28899: LD_INT 21
28901: PUSH
28902: LD_INT 22
28904: PUSH
28905: LD_INT 23
28907: PUSH
28908: LD_INT 24
28910: PUSH
28911: LD_INT 25
28913: PUSH
28914: LD_INT 26
28916: PUSH
28917: LD_INT 27
28919: PUSH
28920: LD_INT 28
28922: PUSH
28923: LD_INT 29
28925: PUSH
28926: LD_INT 30
28928: PUSH
28929: LD_INT 31
28931: PUSH
28932: LD_INT 32
28934: PUSH
28935: LD_INT 33
28937: PUSH
28938: LD_INT 34
28940: PUSH
28941: LD_INT 35
28943: PUSH
28944: LD_INT 36
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 101
28987: PUSH
28988: LD_INT 102
28990: PUSH
28991: LD_INT 103
28993: PUSH
28994: LD_INT 104
28996: PUSH
28997: LD_INT 105
28999: PUSH
29000: LD_INT 106
29002: PUSH
29003: LD_INT 107
29005: PUSH
29006: LD_INT 108
29008: PUSH
29009: LD_INT 109
29011: PUSH
29012: LD_INT 110
29014: PUSH
29015: LD_INT 111
29017: PUSH
29018: LD_INT 112
29020: PUSH
29021: LD_INT 113
29023: PUSH
29024: LD_INT 114
29026: PUSH
29027: LD_INT 115
29029: PUSH
29030: LD_INT 116
29032: PUSH
29033: LD_INT 117
29035: PUSH
29036: LD_INT 118
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: ST_TO_ADDR
29063: GO 29066
29065: POP
// end else
29066: GO 29297
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
29068: LD_ADDR_VAR 0 2
29072: PUSH
29073: LD_INT 1
29075: PUSH
29076: LD_INT 2
29078: PUSH
29079: LD_INT 3
29081: PUSH
29082: LD_INT 4
29084: PUSH
29085: LD_INT 5
29087: PUSH
29088: LD_INT 6
29090: PUSH
29091: LD_INT 7
29093: PUSH
29094: LD_INT 8
29096: PUSH
29097: LD_INT 9
29099: PUSH
29100: LD_INT 10
29102: PUSH
29103: LD_INT 11
29105: PUSH
29106: LD_INT 12
29108: PUSH
29109: LD_INT 13
29111: PUSH
29112: LD_INT 14
29114: PUSH
29115: LD_INT 15
29117: PUSH
29118: LD_INT 16
29120: PUSH
29121: LD_INT 17
29123: PUSH
29124: LD_INT 18
29126: PUSH
29127: LD_INT 19
29129: PUSH
29130: LD_INT 20
29132: PUSH
29133: LD_INT 21
29135: PUSH
29136: LD_INT 22
29138: PUSH
29139: LD_INT 23
29141: PUSH
29142: LD_INT 24
29144: PUSH
29145: LD_INT 25
29147: PUSH
29148: LD_INT 26
29150: PUSH
29151: LD_INT 27
29153: PUSH
29154: LD_INT 28
29156: PUSH
29157: LD_INT 29
29159: PUSH
29160: LD_INT 30
29162: PUSH
29163: LD_INT 31
29165: PUSH
29166: LD_INT 32
29168: PUSH
29169: LD_INT 33
29171: PUSH
29172: LD_INT 34
29174: PUSH
29175: LD_INT 35
29177: PUSH
29178: LD_INT 36
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 101
29221: PUSH
29222: LD_INT 102
29224: PUSH
29225: LD_INT 103
29227: PUSH
29228: LD_INT 104
29230: PUSH
29231: LD_INT 105
29233: PUSH
29234: LD_INT 106
29236: PUSH
29237: LD_INT 107
29239: PUSH
29240: LD_INT 108
29242: PUSH
29243: LD_INT 109
29245: PUSH
29246: LD_INT 110
29248: PUSH
29249: LD_INT 111
29251: PUSH
29252: LD_INT 112
29254: PUSH
29255: LD_INT 113
29257: PUSH
29258: LD_INT 114
29260: PUSH
29261: LD_INT 115
29263: PUSH
29264: LD_INT 116
29266: PUSH
29267: LD_INT 117
29269: PUSH
29270: LD_INT 118
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: ST_TO_ADDR
// if result then
29297: LD_VAR 0 2
29301: IFFALSE 30087
// begin normal :=  ;
29303: LD_ADDR_VAR 0 5
29307: PUSH
29308: LD_STRING 
29310: ST_TO_ADDR
// hardcore :=  ;
29311: LD_ADDR_VAR 0 6
29315: PUSH
29316: LD_STRING 
29318: ST_TO_ADDR
// active :=  ;
29319: LD_ADDR_VAR 0 7
29323: PUSH
29324: LD_STRING 
29326: ST_TO_ADDR
// for i = 1 to normalCounter do
29327: LD_ADDR_VAR 0 8
29331: PUSH
29332: DOUBLE
29333: LD_INT 1
29335: DEC
29336: ST_TO_ADDR
29337: LD_EXP 67
29341: PUSH
29342: FOR_TO
29343: IFFALSE 29444
// begin tmp := 0 ;
29345: LD_ADDR_VAR 0 3
29349: PUSH
29350: LD_STRING 0
29352: ST_TO_ADDR
// if result [ 1 ] then
29353: LD_VAR 0 2
29357: PUSH
29358: LD_INT 1
29360: ARRAY
29361: IFFALSE 29426
// if result [ 1 ] [ 1 ] = i then
29363: LD_VAR 0 2
29367: PUSH
29368: LD_INT 1
29370: ARRAY
29371: PUSH
29372: LD_INT 1
29374: ARRAY
29375: PUSH
29376: LD_VAR 0 8
29380: EQUAL
29381: IFFALSE 29426
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
29383: LD_ADDR_VAR 0 2
29387: PUSH
29388: LD_VAR 0 2
29392: PPUSH
29393: LD_INT 1
29395: PPUSH
29396: LD_VAR 0 2
29400: PUSH
29401: LD_INT 1
29403: ARRAY
29404: PPUSH
29405: LD_INT 1
29407: PPUSH
29408: CALL_OW 3
29412: PPUSH
29413: CALL_OW 1
29417: ST_TO_ADDR
// tmp := 1 ;
29418: LD_ADDR_VAR 0 3
29422: PUSH
29423: LD_STRING 1
29425: ST_TO_ADDR
// end ; normal := normal & tmp ;
29426: LD_ADDR_VAR 0 5
29430: PUSH
29431: LD_VAR 0 5
29435: PUSH
29436: LD_VAR 0 3
29440: STR
29441: ST_TO_ADDR
// end ;
29442: GO 29342
29444: POP
29445: POP
// for i = 1 to hardcoreCounter do
29446: LD_ADDR_VAR 0 8
29450: PUSH
29451: DOUBLE
29452: LD_INT 1
29454: DEC
29455: ST_TO_ADDR
29456: LD_EXP 68
29460: PUSH
29461: FOR_TO
29462: IFFALSE 29567
// begin tmp := 0 ;
29464: LD_ADDR_VAR 0 3
29468: PUSH
29469: LD_STRING 0
29471: ST_TO_ADDR
// if result [ 2 ] then
29472: LD_VAR 0 2
29476: PUSH
29477: LD_INT 2
29479: ARRAY
29480: IFFALSE 29549
// if result [ 2 ] [ 1 ] = 100 + i then
29482: LD_VAR 0 2
29486: PUSH
29487: LD_INT 2
29489: ARRAY
29490: PUSH
29491: LD_INT 1
29493: ARRAY
29494: PUSH
29495: LD_INT 100
29497: PUSH
29498: LD_VAR 0 8
29502: PLUS
29503: EQUAL
29504: IFFALSE 29549
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
29506: LD_ADDR_VAR 0 2
29510: PUSH
29511: LD_VAR 0 2
29515: PPUSH
29516: LD_INT 2
29518: PPUSH
29519: LD_VAR 0 2
29523: PUSH
29524: LD_INT 2
29526: ARRAY
29527: PPUSH
29528: LD_INT 1
29530: PPUSH
29531: CALL_OW 3
29535: PPUSH
29536: CALL_OW 1
29540: ST_TO_ADDR
// tmp := 1 ;
29541: LD_ADDR_VAR 0 3
29545: PUSH
29546: LD_STRING 1
29548: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
29549: LD_ADDR_VAR 0 6
29553: PUSH
29554: LD_VAR 0 6
29558: PUSH
29559: LD_VAR 0 3
29563: STR
29564: ST_TO_ADDR
// end ;
29565: GO 29461
29567: POP
29568: POP
// if isGameLoad then
29569: LD_VAR 0 1
29573: IFFALSE 30048
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
29575: LD_ADDR_VAR 0 4
29579: PUSH
29580: LD_EXP 71
29584: PUSH
29585: LD_EXP 70
29589: PUSH
29590: LD_EXP 72
29594: PUSH
29595: LD_EXP 69
29599: PUSH
29600: LD_EXP 73
29604: PUSH
29605: LD_EXP 74
29609: PUSH
29610: LD_EXP 75
29614: PUSH
29615: LD_EXP 76
29619: PUSH
29620: LD_EXP 77
29624: PUSH
29625: LD_EXP 78
29629: PUSH
29630: LD_EXP 79
29634: PUSH
29635: LD_EXP 80
29639: PUSH
29640: LD_EXP 81
29644: PUSH
29645: LD_EXP 82
29649: PUSH
29650: LD_EXP 90
29654: PUSH
29655: LD_EXP 91
29659: PUSH
29660: LD_EXP 92
29664: PUSH
29665: LD_EXP 93
29669: PUSH
29670: LD_EXP 95
29674: PUSH
29675: LD_EXP 96
29679: PUSH
29680: LD_EXP 97
29684: PUSH
29685: LD_EXP 100
29689: PUSH
29690: LD_EXP 102
29694: PUSH
29695: LD_EXP 103
29699: PUSH
29700: LD_EXP 104
29704: PUSH
29705: LD_EXP 106
29709: PUSH
29710: LD_EXP 107
29714: PUSH
29715: LD_EXP 110
29719: PUSH
29720: LD_EXP 111
29724: PUSH
29725: LD_EXP 112
29729: PUSH
29730: LD_EXP 113
29734: PUSH
29735: LD_EXP 114
29739: PUSH
29740: LD_EXP 115
29744: PUSH
29745: LD_EXP 116
29749: PUSH
29750: LD_EXP 117
29754: PUSH
29755: LD_EXP 118
29759: PUSH
29760: LD_EXP 83
29764: PUSH
29765: LD_EXP 84
29769: PUSH
29770: LD_EXP 87
29774: PUSH
29775: LD_EXP 88
29779: PUSH
29780: LD_EXP 89
29784: PUSH
29785: LD_EXP 85
29789: PUSH
29790: LD_EXP 86
29794: PUSH
29795: LD_EXP 94
29799: PUSH
29800: LD_EXP 98
29804: PUSH
29805: LD_EXP 99
29809: PUSH
29810: LD_EXP 101
29814: PUSH
29815: LD_EXP 105
29819: PUSH
29820: LD_EXP 108
29824: PUSH
29825: LD_EXP 109
29829: PUSH
29830: LD_EXP 119
29834: PUSH
29835: LD_EXP 120
29839: PUSH
29840: LD_EXP 121
29844: PUSH
29845: LD_EXP 122
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: ST_TO_ADDR
// tmp :=  ;
29906: LD_ADDR_VAR 0 3
29910: PUSH
29911: LD_STRING 
29913: ST_TO_ADDR
// for i = 1 to normalCounter do
29914: LD_ADDR_VAR 0 8
29918: PUSH
29919: DOUBLE
29920: LD_INT 1
29922: DEC
29923: ST_TO_ADDR
29924: LD_EXP 67
29928: PUSH
29929: FOR_TO
29930: IFFALSE 29966
// begin if flags [ i ] then
29932: LD_VAR 0 4
29936: PUSH
29937: LD_VAR 0 8
29941: ARRAY
29942: IFFALSE 29964
// tmp := tmp & i & ; ;
29944: LD_ADDR_VAR 0 3
29948: PUSH
29949: LD_VAR 0 3
29953: PUSH
29954: LD_VAR 0 8
29958: STR
29959: PUSH
29960: LD_STRING ;
29962: STR
29963: ST_TO_ADDR
// end ;
29964: GO 29929
29966: POP
29967: POP
// for i = 1 to hardcoreCounter do
29968: LD_ADDR_VAR 0 8
29972: PUSH
29973: DOUBLE
29974: LD_INT 1
29976: DEC
29977: ST_TO_ADDR
29978: LD_EXP 68
29982: PUSH
29983: FOR_TO
29984: IFFALSE 30030
// begin if flags [ normalCounter + i ] then
29986: LD_VAR 0 4
29990: PUSH
29991: LD_EXP 67
29995: PUSH
29996: LD_VAR 0 8
30000: PLUS
30001: ARRAY
30002: IFFALSE 30028
// tmp := tmp & ( 100 + i ) & ; ;
30004: LD_ADDR_VAR 0 3
30008: PUSH
30009: LD_VAR 0 3
30013: PUSH
30014: LD_INT 100
30016: PUSH
30017: LD_VAR 0 8
30021: PLUS
30022: STR
30023: PUSH
30024: LD_STRING ;
30026: STR
30027: ST_TO_ADDR
// end ;
30028: GO 29983
30030: POP
30031: POP
// if tmp then
30032: LD_VAR 0 3
30036: IFFALSE 30048
// active := tmp ;
30038: LD_ADDR_VAR 0 7
30042: PUSH
30043: LD_VAR 0 3
30047: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
30048: LD_STRING getStreamItemsFromMission("
30050: PUSH
30051: LD_VAR 0 5
30055: STR
30056: PUSH
30057: LD_STRING ","
30059: STR
30060: PUSH
30061: LD_VAR 0 6
30065: STR
30066: PUSH
30067: LD_STRING ","
30069: STR
30070: PUSH
30071: LD_VAR 0 7
30075: STR
30076: PUSH
30077: LD_STRING ")
30079: STR
30080: PPUSH
30081: CALL_OW 559
// end else
30085: GO 30094
// ToLua ( getStreamItemsFromMission("","","") ) ;
30087: LD_STRING getStreamItemsFromMission("","","")
30089: PPUSH
30090: CALL_OW 559
// end ;
30094: LD_VAR 0 2
30098: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
30099: LD_EXP 66
30103: PUSH
30104: LD_EXP 71
30108: AND
30109: IFFALSE 30233
30111: GO 30113
30113: DISABLE
30114: LD_INT 0
30116: PPUSH
30117: PPUSH
// begin enable ;
30118: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
30119: LD_ADDR_VAR 0 2
30123: PUSH
30124: LD_INT 22
30126: PUSH
30127: LD_OWVAR 2
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 2
30138: PUSH
30139: LD_INT 34
30141: PUSH
30142: LD_INT 7
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 34
30151: PUSH
30152: LD_INT 45
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 34
30161: PUSH
30162: LD_INT 28
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 34
30171: PUSH
30172: LD_INT 47
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PPUSH
30190: CALL_OW 69
30194: ST_TO_ADDR
// if not tmp then
30195: LD_VAR 0 2
30199: NOT
30200: IFFALSE 30204
// exit ;
30202: GO 30233
// for i in tmp do
30204: LD_ADDR_VAR 0 1
30208: PUSH
30209: LD_VAR 0 2
30213: PUSH
30214: FOR_IN
30215: IFFALSE 30231
// begin SetLives ( i , 0 ) ;
30217: LD_VAR 0 1
30221: PPUSH
30222: LD_INT 0
30224: PPUSH
30225: CALL_OW 234
// end ;
30229: GO 30214
30231: POP
30232: POP
// end ;
30233: PPOPN 2
30235: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
30236: LD_EXP 66
30240: PUSH
30241: LD_EXP 72
30245: AND
30246: IFFALSE 30330
30248: GO 30250
30250: DISABLE
30251: LD_INT 0
30253: PPUSH
30254: PPUSH
// begin enable ;
30255: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
30256: LD_ADDR_VAR 0 2
30260: PUSH
30261: LD_INT 22
30263: PUSH
30264: LD_OWVAR 2
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 32
30275: PUSH
30276: LD_INT 3
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PPUSH
30287: CALL_OW 69
30291: ST_TO_ADDR
// if not tmp then
30292: LD_VAR 0 2
30296: NOT
30297: IFFALSE 30301
// exit ;
30299: GO 30330
// for i in tmp do
30301: LD_ADDR_VAR 0 1
30305: PUSH
30306: LD_VAR 0 2
30310: PUSH
30311: FOR_IN
30312: IFFALSE 30328
// begin SetLives ( i , 0 ) ;
30314: LD_VAR 0 1
30318: PPUSH
30319: LD_INT 0
30321: PPUSH
30322: CALL_OW 234
// end ;
30326: GO 30311
30328: POP
30329: POP
// end ;
30330: PPOPN 2
30332: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
30333: LD_EXP 66
30337: PUSH
30338: LD_EXP 69
30342: AND
30343: IFFALSE 30436
30345: GO 30347
30347: DISABLE
30348: LD_INT 0
30350: PPUSH
// begin enable ;
30351: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
30352: LD_ADDR_VAR 0 1
30356: PUSH
30357: LD_INT 22
30359: PUSH
30360: LD_OWVAR 2
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 2
30371: PUSH
30372: LD_INT 25
30374: PUSH
30375: LD_INT 5
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 25
30384: PUSH
30385: LD_INT 9
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 25
30394: PUSH
30395: LD_INT 8
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PPUSH
30412: CALL_OW 69
30416: PUSH
30417: FOR_IN
30418: IFFALSE 30434
// begin SetClass ( i , 1 ) ;
30420: LD_VAR 0 1
30424: PPUSH
30425: LD_INT 1
30427: PPUSH
30428: CALL_OW 336
// end ;
30432: GO 30417
30434: POP
30435: POP
// end ;
30436: PPOPN 1
30438: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
30439: LD_EXP 66
30443: PUSH
30444: LD_EXP 70
30448: AND
30449: PUSH
30450: LD_OWVAR 65
30454: PUSH
30455: LD_INT 7
30457: LESS
30458: AND
30459: IFFALSE 30473
30461: GO 30463
30463: DISABLE
// begin enable ;
30464: ENABLE
// game_speed := 7 ;
30465: LD_ADDR_OWVAR 65
30469: PUSH
30470: LD_INT 7
30472: ST_TO_ADDR
// end ;
30473: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
30474: LD_EXP 66
30478: PUSH
30479: LD_EXP 73
30483: AND
30484: IFFALSE 30686
30486: GO 30488
30488: DISABLE
30489: LD_INT 0
30491: PPUSH
30492: PPUSH
30493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30494: LD_ADDR_VAR 0 3
30498: PUSH
30499: LD_INT 81
30501: PUSH
30502: LD_OWVAR 2
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 21
30513: PUSH
30514: LD_INT 1
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PPUSH
30525: CALL_OW 69
30529: ST_TO_ADDR
// if not tmp then
30530: LD_VAR 0 3
30534: NOT
30535: IFFALSE 30539
// exit ;
30537: GO 30686
// if tmp > 5 then
30539: LD_VAR 0 3
30543: PUSH
30544: LD_INT 5
30546: GREATER
30547: IFFALSE 30559
// k := 5 else
30549: LD_ADDR_VAR 0 2
30553: PUSH
30554: LD_INT 5
30556: ST_TO_ADDR
30557: GO 30569
// k := tmp ;
30559: LD_ADDR_VAR 0 2
30563: PUSH
30564: LD_VAR 0 3
30568: ST_TO_ADDR
// for i := 1 to k do
30569: LD_ADDR_VAR 0 1
30573: PUSH
30574: DOUBLE
30575: LD_INT 1
30577: DEC
30578: ST_TO_ADDR
30579: LD_VAR 0 2
30583: PUSH
30584: FOR_TO
30585: IFFALSE 30684
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
30587: LD_VAR 0 3
30591: PUSH
30592: LD_VAR 0 1
30596: ARRAY
30597: PPUSH
30598: LD_VAR 0 1
30602: PUSH
30603: LD_INT 4
30605: MOD
30606: PUSH
30607: LD_INT 1
30609: PLUS
30610: PPUSH
30611: CALL_OW 259
30615: PUSH
30616: LD_INT 10
30618: LESS
30619: IFFALSE 30682
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
30621: LD_VAR 0 3
30625: PUSH
30626: LD_VAR 0 1
30630: ARRAY
30631: PPUSH
30632: LD_VAR 0 1
30636: PUSH
30637: LD_INT 4
30639: MOD
30640: PUSH
30641: LD_INT 1
30643: PLUS
30644: PPUSH
30645: LD_VAR 0 3
30649: PUSH
30650: LD_VAR 0 1
30654: ARRAY
30655: PPUSH
30656: LD_VAR 0 1
30660: PUSH
30661: LD_INT 4
30663: MOD
30664: PUSH
30665: LD_INT 1
30667: PLUS
30668: PPUSH
30669: CALL_OW 259
30673: PUSH
30674: LD_INT 1
30676: PLUS
30677: PPUSH
30678: CALL_OW 237
30682: GO 30584
30684: POP
30685: POP
// end ;
30686: PPOPN 3
30688: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
30689: LD_EXP 66
30693: PUSH
30694: LD_EXP 74
30698: AND
30699: IFFALSE 30719
30701: GO 30703
30703: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
30704: LD_INT 4
30706: PPUSH
30707: LD_OWVAR 2
30711: PPUSH
30712: LD_INT 0
30714: PPUSH
30715: CALL_OW 324
30719: END
// every 0 0$1 trigger StreamModeActive and sShovel do
30720: LD_EXP 66
30724: PUSH
30725: LD_EXP 103
30729: AND
30730: IFFALSE 30750
30732: GO 30734
30734: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
30735: LD_INT 19
30737: PPUSH
30738: LD_OWVAR 2
30742: PPUSH
30743: LD_INT 0
30745: PPUSH
30746: CALL_OW 324
30750: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
30751: LD_EXP 66
30755: PUSH
30756: LD_EXP 75
30760: AND
30761: IFFALSE 30863
30763: GO 30765
30765: DISABLE
30766: LD_INT 0
30768: PPUSH
30769: PPUSH
// begin enable ;
30770: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
30771: LD_ADDR_VAR 0 2
30775: PUSH
30776: LD_INT 22
30778: PUSH
30779: LD_OWVAR 2
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 2
30790: PUSH
30791: LD_INT 34
30793: PUSH
30794: LD_INT 11
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 34
30803: PUSH
30804: LD_INT 30
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: LIST
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PPUSH
30820: CALL_OW 69
30824: ST_TO_ADDR
// if not tmp then
30825: LD_VAR 0 2
30829: NOT
30830: IFFALSE 30834
// exit ;
30832: GO 30863
// for i in tmp do
30834: LD_ADDR_VAR 0 1
30838: PUSH
30839: LD_VAR 0 2
30843: PUSH
30844: FOR_IN
30845: IFFALSE 30861
// begin SetLives ( i , 0 ) ;
30847: LD_VAR 0 1
30851: PPUSH
30852: LD_INT 0
30854: PPUSH
30855: CALL_OW 234
// end ;
30859: GO 30844
30861: POP
30862: POP
// end ;
30863: PPOPN 2
30865: END
// every 0 0$1 trigger StreamModeActive and sBunker do
30866: LD_EXP 66
30870: PUSH
30871: LD_EXP 76
30875: AND
30876: IFFALSE 30896
30878: GO 30880
30880: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
30881: LD_INT 32
30883: PPUSH
30884: LD_OWVAR 2
30888: PPUSH
30889: LD_INT 0
30891: PPUSH
30892: CALL_OW 324
30896: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
30897: LD_EXP 66
30901: PUSH
30902: LD_EXP 77
30906: AND
30907: IFFALSE 31088
30909: GO 30911
30911: DISABLE
30912: LD_INT 0
30914: PPUSH
30915: PPUSH
30916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
30917: LD_ADDR_VAR 0 2
30921: PUSH
30922: LD_INT 22
30924: PUSH
30925: LD_OWVAR 2
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 33
30936: PUSH
30937: LD_INT 3
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PPUSH
30948: CALL_OW 69
30952: ST_TO_ADDR
// if not tmp then
30953: LD_VAR 0 2
30957: NOT
30958: IFFALSE 30962
// exit ;
30960: GO 31088
// side := 0 ;
30962: LD_ADDR_VAR 0 3
30966: PUSH
30967: LD_INT 0
30969: ST_TO_ADDR
// for i := 1 to 8 do
30970: LD_ADDR_VAR 0 1
30974: PUSH
30975: DOUBLE
30976: LD_INT 1
30978: DEC
30979: ST_TO_ADDR
30980: LD_INT 8
30982: PUSH
30983: FOR_TO
30984: IFFALSE 31032
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
30986: LD_OWVAR 2
30990: PUSH
30991: LD_VAR 0 1
30995: NONEQUAL
30996: PUSH
30997: LD_OWVAR 2
31001: PPUSH
31002: LD_VAR 0 1
31006: PPUSH
31007: CALL_OW 81
31011: PUSH
31012: LD_INT 2
31014: EQUAL
31015: AND
31016: IFFALSE 31030
// begin side := i ;
31018: LD_ADDR_VAR 0 3
31022: PUSH
31023: LD_VAR 0 1
31027: ST_TO_ADDR
// break ;
31028: GO 31032
// end ;
31030: GO 30983
31032: POP
31033: POP
// if not side then
31034: LD_VAR 0 3
31038: NOT
31039: IFFALSE 31043
// exit ;
31041: GO 31088
// for i := 1 to tmp do
31043: LD_ADDR_VAR 0 1
31047: PUSH
31048: DOUBLE
31049: LD_INT 1
31051: DEC
31052: ST_TO_ADDR
31053: LD_VAR 0 2
31057: PUSH
31058: FOR_TO
31059: IFFALSE 31086
// if Prob ( 60 ) then
31061: LD_INT 60
31063: PPUSH
31064: CALL_OW 13
31068: IFFALSE 31084
// SetSide ( i , side ) ;
31070: LD_VAR 0 1
31074: PPUSH
31075: LD_VAR 0 3
31079: PPUSH
31080: CALL_OW 235
31084: GO 31058
31086: POP
31087: POP
// end ;
31088: PPOPN 3
31090: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
31091: LD_EXP 66
31095: PUSH
31096: LD_EXP 79
31100: AND
31101: IFFALSE 31220
31103: GO 31105
31105: DISABLE
31106: LD_INT 0
31108: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
31109: LD_ADDR_VAR 0 1
31113: PUSH
31114: LD_INT 22
31116: PUSH
31117: LD_OWVAR 2
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 21
31128: PUSH
31129: LD_INT 1
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 3
31138: PUSH
31139: LD_INT 23
31141: PUSH
31142: LD_INT 0
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: LIST
31157: PPUSH
31158: CALL_OW 69
31162: PUSH
31163: FOR_IN
31164: IFFALSE 31218
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
31166: LD_VAR 0 1
31170: PPUSH
31171: CALL_OW 257
31175: PUSH
31176: LD_INT 1
31178: PUSH
31179: LD_INT 2
31181: PUSH
31182: LD_INT 3
31184: PUSH
31185: LD_INT 4
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: IN
31194: IFFALSE 31216
// SetClass ( un , rand ( 1 , 4 ) ) ;
31196: LD_VAR 0 1
31200: PPUSH
31201: LD_INT 1
31203: PPUSH
31204: LD_INT 4
31206: PPUSH
31207: CALL_OW 12
31211: PPUSH
31212: CALL_OW 336
31216: GO 31163
31218: POP
31219: POP
// end ;
31220: PPOPN 1
31222: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
31223: LD_EXP 66
31227: PUSH
31228: LD_EXP 78
31232: AND
31233: IFFALSE 31312
31235: GO 31237
31237: DISABLE
31238: LD_INT 0
31240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
31241: LD_ADDR_VAR 0 1
31245: PUSH
31246: LD_INT 22
31248: PUSH
31249: LD_OWVAR 2
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 21
31260: PUSH
31261: LD_INT 3
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PPUSH
31272: CALL_OW 69
31276: ST_TO_ADDR
// if not tmp then
31277: LD_VAR 0 1
31281: NOT
31282: IFFALSE 31286
// exit ;
31284: GO 31312
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
31286: LD_VAR 0 1
31290: PUSH
31291: LD_INT 1
31293: PPUSH
31294: LD_VAR 0 1
31298: PPUSH
31299: CALL_OW 12
31303: ARRAY
31304: PPUSH
31305: LD_INT 100
31307: PPUSH
31308: CALL_OW 234
// end ;
31312: PPOPN 1
31314: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
31315: LD_EXP 66
31319: PUSH
31320: LD_EXP 80
31324: AND
31325: IFFALSE 31423
31327: GO 31329
31329: DISABLE
31330: LD_INT 0
31332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31333: LD_ADDR_VAR 0 1
31337: PUSH
31338: LD_INT 22
31340: PUSH
31341: LD_OWVAR 2
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 21
31352: PUSH
31353: LD_INT 1
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PPUSH
31364: CALL_OW 69
31368: ST_TO_ADDR
// if not tmp then
31369: LD_VAR 0 1
31373: NOT
31374: IFFALSE 31378
// exit ;
31376: GO 31423
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
31378: LD_VAR 0 1
31382: PUSH
31383: LD_INT 1
31385: PPUSH
31386: LD_VAR 0 1
31390: PPUSH
31391: CALL_OW 12
31395: ARRAY
31396: PPUSH
31397: LD_INT 1
31399: PPUSH
31400: LD_INT 4
31402: PPUSH
31403: CALL_OW 12
31407: PPUSH
31408: LD_INT 3000
31410: PPUSH
31411: LD_INT 9000
31413: PPUSH
31414: CALL_OW 12
31418: PPUSH
31419: CALL_OW 492
// end ;
31423: PPOPN 1
31425: END
// every 0 0$1 trigger StreamModeActive and sDepot do
31426: LD_EXP 66
31430: PUSH
31431: LD_EXP 81
31435: AND
31436: IFFALSE 31456
31438: GO 31440
31440: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
31441: LD_INT 1
31443: PPUSH
31444: LD_OWVAR 2
31448: PPUSH
31449: LD_INT 0
31451: PPUSH
31452: CALL_OW 324
31456: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
31457: LD_EXP 66
31461: PUSH
31462: LD_EXP 82
31466: AND
31467: IFFALSE 31550
31469: GO 31471
31471: DISABLE
31472: LD_INT 0
31474: PPUSH
31475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
31476: LD_ADDR_VAR 0 2
31480: PUSH
31481: LD_INT 22
31483: PUSH
31484: LD_OWVAR 2
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 21
31495: PUSH
31496: LD_INT 3
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PPUSH
31507: CALL_OW 69
31511: ST_TO_ADDR
// if not tmp then
31512: LD_VAR 0 2
31516: NOT
31517: IFFALSE 31521
// exit ;
31519: GO 31550
// for i in tmp do
31521: LD_ADDR_VAR 0 1
31525: PUSH
31526: LD_VAR 0 2
31530: PUSH
31531: FOR_IN
31532: IFFALSE 31548
// SetBLevel ( i , 10 ) ;
31534: LD_VAR 0 1
31538: PPUSH
31539: LD_INT 10
31541: PPUSH
31542: CALL_OW 241
31546: GO 31531
31548: POP
31549: POP
// end ;
31550: PPOPN 2
31552: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
31553: LD_EXP 66
31557: PUSH
31558: LD_EXP 83
31562: AND
31563: IFFALSE 31674
31565: GO 31567
31567: DISABLE
31568: LD_INT 0
31570: PPUSH
31571: PPUSH
31572: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31573: LD_ADDR_VAR 0 3
31577: PUSH
31578: LD_INT 22
31580: PUSH
31581: LD_OWVAR 2
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 25
31592: PUSH
31593: LD_INT 1
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PPUSH
31604: CALL_OW 69
31608: ST_TO_ADDR
// if not tmp then
31609: LD_VAR 0 3
31613: NOT
31614: IFFALSE 31618
// exit ;
31616: GO 31674
// un := tmp [ rand ( 1 , tmp ) ] ;
31618: LD_ADDR_VAR 0 2
31622: PUSH
31623: LD_VAR 0 3
31627: PUSH
31628: LD_INT 1
31630: PPUSH
31631: LD_VAR 0 3
31635: PPUSH
31636: CALL_OW 12
31640: ARRAY
31641: ST_TO_ADDR
// if Crawls ( un ) then
31642: LD_VAR 0 2
31646: PPUSH
31647: CALL_OW 318
31651: IFFALSE 31662
// ComWalk ( un ) ;
31653: LD_VAR 0 2
31657: PPUSH
31658: CALL_OW 138
// SetClass ( un , class_sniper ) ;
31662: LD_VAR 0 2
31666: PPUSH
31667: LD_INT 5
31669: PPUSH
31670: CALL_OW 336
// end ;
31674: PPOPN 3
31676: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
31677: LD_EXP 66
31681: PUSH
31682: LD_EXP 84
31686: AND
31687: PUSH
31688: LD_OWVAR 67
31692: PUSH
31693: LD_INT 4
31695: LESS
31696: AND
31697: IFFALSE 31716
31699: GO 31701
31701: DISABLE
// begin Difficulty := Difficulty + 1 ;
31702: LD_ADDR_OWVAR 67
31706: PUSH
31707: LD_OWVAR 67
31711: PUSH
31712: LD_INT 1
31714: PLUS
31715: ST_TO_ADDR
// end ;
31716: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
31717: LD_EXP 66
31721: PUSH
31722: LD_EXP 85
31726: AND
31727: IFFALSE 31830
31729: GO 31731
31731: DISABLE
31732: LD_INT 0
31734: PPUSH
// begin for i := 1 to 5 do
31735: LD_ADDR_VAR 0 1
31739: PUSH
31740: DOUBLE
31741: LD_INT 1
31743: DEC
31744: ST_TO_ADDR
31745: LD_INT 5
31747: PUSH
31748: FOR_TO
31749: IFFALSE 31828
// begin uc_nation := nation_nature ;
31751: LD_ADDR_OWVAR 21
31755: PUSH
31756: LD_INT 0
31758: ST_TO_ADDR
// uc_side := 0 ;
31759: LD_ADDR_OWVAR 20
31763: PUSH
31764: LD_INT 0
31766: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
31767: LD_ADDR_OWVAR 29
31771: PUSH
31772: LD_INT 12
31774: PUSH
31775: LD_INT 12
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: ST_TO_ADDR
// hc_agressivity := 20 ;
31782: LD_ADDR_OWVAR 35
31786: PUSH
31787: LD_INT 20
31789: ST_TO_ADDR
// hc_class := class_tiger ;
31790: LD_ADDR_OWVAR 28
31794: PUSH
31795: LD_INT 14
31797: ST_TO_ADDR
// hc_gallery :=  ;
31798: LD_ADDR_OWVAR 33
31802: PUSH
31803: LD_STRING 
31805: ST_TO_ADDR
// hc_name :=  ;
31806: LD_ADDR_OWVAR 26
31810: PUSH
31811: LD_STRING 
31813: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
31814: CALL_OW 44
31818: PPUSH
31819: LD_INT 0
31821: PPUSH
31822: CALL_OW 51
// end ;
31826: GO 31748
31828: POP
31829: POP
// end ;
31830: PPOPN 1
31832: END
// every 0 0$1 trigger StreamModeActive and sBomb do
31833: LD_EXP 66
31837: PUSH
31838: LD_EXP 86
31842: AND
31843: IFFALSE 31852
31845: GO 31847
31847: DISABLE
// StreamSibBomb ;
31848: CALL 31853 0 0
31852: END
// export function StreamSibBomb ; var i , x , y ; begin
31853: LD_INT 0
31855: PPUSH
31856: PPUSH
31857: PPUSH
31858: PPUSH
// result := false ;
31859: LD_ADDR_VAR 0 1
31863: PUSH
31864: LD_INT 0
31866: ST_TO_ADDR
// for i := 1 to 16 do
31867: LD_ADDR_VAR 0 2
31871: PUSH
31872: DOUBLE
31873: LD_INT 1
31875: DEC
31876: ST_TO_ADDR
31877: LD_INT 16
31879: PUSH
31880: FOR_TO
31881: IFFALSE 32080
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31883: LD_ADDR_VAR 0 3
31887: PUSH
31888: LD_INT 10
31890: PUSH
31891: LD_INT 20
31893: PUSH
31894: LD_INT 30
31896: PUSH
31897: LD_INT 40
31899: PUSH
31900: LD_INT 50
31902: PUSH
31903: LD_INT 60
31905: PUSH
31906: LD_INT 70
31908: PUSH
31909: LD_INT 80
31911: PUSH
31912: LD_INT 90
31914: PUSH
31915: LD_INT 100
31917: PUSH
31918: LD_INT 110
31920: PUSH
31921: LD_INT 120
31923: PUSH
31924: LD_INT 130
31926: PUSH
31927: LD_INT 140
31929: PUSH
31930: LD_INT 150
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 1
31952: PPUSH
31953: LD_INT 15
31955: PPUSH
31956: CALL_OW 12
31960: ARRAY
31961: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31962: LD_ADDR_VAR 0 4
31966: PUSH
31967: LD_INT 10
31969: PUSH
31970: LD_INT 20
31972: PUSH
31973: LD_INT 30
31975: PUSH
31976: LD_INT 40
31978: PUSH
31979: LD_INT 50
31981: PUSH
31982: LD_INT 60
31984: PUSH
31985: LD_INT 70
31987: PUSH
31988: LD_INT 80
31990: PUSH
31991: LD_INT 90
31993: PUSH
31994: LD_INT 100
31996: PUSH
31997: LD_INT 110
31999: PUSH
32000: LD_INT 120
32002: PUSH
32003: LD_INT 130
32005: PUSH
32006: LD_INT 140
32008: PUSH
32009: LD_INT 150
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 1
32031: PPUSH
32032: LD_INT 15
32034: PPUSH
32035: CALL_OW 12
32039: ARRAY
32040: ST_TO_ADDR
// if ValidHex ( x , y ) then
32041: LD_VAR 0 3
32045: PPUSH
32046: LD_VAR 0 4
32050: PPUSH
32051: CALL_OW 488
32055: IFFALSE 32078
// begin result := [ x , y ] ;
32057: LD_ADDR_VAR 0 1
32061: PUSH
32062: LD_VAR 0 3
32066: PUSH
32067: LD_VAR 0 4
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: ST_TO_ADDR
// break ;
32076: GO 32080
// end ; end ;
32078: GO 31880
32080: POP
32081: POP
// if result then
32082: LD_VAR 0 1
32086: IFFALSE 32146
// begin ToLua ( playSibBomb() ) ;
32088: LD_STRING playSibBomb()
32090: PPUSH
32091: CALL_OW 559
// wait ( 0 0$14 ) ;
32095: LD_INT 490
32097: PPUSH
32098: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
32102: LD_VAR 0 1
32106: PUSH
32107: LD_INT 1
32109: ARRAY
32110: PPUSH
32111: LD_VAR 0 1
32115: PUSH
32116: LD_INT 2
32118: ARRAY
32119: PPUSH
32120: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
32124: LD_VAR 0 1
32128: PUSH
32129: LD_INT 1
32131: ARRAY
32132: PPUSH
32133: LD_VAR 0 1
32137: PUSH
32138: LD_INT 2
32140: ARRAY
32141: PPUSH
32142: CALL_OW 429
// end ; end ;
32146: LD_VAR 0 1
32150: RET
// every 0 0$1 trigger StreamModeActive and sReset do
32151: LD_EXP 66
32155: PUSH
32156: LD_EXP 88
32160: AND
32161: IFFALSE 32173
32163: GO 32165
32165: DISABLE
// YouLost (  ) ;
32166: LD_STRING 
32168: PPUSH
32169: CALL_OW 104
32173: END
// every 0 0$1 trigger StreamModeActive and sFog do
32174: LD_EXP 66
32178: PUSH
32179: LD_EXP 87
32183: AND
32184: IFFALSE 32198
32186: GO 32188
32188: DISABLE
// FogOff ( your_side ) ;
32189: LD_OWVAR 2
32193: PPUSH
32194: CALL_OW 344
32198: END
// every 0 0$1 trigger StreamModeActive and sSun do
32199: LD_EXP 66
32203: PUSH
32204: LD_EXP 89
32208: AND
32209: IFFALSE 32237
32211: GO 32213
32213: DISABLE
// begin solar_recharge_percent := 0 ;
32214: LD_ADDR_OWVAR 79
32218: PUSH
32219: LD_INT 0
32221: ST_TO_ADDR
// wait ( 5 5$00 ) ;
32222: LD_INT 10500
32224: PPUSH
32225: CALL_OW 67
// solar_recharge_percent := 100 ;
32229: LD_ADDR_OWVAR 79
32233: PUSH
32234: LD_INT 100
32236: ST_TO_ADDR
// end ;
32237: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
32238: LD_EXP 66
32242: PUSH
32243: LD_EXP 90
32247: AND
32248: IFFALSE 32487
32250: GO 32252
32252: DISABLE
32253: LD_INT 0
32255: PPUSH
32256: PPUSH
32257: PPUSH
// begin tmp := [ ] ;
32258: LD_ADDR_VAR 0 3
32262: PUSH
32263: EMPTY
32264: ST_TO_ADDR
// for i := 1 to 6 do
32265: LD_ADDR_VAR 0 1
32269: PUSH
32270: DOUBLE
32271: LD_INT 1
32273: DEC
32274: ST_TO_ADDR
32275: LD_INT 6
32277: PUSH
32278: FOR_TO
32279: IFFALSE 32384
// begin uc_nation := nation_nature ;
32281: LD_ADDR_OWVAR 21
32285: PUSH
32286: LD_INT 0
32288: ST_TO_ADDR
// uc_side := 0 ;
32289: LD_ADDR_OWVAR 20
32293: PUSH
32294: LD_INT 0
32296: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
32297: LD_ADDR_OWVAR 29
32301: PUSH
32302: LD_INT 12
32304: PUSH
32305: LD_INT 12
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: ST_TO_ADDR
// hc_agressivity := 20 ;
32312: LD_ADDR_OWVAR 35
32316: PUSH
32317: LD_INT 20
32319: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
32320: LD_ADDR_OWVAR 28
32324: PUSH
32325: LD_INT 17
32327: ST_TO_ADDR
// hc_gallery :=  ;
32328: LD_ADDR_OWVAR 33
32332: PUSH
32333: LD_STRING 
32335: ST_TO_ADDR
// hc_name :=  ;
32336: LD_ADDR_OWVAR 26
32340: PUSH
32341: LD_STRING 
32343: ST_TO_ADDR
// un := CreateHuman ;
32344: LD_ADDR_VAR 0 2
32348: PUSH
32349: CALL_OW 44
32353: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
32354: LD_VAR 0 2
32358: PPUSH
32359: LD_INT 1
32361: PPUSH
32362: CALL_OW 51
// tmp := tmp ^ un ;
32366: LD_ADDR_VAR 0 3
32370: PUSH
32371: LD_VAR 0 3
32375: PUSH
32376: LD_VAR 0 2
32380: ADD
32381: ST_TO_ADDR
// end ;
32382: GO 32278
32384: POP
32385: POP
// repeat wait ( 0 0$1 ) ;
32386: LD_INT 35
32388: PPUSH
32389: CALL_OW 67
// for un in tmp do
32393: LD_ADDR_VAR 0 2
32397: PUSH
32398: LD_VAR 0 3
32402: PUSH
32403: FOR_IN
32404: IFFALSE 32478
// begin if IsDead ( un ) then
32406: LD_VAR 0 2
32410: PPUSH
32411: CALL_OW 301
32415: IFFALSE 32435
// begin tmp := tmp diff un ;
32417: LD_ADDR_VAR 0 3
32421: PUSH
32422: LD_VAR 0 3
32426: PUSH
32427: LD_VAR 0 2
32431: DIFF
32432: ST_TO_ADDR
// continue ;
32433: GO 32403
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
32435: LD_VAR 0 2
32439: PPUSH
32440: LD_INT 3
32442: PUSH
32443: LD_INT 22
32445: PUSH
32446: LD_INT 0
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PPUSH
32457: CALL_OW 69
32461: PPUSH
32462: LD_VAR 0 2
32466: PPUSH
32467: CALL_OW 74
32471: PPUSH
32472: CALL_OW 115
// end ;
32476: GO 32403
32478: POP
32479: POP
// until not tmp ;
32480: LD_VAR 0 3
32484: NOT
32485: IFFALSE 32386
// end ;
32487: PPOPN 3
32489: END
// every 0 0$1 trigger StreamModeActive and sTroll do
32490: LD_EXP 66
32494: PUSH
32495: LD_EXP 91
32499: AND
32500: IFFALSE 32554
32502: GO 32504
32504: DISABLE
// begin ToLua ( displayTroll(); ) ;
32505: LD_STRING displayTroll();
32507: PPUSH
32508: CALL_OW 559
// wait ( 3 3$00 ) ;
32512: LD_INT 6300
32514: PPUSH
32515: CALL_OW 67
// ToLua ( hideTroll(); ) ;
32519: LD_STRING hideTroll();
32521: PPUSH
32522: CALL_OW 559
// wait ( 1 1$00 ) ;
32526: LD_INT 2100
32528: PPUSH
32529: CALL_OW 67
// ToLua ( displayTroll(); ) ;
32533: LD_STRING displayTroll();
32535: PPUSH
32536: CALL_OW 559
// wait ( 1 1$00 ) ;
32540: LD_INT 2100
32542: PPUSH
32543: CALL_OW 67
// ToLua ( hideTroll(); ) ;
32547: LD_STRING hideTroll();
32549: PPUSH
32550: CALL_OW 559
// end ;
32554: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
32555: LD_EXP 66
32559: PUSH
32560: LD_EXP 92
32564: AND
32565: IFFALSE 32628
32567: GO 32569
32569: DISABLE
32570: LD_INT 0
32572: PPUSH
// begin p := 0 ;
32573: LD_ADDR_VAR 0 1
32577: PUSH
32578: LD_INT 0
32580: ST_TO_ADDR
// repeat game_speed := 1 ;
32581: LD_ADDR_OWVAR 65
32585: PUSH
32586: LD_INT 1
32588: ST_TO_ADDR
// wait ( 0 0$1 ) ;
32589: LD_INT 35
32591: PPUSH
32592: CALL_OW 67
// p := p + 1 ;
32596: LD_ADDR_VAR 0 1
32600: PUSH
32601: LD_VAR 0 1
32605: PUSH
32606: LD_INT 1
32608: PLUS
32609: ST_TO_ADDR
// until p >= 60 ;
32610: LD_VAR 0 1
32614: PUSH
32615: LD_INT 60
32617: GREATEREQUAL
32618: IFFALSE 32581
// game_speed := 4 ;
32620: LD_ADDR_OWVAR 65
32624: PUSH
32625: LD_INT 4
32627: ST_TO_ADDR
// end ;
32628: PPOPN 1
32630: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
32631: LD_EXP 66
32635: PUSH
32636: LD_EXP 93
32640: AND
32641: IFFALSE 32787
32643: GO 32645
32645: DISABLE
32646: LD_INT 0
32648: PPUSH
32649: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32650: LD_ADDR_VAR 0 1
32654: PUSH
32655: LD_INT 22
32657: PUSH
32658: LD_OWVAR 2
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 2
32669: PUSH
32670: LD_INT 30
32672: PUSH
32673: LD_INT 0
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 30
32682: PUSH
32683: LD_INT 1
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: LIST
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PPUSH
32699: CALL_OW 69
32703: ST_TO_ADDR
// if not depot then
32704: LD_VAR 0 1
32708: NOT
32709: IFFALSE 32713
// exit ;
32711: GO 32787
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
32713: LD_ADDR_VAR 0 2
32717: PUSH
32718: LD_VAR 0 1
32722: PUSH
32723: LD_INT 1
32725: PPUSH
32726: LD_VAR 0 1
32730: PPUSH
32731: CALL_OW 12
32735: ARRAY
32736: PPUSH
32737: CALL_OW 274
32741: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
32742: LD_VAR 0 2
32746: PPUSH
32747: LD_INT 1
32749: PPUSH
32750: LD_INT 0
32752: PPUSH
32753: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
32757: LD_VAR 0 2
32761: PPUSH
32762: LD_INT 2
32764: PPUSH
32765: LD_INT 0
32767: PPUSH
32768: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
32772: LD_VAR 0 2
32776: PPUSH
32777: LD_INT 3
32779: PPUSH
32780: LD_INT 0
32782: PPUSH
32783: CALL_OW 277
// end ;
32787: PPOPN 2
32789: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
32790: LD_EXP 66
32794: PUSH
32795: LD_EXP 94
32799: AND
32800: IFFALSE 32897
32802: GO 32804
32804: DISABLE
32805: LD_INT 0
32807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32808: LD_ADDR_VAR 0 1
32812: PUSH
32813: LD_INT 22
32815: PUSH
32816: LD_OWVAR 2
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 21
32827: PUSH
32828: LD_INT 1
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 3
32837: PUSH
32838: LD_INT 23
32840: PUSH
32841: LD_INT 0
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: LIST
32856: PPUSH
32857: CALL_OW 69
32861: ST_TO_ADDR
// if not tmp then
32862: LD_VAR 0 1
32866: NOT
32867: IFFALSE 32871
// exit ;
32869: GO 32897
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
32871: LD_VAR 0 1
32875: PUSH
32876: LD_INT 1
32878: PPUSH
32879: LD_VAR 0 1
32883: PPUSH
32884: CALL_OW 12
32888: ARRAY
32889: PPUSH
32890: LD_INT 200
32892: PPUSH
32893: CALL_OW 234
// end ;
32897: PPOPN 1
32899: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
32900: LD_EXP 66
32904: PUSH
32905: LD_EXP 95
32909: AND
32910: IFFALSE 32989
32912: GO 32914
32914: DISABLE
32915: LD_INT 0
32917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
32918: LD_ADDR_VAR 0 1
32922: PUSH
32923: LD_INT 22
32925: PUSH
32926: LD_OWVAR 2
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 21
32937: PUSH
32938: LD_INT 2
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PPUSH
32949: CALL_OW 69
32953: ST_TO_ADDR
// if not tmp then
32954: LD_VAR 0 1
32958: NOT
32959: IFFALSE 32963
// exit ;
32961: GO 32989
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
32963: LD_VAR 0 1
32967: PUSH
32968: LD_INT 1
32970: PPUSH
32971: LD_VAR 0 1
32975: PPUSH
32976: CALL_OW 12
32980: ARRAY
32981: PPUSH
32982: LD_INT 60
32984: PPUSH
32985: CALL_OW 234
// end ;
32989: PPOPN 1
32991: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
32992: LD_EXP 66
32996: PUSH
32997: LD_EXP 96
33001: AND
33002: IFFALSE 33101
33004: GO 33006
33006: DISABLE
33007: LD_INT 0
33009: PPUSH
33010: PPUSH
// begin enable ;
33011: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
33012: LD_ADDR_VAR 0 1
33016: PUSH
33017: LD_INT 22
33019: PUSH
33020: LD_OWVAR 2
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 61
33031: PUSH
33032: EMPTY
33033: LIST
33034: PUSH
33035: LD_INT 33
33037: PUSH
33038: LD_INT 2
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: LIST
33049: PPUSH
33050: CALL_OW 69
33054: ST_TO_ADDR
// if not tmp then
33055: LD_VAR 0 1
33059: NOT
33060: IFFALSE 33064
// exit ;
33062: GO 33101
// for i in tmp do
33064: LD_ADDR_VAR 0 2
33068: PUSH
33069: LD_VAR 0 1
33073: PUSH
33074: FOR_IN
33075: IFFALSE 33099
// if IsControledBy ( i ) then
33077: LD_VAR 0 2
33081: PPUSH
33082: CALL_OW 312
33086: IFFALSE 33097
// ComUnlink ( i ) ;
33088: LD_VAR 0 2
33092: PPUSH
33093: CALL_OW 136
33097: GO 33074
33099: POP
33100: POP
// end ;
33101: PPOPN 2
33103: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
33104: LD_EXP 66
33108: PUSH
33109: LD_EXP 97
33113: AND
33114: IFFALSE 33254
33116: GO 33118
33118: DISABLE
33119: LD_INT 0
33121: PPUSH
33122: PPUSH
// begin ToLua ( displayPowell(); ) ;
33123: LD_STRING displayPowell();
33125: PPUSH
33126: CALL_OW 559
// uc_side := 0 ;
33130: LD_ADDR_OWVAR 20
33134: PUSH
33135: LD_INT 0
33137: ST_TO_ADDR
// uc_nation := 2 ;
33138: LD_ADDR_OWVAR 21
33142: PUSH
33143: LD_INT 2
33145: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
33146: LD_ADDR_OWVAR 37
33150: PUSH
33151: LD_INT 14
33153: ST_TO_ADDR
// vc_engine := engine_siberite ;
33154: LD_ADDR_OWVAR 39
33158: PUSH
33159: LD_INT 3
33161: ST_TO_ADDR
// vc_control := control_apeman ;
33162: LD_ADDR_OWVAR 38
33166: PUSH
33167: LD_INT 5
33169: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
33170: LD_ADDR_OWVAR 40
33174: PUSH
33175: LD_INT 29
33177: ST_TO_ADDR
// un := CreateVehicle ;
33178: LD_ADDR_VAR 0 2
33182: PUSH
33183: CALL_OW 45
33187: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33188: LD_VAR 0 2
33192: PPUSH
33193: LD_INT 1
33195: PPUSH
33196: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
33200: LD_INT 35
33202: PPUSH
33203: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
33207: LD_VAR 0 2
33211: PPUSH
33212: LD_INT 22
33214: PUSH
33215: LD_OWVAR 2
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PPUSH
33224: CALL_OW 69
33228: PPUSH
33229: LD_VAR 0 2
33233: PPUSH
33234: CALL_OW 74
33238: PPUSH
33239: CALL_OW 115
// until IsDead ( un ) ;
33243: LD_VAR 0 2
33247: PPUSH
33248: CALL_OW 301
33252: IFFALSE 33200
// end ;
33254: PPOPN 2
33256: END
// every 0 0$1 trigger StreamModeActive and sStu do
33257: LD_EXP 66
33261: PUSH
33262: LD_EXP 105
33266: AND
33267: IFFALSE 33283
33269: GO 33271
33271: DISABLE
// begin ToLua ( displayStucuk(); ) ;
33272: LD_STRING displayStucuk();
33274: PPUSH
33275: CALL_OW 559
// ResetFog ;
33279: CALL_OW 335
// end ;
33283: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
33284: LD_EXP 66
33288: PUSH
33289: LD_EXP 98
33293: AND
33294: IFFALSE 33435
33296: GO 33298
33298: DISABLE
33299: LD_INT 0
33301: PPUSH
33302: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
33303: LD_ADDR_VAR 0 2
33307: PUSH
33308: LD_INT 22
33310: PUSH
33311: LD_OWVAR 2
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 21
33322: PUSH
33323: LD_INT 1
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PPUSH
33334: CALL_OW 69
33338: ST_TO_ADDR
// if not tmp then
33339: LD_VAR 0 2
33343: NOT
33344: IFFALSE 33348
// exit ;
33346: GO 33435
// un := tmp [ rand ( 1 , tmp ) ] ;
33348: LD_ADDR_VAR 0 1
33352: PUSH
33353: LD_VAR 0 2
33357: PUSH
33358: LD_INT 1
33360: PPUSH
33361: LD_VAR 0 2
33365: PPUSH
33366: CALL_OW 12
33370: ARRAY
33371: ST_TO_ADDR
// SetSide ( un , 0 ) ;
33372: LD_VAR 0 1
33376: PPUSH
33377: LD_INT 0
33379: PPUSH
33380: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
33384: LD_VAR 0 1
33388: PPUSH
33389: LD_OWVAR 3
33393: PUSH
33394: LD_VAR 0 1
33398: DIFF
33399: PPUSH
33400: LD_VAR 0 1
33404: PPUSH
33405: CALL_OW 74
33409: PPUSH
33410: CALL_OW 115
// wait ( 0 0$20 ) ;
33414: LD_INT 700
33416: PPUSH
33417: CALL_OW 67
// SetSide ( un , your_side ) ;
33421: LD_VAR 0 1
33425: PPUSH
33426: LD_OWVAR 2
33430: PPUSH
33431: CALL_OW 235
// end ;
33435: PPOPN 2
33437: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
33438: LD_EXP 66
33442: PUSH
33443: LD_EXP 99
33447: AND
33448: IFFALSE 33554
33450: GO 33452
33452: DISABLE
33453: LD_INT 0
33455: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33456: LD_ADDR_VAR 0 1
33460: PUSH
33461: LD_INT 22
33463: PUSH
33464: LD_OWVAR 2
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 2
33475: PUSH
33476: LD_INT 30
33478: PUSH
33479: LD_INT 0
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 30
33488: PUSH
33489: LD_INT 1
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: LIST
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PPUSH
33505: CALL_OW 69
33509: ST_TO_ADDR
// if not depot then
33510: LD_VAR 0 1
33514: NOT
33515: IFFALSE 33519
// exit ;
33517: GO 33554
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
33519: LD_VAR 0 1
33523: PUSH
33524: LD_INT 1
33526: ARRAY
33527: PPUSH
33528: CALL_OW 250
33532: PPUSH
33533: LD_VAR 0 1
33537: PUSH
33538: LD_INT 1
33540: ARRAY
33541: PPUSH
33542: CALL_OW 251
33546: PPUSH
33547: LD_INT 70
33549: PPUSH
33550: CALL_OW 495
// end ;
33554: PPOPN 1
33556: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
33557: LD_EXP 66
33561: PUSH
33562: LD_EXP 100
33566: AND
33567: IFFALSE 33778
33569: GO 33571
33571: DISABLE
33572: LD_INT 0
33574: PPUSH
33575: PPUSH
33576: PPUSH
33577: PPUSH
33578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
33579: LD_ADDR_VAR 0 5
33583: PUSH
33584: LD_INT 22
33586: PUSH
33587: LD_OWVAR 2
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 21
33598: PUSH
33599: LD_INT 1
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PPUSH
33610: CALL_OW 69
33614: ST_TO_ADDR
// if not tmp then
33615: LD_VAR 0 5
33619: NOT
33620: IFFALSE 33624
// exit ;
33622: GO 33778
// for i in tmp do
33624: LD_ADDR_VAR 0 1
33628: PUSH
33629: LD_VAR 0 5
33633: PUSH
33634: FOR_IN
33635: IFFALSE 33776
// begin d := rand ( 0 , 5 ) ;
33637: LD_ADDR_VAR 0 4
33641: PUSH
33642: LD_INT 0
33644: PPUSH
33645: LD_INT 5
33647: PPUSH
33648: CALL_OW 12
33652: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
33653: LD_ADDR_VAR 0 2
33657: PUSH
33658: LD_VAR 0 1
33662: PPUSH
33663: CALL_OW 250
33667: PPUSH
33668: LD_VAR 0 4
33672: PPUSH
33673: LD_INT 3
33675: PPUSH
33676: LD_INT 12
33678: PPUSH
33679: CALL_OW 12
33683: PPUSH
33684: CALL_OW 272
33688: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
33689: LD_ADDR_VAR 0 3
33693: PUSH
33694: LD_VAR 0 1
33698: PPUSH
33699: CALL_OW 251
33703: PPUSH
33704: LD_VAR 0 4
33708: PPUSH
33709: LD_INT 3
33711: PPUSH
33712: LD_INT 12
33714: PPUSH
33715: CALL_OW 12
33719: PPUSH
33720: CALL_OW 273
33724: ST_TO_ADDR
// if ValidHex ( x , y ) then
33725: LD_VAR 0 2
33729: PPUSH
33730: LD_VAR 0 3
33734: PPUSH
33735: CALL_OW 488
33739: IFFALSE 33774
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
33741: LD_VAR 0 1
33745: PPUSH
33746: LD_VAR 0 2
33750: PPUSH
33751: LD_VAR 0 3
33755: PPUSH
33756: LD_INT 3
33758: PPUSH
33759: LD_INT 6
33761: PPUSH
33762: CALL_OW 12
33766: PPUSH
33767: LD_INT 1
33769: PPUSH
33770: CALL_OW 483
// end ;
33774: GO 33634
33776: POP
33777: POP
// end ;
33778: PPOPN 5
33780: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
33781: LD_EXP 66
33785: PUSH
33786: LD_EXP 101
33790: AND
33791: IFFALSE 33885
33793: GO 33795
33795: DISABLE
33796: LD_INT 0
33798: PPUSH
33799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
33800: LD_ADDR_VAR 0 2
33804: PUSH
33805: LD_INT 22
33807: PUSH
33808: LD_OWVAR 2
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 32
33819: PUSH
33820: LD_INT 1
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 21
33829: PUSH
33830: LD_INT 2
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: LIST
33841: PPUSH
33842: CALL_OW 69
33846: ST_TO_ADDR
// if not tmp then
33847: LD_VAR 0 2
33851: NOT
33852: IFFALSE 33856
// exit ;
33854: GO 33885
// for i in tmp do
33856: LD_ADDR_VAR 0 1
33860: PUSH
33861: LD_VAR 0 2
33865: PUSH
33866: FOR_IN
33867: IFFALSE 33883
// SetFuel ( i , 0 ) ;
33869: LD_VAR 0 1
33873: PPUSH
33874: LD_INT 0
33876: PPUSH
33877: CALL_OW 240
33881: GO 33866
33883: POP
33884: POP
// end ;
33885: PPOPN 2
33887: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
33888: LD_EXP 66
33892: PUSH
33893: LD_EXP 102
33897: AND
33898: IFFALSE 33964
33900: GO 33902
33902: DISABLE
33903: LD_INT 0
33905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33906: LD_ADDR_VAR 0 1
33910: PUSH
33911: LD_INT 22
33913: PUSH
33914: LD_OWVAR 2
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 30
33925: PUSH
33926: LD_INT 29
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PPUSH
33937: CALL_OW 69
33941: ST_TO_ADDR
// if not tmp then
33942: LD_VAR 0 1
33946: NOT
33947: IFFALSE 33951
// exit ;
33949: GO 33964
// DestroyUnit ( tmp [ 1 ] ) ;
33951: LD_VAR 0 1
33955: PUSH
33956: LD_INT 1
33958: ARRAY
33959: PPUSH
33960: CALL_OW 65
// end ;
33964: PPOPN 1
33966: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
33967: LD_EXP 66
33971: PUSH
33972: LD_EXP 104
33976: AND
33977: IFFALSE 34106
33979: GO 33981
33981: DISABLE
33982: LD_INT 0
33984: PPUSH
// begin uc_side := 0 ;
33985: LD_ADDR_OWVAR 20
33989: PUSH
33990: LD_INT 0
33992: ST_TO_ADDR
// uc_nation := nation_arabian ;
33993: LD_ADDR_OWVAR 21
33997: PUSH
33998: LD_INT 2
34000: ST_TO_ADDR
// hc_gallery :=  ;
34001: LD_ADDR_OWVAR 33
34005: PUSH
34006: LD_STRING 
34008: ST_TO_ADDR
// hc_name :=  ;
34009: LD_ADDR_OWVAR 26
34013: PUSH
34014: LD_STRING 
34016: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
34017: LD_INT 1
34019: PPUSH
34020: LD_INT 11
34022: PPUSH
34023: LD_INT 10
34025: PPUSH
34026: CALL_OW 380
// un := CreateHuman ;
34030: LD_ADDR_VAR 0 1
34034: PUSH
34035: CALL_OW 44
34039: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
34040: LD_VAR 0 1
34044: PPUSH
34045: LD_INT 1
34047: PPUSH
34048: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
34052: LD_INT 35
34054: PPUSH
34055: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
34059: LD_VAR 0 1
34063: PPUSH
34064: LD_INT 22
34066: PUSH
34067: LD_OWVAR 2
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PPUSH
34076: CALL_OW 69
34080: PPUSH
34081: LD_VAR 0 1
34085: PPUSH
34086: CALL_OW 74
34090: PPUSH
34091: CALL_OW 115
// until IsDead ( un ) ;
34095: LD_VAR 0 1
34099: PPUSH
34100: CALL_OW 301
34104: IFFALSE 34052
// end ;
34106: PPOPN 1
34108: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
34109: LD_EXP 66
34113: PUSH
34114: LD_EXP 106
34118: AND
34119: IFFALSE 34131
34121: GO 34123
34123: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
34124: LD_STRING earthquake(getX(game), 0, 32)
34126: PPUSH
34127: CALL_OW 559
34131: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
34132: LD_EXP 66
34136: PUSH
34137: LD_EXP 107
34141: AND
34142: IFFALSE 34233
34144: GO 34146
34146: DISABLE
34147: LD_INT 0
34149: PPUSH
// begin enable ;
34150: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
34151: LD_ADDR_VAR 0 1
34155: PUSH
34156: LD_INT 22
34158: PUSH
34159: LD_OWVAR 2
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 21
34170: PUSH
34171: LD_INT 2
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 33
34180: PUSH
34181: LD_INT 3
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: LIST
34192: PPUSH
34193: CALL_OW 69
34197: ST_TO_ADDR
// if not tmp then
34198: LD_VAR 0 1
34202: NOT
34203: IFFALSE 34207
// exit ;
34205: GO 34233
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
34207: LD_VAR 0 1
34211: PUSH
34212: LD_INT 1
34214: PPUSH
34215: LD_VAR 0 1
34219: PPUSH
34220: CALL_OW 12
34224: ARRAY
34225: PPUSH
34226: LD_INT 1
34228: PPUSH
34229: CALL_OW 234
// end ;
34233: PPOPN 1
34235: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
34236: LD_EXP 66
34240: PUSH
34241: LD_EXP 108
34245: AND
34246: IFFALSE 34387
34248: GO 34250
34250: DISABLE
34251: LD_INT 0
34253: PPUSH
34254: PPUSH
34255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34256: LD_ADDR_VAR 0 3
34260: PUSH
34261: LD_INT 22
34263: PUSH
34264: LD_OWVAR 2
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 25
34275: PUSH
34276: LD_INT 1
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PPUSH
34287: CALL_OW 69
34291: ST_TO_ADDR
// if not tmp then
34292: LD_VAR 0 3
34296: NOT
34297: IFFALSE 34301
// exit ;
34299: GO 34387
// un := tmp [ rand ( 1 , tmp ) ] ;
34301: LD_ADDR_VAR 0 2
34305: PUSH
34306: LD_VAR 0 3
34310: PUSH
34311: LD_INT 1
34313: PPUSH
34314: LD_VAR 0 3
34318: PPUSH
34319: CALL_OW 12
34323: ARRAY
34324: ST_TO_ADDR
// if Crawls ( un ) then
34325: LD_VAR 0 2
34329: PPUSH
34330: CALL_OW 318
34334: IFFALSE 34345
// ComWalk ( un ) ;
34336: LD_VAR 0 2
34340: PPUSH
34341: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
34345: LD_VAR 0 2
34349: PPUSH
34350: LD_INT 9
34352: PPUSH
34353: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
34357: LD_INT 28
34359: PPUSH
34360: LD_OWVAR 2
34364: PPUSH
34365: LD_INT 2
34367: PPUSH
34368: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
34372: LD_INT 29
34374: PPUSH
34375: LD_OWVAR 2
34379: PPUSH
34380: LD_INT 2
34382: PPUSH
34383: CALL_OW 322
// end ;
34387: PPOPN 3
34389: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
34390: LD_EXP 66
34394: PUSH
34395: LD_EXP 109
34399: AND
34400: IFFALSE 34511
34402: GO 34404
34404: DISABLE
34405: LD_INT 0
34407: PPUSH
34408: PPUSH
34409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34410: LD_ADDR_VAR 0 3
34414: PUSH
34415: LD_INT 22
34417: PUSH
34418: LD_OWVAR 2
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 25
34429: PUSH
34430: LD_INT 1
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PPUSH
34441: CALL_OW 69
34445: ST_TO_ADDR
// if not tmp then
34446: LD_VAR 0 3
34450: NOT
34451: IFFALSE 34455
// exit ;
34453: GO 34511
// un := tmp [ rand ( 1 , tmp ) ] ;
34455: LD_ADDR_VAR 0 2
34459: PUSH
34460: LD_VAR 0 3
34464: PUSH
34465: LD_INT 1
34467: PPUSH
34468: LD_VAR 0 3
34472: PPUSH
34473: CALL_OW 12
34477: ARRAY
34478: ST_TO_ADDR
// if Crawls ( un ) then
34479: LD_VAR 0 2
34483: PPUSH
34484: CALL_OW 318
34488: IFFALSE 34499
// ComWalk ( un ) ;
34490: LD_VAR 0 2
34494: PPUSH
34495: CALL_OW 138
// SetClass ( un , class_mortar ) ;
34499: LD_VAR 0 2
34503: PPUSH
34504: LD_INT 8
34506: PPUSH
34507: CALL_OW 336
// end ;
34511: PPOPN 3
34513: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
34514: LD_EXP 66
34518: PUSH
34519: LD_EXP 110
34523: AND
34524: IFFALSE 34668
34526: GO 34528
34528: DISABLE
34529: LD_INT 0
34531: PPUSH
34532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
34533: LD_ADDR_VAR 0 2
34537: PUSH
34538: LD_INT 22
34540: PUSH
34541: LD_OWVAR 2
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 21
34552: PUSH
34553: LD_INT 2
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 2
34562: PUSH
34563: LD_INT 34
34565: PUSH
34566: LD_INT 12
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 34
34575: PUSH
34576: LD_INT 51
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 34
34585: PUSH
34586: LD_INT 32
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: LIST
34603: PPUSH
34604: CALL_OW 69
34608: ST_TO_ADDR
// if not tmp then
34609: LD_VAR 0 2
34613: NOT
34614: IFFALSE 34618
// exit ;
34616: GO 34668
// for i in tmp do
34618: LD_ADDR_VAR 0 1
34622: PUSH
34623: LD_VAR 0 2
34627: PUSH
34628: FOR_IN
34629: IFFALSE 34666
// if GetCargo ( i , mat_artifact ) = 0 then
34631: LD_VAR 0 1
34635: PPUSH
34636: LD_INT 4
34638: PPUSH
34639: CALL_OW 289
34643: PUSH
34644: LD_INT 0
34646: EQUAL
34647: IFFALSE 34664
// SetCargo ( i , mat_siberit , 100 ) ;
34649: LD_VAR 0 1
34653: PPUSH
34654: LD_INT 3
34656: PPUSH
34657: LD_INT 100
34659: PPUSH
34660: CALL_OW 290
34664: GO 34628
34666: POP
34667: POP
// end ;
34668: PPOPN 2
34670: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
34671: LD_EXP 66
34675: PUSH
34676: LD_EXP 111
34680: AND
34681: IFFALSE 34864
34683: GO 34685
34685: DISABLE
34686: LD_INT 0
34688: PPUSH
34689: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34690: LD_ADDR_VAR 0 2
34694: PUSH
34695: LD_INT 22
34697: PUSH
34698: LD_OWVAR 2
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PPUSH
34707: CALL_OW 69
34711: ST_TO_ADDR
// if not tmp then
34712: LD_VAR 0 2
34716: NOT
34717: IFFALSE 34721
// exit ;
34719: GO 34864
// for i := 1 to 2 do
34721: LD_ADDR_VAR 0 1
34725: PUSH
34726: DOUBLE
34727: LD_INT 1
34729: DEC
34730: ST_TO_ADDR
34731: LD_INT 2
34733: PUSH
34734: FOR_TO
34735: IFFALSE 34862
// begin uc_side := your_side ;
34737: LD_ADDR_OWVAR 20
34741: PUSH
34742: LD_OWVAR 2
34746: ST_TO_ADDR
// uc_nation := nation_american ;
34747: LD_ADDR_OWVAR 21
34751: PUSH
34752: LD_INT 1
34754: ST_TO_ADDR
// vc_chassis := us_morphling ;
34755: LD_ADDR_OWVAR 37
34759: PUSH
34760: LD_INT 5
34762: ST_TO_ADDR
// vc_engine := engine_siberite ;
34763: LD_ADDR_OWVAR 39
34767: PUSH
34768: LD_INT 3
34770: ST_TO_ADDR
// vc_control := control_computer ;
34771: LD_ADDR_OWVAR 38
34775: PUSH
34776: LD_INT 3
34778: ST_TO_ADDR
// vc_weapon := us_double_laser ;
34779: LD_ADDR_OWVAR 40
34783: PUSH
34784: LD_INT 10
34786: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
34787: LD_VAR 0 2
34791: PUSH
34792: LD_INT 1
34794: ARRAY
34795: PPUSH
34796: CALL_OW 310
34800: NOT
34801: IFFALSE 34848
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
34803: CALL_OW 45
34807: PPUSH
34808: LD_VAR 0 2
34812: PUSH
34813: LD_INT 1
34815: ARRAY
34816: PPUSH
34817: CALL_OW 250
34821: PPUSH
34822: LD_VAR 0 2
34826: PUSH
34827: LD_INT 1
34829: ARRAY
34830: PPUSH
34831: CALL_OW 251
34835: PPUSH
34836: LD_INT 12
34838: PPUSH
34839: LD_INT 1
34841: PPUSH
34842: CALL_OW 50
34846: GO 34860
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
34848: CALL_OW 45
34852: PPUSH
34853: LD_INT 1
34855: PPUSH
34856: CALL_OW 51
// end ;
34860: GO 34734
34862: POP
34863: POP
// end ;
34864: PPOPN 2
34866: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
34867: LD_EXP 66
34871: PUSH
34872: LD_EXP 112
34876: AND
34877: IFFALSE 35099
34879: GO 34881
34881: DISABLE
34882: LD_INT 0
34884: PPUSH
34885: PPUSH
34886: PPUSH
34887: PPUSH
34888: PPUSH
34889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34890: LD_ADDR_VAR 0 6
34894: PUSH
34895: LD_INT 22
34897: PUSH
34898: LD_OWVAR 2
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 21
34909: PUSH
34910: LD_INT 1
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 3
34919: PUSH
34920: LD_INT 23
34922: PUSH
34923: LD_INT 0
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: LIST
34938: PPUSH
34939: CALL_OW 69
34943: ST_TO_ADDR
// if not tmp then
34944: LD_VAR 0 6
34948: NOT
34949: IFFALSE 34953
// exit ;
34951: GO 35099
// s1 := rand ( 1 , 4 ) ;
34953: LD_ADDR_VAR 0 2
34957: PUSH
34958: LD_INT 1
34960: PPUSH
34961: LD_INT 4
34963: PPUSH
34964: CALL_OW 12
34968: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
34969: LD_ADDR_VAR 0 4
34973: PUSH
34974: LD_VAR 0 6
34978: PUSH
34979: LD_INT 1
34981: ARRAY
34982: PPUSH
34983: LD_VAR 0 2
34987: PPUSH
34988: CALL_OW 259
34992: ST_TO_ADDR
// if s1 = 1 then
34993: LD_VAR 0 2
34997: PUSH
34998: LD_INT 1
35000: EQUAL
35001: IFFALSE 35021
// s2 := rand ( 2 , 4 ) else
35003: LD_ADDR_VAR 0 3
35007: PUSH
35008: LD_INT 2
35010: PPUSH
35011: LD_INT 4
35013: PPUSH
35014: CALL_OW 12
35018: ST_TO_ADDR
35019: GO 35029
// s2 := 1 ;
35021: LD_ADDR_VAR 0 3
35025: PUSH
35026: LD_INT 1
35028: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
35029: LD_ADDR_VAR 0 5
35033: PUSH
35034: LD_VAR 0 6
35038: PUSH
35039: LD_INT 1
35041: ARRAY
35042: PPUSH
35043: LD_VAR 0 3
35047: PPUSH
35048: CALL_OW 259
35052: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
35053: LD_VAR 0 6
35057: PUSH
35058: LD_INT 1
35060: ARRAY
35061: PPUSH
35062: LD_VAR 0 2
35066: PPUSH
35067: LD_VAR 0 5
35071: PPUSH
35072: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
35076: LD_VAR 0 6
35080: PUSH
35081: LD_INT 1
35083: ARRAY
35084: PPUSH
35085: LD_VAR 0 3
35089: PPUSH
35090: LD_VAR 0 4
35094: PPUSH
35095: CALL_OW 237
// end ;
35099: PPOPN 6
35101: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
35102: LD_EXP 66
35106: PUSH
35107: LD_EXP 113
35111: AND
35112: IFFALSE 35191
35114: GO 35116
35116: DISABLE
35117: LD_INT 0
35119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
35120: LD_ADDR_VAR 0 1
35124: PUSH
35125: LD_INT 22
35127: PUSH
35128: LD_OWVAR 2
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 30
35139: PUSH
35140: LD_INT 3
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PPUSH
35151: CALL_OW 69
35155: ST_TO_ADDR
// if not tmp then
35156: LD_VAR 0 1
35160: NOT
35161: IFFALSE 35165
// exit ;
35163: GO 35191
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
35165: LD_VAR 0 1
35169: PUSH
35170: LD_INT 1
35172: PPUSH
35173: LD_VAR 0 1
35177: PPUSH
35178: CALL_OW 12
35182: ARRAY
35183: PPUSH
35184: LD_INT 1
35186: PPUSH
35187: CALL_OW 234
// end ;
35191: PPOPN 1
35193: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
35194: LD_EXP 66
35198: PUSH
35199: LD_EXP 114
35203: AND
35204: IFFALSE 35316
35206: GO 35208
35208: DISABLE
35209: LD_INT 0
35211: PPUSH
35212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
35213: LD_ADDR_VAR 0 2
35217: PUSH
35218: LD_INT 22
35220: PUSH
35221: LD_OWVAR 2
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 2
35232: PUSH
35233: LD_INT 30
35235: PUSH
35236: LD_INT 27
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 30
35245: PUSH
35246: LD_INT 26
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 30
35255: PUSH
35256: LD_INT 28
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PPUSH
35273: CALL_OW 69
35277: ST_TO_ADDR
// if not tmp then
35278: LD_VAR 0 2
35282: NOT
35283: IFFALSE 35287
// exit ;
35285: GO 35316
// for i in tmp do
35287: LD_ADDR_VAR 0 1
35291: PUSH
35292: LD_VAR 0 2
35296: PUSH
35297: FOR_IN
35298: IFFALSE 35314
// SetLives ( i , 1 ) ;
35300: LD_VAR 0 1
35304: PPUSH
35305: LD_INT 1
35307: PPUSH
35308: CALL_OW 234
35312: GO 35297
35314: POP
35315: POP
// end ;
35316: PPOPN 2
35318: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
35319: LD_EXP 66
35323: PUSH
35324: LD_EXP 115
35328: AND
35329: IFFALSE 35616
35331: GO 35333
35333: DISABLE
35334: LD_INT 0
35336: PPUSH
35337: PPUSH
35338: PPUSH
// begin i := rand ( 1 , 7 ) ;
35339: LD_ADDR_VAR 0 1
35343: PUSH
35344: LD_INT 1
35346: PPUSH
35347: LD_INT 7
35349: PPUSH
35350: CALL_OW 12
35354: ST_TO_ADDR
// case i of 1 :
35355: LD_VAR 0 1
35359: PUSH
35360: LD_INT 1
35362: DOUBLE
35363: EQUAL
35364: IFTRUE 35368
35366: GO 35378
35368: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
35369: LD_STRING earthquake(getX(game), 0, 32)
35371: PPUSH
35372: CALL_OW 559
35376: GO 35616
35378: LD_INT 2
35380: DOUBLE
35381: EQUAL
35382: IFTRUE 35386
35384: GO 35400
35386: POP
// begin ToLua ( displayStucuk(); ) ;
35387: LD_STRING displayStucuk();
35389: PPUSH
35390: CALL_OW 559
// ResetFog ;
35394: CALL_OW 335
// end ; 3 :
35398: GO 35616
35400: LD_INT 3
35402: DOUBLE
35403: EQUAL
35404: IFTRUE 35408
35406: GO 35512
35408: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
35409: LD_ADDR_VAR 0 2
35413: PUSH
35414: LD_INT 22
35416: PUSH
35417: LD_OWVAR 2
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 25
35428: PUSH
35429: LD_INT 1
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PPUSH
35440: CALL_OW 69
35444: ST_TO_ADDR
// if not tmp then
35445: LD_VAR 0 2
35449: NOT
35450: IFFALSE 35454
// exit ;
35452: GO 35616
// un := tmp [ rand ( 1 , tmp ) ] ;
35454: LD_ADDR_VAR 0 3
35458: PUSH
35459: LD_VAR 0 2
35463: PUSH
35464: LD_INT 1
35466: PPUSH
35467: LD_VAR 0 2
35471: PPUSH
35472: CALL_OW 12
35476: ARRAY
35477: ST_TO_ADDR
// if Crawls ( un ) then
35478: LD_VAR 0 3
35482: PPUSH
35483: CALL_OW 318
35487: IFFALSE 35498
// ComWalk ( un ) ;
35489: LD_VAR 0 3
35493: PPUSH
35494: CALL_OW 138
// SetClass ( un , class_mortar ) ;
35498: LD_VAR 0 3
35502: PPUSH
35503: LD_INT 8
35505: PPUSH
35506: CALL_OW 336
// end ; 4 :
35510: GO 35616
35512: LD_INT 4
35514: DOUBLE
35515: EQUAL
35516: IFTRUE 35520
35518: GO 35594
35520: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
35521: LD_ADDR_VAR 0 2
35525: PUSH
35526: LD_INT 22
35528: PUSH
35529: LD_OWVAR 2
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 30
35540: PUSH
35541: LD_INT 29
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PPUSH
35552: CALL_OW 69
35556: ST_TO_ADDR
// if not tmp then
35557: LD_VAR 0 2
35561: NOT
35562: IFFALSE 35566
// exit ;
35564: GO 35616
// CenterNowOnUnits ( tmp [ 1 ] ) ;
35566: LD_VAR 0 2
35570: PUSH
35571: LD_INT 1
35573: ARRAY
35574: PPUSH
35575: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
35579: LD_VAR 0 2
35583: PUSH
35584: LD_INT 1
35586: ARRAY
35587: PPUSH
35588: CALL_OW 65
// end ; 5 .. 7 :
35592: GO 35616
35594: LD_INT 5
35596: DOUBLE
35597: GREATEREQUAL
35598: IFFALSE 35606
35600: LD_INT 7
35602: DOUBLE
35603: LESSEQUAL
35604: IFTRUE 35608
35606: GO 35615
35608: POP
// StreamSibBomb ; end ;
35609: CALL 31853 0 0
35613: GO 35616
35615: POP
// end ;
35616: PPOPN 3
35618: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
35619: LD_EXP 66
35623: PUSH
35624: LD_EXP 116
35628: AND
35629: IFFALSE 35785
35631: GO 35633
35633: DISABLE
35634: LD_INT 0
35636: PPUSH
35637: PPUSH
35638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
35639: LD_ADDR_VAR 0 2
35643: PUSH
35644: LD_INT 81
35646: PUSH
35647: LD_OWVAR 2
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 2
35658: PUSH
35659: LD_INT 21
35661: PUSH
35662: LD_INT 1
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 21
35671: PUSH
35672: LD_INT 2
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: LIST
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PPUSH
35688: CALL_OW 69
35692: ST_TO_ADDR
// if not tmp then
35693: LD_VAR 0 2
35697: NOT
35698: IFFALSE 35702
// exit ;
35700: GO 35785
// p := 0 ;
35702: LD_ADDR_VAR 0 3
35706: PUSH
35707: LD_INT 0
35709: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35710: LD_INT 35
35712: PPUSH
35713: CALL_OW 67
// p := p + 1 ;
35717: LD_ADDR_VAR 0 3
35721: PUSH
35722: LD_VAR 0 3
35726: PUSH
35727: LD_INT 1
35729: PLUS
35730: ST_TO_ADDR
// for i in tmp do
35731: LD_ADDR_VAR 0 1
35735: PUSH
35736: LD_VAR 0 2
35740: PUSH
35741: FOR_IN
35742: IFFALSE 35773
// if GetLives ( i ) < 1000 then
35744: LD_VAR 0 1
35748: PPUSH
35749: CALL_OW 256
35753: PUSH
35754: LD_INT 1000
35756: LESS
35757: IFFALSE 35771
// SetLives ( i , 1000 ) ;
35759: LD_VAR 0 1
35763: PPUSH
35764: LD_INT 1000
35766: PPUSH
35767: CALL_OW 234
35771: GO 35741
35773: POP
35774: POP
// until p > 20 ;
35775: LD_VAR 0 3
35779: PUSH
35780: LD_INT 20
35782: GREATER
35783: IFFALSE 35710
// end ;
35785: PPOPN 3
35787: END
// every 0 0$1 trigger StreamModeActive and sTime do
35788: LD_EXP 66
35792: PUSH
35793: LD_EXP 117
35797: AND
35798: IFFALSE 35833
35800: GO 35802
35802: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
35803: LD_INT 28
35805: PPUSH
35806: LD_OWVAR 2
35810: PPUSH
35811: LD_INT 2
35813: PPUSH
35814: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
35818: LD_INT 30
35820: PPUSH
35821: LD_OWVAR 2
35825: PPUSH
35826: LD_INT 2
35828: PPUSH
35829: CALL_OW 322
// end ;
35833: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
35834: LD_EXP 66
35838: PUSH
35839: LD_EXP 118
35843: AND
35844: IFFALSE 35965
35846: GO 35848
35848: DISABLE
35849: LD_INT 0
35851: PPUSH
35852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
35853: LD_ADDR_VAR 0 2
35857: PUSH
35858: LD_INT 22
35860: PUSH
35861: LD_OWVAR 2
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 21
35872: PUSH
35873: LD_INT 1
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 3
35882: PUSH
35883: LD_INT 23
35885: PUSH
35886: LD_INT 0
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: LIST
35901: PPUSH
35902: CALL_OW 69
35906: ST_TO_ADDR
// if not tmp then
35907: LD_VAR 0 2
35911: NOT
35912: IFFALSE 35916
// exit ;
35914: GO 35965
// for i in tmp do
35916: LD_ADDR_VAR 0 1
35920: PUSH
35921: LD_VAR 0 2
35925: PUSH
35926: FOR_IN
35927: IFFALSE 35963
// begin if Crawls ( i ) then
35929: LD_VAR 0 1
35933: PPUSH
35934: CALL_OW 318
35938: IFFALSE 35949
// ComWalk ( i ) ;
35940: LD_VAR 0 1
35944: PPUSH
35945: CALL_OW 138
// SetClass ( i , 2 ) ;
35949: LD_VAR 0 1
35953: PPUSH
35954: LD_INT 2
35956: PPUSH
35957: CALL_OW 336
// end ;
35961: GO 35926
35963: POP
35964: POP
// end ;
35965: PPOPN 2
35967: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
35968: LD_EXP 66
35972: PUSH
35973: LD_EXP 119
35977: AND
35978: IFFALSE 36266
35980: GO 35982
35982: DISABLE
35983: LD_INT 0
35985: PPUSH
35986: PPUSH
35987: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
35988: LD_OWVAR 2
35992: PPUSH
35993: LD_INT 9
35995: PPUSH
35996: LD_INT 1
35998: PPUSH
35999: LD_INT 1
36001: PPUSH
36002: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
36006: LD_INT 9
36008: PPUSH
36009: LD_OWVAR 2
36013: PPUSH
36014: CALL_OW 343
// uc_side := 9 ;
36018: LD_ADDR_OWVAR 20
36022: PUSH
36023: LD_INT 9
36025: ST_TO_ADDR
// uc_nation := 2 ;
36026: LD_ADDR_OWVAR 21
36030: PUSH
36031: LD_INT 2
36033: ST_TO_ADDR
// hc_name := Dark Warrior ;
36034: LD_ADDR_OWVAR 26
36038: PUSH
36039: LD_STRING Dark Warrior
36041: ST_TO_ADDR
// hc_gallery :=  ;
36042: LD_ADDR_OWVAR 33
36046: PUSH
36047: LD_STRING 
36049: ST_TO_ADDR
// hc_noskilllimit := true ;
36050: LD_ADDR_OWVAR 76
36054: PUSH
36055: LD_INT 1
36057: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
36058: LD_ADDR_OWVAR 31
36062: PUSH
36063: LD_INT 30
36065: PUSH
36066: LD_INT 30
36068: PUSH
36069: LD_INT 30
36071: PUSH
36072: LD_INT 30
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: ST_TO_ADDR
// un := CreateHuman ;
36081: LD_ADDR_VAR 0 3
36085: PUSH
36086: CALL_OW 44
36090: ST_TO_ADDR
// hc_noskilllimit := false ;
36091: LD_ADDR_OWVAR 76
36095: PUSH
36096: LD_INT 0
36098: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
36099: LD_VAR 0 3
36103: PPUSH
36104: LD_INT 1
36106: PPUSH
36107: CALL_OW 51
// ToLua ( playRanger() ) ;
36111: LD_STRING playRanger()
36113: PPUSH
36114: CALL_OW 559
// p := 0 ;
36118: LD_ADDR_VAR 0 2
36122: PUSH
36123: LD_INT 0
36125: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
36126: LD_INT 35
36128: PPUSH
36129: CALL_OW 67
// p := p + 1 ;
36133: LD_ADDR_VAR 0 2
36137: PUSH
36138: LD_VAR 0 2
36142: PUSH
36143: LD_INT 1
36145: PLUS
36146: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
36147: LD_VAR 0 3
36151: PPUSH
36152: CALL_OW 256
36156: PUSH
36157: LD_INT 1000
36159: LESS
36160: IFFALSE 36174
// SetLives ( un , 1000 ) ;
36162: LD_VAR 0 3
36166: PPUSH
36167: LD_INT 1000
36169: PPUSH
36170: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
36174: LD_VAR 0 3
36178: PPUSH
36179: LD_INT 81
36181: PUSH
36182: LD_OWVAR 2
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 91
36193: PUSH
36194: LD_VAR 0 3
36198: PUSH
36199: LD_INT 30
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: LIST
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PPUSH
36211: CALL_OW 69
36215: PPUSH
36216: LD_VAR 0 3
36220: PPUSH
36221: CALL_OW 74
36225: PPUSH
36226: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
36230: LD_VAR 0 2
36234: PUSH
36235: LD_INT 80
36237: GREATER
36238: PUSH
36239: LD_VAR 0 3
36243: PPUSH
36244: CALL_OW 301
36248: OR
36249: IFFALSE 36126
// if un then
36251: LD_VAR 0 3
36255: IFFALSE 36266
// RemoveUnit ( un ) ;
36257: LD_VAR 0 3
36261: PPUSH
36262: CALL_OW 64
// end ;
36266: PPOPN 3
36268: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
36269: LD_EXP 120
36273: IFFALSE 36389
36275: GO 36277
36277: DISABLE
36278: LD_INT 0
36280: PPUSH
36281: PPUSH
36282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
36283: LD_ADDR_VAR 0 2
36287: PUSH
36288: LD_INT 81
36290: PUSH
36291: LD_OWVAR 2
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 21
36302: PUSH
36303: LD_INT 1
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PPUSH
36314: CALL_OW 69
36318: ST_TO_ADDR
// ToLua ( playComputer() ) ;
36319: LD_STRING playComputer()
36321: PPUSH
36322: CALL_OW 559
// if not tmp then
36326: LD_VAR 0 2
36330: NOT
36331: IFFALSE 36335
// exit ;
36333: GO 36389
// for i in tmp do
36335: LD_ADDR_VAR 0 1
36339: PUSH
36340: LD_VAR 0 2
36344: PUSH
36345: FOR_IN
36346: IFFALSE 36387
// for j := 1 to 4 do
36348: LD_ADDR_VAR 0 3
36352: PUSH
36353: DOUBLE
36354: LD_INT 1
36356: DEC
36357: ST_TO_ADDR
36358: LD_INT 4
36360: PUSH
36361: FOR_TO
36362: IFFALSE 36383
// SetSkill ( i , j , 10 ) ;
36364: LD_VAR 0 1
36368: PPUSH
36369: LD_VAR 0 3
36373: PPUSH
36374: LD_INT 10
36376: PPUSH
36377: CALL_OW 237
36381: GO 36361
36383: POP
36384: POP
36385: GO 36345
36387: POP
36388: POP
// end ;
36389: PPOPN 3
36391: END
// every 0 0$1 trigger s30 do var i , tmp ;
36392: LD_EXP 121
36396: IFFALSE 36465
36398: GO 36400
36400: DISABLE
36401: LD_INT 0
36403: PPUSH
36404: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
36405: LD_ADDR_VAR 0 2
36409: PUSH
36410: LD_INT 22
36412: PUSH
36413: LD_OWVAR 2
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PPUSH
36422: CALL_OW 69
36426: ST_TO_ADDR
// if not tmp then
36427: LD_VAR 0 2
36431: NOT
36432: IFFALSE 36436
// exit ;
36434: GO 36465
// for i in tmp do
36436: LD_ADDR_VAR 0 1
36440: PUSH
36441: LD_VAR 0 2
36445: PUSH
36446: FOR_IN
36447: IFFALSE 36463
// SetLives ( i , 300 ) ;
36449: LD_VAR 0 1
36453: PPUSH
36454: LD_INT 300
36456: PPUSH
36457: CALL_OW 234
36461: GO 36446
36463: POP
36464: POP
// end ;
36465: PPOPN 2
36467: END
// every 0 0$1 trigger s60 do var i , tmp ;
36468: LD_EXP 122
36472: IFFALSE 36541
36474: GO 36476
36476: DISABLE
36477: LD_INT 0
36479: PPUSH
36480: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
36481: LD_ADDR_VAR 0 2
36485: PUSH
36486: LD_INT 22
36488: PUSH
36489: LD_OWVAR 2
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PPUSH
36498: CALL_OW 69
36502: ST_TO_ADDR
// if not tmp then
36503: LD_VAR 0 2
36507: NOT
36508: IFFALSE 36512
// exit ;
36510: GO 36541
// for i in tmp do
36512: LD_ADDR_VAR 0 1
36516: PUSH
36517: LD_VAR 0 2
36521: PUSH
36522: FOR_IN
36523: IFFALSE 36539
// SetLives ( i , 600 ) ;
36525: LD_VAR 0 1
36529: PPUSH
36530: LD_INT 600
36532: PPUSH
36533: CALL_OW 234
36537: GO 36522
36539: POP
36540: POP
// end ;
36541: PPOPN 2
36543: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
36544: LD_INT 0
36546: PPUSH
// case cmd of 301 :
36547: LD_VAR 0 1
36551: PUSH
36552: LD_INT 301
36554: DOUBLE
36555: EQUAL
36556: IFTRUE 36560
36558: GO 36592
36560: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
36561: LD_VAR 0 6
36565: PPUSH
36566: LD_VAR 0 7
36570: PPUSH
36571: LD_VAR 0 8
36575: PPUSH
36576: LD_VAR 0 4
36580: PPUSH
36581: LD_VAR 0 5
36585: PPUSH
36586: CALL 37793 0 5
36590: GO 36713
36592: LD_INT 302
36594: DOUBLE
36595: EQUAL
36596: IFTRUE 36600
36598: GO 36637
36600: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
36601: LD_VAR 0 6
36605: PPUSH
36606: LD_VAR 0 7
36610: PPUSH
36611: LD_VAR 0 8
36615: PPUSH
36616: LD_VAR 0 9
36620: PPUSH
36621: LD_VAR 0 4
36625: PPUSH
36626: LD_VAR 0 5
36630: PPUSH
36631: CALL 37884 0 6
36635: GO 36713
36637: LD_INT 303
36639: DOUBLE
36640: EQUAL
36641: IFTRUE 36645
36643: GO 36682
36645: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
36646: LD_VAR 0 6
36650: PPUSH
36651: LD_VAR 0 7
36655: PPUSH
36656: LD_VAR 0 8
36660: PPUSH
36661: LD_VAR 0 9
36665: PPUSH
36666: LD_VAR 0 4
36670: PPUSH
36671: LD_VAR 0 5
36675: PPUSH
36676: CALL 36718 0 6
36680: GO 36713
36682: LD_INT 304
36684: DOUBLE
36685: EQUAL
36686: IFTRUE 36690
36688: GO 36712
36690: POP
// hHackTeleport ( unit , x , y ) ; end ;
36691: LD_VAR 0 2
36695: PPUSH
36696: LD_VAR 0 4
36700: PPUSH
36701: LD_VAR 0 5
36705: PPUSH
36706: CALL 38477 0 3
36710: GO 36713
36712: POP
// end ;
36713: LD_VAR 0 12
36717: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
36718: LD_INT 0
36720: PPUSH
36721: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
36722: LD_VAR 0 1
36726: PUSH
36727: LD_INT 1
36729: LESS
36730: PUSH
36731: LD_VAR 0 1
36735: PUSH
36736: LD_INT 3
36738: GREATER
36739: OR
36740: PUSH
36741: LD_VAR 0 5
36745: PPUSH
36746: LD_VAR 0 6
36750: PPUSH
36751: CALL_OW 428
36755: OR
36756: IFFALSE 36760
// exit ;
36758: GO 37480
// uc_side := your_side ;
36760: LD_ADDR_OWVAR 20
36764: PUSH
36765: LD_OWVAR 2
36769: ST_TO_ADDR
// uc_nation := nation ;
36770: LD_ADDR_OWVAR 21
36774: PUSH
36775: LD_VAR 0 1
36779: ST_TO_ADDR
// bc_level = 1 ;
36780: LD_ADDR_OWVAR 43
36784: PUSH
36785: LD_INT 1
36787: ST_TO_ADDR
// case btype of 1 :
36788: LD_VAR 0 2
36792: PUSH
36793: LD_INT 1
36795: DOUBLE
36796: EQUAL
36797: IFTRUE 36801
36799: GO 36812
36801: POP
// bc_type := b_depot ; 2 :
36802: LD_ADDR_OWVAR 42
36806: PUSH
36807: LD_INT 0
36809: ST_TO_ADDR
36810: GO 37424
36812: LD_INT 2
36814: DOUBLE
36815: EQUAL
36816: IFTRUE 36820
36818: GO 36831
36820: POP
// bc_type := b_warehouse ; 3 :
36821: LD_ADDR_OWVAR 42
36825: PUSH
36826: LD_INT 1
36828: ST_TO_ADDR
36829: GO 37424
36831: LD_INT 3
36833: DOUBLE
36834: EQUAL
36835: IFTRUE 36839
36837: GO 36850
36839: POP
// bc_type := b_lab ; 4 .. 9 :
36840: LD_ADDR_OWVAR 42
36844: PUSH
36845: LD_INT 6
36847: ST_TO_ADDR
36848: GO 37424
36850: LD_INT 4
36852: DOUBLE
36853: GREATEREQUAL
36854: IFFALSE 36862
36856: LD_INT 9
36858: DOUBLE
36859: LESSEQUAL
36860: IFTRUE 36864
36862: GO 36916
36864: POP
// begin bc_type := b_lab_half ;
36865: LD_ADDR_OWVAR 42
36869: PUSH
36870: LD_INT 7
36872: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
36873: LD_ADDR_OWVAR 44
36877: PUSH
36878: LD_INT 10
36880: PUSH
36881: LD_INT 11
36883: PUSH
36884: LD_INT 12
36886: PUSH
36887: LD_INT 15
36889: PUSH
36890: LD_INT 14
36892: PUSH
36893: LD_INT 13
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: PUSH
36904: LD_VAR 0 2
36908: PUSH
36909: LD_INT 3
36911: MINUS
36912: ARRAY
36913: ST_TO_ADDR
// end ; 10 .. 13 :
36914: GO 37424
36916: LD_INT 10
36918: DOUBLE
36919: GREATEREQUAL
36920: IFFALSE 36928
36922: LD_INT 13
36924: DOUBLE
36925: LESSEQUAL
36926: IFTRUE 36930
36928: GO 37007
36930: POP
// begin bc_type := b_lab_full ;
36931: LD_ADDR_OWVAR 42
36935: PUSH
36936: LD_INT 8
36938: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
36939: LD_ADDR_OWVAR 44
36943: PUSH
36944: LD_INT 10
36946: PUSH
36947: LD_INT 12
36949: PUSH
36950: LD_INT 14
36952: PUSH
36953: LD_INT 13
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: PUSH
36962: LD_VAR 0 2
36966: PUSH
36967: LD_INT 9
36969: MINUS
36970: ARRAY
36971: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
36972: LD_ADDR_OWVAR 45
36976: PUSH
36977: LD_INT 11
36979: PUSH
36980: LD_INT 15
36982: PUSH
36983: LD_INT 12
36985: PUSH
36986: LD_INT 15
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: PUSH
36995: LD_VAR 0 2
36999: PUSH
37000: LD_INT 9
37002: MINUS
37003: ARRAY
37004: ST_TO_ADDR
// end ; 14 :
37005: GO 37424
37007: LD_INT 14
37009: DOUBLE
37010: EQUAL
37011: IFTRUE 37015
37013: GO 37026
37015: POP
// bc_type := b_workshop ; 15 :
37016: LD_ADDR_OWVAR 42
37020: PUSH
37021: LD_INT 2
37023: ST_TO_ADDR
37024: GO 37424
37026: LD_INT 15
37028: DOUBLE
37029: EQUAL
37030: IFTRUE 37034
37032: GO 37045
37034: POP
// bc_type := b_factory ; 16 :
37035: LD_ADDR_OWVAR 42
37039: PUSH
37040: LD_INT 3
37042: ST_TO_ADDR
37043: GO 37424
37045: LD_INT 16
37047: DOUBLE
37048: EQUAL
37049: IFTRUE 37053
37051: GO 37064
37053: POP
// bc_type := b_ext_gun ; 17 :
37054: LD_ADDR_OWVAR 42
37058: PUSH
37059: LD_INT 17
37061: ST_TO_ADDR
37062: GO 37424
37064: LD_INT 17
37066: DOUBLE
37067: EQUAL
37068: IFTRUE 37072
37070: GO 37100
37072: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
37073: LD_ADDR_OWVAR 42
37077: PUSH
37078: LD_INT 19
37080: PUSH
37081: LD_INT 23
37083: PUSH
37084: LD_INT 19
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: LIST
37091: PUSH
37092: LD_VAR 0 1
37096: ARRAY
37097: ST_TO_ADDR
37098: GO 37424
37100: LD_INT 18
37102: DOUBLE
37103: EQUAL
37104: IFTRUE 37108
37106: GO 37119
37108: POP
// bc_type := b_ext_radar ; 19 :
37109: LD_ADDR_OWVAR 42
37113: PUSH
37114: LD_INT 20
37116: ST_TO_ADDR
37117: GO 37424
37119: LD_INT 19
37121: DOUBLE
37122: EQUAL
37123: IFTRUE 37127
37125: GO 37138
37127: POP
// bc_type := b_ext_radio ; 20 :
37128: LD_ADDR_OWVAR 42
37132: PUSH
37133: LD_INT 22
37135: ST_TO_ADDR
37136: GO 37424
37138: LD_INT 20
37140: DOUBLE
37141: EQUAL
37142: IFTRUE 37146
37144: GO 37157
37146: POP
// bc_type := b_ext_siberium ; 21 :
37147: LD_ADDR_OWVAR 42
37151: PUSH
37152: LD_INT 21
37154: ST_TO_ADDR
37155: GO 37424
37157: LD_INT 21
37159: DOUBLE
37160: EQUAL
37161: IFTRUE 37165
37163: GO 37176
37165: POP
// bc_type := b_ext_computer ; 22 :
37166: LD_ADDR_OWVAR 42
37170: PUSH
37171: LD_INT 24
37173: ST_TO_ADDR
37174: GO 37424
37176: LD_INT 22
37178: DOUBLE
37179: EQUAL
37180: IFTRUE 37184
37182: GO 37195
37184: POP
// bc_type := b_ext_track ; 23 :
37185: LD_ADDR_OWVAR 42
37189: PUSH
37190: LD_INT 16
37192: ST_TO_ADDR
37193: GO 37424
37195: LD_INT 23
37197: DOUBLE
37198: EQUAL
37199: IFTRUE 37203
37201: GO 37214
37203: POP
// bc_type := b_ext_laser ; 24 :
37204: LD_ADDR_OWVAR 42
37208: PUSH
37209: LD_INT 25
37211: ST_TO_ADDR
37212: GO 37424
37214: LD_INT 24
37216: DOUBLE
37217: EQUAL
37218: IFTRUE 37222
37220: GO 37233
37222: POP
// bc_type := b_control_tower ; 25 :
37223: LD_ADDR_OWVAR 42
37227: PUSH
37228: LD_INT 36
37230: ST_TO_ADDR
37231: GO 37424
37233: LD_INT 25
37235: DOUBLE
37236: EQUAL
37237: IFTRUE 37241
37239: GO 37252
37241: POP
// bc_type := b_breastwork ; 26 :
37242: LD_ADDR_OWVAR 42
37246: PUSH
37247: LD_INT 31
37249: ST_TO_ADDR
37250: GO 37424
37252: LD_INT 26
37254: DOUBLE
37255: EQUAL
37256: IFTRUE 37260
37258: GO 37271
37260: POP
// bc_type := b_bunker ; 27 :
37261: LD_ADDR_OWVAR 42
37265: PUSH
37266: LD_INT 32
37268: ST_TO_ADDR
37269: GO 37424
37271: LD_INT 27
37273: DOUBLE
37274: EQUAL
37275: IFTRUE 37279
37277: GO 37290
37279: POP
// bc_type := b_turret ; 28 :
37280: LD_ADDR_OWVAR 42
37284: PUSH
37285: LD_INT 33
37287: ST_TO_ADDR
37288: GO 37424
37290: LD_INT 28
37292: DOUBLE
37293: EQUAL
37294: IFTRUE 37298
37296: GO 37309
37298: POP
// bc_type := b_armoury ; 29 :
37299: LD_ADDR_OWVAR 42
37303: PUSH
37304: LD_INT 4
37306: ST_TO_ADDR
37307: GO 37424
37309: LD_INT 29
37311: DOUBLE
37312: EQUAL
37313: IFTRUE 37317
37315: GO 37328
37317: POP
// bc_type := b_barracks ; 30 :
37318: LD_ADDR_OWVAR 42
37322: PUSH
37323: LD_INT 5
37325: ST_TO_ADDR
37326: GO 37424
37328: LD_INT 30
37330: DOUBLE
37331: EQUAL
37332: IFTRUE 37336
37334: GO 37347
37336: POP
// bc_type := b_solar_power ; 31 :
37337: LD_ADDR_OWVAR 42
37341: PUSH
37342: LD_INT 27
37344: ST_TO_ADDR
37345: GO 37424
37347: LD_INT 31
37349: DOUBLE
37350: EQUAL
37351: IFTRUE 37355
37353: GO 37366
37355: POP
// bc_type := b_oil_power ; 32 :
37356: LD_ADDR_OWVAR 42
37360: PUSH
37361: LD_INT 26
37363: ST_TO_ADDR
37364: GO 37424
37366: LD_INT 32
37368: DOUBLE
37369: EQUAL
37370: IFTRUE 37374
37372: GO 37385
37374: POP
// bc_type := b_siberite_power ; 33 :
37375: LD_ADDR_OWVAR 42
37379: PUSH
37380: LD_INT 28
37382: ST_TO_ADDR
37383: GO 37424
37385: LD_INT 33
37387: DOUBLE
37388: EQUAL
37389: IFTRUE 37393
37391: GO 37404
37393: POP
// bc_type := b_oil_mine ; 34 :
37394: LD_ADDR_OWVAR 42
37398: PUSH
37399: LD_INT 29
37401: ST_TO_ADDR
37402: GO 37424
37404: LD_INT 34
37406: DOUBLE
37407: EQUAL
37408: IFTRUE 37412
37410: GO 37423
37412: POP
// bc_type := b_siberite_mine ; end ;
37413: LD_ADDR_OWVAR 42
37417: PUSH
37418: LD_INT 30
37420: ST_TO_ADDR
37421: GO 37424
37423: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
37424: LD_ADDR_VAR 0 8
37428: PUSH
37429: LD_VAR 0 5
37433: PPUSH
37434: LD_VAR 0 6
37438: PPUSH
37439: LD_VAR 0 3
37443: PPUSH
37444: CALL_OW 47
37448: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
37449: LD_OWVAR 42
37453: PUSH
37454: LD_INT 32
37456: PUSH
37457: LD_INT 33
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: IN
37464: IFFALSE 37480
// PlaceWeaponTurret ( b , weapon ) ;
37466: LD_VAR 0 8
37470: PPUSH
37471: LD_VAR 0 4
37475: PPUSH
37476: CALL_OW 431
// end ;
37480: LD_VAR 0 7
37484: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
37485: LD_INT 0
37487: PPUSH
37488: PPUSH
37489: PPUSH
37490: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37491: LD_ADDR_VAR 0 4
37495: PUSH
37496: LD_INT 22
37498: PUSH
37499: LD_OWVAR 2
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 2
37510: PUSH
37511: LD_INT 30
37513: PUSH
37514: LD_INT 0
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 30
37523: PUSH
37524: LD_INT 1
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: LIST
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PPUSH
37540: CALL_OW 69
37544: ST_TO_ADDR
// if not tmp then
37545: LD_VAR 0 4
37549: NOT
37550: IFFALSE 37554
// exit ;
37552: GO 37613
// for i in tmp do
37554: LD_ADDR_VAR 0 2
37558: PUSH
37559: LD_VAR 0 4
37563: PUSH
37564: FOR_IN
37565: IFFALSE 37611
// for j = 1 to 3 do
37567: LD_ADDR_VAR 0 3
37571: PUSH
37572: DOUBLE
37573: LD_INT 1
37575: DEC
37576: ST_TO_ADDR
37577: LD_INT 3
37579: PUSH
37580: FOR_TO
37581: IFFALSE 37607
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
37583: LD_VAR 0 2
37587: PPUSH
37588: CALL_OW 274
37592: PPUSH
37593: LD_VAR 0 3
37597: PPUSH
37598: LD_INT 99999
37600: PPUSH
37601: CALL_OW 277
37605: GO 37580
37607: POP
37608: POP
37609: GO 37564
37611: POP
37612: POP
// end ;
37613: LD_VAR 0 1
37617: RET
// export function hHackSetLevel10 ; var i , j ; begin
37618: LD_INT 0
37620: PPUSH
37621: PPUSH
37622: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
37623: LD_ADDR_VAR 0 2
37627: PUSH
37628: LD_INT 21
37630: PUSH
37631: LD_INT 1
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PPUSH
37638: CALL_OW 69
37642: PUSH
37643: FOR_IN
37644: IFFALSE 37696
// if IsSelected ( i ) then
37646: LD_VAR 0 2
37650: PPUSH
37651: CALL_OW 306
37655: IFFALSE 37694
// begin for j := 1 to 4 do
37657: LD_ADDR_VAR 0 3
37661: PUSH
37662: DOUBLE
37663: LD_INT 1
37665: DEC
37666: ST_TO_ADDR
37667: LD_INT 4
37669: PUSH
37670: FOR_TO
37671: IFFALSE 37692
// SetSkill ( i , j , 10 ) ;
37673: LD_VAR 0 2
37677: PPUSH
37678: LD_VAR 0 3
37682: PPUSH
37683: LD_INT 10
37685: PPUSH
37686: CALL_OW 237
37690: GO 37670
37692: POP
37693: POP
// end ;
37694: GO 37643
37696: POP
37697: POP
// end ;
37698: LD_VAR 0 1
37702: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
37703: LD_INT 0
37705: PPUSH
37706: PPUSH
37707: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
37708: LD_ADDR_VAR 0 2
37712: PUSH
37713: LD_INT 22
37715: PUSH
37716: LD_OWVAR 2
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 21
37727: PUSH
37728: LD_INT 1
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PPUSH
37739: CALL_OW 69
37743: PUSH
37744: FOR_IN
37745: IFFALSE 37786
// begin for j := 1 to 4 do
37747: LD_ADDR_VAR 0 3
37751: PUSH
37752: DOUBLE
37753: LD_INT 1
37755: DEC
37756: ST_TO_ADDR
37757: LD_INT 4
37759: PUSH
37760: FOR_TO
37761: IFFALSE 37782
// SetSkill ( i , j , 10 ) ;
37763: LD_VAR 0 2
37767: PPUSH
37768: LD_VAR 0 3
37772: PPUSH
37773: LD_INT 10
37775: PPUSH
37776: CALL_OW 237
37780: GO 37760
37782: POP
37783: POP
// end ;
37784: GO 37744
37786: POP
37787: POP
// end ;
37788: LD_VAR 0 1
37792: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
37793: LD_INT 0
37795: PPUSH
// uc_side := your_side ;
37796: LD_ADDR_OWVAR 20
37800: PUSH
37801: LD_OWVAR 2
37805: ST_TO_ADDR
// uc_nation := nation ;
37806: LD_ADDR_OWVAR 21
37810: PUSH
37811: LD_VAR 0 1
37815: ST_TO_ADDR
// InitHc ;
37816: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
37820: LD_INT 0
37822: PPUSH
37823: LD_VAR 0 2
37827: PPUSH
37828: LD_VAR 0 3
37832: PPUSH
37833: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
37837: LD_VAR 0 4
37841: PPUSH
37842: LD_VAR 0 5
37846: PPUSH
37847: CALL_OW 428
37851: PUSH
37852: LD_INT 0
37854: EQUAL
37855: IFFALSE 37879
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
37857: CALL_OW 44
37861: PPUSH
37862: LD_VAR 0 4
37866: PPUSH
37867: LD_VAR 0 5
37871: PPUSH
37872: LD_INT 1
37874: PPUSH
37875: CALL_OW 48
// end ;
37879: LD_VAR 0 6
37883: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
37884: LD_INT 0
37886: PPUSH
37887: PPUSH
// uc_side := your_side ;
37888: LD_ADDR_OWVAR 20
37892: PUSH
37893: LD_OWVAR 2
37897: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
37898: LD_VAR 0 1
37902: PUSH
37903: LD_INT 1
37905: PUSH
37906: LD_INT 2
37908: PUSH
37909: LD_INT 3
37911: PUSH
37912: LD_INT 4
37914: PUSH
37915: LD_INT 5
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: IN
37925: IFFALSE 37937
// uc_nation := nation_american else
37927: LD_ADDR_OWVAR 21
37931: PUSH
37932: LD_INT 1
37934: ST_TO_ADDR
37935: GO 37980
// if chassis in [ 11 , 12 , 13 , 14 ] then
37937: LD_VAR 0 1
37941: PUSH
37942: LD_INT 11
37944: PUSH
37945: LD_INT 12
37947: PUSH
37948: LD_INT 13
37950: PUSH
37951: LD_INT 14
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: IN
37960: IFFALSE 37972
// uc_nation := nation_arabian else
37962: LD_ADDR_OWVAR 21
37966: PUSH
37967: LD_INT 2
37969: ST_TO_ADDR
37970: GO 37980
// uc_nation := nation_russian ;
37972: LD_ADDR_OWVAR 21
37976: PUSH
37977: LD_INT 3
37979: ST_TO_ADDR
// vc_chassis := chassis ;
37980: LD_ADDR_OWVAR 37
37984: PUSH
37985: LD_VAR 0 1
37989: ST_TO_ADDR
// vc_engine := engine ;
37990: LD_ADDR_OWVAR 39
37994: PUSH
37995: LD_VAR 0 2
37999: ST_TO_ADDR
// vc_control := control ;
38000: LD_ADDR_OWVAR 38
38004: PUSH
38005: LD_VAR 0 3
38009: ST_TO_ADDR
// vc_weapon := weapon ;
38010: LD_ADDR_OWVAR 40
38014: PUSH
38015: LD_VAR 0 4
38019: ST_TO_ADDR
// un := CreateVehicle ;
38020: LD_ADDR_VAR 0 8
38024: PUSH
38025: CALL_OW 45
38029: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
38030: LD_VAR 0 8
38034: PPUSH
38035: LD_INT 0
38037: PPUSH
38038: LD_INT 5
38040: PPUSH
38041: CALL_OW 12
38045: PPUSH
38046: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
38050: LD_VAR 0 8
38054: PPUSH
38055: LD_VAR 0 5
38059: PPUSH
38060: LD_VAR 0 6
38064: PPUSH
38065: LD_INT 1
38067: PPUSH
38068: CALL_OW 48
// end ;
38072: LD_VAR 0 7
38076: RET
// export hInvincible ; every 1 do
38077: GO 38079
38079: DISABLE
// hInvincible := [ ] ;
38080: LD_ADDR_EXP 123
38084: PUSH
38085: EMPTY
38086: ST_TO_ADDR
38087: END
// every 10 do var i ;
38088: GO 38090
38090: DISABLE
38091: LD_INT 0
38093: PPUSH
// begin enable ;
38094: ENABLE
// if not hInvincible then
38095: LD_EXP 123
38099: NOT
38100: IFFALSE 38104
// exit ;
38102: GO 38148
// for i in hInvincible do
38104: LD_ADDR_VAR 0 1
38108: PUSH
38109: LD_EXP 123
38113: PUSH
38114: FOR_IN
38115: IFFALSE 38146
// if GetLives ( i ) < 1000 then
38117: LD_VAR 0 1
38121: PPUSH
38122: CALL_OW 256
38126: PUSH
38127: LD_INT 1000
38129: LESS
38130: IFFALSE 38144
// SetLives ( i , 1000 ) ;
38132: LD_VAR 0 1
38136: PPUSH
38137: LD_INT 1000
38139: PPUSH
38140: CALL_OW 234
38144: GO 38114
38146: POP
38147: POP
// end ;
38148: PPOPN 1
38150: END
// export function hHackInvincible ; var i ; begin
38151: LD_INT 0
38153: PPUSH
38154: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
38155: LD_ADDR_VAR 0 2
38159: PUSH
38160: LD_INT 2
38162: PUSH
38163: LD_INT 21
38165: PUSH
38166: LD_INT 1
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 21
38175: PUSH
38176: LD_INT 2
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: LIST
38187: PPUSH
38188: CALL_OW 69
38192: PUSH
38193: FOR_IN
38194: IFFALSE 38255
// if IsSelected ( i ) then
38196: LD_VAR 0 2
38200: PPUSH
38201: CALL_OW 306
38205: IFFALSE 38253
// begin if i in hInvincible then
38207: LD_VAR 0 2
38211: PUSH
38212: LD_EXP 123
38216: IN
38217: IFFALSE 38237
// hInvincible := hInvincible diff i else
38219: LD_ADDR_EXP 123
38223: PUSH
38224: LD_EXP 123
38228: PUSH
38229: LD_VAR 0 2
38233: DIFF
38234: ST_TO_ADDR
38235: GO 38253
// hInvincible := hInvincible union i ;
38237: LD_ADDR_EXP 123
38241: PUSH
38242: LD_EXP 123
38246: PUSH
38247: LD_VAR 0 2
38251: UNION
38252: ST_TO_ADDR
// end ;
38253: GO 38193
38255: POP
38256: POP
// end ;
38257: LD_VAR 0 1
38261: RET
// export function hHackInvisible ; var i , j ; begin
38262: LD_INT 0
38264: PPUSH
38265: PPUSH
38266: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
38267: LD_ADDR_VAR 0 2
38271: PUSH
38272: LD_INT 21
38274: PUSH
38275: LD_INT 1
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PPUSH
38282: CALL_OW 69
38286: PUSH
38287: FOR_IN
38288: IFFALSE 38312
// if IsSelected ( i ) then
38290: LD_VAR 0 2
38294: PPUSH
38295: CALL_OW 306
38299: IFFALSE 38310
// ComForceInvisible ( i ) ;
38301: LD_VAR 0 2
38305: PPUSH
38306: CALL_OW 496
38310: GO 38287
38312: POP
38313: POP
// end ;
38314: LD_VAR 0 1
38318: RET
// export function hHackChangeYourSide ; begin
38319: LD_INT 0
38321: PPUSH
// if your_side = 8 then
38322: LD_OWVAR 2
38326: PUSH
38327: LD_INT 8
38329: EQUAL
38330: IFFALSE 38342
// your_side := 0 else
38332: LD_ADDR_OWVAR 2
38336: PUSH
38337: LD_INT 0
38339: ST_TO_ADDR
38340: GO 38356
// your_side := your_side + 1 ;
38342: LD_ADDR_OWVAR 2
38346: PUSH
38347: LD_OWVAR 2
38351: PUSH
38352: LD_INT 1
38354: PLUS
38355: ST_TO_ADDR
// end ;
38356: LD_VAR 0 1
38360: RET
// export function hHackChangeUnitSide ; var i , j ; begin
38361: LD_INT 0
38363: PPUSH
38364: PPUSH
38365: PPUSH
// for i in all_units do
38366: LD_ADDR_VAR 0 2
38370: PUSH
38371: LD_OWVAR 3
38375: PUSH
38376: FOR_IN
38377: IFFALSE 38455
// if IsSelected ( i ) then
38379: LD_VAR 0 2
38383: PPUSH
38384: CALL_OW 306
38388: IFFALSE 38453
// begin j := GetSide ( i ) ;
38390: LD_ADDR_VAR 0 3
38394: PUSH
38395: LD_VAR 0 2
38399: PPUSH
38400: CALL_OW 255
38404: ST_TO_ADDR
// if j = 8 then
38405: LD_VAR 0 3
38409: PUSH
38410: LD_INT 8
38412: EQUAL
38413: IFFALSE 38425
// j := 0 else
38415: LD_ADDR_VAR 0 3
38419: PUSH
38420: LD_INT 0
38422: ST_TO_ADDR
38423: GO 38439
// j := j + 1 ;
38425: LD_ADDR_VAR 0 3
38429: PUSH
38430: LD_VAR 0 3
38434: PUSH
38435: LD_INT 1
38437: PLUS
38438: ST_TO_ADDR
// SetSide ( i , j ) ;
38439: LD_VAR 0 2
38443: PPUSH
38444: LD_VAR 0 3
38448: PPUSH
38449: CALL_OW 235
// end ;
38453: GO 38376
38455: POP
38456: POP
// end ;
38457: LD_VAR 0 1
38461: RET
// export function hHackFog ; begin
38462: LD_INT 0
38464: PPUSH
// FogOff ( true ) ;
38465: LD_INT 1
38467: PPUSH
38468: CALL_OW 344
// end ;
38472: LD_VAR 0 1
38476: RET
// export function hHackTeleport ( unit , x , y ) ; begin
38477: LD_INT 0
38479: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
38480: LD_VAR 0 1
38484: PPUSH
38485: LD_VAR 0 2
38489: PPUSH
38490: LD_VAR 0 3
38494: PPUSH
38495: LD_INT 1
38497: PPUSH
38498: LD_INT 1
38500: PPUSH
38501: CALL_OW 483
// CenterOnXY ( x , y ) ;
38505: LD_VAR 0 2
38509: PPUSH
38510: LD_VAR 0 3
38514: PPUSH
38515: CALL_OW 84
// end ;
38519: LD_VAR 0 4
38523: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
38524: LD_INT 0
38526: PPUSH
38527: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
38528: LD_VAR 0 1
38532: NOT
38533: PUSH
38534: LD_VAR 0 2
38538: PPUSH
38539: LD_VAR 0 3
38543: PPUSH
38544: CALL_OW 488
38548: NOT
38549: OR
38550: PUSH
38551: LD_VAR 0 1
38555: PPUSH
38556: CALL_OW 266
38560: PUSH
38561: LD_INT 3
38563: NONEQUAL
38564: PUSH
38565: LD_VAR 0 1
38569: PPUSH
38570: CALL_OW 247
38574: PUSH
38575: LD_INT 1
38577: EQUAL
38578: NOT
38579: AND
38580: OR
38581: IFFALSE 38585
// exit ;
38583: GO 38734
// if GetType ( factory ) = unit_human then
38585: LD_VAR 0 1
38589: PPUSH
38590: CALL_OW 247
38594: PUSH
38595: LD_INT 1
38597: EQUAL
38598: IFFALSE 38615
// factory := IsInUnit ( factory ) ;
38600: LD_ADDR_VAR 0 1
38604: PUSH
38605: LD_VAR 0 1
38609: PPUSH
38610: CALL_OW 310
38614: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
38615: LD_VAR 0 1
38619: PPUSH
38620: CALL_OW 266
38624: PUSH
38625: LD_INT 3
38627: NONEQUAL
38628: IFFALSE 38632
// exit ;
38630: GO 38734
// if HexInfo ( x , y ) = factory then
38632: LD_VAR 0 2
38636: PPUSH
38637: LD_VAR 0 3
38641: PPUSH
38642: CALL_OW 428
38646: PUSH
38647: LD_VAR 0 1
38651: EQUAL
38652: IFFALSE 38679
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
38654: LD_ADDR_EXP 124
38658: PUSH
38659: LD_EXP 124
38663: PPUSH
38664: LD_VAR 0 1
38668: PPUSH
38669: LD_INT 0
38671: PPUSH
38672: CALL_OW 1
38676: ST_TO_ADDR
38677: GO 38730
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
38679: LD_ADDR_EXP 124
38683: PUSH
38684: LD_EXP 124
38688: PPUSH
38689: LD_VAR 0 1
38693: PPUSH
38694: LD_VAR 0 1
38698: PPUSH
38699: CALL_OW 255
38703: PUSH
38704: LD_VAR 0 1
38708: PUSH
38709: LD_VAR 0 2
38713: PUSH
38714: LD_VAR 0 3
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: PPUSH
38725: CALL_OW 1
38729: ST_TO_ADDR
// UpdateFactoryWaypoints ;
38730: CALL 38739 0 0
// end ;
38734: LD_VAR 0 4
38738: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
38739: LD_INT 0
38741: PPUSH
38742: PPUSH
38743: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
38744: LD_STRING resetFactoryWaypoint();
38746: PPUSH
38747: CALL_OW 559
// if factoryWaypoints then
38751: LD_EXP 124
38755: IFFALSE 38881
// begin list := PrepareArray ( factoryWaypoints ) ;
38757: LD_ADDR_VAR 0 3
38761: PUSH
38762: LD_EXP 124
38766: PPUSH
38767: NOP4
38771: ST_TO_ADDR
// for i := 1 to list do
38772: LD_ADDR_VAR 0 2
38776: PUSH
38777: DOUBLE
38778: LD_INT 1
38780: DEC
38781: ST_TO_ADDR
38782: LD_VAR 0 3
38786: PUSH
38787: FOR_TO
38788: IFFALSE 38879
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
38790: LD_STRING setFactoryWaypointXY(
38792: PUSH
38793: LD_VAR 0 3
38797: PUSH
38798: LD_VAR 0 2
38802: ARRAY
38803: PUSH
38804: LD_INT 1
38806: ARRAY
38807: STR
38808: PUSH
38809: LD_STRING ,
38811: STR
38812: PUSH
38813: LD_VAR 0 3
38817: PUSH
38818: LD_VAR 0 2
38822: ARRAY
38823: PUSH
38824: LD_INT 2
38826: ARRAY
38827: STR
38828: PUSH
38829: LD_STRING ,
38831: STR
38832: PUSH
38833: LD_VAR 0 3
38837: PUSH
38838: LD_VAR 0 2
38842: ARRAY
38843: PUSH
38844: LD_INT 3
38846: ARRAY
38847: STR
38848: PUSH
38849: LD_STRING ,
38851: STR
38852: PUSH
38853: LD_VAR 0 3
38857: PUSH
38858: LD_VAR 0 2
38862: ARRAY
38863: PUSH
38864: LD_INT 4
38866: ARRAY
38867: STR
38868: PUSH
38869: LD_STRING )
38871: STR
38872: PPUSH
38873: CALL_OW 559
38877: GO 38787
38879: POP
38880: POP
// end ; end ;
38881: LD_VAR 0 1
38885: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
38886: LD_INT 0
38888: PPUSH
// if HexInfo ( x , y ) = warehouse then
38889: LD_VAR 0 2
38893: PPUSH
38894: LD_VAR 0 3
38898: PPUSH
38899: CALL_OW 428
38903: PUSH
38904: LD_VAR 0 1
38908: EQUAL
38909: IFFALSE 38936
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
38911: LD_ADDR_EXP 125
38915: PUSH
38916: LD_EXP 125
38920: PPUSH
38921: LD_VAR 0 1
38925: PPUSH
38926: LD_INT 0
38928: PPUSH
38929: CALL_OW 1
38933: ST_TO_ADDR
38934: GO 38987
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
38936: LD_ADDR_EXP 125
38940: PUSH
38941: LD_EXP 125
38945: PPUSH
38946: LD_VAR 0 1
38950: PPUSH
38951: LD_VAR 0 1
38955: PPUSH
38956: CALL_OW 255
38960: PUSH
38961: LD_VAR 0 1
38965: PUSH
38966: LD_VAR 0 2
38970: PUSH
38971: LD_VAR 0 3
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: PPUSH
38982: CALL_OW 1
38986: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
38987: CALL 38996 0 0
// end ;
38991: LD_VAR 0 4
38995: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
38996: LD_INT 0
38998: PPUSH
38999: PPUSH
39000: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
39001: LD_STRING resetWarehouseGatheringPoints();
39003: PPUSH
39004: CALL_OW 559
// if warehouseGatheringPoints then
39008: LD_EXP 125
39012: IFFALSE 39138
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
39014: LD_ADDR_VAR 0 3
39018: PUSH
39019: LD_EXP 125
39023: PPUSH
39024: NOP4
39028: ST_TO_ADDR
// for i := 1 to list do
39029: LD_ADDR_VAR 0 2
39033: PUSH
39034: DOUBLE
39035: LD_INT 1
39037: DEC
39038: ST_TO_ADDR
39039: LD_VAR 0 3
39043: PUSH
39044: FOR_TO
39045: IFFALSE 39136
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
39047: LD_STRING setWarehouseGatheringPointXY(
39049: PUSH
39050: LD_VAR 0 3
39054: PUSH
39055: LD_VAR 0 2
39059: ARRAY
39060: PUSH
39061: LD_INT 1
39063: ARRAY
39064: STR
39065: PUSH
39066: LD_STRING ,
39068: STR
39069: PUSH
39070: LD_VAR 0 3
39074: PUSH
39075: LD_VAR 0 2
39079: ARRAY
39080: PUSH
39081: LD_INT 2
39083: ARRAY
39084: STR
39085: PUSH
39086: LD_STRING ,
39088: STR
39089: PUSH
39090: LD_VAR 0 3
39094: PUSH
39095: LD_VAR 0 2
39099: ARRAY
39100: PUSH
39101: LD_INT 3
39103: ARRAY
39104: STR
39105: PUSH
39106: LD_STRING ,
39108: STR
39109: PUSH
39110: LD_VAR 0 3
39114: PUSH
39115: LD_VAR 0 2
39119: ARRAY
39120: PUSH
39121: LD_INT 4
39123: ARRAY
39124: STR
39125: PUSH
39126: LD_STRING )
39128: STR
39129: PPUSH
39130: CALL_OW 559
39134: GO 39044
39136: POP
39137: POP
// end ; end ;
39138: LD_VAR 0 1
39142: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
39143: LD_EXP 125
39147: IFFALSE 39832
39149: GO 39151
39151: DISABLE
39152: LD_INT 0
39154: PPUSH
39155: PPUSH
39156: PPUSH
39157: PPUSH
39158: PPUSH
39159: PPUSH
39160: PPUSH
39161: PPUSH
39162: PPUSH
// begin enable ;
39163: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
39164: LD_ADDR_VAR 0 3
39168: PUSH
39169: LD_EXP 125
39173: PPUSH
39174: NOP4
39178: ST_TO_ADDR
// if not list then
39179: LD_VAR 0 3
39183: NOT
39184: IFFALSE 39188
// exit ;
39186: GO 39832
// for i := 1 to list do
39188: LD_ADDR_VAR 0 1
39192: PUSH
39193: DOUBLE
39194: LD_INT 1
39196: DEC
39197: ST_TO_ADDR
39198: LD_VAR 0 3
39202: PUSH
39203: FOR_TO
39204: IFFALSE 39830
// begin depot := list [ i ] [ 2 ] ;
39206: LD_ADDR_VAR 0 8
39210: PUSH
39211: LD_VAR 0 3
39215: PUSH
39216: LD_VAR 0 1
39220: ARRAY
39221: PUSH
39222: LD_INT 2
39224: ARRAY
39225: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
39226: LD_ADDR_VAR 0 5
39230: PUSH
39231: LD_VAR 0 3
39235: PUSH
39236: LD_VAR 0 1
39240: ARRAY
39241: PUSH
39242: LD_INT 1
39244: ARRAY
39245: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
39246: LD_VAR 0 8
39250: PPUSH
39251: CALL_OW 301
39255: PUSH
39256: LD_VAR 0 5
39260: PUSH
39261: LD_VAR 0 8
39265: PPUSH
39266: CALL_OW 255
39270: NONEQUAL
39271: OR
39272: IFFALSE 39301
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
39274: LD_ADDR_EXP 125
39278: PUSH
39279: LD_EXP 125
39283: PPUSH
39284: LD_VAR 0 8
39288: PPUSH
39289: LD_INT 0
39291: PPUSH
39292: CALL_OW 1
39296: ST_TO_ADDR
// exit ;
39297: POP
39298: POP
39299: GO 39832
// end ; x := list [ i ] [ 3 ] ;
39301: LD_ADDR_VAR 0 6
39305: PUSH
39306: LD_VAR 0 3
39310: PUSH
39311: LD_VAR 0 1
39315: ARRAY
39316: PUSH
39317: LD_INT 3
39319: ARRAY
39320: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
39321: LD_ADDR_VAR 0 7
39325: PUSH
39326: LD_VAR 0 3
39330: PUSH
39331: LD_VAR 0 1
39335: ARRAY
39336: PUSH
39337: LD_INT 4
39339: ARRAY
39340: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
39341: LD_ADDR_VAR 0 9
39345: PUSH
39346: LD_VAR 0 6
39350: PPUSH
39351: LD_VAR 0 7
39355: PPUSH
39356: LD_INT 16
39358: PPUSH
39359: CALL 83938 0 3
39363: ST_TO_ADDR
// if not cratesNearbyPoint then
39364: LD_VAR 0 9
39368: NOT
39369: IFFALSE 39375
// exit ;
39371: POP
39372: POP
39373: GO 39832
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
39375: LD_ADDR_VAR 0 4
39379: PUSH
39380: LD_INT 22
39382: PUSH
39383: LD_VAR 0 5
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 3
39394: PUSH
39395: LD_INT 60
39397: PUSH
39398: EMPTY
39399: LIST
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 91
39407: PUSH
39408: LD_VAR 0 8
39412: PUSH
39413: LD_INT 6
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 2
39423: PUSH
39424: LD_INT 25
39426: PUSH
39427: LD_INT 2
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 25
39436: PUSH
39437: LD_INT 16
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: LIST
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: PPUSH
39455: CALL_OW 69
39459: PUSH
39460: LD_VAR 0 8
39464: PPUSH
39465: CALL_OW 313
39469: PPUSH
39470: LD_INT 3
39472: PUSH
39473: LD_INT 60
39475: PUSH
39476: EMPTY
39477: LIST
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 2
39485: PUSH
39486: LD_INT 25
39488: PUSH
39489: LD_INT 2
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 25
39498: PUSH
39499: LD_INT 16
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: LIST
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PPUSH
39515: CALL_OW 72
39519: UNION
39520: ST_TO_ADDR
// if tmp then
39521: LD_VAR 0 4
39525: IFFALSE 39605
// begin tmp := ShrinkArray ( tmp , 3 ) ;
39527: LD_ADDR_VAR 0 4
39531: PUSH
39532: LD_VAR 0 4
39536: PPUSH
39537: LD_INT 3
39539: PPUSH
39540: CALL 81907 0 2
39544: ST_TO_ADDR
// for j in tmp do
39545: LD_ADDR_VAR 0 2
39549: PUSH
39550: LD_VAR 0 4
39554: PUSH
39555: FOR_IN
39556: IFFALSE 39599
// begin if IsInUnit ( j ) then
39558: LD_VAR 0 2
39562: PPUSH
39563: CALL_OW 310
39567: IFFALSE 39578
// ComExit ( j ) ;
39569: LD_VAR 0 2
39573: PPUSH
39574: CALL 81990 0 1
// AddComCollect ( j , x , y ) ;
39578: LD_VAR 0 2
39582: PPUSH
39583: LD_VAR 0 6
39587: PPUSH
39588: LD_VAR 0 7
39592: PPUSH
39593: CALL_OW 177
// end ;
39597: GO 39555
39599: POP
39600: POP
// exit ;
39601: POP
39602: POP
39603: GO 39832
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
39605: LD_ADDR_VAR 0 4
39609: PUSH
39610: LD_INT 22
39612: PUSH
39613: LD_VAR 0 5
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 91
39624: PUSH
39625: LD_VAR 0 8
39629: PUSH
39630: LD_INT 8
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 2
39640: PUSH
39641: LD_INT 34
39643: PUSH
39644: LD_INT 12
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 34
39653: PUSH
39654: LD_INT 51
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 34
39663: PUSH
39664: LD_INT 32
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 34
39673: PUSH
39674: LD_INT 89
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: LIST
39692: PPUSH
39693: CALL_OW 69
39697: ST_TO_ADDR
// if tmp then
39698: LD_VAR 0 4
39702: IFFALSE 39828
// begin for j in tmp do
39704: LD_ADDR_VAR 0 2
39708: PUSH
39709: LD_VAR 0 4
39713: PUSH
39714: FOR_IN
39715: IFFALSE 39826
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
39717: LD_VAR 0 2
39721: PPUSH
39722: CALL_OW 262
39726: PUSH
39727: LD_INT 3
39729: EQUAL
39730: PUSH
39731: LD_VAR 0 2
39735: PPUSH
39736: CALL_OW 261
39740: PUSH
39741: LD_INT 20
39743: GREATER
39744: OR
39745: PUSH
39746: LD_VAR 0 2
39750: PPUSH
39751: CALL_OW 314
39755: NOT
39756: AND
39757: PUSH
39758: LD_VAR 0 2
39762: PPUSH
39763: CALL_OW 263
39767: PUSH
39768: LD_INT 1
39770: NONEQUAL
39771: PUSH
39772: LD_VAR 0 2
39776: PPUSH
39777: CALL_OW 311
39781: OR
39782: AND
39783: IFFALSE 39824
// begin ComCollect ( j , x , y ) ;
39785: LD_VAR 0 2
39789: PPUSH
39790: LD_VAR 0 6
39794: PPUSH
39795: LD_VAR 0 7
39799: PPUSH
39800: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
39804: LD_VAR 0 2
39808: PPUSH
39809: LD_VAR 0 8
39813: PPUSH
39814: CALL_OW 172
// exit ;
39818: POP
39819: POP
39820: POP
39821: POP
39822: GO 39832
// end ;
39824: GO 39714
39826: POP
39827: POP
// end ; end ;
39828: GO 39203
39830: POP
39831: POP
// end ; end_of_file
39832: PPOPN 9
39834: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
39835: LD_INT 0
39837: PPUSH
39838: PPUSH
39839: PPUSH
39840: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
39841: LD_VAR 0 1
39845: PPUSH
39846: CALL_OW 264
39850: PUSH
39851: LD_INT 91
39853: EQUAL
39854: IFFALSE 39926
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
39856: LD_INT 68
39858: PPUSH
39859: LD_VAR 0 1
39863: PPUSH
39864: CALL_OW 255
39868: PPUSH
39869: CALL_OW 321
39873: PUSH
39874: LD_INT 2
39876: EQUAL
39877: IFFALSE 39889
// eff := 70 else
39879: LD_ADDR_VAR 0 4
39883: PUSH
39884: LD_INT 70
39886: ST_TO_ADDR
39887: GO 39897
// eff := 30 ;
39889: LD_ADDR_VAR 0 4
39893: PUSH
39894: LD_INT 30
39896: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
39897: LD_VAR 0 1
39901: PPUSH
39902: CALL_OW 250
39906: PPUSH
39907: LD_VAR 0 1
39911: PPUSH
39912: CALL_OW 251
39916: PPUSH
39917: LD_VAR 0 4
39921: PPUSH
39922: CALL_OW 495
// end ; end ;
39926: LD_VAR 0 2
39930: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
39931: LD_INT 0
39933: PPUSH
// end ;
39934: LD_VAR 0 4
39938: RET
// export function SOS_Command ( cmd ) ; begin
39939: LD_INT 0
39941: PPUSH
// end ;
39942: LD_VAR 0 2
39946: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
39947: LD_INT 0
39949: PPUSH
// end ;
39950: LD_VAR 0 6
39954: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
39955: LD_INT 0
39957: PPUSH
39958: PPUSH
// if not vehicle or not factory then
39959: LD_VAR 0 1
39963: NOT
39964: PUSH
39965: LD_VAR 0 2
39969: NOT
39970: OR
39971: IFFALSE 39975
// exit ;
39973: GO 40206
// if factoryWaypoints >= factory then
39975: LD_EXP 124
39979: PUSH
39980: LD_VAR 0 2
39984: GREATEREQUAL
39985: IFFALSE 40206
// if factoryWaypoints [ factory ] then
39987: LD_EXP 124
39991: PUSH
39992: LD_VAR 0 2
39996: ARRAY
39997: IFFALSE 40206
// begin if GetControl ( vehicle ) = control_manual then
39999: LD_VAR 0 1
40003: PPUSH
40004: CALL_OW 263
40008: PUSH
40009: LD_INT 1
40011: EQUAL
40012: IFFALSE 40093
// begin driver := IsDrivenBy ( vehicle ) ;
40014: LD_ADDR_VAR 0 4
40018: PUSH
40019: LD_VAR 0 1
40023: PPUSH
40024: CALL_OW 311
40028: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
40029: LD_VAR 0 4
40033: PPUSH
40034: LD_EXP 124
40038: PUSH
40039: LD_VAR 0 2
40043: ARRAY
40044: PUSH
40045: LD_INT 3
40047: ARRAY
40048: PPUSH
40049: LD_EXP 124
40053: PUSH
40054: LD_VAR 0 2
40058: ARRAY
40059: PUSH
40060: LD_INT 4
40062: ARRAY
40063: PPUSH
40064: CALL_OW 171
// AddComExitVehicle ( driver ) ;
40068: LD_VAR 0 4
40072: PPUSH
40073: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
40077: LD_VAR 0 4
40081: PPUSH
40082: LD_VAR 0 2
40086: PPUSH
40087: CALL_OW 180
// end else
40091: GO 40206
// if GetControl ( vehicle ) = control_remote then
40093: LD_VAR 0 1
40097: PPUSH
40098: CALL_OW 263
40102: PUSH
40103: LD_INT 2
40105: EQUAL
40106: IFFALSE 40167
// begin wait ( 0 0$2 ) ;
40108: LD_INT 70
40110: PPUSH
40111: CALL_OW 67
// if Connect ( vehicle ) then
40115: LD_VAR 0 1
40119: PPUSH
40120: CALL 52230 0 1
40124: IFFALSE 40165
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
40126: LD_VAR 0 1
40130: PPUSH
40131: LD_EXP 124
40135: PUSH
40136: LD_VAR 0 2
40140: ARRAY
40141: PUSH
40142: LD_INT 3
40144: ARRAY
40145: PPUSH
40146: LD_EXP 124
40150: PUSH
40151: LD_VAR 0 2
40155: ARRAY
40156: PUSH
40157: LD_INT 4
40159: ARRAY
40160: PPUSH
40161: CALL_OW 171
// end else
40165: GO 40206
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
40167: LD_VAR 0 1
40171: PPUSH
40172: LD_EXP 124
40176: PUSH
40177: LD_VAR 0 2
40181: ARRAY
40182: PUSH
40183: LD_INT 3
40185: ARRAY
40186: PPUSH
40187: LD_EXP 124
40191: PUSH
40192: LD_VAR 0 2
40196: ARRAY
40197: PUSH
40198: LD_INT 4
40200: ARRAY
40201: PPUSH
40202: CALL_OW 171
// end ; end ;
40206: LD_VAR 0 3
40210: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
40211: LD_INT 0
40213: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
40214: LD_VAR 0 1
40218: PUSH
40219: LD_INT 250
40221: EQUAL
40222: PUSH
40223: LD_VAR 0 2
40227: PPUSH
40228: CALL_OW 264
40232: PUSH
40233: LD_INT 81
40235: EQUAL
40236: AND
40237: IFFALSE 40258
// MinerPlaceMine ( unit , x , y ) ;
40239: LD_VAR 0 2
40243: PPUSH
40244: LD_VAR 0 4
40248: PPUSH
40249: LD_VAR 0 5
40253: PPUSH
40254: CALL 42643 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
40258: LD_VAR 0 1
40262: PUSH
40263: LD_INT 251
40265: EQUAL
40266: PUSH
40267: LD_VAR 0 2
40271: PPUSH
40272: CALL_OW 264
40276: PUSH
40277: LD_INT 81
40279: EQUAL
40280: AND
40281: IFFALSE 40302
// MinerDetonateMine ( unit , x , y ) ;
40283: LD_VAR 0 2
40287: PPUSH
40288: LD_VAR 0 4
40292: PPUSH
40293: LD_VAR 0 5
40297: PPUSH
40298: CALL 42918 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
40302: LD_VAR 0 1
40306: PUSH
40307: LD_INT 252
40309: EQUAL
40310: PUSH
40311: LD_VAR 0 2
40315: PPUSH
40316: CALL_OW 264
40320: PUSH
40321: LD_INT 81
40323: EQUAL
40324: AND
40325: IFFALSE 40346
// MinerCreateMinefield ( unit , x , y ) ;
40327: LD_VAR 0 2
40331: PPUSH
40332: LD_VAR 0 4
40336: PPUSH
40337: LD_VAR 0 5
40341: PPUSH
40342: CALL 43335 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
40346: LD_VAR 0 1
40350: PUSH
40351: LD_INT 253
40353: EQUAL
40354: PUSH
40355: LD_VAR 0 2
40359: PPUSH
40360: CALL_OW 257
40364: PUSH
40365: LD_INT 5
40367: EQUAL
40368: AND
40369: IFFALSE 40390
// ComBinocular ( unit , x , y ) ;
40371: LD_VAR 0 2
40375: PPUSH
40376: LD_VAR 0 4
40380: PPUSH
40381: LD_VAR 0 5
40385: PPUSH
40386: CALL 43704 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
40390: LD_VAR 0 1
40394: PUSH
40395: LD_INT 254
40397: EQUAL
40398: PUSH
40399: LD_VAR 0 2
40403: PPUSH
40404: CALL_OW 264
40408: PUSH
40409: LD_INT 99
40411: EQUAL
40412: AND
40413: PUSH
40414: LD_VAR 0 3
40418: PPUSH
40419: CALL_OW 263
40423: PUSH
40424: LD_INT 3
40426: EQUAL
40427: AND
40428: IFFALSE 40444
// HackDestroyVehicle ( unit , selectedUnit ) ;
40430: LD_VAR 0 2
40434: PPUSH
40435: LD_VAR 0 3
40439: PPUSH
40440: CALL 42007 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
40444: LD_VAR 0 1
40448: PUSH
40449: LD_INT 255
40451: EQUAL
40452: PUSH
40453: LD_VAR 0 2
40457: PPUSH
40458: CALL_OW 264
40462: PUSH
40463: LD_INT 14
40465: PUSH
40466: LD_INT 53
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: IN
40473: AND
40474: PUSH
40475: LD_VAR 0 4
40479: PPUSH
40480: LD_VAR 0 5
40484: PPUSH
40485: CALL_OW 488
40489: AND
40490: IFFALSE 40514
// CutTreeXYR ( unit , x , y , 12 ) ;
40492: LD_VAR 0 2
40496: PPUSH
40497: LD_VAR 0 4
40501: PPUSH
40502: LD_VAR 0 5
40506: PPUSH
40507: LD_INT 12
40509: PPUSH
40510: CALL 40577 0 4
// if cmd = 256 then
40514: LD_VAR 0 1
40518: PUSH
40519: LD_INT 256
40521: EQUAL
40522: IFFALSE 40543
// SetFactoryWaypoint ( unit , x , y ) ;
40524: LD_VAR 0 2
40528: PPUSH
40529: LD_VAR 0 4
40533: PPUSH
40534: LD_VAR 0 5
40538: PPUSH
40539: CALL 38524 0 3
// if cmd = 257 then
40543: LD_VAR 0 1
40547: PUSH
40548: LD_INT 257
40550: EQUAL
40551: IFFALSE 40572
// SetWarehouseGatheringPoint ( unit , x , y ) ;
40553: LD_VAR 0 2
40557: PPUSH
40558: LD_VAR 0 4
40562: PPUSH
40563: LD_VAR 0 5
40567: PPUSH
40568: CALL 38886 0 3
// end ;
40572: LD_VAR 0 6
40576: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
40577: LD_INT 0
40579: PPUSH
40580: PPUSH
40581: PPUSH
40582: PPUSH
40583: PPUSH
40584: PPUSH
40585: PPUSH
40586: PPUSH
40587: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
40588: LD_VAR 0 1
40592: NOT
40593: PUSH
40594: LD_VAR 0 2
40598: PPUSH
40599: LD_VAR 0 3
40603: PPUSH
40604: CALL_OW 488
40608: NOT
40609: OR
40610: PUSH
40611: LD_VAR 0 4
40615: NOT
40616: OR
40617: IFFALSE 40621
// exit ;
40619: GO 40961
// list := [ ] ;
40621: LD_ADDR_VAR 0 13
40625: PUSH
40626: EMPTY
40627: ST_TO_ADDR
// if x - r < 0 then
40628: LD_VAR 0 2
40632: PUSH
40633: LD_VAR 0 4
40637: MINUS
40638: PUSH
40639: LD_INT 0
40641: LESS
40642: IFFALSE 40654
// min_x := 0 else
40644: LD_ADDR_VAR 0 7
40648: PUSH
40649: LD_INT 0
40651: ST_TO_ADDR
40652: GO 40670
// min_x := x - r ;
40654: LD_ADDR_VAR 0 7
40658: PUSH
40659: LD_VAR 0 2
40663: PUSH
40664: LD_VAR 0 4
40668: MINUS
40669: ST_TO_ADDR
// if y - r < 0 then
40670: LD_VAR 0 3
40674: PUSH
40675: LD_VAR 0 4
40679: MINUS
40680: PUSH
40681: LD_INT 0
40683: LESS
40684: IFFALSE 40696
// min_y := 0 else
40686: LD_ADDR_VAR 0 8
40690: PUSH
40691: LD_INT 0
40693: ST_TO_ADDR
40694: GO 40712
// min_y := y - r ;
40696: LD_ADDR_VAR 0 8
40700: PUSH
40701: LD_VAR 0 3
40705: PUSH
40706: LD_VAR 0 4
40710: MINUS
40711: ST_TO_ADDR
// max_x := x + r ;
40712: LD_ADDR_VAR 0 9
40716: PUSH
40717: LD_VAR 0 2
40721: PUSH
40722: LD_VAR 0 4
40726: PLUS
40727: ST_TO_ADDR
// max_y := y + r ;
40728: LD_ADDR_VAR 0 10
40732: PUSH
40733: LD_VAR 0 3
40737: PUSH
40738: LD_VAR 0 4
40742: PLUS
40743: ST_TO_ADDR
// for _x = min_x to max_x do
40744: LD_ADDR_VAR 0 11
40748: PUSH
40749: DOUBLE
40750: LD_VAR 0 7
40754: DEC
40755: ST_TO_ADDR
40756: LD_VAR 0 9
40760: PUSH
40761: FOR_TO
40762: IFFALSE 40879
// for _y = min_y to max_y do
40764: LD_ADDR_VAR 0 12
40768: PUSH
40769: DOUBLE
40770: LD_VAR 0 8
40774: DEC
40775: ST_TO_ADDR
40776: LD_VAR 0 10
40780: PUSH
40781: FOR_TO
40782: IFFALSE 40875
// begin if not ValidHex ( _x , _y ) then
40784: LD_VAR 0 11
40788: PPUSH
40789: LD_VAR 0 12
40793: PPUSH
40794: CALL_OW 488
40798: NOT
40799: IFFALSE 40803
// continue ;
40801: GO 40781
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
40803: LD_VAR 0 11
40807: PPUSH
40808: LD_VAR 0 12
40812: PPUSH
40813: CALL_OW 351
40817: PUSH
40818: LD_VAR 0 11
40822: PPUSH
40823: LD_VAR 0 12
40827: PPUSH
40828: CALL_OW 554
40832: AND
40833: IFFALSE 40873
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
40835: LD_ADDR_VAR 0 13
40839: PUSH
40840: LD_VAR 0 13
40844: PPUSH
40845: LD_VAR 0 13
40849: PUSH
40850: LD_INT 1
40852: PLUS
40853: PPUSH
40854: LD_VAR 0 11
40858: PUSH
40859: LD_VAR 0 12
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PPUSH
40868: CALL_OW 2
40872: ST_TO_ADDR
// end ;
40873: GO 40781
40875: POP
40876: POP
40877: GO 40761
40879: POP
40880: POP
// if not list then
40881: LD_VAR 0 13
40885: NOT
40886: IFFALSE 40890
// exit ;
40888: GO 40961
// for i in list do
40890: LD_ADDR_VAR 0 6
40894: PUSH
40895: LD_VAR 0 13
40899: PUSH
40900: FOR_IN
40901: IFFALSE 40959
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
40903: LD_VAR 0 1
40907: PPUSH
40908: LD_STRING M
40910: PUSH
40911: LD_VAR 0 6
40915: PUSH
40916: LD_INT 1
40918: ARRAY
40919: PUSH
40920: LD_VAR 0 6
40924: PUSH
40925: LD_INT 2
40927: ARRAY
40928: PUSH
40929: LD_INT 0
40931: PUSH
40932: LD_INT 0
40934: PUSH
40935: LD_INT 0
40937: PUSH
40938: LD_INT 0
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: PUSH
40950: EMPTY
40951: LIST
40952: PPUSH
40953: CALL_OW 447
40957: GO 40900
40959: POP
40960: POP
// end ;
40961: LD_VAR 0 5
40965: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
40966: LD_EXP 127
40970: NOT
40971: IFFALSE 41021
40973: GO 40975
40975: DISABLE
// begin initHack := true ;
40976: LD_ADDR_EXP 127
40980: PUSH
40981: LD_INT 1
40983: ST_TO_ADDR
// hackTanks := [ ] ;
40984: LD_ADDR_EXP 128
40988: PUSH
40989: EMPTY
40990: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
40991: LD_ADDR_EXP 129
40995: PUSH
40996: EMPTY
40997: ST_TO_ADDR
// hackLimit := 3 ;
40998: LD_ADDR_EXP 130
41002: PUSH
41003: LD_INT 3
41005: ST_TO_ADDR
// hackDist := 12 ;
41006: LD_ADDR_EXP 131
41010: PUSH
41011: LD_INT 12
41013: ST_TO_ADDR
// hackCounter := [ ] ;
41014: LD_ADDR_EXP 132
41018: PUSH
41019: EMPTY
41020: ST_TO_ADDR
// end ;
41021: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
41022: LD_EXP 127
41026: PUSH
41027: LD_INT 34
41029: PUSH
41030: LD_INT 99
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PPUSH
41037: CALL_OW 69
41041: AND
41042: IFFALSE 41295
41044: GO 41046
41046: DISABLE
41047: LD_INT 0
41049: PPUSH
41050: PPUSH
// begin enable ;
41051: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
41052: LD_ADDR_VAR 0 1
41056: PUSH
41057: LD_INT 34
41059: PUSH
41060: LD_INT 99
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PPUSH
41067: CALL_OW 69
41071: PUSH
41072: FOR_IN
41073: IFFALSE 41293
// begin if not i in hackTanks then
41075: LD_VAR 0 1
41079: PUSH
41080: LD_EXP 128
41084: IN
41085: NOT
41086: IFFALSE 41169
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
41088: LD_ADDR_EXP 128
41092: PUSH
41093: LD_EXP 128
41097: PPUSH
41098: LD_EXP 128
41102: PUSH
41103: LD_INT 1
41105: PLUS
41106: PPUSH
41107: LD_VAR 0 1
41111: PPUSH
41112: CALL_OW 1
41116: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
41117: LD_ADDR_EXP 129
41121: PUSH
41122: LD_EXP 129
41126: PPUSH
41127: LD_EXP 129
41131: PUSH
41132: LD_INT 1
41134: PLUS
41135: PPUSH
41136: EMPTY
41137: PPUSH
41138: CALL_OW 1
41142: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
41143: LD_ADDR_EXP 132
41147: PUSH
41148: LD_EXP 132
41152: PPUSH
41153: LD_EXP 132
41157: PUSH
41158: LD_INT 1
41160: PLUS
41161: PPUSH
41162: EMPTY
41163: PPUSH
41164: CALL_OW 1
41168: ST_TO_ADDR
// end ; if not IsOk ( i ) then
41169: LD_VAR 0 1
41173: PPUSH
41174: CALL_OW 302
41178: NOT
41179: IFFALSE 41192
// begin HackUnlinkAll ( i ) ;
41181: LD_VAR 0 1
41185: PPUSH
41186: CALL 41298 0 1
// continue ;
41190: GO 41072
// end ; HackCheckCapturedStatus ( i ) ;
41192: LD_VAR 0 1
41196: PPUSH
41197: CALL 41741 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
41201: LD_ADDR_VAR 0 2
41205: PUSH
41206: LD_INT 81
41208: PUSH
41209: LD_VAR 0 1
41213: PPUSH
41214: CALL_OW 255
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 33
41225: PUSH
41226: LD_INT 3
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 91
41235: PUSH
41236: LD_VAR 0 1
41240: PUSH
41241: LD_EXP 131
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 50
41253: PUSH
41254: EMPTY
41255: LIST
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: PPUSH
41263: CALL_OW 69
41267: ST_TO_ADDR
// if not tmp then
41268: LD_VAR 0 2
41272: NOT
41273: IFFALSE 41277
// continue ;
41275: GO 41072
// HackLink ( i , tmp ) ;
41277: LD_VAR 0 1
41281: PPUSH
41282: LD_VAR 0 2
41286: PPUSH
41287: CALL 41434 0 2
// end ;
41291: GO 41072
41293: POP
41294: POP
// end ;
41295: PPOPN 2
41297: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
41298: LD_INT 0
41300: PPUSH
41301: PPUSH
41302: PPUSH
// if not hack in hackTanks then
41303: LD_VAR 0 1
41307: PUSH
41308: LD_EXP 128
41312: IN
41313: NOT
41314: IFFALSE 41318
// exit ;
41316: GO 41429
// index := GetElementIndex ( hackTanks , hack ) ;
41318: LD_ADDR_VAR 0 4
41322: PUSH
41323: LD_EXP 128
41327: PPUSH
41328: LD_VAR 0 1
41332: PPUSH
41333: CALL 49046 0 2
41337: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
41338: LD_EXP 129
41342: PUSH
41343: LD_VAR 0 4
41347: ARRAY
41348: IFFALSE 41429
// begin for i in hackTanksCaptured [ index ] do
41350: LD_ADDR_VAR 0 3
41354: PUSH
41355: LD_EXP 129
41359: PUSH
41360: LD_VAR 0 4
41364: ARRAY
41365: PUSH
41366: FOR_IN
41367: IFFALSE 41393
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
41369: LD_VAR 0 3
41373: PUSH
41374: LD_INT 1
41376: ARRAY
41377: PPUSH
41378: LD_VAR 0 3
41382: PUSH
41383: LD_INT 2
41385: ARRAY
41386: PPUSH
41387: CALL_OW 235
41391: GO 41366
41393: POP
41394: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
41395: LD_ADDR_EXP 129
41399: PUSH
41400: LD_EXP 129
41404: PPUSH
41405: LD_VAR 0 4
41409: PPUSH
41410: EMPTY
41411: PPUSH
41412: CALL_OW 1
41416: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
41417: LD_VAR 0 1
41421: PPUSH
41422: LD_INT 0
41424: PPUSH
41425: CALL_OW 505
// end ; end ;
41429: LD_VAR 0 2
41433: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
41434: LD_INT 0
41436: PPUSH
41437: PPUSH
41438: PPUSH
// if not hack in hackTanks or not vehicles then
41439: LD_VAR 0 1
41443: PUSH
41444: LD_EXP 128
41448: IN
41449: NOT
41450: PUSH
41451: LD_VAR 0 2
41455: NOT
41456: OR
41457: IFFALSE 41461
// exit ;
41459: GO 41736
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
41461: LD_ADDR_VAR 0 2
41465: PUSH
41466: LD_VAR 0 1
41470: PPUSH
41471: LD_VAR 0 2
41475: PPUSH
41476: LD_INT 1
41478: PPUSH
41479: LD_INT 1
41481: PPUSH
41482: CALL 49696 0 4
41486: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
41487: LD_ADDR_VAR 0 5
41491: PUSH
41492: LD_EXP 128
41496: PPUSH
41497: LD_VAR 0 1
41501: PPUSH
41502: CALL 49046 0 2
41506: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
41507: LD_EXP 129
41511: PUSH
41512: LD_VAR 0 5
41516: ARRAY
41517: PUSH
41518: LD_EXP 130
41522: LESS
41523: IFFALSE 41712
// begin for i := 1 to vehicles do
41525: LD_ADDR_VAR 0 4
41529: PUSH
41530: DOUBLE
41531: LD_INT 1
41533: DEC
41534: ST_TO_ADDR
41535: LD_VAR 0 2
41539: PUSH
41540: FOR_TO
41541: IFFALSE 41710
// begin if hackTanksCaptured [ index ] = hackLimit then
41543: LD_EXP 129
41547: PUSH
41548: LD_VAR 0 5
41552: ARRAY
41553: PUSH
41554: LD_EXP 130
41558: EQUAL
41559: IFFALSE 41563
// break ;
41561: GO 41710
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
41563: LD_ADDR_EXP 132
41567: PUSH
41568: LD_EXP 132
41572: PPUSH
41573: LD_VAR 0 5
41577: PPUSH
41578: LD_EXP 132
41582: PUSH
41583: LD_VAR 0 5
41587: ARRAY
41588: PUSH
41589: LD_INT 1
41591: PLUS
41592: PPUSH
41593: CALL_OW 1
41597: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
41598: LD_ADDR_EXP 129
41602: PUSH
41603: LD_EXP 129
41607: PPUSH
41608: LD_VAR 0 5
41612: PUSH
41613: LD_EXP 129
41617: PUSH
41618: LD_VAR 0 5
41622: ARRAY
41623: PUSH
41624: LD_INT 1
41626: PLUS
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PPUSH
41632: LD_VAR 0 2
41636: PUSH
41637: LD_VAR 0 4
41641: ARRAY
41642: PUSH
41643: LD_VAR 0 2
41647: PUSH
41648: LD_VAR 0 4
41652: ARRAY
41653: PPUSH
41654: CALL_OW 255
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PPUSH
41663: CALL 49261 0 3
41667: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
41668: LD_VAR 0 2
41672: PUSH
41673: LD_VAR 0 4
41677: ARRAY
41678: PPUSH
41679: LD_VAR 0 1
41683: PPUSH
41684: CALL_OW 255
41688: PPUSH
41689: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
41693: LD_VAR 0 2
41697: PUSH
41698: LD_VAR 0 4
41702: ARRAY
41703: PPUSH
41704: CALL_OW 141
// end ;
41708: GO 41540
41710: POP
41711: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
41712: LD_VAR 0 1
41716: PPUSH
41717: LD_EXP 129
41721: PUSH
41722: LD_VAR 0 5
41726: ARRAY
41727: PUSH
41728: LD_INT 0
41730: PLUS
41731: PPUSH
41732: CALL_OW 505
// end ;
41736: LD_VAR 0 3
41740: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
41741: LD_INT 0
41743: PPUSH
41744: PPUSH
41745: PPUSH
41746: PPUSH
// if not hack in hackTanks then
41747: LD_VAR 0 1
41751: PUSH
41752: LD_EXP 128
41756: IN
41757: NOT
41758: IFFALSE 41762
// exit ;
41760: GO 42002
// index := GetElementIndex ( hackTanks , hack ) ;
41762: LD_ADDR_VAR 0 4
41766: PUSH
41767: LD_EXP 128
41771: PPUSH
41772: LD_VAR 0 1
41776: PPUSH
41777: CALL 49046 0 2
41781: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
41782: LD_ADDR_VAR 0 3
41786: PUSH
41787: DOUBLE
41788: LD_EXP 129
41792: PUSH
41793: LD_VAR 0 4
41797: ARRAY
41798: INC
41799: ST_TO_ADDR
41800: LD_INT 1
41802: PUSH
41803: FOR_DOWNTO
41804: IFFALSE 41976
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
41806: LD_ADDR_VAR 0 5
41810: PUSH
41811: LD_EXP 129
41815: PUSH
41816: LD_VAR 0 4
41820: ARRAY
41821: PUSH
41822: LD_VAR 0 3
41826: ARRAY
41827: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
41828: LD_VAR 0 5
41832: PUSH
41833: LD_INT 1
41835: ARRAY
41836: PPUSH
41837: CALL_OW 302
41841: NOT
41842: PUSH
41843: LD_VAR 0 5
41847: PUSH
41848: LD_INT 1
41850: ARRAY
41851: PPUSH
41852: CALL_OW 255
41856: PUSH
41857: LD_VAR 0 1
41861: PPUSH
41862: CALL_OW 255
41866: NONEQUAL
41867: OR
41868: IFFALSE 41974
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
41870: LD_VAR 0 5
41874: PUSH
41875: LD_INT 1
41877: ARRAY
41878: PPUSH
41879: CALL_OW 305
41883: PUSH
41884: LD_VAR 0 5
41888: PUSH
41889: LD_INT 1
41891: ARRAY
41892: PPUSH
41893: CALL_OW 255
41897: PUSH
41898: LD_VAR 0 1
41902: PPUSH
41903: CALL_OW 255
41907: EQUAL
41908: AND
41909: IFFALSE 41933
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
41911: LD_VAR 0 5
41915: PUSH
41916: LD_INT 1
41918: ARRAY
41919: PPUSH
41920: LD_VAR 0 5
41924: PUSH
41925: LD_INT 2
41927: ARRAY
41928: PPUSH
41929: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
41933: LD_ADDR_EXP 129
41937: PUSH
41938: LD_EXP 129
41942: PPUSH
41943: LD_VAR 0 4
41947: PPUSH
41948: LD_EXP 129
41952: PUSH
41953: LD_VAR 0 4
41957: ARRAY
41958: PPUSH
41959: LD_VAR 0 3
41963: PPUSH
41964: CALL_OW 3
41968: PPUSH
41969: CALL_OW 1
41973: ST_TO_ADDR
// end ; end ;
41974: GO 41803
41976: POP
41977: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
41978: LD_VAR 0 1
41982: PPUSH
41983: LD_EXP 129
41987: PUSH
41988: LD_VAR 0 4
41992: ARRAY
41993: PUSH
41994: LD_INT 0
41996: PLUS
41997: PPUSH
41998: CALL_OW 505
// end ;
42002: LD_VAR 0 2
42006: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
42007: LD_INT 0
42009: PPUSH
42010: PPUSH
42011: PPUSH
42012: PPUSH
// if not hack in hackTanks then
42013: LD_VAR 0 1
42017: PUSH
42018: LD_EXP 128
42022: IN
42023: NOT
42024: IFFALSE 42028
// exit ;
42026: GO 42113
// index := GetElementIndex ( hackTanks , hack ) ;
42028: LD_ADDR_VAR 0 5
42032: PUSH
42033: LD_EXP 128
42037: PPUSH
42038: LD_VAR 0 1
42042: PPUSH
42043: CALL 49046 0 2
42047: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
42048: LD_ADDR_VAR 0 4
42052: PUSH
42053: DOUBLE
42054: LD_INT 1
42056: DEC
42057: ST_TO_ADDR
42058: LD_EXP 129
42062: PUSH
42063: LD_VAR 0 5
42067: ARRAY
42068: PUSH
42069: FOR_TO
42070: IFFALSE 42111
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
42072: LD_EXP 129
42076: PUSH
42077: LD_VAR 0 5
42081: ARRAY
42082: PUSH
42083: LD_VAR 0 4
42087: ARRAY
42088: PUSH
42089: LD_INT 1
42091: ARRAY
42092: PUSH
42093: LD_VAR 0 2
42097: EQUAL
42098: IFFALSE 42109
// KillUnit ( vehicle ) ;
42100: LD_VAR 0 2
42104: PPUSH
42105: CALL_OW 66
42109: GO 42069
42111: POP
42112: POP
// end ;
42113: LD_VAR 0 3
42117: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
42118: LD_EXP 133
42122: NOT
42123: IFFALSE 42158
42125: GO 42127
42127: DISABLE
// begin initMiner := true ;
42128: LD_ADDR_EXP 133
42132: PUSH
42133: LD_INT 1
42135: ST_TO_ADDR
// minersList := [ ] ;
42136: LD_ADDR_EXP 134
42140: PUSH
42141: EMPTY
42142: ST_TO_ADDR
// minerMinesList := [ ] ;
42143: LD_ADDR_EXP 135
42147: PUSH
42148: EMPTY
42149: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
42150: LD_ADDR_EXP 136
42154: PUSH
42155: LD_INT 5
42157: ST_TO_ADDR
// end ;
42158: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
42159: LD_EXP 133
42163: PUSH
42164: LD_INT 34
42166: PUSH
42167: LD_INT 81
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PPUSH
42174: CALL_OW 69
42178: AND
42179: IFFALSE 42640
42181: GO 42183
42183: DISABLE
42184: LD_INT 0
42186: PPUSH
42187: PPUSH
42188: PPUSH
42189: PPUSH
// begin enable ;
42190: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
42191: LD_ADDR_VAR 0 1
42195: PUSH
42196: LD_INT 34
42198: PUSH
42199: LD_INT 81
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PPUSH
42206: CALL_OW 69
42210: PUSH
42211: FOR_IN
42212: IFFALSE 42284
// begin if not i in minersList then
42214: LD_VAR 0 1
42218: PUSH
42219: LD_EXP 134
42223: IN
42224: NOT
42225: IFFALSE 42282
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
42227: LD_ADDR_EXP 134
42231: PUSH
42232: LD_EXP 134
42236: PPUSH
42237: LD_EXP 134
42241: PUSH
42242: LD_INT 1
42244: PLUS
42245: PPUSH
42246: LD_VAR 0 1
42250: PPUSH
42251: CALL_OW 1
42255: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
42256: LD_ADDR_EXP 135
42260: PUSH
42261: LD_EXP 135
42265: PPUSH
42266: LD_EXP 135
42270: PUSH
42271: LD_INT 1
42273: PLUS
42274: PPUSH
42275: EMPTY
42276: PPUSH
42277: CALL_OW 1
42281: ST_TO_ADDR
// end end ;
42282: GO 42211
42284: POP
42285: POP
// for i := minerMinesList downto 1 do
42286: LD_ADDR_VAR 0 1
42290: PUSH
42291: DOUBLE
42292: LD_EXP 135
42296: INC
42297: ST_TO_ADDR
42298: LD_INT 1
42300: PUSH
42301: FOR_DOWNTO
42302: IFFALSE 42638
// begin if IsLive ( minersList [ i ] ) then
42304: LD_EXP 134
42308: PUSH
42309: LD_VAR 0 1
42313: ARRAY
42314: PPUSH
42315: CALL_OW 300
42319: IFFALSE 42347
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
42321: LD_EXP 134
42325: PUSH
42326: LD_VAR 0 1
42330: ARRAY
42331: PPUSH
42332: LD_EXP 135
42336: PUSH
42337: LD_VAR 0 1
42341: ARRAY
42342: PPUSH
42343: CALL_OW 505
// if not minerMinesList [ i ] then
42347: LD_EXP 135
42351: PUSH
42352: LD_VAR 0 1
42356: ARRAY
42357: NOT
42358: IFFALSE 42362
// continue ;
42360: GO 42301
// for j := minerMinesList [ i ] downto 1 do
42362: LD_ADDR_VAR 0 2
42366: PUSH
42367: DOUBLE
42368: LD_EXP 135
42372: PUSH
42373: LD_VAR 0 1
42377: ARRAY
42378: INC
42379: ST_TO_ADDR
42380: LD_INT 1
42382: PUSH
42383: FOR_DOWNTO
42384: IFFALSE 42634
// begin side := GetSide ( minersList [ i ] ) ;
42386: LD_ADDR_VAR 0 3
42390: PUSH
42391: LD_EXP 134
42395: PUSH
42396: LD_VAR 0 1
42400: ARRAY
42401: PPUSH
42402: CALL_OW 255
42406: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
42407: LD_ADDR_VAR 0 4
42411: PUSH
42412: LD_EXP 135
42416: PUSH
42417: LD_VAR 0 1
42421: ARRAY
42422: PUSH
42423: LD_VAR 0 2
42427: ARRAY
42428: PUSH
42429: LD_INT 1
42431: ARRAY
42432: PPUSH
42433: LD_EXP 135
42437: PUSH
42438: LD_VAR 0 1
42442: ARRAY
42443: PUSH
42444: LD_VAR 0 2
42448: ARRAY
42449: PUSH
42450: LD_INT 2
42452: ARRAY
42453: PPUSH
42454: CALL_OW 428
42458: ST_TO_ADDR
// if not tmp then
42459: LD_VAR 0 4
42463: NOT
42464: IFFALSE 42468
// continue ;
42466: GO 42383
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
42468: LD_VAR 0 4
42472: PUSH
42473: LD_INT 81
42475: PUSH
42476: LD_VAR 0 3
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PPUSH
42485: CALL_OW 69
42489: IN
42490: PUSH
42491: LD_EXP 135
42495: PUSH
42496: LD_VAR 0 1
42500: ARRAY
42501: PUSH
42502: LD_VAR 0 2
42506: ARRAY
42507: PUSH
42508: LD_INT 1
42510: ARRAY
42511: PPUSH
42512: LD_EXP 135
42516: PUSH
42517: LD_VAR 0 1
42521: ARRAY
42522: PUSH
42523: LD_VAR 0 2
42527: ARRAY
42528: PUSH
42529: LD_INT 2
42531: ARRAY
42532: PPUSH
42533: CALL_OW 458
42537: AND
42538: IFFALSE 42632
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
42540: LD_EXP 135
42544: PUSH
42545: LD_VAR 0 1
42549: ARRAY
42550: PUSH
42551: LD_VAR 0 2
42555: ARRAY
42556: PUSH
42557: LD_INT 1
42559: ARRAY
42560: PPUSH
42561: LD_EXP 135
42565: PUSH
42566: LD_VAR 0 1
42570: ARRAY
42571: PUSH
42572: LD_VAR 0 2
42576: ARRAY
42577: PUSH
42578: LD_INT 2
42580: ARRAY
42581: PPUSH
42582: LD_VAR 0 3
42586: PPUSH
42587: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
42591: LD_ADDR_EXP 135
42595: PUSH
42596: LD_EXP 135
42600: PPUSH
42601: LD_VAR 0 1
42605: PPUSH
42606: LD_EXP 135
42610: PUSH
42611: LD_VAR 0 1
42615: ARRAY
42616: PPUSH
42617: LD_VAR 0 2
42621: PPUSH
42622: CALL_OW 3
42626: PPUSH
42627: CALL_OW 1
42631: ST_TO_ADDR
// end ; end ;
42632: GO 42383
42634: POP
42635: POP
// end ;
42636: GO 42301
42638: POP
42639: POP
// end ;
42640: PPOPN 4
42642: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
42643: LD_INT 0
42645: PPUSH
42646: PPUSH
// result := false ;
42647: LD_ADDR_VAR 0 4
42651: PUSH
42652: LD_INT 0
42654: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
42655: LD_VAR 0 1
42659: PPUSH
42660: CALL_OW 264
42664: PUSH
42665: LD_INT 81
42667: EQUAL
42668: NOT
42669: IFFALSE 42673
// exit ;
42671: GO 42913
// index := GetElementIndex ( minersList , unit ) ;
42673: LD_ADDR_VAR 0 5
42677: PUSH
42678: LD_EXP 134
42682: PPUSH
42683: LD_VAR 0 1
42687: PPUSH
42688: CALL 49046 0 2
42692: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
42693: LD_EXP 135
42697: PUSH
42698: LD_VAR 0 5
42702: ARRAY
42703: PUSH
42704: LD_EXP 136
42708: GREATEREQUAL
42709: IFFALSE 42713
// exit ;
42711: GO 42913
// ComMoveXY ( unit , x , y ) ;
42713: LD_VAR 0 1
42717: PPUSH
42718: LD_VAR 0 2
42722: PPUSH
42723: LD_VAR 0 3
42727: PPUSH
42728: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
42732: LD_INT 35
42734: PPUSH
42735: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
42739: LD_VAR 0 1
42743: PPUSH
42744: LD_VAR 0 2
42748: PPUSH
42749: LD_VAR 0 3
42753: PPUSH
42754: CALL 80401 0 3
42758: NOT
42759: PUSH
42760: LD_VAR 0 1
42764: PPUSH
42765: CALL_OW 314
42769: AND
42770: IFFALSE 42774
// exit ;
42772: GO 42913
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
42774: LD_VAR 0 2
42778: PPUSH
42779: LD_VAR 0 3
42783: PPUSH
42784: CALL_OW 428
42788: PUSH
42789: LD_VAR 0 1
42793: EQUAL
42794: PUSH
42795: LD_VAR 0 1
42799: PPUSH
42800: CALL_OW 314
42804: NOT
42805: AND
42806: IFFALSE 42732
// PlaySoundXY ( x , y , PlantMine ) ;
42808: LD_VAR 0 2
42812: PPUSH
42813: LD_VAR 0 3
42817: PPUSH
42818: LD_STRING PlantMine
42820: PPUSH
42821: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
42825: LD_VAR 0 2
42829: PPUSH
42830: LD_VAR 0 3
42834: PPUSH
42835: LD_VAR 0 1
42839: PPUSH
42840: CALL_OW 255
42844: PPUSH
42845: LD_INT 0
42847: PPUSH
42848: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
42852: LD_ADDR_EXP 135
42856: PUSH
42857: LD_EXP 135
42861: PPUSH
42862: LD_VAR 0 5
42866: PUSH
42867: LD_EXP 135
42871: PUSH
42872: LD_VAR 0 5
42876: ARRAY
42877: PUSH
42878: LD_INT 1
42880: PLUS
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PPUSH
42886: LD_VAR 0 2
42890: PUSH
42891: LD_VAR 0 3
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PPUSH
42900: CALL 49261 0 3
42904: ST_TO_ADDR
// result := true ;
42905: LD_ADDR_VAR 0 4
42909: PUSH
42910: LD_INT 1
42912: ST_TO_ADDR
// end ;
42913: LD_VAR 0 4
42917: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
42918: LD_INT 0
42920: PPUSH
42921: PPUSH
42922: PPUSH
// if not unit in minersList then
42923: LD_VAR 0 1
42927: PUSH
42928: LD_EXP 134
42932: IN
42933: NOT
42934: IFFALSE 42938
// exit ;
42936: GO 43330
// index := GetElementIndex ( minersList , unit ) ;
42938: LD_ADDR_VAR 0 6
42942: PUSH
42943: LD_EXP 134
42947: PPUSH
42948: LD_VAR 0 1
42952: PPUSH
42953: CALL 49046 0 2
42957: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
42958: LD_ADDR_VAR 0 5
42962: PUSH
42963: DOUBLE
42964: LD_EXP 135
42968: PUSH
42969: LD_VAR 0 6
42973: ARRAY
42974: INC
42975: ST_TO_ADDR
42976: LD_INT 1
42978: PUSH
42979: FOR_DOWNTO
42980: IFFALSE 43141
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
42982: LD_EXP 135
42986: PUSH
42987: LD_VAR 0 6
42991: ARRAY
42992: PUSH
42993: LD_VAR 0 5
42997: ARRAY
42998: PUSH
42999: LD_INT 1
43001: ARRAY
43002: PUSH
43003: LD_VAR 0 2
43007: EQUAL
43008: PUSH
43009: LD_EXP 135
43013: PUSH
43014: LD_VAR 0 6
43018: ARRAY
43019: PUSH
43020: LD_VAR 0 5
43024: ARRAY
43025: PUSH
43026: LD_INT 2
43028: ARRAY
43029: PUSH
43030: LD_VAR 0 3
43034: EQUAL
43035: AND
43036: IFFALSE 43139
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
43038: LD_EXP 135
43042: PUSH
43043: LD_VAR 0 6
43047: ARRAY
43048: PUSH
43049: LD_VAR 0 5
43053: ARRAY
43054: PUSH
43055: LD_INT 1
43057: ARRAY
43058: PPUSH
43059: LD_EXP 135
43063: PUSH
43064: LD_VAR 0 6
43068: ARRAY
43069: PUSH
43070: LD_VAR 0 5
43074: ARRAY
43075: PUSH
43076: LD_INT 2
43078: ARRAY
43079: PPUSH
43080: LD_VAR 0 1
43084: PPUSH
43085: CALL_OW 255
43089: PPUSH
43090: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
43094: LD_ADDR_EXP 135
43098: PUSH
43099: LD_EXP 135
43103: PPUSH
43104: LD_VAR 0 6
43108: PPUSH
43109: LD_EXP 135
43113: PUSH
43114: LD_VAR 0 6
43118: ARRAY
43119: PPUSH
43120: LD_VAR 0 5
43124: PPUSH
43125: CALL_OW 3
43129: PPUSH
43130: CALL_OW 1
43134: ST_TO_ADDR
// exit ;
43135: POP
43136: POP
43137: GO 43330
// end ; end ;
43139: GO 42979
43141: POP
43142: POP
// for i := minerMinesList [ index ] downto 1 do
43143: LD_ADDR_VAR 0 5
43147: PUSH
43148: DOUBLE
43149: LD_EXP 135
43153: PUSH
43154: LD_VAR 0 6
43158: ARRAY
43159: INC
43160: ST_TO_ADDR
43161: LD_INT 1
43163: PUSH
43164: FOR_DOWNTO
43165: IFFALSE 43328
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
43167: LD_EXP 135
43171: PUSH
43172: LD_VAR 0 6
43176: ARRAY
43177: PUSH
43178: LD_VAR 0 5
43182: ARRAY
43183: PUSH
43184: LD_INT 1
43186: ARRAY
43187: PPUSH
43188: LD_EXP 135
43192: PUSH
43193: LD_VAR 0 6
43197: ARRAY
43198: PUSH
43199: LD_VAR 0 5
43203: ARRAY
43204: PUSH
43205: LD_INT 2
43207: ARRAY
43208: PPUSH
43209: LD_VAR 0 2
43213: PPUSH
43214: LD_VAR 0 3
43218: PPUSH
43219: CALL_OW 298
43223: PUSH
43224: LD_INT 6
43226: LESS
43227: IFFALSE 43326
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
43229: LD_EXP 135
43233: PUSH
43234: LD_VAR 0 6
43238: ARRAY
43239: PUSH
43240: LD_VAR 0 5
43244: ARRAY
43245: PUSH
43246: LD_INT 1
43248: ARRAY
43249: PPUSH
43250: LD_EXP 135
43254: PUSH
43255: LD_VAR 0 6
43259: ARRAY
43260: PUSH
43261: LD_VAR 0 5
43265: ARRAY
43266: PUSH
43267: LD_INT 2
43269: ARRAY
43270: PPUSH
43271: LD_VAR 0 1
43275: PPUSH
43276: CALL_OW 255
43280: PPUSH
43281: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
43285: LD_ADDR_EXP 135
43289: PUSH
43290: LD_EXP 135
43294: PPUSH
43295: LD_VAR 0 6
43299: PPUSH
43300: LD_EXP 135
43304: PUSH
43305: LD_VAR 0 6
43309: ARRAY
43310: PPUSH
43311: LD_VAR 0 5
43315: PPUSH
43316: CALL_OW 3
43320: PPUSH
43321: CALL_OW 1
43325: ST_TO_ADDR
// end ; end ;
43326: GO 43164
43328: POP
43329: POP
// end ;
43330: LD_VAR 0 4
43334: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
43335: LD_INT 0
43337: PPUSH
43338: PPUSH
43339: PPUSH
43340: PPUSH
43341: PPUSH
43342: PPUSH
43343: PPUSH
43344: PPUSH
43345: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
43346: LD_VAR 0 1
43350: PPUSH
43351: CALL_OW 264
43355: PUSH
43356: LD_INT 81
43358: EQUAL
43359: NOT
43360: PUSH
43361: LD_VAR 0 1
43365: PUSH
43366: LD_EXP 134
43370: IN
43371: NOT
43372: OR
43373: IFFALSE 43377
// exit ;
43375: GO 43699
// index := GetElementIndex ( minersList , unit ) ;
43377: LD_ADDR_VAR 0 6
43381: PUSH
43382: LD_EXP 134
43386: PPUSH
43387: LD_VAR 0 1
43391: PPUSH
43392: CALL 49046 0 2
43396: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
43397: LD_ADDR_VAR 0 8
43401: PUSH
43402: LD_EXP 136
43406: PUSH
43407: LD_EXP 135
43411: PUSH
43412: LD_VAR 0 6
43416: ARRAY
43417: MINUS
43418: ST_TO_ADDR
// if not minesFreeAmount then
43419: LD_VAR 0 8
43423: NOT
43424: IFFALSE 43428
// exit ;
43426: GO 43699
// tmp := [ ] ;
43428: LD_ADDR_VAR 0 7
43432: PUSH
43433: EMPTY
43434: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
43435: LD_ADDR_VAR 0 5
43439: PUSH
43440: DOUBLE
43441: LD_INT 1
43443: DEC
43444: ST_TO_ADDR
43445: LD_VAR 0 8
43449: PUSH
43450: FOR_TO
43451: IFFALSE 43646
// begin _d := rand ( 0 , 5 ) ;
43453: LD_ADDR_VAR 0 11
43457: PUSH
43458: LD_INT 0
43460: PPUSH
43461: LD_INT 5
43463: PPUSH
43464: CALL_OW 12
43468: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
43469: LD_ADDR_VAR 0 12
43473: PUSH
43474: LD_INT 2
43476: PPUSH
43477: LD_INT 6
43479: PPUSH
43480: CALL_OW 12
43484: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
43485: LD_ADDR_VAR 0 9
43489: PUSH
43490: LD_VAR 0 2
43494: PPUSH
43495: LD_VAR 0 11
43499: PPUSH
43500: LD_VAR 0 12
43504: PPUSH
43505: CALL_OW 272
43509: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
43510: LD_ADDR_VAR 0 10
43514: PUSH
43515: LD_VAR 0 3
43519: PPUSH
43520: LD_VAR 0 11
43524: PPUSH
43525: LD_VAR 0 12
43529: PPUSH
43530: CALL_OW 273
43534: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
43535: LD_VAR 0 9
43539: PPUSH
43540: LD_VAR 0 10
43544: PPUSH
43545: CALL_OW 488
43549: PUSH
43550: LD_VAR 0 9
43554: PUSH
43555: LD_VAR 0 10
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_VAR 0 7
43568: IN
43569: NOT
43570: AND
43571: PUSH
43572: LD_VAR 0 9
43576: PPUSH
43577: LD_VAR 0 10
43581: PPUSH
43582: CALL_OW 458
43586: NOT
43587: AND
43588: IFFALSE 43630
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
43590: LD_ADDR_VAR 0 7
43594: PUSH
43595: LD_VAR 0 7
43599: PPUSH
43600: LD_VAR 0 7
43604: PUSH
43605: LD_INT 1
43607: PLUS
43608: PPUSH
43609: LD_VAR 0 9
43613: PUSH
43614: LD_VAR 0 10
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PPUSH
43623: CALL_OW 1
43627: ST_TO_ADDR
43628: GO 43644
// i := i - 1 ;
43630: LD_ADDR_VAR 0 5
43634: PUSH
43635: LD_VAR 0 5
43639: PUSH
43640: LD_INT 1
43642: MINUS
43643: ST_TO_ADDR
// end ;
43644: GO 43450
43646: POP
43647: POP
// for i in tmp do
43648: LD_ADDR_VAR 0 5
43652: PUSH
43653: LD_VAR 0 7
43657: PUSH
43658: FOR_IN
43659: IFFALSE 43697
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
43661: LD_VAR 0 1
43665: PPUSH
43666: LD_VAR 0 5
43670: PUSH
43671: LD_INT 1
43673: ARRAY
43674: PPUSH
43675: LD_VAR 0 5
43679: PUSH
43680: LD_INT 2
43682: ARRAY
43683: PPUSH
43684: CALL 42643 0 3
43688: NOT
43689: IFFALSE 43695
// exit ;
43691: POP
43692: POP
43693: GO 43699
43695: GO 43658
43697: POP
43698: POP
// end ;
43699: LD_VAR 0 4
43703: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
43704: LD_INT 0
43706: PPUSH
43707: PPUSH
43708: PPUSH
43709: PPUSH
43710: PPUSH
43711: PPUSH
43712: PPUSH
// if not GetClass ( unit ) = class_sniper then
43713: LD_VAR 0 1
43717: PPUSH
43718: CALL_OW 257
43722: PUSH
43723: LD_INT 5
43725: EQUAL
43726: NOT
43727: IFFALSE 43731
// exit ;
43729: GO 44119
// dist := 8 ;
43731: LD_ADDR_VAR 0 5
43735: PUSH
43736: LD_INT 8
43738: ST_TO_ADDR
// viewRange := 12 ;
43739: LD_ADDR_VAR 0 7
43743: PUSH
43744: LD_INT 12
43746: ST_TO_ADDR
// side := GetSide ( unit ) ;
43747: LD_ADDR_VAR 0 6
43751: PUSH
43752: LD_VAR 0 1
43756: PPUSH
43757: CALL_OW 255
43761: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
43762: LD_INT 61
43764: PPUSH
43765: LD_VAR 0 6
43769: PPUSH
43770: CALL_OW 321
43774: PUSH
43775: LD_INT 2
43777: EQUAL
43778: IFFALSE 43788
// viewRange := 16 ;
43780: LD_ADDR_VAR 0 7
43784: PUSH
43785: LD_INT 16
43787: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
43788: LD_VAR 0 1
43792: PPUSH
43793: LD_VAR 0 2
43797: PPUSH
43798: LD_VAR 0 3
43802: PPUSH
43803: CALL_OW 297
43807: PUSH
43808: LD_VAR 0 5
43812: GREATER
43813: IFFALSE 43892
// begin ComMoveXY ( unit , x , y ) ;
43815: LD_VAR 0 1
43819: PPUSH
43820: LD_VAR 0 2
43824: PPUSH
43825: LD_VAR 0 3
43829: PPUSH
43830: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
43834: LD_INT 35
43836: PPUSH
43837: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
43841: LD_VAR 0 1
43845: PPUSH
43846: LD_VAR 0 2
43850: PPUSH
43851: LD_VAR 0 3
43855: PPUSH
43856: CALL 80401 0 3
43860: NOT
43861: IFFALSE 43865
// exit ;
43863: GO 44119
// until GetDistUnitXY ( unit , x , y ) < dist ;
43865: LD_VAR 0 1
43869: PPUSH
43870: LD_VAR 0 2
43874: PPUSH
43875: LD_VAR 0 3
43879: PPUSH
43880: CALL_OW 297
43884: PUSH
43885: LD_VAR 0 5
43889: LESS
43890: IFFALSE 43834
// end ; ComTurnXY ( unit , x , y ) ;
43892: LD_VAR 0 1
43896: PPUSH
43897: LD_VAR 0 2
43901: PPUSH
43902: LD_VAR 0 3
43906: PPUSH
43907: CALL_OW 118
// wait ( 5 ) ;
43911: LD_INT 5
43913: PPUSH
43914: CALL_OW 67
// _d := GetDir ( unit ) ;
43918: LD_ADDR_VAR 0 10
43922: PUSH
43923: LD_VAR 0 1
43927: PPUSH
43928: CALL_OW 254
43932: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
43933: LD_ADDR_VAR 0 8
43937: PUSH
43938: LD_VAR 0 1
43942: PPUSH
43943: CALL_OW 250
43947: PPUSH
43948: LD_VAR 0 10
43952: PPUSH
43953: LD_VAR 0 5
43957: PPUSH
43958: CALL_OW 272
43962: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
43963: LD_ADDR_VAR 0 9
43967: PUSH
43968: LD_VAR 0 1
43972: PPUSH
43973: CALL_OW 251
43977: PPUSH
43978: LD_VAR 0 10
43982: PPUSH
43983: LD_VAR 0 5
43987: PPUSH
43988: CALL_OW 273
43992: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43993: LD_VAR 0 8
43997: PPUSH
43998: LD_VAR 0 9
44002: PPUSH
44003: CALL_OW 488
44007: NOT
44008: IFFALSE 44012
// exit ;
44010: GO 44119
// ComAnimCustom ( unit , 1 ) ;
44012: LD_VAR 0 1
44016: PPUSH
44017: LD_INT 1
44019: PPUSH
44020: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
44024: LD_VAR 0 8
44028: PPUSH
44029: LD_VAR 0 9
44033: PPUSH
44034: LD_VAR 0 6
44038: PPUSH
44039: LD_VAR 0 7
44043: PPUSH
44044: CALL_OW 330
// repeat wait ( 1 ) ;
44048: LD_INT 1
44050: PPUSH
44051: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
44055: LD_VAR 0 1
44059: PPUSH
44060: CALL_OW 316
44064: PUSH
44065: LD_VAR 0 1
44069: PPUSH
44070: CALL_OW 314
44074: OR
44075: PUSH
44076: LD_VAR 0 1
44080: PPUSH
44081: CALL_OW 302
44085: NOT
44086: OR
44087: PUSH
44088: LD_VAR 0 1
44092: PPUSH
44093: CALL_OW 301
44097: OR
44098: IFFALSE 44048
// RemoveSeeing ( _x , _y , side ) ;
44100: LD_VAR 0 8
44104: PPUSH
44105: LD_VAR 0 9
44109: PPUSH
44110: LD_VAR 0 6
44114: PPUSH
44115: CALL_OW 331
// end ; end_of_file
44119: LD_VAR 0 4
44123: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
44124: LD_INT 0
44126: PPUSH
44127: PPUSH
// if exist_mode then
44128: LD_VAR 0 2
44132: IFFALSE 44157
// unit := CreateCharacter ( prefix & ident ) else
44134: LD_ADDR_VAR 0 5
44138: PUSH
44139: LD_VAR 0 3
44143: PUSH
44144: LD_VAR 0 1
44148: STR
44149: PPUSH
44150: CALL_OW 34
44154: ST_TO_ADDR
44155: GO 44172
// unit := NewCharacter ( ident ) ;
44157: LD_ADDR_VAR 0 5
44161: PUSH
44162: LD_VAR 0 1
44166: PPUSH
44167: CALL_OW 25
44171: ST_TO_ADDR
// result := unit ;
44172: LD_ADDR_VAR 0 4
44176: PUSH
44177: LD_VAR 0 5
44181: ST_TO_ADDR
// end ;
44182: LD_VAR 0 4
44186: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
44187: LD_INT 0
44189: PPUSH
44190: PPUSH
// if not side or not nation then
44191: LD_VAR 0 1
44195: NOT
44196: PUSH
44197: LD_VAR 0 2
44201: NOT
44202: OR
44203: IFFALSE 44207
// exit ;
44205: GO 44975
// case nation of nation_american :
44207: LD_VAR 0 2
44211: PUSH
44212: LD_INT 1
44214: DOUBLE
44215: EQUAL
44216: IFTRUE 44220
44218: GO 44434
44220: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
44221: LD_ADDR_VAR 0 4
44225: PUSH
44226: LD_INT 35
44228: PUSH
44229: LD_INT 45
44231: PUSH
44232: LD_INT 46
44234: PUSH
44235: LD_INT 47
44237: PUSH
44238: LD_INT 82
44240: PUSH
44241: LD_INT 83
44243: PUSH
44244: LD_INT 84
44246: PUSH
44247: LD_INT 85
44249: PUSH
44250: LD_INT 86
44252: PUSH
44253: LD_INT 1
44255: PUSH
44256: LD_INT 2
44258: PUSH
44259: LD_INT 6
44261: PUSH
44262: LD_INT 15
44264: PUSH
44265: LD_INT 16
44267: PUSH
44268: LD_INT 7
44270: PUSH
44271: LD_INT 12
44273: PUSH
44274: LD_INT 13
44276: PUSH
44277: LD_INT 10
44279: PUSH
44280: LD_INT 14
44282: PUSH
44283: LD_INT 20
44285: PUSH
44286: LD_INT 21
44288: PUSH
44289: LD_INT 22
44291: PUSH
44292: LD_INT 25
44294: PUSH
44295: LD_INT 32
44297: PUSH
44298: LD_INT 27
44300: PUSH
44301: LD_INT 36
44303: PUSH
44304: LD_INT 69
44306: PUSH
44307: LD_INT 39
44309: PUSH
44310: LD_INT 34
44312: PUSH
44313: LD_INT 40
44315: PUSH
44316: LD_INT 48
44318: PUSH
44319: LD_INT 49
44321: PUSH
44322: LD_INT 50
44324: PUSH
44325: LD_INT 51
44327: PUSH
44328: LD_INT 52
44330: PUSH
44331: LD_INT 53
44333: PUSH
44334: LD_INT 54
44336: PUSH
44337: LD_INT 55
44339: PUSH
44340: LD_INT 56
44342: PUSH
44343: LD_INT 57
44345: PUSH
44346: LD_INT 58
44348: PUSH
44349: LD_INT 59
44351: PUSH
44352: LD_INT 60
44354: PUSH
44355: LD_INT 61
44357: PUSH
44358: LD_INT 62
44360: PUSH
44361: LD_INT 80
44363: PUSH
44364: LD_INT 82
44366: PUSH
44367: LD_INT 83
44369: PUSH
44370: LD_INT 84
44372: PUSH
44373: LD_INT 85
44375: PUSH
44376: LD_INT 86
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: ST_TO_ADDR
44432: GO 44899
44434: LD_INT 2
44436: DOUBLE
44437: EQUAL
44438: IFTRUE 44442
44440: GO 44668
44442: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
44443: LD_ADDR_VAR 0 4
44447: PUSH
44448: LD_INT 35
44450: PUSH
44451: LD_INT 45
44453: PUSH
44454: LD_INT 46
44456: PUSH
44457: LD_INT 47
44459: PUSH
44460: LD_INT 82
44462: PUSH
44463: LD_INT 83
44465: PUSH
44466: LD_INT 84
44468: PUSH
44469: LD_INT 85
44471: PUSH
44472: LD_INT 87
44474: PUSH
44475: LD_INT 70
44477: PUSH
44478: LD_INT 1
44480: PUSH
44481: LD_INT 11
44483: PUSH
44484: LD_INT 3
44486: PUSH
44487: LD_INT 4
44489: PUSH
44490: LD_INT 5
44492: PUSH
44493: LD_INT 6
44495: PUSH
44496: LD_INT 15
44498: PUSH
44499: LD_INT 18
44501: PUSH
44502: LD_INT 7
44504: PUSH
44505: LD_INT 17
44507: PUSH
44508: LD_INT 8
44510: PUSH
44511: LD_INT 20
44513: PUSH
44514: LD_INT 21
44516: PUSH
44517: LD_INT 22
44519: PUSH
44520: LD_INT 72
44522: PUSH
44523: LD_INT 26
44525: PUSH
44526: LD_INT 69
44528: PUSH
44529: LD_INT 39
44531: PUSH
44532: LD_INT 40
44534: PUSH
44535: LD_INT 41
44537: PUSH
44538: LD_INT 42
44540: PUSH
44541: LD_INT 43
44543: PUSH
44544: LD_INT 48
44546: PUSH
44547: LD_INT 49
44549: PUSH
44550: LD_INT 50
44552: PUSH
44553: LD_INT 51
44555: PUSH
44556: LD_INT 52
44558: PUSH
44559: LD_INT 53
44561: PUSH
44562: LD_INT 54
44564: PUSH
44565: LD_INT 55
44567: PUSH
44568: LD_INT 56
44570: PUSH
44571: LD_INT 60
44573: PUSH
44574: LD_INT 61
44576: PUSH
44577: LD_INT 62
44579: PUSH
44580: LD_INT 66
44582: PUSH
44583: LD_INT 67
44585: PUSH
44586: LD_INT 68
44588: PUSH
44589: LD_INT 81
44591: PUSH
44592: LD_INT 82
44594: PUSH
44595: LD_INT 83
44597: PUSH
44598: LD_INT 84
44600: PUSH
44601: LD_INT 85
44603: PUSH
44604: LD_INT 87
44606: PUSH
44607: LD_INT 88
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: ST_TO_ADDR
44666: GO 44899
44668: LD_INT 3
44670: DOUBLE
44671: EQUAL
44672: IFTRUE 44676
44674: GO 44898
44676: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
44677: LD_ADDR_VAR 0 4
44681: PUSH
44682: LD_INT 46
44684: PUSH
44685: LD_INT 47
44687: PUSH
44688: LD_INT 1
44690: PUSH
44691: LD_INT 2
44693: PUSH
44694: LD_INT 82
44696: PUSH
44697: LD_INT 83
44699: PUSH
44700: LD_INT 84
44702: PUSH
44703: LD_INT 85
44705: PUSH
44706: LD_INT 86
44708: PUSH
44709: LD_INT 11
44711: PUSH
44712: LD_INT 9
44714: PUSH
44715: LD_INT 20
44717: PUSH
44718: LD_INT 19
44720: PUSH
44721: LD_INT 21
44723: PUSH
44724: LD_INT 24
44726: PUSH
44727: LD_INT 22
44729: PUSH
44730: LD_INT 25
44732: PUSH
44733: LD_INT 28
44735: PUSH
44736: LD_INT 29
44738: PUSH
44739: LD_INT 30
44741: PUSH
44742: LD_INT 31
44744: PUSH
44745: LD_INT 37
44747: PUSH
44748: LD_INT 38
44750: PUSH
44751: LD_INT 32
44753: PUSH
44754: LD_INT 27
44756: PUSH
44757: LD_INT 33
44759: PUSH
44760: LD_INT 69
44762: PUSH
44763: LD_INT 39
44765: PUSH
44766: LD_INT 34
44768: PUSH
44769: LD_INT 40
44771: PUSH
44772: LD_INT 71
44774: PUSH
44775: LD_INT 23
44777: PUSH
44778: LD_INT 44
44780: PUSH
44781: LD_INT 48
44783: PUSH
44784: LD_INT 49
44786: PUSH
44787: LD_INT 50
44789: PUSH
44790: LD_INT 51
44792: PUSH
44793: LD_INT 52
44795: PUSH
44796: LD_INT 53
44798: PUSH
44799: LD_INT 54
44801: PUSH
44802: LD_INT 55
44804: PUSH
44805: LD_INT 56
44807: PUSH
44808: LD_INT 57
44810: PUSH
44811: LD_INT 58
44813: PUSH
44814: LD_INT 59
44816: PUSH
44817: LD_INT 63
44819: PUSH
44820: LD_INT 64
44822: PUSH
44823: LD_INT 65
44825: PUSH
44826: LD_INT 82
44828: PUSH
44829: LD_INT 83
44831: PUSH
44832: LD_INT 84
44834: PUSH
44835: LD_INT 85
44837: PUSH
44838: LD_INT 86
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: ST_TO_ADDR
44896: GO 44899
44898: POP
// if state > - 1 and state < 3 then
44899: LD_VAR 0 3
44903: PUSH
44904: LD_INT 1
44906: NEG
44907: GREATER
44908: PUSH
44909: LD_VAR 0 3
44913: PUSH
44914: LD_INT 3
44916: LESS
44917: AND
44918: IFFALSE 44975
// for i in result do
44920: LD_ADDR_VAR 0 5
44924: PUSH
44925: LD_VAR 0 4
44929: PUSH
44930: FOR_IN
44931: IFFALSE 44973
// if GetTech ( i , side ) <> state then
44933: LD_VAR 0 5
44937: PPUSH
44938: LD_VAR 0 1
44942: PPUSH
44943: CALL_OW 321
44947: PUSH
44948: LD_VAR 0 3
44952: NONEQUAL
44953: IFFALSE 44971
// result := result diff i ;
44955: LD_ADDR_VAR 0 4
44959: PUSH
44960: LD_VAR 0 4
44964: PUSH
44965: LD_VAR 0 5
44969: DIFF
44970: ST_TO_ADDR
44971: GO 44930
44973: POP
44974: POP
// end ;
44975: LD_VAR 0 4
44979: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
44980: LD_INT 0
44982: PPUSH
44983: PPUSH
44984: PPUSH
// result := true ;
44985: LD_ADDR_VAR 0 3
44989: PUSH
44990: LD_INT 1
44992: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
44993: LD_ADDR_VAR 0 5
44997: PUSH
44998: LD_VAR 0 2
45002: PPUSH
45003: CALL_OW 480
45007: ST_TO_ADDR
// if not tmp then
45008: LD_VAR 0 5
45012: NOT
45013: IFFALSE 45017
// exit ;
45015: GO 45066
// for i in tmp do
45017: LD_ADDR_VAR 0 4
45021: PUSH
45022: LD_VAR 0 5
45026: PUSH
45027: FOR_IN
45028: IFFALSE 45064
// if GetTech ( i , side ) <> state_researched then
45030: LD_VAR 0 4
45034: PPUSH
45035: LD_VAR 0 1
45039: PPUSH
45040: CALL_OW 321
45044: PUSH
45045: LD_INT 2
45047: NONEQUAL
45048: IFFALSE 45062
// begin result := false ;
45050: LD_ADDR_VAR 0 3
45054: PUSH
45055: LD_INT 0
45057: ST_TO_ADDR
// exit ;
45058: POP
45059: POP
45060: GO 45066
// end ;
45062: GO 45027
45064: POP
45065: POP
// end ;
45066: LD_VAR 0 3
45070: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
45071: LD_INT 0
45073: PPUSH
45074: PPUSH
45075: PPUSH
45076: PPUSH
45077: PPUSH
45078: PPUSH
45079: PPUSH
45080: PPUSH
45081: PPUSH
45082: PPUSH
45083: PPUSH
45084: PPUSH
45085: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
45086: LD_VAR 0 1
45090: NOT
45091: PUSH
45092: LD_VAR 0 1
45096: PPUSH
45097: CALL_OW 257
45101: PUSH
45102: LD_INT 9
45104: NONEQUAL
45105: OR
45106: IFFALSE 45110
// exit ;
45108: GO 45683
// side := GetSide ( unit ) ;
45110: LD_ADDR_VAR 0 9
45114: PUSH
45115: LD_VAR 0 1
45119: PPUSH
45120: CALL_OW 255
45124: ST_TO_ADDR
// tech_space := tech_spacanom ;
45125: LD_ADDR_VAR 0 12
45129: PUSH
45130: LD_INT 29
45132: ST_TO_ADDR
// tech_time := tech_taurad ;
45133: LD_ADDR_VAR 0 13
45137: PUSH
45138: LD_INT 28
45140: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
45141: LD_ADDR_VAR 0 11
45145: PUSH
45146: LD_VAR 0 1
45150: PPUSH
45151: CALL_OW 310
45155: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
45156: LD_VAR 0 11
45160: PPUSH
45161: CALL_OW 247
45165: PUSH
45166: LD_INT 2
45168: EQUAL
45169: IFFALSE 45173
// exit ;
45171: GO 45683
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45173: LD_ADDR_VAR 0 8
45177: PUSH
45178: LD_INT 81
45180: PUSH
45181: LD_VAR 0 9
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 3
45192: PUSH
45193: LD_INT 21
45195: PUSH
45196: LD_INT 3
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PPUSH
45211: CALL_OW 69
45215: ST_TO_ADDR
// if not tmp then
45216: LD_VAR 0 8
45220: NOT
45221: IFFALSE 45225
// exit ;
45223: GO 45683
// if in_unit then
45225: LD_VAR 0 11
45229: IFFALSE 45253
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
45231: LD_ADDR_VAR 0 10
45235: PUSH
45236: LD_VAR 0 8
45240: PPUSH
45241: LD_VAR 0 11
45245: PPUSH
45246: CALL_OW 74
45250: ST_TO_ADDR
45251: GO 45273
// enemy := NearestUnitToUnit ( tmp , unit ) ;
45253: LD_ADDR_VAR 0 10
45257: PUSH
45258: LD_VAR 0 8
45262: PPUSH
45263: LD_VAR 0 1
45267: PPUSH
45268: CALL_OW 74
45272: ST_TO_ADDR
// if not enemy then
45273: LD_VAR 0 10
45277: NOT
45278: IFFALSE 45282
// exit ;
45280: GO 45683
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
45282: LD_VAR 0 11
45286: PUSH
45287: LD_VAR 0 11
45291: PPUSH
45292: LD_VAR 0 10
45296: PPUSH
45297: CALL_OW 296
45301: PUSH
45302: LD_INT 13
45304: GREATER
45305: AND
45306: PUSH
45307: LD_VAR 0 1
45311: PPUSH
45312: LD_VAR 0 10
45316: PPUSH
45317: CALL_OW 296
45321: PUSH
45322: LD_INT 12
45324: GREATER
45325: OR
45326: IFFALSE 45330
// exit ;
45328: GO 45683
// missile := [ 1 ] ;
45330: LD_ADDR_VAR 0 14
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: EMPTY
45339: LIST
45340: ST_TO_ADDR
// if Researched ( side , tech_space ) then
45341: LD_VAR 0 9
45345: PPUSH
45346: LD_VAR 0 12
45350: PPUSH
45351: CALL_OW 325
45355: IFFALSE 45384
// missile := Replace ( missile , missile + 1 , 2 ) ;
45357: LD_ADDR_VAR 0 14
45361: PUSH
45362: LD_VAR 0 14
45366: PPUSH
45367: LD_VAR 0 14
45371: PUSH
45372: LD_INT 1
45374: PLUS
45375: PPUSH
45376: LD_INT 2
45378: PPUSH
45379: CALL_OW 1
45383: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
45384: LD_VAR 0 9
45388: PPUSH
45389: LD_VAR 0 13
45393: PPUSH
45394: CALL_OW 325
45398: PUSH
45399: LD_VAR 0 10
45403: PPUSH
45404: CALL_OW 255
45408: PPUSH
45409: LD_VAR 0 13
45413: PPUSH
45414: CALL_OW 325
45418: NOT
45419: AND
45420: IFFALSE 45449
// missile := Replace ( missile , missile + 1 , 3 ) ;
45422: LD_ADDR_VAR 0 14
45426: PUSH
45427: LD_VAR 0 14
45431: PPUSH
45432: LD_VAR 0 14
45436: PUSH
45437: LD_INT 1
45439: PLUS
45440: PPUSH
45441: LD_INT 3
45443: PPUSH
45444: CALL_OW 1
45448: ST_TO_ADDR
// if missile < 2 then
45449: LD_VAR 0 14
45453: PUSH
45454: LD_INT 2
45456: LESS
45457: IFFALSE 45461
// exit ;
45459: GO 45683
// x := GetX ( enemy ) ;
45461: LD_ADDR_VAR 0 4
45465: PUSH
45466: LD_VAR 0 10
45470: PPUSH
45471: CALL_OW 250
45475: ST_TO_ADDR
// y := GetY ( enemy ) ;
45476: LD_ADDR_VAR 0 5
45480: PUSH
45481: LD_VAR 0 10
45485: PPUSH
45486: CALL_OW 251
45490: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
45491: LD_ADDR_VAR 0 6
45495: PUSH
45496: LD_VAR 0 4
45500: PUSH
45501: LD_INT 1
45503: NEG
45504: PPUSH
45505: LD_INT 1
45507: PPUSH
45508: CALL_OW 12
45512: PLUS
45513: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
45514: LD_ADDR_VAR 0 7
45518: PUSH
45519: LD_VAR 0 5
45523: PUSH
45524: LD_INT 1
45526: NEG
45527: PPUSH
45528: LD_INT 1
45530: PPUSH
45531: CALL_OW 12
45535: PLUS
45536: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45537: LD_VAR 0 6
45541: PPUSH
45542: LD_VAR 0 7
45546: PPUSH
45547: CALL_OW 488
45551: NOT
45552: IFFALSE 45574
// begin _x := x ;
45554: LD_ADDR_VAR 0 6
45558: PUSH
45559: LD_VAR 0 4
45563: ST_TO_ADDR
// _y := y ;
45564: LD_ADDR_VAR 0 7
45568: PUSH
45569: LD_VAR 0 5
45573: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
45574: LD_ADDR_VAR 0 3
45578: PUSH
45579: LD_INT 1
45581: PPUSH
45582: LD_VAR 0 14
45586: PPUSH
45587: CALL_OW 12
45591: ST_TO_ADDR
// case i of 1 :
45592: LD_VAR 0 3
45596: PUSH
45597: LD_INT 1
45599: DOUBLE
45600: EQUAL
45601: IFTRUE 45605
45603: GO 45622
45605: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
45606: LD_VAR 0 1
45610: PPUSH
45611: LD_VAR 0 10
45615: PPUSH
45616: CALL_OW 115
45620: GO 45683
45622: LD_INT 2
45624: DOUBLE
45625: EQUAL
45626: IFTRUE 45630
45628: GO 45652
45630: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
45631: LD_VAR 0 1
45635: PPUSH
45636: LD_VAR 0 6
45640: PPUSH
45641: LD_VAR 0 7
45645: PPUSH
45646: CALL_OW 153
45650: GO 45683
45652: LD_INT 3
45654: DOUBLE
45655: EQUAL
45656: IFTRUE 45660
45658: GO 45682
45660: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
45661: LD_VAR 0 1
45665: PPUSH
45666: LD_VAR 0 6
45670: PPUSH
45671: LD_VAR 0 7
45675: PPUSH
45676: CALL_OW 154
45680: GO 45683
45682: POP
// end ;
45683: LD_VAR 0 2
45687: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
45688: LD_INT 0
45690: PPUSH
45691: PPUSH
45692: PPUSH
45693: PPUSH
45694: PPUSH
45695: PPUSH
// if not unit or not building then
45696: LD_VAR 0 1
45700: NOT
45701: PUSH
45702: LD_VAR 0 2
45706: NOT
45707: OR
45708: IFFALSE 45712
// exit ;
45710: GO 45870
// x := GetX ( building ) ;
45712: LD_ADDR_VAR 0 5
45716: PUSH
45717: LD_VAR 0 2
45721: PPUSH
45722: CALL_OW 250
45726: ST_TO_ADDR
// y := GetY ( building ) ;
45727: LD_ADDR_VAR 0 6
45731: PUSH
45732: LD_VAR 0 2
45736: PPUSH
45737: CALL_OW 251
45741: ST_TO_ADDR
// for i = 0 to 5 do
45742: LD_ADDR_VAR 0 4
45746: PUSH
45747: DOUBLE
45748: LD_INT 0
45750: DEC
45751: ST_TO_ADDR
45752: LD_INT 5
45754: PUSH
45755: FOR_TO
45756: IFFALSE 45868
// begin _x := ShiftX ( x , i , 3 ) ;
45758: LD_ADDR_VAR 0 7
45762: PUSH
45763: LD_VAR 0 5
45767: PPUSH
45768: LD_VAR 0 4
45772: PPUSH
45773: LD_INT 3
45775: PPUSH
45776: CALL_OW 272
45780: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
45781: LD_ADDR_VAR 0 8
45785: PUSH
45786: LD_VAR 0 6
45790: PPUSH
45791: LD_VAR 0 4
45795: PPUSH
45796: LD_INT 3
45798: PPUSH
45799: CALL_OW 273
45803: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45804: LD_VAR 0 7
45808: PPUSH
45809: LD_VAR 0 8
45813: PPUSH
45814: CALL_OW 488
45818: NOT
45819: IFFALSE 45823
// continue ;
45821: GO 45755
// if HexInfo ( _x , _y ) = 0 then
45823: LD_VAR 0 7
45827: PPUSH
45828: LD_VAR 0 8
45832: PPUSH
45833: CALL_OW 428
45837: PUSH
45838: LD_INT 0
45840: EQUAL
45841: IFFALSE 45866
// begin ComMoveXY ( unit , _x , _y ) ;
45843: LD_VAR 0 1
45847: PPUSH
45848: LD_VAR 0 7
45852: PPUSH
45853: LD_VAR 0 8
45857: PPUSH
45858: CALL_OW 111
// exit ;
45862: POP
45863: POP
45864: GO 45870
// end ; end ;
45866: GO 45755
45868: POP
45869: POP
// end ;
45870: LD_VAR 0 3
45874: RET
// export function ScanBase ( side , base_area ) ; begin
45875: LD_INT 0
45877: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
45878: LD_ADDR_VAR 0 3
45882: PUSH
45883: LD_VAR 0 2
45887: PPUSH
45888: LD_INT 81
45890: PUSH
45891: LD_VAR 0 1
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PPUSH
45900: CALL_OW 70
45904: ST_TO_ADDR
// end ;
45905: LD_VAR 0 3
45909: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
45910: LD_INT 0
45912: PPUSH
45913: PPUSH
45914: PPUSH
45915: PPUSH
// result := false ;
45916: LD_ADDR_VAR 0 2
45920: PUSH
45921: LD_INT 0
45923: ST_TO_ADDR
// side := GetSide ( unit ) ;
45924: LD_ADDR_VAR 0 3
45928: PUSH
45929: LD_VAR 0 1
45933: PPUSH
45934: CALL_OW 255
45938: ST_TO_ADDR
// nat := GetNation ( unit ) ;
45939: LD_ADDR_VAR 0 4
45943: PUSH
45944: LD_VAR 0 1
45948: PPUSH
45949: CALL_OW 248
45953: ST_TO_ADDR
// case nat of 1 :
45954: LD_VAR 0 4
45958: PUSH
45959: LD_INT 1
45961: DOUBLE
45962: EQUAL
45963: IFTRUE 45967
45965: GO 45978
45967: POP
// tech := tech_lassight ; 2 :
45968: LD_ADDR_VAR 0 5
45972: PUSH
45973: LD_INT 12
45975: ST_TO_ADDR
45976: GO 46017
45978: LD_INT 2
45980: DOUBLE
45981: EQUAL
45982: IFTRUE 45986
45984: GO 45997
45986: POP
// tech := tech_mortar ; 3 :
45987: LD_ADDR_VAR 0 5
45991: PUSH
45992: LD_INT 41
45994: ST_TO_ADDR
45995: GO 46017
45997: LD_INT 3
45999: DOUBLE
46000: EQUAL
46001: IFTRUE 46005
46003: GO 46016
46005: POP
// tech := tech_bazooka ; end ;
46006: LD_ADDR_VAR 0 5
46010: PUSH
46011: LD_INT 44
46013: ST_TO_ADDR
46014: GO 46017
46016: POP
// if Researched ( side , tech ) then
46017: LD_VAR 0 3
46021: PPUSH
46022: LD_VAR 0 5
46026: PPUSH
46027: CALL_OW 325
46031: IFFALSE 46058
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
46033: LD_ADDR_VAR 0 2
46037: PUSH
46038: LD_INT 5
46040: PUSH
46041: LD_INT 8
46043: PUSH
46044: LD_INT 9
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: LIST
46051: PUSH
46052: LD_VAR 0 4
46056: ARRAY
46057: ST_TO_ADDR
// end ;
46058: LD_VAR 0 2
46062: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
46063: LD_INT 0
46065: PPUSH
46066: PPUSH
46067: PPUSH
// if not mines then
46068: LD_VAR 0 2
46072: NOT
46073: IFFALSE 46077
// exit ;
46075: GO 46221
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46077: LD_ADDR_VAR 0 5
46081: PUSH
46082: LD_INT 81
46084: PUSH
46085: LD_VAR 0 1
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 3
46096: PUSH
46097: LD_INT 21
46099: PUSH
46100: LD_INT 3
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PPUSH
46115: CALL_OW 69
46119: ST_TO_ADDR
// for i in mines do
46120: LD_ADDR_VAR 0 4
46124: PUSH
46125: LD_VAR 0 2
46129: PUSH
46130: FOR_IN
46131: IFFALSE 46219
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
46133: LD_VAR 0 4
46137: PUSH
46138: LD_INT 1
46140: ARRAY
46141: PPUSH
46142: LD_VAR 0 4
46146: PUSH
46147: LD_INT 2
46149: ARRAY
46150: PPUSH
46151: CALL_OW 458
46155: NOT
46156: IFFALSE 46160
// continue ;
46158: GO 46130
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
46160: LD_VAR 0 4
46164: PUSH
46165: LD_INT 1
46167: ARRAY
46168: PPUSH
46169: LD_VAR 0 4
46173: PUSH
46174: LD_INT 2
46176: ARRAY
46177: PPUSH
46178: CALL_OW 428
46182: PUSH
46183: LD_VAR 0 5
46187: IN
46188: IFFALSE 46217
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
46190: LD_VAR 0 4
46194: PUSH
46195: LD_INT 1
46197: ARRAY
46198: PPUSH
46199: LD_VAR 0 4
46203: PUSH
46204: LD_INT 2
46206: ARRAY
46207: PPUSH
46208: LD_VAR 0 1
46212: PPUSH
46213: CALL_OW 456
// end ;
46217: GO 46130
46219: POP
46220: POP
// end ;
46221: LD_VAR 0 3
46225: RET
// export function Count ( array ) ; var i ; begin
46226: LD_INT 0
46228: PPUSH
46229: PPUSH
// result := 0 ;
46230: LD_ADDR_VAR 0 2
46234: PUSH
46235: LD_INT 0
46237: ST_TO_ADDR
// for i in array do
46238: LD_ADDR_VAR 0 3
46242: PUSH
46243: LD_VAR 0 1
46247: PUSH
46248: FOR_IN
46249: IFFALSE 46273
// if i then
46251: LD_VAR 0 3
46255: IFFALSE 46271
// result := result + 1 ;
46257: LD_ADDR_VAR 0 2
46261: PUSH
46262: LD_VAR 0 2
46266: PUSH
46267: LD_INT 1
46269: PLUS
46270: ST_TO_ADDR
46271: GO 46248
46273: POP
46274: POP
// end ;
46275: LD_VAR 0 2
46279: RET
// export function IsEmpty ( building ) ; begin
46280: LD_INT 0
46282: PPUSH
// if not building then
46283: LD_VAR 0 1
46287: NOT
46288: IFFALSE 46292
// exit ;
46290: GO 46335
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
46292: LD_ADDR_VAR 0 2
46296: PUSH
46297: LD_VAR 0 1
46301: PUSH
46302: LD_INT 22
46304: PUSH
46305: LD_VAR 0 1
46309: PPUSH
46310: CALL_OW 255
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 58
46321: PUSH
46322: EMPTY
46323: LIST
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PPUSH
46329: CALL_OW 69
46333: IN
46334: ST_TO_ADDR
// end ;
46335: LD_VAR 0 2
46339: RET
// export function IsNotFull ( building ) ; var places ; begin
46340: LD_INT 0
46342: PPUSH
46343: PPUSH
// if not building then
46344: LD_VAR 0 1
46348: NOT
46349: IFFALSE 46353
// exit ;
46351: GO 46524
// result := false ;
46353: LD_ADDR_VAR 0 2
46357: PUSH
46358: LD_INT 0
46360: ST_TO_ADDR
// places := 0 ;
46361: LD_ADDR_VAR 0 3
46365: PUSH
46366: LD_INT 0
46368: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
46369: LD_VAR 0 1
46373: PPUSH
46374: CALL_OW 266
46378: PUSH
46379: LD_INT 0
46381: DOUBLE
46382: EQUAL
46383: IFTRUE 46441
46385: LD_INT 1
46387: DOUBLE
46388: EQUAL
46389: IFTRUE 46441
46391: LD_INT 6
46393: DOUBLE
46394: EQUAL
46395: IFTRUE 46441
46397: LD_INT 7
46399: DOUBLE
46400: EQUAL
46401: IFTRUE 46441
46403: LD_INT 8
46405: DOUBLE
46406: EQUAL
46407: IFTRUE 46441
46409: LD_INT 4
46411: DOUBLE
46412: EQUAL
46413: IFTRUE 46441
46415: LD_INT 5
46417: DOUBLE
46418: EQUAL
46419: IFTRUE 46441
46421: LD_INT 2
46423: DOUBLE
46424: EQUAL
46425: IFTRUE 46441
46427: LD_INT 3
46429: DOUBLE
46430: EQUAL
46431: IFTRUE 46441
46433: LD_INT 35
46435: DOUBLE
46436: EQUAL
46437: IFTRUE 46441
46439: GO 46452
46441: POP
// places := 6 ; b_bunker , b_breastwork :
46442: LD_ADDR_VAR 0 3
46446: PUSH
46447: LD_INT 6
46449: ST_TO_ADDR
46450: GO 46497
46452: LD_INT 32
46454: DOUBLE
46455: EQUAL
46456: IFTRUE 46466
46458: LD_INT 31
46460: DOUBLE
46461: EQUAL
46462: IFTRUE 46466
46464: GO 46477
46466: POP
// places := 1 ; b_control_tower :
46467: LD_ADDR_VAR 0 3
46471: PUSH
46472: LD_INT 1
46474: ST_TO_ADDR
46475: GO 46497
46477: LD_INT 36
46479: DOUBLE
46480: EQUAL
46481: IFTRUE 46485
46483: GO 46496
46485: POP
// places := 3 ; end ;
46486: LD_ADDR_VAR 0 3
46490: PUSH
46491: LD_INT 3
46493: ST_TO_ADDR
46494: GO 46497
46496: POP
// if places then
46497: LD_VAR 0 3
46501: IFFALSE 46524
// result := UnitsInside ( building ) < places ;
46503: LD_ADDR_VAR 0 2
46507: PUSH
46508: LD_VAR 0 1
46512: PPUSH
46513: CALL_OW 313
46517: PUSH
46518: LD_VAR 0 3
46522: LESS
46523: ST_TO_ADDR
// end ;
46524: LD_VAR 0 2
46528: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
46529: LD_INT 0
46531: PPUSH
46532: PPUSH
46533: PPUSH
46534: PPUSH
// tmp := [ ] ;
46535: LD_ADDR_VAR 0 3
46539: PUSH
46540: EMPTY
46541: ST_TO_ADDR
// list := [ ] ;
46542: LD_ADDR_VAR 0 5
46546: PUSH
46547: EMPTY
46548: ST_TO_ADDR
// for i = 16 to 25 do
46549: LD_ADDR_VAR 0 4
46553: PUSH
46554: DOUBLE
46555: LD_INT 16
46557: DEC
46558: ST_TO_ADDR
46559: LD_INT 25
46561: PUSH
46562: FOR_TO
46563: IFFALSE 46636
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
46565: LD_ADDR_VAR 0 3
46569: PUSH
46570: LD_VAR 0 3
46574: PUSH
46575: LD_INT 22
46577: PUSH
46578: LD_VAR 0 1
46582: PPUSH
46583: CALL_OW 255
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 91
46594: PUSH
46595: LD_VAR 0 1
46599: PUSH
46600: LD_INT 6
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 30
46610: PUSH
46611: LD_VAR 0 4
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: LIST
46624: PUSH
46625: EMPTY
46626: LIST
46627: PPUSH
46628: CALL_OW 69
46632: ADD
46633: ST_TO_ADDR
46634: GO 46562
46636: POP
46637: POP
// for i = 1 to tmp do
46638: LD_ADDR_VAR 0 4
46642: PUSH
46643: DOUBLE
46644: LD_INT 1
46646: DEC
46647: ST_TO_ADDR
46648: LD_VAR 0 3
46652: PUSH
46653: FOR_TO
46654: IFFALSE 46742
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
46656: LD_ADDR_VAR 0 5
46660: PUSH
46661: LD_VAR 0 5
46665: PUSH
46666: LD_VAR 0 3
46670: PUSH
46671: LD_VAR 0 4
46675: ARRAY
46676: PPUSH
46677: CALL_OW 266
46681: PUSH
46682: LD_VAR 0 3
46686: PUSH
46687: LD_VAR 0 4
46691: ARRAY
46692: PPUSH
46693: CALL_OW 250
46697: PUSH
46698: LD_VAR 0 3
46702: PUSH
46703: LD_VAR 0 4
46707: ARRAY
46708: PPUSH
46709: CALL_OW 251
46713: PUSH
46714: LD_VAR 0 3
46718: PUSH
46719: LD_VAR 0 4
46723: ARRAY
46724: PPUSH
46725: CALL_OW 254
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: PUSH
46736: EMPTY
46737: LIST
46738: ADD
46739: ST_TO_ADDR
46740: GO 46653
46742: POP
46743: POP
// result := list ;
46744: LD_ADDR_VAR 0 2
46748: PUSH
46749: LD_VAR 0 5
46753: ST_TO_ADDR
// end ;
46754: LD_VAR 0 2
46758: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
46759: LD_INT 0
46761: PPUSH
46762: PPUSH
46763: PPUSH
46764: PPUSH
46765: PPUSH
46766: PPUSH
46767: PPUSH
// if not factory then
46768: LD_VAR 0 1
46772: NOT
46773: IFFALSE 46777
// exit ;
46775: GO 47370
// if control = control_apeman then
46777: LD_VAR 0 4
46781: PUSH
46782: LD_INT 5
46784: EQUAL
46785: IFFALSE 46894
// begin tmp := UnitsInside ( factory ) ;
46787: LD_ADDR_VAR 0 8
46791: PUSH
46792: LD_VAR 0 1
46796: PPUSH
46797: CALL_OW 313
46801: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
46802: LD_VAR 0 8
46806: PPUSH
46807: LD_INT 25
46809: PUSH
46810: LD_INT 12
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PPUSH
46817: CALL_OW 72
46821: NOT
46822: IFFALSE 46832
// control := control_manual ;
46824: LD_ADDR_VAR 0 4
46828: PUSH
46829: LD_INT 1
46831: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
46832: LD_ADDR_VAR 0 8
46836: PUSH
46837: LD_VAR 0 1
46841: PPUSH
46842: CALL 46529 0 1
46846: ST_TO_ADDR
// if tmp then
46847: LD_VAR 0 8
46851: IFFALSE 46894
// begin for i in tmp do
46853: LD_ADDR_VAR 0 7
46857: PUSH
46858: LD_VAR 0 8
46862: PUSH
46863: FOR_IN
46864: IFFALSE 46892
// if i [ 1 ] = b_ext_radio then
46866: LD_VAR 0 7
46870: PUSH
46871: LD_INT 1
46873: ARRAY
46874: PUSH
46875: LD_INT 22
46877: EQUAL
46878: IFFALSE 46890
// begin control := control_remote ;
46880: LD_ADDR_VAR 0 4
46884: PUSH
46885: LD_INT 2
46887: ST_TO_ADDR
// break ;
46888: GO 46892
// end ;
46890: GO 46863
46892: POP
46893: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
46894: LD_VAR 0 1
46898: PPUSH
46899: LD_VAR 0 2
46903: PPUSH
46904: LD_VAR 0 3
46908: PPUSH
46909: LD_VAR 0 4
46913: PPUSH
46914: LD_VAR 0 5
46918: PPUSH
46919: CALL_OW 448
46923: IFFALSE 46958
// begin result := [ chassis , engine , control , weapon ] ;
46925: LD_ADDR_VAR 0 6
46929: PUSH
46930: LD_VAR 0 2
46934: PUSH
46935: LD_VAR 0 3
46939: PUSH
46940: LD_VAR 0 4
46944: PUSH
46945: LD_VAR 0 5
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: ST_TO_ADDR
// exit ;
46956: GO 47370
// end ; _chassis := AvailableChassisList ( factory ) ;
46958: LD_ADDR_VAR 0 9
46962: PUSH
46963: LD_VAR 0 1
46967: PPUSH
46968: CALL_OW 475
46972: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
46973: LD_ADDR_VAR 0 11
46977: PUSH
46978: LD_VAR 0 1
46982: PPUSH
46983: CALL_OW 476
46987: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
46988: LD_ADDR_VAR 0 12
46992: PUSH
46993: LD_VAR 0 1
46997: PPUSH
46998: CALL_OW 477
47002: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
47003: LD_ADDR_VAR 0 10
47007: PUSH
47008: LD_VAR 0 1
47012: PPUSH
47013: CALL_OW 478
47017: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
47018: LD_VAR 0 9
47022: NOT
47023: PUSH
47024: LD_VAR 0 11
47028: NOT
47029: OR
47030: PUSH
47031: LD_VAR 0 12
47035: NOT
47036: OR
47037: PUSH
47038: LD_VAR 0 10
47042: NOT
47043: OR
47044: IFFALSE 47079
// begin result := [ chassis , engine , control , weapon ] ;
47046: LD_ADDR_VAR 0 6
47050: PUSH
47051: LD_VAR 0 2
47055: PUSH
47056: LD_VAR 0 3
47060: PUSH
47061: LD_VAR 0 4
47065: PUSH
47066: LD_VAR 0 5
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: ST_TO_ADDR
// exit ;
47077: GO 47370
// end ; if not chassis in _chassis then
47079: LD_VAR 0 2
47083: PUSH
47084: LD_VAR 0 9
47088: IN
47089: NOT
47090: IFFALSE 47116
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
47092: LD_ADDR_VAR 0 2
47096: PUSH
47097: LD_VAR 0 9
47101: PUSH
47102: LD_INT 1
47104: PPUSH
47105: LD_VAR 0 9
47109: PPUSH
47110: CALL_OW 12
47114: ARRAY
47115: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
47116: LD_VAR 0 2
47120: PPUSH
47121: LD_VAR 0 3
47125: PPUSH
47126: CALL 47375 0 2
47130: NOT
47131: IFFALSE 47190
// repeat engine := _engine [ 1 ] ;
47133: LD_ADDR_VAR 0 3
47137: PUSH
47138: LD_VAR 0 11
47142: PUSH
47143: LD_INT 1
47145: ARRAY
47146: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
47147: LD_ADDR_VAR 0 11
47151: PUSH
47152: LD_VAR 0 11
47156: PPUSH
47157: LD_INT 1
47159: PPUSH
47160: CALL_OW 3
47164: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
47165: LD_VAR 0 2
47169: PPUSH
47170: LD_VAR 0 3
47174: PPUSH
47175: CALL 47375 0 2
47179: PUSH
47180: LD_VAR 0 11
47184: PUSH
47185: EMPTY
47186: EQUAL
47187: OR
47188: IFFALSE 47133
// if not control in _control then
47190: LD_VAR 0 4
47194: PUSH
47195: LD_VAR 0 12
47199: IN
47200: NOT
47201: IFFALSE 47227
// control := _control [ rand ( 1 , _control ) ] ;
47203: LD_ADDR_VAR 0 4
47207: PUSH
47208: LD_VAR 0 12
47212: PUSH
47213: LD_INT 1
47215: PPUSH
47216: LD_VAR 0 12
47220: PPUSH
47221: CALL_OW 12
47225: ARRAY
47226: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
47227: LD_VAR 0 2
47231: PPUSH
47232: LD_VAR 0 5
47236: PPUSH
47237: CALL 47595 0 2
47241: NOT
47242: IFFALSE 47301
// repeat weapon := _weapon [ 1 ] ;
47244: LD_ADDR_VAR 0 5
47248: PUSH
47249: LD_VAR 0 10
47253: PUSH
47254: LD_INT 1
47256: ARRAY
47257: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
47258: LD_ADDR_VAR 0 10
47262: PUSH
47263: LD_VAR 0 10
47267: PPUSH
47268: LD_INT 1
47270: PPUSH
47271: CALL_OW 3
47275: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
47276: LD_VAR 0 2
47280: PPUSH
47281: LD_VAR 0 5
47285: PPUSH
47286: CALL 47595 0 2
47290: PUSH
47291: LD_VAR 0 10
47295: PUSH
47296: EMPTY
47297: EQUAL
47298: OR
47299: IFFALSE 47244
// result := [ ] ;
47301: LD_ADDR_VAR 0 6
47305: PUSH
47306: EMPTY
47307: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
47308: LD_VAR 0 1
47312: PPUSH
47313: LD_VAR 0 2
47317: PPUSH
47318: LD_VAR 0 3
47322: PPUSH
47323: LD_VAR 0 4
47327: PPUSH
47328: LD_VAR 0 5
47332: PPUSH
47333: CALL_OW 448
47337: IFFALSE 47370
// result := [ chassis , engine , control , weapon ] ;
47339: LD_ADDR_VAR 0 6
47343: PUSH
47344: LD_VAR 0 2
47348: PUSH
47349: LD_VAR 0 3
47353: PUSH
47354: LD_VAR 0 4
47358: PUSH
47359: LD_VAR 0 5
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: ST_TO_ADDR
// end ;
47370: LD_VAR 0 6
47374: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
47375: LD_INT 0
47377: PPUSH
// if not chassis or not engine then
47378: LD_VAR 0 1
47382: NOT
47383: PUSH
47384: LD_VAR 0 2
47388: NOT
47389: OR
47390: IFFALSE 47394
// exit ;
47392: GO 47590
// case engine of engine_solar :
47394: LD_VAR 0 2
47398: PUSH
47399: LD_INT 2
47401: DOUBLE
47402: EQUAL
47403: IFTRUE 47407
47405: GO 47445
47407: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
47408: LD_ADDR_VAR 0 3
47412: PUSH
47413: LD_INT 11
47415: PUSH
47416: LD_INT 12
47418: PUSH
47419: LD_INT 13
47421: PUSH
47422: LD_INT 14
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: LD_INT 2
47430: PUSH
47431: LD_INT 3
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: ST_TO_ADDR
47443: GO 47574
47445: LD_INT 1
47447: DOUBLE
47448: EQUAL
47449: IFTRUE 47453
47451: GO 47515
47453: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
47454: LD_ADDR_VAR 0 3
47458: PUSH
47459: LD_INT 11
47461: PUSH
47462: LD_INT 12
47464: PUSH
47465: LD_INT 13
47467: PUSH
47468: LD_INT 14
47470: PUSH
47471: LD_INT 1
47473: PUSH
47474: LD_INT 2
47476: PUSH
47477: LD_INT 3
47479: PUSH
47480: LD_INT 4
47482: PUSH
47483: LD_INT 5
47485: PUSH
47486: LD_INT 21
47488: PUSH
47489: LD_INT 23
47491: PUSH
47492: LD_INT 22
47494: PUSH
47495: LD_INT 24
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: ST_TO_ADDR
47513: GO 47574
47515: LD_INT 3
47517: DOUBLE
47518: EQUAL
47519: IFTRUE 47523
47521: GO 47573
47523: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
47524: LD_ADDR_VAR 0 3
47528: PUSH
47529: LD_INT 13
47531: PUSH
47532: LD_INT 14
47534: PUSH
47535: LD_INT 2
47537: PUSH
47538: LD_INT 3
47540: PUSH
47541: LD_INT 4
47543: PUSH
47544: LD_INT 5
47546: PUSH
47547: LD_INT 21
47549: PUSH
47550: LD_INT 22
47552: PUSH
47553: LD_INT 23
47555: PUSH
47556: LD_INT 24
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: ST_TO_ADDR
47571: GO 47574
47573: POP
// result := ( chassis in result ) ;
47574: LD_ADDR_VAR 0 3
47578: PUSH
47579: LD_VAR 0 1
47583: PUSH
47584: LD_VAR 0 3
47588: IN
47589: ST_TO_ADDR
// end ;
47590: LD_VAR 0 3
47594: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
47595: LD_INT 0
47597: PPUSH
// if not chassis or not weapon then
47598: LD_VAR 0 1
47602: NOT
47603: PUSH
47604: LD_VAR 0 2
47608: NOT
47609: OR
47610: IFFALSE 47614
// exit ;
47612: GO 48674
// case weapon of us_machine_gun :
47614: LD_VAR 0 2
47618: PUSH
47619: LD_INT 2
47621: DOUBLE
47622: EQUAL
47623: IFTRUE 47627
47625: GO 47657
47627: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
47628: LD_ADDR_VAR 0 3
47632: PUSH
47633: LD_INT 1
47635: PUSH
47636: LD_INT 2
47638: PUSH
47639: LD_INT 3
47641: PUSH
47642: LD_INT 4
47644: PUSH
47645: LD_INT 5
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: ST_TO_ADDR
47655: GO 48658
47657: LD_INT 3
47659: DOUBLE
47660: EQUAL
47661: IFTRUE 47665
47663: GO 47695
47665: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
47666: LD_ADDR_VAR 0 3
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: LD_INT 2
47676: PUSH
47677: LD_INT 3
47679: PUSH
47680: LD_INT 4
47682: PUSH
47683: LD_INT 5
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: ST_TO_ADDR
47693: GO 48658
47695: LD_INT 11
47697: DOUBLE
47698: EQUAL
47699: IFTRUE 47703
47701: GO 47733
47703: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
47704: LD_ADDR_VAR 0 3
47708: PUSH
47709: LD_INT 1
47711: PUSH
47712: LD_INT 2
47714: PUSH
47715: LD_INT 3
47717: PUSH
47718: LD_INT 4
47720: PUSH
47721: LD_INT 5
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: ST_TO_ADDR
47731: GO 48658
47733: LD_INT 4
47735: DOUBLE
47736: EQUAL
47737: IFTRUE 47741
47739: GO 47767
47741: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
47742: LD_ADDR_VAR 0 3
47746: PUSH
47747: LD_INT 2
47749: PUSH
47750: LD_INT 3
47752: PUSH
47753: LD_INT 4
47755: PUSH
47756: LD_INT 5
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: ST_TO_ADDR
47765: GO 48658
47767: LD_INT 5
47769: DOUBLE
47770: EQUAL
47771: IFTRUE 47775
47773: GO 47801
47775: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
47776: LD_ADDR_VAR 0 3
47780: PUSH
47781: LD_INT 2
47783: PUSH
47784: LD_INT 3
47786: PUSH
47787: LD_INT 4
47789: PUSH
47790: LD_INT 5
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: ST_TO_ADDR
47799: GO 48658
47801: LD_INT 9
47803: DOUBLE
47804: EQUAL
47805: IFTRUE 47809
47807: GO 47835
47809: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
47810: LD_ADDR_VAR 0 3
47814: PUSH
47815: LD_INT 2
47817: PUSH
47818: LD_INT 3
47820: PUSH
47821: LD_INT 4
47823: PUSH
47824: LD_INT 5
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: ST_TO_ADDR
47833: GO 48658
47835: LD_INT 7
47837: DOUBLE
47838: EQUAL
47839: IFTRUE 47843
47841: GO 47869
47843: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
47844: LD_ADDR_VAR 0 3
47848: PUSH
47849: LD_INT 2
47851: PUSH
47852: LD_INT 3
47854: PUSH
47855: LD_INT 4
47857: PUSH
47858: LD_INT 5
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: ST_TO_ADDR
47867: GO 48658
47869: LD_INT 12
47871: DOUBLE
47872: EQUAL
47873: IFTRUE 47877
47875: GO 47903
47877: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
47878: LD_ADDR_VAR 0 3
47882: PUSH
47883: LD_INT 2
47885: PUSH
47886: LD_INT 3
47888: PUSH
47889: LD_INT 4
47891: PUSH
47892: LD_INT 5
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: ST_TO_ADDR
47901: GO 48658
47903: LD_INT 13
47905: DOUBLE
47906: EQUAL
47907: IFTRUE 47911
47909: GO 47937
47911: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
47912: LD_ADDR_VAR 0 3
47916: PUSH
47917: LD_INT 2
47919: PUSH
47920: LD_INT 3
47922: PUSH
47923: LD_INT 4
47925: PUSH
47926: LD_INT 5
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: ST_TO_ADDR
47935: GO 48658
47937: LD_INT 14
47939: DOUBLE
47940: EQUAL
47941: IFTRUE 47945
47943: GO 47963
47945: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
47946: LD_ADDR_VAR 0 3
47950: PUSH
47951: LD_INT 4
47953: PUSH
47954: LD_INT 5
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: ST_TO_ADDR
47961: GO 48658
47963: LD_INT 6
47965: DOUBLE
47966: EQUAL
47967: IFTRUE 47971
47969: GO 47989
47971: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
47972: LD_ADDR_VAR 0 3
47976: PUSH
47977: LD_INT 4
47979: PUSH
47980: LD_INT 5
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: ST_TO_ADDR
47987: GO 48658
47989: LD_INT 10
47991: DOUBLE
47992: EQUAL
47993: IFTRUE 47997
47995: GO 48015
47997: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
47998: LD_ADDR_VAR 0 3
48002: PUSH
48003: LD_INT 4
48005: PUSH
48006: LD_INT 5
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: ST_TO_ADDR
48013: GO 48658
48015: LD_INT 22
48017: DOUBLE
48018: EQUAL
48019: IFTRUE 48023
48021: GO 48049
48023: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
48024: LD_ADDR_VAR 0 3
48028: PUSH
48029: LD_INT 11
48031: PUSH
48032: LD_INT 12
48034: PUSH
48035: LD_INT 13
48037: PUSH
48038: LD_INT 14
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: ST_TO_ADDR
48047: GO 48658
48049: LD_INT 23
48051: DOUBLE
48052: EQUAL
48053: IFTRUE 48057
48055: GO 48083
48057: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
48058: LD_ADDR_VAR 0 3
48062: PUSH
48063: LD_INT 11
48065: PUSH
48066: LD_INT 12
48068: PUSH
48069: LD_INT 13
48071: PUSH
48072: LD_INT 14
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: ST_TO_ADDR
48081: GO 48658
48083: LD_INT 24
48085: DOUBLE
48086: EQUAL
48087: IFTRUE 48091
48089: GO 48117
48091: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
48092: LD_ADDR_VAR 0 3
48096: PUSH
48097: LD_INT 11
48099: PUSH
48100: LD_INT 12
48102: PUSH
48103: LD_INT 13
48105: PUSH
48106: LD_INT 14
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: ST_TO_ADDR
48115: GO 48658
48117: LD_INT 30
48119: DOUBLE
48120: EQUAL
48121: IFTRUE 48125
48123: GO 48151
48125: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
48126: LD_ADDR_VAR 0 3
48130: PUSH
48131: LD_INT 11
48133: PUSH
48134: LD_INT 12
48136: PUSH
48137: LD_INT 13
48139: PUSH
48140: LD_INT 14
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: ST_TO_ADDR
48149: GO 48658
48151: LD_INT 25
48153: DOUBLE
48154: EQUAL
48155: IFTRUE 48159
48157: GO 48177
48159: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
48160: LD_ADDR_VAR 0 3
48164: PUSH
48165: LD_INT 13
48167: PUSH
48168: LD_INT 14
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: ST_TO_ADDR
48175: GO 48658
48177: LD_INT 27
48179: DOUBLE
48180: EQUAL
48181: IFTRUE 48185
48183: GO 48203
48185: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
48186: LD_ADDR_VAR 0 3
48190: PUSH
48191: LD_INT 13
48193: PUSH
48194: LD_INT 14
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: ST_TO_ADDR
48201: GO 48658
48203: LD_INT 92
48205: DOUBLE
48206: EQUAL
48207: IFTRUE 48211
48209: GO 48237
48211: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
48212: LD_ADDR_VAR 0 3
48216: PUSH
48217: LD_INT 11
48219: PUSH
48220: LD_INT 12
48222: PUSH
48223: LD_INT 13
48225: PUSH
48226: LD_INT 14
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: ST_TO_ADDR
48235: GO 48658
48237: LD_INT 28
48239: DOUBLE
48240: EQUAL
48241: IFTRUE 48245
48243: GO 48263
48245: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
48246: LD_ADDR_VAR 0 3
48250: PUSH
48251: LD_INT 13
48253: PUSH
48254: LD_INT 14
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: ST_TO_ADDR
48261: GO 48658
48263: LD_INT 29
48265: DOUBLE
48266: EQUAL
48267: IFTRUE 48271
48269: GO 48289
48271: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
48272: LD_ADDR_VAR 0 3
48276: PUSH
48277: LD_INT 13
48279: PUSH
48280: LD_INT 14
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: ST_TO_ADDR
48287: GO 48658
48289: LD_INT 31
48291: DOUBLE
48292: EQUAL
48293: IFTRUE 48297
48295: GO 48315
48297: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
48298: LD_ADDR_VAR 0 3
48302: PUSH
48303: LD_INT 13
48305: PUSH
48306: LD_INT 14
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: ST_TO_ADDR
48313: GO 48658
48315: LD_INT 26
48317: DOUBLE
48318: EQUAL
48319: IFTRUE 48323
48321: GO 48341
48323: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
48324: LD_ADDR_VAR 0 3
48328: PUSH
48329: LD_INT 13
48331: PUSH
48332: LD_INT 14
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: ST_TO_ADDR
48339: GO 48658
48341: LD_INT 42
48343: DOUBLE
48344: EQUAL
48345: IFTRUE 48349
48347: GO 48375
48349: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
48350: LD_ADDR_VAR 0 3
48354: PUSH
48355: LD_INT 21
48357: PUSH
48358: LD_INT 22
48360: PUSH
48361: LD_INT 23
48363: PUSH
48364: LD_INT 24
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: ST_TO_ADDR
48373: GO 48658
48375: LD_INT 43
48377: DOUBLE
48378: EQUAL
48379: IFTRUE 48383
48381: GO 48409
48383: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
48384: LD_ADDR_VAR 0 3
48388: PUSH
48389: LD_INT 21
48391: PUSH
48392: LD_INT 22
48394: PUSH
48395: LD_INT 23
48397: PUSH
48398: LD_INT 24
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: ST_TO_ADDR
48407: GO 48658
48409: LD_INT 44
48411: DOUBLE
48412: EQUAL
48413: IFTRUE 48417
48415: GO 48443
48417: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
48418: LD_ADDR_VAR 0 3
48422: PUSH
48423: LD_INT 21
48425: PUSH
48426: LD_INT 22
48428: PUSH
48429: LD_INT 23
48431: PUSH
48432: LD_INT 24
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: ST_TO_ADDR
48441: GO 48658
48443: LD_INT 45
48445: DOUBLE
48446: EQUAL
48447: IFTRUE 48451
48449: GO 48477
48451: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
48452: LD_ADDR_VAR 0 3
48456: PUSH
48457: LD_INT 21
48459: PUSH
48460: LD_INT 22
48462: PUSH
48463: LD_INT 23
48465: PUSH
48466: LD_INT 24
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: ST_TO_ADDR
48475: GO 48658
48477: LD_INT 49
48479: DOUBLE
48480: EQUAL
48481: IFTRUE 48485
48483: GO 48511
48485: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
48486: LD_ADDR_VAR 0 3
48490: PUSH
48491: LD_INT 21
48493: PUSH
48494: LD_INT 22
48496: PUSH
48497: LD_INT 23
48499: PUSH
48500: LD_INT 24
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: ST_TO_ADDR
48509: GO 48658
48511: LD_INT 51
48513: DOUBLE
48514: EQUAL
48515: IFTRUE 48519
48517: GO 48545
48519: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
48520: LD_ADDR_VAR 0 3
48524: PUSH
48525: LD_INT 21
48527: PUSH
48528: LD_INT 22
48530: PUSH
48531: LD_INT 23
48533: PUSH
48534: LD_INT 24
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: ST_TO_ADDR
48543: GO 48658
48545: LD_INT 52
48547: DOUBLE
48548: EQUAL
48549: IFTRUE 48553
48551: GO 48579
48553: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
48554: LD_ADDR_VAR 0 3
48558: PUSH
48559: LD_INT 21
48561: PUSH
48562: LD_INT 22
48564: PUSH
48565: LD_INT 23
48567: PUSH
48568: LD_INT 24
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: ST_TO_ADDR
48577: GO 48658
48579: LD_INT 53
48581: DOUBLE
48582: EQUAL
48583: IFTRUE 48587
48585: GO 48605
48587: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
48588: LD_ADDR_VAR 0 3
48592: PUSH
48593: LD_INT 23
48595: PUSH
48596: LD_INT 24
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: ST_TO_ADDR
48603: GO 48658
48605: LD_INT 46
48607: DOUBLE
48608: EQUAL
48609: IFTRUE 48613
48611: GO 48631
48613: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
48614: LD_ADDR_VAR 0 3
48618: PUSH
48619: LD_INT 23
48621: PUSH
48622: LD_INT 24
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: ST_TO_ADDR
48629: GO 48658
48631: LD_INT 47
48633: DOUBLE
48634: EQUAL
48635: IFTRUE 48639
48637: GO 48657
48639: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
48640: LD_ADDR_VAR 0 3
48644: PUSH
48645: LD_INT 23
48647: PUSH
48648: LD_INT 24
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: ST_TO_ADDR
48655: GO 48658
48657: POP
// result := ( chassis in result ) ;
48658: LD_ADDR_VAR 0 3
48662: PUSH
48663: LD_VAR 0 1
48667: PUSH
48668: LD_VAR 0 3
48672: IN
48673: ST_TO_ADDR
// end ;
48674: LD_VAR 0 3
48678: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
48679: LD_INT 0
48681: PPUSH
48682: PPUSH
48683: PPUSH
48684: PPUSH
48685: PPUSH
48686: PPUSH
48687: PPUSH
// result := array ;
48688: LD_ADDR_VAR 0 5
48692: PUSH
48693: LD_VAR 0 1
48697: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
48698: LD_VAR 0 1
48702: NOT
48703: PUSH
48704: LD_VAR 0 2
48708: NOT
48709: OR
48710: PUSH
48711: LD_VAR 0 3
48715: NOT
48716: OR
48717: PUSH
48718: LD_VAR 0 2
48722: PUSH
48723: LD_VAR 0 1
48727: GREATER
48728: OR
48729: PUSH
48730: LD_VAR 0 3
48734: PUSH
48735: LD_VAR 0 1
48739: GREATER
48740: OR
48741: IFFALSE 48745
// exit ;
48743: GO 49041
// if direction then
48745: LD_VAR 0 4
48749: IFFALSE 48813
// begin d := 1 ;
48751: LD_ADDR_VAR 0 9
48755: PUSH
48756: LD_INT 1
48758: ST_TO_ADDR
// if i_from > i_to then
48759: LD_VAR 0 2
48763: PUSH
48764: LD_VAR 0 3
48768: GREATER
48769: IFFALSE 48795
// length := ( array - i_from ) + i_to else
48771: LD_ADDR_VAR 0 11
48775: PUSH
48776: LD_VAR 0 1
48780: PUSH
48781: LD_VAR 0 2
48785: MINUS
48786: PUSH
48787: LD_VAR 0 3
48791: PLUS
48792: ST_TO_ADDR
48793: GO 48811
// length := i_to - i_from ;
48795: LD_ADDR_VAR 0 11
48799: PUSH
48800: LD_VAR 0 3
48804: PUSH
48805: LD_VAR 0 2
48809: MINUS
48810: ST_TO_ADDR
// end else
48811: GO 48874
// begin d := - 1 ;
48813: LD_ADDR_VAR 0 9
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: ST_TO_ADDR
// if i_from > i_to then
48822: LD_VAR 0 2
48826: PUSH
48827: LD_VAR 0 3
48831: GREATER
48832: IFFALSE 48852
// length := i_from - i_to else
48834: LD_ADDR_VAR 0 11
48838: PUSH
48839: LD_VAR 0 2
48843: PUSH
48844: LD_VAR 0 3
48848: MINUS
48849: ST_TO_ADDR
48850: GO 48874
// length := ( array - i_to ) + i_from ;
48852: LD_ADDR_VAR 0 11
48856: PUSH
48857: LD_VAR 0 1
48861: PUSH
48862: LD_VAR 0 3
48866: MINUS
48867: PUSH
48868: LD_VAR 0 2
48872: PLUS
48873: ST_TO_ADDR
// end ; if not length then
48874: LD_VAR 0 11
48878: NOT
48879: IFFALSE 48883
// exit ;
48881: GO 49041
// tmp := array ;
48883: LD_ADDR_VAR 0 10
48887: PUSH
48888: LD_VAR 0 1
48892: ST_TO_ADDR
// for i = 1 to length do
48893: LD_ADDR_VAR 0 6
48897: PUSH
48898: DOUBLE
48899: LD_INT 1
48901: DEC
48902: ST_TO_ADDR
48903: LD_VAR 0 11
48907: PUSH
48908: FOR_TO
48909: IFFALSE 49029
// begin for j = 1 to array do
48911: LD_ADDR_VAR 0 7
48915: PUSH
48916: DOUBLE
48917: LD_INT 1
48919: DEC
48920: ST_TO_ADDR
48921: LD_VAR 0 1
48925: PUSH
48926: FOR_TO
48927: IFFALSE 49015
// begin k := j + d ;
48929: LD_ADDR_VAR 0 8
48933: PUSH
48934: LD_VAR 0 7
48938: PUSH
48939: LD_VAR 0 9
48943: PLUS
48944: ST_TO_ADDR
// if k > array then
48945: LD_VAR 0 8
48949: PUSH
48950: LD_VAR 0 1
48954: GREATER
48955: IFFALSE 48965
// k := 1 ;
48957: LD_ADDR_VAR 0 8
48961: PUSH
48962: LD_INT 1
48964: ST_TO_ADDR
// if not k then
48965: LD_VAR 0 8
48969: NOT
48970: IFFALSE 48982
// k := array ;
48972: LD_ADDR_VAR 0 8
48976: PUSH
48977: LD_VAR 0 1
48981: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
48982: LD_ADDR_VAR 0 10
48986: PUSH
48987: LD_VAR 0 10
48991: PPUSH
48992: LD_VAR 0 8
48996: PPUSH
48997: LD_VAR 0 1
49001: PUSH
49002: LD_VAR 0 7
49006: ARRAY
49007: PPUSH
49008: CALL_OW 1
49012: ST_TO_ADDR
// end ;
49013: GO 48926
49015: POP
49016: POP
// array := tmp ;
49017: LD_ADDR_VAR 0 1
49021: PUSH
49022: LD_VAR 0 10
49026: ST_TO_ADDR
// end ;
49027: GO 48908
49029: POP
49030: POP
// result := array ;
49031: LD_ADDR_VAR 0 5
49035: PUSH
49036: LD_VAR 0 1
49040: ST_TO_ADDR
// end ;
49041: LD_VAR 0 5
49045: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
49046: LD_INT 0
49048: PPUSH
49049: PPUSH
// result := 0 ;
49050: LD_ADDR_VAR 0 3
49054: PUSH
49055: LD_INT 0
49057: ST_TO_ADDR
// if not array or not value in array then
49058: LD_VAR 0 1
49062: NOT
49063: PUSH
49064: LD_VAR 0 2
49068: PUSH
49069: LD_VAR 0 1
49073: IN
49074: NOT
49075: OR
49076: IFFALSE 49080
// exit ;
49078: GO 49134
// for i = 1 to array do
49080: LD_ADDR_VAR 0 4
49084: PUSH
49085: DOUBLE
49086: LD_INT 1
49088: DEC
49089: ST_TO_ADDR
49090: LD_VAR 0 1
49094: PUSH
49095: FOR_TO
49096: IFFALSE 49132
// if value = array [ i ] then
49098: LD_VAR 0 2
49102: PUSH
49103: LD_VAR 0 1
49107: PUSH
49108: LD_VAR 0 4
49112: ARRAY
49113: EQUAL
49114: IFFALSE 49130
// begin result := i ;
49116: LD_ADDR_VAR 0 3
49120: PUSH
49121: LD_VAR 0 4
49125: ST_TO_ADDR
// exit ;
49126: POP
49127: POP
49128: GO 49134
// end ;
49130: GO 49095
49132: POP
49133: POP
// end ;
49134: LD_VAR 0 3
49138: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
49139: LD_INT 0
49141: PPUSH
// vc_chassis := chassis ;
49142: LD_ADDR_OWVAR 37
49146: PUSH
49147: LD_VAR 0 1
49151: ST_TO_ADDR
// vc_engine := engine ;
49152: LD_ADDR_OWVAR 39
49156: PUSH
49157: LD_VAR 0 2
49161: ST_TO_ADDR
// vc_control := control ;
49162: LD_ADDR_OWVAR 38
49166: PUSH
49167: LD_VAR 0 3
49171: ST_TO_ADDR
// vc_weapon := weapon ;
49172: LD_ADDR_OWVAR 40
49176: PUSH
49177: LD_VAR 0 4
49181: ST_TO_ADDR
// vc_fuel_battery := fuel ;
49182: LD_ADDR_OWVAR 41
49186: PUSH
49187: LD_VAR 0 5
49191: ST_TO_ADDR
// end ;
49192: LD_VAR 0 6
49196: RET
// export function WantPlant ( unit ) ; var task ; begin
49197: LD_INT 0
49199: PPUSH
49200: PPUSH
// result := false ;
49201: LD_ADDR_VAR 0 2
49205: PUSH
49206: LD_INT 0
49208: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
49209: LD_ADDR_VAR 0 3
49213: PUSH
49214: LD_VAR 0 1
49218: PPUSH
49219: CALL_OW 437
49223: ST_TO_ADDR
// if task then
49224: LD_VAR 0 3
49228: IFFALSE 49256
// if task [ 1 ] [ 1 ] = p then
49230: LD_VAR 0 3
49234: PUSH
49235: LD_INT 1
49237: ARRAY
49238: PUSH
49239: LD_INT 1
49241: ARRAY
49242: PUSH
49243: LD_STRING p
49245: EQUAL
49246: IFFALSE 49256
// result := true ;
49248: LD_ADDR_VAR 0 2
49252: PUSH
49253: LD_INT 1
49255: ST_TO_ADDR
// end ;
49256: LD_VAR 0 2
49260: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
49261: LD_INT 0
49263: PPUSH
49264: PPUSH
49265: PPUSH
49266: PPUSH
// if pos < 1 then
49267: LD_VAR 0 2
49271: PUSH
49272: LD_INT 1
49274: LESS
49275: IFFALSE 49279
// exit ;
49277: GO 49582
// if pos = 1 then
49279: LD_VAR 0 2
49283: PUSH
49284: LD_INT 1
49286: EQUAL
49287: IFFALSE 49320
// result := Replace ( arr , pos [ 1 ] , value ) else
49289: LD_ADDR_VAR 0 4
49293: PUSH
49294: LD_VAR 0 1
49298: PPUSH
49299: LD_VAR 0 2
49303: PUSH
49304: LD_INT 1
49306: ARRAY
49307: PPUSH
49308: LD_VAR 0 3
49312: PPUSH
49313: CALL_OW 1
49317: ST_TO_ADDR
49318: GO 49582
// begin tmp := arr ;
49320: LD_ADDR_VAR 0 6
49324: PUSH
49325: LD_VAR 0 1
49329: ST_TO_ADDR
// s_arr := [ tmp ] ;
49330: LD_ADDR_VAR 0 7
49334: PUSH
49335: LD_VAR 0 6
49339: PUSH
49340: EMPTY
49341: LIST
49342: ST_TO_ADDR
// for i = 1 to pos - 1 do
49343: LD_ADDR_VAR 0 5
49347: PUSH
49348: DOUBLE
49349: LD_INT 1
49351: DEC
49352: ST_TO_ADDR
49353: LD_VAR 0 2
49357: PUSH
49358: LD_INT 1
49360: MINUS
49361: PUSH
49362: FOR_TO
49363: IFFALSE 49408
// begin tmp := tmp [ pos [ i ] ] ;
49365: LD_ADDR_VAR 0 6
49369: PUSH
49370: LD_VAR 0 6
49374: PUSH
49375: LD_VAR 0 2
49379: PUSH
49380: LD_VAR 0 5
49384: ARRAY
49385: ARRAY
49386: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
49387: LD_ADDR_VAR 0 7
49391: PUSH
49392: LD_VAR 0 7
49396: PUSH
49397: LD_VAR 0 6
49401: PUSH
49402: EMPTY
49403: LIST
49404: ADD
49405: ST_TO_ADDR
// end ;
49406: GO 49362
49408: POP
49409: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
49410: LD_ADDR_VAR 0 6
49414: PUSH
49415: LD_VAR 0 6
49419: PPUSH
49420: LD_VAR 0 2
49424: PUSH
49425: LD_VAR 0 2
49429: ARRAY
49430: PPUSH
49431: LD_VAR 0 3
49435: PPUSH
49436: CALL_OW 1
49440: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
49441: LD_ADDR_VAR 0 7
49445: PUSH
49446: LD_VAR 0 7
49450: PPUSH
49451: LD_VAR 0 7
49455: PPUSH
49456: LD_VAR 0 6
49460: PPUSH
49461: CALL_OW 1
49465: ST_TO_ADDR
// for i = s_arr downto 2 do
49466: LD_ADDR_VAR 0 5
49470: PUSH
49471: DOUBLE
49472: LD_VAR 0 7
49476: INC
49477: ST_TO_ADDR
49478: LD_INT 2
49480: PUSH
49481: FOR_DOWNTO
49482: IFFALSE 49566
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
49484: LD_ADDR_VAR 0 6
49488: PUSH
49489: LD_VAR 0 7
49493: PUSH
49494: LD_VAR 0 5
49498: PUSH
49499: LD_INT 1
49501: MINUS
49502: ARRAY
49503: PPUSH
49504: LD_VAR 0 2
49508: PUSH
49509: LD_VAR 0 5
49513: PUSH
49514: LD_INT 1
49516: MINUS
49517: ARRAY
49518: PPUSH
49519: LD_VAR 0 7
49523: PUSH
49524: LD_VAR 0 5
49528: ARRAY
49529: PPUSH
49530: CALL_OW 1
49534: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
49535: LD_ADDR_VAR 0 7
49539: PUSH
49540: LD_VAR 0 7
49544: PPUSH
49545: LD_VAR 0 5
49549: PUSH
49550: LD_INT 1
49552: MINUS
49553: PPUSH
49554: LD_VAR 0 6
49558: PPUSH
49559: CALL_OW 1
49563: ST_TO_ADDR
// end ;
49564: GO 49481
49566: POP
49567: POP
// result := s_arr [ 1 ] ;
49568: LD_ADDR_VAR 0 4
49572: PUSH
49573: LD_VAR 0 7
49577: PUSH
49578: LD_INT 1
49580: ARRAY
49581: ST_TO_ADDR
// end ; end ;
49582: LD_VAR 0 4
49586: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
49587: LD_INT 0
49589: PPUSH
49590: PPUSH
// if not list then
49591: LD_VAR 0 1
49595: NOT
49596: IFFALSE 49600
// exit ;
49598: GO 49691
// i := list [ pos1 ] ;
49600: LD_ADDR_VAR 0 5
49604: PUSH
49605: LD_VAR 0 1
49609: PUSH
49610: LD_VAR 0 2
49614: ARRAY
49615: ST_TO_ADDR
// if not i then
49616: LD_VAR 0 5
49620: NOT
49621: IFFALSE 49625
// exit ;
49623: GO 49691
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
49625: LD_ADDR_VAR 0 1
49629: PUSH
49630: LD_VAR 0 1
49634: PPUSH
49635: LD_VAR 0 2
49639: PPUSH
49640: LD_VAR 0 1
49644: PUSH
49645: LD_VAR 0 3
49649: ARRAY
49650: PPUSH
49651: CALL_OW 1
49655: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
49656: LD_ADDR_VAR 0 1
49660: PUSH
49661: LD_VAR 0 1
49665: PPUSH
49666: LD_VAR 0 3
49670: PPUSH
49671: LD_VAR 0 5
49675: PPUSH
49676: CALL_OW 1
49680: ST_TO_ADDR
// result := list ;
49681: LD_ADDR_VAR 0 4
49685: PUSH
49686: LD_VAR 0 1
49690: ST_TO_ADDR
// end ;
49691: LD_VAR 0 4
49695: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
49696: LD_INT 0
49698: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
49699: LD_ADDR_VAR 0 5
49703: PUSH
49704: LD_VAR 0 1
49708: PPUSH
49709: CALL_OW 250
49713: PPUSH
49714: LD_VAR 0 1
49718: PPUSH
49719: CALL_OW 251
49723: PPUSH
49724: LD_VAR 0 2
49728: PPUSH
49729: LD_VAR 0 3
49733: PPUSH
49734: LD_VAR 0 4
49738: PPUSH
49739: CALL 49749 0 5
49743: ST_TO_ADDR
// end ;
49744: LD_VAR 0 5
49748: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
49749: LD_INT 0
49751: PPUSH
49752: PPUSH
49753: PPUSH
49754: PPUSH
// if not list then
49755: LD_VAR 0 3
49759: NOT
49760: IFFALSE 49764
// exit ;
49762: GO 50152
// result := [ ] ;
49764: LD_ADDR_VAR 0 6
49768: PUSH
49769: EMPTY
49770: ST_TO_ADDR
// for i in list do
49771: LD_ADDR_VAR 0 7
49775: PUSH
49776: LD_VAR 0 3
49780: PUSH
49781: FOR_IN
49782: IFFALSE 49984
// begin tmp := GetDistUnitXY ( i , x , y ) ;
49784: LD_ADDR_VAR 0 9
49788: PUSH
49789: LD_VAR 0 7
49793: PPUSH
49794: LD_VAR 0 1
49798: PPUSH
49799: LD_VAR 0 2
49803: PPUSH
49804: CALL_OW 297
49808: ST_TO_ADDR
// if not result then
49809: LD_VAR 0 6
49813: NOT
49814: IFFALSE 49840
// result := [ [ i , tmp ] ] else
49816: LD_ADDR_VAR 0 6
49820: PUSH
49821: LD_VAR 0 7
49825: PUSH
49826: LD_VAR 0 9
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: EMPTY
49836: LIST
49837: ST_TO_ADDR
49838: GO 49982
// begin if result [ result ] [ 2 ] < tmp then
49840: LD_VAR 0 6
49844: PUSH
49845: LD_VAR 0 6
49849: ARRAY
49850: PUSH
49851: LD_INT 2
49853: ARRAY
49854: PUSH
49855: LD_VAR 0 9
49859: LESS
49860: IFFALSE 49902
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
49862: LD_ADDR_VAR 0 6
49866: PUSH
49867: LD_VAR 0 6
49871: PPUSH
49872: LD_VAR 0 6
49876: PUSH
49877: LD_INT 1
49879: PLUS
49880: PPUSH
49881: LD_VAR 0 7
49885: PUSH
49886: LD_VAR 0 9
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PPUSH
49895: CALL_OW 2
49899: ST_TO_ADDR
49900: GO 49982
// for j = 1 to result do
49902: LD_ADDR_VAR 0 8
49906: PUSH
49907: DOUBLE
49908: LD_INT 1
49910: DEC
49911: ST_TO_ADDR
49912: LD_VAR 0 6
49916: PUSH
49917: FOR_TO
49918: IFFALSE 49980
// begin if tmp < result [ j ] [ 2 ] then
49920: LD_VAR 0 9
49924: PUSH
49925: LD_VAR 0 6
49929: PUSH
49930: LD_VAR 0 8
49934: ARRAY
49935: PUSH
49936: LD_INT 2
49938: ARRAY
49939: LESS
49940: IFFALSE 49978
// begin result := Insert ( result , j , [ i , tmp ] ) ;
49942: LD_ADDR_VAR 0 6
49946: PUSH
49947: LD_VAR 0 6
49951: PPUSH
49952: LD_VAR 0 8
49956: PPUSH
49957: LD_VAR 0 7
49961: PUSH
49962: LD_VAR 0 9
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PPUSH
49971: CALL_OW 2
49975: ST_TO_ADDR
// break ;
49976: GO 49980
// end ; end ;
49978: GO 49917
49980: POP
49981: POP
// end ; end ;
49982: GO 49781
49984: POP
49985: POP
// if result and not asc then
49986: LD_VAR 0 6
49990: PUSH
49991: LD_VAR 0 4
49995: NOT
49996: AND
49997: IFFALSE 50072
// begin tmp := result ;
49999: LD_ADDR_VAR 0 9
50003: PUSH
50004: LD_VAR 0 6
50008: ST_TO_ADDR
// for i = tmp downto 1 do
50009: LD_ADDR_VAR 0 7
50013: PUSH
50014: DOUBLE
50015: LD_VAR 0 9
50019: INC
50020: ST_TO_ADDR
50021: LD_INT 1
50023: PUSH
50024: FOR_DOWNTO
50025: IFFALSE 50070
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
50027: LD_ADDR_VAR 0 6
50031: PUSH
50032: LD_VAR 0 6
50036: PPUSH
50037: LD_VAR 0 9
50041: PUSH
50042: LD_VAR 0 7
50046: MINUS
50047: PUSH
50048: LD_INT 1
50050: PLUS
50051: PPUSH
50052: LD_VAR 0 9
50056: PUSH
50057: LD_VAR 0 7
50061: ARRAY
50062: PPUSH
50063: CALL_OW 1
50067: ST_TO_ADDR
50068: GO 50024
50070: POP
50071: POP
// end ; tmp := [ ] ;
50072: LD_ADDR_VAR 0 9
50076: PUSH
50077: EMPTY
50078: ST_TO_ADDR
// if mode then
50079: LD_VAR 0 5
50083: IFFALSE 50152
// begin for i = 1 to result do
50085: LD_ADDR_VAR 0 7
50089: PUSH
50090: DOUBLE
50091: LD_INT 1
50093: DEC
50094: ST_TO_ADDR
50095: LD_VAR 0 6
50099: PUSH
50100: FOR_TO
50101: IFFALSE 50140
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
50103: LD_ADDR_VAR 0 9
50107: PUSH
50108: LD_VAR 0 9
50112: PPUSH
50113: LD_VAR 0 7
50117: PPUSH
50118: LD_VAR 0 6
50122: PUSH
50123: LD_VAR 0 7
50127: ARRAY
50128: PUSH
50129: LD_INT 1
50131: ARRAY
50132: PPUSH
50133: CALL_OW 1
50137: ST_TO_ADDR
50138: GO 50100
50140: POP
50141: POP
// result := tmp ;
50142: LD_ADDR_VAR 0 6
50146: PUSH
50147: LD_VAR 0 9
50151: ST_TO_ADDR
// end ; end ;
50152: LD_VAR 0 6
50156: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
50157: LD_INT 0
50159: PPUSH
50160: PPUSH
50161: PPUSH
50162: PPUSH
50163: PPUSH
50164: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
50165: LD_ADDR_VAR 0 5
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: LD_INT 0
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: EMPTY
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: ST_TO_ADDR
// if not x or not y then
50187: LD_VAR 0 2
50191: NOT
50192: PUSH
50193: LD_VAR 0 3
50197: NOT
50198: OR
50199: IFFALSE 50203
// exit ;
50201: GO 51853
// if not range then
50203: LD_VAR 0 4
50207: NOT
50208: IFFALSE 50218
// range := 10 ;
50210: LD_ADDR_VAR 0 4
50214: PUSH
50215: LD_INT 10
50217: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
50218: LD_ADDR_VAR 0 8
50222: PUSH
50223: LD_INT 81
50225: PUSH
50226: LD_VAR 0 1
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 92
50237: PUSH
50238: LD_VAR 0 2
50242: PUSH
50243: LD_VAR 0 3
50247: PUSH
50248: LD_VAR 0 4
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 3
50261: PUSH
50262: LD_INT 21
50264: PUSH
50265: LD_INT 3
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: LIST
50280: PPUSH
50281: CALL_OW 69
50285: ST_TO_ADDR
// if not tmp then
50286: LD_VAR 0 8
50290: NOT
50291: IFFALSE 50295
// exit ;
50293: GO 51853
// for i in tmp do
50295: LD_ADDR_VAR 0 6
50299: PUSH
50300: LD_VAR 0 8
50304: PUSH
50305: FOR_IN
50306: IFFALSE 51828
// begin points := [ 0 , 0 , 0 ] ;
50308: LD_ADDR_VAR 0 9
50312: PUSH
50313: LD_INT 0
50315: PUSH
50316: LD_INT 0
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: LIST
50326: ST_TO_ADDR
// bpoints := 1 ;
50327: LD_ADDR_VAR 0 10
50331: PUSH
50332: LD_INT 1
50334: ST_TO_ADDR
// case GetType ( i ) of unit_human :
50335: LD_VAR 0 6
50339: PPUSH
50340: CALL_OW 247
50344: PUSH
50345: LD_INT 1
50347: DOUBLE
50348: EQUAL
50349: IFTRUE 50353
50351: GO 50931
50353: POP
// begin if GetClass ( i ) = 1 then
50354: LD_VAR 0 6
50358: PPUSH
50359: CALL_OW 257
50363: PUSH
50364: LD_INT 1
50366: EQUAL
50367: IFFALSE 50388
// points := [ 10 , 5 , 3 ] ;
50369: LD_ADDR_VAR 0 9
50373: PUSH
50374: LD_INT 10
50376: PUSH
50377: LD_INT 5
50379: PUSH
50380: LD_INT 3
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: LIST
50387: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
50388: LD_VAR 0 6
50392: PPUSH
50393: CALL_OW 257
50397: PUSH
50398: LD_INT 2
50400: PUSH
50401: LD_INT 3
50403: PUSH
50404: LD_INT 4
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: LIST
50411: IN
50412: IFFALSE 50433
// points := [ 3 , 2 , 1 ] ;
50414: LD_ADDR_VAR 0 9
50418: PUSH
50419: LD_INT 3
50421: PUSH
50422: LD_INT 2
50424: PUSH
50425: LD_INT 1
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: LIST
50432: ST_TO_ADDR
// if GetClass ( i ) = 5 then
50433: LD_VAR 0 6
50437: PPUSH
50438: CALL_OW 257
50442: PUSH
50443: LD_INT 5
50445: EQUAL
50446: IFFALSE 50467
// points := [ 130 , 5 , 2 ] ;
50448: LD_ADDR_VAR 0 9
50452: PUSH
50453: LD_INT 130
50455: PUSH
50456: LD_INT 5
50458: PUSH
50459: LD_INT 2
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: LIST
50466: ST_TO_ADDR
// if GetClass ( i ) = 8 then
50467: LD_VAR 0 6
50471: PPUSH
50472: CALL_OW 257
50476: PUSH
50477: LD_INT 8
50479: EQUAL
50480: IFFALSE 50501
// points := [ 35 , 35 , 30 ] ;
50482: LD_ADDR_VAR 0 9
50486: PUSH
50487: LD_INT 35
50489: PUSH
50490: LD_INT 35
50492: PUSH
50493: LD_INT 30
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: LIST
50500: ST_TO_ADDR
// if GetClass ( i ) = 9 then
50501: LD_VAR 0 6
50505: PPUSH
50506: CALL_OW 257
50510: PUSH
50511: LD_INT 9
50513: EQUAL
50514: IFFALSE 50535
// points := [ 20 , 55 , 40 ] ;
50516: LD_ADDR_VAR 0 9
50520: PUSH
50521: LD_INT 20
50523: PUSH
50524: LD_INT 55
50526: PUSH
50527: LD_INT 40
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: LIST
50534: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
50535: LD_VAR 0 6
50539: PPUSH
50540: CALL_OW 257
50544: PUSH
50545: LD_INT 12
50547: PUSH
50548: LD_INT 16
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: IN
50555: IFFALSE 50576
// points := [ 5 , 3 , 2 ] ;
50557: LD_ADDR_VAR 0 9
50561: PUSH
50562: LD_INT 5
50564: PUSH
50565: LD_INT 3
50567: PUSH
50568: LD_INT 2
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: LIST
50575: ST_TO_ADDR
// if GetClass ( i ) = 17 then
50576: LD_VAR 0 6
50580: PPUSH
50581: CALL_OW 257
50585: PUSH
50586: LD_INT 17
50588: EQUAL
50589: IFFALSE 50610
// points := [ 100 , 50 , 75 ] ;
50591: LD_ADDR_VAR 0 9
50595: PUSH
50596: LD_INT 100
50598: PUSH
50599: LD_INT 50
50601: PUSH
50602: LD_INT 75
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: LIST
50609: ST_TO_ADDR
// if GetClass ( i ) = 15 then
50610: LD_VAR 0 6
50614: PPUSH
50615: CALL_OW 257
50619: PUSH
50620: LD_INT 15
50622: EQUAL
50623: IFFALSE 50644
// points := [ 10 , 5 , 3 ] ;
50625: LD_ADDR_VAR 0 9
50629: PUSH
50630: LD_INT 10
50632: PUSH
50633: LD_INT 5
50635: PUSH
50636: LD_INT 3
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: LIST
50643: ST_TO_ADDR
// if GetClass ( i ) = 14 then
50644: LD_VAR 0 6
50648: PPUSH
50649: CALL_OW 257
50653: PUSH
50654: LD_INT 14
50656: EQUAL
50657: IFFALSE 50678
// points := [ 10 , 0 , 0 ] ;
50659: LD_ADDR_VAR 0 9
50663: PUSH
50664: LD_INT 10
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: LIST
50677: ST_TO_ADDR
// if GetClass ( i ) = 11 then
50678: LD_VAR 0 6
50682: PPUSH
50683: CALL_OW 257
50687: PUSH
50688: LD_INT 11
50690: EQUAL
50691: IFFALSE 50712
// points := [ 30 , 10 , 5 ] ;
50693: LD_ADDR_VAR 0 9
50697: PUSH
50698: LD_INT 30
50700: PUSH
50701: LD_INT 10
50703: PUSH
50704: LD_INT 5
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: LIST
50711: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
50712: LD_VAR 0 1
50716: PPUSH
50717: LD_INT 5
50719: PPUSH
50720: CALL_OW 321
50724: PUSH
50725: LD_INT 2
50727: EQUAL
50728: IFFALSE 50745
// bpoints := bpoints * 1.8 ;
50730: LD_ADDR_VAR 0 10
50734: PUSH
50735: LD_VAR 0 10
50739: PUSH
50740: LD_REAL  1.80000000000000E+0000
50743: MUL
50744: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
50745: LD_VAR 0 6
50749: PPUSH
50750: CALL_OW 257
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: LD_INT 2
50760: PUSH
50761: LD_INT 3
50763: PUSH
50764: LD_INT 4
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: IN
50773: PUSH
50774: LD_VAR 0 1
50778: PPUSH
50779: LD_INT 51
50781: PPUSH
50782: CALL_OW 321
50786: PUSH
50787: LD_INT 2
50789: EQUAL
50790: AND
50791: IFFALSE 50808
// bpoints := bpoints * 1.2 ;
50793: LD_ADDR_VAR 0 10
50797: PUSH
50798: LD_VAR 0 10
50802: PUSH
50803: LD_REAL  1.20000000000000E+0000
50806: MUL
50807: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
50808: LD_VAR 0 6
50812: PPUSH
50813: CALL_OW 257
50817: PUSH
50818: LD_INT 5
50820: PUSH
50821: LD_INT 7
50823: PUSH
50824: LD_INT 9
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: LIST
50831: IN
50832: PUSH
50833: LD_VAR 0 1
50837: PPUSH
50838: LD_INT 52
50840: PPUSH
50841: CALL_OW 321
50845: PUSH
50846: LD_INT 2
50848: EQUAL
50849: AND
50850: IFFALSE 50867
// bpoints := bpoints * 1.5 ;
50852: LD_ADDR_VAR 0 10
50856: PUSH
50857: LD_VAR 0 10
50861: PUSH
50862: LD_REAL  1.50000000000000E+0000
50865: MUL
50866: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
50867: LD_VAR 0 1
50871: PPUSH
50872: LD_INT 66
50874: PPUSH
50875: CALL_OW 321
50879: PUSH
50880: LD_INT 2
50882: EQUAL
50883: IFFALSE 50900
// bpoints := bpoints * 1.1 ;
50885: LD_ADDR_VAR 0 10
50889: PUSH
50890: LD_VAR 0 10
50894: PUSH
50895: LD_REAL  1.10000000000000E+0000
50898: MUL
50899: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
50900: LD_ADDR_VAR 0 10
50904: PUSH
50905: LD_VAR 0 10
50909: PUSH
50910: LD_VAR 0 6
50914: PPUSH
50915: LD_INT 1
50917: PPUSH
50918: CALL_OW 259
50922: PUSH
50923: LD_REAL  1.15000000000000E+0000
50926: MUL
50927: MUL
50928: ST_TO_ADDR
// end ; unit_vehicle :
50929: GO 51757
50931: LD_INT 2
50933: DOUBLE
50934: EQUAL
50935: IFTRUE 50939
50937: GO 51745
50939: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
50940: LD_VAR 0 6
50944: PPUSH
50945: CALL_OW 264
50949: PUSH
50950: LD_INT 2
50952: PUSH
50953: LD_INT 42
50955: PUSH
50956: LD_INT 24
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: LIST
50963: IN
50964: IFFALSE 50985
// points := [ 25 , 5 , 3 ] ;
50966: LD_ADDR_VAR 0 9
50970: PUSH
50971: LD_INT 25
50973: PUSH
50974: LD_INT 5
50976: PUSH
50977: LD_INT 3
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: LIST
50984: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
50985: LD_VAR 0 6
50989: PPUSH
50990: CALL_OW 264
50994: PUSH
50995: LD_INT 4
50997: PUSH
50998: LD_INT 43
51000: PUSH
51001: LD_INT 25
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: LIST
51008: IN
51009: IFFALSE 51030
// points := [ 40 , 15 , 5 ] ;
51011: LD_ADDR_VAR 0 9
51015: PUSH
51016: LD_INT 40
51018: PUSH
51019: LD_INT 15
51021: PUSH
51022: LD_INT 5
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: LIST
51029: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
51030: LD_VAR 0 6
51034: PPUSH
51035: CALL_OW 264
51039: PUSH
51040: LD_INT 3
51042: PUSH
51043: LD_INT 23
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: IN
51050: IFFALSE 51071
// points := [ 7 , 25 , 8 ] ;
51052: LD_ADDR_VAR 0 9
51056: PUSH
51057: LD_INT 7
51059: PUSH
51060: LD_INT 25
51062: PUSH
51063: LD_INT 8
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: LIST
51070: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
51071: LD_VAR 0 6
51075: PPUSH
51076: CALL_OW 264
51080: PUSH
51081: LD_INT 5
51083: PUSH
51084: LD_INT 27
51086: PUSH
51087: LD_INT 44
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: LIST
51094: IN
51095: IFFALSE 51116
// points := [ 14 , 50 , 16 ] ;
51097: LD_ADDR_VAR 0 9
51101: PUSH
51102: LD_INT 14
51104: PUSH
51105: LD_INT 50
51107: PUSH
51108: LD_INT 16
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: LIST
51115: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
51116: LD_VAR 0 6
51120: PPUSH
51121: CALL_OW 264
51125: PUSH
51126: LD_INT 6
51128: PUSH
51129: LD_INT 46
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: IN
51136: IFFALSE 51157
// points := [ 32 , 120 , 70 ] ;
51138: LD_ADDR_VAR 0 9
51142: PUSH
51143: LD_INT 32
51145: PUSH
51146: LD_INT 120
51148: PUSH
51149: LD_INT 70
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: LIST
51156: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
51157: LD_VAR 0 6
51161: PPUSH
51162: CALL_OW 264
51166: PUSH
51167: LD_INT 7
51169: PUSH
51170: LD_INT 28
51172: PUSH
51173: LD_INT 45
51175: PUSH
51176: LD_INT 92
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: IN
51185: IFFALSE 51206
// points := [ 35 , 20 , 45 ] ;
51187: LD_ADDR_VAR 0 9
51191: PUSH
51192: LD_INT 35
51194: PUSH
51195: LD_INT 20
51197: PUSH
51198: LD_INT 45
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: LIST
51205: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
51206: LD_VAR 0 6
51210: PPUSH
51211: CALL_OW 264
51215: PUSH
51216: LD_INT 47
51218: PUSH
51219: EMPTY
51220: LIST
51221: IN
51222: IFFALSE 51243
// points := [ 67 , 45 , 75 ] ;
51224: LD_ADDR_VAR 0 9
51228: PUSH
51229: LD_INT 67
51231: PUSH
51232: LD_INT 45
51234: PUSH
51235: LD_INT 75
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: LIST
51242: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
51243: LD_VAR 0 6
51247: PPUSH
51248: CALL_OW 264
51252: PUSH
51253: LD_INT 26
51255: PUSH
51256: EMPTY
51257: LIST
51258: IN
51259: IFFALSE 51280
// points := [ 120 , 30 , 80 ] ;
51261: LD_ADDR_VAR 0 9
51265: PUSH
51266: LD_INT 120
51268: PUSH
51269: LD_INT 30
51271: PUSH
51272: LD_INT 80
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: LIST
51279: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
51280: LD_VAR 0 6
51284: PPUSH
51285: CALL_OW 264
51289: PUSH
51290: LD_INT 22
51292: PUSH
51293: EMPTY
51294: LIST
51295: IN
51296: IFFALSE 51317
// points := [ 40 , 1 , 1 ] ;
51298: LD_ADDR_VAR 0 9
51302: PUSH
51303: LD_INT 40
51305: PUSH
51306: LD_INT 1
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: LIST
51316: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
51317: LD_VAR 0 6
51321: PPUSH
51322: CALL_OW 264
51326: PUSH
51327: LD_INT 29
51329: PUSH
51330: EMPTY
51331: LIST
51332: IN
51333: IFFALSE 51354
// points := [ 70 , 200 , 400 ] ;
51335: LD_ADDR_VAR 0 9
51339: PUSH
51340: LD_INT 70
51342: PUSH
51343: LD_INT 200
51345: PUSH
51346: LD_INT 400
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: LIST
51353: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
51354: LD_VAR 0 6
51358: PPUSH
51359: CALL_OW 264
51363: PUSH
51364: LD_INT 14
51366: PUSH
51367: LD_INT 53
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: IN
51374: IFFALSE 51395
// points := [ 40 , 10 , 20 ] ;
51376: LD_ADDR_VAR 0 9
51380: PUSH
51381: LD_INT 40
51383: PUSH
51384: LD_INT 10
51386: PUSH
51387: LD_INT 20
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: LIST
51394: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
51395: LD_VAR 0 6
51399: PPUSH
51400: CALL_OW 264
51404: PUSH
51405: LD_INT 9
51407: PUSH
51408: EMPTY
51409: LIST
51410: IN
51411: IFFALSE 51432
// points := [ 5 , 70 , 20 ] ;
51413: LD_ADDR_VAR 0 9
51417: PUSH
51418: LD_INT 5
51420: PUSH
51421: LD_INT 70
51423: PUSH
51424: LD_INT 20
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: LIST
51431: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
51432: LD_VAR 0 6
51436: PPUSH
51437: CALL_OW 264
51441: PUSH
51442: LD_INT 10
51444: PUSH
51445: EMPTY
51446: LIST
51447: IN
51448: IFFALSE 51469
// points := [ 35 , 110 , 70 ] ;
51450: LD_ADDR_VAR 0 9
51454: PUSH
51455: LD_INT 35
51457: PUSH
51458: LD_INT 110
51460: PUSH
51461: LD_INT 70
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: LIST
51468: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
51469: LD_VAR 0 6
51473: PPUSH
51474: CALL_OW 265
51478: PUSH
51479: LD_INT 25
51481: EQUAL
51482: IFFALSE 51503
// points := [ 80 , 65 , 100 ] ;
51484: LD_ADDR_VAR 0 9
51488: PUSH
51489: LD_INT 80
51491: PUSH
51492: LD_INT 65
51494: PUSH
51495: LD_INT 100
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: LIST
51502: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
51503: LD_VAR 0 6
51507: PPUSH
51508: CALL_OW 263
51512: PUSH
51513: LD_INT 1
51515: EQUAL
51516: IFFALSE 51551
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
51518: LD_ADDR_VAR 0 10
51522: PUSH
51523: LD_VAR 0 10
51527: PUSH
51528: LD_VAR 0 6
51532: PPUSH
51533: CALL_OW 311
51537: PPUSH
51538: LD_INT 3
51540: PPUSH
51541: CALL_OW 259
51545: PUSH
51546: LD_INT 4
51548: MUL
51549: MUL
51550: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
51551: LD_VAR 0 6
51555: PPUSH
51556: CALL_OW 263
51560: PUSH
51561: LD_INT 2
51563: EQUAL
51564: IFFALSE 51615
// begin j := IsControledBy ( i ) ;
51566: LD_ADDR_VAR 0 7
51570: PUSH
51571: LD_VAR 0 6
51575: PPUSH
51576: CALL_OW 312
51580: ST_TO_ADDR
// if j then
51581: LD_VAR 0 7
51585: IFFALSE 51615
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
51587: LD_ADDR_VAR 0 10
51591: PUSH
51592: LD_VAR 0 10
51596: PUSH
51597: LD_VAR 0 7
51601: PPUSH
51602: LD_INT 3
51604: PPUSH
51605: CALL_OW 259
51609: PUSH
51610: LD_INT 3
51612: MUL
51613: MUL
51614: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
51615: LD_VAR 0 6
51619: PPUSH
51620: CALL_OW 264
51624: PUSH
51625: LD_INT 5
51627: PUSH
51628: LD_INT 6
51630: PUSH
51631: LD_INT 46
51633: PUSH
51634: LD_INT 44
51636: PUSH
51637: LD_INT 47
51639: PUSH
51640: LD_INT 45
51642: PUSH
51643: LD_INT 28
51645: PUSH
51646: LD_INT 7
51648: PUSH
51649: LD_INT 27
51651: PUSH
51652: LD_INT 29
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: IN
51667: PUSH
51668: LD_VAR 0 1
51672: PPUSH
51673: LD_INT 52
51675: PPUSH
51676: CALL_OW 321
51680: PUSH
51681: LD_INT 2
51683: EQUAL
51684: AND
51685: IFFALSE 51702
// bpoints := bpoints * 1.2 ;
51687: LD_ADDR_VAR 0 10
51691: PUSH
51692: LD_VAR 0 10
51696: PUSH
51697: LD_REAL  1.20000000000000E+0000
51700: MUL
51701: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
51702: LD_VAR 0 6
51706: PPUSH
51707: CALL_OW 264
51711: PUSH
51712: LD_INT 6
51714: PUSH
51715: LD_INT 46
51717: PUSH
51718: LD_INT 47
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: LIST
51725: IN
51726: IFFALSE 51743
// bpoints := bpoints * 1.2 ;
51728: LD_ADDR_VAR 0 10
51732: PUSH
51733: LD_VAR 0 10
51737: PUSH
51738: LD_REAL  1.20000000000000E+0000
51741: MUL
51742: ST_TO_ADDR
// end ; unit_building :
51743: GO 51757
51745: LD_INT 3
51747: DOUBLE
51748: EQUAL
51749: IFTRUE 51753
51751: GO 51756
51753: POP
// ; end ;
51754: GO 51757
51756: POP
// for j = 1 to 3 do
51757: LD_ADDR_VAR 0 7
51761: PUSH
51762: DOUBLE
51763: LD_INT 1
51765: DEC
51766: ST_TO_ADDR
51767: LD_INT 3
51769: PUSH
51770: FOR_TO
51771: IFFALSE 51824
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
51773: LD_ADDR_VAR 0 5
51777: PUSH
51778: LD_VAR 0 5
51782: PPUSH
51783: LD_VAR 0 7
51787: PPUSH
51788: LD_VAR 0 5
51792: PUSH
51793: LD_VAR 0 7
51797: ARRAY
51798: PUSH
51799: LD_VAR 0 9
51803: PUSH
51804: LD_VAR 0 7
51808: ARRAY
51809: PUSH
51810: LD_VAR 0 10
51814: MUL
51815: PLUS
51816: PPUSH
51817: CALL_OW 1
51821: ST_TO_ADDR
51822: GO 51770
51824: POP
51825: POP
// end ;
51826: GO 50305
51828: POP
51829: POP
// result := Replace ( result , 4 , tmp ) ;
51830: LD_ADDR_VAR 0 5
51834: PUSH
51835: LD_VAR 0 5
51839: PPUSH
51840: LD_INT 4
51842: PPUSH
51843: LD_VAR 0 8
51847: PPUSH
51848: CALL_OW 1
51852: ST_TO_ADDR
// end ;
51853: LD_VAR 0 5
51857: RET
// export function DangerAtRange ( unit , range ) ; begin
51858: LD_INT 0
51860: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
51861: LD_ADDR_VAR 0 3
51865: PUSH
51866: LD_VAR 0 1
51870: PPUSH
51871: CALL_OW 255
51875: PPUSH
51876: LD_VAR 0 1
51880: PPUSH
51881: CALL_OW 250
51885: PPUSH
51886: LD_VAR 0 1
51890: PPUSH
51891: CALL_OW 251
51895: PPUSH
51896: LD_VAR 0 2
51900: PPUSH
51901: CALL 50157 0 4
51905: ST_TO_ADDR
// end ;
51906: LD_VAR 0 3
51910: RET
// export function DangerInArea ( side , area ) ; begin
51911: LD_INT 0
51913: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
51914: LD_ADDR_VAR 0 3
51918: PUSH
51919: LD_VAR 0 2
51923: PPUSH
51924: LD_INT 81
51926: PUSH
51927: LD_VAR 0 1
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PPUSH
51936: CALL_OW 70
51940: ST_TO_ADDR
// end ;
51941: LD_VAR 0 3
51945: RET
// export function IsExtension ( b ) ; begin
51946: LD_INT 0
51948: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
51949: LD_ADDR_VAR 0 2
51953: PUSH
51954: LD_VAR 0 1
51958: PUSH
51959: LD_INT 23
51961: PUSH
51962: LD_INT 20
51964: PUSH
51965: LD_INT 22
51967: PUSH
51968: LD_INT 17
51970: PUSH
51971: LD_INT 24
51973: PUSH
51974: LD_INT 21
51976: PUSH
51977: LD_INT 19
51979: PUSH
51980: LD_INT 16
51982: PUSH
51983: LD_INT 25
51985: PUSH
51986: LD_INT 18
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: IN
52001: ST_TO_ADDR
// end ;
52002: LD_VAR 0 2
52006: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
52007: LD_INT 0
52009: PPUSH
52010: PPUSH
52011: PPUSH
// result := [ ] ;
52012: LD_ADDR_VAR 0 4
52016: PUSH
52017: EMPTY
52018: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
52019: LD_ADDR_VAR 0 5
52023: PUSH
52024: LD_VAR 0 2
52028: PPUSH
52029: LD_INT 21
52031: PUSH
52032: LD_INT 3
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PPUSH
52039: CALL_OW 70
52043: ST_TO_ADDR
// if not tmp then
52044: LD_VAR 0 5
52048: NOT
52049: IFFALSE 52053
// exit ;
52051: GO 52117
// if checkLink then
52053: LD_VAR 0 3
52057: IFFALSE 52107
// begin for i in tmp do
52059: LD_ADDR_VAR 0 6
52063: PUSH
52064: LD_VAR 0 5
52068: PUSH
52069: FOR_IN
52070: IFFALSE 52105
// if GetBase ( i ) <> base then
52072: LD_VAR 0 6
52076: PPUSH
52077: CALL_OW 274
52081: PUSH
52082: LD_VAR 0 1
52086: NONEQUAL
52087: IFFALSE 52103
// ComLinkToBase ( base , i ) ;
52089: LD_VAR 0 1
52093: PPUSH
52094: LD_VAR 0 6
52098: PPUSH
52099: CALL_OW 169
52103: GO 52069
52105: POP
52106: POP
// end ; result := tmp ;
52107: LD_ADDR_VAR 0 4
52111: PUSH
52112: LD_VAR 0 5
52116: ST_TO_ADDR
// end ;
52117: LD_VAR 0 4
52121: RET
// export function ComComplete ( units , b ) ; var i ; begin
52122: LD_INT 0
52124: PPUSH
52125: PPUSH
// if not units then
52126: LD_VAR 0 1
52130: NOT
52131: IFFALSE 52135
// exit ;
52133: GO 52225
// for i in units do
52135: LD_ADDR_VAR 0 4
52139: PUSH
52140: LD_VAR 0 1
52144: PUSH
52145: FOR_IN
52146: IFFALSE 52223
// if BuildingStatus ( b ) = bs_build then
52148: LD_VAR 0 2
52152: PPUSH
52153: CALL_OW 461
52157: PUSH
52158: LD_INT 1
52160: EQUAL
52161: IFFALSE 52221
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
52163: LD_VAR 0 4
52167: PPUSH
52168: LD_STRING h
52170: PUSH
52171: LD_VAR 0 2
52175: PPUSH
52176: CALL_OW 250
52180: PUSH
52181: LD_VAR 0 2
52185: PPUSH
52186: CALL_OW 251
52190: PUSH
52191: LD_VAR 0 2
52195: PUSH
52196: LD_INT 0
52198: PUSH
52199: LD_INT 0
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: PUSH
52214: EMPTY
52215: LIST
52216: PPUSH
52217: CALL_OW 446
52221: GO 52145
52223: POP
52224: POP
// end ;
52225: LD_VAR 0 3
52229: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
52230: LD_INT 0
52232: PPUSH
52233: PPUSH
52234: PPUSH
52235: PPUSH
52236: PPUSH
52237: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
52238: LD_VAR 0 1
52242: NOT
52243: PUSH
52244: LD_VAR 0 1
52248: PPUSH
52249: CALL_OW 263
52253: PUSH
52254: LD_INT 2
52256: NONEQUAL
52257: OR
52258: IFFALSE 52262
// exit ;
52260: GO 52578
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
52262: LD_ADDR_VAR 0 6
52266: PUSH
52267: LD_INT 22
52269: PUSH
52270: LD_VAR 0 1
52274: PPUSH
52275: CALL_OW 255
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 2
52286: PUSH
52287: LD_INT 30
52289: PUSH
52290: LD_INT 36
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 34
52299: PUSH
52300: LD_INT 31
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: LIST
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PPUSH
52316: CALL_OW 69
52320: ST_TO_ADDR
// if not tmp then
52321: LD_VAR 0 6
52325: NOT
52326: IFFALSE 52330
// exit ;
52328: GO 52578
// result := [ ] ;
52330: LD_ADDR_VAR 0 2
52334: PUSH
52335: EMPTY
52336: ST_TO_ADDR
// for i in tmp do
52337: LD_ADDR_VAR 0 3
52341: PUSH
52342: LD_VAR 0 6
52346: PUSH
52347: FOR_IN
52348: IFFALSE 52419
// begin t := UnitsInside ( i ) ;
52350: LD_ADDR_VAR 0 4
52354: PUSH
52355: LD_VAR 0 3
52359: PPUSH
52360: CALL_OW 313
52364: ST_TO_ADDR
// if t then
52365: LD_VAR 0 4
52369: IFFALSE 52417
// for j in t do
52371: LD_ADDR_VAR 0 7
52375: PUSH
52376: LD_VAR 0 4
52380: PUSH
52381: FOR_IN
52382: IFFALSE 52415
// result := Replace ( result , result + 1 , j ) ;
52384: LD_ADDR_VAR 0 2
52388: PUSH
52389: LD_VAR 0 2
52393: PPUSH
52394: LD_VAR 0 2
52398: PUSH
52399: LD_INT 1
52401: PLUS
52402: PPUSH
52403: LD_VAR 0 7
52407: PPUSH
52408: CALL_OW 1
52412: ST_TO_ADDR
52413: GO 52381
52415: POP
52416: POP
// end ;
52417: GO 52347
52419: POP
52420: POP
// if not result then
52421: LD_VAR 0 2
52425: NOT
52426: IFFALSE 52430
// exit ;
52428: GO 52578
// mech := result [ 1 ] ;
52430: LD_ADDR_VAR 0 5
52434: PUSH
52435: LD_VAR 0 2
52439: PUSH
52440: LD_INT 1
52442: ARRAY
52443: ST_TO_ADDR
// if result > 1 then
52444: LD_VAR 0 2
52448: PUSH
52449: LD_INT 1
52451: GREATER
52452: IFFALSE 52564
// begin for i = 2 to result do
52454: LD_ADDR_VAR 0 3
52458: PUSH
52459: DOUBLE
52460: LD_INT 2
52462: DEC
52463: ST_TO_ADDR
52464: LD_VAR 0 2
52468: PUSH
52469: FOR_TO
52470: IFFALSE 52562
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
52472: LD_ADDR_VAR 0 4
52476: PUSH
52477: LD_VAR 0 2
52481: PUSH
52482: LD_VAR 0 3
52486: ARRAY
52487: PPUSH
52488: LD_INT 3
52490: PPUSH
52491: CALL_OW 259
52495: PUSH
52496: LD_VAR 0 2
52500: PUSH
52501: LD_VAR 0 3
52505: ARRAY
52506: PPUSH
52507: CALL_OW 432
52511: MINUS
52512: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
52513: LD_VAR 0 4
52517: PUSH
52518: LD_VAR 0 5
52522: PPUSH
52523: LD_INT 3
52525: PPUSH
52526: CALL_OW 259
52530: PUSH
52531: LD_VAR 0 5
52535: PPUSH
52536: CALL_OW 432
52540: MINUS
52541: GREATEREQUAL
52542: IFFALSE 52560
// mech := result [ i ] ;
52544: LD_ADDR_VAR 0 5
52548: PUSH
52549: LD_VAR 0 2
52553: PUSH
52554: LD_VAR 0 3
52558: ARRAY
52559: ST_TO_ADDR
// end ;
52560: GO 52469
52562: POP
52563: POP
// end ; ComLinkTo ( vehicle , mech ) ;
52564: LD_VAR 0 1
52568: PPUSH
52569: LD_VAR 0 5
52573: PPUSH
52574: CALL_OW 135
// end ;
52578: LD_VAR 0 2
52582: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
52583: LD_INT 0
52585: PPUSH
52586: PPUSH
52587: PPUSH
52588: PPUSH
52589: PPUSH
52590: PPUSH
52591: PPUSH
52592: PPUSH
52593: PPUSH
52594: PPUSH
52595: PPUSH
52596: PPUSH
52597: PPUSH
// result := [ ] ;
52598: LD_ADDR_VAR 0 7
52602: PUSH
52603: EMPTY
52604: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
52605: LD_VAR 0 1
52609: PPUSH
52610: CALL_OW 266
52614: PUSH
52615: LD_INT 0
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: IN
52625: NOT
52626: IFFALSE 52630
// exit ;
52628: GO 54264
// if name then
52630: LD_VAR 0 3
52634: IFFALSE 52650
// SetBName ( base_dep , name ) ;
52636: LD_VAR 0 1
52640: PPUSH
52641: LD_VAR 0 3
52645: PPUSH
52646: CALL_OW 500
// base := GetBase ( base_dep ) ;
52650: LD_ADDR_VAR 0 15
52654: PUSH
52655: LD_VAR 0 1
52659: PPUSH
52660: CALL_OW 274
52664: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
52665: LD_ADDR_VAR 0 16
52669: PUSH
52670: LD_VAR 0 1
52674: PPUSH
52675: CALL_OW 255
52679: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
52680: LD_ADDR_VAR 0 17
52684: PUSH
52685: LD_VAR 0 1
52689: PPUSH
52690: CALL_OW 248
52694: ST_TO_ADDR
// if sources then
52695: LD_VAR 0 5
52699: IFFALSE 52746
// for i = 1 to 3 do
52701: LD_ADDR_VAR 0 8
52705: PUSH
52706: DOUBLE
52707: LD_INT 1
52709: DEC
52710: ST_TO_ADDR
52711: LD_INT 3
52713: PUSH
52714: FOR_TO
52715: IFFALSE 52744
// AddResourceType ( base , i , sources [ i ] ) ;
52717: LD_VAR 0 15
52721: PPUSH
52722: LD_VAR 0 8
52726: PPUSH
52727: LD_VAR 0 5
52731: PUSH
52732: LD_VAR 0 8
52736: ARRAY
52737: PPUSH
52738: CALL_OW 276
52742: GO 52714
52744: POP
52745: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
52746: LD_ADDR_VAR 0 18
52750: PUSH
52751: LD_VAR 0 15
52755: PPUSH
52756: LD_VAR 0 2
52760: PPUSH
52761: LD_INT 1
52763: PPUSH
52764: CALL 52007 0 3
52768: ST_TO_ADDR
// InitHc ;
52769: CALL_OW 19
// InitUc ;
52773: CALL_OW 18
// uc_side := side ;
52777: LD_ADDR_OWVAR 20
52781: PUSH
52782: LD_VAR 0 16
52786: ST_TO_ADDR
// uc_nation := nation ;
52787: LD_ADDR_OWVAR 21
52791: PUSH
52792: LD_VAR 0 17
52796: ST_TO_ADDR
// if buildings then
52797: LD_VAR 0 18
52801: IFFALSE 54123
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
52803: LD_ADDR_VAR 0 19
52807: PUSH
52808: LD_VAR 0 18
52812: PPUSH
52813: LD_INT 2
52815: PUSH
52816: LD_INT 30
52818: PUSH
52819: LD_INT 29
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 30
52828: PUSH
52829: LD_INT 30
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: LIST
52840: PPUSH
52841: CALL_OW 72
52845: ST_TO_ADDR
// if tmp then
52846: LD_VAR 0 19
52850: IFFALSE 52898
// for i in tmp do
52852: LD_ADDR_VAR 0 8
52856: PUSH
52857: LD_VAR 0 19
52861: PUSH
52862: FOR_IN
52863: IFFALSE 52896
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
52865: LD_VAR 0 8
52869: PPUSH
52870: CALL_OW 250
52874: PPUSH
52875: LD_VAR 0 8
52879: PPUSH
52880: CALL_OW 251
52884: PPUSH
52885: LD_VAR 0 16
52889: PPUSH
52890: CALL_OW 441
52894: GO 52862
52896: POP
52897: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
52898: LD_VAR 0 18
52902: PPUSH
52903: LD_INT 2
52905: PUSH
52906: LD_INT 30
52908: PUSH
52909: LD_INT 32
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 30
52918: PUSH
52919: LD_INT 33
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: LIST
52930: PPUSH
52931: CALL_OW 72
52935: IFFALSE 53023
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
52937: LD_ADDR_VAR 0 8
52941: PUSH
52942: LD_VAR 0 18
52946: PPUSH
52947: LD_INT 2
52949: PUSH
52950: LD_INT 30
52952: PUSH
52953: LD_INT 32
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 30
52962: PUSH
52963: LD_INT 33
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: LIST
52974: PPUSH
52975: CALL_OW 72
52979: PUSH
52980: FOR_IN
52981: IFFALSE 53021
// begin if not GetBWeapon ( i ) then
52983: LD_VAR 0 8
52987: PPUSH
52988: CALL_OW 269
52992: NOT
52993: IFFALSE 53019
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
52995: LD_VAR 0 8
52999: PPUSH
53000: LD_VAR 0 8
53004: PPUSH
53005: LD_VAR 0 2
53009: PPUSH
53010: CALL 54269 0 2
53014: PPUSH
53015: CALL_OW 431
// end ;
53019: GO 52980
53021: POP
53022: POP
// end ; for i = 1 to personel do
53023: LD_ADDR_VAR 0 8
53027: PUSH
53028: DOUBLE
53029: LD_INT 1
53031: DEC
53032: ST_TO_ADDR
53033: LD_VAR 0 6
53037: PUSH
53038: FOR_TO
53039: IFFALSE 54103
// begin if i > 4 then
53041: LD_VAR 0 8
53045: PUSH
53046: LD_INT 4
53048: GREATER
53049: IFFALSE 53053
// break ;
53051: GO 54103
// case i of 1 :
53053: LD_VAR 0 8
53057: PUSH
53058: LD_INT 1
53060: DOUBLE
53061: EQUAL
53062: IFTRUE 53066
53064: GO 53146
53066: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
53067: LD_ADDR_VAR 0 12
53071: PUSH
53072: LD_VAR 0 18
53076: PPUSH
53077: LD_INT 22
53079: PUSH
53080: LD_VAR 0 16
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 58
53091: PUSH
53092: EMPTY
53093: LIST
53094: PUSH
53095: LD_INT 2
53097: PUSH
53098: LD_INT 30
53100: PUSH
53101: LD_INT 32
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 30
53110: PUSH
53111: LD_INT 4
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 30
53120: PUSH
53121: LD_INT 5
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: LIST
53138: PPUSH
53139: CALL_OW 72
53143: ST_TO_ADDR
53144: GO 53368
53146: LD_INT 2
53148: DOUBLE
53149: EQUAL
53150: IFTRUE 53154
53152: GO 53216
53154: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
53155: LD_ADDR_VAR 0 12
53159: PUSH
53160: LD_VAR 0 18
53164: PPUSH
53165: LD_INT 22
53167: PUSH
53168: LD_VAR 0 16
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 2
53179: PUSH
53180: LD_INT 30
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 30
53192: PUSH
53193: LD_INT 1
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: LIST
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PPUSH
53209: CALL_OW 72
53213: ST_TO_ADDR
53214: GO 53368
53216: LD_INT 3
53218: DOUBLE
53219: EQUAL
53220: IFTRUE 53224
53222: GO 53286
53224: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
53225: LD_ADDR_VAR 0 12
53229: PUSH
53230: LD_VAR 0 18
53234: PPUSH
53235: LD_INT 22
53237: PUSH
53238: LD_VAR 0 16
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 2
53249: PUSH
53250: LD_INT 30
53252: PUSH
53253: LD_INT 2
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 30
53262: PUSH
53263: LD_INT 3
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: LIST
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PPUSH
53279: CALL_OW 72
53283: ST_TO_ADDR
53284: GO 53368
53286: LD_INT 4
53288: DOUBLE
53289: EQUAL
53290: IFTRUE 53294
53292: GO 53367
53294: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
53295: LD_ADDR_VAR 0 12
53299: PUSH
53300: LD_VAR 0 18
53304: PPUSH
53305: LD_INT 22
53307: PUSH
53308: LD_VAR 0 16
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 2
53319: PUSH
53320: LD_INT 30
53322: PUSH
53323: LD_INT 6
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 30
53332: PUSH
53333: LD_INT 7
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 30
53342: PUSH
53343: LD_INT 8
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PPUSH
53360: CALL_OW 72
53364: ST_TO_ADDR
53365: GO 53368
53367: POP
// if i = 1 then
53368: LD_VAR 0 8
53372: PUSH
53373: LD_INT 1
53375: EQUAL
53376: IFFALSE 53487
// begin tmp := [ ] ;
53378: LD_ADDR_VAR 0 19
53382: PUSH
53383: EMPTY
53384: ST_TO_ADDR
// for j in f do
53385: LD_ADDR_VAR 0 9
53389: PUSH
53390: LD_VAR 0 12
53394: PUSH
53395: FOR_IN
53396: IFFALSE 53469
// if GetBType ( j ) = b_bunker then
53398: LD_VAR 0 9
53402: PPUSH
53403: CALL_OW 266
53407: PUSH
53408: LD_INT 32
53410: EQUAL
53411: IFFALSE 53438
// tmp := Insert ( tmp , 1 , j ) else
53413: LD_ADDR_VAR 0 19
53417: PUSH
53418: LD_VAR 0 19
53422: PPUSH
53423: LD_INT 1
53425: PPUSH
53426: LD_VAR 0 9
53430: PPUSH
53431: CALL_OW 2
53435: ST_TO_ADDR
53436: GO 53467
// tmp := Insert ( tmp , tmp + 1 , j ) ;
53438: LD_ADDR_VAR 0 19
53442: PUSH
53443: LD_VAR 0 19
53447: PPUSH
53448: LD_VAR 0 19
53452: PUSH
53453: LD_INT 1
53455: PLUS
53456: PPUSH
53457: LD_VAR 0 9
53461: PPUSH
53462: CALL_OW 2
53466: ST_TO_ADDR
53467: GO 53395
53469: POP
53470: POP
// if tmp then
53471: LD_VAR 0 19
53475: IFFALSE 53487
// f := tmp ;
53477: LD_ADDR_VAR 0 12
53481: PUSH
53482: LD_VAR 0 19
53486: ST_TO_ADDR
// end ; x := personel [ i ] ;
53487: LD_ADDR_VAR 0 13
53491: PUSH
53492: LD_VAR 0 6
53496: PUSH
53497: LD_VAR 0 8
53501: ARRAY
53502: ST_TO_ADDR
// if x = - 1 then
53503: LD_VAR 0 13
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: EQUAL
53512: IFFALSE 53721
// begin for j in f do
53514: LD_ADDR_VAR 0 9
53518: PUSH
53519: LD_VAR 0 12
53523: PUSH
53524: FOR_IN
53525: IFFALSE 53717
// repeat InitHc ;
53527: CALL_OW 19
// if GetBType ( j ) = b_barracks then
53531: LD_VAR 0 9
53535: PPUSH
53536: CALL_OW 266
53540: PUSH
53541: LD_INT 5
53543: EQUAL
53544: IFFALSE 53614
// begin if UnitsInside ( j ) < 3 then
53546: LD_VAR 0 9
53550: PPUSH
53551: CALL_OW 313
53555: PUSH
53556: LD_INT 3
53558: LESS
53559: IFFALSE 53595
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53561: LD_INT 0
53563: PPUSH
53564: LD_INT 5
53566: PUSH
53567: LD_INT 8
53569: PUSH
53570: LD_INT 9
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: LIST
53577: PUSH
53578: LD_VAR 0 17
53582: ARRAY
53583: PPUSH
53584: LD_VAR 0 4
53588: PPUSH
53589: CALL_OW 380
53593: GO 53612
// PrepareHuman ( false , i , skill ) ;
53595: LD_INT 0
53597: PPUSH
53598: LD_VAR 0 8
53602: PPUSH
53603: LD_VAR 0 4
53607: PPUSH
53608: CALL_OW 380
// end else
53612: GO 53631
// PrepareHuman ( false , i , skill ) ;
53614: LD_INT 0
53616: PPUSH
53617: LD_VAR 0 8
53621: PPUSH
53622: LD_VAR 0 4
53626: PPUSH
53627: CALL_OW 380
// un := CreateHuman ;
53631: LD_ADDR_VAR 0 14
53635: PUSH
53636: CALL_OW 44
53640: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53641: LD_ADDR_VAR 0 7
53645: PUSH
53646: LD_VAR 0 7
53650: PPUSH
53651: LD_INT 1
53653: PPUSH
53654: LD_VAR 0 14
53658: PPUSH
53659: CALL_OW 2
53663: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
53664: LD_VAR 0 14
53668: PPUSH
53669: LD_VAR 0 9
53673: PPUSH
53674: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
53678: LD_VAR 0 9
53682: PPUSH
53683: CALL_OW 313
53687: PUSH
53688: LD_INT 6
53690: EQUAL
53691: PUSH
53692: LD_VAR 0 9
53696: PPUSH
53697: CALL_OW 266
53701: PUSH
53702: LD_INT 32
53704: PUSH
53705: LD_INT 31
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: IN
53712: OR
53713: IFFALSE 53527
53715: GO 53524
53717: POP
53718: POP
// end else
53719: GO 54101
// for j = 1 to x do
53721: LD_ADDR_VAR 0 9
53725: PUSH
53726: DOUBLE
53727: LD_INT 1
53729: DEC
53730: ST_TO_ADDR
53731: LD_VAR 0 13
53735: PUSH
53736: FOR_TO
53737: IFFALSE 54099
// begin InitHc ;
53739: CALL_OW 19
// if not f then
53743: LD_VAR 0 12
53747: NOT
53748: IFFALSE 53837
// begin PrepareHuman ( false , i , skill ) ;
53750: LD_INT 0
53752: PPUSH
53753: LD_VAR 0 8
53757: PPUSH
53758: LD_VAR 0 4
53762: PPUSH
53763: CALL_OW 380
// un := CreateHuman ;
53767: LD_ADDR_VAR 0 14
53771: PUSH
53772: CALL_OW 44
53776: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53777: LD_ADDR_VAR 0 7
53781: PUSH
53782: LD_VAR 0 7
53786: PPUSH
53787: LD_INT 1
53789: PPUSH
53790: LD_VAR 0 14
53794: PPUSH
53795: CALL_OW 2
53799: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53800: LD_VAR 0 14
53804: PPUSH
53805: LD_VAR 0 1
53809: PPUSH
53810: CALL_OW 250
53814: PPUSH
53815: LD_VAR 0 1
53819: PPUSH
53820: CALL_OW 251
53824: PPUSH
53825: LD_INT 10
53827: PPUSH
53828: LD_INT 0
53830: PPUSH
53831: CALL_OW 50
// continue ;
53835: GO 53736
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
53837: LD_VAR 0 12
53841: PUSH
53842: LD_INT 1
53844: ARRAY
53845: PPUSH
53846: CALL_OW 313
53850: PUSH
53851: LD_VAR 0 12
53855: PUSH
53856: LD_INT 1
53858: ARRAY
53859: PPUSH
53860: CALL_OW 266
53864: PUSH
53865: LD_INT 32
53867: PUSH
53868: LD_INT 31
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: IN
53875: AND
53876: PUSH
53877: LD_VAR 0 12
53881: PUSH
53882: LD_INT 1
53884: ARRAY
53885: PPUSH
53886: CALL_OW 313
53890: PUSH
53891: LD_INT 6
53893: EQUAL
53894: OR
53895: IFFALSE 53915
// f := Delete ( f , 1 ) ;
53897: LD_ADDR_VAR 0 12
53901: PUSH
53902: LD_VAR 0 12
53906: PPUSH
53907: LD_INT 1
53909: PPUSH
53910: CALL_OW 3
53914: ST_TO_ADDR
// if not f then
53915: LD_VAR 0 12
53919: NOT
53920: IFFALSE 53938
// begin x := x + 2 ;
53922: LD_ADDR_VAR 0 13
53926: PUSH
53927: LD_VAR 0 13
53931: PUSH
53932: LD_INT 2
53934: PLUS
53935: ST_TO_ADDR
// continue ;
53936: GO 53736
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
53938: LD_VAR 0 12
53942: PUSH
53943: LD_INT 1
53945: ARRAY
53946: PPUSH
53947: CALL_OW 266
53951: PUSH
53952: LD_INT 5
53954: EQUAL
53955: IFFALSE 54029
// begin if UnitsInside ( f [ 1 ] ) < 3 then
53957: LD_VAR 0 12
53961: PUSH
53962: LD_INT 1
53964: ARRAY
53965: PPUSH
53966: CALL_OW 313
53970: PUSH
53971: LD_INT 3
53973: LESS
53974: IFFALSE 54010
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53976: LD_INT 0
53978: PPUSH
53979: LD_INT 5
53981: PUSH
53982: LD_INT 8
53984: PUSH
53985: LD_INT 9
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: LIST
53992: PUSH
53993: LD_VAR 0 17
53997: ARRAY
53998: PPUSH
53999: LD_VAR 0 4
54003: PPUSH
54004: CALL_OW 380
54008: GO 54027
// PrepareHuman ( false , i , skill ) ;
54010: LD_INT 0
54012: PPUSH
54013: LD_VAR 0 8
54017: PPUSH
54018: LD_VAR 0 4
54022: PPUSH
54023: CALL_OW 380
// end else
54027: GO 54046
// PrepareHuman ( false , i , skill ) ;
54029: LD_INT 0
54031: PPUSH
54032: LD_VAR 0 8
54036: PPUSH
54037: LD_VAR 0 4
54041: PPUSH
54042: CALL_OW 380
// un := CreateHuman ;
54046: LD_ADDR_VAR 0 14
54050: PUSH
54051: CALL_OW 44
54055: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
54056: LD_ADDR_VAR 0 7
54060: PUSH
54061: LD_VAR 0 7
54065: PPUSH
54066: LD_INT 1
54068: PPUSH
54069: LD_VAR 0 14
54073: PPUSH
54074: CALL_OW 2
54078: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
54079: LD_VAR 0 14
54083: PPUSH
54084: LD_VAR 0 12
54088: PUSH
54089: LD_INT 1
54091: ARRAY
54092: PPUSH
54093: CALL_OW 52
// end ;
54097: GO 53736
54099: POP
54100: POP
// end ;
54101: GO 53038
54103: POP
54104: POP
// result := result ^ buildings ;
54105: LD_ADDR_VAR 0 7
54109: PUSH
54110: LD_VAR 0 7
54114: PUSH
54115: LD_VAR 0 18
54119: ADD
54120: ST_TO_ADDR
// end else
54121: GO 54264
// begin for i = 1 to personel do
54123: LD_ADDR_VAR 0 8
54127: PUSH
54128: DOUBLE
54129: LD_INT 1
54131: DEC
54132: ST_TO_ADDR
54133: LD_VAR 0 6
54137: PUSH
54138: FOR_TO
54139: IFFALSE 54262
// begin if i > 4 then
54141: LD_VAR 0 8
54145: PUSH
54146: LD_INT 4
54148: GREATER
54149: IFFALSE 54153
// break ;
54151: GO 54262
// x := personel [ i ] ;
54153: LD_ADDR_VAR 0 13
54157: PUSH
54158: LD_VAR 0 6
54162: PUSH
54163: LD_VAR 0 8
54167: ARRAY
54168: ST_TO_ADDR
// if x = - 1 then
54169: LD_VAR 0 13
54173: PUSH
54174: LD_INT 1
54176: NEG
54177: EQUAL
54178: IFFALSE 54182
// continue ;
54180: GO 54138
// PrepareHuman ( false , i , skill ) ;
54182: LD_INT 0
54184: PPUSH
54185: LD_VAR 0 8
54189: PPUSH
54190: LD_VAR 0 4
54194: PPUSH
54195: CALL_OW 380
// un := CreateHuman ;
54199: LD_ADDR_VAR 0 14
54203: PUSH
54204: CALL_OW 44
54208: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
54209: LD_VAR 0 14
54213: PPUSH
54214: LD_VAR 0 1
54218: PPUSH
54219: CALL_OW 250
54223: PPUSH
54224: LD_VAR 0 1
54228: PPUSH
54229: CALL_OW 251
54233: PPUSH
54234: LD_INT 10
54236: PPUSH
54237: LD_INT 0
54239: PPUSH
54240: CALL_OW 50
// result := result ^ un ;
54244: LD_ADDR_VAR 0 7
54248: PUSH
54249: LD_VAR 0 7
54253: PUSH
54254: LD_VAR 0 14
54258: ADD
54259: ST_TO_ADDR
// end ;
54260: GO 54138
54262: POP
54263: POP
// end ; end ;
54264: LD_VAR 0 7
54268: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
54269: LD_INT 0
54271: PPUSH
54272: PPUSH
54273: PPUSH
54274: PPUSH
54275: PPUSH
54276: PPUSH
54277: PPUSH
54278: PPUSH
54279: PPUSH
54280: PPUSH
54281: PPUSH
54282: PPUSH
54283: PPUSH
54284: PPUSH
54285: PPUSH
54286: PPUSH
// result := false ;
54287: LD_ADDR_VAR 0 3
54291: PUSH
54292: LD_INT 0
54294: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
54295: LD_VAR 0 1
54299: NOT
54300: PUSH
54301: LD_VAR 0 1
54305: PPUSH
54306: CALL_OW 266
54310: PUSH
54311: LD_INT 32
54313: PUSH
54314: LD_INT 33
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: IN
54321: NOT
54322: OR
54323: IFFALSE 54327
// exit ;
54325: GO 55436
// nat := GetNation ( tower ) ;
54327: LD_ADDR_VAR 0 12
54331: PUSH
54332: LD_VAR 0 1
54336: PPUSH
54337: CALL_OW 248
54341: ST_TO_ADDR
// side := GetSide ( tower ) ;
54342: LD_ADDR_VAR 0 16
54346: PUSH
54347: LD_VAR 0 1
54351: PPUSH
54352: CALL_OW 255
54356: ST_TO_ADDR
// x := GetX ( tower ) ;
54357: LD_ADDR_VAR 0 10
54361: PUSH
54362: LD_VAR 0 1
54366: PPUSH
54367: CALL_OW 250
54371: ST_TO_ADDR
// y := GetY ( tower ) ;
54372: LD_ADDR_VAR 0 11
54376: PUSH
54377: LD_VAR 0 1
54381: PPUSH
54382: CALL_OW 251
54386: ST_TO_ADDR
// if not x or not y then
54387: LD_VAR 0 10
54391: NOT
54392: PUSH
54393: LD_VAR 0 11
54397: NOT
54398: OR
54399: IFFALSE 54403
// exit ;
54401: GO 55436
// weapon := 0 ;
54403: LD_ADDR_VAR 0 18
54407: PUSH
54408: LD_INT 0
54410: ST_TO_ADDR
// fac_list := [ ] ;
54411: LD_ADDR_VAR 0 17
54415: PUSH
54416: EMPTY
54417: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
54418: LD_ADDR_VAR 0 6
54422: PUSH
54423: LD_VAR 0 1
54427: PPUSH
54428: CALL_OW 274
54432: PPUSH
54433: LD_VAR 0 2
54437: PPUSH
54438: LD_INT 0
54440: PPUSH
54441: CALL 52007 0 3
54445: PPUSH
54446: LD_INT 30
54448: PUSH
54449: LD_INT 3
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PPUSH
54456: CALL_OW 72
54460: ST_TO_ADDR
// if not factories then
54461: LD_VAR 0 6
54465: NOT
54466: IFFALSE 54470
// exit ;
54468: GO 55436
// for i in factories do
54470: LD_ADDR_VAR 0 8
54474: PUSH
54475: LD_VAR 0 6
54479: PUSH
54480: FOR_IN
54481: IFFALSE 54506
// fac_list := fac_list union AvailableWeaponList ( i ) ;
54483: LD_ADDR_VAR 0 17
54487: PUSH
54488: LD_VAR 0 17
54492: PUSH
54493: LD_VAR 0 8
54497: PPUSH
54498: CALL_OW 478
54502: UNION
54503: ST_TO_ADDR
54504: GO 54480
54506: POP
54507: POP
// if not fac_list then
54508: LD_VAR 0 17
54512: NOT
54513: IFFALSE 54517
// exit ;
54515: GO 55436
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
54517: LD_ADDR_VAR 0 5
54521: PUSH
54522: LD_INT 4
54524: PUSH
54525: LD_INT 5
54527: PUSH
54528: LD_INT 9
54530: PUSH
54531: LD_INT 10
54533: PUSH
54534: LD_INT 6
54536: PUSH
54537: LD_INT 7
54539: PUSH
54540: LD_INT 11
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 27
54554: PUSH
54555: LD_INT 28
54557: PUSH
54558: LD_INT 26
54560: PUSH
54561: LD_INT 30
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 43
54572: PUSH
54573: LD_INT 44
54575: PUSH
54576: LD_INT 46
54578: PUSH
54579: LD_INT 45
54581: PUSH
54582: LD_INT 47
54584: PUSH
54585: LD_INT 49
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: LIST
54600: PUSH
54601: LD_VAR 0 12
54605: ARRAY
54606: ST_TO_ADDR
// list := list isect fac_list ;
54607: LD_ADDR_VAR 0 5
54611: PUSH
54612: LD_VAR 0 5
54616: PUSH
54617: LD_VAR 0 17
54621: ISECT
54622: ST_TO_ADDR
// if not list then
54623: LD_VAR 0 5
54627: NOT
54628: IFFALSE 54632
// exit ;
54630: GO 55436
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
54632: LD_VAR 0 12
54636: PUSH
54637: LD_INT 3
54639: EQUAL
54640: PUSH
54641: LD_INT 49
54643: PUSH
54644: LD_VAR 0 5
54648: IN
54649: AND
54650: PUSH
54651: LD_INT 31
54653: PPUSH
54654: LD_VAR 0 16
54658: PPUSH
54659: CALL_OW 321
54663: PUSH
54664: LD_INT 2
54666: EQUAL
54667: AND
54668: IFFALSE 54728
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
54670: LD_INT 22
54672: PUSH
54673: LD_VAR 0 16
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 35
54684: PUSH
54685: LD_INT 49
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 91
54694: PUSH
54695: LD_VAR 0 1
54699: PUSH
54700: LD_INT 10
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: LIST
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: LIST
54712: PPUSH
54713: CALL_OW 69
54717: NOT
54718: IFFALSE 54728
// weapon := ru_time_lapser ;
54720: LD_ADDR_VAR 0 18
54724: PUSH
54725: LD_INT 49
54727: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
54728: LD_VAR 0 12
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: LD_INT 2
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: IN
54743: PUSH
54744: LD_INT 11
54746: PUSH
54747: LD_VAR 0 5
54751: IN
54752: PUSH
54753: LD_INT 30
54755: PUSH
54756: LD_VAR 0 5
54760: IN
54761: OR
54762: AND
54763: PUSH
54764: LD_INT 6
54766: PPUSH
54767: LD_VAR 0 16
54771: PPUSH
54772: CALL_OW 321
54776: PUSH
54777: LD_INT 2
54779: EQUAL
54780: AND
54781: IFFALSE 54946
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
54783: LD_INT 22
54785: PUSH
54786: LD_VAR 0 16
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 2
54797: PUSH
54798: LD_INT 35
54800: PUSH
54801: LD_INT 11
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 35
54810: PUSH
54811: LD_INT 30
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 91
54825: PUSH
54826: LD_VAR 0 1
54830: PUSH
54831: LD_INT 18
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: LIST
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: LIST
54843: PPUSH
54844: CALL_OW 69
54848: NOT
54849: PUSH
54850: LD_INT 22
54852: PUSH
54853: LD_VAR 0 16
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 2
54864: PUSH
54865: LD_INT 30
54867: PUSH
54868: LD_INT 32
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 30
54877: PUSH
54878: LD_INT 33
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 91
54892: PUSH
54893: LD_VAR 0 1
54897: PUSH
54898: LD_INT 12
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: LIST
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: LIST
54910: PUSH
54911: EMPTY
54912: LIST
54913: PPUSH
54914: CALL_OW 69
54918: PUSH
54919: LD_INT 2
54921: GREATER
54922: AND
54923: IFFALSE 54946
// weapon := [ us_radar , ar_radar ] [ nat ] ;
54925: LD_ADDR_VAR 0 18
54929: PUSH
54930: LD_INT 11
54932: PUSH
54933: LD_INT 30
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_VAR 0 12
54944: ARRAY
54945: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
54946: LD_VAR 0 18
54950: NOT
54951: PUSH
54952: LD_INT 40
54954: PPUSH
54955: LD_VAR 0 16
54959: PPUSH
54960: CALL_OW 321
54964: PUSH
54965: LD_INT 2
54967: EQUAL
54968: AND
54969: PUSH
54970: LD_INT 7
54972: PUSH
54973: LD_VAR 0 5
54977: IN
54978: PUSH
54979: LD_INT 28
54981: PUSH
54982: LD_VAR 0 5
54986: IN
54987: OR
54988: PUSH
54989: LD_INT 45
54991: PUSH
54992: LD_VAR 0 5
54996: IN
54997: OR
54998: AND
54999: IFFALSE 55253
// begin hex := GetHexInfo ( x , y ) ;
55001: LD_ADDR_VAR 0 4
55005: PUSH
55006: LD_VAR 0 10
55010: PPUSH
55011: LD_VAR 0 11
55015: PPUSH
55016: CALL_OW 546
55020: ST_TO_ADDR
// if hex [ 1 ] then
55021: LD_VAR 0 4
55025: PUSH
55026: LD_INT 1
55028: ARRAY
55029: IFFALSE 55033
// exit ;
55031: GO 55436
// height := hex [ 2 ] ;
55033: LD_ADDR_VAR 0 15
55037: PUSH
55038: LD_VAR 0 4
55042: PUSH
55043: LD_INT 2
55045: ARRAY
55046: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
55047: LD_ADDR_VAR 0 14
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: LD_INT 2
55057: PUSH
55058: LD_INT 3
55060: PUSH
55061: LD_INT 5
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: ST_TO_ADDR
// for i in tmp do
55070: LD_ADDR_VAR 0 8
55074: PUSH
55075: LD_VAR 0 14
55079: PUSH
55080: FOR_IN
55081: IFFALSE 55251
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
55083: LD_ADDR_VAR 0 9
55087: PUSH
55088: LD_VAR 0 10
55092: PPUSH
55093: LD_VAR 0 8
55097: PPUSH
55098: LD_INT 5
55100: PPUSH
55101: CALL_OW 272
55105: PUSH
55106: LD_VAR 0 11
55110: PPUSH
55111: LD_VAR 0 8
55115: PPUSH
55116: LD_INT 5
55118: PPUSH
55119: CALL_OW 273
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
55128: LD_VAR 0 9
55132: PUSH
55133: LD_INT 1
55135: ARRAY
55136: PPUSH
55137: LD_VAR 0 9
55141: PUSH
55142: LD_INT 2
55144: ARRAY
55145: PPUSH
55146: CALL_OW 488
55150: IFFALSE 55249
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
55152: LD_ADDR_VAR 0 4
55156: PUSH
55157: LD_VAR 0 9
55161: PUSH
55162: LD_INT 1
55164: ARRAY
55165: PPUSH
55166: LD_VAR 0 9
55170: PUSH
55171: LD_INT 2
55173: ARRAY
55174: PPUSH
55175: CALL_OW 546
55179: ST_TO_ADDR
// if hex [ 1 ] then
55180: LD_VAR 0 4
55184: PUSH
55185: LD_INT 1
55187: ARRAY
55188: IFFALSE 55192
// continue ;
55190: GO 55080
// h := hex [ 2 ] ;
55192: LD_ADDR_VAR 0 13
55196: PUSH
55197: LD_VAR 0 4
55201: PUSH
55202: LD_INT 2
55204: ARRAY
55205: ST_TO_ADDR
// if h + 7 < height then
55206: LD_VAR 0 13
55210: PUSH
55211: LD_INT 7
55213: PLUS
55214: PUSH
55215: LD_VAR 0 15
55219: LESS
55220: IFFALSE 55249
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
55222: LD_ADDR_VAR 0 18
55226: PUSH
55227: LD_INT 7
55229: PUSH
55230: LD_INT 28
55232: PUSH
55233: LD_INT 45
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: LIST
55240: PUSH
55241: LD_VAR 0 12
55245: ARRAY
55246: ST_TO_ADDR
// break ;
55247: GO 55251
// end ; end ; end ;
55249: GO 55080
55251: POP
55252: POP
// end ; if not weapon then
55253: LD_VAR 0 18
55257: NOT
55258: IFFALSE 55318
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
55260: LD_ADDR_VAR 0 5
55264: PUSH
55265: LD_VAR 0 5
55269: PUSH
55270: LD_INT 11
55272: PUSH
55273: LD_INT 30
55275: PUSH
55276: LD_INT 49
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: LIST
55283: DIFF
55284: ST_TO_ADDR
// if not list then
55285: LD_VAR 0 5
55289: NOT
55290: IFFALSE 55294
// exit ;
55292: GO 55436
// weapon := list [ rand ( 1 , list ) ] ;
55294: LD_ADDR_VAR 0 18
55298: PUSH
55299: LD_VAR 0 5
55303: PUSH
55304: LD_INT 1
55306: PPUSH
55307: LD_VAR 0 5
55311: PPUSH
55312: CALL_OW 12
55316: ARRAY
55317: ST_TO_ADDR
// end ; if weapon then
55318: LD_VAR 0 18
55322: IFFALSE 55436
// begin tmp := CostOfWeapon ( weapon ) ;
55324: LD_ADDR_VAR 0 14
55328: PUSH
55329: LD_VAR 0 18
55333: PPUSH
55334: CALL_OW 451
55338: ST_TO_ADDR
// j := GetBase ( tower ) ;
55339: LD_ADDR_VAR 0 9
55343: PUSH
55344: LD_VAR 0 1
55348: PPUSH
55349: CALL_OW 274
55353: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
55354: LD_VAR 0 9
55358: PPUSH
55359: LD_INT 1
55361: PPUSH
55362: CALL_OW 275
55366: PUSH
55367: LD_VAR 0 14
55371: PUSH
55372: LD_INT 1
55374: ARRAY
55375: GREATEREQUAL
55376: PUSH
55377: LD_VAR 0 9
55381: PPUSH
55382: LD_INT 2
55384: PPUSH
55385: CALL_OW 275
55389: PUSH
55390: LD_VAR 0 14
55394: PUSH
55395: LD_INT 2
55397: ARRAY
55398: GREATEREQUAL
55399: AND
55400: PUSH
55401: LD_VAR 0 9
55405: PPUSH
55406: LD_INT 3
55408: PPUSH
55409: CALL_OW 275
55413: PUSH
55414: LD_VAR 0 14
55418: PUSH
55419: LD_INT 3
55421: ARRAY
55422: GREATEREQUAL
55423: AND
55424: IFFALSE 55436
// result := weapon ;
55426: LD_ADDR_VAR 0 3
55430: PUSH
55431: LD_VAR 0 18
55435: ST_TO_ADDR
// end ; end ;
55436: LD_VAR 0 3
55440: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
55441: LD_INT 0
55443: PPUSH
55444: PPUSH
// result := true ;
55445: LD_ADDR_VAR 0 3
55449: PUSH
55450: LD_INT 1
55452: ST_TO_ADDR
// if array1 = array2 then
55453: LD_VAR 0 1
55457: PUSH
55458: LD_VAR 0 2
55462: EQUAL
55463: IFFALSE 55523
// begin for i = 1 to array1 do
55465: LD_ADDR_VAR 0 4
55469: PUSH
55470: DOUBLE
55471: LD_INT 1
55473: DEC
55474: ST_TO_ADDR
55475: LD_VAR 0 1
55479: PUSH
55480: FOR_TO
55481: IFFALSE 55519
// if array1 [ i ] <> array2 [ i ] then
55483: LD_VAR 0 1
55487: PUSH
55488: LD_VAR 0 4
55492: ARRAY
55493: PUSH
55494: LD_VAR 0 2
55498: PUSH
55499: LD_VAR 0 4
55503: ARRAY
55504: NONEQUAL
55505: IFFALSE 55517
// begin result := false ;
55507: LD_ADDR_VAR 0 3
55511: PUSH
55512: LD_INT 0
55514: ST_TO_ADDR
// break ;
55515: GO 55519
// end ;
55517: GO 55480
55519: POP
55520: POP
// end else
55521: GO 55531
// result := false ;
55523: LD_ADDR_VAR 0 3
55527: PUSH
55528: LD_INT 0
55530: ST_TO_ADDR
// end ;
55531: LD_VAR 0 3
55535: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
55536: LD_INT 0
55538: PPUSH
55539: PPUSH
// if not array1 or not array2 then
55540: LD_VAR 0 1
55544: NOT
55545: PUSH
55546: LD_VAR 0 2
55550: NOT
55551: OR
55552: IFFALSE 55556
// exit ;
55554: GO 55620
// result := true ;
55556: LD_ADDR_VAR 0 3
55560: PUSH
55561: LD_INT 1
55563: ST_TO_ADDR
// for i = 1 to array1 do
55564: LD_ADDR_VAR 0 4
55568: PUSH
55569: DOUBLE
55570: LD_INT 1
55572: DEC
55573: ST_TO_ADDR
55574: LD_VAR 0 1
55578: PUSH
55579: FOR_TO
55580: IFFALSE 55618
// if array1 [ i ] <> array2 [ i ] then
55582: LD_VAR 0 1
55586: PUSH
55587: LD_VAR 0 4
55591: ARRAY
55592: PUSH
55593: LD_VAR 0 2
55597: PUSH
55598: LD_VAR 0 4
55602: ARRAY
55603: NONEQUAL
55604: IFFALSE 55616
// begin result := false ;
55606: LD_ADDR_VAR 0 3
55610: PUSH
55611: LD_INT 0
55613: ST_TO_ADDR
// break ;
55614: GO 55618
// end ;
55616: GO 55579
55618: POP
55619: POP
// end ;
55620: LD_VAR 0 3
55624: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
55625: LD_INT 0
55627: PPUSH
55628: PPUSH
55629: PPUSH
// pom := GetBase ( fac ) ;
55630: LD_ADDR_VAR 0 5
55634: PUSH
55635: LD_VAR 0 1
55639: PPUSH
55640: CALL_OW 274
55644: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
55645: LD_ADDR_VAR 0 4
55649: PUSH
55650: LD_VAR 0 2
55654: PUSH
55655: LD_INT 1
55657: ARRAY
55658: PPUSH
55659: LD_VAR 0 2
55663: PUSH
55664: LD_INT 2
55666: ARRAY
55667: PPUSH
55668: LD_VAR 0 2
55672: PUSH
55673: LD_INT 3
55675: ARRAY
55676: PPUSH
55677: LD_VAR 0 2
55681: PUSH
55682: LD_INT 4
55684: ARRAY
55685: PPUSH
55686: CALL_OW 449
55690: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55691: LD_ADDR_VAR 0 3
55695: PUSH
55696: LD_VAR 0 5
55700: PPUSH
55701: LD_INT 1
55703: PPUSH
55704: CALL_OW 275
55708: PUSH
55709: LD_VAR 0 4
55713: PUSH
55714: LD_INT 1
55716: ARRAY
55717: GREATEREQUAL
55718: PUSH
55719: LD_VAR 0 5
55723: PPUSH
55724: LD_INT 2
55726: PPUSH
55727: CALL_OW 275
55731: PUSH
55732: LD_VAR 0 4
55736: PUSH
55737: LD_INT 2
55739: ARRAY
55740: GREATEREQUAL
55741: AND
55742: PUSH
55743: LD_VAR 0 5
55747: PPUSH
55748: LD_INT 3
55750: PPUSH
55751: CALL_OW 275
55755: PUSH
55756: LD_VAR 0 4
55760: PUSH
55761: LD_INT 3
55763: ARRAY
55764: GREATEREQUAL
55765: AND
55766: ST_TO_ADDR
// end ;
55767: LD_VAR 0 3
55771: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
55772: LD_INT 0
55774: PPUSH
55775: PPUSH
55776: PPUSH
55777: PPUSH
// pom := GetBase ( building ) ;
55778: LD_ADDR_VAR 0 3
55782: PUSH
55783: LD_VAR 0 1
55787: PPUSH
55788: CALL_OW 274
55792: ST_TO_ADDR
// if not pom then
55793: LD_VAR 0 3
55797: NOT
55798: IFFALSE 55802
// exit ;
55800: GO 55972
// btype := GetBType ( building ) ;
55802: LD_ADDR_VAR 0 5
55806: PUSH
55807: LD_VAR 0 1
55811: PPUSH
55812: CALL_OW 266
55816: ST_TO_ADDR
// if btype = b_armoury then
55817: LD_VAR 0 5
55821: PUSH
55822: LD_INT 4
55824: EQUAL
55825: IFFALSE 55835
// btype := b_barracks ;
55827: LD_ADDR_VAR 0 5
55831: PUSH
55832: LD_INT 5
55834: ST_TO_ADDR
// if btype = b_depot then
55835: LD_VAR 0 5
55839: PUSH
55840: LD_INT 0
55842: EQUAL
55843: IFFALSE 55853
// btype := b_warehouse ;
55845: LD_ADDR_VAR 0 5
55849: PUSH
55850: LD_INT 1
55852: ST_TO_ADDR
// if btype = b_workshop then
55853: LD_VAR 0 5
55857: PUSH
55858: LD_INT 2
55860: EQUAL
55861: IFFALSE 55871
// btype := b_factory ;
55863: LD_ADDR_VAR 0 5
55867: PUSH
55868: LD_INT 3
55870: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55871: LD_ADDR_VAR 0 4
55875: PUSH
55876: LD_VAR 0 5
55880: PPUSH
55881: LD_VAR 0 1
55885: PPUSH
55886: CALL_OW 248
55890: PPUSH
55891: CALL_OW 450
55895: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55896: LD_ADDR_VAR 0 2
55900: PUSH
55901: LD_VAR 0 3
55905: PPUSH
55906: LD_INT 1
55908: PPUSH
55909: CALL_OW 275
55913: PUSH
55914: LD_VAR 0 4
55918: PUSH
55919: LD_INT 1
55921: ARRAY
55922: GREATEREQUAL
55923: PUSH
55924: LD_VAR 0 3
55928: PPUSH
55929: LD_INT 2
55931: PPUSH
55932: CALL_OW 275
55936: PUSH
55937: LD_VAR 0 4
55941: PUSH
55942: LD_INT 2
55944: ARRAY
55945: GREATEREQUAL
55946: AND
55947: PUSH
55948: LD_VAR 0 3
55952: PPUSH
55953: LD_INT 3
55955: PPUSH
55956: CALL_OW 275
55960: PUSH
55961: LD_VAR 0 4
55965: PUSH
55966: LD_INT 3
55968: ARRAY
55969: GREATEREQUAL
55970: AND
55971: ST_TO_ADDR
// end ;
55972: LD_VAR 0 2
55976: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
55977: LD_INT 0
55979: PPUSH
55980: PPUSH
55981: PPUSH
// pom := GetBase ( building ) ;
55982: LD_ADDR_VAR 0 4
55986: PUSH
55987: LD_VAR 0 1
55991: PPUSH
55992: CALL_OW 274
55996: ST_TO_ADDR
// if not pom then
55997: LD_VAR 0 4
56001: NOT
56002: IFFALSE 56006
// exit ;
56004: GO 56107
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
56006: LD_ADDR_VAR 0 5
56010: PUSH
56011: LD_VAR 0 2
56015: PPUSH
56016: LD_VAR 0 1
56020: PPUSH
56021: CALL_OW 248
56025: PPUSH
56026: CALL_OW 450
56030: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
56031: LD_ADDR_VAR 0 3
56035: PUSH
56036: LD_VAR 0 4
56040: PPUSH
56041: LD_INT 1
56043: PPUSH
56044: CALL_OW 275
56048: PUSH
56049: LD_VAR 0 5
56053: PUSH
56054: LD_INT 1
56056: ARRAY
56057: GREATEREQUAL
56058: PUSH
56059: LD_VAR 0 4
56063: PPUSH
56064: LD_INT 2
56066: PPUSH
56067: CALL_OW 275
56071: PUSH
56072: LD_VAR 0 5
56076: PUSH
56077: LD_INT 2
56079: ARRAY
56080: GREATEREQUAL
56081: AND
56082: PUSH
56083: LD_VAR 0 4
56087: PPUSH
56088: LD_INT 3
56090: PPUSH
56091: CALL_OW 275
56095: PUSH
56096: LD_VAR 0 5
56100: PUSH
56101: LD_INT 3
56103: ARRAY
56104: GREATEREQUAL
56105: AND
56106: ST_TO_ADDR
// end ;
56107: LD_VAR 0 3
56111: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
56112: LD_INT 0
56114: PPUSH
56115: PPUSH
56116: PPUSH
56117: PPUSH
56118: PPUSH
56119: PPUSH
56120: PPUSH
56121: PPUSH
56122: PPUSH
56123: PPUSH
56124: PPUSH
// result := false ;
56125: LD_ADDR_VAR 0 8
56129: PUSH
56130: LD_INT 0
56132: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
56133: LD_VAR 0 5
56137: NOT
56138: PUSH
56139: LD_VAR 0 1
56143: NOT
56144: OR
56145: PUSH
56146: LD_VAR 0 2
56150: NOT
56151: OR
56152: PUSH
56153: LD_VAR 0 3
56157: NOT
56158: OR
56159: IFFALSE 56163
// exit ;
56161: GO 56977
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
56163: LD_ADDR_VAR 0 14
56167: PUSH
56168: LD_VAR 0 1
56172: PPUSH
56173: LD_VAR 0 2
56177: PPUSH
56178: LD_VAR 0 3
56182: PPUSH
56183: LD_VAR 0 4
56187: PPUSH
56188: LD_VAR 0 5
56192: PUSH
56193: LD_INT 1
56195: ARRAY
56196: PPUSH
56197: CALL_OW 248
56201: PPUSH
56202: LD_INT 0
56204: PPUSH
56205: CALL 58210 0 6
56209: ST_TO_ADDR
// if not hexes then
56210: LD_VAR 0 14
56214: NOT
56215: IFFALSE 56219
// exit ;
56217: GO 56977
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56219: LD_ADDR_VAR 0 17
56223: PUSH
56224: LD_VAR 0 5
56228: PPUSH
56229: LD_INT 22
56231: PUSH
56232: LD_VAR 0 13
56236: PPUSH
56237: CALL_OW 255
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 2
56248: PUSH
56249: LD_INT 30
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 30
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: LIST
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PPUSH
56278: CALL_OW 72
56282: ST_TO_ADDR
// for i = 1 to hexes do
56283: LD_ADDR_VAR 0 9
56287: PUSH
56288: DOUBLE
56289: LD_INT 1
56291: DEC
56292: ST_TO_ADDR
56293: LD_VAR 0 14
56297: PUSH
56298: FOR_TO
56299: IFFALSE 56975
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56301: LD_ADDR_VAR 0 13
56305: PUSH
56306: LD_VAR 0 14
56310: PUSH
56311: LD_VAR 0 9
56315: ARRAY
56316: PUSH
56317: LD_INT 1
56319: ARRAY
56320: PPUSH
56321: LD_VAR 0 14
56325: PUSH
56326: LD_VAR 0 9
56330: ARRAY
56331: PUSH
56332: LD_INT 2
56334: ARRAY
56335: PPUSH
56336: CALL_OW 428
56340: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
56341: LD_VAR 0 14
56345: PUSH
56346: LD_VAR 0 9
56350: ARRAY
56351: PUSH
56352: LD_INT 1
56354: ARRAY
56355: PPUSH
56356: LD_VAR 0 14
56360: PUSH
56361: LD_VAR 0 9
56365: ARRAY
56366: PUSH
56367: LD_INT 2
56369: ARRAY
56370: PPUSH
56371: CALL_OW 351
56375: PUSH
56376: LD_VAR 0 14
56380: PUSH
56381: LD_VAR 0 9
56385: ARRAY
56386: PUSH
56387: LD_INT 1
56389: ARRAY
56390: PPUSH
56391: LD_VAR 0 14
56395: PUSH
56396: LD_VAR 0 9
56400: ARRAY
56401: PUSH
56402: LD_INT 2
56404: ARRAY
56405: PPUSH
56406: CALL_OW 488
56410: NOT
56411: OR
56412: PUSH
56413: LD_VAR 0 13
56417: PPUSH
56418: CALL_OW 247
56422: PUSH
56423: LD_INT 3
56425: EQUAL
56426: OR
56427: IFFALSE 56433
// exit ;
56429: POP
56430: POP
56431: GO 56977
// if not tmp then
56433: LD_VAR 0 13
56437: NOT
56438: IFFALSE 56442
// continue ;
56440: GO 56298
// result := true ;
56442: LD_ADDR_VAR 0 8
56446: PUSH
56447: LD_INT 1
56449: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
56450: LD_VAR 0 6
56454: PUSH
56455: LD_VAR 0 13
56459: PPUSH
56460: CALL_OW 247
56464: PUSH
56465: LD_INT 2
56467: EQUAL
56468: AND
56469: PUSH
56470: LD_VAR 0 13
56474: PPUSH
56475: CALL_OW 263
56479: PUSH
56480: LD_INT 1
56482: EQUAL
56483: AND
56484: IFFALSE 56648
// begin if IsDrivenBy ( tmp ) then
56486: LD_VAR 0 13
56490: PPUSH
56491: CALL_OW 311
56495: IFFALSE 56499
// continue ;
56497: GO 56298
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
56499: LD_VAR 0 6
56503: PPUSH
56504: LD_INT 3
56506: PUSH
56507: LD_INT 60
56509: PUSH
56510: EMPTY
56511: LIST
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 3
56519: PUSH
56520: LD_INT 55
56522: PUSH
56523: EMPTY
56524: LIST
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PPUSH
56534: CALL_OW 72
56538: IFFALSE 56646
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
56540: LD_ADDR_VAR 0 18
56544: PUSH
56545: LD_VAR 0 6
56549: PPUSH
56550: LD_INT 3
56552: PUSH
56553: LD_INT 60
56555: PUSH
56556: EMPTY
56557: LIST
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 3
56565: PUSH
56566: LD_INT 55
56568: PUSH
56569: EMPTY
56570: LIST
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PPUSH
56580: CALL_OW 72
56584: PUSH
56585: LD_INT 1
56587: ARRAY
56588: ST_TO_ADDR
// if IsInUnit ( driver ) then
56589: LD_VAR 0 18
56593: PPUSH
56594: CALL_OW 310
56598: IFFALSE 56609
// ComExit ( driver ) ;
56600: LD_VAR 0 18
56604: PPUSH
56605: CALL 81990 0 1
// AddComEnterUnit ( driver , tmp ) ;
56609: LD_VAR 0 18
56613: PPUSH
56614: LD_VAR 0 13
56618: PPUSH
56619: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
56623: LD_VAR 0 18
56627: PPUSH
56628: LD_VAR 0 7
56632: PPUSH
56633: CALL_OW 173
// AddComExitVehicle ( driver ) ;
56637: LD_VAR 0 18
56641: PPUSH
56642: CALL_OW 181
// end ; continue ;
56646: GO 56298
// end ; if not cleaners or not tmp in cleaners then
56648: LD_VAR 0 6
56652: NOT
56653: PUSH
56654: LD_VAR 0 13
56658: PUSH
56659: LD_VAR 0 6
56663: IN
56664: NOT
56665: OR
56666: IFFALSE 56973
// begin if dep then
56668: LD_VAR 0 17
56672: IFFALSE 56808
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
56674: LD_ADDR_VAR 0 16
56678: PUSH
56679: LD_VAR 0 17
56683: PUSH
56684: LD_INT 1
56686: ARRAY
56687: PPUSH
56688: CALL_OW 250
56692: PPUSH
56693: LD_VAR 0 17
56697: PUSH
56698: LD_INT 1
56700: ARRAY
56701: PPUSH
56702: CALL_OW 254
56706: PPUSH
56707: LD_INT 5
56709: PPUSH
56710: CALL_OW 272
56714: PUSH
56715: LD_VAR 0 17
56719: PUSH
56720: LD_INT 1
56722: ARRAY
56723: PPUSH
56724: CALL_OW 251
56728: PPUSH
56729: LD_VAR 0 17
56733: PUSH
56734: LD_INT 1
56736: ARRAY
56737: PPUSH
56738: CALL_OW 254
56742: PPUSH
56743: LD_INT 5
56745: PPUSH
56746: CALL_OW 273
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
56755: LD_VAR 0 16
56759: PUSH
56760: LD_INT 1
56762: ARRAY
56763: PPUSH
56764: LD_VAR 0 16
56768: PUSH
56769: LD_INT 2
56771: ARRAY
56772: PPUSH
56773: CALL_OW 488
56777: IFFALSE 56808
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
56779: LD_VAR 0 13
56783: PPUSH
56784: LD_VAR 0 16
56788: PUSH
56789: LD_INT 1
56791: ARRAY
56792: PPUSH
56793: LD_VAR 0 16
56797: PUSH
56798: LD_INT 2
56800: ARRAY
56801: PPUSH
56802: CALL_OW 111
// continue ;
56806: GO 56298
// end ; end ; r := GetDir ( tmp ) ;
56808: LD_ADDR_VAR 0 15
56812: PUSH
56813: LD_VAR 0 13
56817: PPUSH
56818: CALL_OW 254
56822: ST_TO_ADDR
// if r = 5 then
56823: LD_VAR 0 15
56827: PUSH
56828: LD_INT 5
56830: EQUAL
56831: IFFALSE 56841
// r := 0 ;
56833: LD_ADDR_VAR 0 15
56837: PUSH
56838: LD_INT 0
56840: ST_TO_ADDR
// for j = r to 5 do
56841: LD_ADDR_VAR 0 10
56845: PUSH
56846: DOUBLE
56847: LD_VAR 0 15
56851: DEC
56852: ST_TO_ADDR
56853: LD_INT 5
56855: PUSH
56856: FOR_TO
56857: IFFALSE 56971
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
56859: LD_ADDR_VAR 0 11
56863: PUSH
56864: LD_VAR 0 13
56868: PPUSH
56869: CALL_OW 250
56873: PPUSH
56874: LD_VAR 0 10
56878: PPUSH
56879: LD_INT 2
56881: PPUSH
56882: CALL_OW 272
56886: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
56887: LD_ADDR_VAR 0 12
56891: PUSH
56892: LD_VAR 0 13
56896: PPUSH
56897: CALL_OW 251
56901: PPUSH
56902: LD_VAR 0 10
56906: PPUSH
56907: LD_INT 2
56909: PPUSH
56910: CALL_OW 273
56914: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
56915: LD_VAR 0 11
56919: PPUSH
56920: LD_VAR 0 12
56924: PPUSH
56925: CALL_OW 488
56929: PUSH
56930: LD_VAR 0 11
56934: PPUSH
56935: LD_VAR 0 12
56939: PPUSH
56940: CALL_OW 428
56944: NOT
56945: AND
56946: IFFALSE 56969
// begin ComMoveXY ( tmp , _x , _y ) ;
56948: LD_VAR 0 13
56952: PPUSH
56953: LD_VAR 0 11
56957: PPUSH
56958: LD_VAR 0 12
56962: PPUSH
56963: CALL_OW 111
// break ;
56967: GO 56971
// end ; end ;
56969: GO 56856
56971: POP
56972: POP
// end ; end ;
56973: GO 56298
56975: POP
56976: POP
// end ;
56977: LD_VAR 0 8
56981: RET
// export function BuildingTechInvented ( side , btype ) ; begin
56982: LD_INT 0
56984: PPUSH
// result := true ;
56985: LD_ADDR_VAR 0 3
56989: PUSH
56990: LD_INT 1
56992: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
56993: LD_VAR 0 2
56997: PUSH
56998: LD_INT 24
57000: DOUBLE
57001: EQUAL
57002: IFTRUE 57012
57004: LD_INT 33
57006: DOUBLE
57007: EQUAL
57008: IFTRUE 57012
57010: GO 57037
57012: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
57013: LD_ADDR_VAR 0 3
57017: PUSH
57018: LD_INT 32
57020: PPUSH
57021: LD_VAR 0 1
57025: PPUSH
57026: CALL_OW 321
57030: PUSH
57031: LD_INT 2
57033: EQUAL
57034: ST_TO_ADDR
57035: GO 57353
57037: LD_INT 20
57039: DOUBLE
57040: EQUAL
57041: IFTRUE 57045
57043: GO 57070
57045: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
57046: LD_ADDR_VAR 0 3
57050: PUSH
57051: LD_INT 6
57053: PPUSH
57054: LD_VAR 0 1
57058: PPUSH
57059: CALL_OW 321
57063: PUSH
57064: LD_INT 2
57066: EQUAL
57067: ST_TO_ADDR
57068: GO 57353
57070: LD_INT 22
57072: DOUBLE
57073: EQUAL
57074: IFTRUE 57084
57076: LD_INT 36
57078: DOUBLE
57079: EQUAL
57080: IFTRUE 57084
57082: GO 57109
57084: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
57085: LD_ADDR_VAR 0 3
57089: PUSH
57090: LD_INT 15
57092: PPUSH
57093: LD_VAR 0 1
57097: PPUSH
57098: CALL_OW 321
57102: PUSH
57103: LD_INT 2
57105: EQUAL
57106: ST_TO_ADDR
57107: GO 57353
57109: LD_INT 30
57111: DOUBLE
57112: EQUAL
57113: IFTRUE 57117
57115: GO 57142
57117: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
57118: LD_ADDR_VAR 0 3
57122: PUSH
57123: LD_INT 20
57125: PPUSH
57126: LD_VAR 0 1
57130: PPUSH
57131: CALL_OW 321
57135: PUSH
57136: LD_INT 2
57138: EQUAL
57139: ST_TO_ADDR
57140: GO 57353
57142: LD_INT 28
57144: DOUBLE
57145: EQUAL
57146: IFTRUE 57156
57148: LD_INT 21
57150: DOUBLE
57151: EQUAL
57152: IFTRUE 57156
57154: GO 57181
57156: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
57157: LD_ADDR_VAR 0 3
57161: PUSH
57162: LD_INT 21
57164: PPUSH
57165: LD_VAR 0 1
57169: PPUSH
57170: CALL_OW 321
57174: PUSH
57175: LD_INT 2
57177: EQUAL
57178: ST_TO_ADDR
57179: GO 57353
57181: LD_INT 16
57183: DOUBLE
57184: EQUAL
57185: IFTRUE 57189
57187: GO 57214
57189: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
57190: LD_ADDR_VAR 0 3
57194: PUSH
57195: LD_INT 84
57197: PPUSH
57198: LD_VAR 0 1
57202: PPUSH
57203: CALL_OW 321
57207: PUSH
57208: LD_INT 2
57210: EQUAL
57211: ST_TO_ADDR
57212: GO 57353
57214: LD_INT 19
57216: DOUBLE
57217: EQUAL
57218: IFTRUE 57228
57220: LD_INT 23
57222: DOUBLE
57223: EQUAL
57224: IFTRUE 57228
57226: GO 57253
57228: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
57229: LD_ADDR_VAR 0 3
57233: PUSH
57234: LD_INT 83
57236: PPUSH
57237: LD_VAR 0 1
57241: PPUSH
57242: CALL_OW 321
57246: PUSH
57247: LD_INT 2
57249: EQUAL
57250: ST_TO_ADDR
57251: GO 57353
57253: LD_INT 17
57255: DOUBLE
57256: EQUAL
57257: IFTRUE 57261
57259: GO 57286
57261: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
57262: LD_ADDR_VAR 0 3
57266: PUSH
57267: LD_INT 39
57269: PPUSH
57270: LD_VAR 0 1
57274: PPUSH
57275: CALL_OW 321
57279: PUSH
57280: LD_INT 2
57282: EQUAL
57283: ST_TO_ADDR
57284: GO 57353
57286: LD_INT 18
57288: DOUBLE
57289: EQUAL
57290: IFTRUE 57294
57292: GO 57319
57294: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
57295: LD_ADDR_VAR 0 3
57299: PUSH
57300: LD_INT 40
57302: PPUSH
57303: LD_VAR 0 1
57307: PPUSH
57308: CALL_OW 321
57312: PUSH
57313: LD_INT 2
57315: EQUAL
57316: ST_TO_ADDR
57317: GO 57353
57319: LD_INT 27
57321: DOUBLE
57322: EQUAL
57323: IFTRUE 57327
57325: GO 57352
57327: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
57328: LD_ADDR_VAR 0 3
57332: PUSH
57333: LD_INT 35
57335: PPUSH
57336: LD_VAR 0 1
57340: PPUSH
57341: CALL_OW 321
57345: PUSH
57346: LD_INT 2
57348: EQUAL
57349: ST_TO_ADDR
57350: GO 57353
57352: POP
// end ;
57353: LD_VAR 0 3
57357: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
57358: LD_INT 0
57360: PPUSH
57361: PPUSH
57362: PPUSH
57363: PPUSH
57364: PPUSH
57365: PPUSH
57366: PPUSH
57367: PPUSH
57368: PPUSH
57369: PPUSH
57370: PPUSH
// result := false ;
57371: LD_ADDR_VAR 0 6
57375: PUSH
57376: LD_INT 0
57378: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
57379: LD_VAR 0 1
57383: NOT
57384: PUSH
57385: LD_VAR 0 1
57389: PPUSH
57390: CALL_OW 266
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: LD_INT 1
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: IN
57405: NOT
57406: OR
57407: PUSH
57408: LD_VAR 0 2
57412: NOT
57413: OR
57414: PUSH
57415: LD_VAR 0 5
57419: PUSH
57420: LD_INT 0
57422: PUSH
57423: LD_INT 1
57425: PUSH
57426: LD_INT 2
57428: PUSH
57429: LD_INT 3
57431: PUSH
57432: LD_INT 4
57434: PUSH
57435: LD_INT 5
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: IN
57446: NOT
57447: OR
57448: PUSH
57449: LD_VAR 0 3
57453: PPUSH
57454: LD_VAR 0 4
57458: PPUSH
57459: CALL_OW 488
57463: NOT
57464: OR
57465: IFFALSE 57469
// exit ;
57467: GO 58205
// side := GetSide ( depot ) ;
57469: LD_ADDR_VAR 0 9
57473: PUSH
57474: LD_VAR 0 1
57478: PPUSH
57479: CALL_OW 255
57483: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
57484: LD_VAR 0 9
57488: PPUSH
57489: LD_VAR 0 2
57493: PPUSH
57494: CALL 56982 0 2
57498: NOT
57499: IFFALSE 57503
// exit ;
57501: GO 58205
// pom := GetBase ( depot ) ;
57503: LD_ADDR_VAR 0 10
57507: PUSH
57508: LD_VAR 0 1
57512: PPUSH
57513: CALL_OW 274
57517: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57518: LD_ADDR_VAR 0 11
57522: PUSH
57523: LD_VAR 0 2
57527: PPUSH
57528: LD_VAR 0 1
57532: PPUSH
57533: CALL_OW 248
57537: PPUSH
57538: CALL_OW 450
57542: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
57543: LD_VAR 0 10
57547: PPUSH
57548: LD_INT 1
57550: PPUSH
57551: CALL_OW 275
57555: PUSH
57556: LD_VAR 0 11
57560: PUSH
57561: LD_INT 1
57563: ARRAY
57564: GREATEREQUAL
57565: PUSH
57566: LD_VAR 0 10
57570: PPUSH
57571: LD_INT 2
57573: PPUSH
57574: CALL_OW 275
57578: PUSH
57579: LD_VAR 0 11
57583: PUSH
57584: LD_INT 2
57586: ARRAY
57587: GREATEREQUAL
57588: AND
57589: PUSH
57590: LD_VAR 0 10
57594: PPUSH
57595: LD_INT 3
57597: PPUSH
57598: CALL_OW 275
57602: PUSH
57603: LD_VAR 0 11
57607: PUSH
57608: LD_INT 3
57610: ARRAY
57611: GREATEREQUAL
57612: AND
57613: NOT
57614: IFFALSE 57618
// exit ;
57616: GO 58205
// if GetBType ( depot ) = b_depot then
57618: LD_VAR 0 1
57622: PPUSH
57623: CALL_OW 266
57627: PUSH
57628: LD_INT 0
57630: EQUAL
57631: IFFALSE 57643
// dist := 28 else
57633: LD_ADDR_VAR 0 14
57637: PUSH
57638: LD_INT 28
57640: ST_TO_ADDR
57641: GO 57651
// dist := 36 ;
57643: LD_ADDR_VAR 0 14
57647: PUSH
57648: LD_INT 36
57650: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
57651: LD_VAR 0 1
57655: PPUSH
57656: LD_VAR 0 3
57660: PPUSH
57661: LD_VAR 0 4
57665: PPUSH
57666: CALL_OW 297
57670: PUSH
57671: LD_VAR 0 14
57675: GREATER
57676: IFFALSE 57680
// exit ;
57678: GO 58205
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
57680: LD_ADDR_VAR 0 12
57684: PUSH
57685: LD_VAR 0 2
57689: PPUSH
57690: LD_VAR 0 3
57694: PPUSH
57695: LD_VAR 0 4
57699: PPUSH
57700: LD_VAR 0 5
57704: PPUSH
57705: LD_VAR 0 1
57709: PPUSH
57710: CALL_OW 248
57714: PPUSH
57715: LD_INT 0
57717: PPUSH
57718: CALL 58210 0 6
57722: ST_TO_ADDR
// if not hexes then
57723: LD_VAR 0 12
57727: NOT
57728: IFFALSE 57732
// exit ;
57730: GO 58205
// hex := GetHexInfo ( x , y ) ;
57732: LD_ADDR_VAR 0 15
57736: PUSH
57737: LD_VAR 0 3
57741: PPUSH
57742: LD_VAR 0 4
57746: PPUSH
57747: CALL_OW 546
57751: ST_TO_ADDR
// if hex [ 1 ] then
57752: LD_VAR 0 15
57756: PUSH
57757: LD_INT 1
57759: ARRAY
57760: IFFALSE 57764
// exit ;
57762: GO 58205
// height := hex [ 2 ] ;
57764: LD_ADDR_VAR 0 13
57768: PUSH
57769: LD_VAR 0 15
57773: PUSH
57774: LD_INT 2
57776: ARRAY
57777: ST_TO_ADDR
// for i = 1 to hexes do
57778: LD_ADDR_VAR 0 7
57782: PUSH
57783: DOUBLE
57784: LD_INT 1
57786: DEC
57787: ST_TO_ADDR
57788: LD_VAR 0 12
57792: PUSH
57793: FOR_TO
57794: IFFALSE 58124
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
57796: LD_VAR 0 12
57800: PUSH
57801: LD_VAR 0 7
57805: ARRAY
57806: PUSH
57807: LD_INT 1
57809: ARRAY
57810: PPUSH
57811: LD_VAR 0 12
57815: PUSH
57816: LD_VAR 0 7
57820: ARRAY
57821: PUSH
57822: LD_INT 2
57824: ARRAY
57825: PPUSH
57826: CALL_OW 488
57830: NOT
57831: PUSH
57832: LD_VAR 0 12
57836: PUSH
57837: LD_VAR 0 7
57841: ARRAY
57842: PUSH
57843: LD_INT 1
57845: ARRAY
57846: PPUSH
57847: LD_VAR 0 12
57851: PUSH
57852: LD_VAR 0 7
57856: ARRAY
57857: PUSH
57858: LD_INT 2
57860: ARRAY
57861: PPUSH
57862: CALL_OW 428
57866: PUSH
57867: LD_INT 0
57869: GREATER
57870: OR
57871: PUSH
57872: LD_VAR 0 12
57876: PUSH
57877: LD_VAR 0 7
57881: ARRAY
57882: PUSH
57883: LD_INT 1
57885: ARRAY
57886: PPUSH
57887: LD_VAR 0 12
57891: PUSH
57892: LD_VAR 0 7
57896: ARRAY
57897: PUSH
57898: LD_INT 2
57900: ARRAY
57901: PPUSH
57902: CALL_OW 351
57906: OR
57907: IFFALSE 57913
// exit ;
57909: POP
57910: POP
57911: GO 58205
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57913: LD_ADDR_VAR 0 8
57917: PUSH
57918: LD_VAR 0 12
57922: PUSH
57923: LD_VAR 0 7
57927: ARRAY
57928: PUSH
57929: LD_INT 1
57931: ARRAY
57932: PPUSH
57933: LD_VAR 0 12
57937: PUSH
57938: LD_VAR 0 7
57942: ARRAY
57943: PUSH
57944: LD_INT 2
57946: ARRAY
57947: PPUSH
57948: CALL_OW 546
57952: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
57953: LD_VAR 0 8
57957: PUSH
57958: LD_INT 1
57960: ARRAY
57961: PUSH
57962: LD_VAR 0 8
57966: PUSH
57967: LD_INT 2
57969: ARRAY
57970: PUSH
57971: LD_VAR 0 13
57975: PUSH
57976: LD_INT 2
57978: PLUS
57979: GREATER
57980: OR
57981: PUSH
57982: LD_VAR 0 8
57986: PUSH
57987: LD_INT 2
57989: ARRAY
57990: PUSH
57991: LD_VAR 0 13
57995: PUSH
57996: LD_INT 2
57998: MINUS
57999: LESS
58000: OR
58001: PUSH
58002: LD_VAR 0 8
58006: PUSH
58007: LD_INT 3
58009: ARRAY
58010: PUSH
58011: LD_INT 0
58013: PUSH
58014: LD_INT 8
58016: PUSH
58017: LD_INT 9
58019: PUSH
58020: LD_INT 10
58022: PUSH
58023: LD_INT 11
58025: PUSH
58026: LD_INT 12
58028: PUSH
58029: LD_INT 13
58031: PUSH
58032: LD_INT 16
58034: PUSH
58035: LD_INT 17
58037: PUSH
58038: LD_INT 18
58040: PUSH
58041: LD_INT 19
58043: PUSH
58044: LD_INT 20
58046: PUSH
58047: LD_INT 21
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: IN
58065: NOT
58066: OR
58067: PUSH
58068: LD_VAR 0 8
58072: PUSH
58073: LD_INT 5
58075: ARRAY
58076: NOT
58077: OR
58078: PUSH
58079: LD_VAR 0 8
58083: PUSH
58084: LD_INT 6
58086: ARRAY
58087: PUSH
58088: LD_INT 1
58090: PUSH
58091: LD_INT 2
58093: PUSH
58094: LD_INT 7
58096: PUSH
58097: LD_INT 9
58099: PUSH
58100: LD_INT 10
58102: PUSH
58103: LD_INT 11
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: IN
58114: NOT
58115: OR
58116: IFFALSE 58122
// exit ;
58118: POP
58119: POP
58120: GO 58205
// end ;
58122: GO 57793
58124: POP
58125: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
58126: LD_VAR 0 9
58130: PPUSH
58131: LD_VAR 0 3
58135: PPUSH
58136: LD_VAR 0 4
58140: PPUSH
58141: LD_INT 20
58143: PPUSH
58144: CALL 50157 0 4
58148: PUSH
58149: LD_INT 4
58151: ARRAY
58152: IFFALSE 58156
// exit ;
58154: GO 58205
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
58156: LD_VAR 0 2
58160: PUSH
58161: LD_INT 29
58163: PUSH
58164: LD_INT 30
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: IN
58171: PUSH
58172: LD_VAR 0 3
58176: PPUSH
58177: LD_VAR 0 4
58181: PPUSH
58182: LD_VAR 0 9
58186: PPUSH
58187: CALL_OW 440
58191: NOT
58192: AND
58193: IFFALSE 58197
// exit ;
58195: GO 58205
// result := true ;
58197: LD_ADDR_VAR 0 6
58201: PUSH
58202: LD_INT 1
58204: ST_TO_ADDR
// end ;
58205: LD_VAR 0 6
58209: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
58210: LD_INT 0
58212: PPUSH
58213: PPUSH
58214: PPUSH
58215: PPUSH
58216: PPUSH
58217: PPUSH
58218: PPUSH
58219: PPUSH
58220: PPUSH
58221: PPUSH
58222: PPUSH
58223: PPUSH
58224: PPUSH
58225: PPUSH
58226: PPUSH
58227: PPUSH
58228: PPUSH
58229: PPUSH
58230: PPUSH
58231: PPUSH
58232: PPUSH
58233: PPUSH
58234: PPUSH
58235: PPUSH
58236: PPUSH
58237: PPUSH
58238: PPUSH
58239: PPUSH
58240: PPUSH
58241: PPUSH
58242: PPUSH
58243: PPUSH
58244: PPUSH
58245: PPUSH
58246: PPUSH
58247: PPUSH
58248: PPUSH
58249: PPUSH
58250: PPUSH
58251: PPUSH
58252: PPUSH
58253: PPUSH
58254: PPUSH
58255: PPUSH
58256: PPUSH
58257: PPUSH
58258: PPUSH
58259: PPUSH
58260: PPUSH
58261: PPUSH
58262: PPUSH
58263: PPUSH
58264: PPUSH
58265: PPUSH
58266: PPUSH
58267: PPUSH
58268: PPUSH
58269: PPUSH
// result = [ ] ;
58270: LD_ADDR_VAR 0 7
58274: PUSH
58275: EMPTY
58276: ST_TO_ADDR
// temp_list = [ ] ;
58277: LD_ADDR_VAR 0 9
58281: PUSH
58282: EMPTY
58283: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
58284: LD_VAR 0 4
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: LD_INT 1
58294: PUSH
58295: LD_INT 2
58297: PUSH
58298: LD_INT 3
58300: PUSH
58301: LD_INT 4
58303: PUSH
58304: LD_INT 5
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: IN
58315: NOT
58316: PUSH
58317: LD_VAR 0 1
58321: PUSH
58322: LD_INT 0
58324: PUSH
58325: LD_INT 1
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: IN
58332: PUSH
58333: LD_VAR 0 5
58337: PUSH
58338: LD_INT 1
58340: PUSH
58341: LD_INT 2
58343: PUSH
58344: LD_INT 3
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: LIST
58351: IN
58352: NOT
58353: AND
58354: OR
58355: IFFALSE 58359
// exit ;
58357: GO 76750
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
58359: LD_VAR 0 1
58363: PUSH
58364: LD_INT 6
58366: PUSH
58367: LD_INT 7
58369: PUSH
58370: LD_INT 8
58372: PUSH
58373: LD_INT 13
58375: PUSH
58376: LD_INT 12
58378: PUSH
58379: LD_INT 15
58381: PUSH
58382: LD_INT 11
58384: PUSH
58385: LD_INT 14
58387: PUSH
58388: LD_INT 10
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: IN
58402: IFFALSE 58412
// btype = b_lab ;
58404: LD_ADDR_VAR 0 1
58408: PUSH
58409: LD_INT 6
58411: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
58412: LD_VAR 0 6
58416: PUSH
58417: LD_INT 0
58419: PUSH
58420: LD_INT 1
58422: PUSH
58423: LD_INT 2
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: LIST
58430: IN
58431: NOT
58432: PUSH
58433: LD_VAR 0 1
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: LD_INT 2
58446: PUSH
58447: LD_INT 3
58449: PUSH
58450: LD_INT 6
58452: PUSH
58453: LD_INT 36
58455: PUSH
58456: LD_INT 4
58458: PUSH
58459: LD_INT 5
58461: PUSH
58462: LD_INT 31
58464: PUSH
58465: LD_INT 32
58467: PUSH
58468: LD_INT 33
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: IN
58484: NOT
58485: PUSH
58486: LD_VAR 0 6
58490: PUSH
58491: LD_INT 1
58493: EQUAL
58494: AND
58495: OR
58496: PUSH
58497: LD_VAR 0 1
58501: PUSH
58502: LD_INT 2
58504: PUSH
58505: LD_INT 3
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: IN
58512: NOT
58513: PUSH
58514: LD_VAR 0 6
58518: PUSH
58519: LD_INT 2
58521: EQUAL
58522: AND
58523: OR
58524: IFFALSE 58534
// mode = 0 ;
58526: LD_ADDR_VAR 0 6
58530: PUSH
58531: LD_INT 0
58533: ST_TO_ADDR
// case mode of 0 :
58534: LD_VAR 0 6
58538: PUSH
58539: LD_INT 0
58541: DOUBLE
58542: EQUAL
58543: IFTRUE 58547
58545: GO 70000
58547: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58548: LD_ADDR_VAR 0 11
58552: PUSH
58553: LD_INT 0
58555: PUSH
58556: LD_INT 0
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 0
58565: PUSH
58566: LD_INT 1
58568: NEG
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 1
58576: PUSH
58577: LD_INT 0
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 1
58586: PUSH
58587: LD_INT 1
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 0
58596: PUSH
58597: LD_INT 1
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 1
58606: NEG
58607: PUSH
58608: LD_INT 0
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 1
58617: NEG
58618: PUSH
58619: LD_INT 1
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 1
58629: NEG
58630: PUSH
58631: LD_INT 2
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 0
58641: PUSH
58642: LD_INT 2
58644: NEG
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 1
58652: PUSH
58653: LD_INT 1
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 1
58663: PUSH
58664: LD_INT 2
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: LD_INT 2
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 1
58683: NEG
58684: PUSH
58685: LD_INT 1
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: PUSH
58695: LD_INT 3
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 0
58704: PUSH
58705: LD_INT 3
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 1
58714: NEG
58715: PUSH
58716: LD_INT 2
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58741: LD_ADDR_VAR 0 12
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: LD_INT 0
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 0
58758: PUSH
58759: LD_INT 1
58761: NEG
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 1
58769: PUSH
58770: LD_INT 0
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 1
58779: PUSH
58780: LD_INT 1
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: LD_INT 1
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 1
58799: NEG
58800: PUSH
58801: LD_INT 0
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: LD_INT 1
58814: NEG
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: LD_INT 1
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 2
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 2
58843: PUSH
58844: LD_INT 1
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 1
58853: NEG
58854: PUSH
58855: LD_INT 1
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 2
58864: NEG
58865: PUSH
58866: LD_INT 0
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 2
58875: NEG
58876: PUSH
58877: LD_INT 1
58879: NEG
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 2
58887: NEG
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 3
58898: NEG
58899: PUSH
58900: LD_INT 0
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 3
58909: NEG
58910: PUSH
58911: LD_INT 1
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58937: LD_ADDR_VAR 0 13
58941: PUSH
58942: LD_INT 0
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 0
58954: PUSH
58955: LD_INT 1
58957: NEG
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 1
58965: PUSH
58966: LD_INT 0
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 1
58975: PUSH
58976: LD_INT 1
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 0
58985: PUSH
58986: LD_INT 1
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 1
58995: NEG
58996: PUSH
58997: LD_INT 0
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 1
59006: NEG
59007: PUSH
59008: LD_INT 1
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 1
59018: NEG
59019: PUSH
59020: LD_INT 2
59022: NEG
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 2
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 2
59040: PUSH
59041: LD_INT 2
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 1
59050: PUSH
59051: LD_INT 2
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 2
59060: NEG
59061: PUSH
59062: LD_INT 1
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 2
59072: NEG
59073: PUSH
59074: LD_INT 2
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 2
59084: NEG
59085: PUSH
59086: LD_INT 3
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 3
59096: NEG
59097: PUSH
59098: LD_INT 2
59100: NEG
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 3
59108: NEG
59109: PUSH
59110: LD_INT 3
59112: NEG
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59136: LD_ADDR_VAR 0 14
59140: PUSH
59141: LD_INT 0
59143: PUSH
59144: LD_INT 0
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: LD_INT 1
59156: NEG
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 1
59164: PUSH
59165: LD_INT 0
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 1
59174: PUSH
59175: LD_INT 1
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 0
59184: PUSH
59185: LD_INT 1
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 1
59194: NEG
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 1
59205: NEG
59206: PUSH
59207: LD_INT 1
59209: NEG
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 1
59217: NEG
59218: PUSH
59219: LD_INT 2
59221: NEG
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 0
59229: PUSH
59230: LD_INT 2
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 1
59240: PUSH
59241: LD_INT 1
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: LD_INT 2
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: LD_INT 2
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 1
59271: NEG
59272: PUSH
59273: LD_INT 1
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 1
59282: NEG
59283: PUSH
59284: LD_INT 3
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 0
59294: PUSH
59295: LD_INT 3
59297: NEG
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 1
59305: PUSH
59306: LD_INT 2
59308: NEG
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59332: LD_ADDR_VAR 0 15
59336: PUSH
59337: LD_INT 0
59339: PUSH
59340: LD_INT 0
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 0
59349: PUSH
59350: LD_INT 1
59352: NEG
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 1
59360: PUSH
59361: LD_INT 0
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 1
59370: PUSH
59371: LD_INT 1
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 0
59380: PUSH
59381: LD_INT 1
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 1
59390: NEG
59391: PUSH
59392: LD_INT 0
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 1
59401: NEG
59402: PUSH
59403: LD_INT 1
59405: NEG
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: LD_INT 1
59416: NEG
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 2
59424: PUSH
59425: LD_INT 0
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 2
59434: PUSH
59435: LD_INT 1
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 1
59444: NEG
59445: PUSH
59446: LD_INT 1
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 2
59455: NEG
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 2
59466: NEG
59467: PUSH
59468: LD_INT 1
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 2
59478: PUSH
59479: LD_INT 1
59481: NEG
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 3
59489: PUSH
59490: LD_INT 0
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 3
59499: PUSH
59500: LD_INT 1
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59525: LD_ADDR_VAR 0 16
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: LD_INT 0
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 0
59542: PUSH
59543: LD_INT 1
59545: NEG
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 1
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 1
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 0
59573: PUSH
59574: LD_INT 1
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 1
59583: NEG
59584: PUSH
59585: LD_INT 0
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 1
59594: NEG
59595: PUSH
59596: LD_INT 1
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 1
59606: NEG
59607: PUSH
59608: LD_INT 2
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 2
59618: PUSH
59619: LD_INT 1
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 2
59628: PUSH
59629: LD_INT 2
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 1
59638: PUSH
59639: LD_INT 2
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 2
59648: NEG
59649: PUSH
59650: LD_INT 1
59652: NEG
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 2
59660: NEG
59661: PUSH
59662: LD_INT 2
59664: NEG
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 3
59672: PUSH
59673: LD_INT 2
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 3
59682: PUSH
59683: LD_INT 3
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 2
59692: PUSH
59693: LD_INT 3
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59718: LD_ADDR_VAR 0 17
59722: PUSH
59723: LD_INT 0
59725: PUSH
59726: LD_INT 0
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 0
59735: PUSH
59736: LD_INT 1
59738: NEG
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 1
59746: PUSH
59747: LD_INT 0
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 1
59756: PUSH
59757: LD_INT 1
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 0
59766: PUSH
59767: LD_INT 1
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 1
59776: NEG
59777: PUSH
59778: LD_INT 0
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 1
59787: NEG
59788: PUSH
59789: LD_INT 1
59791: NEG
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 1
59799: NEG
59800: PUSH
59801: LD_INT 2
59803: NEG
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 0
59811: PUSH
59812: LD_INT 2
59814: NEG
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 1
59822: PUSH
59823: LD_INT 1
59825: NEG
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 2
59833: PUSH
59834: LD_INT 0
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 2
59843: PUSH
59844: LD_INT 1
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 2
59853: PUSH
59854: LD_INT 2
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 1
59863: PUSH
59864: LD_INT 2
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 0
59873: PUSH
59874: LD_INT 2
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 1
59883: NEG
59884: PUSH
59885: LD_INT 1
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 2
59894: NEG
59895: PUSH
59896: LD_INT 0
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 2
59905: NEG
59906: PUSH
59907: LD_INT 1
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 2
59917: NEG
59918: PUSH
59919: LD_INT 2
59921: NEG
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59948: LD_ADDR_VAR 0 18
59952: PUSH
59953: LD_INT 0
59955: PUSH
59956: LD_INT 0
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 0
59965: PUSH
59966: LD_INT 1
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 1
59976: PUSH
59977: LD_INT 0
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 1
59986: PUSH
59987: LD_INT 1
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 0
59996: PUSH
59997: LD_INT 1
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 1
60006: NEG
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 1
60017: NEG
60018: PUSH
60019: LD_INT 1
60021: NEG
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 1
60029: NEG
60030: PUSH
60031: LD_INT 2
60033: NEG
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 0
60041: PUSH
60042: LD_INT 2
60044: NEG
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 1
60052: PUSH
60053: LD_INT 1
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 2
60063: PUSH
60064: LD_INT 0
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 2
60073: PUSH
60074: LD_INT 1
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 2
60083: PUSH
60084: LD_INT 2
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 1
60093: PUSH
60094: LD_INT 2
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 0
60103: PUSH
60104: LD_INT 2
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 1
60113: NEG
60114: PUSH
60115: LD_INT 1
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 2
60124: NEG
60125: PUSH
60126: LD_INT 0
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 2
60135: NEG
60136: PUSH
60137: LD_INT 1
60139: NEG
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 2
60147: NEG
60148: PUSH
60149: LD_INT 2
60151: NEG
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60178: LD_ADDR_VAR 0 19
60182: PUSH
60183: LD_INT 0
60185: PUSH
60186: LD_INT 0
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 0
60195: PUSH
60196: LD_INT 1
60198: NEG
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 1
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 1
60216: PUSH
60217: LD_INT 1
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 0
60226: PUSH
60227: LD_INT 1
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 1
60236: NEG
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 1
60247: NEG
60248: PUSH
60249: LD_INT 1
60251: NEG
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 1
60259: NEG
60260: PUSH
60261: LD_INT 2
60263: NEG
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 0
60271: PUSH
60272: LD_INT 2
60274: NEG
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 1
60282: PUSH
60283: LD_INT 1
60285: NEG
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 2
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 2
60303: PUSH
60304: LD_INT 1
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 2
60313: PUSH
60314: LD_INT 2
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 1
60323: PUSH
60324: LD_INT 2
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 0
60333: PUSH
60334: LD_INT 2
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 1
60343: NEG
60344: PUSH
60345: LD_INT 1
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 2
60354: NEG
60355: PUSH
60356: LD_INT 0
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 2
60365: NEG
60366: PUSH
60367: LD_INT 1
60369: NEG
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 2
60377: NEG
60378: PUSH
60379: LD_INT 2
60381: NEG
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60408: LD_ADDR_VAR 0 20
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: LD_INT 0
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 0
60425: PUSH
60426: LD_INT 1
60428: NEG
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 1
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 1
60446: PUSH
60447: LD_INT 1
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 0
60456: PUSH
60457: LD_INT 1
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 1
60466: NEG
60467: PUSH
60468: LD_INT 0
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 1
60477: NEG
60478: PUSH
60479: LD_INT 1
60481: NEG
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 1
60489: NEG
60490: PUSH
60491: LD_INT 2
60493: NEG
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 0
60501: PUSH
60502: LD_INT 2
60504: NEG
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 1
60512: PUSH
60513: LD_INT 1
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 2
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 2
60533: PUSH
60534: LD_INT 1
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 2
60543: PUSH
60544: LD_INT 2
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 1
60553: PUSH
60554: LD_INT 2
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 0
60563: PUSH
60564: LD_INT 2
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 1
60573: NEG
60574: PUSH
60575: LD_INT 1
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 2
60584: NEG
60585: PUSH
60586: LD_INT 0
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 2
60595: NEG
60596: PUSH
60597: LD_INT 1
60599: NEG
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 2
60607: NEG
60608: PUSH
60609: LD_INT 2
60611: NEG
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60638: LD_ADDR_VAR 0 21
60642: PUSH
60643: LD_INT 0
60645: PUSH
60646: LD_INT 0
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 0
60655: PUSH
60656: LD_INT 1
60658: NEG
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 1
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 1
60676: PUSH
60677: LD_INT 1
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 0
60686: PUSH
60687: LD_INT 1
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 1
60696: NEG
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 1
60707: NEG
60708: PUSH
60709: LD_INT 1
60711: NEG
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 1
60719: NEG
60720: PUSH
60721: LD_INT 2
60723: NEG
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 0
60731: PUSH
60732: LD_INT 2
60734: NEG
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 1
60742: PUSH
60743: LD_INT 1
60745: NEG
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 2
60753: PUSH
60754: LD_INT 0
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 2
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 2
60773: PUSH
60774: LD_INT 2
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 1
60783: PUSH
60784: LD_INT 2
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 0
60793: PUSH
60794: LD_INT 2
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 1
60803: NEG
60804: PUSH
60805: LD_INT 1
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 2
60814: NEG
60815: PUSH
60816: LD_INT 0
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 2
60825: NEG
60826: PUSH
60827: LD_INT 1
60829: NEG
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 2
60837: NEG
60838: PUSH
60839: LD_INT 2
60841: NEG
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60868: LD_ADDR_VAR 0 22
60872: PUSH
60873: LD_INT 0
60875: PUSH
60876: LD_INT 0
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 0
60885: PUSH
60886: LD_INT 1
60888: NEG
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 1
60896: PUSH
60897: LD_INT 0
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 1
60906: PUSH
60907: LD_INT 1
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: LD_INT 1
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 1
60926: NEG
60927: PUSH
60928: LD_INT 0
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 1
60937: NEG
60938: PUSH
60939: LD_INT 1
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 1
60949: NEG
60950: PUSH
60951: LD_INT 2
60953: NEG
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 0
60961: PUSH
60962: LD_INT 2
60964: NEG
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 1
60972: PUSH
60973: LD_INT 1
60975: NEG
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 2
60983: PUSH
60984: LD_INT 0
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 2
60993: PUSH
60994: LD_INT 1
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 2
61003: PUSH
61004: LD_INT 2
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 1
61013: PUSH
61014: LD_INT 2
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 0
61023: PUSH
61024: LD_INT 2
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 1
61033: NEG
61034: PUSH
61035: LD_INT 1
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 2
61044: NEG
61045: PUSH
61046: LD_INT 0
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 2
61055: NEG
61056: PUSH
61057: LD_INT 1
61059: NEG
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 2
61067: NEG
61068: PUSH
61069: LD_INT 2
61071: NEG
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61098: LD_ADDR_VAR 0 23
61102: PUSH
61103: LD_INT 0
61105: PUSH
61106: LD_INT 0
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 0
61115: PUSH
61116: LD_INT 1
61118: NEG
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 1
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 1
61136: PUSH
61137: LD_INT 1
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 0
61146: PUSH
61147: LD_INT 1
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 1
61156: NEG
61157: PUSH
61158: LD_INT 0
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 1
61167: NEG
61168: PUSH
61169: LD_INT 1
61171: NEG
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 1
61179: NEG
61180: PUSH
61181: LD_INT 2
61183: NEG
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 0
61191: PUSH
61192: LD_INT 2
61194: NEG
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 1
61202: PUSH
61203: LD_INT 1
61205: NEG
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 2
61213: PUSH
61214: LD_INT 0
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 2
61223: PUSH
61224: LD_INT 1
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 2
61233: PUSH
61234: LD_INT 2
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 1
61243: PUSH
61244: LD_INT 2
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 0
61253: PUSH
61254: LD_INT 2
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 1
61263: NEG
61264: PUSH
61265: LD_INT 1
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 2
61274: NEG
61275: PUSH
61276: LD_INT 0
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 2
61285: NEG
61286: PUSH
61287: LD_INT 1
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 2
61297: NEG
61298: PUSH
61299: LD_INT 2
61301: NEG
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 2
61309: NEG
61310: PUSH
61311: LD_INT 3
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 1
61321: NEG
61322: PUSH
61323: LD_INT 3
61325: NEG
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 1
61333: PUSH
61334: LD_INT 2
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 2
61344: PUSH
61345: LD_INT 1
61347: NEG
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
61378: LD_ADDR_VAR 0 24
61382: PUSH
61383: LD_INT 0
61385: PUSH
61386: LD_INT 0
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: LD_INT 1
61398: NEG
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 1
61406: PUSH
61407: LD_INT 0
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 1
61416: PUSH
61417: LD_INT 1
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 0
61426: PUSH
61427: LD_INT 1
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 1
61436: NEG
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 1
61447: NEG
61448: PUSH
61449: LD_INT 1
61451: NEG
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 1
61459: NEG
61460: PUSH
61461: LD_INT 2
61463: NEG
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 0
61471: PUSH
61472: LD_INT 2
61474: NEG
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 1
61482: PUSH
61483: LD_INT 1
61485: NEG
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 2
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 2
61503: PUSH
61504: LD_INT 1
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 2
61513: PUSH
61514: LD_INT 2
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 1
61523: PUSH
61524: LD_INT 2
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 0
61533: PUSH
61534: LD_INT 2
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 1
61543: NEG
61544: PUSH
61545: LD_INT 1
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 2
61554: NEG
61555: PUSH
61556: LD_INT 0
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 2
61565: NEG
61566: PUSH
61567: LD_INT 1
61569: NEG
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 2
61577: NEG
61578: PUSH
61579: LD_INT 2
61581: NEG
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 1
61589: PUSH
61590: LD_INT 2
61592: NEG
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 2
61600: PUSH
61601: LD_INT 1
61603: NEG
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 3
61611: PUSH
61612: LD_INT 1
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 3
61621: PUSH
61622: LD_INT 2
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
61654: LD_ADDR_VAR 0 25
61658: PUSH
61659: LD_INT 0
61661: PUSH
61662: LD_INT 0
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 0
61671: PUSH
61672: LD_INT 1
61674: NEG
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 1
61682: PUSH
61683: LD_INT 0
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 1
61692: PUSH
61693: LD_INT 1
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 0
61702: PUSH
61703: LD_INT 1
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 1
61712: NEG
61713: PUSH
61714: LD_INT 0
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 1
61723: NEG
61724: PUSH
61725: LD_INT 1
61727: NEG
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 1
61735: NEG
61736: PUSH
61737: LD_INT 2
61739: NEG
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 0
61747: PUSH
61748: LD_INT 2
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 1
61758: PUSH
61759: LD_INT 1
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 2
61769: PUSH
61770: LD_INT 0
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 2
61779: PUSH
61780: LD_INT 1
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 2
61789: PUSH
61790: LD_INT 2
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 1
61799: PUSH
61800: LD_INT 2
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 0
61809: PUSH
61810: LD_INT 2
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 1
61819: NEG
61820: PUSH
61821: LD_INT 1
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 2
61830: NEG
61831: PUSH
61832: LD_INT 0
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 2
61841: NEG
61842: PUSH
61843: LD_INT 1
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 2
61853: NEG
61854: PUSH
61855: LD_INT 2
61857: NEG
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 3
61865: PUSH
61866: LD_INT 1
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 3
61875: PUSH
61876: LD_INT 2
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 2
61885: PUSH
61886: LD_INT 3
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 1
61895: PUSH
61896: LD_INT 3
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61928: LD_ADDR_VAR 0 26
61932: PUSH
61933: LD_INT 0
61935: PUSH
61936: LD_INT 0
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 0
61945: PUSH
61946: LD_INT 1
61948: NEG
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 1
61956: PUSH
61957: LD_INT 0
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 1
61966: PUSH
61967: LD_INT 1
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 0
61976: PUSH
61977: LD_INT 1
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 1
61986: NEG
61987: PUSH
61988: LD_INT 0
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 1
61997: NEG
61998: PUSH
61999: LD_INT 1
62001: NEG
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 1
62009: NEG
62010: PUSH
62011: LD_INT 2
62013: NEG
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 0
62021: PUSH
62022: LD_INT 2
62024: NEG
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 1
62032: PUSH
62033: LD_INT 1
62035: NEG
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 2
62043: PUSH
62044: LD_INT 0
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 2
62053: PUSH
62054: LD_INT 1
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 2
62063: PUSH
62064: LD_INT 2
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 1
62073: PUSH
62074: LD_INT 2
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 0
62083: PUSH
62084: LD_INT 2
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 1
62093: NEG
62094: PUSH
62095: LD_INT 1
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 2
62104: NEG
62105: PUSH
62106: LD_INT 0
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 2
62115: NEG
62116: PUSH
62117: LD_INT 1
62119: NEG
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 2
62127: NEG
62128: PUSH
62129: LD_INT 2
62131: NEG
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 2
62139: PUSH
62140: LD_INT 3
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 1
62149: PUSH
62150: LD_INT 3
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 1
62159: NEG
62160: PUSH
62161: LD_INT 2
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 2
62170: NEG
62171: PUSH
62172: LD_INT 1
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62204: LD_ADDR_VAR 0 27
62208: PUSH
62209: LD_INT 0
62211: PUSH
62212: LD_INT 0
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 0
62221: PUSH
62222: LD_INT 1
62224: NEG
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 1
62232: PUSH
62233: LD_INT 0
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 1
62242: PUSH
62243: LD_INT 1
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 0
62252: PUSH
62253: LD_INT 1
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 1
62262: NEG
62263: PUSH
62264: LD_INT 0
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 1
62273: NEG
62274: PUSH
62275: LD_INT 1
62277: NEG
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 1
62285: NEG
62286: PUSH
62287: LD_INT 2
62289: NEG
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 0
62297: PUSH
62298: LD_INT 2
62300: NEG
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 1
62308: PUSH
62309: LD_INT 1
62311: NEG
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 2
62319: PUSH
62320: LD_INT 0
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 2
62329: PUSH
62330: LD_INT 1
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 2
62339: PUSH
62340: LD_INT 2
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 1
62349: PUSH
62350: LD_INT 2
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 0
62359: PUSH
62360: LD_INT 2
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 1
62369: NEG
62370: PUSH
62371: LD_INT 1
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 2
62380: NEG
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 2
62391: NEG
62392: PUSH
62393: LD_INT 1
62395: NEG
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 2
62403: NEG
62404: PUSH
62405: LD_INT 2
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 1
62415: NEG
62416: PUSH
62417: LD_INT 2
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 2
62426: NEG
62427: PUSH
62428: LD_INT 1
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 3
62437: NEG
62438: PUSH
62439: LD_INT 1
62441: NEG
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 3
62449: NEG
62450: PUSH
62451: LD_INT 2
62453: NEG
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62484: LD_ADDR_VAR 0 28
62488: PUSH
62489: LD_INT 0
62491: PUSH
62492: LD_INT 0
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 0
62501: PUSH
62502: LD_INT 1
62504: NEG
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 1
62512: PUSH
62513: LD_INT 0
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 1
62522: PUSH
62523: LD_INT 1
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 0
62532: PUSH
62533: LD_INT 1
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 1
62542: NEG
62543: PUSH
62544: LD_INT 0
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 1
62553: NEG
62554: PUSH
62555: LD_INT 1
62557: NEG
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 1
62565: NEG
62566: PUSH
62567: LD_INT 2
62569: NEG
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 0
62577: PUSH
62578: LD_INT 2
62580: NEG
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 1
62588: PUSH
62589: LD_INT 1
62591: NEG
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 2
62599: PUSH
62600: LD_INT 0
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 2
62609: PUSH
62610: LD_INT 1
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 2
62619: PUSH
62620: LD_INT 2
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 1
62629: PUSH
62630: LD_INT 2
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 0
62639: PUSH
62640: LD_INT 2
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 1
62649: NEG
62650: PUSH
62651: LD_INT 1
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 2
62660: NEG
62661: PUSH
62662: LD_INT 0
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 2
62671: NEG
62672: PUSH
62673: LD_INT 1
62675: NEG
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 2
62683: NEG
62684: PUSH
62685: LD_INT 2
62687: NEG
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 2
62695: NEG
62696: PUSH
62697: LD_INT 3
62699: NEG
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 1
62707: NEG
62708: PUSH
62709: LD_INT 3
62711: NEG
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 3
62719: NEG
62720: PUSH
62721: LD_INT 1
62723: NEG
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 3
62731: NEG
62732: PUSH
62733: LD_INT 2
62735: NEG
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62766: LD_ADDR_VAR 0 29
62770: PUSH
62771: LD_INT 0
62773: PUSH
62774: LD_INT 0
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 0
62783: PUSH
62784: LD_INT 1
62786: NEG
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 1
62794: PUSH
62795: LD_INT 0
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 1
62804: PUSH
62805: LD_INT 1
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 0
62814: PUSH
62815: LD_INT 1
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 1
62824: NEG
62825: PUSH
62826: LD_INT 0
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 1
62835: NEG
62836: PUSH
62837: LD_INT 1
62839: NEG
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 1
62847: NEG
62848: PUSH
62849: LD_INT 2
62851: NEG
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 0
62859: PUSH
62860: LD_INT 2
62862: NEG
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 1
62870: PUSH
62871: LD_INT 1
62873: NEG
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 2
62881: PUSH
62882: LD_INT 0
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 2
62891: PUSH
62892: LD_INT 1
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 1
62901: PUSH
62902: LD_INT 2
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 0
62911: PUSH
62912: LD_INT 2
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 1
62921: NEG
62922: PUSH
62923: LD_INT 1
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 2
62932: NEG
62933: PUSH
62934: LD_INT 1
62936: NEG
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 2
62944: NEG
62945: PUSH
62946: LD_INT 2
62948: NEG
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 2
62956: NEG
62957: PUSH
62958: LD_INT 3
62960: NEG
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 2
62968: PUSH
62969: LD_INT 1
62971: NEG
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 3
62979: PUSH
62980: LD_INT 1
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 1
62989: PUSH
62990: LD_INT 3
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 1
62999: NEG
63000: PUSH
63001: LD_INT 2
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 3
63010: NEG
63011: PUSH
63012: LD_INT 2
63014: NEG
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63045: LD_ADDR_VAR 0 30
63049: PUSH
63050: LD_INT 0
63052: PUSH
63053: LD_INT 0
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 0
63062: PUSH
63063: LD_INT 1
63065: NEG
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 1
63073: PUSH
63074: LD_INT 0
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 1
63083: PUSH
63084: LD_INT 1
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 0
63093: PUSH
63094: LD_INT 1
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 1
63103: NEG
63104: PUSH
63105: LD_INT 0
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 1
63114: NEG
63115: PUSH
63116: LD_INT 1
63118: NEG
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 1
63126: NEG
63127: PUSH
63128: LD_INT 2
63130: NEG
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 0
63138: PUSH
63139: LD_INT 2
63141: NEG
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 1
63149: PUSH
63150: LD_INT 1
63152: NEG
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 2
63160: PUSH
63161: LD_INT 0
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 2
63170: PUSH
63171: LD_INT 1
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 2
63180: PUSH
63181: LD_INT 2
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 1
63190: PUSH
63191: LD_INT 2
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 1
63200: NEG
63201: PUSH
63202: LD_INT 1
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 2
63211: NEG
63212: PUSH
63213: LD_INT 0
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 2
63222: NEG
63223: PUSH
63224: LD_INT 1
63226: NEG
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 1
63234: NEG
63235: PUSH
63236: LD_INT 3
63238: NEG
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 1
63246: PUSH
63247: LD_INT 2
63249: NEG
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 3
63257: PUSH
63258: LD_INT 2
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 2
63267: PUSH
63268: LD_INT 3
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 2
63277: NEG
63278: PUSH
63279: LD_INT 1
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 3
63288: NEG
63289: PUSH
63290: LD_INT 1
63292: NEG
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63323: LD_ADDR_VAR 0 31
63327: PUSH
63328: LD_INT 0
63330: PUSH
63331: LD_INT 0
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 0
63340: PUSH
63341: LD_INT 1
63343: NEG
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 1
63351: PUSH
63352: LD_INT 0
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 1
63361: PUSH
63362: LD_INT 1
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 0
63371: PUSH
63372: LD_INT 1
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 1
63381: NEG
63382: PUSH
63383: LD_INT 0
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 1
63392: NEG
63393: PUSH
63394: LD_INT 1
63396: NEG
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 1
63404: NEG
63405: PUSH
63406: LD_INT 2
63408: NEG
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 1
63416: PUSH
63417: LD_INT 1
63419: NEG
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 2
63427: PUSH
63428: LD_INT 0
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 2
63437: PUSH
63438: LD_INT 1
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 2
63447: PUSH
63448: LD_INT 2
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 1
63457: PUSH
63458: LD_INT 2
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 0
63467: PUSH
63468: LD_INT 2
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 1
63477: NEG
63478: PUSH
63479: LD_INT 1
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 2
63488: NEG
63489: PUSH
63490: LD_INT 1
63492: NEG
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 2
63500: NEG
63501: PUSH
63502: LD_INT 2
63504: NEG
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 2
63512: NEG
63513: PUSH
63514: LD_INT 3
63516: NEG
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 2
63524: PUSH
63525: LD_INT 1
63527: NEG
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 3
63535: PUSH
63536: LD_INT 1
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 1
63545: PUSH
63546: LD_INT 3
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 1
63555: NEG
63556: PUSH
63557: LD_INT 2
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 3
63566: NEG
63567: PUSH
63568: LD_INT 2
63570: NEG
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63601: LD_ADDR_VAR 0 32
63605: PUSH
63606: LD_INT 0
63608: PUSH
63609: LD_INT 0
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 0
63618: PUSH
63619: LD_INT 1
63621: NEG
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 1
63629: PUSH
63630: LD_INT 0
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 1
63639: PUSH
63640: LD_INT 1
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 0
63649: PUSH
63650: LD_INT 1
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 1
63659: NEG
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 1
63670: NEG
63671: PUSH
63672: LD_INT 1
63674: NEG
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 1
63682: NEG
63683: PUSH
63684: LD_INT 2
63686: NEG
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 0
63694: PUSH
63695: LD_INT 2
63697: NEG
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 1
63705: PUSH
63706: LD_INT 1
63708: NEG
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 2
63716: PUSH
63717: LD_INT 1
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 2
63726: PUSH
63727: LD_INT 2
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 1
63736: PUSH
63737: LD_INT 2
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 0
63746: PUSH
63747: LD_INT 2
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 1
63756: NEG
63757: PUSH
63758: LD_INT 1
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 2
63767: NEG
63768: PUSH
63769: LD_INT 0
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 2
63778: NEG
63779: PUSH
63780: LD_INT 1
63782: NEG
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 1
63790: NEG
63791: PUSH
63792: LD_INT 3
63794: NEG
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 1
63802: PUSH
63803: LD_INT 2
63805: NEG
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 3
63813: PUSH
63814: LD_INT 2
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 2
63823: PUSH
63824: LD_INT 3
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 2
63833: NEG
63834: PUSH
63835: LD_INT 1
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 3
63844: NEG
63845: PUSH
63846: LD_INT 1
63848: NEG
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63879: LD_ADDR_VAR 0 33
63883: PUSH
63884: LD_INT 0
63886: PUSH
63887: LD_INT 0
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 0
63896: PUSH
63897: LD_INT 1
63899: NEG
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 1
63907: PUSH
63908: LD_INT 0
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 1
63917: PUSH
63918: LD_INT 1
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 0
63927: PUSH
63928: LD_INT 1
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 1
63937: NEG
63938: PUSH
63939: LD_INT 0
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 1
63948: NEG
63949: PUSH
63950: LD_INT 1
63952: NEG
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 1
63960: NEG
63961: PUSH
63962: LD_INT 2
63964: NEG
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 1
63972: PUSH
63973: LD_INT 1
63975: NEG
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 2
63983: PUSH
63984: LD_INT 0
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 2
63993: PUSH
63994: LD_INT 1
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 1
64003: PUSH
64004: LD_INT 2
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 0
64013: PUSH
64014: LD_INT 2
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 1
64023: NEG
64024: PUSH
64025: LD_INT 1
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 2
64034: NEG
64035: PUSH
64036: LD_INT 0
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 2
64045: NEG
64046: PUSH
64047: LD_INT 1
64049: NEG
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 2
64057: NEG
64058: PUSH
64059: LD_INT 2
64061: NEG
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 2
64069: NEG
64070: PUSH
64071: LD_INT 3
64073: NEG
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 2
64081: PUSH
64082: LD_INT 1
64084: NEG
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 3
64092: PUSH
64093: LD_INT 1
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 1
64102: PUSH
64103: LD_INT 3
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 1
64112: NEG
64113: PUSH
64114: LD_INT 2
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 3
64123: NEG
64124: PUSH
64125: LD_INT 2
64127: NEG
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64158: LD_ADDR_VAR 0 34
64162: PUSH
64163: LD_INT 0
64165: PUSH
64166: LD_INT 0
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 0
64175: PUSH
64176: LD_INT 1
64178: NEG
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 1
64186: PUSH
64187: LD_INT 0
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 1
64196: PUSH
64197: LD_INT 1
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 0
64206: PUSH
64207: LD_INT 1
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 1
64216: NEG
64217: PUSH
64218: LD_INT 0
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 1
64227: NEG
64228: PUSH
64229: LD_INT 1
64231: NEG
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 1
64239: NEG
64240: PUSH
64241: LD_INT 2
64243: NEG
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 0
64251: PUSH
64252: LD_INT 2
64254: NEG
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 1
64262: PUSH
64263: LD_INT 1
64265: NEG
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 2
64273: PUSH
64274: LD_INT 1
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 2
64283: PUSH
64284: LD_INT 2
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 1
64293: PUSH
64294: LD_INT 2
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 1
64303: NEG
64304: PUSH
64305: LD_INT 1
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 2
64314: NEG
64315: PUSH
64316: LD_INT 0
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 2
64325: NEG
64326: PUSH
64327: LD_INT 1
64329: NEG
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 2
64337: NEG
64338: PUSH
64339: LD_INT 2
64341: NEG
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 1
64349: NEG
64350: PUSH
64351: LD_INT 3
64353: NEG
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 1
64361: PUSH
64362: LD_INT 2
64364: NEG
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 3
64372: PUSH
64373: LD_INT 2
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 2
64382: PUSH
64383: LD_INT 3
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 2
64392: NEG
64393: PUSH
64394: LD_INT 1
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 3
64403: NEG
64404: PUSH
64405: LD_INT 1
64407: NEG
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64438: LD_ADDR_VAR 0 35
64442: PUSH
64443: LD_INT 0
64445: PUSH
64446: LD_INT 0
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 0
64455: PUSH
64456: LD_INT 1
64458: NEG
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 1
64466: PUSH
64467: LD_INT 0
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 1
64476: PUSH
64477: LD_INT 1
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 0
64486: PUSH
64487: LD_INT 1
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 1
64496: NEG
64497: PUSH
64498: LD_INT 0
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 1
64507: NEG
64508: PUSH
64509: LD_INT 1
64511: NEG
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 2
64519: PUSH
64520: LD_INT 1
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 2
64529: NEG
64530: PUSH
64531: LD_INT 1
64533: NEG
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64550: LD_ADDR_VAR 0 36
64554: PUSH
64555: LD_INT 0
64557: PUSH
64558: LD_INT 0
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 0
64567: PUSH
64568: LD_INT 1
64570: NEG
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 1
64578: PUSH
64579: LD_INT 0
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 1
64588: PUSH
64589: LD_INT 1
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 0
64598: PUSH
64599: LD_INT 1
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 1
64608: NEG
64609: PUSH
64610: LD_INT 0
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 1
64619: NEG
64620: PUSH
64621: LD_INT 1
64623: NEG
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 1
64631: NEG
64632: PUSH
64633: LD_INT 2
64635: NEG
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: LD_INT 1
64643: PUSH
64644: LD_INT 2
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64662: LD_ADDR_VAR 0 37
64666: PUSH
64667: LD_INT 0
64669: PUSH
64670: LD_INT 0
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 0
64679: PUSH
64680: LD_INT 1
64682: NEG
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 1
64690: PUSH
64691: LD_INT 0
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 1
64700: PUSH
64701: LD_INT 1
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 0
64710: PUSH
64711: LD_INT 1
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 1
64720: NEG
64721: PUSH
64722: LD_INT 0
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 1
64731: NEG
64732: PUSH
64733: LD_INT 1
64735: NEG
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 1
64743: PUSH
64744: LD_INT 1
64746: NEG
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 1
64754: NEG
64755: PUSH
64756: LD_INT 1
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64774: LD_ADDR_VAR 0 38
64778: PUSH
64779: LD_INT 0
64781: PUSH
64782: LD_INT 0
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 0
64791: PUSH
64792: LD_INT 1
64794: NEG
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 1
64802: PUSH
64803: LD_INT 0
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 1
64812: PUSH
64813: LD_INT 1
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 0
64822: PUSH
64823: LD_INT 1
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 1
64832: NEG
64833: PUSH
64834: LD_INT 0
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 1
64843: NEG
64844: PUSH
64845: LD_INT 1
64847: NEG
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 2
64855: PUSH
64856: LD_INT 1
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 2
64865: NEG
64866: PUSH
64867: LD_INT 1
64869: NEG
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: LIST
64879: LIST
64880: LIST
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64886: LD_ADDR_VAR 0 39
64890: PUSH
64891: LD_INT 0
64893: PUSH
64894: LD_INT 0
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 0
64903: PUSH
64904: LD_INT 1
64906: NEG
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 1
64914: PUSH
64915: LD_INT 0
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 1
64924: PUSH
64925: LD_INT 1
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 0
64934: PUSH
64935: LD_INT 1
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 1
64944: NEG
64945: PUSH
64946: LD_INT 0
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 1
64955: NEG
64956: PUSH
64957: LD_INT 1
64959: NEG
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 1
64967: NEG
64968: PUSH
64969: LD_INT 2
64971: NEG
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 1
64979: PUSH
64980: LD_INT 2
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64998: LD_ADDR_VAR 0 40
65002: PUSH
65003: LD_INT 0
65005: PUSH
65006: LD_INT 0
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 0
65015: PUSH
65016: LD_INT 1
65018: NEG
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 1
65026: PUSH
65027: LD_INT 0
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 1
65036: PUSH
65037: LD_INT 1
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 0
65046: PUSH
65047: LD_INT 1
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 1
65056: NEG
65057: PUSH
65058: LD_INT 0
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 1
65067: NEG
65068: PUSH
65069: LD_INT 1
65071: NEG
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 1
65079: PUSH
65080: LD_INT 1
65082: NEG
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 1
65090: NEG
65091: PUSH
65092: LD_INT 1
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65110: LD_ADDR_VAR 0 41
65114: PUSH
65115: LD_INT 0
65117: PUSH
65118: LD_INT 0
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 0
65127: PUSH
65128: LD_INT 1
65130: NEG
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: LD_INT 1
65138: PUSH
65139: LD_INT 0
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 1
65148: PUSH
65149: LD_INT 1
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 0
65158: PUSH
65159: LD_INT 1
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 1
65168: NEG
65169: PUSH
65170: LD_INT 0
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 1
65179: NEG
65180: PUSH
65181: LD_INT 1
65183: NEG
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 1
65191: NEG
65192: PUSH
65193: LD_INT 2
65195: NEG
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 1
65203: PUSH
65204: LD_INT 1
65206: NEG
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 2
65214: PUSH
65215: LD_INT 0
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 2
65224: PUSH
65225: LD_INT 1
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 2
65234: PUSH
65235: LD_INT 2
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 1
65244: PUSH
65245: LD_INT 2
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 1
65254: NEG
65255: PUSH
65256: LD_INT 1
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 2
65265: NEG
65266: PUSH
65267: LD_INT 0
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 2
65276: NEG
65277: PUSH
65278: LD_INT 1
65280: NEG
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 2
65288: NEG
65289: PUSH
65290: LD_INT 2
65292: NEG
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 2
65300: NEG
65301: PUSH
65302: LD_INT 3
65304: NEG
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 2
65312: PUSH
65313: LD_INT 1
65315: NEG
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 3
65323: PUSH
65324: LD_INT 0
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 3
65333: PUSH
65334: LD_INT 1
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 3
65343: PUSH
65344: LD_INT 2
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 3
65353: PUSH
65354: LD_INT 3
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 2
65363: PUSH
65364: LD_INT 3
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 2
65373: NEG
65374: PUSH
65375: LD_INT 1
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 3
65384: NEG
65385: PUSH
65386: LD_INT 0
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 3
65395: NEG
65396: PUSH
65397: LD_INT 1
65399: NEG
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 3
65407: NEG
65408: PUSH
65409: LD_INT 2
65411: NEG
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 3
65419: NEG
65420: PUSH
65421: LD_INT 3
65423: NEG
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65460: LD_ADDR_VAR 0 42
65464: PUSH
65465: LD_INT 0
65467: PUSH
65468: LD_INT 0
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 0
65477: PUSH
65478: LD_INT 1
65480: NEG
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 1
65488: PUSH
65489: LD_INT 0
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 1
65498: PUSH
65499: LD_INT 1
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 0
65508: PUSH
65509: LD_INT 1
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 1
65518: NEG
65519: PUSH
65520: LD_INT 0
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 1
65529: NEG
65530: PUSH
65531: LD_INT 1
65533: NEG
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 1
65541: NEG
65542: PUSH
65543: LD_INT 2
65545: NEG
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 0
65553: PUSH
65554: LD_INT 2
65556: NEG
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 1
65564: PUSH
65565: LD_INT 1
65567: NEG
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 2
65575: PUSH
65576: LD_INT 1
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 2
65585: PUSH
65586: LD_INT 2
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 1
65595: PUSH
65596: LD_INT 2
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 0
65605: PUSH
65606: LD_INT 2
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 1
65615: NEG
65616: PUSH
65617: LD_INT 1
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 2
65626: NEG
65627: PUSH
65628: LD_INT 1
65630: NEG
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 2
65638: NEG
65639: PUSH
65640: LD_INT 2
65642: NEG
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 2
65650: NEG
65651: PUSH
65652: LD_INT 3
65654: NEG
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 1
65662: NEG
65663: PUSH
65664: LD_INT 3
65666: NEG
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 0
65674: PUSH
65675: LD_INT 3
65677: NEG
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 1
65685: PUSH
65686: LD_INT 2
65688: NEG
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 3
65696: PUSH
65697: LD_INT 2
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 3
65706: PUSH
65707: LD_INT 3
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 2
65716: PUSH
65717: LD_INT 3
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 1
65726: PUSH
65727: LD_INT 3
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 0
65736: PUSH
65737: LD_INT 3
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 1
65746: NEG
65747: PUSH
65748: LD_INT 2
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 3
65757: NEG
65758: PUSH
65759: LD_INT 2
65761: NEG
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: PUSH
65767: LD_INT 3
65769: NEG
65770: PUSH
65771: LD_INT 3
65773: NEG
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65810: LD_ADDR_VAR 0 43
65814: PUSH
65815: LD_INT 0
65817: PUSH
65818: LD_INT 0
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 0
65827: PUSH
65828: LD_INT 1
65830: NEG
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 1
65838: PUSH
65839: LD_INT 0
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: LD_INT 1
65848: PUSH
65849: LD_INT 1
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 0
65858: PUSH
65859: LD_INT 1
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 1
65868: NEG
65869: PUSH
65870: LD_INT 0
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 1
65879: NEG
65880: PUSH
65881: LD_INT 1
65883: NEG
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 1
65891: NEG
65892: PUSH
65893: LD_INT 2
65895: NEG
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: LD_INT 0
65903: PUSH
65904: LD_INT 2
65906: NEG
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 1
65914: PUSH
65915: LD_INT 1
65917: NEG
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 2
65925: PUSH
65926: LD_INT 0
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 2
65935: PUSH
65936: LD_INT 1
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 1
65945: PUSH
65946: LD_INT 2
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 0
65955: PUSH
65956: LD_INT 2
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 1
65965: NEG
65966: PUSH
65967: LD_INT 1
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 2
65976: NEG
65977: PUSH
65978: LD_INT 0
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 2
65987: NEG
65988: PUSH
65989: LD_INT 1
65991: NEG
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_INT 1
65999: NEG
66000: PUSH
66001: LD_INT 3
66003: NEG
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 0
66011: PUSH
66012: LD_INT 3
66014: NEG
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 1
66022: PUSH
66023: LD_INT 2
66025: NEG
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: LD_INT 2
66033: PUSH
66034: LD_INT 1
66036: NEG
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 3
66044: PUSH
66045: LD_INT 0
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 3
66054: PUSH
66055: LD_INT 1
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 1
66064: PUSH
66065: LD_INT 3
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 0
66074: PUSH
66075: LD_INT 3
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 1
66084: NEG
66085: PUSH
66086: LD_INT 2
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 2
66095: NEG
66096: PUSH
66097: LD_INT 1
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 3
66106: NEG
66107: PUSH
66108: LD_INT 0
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 3
66117: NEG
66118: PUSH
66119: LD_INT 1
66121: NEG
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66158: LD_ADDR_VAR 0 44
66162: PUSH
66163: LD_INT 0
66165: PUSH
66166: LD_INT 0
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 0
66175: PUSH
66176: LD_INT 1
66178: NEG
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 1
66186: PUSH
66187: LD_INT 0
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 1
66196: PUSH
66197: LD_INT 1
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 0
66206: PUSH
66207: LD_INT 1
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 1
66216: NEG
66217: PUSH
66218: LD_INT 0
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 1
66227: NEG
66228: PUSH
66229: LD_INT 1
66231: NEG
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 1
66239: NEG
66240: PUSH
66241: LD_INT 2
66243: NEG
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 1
66251: PUSH
66252: LD_INT 1
66254: NEG
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 2
66262: PUSH
66263: LD_INT 0
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 2
66272: PUSH
66273: LD_INT 1
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 2
66282: PUSH
66283: LD_INT 2
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 1
66292: PUSH
66293: LD_INT 2
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 1
66302: NEG
66303: PUSH
66304: LD_INT 1
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 2
66313: NEG
66314: PUSH
66315: LD_INT 0
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 2
66324: NEG
66325: PUSH
66326: LD_INT 1
66328: NEG
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 2
66336: NEG
66337: PUSH
66338: LD_INT 2
66340: NEG
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 2
66348: NEG
66349: PUSH
66350: LD_INT 3
66352: NEG
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 2
66360: PUSH
66361: LD_INT 1
66363: NEG
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: PUSH
66369: LD_INT 3
66371: PUSH
66372: LD_INT 0
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: LD_INT 3
66381: PUSH
66382: LD_INT 1
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 3
66391: PUSH
66392: LD_INT 2
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 3
66401: PUSH
66402: LD_INT 3
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 2
66411: PUSH
66412: LD_INT 3
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 2
66421: NEG
66422: PUSH
66423: LD_INT 1
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: LD_INT 3
66432: NEG
66433: PUSH
66434: LD_INT 0
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 3
66443: NEG
66444: PUSH
66445: LD_INT 1
66447: NEG
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 3
66455: NEG
66456: PUSH
66457: LD_INT 2
66459: NEG
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 3
66467: NEG
66468: PUSH
66469: LD_INT 3
66471: NEG
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: LIST
66504: LIST
66505: LIST
66506: LIST
66507: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66508: LD_ADDR_VAR 0 45
66512: PUSH
66513: LD_INT 0
66515: PUSH
66516: LD_INT 0
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 0
66525: PUSH
66526: LD_INT 1
66528: NEG
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 1
66536: PUSH
66537: LD_INT 0
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 1
66546: PUSH
66547: LD_INT 1
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 0
66556: PUSH
66557: LD_INT 1
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 1
66566: NEG
66567: PUSH
66568: LD_INT 0
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 1
66577: NEG
66578: PUSH
66579: LD_INT 1
66581: NEG
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 1
66589: NEG
66590: PUSH
66591: LD_INT 2
66593: NEG
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 0
66601: PUSH
66602: LD_INT 2
66604: NEG
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 1
66612: PUSH
66613: LD_INT 1
66615: NEG
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_INT 2
66623: PUSH
66624: LD_INT 1
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: LD_INT 2
66633: PUSH
66634: LD_INT 2
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: LD_INT 1
66643: PUSH
66644: LD_INT 2
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 0
66653: PUSH
66654: LD_INT 2
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 1
66663: NEG
66664: PUSH
66665: LD_INT 1
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: LD_INT 2
66674: NEG
66675: PUSH
66676: LD_INT 1
66678: NEG
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 2
66686: NEG
66687: PUSH
66688: LD_INT 2
66690: NEG
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: LD_INT 2
66698: NEG
66699: PUSH
66700: LD_INT 3
66702: NEG
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: LD_INT 1
66710: NEG
66711: PUSH
66712: LD_INT 3
66714: NEG
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 0
66722: PUSH
66723: LD_INT 3
66725: NEG
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 1
66733: PUSH
66734: LD_INT 2
66736: NEG
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 3
66744: PUSH
66745: LD_INT 2
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 3
66754: PUSH
66755: LD_INT 3
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 2
66764: PUSH
66765: LD_INT 3
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: LD_INT 1
66774: PUSH
66775: LD_INT 3
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 0
66784: PUSH
66785: LD_INT 3
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 1
66794: NEG
66795: PUSH
66796: LD_INT 2
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 3
66805: NEG
66806: PUSH
66807: LD_INT 2
66809: NEG
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PUSH
66815: LD_INT 3
66817: NEG
66818: PUSH
66819: LD_INT 3
66821: NEG
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66858: LD_ADDR_VAR 0 46
66862: PUSH
66863: LD_INT 0
66865: PUSH
66866: LD_INT 0
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 0
66875: PUSH
66876: LD_INT 1
66878: NEG
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: LD_INT 1
66886: PUSH
66887: LD_INT 0
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 1
66896: PUSH
66897: LD_INT 1
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: LD_INT 0
66906: PUSH
66907: LD_INT 1
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PUSH
66914: LD_INT 1
66916: NEG
66917: PUSH
66918: LD_INT 0
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: LD_INT 1
66927: NEG
66928: PUSH
66929: LD_INT 1
66931: NEG
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: PUSH
66937: LD_INT 1
66939: NEG
66940: PUSH
66941: LD_INT 2
66943: NEG
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 0
66951: PUSH
66952: LD_INT 2
66954: NEG
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 1
66962: PUSH
66963: LD_INT 1
66965: NEG
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 2
66973: PUSH
66974: LD_INT 0
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: LD_INT 2
66983: PUSH
66984: LD_INT 1
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 1
66993: PUSH
66994: LD_INT 2
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 0
67003: PUSH
67004: LD_INT 2
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: LD_INT 1
67013: NEG
67014: PUSH
67015: LD_INT 1
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 2
67024: NEG
67025: PUSH
67026: LD_INT 0
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: LD_INT 2
67035: NEG
67036: PUSH
67037: LD_INT 1
67039: NEG
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: PUSH
67045: LD_INT 1
67047: NEG
67048: PUSH
67049: LD_INT 3
67051: NEG
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: LD_INT 0
67059: PUSH
67060: LD_INT 3
67062: NEG
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 1
67070: PUSH
67071: LD_INT 2
67073: NEG
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: LD_INT 2
67081: PUSH
67082: LD_INT 1
67084: NEG
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: LD_INT 3
67092: PUSH
67093: LD_INT 0
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: LD_INT 3
67102: PUSH
67103: LD_INT 1
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 1
67112: PUSH
67113: LD_INT 3
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 0
67122: PUSH
67123: LD_INT 3
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 1
67132: NEG
67133: PUSH
67134: LD_INT 2
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 2
67143: NEG
67144: PUSH
67145: LD_INT 1
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 3
67154: NEG
67155: PUSH
67156: LD_INT 0
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 3
67165: NEG
67166: PUSH
67167: LD_INT 1
67169: NEG
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67206: LD_ADDR_VAR 0 47
67210: PUSH
67211: LD_INT 0
67213: PUSH
67214: LD_INT 0
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 0
67223: PUSH
67224: LD_INT 1
67226: NEG
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 1
67234: PUSH
67235: LD_INT 0
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 1
67244: PUSH
67245: LD_INT 1
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: PUSH
67252: LD_INT 0
67254: PUSH
67255: LD_INT 1
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 1
67264: NEG
67265: PUSH
67266: LD_INT 0
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 1
67275: NEG
67276: PUSH
67277: LD_INT 1
67279: NEG
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: LD_INT 1
67287: NEG
67288: PUSH
67289: LD_INT 2
67291: NEG
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 0
67299: PUSH
67300: LD_INT 2
67302: NEG
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 1
67310: PUSH
67311: LD_INT 1
67313: NEG
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 2
67321: NEG
67322: PUSH
67323: LD_INT 1
67325: NEG
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 2
67333: NEG
67334: PUSH
67335: LD_INT 2
67337: NEG
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67357: LD_ADDR_VAR 0 48
67361: PUSH
67362: LD_INT 0
67364: PUSH
67365: LD_INT 0
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 0
67374: PUSH
67375: LD_INT 1
67377: NEG
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 1
67385: PUSH
67386: LD_INT 0
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 1
67395: PUSH
67396: LD_INT 1
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 0
67405: PUSH
67406: LD_INT 1
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: LD_INT 1
67415: NEG
67416: PUSH
67417: LD_INT 0
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 1
67426: NEG
67427: PUSH
67428: LD_INT 1
67430: NEG
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: LD_INT 1
67438: NEG
67439: PUSH
67440: LD_INT 2
67442: NEG
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 0
67450: PUSH
67451: LD_INT 2
67453: NEG
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: PUSH
67459: LD_INT 1
67461: PUSH
67462: LD_INT 1
67464: NEG
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 2
67472: PUSH
67473: LD_INT 0
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: LD_INT 2
67482: PUSH
67483: LD_INT 1
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67504: LD_ADDR_VAR 0 49
67508: PUSH
67509: LD_INT 0
67511: PUSH
67512: LD_INT 0
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 0
67521: PUSH
67522: LD_INT 1
67524: NEG
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 1
67532: PUSH
67533: LD_INT 0
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 1
67542: PUSH
67543: LD_INT 1
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 0
67552: PUSH
67553: LD_INT 1
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 1
67562: NEG
67563: PUSH
67564: LD_INT 0
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 1
67573: NEG
67574: PUSH
67575: LD_INT 1
67577: NEG
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: LD_INT 1
67585: PUSH
67586: LD_INT 1
67588: NEG
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PUSH
67594: LD_INT 2
67596: PUSH
67597: LD_INT 0
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 2
67606: PUSH
67607: LD_INT 1
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 2
67616: PUSH
67617: LD_INT 2
67619: PUSH
67620: EMPTY
67621: LIST
67622: LIST
67623: PUSH
67624: LD_INT 1
67626: PUSH
67627: LD_INT 2
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: LIST
67640: LIST
67641: LIST
67642: LIST
67643: LIST
67644: LIST
67645: LIST
67646: LIST
67647: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67648: LD_ADDR_VAR 0 50
67652: PUSH
67653: LD_INT 0
67655: PUSH
67656: LD_INT 0
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: LD_INT 0
67665: PUSH
67666: LD_INT 1
67668: NEG
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 1
67676: PUSH
67677: LD_INT 0
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: LD_INT 1
67686: PUSH
67687: LD_INT 1
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: LD_INT 0
67696: PUSH
67697: LD_INT 1
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: LD_INT 1
67706: NEG
67707: PUSH
67708: LD_INT 0
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 1
67717: NEG
67718: PUSH
67719: LD_INT 1
67721: NEG
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PUSH
67727: LD_INT 2
67729: PUSH
67730: LD_INT 1
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: LD_INT 2
67739: PUSH
67740: LD_INT 2
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PUSH
67747: LD_INT 1
67749: PUSH
67750: LD_INT 2
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: LD_INT 0
67759: PUSH
67760: LD_INT 2
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 1
67769: NEG
67770: PUSH
67771: LD_INT 1
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67792: LD_ADDR_VAR 0 51
67796: PUSH
67797: LD_INT 0
67799: PUSH
67800: LD_INT 0
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 0
67809: PUSH
67810: LD_INT 1
67812: NEG
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 1
67820: PUSH
67821: LD_INT 0
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 1
67830: PUSH
67831: LD_INT 1
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: LD_INT 0
67840: PUSH
67841: LD_INT 1
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 1
67850: NEG
67851: PUSH
67852: LD_INT 0
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: PUSH
67859: LD_INT 1
67861: NEG
67862: PUSH
67863: LD_INT 1
67865: NEG
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: PUSH
67871: LD_INT 1
67873: PUSH
67874: LD_INT 2
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: LD_INT 0
67883: PUSH
67884: LD_INT 2
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 1
67893: NEG
67894: PUSH
67895: LD_INT 1
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: LD_INT 2
67904: NEG
67905: PUSH
67906: LD_INT 0
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 2
67915: NEG
67916: PUSH
67917: LD_INT 1
67919: NEG
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: LIST
67929: LIST
67930: LIST
67931: LIST
67932: LIST
67933: LIST
67934: LIST
67935: LIST
67936: LIST
67937: LIST
67938: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67939: LD_ADDR_VAR 0 52
67943: PUSH
67944: LD_INT 0
67946: PUSH
67947: LD_INT 0
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 0
67956: PUSH
67957: LD_INT 1
67959: NEG
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 1
67967: PUSH
67968: LD_INT 0
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 1
67977: PUSH
67978: LD_INT 1
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: PUSH
67985: LD_INT 0
67987: PUSH
67988: LD_INT 1
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: LD_INT 1
67997: NEG
67998: PUSH
67999: LD_INT 0
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PUSH
68006: LD_INT 1
68008: NEG
68009: PUSH
68010: LD_INT 1
68012: NEG
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: PUSH
68018: LD_INT 1
68020: NEG
68021: PUSH
68022: LD_INT 2
68024: NEG
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: PUSH
68030: LD_INT 1
68032: NEG
68033: PUSH
68034: LD_INT 1
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 2
68043: NEG
68044: PUSH
68045: LD_INT 0
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 2
68054: NEG
68055: PUSH
68056: LD_INT 1
68058: NEG
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: LD_INT 2
68066: NEG
68067: PUSH
68068: LD_INT 2
68070: NEG
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: LIST
68082: LIST
68083: LIST
68084: LIST
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68090: LD_ADDR_VAR 0 53
68094: PUSH
68095: LD_INT 0
68097: PUSH
68098: LD_INT 0
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 0
68107: PUSH
68108: LD_INT 1
68110: NEG
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 1
68118: PUSH
68119: LD_INT 0
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 1
68128: PUSH
68129: LD_INT 1
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_INT 0
68138: PUSH
68139: LD_INT 1
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PUSH
68146: LD_INT 1
68148: NEG
68149: PUSH
68150: LD_INT 0
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PUSH
68157: LD_INT 1
68159: NEG
68160: PUSH
68161: LD_INT 1
68163: NEG
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 1
68171: NEG
68172: PUSH
68173: LD_INT 2
68175: NEG
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PUSH
68181: LD_INT 0
68183: PUSH
68184: LD_INT 2
68186: NEG
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: PUSH
68192: LD_INT 1
68194: PUSH
68195: LD_INT 1
68197: NEG
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: LD_INT 2
68205: PUSH
68206: LD_INT 0
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: LD_INT 2
68215: PUSH
68216: LD_INT 1
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_INT 2
68225: PUSH
68226: LD_INT 2
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 1
68235: PUSH
68236: LD_INT 2
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 0
68245: PUSH
68246: LD_INT 2
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PUSH
68253: LD_INT 1
68255: NEG
68256: PUSH
68257: LD_INT 1
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 2
68266: NEG
68267: PUSH
68268: LD_INT 0
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 2
68277: NEG
68278: PUSH
68279: LD_INT 1
68281: NEG
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: PUSH
68287: LD_INT 2
68289: NEG
68290: PUSH
68291: LD_INT 2
68293: NEG
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: LIST
68303: LIST
68304: LIST
68305: LIST
68306: LIST
68307: LIST
68308: LIST
68309: LIST
68310: LIST
68311: LIST
68312: LIST
68313: LIST
68314: LIST
68315: LIST
68316: LIST
68317: LIST
68318: LIST
68319: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68320: LD_ADDR_VAR 0 54
68324: PUSH
68325: LD_INT 0
68327: PUSH
68328: LD_INT 0
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 0
68337: PUSH
68338: LD_INT 1
68340: NEG
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: LD_INT 1
68348: PUSH
68349: LD_INT 0
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 1
68358: PUSH
68359: LD_INT 1
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: PUSH
68366: LD_INT 0
68368: PUSH
68369: LD_INT 1
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 1
68378: NEG
68379: PUSH
68380: LD_INT 0
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 1
68389: NEG
68390: PUSH
68391: LD_INT 1
68393: NEG
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 1
68401: NEG
68402: PUSH
68403: LD_INT 2
68405: NEG
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: LD_INT 0
68413: PUSH
68414: LD_INT 2
68416: NEG
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 1
68424: PUSH
68425: LD_INT 1
68427: NEG
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 2
68435: PUSH
68436: LD_INT 0
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 2
68445: PUSH
68446: LD_INT 1
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: PUSH
68453: LD_INT 2
68455: PUSH
68456: LD_INT 2
68458: PUSH
68459: EMPTY
68460: LIST
68461: LIST
68462: PUSH
68463: LD_INT 1
68465: PUSH
68466: LD_INT 2
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PUSH
68473: LD_INT 0
68475: PUSH
68476: LD_INT 2
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: LD_INT 1
68485: NEG
68486: PUSH
68487: LD_INT 1
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 2
68496: NEG
68497: PUSH
68498: LD_INT 0
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 2
68507: NEG
68508: PUSH
68509: LD_INT 1
68511: NEG
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 2
68519: NEG
68520: PUSH
68521: LD_INT 2
68523: NEG
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: LIST
68536: LIST
68537: LIST
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: LIST
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68550: LD_ADDR_VAR 0 55
68554: PUSH
68555: LD_INT 0
68557: PUSH
68558: LD_INT 0
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: LD_INT 0
68567: PUSH
68568: LD_INT 1
68570: NEG
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 1
68578: PUSH
68579: LD_INT 0
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 1
68588: PUSH
68589: LD_INT 1
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 0
68598: PUSH
68599: LD_INT 1
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 1
68608: NEG
68609: PUSH
68610: LD_INT 0
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: PUSH
68617: LD_INT 1
68619: NEG
68620: PUSH
68621: LD_INT 1
68623: NEG
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 1
68631: NEG
68632: PUSH
68633: LD_INT 2
68635: NEG
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 0
68643: PUSH
68644: LD_INT 2
68646: NEG
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 1
68654: PUSH
68655: LD_INT 1
68657: NEG
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 2
68665: PUSH
68666: LD_INT 0
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: PUSH
68673: LD_INT 2
68675: PUSH
68676: LD_INT 1
68678: PUSH
68679: EMPTY
68680: LIST
68681: LIST
68682: PUSH
68683: LD_INT 2
68685: PUSH
68686: LD_INT 2
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PUSH
68693: LD_INT 1
68695: PUSH
68696: LD_INT 2
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: PUSH
68703: LD_INT 0
68705: PUSH
68706: LD_INT 2
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: LD_INT 1
68715: NEG
68716: PUSH
68717: LD_INT 1
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: LD_INT 2
68726: NEG
68727: PUSH
68728: LD_INT 0
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: PUSH
68735: LD_INT 2
68737: NEG
68738: PUSH
68739: LD_INT 1
68741: NEG
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PUSH
68747: LD_INT 2
68749: NEG
68750: PUSH
68751: LD_INT 2
68753: NEG
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68780: LD_ADDR_VAR 0 56
68784: PUSH
68785: LD_INT 0
68787: PUSH
68788: LD_INT 0
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: LD_INT 0
68797: PUSH
68798: LD_INT 1
68800: NEG
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: LD_INT 1
68808: PUSH
68809: LD_INT 0
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: PUSH
68816: LD_INT 1
68818: PUSH
68819: LD_INT 1
68821: PUSH
68822: EMPTY
68823: LIST
68824: LIST
68825: PUSH
68826: LD_INT 0
68828: PUSH
68829: LD_INT 1
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: PUSH
68836: LD_INT 1
68838: NEG
68839: PUSH
68840: LD_INT 0
68842: PUSH
68843: EMPTY
68844: LIST
68845: LIST
68846: PUSH
68847: LD_INT 1
68849: NEG
68850: PUSH
68851: LD_INT 1
68853: NEG
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: PUSH
68859: LD_INT 1
68861: NEG
68862: PUSH
68863: LD_INT 2
68865: NEG
68866: PUSH
68867: EMPTY
68868: LIST
68869: LIST
68870: PUSH
68871: LD_INT 0
68873: PUSH
68874: LD_INT 2
68876: NEG
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 1
68884: PUSH
68885: LD_INT 1
68887: NEG
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PUSH
68893: LD_INT 2
68895: PUSH
68896: LD_INT 0
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PUSH
68903: LD_INT 2
68905: PUSH
68906: LD_INT 1
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 2
68915: PUSH
68916: LD_INT 2
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: LD_INT 1
68925: PUSH
68926: LD_INT 2
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 0
68935: PUSH
68936: LD_INT 2
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: LD_INT 1
68945: NEG
68946: PUSH
68947: LD_INT 1
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 2
68956: NEG
68957: PUSH
68958: LD_INT 0
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: LD_INT 2
68967: NEG
68968: PUSH
68969: LD_INT 1
68971: NEG
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: PUSH
68977: LD_INT 2
68979: NEG
68980: PUSH
68981: LD_INT 2
68983: NEG
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: LIST
69009: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69010: LD_ADDR_VAR 0 57
69014: PUSH
69015: LD_INT 0
69017: PUSH
69018: LD_INT 0
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 0
69027: PUSH
69028: LD_INT 1
69030: NEG
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 1
69038: PUSH
69039: LD_INT 0
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: PUSH
69046: LD_INT 1
69048: PUSH
69049: LD_INT 1
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: PUSH
69056: LD_INT 0
69058: PUSH
69059: LD_INT 1
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: PUSH
69066: LD_INT 1
69068: NEG
69069: PUSH
69070: LD_INT 0
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: PUSH
69077: LD_INT 1
69079: NEG
69080: PUSH
69081: LD_INT 1
69083: NEG
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 1
69091: NEG
69092: PUSH
69093: LD_INT 2
69095: NEG
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: PUSH
69101: LD_INT 0
69103: PUSH
69104: LD_INT 2
69106: NEG
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: LD_INT 1
69114: PUSH
69115: LD_INT 1
69117: NEG
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PUSH
69123: LD_INT 2
69125: PUSH
69126: LD_INT 0
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PUSH
69133: LD_INT 2
69135: PUSH
69136: LD_INT 1
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: PUSH
69143: LD_INT 2
69145: PUSH
69146: LD_INT 2
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: LD_INT 1
69155: PUSH
69156: LD_INT 2
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: LD_INT 0
69165: PUSH
69166: LD_INT 2
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 1
69175: NEG
69176: PUSH
69177: LD_INT 1
69179: PUSH
69180: EMPTY
69181: LIST
69182: LIST
69183: PUSH
69184: LD_INT 2
69186: NEG
69187: PUSH
69188: LD_INT 0
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PUSH
69195: LD_INT 2
69197: NEG
69198: PUSH
69199: LD_INT 1
69201: NEG
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_INT 2
69209: NEG
69210: PUSH
69211: LD_INT 2
69213: NEG
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69240: LD_ADDR_VAR 0 58
69244: PUSH
69245: LD_INT 0
69247: PUSH
69248: LD_INT 0
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: PUSH
69255: LD_INT 0
69257: PUSH
69258: LD_INT 1
69260: NEG
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PUSH
69266: LD_INT 1
69268: PUSH
69269: LD_INT 0
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 1
69278: PUSH
69279: LD_INT 1
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: LD_INT 0
69288: PUSH
69289: LD_INT 1
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 1
69298: NEG
69299: PUSH
69300: LD_INT 0
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: LD_INT 1
69309: NEG
69310: PUSH
69311: LD_INT 1
69313: NEG
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: LD_INT 1
69321: NEG
69322: PUSH
69323: LD_INT 2
69325: NEG
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 0
69333: PUSH
69334: LD_INT 2
69336: NEG
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 1
69344: PUSH
69345: LD_INT 1
69347: NEG
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: PUSH
69353: LD_INT 2
69355: PUSH
69356: LD_INT 0
69358: PUSH
69359: EMPTY
69360: LIST
69361: LIST
69362: PUSH
69363: LD_INT 2
69365: PUSH
69366: LD_INT 1
69368: PUSH
69369: EMPTY
69370: LIST
69371: LIST
69372: PUSH
69373: LD_INT 2
69375: PUSH
69376: LD_INT 2
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PUSH
69383: LD_INT 1
69385: PUSH
69386: LD_INT 2
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: LD_INT 0
69395: PUSH
69396: LD_INT 2
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: PUSH
69403: LD_INT 1
69405: NEG
69406: PUSH
69407: LD_INT 1
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: LD_INT 2
69416: NEG
69417: PUSH
69418: LD_INT 0
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: PUSH
69425: LD_INT 2
69427: NEG
69428: PUSH
69429: LD_INT 1
69431: NEG
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PUSH
69437: LD_INT 2
69439: NEG
69440: PUSH
69441: LD_INT 2
69443: NEG
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: LIST
69453: LIST
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: LIST
69459: LIST
69460: LIST
69461: LIST
69462: LIST
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69470: LD_ADDR_VAR 0 59
69474: PUSH
69475: LD_INT 0
69477: PUSH
69478: LD_INT 0
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: PUSH
69485: LD_INT 0
69487: PUSH
69488: LD_INT 1
69490: NEG
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: LD_INT 1
69498: PUSH
69499: LD_INT 0
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 1
69508: PUSH
69509: LD_INT 1
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_INT 0
69518: PUSH
69519: LD_INT 1
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: PUSH
69526: LD_INT 1
69528: NEG
69529: PUSH
69530: LD_INT 0
69532: PUSH
69533: EMPTY
69534: LIST
69535: LIST
69536: PUSH
69537: LD_INT 1
69539: NEG
69540: PUSH
69541: LD_INT 1
69543: NEG
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69558: LD_ADDR_VAR 0 60
69562: PUSH
69563: LD_INT 0
69565: PUSH
69566: LD_INT 0
69568: PUSH
69569: EMPTY
69570: LIST
69571: LIST
69572: PUSH
69573: LD_INT 0
69575: PUSH
69576: LD_INT 1
69578: NEG
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 1
69586: PUSH
69587: LD_INT 0
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 1
69596: PUSH
69597: LD_INT 1
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: PUSH
69604: LD_INT 0
69606: PUSH
69607: LD_INT 1
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: PUSH
69614: LD_INT 1
69616: NEG
69617: PUSH
69618: LD_INT 0
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 1
69627: NEG
69628: PUSH
69629: LD_INT 1
69631: NEG
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: EMPTY
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: LIST
69645: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69646: LD_ADDR_VAR 0 61
69650: PUSH
69651: LD_INT 0
69653: PUSH
69654: LD_INT 0
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: PUSH
69661: LD_INT 0
69663: PUSH
69664: LD_INT 1
69666: NEG
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: LD_INT 1
69674: PUSH
69675: LD_INT 0
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: LD_INT 1
69684: PUSH
69685: LD_INT 1
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: PUSH
69692: LD_INT 0
69694: PUSH
69695: LD_INT 1
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: PUSH
69702: LD_INT 1
69704: NEG
69705: PUSH
69706: LD_INT 0
69708: PUSH
69709: EMPTY
69710: LIST
69711: LIST
69712: PUSH
69713: LD_INT 1
69715: NEG
69716: PUSH
69717: LD_INT 1
69719: NEG
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: LIST
69729: LIST
69730: LIST
69731: LIST
69732: LIST
69733: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69734: LD_ADDR_VAR 0 62
69738: PUSH
69739: LD_INT 0
69741: PUSH
69742: LD_INT 0
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: LD_INT 0
69751: PUSH
69752: LD_INT 1
69754: NEG
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: PUSH
69760: LD_INT 1
69762: PUSH
69763: LD_INT 0
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PUSH
69770: LD_INT 1
69772: PUSH
69773: LD_INT 1
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: LD_INT 0
69782: PUSH
69783: LD_INT 1
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 1
69792: NEG
69793: PUSH
69794: LD_INT 0
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 1
69803: NEG
69804: PUSH
69805: LD_INT 1
69807: NEG
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: LIST
69817: LIST
69818: LIST
69819: LIST
69820: LIST
69821: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69822: LD_ADDR_VAR 0 63
69826: PUSH
69827: LD_INT 0
69829: PUSH
69830: LD_INT 0
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: PUSH
69837: LD_INT 0
69839: PUSH
69840: LD_INT 1
69842: NEG
69843: PUSH
69844: EMPTY
69845: LIST
69846: LIST
69847: PUSH
69848: LD_INT 1
69850: PUSH
69851: LD_INT 0
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: PUSH
69858: LD_INT 1
69860: PUSH
69861: LD_INT 1
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PUSH
69868: LD_INT 0
69870: PUSH
69871: LD_INT 1
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: PUSH
69878: LD_INT 1
69880: NEG
69881: PUSH
69882: LD_INT 0
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PUSH
69889: LD_INT 1
69891: NEG
69892: PUSH
69893: LD_INT 1
69895: NEG
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: LIST
69905: LIST
69906: LIST
69907: LIST
69908: LIST
69909: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69910: LD_ADDR_VAR 0 64
69914: PUSH
69915: LD_INT 0
69917: PUSH
69918: LD_INT 0
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_INT 0
69927: PUSH
69928: LD_INT 1
69930: NEG
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: PUSH
69936: LD_INT 1
69938: PUSH
69939: LD_INT 0
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PUSH
69946: LD_INT 1
69948: PUSH
69949: LD_INT 1
69951: PUSH
69952: EMPTY
69953: LIST
69954: LIST
69955: PUSH
69956: LD_INT 0
69958: PUSH
69959: LD_INT 1
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: PUSH
69966: LD_INT 1
69968: NEG
69969: PUSH
69970: LD_INT 0
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: PUSH
69977: LD_INT 1
69979: NEG
69980: PUSH
69981: LD_INT 1
69983: NEG
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: LIST
69993: LIST
69994: LIST
69995: LIST
69996: LIST
69997: ST_TO_ADDR
// end ; 1 :
69998: GO 75895
70000: LD_INT 1
70002: DOUBLE
70003: EQUAL
70004: IFTRUE 70008
70006: GO 72631
70008: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70009: LD_ADDR_VAR 0 11
70013: PUSH
70014: LD_INT 1
70016: NEG
70017: PUSH
70018: LD_INT 3
70020: NEG
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: PUSH
70026: LD_INT 0
70028: PUSH
70029: LD_INT 3
70031: NEG
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: PUSH
70037: LD_INT 1
70039: PUSH
70040: LD_INT 2
70042: NEG
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: LIST
70052: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70053: LD_ADDR_VAR 0 12
70057: PUSH
70058: LD_INT 2
70060: PUSH
70061: LD_INT 1
70063: NEG
70064: PUSH
70065: EMPTY
70066: LIST
70067: LIST
70068: PUSH
70069: LD_INT 3
70071: PUSH
70072: LD_INT 0
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: LD_INT 3
70081: PUSH
70082: LD_INT 1
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PUSH
70089: EMPTY
70090: LIST
70091: LIST
70092: LIST
70093: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70094: LD_ADDR_VAR 0 13
70098: PUSH
70099: LD_INT 3
70101: PUSH
70102: LD_INT 2
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 3
70111: PUSH
70112: LD_INT 3
70114: PUSH
70115: EMPTY
70116: LIST
70117: LIST
70118: PUSH
70119: LD_INT 2
70121: PUSH
70122: LD_INT 3
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: LIST
70133: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70134: LD_ADDR_VAR 0 14
70138: PUSH
70139: LD_INT 1
70141: PUSH
70142: LD_INT 3
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: PUSH
70149: LD_INT 0
70151: PUSH
70152: LD_INT 3
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: PUSH
70159: LD_INT 1
70161: NEG
70162: PUSH
70163: LD_INT 2
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PUSH
70170: EMPTY
70171: LIST
70172: LIST
70173: LIST
70174: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70175: LD_ADDR_VAR 0 15
70179: PUSH
70180: LD_INT 2
70182: NEG
70183: PUSH
70184: LD_INT 1
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 3
70193: NEG
70194: PUSH
70195: LD_INT 0
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 3
70204: NEG
70205: PUSH
70206: LD_INT 1
70208: NEG
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: LIST
70218: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70219: LD_ADDR_VAR 0 16
70223: PUSH
70224: LD_INT 2
70226: NEG
70227: PUSH
70228: LD_INT 3
70230: NEG
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: PUSH
70236: LD_INT 3
70238: NEG
70239: PUSH
70240: LD_INT 2
70242: NEG
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 3
70250: NEG
70251: PUSH
70252: LD_INT 3
70254: NEG
70255: PUSH
70256: EMPTY
70257: LIST
70258: LIST
70259: PUSH
70260: EMPTY
70261: LIST
70262: LIST
70263: LIST
70264: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70265: LD_ADDR_VAR 0 17
70269: PUSH
70270: LD_INT 1
70272: NEG
70273: PUSH
70274: LD_INT 3
70276: NEG
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: PUSH
70282: LD_INT 0
70284: PUSH
70285: LD_INT 3
70287: NEG
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: PUSH
70293: LD_INT 1
70295: PUSH
70296: LD_INT 2
70298: NEG
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: LIST
70308: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70309: LD_ADDR_VAR 0 18
70313: PUSH
70314: LD_INT 2
70316: PUSH
70317: LD_INT 1
70319: NEG
70320: PUSH
70321: EMPTY
70322: LIST
70323: LIST
70324: PUSH
70325: LD_INT 3
70327: PUSH
70328: LD_INT 0
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: PUSH
70335: LD_INT 3
70337: PUSH
70338: LD_INT 1
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: LIST
70349: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70350: LD_ADDR_VAR 0 19
70354: PUSH
70355: LD_INT 3
70357: PUSH
70358: LD_INT 2
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: PUSH
70365: LD_INT 3
70367: PUSH
70368: LD_INT 3
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: PUSH
70375: LD_INT 2
70377: PUSH
70378: LD_INT 3
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: EMPTY
70386: LIST
70387: LIST
70388: LIST
70389: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70390: LD_ADDR_VAR 0 20
70394: PUSH
70395: LD_INT 1
70397: PUSH
70398: LD_INT 3
70400: PUSH
70401: EMPTY
70402: LIST
70403: LIST
70404: PUSH
70405: LD_INT 0
70407: PUSH
70408: LD_INT 3
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: LD_INT 1
70417: NEG
70418: PUSH
70419: LD_INT 2
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: LIST
70430: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70431: LD_ADDR_VAR 0 21
70435: PUSH
70436: LD_INT 2
70438: NEG
70439: PUSH
70440: LD_INT 1
70442: PUSH
70443: EMPTY
70444: LIST
70445: LIST
70446: PUSH
70447: LD_INT 3
70449: NEG
70450: PUSH
70451: LD_INT 0
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: LD_INT 3
70460: NEG
70461: PUSH
70462: LD_INT 1
70464: NEG
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: PUSH
70470: EMPTY
70471: LIST
70472: LIST
70473: LIST
70474: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70475: LD_ADDR_VAR 0 22
70479: PUSH
70480: LD_INT 2
70482: NEG
70483: PUSH
70484: LD_INT 3
70486: NEG
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: PUSH
70492: LD_INT 3
70494: NEG
70495: PUSH
70496: LD_INT 2
70498: NEG
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: PUSH
70504: LD_INT 3
70506: NEG
70507: PUSH
70508: LD_INT 3
70510: NEG
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: PUSH
70516: EMPTY
70517: LIST
70518: LIST
70519: LIST
70520: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
70521: LD_ADDR_VAR 0 23
70525: PUSH
70526: LD_INT 0
70528: PUSH
70529: LD_INT 3
70531: NEG
70532: PUSH
70533: EMPTY
70534: LIST
70535: LIST
70536: PUSH
70537: LD_INT 1
70539: NEG
70540: PUSH
70541: LD_INT 4
70543: NEG
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: PUSH
70549: LD_INT 1
70551: PUSH
70552: LD_INT 3
70554: NEG
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: LIST
70564: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
70565: LD_ADDR_VAR 0 24
70569: PUSH
70570: LD_INT 3
70572: PUSH
70573: LD_INT 0
70575: PUSH
70576: EMPTY
70577: LIST
70578: LIST
70579: PUSH
70580: LD_INT 3
70582: PUSH
70583: LD_INT 1
70585: NEG
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 4
70593: PUSH
70594: LD_INT 1
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PUSH
70601: EMPTY
70602: LIST
70603: LIST
70604: LIST
70605: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
70606: LD_ADDR_VAR 0 25
70610: PUSH
70611: LD_INT 3
70613: PUSH
70614: LD_INT 3
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PUSH
70621: LD_INT 4
70623: PUSH
70624: LD_INT 3
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 3
70633: PUSH
70634: LD_INT 4
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: LIST
70645: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
70646: LD_ADDR_VAR 0 26
70650: PUSH
70651: LD_INT 0
70653: PUSH
70654: LD_INT 3
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: LD_INT 1
70663: PUSH
70664: LD_INT 4
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: PUSH
70671: LD_INT 1
70673: NEG
70674: PUSH
70675: LD_INT 3
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: LIST
70686: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
70687: LD_ADDR_VAR 0 27
70691: PUSH
70692: LD_INT 3
70694: NEG
70695: PUSH
70696: LD_INT 0
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: LD_INT 3
70705: NEG
70706: PUSH
70707: LD_INT 1
70709: PUSH
70710: EMPTY
70711: LIST
70712: LIST
70713: PUSH
70714: LD_INT 4
70716: NEG
70717: PUSH
70718: LD_INT 1
70720: NEG
70721: PUSH
70722: EMPTY
70723: LIST
70724: LIST
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: LIST
70730: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
70731: LD_ADDR_VAR 0 28
70735: PUSH
70736: LD_INT 3
70738: NEG
70739: PUSH
70740: LD_INT 3
70742: NEG
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: PUSH
70748: LD_INT 3
70750: NEG
70751: PUSH
70752: LD_INT 4
70754: NEG
70755: PUSH
70756: EMPTY
70757: LIST
70758: LIST
70759: PUSH
70760: LD_INT 4
70762: NEG
70763: PUSH
70764: LD_INT 3
70766: NEG
70767: PUSH
70768: EMPTY
70769: LIST
70770: LIST
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: LIST
70776: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
70777: LD_ADDR_VAR 0 29
70781: PUSH
70782: LD_INT 1
70784: NEG
70785: PUSH
70786: LD_INT 3
70788: NEG
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: PUSH
70794: LD_INT 0
70796: PUSH
70797: LD_INT 3
70799: NEG
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: PUSH
70805: LD_INT 1
70807: PUSH
70808: LD_INT 2
70810: NEG
70811: PUSH
70812: EMPTY
70813: LIST
70814: LIST
70815: PUSH
70816: LD_INT 1
70818: NEG
70819: PUSH
70820: LD_INT 4
70822: NEG
70823: PUSH
70824: EMPTY
70825: LIST
70826: LIST
70827: PUSH
70828: LD_INT 0
70830: PUSH
70831: LD_INT 4
70833: NEG
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: PUSH
70839: LD_INT 1
70841: PUSH
70842: LD_INT 3
70844: NEG
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PUSH
70850: LD_INT 1
70852: NEG
70853: PUSH
70854: LD_INT 5
70856: NEG
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: PUSH
70862: LD_INT 0
70864: PUSH
70865: LD_INT 5
70867: NEG
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: PUSH
70873: LD_INT 1
70875: PUSH
70876: LD_INT 4
70878: NEG
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PUSH
70884: LD_INT 1
70886: NEG
70887: PUSH
70888: LD_INT 6
70890: NEG
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PUSH
70896: LD_INT 0
70898: PUSH
70899: LD_INT 6
70901: NEG
70902: PUSH
70903: EMPTY
70904: LIST
70905: LIST
70906: PUSH
70907: LD_INT 1
70909: PUSH
70910: LD_INT 5
70912: NEG
70913: PUSH
70914: EMPTY
70915: LIST
70916: LIST
70917: PUSH
70918: EMPTY
70919: LIST
70920: LIST
70921: LIST
70922: LIST
70923: LIST
70924: LIST
70925: LIST
70926: LIST
70927: LIST
70928: LIST
70929: LIST
70930: LIST
70931: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
70932: LD_ADDR_VAR 0 30
70936: PUSH
70937: LD_INT 2
70939: PUSH
70940: LD_INT 1
70942: NEG
70943: PUSH
70944: EMPTY
70945: LIST
70946: LIST
70947: PUSH
70948: LD_INT 3
70950: PUSH
70951: LD_INT 0
70953: PUSH
70954: EMPTY
70955: LIST
70956: LIST
70957: PUSH
70958: LD_INT 3
70960: PUSH
70961: LD_INT 1
70963: PUSH
70964: EMPTY
70965: LIST
70966: LIST
70967: PUSH
70968: LD_INT 3
70970: PUSH
70971: LD_INT 1
70973: NEG
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: PUSH
70979: LD_INT 4
70981: PUSH
70982: LD_INT 0
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: PUSH
70989: LD_INT 4
70991: PUSH
70992: LD_INT 1
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PUSH
70999: LD_INT 4
71001: PUSH
71002: LD_INT 1
71004: NEG
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: LD_INT 5
71012: PUSH
71013: LD_INT 0
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: PUSH
71020: LD_INT 5
71022: PUSH
71023: LD_INT 1
71025: PUSH
71026: EMPTY
71027: LIST
71028: LIST
71029: PUSH
71030: LD_INT 5
71032: PUSH
71033: LD_INT 1
71035: NEG
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: PUSH
71041: LD_INT 6
71043: PUSH
71044: LD_INT 0
71046: PUSH
71047: EMPTY
71048: LIST
71049: LIST
71050: PUSH
71051: LD_INT 6
71053: PUSH
71054: LD_INT 1
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: LIST
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
71075: LD_ADDR_VAR 0 31
71079: PUSH
71080: LD_INT 3
71082: PUSH
71083: LD_INT 2
71085: PUSH
71086: EMPTY
71087: LIST
71088: LIST
71089: PUSH
71090: LD_INT 3
71092: PUSH
71093: LD_INT 3
71095: PUSH
71096: EMPTY
71097: LIST
71098: LIST
71099: PUSH
71100: LD_INT 2
71102: PUSH
71103: LD_INT 3
71105: PUSH
71106: EMPTY
71107: LIST
71108: LIST
71109: PUSH
71110: LD_INT 4
71112: PUSH
71113: LD_INT 3
71115: PUSH
71116: EMPTY
71117: LIST
71118: LIST
71119: PUSH
71120: LD_INT 4
71122: PUSH
71123: LD_INT 4
71125: PUSH
71126: EMPTY
71127: LIST
71128: LIST
71129: PUSH
71130: LD_INT 3
71132: PUSH
71133: LD_INT 4
71135: PUSH
71136: EMPTY
71137: LIST
71138: LIST
71139: PUSH
71140: LD_INT 5
71142: PUSH
71143: LD_INT 4
71145: PUSH
71146: EMPTY
71147: LIST
71148: LIST
71149: PUSH
71150: LD_INT 5
71152: PUSH
71153: LD_INT 5
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: PUSH
71160: LD_INT 4
71162: PUSH
71163: LD_INT 5
71165: PUSH
71166: EMPTY
71167: LIST
71168: LIST
71169: PUSH
71170: LD_INT 6
71172: PUSH
71173: LD_INT 5
71175: PUSH
71176: EMPTY
71177: LIST
71178: LIST
71179: PUSH
71180: LD_INT 6
71182: PUSH
71183: LD_INT 6
71185: PUSH
71186: EMPTY
71187: LIST
71188: LIST
71189: PUSH
71190: LD_INT 5
71192: PUSH
71193: LD_INT 6
71195: PUSH
71196: EMPTY
71197: LIST
71198: LIST
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: LIST
71204: LIST
71205: LIST
71206: LIST
71207: LIST
71208: LIST
71209: LIST
71210: LIST
71211: LIST
71212: LIST
71213: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
71214: LD_ADDR_VAR 0 32
71218: PUSH
71219: LD_INT 1
71221: PUSH
71222: LD_INT 3
71224: PUSH
71225: EMPTY
71226: LIST
71227: LIST
71228: PUSH
71229: LD_INT 0
71231: PUSH
71232: LD_INT 3
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: PUSH
71239: LD_INT 1
71241: NEG
71242: PUSH
71243: LD_INT 2
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: PUSH
71250: LD_INT 1
71252: PUSH
71253: LD_INT 4
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: PUSH
71260: LD_INT 0
71262: PUSH
71263: LD_INT 4
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: PUSH
71270: LD_INT 1
71272: NEG
71273: PUSH
71274: LD_INT 3
71276: PUSH
71277: EMPTY
71278: LIST
71279: LIST
71280: PUSH
71281: LD_INT 1
71283: PUSH
71284: LD_INT 5
71286: PUSH
71287: EMPTY
71288: LIST
71289: LIST
71290: PUSH
71291: LD_INT 0
71293: PUSH
71294: LD_INT 5
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: PUSH
71301: LD_INT 1
71303: NEG
71304: PUSH
71305: LD_INT 4
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: PUSH
71312: LD_INT 1
71314: PUSH
71315: LD_INT 6
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PUSH
71322: LD_INT 0
71324: PUSH
71325: LD_INT 6
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: PUSH
71332: LD_INT 1
71334: NEG
71335: PUSH
71336: LD_INT 5
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: PUSH
71343: EMPTY
71344: LIST
71345: LIST
71346: LIST
71347: LIST
71348: LIST
71349: LIST
71350: LIST
71351: LIST
71352: LIST
71353: LIST
71354: LIST
71355: LIST
71356: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
71357: LD_ADDR_VAR 0 33
71361: PUSH
71362: LD_INT 2
71364: NEG
71365: PUSH
71366: LD_INT 1
71368: PUSH
71369: EMPTY
71370: LIST
71371: LIST
71372: PUSH
71373: LD_INT 3
71375: NEG
71376: PUSH
71377: LD_INT 0
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: PUSH
71384: LD_INT 3
71386: NEG
71387: PUSH
71388: LD_INT 1
71390: NEG
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: PUSH
71396: LD_INT 3
71398: NEG
71399: PUSH
71400: LD_INT 1
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: PUSH
71407: LD_INT 4
71409: NEG
71410: PUSH
71411: LD_INT 0
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: LD_INT 4
71420: NEG
71421: PUSH
71422: LD_INT 1
71424: NEG
71425: PUSH
71426: EMPTY
71427: LIST
71428: LIST
71429: PUSH
71430: LD_INT 4
71432: NEG
71433: PUSH
71434: LD_INT 1
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: PUSH
71441: LD_INT 5
71443: NEG
71444: PUSH
71445: LD_INT 0
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: PUSH
71452: LD_INT 5
71454: NEG
71455: PUSH
71456: LD_INT 1
71458: NEG
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: PUSH
71464: LD_INT 5
71466: NEG
71467: PUSH
71468: LD_INT 1
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: LD_INT 6
71477: NEG
71478: PUSH
71479: LD_INT 0
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: PUSH
71486: LD_INT 6
71488: NEG
71489: PUSH
71490: LD_INT 1
71492: NEG
71493: PUSH
71494: EMPTY
71495: LIST
71496: LIST
71497: PUSH
71498: EMPTY
71499: LIST
71500: LIST
71501: LIST
71502: LIST
71503: LIST
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
71512: LD_ADDR_VAR 0 34
71516: PUSH
71517: LD_INT 2
71519: NEG
71520: PUSH
71521: LD_INT 3
71523: NEG
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: PUSH
71529: LD_INT 3
71531: NEG
71532: PUSH
71533: LD_INT 2
71535: NEG
71536: PUSH
71537: EMPTY
71538: LIST
71539: LIST
71540: PUSH
71541: LD_INT 3
71543: NEG
71544: PUSH
71545: LD_INT 3
71547: NEG
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: PUSH
71553: LD_INT 3
71555: NEG
71556: PUSH
71557: LD_INT 4
71559: NEG
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PUSH
71565: LD_INT 4
71567: NEG
71568: PUSH
71569: LD_INT 3
71571: NEG
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: PUSH
71577: LD_INT 4
71579: NEG
71580: PUSH
71581: LD_INT 4
71583: NEG
71584: PUSH
71585: EMPTY
71586: LIST
71587: LIST
71588: PUSH
71589: LD_INT 4
71591: NEG
71592: PUSH
71593: LD_INT 5
71595: NEG
71596: PUSH
71597: EMPTY
71598: LIST
71599: LIST
71600: PUSH
71601: LD_INT 5
71603: NEG
71604: PUSH
71605: LD_INT 4
71607: NEG
71608: PUSH
71609: EMPTY
71610: LIST
71611: LIST
71612: PUSH
71613: LD_INT 5
71615: NEG
71616: PUSH
71617: LD_INT 5
71619: NEG
71620: PUSH
71621: EMPTY
71622: LIST
71623: LIST
71624: PUSH
71625: LD_INT 5
71627: NEG
71628: PUSH
71629: LD_INT 6
71631: NEG
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: PUSH
71637: LD_INT 6
71639: NEG
71640: PUSH
71641: LD_INT 5
71643: NEG
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: PUSH
71649: LD_INT 6
71651: NEG
71652: PUSH
71653: LD_INT 6
71655: NEG
71656: PUSH
71657: EMPTY
71658: LIST
71659: LIST
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: LIST
71665: LIST
71666: LIST
71667: LIST
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: LIST
71673: LIST
71674: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
71675: LD_ADDR_VAR 0 41
71679: PUSH
71680: LD_INT 0
71682: PUSH
71683: LD_INT 2
71685: NEG
71686: PUSH
71687: EMPTY
71688: LIST
71689: LIST
71690: PUSH
71691: LD_INT 1
71693: NEG
71694: PUSH
71695: LD_INT 3
71697: NEG
71698: PUSH
71699: EMPTY
71700: LIST
71701: LIST
71702: PUSH
71703: LD_INT 1
71705: PUSH
71706: LD_INT 2
71708: NEG
71709: PUSH
71710: EMPTY
71711: LIST
71712: LIST
71713: PUSH
71714: EMPTY
71715: LIST
71716: LIST
71717: LIST
71718: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
71719: LD_ADDR_VAR 0 42
71723: PUSH
71724: LD_INT 2
71726: PUSH
71727: LD_INT 0
71729: PUSH
71730: EMPTY
71731: LIST
71732: LIST
71733: PUSH
71734: LD_INT 2
71736: PUSH
71737: LD_INT 1
71739: NEG
71740: PUSH
71741: EMPTY
71742: LIST
71743: LIST
71744: PUSH
71745: LD_INT 3
71747: PUSH
71748: LD_INT 1
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: PUSH
71755: EMPTY
71756: LIST
71757: LIST
71758: LIST
71759: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
71760: LD_ADDR_VAR 0 43
71764: PUSH
71765: LD_INT 2
71767: PUSH
71768: LD_INT 2
71770: PUSH
71771: EMPTY
71772: LIST
71773: LIST
71774: PUSH
71775: LD_INT 3
71777: PUSH
71778: LD_INT 2
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PUSH
71785: LD_INT 2
71787: PUSH
71788: LD_INT 3
71790: PUSH
71791: EMPTY
71792: LIST
71793: LIST
71794: PUSH
71795: EMPTY
71796: LIST
71797: LIST
71798: LIST
71799: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
71800: LD_ADDR_VAR 0 44
71804: PUSH
71805: LD_INT 0
71807: PUSH
71808: LD_INT 2
71810: PUSH
71811: EMPTY
71812: LIST
71813: LIST
71814: PUSH
71815: LD_INT 1
71817: PUSH
71818: LD_INT 3
71820: PUSH
71821: EMPTY
71822: LIST
71823: LIST
71824: PUSH
71825: LD_INT 1
71827: NEG
71828: PUSH
71829: LD_INT 2
71831: PUSH
71832: EMPTY
71833: LIST
71834: LIST
71835: PUSH
71836: EMPTY
71837: LIST
71838: LIST
71839: LIST
71840: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
71841: LD_ADDR_VAR 0 45
71845: PUSH
71846: LD_INT 2
71848: NEG
71849: PUSH
71850: LD_INT 0
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: PUSH
71857: LD_INT 2
71859: NEG
71860: PUSH
71861: LD_INT 1
71863: PUSH
71864: EMPTY
71865: LIST
71866: LIST
71867: PUSH
71868: LD_INT 3
71870: NEG
71871: PUSH
71872: LD_INT 1
71874: NEG
71875: PUSH
71876: EMPTY
71877: LIST
71878: LIST
71879: PUSH
71880: EMPTY
71881: LIST
71882: LIST
71883: LIST
71884: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
71885: LD_ADDR_VAR 0 46
71889: PUSH
71890: LD_INT 2
71892: NEG
71893: PUSH
71894: LD_INT 2
71896: NEG
71897: PUSH
71898: EMPTY
71899: LIST
71900: LIST
71901: PUSH
71902: LD_INT 2
71904: NEG
71905: PUSH
71906: LD_INT 3
71908: NEG
71909: PUSH
71910: EMPTY
71911: LIST
71912: LIST
71913: PUSH
71914: LD_INT 3
71916: NEG
71917: PUSH
71918: LD_INT 2
71920: NEG
71921: PUSH
71922: EMPTY
71923: LIST
71924: LIST
71925: PUSH
71926: EMPTY
71927: LIST
71928: LIST
71929: LIST
71930: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
71931: LD_ADDR_VAR 0 47
71935: PUSH
71936: LD_INT 2
71938: NEG
71939: PUSH
71940: LD_INT 3
71942: NEG
71943: PUSH
71944: EMPTY
71945: LIST
71946: LIST
71947: PUSH
71948: LD_INT 1
71950: NEG
71951: PUSH
71952: LD_INT 3
71954: NEG
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: PUSH
71960: EMPTY
71961: LIST
71962: LIST
71963: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
71964: LD_ADDR_VAR 0 48
71968: PUSH
71969: LD_INT 1
71971: PUSH
71972: LD_INT 2
71974: NEG
71975: PUSH
71976: EMPTY
71977: LIST
71978: LIST
71979: PUSH
71980: LD_INT 2
71982: PUSH
71983: LD_INT 1
71985: NEG
71986: PUSH
71987: EMPTY
71988: LIST
71989: LIST
71990: PUSH
71991: EMPTY
71992: LIST
71993: LIST
71994: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
71995: LD_ADDR_VAR 0 49
71999: PUSH
72000: LD_INT 3
72002: PUSH
72003: LD_INT 1
72005: PUSH
72006: EMPTY
72007: LIST
72008: LIST
72009: PUSH
72010: LD_INT 3
72012: PUSH
72013: LD_INT 2
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: PUSH
72020: EMPTY
72021: LIST
72022: LIST
72023: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
72024: LD_ADDR_VAR 0 50
72028: PUSH
72029: LD_INT 2
72031: PUSH
72032: LD_INT 3
72034: PUSH
72035: EMPTY
72036: LIST
72037: LIST
72038: PUSH
72039: LD_INT 1
72041: PUSH
72042: LD_INT 3
72044: PUSH
72045: EMPTY
72046: LIST
72047: LIST
72048: PUSH
72049: EMPTY
72050: LIST
72051: LIST
72052: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
72053: LD_ADDR_VAR 0 51
72057: PUSH
72058: LD_INT 1
72060: NEG
72061: PUSH
72062: LD_INT 2
72064: PUSH
72065: EMPTY
72066: LIST
72067: LIST
72068: PUSH
72069: LD_INT 2
72071: NEG
72072: PUSH
72073: LD_INT 1
72075: PUSH
72076: EMPTY
72077: LIST
72078: LIST
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
72084: LD_ADDR_VAR 0 52
72088: PUSH
72089: LD_INT 3
72091: NEG
72092: PUSH
72093: LD_INT 1
72095: NEG
72096: PUSH
72097: EMPTY
72098: LIST
72099: LIST
72100: PUSH
72101: LD_INT 3
72103: NEG
72104: PUSH
72105: LD_INT 2
72107: NEG
72108: PUSH
72109: EMPTY
72110: LIST
72111: LIST
72112: PUSH
72113: EMPTY
72114: LIST
72115: LIST
72116: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
72117: LD_ADDR_VAR 0 53
72121: PUSH
72122: LD_INT 1
72124: NEG
72125: PUSH
72126: LD_INT 3
72128: NEG
72129: PUSH
72130: EMPTY
72131: LIST
72132: LIST
72133: PUSH
72134: LD_INT 0
72136: PUSH
72137: LD_INT 3
72139: NEG
72140: PUSH
72141: EMPTY
72142: LIST
72143: LIST
72144: PUSH
72145: LD_INT 1
72147: PUSH
72148: LD_INT 2
72150: NEG
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: PUSH
72156: EMPTY
72157: LIST
72158: LIST
72159: LIST
72160: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72161: LD_ADDR_VAR 0 54
72165: PUSH
72166: LD_INT 2
72168: PUSH
72169: LD_INT 1
72171: NEG
72172: PUSH
72173: EMPTY
72174: LIST
72175: LIST
72176: PUSH
72177: LD_INT 3
72179: PUSH
72180: LD_INT 0
72182: PUSH
72183: EMPTY
72184: LIST
72185: LIST
72186: PUSH
72187: LD_INT 3
72189: PUSH
72190: LD_INT 1
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: PUSH
72197: EMPTY
72198: LIST
72199: LIST
72200: LIST
72201: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72202: LD_ADDR_VAR 0 55
72206: PUSH
72207: LD_INT 3
72209: PUSH
72210: LD_INT 2
72212: PUSH
72213: EMPTY
72214: LIST
72215: LIST
72216: PUSH
72217: LD_INT 3
72219: PUSH
72220: LD_INT 3
72222: PUSH
72223: EMPTY
72224: LIST
72225: LIST
72226: PUSH
72227: LD_INT 2
72229: PUSH
72230: LD_INT 3
72232: PUSH
72233: EMPTY
72234: LIST
72235: LIST
72236: PUSH
72237: EMPTY
72238: LIST
72239: LIST
72240: LIST
72241: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
72242: LD_ADDR_VAR 0 56
72246: PUSH
72247: LD_INT 1
72249: PUSH
72250: LD_INT 3
72252: PUSH
72253: EMPTY
72254: LIST
72255: LIST
72256: PUSH
72257: LD_INT 0
72259: PUSH
72260: LD_INT 3
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: LD_INT 1
72269: NEG
72270: PUSH
72271: LD_INT 2
72273: PUSH
72274: EMPTY
72275: LIST
72276: LIST
72277: PUSH
72278: EMPTY
72279: LIST
72280: LIST
72281: LIST
72282: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72283: LD_ADDR_VAR 0 57
72287: PUSH
72288: LD_INT 2
72290: NEG
72291: PUSH
72292: LD_INT 1
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: PUSH
72299: LD_INT 3
72301: NEG
72302: PUSH
72303: LD_INT 0
72305: PUSH
72306: EMPTY
72307: LIST
72308: LIST
72309: PUSH
72310: LD_INT 3
72312: NEG
72313: PUSH
72314: LD_INT 1
72316: NEG
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: LIST
72326: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72327: LD_ADDR_VAR 0 58
72331: PUSH
72332: LD_INT 2
72334: NEG
72335: PUSH
72336: LD_INT 3
72338: NEG
72339: PUSH
72340: EMPTY
72341: LIST
72342: LIST
72343: PUSH
72344: LD_INT 3
72346: NEG
72347: PUSH
72348: LD_INT 2
72350: NEG
72351: PUSH
72352: EMPTY
72353: LIST
72354: LIST
72355: PUSH
72356: LD_INT 3
72358: NEG
72359: PUSH
72360: LD_INT 3
72362: NEG
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: EMPTY
72369: LIST
72370: LIST
72371: LIST
72372: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
72373: LD_ADDR_VAR 0 59
72377: PUSH
72378: LD_INT 1
72380: NEG
72381: PUSH
72382: LD_INT 2
72384: NEG
72385: PUSH
72386: EMPTY
72387: LIST
72388: LIST
72389: PUSH
72390: LD_INT 0
72392: PUSH
72393: LD_INT 2
72395: NEG
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: PUSH
72401: LD_INT 1
72403: PUSH
72404: LD_INT 1
72406: NEG
72407: PUSH
72408: EMPTY
72409: LIST
72410: LIST
72411: PUSH
72412: EMPTY
72413: LIST
72414: LIST
72415: LIST
72416: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
72417: LD_ADDR_VAR 0 60
72421: PUSH
72422: LD_INT 1
72424: PUSH
72425: LD_INT 1
72427: NEG
72428: PUSH
72429: EMPTY
72430: LIST
72431: LIST
72432: PUSH
72433: LD_INT 2
72435: PUSH
72436: LD_INT 0
72438: PUSH
72439: EMPTY
72440: LIST
72441: LIST
72442: PUSH
72443: LD_INT 2
72445: PUSH
72446: LD_INT 1
72448: PUSH
72449: EMPTY
72450: LIST
72451: LIST
72452: PUSH
72453: EMPTY
72454: LIST
72455: LIST
72456: LIST
72457: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
72458: LD_ADDR_VAR 0 61
72462: PUSH
72463: LD_INT 2
72465: PUSH
72466: LD_INT 1
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: PUSH
72473: LD_INT 2
72475: PUSH
72476: LD_INT 2
72478: PUSH
72479: EMPTY
72480: LIST
72481: LIST
72482: PUSH
72483: LD_INT 1
72485: PUSH
72486: LD_INT 2
72488: PUSH
72489: EMPTY
72490: LIST
72491: LIST
72492: PUSH
72493: EMPTY
72494: LIST
72495: LIST
72496: LIST
72497: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
72498: LD_ADDR_VAR 0 62
72502: PUSH
72503: LD_INT 1
72505: PUSH
72506: LD_INT 2
72508: PUSH
72509: EMPTY
72510: LIST
72511: LIST
72512: PUSH
72513: LD_INT 0
72515: PUSH
72516: LD_INT 2
72518: PUSH
72519: EMPTY
72520: LIST
72521: LIST
72522: PUSH
72523: LD_INT 1
72525: NEG
72526: PUSH
72527: LD_INT 1
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: LIST
72538: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
72539: LD_ADDR_VAR 0 63
72543: PUSH
72544: LD_INT 1
72546: NEG
72547: PUSH
72548: LD_INT 1
72550: PUSH
72551: EMPTY
72552: LIST
72553: LIST
72554: PUSH
72555: LD_INT 2
72557: NEG
72558: PUSH
72559: LD_INT 0
72561: PUSH
72562: EMPTY
72563: LIST
72564: LIST
72565: PUSH
72566: LD_INT 2
72568: NEG
72569: PUSH
72570: LD_INT 1
72572: NEG
72573: PUSH
72574: EMPTY
72575: LIST
72576: LIST
72577: PUSH
72578: EMPTY
72579: LIST
72580: LIST
72581: LIST
72582: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72583: LD_ADDR_VAR 0 64
72587: PUSH
72588: LD_INT 1
72590: NEG
72591: PUSH
72592: LD_INT 2
72594: NEG
72595: PUSH
72596: EMPTY
72597: LIST
72598: LIST
72599: PUSH
72600: LD_INT 2
72602: NEG
72603: PUSH
72604: LD_INT 1
72606: NEG
72607: PUSH
72608: EMPTY
72609: LIST
72610: LIST
72611: PUSH
72612: LD_INT 2
72614: NEG
72615: PUSH
72616: LD_INT 2
72618: NEG
72619: PUSH
72620: EMPTY
72621: LIST
72622: LIST
72623: PUSH
72624: EMPTY
72625: LIST
72626: LIST
72627: LIST
72628: ST_TO_ADDR
// end ; 2 :
72629: GO 75895
72631: LD_INT 2
72633: DOUBLE
72634: EQUAL
72635: IFTRUE 72639
72637: GO 75894
72639: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
72640: LD_ADDR_VAR 0 29
72644: PUSH
72645: LD_INT 4
72647: PUSH
72648: LD_INT 0
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: PUSH
72655: LD_INT 4
72657: PUSH
72658: LD_INT 1
72660: NEG
72661: PUSH
72662: EMPTY
72663: LIST
72664: LIST
72665: PUSH
72666: LD_INT 5
72668: PUSH
72669: LD_INT 0
72671: PUSH
72672: EMPTY
72673: LIST
72674: LIST
72675: PUSH
72676: LD_INT 5
72678: PUSH
72679: LD_INT 1
72681: PUSH
72682: EMPTY
72683: LIST
72684: LIST
72685: PUSH
72686: LD_INT 4
72688: PUSH
72689: LD_INT 1
72691: PUSH
72692: EMPTY
72693: LIST
72694: LIST
72695: PUSH
72696: LD_INT 3
72698: PUSH
72699: LD_INT 0
72701: PUSH
72702: EMPTY
72703: LIST
72704: LIST
72705: PUSH
72706: LD_INT 3
72708: PUSH
72709: LD_INT 1
72711: NEG
72712: PUSH
72713: EMPTY
72714: LIST
72715: LIST
72716: PUSH
72717: LD_INT 3
72719: PUSH
72720: LD_INT 2
72722: NEG
72723: PUSH
72724: EMPTY
72725: LIST
72726: LIST
72727: PUSH
72728: LD_INT 5
72730: PUSH
72731: LD_INT 2
72733: PUSH
72734: EMPTY
72735: LIST
72736: LIST
72737: PUSH
72738: LD_INT 3
72740: PUSH
72741: LD_INT 3
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: PUSH
72748: LD_INT 3
72750: PUSH
72751: LD_INT 2
72753: PUSH
72754: EMPTY
72755: LIST
72756: LIST
72757: PUSH
72758: LD_INT 4
72760: PUSH
72761: LD_INT 3
72763: PUSH
72764: EMPTY
72765: LIST
72766: LIST
72767: PUSH
72768: LD_INT 4
72770: PUSH
72771: LD_INT 4
72773: PUSH
72774: EMPTY
72775: LIST
72776: LIST
72777: PUSH
72778: LD_INT 3
72780: PUSH
72781: LD_INT 4
72783: PUSH
72784: EMPTY
72785: LIST
72786: LIST
72787: PUSH
72788: LD_INT 2
72790: PUSH
72791: LD_INT 3
72793: PUSH
72794: EMPTY
72795: LIST
72796: LIST
72797: PUSH
72798: LD_INT 2
72800: PUSH
72801: LD_INT 2
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: PUSH
72808: LD_INT 4
72810: PUSH
72811: LD_INT 2
72813: PUSH
72814: EMPTY
72815: LIST
72816: LIST
72817: PUSH
72818: LD_INT 2
72820: PUSH
72821: LD_INT 4
72823: PUSH
72824: EMPTY
72825: LIST
72826: LIST
72827: PUSH
72828: LD_INT 0
72830: PUSH
72831: LD_INT 4
72833: PUSH
72834: EMPTY
72835: LIST
72836: LIST
72837: PUSH
72838: LD_INT 0
72840: PUSH
72841: LD_INT 3
72843: PUSH
72844: EMPTY
72845: LIST
72846: LIST
72847: PUSH
72848: LD_INT 1
72850: PUSH
72851: LD_INT 4
72853: PUSH
72854: EMPTY
72855: LIST
72856: LIST
72857: PUSH
72858: LD_INT 1
72860: PUSH
72861: LD_INT 5
72863: PUSH
72864: EMPTY
72865: LIST
72866: LIST
72867: PUSH
72868: LD_INT 0
72870: PUSH
72871: LD_INT 5
72873: PUSH
72874: EMPTY
72875: LIST
72876: LIST
72877: PUSH
72878: LD_INT 1
72880: NEG
72881: PUSH
72882: LD_INT 4
72884: PUSH
72885: EMPTY
72886: LIST
72887: LIST
72888: PUSH
72889: LD_INT 1
72891: NEG
72892: PUSH
72893: LD_INT 3
72895: PUSH
72896: EMPTY
72897: LIST
72898: LIST
72899: PUSH
72900: LD_INT 2
72902: PUSH
72903: LD_INT 5
72905: PUSH
72906: EMPTY
72907: LIST
72908: LIST
72909: PUSH
72910: LD_INT 2
72912: NEG
72913: PUSH
72914: LD_INT 3
72916: PUSH
72917: EMPTY
72918: LIST
72919: LIST
72920: PUSH
72921: LD_INT 3
72923: NEG
72924: PUSH
72925: LD_INT 0
72927: PUSH
72928: EMPTY
72929: LIST
72930: LIST
72931: PUSH
72932: LD_INT 3
72934: NEG
72935: PUSH
72936: LD_INT 1
72938: NEG
72939: PUSH
72940: EMPTY
72941: LIST
72942: LIST
72943: PUSH
72944: LD_INT 2
72946: NEG
72947: PUSH
72948: LD_INT 0
72950: PUSH
72951: EMPTY
72952: LIST
72953: LIST
72954: PUSH
72955: LD_INT 2
72957: NEG
72958: PUSH
72959: LD_INT 1
72961: PUSH
72962: EMPTY
72963: LIST
72964: LIST
72965: PUSH
72966: LD_INT 3
72968: NEG
72969: PUSH
72970: LD_INT 1
72972: PUSH
72973: EMPTY
72974: LIST
72975: LIST
72976: PUSH
72977: LD_INT 4
72979: NEG
72980: PUSH
72981: LD_INT 0
72983: PUSH
72984: EMPTY
72985: LIST
72986: LIST
72987: PUSH
72988: LD_INT 4
72990: NEG
72991: PUSH
72992: LD_INT 1
72994: NEG
72995: PUSH
72996: EMPTY
72997: LIST
72998: LIST
72999: PUSH
73000: LD_INT 4
73002: NEG
73003: PUSH
73004: LD_INT 2
73006: NEG
73007: PUSH
73008: EMPTY
73009: LIST
73010: LIST
73011: PUSH
73012: LD_INT 2
73014: NEG
73015: PUSH
73016: LD_INT 2
73018: PUSH
73019: EMPTY
73020: LIST
73021: LIST
73022: PUSH
73023: LD_INT 4
73025: NEG
73026: PUSH
73027: LD_INT 4
73029: NEG
73030: PUSH
73031: EMPTY
73032: LIST
73033: LIST
73034: PUSH
73035: LD_INT 4
73037: NEG
73038: PUSH
73039: LD_INT 5
73041: NEG
73042: PUSH
73043: EMPTY
73044: LIST
73045: LIST
73046: PUSH
73047: LD_INT 3
73049: NEG
73050: PUSH
73051: LD_INT 4
73053: NEG
73054: PUSH
73055: EMPTY
73056: LIST
73057: LIST
73058: PUSH
73059: LD_INT 3
73061: NEG
73062: PUSH
73063: LD_INT 3
73065: NEG
73066: PUSH
73067: EMPTY
73068: LIST
73069: LIST
73070: PUSH
73071: LD_INT 4
73073: NEG
73074: PUSH
73075: LD_INT 3
73077: NEG
73078: PUSH
73079: EMPTY
73080: LIST
73081: LIST
73082: PUSH
73083: LD_INT 5
73085: NEG
73086: PUSH
73087: LD_INT 4
73089: NEG
73090: PUSH
73091: EMPTY
73092: LIST
73093: LIST
73094: PUSH
73095: LD_INT 5
73097: NEG
73098: PUSH
73099: LD_INT 5
73101: NEG
73102: PUSH
73103: EMPTY
73104: LIST
73105: LIST
73106: PUSH
73107: LD_INT 3
73109: NEG
73110: PUSH
73111: LD_INT 5
73113: NEG
73114: PUSH
73115: EMPTY
73116: LIST
73117: LIST
73118: PUSH
73119: LD_INT 5
73121: NEG
73122: PUSH
73123: LD_INT 3
73125: NEG
73126: PUSH
73127: EMPTY
73128: LIST
73129: LIST
73130: PUSH
73131: EMPTY
73132: LIST
73133: LIST
73134: LIST
73135: LIST
73136: LIST
73137: LIST
73138: LIST
73139: LIST
73140: LIST
73141: LIST
73142: LIST
73143: LIST
73144: LIST
73145: LIST
73146: LIST
73147: LIST
73148: LIST
73149: LIST
73150: LIST
73151: LIST
73152: LIST
73153: LIST
73154: LIST
73155: LIST
73156: LIST
73157: LIST
73158: LIST
73159: LIST
73160: LIST
73161: LIST
73162: LIST
73163: LIST
73164: LIST
73165: LIST
73166: LIST
73167: LIST
73168: LIST
73169: LIST
73170: LIST
73171: LIST
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
73178: LD_ADDR_VAR 0 30
73182: PUSH
73183: LD_INT 4
73185: PUSH
73186: LD_INT 4
73188: PUSH
73189: EMPTY
73190: LIST
73191: LIST
73192: PUSH
73193: LD_INT 4
73195: PUSH
73196: LD_INT 3
73198: PUSH
73199: EMPTY
73200: LIST
73201: LIST
73202: PUSH
73203: LD_INT 5
73205: PUSH
73206: LD_INT 4
73208: PUSH
73209: EMPTY
73210: LIST
73211: LIST
73212: PUSH
73213: LD_INT 5
73215: PUSH
73216: LD_INT 5
73218: PUSH
73219: EMPTY
73220: LIST
73221: LIST
73222: PUSH
73223: LD_INT 4
73225: PUSH
73226: LD_INT 5
73228: PUSH
73229: EMPTY
73230: LIST
73231: LIST
73232: PUSH
73233: LD_INT 3
73235: PUSH
73236: LD_INT 4
73238: PUSH
73239: EMPTY
73240: LIST
73241: LIST
73242: PUSH
73243: LD_INT 3
73245: PUSH
73246: LD_INT 3
73248: PUSH
73249: EMPTY
73250: LIST
73251: LIST
73252: PUSH
73253: LD_INT 5
73255: PUSH
73256: LD_INT 3
73258: PUSH
73259: EMPTY
73260: LIST
73261: LIST
73262: PUSH
73263: LD_INT 3
73265: PUSH
73266: LD_INT 5
73268: PUSH
73269: EMPTY
73270: LIST
73271: LIST
73272: PUSH
73273: LD_INT 0
73275: PUSH
73276: LD_INT 3
73278: PUSH
73279: EMPTY
73280: LIST
73281: LIST
73282: PUSH
73283: LD_INT 0
73285: PUSH
73286: LD_INT 2
73288: PUSH
73289: EMPTY
73290: LIST
73291: LIST
73292: PUSH
73293: LD_INT 1
73295: PUSH
73296: LD_INT 3
73298: PUSH
73299: EMPTY
73300: LIST
73301: LIST
73302: PUSH
73303: LD_INT 1
73305: PUSH
73306: LD_INT 4
73308: PUSH
73309: EMPTY
73310: LIST
73311: LIST
73312: PUSH
73313: LD_INT 0
73315: PUSH
73316: LD_INT 4
73318: PUSH
73319: EMPTY
73320: LIST
73321: LIST
73322: PUSH
73323: LD_INT 1
73325: NEG
73326: PUSH
73327: LD_INT 3
73329: PUSH
73330: EMPTY
73331: LIST
73332: LIST
73333: PUSH
73334: LD_INT 1
73336: NEG
73337: PUSH
73338: LD_INT 2
73340: PUSH
73341: EMPTY
73342: LIST
73343: LIST
73344: PUSH
73345: LD_INT 2
73347: PUSH
73348: LD_INT 4
73350: PUSH
73351: EMPTY
73352: LIST
73353: LIST
73354: PUSH
73355: LD_INT 2
73357: NEG
73358: PUSH
73359: LD_INT 2
73361: PUSH
73362: EMPTY
73363: LIST
73364: LIST
73365: PUSH
73366: LD_INT 4
73368: NEG
73369: PUSH
73370: LD_INT 0
73372: PUSH
73373: EMPTY
73374: LIST
73375: LIST
73376: PUSH
73377: LD_INT 4
73379: NEG
73380: PUSH
73381: LD_INT 1
73383: NEG
73384: PUSH
73385: EMPTY
73386: LIST
73387: LIST
73388: PUSH
73389: LD_INT 3
73391: NEG
73392: PUSH
73393: LD_INT 0
73395: PUSH
73396: EMPTY
73397: LIST
73398: LIST
73399: PUSH
73400: LD_INT 3
73402: NEG
73403: PUSH
73404: LD_INT 1
73406: PUSH
73407: EMPTY
73408: LIST
73409: LIST
73410: PUSH
73411: LD_INT 4
73413: NEG
73414: PUSH
73415: LD_INT 1
73417: PUSH
73418: EMPTY
73419: LIST
73420: LIST
73421: PUSH
73422: LD_INT 5
73424: NEG
73425: PUSH
73426: LD_INT 0
73428: PUSH
73429: EMPTY
73430: LIST
73431: LIST
73432: PUSH
73433: LD_INT 5
73435: NEG
73436: PUSH
73437: LD_INT 1
73439: NEG
73440: PUSH
73441: EMPTY
73442: LIST
73443: LIST
73444: PUSH
73445: LD_INT 5
73447: NEG
73448: PUSH
73449: LD_INT 2
73451: NEG
73452: PUSH
73453: EMPTY
73454: LIST
73455: LIST
73456: PUSH
73457: LD_INT 3
73459: NEG
73460: PUSH
73461: LD_INT 2
73463: PUSH
73464: EMPTY
73465: LIST
73466: LIST
73467: PUSH
73468: LD_INT 3
73470: NEG
73471: PUSH
73472: LD_INT 3
73474: NEG
73475: PUSH
73476: EMPTY
73477: LIST
73478: LIST
73479: PUSH
73480: LD_INT 3
73482: NEG
73483: PUSH
73484: LD_INT 4
73486: NEG
73487: PUSH
73488: EMPTY
73489: LIST
73490: LIST
73491: PUSH
73492: LD_INT 2
73494: NEG
73495: PUSH
73496: LD_INT 3
73498: NEG
73499: PUSH
73500: EMPTY
73501: LIST
73502: LIST
73503: PUSH
73504: LD_INT 2
73506: NEG
73507: PUSH
73508: LD_INT 2
73510: NEG
73511: PUSH
73512: EMPTY
73513: LIST
73514: LIST
73515: PUSH
73516: LD_INT 3
73518: NEG
73519: PUSH
73520: LD_INT 2
73522: NEG
73523: PUSH
73524: EMPTY
73525: LIST
73526: LIST
73527: PUSH
73528: LD_INT 4
73530: NEG
73531: PUSH
73532: LD_INT 3
73534: NEG
73535: PUSH
73536: EMPTY
73537: LIST
73538: LIST
73539: PUSH
73540: LD_INT 4
73542: NEG
73543: PUSH
73544: LD_INT 4
73546: NEG
73547: PUSH
73548: EMPTY
73549: LIST
73550: LIST
73551: PUSH
73552: LD_INT 2
73554: NEG
73555: PUSH
73556: LD_INT 4
73558: NEG
73559: PUSH
73560: EMPTY
73561: LIST
73562: LIST
73563: PUSH
73564: LD_INT 4
73566: NEG
73567: PUSH
73568: LD_INT 2
73570: NEG
73571: PUSH
73572: EMPTY
73573: LIST
73574: LIST
73575: PUSH
73576: LD_INT 0
73578: PUSH
73579: LD_INT 4
73581: NEG
73582: PUSH
73583: EMPTY
73584: LIST
73585: LIST
73586: PUSH
73587: LD_INT 0
73589: PUSH
73590: LD_INT 5
73592: NEG
73593: PUSH
73594: EMPTY
73595: LIST
73596: LIST
73597: PUSH
73598: LD_INT 1
73600: PUSH
73601: LD_INT 4
73603: NEG
73604: PUSH
73605: EMPTY
73606: LIST
73607: LIST
73608: PUSH
73609: LD_INT 1
73611: PUSH
73612: LD_INT 3
73614: NEG
73615: PUSH
73616: EMPTY
73617: LIST
73618: LIST
73619: PUSH
73620: LD_INT 0
73622: PUSH
73623: LD_INT 3
73625: NEG
73626: PUSH
73627: EMPTY
73628: LIST
73629: LIST
73630: PUSH
73631: LD_INT 1
73633: NEG
73634: PUSH
73635: LD_INT 4
73637: NEG
73638: PUSH
73639: EMPTY
73640: LIST
73641: LIST
73642: PUSH
73643: LD_INT 1
73645: NEG
73646: PUSH
73647: LD_INT 5
73649: NEG
73650: PUSH
73651: EMPTY
73652: LIST
73653: LIST
73654: PUSH
73655: LD_INT 2
73657: PUSH
73658: LD_INT 3
73660: NEG
73661: PUSH
73662: EMPTY
73663: LIST
73664: LIST
73665: PUSH
73666: LD_INT 2
73668: NEG
73669: PUSH
73670: LD_INT 5
73672: NEG
73673: PUSH
73674: EMPTY
73675: LIST
73676: LIST
73677: PUSH
73678: EMPTY
73679: LIST
73680: LIST
73681: LIST
73682: LIST
73683: LIST
73684: LIST
73685: LIST
73686: LIST
73687: LIST
73688: LIST
73689: LIST
73690: LIST
73691: LIST
73692: LIST
73693: LIST
73694: LIST
73695: LIST
73696: LIST
73697: LIST
73698: LIST
73699: LIST
73700: LIST
73701: LIST
73702: LIST
73703: LIST
73704: LIST
73705: LIST
73706: LIST
73707: LIST
73708: LIST
73709: LIST
73710: LIST
73711: LIST
73712: LIST
73713: LIST
73714: LIST
73715: LIST
73716: LIST
73717: LIST
73718: LIST
73719: LIST
73720: LIST
73721: LIST
73722: LIST
73723: LIST
73724: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
73725: LD_ADDR_VAR 0 31
73729: PUSH
73730: LD_INT 0
73732: PUSH
73733: LD_INT 4
73735: PUSH
73736: EMPTY
73737: LIST
73738: LIST
73739: PUSH
73740: LD_INT 0
73742: PUSH
73743: LD_INT 3
73745: PUSH
73746: EMPTY
73747: LIST
73748: LIST
73749: PUSH
73750: LD_INT 1
73752: PUSH
73753: LD_INT 4
73755: PUSH
73756: EMPTY
73757: LIST
73758: LIST
73759: PUSH
73760: LD_INT 1
73762: PUSH
73763: LD_INT 5
73765: PUSH
73766: EMPTY
73767: LIST
73768: LIST
73769: PUSH
73770: LD_INT 0
73772: PUSH
73773: LD_INT 5
73775: PUSH
73776: EMPTY
73777: LIST
73778: LIST
73779: PUSH
73780: LD_INT 1
73782: NEG
73783: PUSH
73784: LD_INT 4
73786: PUSH
73787: EMPTY
73788: LIST
73789: LIST
73790: PUSH
73791: LD_INT 1
73793: NEG
73794: PUSH
73795: LD_INT 3
73797: PUSH
73798: EMPTY
73799: LIST
73800: LIST
73801: PUSH
73802: LD_INT 2
73804: PUSH
73805: LD_INT 5
73807: PUSH
73808: EMPTY
73809: LIST
73810: LIST
73811: PUSH
73812: LD_INT 2
73814: NEG
73815: PUSH
73816: LD_INT 3
73818: PUSH
73819: EMPTY
73820: LIST
73821: LIST
73822: PUSH
73823: LD_INT 3
73825: NEG
73826: PUSH
73827: LD_INT 0
73829: PUSH
73830: EMPTY
73831: LIST
73832: LIST
73833: PUSH
73834: LD_INT 3
73836: NEG
73837: PUSH
73838: LD_INT 1
73840: NEG
73841: PUSH
73842: EMPTY
73843: LIST
73844: LIST
73845: PUSH
73846: LD_INT 2
73848: NEG
73849: PUSH
73850: LD_INT 0
73852: PUSH
73853: EMPTY
73854: LIST
73855: LIST
73856: PUSH
73857: LD_INT 2
73859: NEG
73860: PUSH
73861: LD_INT 1
73863: PUSH
73864: EMPTY
73865: LIST
73866: LIST
73867: PUSH
73868: LD_INT 3
73870: NEG
73871: PUSH
73872: LD_INT 1
73874: PUSH
73875: EMPTY
73876: LIST
73877: LIST
73878: PUSH
73879: LD_INT 4
73881: NEG
73882: PUSH
73883: LD_INT 0
73885: PUSH
73886: EMPTY
73887: LIST
73888: LIST
73889: PUSH
73890: LD_INT 4
73892: NEG
73893: PUSH
73894: LD_INT 1
73896: NEG
73897: PUSH
73898: EMPTY
73899: LIST
73900: LIST
73901: PUSH
73902: LD_INT 4
73904: NEG
73905: PUSH
73906: LD_INT 2
73908: NEG
73909: PUSH
73910: EMPTY
73911: LIST
73912: LIST
73913: PUSH
73914: LD_INT 2
73916: NEG
73917: PUSH
73918: LD_INT 2
73920: PUSH
73921: EMPTY
73922: LIST
73923: LIST
73924: PUSH
73925: LD_INT 4
73927: NEG
73928: PUSH
73929: LD_INT 4
73931: NEG
73932: PUSH
73933: EMPTY
73934: LIST
73935: LIST
73936: PUSH
73937: LD_INT 4
73939: NEG
73940: PUSH
73941: LD_INT 5
73943: NEG
73944: PUSH
73945: EMPTY
73946: LIST
73947: LIST
73948: PUSH
73949: LD_INT 3
73951: NEG
73952: PUSH
73953: LD_INT 4
73955: NEG
73956: PUSH
73957: EMPTY
73958: LIST
73959: LIST
73960: PUSH
73961: LD_INT 3
73963: NEG
73964: PUSH
73965: LD_INT 3
73967: NEG
73968: PUSH
73969: EMPTY
73970: LIST
73971: LIST
73972: PUSH
73973: LD_INT 4
73975: NEG
73976: PUSH
73977: LD_INT 3
73979: NEG
73980: PUSH
73981: EMPTY
73982: LIST
73983: LIST
73984: PUSH
73985: LD_INT 5
73987: NEG
73988: PUSH
73989: LD_INT 4
73991: NEG
73992: PUSH
73993: EMPTY
73994: LIST
73995: LIST
73996: PUSH
73997: LD_INT 5
73999: NEG
74000: PUSH
74001: LD_INT 5
74003: NEG
74004: PUSH
74005: EMPTY
74006: LIST
74007: LIST
74008: PUSH
74009: LD_INT 3
74011: NEG
74012: PUSH
74013: LD_INT 5
74015: NEG
74016: PUSH
74017: EMPTY
74018: LIST
74019: LIST
74020: PUSH
74021: LD_INT 5
74023: NEG
74024: PUSH
74025: LD_INT 3
74027: NEG
74028: PUSH
74029: EMPTY
74030: LIST
74031: LIST
74032: PUSH
74033: LD_INT 0
74035: PUSH
74036: LD_INT 3
74038: NEG
74039: PUSH
74040: EMPTY
74041: LIST
74042: LIST
74043: PUSH
74044: LD_INT 0
74046: PUSH
74047: LD_INT 4
74049: NEG
74050: PUSH
74051: EMPTY
74052: LIST
74053: LIST
74054: PUSH
74055: LD_INT 1
74057: PUSH
74058: LD_INT 3
74060: NEG
74061: PUSH
74062: EMPTY
74063: LIST
74064: LIST
74065: PUSH
74066: LD_INT 1
74068: PUSH
74069: LD_INT 2
74071: NEG
74072: PUSH
74073: EMPTY
74074: LIST
74075: LIST
74076: PUSH
74077: LD_INT 0
74079: PUSH
74080: LD_INT 2
74082: NEG
74083: PUSH
74084: EMPTY
74085: LIST
74086: LIST
74087: PUSH
74088: LD_INT 1
74090: NEG
74091: PUSH
74092: LD_INT 3
74094: NEG
74095: PUSH
74096: EMPTY
74097: LIST
74098: LIST
74099: PUSH
74100: LD_INT 1
74102: NEG
74103: PUSH
74104: LD_INT 4
74106: NEG
74107: PUSH
74108: EMPTY
74109: LIST
74110: LIST
74111: PUSH
74112: LD_INT 2
74114: PUSH
74115: LD_INT 2
74117: NEG
74118: PUSH
74119: EMPTY
74120: LIST
74121: LIST
74122: PUSH
74123: LD_INT 2
74125: NEG
74126: PUSH
74127: LD_INT 4
74129: NEG
74130: PUSH
74131: EMPTY
74132: LIST
74133: LIST
74134: PUSH
74135: LD_INT 4
74137: PUSH
74138: LD_INT 0
74140: PUSH
74141: EMPTY
74142: LIST
74143: LIST
74144: PUSH
74145: LD_INT 4
74147: PUSH
74148: LD_INT 1
74150: NEG
74151: PUSH
74152: EMPTY
74153: LIST
74154: LIST
74155: PUSH
74156: LD_INT 5
74158: PUSH
74159: LD_INT 0
74161: PUSH
74162: EMPTY
74163: LIST
74164: LIST
74165: PUSH
74166: LD_INT 5
74168: PUSH
74169: LD_INT 1
74171: PUSH
74172: EMPTY
74173: LIST
74174: LIST
74175: PUSH
74176: LD_INT 4
74178: PUSH
74179: LD_INT 1
74181: PUSH
74182: EMPTY
74183: LIST
74184: LIST
74185: PUSH
74186: LD_INT 3
74188: PUSH
74189: LD_INT 0
74191: PUSH
74192: EMPTY
74193: LIST
74194: LIST
74195: PUSH
74196: LD_INT 3
74198: PUSH
74199: LD_INT 1
74201: NEG
74202: PUSH
74203: EMPTY
74204: LIST
74205: LIST
74206: PUSH
74207: LD_INT 3
74209: PUSH
74210: LD_INT 2
74212: NEG
74213: PUSH
74214: EMPTY
74215: LIST
74216: LIST
74217: PUSH
74218: LD_INT 5
74220: PUSH
74221: LD_INT 2
74223: PUSH
74224: EMPTY
74225: LIST
74226: LIST
74227: PUSH
74228: EMPTY
74229: LIST
74230: LIST
74231: LIST
74232: LIST
74233: LIST
74234: LIST
74235: LIST
74236: LIST
74237: LIST
74238: LIST
74239: LIST
74240: LIST
74241: LIST
74242: LIST
74243: LIST
74244: LIST
74245: LIST
74246: LIST
74247: LIST
74248: LIST
74249: LIST
74250: LIST
74251: LIST
74252: LIST
74253: LIST
74254: LIST
74255: LIST
74256: LIST
74257: LIST
74258: LIST
74259: LIST
74260: LIST
74261: LIST
74262: LIST
74263: LIST
74264: LIST
74265: LIST
74266: LIST
74267: LIST
74268: LIST
74269: LIST
74270: LIST
74271: LIST
74272: LIST
74273: LIST
74274: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
74275: LD_ADDR_VAR 0 32
74279: PUSH
74280: LD_INT 4
74282: NEG
74283: PUSH
74284: LD_INT 0
74286: PUSH
74287: EMPTY
74288: LIST
74289: LIST
74290: PUSH
74291: LD_INT 4
74293: NEG
74294: PUSH
74295: LD_INT 1
74297: NEG
74298: PUSH
74299: EMPTY
74300: LIST
74301: LIST
74302: PUSH
74303: LD_INT 3
74305: NEG
74306: PUSH
74307: LD_INT 0
74309: PUSH
74310: EMPTY
74311: LIST
74312: LIST
74313: PUSH
74314: LD_INT 3
74316: NEG
74317: PUSH
74318: LD_INT 1
74320: PUSH
74321: EMPTY
74322: LIST
74323: LIST
74324: PUSH
74325: LD_INT 4
74327: NEG
74328: PUSH
74329: LD_INT 1
74331: PUSH
74332: EMPTY
74333: LIST
74334: LIST
74335: PUSH
74336: LD_INT 5
74338: NEG
74339: PUSH
74340: LD_INT 0
74342: PUSH
74343: EMPTY
74344: LIST
74345: LIST
74346: PUSH
74347: LD_INT 5
74349: NEG
74350: PUSH
74351: LD_INT 1
74353: NEG
74354: PUSH
74355: EMPTY
74356: LIST
74357: LIST
74358: PUSH
74359: LD_INT 5
74361: NEG
74362: PUSH
74363: LD_INT 2
74365: NEG
74366: PUSH
74367: EMPTY
74368: LIST
74369: LIST
74370: PUSH
74371: LD_INT 3
74373: NEG
74374: PUSH
74375: LD_INT 2
74377: PUSH
74378: EMPTY
74379: LIST
74380: LIST
74381: PUSH
74382: LD_INT 3
74384: NEG
74385: PUSH
74386: LD_INT 3
74388: NEG
74389: PUSH
74390: EMPTY
74391: LIST
74392: LIST
74393: PUSH
74394: LD_INT 3
74396: NEG
74397: PUSH
74398: LD_INT 4
74400: NEG
74401: PUSH
74402: EMPTY
74403: LIST
74404: LIST
74405: PUSH
74406: LD_INT 2
74408: NEG
74409: PUSH
74410: LD_INT 3
74412: NEG
74413: PUSH
74414: EMPTY
74415: LIST
74416: LIST
74417: PUSH
74418: LD_INT 2
74420: NEG
74421: PUSH
74422: LD_INT 2
74424: NEG
74425: PUSH
74426: EMPTY
74427: LIST
74428: LIST
74429: PUSH
74430: LD_INT 3
74432: NEG
74433: PUSH
74434: LD_INT 2
74436: NEG
74437: PUSH
74438: EMPTY
74439: LIST
74440: LIST
74441: PUSH
74442: LD_INT 4
74444: NEG
74445: PUSH
74446: LD_INT 3
74448: NEG
74449: PUSH
74450: EMPTY
74451: LIST
74452: LIST
74453: PUSH
74454: LD_INT 4
74456: NEG
74457: PUSH
74458: LD_INT 4
74460: NEG
74461: PUSH
74462: EMPTY
74463: LIST
74464: LIST
74465: PUSH
74466: LD_INT 2
74468: NEG
74469: PUSH
74470: LD_INT 4
74472: NEG
74473: PUSH
74474: EMPTY
74475: LIST
74476: LIST
74477: PUSH
74478: LD_INT 4
74480: NEG
74481: PUSH
74482: LD_INT 2
74484: NEG
74485: PUSH
74486: EMPTY
74487: LIST
74488: LIST
74489: PUSH
74490: LD_INT 0
74492: PUSH
74493: LD_INT 4
74495: NEG
74496: PUSH
74497: EMPTY
74498: LIST
74499: LIST
74500: PUSH
74501: LD_INT 0
74503: PUSH
74504: LD_INT 5
74506: NEG
74507: PUSH
74508: EMPTY
74509: LIST
74510: LIST
74511: PUSH
74512: LD_INT 1
74514: PUSH
74515: LD_INT 4
74517: NEG
74518: PUSH
74519: EMPTY
74520: LIST
74521: LIST
74522: PUSH
74523: LD_INT 1
74525: PUSH
74526: LD_INT 3
74528: NEG
74529: PUSH
74530: EMPTY
74531: LIST
74532: LIST
74533: PUSH
74534: LD_INT 0
74536: PUSH
74537: LD_INT 3
74539: NEG
74540: PUSH
74541: EMPTY
74542: LIST
74543: LIST
74544: PUSH
74545: LD_INT 1
74547: NEG
74548: PUSH
74549: LD_INT 4
74551: NEG
74552: PUSH
74553: EMPTY
74554: LIST
74555: LIST
74556: PUSH
74557: LD_INT 1
74559: NEG
74560: PUSH
74561: LD_INT 5
74563: NEG
74564: PUSH
74565: EMPTY
74566: LIST
74567: LIST
74568: PUSH
74569: LD_INT 2
74571: PUSH
74572: LD_INT 3
74574: NEG
74575: PUSH
74576: EMPTY
74577: LIST
74578: LIST
74579: PUSH
74580: LD_INT 2
74582: NEG
74583: PUSH
74584: LD_INT 5
74586: NEG
74587: PUSH
74588: EMPTY
74589: LIST
74590: LIST
74591: PUSH
74592: LD_INT 3
74594: PUSH
74595: LD_INT 0
74597: PUSH
74598: EMPTY
74599: LIST
74600: LIST
74601: PUSH
74602: LD_INT 3
74604: PUSH
74605: LD_INT 1
74607: NEG
74608: PUSH
74609: EMPTY
74610: LIST
74611: LIST
74612: PUSH
74613: LD_INT 4
74615: PUSH
74616: LD_INT 0
74618: PUSH
74619: EMPTY
74620: LIST
74621: LIST
74622: PUSH
74623: LD_INT 4
74625: PUSH
74626: LD_INT 1
74628: PUSH
74629: EMPTY
74630: LIST
74631: LIST
74632: PUSH
74633: LD_INT 3
74635: PUSH
74636: LD_INT 1
74638: PUSH
74639: EMPTY
74640: LIST
74641: LIST
74642: PUSH
74643: LD_INT 2
74645: PUSH
74646: LD_INT 0
74648: PUSH
74649: EMPTY
74650: LIST
74651: LIST
74652: PUSH
74653: LD_INT 2
74655: PUSH
74656: LD_INT 1
74658: NEG
74659: PUSH
74660: EMPTY
74661: LIST
74662: LIST
74663: PUSH
74664: LD_INT 2
74666: PUSH
74667: LD_INT 2
74669: NEG
74670: PUSH
74671: EMPTY
74672: LIST
74673: LIST
74674: PUSH
74675: LD_INT 4
74677: PUSH
74678: LD_INT 2
74680: PUSH
74681: EMPTY
74682: LIST
74683: LIST
74684: PUSH
74685: LD_INT 4
74687: PUSH
74688: LD_INT 4
74690: PUSH
74691: EMPTY
74692: LIST
74693: LIST
74694: PUSH
74695: LD_INT 4
74697: PUSH
74698: LD_INT 3
74700: PUSH
74701: EMPTY
74702: LIST
74703: LIST
74704: PUSH
74705: LD_INT 5
74707: PUSH
74708: LD_INT 4
74710: PUSH
74711: EMPTY
74712: LIST
74713: LIST
74714: PUSH
74715: LD_INT 5
74717: PUSH
74718: LD_INT 5
74720: PUSH
74721: EMPTY
74722: LIST
74723: LIST
74724: PUSH
74725: LD_INT 4
74727: PUSH
74728: LD_INT 5
74730: PUSH
74731: EMPTY
74732: LIST
74733: LIST
74734: PUSH
74735: LD_INT 3
74737: PUSH
74738: LD_INT 4
74740: PUSH
74741: EMPTY
74742: LIST
74743: LIST
74744: PUSH
74745: LD_INT 3
74747: PUSH
74748: LD_INT 3
74750: PUSH
74751: EMPTY
74752: LIST
74753: LIST
74754: PUSH
74755: LD_INT 5
74757: PUSH
74758: LD_INT 3
74760: PUSH
74761: EMPTY
74762: LIST
74763: LIST
74764: PUSH
74765: LD_INT 3
74767: PUSH
74768: LD_INT 5
74770: PUSH
74771: EMPTY
74772: LIST
74773: LIST
74774: PUSH
74775: EMPTY
74776: LIST
74777: LIST
74778: LIST
74779: LIST
74780: LIST
74781: LIST
74782: LIST
74783: LIST
74784: LIST
74785: LIST
74786: LIST
74787: LIST
74788: LIST
74789: LIST
74790: LIST
74791: LIST
74792: LIST
74793: LIST
74794: LIST
74795: LIST
74796: LIST
74797: LIST
74798: LIST
74799: LIST
74800: LIST
74801: LIST
74802: LIST
74803: LIST
74804: LIST
74805: LIST
74806: LIST
74807: LIST
74808: LIST
74809: LIST
74810: LIST
74811: LIST
74812: LIST
74813: LIST
74814: LIST
74815: LIST
74816: LIST
74817: LIST
74818: LIST
74819: LIST
74820: LIST
74821: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
74822: LD_ADDR_VAR 0 33
74826: PUSH
74827: LD_INT 4
74829: NEG
74830: PUSH
74831: LD_INT 4
74833: NEG
74834: PUSH
74835: EMPTY
74836: LIST
74837: LIST
74838: PUSH
74839: LD_INT 4
74841: NEG
74842: PUSH
74843: LD_INT 5
74845: NEG
74846: PUSH
74847: EMPTY
74848: LIST
74849: LIST
74850: PUSH
74851: LD_INT 3
74853: NEG
74854: PUSH
74855: LD_INT 4
74857: NEG
74858: PUSH
74859: EMPTY
74860: LIST
74861: LIST
74862: PUSH
74863: LD_INT 3
74865: NEG
74866: PUSH
74867: LD_INT 3
74869: NEG
74870: PUSH
74871: EMPTY
74872: LIST
74873: LIST
74874: PUSH
74875: LD_INT 4
74877: NEG
74878: PUSH
74879: LD_INT 3
74881: NEG
74882: PUSH
74883: EMPTY
74884: LIST
74885: LIST
74886: PUSH
74887: LD_INT 5
74889: NEG
74890: PUSH
74891: LD_INT 4
74893: NEG
74894: PUSH
74895: EMPTY
74896: LIST
74897: LIST
74898: PUSH
74899: LD_INT 5
74901: NEG
74902: PUSH
74903: LD_INT 5
74905: NEG
74906: PUSH
74907: EMPTY
74908: LIST
74909: LIST
74910: PUSH
74911: LD_INT 3
74913: NEG
74914: PUSH
74915: LD_INT 5
74917: NEG
74918: PUSH
74919: EMPTY
74920: LIST
74921: LIST
74922: PUSH
74923: LD_INT 5
74925: NEG
74926: PUSH
74927: LD_INT 3
74929: NEG
74930: PUSH
74931: EMPTY
74932: LIST
74933: LIST
74934: PUSH
74935: LD_INT 0
74937: PUSH
74938: LD_INT 3
74940: NEG
74941: PUSH
74942: EMPTY
74943: LIST
74944: LIST
74945: PUSH
74946: LD_INT 0
74948: PUSH
74949: LD_INT 4
74951: NEG
74952: PUSH
74953: EMPTY
74954: LIST
74955: LIST
74956: PUSH
74957: LD_INT 1
74959: PUSH
74960: LD_INT 3
74962: NEG
74963: PUSH
74964: EMPTY
74965: LIST
74966: LIST
74967: PUSH
74968: LD_INT 1
74970: PUSH
74971: LD_INT 2
74973: NEG
74974: PUSH
74975: EMPTY
74976: LIST
74977: LIST
74978: PUSH
74979: LD_INT 0
74981: PUSH
74982: LD_INT 2
74984: NEG
74985: PUSH
74986: EMPTY
74987: LIST
74988: LIST
74989: PUSH
74990: LD_INT 1
74992: NEG
74993: PUSH
74994: LD_INT 3
74996: NEG
74997: PUSH
74998: EMPTY
74999: LIST
75000: LIST
75001: PUSH
75002: LD_INT 1
75004: NEG
75005: PUSH
75006: LD_INT 4
75008: NEG
75009: PUSH
75010: EMPTY
75011: LIST
75012: LIST
75013: PUSH
75014: LD_INT 2
75016: PUSH
75017: LD_INT 2
75019: NEG
75020: PUSH
75021: EMPTY
75022: LIST
75023: LIST
75024: PUSH
75025: LD_INT 2
75027: NEG
75028: PUSH
75029: LD_INT 4
75031: NEG
75032: PUSH
75033: EMPTY
75034: LIST
75035: LIST
75036: PUSH
75037: LD_INT 4
75039: PUSH
75040: LD_INT 0
75042: PUSH
75043: EMPTY
75044: LIST
75045: LIST
75046: PUSH
75047: LD_INT 4
75049: PUSH
75050: LD_INT 1
75052: NEG
75053: PUSH
75054: EMPTY
75055: LIST
75056: LIST
75057: PUSH
75058: LD_INT 5
75060: PUSH
75061: LD_INT 0
75063: PUSH
75064: EMPTY
75065: LIST
75066: LIST
75067: PUSH
75068: LD_INT 5
75070: PUSH
75071: LD_INT 1
75073: PUSH
75074: EMPTY
75075: LIST
75076: LIST
75077: PUSH
75078: LD_INT 4
75080: PUSH
75081: LD_INT 1
75083: PUSH
75084: EMPTY
75085: LIST
75086: LIST
75087: PUSH
75088: LD_INT 3
75090: PUSH
75091: LD_INT 0
75093: PUSH
75094: EMPTY
75095: LIST
75096: LIST
75097: PUSH
75098: LD_INT 3
75100: PUSH
75101: LD_INT 1
75103: NEG
75104: PUSH
75105: EMPTY
75106: LIST
75107: LIST
75108: PUSH
75109: LD_INT 3
75111: PUSH
75112: LD_INT 2
75114: NEG
75115: PUSH
75116: EMPTY
75117: LIST
75118: LIST
75119: PUSH
75120: LD_INT 5
75122: PUSH
75123: LD_INT 2
75125: PUSH
75126: EMPTY
75127: LIST
75128: LIST
75129: PUSH
75130: LD_INT 3
75132: PUSH
75133: LD_INT 3
75135: PUSH
75136: EMPTY
75137: LIST
75138: LIST
75139: PUSH
75140: LD_INT 3
75142: PUSH
75143: LD_INT 2
75145: PUSH
75146: EMPTY
75147: LIST
75148: LIST
75149: PUSH
75150: LD_INT 4
75152: PUSH
75153: LD_INT 3
75155: PUSH
75156: EMPTY
75157: LIST
75158: LIST
75159: PUSH
75160: LD_INT 4
75162: PUSH
75163: LD_INT 4
75165: PUSH
75166: EMPTY
75167: LIST
75168: LIST
75169: PUSH
75170: LD_INT 3
75172: PUSH
75173: LD_INT 4
75175: PUSH
75176: EMPTY
75177: LIST
75178: LIST
75179: PUSH
75180: LD_INT 2
75182: PUSH
75183: LD_INT 3
75185: PUSH
75186: EMPTY
75187: LIST
75188: LIST
75189: PUSH
75190: LD_INT 2
75192: PUSH
75193: LD_INT 2
75195: PUSH
75196: EMPTY
75197: LIST
75198: LIST
75199: PUSH
75200: LD_INT 4
75202: PUSH
75203: LD_INT 2
75205: PUSH
75206: EMPTY
75207: LIST
75208: LIST
75209: PUSH
75210: LD_INT 2
75212: PUSH
75213: LD_INT 4
75215: PUSH
75216: EMPTY
75217: LIST
75218: LIST
75219: PUSH
75220: LD_INT 0
75222: PUSH
75223: LD_INT 4
75225: PUSH
75226: EMPTY
75227: LIST
75228: LIST
75229: PUSH
75230: LD_INT 0
75232: PUSH
75233: LD_INT 3
75235: PUSH
75236: EMPTY
75237: LIST
75238: LIST
75239: PUSH
75240: LD_INT 1
75242: PUSH
75243: LD_INT 4
75245: PUSH
75246: EMPTY
75247: LIST
75248: LIST
75249: PUSH
75250: LD_INT 1
75252: PUSH
75253: LD_INT 5
75255: PUSH
75256: EMPTY
75257: LIST
75258: LIST
75259: PUSH
75260: LD_INT 0
75262: PUSH
75263: LD_INT 5
75265: PUSH
75266: EMPTY
75267: LIST
75268: LIST
75269: PUSH
75270: LD_INT 1
75272: NEG
75273: PUSH
75274: LD_INT 4
75276: PUSH
75277: EMPTY
75278: LIST
75279: LIST
75280: PUSH
75281: LD_INT 1
75283: NEG
75284: PUSH
75285: LD_INT 3
75287: PUSH
75288: EMPTY
75289: LIST
75290: LIST
75291: PUSH
75292: LD_INT 2
75294: PUSH
75295: LD_INT 5
75297: PUSH
75298: EMPTY
75299: LIST
75300: LIST
75301: PUSH
75302: LD_INT 2
75304: NEG
75305: PUSH
75306: LD_INT 3
75308: PUSH
75309: EMPTY
75310: LIST
75311: LIST
75312: PUSH
75313: EMPTY
75314: LIST
75315: LIST
75316: LIST
75317: LIST
75318: LIST
75319: LIST
75320: LIST
75321: LIST
75322: LIST
75323: LIST
75324: LIST
75325: LIST
75326: LIST
75327: LIST
75328: LIST
75329: LIST
75330: LIST
75331: LIST
75332: LIST
75333: LIST
75334: LIST
75335: LIST
75336: LIST
75337: LIST
75338: LIST
75339: LIST
75340: LIST
75341: LIST
75342: LIST
75343: LIST
75344: LIST
75345: LIST
75346: LIST
75347: LIST
75348: LIST
75349: LIST
75350: LIST
75351: LIST
75352: LIST
75353: LIST
75354: LIST
75355: LIST
75356: LIST
75357: LIST
75358: LIST
75359: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
75360: LD_ADDR_VAR 0 34
75364: PUSH
75365: LD_INT 0
75367: PUSH
75368: LD_INT 4
75370: NEG
75371: PUSH
75372: EMPTY
75373: LIST
75374: LIST
75375: PUSH
75376: LD_INT 0
75378: PUSH
75379: LD_INT 5
75381: NEG
75382: PUSH
75383: EMPTY
75384: LIST
75385: LIST
75386: PUSH
75387: LD_INT 1
75389: PUSH
75390: LD_INT 4
75392: NEG
75393: PUSH
75394: EMPTY
75395: LIST
75396: LIST
75397: PUSH
75398: LD_INT 1
75400: PUSH
75401: LD_INT 3
75403: NEG
75404: PUSH
75405: EMPTY
75406: LIST
75407: LIST
75408: PUSH
75409: LD_INT 0
75411: PUSH
75412: LD_INT 3
75414: NEG
75415: PUSH
75416: EMPTY
75417: LIST
75418: LIST
75419: PUSH
75420: LD_INT 1
75422: NEG
75423: PUSH
75424: LD_INT 4
75426: NEG
75427: PUSH
75428: EMPTY
75429: LIST
75430: LIST
75431: PUSH
75432: LD_INT 1
75434: NEG
75435: PUSH
75436: LD_INT 5
75438: NEG
75439: PUSH
75440: EMPTY
75441: LIST
75442: LIST
75443: PUSH
75444: LD_INT 2
75446: PUSH
75447: LD_INT 3
75449: NEG
75450: PUSH
75451: EMPTY
75452: LIST
75453: LIST
75454: PUSH
75455: LD_INT 2
75457: NEG
75458: PUSH
75459: LD_INT 5
75461: NEG
75462: PUSH
75463: EMPTY
75464: LIST
75465: LIST
75466: PUSH
75467: LD_INT 3
75469: PUSH
75470: LD_INT 0
75472: PUSH
75473: EMPTY
75474: LIST
75475: LIST
75476: PUSH
75477: LD_INT 3
75479: PUSH
75480: LD_INT 1
75482: NEG
75483: PUSH
75484: EMPTY
75485: LIST
75486: LIST
75487: PUSH
75488: LD_INT 4
75490: PUSH
75491: LD_INT 0
75493: PUSH
75494: EMPTY
75495: LIST
75496: LIST
75497: PUSH
75498: LD_INT 4
75500: PUSH
75501: LD_INT 1
75503: PUSH
75504: EMPTY
75505: LIST
75506: LIST
75507: PUSH
75508: LD_INT 3
75510: PUSH
75511: LD_INT 1
75513: PUSH
75514: EMPTY
75515: LIST
75516: LIST
75517: PUSH
75518: LD_INT 2
75520: PUSH
75521: LD_INT 0
75523: PUSH
75524: EMPTY
75525: LIST
75526: LIST
75527: PUSH
75528: LD_INT 2
75530: PUSH
75531: LD_INT 1
75533: NEG
75534: PUSH
75535: EMPTY
75536: LIST
75537: LIST
75538: PUSH
75539: LD_INT 2
75541: PUSH
75542: LD_INT 2
75544: NEG
75545: PUSH
75546: EMPTY
75547: LIST
75548: LIST
75549: PUSH
75550: LD_INT 4
75552: PUSH
75553: LD_INT 2
75555: PUSH
75556: EMPTY
75557: LIST
75558: LIST
75559: PUSH
75560: LD_INT 4
75562: PUSH
75563: LD_INT 4
75565: PUSH
75566: EMPTY
75567: LIST
75568: LIST
75569: PUSH
75570: LD_INT 4
75572: PUSH
75573: LD_INT 3
75575: PUSH
75576: EMPTY
75577: LIST
75578: LIST
75579: PUSH
75580: LD_INT 5
75582: PUSH
75583: LD_INT 4
75585: PUSH
75586: EMPTY
75587: LIST
75588: LIST
75589: PUSH
75590: LD_INT 5
75592: PUSH
75593: LD_INT 5
75595: PUSH
75596: EMPTY
75597: LIST
75598: LIST
75599: PUSH
75600: LD_INT 4
75602: PUSH
75603: LD_INT 5
75605: PUSH
75606: EMPTY
75607: LIST
75608: LIST
75609: PUSH
75610: LD_INT 3
75612: PUSH
75613: LD_INT 4
75615: PUSH
75616: EMPTY
75617: LIST
75618: LIST
75619: PUSH
75620: LD_INT 3
75622: PUSH
75623: LD_INT 3
75625: PUSH
75626: EMPTY
75627: LIST
75628: LIST
75629: PUSH
75630: LD_INT 5
75632: PUSH
75633: LD_INT 3
75635: PUSH
75636: EMPTY
75637: LIST
75638: LIST
75639: PUSH
75640: LD_INT 3
75642: PUSH
75643: LD_INT 5
75645: PUSH
75646: EMPTY
75647: LIST
75648: LIST
75649: PUSH
75650: LD_INT 0
75652: PUSH
75653: LD_INT 3
75655: PUSH
75656: EMPTY
75657: LIST
75658: LIST
75659: PUSH
75660: LD_INT 0
75662: PUSH
75663: LD_INT 2
75665: PUSH
75666: EMPTY
75667: LIST
75668: LIST
75669: PUSH
75670: LD_INT 1
75672: PUSH
75673: LD_INT 3
75675: PUSH
75676: EMPTY
75677: LIST
75678: LIST
75679: PUSH
75680: LD_INT 1
75682: PUSH
75683: LD_INT 4
75685: PUSH
75686: EMPTY
75687: LIST
75688: LIST
75689: PUSH
75690: LD_INT 0
75692: PUSH
75693: LD_INT 4
75695: PUSH
75696: EMPTY
75697: LIST
75698: LIST
75699: PUSH
75700: LD_INT 1
75702: NEG
75703: PUSH
75704: LD_INT 3
75706: PUSH
75707: EMPTY
75708: LIST
75709: LIST
75710: PUSH
75711: LD_INT 1
75713: NEG
75714: PUSH
75715: LD_INT 2
75717: PUSH
75718: EMPTY
75719: LIST
75720: LIST
75721: PUSH
75722: LD_INT 2
75724: PUSH
75725: LD_INT 4
75727: PUSH
75728: EMPTY
75729: LIST
75730: LIST
75731: PUSH
75732: LD_INT 2
75734: NEG
75735: PUSH
75736: LD_INT 2
75738: PUSH
75739: EMPTY
75740: LIST
75741: LIST
75742: PUSH
75743: LD_INT 4
75745: NEG
75746: PUSH
75747: LD_INT 0
75749: PUSH
75750: EMPTY
75751: LIST
75752: LIST
75753: PUSH
75754: LD_INT 4
75756: NEG
75757: PUSH
75758: LD_INT 1
75760: NEG
75761: PUSH
75762: EMPTY
75763: LIST
75764: LIST
75765: PUSH
75766: LD_INT 3
75768: NEG
75769: PUSH
75770: LD_INT 0
75772: PUSH
75773: EMPTY
75774: LIST
75775: LIST
75776: PUSH
75777: LD_INT 3
75779: NEG
75780: PUSH
75781: LD_INT 1
75783: PUSH
75784: EMPTY
75785: LIST
75786: LIST
75787: PUSH
75788: LD_INT 4
75790: NEG
75791: PUSH
75792: LD_INT 1
75794: PUSH
75795: EMPTY
75796: LIST
75797: LIST
75798: PUSH
75799: LD_INT 5
75801: NEG
75802: PUSH
75803: LD_INT 0
75805: PUSH
75806: EMPTY
75807: LIST
75808: LIST
75809: PUSH
75810: LD_INT 5
75812: NEG
75813: PUSH
75814: LD_INT 1
75816: NEG
75817: PUSH
75818: EMPTY
75819: LIST
75820: LIST
75821: PUSH
75822: LD_INT 5
75824: NEG
75825: PUSH
75826: LD_INT 2
75828: NEG
75829: PUSH
75830: EMPTY
75831: LIST
75832: LIST
75833: PUSH
75834: LD_INT 3
75836: NEG
75837: PUSH
75838: LD_INT 2
75840: PUSH
75841: EMPTY
75842: LIST
75843: LIST
75844: PUSH
75845: EMPTY
75846: LIST
75847: LIST
75848: LIST
75849: LIST
75850: LIST
75851: LIST
75852: LIST
75853: LIST
75854: LIST
75855: LIST
75856: LIST
75857: LIST
75858: LIST
75859: LIST
75860: LIST
75861: LIST
75862: LIST
75863: LIST
75864: LIST
75865: LIST
75866: LIST
75867: LIST
75868: LIST
75869: LIST
75870: LIST
75871: LIST
75872: LIST
75873: LIST
75874: LIST
75875: LIST
75876: LIST
75877: LIST
75878: LIST
75879: LIST
75880: LIST
75881: LIST
75882: LIST
75883: LIST
75884: LIST
75885: LIST
75886: LIST
75887: LIST
75888: LIST
75889: LIST
75890: LIST
75891: ST_TO_ADDR
// end ; end ;
75892: GO 75895
75894: POP
// case btype of b_depot , b_warehouse :
75895: LD_VAR 0 1
75899: PUSH
75900: LD_INT 0
75902: DOUBLE
75903: EQUAL
75904: IFTRUE 75914
75906: LD_INT 1
75908: DOUBLE
75909: EQUAL
75910: IFTRUE 75914
75912: GO 76115
75914: POP
// case nation of nation_american :
75915: LD_VAR 0 5
75919: PUSH
75920: LD_INT 1
75922: DOUBLE
75923: EQUAL
75924: IFTRUE 75928
75926: GO 75984
75928: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
75929: LD_ADDR_VAR 0 9
75933: PUSH
75934: LD_VAR 0 11
75938: PUSH
75939: LD_VAR 0 12
75943: PUSH
75944: LD_VAR 0 13
75948: PUSH
75949: LD_VAR 0 14
75953: PUSH
75954: LD_VAR 0 15
75958: PUSH
75959: LD_VAR 0 16
75963: PUSH
75964: EMPTY
75965: LIST
75966: LIST
75967: LIST
75968: LIST
75969: LIST
75970: LIST
75971: PUSH
75972: LD_VAR 0 4
75976: PUSH
75977: LD_INT 1
75979: PLUS
75980: ARRAY
75981: ST_TO_ADDR
75982: GO 76113
75984: LD_INT 2
75986: DOUBLE
75987: EQUAL
75988: IFTRUE 75992
75990: GO 76048
75992: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
75993: LD_ADDR_VAR 0 9
75997: PUSH
75998: LD_VAR 0 17
76002: PUSH
76003: LD_VAR 0 18
76007: PUSH
76008: LD_VAR 0 19
76012: PUSH
76013: LD_VAR 0 20
76017: PUSH
76018: LD_VAR 0 21
76022: PUSH
76023: LD_VAR 0 22
76027: PUSH
76028: EMPTY
76029: LIST
76030: LIST
76031: LIST
76032: LIST
76033: LIST
76034: LIST
76035: PUSH
76036: LD_VAR 0 4
76040: PUSH
76041: LD_INT 1
76043: PLUS
76044: ARRAY
76045: ST_TO_ADDR
76046: GO 76113
76048: LD_INT 3
76050: DOUBLE
76051: EQUAL
76052: IFTRUE 76056
76054: GO 76112
76056: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
76057: LD_ADDR_VAR 0 9
76061: PUSH
76062: LD_VAR 0 23
76066: PUSH
76067: LD_VAR 0 24
76071: PUSH
76072: LD_VAR 0 25
76076: PUSH
76077: LD_VAR 0 26
76081: PUSH
76082: LD_VAR 0 27
76086: PUSH
76087: LD_VAR 0 28
76091: PUSH
76092: EMPTY
76093: LIST
76094: LIST
76095: LIST
76096: LIST
76097: LIST
76098: LIST
76099: PUSH
76100: LD_VAR 0 4
76104: PUSH
76105: LD_INT 1
76107: PLUS
76108: ARRAY
76109: ST_TO_ADDR
76110: GO 76113
76112: POP
76113: GO 76668
76115: LD_INT 2
76117: DOUBLE
76118: EQUAL
76119: IFTRUE 76129
76121: LD_INT 3
76123: DOUBLE
76124: EQUAL
76125: IFTRUE 76129
76127: GO 76185
76129: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
76130: LD_ADDR_VAR 0 9
76134: PUSH
76135: LD_VAR 0 29
76139: PUSH
76140: LD_VAR 0 30
76144: PUSH
76145: LD_VAR 0 31
76149: PUSH
76150: LD_VAR 0 32
76154: PUSH
76155: LD_VAR 0 33
76159: PUSH
76160: LD_VAR 0 34
76164: PUSH
76165: EMPTY
76166: LIST
76167: LIST
76168: LIST
76169: LIST
76170: LIST
76171: LIST
76172: PUSH
76173: LD_VAR 0 4
76177: PUSH
76178: LD_INT 1
76180: PLUS
76181: ARRAY
76182: ST_TO_ADDR
76183: GO 76668
76185: LD_INT 16
76187: DOUBLE
76188: EQUAL
76189: IFTRUE 76247
76191: LD_INT 17
76193: DOUBLE
76194: EQUAL
76195: IFTRUE 76247
76197: LD_INT 18
76199: DOUBLE
76200: EQUAL
76201: IFTRUE 76247
76203: LD_INT 19
76205: DOUBLE
76206: EQUAL
76207: IFTRUE 76247
76209: LD_INT 22
76211: DOUBLE
76212: EQUAL
76213: IFTRUE 76247
76215: LD_INT 20
76217: DOUBLE
76218: EQUAL
76219: IFTRUE 76247
76221: LD_INT 21
76223: DOUBLE
76224: EQUAL
76225: IFTRUE 76247
76227: LD_INT 23
76229: DOUBLE
76230: EQUAL
76231: IFTRUE 76247
76233: LD_INT 24
76235: DOUBLE
76236: EQUAL
76237: IFTRUE 76247
76239: LD_INT 25
76241: DOUBLE
76242: EQUAL
76243: IFTRUE 76247
76245: GO 76303
76247: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
76248: LD_ADDR_VAR 0 9
76252: PUSH
76253: LD_VAR 0 35
76257: PUSH
76258: LD_VAR 0 36
76262: PUSH
76263: LD_VAR 0 37
76267: PUSH
76268: LD_VAR 0 38
76272: PUSH
76273: LD_VAR 0 39
76277: PUSH
76278: LD_VAR 0 40
76282: PUSH
76283: EMPTY
76284: LIST
76285: LIST
76286: LIST
76287: LIST
76288: LIST
76289: LIST
76290: PUSH
76291: LD_VAR 0 4
76295: PUSH
76296: LD_INT 1
76298: PLUS
76299: ARRAY
76300: ST_TO_ADDR
76301: GO 76668
76303: LD_INT 6
76305: DOUBLE
76306: EQUAL
76307: IFTRUE 76359
76309: LD_INT 7
76311: DOUBLE
76312: EQUAL
76313: IFTRUE 76359
76315: LD_INT 8
76317: DOUBLE
76318: EQUAL
76319: IFTRUE 76359
76321: LD_INT 13
76323: DOUBLE
76324: EQUAL
76325: IFTRUE 76359
76327: LD_INT 12
76329: DOUBLE
76330: EQUAL
76331: IFTRUE 76359
76333: LD_INT 15
76335: DOUBLE
76336: EQUAL
76337: IFTRUE 76359
76339: LD_INT 11
76341: DOUBLE
76342: EQUAL
76343: IFTRUE 76359
76345: LD_INT 14
76347: DOUBLE
76348: EQUAL
76349: IFTRUE 76359
76351: LD_INT 10
76353: DOUBLE
76354: EQUAL
76355: IFTRUE 76359
76357: GO 76415
76359: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
76360: LD_ADDR_VAR 0 9
76364: PUSH
76365: LD_VAR 0 41
76369: PUSH
76370: LD_VAR 0 42
76374: PUSH
76375: LD_VAR 0 43
76379: PUSH
76380: LD_VAR 0 44
76384: PUSH
76385: LD_VAR 0 45
76389: PUSH
76390: LD_VAR 0 46
76394: PUSH
76395: EMPTY
76396: LIST
76397: LIST
76398: LIST
76399: LIST
76400: LIST
76401: LIST
76402: PUSH
76403: LD_VAR 0 4
76407: PUSH
76408: LD_INT 1
76410: PLUS
76411: ARRAY
76412: ST_TO_ADDR
76413: GO 76668
76415: LD_INT 36
76417: DOUBLE
76418: EQUAL
76419: IFTRUE 76423
76421: GO 76479
76423: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
76424: LD_ADDR_VAR 0 9
76428: PUSH
76429: LD_VAR 0 47
76433: PUSH
76434: LD_VAR 0 48
76438: PUSH
76439: LD_VAR 0 49
76443: PUSH
76444: LD_VAR 0 50
76448: PUSH
76449: LD_VAR 0 51
76453: PUSH
76454: LD_VAR 0 52
76458: PUSH
76459: EMPTY
76460: LIST
76461: LIST
76462: LIST
76463: LIST
76464: LIST
76465: LIST
76466: PUSH
76467: LD_VAR 0 4
76471: PUSH
76472: LD_INT 1
76474: PLUS
76475: ARRAY
76476: ST_TO_ADDR
76477: GO 76668
76479: LD_INT 4
76481: DOUBLE
76482: EQUAL
76483: IFTRUE 76505
76485: LD_INT 5
76487: DOUBLE
76488: EQUAL
76489: IFTRUE 76505
76491: LD_INT 34
76493: DOUBLE
76494: EQUAL
76495: IFTRUE 76505
76497: LD_INT 37
76499: DOUBLE
76500: EQUAL
76501: IFTRUE 76505
76503: GO 76561
76505: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
76506: LD_ADDR_VAR 0 9
76510: PUSH
76511: LD_VAR 0 53
76515: PUSH
76516: LD_VAR 0 54
76520: PUSH
76521: LD_VAR 0 55
76525: PUSH
76526: LD_VAR 0 56
76530: PUSH
76531: LD_VAR 0 57
76535: PUSH
76536: LD_VAR 0 58
76540: PUSH
76541: EMPTY
76542: LIST
76543: LIST
76544: LIST
76545: LIST
76546: LIST
76547: LIST
76548: PUSH
76549: LD_VAR 0 4
76553: PUSH
76554: LD_INT 1
76556: PLUS
76557: ARRAY
76558: ST_TO_ADDR
76559: GO 76668
76561: LD_INT 31
76563: DOUBLE
76564: EQUAL
76565: IFTRUE 76611
76567: LD_INT 32
76569: DOUBLE
76570: EQUAL
76571: IFTRUE 76611
76573: LD_INT 33
76575: DOUBLE
76576: EQUAL
76577: IFTRUE 76611
76579: LD_INT 27
76581: DOUBLE
76582: EQUAL
76583: IFTRUE 76611
76585: LD_INT 26
76587: DOUBLE
76588: EQUAL
76589: IFTRUE 76611
76591: LD_INT 28
76593: DOUBLE
76594: EQUAL
76595: IFTRUE 76611
76597: LD_INT 29
76599: DOUBLE
76600: EQUAL
76601: IFTRUE 76611
76603: LD_INT 30
76605: DOUBLE
76606: EQUAL
76607: IFTRUE 76611
76609: GO 76667
76611: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
76612: LD_ADDR_VAR 0 9
76616: PUSH
76617: LD_VAR 0 59
76621: PUSH
76622: LD_VAR 0 60
76626: PUSH
76627: LD_VAR 0 61
76631: PUSH
76632: LD_VAR 0 62
76636: PUSH
76637: LD_VAR 0 63
76641: PUSH
76642: LD_VAR 0 64
76646: PUSH
76647: EMPTY
76648: LIST
76649: LIST
76650: LIST
76651: LIST
76652: LIST
76653: LIST
76654: PUSH
76655: LD_VAR 0 4
76659: PUSH
76660: LD_INT 1
76662: PLUS
76663: ARRAY
76664: ST_TO_ADDR
76665: GO 76668
76667: POP
// temp_list2 = [ ] ;
76668: LD_ADDR_VAR 0 10
76672: PUSH
76673: EMPTY
76674: ST_TO_ADDR
// for i in temp_list do
76675: LD_ADDR_VAR 0 8
76679: PUSH
76680: LD_VAR 0 9
76684: PUSH
76685: FOR_IN
76686: IFFALSE 76738
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
76688: LD_ADDR_VAR 0 10
76692: PUSH
76693: LD_VAR 0 10
76697: PUSH
76698: LD_VAR 0 8
76702: PUSH
76703: LD_INT 1
76705: ARRAY
76706: PUSH
76707: LD_VAR 0 2
76711: PLUS
76712: PUSH
76713: LD_VAR 0 8
76717: PUSH
76718: LD_INT 2
76720: ARRAY
76721: PUSH
76722: LD_VAR 0 3
76726: PLUS
76727: PUSH
76728: EMPTY
76729: LIST
76730: LIST
76731: PUSH
76732: EMPTY
76733: LIST
76734: ADD
76735: ST_TO_ADDR
76736: GO 76685
76738: POP
76739: POP
// result = temp_list2 ;
76740: LD_ADDR_VAR 0 7
76744: PUSH
76745: LD_VAR 0 10
76749: ST_TO_ADDR
// end ;
76750: LD_VAR 0 7
76754: RET
// export function EnemyInRange ( unit , dist ) ; begin
76755: LD_INT 0
76757: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
76758: LD_ADDR_VAR 0 3
76762: PUSH
76763: LD_VAR 0 1
76767: PPUSH
76768: CALL_OW 255
76772: PPUSH
76773: LD_VAR 0 1
76777: PPUSH
76778: CALL_OW 250
76782: PPUSH
76783: LD_VAR 0 1
76787: PPUSH
76788: CALL_OW 251
76792: PPUSH
76793: LD_VAR 0 2
76797: PPUSH
76798: CALL 50157 0 4
76802: PUSH
76803: LD_INT 4
76805: ARRAY
76806: ST_TO_ADDR
// end ;
76807: LD_VAR 0 3
76811: RET
// export function PlayerSeeMe ( unit ) ; begin
76812: LD_INT 0
76814: PPUSH
// result := See ( your_side , unit ) ;
76815: LD_ADDR_VAR 0 2
76819: PUSH
76820: LD_OWVAR 2
76824: PPUSH
76825: LD_VAR 0 1
76829: PPUSH
76830: CALL_OW 292
76834: ST_TO_ADDR
// end ;
76835: LD_VAR 0 2
76839: RET
// export function ReverseDir ( unit ) ; begin
76840: LD_INT 0
76842: PPUSH
// if not unit then
76843: LD_VAR 0 1
76847: NOT
76848: IFFALSE 76852
// exit ;
76850: GO 76875
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
76852: LD_ADDR_VAR 0 2
76856: PUSH
76857: LD_VAR 0 1
76861: PPUSH
76862: CALL_OW 254
76866: PUSH
76867: LD_INT 3
76869: PLUS
76870: PUSH
76871: LD_INT 6
76873: MOD
76874: ST_TO_ADDR
// end ;
76875: LD_VAR 0 2
76879: RET
// export function ReverseArray ( array ) ; var i ; begin
76880: LD_INT 0
76882: PPUSH
76883: PPUSH
// if not array then
76884: LD_VAR 0 1
76888: NOT
76889: IFFALSE 76893
// exit ;
76891: GO 76948
// result := [ ] ;
76893: LD_ADDR_VAR 0 2
76897: PUSH
76898: EMPTY
76899: ST_TO_ADDR
// for i := array downto 1 do
76900: LD_ADDR_VAR 0 3
76904: PUSH
76905: DOUBLE
76906: LD_VAR 0 1
76910: INC
76911: ST_TO_ADDR
76912: LD_INT 1
76914: PUSH
76915: FOR_DOWNTO
76916: IFFALSE 76946
// result := Join ( result , array [ i ] ) ;
76918: LD_ADDR_VAR 0 2
76922: PUSH
76923: LD_VAR 0 2
76927: PPUSH
76928: LD_VAR 0 1
76932: PUSH
76933: LD_VAR 0 3
76937: ARRAY
76938: PPUSH
76939: CALL 81592 0 2
76943: ST_TO_ADDR
76944: GO 76915
76946: POP
76947: POP
// end ;
76948: LD_VAR 0 2
76952: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
76953: LD_INT 0
76955: PPUSH
76956: PPUSH
76957: PPUSH
76958: PPUSH
76959: PPUSH
76960: PPUSH
// if not unit or not hexes then
76961: LD_VAR 0 1
76965: NOT
76966: PUSH
76967: LD_VAR 0 2
76971: NOT
76972: OR
76973: IFFALSE 76977
// exit ;
76975: GO 77100
// dist := 9999 ;
76977: LD_ADDR_VAR 0 5
76981: PUSH
76982: LD_INT 9999
76984: ST_TO_ADDR
// for i = 1 to hexes do
76985: LD_ADDR_VAR 0 4
76989: PUSH
76990: DOUBLE
76991: LD_INT 1
76993: DEC
76994: ST_TO_ADDR
76995: LD_VAR 0 2
76999: PUSH
77000: FOR_TO
77001: IFFALSE 77088
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
77003: LD_ADDR_VAR 0 6
77007: PUSH
77008: LD_VAR 0 1
77012: PPUSH
77013: LD_VAR 0 2
77017: PUSH
77018: LD_VAR 0 4
77022: ARRAY
77023: PUSH
77024: LD_INT 1
77026: ARRAY
77027: PPUSH
77028: LD_VAR 0 2
77032: PUSH
77033: LD_VAR 0 4
77037: ARRAY
77038: PUSH
77039: LD_INT 2
77041: ARRAY
77042: PPUSH
77043: CALL_OW 297
77047: ST_TO_ADDR
// if tdist < dist then
77048: LD_VAR 0 6
77052: PUSH
77053: LD_VAR 0 5
77057: LESS
77058: IFFALSE 77086
// begin hex := hexes [ i ] ;
77060: LD_ADDR_VAR 0 8
77064: PUSH
77065: LD_VAR 0 2
77069: PUSH
77070: LD_VAR 0 4
77074: ARRAY
77075: ST_TO_ADDR
// dist := tdist ;
77076: LD_ADDR_VAR 0 5
77080: PUSH
77081: LD_VAR 0 6
77085: ST_TO_ADDR
// end ; end ;
77086: GO 77000
77088: POP
77089: POP
// result := hex ;
77090: LD_ADDR_VAR 0 3
77094: PUSH
77095: LD_VAR 0 8
77099: ST_TO_ADDR
// end ;
77100: LD_VAR 0 3
77104: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
77105: LD_INT 0
77107: PPUSH
77108: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
77109: LD_VAR 0 1
77113: NOT
77114: PUSH
77115: LD_VAR 0 1
77119: PUSH
77120: LD_INT 21
77122: PUSH
77123: LD_INT 2
77125: PUSH
77126: EMPTY
77127: LIST
77128: LIST
77129: PUSH
77130: LD_INT 23
77132: PUSH
77133: LD_INT 2
77135: PUSH
77136: EMPTY
77137: LIST
77138: LIST
77139: PUSH
77140: EMPTY
77141: LIST
77142: LIST
77143: PPUSH
77144: CALL_OW 69
77148: IN
77149: NOT
77150: OR
77151: IFFALSE 77155
// exit ;
77153: GO 77202
// for i = 1 to 3 do
77155: LD_ADDR_VAR 0 3
77159: PUSH
77160: DOUBLE
77161: LD_INT 1
77163: DEC
77164: ST_TO_ADDR
77165: LD_INT 3
77167: PUSH
77168: FOR_TO
77169: IFFALSE 77200
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
77171: LD_VAR 0 1
77175: PPUSH
77176: CALL_OW 250
77180: PPUSH
77181: LD_VAR 0 1
77185: PPUSH
77186: CALL_OW 251
77190: PPUSH
77191: LD_INT 1
77193: PPUSH
77194: CALL_OW 453
77198: GO 77168
77200: POP
77201: POP
// end ;
77202: LD_VAR 0 2
77206: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
77207: LD_INT 0
77209: PPUSH
77210: PPUSH
77211: PPUSH
77212: PPUSH
77213: PPUSH
77214: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
77215: LD_VAR 0 1
77219: NOT
77220: PUSH
77221: LD_VAR 0 2
77225: NOT
77226: OR
77227: PUSH
77228: LD_VAR 0 1
77232: PPUSH
77233: CALL_OW 314
77237: OR
77238: IFFALSE 77242
// exit ;
77240: GO 77709
// if GetLives ( i ) < 250 then
77242: LD_VAR 0 4
77246: PPUSH
77247: CALL_OW 256
77251: PUSH
77252: LD_INT 250
77254: LESS
77255: IFFALSE 77268
// begin ComAutodestruct ( i ) ;
77257: LD_VAR 0 4
77261: PPUSH
77262: CALL 77105 0 1
// exit ;
77266: GO 77709
// end ; x := GetX ( enemy_unit ) ;
77268: LD_ADDR_VAR 0 7
77272: PUSH
77273: LD_VAR 0 2
77277: PPUSH
77278: CALL_OW 250
77282: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
77283: LD_ADDR_VAR 0 8
77287: PUSH
77288: LD_VAR 0 2
77292: PPUSH
77293: CALL_OW 251
77297: ST_TO_ADDR
// if not x or not y then
77298: LD_VAR 0 7
77302: NOT
77303: PUSH
77304: LD_VAR 0 8
77308: NOT
77309: OR
77310: IFFALSE 77314
// exit ;
77312: GO 77709
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
77314: LD_ADDR_VAR 0 6
77318: PUSH
77319: LD_VAR 0 7
77323: PPUSH
77324: LD_INT 0
77326: PPUSH
77327: LD_INT 4
77329: PPUSH
77330: CALL_OW 272
77334: PUSH
77335: LD_VAR 0 8
77339: PPUSH
77340: LD_INT 0
77342: PPUSH
77343: LD_INT 4
77345: PPUSH
77346: CALL_OW 273
77350: PUSH
77351: EMPTY
77352: LIST
77353: LIST
77354: PUSH
77355: LD_VAR 0 7
77359: PPUSH
77360: LD_INT 1
77362: PPUSH
77363: LD_INT 4
77365: PPUSH
77366: CALL_OW 272
77370: PUSH
77371: LD_VAR 0 8
77375: PPUSH
77376: LD_INT 1
77378: PPUSH
77379: LD_INT 4
77381: PPUSH
77382: CALL_OW 273
77386: PUSH
77387: EMPTY
77388: LIST
77389: LIST
77390: PUSH
77391: LD_VAR 0 7
77395: PPUSH
77396: LD_INT 2
77398: PPUSH
77399: LD_INT 4
77401: PPUSH
77402: CALL_OW 272
77406: PUSH
77407: LD_VAR 0 8
77411: PPUSH
77412: LD_INT 2
77414: PPUSH
77415: LD_INT 4
77417: PPUSH
77418: CALL_OW 273
77422: PUSH
77423: EMPTY
77424: LIST
77425: LIST
77426: PUSH
77427: LD_VAR 0 7
77431: PPUSH
77432: LD_INT 3
77434: PPUSH
77435: LD_INT 4
77437: PPUSH
77438: CALL_OW 272
77442: PUSH
77443: LD_VAR 0 8
77447: PPUSH
77448: LD_INT 3
77450: PPUSH
77451: LD_INT 4
77453: PPUSH
77454: CALL_OW 273
77458: PUSH
77459: EMPTY
77460: LIST
77461: LIST
77462: PUSH
77463: LD_VAR 0 7
77467: PPUSH
77468: LD_INT 4
77470: PPUSH
77471: LD_INT 4
77473: PPUSH
77474: CALL_OW 272
77478: PUSH
77479: LD_VAR 0 8
77483: PPUSH
77484: LD_INT 4
77486: PPUSH
77487: LD_INT 4
77489: PPUSH
77490: CALL_OW 273
77494: PUSH
77495: EMPTY
77496: LIST
77497: LIST
77498: PUSH
77499: LD_VAR 0 7
77503: PPUSH
77504: LD_INT 5
77506: PPUSH
77507: LD_INT 4
77509: PPUSH
77510: CALL_OW 272
77514: PUSH
77515: LD_VAR 0 8
77519: PPUSH
77520: LD_INT 5
77522: PPUSH
77523: LD_INT 4
77525: PPUSH
77526: CALL_OW 273
77530: PUSH
77531: EMPTY
77532: LIST
77533: LIST
77534: PUSH
77535: EMPTY
77536: LIST
77537: LIST
77538: LIST
77539: LIST
77540: LIST
77541: LIST
77542: ST_TO_ADDR
// for i = tmp downto 1 do
77543: LD_ADDR_VAR 0 4
77547: PUSH
77548: DOUBLE
77549: LD_VAR 0 6
77553: INC
77554: ST_TO_ADDR
77555: LD_INT 1
77557: PUSH
77558: FOR_DOWNTO
77559: IFFALSE 77660
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
77561: LD_VAR 0 6
77565: PUSH
77566: LD_VAR 0 4
77570: ARRAY
77571: PUSH
77572: LD_INT 1
77574: ARRAY
77575: PPUSH
77576: LD_VAR 0 6
77580: PUSH
77581: LD_VAR 0 4
77585: ARRAY
77586: PUSH
77587: LD_INT 2
77589: ARRAY
77590: PPUSH
77591: CALL_OW 488
77595: NOT
77596: PUSH
77597: LD_VAR 0 6
77601: PUSH
77602: LD_VAR 0 4
77606: ARRAY
77607: PUSH
77608: LD_INT 1
77610: ARRAY
77611: PPUSH
77612: LD_VAR 0 6
77616: PUSH
77617: LD_VAR 0 4
77621: ARRAY
77622: PUSH
77623: LD_INT 2
77625: ARRAY
77626: PPUSH
77627: CALL_OW 428
77631: PUSH
77632: LD_INT 0
77634: NONEQUAL
77635: OR
77636: IFFALSE 77658
// tmp := Delete ( tmp , i ) ;
77638: LD_ADDR_VAR 0 6
77642: PUSH
77643: LD_VAR 0 6
77647: PPUSH
77648: LD_VAR 0 4
77652: PPUSH
77653: CALL_OW 3
77657: ST_TO_ADDR
77658: GO 77558
77660: POP
77661: POP
// j := GetClosestHex ( unit , tmp ) ;
77662: LD_ADDR_VAR 0 5
77666: PUSH
77667: LD_VAR 0 1
77671: PPUSH
77672: LD_VAR 0 6
77676: PPUSH
77677: CALL 76953 0 2
77681: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
77682: LD_VAR 0 1
77686: PPUSH
77687: LD_VAR 0 5
77691: PUSH
77692: LD_INT 1
77694: ARRAY
77695: PPUSH
77696: LD_VAR 0 5
77700: PUSH
77701: LD_INT 2
77703: ARRAY
77704: PPUSH
77705: CALL_OW 111
// end ;
77709: LD_VAR 0 3
77713: RET
// export function PrepareApemanSoldier ( ) ; begin
77714: LD_INT 0
77716: PPUSH
// uc_nation := 0 ;
77717: LD_ADDR_OWVAR 21
77721: PUSH
77722: LD_INT 0
77724: ST_TO_ADDR
// hc_sex := sex_male ;
77725: LD_ADDR_OWVAR 27
77729: PUSH
77730: LD_INT 1
77732: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
77733: LD_ADDR_OWVAR 28
77737: PUSH
77738: LD_INT 15
77740: ST_TO_ADDR
// hc_gallery :=  ;
77741: LD_ADDR_OWVAR 33
77745: PUSH
77746: LD_STRING 
77748: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77749: LD_ADDR_OWVAR 31
77753: PUSH
77754: LD_INT 0
77756: PPUSH
77757: LD_INT 3
77759: PPUSH
77760: CALL_OW 12
77764: PUSH
77765: LD_INT 0
77767: PPUSH
77768: LD_INT 3
77770: PPUSH
77771: CALL_OW 12
77775: PUSH
77776: LD_INT 0
77778: PUSH
77779: LD_INT 0
77781: PUSH
77782: EMPTY
77783: LIST
77784: LIST
77785: LIST
77786: LIST
77787: ST_TO_ADDR
// end ;
77788: LD_VAR 0 1
77792: RET
// export function PrepareApemanEngineer ( ) ; begin
77793: LD_INT 0
77795: PPUSH
// uc_nation := 0 ;
77796: LD_ADDR_OWVAR 21
77800: PUSH
77801: LD_INT 0
77803: ST_TO_ADDR
// hc_sex := sex_male ;
77804: LD_ADDR_OWVAR 27
77808: PUSH
77809: LD_INT 1
77811: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
77812: LD_ADDR_OWVAR 28
77816: PUSH
77817: LD_INT 16
77819: ST_TO_ADDR
// hc_gallery :=  ;
77820: LD_ADDR_OWVAR 33
77824: PUSH
77825: LD_STRING 
77827: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77828: LD_ADDR_OWVAR 31
77832: PUSH
77833: LD_INT 0
77835: PPUSH
77836: LD_INT 3
77838: PPUSH
77839: CALL_OW 12
77843: PUSH
77844: LD_INT 0
77846: PPUSH
77847: LD_INT 3
77849: PPUSH
77850: CALL_OW 12
77854: PUSH
77855: LD_INT 0
77857: PUSH
77858: LD_INT 0
77860: PUSH
77861: EMPTY
77862: LIST
77863: LIST
77864: LIST
77865: LIST
77866: ST_TO_ADDR
// end ;
77867: LD_VAR 0 1
77871: RET
// export function PrepareApeman ( agressivity ) ; begin
77872: LD_INT 0
77874: PPUSH
// uc_side := 0 ;
77875: LD_ADDR_OWVAR 20
77879: PUSH
77880: LD_INT 0
77882: ST_TO_ADDR
// uc_nation := 0 ;
77883: LD_ADDR_OWVAR 21
77887: PUSH
77888: LD_INT 0
77890: ST_TO_ADDR
// hc_sex := sex_male ;
77891: LD_ADDR_OWVAR 27
77895: PUSH
77896: LD_INT 1
77898: ST_TO_ADDR
// hc_class := class_apeman ;
77899: LD_ADDR_OWVAR 28
77903: PUSH
77904: LD_INT 12
77906: ST_TO_ADDR
// hc_gallery :=  ;
77907: LD_ADDR_OWVAR 33
77911: PUSH
77912: LD_STRING 
77914: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
77915: LD_ADDR_OWVAR 35
77919: PUSH
77920: LD_VAR 0 1
77924: NEG
77925: PPUSH
77926: LD_VAR 0 1
77930: PPUSH
77931: CALL_OW 12
77935: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77936: LD_ADDR_OWVAR 31
77940: PUSH
77941: LD_INT 0
77943: PPUSH
77944: LD_INT 3
77946: PPUSH
77947: CALL_OW 12
77951: PUSH
77952: LD_INT 0
77954: PPUSH
77955: LD_INT 3
77957: PPUSH
77958: CALL_OW 12
77962: PUSH
77963: LD_INT 0
77965: PUSH
77966: LD_INT 0
77968: PUSH
77969: EMPTY
77970: LIST
77971: LIST
77972: LIST
77973: LIST
77974: ST_TO_ADDR
// end ;
77975: LD_VAR 0 2
77979: RET
// export function PrepareTiger ( agressivity ) ; begin
77980: LD_INT 0
77982: PPUSH
// uc_side := 0 ;
77983: LD_ADDR_OWVAR 20
77987: PUSH
77988: LD_INT 0
77990: ST_TO_ADDR
// uc_nation := 0 ;
77991: LD_ADDR_OWVAR 21
77995: PUSH
77996: LD_INT 0
77998: ST_TO_ADDR
// hc_class := class_tiger ;
77999: LD_ADDR_OWVAR 28
78003: PUSH
78004: LD_INT 14
78006: ST_TO_ADDR
// hc_gallery :=  ;
78007: LD_ADDR_OWVAR 33
78011: PUSH
78012: LD_STRING 
78014: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
78015: LD_ADDR_OWVAR 35
78019: PUSH
78020: LD_VAR 0 1
78024: NEG
78025: PPUSH
78026: LD_VAR 0 1
78030: PPUSH
78031: CALL_OW 12
78035: ST_TO_ADDR
// end ;
78036: LD_VAR 0 2
78040: RET
// export function PrepareEnchidna ( ) ; begin
78041: LD_INT 0
78043: PPUSH
// uc_side := 0 ;
78044: LD_ADDR_OWVAR 20
78048: PUSH
78049: LD_INT 0
78051: ST_TO_ADDR
// uc_nation := 0 ;
78052: LD_ADDR_OWVAR 21
78056: PUSH
78057: LD_INT 0
78059: ST_TO_ADDR
// hc_class := class_baggie ;
78060: LD_ADDR_OWVAR 28
78064: PUSH
78065: LD_INT 13
78067: ST_TO_ADDR
// hc_gallery :=  ;
78068: LD_ADDR_OWVAR 33
78072: PUSH
78073: LD_STRING 
78075: ST_TO_ADDR
// end ;
78076: LD_VAR 0 1
78080: RET
// export function PrepareFrog ( ) ; begin
78081: LD_INT 0
78083: PPUSH
// uc_side := 0 ;
78084: LD_ADDR_OWVAR 20
78088: PUSH
78089: LD_INT 0
78091: ST_TO_ADDR
// uc_nation := 0 ;
78092: LD_ADDR_OWVAR 21
78096: PUSH
78097: LD_INT 0
78099: ST_TO_ADDR
// hc_class := class_frog ;
78100: LD_ADDR_OWVAR 28
78104: PUSH
78105: LD_INT 19
78107: ST_TO_ADDR
// hc_gallery :=  ;
78108: LD_ADDR_OWVAR 33
78112: PUSH
78113: LD_STRING 
78115: ST_TO_ADDR
// end ;
78116: LD_VAR 0 1
78120: RET
// export function PrepareFish ( ) ; begin
78121: LD_INT 0
78123: PPUSH
// uc_side := 0 ;
78124: LD_ADDR_OWVAR 20
78128: PUSH
78129: LD_INT 0
78131: ST_TO_ADDR
// uc_nation := 0 ;
78132: LD_ADDR_OWVAR 21
78136: PUSH
78137: LD_INT 0
78139: ST_TO_ADDR
// hc_class := class_fish ;
78140: LD_ADDR_OWVAR 28
78144: PUSH
78145: LD_INT 20
78147: ST_TO_ADDR
// hc_gallery :=  ;
78148: LD_ADDR_OWVAR 33
78152: PUSH
78153: LD_STRING 
78155: ST_TO_ADDR
// end ;
78156: LD_VAR 0 1
78160: RET
// export function PrepareBird ( ) ; begin
78161: LD_INT 0
78163: PPUSH
// uc_side := 0 ;
78164: LD_ADDR_OWVAR 20
78168: PUSH
78169: LD_INT 0
78171: ST_TO_ADDR
// uc_nation := 0 ;
78172: LD_ADDR_OWVAR 21
78176: PUSH
78177: LD_INT 0
78179: ST_TO_ADDR
// hc_class := class_phororhacos ;
78180: LD_ADDR_OWVAR 28
78184: PUSH
78185: LD_INT 18
78187: ST_TO_ADDR
// hc_gallery :=  ;
78188: LD_ADDR_OWVAR 33
78192: PUSH
78193: LD_STRING 
78195: ST_TO_ADDR
// end ;
78196: LD_VAR 0 1
78200: RET
// export function PrepareHorse ( ) ; begin
78201: LD_INT 0
78203: PPUSH
// uc_side := 0 ;
78204: LD_ADDR_OWVAR 20
78208: PUSH
78209: LD_INT 0
78211: ST_TO_ADDR
// uc_nation := 0 ;
78212: LD_ADDR_OWVAR 21
78216: PUSH
78217: LD_INT 0
78219: ST_TO_ADDR
// hc_class := class_horse ;
78220: LD_ADDR_OWVAR 28
78224: PUSH
78225: LD_INT 21
78227: ST_TO_ADDR
// hc_gallery :=  ;
78228: LD_ADDR_OWVAR 33
78232: PUSH
78233: LD_STRING 
78235: ST_TO_ADDR
// end ;
78236: LD_VAR 0 1
78240: RET
// export function PrepareMastodont ( ) ; begin
78241: LD_INT 0
78243: PPUSH
// uc_side := 0 ;
78244: LD_ADDR_OWVAR 20
78248: PUSH
78249: LD_INT 0
78251: ST_TO_ADDR
// uc_nation := 0 ;
78252: LD_ADDR_OWVAR 21
78256: PUSH
78257: LD_INT 0
78259: ST_TO_ADDR
// vc_chassis := class_mastodont ;
78260: LD_ADDR_OWVAR 37
78264: PUSH
78265: LD_INT 31
78267: ST_TO_ADDR
// vc_control := control_rider ;
78268: LD_ADDR_OWVAR 38
78272: PUSH
78273: LD_INT 4
78275: ST_TO_ADDR
// end ;
78276: LD_VAR 0 1
78280: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
78281: LD_INT 0
78283: PPUSH
78284: PPUSH
78285: PPUSH
// uc_side = 0 ;
78286: LD_ADDR_OWVAR 20
78290: PUSH
78291: LD_INT 0
78293: ST_TO_ADDR
// uc_nation = 0 ;
78294: LD_ADDR_OWVAR 21
78298: PUSH
78299: LD_INT 0
78301: ST_TO_ADDR
// InitHc_All ( ) ;
78302: CALL_OW 584
// InitVc ;
78306: CALL_OW 20
// if mastodonts then
78310: LD_VAR 0 6
78314: IFFALSE 78381
// for i = 1 to mastodonts do
78316: LD_ADDR_VAR 0 11
78320: PUSH
78321: DOUBLE
78322: LD_INT 1
78324: DEC
78325: ST_TO_ADDR
78326: LD_VAR 0 6
78330: PUSH
78331: FOR_TO
78332: IFFALSE 78379
// begin vc_chassis := 31 ;
78334: LD_ADDR_OWVAR 37
78338: PUSH
78339: LD_INT 31
78341: ST_TO_ADDR
// vc_control := control_rider ;
78342: LD_ADDR_OWVAR 38
78346: PUSH
78347: LD_INT 4
78349: ST_TO_ADDR
// animal := CreateVehicle ;
78350: LD_ADDR_VAR 0 12
78354: PUSH
78355: CALL_OW 45
78359: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78360: LD_VAR 0 12
78364: PPUSH
78365: LD_VAR 0 8
78369: PPUSH
78370: LD_INT 0
78372: PPUSH
78373: CALL 80509 0 3
// end ;
78377: GO 78331
78379: POP
78380: POP
// if horses then
78381: LD_VAR 0 5
78385: IFFALSE 78452
// for i = 1 to horses do
78387: LD_ADDR_VAR 0 11
78391: PUSH
78392: DOUBLE
78393: LD_INT 1
78395: DEC
78396: ST_TO_ADDR
78397: LD_VAR 0 5
78401: PUSH
78402: FOR_TO
78403: IFFALSE 78450
// begin hc_class := 21 ;
78405: LD_ADDR_OWVAR 28
78409: PUSH
78410: LD_INT 21
78412: ST_TO_ADDR
// hc_gallery :=  ;
78413: LD_ADDR_OWVAR 33
78417: PUSH
78418: LD_STRING 
78420: ST_TO_ADDR
// animal := CreateHuman ;
78421: LD_ADDR_VAR 0 12
78425: PUSH
78426: CALL_OW 44
78430: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78431: LD_VAR 0 12
78435: PPUSH
78436: LD_VAR 0 8
78440: PPUSH
78441: LD_INT 0
78443: PPUSH
78444: CALL 80509 0 3
// end ;
78448: GO 78402
78450: POP
78451: POP
// if birds then
78452: LD_VAR 0 1
78456: IFFALSE 78523
// for i = 1 to birds do
78458: LD_ADDR_VAR 0 11
78462: PUSH
78463: DOUBLE
78464: LD_INT 1
78466: DEC
78467: ST_TO_ADDR
78468: LD_VAR 0 1
78472: PUSH
78473: FOR_TO
78474: IFFALSE 78521
// begin hc_class = 18 ;
78476: LD_ADDR_OWVAR 28
78480: PUSH
78481: LD_INT 18
78483: ST_TO_ADDR
// hc_gallery =  ;
78484: LD_ADDR_OWVAR 33
78488: PUSH
78489: LD_STRING 
78491: ST_TO_ADDR
// animal := CreateHuman ;
78492: LD_ADDR_VAR 0 12
78496: PUSH
78497: CALL_OW 44
78501: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78502: LD_VAR 0 12
78506: PPUSH
78507: LD_VAR 0 8
78511: PPUSH
78512: LD_INT 0
78514: PPUSH
78515: CALL 80509 0 3
// end ;
78519: GO 78473
78521: POP
78522: POP
// if tigers then
78523: LD_VAR 0 2
78527: IFFALSE 78611
// for i = 1 to tigers do
78529: LD_ADDR_VAR 0 11
78533: PUSH
78534: DOUBLE
78535: LD_INT 1
78537: DEC
78538: ST_TO_ADDR
78539: LD_VAR 0 2
78543: PUSH
78544: FOR_TO
78545: IFFALSE 78609
// begin hc_class = class_tiger ;
78547: LD_ADDR_OWVAR 28
78551: PUSH
78552: LD_INT 14
78554: ST_TO_ADDR
// hc_gallery =  ;
78555: LD_ADDR_OWVAR 33
78559: PUSH
78560: LD_STRING 
78562: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
78563: LD_ADDR_OWVAR 35
78567: PUSH
78568: LD_INT 7
78570: NEG
78571: PPUSH
78572: LD_INT 7
78574: PPUSH
78575: CALL_OW 12
78579: ST_TO_ADDR
// animal := CreateHuman ;
78580: LD_ADDR_VAR 0 12
78584: PUSH
78585: CALL_OW 44
78589: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78590: LD_VAR 0 12
78594: PPUSH
78595: LD_VAR 0 8
78599: PPUSH
78600: LD_INT 0
78602: PPUSH
78603: CALL 80509 0 3
// end ;
78607: GO 78544
78609: POP
78610: POP
// if apemans then
78611: LD_VAR 0 3
78615: IFFALSE 78738
// for i = 1 to apemans do
78617: LD_ADDR_VAR 0 11
78621: PUSH
78622: DOUBLE
78623: LD_INT 1
78625: DEC
78626: ST_TO_ADDR
78627: LD_VAR 0 3
78631: PUSH
78632: FOR_TO
78633: IFFALSE 78736
// begin hc_class = class_apeman ;
78635: LD_ADDR_OWVAR 28
78639: PUSH
78640: LD_INT 12
78642: ST_TO_ADDR
// hc_gallery =  ;
78643: LD_ADDR_OWVAR 33
78647: PUSH
78648: LD_STRING 
78650: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
78651: LD_ADDR_OWVAR 35
78655: PUSH
78656: LD_INT 2
78658: NEG
78659: PPUSH
78660: LD_INT 2
78662: PPUSH
78663: CALL_OW 12
78667: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
78668: LD_ADDR_OWVAR 31
78672: PUSH
78673: LD_INT 1
78675: PPUSH
78676: LD_INT 3
78678: PPUSH
78679: CALL_OW 12
78683: PUSH
78684: LD_INT 1
78686: PPUSH
78687: LD_INT 3
78689: PPUSH
78690: CALL_OW 12
78694: PUSH
78695: LD_INT 0
78697: PUSH
78698: LD_INT 0
78700: PUSH
78701: EMPTY
78702: LIST
78703: LIST
78704: LIST
78705: LIST
78706: ST_TO_ADDR
// animal := CreateHuman ;
78707: LD_ADDR_VAR 0 12
78711: PUSH
78712: CALL_OW 44
78716: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78717: LD_VAR 0 12
78721: PPUSH
78722: LD_VAR 0 8
78726: PPUSH
78727: LD_INT 0
78729: PPUSH
78730: CALL 80509 0 3
// end ;
78734: GO 78632
78736: POP
78737: POP
// if enchidnas then
78738: LD_VAR 0 4
78742: IFFALSE 78809
// for i = 1 to enchidnas do
78744: LD_ADDR_VAR 0 11
78748: PUSH
78749: DOUBLE
78750: LD_INT 1
78752: DEC
78753: ST_TO_ADDR
78754: LD_VAR 0 4
78758: PUSH
78759: FOR_TO
78760: IFFALSE 78807
// begin hc_class = 13 ;
78762: LD_ADDR_OWVAR 28
78766: PUSH
78767: LD_INT 13
78769: ST_TO_ADDR
// hc_gallery =  ;
78770: LD_ADDR_OWVAR 33
78774: PUSH
78775: LD_STRING 
78777: ST_TO_ADDR
// animal := CreateHuman ;
78778: LD_ADDR_VAR 0 12
78782: PUSH
78783: CALL_OW 44
78787: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78788: LD_VAR 0 12
78792: PPUSH
78793: LD_VAR 0 8
78797: PPUSH
78798: LD_INT 0
78800: PPUSH
78801: CALL 80509 0 3
// end ;
78805: GO 78759
78807: POP
78808: POP
// if fishes then
78809: LD_VAR 0 7
78813: IFFALSE 78880
// for i = 1 to fishes do
78815: LD_ADDR_VAR 0 11
78819: PUSH
78820: DOUBLE
78821: LD_INT 1
78823: DEC
78824: ST_TO_ADDR
78825: LD_VAR 0 7
78829: PUSH
78830: FOR_TO
78831: IFFALSE 78878
// begin hc_class = 20 ;
78833: LD_ADDR_OWVAR 28
78837: PUSH
78838: LD_INT 20
78840: ST_TO_ADDR
// hc_gallery =  ;
78841: LD_ADDR_OWVAR 33
78845: PUSH
78846: LD_STRING 
78848: ST_TO_ADDR
// animal := CreateHuman ;
78849: LD_ADDR_VAR 0 12
78853: PUSH
78854: CALL_OW 44
78858: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
78859: LD_VAR 0 12
78863: PPUSH
78864: LD_VAR 0 9
78868: PPUSH
78869: LD_INT 0
78871: PPUSH
78872: CALL 80509 0 3
// end ;
78876: GO 78830
78878: POP
78879: POP
// end ;
78880: LD_VAR 0 10
78884: RET
// export function WantHeal ( sci , unit ) ; begin
78885: LD_INT 0
78887: PPUSH
// if GetTaskList ( sci ) > 0 then
78888: LD_VAR 0 1
78892: PPUSH
78893: CALL_OW 437
78897: PUSH
78898: LD_INT 0
78900: GREATER
78901: IFFALSE 78971
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
78903: LD_VAR 0 1
78907: PPUSH
78908: CALL_OW 437
78912: PUSH
78913: LD_INT 1
78915: ARRAY
78916: PUSH
78917: LD_INT 1
78919: ARRAY
78920: PUSH
78921: LD_STRING l
78923: EQUAL
78924: PUSH
78925: LD_VAR 0 1
78929: PPUSH
78930: CALL_OW 437
78934: PUSH
78935: LD_INT 1
78937: ARRAY
78938: PUSH
78939: LD_INT 4
78941: ARRAY
78942: PUSH
78943: LD_VAR 0 2
78947: EQUAL
78948: AND
78949: IFFALSE 78961
// result := true else
78951: LD_ADDR_VAR 0 3
78955: PUSH
78956: LD_INT 1
78958: ST_TO_ADDR
78959: GO 78969
// result := false ;
78961: LD_ADDR_VAR 0 3
78965: PUSH
78966: LD_INT 0
78968: ST_TO_ADDR
// end else
78969: GO 78979
// result := false ;
78971: LD_ADDR_VAR 0 3
78975: PUSH
78976: LD_INT 0
78978: ST_TO_ADDR
// end ;
78979: LD_VAR 0 3
78983: RET
// export function HealTarget ( sci ) ; begin
78984: LD_INT 0
78986: PPUSH
// if not sci then
78987: LD_VAR 0 1
78991: NOT
78992: IFFALSE 78996
// exit ;
78994: GO 79061
// result := 0 ;
78996: LD_ADDR_VAR 0 2
79000: PUSH
79001: LD_INT 0
79003: ST_TO_ADDR
// if GetTaskList ( sci ) then
79004: LD_VAR 0 1
79008: PPUSH
79009: CALL_OW 437
79013: IFFALSE 79061
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
79015: LD_VAR 0 1
79019: PPUSH
79020: CALL_OW 437
79024: PUSH
79025: LD_INT 1
79027: ARRAY
79028: PUSH
79029: LD_INT 1
79031: ARRAY
79032: PUSH
79033: LD_STRING l
79035: EQUAL
79036: IFFALSE 79061
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
79038: LD_ADDR_VAR 0 2
79042: PUSH
79043: LD_VAR 0 1
79047: PPUSH
79048: CALL_OW 437
79052: PUSH
79053: LD_INT 1
79055: ARRAY
79056: PUSH
79057: LD_INT 4
79059: ARRAY
79060: ST_TO_ADDR
// end ;
79061: LD_VAR 0 2
79065: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
79066: LD_INT 0
79068: PPUSH
79069: PPUSH
79070: PPUSH
79071: PPUSH
// if not base_units then
79072: LD_VAR 0 1
79076: NOT
79077: IFFALSE 79081
// exit ;
79079: GO 79168
// result := false ;
79081: LD_ADDR_VAR 0 2
79085: PUSH
79086: LD_INT 0
79088: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
79089: LD_ADDR_VAR 0 5
79093: PUSH
79094: LD_VAR 0 1
79098: PPUSH
79099: LD_INT 21
79101: PUSH
79102: LD_INT 3
79104: PUSH
79105: EMPTY
79106: LIST
79107: LIST
79108: PPUSH
79109: CALL_OW 72
79113: ST_TO_ADDR
// if not tmp then
79114: LD_VAR 0 5
79118: NOT
79119: IFFALSE 79123
// exit ;
79121: GO 79168
// for i in tmp do
79123: LD_ADDR_VAR 0 3
79127: PUSH
79128: LD_VAR 0 5
79132: PUSH
79133: FOR_IN
79134: IFFALSE 79166
// begin result := EnemyInRange ( i , 22 ) ;
79136: LD_ADDR_VAR 0 2
79140: PUSH
79141: LD_VAR 0 3
79145: PPUSH
79146: LD_INT 22
79148: PPUSH
79149: CALL 76755 0 2
79153: ST_TO_ADDR
// if result then
79154: LD_VAR 0 2
79158: IFFALSE 79164
// exit ;
79160: POP
79161: POP
79162: GO 79168
// end ;
79164: GO 79133
79166: POP
79167: POP
// end ;
79168: LD_VAR 0 2
79172: RET
// export function FilterByTag ( units , tag ) ; begin
79173: LD_INT 0
79175: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
79176: LD_ADDR_VAR 0 3
79180: PUSH
79181: LD_VAR 0 1
79185: PPUSH
79186: LD_INT 120
79188: PUSH
79189: LD_VAR 0 2
79193: PUSH
79194: EMPTY
79195: LIST
79196: LIST
79197: PPUSH
79198: CALL_OW 72
79202: ST_TO_ADDR
// end ;
79203: LD_VAR 0 3
79207: RET
// export function IsDriver ( un ) ; begin
79208: LD_INT 0
79210: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
79211: LD_ADDR_VAR 0 2
79215: PUSH
79216: LD_VAR 0 1
79220: PUSH
79221: LD_INT 55
79223: PUSH
79224: EMPTY
79225: LIST
79226: PPUSH
79227: CALL_OW 69
79231: IN
79232: ST_TO_ADDR
// end ;
79233: LD_VAR 0 2
79237: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
79238: LD_INT 0
79240: PPUSH
79241: PPUSH
// list := [ ] ;
79242: LD_ADDR_VAR 0 5
79246: PUSH
79247: EMPTY
79248: ST_TO_ADDR
// case d of 0 :
79249: LD_VAR 0 3
79253: PUSH
79254: LD_INT 0
79256: DOUBLE
79257: EQUAL
79258: IFTRUE 79262
79260: GO 79395
79262: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
79263: LD_ADDR_VAR 0 5
79267: PUSH
79268: LD_VAR 0 1
79272: PUSH
79273: LD_INT 4
79275: MINUS
79276: PUSH
79277: LD_VAR 0 2
79281: PUSH
79282: LD_INT 4
79284: MINUS
79285: PUSH
79286: LD_INT 2
79288: PUSH
79289: EMPTY
79290: LIST
79291: LIST
79292: LIST
79293: PUSH
79294: LD_VAR 0 1
79298: PUSH
79299: LD_INT 3
79301: MINUS
79302: PUSH
79303: LD_VAR 0 2
79307: PUSH
79308: LD_INT 1
79310: PUSH
79311: EMPTY
79312: LIST
79313: LIST
79314: LIST
79315: PUSH
79316: LD_VAR 0 1
79320: PUSH
79321: LD_INT 4
79323: PLUS
79324: PUSH
79325: LD_VAR 0 2
79329: PUSH
79330: LD_INT 4
79332: PUSH
79333: EMPTY
79334: LIST
79335: LIST
79336: LIST
79337: PUSH
79338: LD_VAR 0 1
79342: PUSH
79343: LD_INT 3
79345: PLUS
79346: PUSH
79347: LD_VAR 0 2
79351: PUSH
79352: LD_INT 3
79354: PLUS
79355: PUSH
79356: LD_INT 5
79358: PUSH
79359: EMPTY
79360: LIST
79361: LIST
79362: LIST
79363: PUSH
79364: LD_VAR 0 1
79368: PUSH
79369: LD_VAR 0 2
79373: PUSH
79374: LD_INT 4
79376: PLUS
79377: PUSH
79378: LD_INT 0
79380: PUSH
79381: EMPTY
79382: LIST
79383: LIST
79384: LIST
79385: PUSH
79386: EMPTY
79387: LIST
79388: LIST
79389: LIST
79390: LIST
79391: LIST
79392: ST_TO_ADDR
// end ; 1 :
79393: GO 80093
79395: LD_INT 1
79397: DOUBLE
79398: EQUAL
79399: IFTRUE 79403
79401: GO 79536
79403: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
79404: LD_ADDR_VAR 0 5
79408: PUSH
79409: LD_VAR 0 1
79413: PUSH
79414: LD_VAR 0 2
79418: PUSH
79419: LD_INT 4
79421: MINUS
79422: PUSH
79423: LD_INT 3
79425: PUSH
79426: EMPTY
79427: LIST
79428: LIST
79429: LIST
79430: PUSH
79431: LD_VAR 0 1
79435: PUSH
79436: LD_INT 3
79438: MINUS
79439: PUSH
79440: LD_VAR 0 2
79444: PUSH
79445: LD_INT 3
79447: MINUS
79448: PUSH
79449: LD_INT 2
79451: PUSH
79452: EMPTY
79453: LIST
79454: LIST
79455: LIST
79456: PUSH
79457: LD_VAR 0 1
79461: PUSH
79462: LD_INT 4
79464: MINUS
79465: PUSH
79466: LD_VAR 0 2
79470: PUSH
79471: LD_INT 1
79473: PUSH
79474: EMPTY
79475: LIST
79476: LIST
79477: LIST
79478: PUSH
79479: LD_VAR 0 1
79483: PUSH
79484: LD_VAR 0 2
79488: PUSH
79489: LD_INT 3
79491: PLUS
79492: PUSH
79493: LD_INT 0
79495: PUSH
79496: EMPTY
79497: LIST
79498: LIST
79499: LIST
79500: PUSH
79501: LD_VAR 0 1
79505: PUSH
79506: LD_INT 4
79508: PLUS
79509: PUSH
79510: LD_VAR 0 2
79514: PUSH
79515: LD_INT 4
79517: PLUS
79518: PUSH
79519: LD_INT 5
79521: PUSH
79522: EMPTY
79523: LIST
79524: LIST
79525: LIST
79526: PUSH
79527: EMPTY
79528: LIST
79529: LIST
79530: LIST
79531: LIST
79532: LIST
79533: ST_TO_ADDR
// end ; 2 :
79534: GO 80093
79536: LD_INT 2
79538: DOUBLE
79539: EQUAL
79540: IFTRUE 79544
79542: GO 79673
79544: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
79545: LD_ADDR_VAR 0 5
79549: PUSH
79550: LD_VAR 0 1
79554: PUSH
79555: LD_VAR 0 2
79559: PUSH
79560: LD_INT 3
79562: MINUS
79563: PUSH
79564: LD_INT 3
79566: PUSH
79567: EMPTY
79568: LIST
79569: LIST
79570: LIST
79571: PUSH
79572: LD_VAR 0 1
79576: PUSH
79577: LD_INT 4
79579: PLUS
79580: PUSH
79581: LD_VAR 0 2
79585: PUSH
79586: LD_INT 4
79588: PUSH
79589: EMPTY
79590: LIST
79591: LIST
79592: LIST
79593: PUSH
79594: LD_VAR 0 1
79598: PUSH
79599: LD_VAR 0 2
79603: PUSH
79604: LD_INT 4
79606: PLUS
79607: PUSH
79608: LD_INT 0
79610: PUSH
79611: EMPTY
79612: LIST
79613: LIST
79614: LIST
79615: PUSH
79616: LD_VAR 0 1
79620: PUSH
79621: LD_INT 3
79623: MINUS
79624: PUSH
79625: LD_VAR 0 2
79629: PUSH
79630: LD_INT 1
79632: PUSH
79633: EMPTY
79634: LIST
79635: LIST
79636: LIST
79637: PUSH
79638: LD_VAR 0 1
79642: PUSH
79643: LD_INT 4
79645: MINUS
79646: PUSH
79647: LD_VAR 0 2
79651: PUSH
79652: LD_INT 4
79654: MINUS
79655: PUSH
79656: LD_INT 2
79658: PUSH
79659: EMPTY
79660: LIST
79661: LIST
79662: LIST
79663: PUSH
79664: EMPTY
79665: LIST
79666: LIST
79667: LIST
79668: LIST
79669: LIST
79670: ST_TO_ADDR
// end ; 3 :
79671: GO 80093
79673: LD_INT 3
79675: DOUBLE
79676: EQUAL
79677: IFTRUE 79681
79679: GO 79814
79681: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
79682: LD_ADDR_VAR 0 5
79686: PUSH
79687: LD_VAR 0 1
79691: PUSH
79692: LD_INT 3
79694: PLUS
79695: PUSH
79696: LD_VAR 0 2
79700: PUSH
79701: LD_INT 4
79703: PUSH
79704: EMPTY
79705: LIST
79706: LIST
79707: LIST
79708: PUSH
79709: LD_VAR 0 1
79713: PUSH
79714: LD_INT 4
79716: PLUS
79717: PUSH
79718: LD_VAR 0 2
79722: PUSH
79723: LD_INT 4
79725: PLUS
79726: PUSH
79727: LD_INT 5
79729: PUSH
79730: EMPTY
79731: LIST
79732: LIST
79733: LIST
79734: PUSH
79735: LD_VAR 0 1
79739: PUSH
79740: LD_INT 4
79742: MINUS
79743: PUSH
79744: LD_VAR 0 2
79748: PUSH
79749: LD_INT 1
79751: PUSH
79752: EMPTY
79753: LIST
79754: LIST
79755: LIST
79756: PUSH
79757: LD_VAR 0 1
79761: PUSH
79762: LD_VAR 0 2
79766: PUSH
79767: LD_INT 4
79769: MINUS
79770: PUSH
79771: LD_INT 3
79773: PUSH
79774: EMPTY
79775: LIST
79776: LIST
79777: LIST
79778: PUSH
79779: LD_VAR 0 1
79783: PUSH
79784: LD_INT 3
79786: MINUS
79787: PUSH
79788: LD_VAR 0 2
79792: PUSH
79793: LD_INT 3
79795: MINUS
79796: PUSH
79797: LD_INT 2
79799: PUSH
79800: EMPTY
79801: LIST
79802: LIST
79803: LIST
79804: PUSH
79805: EMPTY
79806: LIST
79807: LIST
79808: LIST
79809: LIST
79810: LIST
79811: ST_TO_ADDR
// end ; 4 :
79812: GO 80093
79814: LD_INT 4
79816: DOUBLE
79817: EQUAL
79818: IFTRUE 79822
79820: GO 79955
79822: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
79823: LD_ADDR_VAR 0 5
79827: PUSH
79828: LD_VAR 0 1
79832: PUSH
79833: LD_VAR 0 2
79837: PUSH
79838: LD_INT 4
79840: PLUS
79841: PUSH
79842: LD_INT 0
79844: PUSH
79845: EMPTY
79846: LIST
79847: LIST
79848: LIST
79849: PUSH
79850: LD_VAR 0 1
79854: PUSH
79855: LD_INT 3
79857: PLUS
79858: PUSH
79859: LD_VAR 0 2
79863: PUSH
79864: LD_INT 3
79866: PLUS
79867: PUSH
79868: LD_INT 5
79870: PUSH
79871: EMPTY
79872: LIST
79873: LIST
79874: LIST
79875: PUSH
79876: LD_VAR 0 1
79880: PUSH
79881: LD_INT 4
79883: PLUS
79884: PUSH
79885: LD_VAR 0 2
79889: PUSH
79890: LD_INT 4
79892: PUSH
79893: EMPTY
79894: LIST
79895: LIST
79896: LIST
79897: PUSH
79898: LD_VAR 0 1
79902: PUSH
79903: LD_VAR 0 2
79907: PUSH
79908: LD_INT 3
79910: MINUS
79911: PUSH
79912: LD_INT 3
79914: PUSH
79915: EMPTY
79916: LIST
79917: LIST
79918: LIST
79919: PUSH
79920: LD_VAR 0 1
79924: PUSH
79925: LD_INT 4
79927: MINUS
79928: PUSH
79929: LD_VAR 0 2
79933: PUSH
79934: LD_INT 4
79936: MINUS
79937: PUSH
79938: LD_INT 2
79940: PUSH
79941: EMPTY
79942: LIST
79943: LIST
79944: LIST
79945: PUSH
79946: EMPTY
79947: LIST
79948: LIST
79949: LIST
79950: LIST
79951: LIST
79952: ST_TO_ADDR
// end ; 5 :
79953: GO 80093
79955: LD_INT 5
79957: DOUBLE
79958: EQUAL
79959: IFTRUE 79963
79961: GO 80092
79963: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
79964: LD_ADDR_VAR 0 5
79968: PUSH
79969: LD_VAR 0 1
79973: PUSH
79974: LD_INT 4
79976: MINUS
79977: PUSH
79978: LD_VAR 0 2
79982: PUSH
79983: LD_INT 1
79985: PUSH
79986: EMPTY
79987: LIST
79988: LIST
79989: LIST
79990: PUSH
79991: LD_VAR 0 1
79995: PUSH
79996: LD_VAR 0 2
80000: PUSH
80001: LD_INT 4
80003: MINUS
80004: PUSH
80005: LD_INT 3
80007: PUSH
80008: EMPTY
80009: LIST
80010: LIST
80011: LIST
80012: PUSH
80013: LD_VAR 0 1
80017: PUSH
80018: LD_INT 4
80020: PLUS
80021: PUSH
80022: LD_VAR 0 2
80026: PUSH
80027: LD_INT 4
80029: PLUS
80030: PUSH
80031: LD_INT 5
80033: PUSH
80034: EMPTY
80035: LIST
80036: LIST
80037: LIST
80038: PUSH
80039: LD_VAR 0 1
80043: PUSH
80044: LD_INT 3
80046: PLUS
80047: PUSH
80048: LD_VAR 0 2
80052: PUSH
80053: LD_INT 4
80055: PUSH
80056: EMPTY
80057: LIST
80058: LIST
80059: LIST
80060: PUSH
80061: LD_VAR 0 1
80065: PUSH
80066: LD_VAR 0 2
80070: PUSH
80071: LD_INT 3
80073: PLUS
80074: PUSH
80075: LD_INT 0
80077: PUSH
80078: EMPTY
80079: LIST
80080: LIST
80081: LIST
80082: PUSH
80083: EMPTY
80084: LIST
80085: LIST
80086: LIST
80087: LIST
80088: LIST
80089: ST_TO_ADDR
// end ; end ;
80090: GO 80093
80092: POP
// result := list ;
80093: LD_ADDR_VAR 0 4
80097: PUSH
80098: LD_VAR 0 5
80102: ST_TO_ADDR
// end ;
80103: LD_VAR 0 4
80107: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
80108: LD_INT 0
80110: PPUSH
80111: PPUSH
80112: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
80113: LD_VAR 0 1
80117: NOT
80118: PUSH
80119: LD_VAR 0 2
80123: PUSH
80124: LD_INT 1
80126: PUSH
80127: LD_INT 2
80129: PUSH
80130: LD_INT 3
80132: PUSH
80133: LD_INT 4
80135: PUSH
80136: EMPTY
80137: LIST
80138: LIST
80139: LIST
80140: LIST
80141: IN
80142: NOT
80143: OR
80144: IFFALSE 80148
// exit ;
80146: GO 80231
// tmp := [ ] ;
80148: LD_ADDR_VAR 0 5
80152: PUSH
80153: EMPTY
80154: ST_TO_ADDR
// for i in units do
80155: LD_ADDR_VAR 0 4
80159: PUSH
80160: LD_VAR 0 1
80164: PUSH
80165: FOR_IN
80166: IFFALSE 80200
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
80168: LD_ADDR_VAR 0 5
80172: PUSH
80173: LD_VAR 0 5
80177: PPUSH
80178: LD_VAR 0 4
80182: PPUSH
80183: LD_VAR 0 2
80187: PPUSH
80188: CALL_OW 259
80192: PPUSH
80193: CALL 81592 0 2
80197: ST_TO_ADDR
80198: GO 80165
80200: POP
80201: POP
// if not tmp then
80202: LD_VAR 0 5
80206: NOT
80207: IFFALSE 80211
// exit ;
80209: GO 80231
// result := SortListByListDesc ( units , tmp ) ;
80211: LD_ADDR_VAR 0 3
80215: PUSH
80216: LD_VAR 0 1
80220: PPUSH
80221: LD_VAR 0 5
80225: PPUSH
80226: CALL_OW 77
80230: ST_TO_ADDR
// end ;
80231: LD_VAR 0 3
80235: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
80236: LD_INT 0
80238: PPUSH
80239: PPUSH
80240: PPUSH
// result := false ;
80241: LD_ADDR_VAR 0 3
80245: PUSH
80246: LD_INT 0
80248: ST_TO_ADDR
// if not building then
80249: LD_VAR 0 2
80253: NOT
80254: IFFALSE 80258
// exit ;
80256: GO 80396
// x := GetX ( building ) ;
80258: LD_ADDR_VAR 0 4
80262: PUSH
80263: LD_VAR 0 2
80267: PPUSH
80268: CALL_OW 250
80272: ST_TO_ADDR
// y := GetY ( building ) ;
80273: LD_ADDR_VAR 0 5
80277: PUSH
80278: LD_VAR 0 2
80282: PPUSH
80283: CALL_OW 251
80287: ST_TO_ADDR
// if not x or not y then
80288: LD_VAR 0 4
80292: NOT
80293: PUSH
80294: LD_VAR 0 5
80298: NOT
80299: OR
80300: IFFALSE 80304
// exit ;
80302: GO 80396
// if GetTaskList ( unit ) then
80304: LD_VAR 0 1
80308: PPUSH
80309: CALL_OW 437
80313: IFFALSE 80396
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
80315: LD_STRING e
80317: PUSH
80318: LD_VAR 0 1
80322: PPUSH
80323: CALL_OW 437
80327: PUSH
80328: LD_INT 1
80330: ARRAY
80331: PUSH
80332: LD_INT 1
80334: ARRAY
80335: EQUAL
80336: PUSH
80337: LD_VAR 0 4
80341: PUSH
80342: LD_VAR 0 1
80346: PPUSH
80347: CALL_OW 437
80351: PUSH
80352: LD_INT 1
80354: ARRAY
80355: PUSH
80356: LD_INT 2
80358: ARRAY
80359: EQUAL
80360: AND
80361: PUSH
80362: LD_VAR 0 5
80366: PUSH
80367: LD_VAR 0 1
80371: PPUSH
80372: CALL_OW 437
80376: PUSH
80377: LD_INT 1
80379: ARRAY
80380: PUSH
80381: LD_INT 3
80383: ARRAY
80384: EQUAL
80385: AND
80386: IFFALSE 80396
// result := true end ;
80388: LD_ADDR_VAR 0 3
80392: PUSH
80393: LD_INT 1
80395: ST_TO_ADDR
// end ;
80396: LD_VAR 0 3
80400: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
80401: LD_INT 0
80403: PPUSH
// result := false ;
80404: LD_ADDR_VAR 0 4
80408: PUSH
80409: LD_INT 0
80411: ST_TO_ADDR
// if GetTaskList ( unit ) then
80412: LD_VAR 0 1
80416: PPUSH
80417: CALL_OW 437
80421: IFFALSE 80504
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
80423: LD_STRING M
80425: PUSH
80426: LD_VAR 0 1
80430: PPUSH
80431: CALL_OW 437
80435: PUSH
80436: LD_INT 1
80438: ARRAY
80439: PUSH
80440: LD_INT 1
80442: ARRAY
80443: EQUAL
80444: PUSH
80445: LD_VAR 0 2
80449: PUSH
80450: LD_VAR 0 1
80454: PPUSH
80455: CALL_OW 437
80459: PUSH
80460: LD_INT 1
80462: ARRAY
80463: PUSH
80464: LD_INT 2
80466: ARRAY
80467: EQUAL
80468: AND
80469: PUSH
80470: LD_VAR 0 3
80474: PUSH
80475: LD_VAR 0 1
80479: PPUSH
80480: CALL_OW 437
80484: PUSH
80485: LD_INT 1
80487: ARRAY
80488: PUSH
80489: LD_INT 3
80491: ARRAY
80492: EQUAL
80493: AND
80494: IFFALSE 80504
// result := true ;
80496: LD_ADDR_VAR 0 4
80500: PUSH
80501: LD_INT 1
80503: ST_TO_ADDR
// end ; end ;
80504: LD_VAR 0 4
80508: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
80509: LD_INT 0
80511: PPUSH
80512: PPUSH
80513: PPUSH
80514: PPUSH
// if not unit or not area then
80515: LD_VAR 0 1
80519: NOT
80520: PUSH
80521: LD_VAR 0 2
80525: NOT
80526: OR
80527: IFFALSE 80531
// exit ;
80529: GO 80695
// tmp := AreaToList ( area , i ) ;
80531: LD_ADDR_VAR 0 6
80535: PUSH
80536: LD_VAR 0 2
80540: PPUSH
80541: LD_VAR 0 5
80545: PPUSH
80546: CALL_OW 517
80550: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
80551: LD_ADDR_VAR 0 5
80555: PUSH
80556: DOUBLE
80557: LD_INT 1
80559: DEC
80560: ST_TO_ADDR
80561: LD_VAR 0 6
80565: PUSH
80566: LD_INT 1
80568: ARRAY
80569: PUSH
80570: FOR_TO
80571: IFFALSE 80693
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
80573: LD_ADDR_VAR 0 7
80577: PUSH
80578: LD_VAR 0 6
80582: PUSH
80583: LD_INT 1
80585: ARRAY
80586: PUSH
80587: LD_VAR 0 5
80591: ARRAY
80592: PUSH
80593: LD_VAR 0 6
80597: PUSH
80598: LD_INT 2
80600: ARRAY
80601: PUSH
80602: LD_VAR 0 5
80606: ARRAY
80607: PUSH
80608: EMPTY
80609: LIST
80610: LIST
80611: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
80612: LD_VAR 0 7
80616: PUSH
80617: LD_INT 1
80619: ARRAY
80620: PPUSH
80621: LD_VAR 0 7
80625: PUSH
80626: LD_INT 2
80628: ARRAY
80629: PPUSH
80630: CALL_OW 428
80634: PUSH
80635: LD_INT 0
80637: EQUAL
80638: IFFALSE 80691
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
80640: LD_VAR 0 1
80644: PPUSH
80645: LD_VAR 0 7
80649: PUSH
80650: LD_INT 1
80652: ARRAY
80653: PPUSH
80654: LD_VAR 0 7
80658: PUSH
80659: LD_INT 2
80661: ARRAY
80662: PPUSH
80663: LD_VAR 0 3
80667: PPUSH
80668: CALL_OW 48
// result := IsPlaced ( unit ) ;
80672: LD_ADDR_VAR 0 4
80676: PUSH
80677: LD_VAR 0 1
80681: PPUSH
80682: CALL_OW 305
80686: ST_TO_ADDR
// exit ;
80687: POP
80688: POP
80689: GO 80695
// end ; end ;
80691: GO 80570
80693: POP
80694: POP
// end ;
80695: LD_VAR 0 4
80699: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
80700: LD_INT 0
80702: PPUSH
80703: PPUSH
80704: PPUSH
// if not side or side > 8 then
80705: LD_VAR 0 1
80709: NOT
80710: PUSH
80711: LD_VAR 0 1
80715: PUSH
80716: LD_INT 8
80718: GREATER
80719: OR
80720: IFFALSE 80724
// exit ;
80722: GO 80911
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
80724: LD_ADDR_VAR 0 4
80728: PUSH
80729: LD_INT 22
80731: PUSH
80732: LD_VAR 0 1
80736: PUSH
80737: EMPTY
80738: LIST
80739: LIST
80740: PUSH
80741: LD_INT 21
80743: PUSH
80744: LD_INT 3
80746: PUSH
80747: EMPTY
80748: LIST
80749: LIST
80750: PUSH
80751: EMPTY
80752: LIST
80753: LIST
80754: PPUSH
80755: CALL_OW 69
80759: ST_TO_ADDR
// if not tmp then
80760: LD_VAR 0 4
80764: NOT
80765: IFFALSE 80769
// exit ;
80767: GO 80911
// enable_addtolog := true ;
80769: LD_ADDR_OWVAR 81
80773: PUSH
80774: LD_INT 1
80776: ST_TO_ADDR
// AddToLog ( [ ) ;
80777: LD_STRING [
80779: PPUSH
80780: CALL_OW 561
// for i in tmp do
80784: LD_ADDR_VAR 0 3
80788: PUSH
80789: LD_VAR 0 4
80793: PUSH
80794: FOR_IN
80795: IFFALSE 80902
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
80797: LD_STRING [
80799: PUSH
80800: LD_VAR 0 3
80804: PPUSH
80805: CALL_OW 266
80809: STR
80810: PUSH
80811: LD_STRING , 
80813: STR
80814: PUSH
80815: LD_VAR 0 3
80819: PPUSH
80820: CALL_OW 250
80824: STR
80825: PUSH
80826: LD_STRING , 
80828: STR
80829: PUSH
80830: LD_VAR 0 3
80834: PPUSH
80835: CALL_OW 251
80839: STR
80840: PUSH
80841: LD_STRING , 
80843: STR
80844: PUSH
80845: LD_VAR 0 3
80849: PPUSH
80850: CALL_OW 254
80854: STR
80855: PUSH
80856: LD_STRING , 
80858: STR
80859: PUSH
80860: LD_VAR 0 3
80864: PPUSH
80865: LD_INT 1
80867: PPUSH
80868: CALL_OW 268
80872: STR
80873: PUSH
80874: LD_STRING , 
80876: STR
80877: PUSH
80878: LD_VAR 0 3
80882: PPUSH
80883: LD_INT 2
80885: PPUSH
80886: CALL_OW 268
80890: STR
80891: PUSH
80892: LD_STRING ],
80894: STR
80895: PPUSH
80896: CALL_OW 561
// end ;
80900: GO 80794
80902: POP
80903: POP
// AddToLog ( ]; ) ;
80904: LD_STRING ];
80906: PPUSH
80907: CALL_OW 561
// end ;
80911: LD_VAR 0 2
80915: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
80916: LD_INT 0
80918: PPUSH
80919: PPUSH
80920: PPUSH
80921: PPUSH
80922: PPUSH
// if not area or not rate or not max then
80923: LD_VAR 0 1
80927: NOT
80928: PUSH
80929: LD_VAR 0 2
80933: NOT
80934: OR
80935: PUSH
80936: LD_VAR 0 4
80940: NOT
80941: OR
80942: IFFALSE 80946
// exit ;
80944: GO 81135
// while 1 do
80946: LD_INT 1
80948: IFFALSE 81135
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
80950: LD_ADDR_VAR 0 9
80954: PUSH
80955: LD_VAR 0 1
80959: PPUSH
80960: LD_INT 1
80962: PPUSH
80963: CALL_OW 287
80967: PUSH
80968: LD_INT 10
80970: MUL
80971: ST_TO_ADDR
// r := rate / 10 ;
80972: LD_ADDR_VAR 0 7
80976: PUSH
80977: LD_VAR 0 2
80981: PUSH
80982: LD_INT 10
80984: DIVREAL
80985: ST_TO_ADDR
// time := 1 1$00 ;
80986: LD_ADDR_VAR 0 8
80990: PUSH
80991: LD_INT 2100
80993: ST_TO_ADDR
// if amount < min then
80994: LD_VAR 0 9
80998: PUSH
80999: LD_VAR 0 3
81003: LESS
81004: IFFALSE 81022
// r := r * 2 else
81006: LD_ADDR_VAR 0 7
81010: PUSH
81011: LD_VAR 0 7
81015: PUSH
81016: LD_INT 2
81018: MUL
81019: ST_TO_ADDR
81020: GO 81048
// if amount > max then
81022: LD_VAR 0 9
81026: PUSH
81027: LD_VAR 0 4
81031: GREATER
81032: IFFALSE 81048
// r := r / 2 ;
81034: LD_ADDR_VAR 0 7
81038: PUSH
81039: LD_VAR 0 7
81043: PUSH
81044: LD_INT 2
81046: DIVREAL
81047: ST_TO_ADDR
// time := time / r ;
81048: LD_ADDR_VAR 0 8
81052: PUSH
81053: LD_VAR 0 8
81057: PUSH
81058: LD_VAR 0 7
81062: DIVREAL
81063: ST_TO_ADDR
// if time < 0 then
81064: LD_VAR 0 8
81068: PUSH
81069: LD_INT 0
81071: LESS
81072: IFFALSE 81089
// time := time * - 1 ;
81074: LD_ADDR_VAR 0 8
81078: PUSH
81079: LD_VAR 0 8
81083: PUSH
81084: LD_INT 1
81086: NEG
81087: MUL
81088: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
81089: LD_VAR 0 8
81093: PUSH
81094: LD_INT 35
81096: PPUSH
81097: LD_INT 875
81099: PPUSH
81100: CALL_OW 12
81104: PLUS
81105: PPUSH
81106: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
81110: LD_INT 1
81112: PPUSH
81113: LD_INT 5
81115: PPUSH
81116: CALL_OW 12
81120: PPUSH
81121: LD_VAR 0 1
81125: PPUSH
81126: LD_INT 1
81128: PPUSH
81129: CALL_OW 55
// end ;
81133: GO 80946
// end ;
81135: LD_VAR 0 5
81139: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
81140: LD_INT 0
81142: PPUSH
81143: PPUSH
81144: PPUSH
81145: PPUSH
81146: PPUSH
81147: PPUSH
81148: PPUSH
81149: PPUSH
// if not turrets or not factories then
81150: LD_VAR 0 1
81154: NOT
81155: PUSH
81156: LD_VAR 0 2
81160: NOT
81161: OR
81162: IFFALSE 81166
// exit ;
81164: GO 81473
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
81166: LD_ADDR_VAR 0 10
81170: PUSH
81171: LD_INT 5
81173: PUSH
81174: LD_INT 6
81176: PUSH
81177: EMPTY
81178: LIST
81179: LIST
81180: PUSH
81181: LD_INT 2
81183: PUSH
81184: LD_INT 4
81186: PUSH
81187: EMPTY
81188: LIST
81189: LIST
81190: PUSH
81191: LD_INT 3
81193: PUSH
81194: LD_INT 5
81196: PUSH
81197: EMPTY
81198: LIST
81199: LIST
81200: PUSH
81201: EMPTY
81202: LIST
81203: LIST
81204: LIST
81205: PUSH
81206: LD_INT 24
81208: PUSH
81209: LD_INT 25
81211: PUSH
81212: EMPTY
81213: LIST
81214: LIST
81215: PUSH
81216: LD_INT 23
81218: PUSH
81219: LD_INT 27
81221: PUSH
81222: EMPTY
81223: LIST
81224: LIST
81225: PUSH
81226: EMPTY
81227: LIST
81228: LIST
81229: PUSH
81230: LD_INT 42
81232: PUSH
81233: LD_INT 43
81235: PUSH
81236: EMPTY
81237: LIST
81238: LIST
81239: PUSH
81240: LD_INT 44
81242: PUSH
81243: LD_INT 46
81245: PUSH
81246: EMPTY
81247: LIST
81248: LIST
81249: PUSH
81250: LD_INT 45
81252: PUSH
81253: LD_INT 47
81255: PUSH
81256: EMPTY
81257: LIST
81258: LIST
81259: PUSH
81260: EMPTY
81261: LIST
81262: LIST
81263: LIST
81264: PUSH
81265: EMPTY
81266: LIST
81267: LIST
81268: LIST
81269: ST_TO_ADDR
// result := [ ] ;
81270: LD_ADDR_VAR 0 3
81274: PUSH
81275: EMPTY
81276: ST_TO_ADDR
// for i in turrets do
81277: LD_ADDR_VAR 0 4
81281: PUSH
81282: LD_VAR 0 1
81286: PUSH
81287: FOR_IN
81288: IFFALSE 81471
// begin nat := GetNation ( i ) ;
81290: LD_ADDR_VAR 0 7
81294: PUSH
81295: LD_VAR 0 4
81299: PPUSH
81300: CALL_OW 248
81304: ST_TO_ADDR
// weapon := 0 ;
81305: LD_ADDR_VAR 0 8
81309: PUSH
81310: LD_INT 0
81312: ST_TO_ADDR
// if not nat then
81313: LD_VAR 0 7
81317: NOT
81318: IFFALSE 81322
// continue ;
81320: GO 81287
// for j in list [ nat ] do
81322: LD_ADDR_VAR 0 5
81326: PUSH
81327: LD_VAR 0 10
81331: PUSH
81332: LD_VAR 0 7
81336: ARRAY
81337: PUSH
81338: FOR_IN
81339: IFFALSE 81380
// if GetBWeapon ( i ) = j [ 1 ] then
81341: LD_VAR 0 4
81345: PPUSH
81346: CALL_OW 269
81350: PUSH
81351: LD_VAR 0 5
81355: PUSH
81356: LD_INT 1
81358: ARRAY
81359: EQUAL
81360: IFFALSE 81378
// begin weapon := j [ 2 ] ;
81362: LD_ADDR_VAR 0 8
81366: PUSH
81367: LD_VAR 0 5
81371: PUSH
81372: LD_INT 2
81374: ARRAY
81375: ST_TO_ADDR
// break ;
81376: GO 81380
// end ;
81378: GO 81338
81380: POP
81381: POP
// if not weapon then
81382: LD_VAR 0 8
81386: NOT
81387: IFFALSE 81391
// continue ;
81389: GO 81287
// for k in factories do
81391: LD_ADDR_VAR 0 6
81395: PUSH
81396: LD_VAR 0 2
81400: PUSH
81401: FOR_IN
81402: IFFALSE 81467
// begin weapons := AvailableWeaponList ( k ) ;
81404: LD_ADDR_VAR 0 9
81408: PUSH
81409: LD_VAR 0 6
81413: PPUSH
81414: CALL_OW 478
81418: ST_TO_ADDR
// if not weapons then
81419: LD_VAR 0 9
81423: NOT
81424: IFFALSE 81428
// continue ;
81426: GO 81401
// if weapon in weapons then
81428: LD_VAR 0 8
81432: PUSH
81433: LD_VAR 0 9
81437: IN
81438: IFFALSE 81465
// begin result := [ i , weapon ] ;
81440: LD_ADDR_VAR 0 3
81444: PUSH
81445: LD_VAR 0 4
81449: PUSH
81450: LD_VAR 0 8
81454: PUSH
81455: EMPTY
81456: LIST
81457: LIST
81458: ST_TO_ADDR
// exit ;
81459: POP
81460: POP
81461: POP
81462: POP
81463: GO 81473
// end ; end ;
81465: GO 81401
81467: POP
81468: POP
// end ;
81469: GO 81287
81471: POP
81472: POP
// end ;
81473: LD_VAR 0 3
81477: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
81478: LD_INT 0
81480: PPUSH
// if not side or side > 8 then
81481: LD_VAR 0 3
81485: NOT
81486: PUSH
81487: LD_VAR 0 3
81491: PUSH
81492: LD_INT 8
81494: GREATER
81495: OR
81496: IFFALSE 81500
// exit ;
81498: GO 81559
// if not range then
81500: LD_VAR 0 4
81504: NOT
81505: IFFALSE 81516
// range := - 12 ;
81507: LD_ADDR_VAR 0 4
81511: PUSH
81512: LD_INT 12
81514: NEG
81515: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
81516: LD_VAR 0 1
81520: PPUSH
81521: LD_VAR 0 2
81525: PPUSH
81526: LD_VAR 0 3
81530: PPUSH
81531: LD_VAR 0 4
81535: PPUSH
81536: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
81540: LD_VAR 0 1
81544: PPUSH
81545: LD_VAR 0 2
81549: PPUSH
81550: LD_VAR 0 3
81554: PPUSH
81555: CALL_OW 331
// end ;
81559: LD_VAR 0 5
81563: RET
// export function Video ( mode ) ; begin
81564: LD_INT 0
81566: PPUSH
// ingame_video = mode ;
81567: LD_ADDR_OWVAR 52
81571: PUSH
81572: LD_VAR 0 1
81576: ST_TO_ADDR
// interface_hidden = mode ;
81577: LD_ADDR_OWVAR 54
81581: PUSH
81582: LD_VAR 0 1
81586: ST_TO_ADDR
// end ;
81587: LD_VAR 0 2
81591: RET
// export function Join ( array , element ) ; begin
81592: LD_INT 0
81594: PPUSH
// result := Replace ( array , array + 1 , element ) ;
81595: LD_ADDR_VAR 0 3
81599: PUSH
81600: LD_VAR 0 1
81604: PPUSH
81605: LD_VAR 0 1
81609: PUSH
81610: LD_INT 1
81612: PLUS
81613: PPUSH
81614: LD_VAR 0 2
81618: PPUSH
81619: CALL_OW 1
81623: ST_TO_ADDR
// end ;
81624: LD_VAR 0 3
81628: RET
// export function JoinUnion ( array , element ) ; begin
81629: LD_INT 0
81631: PPUSH
// result := array union element ;
81632: LD_ADDR_VAR 0 3
81636: PUSH
81637: LD_VAR 0 1
81641: PUSH
81642: LD_VAR 0 2
81646: UNION
81647: ST_TO_ADDR
// end ;
81648: LD_VAR 0 3
81652: RET
// export function GetBehemoths ( side ) ; begin
81653: LD_INT 0
81655: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
81656: LD_ADDR_VAR 0 2
81660: PUSH
81661: LD_INT 22
81663: PUSH
81664: LD_VAR 0 1
81668: PUSH
81669: EMPTY
81670: LIST
81671: LIST
81672: PUSH
81673: LD_INT 31
81675: PUSH
81676: LD_INT 25
81678: PUSH
81679: EMPTY
81680: LIST
81681: LIST
81682: PUSH
81683: EMPTY
81684: LIST
81685: LIST
81686: PPUSH
81687: CALL_OW 69
81691: ST_TO_ADDR
// end ;
81692: LD_VAR 0 2
81696: RET
// export function Shuffle ( array ) ; var i , index ; begin
81697: LD_INT 0
81699: PPUSH
81700: PPUSH
81701: PPUSH
// result := [ ] ;
81702: LD_ADDR_VAR 0 2
81706: PUSH
81707: EMPTY
81708: ST_TO_ADDR
// if not array then
81709: LD_VAR 0 1
81713: NOT
81714: IFFALSE 81718
// exit ;
81716: GO 81817
// Randomize ;
81718: CALL_OW 10
// for i = array downto 1 do
81722: LD_ADDR_VAR 0 3
81726: PUSH
81727: DOUBLE
81728: LD_VAR 0 1
81732: INC
81733: ST_TO_ADDR
81734: LD_INT 1
81736: PUSH
81737: FOR_DOWNTO
81738: IFFALSE 81815
// begin index := rand ( 1 , array ) ;
81740: LD_ADDR_VAR 0 4
81744: PUSH
81745: LD_INT 1
81747: PPUSH
81748: LD_VAR 0 1
81752: PPUSH
81753: CALL_OW 12
81757: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
81758: LD_ADDR_VAR 0 2
81762: PUSH
81763: LD_VAR 0 2
81767: PPUSH
81768: LD_VAR 0 2
81772: PUSH
81773: LD_INT 1
81775: PLUS
81776: PPUSH
81777: LD_VAR 0 1
81781: PUSH
81782: LD_VAR 0 4
81786: ARRAY
81787: PPUSH
81788: CALL_OW 2
81792: ST_TO_ADDR
// array := Delete ( array , index ) ;
81793: LD_ADDR_VAR 0 1
81797: PUSH
81798: LD_VAR 0 1
81802: PPUSH
81803: LD_VAR 0 4
81807: PPUSH
81808: CALL_OW 3
81812: ST_TO_ADDR
// end ;
81813: GO 81737
81815: POP
81816: POP
// end ;
81817: LD_VAR 0 2
81821: RET
// export function GetBaseMaterials ( base ) ; begin
81822: LD_INT 0
81824: PPUSH
// result := [ 0 , 0 , 0 ] ;
81825: LD_ADDR_VAR 0 2
81829: PUSH
81830: LD_INT 0
81832: PUSH
81833: LD_INT 0
81835: PUSH
81836: LD_INT 0
81838: PUSH
81839: EMPTY
81840: LIST
81841: LIST
81842: LIST
81843: ST_TO_ADDR
// if not base then
81844: LD_VAR 0 1
81848: NOT
81849: IFFALSE 81853
// exit ;
81851: GO 81902
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
81853: LD_ADDR_VAR 0 2
81857: PUSH
81858: LD_VAR 0 1
81862: PPUSH
81863: LD_INT 1
81865: PPUSH
81866: CALL_OW 275
81870: PUSH
81871: LD_VAR 0 1
81875: PPUSH
81876: LD_INT 2
81878: PPUSH
81879: CALL_OW 275
81883: PUSH
81884: LD_VAR 0 1
81888: PPUSH
81889: LD_INT 3
81891: PPUSH
81892: CALL_OW 275
81896: PUSH
81897: EMPTY
81898: LIST
81899: LIST
81900: LIST
81901: ST_TO_ADDR
// end ;
81902: LD_VAR 0 2
81906: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
81907: LD_INT 0
81909: PPUSH
81910: PPUSH
// result := array ;
81911: LD_ADDR_VAR 0 3
81915: PUSH
81916: LD_VAR 0 1
81920: ST_TO_ADDR
// if size >= result then
81921: LD_VAR 0 2
81925: PUSH
81926: LD_VAR 0 3
81930: GREATEREQUAL
81931: IFFALSE 81935
// exit ;
81933: GO 81985
// if size then
81935: LD_VAR 0 2
81939: IFFALSE 81985
// for i := array downto size do
81941: LD_ADDR_VAR 0 4
81945: PUSH
81946: DOUBLE
81947: LD_VAR 0 1
81951: INC
81952: ST_TO_ADDR
81953: LD_VAR 0 2
81957: PUSH
81958: FOR_DOWNTO
81959: IFFALSE 81983
// result := Delete ( result , result ) ;
81961: LD_ADDR_VAR 0 3
81965: PUSH
81966: LD_VAR 0 3
81970: PPUSH
81971: LD_VAR 0 3
81975: PPUSH
81976: CALL_OW 3
81980: ST_TO_ADDR
81981: GO 81958
81983: POP
81984: POP
// end ;
81985: LD_VAR 0 3
81989: RET
// export function ComExit ( unit ) ; var tmp ; begin
81990: LD_INT 0
81992: PPUSH
81993: PPUSH
// if not IsInUnit ( unit ) then
81994: LD_VAR 0 1
81998: PPUSH
81999: CALL_OW 310
82003: NOT
82004: IFFALSE 82008
// exit ;
82006: GO 82068
// tmp := IsInUnit ( unit ) ;
82008: LD_ADDR_VAR 0 3
82012: PUSH
82013: LD_VAR 0 1
82017: PPUSH
82018: CALL_OW 310
82022: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
82023: LD_VAR 0 3
82027: PPUSH
82028: CALL_OW 247
82032: PUSH
82033: LD_INT 2
82035: EQUAL
82036: IFFALSE 82049
// ComExitVehicle ( unit ) else
82038: LD_VAR 0 1
82042: PPUSH
82043: CALL_OW 121
82047: GO 82058
// ComExitBuilding ( unit ) ;
82049: LD_VAR 0 1
82053: PPUSH
82054: CALL_OW 122
// result := tmp ;
82058: LD_ADDR_VAR 0 2
82062: PUSH
82063: LD_VAR 0 3
82067: ST_TO_ADDR
// end ;
82068: LD_VAR 0 2
82072: RET
// export function ComExitAll ( units ) ; var i ; begin
82073: LD_INT 0
82075: PPUSH
82076: PPUSH
// if not units then
82077: LD_VAR 0 1
82081: NOT
82082: IFFALSE 82086
// exit ;
82084: GO 82112
// for i in units do
82086: LD_ADDR_VAR 0 3
82090: PUSH
82091: LD_VAR 0 1
82095: PUSH
82096: FOR_IN
82097: IFFALSE 82110
// ComExit ( i ) ;
82099: LD_VAR 0 3
82103: PPUSH
82104: CALL 81990 0 1
82108: GO 82096
82110: POP
82111: POP
// end ;
82112: LD_VAR 0 2
82116: RET
// export function ResetHc ; begin
82117: LD_INT 0
82119: PPUSH
// InitHc ;
82120: CALL_OW 19
// hc_importance := 0 ;
82124: LD_ADDR_OWVAR 32
82128: PUSH
82129: LD_INT 0
82131: ST_TO_ADDR
// end ;
82132: LD_VAR 0 1
82136: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
82137: LD_INT 0
82139: PPUSH
82140: PPUSH
82141: PPUSH
// _x := ( x1 + x2 ) div 2 ;
82142: LD_ADDR_VAR 0 6
82146: PUSH
82147: LD_VAR 0 1
82151: PUSH
82152: LD_VAR 0 3
82156: PLUS
82157: PUSH
82158: LD_INT 2
82160: DIV
82161: ST_TO_ADDR
// if _x < 0 then
82162: LD_VAR 0 6
82166: PUSH
82167: LD_INT 0
82169: LESS
82170: IFFALSE 82187
// _x := _x * - 1 ;
82172: LD_ADDR_VAR 0 6
82176: PUSH
82177: LD_VAR 0 6
82181: PUSH
82182: LD_INT 1
82184: NEG
82185: MUL
82186: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
82187: LD_ADDR_VAR 0 7
82191: PUSH
82192: LD_VAR 0 2
82196: PUSH
82197: LD_VAR 0 4
82201: PLUS
82202: PUSH
82203: LD_INT 2
82205: DIV
82206: ST_TO_ADDR
// if _y < 0 then
82207: LD_VAR 0 7
82211: PUSH
82212: LD_INT 0
82214: LESS
82215: IFFALSE 82232
// _y := _y * - 1 ;
82217: LD_ADDR_VAR 0 7
82221: PUSH
82222: LD_VAR 0 7
82226: PUSH
82227: LD_INT 1
82229: NEG
82230: MUL
82231: ST_TO_ADDR
// result := [ _x , _y ] ;
82232: LD_ADDR_VAR 0 5
82236: PUSH
82237: LD_VAR 0 6
82241: PUSH
82242: LD_VAR 0 7
82246: PUSH
82247: EMPTY
82248: LIST
82249: LIST
82250: ST_TO_ADDR
// end ;
82251: LD_VAR 0 5
82255: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
82256: LD_INT 0
82258: PPUSH
82259: PPUSH
82260: PPUSH
82261: PPUSH
// task := GetTaskList ( unit ) ;
82262: LD_ADDR_VAR 0 7
82266: PUSH
82267: LD_VAR 0 1
82271: PPUSH
82272: CALL_OW 437
82276: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
82277: LD_VAR 0 7
82281: NOT
82282: PUSH
82283: LD_VAR 0 1
82287: PPUSH
82288: LD_VAR 0 2
82292: PPUSH
82293: CALL_OW 308
82297: NOT
82298: AND
82299: IFFALSE 82303
// exit ;
82301: GO 82421
// if IsInArea ( unit , area ) then
82303: LD_VAR 0 1
82307: PPUSH
82308: LD_VAR 0 2
82312: PPUSH
82313: CALL_OW 308
82317: IFFALSE 82335
// begin ComMoveToArea ( unit , goAway ) ;
82319: LD_VAR 0 1
82323: PPUSH
82324: LD_VAR 0 3
82328: PPUSH
82329: CALL_OW 113
// exit ;
82333: GO 82421
// end ; if task [ 1 ] [ 1 ] <> M then
82335: LD_VAR 0 7
82339: PUSH
82340: LD_INT 1
82342: ARRAY
82343: PUSH
82344: LD_INT 1
82346: ARRAY
82347: PUSH
82348: LD_STRING M
82350: NONEQUAL
82351: IFFALSE 82355
// exit ;
82353: GO 82421
// x := task [ 1 ] [ 2 ] ;
82355: LD_ADDR_VAR 0 5
82359: PUSH
82360: LD_VAR 0 7
82364: PUSH
82365: LD_INT 1
82367: ARRAY
82368: PUSH
82369: LD_INT 2
82371: ARRAY
82372: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
82373: LD_ADDR_VAR 0 6
82377: PUSH
82378: LD_VAR 0 7
82382: PUSH
82383: LD_INT 1
82385: ARRAY
82386: PUSH
82387: LD_INT 3
82389: ARRAY
82390: ST_TO_ADDR
// if InArea ( x , y , area ) then
82391: LD_VAR 0 5
82395: PPUSH
82396: LD_VAR 0 6
82400: PPUSH
82401: LD_VAR 0 2
82405: PPUSH
82406: CALL_OW 309
82410: IFFALSE 82421
// ComStop ( unit ) ;
82412: LD_VAR 0 1
82416: PPUSH
82417: CALL_OW 141
// end ;
82421: LD_VAR 0 4
82425: RET
// export function Abs ( value ) ; begin
82426: LD_INT 0
82428: PPUSH
// result := value ;
82429: LD_ADDR_VAR 0 2
82433: PUSH
82434: LD_VAR 0 1
82438: ST_TO_ADDR
// if value < 0 then
82439: LD_VAR 0 1
82443: PUSH
82444: LD_INT 0
82446: LESS
82447: IFFALSE 82464
// result := value * - 1 ;
82449: LD_ADDR_VAR 0 2
82453: PUSH
82454: LD_VAR 0 1
82458: PUSH
82459: LD_INT 1
82461: NEG
82462: MUL
82463: ST_TO_ADDR
// end ;
82464: LD_VAR 0 2
82468: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
82469: LD_INT 0
82471: PPUSH
82472: PPUSH
82473: PPUSH
82474: PPUSH
82475: PPUSH
82476: PPUSH
82477: PPUSH
82478: PPUSH
// if not unit or not building then
82479: LD_VAR 0 1
82483: NOT
82484: PUSH
82485: LD_VAR 0 2
82489: NOT
82490: OR
82491: IFFALSE 82495
// exit ;
82493: GO 82721
// x := GetX ( building ) ;
82495: LD_ADDR_VAR 0 4
82499: PUSH
82500: LD_VAR 0 2
82504: PPUSH
82505: CALL_OW 250
82509: ST_TO_ADDR
// y := GetY ( building ) ;
82510: LD_ADDR_VAR 0 6
82514: PUSH
82515: LD_VAR 0 2
82519: PPUSH
82520: CALL_OW 251
82524: ST_TO_ADDR
// d := GetDir ( building ) ;
82525: LD_ADDR_VAR 0 8
82529: PUSH
82530: LD_VAR 0 2
82534: PPUSH
82535: CALL_OW 254
82539: ST_TO_ADDR
// r := 4 ;
82540: LD_ADDR_VAR 0 9
82544: PUSH
82545: LD_INT 4
82547: ST_TO_ADDR
// for i := 1 to 5 do
82548: LD_ADDR_VAR 0 10
82552: PUSH
82553: DOUBLE
82554: LD_INT 1
82556: DEC
82557: ST_TO_ADDR
82558: LD_INT 5
82560: PUSH
82561: FOR_TO
82562: IFFALSE 82719
// begin _x := ShiftX ( x , d , r + i ) ;
82564: LD_ADDR_VAR 0 5
82568: PUSH
82569: LD_VAR 0 4
82573: PPUSH
82574: LD_VAR 0 8
82578: PPUSH
82579: LD_VAR 0 9
82583: PUSH
82584: LD_VAR 0 10
82588: PLUS
82589: PPUSH
82590: CALL_OW 272
82594: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
82595: LD_ADDR_VAR 0 7
82599: PUSH
82600: LD_VAR 0 6
82604: PPUSH
82605: LD_VAR 0 8
82609: PPUSH
82610: LD_VAR 0 9
82614: PUSH
82615: LD_VAR 0 10
82619: PLUS
82620: PPUSH
82621: CALL_OW 273
82625: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
82626: LD_VAR 0 5
82630: PPUSH
82631: LD_VAR 0 7
82635: PPUSH
82636: CALL_OW 488
82640: PUSH
82641: LD_VAR 0 5
82645: PPUSH
82646: LD_VAR 0 7
82650: PPUSH
82651: CALL_OW 428
82655: PPUSH
82656: CALL_OW 247
82660: PUSH
82661: LD_INT 3
82663: PUSH
82664: LD_INT 2
82666: PUSH
82667: EMPTY
82668: LIST
82669: LIST
82670: IN
82671: NOT
82672: AND
82673: IFFALSE 82717
// begin ComMoveXY ( unit , _x , _y ) ;
82675: LD_VAR 0 1
82679: PPUSH
82680: LD_VAR 0 5
82684: PPUSH
82685: LD_VAR 0 7
82689: PPUSH
82690: CALL_OW 111
// result := [ _x , _y ] ;
82694: LD_ADDR_VAR 0 3
82698: PUSH
82699: LD_VAR 0 5
82703: PUSH
82704: LD_VAR 0 7
82708: PUSH
82709: EMPTY
82710: LIST
82711: LIST
82712: ST_TO_ADDR
// exit ;
82713: POP
82714: POP
82715: GO 82721
// end ; end ;
82717: GO 82561
82719: POP
82720: POP
// end ;
82721: LD_VAR 0 3
82725: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
82726: LD_INT 0
82728: PPUSH
82729: PPUSH
82730: PPUSH
// result := 0 ;
82731: LD_ADDR_VAR 0 3
82735: PUSH
82736: LD_INT 0
82738: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
82739: LD_VAR 0 1
82743: PUSH
82744: LD_INT 0
82746: LESS
82747: PUSH
82748: LD_VAR 0 1
82752: PUSH
82753: LD_INT 8
82755: GREATER
82756: OR
82757: PUSH
82758: LD_VAR 0 2
82762: PUSH
82763: LD_INT 0
82765: LESS
82766: OR
82767: PUSH
82768: LD_VAR 0 2
82772: PUSH
82773: LD_INT 8
82775: GREATER
82776: OR
82777: IFFALSE 82781
// exit ;
82779: GO 82856
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
82781: LD_ADDR_VAR 0 4
82785: PUSH
82786: LD_INT 22
82788: PUSH
82789: LD_VAR 0 2
82793: PUSH
82794: EMPTY
82795: LIST
82796: LIST
82797: PPUSH
82798: CALL_OW 69
82802: PUSH
82803: FOR_IN
82804: IFFALSE 82854
// begin un := UnitShoot ( i ) ;
82806: LD_ADDR_VAR 0 5
82810: PUSH
82811: LD_VAR 0 4
82815: PPUSH
82816: CALL_OW 504
82820: ST_TO_ADDR
// if GetSide ( un ) = side1 then
82821: LD_VAR 0 5
82825: PPUSH
82826: CALL_OW 255
82830: PUSH
82831: LD_VAR 0 1
82835: EQUAL
82836: IFFALSE 82852
// begin result := un ;
82838: LD_ADDR_VAR 0 3
82842: PUSH
82843: LD_VAR 0 5
82847: ST_TO_ADDR
// exit ;
82848: POP
82849: POP
82850: GO 82856
// end ; end ;
82852: GO 82803
82854: POP
82855: POP
// end ;
82856: LD_VAR 0 3
82860: RET
// export function GetCargoBay ( units ) ; begin
82861: LD_INT 0
82863: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
82864: LD_ADDR_VAR 0 2
82868: PUSH
82869: LD_VAR 0 1
82873: PPUSH
82874: LD_INT 2
82876: PUSH
82877: LD_INT 34
82879: PUSH
82880: LD_INT 12
82882: PUSH
82883: EMPTY
82884: LIST
82885: LIST
82886: PUSH
82887: LD_INT 34
82889: PUSH
82890: LD_INT 51
82892: PUSH
82893: EMPTY
82894: LIST
82895: LIST
82896: PUSH
82897: LD_INT 34
82899: PUSH
82900: LD_INT 32
82902: PUSH
82903: EMPTY
82904: LIST
82905: LIST
82906: PUSH
82907: LD_INT 34
82909: PUSH
82910: LD_INT 89
82912: PUSH
82913: EMPTY
82914: LIST
82915: LIST
82916: PUSH
82917: EMPTY
82918: LIST
82919: LIST
82920: LIST
82921: LIST
82922: LIST
82923: PPUSH
82924: CALL_OW 72
82928: ST_TO_ADDR
// end ;
82929: LD_VAR 0 2
82933: RET
// export function Negate ( value ) ; begin
82934: LD_INT 0
82936: PPUSH
// result := not value ;
82937: LD_ADDR_VAR 0 2
82941: PUSH
82942: LD_VAR 0 1
82946: NOT
82947: ST_TO_ADDR
// end ;
82948: LD_VAR 0 2
82952: RET
// export function Inc ( value ) ; begin
82953: LD_INT 0
82955: PPUSH
// result := value + 1 ;
82956: LD_ADDR_VAR 0 2
82960: PUSH
82961: LD_VAR 0 1
82965: PUSH
82966: LD_INT 1
82968: PLUS
82969: ST_TO_ADDR
// end ;
82970: LD_VAR 0 2
82974: RET
// export function Dec ( value ) ; begin
82975: LD_INT 0
82977: PPUSH
// result := value - 1 ;
82978: LD_ADDR_VAR 0 2
82982: PUSH
82983: LD_VAR 0 1
82987: PUSH
82988: LD_INT 1
82990: MINUS
82991: ST_TO_ADDR
// end ;
82992: LD_VAR 0 2
82996: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
82997: LD_INT 0
82999: PPUSH
83000: PPUSH
83001: PPUSH
83002: PPUSH
83003: PPUSH
83004: PPUSH
83005: PPUSH
83006: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
83007: LD_VAR 0 1
83011: PPUSH
83012: LD_VAR 0 2
83016: PPUSH
83017: CALL_OW 488
83021: NOT
83022: PUSH
83023: LD_VAR 0 3
83027: PPUSH
83028: LD_VAR 0 4
83032: PPUSH
83033: CALL_OW 488
83037: NOT
83038: OR
83039: IFFALSE 83052
// begin result := - 1 ;
83041: LD_ADDR_VAR 0 5
83045: PUSH
83046: LD_INT 1
83048: NEG
83049: ST_TO_ADDR
// exit ;
83050: GO 83287
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
83052: LD_ADDR_VAR 0 12
83056: PUSH
83057: LD_VAR 0 1
83061: PPUSH
83062: LD_VAR 0 2
83066: PPUSH
83067: LD_VAR 0 3
83071: PPUSH
83072: LD_VAR 0 4
83076: PPUSH
83077: CALL 82137 0 4
83081: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
83082: LD_ADDR_VAR 0 11
83086: PUSH
83087: LD_VAR 0 1
83091: PPUSH
83092: LD_VAR 0 2
83096: PPUSH
83097: LD_VAR 0 12
83101: PUSH
83102: LD_INT 1
83104: ARRAY
83105: PPUSH
83106: LD_VAR 0 12
83110: PUSH
83111: LD_INT 2
83113: ARRAY
83114: PPUSH
83115: CALL_OW 298
83119: ST_TO_ADDR
// distance := 9999 ;
83120: LD_ADDR_VAR 0 10
83124: PUSH
83125: LD_INT 9999
83127: ST_TO_ADDR
// for i := 0 to 5 do
83128: LD_ADDR_VAR 0 6
83132: PUSH
83133: DOUBLE
83134: LD_INT 0
83136: DEC
83137: ST_TO_ADDR
83138: LD_INT 5
83140: PUSH
83141: FOR_TO
83142: IFFALSE 83285
// begin _x := ShiftX ( x1 , i , centerDist ) ;
83144: LD_ADDR_VAR 0 7
83148: PUSH
83149: LD_VAR 0 1
83153: PPUSH
83154: LD_VAR 0 6
83158: PPUSH
83159: LD_VAR 0 11
83163: PPUSH
83164: CALL_OW 272
83168: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
83169: LD_ADDR_VAR 0 8
83173: PUSH
83174: LD_VAR 0 2
83178: PPUSH
83179: LD_VAR 0 6
83183: PPUSH
83184: LD_VAR 0 11
83188: PPUSH
83189: CALL_OW 273
83193: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
83194: LD_VAR 0 7
83198: PPUSH
83199: LD_VAR 0 8
83203: PPUSH
83204: CALL_OW 488
83208: NOT
83209: IFFALSE 83213
// continue ;
83211: GO 83141
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
83213: LD_ADDR_VAR 0 9
83217: PUSH
83218: LD_VAR 0 12
83222: PUSH
83223: LD_INT 1
83225: ARRAY
83226: PPUSH
83227: LD_VAR 0 12
83231: PUSH
83232: LD_INT 2
83234: ARRAY
83235: PPUSH
83236: LD_VAR 0 7
83240: PPUSH
83241: LD_VAR 0 8
83245: PPUSH
83246: CALL_OW 298
83250: ST_TO_ADDR
// if tmp < distance then
83251: LD_VAR 0 9
83255: PUSH
83256: LD_VAR 0 10
83260: LESS
83261: IFFALSE 83283
// begin result := i ;
83263: LD_ADDR_VAR 0 5
83267: PUSH
83268: LD_VAR 0 6
83272: ST_TO_ADDR
// distance := tmp ;
83273: LD_ADDR_VAR 0 10
83277: PUSH
83278: LD_VAR 0 9
83282: ST_TO_ADDR
// end ; end ;
83283: GO 83141
83285: POP
83286: POP
// end ;
83287: LD_VAR 0 5
83291: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
83292: LD_INT 0
83294: PPUSH
83295: PPUSH
// if not driver or not IsInUnit ( driver ) then
83296: LD_VAR 0 1
83300: NOT
83301: PUSH
83302: LD_VAR 0 1
83306: PPUSH
83307: CALL_OW 310
83311: NOT
83312: OR
83313: IFFALSE 83317
// exit ;
83315: GO 83407
// vehicle := IsInUnit ( driver ) ;
83317: LD_ADDR_VAR 0 3
83321: PUSH
83322: LD_VAR 0 1
83326: PPUSH
83327: CALL_OW 310
83331: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
83332: LD_VAR 0 1
83336: PPUSH
83337: LD_STRING \
83339: PUSH
83340: LD_INT 0
83342: PUSH
83343: LD_INT 0
83345: PUSH
83346: LD_INT 0
83348: PUSH
83349: LD_INT 0
83351: PUSH
83352: LD_INT 0
83354: PUSH
83355: LD_INT 0
83357: PUSH
83358: EMPTY
83359: LIST
83360: LIST
83361: LIST
83362: LIST
83363: LIST
83364: LIST
83365: LIST
83366: PUSH
83367: LD_STRING E
83369: PUSH
83370: LD_INT 0
83372: PUSH
83373: LD_INT 0
83375: PUSH
83376: LD_VAR 0 3
83380: PUSH
83381: LD_INT 0
83383: PUSH
83384: LD_INT 0
83386: PUSH
83387: LD_INT 0
83389: PUSH
83390: EMPTY
83391: LIST
83392: LIST
83393: LIST
83394: LIST
83395: LIST
83396: LIST
83397: LIST
83398: PUSH
83399: EMPTY
83400: LIST
83401: LIST
83402: PPUSH
83403: CALL_OW 446
// end ;
83407: LD_VAR 0 2
83411: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
83412: LD_INT 0
83414: PPUSH
83415: PPUSH
// if not driver or not IsInUnit ( driver ) then
83416: LD_VAR 0 1
83420: NOT
83421: PUSH
83422: LD_VAR 0 1
83426: PPUSH
83427: CALL_OW 310
83431: NOT
83432: OR
83433: IFFALSE 83437
// exit ;
83435: GO 83527
// vehicle := IsInUnit ( driver ) ;
83437: LD_ADDR_VAR 0 3
83441: PUSH
83442: LD_VAR 0 1
83446: PPUSH
83447: CALL_OW 310
83451: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
83452: LD_VAR 0 1
83456: PPUSH
83457: LD_STRING \
83459: PUSH
83460: LD_INT 0
83462: PUSH
83463: LD_INT 0
83465: PUSH
83466: LD_INT 0
83468: PUSH
83469: LD_INT 0
83471: PUSH
83472: LD_INT 0
83474: PUSH
83475: LD_INT 0
83477: PUSH
83478: EMPTY
83479: LIST
83480: LIST
83481: LIST
83482: LIST
83483: LIST
83484: LIST
83485: LIST
83486: PUSH
83487: LD_STRING E
83489: PUSH
83490: LD_INT 0
83492: PUSH
83493: LD_INT 0
83495: PUSH
83496: LD_VAR 0 3
83500: PUSH
83501: LD_INT 0
83503: PUSH
83504: LD_INT 0
83506: PUSH
83507: LD_INT 0
83509: PUSH
83510: EMPTY
83511: LIST
83512: LIST
83513: LIST
83514: LIST
83515: LIST
83516: LIST
83517: LIST
83518: PUSH
83519: EMPTY
83520: LIST
83521: LIST
83522: PPUSH
83523: CALL_OW 447
// end ;
83527: LD_VAR 0 2
83531: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
83532: LD_INT 0
83534: PPUSH
83535: PPUSH
83536: PPUSH
// tmp := [ ] ;
83537: LD_ADDR_VAR 0 5
83541: PUSH
83542: EMPTY
83543: ST_TO_ADDR
// for i in units do
83544: LD_ADDR_VAR 0 4
83548: PUSH
83549: LD_VAR 0 1
83553: PUSH
83554: FOR_IN
83555: IFFALSE 83593
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
83557: LD_ADDR_VAR 0 5
83561: PUSH
83562: LD_VAR 0 5
83566: PPUSH
83567: LD_VAR 0 5
83571: PUSH
83572: LD_INT 1
83574: PLUS
83575: PPUSH
83576: LD_VAR 0 4
83580: PPUSH
83581: CALL_OW 256
83585: PPUSH
83586: CALL_OW 2
83590: ST_TO_ADDR
83591: GO 83554
83593: POP
83594: POP
// if not tmp then
83595: LD_VAR 0 5
83599: NOT
83600: IFFALSE 83604
// exit ;
83602: GO 83652
// if asc then
83604: LD_VAR 0 2
83608: IFFALSE 83632
// result := SortListByListAsc ( units , tmp ) else
83610: LD_ADDR_VAR 0 3
83614: PUSH
83615: LD_VAR 0 1
83619: PPUSH
83620: LD_VAR 0 5
83624: PPUSH
83625: CALL_OW 76
83629: ST_TO_ADDR
83630: GO 83652
// result := SortListByListDesc ( units , tmp ) ;
83632: LD_ADDR_VAR 0 3
83636: PUSH
83637: LD_VAR 0 1
83641: PPUSH
83642: LD_VAR 0 5
83646: PPUSH
83647: CALL_OW 77
83651: ST_TO_ADDR
// end ;
83652: LD_VAR 0 3
83656: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
83657: LD_INT 0
83659: PPUSH
83660: PPUSH
// task := GetTaskList ( mech ) ;
83661: LD_ADDR_VAR 0 4
83665: PUSH
83666: LD_VAR 0 1
83670: PPUSH
83671: CALL_OW 437
83675: ST_TO_ADDR
// if not task then
83676: LD_VAR 0 4
83680: NOT
83681: IFFALSE 83685
// exit ;
83683: GO 83727
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
83685: LD_ADDR_VAR 0 3
83689: PUSH
83690: LD_VAR 0 4
83694: PUSH
83695: LD_INT 1
83697: ARRAY
83698: PUSH
83699: LD_INT 1
83701: ARRAY
83702: PUSH
83703: LD_STRING r
83705: EQUAL
83706: PUSH
83707: LD_VAR 0 4
83711: PUSH
83712: LD_INT 1
83714: ARRAY
83715: PUSH
83716: LD_INT 4
83718: ARRAY
83719: PUSH
83720: LD_VAR 0 2
83724: EQUAL
83725: AND
83726: ST_TO_ADDR
// end ;
83727: LD_VAR 0 3
83731: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
83732: LD_INT 0
83734: PPUSH
// SetDir ( unit , d ) ;
83735: LD_VAR 0 1
83739: PPUSH
83740: LD_VAR 0 4
83744: PPUSH
83745: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
83749: LD_VAR 0 1
83753: PPUSH
83754: LD_VAR 0 2
83758: PPUSH
83759: LD_VAR 0 3
83763: PPUSH
83764: LD_VAR 0 5
83768: PPUSH
83769: CALL_OW 48
// end ;
83773: LD_VAR 0 6
83777: RET
// export function ToNaturalNumber ( number ) ; begin
83778: LD_INT 0
83780: PPUSH
// result := number div 1 ;
83781: LD_ADDR_VAR 0 2
83785: PUSH
83786: LD_VAR 0 1
83790: PUSH
83791: LD_INT 1
83793: DIV
83794: ST_TO_ADDR
// if number < 0 then
83795: LD_VAR 0 1
83799: PUSH
83800: LD_INT 0
83802: LESS
83803: IFFALSE 83813
// result := 0 ;
83805: LD_ADDR_VAR 0 2
83809: PUSH
83810: LD_INT 0
83812: ST_TO_ADDR
// end ;
83813: LD_VAR 0 2
83817: RET
// export function SortByClass ( units , class ) ; var un ; begin
83818: LD_INT 0
83820: PPUSH
83821: PPUSH
// if not units or not class then
83822: LD_VAR 0 1
83826: NOT
83827: PUSH
83828: LD_VAR 0 2
83832: NOT
83833: OR
83834: IFFALSE 83838
// exit ;
83836: GO 83933
// result := [ ] ;
83838: LD_ADDR_VAR 0 3
83842: PUSH
83843: EMPTY
83844: ST_TO_ADDR
// for un in units do
83845: LD_ADDR_VAR 0 4
83849: PUSH
83850: LD_VAR 0 1
83854: PUSH
83855: FOR_IN
83856: IFFALSE 83931
// if GetClass ( un ) = class then
83858: LD_VAR 0 4
83862: PPUSH
83863: CALL_OW 257
83867: PUSH
83868: LD_VAR 0 2
83872: EQUAL
83873: IFFALSE 83900
// result := Insert ( result , 1 , un ) else
83875: LD_ADDR_VAR 0 3
83879: PUSH
83880: LD_VAR 0 3
83884: PPUSH
83885: LD_INT 1
83887: PPUSH
83888: LD_VAR 0 4
83892: PPUSH
83893: CALL_OW 2
83897: ST_TO_ADDR
83898: GO 83929
// result := Replace ( result , result + 1 , un ) ;
83900: LD_ADDR_VAR 0 3
83904: PUSH
83905: LD_VAR 0 3
83909: PPUSH
83910: LD_VAR 0 3
83914: PUSH
83915: LD_INT 1
83917: PLUS
83918: PPUSH
83919: LD_VAR 0 4
83923: PPUSH
83924: CALL_OW 1
83928: ST_TO_ADDR
83929: GO 83855
83931: POP
83932: POP
// end ;
83933: LD_VAR 0 3
83937: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
83938: LD_INT 0
83940: PPUSH
83941: PPUSH
83942: PPUSH
83943: PPUSH
83944: PPUSH
83945: PPUSH
83946: PPUSH
// result := [ ] ;
83947: LD_ADDR_VAR 0 4
83951: PUSH
83952: EMPTY
83953: ST_TO_ADDR
// if x - r < 0 then
83954: LD_VAR 0 1
83958: PUSH
83959: LD_VAR 0 3
83963: MINUS
83964: PUSH
83965: LD_INT 0
83967: LESS
83968: IFFALSE 83980
// min_x := 0 else
83970: LD_ADDR_VAR 0 8
83974: PUSH
83975: LD_INT 0
83977: ST_TO_ADDR
83978: GO 83996
// min_x := x - r ;
83980: LD_ADDR_VAR 0 8
83984: PUSH
83985: LD_VAR 0 1
83989: PUSH
83990: LD_VAR 0 3
83994: MINUS
83995: ST_TO_ADDR
// if y - r < 0 then
83996: LD_VAR 0 2
84000: PUSH
84001: LD_VAR 0 3
84005: MINUS
84006: PUSH
84007: LD_INT 0
84009: LESS
84010: IFFALSE 84022
// min_y := 0 else
84012: LD_ADDR_VAR 0 7
84016: PUSH
84017: LD_INT 0
84019: ST_TO_ADDR
84020: GO 84038
// min_y := y - r ;
84022: LD_ADDR_VAR 0 7
84026: PUSH
84027: LD_VAR 0 2
84031: PUSH
84032: LD_VAR 0 3
84036: MINUS
84037: ST_TO_ADDR
// max_x := x + r ;
84038: LD_ADDR_VAR 0 9
84042: PUSH
84043: LD_VAR 0 1
84047: PUSH
84048: LD_VAR 0 3
84052: PLUS
84053: ST_TO_ADDR
// max_y := y + r ;
84054: LD_ADDR_VAR 0 10
84058: PUSH
84059: LD_VAR 0 2
84063: PUSH
84064: LD_VAR 0 3
84068: PLUS
84069: ST_TO_ADDR
// for _x = min_x to max_x do
84070: LD_ADDR_VAR 0 5
84074: PUSH
84075: DOUBLE
84076: LD_VAR 0 8
84080: DEC
84081: ST_TO_ADDR
84082: LD_VAR 0 9
84086: PUSH
84087: FOR_TO
84088: IFFALSE 84189
// for _y = min_y to max_y do
84090: LD_ADDR_VAR 0 6
84094: PUSH
84095: DOUBLE
84096: LD_VAR 0 7
84100: DEC
84101: ST_TO_ADDR
84102: LD_VAR 0 10
84106: PUSH
84107: FOR_TO
84108: IFFALSE 84185
// begin if not ValidHex ( _x , _y ) then
84110: LD_VAR 0 5
84114: PPUSH
84115: LD_VAR 0 6
84119: PPUSH
84120: CALL_OW 488
84124: NOT
84125: IFFALSE 84129
// continue ;
84127: GO 84107
// if GetResourceTypeXY ( _x , _y ) then
84129: LD_VAR 0 5
84133: PPUSH
84134: LD_VAR 0 6
84138: PPUSH
84139: CALL_OW 283
84143: IFFALSE 84183
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
84145: LD_ADDR_VAR 0 4
84149: PUSH
84150: LD_VAR 0 4
84154: PPUSH
84155: LD_VAR 0 4
84159: PUSH
84160: LD_INT 1
84162: PLUS
84163: PPUSH
84164: LD_VAR 0 5
84168: PUSH
84169: LD_VAR 0 6
84173: PUSH
84174: EMPTY
84175: LIST
84176: LIST
84177: PPUSH
84178: CALL_OW 1
84182: ST_TO_ADDR
// end ;
84183: GO 84107
84185: POP
84186: POP
84187: GO 84087
84189: POP
84190: POP
// end ;
84191: LD_VAR 0 4
84195: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
84196: LD_INT 0
84198: PPUSH
84199: PPUSH
84200: PPUSH
84201: PPUSH
84202: PPUSH
84203: PPUSH
84204: PPUSH
84205: PPUSH
// if not units then
84206: LD_VAR 0 1
84210: NOT
84211: IFFALSE 84215
// exit ;
84213: GO 84739
// result := UnitFilter ( units , [ f_ok ] ) ;
84215: LD_ADDR_VAR 0 3
84219: PUSH
84220: LD_VAR 0 1
84224: PPUSH
84225: LD_INT 50
84227: PUSH
84228: EMPTY
84229: LIST
84230: PPUSH
84231: CALL_OW 72
84235: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
84236: LD_ADDR_VAR 0 8
84240: PUSH
84241: LD_VAR 0 1
84245: PUSH
84246: LD_INT 1
84248: ARRAY
84249: PPUSH
84250: CALL_OW 255
84254: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
84255: LD_ADDR_VAR 0 10
84259: PUSH
84260: LD_INT 29
84262: PUSH
84263: LD_INT 91
84265: PUSH
84266: LD_INT 49
84268: PUSH
84269: EMPTY
84270: LIST
84271: LIST
84272: LIST
84273: ST_TO_ADDR
// if not result then
84274: LD_VAR 0 3
84278: NOT
84279: IFFALSE 84283
// exit ;
84281: GO 84739
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
84283: LD_ADDR_VAR 0 5
84287: PUSH
84288: LD_INT 81
84290: PUSH
84291: LD_VAR 0 8
84295: PUSH
84296: EMPTY
84297: LIST
84298: LIST
84299: PPUSH
84300: CALL_OW 69
84304: ST_TO_ADDR
// for i in result do
84305: LD_ADDR_VAR 0 4
84309: PUSH
84310: LD_VAR 0 3
84314: PUSH
84315: FOR_IN
84316: IFFALSE 84737
// begin tag := GetTag ( i ) + 1 ;
84318: LD_ADDR_VAR 0 9
84322: PUSH
84323: LD_VAR 0 4
84327: PPUSH
84328: CALL_OW 110
84332: PUSH
84333: LD_INT 1
84335: PLUS
84336: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
84337: LD_ADDR_VAR 0 7
84341: PUSH
84342: LD_VAR 0 4
84346: PPUSH
84347: CALL_OW 250
84351: PPUSH
84352: LD_VAR 0 4
84356: PPUSH
84357: CALL_OW 251
84361: PPUSH
84362: LD_INT 6
84364: PPUSH
84365: CALL 83938 0 3
84369: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
84370: LD_VAR 0 4
84374: PPUSH
84375: CALL_OW 247
84379: PUSH
84380: LD_INT 2
84382: EQUAL
84383: PUSH
84384: LD_VAR 0 7
84388: AND
84389: PUSH
84390: LD_VAR 0 4
84394: PPUSH
84395: CALL_OW 264
84399: PUSH
84400: LD_VAR 0 10
84404: IN
84405: NOT
84406: AND
84407: IFFALSE 84446
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
84409: LD_VAR 0 4
84413: PPUSH
84414: LD_VAR 0 7
84418: PUSH
84419: LD_INT 1
84421: ARRAY
84422: PUSH
84423: LD_INT 1
84425: ARRAY
84426: PPUSH
84427: LD_VAR 0 7
84431: PUSH
84432: LD_INT 1
84434: ARRAY
84435: PUSH
84436: LD_INT 2
84438: ARRAY
84439: PPUSH
84440: CALL_OW 116
84444: GO 84735
// if path > tag then
84446: LD_VAR 0 2
84450: PUSH
84451: LD_VAR 0 9
84455: GREATER
84456: IFFALSE 84664
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
84458: LD_ADDR_VAR 0 6
84462: PUSH
84463: LD_VAR 0 5
84467: PPUSH
84468: LD_INT 91
84470: PUSH
84471: LD_VAR 0 4
84475: PUSH
84476: LD_INT 8
84478: PUSH
84479: EMPTY
84480: LIST
84481: LIST
84482: LIST
84483: PPUSH
84484: CALL_OW 72
84488: ST_TO_ADDR
// if nearEnemy then
84489: LD_VAR 0 6
84493: IFFALSE 84562
// begin if GetWeapon ( i ) = ru_time_lapser then
84495: LD_VAR 0 4
84499: PPUSH
84500: CALL_OW 264
84504: PUSH
84505: LD_INT 49
84507: EQUAL
84508: IFFALSE 84536
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
84510: LD_VAR 0 4
84514: PPUSH
84515: LD_VAR 0 6
84519: PPUSH
84520: LD_VAR 0 4
84524: PPUSH
84525: CALL_OW 74
84529: PPUSH
84530: CALL_OW 112
84534: GO 84560
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
84536: LD_VAR 0 4
84540: PPUSH
84541: LD_VAR 0 6
84545: PPUSH
84546: LD_VAR 0 4
84550: PPUSH
84551: CALL_OW 74
84555: PPUSH
84556: CALL_OW 115
// end else
84560: GO 84662
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
84562: LD_VAR 0 4
84566: PPUSH
84567: LD_VAR 0 2
84571: PUSH
84572: LD_VAR 0 9
84576: ARRAY
84577: PUSH
84578: LD_INT 1
84580: ARRAY
84581: PPUSH
84582: LD_VAR 0 2
84586: PUSH
84587: LD_VAR 0 9
84591: ARRAY
84592: PUSH
84593: LD_INT 2
84595: ARRAY
84596: PPUSH
84597: CALL_OW 297
84601: PUSH
84602: LD_INT 6
84604: GREATER
84605: IFFALSE 84648
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
84607: LD_VAR 0 4
84611: PPUSH
84612: LD_VAR 0 2
84616: PUSH
84617: LD_VAR 0 9
84621: ARRAY
84622: PUSH
84623: LD_INT 1
84625: ARRAY
84626: PPUSH
84627: LD_VAR 0 2
84631: PUSH
84632: LD_VAR 0 9
84636: ARRAY
84637: PUSH
84638: LD_INT 2
84640: ARRAY
84641: PPUSH
84642: CALL_OW 114
84646: GO 84662
// SetTag ( i , tag ) ;
84648: LD_VAR 0 4
84652: PPUSH
84653: LD_VAR 0 9
84657: PPUSH
84658: CALL_OW 109
// end else
84662: GO 84735
// if enemy then
84664: LD_VAR 0 5
84668: IFFALSE 84735
// begin if GetWeapon ( i ) = ru_time_lapser then
84670: LD_VAR 0 4
84674: PPUSH
84675: CALL_OW 264
84679: PUSH
84680: LD_INT 49
84682: EQUAL
84683: IFFALSE 84711
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
84685: LD_VAR 0 4
84689: PPUSH
84690: LD_VAR 0 5
84694: PPUSH
84695: LD_VAR 0 4
84699: PPUSH
84700: CALL_OW 74
84704: PPUSH
84705: CALL_OW 112
84709: GO 84735
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
84711: LD_VAR 0 4
84715: PPUSH
84716: LD_VAR 0 5
84720: PPUSH
84721: LD_VAR 0 4
84725: PPUSH
84726: CALL_OW 74
84730: PPUSH
84731: CALL_OW 115
// end ; end ;
84735: GO 84315
84737: POP
84738: POP
// end ;
84739: LD_VAR 0 3
84743: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
84744: LD_INT 0
84746: PPUSH
84747: PPUSH
84748: PPUSH
// if not unit or IsInUnit ( unit ) then
84749: LD_VAR 0 1
84753: NOT
84754: PUSH
84755: LD_VAR 0 1
84759: PPUSH
84760: CALL_OW 310
84764: OR
84765: IFFALSE 84769
// exit ;
84767: GO 84860
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
84769: LD_ADDR_VAR 0 4
84773: PUSH
84774: LD_VAR 0 1
84778: PPUSH
84779: CALL_OW 250
84783: PPUSH
84784: LD_VAR 0 2
84788: PPUSH
84789: LD_INT 1
84791: PPUSH
84792: CALL_OW 272
84796: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
84797: LD_ADDR_VAR 0 5
84801: PUSH
84802: LD_VAR 0 1
84806: PPUSH
84807: CALL_OW 251
84811: PPUSH
84812: LD_VAR 0 2
84816: PPUSH
84817: LD_INT 1
84819: PPUSH
84820: CALL_OW 273
84824: ST_TO_ADDR
// if ValidHex ( x , y ) then
84825: LD_VAR 0 4
84829: PPUSH
84830: LD_VAR 0 5
84834: PPUSH
84835: CALL_OW 488
84839: IFFALSE 84860
// ComTurnXY ( unit , x , y ) ;
84841: LD_VAR 0 1
84845: PPUSH
84846: LD_VAR 0 4
84850: PPUSH
84851: LD_VAR 0 5
84855: PPUSH
84856: CALL_OW 118
// end ;
84860: LD_VAR 0 3
84864: RET
// export function SeeUnits ( side , units ) ; var i ; begin
84865: LD_INT 0
84867: PPUSH
84868: PPUSH
// result := false ;
84869: LD_ADDR_VAR 0 3
84873: PUSH
84874: LD_INT 0
84876: ST_TO_ADDR
// if not units then
84877: LD_VAR 0 2
84881: NOT
84882: IFFALSE 84886
// exit ;
84884: GO 84931
// for i in units do
84886: LD_ADDR_VAR 0 4
84890: PUSH
84891: LD_VAR 0 2
84895: PUSH
84896: FOR_IN
84897: IFFALSE 84929
// if See ( side , i ) then
84899: LD_VAR 0 1
84903: PPUSH
84904: LD_VAR 0 4
84908: PPUSH
84909: CALL_OW 292
84913: IFFALSE 84927
// begin result := true ;
84915: LD_ADDR_VAR 0 3
84919: PUSH
84920: LD_INT 1
84922: ST_TO_ADDR
// exit ;
84923: POP
84924: POP
84925: GO 84931
// end ;
84927: GO 84896
84929: POP
84930: POP
// end ;
84931: LD_VAR 0 3
84935: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
84936: LD_INT 0
84938: PPUSH
84939: PPUSH
84940: PPUSH
84941: PPUSH
// if not unit or not points then
84942: LD_VAR 0 1
84946: NOT
84947: PUSH
84948: LD_VAR 0 2
84952: NOT
84953: OR
84954: IFFALSE 84958
// exit ;
84956: GO 85048
// dist := 99999 ;
84958: LD_ADDR_VAR 0 5
84962: PUSH
84963: LD_INT 99999
84965: ST_TO_ADDR
// for i in points do
84966: LD_ADDR_VAR 0 4
84970: PUSH
84971: LD_VAR 0 2
84975: PUSH
84976: FOR_IN
84977: IFFALSE 85046
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
84979: LD_ADDR_VAR 0 6
84983: PUSH
84984: LD_VAR 0 1
84988: PPUSH
84989: LD_VAR 0 4
84993: PUSH
84994: LD_INT 1
84996: ARRAY
84997: PPUSH
84998: LD_VAR 0 4
85002: PUSH
85003: LD_INT 2
85005: ARRAY
85006: PPUSH
85007: CALL_OW 297
85011: ST_TO_ADDR
// if tmpDist < dist then
85012: LD_VAR 0 6
85016: PUSH
85017: LD_VAR 0 5
85021: LESS
85022: IFFALSE 85044
// begin result := i ;
85024: LD_ADDR_VAR 0 3
85028: PUSH
85029: LD_VAR 0 4
85033: ST_TO_ADDR
// dist := tmpDist ;
85034: LD_ADDR_VAR 0 5
85038: PUSH
85039: LD_VAR 0 6
85043: ST_TO_ADDR
// end ; end ;
85044: GO 84976
85046: POP
85047: POP
// end ;
85048: LD_VAR 0 3
85052: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
85053: LD_INT 0
85055: PPUSH
// uc_side := side ;
85056: LD_ADDR_OWVAR 20
85060: PUSH
85061: LD_VAR 0 1
85065: ST_TO_ADDR
// uc_nation := 3 ;
85066: LD_ADDR_OWVAR 21
85070: PUSH
85071: LD_INT 3
85073: ST_TO_ADDR
// vc_chassis := 25 ;
85074: LD_ADDR_OWVAR 37
85078: PUSH
85079: LD_INT 25
85081: ST_TO_ADDR
// vc_engine := engine_siberite ;
85082: LD_ADDR_OWVAR 39
85086: PUSH
85087: LD_INT 3
85089: ST_TO_ADDR
// vc_control := control_computer ;
85090: LD_ADDR_OWVAR 38
85094: PUSH
85095: LD_INT 3
85097: ST_TO_ADDR
// vc_weapon := 59 ;
85098: LD_ADDR_OWVAR 40
85102: PUSH
85103: LD_INT 59
85105: ST_TO_ADDR
// result := CreateVehicle ;
85106: LD_ADDR_VAR 0 5
85110: PUSH
85111: CALL_OW 45
85115: ST_TO_ADDR
// SetDir ( result , d ) ;
85116: LD_VAR 0 5
85120: PPUSH
85121: LD_VAR 0 4
85125: PPUSH
85126: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
85130: LD_VAR 0 5
85134: PPUSH
85135: LD_VAR 0 2
85139: PPUSH
85140: LD_VAR 0 3
85144: PPUSH
85145: LD_INT 0
85147: PPUSH
85148: CALL_OW 48
// end ;
85152: LD_VAR 0 5
85156: RET
