// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export vehiclesFrom05 , resourcesFrom05 , fastBreakthrough , stevensStatus , apeTechsStatus ; export techMatPredStatus ; export vehsFrom06 , resourcesFrom06 ; export dial_SibTechsBlocker , dial_VsevolodContactBlocker , dial_TrapDialogBlocker , dial_ConvoyDialogBlocker , dial_NorthBlocker , dial_EndMissionDialogBlocker ; export claimOvsyenkoBase , claimTerminalBase , lostAgainBase ; export immortalVsevolodTeam , savedVsevolod , vsevolodWaitGorky ; export canGoNorth ; export enableVsevolodCounter ; export canSpawnReinforces ; export canEndMission ; export canRemoveUnits ; export timeToAttack ; export cratesSpawned ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 308 0 0
// vehiclesFrom05 = LoadVariable ( 05_Tanks_4 , [ ] ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 05_Tanks_4
  31: PPUSH
  32: EMPTY
  33: PPUSH
  34: CALL_OW 30
  38: ST_TO_ADDR
// resourcesFrom05 = LoadVariable ( 05_ResourcesInCargo_3 , [ ] ) ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: LD_STRING 05_ResourcesInCargo_3
  46: PPUSH
  47: EMPTY
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// fastBreakthrough = LoadVariable ( 05_FastBreakthrough_6 , false ) ;
  54: LD_ADDR_EXP 3
  58: PUSH
  59: LD_STRING 05_FastBreakthrough_6
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// stevensStatus = LoadVariable ( 05_StevensStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 4
  74: PUSH
  75: LD_STRING 05_StevensStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// apeTechsStatus = LoadVariable ( 05_ApeTechsStatus_7 , [ 0 , 0 , 0 ] ) ;
  86: LD_ADDR_EXP 5
  90: PUSH
  91: LD_STRING 05_ApeTechsStatus_7
  93: PPUSH
  94: LD_INT 0
  96: PUSH
  97: LD_INT 0
  99: PUSH
 100: LD_INT 0
 102: PUSH
 103: EMPTY
 104: LIST
 105: LIST
 106: LIST
 107: PPUSH
 108: CALL_OW 30
 112: ST_TO_ADDR
// techMatPredStatus = state_enabled ;
 113: LD_ADDR_EXP 6
 117: PUSH
 118: LD_INT 1
 120: ST_TO_ADDR
// vehsFrom06 = [ ] ;
 121: LD_ADDR_EXP 7
 125: PUSH
 126: EMPTY
 127: ST_TO_ADDR
// resourcesFrom06 = [ ] ;
 128: LD_ADDR_EXP 8
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// dial_SibTechsBlocker = false ;
 135: LD_ADDR_EXP 9
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// dial_VsevolodContactBlocker = false ;
 143: LD_ADDR_EXP 10
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// dial_TrapDialogBlocker = false ;
 151: LD_ADDR_EXP 11
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// dial_ConvoyDialogBlocker = false ;
 159: LD_ADDR_EXP 12
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// dial_NorthBlocker = false ;
 167: LD_ADDR_EXP 13
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// dial_EndMissionDialogBlocker = false ;
 175: LD_ADDR_EXP 14
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// claimOvsyenkoBase = false ;
 183: LD_ADDR_EXP 15
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// claimTerminalBase = false ;
 191: LD_ADDR_EXP 16
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// lostAgainBase = false ;
 199: LD_ADDR_EXP 17
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// immortalVsevolodTeam = true ;
 207: LD_ADDR_EXP 18
 211: PUSH
 212: LD_INT 1
 214: ST_TO_ADDR
// savedVsevolod = false ;
 215: LD_ADDR_EXP 19
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// vsevolodWaitGorky = false ;
 223: LD_ADDR_EXP 20
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// enableVsevolodCounter = false ;
 231: LD_ADDR_EXP 22
 235: PUSH
 236: LD_INT 0
 238: ST_TO_ADDR
// canGoNorth = false ;
 239: LD_ADDR_EXP 21
 243: PUSH
 244: LD_INT 0
 246: ST_TO_ADDR
// canSpawnReinforces = false ;
 247: LD_ADDR_EXP 23
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// canEndMission = false ;
 255: LD_ADDR_EXP 24
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// canRemoveUnits = false ;
 263: LD_ADDR_EXP 25
 267: PUSH
 268: LD_INT 0
 270: ST_TO_ADDR
// timeToAttack = 0 0$00 ;
 271: LD_ADDR_EXP 26
 275: PUSH
 276: LD_INT 0
 278: ST_TO_ADDR
// cratesSpawned = 0 ;
 279: LD_ADDR_EXP 27
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// PrepareRussians ;
 287: CALL 913 0 0
// PrepareAmericans ;
 291: CALL 3344 0 0
// Nef_PrepareNature ;
 295: CALL 4459 0 0
// MissionIntro ;
 299: CALL 16068 0 0
// end ; end_of_file
 303: LD_VAR 0 1
 307: RET
// export function InitMapConfig ; begin
 308: LD_INT 0
 310: PPUSH
// BaseMapConfig ;
 311: CALL 324 0 0
// MissionMapConfig ;
 315: CALL 414 0 0
// end ;
 319: LD_VAR 0 1
 323: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 324: LD_INT 0
 326: PPUSH
// animalsAmount = [ 3 , 3 , 1 , 3 , 0 ] ;
 327: LD_ADDR_EXP 28
 331: PUSH
 332: LD_INT 3
 334: PUSH
 335: LD_INT 3
 337: PUSH
 338: LD_INT 1
 340: PUSH
 341: LD_INT 3
 343: PUSH
 344: LD_INT 0
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 354: LD_ADDR_EXP 29
 358: PUSH
 359: LD_INT 2
 361: PUSH
 362: LD_INT 2
 364: PUSH
 365: LD_INT 2
 367: PUSH
 368: LD_INT 2
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: LIST
 375: LIST
 376: ST_TO_ADDR
// animalsAgression = 3 ;
 377: LD_ADDR_EXP 30
 381: PUSH
 382: LD_INT 3
 384: ST_TO_ADDR
// debugMode = 0 ;
 385: LD_ADDR_EXP 33
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// missionPrefix = 06_ ;
 393: LD_ADDR_EXP 31
 397: PUSH
 398: LD_STRING 06_
 400: ST_TO_ADDR
// previousMissionPrefix = 05_ ;
 401: LD_ADDR_EXP 32
 405: PUSH
 406: LD_STRING 05_
 408: ST_TO_ADDR
// end ;
 409: LD_VAR 0 1
 413: RET
// export enemySkillLevel ; export ovsyenkoStartCrates , terminalStartSiberite ; export trapAmount ; export vsevolodSaveTime ; function MissionMapConfig ; begin
 414: LD_INT 0
 416: PPUSH
// enemySkillLevel = [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 417: LD_ADDR_EXP 34
 421: PUSH
 422: LD_INT 3
 424: PUSH
 425: LD_INT 4
 427: PUSH
 428: LD_INT 5
 430: PUSH
 431: LD_INT 6
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: PUSH
 440: LD_OWVAR 67
 444: ARRAY
 445: ST_TO_ADDR
// ovsyenkoStartCrates = [ 150 , 100 , 50 , 30 ] [ Difficulty ] ;
 446: LD_ADDR_EXP 35
 450: PUSH
 451: LD_INT 150
 453: PUSH
 454: LD_INT 100
 456: PUSH
 457: LD_INT 50
 459: PUSH
 460: LD_INT 30
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_OWVAR 67
 473: ARRAY
 474: ST_TO_ADDR
// terminalStartSiberite = [ 100 , 70 , 50 , 30 ] [ Difficulty ] ;
 475: LD_ADDR_EXP 36
 479: PUSH
 480: LD_INT 100
 482: PUSH
 483: LD_INT 70
 485: PUSH
 486: LD_INT 50
 488: PUSH
 489: LD_INT 30
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: PUSH
 498: LD_OWVAR 67
 502: ARRAY
 503: ST_TO_ADDR
// trapAmount = [ rand ( 4 , 5 ) , rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] ;
 504: LD_ADDR_EXP 37
 508: PUSH
 509: LD_INT 4
 511: PPUSH
 512: LD_INT 5
 514: PPUSH
 515: CALL_OW 12
 519: PUSH
 520: LD_INT 5
 522: PPUSH
 523: LD_INT 6
 525: PPUSH
 526: CALL_OW 12
 530: PUSH
 531: LD_INT 6
 533: PPUSH
 534: LD_INT 7
 536: PPUSH
 537: CALL_OW 12
 541: PUSH
 542: LD_INT 7
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: PUSH
 551: LD_OWVAR 67
 555: ARRAY
 556: ST_TO_ADDR
// vsevolodSaveTime = [ 12 12$0 , 11 11$0 , 10 10$0 , 10 10$0 ] [ Difficulty ] ;
 557: LD_ADDR_EXP 38
 561: PUSH
 562: LD_INT 25200
 564: PUSH
 565: LD_INT 23100
 567: PUSH
 568: LD_INT 21000
 570: PUSH
 571: LD_INT 21000
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: LD_OWVAR 67
 584: ARRAY
 585: ST_TO_ADDR
// end ;
 586: LD_VAR 0 1
 590: RET
// every 0 0$1 trigger debugMode do var i ;
 591: LD_EXP 33
 595: IFFALSE 910
 597: GO 599
 599: DISABLE
 600: LD_INT 0
 602: PPUSH
// begin enable ;
 603: ENABLE
// FogOff ( your_side ) ;
 604: LD_OWVAR 2
 608: PPUSH
 609: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 613: LD_ADDR_VAR 0 1
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_OWVAR 2
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: LD_INT 2
 632: PUSH
 633: LD_INT 21
 635: PUSH
 636: LD_INT 1
 638: PUSH
 639: EMPTY
 640: LIST
 641: LIST
 642: PUSH
 643: LD_INT 21
 645: PUSH
 646: LD_INT 2
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: LIST
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PPUSH
 662: CALL_OW 69
 666: PUSH
 667: FOR_IN
 668: IFFALSE 684
// SetLives ( i , 1000 ) ;
 670: LD_VAR 0 1
 674: PPUSH
 675: LD_INT 1000
 677: PPUSH
 678: CALL_OW 234
 682: GO 667
 684: POP
 685: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 686: LD_ADDR_VAR 0 1
 690: PUSH
 691: LD_INT 22
 693: PUSH
 694: LD_OWVAR 2
 698: PUSH
 699: EMPTY
 700: LIST
 701: LIST
 702: PUSH
 703: LD_INT 21
 705: PUSH
 706: LD_INT 1
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: PPUSH
 717: CALL_OW 69
 721: PUSH
 722: FOR_IN
 723: IFFALSE 787
// begin SetSkill ( i , skill_combat , 10 ) ;
 725: LD_VAR 0 1
 729: PPUSH
 730: LD_INT 1
 732: PPUSH
 733: LD_INT 10
 735: PPUSH
 736: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 740: LD_VAR 0 1
 744: PPUSH
 745: LD_INT 2
 747: PPUSH
 748: LD_INT 10
 750: PPUSH
 751: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 755: LD_VAR 0 1
 759: PPUSH
 760: LD_INT 3
 762: PPUSH
 763: LD_INT 10
 765: PPUSH
 766: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 770: LD_VAR 0 1
 774: PPUSH
 775: LD_INT 4
 777: PPUSH
 778: LD_INT 10
 780: PPUSH
 781: CALL_OW 237
// end ;
 785: GO 722
 787: POP
 788: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 789: LD_ADDR_VAR 0 1
 793: PUSH
 794: LD_INT 22
 796: PUSH
 797: LD_OWVAR 2
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: PUSH
 806: LD_INT 2
 808: PUSH
 809: LD_INT 30
 811: PUSH
 812: LD_INT 0
 814: PUSH
 815: EMPTY
 816: LIST
 817: LIST
 818: PUSH
 819: LD_INT 30
 821: PUSH
 822: LD_INT 1
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: LIST
 833: PUSH
 834: EMPTY
 835: LIST
 836: LIST
 837: PPUSH
 838: CALL_OW 69
 842: PUSH
 843: FOR_IN
 844: IFFALSE 908
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 846: LD_VAR 0 1
 850: PPUSH
 851: CALL_OW 274
 855: PPUSH
 856: LD_INT 1
 858: PPUSH
 859: LD_INT 9999
 861: PPUSH
 862: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 866: LD_VAR 0 1
 870: PPUSH
 871: CALL_OW 274
 875: PPUSH
 876: LD_INT 2
 878: PPUSH
 879: LD_INT 9999
 881: PPUSH
 882: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 886: LD_VAR 0 1
 890: PPUSH
 891: CALL_OW 274
 895: PPUSH
 896: LD_INT 3
 898: PPUSH
 899: LD_INT 9999
 901: PPUSH
 902: CALL_OW 277
// end ;
 906: GO 843
 908: POP
 909: POP
// end ; end_of_file
 910: PPOPN 1
 912: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Platonov , Kirilenkova , Belkov , Belkov2 ; export Vsevolod , vsevolodTeam , Petr , Igor , Boris ; export ConvoyBoris , ConvoyIbrahim ; export function PrepareRussians ; begin
 913: LD_INT 0
 915: PPUSH
// PrepareHeroes ;
 916: CALL 925 0 0
// end ;
 920: LD_VAR 0 1
 924: RET
// function PrepareHeroes ; var i , j , car , tmp , cargoList , bigCargoList , point , areaPoints , nearPosition , burlakPosition , distance , index ; begin
 925: LD_INT 0
 927: PPUSH
 928: PPUSH
 929: PPUSH
 930: PPUSH
 931: PPUSH
 932: PPUSH
 933: PPUSH
 934: PPUSH
 935: PPUSH
 936: PPUSH
 937: PPUSH
 938: PPUSH
 939: PPUSH
// point = [ 170 , 208 ] ;
 940: LD_ADDR_VAR 0 8
 944: PUSH
 945: LD_INT 170
 947: PUSH
 948: LD_INT 208
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: ST_TO_ADDR
// areaPoints = AreaToList ( RussianSpawnArea1 , 0 ) ;
 955: LD_ADDR_VAR 0 9
 959: PUSH
 960: LD_INT 1
 962: PPUSH
 963: LD_INT 0
 965: PPUSH
 966: CALL_OW 517
 970: ST_TO_ADDR
// uc_side = 3 ;
 971: LD_ADDR_OWVAR 20
 975: PUSH
 976: LD_INT 3
 978: ST_TO_ADDR
// uc_nation = 3 ;
 979: LD_ADDR_OWVAR 21
 983: PUSH
 984: LD_INT 3
 986: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , 0 ) ;
 987: LD_ADDR_EXP 39
 991: PUSH
 992: LD_STRING Burlak
 994: PPUSH
 995: LD_INT 1
 997: PPUSH
 998: LD_INT 0
1000: PPUSH
1001: CALL 11785 0 3
1005: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , true , 0 ) ;
1006: LD_ADDR_EXP 44
1010: PUSH
1011: LD_STRING Titov
1013: PPUSH
1014: LD_INT 1
1016: PPUSH
1017: LD_INT 0
1019: PPUSH
1020: CALL 11785 0 3
1024: ST_TO_ADDR
// Dolgov := PrepareUnitExt ( Dolgov , true , 0 ) ;
1025: LD_ADDR_EXP 45
1029: PUSH
1030: LD_STRING Dolgov
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_INT 0
1038: PPUSH
1039: CALL 11785 0 3
1043: ST_TO_ADDR
// Lipshchin := PrepareUnitExt ( Lipshchin , true , 0 ) ;
1044: LD_ADDR_EXP 46
1048: PUSH
1049: LD_STRING Lipshchin
1051: PPUSH
1052: LD_INT 1
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL 11785 0 3
1062: ST_TO_ADDR
// Karamazov := PrepareUnitExt ( Karamazov , true , class_engineer ) ;
1063: LD_ADDR_EXP 40
1067: PUSH
1068: LD_STRING Karamazov
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: LD_INT 2
1076: PPUSH
1077: CALL 11785 0 3
1081: ST_TO_ADDR
// Petrovova := PrepareUnitExt ( Petrovova , true , 0 ) ;
1082: LD_ADDR_EXP 41
1086: PUSH
1087: LD_STRING Petrovova
1089: PPUSH
1090: LD_INT 1
1092: PPUSH
1093: LD_INT 0
1095: PPUSH
1096: CALL 11785 0 3
1100: ST_TO_ADDR
// Gleb := PrepareUnitExt ( Gleb , true , 0 ) ;
1101: LD_ADDR_EXP 42
1105: PUSH
1106: LD_STRING Gleb
1108: PPUSH
1109: LD_INT 1
1111: PPUSH
1112: LD_INT 0
1114: PPUSH
1115: CALL 11785 0 3
1119: ST_TO_ADDR
// Petrosyan := PrepareUnitExt ( Petrosyan , true , 0 ) ;
1120: LD_ADDR_EXP 43
1124: PUSH
1125: LD_STRING Petrosyan
1127: PPUSH
1128: LD_INT 1
1130: PPUSH
1131: LD_INT 0
1133: PPUSH
1134: CALL 11785 0 3
1138: ST_TO_ADDR
// Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
1139: LD_ADDR_EXP 47
1143: PUSH
1144: LD_STRING Platonov
1146: PPUSH
1147: LD_INT 0
1149: PPUSH
1150: LD_INT 0
1152: PPUSH
1153: CALL 11785 0 3
1157: ST_TO_ADDR
// if TestCharacters ( 04_Kirilenkova ) then
1158: LD_STRING 04_Kirilenkova
1160: PPUSH
1161: CALL_OW 28
1165: IFFALSE 1192
// begin Kirilenkova := CreateCharacter ( 04_Kirilenkova ) ;
1167: LD_ADDR_EXP 48
1171: PUSH
1172: LD_STRING 04_Kirilenkova
1174: PPUSH
1175: CALL_OW 34
1179: ST_TO_ADDR
// SetClass ( Kirilenkova , class_scientistic ) ;
1180: LD_EXP 48
1184: PPUSH
1185: LD_INT 4
1187: PPUSH
1188: CALL_OW 336
// end ; if TestCharacters ( 04_Belkov ) then
1192: LD_STRING 04_Belkov
1194: PPUSH
1195: CALL_OW 28
1199: IFFALSE 1226
// begin Belkov := CreateCharacter ( 04_Belkov ) ;
1201: LD_ADDR_EXP 49
1205: PUSH
1206: LD_STRING 04_Belkov
1208: PPUSH
1209: CALL_OW 34
1213: ST_TO_ADDR
// SetClass ( Belkov , class_soldier ) ;
1214: LD_EXP 49
1218: PPUSH
1219: LD_INT 1
1221: PPUSH
1222: CALL_OW 336
// end ; if TestCharacters ( 04_Belkov2 ) then
1226: LD_STRING 04_Belkov2
1228: PPUSH
1229: CALL_OW 28
1233: IFFALSE 1260
// begin Belkov2 := CreateCharacter ( 04_Belkov2 ) ;
1235: LD_ADDR_EXP 50
1239: PUSH
1240: LD_STRING 04_Belkov2
1242: PPUSH
1243: CALL_OW 34
1247: ST_TO_ADDR
// SetClass ( Belkov2 , class_soldier ) ;
1248: LD_EXP 50
1252: PPUSH
1253: LD_INT 1
1255: PPUSH
1256: CALL_OW 336
// end ; for i := 1 to vehiclesFrom05 do
1260: LD_ADDR_VAR 0 2
1264: PUSH
1265: DOUBLE
1266: LD_INT 1
1268: DEC
1269: ST_TO_ADDR
1270: LD_EXP 1
1274: PUSH
1275: FOR_TO
1276: IFFALSE 1938
// begin uc_nation = vehiclesFrom05 [ i ] [ 1 ] ;
1278: LD_ADDR_OWVAR 21
1282: PUSH
1283: LD_EXP 1
1287: PUSH
1288: LD_VAR 0 2
1292: ARRAY
1293: PUSH
1294: LD_INT 1
1296: ARRAY
1297: ST_TO_ADDR
// vc_chassis := vehiclesFrom05 [ i ] [ 2 ] ;
1298: LD_ADDR_OWVAR 37
1302: PUSH
1303: LD_EXP 1
1307: PUSH
1308: LD_VAR 0 2
1312: ARRAY
1313: PUSH
1314: LD_INT 2
1316: ARRAY
1317: ST_TO_ADDR
// vc_engine = vehiclesFrom05 [ i ] [ 3 ] ;
1318: LD_ADDR_OWVAR 39
1322: PUSH
1323: LD_EXP 1
1327: PUSH
1328: LD_VAR 0 2
1332: ARRAY
1333: PUSH
1334: LD_INT 3
1336: ARRAY
1337: ST_TO_ADDR
// vc_control = vehiclesFrom05 [ i ] [ 4 ] ;
1338: LD_ADDR_OWVAR 38
1342: PUSH
1343: LD_EXP 1
1347: PUSH
1348: LD_VAR 0 2
1352: ARRAY
1353: PUSH
1354: LD_INT 4
1356: ARRAY
1357: ST_TO_ADDR
// vc_weapon := vehiclesFrom05 [ i ] [ 5 ] ;
1358: LD_ADDR_OWVAR 40
1362: PUSH
1363: LD_EXP 1
1367: PUSH
1368: LD_VAR 0 2
1372: ARRAY
1373: PUSH
1374: LD_INT 5
1376: ARRAY
1377: ST_TO_ADDR
// uc_direction := 0 ;
1378: LD_ADDR_OWVAR 24
1382: PUSH
1383: LD_INT 0
1385: ST_TO_ADDR
// vc_fuel_battery := Rand ( 10 , 15 ) ;
1386: LD_ADDR_OWVAR 41
1390: PUSH
1391: LD_INT 10
1393: PPUSH
1394: LD_INT 15
1396: PPUSH
1397: CALL_OW 12
1401: ST_TO_ADDR
// car := CreateVehicle ;
1402: LD_ADDR_VAR 0 4
1406: PUSH
1407: CALL_OW 45
1411: ST_TO_ADDR
// distance = 999 ;
1412: LD_ADDR_VAR 0 12
1416: PUSH
1417: LD_INT 999
1419: ST_TO_ADDR
// index = 1 ;
1420: LD_ADDR_VAR 0 13
1424: PUSH
1425: LD_INT 1
1427: ST_TO_ADDR
// for j := 1 to areaPoints [ 1 ] do
1428: LD_ADDR_VAR 0 3
1432: PUSH
1433: DOUBLE
1434: LD_INT 1
1436: DEC
1437: ST_TO_ADDR
1438: LD_VAR 0 9
1442: PUSH
1443: LD_INT 1
1445: ARRAY
1446: PUSH
1447: FOR_TO
1448: IFFALSE 1619
// begin if GetDistXY ( point [ 1 ] , point [ 2 ] , areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ) < distance then
1450: LD_VAR 0 8
1454: PUSH
1455: LD_INT 1
1457: ARRAY
1458: PPUSH
1459: LD_VAR 0 8
1463: PUSH
1464: LD_INT 2
1466: ARRAY
1467: PPUSH
1468: LD_VAR 0 9
1472: PUSH
1473: LD_INT 1
1475: ARRAY
1476: PUSH
1477: LD_VAR 0 3
1481: ARRAY
1482: PPUSH
1483: LD_VAR 0 9
1487: PUSH
1488: LD_INT 2
1490: ARRAY
1491: PUSH
1492: LD_VAR 0 3
1496: ARRAY
1497: PPUSH
1498: CALL_OW 298
1502: PUSH
1503: LD_VAR 0 12
1507: LESS
1508: IFFALSE 1617
// begin distance = GetDistXY ( point [ 1 ] , point [ 2 ] , areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ) ;
1510: LD_ADDR_VAR 0 12
1514: PUSH
1515: LD_VAR 0 8
1519: PUSH
1520: LD_INT 1
1522: ARRAY
1523: PPUSH
1524: LD_VAR 0 8
1528: PUSH
1529: LD_INT 2
1531: ARRAY
1532: PPUSH
1533: LD_VAR 0 9
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PUSH
1542: LD_VAR 0 3
1546: ARRAY
1547: PPUSH
1548: LD_VAR 0 9
1552: PUSH
1553: LD_INT 2
1555: ARRAY
1556: PUSH
1557: LD_VAR 0 3
1561: ARRAY
1562: PPUSH
1563: CALL_OW 298
1567: ST_TO_ADDR
// nearPosition = [ areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ] ;
1568: LD_ADDR_VAR 0 10
1572: PUSH
1573: LD_VAR 0 9
1577: PUSH
1578: LD_INT 1
1580: ARRAY
1581: PUSH
1582: LD_VAR 0 3
1586: ARRAY
1587: PUSH
1588: LD_VAR 0 9
1592: PUSH
1593: LD_INT 2
1595: ARRAY
1596: PUSH
1597: LD_VAR 0 3
1601: ARRAY
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: ST_TO_ADDR
// index = j ;
1607: LD_ADDR_VAR 0 13
1611: PUSH
1612: LD_VAR 0 3
1616: ST_TO_ADDR
// end ; end ;
1617: GO 1447
1619: POP
1620: POP
// if not burlakPosition then
1621: LD_VAR 0 11
1625: NOT
1626: IFFALSE 1638
// burlakPosition = nearPosition ;
1628: LD_ADDR_VAR 0 11
1632: PUSH
1633: LD_VAR 0 10
1637: ST_TO_ADDR
// if areaPoints then
1638: LD_VAR 0 9
1642: IFFALSE 1690
// begin areaPoints = Delete2D ( areaPoints , 1 , index ) ;
1644: LD_ADDR_VAR 0 9
1648: PUSH
1649: LD_VAR 0 9
1653: PPUSH
1654: LD_INT 1
1656: PPUSH
1657: LD_VAR 0 13
1661: PPUSH
1662: CALL 12614 0 3
1666: ST_TO_ADDR
// areaPoints = Delete2D ( areaPoints , 2 , index ) ;
1667: LD_ADDR_VAR 0 9
1671: PUSH
1672: LD_VAR 0 9
1676: PPUSH
1677: LD_INT 2
1679: PPUSH
1680: LD_VAR 0 13
1684: PPUSH
1685: CALL 12614 0 3
1689: ST_TO_ADDR
// end ; PlaceUnitXY ( car , nearPosition [ 1 ] , nearPosition [ 2 ] , false ) ;
1690: LD_VAR 0 4
1694: PPUSH
1695: LD_VAR 0 10
1699: PUSH
1700: LD_INT 1
1702: ARRAY
1703: PPUSH
1704: LD_VAR 0 10
1708: PUSH
1709: LD_INT 2
1711: ARRAY
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 48
// case vehiclesFrom05 [ i ] [ 6 ] of Bur :
1720: LD_EXP 1
1724: PUSH
1725: LD_VAR 0 2
1729: ARRAY
1730: PUSH
1731: LD_INT 6
1733: ARRAY
1734: PUSH
1735: LD_STRING Bur
1737: DOUBLE
1738: EQUAL
1739: IFTRUE 1743
1741: GO 1760
1743: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
1744: LD_EXP 39
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL_OW 52
1758: GO 1936
1760: LD_STRING Kar
1762: DOUBLE
1763: EQUAL
1764: IFTRUE 1768
1766: GO 1785
1768: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
1769: LD_EXP 40
1773: PPUSH
1774: LD_VAR 0 4
1778: PPUSH
1779: CALL_OW 52
1783: GO 1936
1785: LD_STRING Ptr
1787: DOUBLE
1788: EQUAL
1789: IFTRUE 1793
1791: GO 1810
1793: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
1794: LD_EXP 41
1798: PPUSH
1799: LD_VAR 0 4
1803: PPUSH
1804: CALL_OW 52
1808: GO 1936
1810: LD_STRING Glb
1812: DOUBLE
1813: EQUAL
1814: IFTRUE 1818
1816: GO 1835
1818: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
1819: LD_EXP 42
1823: PPUSH
1824: LD_VAR 0 4
1828: PPUSH
1829: CALL_OW 52
1833: GO 1936
1835: LD_STRING Pet
1837: DOUBLE
1838: EQUAL
1839: IFTRUE 1843
1841: GO 1860
1843: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
1844: LD_EXP 43
1848: PPUSH
1849: LD_VAR 0 4
1853: PPUSH
1854: CALL_OW 52
1858: GO 1936
1860: LD_STRING Dol
1862: DOUBLE
1863: EQUAL
1864: IFTRUE 1868
1866: GO 1885
1868: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
1869: LD_EXP 45
1873: PPUSH
1874: LD_VAR 0 4
1878: PPUSH
1879: CALL_OW 52
1883: GO 1936
1885: LD_STRING Lip
1887: DOUBLE
1888: EQUAL
1889: IFTRUE 1893
1891: GO 1910
1893: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
1894: LD_EXP 46
1898: PPUSH
1899: LD_VAR 0 4
1903: PPUSH
1904: CALL_OW 52
1908: GO 1936
1910: LD_STRING Tit
1912: DOUBLE
1913: EQUAL
1914: IFTRUE 1918
1916: GO 1935
1918: POP
// PlaceHumanInUnit ( Titov , car ) ; end ;
1919: LD_EXP 44
1923: PPUSH
1924: LD_VAR 0 4
1928: PPUSH
1929: CALL_OW 52
1933: GO 1936
1935: POP
// end ;
1936: GO 1275
1938: POP
1939: POP
// cargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
1940: LD_ADDR_VAR 0 6
1944: PUSH
1945: LD_INT 22
1947: PUSH
1948: LD_INT 3
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: PUSH
1955: LD_INT 21
1957: PUSH
1958: LD_INT 2
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: LD_INT 34
1970: PUSH
1971: LD_INT 51
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 34
1980: PUSH
1981: LD_INT 32
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: PUSH
1988: LD_INT 34
1990: PUSH
1991: LD_INT 12
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: LIST
2008: PPUSH
2009: CALL_OW 69
2013: ST_TO_ADDR
// bigCargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 89 ] ] ) ;
2014: LD_ADDR_VAR 0 7
2018: PUSH
2019: LD_INT 22
2021: PUSH
2022: LD_INT 3
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PUSH
2029: LD_INT 21
2031: PUSH
2032: LD_INT 2
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: PUSH
2039: LD_INT 34
2041: PUSH
2042: LD_INT 89
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: PPUSH
2054: CALL_OW 69
2058: ST_TO_ADDR
// if cargoList then
2059: LD_VAR 0 6
2063: IFFALSE 2253
// for i = 1 to cargoList do
2065: LD_ADDR_VAR 0 2
2069: PUSH
2070: DOUBLE
2071: LD_INT 1
2073: DEC
2074: ST_TO_ADDR
2075: LD_VAR 0 6
2079: PUSH
2080: FOR_TO
2081: IFFALSE 2251
// if resourcesFrom05 then
2083: LD_EXP 2
2087: IFFALSE 2249
// begin if not resourcesFrom05 [ i ] [ 1 ] > 100 or resourcesFrom05 [ i ] [ 2 ] > 100 or resourcesFrom05 [ i ] [ 3 ] > 100 then
2089: LD_EXP 2
2093: PUSH
2094: LD_VAR 0 2
2098: ARRAY
2099: PUSH
2100: LD_INT 1
2102: ARRAY
2103: PUSH
2104: LD_INT 100
2106: GREATER
2107: NOT
2108: PUSH
2109: LD_EXP 2
2113: PUSH
2114: LD_VAR 0 2
2118: ARRAY
2119: PUSH
2120: LD_INT 2
2122: ARRAY
2123: PUSH
2124: LD_INT 100
2126: GREATER
2127: OR
2128: PUSH
2129: LD_EXP 2
2133: PUSH
2134: LD_VAR 0 2
2138: ARRAY
2139: PUSH
2140: LD_INT 3
2142: ARRAY
2143: PUSH
2144: LD_INT 100
2146: GREATER
2147: OR
2148: IFFALSE 2249
// begin AddCargo ( cargoList [ i ] , 1 , resourcesFrom05 [ i ] [ 1 ] ) ;
2150: LD_VAR 0 6
2154: PUSH
2155: LD_VAR 0 2
2159: ARRAY
2160: PPUSH
2161: LD_INT 1
2163: PPUSH
2164: LD_EXP 2
2168: PUSH
2169: LD_VAR 0 2
2173: ARRAY
2174: PUSH
2175: LD_INT 1
2177: ARRAY
2178: PPUSH
2179: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resourcesFrom05 [ i ] [ 2 ] ) ;
2183: LD_VAR 0 6
2187: PUSH
2188: LD_VAR 0 2
2192: ARRAY
2193: PPUSH
2194: LD_INT 2
2196: PPUSH
2197: LD_EXP 2
2201: PUSH
2202: LD_VAR 0 2
2206: ARRAY
2207: PUSH
2208: LD_INT 2
2210: ARRAY
2211: PPUSH
2212: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resourcesFrom05 [ i ] [ 3 ] ) ;
2216: LD_VAR 0 6
2220: PUSH
2221: LD_VAR 0 2
2225: ARRAY
2226: PPUSH
2227: LD_INT 3
2229: PPUSH
2230: LD_EXP 2
2234: PUSH
2235: LD_VAR 0 2
2239: ARRAY
2240: PUSH
2241: LD_INT 3
2243: ARRAY
2244: PPUSH
2245: CALL_OW 291
// end ; end ;
2249: GO 2080
2251: POP
2252: POP
// if bigCargoList then
2253: LD_VAR 0 7
2257: IFFALSE 2446
// for i = 1 to bigCargoList do
2259: LD_ADDR_VAR 0 2
2263: PUSH
2264: DOUBLE
2265: LD_INT 1
2267: DEC
2268: ST_TO_ADDR
2269: LD_VAR 0 7
2273: PUSH
2274: FOR_TO
2275: IFFALSE 2444
// if resourcesFrom05 then
2277: LD_EXP 2
2281: IFFALSE 2442
// begin if resourcesFrom05 [ i ] [ 1 ] > 100 or resourcesFrom05 [ i ] [ 2 ] > 100 or resourcesFrom05 [ i ] [ 3 ] > 100 then
2283: LD_EXP 2
2287: PUSH
2288: LD_VAR 0 2
2292: ARRAY
2293: PUSH
2294: LD_INT 1
2296: ARRAY
2297: PUSH
2298: LD_INT 100
2300: GREATER
2301: PUSH
2302: LD_EXP 2
2306: PUSH
2307: LD_VAR 0 2
2311: ARRAY
2312: PUSH
2313: LD_INT 2
2315: ARRAY
2316: PUSH
2317: LD_INT 100
2319: GREATER
2320: OR
2321: PUSH
2322: LD_EXP 2
2326: PUSH
2327: LD_VAR 0 2
2331: ARRAY
2332: PUSH
2333: LD_INT 3
2335: ARRAY
2336: PUSH
2337: LD_INT 100
2339: GREATER
2340: OR
2341: IFFALSE 2442
// begin AddCargo ( bigCargoList [ i ] , 1 , resourcesFrom05 [ i ] [ 1 ] ) ;
2343: LD_VAR 0 7
2347: PUSH
2348: LD_VAR 0 2
2352: ARRAY
2353: PPUSH
2354: LD_INT 1
2356: PPUSH
2357: LD_EXP 2
2361: PUSH
2362: LD_VAR 0 2
2366: ARRAY
2367: PUSH
2368: LD_INT 1
2370: ARRAY
2371: PPUSH
2372: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 2 , resourcesFrom05 [ i ] [ 2 ] ) ;
2376: LD_VAR 0 7
2380: PUSH
2381: LD_VAR 0 2
2385: ARRAY
2386: PPUSH
2387: LD_INT 2
2389: PPUSH
2390: LD_EXP 2
2394: PUSH
2395: LD_VAR 0 2
2399: ARRAY
2400: PUSH
2401: LD_INT 2
2403: ARRAY
2404: PPUSH
2405: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 3 , resourcesFrom05 [ i ] [ 3 ] ) ;
2409: LD_VAR 0 7
2413: PUSH
2414: LD_VAR 0 2
2418: ARRAY
2419: PPUSH
2420: LD_INT 3
2422: PPUSH
2423: LD_EXP 2
2427: PUSH
2428: LD_VAR 0 2
2432: ARRAY
2433: PUSH
2434: LD_INT 3
2436: ARRAY
2437: PPUSH
2438: CALL_OW 291
// end ; end ;
2442: GO 2274
2444: POP
2445: POP
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_class , class_engineer ] ] ) then
2446: LD_INT 22
2448: PUSH
2449: LD_INT 3
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PUSH
2456: LD_INT 21
2458: PUSH
2459: LD_INT 1
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PUSH
2466: LD_INT 23
2468: PUSH
2469: LD_INT 3
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: PUSH
2476: LD_INT 25
2478: PUSH
2479: LD_INT 2
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: EMPTY
2487: LIST
2488: LIST
2489: LIST
2490: LIST
2491: PPUSH
2492: CALL_OW 69
2496: NOT
2497: IFFALSE 2602
// begin if IsOk ( Lipshchin ) then
2499: LD_EXP 46
2503: PPUSH
2504: CALL_OW 302
2508: IFFALSE 2524
// SetClass ( Lipshchin , class_engineer ) else
2510: LD_EXP 46
2514: PPUSH
2515: LD_INT 2
2517: PPUSH
2518: CALL_OW 336
2522: GO 2602
// begin tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ;
2524: LD_ADDR_VAR 0 5
2528: PUSH
2529: LD_INT 22
2531: PUSH
2532: LD_INT 3
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: PUSH
2539: LD_INT 21
2541: PUSH
2542: LD_INT 1
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: PUSH
2549: LD_INT 23
2551: PUSH
2552: LD_INT 3
2554: PUSH
2555: EMPTY
2556: LIST
2557: LIST
2558: PUSH
2559: LD_INT 50
2561: PUSH
2562: EMPTY
2563: LIST
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: PPUSH
2571: CALL_OW 69
2575: ST_TO_ADDR
// SetClass ( tmp [ rand ( 0 , tmp ) ] , class_engineer ) ;
2576: LD_VAR 0 5
2580: PUSH
2581: LD_INT 0
2583: PPUSH
2584: LD_VAR 0 5
2588: PPUSH
2589: CALL_OW 12
2593: ARRAY
2594: PPUSH
2595: LD_INT 2
2597: PPUSH
2598: CALL_OW 336
// end ; end ; SetTech ( tech_ApeLang , 3 , apeTechsStatus [ 1 ] ) ;
2602: LD_INT 1
2604: PPUSH
2605: LD_INT 3
2607: PPUSH
2608: LD_EXP 5
2612: PUSH
2613: LD_INT 1
2615: ARRAY
2616: PPUSH
2617: CALL_OW 322
// SetTech ( tech_ApePsych , 3 , apeTechsStatus [ 2 ] ) ;
2621: LD_INT 2
2623: PPUSH
2624: LD_INT 3
2626: PPUSH
2627: LD_EXP 5
2631: PUSH
2632: LD_INT 2
2634: ARRAY
2635: PPUSH
2636: CALL_OW 322
// SetTech ( tech_ApeAgres , 3 , apeTechsStatus [ 3 ] ) ;
2640: LD_INT 11
2642: PPUSH
2643: LD_INT 3
2645: PPUSH
2646: LD_EXP 5
2650: PUSH
2651: LD_INT 3
2653: ARRAY
2654: PPUSH
2655: CALL_OW 322
// end ;
2659: LD_VAR 0 1
2663: RET
// export function PrepareVsevolod ; var i , un ; begin
2664: LD_INT 0
2666: PPUSH
2667: PPUSH
2668: PPUSH
// uc_side = 6 ;
2669: LD_ADDR_OWVAR 20
2673: PUSH
2674: LD_INT 6
2676: ST_TO_ADDR
// uc_nation = 3 ;
2677: LD_ADDR_OWVAR 21
2681: PUSH
2682: LD_INT 3
2684: ST_TO_ADDR
// vsevolodTeam = [ ] ;
2685: LD_ADDR_EXP 52
2689: PUSH
2690: EMPTY
2691: ST_TO_ADDR
// Vsevolod := PrepareUnitExt ( Vsevolod , false , class_soldier ) ;
2692: LD_ADDR_EXP 51
2696: PUSH
2697: LD_STRING Vsevolod
2699: PPUSH
2700: LD_INT 0
2702: PPUSH
2703: LD_INT 1
2705: PPUSH
2706: CALL 11785 0 3
2710: ST_TO_ADDR
// PlaceUnitArea ( Vsevolod , VsevolodSpawnArea , false ) ;
2711: LD_EXP 51
2715: PPUSH
2716: LD_INT 7
2718: PPUSH
2719: LD_INT 0
2721: PPUSH
2722: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Vsevolod ;
2726: LD_ADDR_EXP 52
2730: PUSH
2731: LD_EXP 52
2735: PUSH
2736: LD_EXP 51
2740: ADD
2741: ST_TO_ADDR
// Petr = PrepareUnitExt ( SPetr , false , class_engineer ) ;
2742: LD_ADDR_EXP 53
2746: PUSH
2747: LD_STRING SPetr
2749: PPUSH
2750: LD_INT 0
2752: PPUSH
2753: LD_INT 2
2755: PPUSH
2756: CALL 11785 0 3
2760: ST_TO_ADDR
// PlaceUnitArea ( Petr , VsevolodSpawnArea , false ) ;
2761: LD_EXP 53
2765: PPUSH
2766: LD_INT 7
2768: PPUSH
2769: LD_INT 0
2771: PPUSH
2772: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Petr ;
2776: LD_ADDR_EXP 52
2780: PUSH
2781: LD_EXP 52
2785: PUSH
2786: LD_EXP 53
2790: ADD
2791: ST_TO_ADDR
// Igor = PrepareUnitExt ( SIgor , false , class_soldier ) ;
2792: LD_ADDR_EXP 54
2796: PUSH
2797: LD_STRING SIgor
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: LD_INT 1
2805: PPUSH
2806: CALL 11785 0 3
2810: ST_TO_ADDR
// PlaceUnitArea ( Igor , VsevolodSpawnArea , false ) ;
2811: LD_EXP 54
2815: PPUSH
2816: LD_INT 7
2818: PPUSH
2819: LD_INT 0
2821: PPUSH
2822: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Igor ;
2826: LD_ADDR_EXP 52
2830: PUSH
2831: LD_EXP 52
2835: PUSH
2836: LD_EXP 54
2840: ADD
2841: ST_TO_ADDR
// Boris = PrepareUnitExt ( SBoris , false , class_soldier ) ;
2842: LD_ADDR_EXP 55
2846: PUSH
2847: LD_STRING SBoris
2849: PPUSH
2850: LD_INT 0
2852: PPUSH
2853: LD_INT 1
2855: PPUSH
2856: CALL 11785 0 3
2860: ST_TO_ADDR
// PlaceUnitArea ( Boris , VsevolodSpawnArea , false ) ;
2861: LD_EXP 55
2865: PPUSH
2866: LD_INT 7
2868: PPUSH
2869: LD_INT 0
2871: PPUSH
2872: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Boris ;
2876: LD_ADDR_EXP 52
2880: PUSH
2881: LD_EXP 52
2885: PUSH
2886: LD_EXP 55
2890: ADD
2891: ST_TO_ADDR
// end ;
2892: LD_VAR 0 1
2896: RET
// export function SpawnPlatonovReinforces ; var i , un , veh ; begin
2897: LD_INT 0
2899: PPUSH
2900: PPUSH
2901: PPUSH
2902: PPUSH
// uc_side = 3 ;
2903: LD_ADDR_OWVAR 20
2907: PUSH
2908: LD_INT 3
2910: ST_TO_ADDR
// uc_nation = 3 ;
2911: LD_ADDR_OWVAR 21
2915: PUSH
2916: LD_INT 3
2918: ST_TO_ADDR
// PrepareSoldier ( false , 4 ) ;
2919: LD_INT 0
2921: PPUSH
2922: LD_INT 4
2924: PPUSH
2925: CALL_OW 381
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] , rand ( 50 , 60 ) ) ;
2929: LD_INT 22
2931: PPUSH
2932: LD_INT 1
2934: PPUSH
2935: LD_INT 1
2937: PPUSH
2938: LD_INT 43
2940: PUSH
2941: LD_INT 44
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PUSH
2948: LD_INT 1
2950: PPUSH
2951: LD_INT 2
2953: PPUSH
2954: CALL_OW 12
2958: ARRAY
2959: PPUSH
2960: LD_INT 50
2962: PPUSH
2963: LD_INT 60
2965: PPUSH
2966: CALL_OW 12
2970: PPUSH
2971: CALL 48972 0 5
// veh = CreateVehicle ;
2975: LD_ADDR_VAR 0 4
2979: PUSH
2980: CALL_OW 45
2984: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
2985: LD_VAR 0 4
2989: PPUSH
2990: LD_INT 0
2992: PPUSH
2993: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 230 , false ) ;
2997: LD_VAR 0 4
3001: PPUSH
3002: LD_INT 134
3004: PPUSH
3005: LD_INT 230
3007: PPUSH
3008: LD_INT 0
3010: PPUSH
3011: CALL_OW 48
// if Belkov then
3015: LD_EXP 49
3019: IFFALSE 3037
// PlaceHumanInUnit ( Belkov , veh ) else
3021: LD_EXP 49
3025: PPUSH
3026: LD_VAR 0 4
3030: PPUSH
3031: CALL_OW 52
3035: GO 3090
// if Difficulty = 1 or Difficulty = 2 then
3037: LD_OWVAR 67
3041: PUSH
3042: LD_INT 1
3044: EQUAL
3045: PUSH
3046: LD_OWVAR 67
3050: PUSH
3051: LD_INT 2
3053: EQUAL
3054: OR
3055: IFFALSE 3090
// begin ConvoyBoris = PrepareUnitExt ( SCBoris , false , class_soldier ) ;
3057: LD_ADDR_EXP 56
3061: PUSH
3062: LD_STRING SCBoris
3064: PPUSH
3065: LD_INT 0
3067: PPUSH
3068: LD_INT 1
3070: PPUSH
3071: CALL 11785 0 3
3075: ST_TO_ADDR
// PlaceHumanInUnit ( ConvoyBoris , veh ) ;
3076: LD_EXP 56
3080: PPUSH
3081: LD_VAR 0 4
3085: PPUSH
3086: CALL_OW 52
// end ; PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3090: LD_INT 22
3092: PPUSH
3093: LD_INT 1
3095: PPUSH
3096: LD_INT 1
3098: PPUSH
3099: LD_INT 51
3101: PPUSH
3102: LD_INT 50
3104: PPUSH
3105: LD_INT 60
3107: PPUSH
3108: CALL_OW 12
3112: PPUSH
3113: CALL 48972 0 5
// veh = CreateVehicle ;
3117: LD_ADDR_VAR 0 4
3121: PUSH
3122: CALL_OW 45
3126: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3127: LD_VAR 0 4
3131: PPUSH
3132: LD_INT 0
3134: PPUSH
3135: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 233 , false ) ;
3139: LD_VAR 0 4
3143: PPUSH
3144: LD_INT 134
3146: PPUSH
3147: LD_INT 233
3149: PPUSH
3150: LD_INT 0
3152: PPUSH
3153: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
3157: LD_VAR 0 4
3161: PPUSH
3162: LD_INT 1
3164: PPUSH
3165: LD_INT 100
3167: PPUSH
3168: CALL_OW 290
// if Belkov2 then
3172: LD_EXP 50
3176: IFFALSE 3194
// PlaceHumanInUnit ( Belkov2 , veh ) else
3178: LD_EXP 50
3182: PPUSH
3183: LD_VAR 0 4
3187: PPUSH
3188: CALL_OW 52
3192: GO 3237
// if Difficulty = 1 then
3194: LD_OWVAR 67
3198: PUSH
3199: LD_INT 1
3201: EQUAL
3202: IFFALSE 3237
// begin ConvoyIbrahim = PrepareUnitExt ( SCIbrahim , false , class_soldier ) ;
3204: LD_ADDR_EXP 57
3208: PUSH
3209: LD_STRING SCIbrahim
3211: PPUSH
3212: LD_INT 0
3214: PPUSH
3215: LD_INT 1
3217: PPUSH
3218: CALL 11785 0 3
3222: ST_TO_ADDR
// PlaceHumanInUnit ( ConvoyIbrahim , veh ) ;
3223: LD_EXP 57
3227: PPUSH
3228: LD_VAR 0 4
3232: PPUSH
3233: CALL_OW 52
// end ; if Kirilenkova then
3237: LD_EXP 48
3241: IFFALSE 3339
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3243: LD_INT 22
3245: PPUSH
3246: LD_INT 1
3248: PPUSH
3249: LD_INT 1
3251: PPUSH
3252: LD_INT 51
3254: PPUSH
3255: LD_INT 50
3257: PPUSH
3258: LD_INT 60
3260: PPUSH
3261: CALL_OW 12
3265: PPUSH
3266: CALL 48972 0 5
// veh = CreateVehicle ;
3270: LD_ADDR_VAR 0 4
3274: PUSH
3275: CALL_OW 45
3279: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3280: LD_VAR 0 4
3284: PPUSH
3285: LD_INT 0
3287: PPUSH
3288: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 236 , false ) ;
3292: LD_VAR 0 4
3296: PPUSH
3297: LD_INT 134
3299: PPUSH
3300: LD_INT 236
3302: PPUSH
3303: LD_INT 0
3305: PPUSH
3306: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
3310: LD_VAR 0 4
3314: PPUSH
3315: LD_INT 1
3317: PPUSH
3318: LD_INT 100
3320: PPUSH
3321: CALL_OW 290
// PlaceHumanInUnit ( Kirilenkova , veh ) ;
3325: LD_EXP 48
3329: PPUSH
3330: LD_VAR 0 4
3334: PPUSH
3335: CALL_OW 52
// end ; end ; end_of_file
3339: LD_VAR 0 1
3343: RET
// export VanHouten ; export ovsyenkoBase , terminalBase , headAmBase ; export trapTeam , convoyTeam , attackTeam ; export function PrepareAmericans ; begin
3344: LD_INT 0
3346: PPUSH
// PrepareOvsyenko ;
3347: CALL 3364 0 0
// PrepareTerminal ;
3351: CALL 3565 0 0
// PrepareMainAmericanBase ;
3355: CALL 3648 0 0
// end ;
3359: LD_VAR 0 1
3363: RET
// function PrepareOvsyenko ; var soldiersAmount ; begin
3364: LD_INT 0
3366: PPUSH
3367: PPUSH
// uc_side = 1 ;
3368: LD_ADDR_OWVAR 20
3372: PUSH
3373: LD_INT 1
3375: ST_TO_ADDR
// uc_nation = nation_american ;
3376: LD_ADDR_OWVAR 21
3380: PUSH
3381: LD_INT 1
3383: ST_TO_ADDR
// soldiersAmount = 3 ;
3384: LD_ADDR_VAR 0 2
3388: PUSH
3389: LD_INT 3
3391: ST_TO_ADDR
// if fastBreakthrough then
3392: LD_EXP 3
3396: IFFALSE 3414
// begin RemoveUnit ( ovs_bun2 ) ;
3398: LD_INT 229
3400: PPUSH
3401: CALL_OW 64
// RemoveUnit ( ovs_bun3 ) ;
3405: LD_INT 258
3407: PPUSH
3408: CALL_OW 64
// end else
3412: GO 3422
// soldiersAmount = 4 ;
3414: LD_ADDR_VAR 0 2
3418: PUSH
3419: LD_INT 4
3421: ST_TO_ADDR
// ovsyenkoBase := Nef_PrepareBase ( ovsyenko , OvsyenkoBaseArea , ovsyenko , enemySkillLevel , [ ovsyenkoStartCrates , 50 , 0 ] , 1 , [ soldiersAmount , 1 , 0 , 1 ] ) ;
3422: LD_ADDR_EXP 59
3426: PUSH
3427: LD_INT 86
3429: PPUSH
3430: LD_INT 3
3432: PPUSH
3433: LD_STRING ovsyenko
3435: PPUSH
3436: LD_EXP 34
3440: PPUSH
3441: LD_EXP 35
3445: PUSH
3446: LD_INT 50
3448: PUSH
3449: LD_INT 0
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: LIST
3456: PPUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_VAR 0 2
3464: PUSH
3465: LD_INT 1
3467: PUSH
3468: LD_INT 0
3470: PUSH
3471: LD_INT 1
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: PPUSH
3480: CALL 12686 0 7
3484: ST_TO_ADDR
// case Difficulty of 1 :
3485: LD_OWVAR 67
3489: PUSH
3490: LD_INT 1
3492: DOUBLE
3493: EQUAL
3494: IFTRUE 3498
3496: GO 3511
3498: POP
// PlaceWeaponTurret ( ovs_bun1 , us_double_gun ) ; 2 :
3499: LD_INT 97
3501: PPUSH
3502: LD_INT 5
3504: PPUSH
3505: CALL_OW 431
3509: GO 3560
3511: LD_INT 2
3513: DOUBLE
3514: EQUAL
3515: IFTRUE 3519
3517: GO 3532
3519: POP
// PlaceWeaponTurret ( ovs_bun1 , us_light_gun ) ; 3 .. 4 :
3520: LD_INT 97
3522: PPUSH
3523: LD_INT 3
3525: PPUSH
3526: CALL_OW 431
3530: GO 3560
3532: LD_INT 3
3534: DOUBLE
3535: GREATEREQUAL
3536: IFFALSE 3544
3538: LD_INT 4
3540: DOUBLE
3541: LESSEQUAL
3542: IFTRUE 3546
3544: GO 3559
3546: POP
// PlaceWeaponTurret ( ovs_bun1 , us_gatling_gun ) ; end ;
3547: LD_INT 97
3549: PPUSH
3550: LD_INT 4
3552: PPUSH
3553: CALL_OW 431
3557: GO 3560
3559: POP
// end ;
3560: LD_VAR 0 1
3564: RET
// function PrepareTerminal ; begin
3565: LD_INT 0
3567: PPUSH
// uc_side = 1 ;
3568: LD_ADDR_OWVAR 20
3572: PUSH
3573: LD_INT 1
3575: ST_TO_ADDR
// uc_nation = nation_american ;
3576: LD_ADDR_OWVAR 21
3580: PUSH
3581: LD_INT 1
3583: ST_TO_ADDR
// terminalBase := Nef_PrepareBase ( terminal , terminalBaseArea , terminal , enemySkillLevel , [ 100 , 50 , 0 ] , 1 , [ 2 , 1 , 0 , 0 ] ) ;
3584: LD_ADDR_EXP 60
3588: PUSH
3589: LD_INT 168
3591: PPUSH
3592: LD_INT 4
3594: PPUSH
3595: LD_STRING terminal
3597: PPUSH
3598: LD_EXP 34
3602: PPUSH
3603: LD_INT 100
3605: PUSH
3606: LD_INT 50
3608: PUSH
3609: LD_INT 0
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: PPUSH
3617: LD_INT 1
3619: PPUSH
3620: LD_INT 2
3622: PUSH
3623: LD_INT 1
3625: PUSH
3626: LD_INT 0
3628: PUSH
3629: LD_INT 0
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL 12686 0 7
3642: ST_TO_ADDR
// end ;
3643: LD_VAR 0 1
3647: RET
// function PrepareMainAmericanBase ; begin
3648: LD_INT 0
3650: PPUSH
// uc_side = 1 ;
3651: LD_ADDR_OWVAR 20
3655: PUSH
3656: LD_INT 1
3658: ST_TO_ADDR
// uc_nation = nation_american ;
3659: LD_ADDR_OWVAR 21
3663: PUSH
3664: LD_INT 1
3666: ST_TO_ADDR
// if fastBreakthrough then
3667: LD_EXP 3
3671: IFFALSE 3680
// RemoveUnit ( ovs_bun2 ) ;
3673: LD_INT 229
3675: PPUSH
3676: CALL_OW 64
// headAmBase := Nef_PrepareBase ( headamdepot , HeadAmericanBaseArea ,  , enemySkillLevel , [ 3000 , 1000 , 0 ] , 1 , [ 9 , 3 , 6 , 2 ] ) ;
3680: LD_ADDR_EXP 61
3684: PUSH
3685: LD_INT 106
3687: PPUSH
3688: LD_INT 5
3690: PPUSH
3691: LD_STRING 
3693: PPUSH
3694: LD_EXP 34
3698: PPUSH
3699: LD_INT 3000
3701: PUSH
3702: LD_INT 1000
3704: PUSH
3705: LD_INT 0
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: LIST
3712: PPUSH
3713: LD_INT 1
3715: PPUSH
3716: LD_INT 9
3718: PUSH
3719: LD_INT 3
3721: PUSH
3722: LD_INT 6
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: PPUSH
3734: CALL 12686 0 7
3738: ST_TO_ADDR
// VanHouten = PrepareUnitExt ( VanHouten , false , class_soldier ) ;
3739: LD_ADDR_EXP 58
3743: PUSH
3744: LD_STRING VanHouten
3746: PPUSH
3747: LD_INT 0
3749: PPUSH
3750: LD_INT 1
3752: PPUSH
3753: CALL 11785 0 3
3757: ST_TO_ADDR
// headAmBase = headAmBase ^ VanHouten ;
3758: LD_ADDR_EXP 61
3762: PUSH
3763: LD_EXP 61
3767: PUSH
3768: LD_EXP 58
3772: ADD
3773: ST_TO_ADDR
// PlaceUnitXYR ( VanHouten , 35 , 57 , 3 , false ) ;
3774: LD_EXP 58
3778: PPUSH
3779: LD_INT 35
3781: PPUSH
3782: LD_INT 57
3784: PPUSH
3785: LD_INT 3
3787: PPUSH
3788: LD_INT 0
3790: PPUSH
3791: CALL_OW 50
// end ;
3795: LD_VAR 0 1
3799: RET
// export function PrepareTrap ; var i , un , nearEnemyUnit ; begin
3800: LD_INT 0
3802: PPUSH
3803: PPUSH
3804: PPUSH
3805: PPUSH
// uc_side = 1 ;
3806: LD_ADDR_OWVAR 20
3810: PUSH
3811: LD_INT 1
3813: ST_TO_ADDR
// uc_nation = nation_american ;
3814: LD_ADDR_OWVAR 21
3818: PUSH
3819: LD_INT 1
3821: ST_TO_ADDR
// for i := 1 to trapAmount do
3822: LD_ADDR_VAR 0 2
3826: PUSH
3827: DOUBLE
3828: LD_INT 1
3830: DEC
3831: ST_TO_ADDR
3832: LD_EXP 37
3836: PUSH
3837: FOR_TO
3838: IFFALSE 3972
// begin PrepareSoldier ( false , enemySkillLevel ) ;
3840: LD_INT 0
3842: PPUSH
3843: LD_EXP 34
3847: PPUSH
3848: CALL_OW 381
// un = CreateHuman ;
3852: LD_ADDR_VAR 0 3
3856: PUSH
3857: CALL_OW 44
3861: ST_TO_ADDR
// trapTeam = trapTeam ^ un ;
3862: LD_ADDR_EXP 62
3866: PUSH
3867: LD_EXP 62
3871: PUSH
3872: LD_VAR 0 3
3876: ADD
3877: ST_TO_ADDR
// PlaceUnitArea ( un , TrapSpawnArea , false ) ;
3878: LD_VAR 0 3
3882: PPUSH
3883: LD_INT 11
3885: PPUSH
3886: LD_INT 0
3888: PPUSH
3889: CALL_OW 49
// nearEnemyUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] ] ) , un ) ;
3893: LD_ADDR_VAR 0 4
3897: PUSH
3898: LD_INT 22
3900: PUSH
3901: LD_INT 3
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: PUSH
3908: EMPTY
3909: LIST
3910: PPUSH
3911: CALL_OW 69
3915: PPUSH
3916: LD_VAR 0 3
3920: PPUSH
3921: CALL_OW 74
3925: ST_TO_ADDR
// ComAgressiveMove ( un , GetX ( nearEnemyUnit ) , GetY ( nearEnemyUnit ) ) ;
3926: LD_VAR 0 3
3930: PPUSH
3931: LD_VAR 0 4
3935: PPUSH
3936: CALL_OW 250
3940: PPUSH
3941: LD_VAR 0 4
3945: PPUSH
3946: CALL_OW 251
3950: PPUSH
3951: CALL_OW 114
// AddComAgressiveMove ( un , 106 , 124 ) ;
3955: LD_VAR 0 3
3959: PPUSH
3960: LD_INT 106
3962: PPUSH
3963: LD_INT 124
3965: PPUSH
3966: CALL_OW 174
// end ;
3970: GO 3837
3972: POP
3973: POP
// end ;
3974: LD_VAR 0 1
3978: RET
// export function PrepareSoldiersInBunkers ; begin
3979: LD_INT 0
3981: PPUSH
// PrepareSolBun ( enemySkilLLevel , non_bun1 ) ;
3982: LD_EXP 34
3986: PPUSH
3987: LD_INT 236
3989: PPUSH
3990: CALL 15230 0 2
// PrepareSolBun ( enemySkilLLevel , non_bun2 ) ;
3994: LD_EXP 34
3998: PPUSH
3999: LD_INT 240
4001: PPUSH
4002: CALL 15230 0 2
// PrepareSolBun ( enemySkilLLevel , non_bun3 ) ;
4006: LD_EXP 34
4010: PPUSH
4011: LD_INT 243
4013: PPUSH
4014: CALL 15230 0 2
// end ;
4018: LD_VAR 0 1
4022: RET
// export function PrepareConvoy ; var i , un , veh ; begin
4023: LD_INT 0
4025: PPUSH
4026: PPUSH
4027: PPUSH
4028: PPUSH
// convoyTeam = [ ] ;
4029: LD_ADDR_EXP 63
4033: PUSH
4034: EMPTY
4035: ST_TO_ADDR
// uc_side = 1 ;
4036: LD_ADDR_OWVAR 20
4040: PUSH
4041: LD_INT 1
4043: ST_TO_ADDR
// uc_nation = nation_american ;
4044: LD_ADDR_OWVAR 21
4048: PUSH
4049: LD_INT 1
4051: ST_TO_ADDR
// for i := 1 to 2 do
4052: LD_ADDR_VAR 0 2
4056: PUSH
4057: DOUBLE
4058: LD_INT 1
4060: DEC
4061: ST_TO_ADDR
4062: LD_INT 2
4064: PUSH
4065: FOR_TO
4066: IFFALSE 4197
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
4068: LD_INT 3
4070: PPUSH
4071: LD_INT 1
4073: PPUSH
4074: LD_INT 1
4076: PPUSH
4077: LD_INT 12
4079: PPUSH
4080: LD_INT 80
4082: PPUSH
4083: CALL 48972 0 5
// veh = CreateVehicle ;
4087: LD_ADDR_VAR 0 4
4091: PUSH
4092: CALL_OW 45
4096: ST_TO_ADDR
// AddCargo ( veh , mat_cans , 100 ) ;
4097: LD_VAR 0 4
4101: PPUSH
4102: LD_INT 1
4104: PPUSH
4105: LD_INT 100
4107: PPUSH
4108: CALL_OW 291
// convoyTeam = convoyTeam ^ veh ;
4112: LD_ADDR_EXP 63
4116: PUSH
4117: LD_EXP 63
4121: PUSH
4122: LD_VAR 0 4
4126: ADD
4127: ST_TO_ADDR
// PlaceUnitArea ( veh , AmericanSpawnArea1 , false ) ;
4128: LD_VAR 0 4
4132: PPUSH
4133: LD_INT 8
4135: PPUSH
4136: LD_INT 0
4138: PPUSH
4139: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
4143: LD_INT 0
4145: PPUSH
4146: LD_EXP 34
4150: PPUSH
4151: CALL_OW 383
// un = CreateHuman ;
4155: LD_ADDR_VAR 0 3
4159: PUSH
4160: CALL_OW 44
4164: ST_TO_ADDR
// convoyTeam = convoyTeam ^ un ;
4165: LD_ADDR_EXP 63
4169: PUSH
4170: LD_EXP 63
4174: PUSH
4175: LD_VAR 0 3
4179: ADD
4180: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4181: LD_VAR 0 3
4185: PPUSH
4186: LD_VAR 0 4
4190: PPUSH
4191: CALL_OW 52
// end ;
4195: GO 4065
4197: POP
4198: POP
// end ;
4199: LD_VAR 0 1
4203: RET
// export function PrepareAttack ; var i , un , veh ; begin
4204: LD_INT 0
4206: PPUSH
4207: PPUSH
4208: PPUSH
4209: PPUSH
// uc_side = 1 ;
4210: LD_ADDR_OWVAR 20
4214: PUSH
4215: LD_INT 1
4217: ST_TO_ADDR
// uc_nation = nation_american ;
4218: LD_ADDR_OWVAR 21
4222: PUSH
4223: LD_INT 1
4225: ST_TO_ADDR
// for i := 1 to 4 do
4226: LD_ADDR_VAR 0 2
4230: PUSH
4231: DOUBLE
4232: LD_INT 1
4234: DEC
4235: ST_TO_ADDR
4236: LD_INT 4
4238: PUSH
4239: FOR_TO
4240: IFFALSE 4379
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_light_gun , us_double_gun , us_gatling_gun ] [ Rand ( 1 , 3 ) ] , 80 ) ;
4242: LD_INT 3
4244: PPUSH
4245: LD_INT 1
4247: PPUSH
4248: LD_INT 1
4250: PPUSH
4251: LD_INT 3
4253: PUSH
4254: LD_INT 5
4256: PUSH
4257: LD_INT 4
4259: PUSH
4260: EMPTY
4261: LIST
4262: LIST
4263: LIST
4264: PUSH
4265: LD_INT 1
4267: PPUSH
4268: LD_INT 3
4270: PPUSH
4271: CALL_OW 12
4275: ARRAY
4276: PPUSH
4277: LD_INT 80
4279: PPUSH
4280: CALL 48972 0 5
// veh = CreateVehicle ;
4284: LD_ADDR_VAR 0 4
4288: PUSH
4289: CALL_OW 45
4293: ST_TO_ADDR
// attackTeam = attackTeam ^ veh ;
4294: LD_ADDR_EXP 64
4298: PUSH
4299: LD_EXP 64
4303: PUSH
4304: LD_VAR 0 4
4308: ADD
4309: ST_TO_ADDR
// PlaceUnitArea ( veh , AmericanSpawnArea2 , false ) ;
4310: LD_VAR 0 4
4314: PPUSH
4315: LD_INT 17
4317: PPUSH
4318: LD_INT 0
4320: PPUSH
4321: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
4325: LD_INT 0
4327: PPUSH
4328: LD_EXP 34
4332: PPUSH
4333: CALL_OW 383
// un = CreateHuman ;
4337: LD_ADDR_VAR 0 3
4341: PUSH
4342: CALL_OW 44
4346: ST_TO_ADDR
// attackTeam = attackTeam ^ un ;
4347: LD_ADDR_EXP 64
4351: PUSH
4352: LD_EXP 64
4356: PUSH
4357: LD_VAR 0 3
4361: ADD
4362: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4363: LD_VAR 0 3
4367: PPUSH
4368: LD_VAR 0 4
4372: PPUSH
4373: CALL_OW 52
// end ;
4377: GO 4239
4379: POP
4380: POP
// for i := 1 to 3 do
4381: LD_ADDR_VAR 0 2
4385: PUSH
4386: DOUBLE
4387: LD_INT 1
4389: DEC
4390: ST_TO_ADDR
4391: LD_INT 3
4393: PUSH
4394: FOR_TO
4395: IFFALSE 4452
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4397: LD_INT 0
4399: PPUSH
4400: LD_EXP 34
4404: PPUSH
4405: CALL_OW 381
// un = CreateHuman ;
4409: LD_ADDR_VAR 0 3
4413: PUSH
4414: CALL_OW 44
4418: ST_TO_ADDR
// attackTeam = attackTeam ^ un ;
4419: LD_ADDR_EXP 64
4423: PUSH
4424: LD_EXP 64
4428: PUSH
4429: LD_VAR 0 3
4433: ADD
4434: ST_TO_ADDR
// PlaceUnitArea ( un , AmericanSpawnArea2 , false ) ;
4435: LD_VAR 0 3
4439: PPUSH
4440: LD_INT 17
4442: PPUSH
4443: LD_INT 0
4445: PPUSH
4446: CALL_OW 49
// end ;
4450: GO 4394
4452: POP
4453: POP
// end ; end_of_file
4454: LD_VAR 0 1
4458: RET
// export function Nef_PrepareNature ; var i , un ; begin
4459: LD_INT 0
4461: PPUSH
4462: PPUSH
4463: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
4464: LD_ADDR_VAR 0 2
4468: PUSH
4469: DOUBLE
4470: LD_INT 1
4472: DEC
4473: ST_TO_ADDR
4474: LD_EXP 28
4478: PUSH
4479: LD_INT 1
4481: ARRAY
4482: PUSH
4483: FOR_TO
4484: IFFALSE 4594
// begin uc_side = 0 ;
4486: LD_ADDR_OWVAR 20
4490: PUSH
4491: LD_INT 0
4493: ST_TO_ADDR
// uc_nation = nation_nature ;
4494: LD_ADDR_OWVAR 21
4498: PUSH
4499: LD_INT 0
4501: ST_TO_ADDR
// hc_class = class_apeman ;
4502: LD_ADDR_OWVAR 28
4506: PUSH
4507: LD_INT 12
4509: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4510: LD_ADDR_OWVAR 31
4514: PUSH
4515: LD_EXP 29
4519: PUSH
4520: LD_INT 1
4522: ARRAY
4523: PUSH
4524: LD_EXP 29
4528: PUSH
4529: LD_INT 2
4531: ARRAY
4532: PUSH
4533: LD_EXP 29
4537: PUSH
4538: LD_INT 3
4540: ARRAY
4541: PUSH
4542: LD_EXP 29
4546: PUSH
4547: LD_INT 4
4549: ARRAY
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4557: LD_ADDR_OWVAR 35
4561: PUSH
4562: LD_EXP 30
4566: ST_TO_ADDR
// un = CreateHuman ;
4567: LD_ADDR_VAR 0 3
4571: PUSH
4572: CALL_OW 44
4576: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4577: LD_VAR 0 3
4581: PPUSH
4582: LD_INT 2
4584: PPUSH
4585: LD_INT 0
4587: PPUSH
4588: CALL_OW 49
// end ;
4592: GO 4483
4594: POP
4595: POP
// for i := 1 to animalsAmount [ 2 ] do
4596: LD_ADDR_VAR 0 2
4600: PUSH
4601: DOUBLE
4602: LD_INT 1
4604: DEC
4605: ST_TO_ADDR
4606: LD_EXP 28
4610: PUSH
4611: LD_INT 2
4613: ARRAY
4614: PUSH
4615: FOR_TO
4616: IFFALSE 4726
// begin uc_side = 0 ;
4618: LD_ADDR_OWVAR 20
4622: PUSH
4623: LD_INT 0
4625: ST_TO_ADDR
// uc_nation = nation_nature ;
4626: LD_ADDR_OWVAR 21
4630: PUSH
4631: LD_INT 0
4633: ST_TO_ADDR
// hc_class = class_phororhacos ;
4634: LD_ADDR_OWVAR 28
4638: PUSH
4639: LD_INT 18
4641: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4642: LD_ADDR_OWVAR 31
4646: PUSH
4647: LD_EXP 29
4651: PUSH
4652: LD_INT 1
4654: ARRAY
4655: PUSH
4656: LD_EXP 29
4660: PUSH
4661: LD_INT 2
4663: ARRAY
4664: PUSH
4665: LD_EXP 29
4669: PUSH
4670: LD_INT 3
4672: ARRAY
4673: PUSH
4674: LD_EXP 29
4678: PUSH
4679: LD_INT 4
4681: ARRAY
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4689: LD_ADDR_OWVAR 35
4693: PUSH
4694: LD_EXP 30
4698: ST_TO_ADDR
// un = CreateHuman ;
4699: LD_ADDR_VAR 0 3
4703: PUSH
4704: CALL_OW 44
4708: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4709: LD_VAR 0 3
4713: PPUSH
4714: LD_INT 2
4716: PPUSH
4717: LD_INT 0
4719: PPUSH
4720: CALL_OW 49
// end ;
4724: GO 4615
4726: POP
4727: POP
// for i := 1 to animalsAmount [ 3 ] do
4728: LD_ADDR_VAR 0 2
4732: PUSH
4733: DOUBLE
4734: LD_INT 1
4736: DEC
4737: ST_TO_ADDR
4738: LD_EXP 28
4742: PUSH
4743: LD_INT 3
4745: ARRAY
4746: PUSH
4747: FOR_TO
4748: IFFALSE 4858
// begin uc_side = 0 ;
4750: LD_ADDR_OWVAR 20
4754: PUSH
4755: LD_INT 0
4757: ST_TO_ADDR
// uc_nation = nation_nature ;
4758: LD_ADDR_OWVAR 21
4762: PUSH
4763: LD_INT 0
4765: ST_TO_ADDR
// hc_class = class_tiger ;
4766: LD_ADDR_OWVAR 28
4770: PUSH
4771: LD_INT 14
4773: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4774: LD_ADDR_OWVAR 31
4778: PUSH
4779: LD_EXP 29
4783: PUSH
4784: LD_INT 1
4786: ARRAY
4787: PUSH
4788: LD_EXP 29
4792: PUSH
4793: LD_INT 2
4795: ARRAY
4796: PUSH
4797: LD_EXP 29
4801: PUSH
4802: LD_INT 3
4804: ARRAY
4805: PUSH
4806: LD_EXP 29
4810: PUSH
4811: LD_INT 4
4813: ARRAY
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4821: LD_ADDR_OWVAR 35
4825: PUSH
4826: LD_EXP 30
4830: ST_TO_ADDR
// un = CreateHuman ;
4831: LD_ADDR_VAR 0 3
4835: PUSH
4836: CALL_OW 44
4840: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4841: LD_VAR 0 3
4845: PPUSH
4846: LD_INT 2
4848: PPUSH
4849: LD_INT 0
4851: PPUSH
4852: CALL_OW 49
// end ;
4856: GO 4747
4858: POP
4859: POP
// for i := 1 to animalsAmount [ 4 ] do
4860: LD_ADDR_VAR 0 2
4864: PUSH
4865: DOUBLE
4866: LD_INT 1
4868: DEC
4869: ST_TO_ADDR
4870: LD_EXP 28
4874: PUSH
4875: LD_INT 4
4877: ARRAY
4878: PUSH
4879: FOR_TO
4880: IFFALSE 4990
// begin uc_side = 0 ;
4882: LD_ADDR_OWVAR 20
4886: PUSH
4887: LD_INT 0
4889: ST_TO_ADDR
// uc_nation = nation_nature ;
4890: LD_ADDR_OWVAR 21
4894: PUSH
4895: LD_INT 0
4897: ST_TO_ADDR
// hc_class = 21 ;
4898: LD_ADDR_OWVAR 28
4902: PUSH
4903: LD_INT 21
4905: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4906: LD_ADDR_OWVAR 31
4910: PUSH
4911: LD_EXP 29
4915: PUSH
4916: LD_INT 1
4918: ARRAY
4919: PUSH
4920: LD_EXP 29
4924: PUSH
4925: LD_INT 2
4927: ARRAY
4928: PUSH
4929: LD_EXP 29
4933: PUSH
4934: LD_INT 3
4936: ARRAY
4937: PUSH
4938: LD_EXP 29
4942: PUSH
4943: LD_INT 4
4945: ARRAY
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4953: LD_ADDR_OWVAR 35
4957: PUSH
4958: LD_EXP 30
4962: ST_TO_ADDR
// un = CreateHuman ;
4963: LD_ADDR_VAR 0 3
4967: PUSH
4968: CALL_OW 44
4972: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4973: LD_VAR 0 3
4977: PPUSH
4978: LD_INT 2
4980: PPUSH
4981: LD_INT 0
4983: PPUSH
4984: CALL_OW 49
// end ;
4988: GO 4879
4990: POP
4991: POP
// for i := 1 to animalsAmount [ 5 ] do
4992: LD_ADDR_VAR 0 2
4996: PUSH
4997: DOUBLE
4998: LD_INT 1
5000: DEC
5001: ST_TO_ADDR
5002: LD_EXP 28
5006: PUSH
5007: LD_INT 5
5009: ARRAY
5010: PUSH
5011: FOR_TO
5012: IFFALSE 5073
// begin uc_side = 0 ;
5014: LD_ADDR_OWVAR 20
5018: PUSH
5019: LD_INT 0
5021: ST_TO_ADDR
// uc_nation = nation_nature ;
5022: LD_ADDR_OWVAR 21
5026: PUSH
5027: LD_INT 0
5029: ST_TO_ADDR
// vc_chassis := 31 ;
5030: LD_ADDR_OWVAR 37
5034: PUSH
5035: LD_INT 31
5037: ST_TO_ADDR
// vc_control := control_rider ;
5038: LD_ADDR_OWVAR 38
5042: PUSH
5043: LD_INT 4
5045: ST_TO_ADDR
// un := CreateVehicle ;
5046: LD_ADDR_VAR 0 3
5050: PUSH
5051: CALL_OW 45
5055: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
5056: LD_VAR 0 3
5060: PPUSH
5061: LD_INT 2
5063: PPUSH
5064: LD_INT 0
5066: PPUSH
5067: CALL_OW 49
// end ;
5071: GO 5011
5073: POP
5074: POP
// end ; end_of_file
5075: LD_VAR 0 1
5079: RET
// every 0 0$1 do
5080: GO 5082
5082: DISABLE
// InitAIManager ( 1 , 2 , UnitFilter ( ovsyenkoBase , [ f_type , unit_human ] ) , OvsyenkoBaseArea , OvsyenkoHealArea , false , false , 0 , 0 , 0 , 0 , 0 ) ;
5083: LD_INT 1
5085: PPUSH
5086: LD_INT 2
5088: PPUSH
5089: LD_EXP 59
5093: PPUSH
5094: LD_INT 21
5096: PUSH
5097: LD_INT 1
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PPUSH
5104: CALL_OW 72
5108: PPUSH
5109: LD_INT 3
5111: PPUSH
5112: LD_INT 6
5114: PPUSH
5115: LD_INT 0
5117: PPUSH
5118: LD_INT 0
5120: PPUSH
5121: LD_INT 0
5123: PPUSH
5124: LD_INT 0
5126: PPUSH
5127: LD_INT 0
5129: PPUSH
5130: LD_INT 0
5132: PPUSH
5133: LD_INT 0
5135: PPUSH
5136: CALL 5248 0 12
5140: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_weapon , us_bulldozer ] ] ) do var unit ;
5141: LD_INT 22
5143: PUSH
5144: LD_INT 1
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: LD_INT 50
5153: PUSH
5154: EMPTY
5155: LIST
5156: PUSH
5157: LD_INT 34
5159: PUSH
5160: LD_INT 14
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: LIST
5171: PPUSH
5172: CALL_OW 69
5176: IFFALSE 5245
5178: GO 5180
5180: DISABLE
5181: LD_INT 0
5183: PPUSH
// begin enable ;
5184: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_weapon , us_bulldozer ] ] ) do
5185: LD_ADDR_VAR 0 1
5189: PUSH
5190: LD_INT 22
5192: PUSH
5193: LD_INT 1
5195: PUSH
5196: EMPTY
5197: LIST
5198: LIST
5199: PUSH
5200: LD_INT 50
5202: PUSH
5203: EMPTY
5204: LIST
5205: PUSH
5206: LD_INT 34
5208: PUSH
5209: LD_INT 14
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: LIST
5220: PPUSH
5221: CALL_OW 69
5225: PUSH
5226: FOR_IN
5227: IFFALSE 5243
// CutTreeInArea ( unit , TreeArea ) ;
5229: LD_VAR 0 1
5233: PPUSH
5234: LD_INT 18
5236: PPUSH
5237: CALL 15087 0 2
5241: GO 5226
5243: POP
5244: POP
// end ;
5245: PPOPN 1
5247: END
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , repairArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack , canRebuild ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , offensiveUnits , offensiveReadyCounter , target1 , target2 , defenceUnits , weapons , chassis , baseBuildings , destroyedBuildings , destroyedBuilding , constructedBuilding , constructedBuildings , depot , factory , lab , bunkers , barracks , controlTowers , attackBuildings , enemyBuildings , damageBuilding , damageUnit , emptyBunkers , enemyUnits ; begin
5248: LD_INT 0
5250: PPUSH
5251: PPUSH
5252: PPUSH
5253: PPUSH
5254: PPUSH
5255: PPUSH
5256: PPUSH
5257: PPUSH
5258: PPUSH
5259: PPUSH
5260: PPUSH
5261: PPUSH
5262: PPUSH
5263: PPUSH
5264: PPUSH
5265: PPUSH
5266: PPUSH
5267: PPUSH
5268: PPUSH
5269: PPUSH
5270: PPUSH
5271: PPUSH
5272: PPUSH
5273: PPUSH
5274: PPUSH
5275: PPUSH
5276: PPUSH
5277: PPUSH
5278: PPUSH
5279: PPUSH
5280: PPUSH
5281: PPUSH
5282: PPUSH
5283: PPUSH
5284: PPUSH
5285: PPUSH
5286: PPUSH
5287: PPUSH
// personel = [ ] ;
5288: LD_ADDR_VAR 0 19
5292: PUSH
5293: EMPTY
5294: ST_TO_ADDR
// vehicles = [ ] ;
5295: LD_ADDR_VAR 0 25
5299: PUSH
5300: EMPTY
5301: ST_TO_ADDR
// destroyedBuildings = [ ] ;
5302: LD_ADDR_VAR 0 35
5306: PUSH
5307: EMPTY
5308: ST_TO_ADDR
// for unit in basePersonel do
5309: LD_ADDR_VAR 0 18
5313: PUSH
5314: LD_VAR 0 3
5318: PUSH
5319: FOR_IN
5320: IFFALSE 5340
// personel = personel ^ unit ;
5322: LD_ADDR_VAR 0 19
5326: PUSH
5327: LD_VAR 0 19
5331: PUSH
5332: LD_VAR 0 18
5336: ADD
5337: ST_TO_ADDR
5338: GO 5319
5340: POP
5341: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ] ] ) do
5342: LD_ADDR_VAR 0 24
5346: PUSH
5347: LD_VAR 0 4
5351: PPUSH
5352: LD_INT 22
5354: PUSH
5355: LD_VAR 0 1
5359: PUSH
5360: EMPTY
5361: LIST
5362: LIST
5363: PUSH
5364: LD_INT 21
5366: PUSH
5367: LD_INT 2
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: PUSH
5374: LD_INT 50
5376: PUSH
5377: EMPTY
5378: LIST
5379: PUSH
5380: LD_INT 3
5382: PUSH
5383: LD_INT 2
5385: PUSH
5386: LD_INT 34
5388: PUSH
5389: LD_INT 12
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: PUSH
5396: LD_INT 34
5398: PUSH
5399: LD_INT 51
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PUSH
5406: LD_INT 34
5408: PUSH
5409: LD_INT 32
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: PUSH
5416: LD_INT 34
5418: PUSH
5419: LD_INT 31
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: PUSH
5426: EMPTY
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: PPUSH
5443: CALL_OW 70
5447: PUSH
5448: FOR_IN
5449: IFFALSE 5469
// vehicles = vehicles ^ vehicle ;
5451: LD_ADDR_VAR 0 25
5455: PUSH
5456: LD_VAR 0 25
5460: PUSH
5461: LD_VAR 0 24
5465: ADD
5466: ST_TO_ADDR
5467: GO 5448
5469: POP
5470: POP
// repeat soldiers = [ ] ;
5471: LD_ADDR_VAR 0 20
5475: PUSH
5476: EMPTY
5477: ST_TO_ADDR
// engineers = [ ] ;
5478: LD_ADDR_VAR 0 21
5482: PUSH
5483: EMPTY
5484: ST_TO_ADDR
// mechanics = [ ] ;
5485: LD_ADDR_VAR 0 22
5489: PUSH
5490: EMPTY
5491: ST_TO_ADDR
// scientists = [ ] ;
5492: LD_ADDR_VAR 0 23
5496: PUSH
5497: EMPTY
5498: ST_TO_ADDR
// baseBuildings = [ ] ;
5499: LD_ADDR_VAR 0 34
5503: PUSH
5504: EMPTY
5505: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5506: LD_ADDR_VAR 0 39
5510: PUSH
5511: LD_VAR 0 4
5515: PPUSH
5516: LD_INT 22
5518: PUSH
5519: LD_VAR 0 1
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: PUSH
5528: LD_INT 21
5530: PUSH
5531: LD_INT 3
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: PUSH
5538: LD_INT 50
5540: PUSH
5541: EMPTY
5542: LIST
5543: PUSH
5544: LD_INT 2
5546: PUSH
5547: LD_INT 30
5549: PUSH
5550: LD_INT 0
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: PUSH
5557: LD_INT 30
5559: PUSH
5560: LD_INT 1
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: LIST
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: PPUSH
5578: CALL_OW 70
5582: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
5583: LD_ADDR_VAR 0 40
5587: PUSH
5588: LD_VAR 0 4
5592: PPUSH
5593: LD_INT 22
5595: PUSH
5596: LD_VAR 0 1
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: LD_INT 21
5607: PUSH
5608: LD_INT 3
5610: PUSH
5611: EMPTY
5612: LIST
5613: LIST
5614: PUSH
5615: LD_INT 50
5617: PUSH
5618: EMPTY
5619: LIST
5620: PUSH
5621: LD_INT 2
5623: PUSH
5624: LD_INT 30
5626: PUSH
5627: LD_INT 2
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: PUSH
5634: LD_INT 30
5636: PUSH
5637: LD_INT 3
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: LIST
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: PPUSH
5655: CALL_OW 70
5659: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5660: LD_ADDR_VAR 0 41
5664: PUSH
5665: LD_VAR 0 4
5669: PPUSH
5670: LD_INT 22
5672: PUSH
5673: LD_VAR 0 1
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: LD_INT 21
5684: PUSH
5685: LD_INT 3
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: PUSH
5692: LD_INT 50
5694: PUSH
5695: EMPTY
5696: LIST
5697: PUSH
5698: LD_INT 2
5700: PUSH
5701: LD_INT 30
5703: PUSH
5704: LD_INT 6
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: PUSH
5711: LD_INT 30
5713: PUSH
5714: LD_INT 7
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: PUSH
5721: LD_INT 30
5723: PUSH
5724: LD_INT 8
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: PUSH
5737: EMPTY
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: PPUSH
5743: CALL_OW 70
5747: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
5748: LD_ADDR_VAR 0 42
5752: PUSH
5753: LD_VAR 0 4
5757: PPUSH
5758: LD_INT 22
5760: PUSH
5761: LD_VAR 0 1
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: LD_INT 21
5772: PUSH
5773: LD_INT 3
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PUSH
5780: LD_INT 50
5782: PUSH
5783: EMPTY
5784: LIST
5785: PUSH
5786: LD_INT 2
5788: PUSH
5789: LD_INT 30
5791: PUSH
5792: LD_INT 31
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: LD_INT 30
5801: PUSH
5802: LD_INT 32
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: LIST
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: LIST
5818: LIST
5819: PPUSH
5820: CALL_OW 70
5824: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
5825: LD_ADDR_VAR 0 43
5829: PUSH
5830: LD_VAR 0 4
5834: PPUSH
5835: LD_INT 22
5837: PUSH
5838: LD_VAR 0 1
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PUSH
5847: LD_INT 21
5849: PUSH
5850: LD_INT 3
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: PUSH
5857: LD_INT 50
5859: PUSH
5860: EMPTY
5861: LIST
5862: PUSH
5863: LD_INT 2
5865: PUSH
5866: LD_INT 30
5868: PUSH
5869: LD_INT 4
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: PUSH
5876: LD_INT 30
5878: PUSH
5879: LD_INT 5
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: LIST
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: PPUSH
5897: CALL_OW 70
5901: ST_TO_ADDR
// controlTowers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_vehicle ] ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5902: LD_ADDR_VAR 0 44
5906: PUSH
5907: LD_VAR 0 4
5911: PPUSH
5912: LD_INT 22
5914: PUSH
5915: LD_VAR 0 1
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: PUSH
5924: LD_INT 50
5926: PUSH
5927: EMPTY
5928: LIST
5929: PUSH
5930: LD_INT 2
5932: PUSH
5933: LD_INT 21
5935: PUSH
5936: LD_INT 3
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: PUSH
5943: LD_INT 21
5945: PUSH
5946: LD_INT 2
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: LIST
5957: PUSH
5958: LD_INT 2
5960: PUSH
5961: LD_INT 30
5963: PUSH
5964: LD_INT 36
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: PUSH
5971: LD_INT 34
5973: PUSH
5974: LD_INT 31
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: LIST
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: PPUSH
5992: CALL_OW 70
5996: ST_TO_ADDR
// constructedBuildings = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] ] ) ;
5997: LD_ADDR_VAR 0 38
6001: PUSH
6002: LD_VAR 0 4
6006: PPUSH
6007: LD_INT 22
6009: PUSH
6010: LD_VAR 0 1
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: PUSH
6019: LD_INT 21
6021: PUSH
6022: LD_INT 3
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: PUSH
6029: LD_INT 3
6031: PUSH
6032: LD_INT 57
6034: PUSH
6035: EMPTY
6036: LIST
6037: PUSH
6038: EMPTY
6039: LIST
6040: LIST
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: LIST
6046: PPUSH
6047: CALL_OW 70
6051: ST_TO_ADDR
// for i := 1 to personel do
6052: LD_ADDR_VAR 0 14
6056: PUSH
6057: DOUBLE
6058: LD_INT 1
6060: DEC
6061: ST_TO_ADDR
6062: LD_VAR 0 19
6066: PUSH
6067: FOR_TO
6068: IFFALSE 6236
// begin if GetLives ( personel [ i ] ) = 1000 then
6070: LD_VAR 0 19
6074: PUSH
6075: LD_VAR 0 14
6079: ARRAY
6080: PPUSH
6081: CALL_OW 256
6085: PUSH
6086: LD_INT 1000
6088: EQUAL
6089: IFFALSE 6111
// SetTag ( personel [ i ] , 1 ) else
6091: LD_VAR 0 19
6095: PUSH
6096: LD_VAR 0 14
6100: ARRAY
6101: PPUSH
6102: LD_INT 1
6104: PPUSH
6105: CALL_OW 109
6109: GO 6191
// if GetLives ( personel [ i ] ) <= 950 and GetLives ( personel [ i ] ) > 250 then
6111: LD_VAR 0 19
6115: PUSH
6116: LD_VAR 0 14
6120: ARRAY
6121: PPUSH
6122: CALL_OW 256
6126: PUSH
6127: LD_INT 950
6129: LESSEQUAL
6130: PUSH
6131: LD_VAR 0 19
6135: PUSH
6136: LD_VAR 0 14
6140: ARRAY
6141: PPUSH
6142: CALL_OW 256
6146: PUSH
6147: LD_INT 250
6149: GREATER
6150: AND
6151: IFFALSE 6191
// begin SetTag ( personel [ i ] , 0 ) ;
6153: LD_VAR 0 19
6157: PUSH
6158: LD_VAR 0 14
6162: ARRAY
6163: PPUSH
6164: LD_INT 0
6166: PPUSH
6167: CALL_OW 109
// ComMoveToArea ( personel [ i ] , healArea ) ;
6171: LD_VAR 0 19
6175: PUSH
6176: LD_VAR 0 14
6180: ARRAY
6181: PPUSH
6182: LD_VAR 0 5
6186: PPUSH
6187: CALL_OW 113
// end ; if GetLives ( personel [ i ] ) < 100 then
6191: LD_VAR 0 19
6195: PUSH
6196: LD_VAR 0 14
6200: ARRAY
6201: PPUSH
6202: CALL_OW 256
6206: PUSH
6207: LD_INT 100
6209: LESS
6210: IFFALSE 6234
// personel = personel diff personel [ i ] ;
6212: LD_ADDR_VAR 0 19
6216: PUSH
6217: LD_VAR 0 19
6221: PUSH
6222: LD_VAR 0 19
6226: PUSH
6227: LD_VAR 0 14
6231: ARRAY
6232: DIFF
6233: ST_TO_ADDR
// end ;
6234: GO 6067
6236: POP
6237: POP
// for i := 1 to vehicles do
6238: LD_ADDR_VAR 0 14
6242: PUSH
6243: DOUBLE
6244: LD_INT 1
6246: DEC
6247: ST_TO_ADDR
6248: LD_VAR 0 25
6252: PUSH
6253: FOR_TO
6254: IFFALSE 6616
// begin if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
6256: LD_VAR 0 25
6260: PUSH
6261: LD_VAR 0 14
6265: ARRAY
6266: PUSH
6267: LD_INT 1
6269: ARRAY
6270: PPUSH
6271: CALL_OW 256
6275: PUSH
6276: LD_INT 1000
6278: EQUAL
6279: IFFALSE 6443
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
6281: LD_VAR 0 25
6285: PUSH
6286: LD_VAR 0 14
6290: ARRAY
6291: PUSH
6292: LD_INT 1
6294: ARRAY
6295: PPUSH
6296: CALL_OW 263
6300: PUSH
6301: LD_INT 1
6303: EQUAL
6304: IFFALSE 6383
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) and IsOK ( vehicles [ i ] [ 2 ] ) then
6306: LD_VAR 0 25
6310: PUSH
6311: LD_VAR 0 14
6315: ARRAY
6316: PUSH
6317: LD_INT 2
6319: ARRAY
6320: PPUSH
6321: CALL_OW 310
6325: NOT
6326: PUSH
6327: LD_VAR 0 25
6331: PUSH
6332: LD_VAR 0 14
6336: ARRAY
6337: PUSH
6338: LD_INT 2
6340: ARRAY
6341: PPUSH
6342: CALL_OW 302
6346: AND
6347: IFFALSE 6383
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
6349: LD_VAR 0 25
6353: PUSH
6354: LD_VAR 0 14
6358: ARRAY
6359: PUSH
6360: LD_INT 2
6362: ARRAY
6363: PPUSH
6364: LD_VAR 0 25
6368: PUSH
6369: LD_VAR 0 14
6373: ARRAY
6374: PUSH
6375: LD_INT 1
6377: ARRAY
6378: PPUSH
6379: CALL_OW 120
// if offensiveUnits < vehiclesToAttackAmount then
6383: LD_VAR 0 27
6387: PUSH
6388: LD_VAR 0 10
6392: LESS
6393: IFFALSE 6419
// SetTag ( vehicles [ i ] [ 1 ] , 2 ) else
6395: LD_VAR 0 25
6399: PUSH
6400: LD_VAR 0 14
6404: ARRAY
6405: PUSH
6406: LD_INT 1
6408: ARRAY
6409: PPUSH
6410: LD_INT 2
6412: PPUSH
6413: CALL_OW 109
6417: GO 6441
// SetTag ( vehicles [ i ] [ 1 ] , 3 ) ;
6419: LD_VAR 0 25
6423: PUSH
6424: LD_VAR 0 14
6428: ARRAY
6429: PUSH
6430: LD_INT 1
6432: ARRAY
6433: PPUSH
6434: LD_INT 3
6436: PPUSH
6437: CALL_OW 109
// end else
6441: GO 6564
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 and GetLives ( vehicles [ i ] [ 1 ] ) > 250 and GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
6443: LD_VAR 0 25
6447: PUSH
6448: LD_VAR 0 14
6452: ARRAY
6453: PUSH
6454: LD_INT 1
6456: ARRAY
6457: PPUSH
6458: CALL_OW 256
6462: PUSH
6463: LD_INT 650
6465: LESSEQUAL
6466: PUSH
6467: LD_VAR 0 25
6471: PUSH
6472: LD_VAR 0 14
6476: ARRAY
6477: PUSH
6478: LD_INT 1
6480: ARRAY
6481: PPUSH
6482: CALL_OW 256
6486: PUSH
6487: LD_INT 250
6489: GREATER
6490: AND
6491: PUSH
6492: LD_VAR 0 25
6496: PUSH
6497: LD_VAR 0 14
6501: ARRAY
6502: PUSH
6503: LD_INT 1
6505: ARRAY
6506: PPUSH
6507: CALL_OW 263
6511: PUSH
6512: LD_INT 1
6514: EQUAL
6515: AND
6516: IFFALSE 6564
// begin SetTag ( vehicles [ i ] [ 1 ] , 0 ) ;
6518: LD_VAR 0 25
6522: PUSH
6523: LD_VAR 0 14
6527: ARRAY
6528: PUSH
6529: LD_INT 1
6531: ARRAY
6532: PPUSH
6533: LD_INT 0
6535: PPUSH
6536: CALL_OW 109
// ComMoveToArea ( vehicles [ i ] [ 1 ] , repairArea ) ;
6540: LD_VAR 0 25
6544: PUSH
6545: LD_VAR 0 14
6549: ARRAY
6550: PUSH
6551: LD_INT 1
6553: ARRAY
6554: PPUSH
6555: LD_VAR 0 6
6559: PPUSH
6560: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
6564: LD_VAR 0 25
6568: PUSH
6569: LD_VAR 0 14
6573: ARRAY
6574: PUSH
6575: LD_INT 1
6577: ARRAY
6578: PPUSH
6579: CALL_OW 256
6583: PUSH
6584: LD_INT 250
6586: LESS
6587: IFFALSE 6614
// begin vehicles = vehicles diff [ vehicles [ i ] ] ;
6589: LD_ADDR_VAR 0 25
6593: PUSH
6594: LD_VAR 0 25
6598: PUSH
6599: LD_VAR 0 25
6603: PUSH
6604: LD_VAR 0 14
6608: ARRAY
6609: PUSH
6610: EMPTY
6611: LIST
6612: DIFF
6613: ST_TO_ADDR
// end ; end ;
6614: GO 6253
6616: POP
6617: POP
// for i := 1 to personel do
6618: LD_ADDR_VAR 0 14
6622: PUSH
6623: DOUBLE
6624: LD_INT 1
6626: DEC
6627: ST_TO_ADDR
6628: LD_VAR 0 19
6632: PUSH
6633: FOR_TO
6634: IFFALSE 6685
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
6636: LD_ADDR_VAR 0 20
6640: PUSH
6641: LD_VAR 0 20
6645: PUSH
6646: LD_VAR 0 19
6650: PUSH
6651: LD_VAR 0 14
6655: ARRAY
6656: PPUSH
6657: LD_INT 25
6659: PUSH
6660: LD_INT 1
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: LD_INT 50
6669: PUSH
6670: EMPTY
6671: LIST
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PPUSH
6677: CALL_OW 72
6681: ADD
6682: ST_TO_ADDR
6683: GO 6633
6685: POP
6686: POP
// if soldiers and UnitFilter ( bunkers , [ f_empty ] ) then
6687: LD_VAR 0 20
6691: PUSH
6692: LD_VAR 0 42
6696: PPUSH
6697: LD_INT 58
6699: PUSH
6700: EMPTY
6701: LIST
6702: PPUSH
6703: CALL_OW 72
6707: AND
6708: IFFALSE 6966
// begin for i := 1 to soldiers do
6710: LD_ADDR_VAR 0 14
6714: PUSH
6715: DOUBLE
6716: LD_INT 1
6718: DEC
6719: ST_TO_ADDR
6720: LD_VAR 0 20
6724: PUSH
6725: FOR_TO
6726: IFFALSE 6962
// if GetTag ( soldiers [ i ] ) = 1 then
6728: LD_VAR 0 20
6732: PUSH
6733: LD_VAR 0 14
6737: ARRAY
6738: PPUSH
6739: CALL_OW 110
6743: PUSH
6744: LD_INT 1
6746: EQUAL
6747: IFFALSE 6960
// begin if GetTaskList ( soldiers [ i ] ) then
6749: LD_VAR 0 20
6753: PUSH
6754: LD_VAR 0 14
6758: ARRAY
6759: PPUSH
6760: CALL_OW 437
6764: IFFALSE 6853
// if GetTaskList ( soldiers [ i ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( soldiers [ i ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
6766: LD_VAR 0 20
6770: PUSH
6771: LD_VAR 0 14
6775: ARRAY
6776: PPUSH
6777: CALL_OW 437
6781: PUSH
6782: LD_INT 1
6784: ARRAY
6785: PUSH
6786: LD_INT 1
6788: ARRAY
6789: PUSH
6790: LD_STRING e
6792: EQUAL
6793: PUSH
6794: LD_VAR 0 20
6798: PUSH
6799: LD_VAR 0 14
6803: ARRAY
6804: PPUSH
6805: CALL_OW 437
6809: PUSH
6810: LD_INT 1
6812: ARRAY
6813: PUSH
6814: LD_INT 4
6816: ARRAY
6817: PPUSH
6818: CALL_OW 266
6822: PUSH
6823: LD_INT 4
6825: PUSH
6826: LD_INT 5
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: IN
6833: AND
6834: IFFALSE 6853
// SetTaskList ( soldiers [ i ] , [ ] ) ;
6836: LD_VAR 0 20
6840: PUSH
6841: LD_VAR 0 14
6845: ARRAY
6846: PPUSH
6847: EMPTY
6848: PPUSH
6849: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
6853: LD_ADDR_VAR 0 49
6857: PUSH
6858: LD_VAR 0 42
6862: PPUSH
6863: LD_INT 3
6865: PUSH
6866: LD_INT 59
6868: PUSH
6869: EMPTY
6870: LIST
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PPUSH
6876: CALL_OW 72
6880: PUSH
6881: FOR_IN
6882: IFFALSE 6958
// if not HasTask ( soldiers [ i ] ) and not GetBType ( IsInUnit ( soldiers [ i ] ) ) in [ b_breastwork , b_bunker ] then
6884: LD_VAR 0 20
6888: PUSH
6889: LD_VAR 0 14
6893: ARRAY
6894: PPUSH
6895: CALL_OW 314
6899: NOT
6900: PUSH
6901: LD_VAR 0 20
6905: PUSH
6906: LD_VAR 0 14
6910: ARRAY
6911: PPUSH
6912: CALL_OW 310
6916: PPUSH
6917: CALL_OW 266
6921: PUSH
6922: LD_INT 31
6924: PUSH
6925: LD_INT 32
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: IN
6932: NOT
6933: AND
6934: IFFALSE 6956
// ComEnterUnit ( soldiers [ i ] , emptyBunkers ) ;
6936: LD_VAR 0 20
6940: PUSH
6941: LD_VAR 0 14
6945: ARRAY
6946: PPUSH
6947: LD_VAR 0 49
6951: PPUSH
6952: CALL_OW 120
6956: GO 6881
6958: POP
6959: POP
// end ;
6960: GO 6725
6962: POP
6963: POP
// end else
6964: GO 7138
// if soldiers and barracks then
6966: LD_VAR 0 20
6970: PUSH
6971: LD_VAR 0 43
6975: AND
6976: IFFALSE 7098
// begin for i := 1 to soldiers do
6978: LD_ADDR_VAR 0 14
6982: PUSH
6983: DOUBLE
6984: LD_INT 1
6986: DEC
6987: ST_TO_ADDR
6988: LD_VAR 0 20
6992: PUSH
6993: FOR_TO
6994: IFFALSE 7094
// if GetTag ( soldiers [ i ] ) = 1 and UnitFilter ( soldiers [ i ] , [ f_outside ] ) and not HasTask ( soldiers [ i ] ) then
6996: LD_VAR 0 20
7000: PUSH
7001: LD_VAR 0 14
7005: ARRAY
7006: PPUSH
7007: CALL_OW 110
7011: PUSH
7012: LD_INT 1
7014: EQUAL
7015: PUSH
7016: LD_VAR 0 20
7020: PUSH
7021: LD_VAR 0 14
7025: ARRAY
7026: PPUSH
7027: LD_INT 56
7029: PUSH
7030: EMPTY
7031: LIST
7032: PPUSH
7033: CALL_OW 72
7037: AND
7038: PUSH
7039: LD_VAR 0 20
7043: PUSH
7044: LD_VAR 0 14
7048: ARRAY
7049: PPUSH
7050: CALL_OW 314
7054: NOT
7055: AND
7056: IFFALSE 7092
// ComEnterUnit ( soldiers [ i ] , barracks [ rand ( 1 , barracks ) ] ) ;
7058: LD_VAR 0 20
7062: PUSH
7063: LD_VAR 0 14
7067: ARRAY
7068: PPUSH
7069: LD_VAR 0 43
7073: PUSH
7074: LD_INT 1
7076: PPUSH
7077: LD_VAR 0 43
7081: PPUSH
7082: CALL_OW 12
7086: ARRAY
7087: PPUSH
7088: CALL_OW 120
7092: GO 6993
7094: POP
7095: POP
// end else
7096: GO 7138
// for i := 1 to soldiers do
7098: LD_ADDR_VAR 0 14
7102: PUSH
7103: DOUBLE
7104: LD_INT 1
7106: DEC
7107: ST_TO_ADDR
7108: LD_VAR 0 20
7112: PUSH
7113: FOR_TO
7114: IFFALSE 7136
// SetTag ( soldiers [ i ] , 3 ) ;
7116: LD_VAR 0 20
7120: PUSH
7121: LD_VAR 0 14
7125: ARRAY
7126: PPUSH
7127: LD_INT 3
7129: PPUSH
7130: CALL_OW 109
7134: GO 7113
7136: POP
7137: POP
// for i := 1 to personel do
7138: LD_ADDR_VAR 0 14
7142: PUSH
7143: DOUBLE
7144: LD_INT 1
7146: DEC
7147: ST_TO_ADDR
7148: LD_VAR 0 19
7152: PUSH
7153: FOR_TO
7154: IFFALSE 7195
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
7156: LD_ADDR_VAR 0 21
7160: PUSH
7161: LD_VAR 0 21
7165: PUSH
7166: LD_VAR 0 19
7170: PUSH
7171: LD_VAR 0 14
7175: ARRAY
7176: PPUSH
7177: LD_INT 25
7179: PUSH
7180: LD_INT 2
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PPUSH
7187: CALL_OW 72
7191: ADD
7192: ST_TO_ADDR
7193: GO 7153
7195: POP
7196: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
7197: LD_VAR 0 21
7201: PUSH
7202: LD_VAR 0 4
7206: PPUSH
7207: LD_INT 22
7209: PUSH
7210: LD_VAR 0 1
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PUSH
7219: LD_INT 21
7221: PUSH
7222: LD_INT 3
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: LD_INT 3
7231: PUSH
7232: LD_INT 24
7234: PUSH
7235: LD_INT 1000
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: LIST
7250: PPUSH
7251: CALL_OW 70
7255: AND
7256: IFFALSE 7484
// begin for i := 1 to engineers do
7258: LD_ADDR_VAR 0 14
7262: PUSH
7263: DOUBLE
7264: LD_INT 1
7266: DEC
7267: ST_TO_ADDR
7268: LD_VAR 0 21
7272: PUSH
7273: FOR_TO
7274: IFFALSE 7480
// if GetTag ( engineers [ i ] ) = 1 then
7276: LD_VAR 0 21
7280: PUSH
7281: LD_VAR 0 14
7285: ARRAY
7286: PPUSH
7287: CALL_OW 110
7291: PUSH
7292: LD_INT 1
7294: EQUAL
7295: IFFALSE 7478
// begin if GetTaskList ( engineers [ i ] ) then
7297: LD_VAR 0 21
7301: PUSH
7302: LD_VAR 0 14
7306: ARRAY
7307: PPUSH
7308: CALL_OW 437
7312: IFFALSE 7360
// if GetTaskList ( engineers [ i ] ) [ 1 ] [ 1 ] = e then
7314: LD_VAR 0 21
7318: PUSH
7319: LD_VAR 0 14
7323: ARRAY
7324: PPUSH
7325: CALL_OW 437
7329: PUSH
7330: LD_INT 1
7332: ARRAY
7333: PUSH
7334: LD_INT 1
7336: ARRAY
7337: PUSH
7338: LD_STRING e
7340: EQUAL
7341: IFFALSE 7360
// SetTaskList ( engineers [ i ] , [ ] ) ;
7343: LD_VAR 0 21
7347: PUSH
7348: LD_VAR 0 14
7352: ARRAY
7353: PPUSH
7354: EMPTY
7355: PPUSH
7356: CALL_OW 446
// if IsInUnit ( engineers [ i ] ) then
7360: LD_VAR 0 21
7364: PUSH
7365: LD_VAR 0 14
7369: ARRAY
7370: PPUSH
7371: CALL_OW 310
7375: IFFALSE 7392
// ComExitBuilding ( engineers [ i ] ) ;
7377: LD_VAR 0 21
7381: PUSH
7382: LD_VAR 0 14
7386: ARRAY
7387: PPUSH
7388: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7392: LD_ADDR_VAR 0 47
7396: PUSH
7397: LD_VAR 0 4
7401: PPUSH
7402: LD_INT 22
7404: PUSH
7405: LD_VAR 0 1
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: LD_INT 21
7416: PUSH
7417: LD_INT 3
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: PUSH
7424: LD_INT 3
7426: PUSH
7427: LD_INT 24
7429: PUSH
7430: LD_INT 1000
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: PPUSH
7446: CALL_OW 70
7450: PUSH
7451: FOR_IN
7452: IFFALSE 7476
// AddComRepairBuilding ( engineers [ i ] , damageBuilding ) ;
7454: LD_VAR 0 21
7458: PUSH
7459: LD_VAR 0 14
7463: ARRAY
7464: PPUSH
7465: LD_VAR 0 47
7469: PPUSH
7470: CALL_OW 190
7474: GO 7451
7476: POP
7477: POP
// end ;
7478: GO 7273
7480: POP
7481: POP
// end else
7482: GO 7791
// if engineers and destroyedBuildings then
7484: LD_VAR 0 21
7488: PUSH
7489: LD_VAR 0 35
7493: AND
7494: IFFALSE 7670
// begin for i := 1 to engineers do
7496: LD_ADDR_VAR 0 14
7500: PUSH
7501: DOUBLE
7502: LD_INT 1
7504: DEC
7505: ST_TO_ADDR
7506: LD_VAR 0 21
7510: PUSH
7511: FOR_TO
7512: IFFALSE 7666
// if GetTag ( engineers [ i ] ) = 1 then
7514: LD_VAR 0 21
7518: PUSH
7519: LD_VAR 0 14
7523: ARRAY
7524: PPUSH
7525: CALL_OW 110
7529: PUSH
7530: LD_INT 1
7532: EQUAL
7533: IFFALSE 7664
// begin if IsInUnit ( engineers [ i ] ) then
7535: LD_VAR 0 21
7539: PUSH
7540: LD_VAR 0 14
7544: ARRAY
7545: PPUSH
7546: CALL_OW 310
7550: IFFALSE 7567
// ComExitBuilding ( engineers [ i ] ) ;
7552: LD_VAR 0 21
7556: PUSH
7557: LD_VAR 0 14
7561: ARRAY
7562: PPUSH
7563: CALL_OW 122
// for j := 1 to destroyedBuildings / 4 do
7567: LD_ADDR_VAR 0 15
7571: PUSH
7572: DOUBLE
7573: LD_INT 1
7575: DEC
7576: ST_TO_ADDR
7577: LD_VAR 0 35
7581: PUSH
7582: LD_INT 4
7584: DIVREAL
7585: PUSH
7586: FOR_TO
7587: IFFALSE 7662
// AddComBuild ( engineers [ i ] , destroyedBuildings [ j ] , destroyedBuildings [ j + 1 ] , destroyedBuildings [ j + 2 ] , destroyedBuildings [ j + 3 ] ) ;
7589: LD_VAR 0 21
7593: PUSH
7594: LD_VAR 0 14
7598: ARRAY
7599: PPUSH
7600: LD_VAR 0 35
7604: PUSH
7605: LD_VAR 0 15
7609: ARRAY
7610: PPUSH
7611: LD_VAR 0 35
7615: PUSH
7616: LD_VAR 0 15
7620: PUSH
7621: LD_INT 1
7623: PLUS
7624: ARRAY
7625: PPUSH
7626: LD_VAR 0 35
7630: PUSH
7631: LD_VAR 0 15
7635: PUSH
7636: LD_INT 2
7638: PLUS
7639: ARRAY
7640: PPUSH
7641: LD_VAR 0 35
7645: PUSH
7646: LD_VAR 0 15
7650: PUSH
7651: LD_INT 3
7653: PLUS
7654: ARRAY
7655: PPUSH
7656: CALL_OW 205
7660: GO 7586
7662: POP
7663: POP
// end ;
7664: GO 7511
7666: POP
7667: POP
// end else
7668: GO 7791
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot and not destroyedBuildings then
7670: LD_VAR 0 21
7674: PUSH
7675: LD_VAR 0 21
7679: PPUSH
7680: LD_INT 56
7682: PUSH
7683: EMPTY
7684: LIST
7685: PPUSH
7686: CALL_OW 72
7690: AND
7691: PUSH
7692: LD_VAR 0 39
7696: AND
7697: PUSH
7698: LD_VAR 0 35
7702: NOT
7703: AND
7704: IFFALSE 7791
// for i := 1 to engineers do
7706: LD_ADDR_VAR 0 14
7710: PUSH
7711: DOUBLE
7712: LD_INT 1
7714: DEC
7715: ST_TO_ADDR
7716: LD_VAR 0 21
7720: PUSH
7721: FOR_TO
7722: IFFALSE 7789
// begin if GetTag ( engineers [ i ] ) = 1 and not HasTask ( engineers [ i ] ) then
7724: LD_VAR 0 21
7728: PUSH
7729: LD_VAR 0 14
7733: ARRAY
7734: PPUSH
7735: CALL_OW 110
7739: PUSH
7740: LD_INT 1
7742: EQUAL
7743: PUSH
7744: LD_VAR 0 21
7748: PUSH
7749: LD_VAR 0 14
7753: ARRAY
7754: PPUSH
7755: CALL_OW 314
7759: NOT
7760: AND
7761: IFFALSE 7787
// ComEnterUnit ( engineers [ i ] , depot [ 1 ] ) ;
7763: LD_VAR 0 21
7767: PUSH
7768: LD_VAR 0 14
7772: ARRAY
7773: PPUSH
7774: LD_VAR 0 39
7778: PUSH
7779: LD_INT 1
7781: ARRAY
7782: PPUSH
7783: CALL_OW 120
// end ;
7787: GO 7721
7789: POP
7790: POP
// for i := 1 to personel do
7791: LD_ADDR_VAR 0 14
7795: PUSH
7796: DOUBLE
7797: LD_INT 1
7799: DEC
7800: ST_TO_ADDR
7801: LD_VAR 0 19
7805: PUSH
7806: FOR_TO
7807: IFFALSE 7848
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
7809: LD_ADDR_VAR 0 22
7813: PUSH
7814: LD_VAR 0 22
7818: PUSH
7819: LD_VAR 0 19
7823: PUSH
7824: LD_VAR 0 14
7828: ARRAY
7829: PPUSH
7830: LD_INT 25
7832: PUSH
7833: LD_INT 3
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PPUSH
7840: CALL_OW 72
7844: ADD
7845: ST_TO_ADDR
7846: GO 7806
7848: POP
7849: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
7850: LD_VAR 0 22
7854: PUSH
7855: LD_VAR 0 4
7859: PPUSH
7860: LD_INT 22
7862: PUSH
7863: LD_VAR 0 1
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: LD_INT 21
7874: PUSH
7875: LD_INT 2
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: PUSH
7882: LD_INT 3
7884: PUSH
7885: LD_INT 24
7887: PUSH
7888: LD_INT 1000
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: LIST
7903: PPUSH
7904: CALL_OW 70
7908: AND
7909: IFFALSE 8489
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7911: LD_ADDR_VAR 0 48
7915: PUSH
7916: LD_VAR 0 4
7920: PPUSH
7921: LD_INT 22
7923: PUSH
7924: LD_VAR 0 1
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PUSH
7933: LD_INT 21
7935: PUSH
7936: LD_INT 2
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: PUSH
7943: LD_INT 3
7945: PUSH
7946: LD_INT 24
7948: PUSH
7949: LD_INT 1000
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: LIST
7964: PPUSH
7965: CALL_OW 70
7969: PUSH
7970: FOR_IN
7971: IFFALSE 8485
// begin if GetDistUnitArea ( damageUnit , repairArea ) <= 5 then
7973: LD_VAR 0 48
7977: PPUSH
7978: LD_VAR 0 6
7982: PPUSH
7983: CALL_OW 299
7987: PUSH
7988: LD_INT 5
7990: LESSEQUAL
7991: IFFALSE 8080
// for i := 1 to vehicles do
7993: LD_ADDR_VAR 0 14
7997: PUSH
7998: DOUBLE
7999: LD_INT 1
8001: DEC
8002: ST_TO_ADDR
8003: LD_VAR 0 25
8007: PUSH
8008: FOR_TO
8009: IFFALSE 8078
// if vehicles [ i ] [ 1 ] = damageUnit then
8011: LD_VAR 0 25
8015: PUSH
8016: LD_VAR 0 14
8020: ARRAY
8021: PUSH
8022: LD_INT 1
8024: ARRAY
8025: PUSH
8026: LD_VAR 0 48
8030: EQUAL
8031: IFFALSE 8076
// begin ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
8033: LD_VAR 0 25
8037: PUSH
8038: LD_VAR 0 14
8042: ARRAY
8043: PUSH
8044: LD_INT 2
8046: ARRAY
8047: PPUSH
8048: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
8052: LD_VAR 0 25
8056: PUSH
8057: LD_VAR 0 14
8061: ARRAY
8062: PUSH
8063: LD_INT 2
8065: ARRAY
8066: PPUSH
8067: LD_VAR 0 48
8071: PPUSH
8072: CALL_OW 189
// end ;
8076: GO 8008
8078: POP
8079: POP
// for i := 1 to mechanics do
8080: LD_ADDR_VAR 0 14
8084: PUSH
8085: DOUBLE
8086: LD_INT 1
8088: DEC
8089: ST_TO_ADDR
8090: LD_VAR 0 22
8094: PUSH
8095: FOR_TO
8096: IFFALSE 8264
// if GetTag ( mechanics [ i ] ) = 1 and IsInUnit ( mechanics [ i ] ) in [ b_workshop , b_factory ] then
8098: LD_VAR 0 22
8102: PUSH
8103: LD_VAR 0 14
8107: ARRAY
8108: PPUSH
8109: CALL_OW 110
8113: PUSH
8114: LD_INT 1
8116: EQUAL
8117: PUSH
8118: LD_VAR 0 22
8122: PUSH
8123: LD_VAR 0 14
8127: ARRAY
8128: PPUSH
8129: CALL_OW 310
8133: PUSH
8134: LD_INT 2
8136: PUSH
8137: LD_INT 3
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: IN
8144: AND
8145: IFFALSE 8262
// begin if GetTaskList ( mechanics [ i ] ) then
8147: LD_VAR 0 22
8151: PUSH
8152: LD_VAR 0 14
8156: ARRAY
8157: PPUSH
8158: CALL_OW 437
8162: IFFALSE 8210
// if GetTaskList ( mechanics [ i ] ) [ 1 ] [ 1 ] = e then
8164: LD_VAR 0 22
8168: PUSH
8169: LD_VAR 0 14
8173: ARRAY
8174: PPUSH
8175: CALL_OW 437
8179: PUSH
8180: LD_INT 1
8182: ARRAY
8183: PUSH
8184: LD_INT 1
8186: ARRAY
8187: PUSH
8188: LD_STRING e
8190: EQUAL
8191: IFFALSE 8210
// SetTaskList ( mechanics [ i ] , [ ] ) ;
8193: LD_VAR 0 22
8197: PUSH
8198: LD_VAR 0 14
8202: ARRAY
8203: PPUSH
8204: EMPTY
8205: PPUSH
8206: CALL_OW 446
// if IsInUnit ( mechanics [ i ] ) then
8210: LD_VAR 0 22
8214: PUSH
8215: LD_VAR 0 14
8219: ARRAY
8220: PPUSH
8221: CALL_OW 310
8225: IFFALSE 8242
// ComExitBuilding ( mechanics [ i ] ) ;
8227: LD_VAR 0 22
8231: PUSH
8232: LD_VAR 0 14
8236: ARRAY
8237: PPUSH
8238: CALL_OW 122
// AddComRepairVehicle ( mechanics [ i ] , damageUnit ) ;
8242: LD_VAR 0 22
8246: PUSH
8247: LD_VAR 0 14
8251: ARRAY
8252: PPUSH
8253: LD_VAR 0 48
8257: PPUSH
8258: CALL_OW 189
// end ;
8262: GO 8095
8264: POP
8265: POP
// if GetLives ( damageUnit ) < 250 and IsInArea ( damageUnit , baseArea ) then
8266: LD_VAR 0 48
8270: PPUSH
8271: CALL_OW 256
8275: PUSH
8276: LD_INT 250
8278: LESS
8279: PUSH
8280: LD_VAR 0 48
8284: PPUSH
8285: LD_VAR 0 4
8289: PPUSH
8290: CALL_OW 308
8294: AND
8295: IFFALSE 8483
// for i := 1 to personel do
8297: LD_ADDR_VAR 0 14
8301: PUSH
8302: DOUBLE
8303: LD_INT 1
8305: DEC
8306: ST_TO_ADDR
8307: LD_VAR 0 19
8311: PUSH
8312: FOR_TO
8313: IFFALSE 8481
// if GetTag ( mechanics [ i ] ) = 1 and IsInUnit ( mechanics [ i ] ) in [ b_workshop , b_factory ] then
8315: LD_VAR 0 22
8319: PUSH
8320: LD_VAR 0 14
8324: ARRAY
8325: PPUSH
8326: CALL_OW 110
8330: PUSH
8331: LD_INT 1
8333: EQUAL
8334: PUSH
8335: LD_VAR 0 22
8339: PUSH
8340: LD_VAR 0 14
8344: ARRAY
8345: PPUSH
8346: CALL_OW 310
8350: PUSH
8351: LD_INT 2
8353: PUSH
8354: LD_INT 3
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: IN
8361: AND
8362: IFFALSE 8479
// begin if GetTaskList ( mechanics [ i ] ) then
8364: LD_VAR 0 22
8368: PUSH
8369: LD_VAR 0 14
8373: ARRAY
8374: PPUSH
8375: CALL_OW 437
8379: IFFALSE 8427
// if GetTaskList ( mechanics [ i ] ) [ 1 ] [ 1 ] = e then
8381: LD_VAR 0 22
8385: PUSH
8386: LD_VAR 0 14
8390: ARRAY
8391: PPUSH
8392: CALL_OW 437
8396: PUSH
8397: LD_INT 1
8399: ARRAY
8400: PUSH
8401: LD_INT 1
8403: ARRAY
8404: PUSH
8405: LD_STRING e
8407: EQUAL
8408: IFFALSE 8427
// SetTaskList ( mechanics [ i ] , [ ] ) ;
8410: LD_VAR 0 22
8414: PUSH
8415: LD_VAR 0 14
8419: ARRAY
8420: PPUSH
8421: EMPTY
8422: PPUSH
8423: CALL_OW 446
// if IsInUnit ( mechanics [ i ] ) then
8427: LD_VAR 0 22
8431: PUSH
8432: LD_VAR 0 14
8436: ARRAY
8437: PPUSH
8438: CALL_OW 310
8442: IFFALSE 8459
// ComExitBuilding ( mechanics [ i ] ) ;
8444: LD_VAR 0 22
8448: PUSH
8449: LD_VAR 0 14
8453: ARRAY
8454: PPUSH
8455: CALL_OW 122
// AddComRepairVehicle ( mechanics [ i ] , damageUnit ) ;
8459: LD_VAR 0 22
8463: PUSH
8464: LD_VAR 0 14
8468: ARRAY
8469: PPUSH
8470: LD_VAR 0 48
8474: PPUSH
8475: CALL_OW 189
// end ;
8479: GO 8312
8481: POP
8482: POP
// end ;
8483: GO 7970
8485: POP
8486: POP
// end else
8487: GO 8786
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and UnitFilter ( controlTowers , [ f_empty ] ) then
8489: LD_VAR 0 22
8493: PUSH
8494: LD_VAR 0 22
8498: PPUSH
8499: LD_INT 56
8501: PUSH
8502: EMPTY
8503: LIST
8504: PPUSH
8505: CALL_OW 72
8509: AND
8510: PUSH
8511: LD_VAR 0 44
8515: PPUSH
8516: LD_INT 58
8518: PUSH
8519: EMPTY
8520: LIST
8521: PPUSH
8522: CALL_OW 72
8526: AND
8527: IFFALSE 8644
// begin for i := 1 to mechanics do
8529: LD_ADDR_VAR 0 14
8533: PUSH
8534: DOUBLE
8535: LD_INT 1
8537: DEC
8538: ST_TO_ADDR
8539: LD_VAR 0 22
8543: PUSH
8544: FOR_TO
8545: IFFALSE 8640
// if GetTag ( mechanics [ i ] ) = 1 and not HasTask ( mechanics [ i ] ) and not IsInUnit ( mechanics [ i ] ) then
8547: LD_VAR 0 22
8551: PUSH
8552: LD_VAR 0 14
8556: ARRAY
8557: PPUSH
8558: CALL_OW 110
8562: PUSH
8563: LD_INT 1
8565: EQUAL
8566: PUSH
8567: LD_VAR 0 22
8571: PUSH
8572: LD_VAR 0 14
8576: ARRAY
8577: PPUSH
8578: CALL_OW 314
8582: NOT
8583: AND
8584: PUSH
8585: LD_VAR 0 22
8589: PUSH
8590: LD_VAR 0 14
8594: ARRAY
8595: PPUSH
8596: CALL_OW 310
8600: NOT
8601: AND
8602: IFFALSE 8638
// ComEnterUnit ( mechanics [ i ] , controlTowers [ rand ( 1 , controlTowers ) ] ) ;
8604: LD_VAR 0 22
8608: PUSH
8609: LD_VAR 0 14
8613: ARRAY
8614: PPUSH
8615: LD_VAR 0 44
8619: PUSH
8620: LD_INT 1
8622: PPUSH
8623: LD_VAR 0 44
8627: PPUSH
8628: CALL_OW 12
8632: ARRAY
8633: PPUSH
8634: CALL_OW 120
8638: GO 8544
8640: POP
8641: POP
// end else
8642: GO 8786
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
8644: LD_VAR 0 22
8648: PUSH
8649: LD_VAR 0 22
8653: PPUSH
8654: LD_INT 56
8656: PUSH
8657: EMPTY
8658: LIST
8659: PPUSH
8660: CALL_OW 72
8664: AND
8665: PUSH
8666: LD_VAR 0 40
8670: AND
8671: IFFALSE 8786
// for i := 1 to mechanics do
8673: LD_ADDR_VAR 0 14
8677: PUSH
8678: DOUBLE
8679: LD_INT 1
8681: DEC
8682: ST_TO_ADDR
8683: LD_VAR 0 22
8687: PUSH
8688: FOR_TO
8689: IFFALSE 8784
// if GetTag ( mechanics [ i ] ) = 1 and not HasTask ( mechanics [ i ] ) and not IsInUnit ( mechanics [ i ] ) then
8691: LD_VAR 0 22
8695: PUSH
8696: LD_VAR 0 14
8700: ARRAY
8701: PPUSH
8702: CALL_OW 110
8706: PUSH
8707: LD_INT 1
8709: EQUAL
8710: PUSH
8711: LD_VAR 0 22
8715: PUSH
8716: LD_VAR 0 14
8720: ARRAY
8721: PPUSH
8722: CALL_OW 314
8726: NOT
8727: AND
8728: PUSH
8729: LD_VAR 0 22
8733: PUSH
8734: LD_VAR 0 14
8738: ARRAY
8739: PPUSH
8740: CALL_OW 310
8744: NOT
8745: AND
8746: IFFALSE 8782
// ComEnterUnit ( mechanics [ i ] , factory [ rand ( 1 , factory ) ] ) ;
8748: LD_VAR 0 22
8752: PUSH
8753: LD_VAR 0 14
8757: ARRAY
8758: PPUSH
8759: LD_VAR 0 40
8763: PUSH
8764: LD_INT 1
8766: PPUSH
8767: LD_VAR 0 40
8771: PPUSH
8772: CALL_OW 12
8776: ARRAY
8777: PPUSH
8778: CALL_OW 120
8782: GO 8688
8784: POP
8785: POP
// for i := 1 to personel do
8786: LD_ADDR_VAR 0 14
8790: PUSH
8791: DOUBLE
8792: LD_INT 1
8794: DEC
8795: ST_TO_ADDR
8796: LD_VAR 0 19
8800: PUSH
8801: FOR_TO
8802: IFFALSE 8843
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
8804: LD_ADDR_VAR 0 23
8808: PUSH
8809: LD_VAR 0 23
8813: PUSH
8814: LD_VAR 0 19
8818: PUSH
8819: LD_VAR 0 14
8823: ARRAY
8824: PPUSH
8825: LD_INT 25
8827: PUSH
8828: LD_INT 4
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PPUSH
8835: CALL_OW 72
8839: ADD
8840: ST_TO_ADDR
8841: GO 8801
8843: POP
8844: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
8845: LD_VAR 0 23
8849: PUSH
8850: LD_VAR 0 4
8854: PPUSH
8855: LD_INT 22
8857: PUSH
8858: LD_VAR 0 1
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PUSH
8867: LD_INT 21
8869: PUSH
8870: LD_INT 1
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PUSH
8877: LD_INT 3
8879: PUSH
8880: LD_INT 24
8882: PUSH
8883: LD_INT 1000
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: LIST
8898: PPUSH
8899: CALL_OW 70
8903: AND
8904: IFFALSE 9341
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
8906: LD_ADDR_VAR 0 48
8910: PUSH
8911: LD_VAR 0 4
8915: PPUSH
8916: LD_INT 22
8918: PUSH
8919: LD_VAR 0 1
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: PUSH
8928: LD_INT 21
8930: PUSH
8931: LD_INT 1
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: PUSH
8938: LD_INT 3
8940: PUSH
8941: LD_INT 24
8943: PUSH
8944: LD_INT 1000
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: LIST
8959: PPUSH
8960: CALL_OW 70
8964: PUSH
8965: FOR_IN
8966: IFFALSE 9337
// begin if GetDistUnitArea ( damageUnit , healArea ) <= 5 then
8968: LD_VAR 0 48
8972: PPUSH
8973: LD_VAR 0 5
8977: PPUSH
8978: CALL_OW 299
8982: PUSH
8983: LD_INT 5
8985: LESSEQUAL
8986: IFFALSE 9146
// for i := 1 to scientists do
8988: LD_ADDR_VAR 0 14
8992: PUSH
8993: DOUBLE
8994: LD_INT 1
8996: DEC
8997: ST_TO_ADDR
8998: LD_VAR 0 23
9002: PUSH
9003: FOR_TO
9004: IFFALSE 9144
// if GetTag ( scientists [ i ] ) = 1 then
9006: LD_VAR 0 23
9010: PUSH
9011: LD_VAR 0 14
9015: ARRAY
9016: PPUSH
9017: CALL_OW 110
9021: PUSH
9022: LD_INT 1
9024: EQUAL
9025: IFFALSE 9142
// begin if GetTaskList ( scientists [ i ] ) then
9027: LD_VAR 0 23
9031: PUSH
9032: LD_VAR 0 14
9036: ARRAY
9037: PPUSH
9038: CALL_OW 437
9042: IFFALSE 9090
// if GetTaskList ( scientists [ i ] ) [ 1 ] [ 1 ] = e then
9044: LD_VAR 0 23
9048: PUSH
9049: LD_VAR 0 14
9053: ARRAY
9054: PPUSH
9055: CALL_OW 437
9059: PUSH
9060: LD_INT 1
9062: ARRAY
9063: PUSH
9064: LD_INT 1
9066: ARRAY
9067: PUSH
9068: LD_STRING e
9070: EQUAL
9071: IFFALSE 9090
// SetTaskList ( scientists [ i ] , [ ] ) ;
9073: LD_VAR 0 23
9077: PUSH
9078: LD_VAR 0 14
9082: ARRAY
9083: PPUSH
9084: EMPTY
9085: PPUSH
9086: CALL_OW 446
// if IsInUnit ( scientists [ i ] ) then
9090: LD_VAR 0 23
9094: PUSH
9095: LD_VAR 0 14
9099: ARRAY
9100: PPUSH
9101: CALL_OW 310
9105: IFFALSE 9122
// ComExitBuilding ( scientists [ i ] ) ;
9107: LD_VAR 0 23
9111: PUSH
9112: LD_VAR 0 14
9116: ARRAY
9117: PPUSH
9118: CALL_OW 122
// AddComHeal ( scientists [ i ] , damageUnit ) ;
9122: LD_VAR 0 23
9126: PUSH
9127: LD_VAR 0 14
9131: ARRAY
9132: PPUSH
9133: LD_VAR 0 48
9137: PPUSH
9138: CALL_OW 188
// end ;
9142: GO 9003
9144: POP
9145: POP
// if GetLives ( damageUnit ) < 250 and IsInArea ( damageUnit , baseArea ) then
9146: LD_VAR 0 48
9150: PPUSH
9151: CALL_OW 256
9155: PUSH
9156: LD_INT 250
9158: LESS
9159: PUSH
9160: LD_VAR 0 48
9164: PPUSH
9165: LD_VAR 0 4
9169: PPUSH
9170: CALL_OW 308
9174: AND
9175: IFFALSE 9335
// for i := 1 to scientists do
9177: LD_ADDR_VAR 0 14
9181: PUSH
9182: DOUBLE
9183: LD_INT 1
9185: DEC
9186: ST_TO_ADDR
9187: LD_VAR 0 23
9191: PUSH
9192: FOR_TO
9193: IFFALSE 9333
// if GetTag ( scientists [ i ] ) = 1 then
9195: LD_VAR 0 23
9199: PUSH
9200: LD_VAR 0 14
9204: ARRAY
9205: PPUSH
9206: CALL_OW 110
9210: PUSH
9211: LD_INT 1
9213: EQUAL
9214: IFFALSE 9331
// begin if GetTaskList ( scientists [ i ] ) then
9216: LD_VAR 0 23
9220: PUSH
9221: LD_VAR 0 14
9225: ARRAY
9226: PPUSH
9227: CALL_OW 437
9231: IFFALSE 9279
// if GetTaskList ( scientists [ i ] ) [ 1 ] [ 1 ] = e then
9233: LD_VAR 0 23
9237: PUSH
9238: LD_VAR 0 14
9242: ARRAY
9243: PPUSH
9244: CALL_OW 437
9248: PUSH
9249: LD_INT 1
9251: ARRAY
9252: PUSH
9253: LD_INT 1
9255: ARRAY
9256: PUSH
9257: LD_STRING e
9259: EQUAL
9260: IFFALSE 9279
// SetTaskList ( scientists [ i ] , [ ] ) ;
9262: LD_VAR 0 23
9266: PUSH
9267: LD_VAR 0 14
9271: ARRAY
9272: PPUSH
9273: EMPTY
9274: PPUSH
9275: CALL_OW 446
// if IsInUnit ( scientists [ i ] ) then
9279: LD_VAR 0 23
9283: PUSH
9284: LD_VAR 0 14
9288: ARRAY
9289: PPUSH
9290: CALL_OW 310
9294: IFFALSE 9311
// ComExitBuilding ( scientists [ i ] ) ;
9296: LD_VAR 0 23
9300: PUSH
9301: LD_VAR 0 14
9305: ARRAY
9306: PPUSH
9307: CALL_OW 122
// AddComHeal ( scientists [ i ] , damageUnit ) ;
9311: LD_VAR 0 23
9315: PUSH
9316: LD_VAR 0 14
9320: ARRAY
9321: PPUSH
9322: LD_VAR 0 48
9326: PPUSH
9327: CALL_OW 188
// end ;
9331: GO 9192
9333: POP
9334: POP
// end ;
9335: GO 8965
9337: POP
9338: POP
// end else
9339: GO 9483
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
9341: LD_VAR 0 23
9345: PUSH
9346: LD_VAR 0 23
9350: PPUSH
9351: LD_INT 56
9353: PUSH
9354: EMPTY
9355: LIST
9356: PPUSH
9357: CALL_OW 72
9361: AND
9362: PUSH
9363: LD_VAR 0 41
9367: AND
9368: IFFALSE 9483
// for i := 1 to scientists do
9370: LD_ADDR_VAR 0 14
9374: PUSH
9375: DOUBLE
9376: LD_INT 1
9378: DEC
9379: ST_TO_ADDR
9380: LD_VAR 0 23
9384: PUSH
9385: FOR_TO
9386: IFFALSE 9481
// if GetTag ( scientists [ i ] ) = 1 and not HasTask ( scientists [ i ] ) and not IsInUnit ( scientists [ i ] ) then
9388: LD_VAR 0 23
9392: PUSH
9393: LD_VAR 0 14
9397: ARRAY
9398: PPUSH
9399: CALL_OW 110
9403: PUSH
9404: LD_INT 1
9406: EQUAL
9407: PUSH
9408: LD_VAR 0 23
9412: PUSH
9413: LD_VAR 0 14
9417: ARRAY
9418: PPUSH
9419: CALL_OW 314
9423: NOT
9424: AND
9425: PUSH
9426: LD_VAR 0 23
9430: PUSH
9431: LD_VAR 0 14
9435: ARRAY
9436: PPUSH
9437: CALL_OW 310
9441: NOT
9442: AND
9443: IFFALSE 9479
// ComEnterUnit ( scientists [ i ] , lab [ rand ( 1 , lab ) ] ) ;
9445: LD_VAR 0 23
9449: PUSH
9450: LD_VAR 0 14
9454: ARRAY
9455: PPUSH
9456: LD_VAR 0 41
9460: PUSH
9461: LD_INT 1
9463: PPUSH
9464: LD_VAR 0 41
9468: PPUSH
9469: CALL_OW 12
9473: ARRAY
9474: PPUSH
9475: CALL_OW 120
9479: GO 9385
9481: POP
9482: POP
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , us_bulldozer ] ] ) then
9483: LD_INT 22
9485: PUSH
9486: LD_VAR 0 1
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PUSH
9495: LD_INT 34
9497: PUSH
9498: LD_INT 14
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PPUSH
9509: CALL_OW 69
9513: NOT
9514: IFFALSE 9541
// AddComConstruct ( factory [ 1 ] , us_heavy_tracked , engine_combustion , control_remote , us_bulldozer ) ;
9516: LD_VAR 0 40
9520: PUSH
9521: LD_INT 1
9523: ARRAY
9524: PPUSH
9525: LD_INT 4
9527: PPUSH
9528: LD_INT 1
9530: PPUSH
9531: LD_INT 2
9533: PPUSH
9534: LD_INT 14
9536: PPUSH
9537: CALL_OW 185
// if vehicles < vehiclesAmount and factory then
9541: LD_VAR 0 25
9545: PUSH
9546: LD_VAR 0 8
9550: LESS
9551: PUSH
9552: LD_VAR 0 40
9556: AND
9557: IFFALSE 9805
// begin tmp = vehiclesAmount - vehicles ;
9559: LD_ADDR_VAR 0 16
9563: PUSH
9564: LD_VAR 0 8
9568: PUSH
9569: LD_VAR 0 25
9573: MINUS
9574: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
9575: LD_ADDR_VAR 0 32
9579: PUSH
9580: LD_VAR 0 1
9584: PPUSH
9585: LD_VAR 0 2
9589: PPUSH
9590: CALL 14415 0 2
9594: ST_TO_ADDR
// for i := 1 to tmp do
9595: LD_ADDR_VAR 0 14
9599: PUSH
9600: DOUBLE
9601: LD_INT 1
9603: DEC
9604: ST_TO_ADDR
9605: LD_VAR 0 16
9609: PUSH
9610: FOR_TO
9611: IFFALSE 9801
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
9613: LD_ADDR_VAR 0 16
9617: PUSH
9618: LD_VAR 0 32
9622: PUSH
9623: LD_INT 1
9625: PPUSH
9626: LD_VAR 0 32
9630: PPUSH
9631: CALL_OW 12
9635: ARRAY
9636: ST_TO_ADDR
// if tmp in [ 6 , 34 , 14 , 71 , 47 ] then
9637: LD_VAR 0 16
9641: PUSH
9642: LD_INT 6
9644: PUSH
9645: LD_INT 34
9647: PUSH
9648: LD_INT 14
9650: PUSH
9651: LD_INT 71
9653: PUSH
9654: LD_INT 47
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: IN
9664: IFFALSE 9702
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
9666: LD_ADDR_VAR 0 33
9670: PUSH
9671: LD_INT 4
9673: PUSH
9674: EMPTY
9675: LIST
9676: PUSH
9677: LD_INT 14
9679: PUSH
9680: EMPTY
9681: LIST
9682: PUSH
9683: LD_INT 24
9685: PUSH
9686: EMPTY
9687: LIST
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: LIST
9693: PUSH
9694: LD_VAR 0 2
9698: ARRAY
9699: ST_TO_ADDR
9700: GO 9756
// chassis = [ [ us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
9702: LD_ADDR_VAR 0 33
9706: PUSH
9707: LD_INT 3
9709: PUSH
9710: LD_INT 4
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: PUSH
9717: LD_INT 13
9719: PUSH
9720: LD_INT 14
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: PUSH
9727: LD_INT 21
9729: PUSH
9730: LD_INT 23
9732: PUSH
9733: LD_INT 24
9735: PUSH
9736: LD_INT 22
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: LIST
9749: PUSH
9750: LD_VAR 0 2
9754: ARRAY
9755: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_remote , tmp ) ;
9756: LD_VAR 0 40
9760: PUSH
9761: LD_INT 1
9763: ARRAY
9764: PPUSH
9765: LD_VAR 0 33
9769: PUSH
9770: LD_INT 1
9772: PPUSH
9773: LD_VAR 0 33
9777: PPUSH
9778: CALL_OW 12
9782: ARRAY
9783: PPUSH
9784: LD_INT 1
9786: PPUSH
9787: LD_INT 2
9789: PPUSH
9790: LD_VAR 0 16
9794: PPUSH
9795: CALL_OW 185
// end ;
9799: GO 9610
9801: POP
9802: POP
// end else
9803: GO 9818
// ComCancel ( factory [ 1 ] ) ;
9805: LD_VAR 0 40
9809: PUSH
9810: LD_INT 1
9812: ARRAY
9813: PPUSH
9814: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ] ] ) do
9818: LD_ADDR_VAR 0 24
9822: PUSH
9823: LD_VAR 0 4
9827: PPUSH
9828: LD_INT 22
9830: PUSH
9831: LD_VAR 0 1
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PUSH
9840: LD_INT 21
9842: PUSH
9843: LD_INT 2
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 50
9852: PUSH
9853: EMPTY
9854: LIST
9855: PUSH
9856: LD_INT 3
9858: PUSH
9859: LD_INT 2
9861: PUSH
9862: LD_INT 34
9864: PUSH
9865: LD_INT 12
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PUSH
9872: LD_INT 34
9874: PUSH
9875: LD_INT 51
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PUSH
9882: LD_INT 34
9884: PUSH
9885: LD_INT 32
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: PUSH
9892: LD_INT 34
9894: PUSH
9895: LD_INT 31
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: PPUSH
9919: CALL_OW 70
9923: PUSH
9924: FOR_IN
9925: IFFALSE 10080
// begin vehicleInList = false ;
9927: LD_ADDR_VAR 0 26
9931: PUSH
9932: LD_INT 0
9934: ST_TO_ADDR
// for i := 1 to vehicles do
9935: LD_ADDR_VAR 0 14
9939: PUSH
9940: DOUBLE
9941: LD_INT 1
9943: DEC
9944: ST_TO_ADDR
9945: LD_VAR 0 25
9949: PUSH
9950: FOR_TO
9951: IFFALSE 9981
// if vehicle in vehicles [ i ] then
9953: LD_VAR 0 24
9957: PUSH
9958: LD_VAR 0 25
9962: PUSH
9963: LD_VAR 0 14
9967: ARRAY
9968: IN
9969: IFFALSE 9979
// vehicleInList = true ;
9971: LD_ADDR_VAR 0 26
9975: PUSH
9976: LD_INT 1
9978: ST_TO_ADDR
9979: GO 9950
9981: POP
9982: POP
// if not vehicleInList then
9983: LD_VAR 0 26
9987: NOT
9988: IFFALSE 10078
// begin if vehicles < vehiclesToAttackAmount then
9990: LD_VAR 0 25
9994: PUSH
9995: LD_VAR 0 10
9999: LESS
10000: IFFALSE 10041
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] ] ] else
10002: LD_ADDR_VAR 0 25
10006: PUSH
10007: LD_VAR 0 25
10011: PUSH
10012: LD_VAR 0 24
10016: PUSH
10017: LD_VAR 0 24
10021: PPUSH
10022: CALL_OW 313
10026: PUSH
10027: LD_INT 1
10029: ARRAY
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PUSH
10035: EMPTY
10036: LIST
10037: ADD
10038: ST_TO_ADDR
10039: GO 10078
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] ] ] ;
10041: LD_ADDR_VAR 0 25
10045: PUSH
10046: LD_VAR 0 25
10050: PUSH
10051: LD_VAR 0 24
10055: PUSH
10056: LD_VAR 0 24
10060: PPUSH
10061: CALL_OW 313
10065: PUSH
10066: LD_INT 1
10068: ARRAY
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: PUSH
10074: EMPTY
10075: LIST
10076: ADD
10077: ST_TO_ADDR
// end ; end ;
10078: GO 9924
10080: POP
10081: POP
// for enemyUnits in FilterAllUnits ( [ f_enemy , side ] ) do
10082: LD_ADDR_VAR 0 50
10086: PUSH
10087: LD_INT 81
10089: PUSH
10090: LD_VAR 0 1
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PPUSH
10099: CALL_OW 69
10103: PUSH
10104: FOR_IN
10105: IFFALSE 10623
// begin offensiveUnits = [ ] ;
10107: LD_ADDR_VAR 0 27
10111: PUSH
10112: EMPTY
10113: ST_TO_ADDR
// offensiveReadyCounter = 0 ;
10114: LD_ADDR_VAR 0 28
10118: PUSH
10119: LD_INT 0
10121: ST_TO_ADDR
// for i := 1 to vehicles do
10122: LD_ADDR_VAR 0 14
10126: PUSH
10127: DOUBLE
10128: LD_INT 1
10130: DEC
10131: ST_TO_ADDR
10132: LD_VAR 0 25
10136: PUSH
10137: FOR_TO
10138: IFFALSE 10346
// if GetTag ( vehicles [ i ] [ 1 ] ) = 2 then
10140: LD_VAR 0 25
10144: PUSH
10145: LD_VAR 0 14
10149: ARRAY
10150: PUSH
10151: LD_INT 1
10153: ARRAY
10154: PPUSH
10155: CALL_OW 110
10159: PUSH
10160: LD_INT 2
10162: EQUAL
10163: IFFALSE 10344
// begin if GetLives ( vehicles [ i ] [ 1 ] ) > 650 then
10165: LD_VAR 0 25
10169: PUSH
10170: LD_VAR 0 14
10174: ARRAY
10175: PUSH
10176: LD_INT 1
10178: ARRAY
10179: PPUSH
10180: CALL_OW 256
10184: PUSH
10185: LD_INT 650
10187: GREATER
10188: IFFALSE 10204
// offensiveReadyCounter = offensiveReadyCounter + 1 ;
10190: LD_ADDR_VAR 0 28
10194: PUSH
10195: LD_VAR 0 28
10199: PUSH
10200: LD_INT 1
10202: PLUS
10203: ST_TO_ADDR
// if IsInArea ( vehicles [ i ] [ 1 ] , baseArea ) then
10204: LD_VAR 0 25
10208: PUSH
10209: LD_VAR 0 14
10213: ARRAY
10214: PUSH
10215: LD_INT 1
10217: ARRAY
10218: PPUSH
10219: LD_VAR 0 4
10223: PPUSH
10224: CALL_OW 308
10228: IFFALSE 10256
// offensiveUnits = offensiveUnits ^ vehicles [ i ] [ 1 ] ;
10230: LD_ADDR_VAR 0 27
10234: PUSH
10235: LD_VAR 0 27
10239: PUSH
10240: LD_VAR 0 25
10244: PUSH
10245: LD_VAR 0 14
10249: ARRAY
10250: PUSH
10251: LD_INT 1
10253: ARRAY
10254: ADD
10255: ST_TO_ADDR
// for j = 1 to personel do
10256: LD_ADDR_VAR 0 15
10260: PUSH
10261: DOUBLE
10262: LD_INT 1
10264: DEC
10265: ST_TO_ADDR
10266: LD_VAR 0 19
10270: PUSH
10271: FOR_TO
10272: IFFALSE 10342
// if personel [ j ] = vehicles [ i ] [ 2 ] then
10274: LD_VAR 0 19
10278: PUSH
10279: LD_VAR 0 15
10283: ARRAY
10284: PUSH
10285: LD_VAR 0 25
10289: PUSH
10290: LD_VAR 0 14
10294: ARRAY
10295: PUSH
10296: LD_INT 2
10298: ARRAY
10299: EQUAL
10300: IFFALSE 10340
// personel = ReplaceIn ( personel , [ j , personel [ j ] ] , 3 ) ;
10302: LD_ADDR_VAR 0 19
10306: PUSH
10307: LD_VAR 0 19
10311: PPUSH
10312: LD_VAR 0 15
10316: PUSH
10317: LD_VAR 0 19
10321: PUSH
10322: LD_VAR 0 15
10326: ARRAY
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PPUSH
10332: LD_INT 3
10334: PPUSH
10335: CALL 49094 0 3
10339: ST_TO_ADDR
10340: GO 10271
10342: POP
10343: POP
// end ;
10344: GO 10137
10346: POP
10347: POP
// if vehiclesToAttackAmount <= offensiveReadyCounter then
10348: LD_VAR 0 10
10352: PUSH
10353: LD_VAR 0 28
10357: LESSEQUAL
10358: IFFALSE 10621
// begin for i := 1 to offensiveUnits do
10360: LD_ADDR_VAR 0 14
10364: PUSH
10365: DOUBLE
10366: LD_INT 1
10368: DEC
10369: ST_TO_ADDR
10370: LD_VAR 0 27
10374: PUSH
10375: FOR_TO
10376: IFFALSE 10619
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , offensiveUnits [ i ] ) ;
10378: LD_ADDR_VAR 0 29
10382: PUSH
10383: LD_INT 81
10385: PUSH
10386: LD_INT 1
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL_OW 69
10397: PPUSH
10398: LD_VAR 0 27
10402: PUSH
10403: LD_VAR 0 14
10407: ARRAY
10408: PPUSH
10409: CALL_OW 74
10413: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , offensiveUnits [ i ] ) ;
10414: LD_ADDR_VAR 0 30
10418: PUSH
10419: LD_INT 81
10421: PUSH
10422: LD_INT 1
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: LD_INT 2
10431: PUSH
10432: LD_INT 59
10434: PUSH
10435: EMPTY
10436: LIST
10437: PUSH
10438: LD_INT 21
10440: PUSH
10441: LD_INT 1
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PUSH
10448: LD_INT 21
10450: PUSH
10451: LD_INT 2
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: EMPTY
10469: LIST
10470: PPUSH
10471: CALL_OW 69
10475: PPUSH
10476: LD_VAR 0 27
10480: PUSH
10481: LD_VAR 0 14
10485: ARRAY
10486: PPUSH
10487: CALL_OW 74
10491: ST_TO_ADDR
// if GetDistUnits ( offensiveUnits [ i ] , target1 ) + 9 < GetDistUnits ( offensiveUnits [ i ] , target2 ) then
10492: LD_VAR 0 27
10496: PUSH
10497: LD_VAR 0 14
10501: ARRAY
10502: PPUSH
10503: LD_VAR 0 29
10507: PPUSH
10508: CALL_OW 296
10512: PUSH
10513: LD_INT 9
10515: PLUS
10516: PUSH
10517: LD_VAR 0 27
10521: PUSH
10522: LD_VAR 0 14
10526: ARRAY
10527: PPUSH
10528: LD_VAR 0 30
10532: PPUSH
10533: CALL_OW 296
10537: LESS
10538: IFFALSE 10562
// ComAttackUnit ( offensiveUnits [ i ] , target1 ) else
10540: LD_VAR 0 27
10544: PUSH
10545: LD_VAR 0 14
10549: ARRAY
10550: PPUSH
10551: LD_VAR 0 29
10555: PPUSH
10556: CALL_OW 115
10560: GO 10582
// ComAttackUnit ( offensiveUnits [ i ] , target2 ) ;
10562: LD_VAR 0 27
10566: PUSH
10567: LD_VAR 0 14
10571: ARRAY
10572: PPUSH
10573: LD_VAR 0 30
10577: PPUSH
10578: CALL_OW 115
// AddComAgressiveMove ( offensiveUnits [ i ] , GetX ( enemyUnits ) , GetY ( enemyUnits ) ) ;
10582: LD_VAR 0 27
10586: PUSH
10587: LD_VAR 0 14
10591: ARRAY
10592: PPUSH
10593: LD_VAR 0 50
10597: PPUSH
10598: CALL_OW 250
10602: PPUSH
10603: LD_VAR 0 50
10607: PPUSH
10608: CALL_OW 251
10612: PPUSH
10613: CALL_OW 174
// end ;
10617: GO 10375
10619: POP
10620: POP
// end ; end ;
10621: GO 10104
10623: POP
10624: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
10625: LD_ADDR_VAR 0 50
10629: PUSH
10630: LD_VAR 0 7
10634: PPUSH
10635: LD_INT 81
10637: PUSH
10638: LD_VAR 0 1
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: PPUSH
10647: CALL_OW 70
10651: PUSH
10652: FOR_IN
10653: IFFALSE 10881
// begin defenceUnits = [ ] ;
10655: LD_ADDR_VAR 0 31
10659: PUSH
10660: EMPTY
10661: ST_TO_ADDR
// for i := 1 to personel do
10662: LD_ADDR_VAR 0 14
10666: PUSH
10667: DOUBLE
10668: LD_INT 1
10670: DEC
10671: ST_TO_ADDR
10672: LD_VAR 0 19
10676: PUSH
10677: FOR_TO
10678: IFFALSE 10725
// if GetTag ( personel [ i ] ) = 3 then
10680: LD_VAR 0 19
10684: PUSH
10685: LD_VAR 0 14
10689: ARRAY
10690: PPUSH
10691: CALL_OW 110
10695: PUSH
10696: LD_INT 3
10698: EQUAL
10699: IFFALSE 10723
// defenceUnits = defenceUnits ^ personel [ i ] ;
10701: LD_ADDR_VAR 0 31
10705: PUSH
10706: LD_VAR 0 31
10710: PUSH
10711: LD_VAR 0 19
10715: PUSH
10716: LD_VAR 0 14
10720: ARRAY
10721: ADD
10722: ST_TO_ADDR
10723: GO 10677
10725: POP
10726: POP
// for i := 1 to vehicles do
10727: LD_ADDR_VAR 0 14
10731: PUSH
10732: DOUBLE
10733: LD_INT 1
10735: DEC
10736: ST_TO_ADDR
10737: LD_VAR 0 25
10741: PUSH
10742: FOR_TO
10743: IFFALSE 10798
// if GetTag ( vehicles [ i ] [ 1 ] ) = 3 then
10745: LD_VAR 0 25
10749: PUSH
10750: LD_VAR 0 14
10754: ARRAY
10755: PUSH
10756: LD_INT 1
10758: ARRAY
10759: PPUSH
10760: CALL_OW 110
10764: PUSH
10765: LD_INT 3
10767: EQUAL
10768: IFFALSE 10796
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
10770: LD_ADDR_VAR 0 31
10774: PUSH
10775: LD_VAR 0 31
10779: PUSH
10780: LD_VAR 0 25
10784: PUSH
10785: LD_VAR 0 14
10789: ARRAY
10790: PUSH
10791: LD_INT 1
10793: ARRAY
10794: ADD
10795: ST_TO_ADDR
10796: GO 10742
10798: POP
10799: POP
// ComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
10800: LD_VAR 0 31
10804: PPUSH
10805: LD_INT 3
10807: PUSH
10808: LD_INT 60
10810: PUSH
10811: EMPTY
10812: LIST
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PPUSH
10818: CALL_OW 72
10822: PPUSH
10823: LD_VAR 0 50
10827: PPUSH
10828: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , GetX ( enemyUnits ) , GetY ( enemyUnits ) ) ;
10832: LD_VAR 0 31
10836: PPUSH
10837: LD_INT 3
10839: PUSH
10840: LD_INT 60
10842: PUSH
10843: EMPTY
10844: LIST
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PPUSH
10850: CALL_OW 72
10854: PPUSH
10855: LD_VAR 0 50
10859: PPUSH
10860: CALL_OW 250
10864: PPUSH
10865: LD_VAR 0 50
10869: PPUSH
10870: CALL_OW 251
10874: PPUSH
10875: CALL_OW 174
// end ;
10879: GO 10652
10881: POP
10882: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
10883: LD_ADDR_VAR 0 45
10887: PUSH
10888: LD_INT 22
10890: PUSH
10891: LD_VAR 0 1
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: PUSH
10900: LD_INT 2
10902: PUSH
10903: LD_INT 30
10905: PUSH
10906: LD_INT 31
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: LD_INT 30
10915: PUSH
10916: LD_INT 32
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: PUSH
10923: LD_INT 30
10925: PUSH
10926: LD_INT 33
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PUSH
10933: LD_INT 30
10935: PUSH
10936: LD_INT 4
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: LD_INT 30
10945: PUSH
10946: LD_INT 5
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: PPUSH
10965: CALL_OW 69
10969: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
10970: LD_ADDR_VAR 0 46
10974: PUSH
10975: LD_INT 81
10977: PUSH
10978: LD_VAR 0 1
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PUSH
10987: LD_INT 21
10989: PUSH
10990: LD_INT 3
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: PUSH
10997: LD_INT 58
10999: PUSH
11000: EMPTY
11001: LIST
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: PPUSH
11008: CALL_OW 69
11012: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
11013: LD_VAR 0 45
11017: PUSH
11018: LD_VAR 0 46
11022: AND
11023: IFFALSE 11093
// for i in attackBuildings do
11025: LD_ADDR_VAR 0 14
11029: PUSH
11030: LD_VAR 0 45
11034: PUSH
11035: FOR_IN
11036: IFFALSE 11091
// for j in enemyBuildings do
11038: LD_ADDR_VAR 0 15
11042: PUSH
11043: LD_VAR 0 46
11047: PUSH
11048: FOR_IN
11049: IFFALSE 11087
// if GetDistUnits ( i , j ) < 12 then
11051: LD_VAR 0 14
11055: PPUSH
11056: LD_VAR 0 15
11060: PPUSH
11061: CALL_OW 296
11065: PUSH
11066: LD_INT 12
11068: LESS
11069: IFFALSE 11085
// ComAttackUnit ( i , j ) ;
11071: LD_VAR 0 14
11075: PPUSH
11076: LD_VAR 0 15
11080: PPUSH
11081: CALL_OW 115
11085: GO 11048
11087: POP
11088: POP
11089: GO 11035
11091: POP
11092: POP
// if canRebuild then
11093: LD_VAR 0 12
11097: IFFALSE 11766
// begin tmp = false ;
11099: LD_ADDR_VAR 0 16
11103: PUSH
11104: LD_INT 0
11106: ST_TO_ADDR
// unit = false ;
11107: LD_ADDR_VAR 0 18
11111: PUSH
11112: LD_INT 0
11114: ST_TO_ADDR
// for destroyedBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 250 ] ] ] ) do
11115: LD_ADDR_VAR 0 36
11119: PUSH
11120: LD_VAR 0 4
11124: PPUSH
11125: LD_INT 22
11127: PUSH
11128: LD_VAR 0 1
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 21
11139: PUSH
11140: LD_INT 3
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: LD_INT 3
11149: PUSH
11150: LD_INT 24
11152: PUSH
11153: LD_INT 250
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: LIST
11168: PPUSH
11169: CALL_OW 70
11173: PUSH
11174: FOR_IN
11175: IFFALSE 11277
// begin unit = destroyedBuilding ;
11177: LD_ADDR_VAR 0 18
11181: PUSH
11182: LD_VAR 0 36
11186: ST_TO_ADDR
// for i := 1 to destroyedBuildings / 4 do
11187: LD_ADDR_VAR 0 14
11191: PUSH
11192: DOUBLE
11193: LD_INT 1
11195: DEC
11196: ST_TO_ADDR
11197: LD_VAR 0 35
11201: PUSH
11202: LD_INT 4
11204: DIVREAL
11205: PUSH
11206: FOR_TO
11207: IFFALSE 11273
// if destroyedBuildings [ i + 1 ] = GetX ( destroyedBuilding ) and destroyedBuildings [ i + 2 ] = GetY ( destroyedBuilding ) then
11209: LD_VAR 0 35
11213: PUSH
11214: LD_VAR 0 14
11218: PUSH
11219: LD_INT 1
11221: PLUS
11222: ARRAY
11223: PUSH
11224: LD_VAR 0 36
11228: PPUSH
11229: CALL_OW 250
11233: EQUAL
11234: PUSH
11235: LD_VAR 0 35
11239: PUSH
11240: LD_VAR 0 14
11244: PUSH
11245: LD_INT 2
11247: PLUS
11248: ARRAY
11249: PUSH
11250: LD_VAR 0 36
11254: PPUSH
11255: CALL_OW 251
11259: EQUAL
11260: AND
11261: IFFALSE 11271
// tmp = true ;
11263: LD_ADDR_VAR 0 16
11267: PUSH
11268: LD_INT 1
11270: ST_TO_ADDR
11271: GO 11206
11273: POP
11274: POP
// end ;
11275: GO 11174
11277: POP
11278: POP
// if not tmp and unit then
11279: LD_VAR 0 16
11283: NOT
11284: PUSH
11285: LD_VAR 0 18
11289: AND
11290: IFFALSE 11550
// begin if GetBType ( unit ) = 1 then
11292: LD_VAR 0 18
11296: PPUSH
11297: CALL_OW 266
11301: PUSH
11302: LD_INT 1
11304: EQUAL
11305: IFFALSE 11359
// destroyedBuildings = destroyedBuildings ^ [ 0 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11307: LD_ADDR_VAR 0 35
11311: PUSH
11312: LD_VAR 0 35
11316: PUSH
11317: LD_INT 0
11319: PUSH
11320: LD_VAR 0 18
11324: PPUSH
11325: CALL_OW 250
11329: PUSH
11330: LD_VAR 0 18
11334: PPUSH
11335: CALL_OW 251
11339: PUSH
11340: LD_VAR 0 18
11344: PPUSH
11345: CALL_OW 254
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: ADD
11356: ST_TO_ADDR
11357: GO 11550
// if GetBType ( unit ) = 3 then
11359: LD_VAR 0 18
11363: PPUSH
11364: CALL_OW 266
11368: PUSH
11369: LD_INT 3
11371: EQUAL
11372: IFFALSE 11426
// destroyedBuildings = destroyedBuildings ^ [ 2 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11374: LD_ADDR_VAR 0 35
11378: PUSH
11379: LD_VAR 0 35
11383: PUSH
11384: LD_INT 2
11386: PUSH
11387: LD_VAR 0 18
11391: PPUSH
11392: CALL_OW 250
11396: PUSH
11397: LD_VAR 0 18
11401: PPUSH
11402: CALL_OW 251
11406: PUSH
11407: LD_VAR 0 18
11411: PPUSH
11412: CALL_OW 254
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: ADD
11423: ST_TO_ADDR
11424: GO 11550
// if GetBType ( unit ) = 5 then
11426: LD_VAR 0 18
11430: PPUSH
11431: CALL_OW 266
11435: PUSH
11436: LD_INT 5
11438: EQUAL
11439: IFFALSE 11493
// destroyedBuildings = destroyedBuildings ^ [ 4 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11441: LD_ADDR_VAR 0 35
11445: PUSH
11446: LD_VAR 0 35
11450: PUSH
11451: LD_INT 4
11453: PUSH
11454: LD_VAR 0 18
11458: PPUSH
11459: CALL_OW 250
11463: PUSH
11464: LD_VAR 0 18
11468: PPUSH
11469: CALL_OW 251
11473: PUSH
11474: LD_VAR 0 18
11478: PPUSH
11479: CALL_OW 254
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: ADD
11490: ST_TO_ADDR
11491: GO 11550
// destroyedBuildings = destroyedBuildings ^ [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ;
11493: LD_ADDR_VAR 0 35
11497: PUSH
11498: LD_VAR 0 35
11502: PUSH
11503: LD_VAR 0 18
11507: PPUSH
11508: CALL_OW 266
11512: PUSH
11513: LD_VAR 0 18
11517: PPUSH
11518: CALL_OW 250
11522: PUSH
11523: LD_VAR 0 18
11527: PPUSH
11528: CALL_OW 251
11532: PUSH
11533: LD_VAR 0 18
11537: PPUSH
11538: CALL_OW 254
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: ADD
11549: ST_TO_ADDR
// end ; for constructedBuilding in constructedBuildings do
11550: LD_ADDR_VAR 0 37
11554: PUSH
11555: LD_VAR 0 38
11559: PUSH
11560: FOR_IN
11561: IFFALSE 11764
// for i := 1 to destroyedBuildings / 4 do
11563: LD_ADDR_VAR 0 14
11567: PUSH
11568: DOUBLE
11569: LD_INT 1
11571: DEC
11572: ST_TO_ADDR
11573: LD_VAR 0 35
11577: PUSH
11578: LD_INT 4
11580: DIVREAL
11581: PUSH
11582: FOR_TO
11583: IFFALSE 11760
// if destroyedBuildings [ i + 1 ] = GetX ( constructedBuilding ) and destroyedBuildings [ i + 2 ] = GetY ( constructedBuilding ) and IsOK ( constructedBuilding ) then
11585: LD_VAR 0 35
11589: PUSH
11590: LD_VAR 0 14
11594: PUSH
11595: LD_INT 1
11597: PLUS
11598: ARRAY
11599: PUSH
11600: LD_VAR 0 37
11604: PPUSH
11605: CALL_OW 250
11609: EQUAL
11610: PUSH
11611: LD_VAR 0 35
11615: PUSH
11616: LD_VAR 0 14
11620: PUSH
11621: LD_INT 2
11623: PLUS
11624: ARRAY
11625: PUSH
11626: LD_VAR 0 37
11630: PPUSH
11631: CALL_OW 251
11635: EQUAL
11636: AND
11637: PUSH
11638: LD_VAR 0 37
11642: PPUSH
11643: CALL_OW 302
11647: AND
11648: IFFALSE 11758
// begin destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11650: LD_ADDR_VAR 0 35
11654: PUSH
11655: LD_VAR 0 35
11659: PPUSH
11660: LD_INT 1
11662: PPUSH
11663: CALL_OW 3
11667: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11668: LD_ADDR_VAR 0 35
11672: PUSH
11673: LD_VAR 0 35
11677: PPUSH
11678: LD_INT 1
11680: PPUSH
11681: CALL_OW 3
11685: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11686: LD_ADDR_VAR 0 35
11690: PUSH
11691: LD_VAR 0 35
11695: PPUSH
11696: LD_INT 1
11698: PPUSH
11699: CALL_OW 3
11703: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11704: LD_ADDR_VAR 0 35
11708: PUSH
11709: LD_VAR 0 35
11713: PPUSH
11714: LD_INT 1
11716: PPUSH
11717: CALL_OW 3
11721: ST_TO_ADDR
// if GetType ( constructedBuilding ) in [ b_bunker , b_turret ] then
11722: LD_VAR 0 37
11726: PPUSH
11727: CALL_OW 247
11731: PUSH
11732: LD_INT 32
11734: PUSH
11735: LD_INT 33
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: IN
11742: IFFALSE 11758
// AddComPlaceWeapon ( constructedBuilding , weapons ) ;
11744: LD_VAR 0 37
11748: PPUSH
11749: LD_VAR 0 32
11753: PPUSH
11754: CALL_OW 208
// end ;
11758: GO 11582
11760: POP
11761: POP
11762: GO 11560
11764: POP
11765: POP
// end ; wait ( 0 0$01 ) ;
11766: LD_INT 35
11768: PPUSH
11769: CALL_OW 67
// until not personel ;
11773: LD_VAR 0 19
11777: NOT
11778: IFFALSE 5471
// end ; end_of_file
11780: LD_VAR 0 13
11784: RET
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
11785: LD_INT 0
11787: PPUSH
11788: PPUSH
// if debugMode then
11789: LD_EXP 33
11793: IFFALSE 11810
// unit := NewCharacter ( ident ) ;
11795: LD_ADDR_VAR 0 5
11799: PUSH
11800: LD_VAR 0 1
11804: PPUSH
11805: CALL_OW 25
11809: ST_TO_ADDR
// if exist_mode and not debugMode then
11810: LD_VAR 0 2
11814: PUSH
11815: LD_EXP 33
11819: NOT
11820: AND
11821: IFFALSE 11846
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
11823: LD_ADDR_VAR 0 5
11827: PUSH
11828: LD_EXP 32
11832: PUSH
11833: LD_VAR 0 1
11837: STR
11838: PPUSH
11839: CALL_OW 34
11843: ST_TO_ADDR
11844: GO 11868
// if not debugMode then
11846: LD_EXP 33
11850: NOT
11851: IFFALSE 11868
// unit := NewCharacter ( ident ) ;
11853: LD_ADDR_VAR 0 5
11857: PUSH
11858: LD_VAR 0 1
11862: PPUSH
11863: CALL_OW 25
11867: ST_TO_ADDR
// if class then
11868: LD_VAR 0 3
11872: IFFALSE 11888
// SetClass ( unit , class ) ;
11874: LD_VAR 0 5
11878: PPUSH
11879: LD_VAR 0 3
11883: PPUSH
11884: CALL_OW 336
// result := unit ;
11888: LD_ADDR_VAR 0 4
11892: PUSH
11893: LD_VAR 0 5
11897: ST_TO_ADDR
// end ;
11898: LD_VAR 0 4
11902: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
11903: LD_INT 0
11905: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
11906: LD_VAR 0 1
11910: PPUSH
11911: CALL_OW 255
11915: PUSH
11916: LD_VAR 0 3
11920: EQUAL
11921: PUSH
11922: LD_VAR 0 1
11926: PPUSH
11927: CALL_OW 302
11931: AND
11932: IFFALSE 11954
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
11934: LD_VAR 0 1
11938: PPUSH
11939: LD_EXP 31
11943: PUSH
11944: LD_VAR 0 2
11948: STR
11949: PPUSH
11950: CALL_OW 38
// end ;
11954: LD_VAR 0 4
11958: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
11959: LD_INT 0
11961: PPUSH
11962: PPUSH
11963: PPUSH
// resultCharactersToSave = [ ] ;
11964: LD_ADDR_VAR 0 6
11968: PUSH
11969: EMPTY
11970: ST_TO_ADDR
// for unit in characters do
11971: LD_ADDR_VAR 0 5
11975: PUSH
11976: LD_VAR 0 1
11980: PUSH
11981: FOR_IN
11982: IFFALSE 12030
// if GetSide ( unit ) = side and IsOK ( unit ) then
11984: LD_VAR 0 5
11988: PPUSH
11989: CALL_OW 255
11993: PUSH
11994: LD_VAR 0 3
11998: EQUAL
11999: PUSH
12000: LD_VAR 0 5
12004: PPUSH
12005: CALL_OW 302
12009: AND
12010: IFFALSE 12028
// resultCharactersToSave = resultCharactersToSave ^ unit ;
12012: LD_ADDR_VAR 0 6
12016: PUSH
12017: LD_VAR 0 6
12021: PUSH
12022: LD_VAR 0 5
12026: ADD
12027: ST_TO_ADDR
12028: GO 11981
12030: POP
12031: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
12032: LD_VAR 0 6
12036: PPUSH
12037: LD_EXP 31
12041: PUSH
12042: LD_VAR 0 2
12046: STR
12047: PPUSH
12048: CALL_OW 38
// end ;
12052: LD_VAR 0 4
12056: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
12057: LD_INT 0
12059: PPUSH
12060: PPUSH
// for unit in units do
12061: LD_ADDR_VAR 0 5
12065: PUSH
12066: LD_VAR 0 1
12070: PUSH
12071: FOR_IN
12072: IFFALSE 12095
// PlaceUnitArea ( unit , area , spawnMode ) ;
12074: LD_VAR 0 5
12078: PPUSH
12079: LD_VAR 0 2
12083: PPUSH
12084: LD_VAR 0 3
12088: PPUSH
12089: CALL_OW 49
12093: GO 12071
12095: POP
12096: POP
// end ;
12097: LD_VAR 0 4
12101: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
12102: LD_INT 0
12104: PPUSH
12105: PPUSH
12106: PPUSH
12107: PPUSH
// units = characters ;
12108: LD_ADDR_VAR 0 9
12112: PUSH
12113: LD_VAR 0 1
12117: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod , Kirilenkova ] ;
12118: LD_ADDR_VAR 0 9
12122: PUSH
12123: LD_VAR 0 9
12127: PUSH
12128: LD_EXP 39
12132: PUSH
12133: LD_EXP 40
12137: PUSH
12138: LD_EXP 41
12142: PUSH
12143: LD_EXP 42
12147: PUSH
12148: LD_EXP 43
12152: PUSH
12153: LD_EXP 44
12157: PUSH
12158: LD_EXP 45
12162: PUSH
12163: LD_EXP 46
12167: PUSH
12168: LD_EXP 51
12172: PUSH
12173: LD_EXP 48
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: DIFF
12190: ST_TO_ADDR
// if not units and not canTalkHero then
12191: LD_VAR 0 9
12195: NOT
12196: PUSH
12197: LD_VAR 0 5
12201: NOT
12202: AND
12203: IFFALSE 12207
// exit ;
12205: GO 12380
// if not units then
12207: LD_VAR 0 9
12211: NOT
12212: IFFALSE 12233
// units = characters diff [ Burlak ] ;
12214: LD_ADDR_VAR 0 9
12218: PUSH
12219: LD_VAR 0 1
12223: PUSH
12224: LD_EXP 39
12228: PUSH
12229: EMPTY
12230: LIST
12231: DIFF
12232: ST_TO_ADDR
// if not units and canTalkHero then
12233: LD_VAR 0 9
12237: NOT
12238: PUSH
12239: LD_VAR 0 5
12243: AND
12244: IFFALSE 12248
// exit ;
12246: GO 12380
// speaker := units [ rand ( 1 , units ) ] ;
12248: LD_ADDR_VAR 0 8
12252: PUSH
12253: LD_VAR 0 9
12257: PUSH
12258: LD_INT 1
12260: PPUSH
12261: LD_VAR 0 9
12265: PPUSH
12266: CALL_OW 12
12270: ARRAY
12271: ST_TO_ADDR
// if radio then
12272: LD_VAR 0 4
12276: IFFALSE 12325
// begin if GetSex ( speaker ) = sex_male then
12278: LD_VAR 0 8
12282: PPUSH
12283: CALL_OW 258
12287: PUSH
12288: LD_INT 1
12290: EQUAL
12291: IFFALSE 12309
// SayRadio ( speaker , dialogMID ) else
12293: LD_VAR 0 8
12297: PPUSH
12298: LD_VAR 0 2
12302: PPUSH
12303: CALL_OW 94
12307: GO 12323
// SayRadio ( speaker , dialogFID ) ;
12309: LD_VAR 0 8
12313: PPUSH
12314: LD_VAR 0 3
12318: PPUSH
12319: CALL_OW 94
// end else
12323: GO 12370
// begin if GetSex ( speaker ) = sex_male then
12325: LD_VAR 0 8
12329: PPUSH
12330: CALL_OW 258
12334: PUSH
12335: LD_INT 1
12337: EQUAL
12338: IFFALSE 12356
// Say ( speaker , dialogMID ) else
12340: LD_VAR 0 8
12344: PPUSH
12345: LD_VAR 0 2
12349: PPUSH
12350: CALL_OW 88
12354: GO 12370
// Say ( speaker , dialogFID ) ;
12356: LD_VAR 0 8
12360: PPUSH
12361: LD_VAR 0 3
12365: PPUSH
12366: CALL_OW 88
// end ; result := speaker ;
12370: LD_ADDR_VAR 0 6
12374: PUSH
12375: LD_VAR 0 8
12379: ST_TO_ADDR
// end ;
12380: LD_VAR 0 6
12384: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
12385: LD_INT 0
12387: PPUSH
12388: PPUSH
// dir := GetDir ( bunker ) - 3 ;
12389: LD_ADDR_VAR 0 4
12393: PUSH
12394: LD_VAR 0 2
12398: PPUSH
12399: CALL_OW 254
12403: PUSH
12404: LD_INT 3
12406: MINUS
12407: ST_TO_ADDR
// if dir < 0 then
12408: LD_VAR 0 4
12412: PUSH
12413: LD_INT 0
12415: LESS
12416: IFFALSE 12432
// dir := 6 + dir ;
12418: LD_ADDR_VAR 0 4
12422: PUSH
12423: LD_INT 6
12425: PUSH
12426: LD_VAR 0 4
12430: PLUS
12431: ST_TO_ADDR
// SetDir ( un , dir ) ;
12432: LD_VAR 0 1
12436: PPUSH
12437: LD_VAR 0 4
12441: PPUSH
12442: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
12446: LD_VAR 0 1
12450: PPUSH
12451: LD_VAR 0 2
12455: PPUSH
12456: CALL_OW 52
// result = un ;
12460: LD_ADDR_VAR 0 3
12464: PUSH
12465: LD_VAR 0 1
12469: ST_TO_ADDR
// end ;
12470: LD_VAR 0 3
12474: RET
// export function AddComCaptureBuilding ( engs , building ) ; var eng ; begin
12475: LD_INT 0
12477: PPUSH
12478: PPUSH
// for eng in engs do
12479: LD_ADDR_VAR 0 4
12483: PUSH
12484: LD_VAR 0 1
12488: PUSH
12489: FOR_IN
12490: IFFALSE 12607
// if GetClass ( eng ) = class_engineer and IsOK ( eng ) and building and not GetSide ( building ) = GetSide ( eng ) then
12492: LD_VAR 0 4
12496: PPUSH
12497: CALL_OW 257
12501: PUSH
12502: LD_INT 2
12504: EQUAL
12505: PUSH
12506: LD_VAR 0 4
12510: PPUSH
12511: CALL_OW 302
12515: AND
12516: PUSH
12517: LD_VAR 0 2
12521: AND
12522: PUSH
12523: LD_VAR 0 2
12527: PPUSH
12528: CALL_OW 255
12532: PUSH
12533: LD_VAR 0 4
12537: PPUSH
12538: CALL_OW 255
12542: EQUAL
12543: NOT
12544: AND
12545: IFFALSE 12605
// AddTaskList ( eng , [ [ e , GetX ( building ) , GetY ( building ) , building , 0 , 0 , 0 ] ] ) end ;
12547: LD_VAR 0 4
12551: PPUSH
12552: LD_STRING e
12554: PUSH
12555: LD_VAR 0 2
12559: PPUSH
12560: CALL_OW 250
12564: PUSH
12565: LD_VAR 0 2
12569: PPUSH
12570: CALL_OW 251
12574: PUSH
12575: LD_VAR 0 2
12579: PUSH
12580: LD_INT 0
12582: PUSH
12583: LD_INT 0
12585: PUSH
12586: LD_INT 0
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: PUSH
12598: EMPTY
12599: LIST
12600: PPUSH
12601: CALL_OW 447
12605: GO 12489
12607: POP
12608: POP
12609: LD_VAR 0 3
12613: RET
// export function Delete2D ( tab , firstIndex , secondIndex ) ; var i , list , tabPom ; begin
12614: LD_INT 0
12616: PPUSH
12617: PPUSH
12618: PPUSH
12619: PPUSH
// tabPom := Delete ( tab [ firstIndex ] , secondIndex ) ;
12620: LD_ADDR_VAR 0 7
12624: PUSH
12625: LD_VAR 0 1
12629: PUSH
12630: LD_VAR 0 2
12634: ARRAY
12635: PPUSH
12636: LD_VAR 0 3
12640: PPUSH
12641: CALL_OW 3
12645: ST_TO_ADDR
// tab := Replace ( tab , firstIndex , tabPom ) ;
12646: LD_ADDR_VAR 0 1
12650: PUSH
12651: LD_VAR 0 1
12655: PPUSH
12656: LD_VAR 0 2
12660: PPUSH
12661: LD_VAR 0 7
12665: PPUSH
12666: CALL_OW 1
12670: ST_TO_ADDR
// result := tab ;
12671: LD_ADDR_VAR 0 4
12675: PUSH
12676: LD_VAR 0 1
12680: ST_TO_ADDR
// end ;
12681: LD_VAR 0 4
12685: RET
// export function Nef_PrepareBase ( base_dep , area , name , skill , sources , nation , personel ) ; var i , j , d , b , f , x , un , base , side , buildings , tmp ; begin
12686: LD_INT 0
12688: PPUSH
12689: PPUSH
12690: PPUSH
12691: PPUSH
12692: PPUSH
12693: PPUSH
12694: PPUSH
12695: PPUSH
12696: PPUSH
12697: PPUSH
12698: PPUSH
12699: PPUSH
// result := [ ] ;
12700: LD_ADDR_VAR 0 8
12704: PUSH
12705: EMPTY
12706: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12707: LD_VAR 0 1
12711: PPUSH
12712: CALL_OW 266
12716: PUSH
12717: LD_INT 0
12719: PUSH
12720: LD_INT 1
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: IN
12727: NOT
12728: IFFALSE 12732
// exit ;
12730: GO 14410
// if name then
12732: LD_VAR 0 3
12736: IFFALSE 12752
// SetBName ( base_dep , name ) ;
12738: LD_VAR 0 1
12742: PPUSH
12743: LD_VAR 0 3
12747: PPUSH
12748: CALL_OW 500
// base := GetBase ( base_dep ) ;
12752: LD_ADDR_VAR 0 16
12756: PUSH
12757: LD_VAR 0 1
12761: PPUSH
12762: CALL_OW 274
12766: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12767: LD_ADDR_VAR 0 17
12771: PUSH
12772: LD_VAR 0 1
12776: PPUSH
12777: CALL_OW 255
12781: ST_TO_ADDR
// if sources then
12782: LD_VAR 0 5
12786: IFFALSE 12833
// for i = 1 to 3 do
12788: LD_ADDR_VAR 0 9
12792: PUSH
12793: DOUBLE
12794: LD_INT 1
12796: DEC
12797: ST_TO_ADDR
12798: LD_INT 3
12800: PUSH
12801: FOR_TO
12802: IFFALSE 12831
// AddResourceType ( base , i , sources [ i ] ) ;
12804: LD_VAR 0 16
12808: PPUSH
12809: LD_VAR 0 9
12813: PPUSH
12814: LD_VAR 0 5
12818: PUSH
12819: LD_VAR 0 9
12823: ARRAY
12824: PPUSH
12825: CALL_OW 276
12829: GO 12801
12831: POP
12832: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12833: LD_ADDR_VAR 0 18
12837: PUSH
12838: LD_VAR 0 16
12842: PPUSH
12843: LD_VAR 0 2
12847: PPUSH
12848: LD_INT 1
12850: PPUSH
12851: CALL 51849 0 3
12855: ST_TO_ADDR
// InitHc ;
12856: CALL_OW 19
// InitUc ;
12860: CALL_OW 18
// uc_side := side ;
12864: LD_ADDR_OWVAR 20
12868: PUSH
12869: LD_VAR 0 17
12873: ST_TO_ADDR
// uc_nation := nation ;
12874: LD_ADDR_OWVAR 21
12878: PUSH
12879: LD_VAR 0 6
12883: ST_TO_ADDR
// if buildings then
12884: LD_VAR 0 18
12888: IFFALSE 14269
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12890: LD_ADDR_VAR 0 19
12894: PUSH
12895: LD_VAR 0 18
12899: PPUSH
12900: LD_INT 2
12902: PUSH
12903: LD_INT 30
12905: PUSH
12906: LD_INT 29
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PUSH
12913: LD_INT 30
12915: PUSH
12916: LD_INT 30
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: LIST
12927: PPUSH
12928: CALL_OW 72
12932: ST_TO_ADDR
// if tmp then
12933: LD_VAR 0 19
12937: IFFALSE 12985
// for i in tmp do
12939: LD_ADDR_VAR 0 9
12943: PUSH
12944: LD_VAR 0 19
12948: PUSH
12949: FOR_IN
12950: IFFALSE 12983
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12952: LD_VAR 0 9
12956: PPUSH
12957: CALL_OW 250
12961: PPUSH
12962: LD_VAR 0 9
12966: PPUSH
12967: CALL_OW 251
12971: PPUSH
12972: LD_VAR 0 17
12976: PPUSH
12977: CALL_OW 441
12981: GO 12949
12983: POP
12984: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12985: LD_VAR 0 18
12989: PPUSH
12990: LD_INT 2
12992: PUSH
12993: LD_INT 30
12995: PUSH
12996: LD_INT 31
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: PUSH
13003: LD_INT 30
13005: PUSH
13006: LD_INT 32
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: PUSH
13013: LD_INT 30
13015: PUSH
13016: LD_INT 33
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: PPUSH
13029: CALL_OW 72
13033: IFFALSE 13132
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13035: LD_ADDR_VAR 0 9
13039: PUSH
13040: LD_VAR 0 18
13044: PPUSH
13045: LD_INT 2
13047: PUSH
13048: LD_INT 30
13050: PUSH
13051: LD_INT 31
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PUSH
13058: LD_INT 30
13060: PUSH
13061: LD_INT 32
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: LD_INT 30
13070: PUSH
13071: LD_INT 33
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: PPUSH
13084: CALL_OW 72
13088: PUSH
13089: FOR_IN
13090: IFFALSE 13130
// begin if not GetBWeapon ( i ) then
13092: LD_VAR 0 9
13096: PPUSH
13097: CALL_OW 269
13101: NOT
13102: IFFALSE 13128
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13104: LD_VAR 0 9
13108: PPUSH
13109: LD_VAR 0 9
13113: PPUSH
13114: LD_VAR 0 2
13118: PPUSH
13119: CALL 54111 0 2
13123: PPUSH
13124: CALL_OW 431
// end ;
13128: GO 13089
13130: POP
13131: POP
// end ; for i = 1 to personel do
13132: LD_ADDR_VAR 0 9
13136: PUSH
13137: DOUBLE
13138: LD_INT 1
13140: DEC
13141: ST_TO_ADDR
13142: LD_VAR 0 7
13146: PUSH
13147: FOR_TO
13148: IFFALSE 14249
// begin if i > 4 then
13150: LD_VAR 0 9
13154: PUSH
13155: LD_INT 4
13157: GREATER
13158: IFFALSE 13162
// break ;
13160: GO 14249
// case i of 1 :
13162: LD_VAR 0 9
13166: PUSH
13167: LD_INT 1
13169: DOUBLE
13170: EQUAL
13171: IFTRUE 13175
13173: GO 13266
13175: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13176: LD_ADDR_VAR 0 13
13180: PUSH
13181: LD_VAR 0 18
13185: PPUSH
13186: LD_INT 22
13188: PUSH
13189: LD_VAR 0 17
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 58
13200: PUSH
13201: EMPTY
13202: LIST
13203: PUSH
13204: LD_INT 2
13206: PUSH
13207: LD_INT 30
13209: PUSH
13210: LD_INT 31
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: PUSH
13217: LD_INT 30
13219: PUSH
13220: LD_INT 32
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: PUSH
13227: LD_INT 30
13229: PUSH
13230: LD_INT 4
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PUSH
13237: LD_INT 30
13239: PUSH
13240: LD_INT 5
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: LIST
13258: PPUSH
13259: CALL_OW 72
13263: ST_TO_ADDR
13264: GO 13499
13266: LD_INT 2
13268: DOUBLE
13269: EQUAL
13270: IFTRUE 13274
13272: GO 13336
13274: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13275: LD_ADDR_VAR 0 13
13279: PUSH
13280: LD_VAR 0 18
13284: PPUSH
13285: LD_INT 22
13287: PUSH
13288: LD_VAR 0 17
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: LD_INT 2
13299: PUSH
13300: LD_INT 30
13302: PUSH
13303: LD_INT 0
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PUSH
13310: LD_INT 30
13312: PUSH
13313: LD_INT 1
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: LIST
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: PPUSH
13329: CALL_OW 72
13333: ST_TO_ADDR
13334: GO 13499
13336: LD_INT 3
13338: DOUBLE
13339: EQUAL
13340: IFTRUE 13344
13342: GO 13417
13344: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_control_tower ] , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13345: LD_ADDR_VAR 0 13
13349: PUSH
13350: LD_VAR 0 18
13354: PPUSH
13355: LD_INT 22
13357: PUSH
13358: LD_VAR 0 17
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: LD_INT 2
13369: PUSH
13370: LD_INT 30
13372: PUSH
13373: LD_INT 36
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PUSH
13380: LD_INT 30
13382: PUSH
13383: LD_INT 2
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: PUSH
13390: LD_INT 30
13392: PUSH
13393: LD_INT 3
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 72
13414: ST_TO_ADDR
13415: GO 13499
13417: LD_INT 4
13419: DOUBLE
13420: EQUAL
13421: IFTRUE 13425
13423: GO 13498
13425: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13426: LD_ADDR_VAR 0 13
13430: PUSH
13431: LD_VAR 0 18
13435: PPUSH
13436: LD_INT 22
13438: PUSH
13439: LD_VAR 0 17
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 2
13450: PUSH
13451: LD_INT 30
13453: PUSH
13454: LD_INT 6
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: PUSH
13461: LD_INT 30
13463: PUSH
13464: LD_INT 7
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PUSH
13471: LD_INT 30
13473: PUSH
13474: LD_INT 8
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PPUSH
13491: CALL_OW 72
13495: ST_TO_ADDR
13496: GO 13499
13498: POP
// if i = 1 then
13499: LD_VAR 0 9
13503: PUSH
13504: LD_INT 1
13506: EQUAL
13507: IFFALSE 13625
// begin tmp := [ ] ;
13509: LD_ADDR_VAR 0 19
13513: PUSH
13514: EMPTY
13515: ST_TO_ADDR
// for j in f do
13516: LD_ADDR_VAR 0 10
13520: PUSH
13521: LD_VAR 0 13
13525: PUSH
13526: FOR_IN
13527: IFFALSE 13607
// if GetBType ( j ) in [ b_breastwork , b_bunker ] then
13529: LD_VAR 0 10
13533: PPUSH
13534: CALL_OW 266
13538: PUSH
13539: LD_INT 31
13541: PUSH
13542: LD_INT 32
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: IN
13549: IFFALSE 13576
// tmp := Insert ( tmp , 1 , j ) else
13551: LD_ADDR_VAR 0 19
13555: PUSH
13556: LD_VAR 0 19
13560: PPUSH
13561: LD_INT 1
13563: PPUSH
13564: LD_VAR 0 10
13568: PPUSH
13569: CALL_OW 2
13573: ST_TO_ADDR
13574: GO 13605
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13576: LD_ADDR_VAR 0 19
13580: PUSH
13581: LD_VAR 0 19
13585: PPUSH
13586: LD_VAR 0 19
13590: PUSH
13591: LD_INT 1
13593: PLUS
13594: PPUSH
13595: LD_VAR 0 10
13599: PPUSH
13600: CALL_OW 2
13604: ST_TO_ADDR
13605: GO 13526
13607: POP
13608: POP
// if tmp then
13609: LD_VAR 0 19
13613: IFFALSE 13625
// f := tmp ;
13615: LD_ADDR_VAR 0 13
13619: PUSH
13620: LD_VAR 0 19
13624: ST_TO_ADDR
// end ; x := personel [ i ] ;
13625: LD_ADDR_VAR 0 14
13629: PUSH
13630: LD_VAR 0 7
13634: PUSH
13635: LD_VAR 0 9
13639: ARRAY
13640: ST_TO_ADDR
// if x = - 1 then
13641: LD_VAR 0 14
13645: PUSH
13646: LD_INT 1
13648: NEG
13649: EQUAL
13650: IFFALSE 13844
// begin for j in f do
13652: LD_ADDR_VAR 0 10
13656: PUSH
13657: LD_VAR 0 13
13661: PUSH
13662: FOR_IN
13663: IFFALSE 13840
// repeat InitHc ;
13665: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13669: LD_VAR 0 10
13673: PPUSH
13674: CALL_OW 266
13678: PUSH
13679: LD_INT 5
13681: EQUAL
13682: IFFALSE 13737
// begin if UnitsInside ( j ) < 3 then
13684: LD_VAR 0 10
13688: PPUSH
13689: CALL_OW 313
13693: PUSH
13694: LD_INT 3
13696: LESS
13697: IFFALSE 13718
// PrepareHuman ( false , i , skill ) else
13699: LD_INT 0
13701: PPUSH
13702: LD_VAR 0 9
13706: PPUSH
13707: LD_VAR 0 4
13711: PPUSH
13712: CALL_OW 380
13716: GO 13735
// PrepareHuman ( false , i , skill ) ;
13718: LD_INT 0
13720: PPUSH
13721: LD_VAR 0 9
13725: PPUSH
13726: LD_VAR 0 4
13730: PPUSH
13731: CALL_OW 380
// end else
13735: GO 13754
// PrepareHuman ( false , i , skill ) ;
13737: LD_INT 0
13739: PPUSH
13740: LD_VAR 0 9
13744: PPUSH
13745: LD_VAR 0 4
13749: PPUSH
13750: CALL_OW 380
// un := CreateHuman ;
13754: LD_ADDR_VAR 0 15
13758: PUSH
13759: CALL_OW 44
13763: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13764: LD_ADDR_VAR 0 8
13768: PUSH
13769: LD_VAR 0 8
13773: PPUSH
13774: LD_INT 1
13776: PPUSH
13777: LD_VAR 0 15
13781: PPUSH
13782: CALL_OW 2
13786: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13787: LD_VAR 0 15
13791: PPUSH
13792: LD_VAR 0 10
13796: PPUSH
13797: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13801: LD_VAR 0 10
13805: PPUSH
13806: CALL_OW 313
13810: PUSH
13811: LD_INT 6
13813: EQUAL
13814: PUSH
13815: LD_VAR 0 10
13819: PPUSH
13820: CALL_OW 266
13824: PUSH
13825: LD_INT 32
13827: PUSH
13828: LD_INT 31
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: IN
13835: OR
13836: IFFALSE 13665
13838: GO 13662
13840: POP
13841: POP
// end else
13842: GO 14247
// for j = 1 to x do
13844: LD_ADDR_VAR 0 10
13848: PUSH
13849: DOUBLE
13850: LD_INT 1
13852: DEC
13853: ST_TO_ADDR
13854: LD_VAR 0 14
13858: PUSH
13859: FOR_TO
13860: IFFALSE 14245
// begin InitHc ;
13862: CALL_OW 19
// if not f then
13866: LD_VAR 0 13
13870: NOT
13871: IFFALSE 13960
// begin PrepareHuman ( false , i , skill ) ;
13873: LD_INT 0
13875: PPUSH
13876: LD_VAR 0 9
13880: PPUSH
13881: LD_VAR 0 4
13885: PPUSH
13886: CALL_OW 380
// un := CreateHuman ;
13890: LD_ADDR_VAR 0 15
13894: PUSH
13895: CALL_OW 44
13899: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13900: LD_ADDR_VAR 0 8
13904: PUSH
13905: LD_VAR 0 8
13909: PPUSH
13910: LD_INT 1
13912: PPUSH
13913: LD_VAR 0 15
13917: PPUSH
13918: CALL_OW 2
13922: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13923: LD_VAR 0 15
13927: PPUSH
13928: LD_VAR 0 1
13932: PPUSH
13933: CALL_OW 250
13937: PPUSH
13938: LD_VAR 0 1
13942: PPUSH
13943: CALL_OW 251
13947: PPUSH
13948: LD_INT 10
13950: PPUSH
13951: LD_INT 0
13953: PPUSH
13954: CALL_OW 50
// continue ;
13958: GO 13859
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 3 and GetBType ( f [ 1 ] ) = b_control_tower ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13960: LD_VAR 0 13
13964: PUSH
13965: LD_INT 1
13967: ARRAY
13968: PPUSH
13969: CALL_OW 313
13973: PUSH
13974: LD_VAR 0 13
13978: PUSH
13979: LD_INT 1
13981: ARRAY
13982: PPUSH
13983: CALL_OW 266
13987: PUSH
13988: LD_INT 32
13990: PUSH
13991: LD_INT 31
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: IN
13998: AND
13999: PUSH
14000: LD_VAR 0 13
14004: PUSH
14005: LD_INT 1
14007: ARRAY
14008: PPUSH
14009: CALL_OW 313
14013: PUSH
14014: LD_INT 3
14016: EQUAL
14017: PUSH
14018: LD_VAR 0 13
14022: PUSH
14023: LD_INT 1
14025: ARRAY
14026: PPUSH
14027: CALL_OW 266
14031: PUSH
14032: LD_INT 36
14034: EQUAL
14035: AND
14036: OR
14037: PUSH
14038: LD_VAR 0 13
14042: PUSH
14043: LD_INT 1
14045: ARRAY
14046: PPUSH
14047: CALL_OW 313
14051: PUSH
14052: LD_INT 6
14054: EQUAL
14055: OR
14056: IFFALSE 14076
// f := Delete ( f , 1 ) ;
14058: LD_ADDR_VAR 0 13
14062: PUSH
14063: LD_VAR 0 13
14067: PPUSH
14068: LD_INT 1
14070: PPUSH
14071: CALL_OW 3
14075: ST_TO_ADDR
// if not f then
14076: LD_VAR 0 13
14080: NOT
14081: IFFALSE 14099
// begin x := x + 2 ;
14083: LD_ADDR_VAR 0 14
14087: PUSH
14088: LD_VAR 0 14
14092: PUSH
14093: LD_INT 2
14095: PLUS
14096: ST_TO_ADDR
// continue ;
14097: GO 13859
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14099: LD_VAR 0 13
14103: PUSH
14104: LD_INT 1
14106: ARRAY
14107: PPUSH
14108: CALL_OW 266
14112: PUSH
14113: LD_INT 5
14115: EQUAL
14116: IFFALSE 14175
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14118: LD_VAR 0 13
14122: PUSH
14123: LD_INT 1
14125: ARRAY
14126: PPUSH
14127: CALL_OW 313
14131: PUSH
14132: LD_INT 3
14134: LESS
14135: IFFALSE 14156
// PrepareHuman ( false , i , skill ) else
14137: LD_INT 0
14139: PPUSH
14140: LD_VAR 0 9
14144: PPUSH
14145: LD_VAR 0 4
14149: PPUSH
14150: CALL_OW 380
14154: GO 14173
// PrepareHuman ( false , i , skill ) ;
14156: LD_INT 0
14158: PPUSH
14159: LD_VAR 0 9
14163: PPUSH
14164: LD_VAR 0 4
14168: PPUSH
14169: CALL_OW 380
// end else
14173: GO 14192
// PrepareHuman ( false , i , skill ) ;
14175: LD_INT 0
14177: PPUSH
14178: LD_VAR 0 9
14182: PPUSH
14183: LD_VAR 0 4
14187: PPUSH
14188: CALL_OW 380
// un := CreateHuman ;
14192: LD_ADDR_VAR 0 15
14196: PUSH
14197: CALL_OW 44
14201: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14202: LD_ADDR_VAR 0 8
14206: PUSH
14207: LD_VAR 0 8
14211: PPUSH
14212: LD_INT 1
14214: PPUSH
14215: LD_VAR 0 15
14219: PPUSH
14220: CALL_OW 2
14224: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14225: LD_VAR 0 15
14229: PPUSH
14230: LD_VAR 0 13
14234: PUSH
14235: LD_INT 1
14237: ARRAY
14238: PPUSH
14239: CALL_OW 52
// end ;
14243: GO 13859
14245: POP
14246: POP
// end ;
14247: GO 13147
14249: POP
14250: POP
// result := result ^ buildings ;
14251: LD_ADDR_VAR 0 8
14255: PUSH
14256: LD_VAR 0 8
14260: PUSH
14261: LD_VAR 0 18
14265: ADD
14266: ST_TO_ADDR
// end else
14267: GO 14410
// begin for i = 1 to personel do
14269: LD_ADDR_VAR 0 9
14273: PUSH
14274: DOUBLE
14275: LD_INT 1
14277: DEC
14278: ST_TO_ADDR
14279: LD_VAR 0 7
14283: PUSH
14284: FOR_TO
14285: IFFALSE 14408
// begin if i > 4 then
14287: LD_VAR 0 9
14291: PUSH
14292: LD_INT 4
14294: GREATER
14295: IFFALSE 14299
// break ;
14297: GO 14408
// x := personel [ i ] ;
14299: LD_ADDR_VAR 0 14
14303: PUSH
14304: LD_VAR 0 7
14308: PUSH
14309: LD_VAR 0 9
14313: ARRAY
14314: ST_TO_ADDR
// if x = - 1 then
14315: LD_VAR 0 14
14319: PUSH
14320: LD_INT 1
14322: NEG
14323: EQUAL
14324: IFFALSE 14328
// continue ;
14326: GO 14284
// PrepareHuman ( false , i , skill ) ;
14328: LD_INT 0
14330: PPUSH
14331: LD_VAR 0 9
14335: PPUSH
14336: LD_VAR 0 4
14340: PPUSH
14341: CALL_OW 380
// un := CreateHuman ;
14345: LD_ADDR_VAR 0 15
14349: PUSH
14350: CALL_OW 44
14354: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14355: LD_VAR 0 15
14359: PPUSH
14360: LD_VAR 0 1
14364: PPUSH
14365: CALL_OW 250
14369: PPUSH
14370: LD_VAR 0 1
14374: PPUSH
14375: CALL_OW 251
14379: PPUSH
14380: LD_INT 10
14382: PPUSH
14383: LD_INT 0
14385: PPUSH
14386: CALL_OW 50
// result := result ^ un ;
14390: LD_ADDR_VAR 0 8
14394: PUSH
14395: LD_VAR 0 8
14399: PUSH
14400: LD_VAR 0 15
14404: ADD
14405: ST_TO_ADDR
// end ;
14406: GO 14284
14408: POP
14409: POP
// end ; end ;
14410: LD_VAR 0 8
14414: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
14415: LD_INT 0
14417: PPUSH
14418: PPUSH
14419: PPUSH
14420: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
14421: LD_ADDR_VAR 0 6
14425: PUSH
14426: LD_INT 34
14428: PUSH
14429: LD_INT 71
14431: PUSH
14432: LD_INT 70
14434: PUSH
14435: LD_INT 69
14437: PUSH
14438: LD_INT 39
14440: PUSH
14441: LD_INT 31
14443: PUSH
14444: LD_INT 14
14446: PUSH
14447: LD_INT 10
14449: PUSH
14450: LD_INT 40
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: ST_TO_ADDR
// resultWeapons = [ ] ;
14464: LD_ADDR_VAR 0 5
14468: PUSH
14469: EMPTY
14470: ST_TO_ADDR
// for i := 1 to weaponTechs do
14471: LD_ADDR_VAR 0 4
14475: PUSH
14476: DOUBLE
14477: LD_INT 1
14479: DEC
14480: ST_TO_ADDR
14481: LD_VAR 0 6
14485: PUSH
14486: FOR_TO
14487: IFFALSE 14674
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
14489: LD_VAR 0 6
14493: PUSH
14494: LD_VAR 0 4
14498: ARRAY
14499: PPUSH
14500: LD_VAR 0 2
14504: PPUSH
14505: CALL_OW 482
14509: PUSH
14510: LD_VAR 0 6
14514: PUSH
14515: LD_VAR 0 4
14519: ARRAY
14520: PPUSH
14521: LD_VAR 0 1
14525: PPUSH
14526: CALL_OW 321
14530: PUSH
14531: LD_INT 2
14533: EQUAL
14534: AND
14535: IFFALSE 14672
// case nation of nation_american :
14537: LD_VAR 0 2
14541: PUSH
14542: LD_INT 1
14544: DOUBLE
14545: EQUAL
14546: IFTRUE 14550
14548: GO 14585
14550: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
14551: LD_ADDR_VAR 0 5
14555: PUSH
14556: LD_VAR 0 5
14560: PUSH
14561: LD_VAR 0 6
14565: PUSH
14566: LD_VAR 0 4
14570: ARRAY
14571: PPUSH
14572: LD_VAR 0 2
14576: PPUSH
14577: CALL 14691 0 2
14581: ADD
14582: ST_TO_ADDR
14583: GO 14672
14585: LD_INT 2
14587: DOUBLE
14588: EQUAL
14589: IFTRUE 14593
14591: GO 14628
14593: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
14594: LD_ADDR_VAR 0 5
14598: PUSH
14599: LD_VAR 0 5
14603: PUSH
14604: LD_VAR 0 6
14608: PUSH
14609: LD_VAR 0 4
14613: ARRAY
14614: PPUSH
14615: LD_VAR 0 2
14619: PPUSH
14620: CALL 14691 0 2
14624: ADD
14625: ST_TO_ADDR
14626: GO 14672
14628: LD_INT 3
14630: DOUBLE
14631: EQUAL
14632: IFTRUE 14636
14634: GO 14671
14636: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
14637: LD_ADDR_VAR 0 5
14641: PUSH
14642: LD_VAR 0 5
14646: PUSH
14647: LD_VAR 0 6
14651: PUSH
14652: LD_VAR 0 4
14656: ARRAY
14657: PPUSH
14658: LD_VAR 0 2
14662: PPUSH
14663: CALL 14691 0 2
14667: ADD
14668: ST_TO_ADDR
14669: GO 14672
14671: POP
// end ;
14672: GO 14486
14674: POP
14675: POP
// result = resultWeapons ;
14676: LD_ADDR_VAR 0 3
14680: PUSH
14681: LD_VAR 0 5
14685: ST_TO_ADDR
// end ;
14686: LD_VAR 0 3
14690: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
14691: LD_INT 0
14693: PPUSH
// case tech of tech_AdvMet :
14694: LD_VAR 0 1
14698: PUSH
14699: LD_INT 34
14701: DOUBLE
14702: EQUAL
14703: IFTRUE 14707
14705: GO 14735
14707: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
14708: LD_ADDR_VAR 0 3
14712: PUSH
14713: LD_INT 6
14715: PUSH
14716: LD_STRING 
14718: PUSH
14719: LD_INT 46
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: LIST
14726: PUSH
14727: LD_VAR 0 2
14731: ARRAY
14732: ST_TO_ADDR
14733: GO 15024
14735: LD_INT 71
14737: DOUBLE
14738: EQUAL
14739: IFTRUE 14743
14741: GO 14771
14743: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
14744: LD_ADDR_VAR 0 3
14748: PUSH
14749: LD_STRING 
14751: PUSH
14752: LD_STRING 
14754: PUSH
14755: LD_INT 47
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: LIST
14762: PUSH
14763: LD_VAR 0 2
14767: ARRAY
14768: ST_TO_ADDR
14769: GO 15024
14771: LD_INT 70
14773: DOUBLE
14774: EQUAL
14775: IFTRUE 14779
14777: GO 14807
14779: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
14780: LD_ADDR_VAR 0 3
14784: PUSH
14785: LD_STRING 
14787: PUSH
14788: LD_INT 26
14790: PUSH
14791: LD_STRING 
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: LIST
14798: PUSH
14799: LD_VAR 0 2
14803: ARRAY
14804: ST_TO_ADDR
14805: GO 15024
14807: LD_INT 69
14809: DOUBLE
14810: EQUAL
14811: IFTRUE 14815
14813: GO 14843
14815: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
14816: LD_ADDR_VAR 0 3
14820: PUSH
14821: LD_INT 4
14823: PUSH
14824: LD_INT 25
14826: PUSH
14827: LD_INT 43
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: LIST
14834: PUSH
14835: LD_VAR 0 2
14839: ARRAY
14840: ST_TO_ADDR
14841: GO 15024
14843: LD_INT 39
14845: DOUBLE
14846: EQUAL
14847: IFTRUE 14851
14849: GO 14879
14851: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
14852: LD_ADDR_VAR 0 3
14856: PUSH
14857: LD_INT 5
14859: PUSH
14860: LD_INT 27
14862: PUSH
14863: LD_INT 44
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: LIST
14870: PUSH
14871: LD_VAR 0 2
14875: ARRAY
14876: ST_TO_ADDR
14877: GO 15024
14879: LD_INT 31
14881: DOUBLE
14882: EQUAL
14883: IFTRUE 14887
14885: GO 14915
14887: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
14888: LD_ADDR_VAR 0 3
14892: PUSH
14893: LD_STRING 
14895: PUSH
14896: LD_STRING 
14898: PUSH
14899: LD_INT 49
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: LIST
14906: PUSH
14907: LD_VAR 0 2
14911: ARRAY
14912: ST_TO_ADDR
14913: GO 15024
14915: LD_INT 14
14917: DOUBLE
14918: EQUAL
14919: IFTRUE 14923
14921: GO 14951
14923: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
14924: LD_ADDR_VAR 0 3
14928: PUSH
14929: LD_INT 10
14931: PUSH
14932: LD_STRING 
14934: PUSH
14935: LD_STRING 
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: LIST
14942: PUSH
14943: LD_VAR 0 2
14947: ARRAY
14948: ST_TO_ADDR
14949: GO 15024
14951: LD_INT 10
14953: DOUBLE
14954: EQUAL
14955: IFTRUE 14959
14957: GO 14987
14959: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
14960: LD_ADDR_VAR 0 3
14964: PUSH
14965: LD_INT 9
14967: PUSH
14968: LD_STRING 
14970: PUSH
14971: LD_STRING 
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: LIST
14978: PUSH
14979: LD_VAR 0 2
14983: ARRAY
14984: ST_TO_ADDR
14985: GO 15024
14987: LD_INT 40
14989: DOUBLE
14990: EQUAL
14991: IFTRUE 14995
14993: GO 15023
14995: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
14996: LD_ADDR_VAR 0 3
15000: PUSH
15001: LD_INT 7
15003: PUSH
15004: LD_INT 28
15006: PUSH
15007: LD_INT 45
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: LIST
15014: PUSH
15015: LD_VAR 0 2
15019: ARRAY
15020: ST_TO_ADDR
15021: GO 15024
15023: POP
// end ;
15024: LD_VAR 0 3
15028: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
15029: LD_INT 0
15031: PPUSH
15032: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
15033: LD_ADDR_VAR 0 2
15037: PUSH
15038: LD_VAR 0 1
15042: PPUSH
15043: LD_INT 1
15045: PPUSH
15046: CALL_OW 289
15050: PUSH
15051: LD_VAR 0 1
15055: PPUSH
15056: LD_INT 2
15058: PPUSH
15059: CALL_OW 289
15063: PUSH
15064: LD_VAR 0 1
15068: PPUSH
15069: LD_INT 3
15071: PPUSH
15072: CALL_OW 289
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: LIST
15081: ST_TO_ADDR
// end ;
15082: LD_VAR 0 2
15086: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
15087: LD_INT 0
15089: PPUSH
15090: PPUSH
// area = ListEnvironmentArea ( area ) ;
15091: LD_ADDR_VAR 0 2
15095: PUSH
15096: LD_VAR 0 2
15100: PPUSH
15101: CALL_OW 353
15105: ST_TO_ADDR
// if bulldozer > 0 then
15106: LD_VAR 0 1
15110: PUSH
15111: LD_INT 0
15113: GREATER
15114: IFFALSE 15225
// for i = area downto 1 do
15116: LD_ADDR_VAR 0 4
15120: PUSH
15121: DOUBLE
15122: LD_VAR 0 2
15126: INC
15127: ST_TO_ADDR
15128: LD_INT 1
15130: PUSH
15131: FOR_DOWNTO
15132: IFFALSE 15223
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
15134: LD_VAR 0 2
15138: PUSH
15139: LD_VAR 0 4
15143: ARRAY
15144: PUSH
15145: LD_INT 1
15147: ARRAY
15148: PPUSH
15149: LD_VAR 0 2
15153: PUSH
15154: LD_VAR 0 4
15158: ARRAY
15159: PUSH
15160: LD_INT 2
15162: ARRAY
15163: PPUSH
15164: CALL_OW 351
15168: IFFALSE 15221
// if not HasTask ( bulldozer ) then
15170: LD_VAR 0 1
15174: PPUSH
15175: CALL_OW 314
15179: NOT
15180: IFFALSE 15221
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
15182: LD_VAR 0 1
15186: PPUSH
15187: LD_VAR 0 2
15191: PUSH
15192: LD_VAR 0 4
15196: ARRAY
15197: PUSH
15198: LD_INT 1
15200: ARRAY
15201: PPUSH
15202: LD_VAR 0 2
15206: PUSH
15207: LD_VAR 0 4
15211: ARRAY
15212: PUSH
15213: LD_INT 2
15215: ARRAY
15216: PPUSH
15217: CALL_OW 171
15221: GO 15131
15223: POP
15224: POP
// end ;
15225: LD_VAR 0 3
15229: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
15230: LD_INT 0
15232: PPUSH
15233: PPUSH
15234: PPUSH
// uc_side := GetSide ( b ) ;
15235: LD_ADDR_OWVAR 20
15239: PUSH
15240: LD_VAR 0 2
15244: PPUSH
15245: CALL_OW 255
15249: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
15250: LD_ADDR_OWVAR 21
15254: PUSH
15255: LD_VAR 0 2
15259: PPUSH
15260: CALL_OW 248
15264: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
15265: LD_INT 0
15267: PPUSH
15268: LD_INT 1
15270: PPUSH
15271: LD_VAR 0 1
15275: PPUSH
15276: CALL_OW 380
// un = CreateHuman ;
15280: LD_ADDR_VAR 0 4
15284: PUSH
15285: CALL_OW 44
15289: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
15290: LD_ADDR_VAR 0 5
15294: PUSH
15295: LD_VAR 0 2
15299: PPUSH
15300: CALL_OW 254
15304: PUSH
15305: LD_INT 3
15307: MINUS
15308: ST_TO_ADDR
// if dir < 0 then
15309: LD_VAR 0 5
15313: PUSH
15314: LD_INT 0
15316: LESS
15317: IFFALSE 15333
// dir := 6 + dir ;
15319: LD_ADDR_VAR 0 5
15323: PUSH
15324: LD_INT 6
15326: PUSH
15327: LD_VAR 0 5
15331: PLUS
15332: ST_TO_ADDR
// SetDir ( un , dir ) ;
15333: LD_VAR 0 4
15337: PPUSH
15338: LD_VAR 0 5
15342: PPUSH
15343: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
15347: LD_VAR 0 4
15351: PPUSH
15352: LD_VAR 0 2
15356: PPUSH
15357: CALL_OW 52
// result = un ;
15361: LD_ADDR_VAR 0 3
15365: PUSH
15366: LD_VAR 0 4
15370: ST_TO_ADDR
// end ;
15371: LD_VAR 0 3
15375: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others , max , test1 , test2 ; begin
15376: LD_INT 0
15378: PPUSH
15379: PPUSH
15380: PPUSH
15381: PPUSH
15382: PPUSH
15383: PPUSH
15384: PPUSH
15385: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Burlak , Vsevolod ] ;
15386: LD_ADDR_VAR 0 3
15390: PUSH
15391: LD_INT 22
15393: PUSH
15394: LD_INT 3
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 21
15403: PUSH
15404: LD_INT 1
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 23
15413: PUSH
15414: LD_INT 3
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: LIST
15425: PPUSH
15426: CALL_OW 69
15430: PUSH
15431: LD_EXP 39
15435: PUSH
15436: LD_EXP 51
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: DIFF
15445: ST_TO_ADDR
// charsToChoose = charsToChoose diff vsevolodTeam ;
15446: LD_ADDR_VAR 0 3
15450: PUSH
15451: LD_VAR 0 3
15455: PUSH
15456: LD_EXP 52
15460: DIFF
15461: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam diff Vsevolod ;
15462: LD_ADDR_EXP 52
15466: PUSH
15467: LD_EXP 52
15471: PUSH
15472: LD_EXP 51
15476: DIFF
15477: ST_TO_ADDR
// max = charsToChoose div 2 + charsToChoose mod 2 ;
15478: LD_ADDR_VAR 0 6
15482: PUSH
15483: LD_VAR 0 3
15487: PUSH
15488: LD_INT 2
15490: DIV
15491: PUSH
15492: LD_VAR 0 3
15496: PUSH
15497: LD_INT 2
15499: MOD
15500: PLUS
15501: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 0 , 3 , [ Burlak , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_not_hired ] ^ vsevolodTeam ^ [ sel_not_changeable , Vsevolod ] , [ class_soldier , class_mechanic , class_engineer , class_scientistic ] ) ;
15502: LD_ADDR_VAR 0 4
15506: PUSH
15507: LD_STRING text
15509: PPUSH
15510: LD_INT 0
15512: PPUSH
15513: LD_INT 3
15515: PPUSH
15516: LD_EXP 39
15520: PUSH
15521: LD_INT -3
15523: PUSH
15524: LD_INT -5
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: PUSH
15532: LD_VAR 0 3
15536: ADD
15537: PUSH
15538: LD_INT -2
15540: PUSH
15541: EMPTY
15542: LIST
15543: ADD
15544: PUSH
15545: LD_EXP 52
15549: ADD
15550: PUSH
15551: LD_INT -4
15553: PUSH
15554: LD_EXP 51
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: ADD
15563: PPUSH
15564: LD_INT 1
15566: PUSH
15567: LD_INT 3
15569: PUSH
15570: LD_INT 2
15572: PUSH
15573: LD_INT 4
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: PPUSH
15582: CALL_OW 42
15586: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) , 6 ) ;
15587: LD_INT 22
15589: PUSH
15590: LD_INT 3
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 21
15599: PUSH
15600: LD_INT 1
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: LD_INT 23
15609: PUSH
15610: LD_INT 3
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: LIST
15621: PPUSH
15622: CALL_OW 69
15626: PPUSH
15627: LD_INT 6
15629: PPUSH
15630: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
15634: LD_VAR 0 4
15638: PPUSH
15639: LD_INT 3
15641: PPUSH
15642: CALL_OW 235
// SetSide ( Burlak , 3 ) ;
15646: LD_EXP 39
15650: PPUSH
15651: LD_INT 3
15653: PPUSH
15654: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
15658: LD_ADDR_VAR 0 2
15662: PUSH
15663: LD_INT 22
15665: PUSH
15666: LD_INT 6
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: LD_INT 21
15675: PUSH
15676: LD_INT 1
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PPUSH
15687: CALL_OW 69
15691: PUSH
15692: FOR_IN
15693: IFFALSE 15726
// if IsInUnit ( i ) then
15695: LD_VAR 0 2
15699: PPUSH
15700: CALL_OW 310
15704: IFFALSE 15724
// begin ComExitVehicle ( i ) ;
15706: LD_VAR 0 2
15710: PPUSH
15711: CALL_OW 121
// ComExitBuilding ( i ) ;
15715: LD_VAR 0 2
15719: PPUSH
15720: CALL_OW 122
// end ;
15724: GO 15692
15726: POP
15727: POP
// if not Vsevolod in selectedPeople then
15728: LD_EXP 51
15732: PUSH
15733: LD_VAR 0 4
15737: IN
15738: NOT
15739: IFFALSE 15756
// ExtSaveCharacter ( Vsevolod , Vsevolod , 6 ) ;
15741: LD_EXP 51
15745: PPUSH
15746: LD_STRING Vsevolod
15748: PPUSH
15749: LD_INT 6
15751: PPUSH
15752: CALL 11903 0 3
// if not Karamazov in selectedPeople then
15756: LD_EXP 40
15760: PUSH
15761: LD_VAR 0 4
15765: IN
15766: NOT
15767: IFFALSE 15784
// ExtSaveCharacter ( Karamazov , VSKaramazov , 6 ) ;
15769: LD_EXP 40
15773: PPUSH
15774: LD_STRING VSKaramazov
15776: PPUSH
15777: LD_INT 6
15779: PPUSH
15780: CALL 11903 0 3
// if not Petrovova in selectedPeople then
15784: LD_EXP 41
15788: PUSH
15789: LD_VAR 0 4
15793: IN
15794: NOT
15795: IFFALSE 15812
// ExtSaveCharacter ( Petrovova , VSPetrovova , 6 ) ;
15797: LD_EXP 41
15801: PPUSH
15802: LD_STRING VSPetrovova
15804: PPUSH
15805: LD_INT 6
15807: PPUSH
15808: CALL 11903 0 3
// if not Gleb in selectedPeople then
15812: LD_EXP 42
15816: PUSH
15817: LD_VAR 0 4
15821: IN
15822: NOT
15823: IFFALSE 15840
// ExtSaveCharacter ( Gleb , VSGleb , 6 ) ;
15825: LD_EXP 42
15829: PPUSH
15830: LD_STRING VSGleb
15832: PPUSH
15833: LD_INT 6
15835: PPUSH
15836: CALL 11903 0 3
// if not Petrosyan in selectedPeople then
15840: LD_EXP 43
15844: PUSH
15845: LD_VAR 0 4
15849: IN
15850: NOT
15851: IFFALSE 15868
// ExtSaveCharacter ( Petrosyan , VSPetrosyan , 6 ) ;
15853: LD_EXP 43
15857: PPUSH
15858: LD_STRING VSPetrosyan
15860: PPUSH
15861: LD_INT 6
15863: PPUSH
15864: CALL 11903 0 3
// if not Titov in selectedPeople then
15868: LD_EXP 44
15872: PUSH
15873: LD_VAR 0 4
15877: IN
15878: NOT
15879: IFFALSE 15896
// ExtSaveCharacter ( Titov , VSTitov , 6 ) ;
15881: LD_EXP 44
15885: PPUSH
15886: LD_STRING VSTitov
15888: PPUSH
15889: LD_INT 6
15891: PPUSH
15892: CALL 11903 0 3
// if not Dolgov in selectedPeople then
15896: LD_EXP 45
15900: PUSH
15901: LD_VAR 0 4
15905: IN
15906: NOT
15907: IFFALSE 15924
// ExtSaveCharacter ( Dolgov , VSDolgov , 6 ) ;
15909: LD_EXP 45
15913: PPUSH
15914: LD_STRING VSDolgov
15916: PPUSH
15917: LD_INT 6
15919: PPUSH
15920: CALL 11903 0 3
// if not Lipshchin in selectedPeople then
15924: LD_EXP 46
15928: PUSH
15929: LD_VAR 0 4
15933: IN
15934: NOT
15935: IFFALSE 15952
// ExtSaveCharacter ( Lipshchin , VSLipshchin , 6 ) ;
15937: LD_EXP 46
15941: PPUSH
15942: LD_STRING VSLipshchin
15944: PPUSH
15945: LD_INT 6
15947: PPUSH
15948: CALL 11903 0 3
// others = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod ] ;
15952: LD_ADDR_VAR 0 5
15956: PUSH
15957: LD_INT 22
15959: PUSH
15960: LD_INT 6
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: LD_INT 21
15969: PUSH
15970: LD_INT 1
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: LD_INT 23
15979: PUSH
15980: LD_INT 3
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: LIST
15991: PPUSH
15992: CALL_OW 69
15996: PUSH
15997: LD_EXP 40
16001: PUSH
16002: LD_EXP 41
16006: PUSH
16007: LD_EXP 42
16011: PUSH
16012: LD_EXP 43
16016: PUSH
16017: LD_EXP 44
16021: PUSH
16022: LD_EXP 45
16026: PUSH
16027: LD_EXP 46
16031: PUSH
16032: LD_EXP 51
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: DIFF
16047: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_vsevolod , 6 ) ;
16048: LD_VAR 0 5
16052: PPUSH
16053: LD_STRING other_survivors_with_vsevolod
16055: PPUSH
16056: LD_INT 6
16058: PPUSH
16059: CALL 11959 0 3
// end ; end_of_file
16063: LD_VAR 0 1
16067: RET
// export function MissionIntro ; var i , ruEng , unit ; begin
16068: LD_INT 0
16070: PPUSH
16071: PPUSH
16072: PPUSH
16073: PPUSH
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) ;
16074: LD_EXP 39
16078: PPUSH
16079: CALL_OW 310
16083: PPUSH
16084: CALL_OW 87
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
16088: LD_ADDR_VAR 0 4
16092: PUSH
16093: LD_INT 22
16095: PUSH
16096: LD_INT 3
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: LD_INT 21
16105: PUSH
16106: LD_INT 2
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PPUSH
16117: CALL_OW 69
16121: PUSH
16122: FOR_IN
16123: IFFALSE 16187
// begin if ( i mod 2 ) = 0 then
16125: LD_VAR 0 2
16129: PUSH
16130: LD_INT 2
16132: MOD
16133: PUSH
16134: LD_INT 0
16136: EQUAL
16137: IFFALSE 16156
// ComMoveXY ( unit , 156 , 205 ) else
16139: LD_VAR 0 4
16143: PPUSH
16144: LD_INT 156
16146: PPUSH
16147: LD_INT 205
16149: PPUSH
16150: CALL_OW 111
16154: GO 16171
// ComMoveXY ( unit , 160 , 215 ) ;
16156: LD_VAR 0 4
16160: PPUSH
16161: LD_INT 160
16163: PPUSH
16164: LD_INT 215
16166: PPUSH
16167: CALL_OW 111
// i = i + 1 ;
16171: LD_ADDR_VAR 0 2
16175: PUSH
16176: LD_VAR 0 2
16180: PUSH
16181: LD_INT 1
16183: PLUS
16184: ST_TO_ADDR
// end ;
16185: GO 16122
16187: POP
16188: POP
// if IsOK ( Karamazov ) then
16189: LD_EXP 40
16193: PPUSH
16194: CALL_OW 302
16198: IFFALSE 16212
// ruEng = Karamazov else
16200: LD_ADDR_VAR 0 3
16204: PUSH
16205: LD_EXP 40
16209: ST_TO_ADDR
16210: GO 16295
// if IsOK ( Lipshchin ) then
16212: LD_EXP 46
16216: PPUSH
16217: CALL_OW 302
16221: IFFALSE 16235
// ruEng = Lipshchin else
16223: LD_ADDR_VAR 0 3
16227: PUSH
16228: LD_EXP 46
16232: ST_TO_ADDR
16233: GO 16295
// ruEng = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_class , class_engineer ] ] ) [ 1 ] ;
16235: LD_ADDR_VAR 0 3
16239: PUSH
16240: LD_INT 22
16242: PUSH
16243: LD_INT 3
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 21
16252: PUSH
16253: LD_INT 1
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 23
16262: PUSH
16263: LD_INT 3
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 25
16272: PUSH
16273: LD_INT 2
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: PPUSH
16286: CALL_OW 69
16290: PUSH
16291: LD_INT 1
16293: ARRAY
16294: ST_TO_ADDR
// wait ( 0 0$3 ) ;
16295: LD_INT 105
16297: PPUSH
16298: CALL_OW 67
// CenterOnXY ( 160 , 213 ) ;
16302: LD_INT 160
16304: PPUSH
16305: LD_INT 213
16307: PPUSH
16308: CALL_OW 84
// wait ( 0 0$3 ) ;
16312: LD_INT 105
16314: PPUSH
16315: CALL_OW 67
// CenterOnXY ( 149 , 211 ) ;
16319: LD_INT 149
16321: PPUSH
16322: LD_INT 211
16324: PPUSH
16325: CALL_OW 84
// repeat ComMoveXY ( IsInUnit ( ruEng ) , 149 , 212 ) ;
16329: LD_VAR 0 3
16333: PPUSH
16334: CALL_OW 310
16338: PPUSH
16339: LD_INT 149
16341: PPUSH
16342: LD_INT 212
16344: PPUSH
16345: CALL_OW 111
// wait ( 0 0$1 ) ;
16349: LD_INT 35
16351: PPUSH
16352: CALL_OW 67
// until GetDistUnitXY ( IsInUnit ( ruEng ) , 149 , 212 ) <= 2 ;
16356: LD_VAR 0 3
16360: PPUSH
16361: CALL_OW 310
16365: PPUSH
16366: LD_INT 149
16368: PPUSH
16369: LD_INT 212
16371: PPUSH
16372: CALL_OW 297
16376: PUSH
16377: LD_INT 2
16379: LESSEQUAL
16380: IFFALSE 16329
// ComExitVehicle ( ruEng ) ;
16382: LD_VAR 0 3
16386: PPUSH
16387: CALL_OW 121
// wait ( 0 0$1 ) ;
16391: LD_INT 35
16393: PPUSH
16394: CALL_OW 67
// AddComCaptureBuilding ( ruEng , rudepot ) ;
16398: LD_VAR 0 3
16402: PPUSH
16403: LD_INT 74
16405: PPUSH
16406: CALL 12475 0 2
// repeat wait ( 0 0$1 ) ;
16410: LD_INT 35
16412: PPUSH
16413: CALL_OW 67
// until GetSide ( rudepot ) = 3 ;
16417: LD_INT 74
16419: PPUSH
16420: CALL_OW 255
16424: PUSH
16425: LD_INT 3
16427: EQUAL
16428: IFFALSE 16410
// ComEnterUnit ( ruEng , rudepot ) ;
16430: LD_VAR 0 3
16434: PPUSH
16435: LD_INT 74
16437: PPUSH
16438: CALL_OW 120
// wait ( 0 0$2 ) ;
16442: LD_INT 70
16444: PPUSH
16445: CALL_OW 67
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
16449: LD_INT 22
16451: PUSH
16452: LD_INT 6
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PPUSH
16459: CALL_OW 69
16463: PPUSH
16464: LD_INT 3
16466: PPUSH
16467: CALL_OW 235
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
16471: LD_ADDR_VAR 0 4
16475: PUSH
16476: LD_INT 22
16478: PUSH
16479: LD_INT 3
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 21
16488: PUSH
16489: LD_INT 1
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PPUSH
16500: CALL_OW 69
16504: PUSH
16505: FOR_IN
16506: IFFALSE 16539
// if GetType ( IsInUnit ( unit ) ) = unit_vehicle then
16508: LD_VAR 0 4
16512: PPUSH
16513: CALL_OW 310
16517: PPUSH
16518: CALL_OW 247
16522: PUSH
16523: LD_INT 2
16525: EQUAL
16526: IFFALSE 16537
// ComExitVehicle ( unit ) ;
16528: LD_VAR 0 4
16532: PPUSH
16533: CALL_OW 121
16537: GO 16505
16539: POP
16540: POP
// if ruEng = Karamazov then
16541: LD_VAR 0 3
16545: PUSH
16546: LD_EXP 40
16550: EQUAL
16551: IFFALSE 16567
// Say ( Karamazov , DStart-Kar-1 ) else
16553: LD_EXP 40
16557: PPUSH
16558: LD_STRING DStart-Kar-1
16560: PPUSH
16561: CALL_OW 88
16565: GO 16591
// if ruEng = Lipshchin then
16567: LD_VAR 0 3
16571: PUSH
16572: LD_EXP 46
16576: EQUAL
16577: IFFALSE 16591
// Say ( Lipshchin , DStart-Lip-1 ) ;
16579: LD_EXP 46
16583: PPUSH
16584: LD_STRING DStart-Lip-1
16586: PPUSH
16587: CALL_OW 88
// ComExitBuilding ( ruEng ) ;
16591: LD_VAR 0 3
16595: PPUSH
16596: CALL_OW 122
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 250 ] ] ] ) do
16600: LD_ADDR_VAR 0 4
16604: PUSH
16605: LD_INT 22
16607: PUSH
16608: LD_INT 3
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: LD_INT 21
16617: PUSH
16618: LD_INT 3
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 3
16627: PUSH
16628: LD_INT 24
16630: PUSH
16631: LD_INT 250
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: LIST
16646: PPUSH
16647: CALL_OW 69
16651: PUSH
16652: FOR_IN
16653: IFFALSE 16706
// AddComRepairBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , unit ) ;
16655: LD_INT 22
16657: PUSH
16658: LD_INT 3
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PUSH
16665: LD_INT 21
16667: PUSH
16668: LD_INT 1
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: PUSH
16675: LD_INT 25
16677: PUSH
16678: LD_INT 2
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: LIST
16689: PPUSH
16690: CALL_OW 69
16694: PPUSH
16695: LD_VAR 0 4
16699: PPUSH
16700: CALL_OW 190
16704: GO 16652
16706: POP
16707: POP
// Say ( Burlak , DStart-Bur-1 ) ;
16708: LD_EXP 39
16712: PPUSH
16713: LD_STRING DStart-Bur-1
16715: PPUSH
16716: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-1 ) ;
16720: LD_EXP 47
16724: PPUSH
16725: LD_STRING DStart-Pla-1
16727: PPUSH
16728: CALL_OW 94
// Say ( Burlak , DStart-Bur-2 ) ;
16732: LD_EXP 39
16736: PPUSH
16737: LD_STRING DStart-Bur-2
16739: PPUSH
16740: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-2 ) ;
16744: LD_EXP 47
16748: PPUSH
16749: LD_STRING DStart-Pla-2
16751: PPUSH
16752: CALL_OW 94
// if IsOK ( Petrovova ) then
16756: LD_EXP 41
16760: PPUSH
16761: CALL_OW 302
16765: IFFALSE 16779
// Say ( Petrovova , DStart-Ptr-2 ) ;
16767: LD_EXP 41
16771: PPUSH
16772: LD_STRING DStart-Ptr-2
16774: PPUSH
16775: CALL_OW 88
// InGameOff ;
16779: CALL_OW 9
// ChangeMissionObjectives ( MStart ) ;
16783: LD_STRING MStart
16785: PPUSH
16786: CALL_OW 337
// SaveForQuickRestart ;
16790: CALL_OW 22
// wait ( 0 0$10 ) ;
16794: LD_INT 350
16796: PPUSH
16797: CALL_OW 67
// if IsOK ( Petrosyan ) then
16801: LD_EXP 43
16805: PPUSH
16806: CALL_OW 302
16810: IFFALSE 16826
// Say ( Petrosyan , DMatPrediction-Pty-1 ) else
16812: LD_EXP 43
16816: PPUSH
16817: LD_STRING DMatPrediction-Pty-1
16819: PPUSH
16820: CALL_OW 88
16824: GO 16849
// if IsOK ( Dolgov ) then
16826: LD_EXP 45
16830: PPUSH
16831: CALL_OW 302
16835: IFFALSE 16849
// Say ( Dolgov , DMatPrediction-Dol-1 ) ;
16837: LD_EXP 45
16841: PPUSH
16842: LD_STRING DMatPrediction-Dol-1
16844: PPUSH
16845: CALL_OW 88
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16849: LD_EXP 43
16853: PPUSH
16854: CALL_OW 302
16858: PUSH
16859: LD_EXP 45
16863: PPUSH
16864: CALL_OW 302
16868: OR
16869: IFFALSE 16883
// Say ( Burlak , DMatPrediction-Bur-1 ) ;
16871: LD_EXP 39
16875: PPUSH
16876: LD_STRING DMatPrediction-Bur-1
16878: PPUSH
16879: CALL_OW 88
// if IsOK ( Petrosyan ) then
16883: LD_EXP 43
16887: PPUSH
16888: CALL_OW 302
16892: IFFALSE 16908
// Say ( Petrosyan , DMatPrediction-Pty-2 ) else
16894: LD_EXP 43
16898: PPUSH
16899: LD_STRING DMatPrediction-Pty-2
16901: PPUSH
16902: CALL_OW 88
16906: GO 16931
// if IsOK ( Dolgov ) then
16908: LD_EXP 45
16912: PPUSH
16913: CALL_OW 302
16917: IFFALSE 16931
// Say ( Dolgov , DMatPrediction-Dol-2 ) ;
16919: LD_EXP 45
16923: PPUSH
16924: LD_STRING DMatPrediction-Dol-2
16926: PPUSH
16927: CALL_OW 88
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16931: LD_EXP 43
16935: PPUSH
16936: CALL_OW 302
16940: PUSH
16941: LD_EXP 45
16945: PPUSH
16946: CALL_OW 302
16950: OR
16951: IFFALSE 16965
// Say ( Burlak , DMatPrediction-Bur-2 ) ;
16953: LD_EXP 39
16957: PPUSH
16958: LD_STRING DMatPrediction-Bur-2
16960: PPUSH
16961: CALL_OW 88
// if IsOK ( Petrosyan ) then
16965: LD_EXP 43
16969: PPUSH
16970: CALL_OW 302
16974: IFFALSE 16990
// Say ( Petrosyan , DMatPrediction-Pty-3 ) else
16976: LD_EXP 43
16980: PPUSH
16981: LD_STRING DMatPrediction-Pty-3
16983: PPUSH
16984: CALL_OW 88
16988: GO 17013
// if IsOK ( Dolgov ) then
16990: LD_EXP 45
16994: PPUSH
16995: CALL_OW 302
16999: IFFALSE 17013
// Say ( Dolgov , DMatPrediction-Dol-3 ) ;
17001: LD_EXP 45
17005: PPUSH
17006: LD_STRING DMatPrediction-Dol-3
17008: PPUSH
17009: CALL_OW 88
// ChangeMissionObjectives ( MPred ) ;
17013: LD_STRING MPred
17015: PPUSH
17016: CALL_OW 337
// end ;
17020: LD_VAR 0 1
17024: RET
// every 0 0$1 trigger not UnitFilter ( ovsyenkoBase , [ f_type , unit_human ] ) do
17025: LD_EXP 59
17029: PPUSH
17030: LD_INT 21
17032: PUSH
17033: LD_INT 1
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PPUSH
17040: CALL_OW 72
17044: NOT
17045: IFFALSE 17267
17047: GO 17049
17049: DISABLE
// begin DialogueOn ;
17050: CALL_OW 6
// Say ( Burlak , DOvsyenkoTaken-Bur-1 ) ;
17054: LD_EXP 39
17058: PPUSH
17059: LD_STRING DOvsyenkoTaken-Bur-1
17061: PPUSH
17062: CALL_OW 88
// SayRadio ( Platonov , DOvsyenkoTaken-Pla-1 ) ;
17066: LD_EXP 47
17070: PPUSH
17071: LD_STRING DOvsyenkoTaken-Pla-1
17073: PPUSH
17074: CALL_OW 94
// if IsOK ( Karamazov ) then
17078: LD_EXP 40
17082: PPUSH
17083: CALL_OW 302
17087: IFFALSE 17101
// Say ( Karamazov , DOvsyenkoTaken-Kar-1 ) ;
17089: LD_EXP 40
17093: PPUSH
17094: LD_STRING DOvsyenkoTaken-Kar-1
17096: PPUSH
17097: CALL_OW 88
// if IsOK ( Titov ) then
17101: LD_EXP 44
17105: PPUSH
17106: CALL_OW 302
17110: IFFALSE 17124
// Say ( Titov , DOvsyenkoTaken-Tit-1 ) ;
17112: LD_EXP 44
17116: PPUSH
17117: LD_STRING DOvsyenkoTaken-Tit-1
17119: PPUSH
17120: CALL_OW 88
// if IsOK ( Lipshchin ) and ( IsOK ( Karamazov ) or IsOK ( Titov ) ) then
17124: LD_EXP 46
17128: PPUSH
17129: CALL_OW 302
17133: PUSH
17134: LD_EXP 40
17138: PPUSH
17139: CALL_OW 302
17143: PUSH
17144: LD_EXP 44
17148: PPUSH
17149: CALL_OW 302
17153: OR
17154: AND
17155: IFFALSE 17192
// begin Say ( Lipshchin , DOvsyenkoTaken-Lip-1 ) ;
17157: LD_EXP 46
17161: PPUSH
17162: LD_STRING DOvsyenkoTaken-Lip-1
17164: PPUSH
17165: CALL_OW 88
// if IsOK ( Gleb ) then
17169: LD_EXP 42
17173: PPUSH
17174: CALL_OW 302
17178: IFFALSE 17192
// Say ( Gleb , DOvsyenkoTaken-Glb-1 ) ;
17180: LD_EXP 42
17184: PPUSH
17185: LD_STRING DOvsyenkoTaken-Glb-1
17187: PPUSH
17188: CALL_OW 88
// end ; DialogueOff ;
17192: CALL_OW 7
// ChangeMissionObjectives ( MOutCapture ) ;
17196: LD_STRING MOutCapture
17198: PPUSH
17199: CALL_OW 337
// ChangeMissionObjectives ( MAddMine ) ;
17203: LD_STRING MAddMine
17205: PPUSH
17206: CALL_OW 337
// claimOvsyenkoBase = true ;
17210: LD_ADDR_EXP 15
17214: PUSH
17215: LD_INT 1
17217: ST_TO_ADDR
// wait ( 1 1$10 ) ;
17218: LD_INT 2450
17220: PPUSH
17221: CALL_OW 67
// InitAIManager ( 1 , 1 , headAmBase , HeadAmericanBaseArea , HeadAmericanHealArea , false , HeadAmericanBaseArea , 6 , 2 , 4 , true , true ) ;
17225: LD_INT 1
17227: PPUSH
17228: LD_INT 1
17230: PPUSH
17231: LD_EXP 61
17235: PPUSH
17236: LD_INT 5
17238: PPUSH
17239: LD_INT 9
17241: PPUSH
17242: LD_INT 0
17244: PPUSH
17245: LD_INT 5
17247: PPUSH
17248: LD_INT 6
17250: PPUSH
17251: LD_INT 2
17253: PPUSH
17254: LD_INT 4
17256: PPUSH
17257: LD_INT 1
17259: PPUSH
17260: LD_INT 1
17262: PPUSH
17263: CALL 5248 0 12
// end ;
17267: END
// export function Dial_SibTechs ; begin
17268: LD_INT 0
17270: PPUSH
// dial_SibTechsBlocker = true ;
17271: LD_ADDR_EXP 9
17275: PUSH
17276: LD_INT 1
17278: ST_TO_ADDR
// DialogueOn ;
17279: CALL_OW 6
// if IsOK ( Petrosyan ) then
17283: LD_EXP 43
17287: PPUSH
17288: CALL_OW 302
17292: IFFALSE 17308
// Say ( Petrosyan , DSibResearch-Pty-1 ) else
17294: LD_EXP 43
17298: PPUSH
17299: LD_STRING DSibResearch-Pty-1
17301: PPUSH
17302: CALL_OW 88
17306: GO 17331
// if IsOK ( Dolgov ) then
17308: LD_EXP 45
17312: PPUSH
17313: CALL_OW 302
17317: IFFALSE 17331
// Say ( Dolgov , DSibResearch-Dol-1 ) ;
17319: LD_EXP 45
17323: PPUSH
17324: LD_STRING DSibResearch-Dol-1
17326: PPUSH
17327: CALL_OW 88
// Say ( Burlak , DSibResearch-Bur-1 ) ;
17331: LD_EXP 39
17335: PPUSH
17336: LD_STRING DSibResearch-Bur-1
17338: PPUSH
17339: CALL_OW 88
// SayRadio ( Platonov , DSibResearch-Pla-1 ) ;
17343: LD_EXP 47
17347: PPUSH
17348: LD_STRING DSibResearch-Pla-1
17350: PPUSH
17351: CALL_OW 94
// DialogueOff ;
17355: CALL_OW 7
// ChangeMissionObjectives ( MResearch ) ;
17359: LD_STRING MResearch
17361: PPUSH
17362: CALL_OW 337
// SetRestrict ( b_ext_siberium , 3 , true ) ;
17366: LD_INT 21
17368: PPUSH
17369: LD_INT 3
17371: PPUSH
17372: LD_INT 1
17374: PPUSH
17375: CALL_OW 324
// SetRestrict ( b_siberite_power , 3 , true ) ;
17379: LD_INT 28
17381: PPUSH
17382: LD_INT 3
17384: PPUSH
17385: LD_INT 1
17387: PPUSH
17388: CALL_OW 324
// SetRestrict ( b_lab_siberium , 3 , true ) ;
17392: LD_INT 11
17394: PPUSH
17395: LD_INT 3
17397: PPUSH
17398: LD_INT 1
17400: PPUSH
17401: CALL_OW 324
// SetRestrict ( b_lab_spacetime , 3 , true ) ;
17405: LD_INT 14
17407: PPUSH
17408: LD_INT 3
17410: PPUSH
17411: LD_INT 1
17413: PPUSH
17414: CALL_OW 324
// end ;
17418: LD_VAR 0 1
17422: RET
// export function Dial_ResearchMatPredictions ; begin
17423: LD_INT 0
17425: PPUSH
// techMatPredStatus = state_researched ;
17426: LD_ADDR_EXP 6
17430: PUSH
17431: LD_INT 2
17433: ST_TO_ADDR
// ChangeMissionObjectives ( MOutPred ) ;
17434: LD_STRING MOutPred
17436: PPUSH
17437: CALL_OW 337
// DialogueOn ;
17441: CALL_OW 6
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
17445: LD_EXP 43
17449: PPUSH
17450: CALL_OW 302
17454: PUSH
17455: LD_EXP 45
17459: PPUSH
17460: CALL_OW 302
17464: OR
17465: IFFALSE 17587
// begin if IsOK ( Petrosyan ) then
17467: LD_EXP 43
17471: PPUSH
17472: CALL_OW 302
17476: IFFALSE 17492
// Say ( Petrosyan , DNoMaterial-Pty-1 ) else
17478: LD_EXP 43
17482: PPUSH
17483: LD_STRING DNoMaterial-Pty-1
17485: PPUSH
17486: CALL_OW 88
17490: GO 17515
// if IsOK ( Dolgov ) then
17492: LD_EXP 45
17496: PPUSH
17497: CALL_OW 302
17501: IFFALSE 17515
// Say ( Dolgov , DNoMaterial-Dol-1 ) ;
17503: LD_EXP 45
17507: PPUSH
17508: LD_STRING DNoMaterial-Dol-1
17510: PPUSH
17511: CALL_OW 88
// Say ( Burlak , DNoMaterial-Bur-1 ) ;
17515: LD_EXP 39
17519: PPUSH
17520: LD_STRING DNoMaterial-Bur-1
17522: PPUSH
17523: CALL_OW 88
// if IsOK ( Petrosyan ) then
17527: LD_EXP 43
17531: PPUSH
17532: CALL_OW 302
17536: IFFALSE 17552
// Say ( Petrosyan , DNoMaterial-Pty-2 ) else
17538: LD_EXP 43
17542: PPUSH
17543: LD_STRING DNoMaterial-Pty-2
17545: PPUSH
17546: CALL_OW 88
17550: GO 17575
// if IsOK ( Dolgov ) then
17552: LD_EXP 45
17556: PPUSH
17557: CALL_OW 302
17561: IFFALSE 17575
// Say ( Dolgov , DNoMaterial-Dol-2 ) ;
17563: LD_EXP 45
17567: PPUSH
17568: LD_STRING DNoMaterial-Dol-2
17570: PPUSH
17571: CALL_OW 88
// Say ( Burlak , DNoMaterial-Bur-2 ) ;
17575: LD_EXP 39
17579: PPUSH
17580: LD_STRING DNoMaterial-Bur-2
17582: PPUSH
17583: CALL_OW 88
// end ; DialogueOff ;
17587: CALL_OW 7
// end ;
17591: LD_VAR 0 1
17595: RET
// every 0 0$1 trigger not dial_SibTechsBlocker and ( GetResourceVisibility ( 116 , 123 , 3 ) or GetResourceVisibility ( 72 , 86 , 3 ) ) do
17596: LD_EXP 9
17600: NOT
17601: PUSH
17602: LD_INT 116
17604: PPUSH
17605: LD_INT 123
17607: PPUSH
17608: LD_INT 3
17610: PPUSH
17611: CALL_OW 440
17615: PUSH
17616: LD_INT 72
17618: PPUSH
17619: LD_INT 86
17621: PPUSH
17622: LD_INT 3
17624: PPUSH
17625: CALL_OW 440
17629: OR
17630: AND
17631: IFFALSE 17640
17633: GO 17635
17635: DISABLE
// Dial_SibTechs ;
17636: CALL 17268 0 0
17640: END
// every 5 5$0 trigger claimOvsyenkoBase do
17641: LD_EXP 15
17645: IFFALSE 17669
17647: GO 17649
17649: DISABLE
// begin PrepareVsevolod ;
17650: CALL 2664 0 0
// ComAgressiveMove ( vsevolodTeam , 61 , 45 ) ;
17654: LD_EXP 52
17658: PPUSH
17659: LD_INT 61
17661: PPUSH
17662: LD_INT 45
17664: PPUSH
17665: CALL_OW 114
// end ;
17669: END
// every 0 0$1 trigger immortalVsevolodTeam do var unit ;
17670: LD_EXP 18
17674: IFFALSE 17712
17676: GO 17678
17678: DISABLE
17679: LD_INT 0
17681: PPUSH
// begin enable ;
17682: ENABLE
// for unit in vsevolodTeam do
17683: LD_ADDR_VAR 0 1
17687: PUSH
17688: LD_EXP 52
17692: PUSH
17693: FOR_IN
17694: IFFALSE 17710
// SetLives ( unit , 1000 ) ;
17696: LD_VAR 0 1
17700: PPUSH
17701: LD_INT 1000
17703: PPUSH
17704: CALL_OW 234
17708: GO 17693
17710: POP
17711: POP
// end ;
17712: PPOPN 1
17714: END
// every 0 0$1 trigger GetLives ( ter_bun1 ) <= 650 or GetLives ( ter_arm1 ) <= 650 do var belkovSavedIn02 , tmp , speaker ;
17715: LD_INT 170
17717: PPUSH
17718: CALL_OW 256
17722: PUSH
17723: LD_INT 650
17725: LESSEQUAL
17726: PUSH
17727: LD_INT 174
17729: PPUSH
17730: CALL_OW 256
17734: PUSH
17735: LD_INT 650
17737: LESSEQUAL
17738: OR
17739: IFFALSE 18900
17741: GO 17743
17743: DISABLE
17744: LD_INT 0
17746: PPUSH
17747: PPUSH
17748: PPUSH
// begin ComMoveXY ( UnitFilter ( terminalBase , [ f_type , unit_human ] ) , 35 , 58 ) ;
17749: LD_EXP 60
17753: PPUSH
17754: LD_INT 21
17756: PUSH
17757: LD_INT 1
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PPUSH
17764: CALL_OW 72
17768: PPUSH
17769: LD_INT 35
17771: PPUSH
17772: LD_INT 58
17774: PPUSH
17775: CALL_OW 111
// SetSide ( UnitFilter ( terminalBase , [ f_type , unit_building ] ) , 6 ) ;
17779: LD_EXP 60
17783: PPUSH
17784: LD_INT 21
17786: PUSH
17787: LD_INT 3
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PPUSH
17794: CALL_OW 72
17798: PPUSH
17799: LD_INT 6
17801: PPUSH
17802: CALL_OW 235
// immortalVsevolodTeam = false ;
17806: LD_ADDR_EXP 18
17810: PUSH
17811: LD_INT 0
17813: ST_TO_ADDR
// ComEnterUnit ( [ Vsevolod , vsevolodTeam [ 3 ] ] , ter_arm1 ) ;
17814: LD_EXP 51
17818: PUSH
17819: LD_EXP 52
17823: PUSH
17824: LD_INT 3
17826: ARRAY
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PPUSH
17832: LD_INT 174
17834: PPUSH
17835: CALL_OW 120
// ComEnterUnit ( vsevolodTeam [ 4 ] , ter_bun1 ) ;
17839: LD_EXP 52
17843: PUSH
17844: LD_INT 4
17846: ARRAY
17847: PPUSH
17848: LD_INT 170
17850: PPUSH
17851: CALL_OW 120
// SetLives ( Petr , 500 ) ;
17855: LD_EXP 53
17859: PPUSH
17860: LD_INT 500
17862: PPUSH
17863: CALL_OW 234
// ComEnterUnit ( vsevolodTeam [ 2 ] , terminal ) ;
17867: LD_EXP 52
17871: PUSH
17872: LD_INT 2
17874: ARRAY
17875: PPUSH
17876: LD_INT 168
17878: PPUSH
17879: CALL_OW 120
// wait ( 0 0$5 ) ;
17883: LD_INT 175
17885: PPUSH
17886: CALL_OW 67
// DialogueOn ;
17890: CALL_OW 6
// if IsOK ( Dolgov ) then
17894: LD_EXP 45
17898: PPUSH
17899: CALL_OW 302
17903: IFFALSE 17917
// Say ( Dolgov , DVsevolod-Dol-1 ) ;
17905: LD_EXP 45
17909: PPUSH
17910: LD_STRING DVsevolod-Dol-1
17912: PPUSH
17913: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-1 ) ;
17917: LD_EXP 51
17921: PPUSH
17922: LD_STRING DVsevolod-Vse-1
17924: PPUSH
17925: CALL_OW 94
// if IsOK ( Gleb ) then
17929: LD_EXP 42
17933: PPUSH
17934: CALL_OW 302
17938: IFFALSE 17976
// begin Say ( Burlak , DVsevolod-Bur-1 ) ;
17940: LD_EXP 39
17944: PPUSH
17945: LD_STRING DVsevolod-Bur-1
17947: PPUSH
17948: CALL_OW 88
// Say ( Gleb , DVsevolod-Glb-1 ) ;
17952: LD_EXP 42
17956: PPUSH
17957: LD_STRING DVsevolod-Glb-1
17959: PPUSH
17960: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-2 ) ;
17964: LD_EXP 51
17968: PPUSH
17969: LD_STRING DVsevolod-Vse-2
17971: PPUSH
17972: CALL_OW 94
// end ; Say ( Burlak , DVsevolod-Bur-2 ) ;
17976: LD_EXP 39
17980: PPUSH
17981: LD_STRING DVsevolod-Bur-2
17983: PPUSH
17984: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-3 ) ;
17988: LD_EXP 51
17992: PPUSH
17993: LD_STRING DVsevolod-Vse-3
17995: PPUSH
17996: CALL_OW 94
// Say ( Burlak , DVsevolod-Bur-3 ) ;
18000: LD_EXP 39
18004: PPUSH
18005: LD_STRING DVsevolod-Bur-3
18007: PPUSH
18008: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-4 ) ;
18012: LD_EXP 51
18016: PPUSH
18017: LD_STRING DVsevolod-Vse-4
18019: PPUSH
18020: CALL_OW 94
// Say ( Burlak , DVsevolod-Bur-4 ) ;
18024: LD_EXP 39
18028: PPUSH
18029: LD_STRING DVsevolod-Bur-4
18031: PPUSH
18032: CALL_OW 88
// if IsOK ( Gleb ) then
18036: LD_EXP 42
18040: PPUSH
18041: CALL_OW 302
18045: IFFALSE 18073
// begin Say ( Gleb , DVsevolod-Glb-4 ) ;
18047: LD_EXP 42
18051: PPUSH
18052: LD_STRING DVsevolod-Glb-4
18054: PPUSH
18055: CALL_OW 88
// Say ( Burlak , DVsevolod-Bur-5 ) ;
18059: LD_EXP 39
18063: PPUSH
18064: LD_STRING DVsevolod-Bur-5
18066: PPUSH
18067: CALL_OW 88
// end else
18071: GO 18147
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-RSol1-5 ,  , false , true ) ;
18073: LD_INT 22
18075: PUSH
18076: LD_INT 3
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 21
18085: PUSH
18086: LD_INT 1
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 50
18095: PUSH
18096: EMPTY
18097: LIST
18098: PUSH
18099: LD_INT 26
18101: PUSH
18102: LD_INT 1
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 23
18111: PUSH
18112: LD_INT 3
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: PPUSH
18126: CALL_OW 69
18130: PPUSH
18131: LD_STRING DVsevolod-RSol1-5
18133: PPUSH
18134: LD_STRING 
18136: PPUSH
18137: LD_INT 0
18139: PPUSH
18140: LD_INT 1
18142: PPUSH
18143: CALL 12102 0 5
// Say ( Burlak , DVsevolod-Bur-6 ) ;
18147: LD_EXP 39
18151: PPUSH
18152: LD_STRING DVsevolod-Bur-6
18154: PPUSH
18155: CALL_OW 88
// CenterOnXY ( 59 , 40 ) ;
18159: LD_INT 59
18161: PPUSH
18162: LD_INT 40
18164: PPUSH
18165: CALL_OW 84
// RevealFogArea ( 3 , TerminalBaseArea ) ;
18169: LD_INT 3
18171: PPUSH
18172: LD_INT 4
18174: PPUSH
18175: CALL_OW 332
// if IsOK ( Dolgov ) then
18179: LD_EXP 45
18183: PPUSH
18184: CALL_OW 302
18188: IFFALSE 18204
// Say ( Dolgov , DVsevolod-Dol-6 ) else
18190: LD_EXP 45
18194: PPUSH
18195: LD_STRING DVsevolod-Dol-6
18197: PPUSH
18198: CALL_OW 88
18202: GO 18278
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-Dol-6 ,  , false , true ) ;
18204: LD_INT 22
18206: PUSH
18207: LD_INT 3
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 21
18216: PUSH
18217: LD_INT 1
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 50
18226: PUSH
18227: EMPTY
18228: LIST
18229: PUSH
18230: LD_INT 26
18232: PUSH
18233: LD_INT 1
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 23
18242: PUSH
18243: LD_INT 3
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: PPUSH
18257: CALL_OW 69
18261: PPUSH
18262: LD_STRING DVsevolod-Dol-6
18264: PPUSH
18265: LD_STRING 
18267: PPUSH
18268: LD_INT 0
18270: PPUSH
18271: LD_INT 1
18273: PPUSH
18274: CALL 12102 0 5
// Say ( Burlak , DVsevolod-Bur-7 ) ;
18278: LD_EXP 39
18282: PPUSH
18283: LD_STRING DVsevolod-Bur-7
18285: PPUSH
18286: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-7 ) ;
18290: LD_EXP 51
18294: PPUSH
18295: LD_STRING DVsevolod-Vse-7
18297: PPUSH
18298: CALL_OW 94
// DialogueOff ;
18302: CALL_OW 7
// ChangeMissionObjectives ( MVsevolod ) ;
18306: LD_STRING MVsevolod
18308: PPUSH
18309: CALL_OW 337
// enableVsevolodCounter = true ;
18313: LD_ADDR_EXP 22
18317: PUSH
18318: LD_INT 1
18320: ST_TO_ADDR
// canGoNorth = true ;
18321: LD_ADDR_EXP 21
18325: PUSH
18326: LD_INT 1
18328: ST_TO_ADDR
// PrepareSoldiersInBunkers ;
18329: CALL 3979 0 0
// wait ( 0 0$7 ) ;
18333: LD_INT 245
18335: PPUSH
18336: CALL_OW 67
// belkovSavedIn02 = TestCharacters ( 02_Belkov ) ;
18340: LD_ADDR_VAR 0 1
18344: PUSH
18345: LD_STRING 02_Belkov
18347: PPUSH
18348: CALL_OW 28
18352: ST_TO_ADDR
// DialogueOn ;
18353: CALL_OW 6
// if belkovSavedIn02 then
18357: LD_VAR 0 1
18361: IFFALSE 18562
// begin if IsOK ( Gleb ) then
18363: LD_EXP 42
18367: PPUSH
18368: CALL_OW 302
18372: IFFALSE 18386
// Say ( Gleb , DHelp1-Glb-1 ) ;
18374: LD_EXP 42
18378: PPUSH
18379: LD_STRING DHelp1-Glb-1
18381: PPUSH
18382: CALL_OW 88
// if IsOK ( Dolgov ) then
18386: LD_EXP 45
18390: PPUSH
18391: CALL_OW 302
18395: IFFALSE 18409
// Say ( Dolgov , DHelp1-Dol-1 ) ;
18397: LD_EXP 45
18401: PPUSH
18402: LD_STRING DHelp1-Dol-1
18404: PPUSH
18405: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Gleb , Dolgov , Titov ] ;
18409: LD_ADDR_VAR 0 2
18413: PUSH
18414: LD_INT 22
18416: PUSH
18417: LD_INT 3
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 21
18426: PUSH
18427: LD_INT 1
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 50
18436: PUSH
18437: EMPTY
18438: LIST
18439: PUSH
18440: LD_INT 26
18442: PUSH
18443: LD_INT 1
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 23
18452: PUSH
18453: LD_INT 3
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: PPUSH
18467: CALL_OW 69
18471: PUSH
18472: LD_EXP 42
18476: PUSH
18477: LD_EXP 45
18481: PUSH
18482: LD_EXP 44
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: LIST
18491: DIFF
18492: ST_TO_ADDR
// DialogRandom ( tmp , DHelp1-RSol1-1 ,  , false , true ) ;
18493: LD_VAR 0 2
18497: PPUSH
18498: LD_STRING DHelp1-RSol1-1
18500: PPUSH
18501: LD_STRING 
18503: PPUSH
18504: LD_INT 0
18506: PPUSH
18507: LD_INT 1
18509: PPUSH
18510: CALL 12102 0 5
// if IsOK ( Titov ) then
18514: LD_EXP 44
18518: PPUSH
18519: CALL_OW 302
18523: IFFALSE 18537
// Say ( Titov , DHelp1-Tit-1 ) ;
18525: LD_EXP 44
18529: PPUSH
18530: LD_STRING DHelp1-Tit-1
18532: PPUSH
18533: CALL_OW 88
// if IsOK ( Gleb ) then
18537: LD_EXP 42
18541: PPUSH
18542: CALL_OW 302
18546: IFFALSE 18560
// Say ( Gleb , DHelp1-Glb-2 ) ;
18548: LD_EXP 42
18552: PPUSH
18553: LD_STRING DHelp1-Glb-2
18555: PPUSH
18556: CALL_OW 88
// end else
18560: GO 18773
// begin if IsOK ( Titov ) then
18562: LD_EXP 44
18566: PPUSH
18567: CALL_OW 302
18571: IFFALSE 18585
// Say ( Titov , DHelp2-Tit-1 ) ;
18573: LD_EXP 44
18577: PPUSH
18578: LD_STRING DHelp2-Tit-1
18580: PPUSH
18581: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Gleb , Titov ] ;
18585: LD_ADDR_VAR 0 2
18589: PUSH
18590: LD_INT 22
18592: PUSH
18593: LD_INT 3
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 21
18602: PUSH
18603: LD_INT 1
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 50
18612: PUSH
18613: EMPTY
18614: LIST
18615: PUSH
18616: LD_INT 26
18618: PUSH
18619: LD_INT 1
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PUSH
18626: LD_INT 23
18628: PUSH
18629: LD_INT 3
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: PPUSH
18643: CALL_OW 69
18647: PUSH
18648: LD_EXP 42
18652: PUSH
18653: LD_EXP 44
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: DIFF
18662: ST_TO_ADDR
// speaker = DialogRandom ( tmp , DHelp2-RSol1-1 ,  , false , true ) ;
18663: LD_ADDR_VAR 0 3
18667: PUSH
18668: LD_VAR 0 2
18672: PPUSH
18673: LD_STRING DHelp2-RSol1-1
18675: PPUSH
18676: LD_STRING 
18678: PPUSH
18679: LD_INT 0
18681: PPUSH
18682: LD_INT 1
18684: PPUSH
18685: CALL 12102 0 5
18689: ST_TO_ADDR
// if IsOK ( Gleb ) then
18690: LD_EXP 42
18694: PPUSH
18695: CALL_OW 302
18699: IFFALSE 18713
// Say ( Gleb , DHelp2-Glb-1 ) ;
18701: LD_EXP 42
18705: PPUSH
18706: LD_STRING DHelp2-Glb-1
18708: PPUSH
18709: CALL_OW 88
// tmp = tmp diff speaker ;
18713: LD_ADDR_VAR 0 2
18717: PUSH
18718: LD_VAR 0 2
18722: PUSH
18723: LD_VAR 0 3
18727: DIFF
18728: ST_TO_ADDR
// DialogRandom ( tmp , DHelp2-RSol2-1 ,  , false , true ) ;
18729: LD_VAR 0 2
18733: PPUSH
18734: LD_STRING DHelp2-RSol2-1
18736: PPUSH
18737: LD_STRING 
18739: PPUSH
18740: LD_INT 0
18742: PPUSH
18743: LD_INT 1
18745: PPUSH
18746: CALL 12102 0 5
// if IsOK ( Titov ) then
18750: LD_EXP 44
18754: PPUSH
18755: CALL_OW 302
18759: IFFALSE 18773
// Say ( Titov , DHelp2-Tit-2 ) ;
18761: LD_EXP 44
18765: PPUSH
18766: LD_STRING DHelp2-Tit-2
18768: PPUSH
18769: CALL_OW 88
// end ; Say ( Burlak , DHelp3-Bur-1 ) ;
18773: LD_EXP 39
18777: PPUSH
18778: LD_STRING DHelp3-Bur-1
18780: PPUSH
18781: CALL_OW 88
// if IsOK ( Lipshchin ) then
18785: LD_EXP 46
18789: PPUSH
18790: CALL_OW 302
18794: IFFALSE 18810
// Say ( Lipshchin , DHelp3-Lip-1 ) else
18796: LD_EXP 46
18800: PPUSH
18801: LD_STRING DHelp3-Lip-1
18803: PPUSH
18804: CALL_OW 88
18808: GO 18884
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-Dol-6 ,  , false , true ) ;
18810: LD_INT 22
18812: PUSH
18813: LD_INT 3
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 21
18822: PUSH
18823: LD_INT 1
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 50
18832: PUSH
18833: EMPTY
18834: LIST
18835: PUSH
18836: LD_INT 26
18838: PUSH
18839: LD_INT 1
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 23
18848: PUSH
18849: LD_INT 3
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: PPUSH
18863: CALL_OW 69
18867: PPUSH
18868: LD_STRING DVsevolod-Dol-6
18870: PPUSH
18871: LD_STRING 
18873: PPUSH
18874: LD_INT 0
18876: PPUSH
18877: LD_INT 1
18879: PPUSH
18880: CALL 12102 0 5
// Say ( Burlak , DHelp3-Bur-2 ) ;
18884: LD_EXP 39
18888: PPUSH
18889: LD_STRING DHelp3-Bur-2
18891: PPUSH
18892: CALL_OW 88
// DialogueOff ;
18896: CALL_OW 7
// end ;
18900: PPOPN 3
18902: END
// every 0 0$1 trigger claimOvsyenkoBase and not FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] , [ f_type , unit_vehicle ] ] ] ) and FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
18903: LD_EXP 15
18907: PUSH
18908: LD_INT 3
18910: PPUSH
18911: LD_INT 22
18913: PUSH
18914: LD_INT 3
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 2
18923: PUSH
18924: LD_INT 21
18926: PUSH
18927: LD_INT 1
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 59
18936: PUSH
18937: EMPTY
18938: LIST
18939: PUSH
18940: LD_INT 21
18942: PUSH
18943: LD_INT 2
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PPUSH
18960: CALL_OW 70
18964: NOT
18965: AND
18966: PUSH
18967: LD_INT 3
18969: PPUSH
18970: LD_INT 22
18972: PUSH
18973: LD_INT 1
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 2
18982: PUSH
18983: LD_INT 21
18985: PUSH
18986: LD_INT 1
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 21
18995: PUSH
18996: LD_INT 2
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: LIST
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PPUSH
19012: CALL_OW 70
19016: AND
19017: IFFALSE 19184
19019: GO 19021
19021: DISABLE
// begin lostAgainBase = true ;
19022: LD_ADDR_EXP 17
19026: PUSH
19027: LD_INT 1
19029: ST_TO_ADDR
// SetSide ( FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , 1 ) ;
19030: LD_INT 3
19032: PPUSH
19033: LD_INT 22
19035: PUSH
19036: LD_INT 3
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 21
19045: PUSH
19046: LD_INT 3
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PPUSH
19057: CALL_OW 70
19061: PPUSH
19062: LD_INT 1
19064: PPUSH
19065: CALL_OW 235
// if IsOK ( Gleb ) then
19069: LD_EXP 42
19073: PPUSH
19074: CALL_OW 302
19078: IFFALSE 19104
// begin Say ( Gleb , DOvsyenkoCaptured-Glb-1 ) ;
19080: LD_EXP 42
19084: PPUSH
19085: LD_STRING DOvsyenkoCaptured-Glb-1
19087: PPUSH
19088: CALL_OW 88
// Say ( Burlak , DOvsyenkoCaptured-Bur-1 ) ;
19092: LD_EXP 39
19096: PPUSH
19097: LD_STRING DOvsyenkoCaptured-Bur-1
19099: PPUSH
19100: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Gleb , DOvsyenkoCaptured-RSol1-1 ,  , false , true ) ;
19104: LD_INT 22
19106: PUSH
19107: LD_INT 3
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 21
19116: PUSH
19117: LD_INT 1
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 50
19126: PUSH
19127: EMPTY
19128: LIST
19129: PUSH
19130: LD_INT 26
19132: PUSH
19133: LD_INT 1
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 23
19142: PUSH
19143: LD_INT 3
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: PPUSH
19157: CALL_OW 69
19161: PUSH
19162: LD_EXP 42
19166: DIFF
19167: PPUSH
19168: LD_STRING DOvsyenkoCaptured-RSol1-1
19170: PPUSH
19171: LD_STRING 
19173: PPUSH
19174: LD_INT 0
19176: PPUSH
19177: LD_INT 1
19179: PPUSH
19180: CALL 12102 0 5
// end ;
19184: END
// every 0 0$1 trigger FilterUnitsInArea ( TrapArea , [ [ f_side , 3 ] , [ f_ok ] ] ) do
19185: LD_INT 12
19187: PPUSH
19188: LD_INT 22
19190: PUSH
19191: LD_INT 3
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 50
19200: PUSH
19201: EMPTY
19202: LIST
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PPUSH
19208: CALL_OW 70
19212: IFFALSE 19221
19214: GO 19216
19216: DISABLE
// PrepareTrap ;
19217: CALL 3800 0 0
19221: END
// every 0 0$1 trigger not dial_TrapDialogBlocker do var tmp , speaker , unit ;
19222: LD_EXP 11
19226: NOT
19227: IFFALSE 19445
19229: GO 19231
19231: DISABLE
19232: LD_INT 0
19234: PPUSH
19235: PPUSH
19236: PPUSH
// begin enable ;
19237: ENABLE
// for unit in trapTeam do
19238: LD_ADDR_VAR 0 3
19242: PUSH
19243: LD_EXP 62
19247: PUSH
19248: FOR_IN
19249: IFFALSE 19443
// if See ( 3 , unit ) then
19251: LD_INT 3
19253: PPUSH
19254: LD_VAR 0 3
19258: PPUSH
19259: CALL_OW 292
19263: IFFALSE 19441
// begin dial_TrapDialogBlocker = true ;
19265: LD_ADDR_EXP 11
19269: PUSH
19270: LD_INT 1
19272: ST_TO_ADDR
// DialogueOn ;
19273: CALL_OW 6
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Gleb ;
19277: LD_ADDR_VAR 0 1
19281: PUSH
19282: LD_INT 22
19284: PUSH
19285: LD_INT 3
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 21
19294: PUSH
19295: LD_INT 1
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 50
19304: PUSH
19305: EMPTY
19306: LIST
19307: PUSH
19308: LD_INT 26
19310: PUSH
19311: LD_INT 1
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 23
19320: PUSH
19321: LD_INT 3
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: PPUSH
19335: CALL_OW 69
19339: PUSH
19340: LD_EXP 42
19344: DIFF
19345: ST_TO_ADDR
// speaker = DialogRandom ( tmp , DPartyAttacked-RSol1-1 ,  , false , true ) ;
19346: LD_ADDR_VAR 0 2
19350: PUSH
19351: LD_VAR 0 1
19355: PPUSH
19356: LD_STRING DPartyAttacked-RSol1-1
19358: PPUSH
19359: LD_STRING 
19361: PPUSH
19362: LD_INT 0
19364: PPUSH
19365: LD_INT 1
19367: PPUSH
19368: CALL 12102 0 5
19372: ST_TO_ADDR
// tmp = tmp diff speaker ;
19373: LD_ADDR_VAR 0 1
19377: PUSH
19378: LD_VAR 0 1
19382: PUSH
19383: LD_VAR 0 2
19387: DIFF
19388: ST_TO_ADDR
// if IsOK ( Gleb ) then
19389: LD_EXP 42
19393: PPUSH
19394: CALL_OW 302
19398: IFFALSE 19412
// Say ( Gleb , DPartyAttacked-Glb-1 ) ;
19400: LD_EXP 42
19404: PPUSH
19405: LD_STRING DPartyAttacked-Glb-1
19407: PPUSH
19408: CALL_OW 88
// DialogRandom ( tmp , DPartyAttacked-RSol1-2 ,  , false , true ) ;
19412: LD_VAR 0 1
19416: PPUSH
19417: LD_STRING DPartyAttacked-RSol1-2
19419: PPUSH
19420: LD_STRING 
19422: PPUSH
19423: LD_INT 0
19425: PPUSH
19426: LD_INT 1
19428: PPUSH
19429: CALL 12102 0 5
// DialogueOff ;
19433: CALL_OW 7
// exit ;
19437: POP
19438: POP
19439: GO 19445
// end ;
19441: GO 19248
19443: POP
19444: POP
// end ;
19445: PPOPN 3
19447: END
// every 0 0$1 trigger not savedVsevolod and IsOK ( Vsevolod ) and FilterUnitsInArea ( TerminalBaseArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ [ f_type , unit_human ] , [ f_nation , nation_russian ] ] , [ f_type , unit_vehicle ] ] ] ) do var nearUnit , unit , maleRandomUnits ;
19448: LD_EXP 19
19452: NOT
19453: PUSH
19454: LD_EXP 51
19458: PPUSH
19459: CALL_OW 302
19463: AND
19464: PUSH
19465: LD_INT 4
19467: PPUSH
19468: LD_INT 22
19470: PUSH
19471: LD_INT 3
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 50
19480: PUSH
19481: EMPTY
19482: LIST
19483: PUSH
19484: LD_INT 2
19486: PUSH
19487: LD_INT 21
19489: PUSH
19490: LD_INT 1
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 23
19499: PUSH
19500: LD_INT 3
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 21
19513: PUSH
19514: LD_INT 2
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: LIST
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: LIST
19530: PPUSH
19531: CALL_OW 70
19535: AND
19536: IFFALSE 20178
19538: GO 19540
19540: DISABLE
19541: LD_INT 0
19543: PPUSH
19544: PPUSH
19545: PPUSH
// begin savedVsevolod = true ;
19546: LD_ADDR_EXP 19
19550: PUSH
19551: LD_INT 1
19553: ST_TO_ADDR
// ChangeMissionObjectives ( MVsevolodOut ) ;
19554: LD_STRING MVsevolodOut
19556: PPUSH
19557: CALL_OW 337
// unit = FilterUnitsInArea ( TerminalBaseArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ [ f_type , unit_human ] , [ f_nation , nation_russian ] ] , [ f_type , unit_vehicle ] ] ] ) ;
19561: LD_ADDR_VAR 0 2
19565: PUSH
19566: LD_INT 4
19568: PPUSH
19569: LD_INT 22
19571: PUSH
19572: LD_INT 3
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 50
19581: PUSH
19582: EMPTY
19583: LIST
19584: PUSH
19585: LD_INT 2
19587: PUSH
19588: LD_INT 21
19590: PUSH
19591: LD_INT 1
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 23
19600: PUSH
19601: LD_INT 3
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 21
19614: PUSH
19615: LD_INT 2
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: LIST
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: LIST
19631: PPUSH
19632: CALL_OW 70
19636: ST_TO_ADDR
// unit = unit [ 1 ] ;
19637: LD_ADDR_VAR 0 2
19641: PUSH
19642: LD_VAR 0 2
19646: PUSH
19647: LD_INT 1
19649: ARRAY
19650: ST_TO_ADDR
// if GetType ( unit ) = unit_vehicle then
19651: LD_VAR 0 2
19655: PPUSH
19656: CALL_OW 247
19660: PUSH
19661: LD_INT 2
19663: EQUAL
19664: IFFALSE 19685
// unit = UnitsInside ( unit ) [ 1 ] ;
19666: LD_ADDR_VAR 0 2
19670: PUSH
19671: LD_VAR 0 2
19675: PPUSH
19676: CALL_OW 313
19680: PUSH
19681: LD_INT 1
19683: ARRAY
19684: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
19685: LD_INT 22
19687: PUSH
19688: LD_INT 6
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PPUSH
19695: CALL_OW 69
19699: PPUSH
19700: LD_INT 3
19702: PPUSH
19703: CALL_OW 235
// if not unit = Burlak then
19707: LD_VAR 0 2
19711: PUSH
19712: LD_EXP 39
19716: EQUAL
19717: NOT
19718: IFFALSE 19895
// begin vsevolodWaitGorky = true ;
19720: LD_ADDR_EXP 20
19724: PUSH
19725: LD_INT 1
19727: ST_TO_ADDR
// DialogueOn ;
19728: CALL_OW 6
// Say ( Vsevolod , DOtherMeetVsev-Vse-1 ) ;
19732: LD_EXP 51
19736: PPUSH
19737: LD_STRING DOtherMeetVsev-Vse-1
19739: PPUSH
19740: CALL_OW 88
// if GetSex ( unit ) = sex_female then
19744: LD_VAR 0 2
19748: PPUSH
19749: CALL_OW 258
19753: PUSH
19754: LD_INT 2
19756: EQUAL
19757: IFFALSE 19877
// begin maleRandomUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff vsevolodTeam ;
19759: LD_ADDR_VAR 0 3
19763: PUSH
19764: LD_INT 22
19766: PUSH
19767: LD_INT 3
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 21
19776: PUSH
19777: LD_INT 1
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 50
19786: PUSH
19787: EMPTY
19788: LIST
19789: PUSH
19790: LD_INT 26
19792: PUSH
19793: LD_INT 1
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 23
19802: PUSH
19803: LD_INT 3
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: PPUSH
19817: CALL_OW 69
19821: PUSH
19822: LD_EXP 52
19826: DIFF
19827: ST_TO_ADDR
// maleRandomUnits = maleRandomUnits diff Gleb ;
19828: LD_ADDR_VAR 0 3
19832: PUSH
19833: LD_VAR 0 3
19837: PUSH
19838: LD_EXP 42
19842: DIFF
19843: ST_TO_ADDR
// if maleRandomUnits then
19844: LD_VAR 0 3
19848: IFFALSE 19875
// DialogRandom ( maleRandomUnits [ 1 ] , DOtherMeetVsev-RSol1-1 ,  , false , true ) ;
19850: LD_VAR 0 3
19854: PUSH
19855: LD_INT 1
19857: ARRAY
19858: PPUSH
19859: LD_STRING DOtherMeetVsev-RSol1-1
19861: PPUSH
19862: LD_STRING 
19864: PPUSH
19865: LD_INT 0
19867: PPUSH
19868: LD_INT 1
19870: PPUSH
19871: CALL 12102 0 5
// end else
19875: GO 19889
// Say ( unit , DOtherMeetVsev-RSol1-1 ) ;
19877: LD_VAR 0 2
19881: PPUSH
19882: LD_STRING DOtherMeetVsev-RSol1-1
19884: PPUSH
19885: CALL_OW 88
// DialogueOff ;
19889: CALL_OW 7
// end else
19893: GO 20178
// begin DialogueOn ;
19895: CALL_OW 6
// Say ( Vsevolod , DMeetVsev-Vse-1 ) ;
19899: LD_EXP 51
19903: PPUSH
19904: LD_STRING DMeetVsev-Vse-1
19906: PPUSH
19907: CALL_OW 88
// Say ( Burlak , DMeetVsev-Bur-1 ) ;
19911: LD_EXP 39
19915: PPUSH
19916: LD_STRING DMeetVsev-Bur-1
19918: PPUSH
19919: CALL_OW 88
// if lostAgainBase then
19923: LD_EXP 17
19927: IFFALSE 19967
// begin Say ( Vsevolod , DMeetVsev2-Vse-1 ) ;
19929: LD_EXP 51
19933: PPUSH
19934: LD_STRING DMeetVsev2-Vse-1
19936: PPUSH
19937: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-1 ) ;
19941: LD_EXP 39
19945: PPUSH
19946: LD_STRING DMeetVsev2-Bur-1
19948: PPUSH
19949: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-2 ) ;
19953: LD_EXP 51
19957: PPUSH
19958: LD_STRING DMeetVsev2-Vse-2
19960: PPUSH
19961: CALL_OW 88
// end else
19965: GO 20003
// begin Say ( Vsevolod , DMeetVsev2-Vse-2a ) ;
19967: LD_EXP 51
19971: PPUSH
19972: LD_STRING DMeetVsev2-Vse-2a
19974: PPUSH
19975: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-2 ) ;
19979: LD_EXP 39
19983: PPUSH
19984: LD_STRING DMeetVsev2-Bur-2
19986: PPUSH
19987: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-3 ) ;
19991: LD_EXP 51
19995: PPUSH
19996: LD_STRING DMeetVsev2-Vse-3
19998: PPUSH
19999: CALL_OW 88
// end ; Say ( Burlak , DMeetVsev3-Bur-1 ) ;
20003: LD_EXP 39
20007: PPUSH
20008: LD_STRING DMeetVsev3-Bur-1
20010: PPUSH
20011: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-1 ) ;
20015: LD_EXP 51
20019: PPUSH
20020: LD_STRING DMeetVsev3-Vse-1
20022: PPUSH
20023: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-2 ) ;
20027: LD_EXP 39
20031: PPUSH
20032: LD_STRING DMeetVsev3-Bur-2
20034: PPUSH
20035: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-2 ) ;
20039: LD_EXP 51
20043: PPUSH
20044: LD_STRING DMeetVsev3-Vse-2
20046: PPUSH
20047: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-3 ) ;
20051: LD_EXP 39
20055: PPUSH
20056: LD_STRING DMeetVsev3-Bur-3
20058: PPUSH
20059: CALL_OW 88
// if stevensStatus = 0 then
20063: LD_EXP 4
20067: PUSH
20068: LD_INT 0
20070: EQUAL
20071: IFFALSE 20085
// Say ( Burlak , DMeetVsev4-Bur-1 ) ;
20073: LD_EXP 39
20077: PPUSH
20078: LD_STRING DMeetVsev4-Bur-1
20080: PPUSH
20081: CALL_OW 88
// Say ( Burlak , DMeetVsev5-Bur-1 ) ;
20085: LD_EXP 39
20089: PPUSH
20090: LD_STRING DMeetVsev5-Bur-1
20092: PPUSH
20093: CALL_OW 88
// Say ( Vsevolod , DMeetVsev5-Vse-1 ) ;
20097: LD_EXP 51
20101: PPUSH
20102: LD_STRING DMeetVsev5-Vse-1
20104: PPUSH
20105: CALL_OW 88
// Say ( Burlak , DMeetVsev6-Bur-1 ) ;
20109: LD_EXP 39
20113: PPUSH
20114: LD_STRING DMeetVsev6-Bur-1
20116: PPUSH
20117: CALL_OW 88
// Say ( Vsevolod , DMeetVsev6-Vse-1 ) ;
20121: LD_EXP 51
20125: PPUSH
20126: LD_STRING DMeetVsev6-Vse-1
20128: PPUSH
20129: CALL_OW 88
// DialogueOff ;
20133: CALL_OW 7
// wait ( 0 0$20 ) ;
20137: LD_INT 700
20139: PPUSH
20140: CALL_OW 67
// PrepareConvoy ;
20144: CALL 4023 0 0
// ComMoveXY ( convoyTeam , 57 , 40 ) ;
20148: LD_EXP 63
20152: PPUSH
20153: LD_INT 57
20155: PPUSH
20156: LD_INT 40
20158: PPUSH
20159: CALL_OW 111
// AddComMoveXY ( convoyTeam , 37 , 59 ) ;
20163: LD_EXP 63
20167: PPUSH
20168: LD_INT 37
20170: PPUSH
20171: LD_INT 59
20173: PPUSH
20174: CALL_OW 171
// end ; end ;
20178: PPOPN 3
20180: END
// every 0 0$1 trigger vsevolodWaitGorky and GetDistUnits ( Vsevolod , Burlak ) <= 7 do
20181: LD_EXP 20
20185: PUSH
20186: LD_EXP 51
20190: PPUSH
20191: LD_EXP 39
20195: PPUSH
20196: CALL_OW 296
20200: PUSH
20201: LD_INT 7
20203: LESSEQUAL
20204: AND
20205: IFFALSE 20501
20207: GO 20209
20209: DISABLE
// begin vsevolodWaitGorky = false ;
20210: LD_ADDR_EXP 20
20214: PUSH
20215: LD_INT 0
20217: ST_TO_ADDR
// DialogueOn ;
20218: CALL_OW 6
// Say ( Vsevolod , DMeetVsev-Vse-1 ) ;
20222: LD_EXP 51
20226: PPUSH
20227: LD_STRING DMeetVsev-Vse-1
20229: PPUSH
20230: CALL_OW 88
// Say ( Burlak , DMeetVsev-Bur-1 ) ;
20234: LD_EXP 39
20238: PPUSH
20239: LD_STRING DMeetVsev-Bur-1
20241: PPUSH
20242: CALL_OW 88
// if lostAgainBase then
20246: LD_EXP 17
20250: IFFALSE 20290
// begin Say ( Vsevolod , DMeetVsev2-Vse-1 ) ;
20252: LD_EXP 51
20256: PPUSH
20257: LD_STRING DMeetVsev2-Vse-1
20259: PPUSH
20260: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-1 ) ;
20264: LD_EXP 39
20268: PPUSH
20269: LD_STRING DMeetVsev2-Bur-1
20271: PPUSH
20272: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-2 ) ;
20276: LD_EXP 51
20280: PPUSH
20281: LD_STRING DMeetVsev2-Vse-2
20283: PPUSH
20284: CALL_OW 88
// end else
20288: GO 20326
// begin Say ( Vsevolod , DMeetVsev2-Vse-2a ) ;
20290: LD_EXP 51
20294: PPUSH
20295: LD_STRING DMeetVsev2-Vse-2a
20297: PPUSH
20298: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-2 ) ;
20302: LD_EXP 39
20306: PPUSH
20307: LD_STRING DMeetVsev2-Bur-2
20309: PPUSH
20310: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-3 ) ;
20314: LD_EXP 51
20318: PPUSH
20319: LD_STRING DMeetVsev2-Vse-3
20321: PPUSH
20322: CALL_OW 88
// end ; Say ( Burlak , DMeetVsev3-Bur-1 ) ;
20326: LD_EXP 39
20330: PPUSH
20331: LD_STRING DMeetVsev3-Bur-1
20333: PPUSH
20334: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-1 ) ;
20338: LD_EXP 51
20342: PPUSH
20343: LD_STRING DMeetVsev3-Vse-1
20345: PPUSH
20346: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-2 ) ;
20350: LD_EXP 39
20354: PPUSH
20355: LD_STRING DMeetVsev3-Bur-2
20357: PPUSH
20358: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-2 ) ;
20362: LD_EXP 51
20366: PPUSH
20367: LD_STRING DMeetVsev3-Vse-2
20369: PPUSH
20370: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-3 ) ;
20374: LD_EXP 39
20378: PPUSH
20379: LD_STRING DMeetVsev3-Bur-3
20381: PPUSH
20382: CALL_OW 88
// if stevensStatus = 0 then
20386: LD_EXP 4
20390: PUSH
20391: LD_INT 0
20393: EQUAL
20394: IFFALSE 20408
// Say ( Burlak , DMeetVsev4-Bur-1 ) ;
20396: LD_EXP 39
20400: PPUSH
20401: LD_STRING DMeetVsev4-Bur-1
20403: PPUSH
20404: CALL_OW 88
// Say ( Burlak , DMeetVsev5-Bur-1 ) ;
20408: LD_EXP 39
20412: PPUSH
20413: LD_STRING DMeetVsev5-Bur-1
20415: PPUSH
20416: CALL_OW 88
// Say ( Vsevolod , DMeetVsev5-Vse-1 ) ;
20420: LD_EXP 51
20424: PPUSH
20425: LD_STRING DMeetVsev5-Vse-1
20427: PPUSH
20428: CALL_OW 88
// Say ( Vsevolod , DMeetVsev6-Vse-1 ) ;
20432: LD_EXP 51
20436: PPUSH
20437: LD_STRING DMeetVsev6-Vse-1
20439: PPUSH
20440: CALL_OW 88
// Say ( Burlak , DMeetVsev6-Bur-1 ) ;
20444: LD_EXP 39
20448: PPUSH
20449: LD_STRING DMeetVsev6-Bur-1
20451: PPUSH
20452: CALL_OW 88
// DialogueOff ;
20456: CALL_OW 7
// wait ( 0 0$20 ) ;
20460: LD_INT 700
20462: PPUSH
20463: CALL_OW 67
// PrepareConvoy ;
20467: CALL 4023 0 0
// ComMoveXY ( convoyTeam , 57 , 40 ) ;
20471: LD_EXP 63
20475: PPUSH
20476: LD_INT 57
20478: PPUSH
20479: LD_INT 40
20481: PPUSH
20482: CALL_OW 111
// AddComMoveXY ( convoyTeam , 37 , 59 ) ;
20486: LD_EXP 63
20490: PPUSH
20491: LD_INT 37
20493: PPUSH
20494: LD_INT 59
20496: PPUSH
20497: CALL_OW 171
// end ;
20501: END
// every 0 0$1 trigger not dial_ConvoyDialogBlocker do var tmp , speaker , unit ;
20502: LD_EXP 12
20506: NOT
20507: IFFALSE 20637
20509: GO 20511
20511: DISABLE
20512: LD_INT 0
20514: PPUSH
20515: PPUSH
20516: PPUSH
// begin enable ;
20517: ENABLE
// for unit in convoyTeam do
20518: LD_ADDR_VAR 0 3
20522: PUSH
20523: LD_EXP 63
20527: PUSH
20528: FOR_IN
20529: IFFALSE 20635
// if See ( 3 , unit ) and not IsInArea ( unit , InsideBaseArea ) then
20531: LD_INT 3
20533: PPUSH
20534: LD_VAR 0 3
20538: PPUSH
20539: CALL_OW 292
20543: PUSH
20544: LD_VAR 0 3
20548: PPUSH
20549: LD_INT 19
20551: PPUSH
20552: CALL_OW 308
20556: NOT
20557: AND
20558: IFFALSE 20633
// begin dial_ConvoyDialogBlocker = true ;
20560: LD_ADDR_EXP 12
20564: PUSH
20565: LD_INT 1
20567: ST_TO_ADDR
// DialogueOn ;
20568: CALL_OW 6
// speaker = UnitFilter ( convoyTeam , [ f_type , unit_human ] ) [ 1 ] ;
20572: LD_ADDR_VAR 0 2
20576: PUSH
20577: LD_EXP 63
20581: PPUSH
20582: LD_INT 21
20584: PUSH
20585: LD_INT 1
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PPUSH
20592: CALL_OW 72
20596: PUSH
20597: LD_INT 1
20599: ARRAY
20600: ST_TO_ADDR
// Say ( speaker , DTruck-Sol1-1 ) ;
20601: LD_VAR 0 2
20605: PPUSH
20606: LD_STRING DTruck-Sol1-1
20608: PPUSH
20609: CALL_OW 88
// Say ( Burlak , DTruck-Bur-1 ) ;
20613: LD_EXP 39
20617: PPUSH
20618: LD_STRING DTruck-Bur-1
20620: PPUSH
20621: CALL_OW 88
// DialogueOff ;
20625: CALL_OW 7
// exit ;
20629: POP
20630: POP
20631: GO 20637
// end ;
20633: GO 20528
20635: POP
20636: POP
// end ;
20637: PPOPN 3
20639: END
// every 0 0$1 trigger timeToAttack >= vsevolodSaveTime do
20640: LD_EXP 26
20644: PUSH
20645: LD_EXP 38
20649: GREATEREQUAL
20650: IFFALSE 20689
20652: GO 20654
20654: DISABLE
// begin PrepareAttack ;
20655: CALL 4204 0 0
// ComAgressiveMove ( attackTeam , 60 , 41 ) ;
20659: LD_EXP 64
20663: PPUSH
20664: LD_INT 60
20666: PPUSH
20667: LD_INT 41
20669: PPUSH
20670: CALL_OW 114
// AddComAgressiveMove ( attackTeam , 107 , 125 ) ;
20674: LD_EXP 64
20678: PPUSH
20679: LD_INT 107
20681: PPUSH
20682: LD_INT 125
20684: PPUSH
20685: CALL_OW 174
// end ;
20689: END
// every 1 trigger not savedVsevolod and GetLives ( Vsevolod ) <= 500 do
20690: LD_EXP 19
20694: NOT
20695: PUSH
20696: LD_EXP 51
20700: PPUSH
20701: CALL_OW 256
20705: PUSH
20706: LD_INT 500
20708: LESSEQUAL
20709: AND
20710: IFFALSE 20735
20712: GO 20714
20714: DISABLE
// begin DialogueOn ;
20715: CALL_OW 6
// SayRadio ( Vsevolod , DDieVsev2-Vse-1 ) ;
20719: LD_EXP 51
20723: PPUSH
20724: LD_STRING DDieVsev2-Vse-1
20726: PPUSH
20727: CALL_OW 94
// DialogueOff ;
20731: CALL_OW 7
// end ;
20735: END
// export function Dial_ResearchTauField ; var speaker , sci , randomTalkDialog ; begin
20736: LD_INT 0
20738: PPUSH
20739: PPUSH
20740: PPUSH
20741: PPUSH
// DialogueOn ;
20742: CALL_OW 6
// if IsOK ( Petrosyan ) then
20746: LD_EXP 43
20750: PPUSH
20751: CALL_OW 302
20755: IFFALSE 20771
// Say ( Petrosyan , DStasis-Pty-1 ) else
20757: LD_EXP 43
20761: PPUSH
20762: LD_STRING DStasis-Pty-1
20764: PPUSH
20765: CALL_OW 88
20769: GO 20993
// if IsOK ( Dolgov ) then
20771: LD_EXP 45
20775: PPUSH
20776: CALL_OW 302
20780: IFFALSE 20796
// Say ( Dolgov , DStasis-Dol-1 ) else
20782: LD_EXP 45
20786: PPUSH
20787: LD_STRING DStasis-Dol-1
20789: PPUSH
20790: CALL_OW 88
20794: GO 20993
// begin sci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] , [ f_nation , nation_russian ] ] ) diff Burlak ;
20796: LD_ADDR_VAR 0 3
20800: PUSH
20801: LD_INT 22
20803: PUSH
20804: LD_INT 3
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 21
20813: PUSH
20814: LD_INT 1
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 50
20823: PUSH
20824: EMPTY
20825: LIST
20826: PUSH
20827: LD_INT 26
20829: PUSH
20830: LD_INT 1
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 25
20839: PUSH
20840: LD_INT 4
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 23
20849: PUSH
20850: LD_INT 3
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: PPUSH
20865: CALL_OW 69
20869: PUSH
20870: LD_EXP 39
20874: DIFF
20875: ST_TO_ADDR
// if not sci then
20876: LD_VAR 0 3
20880: NOT
20881: IFFALSE 20952
// sci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Burlak ;
20883: LD_ADDR_VAR 0 3
20887: PUSH
20888: LD_INT 22
20890: PUSH
20891: LD_INT 3
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 21
20900: PUSH
20901: LD_INT 1
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 50
20910: PUSH
20911: EMPTY
20912: LIST
20913: PUSH
20914: LD_INT 26
20916: PUSH
20917: LD_INT 1
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 23
20926: PUSH
20927: LD_INT 3
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: PPUSH
20941: CALL_OW 69
20945: PUSH
20946: LD_EXP 39
20950: DIFF
20951: ST_TO_ADDR
// if sci then
20952: LD_VAR 0 3
20956: IFFALSE 20993
// begin speaker = DialogRandom ( sci , DStasis-RSol1-1 ,  , false , true ) ;
20958: LD_ADDR_VAR 0 2
20962: PUSH
20963: LD_VAR 0 3
20967: PPUSH
20968: LD_STRING DStasis-RSol1-1
20970: PPUSH
20971: LD_STRING 
20973: PPUSH
20974: LD_INT 0
20976: PPUSH
20977: LD_INT 1
20979: PPUSH
20980: CALL 12102 0 5
20984: ST_TO_ADDR
// randomTalkDialog = true ;
20985: LD_ADDR_VAR 0 4
20989: PUSH
20990: LD_INT 1
20992: ST_TO_ADDR
// end ; end ; if IsOK ( Petrosyan ) or IsOK ( Dolgov ) or randomTalkDialog then
20993: LD_EXP 43
20997: PPUSH
20998: CALL_OW 302
21002: PUSH
21003: LD_EXP 45
21007: PPUSH
21008: CALL_OW 302
21012: OR
21013: PUSH
21014: LD_VAR 0 4
21018: OR
21019: IFFALSE 21116
// begin Say ( Burlak , DStasis-Bur-1 ) ;
21021: LD_EXP 39
21025: PPUSH
21026: LD_STRING DStasis-Bur-1
21028: PPUSH
21029: CALL_OW 88
// if IsOK ( Petrosyan ) then
21033: LD_EXP 43
21037: PPUSH
21038: CALL_OW 302
21042: IFFALSE 21058
// Say ( Petrosyan , DStasis-Pty-2 ) else
21044: LD_EXP 43
21048: PPUSH
21049: LD_STRING DStasis-Pty-2
21051: PPUSH
21052: CALL_OW 88
21056: GO 21104
// if IsOK ( Dolgov ) then
21058: LD_EXP 45
21062: PPUSH
21063: CALL_OW 302
21067: IFFALSE 21083
// Say ( Dolgov , DStasis-Dol-2 ) else
21069: LD_EXP 45
21073: PPUSH
21074: LD_STRING DStasis-Dol-2
21076: PPUSH
21077: CALL_OW 88
21081: GO 21104
// DialogRandom ( speaker , DStasis-RSol1-2 ,  , false , true ) ;
21083: LD_VAR 0 2
21087: PPUSH
21088: LD_STRING DStasis-RSol1-2
21090: PPUSH
21091: LD_STRING 
21093: PPUSH
21094: LD_INT 0
21096: PPUSH
21097: LD_INT 1
21099: PPUSH
21100: CALL 12102 0 5
// Say ( Burlak , DStasis-Bur-2 ) ;
21104: LD_EXP 39
21108: PPUSH
21109: LD_STRING DStasis-Bur-2
21111: PPUSH
21112: CALL_OW 88
// end ; DialogueOff ;
21116: CALL_OW 7
// if GetTech ( tech_SibEng , 3 ) = state_researched then
21120: LD_INT 22
21122: PPUSH
21123: LD_INT 3
21125: PPUSH
21126: CALL_OW 321
21130: PUSH
21131: LD_INT 2
21133: EQUAL
21134: IFFALSE 21143
// ChangeMissionObjectives ( MOutResearch ) ;
21136: LD_STRING MOutResearch
21138: PPUSH
21139: CALL_OW 337
// end ;
21143: LD_VAR 0 1
21147: RET
// every 0 0$01 trigger GetTech ( tech_SibEng , 3 ) = state_researched and GetTech ( tech_TauField , 3 ) = state_researched and not dial_EndMissionDialogBlocker do var depots , depot , sibCounter ;
21148: LD_INT 22
21150: PPUSH
21151: LD_INT 3
21153: PPUSH
21154: CALL_OW 321
21158: PUSH
21159: LD_INT 2
21161: EQUAL
21162: PUSH
21163: LD_INT 30
21165: PPUSH
21166: LD_INT 3
21168: PPUSH
21169: CALL_OW 321
21173: PUSH
21174: LD_INT 2
21176: EQUAL
21177: AND
21178: PUSH
21179: LD_EXP 14
21183: NOT
21184: AND
21185: IFFALSE 21528
21187: GO 21189
21189: DISABLE
21190: LD_INT 0
21192: PPUSH
21193: PPUSH
21194: PPUSH
// begin wait ( 0 0$15 ) ;
21195: LD_INT 525
21197: PPUSH
21198: CALL_OW 67
// depots = FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21202: LD_ADDR_VAR 0 1
21206: PUSH
21207: LD_INT 22
21209: PUSH
21210: LD_INT 3
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 50
21219: PUSH
21220: EMPTY
21221: LIST
21222: PUSH
21223: LD_INT 21
21225: PUSH
21226: LD_INT 3
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 2
21235: PUSH
21236: LD_INT 30
21238: PUSH
21239: LD_INT 0
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 30
21248: PUSH
21249: LD_INT 1
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: LIST
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: PPUSH
21267: CALL_OW 69
21271: ST_TO_ADDR
// sibCounter = 0 ;
21272: LD_ADDR_VAR 0 3
21276: PUSH
21277: LD_INT 0
21279: ST_TO_ADDR
// for depot in depots do
21280: LD_ADDR_VAR 0 2
21284: PUSH
21285: LD_VAR 0 1
21289: PUSH
21290: FOR_IN
21291: IFFALSE 21324
// sibCounter = sibCounter + GetResourceType ( GetBase ( depot ) , mat_siberit ) ;
21293: LD_ADDR_VAR 0 3
21297: PUSH
21298: LD_VAR 0 3
21302: PUSH
21303: LD_VAR 0 2
21307: PPUSH
21308: CALL_OW 274
21312: PPUSH
21313: LD_INT 3
21315: PPUSH
21316: CALL_OW 275
21320: PLUS
21321: ST_TO_ADDR
21322: GO 21290
21324: POP
21325: POP
// if sibCounter >= 100 then
21326: LD_VAR 0 3
21330: PUSH
21331: LD_INT 100
21333: GREATEREQUAL
21334: IFFALSE 21520
// begin ChangeMissionObjectives ( MOutMine ) ;
21336: LD_STRING MOutMine
21338: PPUSH
21339: CALL_OW 337
// dial_EndMissionDialogBlocker = true ;
21343: LD_ADDR_EXP 14
21347: PUSH
21348: LD_INT 1
21350: ST_TO_ADDR
// DialogueOn ;
21351: CALL_OW 6
// SayRadio ( Platonov , DNextMiss1-Pla-1 ) ;
21355: LD_EXP 47
21359: PPUSH
21360: LD_STRING DNextMiss1-Pla-1
21362: PPUSH
21363: CALL_OW 94
// if not savedVsevolod then
21367: LD_EXP 19
21371: NOT
21372: IFFALSE 21418
// begin SayRadio ( Platonov , DNextMiss2-Pla-1 ) ;
21374: LD_EXP 47
21378: PPUSH
21379: LD_STRING DNextMiss2-Pla-1
21381: PPUSH
21382: CALL_OW 94
// Say ( Burlak , DNextMiss4-Bur-1 ) ;
21386: LD_EXP 39
21390: PPUSH
21391: LD_STRING DNextMiss4-Bur-1
21393: PPUSH
21394: CALL_OW 88
// SayRadio ( Vsevolod , DDieVsev1-Vse-1 ) ;
21398: LD_EXP 51
21402: PPUSH
21403: LD_STRING DDieVsev1-Vse-1
21405: PPUSH
21406: CALL_OW 94
// ForceFinishGame ;
21410: CALL 22201 0 0
// exit ;
21414: GO 21528
// end else
21416: GO 21454
// begin SayRadio ( Platonov , DNextMiss3-Pla-1 ) ;
21418: LD_EXP 47
21422: PPUSH
21423: LD_STRING DNextMiss3-Pla-1
21425: PPUSH
21426: CALL_OW 94
// SayRadio ( Platonov , DNextMiss4-Pla-1 ) ;
21430: LD_EXP 47
21434: PPUSH
21435: LD_STRING DNextMiss4-Pla-1
21437: PPUSH
21438: CALL_OW 94
// Say ( Burlak , DNextMiss4-Bur-1 ) ;
21442: LD_EXP 39
21446: PPUSH
21447: LD_STRING DNextMiss4-Bur-1
21449: PPUSH
21450: CALL_OW 88
// end ; DialogueOff ;
21454: CALL_OW 7
// SelectCharacters ;
21458: CALL 15376 0 0
// canSpawnReinforces = true ;
21462: LD_ADDR_EXP 23
21466: PUSH
21467: LD_INT 1
21469: ST_TO_ADDR
// canRemoveUnits = true ;
21470: LD_ADDR_EXP 25
21474: PUSH
21475: LD_INT 1
21477: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_friend , true ) ;
21478: LD_INT 1
21480: PPUSH
21481: LD_INT 6
21483: PPUSH
21484: LD_INT 1
21486: PPUSH
21487: LD_INT 1
21489: PPUSH
21490: CALL_OW 80
// SetAreaMapShow ( ExitMapArea , 1 ) ;
21494: LD_INT 14
21496: PPUSH
21497: LD_INT 1
21499: PPUSH
21500: CALL_OW 424
// ChangeMissionObjectives ( MOutResearch ) ;
21504: LD_STRING MOutResearch
21506: PPUSH
21507: CALL_OW 337
// ChangeMissionObjectives ( MCars ) ;
21511: LD_STRING MCars
21513: PPUSH
21514: CALL_OW 337
// exit ;
21518: GO 21528
// end ; wait ( 0 0$10 ) ;
21520: LD_INT 350
21522: PPUSH
21523: CALL_OW 67
// enable ;
21527: ENABLE
// end ;
21528: PPOPN 3
21530: END
// every 0 0$1 trigger canRemoveUnits do var un ;
21531: LD_EXP 25
21535: IFFALSE 21645
21537: GO 21539
21539: DISABLE
21540: LD_INT 0
21542: PPUSH
// begin enable ;
21543: ENABLE
// SetLives ( Vsevolod , 1000 ) ;
21544: LD_EXP 51
21548: PPUSH
21549: LD_INT 1000
21551: PPUSH
21552: CALL_OW 234
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , ExitMapArea ) ;
21556: LD_INT 22
21558: PUSH
21559: LD_INT 6
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 21
21568: PUSH
21569: LD_INT 1
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PPUSH
21580: CALL_OW 69
21584: PPUSH
21585: LD_INT 14
21587: PPUSH
21588: CALL_OW 113
// for un in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
21592: LD_ADDR_VAR 0 1
21596: PUSH
21597: LD_INT 14
21599: PPUSH
21600: LD_INT 22
21602: PUSH
21603: LD_INT 6
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 21
21612: PUSH
21613: LD_INT 1
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PPUSH
21624: CALL_OW 70
21628: PUSH
21629: FOR_IN
21630: IFFALSE 21643
// RemoveUnit ( un ) ;
21632: LD_VAR 0 1
21636: PPUSH
21637: CALL_OW 64
21641: GO 21629
21643: POP
21644: POP
// end ;
21645: PPOPN 1
21647: END
// every 1 trigger not canGoNorth and FilterUnitsInArea ( NorthBlockerArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do var unit ;
21648: LD_EXP 21
21652: NOT
21653: PUSH
21654: LD_INT 15
21656: PPUSH
21657: LD_INT 22
21659: PUSH
21660: LD_INT 3
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: LD_INT 50
21669: PUSH
21670: EMPTY
21671: LIST
21672: PUSH
21673: LD_INT 2
21675: PUSH
21676: LD_INT 21
21678: PUSH
21679: LD_INT 1
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 21
21688: PUSH
21689: LD_INT 2
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: LIST
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: LIST
21705: PPUSH
21706: CALL_OW 70
21710: AND
21711: IFFALSE 21843
21713: GO 21715
21715: DISABLE
21716: LD_INT 0
21718: PPUSH
// begin enable ;
21719: ENABLE
// for unit in FilterUnitsInArea ( NorthBlockerArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
21720: LD_ADDR_VAR 0 1
21724: PUSH
21725: LD_INT 15
21727: PPUSH
21728: LD_INT 22
21730: PUSH
21731: LD_INT 3
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: LD_INT 50
21740: PUSH
21741: EMPTY
21742: LIST
21743: PUSH
21744: LD_INT 2
21746: PUSH
21747: LD_INT 21
21749: PUSH
21750: LD_INT 1
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 21
21759: PUSH
21760: LD_INT 2
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: LIST
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: LIST
21776: PPUSH
21777: CALL_OW 70
21781: PUSH
21782: FOR_IN
21783: IFFALSE 21799
// ComMoveToArea ( unit , NorthBlockerReturnArea ) ;
21785: LD_VAR 0 1
21789: PPUSH
21790: LD_INT 16
21792: PPUSH
21793: CALL_OW 113
21797: GO 21782
21799: POP
21800: POP
// if not dial_NorthBlocker then
21801: LD_EXP 13
21805: NOT
21806: IFFALSE 21843
// begin dial_NorthBlocker = true ;
21808: LD_ADDR_EXP 13
21812: PUSH
21813: LD_INT 1
21815: ST_TO_ADDR
// Say ( Burlak , DMoveNorth-Bur-1 ) ;
21816: LD_EXP 39
21820: PPUSH
21821: LD_STRING DMoveNorth-Bur-1
21823: PPUSH
21824: CALL_OW 88
// wait ( 0 0$5 ) ;
21828: LD_INT 175
21830: PPUSH
21831: CALL_OW 67
// dial_NorthBlocker = false ;
21835: LD_ADDR_EXP 13
21839: PUSH
21840: LD_INT 0
21842: ST_TO_ADDR
// end ; end ;
21843: PPOPN 1
21845: END
// every 2 2$30 trigger canSpawnReinforces do
21846: LD_EXP 23
21850: IFFALSE 21906
21852: GO 21854
21854: DISABLE
// begin SpawnPlatonovReinforces ;
21855: CALL 2897 0 0
// CenterOnXY ( 134 , 233 ) ;
21859: LD_INT 134
21861: PPUSH
21862: LD_INT 233
21864: PPUSH
21865: CALL_OW 84
// if Kirilenkova and IsPlaced ( Kirilenkova ) then
21869: LD_EXP 48
21873: PUSH
21874: LD_EXP 48
21878: PPUSH
21879: CALL_OW 305
21883: AND
21884: IFFALSE 21898
// Say ( Kirilenkova , DMeetKirilenkova-Kir-1 ) ;
21886: LD_EXP 48
21890: PPUSH
21891: LD_STRING DMeetKirilenkova-Kir-1
21893: PPUSH
21894: CALL_OW 88
// canEndMission = true ;
21898: LD_ADDR_EXP 24
21902: PUSH
21903: LD_INT 1
21905: ST_TO_ADDR
// end ; end_of_file
21906: END
// export function Lose_Burlak ; begin
21907: LD_INT 0
21909: PPUSH
// YouLost ( Burlak ) ;
21910: LD_STRING Burlak
21912: PPUSH
21913: CALL_OW 104
// end ;
21917: LD_VAR 0 1
21921: RET
// export function Lose_Gleb ; begin
21922: LD_INT 0
21924: PPUSH
// SayRadio ( Platonov , DKillGleb-Pla-1 ) ;
21925: LD_EXP 47
21929: PPUSH
21930: LD_STRING DKillGleb-Pla-1
21932: PPUSH
21933: CALL_OW 94
// YouLost ( Gleb ) ;
21937: LD_STRING Gleb
21939: PPUSH
21940: CALL_OW 104
// end ;
21944: LD_VAR 0 1
21948: RET
// every 0 0$1 trigger not canEndMission and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_engineer ] , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
21949: LD_EXP 24
21953: NOT
21954: PUSH
21955: LD_INT 22
21957: PUSH
21958: LD_INT 3
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 2
21967: PUSH
21968: LD_INT 25
21970: PUSH
21971: LD_INT 2
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 30
21980: PUSH
21981: LD_INT 1
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 30
21990: PUSH
21991: LD_INT 0
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 30
22000: PUSH
22001: LD_INT 6
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 30
22010: PUSH
22011: LD_INT 7
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 30
22020: PUSH
22021: LD_INT 8
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PPUSH
22041: CALL_OW 69
22045: NOT
22046: AND
22047: IFFALSE 22059
22049: GO 22051
22051: DISABLE
// YouLost ( NoDepotNoEngineerNoLab ) ;
22052: LD_STRING NoDepotNoEngineerNoLab
22054: PPUSH
22055: CALL_OW 104
22059: END
// export function Lose_NoDepotNoEngineerNoLab ; begin
22060: LD_INT 0
22062: PPUSH
// YouLost ( NoDepotNoEngineerNoLab ) ;
22063: LD_STRING NoDepotNoEngineerNoLab
22065: PPUSH
22066: CALL_OW 104
// end ; end_of_file
22070: LD_VAR 0 1
22074: RET
// every 0 0$5 trigger canEndMission and not FilterUnitsExceptArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_and , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ] ) do var units , qr ;
22075: LD_EXP 24
22079: PUSH
22080: LD_INT 14
22082: PPUSH
22083: LD_INT 22
22085: PUSH
22086: LD_INT 3
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 50
22095: PUSH
22096: EMPTY
22097: LIST
22098: PUSH
22099: LD_INT 2
22101: PUSH
22102: LD_INT 21
22104: PUSH
22105: LD_INT 1
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 1
22114: PUSH
22115: LD_INT 21
22117: PUSH
22118: LD_INT 2
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 59
22127: PUSH
22128: EMPTY
22129: LIST
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: LIST
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: LIST
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: LIST
22145: PPUSH
22146: CALL_OW 71
22150: NOT
22151: AND
22152: IFFALSE 22198
22154: GO 22156
22156: DISABLE
22157: LD_INT 0
22159: PPUSH
22160: PPUSH
// begin case Query ( QEndGame ) of 1 :
22161: LD_STRING QEndGame
22163: PPUSH
22164: CALL_OW 97
22168: PUSH
22169: LD_INT 1
22171: DOUBLE
22172: EQUAL
22173: IFTRUE 22177
22175: GO 22196
22177: POP
// begin SetRewards ;
22178: CALL 22225 0 0
// SavePlayerCharacters ;
22182: CALL 22389 0 0
// SaveGlobalVariables ;
22186: CALL 22778 0 0
// YouWin ;
22190: CALL_OW 103
// end ; end ;
22194: GO 22197
22196: POP
// enable ;
22197: ENABLE
// end ;
22198: PPOPN 2
22200: END
// export function ForceFinishGame ; begin
22201: LD_INT 0
22203: PPUSH
// SetRewards ;
22204: CALL 22225 0 0
// SavePlayerCharacters ;
22208: CALL 22389 0 0
// SaveGlobalVariables ;
22212: CALL 22778 0 0
// YouWin ;
22216: CALL_OW 103
// end ;
22220: LD_VAR 0 1
22224: RET
// function SetRewards ; begin
22225: LD_INT 0
22227: PPUSH
// if savedVsevolod then
22228: LD_EXP 19
22232: IFFALSE 22246
// AddMedal ( Vsevolod , 1 ) else
22234: LD_STRING Vsevolod
22236: PPUSH
22237: LD_INT 1
22239: PPUSH
22240: CALL_OW 101
22244: GO 22257
// AddMedal ( Vsevolod , - 1 ) ;
22246: LD_STRING Vsevolod
22248: PPUSH
22249: LD_INT 1
22251: NEG
22252: PPUSH
22253: CALL_OW 101
// if not lostAgainBase then
22257: LD_EXP 17
22261: NOT
22262: IFFALSE 22276
// AddMedal ( Ovsyenko , 1 ) else
22264: LD_STRING Ovsyenko
22266: PPUSH
22267: LD_INT 1
22269: PPUSH
22270: CALL_OW 101
22274: GO 22287
// AddMedal ( Ovsyenko , - 1 ) ;
22276: LD_STRING Ovsyenko
22278: PPUSH
22279: LD_INT 1
22281: NEG
22282: PPUSH
22283: CALL_OW 101
// if GetTech ( tech_MatPred , 3 ) = state_researched then
22287: LD_INT 9
22289: PPUSH
22290: LD_INT 3
22292: PPUSH
22293: CALL_OW 321
22297: PUSH
22298: LD_INT 2
22300: EQUAL
22301: IFFALSE 22315
// AddMedal ( Prediction , 1 ) else
22303: LD_STRING Prediction
22305: PPUSH
22306: LD_INT 1
22308: PPUSH
22309: CALL_OW 101
22313: GO 22326
// AddMedal ( Prediction , - 1 ) ;
22315: LD_STRING Prediction
22317: PPUSH
22318: LD_INT 1
22320: NEG
22321: PPUSH
22322: CALL_OW 101
// GiveMedals ( Main ) ;
22326: LD_STRING Main
22328: PPUSH
22329: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ) ;
22333: LD_INT 22
22335: PUSH
22336: LD_INT 3
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 21
22345: PUSH
22346: LD_INT 1
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: LD_INT 23
22355: PUSH
22356: LD_INT 3
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 50
22365: PUSH
22366: EMPTY
22367: LIST
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: PPUSH
22375: CALL_OW 69
22379: PPUSH
22380: CALL_OW 43
// end ;
22384: LD_VAR 0 1
22388: RET
// function SavePlayerCharacters ; var randomsToSave ; begin
22389: LD_INT 0
22391: PPUSH
22392: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
22393: LD_EXP 39
22397: PPUSH
22398: LD_STRING Burlak
22400: PPUSH
22401: LD_INT 3
22403: PPUSH
22404: CALL 11903 0 3
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
22408: LD_EXP 40
22412: PPUSH
22413: LD_STRING Karamazov
22415: PPUSH
22416: LD_INT 3
22418: PPUSH
22419: CALL 11903 0 3
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
22423: LD_EXP 41
22427: PPUSH
22428: LD_STRING Petrovova
22430: PPUSH
22431: LD_INT 3
22433: PPUSH
22434: CALL 11903 0 3
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
22438: LD_EXP 42
22442: PPUSH
22443: LD_STRING Gleb
22445: PPUSH
22446: LD_INT 3
22448: PPUSH
22449: CALL 11903 0 3
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
22453: LD_EXP 43
22457: PPUSH
22458: LD_STRING Petrosyan
22460: PPUSH
22461: LD_INT 3
22463: PPUSH
22464: CALL 11903 0 3
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
22468: LD_EXP 45
22472: PPUSH
22473: LD_STRING Dolgov
22475: PPUSH
22476: LD_INT 3
22478: PPUSH
22479: CALL 11903 0 3
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
22483: LD_EXP 46
22487: PPUSH
22488: LD_STRING Lipshchin
22490: PPUSH
22491: LD_INT 3
22493: PPUSH
22494: CALL 11903 0 3
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
22498: LD_EXP 44
22502: PPUSH
22503: LD_STRING Titov
22505: PPUSH
22506: LD_INT 3
22508: PPUSH
22509: CALL 11903 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
22513: LD_EXP 48
22517: PPUSH
22518: LD_STRING Kirilenkova
22520: PPUSH
22521: LD_INT 3
22523: PPUSH
22524: CALL 11903 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
22528: LD_EXP 49
22532: PPUSH
22533: LD_STRING Belkov
22535: PPUSH
22536: LD_INT 3
22538: PPUSH
22539: CALL 11903 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
22543: LD_EXP 50
22547: PPUSH
22548: LD_STRING Belkov2
22550: PPUSH
22551: LD_INT 3
22553: PPUSH
22554: CALL 11903 0 3
// ExtSaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
22558: LD_INT 22
22560: PUSH
22561: LD_INT 3
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 21
22570: PUSH
22571: LD_INT 1
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 2
22580: PUSH
22581: LD_INT 25
22583: PUSH
22584: LD_INT 12
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 25
22593: PUSH
22594: LD_INT 16
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 25
22603: PUSH
22604: LD_INT 15
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: LIST
22621: PPUSH
22622: CALL_OW 69
22626: PPUSH
22627: LD_STRING other_apemans
22629: PPUSH
22630: LD_INT 3
22632: PPUSH
22633: CALL 11959 0 3
// randomsToSave = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 ] ;
22637: LD_ADDR_VAR 0 2
22641: PUSH
22642: LD_INT 22
22644: PUSH
22645: LD_INT 3
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 21
22654: PUSH
22655: LD_INT 1
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 23
22664: PUSH
22665: LD_INT 3
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 50
22674: PUSH
22675: EMPTY
22676: LIST
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: PPUSH
22684: CALL_OW 69
22688: PUSH
22689: LD_EXP 39
22693: PUSH
22694: LD_EXP 40
22698: PUSH
22699: LD_EXP 41
22703: PUSH
22704: LD_EXP 42
22708: PUSH
22709: LD_EXP 43
22713: PUSH
22714: LD_EXP 44
22718: PUSH
22719: LD_EXP 45
22723: PUSH
22724: LD_EXP 46
22728: PUSH
22729: LD_EXP 48
22733: PUSH
22734: LD_EXP 49
22738: PUSH
22739: LD_EXP 50
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: DIFF
22757: ST_TO_ADDR
// ExtSaveCharacters ( randomsToSave , other_survivors , 3 ) ;
22758: LD_VAR 0 2
22762: PPUSH
22763: LD_STRING other_survivors
22765: PPUSH
22766: LD_INT 3
22768: PPUSH
22769: CALL 11959 0 3
// end ;
22773: LD_VAR 0 1
22777: RET
// function SaveGlobalVariables ; var i , driver , driverShortName ; begin
22778: LD_INT 0
22780: PPUSH
22781: PPUSH
22782: PPUSH
22783: PPUSH
// resourcesFrom06 = [ ] ;
22784: LD_ADDR_EXP 8
22788: PUSH
22789: EMPTY
22790: ST_TO_ADDR
// SaveVariable ( techMatPredStatus , 06_TechMatPredStatus_1 ) ;
22791: LD_EXP 6
22795: PPUSH
22796: LD_STRING 06_TechMatPredStatus_1
22798: PPUSH
22799: CALL_OW 39
// for i in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_occupied ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , 89 ] ] ] ) do
22803: LD_ADDR_VAR 0 2
22807: PUSH
22808: LD_INT 14
22810: PPUSH
22811: LD_INT 22
22813: PUSH
22814: LD_INT 3
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 59
22823: PUSH
22824: EMPTY
22825: LIST
22826: PUSH
22827: LD_INT 2
22829: PUSH
22830: LD_INT 34
22832: PUSH
22833: LD_INT 51
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 34
22842: PUSH
22843: LD_INT 32
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 34
22852: PUSH
22853: LD_INT 12
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 34
22862: PUSH
22863: LD_INT 89
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: LIST
22881: PPUSH
22882: CALL_OW 70
22886: PUSH
22887: FOR_IN
22888: IFFALSE 22916
// resourcesFrom06 = resourcesFrom06 ^ [ GetMultiCargo ( i ) ] ;
22890: LD_ADDR_EXP 8
22894: PUSH
22895: LD_EXP 8
22899: PUSH
22900: LD_VAR 0 2
22904: PPUSH
22905: CALL 15029 0 1
22909: PUSH
22910: EMPTY
22911: LIST
22912: ADD
22913: ST_TO_ADDR
22914: GO 22887
22916: POP
22917: POP
// SaveVariable ( resourcesFrom06 , 06_ResourcesInCargo_3 ) ;
22918: LD_EXP 8
22922: PPUSH
22923: LD_STRING 06_ResourcesInCargo_3
22925: PPUSH
22926: CALL_OW 39
// for i in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ) do
22930: LD_ADDR_VAR 0 2
22934: PUSH
22935: LD_INT 14
22937: PPUSH
22938: LD_INT 22
22940: PUSH
22941: LD_INT 3
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 21
22950: PUSH
22951: LD_INT 2
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 59
22960: PUSH
22961: EMPTY
22962: LIST
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: LIST
22968: PPUSH
22969: CALL_OW 70
22973: PUSH
22974: FOR_IN
22975: IFFALSE 23379
// begin driver = UnitsInside ( i ) [ 1 ] ;
22977: LD_ADDR_VAR 0 3
22981: PUSH
22982: LD_VAR 0 2
22986: PPUSH
22987: CALL_OW 313
22991: PUSH
22992: LD_INT 1
22994: ARRAY
22995: ST_TO_ADDR
// if driver = Burlak then
22996: LD_VAR 0 3
23000: PUSH
23001: LD_EXP 39
23005: EQUAL
23006: IFFALSE 23016
// driverShortName = Bur ;
23008: LD_ADDR_VAR 0 4
23012: PUSH
23013: LD_STRING Bur
23015: ST_TO_ADDR
// if driver = Karamazov then
23016: LD_VAR 0 3
23020: PUSH
23021: LD_EXP 40
23025: EQUAL
23026: IFFALSE 23036
// driverShortName = Kar ;
23028: LD_ADDR_VAR 0 4
23032: PUSH
23033: LD_STRING Kar
23035: ST_TO_ADDR
// if driver = Petrovova then
23036: LD_VAR 0 3
23040: PUSH
23041: LD_EXP 41
23045: EQUAL
23046: IFFALSE 23056
// driverShortName = Ptr ;
23048: LD_ADDR_VAR 0 4
23052: PUSH
23053: LD_STRING Ptr
23055: ST_TO_ADDR
// if driver = Gleb then
23056: LD_VAR 0 3
23060: PUSH
23061: LD_EXP 42
23065: EQUAL
23066: IFFALSE 23076
// driverShortName = Glb ;
23068: LD_ADDR_VAR 0 4
23072: PUSH
23073: LD_STRING Glb
23075: ST_TO_ADDR
// if driver = Petrosyan then
23076: LD_VAR 0 3
23080: PUSH
23081: LD_EXP 43
23085: EQUAL
23086: IFFALSE 23096
// driverShortName = Pet ;
23088: LD_ADDR_VAR 0 4
23092: PUSH
23093: LD_STRING Pet
23095: ST_TO_ADDR
// if driver = Dolgov then
23096: LD_VAR 0 3
23100: PUSH
23101: LD_EXP 45
23105: EQUAL
23106: IFFALSE 23116
// driverShortName = Dol ;
23108: LD_ADDR_VAR 0 4
23112: PUSH
23113: LD_STRING Dol
23115: ST_TO_ADDR
// if driver = Lipshchin then
23116: LD_VAR 0 3
23120: PUSH
23121: LD_EXP 46
23125: EQUAL
23126: IFFALSE 23136
// driverShortName = Lip ;
23128: LD_ADDR_VAR 0 4
23132: PUSH
23133: LD_STRING Lip
23135: ST_TO_ADDR
// if driver = Titov then
23136: LD_VAR 0 3
23140: PUSH
23141: LD_EXP 44
23145: EQUAL
23146: IFFALSE 23156
// driverShortName = Tit ;
23148: LD_ADDR_VAR 0 4
23152: PUSH
23153: LD_STRING Tit
23155: ST_TO_ADDR
// if driver = Kirilenkova then
23156: LD_VAR 0 3
23160: PUSH
23161: LD_EXP 48
23165: EQUAL
23166: IFFALSE 23176
// driverShortName = Kir ;
23168: LD_ADDR_VAR 0 4
23172: PUSH
23173: LD_STRING Kir
23175: ST_TO_ADDR
// if driver = Belkov then
23176: LD_VAR 0 3
23180: PUSH
23181: LD_EXP 49
23185: EQUAL
23186: IFFALSE 23196
// driverShortName = Bel ;
23188: LD_ADDR_VAR 0 4
23192: PUSH
23193: LD_STRING Bel
23195: ST_TO_ADDR
// if driver = Belkov2 then
23196: LD_VAR 0 3
23200: PUSH
23201: LD_EXP 50
23205: EQUAL
23206: IFFALSE 23216
// driverShortName = Bel2 ;
23208: LD_ADDR_VAR 0 4
23212: PUSH
23213: LD_STRING Bel2
23215: ST_TO_ADDR
// if not driver in [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 ] then
23216: LD_VAR 0 3
23220: PUSH
23221: LD_EXP 39
23225: PUSH
23226: LD_EXP 40
23230: PUSH
23231: LD_EXP 41
23235: PUSH
23236: LD_EXP 42
23240: PUSH
23241: LD_EXP 43
23245: PUSH
23246: LD_EXP 44
23250: PUSH
23251: LD_EXP 45
23255: PUSH
23256: LD_EXP 46
23260: PUSH
23261: LD_EXP 48
23265: PUSH
23266: LD_EXP 49
23270: PUSH
23271: LD_EXP 50
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: IN
23289: NOT
23290: IFFALSE 23300
// driverShortName = rand ;
23292: LD_ADDR_VAR 0 4
23296: PUSH
23297: LD_STRING rand
23299: ST_TO_ADDR
// vehsFrom06 = vehsFrom06 ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , driverShortName ] ] ;
23300: LD_ADDR_EXP 7
23304: PUSH
23305: LD_EXP 7
23309: PUSH
23310: LD_VAR 0 2
23314: PPUSH
23315: CALL_OW 248
23319: PUSH
23320: LD_VAR 0 2
23324: PPUSH
23325: CALL_OW 265
23329: PUSH
23330: LD_VAR 0 2
23334: PPUSH
23335: CALL_OW 262
23339: PUSH
23340: LD_VAR 0 2
23344: PPUSH
23345: CALL_OW 263
23349: PUSH
23350: LD_VAR 0 2
23354: PPUSH
23355: CALL_OW 264
23359: PUSH
23360: LD_VAR 0 4
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: PUSH
23373: EMPTY
23374: LIST
23375: ADD
23376: ST_TO_ADDR
// end ;
23377: GO 22974
23379: POP
23380: POP
// SaveVariable ( vehsFrom06 , 06_Vehicles_2 ) ;
23381: LD_EXP 7
23385: PPUSH
23386: LD_STRING 06_Vehicles_2
23388: PPUSH
23389: CALL_OW 39
// SaveVariable ( savedVsevolod , 06_VsevolodStatus_4 ) ;
23393: LD_EXP 19
23397: PPUSH
23398: LD_STRING 06_VsevolodStatus_4
23400: PPUSH
23401: CALL_OW 39
// end ; end_of_file
23405: LD_VAR 0 1
23409: RET
// on UnitDestroyed ( unit ) do begin if unit in ovsyenkoBase then
23410: LD_VAR 0 1
23414: PUSH
23415: LD_EXP 59
23419: IN
23420: IFFALSE 23438
// ovsyenkoBase = ovsyenkoBase diff unit ;
23422: LD_ADDR_EXP 59
23426: PUSH
23427: LD_EXP 59
23431: PUSH
23432: LD_VAR 0 1
23436: DIFF
23437: ST_TO_ADDR
// if unit = Burlak then
23438: LD_VAR 0 1
23442: PUSH
23443: LD_EXP 39
23447: EQUAL
23448: IFFALSE 23454
// Lose_Burlak ;
23450: CALL 21907 0 0
// if unit = Vsevolod and GetSide ( Vsevolod ) = 3 then
23454: LD_VAR 0 1
23458: PUSH
23459: LD_EXP 51
23463: EQUAL
23464: PUSH
23465: LD_EXP 51
23469: PPUSH
23470: CALL_OW 255
23474: PUSH
23475: LD_INT 3
23477: EQUAL
23478: AND
23479: IFFALSE 23489
// savedVsevolod = false ;
23481: LD_ADDR_EXP 19
23485: PUSH
23486: LD_INT 0
23488: ST_TO_ADDR
// if unit = ovsyenko and GetSide ( ovsyenko ) = 3 then
23489: LD_VAR 0 1
23493: PUSH
23494: LD_INT 86
23496: EQUAL
23497: PUSH
23498: LD_INT 86
23500: PPUSH
23501: CALL_OW 255
23505: PUSH
23506: LD_INT 3
23508: EQUAL
23509: AND
23510: IFFALSE 23520
// lostAgainBase = true ;
23512: LD_ADDR_EXP 17
23516: PUSH
23517: LD_INT 1
23519: ST_TO_ADDR
// end ;
23520: PPOPN 1
23522: END
// on UnitDestroyed_Extra ( unit , killer_side , killer_unit ) do begin if unit = Gleb and killer_side = 3 then
23523: LD_VAR 0 1
23527: PUSH
23528: LD_EXP 42
23532: EQUAL
23533: PUSH
23534: LD_VAR 0 2
23538: PUSH
23539: LD_INT 3
23541: EQUAL
23542: AND
23543: IFFALSE 23549
// Lose_Gleb ;
23545: CALL 21922 0 0
// if unit = Vsevolod then
23549: LD_VAR 0 1
23553: PUSH
23554: LD_EXP 51
23558: EQUAL
23559: IFFALSE 23569
// savedVsevolod = false ;
23561: LD_ADDR_EXP 19
23565: PUSH
23566: LD_INT 0
23568: ST_TO_ADDR
// end ;
23569: PPOPN 3
23571: END
// on BuildingComplete ( building ) do begin end ;
23572: PPOPN 1
23574: END
// on BuildingCaptured ( building , side , human ) do begin if GetSide ( human ) = 3 and GetBType ( building ) = b_siberite_mine and not dial_SibTechsBlocker then
23575: LD_VAR 0 3
23579: PPUSH
23580: CALL_OW 255
23584: PUSH
23585: LD_INT 3
23587: EQUAL
23588: PUSH
23589: LD_VAR 0 1
23593: PPUSH
23594: CALL_OW 266
23598: PUSH
23599: LD_INT 30
23601: EQUAL
23602: AND
23603: PUSH
23604: LD_EXP 9
23608: NOT
23609: AND
23610: IFFALSE 23616
// Dial_SibTechs ;
23612: CALL 17268 0 0
// if GetSide ( human ) = 3 and GetBType ( building ) in [ b_depot , b_warehouse ] and GetResourceType ( GetBase ( building ) , mat_siberit ) > 0 and not dial_SibTechsBlocker then
23616: LD_VAR 0 3
23620: PPUSH
23621: CALL_OW 255
23625: PUSH
23626: LD_INT 3
23628: EQUAL
23629: PUSH
23630: LD_VAR 0 1
23634: PPUSH
23635: CALL_OW 266
23639: PUSH
23640: LD_INT 0
23642: PUSH
23643: LD_INT 1
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: IN
23650: AND
23651: PUSH
23652: LD_VAR 0 1
23656: PPUSH
23657: CALL_OW 274
23661: PPUSH
23662: LD_INT 3
23664: PPUSH
23665: CALL_OW 275
23669: PUSH
23670: LD_INT 0
23672: GREATER
23673: AND
23674: PUSH
23675: LD_EXP 9
23679: NOT
23680: AND
23681: IFFALSE 23687
// Dial_SibTechs ;
23683: CALL 17268 0 0
// end ;
23687: PPOPN 3
23689: END
// on Contact ( side1 , side2 ) do begin end ;
23690: PPOPN 2
23692: END
// on VehicleConstructed ( vehicle , building ) do var side , controlTowers , tmp ;
23693: LD_INT 0
23695: PPUSH
23696: PPUSH
23697: PPUSH
// begin if GetSide ( vehicle ) = 1 then
23698: LD_VAR 0 1
23702: PPUSH
23703: CALL_OW 255
23707: PUSH
23708: LD_INT 1
23710: EQUAL
23711: IFFALSE 23878
// begin controlTowers = FilterUnitsInArea ( HeadAmericanBaseArea , [ [ f_side , 1 ] , [ f_ok ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_vehicle ] ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23713: LD_ADDR_VAR 0 4
23717: PUSH
23718: LD_INT 5
23720: PPUSH
23721: LD_INT 22
23723: PUSH
23724: LD_INT 1
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 50
23733: PUSH
23734: EMPTY
23735: LIST
23736: PUSH
23737: LD_INT 2
23739: PUSH
23740: LD_INT 21
23742: PUSH
23743: LD_INT 3
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 21
23752: PUSH
23753: LD_INT 2
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 2
23767: PUSH
23768: LD_INT 30
23770: PUSH
23771: LD_INT 36
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 34
23780: PUSH
23781: LD_INT 31
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: LIST
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: PPUSH
23799: CALL_OW 70
23803: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote and controlTowers then
23804: LD_VAR 0 1
23808: PPUSH
23809: CALL_OW 263
23813: PUSH
23814: LD_INT 2
23816: EQUAL
23817: PUSH
23818: LD_VAR 0 4
23822: AND
23823: IFFALSE 23878
// begin tmp = UnitsInside ( controlTowers [ 1 ] ) ;
23825: LD_ADDR_VAR 0 5
23829: PUSH
23830: LD_VAR 0 4
23834: PUSH
23835: LD_INT 1
23837: ARRAY
23838: PPUSH
23839: CALL_OW 313
23843: ST_TO_ADDR
// if tmp then
23844: LD_VAR 0 5
23848: IFFALSE 23878
// LinkVehicleToHuman ( vehicle , tmp [ rand ( 1 , tmp ) ] ) ;
23850: LD_VAR 0 1
23854: PPUSH
23855: LD_VAR 0 5
23859: PUSH
23860: LD_INT 1
23862: PPUSH
23863: LD_VAR 0 5
23867: PPUSH
23868: CALL_OW 12
23872: ARRAY
23873: PPUSH
23874: CALL_OW 53
// end ; end ; end ;
23878: PPOPN 5
23880: END
// on ResearchComplete ( research , building ) do begin if research = tech_TauField then
23881: LD_VAR 0 1
23885: PUSH
23886: LD_INT 30
23888: EQUAL
23889: IFFALSE 23895
// Dial_ResearchTauField ;
23891: CALL 20736 0 0
// if research = tech_SibEng and GetTech ( tech_TauField , 3 ) = state_researched then
23895: LD_VAR 0 1
23899: PUSH
23900: LD_INT 22
23902: EQUAL
23903: PUSH
23904: LD_INT 30
23906: PPUSH
23907: LD_INT 3
23909: PPUSH
23910: CALL_OW 321
23914: PUSH
23915: LD_INT 2
23917: EQUAL
23918: AND
23919: IFFALSE 23928
// ChangeMissionObjectives ( MOutResearch ) ;
23921: LD_STRING MOutResearch
23923: PPUSH
23924: CALL_OW 337
// if research = tech_MatPred then
23928: LD_VAR 0 1
23932: PUSH
23933: LD_INT 9
23935: EQUAL
23936: IFFALSE 23942
// Dial_ResearchMatPredictions ;
23938: CALL 17423 0 0
// end ; end_of_file
23942: PPOPN 2
23944: END
// every 0 0$1 trigger enableVsevolodCounter do
23945: LD_EXP 22
23949: IFFALSE 23969
23951: GO 23953
23953: DISABLE
// begin enable ;
23954: ENABLE
// timeToAttack = timeToAttack + 0 0$01 ;
23955: LD_ADDR_EXP 26
23959: PUSH
23960: LD_EXP 26
23964: PUSH
23965: LD_INT 35
23967: PLUS
23968: ST_TO_ADDR
// end ; end_of_file
23969: END
// every 0 0$01 do var timer ;
23970: GO 23972
23972: DISABLE
23973: LD_INT 0
23975: PPUSH
// begin timer := 5 5$30 ;
23976: LD_ADDR_VAR 0 1
23980: PUSH
23981: LD_INT 11550
23983: ST_TO_ADDR
// repeat wait ( timer ) ;
23984: LD_VAR 0 1
23988: PPUSH
23989: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
23993: LD_INT 3
23995: PPUSH
23996: LD_INT 5
23998: PPUSH
23999: CALL_OW 12
24003: PPUSH
24004: LD_INT 20
24006: PPUSH
24007: LD_INT 1
24009: PPUSH
24010: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
24014: LD_ADDR_EXP 27
24018: PUSH
24019: LD_EXP 27
24023: PUSH
24024: LD_INT 1
24026: PLUS
24027: ST_TO_ADDR
// until cratesSpawned = 3 ;
24028: LD_EXP 27
24032: PUSH
24033: LD_INT 3
24035: EQUAL
24036: IFFALSE 23984
// end ; end_of_file
24038: PPOPN 1
24040: END
// export ru_radar end_of_file export globalGameSaveCounter ; every 0 0$1 do
24041: GO 24043
24043: DISABLE
// begin enable ;
24044: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
24045: LD_STRING updateTimer(
24047: PUSH
24048: LD_OWVAR 1
24052: STR
24053: PUSH
24054: LD_STRING );
24056: STR
24057: PPUSH
24058: CALL_OW 559
// end ;
24062: END
// every 0 0$1 do
24063: GO 24065
24065: DISABLE
// begin globalGameSaveCounter := 0 ;
24066: LD_ADDR_EXP 65
24070: PUSH
24071: LD_INT 0
24073: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
24074: LD_STRING setGameSaveCounter(0)
24076: PPUSH
24077: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
24081: LD_STRING initStreamRollete();
24083: PPUSH
24084: CALL_OW 559
// InitStreamMode ;
24088: CALL 25414 0 0
// DefineStreamItems ( false ) ;
24092: LD_INT 0
24094: PPUSH
24095: CALL 25878 0 1
// end ;
24099: END
// export function SOS_MapStart ( ) ; begin
24100: LD_INT 0
24102: PPUSH
// if streamModeActive then
24103: LD_EXP 66
24107: IFFALSE 24116
// DefineStreamItems ( true ) ;
24109: LD_INT 1
24111: PPUSH
24112: CALL 25878 0 1
// UpdateLuaVariables ( ) ;
24116: CALL 24133 0 0
// UpdateFactoryWaypoints ( ) ;
24120: CALL 38747 0 0
// UpdateWarehouseGatheringPoints ( ) ;
24124: CALL 39004 0 0
// end ;
24128: LD_VAR 0 1
24132: RET
// function UpdateLuaVariables ( ) ; begin
24133: LD_INT 0
24135: PPUSH
// if globalGameSaveCounter then
24136: LD_EXP 65
24140: IFFALSE 24174
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
24142: LD_ADDR_EXP 65
24146: PUSH
24147: LD_EXP 65
24151: PPUSH
24152: CALL 82814 0 1
24156: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
24157: LD_STRING setGameSaveCounter(
24159: PUSH
24160: LD_EXP 65
24164: STR
24165: PUSH
24166: LD_STRING )
24168: STR
24169: PPUSH
24170: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
24174: LD_STRING setGameDifficulty(
24176: PUSH
24177: LD_OWVAR 67
24181: STR
24182: PUSH
24183: LD_STRING )
24185: STR
24186: PPUSH
24187: CALL_OW 559
// end ;
24191: LD_VAR 0 1
24195: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24196: LD_INT 0
24198: PPUSH
// if p2 = stream_mode then
24199: LD_VAR 0 2
24203: PUSH
24204: LD_INT 100
24206: EQUAL
24207: IFFALSE 25210
// begin if not StreamModeActive then
24209: LD_EXP 66
24213: NOT
24214: IFFALSE 24224
// StreamModeActive := true ;
24216: LD_ADDR_EXP 66
24220: PUSH
24221: LD_INT 1
24223: ST_TO_ADDR
// if p3 = 0 then
24224: LD_VAR 0 3
24228: PUSH
24229: LD_INT 0
24231: EQUAL
24232: IFFALSE 24238
// InitStreamMode ;
24234: CALL 25414 0 0
// if p3 = 1 then
24238: LD_VAR 0 3
24242: PUSH
24243: LD_INT 1
24245: EQUAL
24246: IFFALSE 24256
// sRocket := true ;
24248: LD_ADDR_EXP 71
24252: PUSH
24253: LD_INT 1
24255: ST_TO_ADDR
// if p3 = 2 then
24256: LD_VAR 0 3
24260: PUSH
24261: LD_INT 2
24263: EQUAL
24264: IFFALSE 24274
// sSpeed := true ;
24266: LD_ADDR_EXP 70
24270: PUSH
24271: LD_INT 1
24273: ST_TO_ADDR
// if p3 = 3 then
24274: LD_VAR 0 3
24278: PUSH
24279: LD_INT 3
24281: EQUAL
24282: IFFALSE 24292
// sEngine := true ;
24284: LD_ADDR_EXP 72
24288: PUSH
24289: LD_INT 1
24291: ST_TO_ADDR
// if p3 = 4 then
24292: LD_VAR 0 3
24296: PUSH
24297: LD_INT 4
24299: EQUAL
24300: IFFALSE 24310
// sSpec := true ;
24302: LD_ADDR_EXP 69
24306: PUSH
24307: LD_INT 1
24309: ST_TO_ADDR
// if p3 = 5 then
24310: LD_VAR 0 3
24314: PUSH
24315: LD_INT 5
24317: EQUAL
24318: IFFALSE 24328
// sLevel := true ;
24320: LD_ADDR_EXP 73
24324: PUSH
24325: LD_INT 1
24327: ST_TO_ADDR
// if p3 = 6 then
24328: LD_VAR 0 3
24332: PUSH
24333: LD_INT 6
24335: EQUAL
24336: IFFALSE 24346
// sArmoury := true ;
24338: LD_ADDR_EXP 74
24342: PUSH
24343: LD_INT 1
24345: ST_TO_ADDR
// if p3 = 7 then
24346: LD_VAR 0 3
24350: PUSH
24351: LD_INT 7
24353: EQUAL
24354: IFFALSE 24364
// sRadar := true ;
24356: LD_ADDR_EXP 75
24360: PUSH
24361: LD_INT 1
24363: ST_TO_ADDR
// if p3 = 8 then
24364: LD_VAR 0 3
24368: PUSH
24369: LD_INT 8
24371: EQUAL
24372: IFFALSE 24382
// sBunker := true ;
24374: LD_ADDR_EXP 76
24378: PUSH
24379: LD_INT 1
24381: ST_TO_ADDR
// if p3 = 9 then
24382: LD_VAR 0 3
24386: PUSH
24387: LD_INT 9
24389: EQUAL
24390: IFFALSE 24400
// sHack := true ;
24392: LD_ADDR_EXP 77
24396: PUSH
24397: LD_INT 1
24399: ST_TO_ADDR
// if p3 = 10 then
24400: LD_VAR 0 3
24404: PUSH
24405: LD_INT 10
24407: EQUAL
24408: IFFALSE 24418
// sFire := true ;
24410: LD_ADDR_EXP 78
24414: PUSH
24415: LD_INT 1
24417: ST_TO_ADDR
// if p3 = 11 then
24418: LD_VAR 0 3
24422: PUSH
24423: LD_INT 11
24425: EQUAL
24426: IFFALSE 24436
// sRefresh := true ;
24428: LD_ADDR_EXP 79
24432: PUSH
24433: LD_INT 1
24435: ST_TO_ADDR
// if p3 = 12 then
24436: LD_VAR 0 3
24440: PUSH
24441: LD_INT 12
24443: EQUAL
24444: IFFALSE 24454
// sExp := true ;
24446: LD_ADDR_EXP 80
24450: PUSH
24451: LD_INT 1
24453: ST_TO_ADDR
// if p3 = 13 then
24454: LD_VAR 0 3
24458: PUSH
24459: LD_INT 13
24461: EQUAL
24462: IFFALSE 24472
// sDepot := true ;
24464: LD_ADDR_EXP 81
24468: PUSH
24469: LD_INT 1
24471: ST_TO_ADDR
// if p3 = 14 then
24472: LD_VAR 0 3
24476: PUSH
24477: LD_INT 14
24479: EQUAL
24480: IFFALSE 24490
// sFlag := true ;
24482: LD_ADDR_EXP 82
24486: PUSH
24487: LD_INT 1
24489: ST_TO_ADDR
// if p3 = 15 then
24490: LD_VAR 0 3
24494: PUSH
24495: LD_INT 15
24497: EQUAL
24498: IFFALSE 24508
// sKamikadze := true ;
24500: LD_ADDR_EXP 90
24504: PUSH
24505: LD_INT 1
24507: ST_TO_ADDR
// if p3 = 16 then
24508: LD_VAR 0 3
24512: PUSH
24513: LD_INT 16
24515: EQUAL
24516: IFFALSE 24526
// sTroll := true ;
24518: LD_ADDR_EXP 91
24522: PUSH
24523: LD_INT 1
24525: ST_TO_ADDR
// if p3 = 17 then
24526: LD_VAR 0 3
24530: PUSH
24531: LD_INT 17
24533: EQUAL
24534: IFFALSE 24544
// sSlow := true ;
24536: LD_ADDR_EXP 92
24540: PUSH
24541: LD_INT 1
24543: ST_TO_ADDR
// if p3 = 18 then
24544: LD_VAR 0 3
24548: PUSH
24549: LD_INT 18
24551: EQUAL
24552: IFFALSE 24562
// sLack := true ;
24554: LD_ADDR_EXP 93
24558: PUSH
24559: LD_INT 1
24561: ST_TO_ADDR
// if p3 = 19 then
24562: LD_VAR 0 3
24566: PUSH
24567: LD_INT 19
24569: EQUAL
24570: IFFALSE 24580
// sTank := true ;
24572: LD_ADDR_EXP 95
24576: PUSH
24577: LD_INT 1
24579: ST_TO_ADDR
// if p3 = 20 then
24580: LD_VAR 0 3
24584: PUSH
24585: LD_INT 20
24587: EQUAL
24588: IFFALSE 24598
// sRemote := true ;
24590: LD_ADDR_EXP 96
24594: PUSH
24595: LD_INT 1
24597: ST_TO_ADDR
// if p3 = 21 then
24598: LD_VAR 0 3
24602: PUSH
24603: LD_INT 21
24605: EQUAL
24606: IFFALSE 24616
// sPowell := true ;
24608: LD_ADDR_EXP 97
24612: PUSH
24613: LD_INT 1
24615: ST_TO_ADDR
// if p3 = 22 then
24616: LD_VAR 0 3
24620: PUSH
24621: LD_INT 22
24623: EQUAL
24624: IFFALSE 24634
// sTeleport := true ;
24626: LD_ADDR_EXP 100
24630: PUSH
24631: LD_INT 1
24633: ST_TO_ADDR
// if p3 = 23 then
24634: LD_VAR 0 3
24638: PUSH
24639: LD_INT 23
24641: EQUAL
24642: IFFALSE 24652
// sOilTower := true ;
24644: LD_ADDR_EXP 102
24648: PUSH
24649: LD_INT 1
24651: ST_TO_ADDR
// if p3 = 24 then
24652: LD_VAR 0 3
24656: PUSH
24657: LD_INT 24
24659: EQUAL
24660: IFFALSE 24670
// sShovel := true ;
24662: LD_ADDR_EXP 103
24666: PUSH
24667: LD_INT 1
24669: ST_TO_ADDR
// if p3 = 25 then
24670: LD_VAR 0 3
24674: PUSH
24675: LD_INT 25
24677: EQUAL
24678: IFFALSE 24688
// sSheik := true ;
24680: LD_ADDR_EXP 104
24684: PUSH
24685: LD_INT 1
24687: ST_TO_ADDR
// if p3 = 26 then
24688: LD_VAR 0 3
24692: PUSH
24693: LD_INT 26
24695: EQUAL
24696: IFFALSE 24706
// sEarthquake := true ;
24698: LD_ADDR_EXP 106
24702: PUSH
24703: LD_INT 1
24705: ST_TO_ADDR
// if p3 = 27 then
24706: LD_VAR 0 3
24710: PUSH
24711: LD_INT 27
24713: EQUAL
24714: IFFALSE 24724
// sAI := true ;
24716: LD_ADDR_EXP 107
24720: PUSH
24721: LD_INT 1
24723: ST_TO_ADDR
// if p3 = 28 then
24724: LD_VAR 0 3
24728: PUSH
24729: LD_INT 28
24731: EQUAL
24732: IFFALSE 24742
// sCargo := true ;
24734: LD_ADDR_EXP 110
24738: PUSH
24739: LD_INT 1
24741: ST_TO_ADDR
// if p3 = 29 then
24742: LD_VAR 0 3
24746: PUSH
24747: LD_INT 29
24749: EQUAL
24750: IFFALSE 24760
// sDLaser := true ;
24752: LD_ADDR_EXP 111
24756: PUSH
24757: LD_INT 1
24759: ST_TO_ADDR
// if p3 = 30 then
24760: LD_VAR 0 3
24764: PUSH
24765: LD_INT 30
24767: EQUAL
24768: IFFALSE 24778
// sExchange := true ;
24770: LD_ADDR_EXP 112
24774: PUSH
24775: LD_INT 1
24777: ST_TO_ADDR
// if p3 = 31 then
24778: LD_VAR 0 3
24782: PUSH
24783: LD_INT 31
24785: EQUAL
24786: IFFALSE 24796
// sFac := true ;
24788: LD_ADDR_EXP 113
24792: PUSH
24793: LD_INT 1
24795: ST_TO_ADDR
// if p3 = 32 then
24796: LD_VAR 0 3
24800: PUSH
24801: LD_INT 32
24803: EQUAL
24804: IFFALSE 24814
// sPower := true ;
24806: LD_ADDR_EXP 114
24810: PUSH
24811: LD_INT 1
24813: ST_TO_ADDR
// if p3 = 33 then
24814: LD_VAR 0 3
24818: PUSH
24819: LD_INT 33
24821: EQUAL
24822: IFFALSE 24832
// sRandom := true ;
24824: LD_ADDR_EXP 115
24828: PUSH
24829: LD_INT 1
24831: ST_TO_ADDR
// if p3 = 34 then
24832: LD_VAR 0 3
24836: PUSH
24837: LD_INT 34
24839: EQUAL
24840: IFFALSE 24850
// sShield := true ;
24842: LD_ADDR_EXP 116
24846: PUSH
24847: LD_INT 1
24849: ST_TO_ADDR
// if p3 = 35 then
24850: LD_VAR 0 3
24854: PUSH
24855: LD_INT 35
24857: EQUAL
24858: IFFALSE 24868
// sTime := true ;
24860: LD_ADDR_EXP 117
24864: PUSH
24865: LD_INT 1
24867: ST_TO_ADDR
// if p3 = 36 then
24868: LD_VAR 0 3
24872: PUSH
24873: LD_INT 36
24875: EQUAL
24876: IFFALSE 24886
// sTools := true ;
24878: LD_ADDR_EXP 118
24882: PUSH
24883: LD_INT 1
24885: ST_TO_ADDR
// if p3 = 101 then
24886: LD_VAR 0 3
24890: PUSH
24891: LD_INT 101
24893: EQUAL
24894: IFFALSE 24904
// sSold := true ;
24896: LD_ADDR_EXP 83
24900: PUSH
24901: LD_INT 1
24903: ST_TO_ADDR
// if p3 = 102 then
24904: LD_VAR 0 3
24908: PUSH
24909: LD_INT 102
24911: EQUAL
24912: IFFALSE 24922
// sDiff := true ;
24914: LD_ADDR_EXP 84
24918: PUSH
24919: LD_INT 1
24921: ST_TO_ADDR
// if p3 = 103 then
24922: LD_VAR 0 3
24926: PUSH
24927: LD_INT 103
24929: EQUAL
24930: IFFALSE 24940
// sFog := true ;
24932: LD_ADDR_EXP 87
24936: PUSH
24937: LD_INT 1
24939: ST_TO_ADDR
// if p3 = 104 then
24940: LD_VAR 0 3
24944: PUSH
24945: LD_INT 104
24947: EQUAL
24948: IFFALSE 24958
// sReset := true ;
24950: LD_ADDR_EXP 88
24954: PUSH
24955: LD_INT 1
24957: ST_TO_ADDR
// if p3 = 105 then
24958: LD_VAR 0 3
24962: PUSH
24963: LD_INT 105
24965: EQUAL
24966: IFFALSE 24976
// sSun := true ;
24968: LD_ADDR_EXP 89
24972: PUSH
24973: LD_INT 1
24975: ST_TO_ADDR
// if p3 = 106 then
24976: LD_VAR 0 3
24980: PUSH
24981: LD_INT 106
24983: EQUAL
24984: IFFALSE 24994
// sTiger := true ;
24986: LD_ADDR_EXP 85
24990: PUSH
24991: LD_INT 1
24993: ST_TO_ADDR
// if p3 = 107 then
24994: LD_VAR 0 3
24998: PUSH
24999: LD_INT 107
25001: EQUAL
25002: IFFALSE 25012
// sBomb := true ;
25004: LD_ADDR_EXP 86
25008: PUSH
25009: LD_INT 1
25011: ST_TO_ADDR
// if p3 = 108 then
25012: LD_VAR 0 3
25016: PUSH
25017: LD_INT 108
25019: EQUAL
25020: IFFALSE 25030
// sWound := true ;
25022: LD_ADDR_EXP 94
25026: PUSH
25027: LD_INT 1
25029: ST_TO_ADDR
// if p3 = 109 then
25030: LD_VAR 0 3
25034: PUSH
25035: LD_INT 109
25037: EQUAL
25038: IFFALSE 25048
// sBetray := true ;
25040: LD_ADDR_EXP 98
25044: PUSH
25045: LD_INT 1
25047: ST_TO_ADDR
// if p3 = 110 then
25048: LD_VAR 0 3
25052: PUSH
25053: LD_INT 110
25055: EQUAL
25056: IFFALSE 25066
// sContamin := true ;
25058: LD_ADDR_EXP 99
25062: PUSH
25063: LD_INT 1
25065: ST_TO_ADDR
// if p3 = 111 then
25066: LD_VAR 0 3
25070: PUSH
25071: LD_INT 111
25073: EQUAL
25074: IFFALSE 25084
// sOil := true ;
25076: LD_ADDR_EXP 101
25080: PUSH
25081: LD_INT 1
25083: ST_TO_ADDR
// if p3 = 112 then
25084: LD_VAR 0 3
25088: PUSH
25089: LD_INT 112
25091: EQUAL
25092: IFFALSE 25102
// sStu := true ;
25094: LD_ADDR_EXP 105
25098: PUSH
25099: LD_INT 1
25101: ST_TO_ADDR
// if p3 = 113 then
25102: LD_VAR 0 3
25106: PUSH
25107: LD_INT 113
25109: EQUAL
25110: IFFALSE 25120
// sBazooka := true ;
25112: LD_ADDR_EXP 108
25116: PUSH
25117: LD_INT 1
25119: ST_TO_ADDR
// if p3 = 114 then
25120: LD_VAR 0 3
25124: PUSH
25125: LD_INT 114
25127: EQUAL
25128: IFFALSE 25138
// sMortar := true ;
25130: LD_ADDR_EXP 109
25134: PUSH
25135: LD_INT 1
25137: ST_TO_ADDR
// if p3 = 115 then
25138: LD_VAR 0 3
25142: PUSH
25143: LD_INT 115
25145: EQUAL
25146: IFFALSE 25156
// sRanger := true ;
25148: LD_ADDR_EXP 119
25152: PUSH
25153: LD_INT 1
25155: ST_TO_ADDR
// if p3 = 116 then
25156: LD_VAR 0 3
25160: PUSH
25161: LD_INT 116
25163: EQUAL
25164: IFFALSE 25174
// sComputer := true ;
25166: LD_ADDR_EXP 120
25170: PUSH
25171: LD_INT 1
25173: ST_TO_ADDR
// if p3 = 117 then
25174: LD_VAR 0 3
25178: PUSH
25179: LD_INT 117
25181: EQUAL
25182: IFFALSE 25192
// s30 := true ;
25184: LD_ADDR_EXP 121
25188: PUSH
25189: LD_INT 1
25191: ST_TO_ADDR
// if p3 = 118 then
25192: LD_VAR 0 3
25196: PUSH
25197: LD_INT 118
25199: EQUAL
25200: IFFALSE 25210
// s60 := true ;
25202: LD_ADDR_EXP 122
25206: PUSH
25207: LD_INT 1
25209: ST_TO_ADDR
// end ; if p2 = hack_mode then
25210: LD_VAR 0 2
25214: PUSH
25215: LD_INT 101
25217: EQUAL
25218: IFFALSE 25346
// begin case p3 of 1 :
25220: LD_VAR 0 3
25224: PUSH
25225: LD_INT 1
25227: DOUBLE
25228: EQUAL
25229: IFTRUE 25233
25231: GO 25240
25233: POP
// hHackUnlimitedResources ; 2 :
25234: CALL 37493 0 0
25238: GO 25346
25240: LD_INT 2
25242: DOUBLE
25243: EQUAL
25244: IFTRUE 25248
25246: GO 25255
25248: POP
// hHackSetLevel10 ; 3 :
25249: CALL 37626 0 0
25253: GO 25346
25255: LD_INT 3
25257: DOUBLE
25258: EQUAL
25259: IFTRUE 25263
25261: GO 25270
25263: POP
// hHackSetLevel10YourUnits ; 4 :
25264: CALL 37711 0 0
25268: GO 25346
25270: LD_INT 4
25272: DOUBLE
25273: EQUAL
25274: IFTRUE 25278
25276: GO 25285
25278: POP
// hHackInvincible ; 5 :
25279: CALL 38159 0 0
25283: GO 25346
25285: LD_INT 5
25287: DOUBLE
25288: EQUAL
25289: IFTRUE 25293
25291: GO 25300
25293: POP
// hHackInvisible ; 6 :
25294: CALL 38270 0 0
25298: GO 25346
25300: LD_INT 6
25302: DOUBLE
25303: EQUAL
25304: IFTRUE 25308
25306: GO 25315
25308: POP
// hHackChangeYourSide ; 7 :
25309: CALL 38327 0 0
25313: GO 25346
25315: LD_INT 7
25317: DOUBLE
25318: EQUAL
25319: IFTRUE 25323
25321: GO 25330
25323: POP
// hHackChangeUnitSide ; 8 :
25324: CALL 38369 0 0
25328: GO 25346
25330: LD_INT 8
25332: DOUBLE
25333: EQUAL
25334: IFTRUE 25338
25336: GO 25345
25338: POP
// hHackFog ; end ;
25339: CALL 38470 0 0
25343: GO 25346
25345: POP
// end ; if p2 = game_save_mode then
25346: LD_VAR 0 2
25350: PUSH
25351: LD_INT 102
25353: EQUAL
25354: IFFALSE 25409
// begin if p3 = 1 then
25356: LD_VAR 0 3
25360: PUSH
25361: LD_INT 1
25363: EQUAL
25364: IFFALSE 25376
// globalGameSaveCounter := p4 ;
25366: LD_ADDR_EXP 65
25370: PUSH
25371: LD_VAR 0 4
25375: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
25376: LD_VAR 0 3
25380: PUSH
25381: LD_INT 2
25383: EQUAL
25384: PUSH
25385: LD_EXP 65
25389: AND
25390: IFFALSE 25409
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
25392: LD_STRING setGameSaveCounter(
25394: PUSH
25395: LD_EXP 65
25399: STR
25400: PUSH
25401: LD_STRING )
25403: STR
25404: PPUSH
25405: CALL_OW 559
// end ; end ;
25409: LD_VAR 0 7
25413: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
25414: LD_INT 0
25416: PPUSH
// streamModeActive := false ;
25417: LD_ADDR_EXP 66
25421: PUSH
25422: LD_INT 0
25424: ST_TO_ADDR
// normalCounter := 36 ;
25425: LD_ADDR_EXP 67
25429: PUSH
25430: LD_INT 36
25432: ST_TO_ADDR
// hardcoreCounter := 18 ;
25433: LD_ADDR_EXP 68
25437: PUSH
25438: LD_INT 18
25440: ST_TO_ADDR
// sRocket := false ;
25441: LD_ADDR_EXP 71
25445: PUSH
25446: LD_INT 0
25448: ST_TO_ADDR
// sSpeed := false ;
25449: LD_ADDR_EXP 70
25453: PUSH
25454: LD_INT 0
25456: ST_TO_ADDR
// sEngine := false ;
25457: LD_ADDR_EXP 72
25461: PUSH
25462: LD_INT 0
25464: ST_TO_ADDR
// sSpec := false ;
25465: LD_ADDR_EXP 69
25469: PUSH
25470: LD_INT 0
25472: ST_TO_ADDR
// sLevel := false ;
25473: LD_ADDR_EXP 73
25477: PUSH
25478: LD_INT 0
25480: ST_TO_ADDR
// sArmoury := false ;
25481: LD_ADDR_EXP 74
25485: PUSH
25486: LD_INT 0
25488: ST_TO_ADDR
// sRadar := false ;
25489: LD_ADDR_EXP 75
25493: PUSH
25494: LD_INT 0
25496: ST_TO_ADDR
// sBunker := false ;
25497: LD_ADDR_EXP 76
25501: PUSH
25502: LD_INT 0
25504: ST_TO_ADDR
// sHack := false ;
25505: LD_ADDR_EXP 77
25509: PUSH
25510: LD_INT 0
25512: ST_TO_ADDR
// sFire := false ;
25513: LD_ADDR_EXP 78
25517: PUSH
25518: LD_INT 0
25520: ST_TO_ADDR
// sRefresh := false ;
25521: LD_ADDR_EXP 79
25525: PUSH
25526: LD_INT 0
25528: ST_TO_ADDR
// sExp := false ;
25529: LD_ADDR_EXP 80
25533: PUSH
25534: LD_INT 0
25536: ST_TO_ADDR
// sDepot := false ;
25537: LD_ADDR_EXP 81
25541: PUSH
25542: LD_INT 0
25544: ST_TO_ADDR
// sFlag := false ;
25545: LD_ADDR_EXP 82
25549: PUSH
25550: LD_INT 0
25552: ST_TO_ADDR
// sKamikadze := false ;
25553: LD_ADDR_EXP 90
25557: PUSH
25558: LD_INT 0
25560: ST_TO_ADDR
// sTroll := false ;
25561: LD_ADDR_EXP 91
25565: PUSH
25566: LD_INT 0
25568: ST_TO_ADDR
// sSlow := false ;
25569: LD_ADDR_EXP 92
25573: PUSH
25574: LD_INT 0
25576: ST_TO_ADDR
// sLack := false ;
25577: LD_ADDR_EXP 93
25581: PUSH
25582: LD_INT 0
25584: ST_TO_ADDR
// sTank := false ;
25585: LD_ADDR_EXP 95
25589: PUSH
25590: LD_INT 0
25592: ST_TO_ADDR
// sRemote := false ;
25593: LD_ADDR_EXP 96
25597: PUSH
25598: LD_INT 0
25600: ST_TO_ADDR
// sPowell := false ;
25601: LD_ADDR_EXP 97
25605: PUSH
25606: LD_INT 0
25608: ST_TO_ADDR
// sTeleport := false ;
25609: LD_ADDR_EXP 100
25613: PUSH
25614: LD_INT 0
25616: ST_TO_ADDR
// sOilTower := false ;
25617: LD_ADDR_EXP 102
25621: PUSH
25622: LD_INT 0
25624: ST_TO_ADDR
// sShovel := false ;
25625: LD_ADDR_EXP 103
25629: PUSH
25630: LD_INT 0
25632: ST_TO_ADDR
// sSheik := false ;
25633: LD_ADDR_EXP 104
25637: PUSH
25638: LD_INT 0
25640: ST_TO_ADDR
// sEarthquake := false ;
25641: LD_ADDR_EXP 106
25645: PUSH
25646: LD_INT 0
25648: ST_TO_ADDR
// sAI := false ;
25649: LD_ADDR_EXP 107
25653: PUSH
25654: LD_INT 0
25656: ST_TO_ADDR
// sCargo := false ;
25657: LD_ADDR_EXP 110
25661: PUSH
25662: LD_INT 0
25664: ST_TO_ADDR
// sDLaser := false ;
25665: LD_ADDR_EXP 111
25669: PUSH
25670: LD_INT 0
25672: ST_TO_ADDR
// sExchange := false ;
25673: LD_ADDR_EXP 112
25677: PUSH
25678: LD_INT 0
25680: ST_TO_ADDR
// sFac := false ;
25681: LD_ADDR_EXP 113
25685: PUSH
25686: LD_INT 0
25688: ST_TO_ADDR
// sPower := false ;
25689: LD_ADDR_EXP 114
25693: PUSH
25694: LD_INT 0
25696: ST_TO_ADDR
// sRandom := false ;
25697: LD_ADDR_EXP 115
25701: PUSH
25702: LD_INT 0
25704: ST_TO_ADDR
// sShield := false ;
25705: LD_ADDR_EXP 116
25709: PUSH
25710: LD_INT 0
25712: ST_TO_ADDR
// sTime := false ;
25713: LD_ADDR_EXP 117
25717: PUSH
25718: LD_INT 0
25720: ST_TO_ADDR
// sTools := false ;
25721: LD_ADDR_EXP 118
25725: PUSH
25726: LD_INT 0
25728: ST_TO_ADDR
// sSold := false ;
25729: LD_ADDR_EXP 83
25733: PUSH
25734: LD_INT 0
25736: ST_TO_ADDR
// sDiff := false ;
25737: LD_ADDR_EXP 84
25741: PUSH
25742: LD_INT 0
25744: ST_TO_ADDR
// sFog := false ;
25745: LD_ADDR_EXP 87
25749: PUSH
25750: LD_INT 0
25752: ST_TO_ADDR
// sReset := false ;
25753: LD_ADDR_EXP 88
25757: PUSH
25758: LD_INT 0
25760: ST_TO_ADDR
// sSun := false ;
25761: LD_ADDR_EXP 89
25765: PUSH
25766: LD_INT 0
25768: ST_TO_ADDR
// sTiger := false ;
25769: LD_ADDR_EXP 85
25773: PUSH
25774: LD_INT 0
25776: ST_TO_ADDR
// sBomb := false ;
25777: LD_ADDR_EXP 86
25781: PUSH
25782: LD_INT 0
25784: ST_TO_ADDR
// sWound := false ;
25785: LD_ADDR_EXP 94
25789: PUSH
25790: LD_INT 0
25792: ST_TO_ADDR
// sBetray := false ;
25793: LD_ADDR_EXP 98
25797: PUSH
25798: LD_INT 0
25800: ST_TO_ADDR
// sContamin := false ;
25801: LD_ADDR_EXP 99
25805: PUSH
25806: LD_INT 0
25808: ST_TO_ADDR
// sOil := false ;
25809: LD_ADDR_EXP 101
25813: PUSH
25814: LD_INT 0
25816: ST_TO_ADDR
// sStu := false ;
25817: LD_ADDR_EXP 105
25821: PUSH
25822: LD_INT 0
25824: ST_TO_ADDR
// sBazooka := false ;
25825: LD_ADDR_EXP 108
25829: PUSH
25830: LD_INT 0
25832: ST_TO_ADDR
// sMortar := false ;
25833: LD_ADDR_EXP 109
25837: PUSH
25838: LD_INT 0
25840: ST_TO_ADDR
// sRanger := false ;
25841: LD_ADDR_EXP 119
25845: PUSH
25846: LD_INT 0
25848: ST_TO_ADDR
// sComputer := false ;
25849: LD_ADDR_EXP 120
25853: PUSH
25854: LD_INT 0
25856: ST_TO_ADDR
// s30 := false ;
25857: LD_ADDR_EXP 121
25861: PUSH
25862: LD_INT 0
25864: ST_TO_ADDR
// s60 := false ;
25865: LD_ADDR_EXP 122
25869: PUSH
25870: LD_INT 0
25872: ST_TO_ADDR
// end ;
25873: LD_VAR 0 1
25877: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
25878: LD_INT 0
25880: PPUSH
25881: PPUSH
25882: PPUSH
25883: PPUSH
25884: PPUSH
25885: PPUSH
25886: PPUSH
// result := [ ] ;
25887: LD_ADDR_VAR 0 2
25891: PUSH
25892: EMPTY
25893: ST_TO_ADDR
// if campaign_id = 1 then
25894: LD_OWVAR 69
25898: PUSH
25899: LD_INT 1
25901: EQUAL
25902: IFFALSE 29068
// begin case mission_number of 1 :
25904: LD_OWVAR 70
25908: PUSH
25909: LD_INT 1
25911: DOUBLE
25912: EQUAL
25913: IFTRUE 25917
25915: GO 25993
25917: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
25918: LD_ADDR_VAR 0 2
25922: PUSH
25923: LD_INT 2
25925: PUSH
25926: LD_INT 4
25928: PUSH
25929: LD_INT 11
25931: PUSH
25932: LD_INT 12
25934: PUSH
25935: LD_INT 15
25937: PUSH
25938: LD_INT 16
25940: PUSH
25941: LD_INT 22
25943: PUSH
25944: LD_INT 23
25946: PUSH
25947: LD_INT 26
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 101
25963: PUSH
25964: LD_INT 102
25966: PUSH
25967: LD_INT 106
25969: PUSH
25970: LD_INT 116
25972: PUSH
25973: LD_INT 117
25975: PUSH
25976: LD_INT 118
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: ST_TO_ADDR
25991: GO 29066
25993: LD_INT 2
25995: DOUBLE
25996: EQUAL
25997: IFTRUE 26001
25999: GO 26085
26001: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
26002: LD_ADDR_VAR 0 2
26006: PUSH
26007: LD_INT 2
26009: PUSH
26010: LD_INT 4
26012: PUSH
26013: LD_INT 11
26015: PUSH
26016: LD_INT 12
26018: PUSH
26019: LD_INT 15
26021: PUSH
26022: LD_INT 16
26024: PUSH
26025: LD_INT 22
26027: PUSH
26028: LD_INT 23
26030: PUSH
26031: LD_INT 26
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 101
26047: PUSH
26048: LD_INT 102
26050: PUSH
26051: LD_INT 105
26053: PUSH
26054: LD_INT 106
26056: PUSH
26057: LD_INT 108
26059: PUSH
26060: LD_INT 116
26062: PUSH
26063: LD_INT 117
26065: PUSH
26066: LD_INT 118
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: ST_TO_ADDR
26083: GO 29066
26085: LD_INT 3
26087: DOUBLE
26088: EQUAL
26089: IFTRUE 26093
26091: GO 26181
26093: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
26094: LD_ADDR_VAR 0 2
26098: PUSH
26099: LD_INT 2
26101: PUSH
26102: LD_INT 4
26104: PUSH
26105: LD_INT 5
26107: PUSH
26108: LD_INT 11
26110: PUSH
26111: LD_INT 12
26113: PUSH
26114: LD_INT 15
26116: PUSH
26117: LD_INT 16
26119: PUSH
26120: LD_INT 22
26122: PUSH
26123: LD_INT 26
26125: PUSH
26126: LD_INT 36
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 101
26143: PUSH
26144: LD_INT 102
26146: PUSH
26147: LD_INT 105
26149: PUSH
26150: LD_INT 106
26152: PUSH
26153: LD_INT 108
26155: PUSH
26156: LD_INT 116
26158: PUSH
26159: LD_INT 117
26161: PUSH
26162: LD_INT 118
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: ST_TO_ADDR
26179: GO 29066
26181: LD_INT 4
26183: DOUBLE
26184: EQUAL
26185: IFTRUE 26189
26187: GO 26285
26189: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
26190: LD_ADDR_VAR 0 2
26194: PUSH
26195: LD_INT 2
26197: PUSH
26198: LD_INT 4
26200: PUSH
26201: LD_INT 5
26203: PUSH
26204: LD_INT 8
26206: PUSH
26207: LD_INT 11
26209: PUSH
26210: LD_INT 12
26212: PUSH
26213: LD_INT 15
26215: PUSH
26216: LD_INT 16
26218: PUSH
26219: LD_INT 22
26221: PUSH
26222: LD_INT 23
26224: PUSH
26225: LD_INT 26
26227: PUSH
26228: LD_INT 36
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 101
26247: PUSH
26248: LD_INT 102
26250: PUSH
26251: LD_INT 105
26253: PUSH
26254: LD_INT 106
26256: PUSH
26257: LD_INT 108
26259: PUSH
26260: LD_INT 116
26262: PUSH
26263: LD_INT 117
26265: PUSH
26266: LD_INT 118
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: ST_TO_ADDR
26283: GO 29066
26285: LD_INT 5
26287: DOUBLE
26288: EQUAL
26289: IFTRUE 26293
26291: GO 26405
26293: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
26294: LD_ADDR_VAR 0 2
26298: PUSH
26299: LD_INT 2
26301: PUSH
26302: LD_INT 4
26304: PUSH
26305: LD_INT 5
26307: PUSH
26308: LD_INT 6
26310: PUSH
26311: LD_INT 8
26313: PUSH
26314: LD_INT 11
26316: PUSH
26317: LD_INT 12
26319: PUSH
26320: LD_INT 15
26322: PUSH
26323: LD_INT 16
26325: PUSH
26326: LD_INT 22
26328: PUSH
26329: LD_INT 23
26331: PUSH
26332: LD_INT 25
26334: PUSH
26335: LD_INT 26
26337: PUSH
26338: LD_INT 36
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: PUSH
26357: LD_INT 101
26359: PUSH
26360: LD_INT 102
26362: PUSH
26363: LD_INT 105
26365: PUSH
26366: LD_INT 106
26368: PUSH
26369: LD_INT 108
26371: PUSH
26372: LD_INT 109
26374: PUSH
26375: LD_INT 112
26377: PUSH
26378: LD_INT 116
26380: PUSH
26381: LD_INT 117
26383: PUSH
26384: LD_INT 118
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: ST_TO_ADDR
26403: GO 29066
26405: LD_INT 6
26407: DOUBLE
26408: EQUAL
26409: IFTRUE 26413
26411: GO 26545
26413: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
26414: LD_ADDR_VAR 0 2
26418: PUSH
26419: LD_INT 2
26421: PUSH
26422: LD_INT 4
26424: PUSH
26425: LD_INT 5
26427: PUSH
26428: LD_INT 6
26430: PUSH
26431: LD_INT 8
26433: PUSH
26434: LD_INT 11
26436: PUSH
26437: LD_INT 12
26439: PUSH
26440: LD_INT 15
26442: PUSH
26443: LD_INT 16
26445: PUSH
26446: LD_INT 20
26448: PUSH
26449: LD_INT 21
26451: PUSH
26452: LD_INT 22
26454: PUSH
26455: LD_INT 23
26457: PUSH
26458: LD_INT 25
26460: PUSH
26461: LD_INT 26
26463: PUSH
26464: LD_INT 30
26466: PUSH
26467: LD_INT 31
26469: PUSH
26470: LD_INT 32
26472: PUSH
26473: LD_INT 36
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 101
26499: PUSH
26500: LD_INT 102
26502: PUSH
26503: LD_INT 105
26505: PUSH
26506: LD_INT 106
26508: PUSH
26509: LD_INT 108
26511: PUSH
26512: LD_INT 109
26514: PUSH
26515: LD_INT 112
26517: PUSH
26518: LD_INT 116
26520: PUSH
26521: LD_INT 117
26523: PUSH
26524: LD_INT 118
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: ST_TO_ADDR
26543: GO 29066
26545: LD_INT 7
26547: DOUBLE
26548: EQUAL
26549: IFTRUE 26553
26551: GO 26665
26553: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
26554: LD_ADDR_VAR 0 2
26558: PUSH
26559: LD_INT 2
26561: PUSH
26562: LD_INT 4
26564: PUSH
26565: LD_INT 5
26567: PUSH
26568: LD_INT 7
26570: PUSH
26571: LD_INT 11
26573: PUSH
26574: LD_INT 12
26576: PUSH
26577: LD_INT 15
26579: PUSH
26580: LD_INT 16
26582: PUSH
26583: LD_INT 20
26585: PUSH
26586: LD_INT 21
26588: PUSH
26589: LD_INT 22
26591: PUSH
26592: LD_INT 23
26594: PUSH
26595: LD_INT 25
26597: PUSH
26598: LD_INT 26
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: PUSH
26617: LD_INT 101
26619: PUSH
26620: LD_INT 102
26622: PUSH
26623: LD_INT 103
26625: PUSH
26626: LD_INT 105
26628: PUSH
26629: LD_INT 106
26631: PUSH
26632: LD_INT 108
26634: PUSH
26635: LD_INT 112
26637: PUSH
26638: LD_INT 116
26640: PUSH
26641: LD_INT 117
26643: PUSH
26644: LD_INT 118
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: ST_TO_ADDR
26663: GO 29066
26665: LD_INT 8
26667: DOUBLE
26668: EQUAL
26669: IFTRUE 26673
26671: GO 26813
26673: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
26674: LD_ADDR_VAR 0 2
26678: PUSH
26679: LD_INT 2
26681: PUSH
26682: LD_INT 4
26684: PUSH
26685: LD_INT 5
26687: PUSH
26688: LD_INT 6
26690: PUSH
26691: LD_INT 7
26693: PUSH
26694: LD_INT 8
26696: PUSH
26697: LD_INT 11
26699: PUSH
26700: LD_INT 12
26702: PUSH
26703: LD_INT 15
26705: PUSH
26706: LD_INT 16
26708: PUSH
26709: LD_INT 20
26711: PUSH
26712: LD_INT 21
26714: PUSH
26715: LD_INT 22
26717: PUSH
26718: LD_INT 23
26720: PUSH
26721: LD_INT 25
26723: PUSH
26724: LD_INT 26
26726: PUSH
26727: LD_INT 30
26729: PUSH
26730: LD_INT 31
26732: PUSH
26733: LD_INT 32
26735: PUSH
26736: LD_INT 36
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 101
26763: PUSH
26764: LD_INT 102
26766: PUSH
26767: LD_INT 103
26769: PUSH
26770: LD_INT 105
26772: PUSH
26773: LD_INT 106
26775: PUSH
26776: LD_INT 108
26778: PUSH
26779: LD_INT 109
26781: PUSH
26782: LD_INT 112
26784: PUSH
26785: LD_INT 116
26787: PUSH
26788: LD_INT 117
26790: PUSH
26791: LD_INT 118
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: ST_TO_ADDR
26811: GO 29066
26813: LD_INT 9
26815: DOUBLE
26816: EQUAL
26817: IFTRUE 26821
26819: GO 26969
26821: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
26822: LD_ADDR_VAR 0 2
26826: PUSH
26827: LD_INT 2
26829: PUSH
26830: LD_INT 4
26832: PUSH
26833: LD_INT 5
26835: PUSH
26836: LD_INT 6
26838: PUSH
26839: LD_INT 7
26841: PUSH
26842: LD_INT 8
26844: PUSH
26845: LD_INT 11
26847: PUSH
26848: LD_INT 12
26850: PUSH
26851: LD_INT 15
26853: PUSH
26854: LD_INT 16
26856: PUSH
26857: LD_INT 20
26859: PUSH
26860: LD_INT 21
26862: PUSH
26863: LD_INT 22
26865: PUSH
26866: LD_INT 23
26868: PUSH
26869: LD_INT 25
26871: PUSH
26872: LD_INT 26
26874: PUSH
26875: LD_INT 28
26877: PUSH
26878: LD_INT 30
26880: PUSH
26881: LD_INT 31
26883: PUSH
26884: LD_INT 32
26886: PUSH
26887: LD_INT 36
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 101
26915: PUSH
26916: LD_INT 102
26918: PUSH
26919: LD_INT 103
26921: PUSH
26922: LD_INT 105
26924: PUSH
26925: LD_INT 106
26927: PUSH
26928: LD_INT 108
26930: PUSH
26931: LD_INT 109
26933: PUSH
26934: LD_INT 112
26936: PUSH
26937: LD_INT 114
26939: PUSH
26940: LD_INT 116
26942: PUSH
26943: LD_INT 117
26945: PUSH
26946: LD_INT 118
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: ST_TO_ADDR
26967: GO 29066
26969: LD_INT 10
26971: DOUBLE
26972: EQUAL
26973: IFTRUE 26977
26975: GO 27173
26977: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
26978: LD_ADDR_VAR 0 2
26982: PUSH
26983: LD_INT 2
26985: PUSH
26986: LD_INT 4
26988: PUSH
26989: LD_INT 5
26991: PUSH
26992: LD_INT 6
26994: PUSH
26995: LD_INT 7
26997: PUSH
26998: LD_INT 8
27000: PUSH
27001: LD_INT 9
27003: PUSH
27004: LD_INT 10
27006: PUSH
27007: LD_INT 11
27009: PUSH
27010: LD_INT 12
27012: PUSH
27013: LD_INT 13
27015: PUSH
27016: LD_INT 14
27018: PUSH
27019: LD_INT 15
27021: PUSH
27022: LD_INT 16
27024: PUSH
27025: LD_INT 17
27027: PUSH
27028: LD_INT 18
27030: PUSH
27031: LD_INT 19
27033: PUSH
27034: LD_INT 20
27036: PUSH
27037: LD_INT 21
27039: PUSH
27040: LD_INT 22
27042: PUSH
27043: LD_INT 23
27045: PUSH
27046: LD_INT 24
27048: PUSH
27049: LD_INT 25
27051: PUSH
27052: LD_INT 26
27054: PUSH
27055: LD_INT 28
27057: PUSH
27058: LD_INT 30
27060: PUSH
27061: LD_INT 31
27063: PUSH
27064: LD_INT 32
27066: PUSH
27067: LD_INT 36
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 101
27103: PUSH
27104: LD_INT 102
27106: PUSH
27107: LD_INT 103
27109: PUSH
27110: LD_INT 104
27112: PUSH
27113: LD_INT 105
27115: PUSH
27116: LD_INT 106
27118: PUSH
27119: LD_INT 107
27121: PUSH
27122: LD_INT 108
27124: PUSH
27125: LD_INT 109
27127: PUSH
27128: LD_INT 110
27130: PUSH
27131: LD_INT 111
27133: PUSH
27134: LD_INT 112
27136: PUSH
27137: LD_INT 114
27139: PUSH
27140: LD_INT 116
27142: PUSH
27143: LD_INT 117
27145: PUSH
27146: LD_INT 118
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: ST_TO_ADDR
27171: GO 29066
27173: LD_INT 11
27175: DOUBLE
27176: EQUAL
27177: IFTRUE 27181
27179: GO 27385
27181: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
27182: LD_ADDR_VAR 0 2
27186: PUSH
27187: LD_INT 2
27189: PUSH
27190: LD_INT 3
27192: PUSH
27193: LD_INT 4
27195: PUSH
27196: LD_INT 5
27198: PUSH
27199: LD_INT 6
27201: PUSH
27202: LD_INT 7
27204: PUSH
27205: LD_INT 8
27207: PUSH
27208: LD_INT 9
27210: PUSH
27211: LD_INT 10
27213: PUSH
27214: LD_INT 11
27216: PUSH
27217: LD_INT 12
27219: PUSH
27220: LD_INT 13
27222: PUSH
27223: LD_INT 14
27225: PUSH
27226: LD_INT 15
27228: PUSH
27229: LD_INT 16
27231: PUSH
27232: LD_INT 17
27234: PUSH
27235: LD_INT 18
27237: PUSH
27238: LD_INT 19
27240: PUSH
27241: LD_INT 20
27243: PUSH
27244: LD_INT 21
27246: PUSH
27247: LD_INT 22
27249: PUSH
27250: LD_INT 23
27252: PUSH
27253: LD_INT 24
27255: PUSH
27256: LD_INT 25
27258: PUSH
27259: LD_INT 26
27261: PUSH
27262: LD_INT 28
27264: PUSH
27265: LD_INT 30
27267: PUSH
27268: LD_INT 31
27270: PUSH
27271: LD_INT 32
27273: PUSH
27274: LD_INT 34
27276: PUSH
27277: LD_INT 36
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 101
27315: PUSH
27316: LD_INT 102
27318: PUSH
27319: LD_INT 103
27321: PUSH
27322: LD_INT 104
27324: PUSH
27325: LD_INT 105
27327: PUSH
27328: LD_INT 106
27330: PUSH
27331: LD_INT 107
27333: PUSH
27334: LD_INT 108
27336: PUSH
27337: LD_INT 109
27339: PUSH
27340: LD_INT 110
27342: PUSH
27343: LD_INT 111
27345: PUSH
27346: LD_INT 112
27348: PUSH
27349: LD_INT 114
27351: PUSH
27352: LD_INT 116
27354: PUSH
27355: LD_INT 117
27357: PUSH
27358: LD_INT 118
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: ST_TO_ADDR
27383: GO 29066
27385: LD_INT 12
27387: DOUBLE
27388: EQUAL
27389: IFTRUE 27393
27391: GO 27613
27393: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
27394: LD_ADDR_VAR 0 2
27398: PUSH
27399: LD_INT 1
27401: PUSH
27402: LD_INT 2
27404: PUSH
27405: LD_INT 3
27407: PUSH
27408: LD_INT 4
27410: PUSH
27411: LD_INT 5
27413: PUSH
27414: LD_INT 6
27416: PUSH
27417: LD_INT 7
27419: PUSH
27420: LD_INT 8
27422: PUSH
27423: LD_INT 9
27425: PUSH
27426: LD_INT 10
27428: PUSH
27429: LD_INT 11
27431: PUSH
27432: LD_INT 12
27434: PUSH
27435: LD_INT 13
27437: PUSH
27438: LD_INT 14
27440: PUSH
27441: LD_INT 15
27443: PUSH
27444: LD_INT 16
27446: PUSH
27447: LD_INT 17
27449: PUSH
27450: LD_INT 18
27452: PUSH
27453: LD_INT 19
27455: PUSH
27456: LD_INT 20
27458: PUSH
27459: LD_INT 21
27461: PUSH
27462: LD_INT 22
27464: PUSH
27465: LD_INT 23
27467: PUSH
27468: LD_INT 24
27470: PUSH
27471: LD_INT 25
27473: PUSH
27474: LD_INT 26
27476: PUSH
27477: LD_INT 27
27479: PUSH
27480: LD_INT 28
27482: PUSH
27483: LD_INT 30
27485: PUSH
27486: LD_INT 31
27488: PUSH
27489: LD_INT 32
27491: PUSH
27492: LD_INT 33
27494: PUSH
27495: LD_INT 34
27497: PUSH
27498: LD_INT 36
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 101
27539: PUSH
27540: LD_INT 102
27542: PUSH
27543: LD_INT 103
27545: PUSH
27546: LD_INT 104
27548: PUSH
27549: LD_INT 105
27551: PUSH
27552: LD_INT 106
27554: PUSH
27555: LD_INT 107
27557: PUSH
27558: LD_INT 108
27560: PUSH
27561: LD_INT 109
27563: PUSH
27564: LD_INT 110
27566: PUSH
27567: LD_INT 111
27569: PUSH
27570: LD_INT 112
27572: PUSH
27573: LD_INT 113
27575: PUSH
27576: LD_INT 114
27578: PUSH
27579: LD_INT 116
27581: PUSH
27582: LD_INT 117
27584: PUSH
27585: LD_INT 118
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: ST_TO_ADDR
27611: GO 29066
27613: LD_INT 13
27615: DOUBLE
27616: EQUAL
27617: IFTRUE 27621
27619: GO 27829
27621: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
27622: LD_ADDR_VAR 0 2
27626: PUSH
27627: LD_INT 1
27629: PUSH
27630: LD_INT 2
27632: PUSH
27633: LD_INT 3
27635: PUSH
27636: LD_INT 4
27638: PUSH
27639: LD_INT 5
27641: PUSH
27642: LD_INT 8
27644: PUSH
27645: LD_INT 9
27647: PUSH
27648: LD_INT 10
27650: PUSH
27651: LD_INT 11
27653: PUSH
27654: LD_INT 12
27656: PUSH
27657: LD_INT 14
27659: PUSH
27660: LD_INT 15
27662: PUSH
27663: LD_INT 16
27665: PUSH
27666: LD_INT 17
27668: PUSH
27669: LD_INT 18
27671: PUSH
27672: LD_INT 19
27674: PUSH
27675: LD_INT 20
27677: PUSH
27678: LD_INT 21
27680: PUSH
27681: LD_INT 22
27683: PUSH
27684: LD_INT 23
27686: PUSH
27687: LD_INT 24
27689: PUSH
27690: LD_INT 25
27692: PUSH
27693: LD_INT 26
27695: PUSH
27696: LD_INT 27
27698: PUSH
27699: LD_INT 28
27701: PUSH
27702: LD_INT 30
27704: PUSH
27705: LD_INT 31
27707: PUSH
27708: LD_INT 32
27710: PUSH
27711: LD_INT 33
27713: PUSH
27714: LD_INT 34
27716: PUSH
27717: LD_INT 36
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 101
27755: PUSH
27756: LD_INT 102
27758: PUSH
27759: LD_INT 103
27761: PUSH
27762: LD_INT 104
27764: PUSH
27765: LD_INT 105
27767: PUSH
27768: LD_INT 106
27770: PUSH
27771: LD_INT 107
27773: PUSH
27774: LD_INT 108
27776: PUSH
27777: LD_INT 109
27779: PUSH
27780: LD_INT 110
27782: PUSH
27783: LD_INT 111
27785: PUSH
27786: LD_INT 112
27788: PUSH
27789: LD_INT 113
27791: PUSH
27792: LD_INT 114
27794: PUSH
27795: LD_INT 116
27797: PUSH
27798: LD_INT 117
27800: PUSH
27801: LD_INT 118
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: ST_TO_ADDR
27827: GO 29066
27829: LD_INT 14
27831: DOUBLE
27832: EQUAL
27833: IFTRUE 27837
27835: GO 28061
27837: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
27838: LD_ADDR_VAR 0 2
27842: PUSH
27843: LD_INT 1
27845: PUSH
27846: LD_INT 2
27848: PUSH
27849: LD_INT 3
27851: PUSH
27852: LD_INT 4
27854: PUSH
27855: LD_INT 5
27857: PUSH
27858: LD_INT 6
27860: PUSH
27861: LD_INT 7
27863: PUSH
27864: LD_INT 8
27866: PUSH
27867: LD_INT 9
27869: PUSH
27870: LD_INT 10
27872: PUSH
27873: LD_INT 11
27875: PUSH
27876: LD_INT 12
27878: PUSH
27879: LD_INT 13
27881: PUSH
27882: LD_INT 14
27884: PUSH
27885: LD_INT 15
27887: PUSH
27888: LD_INT 16
27890: PUSH
27891: LD_INT 17
27893: PUSH
27894: LD_INT 18
27896: PUSH
27897: LD_INT 19
27899: PUSH
27900: LD_INT 20
27902: PUSH
27903: LD_INT 21
27905: PUSH
27906: LD_INT 22
27908: PUSH
27909: LD_INT 23
27911: PUSH
27912: LD_INT 24
27914: PUSH
27915: LD_INT 25
27917: PUSH
27918: LD_INT 26
27920: PUSH
27921: LD_INT 27
27923: PUSH
27924: LD_INT 28
27926: PUSH
27927: LD_INT 29
27929: PUSH
27930: LD_INT 30
27932: PUSH
27933: LD_INT 31
27935: PUSH
27936: LD_INT 32
27938: PUSH
27939: LD_INT 33
27941: PUSH
27942: LD_INT 34
27944: PUSH
27945: LD_INT 36
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 101
27987: PUSH
27988: LD_INT 102
27990: PUSH
27991: LD_INT 103
27993: PUSH
27994: LD_INT 104
27996: PUSH
27997: LD_INT 105
27999: PUSH
28000: LD_INT 106
28002: PUSH
28003: LD_INT 107
28005: PUSH
28006: LD_INT 108
28008: PUSH
28009: LD_INT 109
28011: PUSH
28012: LD_INT 110
28014: PUSH
28015: LD_INT 111
28017: PUSH
28018: LD_INT 112
28020: PUSH
28021: LD_INT 113
28023: PUSH
28024: LD_INT 114
28026: PUSH
28027: LD_INT 116
28029: PUSH
28030: LD_INT 117
28032: PUSH
28033: LD_INT 118
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: ST_TO_ADDR
28059: GO 29066
28061: LD_INT 15
28063: DOUBLE
28064: EQUAL
28065: IFTRUE 28069
28067: GO 28293
28069: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
28070: LD_ADDR_VAR 0 2
28074: PUSH
28075: LD_INT 1
28077: PUSH
28078: LD_INT 2
28080: PUSH
28081: LD_INT 3
28083: PUSH
28084: LD_INT 4
28086: PUSH
28087: LD_INT 5
28089: PUSH
28090: LD_INT 6
28092: PUSH
28093: LD_INT 7
28095: PUSH
28096: LD_INT 8
28098: PUSH
28099: LD_INT 9
28101: PUSH
28102: LD_INT 10
28104: PUSH
28105: LD_INT 11
28107: PUSH
28108: LD_INT 12
28110: PUSH
28111: LD_INT 13
28113: PUSH
28114: LD_INT 14
28116: PUSH
28117: LD_INT 15
28119: PUSH
28120: LD_INT 16
28122: PUSH
28123: LD_INT 17
28125: PUSH
28126: LD_INT 18
28128: PUSH
28129: LD_INT 19
28131: PUSH
28132: LD_INT 20
28134: PUSH
28135: LD_INT 21
28137: PUSH
28138: LD_INT 22
28140: PUSH
28141: LD_INT 23
28143: PUSH
28144: LD_INT 24
28146: PUSH
28147: LD_INT 25
28149: PUSH
28150: LD_INT 26
28152: PUSH
28153: LD_INT 27
28155: PUSH
28156: LD_INT 28
28158: PUSH
28159: LD_INT 29
28161: PUSH
28162: LD_INT 30
28164: PUSH
28165: LD_INT 31
28167: PUSH
28168: LD_INT 32
28170: PUSH
28171: LD_INT 33
28173: PUSH
28174: LD_INT 34
28176: PUSH
28177: LD_INT 36
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 101
28219: PUSH
28220: LD_INT 102
28222: PUSH
28223: LD_INT 103
28225: PUSH
28226: LD_INT 104
28228: PUSH
28229: LD_INT 105
28231: PUSH
28232: LD_INT 106
28234: PUSH
28235: LD_INT 107
28237: PUSH
28238: LD_INT 108
28240: PUSH
28241: LD_INT 109
28243: PUSH
28244: LD_INT 110
28246: PUSH
28247: LD_INT 111
28249: PUSH
28250: LD_INT 112
28252: PUSH
28253: LD_INT 113
28255: PUSH
28256: LD_INT 114
28258: PUSH
28259: LD_INT 116
28261: PUSH
28262: LD_INT 117
28264: PUSH
28265: LD_INT 118
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: ST_TO_ADDR
28291: GO 29066
28293: LD_INT 16
28295: DOUBLE
28296: EQUAL
28297: IFTRUE 28301
28299: GO 28437
28301: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
28302: LD_ADDR_VAR 0 2
28306: PUSH
28307: LD_INT 2
28309: PUSH
28310: LD_INT 4
28312: PUSH
28313: LD_INT 5
28315: PUSH
28316: LD_INT 7
28318: PUSH
28319: LD_INT 11
28321: PUSH
28322: LD_INT 12
28324: PUSH
28325: LD_INT 15
28327: PUSH
28328: LD_INT 16
28330: PUSH
28331: LD_INT 20
28333: PUSH
28334: LD_INT 21
28336: PUSH
28337: LD_INT 22
28339: PUSH
28340: LD_INT 23
28342: PUSH
28343: LD_INT 25
28345: PUSH
28346: LD_INT 26
28348: PUSH
28349: LD_INT 30
28351: PUSH
28352: LD_INT 31
28354: PUSH
28355: LD_INT 32
28357: PUSH
28358: LD_INT 33
28360: PUSH
28361: LD_INT 34
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 101
28387: PUSH
28388: LD_INT 102
28390: PUSH
28391: LD_INT 103
28393: PUSH
28394: LD_INT 106
28396: PUSH
28397: LD_INT 108
28399: PUSH
28400: LD_INT 112
28402: PUSH
28403: LD_INT 113
28405: PUSH
28406: LD_INT 114
28408: PUSH
28409: LD_INT 116
28411: PUSH
28412: LD_INT 117
28414: PUSH
28415: LD_INT 118
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: ST_TO_ADDR
28435: GO 29066
28437: LD_INT 17
28439: DOUBLE
28440: EQUAL
28441: IFTRUE 28445
28443: GO 28669
28445: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
28446: LD_ADDR_VAR 0 2
28450: PUSH
28451: LD_INT 1
28453: PUSH
28454: LD_INT 2
28456: PUSH
28457: LD_INT 3
28459: PUSH
28460: LD_INT 4
28462: PUSH
28463: LD_INT 5
28465: PUSH
28466: LD_INT 6
28468: PUSH
28469: LD_INT 7
28471: PUSH
28472: LD_INT 8
28474: PUSH
28475: LD_INT 9
28477: PUSH
28478: LD_INT 10
28480: PUSH
28481: LD_INT 11
28483: PUSH
28484: LD_INT 12
28486: PUSH
28487: LD_INT 13
28489: PUSH
28490: LD_INT 14
28492: PUSH
28493: LD_INT 15
28495: PUSH
28496: LD_INT 16
28498: PUSH
28499: LD_INT 17
28501: PUSH
28502: LD_INT 18
28504: PUSH
28505: LD_INT 19
28507: PUSH
28508: LD_INT 20
28510: PUSH
28511: LD_INT 21
28513: PUSH
28514: LD_INT 22
28516: PUSH
28517: LD_INT 23
28519: PUSH
28520: LD_INT 24
28522: PUSH
28523: LD_INT 25
28525: PUSH
28526: LD_INT 26
28528: PUSH
28529: LD_INT 27
28531: PUSH
28532: LD_INT 28
28534: PUSH
28535: LD_INT 29
28537: PUSH
28538: LD_INT 30
28540: PUSH
28541: LD_INT 31
28543: PUSH
28544: LD_INT 32
28546: PUSH
28547: LD_INT 33
28549: PUSH
28550: LD_INT 34
28552: PUSH
28553: LD_INT 36
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 101
28595: PUSH
28596: LD_INT 102
28598: PUSH
28599: LD_INT 103
28601: PUSH
28602: LD_INT 104
28604: PUSH
28605: LD_INT 105
28607: PUSH
28608: LD_INT 106
28610: PUSH
28611: LD_INT 107
28613: PUSH
28614: LD_INT 108
28616: PUSH
28617: LD_INT 109
28619: PUSH
28620: LD_INT 110
28622: PUSH
28623: LD_INT 111
28625: PUSH
28626: LD_INT 112
28628: PUSH
28629: LD_INT 113
28631: PUSH
28632: LD_INT 114
28634: PUSH
28635: LD_INT 116
28637: PUSH
28638: LD_INT 117
28640: PUSH
28641: LD_INT 118
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: ST_TO_ADDR
28667: GO 29066
28669: LD_INT 18
28671: DOUBLE
28672: EQUAL
28673: IFTRUE 28677
28675: GO 28825
28677: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
28678: LD_ADDR_VAR 0 2
28682: PUSH
28683: LD_INT 2
28685: PUSH
28686: LD_INT 4
28688: PUSH
28689: LD_INT 5
28691: PUSH
28692: LD_INT 7
28694: PUSH
28695: LD_INT 11
28697: PUSH
28698: LD_INT 12
28700: PUSH
28701: LD_INT 15
28703: PUSH
28704: LD_INT 16
28706: PUSH
28707: LD_INT 20
28709: PUSH
28710: LD_INT 21
28712: PUSH
28713: LD_INT 22
28715: PUSH
28716: LD_INT 23
28718: PUSH
28719: LD_INT 25
28721: PUSH
28722: LD_INT 26
28724: PUSH
28725: LD_INT 30
28727: PUSH
28728: LD_INT 31
28730: PUSH
28731: LD_INT 32
28733: PUSH
28734: LD_INT 33
28736: PUSH
28737: LD_INT 34
28739: PUSH
28740: LD_INT 35
28742: PUSH
28743: LD_INT 36
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 101
28771: PUSH
28772: LD_INT 102
28774: PUSH
28775: LD_INT 103
28777: PUSH
28778: LD_INT 106
28780: PUSH
28781: LD_INT 108
28783: PUSH
28784: LD_INT 112
28786: PUSH
28787: LD_INT 113
28789: PUSH
28790: LD_INT 114
28792: PUSH
28793: LD_INT 115
28795: PUSH
28796: LD_INT 116
28798: PUSH
28799: LD_INT 117
28801: PUSH
28802: LD_INT 118
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: ST_TO_ADDR
28823: GO 29066
28825: LD_INT 19
28827: DOUBLE
28828: EQUAL
28829: IFTRUE 28833
28831: GO 29065
28833: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
28834: LD_ADDR_VAR 0 2
28838: PUSH
28839: LD_INT 1
28841: PUSH
28842: LD_INT 2
28844: PUSH
28845: LD_INT 3
28847: PUSH
28848: LD_INT 4
28850: PUSH
28851: LD_INT 5
28853: PUSH
28854: LD_INT 6
28856: PUSH
28857: LD_INT 7
28859: PUSH
28860: LD_INT 8
28862: PUSH
28863: LD_INT 9
28865: PUSH
28866: LD_INT 10
28868: PUSH
28869: LD_INT 11
28871: PUSH
28872: LD_INT 12
28874: PUSH
28875: LD_INT 13
28877: PUSH
28878: LD_INT 14
28880: PUSH
28881: LD_INT 15
28883: PUSH
28884: LD_INT 16
28886: PUSH
28887: LD_INT 17
28889: PUSH
28890: LD_INT 18
28892: PUSH
28893: LD_INT 19
28895: PUSH
28896: LD_INT 20
28898: PUSH
28899: LD_INT 21
28901: PUSH
28902: LD_INT 22
28904: PUSH
28905: LD_INT 23
28907: PUSH
28908: LD_INT 24
28910: PUSH
28911: LD_INT 25
28913: PUSH
28914: LD_INT 26
28916: PUSH
28917: LD_INT 27
28919: PUSH
28920: LD_INT 28
28922: PUSH
28923: LD_INT 29
28925: PUSH
28926: LD_INT 30
28928: PUSH
28929: LD_INT 31
28931: PUSH
28932: LD_INT 32
28934: PUSH
28935: LD_INT 33
28937: PUSH
28938: LD_INT 34
28940: PUSH
28941: LD_INT 35
28943: PUSH
28944: LD_INT 36
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 101
28987: PUSH
28988: LD_INT 102
28990: PUSH
28991: LD_INT 103
28993: PUSH
28994: LD_INT 104
28996: PUSH
28997: LD_INT 105
28999: PUSH
29000: LD_INT 106
29002: PUSH
29003: LD_INT 107
29005: PUSH
29006: LD_INT 108
29008: PUSH
29009: LD_INT 109
29011: PUSH
29012: LD_INT 110
29014: PUSH
29015: LD_INT 111
29017: PUSH
29018: LD_INT 112
29020: PUSH
29021: LD_INT 113
29023: PUSH
29024: LD_INT 114
29026: PUSH
29027: LD_INT 115
29029: PUSH
29030: LD_INT 116
29032: PUSH
29033: LD_INT 117
29035: PUSH
29036: LD_INT 118
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: ST_TO_ADDR
29063: GO 29066
29065: POP
// end else
29066: GO 29297
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
29068: LD_ADDR_VAR 0 2
29072: PUSH
29073: LD_INT 1
29075: PUSH
29076: LD_INT 2
29078: PUSH
29079: LD_INT 3
29081: PUSH
29082: LD_INT 4
29084: PUSH
29085: LD_INT 5
29087: PUSH
29088: LD_INT 6
29090: PUSH
29091: LD_INT 7
29093: PUSH
29094: LD_INT 8
29096: PUSH
29097: LD_INT 9
29099: PUSH
29100: LD_INT 10
29102: PUSH
29103: LD_INT 11
29105: PUSH
29106: LD_INT 12
29108: PUSH
29109: LD_INT 13
29111: PUSH
29112: LD_INT 14
29114: PUSH
29115: LD_INT 15
29117: PUSH
29118: LD_INT 16
29120: PUSH
29121: LD_INT 17
29123: PUSH
29124: LD_INT 18
29126: PUSH
29127: LD_INT 19
29129: PUSH
29130: LD_INT 20
29132: PUSH
29133: LD_INT 21
29135: PUSH
29136: LD_INT 22
29138: PUSH
29139: LD_INT 23
29141: PUSH
29142: LD_INT 24
29144: PUSH
29145: LD_INT 25
29147: PUSH
29148: LD_INT 26
29150: PUSH
29151: LD_INT 27
29153: PUSH
29154: LD_INT 28
29156: PUSH
29157: LD_INT 29
29159: PUSH
29160: LD_INT 30
29162: PUSH
29163: LD_INT 31
29165: PUSH
29166: LD_INT 32
29168: PUSH
29169: LD_INT 33
29171: PUSH
29172: LD_INT 34
29174: PUSH
29175: LD_INT 35
29177: PUSH
29178: LD_INT 36
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 101
29221: PUSH
29222: LD_INT 102
29224: PUSH
29225: LD_INT 103
29227: PUSH
29228: LD_INT 104
29230: PUSH
29231: LD_INT 105
29233: PUSH
29234: LD_INT 106
29236: PUSH
29237: LD_INT 107
29239: PUSH
29240: LD_INT 108
29242: PUSH
29243: LD_INT 109
29245: PUSH
29246: LD_INT 110
29248: PUSH
29249: LD_INT 111
29251: PUSH
29252: LD_INT 112
29254: PUSH
29255: LD_INT 113
29257: PUSH
29258: LD_INT 114
29260: PUSH
29261: LD_INT 115
29263: PUSH
29264: LD_INT 116
29266: PUSH
29267: LD_INT 117
29269: PUSH
29270: LD_INT 118
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: ST_TO_ADDR
// if result then
29297: LD_VAR 0 2
29301: IFFALSE 30087
// begin normal :=  ;
29303: LD_ADDR_VAR 0 5
29307: PUSH
29308: LD_STRING 
29310: ST_TO_ADDR
// hardcore :=  ;
29311: LD_ADDR_VAR 0 6
29315: PUSH
29316: LD_STRING 
29318: ST_TO_ADDR
// active :=  ;
29319: LD_ADDR_VAR 0 7
29323: PUSH
29324: LD_STRING 
29326: ST_TO_ADDR
// for i = 1 to normalCounter do
29327: LD_ADDR_VAR 0 8
29331: PUSH
29332: DOUBLE
29333: LD_INT 1
29335: DEC
29336: ST_TO_ADDR
29337: LD_EXP 67
29341: PUSH
29342: FOR_TO
29343: IFFALSE 29444
// begin tmp := 0 ;
29345: LD_ADDR_VAR 0 3
29349: PUSH
29350: LD_STRING 0
29352: ST_TO_ADDR
// if result [ 1 ] then
29353: LD_VAR 0 2
29357: PUSH
29358: LD_INT 1
29360: ARRAY
29361: IFFALSE 29426
// if result [ 1 ] [ 1 ] = i then
29363: LD_VAR 0 2
29367: PUSH
29368: LD_INT 1
29370: ARRAY
29371: PUSH
29372: LD_INT 1
29374: ARRAY
29375: PUSH
29376: LD_VAR 0 8
29380: EQUAL
29381: IFFALSE 29426
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
29383: LD_ADDR_VAR 0 2
29387: PUSH
29388: LD_VAR 0 2
29392: PPUSH
29393: LD_INT 1
29395: PPUSH
29396: LD_VAR 0 2
29400: PUSH
29401: LD_INT 1
29403: ARRAY
29404: PPUSH
29405: LD_INT 1
29407: PPUSH
29408: CALL_OW 3
29412: PPUSH
29413: CALL_OW 1
29417: ST_TO_ADDR
// tmp := 1 ;
29418: LD_ADDR_VAR 0 3
29422: PUSH
29423: LD_STRING 1
29425: ST_TO_ADDR
// end ; normal := normal & tmp ;
29426: LD_ADDR_VAR 0 5
29430: PUSH
29431: LD_VAR 0 5
29435: PUSH
29436: LD_VAR 0 3
29440: STR
29441: ST_TO_ADDR
// end ;
29442: GO 29342
29444: POP
29445: POP
// for i = 1 to hardcoreCounter do
29446: LD_ADDR_VAR 0 8
29450: PUSH
29451: DOUBLE
29452: LD_INT 1
29454: DEC
29455: ST_TO_ADDR
29456: LD_EXP 68
29460: PUSH
29461: FOR_TO
29462: IFFALSE 29567
// begin tmp := 0 ;
29464: LD_ADDR_VAR 0 3
29468: PUSH
29469: LD_STRING 0
29471: ST_TO_ADDR
// if result [ 2 ] then
29472: LD_VAR 0 2
29476: PUSH
29477: LD_INT 2
29479: ARRAY
29480: IFFALSE 29549
// if result [ 2 ] [ 1 ] = 100 + i then
29482: LD_VAR 0 2
29486: PUSH
29487: LD_INT 2
29489: ARRAY
29490: PUSH
29491: LD_INT 1
29493: ARRAY
29494: PUSH
29495: LD_INT 100
29497: PUSH
29498: LD_VAR 0 8
29502: PLUS
29503: EQUAL
29504: IFFALSE 29549
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
29506: LD_ADDR_VAR 0 2
29510: PUSH
29511: LD_VAR 0 2
29515: PPUSH
29516: LD_INT 2
29518: PPUSH
29519: LD_VAR 0 2
29523: PUSH
29524: LD_INT 2
29526: ARRAY
29527: PPUSH
29528: LD_INT 1
29530: PPUSH
29531: CALL_OW 3
29535: PPUSH
29536: CALL_OW 1
29540: ST_TO_ADDR
// tmp := 1 ;
29541: LD_ADDR_VAR 0 3
29545: PUSH
29546: LD_STRING 1
29548: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
29549: LD_ADDR_VAR 0 6
29553: PUSH
29554: LD_VAR 0 6
29558: PUSH
29559: LD_VAR 0 3
29563: STR
29564: ST_TO_ADDR
// end ;
29565: GO 29461
29567: POP
29568: POP
// if isGameLoad then
29569: LD_VAR 0 1
29573: IFFALSE 30048
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
29575: LD_ADDR_VAR 0 4
29579: PUSH
29580: LD_EXP 71
29584: PUSH
29585: LD_EXP 70
29589: PUSH
29590: LD_EXP 72
29594: PUSH
29595: LD_EXP 69
29599: PUSH
29600: LD_EXP 73
29604: PUSH
29605: LD_EXP 74
29609: PUSH
29610: LD_EXP 75
29614: PUSH
29615: LD_EXP 76
29619: PUSH
29620: LD_EXP 77
29624: PUSH
29625: LD_EXP 78
29629: PUSH
29630: LD_EXP 79
29634: PUSH
29635: LD_EXP 80
29639: PUSH
29640: LD_EXP 81
29644: PUSH
29645: LD_EXP 82
29649: PUSH
29650: LD_EXP 90
29654: PUSH
29655: LD_EXP 91
29659: PUSH
29660: LD_EXP 92
29664: PUSH
29665: LD_EXP 93
29669: PUSH
29670: LD_EXP 95
29674: PUSH
29675: LD_EXP 96
29679: PUSH
29680: LD_EXP 97
29684: PUSH
29685: LD_EXP 100
29689: PUSH
29690: LD_EXP 102
29694: PUSH
29695: LD_EXP 103
29699: PUSH
29700: LD_EXP 104
29704: PUSH
29705: LD_EXP 106
29709: PUSH
29710: LD_EXP 107
29714: PUSH
29715: LD_EXP 110
29719: PUSH
29720: LD_EXP 111
29724: PUSH
29725: LD_EXP 112
29729: PUSH
29730: LD_EXP 113
29734: PUSH
29735: LD_EXP 114
29739: PUSH
29740: LD_EXP 115
29744: PUSH
29745: LD_EXP 116
29749: PUSH
29750: LD_EXP 117
29754: PUSH
29755: LD_EXP 118
29759: PUSH
29760: LD_EXP 83
29764: PUSH
29765: LD_EXP 84
29769: PUSH
29770: LD_EXP 87
29774: PUSH
29775: LD_EXP 88
29779: PUSH
29780: LD_EXP 89
29784: PUSH
29785: LD_EXP 85
29789: PUSH
29790: LD_EXP 86
29794: PUSH
29795: LD_EXP 94
29799: PUSH
29800: LD_EXP 98
29804: PUSH
29805: LD_EXP 99
29809: PUSH
29810: LD_EXP 101
29814: PUSH
29815: LD_EXP 105
29819: PUSH
29820: LD_EXP 108
29824: PUSH
29825: LD_EXP 109
29829: PUSH
29830: LD_EXP 119
29834: PUSH
29835: LD_EXP 120
29839: PUSH
29840: LD_EXP 121
29844: PUSH
29845: LD_EXP 122
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: ST_TO_ADDR
// tmp :=  ;
29906: LD_ADDR_VAR 0 3
29910: PUSH
29911: LD_STRING 
29913: ST_TO_ADDR
// for i = 1 to normalCounter do
29914: LD_ADDR_VAR 0 8
29918: PUSH
29919: DOUBLE
29920: LD_INT 1
29922: DEC
29923: ST_TO_ADDR
29924: LD_EXP 67
29928: PUSH
29929: FOR_TO
29930: IFFALSE 29966
// begin if flags [ i ] then
29932: LD_VAR 0 4
29936: PUSH
29937: LD_VAR 0 8
29941: ARRAY
29942: IFFALSE 29964
// tmp := tmp & i & ; ;
29944: LD_ADDR_VAR 0 3
29948: PUSH
29949: LD_VAR 0 3
29953: PUSH
29954: LD_VAR 0 8
29958: STR
29959: PUSH
29960: LD_STRING ;
29962: STR
29963: ST_TO_ADDR
// end ;
29964: GO 29929
29966: POP
29967: POP
// for i = 1 to hardcoreCounter do
29968: LD_ADDR_VAR 0 8
29972: PUSH
29973: DOUBLE
29974: LD_INT 1
29976: DEC
29977: ST_TO_ADDR
29978: LD_EXP 68
29982: PUSH
29983: FOR_TO
29984: IFFALSE 30030
// begin if flags [ normalCounter + i ] then
29986: LD_VAR 0 4
29990: PUSH
29991: LD_EXP 67
29995: PUSH
29996: LD_VAR 0 8
30000: PLUS
30001: ARRAY
30002: IFFALSE 30028
// tmp := tmp & ( 100 + i ) & ; ;
30004: LD_ADDR_VAR 0 3
30008: PUSH
30009: LD_VAR 0 3
30013: PUSH
30014: LD_INT 100
30016: PUSH
30017: LD_VAR 0 8
30021: PLUS
30022: STR
30023: PUSH
30024: LD_STRING ;
30026: STR
30027: ST_TO_ADDR
// end ;
30028: GO 29983
30030: POP
30031: POP
// if tmp then
30032: LD_VAR 0 3
30036: IFFALSE 30048
// active := tmp ;
30038: LD_ADDR_VAR 0 7
30042: PUSH
30043: LD_VAR 0 3
30047: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
30048: LD_STRING getStreamItemsFromMission("
30050: PUSH
30051: LD_VAR 0 5
30055: STR
30056: PUSH
30057: LD_STRING ","
30059: STR
30060: PUSH
30061: LD_VAR 0 6
30065: STR
30066: PUSH
30067: LD_STRING ","
30069: STR
30070: PUSH
30071: LD_VAR 0 7
30075: STR
30076: PUSH
30077: LD_STRING ")
30079: STR
30080: PPUSH
30081: CALL_OW 559
// end else
30085: GO 30094
// ToLua ( getStreamItemsFromMission("","","") ) ;
30087: LD_STRING getStreamItemsFromMission("","","")
30089: PPUSH
30090: CALL_OW 559
// end ;
30094: LD_VAR 0 2
30098: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
30099: LD_EXP 66
30103: PUSH
30104: LD_EXP 71
30108: AND
30109: IFFALSE 30233
30111: GO 30113
30113: DISABLE
30114: LD_INT 0
30116: PPUSH
30117: PPUSH
// begin enable ;
30118: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
30119: LD_ADDR_VAR 0 2
30123: PUSH
30124: LD_INT 22
30126: PUSH
30127: LD_OWVAR 2
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 2
30138: PUSH
30139: LD_INT 34
30141: PUSH
30142: LD_INT 7
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 34
30151: PUSH
30152: LD_INT 45
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 34
30161: PUSH
30162: LD_INT 28
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 34
30171: PUSH
30172: LD_INT 47
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PPUSH
30190: CALL_OW 69
30194: ST_TO_ADDR
// if not tmp then
30195: LD_VAR 0 2
30199: NOT
30200: IFFALSE 30204
// exit ;
30202: GO 30233
// for i in tmp do
30204: LD_ADDR_VAR 0 1
30208: PUSH
30209: LD_VAR 0 2
30213: PUSH
30214: FOR_IN
30215: IFFALSE 30231
// begin SetLives ( i , 0 ) ;
30217: LD_VAR 0 1
30221: PPUSH
30222: LD_INT 0
30224: PPUSH
30225: CALL_OW 234
// end ;
30229: GO 30214
30231: POP
30232: POP
// end ;
30233: PPOPN 2
30235: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
30236: LD_EXP 66
30240: PUSH
30241: LD_EXP 72
30245: AND
30246: IFFALSE 30330
30248: GO 30250
30250: DISABLE
30251: LD_INT 0
30253: PPUSH
30254: PPUSH
// begin enable ;
30255: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
30256: LD_ADDR_VAR 0 2
30260: PUSH
30261: LD_INT 22
30263: PUSH
30264: LD_OWVAR 2
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 32
30275: PUSH
30276: LD_INT 3
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PPUSH
30287: CALL_OW 69
30291: ST_TO_ADDR
// if not tmp then
30292: LD_VAR 0 2
30296: NOT
30297: IFFALSE 30301
// exit ;
30299: GO 30330
// for i in tmp do
30301: LD_ADDR_VAR 0 1
30305: PUSH
30306: LD_VAR 0 2
30310: PUSH
30311: FOR_IN
30312: IFFALSE 30328
// begin SetLives ( i , 0 ) ;
30314: LD_VAR 0 1
30318: PPUSH
30319: LD_INT 0
30321: PPUSH
30322: CALL_OW 234
// end ;
30326: GO 30311
30328: POP
30329: POP
// end ;
30330: PPOPN 2
30332: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
30333: LD_EXP 66
30337: PUSH
30338: LD_EXP 69
30342: AND
30343: IFFALSE 30436
30345: GO 30347
30347: DISABLE
30348: LD_INT 0
30350: PPUSH
// begin enable ;
30351: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
30352: LD_ADDR_VAR 0 1
30356: PUSH
30357: LD_INT 22
30359: PUSH
30360: LD_OWVAR 2
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 2
30371: PUSH
30372: LD_INT 25
30374: PUSH
30375: LD_INT 5
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 25
30384: PUSH
30385: LD_INT 9
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 25
30394: PUSH
30395: LD_INT 8
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PPUSH
30412: CALL_OW 69
30416: PUSH
30417: FOR_IN
30418: IFFALSE 30434
// begin SetClass ( i , 1 ) ;
30420: LD_VAR 0 1
30424: PPUSH
30425: LD_INT 1
30427: PPUSH
30428: CALL_OW 336
// end ;
30432: GO 30417
30434: POP
30435: POP
// end ;
30436: PPOPN 1
30438: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
30439: LD_EXP 66
30443: PUSH
30444: LD_EXP 70
30448: AND
30449: PUSH
30450: LD_OWVAR 65
30454: PUSH
30455: LD_INT 7
30457: LESS
30458: AND
30459: IFFALSE 30473
30461: GO 30463
30463: DISABLE
// begin enable ;
30464: ENABLE
// game_speed := 7 ;
30465: LD_ADDR_OWVAR 65
30469: PUSH
30470: LD_INT 7
30472: ST_TO_ADDR
// end ;
30473: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
30474: LD_EXP 66
30478: PUSH
30479: LD_EXP 73
30483: AND
30484: IFFALSE 30686
30486: GO 30488
30488: DISABLE
30489: LD_INT 0
30491: PPUSH
30492: PPUSH
30493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30494: LD_ADDR_VAR 0 3
30498: PUSH
30499: LD_INT 81
30501: PUSH
30502: LD_OWVAR 2
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 21
30513: PUSH
30514: LD_INT 1
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PPUSH
30525: CALL_OW 69
30529: ST_TO_ADDR
// if not tmp then
30530: LD_VAR 0 3
30534: NOT
30535: IFFALSE 30539
// exit ;
30537: GO 30686
// if tmp > 5 then
30539: LD_VAR 0 3
30543: PUSH
30544: LD_INT 5
30546: GREATER
30547: IFFALSE 30559
// k := 5 else
30549: LD_ADDR_VAR 0 2
30553: PUSH
30554: LD_INT 5
30556: ST_TO_ADDR
30557: GO 30569
// k := tmp ;
30559: LD_ADDR_VAR 0 2
30563: PUSH
30564: LD_VAR 0 3
30568: ST_TO_ADDR
// for i := 1 to k do
30569: LD_ADDR_VAR 0 1
30573: PUSH
30574: DOUBLE
30575: LD_INT 1
30577: DEC
30578: ST_TO_ADDR
30579: LD_VAR 0 2
30583: PUSH
30584: FOR_TO
30585: IFFALSE 30684
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
30587: LD_VAR 0 3
30591: PUSH
30592: LD_VAR 0 1
30596: ARRAY
30597: PPUSH
30598: LD_VAR 0 1
30602: PUSH
30603: LD_INT 4
30605: MOD
30606: PUSH
30607: LD_INT 1
30609: PLUS
30610: PPUSH
30611: CALL_OW 259
30615: PUSH
30616: LD_INT 10
30618: LESS
30619: IFFALSE 30682
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
30621: LD_VAR 0 3
30625: PUSH
30626: LD_VAR 0 1
30630: ARRAY
30631: PPUSH
30632: LD_VAR 0 1
30636: PUSH
30637: LD_INT 4
30639: MOD
30640: PUSH
30641: LD_INT 1
30643: PLUS
30644: PPUSH
30645: LD_VAR 0 3
30649: PUSH
30650: LD_VAR 0 1
30654: ARRAY
30655: PPUSH
30656: LD_VAR 0 1
30660: PUSH
30661: LD_INT 4
30663: MOD
30664: PUSH
30665: LD_INT 1
30667: PLUS
30668: PPUSH
30669: CALL_OW 259
30673: PUSH
30674: LD_INT 1
30676: PLUS
30677: PPUSH
30678: CALL_OW 237
30682: GO 30584
30684: POP
30685: POP
// end ;
30686: PPOPN 3
30688: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
30689: LD_EXP 66
30693: PUSH
30694: LD_EXP 74
30698: AND
30699: IFFALSE 30719
30701: GO 30703
30703: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
30704: LD_INT 4
30706: PPUSH
30707: LD_OWVAR 2
30711: PPUSH
30712: LD_INT 0
30714: PPUSH
30715: CALL_OW 324
30719: END
// every 0 0$1 trigger StreamModeActive and sShovel do
30720: LD_EXP 66
30724: PUSH
30725: LD_EXP 103
30729: AND
30730: IFFALSE 30750
30732: GO 30734
30734: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
30735: LD_INT 19
30737: PPUSH
30738: LD_OWVAR 2
30742: PPUSH
30743: LD_INT 0
30745: PPUSH
30746: CALL_OW 324
30750: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
30751: LD_EXP 66
30755: PUSH
30756: LD_EXP 75
30760: AND
30761: IFFALSE 30863
30763: GO 30765
30765: DISABLE
30766: LD_INT 0
30768: PPUSH
30769: PPUSH
// begin enable ;
30770: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
30771: LD_ADDR_VAR 0 2
30775: PUSH
30776: LD_INT 22
30778: PUSH
30779: LD_OWVAR 2
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 2
30790: PUSH
30791: LD_INT 34
30793: PUSH
30794: LD_INT 11
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 34
30803: PUSH
30804: LD_INT 30
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: LIST
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PPUSH
30820: CALL_OW 69
30824: ST_TO_ADDR
// if not tmp then
30825: LD_VAR 0 2
30829: NOT
30830: IFFALSE 30834
// exit ;
30832: GO 30863
// for i in tmp do
30834: LD_ADDR_VAR 0 1
30838: PUSH
30839: LD_VAR 0 2
30843: PUSH
30844: FOR_IN
30845: IFFALSE 30861
// begin SetLives ( i , 0 ) ;
30847: LD_VAR 0 1
30851: PPUSH
30852: LD_INT 0
30854: PPUSH
30855: CALL_OW 234
// end ;
30859: GO 30844
30861: POP
30862: POP
// end ;
30863: PPOPN 2
30865: END
// every 0 0$1 trigger StreamModeActive and sBunker do
30866: LD_EXP 66
30870: PUSH
30871: LD_EXP 76
30875: AND
30876: IFFALSE 30896
30878: GO 30880
30880: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
30881: LD_INT 32
30883: PPUSH
30884: LD_OWVAR 2
30888: PPUSH
30889: LD_INT 0
30891: PPUSH
30892: CALL_OW 324
30896: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
30897: LD_EXP 66
30901: PUSH
30902: LD_EXP 77
30906: AND
30907: IFFALSE 31088
30909: GO 30911
30911: DISABLE
30912: LD_INT 0
30914: PPUSH
30915: PPUSH
30916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
30917: LD_ADDR_VAR 0 2
30921: PUSH
30922: LD_INT 22
30924: PUSH
30925: LD_OWVAR 2
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 33
30936: PUSH
30937: LD_INT 3
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PPUSH
30948: CALL_OW 69
30952: ST_TO_ADDR
// if not tmp then
30953: LD_VAR 0 2
30957: NOT
30958: IFFALSE 30962
// exit ;
30960: GO 31088
// side := 0 ;
30962: LD_ADDR_VAR 0 3
30966: PUSH
30967: LD_INT 0
30969: ST_TO_ADDR
// for i := 1 to 8 do
30970: LD_ADDR_VAR 0 1
30974: PUSH
30975: DOUBLE
30976: LD_INT 1
30978: DEC
30979: ST_TO_ADDR
30980: LD_INT 8
30982: PUSH
30983: FOR_TO
30984: IFFALSE 31032
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
30986: LD_OWVAR 2
30990: PUSH
30991: LD_VAR 0 1
30995: NONEQUAL
30996: PUSH
30997: LD_OWVAR 2
31001: PPUSH
31002: LD_VAR 0 1
31006: PPUSH
31007: CALL_OW 81
31011: PUSH
31012: LD_INT 2
31014: EQUAL
31015: AND
31016: IFFALSE 31030
// begin side := i ;
31018: LD_ADDR_VAR 0 3
31022: PUSH
31023: LD_VAR 0 1
31027: ST_TO_ADDR
// break ;
31028: GO 31032
// end ;
31030: GO 30983
31032: POP
31033: POP
// if not side then
31034: LD_VAR 0 3
31038: NOT
31039: IFFALSE 31043
// exit ;
31041: GO 31088
// for i := 1 to tmp do
31043: LD_ADDR_VAR 0 1
31047: PUSH
31048: DOUBLE
31049: LD_INT 1
31051: DEC
31052: ST_TO_ADDR
31053: LD_VAR 0 2
31057: PUSH
31058: FOR_TO
31059: IFFALSE 31086
// if Prob ( 60 ) then
31061: LD_INT 60
31063: PPUSH
31064: CALL_OW 13
31068: IFFALSE 31084
// SetSide ( i , side ) ;
31070: LD_VAR 0 1
31074: PPUSH
31075: LD_VAR 0 3
31079: PPUSH
31080: CALL_OW 235
31084: GO 31058
31086: POP
31087: POP
// end ;
31088: PPOPN 3
31090: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
31091: LD_EXP 66
31095: PUSH
31096: LD_EXP 79
31100: AND
31101: IFFALSE 31220
31103: GO 31105
31105: DISABLE
31106: LD_INT 0
31108: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
31109: LD_ADDR_VAR 0 1
31113: PUSH
31114: LD_INT 22
31116: PUSH
31117: LD_OWVAR 2
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 21
31128: PUSH
31129: LD_INT 1
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 3
31138: PUSH
31139: LD_INT 23
31141: PUSH
31142: LD_INT 0
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: LIST
31157: PPUSH
31158: CALL_OW 69
31162: PUSH
31163: FOR_IN
31164: IFFALSE 31218
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
31166: LD_VAR 0 1
31170: PPUSH
31171: CALL_OW 257
31175: PUSH
31176: LD_INT 1
31178: PUSH
31179: LD_INT 2
31181: PUSH
31182: LD_INT 3
31184: PUSH
31185: LD_INT 4
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: IN
31194: IFFALSE 31216
// SetClass ( un , rand ( 1 , 4 ) ) ;
31196: LD_VAR 0 1
31200: PPUSH
31201: LD_INT 1
31203: PPUSH
31204: LD_INT 4
31206: PPUSH
31207: CALL_OW 12
31211: PPUSH
31212: CALL_OW 336
31216: GO 31163
31218: POP
31219: POP
// end ;
31220: PPOPN 1
31222: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
31223: LD_EXP 66
31227: PUSH
31228: LD_EXP 78
31232: AND
31233: IFFALSE 31312
31235: GO 31237
31237: DISABLE
31238: LD_INT 0
31240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
31241: LD_ADDR_VAR 0 1
31245: PUSH
31246: LD_INT 22
31248: PUSH
31249: LD_OWVAR 2
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 21
31260: PUSH
31261: LD_INT 3
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PPUSH
31272: CALL_OW 69
31276: ST_TO_ADDR
// if not tmp then
31277: LD_VAR 0 1
31281: NOT
31282: IFFALSE 31286
// exit ;
31284: GO 31312
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
31286: LD_VAR 0 1
31290: PUSH
31291: LD_INT 1
31293: PPUSH
31294: LD_VAR 0 1
31298: PPUSH
31299: CALL_OW 12
31303: ARRAY
31304: PPUSH
31305: LD_INT 100
31307: PPUSH
31308: CALL_OW 234
// end ;
31312: PPOPN 1
31314: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
31315: LD_EXP 66
31319: PUSH
31320: LD_EXP 80
31324: AND
31325: IFFALSE 31423
31327: GO 31329
31329: DISABLE
31330: LD_INT 0
31332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31333: LD_ADDR_VAR 0 1
31337: PUSH
31338: LD_INT 22
31340: PUSH
31341: LD_OWVAR 2
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 21
31352: PUSH
31353: LD_INT 1
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PPUSH
31364: CALL_OW 69
31368: ST_TO_ADDR
// if not tmp then
31369: LD_VAR 0 1
31373: NOT
31374: IFFALSE 31378
// exit ;
31376: GO 31423
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
31378: LD_VAR 0 1
31382: PUSH
31383: LD_INT 1
31385: PPUSH
31386: LD_VAR 0 1
31390: PPUSH
31391: CALL_OW 12
31395: ARRAY
31396: PPUSH
31397: LD_INT 1
31399: PPUSH
31400: LD_INT 4
31402: PPUSH
31403: CALL_OW 12
31407: PPUSH
31408: LD_INT 3000
31410: PPUSH
31411: LD_INT 9000
31413: PPUSH
31414: CALL_OW 12
31418: PPUSH
31419: CALL_OW 492
// end ;
31423: PPOPN 1
31425: END
// every 0 0$1 trigger StreamModeActive and sDepot do
31426: LD_EXP 66
31430: PUSH
31431: LD_EXP 81
31435: AND
31436: IFFALSE 31456
31438: GO 31440
31440: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
31441: LD_INT 1
31443: PPUSH
31444: LD_OWVAR 2
31448: PPUSH
31449: LD_INT 0
31451: PPUSH
31452: CALL_OW 324
31456: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
31457: LD_EXP 66
31461: PUSH
31462: LD_EXP 82
31466: AND
31467: IFFALSE 31550
31469: GO 31471
31471: DISABLE
31472: LD_INT 0
31474: PPUSH
31475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
31476: LD_ADDR_VAR 0 2
31480: PUSH
31481: LD_INT 22
31483: PUSH
31484: LD_OWVAR 2
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 21
31495: PUSH
31496: LD_INT 3
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PPUSH
31507: CALL_OW 69
31511: ST_TO_ADDR
// if not tmp then
31512: LD_VAR 0 2
31516: NOT
31517: IFFALSE 31521
// exit ;
31519: GO 31550
// for i in tmp do
31521: LD_ADDR_VAR 0 1
31525: PUSH
31526: LD_VAR 0 2
31530: PUSH
31531: FOR_IN
31532: IFFALSE 31548
// SetBLevel ( i , 10 ) ;
31534: LD_VAR 0 1
31538: PPUSH
31539: LD_INT 10
31541: PPUSH
31542: CALL_OW 241
31546: GO 31531
31548: POP
31549: POP
// end ;
31550: PPOPN 2
31552: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
31553: LD_EXP 66
31557: PUSH
31558: LD_EXP 83
31562: AND
31563: IFFALSE 31674
31565: GO 31567
31567: DISABLE
31568: LD_INT 0
31570: PPUSH
31571: PPUSH
31572: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31573: LD_ADDR_VAR 0 3
31577: PUSH
31578: LD_INT 22
31580: PUSH
31581: LD_OWVAR 2
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 25
31592: PUSH
31593: LD_INT 1
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PPUSH
31604: CALL_OW 69
31608: ST_TO_ADDR
// if not tmp then
31609: LD_VAR 0 3
31613: NOT
31614: IFFALSE 31618
// exit ;
31616: GO 31674
// un := tmp [ rand ( 1 , tmp ) ] ;
31618: LD_ADDR_VAR 0 2
31622: PUSH
31623: LD_VAR 0 3
31627: PUSH
31628: LD_INT 1
31630: PPUSH
31631: LD_VAR 0 3
31635: PPUSH
31636: CALL_OW 12
31640: ARRAY
31641: ST_TO_ADDR
// if Crawls ( un ) then
31642: LD_VAR 0 2
31646: PPUSH
31647: CALL_OW 318
31651: IFFALSE 31662
// ComWalk ( un ) ;
31653: LD_VAR 0 2
31657: PPUSH
31658: CALL_OW 138
// SetClass ( un , class_sniper ) ;
31662: LD_VAR 0 2
31666: PPUSH
31667: LD_INT 5
31669: PPUSH
31670: CALL_OW 336
// end ;
31674: PPOPN 3
31676: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
31677: LD_EXP 66
31681: PUSH
31682: LD_EXP 84
31686: AND
31687: PUSH
31688: LD_OWVAR 67
31692: PUSH
31693: LD_INT 4
31695: LESS
31696: AND
31697: IFFALSE 31716
31699: GO 31701
31701: DISABLE
// begin Difficulty := Difficulty + 1 ;
31702: LD_ADDR_OWVAR 67
31706: PUSH
31707: LD_OWVAR 67
31711: PUSH
31712: LD_INT 1
31714: PLUS
31715: ST_TO_ADDR
// end ;
31716: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
31717: LD_EXP 66
31721: PUSH
31722: LD_EXP 85
31726: AND
31727: IFFALSE 31830
31729: GO 31731
31731: DISABLE
31732: LD_INT 0
31734: PPUSH
// begin for i := 1 to 5 do
31735: LD_ADDR_VAR 0 1
31739: PUSH
31740: DOUBLE
31741: LD_INT 1
31743: DEC
31744: ST_TO_ADDR
31745: LD_INT 5
31747: PUSH
31748: FOR_TO
31749: IFFALSE 31828
// begin uc_nation := nation_nature ;
31751: LD_ADDR_OWVAR 21
31755: PUSH
31756: LD_INT 0
31758: ST_TO_ADDR
// uc_side := 0 ;
31759: LD_ADDR_OWVAR 20
31763: PUSH
31764: LD_INT 0
31766: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
31767: LD_ADDR_OWVAR 29
31771: PUSH
31772: LD_INT 12
31774: PUSH
31775: LD_INT 12
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: ST_TO_ADDR
// hc_agressivity := 20 ;
31782: LD_ADDR_OWVAR 35
31786: PUSH
31787: LD_INT 20
31789: ST_TO_ADDR
// hc_class := class_tiger ;
31790: LD_ADDR_OWVAR 28
31794: PUSH
31795: LD_INT 14
31797: ST_TO_ADDR
// hc_gallery :=  ;
31798: LD_ADDR_OWVAR 33
31802: PUSH
31803: LD_STRING 
31805: ST_TO_ADDR
// hc_name :=  ;
31806: LD_ADDR_OWVAR 26
31810: PUSH
31811: LD_STRING 
31813: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
31814: CALL_OW 44
31818: PPUSH
31819: LD_INT 0
31821: PPUSH
31822: CALL_OW 51
// end ;
31826: GO 31748
31828: POP
31829: POP
// end ;
31830: PPOPN 1
31832: END
// every 0 0$1 trigger StreamModeActive and sBomb do
31833: LD_EXP 66
31837: PUSH
31838: LD_EXP 86
31842: AND
31843: IFFALSE 31852
31845: GO 31847
31847: DISABLE
// StreamSibBomb ;
31848: CALL 31853 0 0
31852: END
// export function StreamSibBomb ; var i , x , y ; begin
31853: LD_INT 0
31855: PPUSH
31856: PPUSH
31857: PPUSH
31858: PPUSH
// result := false ;
31859: LD_ADDR_VAR 0 1
31863: PUSH
31864: LD_INT 0
31866: ST_TO_ADDR
// for i := 1 to 16 do
31867: LD_ADDR_VAR 0 2
31871: PUSH
31872: DOUBLE
31873: LD_INT 1
31875: DEC
31876: ST_TO_ADDR
31877: LD_INT 16
31879: PUSH
31880: FOR_TO
31881: IFFALSE 32080
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31883: LD_ADDR_VAR 0 3
31887: PUSH
31888: LD_INT 10
31890: PUSH
31891: LD_INT 20
31893: PUSH
31894: LD_INT 30
31896: PUSH
31897: LD_INT 40
31899: PUSH
31900: LD_INT 50
31902: PUSH
31903: LD_INT 60
31905: PUSH
31906: LD_INT 70
31908: PUSH
31909: LD_INT 80
31911: PUSH
31912: LD_INT 90
31914: PUSH
31915: LD_INT 100
31917: PUSH
31918: LD_INT 110
31920: PUSH
31921: LD_INT 120
31923: PUSH
31924: LD_INT 130
31926: PUSH
31927: LD_INT 140
31929: PUSH
31930: LD_INT 150
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 1
31952: PPUSH
31953: LD_INT 15
31955: PPUSH
31956: CALL_OW 12
31960: ARRAY
31961: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31962: LD_ADDR_VAR 0 4
31966: PUSH
31967: LD_INT 10
31969: PUSH
31970: LD_INT 20
31972: PUSH
31973: LD_INT 30
31975: PUSH
31976: LD_INT 40
31978: PUSH
31979: LD_INT 50
31981: PUSH
31982: LD_INT 60
31984: PUSH
31985: LD_INT 70
31987: PUSH
31988: LD_INT 80
31990: PUSH
31991: LD_INT 90
31993: PUSH
31994: LD_INT 100
31996: PUSH
31997: LD_INT 110
31999: PUSH
32000: LD_INT 120
32002: PUSH
32003: LD_INT 130
32005: PUSH
32006: LD_INT 140
32008: PUSH
32009: LD_INT 150
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 1
32031: PPUSH
32032: LD_INT 15
32034: PPUSH
32035: CALL_OW 12
32039: ARRAY
32040: ST_TO_ADDR
// if ValidHex ( x , y ) then
32041: LD_VAR 0 3
32045: PPUSH
32046: LD_VAR 0 4
32050: PPUSH
32051: CALL_OW 488
32055: IFFALSE 32078
// begin result := [ x , y ] ;
32057: LD_ADDR_VAR 0 1
32061: PUSH
32062: LD_VAR 0 3
32066: PUSH
32067: LD_VAR 0 4
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: ST_TO_ADDR
// break ;
32076: GO 32080
// end ; end ;
32078: GO 31880
32080: POP
32081: POP
// if result then
32082: LD_VAR 0 1
32086: IFFALSE 32146
// begin ToLua ( playSibBomb() ) ;
32088: LD_STRING playSibBomb()
32090: PPUSH
32091: CALL_OW 559
// wait ( 0 0$14 ) ;
32095: LD_INT 490
32097: PPUSH
32098: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
32102: LD_VAR 0 1
32106: PUSH
32107: LD_INT 1
32109: ARRAY
32110: PPUSH
32111: LD_VAR 0 1
32115: PUSH
32116: LD_INT 2
32118: ARRAY
32119: PPUSH
32120: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
32124: LD_VAR 0 1
32128: PUSH
32129: LD_INT 1
32131: ARRAY
32132: PPUSH
32133: LD_VAR 0 1
32137: PUSH
32138: LD_INT 2
32140: ARRAY
32141: PPUSH
32142: CALL_OW 429
// end ; end ;
32146: LD_VAR 0 1
32150: RET
// every 0 0$1 trigger StreamModeActive and sReset do
32151: LD_EXP 66
32155: PUSH
32156: LD_EXP 88
32160: AND
32161: IFFALSE 32173
32163: GO 32165
32165: DISABLE
// YouLost (  ) ;
32166: LD_STRING 
32168: PPUSH
32169: CALL_OW 104
32173: END
// every 0 0$1 trigger StreamModeActive and sFog do
32174: LD_EXP 66
32178: PUSH
32179: LD_EXP 87
32183: AND
32184: IFFALSE 32198
32186: GO 32188
32188: DISABLE
// FogOff ( your_side ) ;
32189: LD_OWVAR 2
32193: PPUSH
32194: CALL_OW 344
32198: END
// every 0 0$1 trigger StreamModeActive and sSun do
32199: LD_EXP 66
32203: PUSH
32204: LD_EXP 89
32208: AND
32209: IFFALSE 32237
32211: GO 32213
32213: DISABLE
// begin solar_recharge_percent := 0 ;
32214: LD_ADDR_OWVAR 79
32218: PUSH
32219: LD_INT 0
32221: ST_TO_ADDR
// wait ( 5 5$00 ) ;
32222: LD_INT 10500
32224: PPUSH
32225: CALL_OW 67
// solar_recharge_percent := 100 ;
32229: LD_ADDR_OWVAR 79
32233: PUSH
32234: LD_INT 100
32236: ST_TO_ADDR
// end ;
32237: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
32238: LD_EXP 66
32242: PUSH
32243: LD_EXP 90
32247: AND
32248: IFFALSE 32487
32250: GO 32252
32252: DISABLE
32253: LD_INT 0
32255: PPUSH
32256: PPUSH
32257: PPUSH
// begin tmp := [ ] ;
32258: LD_ADDR_VAR 0 3
32262: PUSH
32263: EMPTY
32264: ST_TO_ADDR
// for i := 1 to 6 do
32265: LD_ADDR_VAR 0 1
32269: PUSH
32270: DOUBLE
32271: LD_INT 1
32273: DEC
32274: ST_TO_ADDR
32275: LD_INT 6
32277: PUSH
32278: FOR_TO
32279: IFFALSE 32384
// begin uc_nation := nation_nature ;
32281: LD_ADDR_OWVAR 21
32285: PUSH
32286: LD_INT 0
32288: ST_TO_ADDR
// uc_side := 0 ;
32289: LD_ADDR_OWVAR 20
32293: PUSH
32294: LD_INT 0
32296: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
32297: LD_ADDR_OWVAR 29
32301: PUSH
32302: LD_INT 12
32304: PUSH
32305: LD_INT 12
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: ST_TO_ADDR
// hc_agressivity := 20 ;
32312: LD_ADDR_OWVAR 35
32316: PUSH
32317: LD_INT 20
32319: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
32320: LD_ADDR_OWVAR 28
32324: PUSH
32325: LD_INT 17
32327: ST_TO_ADDR
// hc_gallery :=  ;
32328: LD_ADDR_OWVAR 33
32332: PUSH
32333: LD_STRING 
32335: ST_TO_ADDR
// hc_name :=  ;
32336: LD_ADDR_OWVAR 26
32340: PUSH
32341: LD_STRING 
32343: ST_TO_ADDR
// un := CreateHuman ;
32344: LD_ADDR_VAR 0 2
32348: PUSH
32349: CALL_OW 44
32353: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
32354: LD_VAR 0 2
32358: PPUSH
32359: LD_INT 1
32361: PPUSH
32362: CALL_OW 51
// tmp := tmp ^ un ;
32366: LD_ADDR_VAR 0 3
32370: PUSH
32371: LD_VAR 0 3
32375: PUSH
32376: LD_VAR 0 2
32380: ADD
32381: ST_TO_ADDR
// end ;
32382: GO 32278
32384: POP
32385: POP
// repeat wait ( 0 0$1 ) ;
32386: LD_INT 35
32388: PPUSH
32389: CALL_OW 67
// for un in tmp do
32393: LD_ADDR_VAR 0 2
32397: PUSH
32398: LD_VAR 0 3
32402: PUSH
32403: FOR_IN
32404: IFFALSE 32478
// begin if IsDead ( un ) then
32406: LD_VAR 0 2
32410: PPUSH
32411: CALL_OW 301
32415: IFFALSE 32435
// begin tmp := tmp diff un ;
32417: LD_ADDR_VAR 0 3
32421: PUSH
32422: LD_VAR 0 3
32426: PUSH
32427: LD_VAR 0 2
32431: DIFF
32432: ST_TO_ADDR
// continue ;
32433: GO 32403
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
32435: LD_VAR 0 2
32439: PPUSH
32440: LD_INT 3
32442: PUSH
32443: LD_INT 22
32445: PUSH
32446: LD_INT 0
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PPUSH
32457: CALL_OW 69
32461: PPUSH
32462: LD_VAR 0 2
32466: PPUSH
32467: CALL_OW 74
32471: PPUSH
32472: CALL_OW 115
// end ;
32476: GO 32403
32478: POP
32479: POP
// until not tmp ;
32480: LD_VAR 0 3
32484: NOT
32485: IFFALSE 32386
// end ;
32487: PPOPN 3
32489: END
// every 0 0$1 trigger StreamModeActive and sTroll do
32490: LD_EXP 66
32494: PUSH
32495: LD_EXP 91
32499: AND
32500: IFFALSE 32554
32502: GO 32504
32504: DISABLE
// begin ToLua ( displayTroll(); ) ;
32505: LD_STRING displayTroll();
32507: PPUSH
32508: CALL_OW 559
// wait ( 3 3$00 ) ;
32512: LD_INT 6300
32514: PPUSH
32515: CALL_OW 67
// ToLua ( hideTroll(); ) ;
32519: LD_STRING hideTroll();
32521: PPUSH
32522: CALL_OW 559
// wait ( 1 1$00 ) ;
32526: LD_INT 2100
32528: PPUSH
32529: CALL_OW 67
// ToLua ( displayTroll(); ) ;
32533: LD_STRING displayTroll();
32535: PPUSH
32536: CALL_OW 559
// wait ( 1 1$00 ) ;
32540: LD_INT 2100
32542: PPUSH
32543: CALL_OW 67
// ToLua ( hideTroll(); ) ;
32547: LD_STRING hideTroll();
32549: PPUSH
32550: CALL_OW 559
// end ;
32554: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
32555: LD_EXP 66
32559: PUSH
32560: LD_EXP 92
32564: AND
32565: IFFALSE 32628
32567: GO 32569
32569: DISABLE
32570: LD_INT 0
32572: PPUSH
// begin p := 0 ;
32573: LD_ADDR_VAR 0 1
32577: PUSH
32578: LD_INT 0
32580: ST_TO_ADDR
// repeat game_speed := 1 ;
32581: LD_ADDR_OWVAR 65
32585: PUSH
32586: LD_INT 1
32588: ST_TO_ADDR
// wait ( 0 0$1 ) ;
32589: LD_INT 35
32591: PPUSH
32592: CALL_OW 67
// p := p + 1 ;
32596: LD_ADDR_VAR 0 1
32600: PUSH
32601: LD_VAR 0 1
32605: PUSH
32606: LD_INT 1
32608: PLUS
32609: ST_TO_ADDR
// until p >= 60 ;
32610: LD_VAR 0 1
32614: PUSH
32615: LD_INT 60
32617: GREATEREQUAL
32618: IFFALSE 32581
// game_speed := 4 ;
32620: LD_ADDR_OWVAR 65
32624: PUSH
32625: LD_INT 4
32627: ST_TO_ADDR
// end ;
32628: PPOPN 1
32630: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
32631: LD_EXP 66
32635: PUSH
32636: LD_EXP 93
32640: AND
32641: IFFALSE 32787
32643: GO 32645
32645: DISABLE
32646: LD_INT 0
32648: PPUSH
32649: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32650: LD_ADDR_VAR 0 1
32654: PUSH
32655: LD_INT 22
32657: PUSH
32658: LD_OWVAR 2
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 2
32669: PUSH
32670: LD_INT 30
32672: PUSH
32673: LD_INT 0
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 30
32682: PUSH
32683: LD_INT 1
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: LIST
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PPUSH
32699: CALL_OW 69
32703: ST_TO_ADDR
// if not depot then
32704: LD_VAR 0 1
32708: NOT
32709: IFFALSE 32713
// exit ;
32711: GO 32787
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
32713: LD_ADDR_VAR 0 2
32717: PUSH
32718: LD_VAR 0 1
32722: PUSH
32723: LD_INT 1
32725: PPUSH
32726: LD_VAR 0 1
32730: PPUSH
32731: CALL_OW 12
32735: ARRAY
32736: PPUSH
32737: CALL_OW 274
32741: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
32742: LD_VAR 0 2
32746: PPUSH
32747: LD_INT 1
32749: PPUSH
32750: LD_INT 0
32752: PPUSH
32753: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
32757: LD_VAR 0 2
32761: PPUSH
32762: LD_INT 2
32764: PPUSH
32765: LD_INT 0
32767: PPUSH
32768: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
32772: LD_VAR 0 2
32776: PPUSH
32777: LD_INT 3
32779: PPUSH
32780: LD_INT 0
32782: PPUSH
32783: CALL_OW 277
// end ;
32787: PPOPN 2
32789: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
32790: LD_EXP 66
32794: PUSH
32795: LD_EXP 94
32799: AND
32800: IFFALSE 32897
32802: GO 32804
32804: DISABLE
32805: LD_INT 0
32807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32808: LD_ADDR_VAR 0 1
32812: PUSH
32813: LD_INT 22
32815: PUSH
32816: LD_OWVAR 2
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 21
32827: PUSH
32828: LD_INT 1
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 3
32837: PUSH
32838: LD_INT 23
32840: PUSH
32841: LD_INT 0
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: LIST
32856: PPUSH
32857: CALL_OW 69
32861: ST_TO_ADDR
// if not tmp then
32862: LD_VAR 0 1
32866: NOT
32867: IFFALSE 32871
// exit ;
32869: GO 32897
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
32871: LD_VAR 0 1
32875: PUSH
32876: LD_INT 1
32878: PPUSH
32879: LD_VAR 0 1
32883: PPUSH
32884: CALL_OW 12
32888: ARRAY
32889: PPUSH
32890: LD_INT 200
32892: PPUSH
32893: CALL_OW 234
// end ;
32897: PPOPN 1
32899: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
32900: LD_EXP 66
32904: PUSH
32905: LD_EXP 95
32909: AND
32910: IFFALSE 32989
32912: GO 32914
32914: DISABLE
32915: LD_INT 0
32917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
32918: LD_ADDR_VAR 0 1
32922: PUSH
32923: LD_INT 22
32925: PUSH
32926: LD_OWVAR 2
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 21
32937: PUSH
32938: LD_INT 2
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PPUSH
32949: CALL_OW 69
32953: ST_TO_ADDR
// if not tmp then
32954: LD_VAR 0 1
32958: NOT
32959: IFFALSE 32963
// exit ;
32961: GO 32989
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
32963: LD_VAR 0 1
32967: PUSH
32968: LD_INT 1
32970: PPUSH
32971: LD_VAR 0 1
32975: PPUSH
32976: CALL_OW 12
32980: ARRAY
32981: PPUSH
32982: LD_INT 60
32984: PPUSH
32985: CALL_OW 234
// end ;
32989: PPOPN 1
32991: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
32992: LD_EXP 66
32996: PUSH
32997: LD_EXP 96
33001: AND
33002: IFFALSE 33101
33004: GO 33006
33006: DISABLE
33007: LD_INT 0
33009: PPUSH
33010: PPUSH
// begin enable ;
33011: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
33012: LD_ADDR_VAR 0 1
33016: PUSH
33017: LD_INT 22
33019: PUSH
33020: LD_OWVAR 2
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 61
33031: PUSH
33032: EMPTY
33033: LIST
33034: PUSH
33035: LD_INT 33
33037: PUSH
33038: LD_INT 2
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: LIST
33049: PPUSH
33050: CALL_OW 69
33054: ST_TO_ADDR
// if not tmp then
33055: LD_VAR 0 1
33059: NOT
33060: IFFALSE 33064
// exit ;
33062: GO 33101
// for i in tmp do
33064: LD_ADDR_VAR 0 2
33068: PUSH
33069: LD_VAR 0 1
33073: PUSH
33074: FOR_IN
33075: IFFALSE 33099
// if IsControledBy ( i ) then
33077: LD_VAR 0 2
33081: PPUSH
33082: CALL_OW 312
33086: IFFALSE 33097
// ComUnlink ( i ) ;
33088: LD_VAR 0 2
33092: PPUSH
33093: CALL_OW 136
33097: GO 33074
33099: POP
33100: POP
// end ;
33101: PPOPN 2
33103: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
33104: LD_EXP 66
33108: PUSH
33109: LD_EXP 97
33113: AND
33114: IFFALSE 33254
33116: GO 33118
33118: DISABLE
33119: LD_INT 0
33121: PPUSH
33122: PPUSH
// begin ToLua ( displayPowell(); ) ;
33123: LD_STRING displayPowell();
33125: PPUSH
33126: CALL_OW 559
// uc_side := 0 ;
33130: LD_ADDR_OWVAR 20
33134: PUSH
33135: LD_INT 0
33137: ST_TO_ADDR
// uc_nation := 2 ;
33138: LD_ADDR_OWVAR 21
33142: PUSH
33143: LD_INT 2
33145: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
33146: LD_ADDR_OWVAR 37
33150: PUSH
33151: LD_INT 14
33153: ST_TO_ADDR
// vc_engine := engine_siberite ;
33154: LD_ADDR_OWVAR 39
33158: PUSH
33159: LD_INT 3
33161: ST_TO_ADDR
// vc_control := control_apeman ;
33162: LD_ADDR_OWVAR 38
33166: PUSH
33167: LD_INT 5
33169: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
33170: LD_ADDR_OWVAR 40
33174: PUSH
33175: LD_INT 29
33177: ST_TO_ADDR
// un := CreateVehicle ;
33178: LD_ADDR_VAR 0 2
33182: PUSH
33183: CALL_OW 45
33187: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33188: LD_VAR 0 2
33192: PPUSH
33193: LD_INT 1
33195: PPUSH
33196: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
33200: LD_INT 35
33202: PPUSH
33203: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
33207: LD_VAR 0 2
33211: PPUSH
33212: LD_INT 22
33214: PUSH
33215: LD_OWVAR 2
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PPUSH
33224: CALL_OW 69
33228: PPUSH
33229: LD_VAR 0 2
33233: PPUSH
33234: CALL_OW 74
33238: PPUSH
33239: CALL_OW 115
// until IsDead ( un ) ;
33243: LD_VAR 0 2
33247: PPUSH
33248: CALL_OW 301
33252: IFFALSE 33200
// end ;
33254: PPOPN 2
33256: END
// every 0 0$1 trigger StreamModeActive and sStu do
33257: LD_EXP 66
33261: PUSH
33262: LD_EXP 105
33266: AND
33267: IFFALSE 33283
33269: GO 33271
33271: DISABLE
// begin ToLua ( displayStucuk(); ) ;
33272: LD_STRING displayStucuk();
33274: PPUSH
33275: CALL_OW 559
// ResetFog ;
33279: CALL_OW 335
// end ;
33283: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
33284: LD_EXP 66
33288: PUSH
33289: LD_EXP 98
33293: AND
33294: IFFALSE 33435
33296: GO 33298
33298: DISABLE
33299: LD_INT 0
33301: PPUSH
33302: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
33303: LD_ADDR_VAR 0 2
33307: PUSH
33308: LD_INT 22
33310: PUSH
33311: LD_OWVAR 2
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 21
33322: PUSH
33323: LD_INT 1
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PPUSH
33334: CALL_OW 69
33338: ST_TO_ADDR
// if not tmp then
33339: LD_VAR 0 2
33343: NOT
33344: IFFALSE 33348
// exit ;
33346: GO 33435
// un := tmp [ rand ( 1 , tmp ) ] ;
33348: LD_ADDR_VAR 0 1
33352: PUSH
33353: LD_VAR 0 2
33357: PUSH
33358: LD_INT 1
33360: PPUSH
33361: LD_VAR 0 2
33365: PPUSH
33366: CALL_OW 12
33370: ARRAY
33371: ST_TO_ADDR
// SetSide ( un , 0 ) ;
33372: LD_VAR 0 1
33376: PPUSH
33377: LD_INT 0
33379: PPUSH
33380: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
33384: LD_VAR 0 1
33388: PPUSH
33389: LD_OWVAR 3
33393: PUSH
33394: LD_VAR 0 1
33398: DIFF
33399: PPUSH
33400: LD_VAR 0 1
33404: PPUSH
33405: CALL_OW 74
33409: PPUSH
33410: CALL_OW 115
// wait ( 0 0$20 ) ;
33414: LD_INT 700
33416: PPUSH
33417: CALL_OW 67
// SetSide ( un , your_side ) ;
33421: LD_VAR 0 1
33425: PPUSH
33426: LD_OWVAR 2
33430: PPUSH
33431: CALL_OW 235
// end ;
33435: PPOPN 2
33437: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
33438: LD_EXP 66
33442: PUSH
33443: LD_EXP 99
33447: AND
33448: IFFALSE 33554
33450: GO 33452
33452: DISABLE
33453: LD_INT 0
33455: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33456: LD_ADDR_VAR 0 1
33460: PUSH
33461: LD_INT 22
33463: PUSH
33464: LD_OWVAR 2
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 2
33475: PUSH
33476: LD_INT 30
33478: PUSH
33479: LD_INT 0
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 30
33488: PUSH
33489: LD_INT 1
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: LIST
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PPUSH
33505: CALL_OW 69
33509: ST_TO_ADDR
// if not depot then
33510: LD_VAR 0 1
33514: NOT
33515: IFFALSE 33519
// exit ;
33517: GO 33554
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
33519: LD_VAR 0 1
33523: PUSH
33524: LD_INT 1
33526: ARRAY
33527: PPUSH
33528: CALL_OW 250
33532: PPUSH
33533: LD_VAR 0 1
33537: PUSH
33538: LD_INT 1
33540: ARRAY
33541: PPUSH
33542: CALL_OW 251
33546: PPUSH
33547: LD_INT 70
33549: PPUSH
33550: CALL_OW 495
// end ;
33554: PPOPN 1
33556: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
33557: LD_EXP 66
33561: PUSH
33562: LD_EXP 100
33566: AND
33567: IFFALSE 33778
33569: GO 33571
33571: DISABLE
33572: LD_INT 0
33574: PPUSH
33575: PPUSH
33576: PPUSH
33577: PPUSH
33578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
33579: LD_ADDR_VAR 0 5
33583: PUSH
33584: LD_INT 22
33586: PUSH
33587: LD_OWVAR 2
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 21
33598: PUSH
33599: LD_INT 1
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PPUSH
33610: CALL_OW 69
33614: ST_TO_ADDR
// if not tmp then
33615: LD_VAR 0 5
33619: NOT
33620: IFFALSE 33624
// exit ;
33622: GO 33778
// for i in tmp do
33624: LD_ADDR_VAR 0 1
33628: PUSH
33629: LD_VAR 0 5
33633: PUSH
33634: FOR_IN
33635: IFFALSE 33776
// begin d := rand ( 0 , 5 ) ;
33637: LD_ADDR_VAR 0 4
33641: PUSH
33642: LD_INT 0
33644: PPUSH
33645: LD_INT 5
33647: PPUSH
33648: CALL_OW 12
33652: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
33653: LD_ADDR_VAR 0 2
33657: PUSH
33658: LD_VAR 0 1
33662: PPUSH
33663: CALL_OW 250
33667: PPUSH
33668: LD_VAR 0 4
33672: PPUSH
33673: LD_INT 3
33675: PPUSH
33676: LD_INT 12
33678: PPUSH
33679: CALL_OW 12
33683: PPUSH
33684: CALL_OW 272
33688: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
33689: LD_ADDR_VAR 0 3
33693: PUSH
33694: LD_VAR 0 1
33698: PPUSH
33699: CALL_OW 251
33703: PPUSH
33704: LD_VAR 0 4
33708: PPUSH
33709: LD_INT 3
33711: PPUSH
33712: LD_INT 12
33714: PPUSH
33715: CALL_OW 12
33719: PPUSH
33720: CALL_OW 273
33724: ST_TO_ADDR
// if ValidHex ( x , y ) then
33725: LD_VAR 0 2
33729: PPUSH
33730: LD_VAR 0 3
33734: PPUSH
33735: CALL_OW 488
33739: IFFALSE 33774
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
33741: LD_VAR 0 1
33745: PPUSH
33746: LD_VAR 0 2
33750: PPUSH
33751: LD_VAR 0 3
33755: PPUSH
33756: LD_INT 3
33758: PPUSH
33759: LD_INT 6
33761: PPUSH
33762: CALL_OW 12
33766: PPUSH
33767: LD_INT 1
33769: PPUSH
33770: CALL_OW 483
// end ;
33774: GO 33634
33776: POP
33777: POP
// end ;
33778: PPOPN 5
33780: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
33781: LD_EXP 66
33785: PUSH
33786: LD_EXP 101
33790: AND
33791: IFFALSE 33885
33793: GO 33795
33795: DISABLE
33796: LD_INT 0
33798: PPUSH
33799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
33800: LD_ADDR_VAR 0 2
33804: PUSH
33805: LD_INT 22
33807: PUSH
33808: LD_OWVAR 2
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 32
33819: PUSH
33820: LD_INT 1
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 21
33829: PUSH
33830: LD_INT 2
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: LIST
33841: PPUSH
33842: CALL_OW 69
33846: ST_TO_ADDR
// if not tmp then
33847: LD_VAR 0 2
33851: NOT
33852: IFFALSE 33856
// exit ;
33854: GO 33885
// for i in tmp do
33856: LD_ADDR_VAR 0 1
33860: PUSH
33861: LD_VAR 0 2
33865: PUSH
33866: FOR_IN
33867: IFFALSE 33883
// SetFuel ( i , 0 ) ;
33869: LD_VAR 0 1
33873: PPUSH
33874: LD_INT 0
33876: PPUSH
33877: CALL_OW 240
33881: GO 33866
33883: POP
33884: POP
// end ;
33885: PPOPN 2
33887: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
33888: LD_EXP 66
33892: PUSH
33893: LD_EXP 102
33897: AND
33898: IFFALSE 33964
33900: GO 33902
33902: DISABLE
33903: LD_INT 0
33905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33906: LD_ADDR_VAR 0 1
33910: PUSH
33911: LD_INT 22
33913: PUSH
33914: LD_OWVAR 2
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 30
33925: PUSH
33926: LD_INT 29
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PPUSH
33937: CALL_OW 69
33941: ST_TO_ADDR
// if not tmp then
33942: LD_VAR 0 1
33946: NOT
33947: IFFALSE 33951
// exit ;
33949: GO 33964
// DestroyUnit ( tmp [ 1 ] ) ;
33951: LD_VAR 0 1
33955: PUSH
33956: LD_INT 1
33958: ARRAY
33959: PPUSH
33960: CALL_OW 65
// end ;
33964: PPOPN 1
33966: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
33967: LD_EXP 66
33971: PUSH
33972: LD_EXP 104
33976: AND
33977: IFFALSE 34106
33979: GO 33981
33981: DISABLE
33982: LD_INT 0
33984: PPUSH
// begin uc_side := 0 ;
33985: LD_ADDR_OWVAR 20
33989: PUSH
33990: LD_INT 0
33992: ST_TO_ADDR
// uc_nation := nation_arabian ;
33993: LD_ADDR_OWVAR 21
33997: PUSH
33998: LD_INT 2
34000: ST_TO_ADDR
// hc_gallery :=  ;
34001: LD_ADDR_OWVAR 33
34005: PUSH
34006: LD_STRING 
34008: ST_TO_ADDR
// hc_name :=  ;
34009: LD_ADDR_OWVAR 26
34013: PUSH
34014: LD_STRING 
34016: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
34017: LD_INT 1
34019: PPUSH
34020: LD_INT 11
34022: PPUSH
34023: LD_INT 10
34025: PPUSH
34026: CALL_OW 380
// un := CreateHuman ;
34030: LD_ADDR_VAR 0 1
34034: PUSH
34035: CALL_OW 44
34039: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
34040: LD_VAR 0 1
34044: PPUSH
34045: LD_INT 1
34047: PPUSH
34048: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
34052: LD_INT 35
34054: PPUSH
34055: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
34059: LD_VAR 0 1
34063: PPUSH
34064: LD_INT 22
34066: PUSH
34067: LD_OWVAR 2
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PPUSH
34076: CALL_OW 69
34080: PPUSH
34081: LD_VAR 0 1
34085: PPUSH
34086: CALL_OW 74
34090: PPUSH
34091: CALL_OW 115
// until IsDead ( un ) ;
34095: LD_VAR 0 1
34099: PPUSH
34100: CALL_OW 301
34104: IFFALSE 34052
// end ;
34106: PPOPN 1
34108: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
34109: LD_EXP 66
34113: PUSH
34114: LD_EXP 106
34118: AND
34119: IFFALSE 34131
34121: GO 34123
34123: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
34124: LD_STRING earthquake(getX(game), 0, 32)
34126: PPUSH
34127: CALL_OW 559
34131: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
34132: LD_EXP 66
34136: PUSH
34137: LD_EXP 107
34141: AND
34142: IFFALSE 34233
34144: GO 34146
34146: DISABLE
34147: LD_INT 0
34149: PPUSH
// begin enable ;
34150: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
34151: LD_ADDR_VAR 0 1
34155: PUSH
34156: LD_INT 22
34158: PUSH
34159: LD_OWVAR 2
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 21
34170: PUSH
34171: LD_INT 2
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 33
34180: PUSH
34181: LD_INT 3
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: LIST
34192: PPUSH
34193: CALL_OW 69
34197: ST_TO_ADDR
// if not tmp then
34198: LD_VAR 0 1
34202: NOT
34203: IFFALSE 34207
// exit ;
34205: GO 34233
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
34207: LD_VAR 0 1
34211: PUSH
34212: LD_INT 1
34214: PPUSH
34215: LD_VAR 0 1
34219: PPUSH
34220: CALL_OW 12
34224: ARRAY
34225: PPUSH
34226: LD_INT 1
34228: PPUSH
34229: CALL_OW 234
// end ;
34233: PPOPN 1
34235: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
34236: LD_EXP 66
34240: PUSH
34241: LD_EXP 108
34245: AND
34246: IFFALSE 34387
34248: GO 34250
34250: DISABLE
34251: LD_INT 0
34253: PPUSH
34254: PPUSH
34255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34256: LD_ADDR_VAR 0 3
34260: PUSH
34261: LD_INT 22
34263: PUSH
34264: LD_OWVAR 2
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 25
34275: PUSH
34276: LD_INT 1
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PPUSH
34287: CALL_OW 69
34291: ST_TO_ADDR
// if not tmp then
34292: LD_VAR 0 3
34296: NOT
34297: IFFALSE 34301
// exit ;
34299: GO 34387
// un := tmp [ rand ( 1 , tmp ) ] ;
34301: LD_ADDR_VAR 0 2
34305: PUSH
34306: LD_VAR 0 3
34310: PUSH
34311: LD_INT 1
34313: PPUSH
34314: LD_VAR 0 3
34318: PPUSH
34319: CALL_OW 12
34323: ARRAY
34324: ST_TO_ADDR
// if Crawls ( un ) then
34325: LD_VAR 0 2
34329: PPUSH
34330: CALL_OW 318
34334: IFFALSE 34345
// ComWalk ( un ) ;
34336: LD_VAR 0 2
34340: PPUSH
34341: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
34345: LD_VAR 0 2
34349: PPUSH
34350: LD_INT 9
34352: PPUSH
34353: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
34357: LD_INT 28
34359: PPUSH
34360: LD_OWVAR 2
34364: PPUSH
34365: LD_INT 2
34367: PPUSH
34368: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
34372: LD_INT 29
34374: PPUSH
34375: LD_OWVAR 2
34379: PPUSH
34380: LD_INT 2
34382: PPUSH
34383: CALL_OW 322
// end ;
34387: PPOPN 3
34389: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
34390: LD_EXP 66
34394: PUSH
34395: LD_EXP 109
34399: AND
34400: IFFALSE 34511
34402: GO 34404
34404: DISABLE
34405: LD_INT 0
34407: PPUSH
34408: PPUSH
34409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34410: LD_ADDR_VAR 0 3
34414: PUSH
34415: LD_INT 22
34417: PUSH
34418: LD_OWVAR 2
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 25
34429: PUSH
34430: LD_INT 1
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PPUSH
34441: CALL_OW 69
34445: ST_TO_ADDR
// if not tmp then
34446: LD_VAR 0 3
34450: NOT
34451: IFFALSE 34455
// exit ;
34453: GO 34511
// un := tmp [ rand ( 1 , tmp ) ] ;
34455: LD_ADDR_VAR 0 2
34459: PUSH
34460: LD_VAR 0 3
34464: PUSH
34465: LD_INT 1
34467: PPUSH
34468: LD_VAR 0 3
34472: PPUSH
34473: CALL_OW 12
34477: ARRAY
34478: ST_TO_ADDR
// if Crawls ( un ) then
34479: LD_VAR 0 2
34483: PPUSH
34484: CALL_OW 318
34488: IFFALSE 34499
// ComWalk ( un ) ;
34490: LD_VAR 0 2
34494: PPUSH
34495: CALL_OW 138
// SetClass ( un , class_mortar ) ;
34499: LD_VAR 0 2
34503: PPUSH
34504: LD_INT 8
34506: PPUSH
34507: CALL_OW 336
// end ;
34511: PPOPN 3
34513: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
34514: LD_EXP 66
34518: PUSH
34519: LD_EXP 110
34523: AND
34524: IFFALSE 34668
34526: GO 34528
34528: DISABLE
34529: LD_INT 0
34531: PPUSH
34532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
34533: LD_ADDR_VAR 0 2
34537: PUSH
34538: LD_INT 22
34540: PUSH
34541: LD_OWVAR 2
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 21
34552: PUSH
34553: LD_INT 2
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 2
34562: PUSH
34563: LD_INT 34
34565: PUSH
34566: LD_INT 12
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 34
34575: PUSH
34576: LD_INT 51
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 34
34585: PUSH
34586: LD_INT 32
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: LIST
34603: PPUSH
34604: CALL_OW 69
34608: ST_TO_ADDR
// if not tmp then
34609: LD_VAR 0 2
34613: NOT
34614: IFFALSE 34618
// exit ;
34616: GO 34668
// for i in tmp do
34618: LD_ADDR_VAR 0 1
34622: PUSH
34623: LD_VAR 0 2
34627: PUSH
34628: FOR_IN
34629: IFFALSE 34666
// if GetCargo ( i , mat_artifact ) = 0 then
34631: LD_VAR 0 1
34635: PPUSH
34636: LD_INT 4
34638: PPUSH
34639: CALL_OW 289
34643: PUSH
34644: LD_INT 0
34646: EQUAL
34647: IFFALSE 34664
// SetCargo ( i , mat_siberit , 100 ) ;
34649: LD_VAR 0 1
34653: PPUSH
34654: LD_INT 3
34656: PPUSH
34657: LD_INT 100
34659: PPUSH
34660: CALL_OW 290
34664: GO 34628
34666: POP
34667: POP
// end ;
34668: PPOPN 2
34670: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
34671: LD_EXP 66
34675: PUSH
34676: LD_EXP 111
34680: AND
34681: IFFALSE 34864
34683: GO 34685
34685: DISABLE
34686: LD_INT 0
34688: PPUSH
34689: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34690: LD_ADDR_VAR 0 2
34694: PUSH
34695: LD_INT 22
34697: PUSH
34698: LD_OWVAR 2
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PPUSH
34707: CALL_OW 69
34711: ST_TO_ADDR
// if not tmp then
34712: LD_VAR 0 2
34716: NOT
34717: IFFALSE 34721
// exit ;
34719: GO 34864
// for i := 1 to 2 do
34721: LD_ADDR_VAR 0 1
34725: PUSH
34726: DOUBLE
34727: LD_INT 1
34729: DEC
34730: ST_TO_ADDR
34731: LD_INT 2
34733: PUSH
34734: FOR_TO
34735: IFFALSE 34862
// begin uc_side := your_side ;
34737: LD_ADDR_OWVAR 20
34741: PUSH
34742: LD_OWVAR 2
34746: ST_TO_ADDR
// uc_nation := nation_american ;
34747: LD_ADDR_OWVAR 21
34751: PUSH
34752: LD_INT 1
34754: ST_TO_ADDR
// vc_chassis := us_morphling ;
34755: LD_ADDR_OWVAR 37
34759: PUSH
34760: LD_INT 5
34762: ST_TO_ADDR
// vc_engine := engine_siberite ;
34763: LD_ADDR_OWVAR 39
34767: PUSH
34768: LD_INT 3
34770: ST_TO_ADDR
// vc_control := control_computer ;
34771: LD_ADDR_OWVAR 38
34775: PUSH
34776: LD_INT 3
34778: ST_TO_ADDR
// vc_weapon := us_double_laser ;
34779: LD_ADDR_OWVAR 40
34783: PUSH
34784: LD_INT 10
34786: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
34787: LD_VAR 0 2
34791: PUSH
34792: LD_INT 1
34794: ARRAY
34795: PPUSH
34796: CALL_OW 310
34800: NOT
34801: IFFALSE 34848
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
34803: CALL_OW 45
34807: PPUSH
34808: LD_VAR 0 2
34812: PUSH
34813: LD_INT 1
34815: ARRAY
34816: PPUSH
34817: CALL_OW 250
34821: PPUSH
34822: LD_VAR 0 2
34826: PUSH
34827: LD_INT 1
34829: ARRAY
34830: PPUSH
34831: CALL_OW 251
34835: PPUSH
34836: LD_INT 12
34838: PPUSH
34839: LD_INT 1
34841: PPUSH
34842: CALL_OW 50
34846: GO 34860
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
34848: CALL_OW 45
34852: PPUSH
34853: LD_INT 1
34855: PPUSH
34856: CALL_OW 51
// end ;
34860: GO 34734
34862: POP
34863: POP
// end ;
34864: PPOPN 2
34866: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
34867: LD_EXP 66
34871: PUSH
34872: LD_EXP 112
34876: AND
34877: IFFALSE 35099
34879: GO 34881
34881: DISABLE
34882: LD_INT 0
34884: PPUSH
34885: PPUSH
34886: PPUSH
34887: PPUSH
34888: PPUSH
34889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34890: LD_ADDR_VAR 0 6
34894: PUSH
34895: LD_INT 22
34897: PUSH
34898: LD_OWVAR 2
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 21
34909: PUSH
34910: LD_INT 1
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 3
34919: PUSH
34920: LD_INT 23
34922: PUSH
34923: LD_INT 0
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: LIST
34938: PPUSH
34939: CALL_OW 69
34943: ST_TO_ADDR
// if not tmp then
34944: LD_VAR 0 6
34948: NOT
34949: IFFALSE 34953
// exit ;
34951: GO 35099
// s1 := rand ( 1 , 4 ) ;
34953: LD_ADDR_VAR 0 2
34957: PUSH
34958: LD_INT 1
34960: PPUSH
34961: LD_INT 4
34963: PPUSH
34964: CALL_OW 12
34968: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
34969: LD_ADDR_VAR 0 4
34973: PUSH
34974: LD_VAR 0 6
34978: PUSH
34979: LD_INT 1
34981: ARRAY
34982: PPUSH
34983: LD_VAR 0 2
34987: PPUSH
34988: CALL_OW 259
34992: ST_TO_ADDR
// if s1 = 1 then
34993: LD_VAR 0 2
34997: PUSH
34998: LD_INT 1
35000: EQUAL
35001: IFFALSE 35021
// s2 := rand ( 2 , 4 ) else
35003: LD_ADDR_VAR 0 3
35007: PUSH
35008: LD_INT 2
35010: PPUSH
35011: LD_INT 4
35013: PPUSH
35014: CALL_OW 12
35018: ST_TO_ADDR
35019: GO 35029
// s2 := 1 ;
35021: LD_ADDR_VAR 0 3
35025: PUSH
35026: LD_INT 1
35028: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
35029: LD_ADDR_VAR 0 5
35033: PUSH
35034: LD_VAR 0 6
35038: PUSH
35039: LD_INT 1
35041: ARRAY
35042: PPUSH
35043: LD_VAR 0 3
35047: PPUSH
35048: CALL_OW 259
35052: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
35053: LD_VAR 0 6
35057: PUSH
35058: LD_INT 1
35060: ARRAY
35061: PPUSH
35062: LD_VAR 0 2
35066: PPUSH
35067: LD_VAR 0 5
35071: PPUSH
35072: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
35076: LD_VAR 0 6
35080: PUSH
35081: LD_INT 1
35083: ARRAY
35084: PPUSH
35085: LD_VAR 0 3
35089: PPUSH
35090: LD_VAR 0 4
35094: PPUSH
35095: CALL_OW 237
// end ;
35099: PPOPN 6
35101: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
35102: LD_EXP 66
35106: PUSH
35107: LD_EXP 113
35111: AND
35112: IFFALSE 35191
35114: GO 35116
35116: DISABLE
35117: LD_INT 0
35119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
35120: LD_ADDR_VAR 0 1
35124: PUSH
35125: LD_INT 22
35127: PUSH
35128: LD_OWVAR 2
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 30
35139: PUSH
35140: LD_INT 3
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PPUSH
35151: CALL_OW 69
35155: ST_TO_ADDR
// if not tmp then
35156: LD_VAR 0 1
35160: NOT
35161: IFFALSE 35165
// exit ;
35163: GO 35191
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
35165: LD_VAR 0 1
35169: PUSH
35170: LD_INT 1
35172: PPUSH
35173: LD_VAR 0 1
35177: PPUSH
35178: CALL_OW 12
35182: ARRAY
35183: PPUSH
35184: LD_INT 1
35186: PPUSH
35187: CALL_OW 234
// end ;
35191: PPOPN 1
35193: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
35194: LD_EXP 66
35198: PUSH
35199: LD_EXP 114
35203: AND
35204: IFFALSE 35316
35206: GO 35208
35208: DISABLE
35209: LD_INT 0
35211: PPUSH
35212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
35213: LD_ADDR_VAR 0 2
35217: PUSH
35218: LD_INT 22
35220: PUSH
35221: LD_OWVAR 2
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 2
35232: PUSH
35233: LD_INT 30
35235: PUSH
35236: LD_INT 27
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 30
35245: PUSH
35246: LD_INT 26
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 30
35255: PUSH
35256: LD_INT 28
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PPUSH
35273: CALL_OW 69
35277: ST_TO_ADDR
// if not tmp then
35278: LD_VAR 0 2
35282: NOT
35283: IFFALSE 35287
// exit ;
35285: GO 35316
// for i in tmp do
35287: LD_ADDR_VAR 0 1
35291: PUSH
35292: LD_VAR 0 2
35296: PUSH
35297: FOR_IN
35298: IFFALSE 35314
// SetLives ( i , 1 ) ;
35300: LD_VAR 0 1
35304: PPUSH
35305: LD_INT 1
35307: PPUSH
35308: CALL_OW 234
35312: GO 35297
35314: POP
35315: POP
// end ;
35316: PPOPN 2
35318: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
35319: LD_EXP 66
35323: PUSH
35324: LD_EXP 115
35328: AND
35329: IFFALSE 35616
35331: GO 35333
35333: DISABLE
35334: LD_INT 0
35336: PPUSH
35337: PPUSH
35338: PPUSH
// begin i := rand ( 1 , 7 ) ;
35339: LD_ADDR_VAR 0 1
35343: PUSH
35344: LD_INT 1
35346: PPUSH
35347: LD_INT 7
35349: PPUSH
35350: CALL_OW 12
35354: ST_TO_ADDR
// case i of 1 :
35355: LD_VAR 0 1
35359: PUSH
35360: LD_INT 1
35362: DOUBLE
35363: EQUAL
35364: IFTRUE 35368
35366: GO 35378
35368: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
35369: LD_STRING earthquake(getX(game), 0, 32)
35371: PPUSH
35372: CALL_OW 559
35376: GO 35616
35378: LD_INT 2
35380: DOUBLE
35381: EQUAL
35382: IFTRUE 35386
35384: GO 35400
35386: POP
// begin ToLua ( displayStucuk(); ) ;
35387: LD_STRING displayStucuk();
35389: PPUSH
35390: CALL_OW 559
// ResetFog ;
35394: CALL_OW 335
// end ; 3 :
35398: GO 35616
35400: LD_INT 3
35402: DOUBLE
35403: EQUAL
35404: IFTRUE 35408
35406: GO 35512
35408: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
35409: LD_ADDR_VAR 0 2
35413: PUSH
35414: LD_INT 22
35416: PUSH
35417: LD_OWVAR 2
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 25
35428: PUSH
35429: LD_INT 1
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PPUSH
35440: CALL_OW 69
35444: ST_TO_ADDR
// if not tmp then
35445: LD_VAR 0 2
35449: NOT
35450: IFFALSE 35454
// exit ;
35452: GO 35616
// un := tmp [ rand ( 1 , tmp ) ] ;
35454: LD_ADDR_VAR 0 3
35458: PUSH
35459: LD_VAR 0 2
35463: PUSH
35464: LD_INT 1
35466: PPUSH
35467: LD_VAR 0 2
35471: PPUSH
35472: CALL_OW 12
35476: ARRAY
35477: ST_TO_ADDR
// if Crawls ( un ) then
35478: LD_VAR 0 3
35482: PPUSH
35483: CALL_OW 318
35487: IFFALSE 35498
// ComWalk ( un ) ;
35489: LD_VAR 0 3
35493: PPUSH
35494: CALL_OW 138
// SetClass ( un , class_mortar ) ;
35498: LD_VAR 0 3
35502: PPUSH
35503: LD_INT 8
35505: PPUSH
35506: CALL_OW 336
// end ; 4 :
35510: GO 35616
35512: LD_INT 4
35514: DOUBLE
35515: EQUAL
35516: IFTRUE 35520
35518: GO 35594
35520: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
35521: LD_ADDR_VAR 0 2
35525: PUSH
35526: LD_INT 22
35528: PUSH
35529: LD_OWVAR 2
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 30
35540: PUSH
35541: LD_INT 29
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PPUSH
35552: CALL_OW 69
35556: ST_TO_ADDR
// if not tmp then
35557: LD_VAR 0 2
35561: NOT
35562: IFFALSE 35566
// exit ;
35564: GO 35616
// CenterNowOnUnits ( tmp [ 1 ] ) ;
35566: LD_VAR 0 2
35570: PUSH
35571: LD_INT 1
35573: ARRAY
35574: PPUSH
35575: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
35579: LD_VAR 0 2
35583: PUSH
35584: LD_INT 1
35586: ARRAY
35587: PPUSH
35588: CALL_OW 65
// end ; 5 .. 7 :
35592: GO 35616
35594: LD_INT 5
35596: DOUBLE
35597: GREATEREQUAL
35598: IFFALSE 35606
35600: LD_INT 7
35602: DOUBLE
35603: LESSEQUAL
35604: IFTRUE 35608
35606: GO 35615
35608: POP
// StreamSibBomb ; end ;
35609: CALL 31853 0 0
35613: GO 35616
35615: POP
// end ;
35616: PPOPN 3
35618: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
35619: LD_EXP 66
35623: PUSH
35624: LD_EXP 116
35628: AND
35629: IFFALSE 35785
35631: GO 35633
35633: DISABLE
35634: LD_INT 0
35636: PPUSH
35637: PPUSH
35638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
35639: LD_ADDR_VAR 0 2
35643: PUSH
35644: LD_INT 81
35646: PUSH
35647: LD_OWVAR 2
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 2
35658: PUSH
35659: LD_INT 21
35661: PUSH
35662: LD_INT 1
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 21
35671: PUSH
35672: LD_INT 2
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: LIST
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PPUSH
35688: CALL_OW 69
35692: ST_TO_ADDR
// if not tmp then
35693: LD_VAR 0 2
35697: NOT
35698: IFFALSE 35702
// exit ;
35700: GO 35785
// p := 0 ;
35702: LD_ADDR_VAR 0 3
35706: PUSH
35707: LD_INT 0
35709: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35710: LD_INT 35
35712: PPUSH
35713: CALL_OW 67
// p := p + 1 ;
35717: LD_ADDR_VAR 0 3
35721: PUSH
35722: LD_VAR 0 3
35726: PUSH
35727: LD_INT 1
35729: PLUS
35730: ST_TO_ADDR
// for i in tmp do
35731: LD_ADDR_VAR 0 1
35735: PUSH
35736: LD_VAR 0 2
35740: PUSH
35741: FOR_IN
35742: IFFALSE 35773
// if GetLives ( i ) < 1000 then
35744: LD_VAR 0 1
35748: PPUSH
35749: CALL_OW 256
35753: PUSH
35754: LD_INT 1000
35756: LESS
35757: IFFALSE 35771
// SetLives ( i , 1000 ) ;
35759: LD_VAR 0 1
35763: PPUSH
35764: LD_INT 1000
35766: PPUSH
35767: CALL_OW 234
35771: GO 35741
35773: POP
35774: POP
// until p > 20 ;
35775: LD_VAR 0 3
35779: PUSH
35780: LD_INT 20
35782: GREATER
35783: IFFALSE 35710
// end ;
35785: PPOPN 3
35787: END
// every 0 0$1 trigger StreamModeActive and sTime do
35788: LD_EXP 66
35792: PUSH
35793: LD_EXP 117
35797: AND
35798: IFFALSE 35833
35800: GO 35802
35802: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
35803: LD_INT 28
35805: PPUSH
35806: LD_OWVAR 2
35810: PPUSH
35811: LD_INT 2
35813: PPUSH
35814: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
35818: LD_INT 30
35820: PPUSH
35821: LD_OWVAR 2
35825: PPUSH
35826: LD_INT 2
35828: PPUSH
35829: CALL_OW 322
// end ;
35833: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
35834: LD_EXP 66
35838: PUSH
35839: LD_EXP 118
35843: AND
35844: IFFALSE 35965
35846: GO 35848
35848: DISABLE
35849: LD_INT 0
35851: PPUSH
35852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
35853: LD_ADDR_VAR 0 2
35857: PUSH
35858: LD_INT 22
35860: PUSH
35861: LD_OWVAR 2
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 21
35872: PUSH
35873: LD_INT 1
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 3
35882: PUSH
35883: LD_INT 23
35885: PUSH
35886: LD_INT 0
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: LIST
35901: PPUSH
35902: CALL_OW 69
35906: ST_TO_ADDR
// if not tmp then
35907: LD_VAR 0 2
35911: NOT
35912: IFFALSE 35916
// exit ;
35914: GO 35965
// for i in tmp do
35916: LD_ADDR_VAR 0 1
35920: PUSH
35921: LD_VAR 0 2
35925: PUSH
35926: FOR_IN
35927: IFFALSE 35963
// begin if Crawls ( i ) then
35929: LD_VAR 0 1
35933: PPUSH
35934: CALL_OW 318
35938: IFFALSE 35949
// ComWalk ( i ) ;
35940: LD_VAR 0 1
35944: PPUSH
35945: CALL_OW 138
// SetClass ( i , 2 ) ;
35949: LD_VAR 0 1
35953: PPUSH
35954: LD_INT 2
35956: PPUSH
35957: CALL_OW 336
// end ;
35961: GO 35926
35963: POP
35964: POP
// end ;
35965: PPOPN 2
35967: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
35968: LD_EXP 66
35972: PUSH
35973: LD_EXP 119
35977: AND
35978: IFFALSE 36266
35980: GO 35982
35982: DISABLE
35983: LD_INT 0
35985: PPUSH
35986: PPUSH
35987: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
35988: LD_OWVAR 2
35992: PPUSH
35993: LD_INT 9
35995: PPUSH
35996: LD_INT 1
35998: PPUSH
35999: LD_INT 1
36001: PPUSH
36002: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
36006: LD_INT 9
36008: PPUSH
36009: LD_OWVAR 2
36013: PPUSH
36014: CALL_OW 343
// uc_side := 9 ;
36018: LD_ADDR_OWVAR 20
36022: PUSH
36023: LD_INT 9
36025: ST_TO_ADDR
// uc_nation := 2 ;
36026: LD_ADDR_OWVAR 21
36030: PUSH
36031: LD_INT 2
36033: ST_TO_ADDR
// hc_name := Dark Warrior ;
36034: LD_ADDR_OWVAR 26
36038: PUSH
36039: LD_STRING Dark Warrior
36041: ST_TO_ADDR
// hc_gallery :=  ;
36042: LD_ADDR_OWVAR 33
36046: PUSH
36047: LD_STRING 
36049: ST_TO_ADDR
// hc_noskilllimit := true ;
36050: LD_ADDR_OWVAR 76
36054: PUSH
36055: LD_INT 1
36057: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
36058: LD_ADDR_OWVAR 31
36062: PUSH
36063: LD_INT 30
36065: PUSH
36066: LD_INT 30
36068: PUSH
36069: LD_INT 30
36071: PUSH
36072: LD_INT 30
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: ST_TO_ADDR
// un := CreateHuman ;
36081: LD_ADDR_VAR 0 3
36085: PUSH
36086: CALL_OW 44
36090: ST_TO_ADDR
// hc_noskilllimit := false ;
36091: LD_ADDR_OWVAR 76
36095: PUSH
36096: LD_INT 0
36098: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
36099: LD_VAR 0 3
36103: PPUSH
36104: LD_INT 1
36106: PPUSH
36107: CALL_OW 51
// ToLua ( playRanger() ) ;
36111: LD_STRING playRanger()
36113: PPUSH
36114: CALL_OW 559
// p := 0 ;
36118: LD_ADDR_VAR 0 2
36122: PUSH
36123: LD_INT 0
36125: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
36126: LD_INT 35
36128: PPUSH
36129: CALL_OW 67
// p := p + 1 ;
36133: LD_ADDR_VAR 0 2
36137: PUSH
36138: LD_VAR 0 2
36142: PUSH
36143: LD_INT 1
36145: PLUS
36146: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
36147: LD_VAR 0 3
36151: PPUSH
36152: CALL_OW 256
36156: PUSH
36157: LD_INT 1000
36159: LESS
36160: IFFALSE 36174
// SetLives ( un , 1000 ) ;
36162: LD_VAR 0 3
36166: PPUSH
36167: LD_INT 1000
36169: PPUSH
36170: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
36174: LD_VAR 0 3
36178: PPUSH
36179: LD_INT 81
36181: PUSH
36182: LD_OWVAR 2
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 91
36193: PUSH
36194: LD_VAR 0 3
36198: PUSH
36199: LD_INT 30
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: LIST
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PPUSH
36211: CALL_OW 69
36215: PPUSH
36216: LD_VAR 0 3
36220: PPUSH
36221: CALL_OW 74
36225: PPUSH
36226: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
36230: LD_VAR 0 2
36234: PUSH
36235: LD_INT 80
36237: GREATER
36238: PUSH
36239: LD_VAR 0 3
36243: PPUSH
36244: CALL_OW 301
36248: OR
36249: IFFALSE 36126
// if un then
36251: LD_VAR 0 3
36255: IFFALSE 36266
// RemoveUnit ( un ) ;
36257: LD_VAR 0 3
36261: PPUSH
36262: CALL_OW 64
// end ;
36266: PPOPN 3
36268: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
36269: LD_EXP 120
36273: IFFALSE 36389
36275: GO 36277
36277: DISABLE
36278: LD_INT 0
36280: PPUSH
36281: PPUSH
36282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
36283: LD_ADDR_VAR 0 2
36287: PUSH
36288: LD_INT 81
36290: PUSH
36291: LD_OWVAR 2
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 21
36302: PUSH
36303: LD_INT 1
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PPUSH
36314: CALL_OW 69
36318: ST_TO_ADDR
// ToLua ( playComputer() ) ;
36319: LD_STRING playComputer()
36321: PPUSH
36322: CALL_OW 559
// if not tmp then
36326: LD_VAR 0 2
36330: NOT
36331: IFFALSE 36335
// exit ;
36333: GO 36389
// for i in tmp do
36335: LD_ADDR_VAR 0 1
36339: PUSH
36340: LD_VAR 0 2
36344: PUSH
36345: FOR_IN
36346: IFFALSE 36387
// for j := 1 to 4 do
36348: LD_ADDR_VAR 0 3
36352: PUSH
36353: DOUBLE
36354: LD_INT 1
36356: DEC
36357: ST_TO_ADDR
36358: LD_INT 4
36360: PUSH
36361: FOR_TO
36362: IFFALSE 36383
// SetSkill ( i , j , 10 ) ;
36364: LD_VAR 0 1
36368: PPUSH
36369: LD_VAR 0 3
36373: PPUSH
36374: LD_INT 10
36376: PPUSH
36377: CALL_OW 237
36381: GO 36361
36383: POP
36384: POP
36385: GO 36345
36387: POP
36388: POP
// end ;
36389: PPOPN 3
36391: END
// every 0 0$1 trigger s30 do var i , tmp ;
36392: LD_EXP 121
36396: IFFALSE 36465
36398: GO 36400
36400: DISABLE
36401: LD_INT 0
36403: PPUSH
36404: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
36405: LD_ADDR_VAR 0 2
36409: PUSH
36410: LD_INT 22
36412: PUSH
36413: LD_OWVAR 2
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PPUSH
36422: CALL_OW 69
36426: ST_TO_ADDR
// if not tmp then
36427: LD_VAR 0 2
36431: NOT
36432: IFFALSE 36436
// exit ;
36434: GO 36465
// for i in tmp do
36436: LD_ADDR_VAR 0 1
36440: PUSH
36441: LD_VAR 0 2
36445: PUSH
36446: FOR_IN
36447: IFFALSE 36463
// SetLives ( i , 300 ) ;
36449: LD_VAR 0 1
36453: PPUSH
36454: LD_INT 300
36456: PPUSH
36457: CALL_OW 234
36461: GO 36446
36463: POP
36464: POP
// end ;
36465: PPOPN 2
36467: END
// every 0 0$1 trigger s60 do var i , tmp ;
36468: LD_EXP 122
36472: IFFALSE 36541
36474: GO 36476
36476: DISABLE
36477: LD_INT 0
36479: PPUSH
36480: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
36481: LD_ADDR_VAR 0 2
36485: PUSH
36486: LD_INT 22
36488: PUSH
36489: LD_OWVAR 2
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PPUSH
36498: CALL_OW 69
36502: ST_TO_ADDR
// if not tmp then
36503: LD_VAR 0 2
36507: NOT
36508: IFFALSE 36512
// exit ;
36510: GO 36541
// for i in tmp do
36512: LD_ADDR_VAR 0 1
36516: PUSH
36517: LD_VAR 0 2
36521: PUSH
36522: FOR_IN
36523: IFFALSE 36539
// SetLives ( i , 600 ) ;
36525: LD_VAR 0 1
36529: PPUSH
36530: LD_INT 600
36532: PPUSH
36533: CALL_OW 234
36537: GO 36522
36539: POP
36540: POP
// end ;
36541: PPOPN 2
36543: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
36544: LD_INT 0
36546: PPUSH
// case cmd of 301 :
36547: LD_VAR 0 1
36551: PUSH
36552: LD_INT 301
36554: DOUBLE
36555: EQUAL
36556: IFTRUE 36560
36558: GO 36592
36560: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
36561: LD_VAR 0 6
36565: PPUSH
36566: LD_VAR 0 7
36570: PPUSH
36571: LD_VAR 0 8
36575: PPUSH
36576: LD_VAR 0 4
36580: PPUSH
36581: LD_VAR 0 5
36585: PPUSH
36586: CALL 37801 0 5
36590: GO 36713
36592: LD_INT 302
36594: DOUBLE
36595: EQUAL
36596: IFTRUE 36600
36598: GO 36637
36600: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
36601: LD_VAR 0 6
36605: PPUSH
36606: LD_VAR 0 7
36610: PPUSH
36611: LD_VAR 0 8
36615: PPUSH
36616: LD_VAR 0 9
36620: PPUSH
36621: LD_VAR 0 4
36625: PPUSH
36626: LD_VAR 0 5
36630: PPUSH
36631: CALL 37892 0 6
36635: GO 36713
36637: LD_INT 303
36639: DOUBLE
36640: EQUAL
36641: IFTRUE 36645
36643: GO 36682
36645: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
36646: LD_VAR 0 6
36650: PPUSH
36651: LD_VAR 0 7
36655: PPUSH
36656: LD_VAR 0 8
36660: PPUSH
36661: LD_VAR 0 9
36665: PPUSH
36666: LD_VAR 0 4
36670: PPUSH
36671: LD_VAR 0 5
36675: PPUSH
36676: CALL 36718 0 6
36680: GO 36713
36682: LD_INT 304
36684: DOUBLE
36685: EQUAL
36686: IFTRUE 36690
36688: GO 36712
36690: POP
// hHackTeleport ( unit , x , y ) ; end ;
36691: LD_VAR 0 2
36695: PPUSH
36696: LD_VAR 0 4
36700: PPUSH
36701: LD_VAR 0 5
36705: PPUSH
36706: CALL 38485 0 3
36710: GO 36713
36712: POP
// end ;
36713: LD_VAR 0 12
36717: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
36718: LD_INT 0
36720: PPUSH
36721: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
36722: LD_VAR 0 1
36726: PUSH
36727: LD_INT 1
36729: LESS
36730: PUSH
36731: LD_VAR 0 1
36735: PUSH
36736: LD_INT 3
36738: GREATER
36739: OR
36740: PUSH
36741: LD_VAR 0 5
36745: PPUSH
36746: LD_VAR 0 6
36750: PPUSH
36751: CALL_OW 428
36755: OR
36756: IFFALSE 36760
// exit ;
36758: GO 37488
// uc_side := your_side ;
36760: LD_ADDR_OWVAR 20
36764: PUSH
36765: LD_OWVAR 2
36769: ST_TO_ADDR
// uc_nation := nation ;
36770: LD_ADDR_OWVAR 21
36774: PUSH
36775: LD_VAR 0 1
36779: ST_TO_ADDR
// bc_level = 1 ;
36780: LD_ADDR_OWVAR 43
36784: PUSH
36785: LD_INT 1
36787: ST_TO_ADDR
// case btype of 1 :
36788: LD_VAR 0 2
36792: PUSH
36793: LD_INT 1
36795: DOUBLE
36796: EQUAL
36797: IFTRUE 36801
36799: GO 36812
36801: POP
// bc_type := b_depot ; 2 :
36802: LD_ADDR_OWVAR 42
36806: PUSH
36807: LD_INT 0
36809: ST_TO_ADDR
36810: GO 37432
36812: LD_INT 2
36814: DOUBLE
36815: EQUAL
36816: IFTRUE 36820
36818: GO 36831
36820: POP
// bc_type := b_warehouse ; 3 :
36821: LD_ADDR_OWVAR 42
36825: PUSH
36826: LD_INT 1
36828: ST_TO_ADDR
36829: GO 37432
36831: LD_INT 3
36833: DOUBLE
36834: EQUAL
36835: IFTRUE 36839
36837: GO 36850
36839: POP
// bc_type := b_lab ; 4 .. 9 :
36840: LD_ADDR_OWVAR 42
36844: PUSH
36845: LD_INT 6
36847: ST_TO_ADDR
36848: GO 37432
36850: LD_INT 4
36852: DOUBLE
36853: GREATEREQUAL
36854: IFFALSE 36862
36856: LD_INT 9
36858: DOUBLE
36859: LESSEQUAL
36860: IFTRUE 36864
36862: GO 36924
36864: POP
// begin bc_type := b_lab_half ;
36865: LD_ADDR_OWVAR 42
36869: PUSH
36870: LD_INT 7
36872: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
36873: LD_ADDR_OWVAR 44
36877: PUSH
36878: LD_INT 10
36880: PUSH
36881: LD_INT 11
36883: PUSH
36884: LD_INT 12
36886: PUSH
36887: LD_INT 15
36889: PUSH
36890: LD_INT 14
36892: PUSH
36893: LD_INT 13
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: PUSH
36904: LD_VAR 0 2
36908: PUSH
36909: LD_INT 3
36911: MINUS
36912: ARRAY
36913: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
36914: LD_ADDR_OWVAR 45
36918: PUSH
36919: LD_INT 9
36921: ST_TO_ADDR
// end ; 10 .. 13 :
36922: GO 37432
36924: LD_INT 10
36926: DOUBLE
36927: GREATEREQUAL
36928: IFFALSE 36936
36930: LD_INT 13
36932: DOUBLE
36933: LESSEQUAL
36934: IFTRUE 36938
36936: GO 37015
36938: POP
// begin bc_type := b_lab_full ;
36939: LD_ADDR_OWVAR 42
36943: PUSH
36944: LD_INT 8
36946: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
36947: LD_ADDR_OWVAR 44
36951: PUSH
36952: LD_INT 10
36954: PUSH
36955: LD_INT 12
36957: PUSH
36958: LD_INT 14
36960: PUSH
36961: LD_INT 13
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: PUSH
36970: LD_VAR 0 2
36974: PUSH
36975: LD_INT 9
36977: MINUS
36978: ARRAY
36979: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
36980: LD_ADDR_OWVAR 45
36984: PUSH
36985: LD_INT 11
36987: PUSH
36988: LD_INT 15
36990: PUSH
36991: LD_INT 12
36993: PUSH
36994: LD_INT 15
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: PUSH
37003: LD_VAR 0 2
37007: PUSH
37008: LD_INT 9
37010: MINUS
37011: ARRAY
37012: ST_TO_ADDR
// end ; 14 :
37013: GO 37432
37015: LD_INT 14
37017: DOUBLE
37018: EQUAL
37019: IFTRUE 37023
37021: GO 37034
37023: POP
// bc_type := b_workshop ; 15 :
37024: LD_ADDR_OWVAR 42
37028: PUSH
37029: LD_INT 2
37031: ST_TO_ADDR
37032: GO 37432
37034: LD_INT 15
37036: DOUBLE
37037: EQUAL
37038: IFTRUE 37042
37040: GO 37053
37042: POP
// bc_type := b_factory ; 16 :
37043: LD_ADDR_OWVAR 42
37047: PUSH
37048: LD_INT 3
37050: ST_TO_ADDR
37051: GO 37432
37053: LD_INT 16
37055: DOUBLE
37056: EQUAL
37057: IFTRUE 37061
37059: GO 37072
37061: POP
// bc_type := b_ext_gun ; 17 :
37062: LD_ADDR_OWVAR 42
37066: PUSH
37067: LD_INT 17
37069: ST_TO_ADDR
37070: GO 37432
37072: LD_INT 17
37074: DOUBLE
37075: EQUAL
37076: IFTRUE 37080
37078: GO 37108
37080: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
37081: LD_ADDR_OWVAR 42
37085: PUSH
37086: LD_INT 19
37088: PUSH
37089: LD_INT 23
37091: PUSH
37092: LD_INT 19
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: LIST
37099: PUSH
37100: LD_VAR 0 1
37104: ARRAY
37105: ST_TO_ADDR
37106: GO 37432
37108: LD_INT 18
37110: DOUBLE
37111: EQUAL
37112: IFTRUE 37116
37114: GO 37127
37116: POP
// bc_type := b_ext_radar ; 19 :
37117: LD_ADDR_OWVAR 42
37121: PUSH
37122: LD_INT 20
37124: ST_TO_ADDR
37125: GO 37432
37127: LD_INT 19
37129: DOUBLE
37130: EQUAL
37131: IFTRUE 37135
37133: GO 37146
37135: POP
// bc_type := b_ext_radio ; 20 :
37136: LD_ADDR_OWVAR 42
37140: PUSH
37141: LD_INT 22
37143: ST_TO_ADDR
37144: GO 37432
37146: LD_INT 20
37148: DOUBLE
37149: EQUAL
37150: IFTRUE 37154
37152: GO 37165
37154: POP
// bc_type := b_ext_siberium ; 21 :
37155: LD_ADDR_OWVAR 42
37159: PUSH
37160: LD_INT 21
37162: ST_TO_ADDR
37163: GO 37432
37165: LD_INT 21
37167: DOUBLE
37168: EQUAL
37169: IFTRUE 37173
37171: GO 37184
37173: POP
// bc_type := b_ext_computer ; 22 :
37174: LD_ADDR_OWVAR 42
37178: PUSH
37179: LD_INT 24
37181: ST_TO_ADDR
37182: GO 37432
37184: LD_INT 22
37186: DOUBLE
37187: EQUAL
37188: IFTRUE 37192
37190: GO 37203
37192: POP
// bc_type := b_ext_track ; 23 :
37193: LD_ADDR_OWVAR 42
37197: PUSH
37198: LD_INT 16
37200: ST_TO_ADDR
37201: GO 37432
37203: LD_INT 23
37205: DOUBLE
37206: EQUAL
37207: IFTRUE 37211
37209: GO 37222
37211: POP
// bc_type := b_ext_laser ; 24 :
37212: LD_ADDR_OWVAR 42
37216: PUSH
37217: LD_INT 25
37219: ST_TO_ADDR
37220: GO 37432
37222: LD_INT 24
37224: DOUBLE
37225: EQUAL
37226: IFTRUE 37230
37228: GO 37241
37230: POP
// bc_type := b_control_tower ; 25 :
37231: LD_ADDR_OWVAR 42
37235: PUSH
37236: LD_INT 36
37238: ST_TO_ADDR
37239: GO 37432
37241: LD_INT 25
37243: DOUBLE
37244: EQUAL
37245: IFTRUE 37249
37247: GO 37260
37249: POP
// bc_type := b_breastwork ; 26 :
37250: LD_ADDR_OWVAR 42
37254: PUSH
37255: LD_INT 31
37257: ST_TO_ADDR
37258: GO 37432
37260: LD_INT 26
37262: DOUBLE
37263: EQUAL
37264: IFTRUE 37268
37266: GO 37279
37268: POP
// bc_type := b_bunker ; 27 :
37269: LD_ADDR_OWVAR 42
37273: PUSH
37274: LD_INT 32
37276: ST_TO_ADDR
37277: GO 37432
37279: LD_INT 27
37281: DOUBLE
37282: EQUAL
37283: IFTRUE 37287
37285: GO 37298
37287: POP
// bc_type := b_turret ; 28 :
37288: LD_ADDR_OWVAR 42
37292: PUSH
37293: LD_INT 33
37295: ST_TO_ADDR
37296: GO 37432
37298: LD_INT 28
37300: DOUBLE
37301: EQUAL
37302: IFTRUE 37306
37304: GO 37317
37306: POP
// bc_type := b_armoury ; 29 :
37307: LD_ADDR_OWVAR 42
37311: PUSH
37312: LD_INT 4
37314: ST_TO_ADDR
37315: GO 37432
37317: LD_INT 29
37319: DOUBLE
37320: EQUAL
37321: IFTRUE 37325
37323: GO 37336
37325: POP
// bc_type := b_barracks ; 30 :
37326: LD_ADDR_OWVAR 42
37330: PUSH
37331: LD_INT 5
37333: ST_TO_ADDR
37334: GO 37432
37336: LD_INT 30
37338: DOUBLE
37339: EQUAL
37340: IFTRUE 37344
37342: GO 37355
37344: POP
// bc_type := b_solar_power ; 31 :
37345: LD_ADDR_OWVAR 42
37349: PUSH
37350: LD_INT 27
37352: ST_TO_ADDR
37353: GO 37432
37355: LD_INT 31
37357: DOUBLE
37358: EQUAL
37359: IFTRUE 37363
37361: GO 37374
37363: POP
// bc_type := b_oil_power ; 32 :
37364: LD_ADDR_OWVAR 42
37368: PUSH
37369: LD_INT 26
37371: ST_TO_ADDR
37372: GO 37432
37374: LD_INT 32
37376: DOUBLE
37377: EQUAL
37378: IFTRUE 37382
37380: GO 37393
37382: POP
// bc_type := b_siberite_power ; 33 :
37383: LD_ADDR_OWVAR 42
37387: PUSH
37388: LD_INT 28
37390: ST_TO_ADDR
37391: GO 37432
37393: LD_INT 33
37395: DOUBLE
37396: EQUAL
37397: IFTRUE 37401
37399: GO 37412
37401: POP
// bc_type := b_oil_mine ; 34 :
37402: LD_ADDR_OWVAR 42
37406: PUSH
37407: LD_INT 29
37409: ST_TO_ADDR
37410: GO 37432
37412: LD_INT 34
37414: DOUBLE
37415: EQUAL
37416: IFTRUE 37420
37418: GO 37431
37420: POP
// bc_type := b_siberite_mine ; end ;
37421: LD_ADDR_OWVAR 42
37425: PUSH
37426: LD_INT 30
37428: ST_TO_ADDR
37429: GO 37432
37431: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
37432: LD_ADDR_VAR 0 8
37436: PUSH
37437: LD_VAR 0 5
37441: PPUSH
37442: LD_VAR 0 6
37446: PPUSH
37447: LD_VAR 0 3
37451: PPUSH
37452: CALL_OW 47
37456: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
37457: LD_OWVAR 42
37461: PUSH
37462: LD_INT 32
37464: PUSH
37465: LD_INT 33
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: IN
37472: IFFALSE 37488
// PlaceWeaponTurret ( b , weapon ) ;
37474: LD_VAR 0 8
37478: PPUSH
37479: LD_VAR 0 4
37483: PPUSH
37484: CALL_OW 431
// end ;
37488: LD_VAR 0 7
37492: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
37493: LD_INT 0
37495: PPUSH
37496: PPUSH
37497: PPUSH
37498: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37499: LD_ADDR_VAR 0 4
37503: PUSH
37504: LD_INT 22
37506: PUSH
37507: LD_OWVAR 2
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 2
37518: PUSH
37519: LD_INT 30
37521: PUSH
37522: LD_INT 0
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 30
37531: PUSH
37532: LD_INT 1
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: LIST
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PPUSH
37548: CALL_OW 69
37552: ST_TO_ADDR
// if not tmp then
37553: LD_VAR 0 4
37557: NOT
37558: IFFALSE 37562
// exit ;
37560: GO 37621
// for i in tmp do
37562: LD_ADDR_VAR 0 2
37566: PUSH
37567: LD_VAR 0 4
37571: PUSH
37572: FOR_IN
37573: IFFALSE 37619
// for j = 1 to 3 do
37575: LD_ADDR_VAR 0 3
37579: PUSH
37580: DOUBLE
37581: LD_INT 1
37583: DEC
37584: ST_TO_ADDR
37585: LD_INT 3
37587: PUSH
37588: FOR_TO
37589: IFFALSE 37615
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
37591: LD_VAR 0 2
37595: PPUSH
37596: CALL_OW 274
37600: PPUSH
37601: LD_VAR 0 3
37605: PPUSH
37606: LD_INT 99999
37608: PPUSH
37609: CALL_OW 277
37613: GO 37588
37615: POP
37616: POP
37617: GO 37572
37619: POP
37620: POP
// end ;
37621: LD_VAR 0 1
37625: RET
// export function hHackSetLevel10 ; var i , j ; begin
37626: LD_INT 0
37628: PPUSH
37629: PPUSH
37630: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
37631: LD_ADDR_VAR 0 2
37635: PUSH
37636: LD_INT 21
37638: PUSH
37639: LD_INT 1
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PPUSH
37646: CALL_OW 69
37650: PUSH
37651: FOR_IN
37652: IFFALSE 37704
// if IsSelected ( i ) then
37654: LD_VAR 0 2
37658: PPUSH
37659: CALL_OW 306
37663: IFFALSE 37702
// begin for j := 1 to 4 do
37665: LD_ADDR_VAR 0 3
37669: PUSH
37670: DOUBLE
37671: LD_INT 1
37673: DEC
37674: ST_TO_ADDR
37675: LD_INT 4
37677: PUSH
37678: FOR_TO
37679: IFFALSE 37700
// SetSkill ( i , j , 10 ) ;
37681: LD_VAR 0 2
37685: PPUSH
37686: LD_VAR 0 3
37690: PPUSH
37691: LD_INT 10
37693: PPUSH
37694: CALL_OW 237
37698: GO 37678
37700: POP
37701: POP
// end ;
37702: GO 37651
37704: POP
37705: POP
// end ;
37706: LD_VAR 0 1
37710: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
37711: LD_INT 0
37713: PPUSH
37714: PPUSH
37715: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
37716: LD_ADDR_VAR 0 2
37720: PUSH
37721: LD_INT 22
37723: PUSH
37724: LD_OWVAR 2
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 21
37735: PUSH
37736: LD_INT 1
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PPUSH
37747: CALL_OW 69
37751: PUSH
37752: FOR_IN
37753: IFFALSE 37794
// begin for j := 1 to 4 do
37755: LD_ADDR_VAR 0 3
37759: PUSH
37760: DOUBLE
37761: LD_INT 1
37763: DEC
37764: ST_TO_ADDR
37765: LD_INT 4
37767: PUSH
37768: FOR_TO
37769: IFFALSE 37790
// SetSkill ( i , j , 10 ) ;
37771: LD_VAR 0 2
37775: PPUSH
37776: LD_VAR 0 3
37780: PPUSH
37781: LD_INT 10
37783: PPUSH
37784: CALL_OW 237
37788: GO 37768
37790: POP
37791: POP
// end ;
37792: GO 37752
37794: POP
37795: POP
// end ;
37796: LD_VAR 0 1
37800: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
37801: LD_INT 0
37803: PPUSH
// uc_side := your_side ;
37804: LD_ADDR_OWVAR 20
37808: PUSH
37809: LD_OWVAR 2
37813: ST_TO_ADDR
// uc_nation := nation ;
37814: LD_ADDR_OWVAR 21
37818: PUSH
37819: LD_VAR 0 1
37823: ST_TO_ADDR
// InitHc ;
37824: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
37828: LD_INT 0
37830: PPUSH
37831: LD_VAR 0 2
37835: PPUSH
37836: LD_VAR 0 3
37840: PPUSH
37841: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
37845: LD_VAR 0 4
37849: PPUSH
37850: LD_VAR 0 5
37854: PPUSH
37855: CALL_OW 428
37859: PUSH
37860: LD_INT 0
37862: EQUAL
37863: IFFALSE 37887
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
37865: CALL_OW 44
37869: PPUSH
37870: LD_VAR 0 4
37874: PPUSH
37875: LD_VAR 0 5
37879: PPUSH
37880: LD_INT 1
37882: PPUSH
37883: CALL_OW 48
// end ;
37887: LD_VAR 0 6
37891: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
37892: LD_INT 0
37894: PPUSH
37895: PPUSH
// uc_side := your_side ;
37896: LD_ADDR_OWVAR 20
37900: PUSH
37901: LD_OWVAR 2
37905: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
37906: LD_VAR 0 1
37910: PUSH
37911: LD_INT 1
37913: PUSH
37914: LD_INT 2
37916: PUSH
37917: LD_INT 3
37919: PUSH
37920: LD_INT 4
37922: PUSH
37923: LD_INT 5
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: IN
37933: IFFALSE 37945
// uc_nation := nation_american else
37935: LD_ADDR_OWVAR 21
37939: PUSH
37940: LD_INT 1
37942: ST_TO_ADDR
37943: GO 37988
// if chassis in [ 11 , 12 , 13 , 14 ] then
37945: LD_VAR 0 1
37949: PUSH
37950: LD_INT 11
37952: PUSH
37953: LD_INT 12
37955: PUSH
37956: LD_INT 13
37958: PUSH
37959: LD_INT 14
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: IN
37968: IFFALSE 37980
// uc_nation := nation_arabian else
37970: LD_ADDR_OWVAR 21
37974: PUSH
37975: LD_INT 2
37977: ST_TO_ADDR
37978: GO 37988
// uc_nation := nation_russian ;
37980: LD_ADDR_OWVAR 21
37984: PUSH
37985: LD_INT 3
37987: ST_TO_ADDR
// vc_chassis := chassis ;
37988: LD_ADDR_OWVAR 37
37992: PUSH
37993: LD_VAR 0 1
37997: ST_TO_ADDR
// vc_engine := engine ;
37998: LD_ADDR_OWVAR 39
38002: PUSH
38003: LD_VAR 0 2
38007: ST_TO_ADDR
// vc_control := control ;
38008: LD_ADDR_OWVAR 38
38012: PUSH
38013: LD_VAR 0 3
38017: ST_TO_ADDR
// vc_weapon := weapon ;
38018: LD_ADDR_OWVAR 40
38022: PUSH
38023: LD_VAR 0 4
38027: ST_TO_ADDR
// un := CreateVehicle ;
38028: LD_ADDR_VAR 0 8
38032: PUSH
38033: CALL_OW 45
38037: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
38038: LD_VAR 0 8
38042: PPUSH
38043: LD_INT 0
38045: PPUSH
38046: LD_INT 5
38048: PPUSH
38049: CALL_OW 12
38053: PPUSH
38054: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
38058: LD_VAR 0 8
38062: PPUSH
38063: LD_VAR 0 5
38067: PPUSH
38068: LD_VAR 0 6
38072: PPUSH
38073: LD_INT 1
38075: PPUSH
38076: CALL_OW 48
// end ;
38080: LD_VAR 0 7
38084: RET
// export hInvincible ; every 1 do
38085: GO 38087
38087: DISABLE
// hInvincible := [ ] ;
38088: LD_ADDR_EXP 123
38092: PUSH
38093: EMPTY
38094: ST_TO_ADDR
38095: END
// every 10 do var i ;
38096: GO 38098
38098: DISABLE
38099: LD_INT 0
38101: PPUSH
// begin enable ;
38102: ENABLE
// if not hInvincible then
38103: LD_EXP 123
38107: NOT
38108: IFFALSE 38112
// exit ;
38110: GO 38156
// for i in hInvincible do
38112: LD_ADDR_VAR 0 1
38116: PUSH
38117: LD_EXP 123
38121: PUSH
38122: FOR_IN
38123: IFFALSE 38154
// if GetLives ( i ) < 1000 then
38125: LD_VAR 0 1
38129: PPUSH
38130: CALL_OW 256
38134: PUSH
38135: LD_INT 1000
38137: LESS
38138: IFFALSE 38152
// SetLives ( i , 1000 ) ;
38140: LD_VAR 0 1
38144: PPUSH
38145: LD_INT 1000
38147: PPUSH
38148: CALL_OW 234
38152: GO 38122
38154: POP
38155: POP
// end ;
38156: PPOPN 1
38158: END
// export function hHackInvincible ; var i ; begin
38159: LD_INT 0
38161: PPUSH
38162: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
38163: LD_ADDR_VAR 0 2
38167: PUSH
38168: LD_INT 2
38170: PUSH
38171: LD_INT 21
38173: PUSH
38174: LD_INT 1
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 21
38183: PUSH
38184: LD_INT 2
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: LIST
38195: PPUSH
38196: CALL_OW 69
38200: PUSH
38201: FOR_IN
38202: IFFALSE 38263
// if IsSelected ( i ) then
38204: LD_VAR 0 2
38208: PPUSH
38209: CALL_OW 306
38213: IFFALSE 38261
// begin if i in hInvincible then
38215: LD_VAR 0 2
38219: PUSH
38220: LD_EXP 123
38224: IN
38225: IFFALSE 38245
// hInvincible := hInvincible diff i else
38227: LD_ADDR_EXP 123
38231: PUSH
38232: LD_EXP 123
38236: PUSH
38237: LD_VAR 0 2
38241: DIFF
38242: ST_TO_ADDR
38243: GO 38261
// hInvincible := hInvincible union i ;
38245: LD_ADDR_EXP 123
38249: PUSH
38250: LD_EXP 123
38254: PUSH
38255: LD_VAR 0 2
38259: UNION
38260: ST_TO_ADDR
// end ;
38261: GO 38201
38263: POP
38264: POP
// end ;
38265: LD_VAR 0 1
38269: RET
// export function hHackInvisible ; var i , j ; begin
38270: LD_INT 0
38272: PPUSH
38273: PPUSH
38274: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
38275: LD_ADDR_VAR 0 2
38279: PUSH
38280: LD_INT 21
38282: PUSH
38283: LD_INT 1
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PPUSH
38290: CALL_OW 69
38294: PUSH
38295: FOR_IN
38296: IFFALSE 38320
// if IsSelected ( i ) then
38298: LD_VAR 0 2
38302: PPUSH
38303: CALL_OW 306
38307: IFFALSE 38318
// ComForceInvisible ( i ) ;
38309: LD_VAR 0 2
38313: PPUSH
38314: CALL_OW 496
38318: GO 38295
38320: POP
38321: POP
// end ;
38322: LD_VAR 0 1
38326: RET
// export function hHackChangeYourSide ; begin
38327: LD_INT 0
38329: PPUSH
// if your_side = 8 then
38330: LD_OWVAR 2
38334: PUSH
38335: LD_INT 8
38337: EQUAL
38338: IFFALSE 38350
// your_side := 0 else
38340: LD_ADDR_OWVAR 2
38344: PUSH
38345: LD_INT 0
38347: ST_TO_ADDR
38348: GO 38364
// your_side := your_side + 1 ;
38350: LD_ADDR_OWVAR 2
38354: PUSH
38355: LD_OWVAR 2
38359: PUSH
38360: LD_INT 1
38362: PLUS
38363: ST_TO_ADDR
// end ;
38364: LD_VAR 0 1
38368: RET
// export function hHackChangeUnitSide ; var i , j ; begin
38369: LD_INT 0
38371: PPUSH
38372: PPUSH
38373: PPUSH
// for i in all_units do
38374: LD_ADDR_VAR 0 2
38378: PUSH
38379: LD_OWVAR 3
38383: PUSH
38384: FOR_IN
38385: IFFALSE 38463
// if IsSelected ( i ) then
38387: LD_VAR 0 2
38391: PPUSH
38392: CALL_OW 306
38396: IFFALSE 38461
// begin j := GetSide ( i ) ;
38398: LD_ADDR_VAR 0 3
38402: PUSH
38403: LD_VAR 0 2
38407: PPUSH
38408: CALL_OW 255
38412: ST_TO_ADDR
// if j = 8 then
38413: LD_VAR 0 3
38417: PUSH
38418: LD_INT 8
38420: EQUAL
38421: IFFALSE 38433
// j := 0 else
38423: LD_ADDR_VAR 0 3
38427: PUSH
38428: LD_INT 0
38430: ST_TO_ADDR
38431: GO 38447
// j := j + 1 ;
38433: LD_ADDR_VAR 0 3
38437: PUSH
38438: LD_VAR 0 3
38442: PUSH
38443: LD_INT 1
38445: PLUS
38446: ST_TO_ADDR
// SetSide ( i , j ) ;
38447: LD_VAR 0 2
38451: PPUSH
38452: LD_VAR 0 3
38456: PPUSH
38457: CALL_OW 235
// end ;
38461: GO 38384
38463: POP
38464: POP
// end ;
38465: LD_VAR 0 1
38469: RET
// export function hHackFog ; begin
38470: LD_INT 0
38472: PPUSH
// FogOff ( true ) ;
38473: LD_INT 1
38475: PPUSH
38476: CALL_OW 344
// end ;
38480: LD_VAR 0 1
38484: RET
// export function hHackTeleport ( unit , x , y ) ; begin
38485: LD_INT 0
38487: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
38488: LD_VAR 0 1
38492: PPUSH
38493: LD_VAR 0 2
38497: PPUSH
38498: LD_VAR 0 3
38502: PPUSH
38503: LD_INT 1
38505: PPUSH
38506: LD_INT 1
38508: PPUSH
38509: CALL_OW 483
// CenterOnXY ( x , y ) ;
38513: LD_VAR 0 2
38517: PPUSH
38518: LD_VAR 0 3
38522: PPUSH
38523: CALL_OW 84
// end ;
38527: LD_VAR 0 4
38531: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
38532: LD_INT 0
38534: PPUSH
38535: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
38536: LD_VAR 0 1
38540: NOT
38541: PUSH
38542: LD_VAR 0 2
38546: PPUSH
38547: LD_VAR 0 3
38551: PPUSH
38552: CALL_OW 488
38556: NOT
38557: OR
38558: PUSH
38559: LD_VAR 0 1
38563: PPUSH
38564: CALL_OW 266
38568: PUSH
38569: LD_INT 3
38571: NONEQUAL
38572: PUSH
38573: LD_VAR 0 1
38577: PPUSH
38578: CALL_OW 247
38582: PUSH
38583: LD_INT 1
38585: EQUAL
38586: NOT
38587: AND
38588: OR
38589: IFFALSE 38593
// exit ;
38591: GO 38742
// if GetType ( factory ) = unit_human then
38593: LD_VAR 0 1
38597: PPUSH
38598: CALL_OW 247
38602: PUSH
38603: LD_INT 1
38605: EQUAL
38606: IFFALSE 38623
// factory := IsInUnit ( factory ) ;
38608: LD_ADDR_VAR 0 1
38612: PUSH
38613: LD_VAR 0 1
38617: PPUSH
38618: CALL_OW 310
38622: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
38623: LD_VAR 0 1
38627: PPUSH
38628: CALL_OW 266
38632: PUSH
38633: LD_INT 3
38635: NONEQUAL
38636: IFFALSE 38640
// exit ;
38638: GO 38742
// if HexInfo ( x , y ) = factory then
38640: LD_VAR 0 2
38644: PPUSH
38645: LD_VAR 0 3
38649: PPUSH
38650: CALL_OW 428
38654: PUSH
38655: LD_VAR 0 1
38659: EQUAL
38660: IFFALSE 38687
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
38662: LD_ADDR_EXP 124
38666: PUSH
38667: LD_EXP 124
38671: PPUSH
38672: LD_VAR 0 1
38676: PPUSH
38677: LD_INT 0
38679: PPUSH
38680: CALL_OW 1
38684: ST_TO_ADDR
38685: GO 38738
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
38687: LD_ADDR_EXP 124
38691: PUSH
38692: LD_EXP 124
38696: PPUSH
38697: LD_VAR 0 1
38701: PPUSH
38702: LD_VAR 0 1
38706: PPUSH
38707: CALL_OW 255
38711: PUSH
38712: LD_VAR 0 1
38716: PUSH
38717: LD_VAR 0 2
38721: PUSH
38722: LD_VAR 0 3
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: PPUSH
38733: CALL_OW 1
38737: ST_TO_ADDR
// UpdateFactoryWaypoints ;
38738: CALL 38747 0 0
// end ;
38742: LD_VAR 0 4
38746: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
38747: LD_INT 0
38749: PPUSH
38750: PPUSH
38751: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
38752: LD_STRING resetFactoryWaypoint();
38754: PPUSH
38755: CALL_OW 559
// if factoryWaypoints then
38759: LD_EXP 124
38763: IFFALSE 38889
// begin list := PrepareArray ( factoryWaypoints ) ;
38765: LD_ADDR_VAR 0 3
38769: PUSH
38770: LD_EXP 124
38774: PPUSH
38775: NOP4
38779: ST_TO_ADDR
// for i := 1 to list do
38780: LD_ADDR_VAR 0 2
38784: PUSH
38785: DOUBLE
38786: LD_INT 1
38788: DEC
38789: ST_TO_ADDR
38790: LD_VAR 0 3
38794: PUSH
38795: FOR_TO
38796: IFFALSE 38887
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
38798: LD_STRING setFactoryWaypointXY(
38800: PUSH
38801: LD_VAR 0 3
38805: PUSH
38806: LD_VAR 0 2
38810: ARRAY
38811: PUSH
38812: LD_INT 1
38814: ARRAY
38815: STR
38816: PUSH
38817: LD_STRING ,
38819: STR
38820: PUSH
38821: LD_VAR 0 3
38825: PUSH
38826: LD_VAR 0 2
38830: ARRAY
38831: PUSH
38832: LD_INT 2
38834: ARRAY
38835: STR
38836: PUSH
38837: LD_STRING ,
38839: STR
38840: PUSH
38841: LD_VAR 0 3
38845: PUSH
38846: LD_VAR 0 2
38850: ARRAY
38851: PUSH
38852: LD_INT 3
38854: ARRAY
38855: STR
38856: PUSH
38857: LD_STRING ,
38859: STR
38860: PUSH
38861: LD_VAR 0 3
38865: PUSH
38866: LD_VAR 0 2
38870: ARRAY
38871: PUSH
38872: LD_INT 4
38874: ARRAY
38875: STR
38876: PUSH
38877: LD_STRING )
38879: STR
38880: PPUSH
38881: CALL_OW 559
38885: GO 38795
38887: POP
38888: POP
// end ; end ;
38889: LD_VAR 0 1
38893: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
38894: LD_INT 0
38896: PPUSH
// if HexInfo ( x , y ) = warehouse then
38897: LD_VAR 0 2
38901: PPUSH
38902: LD_VAR 0 3
38906: PPUSH
38907: CALL_OW 428
38911: PUSH
38912: LD_VAR 0 1
38916: EQUAL
38917: IFFALSE 38944
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
38919: LD_ADDR_EXP 125
38923: PUSH
38924: LD_EXP 125
38928: PPUSH
38929: LD_VAR 0 1
38933: PPUSH
38934: LD_INT 0
38936: PPUSH
38937: CALL_OW 1
38941: ST_TO_ADDR
38942: GO 38995
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
38944: LD_ADDR_EXP 125
38948: PUSH
38949: LD_EXP 125
38953: PPUSH
38954: LD_VAR 0 1
38958: PPUSH
38959: LD_VAR 0 1
38963: PPUSH
38964: CALL_OW 255
38968: PUSH
38969: LD_VAR 0 1
38973: PUSH
38974: LD_VAR 0 2
38978: PUSH
38979: LD_VAR 0 3
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: PPUSH
38990: CALL_OW 1
38994: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
38995: CALL 39004 0 0
// end ;
38999: LD_VAR 0 4
39003: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
39004: LD_INT 0
39006: PPUSH
39007: PPUSH
39008: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
39009: LD_STRING resetWarehouseGatheringPoints();
39011: PPUSH
39012: CALL_OW 559
// if warehouseGatheringPoints then
39016: LD_EXP 125
39020: IFFALSE 39146
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
39022: LD_ADDR_VAR 0 3
39026: PUSH
39027: LD_EXP 125
39031: PPUSH
39032: NOP4
39036: ST_TO_ADDR
// for i := 1 to list do
39037: LD_ADDR_VAR 0 2
39041: PUSH
39042: DOUBLE
39043: LD_INT 1
39045: DEC
39046: ST_TO_ADDR
39047: LD_VAR 0 3
39051: PUSH
39052: FOR_TO
39053: IFFALSE 39144
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
39055: LD_STRING setWarehouseGatheringPointXY(
39057: PUSH
39058: LD_VAR 0 3
39062: PUSH
39063: LD_VAR 0 2
39067: ARRAY
39068: PUSH
39069: LD_INT 1
39071: ARRAY
39072: STR
39073: PUSH
39074: LD_STRING ,
39076: STR
39077: PUSH
39078: LD_VAR 0 3
39082: PUSH
39083: LD_VAR 0 2
39087: ARRAY
39088: PUSH
39089: LD_INT 2
39091: ARRAY
39092: STR
39093: PUSH
39094: LD_STRING ,
39096: STR
39097: PUSH
39098: LD_VAR 0 3
39102: PUSH
39103: LD_VAR 0 2
39107: ARRAY
39108: PUSH
39109: LD_INT 3
39111: ARRAY
39112: STR
39113: PUSH
39114: LD_STRING ,
39116: STR
39117: PUSH
39118: LD_VAR 0 3
39122: PUSH
39123: LD_VAR 0 2
39127: ARRAY
39128: PUSH
39129: LD_INT 4
39131: ARRAY
39132: STR
39133: PUSH
39134: LD_STRING )
39136: STR
39137: PPUSH
39138: CALL_OW 559
39142: GO 39052
39144: POP
39145: POP
// end ; end ;
39146: LD_VAR 0 1
39150: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
39151: LD_EXP 125
39155: IFFALSE 39840
39157: GO 39159
39159: DISABLE
39160: LD_INT 0
39162: PPUSH
39163: PPUSH
39164: PPUSH
39165: PPUSH
39166: PPUSH
39167: PPUSH
39168: PPUSH
39169: PPUSH
39170: PPUSH
// begin enable ;
39171: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
39172: LD_ADDR_VAR 0 3
39176: PUSH
39177: LD_EXP 125
39181: PPUSH
39182: NOP4
39186: ST_TO_ADDR
// if not list then
39187: LD_VAR 0 3
39191: NOT
39192: IFFALSE 39196
// exit ;
39194: GO 39840
// for i := 1 to list do
39196: LD_ADDR_VAR 0 1
39200: PUSH
39201: DOUBLE
39202: LD_INT 1
39204: DEC
39205: ST_TO_ADDR
39206: LD_VAR 0 3
39210: PUSH
39211: FOR_TO
39212: IFFALSE 39838
// begin depot := list [ i ] [ 2 ] ;
39214: LD_ADDR_VAR 0 8
39218: PUSH
39219: LD_VAR 0 3
39223: PUSH
39224: LD_VAR 0 1
39228: ARRAY
39229: PUSH
39230: LD_INT 2
39232: ARRAY
39233: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
39234: LD_ADDR_VAR 0 5
39238: PUSH
39239: LD_VAR 0 3
39243: PUSH
39244: LD_VAR 0 1
39248: ARRAY
39249: PUSH
39250: LD_INT 1
39252: ARRAY
39253: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
39254: LD_VAR 0 8
39258: PPUSH
39259: CALL_OW 301
39263: PUSH
39264: LD_VAR 0 5
39268: PUSH
39269: LD_VAR 0 8
39273: PPUSH
39274: CALL_OW 255
39278: NONEQUAL
39279: OR
39280: IFFALSE 39309
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
39282: LD_ADDR_EXP 125
39286: PUSH
39287: LD_EXP 125
39291: PPUSH
39292: LD_VAR 0 8
39296: PPUSH
39297: LD_INT 0
39299: PPUSH
39300: CALL_OW 1
39304: ST_TO_ADDR
// exit ;
39305: POP
39306: POP
39307: GO 39840
// end ; x := list [ i ] [ 3 ] ;
39309: LD_ADDR_VAR 0 6
39313: PUSH
39314: LD_VAR 0 3
39318: PUSH
39319: LD_VAR 0 1
39323: ARRAY
39324: PUSH
39325: LD_INT 3
39327: ARRAY
39328: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
39329: LD_ADDR_VAR 0 7
39333: PUSH
39334: LD_VAR 0 3
39338: PUSH
39339: LD_VAR 0 1
39343: ARRAY
39344: PUSH
39345: LD_INT 4
39347: ARRAY
39348: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
39349: LD_ADDR_VAR 0 9
39353: PUSH
39354: LD_VAR 0 6
39358: PPUSH
39359: LD_VAR 0 7
39363: PPUSH
39364: LD_INT 16
39366: PPUSH
39367: CALL 83799 0 3
39371: ST_TO_ADDR
// if not cratesNearbyPoint then
39372: LD_VAR 0 9
39376: NOT
39377: IFFALSE 39383
// exit ;
39379: POP
39380: POP
39381: GO 39840
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
39383: LD_ADDR_VAR 0 4
39387: PUSH
39388: LD_INT 22
39390: PUSH
39391: LD_VAR 0 5
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 3
39402: PUSH
39403: LD_INT 60
39405: PUSH
39406: EMPTY
39407: LIST
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 91
39415: PUSH
39416: LD_VAR 0 8
39420: PUSH
39421: LD_INT 6
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 2
39431: PUSH
39432: LD_INT 25
39434: PUSH
39435: LD_INT 2
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 25
39444: PUSH
39445: LD_INT 16
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: LIST
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: PPUSH
39463: CALL_OW 69
39467: PUSH
39468: LD_VAR 0 8
39472: PPUSH
39473: CALL_OW 313
39477: PPUSH
39478: LD_INT 3
39480: PUSH
39481: LD_INT 60
39483: PUSH
39484: EMPTY
39485: LIST
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 2
39493: PUSH
39494: LD_INT 25
39496: PUSH
39497: LD_INT 2
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 25
39506: PUSH
39507: LD_INT 16
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: LIST
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PPUSH
39523: CALL_OW 72
39527: UNION
39528: ST_TO_ADDR
// if tmp then
39529: LD_VAR 0 4
39533: IFFALSE 39613
// begin tmp := ShrinkArray ( tmp , 3 ) ;
39535: LD_ADDR_VAR 0 4
39539: PUSH
39540: LD_VAR 0 4
39544: PPUSH
39545: LD_INT 3
39547: PPUSH
39548: CALL 81768 0 2
39552: ST_TO_ADDR
// for j in tmp do
39553: LD_ADDR_VAR 0 2
39557: PUSH
39558: LD_VAR 0 4
39562: PUSH
39563: FOR_IN
39564: IFFALSE 39607
// begin if IsInUnit ( j ) then
39566: LD_VAR 0 2
39570: PPUSH
39571: CALL_OW 310
39575: IFFALSE 39586
// ComExit ( j ) ;
39577: LD_VAR 0 2
39581: PPUSH
39582: CALL 81851 0 1
// AddComCollect ( j , x , y ) ;
39586: LD_VAR 0 2
39590: PPUSH
39591: LD_VAR 0 6
39595: PPUSH
39596: LD_VAR 0 7
39600: PPUSH
39601: CALL_OW 177
// end ;
39605: GO 39563
39607: POP
39608: POP
// exit ;
39609: POP
39610: POP
39611: GO 39840
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
39613: LD_ADDR_VAR 0 4
39617: PUSH
39618: LD_INT 22
39620: PUSH
39621: LD_VAR 0 5
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 91
39632: PUSH
39633: LD_VAR 0 8
39637: PUSH
39638: LD_INT 8
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 2
39648: PUSH
39649: LD_INT 34
39651: PUSH
39652: LD_INT 12
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 34
39661: PUSH
39662: LD_INT 51
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 34
39671: PUSH
39672: LD_INT 32
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 34
39681: PUSH
39682: LD_INT 89
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: LIST
39700: PPUSH
39701: CALL_OW 69
39705: ST_TO_ADDR
// if tmp then
39706: LD_VAR 0 4
39710: IFFALSE 39836
// begin for j in tmp do
39712: LD_ADDR_VAR 0 2
39716: PUSH
39717: LD_VAR 0 4
39721: PUSH
39722: FOR_IN
39723: IFFALSE 39834
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
39725: LD_VAR 0 2
39729: PPUSH
39730: CALL_OW 262
39734: PUSH
39735: LD_INT 3
39737: EQUAL
39738: PUSH
39739: LD_VAR 0 2
39743: PPUSH
39744: CALL_OW 261
39748: PUSH
39749: LD_INT 20
39751: GREATER
39752: OR
39753: PUSH
39754: LD_VAR 0 2
39758: PPUSH
39759: CALL_OW 314
39763: NOT
39764: AND
39765: PUSH
39766: LD_VAR 0 2
39770: PPUSH
39771: CALL_OW 263
39775: PUSH
39776: LD_INT 1
39778: NONEQUAL
39779: PUSH
39780: LD_VAR 0 2
39784: PPUSH
39785: CALL_OW 311
39789: OR
39790: AND
39791: IFFALSE 39832
// begin ComCollect ( j , x , y ) ;
39793: LD_VAR 0 2
39797: PPUSH
39798: LD_VAR 0 6
39802: PPUSH
39803: LD_VAR 0 7
39807: PPUSH
39808: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
39812: LD_VAR 0 2
39816: PPUSH
39817: LD_VAR 0 8
39821: PPUSH
39822: CALL_OW 172
// exit ;
39826: POP
39827: POP
39828: POP
39829: POP
39830: GO 39840
// end ;
39832: GO 39722
39834: POP
39835: POP
// end ; end ;
39836: GO 39211
39838: POP
39839: POP
// end ; end_of_file
39840: PPOPN 9
39842: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
39843: LD_INT 0
39845: PPUSH
39846: PPUSH
39847: PPUSH
39848: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
39849: LD_VAR 0 1
39853: PPUSH
39854: CALL_OW 264
39858: PUSH
39859: LD_INT 91
39861: EQUAL
39862: IFFALSE 39934
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
39864: LD_INT 68
39866: PPUSH
39867: LD_VAR 0 1
39871: PPUSH
39872: CALL_OW 255
39876: PPUSH
39877: CALL_OW 321
39881: PUSH
39882: LD_INT 2
39884: EQUAL
39885: IFFALSE 39897
// eff := 70 else
39887: LD_ADDR_VAR 0 4
39891: PUSH
39892: LD_INT 70
39894: ST_TO_ADDR
39895: GO 39905
// eff := 30 ;
39897: LD_ADDR_VAR 0 4
39901: PUSH
39902: LD_INT 30
39904: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
39905: LD_VAR 0 1
39909: PPUSH
39910: CALL_OW 250
39914: PPUSH
39915: LD_VAR 0 1
39919: PPUSH
39920: CALL_OW 251
39924: PPUSH
39925: LD_VAR 0 4
39929: PPUSH
39930: CALL_OW 495
// end ; end ;
39934: LD_VAR 0 2
39938: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
39939: LD_INT 0
39941: PPUSH
// end ;
39942: LD_VAR 0 4
39946: RET
// export function SOS_Command ( cmd ) ; begin
39947: LD_INT 0
39949: PPUSH
// end ;
39950: LD_VAR 0 2
39954: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
39955: LD_INT 0
39957: PPUSH
// end ;
39958: LD_VAR 0 6
39962: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
39963: LD_INT 0
39965: PPUSH
39966: PPUSH
// if not vehicle or not factory then
39967: LD_VAR 0 1
39971: NOT
39972: PUSH
39973: LD_VAR 0 2
39977: NOT
39978: OR
39979: IFFALSE 39983
// exit ;
39981: GO 40214
// if factoryWaypoints >= factory then
39983: LD_EXP 124
39987: PUSH
39988: LD_VAR 0 2
39992: GREATEREQUAL
39993: IFFALSE 40214
// if factoryWaypoints [ factory ] then
39995: LD_EXP 124
39999: PUSH
40000: LD_VAR 0 2
40004: ARRAY
40005: IFFALSE 40214
// begin if GetControl ( vehicle ) = control_manual then
40007: LD_VAR 0 1
40011: PPUSH
40012: CALL_OW 263
40016: PUSH
40017: LD_INT 1
40019: EQUAL
40020: IFFALSE 40101
// begin driver := IsDrivenBy ( vehicle ) ;
40022: LD_ADDR_VAR 0 4
40026: PUSH
40027: LD_VAR 0 1
40031: PPUSH
40032: CALL_OW 311
40036: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
40037: LD_VAR 0 4
40041: PPUSH
40042: LD_EXP 124
40046: PUSH
40047: LD_VAR 0 2
40051: ARRAY
40052: PUSH
40053: LD_INT 3
40055: ARRAY
40056: PPUSH
40057: LD_EXP 124
40061: PUSH
40062: LD_VAR 0 2
40066: ARRAY
40067: PUSH
40068: LD_INT 4
40070: ARRAY
40071: PPUSH
40072: CALL_OW 171
// AddComExitVehicle ( driver ) ;
40076: LD_VAR 0 4
40080: PPUSH
40081: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
40085: LD_VAR 0 4
40089: PPUSH
40090: LD_VAR 0 2
40094: PPUSH
40095: CALL_OW 180
// end else
40099: GO 40214
// if GetControl ( vehicle ) = control_remote then
40101: LD_VAR 0 1
40105: PPUSH
40106: CALL_OW 263
40110: PUSH
40111: LD_INT 2
40113: EQUAL
40114: IFFALSE 40175
// begin wait ( 0 0$2 ) ;
40116: LD_INT 70
40118: PPUSH
40119: CALL_OW 67
// if Connect ( vehicle ) then
40123: LD_VAR 0 1
40127: PPUSH
40128: CALL 52072 0 1
40132: IFFALSE 40173
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
40134: LD_VAR 0 1
40138: PPUSH
40139: LD_EXP 124
40143: PUSH
40144: LD_VAR 0 2
40148: ARRAY
40149: PUSH
40150: LD_INT 3
40152: ARRAY
40153: PPUSH
40154: LD_EXP 124
40158: PUSH
40159: LD_VAR 0 2
40163: ARRAY
40164: PUSH
40165: LD_INT 4
40167: ARRAY
40168: PPUSH
40169: CALL_OW 171
// end else
40173: GO 40214
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
40175: LD_VAR 0 1
40179: PPUSH
40180: LD_EXP 124
40184: PUSH
40185: LD_VAR 0 2
40189: ARRAY
40190: PUSH
40191: LD_INT 3
40193: ARRAY
40194: PPUSH
40195: LD_EXP 124
40199: PUSH
40200: LD_VAR 0 2
40204: ARRAY
40205: PUSH
40206: LD_INT 4
40208: ARRAY
40209: PPUSH
40210: CALL_OW 171
// end ; end ;
40214: LD_VAR 0 3
40218: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
40219: LD_INT 0
40221: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
40222: LD_VAR 0 1
40226: PUSH
40227: LD_INT 250
40229: EQUAL
40230: PUSH
40231: LD_VAR 0 2
40235: PPUSH
40236: CALL_OW 264
40240: PUSH
40241: LD_INT 81
40243: EQUAL
40244: AND
40245: IFFALSE 40266
// MinerPlaceMine ( unit , x , y ) ;
40247: LD_VAR 0 2
40251: PPUSH
40252: LD_VAR 0 4
40256: PPUSH
40257: LD_VAR 0 5
40261: PPUSH
40262: CALL 42651 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
40266: LD_VAR 0 1
40270: PUSH
40271: LD_INT 251
40273: EQUAL
40274: PUSH
40275: LD_VAR 0 2
40279: PPUSH
40280: CALL_OW 264
40284: PUSH
40285: LD_INT 81
40287: EQUAL
40288: AND
40289: IFFALSE 40310
// MinerDetonateMine ( unit , x , y ) ;
40291: LD_VAR 0 2
40295: PPUSH
40296: LD_VAR 0 4
40300: PPUSH
40301: LD_VAR 0 5
40305: PPUSH
40306: CALL 42926 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
40310: LD_VAR 0 1
40314: PUSH
40315: LD_INT 252
40317: EQUAL
40318: PUSH
40319: LD_VAR 0 2
40323: PPUSH
40324: CALL_OW 264
40328: PUSH
40329: LD_INT 81
40331: EQUAL
40332: AND
40333: IFFALSE 40354
// MinerCreateMinefield ( unit , x , y ) ;
40335: LD_VAR 0 2
40339: PPUSH
40340: LD_VAR 0 4
40344: PPUSH
40345: LD_VAR 0 5
40349: PPUSH
40350: CALL 43343 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
40354: LD_VAR 0 1
40358: PUSH
40359: LD_INT 253
40361: EQUAL
40362: PUSH
40363: LD_VAR 0 2
40367: PPUSH
40368: CALL_OW 257
40372: PUSH
40373: LD_INT 5
40375: EQUAL
40376: AND
40377: IFFALSE 40398
// ComBinocular ( unit , x , y ) ;
40379: LD_VAR 0 2
40383: PPUSH
40384: LD_VAR 0 4
40388: PPUSH
40389: LD_VAR 0 5
40393: PPUSH
40394: CALL 43712 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
40398: LD_VAR 0 1
40402: PUSH
40403: LD_INT 254
40405: EQUAL
40406: PUSH
40407: LD_VAR 0 2
40411: PPUSH
40412: CALL_OW 264
40416: PUSH
40417: LD_INT 99
40419: EQUAL
40420: AND
40421: PUSH
40422: LD_VAR 0 3
40426: PPUSH
40427: CALL_OW 263
40431: PUSH
40432: LD_INT 3
40434: EQUAL
40435: AND
40436: IFFALSE 40452
// HackDestroyVehicle ( unit , selectedUnit ) ;
40438: LD_VAR 0 2
40442: PPUSH
40443: LD_VAR 0 3
40447: PPUSH
40448: CALL 42015 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
40452: LD_VAR 0 1
40456: PUSH
40457: LD_INT 255
40459: EQUAL
40460: PUSH
40461: LD_VAR 0 2
40465: PPUSH
40466: CALL_OW 264
40470: PUSH
40471: LD_INT 14
40473: PUSH
40474: LD_INT 53
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: IN
40481: AND
40482: PUSH
40483: LD_VAR 0 4
40487: PPUSH
40488: LD_VAR 0 5
40492: PPUSH
40493: CALL_OW 488
40497: AND
40498: IFFALSE 40522
// CutTreeXYR ( unit , x , y , 12 ) ;
40500: LD_VAR 0 2
40504: PPUSH
40505: LD_VAR 0 4
40509: PPUSH
40510: LD_VAR 0 5
40514: PPUSH
40515: LD_INT 12
40517: PPUSH
40518: CALL 40585 0 4
// if cmd = 256 then
40522: LD_VAR 0 1
40526: PUSH
40527: LD_INT 256
40529: EQUAL
40530: IFFALSE 40551
// SetFactoryWaypoint ( unit , x , y ) ;
40532: LD_VAR 0 2
40536: PPUSH
40537: LD_VAR 0 4
40541: PPUSH
40542: LD_VAR 0 5
40546: PPUSH
40547: CALL 38532 0 3
// if cmd = 257 then
40551: LD_VAR 0 1
40555: PUSH
40556: LD_INT 257
40558: EQUAL
40559: IFFALSE 40580
// SetWarehouseGatheringPoint ( unit , x , y ) ;
40561: LD_VAR 0 2
40565: PPUSH
40566: LD_VAR 0 4
40570: PPUSH
40571: LD_VAR 0 5
40575: PPUSH
40576: CALL 38894 0 3
// end ;
40580: LD_VAR 0 6
40584: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
40585: LD_INT 0
40587: PPUSH
40588: PPUSH
40589: PPUSH
40590: PPUSH
40591: PPUSH
40592: PPUSH
40593: PPUSH
40594: PPUSH
40595: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
40596: LD_VAR 0 1
40600: NOT
40601: PUSH
40602: LD_VAR 0 2
40606: PPUSH
40607: LD_VAR 0 3
40611: PPUSH
40612: CALL_OW 488
40616: NOT
40617: OR
40618: PUSH
40619: LD_VAR 0 4
40623: NOT
40624: OR
40625: IFFALSE 40629
// exit ;
40627: GO 40969
// list := [ ] ;
40629: LD_ADDR_VAR 0 13
40633: PUSH
40634: EMPTY
40635: ST_TO_ADDR
// if x - r < 0 then
40636: LD_VAR 0 2
40640: PUSH
40641: LD_VAR 0 4
40645: MINUS
40646: PUSH
40647: LD_INT 0
40649: LESS
40650: IFFALSE 40662
// min_x := 0 else
40652: LD_ADDR_VAR 0 7
40656: PUSH
40657: LD_INT 0
40659: ST_TO_ADDR
40660: GO 40678
// min_x := x - r ;
40662: LD_ADDR_VAR 0 7
40666: PUSH
40667: LD_VAR 0 2
40671: PUSH
40672: LD_VAR 0 4
40676: MINUS
40677: ST_TO_ADDR
// if y - r < 0 then
40678: LD_VAR 0 3
40682: PUSH
40683: LD_VAR 0 4
40687: MINUS
40688: PUSH
40689: LD_INT 0
40691: LESS
40692: IFFALSE 40704
// min_y := 0 else
40694: LD_ADDR_VAR 0 8
40698: PUSH
40699: LD_INT 0
40701: ST_TO_ADDR
40702: GO 40720
// min_y := y - r ;
40704: LD_ADDR_VAR 0 8
40708: PUSH
40709: LD_VAR 0 3
40713: PUSH
40714: LD_VAR 0 4
40718: MINUS
40719: ST_TO_ADDR
// max_x := x + r ;
40720: LD_ADDR_VAR 0 9
40724: PUSH
40725: LD_VAR 0 2
40729: PUSH
40730: LD_VAR 0 4
40734: PLUS
40735: ST_TO_ADDR
// max_y := y + r ;
40736: LD_ADDR_VAR 0 10
40740: PUSH
40741: LD_VAR 0 3
40745: PUSH
40746: LD_VAR 0 4
40750: PLUS
40751: ST_TO_ADDR
// for _x = min_x to max_x do
40752: LD_ADDR_VAR 0 11
40756: PUSH
40757: DOUBLE
40758: LD_VAR 0 7
40762: DEC
40763: ST_TO_ADDR
40764: LD_VAR 0 9
40768: PUSH
40769: FOR_TO
40770: IFFALSE 40887
// for _y = min_y to max_y do
40772: LD_ADDR_VAR 0 12
40776: PUSH
40777: DOUBLE
40778: LD_VAR 0 8
40782: DEC
40783: ST_TO_ADDR
40784: LD_VAR 0 10
40788: PUSH
40789: FOR_TO
40790: IFFALSE 40883
// begin if not ValidHex ( _x , _y ) then
40792: LD_VAR 0 11
40796: PPUSH
40797: LD_VAR 0 12
40801: PPUSH
40802: CALL_OW 488
40806: NOT
40807: IFFALSE 40811
// continue ;
40809: GO 40789
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
40811: LD_VAR 0 11
40815: PPUSH
40816: LD_VAR 0 12
40820: PPUSH
40821: CALL_OW 351
40825: PUSH
40826: LD_VAR 0 11
40830: PPUSH
40831: LD_VAR 0 12
40835: PPUSH
40836: CALL_OW 554
40840: AND
40841: IFFALSE 40881
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
40843: LD_ADDR_VAR 0 13
40847: PUSH
40848: LD_VAR 0 13
40852: PPUSH
40853: LD_VAR 0 13
40857: PUSH
40858: LD_INT 1
40860: PLUS
40861: PPUSH
40862: LD_VAR 0 11
40866: PUSH
40867: LD_VAR 0 12
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PPUSH
40876: CALL_OW 2
40880: ST_TO_ADDR
// end ;
40881: GO 40789
40883: POP
40884: POP
40885: GO 40769
40887: POP
40888: POP
// if not list then
40889: LD_VAR 0 13
40893: NOT
40894: IFFALSE 40898
// exit ;
40896: GO 40969
// for i in list do
40898: LD_ADDR_VAR 0 6
40902: PUSH
40903: LD_VAR 0 13
40907: PUSH
40908: FOR_IN
40909: IFFALSE 40967
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
40911: LD_VAR 0 1
40915: PPUSH
40916: LD_STRING M
40918: PUSH
40919: LD_VAR 0 6
40923: PUSH
40924: LD_INT 1
40926: ARRAY
40927: PUSH
40928: LD_VAR 0 6
40932: PUSH
40933: LD_INT 2
40935: ARRAY
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: LD_INT 0
40942: PUSH
40943: LD_INT 0
40945: PUSH
40946: LD_INT 0
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: PUSH
40958: EMPTY
40959: LIST
40960: PPUSH
40961: CALL_OW 447
40965: GO 40908
40967: POP
40968: POP
// end ;
40969: LD_VAR 0 5
40973: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
40974: LD_EXP 127
40978: NOT
40979: IFFALSE 41029
40981: GO 40983
40983: DISABLE
// begin initHack := true ;
40984: LD_ADDR_EXP 127
40988: PUSH
40989: LD_INT 1
40991: ST_TO_ADDR
// hackTanks := [ ] ;
40992: LD_ADDR_EXP 128
40996: PUSH
40997: EMPTY
40998: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
40999: LD_ADDR_EXP 129
41003: PUSH
41004: EMPTY
41005: ST_TO_ADDR
// hackLimit := 3 ;
41006: LD_ADDR_EXP 130
41010: PUSH
41011: LD_INT 3
41013: ST_TO_ADDR
// hackDist := 12 ;
41014: LD_ADDR_EXP 131
41018: PUSH
41019: LD_INT 12
41021: ST_TO_ADDR
// hackCounter := [ ] ;
41022: LD_ADDR_EXP 132
41026: PUSH
41027: EMPTY
41028: ST_TO_ADDR
// end ;
41029: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
41030: LD_EXP 127
41034: PUSH
41035: LD_INT 34
41037: PUSH
41038: LD_INT 99
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PPUSH
41045: CALL_OW 69
41049: AND
41050: IFFALSE 41303
41052: GO 41054
41054: DISABLE
41055: LD_INT 0
41057: PPUSH
41058: PPUSH
// begin enable ;
41059: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
41060: LD_ADDR_VAR 0 1
41064: PUSH
41065: LD_INT 34
41067: PUSH
41068: LD_INT 99
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PPUSH
41075: CALL_OW 69
41079: PUSH
41080: FOR_IN
41081: IFFALSE 41301
// begin if not i in hackTanks then
41083: LD_VAR 0 1
41087: PUSH
41088: LD_EXP 128
41092: IN
41093: NOT
41094: IFFALSE 41177
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
41096: LD_ADDR_EXP 128
41100: PUSH
41101: LD_EXP 128
41105: PPUSH
41106: LD_EXP 128
41110: PUSH
41111: LD_INT 1
41113: PLUS
41114: PPUSH
41115: LD_VAR 0 1
41119: PPUSH
41120: CALL_OW 1
41124: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
41125: LD_ADDR_EXP 129
41129: PUSH
41130: LD_EXP 129
41134: PPUSH
41135: LD_EXP 129
41139: PUSH
41140: LD_INT 1
41142: PLUS
41143: PPUSH
41144: EMPTY
41145: PPUSH
41146: CALL_OW 1
41150: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
41151: LD_ADDR_EXP 132
41155: PUSH
41156: LD_EXP 132
41160: PPUSH
41161: LD_EXP 132
41165: PUSH
41166: LD_INT 1
41168: PLUS
41169: PPUSH
41170: EMPTY
41171: PPUSH
41172: CALL_OW 1
41176: ST_TO_ADDR
// end ; if not IsOk ( i ) then
41177: LD_VAR 0 1
41181: PPUSH
41182: CALL_OW 302
41186: NOT
41187: IFFALSE 41200
// begin HackUnlinkAll ( i ) ;
41189: LD_VAR 0 1
41193: PPUSH
41194: CALL 41306 0 1
// continue ;
41198: GO 41080
// end ; HackCheckCapturedStatus ( i ) ;
41200: LD_VAR 0 1
41204: PPUSH
41205: CALL 41749 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
41209: LD_ADDR_VAR 0 2
41213: PUSH
41214: LD_INT 81
41216: PUSH
41217: LD_VAR 0 1
41221: PPUSH
41222: CALL_OW 255
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 33
41233: PUSH
41234: LD_INT 3
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 91
41243: PUSH
41244: LD_VAR 0 1
41248: PUSH
41249: LD_EXP 131
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 50
41261: PUSH
41262: EMPTY
41263: LIST
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: PPUSH
41271: CALL_OW 69
41275: ST_TO_ADDR
// if not tmp then
41276: LD_VAR 0 2
41280: NOT
41281: IFFALSE 41285
// continue ;
41283: GO 41080
// HackLink ( i , tmp ) ;
41285: LD_VAR 0 1
41289: PPUSH
41290: LD_VAR 0 2
41294: PPUSH
41295: CALL 41442 0 2
// end ;
41299: GO 41080
41301: POP
41302: POP
// end ;
41303: PPOPN 2
41305: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
41306: LD_INT 0
41308: PPUSH
41309: PPUSH
41310: PPUSH
// if not hack in hackTanks then
41311: LD_VAR 0 1
41315: PUSH
41316: LD_EXP 128
41320: IN
41321: NOT
41322: IFFALSE 41326
// exit ;
41324: GO 41437
// index := GetElementIndex ( hackTanks , hack ) ;
41326: LD_ADDR_VAR 0 4
41330: PUSH
41331: LD_EXP 128
41335: PPUSH
41336: LD_VAR 0 1
41340: PPUSH
41341: CALL 48879 0 2
41345: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
41346: LD_EXP 129
41350: PUSH
41351: LD_VAR 0 4
41355: ARRAY
41356: IFFALSE 41437
// begin for i in hackTanksCaptured [ index ] do
41358: LD_ADDR_VAR 0 3
41362: PUSH
41363: LD_EXP 129
41367: PUSH
41368: LD_VAR 0 4
41372: ARRAY
41373: PUSH
41374: FOR_IN
41375: IFFALSE 41401
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
41377: LD_VAR 0 3
41381: PUSH
41382: LD_INT 1
41384: ARRAY
41385: PPUSH
41386: LD_VAR 0 3
41390: PUSH
41391: LD_INT 2
41393: ARRAY
41394: PPUSH
41395: CALL_OW 235
41399: GO 41374
41401: POP
41402: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
41403: LD_ADDR_EXP 129
41407: PUSH
41408: LD_EXP 129
41412: PPUSH
41413: LD_VAR 0 4
41417: PPUSH
41418: EMPTY
41419: PPUSH
41420: CALL_OW 1
41424: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
41425: LD_VAR 0 1
41429: PPUSH
41430: LD_INT 0
41432: PPUSH
41433: CALL_OW 505
// end ; end ;
41437: LD_VAR 0 2
41441: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
41442: LD_INT 0
41444: PPUSH
41445: PPUSH
41446: PPUSH
// if not hack in hackTanks or not vehicles then
41447: LD_VAR 0 1
41451: PUSH
41452: LD_EXP 128
41456: IN
41457: NOT
41458: PUSH
41459: LD_VAR 0 2
41463: NOT
41464: OR
41465: IFFALSE 41469
// exit ;
41467: GO 41744
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
41469: LD_ADDR_VAR 0 2
41473: PUSH
41474: LD_VAR 0 1
41478: PPUSH
41479: LD_VAR 0 2
41483: PPUSH
41484: LD_INT 1
41486: PPUSH
41487: LD_INT 1
41489: PPUSH
41490: CALL 49529 0 4
41494: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
41495: LD_ADDR_VAR 0 5
41499: PUSH
41500: LD_EXP 128
41504: PPUSH
41505: LD_VAR 0 1
41509: PPUSH
41510: CALL 48879 0 2
41514: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
41515: LD_EXP 129
41519: PUSH
41520: LD_VAR 0 5
41524: ARRAY
41525: PUSH
41526: LD_EXP 130
41530: LESS
41531: IFFALSE 41720
// begin for i := 1 to vehicles do
41533: LD_ADDR_VAR 0 4
41537: PUSH
41538: DOUBLE
41539: LD_INT 1
41541: DEC
41542: ST_TO_ADDR
41543: LD_VAR 0 2
41547: PUSH
41548: FOR_TO
41549: IFFALSE 41718
// begin if hackTanksCaptured [ index ] = hackLimit then
41551: LD_EXP 129
41555: PUSH
41556: LD_VAR 0 5
41560: ARRAY
41561: PUSH
41562: LD_EXP 130
41566: EQUAL
41567: IFFALSE 41571
// break ;
41569: GO 41718
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
41571: LD_ADDR_EXP 132
41575: PUSH
41576: LD_EXP 132
41580: PPUSH
41581: LD_VAR 0 5
41585: PPUSH
41586: LD_EXP 132
41590: PUSH
41591: LD_VAR 0 5
41595: ARRAY
41596: PUSH
41597: LD_INT 1
41599: PLUS
41600: PPUSH
41601: CALL_OW 1
41605: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
41606: LD_ADDR_EXP 129
41610: PUSH
41611: LD_EXP 129
41615: PPUSH
41616: LD_VAR 0 5
41620: PUSH
41621: LD_EXP 129
41625: PUSH
41626: LD_VAR 0 5
41630: ARRAY
41631: PUSH
41632: LD_INT 1
41634: PLUS
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PPUSH
41640: LD_VAR 0 2
41644: PUSH
41645: LD_VAR 0 4
41649: ARRAY
41650: PUSH
41651: LD_VAR 0 2
41655: PUSH
41656: LD_VAR 0 4
41660: ARRAY
41661: PPUSH
41662: CALL_OW 255
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PPUSH
41671: CALL 49094 0 3
41675: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
41676: LD_VAR 0 2
41680: PUSH
41681: LD_VAR 0 4
41685: ARRAY
41686: PPUSH
41687: LD_VAR 0 1
41691: PPUSH
41692: CALL_OW 255
41696: PPUSH
41697: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
41701: LD_VAR 0 2
41705: PUSH
41706: LD_VAR 0 4
41710: ARRAY
41711: PPUSH
41712: CALL_OW 141
// end ;
41716: GO 41548
41718: POP
41719: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
41720: LD_VAR 0 1
41724: PPUSH
41725: LD_EXP 129
41729: PUSH
41730: LD_VAR 0 5
41734: ARRAY
41735: PUSH
41736: LD_INT 0
41738: PLUS
41739: PPUSH
41740: CALL_OW 505
// end ;
41744: LD_VAR 0 3
41748: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
41749: LD_INT 0
41751: PPUSH
41752: PPUSH
41753: PPUSH
41754: PPUSH
// if not hack in hackTanks then
41755: LD_VAR 0 1
41759: PUSH
41760: LD_EXP 128
41764: IN
41765: NOT
41766: IFFALSE 41770
// exit ;
41768: GO 42010
// index := GetElementIndex ( hackTanks , hack ) ;
41770: LD_ADDR_VAR 0 4
41774: PUSH
41775: LD_EXP 128
41779: PPUSH
41780: LD_VAR 0 1
41784: PPUSH
41785: CALL 48879 0 2
41789: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
41790: LD_ADDR_VAR 0 3
41794: PUSH
41795: DOUBLE
41796: LD_EXP 129
41800: PUSH
41801: LD_VAR 0 4
41805: ARRAY
41806: INC
41807: ST_TO_ADDR
41808: LD_INT 1
41810: PUSH
41811: FOR_DOWNTO
41812: IFFALSE 41984
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
41814: LD_ADDR_VAR 0 5
41818: PUSH
41819: LD_EXP 129
41823: PUSH
41824: LD_VAR 0 4
41828: ARRAY
41829: PUSH
41830: LD_VAR 0 3
41834: ARRAY
41835: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
41836: LD_VAR 0 5
41840: PUSH
41841: LD_INT 1
41843: ARRAY
41844: PPUSH
41845: CALL_OW 302
41849: NOT
41850: PUSH
41851: LD_VAR 0 5
41855: PUSH
41856: LD_INT 1
41858: ARRAY
41859: PPUSH
41860: CALL_OW 255
41864: PUSH
41865: LD_VAR 0 1
41869: PPUSH
41870: CALL_OW 255
41874: NONEQUAL
41875: OR
41876: IFFALSE 41982
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
41878: LD_VAR 0 5
41882: PUSH
41883: LD_INT 1
41885: ARRAY
41886: PPUSH
41887: CALL_OW 305
41891: PUSH
41892: LD_VAR 0 5
41896: PUSH
41897: LD_INT 1
41899: ARRAY
41900: PPUSH
41901: CALL_OW 255
41905: PUSH
41906: LD_VAR 0 1
41910: PPUSH
41911: CALL_OW 255
41915: EQUAL
41916: AND
41917: IFFALSE 41941
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
41919: LD_VAR 0 5
41923: PUSH
41924: LD_INT 1
41926: ARRAY
41927: PPUSH
41928: LD_VAR 0 5
41932: PUSH
41933: LD_INT 2
41935: ARRAY
41936: PPUSH
41937: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
41941: LD_ADDR_EXP 129
41945: PUSH
41946: LD_EXP 129
41950: PPUSH
41951: LD_VAR 0 4
41955: PPUSH
41956: LD_EXP 129
41960: PUSH
41961: LD_VAR 0 4
41965: ARRAY
41966: PPUSH
41967: LD_VAR 0 3
41971: PPUSH
41972: CALL_OW 3
41976: PPUSH
41977: CALL_OW 1
41981: ST_TO_ADDR
// end ; end ;
41982: GO 41811
41984: POP
41985: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
41986: LD_VAR 0 1
41990: PPUSH
41991: LD_EXP 129
41995: PUSH
41996: LD_VAR 0 4
42000: ARRAY
42001: PUSH
42002: LD_INT 0
42004: PLUS
42005: PPUSH
42006: CALL_OW 505
// end ;
42010: LD_VAR 0 2
42014: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
42015: LD_INT 0
42017: PPUSH
42018: PPUSH
42019: PPUSH
42020: PPUSH
// if not hack in hackTanks then
42021: LD_VAR 0 1
42025: PUSH
42026: LD_EXP 128
42030: IN
42031: NOT
42032: IFFALSE 42036
// exit ;
42034: GO 42121
// index := GetElementIndex ( hackTanks , hack ) ;
42036: LD_ADDR_VAR 0 5
42040: PUSH
42041: LD_EXP 128
42045: PPUSH
42046: LD_VAR 0 1
42050: PPUSH
42051: CALL 48879 0 2
42055: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
42056: LD_ADDR_VAR 0 4
42060: PUSH
42061: DOUBLE
42062: LD_INT 1
42064: DEC
42065: ST_TO_ADDR
42066: LD_EXP 129
42070: PUSH
42071: LD_VAR 0 5
42075: ARRAY
42076: PUSH
42077: FOR_TO
42078: IFFALSE 42119
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
42080: LD_EXP 129
42084: PUSH
42085: LD_VAR 0 5
42089: ARRAY
42090: PUSH
42091: LD_VAR 0 4
42095: ARRAY
42096: PUSH
42097: LD_INT 1
42099: ARRAY
42100: PUSH
42101: LD_VAR 0 2
42105: EQUAL
42106: IFFALSE 42117
// KillUnit ( vehicle ) ;
42108: LD_VAR 0 2
42112: PPUSH
42113: CALL_OW 66
42117: GO 42077
42119: POP
42120: POP
// end ;
42121: LD_VAR 0 3
42125: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
42126: LD_EXP 133
42130: NOT
42131: IFFALSE 42166
42133: GO 42135
42135: DISABLE
// begin initMiner := true ;
42136: LD_ADDR_EXP 133
42140: PUSH
42141: LD_INT 1
42143: ST_TO_ADDR
// minersList := [ ] ;
42144: LD_ADDR_EXP 134
42148: PUSH
42149: EMPTY
42150: ST_TO_ADDR
// minerMinesList := [ ] ;
42151: LD_ADDR_EXP 135
42155: PUSH
42156: EMPTY
42157: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
42158: LD_ADDR_EXP 136
42162: PUSH
42163: LD_INT 5
42165: ST_TO_ADDR
// end ;
42166: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
42167: LD_EXP 133
42171: PUSH
42172: LD_INT 34
42174: PUSH
42175: LD_INT 81
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PPUSH
42182: CALL_OW 69
42186: AND
42187: IFFALSE 42648
42189: GO 42191
42191: DISABLE
42192: LD_INT 0
42194: PPUSH
42195: PPUSH
42196: PPUSH
42197: PPUSH
// begin enable ;
42198: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
42199: LD_ADDR_VAR 0 1
42203: PUSH
42204: LD_INT 34
42206: PUSH
42207: LD_INT 81
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PPUSH
42214: CALL_OW 69
42218: PUSH
42219: FOR_IN
42220: IFFALSE 42292
// begin if not i in minersList then
42222: LD_VAR 0 1
42226: PUSH
42227: LD_EXP 134
42231: IN
42232: NOT
42233: IFFALSE 42290
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
42235: LD_ADDR_EXP 134
42239: PUSH
42240: LD_EXP 134
42244: PPUSH
42245: LD_EXP 134
42249: PUSH
42250: LD_INT 1
42252: PLUS
42253: PPUSH
42254: LD_VAR 0 1
42258: PPUSH
42259: CALL_OW 1
42263: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
42264: LD_ADDR_EXP 135
42268: PUSH
42269: LD_EXP 135
42273: PPUSH
42274: LD_EXP 135
42278: PUSH
42279: LD_INT 1
42281: PLUS
42282: PPUSH
42283: EMPTY
42284: PPUSH
42285: CALL_OW 1
42289: ST_TO_ADDR
// end end ;
42290: GO 42219
42292: POP
42293: POP
// for i := minerMinesList downto 1 do
42294: LD_ADDR_VAR 0 1
42298: PUSH
42299: DOUBLE
42300: LD_EXP 135
42304: INC
42305: ST_TO_ADDR
42306: LD_INT 1
42308: PUSH
42309: FOR_DOWNTO
42310: IFFALSE 42646
// begin if IsLive ( minersList [ i ] ) then
42312: LD_EXP 134
42316: PUSH
42317: LD_VAR 0 1
42321: ARRAY
42322: PPUSH
42323: CALL_OW 300
42327: IFFALSE 42355
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
42329: LD_EXP 134
42333: PUSH
42334: LD_VAR 0 1
42338: ARRAY
42339: PPUSH
42340: LD_EXP 135
42344: PUSH
42345: LD_VAR 0 1
42349: ARRAY
42350: PPUSH
42351: CALL_OW 505
// if not minerMinesList [ i ] then
42355: LD_EXP 135
42359: PUSH
42360: LD_VAR 0 1
42364: ARRAY
42365: NOT
42366: IFFALSE 42370
// continue ;
42368: GO 42309
// for j := minerMinesList [ i ] downto 1 do
42370: LD_ADDR_VAR 0 2
42374: PUSH
42375: DOUBLE
42376: LD_EXP 135
42380: PUSH
42381: LD_VAR 0 1
42385: ARRAY
42386: INC
42387: ST_TO_ADDR
42388: LD_INT 1
42390: PUSH
42391: FOR_DOWNTO
42392: IFFALSE 42642
// begin side := GetSide ( minersList [ i ] ) ;
42394: LD_ADDR_VAR 0 3
42398: PUSH
42399: LD_EXP 134
42403: PUSH
42404: LD_VAR 0 1
42408: ARRAY
42409: PPUSH
42410: CALL_OW 255
42414: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
42415: LD_ADDR_VAR 0 4
42419: PUSH
42420: LD_EXP 135
42424: PUSH
42425: LD_VAR 0 1
42429: ARRAY
42430: PUSH
42431: LD_VAR 0 2
42435: ARRAY
42436: PUSH
42437: LD_INT 1
42439: ARRAY
42440: PPUSH
42441: LD_EXP 135
42445: PUSH
42446: LD_VAR 0 1
42450: ARRAY
42451: PUSH
42452: LD_VAR 0 2
42456: ARRAY
42457: PUSH
42458: LD_INT 2
42460: ARRAY
42461: PPUSH
42462: CALL_OW 428
42466: ST_TO_ADDR
// if not tmp then
42467: LD_VAR 0 4
42471: NOT
42472: IFFALSE 42476
// continue ;
42474: GO 42391
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
42476: LD_VAR 0 4
42480: PUSH
42481: LD_INT 81
42483: PUSH
42484: LD_VAR 0 3
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PPUSH
42493: CALL_OW 69
42497: IN
42498: PUSH
42499: LD_EXP 135
42503: PUSH
42504: LD_VAR 0 1
42508: ARRAY
42509: PUSH
42510: LD_VAR 0 2
42514: ARRAY
42515: PUSH
42516: LD_INT 1
42518: ARRAY
42519: PPUSH
42520: LD_EXP 135
42524: PUSH
42525: LD_VAR 0 1
42529: ARRAY
42530: PUSH
42531: LD_VAR 0 2
42535: ARRAY
42536: PUSH
42537: LD_INT 2
42539: ARRAY
42540: PPUSH
42541: CALL_OW 458
42545: AND
42546: IFFALSE 42640
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
42548: LD_EXP 135
42552: PUSH
42553: LD_VAR 0 1
42557: ARRAY
42558: PUSH
42559: LD_VAR 0 2
42563: ARRAY
42564: PUSH
42565: LD_INT 1
42567: ARRAY
42568: PPUSH
42569: LD_EXP 135
42573: PUSH
42574: LD_VAR 0 1
42578: ARRAY
42579: PUSH
42580: LD_VAR 0 2
42584: ARRAY
42585: PUSH
42586: LD_INT 2
42588: ARRAY
42589: PPUSH
42590: LD_VAR 0 3
42594: PPUSH
42595: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
42599: LD_ADDR_EXP 135
42603: PUSH
42604: LD_EXP 135
42608: PPUSH
42609: LD_VAR 0 1
42613: PPUSH
42614: LD_EXP 135
42618: PUSH
42619: LD_VAR 0 1
42623: ARRAY
42624: PPUSH
42625: LD_VAR 0 2
42629: PPUSH
42630: CALL_OW 3
42634: PPUSH
42635: CALL_OW 1
42639: ST_TO_ADDR
// end ; end ;
42640: GO 42391
42642: POP
42643: POP
// end ;
42644: GO 42309
42646: POP
42647: POP
// end ;
42648: PPOPN 4
42650: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
42651: LD_INT 0
42653: PPUSH
42654: PPUSH
// result := false ;
42655: LD_ADDR_VAR 0 4
42659: PUSH
42660: LD_INT 0
42662: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
42663: LD_VAR 0 1
42667: PPUSH
42668: CALL_OW 264
42672: PUSH
42673: LD_INT 81
42675: EQUAL
42676: NOT
42677: IFFALSE 42681
// exit ;
42679: GO 42921
// index := GetElementIndex ( minersList , unit ) ;
42681: LD_ADDR_VAR 0 5
42685: PUSH
42686: LD_EXP 134
42690: PPUSH
42691: LD_VAR 0 1
42695: PPUSH
42696: CALL 48879 0 2
42700: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
42701: LD_EXP 135
42705: PUSH
42706: LD_VAR 0 5
42710: ARRAY
42711: PUSH
42712: LD_EXP 136
42716: GREATEREQUAL
42717: IFFALSE 42721
// exit ;
42719: GO 42921
// ComMoveXY ( unit , x , y ) ;
42721: LD_VAR 0 1
42725: PPUSH
42726: LD_VAR 0 2
42730: PPUSH
42731: LD_VAR 0 3
42735: PPUSH
42736: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
42740: LD_INT 35
42742: PPUSH
42743: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
42747: LD_VAR 0 1
42751: PPUSH
42752: LD_VAR 0 2
42756: PPUSH
42757: LD_VAR 0 3
42761: PPUSH
42762: CALL 80263 0 3
42766: NOT
42767: PUSH
42768: LD_VAR 0 1
42772: PPUSH
42773: CALL_OW 314
42777: AND
42778: IFFALSE 42782
// exit ;
42780: GO 42921
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
42782: LD_VAR 0 2
42786: PPUSH
42787: LD_VAR 0 3
42791: PPUSH
42792: CALL_OW 428
42796: PUSH
42797: LD_VAR 0 1
42801: EQUAL
42802: PUSH
42803: LD_VAR 0 1
42807: PPUSH
42808: CALL_OW 314
42812: NOT
42813: AND
42814: IFFALSE 42740
// PlaySoundXY ( x , y , PlantMine ) ;
42816: LD_VAR 0 2
42820: PPUSH
42821: LD_VAR 0 3
42825: PPUSH
42826: LD_STRING PlantMine
42828: PPUSH
42829: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
42833: LD_VAR 0 2
42837: PPUSH
42838: LD_VAR 0 3
42842: PPUSH
42843: LD_VAR 0 1
42847: PPUSH
42848: CALL_OW 255
42852: PPUSH
42853: LD_INT 0
42855: PPUSH
42856: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
42860: LD_ADDR_EXP 135
42864: PUSH
42865: LD_EXP 135
42869: PPUSH
42870: LD_VAR 0 5
42874: PUSH
42875: LD_EXP 135
42879: PUSH
42880: LD_VAR 0 5
42884: ARRAY
42885: PUSH
42886: LD_INT 1
42888: PLUS
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PPUSH
42894: LD_VAR 0 2
42898: PUSH
42899: LD_VAR 0 3
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PPUSH
42908: CALL 49094 0 3
42912: ST_TO_ADDR
// result := true ;
42913: LD_ADDR_VAR 0 4
42917: PUSH
42918: LD_INT 1
42920: ST_TO_ADDR
// end ;
42921: LD_VAR 0 4
42925: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
42926: LD_INT 0
42928: PPUSH
42929: PPUSH
42930: PPUSH
// if not unit in minersList then
42931: LD_VAR 0 1
42935: PUSH
42936: LD_EXP 134
42940: IN
42941: NOT
42942: IFFALSE 42946
// exit ;
42944: GO 43338
// index := GetElementIndex ( minersList , unit ) ;
42946: LD_ADDR_VAR 0 6
42950: PUSH
42951: LD_EXP 134
42955: PPUSH
42956: LD_VAR 0 1
42960: PPUSH
42961: CALL 48879 0 2
42965: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
42966: LD_ADDR_VAR 0 5
42970: PUSH
42971: DOUBLE
42972: LD_EXP 135
42976: PUSH
42977: LD_VAR 0 6
42981: ARRAY
42982: INC
42983: ST_TO_ADDR
42984: LD_INT 1
42986: PUSH
42987: FOR_DOWNTO
42988: IFFALSE 43149
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
42990: LD_EXP 135
42994: PUSH
42995: LD_VAR 0 6
42999: ARRAY
43000: PUSH
43001: LD_VAR 0 5
43005: ARRAY
43006: PUSH
43007: LD_INT 1
43009: ARRAY
43010: PUSH
43011: LD_VAR 0 2
43015: EQUAL
43016: PUSH
43017: LD_EXP 135
43021: PUSH
43022: LD_VAR 0 6
43026: ARRAY
43027: PUSH
43028: LD_VAR 0 5
43032: ARRAY
43033: PUSH
43034: LD_INT 2
43036: ARRAY
43037: PUSH
43038: LD_VAR 0 3
43042: EQUAL
43043: AND
43044: IFFALSE 43147
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
43046: LD_EXP 135
43050: PUSH
43051: LD_VAR 0 6
43055: ARRAY
43056: PUSH
43057: LD_VAR 0 5
43061: ARRAY
43062: PUSH
43063: LD_INT 1
43065: ARRAY
43066: PPUSH
43067: LD_EXP 135
43071: PUSH
43072: LD_VAR 0 6
43076: ARRAY
43077: PUSH
43078: LD_VAR 0 5
43082: ARRAY
43083: PUSH
43084: LD_INT 2
43086: ARRAY
43087: PPUSH
43088: LD_VAR 0 1
43092: PPUSH
43093: CALL_OW 255
43097: PPUSH
43098: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
43102: LD_ADDR_EXP 135
43106: PUSH
43107: LD_EXP 135
43111: PPUSH
43112: LD_VAR 0 6
43116: PPUSH
43117: LD_EXP 135
43121: PUSH
43122: LD_VAR 0 6
43126: ARRAY
43127: PPUSH
43128: LD_VAR 0 5
43132: PPUSH
43133: CALL_OW 3
43137: PPUSH
43138: CALL_OW 1
43142: ST_TO_ADDR
// exit ;
43143: POP
43144: POP
43145: GO 43338
// end ; end ;
43147: GO 42987
43149: POP
43150: POP
// for i := minerMinesList [ index ] downto 1 do
43151: LD_ADDR_VAR 0 5
43155: PUSH
43156: DOUBLE
43157: LD_EXP 135
43161: PUSH
43162: LD_VAR 0 6
43166: ARRAY
43167: INC
43168: ST_TO_ADDR
43169: LD_INT 1
43171: PUSH
43172: FOR_DOWNTO
43173: IFFALSE 43336
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
43175: LD_EXP 135
43179: PUSH
43180: LD_VAR 0 6
43184: ARRAY
43185: PUSH
43186: LD_VAR 0 5
43190: ARRAY
43191: PUSH
43192: LD_INT 1
43194: ARRAY
43195: PPUSH
43196: LD_EXP 135
43200: PUSH
43201: LD_VAR 0 6
43205: ARRAY
43206: PUSH
43207: LD_VAR 0 5
43211: ARRAY
43212: PUSH
43213: LD_INT 2
43215: ARRAY
43216: PPUSH
43217: LD_VAR 0 2
43221: PPUSH
43222: LD_VAR 0 3
43226: PPUSH
43227: CALL_OW 298
43231: PUSH
43232: LD_INT 6
43234: LESS
43235: IFFALSE 43334
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
43237: LD_EXP 135
43241: PUSH
43242: LD_VAR 0 6
43246: ARRAY
43247: PUSH
43248: LD_VAR 0 5
43252: ARRAY
43253: PUSH
43254: LD_INT 1
43256: ARRAY
43257: PPUSH
43258: LD_EXP 135
43262: PUSH
43263: LD_VAR 0 6
43267: ARRAY
43268: PUSH
43269: LD_VAR 0 5
43273: ARRAY
43274: PUSH
43275: LD_INT 2
43277: ARRAY
43278: PPUSH
43279: LD_VAR 0 1
43283: PPUSH
43284: CALL_OW 255
43288: PPUSH
43289: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
43293: LD_ADDR_EXP 135
43297: PUSH
43298: LD_EXP 135
43302: PPUSH
43303: LD_VAR 0 6
43307: PPUSH
43308: LD_EXP 135
43312: PUSH
43313: LD_VAR 0 6
43317: ARRAY
43318: PPUSH
43319: LD_VAR 0 5
43323: PPUSH
43324: CALL_OW 3
43328: PPUSH
43329: CALL_OW 1
43333: ST_TO_ADDR
// end ; end ;
43334: GO 43172
43336: POP
43337: POP
// end ;
43338: LD_VAR 0 4
43342: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
43343: LD_INT 0
43345: PPUSH
43346: PPUSH
43347: PPUSH
43348: PPUSH
43349: PPUSH
43350: PPUSH
43351: PPUSH
43352: PPUSH
43353: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
43354: LD_VAR 0 1
43358: PPUSH
43359: CALL_OW 264
43363: PUSH
43364: LD_INT 81
43366: EQUAL
43367: NOT
43368: PUSH
43369: LD_VAR 0 1
43373: PUSH
43374: LD_EXP 134
43378: IN
43379: NOT
43380: OR
43381: IFFALSE 43385
// exit ;
43383: GO 43707
// index := GetElementIndex ( minersList , unit ) ;
43385: LD_ADDR_VAR 0 6
43389: PUSH
43390: LD_EXP 134
43394: PPUSH
43395: LD_VAR 0 1
43399: PPUSH
43400: CALL 48879 0 2
43404: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
43405: LD_ADDR_VAR 0 8
43409: PUSH
43410: LD_EXP 136
43414: PUSH
43415: LD_EXP 135
43419: PUSH
43420: LD_VAR 0 6
43424: ARRAY
43425: MINUS
43426: ST_TO_ADDR
// if not minesFreeAmount then
43427: LD_VAR 0 8
43431: NOT
43432: IFFALSE 43436
// exit ;
43434: GO 43707
// tmp := [ ] ;
43436: LD_ADDR_VAR 0 7
43440: PUSH
43441: EMPTY
43442: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
43443: LD_ADDR_VAR 0 5
43447: PUSH
43448: DOUBLE
43449: LD_INT 1
43451: DEC
43452: ST_TO_ADDR
43453: LD_VAR 0 8
43457: PUSH
43458: FOR_TO
43459: IFFALSE 43654
// begin _d := rand ( 0 , 5 ) ;
43461: LD_ADDR_VAR 0 11
43465: PUSH
43466: LD_INT 0
43468: PPUSH
43469: LD_INT 5
43471: PPUSH
43472: CALL_OW 12
43476: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
43477: LD_ADDR_VAR 0 12
43481: PUSH
43482: LD_INT 2
43484: PPUSH
43485: LD_INT 6
43487: PPUSH
43488: CALL_OW 12
43492: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
43493: LD_ADDR_VAR 0 9
43497: PUSH
43498: LD_VAR 0 2
43502: PPUSH
43503: LD_VAR 0 11
43507: PPUSH
43508: LD_VAR 0 12
43512: PPUSH
43513: CALL_OW 272
43517: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
43518: LD_ADDR_VAR 0 10
43522: PUSH
43523: LD_VAR 0 3
43527: PPUSH
43528: LD_VAR 0 11
43532: PPUSH
43533: LD_VAR 0 12
43537: PPUSH
43538: CALL_OW 273
43542: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
43543: LD_VAR 0 9
43547: PPUSH
43548: LD_VAR 0 10
43552: PPUSH
43553: CALL_OW 488
43557: PUSH
43558: LD_VAR 0 9
43562: PUSH
43563: LD_VAR 0 10
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_VAR 0 7
43576: IN
43577: NOT
43578: AND
43579: PUSH
43580: LD_VAR 0 9
43584: PPUSH
43585: LD_VAR 0 10
43589: PPUSH
43590: CALL_OW 458
43594: NOT
43595: AND
43596: IFFALSE 43638
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
43598: LD_ADDR_VAR 0 7
43602: PUSH
43603: LD_VAR 0 7
43607: PPUSH
43608: LD_VAR 0 7
43612: PUSH
43613: LD_INT 1
43615: PLUS
43616: PPUSH
43617: LD_VAR 0 9
43621: PUSH
43622: LD_VAR 0 10
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PPUSH
43631: CALL_OW 1
43635: ST_TO_ADDR
43636: GO 43652
// i := i - 1 ;
43638: LD_ADDR_VAR 0 5
43642: PUSH
43643: LD_VAR 0 5
43647: PUSH
43648: LD_INT 1
43650: MINUS
43651: ST_TO_ADDR
// end ;
43652: GO 43458
43654: POP
43655: POP
// for i in tmp do
43656: LD_ADDR_VAR 0 5
43660: PUSH
43661: LD_VAR 0 7
43665: PUSH
43666: FOR_IN
43667: IFFALSE 43705
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
43669: LD_VAR 0 1
43673: PPUSH
43674: LD_VAR 0 5
43678: PUSH
43679: LD_INT 1
43681: ARRAY
43682: PPUSH
43683: LD_VAR 0 5
43687: PUSH
43688: LD_INT 2
43690: ARRAY
43691: PPUSH
43692: CALL 42651 0 3
43696: NOT
43697: IFFALSE 43703
// exit ;
43699: POP
43700: POP
43701: GO 43707
43703: GO 43666
43705: POP
43706: POP
// end ;
43707: LD_VAR 0 4
43711: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
43712: LD_INT 0
43714: PPUSH
43715: PPUSH
43716: PPUSH
43717: PPUSH
43718: PPUSH
43719: PPUSH
43720: PPUSH
// if not GetClass ( unit ) = class_sniper then
43721: LD_VAR 0 1
43725: PPUSH
43726: CALL_OW 257
43730: PUSH
43731: LD_INT 5
43733: EQUAL
43734: NOT
43735: IFFALSE 43739
// exit ;
43737: GO 44127
// dist := 8 ;
43739: LD_ADDR_VAR 0 5
43743: PUSH
43744: LD_INT 8
43746: ST_TO_ADDR
// viewRange := 12 ;
43747: LD_ADDR_VAR 0 7
43751: PUSH
43752: LD_INT 12
43754: ST_TO_ADDR
// side := GetSide ( unit ) ;
43755: LD_ADDR_VAR 0 6
43759: PUSH
43760: LD_VAR 0 1
43764: PPUSH
43765: CALL_OW 255
43769: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
43770: LD_INT 61
43772: PPUSH
43773: LD_VAR 0 6
43777: PPUSH
43778: CALL_OW 321
43782: PUSH
43783: LD_INT 2
43785: EQUAL
43786: IFFALSE 43796
// viewRange := 16 ;
43788: LD_ADDR_VAR 0 7
43792: PUSH
43793: LD_INT 16
43795: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
43796: LD_VAR 0 1
43800: PPUSH
43801: LD_VAR 0 2
43805: PPUSH
43806: LD_VAR 0 3
43810: PPUSH
43811: CALL_OW 297
43815: PUSH
43816: LD_VAR 0 5
43820: GREATER
43821: IFFALSE 43900
// begin ComMoveXY ( unit , x , y ) ;
43823: LD_VAR 0 1
43827: PPUSH
43828: LD_VAR 0 2
43832: PPUSH
43833: LD_VAR 0 3
43837: PPUSH
43838: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
43842: LD_INT 35
43844: PPUSH
43845: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
43849: LD_VAR 0 1
43853: PPUSH
43854: LD_VAR 0 2
43858: PPUSH
43859: LD_VAR 0 3
43863: PPUSH
43864: CALL 80263 0 3
43868: NOT
43869: IFFALSE 43873
// exit ;
43871: GO 44127
// until GetDistUnitXY ( unit , x , y ) < dist ;
43873: LD_VAR 0 1
43877: PPUSH
43878: LD_VAR 0 2
43882: PPUSH
43883: LD_VAR 0 3
43887: PPUSH
43888: CALL_OW 297
43892: PUSH
43893: LD_VAR 0 5
43897: LESS
43898: IFFALSE 43842
// end ; ComTurnXY ( unit , x , y ) ;
43900: LD_VAR 0 1
43904: PPUSH
43905: LD_VAR 0 2
43909: PPUSH
43910: LD_VAR 0 3
43914: PPUSH
43915: CALL_OW 118
// wait ( 5 ) ;
43919: LD_INT 5
43921: PPUSH
43922: CALL_OW 67
// _d := GetDir ( unit ) ;
43926: LD_ADDR_VAR 0 10
43930: PUSH
43931: LD_VAR 0 1
43935: PPUSH
43936: CALL_OW 254
43940: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
43941: LD_ADDR_VAR 0 8
43945: PUSH
43946: LD_VAR 0 1
43950: PPUSH
43951: CALL_OW 250
43955: PPUSH
43956: LD_VAR 0 10
43960: PPUSH
43961: LD_VAR 0 5
43965: PPUSH
43966: CALL_OW 272
43970: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
43971: LD_ADDR_VAR 0 9
43975: PUSH
43976: LD_VAR 0 1
43980: PPUSH
43981: CALL_OW 251
43985: PPUSH
43986: LD_VAR 0 10
43990: PPUSH
43991: LD_VAR 0 5
43995: PPUSH
43996: CALL_OW 273
44000: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44001: LD_VAR 0 8
44005: PPUSH
44006: LD_VAR 0 9
44010: PPUSH
44011: CALL_OW 488
44015: NOT
44016: IFFALSE 44020
// exit ;
44018: GO 44127
// ComAnimCustom ( unit , 1 ) ;
44020: LD_VAR 0 1
44024: PPUSH
44025: LD_INT 1
44027: PPUSH
44028: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
44032: LD_VAR 0 8
44036: PPUSH
44037: LD_VAR 0 9
44041: PPUSH
44042: LD_VAR 0 6
44046: PPUSH
44047: LD_VAR 0 7
44051: PPUSH
44052: CALL_OW 330
// repeat wait ( 1 ) ;
44056: LD_INT 1
44058: PPUSH
44059: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
44063: LD_VAR 0 1
44067: PPUSH
44068: CALL_OW 316
44072: PUSH
44073: LD_VAR 0 1
44077: PPUSH
44078: CALL_OW 314
44082: OR
44083: PUSH
44084: LD_VAR 0 1
44088: PPUSH
44089: CALL_OW 302
44093: NOT
44094: OR
44095: PUSH
44096: LD_VAR 0 1
44100: PPUSH
44101: CALL_OW 301
44105: OR
44106: IFFALSE 44056
// RemoveSeeing ( _x , _y , side ) ;
44108: LD_VAR 0 8
44112: PPUSH
44113: LD_VAR 0 9
44117: PPUSH
44118: LD_VAR 0 6
44122: PPUSH
44123: CALL_OW 331
// end ; end_of_file
44127: LD_VAR 0 4
44131: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
44132: LD_INT 0
44134: PPUSH
44135: PPUSH
// if exist_mode then
44136: LD_VAR 0 2
44140: IFFALSE 44165
// unit := CreateCharacter ( prefix & ident ) else
44142: LD_ADDR_VAR 0 5
44146: PUSH
44147: LD_VAR 0 3
44151: PUSH
44152: LD_VAR 0 1
44156: STR
44157: PPUSH
44158: CALL_OW 34
44162: ST_TO_ADDR
44163: GO 44180
// unit := NewCharacter ( ident ) ;
44165: LD_ADDR_VAR 0 5
44169: PUSH
44170: LD_VAR 0 1
44174: PPUSH
44175: CALL_OW 25
44179: ST_TO_ADDR
// result := unit ;
44180: LD_ADDR_VAR 0 4
44184: PUSH
44185: LD_VAR 0 5
44189: ST_TO_ADDR
// end ;
44190: LD_VAR 0 4
44194: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
44195: LD_INT 0
44197: PPUSH
44198: PPUSH
// if not side or not nation then
44199: LD_VAR 0 1
44203: NOT
44204: PUSH
44205: LD_VAR 0 2
44209: NOT
44210: OR
44211: IFFALSE 44215
// exit ;
44213: GO 44983
// case nation of nation_american :
44215: LD_VAR 0 2
44219: PUSH
44220: LD_INT 1
44222: DOUBLE
44223: EQUAL
44224: IFTRUE 44228
44226: GO 44442
44228: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
44229: LD_ADDR_VAR 0 4
44233: PUSH
44234: LD_INT 35
44236: PUSH
44237: LD_INT 45
44239: PUSH
44240: LD_INT 46
44242: PUSH
44243: LD_INT 47
44245: PUSH
44246: LD_INT 82
44248: PUSH
44249: LD_INT 83
44251: PUSH
44252: LD_INT 84
44254: PUSH
44255: LD_INT 85
44257: PUSH
44258: LD_INT 86
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: LD_INT 2
44266: PUSH
44267: LD_INT 6
44269: PUSH
44270: LD_INT 15
44272: PUSH
44273: LD_INT 16
44275: PUSH
44276: LD_INT 7
44278: PUSH
44279: LD_INT 12
44281: PUSH
44282: LD_INT 13
44284: PUSH
44285: LD_INT 10
44287: PUSH
44288: LD_INT 14
44290: PUSH
44291: LD_INT 20
44293: PUSH
44294: LD_INT 21
44296: PUSH
44297: LD_INT 22
44299: PUSH
44300: LD_INT 25
44302: PUSH
44303: LD_INT 32
44305: PUSH
44306: LD_INT 27
44308: PUSH
44309: LD_INT 36
44311: PUSH
44312: LD_INT 69
44314: PUSH
44315: LD_INT 39
44317: PUSH
44318: LD_INT 34
44320: PUSH
44321: LD_INT 40
44323: PUSH
44324: LD_INT 48
44326: PUSH
44327: LD_INT 49
44329: PUSH
44330: LD_INT 50
44332: PUSH
44333: LD_INT 51
44335: PUSH
44336: LD_INT 52
44338: PUSH
44339: LD_INT 53
44341: PUSH
44342: LD_INT 54
44344: PUSH
44345: LD_INT 55
44347: PUSH
44348: LD_INT 56
44350: PUSH
44351: LD_INT 57
44353: PUSH
44354: LD_INT 58
44356: PUSH
44357: LD_INT 59
44359: PUSH
44360: LD_INT 60
44362: PUSH
44363: LD_INT 61
44365: PUSH
44366: LD_INT 62
44368: PUSH
44369: LD_INT 80
44371: PUSH
44372: LD_INT 82
44374: PUSH
44375: LD_INT 83
44377: PUSH
44378: LD_INT 84
44380: PUSH
44381: LD_INT 85
44383: PUSH
44384: LD_INT 86
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: ST_TO_ADDR
44440: GO 44907
44442: LD_INT 2
44444: DOUBLE
44445: EQUAL
44446: IFTRUE 44450
44448: GO 44676
44450: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
44451: LD_ADDR_VAR 0 4
44455: PUSH
44456: LD_INT 35
44458: PUSH
44459: LD_INT 45
44461: PUSH
44462: LD_INT 46
44464: PUSH
44465: LD_INT 47
44467: PUSH
44468: LD_INT 82
44470: PUSH
44471: LD_INT 83
44473: PUSH
44474: LD_INT 84
44476: PUSH
44477: LD_INT 85
44479: PUSH
44480: LD_INT 87
44482: PUSH
44483: LD_INT 70
44485: PUSH
44486: LD_INT 1
44488: PUSH
44489: LD_INT 11
44491: PUSH
44492: LD_INT 3
44494: PUSH
44495: LD_INT 4
44497: PUSH
44498: LD_INT 5
44500: PUSH
44501: LD_INT 6
44503: PUSH
44504: LD_INT 15
44506: PUSH
44507: LD_INT 18
44509: PUSH
44510: LD_INT 7
44512: PUSH
44513: LD_INT 17
44515: PUSH
44516: LD_INT 8
44518: PUSH
44519: LD_INT 20
44521: PUSH
44522: LD_INT 21
44524: PUSH
44525: LD_INT 22
44527: PUSH
44528: LD_INT 72
44530: PUSH
44531: LD_INT 26
44533: PUSH
44534: LD_INT 69
44536: PUSH
44537: LD_INT 39
44539: PUSH
44540: LD_INT 40
44542: PUSH
44543: LD_INT 41
44545: PUSH
44546: LD_INT 42
44548: PUSH
44549: LD_INT 43
44551: PUSH
44552: LD_INT 48
44554: PUSH
44555: LD_INT 49
44557: PUSH
44558: LD_INT 50
44560: PUSH
44561: LD_INT 51
44563: PUSH
44564: LD_INT 52
44566: PUSH
44567: LD_INT 53
44569: PUSH
44570: LD_INT 54
44572: PUSH
44573: LD_INT 55
44575: PUSH
44576: LD_INT 56
44578: PUSH
44579: LD_INT 60
44581: PUSH
44582: LD_INT 61
44584: PUSH
44585: LD_INT 62
44587: PUSH
44588: LD_INT 66
44590: PUSH
44591: LD_INT 67
44593: PUSH
44594: LD_INT 68
44596: PUSH
44597: LD_INT 81
44599: PUSH
44600: LD_INT 82
44602: PUSH
44603: LD_INT 83
44605: PUSH
44606: LD_INT 84
44608: PUSH
44609: LD_INT 85
44611: PUSH
44612: LD_INT 87
44614: PUSH
44615: LD_INT 88
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: ST_TO_ADDR
44674: GO 44907
44676: LD_INT 3
44678: DOUBLE
44679: EQUAL
44680: IFTRUE 44684
44682: GO 44906
44684: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
44685: LD_ADDR_VAR 0 4
44689: PUSH
44690: LD_INT 46
44692: PUSH
44693: LD_INT 47
44695: PUSH
44696: LD_INT 1
44698: PUSH
44699: LD_INT 2
44701: PUSH
44702: LD_INT 82
44704: PUSH
44705: LD_INT 83
44707: PUSH
44708: LD_INT 84
44710: PUSH
44711: LD_INT 85
44713: PUSH
44714: LD_INT 86
44716: PUSH
44717: LD_INT 11
44719: PUSH
44720: LD_INT 9
44722: PUSH
44723: LD_INT 20
44725: PUSH
44726: LD_INT 19
44728: PUSH
44729: LD_INT 21
44731: PUSH
44732: LD_INT 24
44734: PUSH
44735: LD_INT 22
44737: PUSH
44738: LD_INT 25
44740: PUSH
44741: LD_INT 28
44743: PUSH
44744: LD_INT 29
44746: PUSH
44747: LD_INT 30
44749: PUSH
44750: LD_INT 31
44752: PUSH
44753: LD_INT 37
44755: PUSH
44756: LD_INT 38
44758: PUSH
44759: LD_INT 32
44761: PUSH
44762: LD_INT 27
44764: PUSH
44765: LD_INT 33
44767: PUSH
44768: LD_INT 69
44770: PUSH
44771: LD_INT 39
44773: PUSH
44774: LD_INT 34
44776: PUSH
44777: LD_INT 40
44779: PUSH
44780: LD_INT 71
44782: PUSH
44783: LD_INT 23
44785: PUSH
44786: LD_INT 44
44788: PUSH
44789: LD_INT 48
44791: PUSH
44792: LD_INT 49
44794: PUSH
44795: LD_INT 50
44797: PUSH
44798: LD_INT 51
44800: PUSH
44801: LD_INT 52
44803: PUSH
44804: LD_INT 53
44806: PUSH
44807: LD_INT 54
44809: PUSH
44810: LD_INT 55
44812: PUSH
44813: LD_INT 56
44815: PUSH
44816: LD_INT 57
44818: PUSH
44819: LD_INT 58
44821: PUSH
44822: LD_INT 59
44824: PUSH
44825: LD_INT 63
44827: PUSH
44828: LD_INT 64
44830: PUSH
44831: LD_INT 65
44833: PUSH
44834: LD_INT 82
44836: PUSH
44837: LD_INT 83
44839: PUSH
44840: LD_INT 84
44842: PUSH
44843: LD_INT 85
44845: PUSH
44846: LD_INT 86
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: ST_TO_ADDR
44904: GO 44907
44906: POP
// if state > - 1 and state < 3 then
44907: LD_VAR 0 3
44911: PUSH
44912: LD_INT 1
44914: NEG
44915: GREATER
44916: PUSH
44917: LD_VAR 0 3
44921: PUSH
44922: LD_INT 3
44924: LESS
44925: AND
44926: IFFALSE 44983
// for i in result do
44928: LD_ADDR_VAR 0 5
44932: PUSH
44933: LD_VAR 0 4
44937: PUSH
44938: FOR_IN
44939: IFFALSE 44981
// if GetTech ( i , side ) <> state then
44941: LD_VAR 0 5
44945: PPUSH
44946: LD_VAR 0 1
44950: PPUSH
44951: CALL_OW 321
44955: PUSH
44956: LD_VAR 0 3
44960: NONEQUAL
44961: IFFALSE 44979
// result := result diff i ;
44963: LD_ADDR_VAR 0 4
44967: PUSH
44968: LD_VAR 0 4
44972: PUSH
44973: LD_VAR 0 5
44977: DIFF
44978: ST_TO_ADDR
44979: GO 44938
44981: POP
44982: POP
// end ;
44983: LD_VAR 0 4
44987: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
44988: LD_INT 0
44990: PPUSH
44991: PPUSH
44992: PPUSH
// result := true ;
44993: LD_ADDR_VAR 0 3
44997: PUSH
44998: LD_INT 1
45000: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
45001: LD_ADDR_VAR 0 5
45005: PUSH
45006: LD_VAR 0 2
45010: PPUSH
45011: CALL_OW 480
45015: ST_TO_ADDR
// if not tmp then
45016: LD_VAR 0 5
45020: NOT
45021: IFFALSE 45025
// exit ;
45023: GO 45074
// for i in tmp do
45025: LD_ADDR_VAR 0 4
45029: PUSH
45030: LD_VAR 0 5
45034: PUSH
45035: FOR_IN
45036: IFFALSE 45072
// if GetTech ( i , side ) <> state_researched then
45038: LD_VAR 0 4
45042: PPUSH
45043: LD_VAR 0 1
45047: PPUSH
45048: CALL_OW 321
45052: PUSH
45053: LD_INT 2
45055: NONEQUAL
45056: IFFALSE 45070
// begin result := false ;
45058: LD_ADDR_VAR 0 3
45062: PUSH
45063: LD_INT 0
45065: ST_TO_ADDR
// exit ;
45066: POP
45067: POP
45068: GO 45074
// end ;
45070: GO 45035
45072: POP
45073: POP
// end ;
45074: LD_VAR 0 3
45078: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
45079: LD_INT 0
45081: PPUSH
45082: PPUSH
45083: PPUSH
45084: PPUSH
45085: PPUSH
45086: PPUSH
45087: PPUSH
45088: PPUSH
45089: PPUSH
45090: PPUSH
45091: PPUSH
45092: PPUSH
45093: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
45094: LD_VAR 0 1
45098: NOT
45099: PUSH
45100: LD_VAR 0 1
45104: PPUSH
45105: CALL_OW 257
45109: PUSH
45110: LD_INT 9
45112: NONEQUAL
45113: OR
45114: IFFALSE 45118
// exit ;
45116: GO 45691
// side := GetSide ( unit ) ;
45118: LD_ADDR_VAR 0 9
45122: PUSH
45123: LD_VAR 0 1
45127: PPUSH
45128: CALL_OW 255
45132: ST_TO_ADDR
// tech_space := tech_spacanom ;
45133: LD_ADDR_VAR 0 12
45137: PUSH
45138: LD_INT 29
45140: ST_TO_ADDR
// tech_time := tech_taurad ;
45141: LD_ADDR_VAR 0 13
45145: PUSH
45146: LD_INT 28
45148: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
45149: LD_ADDR_VAR 0 11
45153: PUSH
45154: LD_VAR 0 1
45158: PPUSH
45159: CALL_OW 310
45163: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
45164: LD_VAR 0 11
45168: PPUSH
45169: CALL_OW 247
45173: PUSH
45174: LD_INT 2
45176: EQUAL
45177: IFFALSE 45181
// exit ;
45179: GO 45691
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45181: LD_ADDR_VAR 0 8
45185: PUSH
45186: LD_INT 81
45188: PUSH
45189: LD_VAR 0 9
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 3
45200: PUSH
45201: LD_INT 21
45203: PUSH
45204: LD_INT 3
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PPUSH
45219: CALL_OW 69
45223: ST_TO_ADDR
// if not tmp then
45224: LD_VAR 0 8
45228: NOT
45229: IFFALSE 45233
// exit ;
45231: GO 45691
// if in_unit then
45233: LD_VAR 0 11
45237: IFFALSE 45261
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
45239: LD_ADDR_VAR 0 10
45243: PUSH
45244: LD_VAR 0 8
45248: PPUSH
45249: LD_VAR 0 11
45253: PPUSH
45254: CALL_OW 74
45258: ST_TO_ADDR
45259: GO 45281
// enemy := NearestUnitToUnit ( tmp , unit ) ;
45261: LD_ADDR_VAR 0 10
45265: PUSH
45266: LD_VAR 0 8
45270: PPUSH
45271: LD_VAR 0 1
45275: PPUSH
45276: CALL_OW 74
45280: ST_TO_ADDR
// if not enemy then
45281: LD_VAR 0 10
45285: NOT
45286: IFFALSE 45290
// exit ;
45288: GO 45691
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
45290: LD_VAR 0 11
45294: PUSH
45295: LD_VAR 0 11
45299: PPUSH
45300: LD_VAR 0 10
45304: PPUSH
45305: CALL_OW 296
45309: PUSH
45310: LD_INT 13
45312: GREATER
45313: AND
45314: PUSH
45315: LD_VAR 0 1
45319: PPUSH
45320: LD_VAR 0 10
45324: PPUSH
45325: CALL_OW 296
45329: PUSH
45330: LD_INT 12
45332: GREATER
45333: OR
45334: IFFALSE 45338
// exit ;
45336: GO 45691
// missile := [ 1 ] ;
45338: LD_ADDR_VAR 0 14
45342: PUSH
45343: LD_INT 1
45345: PUSH
45346: EMPTY
45347: LIST
45348: ST_TO_ADDR
// if Researched ( side , tech_space ) then
45349: LD_VAR 0 9
45353: PPUSH
45354: LD_VAR 0 12
45358: PPUSH
45359: CALL_OW 325
45363: IFFALSE 45392
// missile := Replace ( missile , missile + 1 , 2 ) ;
45365: LD_ADDR_VAR 0 14
45369: PUSH
45370: LD_VAR 0 14
45374: PPUSH
45375: LD_VAR 0 14
45379: PUSH
45380: LD_INT 1
45382: PLUS
45383: PPUSH
45384: LD_INT 2
45386: PPUSH
45387: CALL_OW 1
45391: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
45392: LD_VAR 0 9
45396: PPUSH
45397: LD_VAR 0 13
45401: PPUSH
45402: CALL_OW 325
45406: PUSH
45407: LD_VAR 0 10
45411: PPUSH
45412: CALL_OW 255
45416: PPUSH
45417: LD_VAR 0 13
45421: PPUSH
45422: CALL_OW 325
45426: NOT
45427: AND
45428: IFFALSE 45457
// missile := Replace ( missile , missile + 1 , 3 ) ;
45430: LD_ADDR_VAR 0 14
45434: PUSH
45435: LD_VAR 0 14
45439: PPUSH
45440: LD_VAR 0 14
45444: PUSH
45445: LD_INT 1
45447: PLUS
45448: PPUSH
45449: LD_INT 3
45451: PPUSH
45452: CALL_OW 1
45456: ST_TO_ADDR
// if missile < 2 then
45457: LD_VAR 0 14
45461: PUSH
45462: LD_INT 2
45464: LESS
45465: IFFALSE 45469
// exit ;
45467: GO 45691
// x := GetX ( enemy ) ;
45469: LD_ADDR_VAR 0 4
45473: PUSH
45474: LD_VAR 0 10
45478: PPUSH
45479: CALL_OW 250
45483: ST_TO_ADDR
// y := GetY ( enemy ) ;
45484: LD_ADDR_VAR 0 5
45488: PUSH
45489: LD_VAR 0 10
45493: PPUSH
45494: CALL_OW 251
45498: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
45499: LD_ADDR_VAR 0 6
45503: PUSH
45504: LD_VAR 0 4
45508: PUSH
45509: LD_INT 1
45511: NEG
45512: PPUSH
45513: LD_INT 1
45515: PPUSH
45516: CALL_OW 12
45520: PLUS
45521: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
45522: LD_ADDR_VAR 0 7
45526: PUSH
45527: LD_VAR 0 5
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PPUSH
45536: LD_INT 1
45538: PPUSH
45539: CALL_OW 12
45543: PLUS
45544: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45545: LD_VAR 0 6
45549: PPUSH
45550: LD_VAR 0 7
45554: PPUSH
45555: CALL_OW 488
45559: NOT
45560: IFFALSE 45582
// begin _x := x ;
45562: LD_ADDR_VAR 0 6
45566: PUSH
45567: LD_VAR 0 4
45571: ST_TO_ADDR
// _y := y ;
45572: LD_ADDR_VAR 0 7
45576: PUSH
45577: LD_VAR 0 5
45581: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
45582: LD_ADDR_VAR 0 3
45586: PUSH
45587: LD_INT 1
45589: PPUSH
45590: LD_VAR 0 14
45594: PPUSH
45595: CALL_OW 12
45599: ST_TO_ADDR
// case i of 1 :
45600: LD_VAR 0 3
45604: PUSH
45605: LD_INT 1
45607: DOUBLE
45608: EQUAL
45609: IFTRUE 45613
45611: GO 45630
45613: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
45614: LD_VAR 0 1
45618: PPUSH
45619: LD_VAR 0 10
45623: PPUSH
45624: CALL_OW 115
45628: GO 45691
45630: LD_INT 2
45632: DOUBLE
45633: EQUAL
45634: IFTRUE 45638
45636: GO 45660
45638: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
45639: LD_VAR 0 1
45643: PPUSH
45644: LD_VAR 0 6
45648: PPUSH
45649: LD_VAR 0 7
45653: PPUSH
45654: CALL_OW 153
45658: GO 45691
45660: LD_INT 3
45662: DOUBLE
45663: EQUAL
45664: IFTRUE 45668
45666: GO 45690
45668: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
45669: LD_VAR 0 1
45673: PPUSH
45674: LD_VAR 0 6
45678: PPUSH
45679: LD_VAR 0 7
45683: PPUSH
45684: CALL_OW 154
45688: GO 45691
45690: POP
// end ;
45691: LD_VAR 0 2
45695: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
45696: LD_INT 0
45698: PPUSH
45699: PPUSH
45700: PPUSH
45701: PPUSH
45702: PPUSH
45703: PPUSH
// if not unit or not building then
45704: LD_VAR 0 1
45708: NOT
45709: PUSH
45710: LD_VAR 0 2
45714: NOT
45715: OR
45716: IFFALSE 45720
// exit ;
45718: GO 45878
// x := GetX ( building ) ;
45720: LD_ADDR_VAR 0 5
45724: PUSH
45725: LD_VAR 0 2
45729: PPUSH
45730: CALL_OW 250
45734: ST_TO_ADDR
// y := GetY ( building ) ;
45735: LD_ADDR_VAR 0 6
45739: PUSH
45740: LD_VAR 0 2
45744: PPUSH
45745: CALL_OW 251
45749: ST_TO_ADDR
// for i = 0 to 5 do
45750: LD_ADDR_VAR 0 4
45754: PUSH
45755: DOUBLE
45756: LD_INT 0
45758: DEC
45759: ST_TO_ADDR
45760: LD_INT 5
45762: PUSH
45763: FOR_TO
45764: IFFALSE 45876
// begin _x := ShiftX ( x , i , 3 ) ;
45766: LD_ADDR_VAR 0 7
45770: PUSH
45771: LD_VAR 0 5
45775: PPUSH
45776: LD_VAR 0 4
45780: PPUSH
45781: LD_INT 3
45783: PPUSH
45784: CALL_OW 272
45788: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
45789: LD_ADDR_VAR 0 8
45793: PUSH
45794: LD_VAR 0 6
45798: PPUSH
45799: LD_VAR 0 4
45803: PPUSH
45804: LD_INT 3
45806: PPUSH
45807: CALL_OW 273
45811: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45812: LD_VAR 0 7
45816: PPUSH
45817: LD_VAR 0 8
45821: PPUSH
45822: CALL_OW 488
45826: NOT
45827: IFFALSE 45831
// continue ;
45829: GO 45763
// if HexInfo ( _x , _y ) = 0 then
45831: LD_VAR 0 7
45835: PPUSH
45836: LD_VAR 0 8
45840: PPUSH
45841: CALL_OW 428
45845: PUSH
45846: LD_INT 0
45848: EQUAL
45849: IFFALSE 45874
// begin ComMoveXY ( unit , _x , _y ) ;
45851: LD_VAR 0 1
45855: PPUSH
45856: LD_VAR 0 7
45860: PPUSH
45861: LD_VAR 0 8
45865: PPUSH
45866: CALL_OW 111
// exit ;
45870: POP
45871: POP
45872: GO 45878
// end ; end ;
45874: GO 45763
45876: POP
45877: POP
// end ;
45878: LD_VAR 0 3
45882: RET
// export function ScanBase ( side , base_area ) ; begin
45883: LD_INT 0
45885: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
45886: LD_ADDR_VAR 0 3
45890: PUSH
45891: LD_VAR 0 2
45895: PPUSH
45896: LD_INT 81
45898: PUSH
45899: LD_VAR 0 1
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PPUSH
45908: CALL_OW 70
45912: ST_TO_ADDR
// end ;
45913: LD_VAR 0 3
45917: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
45918: LD_INT 0
45920: PPUSH
45921: PPUSH
45922: PPUSH
45923: PPUSH
// result := false ;
45924: LD_ADDR_VAR 0 2
45928: PUSH
45929: LD_INT 0
45931: ST_TO_ADDR
// side := GetSide ( unit ) ;
45932: LD_ADDR_VAR 0 3
45936: PUSH
45937: LD_VAR 0 1
45941: PPUSH
45942: CALL_OW 255
45946: ST_TO_ADDR
// nat := GetNation ( unit ) ;
45947: LD_ADDR_VAR 0 4
45951: PUSH
45952: LD_VAR 0 1
45956: PPUSH
45957: CALL_OW 248
45961: ST_TO_ADDR
// case nat of 1 :
45962: LD_VAR 0 4
45966: PUSH
45967: LD_INT 1
45969: DOUBLE
45970: EQUAL
45971: IFTRUE 45975
45973: GO 45986
45975: POP
// tech := tech_lassight ; 2 :
45976: LD_ADDR_VAR 0 5
45980: PUSH
45981: LD_INT 12
45983: ST_TO_ADDR
45984: GO 46025
45986: LD_INT 2
45988: DOUBLE
45989: EQUAL
45990: IFTRUE 45994
45992: GO 46005
45994: POP
// tech := tech_mortar ; 3 :
45995: LD_ADDR_VAR 0 5
45999: PUSH
46000: LD_INT 41
46002: ST_TO_ADDR
46003: GO 46025
46005: LD_INT 3
46007: DOUBLE
46008: EQUAL
46009: IFTRUE 46013
46011: GO 46024
46013: POP
// tech := tech_bazooka ; end ;
46014: LD_ADDR_VAR 0 5
46018: PUSH
46019: LD_INT 44
46021: ST_TO_ADDR
46022: GO 46025
46024: POP
// if Researched ( side , tech ) then
46025: LD_VAR 0 3
46029: PPUSH
46030: LD_VAR 0 5
46034: PPUSH
46035: CALL_OW 325
46039: IFFALSE 46066
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
46041: LD_ADDR_VAR 0 2
46045: PUSH
46046: LD_INT 5
46048: PUSH
46049: LD_INT 8
46051: PUSH
46052: LD_INT 9
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: LIST
46059: PUSH
46060: LD_VAR 0 4
46064: ARRAY
46065: ST_TO_ADDR
// end ;
46066: LD_VAR 0 2
46070: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
46071: LD_INT 0
46073: PPUSH
46074: PPUSH
46075: PPUSH
// if not mines then
46076: LD_VAR 0 2
46080: NOT
46081: IFFALSE 46085
// exit ;
46083: GO 46229
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46085: LD_ADDR_VAR 0 5
46089: PUSH
46090: LD_INT 81
46092: PUSH
46093: LD_VAR 0 1
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 3
46104: PUSH
46105: LD_INT 21
46107: PUSH
46108: LD_INT 3
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PPUSH
46123: CALL_OW 69
46127: ST_TO_ADDR
// for i in mines do
46128: LD_ADDR_VAR 0 4
46132: PUSH
46133: LD_VAR 0 2
46137: PUSH
46138: FOR_IN
46139: IFFALSE 46227
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
46141: LD_VAR 0 4
46145: PUSH
46146: LD_INT 1
46148: ARRAY
46149: PPUSH
46150: LD_VAR 0 4
46154: PUSH
46155: LD_INT 2
46157: ARRAY
46158: PPUSH
46159: CALL_OW 458
46163: NOT
46164: IFFALSE 46168
// continue ;
46166: GO 46138
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
46168: LD_VAR 0 4
46172: PUSH
46173: LD_INT 1
46175: ARRAY
46176: PPUSH
46177: LD_VAR 0 4
46181: PUSH
46182: LD_INT 2
46184: ARRAY
46185: PPUSH
46186: CALL_OW 428
46190: PUSH
46191: LD_VAR 0 5
46195: IN
46196: IFFALSE 46225
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
46198: LD_VAR 0 4
46202: PUSH
46203: LD_INT 1
46205: ARRAY
46206: PPUSH
46207: LD_VAR 0 4
46211: PUSH
46212: LD_INT 2
46214: ARRAY
46215: PPUSH
46216: LD_VAR 0 1
46220: PPUSH
46221: CALL_OW 456
// end ;
46225: GO 46138
46227: POP
46228: POP
// end ;
46229: LD_VAR 0 3
46233: RET
// export function Count ( array ) ; begin
46234: LD_INT 0
46236: PPUSH
// result := array + 0 ;
46237: LD_ADDR_VAR 0 2
46241: PUSH
46242: LD_VAR 0 1
46246: PUSH
46247: LD_INT 0
46249: PLUS
46250: ST_TO_ADDR
// end ;
46251: LD_VAR 0 2
46255: RET
// export function IsEmpty ( building ) ; begin
46256: LD_INT 0
46258: PPUSH
// if not building then
46259: LD_VAR 0 1
46263: NOT
46264: IFFALSE 46268
// exit ;
46266: GO 46311
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
46268: LD_ADDR_VAR 0 2
46272: PUSH
46273: LD_VAR 0 1
46277: PUSH
46278: LD_INT 22
46280: PUSH
46281: LD_VAR 0 1
46285: PPUSH
46286: CALL_OW 255
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 58
46297: PUSH
46298: EMPTY
46299: LIST
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PPUSH
46305: CALL_OW 69
46309: IN
46310: ST_TO_ADDR
// end ;
46311: LD_VAR 0 2
46315: RET
// export function IsNotFull ( building ) ; var places ; begin
46316: LD_INT 0
46318: PPUSH
46319: PPUSH
// if not building then
46320: LD_VAR 0 1
46324: NOT
46325: IFFALSE 46329
// exit ;
46327: GO 46357
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
46329: LD_ADDR_VAR 0 2
46333: PUSH
46334: LD_VAR 0 1
46338: PPUSH
46339: LD_INT 3
46341: PUSH
46342: LD_INT 62
46344: PUSH
46345: EMPTY
46346: LIST
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PPUSH
46352: CALL_OW 72
46356: ST_TO_ADDR
// end ;
46357: LD_VAR 0 2
46361: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
46362: LD_INT 0
46364: PPUSH
46365: PPUSH
46366: PPUSH
46367: PPUSH
// tmp := [ ] ;
46368: LD_ADDR_VAR 0 3
46372: PUSH
46373: EMPTY
46374: ST_TO_ADDR
// list := [ ] ;
46375: LD_ADDR_VAR 0 5
46379: PUSH
46380: EMPTY
46381: ST_TO_ADDR
// for i = 16 to 25 do
46382: LD_ADDR_VAR 0 4
46386: PUSH
46387: DOUBLE
46388: LD_INT 16
46390: DEC
46391: ST_TO_ADDR
46392: LD_INT 25
46394: PUSH
46395: FOR_TO
46396: IFFALSE 46469
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
46398: LD_ADDR_VAR 0 3
46402: PUSH
46403: LD_VAR 0 3
46407: PUSH
46408: LD_INT 22
46410: PUSH
46411: LD_VAR 0 1
46415: PPUSH
46416: CALL_OW 255
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 91
46427: PUSH
46428: LD_VAR 0 1
46432: PUSH
46433: LD_INT 6
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 30
46443: PUSH
46444: LD_VAR 0 4
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: LIST
46457: PUSH
46458: EMPTY
46459: LIST
46460: PPUSH
46461: CALL_OW 69
46465: ADD
46466: ST_TO_ADDR
46467: GO 46395
46469: POP
46470: POP
// for i = 1 to tmp do
46471: LD_ADDR_VAR 0 4
46475: PUSH
46476: DOUBLE
46477: LD_INT 1
46479: DEC
46480: ST_TO_ADDR
46481: LD_VAR 0 3
46485: PUSH
46486: FOR_TO
46487: IFFALSE 46575
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
46489: LD_ADDR_VAR 0 5
46493: PUSH
46494: LD_VAR 0 5
46498: PUSH
46499: LD_VAR 0 3
46503: PUSH
46504: LD_VAR 0 4
46508: ARRAY
46509: PPUSH
46510: CALL_OW 266
46514: PUSH
46515: LD_VAR 0 3
46519: PUSH
46520: LD_VAR 0 4
46524: ARRAY
46525: PPUSH
46526: CALL_OW 250
46530: PUSH
46531: LD_VAR 0 3
46535: PUSH
46536: LD_VAR 0 4
46540: ARRAY
46541: PPUSH
46542: CALL_OW 251
46546: PUSH
46547: LD_VAR 0 3
46551: PUSH
46552: LD_VAR 0 4
46556: ARRAY
46557: PPUSH
46558: CALL_OW 254
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: PUSH
46569: EMPTY
46570: LIST
46571: ADD
46572: ST_TO_ADDR
46573: GO 46486
46575: POP
46576: POP
// result := list ;
46577: LD_ADDR_VAR 0 2
46581: PUSH
46582: LD_VAR 0 5
46586: ST_TO_ADDR
// end ;
46587: LD_VAR 0 2
46591: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
46592: LD_INT 0
46594: PPUSH
46595: PPUSH
46596: PPUSH
46597: PPUSH
46598: PPUSH
46599: PPUSH
46600: PPUSH
// if not factory then
46601: LD_VAR 0 1
46605: NOT
46606: IFFALSE 46610
// exit ;
46608: GO 47203
// if control = control_apeman then
46610: LD_VAR 0 4
46614: PUSH
46615: LD_INT 5
46617: EQUAL
46618: IFFALSE 46727
// begin tmp := UnitsInside ( factory ) ;
46620: LD_ADDR_VAR 0 8
46624: PUSH
46625: LD_VAR 0 1
46629: PPUSH
46630: CALL_OW 313
46634: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
46635: LD_VAR 0 8
46639: PPUSH
46640: LD_INT 25
46642: PUSH
46643: LD_INT 12
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PPUSH
46650: CALL_OW 72
46654: NOT
46655: IFFALSE 46665
// control := control_manual ;
46657: LD_ADDR_VAR 0 4
46661: PUSH
46662: LD_INT 1
46664: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
46665: LD_ADDR_VAR 0 8
46669: PUSH
46670: LD_VAR 0 1
46674: PPUSH
46675: CALL 46362 0 1
46679: ST_TO_ADDR
// if tmp then
46680: LD_VAR 0 8
46684: IFFALSE 46727
// begin for i in tmp do
46686: LD_ADDR_VAR 0 7
46690: PUSH
46691: LD_VAR 0 8
46695: PUSH
46696: FOR_IN
46697: IFFALSE 46725
// if i [ 1 ] = b_ext_radio then
46699: LD_VAR 0 7
46703: PUSH
46704: LD_INT 1
46706: ARRAY
46707: PUSH
46708: LD_INT 22
46710: EQUAL
46711: IFFALSE 46723
// begin control := control_remote ;
46713: LD_ADDR_VAR 0 4
46717: PUSH
46718: LD_INT 2
46720: ST_TO_ADDR
// break ;
46721: GO 46725
// end ;
46723: GO 46696
46725: POP
46726: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
46727: LD_VAR 0 1
46731: PPUSH
46732: LD_VAR 0 2
46736: PPUSH
46737: LD_VAR 0 3
46741: PPUSH
46742: LD_VAR 0 4
46746: PPUSH
46747: LD_VAR 0 5
46751: PPUSH
46752: CALL_OW 448
46756: IFFALSE 46791
// begin result := [ chassis , engine , control , weapon ] ;
46758: LD_ADDR_VAR 0 6
46762: PUSH
46763: LD_VAR 0 2
46767: PUSH
46768: LD_VAR 0 3
46772: PUSH
46773: LD_VAR 0 4
46777: PUSH
46778: LD_VAR 0 5
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: ST_TO_ADDR
// exit ;
46789: GO 47203
// end ; _chassis := AvailableChassisList ( factory ) ;
46791: LD_ADDR_VAR 0 9
46795: PUSH
46796: LD_VAR 0 1
46800: PPUSH
46801: CALL_OW 475
46805: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
46806: LD_ADDR_VAR 0 11
46810: PUSH
46811: LD_VAR 0 1
46815: PPUSH
46816: CALL_OW 476
46820: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
46821: LD_ADDR_VAR 0 12
46825: PUSH
46826: LD_VAR 0 1
46830: PPUSH
46831: CALL_OW 477
46835: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
46836: LD_ADDR_VAR 0 10
46840: PUSH
46841: LD_VAR 0 1
46845: PPUSH
46846: CALL_OW 478
46850: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
46851: LD_VAR 0 9
46855: NOT
46856: PUSH
46857: LD_VAR 0 11
46861: NOT
46862: OR
46863: PUSH
46864: LD_VAR 0 12
46868: NOT
46869: OR
46870: PUSH
46871: LD_VAR 0 10
46875: NOT
46876: OR
46877: IFFALSE 46912
// begin result := [ chassis , engine , control , weapon ] ;
46879: LD_ADDR_VAR 0 6
46883: PUSH
46884: LD_VAR 0 2
46888: PUSH
46889: LD_VAR 0 3
46893: PUSH
46894: LD_VAR 0 4
46898: PUSH
46899: LD_VAR 0 5
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: ST_TO_ADDR
// exit ;
46910: GO 47203
// end ; if not chassis in _chassis then
46912: LD_VAR 0 2
46916: PUSH
46917: LD_VAR 0 9
46921: IN
46922: NOT
46923: IFFALSE 46949
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
46925: LD_ADDR_VAR 0 2
46929: PUSH
46930: LD_VAR 0 9
46934: PUSH
46935: LD_INT 1
46937: PPUSH
46938: LD_VAR 0 9
46942: PPUSH
46943: CALL_OW 12
46947: ARRAY
46948: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
46949: LD_VAR 0 2
46953: PPUSH
46954: LD_VAR 0 3
46958: PPUSH
46959: CALL 47208 0 2
46963: NOT
46964: IFFALSE 47023
// repeat engine := _engine [ 1 ] ;
46966: LD_ADDR_VAR 0 3
46970: PUSH
46971: LD_VAR 0 11
46975: PUSH
46976: LD_INT 1
46978: ARRAY
46979: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
46980: LD_ADDR_VAR 0 11
46984: PUSH
46985: LD_VAR 0 11
46989: PPUSH
46990: LD_INT 1
46992: PPUSH
46993: CALL_OW 3
46997: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
46998: LD_VAR 0 2
47002: PPUSH
47003: LD_VAR 0 3
47007: PPUSH
47008: CALL 47208 0 2
47012: PUSH
47013: LD_VAR 0 11
47017: PUSH
47018: EMPTY
47019: EQUAL
47020: OR
47021: IFFALSE 46966
// if not control in _control then
47023: LD_VAR 0 4
47027: PUSH
47028: LD_VAR 0 12
47032: IN
47033: NOT
47034: IFFALSE 47060
// control := _control [ rand ( 1 , _control ) ] ;
47036: LD_ADDR_VAR 0 4
47040: PUSH
47041: LD_VAR 0 12
47045: PUSH
47046: LD_INT 1
47048: PPUSH
47049: LD_VAR 0 12
47053: PPUSH
47054: CALL_OW 12
47058: ARRAY
47059: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
47060: LD_VAR 0 2
47064: PPUSH
47065: LD_VAR 0 5
47069: PPUSH
47070: CALL 47428 0 2
47074: NOT
47075: IFFALSE 47134
// repeat weapon := _weapon [ 1 ] ;
47077: LD_ADDR_VAR 0 5
47081: PUSH
47082: LD_VAR 0 10
47086: PUSH
47087: LD_INT 1
47089: ARRAY
47090: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
47091: LD_ADDR_VAR 0 10
47095: PUSH
47096: LD_VAR 0 10
47100: PPUSH
47101: LD_INT 1
47103: PPUSH
47104: CALL_OW 3
47108: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
47109: LD_VAR 0 2
47113: PPUSH
47114: LD_VAR 0 5
47118: PPUSH
47119: CALL 47428 0 2
47123: PUSH
47124: LD_VAR 0 10
47128: PUSH
47129: EMPTY
47130: EQUAL
47131: OR
47132: IFFALSE 47077
// result := [ ] ;
47134: LD_ADDR_VAR 0 6
47138: PUSH
47139: EMPTY
47140: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
47141: LD_VAR 0 1
47145: PPUSH
47146: LD_VAR 0 2
47150: PPUSH
47151: LD_VAR 0 3
47155: PPUSH
47156: LD_VAR 0 4
47160: PPUSH
47161: LD_VAR 0 5
47165: PPUSH
47166: CALL_OW 448
47170: IFFALSE 47203
// result := [ chassis , engine , control , weapon ] ;
47172: LD_ADDR_VAR 0 6
47176: PUSH
47177: LD_VAR 0 2
47181: PUSH
47182: LD_VAR 0 3
47186: PUSH
47187: LD_VAR 0 4
47191: PUSH
47192: LD_VAR 0 5
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: ST_TO_ADDR
// end ;
47203: LD_VAR 0 6
47207: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
47208: LD_INT 0
47210: PPUSH
// if not chassis or not engine then
47211: LD_VAR 0 1
47215: NOT
47216: PUSH
47217: LD_VAR 0 2
47221: NOT
47222: OR
47223: IFFALSE 47227
// exit ;
47225: GO 47423
// case engine of engine_solar :
47227: LD_VAR 0 2
47231: PUSH
47232: LD_INT 2
47234: DOUBLE
47235: EQUAL
47236: IFTRUE 47240
47238: GO 47278
47240: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
47241: LD_ADDR_VAR 0 3
47245: PUSH
47246: LD_INT 11
47248: PUSH
47249: LD_INT 12
47251: PUSH
47252: LD_INT 13
47254: PUSH
47255: LD_INT 14
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: LD_INT 2
47263: PUSH
47264: LD_INT 3
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: ST_TO_ADDR
47276: GO 47407
47278: LD_INT 1
47280: DOUBLE
47281: EQUAL
47282: IFTRUE 47286
47284: GO 47348
47286: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
47287: LD_ADDR_VAR 0 3
47291: PUSH
47292: LD_INT 11
47294: PUSH
47295: LD_INT 12
47297: PUSH
47298: LD_INT 13
47300: PUSH
47301: LD_INT 14
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: LD_INT 2
47309: PUSH
47310: LD_INT 3
47312: PUSH
47313: LD_INT 4
47315: PUSH
47316: LD_INT 5
47318: PUSH
47319: LD_INT 21
47321: PUSH
47322: LD_INT 23
47324: PUSH
47325: LD_INT 22
47327: PUSH
47328: LD_INT 24
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: ST_TO_ADDR
47346: GO 47407
47348: LD_INT 3
47350: DOUBLE
47351: EQUAL
47352: IFTRUE 47356
47354: GO 47406
47356: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
47357: LD_ADDR_VAR 0 3
47361: PUSH
47362: LD_INT 13
47364: PUSH
47365: LD_INT 14
47367: PUSH
47368: LD_INT 2
47370: PUSH
47371: LD_INT 3
47373: PUSH
47374: LD_INT 4
47376: PUSH
47377: LD_INT 5
47379: PUSH
47380: LD_INT 21
47382: PUSH
47383: LD_INT 22
47385: PUSH
47386: LD_INT 23
47388: PUSH
47389: LD_INT 24
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: ST_TO_ADDR
47404: GO 47407
47406: POP
// result := ( chassis in result ) ;
47407: LD_ADDR_VAR 0 3
47411: PUSH
47412: LD_VAR 0 1
47416: PUSH
47417: LD_VAR 0 3
47421: IN
47422: ST_TO_ADDR
// end ;
47423: LD_VAR 0 3
47427: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
47428: LD_INT 0
47430: PPUSH
// if not chassis or not weapon then
47431: LD_VAR 0 1
47435: NOT
47436: PUSH
47437: LD_VAR 0 2
47441: NOT
47442: OR
47443: IFFALSE 47447
// exit ;
47445: GO 48507
// case weapon of us_machine_gun :
47447: LD_VAR 0 2
47451: PUSH
47452: LD_INT 2
47454: DOUBLE
47455: EQUAL
47456: IFTRUE 47460
47458: GO 47490
47460: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
47461: LD_ADDR_VAR 0 3
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: LD_INT 2
47471: PUSH
47472: LD_INT 3
47474: PUSH
47475: LD_INT 4
47477: PUSH
47478: LD_INT 5
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: ST_TO_ADDR
47488: GO 48491
47490: LD_INT 3
47492: DOUBLE
47493: EQUAL
47494: IFTRUE 47498
47496: GO 47528
47498: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
47499: LD_ADDR_VAR 0 3
47503: PUSH
47504: LD_INT 1
47506: PUSH
47507: LD_INT 2
47509: PUSH
47510: LD_INT 3
47512: PUSH
47513: LD_INT 4
47515: PUSH
47516: LD_INT 5
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: ST_TO_ADDR
47526: GO 48491
47528: LD_INT 11
47530: DOUBLE
47531: EQUAL
47532: IFTRUE 47536
47534: GO 47566
47536: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
47537: LD_ADDR_VAR 0 3
47541: PUSH
47542: LD_INT 1
47544: PUSH
47545: LD_INT 2
47547: PUSH
47548: LD_INT 3
47550: PUSH
47551: LD_INT 4
47553: PUSH
47554: LD_INT 5
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: ST_TO_ADDR
47564: GO 48491
47566: LD_INT 4
47568: DOUBLE
47569: EQUAL
47570: IFTRUE 47574
47572: GO 47600
47574: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
47575: LD_ADDR_VAR 0 3
47579: PUSH
47580: LD_INT 2
47582: PUSH
47583: LD_INT 3
47585: PUSH
47586: LD_INT 4
47588: PUSH
47589: LD_INT 5
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: ST_TO_ADDR
47598: GO 48491
47600: LD_INT 5
47602: DOUBLE
47603: EQUAL
47604: IFTRUE 47608
47606: GO 47634
47608: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
47609: LD_ADDR_VAR 0 3
47613: PUSH
47614: LD_INT 2
47616: PUSH
47617: LD_INT 3
47619: PUSH
47620: LD_INT 4
47622: PUSH
47623: LD_INT 5
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: ST_TO_ADDR
47632: GO 48491
47634: LD_INT 9
47636: DOUBLE
47637: EQUAL
47638: IFTRUE 47642
47640: GO 47668
47642: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
47643: LD_ADDR_VAR 0 3
47647: PUSH
47648: LD_INT 2
47650: PUSH
47651: LD_INT 3
47653: PUSH
47654: LD_INT 4
47656: PUSH
47657: LD_INT 5
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: ST_TO_ADDR
47666: GO 48491
47668: LD_INT 7
47670: DOUBLE
47671: EQUAL
47672: IFTRUE 47676
47674: GO 47702
47676: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
47677: LD_ADDR_VAR 0 3
47681: PUSH
47682: LD_INT 2
47684: PUSH
47685: LD_INT 3
47687: PUSH
47688: LD_INT 4
47690: PUSH
47691: LD_INT 5
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: ST_TO_ADDR
47700: GO 48491
47702: LD_INT 12
47704: DOUBLE
47705: EQUAL
47706: IFTRUE 47710
47708: GO 47736
47710: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
47711: LD_ADDR_VAR 0 3
47715: PUSH
47716: LD_INT 2
47718: PUSH
47719: LD_INT 3
47721: PUSH
47722: LD_INT 4
47724: PUSH
47725: LD_INT 5
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: ST_TO_ADDR
47734: GO 48491
47736: LD_INT 13
47738: DOUBLE
47739: EQUAL
47740: IFTRUE 47744
47742: GO 47770
47744: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
47745: LD_ADDR_VAR 0 3
47749: PUSH
47750: LD_INT 2
47752: PUSH
47753: LD_INT 3
47755: PUSH
47756: LD_INT 4
47758: PUSH
47759: LD_INT 5
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: ST_TO_ADDR
47768: GO 48491
47770: LD_INT 14
47772: DOUBLE
47773: EQUAL
47774: IFTRUE 47778
47776: GO 47796
47778: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
47779: LD_ADDR_VAR 0 3
47783: PUSH
47784: LD_INT 4
47786: PUSH
47787: LD_INT 5
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: ST_TO_ADDR
47794: GO 48491
47796: LD_INT 6
47798: DOUBLE
47799: EQUAL
47800: IFTRUE 47804
47802: GO 47822
47804: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
47805: LD_ADDR_VAR 0 3
47809: PUSH
47810: LD_INT 4
47812: PUSH
47813: LD_INT 5
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: ST_TO_ADDR
47820: GO 48491
47822: LD_INT 10
47824: DOUBLE
47825: EQUAL
47826: IFTRUE 47830
47828: GO 47848
47830: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
47831: LD_ADDR_VAR 0 3
47835: PUSH
47836: LD_INT 4
47838: PUSH
47839: LD_INT 5
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: ST_TO_ADDR
47846: GO 48491
47848: LD_INT 22
47850: DOUBLE
47851: EQUAL
47852: IFTRUE 47856
47854: GO 47882
47856: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
47857: LD_ADDR_VAR 0 3
47861: PUSH
47862: LD_INT 11
47864: PUSH
47865: LD_INT 12
47867: PUSH
47868: LD_INT 13
47870: PUSH
47871: LD_INT 14
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: ST_TO_ADDR
47880: GO 48491
47882: LD_INT 23
47884: DOUBLE
47885: EQUAL
47886: IFTRUE 47890
47888: GO 47916
47890: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
47891: LD_ADDR_VAR 0 3
47895: PUSH
47896: LD_INT 11
47898: PUSH
47899: LD_INT 12
47901: PUSH
47902: LD_INT 13
47904: PUSH
47905: LD_INT 14
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: ST_TO_ADDR
47914: GO 48491
47916: LD_INT 24
47918: DOUBLE
47919: EQUAL
47920: IFTRUE 47924
47922: GO 47950
47924: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
47925: LD_ADDR_VAR 0 3
47929: PUSH
47930: LD_INT 11
47932: PUSH
47933: LD_INT 12
47935: PUSH
47936: LD_INT 13
47938: PUSH
47939: LD_INT 14
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: ST_TO_ADDR
47948: GO 48491
47950: LD_INT 30
47952: DOUBLE
47953: EQUAL
47954: IFTRUE 47958
47956: GO 47984
47958: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
47959: LD_ADDR_VAR 0 3
47963: PUSH
47964: LD_INT 11
47966: PUSH
47967: LD_INT 12
47969: PUSH
47970: LD_INT 13
47972: PUSH
47973: LD_INT 14
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: ST_TO_ADDR
47982: GO 48491
47984: LD_INT 25
47986: DOUBLE
47987: EQUAL
47988: IFTRUE 47992
47990: GO 48010
47992: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
47993: LD_ADDR_VAR 0 3
47997: PUSH
47998: LD_INT 13
48000: PUSH
48001: LD_INT 14
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: ST_TO_ADDR
48008: GO 48491
48010: LD_INT 27
48012: DOUBLE
48013: EQUAL
48014: IFTRUE 48018
48016: GO 48036
48018: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
48019: LD_ADDR_VAR 0 3
48023: PUSH
48024: LD_INT 13
48026: PUSH
48027: LD_INT 14
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: ST_TO_ADDR
48034: GO 48491
48036: LD_INT 92
48038: DOUBLE
48039: EQUAL
48040: IFTRUE 48044
48042: GO 48070
48044: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
48045: LD_ADDR_VAR 0 3
48049: PUSH
48050: LD_INT 11
48052: PUSH
48053: LD_INT 12
48055: PUSH
48056: LD_INT 13
48058: PUSH
48059: LD_INT 14
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: ST_TO_ADDR
48068: GO 48491
48070: LD_INT 28
48072: DOUBLE
48073: EQUAL
48074: IFTRUE 48078
48076: GO 48096
48078: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
48079: LD_ADDR_VAR 0 3
48083: PUSH
48084: LD_INT 13
48086: PUSH
48087: LD_INT 14
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: ST_TO_ADDR
48094: GO 48491
48096: LD_INT 29
48098: DOUBLE
48099: EQUAL
48100: IFTRUE 48104
48102: GO 48122
48104: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
48105: LD_ADDR_VAR 0 3
48109: PUSH
48110: LD_INT 13
48112: PUSH
48113: LD_INT 14
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: ST_TO_ADDR
48120: GO 48491
48122: LD_INT 31
48124: DOUBLE
48125: EQUAL
48126: IFTRUE 48130
48128: GO 48148
48130: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
48131: LD_ADDR_VAR 0 3
48135: PUSH
48136: LD_INT 13
48138: PUSH
48139: LD_INT 14
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: ST_TO_ADDR
48146: GO 48491
48148: LD_INT 26
48150: DOUBLE
48151: EQUAL
48152: IFTRUE 48156
48154: GO 48174
48156: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
48157: LD_ADDR_VAR 0 3
48161: PUSH
48162: LD_INT 13
48164: PUSH
48165: LD_INT 14
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: ST_TO_ADDR
48172: GO 48491
48174: LD_INT 42
48176: DOUBLE
48177: EQUAL
48178: IFTRUE 48182
48180: GO 48208
48182: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
48183: LD_ADDR_VAR 0 3
48187: PUSH
48188: LD_INT 21
48190: PUSH
48191: LD_INT 22
48193: PUSH
48194: LD_INT 23
48196: PUSH
48197: LD_INT 24
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: ST_TO_ADDR
48206: GO 48491
48208: LD_INT 43
48210: DOUBLE
48211: EQUAL
48212: IFTRUE 48216
48214: GO 48242
48216: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
48217: LD_ADDR_VAR 0 3
48221: PUSH
48222: LD_INT 21
48224: PUSH
48225: LD_INT 22
48227: PUSH
48228: LD_INT 23
48230: PUSH
48231: LD_INT 24
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: ST_TO_ADDR
48240: GO 48491
48242: LD_INT 44
48244: DOUBLE
48245: EQUAL
48246: IFTRUE 48250
48248: GO 48276
48250: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
48251: LD_ADDR_VAR 0 3
48255: PUSH
48256: LD_INT 21
48258: PUSH
48259: LD_INT 22
48261: PUSH
48262: LD_INT 23
48264: PUSH
48265: LD_INT 24
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: ST_TO_ADDR
48274: GO 48491
48276: LD_INT 45
48278: DOUBLE
48279: EQUAL
48280: IFTRUE 48284
48282: GO 48310
48284: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
48285: LD_ADDR_VAR 0 3
48289: PUSH
48290: LD_INT 21
48292: PUSH
48293: LD_INT 22
48295: PUSH
48296: LD_INT 23
48298: PUSH
48299: LD_INT 24
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: ST_TO_ADDR
48308: GO 48491
48310: LD_INT 49
48312: DOUBLE
48313: EQUAL
48314: IFTRUE 48318
48316: GO 48344
48318: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
48319: LD_ADDR_VAR 0 3
48323: PUSH
48324: LD_INT 21
48326: PUSH
48327: LD_INT 22
48329: PUSH
48330: LD_INT 23
48332: PUSH
48333: LD_INT 24
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: ST_TO_ADDR
48342: GO 48491
48344: LD_INT 51
48346: DOUBLE
48347: EQUAL
48348: IFTRUE 48352
48350: GO 48378
48352: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
48353: LD_ADDR_VAR 0 3
48357: PUSH
48358: LD_INT 21
48360: PUSH
48361: LD_INT 22
48363: PUSH
48364: LD_INT 23
48366: PUSH
48367: LD_INT 24
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: ST_TO_ADDR
48376: GO 48491
48378: LD_INT 52
48380: DOUBLE
48381: EQUAL
48382: IFTRUE 48386
48384: GO 48412
48386: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
48387: LD_ADDR_VAR 0 3
48391: PUSH
48392: LD_INT 21
48394: PUSH
48395: LD_INT 22
48397: PUSH
48398: LD_INT 23
48400: PUSH
48401: LD_INT 24
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: ST_TO_ADDR
48410: GO 48491
48412: LD_INT 53
48414: DOUBLE
48415: EQUAL
48416: IFTRUE 48420
48418: GO 48438
48420: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
48421: LD_ADDR_VAR 0 3
48425: PUSH
48426: LD_INT 23
48428: PUSH
48429: LD_INT 24
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: ST_TO_ADDR
48436: GO 48491
48438: LD_INT 46
48440: DOUBLE
48441: EQUAL
48442: IFTRUE 48446
48444: GO 48464
48446: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
48447: LD_ADDR_VAR 0 3
48451: PUSH
48452: LD_INT 23
48454: PUSH
48455: LD_INT 24
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: ST_TO_ADDR
48462: GO 48491
48464: LD_INT 47
48466: DOUBLE
48467: EQUAL
48468: IFTRUE 48472
48470: GO 48490
48472: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
48473: LD_ADDR_VAR 0 3
48477: PUSH
48478: LD_INT 23
48480: PUSH
48481: LD_INT 24
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: ST_TO_ADDR
48488: GO 48491
48490: POP
// result := ( chassis in result ) ;
48491: LD_ADDR_VAR 0 3
48495: PUSH
48496: LD_VAR 0 1
48500: PUSH
48501: LD_VAR 0 3
48505: IN
48506: ST_TO_ADDR
// end ;
48507: LD_VAR 0 3
48511: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
48512: LD_INT 0
48514: PPUSH
48515: PPUSH
48516: PPUSH
48517: PPUSH
48518: PPUSH
48519: PPUSH
48520: PPUSH
// result := array ;
48521: LD_ADDR_VAR 0 5
48525: PUSH
48526: LD_VAR 0 1
48530: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
48531: LD_VAR 0 1
48535: NOT
48536: PUSH
48537: LD_VAR 0 2
48541: NOT
48542: OR
48543: PUSH
48544: LD_VAR 0 3
48548: NOT
48549: OR
48550: PUSH
48551: LD_VAR 0 2
48555: PUSH
48556: LD_VAR 0 1
48560: GREATER
48561: OR
48562: PUSH
48563: LD_VAR 0 3
48567: PUSH
48568: LD_VAR 0 1
48572: GREATER
48573: OR
48574: IFFALSE 48578
// exit ;
48576: GO 48874
// if direction then
48578: LD_VAR 0 4
48582: IFFALSE 48646
// begin d := 1 ;
48584: LD_ADDR_VAR 0 9
48588: PUSH
48589: LD_INT 1
48591: ST_TO_ADDR
// if i_from > i_to then
48592: LD_VAR 0 2
48596: PUSH
48597: LD_VAR 0 3
48601: GREATER
48602: IFFALSE 48628
// length := ( array - i_from ) + i_to else
48604: LD_ADDR_VAR 0 11
48608: PUSH
48609: LD_VAR 0 1
48613: PUSH
48614: LD_VAR 0 2
48618: MINUS
48619: PUSH
48620: LD_VAR 0 3
48624: PLUS
48625: ST_TO_ADDR
48626: GO 48644
// length := i_to - i_from ;
48628: LD_ADDR_VAR 0 11
48632: PUSH
48633: LD_VAR 0 3
48637: PUSH
48638: LD_VAR 0 2
48642: MINUS
48643: ST_TO_ADDR
// end else
48644: GO 48707
// begin d := - 1 ;
48646: LD_ADDR_VAR 0 9
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: ST_TO_ADDR
// if i_from > i_to then
48655: LD_VAR 0 2
48659: PUSH
48660: LD_VAR 0 3
48664: GREATER
48665: IFFALSE 48685
// length := i_from - i_to else
48667: LD_ADDR_VAR 0 11
48671: PUSH
48672: LD_VAR 0 2
48676: PUSH
48677: LD_VAR 0 3
48681: MINUS
48682: ST_TO_ADDR
48683: GO 48707
// length := ( array - i_to ) + i_from ;
48685: LD_ADDR_VAR 0 11
48689: PUSH
48690: LD_VAR 0 1
48694: PUSH
48695: LD_VAR 0 3
48699: MINUS
48700: PUSH
48701: LD_VAR 0 2
48705: PLUS
48706: ST_TO_ADDR
// end ; if not length then
48707: LD_VAR 0 11
48711: NOT
48712: IFFALSE 48716
// exit ;
48714: GO 48874
// tmp := array ;
48716: LD_ADDR_VAR 0 10
48720: PUSH
48721: LD_VAR 0 1
48725: ST_TO_ADDR
// for i = 1 to length do
48726: LD_ADDR_VAR 0 6
48730: PUSH
48731: DOUBLE
48732: LD_INT 1
48734: DEC
48735: ST_TO_ADDR
48736: LD_VAR 0 11
48740: PUSH
48741: FOR_TO
48742: IFFALSE 48862
// begin for j = 1 to array do
48744: LD_ADDR_VAR 0 7
48748: PUSH
48749: DOUBLE
48750: LD_INT 1
48752: DEC
48753: ST_TO_ADDR
48754: LD_VAR 0 1
48758: PUSH
48759: FOR_TO
48760: IFFALSE 48848
// begin k := j + d ;
48762: LD_ADDR_VAR 0 8
48766: PUSH
48767: LD_VAR 0 7
48771: PUSH
48772: LD_VAR 0 9
48776: PLUS
48777: ST_TO_ADDR
// if k > array then
48778: LD_VAR 0 8
48782: PUSH
48783: LD_VAR 0 1
48787: GREATER
48788: IFFALSE 48798
// k := 1 ;
48790: LD_ADDR_VAR 0 8
48794: PUSH
48795: LD_INT 1
48797: ST_TO_ADDR
// if not k then
48798: LD_VAR 0 8
48802: NOT
48803: IFFALSE 48815
// k := array ;
48805: LD_ADDR_VAR 0 8
48809: PUSH
48810: LD_VAR 0 1
48814: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
48815: LD_ADDR_VAR 0 10
48819: PUSH
48820: LD_VAR 0 10
48824: PPUSH
48825: LD_VAR 0 8
48829: PPUSH
48830: LD_VAR 0 1
48834: PUSH
48835: LD_VAR 0 7
48839: ARRAY
48840: PPUSH
48841: CALL_OW 1
48845: ST_TO_ADDR
// end ;
48846: GO 48759
48848: POP
48849: POP
// array := tmp ;
48850: LD_ADDR_VAR 0 1
48854: PUSH
48855: LD_VAR 0 10
48859: ST_TO_ADDR
// end ;
48860: GO 48741
48862: POP
48863: POP
// result := array ;
48864: LD_ADDR_VAR 0 5
48868: PUSH
48869: LD_VAR 0 1
48873: ST_TO_ADDR
// end ;
48874: LD_VAR 0 5
48878: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
48879: LD_INT 0
48881: PPUSH
48882: PPUSH
// result := 0 ;
48883: LD_ADDR_VAR 0 3
48887: PUSH
48888: LD_INT 0
48890: ST_TO_ADDR
// if not array or not value in array then
48891: LD_VAR 0 1
48895: NOT
48896: PUSH
48897: LD_VAR 0 2
48901: PUSH
48902: LD_VAR 0 1
48906: IN
48907: NOT
48908: OR
48909: IFFALSE 48913
// exit ;
48911: GO 48967
// for i = 1 to array do
48913: LD_ADDR_VAR 0 4
48917: PUSH
48918: DOUBLE
48919: LD_INT 1
48921: DEC
48922: ST_TO_ADDR
48923: LD_VAR 0 1
48927: PUSH
48928: FOR_TO
48929: IFFALSE 48965
// if value = array [ i ] then
48931: LD_VAR 0 2
48935: PUSH
48936: LD_VAR 0 1
48940: PUSH
48941: LD_VAR 0 4
48945: ARRAY
48946: EQUAL
48947: IFFALSE 48963
// begin result := i ;
48949: LD_ADDR_VAR 0 3
48953: PUSH
48954: LD_VAR 0 4
48958: ST_TO_ADDR
// exit ;
48959: POP
48960: POP
48961: GO 48967
// end ;
48963: GO 48928
48965: POP
48966: POP
// end ;
48967: LD_VAR 0 3
48971: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
48972: LD_INT 0
48974: PPUSH
// vc_chassis := chassis ;
48975: LD_ADDR_OWVAR 37
48979: PUSH
48980: LD_VAR 0 1
48984: ST_TO_ADDR
// vc_engine := engine ;
48985: LD_ADDR_OWVAR 39
48989: PUSH
48990: LD_VAR 0 2
48994: ST_TO_ADDR
// vc_control := control ;
48995: LD_ADDR_OWVAR 38
48999: PUSH
49000: LD_VAR 0 3
49004: ST_TO_ADDR
// vc_weapon := weapon ;
49005: LD_ADDR_OWVAR 40
49009: PUSH
49010: LD_VAR 0 4
49014: ST_TO_ADDR
// vc_fuel_battery := fuel ;
49015: LD_ADDR_OWVAR 41
49019: PUSH
49020: LD_VAR 0 5
49024: ST_TO_ADDR
// end ;
49025: LD_VAR 0 6
49029: RET
// export function WantPlant ( unit ) ; var task ; begin
49030: LD_INT 0
49032: PPUSH
49033: PPUSH
// result := false ;
49034: LD_ADDR_VAR 0 2
49038: PUSH
49039: LD_INT 0
49041: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
49042: LD_ADDR_VAR 0 3
49046: PUSH
49047: LD_VAR 0 1
49051: PPUSH
49052: CALL_OW 437
49056: ST_TO_ADDR
// if task then
49057: LD_VAR 0 3
49061: IFFALSE 49089
// if task [ 1 ] [ 1 ] = p then
49063: LD_VAR 0 3
49067: PUSH
49068: LD_INT 1
49070: ARRAY
49071: PUSH
49072: LD_INT 1
49074: ARRAY
49075: PUSH
49076: LD_STRING p
49078: EQUAL
49079: IFFALSE 49089
// result := true ;
49081: LD_ADDR_VAR 0 2
49085: PUSH
49086: LD_INT 1
49088: ST_TO_ADDR
// end ;
49089: LD_VAR 0 2
49093: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
49094: LD_INT 0
49096: PPUSH
49097: PPUSH
49098: PPUSH
49099: PPUSH
// if pos < 1 then
49100: LD_VAR 0 2
49104: PUSH
49105: LD_INT 1
49107: LESS
49108: IFFALSE 49112
// exit ;
49110: GO 49415
// if pos = 1 then
49112: LD_VAR 0 2
49116: PUSH
49117: LD_INT 1
49119: EQUAL
49120: IFFALSE 49153
// result := Replace ( arr , pos [ 1 ] , value ) else
49122: LD_ADDR_VAR 0 4
49126: PUSH
49127: LD_VAR 0 1
49131: PPUSH
49132: LD_VAR 0 2
49136: PUSH
49137: LD_INT 1
49139: ARRAY
49140: PPUSH
49141: LD_VAR 0 3
49145: PPUSH
49146: CALL_OW 1
49150: ST_TO_ADDR
49151: GO 49415
// begin tmp := arr ;
49153: LD_ADDR_VAR 0 6
49157: PUSH
49158: LD_VAR 0 1
49162: ST_TO_ADDR
// s_arr := [ tmp ] ;
49163: LD_ADDR_VAR 0 7
49167: PUSH
49168: LD_VAR 0 6
49172: PUSH
49173: EMPTY
49174: LIST
49175: ST_TO_ADDR
// for i = 1 to pos - 1 do
49176: LD_ADDR_VAR 0 5
49180: PUSH
49181: DOUBLE
49182: LD_INT 1
49184: DEC
49185: ST_TO_ADDR
49186: LD_VAR 0 2
49190: PUSH
49191: LD_INT 1
49193: MINUS
49194: PUSH
49195: FOR_TO
49196: IFFALSE 49241
// begin tmp := tmp [ pos [ i ] ] ;
49198: LD_ADDR_VAR 0 6
49202: PUSH
49203: LD_VAR 0 6
49207: PUSH
49208: LD_VAR 0 2
49212: PUSH
49213: LD_VAR 0 5
49217: ARRAY
49218: ARRAY
49219: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
49220: LD_ADDR_VAR 0 7
49224: PUSH
49225: LD_VAR 0 7
49229: PUSH
49230: LD_VAR 0 6
49234: PUSH
49235: EMPTY
49236: LIST
49237: ADD
49238: ST_TO_ADDR
// end ;
49239: GO 49195
49241: POP
49242: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
49243: LD_ADDR_VAR 0 6
49247: PUSH
49248: LD_VAR 0 6
49252: PPUSH
49253: LD_VAR 0 2
49257: PUSH
49258: LD_VAR 0 2
49262: ARRAY
49263: PPUSH
49264: LD_VAR 0 3
49268: PPUSH
49269: CALL_OW 1
49273: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
49274: LD_ADDR_VAR 0 7
49278: PUSH
49279: LD_VAR 0 7
49283: PPUSH
49284: LD_VAR 0 7
49288: PPUSH
49289: LD_VAR 0 6
49293: PPUSH
49294: CALL_OW 1
49298: ST_TO_ADDR
// for i = s_arr downto 2 do
49299: LD_ADDR_VAR 0 5
49303: PUSH
49304: DOUBLE
49305: LD_VAR 0 7
49309: INC
49310: ST_TO_ADDR
49311: LD_INT 2
49313: PUSH
49314: FOR_DOWNTO
49315: IFFALSE 49399
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
49317: LD_ADDR_VAR 0 6
49321: PUSH
49322: LD_VAR 0 7
49326: PUSH
49327: LD_VAR 0 5
49331: PUSH
49332: LD_INT 1
49334: MINUS
49335: ARRAY
49336: PPUSH
49337: LD_VAR 0 2
49341: PUSH
49342: LD_VAR 0 5
49346: PUSH
49347: LD_INT 1
49349: MINUS
49350: ARRAY
49351: PPUSH
49352: LD_VAR 0 7
49356: PUSH
49357: LD_VAR 0 5
49361: ARRAY
49362: PPUSH
49363: CALL_OW 1
49367: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
49368: LD_ADDR_VAR 0 7
49372: PUSH
49373: LD_VAR 0 7
49377: PPUSH
49378: LD_VAR 0 5
49382: PUSH
49383: LD_INT 1
49385: MINUS
49386: PPUSH
49387: LD_VAR 0 6
49391: PPUSH
49392: CALL_OW 1
49396: ST_TO_ADDR
// end ;
49397: GO 49314
49399: POP
49400: POP
// result := s_arr [ 1 ] ;
49401: LD_ADDR_VAR 0 4
49405: PUSH
49406: LD_VAR 0 7
49410: PUSH
49411: LD_INT 1
49413: ARRAY
49414: ST_TO_ADDR
// end ; end ;
49415: LD_VAR 0 4
49419: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
49420: LD_INT 0
49422: PPUSH
49423: PPUSH
// if not list then
49424: LD_VAR 0 1
49428: NOT
49429: IFFALSE 49433
// exit ;
49431: GO 49524
// i := list [ pos1 ] ;
49433: LD_ADDR_VAR 0 5
49437: PUSH
49438: LD_VAR 0 1
49442: PUSH
49443: LD_VAR 0 2
49447: ARRAY
49448: ST_TO_ADDR
// if not i then
49449: LD_VAR 0 5
49453: NOT
49454: IFFALSE 49458
// exit ;
49456: GO 49524
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
49458: LD_ADDR_VAR 0 1
49462: PUSH
49463: LD_VAR 0 1
49467: PPUSH
49468: LD_VAR 0 2
49472: PPUSH
49473: LD_VAR 0 1
49477: PUSH
49478: LD_VAR 0 3
49482: ARRAY
49483: PPUSH
49484: CALL_OW 1
49488: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
49489: LD_ADDR_VAR 0 1
49493: PUSH
49494: LD_VAR 0 1
49498: PPUSH
49499: LD_VAR 0 3
49503: PPUSH
49504: LD_VAR 0 5
49508: PPUSH
49509: CALL_OW 1
49513: ST_TO_ADDR
// result := list ;
49514: LD_ADDR_VAR 0 4
49518: PUSH
49519: LD_VAR 0 1
49523: ST_TO_ADDR
// end ;
49524: LD_VAR 0 4
49528: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
49529: LD_INT 0
49531: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
49532: LD_ADDR_VAR 0 5
49536: PUSH
49537: LD_VAR 0 1
49541: PPUSH
49542: CALL_OW 250
49546: PPUSH
49547: LD_VAR 0 1
49551: PPUSH
49552: CALL_OW 251
49556: PPUSH
49557: LD_VAR 0 2
49561: PPUSH
49562: LD_VAR 0 3
49566: PPUSH
49567: LD_VAR 0 4
49571: PPUSH
49572: CALL 49582 0 5
49576: ST_TO_ADDR
// end ;
49577: LD_VAR 0 5
49581: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
49582: LD_INT 0
49584: PPUSH
49585: PPUSH
49586: PPUSH
49587: PPUSH
// if not list then
49588: LD_VAR 0 3
49592: NOT
49593: IFFALSE 49597
// exit ;
49595: GO 49985
// result := [ ] ;
49597: LD_ADDR_VAR 0 6
49601: PUSH
49602: EMPTY
49603: ST_TO_ADDR
// for i in list do
49604: LD_ADDR_VAR 0 7
49608: PUSH
49609: LD_VAR 0 3
49613: PUSH
49614: FOR_IN
49615: IFFALSE 49817
// begin tmp := GetDistUnitXY ( i , x , y ) ;
49617: LD_ADDR_VAR 0 9
49621: PUSH
49622: LD_VAR 0 7
49626: PPUSH
49627: LD_VAR 0 1
49631: PPUSH
49632: LD_VAR 0 2
49636: PPUSH
49637: CALL_OW 297
49641: ST_TO_ADDR
// if not result then
49642: LD_VAR 0 6
49646: NOT
49647: IFFALSE 49673
// result := [ [ i , tmp ] ] else
49649: LD_ADDR_VAR 0 6
49653: PUSH
49654: LD_VAR 0 7
49658: PUSH
49659: LD_VAR 0 9
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: EMPTY
49669: LIST
49670: ST_TO_ADDR
49671: GO 49815
// begin if result [ result ] [ 2 ] < tmp then
49673: LD_VAR 0 6
49677: PUSH
49678: LD_VAR 0 6
49682: ARRAY
49683: PUSH
49684: LD_INT 2
49686: ARRAY
49687: PUSH
49688: LD_VAR 0 9
49692: LESS
49693: IFFALSE 49735
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
49695: LD_ADDR_VAR 0 6
49699: PUSH
49700: LD_VAR 0 6
49704: PPUSH
49705: LD_VAR 0 6
49709: PUSH
49710: LD_INT 1
49712: PLUS
49713: PPUSH
49714: LD_VAR 0 7
49718: PUSH
49719: LD_VAR 0 9
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PPUSH
49728: CALL_OW 2
49732: ST_TO_ADDR
49733: GO 49815
// for j = 1 to result do
49735: LD_ADDR_VAR 0 8
49739: PUSH
49740: DOUBLE
49741: LD_INT 1
49743: DEC
49744: ST_TO_ADDR
49745: LD_VAR 0 6
49749: PUSH
49750: FOR_TO
49751: IFFALSE 49813
// begin if tmp < result [ j ] [ 2 ] then
49753: LD_VAR 0 9
49757: PUSH
49758: LD_VAR 0 6
49762: PUSH
49763: LD_VAR 0 8
49767: ARRAY
49768: PUSH
49769: LD_INT 2
49771: ARRAY
49772: LESS
49773: IFFALSE 49811
// begin result := Insert ( result , j , [ i , tmp ] ) ;
49775: LD_ADDR_VAR 0 6
49779: PUSH
49780: LD_VAR 0 6
49784: PPUSH
49785: LD_VAR 0 8
49789: PPUSH
49790: LD_VAR 0 7
49794: PUSH
49795: LD_VAR 0 9
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PPUSH
49804: CALL_OW 2
49808: ST_TO_ADDR
// break ;
49809: GO 49813
// end ; end ;
49811: GO 49750
49813: POP
49814: POP
// end ; end ;
49815: GO 49614
49817: POP
49818: POP
// if result and not asc then
49819: LD_VAR 0 6
49823: PUSH
49824: LD_VAR 0 4
49828: NOT
49829: AND
49830: IFFALSE 49905
// begin tmp := result ;
49832: LD_ADDR_VAR 0 9
49836: PUSH
49837: LD_VAR 0 6
49841: ST_TO_ADDR
// for i = tmp downto 1 do
49842: LD_ADDR_VAR 0 7
49846: PUSH
49847: DOUBLE
49848: LD_VAR 0 9
49852: INC
49853: ST_TO_ADDR
49854: LD_INT 1
49856: PUSH
49857: FOR_DOWNTO
49858: IFFALSE 49903
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
49860: LD_ADDR_VAR 0 6
49864: PUSH
49865: LD_VAR 0 6
49869: PPUSH
49870: LD_VAR 0 9
49874: PUSH
49875: LD_VAR 0 7
49879: MINUS
49880: PUSH
49881: LD_INT 1
49883: PLUS
49884: PPUSH
49885: LD_VAR 0 9
49889: PUSH
49890: LD_VAR 0 7
49894: ARRAY
49895: PPUSH
49896: CALL_OW 1
49900: ST_TO_ADDR
49901: GO 49857
49903: POP
49904: POP
// end ; tmp := [ ] ;
49905: LD_ADDR_VAR 0 9
49909: PUSH
49910: EMPTY
49911: ST_TO_ADDR
// if mode then
49912: LD_VAR 0 5
49916: IFFALSE 49985
// begin for i = 1 to result do
49918: LD_ADDR_VAR 0 7
49922: PUSH
49923: DOUBLE
49924: LD_INT 1
49926: DEC
49927: ST_TO_ADDR
49928: LD_VAR 0 6
49932: PUSH
49933: FOR_TO
49934: IFFALSE 49973
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
49936: LD_ADDR_VAR 0 9
49940: PUSH
49941: LD_VAR 0 9
49945: PPUSH
49946: LD_VAR 0 7
49950: PPUSH
49951: LD_VAR 0 6
49955: PUSH
49956: LD_VAR 0 7
49960: ARRAY
49961: PUSH
49962: LD_INT 1
49964: ARRAY
49965: PPUSH
49966: CALL_OW 1
49970: ST_TO_ADDR
49971: GO 49933
49973: POP
49974: POP
// result := tmp ;
49975: LD_ADDR_VAR 0 6
49979: PUSH
49980: LD_VAR 0 9
49984: ST_TO_ADDR
// end ; end ;
49985: LD_VAR 0 6
49989: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
49990: LD_INT 0
49992: PPUSH
49993: PPUSH
49994: PPUSH
49995: PPUSH
49996: PPUSH
49997: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
49998: LD_ADDR_VAR 0 5
50002: PUSH
50003: LD_INT 0
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: LD_INT 0
50011: PUSH
50012: EMPTY
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: ST_TO_ADDR
// if not x or not y then
50020: LD_VAR 0 2
50024: NOT
50025: PUSH
50026: LD_VAR 0 3
50030: NOT
50031: OR
50032: IFFALSE 50036
// exit ;
50034: GO 51686
// if not range then
50036: LD_VAR 0 4
50040: NOT
50041: IFFALSE 50051
// range := 10 ;
50043: LD_ADDR_VAR 0 4
50047: PUSH
50048: LD_INT 10
50050: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
50051: LD_ADDR_VAR 0 8
50055: PUSH
50056: LD_INT 81
50058: PUSH
50059: LD_VAR 0 1
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 92
50070: PUSH
50071: LD_VAR 0 2
50075: PUSH
50076: LD_VAR 0 3
50080: PUSH
50081: LD_VAR 0 4
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 3
50094: PUSH
50095: LD_INT 21
50097: PUSH
50098: LD_INT 3
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: LIST
50113: PPUSH
50114: CALL_OW 69
50118: ST_TO_ADDR
// if not tmp then
50119: LD_VAR 0 8
50123: NOT
50124: IFFALSE 50128
// exit ;
50126: GO 51686
// for i in tmp do
50128: LD_ADDR_VAR 0 6
50132: PUSH
50133: LD_VAR 0 8
50137: PUSH
50138: FOR_IN
50139: IFFALSE 51661
// begin points := [ 0 , 0 , 0 ] ;
50141: LD_ADDR_VAR 0 9
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: LIST
50159: ST_TO_ADDR
// bpoints := 1 ;
50160: LD_ADDR_VAR 0 10
50164: PUSH
50165: LD_INT 1
50167: ST_TO_ADDR
// case GetType ( i ) of unit_human :
50168: LD_VAR 0 6
50172: PPUSH
50173: CALL_OW 247
50177: PUSH
50178: LD_INT 1
50180: DOUBLE
50181: EQUAL
50182: IFTRUE 50186
50184: GO 50764
50186: POP
// begin if GetClass ( i ) = 1 then
50187: LD_VAR 0 6
50191: PPUSH
50192: CALL_OW 257
50196: PUSH
50197: LD_INT 1
50199: EQUAL
50200: IFFALSE 50221
// points := [ 10 , 5 , 3 ] ;
50202: LD_ADDR_VAR 0 9
50206: PUSH
50207: LD_INT 10
50209: PUSH
50210: LD_INT 5
50212: PUSH
50213: LD_INT 3
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: LIST
50220: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
50221: LD_VAR 0 6
50225: PPUSH
50226: CALL_OW 257
50230: PUSH
50231: LD_INT 2
50233: PUSH
50234: LD_INT 3
50236: PUSH
50237: LD_INT 4
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: LIST
50244: IN
50245: IFFALSE 50266
// points := [ 3 , 2 , 1 ] ;
50247: LD_ADDR_VAR 0 9
50251: PUSH
50252: LD_INT 3
50254: PUSH
50255: LD_INT 2
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: LIST
50265: ST_TO_ADDR
// if GetClass ( i ) = 5 then
50266: LD_VAR 0 6
50270: PPUSH
50271: CALL_OW 257
50275: PUSH
50276: LD_INT 5
50278: EQUAL
50279: IFFALSE 50300
// points := [ 130 , 5 , 2 ] ;
50281: LD_ADDR_VAR 0 9
50285: PUSH
50286: LD_INT 130
50288: PUSH
50289: LD_INT 5
50291: PUSH
50292: LD_INT 2
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: LIST
50299: ST_TO_ADDR
// if GetClass ( i ) = 8 then
50300: LD_VAR 0 6
50304: PPUSH
50305: CALL_OW 257
50309: PUSH
50310: LD_INT 8
50312: EQUAL
50313: IFFALSE 50334
// points := [ 35 , 35 , 30 ] ;
50315: LD_ADDR_VAR 0 9
50319: PUSH
50320: LD_INT 35
50322: PUSH
50323: LD_INT 35
50325: PUSH
50326: LD_INT 30
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: LIST
50333: ST_TO_ADDR
// if GetClass ( i ) = 9 then
50334: LD_VAR 0 6
50338: PPUSH
50339: CALL_OW 257
50343: PUSH
50344: LD_INT 9
50346: EQUAL
50347: IFFALSE 50368
// points := [ 20 , 55 , 40 ] ;
50349: LD_ADDR_VAR 0 9
50353: PUSH
50354: LD_INT 20
50356: PUSH
50357: LD_INT 55
50359: PUSH
50360: LD_INT 40
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: LIST
50367: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
50368: LD_VAR 0 6
50372: PPUSH
50373: CALL_OW 257
50377: PUSH
50378: LD_INT 12
50380: PUSH
50381: LD_INT 16
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: IN
50388: IFFALSE 50409
// points := [ 5 , 3 , 2 ] ;
50390: LD_ADDR_VAR 0 9
50394: PUSH
50395: LD_INT 5
50397: PUSH
50398: LD_INT 3
50400: PUSH
50401: LD_INT 2
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: LIST
50408: ST_TO_ADDR
// if GetClass ( i ) = 17 then
50409: LD_VAR 0 6
50413: PPUSH
50414: CALL_OW 257
50418: PUSH
50419: LD_INT 17
50421: EQUAL
50422: IFFALSE 50443
// points := [ 100 , 50 , 75 ] ;
50424: LD_ADDR_VAR 0 9
50428: PUSH
50429: LD_INT 100
50431: PUSH
50432: LD_INT 50
50434: PUSH
50435: LD_INT 75
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: LIST
50442: ST_TO_ADDR
// if GetClass ( i ) = 15 then
50443: LD_VAR 0 6
50447: PPUSH
50448: CALL_OW 257
50452: PUSH
50453: LD_INT 15
50455: EQUAL
50456: IFFALSE 50477
// points := [ 10 , 5 , 3 ] ;
50458: LD_ADDR_VAR 0 9
50462: PUSH
50463: LD_INT 10
50465: PUSH
50466: LD_INT 5
50468: PUSH
50469: LD_INT 3
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: LIST
50476: ST_TO_ADDR
// if GetClass ( i ) = 14 then
50477: LD_VAR 0 6
50481: PPUSH
50482: CALL_OW 257
50486: PUSH
50487: LD_INT 14
50489: EQUAL
50490: IFFALSE 50511
// points := [ 10 , 0 , 0 ] ;
50492: LD_ADDR_VAR 0 9
50496: PUSH
50497: LD_INT 10
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: LIST
50510: ST_TO_ADDR
// if GetClass ( i ) = 11 then
50511: LD_VAR 0 6
50515: PPUSH
50516: CALL_OW 257
50520: PUSH
50521: LD_INT 11
50523: EQUAL
50524: IFFALSE 50545
// points := [ 30 , 10 , 5 ] ;
50526: LD_ADDR_VAR 0 9
50530: PUSH
50531: LD_INT 30
50533: PUSH
50534: LD_INT 10
50536: PUSH
50537: LD_INT 5
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: LIST
50544: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
50545: LD_VAR 0 1
50549: PPUSH
50550: LD_INT 5
50552: PPUSH
50553: CALL_OW 321
50557: PUSH
50558: LD_INT 2
50560: EQUAL
50561: IFFALSE 50578
// bpoints := bpoints * 1.8 ;
50563: LD_ADDR_VAR 0 10
50567: PUSH
50568: LD_VAR 0 10
50572: PUSH
50573: LD_REAL  1.80000000000000E+0000
50576: MUL
50577: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
50578: LD_VAR 0 6
50582: PPUSH
50583: CALL_OW 257
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: LD_INT 2
50593: PUSH
50594: LD_INT 3
50596: PUSH
50597: LD_INT 4
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: IN
50606: PUSH
50607: LD_VAR 0 1
50611: PPUSH
50612: LD_INT 51
50614: PPUSH
50615: CALL_OW 321
50619: PUSH
50620: LD_INT 2
50622: EQUAL
50623: AND
50624: IFFALSE 50641
// bpoints := bpoints * 1.2 ;
50626: LD_ADDR_VAR 0 10
50630: PUSH
50631: LD_VAR 0 10
50635: PUSH
50636: LD_REAL  1.20000000000000E+0000
50639: MUL
50640: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
50641: LD_VAR 0 6
50645: PPUSH
50646: CALL_OW 257
50650: PUSH
50651: LD_INT 5
50653: PUSH
50654: LD_INT 7
50656: PUSH
50657: LD_INT 9
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: LIST
50664: IN
50665: PUSH
50666: LD_VAR 0 1
50670: PPUSH
50671: LD_INT 52
50673: PPUSH
50674: CALL_OW 321
50678: PUSH
50679: LD_INT 2
50681: EQUAL
50682: AND
50683: IFFALSE 50700
// bpoints := bpoints * 1.5 ;
50685: LD_ADDR_VAR 0 10
50689: PUSH
50690: LD_VAR 0 10
50694: PUSH
50695: LD_REAL  1.50000000000000E+0000
50698: MUL
50699: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
50700: LD_VAR 0 1
50704: PPUSH
50705: LD_INT 66
50707: PPUSH
50708: CALL_OW 321
50712: PUSH
50713: LD_INT 2
50715: EQUAL
50716: IFFALSE 50733
// bpoints := bpoints * 1.1 ;
50718: LD_ADDR_VAR 0 10
50722: PUSH
50723: LD_VAR 0 10
50727: PUSH
50728: LD_REAL  1.10000000000000E+0000
50731: MUL
50732: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
50733: LD_ADDR_VAR 0 10
50737: PUSH
50738: LD_VAR 0 10
50742: PUSH
50743: LD_VAR 0 6
50747: PPUSH
50748: LD_INT 1
50750: PPUSH
50751: CALL_OW 259
50755: PUSH
50756: LD_REAL  1.15000000000000E+0000
50759: MUL
50760: MUL
50761: ST_TO_ADDR
// end ; unit_vehicle :
50762: GO 51590
50764: LD_INT 2
50766: DOUBLE
50767: EQUAL
50768: IFTRUE 50772
50770: GO 51578
50772: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
50773: LD_VAR 0 6
50777: PPUSH
50778: CALL_OW 264
50782: PUSH
50783: LD_INT 2
50785: PUSH
50786: LD_INT 42
50788: PUSH
50789: LD_INT 24
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: LIST
50796: IN
50797: IFFALSE 50818
// points := [ 25 , 5 , 3 ] ;
50799: LD_ADDR_VAR 0 9
50803: PUSH
50804: LD_INT 25
50806: PUSH
50807: LD_INT 5
50809: PUSH
50810: LD_INT 3
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: LIST
50817: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
50818: LD_VAR 0 6
50822: PPUSH
50823: CALL_OW 264
50827: PUSH
50828: LD_INT 4
50830: PUSH
50831: LD_INT 43
50833: PUSH
50834: LD_INT 25
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: LIST
50841: IN
50842: IFFALSE 50863
// points := [ 40 , 15 , 5 ] ;
50844: LD_ADDR_VAR 0 9
50848: PUSH
50849: LD_INT 40
50851: PUSH
50852: LD_INT 15
50854: PUSH
50855: LD_INT 5
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: LIST
50862: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
50863: LD_VAR 0 6
50867: PPUSH
50868: CALL_OW 264
50872: PUSH
50873: LD_INT 3
50875: PUSH
50876: LD_INT 23
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: IN
50883: IFFALSE 50904
// points := [ 7 , 25 , 8 ] ;
50885: LD_ADDR_VAR 0 9
50889: PUSH
50890: LD_INT 7
50892: PUSH
50893: LD_INT 25
50895: PUSH
50896: LD_INT 8
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: LIST
50903: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
50904: LD_VAR 0 6
50908: PPUSH
50909: CALL_OW 264
50913: PUSH
50914: LD_INT 5
50916: PUSH
50917: LD_INT 27
50919: PUSH
50920: LD_INT 44
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: LIST
50927: IN
50928: IFFALSE 50949
// points := [ 14 , 50 , 16 ] ;
50930: LD_ADDR_VAR 0 9
50934: PUSH
50935: LD_INT 14
50937: PUSH
50938: LD_INT 50
50940: PUSH
50941: LD_INT 16
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: LIST
50948: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
50949: LD_VAR 0 6
50953: PPUSH
50954: CALL_OW 264
50958: PUSH
50959: LD_INT 6
50961: PUSH
50962: LD_INT 46
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: IN
50969: IFFALSE 50990
// points := [ 32 , 120 , 70 ] ;
50971: LD_ADDR_VAR 0 9
50975: PUSH
50976: LD_INT 32
50978: PUSH
50979: LD_INT 120
50981: PUSH
50982: LD_INT 70
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: LIST
50989: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
50990: LD_VAR 0 6
50994: PPUSH
50995: CALL_OW 264
50999: PUSH
51000: LD_INT 7
51002: PUSH
51003: LD_INT 28
51005: PUSH
51006: LD_INT 45
51008: PUSH
51009: LD_INT 92
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: IN
51018: IFFALSE 51039
// points := [ 35 , 20 , 45 ] ;
51020: LD_ADDR_VAR 0 9
51024: PUSH
51025: LD_INT 35
51027: PUSH
51028: LD_INT 20
51030: PUSH
51031: LD_INT 45
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: LIST
51038: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
51039: LD_VAR 0 6
51043: PPUSH
51044: CALL_OW 264
51048: PUSH
51049: LD_INT 47
51051: PUSH
51052: EMPTY
51053: LIST
51054: IN
51055: IFFALSE 51076
// points := [ 67 , 45 , 75 ] ;
51057: LD_ADDR_VAR 0 9
51061: PUSH
51062: LD_INT 67
51064: PUSH
51065: LD_INT 45
51067: PUSH
51068: LD_INT 75
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: LIST
51075: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
51076: LD_VAR 0 6
51080: PPUSH
51081: CALL_OW 264
51085: PUSH
51086: LD_INT 26
51088: PUSH
51089: EMPTY
51090: LIST
51091: IN
51092: IFFALSE 51113
// points := [ 120 , 30 , 80 ] ;
51094: LD_ADDR_VAR 0 9
51098: PUSH
51099: LD_INT 120
51101: PUSH
51102: LD_INT 30
51104: PUSH
51105: LD_INT 80
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: LIST
51112: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
51113: LD_VAR 0 6
51117: PPUSH
51118: CALL_OW 264
51122: PUSH
51123: LD_INT 22
51125: PUSH
51126: EMPTY
51127: LIST
51128: IN
51129: IFFALSE 51150
// points := [ 40 , 1 , 1 ] ;
51131: LD_ADDR_VAR 0 9
51135: PUSH
51136: LD_INT 40
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: LD_INT 1
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: LIST
51149: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
51150: LD_VAR 0 6
51154: PPUSH
51155: CALL_OW 264
51159: PUSH
51160: LD_INT 29
51162: PUSH
51163: EMPTY
51164: LIST
51165: IN
51166: IFFALSE 51187
// points := [ 70 , 200 , 400 ] ;
51168: LD_ADDR_VAR 0 9
51172: PUSH
51173: LD_INT 70
51175: PUSH
51176: LD_INT 200
51178: PUSH
51179: LD_INT 400
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: LIST
51186: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
51187: LD_VAR 0 6
51191: PPUSH
51192: CALL_OW 264
51196: PUSH
51197: LD_INT 14
51199: PUSH
51200: LD_INT 53
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: IN
51207: IFFALSE 51228
// points := [ 40 , 10 , 20 ] ;
51209: LD_ADDR_VAR 0 9
51213: PUSH
51214: LD_INT 40
51216: PUSH
51217: LD_INT 10
51219: PUSH
51220: LD_INT 20
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: LIST
51227: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
51228: LD_VAR 0 6
51232: PPUSH
51233: CALL_OW 264
51237: PUSH
51238: LD_INT 9
51240: PUSH
51241: EMPTY
51242: LIST
51243: IN
51244: IFFALSE 51265
// points := [ 5 , 70 , 20 ] ;
51246: LD_ADDR_VAR 0 9
51250: PUSH
51251: LD_INT 5
51253: PUSH
51254: LD_INT 70
51256: PUSH
51257: LD_INT 20
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: LIST
51264: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
51265: LD_VAR 0 6
51269: PPUSH
51270: CALL_OW 264
51274: PUSH
51275: LD_INT 10
51277: PUSH
51278: EMPTY
51279: LIST
51280: IN
51281: IFFALSE 51302
// points := [ 35 , 110 , 70 ] ;
51283: LD_ADDR_VAR 0 9
51287: PUSH
51288: LD_INT 35
51290: PUSH
51291: LD_INT 110
51293: PUSH
51294: LD_INT 70
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: LIST
51301: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
51302: LD_VAR 0 6
51306: PPUSH
51307: CALL_OW 265
51311: PUSH
51312: LD_INT 25
51314: EQUAL
51315: IFFALSE 51336
// points := [ 80 , 65 , 100 ] ;
51317: LD_ADDR_VAR 0 9
51321: PUSH
51322: LD_INT 80
51324: PUSH
51325: LD_INT 65
51327: PUSH
51328: LD_INT 100
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: LIST
51335: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
51336: LD_VAR 0 6
51340: PPUSH
51341: CALL_OW 263
51345: PUSH
51346: LD_INT 1
51348: EQUAL
51349: IFFALSE 51384
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
51351: LD_ADDR_VAR 0 10
51355: PUSH
51356: LD_VAR 0 10
51360: PUSH
51361: LD_VAR 0 6
51365: PPUSH
51366: CALL_OW 311
51370: PPUSH
51371: LD_INT 3
51373: PPUSH
51374: CALL_OW 259
51378: PUSH
51379: LD_INT 4
51381: MUL
51382: MUL
51383: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
51384: LD_VAR 0 6
51388: PPUSH
51389: CALL_OW 263
51393: PUSH
51394: LD_INT 2
51396: EQUAL
51397: IFFALSE 51448
// begin j := IsControledBy ( i ) ;
51399: LD_ADDR_VAR 0 7
51403: PUSH
51404: LD_VAR 0 6
51408: PPUSH
51409: CALL_OW 312
51413: ST_TO_ADDR
// if j then
51414: LD_VAR 0 7
51418: IFFALSE 51448
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
51420: LD_ADDR_VAR 0 10
51424: PUSH
51425: LD_VAR 0 10
51429: PUSH
51430: LD_VAR 0 7
51434: PPUSH
51435: LD_INT 3
51437: PPUSH
51438: CALL_OW 259
51442: PUSH
51443: LD_INT 3
51445: MUL
51446: MUL
51447: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
51448: LD_VAR 0 6
51452: PPUSH
51453: CALL_OW 264
51457: PUSH
51458: LD_INT 5
51460: PUSH
51461: LD_INT 6
51463: PUSH
51464: LD_INT 46
51466: PUSH
51467: LD_INT 44
51469: PUSH
51470: LD_INT 47
51472: PUSH
51473: LD_INT 45
51475: PUSH
51476: LD_INT 28
51478: PUSH
51479: LD_INT 7
51481: PUSH
51482: LD_INT 27
51484: PUSH
51485: LD_INT 29
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: IN
51500: PUSH
51501: LD_VAR 0 1
51505: PPUSH
51506: LD_INT 52
51508: PPUSH
51509: CALL_OW 321
51513: PUSH
51514: LD_INT 2
51516: EQUAL
51517: AND
51518: IFFALSE 51535
// bpoints := bpoints * 1.2 ;
51520: LD_ADDR_VAR 0 10
51524: PUSH
51525: LD_VAR 0 10
51529: PUSH
51530: LD_REAL  1.20000000000000E+0000
51533: MUL
51534: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
51535: LD_VAR 0 6
51539: PPUSH
51540: CALL_OW 264
51544: PUSH
51545: LD_INT 6
51547: PUSH
51548: LD_INT 46
51550: PUSH
51551: LD_INT 47
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: LIST
51558: IN
51559: IFFALSE 51576
// bpoints := bpoints * 1.2 ;
51561: LD_ADDR_VAR 0 10
51565: PUSH
51566: LD_VAR 0 10
51570: PUSH
51571: LD_REAL  1.20000000000000E+0000
51574: MUL
51575: ST_TO_ADDR
// end ; unit_building :
51576: GO 51590
51578: LD_INT 3
51580: DOUBLE
51581: EQUAL
51582: IFTRUE 51586
51584: GO 51589
51586: POP
// ; end ;
51587: GO 51590
51589: POP
// for j = 1 to 3 do
51590: LD_ADDR_VAR 0 7
51594: PUSH
51595: DOUBLE
51596: LD_INT 1
51598: DEC
51599: ST_TO_ADDR
51600: LD_INT 3
51602: PUSH
51603: FOR_TO
51604: IFFALSE 51657
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
51606: LD_ADDR_VAR 0 5
51610: PUSH
51611: LD_VAR 0 5
51615: PPUSH
51616: LD_VAR 0 7
51620: PPUSH
51621: LD_VAR 0 5
51625: PUSH
51626: LD_VAR 0 7
51630: ARRAY
51631: PUSH
51632: LD_VAR 0 9
51636: PUSH
51637: LD_VAR 0 7
51641: ARRAY
51642: PUSH
51643: LD_VAR 0 10
51647: MUL
51648: PLUS
51649: PPUSH
51650: CALL_OW 1
51654: ST_TO_ADDR
51655: GO 51603
51657: POP
51658: POP
// end ;
51659: GO 50138
51661: POP
51662: POP
// result := Replace ( result , 4 , tmp ) ;
51663: LD_ADDR_VAR 0 5
51667: PUSH
51668: LD_VAR 0 5
51672: PPUSH
51673: LD_INT 4
51675: PPUSH
51676: LD_VAR 0 8
51680: PPUSH
51681: CALL_OW 1
51685: ST_TO_ADDR
// end ;
51686: LD_VAR 0 5
51690: RET
// export function DangerAtRange ( unit , range ) ; begin
51691: LD_INT 0
51693: PPUSH
// if not unit then
51694: LD_VAR 0 1
51698: NOT
51699: IFFALSE 51703
// exit ;
51701: GO 51748
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
51703: LD_ADDR_VAR 0 3
51707: PUSH
51708: LD_VAR 0 1
51712: PPUSH
51713: CALL_OW 255
51717: PPUSH
51718: LD_VAR 0 1
51722: PPUSH
51723: CALL_OW 250
51727: PPUSH
51728: LD_VAR 0 1
51732: PPUSH
51733: CALL_OW 251
51737: PPUSH
51738: LD_VAR 0 2
51742: PPUSH
51743: CALL 49990 0 4
51747: ST_TO_ADDR
// end ;
51748: LD_VAR 0 3
51752: RET
// export function DangerInArea ( side , area ) ; begin
51753: LD_INT 0
51755: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
51756: LD_ADDR_VAR 0 3
51760: PUSH
51761: LD_VAR 0 2
51765: PPUSH
51766: LD_INT 81
51768: PUSH
51769: LD_VAR 0 1
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PPUSH
51778: CALL_OW 70
51782: ST_TO_ADDR
// end ;
51783: LD_VAR 0 3
51787: RET
// export function IsExtension ( b ) ; begin
51788: LD_INT 0
51790: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
51791: LD_ADDR_VAR 0 2
51795: PUSH
51796: LD_VAR 0 1
51800: PUSH
51801: LD_INT 23
51803: PUSH
51804: LD_INT 20
51806: PUSH
51807: LD_INT 22
51809: PUSH
51810: LD_INT 17
51812: PUSH
51813: LD_INT 24
51815: PUSH
51816: LD_INT 21
51818: PUSH
51819: LD_INT 19
51821: PUSH
51822: LD_INT 16
51824: PUSH
51825: LD_INT 25
51827: PUSH
51828: LD_INT 18
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: IN
51843: ST_TO_ADDR
// end ;
51844: LD_VAR 0 2
51848: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
51849: LD_INT 0
51851: PPUSH
51852: PPUSH
51853: PPUSH
// result := [ ] ;
51854: LD_ADDR_VAR 0 4
51858: PUSH
51859: EMPTY
51860: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
51861: LD_ADDR_VAR 0 5
51865: PUSH
51866: LD_VAR 0 2
51870: PPUSH
51871: LD_INT 21
51873: PUSH
51874: LD_INT 3
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PPUSH
51881: CALL_OW 70
51885: ST_TO_ADDR
// if not tmp then
51886: LD_VAR 0 5
51890: NOT
51891: IFFALSE 51895
// exit ;
51893: GO 51959
// if checkLink then
51895: LD_VAR 0 3
51899: IFFALSE 51949
// begin for i in tmp do
51901: LD_ADDR_VAR 0 6
51905: PUSH
51906: LD_VAR 0 5
51910: PUSH
51911: FOR_IN
51912: IFFALSE 51947
// if GetBase ( i ) <> base then
51914: LD_VAR 0 6
51918: PPUSH
51919: CALL_OW 274
51923: PUSH
51924: LD_VAR 0 1
51928: NONEQUAL
51929: IFFALSE 51945
// ComLinkToBase ( base , i ) ;
51931: LD_VAR 0 1
51935: PPUSH
51936: LD_VAR 0 6
51940: PPUSH
51941: CALL_OW 169
51945: GO 51911
51947: POP
51948: POP
// end ; result := tmp ;
51949: LD_ADDR_VAR 0 4
51953: PUSH
51954: LD_VAR 0 5
51958: ST_TO_ADDR
// end ;
51959: LD_VAR 0 4
51963: RET
// export function ComComplete ( units , b ) ; var i ; begin
51964: LD_INT 0
51966: PPUSH
51967: PPUSH
// if not units then
51968: LD_VAR 0 1
51972: NOT
51973: IFFALSE 51977
// exit ;
51975: GO 52067
// for i in units do
51977: LD_ADDR_VAR 0 4
51981: PUSH
51982: LD_VAR 0 1
51986: PUSH
51987: FOR_IN
51988: IFFALSE 52065
// if BuildingStatus ( b ) = bs_build then
51990: LD_VAR 0 2
51994: PPUSH
51995: CALL_OW 461
51999: PUSH
52000: LD_INT 1
52002: EQUAL
52003: IFFALSE 52063
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
52005: LD_VAR 0 4
52009: PPUSH
52010: LD_STRING h
52012: PUSH
52013: LD_VAR 0 2
52017: PPUSH
52018: CALL_OW 250
52022: PUSH
52023: LD_VAR 0 2
52027: PPUSH
52028: CALL_OW 251
52032: PUSH
52033: LD_VAR 0 2
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: PUSH
52056: EMPTY
52057: LIST
52058: PPUSH
52059: CALL_OW 446
52063: GO 51987
52065: POP
52066: POP
// end ;
52067: LD_VAR 0 3
52071: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
52072: LD_INT 0
52074: PPUSH
52075: PPUSH
52076: PPUSH
52077: PPUSH
52078: PPUSH
52079: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
52080: LD_VAR 0 1
52084: NOT
52085: PUSH
52086: LD_VAR 0 1
52090: PPUSH
52091: CALL_OW 263
52095: PUSH
52096: LD_INT 2
52098: NONEQUAL
52099: OR
52100: IFFALSE 52104
// exit ;
52102: GO 52420
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
52104: LD_ADDR_VAR 0 6
52108: PUSH
52109: LD_INT 22
52111: PUSH
52112: LD_VAR 0 1
52116: PPUSH
52117: CALL_OW 255
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 2
52128: PUSH
52129: LD_INT 30
52131: PUSH
52132: LD_INT 36
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 34
52141: PUSH
52142: LD_INT 31
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: LIST
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PPUSH
52158: CALL_OW 69
52162: ST_TO_ADDR
// if not tmp then
52163: LD_VAR 0 6
52167: NOT
52168: IFFALSE 52172
// exit ;
52170: GO 52420
// result := [ ] ;
52172: LD_ADDR_VAR 0 2
52176: PUSH
52177: EMPTY
52178: ST_TO_ADDR
// for i in tmp do
52179: LD_ADDR_VAR 0 3
52183: PUSH
52184: LD_VAR 0 6
52188: PUSH
52189: FOR_IN
52190: IFFALSE 52261
// begin t := UnitsInside ( i ) ;
52192: LD_ADDR_VAR 0 4
52196: PUSH
52197: LD_VAR 0 3
52201: PPUSH
52202: CALL_OW 313
52206: ST_TO_ADDR
// if t then
52207: LD_VAR 0 4
52211: IFFALSE 52259
// for j in t do
52213: LD_ADDR_VAR 0 7
52217: PUSH
52218: LD_VAR 0 4
52222: PUSH
52223: FOR_IN
52224: IFFALSE 52257
// result := Replace ( result , result + 1 , j ) ;
52226: LD_ADDR_VAR 0 2
52230: PUSH
52231: LD_VAR 0 2
52235: PPUSH
52236: LD_VAR 0 2
52240: PUSH
52241: LD_INT 1
52243: PLUS
52244: PPUSH
52245: LD_VAR 0 7
52249: PPUSH
52250: CALL_OW 1
52254: ST_TO_ADDR
52255: GO 52223
52257: POP
52258: POP
// end ;
52259: GO 52189
52261: POP
52262: POP
// if not result then
52263: LD_VAR 0 2
52267: NOT
52268: IFFALSE 52272
// exit ;
52270: GO 52420
// mech := result [ 1 ] ;
52272: LD_ADDR_VAR 0 5
52276: PUSH
52277: LD_VAR 0 2
52281: PUSH
52282: LD_INT 1
52284: ARRAY
52285: ST_TO_ADDR
// if result > 1 then
52286: LD_VAR 0 2
52290: PUSH
52291: LD_INT 1
52293: GREATER
52294: IFFALSE 52406
// begin for i = 2 to result do
52296: LD_ADDR_VAR 0 3
52300: PUSH
52301: DOUBLE
52302: LD_INT 2
52304: DEC
52305: ST_TO_ADDR
52306: LD_VAR 0 2
52310: PUSH
52311: FOR_TO
52312: IFFALSE 52404
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
52314: LD_ADDR_VAR 0 4
52318: PUSH
52319: LD_VAR 0 2
52323: PUSH
52324: LD_VAR 0 3
52328: ARRAY
52329: PPUSH
52330: LD_INT 3
52332: PPUSH
52333: CALL_OW 259
52337: PUSH
52338: LD_VAR 0 2
52342: PUSH
52343: LD_VAR 0 3
52347: ARRAY
52348: PPUSH
52349: CALL_OW 432
52353: MINUS
52354: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
52355: LD_VAR 0 4
52359: PUSH
52360: LD_VAR 0 5
52364: PPUSH
52365: LD_INT 3
52367: PPUSH
52368: CALL_OW 259
52372: PUSH
52373: LD_VAR 0 5
52377: PPUSH
52378: CALL_OW 432
52382: MINUS
52383: GREATEREQUAL
52384: IFFALSE 52402
// mech := result [ i ] ;
52386: LD_ADDR_VAR 0 5
52390: PUSH
52391: LD_VAR 0 2
52395: PUSH
52396: LD_VAR 0 3
52400: ARRAY
52401: ST_TO_ADDR
// end ;
52402: GO 52311
52404: POP
52405: POP
// end ; ComLinkTo ( vehicle , mech ) ;
52406: LD_VAR 0 1
52410: PPUSH
52411: LD_VAR 0 5
52415: PPUSH
52416: CALL_OW 135
// end ;
52420: LD_VAR 0 2
52424: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
52425: LD_INT 0
52427: PPUSH
52428: PPUSH
52429: PPUSH
52430: PPUSH
52431: PPUSH
52432: PPUSH
52433: PPUSH
52434: PPUSH
52435: PPUSH
52436: PPUSH
52437: PPUSH
52438: PPUSH
52439: PPUSH
// result := [ ] ;
52440: LD_ADDR_VAR 0 7
52444: PUSH
52445: EMPTY
52446: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
52447: LD_VAR 0 1
52451: PPUSH
52452: CALL_OW 266
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: IN
52467: NOT
52468: IFFALSE 52472
// exit ;
52470: GO 54106
// if name then
52472: LD_VAR 0 3
52476: IFFALSE 52492
// SetBName ( base_dep , name ) ;
52478: LD_VAR 0 1
52482: PPUSH
52483: LD_VAR 0 3
52487: PPUSH
52488: CALL_OW 500
// base := GetBase ( base_dep ) ;
52492: LD_ADDR_VAR 0 15
52496: PUSH
52497: LD_VAR 0 1
52501: PPUSH
52502: CALL_OW 274
52506: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
52507: LD_ADDR_VAR 0 16
52511: PUSH
52512: LD_VAR 0 1
52516: PPUSH
52517: CALL_OW 255
52521: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
52522: LD_ADDR_VAR 0 17
52526: PUSH
52527: LD_VAR 0 1
52531: PPUSH
52532: CALL_OW 248
52536: ST_TO_ADDR
// if sources then
52537: LD_VAR 0 5
52541: IFFALSE 52588
// for i = 1 to 3 do
52543: LD_ADDR_VAR 0 8
52547: PUSH
52548: DOUBLE
52549: LD_INT 1
52551: DEC
52552: ST_TO_ADDR
52553: LD_INT 3
52555: PUSH
52556: FOR_TO
52557: IFFALSE 52586
// AddResourceType ( base , i , sources [ i ] ) ;
52559: LD_VAR 0 15
52563: PPUSH
52564: LD_VAR 0 8
52568: PPUSH
52569: LD_VAR 0 5
52573: PUSH
52574: LD_VAR 0 8
52578: ARRAY
52579: PPUSH
52580: CALL_OW 276
52584: GO 52556
52586: POP
52587: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
52588: LD_ADDR_VAR 0 18
52592: PUSH
52593: LD_VAR 0 15
52597: PPUSH
52598: LD_VAR 0 2
52602: PPUSH
52603: LD_INT 1
52605: PPUSH
52606: CALL 51849 0 3
52610: ST_TO_ADDR
// InitHc ;
52611: CALL_OW 19
// InitUc ;
52615: CALL_OW 18
// uc_side := side ;
52619: LD_ADDR_OWVAR 20
52623: PUSH
52624: LD_VAR 0 16
52628: ST_TO_ADDR
// uc_nation := nation ;
52629: LD_ADDR_OWVAR 21
52633: PUSH
52634: LD_VAR 0 17
52638: ST_TO_ADDR
// if buildings then
52639: LD_VAR 0 18
52643: IFFALSE 53965
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
52645: LD_ADDR_VAR 0 19
52649: PUSH
52650: LD_VAR 0 18
52654: PPUSH
52655: LD_INT 2
52657: PUSH
52658: LD_INT 30
52660: PUSH
52661: LD_INT 29
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 30
52670: PUSH
52671: LD_INT 30
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: LIST
52682: PPUSH
52683: CALL_OW 72
52687: ST_TO_ADDR
// if tmp then
52688: LD_VAR 0 19
52692: IFFALSE 52740
// for i in tmp do
52694: LD_ADDR_VAR 0 8
52698: PUSH
52699: LD_VAR 0 19
52703: PUSH
52704: FOR_IN
52705: IFFALSE 52738
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
52707: LD_VAR 0 8
52711: PPUSH
52712: CALL_OW 250
52716: PPUSH
52717: LD_VAR 0 8
52721: PPUSH
52722: CALL_OW 251
52726: PPUSH
52727: LD_VAR 0 16
52731: PPUSH
52732: CALL_OW 441
52736: GO 52704
52738: POP
52739: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
52740: LD_VAR 0 18
52744: PPUSH
52745: LD_INT 2
52747: PUSH
52748: LD_INT 30
52750: PUSH
52751: LD_INT 32
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 30
52760: PUSH
52761: LD_INT 33
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: LIST
52772: PPUSH
52773: CALL_OW 72
52777: IFFALSE 52865
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
52779: LD_ADDR_VAR 0 8
52783: PUSH
52784: LD_VAR 0 18
52788: PPUSH
52789: LD_INT 2
52791: PUSH
52792: LD_INT 30
52794: PUSH
52795: LD_INT 32
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 30
52804: PUSH
52805: LD_INT 33
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: LIST
52816: PPUSH
52817: CALL_OW 72
52821: PUSH
52822: FOR_IN
52823: IFFALSE 52863
// begin if not GetBWeapon ( i ) then
52825: LD_VAR 0 8
52829: PPUSH
52830: CALL_OW 269
52834: NOT
52835: IFFALSE 52861
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
52837: LD_VAR 0 8
52841: PPUSH
52842: LD_VAR 0 8
52846: PPUSH
52847: LD_VAR 0 2
52851: PPUSH
52852: CALL 54111 0 2
52856: PPUSH
52857: CALL_OW 431
// end ;
52861: GO 52822
52863: POP
52864: POP
// end ; for i = 1 to personel do
52865: LD_ADDR_VAR 0 8
52869: PUSH
52870: DOUBLE
52871: LD_INT 1
52873: DEC
52874: ST_TO_ADDR
52875: LD_VAR 0 6
52879: PUSH
52880: FOR_TO
52881: IFFALSE 53945
// begin if i > 4 then
52883: LD_VAR 0 8
52887: PUSH
52888: LD_INT 4
52890: GREATER
52891: IFFALSE 52895
// break ;
52893: GO 53945
// case i of 1 :
52895: LD_VAR 0 8
52899: PUSH
52900: LD_INT 1
52902: DOUBLE
52903: EQUAL
52904: IFTRUE 52908
52906: GO 52988
52908: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
52909: LD_ADDR_VAR 0 12
52913: PUSH
52914: LD_VAR 0 18
52918: PPUSH
52919: LD_INT 22
52921: PUSH
52922: LD_VAR 0 16
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 58
52933: PUSH
52934: EMPTY
52935: LIST
52936: PUSH
52937: LD_INT 2
52939: PUSH
52940: LD_INT 30
52942: PUSH
52943: LD_INT 32
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 30
52952: PUSH
52953: LD_INT 4
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 30
52962: PUSH
52963: LD_INT 5
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: LIST
52980: PPUSH
52981: CALL_OW 72
52985: ST_TO_ADDR
52986: GO 53210
52988: LD_INT 2
52990: DOUBLE
52991: EQUAL
52992: IFTRUE 52996
52994: GO 53058
52996: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
52997: LD_ADDR_VAR 0 12
53001: PUSH
53002: LD_VAR 0 18
53006: PPUSH
53007: LD_INT 22
53009: PUSH
53010: LD_VAR 0 16
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 2
53021: PUSH
53022: LD_INT 30
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 30
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: LIST
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PPUSH
53051: CALL_OW 72
53055: ST_TO_ADDR
53056: GO 53210
53058: LD_INT 3
53060: DOUBLE
53061: EQUAL
53062: IFTRUE 53066
53064: GO 53128
53066: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
53067: LD_ADDR_VAR 0 12
53071: PUSH
53072: LD_VAR 0 18
53076: PPUSH
53077: LD_INT 22
53079: PUSH
53080: LD_VAR 0 16
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 2
53091: PUSH
53092: LD_INT 30
53094: PUSH
53095: LD_INT 2
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 30
53104: PUSH
53105: LD_INT 3
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: LIST
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PPUSH
53121: CALL_OW 72
53125: ST_TO_ADDR
53126: GO 53210
53128: LD_INT 4
53130: DOUBLE
53131: EQUAL
53132: IFTRUE 53136
53134: GO 53209
53136: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
53137: LD_ADDR_VAR 0 12
53141: PUSH
53142: LD_VAR 0 18
53146: PPUSH
53147: LD_INT 22
53149: PUSH
53150: LD_VAR 0 16
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 2
53161: PUSH
53162: LD_INT 30
53164: PUSH
53165: LD_INT 6
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 30
53174: PUSH
53175: LD_INT 7
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 30
53184: PUSH
53185: LD_INT 8
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PPUSH
53202: CALL_OW 72
53206: ST_TO_ADDR
53207: GO 53210
53209: POP
// if i = 1 then
53210: LD_VAR 0 8
53214: PUSH
53215: LD_INT 1
53217: EQUAL
53218: IFFALSE 53329
// begin tmp := [ ] ;
53220: LD_ADDR_VAR 0 19
53224: PUSH
53225: EMPTY
53226: ST_TO_ADDR
// for j in f do
53227: LD_ADDR_VAR 0 9
53231: PUSH
53232: LD_VAR 0 12
53236: PUSH
53237: FOR_IN
53238: IFFALSE 53311
// if GetBType ( j ) = b_bunker then
53240: LD_VAR 0 9
53244: PPUSH
53245: CALL_OW 266
53249: PUSH
53250: LD_INT 32
53252: EQUAL
53253: IFFALSE 53280
// tmp := Insert ( tmp , 1 , j ) else
53255: LD_ADDR_VAR 0 19
53259: PUSH
53260: LD_VAR 0 19
53264: PPUSH
53265: LD_INT 1
53267: PPUSH
53268: LD_VAR 0 9
53272: PPUSH
53273: CALL_OW 2
53277: ST_TO_ADDR
53278: GO 53309
// tmp := Insert ( tmp , tmp + 1 , j ) ;
53280: LD_ADDR_VAR 0 19
53284: PUSH
53285: LD_VAR 0 19
53289: PPUSH
53290: LD_VAR 0 19
53294: PUSH
53295: LD_INT 1
53297: PLUS
53298: PPUSH
53299: LD_VAR 0 9
53303: PPUSH
53304: CALL_OW 2
53308: ST_TO_ADDR
53309: GO 53237
53311: POP
53312: POP
// if tmp then
53313: LD_VAR 0 19
53317: IFFALSE 53329
// f := tmp ;
53319: LD_ADDR_VAR 0 12
53323: PUSH
53324: LD_VAR 0 19
53328: ST_TO_ADDR
// end ; x := personel [ i ] ;
53329: LD_ADDR_VAR 0 13
53333: PUSH
53334: LD_VAR 0 6
53338: PUSH
53339: LD_VAR 0 8
53343: ARRAY
53344: ST_TO_ADDR
// if x = - 1 then
53345: LD_VAR 0 13
53349: PUSH
53350: LD_INT 1
53352: NEG
53353: EQUAL
53354: IFFALSE 53563
// begin for j in f do
53356: LD_ADDR_VAR 0 9
53360: PUSH
53361: LD_VAR 0 12
53365: PUSH
53366: FOR_IN
53367: IFFALSE 53559
// repeat InitHc ;
53369: CALL_OW 19
// if GetBType ( j ) = b_barracks then
53373: LD_VAR 0 9
53377: PPUSH
53378: CALL_OW 266
53382: PUSH
53383: LD_INT 5
53385: EQUAL
53386: IFFALSE 53456
// begin if UnitsInside ( j ) < 3 then
53388: LD_VAR 0 9
53392: PPUSH
53393: CALL_OW 313
53397: PUSH
53398: LD_INT 3
53400: LESS
53401: IFFALSE 53437
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53403: LD_INT 0
53405: PPUSH
53406: LD_INT 5
53408: PUSH
53409: LD_INT 8
53411: PUSH
53412: LD_INT 9
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: LIST
53419: PUSH
53420: LD_VAR 0 17
53424: ARRAY
53425: PPUSH
53426: LD_VAR 0 4
53430: PPUSH
53431: CALL_OW 380
53435: GO 53454
// PrepareHuman ( false , i , skill ) ;
53437: LD_INT 0
53439: PPUSH
53440: LD_VAR 0 8
53444: PPUSH
53445: LD_VAR 0 4
53449: PPUSH
53450: CALL_OW 380
// end else
53454: GO 53473
// PrepareHuman ( false , i , skill ) ;
53456: LD_INT 0
53458: PPUSH
53459: LD_VAR 0 8
53463: PPUSH
53464: LD_VAR 0 4
53468: PPUSH
53469: CALL_OW 380
// un := CreateHuman ;
53473: LD_ADDR_VAR 0 14
53477: PUSH
53478: CALL_OW 44
53482: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53483: LD_ADDR_VAR 0 7
53487: PUSH
53488: LD_VAR 0 7
53492: PPUSH
53493: LD_INT 1
53495: PPUSH
53496: LD_VAR 0 14
53500: PPUSH
53501: CALL_OW 2
53505: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
53506: LD_VAR 0 14
53510: PPUSH
53511: LD_VAR 0 9
53515: PPUSH
53516: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
53520: LD_VAR 0 9
53524: PPUSH
53525: CALL_OW 313
53529: PUSH
53530: LD_INT 6
53532: EQUAL
53533: PUSH
53534: LD_VAR 0 9
53538: PPUSH
53539: CALL_OW 266
53543: PUSH
53544: LD_INT 32
53546: PUSH
53547: LD_INT 31
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: IN
53554: OR
53555: IFFALSE 53369
53557: GO 53366
53559: POP
53560: POP
// end else
53561: GO 53943
// for j = 1 to x do
53563: LD_ADDR_VAR 0 9
53567: PUSH
53568: DOUBLE
53569: LD_INT 1
53571: DEC
53572: ST_TO_ADDR
53573: LD_VAR 0 13
53577: PUSH
53578: FOR_TO
53579: IFFALSE 53941
// begin InitHc ;
53581: CALL_OW 19
// if not f then
53585: LD_VAR 0 12
53589: NOT
53590: IFFALSE 53679
// begin PrepareHuman ( false , i , skill ) ;
53592: LD_INT 0
53594: PPUSH
53595: LD_VAR 0 8
53599: PPUSH
53600: LD_VAR 0 4
53604: PPUSH
53605: CALL_OW 380
// un := CreateHuman ;
53609: LD_ADDR_VAR 0 14
53613: PUSH
53614: CALL_OW 44
53618: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53619: LD_ADDR_VAR 0 7
53623: PUSH
53624: LD_VAR 0 7
53628: PPUSH
53629: LD_INT 1
53631: PPUSH
53632: LD_VAR 0 14
53636: PPUSH
53637: CALL_OW 2
53641: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53642: LD_VAR 0 14
53646: PPUSH
53647: LD_VAR 0 1
53651: PPUSH
53652: CALL_OW 250
53656: PPUSH
53657: LD_VAR 0 1
53661: PPUSH
53662: CALL_OW 251
53666: PPUSH
53667: LD_INT 10
53669: PPUSH
53670: LD_INT 0
53672: PPUSH
53673: CALL_OW 50
// continue ;
53677: GO 53578
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
53679: LD_VAR 0 12
53683: PUSH
53684: LD_INT 1
53686: ARRAY
53687: PPUSH
53688: CALL_OW 313
53692: PUSH
53693: LD_VAR 0 12
53697: PUSH
53698: LD_INT 1
53700: ARRAY
53701: PPUSH
53702: CALL_OW 266
53706: PUSH
53707: LD_INT 32
53709: PUSH
53710: LD_INT 31
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: IN
53717: AND
53718: PUSH
53719: LD_VAR 0 12
53723: PUSH
53724: LD_INT 1
53726: ARRAY
53727: PPUSH
53728: CALL_OW 313
53732: PUSH
53733: LD_INT 6
53735: EQUAL
53736: OR
53737: IFFALSE 53757
// f := Delete ( f , 1 ) ;
53739: LD_ADDR_VAR 0 12
53743: PUSH
53744: LD_VAR 0 12
53748: PPUSH
53749: LD_INT 1
53751: PPUSH
53752: CALL_OW 3
53756: ST_TO_ADDR
// if not f then
53757: LD_VAR 0 12
53761: NOT
53762: IFFALSE 53780
// begin x := x + 2 ;
53764: LD_ADDR_VAR 0 13
53768: PUSH
53769: LD_VAR 0 13
53773: PUSH
53774: LD_INT 2
53776: PLUS
53777: ST_TO_ADDR
// continue ;
53778: GO 53578
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
53780: LD_VAR 0 12
53784: PUSH
53785: LD_INT 1
53787: ARRAY
53788: PPUSH
53789: CALL_OW 266
53793: PUSH
53794: LD_INT 5
53796: EQUAL
53797: IFFALSE 53871
// begin if UnitsInside ( f [ 1 ] ) < 3 then
53799: LD_VAR 0 12
53803: PUSH
53804: LD_INT 1
53806: ARRAY
53807: PPUSH
53808: CALL_OW 313
53812: PUSH
53813: LD_INT 3
53815: LESS
53816: IFFALSE 53852
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53818: LD_INT 0
53820: PPUSH
53821: LD_INT 5
53823: PUSH
53824: LD_INT 8
53826: PUSH
53827: LD_INT 9
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: LIST
53834: PUSH
53835: LD_VAR 0 17
53839: ARRAY
53840: PPUSH
53841: LD_VAR 0 4
53845: PPUSH
53846: CALL_OW 380
53850: GO 53869
// PrepareHuman ( false , i , skill ) ;
53852: LD_INT 0
53854: PPUSH
53855: LD_VAR 0 8
53859: PPUSH
53860: LD_VAR 0 4
53864: PPUSH
53865: CALL_OW 380
// end else
53869: GO 53888
// PrepareHuman ( false , i , skill ) ;
53871: LD_INT 0
53873: PPUSH
53874: LD_VAR 0 8
53878: PPUSH
53879: LD_VAR 0 4
53883: PPUSH
53884: CALL_OW 380
// un := CreateHuman ;
53888: LD_ADDR_VAR 0 14
53892: PUSH
53893: CALL_OW 44
53897: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53898: LD_ADDR_VAR 0 7
53902: PUSH
53903: LD_VAR 0 7
53907: PPUSH
53908: LD_INT 1
53910: PPUSH
53911: LD_VAR 0 14
53915: PPUSH
53916: CALL_OW 2
53920: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
53921: LD_VAR 0 14
53925: PPUSH
53926: LD_VAR 0 12
53930: PUSH
53931: LD_INT 1
53933: ARRAY
53934: PPUSH
53935: CALL_OW 52
// end ;
53939: GO 53578
53941: POP
53942: POP
// end ;
53943: GO 52880
53945: POP
53946: POP
// result := result ^ buildings ;
53947: LD_ADDR_VAR 0 7
53951: PUSH
53952: LD_VAR 0 7
53956: PUSH
53957: LD_VAR 0 18
53961: ADD
53962: ST_TO_ADDR
// end else
53963: GO 54106
// begin for i = 1 to personel do
53965: LD_ADDR_VAR 0 8
53969: PUSH
53970: DOUBLE
53971: LD_INT 1
53973: DEC
53974: ST_TO_ADDR
53975: LD_VAR 0 6
53979: PUSH
53980: FOR_TO
53981: IFFALSE 54104
// begin if i > 4 then
53983: LD_VAR 0 8
53987: PUSH
53988: LD_INT 4
53990: GREATER
53991: IFFALSE 53995
// break ;
53993: GO 54104
// x := personel [ i ] ;
53995: LD_ADDR_VAR 0 13
53999: PUSH
54000: LD_VAR 0 6
54004: PUSH
54005: LD_VAR 0 8
54009: ARRAY
54010: ST_TO_ADDR
// if x = - 1 then
54011: LD_VAR 0 13
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: EQUAL
54020: IFFALSE 54024
// continue ;
54022: GO 53980
// PrepareHuman ( false , i , skill ) ;
54024: LD_INT 0
54026: PPUSH
54027: LD_VAR 0 8
54031: PPUSH
54032: LD_VAR 0 4
54036: PPUSH
54037: CALL_OW 380
// un := CreateHuman ;
54041: LD_ADDR_VAR 0 14
54045: PUSH
54046: CALL_OW 44
54050: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
54051: LD_VAR 0 14
54055: PPUSH
54056: LD_VAR 0 1
54060: PPUSH
54061: CALL_OW 250
54065: PPUSH
54066: LD_VAR 0 1
54070: PPUSH
54071: CALL_OW 251
54075: PPUSH
54076: LD_INT 10
54078: PPUSH
54079: LD_INT 0
54081: PPUSH
54082: CALL_OW 50
// result := result ^ un ;
54086: LD_ADDR_VAR 0 7
54090: PUSH
54091: LD_VAR 0 7
54095: PUSH
54096: LD_VAR 0 14
54100: ADD
54101: ST_TO_ADDR
// end ;
54102: GO 53980
54104: POP
54105: POP
// end ; end ;
54106: LD_VAR 0 7
54110: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
54111: LD_INT 0
54113: PPUSH
54114: PPUSH
54115: PPUSH
54116: PPUSH
54117: PPUSH
54118: PPUSH
54119: PPUSH
54120: PPUSH
54121: PPUSH
54122: PPUSH
54123: PPUSH
54124: PPUSH
54125: PPUSH
54126: PPUSH
54127: PPUSH
54128: PPUSH
// result := false ;
54129: LD_ADDR_VAR 0 3
54133: PUSH
54134: LD_INT 0
54136: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
54137: LD_VAR 0 1
54141: NOT
54142: PUSH
54143: LD_VAR 0 1
54147: PPUSH
54148: CALL_OW 266
54152: PUSH
54153: LD_INT 32
54155: PUSH
54156: LD_INT 33
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: IN
54163: NOT
54164: OR
54165: IFFALSE 54169
// exit ;
54167: GO 55278
// nat := GetNation ( tower ) ;
54169: LD_ADDR_VAR 0 12
54173: PUSH
54174: LD_VAR 0 1
54178: PPUSH
54179: CALL_OW 248
54183: ST_TO_ADDR
// side := GetSide ( tower ) ;
54184: LD_ADDR_VAR 0 16
54188: PUSH
54189: LD_VAR 0 1
54193: PPUSH
54194: CALL_OW 255
54198: ST_TO_ADDR
// x := GetX ( tower ) ;
54199: LD_ADDR_VAR 0 10
54203: PUSH
54204: LD_VAR 0 1
54208: PPUSH
54209: CALL_OW 250
54213: ST_TO_ADDR
// y := GetY ( tower ) ;
54214: LD_ADDR_VAR 0 11
54218: PUSH
54219: LD_VAR 0 1
54223: PPUSH
54224: CALL_OW 251
54228: ST_TO_ADDR
// if not x or not y then
54229: LD_VAR 0 10
54233: NOT
54234: PUSH
54235: LD_VAR 0 11
54239: NOT
54240: OR
54241: IFFALSE 54245
// exit ;
54243: GO 55278
// weapon := 0 ;
54245: LD_ADDR_VAR 0 18
54249: PUSH
54250: LD_INT 0
54252: ST_TO_ADDR
// fac_list := [ ] ;
54253: LD_ADDR_VAR 0 17
54257: PUSH
54258: EMPTY
54259: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
54260: LD_ADDR_VAR 0 6
54264: PUSH
54265: LD_VAR 0 1
54269: PPUSH
54270: CALL_OW 274
54274: PPUSH
54275: LD_VAR 0 2
54279: PPUSH
54280: LD_INT 0
54282: PPUSH
54283: CALL 51849 0 3
54287: PPUSH
54288: LD_INT 30
54290: PUSH
54291: LD_INT 3
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PPUSH
54298: CALL_OW 72
54302: ST_TO_ADDR
// if not factories then
54303: LD_VAR 0 6
54307: NOT
54308: IFFALSE 54312
// exit ;
54310: GO 55278
// for i in factories do
54312: LD_ADDR_VAR 0 8
54316: PUSH
54317: LD_VAR 0 6
54321: PUSH
54322: FOR_IN
54323: IFFALSE 54348
// fac_list := fac_list union AvailableWeaponList ( i ) ;
54325: LD_ADDR_VAR 0 17
54329: PUSH
54330: LD_VAR 0 17
54334: PUSH
54335: LD_VAR 0 8
54339: PPUSH
54340: CALL_OW 478
54344: UNION
54345: ST_TO_ADDR
54346: GO 54322
54348: POP
54349: POP
// if not fac_list then
54350: LD_VAR 0 17
54354: NOT
54355: IFFALSE 54359
// exit ;
54357: GO 55278
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
54359: LD_ADDR_VAR 0 5
54363: PUSH
54364: LD_INT 4
54366: PUSH
54367: LD_INT 5
54369: PUSH
54370: LD_INT 9
54372: PUSH
54373: LD_INT 10
54375: PUSH
54376: LD_INT 6
54378: PUSH
54379: LD_INT 7
54381: PUSH
54382: LD_INT 11
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 27
54396: PUSH
54397: LD_INT 28
54399: PUSH
54400: LD_INT 26
54402: PUSH
54403: LD_INT 30
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 43
54414: PUSH
54415: LD_INT 44
54417: PUSH
54418: LD_INT 46
54420: PUSH
54421: LD_INT 45
54423: PUSH
54424: LD_INT 47
54426: PUSH
54427: LD_INT 49
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: LIST
54442: PUSH
54443: LD_VAR 0 12
54447: ARRAY
54448: ST_TO_ADDR
// list := list isect fac_list ;
54449: LD_ADDR_VAR 0 5
54453: PUSH
54454: LD_VAR 0 5
54458: PUSH
54459: LD_VAR 0 17
54463: ISECT
54464: ST_TO_ADDR
// if not list then
54465: LD_VAR 0 5
54469: NOT
54470: IFFALSE 54474
// exit ;
54472: GO 55278
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
54474: LD_VAR 0 12
54478: PUSH
54479: LD_INT 3
54481: EQUAL
54482: PUSH
54483: LD_INT 49
54485: PUSH
54486: LD_VAR 0 5
54490: IN
54491: AND
54492: PUSH
54493: LD_INT 31
54495: PPUSH
54496: LD_VAR 0 16
54500: PPUSH
54501: CALL_OW 321
54505: PUSH
54506: LD_INT 2
54508: EQUAL
54509: AND
54510: IFFALSE 54570
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
54512: LD_INT 22
54514: PUSH
54515: LD_VAR 0 16
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 35
54526: PUSH
54527: LD_INT 49
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 91
54536: PUSH
54537: LD_VAR 0 1
54541: PUSH
54542: LD_INT 10
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: LIST
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: LIST
54554: PPUSH
54555: CALL_OW 69
54559: NOT
54560: IFFALSE 54570
// weapon := ru_time_lapser ;
54562: LD_ADDR_VAR 0 18
54566: PUSH
54567: LD_INT 49
54569: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
54570: LD_VAR 0 12
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: LD_INT 2
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: IN
54585: PUSH
54586: LD_INT 11
54588: PUSH
54589: LD_VAR 0 5
54593: IN
54594: PUSH
54595: LD_INT 30
54597: PUSH
54598: LD_VAR 0 5
54602: IN
54603: OR
54604: AND
54605: PUSH
54606: LD_INT 6
54608: PPUSH
54609: LD_VAR 0 16
54613: PPUSH
54614: CALL_OW 321
54618: PUSH
54619: LD_INT 2
54621: EQUAL
54622: AND
54623: IFFALSE 54788
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
54625: LD_INT 22
54627: PUSH
54628: LD_VAR 0 16
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 2
54639: PUSH
54640: LD_INT 35
54642: PUSH
54643: LD_INT 11
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 35
54652: PUSH
54653: LD_INT 30
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 91
54667: PUSH
54668: LD_VAR 0 1
54672: PUSH
54673: LD_INT 18
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: LIST
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: LIST
54685: PPUSH
54686: CALL_OW 69
54690: NOT
54691: PUSH
54692: LD_INT 22
54694: PUSH
54695: LD_VAR 0 16
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 2
54706: PUSH
54707: LD_INT 30
54709: PUSH
54710: LD_INT 32
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 30
54719: PUSH
54720: LD_INT 33
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 91
54734: PUSH
54735: LD_VAR 0 1
54739: PUSH
54740: LD_INT 12
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: LIST
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: LIST
54752: PUSH
54753: EMPTY
54754: LIST
54755: PPUSH
54756: CALL_OW 69
54760: PUSH
54761: LD_INT 2
54763: GREATER
54764: AND
54765: IFFALSE 54788
// weapon := [ us_radar , ar_radar ] [ nat ] ;
54767: LD_ADDR_VAR 0 18
54771: PUSH
54772: LD_INT 11
54774: PUSH
54775: LD_INT 30
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_VAR 0 12
54786: ARRAY
54787: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
54788: LD_VAR 0 18
54792: NOT
54793: PUSH
54794: LD_INT 40
54796: PPUSH
54797: LD_VAR 0 16
54801: PPUSH
54802: CALL_OW 321
54806: PUSH
54807: LD_INT 2
54809: EQUAL
54810: AND
54811: PUSH
54812: LD_INT 7
54814: PUSH
54815: LD_VAR 0 5
54819: IN
54820: PUSH
54821: LD_INT 28
54823: PUSH
54824: LD_VAR 0 5
54828: IN
54829: OR
54830: PUSH
54831: LD_INT 45
54833: PUSH
54834: LD_VAR 0 5
54838: IN
54839: OR
54840: AND
54841: IFFALSE 55095
// begin hex := GetHexInfo ( x , y ) ;
54843: LD_ADDR_VAR 0 4
54847: PUSH
54848: LD_VAR 0 10
54852: PPUSH
54853: LD_VAR 0 11
54857: PPUSH
54858: CALL_OW 546
54862: ST_TO_ADDR
// if hex [ 1 ] then
54863: LD_VAR 0 4
54867: PUSH
54868: LD_INT 1
54870: ARRAY
54871: IFFALSE 54875
// exit ;
54873: GO 55278
// height := hex [ 2 ] ;
54875: LD_ADDR_VAR 0 15
54879: PUSH
54880: LD_VAR 0 4
54884: PUSH
54885: LD_INT 2
54887: ARRAY
54888: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
54889: LD_ADDR_VAR 0 14
54893: PUSH
54894: LD_INT 0
54896: PUSH
54897: LD_INT 2
54899: PUSH
54900: LD_INT 3
54902: PUSH
54903: LD_INT 5
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: ST_TO_ADDR
// for i in tmp do
54912: LD_ADDR_VAR 0 8
54916: PUSH
54917: LD_VAR 0 14
54921: PUSH
54922: FOR_IN
54923: IFFALSE 55093
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
54925: LD_ADDR_VAR 0 9
54929: PUSH
54930: LD_VAR 0 10
54934: PPUSH
54935: LD_VAR 0 8
54939: PPUSH
54940: LD_INT 5
54942: PPUSH
54943: CALL_OW 272
54947: PUSH
54948: LD_VAR 0 11
54952: PPUSH
54953: LD_VAR 0 8
54957: PPUSH
54958: LD_INT 5
54960: PPUSH
54961: CALL_OW 273
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
54970: LD_VAR 0 9
54974: PUSH
54975: LD_INT 1
54977: ARRAY
54978: PPUSH
54979: LD_VAR 0 9
54983: PUSH
54984: LD_INT 2
54986: ARRAY
54987: PPUSH
54988: CALL_OW 488
54992: IFFALSE 55091
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
54994: LD_ADDR_VAR 0 4
54998: PUSH
54999: LD_VAR 0 9
55003: PUSH
55004: LD_INT 1
55006: ARRAY
55007: PPUSH
55008: LD_VAR 0 9
55012: PUSH
55013: LD_INT 2
55015: ARRAY
55016: PPUSH
55017: CALL_OW 546
55021: ST_TO_ADDR
// if hex [ 1 ] then
55022: LD_VAR 0 4
55026: PUSH
55027: LD_INT 1
55029: ARRAY
55030: IFFALSE 55034
// continue ;
55032: GO 54922
// h := hex [ 2 ] ;
55034: LD_ADDR_VAR 0 13
55038: PUSH
55039: LD_VAR 0 4
55043: PUSH
55044: LD_INT 2
55046: ARRAY
55047: ST_TO_ADDR
// if h + 7 < height then
55048: LD_VAR 0 13
55052: PUSH
55053: LD_INT 7
55055: PLUS
55056: PUSH
55057: LD_VAR 0 15
55061: LESS
55062: IFFALSE 55091
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
55064: LD_ADDR_VAR 0 18
55068: PUSH
55069: LD_INT 7
55071: PUSH
55072: LD_INT 28
55074: PUSH
55075: LD_INT 45
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: LIST
55082: PUSH
55083: LD_VAR 0 12
55087: ARRAY
55088: ST_TO_ADDR
// break ;
55089: GO 55093
// end ; end ; end ;
55091: GO 54922
55093: POP
55094: POP
// end ; if not weapon then
55095: LD_VAR 0 18
55099: NOT
55100: IFFALSE 55160
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
55102: LD_ADDR_VAR 0 5
55106: PUSH
55107: LD_VAR 0 5
55111: PUSH
55112: LD_INT 11
55114: PUSH
55115: LD_INT 30
55117: PUSH
55118: LD_INT 49
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: LIST
55125: DIFF
55126: ST_TO_ADDR
// if not list then
55127: LD_VAR 0 5
55131: NOT
55132: IFFALSE 55136
// exit ;
55134: GO 55278
// weapon := list [ rand ( 1 , list ) ] ;
55136: LD_ADDR_VAR 0 18
55140: PUSH
55141: LD_VAR 0 5
55145: PUSH
55146: LD_INT 1
55148: PPUSH
55149: LD_VAR 0 5
55153: PPUSH
55154: CALL_OW 12
55158: ARRAY
55159: ST_TO_ADDR
// end ; if weapon then
55160: LD_VAR 0 18
55164: IFFALSE 55278
// begin tmp := CostOfWeapon ( weapon ) ;
55166: LD_ADDR_VAR 0 14
55170: PUSH
55171: LD_VAR 0 18
55175: PPUSH
55176: CALL_OW 451
55180: ST_TO_ADDR
// j := GetBase ( tower ) ;
55181: LD_ADDR_VAR 0 9
55185: PUSH
55186: LD_VAR 0 1
55190: PPUSH
55191: CALL_OW 274
55195: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
55196: LD_VAR 0 9
55200: PPUSH
55201: LD_INT 1
55203: PPUSH
55204: CALL_OW 275
55208: PUSH
55209: LD_VAR 0 14
55213: PUSH
55214: LD_INT 1
55216: ARRAY
55217: GREATEREQUAL
55218: PUSH
55219: LD_VAR 0 9
55223: PPUSH
55224: LD_INT 2
55226: PPUSH
55227: CALL_OW 275
55231: PUSH
55232: LD_VAR 0 14
55236: PUSH
55237: LD_INT 2
55239: ARRAY
55240: GREATEREQUAL
55241: AND
55242: PUSH
55243: LD_VAR 0 9
55247: PPUSH
55248: LD_INT 3
55250: PPUSH
55251: CALL_OW 275
55255: PUSH
55256: LD_VAR 0 14
55260: PUSH
55261: LD_INT 3
55263: ARRAY
55264: GREATEREQUAL
55265: AND
55266: IFFALSE 55278
// result := weapon ;
55268: LD_ADDR_VAR 0 3
55272: PUSH
55273: LD_VAR 0 18
55277: ST_TO_ADDR
// end ; end ;
55278: LD_VAR 0 3
55282: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
55283: LD_INT 0
55285: PPUSH
55286: PPUSH
// result := true ;
55287: LD_ADDR_VAR 0 3
55291: PUSH
55292: LD_INT 1
55294: ST_TO_ADDR
// if array1 = array2 then
55295: LD_VAR 0 1
55299: PUSH
55300: LD_VAR 0 2
55304: EQUAL
55305: IFFALSE 55365
// begin for i = 1 to array1 do
55307: LD_ADDR_VAR 0 4
55311: PUSH
55312: DOUBLE
55313: LD_INT 1
55315: DEC
55316: ST_TO_ADDR
55317: LD_VAR 0 1
55321: PUSH
55322: FOR_TO
55323: IFFALSE 55361
// if array1 [ i ] <> array2 [ i ] then
55325: LD_VAR 0 1
55329: PUSH
55330: LD_VAR 0 4
55334: ARRAY
55335: PUSH
55336: LD_VAR 0 2
55340: PUSH
55341: LD_VAR 0 4
55345: ARRAY
55346: NONEQUAL
55347: IFFALSE 55359
// begin result := false ;
55349: LD_ADDR_VAR 0 3
55353: PUSH
55354: LD_INT 0
55356: ST_TO_ADDR
// break ;
55357: GO 55361
// end ;
55359: GO 55322
55361: POP
55362: POP
// end else
55363: GO 55373
// result := false ;
55365: LD_ADDR_VAR 0 3
55369: PUSH
55370: LD_INT 0
55372: ST_TO_ADDR
// end ;
55373: LD_VAR 0 3
55377: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
55378: LD_INT 0
55380: PPUSH
55381: PPUSH
// if not array1 or not array2 then
55382: LD_VAR 0 1
55386: NOT
55387: PUSH
55388: LD_VAR 0 2
55392: NOT
55393: OR
55394: IFFALSE 55398
// exit ;
55396: GO 55462
// result := true ;
55398: LD_ADDR_VAR 0 3
55402: PUSH
55403: LD_INT 1
55405: ST_TO_ADDR
// for i = 1 to array1 do
55406: LD_ADDR_VAR 0 4
55410: PUSH
55411: DOUBLE
55412: LD_INT 1
55414: DEC
55415: ST_TO_ADDR
55416: LD_VAR 0 1
55420: PUSH
55421: FOR_TO
55422: IFFALSE 55460
// if array1 [ i ] <> array2 [ i ] then
55424: LD_VAR 0 1
55428: PUSH
55429: LD_VAR 0 4
55433: ARRAY
55434: PUSH
55435: LD_VAR 0 2
55439: PUSH
55440: LD_VAR 0 4
55444: ARRAY
55445: NONEQUAL
55446: IFFALSE 55458
// begin result := false ;
55448: LD_ADDR_VAR 0 3
55452: PUSH
55453: LD_INT 0
55455: ST_TO_ADDR
// break ;
55456: GO 55460
// end ;
55458: GO 55421
55460: POP
55461: POP
// end ;
55462: LD_VAR 0 3
55466: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
55467: LD_INT 0
55469: PPUSH
55470: PPUSH
55471: PPUSH
// pom := GetBase ( fac ) ;
55472: LD_ADDR_VAR 0 5
55476: PUSH
55477: LD_VAR 0 1
55481: PPUSH
55482: CALL_OW 274
55486: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
55487: LD_ADDR_VAR 0 4
55491: PUSH
55492: LD_VAR 0 2
55496: PUSH
55497: LD_INT 1
55499: ARRAY
55500: PPUSH
55501: LD_VAR 0 2
55505: PUSH
55506: LD_INT 2
55508: ARRAY
55509: PPUSH
55510: LD_VAR 0 2
55514: PUSH
55515: LD_INT 3
55517: ARRAY
55518: PPUSH
55519: LD_VAR 0 2
55523: PUSH
55524: LD_INT 4
55526: ARRAY
55527: PPUSH
55528: CALL_OW 449
55532: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55533: LD_ADDR_VAR 0 3
55537: PUSH
55538: LD_VAR 0 5
55542: PPUSH
55543: LD_INT 1
55545: PPUSH
55546: CALL_OW 275
55550: PUSH
55551: LD_VAR 0 4
55555: PUSH
55556: LD_INT 1
55558: ARRAY
55559: GREATEREQUAL
55560: PUSH
55561: LD_VAR 0 5
55565: PPUSH
55566: LD_INT 2
55568: PPUSH
55569: CALL_OW 275
55573: PUSH
55574: LD_VAR 0 4
55578: PUSH
55579: LD_INT 2
55581: ARRAY
55582: GREATEREQUAL
55583: AND
55584: PUSH
55585: LD_VAR 0 5
55589: PPUSH
55590: LD_INT 3
55592: PPUSH
55593: CALL_OW 275
55597: PUSH
55598: LD_VAR 0 4
55602: PUSH
55603: LD_INT 3
55605: ARRAY
55606: GREATEREQUAL
55607: AND
55608: ST_TO_ADDR
// end ;
55609: LD_VAR 0 3
55613: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
55614: LD_INT 0
55616: PPUSH
55617: PPUSH
55618: PPUSH
55619: PPUSH
// pom := GetBase ( building ) ;
55620: LD_ADDR_VAR 0 3
55624: PUSH
55625: LD_VAR 0 1
55629: PPUSH
55630: CALL_OW 274
55634: ST_TO_ADDR
// if not pom then
55635: LD_VAR 0 3
55639: NOT
55640: IFFALSE 55644
// exit ;
55642: GO 55814
// btype := GetBType ( building ) ;
55644: LD_ADDR_VAR 0 5
55648: PUSH
55649: LD_VAR 0 1
55653: PPUSH
55654: CALL_OW 266
55658: ST_TO_ADDR
// if btype = b_armoury then
55659: LD_VAR 0 5
55663: PUSH
55664: LD_INT 4
55666: EQUAL
55667: IFFALSE 55677
// btype := b_barracks ;
55669: LD_ADDR_VAR 0 5
55673: PUSH
55674: LD_INT 5
55676: ST_TO_ADDR
// if btype = b_depot then
55677: LD_VAR 0 5
55681: PUSH
55682: LD_INT 0
55684: EQUAL
55685: IFFALSE 55695
// btype := b_warehouse ;
55687: LD_ADDR_VAR 0 5
55691: PUSH
55692: LD_INT 1
55694: ST_TO_ADDR
// if btype = b_workshop then
55695: LD_VAR 0 5
55699: PUSH
55700: LD_INT 2
55702: EQUAL
55703: IFFALSE 55713
// btype := b_factory ;
55705: LD_ADDR_VAR 0 5
55709: PUSH
55710: LD_INT 3
55712: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55713: LD_ADDR_VAR 0 4
55717: PUSH
55718: LD_VAR 0 5
55722: PPUSH
55723: LD_VAR 0 1
55727: PPUSH
55728: CALL_OW 248
55732: PPUSH
55733: CALL_OW 450
55737: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55738: LD_ADDR_VAR 0 2
55742: PUSH
55743: LD_VAR 0 3
55747: PPUSH
55748: LD_INT 1
55750: PPUSH
55751: CALL_OW 275
55755: PUSH
55756: LD_VAR 0 4
55760: PUSH
55761: LD_INT 1
55763: ARRAY
55764: GREATEREQUAL
55765: PUSH
55766: LD_VAR 0 3
55770: PPUSH
55771: LD_INT 2
55773: PPUSH
55774: CALL_OW 275
55778: PUSH
55779: LD_VAR 0 4
55783: PUSH
55784: LD_INT 2
55786: ARRAY
55787: GREATEREQUAL
55788: AND
55789: PUSH
55790: LD_VAR 0 3
55794: PPUSH
55795: LD_INT 3
55797: PPUSH
55798: CALL_OW 275
55802: PUSH
55803: LD_VAR 0 4
55807: PUSH
55808: LD_INT 3
55810: ARRAY
55811: GREATEREQUAL
55812: AND
55813: ST_TO_ADDR
// end ;
55814: LD_VAR 0 2
55818: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
55819: LD_INT 0
55821: PPUSH
55822: PPUSH
55823: PPUSH
// pom := GetBase ( building ) ;
55824: LD_ADDR_VAR 0 4
55828: PUSH
55829: LD_VAR 0 1
55833: PPUSH
55834: CALL_OW 274
55838: ST_TO_ADDR
// if not pom then
55839: LD_VAR 0 4
55843: NOT
55844: IFFALSE 55848
// exit ;
55846: GO 55949
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55848: LD_ADDR_VAR 0 5
55852: PUSH
55853: LD_VAR 0 2
55857: PPUSH
55858: LD_VAR 0 1
55862: PPUSH
55863: CALL_OW 248
55867: PPUSH
55868: CALL_OW 450
55872: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55873: LD_ADDR_VAR 0 3
55877: PUSH
55878: LD_VAR 0 4
55882: PPUSH
55883: LD_INT 1
55885: PPUSH
55886: CALL_OW 275
55890: PUSH
55891: LD_VAR 0 5
55895: PUSH
55896: LD_INT 1
55898: ARRAY
55899: GREATEREQUAL
55900: PUSH
55901: LD_VAR 0 4
55905: PPUSH
55906: LD_INT 2
55908: PPUSH
55909: CALL_OW 275
55913: PUSH
55914: LD_VAR 0 5
55918: PUSH
55919: LD_INT 2
55921: ARRAY
55922: GREATEREQUAL
55923: AND
55924: PUSH
55925: LD_VAR 0 4
55929: PPUSH
55930: LD_INT 3
55932: PPUSH
55933: CALL_OW 275
55937: PUSH
55938: LD_VAR 0 5
55942: PUSH
55943: LD_INT 3
55945: ARRAY
55946: GREATEREQUAL
55947: AND
55948: ST_TO_ADDR
// end ;
55949: LD_VAR 0 3
55953: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
55954: LD_INT 0
55956: PPUSH
55957: PPUSH
55958: PPUSH
55959: PPUSH
55960: PPUSH
55961: PPUSH
55962: PPUSH
55963: PPUSH
55964: PPUSH
55965: PPUSH
55966: PPUSH
// result := false ;
55967: LD_ADDR_VAR 0 8
55971: PUSH
55972: LD_INT 0
55974: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
55975: LD_VAR 0 5
55979: NOT
55980: PUSH
55981: LD_VAR 0 1
55985: NOT
55986: OR
55987: PUSH
55988: LD_VAR 0 2
55992: NOT
55993: OR
55994: PUSH
55995: LD_VAR 0 3
55999: NOT
56000: OR
56001: IFFALSE 56005
// exit ;
56003: GO 56819
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
56005: LD_ADDR_VAR 0 14
56009: PUSH
56010: LD_VAR 0 1
56014: PPUSH
56015: LD_VAR 0 2
56019: PPUSH
56020: LD_VAR 0 3
56024: PPUSH
56025: LD_VAR 0 4
56029: PPUSH
56030: LD_VAR 0 5
56034: PUSH
56035: LD_INT 1
56037: ARRAY
56038: PPUSH
56039: CALL_OW 248
56043: PPUSH
56044: LD_INT 0
56046: PPUSH
56047: CALL 58072 0 6
56051: ST_TO_ADDR
// if not hexes then
56052: LD_VAR 0 14
56056: NOT
56057: IFFALSE 56061
// exit ;
56059: GO 56819
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56061: LD_ADDR_VAR 0 17
56065: PUSH
56066: LD_VAR 0 5
56070: PPUSH
56071: LD_INT 22
56073: PUSH
56074: LD_VAR 0 13
56078: PPUSH
56079: CALL_OW 255
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 2
56090: PUSH
56091: LD_INT 30
56093: PUSH
56094: LD_INT 0
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 30
56103: PUSH
56104: LD_INT 1
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: LIST
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PPUSH
56120: CALL_OW 72
56124: ST_TO_ADDR
// for i = 1 to hexes do
56125: LD_ADDR_VAR 0 9
56129: PUSH
56130: DOUBLE
56131: LD_INT 1
56133: DEC
56134: ST_TO_ADDR
56135: LD_VAR 0 14
56139: PUSH
56140: FOR_TO
56141: IFFALSE 56817
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56143: LD_ADDR_VAR 0 13
56147: PUSH
56148: LD_VAR 0 14
56152: PUSH
56153: LD_VAR 0 9
56157: ARRAY
56158: PUSH
56159: LD_INT 1
56161: ARRAY
56162: PPUSH
56163: LD_VAR 0 14
56167: PUSH
56168: LD_VAR 0 9
56172: ARRAY
56173: PUSH
56174: LD_INT 2
56176: ARRAY
56177: PPUSH
56178: CALL_OW 428
56182: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
56183: LD_VAR 0 14
56187: PUSH
56188: LD_VAR 0 9
56192: ARRAY
56193: PUSH
56194: LD_INT 1
56196: ARRAY
56197: PPUSH
56198: LD_VAR 0 14
56202: PUSH
56203: LD_VAR 0 9
56207: ARRAY
56208: PUSH
56209: LD_INT 2
56211: ARRAY
56212: PPUSH
56213: CALL_OW 351
56217: PUSH
56218: LD_VAR 0 14
56222: PUSH
56223: LD_VAR 0 9
56227: ARRAY
56228: PUSH
56229: LD_INT 1
56231: ARRAY
56232: PPUSH
56233: LD_VAR 0 14
56237: PUSH
56238: LD_VAR 0 9
56242: ARRAY
56243: PUSH
56244: LD_INT 2
56246: ARRAY
56247: PPUSH
56248: CALL_OW 488
56252: NOT
56253: OR
56254: PUSH
56255: LD_VAR 0 13
56259: PPUSH
56260: CALL_OW 247
56264: PUSH
56265: LD_INT 3
56267: EQUAL
56268: OR
56269: IFFALSE 56275
// exit ;
56271: POP
56272: POP
56273: GO 56819
// if not tmp then
56275: LD_VAR 0 13
56279: NOT
56280: IFFALSE 56284
// continue ;
56282: GO 56140
// result := true ;
56284: LD_ADDR_VAR 0 8
56288: PUSH
56289: LD_INT 1
56291: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
56292: LD_VAR 0 6
56296: PUSH
56297: LD_VAR 0 13
56301: PPUSH
56302: CALL_OW 247
56306: PUSH
56307: LD_INT 2
56309: EQUAL
56310: AND
56311: PUSH
56312: LD_VAR 0 13
56316: PPUSH
56317: CALL_OW 263
56321: PUSH
56322: LD_INT 1
56324: EQUAL
56325: AND
56326: IFFALSE 56490
// begin if IsDrivenBy ( tmp ) then
56328: LD_VAR 0 13
56332: PPUSH
56333: CALL_OW 311
56337: IFFALSE 56341
// continue ;
56339: GO 56140
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
56341: LD_VAR 0 6
56345: PPUSH
56346: LD_INT 3
56348: PUSH
56349: LD_INT 60
56351: PUSH
56352: EMPTY
56353: LIST
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 3
56361: PUSH
56362: LD_INT 55
56364: PUSH
56365: EMPTY
56366: LIST
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PPUSH
56376: CALL_OW 72
56380: IFFALSE 56488
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
56382: LD_ADDR_VAR 0 18
56386: PUSH
56387: LD_VAR 0 6
56391: PPUSH
56392: LD_INT 3
56394: PUSH
56395: LD_INT 60
56397: PUSH
56398: EMPTY
56399: LIST
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 3
56407: PUSH
56408: LD_INT 55
56410: PUSH
56411: EMPTY
56412: LIST
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PPUSH
56422: CALL_OW 72
56426: PUSH
56427: LD_INT 1
56429: ARRAY
56430: ST_TO_ADDR
// if IsInUnit ( driver ) then
56431: LD_VAR 0 18
56435: PPUSH
56436: CALL_OW 310
56440: IFFALSE 56451
// ComExit ( driver ) ;
56442: LD_VAR 0 18
56446: PPUSH
56447: CALL 81851 0 1
// AddComEnterUnit ( driver , tmp ) ;
56451: LD_VAR 0 18
56455: PPUSH
56456: LD_VAR 0 13
56460: PPUSH
56461: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
56465: LD_VAR 0 18
56469: PPUSH
56470: LD_VAR 0 7
56474: PPUSH
56475: CALL_OW 173
// AddComExitVehicle ( driver ) ;
56479: LD_VAR 0 18
56483: PPUSH
56484: CALL_OW 181
// end ; continue ;
56488: GO 56140
// end ; if not cleaners or not tmp in cleaners then
56490: LD_VAR 0 6
56494: NOT
56495: PUSH
56496: LD_VAR 0 13
56500: PUSH
56501: LD_VAR 0 6
56505: IN
56506: NOT
56507: OR
56508: IFFALSE 56815
// begin if dep then
56510: LD_VAR 0 17
56514: IFFALSE 56650
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
56516: LD_ADDR_VAR 0 16
56520: PUSH
56521: LD_VAR 0 17
56525: PUSH
56526: LD_INT 1
56528: ARRAY
56529: PPUSH
56530: CALL_OW 250
56534: PPUSH
56535: LD_VAR 0 17
56539: PUSH
56540: LD_INT 1
56542: ARRAY
56543: PPUSH
56544: CALL_OW 254
56548: PPUSH
56549: LD_INT 5
56551: PPUSH
56552: CALL_OW 272
56556: PUSH
56557: LD_VAR 0 17
56561: PUSH
56562: LD_INT 1
56564: ARRAY
56565: PPUSH
56566: CALL_OW 251
56570: PPUSH
56571: LD_VAR 0 17
56575: PUSH
56576: LD_INT 1
56578: ARRAY
56579: PPUSH
56580: CALL_OW 254
56584: PPUSH
56585: LD_INT 5
56587: PPUSH
56588: CALL_OW 273
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
56597: LD_VAR 0 16
56601: PUSH
56602: LD_INT 1
56604: ARRAY
56605: PPUSH
56606: LD_VAR 0 16
56610: PUSH
56611: LD_INT 2
56613: ARRAY
56614: PPUSH
56615: CALL_OW 488
56619: IFFALSE 56650
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
56621: LD_VAR 0 13
56625: PPUSH
56626: LD_VAR 0 16
56630: PUSH
56631: LD_INT 1
56633: ARRAY
56634: PPUSH
56635: LD_VAR 0 16
56639: PUSH
56640: LD_INT 2
56642: ARRAY
56643: PPUSH
56644: CALL_OW 111
// continue ;
56648: GO 56140
// end ; end ; r := GetDir ( tmp ) ;
56650: LD_ADDR_VAR 0 15
56654: PUSH
56655: LD_VAR 0 13
56659: PPUSH
56660: CALL_OW 254
56664: ST_TO_ADDR
// if r = 5 then
56665: LD_VAR 0 15
56669: PUSH
56670: LD_INT 5
56672: EQUAL
56673: IFFALSE 56683
// r := 0 ;
56675: LD_ADDR_VAR 0 15
56679: PUSH
56680: LD_INT 0
56682: ST_TO_ADDR
// for j = r to 5 do
56683: LD_ADDR_VAR 0 10
56687: PUSH
56688: DOUBLE
56689: LD_VAR 0 15
56693: DEC
56694: ST_TO_ADDR
56695: LD_INT 5
56697: PUSH
56698: FOR_TO
56699: IFFALSE 56813
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
56701: LD_ADDR_VAR 0 11
56705: PUSH
56706: LD_VAR 0 13
56710: PPUSH
56711: CALL_OW 250
56715: PPUSH
56716: LD_VAR 0 10
56720: PPUSH
56721: LD_INT 2
56723: PPUSH
56724: CALL_OW 272
56728: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
56729: LD_ADDR_VAR 0 12
56733: PUSH
56734: LD_VAR 0 13
56738: PPUSH
56739: CALL_OW 251
56743: PPUSH
56744: LD_VAR 0 10
56748: PPUSH
56749: LD_INT 2
56751: PPUSH
56752: CALL_OW 273
56756: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
56757: LD_VAR 0 11
56761: PPUSH
56762: LD_VAR 0 12
56766: PPUSH
56767: CALL_OW 488
56771: PUSH
56772: LD_VAR 0 11
56776: PPUSH
56777: LD_VAR 0 12
56781: PPUSH
56782: CALL_OW 428
56786: NOT
56787: AND
56788: IFFALSE 56811
// begin ComMoveXY ( tmp , _x , _y ) ;
56790: LD_VAR 0 13
56794: PPUSH
56795: LD_VAR 0 11
56799: PPUSH
56800: LD_VAR 0 12
56804: PPUSH
56805: CALL_OW 111
// break ;
56809: GO 56813
// end ; end ;
56811: GO 56698
56813: POP
56814: POP
// end ; end ;
56815: GO 56140
56817: POP
56818: POP
// end ;
56819: LD_VAR 0 8
56823: RET
// export function BuildingTechInvented ( side , btype ) ; begin
56824: LD_INT 0
56826: PPUSH
// result := true ;
56827: LD_ADDR_VAR 0 3
56831: PUSH
56832: LD_INT 1
56834: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
56835: LD_VAR 0 2
56839: PUSH
56840: LD_INT 24
56842: DOUBLE
56843: EQUAL
56844: IFTRUE 56854
56846: LD_INT 33
56848: DOUBLE
56849: EQUAL
56850: IFTRUE 56854
56852: GO 56879
56854: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
56855: LD_ADDR_VAR 0 3
56859: PUSH
56860: LD_INT 32
56862: PPUSH
56863: LD_VAR 0 1
56867: PPUSH
56868: CALL_OW 321
56872: PUSH
56873: LD_INT 2
56875: EQUAL
56876: ST_TO_ADDR
56877: GO 57195
56879: LD_INT 20
56881: DOUBLE
56882: EQUAL
56883: IFTRUE 56887
56885: GO 56912
56887: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
56888: LD_ADDR_VAR 0 3
56892: PUSH
56893: LD_INT 6
56895: PPUSH
56896: LD_VAR 0 1
56900: PPUSH
56901: CALL_OW 321
56905: PUSH
56906: LD_INT 2
56908: EQUAL
56909: ST_TO_ADDR
56910: GO 57195
56912: LD_INT 22
56914: DOUBLE
56915: EQUAL
56916: IFTRUE 56926
56918: LD_INT 36
56920: DOUBLE
56921: EQUAL
56922: IFTRUE 56926
56924: GO 56951
56926: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
56927: LD_ADDR_VAR 0 3
56931: PUSH
56932: LD_INT 15
56934: PPUSH
56935: LD_VAR 0 1
56939: PPUSH
56940: CALL_OW 321
56944: PUSH
56945: LD_INT 2
56947: EQUAL
56948: ST_TO_ADDR
56949: GO 57195
56951: LD_INT 30
56953: DOUBLE
56954: EQUAL
56955: IFTRUE 56959
56957: GO 56984
56959: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
56960: LD_ADDR_VAR 0 3
56964: PUSH
56965: LD_INT 20
56967: PPUSH
56968: LD_VAR 0 1
56972: PPUSH
56973: CALL_OW 321
56977: PUSH
56978: LD_INT 2
56980: EQUAL
56981: ST_TO_ADDR
56982: GO 57195
56984: LD_INT 28
56986: DOUBLE
56987: EQUAL
56988: IFTRUE 56998
56990: LD_INT 21
56992: DOUBLE
56993: EQUAL
56994: IFTRUE 56998
56996: GO 57023
56998: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
56999: LD_ADDR_VAR 0 3
57003: PUSH
57004: LD_INT 21
57006: PPUSH
57007: LD_VAR 0 1
57011: PPUSH
57012: CALL_OW 321
57016: PUSH
57017: LD_INT 2
57019: EQUAL
57020: ST_TO_ADDR
57021: GO 57195
57023: LD_INT 16
57025: DOUBLE
57026: EQUAL
57027: IFTRUE 57031
57029: GO 57056
57031: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
57032: LD_ADDR_VAR 0 3
57036: PUSH
57037: LD_INT 84
57039: PPUSH
57040: LD_VAR 0 1
57044: PPUSH
57045: CALL_OW 321
57049: PUSH
57050: LD_INT 2
57052: EQUAL
57053: ST_TO_ADDR
57054: GO 57195
57056: LD_INT 19
57058: DOUBLE
57059: EQUAL
57060: IFTRUE 57070
57062: LD_INT 23
57064: DOUBLE
57065: EQUAL
57066: IFTRUE 57070
57068: GO 57095
57070: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
57071: LD_ADDR_VAR 0 3
57075: PUSH
57076: LD_INT 83
57078: PPUSH
57079: LD_VAR 0 1
57083: PPUSH
57084: CALL_OW 321
57088: PUSH
57089: LD_INT 2
57091: EQUAL
57092: ST_TO_ADDR
57093: GO 57195
57095: LD_INT 17
57097: DOUBLE
57098: EQUAL
57099: IFTRUE 57103
57101: GO 57128
57103: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
57104: LD_ADDR_VAR 0 3
57108: PUSH
57109: LD_INT 39
57111: PPUSH
57112: LD_VAR 0 1
57116: PPUSH
57117: CALL_OW 321
57121: PUSH
57122: LD_INT 2
57124: EQUAL
57125: ST_TO_ADDR
57126: GO 57195
57128: LD_INT 18
57130: DOUBLE
57131: EQUAL
57132: IFTRUE 57136
57134: GO 57161
57136: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
57137: LD_ADDR_VAR 0 3
57141: PUSH
57142: LD_INT 40
57144: PPUSH
57145: LD_VAR 0 1
57149: PPUSH
57150: CALL_OW 321
57154: PUSH
57155: LD_INT 2
57157: EQUAL
57158: ST_TO_ADDR
57159: GO 57195
57161: LD_INT 27
57163: DOUBLE
57164: EQUAL
57165: IFTRUE 57169
57167: GO 57194
57169: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
57170: LD_ADDR_VAR 0 3
57174: PUSH
57175: LD_INT 35
57177: PPUSH
57178: LD_VAR 0 1
57182: PPUSH
57183: CALL_OW 321
57187: PUSH
57188: LD_INT 2
57190: EQUAL
57191: ST_TO_ADDR
57192: GO 57195
57194: POP
// end ;
57195: LD_VAR 0 3
57199: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
57200: LD_INT 0
57202: PPUSH
57203: PPUSH
57204: PPUSH
57205: PPUSH
57206: PPUSH
57207: PPUSH
57208: PPUSH
57209: PPUSH
57210: PPUSH
57211: PPUSH
57212: PPUSH
// result := false ;
57213: LD_ADDR_VAR 0 6
57217: PUSH
57218: LD_INT 0
57220: ST_TO_ADDR
// if btype = b_depot then
57221: LD_VAR 0 2
57225: PUSH
57226: LD_INT 0
57228: EQUAL
57229: IFFALSE 57241
// begin result := true ;
57231: LD_ADDR_VAR 0 6
57235: PUSH
57236: LD_INT 1
57238: ST_TO_ADDR
// exit ;
57239: GO 58067
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
57241: LD_VAR 0 1
57245: NOT
57246: PUSH
57247: LD_VAR 0 1
57251: PPUSH
57252: CALL_OW 266
57256: PUSH
57257: LD_INT 0
57259: PUSH
57260: LD_INT 1
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: IN
57267: NOT
57268: OR
57269: PUSH
57270: LD_VAR 0 2
57274: NOT
57275: OR
57276: PUSH
57277: LD_VAR 0 5
57281: PUSH
57282: LD_INT 0
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: LD_INT 2
57290: PUSH
57291: LD_INT 3
57293: PUSH
57294: LD_INT 4
57296: PUSH
57297: LD_INT 5
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: IN
57308: NOT
57309: OR
57310: PUSH
57311: LD_VAR 0 3
57315: PPUSH
57316: LD_VAR 0 4
57320: PPUSH
57321: CALL_OW 488
57325: NOT
57326: OR
57327: IFFALSE 57331
// exit ;
57329: GO 58067
// side := GetSide ( depot ) ;
57331: LD_ADDR_VAR 0 9
57335: PUSH
57336: LD_VAR 0 1
57340: PPUSH
57341: CALL_OW 255
57345: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
57346: LD_VAR 0 9
57350: PPUSH
57351: LD_VAR 0 2
57355: PPUSH
57356: CALL 56824 0 2
57360: NOT
57361: IFFALSE 57365
// exit ;
57363: GO 58067
// pom := GetBase ( depot ) ;
57365: LD_ADDR_VAR 0 10
57369: PUSH
57370: LD_VAR 0 1
57374: PPUSH
57375: CALL_OW 274
57379: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57380: LD_ADDR_VAR 0 11
57384: PUSH
57385: LD_VAR 0 2
57389: PPUSH
57390: LD_VAR 0 1
57394: PPUSH
57395: CALL_OW 248
57399: PPUSH
57400: CALL_OW 450
57404: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
57405: LD_VAR 0 10
57409: PPUSH
57410: LD_INT 1
57412: PPUSH
57413: CALL_OW 275
57417: PUSH
57418: LD_VAR 0 11
57422: PUSH
57423: LD_INT 1
57425: ARRAY
57426: GREATEREQUAL
57427: PUSH
57428: LD_VAR 0 10
57432: PPUSH
57433: LD_INT 2
57435: PPUSH
57436: CALL_OW 275
57440: PUSH
57441: LD_VAR 0 11
57445: PUSH
57446: LD_INT 2
57448: ARRAY
57449: GREATEREQUAL
57450: AND
57451: PUSH
57452: LD_VAR 0 10
57456: PPUSH
57457: LD_INT 3
57459: PPUSH
57460: CALL_OW 275
57464: PUSH
57465: LD_VAR 0 11
57469: PUSH
57470: LD_INT 3
57472: ARRAY
57473: GREATEREQUAL
57474: AND
57475: NOT
57476: IFFALSE 57480
// exit ;
57478: GO 58067
// if GetBType ( depot ) = b_depot then
57480: LD_VAR 0 1
57484: PPUSH
57485: CALL_OW 266
57489: PUSH
57490: LD_INT 0
57492: EQUAL
57493: IFFALSE 57505
// dist := 28 else
57495: LD_ADDR_VAR 0 14
57499: PUSH
57500: LD_INT 28
57502: ST_TO_ADDR
57503: GO 57513
// dist := 36 ;
57505: LD_ADDR_VAR 0 14
57509: PUSH
57510: LD_INT 36
57512: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
57513: LD_VAR 0 1
57517: PPUSH
57518: LD_VAR 0 3
57522: PPUSH
57523: LD_VAR 0 4
57527: PPUSH
57528: CALL_OW 297
57532: PUSH
57533: LD_VAR 0 14
57537: GREATER
57538: IFFALSE 57542
// exit ;
57540: GO 58067
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
57542: LD_ADDR_VAR 0 12
57546: PUSH
57547: LD_VAR 0 2
57551: PPUSH
57552: LD_VAR 0 3
57556: PPUSH
57557: LD_VAR 0 4
57561: PPUSH
57562: LD_VAR 0 5
57566: PPUSH
57567: LD_VAR 0 1
57571: PPUSH
57572: CALL_OW 248
57576: PPUSH
57577: LD_INT 0
57579: PPUSH
57580: CALL 58072 0 6
57584: ST_TO_ADDR
// if not hexes then
57585: LD_VAR 0 12
57589: NOT
57590: IFFALSE 57594
// exit ;
57592: GO 58067
// hex := GetHexInfo ( x , y ) ;
57594: LD_ADDR_VAR 0 15
57598: PUSH
57599: LD_VAR 0 3
57603: PPUSH
57604: LD_VAR 0 4
57608: PPUSH
57609: CALL_OW 546
57613: ST_TO_ADDR
// if hex [ 1 ] then
57614: LD_VAR 0 15
57618: PUSH
57619: LD_INT 1
57621: ARRAY
57622: IFFALSE 57626
// exit ;
57624: GO 58067
// height := hex [ 2 ] ;
57626: LD_ADDR_VAR 0 13
57630: PUSH
57631: LD_VAR 0 15
57635: PUSH
57636: LD_INT 2
57638: ARRAY
57639: ST_TO_ADDR
// for i = 1 to hexes do
57640: LD_ADDR_VAR 0 7
57644: PUSH
57645: DOUBLE
57646: LD_INT 1
57648: DEC
57649: ST_TO_ADDR
57650: LD_VAR 0 12
57654: PUSH
57655: FOR_TO
57656: IFFALSE 57986
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
57658: LD_VAR 0 12
57662: PUSH
57663: LD_VAR 0 7
57667: ARRAY
57668: PUSH
57669: LD_INT 1
57671: ARRAY
57672: PPUSH
57673: LD_VAR 0 12
57677: PUSH
57678: LD_VAR 0 7
57682: ARRAY
57683: PUSH
57684: LD_INT 2
57686: ARRAY
57687: PPUSH
57688: CALL_OW 488
57692: NOT
57693: PUSH
57694: LD_VAR 0 12
57698: PUSH
57699: LD_VAR 0 7
57703: ARRAY
57704: PUSH
57705: LD_INT 1
57707: ARRAY
57708: PPUSH
57709: LD_VAR 0 12
57713: PUSH
57714: LD_VAR 0 7
57718: ARRAY
57719: PUSH
57720: LD_INT 2
57722: ARRAY
57723: PPUSH
57724: CALL_OW 428
57728: PUSH
57729: LD_INT 0
57731: GREATER
57732: OR
57733: PUSH
57734: LD_VAR 0 12
57738: PUSH
57739: LD_VAR 0 7
57743: ARRAY
57744: PUSH
57745: LD_INT 1
57747: ARRAY
57748: PPUSH
57749: LD_VAR 0 12
57753: PUSH
57754: LD_VAR 0 7
57758: ARRAY
57759: PUSH
57760: LD_INT 2
57762: ARRAY
57763: PPUSH
57764: CALL_OW 351
57768: OR
57769: IFFALSE 57775
// exit ;
57771: POP
57772: POP
57773: GO 58067
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57775: LD_ADDR_VAR 0 8
57779: PUSH
57780: LD_VAR 0 12
57784: PUSH
57785: LD_VAR 0 7
57789: ARRAY
57790: PUSH
57791: LD_INT 1
57793: ARRAY
57794: PPUSH
57795: LD_VAR 0 12
57799: PUSH
57800: LD_VAR 0 7
57804: ARRAY
57805: PUSH
57806: LD_INT 2
57808: ARRAY
57809: PPUSH
57810: CALL_OW 546
57814: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
57815: LD_VAR 0 8
57819: PUSH
57820: LD_INT 1
57822: ARRAY
57823: PUSH
57824: LD_VAR 0 8
57828: PUSH
57829: LD_INT 2
57831: ARRAY
57832: PUSH
57833: LD_VAR 0 13
57837: PUSH
57838: LD_INT 2
57840: PLUS
57841: GREATER
57842: OR
57843: PUSH
57844: LD_VAR 0 8
57848: PUSH
57849: LD_INT 2
57851: ARRAY
57852: PUSH
57853: LD_VAR 0 13
57857: PUSH
57858: LD_INT 2
57860: MINUS
57861: LESS
57862: OR
57863: PUSH
57864: LD_VAR 0 8
57868: PUSH
57869: LD_INT 3
57871: ARRAY
57872: PUSH
57873: LD_INT 0
57875: PUSH
57876: LD_INT 8
57878: PUSH
57879: LD_INT 9
57881: PUSH
57882: LD_INT 10
57884: PUSH
57885: LD_INT 11
57887: PUSH
57888: LD_INT 12
57890: PUSH
57891: LD_INT 13
57893: PUSH
57894: LD_INT 16
57896: PUSH
57897: LD_INT 17
57899: PUSH
57900: LD_INT 18
57902: PUSH
57903: LD_INT 19
57905: PUSH
57906: LD_INT 20
57908: PUSH
57909: LD_INT 21
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: IN
57927: NOT
57928: OR
57929: PUSH
57930: LD_VAR 0 8
57934: PUSH
57935: LD_INT 5
57937: ARRAY
57938: NOT
57939: OR
57940: PUSH
57941: LD_VAR 0 8
57945: PUSH
57946: LD_INT 6
57948: ARRAY
57949: PUSH
57950: LD_INT 1
57952: PUSH
57953: LD_INT 2
57955: PUSH
57956: LD_INT 7
57958: PUSH
57959: LD_INT 9
57961: PUSH
57962: LD_INT 10
57964: PUSH
57965: LD_INT 11
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: IN
57976: NOT
57977: OR
57978: IFFALSE 57984
// exit ;
57980: POP
57981: POP
57982: GO 58067
// end ;
57984: GO 57655
57986: POP
57987: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
57988: LD_VAR 0 9
57992: PPUSH
57993: LD_VAR 0 3
57997: PPUSH
57998: LD_VAR 0 4
58002: PPUSH
58003: LD_INT 20
58005: PPUSH
58006: CALL 49990 0 4
58010: PUSH
58011: LD_INT 4
58013: ARRAY
58014: IFFALSE 58018
// exit ;
58016: GO 58067
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
58018: LD_VAR 0 2
58022: PUSH
58023: LD_INT 29
58025: PUSH
58026: LD_INT 30
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: IN
58033: PUSH
58034: LD_VAR 0 3
58038: PPUSH
58039: LD_VAR 0 4
58043: PPUSH
58044: LD_VAR 0 9
58048: PPUSH
58049: CALL_OW 440
58053: NOT
58054: AND
58055: IFFALSE 58059
// exit ;
58057: GO 58067
// result := true ;
58059: LD_ADDR_VAR 0 6
58063: PUSH
58064: LD_INT 1
58066: ST_TO_ADDR
// end ;
58067: LD_VAR 0 6
58071: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
58072: LD_INT 0
58074: PPUSH
58075: PPUSH
58076: PPUSH
58077: PPUSH
58078: PPUSH
58079: PPUSH
58080: PPUSH
58081: PPUSH
58082: PPUSH
58083: PPUSH
58084: PPUSH
58085: PPUSH
58086: PPUSH
58087: PPUSH
58088: PPUSH
58089: PPUSH
58090: PPUSH
58091: PPUSH
58092: PPUSH
58093: PPUSH
58094: PPUSH
58095: PPUSH
58096: PPUSH
58097: PPUSH
58098: PPUSH
58099: PPUSH
58100: PPUSH
58101: PPUSH
58102: PPUSH
58103: PPUSH
58104: PPUSH
58105: PPUSH
58106: PPUSH
58107: PPUSH
58108: PPUSH
58109: PPUSH
58110: PPUSH
58111: PPUSH
58112: PPUSH
58113: PPUSH
58114: PPUSH
58115: PPUSH
58116: PPUSH
58117: PPUSH
58118: PPUSH
58119: PPUSH
58120: PPUSH
58121: PPUSH
58122: PPUSH
58123: PPUSH
58124: PPUSH
58125: PPUSH
58126: PPUSH
58127: PPUSH
58128: PPUSH
58129: PPUSH
58130: PPUSH
58131: PPUSH
// result = [ ] ;
58132: LD_ADDR_VAR 0 7
58136: PUSH
58137: EMPTY
58138: ST_TO_ADDR
// temp_list = [ ] ;
58139: LD_ADDR_VAR 0 9
58143: PUSH
58144: EMPTY
58145: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
58146: LD_VAR 0 4
58150: PUSH
58151: LD_INT 0
58153: PUSH
58154: LD_INT 1
58156: PUSH
58157: LD_INT 2
58159: PUSH
58160: LD_INT 3
58162: PUSH
58163: LD_INT 4
58165: PUSH
58166: LD_INT 5
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: IN
58177: NOT
58178: PUSH
58179: LD_VAR 0 1
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: LD_INT 1
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: IN
58194: PUSH
58195: LD_VAR 0 5
58199: PUSH
58200: LD_INT 1
58202: PUSH
58203: LD_INT 2
58205: PUSH
58206: LD_INT 3
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: LIST
58213: IN
58214: NOT
58215: AND
58216: OR
58217: IFFALSE 58221
// exit ;
58219: GO 76612
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
58221: LD_VAR 0 1
58225: PUSH
58226: LD_INT 6
58228: PUSH
58229: LD_INT 7
58231: PUSH
58232: LD_INT 8
58234: PUSH
58235: LD_INT 13
58237: PUSH
58238: LD_INT 12
58240: PUSH
58241: LD_INT 15
58243: PUSH
58244: LD_INT 11
58246: PUSH
58247: LD_INT 14
58249: PUSH
58250: LD_INT 10
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: IN
58264: IFFALSE 58274
// btype = b_lab ;
58266: LD_ADDR_VAR 0 1
58270: PUSH
58271: LD_INT 6
58273: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
58274: LD_VAR 0 6
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: LD_INT 2
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: LIST
58292: IN
58293: NOT
58294: PUSH
58295: LD_VAR 0 1
58299: PUSH
58300: LD_INT 0
58302: PUSH
58303: LD_INT 1
58305: PUSH
58306: LD_INT 2
58308: PUSH
58309: LD_INT 3
58311: PUSH
58312: LD_INT 6
58314: PUSH
58315: LD_INT 36
58317: PUSH
58318: LD_INT 4
58320: PUSH
58321: LD_INT 5
58323: PUSH
58324: LD_INT 31
58326: PUSH
58327: LD_INT 32
58329: PUSH
58330: LD_INT 33
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: IN
58346: NOT
58347: PUSH
58348: LD_VAR 0 6
58352: PUSH
58353: LD_INT 1
58355: EQUAL
58356: AND
58357: OR
58358: PUSH
58359: LD_VAR 0 1
58363: PUSH
58364: LD_INT 2
58366: PUSH
58367: LD_INT 3
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: IN
58374: NOT
58375: PUSH
58376: LD_VAR 0 6
58380: PUSH
58381: LD_INT 2
58383: EQUAL
58384: AND
58385: OR
58386: IFFALSE 58396
// mode = 0 ;
58388: LD_ADDR_VAR 0 6
58392: PUSH
58393: LD_INT 0
58395: ST_TO_ADDR
// case mode of 0 :
58396: LD_VAR 0 6
58400: PUSH
58401: LD_INT 0
58403: DOUBLE
58404: EQUAL
58405: IFTRUE 58409
58407: GO 69862
58409: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58410: LD_ADDR_VAR 0 11
58414: PUSH
58415: LD_INT 0
58417: PUSH
58418: LD_INT 0
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 0
58427: PUSH
58428: LD_INT 1
58430: NEG
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 1
58438: PUSH
58439: LD_INT 0
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 1
58448: PUSH
58449: LD_INT 1
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: LD_INT 1
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 1
58468: NEG
58469: PUSH
58470: LD_INT 0
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 1
58479: NEG
58480: PUSH
58481: LD_INT 1
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 1
58491: NEG
58492: PUSH
58493: LD_INT 2
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 0
58503: PUSH
58504: LD_INT 2
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 1
58514: PUSH
58515: LD_INT 1
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 1
58525: PUSH
58526: LD_INT 2
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 0
58535: PUSH
58536: LD_INT 2
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 1
58545: NEG
58546: PUSH
58547: LD_INT 1
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 1
58556: PUSH
58557: LD_INT 3
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: LD_INT 3
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 1
58576: NEG
58577: PUSH
58578: LD_INT 2
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58603: LD_ADDR_VAR 0 12
58607: PUSH
58608: LD_INT 0
58610: PUSH
58611: LD_INT 0
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: LD_INT 1
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 1
58631: PUSH
58632: LD_INT 0
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 1
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: LD_INT 1
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 1
58661: NEG
58662: PUSH
58663: LD_INT 0
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 1
58672: NEG
58673: PUSH
58674: LD_INT 1
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 1
58684: PUSH
58685: LD_INT 1
58687: NEG
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 2
58695: PUSH
58696: LD_INT 0
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 2
58705: PUSH
58706: LD_INT 1
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 1
58715: NEG
58716: PUSH
58717: LD_INT 1
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 2
58726: NEG
58727: PUSH
58728: LD_INT 0
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 2
58737: NEG
58738: PUSH
58739: LD_INT 1
58741: NEG
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 2
58749: NEG
58750: PUSH
58751: LD_INT 1
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 3
58760: NEG
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 3
58771: NEG
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58799: LD_ADDR_VAR 0 13
58803: PUSH
58804: LD_INT 0
58806: PUSH
58807: LD_INT 0
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: LD_INT 1
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 1
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 1
58837: PUSH
58838: LD_INT 1
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 1
58857: NEG
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 1
58868: NEG
58869: PUSH
58870: LD_INT 1
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: NEG
58881: PUSH
58882: LD_INT 2
58884: NEG
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 2
58892: PUSH
58893: LD_INT 1
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 2
58902: PUSH
58903: LD_INT 2
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 1
58912: PUSH
58913: LD_INT 2
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 2
58922: NEG
58923: PUSH
58924: LD_INT 1
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 2
58934: NEG
58935: PUSH
58936: LD_INT 2
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 2
58946: NEG
58947: PUSH
58948: LD_INT 3
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 3
58958: NEG
58959: PUSH
58960: LD_INT 2
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 3
58970: NEG
58971: PUSH
58972: LD_INT 3
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58998: LD_ADDR_VAR 0 14
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: LD_INT 1
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 1
59026: PUSH
59027: LD_INT 0
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 1
59036: PUSH
59037: LD_INT 1
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: LD_INT 1
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 1
59056: NEG
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: LD_INT 1
59071: NEG
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 1
59079: NEG
59080: PUSH
59081: LD_INT 2
59083: NEG
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 0
59091: PUSH
59092: LD_INT 2
59094: NEG
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 1
59102: PUSH
59103: LD_INT 1
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 1
59113: PUSH
59114: LD_INT 2
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 0
59123: PUSH
59124: LD_INT 2
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 1
59133: NEG
59134: PUSH
59135: LD_INT 1
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 1
59144: NEG
59145: PUSH
59146: LD_INT 3
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 0
59156: PUSH
59157: LD_INT 3
59159: NEG
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 1
59167: PUSH
59168: LD_INT 2
59170: NEG
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59194: LD_ADDR_VAR 0 15
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: LD_INT 0
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 0
59211: PUSH
59212: LD_INT 1
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: LD_INT 0
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: LD_INT 1
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 0
59242: PUSH
59243: LD_INT 1
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 1
59263: NEG
59264: PUSH
59265: LD_INT 1
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 1
59275: PUSH
59276: LD_INT 1
59278: NEG
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 2
59286: PUSH
59287: LD_INT 0
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 2
59296: PUSH
59297: LD_INT 1
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 1
59306: NEG
59307: PUSH
59308: LD_INT 1
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 2
59317: NEG
59318: PUSH
59319: LD_INT 0
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 2
59328: NEG
59329: PUSH
59330: LD_INT 1
59332: NEG
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 2
59340: PUSH
59341: LD_INT 1
59343: NEG
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 3
59351: PUSH
59352: LD_INT 0
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 3
59361: PUSH
59362: LD_INT 1
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59387: LD_ADDR_VAR 0 16
59391: PUSH
59392: LD_INT 0
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 0
59404: PUSH
59405: LD_INT 1
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: LD_INT 0
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 1
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: LD_INT 1
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 1
59445: NEG
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 1
59456: NEG
59457: PUSH
59458: LD_INT 1
59460: NEG
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 1
59468: NEG
59469: PUSH
59470: LD_INT 2
59472: NEG
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 2
59480: PUSH
59481: LD_INT 1
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 2
59490: PUSH
59491: LD_INT 2
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 1
59500: PUSH
59501: LD_INT 2
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 2
59510: NEG
59511: PUSH
59512: LD_INT 1
59514: NEG
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 2
59522: NEG
59523: PUSH
59524: LD_INT 2
59526: NEG
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 3
59534: PUSH
59535: LD_INT 2
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 3
59544: PUSH
59545: LD_INT 3
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 2
59554: PUSH
59555: LD_INT 3
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59580: LD_ADDR_VAR 0 17
59584: PUSH
59585: LD_INT 0
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 0
59597: PUSH
59598: LD_INT 1
59600: NEG
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: LD_INT 0
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 1
59618: PUSH
59619: LD_INT 1
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 0
59628: PUSH
59629: LD_INT 1
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 1
59638: NEG
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 1
59649: NEG
59650: PUSH
59651: LD_INT 1
59653: NEG
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 1
59661: NEG
59662: PUSH
59663: LD_INT 2
59665: NEG
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 0
59673: PUSH
59674: LD_INT 2
59676: NEG
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 1
59684: PUSH
59685: LD_INT 1
59687: NEG
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 2
59695: PUSH
59696: LD_INT 0
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 2
59705: PUSH
59706: LD_INT 1
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 2
59715: PUSH
59716: LD_INT 2
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 1
59725: PUSH
59726: LD_INT 2
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 0
59735: PUSH
59736: LD_INT 2
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 1
59745: NEG
59746: PUSH
59747: LD_INT 1
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 2
59756: NEG
59757: PUSH
59758: LD_INT 0
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 2
59767: NEG
59768: PUSH
59769: LD_INT 1
59771: NEG
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 2
59779: NEG
59780: PUSH
59781: LD_INT 2
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59810: LD_ADDR_VAR 0 18
59814: PUSH
59815: LD_INT 0
59817: PUSH
59818: LD_INT 0
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 1
59838: PUSH
59839: LD_INT 0
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 1
59848: PUSH
59849: LD_INT 1
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 0
59858: PUSH
59859: LD_INT 1
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 1
59868: NEG
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 1
59879: NEG
59880: PUSH
59881: LD_INT 1
59883: NEG
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 1
59891: NEG
59892: PUSH
59893: LD_INT 2
59895: NEG
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: LD_INT 2
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 1
59914: PUSH
59915: LD_INT 1
59917: NEG
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 2
59925: PUSH
59926: LD_INT 0
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 2
59935: PUSH
59936: LD_INT 1
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 2
59945: PUSH
59946: LD_INT 2
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 1
59955: PUSH
59956: LD_INT 2
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 0
59965: PUSH
59966: LD_INT 2
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 1
59975: NEG
59976: PUSH
59977: LD_INT 1
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 2
59986: NEG
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 2
59997: NEG
59998: PUSH
59999: LD_INT 1
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 2
60009: NEG
60010: PUSH
60011: LD_INT 2
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60040: LD_ADDR_VAR 0 19
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: LD_INT 0
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 0
60057: PUSH
60058: LD_INT 1
60060: NEG
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 1
60068: PUSH
60069: LD_INT 0
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 1
60078: PUSH
60079: LD_INT 1
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 0
60088: PUSH
60089: LD_INT 1
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 1
60098: NEG
60099: PUSH
60100: LD_INT 0
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 1
60109: NEG
60110: PUSH
60111: LD_INT 1
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 1
60121: NEG
60122: PUSH
60123: LD_INT 2
60125: NEG
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: LD_INT 2
60136: NEG
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 1
60144: PUSH
60145: LD_INT 1
60147: NEG
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 2
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 2
60165: PUSH
60166: LD_INT 1
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 2
60175: PUSH
60176: LD_INT 2
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 1
60185: PUSH
60186: LD_INT 2
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 0
60195: PUSH
60196: LD_INT 2
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 1
60205: NEG
60206: PUSH
60207: LD_INT 1
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 2
60216: NEG
60217: PUSH
60218: LD_INT 0
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 2
60227: NEG
60228: PUSH
60229: LD_INT 1
60231: NEG
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 2
60239: NEG
60240: PUSH
60241: LD_INT 2
60243: NEG
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60270: LD_ADDR_VAR 0 20
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: LD_INT 0
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 0
60287: PUSH
60288: LD_INT 1
60290: NEG
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 1
60298: PUSH
60299: LD_INT 0
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 1
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 0
60318: PUSH
60319: LD_INT 1
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: NEG
60329: PUSH
60330: LD_INT 0
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: LD_INT 1
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 1
60351: NEG
60352: PUSH
60353: LD_INT 2
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: LD_INT 2
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 1
60374: PUSH
60375: LD_INT 1
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 2
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 2
60395: PUSH
60396: LD_INT 1
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 2
60405: PUSH
60406: LD_INT 2
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 1
60415: PUSH
60416: LD_INT 2
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 0
60425: PUSH
60426: LD_INT 2
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 1
60435: NEG
60436: PUSH
60437: LD_INT 1
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 2
60446: NEG
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 2
60457: NEG
60458: PUSH
60459: LD_INT 1
60461: NEG
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 2
60469: NEG
60470: PUSH
60471: LD_INT 2
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60500: LD_ADDR_VAR 0 21
60504: PUSH
60505: LD_INT 0
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 0
60517: PUSH
60518: LD_INT 1
60520: NEG
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 1
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 1
60538: PUSH
60539: LD_INT 1
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 0
60548: PUSH
60549: LD_INT 1
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 1
60558: NEG
60559: PUSH
60560: LD_INT 0
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 1
60569: NEG
60570: PUSH
60571: LD_INT 1
60573: NEG
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 1
60581: NEG
60582: PUSH
60583: LD_INT 2
60585: NEG
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 0
60593: PUSH
60594: LD_INT 2
60596: NEG
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 1
60604: PUSH
60605: LD_INT 1
60607: NEG
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 2
60615: PUSH
60616: LD_INT 0
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 2
60625: PUSH
60626: LD_INT 1
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 2
60635: PUSH
60636: LD_INT 2
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 1
60645: PUSH
60646: LD_INT 2
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 0
60655: PUSH
60656: LD_INT 2
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 1
60665: NEG
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 2
60676: NEG
60677: PUSH
60678: LD_INT 0
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 2
60687: NEG
60688: PUSH
60689: LD_INT 1
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 2
60699: NEG
60700: PUSH
60701: LD_INT 2
60703: NEG
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60730: LD_ADDR_VAR 0 22
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: LD_INT 0
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 0
60747: PUSH
60748: LD_INT 1
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 1
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 1
60768: PUSH
60769: LD_INT 1
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 0
60778: PUSH
60779: LD_INT 1
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 1
60788: NEG
60789: PUSH
60790: LD_INT 0
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 1
60799: NEG
60800: PUSH
60801: LD_INT 1
60803: NEG
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 1
60811: NEG
60812: PUSH
60813: LD_INT 2
60815: NEG
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 0
60823: PUSH
60824: LD_INT 2
60826: NEG
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 1
60834: PUSH
60835: LD_INT 1
60837: NEG
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 2
60845: PUSH
60846: LD_INT 0
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 2
60855: PUSH
60856: LD_INT 1
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 2
60865: PUSH
60866: LD_INT 2
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 1
60875: PUSH
60876: LD_INT 2
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 0
60885: PUSH
60886: LD_INT 2
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 1
60895: NEG
60896: PUSH
60897: LD_INT 1
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 2
60906: NEG
60907: PUSH
60908: LD_INT 0
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 2
60917: NEG
60918: PUSH
60919: LD_INT 1
60921: NEG
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 2
60929: NEG
60930: PUSH
60931: LD_INT 2
60933: NEG
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60960: LD_ADDR_VAR 0 23
60964: PUSH
60965: LD_INT 0
60967: PUSH
60968: LD_INT 0
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 0
60977: PUSH
60978: LD_INT 1
60980: NEG
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 1
60988: PUSH
60989: LD_INT 0
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 1
60998: PUSH
60999: LD_INT 1
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 0
61008: PUSH
61009: LD_INT 1
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 1
61018: NEG
61019: PUSH
61020: LD_INT 0
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 1
61029: NEG
61030: PUSH
61031: LD_INT 1
61033: NEG
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 1
61041: NEG
61042: PUSH
61043: LD_INT 2
61045: NEG
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 0
61053: PUSH
61054: LD_INT 2
61056: NEG
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 1
61064: PUSH
61065: LD_INT 1
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 2
61075: PUSH
61076: LD_INT 0
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 2
61085: PUSH
61086: LD_INT 1
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 2
61095: PUSH
61096: LD_INT 2
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 1
61105: PUSH
61106: LD_INT 2
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 0
61115: PUSH
61116: LD_INT 2
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 1
61125: NEG
61126: PUSH
61127: LD_INT 1
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 2
61136: NEG
61137: PUSH
61138: LD_INT 0
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 2
61147: NEG
61148: PUSH
61149: LD_INT 1
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 2
61159: NEG
61160: PUSH
61161: LD_INT 2
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 2
61171: NEG
61172: PUSH
61173: LD_INT 3
61175: NEG
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 1
61183: NEG
61184: PUSH
61185: LD_INT 3
61187: NEG
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: LD_INT 2
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 2
61206: PUSH
61207: LD_INT 1
61209: NEG
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
61240: LD_ADDR_VAR 0 24
61244: PUSH
61245: LD_INT 0
61247: PUSH
61248: LD_INT 0
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 0
61257: PUSH
61258: LD_INT 1
61260: NEG
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 1
61268: PUSH
61269: LD_INT 0
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 1
61278: PUSH
61279: LD_INT 1
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 0
61288: PUSH
61289: LD_INT 1
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 1
61298: NEG
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 1
61309: NEG
61310: PUSH
61311: LD_INT 1
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 1
61321: NEG
61322: PUSH
61323: LD_INT 2
61325: NEG
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: LD_INT 2
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 1
61344: PUSH
61345: LD_INT 1
61347: NEG
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 2
61355: PUSH
61356: LD_INT 0
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 2
61365: PUSH
61366: LD_INT 1
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 2
61375: PUSH
61376: LD_INT 2
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 1
61385: PUSH
61386: LD_INT 2
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: LD_INT 2
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 1
61405: NEG
61406: PUSH
61407: LD_INT 1
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 2
61416: NEG
61417: PUSH
61418: LD_INT 0
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 2
61427: NEG
61428: PUSH
61429: LD_INT 1
61431: NEG
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 2
61439: NEG
61440: PUSH
61441: LD_INT 2
61443: NEG
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 1
61451: PUSH
61452: LD_INT 2
61454: NEG
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 2
61462: PUSH
61463: LD_INT 1
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 3
61473: PUSH
61474: LD_INT 1
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 3
61483: PUSH
61484: LD_INT 2
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
61516: LD_ADDR_VAR 0 25
61520: PUSH
61521: LD_INT 0
61523: PUSH
61524: LD_INT 0
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 0
61533: PUSH
61534: LD_INT 1
61536: NEG
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 1
61544: PUSH
61545: LD_INT 0
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 1
61554: PUSH
61555: LD_INT 1
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 0
61564: PUSH
61565: LD_INT 1
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 1
61574: NEG
61575: PUSH
61576: LD_INT 0
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 1
61585: NEG
61586: PUSH
61587: LD_INT 1
61589: NEG
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 1
61597: NEG
61598: PUSH
61599: LD_INT 2
61601: NEG
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 0
61609: PUSH
61610: LD_INT 2
61612: NEG
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 1
61620: PUSH
61621: LD_INT 1
61623: NEG
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 2
61631: PUSH
61632: LD_INT 0
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 2
61641: PUSH
61642: LD_INT 1
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 2
61651: PUSH
61652: LD_INT 2
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 1
61661: PUSH
61662: LD_INT 2
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 0
61671: PUSH
61672: LD_INT 2
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 1
61681: NEG
61682: PUSH
61683: LD_INT 1
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 2
61692: NEG
61693: PUSH
61694: LD_INT 0
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 2
61703: NEG
61704: PUSH
61705: LD_INT 1
61707: NEG
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 2
61715: NEG
61716: PUSH
61717: LD_INT 2
61719: NEG
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 3
61727: PUSH
61728: LD_INT 1
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 3
61737: PUSH
61738: LD_INT 2
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 2
61747: PUSH
61748: LD_INT 3
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 1
61757: PUSH
61758: LD_INT 3
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61790: LD_ADDR_VAR 0 26
61794: PUSH
61795: LD_INT 0
61797: PUSH
61798: LD_INT 0
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: LD_INT 1
61810: NEG
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 1
61818: PUSH
61819: LD_INT 0
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: LD_INT 1
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: LD_INT 1
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 1
61848: NEG
61849: PUSH
61850: LD_INT 0
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 1
61859: NEG
61860: PUSH
61861: LD_INT 1
61863: NEG
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 1
61871: NEG
61872: PUSH
61873: LD_INT 2
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: LD_INT 2
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 1
61894: PUSH
61895: LD_INT 1
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 2
61905: PUSH
61906: LD_INT 0
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 2
61915: PUSH
61916: LD_INT 1
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 2
61925: PUSH
61926: LD_INT 2
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 1
61935: PUSH
61936: LD_INT 2
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 0
61945: PUSH
61946: LD_INT 2
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 1
61955: NEG
61956: PUSH
61957: LD_INT 1
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 2
61966: NEG
61967: PUSH
61968: LD_INT 0
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 2
61977: NEG
61978: PUSH
61979: LD_INT 1
61981: NEG
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 2
61989: NEG
61990: PUSH
61991: LD_INT 2
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 2
62001: PUSH
62002: LD_INT 3
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 1
62011: PUSH
62012: LD_INT 3
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 1
62021: NEG
62022: PUSH
62023: LD_INT 2
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 2
62032: NEG
62033: PUSH
62034: LD_INT 1
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62066: LD_ADDR_VAR 0 27
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 0
62083: PUSH
62084: LD_INT 1
62086: NEG
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 1
62094: PUSH
62095: LD_INT 0
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 1
62104: PUSH
62105: LD_INT 1
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: LD_INT 1
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 1
62124: NEG
62125: PUSH
62126: LD_INT 0
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 1
62135: NEG
62136: PUSH
62137: LD_INT 1
62139: NEG
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 1
62147: NEG
62148: PUSH
62149: LD_INT 2
62151: NEG
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 0
62159: PUSH
62160: LD_INT 2
62162: NEG
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 1
62170: PUSH
62171: LD_INT 1
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 2
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 2
62191: PUSH
62192: LD_INT 1
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 2
62201: PUSH
62202: LD_INT 2
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 1
62211: PUSH
62212: LD_INT 2
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 0
62221: PUSH
62222: LD_INT 2
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 1
62231: NEG
62232: PUSH
62233: LD_INT 1
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 2
62242: NEG
62243: PUSH
62244: LD_INT 0
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 2
62253: NEG
62254: PUSH
62255: LD_INT 1
62257: NEG
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 2
62265: NEG
62266: PUSH
62267: LD_INT 2
62269: NEG
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 1
62277: NEG
62278: PUSH
62279: LD_INT 2
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 2
62288: NEG
62289: PUSH
62290: LD_INT 1
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 3
62299: NEG
62300: PUSH
62301: LD_INT 1
62303: NEG
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 3
62311: NEG
62312: PUSH
62313: LD_INT 2
62315: NEG
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62346: LD_ADDR_VAR 0 28
62350: PUSH
62351: LD_INT 0
62353: PUSH
62354: LD_INT 0
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 0
62363: PUSH
62364: LD_INT 1
62366: NEG
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 1
62374: PUSH
62375: LD_INT 0
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 1
62384: PUSH
62385: LD_INT 1
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 0
62394: PUSH
62395: LD_INT 1
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 1
62404: NEG
62405: PUSH
62406: LD_INT 0
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 1
62415: NEG
62416: PUSH
62417: LD_INT 1
62419: NEG
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 1
62427: NEG
62428: PUSH
62429: LD_INT 2
62431: NEG
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 0
62439: PUSH
62440: LD_INT 2
62442: NEG
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 1
62450: PUSH
62451: LD_INT 1
62453: NEG
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 2
62461: PUSH
62462: LD_INT 0
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 2
62471: PUSH
62472: LD_INT 1
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 2
62481: PUSH
62482: LD_INT 2
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 1
62491: PUSH
62492: LD_INT 2
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 0
62501: PUSH
62502: LD_INT 2
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 1
62511: NEG
62512: PUSH
62513: LD_INT 1
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 2
62522: NEG
62523: PUSH
62524: LD_INT 0
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 2
62533: NEG
62534: PUSH
62535: LD_INT 1
62537: NEG
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 2
62545: NEG
62546: PUSH
62547: LD_INT 2
62549: NEG
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 2
62557: NEG
62558: PUSH
62559: LD_INT 3
62561: NEG
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 1
62569: NEG
62570: PUSH
62571: LD_INT 3
62573: NEG
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 3
62581: NEG
62582: PUSH
62583: LD_INT 1
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 3
62593: NEG
62594: PUSH
62595: LD_INT 2
62597: NEG
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62628: LD_ADDR_VAR 0 29
62632: PUSH
62633: LD_INT 0
62635: PUSH
62636: LD_INT 0
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 0
62645: PUSH
62646: LD_INT 1
62648: NEG
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 1
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 1
62666: PUSH
62667: LD_INT 1
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 0
62676: PUSH
62677: LD_INT 1
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 1
62686: NEG
62687: PUSH
62688: LD_INT 0
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 1
62697: NEG
62698: PUSH
62699: LD_INT 1
62701: NEG
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 1
62709: NEG
62710: PUSH
62711: LD_INT 2
62713: NEG
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 0
62721: PUSH
62722: LD_INT 2
62724: NEG
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 1
62732: PUSH
62733: LD_INT 1
62735: NEG
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 2
62743: PUSH
62744: LD_INT 0
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 2
62753: PUSH
62754: LD_INT 1
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 1
62763: PUSH
62764: LD_INT 2
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 0
62773: PUSH
62774: LD_INT 2
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 1
62783: NEG
62784: PUSH
62785: LD_INT 1
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 2
62794: NEG
62795: PUSH
62796: LD_INT 1
62798: NEG
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 2
62806: NEG
62807: PUSH
62808: LD_INT 2
62810: NEG
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 2
62818: NEG
62819: PUSH
62820: LD_INT 3
62822: NEG
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 2
62830: PUSH
62831: LD_INT 1
62833: NEG
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 3
62841: PUSH
62842: LD_INT 1
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 1
62851: PUSH
62852: LD_INT 3
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 1
62861: NEG
62862: PUSH
62863: LD_INT 2
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 3
62872: NEG
62873: PUSH
62874: LD_INT 2
62876: NEG
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62907: LD_ADDR_VAR 0 30
62911: PUSH
62912: LD_INT 0
62914: PUSH
62915: LD_INT 0
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 0
62924: PUSH
62925: LD_INT 1
62927: NEG
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 1
62935: PUSH
62936: LD_INT 0
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 1
62945: PUSH
62946: LD_INT 1
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 0
62955: PUSH
62956: LD_INT 1
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 1
62965: NEG
62966: PUSH
62967: LD_INT 0
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 1
62976: NEG
62977: PUSH
62978: LD_INT 1
62980: NEG
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 1
62988: NEG
62989: PUSH
62990: LD_INT 2
62992: NEG
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 0
63000: PUSH
63001: LD_INT 2
63003: NEG
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 1
63011: PUSH
63012: LD_INT 1
63014: NEG
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 2
63022: PUSH
63023: LD_INT 0
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 2
63032: PUSH
63033: LD_INT 1
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 2
63042: PUSH
63043: LD_INT 2
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 1
63052: PUSH
63053: LD_INT 2
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 1
63062: NEG
63063: PUSH
63064: LD_INT 1
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 2
63073: NEG
63074: PUSH
63075: LD_INT 0
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 2
63084: NEG
63085: PUSH
63086: LD_INT 1
63088: NEG
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 1
63096: NEG
63097: PUSH
63098: LD_INT 3
63100: NEG
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 1
63108: PUSH
63109: LD_INT 2
63111: NEG
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 3
63119: PUSH
63120: LD_INT 2
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 2
63129: PUSH
63130: LD_INT 3
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 2
63139: NEG
63140: PUSH
63141: LD_INT 1
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 3
63150: NEG
63151: PUSH
63152: LD_INT 1
63154: NEG
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63185: LD_ADDR_VAR 0 31
63189: PUSH
63190: LD_INT 0
63192: PUSH
63193: LD_INT 0
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 0
63202: PUSH
63203: LD_INT 1
63205: NEG
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 1
63213: PUSH
63214: LD_INT 0
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 1
63223: PUSH
63224: LD_INT 1
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 0
63233: PUSH
63234: LD_INT 1
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 1
63243: NEG
63244: PUSH
63245: LD_INT 0
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 1
63254: NEG
63255: PUSH
63256: LD_INT 1
63258: NEG
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 1
63266: NEG
63267: PUSH
63268: LD_INT 2
63270: NEG
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 1
63278: PUSH
63279: LD_INT 1
63281: NEG
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 2
63289: PUSH
63290: LD_INT 0
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 2
63299: PUSH
63300: LD_INT 1
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 2
63309: PUSH
63310: LD_INT 2
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 1
63319: PUSH
63320: LD_INT 2
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 0
63329: PUSH
63330: LD_INT 2
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 1
63339: NEG
63340: PUSH
63341: LD_INT 1
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 2
63350: NEG
63351: PUSH
63352: LD_INT 1
63354: NEG
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 2
63362: NEG
63363: PUSH
63364: LD_INT 2
63366: NEG
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 2
63374: NEG
63375: PUSH
63376: LD_INT 3
63378: NEG
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 2
63386: PUSH
63387: LD_INT 1
63389: NEG
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 3
63397: PUSH
63398: LD_INT 1
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 1
63407: PUSH
63408: LD_INT 3
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 1
63417: NEG
63418: PUSH
63419: LD_INT 2
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 3
63428: NEG
63429: PUSH
63430: LD_INT 2
63432: NEG
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63463: LD_ADDR_VAR 0 32
63467: PUSH
63468: LD_INT 0
63470: PUSH
63471: LD_INT 0
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 0
63480: PUSH
63481: LD_INT 1
63483: NEG
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 1
63491: PUSH
63492: LD_INT 0
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 1
63501: PUSH
63502: LD_INT 1
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 0
63511: PUSH
63512: LD_INT 1
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 1
63521: NEG
63522: PUSH
63523: LD_INT 0
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 1
63532: NEG
63533: PUSH
63534: LD_INT 1
63536: NEG
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 1
63544: NEG
63545: PUSH
63546: LD_INT 2
63548: NEG
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 0
63556: PUSH
63557: LD_INT 2
63559: NEG
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 1
63567: PUSH
63568: LD_INT 1
63570: NEG
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 2
63578: PUSH
63579: LD_INT 1
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 2
63588: PUSH
63589: LD_INT 2
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 1
63598: PUSH
63599: LD_INT 2
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 0
63608: PUSH
63609: LD_INT 2
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 1
63618: NEG
63619: PUSH
63620: LD_INT 1
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 2
63629: NEG
63630: PUSH
63631: LD_INT 0
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 2
63640: NEG
63641: PUSH
63642: LD_INT 1
63644: NEG
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 1
63652: NEG
63653: PUSH
63654: LD_INT 3
63656: NEG
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 1
63664: PUSH
63665: LD_INT 2
63667: NEG
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 3
63675: PUSH
63676: LD_INT 2
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 2
63685: PUSH
63686: LD_INT 3
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 2
63695: NEG
63696: PUSH
63697: LD_INT 1
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 3
63706: NEG
63707: PUSH
63708: LD_INT 1
63710: NEG
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63741: LD_ADDR_VAR 0 33
63745: PUSH
63746: LD_INT 0
63748: PUSH
63749: LD_INT 0
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 0
63758: PUSH
63759: LD_INT 1
63761: NEG
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 1
63769: PUSH
63770: LD_INT 0
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 1
63779: PUSH
63780: LD_INT 1
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 0
63789: PUSH
63790: LD_INT 1
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 1
63799: NEG
63800: PUSH
63801: LD_INT 0
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 1
63810: NEG
63811: PUSH
63812: LD_INT 1
63814: NEG
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 1
63822: NEG
63823: PUSH
63824: LD_INT 2
63826: NEG
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 1
63834: PUSH
63835: LD_INT 1
63837: NEG
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 2
63845: PUSH
63846: LD_INT 0
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_INT 2
63855: PUSH
63856: LD_INT 1
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 1
63865: PUSH
63866: LD_INT 2
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 0
63875: PUSH
63876: LD_INT 2
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 1
63885: NEG
63886: PUSH
63887: LD_INT 1
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 2
63896: NEG
63897: PUSH
63898: LD_INT 0
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 2
63907: NEG
63908: PUSH
63909: LD_INT 1
63911: NEG
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 2
63919: NEG
63920: PUSH
63921: LD_INT 2
63923: NEG
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 2
63931: NEG
63932: PUSH
63933: LD_INT 3
63935: NEG
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 2
63943: PUSH
63944: LD_INT 1
63946: NEG
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 3
63954: PUSH
63955: LD_INT 1
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 1
63964: PUSH
63965: LD_INT 3
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 1
63974: NEG
63975: PUSH
63976: LD_INT 2
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 3
63985: NEG
63986: PUSH
63987: LD_INT 2
63989: NEG
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64020: LD_ADDR_VAR 0 34
64024: PUSH
64025: LD_INT 0
64027: PUSH
64028: LD_INT 0
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 0
64037: PUSH
64038: LD_INT 1
64040: NEG
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 1
64048: PUSH
64049: LD_INT 0
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 1
64058: PUSH
64059: LD_INT 1
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 0
64068: PUSH
64069: LD_INT 1
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 1
64078: NEG
64079: PUSH
64080: LD_INT 0
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 1
64089: NEG
64090: PUSH
64091: LD_INT 1
64093: NEG
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 1
64101: NEG
64102: PUSH
64103: LD_INT 2
64105: NEG
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 0
64113: PUSH
64114: LD_INT 2
64116: NEG
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 1
64124: PUSH
64125: LD_INT 1
64127: NEG
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 2
64135: PUSH
64136: LD_INT 1
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 2
64145: PUSH
64146: LD_INT 2
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 1
64155: PUSH
64156: LD_INT 2
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 1
64165: NEG
64166: PUSH
64167: LD_INT 1
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 2
64176: NEG
64177: PUSH
64178: LD_INT 0
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 2
64187: NEG
64188: PUSH
64189: LD_INT 1
64191: NEG
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 2
64199: NEG
64200: PUSH
64201: LD_INT 2
64203: NEG
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 1
64211: NEG
64212: PUSH
64213: LD_INT 3
64215: NEG
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 1
64223: PUSH
64224: LD_INT 2
64226: NEG
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 3
64234: PUSH
64235: LD_INT 2
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 2
64244: PUSH
64245: LD_INT 3
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 2
64254: NEG
64255: PUSH
64256: LD_INT 1
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 3
64265: NEG
64266: PUSH
64267: LD_INT 1
64269: NEG
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64300: LD_ADDR_VAR 0 35
64304: PUSH
64305: LD_INT 0
64307: PUSH
64308: LD_INT 0
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 0
64317: PUSH
64318: LD_INT 1
64320: NEG
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 1
64328: PUSH
64329: LD_INT 0
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 1
64338: PUSH
64339: LD_INT 1
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 0
64348: PUSH
64349: LD_INT 1
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 1
64358: NEG
64359: PUSH
64360: LD_INT 0
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 1
64369: NEG
64370: PUSH
64371: LD_INT 1
64373: NEG
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 2
64381: PUSH
64382: LD_INT 1
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 2
64391: NEG
64392: PUSH
64393: LD_INT 1
64395: NEG
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64412: LD_ADDR_VAR 0 36
64416: PUSH
64417: LD_INT 0
64419: PUSH
64420: LD_INT 0
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 0
64429: PUSH
64430: LD_INT 1
64432: NEG
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 1
64440: PUSH
64441: LD_INT 0
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 1
64450: PUSH
64451: LD_INT 1
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 0
64460: PUSH
64461: LD_INT 1
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 1
64470: NEG
64471: PUSH
64472: LD_INT 0
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 1
64481: NEG
64482: PUSH
64483: LD_INT 1
64485: NEG
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 1
64493: NEG
64494: PUSH
64495: LD_INT 2
64497: NEG
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 1
64505: PUSH
64506: LD_INT 2
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64524: LD_ADDR_VAR 0 37
64528: PUSH
64529: LD_INT 0
64531: PUSH
64532: LD_INT 0
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 0
64541: PUSH
64542: LD_INT 1
64544: NEG
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 1
64552: PUSH
64553: LD_INT 0
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 1
64562: PUSH
64563: LD_INT 1
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 0
64572: PUSH
64573: LD_INT 1
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 1
64582: NEG
64583: PUSH
64584: LD_INT 0
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 1
64593: NEG
64594: PUSH
64595: LD_INT 1
64597: NEG
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 1
64605: PUSH
64606: LD_INT 1
64608: NEG
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 1
64616: NEG
64617: PUSH
64618: LD_INT 1
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64636: LD_ADDR_VAR 0 38
64640: PUSH
64641: LD_INT 0
64643: PUSH
64644: LD_INT 0
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 0
64653: PUSH
64654: LD_INT 1
64656: NEG
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 1
64664: PUSH
64665: LD_INT 0
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 1
64674: PUSH
64675: LD_INT 1
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 0
64684: PUSH
64685: LD_INT 1
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 1
64694: NEG
64695: PUSH
64696: LD_INT 0
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 1
64705: NEG
64706: PUSH
64707: LD_INT 1
64709: NEG
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: LD_INT 2
64717: PUSH
64718: LD_INT 1
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 2
64727: NEG
64728: PUSH
64729: LD_INT 1
64731: NEG
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64748: LD_ADDR_VAR 0 39
64752: PUSH
64753: LD_INT 0
64755: PUSH
64756: LD_INT 0
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 0
64765: PUSH
64766: LD_INT 1
64768: NEG
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 1
64776: PUSH
64777: LD_INT 0
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 1
64786: PUSH
64787: LD_INT 1
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 0
64796: PUSH
64797: LD_INT 1
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 1
64806: NEG
64807: PUSH
64808: LD_INT 0
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 1
64817: NEG
64818: PUSH
64819: LD_INT 1
64821: NEG
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 1
64829: NEG
64830: PUSH
64831: LD_INT 2
64833: NEG
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 1
64841: PUSH
64842: LD_INT 2
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64860: LD_ADDR_VAR 0 40
64864: PUSH
64865: LD_INT 0
64867: PUSH
64868: LD_INT 0
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 0
64877: PUSH
64878: LD_INT 1
64880: NEG
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 1
64888: PUSH
64889: LD_INT 0
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 1
64898: PUSH
64899: LD_INT 1
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 0
64908: PUSH
64909: LD_INT 1
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 1
64918: NEG
64919: PUSH
64920: LD_INT 0
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 1
64929: NEG
64930: PUSH
64931: LD_INT 1
64933: NEG
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 1
64941: PUSH
64942: LD_INT 1
64944: NEG
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 1
64952: NEG
64953: PUSH
64954: LD_INT 1
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64972: LD_ADDR_VAR 0 41
64976: PUSH
64977: LD_INT 0
64979: PUSH
64980: LD_INT 0
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 0
64989: PUSH
64990: LD_INT 1
64992: NEG
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: LD_INT 1
65000: PUSH
65001: LD_INT 0
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 1
65010: PUSH
65011: LD_INT 1
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 0
65020: PUSH
65021: LD_INT 1
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 1
65030: NEG
65031: PUSH
65032: LD_INT 0
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 1
65041: NEG
65042: PUSH
65043: LD_INT 1
65045: NEG
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 1
65053: NEG
65054: PUSH
65055: LD_INT 2
65057: NEG
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 1
65065: PUSH
65066: LD_INT 1
65068: NEG
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 2
65076: PUSH
65077: LD_INT 0
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 2
65086: PUSH
65087: LD_INT 1
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 2
65096: PUSH
65097: LD_INT 2
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 1
65106: PUSH
65107: LD_INT 2
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: LD_INT 1
65116: NEG
65117: PUSH
65118: LD_INT 1
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 2
65127: NEG
65128: PUSH
65129: LD_INT 0
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: LD_INT 2
65138: NEG
65139: PUSH
65140: LD_INT 1
65142: NEG
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 2
65150: NEG
65151: PUSH
65152: LD_INT 2
65154: NEG
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 2
65162: NEG
65163: PUSH
65164: LD_INT 3
65166: NEG
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 2
65174: PUSH
65175: LD_INT 1
65177: NEG
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 3
65185: PUSH
65186: LD_INT 0
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 3
65195: PUSH
65196: LD_INT 1
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 3
65205: PUSH
65206: LD_INT 2
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 3
65215: PUSH
65216: LD_INT 3
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 2
65225: PUSH
65226: LD_INT 3
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 2
65235: NEG
65236: PUSH
65237: LD_INT 1
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: LD_INT 3
65246: NEG
65247: PUSH
65248: LD_INT 0
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 3
65257: NEG
65258: PUSH
65259: LD_INT 1
65261: NEG
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 3
65269: NEG
65270: PUSH
65271: LD_INT 2
65273: NEG
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 3
65281: NEG
65282: PUSH
65283: LD_INT 3
65285: NEG
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65322: LD_ADDR_VAR 0 42
65326: PUSH
65327: LD_INT 0
65329: PUSH
65330: LD_INT 0
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 0
65339: PUSH
65340: LD_INT 1
65342: NEG
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 1
65350: PUSH
65351: LD_INT 0
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 1
65360: PUSH
65361: LD_INT 1
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 0
65370: PUSH
65371: LD_INT 1
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 1
65380: NEG
65381: PUSH
65382: LD_INT 0
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 1
65391: NEG
65392: PUSH
65393: LD_INT 1
65395: NEG
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 1
65403: NEG
65404: PUSH
65405: LD_INT 2
65407: NEG
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 0
65415: PUSH
65416: LD_INT 2
65418: NEG
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 1
65426: PUSH
65427: LD_INT 1
65429: NEG
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 2
65437: PUSH
65438: LD_INT 1
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 2
65447: PUSH
65448: LD_INT 2
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 1
65457: PUSH
65458: LD_INT 2
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 0
65467: PUSH
65468: LD_INT 2
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 1
65477: NEG
65478: PUSH
65479: LD_INT 1
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 2
65488: NEG
65489: PUSH
65490: LD_INT 1
65492: NEG
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 2
65500: NEG
65501: PUSH
65502: LD_INT 2
65504: NEG
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 2
65512: NEG
65513: PUSH
65514: LD_INT 3
65516: NEG
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 1
65524: NEG
65525: PUSH
65526: LD_INT 3
65528: NEG
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 0
65536: PUSH
65537: LD_INT 3
65539: NEG
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 1
65547: PUSH
65548: LD_INT 2
65550: NEG
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 3
65558: PUSH
65559: LD_INT 2
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 3
65568: PUSH
65569: LD_INT 3
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 2
65578: PUSH
65579: LD_INT 3
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: LD_INT 1
65588: PUSH
65589: LD_INT 3
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 0
65598: PUSH
65599: LD_INT 3
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 1
65608: NEG
65609: PUSH
65610: LD_INT 2
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 3
65619: NEG
65620: PUSH
65621: LD_INT 2
65623: NEG
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 3
65631: NEG
65632: PUSH
65633: LD_INT 3
65635: NEG
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65672: LD_ADDR_VAR 0 43
65676: PUSH
65677: LD_INT 0
65679: PUSH
65680: LD_INT 0
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 0
65689: PUSH
65690: LD_INT 1
65692: NEG
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 1
65700: PUSH
65701: LD_INT 0
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 1
65710: PUSH
65711: LD_INT 1
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 0
65720: PUSH
65721: LD_INT 1
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 1
65730: NEG
65731: PUSH
65732: LD_INT 0
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 1
65741: NEG
65742: PUSH
65743: LD_INT 1
65745: NEG
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 1
65753: NEG
65754: PUSH
65755: LD_INT 2
65757: NEG
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 0
65765: PUSH
65766: LD_INT 2
65768: NEG
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 1
65776: PUSH
65777: LD_INT 1
65779: NEG
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 2
65787: PUSH
65788: LD_INT 0
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 2
65797: PUSH
65798: LD_INT 1
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 1
65807: PUSH
65808: LD_INT 2
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 0
65817: PUSH
65818: LD_INT 2
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 1
65827: NEG
65828: PUSH
65829: LD_INT 1
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 2
65838: NEG
65839: PUSH
65840: LD_INT 0
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 2
65849: NEG
65850: PUSH
65851: LD_INT 1
65853: NEG
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 1
65861: NEG
65862: PUSH
65863: LD_INT 3
65865: NEG
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 0
65873: PUSH
65874: LD_INT 3
65876: NEG
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 1
65884: PUSH
65885: LD_INT 2
65887: NEG
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: LD_INT 2
65895: PUSH
65896: LD_INT 1
65898: NEG
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 3
65906: PUSH
65907: LD_INT 0
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 3
65916: PUSH
65917: LD_INT 1
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 1
65926: PUSH
65927: LD_INT 3
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_INT 0
65936: PUSH
65937: LD_INT 3
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 1
65946: NEG
65947: PUSH
65948: LD_INT 2
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 2
65957: NEG
65958: PUSH
65959: LD_INT 1
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: LD_INT 3
65968: NEG
65969: PUSH
65970: LD_INT 0
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: LD_INT 3
65979: NEG
65980: PUSH
65981: LD_INT 1
65983: NEG
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66020: LD_ADDR_VAR 0 44
66024: PUSH
66025: LD_INT 0
66027: PUSH
66028: LD_INT 0
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 0
66037: PUSH
66038: LD_INT 1
66040: NEG
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 1
66048: PUSH
66049: LD_INT 0
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 1
66058: PUSH
66059: LD_INT 1
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 0
66068: PUSH
66069: LD_INT 1
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: LD_INT 1
66078: NEG
66079: PUSH
66080: LD_INT 0
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 1
66089: NEG
66090: PUSH
66091: LD_INT 1
66093: NEG
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 1
66101: NEG
66102: PUSH
66103: LD_INT 2
66105: NEG
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 1
66113: PUSH
66114: LD_INT 1
66116: NEG
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 2
66124: PUSH
66125: LD_INT 0
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: LD_INT 2
66134: PUSH
66135: LD_INT 1
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 2
66144: PUSH
66145: LD_INT 2
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 1
66154: PUSH
66155: LD_INT 2
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 1
66164: NEG
66165: PUSH
66166: LD_INT 1
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 2
66175: NEG
66176: PUSH
66177: LD_INT 0
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 2
66186: NEG
66187: PUSH
66188: LD_INT 1
66190: NEG
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 2
66198: NEG
66199: PUSH
66200: LD_INT 2
66202: NEG
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 2
66210: NEG
66211: PUSH
66212: LD_INT 3
66214: NEG
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 2
66222: PUSH
66223: LD_INT 1
66225: NEG
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 3
66233: PUSH
66234: LD_INT 0
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: LD_INT 3
66243: PUSH
66244: LD_INT 1
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: LD_INT 3
66253: PUSH
66254: LD_INT 2
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 3
66263: PUSH
66264: LD_INT 3
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 2
66273: PUSH
66274: LD_INT 3
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 2
66283: NEG
66284: PUSH
66285: LD_INT 1
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 3
66294: NEG
66295: PUSH
66296: LD_INT 0
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: LD_INT 3
66305: NEG
66306: PUSH
66307: LD_INT 1
66309: NEG
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 3
66317: NEG
66318: PUSH
66319: LD_INT 2
66321: NEG
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: PUSH
66327: LD_INT 3
66329: NEG
66330: PUSH
66331: LD_INT 3
66333: NEG
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66370: LD_ADDR_VAR 0 45
66374: PUSH
66375: LD_INT 0
66377: PUSH
66378: LD_INT 0
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 0
66387: PUSH
66388: LD_INT 1
66390: NEG
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 1
66398: PUSH
66399: LD_INT 0
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 1
66408: PUSH
66409: LD_INT 1
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 0
66418: PUSH
66419: LD_INT 1
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: LD_INT 1
66428: NEG
66429: PUSH
66430: LD_INT 0
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: LD_INT 1
66439: NEG
66440: PUSH
66441: LD_INT 1
66443: NEG
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 1
66451: NEG
66452: PUSH
66453: LD_INT 2
66455: NEG
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 0
66463: PUSH
66464: LD_INT 2
66466: NEG
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 1
66474: PUSH
66475: LD_INT 1
66477: NEG
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 2
66485: PUSH
66486: LD_INT 1
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 2
66495: PUSH
66496: LD_INT 2
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 1
66505: PUSH
66506: LD_INT 2
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 0
66515: PUSH
66516: LD_INT 2
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 1
66525: NEG
66526: PUSH
66527: LD_INT 1
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 2
66536: NEG
66537: PUSH
66538: LD_INT 1
66540: NEG
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 2
66548: NEG
66549: PUSH
66550: LD_INT 2
66552: NEG
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 2
66560: NEG
66561: PUSH
66562: LD_INT 3
66564: NEG
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 1
66572: NEG
66573: PUSH
66574: LD_INT 3
66576: NEG
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 0
66584: PUSH
66585: LD_INT 3
66587: NEG
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 1
66595: PUSH
66596: LD_INT 2
66598: NEG
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 3
66606: PUSH
66607: LD_INT 2
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 3
66616: PUSH
66617: LD_INT 3
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 2
66626: PUSH
66627: LD_INT 3
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 1
66636: PUSH
66637: LD_INT 3
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 0
66646: PUSH
66647: LD_INT 3
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 1
66656: NEG
66657: PUSH
66658: LD_INT 2
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 3
66667: NEG
66668: PUSH
66669: LD_INT 2
66671: NEG
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 3
66679: NEG
66680: PUSH
66681: LD_INT 3
66683: NEG
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66720: LD_ADDR_VAR 0 46
66724: PUSH
66725: LD_INT 0
66727: PUSH
66728: LD_INT 0
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 0
66737: PUSH
66738: LD_INT 1
66740: NEG
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 1
66748: PUSH
66749: LD_INT 0
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 1
66758: PUSH
66759: LD_INT 1
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 0
66768: PUSH
66769: LD_INT 1
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 1
66778: NEG
66779: PUSH
66780: LD_INT 0
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 1
66789: NEG
66790: PUSH
66791: LD_INT 1
66793: NEG
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 1
66801: NEG
66802: PUSH
66803: LD_INT 2
66805: NEG
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PUSH
66811: LD_INT 0
66813: PUSH
66814: LD_INT 2
66816: NEG
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: LD_INT 1
66824: PUSH
66825: LD_INT 1
66827: NEG
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 2
66835: PUSH
66836: LD_INT 0
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 2
66845: PUSH
66846: LD_INT 1
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 1
66855: PUSH
66856: LD_INT 2
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 0
66865: PUSH
66866: LD_INT 2
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 1
66875: NEG
66876: PUSH
66877: LD_INT 1
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: LD_INT 2
66886: NEG
66887: PUSH
66888: LD_INT 0
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 2
66897: NEG
66898: PUSH
66899: LD_INT 1
66901: NEG
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 1
66909: NEG
66910: PUSH
66911: LD_INT 3
66913: NEG
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 0
66921: PUSH
66922: LD_INT 3
66924: NEG
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 1
66932: PUSH
66933: LD_INT 2
66935: NEG
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 2
66943: PUSH
66944: LD_INT 1
66946: NEG
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 3
66954: PUSH
66955: LD_INT 0
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 3
66964: PUSH
66965: LD_INT 1
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 1
66974: PUSH
66975: LD_INT 3
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 0
66984: PUSH
66985: LD_INT 3
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 1
66994: NEG
66995: PUSH
66996: LD_INT 2
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: LD_INT 2
67005: NEG
67006: PUSH
67007: LD_INT 1
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: PUSH
67014: LD_INT 3
67016: NEG
67017: PUSH
67018: LD_INT 0
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: LD_INT 3
67027: NEG
67028: PUSH
67029: LD_INT 1
67031: NEG
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: LIST
67065: LIST
67066: LIST
67067: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67068: LD_ADDR_VAR 0 47
67072: PUSH
67073: LD_INT 0
67075: PUSH
67076: LD_INT 0
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 0
67085: PUSH
67086: LD_INT 1
67088: NEG
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 1
67096: PUSH
67097: LD_INT 0
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 1
67106: PUSH
67107: LD_INT 1
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: LD_INT 0
67116: PUSH
67117: LD_INT 1
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 1
67126: NEG
67127: PUSH
67128: LD_INT 0
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 1
67137: NEG
67138: PUSH
67139: LD_INT 1
67141: NEG
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 1
67149: NEG
67150: PUSH
67151: LD_INT 2
67153: NEG
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: PUSH
67159: LD_INT 0
67161: PUSH
67162: LD_INT 2
67164: NEG
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 1
67172: PUSH
67173: LD_INT 1
67175: NEG
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 2
67183: NEG
67184: PUSH
67185: LD_INT 1
67187: NEG
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 2
67195: NEG
67196: PUSH
67197: LD_INT 2
67199: NEG
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: LIST
67218: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67219: LD_ADDR_VAR 0 48
67223: PUSH
67224: LD_INT 0
67226: PUSH
67227: LD_INT 0
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 0
67236: PUSH
67237: LD_INT 1
67239: NEG
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 1
67247: PUSH
67248: LD_INT 0
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: LD_INT 1
67257: PUSH
67258: LD_INT 1
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 0
67267: PUSH
67268: LD_INT 1
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: LD_INT 1
67277: NEG
67278: PUSH
67279: LD_INT 0
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 1
67288: NEG
67289: PUSH
67290: LD_INT 1
67292: NEG
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 1
67300: NEG
67301: PUSH
67302: LD_INT 2
67304: NEG
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 0
67312: PUSH
67313: LD_INT 2
67315: NEG
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 1
67323: PUSH
67324: LD_INT 1
67326: NEG
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: LD_INT 2
67334: PUSH
67335: LD_INT 0
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: LD_INT 2
67344: PUSH
67345: LD_INT 1
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: LIST
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67366: LD_ADDR_VAR 0 49
67370: PUSH
67371: LD_INT 0
67373: PUSH
67374: LD_INT 0
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: PUSH
67381: LD_INT 0
67383: PUSH
67384: LD_INT 1
67386: NEG
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: LD_INT 1
67394: PUSH
67395: LD_INT 0
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 1
67404: PUSH
67405: LD_INT 1
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 0
67414: PUSH
67415: LD_INT 1
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 1
67424: NEG
67425: PUSH
67426: LD_INT 0
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 1
67435: NEG
67436: PUSH
67437: LD_INT 1
67439: NEG
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 1
67447: PUSH
67448: LD_INT 1
67450: NEG
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 2
67458: PUSH
67459: LD_INT 0
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: PUSH
67466: LD_INT 2
67468: PUSH
67469: LD_INT 1
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 2
67478: PUSH
67479: LD_INT 2
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 1
67488: PUSH
67489: LD_INT 2
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67510: LD_ADDR_VAR 0 50
67514: PUSH
67515: LD_INT 0
67517: PUSH
67518: LD_INT 0
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: LD_INT 0
67527: PUSH
67528: LD_INT 1
67530: NEG
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 1
67538: PUSH
67539: LD_INT 0
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 1
67548: PUSH
67549: LD_INT 1
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: LD_INT 0
67558: PUSH
67559: LD_INT 1
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: LD_INT 1
67568: NEG
67569: PUSH
67570: LD_INT 0
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 1
67579: NEG
67580: PUSH
67581: LD_INT 1
67583: NEG
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 2
67591: PUSH
67592: LD_INT 1
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 2
67601: PUSH
67602: LD_INT 2
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: LD_INT 1
67611: PUSH
67612: LD_INT 2
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 0
67621: PUSH
67622: LD_INT 2
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: PUSH
67629: LD_INT 1
67631: NEG
67632: PUSH
67633: LD_INT 1
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: LIST
67644: LIST
67645: LIST
67646: LIST
67647: LIST
67648: LIST
67649: LIST
67650: LIST
67651: LIST
67652: LIST
67653: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67654: LD_ADDR_VAR 0 51
67658: PUSH
67659: LD_INT 0
67661: PUSH
67662: LD_INT 0
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 0
67671: PUSH
67672: LD_INT 1
67674: NEG
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 1
67682: PUSH
67683: LD_INT 0
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 1
67692: PUSH
67693: LD_INT 1
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 0
67702: PUSH
67703: LD_INT 1
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 1
67712: NEG
67713: PUSH
67714: LD_INT 0
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 1
67723: NEG
67724: PUSH
67725: LD_INT 1
67727: NEG
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 1
67735: PUSH
67736: LD_INT 2
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: PUSH
67743: LD_INT 0
67745: PUSH
67746: LD_INT 2
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: LD_INT 1
67755: NEG
67756: PUSH
67757: LD_INT 1
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PUSH
67764: LD_INT 2
67766: NEG
67767: PUSH
67768: LD_INT 0
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 2
67777: NEG
67778: PUSH
67779: LD_INT 1
67781: NEG
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67801: LD_ADDR_VAR 0 52
67805: PUSH
67806: LD_INT 0
67808: PUSH
67809: LD_INT 0
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_INT 0
67818: PUSH
67819: LD_INT 1
67821: NEG
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 1
67829: PUSH
67830: LD_INT 0
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 1
67839: PUSH
67840: LD_INT 1
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 0
67849: PUSH
67850: LD_INT 1
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 1
67859: NEG
67860: PUSH
67861: LD_INT 0
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 1
67870: NEG
67871: PUSH
67872: LD_INT 1
67874: NEG
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 1
67882: NEG
67883: PUSH
67884: LD_INT 2
67886: NEG
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: PUSH
67892: LD_INT 1
67894: NEG
67895: PUSH
67896: LD_INT 1
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 2
67905: NEG
67906: PUSH
67907: LD_INT 0
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 2
67916: NEG
67917: PUSH
67918: LD_INT 1
67920: NEG
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 2
67928: NEG
67929: PUSH
67930: LD_INT 2
67932: NEG
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67952: LD_ADDR_VAR 0 53
67956: PUSH
67957: LD_INT 0
67959: PUSH
67960: LD_INT 0
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 0
67969: PUSH
67970: LD_INT 1
67972: NEG
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: LD_INT 1
67980: PUSH
67981: LD_INT 0
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 1
67990: PUSH
67991: LD_INT 1
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 0
68000: PUSH
68001: LD_INT 1
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 1
68010: NEG
68011: PUSH
68012: LD_INT 0
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: LD_INT 1
68021: NEG
68022: PUSH
68023: LD_INT 1
68025: NEG
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: LD_INT 1
68033: NEG
68034: PUSH
68035: LD_INT 2
68037: NEG
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PUSH
68043: LD_INT 0
68045: PUSH
68046: LD_INT 2
68048: NEG
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: LD_INT 1
68056: PUSH
68057: LD_INT 1
68059: NEG
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 2
68067: PUSH
68068: LD_INT 0
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 2
68077: PUSH
68078: LD_INT 1
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 2
68087: PUSH
68088: LD_INT 2
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 1
68097: PUSH
68098: LD_INT 2
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 0
68107: PUSH
68108: LD_INT 2
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 1
68117: NEG
68118: PUSH
68119: LD_INT 1
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 2
68128: NEG
68129: PUSH
68130: LD_INT 0
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 2
68139: NEG
68140: PUSH
68141: LD_INT 1
68143: NEG
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 2
68151: NEG
68152: PUSH
68153: LD_INT 2
68155: NEG
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: LIST
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: LIST
68180: LIST
68181: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68182: LD_ADDR_VAR 0 54
68186: PUSH
68187: LD_INT 0
68189: PUSH
68190: LD_INT 0
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: LD_INT 0
68199: PUSH
68200: LD_INT 1
68202: NEG
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 1
68210: PUSH
68211: LD_INT 0
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: LD_INT 1
68220: PUSH
68221: LD_INT 1
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: LD_INT 0
68230: PUSH
68231: LD_INT 1
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: PUSH
68238: LD_INT 1
68240: NEG
68241: PUSH
68242: LD_INT 0
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 1
68251: NEG
68252: PUSH
68253: LD_INT 1
68255: NEG
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: LD_INT 1
68263: NEG
68264: PUSH
68265: LD_INT 2
68267: NEG
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: LD_INT 0
68275: PUSH
68276: LD_INT 2
68278: NEG
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: LD_INT 1
68286: PUSH
68287: LD_INT 1
68289: NEG
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 2
68297: PUSH
68298: LD_INT 0
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 2
68307: PUSH
68308: LD_INT 1
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 2
68317: PUSH
68318: LD_INT 2
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 1
68327: PUSH
68328: LD_INT 2
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 0
68337: PUSH
68338: LD_INT 2
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 1
68347: NEG
68348: PUSH
68349: LD_INT 1
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 2
68358: NEG
68359: PUSH
68360: LD_INT 0
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 2
68369: NEG
68370: PUSH
68371: LD_INT 1
68373: NEG
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PUSH
68379: LD_INT 2
68381: NEG
68382: PUSH
68383: LD_INT 2
68385: NEG
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68412: LD_ADDR_VAR 0 55
68416: PUSH
68417: LD_INT 0
68419: PUSH
68420: LD_INT 0
68422: PUSH
68423: EMPTY
68424: LIST
68425: LIST
68426: PUSH
68427: LD_INT 0
68429: PUSH
68430: LD_INT 1
68432: NEG
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: PUSH
68438: LD_INT 1
68440: PUSH
68441: LD_INT 0
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: PUSH
68448: LD_INT 1
68450: PUSH
68451: LD_INT 1
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PUSH
68458: LD_INT 0
68460: PUSH
68461: LD_INT 1
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 1
68470: NEG
68471: PUSH
68472: LD_INT 0
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 1
68481: NEG
68482: PUSH
68483: LD_INT 1
68485: NEG
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: LD_INT 1
68493: NEG
68494: PUSH
68495: LD_INT 2
68497: NEG
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PUSH
68503: LD_INT 0
68505: PUSH
68506: LD_INT 2
68508: NEG
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 1
68516: PUSH
68517: LD_INT 1
68519: NEG
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PUSH
68525: LD_INT 2
68527: PUSH
68528: LD_INT 0
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 2
68537: PUSH
68538: LD_INT 1
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 2
68547: PUSH
68548: LD_INT 2
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: LD_INT 1
68557: PUSH
68558: LD_INT 2
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: LD_INT 0
68567: PUSH
68568: LD_INT 2
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: PUSH
68575: LD_INT 1
68577: NEG
68578: PUSH
68579: LD_INT 1
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 2
68588: NEG
68589: PUSH
68590: LD_INT 0
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: LD_INT 2
68599: NEG
68600: PUSH
68601: LD_INT 1
68603: NEG
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 2
68611: NEG
68612: PUSH
68613: LD_INT 2
68615: NEG
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: LIST
68625: LIST
68626: LIST
68627: LIST
68628: LIST
68629: LIST
68630: LIST
68631: LIST
68632: LIST
68633: LIST
68634: LIST
68635: LIST
68636: LIST
68637: LIST
68638: LIST
68639: LIST
68640: LIST
68641: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68642: LD_ADDR_VAR 0 56
68646: PUSH
68647: LD_INT 0
68649: PUSH
68650: LD_INT 0
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PUSH
68657: LD_INT 0
68659: PUSH
68660: LD_INT 1
68662: NEG
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 1
68670: PUSH
68671: LD_INT 0
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 1
68680: PUSH
68681: LD_INT 1
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 0
68690: PUSH
68691: LD_INT 1
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: LD_INT 1
68700: NEG
68701: PUSH
68702: LD_INT 0
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: LD_INT 1
68711: NEG
68712: PUSH
68713: LD_INT 1
68715: NEG
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PUSH
68721: LD_INT 1
68723: NEG
68724: PUSH
68725: LD_INT 2
68727: NEG
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 0
68735: PUSH
68736: LD_INT 2
68738: NEG
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: PUSH
68744: LD_INT 1
68746: PUSH
68747: LD_INT 1
68749: NEG
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 2
68757: PUSH
68758: LD_INT 0
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: LD_INT 2
68767: PUSH
68768: LD_INT 1
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 2
68777: PUSH
68778: LD_INT 2
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: LD_INT 1
68787: PUSH
68788: LD_INT 2
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: LD_INT 0
68797: PUSH
68798: LD_INT 2
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: PUSH
68805: LD_INT 1
68807: NEG
68808: PUSH
68809: LD_INT 1
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: PUSH
68816: LD_INT 2
68818: NEG
68819: PUSH
68820: LD_INT 0
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 2
68829: NEG
68830: PUSH
68831: LD_INT 1
68833: NEG
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: PUSH
68839: LD_INT 2
68841: NEG
68842: PUSH
68843: LD_INT 2
68845: NEG
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: LIST
68855: LIST
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: LIST
68868: LIST
68869: LIST
68870: LIST
68871: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68872: LD_ADDR_VAR 0 57
68876: PUSH
68877: LD_INT 0
68879: PUSH
68880: LD_INT 0
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: LD_INT 0
68889: PUSH
68890: LD_INT 1
68892: NEG
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: LD_INT 1
68900: PUSH
68901: LD_INT 0
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: PUSH
68908: LD_INT 1
68910: PUSH
68911: LD_INT 1
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: PUSH
68918: LD_INT 0
68920: PUSH
68921: LD_INT 1
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: PUSH
68928: LD_INT 1
68930: NEG
68931: PUSH
68932: LD_INT 0
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: LD_INT 1
68941: NEG
68942: PUSH
68943: LD_INT 1
68945: NEG
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: PUSH
68951: LD_INT 1
68953: NEG
68954: PUSH
68955: LD_INT 2
68957: NEG
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: LD_INT 0
68965: PUSH
68966: LD_INT 2
68968: NEG
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 1
68976: PUSH
68977: LD_INT 1
68979: NEG
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: LD_INT 2
68987: PUSH
68988: LD_INT 0
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: LD_INT 2
68997: PUSH
68998: LD_INT 1
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 2
69007: PUSH
69008: LD_INT 2
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: PUSH
69015: LD_INT 1
69017: PUSH
69018: LD_INT 2
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 0
69027: PUSH
69028: LD_INT 2
69030: PUSH
69031: EMPTY
69032: LIST
69033: LIST
69034: PUSH
69035: LD_INT 1
69037: NEG
69038: PUSH
69039: LD_INT 1
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: PUSH
69046: LD_INT 2
69048: NEG
69049: PUSH
69050: LD_INT 0
69052: PUSH
69053: EMPTY
69054: LIST
69055: LIST
69056: PUSH
69057: LD_INT 2
69059: NEG
69060: PUSH
69061: LD_INT 1
69063: NEG
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 2
69071: NEG
69072: PUSH
69073: LD_INT 2
69075: NEG
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: LIST
69085: LIST
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: LIST
69097: LIST
69098: LIST
69099: LIST
69100: LIST
69101: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69102: LD_ADDR_VAR 0 58
69106: PUSH
69107: LD_INT 0
69109: PUSH
69110: LD_INT 0
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: LD_INT 0
69119: PUSH
69120: LD_INT 1
69122: NEG
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: LD_INT 1
69130: PUSH
69131: LD_INT 0
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: LD_INT 1
69140: PUSH
69141: LD_INT 1
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 0
69150: PUSH
69151: LD_INT 1
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: LD_INT 1
69160: NEG
69161: PUSH
69162: LD_INT 0
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: LD_INT 1
69171: NEG
69172: PUSH
69173: LD_INT 1
69175: NEG
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PUSH
69181: LD_INT 1
69183: NEG
69184: PUSH
69185: LD_INT 2
69187: NEG
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 0
69195: PUSH
69196: LD_INT 2
69198: NEG
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 1
69206: PUSH
69207: LD_INT 1
69209: NEG
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: PUSH
69215: LD_INT 2
69217: PUSH
69218: LD_INT 0
69220: PUSH
69221: EMPTY
69222: LIST
69223: LIST
69224: PUSH
69225: LD_INT 2
69227: PUSH
69228: LD_INT 1
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: PUSH
69235: LD_INT 2
69237: PUSH
69238: LD_INT 2
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: PUSH
69245: LD_INT 1
69247: PUSH
69248: LD_INT 2
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: PUSH
69255: LD_INT 0
69257: PUSH
69258: LD_INT 2
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: LD_INT 1
69267: NEG
69268: PUSH
69269: LD_INT 1
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 2
69278: NEG
69279: PUSH
69280: LD_INT 0
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 2
69289: NEG
69290: PUSH
69291: LD_INT 1
69293: NEG
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 2
69301: NEG
69302: PUSH
69303: LD_INT 2
69305: NEG
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: LIST
69315: LIST
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: LIST
69321: LIST
69322: LIST
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: LIST
69329: LIST
69330: LIST
69331: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69332: LD_ADDR_VAR 0 59
69336: PUSH
69337: LD_INT 0
69339: PUSH
69340: LD_INT 0
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 0
69349: PUSH
69350: LD_INT 1
69352: NEG
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: PUSH
69358: LD_INT 1
69360: PUSH
69361: LD_INT 0
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: LD_INT 1
69370: PUSH
69371: LD_INT 1
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 0
69380: PUSH
69381: LD_INT 1
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: LD_INT 1
69390: NEG
69391: PUSH
69392: LD_INT 0
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: PUSH
69399: LD_INT 1
69401: NEG
69402: PUSH
69403: LD_INT 1
69405: NEG
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: LIST
69415: LIST
69416: LIST
69417: LIST
69418: LIST
69419: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69420: LD_ADDR_VAR 0 60
69424: PUSH
69425: LD_INT 0
69427: PUSH
69428: LD_INT 0
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: LD_INT 0
69437: PUSH
69438: LD_INT 1
69440: NEG
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 1
69448: PUSH
69449: LD_INT 0
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 1
69458: PUSH
69459: LD_INT 1
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 0
69468: PUSH
69469: LD_INT 1
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 1
69478: NEG
69479: PUSH
69480: LD_INT 0
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PUSH
69487: LD_INT 1
69489: NEG
69490: PUSH
69491: LD_INT 1
69493: NEG
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69508: LD_ADDR_VAR 0 61
69512: PUSH
69513: LD_INT 0
69515: PUSH
69516: LD_INT 0
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: LD_INT 0
69525: PUSH
69526: LD_INT 1
69528: NEG
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: PUSH
69534: LD_INT 1
69536: PUSH
69537: LD_INT 0
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PUSH
69544: LD_INT 1
69546: PUSH
69547: LD_INT 1
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 0
69556: PUSH
69557: LD_INT 1
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PUSH
69564: LD_INT 1
69566: NEG
69567: PUSH
69568: LD_INT 0
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: PUSH
69575: LD_INT 1
69577: NEG
69578: PUSH
69579: LD_INT 1
69581: NEG
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: EMPTY
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: LIST
69593: LIST
69594: LIST
69595: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69596: LD_ADDR_VAR 0 62
69600: PUSH
69601: LD_INT 0
69603: PUSH
69604: LD_INT 0
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: PUSH
69611: LD_INT 0
69613: PUSH
69614: LD_INT 1
69616: NEG
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: LD_INT 1
69624: PUSH
69625: LD_INT 0
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 1
69634: PUSH
69635: LD_INT 1
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 0
69644: PUSH
69645: LD_INT 1
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PUSH
69652: LD_INT 1
69654: NEG
69655: PUSH
69656: LD_INT 0
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: LD_INT 1
69665: NEG
69666: PUSH
69667: LD_INT 1
69669: NEG
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: LIST
69679: LIST
69680: LIST
69681: LIST
69682: LIST
69683: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69684: LD_ADDR_VAR 0 63
69688: PUSH
69689: LD_INT 0
69691: PUSH
69692: LD_INT 0
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: PUSH
69699: LD_INT 0
69701: PUSH
69702: LD_INT 1
69704: NEG
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 1
69712: PUSH
69713: LD_INT 0
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: LD_INT 1
69722: PUSH
69723: LD_INT 1
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 0
69732: PUSH
69733: LD_INT 1
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: PUSH
69740: LD_INT 1
69742: NEG
69743: PUSH
69744: LD_INT 0
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PUSH
69751: LD_INT 1
69753: NEG
69754: PUSH
69755: LD_INT 1
69757: NEG
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69772: LD_ADDR_VAR 0 64
69776: PUSH
69777: LD_INT 0
69779: PUSH
69780: LD_INT 0
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: PUSH
69787: LD_INT 0
69789: PUSH
69790: LD_INT 1
69792: NEG
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: PUSH
69798: LD_INT 1
69800: PUSH
69801: LD_INT 0
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: PUSH
69808: LD_INT 1
69810: PUSH
69811: LD_INT 1
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: PUSH
69818: LD_INT 0
69820: PUSH
69821: LD_INT 1
69823: PUSH
69824: EMPTY
69825: LIST
69826: LIST
69827: PUSH
69828: LD_INT 1
69830: NEG
69831: PUSH
69832: LD_INT 0
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PUSH
69839: LD_INT 1
69841: NEG
69842: PUSH
69843: LD_INT 1
69845: NEG
69846: PUSH
69847: EMPTY
69848: LIST
69849: LIST
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: ST_TO_ADDR
// end ; 1 :
69860: GO 75757
69862: LD_INT 1
69864: DOUBLE
69865: EQUAL
69866: IFTRUE 69870
69868: GO 72493
69870: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69871: LD_ADDR_VAR 0 11
69875: PUSH
69876: LD_INT 1
69878: NEG
69879: PUSH
69880: LD_INT 3
69882: NEG
69883: PUSH
69884: EMPTY
69885: LIST
69886: LIST
69887: PUSH
69888: LD_INT 0
69890: PUSH
69891: LD_INT 3
69893: NEG
69894: PUSH
69895: EMPTY
69896: LIST
69897: LIST
69898: PUSH
69899: LD_INT 1
69901: PUSH
69902: LD_INT 2
69904: NEG
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: EMPTY
69911: LIST
69912: LIST
69913: LIST
69914: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69915: LD_ADDR_VAR 0 12
69919: PUSH
69920: LD_INT 2
69922: PUSH
69923: LD_INT 1
69925: NEG
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: PUSH
69931: LD_INT 3
69933: PUSH
69934: LD_INT 0
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 3
69943: PUSH
69944: LD_INT 1
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: LIST
69955: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69956: LD_ADDR_VAR 0 13
69960: PUSH
69961: LD_INT 3
69963: PUSH
69964: LD_INT 2
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: PUSH
69971: LD_INT 3
69973: PUSH
69974: LD_INT 3
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: PUSH
69981: LD_INT 2
69983: PUSH
69984: LD_INT 3
69986: PUSH
69987: EMPTY
69988: LIST
69989: LIST
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: LIST
69995: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69996: LD_ADDR_VAR 0 14
70000: PUSH
70001: LD_INT 1
70003: PUSH
70004: LD_INT 3
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: PUSH
70011: LD_INT 0
70013: PUSH
70014: LD_INT 3
70016: PUSH
70017: EMPTY
70018: LIST
70019: LIST
70020: PUSH
70021: LD_INT 1
70023: NEG
70024: PUSH
70025: LD_INT 2
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: LIST
70036: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70037: LD_ADDR_VAR 0 15
70041: PUSH
70042: LD_INT 2
70044: NEG
70045: PUSH
70046: LD_INT 1
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 3
70055: NEG
70056: PUSH
70057: LD_INT 0
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: PUSH
70064: LD_INT 3
70066: NEG
70067: PUSH
70068: LD_INT 1
70070: NEG
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: PUSH
70076: EMPTY
70077: LIST
70078: LIST
70079: LIST
70080: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70081: LD_ADDR_VAR 0 16
70085: PUSH
70086: LD_INT 2
70088: NEG
70089: PUSH
70090: LD_INT 3
70092: NEG
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 3
70100: NEG
70101: PUSH
70102: LD_INT 2
70104: NEG
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 3
70112: NEG
70113: PUSH
70114: LD_INT 3
70116: NEG
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: LIST
70126: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70127: LD_ADDR_VAR 0 17
70131: PUSH
70132: LD_INT 1
70134: NEG
70135: PUSH
70136: LD_INT 3
70138: NEG
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PUSH
70144: LD_INT 0
70146: PUSH
70147: LD_INT 3
70149: NEG
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: PUSH
70155: LD_INT 1
70157: PUSH
70158: LD_INT 2
70160: NEG
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: LIST
70170: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70171: LD_ADDR_VAR 0 18
70175: PUSH
70176: LD_INT 2
70178: PUSH
70179: LD_INT 1
70181: NEG
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PUSH
70187: LD_INT 3
70189: PUSH
70190: LD_INT 0
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: PUSH
70197: LD_INT 3
70199: PUSH
70200: LD_INT 1
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: LIST
70211: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70212: LD_ADDR_VAR 0 19
70216: PUSH
70217: LD_INT 3
70219: PUSH
70220: LD_INT 2
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: PUSH
70227: LD_INT 3
70229: PUSH
70230: LD_INT 3
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: PUSH
70237: LD_INT 2
70239: PUSH
70240: LD_INT 3
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: LIST
70251: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70252: LD_ADDR_VAR 0 20
70256: PUSH
70257: LD_INT 1
70259: PUSH
70260: LD_INT 3
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: PUSH
70267: LD_INT 0
70269: PUSH
70270: LD_INT 3
70272: PUSH
70273: EMPTY
70274: LIST
70275: LIST
70276: PUSH
70277: LD_INT 1
70279: NEG
70280: PUSH
70281: LD_INT 2
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: PUSH
70288: EMPTY
70289: LIST
70290: LIST
70291: LIST
70292: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70293: LD_ADDR_VAR 0 21
70297: PUSH
70298: LD_INT 2
70300: NEG
70301: PUSH
70302: LD_INT 1
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: LD_INT 3
70311: NEG
70312: PUSH
70313: LD_INT 0
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: LD_INT 3
70322: NEG
70323: PUSH
70324: LD_INT 1
70326: NEG
70327: PUSH
70328: EMPTY
70329: LIST
70330: LIST
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: LIST
70336: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70337: LD_ADDR_VAR 0 22
70341: PUSH
70342: LD_INT 2
70344: NEG
70345: PUSH
70346: LD_INT 3
70348: NEG
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: LD_INT 3
70356: NEG
70357: PUSH
70358: LD_INT 2
70360: NEG
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: PUSH
70366: LD_INT 3
70368: NEG
70369: PUSH
70370: LD_INT 3
70372: NEG
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: LIST
70382: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
70383: LD_ADDR_VAR 0 23
70387: PUSH
70388: LD_INT 0
70390: PUSH
70391: LD_INT 3
70393: NEG
70394: PUSH
70395: EMPTY
70396: LIST
70397: LIST
70398: PUSH
70399: LD_INT 1
70401: NEG
70402: PUSH
70403: LD_INT 4
70405: NEG
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: LD_INT 1
70413: PUSH
70414: LD_INT 3
70416: NEG
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: LIST
70426: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
70427: LD_ADDR_VAR 0 24
70431: PUSH
70432: LD_INT 3
70434: PUSH
70435: LD_INT 0
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: PUSH
70442: LD_INT 3
70444: PUSH
70445: LD_INT 1
70447: NEG
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: LD_INT 4
70455: PUSH
70456: LD_INT 1
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: LIST
70467: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
70468: LD_ADDR_VAR 0 25
70472: PUSH
70473: LD_INT 3
70475: PUSH
70476: LD_INT 3
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: PUSH
70483: LD_INT 4
70485: PUSH
70486: LD_INT 3
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: PUSH
70493: LD_INT 3
70495: PUSH
70496: LD_INT 4
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: LIST
70507: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
70508: LD_ADDR_VAR 0 26
70512: PUSH
70513: LD_INT 0
70515: PUSH
70516: LD_INT 3
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PUSH
70523: LD_INT 1
70525: PUSH
70526: LD_INT 4
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 1
70535: NEG
70536: PUSH
70537: LD_INT 3
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: LIST
70548: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
70549: LD_ADDR_VAR 0 27
70553: PUSH
70554: LD_INT 3
70556: NEG
70557: PUSH
70558: LD_INT 0
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: LD_INT 3
70567: NEG
70568: PUSH
70569: LD_INT 1
70571: PUSH
70572: EMPTY
70573: LIST
70574: LIST
70575: PUSH
70576: LD_INT 4
70578: NEG
70579: PUSH
70580: LD_INT 1
70582: NEG
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: LIST
70592: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
70593: LD_ADDR_VAR 0 28
70597: PUSH
70598: LD_INT 3
70600: NEG
70601: PUSH
70602: LD_INT 3
70604: NEG
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_INT 3
70612: NEG
70613: PUSH
70614: LD_INT 4
70616: NEG
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: PUSH
70622: LD_INT 4
70624: NEG
70625: PUSH
70626: LD_INT 3
70628: NEG
70629: PUSH
70630: EMPTY
70631: LIST
70632: LIST
70633: PUSH
70634: EMPTY
70635: LIST
70636: LIST
70637: LIST
70638: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
70639: LD_ADDR_VAR 0 29
70643: PUSH
70644: LD_INT 1
70646: NEG
70647: PUSH
70648: LD_INT 3
70650: NEG
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 0
70658: PUSH
70659: LD_INT 3
70661: NEG
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: LD_INT 1
70669: PUSH
70670: LD_INT 2
70672: NEG
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: PUSH
70678: LD_INT 1
70680: NEG
70681: PUSH
70682: LD_INT 4
70684: NEG
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: PUSH
70690: LD_INT 0
70692: PUSH
70693: LD_INT 4
70695: NEG
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: PUSH
70701: LD_INT 1
70703: PUSH
70704: LD_INT 3
70706: NEG
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: LD_INT 1
70714: NEG
70715: PUSH
70716: LD_INT 5
70718: NEG
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: PUSH
70724: LD_INT 0
70726: PUSH
70727: LD_INT 5
70729: NEG
70730: PUSH
70731: EMPTY
70732: LIST
70733: LIST
70734: PUSH
70735: LD_INT 1
70737: PUSH
70738: LD_INT 4
70740: NEG
70741: PUSH
70742: EMPTY
70743: LIST
70744: LIST
70745: PUSH
70746: LD_INT 1
70748: NEG
70749: PUSH
70750: LD_INT 6
70752: NEG
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: PUSH
70758: LD_INT 0
70760: PUSH
70761: LD_INT 6
70763: NEG
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: PUSH
70769: LD_INT 1
70771: PUSH
70772: LD_INT 5
70774: NEG
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: LIST
70784: LIST
70785: LIST
70786: LIST
70787: LIST
70788: LIST
70789: LIST
70790: LIST
70791: LIST
70792: LIST
70793: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
70794: LD_ADDR_VAR 0 30
70798: PUSH
70799: LD_INT 2
70801: PUSH
70802: LD_INT 1
70804: NEG
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: PUSH
70810: LD_INT 3
70812: PUSH
70813: LD_INT 0
70815: PUSH
70816: EMPTY
70817: LIST
70818: LIST
70819: PUSH
70820: LD_INT 3
70822: PUSH
70823: LD_INT 1
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: PUSH
70830: LD_INT 3
70832: PUSH
70833: LD_INT 1
70835: NEG
70836: PUSH
70837: EMPTY
70838: LIST
70839: LIST
70840: PUSH
70841: LD_INT 4
70843: PUSH
70844: LD_INT 0
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: PUSH
70851: LD_INT 4
70853: PUSH
70854: LD_INT 1
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: LD_INT 4
70863: PUSH
70864: LD_INT 1
70866: NEG
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PUSH
70872: LD_INT 5
70874: PUSH
70875: LD_INT 0
70877: PUSH
70878: EMPTY
70879: LIST
70880: LIST
70881: PUSH
70882: LD_INT 5
70884: PUSH
70885: LD_INT 1
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: PUSH
70892: LD_INT 5
70894: PUSH
70895: LD_INT 1
70897: NEG
70898: PUSH
70899: EMPTY
70900: LIST
70901: LIST
70902: PUSH
70903: LD_INT 6
70905: PUSH
70906: LD_INT 0
70908: PUSH
70909: EMPTY
70910: LIST
70911: LIST
70912: PUSH
70913: LD_INT 6
70915: PUSH
70916: LD_INT 1
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: PUSH
70923: EMPTY
70924: LIST
70925: LIST
70926: LIST
70927: LIST
70928: LIST
70929: LIST
70930: LIST
70931: LIST
70932: LIST
70933: LIST
70934: LIST
70935: LIST
70936: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
70937: LD_ADDR_VAR 0 31
70941: PUSH
70942: LD_INT 3
70944: PUSH
70945: LD_INT 2
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: PUSH
70952: LD_INT 3
70954: PUSH
70955: LD_INT 3
70957: PUSH
70958: EMPTY
70959: LIST
70960: LIST
70961: PUSH
70962: LD_INT 2
70964: PUSH
70965: LD_INT 3
70967: PUSH
70968: EMPTY
70969: LIST
70970: LIST
70971: PUSH
70972: LD_INT 4
70974: PUSH
70975: LD_INT 3
70977: PUSH
70978: EMPTY
70979: LIST
70980: LIST
70981: PUSH
70982: LD_INT 4
70984: PUSH
70985: LD_INT 4
70987: PUSH
70988: EMPTY
70989: LIST
70990: LIST
70991: PUSH
70992: LD_INT 3
70994: PUSH
70995: LD_INT 4
70997: PUSH
70998: EMPTY
70999: LIST
71000: LIST
71001: PUSH
71002: LD_INT 5
71004: PUSH
71005: LD_INT 4
71007: PUSH
71008: EMPTY
71009: LIST
71010: LIST
71011: PUSH
71012: LD_INT 5
71014: PUSH
71015: LD_INT 5
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: LD_INT 4
71024: PUSH
71025: LD_INT 5
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: PUSH
71032: LD_INT 6
71034: PUSH
71035: LD_INT 5
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: PUSH
71042: LD_INT 6
71044: PUSH
71045: LD_INT 6
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: PUSH
71052: LD_INT 5
71054: PUSH
71055: LD_INT 6
71057: PUSH
71058: EMPTY
71059: LIST
71060: LIST
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
71076: LD_ADDR_VAR 0 32
71080: PUSH
71081: LD_INT 1
71083: PUSH
71084: LD_INT 3
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: PUSH
71091: LD_INT 0
71093: PUSH
71094: LD_INT 3
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: LD_INT 1
71103: NEG
71104: PUSH
71105: LD_INT 2
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: LD_INT 1
71114: PUSH
71115: LD_INT 4
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: PUSH
71122: LD_INT 0
71124: PUSH
71125: LD_INT 4
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: PUSH
71132: LD_INT 1
71134: NEG
71135: PUSH
71136: LD_INT 3
71138: PUSH
71139: EMPTY
71140: LIST
71141: LIST
71142: PUSH
71143: LD_INT 1
71145: PUSH
71146: LD_INT 5
71148: PUSH
71149: EMPTY
71150: LIST
71151: LIST
71152: PUSH
71153: LD_INT 0
71155: PUSH
71156: LD_INT 5
71158: PUSH
71159: EMPTY
71160: LIST
71161: LIST
71162: PUSH
71163: LD_INT 1
71165: NEG
71166: PUSH
71167: LD_INT 4
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PUSH
71174: LD_INT 1
71176: PUSH
71177: LD_INT 6
71179: PUSH
71180: EMPTY
71181: LIST
71182: LIST
71183: PUSH
71184: LD_INT 0
71186: PUSH
71187: LD_INT 6
71189: PUSH
71190: EMPTY
71191: LIST
71192: LIST
71193: PUSH
71194: LD_INT 1
71196: NEG
71197: PUSH
71198: LD_INT 5
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: LIST
71209: LIST
71210: LIST
71211: LIST
71212: LIST
71213: LIST
71214: LIST
71215: LIST
71216: LIST
71217: LIST
71218: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
71219: LD_ADDR_VAR 0 33
71223: PUSH
71224: LD_INT 2
71226: NEG
71227: PUSH
71228: LD_INT 1
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: PUSH
71235: LD_INT 3
71237: NEG
71238: PUSH
71239: LD_INT 0
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: PUSH
71246: LD_INT 3
71248: NEG
71249: PUSH
71250: LD_INT 1
71252: NEG
71253: PUSH
71254: EMPTY
71255: LIST
71256: LIST
71257: PUSH
71258: LD_INT 3
71260: NEG
71261: PUSH
71262: LD_INT 1
71264: PUSH
71265: EMPTY
71266: LIST
71267: LIST
71268: PUSH
71269: LD_INT 4
71271: NEG
71272: PUSH
71273: LD_INT 0
71275: PUSH
71276: EMPTY
71277: LIST
71278: LIST
71279: PUSH
71280: LD_INT 4
71282: NEG
71283: PUSH
71284: LD_INT 1
71286: NEG
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: PUSH
71292: LD_INT 4
71294: NEG
71295: PUSH
71296: LD_INT 1
71298: PUSH
71299: EMPTY
71300: LIST
71301: LIST
71302: PUSH
71303: LD_INT 5
71305: NEG
71306: PUSH
71307: LD_INT 0
71309: PUSH
71310: EMPTY
71311: LIST
71312: LIST
71313: PUSH
71314: LD_INT 5
71316: NEG
71317: PUSH
71318: LD_INT 1
71320: NEG
71321: PUSH
71322: EMPTY
71323: LIST
71324: LIST
71325: PUSH
71326: LD_INT 5
71328: NEG
71329: PUSH
71330: LD_INT 1
71332: PUSH
71333: EMPTY
71334: LIST
71335: LIST
71336: PUSH
71337: LD_INT 6
71339: NEG
71340: PUSH
71341: LD_INT 0
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: PUSH
71348: LD_INT 6
71350: NEG
71351: PUSH
71352: LD_INT 1
71354: NEG
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: PUSH
71360: EMPTY
71361: LIST
71362: LIST
71363: LIST
71364: LIST
71365: LIST
71366: LIST
71367: LIST
71368: LIST
71369: LIST
71370: LIST
71371: LIST
71372: LIST
71373: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
71374: LD_ADDR_VAR 0 34
71378: PUSH
71379: LD_INT 2
71381: NEG
71382: PUSH
71383: LD_INT 3
71385: NEG
71386: PUSH
71387: EMPTY
71388: LIST
71389: LIST
71390: PUSH
71391: LD_INT 3
71393: NEG
71394: PUSH
71395: LD_INT 2
71397: NEG
71398: PUSH
71399: EMPTY
71400: LIST
71401: LIST
71402: PUSH
71403: LD_INT 3
71405: NEG
71406: PUSH
71407: LD_INT 3
71409: NEG
71410: PUSH
71411: EMPTY
71412: LIST
71413: LIST
71414: PUSH
71415: LD_INT 3
71417: NEG
71418: PUSH
71419: LD_INT 4
71421: NEG
71422: PUSH
71423: EMPTY
71424: LIST
71425: LIST
71426: PUSH
71427: LD_INT 4
71429: NEG
71430: PUSH
71431: LD_INT 3
71433: NEG
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: PUSH
71439: LD_INT 4
71441: NEG
71442: PUSH
71443: LD_INT 4
71445: NEG
71446: PUSH
71447: EMPTY
71448: LIST
71449: LIST
71450: PUSH
71451: LD_INT 4
71453: NEG
71454: PUSH
71455: LD_INT 5
71457: NEG
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: PUSH
71463: LD_INT 5
71465: NEG
71466: PUSH
71467: LD_INT 4
71469: NEG
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: LD_INT 5
71477: NEG
71478: PUSH
71479: LD_INT 5
71481: NEG
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: LD_INT 5
71489: NEG
71490: PUSH
71491: LD_INT 6
71493: NEG
71494: PUSH
71495: EMPTY
71496: LIST
71497: LIST
71498: PUSH
71499: LD_INT 6
71501: NEG
71502: PUSH
71503: LD_INT 5
71505: NEG
71506: PUSH
71507: EMPTY
71508: LIST
71509: LIST
71510: PUSH
71511: LD_INT 6
71513: NEG
71514: PUSH
71515: LD_INT 6
71517: NEG
71518: PUSH
71519: EMPTY
71520: LIST
71521: LIST
71522: PUSH
71523: EMPTY
71524: LIST
71525: LIST
71526: LIST
71527: LIST
71528: LIST
71529: LIST
71530: LIST
71531: LIST
71532: LIST
71533: LIST
71534: LIST
71535: LIST
71536: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
71537: LD_ADDR_VAR 0 41
71541: PUSH
71542: LD_INT 0
71544: PUSH
71545: LD_INT 2
71547: NEG
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: PUSH
71553: LD_INT 1
71555: NEG
71556: PUSH
71557: LD_INT 3
71559: NEG
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PUSH
71565: LD_INT 1
71567: PUSH
71568: LD_INT 2
71570: NEG
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: PUSH
71576: EMPTY
71577: LIST
71578: LIST
71579: LIST
71580: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
71581: LD_ADDR_VAR 0 42
71585: PUSH
71586: LD_INT 2
71588: PUSH
71589: LD_INT 0
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: PUSH
71596: LD_INT 2
71598: PUSH
71599: LD_INT 1
71601: NEG
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: PUSH
71607: LD_INT 3
71609: PUSH
71610: LD_INT 1
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PUSH
71617: EMPTY
71618: LIST
71619: LIST
71620: LIST
71621: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
71622: LD_ADDR_VAR 0 43
71626: PUSH
71627: LD_INT 2
71629: PUSH
71630: LD_INT 2
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: PUSH
71637: LD_INT 3
71639: PUSH
71640: LD_INT 2
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: PUSH
71647: LD_INT 2
71649: PUSH
71650: LD_INT 3
71652: PUSH
71653: EMPTY
71654: LIST
71655: LIST
71656: PUSH
71657: EMPTY
71658: LIST
71659: LIST
71660: LIST
71661: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
71662: LD_ADDR_VAR 0 44
71666: PUSH
71667: LD_INT 0
71669: PUSH
71670: LD_INT 2
71672: PUSH
71673: EMPTY
71674: LIST
71675: LIST
71676: PUSH
71677: LD_INT 1
71679: PUSH
71680: LD_INT 3
71682: PUSH
71683: EMPTY
71684: LIST
71685: LIST
71686: PUSH
71687: LD_INT 1
71689: NEG
71690: PUSH
71691: LD_INT 2
71693: PUSH
71694: EMPTY
71695: LIST
71696: LIST
71697: PUSH
71698: EMPTY
71699: LIST
71700: LIST
71701: LIST
71702: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
71703: LD_ADDR_VAR 0 45
71707: PUSH
71708: LD_INT 2
71710: NEG
71711: PUSH
71712: LD_INT 0
71714: PUSH
71715: EMPTY
71716: LIST
71717: LIST
71718: PUSH
71719: LD_INT 2
71721: NEG
71722: PUSH
71723: LD_INT 1
71725: PUSH
71726: EMPTY
71727: LIST
71728: LIST
71729: PUSH
71730: LD_INT 3
71732: NEG
71733: PUSH
71734: LD_INT 1
71736: NEG
71737: PUSH
71738: EMPTY
71739: LIST
71740: LIST
71741: PUSH
71742: EMPTY
71743: LIST
71744: LIST
71745: LIST
71746: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
71747: LD_ADDR_VAR 0 46
71751: PUSH
71752: LD_INT 2
71754: NEG
71755: PUSH
71756: LD_INT 2
71758: NEG
71759: PUSH
71760: EMPTY
71761: LIST
71762: LIST
71763: PUSH
71764: LD_INT 2
71766: NEG
71767: PUSH
71768: LD_INT 3
71770: NEG
71771: PUSH
71772: EMPTY
71773: LIST
71774: LIST
71775: PUSH
71776: LD_INT 3
71778: NEG
71779: PUSH
71780: LD_INT 2
71782: NEG
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: PUSH
71788: EMPTY
71789: LIST
71790: LIST
71791: LIST
71792: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
71793: LD_ADDR_VAR 0 47
71797: PUSH
71798: LD_INT 2
71800: NEG
71801: PUSH
71802: LD_INT 3
71804: NEG
71805: PUSH
71806: EMPTY
71807: LIST
71808: LIST
71809: PUSH
71810: LD_INT 1
71812: NEG
71813: PUSH
71814: LD_INT 3
71816: NEG
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: PUSH
71822: EMPTY
71823: LIST
71824: LIST
71825: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
71826: LD_ADDR_VAR 0 48
71830: PUSH
71831: LD_INT 1
71833: PUSH
71834: LD_INT 2
71836: NEG
71837: PUSH
71838: EMPTY
71839: LIST
71840: LIST
71841: PUSH
71842: LD_INT 2
71844: PUSH
71845: LD_INT 1
71847: NEG
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
71857: LD_ADDR_VAR 0 49
71861: PUSH
71862: LD_INT 3
71864: PUSH
71865: LD_INT 1
71867: PUSH
71868: EMPTY
71869: LIST
71870: LIST
71871: PUSH
71872: LD_INT 3
71874: PUSH
71875: LD_INT 2
71877: PUSH
71878: EMPTY
71879: LIST
71880: LIST
71881: PUSH
71882: EMPTY
71883: LIST
71884: LIST
71885: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
71886: LD_ADDR_VAR 0 50
71890: PUSH
71891: LD_INT 2
71893: PUSH
71894: LD_INT 3
71896: PUSH
71897: EMPTY
71898: LIST
71899: LIST
71900: PUSH
71901: LD_INT 1
71903: PUSH
71904: LD_INT 3
71906: PUSH
71907: EMPTY
71908: LIST
71909: LIST
71910: PUSH
71911: EMPTY
71912: LIST
71913: LIST
71914: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
71915: LD_ADDR_VAR 0 51
71919: PUSH
71920: LD_INT 1
71922: NEG
71923: PUSH
71924: LD_INT 2
71926: PUSH
71927: EMPTY
71928: LIST
71929: LIST
71930: PUSH
71931: LD_INT 2
71933: NEG
71934: PUSH
71935: LD_INT 1
71937: PUSH
71938: EMPTY
71939: LIST
71940: LIST
71941: PUSH
71942: EMPTY
71943: LIST
71944: LIST
71945: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
71946: LD_ADDR_VAR 0 52
71950: PUSH
71951: LD_INT 3
71953: NEG
71954: PUSH
71955: LD_INT 1
71957: NEG
71958: PUSH
71959: EMPTY
71960: LIST
71961: LIST
71962: PUSH
71963: LD_INT 3
71965: NEG
71966: PUSH
71967: LD_INT 2
71969: NEG
71970: PUSH
71971: EMPTY
71972: LIST
71973: LIST
71974: PUSH
71975: EMPTY
71976: LIST
71977: LIST
71978: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71979: LD_ADDR_VAR 0 53
71983: PUSH
71984: LD_INT 1
71986: NEG
71987: PUSH
71988: LD_INT 3
71990: NEG
71991: PUSH
71992: EMPTY
71993: LIST
71994: LIST
71995: PUSH
71996: LD_INT 0
71998: PUSH
71999: LD_INT 3
72001: NEG
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: PUSH
72007: LD_INT 1
72009: PUSH
72010: LD_INT 2
72012: NEG
72013: PUSH
72014: EMPTY
72015: LIST
72016: LIST
72017: PUSH
72018: EMPTY
72019: LIST
72020: LIST
72021: LIST
72022: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72023: LD_ADDR_VAR 0 54
72027: PUSH
72028: LD_INT 2
72030: PUSH
72031: LD_INT 1
72033: NEG
72034: PUSH
72035: EMPTY
72036: LIST
72037: LIST
72038: PUSH
72039: LD_INT 3
72041: PUSH
72042: LD_INT 0
72044: PUSH
72045: EMPTY
72046: LIST
72047: LIST
72048: PUSH
72049: LD_INT 3
72051: PUSH
72052: LD_INT 1
72054: PUSH
72055: EMPTY
72056: LIST
72057: LIST
72058: PUSH
72059: EMPTY
72060: LIST
72061: LIST
72062: LIST
72063: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72064: LD_ADDR_VAR 0 55
72068: PUSH
72069: LD_INT 3
72071: PUSH
72072: LD_INT 2
72074: PUSH
72075: EMPTY
72076: LIST
72077: LIST
72078: PUSH
72079: LD_INT 3
72081: PUSH
72082: LD_INT 3
72084: PUSH
72085: EMPTY
72086: LIST
72087: LIST
72088: PUSH
72089: LD_INT 2
72091: PUSH
72092: LD_INT 3
72094: PUSH
72095: EMPTY
72096: LIST
72097: LIST
72098: PUSH
72099: EMPTY
72100: LIST
72101: LIST
72102: LIST
72103: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
72104: LD_ADDR_VAR 0 56
72108: PUSH
72109: LD_INT 1
72111: PUSH
72112: LD_INT 3
72114: PUSH
72115: EMPTY
72116: LIST
72117: LIST
72118: PUSH
72119: LD_INT 0
72121: PUSH
72122: LD_INT 3
72124: PUSH
72125: EMPTY
72126: LIST
72127: LIST
72128: PUSH
72129: LD_INT 1
72131: NEG
72132: PUSH
72133: LD_INT 2
72135: PUSH
72136: EMPTY
72137: LIST
72138: LIST
72139: PUSH
72140: EMPTY
72141: LIST
72142: LIST
72143: LIST
72144: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72145: LD_ADDR_VAR 0 57
72149: PUSH
72150: LD_INT 2
72152: NEG
72153: PUSH
72154: LD_INT 1
72156: PUSH
72157: EMPTY
72158: LIST
72159: LIST
72160: PUSH
72161: LD_INT 3
72163: NEG
72164: PUSH
72165: LD_INT 0
72167: PUSH
72168: EMPTY
72169: LIST
72170: LIST
72171: PUSH
72172: LD_INT 3
72174: NEG
72175: PUSH
72176: LD_INT 1
72178: NEG
72179: PUSH
72180: EMPTY
72181: LIST
72182: LIST
72183: PUSH
72184: EMPTY
72185: LIST
72186: LIST
72187: LIST
72188: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72189: LD_ADDR_VAR 0 58
72193: PUSH
72194: LD_INT 2
72196: NEG
72197: PUSH
72198: LD_INT 3
72200: NEG
72201: PUSH
72202: EMPTY
72203: LIST
72204: LIST
72205: PUSH
72206: LD_INT 3
72208: NEG
72209: PUSH
72210: LD_INT 2
72212: NEG
72213: PUSH
72214: EMPTY
72215: LIST
72216: LIST
72217: PUSH
72218: LD_INT 3
72220: NEG
72221: PUSH
72222: LD_INT 3
72224: NEG
72225: PUSH
72226: EMPTY
72227: LIST
72228: LIST
72229: PUSH
72230: EMPTY
72231: LIST
72232: LIST
72233: LIST
72234: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
72235: LD_ADDR_VAR 0 59
72239: PUSH
72240: LD_INT 1
72242: NEG
72243: PUSH
72244: LD_INT 2
72246: NEG
72247: PUSH
72248: EMPTY
72249: LIST
72250: LIST
72251: PUSH
72252: LD_INT 0
72254: PUSH
72255: LD_INT 2
72257: NEG
72258: PUSH
72259: EMPTY
72260: LIST
72261: LIST
72262: PUSH
72263: LD_INT 1
72265: PUSH
72266: LD_INT 1
72268: NEG
72269: PUSH
72270: EMPTY
72271: LIST
72272: LIST
72273: PUSH
72274: EMPTY
72275: LIST
72276: LIST
72277: LIST
72278: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
72279: LD_ADDR_VAR 0 60
72283: PUSH
72284: LD_INT 1
72286: PUSH
72287: LD_INT 1
72289: NEG
72290: PUSH
72291: EMPTY
72292: LIST
72293: LIST
72294: PUSH
72295: LD_INT 2
72297: PUSH
72298: LD_INT 0
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: PUSH
72305: LD_INT 2
72307: PUSH
72308: LD_INT 1
72310: PUSH
72311: EMPTY
72312: LIST
72313: LIST
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: LIST
72319: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
72320: LD_ADDR_VAR 0 61
72324: PUSH
72325: LD_INT 2
72327: PUSH
72328: LD_INT 1
72330: PUSH
72331: EMPTY
72332: LIST
72333: LIST
72334: PUSH
72335: LD_INT 2
72337: PUSH
72338: LD_INT 2
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: PUSH
72345: LD_INT 1
72347: PUSH
72348: LD_INT 2
72350: PUSH
72351: EMPTY
72352: LIST
72353: LIST
72354: PUSH
72355: EMPTY
72356: LIST
72357: LIST
72358: LIST
72359: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
72360: LD_ADDR_VAR 0 62
72364: PUSH
72365: LD_INT 1
72367: PUSH
72368: LD_INT 2
72370: PUSH
72371: EMPTY
72372: LIST
72373: LIST
72374: PUSH
72375: LD_INT 0
72377: PUSH
72378: LD_INT 2
72380: PUSH
72381: EMPTY
72382: LIST
72383: LIST
72384: PUSH
72385: LD_INT 1
72387: NEG
72388: PUSH
72389: LD_INT 1
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: PUSH
72396: EMPTY
72397: LIST
72398: LIST
72399: LIST
72400: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
72401: LD_ADDR_VAR 0 63
72405: PUSH
72406: LD_INT 1
72408: NEG
72409: PUSH
72410: LD_INT 1
72412: PUSH
72413: EMPTY
72414: LIST
72415: LIST
72416: PUSH
72417: LD_INT 2
72419: NEG
72420: PUSH
72421: LD_INT 0
72423: PUSH
72424: EMPTY
72425: LIST
72426: LIST
72427: PUSH
72428: LD_INT 2
72430: NEG
72431: PUSH
72432: LD_INT 1
72434: NEG
72435: PUSH
72436: EMPTY
72437: LIST
72438: LIST
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: LIST
72444: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72445: LD_ADDR_VAR 0 64
72449: PUSH
72450: LD_INT 1
72452: NEG
72453: PUSH
72454: LD_INT 2
72456: NEG
72457: PUSH
72458: EMPTY
72459: LIST
72460: LIST
72461: PUSH
72462: LD_INT 2
72464: NEG
72465: PUSH
72466: LD_INT 1
72468: NEG
72469: PUSH
72470: EMPTY
72471: LIST
72472: LIST
72473: PUSH
72474: LD_INT 2
72476: NEG
72477: PUSH
72478: LD_INT 2
72480: NEG
72481: PUSH
72482: EMPTY
72483: LIST
72484: LIST
72485: PUSH
72486: EMPTY
72487: LIST
72488: LIST
72489: LIST
72490: ST_TO_ADDR
// end ; 2 :
72491: GO 75757
72493: LD_INT 2
72495: DOUBLE
72496: EQUAL
72497: IFTRUE 72501
72499: GO 75756
72501: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
72502: LD_ADDR_VAR 0 29
72506: PUSH
72507: LD_INT 4
72509: PUSH
72510: LD_INT 0
72512: PUSH
72513: EMPTY
72514: LIST
72515: LIST
72516: PUSH
72517: LD_INT 4
72519: PUSH
72520: LD_INT 1
72522: NEG
72523: PUSH
72524: EMPTY
72525: LIST
72526: LIST
72527: PUSH
72528: LD_INT 5
72530: PUSH
72531: LD_INT 0
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: PUSH
72538: LD_INT 5
72540: PUSH
72541: LD_INT 1
72543: PUSH
72544: EMPTY
72545: LIST
72546: LIST
72547: PUSH
72548: LD_INT 4
72550: PUSH
72551: LD_INT 1
72553: PUSH
72554: EMPTY
72555: LIST
72556: LIST
72557: PUSH
72558: LD_INT 3
72560: PUSH
72561: LD_INT 0
72563: PUSH
72564: EMPTY
72565: LIST
72566: LIST
72567: PUSH
72568: LD_INT 3
72570: PUSH
72571: LD_INT 1
72573: NEG
72574: PUSH
72575: EMPTY
72576: LIST
72577: LIST
72578: PUSH
72579: LD_INT 3
72581: PUSH
72582: LD_INT 2
72584: NEG
72585: PUSH
72586: EMPTY
72587: LIST
72588: LIST
72589: PUSH
72590: LD_INT 5
72592: PUSH
72593: LD_INT 2
72595: PUSH
72596: EMPTY
72597: LIST
72598: LIST
72599: PUSH
72600: LD_INT 3
72602: PUSH
72603: LD_INT 3
72605: PUSH
72606: EMPTY
72607: LIST
72608: LIST
72609: PUSH
72610: LD_INT 3
72612: PUSH
72613: LD_INT 2
72615: PUSH
72616: EMPTY
72617: LIST
72618: LIST
72619: PUSH
72620: LD_INT 4
72622: PUSH
72623: LD_INT 3
72625: PUSH
72626: EMPTY
72627: LIST
72628: LIST
72629: PUSH
72630: LD_INT 4
72632: PUSH
72633: LD_INT 4
72635: PUSH
72636: EMPTY
72637: LIST
72638: LIST
72639: PUSH
72640: LD_INT 3
72642: PUSH
72643: LD_INT 4
72645: PUSH
72646: EMPTY
72647: LIST
72648: LIST
72649: PUSH
72650: LD_INT 2
72652: PUSH
72653: LD_INT 3
72655: PUSH
72656: EMPTY
72657: LIST
72658: LIST
72659: PUSH
72660: LD_INT 2
72662: PUSH
72663: LD_INT 2
72665: PUSH
72666: EMPTY
72667: LIST
72668: LIST
72669: PUSH
72670: LD_INT 4
72672: PUSH
72673: LD_INT 2
72675: PUSH
72676: EMPTY
72677: LIST
72678: LIST
72679: PUSH
72680: LD_INT 2
72682: PUSH
72683: LD_INT 4
72685: PUSH
72686: EMPTY
72687: LIST
72688: LIST
72689: PUSH
72690: LD_INT 0
72692: PUSH
72693: LD_INT 4
72695: PUSH
72696: EMPTY
72697: LIST
72698: LIST
72699: PUSH
72700: LD_INT 0
72702: PUSH
72703: LD_INT 3
72705: PUSH
72706: EMPTY
72707: LIST
72708: LIST
72709: PUSH
72710: LD_INT 1
72712: PUSH
72713: LD_INT 4
72715: PUSH
72716: EMPTY
72717: LIST
72718: LIST
72719: PUSH
72720: LD_INT 1
72722: PUSH
72723: LD_INT 5
72725: PUSH
72726: EMPTY
72727: LIST
72728: LIST
72729: PUSH
72730: LD_INT 0
72732: PUSH
72733: LD_INT 5
72735: PUSH
72736: EMPTY
72737: LIST
72738: LIST
72739: PUSH
72740: LD_INT 1
72742: NEG
72743: PUSH
72744: LD_INT 4
72746: PUSH
72747: EMPTY
72748: LIST
72749: LIST
72750: PUSH
72751: LD_INT 1
72753: NEG
72754: PUSH
72755: LD_INT 3
72757: PUSH
72758: EMPTY
72759: LIST
72760: LIST
72761: PUSH
72762: LD_INT 2
72764: PUSH
72765: LD_INT 5
72767: PUSH
72768: EMPTY
72769: LIST
72770: LIST
72771: PUSH
72772: LD_INT 2
72774: NEG
72775: PUSH
72776: LD_INT 3
72778: PUSH
72779: EMPTY
72780: LIST
72781: LIST
72782: PUSH
72783: LD_INT 3
72785: NEG
72786: PUSH
72787: LD_INT 0
72789: PUSH
72790: EMPTY
72791: LIST
72792: LIST
72793: PUSH
72794: LD_INT 3
72796: NEG
72797: PUSH
72798: LD_INT 1
72800: NEG
72801: PUSH
72802: EMPTY
72803: LIST
72804: LIST
72805: PUSH
72806: LD_INT 2
72808: NEG
72809: PUSH
72810: LD_INT 0
72812: PUSH
72813: EMPTY
72814: LIST
72815: LIST
72816: PUSH
72817: LD_INT 2
72819: NEG
72820: PUSH
72821: LD_INT 1
72823: PUSH
72824: EMPTY
72825: LIST
72826: LIST
72827: PUSH
72828: LD_INT 3
72830: NEG
72831: PUSH
72832: LD_INT 1
72834: PUSH
72835: EMPTY
72836: LIST
72837: LIST
72838: PUSH
72839: LD_INT 4
72841: NEG
72842: PUSH
72843: LD_INT 0
72845: PUSH
72846: EMPTY
72847: LIST
72848: LIST
72849: PUSH
72850: LD_INT 4
72852: NEG
72853: PUSH
72854: LD_INT 1
72856: NEG
72857: PUSH
72858: EMPTY
72859: LIST
72860: LIST
72861: PUSH
72862: LD_INT 4
72864: NEG
72865: PUSH
72866: LD_INT 2
72868: NEG
72869: PUSH
72870: EMPTY
72871: LIST
72872: LIST
72873: PUSH
72874: LD_INT 2
72876: NEG
72877: PUSH
72878: LD_INT 2
72880: PUSH
72881: EMPTY
72882: LIST
72883: LIST
72884: PUSH
72885: LD_INT 4
72887: NEG
72888: PUSH
72889: LD_INT 4
72891: NEG
72892: PUSH
72893: EMPTY
72894: LIST
72895: LIST
72896: PUSH
72897: LD_INT 4
72899: NEG
72900: PUSH
72901: LD_INT 5
72903: NEG
72904: PUSH
72905: EMPTY
72906: LIST
72907: LIST
72908: PUSH
72909: LD_INT 3
72911: NEG
72912: PUSH
72913: LD_INT 4
72915: NEG
72916: PUSH
72917: EMPTY
72918: LIST
72919: LIST
72920: PUSH
72921: LD_INT 3
72923: NEG
72924: PUSH
72925: LD_INT 3
72927: NEG
72928: PUSH
72929: EMPTY
72930: LIST
72931: LIST
72932: PUSH
72933: LD_INT 4
72935: NEG
72936: PUSH
72937: LD_INT 3
72939: NEG
72940: PUSH
72941: EMPTY
72942: LIST
72943: LIST
72944: PUSH
72945: LD_INT 5
72947: NEG
72948: PUSH
72949: LD_INT 4
72951: NEG
72952: PUSH
72953: EMPTY
72954: LIST
72955: LIST
72956: PUSH
72957: LD_INT 5
72959: NEG
72960: PUSH
72961: LD_INT 5
72963: NEG
72964: PUSH
72965: EMPTY
72966: LIST
72967: LIST
72968: PUSH
72969: LD_INT 3
72971: NEG
72972: PUSH
72973: LD_INT 5
72975: NEG
72976: PUSH
72977: EMPTY
72978: LIST
72979: LIST
72980: PUSH
72981: LD_INT 5
72983: NEG
72984: PUSH
72985: LD_INT 3
72987: NEG
72988: PUSH
72989: EMPTY
72990: LIST
72991: LIST
72992: PUSH
72993: EMPTY
72994: LIST
72995: LIST
72996: LIST
72997: LIST
72998: LIST
72999: LIST
73000: LIST
73001: LIST
73002: LIST
73003: LIST
73004: LIST
73005: LIST
73006: LIST
73007: LIST
73008: LIST
73009: LIST
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: LIST
73018: LIST
73019: LIST
73020: LIST
73021: LIST
73022: LIST
73023: LIST
73024: LIST
73025: LIST
73026: LIST
73027: LIST
73028: LIST
73029: LIST
73030: LIST
73031: LIST
73032: LIST
73033: LIST
73034: LIST
73035: LIST
73036: LIST
73037: LIST
73038: LIST
73039: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
73040: LD_ADDR_VAR 0 30
73044: PUSH
73045: LD_INT 4
73047: PUSH
73048: LD_INT 4
73050: PUSH
73051: EMPTY
73052: LIST
73053: LIST
73054: PUSH
73055: LD_INT 4
73057: PUSH
73058: LD_INT 3
73060: PUSH
73061: EMPTY
73062: LIST
73063: LIST
73064: PUSH
73065: LD_INT 5
73067: PUSH
73068: LD_INT 4
73070: PUSH
73071: EMPTY
73072: LIST
73073: LIST
73074: PUSH
73075: LD_INT 5
73077: PUSH
73078: LD_INT 5
73080: PUSH
73081: EMPTY
73082: LIST
73083: LIST
73084: PUSH
73085: LD_INT 4
73087: PUSH
73088: LD_INT 5
73090: PUSH
73091: EMPTY
73092: LIST
73093: LIST
73094: PUSH
73095: LD_INT 3
73097: PUSH
73098: LD_INT 4
73100: PUSH
73101: EMPTY
73102: LIST
73103: LIST
73104: PUSH
73105: LD_INT 3
73107: PUSH
73108: LD_INT 3
73110: PUSH
73111: EMPTY
73112: LIST
73113: LIST
73114: PUSH
73115: LD_INT 5
73117: PUSH
73118: LD_INT 3
73120: PUSH
73121: EMPTY
73122: LIST
73123: LIST
73124: PUSH
73125: LD_INT 3
73127: PUSH
73128: LD_INT 5
73130: PUSH
73131: EMPTY
73132: LIST
73133: LIST
73134: PUSH
73135: LD_INT 0
73137: PUSH
73138: LD_INT 3
73140: PUSH
73141: EMPTY
73142: LIST
73143: LIST
73144: PUSH
73145: LD_INT 0
73147: PUSH
73148: LD_INT 2
73150: PUSH
73151: EMPTY
73152: LIST
73153: LIST
73154: PUSH
73155: LD_INT 1
73157: PUSH
73158: LD_INT 3
73160: PUSH
73161: EMPTY
73162: LIST
73163: LIST
73164: PUSH
73165: LD_INT 1
73167: PUSH
73168: LD_INT 4
73170: PUSH
73171: EMPTY
73172: LIST
73173: LIST
73174: PUSH
73175: LD_INT 0
73177: PUSH
73178: LD_INT 4
73180: PUSH
73181: EMPTY
73182: LIST
73183: LIST
73184: PUSH
73185: LD_INT 1
73187: NEG
73188: PUSH
73189: LD_INT 3
73191: PUSH
73192: EMPTY
73193: LIST
73194: LIST
73195: PUSH
73196: LD_INT 1
73198: NEG
73199: PUSH
73200: LD_INT 2
73202: PUSH
73203: EMPTY
73204: LIST
73205: LIST
73206: PUSH
73207: LD_INT 2
73209: PUSH
73210: LD_INT 4
73212: PUSH
73213: EMPTY
73214: LIST
73215: LIST
73216: PUSH
73217: LD_INT 2
73219: NEG
73220: PUSH
73221: LD_INT 2
73223: PUSH
73224: EMPTY
73225: LIST
73226: LIST
73227: PUSH
73228: LD_INT 4
73230: NEG
73231: PUSH
73232: LD_INT 0
73234: PUSH
73235: EMPTY
73236: LIST
73237: LIST
73238: PUSH
73239: LD_INT 4
73241: NEG
73242: PUSH
73243: LD_INT 1
73245: NEG
73246: PUSH
73247: EMPTY
73248: LIST
73249: LIST
73250: PUSH
73251: LD_INT 3
73253: NEG
73254: PUSH
73255: LD_INT 0
73257: PUSH
73258: EMPTY
73259: LIST
73260: LIST
73261: PUSH
73262: LD_INT 3
73264: NEG
73265: PUSH
73266: LD_INT 1
73268: PUSH
73269: EMPTY
73270: LIST
73271: LIST
73272: PUSH
73273: LD_INT 4
73275: NEG
73276: PUSH
73277: LD_INT 1
73279: PUSH
73280: EMPTY
73281: LIST
73282: LIST
73283: PUSH
73284: LD_INT 5
73286: NEG
73287: PUSH
73288: LD_INT 0
73290: PUSH
73291: EMPTY
73292: LIST
73293: LIST
73294: PUSH
73295: LD_INT 5
73297: NEG
73298: PUSH
73299: LD_INT 1
73301: NEG
73302: PUSH
73303: EMPTY
73304: LIST
73305: LIST
73306: PUSH
73307: LD_INT 5
73309: NEG
73310: PUSH
73311: LD_INT 2
73313: NEG
73314: PUSH
73315: EMPTY
73316: LIST
73317: LIST
73318: PUSH
73319: LD_INT 3
73321: NEG
73322: PUSH
73323: LD_INT 2
73325: PUSH
73326: EMPTY
73327: LIST
73328: LIST
73329: PUSH
73330: LD_INT 3
73332: NEG
73333: PUSH
73334: LD_INT 3
73336: NEG
73337: PUSH
73338: EMPTY
73339: LIST
73340: LIST
73341: PUSH
73342: LD_INT 3
73344: NEG
73345: PUSH
73346: LD_INT 4
73348: NEG
73349: PUSH
73350: EMPTY
73351: LIST
73352: LIST
73353: PUSH
73354: LD_INT 2
73356: NEG
73357: PUSH
73358: LD_INT 3
73360: NEG
73361: PUSH
73362: EMPTY
73363: LIST
73364: LIST
73365: PUSH
73366: LD_INT 2
73368: NEG
73369: PUSH
73370: LD_INT 2
73372: NEG
73373: PUSH
73374: EMPTY
73375: LIST
73376: LIST
73377: PUSH
73378: LD_INT 3
73380: NEG
73381: PUSH
73382: LD_INT 2
73384: NEG
73385: PUSH
73386: EMPTY
73387: LIST
73388: LIST
73389: PUSH
73390: LD_INT 4
73392: NEG
73393: PUSH
73394: LD_INT 3
73396: NEG
73397: PUSH
73398: EMPTY
73399: LIST
73400: LIST
73401: PUSH
73402: LD_INT 4
73404: NEG
73405: PUSH
73406: LD_INT 4
73408: NEG
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: PUSH
73414: LD_INT 2
73416: NEG
73417: PUSH
73418: LD_INT 4
73420: NEG
73421: PUSH
73422: EMPTY
73423: LIST
73424: LIST
73425: PUSH
73426: LD_INT 4
73428: NEG
73429: PUSH
73430: LD_INT 2
73432: NEG
73433: PUSH
73434: EMPTY
73435: LIST
73436: LIST
73437: PUSH
73438: LD_INT 0
73440: PUSH
73441: LD_INT 4
73443: NEG
73444: PUSH
73445: EMPTY
73446: LIST
73447: LIST
73448: PUSH
73449: LD_INT 0
73451: PUSH
73452: LD_INT 5
73454: NEG
73455: PUSH
73456: EMPTY
73457: LIST
73458: LIST
73459: PUSH
73460: LD_INT 1
73462: PUSH
73463: LD_INT 4
73465: NEG
73466: PUSH
73467: EMPTY
73468: LIST
73469: LIST
73470: PUSH
73471: LD_INT 1
73473: PUSH
73474: LD_INT 3
73476: NEG
73477: PUSH
73478: EMPTY
73479: LIST
73480: LIST
73481: PUSH
73482: LD_INT 0
73484: PUSH
73485: LD_INT 3
73487: NEG
73488: PUSH
73489: EMPTY
73490: LIST
73491: LIST
73492: PUSH
73493: LD_INT 1
73495: NEG
73496: PUSH
73497: LD_INT 4
73499: NEG
73500: PUSH
73501: EMPTY
73502: LIST
73503: LIST
73504: PUSH
73505: LD_INT 1
73507: NEG
73508: PUSH
73509: LD_INT 5
73511: NEG
73512: PUSH
73513: EMPTY
73514: LIST
73515: LIST
73516: PUSH
73517: LD_INT 2
73519: PUSH
73520: LD_INT 3
73522: NEG
73523: PUSH
73524: EMPTY
73525: LIST
73526: LIST
73527: PUSH
73528: LD_INT 2
73530: NEG
73531: PUSH
73532: LD_INT 5
73534: NEG
73535: PUSH
73536: EMPTY
73537: LIST
73538: LIST
73539: PUSH
73540: EMPTY
73541: LIST
73542: LIST
73543: LIST
73544: LIST
73545: LIST
73546: LIST
73547: LIST
73548: LIST
73549: LIST
73550: LIST
73551: LIST
73552: LIST
73553: LIST
73554: LIST
73555: LIST
73556: LIST
73557: LIST
73558: LIST
73559: LIST
73560: LIST
73561: LIST
73562: LIST
73563: LIST
73564: LIST
73565: LIST
73566: LIST
73567: LIST
73568: LIST
73569: LIST
73570: LIST
73571: LIST
73572: LIST
73573: LIST
73574: LIST
73575: LIST
73576: LIST
73577: LIST
73578: LIST
73579: LIST
73580: LIST
73581: LIST
73582: LIST
73583: LIST
73584: LIST
73585: LIST
73586: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
73587: LD_ADDR_VAR 0 31
73591: PUSH
73592: LD_INT 0
73594: PUSH
73595: LD_INT 4
73597: PUSH
73598: EMPTY
73599: LIST
73600: LIST
73601: PUSH
73602: LD_INT 0
73604: PUSH
73605: LD_INT 3
73607: PUSH
73608: EMPTY
73609: LIST
73610: LIST
73611: PUSH
73612: LD_INT 1
73614: PUSH
73615: LD_INT 4
73617: PUSH
73618: EMPTY
73619: LIST
73620: LIST
73621: PUSH
73622: LD_INT 1
73624: PUSH
73625: LD_INT 5
73627: PUSH
73628: EMPTY
73629: LIST
73630: LIST
73631: PUSH
73632: LD_INT 0
73634: PUSH
73635: LD_INT 5
73637: PUSH
73638: EMPTY
73639: LIST
73640: LIST
73641: PUSH
73642: LD_INT 1
73644: NEG
73645: PUSH
73646: LD_INT 4
73648: PUSH
73649: EMPTY
73650: LIST
73651: LIST
73652: PUSH
73653: LD_INT 1
73655: NEG
73656: PUSH
73657: LD_INT 3
73659: PUSH
73660: EMPTY
73661: LIST
73662: LIST
73663: PUSH
73664: LD_INT 2
73666: PUSH
73667: LD_INT 5
73669: PUSH
73670: EMPTY
73671: LIST
73672: LIST
73673: PUSH
73674: LD_INT 2
73676: NEG
73677: PUSH
73678: LD_INT 3
73680: PUSH
73681: EMPTY
73682: LIST
73683: LIST
73684: PUSH
73685: LD_INT 3
73687: NEG
73688: PUSH
73689: LD_INT 0
73691: PUSH
73692: EMPTY
73693: LIST
73694: LIST
73695: PUSH
73696: LD_INT 3
73698: NEG
73699: PUSH
73700: LD_INT 1
73702: NEG
73703: PUSH
73704: EMPTY
73705: LIST
73706: LIST
73707: PUSH
73708: LD_INT 2
73710: NEG
73711: PUSH
73712: LD_INT 0
73714: PUSH
73715: EMPTY
73716: LIST
73717: LIST
73718: PUSH
73719: LD_INT 2
73721: NEG
73722: PUSH
73723: LD_INT 1
73725: PUSH
73726: EMPTY
73727: LIST
73728: LIST
73729: PUSH
73730: LD_INT 3
73732: NEG
73733: PUSH
73734: LD_INT 1
73736: PUSH
73737: EMPTY
73738: LIST
73739: LIST
73740: PUSH
73741: LD_INT 4
73743: NEG
73744: PUSH
73745: LD_INT 0
73747: PUSH
73748: EMPTY
73749: LIST
73750: LIST
73751: PUSH
73752: LD_INT 4
73754: NEG
73755: PUSH
73756: LD_INT 1
73758: NEG
73759: PUSH
73760: EMPTY
73761: LIST
73762: LIST
73763: PUSH
73764: LD_INT 4
73766: NEG
73767: PUSH
73768: LD_INT 2
73770: NEG
73771: PUSH
73772: EMPTY
73773: LIST
73774: LIST
73775: PUSH
73776: LD_INT 2
73778: NEG
73779: PUSH
73780: LD_INT 2
73782: PUSH
73783: EMPTY
73784: LIST
73785: LIST
73786: PUSH
73787: LD_INT 4
73789: NEG
73790: PUSH
73791: LD_INT 4
73793: NEG
73794: PUSH
73795: EMPTY
73796: LIST
73797: LIST
73798: PUSH
73799: LD_INT 4
73801: NEG
73802: PUSH
73803: LD_INT 5
73805: NEG
73806: PUSH
73807: EMPTY
73808: LIST
73809: LIST
73810: PUSH
73811: LD_INT 3
73813: NEG
73814: PUSH
73815: LD_INT 4
73817: NEG
73818: PUSH
73819: EMPTY
73820: LIST
73821: LIST
73822: PUSH
73823: LD_INT 3
73825: NEG
73826: PUSH
73827: LD_INT 3
73829: NEG
73830: PUSH
73831: EMPTY
73832: LIST
73833: LIST
73834: PUSH
73835: LD_INT 4
73837: NEG
73838: PUSH
73839: LD_INT 3
73841: NEG
73842: PUSH
73843: EMPTY
73844: LIST
73845: LIST
73846: PUSH
73847: LD_INT 5
73849: NEG
73850: PUSH
73851: LD_INT 4
73853: NEG
73854: PUSH
73855: EMPTY
73856: LIST
73857: LIST
73858: PUSH
73859: LD_INT 5
73861: NEG
73862: PUSH
73863: LD_INT 5
73865: NEG
73866: PUSH
73867: EMPTY
73868: LIST
73869: LIST
73870: PUSH
73871: LD_INT 3
73873: NEG
73874: PUSH
73875: LD_INT 5
73877: NEG
73878: PUSH
73879: EMPTY
73880: LIST
73881: LIST
73882: PUSH
73883: LD_INT 5
73885: NEG
73886: PUSH
73887: LD_INT 3
73889: NEG
73890: PUSH
73891: EMPTY
73892: LIST
73893: LIST
73894: PUSH
73895: LD_INT 0
73897: PUSH
73898: LD_INT 3
73900: NEG
73901: PUSH
73902: EMPTY
73903: LIST
73904: LIST
73905: PUSH
73906: LD_INT 0
73908: PUSH
73909: LD_INT 4
73911: NEG
73912: PUSH
73913: EMPTY
73914: LIST
73915: LIST
73916: PUSH
73917: LD_INT 1
73919: PUSH
73920: LD_INT 3
73922: NEG
73923: PUSH
73924: EMPTY
73925: LIST
73926: LIST
73927: PUSH
73928: LD_INT 1
73930: PUSH
73931: LD_INT 2
73933: NEG
73934: PUSH
73935: EMPTY
73936: LIST
73937: LIST
73938: PUSH
73939: LD_INT 0
73941: PUSH
73942: LD_INT 2
73944: NEG
73945: PUSH
73946: EMPTY
73947: LIST
73948: LIST
73949: PUSH
73950: LD_INT 1
73952: NEG
73953: PUSH
73954: LD_INT 3
73956: NEG
73957: PUSH
73958: EMPTY
73959: LIST
73960: LIST
73961: PUSH
73962: LD_INT 1
73964: NEG
73965: PUSH
73966: LD_INT 4
73968: NEG
73969: PUSH
73970: EMPTY
73971: LIST
73972: LIST
73973: PUSH
73974: LD_INT 2
73976: PUSH
73977: LD_INT 2
73979: NEG
73980: PUSH
73981: EMPTY
73982: LIST
73983: LIST
73984: PUSH
73985: LD_INT 2
73987: NEG
73988: PUSH
73989: LD_INT 4
73991: NEG
73992: PUSH
73993: EMPTY
73994: LIST
73995: LIST
73996: PUSH
73997: LD_INT 4
73999: PUSH
74000: LD_INT 0
74002: PUSH
74003: EMPTY
74004: LIST
74005: LIST
74006: PUSH
74007: LD_INT 4
74009: PUSH
74010: LD_INT 1
74012: NEG
74013: PUSH
74014: EMPTY
74015: LIST
74016: LIST
74017: PUSH
74018: LD_INT 5
74020: PUSH
74021: LD_INT 0
74023: PUSH
74024: EMPTY
74025: LIST
74026: LIST
74027: PUSH
74028: LD_INT 5
74030: PUSH
74031: LD_INT 1
74033: PUSH
74034: EMPTY
74035: LIST
74036: LIST
74037: PUSH
74038: LD_INT 4
74040: PUSH
74041: LD_INT 1
74043: PUSH
74044: EMPTY
74045: LIST
74046: LIST
74047: PUSH
74048: LD_INT 3
74050: PUSH
74051: LD_INT 0
74053: PUSH
74054: EMPTY
74055: LIST
74056: LIST
74057: PUSH
74058: LD_INT 3
74060: PUSH
74061: LD_INT 1
74063: NEG
74064: PUSH
74065: EMPTY
74066: LIST
74067: LIST
74068: PUSH
74069: LD_INT 3
74071: PUSH
74072: LD_INT 2
74074: NEG
74075: PUSH
74076: EMPTY
74077: LIST
74078: LIST
74079: PUSH
74080: LD_INT 5
74082: PUSH
74083: LD_INT 2
74085: PUSH
74086: EMPTY
74087: LIST
74088: LIST
74089: PUSH
74090: EMPTY
74091: LIST
74092: LIST
74093: LIST
74094: LIST
74095: LIST
74096: LIST
74097: LIST
74098: LIST
74099: LIST
74100: LIST
74101: LIST
74102: LIST
74103: LIST
74104: LIST
74105: LIST
74106: LIST
74107: LIST
74108: LIST
74109: LIST
74110: LIST
74111: LIST
74112: LIST
74113: LIST
74114: LIST
74115: LIST
74116: LIST
74117: LIST
74118: LIST
74119: LIST
74120: LIST
74121: LIST
74122: LIST
74123: LIST
74124: LIST
74125: LIST
74126: LIST
74127: LIST
74128: LIST
74129: LIST
74130: LIST
74131: LIST
74132: LIST
74133: LIST
74134: LIST
74135: LIST
74136: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
74137: LD_ADDR_VAR 0 32
74141: PUSH
74142: LD_INT 4
74144: NEG
74145: PUSH
74146: LD_INT 0
74148: PUSH
74149: EMPTY
74150: LIST
74151: LIST
74152: PUSH
74153: LD_INT 4
74155: NEG
74156: PUSH
74157: LD_INT 1
74159: NEG
74160: PUSH
74161: EMPTY
74162: LIST
74163: LIST
74164: PUSH
74165: LD_INT 3
74167: NEG
74168: PUSH
74169: LD_INT 0
74171: PUSH
74172: EMPTY
74173: LIST
74174: LIST
74175: PUSH
74176: LD_INT 3
74178: NEG
74179: PUSH
74180: LD_INT 1
74182: PUSH
74183: EMPTY
74184: LIST
74185: LIST
74186: PUSH
74187: LD_INT 4
74189: NEG
74190: PUSH
74191: LD_INT 1
74193: PUSH
74194: EMPTY
74195: LIST
74196: LIST
74197: PUSH
74198: LD_INT 5
74200: NEG
74201: PUSH
74202: LD_INT 0
74204: PUSH
74205: EMPTY
74206: LIST
74207: LIST
74208: PUSH
74209: LD_INT 5
74211: NEG
74212: PUSH
74213: LD_INT 1
74215: NEG
74216: PUSH
74217: EMPTY
74218: LIST
74219: LIST
74220: PUSH
74221: LD_INT 5
74223: NEG
74224: PUSH
74225: LD_INT 2
74227: NEG
74228: PUSH
74229: EMPTY
74230: LIST
74231: LIST
74232: PUSH
74233: LD_INT 3
74235: NEG
74236: PUSH
74237: LD_INT 2
74239: PUSH
74240: EMPTY
74241: LIST
74242: LIST
74243: PUSH
74244: LD_INT 3
74246: NEG
74247: PUSH
74248: LD_INT 3
74250: NEG
74251: PUSH
74252: EMPTY
74253: LIST
74254: LIST
74255: PUSH
74256: LD_INT 3
74258: NEG
74259: PUSH
74260: LD_INT 4
74262: NEG
74263: PUSH
74264: EMPTY
74265: LIST
74266: LIST
74267: PUSH
74268: LD_INT 2
74270: NEG
74271: PUSH
74272: LD_INT 3
74274: NEG
74275: PUSH
74276: EMPTY
74277: LIST
74278: LIST
74279: PUSH
74280: LD_INT 2
74282: NEG
74283: PUSH
74284: LD_INT 2
74286: NEG
74287: PUSH
74288: EMPTY
74289: LIST
74290: LIST
74291: PUSH
74292: LD_INT 3
74294: NEG
74295: PUSH
74296: LD_INT 2
74298: NEG
74299: PUSH
74300: EMPTY
74301: LIST
74302: LIST
74303: PUSH
74304: LD_INT 4
74306: NEG
74307: PUSH
74308: LD_INT 3
74310: NEG
74311: PUSH
74312: EMPTY
74313: LIST
74314: LIST
74315: PUSH
74316: LD_INT 4
74318: NEG
74319: PUSH
74320: LD_INT 4
74322: NEG
74323: PUSH
74324: EMPTY
74325: LIST
74326: LIST
74327: PUSH
74328: LD_INT 2
74330: NEG
74331: PUSH
74332: LD_INT 4
74334: NEG
74335: PUSH
74336: EMPTY
74337: LIST
74338: LIST
74339: PUSH
74340: LD_INT 4
74342: NEG
74343: PUSH
74344: LD_INT 2
74346: NEG
74347: PUSH
74348: EMPTY
74349: LIST
74350: LIST
74351: PUSH
74352: LD_INT 0
74354: PUSH
74355: LD_INT 4
74357: NEG
74358: PUSH
74359: EMPTY
74360: LIST
74361: LIST
74362: PUSH
74363: LD_INT 0
74365: PUSH
74366: LD_INT 5
74368: NEG
74369: PUSH
74370: EMPTY
74371: LIST
74372: LIST
74373: PUSH
74374: LD_INT 1
74376: PUSH
74377: LD_INT 4
74379: NEG
74380: PUSH
74381: EMPTY
74382: LIST
74383: LIST
74384: PUSH
74385: LD_INT 1
74387: PUSH
74388: LD_INT 3
74390: NEG
74391: PUSH
74392: EMPTY
74393: LIST
74394: LIST
74395: PUSH
74396: LD_INT 0
74398: PUSH
74399: LD_INT 3
74401: NEG
74402: PUSH
74403: EMPTY
74404: LIST
74405: LIST
74406: PUSH
74407: LD_INT 1
74409: NEG
74410: PUSH
74411: LD_INT 4
74413: NEG
74414: PUSH
74415: EMPTY
74416: LIST
74417: LIST
74418: PUSH
74419: LD_INT 1
74421: NEG
74422: PUSH
74423: LD_INT 5
74425: NEG
74426: PUSH
74427: EMPTY
74428: LIST
74429: LIST
74430: PUSH
74431: LD_INT 2
74433: PUSH
74434: LD_INT 3
74436: NEG
74437: PUSH
74438: EMPTY
74439: LIST
74440: LIST
74441: PUSH
74442: LD_INT 2
74444: NEG
74445: PUSH
74446: LD_INT 5
74448: NEG
74449: PUSH
74450: EMPTY
74451: LIST
74452: LIST
74453: PUSH
74454: LD_INT 3
74456: PUSH
74457: LD_INT 0
74459: PUSH
74460: EMPTY
74461: LIST
74462: LIST
74463: PUSH
74464: LD_INT 3
74466: PUSH
74467: LD_INT 1
74469: NEG
74470: PUSH
74471: EMPTY
74472: LIST
74473: LIST
74474: PUSH
74475: LD_INT 4
74477: PUSH
74478: LD_INT 0
74480: PUSH
74481: EMPTY
74482: LIST
74483: LIST
74484: PUSH
74485: LD_INT 4
74487: PUSH
74488: LD_INT 1
74490: PUSH
74491: EMPTY
74492: LIST
74493: LIST
74494: PUSH
74495: LD_INT 3
74497: PUSH
74498: LD_INT 1
74500: PUSH
74501: EMPTY
74502: LIST
74503: LIST
74504: PUSH
74505: LD_INT 2
74507: PUSH
74508: LD_INT 0
74510: PUSH
74511: EMPTY
74512: LIST
74513: LIST
74514: PUSH
74515: LD_INT 2
74517: PUSH
74518: LD_INT 1
74520: NEG
74521: PUSH
74522: EMPTY
74523: LIST
74524: LIST
74525: PUSH
74526: LD_INT 2
74528: PUSH
74529: LD_INT 2
74531: NEG
74532: PUSH
74533: EMPTY
74534: LIST
74535: LIST
74536: PUSH
74537: LD_INT 4
74539: PUSH
74540: LD_INT 2
74542: PUSH
74543: EMPTY
74544: LIST
74545: LIST
74546: PUSH
74547: LD_INT 4
74549: PUSH
74550: LD_INT 4
74552: PUSH
74553: EMPTY
74554: LIST
74555: LIST
74556: PUSH
74557: LD_INT 4
74559: PUSH
74560: LD_INT 3
74562: PUSH
74563: EMPTY
74564: LIST
74565: LIST
74566: PUSH
74567: LD_INT 5
74569: PUSH
74570: LD_INT 4
74572: PUSH
74573: EMPTY
74574: LIST
74575: LIST
74576: PUSH
74577: LD_INT 5
74579: PUSH
74580: LD_INT 5
74582: PUSH
74583: EMPTY
74584: LIST
74585: LIST
74586: PUSH
74587: LD_INT 4
74589: PUSH
74590: LD_INT 5
74592: PUSH
74593: EMPTY
74594: LIST
74595: LIST
74596: PUSH
74597: LD_INT 3
74599: PUSH
74600: LD_INT 4
74602: PUSH
74603: EMPTY
74604: LIST
74605: LIST
74606: PUSH
74607: LD_INT 3
74609: PUSH
74610: LD_INT 3
74612: PUSH
74613: EMPTY
74614: LIST
74615: LIST
74616: PUSH
74617: LD_INT 5
74619: PUSH
74620: LD_INT 3
74622: PUSH
74623: EMPTY
74624: LIST
74625: LIST
74626: PUSH
74627: LD_INT 3
74629: PUSH
74630: LD_INT 5
74632: PUSH
74633: EMPTY
74634: LIST
74635: LIST
74636: PUSH
74637: EMPTY
74638: LIST
74639: LIST
74640: LIST
74641: LIST
74642: LIST
74643: LIST
74644: LIST
74645: LIST
74646: LIST
74647: LIST
74648: LIST
74649: LIST
74650: LIST
74651: LIST
74652: LIST
74653: LIST
74654: LIST
74655: LIST
74656: LIST
74657: LIST
74658: LIST
74659: LIST
74660: LIST
74661: LIST
74662: LIST
74663: LIST
74664: LIST
74665: LIST
74666: LIST
74667: LIST
74668: LIST
74669: LIST
74670: LIST
74671: LIST
74672: LIST
74673: LIST
74674: LIST
74675: LIST
74676: LIST
74677: LIST
74678: LIST
74679: LIST
74680: LIST
74681: LIST
74682: LIST
74683: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
74684: LD_ADDR_VAR 0 33
74688: PUSH
74689: LD_INT 4
74691: NEG
74692: PUSH
74693: LD_INT 4
74695: NEG
74696: PUSH
74697: EMPTY
74698: LIST
74699: LIST
74700: PUSH
74701: LD_INT 4
74703: NEG
74704: PUSH
74705: LD_INT 5
74707: NEG
74708: PUSH
74709: EMPTY
74710: LIST
74711: LIST
74712: PUSH
74713: LD_INT 3
74715: NEG
74716: PUSH
74717: LD_INT 4
74719: NEG
74720: PUSH
74721: EMPTY
74722: LIST
74723: LIST
74724: PUSH
74725: LD_INT 3
74727: NEG
74728: PUSH
74729: LD_INT 3
74731: NEG
74732: PUSH
74733: EMPTY
74734: LIST
74735: LIST
74736: PUSH
74737: LD_INT 4
74739: NEG
74740: PUSH
74741: LD_INT 3
74743: NEG
74744: PUSH
74745: EMPTY
74746: LIST
74747: LIST
74748: PUSH
74749: LD_INT 5
74751: NEG
74752: PUSH
74753: LD_INT 4
74755: NEG
74756: PUSH
74757: EMPTY
74758: LIST
74759: LIST
74760: PUSH
74761: LD_INT 5
74763: NEG
74764: PUSH
74765: LD_INT 5
74767: NEG
74768: PUSH
74769: EMPTY
74770: LIST
74771: LIST
74772: PUSH
74773: LD_INT 3
74775: NEG
74776: PUSH
74777: LD_INT 5
74779: NEG
74780: PUSH
74781: EMPTY
74782: LIST
74783: LIST
74784: PUSH
74785: LD_INT 5
74787: NEG
74788: PUSH
74789: LD_INT 3
74791: NEG
74792: PUSH
74793: EMPTY
74794: LIST
74795: LIST
74796: PUSH
74797: LD_INT 0
74799: PUSH
74800: LD_INT 3
74802: NEG
74803: PUSH
74804: EMPTY
74805: LIST
74806: LIST
74807: PUSH
74808: LD_INT 0
74810: PUSH
74811: LD_INT 4
74813: NEG
74814: PUSH
74815: EMPTY
74816: LIST
74817: LIST
74818: PUSH
74819: LD_INT 1
74821: PUSH
74822: LD_INT 3
74824: NEG
74825: PUSH
74826: EMPTY
74827: LIST
74828: LIST
74829: PUSH
74830: LD_INT 1
74832: PUSH
74833: LD_INT 2
74835: NEG
74836: PUSH
74837: EMPTY
74838: LIST
74839: LIST
74840: PUSH
74841: LD_INT 0
74843: PUSH
74844: LD_INT 2
74846: NEG
74847: PUSH
74848: EMPTY
74849: LIST
74850: LIST
74851: PUSH
74852: LD_INT 1
74854: NEG
74855: PUSH
74856: LD_INT 3
74858: NEG
74859: PUSH
74860: EMPTY
74861: LIST
74862: LIST
74863: PUSH
74864: LD_INT 1
74866: NEG
74867: PUSH
74868: LD_INT 4
74870: NEG
74871: PUSH
74872: EMPTY
74873: LIST
74874: LIST
74875: PUSH
74876: LD_INT 2
74878: PUSH
74879: LD_INT 2
74881: NEG
74882: PUSH
74883: EMPTY
74884: LIST
74885: LIST
74886: PUSH
74887: LD_INT 2
74889: NEG
74890: PUSH
74891: LD_INT 4
74893: NEG
74894: PUSH
74895: EMPTY
74896: LIST
74897: LIST
74898: PUSH
74899: LD_INT 4
74901: PUSH
74902: LD_INT 0
74904: PUSH
74905: EMPTY
74906: LIST
74907: LIST
74908: PUSH
74909: LD_INT 4
74911: PUSH
74912: LD_INT 1
74914: NEG
74915: PUSH
74916: EMPTY
74917: LIST
74918: LIST
74919: PUSH
74920: LD_INT 5
74922: PUSH
74923: LD_INT 0
74925: PUSH
74926: EMPTY
74927: LIST
74928: LIST
74929: PUSH
74930: LD_INT 5
74932: PUSH
74933: LD_INT 1
74935: PUSH
74936: EMPTY
74937: LIST
74938: LIST
74939: PUSH
74940: LD_INT 4
74942: PUSH
74943: LD_INT 1
74945: PUSH
74946: EMPTY
74947: LIST
74948: LIST
74949: PUSH
74950: LD_INT 3
74952: PUSH
74953: LD_INT 0
74955: PUSH
74956: EMPTY
74957: LIST
74958: LIST
74959: PUSH
74960: LD_INT 3
74962: PUSH
74963: LD_INT 1
74965: NEG
74966: PUSH
74967: EMPTY
74968: LIST
74969: LIST
74970: PUSH
74971: LD_INT 3
74973: PUSH
74974: LD_INT 2
74976: NEG
74977: PUSH
74978: EMPTY
74979: LIST
74980: LIST
74981: PUSH
74982: LD_INT 5
74984: PUSH
74985: LD_INT 2
74987: PUSH
74988: EMPTY
74989: LIST
74990: LIST
74991: PUSH
74992: LD_INT 3
74994: PUSH
74995: LD_INT 3
74997: PUSH
74998: EMPTY
74999: LIST
75000: LIST
75001: PUSH
75002: LD_INT 3
75004: PUSH
75005: LD_INT 2
75007: PUSH
75008: EMPTY
75009: LIST
75010: LIST
75011: PUSH
75012: LD_INT 4
75014: PUSH
75015: LD_INT 3
75017: PUSH
75018: EMPTY
75019: LIST
75020: LIST
75021: PUSH
75022: LD_INT 4
75024: PUSH
75025: LD_INT 4
75027: PUSH
75028: EMPTY
75029: LIST
75030: LIST
75031: PUSH
75032: LD_INT 3
75034: PUSH
75035: LD_INT 4
75037: PUSH
75038: EMPTY
75039: LIST
75040: LIST
75041: PUSH
75042: LD_INT 2
75044: PUSH
75045: LD_INT 3
75047: PUSH
75048: EMPTY
75049: LIST
75050: LIST
75051: PUSH
75052: LD_INT 2
75054: PUSH
75055: LD_INT 2
75057: PUSH
75058: EMPTY
75059: LIST
75060: LIST
75061: PUSH
75062: LD_INT 4
75064: PUSH
75065: LD_INT 2
75067: PUSH
75068: EMPTY
75069: LIST
75070: LIST
75071: PUSH
75072: LD_INT 2
75074: PUSH
75075: LD_INT 4
75077: PUSH
75078: EMPTY
75079: LIST
75080: LIST
75081: PUSH
75082: LD_INT 0
75084: PUSH
75085: LD_INT 4
75087: PUSH
75088: EMPTY
75089: LIST
75090: LIST
75091: PUSH
75092: LD_INT 0
75094: PUSH
75095: LD_INT 3
75097: PUSH
75098: EMPTY
75099: LIST
75100: LIST
75101: PUSH
75102: LD_INT 1
75104: PUSH
75105: LD_INT 4
75107: PUSH
75108: EMPTY
75109: LIST
75110: LIST
75111: PUSH
75112: LD_INT 1
75114: PUSH
75115: LD_INT 5
75117: PUSH
75118: EMPTY
75119: LIST
75120: LIST
75121: PUSH
75122: LD_INT 0
75124: PUSH
75125: LD_INT 5
75127: PUSH
75128: EMPTY
75129: LIST
75130: LIST
75131: PUSH
75132: LD_INT 1
75134: NEG
75135: PUSH
75136: LD_INT 4
75138: PUSH
75139: EMPTY
75140: LIST
75141: LIST
75142: PUSH
75143: LD_INT 1
75145: NEG
75146: PUSH
75147: LD_INT 3
75149: PUSH
75150: EMPTY
75151: LIST
75152: LIST
75153: PUSH
75154: LD_INT 2
75156: PUSH
75157: LD_INT 5
75159: PUSH
75160: EMPTY
75161: LIST
75162: LIST
75163: PUSH
75164: LD_INT 2
75166: NEG
75167: PUSH
75168: LD_INT 3
75170: PUSH
75171: EMPTY
75172: LIST
75173: LIST
75174: PUSH
75175: EMPTY
75176: LIST
75177: LIST
75178: LIST
75179: LIST
75180: LIST
75181: LIST
75182: LIST
75183: LIST
75184: LIST
75185: LIST
75186: LIST
75187: LIST
75188: LIST
75189: LIST
75190: LIST
75191: LIST
75192: LIST
75193: LIST
75194: LIST
75195: LIST
75196: LIST
75197: LIST
75198: LIST
75199: LIST
75200: LIST
75201: LIST
75202: LIST
75203: LIST
75204: LIST
75205: LIST
75206: LIST
75207: LIST
75208: LIST
75209: LIST
75210: LIST
75211: LIST
75212: LIST
75213: LIST
75214: LIST
75215: LIST
75216: LIST
75217: LIST
75218: LIST
75219: LIST
75220: LIST
75221: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
75222: LD_ADDR_VAR 0 34
75226: PUSH
75227: LD_INT 0
75229: PUSH
75230: LD_INT 4
75232: NEG
75233: PUSH
75234: EMPTY
75235: LIST
75236: LIST
75237: PUSH
75238: LD_INT 0
75240: PUSH
75241: LD_INT 5
75243: NEG
75244: PUSH
75245: EMPTY
75246: LIST
75247: LIST
75248: PUSH
75249: LD_INT 1
75251: PUSH
75252: LD_INT 4
75254: NEG
75255: PUSH
75256: EMPTY
75257: LIST
75258: LIST
75259: PUSH
75260: LD_INT 1
75262: PUSH
75263: LD_INT 3
75265: NEG
75266: PUSH
75267: EMPTY
75268: LIST
75269: LIST
75270: PUSH
75271: LD_INT 0
75273: PUSH
75274: LD_INT 3
75276: NEG
75277: PUSH
75278: EMPTY
75279: LIST
75280: LIST
75281: PUSH
75282: LD_INT 1
75284: NEG
75285: PUSH
75286: LD_INT 4
75288: NEG
75289: PUSH
75290: EMPTY
75291: LIST
75292: LIST
75293: PUSH
75294: LD_INT 1
75296: NEG
75297: PUSH
75298: LD_INT 5
75300: NEG
75301: PUSH
75302: EMPTY
75303: LIST
75304: LIST
75305: PUSH
75306: LD_INT 2
75308: PUSH
75309: LD_INT 3
75311: NEG
75312: PUSH
75313: EMPTY
75314: LIST
75315: LIST
75316: PUSH
75317: LD_INT 2
75319: NEG
75320: PUSH
75321: LD_INT 5
75323: NEG
75324: PUSH
75325: EMPTY
75326: LIST
75327: LIST
75328: PUSH
75329: LD_INT 3
75331: PUSH
75332: LD_INT 0
75334: PUSH
75335: EMPTY
75336: LIST
75337: LIST
75338: PUSH
75339: LD_INT 3
75341: PUSH
75342: LD_INT 1
75344: NEG
75345: PUSH
75346: EMPTY
75347: LIST
75348: LIST
75349: PUSH
75350: LD_INT 4
75352: PUSH
75353: LD_INT 0
75355: PUSH
75356: EMPTY
75357: LIST
75358: LIST
75359: PUSH
75360: LD_INT 4
75362: PUSH
75363: LD_INT 1
75365: PUSH
75366: EMPTY
75367: LIST
75368: LIST
75369: PUSH
75370: LD_INT 3
75372: PUSH
75373: LD_INT 1
75375: PUSH
75376: EMPTY
75377: LIST
75378: LIST
75379: PUSH
75380: LD_INT 2
75382: PUSH
75383: LD_INT 0
75385: PUSH
75386: EMPTY
75387: LIST
75388: LIST
75389: PUSH
75390: LD_INT 2
75392: PUSH
75393: LD_INT 1
75395: NEG
75396: PUSH
75397: EMPTY
75398: LIST
75399: LIST
75400: PUSH
75401: LD_INT 2
75403: PUSH
75404: LD_INT 2
75406: NEG
75407: PUSH
75408: EMPTY
75409: LIST
75410: LIST
75411: PUSH
75412: LD_INT 4
75414: PUSH
75415: LD_INT 2
75417: PUSH
75418: EMPTY
75419: LIST
75420: LIST
75421: PUSH
75422: LD_INT 4
75424: PUSH
75425: LD_INT 4
75427: PUSH
75428: EMPTY
75429: LIST
75430: LIST
75431: PUSH
75432: LD_INT 4
75434: PUSH
75435: LD_INT 3
75437: PUSH
75438: EMPTY
75439: LIST
75440: LIST
75441: PUSH
75442: LD_INT 5
75444: PUSH
75445: LD_INT 4
75447: PUSH
75448: EMPTY
75449: LIST
75450: LIST
75451: PUSH
75452: LD_INT 5
75454: PUSH
75455: LD_INT 5
75457: PUSH
75458: EMPTY
75459: LIST
75460: LIST
75461: PUSH
75462: LD_INT 4
75464: PUSH
75465: LD_INT 5
75467: PUSH
75468: EMPTY
75469: LIST
75470: LIST
75471: PUSH
75472: LD_INT 3
75474: PUSH
75475: LD_INT 4
75477: PUSH
75478: EMPTY
75479: LIST
75480: LIST
75481: PUSH
75482: LD_INT 3
75484: PUSH
75485: LD_INT 3
75487: PUSH
75488: EMPTY
75489: LIST
75490: LIST
75491: PUSH
75492: LD_INT 5
75494: PUSH
75495: LD_INT 3
75497: PUSH
75498: EMPTY
75499: LIST
75500: LIST
75501: PUSH
75502: LD_INT 3
75504: PUSH
75505: LD_INT 5
75507: PUSH
75508: EMPTY
75509: LIST
75510: LIST
75511: PUSH
75512: LD_INT 0
75514: PUSH
75515: LD_INT 3
75517: PUSH
75518: EMPTY
75519: LIST
75520: LIST
75521: PUSH
75522: LD_INT 0
75524: PUSH
75525: LD_INT 2
75527: PUSH
75528: EMPTY
75529: LIST
75530: LIST
75531: PUSH
75532: LD_INT 1
75534: PUSH
75535: LD_INT 3
75537: PUSH
75538: EMPTY
75539: LIST
75540: LIST
75541: PUSH
75542: LD_INT 1
75544: PUSH
75545: LD_INT 4
75547: PUSH
75548: EMPTY
75549: LIST
75550: LIST
75551: PUSH
75552: LD_INT 0
75554: PUSH
75555: LD_INT 4
75557: PUSH
75558: EMPTY
75559: LIST
75560: LIST
75561: PUSH
75562: LD_INT 1
75564: NEG
75565: PUSH
75566: LD_INT 3
75568: PUSH
75569: EMPTY
75570: LIST
75571: LIST
75572: PUSH
75573: LD_INT 1
75575: NEG
75576: PUSH
75577: LD_INT 2
75579: PUSH
75580: EMPTY
75581: LIST
75582: LIST
75583: PUSH
75584: LD_INT 2
75586: PUSH
75587: LD_INT 4
75589: PUSH
75590: EMPTY
75591: LIST
75592: LIST
75593: PUSH
75594: LD_INT 2
75596: NEG
75597: PUSH
75598: LD_INT 2
75600: PUSH
75601: EMPTY
75602: LIST
75603: LIST
75604: PUSH
75605: LD_INT 4
75607: NEG
75608: PUSH
75609: LD_INT 0
75611: PUSH
75612: EMPTY
75613: LIST
75614: LIST
75615: PUSH
75616: LD_INT 4
75618: NEG
75619: PUSH
75620: LD_INT 1
75622: NEG
75623: PUSH
75624: EMPTY
75625: LIST
75626: LIST
75627: PUSH
75628: LD_INT 3
75630: NEG
75631: PUSH
75632: LD_INT 0
75634: PUSH
75635: EMPTY
75636: LIST
75637: LIST
75638: PUSH
75639: LD_INT 3
75641: NEG
75642: PUSH
75643: LD_INT 1
75645: PUSH
75646: EMPTY
75647: LIST
75648: LIST
75649: PUSH
75650: LD_INT 4
75652: NEG
75653: PUSH
75654: LD_INT 1
75656: PUSH
75657: EMPTY
75658: LIST
75659: LIST
75660: PUSH
75661: LD_INT 5
75663: NEG
75664: PUSH
75665: LD_INT 0
75667: PUSH
75668: EMPTY
75669: LIST
75670: LIST
75671: PUSH
75672: LD_INT 5
75674: NEG
75675: PUSH
75676: LD_INT 1
75678: NEG
75679: PUSH
75680: EMPTY
75681: LIST
75682: LIST
75683: PUSH
75684: LD_INT 5
75686: NEG
75687: PUSH
75688: LD_INT 2
75690: NEG
75691: PUSH
75692: EMPTY
75693: LIST
75694: LIST
75695: PUSH
75696: LD_INT 3
75698: NEG
75699: PUSH
75700: LD_INT 2
75702: PUSH
75703: EMPTY
75704: LIST
75705: LIST
75706: PUSH
75707: EMPTY
75708: LIST
75709: LIST
75710: LIST
75711: LIST
75712: LIST
75713: LIST
75714: LIST
75715: LIST
75716: LIST
75717: LIST
75718: LIST
75719: LIST
75720: LIST
75721: LIST
75722: LIST
75723: LIST
75724: LIST
75725: LIST
75726: LIST
75727: LIST
75728: LIST
75729: LIST
75730: LIST
75731: LIST
75732: LIST
75733: LIST
75734: LIST
75735: LIST
75736: LIST
75737: LIST
75738: LIST
75739: LIST
75740: LIST
75741: LIST
75742: LIST
75743: LIST
75744: LIST
75745: LIST
75746: LIST
75747: LIST
75748: LIST
75749: LIST
75750: LIST
75751: LIST
75752: LIST
75753: ST_TO_ADDR
// end ; end ;
75754: GO 75757
75756: POP
// case btype of b_depot , b_warehouse :
75757: LD_VAR 0 1
75761: PUSH
75762: LD_INT 0
75764: DOUBLE
75765: EQUAL
75766: IFTRUE 75776
75768: LD_INT 1
75770: DOUBLE
75771: EQUAL
75772: IFTRUE 75776
75774: GO 75977
75776: POP
// case nation of nation_american :
75777: LD_VAR 0 5
75781: PUSH
75782: LD_INT 1
75784: DOUBLE
75785: EQUAL
75786: IFTRUE 75790
75788: GO 75846
75790: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
75791: LD_ADDR_VAR 0 9
75795: PUSH
75796: LD_VAR 0 11
75800: PUSH
75801: LD_VAR 0 12
75805: PUSH
75806: LD_VAR 0 13
75810: PUSH
75811: LD_VAR 0 14
75815: PUSH
75816: LD_VAR 0 15
75820: PUSH
75821: LD_VAR 0 16
75825: PUSH
75826: EMPTY
75827: LIST
75828: LIST
75829: LIST
75830: LIST
75831: LIST
75832: LIST
75833: PUSH
75834: LD_VAR 0 4
75838: PUSH
75839: LD_INT 1
75841: PLUS
75842: ARRAY
75843: ST_TO_ADDR
75844: GO 75975
75846: LD_INT 2
75848: DOUBLE
75849: EQUAL
75850: IFTRUE 75854
75852: GO 75910
75854: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
75855: LD_ADDR_VAR 0 9
75859: PUSH
75860: LD_VAR 0 17
75864: PUSH
75865: LD_VAR 0 18
75869: PUSH
75870: LD_VAR 0 19
75874: PUSH
75875: LD_VAR 0 20
75879: PUSH
75880: LD_VAR 0 21
75884: PUSH
75885: LD_VAR 0 22
75889: PUSH
75890: EMPTY
75891: LIST
75892: LIST
75893: LIST
75894: LIST
75895: LIST
75896: LIST
75897: PUSH
75898: LD_VAR 0 4
75902: PUSH
75903: LD_INT 1
75905: PLUS
75906: ARRAY
75907: ST_TO_ADDR
75908: GO 75975
75910: LD_INT 3
75912: DOUBLE
75913: EQUAL
75914: IFTRUE 75918
75916: GO 75974
75918: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
75919: LD_ADDR_VAR 0 9
75923: PUSH
75924: LD_VAR 0 23
75928: PUSH
75929: LD_VAR 0 24
75933: PUSH
75934: LD_VAR 0 25
75938: PUSH
75939: LD_VAR 0 26
75943: PUSH
75944: LD_VAR 0 27
75948: PUSH
75949: LD_VAR 0 28
75953: PUSH
75954: EMPTY
75955: LIST
75956: LIST
75957: LIST
75958: LIST
75959: LIST
75960: LIST
75961: PUSH
75962: LD_VAR 0 4
75966: PUSH
75967: LD_INT 1
75969: PLUS
75970: ARRAY
75971: ST_TO_ADDR
75972: GO 75975
75974: POP
75975: GO 76530
75977: LD_INT 2
75979: DOUBLE
75980: EQUAL
75981: IFTRUE 75991
75983: LD_INT 3
75985: DOUBLE
75986: EQUAL
75987: IFTRUE 75991
75989: GO 76047
75991: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
75992: LD_ADDR_VAR 0 9
75996: PUSH
75997: LD_VAR 0 29
76001: PUSH
76002: LD_VAR 0 30
76006: PUSH
76007: LD_VAR 0 31
76011: PUSH
76012: LD_VAR 0 32
76016: PUSH
76017: LD_VAR 0 33
76021: PUSH
76022: LD_VAR 0 34
76026: PUSH
76027: EMPTY
76028: LIST
76029: LIST
76030: LIST
76031: LIST
76032: LIST
76033: LIST
76034: PUSH
76035: LD_VAR 0 4
76039: PUSH
76040: LD_INT 1
76042: PLUS
76043: ARRAY
76044: ST_TO_ADDR
76045: GO 76530
76047: LD_INT 16
76049: DOUBLE
76050: EQUAL
76051: IFTRUE 76109
76053: LD_INT 17
76055: DOUBLE
76056: EQUAL
76057: IFTRUE 76109
76059: LD_INT 18
76061: DOUBLE
76062: EQUAL
76063: IFTRUE 76109
76065: LD_INT 19
76067: DOUBLE
76068: EQUAL
76069: IFTRUE 76109
76071: LD_INT 22
76073: DOUBLE
76074: EQUAL
76075: IFTRUE 76109
76077: LD_INT 20
76079: DOUBLE
76080: EQUAL
76081: IFTRUE 76109
76083: LD_INT 21
76085: DOUBLE
76086: EQUAL
76087: IFTRUE 76109
76089: LD_INT 23
76091: DOUBLE
76092: EQUAL
76093: IFTRUE 76109
76095: LD_INT 24
76097: DOUBLE
76098: EQUAL
76099: IFTRUE 76109
76101: LD_INT 25
76103: DOUBLE
76104: EQUAL
76105: IFTRUE 76109
76107: GO 76165
76109: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
76110: LD_ADDR_VAR 0 9
76114: PUSH
76115: LD_VAR 0 35
76119: PUSH
76120: LD_VAR 0 36
76124: PUSH
76125: LD_VAR 0 37
76129: PUSH
76130: LD_VAR 0 38
76134: PUSH
76135: LD_VAR 0 39
76139: PUSH
76140: LD_VAR 0 40
76144: PUSH
76145: EMPTY
76146: LIST
76147: LIST
76148: LIST
76149: LIST
76150: LIST
76151: LIST
76152: PUSH
76153: LD_VAR 0 4
76157: PUSH
76158: LD_INT 1
76160: PLUS
76161: ARRAY
76162: ST_TO_ADDR
76163: GO 76530
76165: LD_INT 6
76167: DOUBLE
76168: EQUAL
76169: IFTRUE 76221
76171: LD_INT 7
76173: DOUBLE
76174: EQUAL
76175: IFTRUE 76221
76177: LD_INT 8
76179: DOUBLE
76180: EQUAL
76181: IFTRUE 76221
76183: LD_INT 13
76185: DOUBLE
76186: EQUAL
76187: IFTRUE 76221
76189: LD_INT 12
76191: DOUBLE
76192: EQUAL
76193: IFTRUE 76221
76195: LD_INT 15
76197: DOUBLE
76198: EQUAL
76199: IFTRUE 76221
76201: LD_INT 11
76203: DOUBLE
76204: EQUAL
76205: IFTRUE 76221
76207: LD_INT 14
76209: DOUBLE
76210: EQUAL
76211: IFTRUE 76221
76213: LD_INT 10
76215: DOUBLE
76216: EQUAL
76217: IFTRUE 76221
76219: GO 76277
76221: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
76222: LD_ADDR_VAR 0 9
76226: PUSH
76227: LD_VAR 0 41
76231: PUSH
76232: LD_VAR 0 42
76236: PUSH
76237: LD_VAR 0 43
76241: PUSH
76242: LD_VAR 0 44
76246: PUSH
76247: LD_VAR 0 45
76251: PUSH
76252: LD_VAR 0 46
76256: PUSH
76257: EMPTY
76258: LIST
76259: LIST
76260: LIST
76261: LIST
76262: LIST
76263: LIST
76264: PUSH
76265: LD_VAR 0 4
76269: PUSH
76270: LD_INT 1
76272: PLUS
76273: ARRAY
76274: ST_TO_ADDR
76275: GO 76530
76277: LD_INT 36
76279: DOUBLE
76280: EQUAL
76281: IFTRUE 76285
76283: GO 76341
76285: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
76286: LD_ADDR_VAR 0 9
76290: PUSH
76291: LD_VAR 0 47
76295: PUSH
76296: LD_VAR 0 48
76300: PUSH
76301: LD_VAR 0 49
76305: PUSH
76306: LD_VAR 0 50
76310: PUSH
76311: LD_VAR 0 51
76315: PUSH
76316: LD_VAR 0 52
76320: PUSH
76321: EMPTY
76322: LIST
76323: LIST
76324: LIST
76325: LIST
76326: LIST
76327: LIST
76328: PUSH
76329: LD_VAR 0 4
76333: PUSH
76334: LD_INT 1
76336: PLUS
76337: ARRAY
76338: ST_TO_ADDR
76339: GO 76530
76341: LD_INT 4
76343: DOUBLE
76344: EQUAL
76345: IFTRUE 76367
76347: LD_INT 5
76349: DOUBLE
76350: EQUAL
76351: IFTRUE 76367
76353: LD_INT 34
76355: DOUBLE
76356: EQUAL
76357: IFTRUE 76367
76359: LD_INT 37
76361: DOUBLE
76362: EQUAL
76363: IFTRUE 76367
76365: GO 76423
76367: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
76368: LD_ADDR_VAR 0 9
76372: PUSH
76373: LD_VAR 0 53
76377: PUSH
76378: LD_VAR 0 54
76382: PUSH
76383: LD_VAR 0 55
76387: PUSH
76388: LD_VAR 0 56
76392: PUSH
76393: LD_VAR 0 57
76397: PUSH
76398: LD_VAR 0 58
76402: PUSH
76403: EMPTY
76404: LIST
76405: LIST
76406: LIST
76407: LIST
76408: LIST
76409: LIST
76410: PUSH
76411: LD_VAR 0 4
76415: PUSH
76416: LD_INT 1
76418: PLUS
76419: ARRAY
76420: ST_TO_ADDR
76421: GO 76530
76423: LD_INT 31
76425: DOUBLE
76426: EQUAL
76427: IFTRUE 76473
76429: LD_INT 32
76431: DOUBLE
76432: EQUAL
76433: IFTRUE 76473
76435: LD_INT 33
76437: DOUBLE
76438: EQUAL
76439: IFTRUE 76473
76441: LD_INT 27
76443: DOUBLE
76444: EQUAL
76445: IFTRUE 76473
76447: LD_INT 26
76449: DOUBLE
76450: EQUAL
76451: IFTRUE 76473
76453: LD_INT 28
76455: DOUBLE
76456: EQUAL
76457: IFTRUE 76473
76459: LD_INT 29
76461: DOUBLE
76462: EQUAL
76463: IFTRUE 76473
76465: LD_INT 30
76467: DOUBLE
76468: EQUAL
76469: IFTRUE 76473
76471: GO 76529
76473: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
76474: LD_ADDR_VAR 0 9
76478: PUSH
76479: LD_VAR 0 59
76483: PUSH
76484: LD_VAR 0 60
76488: PUSH
76489: LD_VAR 0 61
76493: PUSH
76494: LD_VAR 0 62
76498: PUSH
76499: LD_VAR 0 63
76503: PUSH
76504: LD_VAR 0 64
76508: PUSH
76509: EMPTY
76510: LIST
76511: LIST
76512: LIST
76513: LIST
76514: LIST
76515: LIST
76516: PUSH
76517: LD_VAR 0 4
76521: PUSH
76522: LD_INT 1
76524: PLUS
76525: ARRAY
76526: ST_TO_ADDR
76527: GO 76530
76529: POP
// temp_list2 = [ ] ;
76530: LD_ADDR_VAR 0 10
76534: PUSH
76535: EMPTY
76536: ST_TO_ADDR
// for i in temp_list do
76537: LD_ADDR_VAR 0 8
76541: PUSH
76542: LD_VAR 0 9
76546: PUSH
76547: FOR_IN
76548: IFFALSE 76600
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
76550: LD_ADDR_VAR 0 10
76554: PUSH
76555: LD_VAR 0 10
76559: PUSH
76560: LD_VAR 0 8
76564: PUSH
76565: LD_INT 1
76567: ARRAY
76568: PUSH
76569: LD_VAR 0 2
76573: PLUS
76574: PUSH
76575: LD_VAR 0 8
76579: PUSH
76580: LD_INT 2
76582: ARRAY
76583: PUSH
76584: LD_VAR 0 3
76588: PLUS
76589: PUSH
76590: EMPTY
76591: LIST
76592: LIST
76593: PUSH
76594: EMPTY
76595: LIST
76596: ADD
76597: ST_TO_ADDR
76598: GO 76547
76600: POP
76601: POP
// result = temp_list2 ;
76602: LD_ADDR_VAR 0 7
76606: PUSH
76607: LD_VAR 0 10
76611: ST_TO_ADDR
// end ;
76612: LD_VAR 0 7
76616: RET
// export function EnemyInRange ( unit , dist ) ; begin
76617: LD_INT 0
76619: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
76620: LD_ADDR_VAR 0 3
76624: PUSH
76625: LD_VAR 0 1
76629: PPUSH
76630: CALL_OW 255
76634: PPUSH
76635: LD_VAR 0 1
76639: PPUSH
76640: CALL_OW 250
76644: PPUSH
76645: LD_VAR 0 1
76649: PPUSH
76650: CALL_OW 251
76654: PPUSH
76655: LD_VAR 0 2
76659: PPUSH
76660: CALL 49990 0 4
76664: PUSH
76665: LD_INT 4
76667: ARRAY
76668: ST_TO_ADDR
// end ;
76669: LD_VAR 0 3
76673: RET
// export function PlayerSeeMe ( unit ) ; begin
76674: LD_INT 0
76676: PPUSH
// result := See ( your_side , unit ) ;
76677: LD_ADDR_VAR 0 2
76681: PUSH
76682: LD_OWVAR 2
76686: PPUSH
76687: LD_VAR 0 1
76691: PPUSH
76692: CALL_OW 292
76696: ST_TO_ADDR
// end ;
76697: LD_VAR 0 2
76701: RET
// export function ReverseDir ( unit ) ; begin
76702: LD_INT 0
76704: PPUSH
// if not unit then
76705: LD_VAR 0 1
76709: NOT
76710: IFFALSE 76714
// exit ;
76712: GO 76737
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
76714: LD_ADDR_VAR 0 2
76718: PUSH
76719: LD_VAR 0 1
76723: PPUSH
76724: CALL_OW 254
76728: PUSH
76729: LD_INT 3
76731: PLUS
76732: PUSH
76733: LD_INT 6
76735: MOD
76736: ST_TO_ADDR
// end ;
76737: LD_VAR 0 2
76741: RET
// export function ReverseArray ( array ) ; var i ; begin
76742: LD_INT 0
76744: PPUSH
76745: PPUSH
// if not array then
76746: LD_VAR 0 1
76750: NOT
76751: IFFALSE 76755
// exit ;
76753: GO 76810
// result := [ ] ;
76755: LD_ADDR_VAR 0 2
76759: PUSH
76760: EMPTY
76761: ST_TO_ADDR
// for i := array downto 1 do
76762: LD_ADDR_VAR 0 3
76766: PUSH
76767: DOUBLE
76768: LD_VAR 0 1
76772: INC
76773: ST_TO_ADDR
76774: LD_INT 1
76776: PUSH
76777: FOR_DOWNTO
76778: IFFALSE 76808
// result := Join ( result , array [ i ] ) ;
76780: LD_ADDR_VAR 0 2
76784: PUSH
76785: LD_VAR 0 2
76789: PPUSH
76790: LD_VAR 0 1
76794: PUSH
76795: LD_VAR 0 3
76799: ARRAY
76800: PPUSH
76801: CALL 81453 0 2
76805: ST_TO_ADDR
76806: GO 76777
76808: POP
76809: POP
// end ;
76810: LD_VAR 0 2
76814: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
76815: LD_INT 0
76817: PPUSH
76818: PPUSH
76819: PPUSH
76820: PPUSH
76821: PPUSH
76822: PPUSH
// if not unit or not hexes then
76823: LD_VAR 0 1
76827: NOT
76828: PUSH
76829: LD_VAR 0 2
76833: NOT
76834: OR
76835: IFFALSE 76839
// exit ;
76837: GO 76962
// dist := 9999 ;
76839: LD_ADDR_VAR 0 5
76843: PUSH
76844: LD_INT 9999
76846: ST_TO_ADDR
// for i = 1 to hexes do
76847: LD_ADDR_VAR 0 4
76851: PUSH
76852: DOUBLE
76853: LD_INT 1
76855: DEC
76856: ST_TO_ADDR
76857: LD_VAR 0 2
76861: PUSH
76862: FOR_TO
76863: IFFALSE 76950
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
76865: LD_ADDR_VAR 0 6
76869: PUSH
76870: LD_VAR 0 1
76874: PPUSH
76875: LD_VAR 0 2
76879: PUSH
76880: LD_VAR 0 4
76884: ARRAY
76885: PUSH
76886: LD_INT 1
76888: ARRAY
76889: PPUSH
76890: LD_VAR 0 2
76894: PUSH
76895: LD_VAR 0 4
76899: ARRAY
76900: PUSH
76901: LD_INT 2
76903: ARRAY
76904: PPUSH
76905: CALL_OW 297
76909: ST_TO_ADDR
// if tdist < dist then
76910: LD_VAR 0 6
76914: PUSH
76915: LD_VAR 0 5
76919: LESS
76920: IFFALSE 76948
// begin hex := hexes [ i ] ;
76922: LD_ADDR_VAR 0 8
76926: PUSH
76927: LD_VAR 0 2
76931: PUSH
76932: LD_VAR 0 4
76936: ARRAY
76937: ST_TO_ADDR
// dist := tdist ;
76938: LD_ADDR_VAR 0 5
76942: PUSH
76943: LD_VAR 0 6
76947: ST_TO_ADDR
// end ; end ;
76948: GO 76862
76950: POP
76951: POP
// result := hex ;
76952: LD_ADDR_VAR 0 3
76956: PUSH
76957: LD_VAR 0 8
76961: ST_TO_ADDR
// end ;
76962: LD_VAR 0 3
76966: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
76967: LD_INT 0
76969: PPUSH
76970: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
76971: LD_VAR 0 1
76975: NOT
76976: PUSH
76977: LD_VAR 0 1
76981: PUSH
76982: LD_INT 21
76984: PUSH
76985: LD_INT 2
76987: PUSH
76988: EMPTY
76989: LIST
76990: LIST
76991: PUSH
76992: LD_INT 23
76994: PUSH
76995: LD_INT 2
76997: PUSH
76998: EMPTY
76999: LIST
77000: LIST
77001: PUSH
77002: EMPTY
77003: LIST
77004: LIST
77005: PPUSH
77006: CALL_OW 69
77010: IN
77011: NOT
77012: OR
77013: IFFALSE 77017
// exit ;
77015: GO 77064
// for i = 1 to 3 do
77017: LD_ADDR_VAR 0 3
77021: PUSH
77022: DOUBLE
77023: LD_INT 1
77025: DEC
77026: ST_TO_ADDR
77027: LD_INT 3
77029: PUSH
77030: FOR_TO
77031: IFFALSE 77062
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
77033: LD_VAR 0 1
77037: PPUSH
77038: CALL_OW 250
77042: PPUSH
77043: LD_VAR 0 1
77047: PPUSH
77048: CALL_OW 251
77052: PPUSH
77053: LD_INT 1
77055: PPUSH
77056: CALL_OW 453
77060: GO 77030
77062: POP
77063: POP
// end ;
77064: LD_VAR 0 2
77068: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
77069: LD_INT 0
77071: PPUSH
77072: PPUSH
77073: PPUSH
77074: PPUSH
77075: PPUSH
77076: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
77077: LD_VAR 0 1
77081: NOT
77082: PUSH
77083: LD_VAR 0 2
77087: NOT
77088: OR
77089: PUSH
77090: LD_VAR 0 1
77094: PPUSH
77095: CALL_OW 314
77099: OR
77100: IFFALSE 77104
// exit ;
77102: GO 77571
// if GetLives ( i ) < 250 then
77104: LD_VAR 0 4
77108: PPUSH
77109: CALL_OW 256
77113: PUSH
77114: LD_INT 250
77116: LESS
77117: IFFALSE 77130
// begin ComAutodestruct ( i ) ;
77119: LD_VAR 0 4
77123: PPUSH
77124: CALL 76967 0 1
// exit ;
77128: GO 77571
// end ; x := GetX ( enemy_unit ) ;
77130: LD_ADDR_VAR 0 7
77134: PUSH
77135: LD_VAR 0 2
77139: PPUSH
77140: CALL_OW 250
77144: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
77145: LD_ADDR_VAR 0 8
77149: PUSH
77150: LD_VAR 0 2
77154: PPUSH
77155: CALL_OW 251
77159: ST_TO_ADDR
// if not x or not y then
77160: LD_VAR 0 7
77164: NOT
77165: PUSH
77166: LD_VAR 0 8
77170: NOT
77171: OR
77172: IFFALSE 77176
// exit ;
77174: GO 77571
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
77176: LD_ADDR_VAR 0 6
77180: PUSH
77181: LD_VAR 0 7
77185: PPUSH
77186: LD_INT 0
77188: PPUSH
77189: LD_INT 4
77191: PPUSH
77192: CALL_OW 272
77196: PUSH
77197: LD_VAR 0 8
77201: PPUSH
77202: LD_INT 0
77204: PPUSH
77205: LD_INT 4
77207: PPUSH
77208: CALL_OW 273
77212: PUSH
77213: EMPTY
77214: LIST
77215: LIST
77216: PUSH
77217: LD_VAR 0 7
77221: PPUSH
77222: LD_INT 1
77224: PPUSH
77225: LD_INT 4
77227: PPUSH
77228: CALL_OW 272
77232: PUSH
77233: LD_VAR 0 8
77237: PPUSH
77238: LD_INT 1
77240: PPUSH
77241: LD_INT 4
77243: PPUSH
77244: CALL_OW 273
77248: PUSH
77249: EMPTY
77250: LIST
77251: LIST
77252: PUSH
77253: LD_VAR 0 7
77257: PPUSH
77258: LD_INT 2
77260: PPUSH
77261: LD_INT 4
77263: PPUSH
77264: CALL_OW 272
77268: PUSH
77269: LD_VAR 0 8
77273: PPUSH
77274: LD_INT 2
77276: PPUSH
77277: LD_INT 4
77279: PPUSH
77280: CALL_OW 273
77284: PUSH
77285: EMPTY
77286: LIST
77287: LIST
77288: PUSH
77289: LD_VAR 0 7
77293: PPUSH
77294: LD_INT 3
77296: PPUSH
77297: LD_INT 4
77299: PPUSH
77300: CALL_OW 272
77304: PUSH
77305: LD_VAR 0 8
77309: PPUSH
77310: LD_INT 3
77312: PPUSH
77313: LD_INT 4
77315: PPUSH
77316: CALL_OW 273
77320: PUSH
77321: EMPTY
77322: LIST
77323: LIST
77324: PUSH
77325: LD_VAR 0 7
77329: PPUSH
77330: LD_INT 4
77332: PPUSH
77333: LD_INT 4
77335: PPUSH
77336: CALL_OW 272
77340: PUSH
77341: LD_VAR 0 8
77345: PPUSH
77346: LD_INT 4
77348: PPUSH
77349: LD_INT 4
77351: PPUSH
77352: CALL_OW 273
77356: PUSH
77357: EMPTY
77358: LIST
77359: LIST
77360: PUSH
77361: LD_VAR 0 7
77365: PPUSH
77366: LD_INT 5
77368: PPUSH
77369: LD_INT 4
77371: PPUSH
77372: CALL_OW 272
77376: PUSH
77377: LD_VAR 0 8
77381: PPUSH
77382: LD_INT 5
77384: PPUSH
77385: LD_INT 4
77387: PPUSH
77388: CALL_OW 273
77392: PUSH
77393: EMPTY
77394: LIST
77395: LIST
77396: PUSH
77397: EMPTY
77398: LIST
77399: LIST
77400: LIST
77401: LIST
77402: LIST
77403: LIST
77404: ST_TO_ADDR
// for i = tmp downto 1 do
77405: LD_ADDR_VAR 0 4
77409: PUSH
77410: DOUBLE
77411: LD_VAR 0 6
77415: INC
77416: ST_TO_ADDR
77417: LD_INT 1
77419: PUSH
77420: FOR_DOWNTO
77421: IFFALSE 77522
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
77423: LD_VAR 0 6
77427: PUSH
77428: LD_VAR 0 4
77432: ARRAY
77433: PUSH
77434: LD_INT 1
77436: ARRAY
77437: PPUSH
77438: LD_VAR 0 6
77442: PUSH
77443: LD_VAR 0 4
77447: ARRAY
77448: PUSH
77449: LD_INT 2
77451: ARRAY
77452: PPUSH
77453: CALL_OW 488
77457: NOT
77458: PUSH
77459: LD_VAR 0 6
77463: PUSH
77464: LD_VAR 0 4
77468: ARRAY
77469: PUSH
77470: LD_INT 1
77472: ARRAY
77473: PPUSH
77474: LD_VAR 0 6
77478: PUSH
77479: LD_VAR 0 4
77483: ARRAY
77484: PUSH
77485: LD_INT 2
77487: ARRAY
77488: PPUSH
77489: CALL_OW 428
77493: PUSH
77494: LD_INT 0
77496: NONEQUAL
77497: OR
77498: IFFALSE 77520
// tmp := Delete ( tmp , i ) ;
77500: LD_ADDR_VAR 0 6
77504: PUSH
77505: LD_VAR 0 6
77509: PPUSH
77510: LD_VAR 0 4
77514: PPUSH
77515: CALL_OW 3
77519: ST_TO_ADDR
77520: GO 77420
77522: POP
77523: POP
// j := GetClosestHex ( unit , tmp ) ;
77524: LD_ADDR_VAR 0 5
77528: PUSH
77529: LD_VAR 0 1
77533: PPUSH
77534: LD_VAR 0 6
77538: PPUSH
77539: CALL 76815 0 2
77543: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
77544: LD_VAR 0 1
77548: PPUSH
77549: LD_VAR 0 5
77553: PUSH
77554: LD_INT 1
77556: ARRAY
77557: PPUSH
77558: LD_VAR 0 5
77562: PUSH
77563: LD_INT 2
77565: ARRAY
77566: PPUSH
77567: CALL_OW 111
// end ;
77571: LD_VAR 0 3
77575: RET
// export function PrepareApemanSoldier ( ) ; begin
77576: LD_INT 0
77578: PPUSH
// uc_nation := 0 ;
77579: LD_ADDR_OWVAR 21
77583: PUSH
77584: LD_INT 0
77586: ST_TO_ADDR
// hc_sex := sex_male ;
77587: LD_ADDR_OWVAR 27
77591: PUSH
77592: LD_INT 1
77594: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
77595: LD_ADDR_OWVAR 28
77599: PUSH
77600: LD_INT 15
77602: ST_TO_ADDR
// hc_gallery :=  ;
77603: LD_ADDR_OWVAR 33
77607: PUSH
77608: LD_STRING 
77610: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77611: LD_ADDR_OWVAR 31
77615: PUSH
77616: LD_INT 0
77618: PPUSH
77619: LD_INT 3
77621: PPUSH
77622: CALL_OW 12
77626: PUSH
77627: LD_INT 0
77629: PPUSH
77630: LD_INT 3
77632: PPUSH
77633: CALL_OW 12
77637: PUSH
77638: LD_INT 0
77640: PUSH
77641: LD_INT 0
77643: PUSH
77644: EMPTY
77645: LIST
77646: LIST
77647: LIST
77648: LIST
77649: ST_TO_ADDR
// end ;
77650: LD_VAR 0 1
77654: RET
// export function PrepareApemanEngineer ( ) ; begin
77655: LD_INT 0
77657: PPUSH
// uc_nation := 0 ;
77658: LD_ADDR_OWVAR 21
77662: PUSH
77663: LD_INT 0
77665: ST_TO_ADDR
// hc_sex := sex_male ;
77666: LD_ADDR_OWVAR 27
77670: PUSH
77671: LD_INT 1
77673: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
77674: LD_ADDR_OWVAR 28
77678: PUSH
77679: LD_INT 16
77681: ST_TO_ADDR
// hc_gallery :=  ;
77682: LD_ADDR_OWVAR 33
77686: PUSH
77687: LD_STRING 
77689: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77690: LD_ADDR_OWVAR 31
77694: PUSH
77695: LD_INT 0
77697: PPUSH
77698: LD_INT 3
77700: PPUSH
77701: CALL_OW 12
77705: PUSH
77706: LD_INT 0
77708: PPUSH
77709: LD_INT 3
77711: PPUSH
77712: CALL_OW 12
77716: PUSH
77717: LD_INT 0
77719: PUSH
77720: LD_INT 0
77722: PUSH
77723: EMPTY
77724: LIST
77725: LIST
77726: LIST
77727: LIST
77728: ST_TO_ADDR
// end ;
77729: LD_VAR 0 1
77733: RET
// export function PrepareApeman ( agressivity ) ; begin
77734: LD_INT 0
77736: PPUSH
// uc_side := 0 ;
77737: LD_ADDR_OWVAR 20
77741: PUSH
77742: LD_INT 0
77744: ST_TO_ADDR
// uc_nation := 0 ;
77745: LD_ADDR_OWVAR 21
77749: PUSH
77750: LD_INT 0
77752: ST_TO_ADDR
// hc_sex := sex_male ;
77753: LD_ADDR_OWVAR 27
77757: PUSH
77758: LD_INT 1
77760: ST_TO_ADDR
// hc_class := class_apeman ;
77761: LD_ADDR_OWVAR 28
77765: PUSH
77766: LD_INT 12
77768: ST_TO_ADDR
// hc_gallery :=  ;
77769: LD_ADDR_OWVAR 33
77773: PUSH
77774: LD_STRING 
77776: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
77777: LD_ADDR_OWVAR 35
77781: PUSH
77782: LD_VAR 0 1
77786: NEG
77787: PPUSH
77788: LD_VAR 0 1
77792: PPUSH
77793: CALL_OW 12
77797: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77798: LD_ADDR_OWVAR 31
77802: PUSH
77803: LD_INT 0
77805: PPUSH
77806: LD_INT 3
77808: PPUSH
77809: CALL_OW 12
77813: PUSH
77814: LD_INT 0
77816: PPUSH
77817: LD_INT 3
77819: PPUSH
77820: CALL_OW 12
77824: PUSH
77825: LD_INT 0
77827: PUSH
77828: LD_INT 0
77830: PUSH
77831: EMPTY
77832: LIST
77833: LIST
77834: LIST
77835: LIST
77836: ST_TO_ADDR
// end ;
77837: LD_VAR 0 2
77841: RET
// export function PrepareTiger ( agressivity ) ; begin
77842: LD_INT 0
77844: PPUSH
// uc_side := 0 ;
77845: LD_ADDR_OWVAR 20
77849: PUSH
77850: LD_INT 0
77852: ST_TO_ADDR
// uc_nation := 0 ;
77853: LD_ADDR_OWVAR 21
77857: PUSH
77858: LD_INT 0
77860: ST_TO_ADDR
// hc_class := class_tiger ;
77861: LD_ADDR_OWVAR 28
77865: PUSH
77866: LD_INT 14
77868: ST_TO_ADDR
// hc_gallery :=  ;
77869: LD_ADDR_OWVAR 33
77873: PUSH
77874: LD_STRING 
77876: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
77877: LD_ADDR_OWVAR 35
77881: PUSH
77882: LD_VAR 0 1
77886: NEG
77887: PPUSH
77888: LD_VAR 0 1
77892: PPUSH
77893: CALL_OW 12
77897: ST_TO_ADDR
// end ;
77898: LD_VAR 0 2
77902: RET
// export function PrepareEnchidna ( ) ; begin
77903: LD_INT 0
77905: PPUSH
// uc_side := 0 ;
77906: LD_ADDR_OWVAR 20
77910: PUSH
77911: LD_INT 0
77913: ST_TO_ADDR
// uc_nation := 0 ;
77914: LD_ADDR_OWVAR 21
77918: PUSH
77919: LD_INT 0
77921: ST_TO_ADDR
// hc_class := class_baggie ;
77922: LD_ADDR_OWVAR 28
77926: PUSH
77927: LD_INT 13
77929: ST_TO_ADDR
// hc_gallery :=  ;
77930: LD_ADDR_OWVAR 33
77934: PUSH
77935: LD_STRING 
77937: ST_TO_ADDR
// end ;
77938: LD_VAR 0 1
77942: RET
// export function PrepareFrog ( ) ; begin
77943: LD_INT 0
77945: PPUSH
// uc_side := 0 ;
77946: LD_ADDR_OWVAR 20
77950: PUSH
77951: LD_INT 0
77953: ST_TO_ADDR
// uc_nation := 0 ;
77954: LD_ADDR_OWVAR 21
77958: PUSH
77959: LD_INT 0
77961: ST_TO_ADDR
// hc_class := class_frog ;
77962: LD_ADDR_OWVAR 28
77966: PUSH
77967: LD_INT 19
77969: ST_TO_ADDR
// hc_gallery :=  ;
77970: LD_ADDR_OWVAR 33
77974: PUSH
77975: LD_STRING 
77977: ST_TO_ADDR
// end ;
77978: LD_VAR 0 1
77982: RET
// export function PrepareFish ( ) ; begin
77983: LD_INT 0
77985: PPUSH
// uc_side := 0 ;
77986: LD_ADDR_OWVAR 20
77990: PUSH
77991: LD_INT 0
77993: ST_TO_ADDR
// uc_nation := 0 ;
77994: LD_ADDR_OWVAR 21
77998: PUSH
77999: LD_INT 0
78001: ST_TO_ADDR
// hc_class := class_fish ;
78002: LD_ADDR_OWVAR 28
78006: PUSH
78007: LD_INT 20
78009: ST_TO_ADDR
// hc_gallery :=  ;
78010: LD_ADDR_OWVAR 33
78014: PUSH
78015: LD_STRING 
78017: ST_TO_ADDR
// end ;
78018: LD_VAR 0 1
78022: RET
// export function PrepareBird ( ) ; begin
78023: LD_INT 0
78025: PPUSH
// uc_side := 0 ;
78026: LD_ADDR_OWVAR 20
78030: PUSH
78031: LD_INT 0
78033: ST_TO_ADDR
// uc_nation := 0 ;
78034: LD_ADDR_OWVAR 21
78038: PUSH
78039: LD_INT 0
78041: ST_TO_ADDR
// hc_class := class_phororhacos ;
78042: LD_ADDR_OWVAR 28
78046: PUSH
78047: LD_INT 18
78049: ST_TO_ADDR
// hc_gallery :=  ;
78050: LD_ADDR_OWVAR 33
78054: PUSH
78055: LD_STRING 
78057: ST_TO_ADDR
// end ;
78058: LD_VAR 0 1
78062: RET
// export function PrepareHorse ( ) ; begin
78063: LD_INT 0
78065: PPUSH
// uc_side := 0 ;
78066: LD_ADDR_OWVAR 20
78070: PUSH
78071: LD_INT 0
78073: ST_TO_ADDR
// uc_nation := 0 ;
78074: LD_ADDR_OWVAR 21
78078: PUSH
78079: LD_INT 0
78081: ST_TO_ADDR
// hc_class := class_horse ;
78082: LD_ADDR_OWVAR 28
78086: PUSH
78087: LD_INT 21
78089: ST_TO_ADDR
// hc_gallery :=  ;
78090: LD_ADDR_OWVAR 33
78094: PUSH
78095: LD_STRING 
78097: ST_TO_ADDR
// end ;
78098: LD_VAR 0 1
78102: RET
// export function PrepareMastodont ( ) ; begin
78103: LD_INT 0
78105: PPUSH
// uc_side := 0 ;
78106: LD_ADDR_OWVAR 20
78110: PUSH
78111: LD_INT 0
78113: ST_TO_ADDR
// uc_nation := 0 ;
78114: LD_ADDR_OWVAR 21
78118: PUSH
78119: LD_INT 0
78121: ST_TO_ADDR
// vc_chassis := class_mastodont ;
78122: LD_ADDR_OWVAR 37
78126: PUSH
78127: LD_INT 31
78129: ST_TO_ADDR
// vc_control := control_rider ;
78130: LD_ADDR_OWVAR 38
78134: PUSH
78135: LD_INT 4
78137: ST_TO_ADDR
// end ;
78138: LD_VAR 0 1
78142: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
78143: LD_INT 0
78145: PPUSH
78146: PPUSH
78147: PPUSH
// uc_side = 0 ;
78148: LD_ADDR_OWVAR 20
78152: PUSH
78153: LD_INT 0
78155: ST_TO_ADDR
// uc_nation = 0 ;
78156: LD_ADDR_OWVAR 21
78160: PUSH
78161: LD_INT 0
78163: ST_TO_ADDR
// InitHc_All ( ) ;
78164: CALL_OW 584
// InitVc ;
78168: CALL_OW 20
// if mastodonts then
78172: LD_VAR 0 6
78176: IFFALSE 78243
// for i = 1 to mastodonts do
78178: LD_ADDR_VAR 0 11
78182: PUSH
78183: DOUBLE
78184: LD_INT 1
78186: DEC
78187: ST_TO_ADDR
78188: LD_VAR 0 6
78192: PUSH
78193: FOR_TO
78194: IFFALSE 78241
// begin vc_chassis := 31 ;
78196: LD_ADDR_OWVAR 37
78200: PUSH
78201: LD_INT 31
78203: ST_TO_ADDR
// vc_control := control_rider ;
78204: LD_ADDR_OWVAR 38
78208: PUSH
78209: LD_INT 4
78211: ST_TO_ADDR
// animal := CreateVehicle ;
78212: LD_ADDR_VAR 0 12
78216: PUSH
78217: CALL_OW 45
78221: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78222: LD_VAR 0 12
78226: PPUSH
78227: LD_VAR 0 8
78231: PPUSH
78232: LD_INT 0
78234: PPUSH
78235: CALL 80371 0 3
// end ;
78239: GO 78193
78241: POP
78242: POP
// if horses then
78243: LD_VAR 0 5
78247: IFFALSE 78314
// for i = 1 to horses do
78249: LD_ADDR_VAR 0 11
78253: PUSH
78254: DOUBLE
78255: LD_INT 1
78257: DEC
78258: ST_TO_ADDR
78259: LD_VAR 0 5
78263: PUSH
78264: FOR_TO
78265: IFFALSE 78312
// begin hc_class := 21 ;
78267: LD_ADDR_OWVAR 28
78271: PUSH
78272: LD_INT 21
78274: ST_TO_ADDR
// hc_gallery :=  ;
78275: LD_ADDR_OWVAR 33
78279: PUSH
78280: LD_STRING 
78282: ST_TO_ADDR
// animal := CreateHuman ;
78283: LD_ADDR_VAR 0 12
78287: PUSH
78288: CALL_OW 44
78292: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78293: LD_VAR 0 12
78297: PPUSH
78298: LD_VAR 0 8
78302: PPUSH
78303: LD_INT 0
78305: PPUSH
78306: CALL 80371 0 3
// end ;
78310: GO 78264
78312: POP
78313: POP
// if birds then
78314: LD_VAR 0 1
78318: IFFALSE 78385
// for i = 1 to birds do
78320: LD_ADDR_VAR 0 11
78324: PUSH
78325: DOUBLE
78326: LD_INT 1
78328: DEC
78329: ST_TO_ADDR
78330: LD_VAR 0 1
78334: PUSH
78335: FOR_TO
78336: IFFALSE 78383
// begin hc_class := 18 ;
78338: LD_ADDR_OWVAR 28
78342: PUSH
78343: LD_INT 18
78345: ST_TO_ADDR
// hc_gallery =  ;
78346: LD_ADDR_OWVAR 33
78350: PUSH
78351: LD_STRING 
78353: ST_TO_ADDR
// animal := CreateHuman ;
78354: LD_ADDR_VAR 0 12
78358: PUSH
78359: CALL_OW 44
78363: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78364: LD_VAR 0 12
78368: PPUSH
78369: LD_VAR 0 8
78373: PPUSH
78374: LD_INT 0
78376: PPUSH
78377: CALL 80371 0 3
// end ;
78381: GO 78335
78383: POP
78384: POP
// if tigers then
78385: LD_VAR 0 2
78389: IFFALSE 78473
// for i = 1 to tigers do
78391: LD_ADDR_VAR 0 11
78395: PUSH
78396: DOUBLE
78397: LD_INT 1
78399: DEC
78400: ST_TO_ADDR
78401: LD_VAR 0 2
78405: PUSH
78406: FOR_TO
78407: IFFALSE 78471
// begin hc_class = class_tiger ;
78409: LD_ADDR_OWVAR 28
78413: PUSH
78414: LD_INT 14
78416: ST_TO_ADDR
// hc_gallery =  ;
78417: LD_ADDR_OWVAR 33
78421: PUSH
78422: LD_STRING 
78424: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
78425: LD_ADDR_OWVAR 35
78429: PUSH
78430: LD_INT 7
78432: NEG
78433: PPUSH
78434: LD_INT 7
78436: PPUSH
78437: CALL_OW 12
78441: ST_TO_ADDR
// animal := CreateHuman ;
78442: LD_ADDR_VAR 0 12
78446: PUSH
78447: CALL_OW 44
78451: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78452: LD_VAR 0 12
78456: PPUSH
78457: LD_VAR 0 8
78461: PPUSH
78462: LD_INT 0
78464: PPUSH
78465: CALL 80371 0 3
// end ;
78469: GO 78406
78471: POP
78472: POP
// if apemans then
78473: LD_VAR 0 3
78477: IFFALSE 78600
// for i = 1 to apemans do
78479: LD_ADDR_VAR 0 11
78483: PUSH
78484: DOUBLE
78485: LD_INT 1
78487: DEC
78488: ST_TO_ADDR
78489: LD_VAR 0 3
78493: PUSH
78494: FOR_TO
78495: IFFALSE 78598
// begin hc_class = class_apeman ;
78497: LD_ADDR_OWVAR 28
78501: PUSH
78502: LD_INT 12
78504: ST_TO_ADDR
// hc_gallery =  ;
78505: LD_ADDR_OWVAR 33
78509: PUSH
78510: LD_STRING 
78512: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
78513: LD_ADDR_OWVAR 35
78517: PUSH
78518: LD_INT 2
78520: NEG
78521: PPUSH
78522: LD_INT 2
78524: PPUSH
78525: CALL_OW 12
78529: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
78530: LD_ADDR_OWVAR 31
78534: PUSH
78535: LD_INT 1
78537: PPUSH
78538: LD_INT 3
78540: PPUSH
78541: CALL_OW 12
78545: PUSH
78546: LD_INT 1
78548: PPUSH
78549: LD_INT 3
78551: PPUSH
78552: CALL_OW 12
78556: PUSH
78557: LD_INT 0
78559: PUSH
78560: LD_INT 0
78562: PUSH
78563: EMPTY
78564: LIST
78565: LIST
78566: LIST
78567: LIST
78568: ST_TO_ADDR
// animal := CreateHuman ;
78569: LD_ADDR_VAR 0 12
78573: PUSH
78574: CALL_OW 44
78578: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78579: LD_VAR 0 12
78583: PPUSH
78584: LD_VAR 0 8
78588: PPUSH
78589: LD_INT 0
78591: PPUSH
78592: CALL 80371 0 3
// end ;
78596: GO 78494
78598: POP
78599: POP
// if enchidnas then
78600: LD_VAR 0 4
78604: IFFALSE 78671
// for i = 1 to enchidnas do
78606: LD_ADDR_VAR 0 11
78610: PUSH
78611: DOUBLE
78612: LD_INT 1
78614: DEC
78615: ST_TO_ADDR
78616: LD_VAR 0 4
78620: PUSH
78621: FOR_TO
78622: IFFALSE 78669
// begin hc_class = 13 ;
78624: LD_ADDR_OWVAR 28
78628: PUSH
78629: LD_INT 13
78631: ST_TO_ADDR
// hc_gallery =  ;
78632: LD_ADDR_OWVAR 33
78636: PUSH
78637: LD_STRING 
78639: ST_TO_ADDR
// animal := CreateHuman ;
78640: LD_ADDR_VAR 0 12
78644: PUSH
78645: CALL_OW 44
78649: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78650: LD_VAR 0 12
78654: PPUSH
78655: LD_VAR 0 8
78659: PPUSH
78660: LD_INT 0
78662: PPUSH
78663: CALL 80371 0 3
// end ;
78667: GO 78621
78669: POP
78670: POP
// if fishes then
78671: LD_VAR 0 7
78675: IFFALSE 78742
// for i = 1 to fishes do
78677: LD_ADDR_VAR 0 11
78681: PUSH
78682: DOUBLE
78683: LD_INT 1
78685: DEC
78686: ST_TO_ADDR
78687: LD_VAR 0 7
78691: PUSH
78692: FOR_TO
78693: IFFALSE 78740
// begin hc_class = 20 ;
78695: LD_ADDR_OWVAR 28
78699: PUSH
78700: LD_INT 20
78702: ST_TO_ADDR
// hc_gallery =  ;
78703: LD_ADDR_OWVAR 33
78707: PUSH
78708: LD_STRING 
78710: ST_TO_ADDR
// animal := CreateHuman ;
78711: LD_ADDR_VAR 0 12
78715: PUSH
78716: CALL_OW 44
78720: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
78721: LD_VAR 0 12
78725: PPUSH
78726: LD_VAR 0 9
78730: PPUSH
78731: LD_INT 0
78733: PPUSH
78734: CALL 80371 0 3
// end ;
78738: GO 78692
78740: POP
78741: POP
// end ;
78742: LD_VAR 0 10
78746: RET
// export function WantHeal ( sci , unit ) ; begin
78747: LD_INT 0
78749: PPUSH
// if GetTaskList ( sci ) > 0 then
78750: LD_VAR 0 1
78754: PPUSH
78755: CALL_OW 437
78759: PUSH
78760: LD_INT 0
78762: GREATER
78763: IFFALSE 78833
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
78765: LD_VAR 0 1
78769: PPUSH
78770: CALL_OW 437
78774: PUSH
78775: LD_INT 1
78777: ARRAY
78778: PUSH
78779: LD_INT 1
78781: ARRAY
78782: PUSH
78783: LD_STRING l
78785: EQUAL
78786: PUSH
78787: LD_VAR 0 1
78791: PPUSH
78792: CALL_OW 437
78796: PUSH
78797: LD_INT 1
78799: ARRAY
78800: PUSH
78801: LD_INT 4
78803: ARRAY
78804: PUSH
78805: LD_VAR 0 2
78809: EQUAL
78810: AND
78811: IFFALSE 78823
// result := true else
78813: LD_ADDR_VAR 0 3
78817: PUSH
78818: LD_INT 1
78820: ST_TO_ADDR
78821: GO 78831
// result := false ;
78823: LD_ADDR_VAR 0 3
78827: PUSH
78828: LD_INT 0
78830: ST_TO_ADDR
// end else
78831: GO 78841
// result := false ;
78833: LD_ADDR_VAR 0 3
78837: PUSH
78838: LD_INT 0
78840: ST_TO_ADDR
// end ;
78841: LD_VAR 0 3
78845: RET
// export function HealTarget ( sci ) ; begin
78846: LD_INT 0
78848: PPUSH
// if not sci then
78849: LD_VAR 0 1
78853: NOT
78854: IFFALSE 78858
// exit ;
78856: GO 78923
// result := 0 ;
78858: LD_ADDR_VAR 0 2
78862: PUSH
78863: LD_INT 0
78865: ST_TO_ADDR
// if GetTaskList ( sci ) then
78866: LD_VAR 0 1
78870: PPUSH
78871: CALL_OW 437
78875: IFFALSE 78923
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
78877: LD_VAR 0 1
78881: PPUSH
78882: CALL_OW 437
78886: PUSH
78887: LD_INT 1
78889: ARRAY
78890: PUSH
78891: LD_INT 1
78893: ARRAY
78894: PUSH
78895: LD_STRING l
78897: EQUAL
78898: IFFALSE 78923
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
78900: LD_ADDR_VAR 0 2
78904: PUSH
78905: LD_VAR 0 1
78909: PPUSH
78910: CALL_OW 437
78914: PUSH
78915: LD_INT 1
78917: ARRAY
78918: PUSH
78919: LD_INT 4
78921: ARRAY
78922: ST_TO_ADDR
// end ;
78923: LD_VAR 0 2
78927: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
78928: LD_INT 0
78930: PPUSH
78931: PPUSH
78932: PPUSH
78933: PPUSH
// if not base_units then
78934: LD_VAR 0 1
78938: NOT
78939: IFFALSE 78943
// exit ;
78941: GO 79030
// result := false ;
78943: LD_ADDR_VAR 0 2
78947: PUSH
78948: LD_INT 0
78950: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
78951: LD_ADDR_VAR 0 5
78955: PUSH
78956: LD_VAR 0 1
78960: PPUSH
78961: LD_INT 21
78963: PUSH
78964: LD_INT 3
78966: PUSH
78967: EMPTY
78968: LIST
78969: LIST
78970: PPUSH
78971: CALL_OW 72
78975: ST_TO_ADDR
// if not tmp then
78976: LD_VAR 0 5
78980: NOT
78981: IFFALSE 78985
// exit ;
78983: GO 79030
// for i in tmp do
78985: LD_ADDR_VAR 0 3
78989: PUSH
78990: LD_VAR 0 5
78994: PUSH
78995: FOR_IN
78996: IFFALSE 79028
// begin result := EnemyInRange ( i , 22 ) ;
78998: LD_ADDR_VAR 0 2
79002: PUSH
79003: LD_VAR 0 3
79007: PPUSH
79008: LD_INT 22
79010: PPUSH
79011: CALL 76617 0 2
79015: ST_TO_ADDR
// if result then
79016: LD_VAR 0 2
79020: IFFALSE 79026
// exit ;
79022: POP
79023: POP
79024: GO 79030
// end ;
79026: GO 78995
79028: POP
79029: POP
// end ;
79030: LD_VAR 0 2
79034: RET
// export function FilterByTag ( units , tag ) ; begin
79035: LD_INT 0
79037: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
79038: LD_ADDR_VAR 0 3
79042: PUSH
79043: LD_VAR 0 1
79047: PPUSH
79048: LD_INT 120
79050: PUSH
79051: LD_VAR 0 2
79055: PUSH
79056: EMPTY
79057: LIST
79058: LIST
79059: PPUSH
79060: CALL_OW 72
79064: ST_TO_ADDR
// end ;
79065: LD_VAR 0 3
79069: RET
// export function IsDriver ( un ) ; begin
79070: LD_INT 0
79072: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
79073: LD_ADDR_VAR 0 2
79077: PUSH
79078: LD_VAR 0 1
79082: PUSH
79083: LD_INT 55
79085: PUSH
79086: EMPTY
79087: LIST
79088: PPUSH
79089: CALL_OW 69
79093: IN
79094: ST_TO_ADDR
// end ;
79095: LD_VAR 0 2
79099: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
79100: LD_INT 0
79102: PPUSH
79103: PPUSH
// list := [ ] ;
79104: LD_ADDR_VAR 0 5
79108: PUSH
79109: EMPTY
79110: ST_TO_ADDR
// case d of 0 :
79111: LD_VAR 0 3
79115: PUSH
79116: LD_INT 0
79118: DOUBLE
79119: EQUAL
79120: IFTRUE 79124
79122: GO 79257
79124: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
79125: LD_ADDR_VAR 0 5
79129: PUSH
79130: LD_VAR 0 1
79134: PUSH
79135: LD_INT 4
79137: MINUS
79138: PUSH
79139: LD_VAR 0 2
79143: PUSH
79144: LD_INT 4
79146: MINUS
79147: PUSH
79148: LD_INT 2
79150: PUSH
79151: EMPTY
79152: LIST
79153: LIST
79154: LIST
79155: PUSH
79156: LD_VAR 0 1
79160: PUSH
79161: LD_INT 3
79163: MINUS
79164: PUSH
79165: LD_VAR 0 2
79169: PUSH
79170: LD_INT 1
79172: PUSH
79173: EMPTY
79174: LIST
79175: LIST
79176: LIST
79177: PUSH
79178: LD_VAR 0 1
79182: PUSH
79183: LD_INT 4
79185: PLUS
79186: PUSH
79187: LD_VAR 0 2
79191: PUSH
79192: LD_INT 4
79194: PUSH
79195: EMPTY
79196: LIST
79197: LIST
79198: LIST
79199: PUSH
79200: LD_VAR 0 1
79204: PUSH
79205: LD_INT 3
79207: PLUS
79208: PUSH
79209: LD_VAR 0 2
79213: PUSH
79214: LD_INT 3
79216: PLUS
79217: PUSH
79218: LD_INT 5
79220: PUSH
79221: EMPTY
79222: LIST
79223: LIST
79224: LIST
79225: PUSH
79226: LD_VAR 0 1
79230: PUSH
79231: LD_VAR 0 2
79235: PUSH
79236: LD_INT 4
79238: PLUS
79239: PUSH
79240: LD_INT 0
79242: PUSH
79243: EMPTY
79244: LIST
79245: LIST
79246: LIST
79247: PUSH
79248: EMPTY
79249: LIST
79250: LIST
79251: LIST
79252: LIST
79253: LIST
79254: ST_TO_ADDR
// end ; 1 :
79255: GO 79955
79257: LD_INT 1
79259: DOUBLE
79260: EQUAL
79261: IFTRUE 79265
79263: GO 79398
79265: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
79266: LD_ADDR_VAR 0 5
79270: PUSH
79271: LD_VAR 0 1
79275: PUSH
79276: LD_VAR 0 2
79280: PUSH
79281: LD_INT 4
79283: MINUS
79284: PUSH
79285: LD_INT 3
79287: PUSH
79288: EMPTY
79289: LIST
79290: LIST
79291: LIST
79292: PUSH
79293: LD_VAR 0 1
79297: PUSH
79298: LD_INT 3
79300: MINUS
79301: PUSH
79302: LD_VAR 0 2
79306: PUSH
79307: LD_INT 3
79309: MINUS
79310: PUSH
79311: LD_INT 2
79313: PUSH
79314: EMPTY
79315: LIST
79316: LIST
79317: LIST
79318: PUSH
79319: LD_VAR 0 1
79323: PUSH
79324: LD_INT 4
79326: MINUS
79327: PUSH
79328: LD_VAR 0 2
79332: PUSH
79333: LD_INT 1
79335: PUSH
79336: EMPTY
79337: LIST
79338: LIST
79339: LIST
79340: PUSH
79341: LD_VAR 0 1
79345: PUSH
79346: LD_VAR 0 2
79350: PUSH
79351: LD_INT 3
79353: PLUS
79354: PUSH
79355: LD_INT 0
79357: PUSH
79358: EMPTY
79359: LIST
79360: LIST
79361: LIST
79362: PUSH
79363: LD_VAR 0 1
79367: PUSH
79368: LD_INT 4
79370: PLUS
79371: PUSH
79372: LD_VAR 0 2
79376: PUSH
79377: LD_INT 4
79379: PLUS
79380: PUSH
79381: LD_INT 5
79383: PUSH
79384: EMPTY
79385: LIST
79386: LIST
79387: LIST
79388: PUSH
79389: EMPTY
79390: LIST
79391: LIST
79392: LIST
79393: LIST
79394: LIST
79395: ST_TO_ADDR
// end ; 2 :
79396: GO 79955
79398: LD_INT 2
79400: DOUBLE
79401: EQUAL
79402: IFTRUE 79406
79404: GO 79535
79406: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
79407: LD_ADDR_VAR 0 5
79411: PUSH
79412: LD_VAR 0 1
79416: PUSH
79417: LD_VAR 0 2
79421: PUSH
79422: LD_INT 3
79424: MINUS
79425: PUSH
79426: LD_INT 3
79428: PUSH
79429: EMPTY
79430: LIST
79431: LIST
79432: LIST
79433: PUSH
79434: LD_VAR 0 1
79438: PUSH
79439: LD_INT 4
79441: PLUS
79442: PUSH
79443: LD_VAR 0 2
79447: PUSH
79448: LD_INT 4
79450: PUSH
79451: EMPTY
79452: LIST
79453: LIST
79454: LIST
79455: PUSH
79456: LD_VAR 0 1
79460: PUSH
79461: LD_VAR 0 2
79465: PUSH
79466: LD_INT 4
79468: PLUS
79469: PUSH
79470: LD_INT 0
79472: PUSH
79473: EMPTY
79474: LIST
79475: LIST
79476: LIST
79477: PUSH
79478: LD_VAR 0 1
79482: PUSH
79483: LD_INT 3
79485: MINUS
79486: PUSH
79487: LD_VAR 0 2
79491: PUSH
79492: LD_INT 1
79494: PUSH
79495: EMPTY
79496: LIST
79497: LIST
79498: LIST
79499: PUSH
79500: LD_VAR 0 1
79504: PUSH
79505: LD_INT 4
79507: MINUS
79508: PUSH
79509: LD_VAR 0 2
79513: PUSH
79514: LD_INT 4
79516: MINUS
79517: PUSH
79518: LD_INT 2
79520: PUSH
79521: EMPTY
79522: LIST
79523: LIST
79524: LIST
79525: PUSH
79526: EMPTY
79527: LIST
79528: LIST
79529: LIST
79530: LIST
79531: LIST
79532: ST_TO_ADDR
// end ; 3 :
79533: GO 79955
79535: LD_INT 3
79537: DOUBLE
79538: EQUAL
79539: IFTRUE 79543
79541: GO 79676
79543: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
79544: LD_ADDR_VAR 0 5
79548: PUSH
79549: LD_VAR 0 1
79553: PUSH
79554: LD_INT 3
79556: PLUS
79557: PUSH
79558: LD_VAR 0 2
79562: PUSH
79563: LD_INT 4
79565: PUSH
79566: EMPTY
79567: LIST
79568: LIST
79569: LIST
79570: PUSH
79571: LD_VAR 0 1
79575: PUSH
79576: LD_INT 4
79578: PLUS
79579: PUSH
79580: LD_VAR 0 2
79584: PUSH
79585: LD_INT 4
79587: PLUS
79588: PUSH
79589: LD_INT 5
79591: PUSH
79592: EMPTY
79593: LIST
79594: LIST
79595: LIST
79596: PUSH
79597: LD_VAR 0 1
79601: PUSH
79602: LD_INT 4
79604: MINUS
79605: PUSH
79606: LD_VAR 0 2
79610: PUSH
79611: LD_INT 1
79613: PUSH
79614: EMPTY
79615: LIST
79616: LIST
79617: LIST
79618: PUSH
79619: LD_VAR 0 1
79623: PUSH
79624: LD_VAR 0 2
79628: PUSH
79629: LD_INT 4
79631: MINUS
79632: PUSH
79633: LD_INT 3
79635: PUSH
79636: EMPTY
79637: LIST
79638: LIST
79639: LIST
79640: PUSH
79641: LD_VAR 0 1
79645: PUSH
79646: LD_INT 3
79648: MINUS
79649: PUSH
79650: LD_VAR 0 2
79654: PUSH
79655: LD_INT 3
79657: MINUS
79658: PUSH
79659: LD_INT 2
79661: PUSH
79662: EMPTY
79663: LIST
79664: LIST
79665: LIST
79666: PUSH
79667: EMPTY
79668: LIST
79669: LIST
79670: LIST
79671: LIST
79672: LIST
79673: ST_TO_ADDR
// end ; 4 :
79674: GO 79955
79676: LD_INT 4
79678: DOUBLE
79679: EQUAL
79680: IFTRUE 79684
79682: GO 79817
79684: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
79685: LD_ADDR_VAR 0 5
79689: PUSH
79690: LD_VAR 0 1
79694: PUSH
79695: LD_VAR 0 2
79699: PUSH
79700: LD_INT 4
79702: PLUS
79703: PUSH
79704: LD_INT 0
79706: PUSH
79707: EMPTY
79708: LIST
79709: LIST
79710: LIST
79711: PUSH
79712: LD_VAR 0 1
79716: PUSH
79717: LD_INT 3
79719: PLUS
79720: PUSH
79721: LD_VAR 0 2
79725: PUSH
79726: LD_INT 3
79728: PLUS
79729: PUSH
79730: LD_INT 5
79732: PUSH
79733: EMPTY
79734: LIST
79735: LIST
79736: LIST
79737: PUSH
79738: LD_VAR 0 1
79742: PUSH
79743: LD_INT 4
79745: PLUS
79746: PUSH
79747: LD_VAR 0 2
79751: PUSH
79752: LD_INT 4
79754: PUSH
79755: EMPTY
79756: LIST
79757: LIST
79758: LIST
79759: PUSH
79760: LD_VAR 0 1
79764: PUSH
79765: LD_VAR 0 2
79769: PUSH
79770: LD_INT 3
79772: MINUS
79773: PUSH
79774: LD_INT 3
79776: PUSH
79777: EMPTY
79778: LIST
79779: LIST
79780: LIST
79781: PUSH
79782: LD_VAR 0 1
79786: PUSH
79787: LD_INT 4
79789: MINUS
79790: PUSH
79791: LD_VAR 0 2
79795: PUSH
79796: LD_INT 4
79798: MINUS
79799: PUSH
79800: LD_INT 2
79802: PUSH
79803: EMPTY
79804: LIST
79805: LIST
79806: LIST
79807: PUSH
79808: EMPTY
79809: LIST
79810: LIST
79811: LIST
79812: LIST
79813: LIST
79814: ST_TO_ADDR
// end ; 5 :
79815: GO 79955
79817: LD_INT 5
79819: DOUBLE
79820: EQUAL
79821: IFTRUE 79825
79823: GO 79954
79825: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
79826: LD_ADDR_VAR 0 5
79830: PUSH
79831: LD_VAR 0 1
79835: PUSH
79836: LD_INT 4
79838: MINUS
79839: PUSH
79840: LD_VAR 0 2
79844: PUSH
79845: LD_INT 1
79847: PUSH
79848: EMPTY
79849: LIST
79850: LIST
79851: LIST
79852: PUSH
79853: LD_VAR 0 1
79857: PUSH
79858: LD_VAR 0 2
79862: PUSH
79863: LD_INT 4
79865: MINUS
79866: PUSH
79867: LD_INT 3
79869: PUSH
79870: EMPTY
79871: LIST
79872: LIST
79873: LIST
79874: PUSH
79875: LD_VAR 0 1
79879: PUSH
79880: LD_INT 4
79882: PLUS
79883: PUSH
79884: LD_VAR 0 2
79888: PUSH
79889: LD_INT 4
79891: PLUS
79892: PUSH
79893: LD_INT 5
79895: PUSH
79896: EMPTY
79897: LIST
79898: LIST
79899: LIST
79900: PUSH
79901: LD_VAR 0 1
79905: PUSH
79906: LD_INT 3
79908: PLUS
79909: PUSH
79910: LD_VAR 0 2
79914: PUSH
79915: LD_INT 4
79917: PUSH
79918: EMPTY
79919: LIST
79920: LIST
79921: LIST
79922: PUSH
79923: LD_VAR 0 1
79927: PUSH
79928: LD_VAR 0 2
79932: PUSH
79933: LD_INT 3
79935: PLUS
79936: PUSH
79937: LD_INT 0
79939: PUSH
79940: EMPTY
79941: LIST
79942: LIST
79943: LIST
79944: PUSH
79945: EMPTY
79946: LIST
79947: LIST
79948: LIST
79949: LIST
79950: LIST
79951: ST_TO_ADDR
// end ; end ;
79952: GO 79955
79954: POP
// result := list ;
79955: LD_ADDR_VAR 0 4
79959: PUSH
79960: LD_VAR 0 5
79964: ST_TO_ADDR
// end ;
79965: LD_VAR 0 4
79969: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
79970: LD_INT 0
79972: PPUSH
79973: PPUSH
79974: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
79975: LD_VAR 0 1
79979: NOT
79980: PUSH
79981: LD_VAR 0 2
79985: PUSH
79986: LD_INT 1
79988: PUSH
79989: LD_INT 2
79991: PUSH
79992: LD_INT 3
79994: PUSH
79995: LD_INT 4
79997: PUSH
79998: EMPTY
79999: LIST
80000: LIST
80001: LIST
80002: LIST
80003: IN
80004: NOT
80005: OR
80006: IFFALSE 80010
// exit ;
80008: GO 80093
// tmp := [ ] ;
80010: LD_ADDR_VAR 0 5
80014: PUSH
80015: EMPTY
80016: ST_TO_ADDR
// for i in units do
80017: LD_ADDR_VAR 0 4
80021: PUSH
80022: LD_VAR 0 1
80026: PUSH
80027: FOR_IN
80028: IFFALSE 80062
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
80030: LD_ADDR_VAR 0 5
80034: PUSH
80035: LD_VAR 0 5
80039: PPUSH
80040: LD_VAR 0 4
80044: PPUSH
80045: LD_VAR 0 2
80049: PPUSH
80050: CALL_OW 259
80054: PPUSH
80055: CALL 81453 0 2
80059: ST_TO_ADDR
80060: GO 80027
80062: POP
80063: POP
// if not tmp then
80064: LD_VAR 0 5
80068: NOT
80069: IFFALSE 80073
// exit ;
80071: GO 80093
// result := SortListByListDesc ( units , tmp ) ;
80073: LD_ADDR_VAR 0 3
80077: PUSH
80078: LD_VAR 0 1
80082: PPUSH
80083: LD_VAR 0 5
80087: PPUSH
80088: CALL_OW 77
80092: ST_TO_ADDR
// end ;
80093: LD_VAR 0 3
80097: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
80098: LD_INT 0
80100: PPUSH
80101: PPUSH
80102: PPUSH
// result := false ;
80103: LD_ADDR_VAR 0 3
80107: PUSH
80108: LD_INT 0
80110: ST_TO_ADDR
// if not building then
80111: LD_VAR 0 2
80115: NOT
80116: IFFALSE 80120
// exit ;
80118: GO 80258
// x := GetX ( building ) ;
80120: LD_ADDR_VAR 0 4
80124: PUSH
80125: LD_VAR 0 2
80129: PPUSH
80130: CALL_OW 250
80134: ST_TO_ADDR
// y := GetY ( building ) ;
80135: LD_ADDR_VAR 0 5
80139: PUSH
80140: LD_VAR 0 2
80144: PPUSH
80145: CALL_OW 251
80149: ST_TO_ADDR
// if not x or not y then
80150: LD_VAR 0 4
80154: NOT
80155: PUSH
80156: LD_VAR 0 5
80160: NOT
80161: OR
80162: IFFALSE 80166
// exit ;
80164: GO 80258
// if GetTaskList ( unit ) then
80166: LD_VAR 0 1
80170: PPUSH
80171: CALL_OW 437
80175: IFFALSE 80258
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
80177: LD_STRING e
80179: PUSH
80180: LD_VAR 0 1
80184: PPUSH
80185: CALL_OW 437
80189: PUSH
80190: LD_INT 1
80192: ARRAY
80193: PUSH
80194: LD_INT 1
80196: ARRAY
80197: EQUAL
80198: PUSH
80199: LD_VAR 0 4
80203: PUSH
80204: LD_VAR 0 1
80208: PPUSH
80209: CALL_OW 437
80213: PUSH
80214: LD_INT 1
80216: ARRAY
80217: PUSH
80218: LD_INT 2
80220: ARRAY
80221: EQUAL
80222: AND
80223: PUSH
80224: LD_VAR 0 5
80228: PUSH
80229: LD_VAR 0 1
80233: PPUSH
80234: CALL_OW 437
80238: PUSH
80239: LD_INT 1
80241: ARRAY
80242: PUSH
80243: LD_INT 3
80245: ARRAY
80246: EQUAL
80247: AND
80248: IFFALSE 80258
// result := true end ;
80250: LD_ADDR_VAR 0 3
80254: PUSH
80255: LD_INT 1
80257: ST_TO_ADDR
// end ;
80258: LD_VAR 0 3
80262: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
80263: LD_INT 0
80265: PPUSH
// result := false ;
80266: LD_ADDR_VAR 0 4
80270: PUSH
80271: LD_INT 0
80273: ST_TO_ADDR
// if GetTaskList ( unit ) then
80274: LD_VAR 0 1
80278: PPUSH
80279: CALL_OW 437
80283: IFFALSE 80366
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
80285: LD_STRING M
80287: PUSH
80288: LD_VAR 0 1
80292: PPUSH
80293: CALL_OW 437
80297: PUSH
80298: LD_INT 1
80300: ARRAY
80301: PUSH
80302: LD_INT 1
80304: ARRAY
80305: EQUAL
80306: PUSH
80307: LD_VAR 0 2
80311: PUSH
80312: LD_VAR 0 1
80316: PPUSH
80317: CALL_OW 437
80321: PUSH
80322: LD_INT 1
80324: ARRAY
80325: PUSH
80326: LD_INT 2
80328: ARRAY
80329: EQUAL
80330: AND
80331: PUSH
80332: LD_VAR 0 3
80336: PUSH
80337: LD_VAR 0 1
80341: PPUSH
80342: CALL_OW 437
80346: PUSH
80347: LD_INT 1
80349: ARRAY
80350: PUSH
80351: LD_INT 3
80353: ARRAY
80354: EQUAL
80355: AND
80356: IFFALSE 80366
// result := true ;
80358: LD_ADDR_VAR 0 4
80362: PUSH
80363: LD_INT 1
80365: ST_TO_ADDR
// end ; end ;
80366: LD_VAR 0 4
80370: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
80371: LD_INT 0
80373: PPUSH
80374: PPUSH
80375: PPUSH
80376: PPUSH
// if not unit or not area then
80377: LD_VAR 0 1
80381: NOT
80382: PUSH
80383: LD_VAR 0 2
80387: NOT
80388: OR
80389: IFFALSE 80393
// exit ;
80391: GO 80556
// tmp := AreaToList ( area , i ) ;
80393: LD_ADDR_VAR 0 6
80397: PUSH
80398: LD_VAR 0 2
80402: PPUSH
80403: LD_VAR 0 5
80407: PPUSH
80408: CALL_OW 517
80412: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
80413: LD_ADDR_VAR 0 5
80417: PUSH
80418: DOUBLE
80419: LD_INT 1
80421: DEC
80422: ST_TO_ADDR
80423: LD_VAR 0 6
80427: PUSH
80428: LD_INT 1
80430: ARRAY
80431: PUSH
80432: FOR_TO
80433: IFFALSE 80554
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
80435: LD_ADDR_VAR 0 7
80439: PUSH
80440: LD_VAR 0 6
80444: PUSH
80445: LD_INT 1
80447: ARRAY
80448: PUSH
80449: LD_VAR 0 5
80453: ARRAY
80454: PUSH
80455: LD_VAR 0 6
80459: PUSH
80460: LD_INT 2
80462: ARRAY
80463: PUSH
80464: LD_VAR 0 5
80468: ARRAY
80469: PUSH
80470: EMPTY
80471: LIST
80472: LIST
80473: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
80474: LD_INT 92
80476: PUSH
80477: LD_VAR 0 7
80481: PUSH
80482: LD_INT 1
80484: ARRAY
80485: PUSH
80486: LD_VAR 0 7
80490: PUSH
80491: LD_INT 2
80493: ARRAY
80494: PUSH
80495: LD_INT 3
80497: PUSH
80498: EMPTY
80499: LIST
80500: LIST
80501: LIST
80502: LIST
80503: PPUSH
80504: CALL_OW 69
80508: PUSH
80509: LD_INT 0
80511: EQUAL
80512: IFFALSE 80552
// begin PlaceUnitArea ( unit , area , mode ) ;
80514: LD_VAR 0 1
80518: PPUSH
80519: LD_VAR 0 2
80523: PPUSH
80524: LD_VAR 0 3
80528: PPUSH
80529: CALL_OW 49
// result := IsPlaced ( unit ) ;
80533: LD_ADDR_VAR 0 4
80537: PUSH
80538: LD_VAR 0 1
80542: PPUSH
80543: CALL_OW 305
80547: ST_TO_ADDR
// exit ;
80548: POP
80549: POP
80550: GO 80556
// end ; end ;
80552: GO 80432
80554: POP
80555: POP
// end ;
80556: LD_VAR 0 4
80560: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
80561: LD_INT 0
80563: PPUSH
80564: PPUSH
80565: PPUSH
// if not side or side > 8 then
80566: LD_VAR 0 1
80570: NOT
80571: PUSH
80572: LD_VAR 0 1
80576: PUSH
80577: LD_INT 8
80579: GREATER
80580: OR
80581: IFFALSE 80585
// exit ;
80583: GO 80772
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
80585: LD_ADDR_VAR 0 4
80589: PUSH
80590: LD_INT 22
80592: PUSH
80593: LD_VAR 0 1
80597: PUSH
80598: EMPTY
80599: LIST
80600: LIST
80601: PUSH
80602: LD_INT 21
80604: PUSH
80605: LD_INT 3
80607: PUSH
80608: EMPTY
80609: LIST
80610: LIST
80611: PUSH
80612: EMPTY
80613: LIST
80614: LIST
80615: PPUSH
80616: CALL_OW 69
80620: ST_TO_ADDR
// if not tmp then
80621: LD_VAR 0 4
80625: NOT
80626: IFFALSE 80630
// exit ;
80628: GO 80772
// enable_addtolog := true ;
80630: LD_ADDR_OWVAR 81
80634: PUSH
80635: LD_INT 1
80637: ST_TO_ADDR
// AddToLog ( [ ) ;
80638: LD_STRING [
80640: PPUSH
80641: CALL_OW 561
// for i in tmp do
80645: LD_ADDR_VAR 0 3
80649: PUSH
80650: LD_VAR 0 4
80654: PUSH
80655: FOR_IN
80656: IFFALSE 80763
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
80658: LD_STRING [
80660: PUSH
80661: LD_VAR 0 3
80665: PPUSH
80666: CALL_OW 266
80670: STR
80671: PUSH
80672: LD_STRING , 
80674: STR
80675: PUSH
80676: LD_VAR 0 3
80680: PPUSH
80681: CALL_OW 250
80685: STR
80686: PUSH
80687: LD_STRING , 
80689: STR
80690: PUSH
80691: LD_VAR 0 3
80695: PPUSH
80696: CALL_OW 251
80700: STR
80701: PUSH
80702: LD_STRING , 
80704: STR
80705: PUSH
80706: LD_VAR 0 3
80710: PPUSH
80711: CALL_OW 254
80715: STR
80716: PUSH
80717: LD_STRING , 
80719: STR
80720: PUSH
80721: LD_VAR 0 3
80725: PPUSH
80726: LD_INT 1
80728: PPUSH
80729: CALL_OW 268
80733: STR
80734: PUSH
80735: LD_STRING , 
80737: STR
80738: PUSH
80739: LD_VAR 0 3
80743: PPUSH
80744: LD_INT 2
80746: PPUSH
80747: CALL_OW 268
80751: STR
80752: PUSH
80753: LD_STRING ],
80755: STR
80756: PPUSH
80757: CALL_OW 561
// end ;
80761: GO 80655
80763: POP
80764: POP
// AddToLog ( ]; ) ;
80765: LD_STRING ];
80767: PPUSH
80768: CALL_OW 561
// end ;
80772: LD_VAR 0 2
80776: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
80777: LD_INT 0
80779: PPUSH
80780: PPUSH
80781: PPUSH
80782: PPUSH
80783: PPUSH
// if not area or not rate or not max then
80784: LD_VAR 0 1
80788: NOT
80789: PUSH
80790: LD_VAR 0 2
80794: NOT
80795: OR
80796: PUSH
80797: LD_VAR 0 4
80801: NOT
80802: OR
80803: IFFALSE 80807
// exit ;
80805: GO 80996
// while 1 do
80807: LD_INT 1
80809: IFFALSE 80996
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
80811: LD_ADDR_VAR 0 9
80815: PUSH
80816: LD_VAR 0 1
80820: PPUSH
80821: LD_INT 1
80823: PPUSH
80824: CALL_OW 287
80828: PUSH
80829: LD_INT 10
80831: MUL
80832: ST_TO_ADDR
// r := rate / 10 ;
80833: LD_ADDR_VAR 0 7
80837: PUSH
80838: LD_VAR 0 2
80842: PUSH
80843: LD_INT 10
80845: DIVREAL
80846: ST_TO_ADDR
// time := 1 1$00 ;
80847: LD_ADDR_VAR 0 8
80851: PUSH
80852: LD_INT 2100
80854: ST_TO_ADDR
// if amount < min then
80855: LD_VAR 0 9
80859: PUSH
80860: LD_VAR 0 3
80864: LESS
80865: IFFALSE 80883
// r := r * 2 else
80867: LD_ADDR_VAR 0 7
80871: PUSH
80872: LD_VAR 0 7
80876: PUSH
80877: LD_INT 2
80879: MUL
80880: ST_TO_ADDR
80881: GO 80909
// if amount > max then
80883: LD_VAR 0 9
80887: PUSH
80888: LD_VAR 0 4
80892: GREATER
80893: IFFALSE 80909
// r := r / 2 ;
80895: LD_ADDR_VAR 0 7
80899: PUSH
80900: LD_VAR 0 7
80904: PUSH
80905: LD_INT 2
80907: DIVREAL
80908: ST_TO_ADDR
// time := time / r ;
80909: LD_ADDR_VAR 0 8
80913: PUSH
80914: LD_VAR 0 8
80918: PUSH
80919: LD_VAR 0 7
80923: DIVREAL
80924: ST_TO_ADDR
// if time < 0 then
80925: LD_VAR 0 8
80929: PUSH
80930: LD_INT 0
80932: LESS
80933: IFFALSE 80950
// time := time * - 1 ;
80935: LD_ADDR_VAR 0 8
80939: PUSH
80940: LD_VAR 0 8
80944: PUSH
80945: LD_INT 1
80947: NEG
80948: MUL
80949: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
80950: LD_VAR 0 8
80954: PUSH
80955: LD_INT 35
80957: PPUSH
80958: LD_INT 875
80960: PPUSH
80961: CALL_OW 12
80965: PLUS
80966: PPUSH
80967: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
80971: LD_INT 1
80973: PPUSH
80974: LD_INT 5
80976: PPUSH
80977: CALL_OW 12
80981: PPUSH
80982: LD_VAR 0 1
80986: PPUSH
80987: LD_INT 1
80989: PPUSH
80990: CALL_OW 55
// end ;
80994: GO 80807
// end ;
80996: LD_VAR 0 5
81000: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
81001: LD_INT 0
81003: PPUSH
81004: PPUSH
81005: PPUSH
81006: PPUSH
81007: PPUSH
81008: PPUSH
81009: PPUSH
81010: PPUSH
// if not turrets or not factories then
81011: LD_VAR 0 1
81015: NOT
81016: PUSH
81017: LD_VAR 0 2
81021: NOT
81022: OR
81023: IFFALSE 81027
// exit ;
81025: GO 81334
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
81027: LD_ADDR_VAR 0 10
81031: PUSH
81032: LD_INT 5
81034: PUSH
81035: LD_INT 6
81037: PUSH
81038: EMPTY
81039: LIST
81040: LIST
81041: PUSH
81042: LD_INT 2
81044: PUSH
81045: LD_INT 4
81047: PUSH
81048: EMPTY
81049: LIST
81050: LIST
81051: PUSH
81052: LD_INT 3
81054: PUSH
81055: LD_INT 5
81057: PUSH
81058: EMPTY
81059: LIST
81060: LIST
81061: PUSH
81062: EMPTY
81063: LIST
81064: LIST
81065: LIST
81066: PUSH
81067: LD_INT 24
81069: PUSH
81070: LD_INT 25
81072: PUSH
81073: EMPTY
81074: LIST
81075: LIST
81076: PUSH
81077: LD_INT 23
81079: PUSH
81080: LD_INT 27
81082: PUSH
81083: EMPTY
81084: LIST
81085: LIST
81086: PUSH
81087: EMPTY
81088: LIST
81089: LIST
81090: PUSH
81091: LD_INT 42
81093: PUSH
81094: LD_INT 43
81096: PUSH
81097: EMPTY
81098: LIST
81099: LIST
81100: PUSH
81101: LD_INT 44
81103: PUSH
81104: LD_INT 46
81106: PUSH
81107: EMPTY
81108: LIST
81109: LIST
81110: PUSH
81111: LD_INT 45
81113: PUSH
81114: LD_INT 47
81116: PUSH
81117: EMPTY
81118: LIST
81119: LIST
81120: PUSH
81121: EMPTY
81122: LIST
81123: LIST
81124: LIST
81125: PUSH
81126: EMPTY
81127: LIST
81128: LIST
81129: LIST
81130: ST_TO_ADDR
// result := [ ] ;
81131: LD_ADDR_VAR 0 3
81135: PUSH
81136: EMPTY
81137: ST_TO_ADDR
// for i in turrets do
81138: LD_ADDR_VAR 0 4
81142: PUSH
81143: LD_VAR 0 1
81147: PUSH
81148: FOR_IN
81149: IFFALSE 81332
// begin nat := GetNation ( i ) ;
81151: LD_ADDR_VAR 0 7
81155: PUSH
81156: LD_VAR 0 4
81160: PPUSH
81161: CALL_OW 248
81165: ST_TO_ADDR
// weapon := 0 ;
81166: LD_ADDR_VAR 0 8
81170: PUSH
81171: LD_INT 0
81173: ST_TO_ADDR
// if not nat then
81174: LD_VAR 0 7
81178: NOT
81179: IFFALSE 81183
// continue ;
81181: GO 81148
// for j in list [ nat ] do
81183: LD_ADDR_VAR 0 5
81187: PUSH
81188: LD_VAR 0 10
81192: PUSH
81193: LD_VAR 0 7
81197: ARRAY
81198: PUSH
81199: FOR_IN
81200: IFFALSE 81241
// if GetBWeapon ( i ) = j [ 1 ] then
81202: LD_VAR 0 4
81206: PPUSH
81207: CALL_OW 269
81211: PUSH
81212: LD_VAR 0 5
81216: PUSH
81217: LD_INT 1
81219: ARRAY
81220: EQUAL
81221: IFFALSE 81239
// begin weapon := j [ 2 ] ;
81223: LD_ADDR_VAR 0 8
81227: PUSH
81228: LD_VAR 0 5
81232: PUSH
81233: LD_INT 2
81235: ARRAY
81236: ST_TO_ADDR
// break ;
81237: GO 81241
// end ;
81239: GO 81199
81241: POP
81242: POP
// if not weapon then
81243: LD_VAR 0 8
81247: NOT
81248: IFFALSE 81252
// continue ;
81250: GO 81148
// for k in factories do
81252: LD_ADDR_VAR 0 6
81256: PUSH
81257: LD_VAR 0 2
81261: PUSH
81262: FOR_IN
81263: IFFALSE 81328
// begin weapons := AvailableWeaponList ( k ) ;
81265: LD_ADDR_VAR 0 9
81269: PUSH
81270: LD_VAR 0 6
81274: PPUSH
81275: CALL_OW 478
81279: ST_TO_ADDR
// if not weapons then
81280: LD_VAR 0 9
81284: NOT
81285: IFFALSE 81289
// continue ;
81287: GO 81262
// if weapon in weapons then
81289: LD_VAR 0 8
81293: PUSH
81294: LD_VAR 0 9
81298: IN
81299: IFFALSE 81326
// begin result := [ i , weapon ] ;
81301: LD_ADDR_VAR 0 3
81305: PUSH
81306: LD_VAR 0 4
81310: PUSH
81311: LD_VAR 0 8
81315: PUSH
81316: EMPTY
81317: LIST
81318: LIST
81319: ST_TO_ADDR
// exit ;
81320: POP
81321: POP
81322: POP
81323: POP
81324: GO 81334
// end ; end ;
81326: GO 81262
81328: POP
81329: POP
// end ;
81330: GO 81148
81332: POP
81333: POP
// end ;
81334: LD_VAR 0 3
81338: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
81339: LD_INT 0
81341: PPUSH
// if not side or side > 8 then
81342: LD_VAR 0 3
81346: NOT
81347: PUSH
81348: LD_VAR 0 3
81352: PUSH
81353: LD_INT 8
81355: GREATER
81356: OR
81357: IFFALSE 81361
// exit ;
81359: GO 81420
// if not range then
81361: LD_VAR 0 4
81365: NOT
81366: IFFALSE 81377
// range := - 12 ;
81368: LD_ADDR_VAR 0 4
81372: PUSH
81373: LD_INT 12
81375: NEG
81376: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
81377: LD_VAR 0 1
81381: PPUSH
81382: LD_VAR 0 2
81386: PPUSH
81387: LD_VAR 0 3
81391: PPUSH
81392: LD_VAR 0 4
81396: PPUSH
81397: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
81401: LD_VAR 0 1
81405: PPUSH
81406: LD_VAR 0 2
81410: PPUSH
81411: LD_VAR 0 3
81415: PPUSH
81416: CALL_OW 331
// end ;
81420: LD_VAR 0 5
81424: RET
// export function Video ( mode ) ; begin
81425: LD_INT 0
81427: PPUSH
// ingame_video = mode ;
81428: LD_ADDR_OWVAR 52
81432: PUSH
81433: LD_VAR 0 1
81437: ST_TO_ADDR
// interface_hidden = mode ;
81438: LD_ADDR_OWVAR 54
81442: PUSH
81443: LD_VAR 0 1
81447: ST_TO_ADDR
// end ;
81448: LD_VAR 0 2
81452: RET
// export function Join ( array , element ) ; begin
81453: LD_INT 0
81455: PPUSH
// result := Replace ( array , array + 1 , element ) ;
81456: LD_ADDR_VAR 0 3
81460: PUSH
81461: LD_VAR 0 1
81465: PPUSH
81466: LD_VAR 0 1
81470: PUSH
81471: LD_INT 1
81473: PLUS
81474: PPUSH
81475: LD_VAR 0 2
81479: PPUSH
81480: CALL_OW 1
81484: ST_TO_ADDR
// end ;
81485: LD_VAR 0 3
81489: RET
// export function JoinUnion ( array , element ) ; begin
81490: LD_INT 0
81492: PPUSH
// result := array union element ;
81493: LD_ADDR_VAR 0 3
81497: PUSH
81498: LD_VAR 0 1
81502: PUSH
81503: LD_VAR 0 2
81507: UNION
81508: ST_TO_ADDR
// end ;
81509: LD_VAR 0 3
81513: RET
// export function GetBehemoths ( side ) ; begin
81514: LD_INT 0
81516: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
81517: LD_ADDR_VAR 0 2
81521: PUSH
81522: LD_INT 22
81524: PUSH
81525: LD_VAR 0 1
81529: PUSH
81530: EMPTY
81531: LIST
81532: LIST
81533: PUSH
81534: LD_INT 31
81536: PUSH
81537: LD_INT 25
81539: PUSH
81540: EMPTY
81541: LIST
81542: LIST
81543: PUSH
81544: EMPTY
81545: LIST
81546: LIST
81547: PPUSH
81548: CALL_OW 69
81552: ST_TO_ADDR
// end ;
81553: LD_VAR 0 2
81557: RET
// export function Shuffle ( array ) ; var i , index ; begin
81558: LD_INT 0
81560: PPUSH
81561: PPUSH
81562: PPUSH
// result := [ ] ;
81563: LD_ADDR_VAR 0 2
81567: PUSH
81568: EMPTY
81569: ST_TO_ADDR
// if not array then
81570: LD_VAR 0 1
81574: NOT
81575: IFFALSE 81579
// exit ;
81577: GO 81678
// Randomize ;
81579: CALL_OW 10
// for i = array downto 1 do
81583: LD_ADDR_VAR 0 3
81587: PUSH
81588: DOUBLE
81589: LD_VAR 0 1
81593: INC
81594: ST_TO_ADDR
81595: LD_INT 1
81597: PUSH
81598: FOR_DOWNTO
81599: IFFALSE 81676
// begin index := rand ( 1 , array ) ;
81601: LD_ADDR_VAR 0 4
81605: PUSH
81606: LD_INT 1
81608: PPUSH
81609: LD_VAR 0 1
81613: PPUSH
81614: CALL_OW 12
81618: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
81619: LD_ADDR_VAR 0 2
81623: PUSH
81624: LD_VAR 0 2
81628: PPUSH
81629: LD_VAR 0 2
81633: PUSH
81634: LD_INT 1
81636: PLUS
81637: PPUSH
81638: LD_VAR 0 1
81642: PUSH
81643: LD_VAR 0 4
81647: ARRAY
81648: PPUSH
81649: CALL_OW 2
81653: ST_TO_ADDR
// array := Delete ( array , index ) ;
81654: LD_ADDR_VAR 0 1
81658: PUSH
81659: LD_VAR 0 1
81663: PPUSH
81664: LD_VAR 0 4
81668: PPUSH
81669: CALL_OW 3
81673: ST_TO_ADDR
// end ;
81674: GO 81598
81676: POP
81677: POP
// end ;
81678: LD_VAR 0 2
81682: RET
// export function GetBaseMaterials ( base ) ; begin
81683: LD_INT 0
81685: PPUSH
// result := [ 0 , 0 , 0 ] ;
81686: LD_ADDR_VAR 0 2
81690: PUSH
81691: LD_INT 0
81693: PUSH
81694: LD_INT 0
81696: PUSH
81697: LD_INT 0
81699: PUSH
81700: EMPTY
81701: LIST
81702: LIST
81703: LIST
81704: ST_TO_ADDR
// if not base then
81705: LD_VAR 0 1
81709: NOT
81710: IFFALSE 81714
// exit ;
81712: GO 81763
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
81714: LD_ADDR_VAR 0 2
81718: PUSH
81719: LD_VAR 0 1
81723: PPUSH
81724: LD_INT 1
81726: PPUSH
81727: CALL_OW 275
81731: PUSH
81732: LD_VAR 0 1
81736: PPUSH
81737: LD_INT 2
81739: PPUSH
81740: CALL_OW 275
81744: PUSH
81745: LD_VAR 0 1
81749: PPUSH
81750: LD_INT 3
81752: PPUSH
81753: CALL_OW 275
81757: PUSH
81758: EMPTY
81759: LIST
81760: LIST
81761: LIST
81762: ST_TO_ADDR
// end ;
81763: LD_VAR 0 2
81767: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
81768: LD_INT 0
81770: PPUSH
81771: PPUSH
// result := array ;
81772: LD_ADDR_VAR 0 3
81776: PUSH
81777: LD_VAR 0 1
81781: ST_TO_ADDR
// if size >= result then
81782: LD_VAR 0 2
81786: PUSH
81787: LD_VAR 0 3
81791: GREATEREQUAL
81792: IFFALSE 81796
// exit ;
81794: GO 81846
// if size then
81796: LD_VAR 0 2
81800: IFFALSE 81846
// for i := array downto size do
81802: LD_ADDR_VAR 0 4
81806: PUSH
81807: DOUBLE
81808: LD_VAR 0 1
81812: INC
81813: ST_TO_ADDR
81814: LD_VAR 0 2
81818: PUSH
81819: FOR_DOWNTO
81820: IFFALSE 81844
// result := Delete ( result , result ) ;
81822: LD_ADDR_VAR 0 3
81826: PUSH
81827: LD_VAR 0 3
81831: PPUSH
81832: LD_VAR 0 3
81836: PPUSH
81837: CALL_OW 3
81841: ST_TO_ADDR
81842: GO 81819
81844: POP
81845: POP
// end ;
81846: LD_VAR 0 3
81850: RET
// export function ComExit ( unit ) ; var tmp ; begin
81851: LD_INT 0
81853: PPUSH
81854: PPUSH
// if not IsInUnit ( unit ) then
81855: LD_VAR 0 1
81859: PPUSH
81860: CALL_OW 310
81864: NOT
81865: IFFALSE 81869
// exit ;
81867: GO 81929
// tmp := IsInUnit ( unit ) ;
81869: LD_ADDR_VAR 0 3
81873: PUSH
81874: LD_VAR 0 1
81878: PPUSH
81879: CALL_OW 310
81883: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
81884: LD_VAR 0 3
81888: PPUSH
81889: CALL_OW 247
81893: PUSH
81894: LD_INT 2
81896: EQUAL
81897: IFFALSE 81910
// ComExitVehicle ( unit ) else
81899: LD_VAR 0 1
81903: PPUSH
81904: CALL_OW 121
81908: GO 81919
// ComExitBuilding ( unit ) ;
81910: LD_VAR 0 1
81914: PPUSH
81915: CALL_OW 122
// result := tmp ;
81919: LD_ADDR_VAR 0 2
81923: PUSH
81924: LD_VAR 0 3
81928: ST_TO_ADDR
// end ;
81929: LD_VAR 0 2
81933: RET
// export function ComExitAll ( units ) ; var i ; begin
81934: LD_INT 0
81936: PPUSH
81937: PPUSH
// if not units then
81938: LD_VAR 0 1
81942: NOT
81943: IFFALSE 81947
// exit ;
81945: GO 81973
// for i in units do
81947: LD_ADDR_VAR 0 3
81951: PUSH
81952: LD_VAR 0 1
81956: PUSH
81957: FOR_IN
81958: IFFALSE 81971
// ComExit ( i ) ;
81960: LD_VAR 0 3
81964: PPUSH
81965: CALL 81851 0 1
81969: GO 81957
81971: POP
81972: POP
// end ;
81973: LD_VAR 0 2
81977: RET
// export function ResetHc ; begin
81978: LD_INT 0
81980: PPUSH
// InitHc ;
81981: CALL_OW 19
// hc_importance := 0 ;
81985: LD_ADDR_OWVAR 32
81989: PUSH
81990: LD_INT 0
81992: ST_TO_ADDR
// end ;
81993: LD_VAR 0 1
81997: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
81998: LD_INT 0
82000: PPUSH
82001: PPUSH
82002: PPUSH
// _x := ( x1 + x2 ) div 2 ;
82003: LD_ADDR_VAR 0 6
82007: PUSH
82008: LD_VAR 0 1
82012: PUSH
82013: LD_VAR 0 3
82017: PLUS
82018: PUSH
82019: LD_INT 2
82021: DIV
82022: ST_TO_ADDR
// if _x < 0 then
82023: LD_VAR 0 6
82027: PUSH
82028: LD_INT 0
82030: LESS
82031: IFFALSE 82048
// _x := _x * - 1 ;
82033: LD_ADDR_VAR 0 6
82037: PUSH
82038: LD_VAR 0 6
82042: PUSH
82043: LD_INT 1
82045: NEG
82046: MUL
82047: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
82048: LD_ADDR_VAR 0 7
82052: PUSH
82053: LD_VAR 0 2
82057: PUSH
82058: LD_VAR 0 4
82062: PLUS
82063: PUSH
82064: LD_INT 2
82066: DIV
82067: ST_TO_ADDR
// if _y < 0 then
82068: LD_VAR 0 7
82072: PUSH
82073: LD_INT 0
82075: LESS
82076: IFFALSE 82093
// _y := _y * - 1 ;
82078: LD_ADDR_VAR 0 7
82082: PUSH
82083: LD_VAR 0 7
82087: PUSH
82088: LD_INT 1
82090: NEG
82091: MUL
82092: ST_TO_ADDR
// result := [ _x , _y ] ;
82093: LD_ADDR_VAR 0 5
82097: PUSH
82098: LD_VAR 0 6
82102: PUSH
82103: LD_VAR 0 7
82107: PUSH
82108: EMPTY
82109: LIST
82110: LIST
82111: ST_TO_ADDR
// end ;
82112: LD_VAR 0 5
82116: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
82117: LD_INT 0
82119: PPUSH
82120: PPUSH
82121: PPUSH
82122: PPUSH
// task := GetTaskList ( unit ) ;
82123: LD_ADDR_VAR 0 7
82127: PUSH
82128: LD_VAR 0 1
82132: PPUSH
82133: CALL_OW 437
82137: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
82138: LD_VAR 0 7
82142: NOT
82143: PUSH
82144: LD_VAR 0 1
82148: PPUSH
82149: LD_VAR 0 2
82153: PPUSH
82154: CALL_OW 308
82158: NOT
82159: AND
82160: IFFALSE 82164
// exit ;
82162: GO 82282
// if IsInArea ( unit , area ) then
82164: LD_VAR 0 1
82168: PPUSH
82169: LD_VAR 0 2
82173: PPUSH
82174: CALL_OW 308
82178: IFFALSE 82196
// begin ComMoveToArea ( unit , goAway ) ;
82180: LD_VAR 0 1
82184: PPUSH
82185: LD_VAR 0 3
82189: PPUSH
82190: CALL_OW 113
// exit ;
82194: GO 82282
// end ; if task [ 1 ] [ 1 ] <> M then
82196: LD_VAR 0 7
82200: PUSH
82201: LD_INT 1
82203: ARRAY
82204: PUSH
82205: LD_INT 1
82207: ARRAY
82208: PUSH
82209: LD_STRING M
82211: NONEQUAL
82212: IFFALSE 82216
// exit ;
82214: GO 82282
// x := task [ 1 ] [ 2 ] ;
82216: LD_ADDR_VAR 0 5
82220: PUSH
82221: LD_VAR 0 7
82225: PUSH
82226: LD_INT 1
82228: ARRAY
82229: PUSH
82230: LD_INT 2
82232: ARRAY
82233: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
82234: LD_ADDR_VAR 0 6
82238: PUSH
82239: LD_VAR 0 7
82243: PUSH
82244: LD_INT 1
82246: ARRAY
82247: PUSH
82248: LD_INT 3
82250: ARRAY
82251: ST_TO_ADDR
// if InArea ( x , y , area ) then
82252: LD_VAR 0 5
82256: PPUSH
82257: LD_VAR 0 6
82261: PPUSH
82262: LD_VAR 0 2
82266: PPUSH
82267: CALL_OW 309
82271: IFFALSE 82282
// ComStop ( unit ) ;
82273: LD_VAR 0 1
82277: PPUSH
82278: CALL_OW 141
// end ;
82282: LD_VAR 0 4
82286: RET
// export function Abs ( value ) ; begin
82287: LD_INT 0
82289: PPUSH
// result := value ;
82290: LD_ADDR_VAR 0 2
82294: PUSH
82295: LD_VAR 0 1
82299: ST_TO_ADDR
// if value < 0 then
82300: LD_VAR 0 1
82304: PUSH
82305: LD_INT 0
82307: LESS
82308: IFFALSE 82325
// result := value * - 1 ;
82310: LD_ADDR_VAR 0 2
82314: PUSH
82315: LD_VAR 0 1
82319: PUSH
82320: LD_INT 1
82322: NEG
82323: MUL
82324: ST_TO_ADDR
// end ;
82325: LD_VAR 0 2
82329: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
82330: LD_INT 0
82332: PPUSH
82333: PPUSH
82334: PPUSH
82335: PPUSH
82336: PPUSH
82337: PPUSH
82338: PPUSH
82339: PPUSH
// if not unit or not building then
82340: LD_VAR 0 1
82344: NOT
82345: PUSH
82346: LD_VAR 0 2
82350: NOT
82351: OR
82352: IFFALSE 82356
// exit ;
82354: GO 82582
// x := GetX ( building ) ;
82356: LD_ADDR_VAR 0 4
82360: PUSH
82361: LD_VAR 0 2
82365: PPUSH
82366: CALL_OW 250
82370: ST_TO_ADDR
// y := GetY ( building ) ;
82371: LD_ADDR_VAR 0 6
82375: PUSH
82376: LD_VAR 0 2
82380: PPUSH
82381: CALL_OW 251
82385: ST_TO_ADDR
// d := GetDir ( building ) ;
82386: LD_ADDR_VAR 0 8
82390: PUSH
82391: LD_VAR 0 2
82395: PPUSH
82396: CALL_OW 254
82400: ST_TO_ADDR
// r := 4 ;
82401: LD_ADDR_VAR 0 9
82405: PUSH
82406: LD_INT 4
82408: ST_TO_ADDR
// for i := 1 to 5 do
82409: LD_ADDR_VAR 0 10
82413: PUSH
82414: DOUBLE
82415: LD_INT 1
82417: DEC
82418: ST_TO_ADDR
82419: LD_INT 5
82421: PUSH
82422: FOR_TO
82423: IFFALSE 82580
// begin _x := ShiftX ( x , d , r + i ) ;
82425: LD_ADDR_VAR 0 5
82429: PUSH
82430: LD_VAR 0 4
82434: PPUSH
82435: LD_VAR 0 8
82439: PPUSH
82440: LD_VAR 0 9
82444: PUSH
82445: LD_VAR 0 10
82449: PLUS
82450: PPUSH
82451: CALL_OW 272
82455: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
82456: LD_ADDR_VAR 0 7
82460: PUSH
82461: LD_VAR 0 6
82465: PPUSH
82466: LD_VAR 0 8
82470: PPUSH
82471: LD_VAR 0 9
82475: PUSH
82476: LD_VAR 0 10
82480: PLUS
82481: PPUSH
82482: CALL_OW 273
82486: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
82487: LD_VAR 0 5
82491: PPUSH
82492: LD_VAR 0 7
82496: PPUSH
82497: CALL_OW 488
82501: PUSH
82502: LD_VAR 0 5
82506: PPUSH
82507: LD_VAR 0 7
82511: PPUSH
82512: CALL_OW 428
82516: PPUSH
82517: CALL_OW 247
82521: PUSH
82522: LD_INT 3
82524: PUSH
82525: LD_INT 2
82527: PUSH
82528: EMPTY
82529: LIST
82530: LIST
82531: IN
82532: NOT
82533: AND
82534: IFFALSE 82578
// begin ComMoveXY ( unit , _x , _y ) ;
82536: LD_VAR 0 1
82540: PPUSH
82541: LD_VAR 0 5
82545: PPUSH
82546: LD_VAR 0 7
82550: PPUSH
82551: CALL_OW 111
// result := [ _x , _y ] ;
82555: LD_ADDR_VAR 0 3
82559: PUSH
82560: LD_VAR 0 5
82564: PUSH
82565: LD_VAR 0 7
82569: PUSH
82570: EMPTY
82571: LIST
82572: LIST
82573: ST_TO_ADDR
// exit ;
82574: POP
82575: POP
82576: GO 82582
// end ; end ;
82578: GO 82422
82580: POP
82581: POP
// end ;
82582: LD_VAR 0 3
82586: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
82587: LD_INT 0
82589: PPUSH
82590: PPUSH
82591: PPUSH
// result := 0 ;
82592: LD_ADDR_VAR 0 3
82596: PUSH
82597: LD_INT 0
82599: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
82600: LD_VAR 0 1
82604: PUSH
82605: LD_INT 0
82607: LESS
82608: PUSH
82609: LD_VAR 0 1
82613: PUSH
82614: LD_INT 8
82616: GREATER
82617: OR
82618: PUSH
82619: LD_VAR 0 2
82623: PUSH
82624: LD_INT 0
82626: LESS
82627: OR
82628: PUSH
82629: LD_VAR 0 2
82633: PUSH
82634: LD_INT 8
82636: GREATER
82637: OR
82638: IFFALSE 82642
// exit ;
82640: GO 82717
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
82642: LD_ADDR_VAR 0 4
82646: PUSH
82647: LD_INT 22
82649: PUSH
82650: LD_VAR 0 2
82654: PUSH
82655: EMPTY
82656: LIST
82657: LIST
82658: PPUSH
82659: CALL_OW 69
82663: PUSH
82664: FOR_IN
82665: IFFALSE 82715
// begin un := UnitShoot ( i ) ;
82667: LD_ADDR_VAR 0 5
82671: PUSH
82672: LD_VAR 0 4
82676: PPUSH
82677: CALL_OW 504
82681: ST_TO_ADDR
// if GetSide ( un ) = side1 then
82682: LD_VAR 0 5
82686: PPUSH
82687: CALL_OW 255
82691: PUSH
82692: LD_VAR 0 1
82696: EQUAL
82697: IFFALSE 82713
// begin result := un ;
82699: LD_ADDR_VAR 0 3
82703: PUSH
82704: LD_VAR 0 5
82708: ST_TO_ADDR
// exit ;
82709: POP
82710: POP
82711: GO 82717
// end ; end ;
82713: GO 82664
82715: POP
82716: POP
// end ;
82717: LD_VAR 0 3
82721: RET
// export function GetCargoBay ( units ) ; begin
82722: LD_INT 0
82724: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
82725: LD_ADDR_VAR 0 2
82729: PUSH
82730: LD_VAR 0 1
82734: PPUSH
82735: LD_INT 2
82737: PUSH
82738: LD_INT 34
82740: PUSH
82741: LD_INT 12
82743: PUSH
82744: EMPTY
82745: LIST
82746: LIST
82747: PUSH
82748: LD_INT 34
82750: PUSH
82751: LD_INT 51
82753: PUSH
82754: EMPTY
82755: LIST
82756: LIST
82757: PUSH
82758: LD_INT 34
82760: PUSH
82761: LD_INT 32
82763: PUSH
82764: EMPTY
82765: LIST
82766: LIST
82767: PUSH
82768: LD_INT 34
82770: PUSH
82771: LD_INT 89
82773: PUSH
82774: EMPTY
82775: LIST
82776: LIST
82777: PUSH
82778: EMPTY
82779: LIST
82780: LIST
82781: LIST
82782: LIST
82783: LIST
82784: PPUSH
82785: CALL_OW 72
82789: ST_TO_ADDR
// end ;
82790: LD_VAR 0 2
82794: RET
// export function Negate ( value ) ; begin
82795: LD_INT 0
82797: PPUSH
// result := not value ;
82798: LD_ADDR_VAR 0 2
82802: PUSH
82803: LD_VAR 0 1
82807: NOT
82808: ST_TO_ADDR
// end ;
82809: LD_VAR 0 2
82813: RET
// export function Inc ( value ) ; begin
82814: LD_INT 0
82816: PPUSH
// result := value + 1 ;
82817: LD_ADDR_VAR 0 2
82821: PUSH
82822: LD_VAR 0 1
82826: PUSH
82827: LD_INT 1
82829: PLUS
82830: ST_TO_ADDR
// end ;
82831: LD_VAR 0 2
82835: RET
// export function Dec ( value ) ; begin
82836: LD_INT 0
82838: PPUSH
// result := value - 1 ;
82839: LD_ADDR_VAR 0 2
82843: PUSH
82844: LD_VAR 0 1
82848: PUSH
82849: LD_INT 1
82851: MINUS
82852: ST_TO_ADDR
// end ;
82853: LD_VAR 0 2
82857: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
82858: LD_INT 0
82860: PPUSH
82861: PPUSH
82862: PPUSH
82863: PPUSH
82864: PPUSH
82865: PPUSH
82866: PPUSH
82867: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
82868: LD_VAR 0 1
82872: PPUSH
82873: LD_VAR 0 2
82877: PPUSH
82878: CALL_OW 488
82882: NOT
82883: PUSH
82884: LD_VAR 0 3
82888: PPUSH
82889: LD_VAR 0 4
82893: PPUSH
82894: CALL_OW 488
82898: NOT
82899: OR
82900: IFFALSE 82913
// begin result := - 1 ;
82902: LD_ADDR_VAR 0 5
82906: PUSH
82907: LD_INT 1
82909: NEG
82910: ST_TO_ADDR
// exit ;
82911: GO 83148
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
82913: LD_ADDR_VAR 0 12
82917: PUSH
82918: LD_VAR 0 1
82922: PPUSH
82923: LD_VAR 0 2
82927: PPUSH
82928: LD_VAR 0 3
82932: PPUSH
82933: LD_VAR 0 4
82937: PPUSH
82938: CALL 81998 0 4
82942: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
82943: LD_ADDR_VAR 0 11
82947: PUSH
82948: LD_VAR 0 1
82952: PPUSH
82953: LD_VAR 0 2
82957: PPUSH
82958: LD_VAR 0 12
82962: PUSH
82963: LD_INT 1
82965: ARRAY
82966: PPUSH
82967: LD_VAR 0 12
82971: PUSH
82972: LD_INT 2
82974: ARRAY
82975: PPUSH
82976: CALL_OW 298
82980: ST_TO_ADDR
// distance := 9999 ;
82981: LD_ADDR_VAR 0 10
82985: PUSH
82986: LD_INT 9999
82988: ST_TO_ADDR
// for i := 0 to 5 do
82989: LD_ADDR_VAR 0 6
82993: PUSH
82994: DOUBLE
82995: LD_INT 0
82997: DEC
82998: ST_TO_ADDR
82999: LD_INT 5
83001: PUSH
83002: FOR_TO
83003: IFFALSE 83146
// begin _x := ShiftX ( x1 , i , centerDist ) ;
83005: LD_ADDR_VAR 0 7
83009: PUSH
83010: LD_VAR 0 1
83014: PPUSH
83015: LD_VAR 0 6
83019: PPUSH
83020: LD_VAR 0 11
83024: PPUSH
83025: CALL_OW 272
83029: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
83030: LD_ADDR_VAR 0 8
83034: PUSH
83035: LD_VAR 0 2
83039: PPUSH
83040: LD_VAR 0 6
83044: PPUSH
83045: LD_VAR 0 11
83049: PPUSH
83050: CALL_OW 273
83054: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
83055: LD_VAR 0 7
83059: PPUSH
83060: LD_VAR 0 8
83064: PPUSH
83065: CALL_OW 488
83069: NOT
83070: IFFALSE 83074
// continue ;
83072: GO 83002
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
83074: LD_ADDR_VAR 0 9
83078: PUSH
83079: LD_VAR 0 12
83083: PUSH
83084: LD_INT 1
83086: ARRAY
83087: PPUSH
83088: LD_VAR 0 12
83092: PUSH
83093: LD_INT 2
83095: ARRAY
83096: PPUSH
83097: LD_VAR 0 7
83101: PPUSH
83102: LD_VAR 0 8
83106: PPUSH
83107: CALL_OW 298
83111: ST_TO_ADDR
// if tmp < distance then
83112: LD_VAR 0 9
83116: PUSH
83117: LD_VAR 0 10
83121: LESS
83122: IFFALSE 83144
// begin result := i ;
83124: LD_ADDR_VAR 0 5
83128: PUSH
83129: LD_VAR 0 6
83133: ST_TO_ADDR
// distance := tmp ;
83134: LD_ADDR_VAR 0 10
83138: PUSH
83139: LD_VAR 0 9
83143: ST_TO_ADDR
// end ; end ;
83144: GO 83002
83146: POP
83147: POP
// end ;
83148: LD_VAR 0 5
83152: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
83153: LD_INT 0
83155: PPUSH
83156: PPUSH
// if not driver or not IsInUnit ( driver ) then
83157: LD_VAR 0 1
83161: NOT
83162: PUSH
83163: LD_VAR 0 1
83167: PPUSH
83168: CALL_OW 310
83172: NOT
83173: OR
83174: IFFALSE 83178
// exit ;
83176: GO 83268
// vehicle := IsInUnit ( driver ) ;
83178: LD_ADDR_VAR 0 3
83182: PUSH
83183: LD_VAR 0 1
83187: PPUSH
83188: CALL_OW 310
83192: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
83193: LD_VAR 0 1
83197: PPUSH
83198: LD_STRING \
83200: PUSH
83201: LD_INT 0
83203: PUSH
83204: LD_INT 0
83206: PUSH
83207: LD_INT 0
83209: PUSH
83210: LD_INT 0
83212: PUSH
83213: LD_INT 0
83215: PUSH
83216: LD_INT 0
83218: PUSH
83219: EMPTY
83220: LIST
83221: LIST
83222: LIST
83223: LIST
83224: LIST
83225: LIST
83226: LIST
83227: PUSH
83228: LD_STRING E
83230: PUSH
83231: LD_INT 0
83233: PUSH
83234: LD_INT 0
83236: PUSH
83237: LD_VAR 0 3
83241: PUSH
83242: LD_INT 0
83244: PUSH
83245: LD_INT 0
83247: PUSH
83248: LD_INT 0
83250: PUSH
83251: EMPTY
83252: LIST
83253: LIST
83254: LIST
83255: LIST
83256: LIST
83257: LIST
83258: LIST
83259: PUSH
83260: EMPTY
83261: LIST
83262: LIST
83263: PPUSH
83264: CALL_OW 446
// end ;
83268: LD_VAR 0 2
83272: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
83273: LD_INT 0
83275: PPUSH
83276: PPUSH
// if not driver or not IsInUnit ( driver ) then
83277: LD_VAR 0 1
83281: NOT
83282: PUSH
83283: LD_VAR 0 1
83287: PPUSH
83288: CALL_OW 310
83292: NOT
83293: OR
83294: IFFALSE 83298
// exit ;
83296: GO 83388
// vehicle := IsInUnit ( driver ) ;
83298: LD_ADDR_VAR 0 3
83302: PUSH
83303: LD_VAR 0 1
83307: PPUSH
83308: CALL_OW 310
83312: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
83313: LD_VAR 0 1
83317: PPUSH
83318: LD_STRING \
83320: PUSH
83321: LD_INT 0
83323: PUSH
83324: LD_INT 0
83326: PUSH
83327: LD_INT 0
83329: PUSH
83330: LD_INT 0
83332: PUSH
83333: LD_INT 0
83335: PUSH
83336: LD_INT 0
83338: PUSH
83339: EMPTY
83340: LIST
83341: LIST
83342: LIST
83343: LIST
83344: LIST
83345: LIST
83346: LIST
83347: PUSH
83348: LD_STRING E
83350: PUSH
83351: LD_INT 0
83353: PUSH
83354: LD_INT 0
83356: PUSH
83357: LD_VAR 0 3
83361: PUSH
83362: LD_INT 0
83364: PUSH
83365: LD_INT 0
83367: PUSH
83368: LD_INT 0
83370: PUSH
83371: EMPTY
83372: LIST
83373: LIST
83374: LIST
83375: LIST
83376: LIST
83377: LIST
83378: LIST
83379: PUSH
83380: EMPTY
83381: LIST
83382: LIST
83383: PPUSH
83384: CALL_OW 447
// end ;
83388: LD_VAR 0 2
83392: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
83393: LD_INT 0
83395: PPUSH
83396: PPUSH
83397: PPUSH
// tmp := [ ] ;
83398: LD_ADDR_VAR 0 5
83402: PUSH
83403: EMPTY
83404: ST_TO_ADDR
// for i in units do
83405: LD_ADDR_VAR 0 4
83409: PUSH
83410: LD_VAR 0 1
83414: PUSH
83415: FOR_IN
83416: IFFALSE 83454
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
83418: LD_ADDR_VAR 0 5
83422: PUSH
83423: LD_VAR 0 5
83427: PPUSH
83428: LD_VAR 0 5
83432: PUSH
83433: LD_INT 1
83435: PLUS
83436: PPUSH
83437: LD_VAR 0 4
83441: PPUSH
83442: CALL_OW 256
83446: PPUSH
83447: CALL_OW 2
83451: ST_TO_ADDR
83452: GO 83415
83454: POP
83455: POP
// if not tmp then
83456: LD_VAR 0 5
83460: NOT
83461: IFFALSE 83465
// exit ;
83463: GO 83513
// if asc then
83465: LD_VAR 0 2
83469: IFFALSE 83493
// result := SortListByListAsc ( units , tmp ) else
83471: LD_ADDR_VAR 0 3
83475: PUSH
83476: LD_VAR 0 1
83480: PPUSH
83481: LD_VAR 0 5
83485: PPUSH
83486: CALL_OW 76
83490: ST_TO_ADDR
83491: GO 83513
// result := SortListByListDesc ( units , tmp ) ;
83493: LD_ADDR_VAR 0 3
83497: PUSH
83498: LD_VAR 0 1
83502: PPUSH
83503: LD_VAR 0 5
83507: PPUSH
83508: CALL_OW 77
83512: ST_TO_ADDR
// end ;
83513: LD_VAR 0 3
83517: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
83518: LD_INT 0
83520: PPUSH
83521: PPUSH
// task := GetTaskList ( mech ) ;
83522: LD_ADDR_VAR 0 4
83526: PUSH
83527: LD_VAR 0 1
83531: PPUSH
83532: CALL_OW 437
83536: ST_TO_ADDR
// if not task then
83537: LD_VAR 0 4
83541: NOT
83542: IFFALSE 83546
// exit ;
83544: GO 83588
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
83546: LD_ADDR_VAR 0 3
83550: PUSH
83551: LD_VAR 0 4
83555: PUSH
83556: LD_INT 1
83558: ARRAY
83559: PUSH
83560: LD_INT 1
83562: ARRAY
83563: PUSH
83564: LD_STRING r
83566: EQUAL
83567: PUSH
83568: LD_VAR 0 4
83572: PUSH
83573: LD_INT 1
83575: ARRAY
83576: PUSH
83577: LD_INT 4
83579: ARRAY
83580: PUSH
83581: LD_VAR 0 2
83585: EQUAL
83586: AND
83587: ST_TO_ADDR
// end ;
83588: LD_VAR 0 3
83592: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
83593: LD_INT 0
83595: PPUSH
// SetDir ( unit , d ) ;
83596: LD_VAR 0 1
83600: PPUSH
83601: LD_VAR 0 4
83605: PPUSH
83606: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
83610: LD_VAR 0 1
83614: PPUSH
83615: LD_VAR 0 2
83619: PPUSH
83620: LD_VAR 0 3
83624: PPUSH
83625: LD_VAR 0 5
83629: PPUSH
83630: CALL_OW 48
// end ;
83634: LD_VAR 0 6
83638: RET
// export function ToNaturalNumber ( number ) ; begin
83639: LD_INT 0
83641: PPUSH
// result := number div 1 ;
83642: LD_ADDR_VAR 0 2
83646: PUSH
83647: LD_VAR 0 1
83651: PUSH
83652: LD_INT 1
83654: DIV
83655: ST_TO_ADDR
// if number < 0 then
83656: LD_VAR 0 1
83660: PUSH
83661: LD_INT 0
83663: LESS
83664: IFFALSE 83674
// result := 0 ;
83666: LD_ADDR_VAR 0 2
83670: PUSH
83671: LD_INT 0
83673: ST_TO_ADDR
// end ;
83674: LD_VAR 0 2
83678: RET
// export function SortByClass ( units , class ) ; var un ; begin
83679: LD_INT 0
83681: PPUSH
83682: PPUSH
// if not units or not class then
83683: LD_VAR 0 1
83687: NOT
83688: PUSH
83689: LD_VAR 0 2
83693: NOT
83694: OR
83695: IFFALSE 83699
// exit ;
83697: GO 83794
// result := [ ] ;
83699: LD_ADDR_VAR 0 3
83703: PUSH
83704: EMPTY
83705: ST_TO_ADDR
// for un in units do
83706: LD_ADDR_VAR 0 4
83710: PUSH
83711: LD_VAR 0 1
83715: PUSH
83716: FOR_IN
83717: IFFALSE 83792
// if GetClass ( un ) = class then
83719: LD_VAR 0 4
83723: PPUSH
83724: CALL_OW 257
83728: PUSH
83729: LD_VAR 0 2
83733: EQUAL
83734: IFFALSE 83761
// result := Insert ( result , 1 , un ) else
83736: LD_ADDR_VAR 0 3
83740: PUSH
83741: LD_VAR 0 3
83745: PPUSH
83746: LD_INT 1
83748: PPUSH
83749: LD_VAR 0 4
83753: PPUSH
83754: CALL_OW 2
83758: ST_TO_ADDR
83759: GO 83790
// result := Replace ( result , result + 1 , un ) ;
83761: LD_ADDR_VAR 0 3
83765: PUSH
83766: LD_VAR 0 3
83770: PPUSH
83771: LD_VAR 0 3
83775: PUSH
83776: LD_INT 1
83778: PLUS
83779: PPUSH
83780: LD_VAR 0 4
83784: PPUSH
83785: CALL_OW 1
83789: ST_TO_ADDR
83790: GO 83716
83792: POP
83793: POP
// end ;
83794: LD_VAR 0 3
83798: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
83799: LD_INT 0
83801: PPUSH
83802: PPUSH
83803: PPUSH
83804: PPUSH
83805: PPUSH
83806: PPUSH
83807: PPUSH
// result := [ ] ;
83808: LD_ADDR_VAR 0 4
83812: PUSH
83813: EMPTY
83814: ST_TO_ADDR
// if x - r < 0 then
83815: LD_VAR 0 1
83819: PUSH
83820: LD_VAR 0 3
83824: MINUS
83825: PUSH
83826: LD_INT 0
83828: LESS
83829: IFFALSE 83841
// min_x := 0 else
83831: LD_ADDR_VAR 0 8
83835: PUSH
83836: LD_INT 0
83838: ST_TO_ADDR
83839: GO 83857
// min_x := x - r ;
83841: LD_ADDR_VAR 0 8
83845: PUSH
83846: LD_VAR 0 1
83850: PUSH
83851: LD_VAR 0 3
83855: MINUS
83856: ST_TO_ADDR
// if y - r < 0 then
83857: LD_VAR 0 2
83861: PUSH
83862: LD_VAR 0 3
83866: MINUS
83867: PUSH
83868: LD_INT 0
83870: LESS
83871: IFFALSE 83883
// min_y := 0 else
83873: LD_ADDR_VAR 0 7
83877: PUSH
83878: LD_INT 0
83880: ST_TO_ADDR
83881: GO 83899
// min_y := y - r ;
83883: LD_ADDR_VAR 0 7
83887: PUSH
83888: LD_VAR 0 2
83892: PUSH
83893: LD_VAR 0 3
83897: MINUS
83898: ST_TO_ADDR
// max_x := x + r ;
83899: LD_ADDR_VAR 0 9
83903: PUSH
83904: LD_VAR 0 1
83908: PUSH
83909: LD_VAR 0 3
83913: PLUS
83914: ST_TO_ADDR
// max_y := y + r ;
83915: LD_ADDR_VAR 0 10
83919: PUSH
83920: LD_VAR 0 2
83924: PUSH
83925: LD_VAR 0 3
83929: PLUS
83930: ST_TO_ADDR
// for _x = min_x to max_x do
83931: LD_ADDR_VAR 0 5
83935: PUSH
83936: DOUBLE
83937: LD_VAR 0 8
83941: DEC
83942: ST_TO_ADDR
83943: LD_VAR 0 9
83947: PUSH
83948: FOR_TO
83949: IFFALSE 84050
// for _y = min_y to max_y do
83951: LD_ADDR_VAR 0 6
83955: PUSH
83956: DOUBLE
83957: LD_VAR 0 7
83961: DEC
83962: ST_TO_ADDR
83963: LD_VAR 0 10
83967: PUSH
83968: FOR_TO
83969: IFFALSE 84046
// begin if not ValidHex ( _x , _y ) then
83971: LD_VAR 0 5
83975: PPUSH
83976: LD_VAR 0 6
83980: PPUSH
83981: CALL_OW 488
83985: NOT
83986: IFFALSE 83990
// continue ;
83988: GO 83968
// if GetResourceTypeXY ( _x , _y ) then
83990: LD_VAR 0 5
83994: PPUSH
83995: LD_VAR 0 6
83999: PPUSH
84000: CALL_OW 283
84004: IFFALSE 84044
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
84006: LD_ADDR_VAR 0 4
84010: PUSH
84011: LD_VAR 0 4
84015: PPUSH
84016: LD_VAR 0 4
84020: PUSH
84021: LD_INT 1
84023: PLUS
84024: PPUSH
84025: LD_VAR 0 5
84029: PUSH
84030: LD_VAR 0 6
84034: PUSH
84035: EMPTY
84036: LIST
84037: LIST
84038: PPUSH
84039: CALL_OW 1
84043: ST_TO_ADDR
// end ;
84044: GO 83968
84046: POP
84047: POP
84048: GO 83948
84050: POP
84051: POP
// end ;
84052: LD_VAR 0 4
84056: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
84057: LD_INT 0
84059: PPUSH
84060: PPUSH
84061: PPUSH
84062: PPUSH
84063: PPUSH
84064: PPUSH
84065: PPUSH
84066: PPUSH
// if not units then
84067: LD_VAR 0 1
84071: NOT
84072: IFFALSE 84076
// exit ;
84074: GO 84600
// result := UnitFilter ( units , [ f_ok ] ) ;
84076: LD_ADDR_VAR 0 3
84080: PUSH
84081: LD_VAR 0 1
84085: PPUSH
84086: LD_INT 50
84088: PUSH
84089: EMPTY
84090: LIST
84091: PPUSH
84092: CALL_OW 72
84096: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
84097: LD_ADDR_VAR 0 8
84101: PUSH
84102: LD_VAR 0 1
84106: PUSH
84107: LD_INT 1
84109: ARRAY
84110: PPUSH
84111: CALL_OW 255
84115: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
84116: LD_ADDR_VAR 0 10
84120: PUSH
84121: LD_INT 29
84123: PUSH
84124: LD_INT 91
84126: PUSH
84127: LD_INT 49
84129: PUSH
84130: EMPTY
84131: LIST
84132: LIST
84133: LIST
84134: ST_TO_ADDR
// if not result then
84135: LD_VAR 0 3
84139: NOT
84140: IFFALSE 84144
// exit ;
84142: GO 84600
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
84144: LD_ADDR_VAR 0 5
84148: PUSH
84149: LD_INT 81
84151: PUSH
84152: LD_VAR 0 8
84156: PUSH
84157: EMPTY
84158: LIST
84159: LIST
84160: PPUSH
84161: CALL_OW 69
84165: ST_TO_ADDR
// for i in result do
84166: LD_ADDR_VAR 0 4
84170: PUSH
84171: LD_VAR 0 3
84175: PUSH
84176: FOR_IN
84177: IFFALSE 84598
// begin tag := GetTag ( i ) + 1 ;
84179: LD_ADDR_VAR 0 9
84183: PUSH
84184: LD_VAR 0 4
84188: PPUSH
84189: CALL_OW 110
84193: PUSH
84194: LD_INT 1
84196: PLUS
84197: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
84198: LD_ADDR_VAR 0 7
84202: PUSH
84203: LD_VAR 0 4
84207: PPUSH
84208: CALL_OW 250
84212: PPUSH
84213: LD_VAR 0 4
84217: PPUSH
84218: CALL_OW 251
84222: PPUSH
84223: LD_INT 6
84225: PPUSH
84226: CALL 83799 0 3
84230: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
84231: LD_VAR 0 4
84235: PPUSH
84236: CALL_OW 247
84240: PUSH
84241: LD_INT 2
84243: EQUAL
84244: PUSH
84245: LD_VAR 0 7
84249: AND
84250: PUSH
84251: LD_VAR 0 4
84255: PPUSH
84256: CALL_OW 264
84260: PUSH
84261: LD_VAR 0 10
84265: IN
84266: NOT
84267: AND
84268: IFFALSE 84307
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
84270: LD_VAR 0 4
84274: PPUSH
84275: LD_VAR 0 7
84279: PUSH
84280: LD_INT 1
84282: ARRAY
84283: PUSH
84284: LD_INT 1
84286: ARRAY
84287: PPUSH
84288: LD_VAR 0 7
84292: PUSH
84293: LD_INT 1
84295: ARRAY
84296: PUSH
84297: LD_INT 2
84299: ARRAY
84300: PPUSH
84301: CALL_OW 116
84305: GO 84596
// if path > tag then
84307: LD_VAR 0 2
84311: PUSH
84312: LD_VAR 0 9
84316: GREATER
84317: IFFALSE 84525
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
84319: LD_ADDR_VAR 0 6
84323: PUSH
84324: LD_VAR 0 5
84328: PPUSH
84329: LD_INT 91
84331: PUSH
84332: LD_VAR 0 4
84336: PUSH
84337: LD_INT 8
84339: PUSH
84340: EMPTY
84341: LIST
84342: LIST
84343: LIST
84344: PPUSH
84345: CALL_OW 72
84349: ST_TO_ADDR
// if nearEnemy then
84350: LD_VAR 0 6
84354: IFFALSE 84423
// begin if GetWeapon ( i ) = ru_time_lapser then
84356: LD_VAR 0 4
84360: PPUSH
84361: CALL_OW 264
84365: PUSH
84366: LD_INT 49
84368: EQUAL
84369: IFFALSE 84397
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
84371: LD_VAR 0 4
84375: PPUSH
84376: LD_VAR 0 6
84380: PPUSH
84381: LD_VAR 0 4
84385: PPUSH
84386: CALL_OW 74
84390: PPUSH
84391: CALL_OW 112
84395: GO 84421
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
84397: LD_VAR 0 4
84401: PPUSH
84402: LD_VAR 0 6
84406: PPUSH
84407: LD_VAR 0 4
84411: PPUSH
84412: CALL_OW 74
84416: PPUSH
84417: NOP4
// end else
84421: GO 84523
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
84423: LD_VAR 0 4
84427: PPUSH
84428: LD_VAR 0 2
84432: PUSH
84433: LD_VAR 0 9
84437: ARRAY
84438: PUSH
84439: LD_INT 1
84441: ARRAY
84442: PPUSH
84443: LD_VAR 0 2
84447: PUSH
84448: LD_VAR 0 9
84452: ARRAY
84453: PUSH
84454: LD_INT 2
84456: ARRAY
84457: PPUSH
84458: CALL_OW 297
84462: PUSH
84463: LD_INT 6
84465: GREATER
84466: IFFALSE 84509
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
84468: LD_VAR 0 4
84472: PPUSH
84473: LD_VAR 0 2
84477: PUSH
84478: LD_VAR 0 9
84482: ARRAY
84483: PUSH
84484: LD_INT 1
84486: ARRAY
84487: PPUSH
84488: LD_VAR 0 2
84492: PUSH
84493: LD_VAR 0 9
84497: ARRAY
84498: PUSH
84499: LD_INT 2
84501: ARRAY
84502: PPUSH
84503: CALL_OW 114
84507: GO 84523
// SetTag ( i , tag ) ;
84509: LD_VAR 0 4
84513: PPUSH
84514: LD_VAR 0 9
84518: PPUSH
84519: CALL_OW 109
// end else
84523: GO 84596
// if enemy then
84525: LD_VAR 0 5
84529: IFFALSE 84596
// begin if GetWeapon ( i ) = ru_time_lapser then
84531: LD_VAR 0 4
84535: PPUSH
84536: CALL_OW 264
84540: PUSH
84541: LD_INT 49
84543: EQUAL
84544: IFFALSE 84572
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
84546: LD_VAR 0 4
84550: PPUSH
84551: LD_VAR 0 5
84555: PPUSH
84556: LD_VAR 0 4
84560: PPUSH
84561: CALL_OW 74
84565: PPUSH
84566: CALL_OW 112
84570: GO 84596
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
84572: LD_VAR 0 4
84576: PPUSH
84577: LD_VAR 0 5
84581: PPUSH
84582: LD_VAR 0 4
84586: PPUSH
84587: CALL_OW 74
84591: PPUSH
84592: NOP4
// end ; end ;
84596: GO 84176
84598: POP
84599: POP
// end ;
84600: LD_VAR 0 3
84604: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
84605: LD_INT 0
84607: PPUSH
84608: PPUSH
84609: PPUSH
// if not unit or IsInUnit ( unit ) then
84610: LD_VAR 0 1
84614: NOT
84615: PUSH
84616: LD_VAR 0 1
84620: PPUSH
84621: CALL_OW 310
84625: OR
84626: IFFALSE 84630
// exit ;
84628: GO 84721
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
84630: LD_ADDR_VAR 0 4
84634: PUSH
84635: LD_VAR 0 1
84639: PPUSH
84640: CALL_OW 250
84644: PPUSH
84645: LD_VAR 0 2
84649: PPUSH
84650: LD_INT 1
84652: PPUSH
84653: CALL_OW 272
84657: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
84658: LD_ADDR_VAR 0 5
84662: PUSH
84663: LD_VAR 0 1
84667: PPUSH
84668: CALL_OW 251
84672: PPUSH
84673: LD_VAR 0 2
84677: PPUSH
84678: LD_INT 1
84680: PPUSH
84681: CALL_OW 273
84685: ST_TO_ADDR
// if ValidHex ( x , y ) then
84686: LD_VAR 0 4
84690: PPUSH
84691: LD_VAR 0 5
84695: PPUSH
84696: CALL_OW 488
84700: IFFALSE 84721
// ComTurnXY ( unit , x , y ) ;
84702: LD_VAR 0 1
84706: PPUSH
84707: LD_VAR 0 4
84711: PPUSH
84712: LD_VAR 0 5
84716: PPUSH
84717: CALL_OW 118
// end ;
84721: LD_VAR 0 3
84725: RET
// export function SeeUnits ( side , units ) ; var i ; begin
84726: LD_INT 0
84728: PPUSH
84729: PPUSH
// result := false ;
84730: LD_ADDR_VAR 0 3
84734: PUSH
84735: LD_INT 0
84737: ST_TO_ADDR
// if not units then
84738: LD_VAR 0 2
84742: NOT
84743: IFFALSE 84747
// exit ;
84745: GO 84792
// for i in units do
84747: LD_ADDR_VAR 0 4
84751: PUSH
84752: LD_VAR 0 2
84756: PUSH
84757: FOR_IN
84758: IFFALSE 84790
// if See ( side , i ) then
84760: LD_VAR 0 1
84764: PPUSH
84765: LD_VAR 0 4
84769: PPUSH
84770: CALL_OW 292
84774: IFFALSE 84788
// begin result := true ;
84776: LD_ADDR_VAR 0 3
84780: PUSH
84781: LD_INT 1
84783: ST_TO_ADDR
// exit ;
84784: POP
84785: POP
84786: GO 84792
// end ;
84788: GO 84757
84790: POP
84791: POP
// end ;
84792: LD_VAR 0 3
84796: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
84797: LD_INT 0
84799: PPUSH
84800: PPUSH
84801: PPUSH
84802: PPUSH
// if not unit or not points then
84803: LD_VAR 0 1
84807: NOT
84808: PUSH
84809: LD_VAR 0 2
84813: NOT
84814: OR
84815: IFFALSE 84819
// exit ;
84817: GO 84909
// dist := 99999 ;
84819: LD_ADDR_VAR 0 5
84823: PUSH
84824: LD_INT 99999
84826: ST_TO_ADDR
// for i in points do
84827: LD_ADDR_VAR 0 4
84831: PUSH
84832: LD_VAR 0 2
84836: PUSH
84837: FOR_IN
84838: IFFALSE 84907
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
84840: LD_ADDR_VAR 0 6
84844: PUSH
84845: LD_VAR 0 1
84849: PPUSH
84850: LD_VAR 0 4
84854: PUSH
84855: LD_INT 1
84857: ARRAY
84858: PPUSH
84859: LD_VAR 0 4
84863: PUSH
84864: LD_INT 2
84866: ARRAY
84867: PPUSH
84868: CALL_OW 297
84872: ST_TO_ADDR
// if tmpDist < dist then
84873: LD_VAR 0 6
84877: PUSH
84878: LD_VAR 0 5
84882: LESS
84883: IFFALSE 84905
// begin result := i ;
84885: LD_ADDR_VAR 0 3
84889: PUSH
84890: LD_VAR 0 4
84894: ST_TO_ADDR
// dist := tmpDist ;
84895: LD_ADDR_VAR 0 5
84899: PUSH
84900: LD_VAR 0 6
84904: ST_TO_ADDR
// end ; end ;
84905: GO 84837
84907: POP
84908: POP
// end ;
84909: LD_VAR 0 3
84913: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
84914: LD_INT 0
84916: PPUSH
// uc_side := side ;
84917: LD_ADDR_OWVAR 20
84921: PUSH
84922: LD_VAR 0 1
84926: ST_TO_ADDR
// uc_nation := 3 ;
84927: LD_ADDR_OWVAR 21
84931: PUSH
84932: LD_INT 3
84934: ST_TO_ADDR
// vc_chassis := 25 ;
84935: LD_ADDR_OWVAR 37
84939: PUSH
84940: LD_INT 25
84942: ST_TO_ADDR
// vc_engine := engine_siberite ;
84943: LD_ADDR_OWVAR 39
84947: PUSH
84948: LD_INT 3
84950: ST_TO_ADDR
// vc_control := control_computer ;
84951: LD_ADDR_OWVAR 38
84955: PUSH
84956: LD_INT 3
84958: ST_TO_ADDR
// vc_weapon := 59 ;
84959: LD_ADDR_OWVAR 40
84963: PUSH
84964: LD_INT 59
84966: ST_TO_ADDR
// result := CreateVehicle ;
84967: LD_ADDR_VAR 0 5
84971: PUSH
84972: CALL_OW 45
84976: ST_TO_ADDR
// SetDir ( result , d ) ;
84977: LD_VAR 0 5
84981: PPUSH
84982: LD_VAR 0 4
84986: PPUSH
84987: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
84991: LD_VAR 0 5
84995: PPUSH
84996: LD_VAR 0 2
85000: PPUSH
85001: LD_VAR 0 3
85005: PPUSH
85006: LD_INT 0
85008: PPUSH
85009: CALL_OW 48
// end ;
85013: LD_VAR 0 5
85017: RET
