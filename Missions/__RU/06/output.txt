// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export vehiclesFrom05 , resourcesFrom05 , fastBreakthrough , stevensStatus , apeTechsStatus ; export techMatPredStatus ; export vehsFrom06 , resourcesFrom06 ; export dial_SibTechsBlocker , dial_VsevolodContactBlocker , dial_TrapDialogBlocker , dial_ConvoyDialogBlocker , dial_NorthBlocker , dial_EndMissionDialogBlocker ; export claimOvsyenkoBase , claimTerminalBase , lostAgainBase ; export immortalVsevolodTeam , savedVsevolod , vsevolodWaitGorky ; export canGoNorth ; export enableVsevolodCounter ; export canSpawnReinforces ; export canEndMission ; export canRemoveUnits ; export timeToAttack ; export cratesSpawned ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// YouLost ( Demo ) ;
  20: LD_STRING Demo
  22: PPUSH
  23: CALL_OW 104
// InitMapConfig ;
  27: CALL 315 0 0
// vehiclesFrom05 = LoadVariable ( 05_Tanks_4 , [ ] ) ;
  31: LD_ADDR_EXP 1
  35: PUSH
  36: LD_STRING 05_Tanks_4
  38: PPUSH
  39: EMPTY
  40: PPUSH
  41: CALL_OW 30
  45: ST_TO_ADDR
// resourcesFrom05 = LoadVariable ( 05_ResourcesInCargo_3 , [ ] ) ;
  46: LD_ADDR_EXP 2
  50: PUSH
  51: LD_STRING 05_ResourcesInCargo_3
  53: PPUSH
  54: EMPTY
  55: PPUSH
  56: CALL_OW 30
  60: ST_TO_ADDR
// fastBreakthrough = LoadVariable ( 05_FastBreakthrough_6 , false ) ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 05_FastBreakthrough_6
  68: PPUSH
  69: LD_INT 0
  71: PPUSH
  72: CALL_OW 30
  76: ST_TO_ADDR
// stevensStatus = LoadVariable ( 05_StevensStatus_1 , 0 ) ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_STRING 05_StevensStatus_1
  84: PPUSH
  85: LD_INT 0
  87: PPUSH
  88: CALL_OW 30
  92: ST_TO_ADDR
// apeTechsStatus = LoadVariable ( 05_ApeTechsStatus_7 , [ 0 , 0 , 0 ] ) ;
  93: LD_ADDR_EXP 5
  97: PUSH
  98: LD_STRING 05_ApeTechsStatus_7
 100: PPUSH
 101: LD_INT 0
 103: PUSH
 104: LD_INT 0
 106: PUSH
 107: LD_INT 0
 109: PUSH
 110: EMPTY
 111: LIST
 112: LIST
 113: LIST
 114: PPUSH
 115: CALL_OW 30
 119: ST_TO_ADDR
// techMatPredStatus = state_enabled ;
 120: LD_ADDR_EXP 6
 124: PUSH
 125: LD_INT 1
 127: ST_TO_ADDR
// vehsFrom06 = [ ] ;
 128: LD_ADDR_EXP 7
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// resourcesFrom06 = [ ] ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// dial_SibTechsBlocker = false ;
 142: LD_ADDR_EXP 9
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// dial_VsevolodContactBlocker = false ;
 150: LD_ADDR_EXP 10
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// dial_TrapDialogBlocker = false ;
 158: LD_ADDR_EXP 11
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// dial_ConvoyDialogBlocker = false ;
 166: LD_ADDR_EXP 12
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// dial_NorthBlocker = false ;
 174: LD_ADDR_EXP 13
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// dial_EndMissionDialogBlocker = false ;
 182: LD_ADDR_EXP 14
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// claimOvsyenkoBase = false ;
 190: LD_ADDR_EXP 15
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// claimTerminalBase = false ;
 198: LD_ADDR_EXP 16
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// lostAgainBase = false ;
 206: LD_ADDR_EXP 17
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// immortalVsevolodTeam = true ;
 214: LD_ADDR_EXP 18
 218: PUSH
 219: LD_INT 1
 221: ST_TO_ADDR
// savedVsevolod = false ;
 222: LD_ADDR_EXP 19
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// vsevolodWaitGorky = false ;
 230: LD_ADDR_EXP 20
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// enableVsevolodCounter = false ;
 238: LD_ADDR_EXP 22
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// canGoNorth = false ;
 246: LD_ADDR_EXP 21
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// canSpawnReinforces = false ;
 254: LD_ADDR_EXP 23
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// canEndMission = false ;
 262: LD_ADDR_EXP 24
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// canRemoveUnits = false ;
 270: LD_ADDR_EXP 25
 274: PUSH
 275: LD_INT 0
 277: ST_TO_ADDR
// timeToAttack = 0 0$00 ;
 278: LD_ADDR_EXP 26
 282: PUSH
 283: LD_INT 0
 285: ST_TO_ADDR
// cratesSpawned = 0 ;
 286: LD_ADDR_EXP 27
 290: PUSH
 291: LD_INT 0
 293: ST_TO_ADDR
// PrepareRussians ;
 294: CALL 876 0 0
// PrepareAmericans ;
 298: CALL 2757 0 0
// Nef_PrepareNature ;
 302: CALL 3851 0 0
// MissionIntro ;
 306: CALL 15408 0 0
// end ; end_of_file
 310: LD_VAR 0 1
 314: RET
// export function InitMapConfig ; begin
 315: LD_INT 0
 317: PPUSH
// BaseMapConfig ;
 318: CALL 331 0 0
// MissionMapConfig ;
 322: CALL 421 0 0
// end ;
 326: LD_VAR 0 1
 330: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 331: LD_INT 0
 333: PPUSH
// animalsAmount = [ 3 , 3 , 1 , 3 , 0 ] ;
 334: LD_ADDR_EXP 28
 338: PUSH
 339: LD_INT 3
 341: PUSH
 342: LD_INT 3
 344: PUSH
 345: LD_INT 1
 347: PUSH
 348: LD_INT 3
 350: PUSH
 351: LD_INT 0
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: LIST
 358: LIST
 359: LIST
 360: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 361: LD_ADDR_EXP 29
 365: PUSH
 366: LD_INT 2
 368: PUSH
 369: LD_INT 2
 371: PUSH
 372: LD_INT 2
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: ST_TO_ADDR
// animalsAgression = 3 ;
 384: LD_ADDR_EXP 30
 388: PUSH
 389: LD_INT 3
 391: ST_TO_ADDR
// debugMode = 0 ;
 392: LD_ADDR_EXP 33
 396: PUSH
 397: LD_INT 0
 399: ST_TO_ADDR
// missionPrefix = 06_ ;
 400: LD_ADDR_EXP 31
 404: PUSH
 405: LD_STRING 06_
 407: ST_TO_ADDR
// previousMissionPrefix = 05_ ;
 408: LD_ADDR_EXP 32
 412: PUSH
 413: LD_STRING 05_
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 1
 420: RET
// export enemySkillLevel ; export ovsyenkoStartCrates , terminalStartSiberite ; export trapAmount ; export vsevolodSaveTime ; function MissionMapConfig ; begin
 421: LD_INT 0
 423: PPUSH
// enemySkillLevel = [ 3 , 4 , 5 ] [ Difficulty ] ;
 424: LD_ADDR_EXP 34
 428: PUSH
 429: LD_INT 3
 431: PUSH
 432: LD_INT 4
 434: PUSH
 435: LD_INT 5
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: LIST
 442: PUSH
 443: LD_OWVAR 67
 447: ARRAY
 448: ST_TO_ADDR
// ovsyenkoStartCrates = [ 150 , 100 , 50 ] [ Difficulty ] ;
 449: LD_ADDR_EXP 35
 453: PUSH
 454: LD_INT 150
 456: PUSH
 457: LD_INT 100
 459: PUSH
 460: LD_INT 50
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: PUSH
 468: LD_OWVAR 67
 472: ARRAY
 473: ST_TO_ADDR
// terminalStartSiberite = [ 100 , 70 , 50 ] [ Difficulty ] ;
 474: LD_ADDR_EXP 36
 478: PUSH
 479: LD_INT 100
 481: PUSH
 482: LD_INT 70
 484: PUSH
 485: LD_INT 50
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: PUSH
 493: LD_OWVAR 67
 497: ARRAY
 498: ST_TO_ADDR
// trapAmount = [ 3 , 4 , 4 ] [ Difficulty ] ;
 499: LD_ADDR_EXP 37
 503: PUSH
 504: LD_INT 3
 506: PUSH
 507: LD_INT 4
 509: PUSH
 510: LD_INT 4
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: LD_OWVAR 67
 522: ARRAY
 523: ST_TO_ADDR
// vsevolodSaveTime = [ 12 12$0 , 11 11$0 , 10 10$0 ] [ Difficulty ] ;
 524: LD_ADDR_EXP 38
 528: PUSH
 529: LD_INT 25200
 531: PUSH
 532: LD_INT 23100
 534: PUSH
 535: LD_INT 21000
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: LIST
 542: PUSH
 543: LD_OWVAR 67
 547: ARRAY
 548: ST_TO_ADDR
// end ;
 549: LD_VAR 0 1
 553: RET
// every 0 0$1 trigger debugMode do var i ;
 554: LD_EXP 33
 558: IFFALSE 873
 560: GO 562
 562: DISABLE
 563: LD_INT 0
 565: PPUSH
// begin enable ;
 566: ENABLE
// FogOff ( your_side ) ;
 567: LD_OWVAR 2
 571: PPUSH
 572: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 576: LD_ADDR_VAR 0 1
 580: PUSH
 581: LD_INT 22
 583: PUSH
 584: LD_OWVAR 2
 588: PUSH
 589: EMPTY
 590: LIST
 591: LIST
 592: PUSH
 593: LD_INT 2
 595: PUSH
 596: LD_INT 21
 598: PUSH
 599: LD_INT 1
 601: PUSH
 602: EMPTY
 603: LIST
 604: LIST
 605: PUSH
 606: LD_INT 21
 608: PUSH
 609: LD_INT 2
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: LIST
 620: PUSH
 621: EMPTY
 622: LIST
 623: LIST
 624: PPUSH
 625: CALL_OW 69
 629: PUSH
 630: FOR_IN
 631: IFFALSE 647
// SetLives ( i , 1000 ) ;
 633: LD_VAR 0 1
 637: PPUSH
 638: LD_INT 1000
 640: PPUSH
 641: CALL_OW 234
 645: GO 630
 647: POP
 648: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 649: LD_ADDR_VAR 0 1
 653: PUSH
 654: LD_INT 22
 656: PUSH
 657: LD_OWVAR 2
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: PUSH
 666: LD_INT 21
 668: PUSH
 669: LD_INT 1
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PPUSH
 680: CALL_OW 69
 684: PUSH
 685: FOR_IN
 686: IFFALSE 750
// begin SetSkill ( i , skill_combat , 10 ) ;
 688: LD_VAR 0 1
 692: PPUSH
 693: LD_INT 1
 695: PPUSH
 696: LD_INT 10
 698: PPUSH
 699: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 703: LD_VAR 0 1
 707: PPUSH
 708: LD_INT 2
 710: PPUSH
 711: LD_INT 10
 713: PPUSH
 714: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 718: LD_VAR 0 1
 722: PPUSH
 723: LD_INT 3
 725: PPUSH
 726: LD_INT 10
 728: PPUSH
 729: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 733: LD_VAR 0 1
 737: PPUSH
 738: LD_INT 4
 740: PPUSH
 741: LD_INT 10
 743: PPUSH
 744: CALL_OW 237
// end ;
 748: GO 685
 750: POP
 751: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 752: LD_ADDR_VAR 0 1
 756: PUSH
 757: LD_INT 22
 759: PUSH
 760: LD_OWVAR 2
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: LD_INT 30
 774: PUSH
 775: LD_INT 0
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 30
 784: PUSH
 785: LD_INT 1
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: LIST
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: PPUSH
 801: CALL_OW 69
 805: PUSH
 806: FOR_IN
 807: IFFALSE 871
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 809: LD_VAR 0 1
 813: PPUSH
 814: CALL_OW 274
 818: PPUSH
 819: LD_INT 1
 821: PPUSH
 822: LD_INT 9999
 824: PPUSH
 825: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 829: LD_VAR 0 1
 833: PPUSH
 834: CALL_OW 274
 838: PPUSH
 839: LD_INT 2
 841: PPUSH
 842: LD_INT 9999
 844: PPUSH
 845: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 849: LD_VAR 0 1
 853: PPUSH
 854: CALL_OW 274
 858: PPUSH
 859: LD_INT 3
 861: PPUSH
 862: LD_INT 9999
 864: PPUSH
 865: CALL_OW 277
// end ;
 869: GO 806
 871: POP
 872: POP
// end ; end_of_file
 873: PPOPN 1
 875: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Platonov , Kirilenkova ; export Vsevolod , vsevolodTeam ; export function PrepareRussians ; begin
 876: LD_INT 0
 878: PPUSH
// PrepareHeroes ;
 879: CALL 888 0 0
// end ;
 883: LD_VAR 0 1
 887: RET
// function PrepareHeroes ; var i , j , car , tmp , cargoList , point , areaPoints , nearPosition , burlakPosition , distance , index ; begin
 888: LD_INT 0
 890: PPUSH
 891: PPUSH
 892: PPUSH
 893: PPUSH
 894: PPUSH
 895: PPUSH
 896: PPUSH
 897: PPUSH
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
// point = [ 170 , 208 ] ;
 902: LD_ADDR_VAR 0 7
 906: PUSH
 907: LD_INT 170
 909: PUSH
 910: LD_INT 208
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: ST_TO_ADDR
// areaPoints = AreaToList ( RussianSpawnArea1 , 0 ) ;
 917: LD_ADDR_VAR 0 8
 921: PUSH
 922: LD_INT 1
 924: PPUSH
 925: LD_INT 0
 927: PPUSH
 928: CALL_OW 517
 932: ST_TO_ADDR
// uc_side = 3 ;
 933: LD_ADDR_OWVAR 20
 937: PUSH
 938: LD_INT 3
 940: ST_TO_ADDR
// uc_nation = 3 ;
 941: LD_ADDR_OWVAR 21
 945: PUSH
 946: LD_INT 3
 948: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , 0 ) ;
 949: LD_ADDR_EXP 39
 953: PUSH
 954: LD_STRING Burlak
 956: PPUSH
 957: LD_INT 1
 959: PPUSH
 960: LD_INT 0
 962: PPUSH
 963: CALL 11177 0 3
 967: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , true , 0 ) ;
 968: LD_ADDR_EXP 44
 972: PUSH
 973: LD_STRING Titov
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL 11177 0 3
 986: ST_TO_ADDR
// Dolgov := PrepareUnitExt ( Dolgov , true , 0 ) ;
 987: LD_ADDR_EXP 45
 991: PUSH
 992: LD_STRING Dolgov
 994: PPUSH
 995: LD_INT 1
 997: PPUSH
 998: LD_INT 0
1000: PPUSH
1001: CALL 11177 0 3
1005: ST_TO_ADDR
// Lipshchin := PrepareUnitExt ( Lipshchin , true , 0 ) ;
1006: LD_ADDR_EXP 46
1010: PUSH
1011: LD_STRING Lipshchin
1013: PPUSH
1014: LD_INT 1
1016: PPUSH
1017: LD_INT 0
1019: PPUSH
1020: CALL 11177 0 3
1024: ST_TO_ADDR
// Karamazov := PrepareUnitExt ( Karamazov , true , class_engineer ) ;
1025: LD_ADDR_EXP 40
1029: PUSH
1030: LD_STRING Karamazov
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_INT 2
1038: PPUSH
1039: CALL 11177 0 3
1043: ST_TO_ADDR
// Petrovova := PrepareUnitExt ( Petrovova , true , 0 ) ;
1044: LD_ADDR_EXP 41
1048: PUSH
1049: LD_STRING Petrovova
1051: PPUSH
1052: LD_INT 1
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL 11177 0 3
1062: ST_TO_ADDR
// Gleb := PrepareUnitExt ( Gleb , true , 0 ) ;
1063: LD_ADDR_EXP 42
1067: PUSH
1068: LD_STRING Gleb
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: LD_INT 0
1076: PPUSH
1077: CALL 11177 0 3
1081: ST_TO_ADDR
// Petrosyan := PrepareUnitExt ( Petrosyan , true , 0 ) ;
1082: LD_ADDR_EXP 43
1086: PUSH
1087: LD_STRING Petrosyan
1089: PPUSH
1090: LD_INT 1
1092: PPUSH
1093: LD_INT 0
1095: PPUSH
1096: CALL 11177 0 3
1100: ST_TO_ADDR
// Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
1101: LD_ADDR_EXP 47
1105: PUSH
1106: LD_STRING Platonov
1108: PPUSH
1109: LD_INT 0
1111: PPUSH
1112: LD_INT 0
1114: PPUSH
1115: CALL 11177 0 3
1119: ST_TO_ADDR
// if TestCharacters ( 04_Kirilenkova ) then
1120: LD_STRING 04_Kirilenkova
1122: PPUSH
1123: CALL_OW 28
1127: IFFALSE 1154
// begin Kirilenkova := CreateCharacter ( 04_Kirilenkova ) ;
1129: LD_ADDR_EXP 48
1133: PUSH
1134: LD_STRING 04_Kirilenkova
1136: PPUSH
1137: CALL_OW 34
1141: ST_TO_ADDR
// SetClass ( Kirilenkova , class_scientistic ) ;
1142: LD_EXP 48
1146: PPUSH
1147: LD_INT 4
1149: PPUSH
1150: CALL_OW 336
// end ; for i := 1 to vehiclesFrom05 do
1154: LD_ADDR_VAR 0 2
1158: PUSH
1159: DOUBLE
1160: LD_INT 1
1162: DEC
1163: ST_TO_ADDR
1164: LD_EXP 1
1168: PUSH
1169: FOR_TO
1170: IFFALSE 1832
// begin uc_nation = vehiclesFrom05 [ i ] [ 1 ] ;
1172: LD_ADDR_OWVAR 21
1176: PUSH
1177: LD_EXP 1
1181: PUSH
1182: LD_VAR 0 2
1186: ARRAY
1187: PUSH
1188: LD_INT 1
1190: ARRAY
1191: ST_TO_ADDR
// vc_chassis := vehiclesFrom05 [ i ] [ 2 ] ;
1192: LD_ADDR_OWVAR 37
1196: PUSH
1197: LD_EXP 1
1201: PUSH
1202: LD_VAR 0 2
1206: ARRAY
1207: PUSH
1208: LD_INT 2
1210: ARRAY
1211: ST_TO_ADDR
// vc_engine = vehiclesFrom05 [ i ] [ 3 ] ;
1212: LD_ADDR_OWVAR 39
1216: PUSH
1217: LD_EXP 1
1221: PUSH
1222: LD_VAR 0 2
1226: ARRAY
1227: PUSH
1228: LD_INT 3
1230: ARRAY
1231: ST_TO_ADDR
// vc_control = vehiclesFrom05 [ i ] [ 4 ] ;
1232: LD_ADDR_OWVAR 38
1236: PUSH
1237: LD_EXP 1
1241: PUSH
1242: LD_VAR 0 2
1246: ARRAY
1247: PUSH
1248: LD_INT 4
1250: ARRAY
1251: ST_TO_ADDR
// vc_weapon := vehiclesFrom05 [ i ] [ 5 ] ;
1252: LD_ADDR_OWVAR 40
1256: PUSH
1257: LD_EXP 1
1261: PUSH
1262: LD_VAR 0 2
1266: ARRAY
1267: PUSH
1268: LD_INT 5
1270: ARRAY
1271: ST_TO_ADDR
// uc_direction := 0 ;
1272: LD_ADDR_OWVAR 24
1276: PUSH
1277: LD_INT 0
1279: ST_TO_ADDR
// vc_fuel_battery := Rand ( 10 , 15 ) ;
1280: LD_ADDR_OWVAR 41
1284: PUSH
1285: LD_INT 10
1287: PPUSH
1288: LD_INT 15
1290: PPUSH
1291: CALL_OW 12
1295: ST_TO_ADDR
// car := CreateVehicle ;
1296: LD_ADDR_VAR 0 4
1300: PUSH
1301: CALL_OW 45
1305: ST_TO_ADDR
// distance = 999 ;
1306: LD_ADDR_VAR 0 11
1310: PUSH
1311: LD_INT 999
1313: ST_TO_ADDR
// index = 1 ;
1314: LD_ADDR_VAR 0 12
1318: PUSH
1319: LD_INT 1
1321: ST_TO_ADDR
// for j := 1 to areaPoints [ 1 ] do
1322: LD_ADDR_VAR 0 3
1326: PUSH
1327: DOUBLE
1328: LD_INT 1
1330: DEC
1331: ST_TO_ADDR
1332: LD_VAR 0 8
1336: PUSH
1337: LD_INT 1
1339: ARRAY
1340: PUSH
1341: FOR_TO
1342: IFFALSE 1513
// begin if GetDistXY ( point [ 1 ] , point [ 2 ] , areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ) < distance then
1344: LD_VAR 0 7
1348: PUSH
1349: LD_INT 1
1351: ARRAY
1352: PPUSH
1353: LD_VAR 0 7
1357: PUSH
1358: LD_INT 2
1360: ARRAY
1361: PPUSH
1362: LD_VAR 0 8
1366: PUSH
1367: LD_INT 1
1369: ARRAY
1370: PUSH
1371: LD_VAR 0 3
1375: ARRAY
1376: PPUSH
1377: LD_VAR 0 8
1381: PUSH
1382: LD_INT 2
1384: ARRAY
1385: PUSH
1386: LD_VAR 0 3
1390: ARRAY
1391: PPUSH
1392: CALL_OW 298
1396: PUSH
1397: LD_VAR 0 11
1401: LESS
1402: IFFALSE 1511
// begin distance = GetDistXY ( point [ 1 ] , point [ 2 ] , areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ) ;
1404: LD_ADDR_VAR 0 11
1408: PUSH
1409: LD_VAR 0 7
1413: PUSH
1414: LD_INT 1
1416: ARRAY
1417: PPUSH
1418: LD_VAR 0 7
1422: PUSH
1423: LD_INT 2
1425: ARRAY
1426: PPUSH
1427: LD_VAR 0 8
1431: PUSH
1432: LD_INT 1
1434: ARRAY
1435: PUSH
1436: LD_VAR 0 3
1440: ARRAY
1441: PPUSH
1442: LD_VAR 0 8
1446: PUSH
1447: LD_INT 2
1449: ARRAY
1450: PUSH
1451: LD_VAR 0 3
1455: ARRAY
1456: PPUSH
1457: CALL_OW 298
1461: ST_TO_ADDR
// nearPosition = [ areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ] ;
1462: LD_ADDR_VAR 0 9
1466: PUSH
1467: LD_VAR 0 8
1471: PUSH
1472: LD_INT 1
1474: ARRAY
1475: PUSH
1476: LD_VAR 0 3
1480: ARRAY
1481: PUSH
1482: LD_VAR 0 8
1486: PUSH
1487: LD_INT 2
1489: ARRAY
1490: PUSH
1491: LD_VAR 0 3
1495: ARRAY
1496: PUSH
1497: EMPTY
1498: LIST
1499: LIST
1500: ST_TO_ADDR
// index = j ;
1501: LD_ADDR_VAR 0 12
1505: PUSH
1506: LD_VAR 0 3
1510: ST_TO_ADDR
// end ; end ;
1511: GO 1341
1513: POP
1514: POP
// if not burlakPosition then
1515: LD_VAR 0 10
1519: NOT
1520: IFFALSE 1532
// burlakPosition = nearPosition ;
1522: LD_ADDR_VAR 0 10
1526: PUSH
1527: LD_VAR 0 9
1531: ST_TO_ADDR
// if areaPoints then
1532: LD_VAR 0 8
1536: IFFALSE 1584
// begin areaPoints = Delete2D ( areaPoints , 1 , index ) ;
1538: LD_ADDR_VAR 0 8
1542: PUSH
1543: LD_VAR 0 8
1547: PPUSH
1548: LD_INT 1
1550: PPUSH
1551: LD_VAR 0 12
1555: PPUSH
1556: CALL 12006 0 3
1560: ST_TO_ADDR
// areaPoints = Delete2D ( areaPoints , 2 , index ) ;
1561: LD_ADDR_VAR 0 8
1565: PUSH
1566: LD_VAR 0 8
1570: PPUSH
1571: LD_INT 2
1573: PPUSH
1574: LD_VAR 0 12
1578: PPUSH
1579: CALL 12006 0 3
1583: ST_TO_ADDR
// end ; PlaceUnitXY ( car , nearPosition [ 1 ] , nearPosition [ 2 ] , false ) ;
1584: LD_VAR 0 4
1588: PPUSH
1589: LD_VAR 0 9
1593: PUSH
1594: LD_INT 1
1596: ARRAY
1597: PPUSH
1598: LD_VAR 0 9
1602: PUSH
1603: LD_INT 2
1605: ARRAY
1606: PPUSH
1607: LD_INT 0
1609: PPUSH
1610: CALL_OW 48
// case vehiclesFrom05 [ i ] [ 6 ] of Bur :
1614: LD_EXP 1
1618: PUSH
1619: LD_VAR 0 2
1623: ARRAY
1624: PUSH
1625: LD_INT 6
1627: ARRAY
1628: PUSH
1629: LD_STRING Bur
1631: DOUBLE
1632: EQUAL
1633: IFTRUE 1637
1635: GO 1654
1637: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
1638: LD_EXP 39
1642: PPUSH
1643: LD_VAR 0 4
1647: PPUSH
1648: CALL_OW 52
1652: GO 1830
1654: LD_STRING Kar
1656: DOUBLE
1657: EQUAL
1658: IFTRUE 1662
1660: GO 1679
1662: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
1663: LD_EXP 40
1667: PPUSH
1668: LD_VAR 0 4
1672: PPUSH
1673: CALL_OW 52
1677: GO 1830
1679: LD_STRING Ptr
1681: DOUBLE
1682: EQUAL
1683: IFTRUE 1687
1685: GO 1704
1687: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
1688: LD_EXP 41
1692: PPUSH
1693: LD_VAR 0 4
1697: PPUSH
1698: CALL_OW 52
1702: GO 1830
1704: LD_STRING Glb
1706: DOUBLE
1707: EQUAL
1708: IFTRUE 1712
1710: GO 1729
1712: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
1713: LD_EXP 42
1717: PPUSH
1718: LD_VAR 0 4
1722: PPUSH
1723: CALL_OW 52
1727: GO 1830
1729: LD_STRING Pet
1731: DOUBLE
1732: EQUAL
1733: IFTRUE 1737
1735: GO 1754
1737: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
1738: LD_EXP 43
1742: PPUSH
1743: LD_VAR 0 4
1747: PPUSH
1748: CALL_OW 52
1752: GO 1830
1754: LD_STRING Dol
1756: DOUBLE
1757: EQUAL
1758: IFTRUE 1762
1760: GO 1779
1762: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
1763: LD_EXP 45
1767: PPUSH
1768: LD_VAR 0 4
1772: PPUSH
1773: CALL_OW 52
1777: GO 1830
1779: LD_STRING Lip
1781: DOUBLE
1782: EQUAL
1783: IFTRUE 1787
1785: GO 1804
1787: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
1788: LD_EXP 46
1792: PPUSH
1793: LD_VAR 0 4
1797: PPUSH
1798: CALL_OW 52
1802: GO 1830
1804: LD_STRING Tit
1806: DOUBLE
1807: EQUAL
1808: IFTRUE 1812
1810: GO 1829
1812: POP
// PlaceHumanInUnit ( Titov , car ) ; end ;
1813: LD_EXP 44
1817: PPUSH
1818: LD_VAR 0 4
1822: PPUSH
1823: CALL_OW 52
1827: GO 1830
1829: POP
// end ;
1830: GO 1169
1832: POP
1833: POP
// cargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
1834: LD_ADDR_VAR 0 6
1838: PUSH
1839: LD_INT 22
1841: PUSH
1842: LD_INT 3
1844: PUSH
1845: EMPTY
1846: LIST
1847: LIST
1848: PUSH
1849: LD_INT 21
1851: PUSH
1852: LD_INT 2
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: PUSH
1859: LD_INT 2
1861: PUSH
1862: LD_INT 34
1864: PUSH
1865: LD_INT 51
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PUSH
1872: LD_INT 34
1874: PUSH
1875: LD_INT 32
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: PPUSH
1892: CALL_OW 69
1896: ST_TO_ADDR
// if cargoList then
1897: LD_VAR 0 6
1901: IFFALSE 2030
// for i = 1 to cargoList do
1903: LD_ADDR_VAR 0 2
1907: PUSH
1908: DOUBLE
1909: LD_INT 1
1911: DEC
1912: ST_TO_ADDR
1913: LD_VAR 0 6
1917: PUSH
1918: FOR_TO
1919: IFFALSE 2028
// if resourcesFrom05 then
1921: LD_EXP 2
1925: IFFALSE 2026
// begin AddCargo ( cargoList [ i ] , 1 , resourcesFrom05 [ i ] [ 1 ] ) ;
1927: LD_VAR 0 6
1931: PUSH
1932: LD_VAR 0 2
1936: ARRAY
1937: PPUSH
1938: LD_INT 1
1940: PPUSH
1941: LD_EXP 2
1945: PUSH
1946: LD_VAR 0 2
1950: ARRAY
1951: PUSH
1952: LD_INT 1
1954: ARRAY
1955: PPUSH
1956: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resourcesFrom05 [ i ] [ 2 ] ) ;
1960: LD_VAR 0 6
1964: PUSH
1965: LD_VAR 0 2
1969: ARRAY
1970: PPUSH
1971: LD_INT 2
1973: PPUSH
1974: LD_EXP 2
1978: PUSH
1979: LD_VAR 0 2
1983: ARRAY
1984: PUSH
1985: LD_INT 2
1987: ARRAY
1988: PPUSH
1989: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resourcesFrom05 [ i ] [ 3 ] ) ;
1993: LD_VAR 0 6
1997: PUSH
1998: LD_VAR 0 2
2002: ARRAY
2003: PPUSH
2004: LD_INT 3
2006: PPUSH
2007: LD_EXP 2
2011: PUSH
2012: LD_VAR 0 2
2016: ARRAY
2017: PUSH
2018: LD_INT 3
2020: ARRAY
2021: PPUSH
2022: CALL_OW 291
// end ;
2026: GO 1918
2028: POP
2029: POP
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_class , class_engineer ] ] ) then
2030: LD_INT 22
2032: PUSH
2033: LD_INT 3
2035: PUSH
2036: EMPTY
2037: LIST
2038: LIST
2039: PUSH
2040: LD_INT 21
2042: PUSH
2043: LD_INT 1
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: PUSH
2050: LD_INT 23
2052: PUSH
2053: LD_INT 3
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: PUSH
2060: LD_INT 25
2062: PUSH
2063: LD_INT 2
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: LIST
2074: LIST
2075: PPUSH
2076: CALL_OW 69
2080: NOT
2081: IFFALSE 2186
// begin if IsOk ( Lipshchin ) then
2083: LD_EXP 46
2087: PPUSH
2088: CALL_OW 302
2092: IFFALSE 2108
// SetClass ( Lipshchin , class_engineer ) else
2094: LD_EXP 46
2098: PPUSH
2099: LD_INT 2
2101: PPUSH
2102: CALL_OW 336
2106: GO 2186
// begin tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ;
2108: LD_ADDR_VAR 0 5
2112: PUSH
2113: LD_INT 22
2115: PUSH
2116: LD_INT 3
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PUSH
2123: LD_INT 21
2125: PUSH
2126: LD_INT 1
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: PUSH
2133: LD_INT 23
2135: PUSH
2136: LD_INT 3
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: PUSH
2143: LD_INT 50
2145: PUSH
2146: EMPTY
2147: LIST
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: PPUSH
2155: CALL_OW 69
2159: ST_TO_ADDR
// SetClass ( tmp [ rand ( 0 , tmp ) ] , class_engineer ) ;
2160: LD_VAR 0 5
2164: PUSH
2165: LD_INT 0
2167: PPUSH
2168: LD_VAR 0 5
2172: PPUSH
2173: CALL_OW 12
2177: ARRAY
2178: PPUSH
2179: LD_INT 2
2181: PPUSH
2182: CALL_OW 336
// end ; end ; SetTech ( tech_ApeLang , 3 , apeTechsStatus [ 1 ] ) ;
2186: LD_INT 1
2188: PPUSH
2189: LD_INT 3
2191: PPUSH
2192: LD_EXP 5
2196: PUSH
2197: LD_INT 1
2199: ARRAY
2200: PPUSH
2201: CALL_OW 322
// SetTech ( tech_ApePsych , 3 , apeTechsStatus [ 2 ] ) ;
2205: LD_INT 2
2207: PPUSH
2208: LD_INT 3
2210: PPUSH
2211: LD_EXP 5
2215: PUSH
2216: LD_INT 2
2218: ARRAY
2219: PPUSH
2220: CALL_OW 322
// SetTech ( tech_ApeAgres , 3 , apeTechsStatus [ 3 ] ) ;
2224: LD_INT 11
2226: PPUSH
2227: LD_INT 3
2229: PPUSH
2230: LD_EXP 5
2234: PUSH
2235: LD_INT 3
2237: ARRAY
2238: PPUSH
2239: CALL_OW 322
// end ;
2243: LD_VAR 0 1
2247: RET
// export function PrepareVsevolod ; var i , un ; begin
2248: LD_INT 0
2250: PPUSH
2251: PPUSH
2252: PPUSH
// uc_side = 6 ;
2253: LD_ADDR_OWVAR 20
2257: PUSH
2258: LD_INT 6
2260: ST_TO_ADDR
// uc_nation = 3 ;
2261: LD_ADDR_OWVAR 21
2265: PUSH
2266: LD_INT 3
2268: ST_TO_ADDR
// vsevolodTeam = [ ] ;
2269: LD_ADDR_EXP 50
2273: PUSH
2274: EMPTY
2275: ST_TO_ADDR
// Vsevolod := PrepareUnitExt ( Vsevolod , false , class_soldier ) ;
2276: LD_ADDR_EXP 49
2280: PUSH
2281: LD_STRING Vsevolod
2283: PPUSH
2284: LD_INT 0
2286: PPUSH
2287: LD_INT 1
2289: PPUSH
2290: CALL 11177 0 3
2294: ST_TO_ADDR
// PlaceUnitArea ( Vsevolod , VsevolodSpawnArea , false ) ;
2295: LD_EXP 49
2299: PPUSH
2300: LD_INT 7
2302: PPUSH
2303: LD_INT 0
2305: PPUSH
2306: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Vsevolod ;
2310: LD_ADDR_EXP 50
2314: PUSH
2315: LD_EXP 50
2319: PUSH
2320: LD_EXP 49
2324: ADD
2325: ST_TO_ADDR
// for i := 1 to 2 do
2326: LD_ADDR_VAR 0 2
2330: PUSH
2331: DOUBLE
2332: LD_INT 1
2334: DEC
2335: ST_TO_ADDR
2336: LD_INT 2
2338: PUSH
2339: FOR_TO
2340: IFFALSE 2395
// begin PrepareSoldier ( sex_male , 4 ) ;
2342: LD_INT 1
2344: PPUSH
2345: LD_INT 4
2347: PPUSH
2348: CALL_OW 381
// un = CreateHuman ;
2352: LD_ADDR_VAR 0 3
2356: PUSH
2357: CALL_OW 44
2361: ST_TO_ADDR
// PlaceUnitArea ( un , VsevolodSpawnArea , false ) ;
2362: LD_VAR 0 3
2366: PPUSH
2367: LD_INT 7
2369: PPUSH
2370: LD_INT 0
2372: PPUSH
2373: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ un ;
2377: LD_ADDR_EXP 50
2381: PUSH
2382: LD_EXP 50
2386: PUSH
2387: LD_VAR 0 3
2391: ADD
2392: ST_TO_ADDR
// end ;
2393: GO 2339
2395: POP
2396: POP
// end ;
2397: LD_VAR 0 1
2401: RET
// export function SpawnPlatonovReinforces ; var i , un , veh ; begin
2402: LD_INT 0
2404: PPUSH
2405: PPUSH
2406: PPUSH
2407: PPUSH
// uc_side = 3 ;
2408: LD_ADDR_OWVAR 20
2412: PUSH
2413: LD_INT 3
2415: ST_TO_ADDR
// uc_nation = 3 ;
2416: LD_ADDR_OWVAR 21
2420: PUSH
2421: LD_INT 3
2423: ST_TO_ADDR
// PrepareSoldier ( false , 4 ) ;
2424: LD_INT 0
2426: PPUSH
2427: LD_INT 4
2429: PPUSH
2430: CALL_OW 381
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] , rand ( 50 , 60 ) ) ;
2434: LD_INT 22
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_INT 1
2442: PPUSH
2443: LD_INT 43
2445: PUSH
2446: LD_INT 44
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: PUSH
2453: LD_INT 1
2455: PPUSH
2456: LD_INT 2
2458: PPUSH
2459: CALL_OW 12
2463: ARRAY
2464: PPUSH
2465: LD_INT 50
2467: PPUSH
2468: LD_INT 60
2470: PPUSH
2471: CALL_OW 12
2475: PPUSH
2476: CALL 45272 0 5
// veh = CreateVehicle ;
2480: LD_ADDR_VAR 0 4
2484: PUSH
2485: CALL_OW 45
2489: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
2490: LD_VAR 0 4
2494: PPUSH
2495: LD_INT 0
2497: PPUSH
2498: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 230 , false ) ;
2502: LD_VAR 0 4
2506: PPUSH
2507: LD_INT 134
2509: PPUSH
2510: LD_INT 230
2512: PPUSH
2513: LD_INT 0
2515: PPUSH
2516: CALL_OW 48
// un = CreateHuman ;
2520: LD_ADDR_VAR 0 3
2524: PUSH
2525: CALL_OW 44
2529: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2530: LD_VAR 0 3
2534: PPUSH
2535: LD_VAR 0 4
2539: PPUSH
2540: CALL_OW 52
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
2544: LD_INT 22
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 51
2555: PPUSH
2556: LD_INT 50
2558: PPUSH
2559: LD_INT 60
2561: PPUSH
2562: CALL_OW 12
2566: PPUSH
2567: CALL 45272 0 5
// veh = CreateVehicle ;
2571: LD_ADDR_VAR 0 4
2575: PUSH
2576: CALL_OW 45
2580: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
2581: LD_VAR 0 4
2585: PPUSH
2586: LD_INT 0
2588: PPUSH
2589: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 233 , false ) ;
2593: LD_VAR 0 4
2597: PPUSH
2598: LD_INT 134
2600: PPUSH
2601: LD_INT 233
2603: PPUSH
2604: LD_INT 0
2606: PPUSH
2607: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
2611: LD_VAR 0 4
2615: PPUSH
2616: LD_INT 1
2618: PPUSH
2619: LD_INT 100
2621: PPUSH
2622: CALL_OW 290
// un = CreateHuman ;
2626: LD_ADDR_VAR 0 3
2630: PUSH
2631: CALL_OW 44
2635: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2636: LD_VAR 0 3
2640: PPUSH
2641: LD_VAR 0 4
2645: PPUSH
2646: CALL_OW 52
// if Kirilenkova then
2650: LD_EXP 48
2654: IFFALSE 2752
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
2656: LD_INT 22
2658: PPUSH
2659: LD_INT 1
2661: PPUSH
2662: LD_INT 1
2664: PPUSH
2665: LD_INT 51
2667: PPUSH
2668: LD_INT 50
2670: PPUSH
2671: LD_INT 60
2673: PPUSH
2674: CALL_OW 12
2678: PPUSH
2679: CALL 45272 0 5
// veh = CreateVehicle ;
2683: LD_ADDR_VAR 0 4
2687: PUSH
2688: CALL_OW 45
2692: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
2693: LD_VAR 0 4
2697: PPUSH
2698: LD_INT 0
2700: PPUSH
2701: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 236 , false ) ;
2705: LD_VAR 0 4
2709: PPUSH
2710: LD_INT 134
2712: PPUSH
2713: LD_INT 236
2715: PPUSH
2716: LD_INT 0
2718: PPUSH
2719: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
2723: LD_VAR 0 4
2727: PPUSH
2728: LD_INT 1
2730: PPUSH
2731: LD_INT 100
2733: PPUSH
2734: CALL_OW 290
// PlaceHumanInUnit ( Kirilenkova , veh ) ;
2738: LD_EXP 48
2742: PPUSH
2743: LD_VAR 0 4
2747: PPUSH
2748: CALL_OW 52
// end ; end ; end_of_file
2752: LD_VAR 0 1
2756: RET
// export VanHouten ; export ovsyenkoBase , terminalBase , headAmBase ; export trapTeam , convoyTeam , attackTeam ; export function PrepareAmericans ; begin
2757: LD_INT 0
2759: PPUSH
// PrepareOvsyenko ;
2760: CALL 2777 0 0
// PrepareTerminal ;
2764: CALL 2972 0 0
// PrepareMainAmericanBase ;
2768: CALL 3055 0 0
// end ;
2772: LD_VAR 0 1
2776: RET
// function PrepareOvsyenko ; var soldiersAmount ; begin
2777: LD_INT 0
2779: PPUSH
2780: PPUSH
// uc_side = 1 ;
2781: LD_ADDR_OWVAR 20
2785: PUSH
2786: LD_INT 1
2788: ST_TO_ADDR
// uc_nation = nation_american ;
2789: LD_ADDR_OWVAR 21
2793: PUSH
2794: LD_INT 1
2796: ST_TO_ADDR
// soldiersAmount = 3 ;
2797: LD_ADDR_VAR 0 2
2801: PUSH
2802: LD_INT 3
2804: ST_TO_ADDR
// if fastBreakthrough then
2805: LD_EXP 3
2809: IFFALSE 2827
// begin RemoveUnit ( ovs_bun2 ) ;
2811: LD_INT 229
2813: PPUSH
2814: CALL_OW 64
// RemoveUnit ( ovs_bun3 ) ;
2818: LD_INT 258
2820: PPUSH
2821: CALL_OW 64
// end else
2825: GO 2835
// soldiersAmount = 4 ;
2827: LD_ADDR_VAR 0 2
2831: PUSH
2832: LD_INT 4
2834: ST_TO_ADDR
// ovsyenkoBase := Nef_PrepareBase ( ovsyenko , OvsyenkoBaseArea , ovsyenko , enemySkillLevel , [ ovsyenkoStartCrates , 50 , 0 ] , 1 , [ soldiersAmount , 1 , 0 , 1 ] ) ;
2835: LD_ADDR_EXP 52
2839: PUSH
2840: LD_INT 86
2842: PPUSH
2843: LD_INT 3
2845: PPUSH
2846: LD_STRING ovsyenko
2848: PPUSH
2849: LD_EXP 34
2853: PPUSH
2854: LD_EXP 35
2858: PUSH
2859: LD_INT 50
2861: PUSH
2862: LD_INT 0
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: LIST
2869: PPUSH
2870: LD_INT 1
2872: PPUSH
2873: LD_VAR 0 2
2877: PUSH
2878: LD_INT 1
2880: PUSH
2881: LD_INT 0
2883: PUSH
2884: LD_INT 1
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: LIST
2891: LIST
2892: PPUSH
2893: CALL 12078 0 7
2897: ST_TO_ADDR
// case Difficulty of 1 :
2898: LD_OWVAR 67
2902: PUSH
2903: LD_INT 1
2905: DOUBLE
2906: EQUAL
2907: IFTRUE 2911
2909: GO 2924
2911: POP
// PlaceWeaponTurret ( ovs_bun1 , us_double_gun ) ; 2 :
2912: LD_INT 97
2914: PPUSH
2915: LD_INT 5
2917: PPUSH
2918: CALL_OW 431
2922: GO 2967
2924: LD_INT 2
2926: DOUBLE
2927: EQUAL
2928: IFTRUE 2932
2930: GO 2945
2932: POP
// PlaceWeaponTurret ( ovs_bun1 , us_light_gun ) ; 3 :
2933: LD_INT 97
2935: PPUSH
2936: LD_INT 3
2938: PPUSH
2939: CALL_OW 431
2943: GO 2967
2945: LD_INT 3
2947: DOUBLE
2948: EQUAL
2949: IFTRUE 2953
2951: GO 2966
2953: POP
// PlaceWeaponTurret ( ovs_bun1 , us_gatling_gun ) ; end ;
2954: LD_INT 97
2956: PPUSH
2957: LD_INT 4
2959: PPUSH
2960: CALL_OW 431
2964: GO 2967
2966: POP
// end ;
2967: LD_VAR 0 1
2971: RET
// function PrepareTerminal ; begin
2972: LD_INT 0
2974: PPUSH
// uc_side = 1 ;
2975: LD_ADDR_OWVAR 20
2979: PUSH
2980: LD_INT 1
2982: ST_TO_ADDR
// uc_nation = nation_american ;
2983: LD_ADDR_OWVAR 21
2987: PUSH
2988: LD_INT 1
2990: ST_TO_ADDR
// terminalBase := Nef_PrepareBase ( terminal , terminalBaseArea , terminal , enemySkillLevel , [ 100 , 50 , 0 ] , 1 , [ 2 , 1 , 0 , 0 ] ) ;
2991: LD_ADDR_EXP 53
2995: PUSH
2996: LD_INT 168
2998: PPUSH
2999: LD_INT 4
3001: PPUSH
3002: LD_STRING terminal
3004: PPUSH
3005: LD_EXP 34
3009: PPUSH
3010: LD_INT 100
3012: PUSH
3013: LD_INT 50
3015: PUSH
3016: LD_INT 0
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: LIST
3023: PPUSH
3024: LD_INT 1
3026: PPUSH
3027: LD_INT 2
3029: PUSH
3030: LD_INT 1
3032: PUSH
3033: LD_INT 0
3035: PUSH
3036: LD_INT 0
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: LIST
3043: LIST
3044: PPUSH
3045: CALL 12078 0 7
3049: ST_TO_ADDR
// end ;
3050: LD_VAR 0 1
3054: RET
// function PrepareMainAmericanBase ; begin
3055: LD_INT 0
3057: PPUSH
// uc_side = 1 ;
3058: LD_ADDR_OWVAR 20
3062: PUSH
3063: LD_INT 1
3065: ST_TO_ADDR
// uc_nation = nation_american ;
3066: LD_ADDR_OWVAR 21
3070: PUSH
3071: LD_INT 1
3073: ST_TO_ADDR
// if fastBreakthrough then
3074: LD_EXP 3
3078: IFFALSE 3087
// RemoveUnit ( ovs_bun2 ) ;
3080: LD_INT 229
3082: PPUSH
3083: CALL_OW 64
// headAmBase := Nef_PrepareBase ( headamdepot , HeadAmericanBaseArea ,  , enemySkillLevel , [ 3000 , 1000 , 0 ] , 1 , [ 9 , 3 , 9 , 2 ] ) ;
3087: LD_ADDR_EXP 54
3091: PUSH
3092: LD_INT 106
3094: PPUSH
3095: LD_INT 5
3097: PPUSH
3098: LD_STRING 
3100: PPUSH
3101: LD_EXP 34
3105: PPUSH
3106: LD_INT 3000
3108: PUSH
3109: LD_INT 1000
3111: PUSH
3112: LD_INT 0
3114: PUSH
3115: EMPTY
3116: LIST
3117: LIST
3118: LIST
3119: PPUSH
3120: LD_INT 1
3122: PPUSH
3123: LD_INT 9
3125: PUSH
3126: LD_INT 3
3128: PUSH
3129: LD_INT 9
3131: PUSH
3132: LD_INT 2
3134: PUSH
3135: EMPTY
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: PPUSH
3141: CALL 12078 0 7
3145: ST_TO_ADDR
// VanHouten = PrepareUnitExt ( VanHouten , true , class_soldier ) ;
3146: LD_ADDR_EXP 51
3150: PUSH
3151: LD_STRING VanHouten
3153: PPUSH
3154: LD_INT 1
3156: PPUSH
3157: LD_INT 1
3159: PPUSH
3160: CALL 11177 0 3
3164: ST_TO_ADDR
// headAmBase = headAmBase ^ VanHouten ;
3165: LD_ADDR_EXP 54
3169: PUSH
3170: LD_EXP 54
3174: PUSH
3175: LD_EXP 51
3179: ADD
3180: ST_TO_ADDR
// PlaceUnitXYR ( VanHouten , 35 , 57 , 3 , false ) ;
3181: LD_EXP 51
3185: PPUSH
3186: LD_INT 35
3188: PPUSH
3189: LD_INT 57
3191: PPUSH
3192: LD_INT 3
3194: PPUSH
3195: LD_INT 0
3197: PPUSH
3198: CALL_OW 50
// end ;
3202: LD_VAR 0 1
3206: RET
// export function PrepareTrap ; var i , un , nearEnemyUnit ; begin
3207: LD_INT 0
3209: PPUSH
3210: PPUSH
3211: PPUSH
3212: PPUSH
// uc_side = 1 ;
3213: LD_ADDR_OWVAR 20
3217: PUSH
3218: LD_INT 1
3220: ST_TO_ADDR
// uc_nation = nation_american ;
3221: LD_ADDR_OWVAR 21
3225: PUSH
3226: LD_INT 1
3228: ST_TO_ADDR
// for i := 1 to trapAmount do
3229: LD_ADDR_VAR 0 2
3233: PUSH
3234: DOUBLE
3235: LD_INT 1
3237: DEC
3238: ST_TO_ADDR
3239: LD_EXP 37
3243: PUSH
3244: FOR_TO
3245: IFFALSE 3364
// begin PrepareSoldier ( false , enemySkillLevel ) ;
3247: LD_INT 0
3249: PPUSH
3250: LD_EXP 34
3254: PPUSH
3255: CALL_OW 381
// un = CreateHuman ;
3259: LD_ADDR_VAR 0 3
3263: PUSH
3264: CALL_OW 44
3268: ST_TO_ADDR
// trapTeam = trapTeam ^ un ;
3269: LD_ADDR_EXP 55
3273: PUSH
3274: LD_EXP 55
3278: PUSH
3279: LD_VAR 0 3
3283: ADD
3284: ST_TO_ADDR
// PlaceUnitArea ( un , TrapSpawnArea , false ) ;
3285: LD_VAR 0 3
3289: PPUSH
3290: LD_INT 11
3292: PPUSH
3293: LD_INT 0
3295: PPUSH
3296: CALL_OW 49
// nearEnemyUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] ] ) , un ) ;
3300: LD_ADDR_VAR 0 4
3304: PUSH
3305: LD_INT 22
3307: PUSH
3308: LD_INT 3
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: PUSH
3315: EMPTY
3316: LIST
3317: PPUSH
3318: CALL_OW 69
3322: PPUSH
3323: LD_VAR 0 3
3327: PPUSH
3328: CALL_OW 74
3332: ST_TO_ADDR
// ComAgressiveMove ( un , GetX ( nearEnemyUnit ) , GetY ( nearEnemyUnit ) ) ;
3333: LD_VAR 0 3
3337: PPUSH
3338: LD_VAR 0 4
3342: PPUSH
3343: CALL_OW 250
3347: PPUSH
3348: LD_VAR 0 4
3352: PPUSH
3353: CALL_OW 251
3357: PPUSH
3358: CALL_OW 114
// end ;
3362: GO 3244
3364: POP
3365: POP
// end ;
3366: LD_VAR 0 1
3370: RET
// export function PrepareSoldiersInBunkers ; begin
3371: LD_INT 0
3373: PPUSH
// PrepareSolBun ( enemySkilLLevel , non_bun1 ) ;
3374: LD_EXP 34
3378: PPUSH
3379: LD_INT 236
3381: PPUSH
3382: CALL 14570 0 2
// PrepareSolBun ( enemySkilLLevel , non_bun2 ) ;
3386: LD_EXP 34
3390: PPUSH
3391: LD_INT 240
3393: PPUSH
3394: CALL 14570 0 2
// PrepareSolBun ( enemySkilLLevel , non_bun3 ) ;
3398: LD_EXP 34
3402: PPUSH
3403: LD_INT 243
3405: PPUSH
3406: CALL 14570 0 2
// end ;
3410: LD_VAR 0 1
3414: RET
// export function PrepareConvoy ; var i , un , veh ; begin
3415: LD_INT 0
3417: PPUSH
3418: PPUSH
3419: PPUSH
3420: PPUSH
// convoyTeam = [ ] ;
3421: LD_ADDR_EXP 56
3425: PUSH
3426: EMPTY
3427: ST_TO_ADDR
// uc_side = 1 ;
3428: LD_ADDR_OWVAR 20
3432: PUSH
3433: LD_INT 1
3435: ST_TO_ADDR
// uc_nation = nation_american ;
3436: LD_ADDR_OWVAR 21
3440: PUSH
3441: LD_INT 1
3443: ST_TO_ADDR
// for i := 1 to 2 do
3444: LD_ADDR_VAR 0 2
3448: PUSH
3449: DOUBLE
3450: LD_INT 1
3452: DEC
3453: ST_TO_ADDR
3454: LD_INT 2
3456: PUSH
3457: FOR_TO
3458: IFFALSE 3589
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
3460: LD_INT 3
3462: PPUSH
3463: LD_INT 1
3465: PPUSH
3466: LD_INT 1
3468: PPUSH
3469: LD_INT 12
3471: PPUSH
3472: LD_INT 80
3474: PPUSH
3475: CALL 45272 0 5
// veh = CreateVehicle ;
3479: LD_ADDR_VAR 0 4
3483: PUSH
3484: CALL_OW 45
3488: ST_TO_ADDR
// AddCargo ( veh , mat_cans , 100 ) ;
3489: LD_VAR 0 4
3493: PPUSH
3494: LD_INT 1
3496: PPUSH
3497: LD_INT 100
3499: PPUSH
3500: CALL_OW 291
// convoyTeam = convoyTeam ^ veh ;
3504: LD_ADDR_EXP 56
3508: PUSH
3509: LD_EXP 56
3513: PUSH
3514: LD_VAR 0 4
3518: ADD
3519: ST_TO_ADDR
// PlaceUnitArea ( veh , AmericanSpawnArea1 , false ) ;
3520: LD_VAR 0 4
3524: PPUSH
3525: LD_INT 8
3527: PPUSH
3528: LD_INT 0
3530: PPUSH
3531: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
3535: LD_INT 0
3537: PPUSH
3538: LD_EXP 34
3542: PPUSH
3543: CALL_OW 383
// un = CreateHuman ;
3547: LD_ADDR_VAR 0 3
3551: PUSH
3552: CALL_OW 44
3556: ST_TO_ADDR
// convoyTeam = convoyTeam ^ un ;
3557: LD_ADDR_EXP 56
3561: PUSH
3562: LD_EXP 56
3566: PUSH
3567: LD_VAR 0 3
3571: ADD
3572: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3573: LD_VAR 0 3
3577: PPUSH
3578: LD_VAR 0 4
3582: PPUSH
3583: CALL_OW 52
// end ;
3587: GO 3457
3589: POP
3590: POP
// end ;
3591: LD_VAR 0 1
3595: RET
// export function PrepareAttack ; var i , un , veh ; begin
3596: LD_INT 0
3598: PPUSH
3599: PPUSH
3600: PPUSH
3601: PPUSH
// uc_side = 1 ;
3602: LD_ADDR_OWVAR 20
3606: PUSH
3607: LD_INT 1
3609: ST_TO_ADDR
// uc_nation = nation_american ;
3610: LD_ADDR_OWVAR 21
3614: PUSH
3615: LD_INT 1
3617: ST_TO_ADDR
// for i := 1 to 4 do
3618: LD_ADDR_VAR 0 2
3622: PUSH
3623: DOUBLE
3624: LD_INT 1
3626: DEC
3627: ST_TO_ADDR
3628: LD_INT 4
3630: PUSH
3631: FOR_TO
3632: IFFALSE 3771
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_light_gun , us_double_gun , us_gatling_gun ] [ Rand ( 1 , 3 ) ] , 80 ) ;
3634: LD_INT 3
3636: PPUSH
3637: LD_INT 1
3639: PPUSH
3640: LD_INT 1
3642: PPUSH
3643: LD_INT 3
3645: PUSH
3646: LD_INT 5
3648: PUSH
3649: LD_INT 4
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: LIST
3656: PUSH
3657: LD_INT 1
3659: PPUSH
3660: LD_INT 3
3662: PPUSH
3663: CALL_OW 12
3667: ARRAY
3668: PPUSH
3669: LD_INT 80
3671: PPUSH
3672: CALL 45272 0 5
// veh = CreateVehicle ;
3676: LD_ADDR_VAR 0 4
3680: PUSH
3681: CALL_OW 45
3685: ST_TO_ADDR
// attackTeam = attackTeam ^ veh ;
3686: LD_ADDR_EXP 57
3690: PUSH
3691: LD_EXP 57
3695: PUSH
3696: LD_VAR 0 4
3700: ADD
3701: ST_TO_ADDR
// PlaceUnitArea ( veh , AmericanSpawnArea2 , false ) ;
3702: LD_VAR 0 4
3706: PPUSH
3707: LD_INT 17
3709: PPUSH
3710: LD_INT 0
3712: PPUSH
3713: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
3717: LD_INT 0
3719: PPUSH
3720: LD_EXP 34
3724: PPUSH
3725: CALL_OW 383
// un = CreateHuman ;
3729: LD_ADDR_VAR 0 3
3733: PUSH
3734: CALL_OW 44
3738: ST_TO_ADDR
// attackTeam = attackTeam ^ un ;
3739: LD_ADDR_EXP 57
3743: PUSH
3744: LD_EXP 57
3748: PUSH
3749: LD_VAR 0 3
3753: ADD
3754: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3755: LD_VAR 0 3
3759: PPUSH
3760: LD_VAR 0 4
3764: PPUSH
3765: CALL_OW 52
// end ;
3769: GO 3631
3771: POP
3772: POP
// for i := 1 to 3 do
3773: LD_ADDR_VAR 0 2
3777: PUSH
3778: DOUBLE
3779: LD_INT 1
3781: DEC
3782: ST_TO_ADDR
3783: LD_INT 3
3785: PUSH
3786: FOR_TO
3787: IFFALSE 3844
// begin PrepareSoldier ( false , enemySkillLevel ) ;
3789: LD_INT 0
3791: PPUSH
3792: LD_EXP 34
3796: PPUSH
3797: CALL_OW 381
// un = CreateHuman ;
3801: LD_ADDR_VAR 0 3
3805: PUSH
3806: CALL_OW 44
3810: ST_TO_ADDR
// attackTeam = attackTeam ^ un ;
3811: LD_ADDR_EXP 57
3815: PUSH
3816: LD_EXP 57
3820: PUSH
3821: LD_VAR 0 3
3825: ADD
3826: ST_TO_ADDR
// PlaceUnitArea ( un , AmericanSpawnArea2 , false ) ;
3827: LD_VAR 0 3
3831: PPUSH
3832: LD_INT 17
3834: PPUSH
3835: LD_INT 0
3837: PPUSH
3838: CALL_OW 49
// end ;
3842: GO 3786
3844: POP
3845: POP
// end ; end_of_file
3846: LD_VAR 0 1
3850: RET
// export function Nef_PrepareNature ; var i , un ; begin
3851: LD_INT 0
3853: PPUSH
3854: PPUSH
3855: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
3856: LD_ADDR_VAR 0 2
3860: PUSH
3861: DOUBLE
3862: LD_INT 1
3864: DEC
3865: ST_TO_ADDR
3866: LD_EXP 28
3870: PUSH
3871: LD_INT 1
3873: ARRAY
3874: PUSH
3875: FOR_TO
3876: IFFALSE 3986
// begin uc_side = 0 ;
3878: LD_ADDR_OWVAR 20
3882: PUSH
3883: LD_INT 0
3885: ST_TO_ADDR
// uc_nation = nation_nature ;
3886: LD_ADDR_OWVAR 21
3890: PUSH
3891: LD_INT 0
3893: ST_TO_ADDR
// hc_class = class_apeman ;
3894: LD_ADDR_OWVAR 28
3898: PUSH
3899: LD_INT 12
3901: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
3902: LD_ADDR_OWVAR 31
3906: PUSH
3907: LD_EXP 29
3911: PUSH
3912: LD_INT 1
3914: ARRAY
3915: PUSH
3916: LD_EXP 29
3920: PUSH
3921: LD_INT 2
3923: ARRAY
3924: PUSH
3925: LD_EXP 29
3929: PUSH
3930: LD_INT 3
3932: ARRAY
3933: PUSH
3934: LD_EXP 29
3938: PUSH
3939: LD_INT 4
3941: ARRAY
3942: PUSH
3943: EMPTY
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
3949: LD_ADDR_OWVAR 35
3953: PUSH
3954: LD_EXP 30
3958: ST_TO_ADDR
// un = CreateHuman ;
3959: LD_ADDR_VAR 0 3
3963: PUSH
3964: CALL_OW 44
3968: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
3969: LD_VAR 0 3
3973: PPUSH
3974: LD_INT 2
3976: PPUSH
3977: LD_INT 0
3979: PPUSH
3980: CALL_OW 49
// end ;
3984: GO 3875
3986: POP
3987: POP
// for i := 1 to animalsAmount [ 2 ] do
3988: LD_ADDR_VAR 0 2
3992: PUSH
3993: DOUBLE
3994: LD_INT 1
3996: DEC
3997: ST_TO_ADDR
3998: LD_EXP 28
4002: PUSH
4003: LD_INT 2
4005: ARRAY
4006: PUSH
4007: FOR_TO
4008: IFFALSE 4118
// begin uc_side = 0 ;
4010: LD_ADDR_OWVAR 20
4014: PUSH
4015: LD_INT 0
4017: ST_TO_ADDR
// uc_nation = nation_nature ;
4018: LD_ADDR_OWVAR 21
4022: PUSH
4023: LD_INT 0
4025: ST_TO_ADDR
// hc_class = class_phororhacos ;
4026: LD_ADDR_OWVAR 28
4030: PUSH
4031: LD_INT 18
4033: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4034: LD_ADDR_OWVAR 31
4038: PUSH
4039: LD_EXP 29
4043: PUSH
4044: LD_INT 1
4046: ARRAY
4047: PUSH
4048: LD_EXP 29
4052: PUSH
4053: LD_INT 2
4055: ARRAY
4056: PUSH
4057: LD_EXP 29
4061: PUSH
4062: LD_INT 3
4064: ARRAY
4065: PUSH
4066: LD_EXP 29
4070: PUSH
4071: LD_INT 4
4073: ARRAY
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4081: LD_ADDR_OWVAR 35
4085: PUSH
4086: LD_EXP 30
4090: ST_TO_ADDR
// un = CreateHuman ;
4091: LD_ADDR_VAR 0 3
4095: PUSH
4096: CALL_OW 44
4100: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4101: LD_VAR 0 3
4105: PPUSH
4106: LD_INT 2
4108: PPUSH
4109: LD_INT 0
4111: PPUSH
4112: CALL_OW 49
// end ;
4116: GO 4007
4118: POP
4119: POP
// for i := 1 to animalsAmount [ 3 ] do
4120: LD_ADDR_VAR 0 2
4124: PUSH
4125: DOUBLE
4126: LD_INT 1
4128: DEC
4129: ST_TO_ADDR
4130: LD_EXP 28
4134: PUSH
4135: LD_INT 3
4137: ARRAY
4138: PUSH
4139: FOR_TO
4140: IFFALSE 4250
// begin uc_side = 0 ;
4142: LD_ADDR_OWVAR 20
4146: PUSH
4147: LD_INT 0
4149: ST_TO_ADDR
// uc_nation = nation_nature ;
4150: LD_ADDR_OWVAR 21
4154: PUSH
4155: LD_INT 0
4157: ST_TO_ADDR
// hc_class = class_tiger ;
4158: LD_ADDR_OWVAR 28
4162: PUSH
4163: LD_INT 14
4165: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4166: LD_ADDR_OWVAR 31
4170: PUSH
4171: LD_EXP 29
4175: PUSH
4176: LD_INT 1
4178: ARRAY
4179: PUSH
4180: LD_EXP 29
4184: PUSH
4185: LD_INT 2
4187: ARRAY
4188: PUSH
4189: LD_EXP 29
4193: PUSH
4194: LD_INT 3
4196: ARRAY
4197: PUSH
4198: LD_EXP 29
4202: PUSH
4203: LD_INT 4
4205: ARRAY
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: LIST
4211: LIST
4212: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4213: LD_ADDR_OWVAR 35
4217: PUSH
4218: LD_EXP 30
4222: ST_TO_ADDR
// un = CreateHuman ;
4223: LD_ADDR_VAR 0 3
4227: PUSH
4228: CALL_OW 44
4232: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4233: LD_VAR 0 3
4237: PPUSH
4238: LD_INT 2
4240: PPUSH
4241: LD_INT 0
4243: PPUSH
4244: CALL_OW 49
// end ;
4248: GO 4139
4250: POP
4251: POP
// for i := 1 to animalsAmount [ 4 ] do
4252: LD_ADDR_VAR 0 2
4256: PUSH
4257: DOUBLE
4258: LD_INT 1
4260: DEC
4261: ST_TO_ADDR
4262: LD_EXP 28
4266: PUSH
4267: LD_INT 4
4269: ARRAY
4270: PUSH
4271: FOR_TO
4272: IFFALSE 4382
// begin uc_side = 0 ;
4274: LD_ADDR_OWVAR 20
4278: PUSH
4279: LD_INT 0
4281: ST_TO_ADDR
// uc_nation = nation_nature ;
4282: LD_ADDR_OWVAR 21
4286: PUSH
4287: LD_INT 0
4289: ST_TO_ADDR
// hc_class = 21 ;
4290: LD_ADDR_OWVAR 28
4294: PUSH
4295: LD_INT 21
4297: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4298: LD_ADDR_OWVAR 31
4302: PUSH
4303: LD_EXP 29
4307: PUSH
4308: LD_INT 1
4310: ARRAY
4311: PUSH
4312: LD_EXP 29
4316: PUSH
4317: LD_INT 2
4319: ARRAY
4320: PUSH
4321: LD_EXP 29
4325: PUSH
4326: LD_INT 3
4328: ARRAY
4329: PUSH
4330: LD_EXP 29
4334: PUSH
4335: LD_INT 4
4337: ARRAY
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4345: LD_ADDR_OWVAR 35
4349: PUSH
4350: LD_EXP 30
4354: ST_TO_ADDR
// un = CreateHuman ;
4355: LD_ADDR_VAR 0 3
4359: PUSH
4360: CALL_OW 44
4364: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4365: LD_VAR 0 3
4369: PPUSH
4370: LD_INT 2
4372: PPUSH
4373: LD_INT 0
4375: PPUSH
4376: CALL_OW 49
// end ;
4380: GO 4271
4382: POP
4383: POP
// for i := 1 to animalsAmount [ 5 ] do
4384: LD_ADDR_VAR 0 2
4388: PUSH
4389: DOUBLE
4390: LD_INT 1
4392: DEC
4393: ST_TO_ADDR
4394: LD_EXP 28
4398: PUSH
4399: LD_INT 5
4401: ARRAY
4402: PUSH
4403: FOR_TO
4404: IFFALSE 4465
// begin uc_side = 0 ;
4406: LD_ADDR_OWVAR 20
4410: PUSH
4411: LD_INT 0
4413: ST_TO_ADDR
// uc_nation = nation_nature ;
4414: LD_ADDR_OWVAR 21
4418: PUSH
4419: LD_INT 0
4421: ST_TO_ADDR
// vc_chassis := 31 ;
4422: LD_ADDR_OWVAR 37
4426: PUSH
4427: LD_INT 31
4429: ST_TO_ADDR
// vc_control := control_rider ;
4430: LD_ADDR_OWVAR 38
4434: PUSH
4435: LD_INT 4
4437: ST_TO_ADDR
// un := CreateVehicle ;
4438: LD_ADDR_VAR 0 3
4442: PUSH
4443: CALL_OW 45
4447: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4448: LD_VAR 0 3
4452: PPUSH
4453: LD_INT 2
4455: PPUSH
4456: LD_INT 0
4458: PPUSH
4459: CALL_OW 49
// end ;
4463: GO 4403
4465: POP
4466: POP
// end ; end_of_file
4467: LD_VAR 0 1
4471: RET
// every 0 0$1 do
4472: GO 4474
4474: DISABLE
// InitAIManager ( 1 , 2 , UnitFilter ( ovsyenkoBase , [ f_type , unit_human ] ) , OvsyenkoBaseArea , OvsyenkoHealArea , false , false , 0 , 0 , 0 , 0 , 0 ) ;
4475: LD_INT 1
4477: PPUSH
4478: LD_INT 2
4480: PPUSH
4481: LD_EXP 52
4485: PPUSH
4486: LD_INT 21
4488: PUSH
4489: LD_INT 1
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PPUSH
4496: CALL_OW 72
4500: PPUSH
4501: LD_INT 3
4503: PPUSH
4504: LD_INT 6
4506: PPUSH
4507: LD_INT 0
4509: PPUSH
4510: LD_INT 0
4512: PPUSH
4513: LD_INT 0
4515: PPUSH
4516: LD_INT 0
4518: PPUSH
4519: LD_INT 0
4521: PPUSH
4522: LD_INT 0
4524: PPUSH
4525: LD_INT 0
4527: PPUSH
4528: CALL 4640 0 12
4532: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_weapon , us_bulldozer ] ] ) do var unit ;
4533: LD_INT 22
4535: PUSH
4536: LD_INT 1
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PUSH
4543: LD_INT 50
4545: PUSH
4546: EMPTY
4547: LIST
4548: PUSH
4549: LD_INT 34
4551: PUSH
4552: LD_INT 14
4554: PUSH
4555: EMPTY
4556: LIST
4557: LIST
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: LIST
4563: PPUSH
4564: CALL_OW 69
4568: IFFALSE 4637
4570: GO 4572
4572: DISABLE
4573: LD_INT 0
4575: PPUSH
// begin enable ;
4576: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_weapon , us_bulldozer ] ] ) do
4577: LD_ADDR_VAR 0 1
4581: PUSH
4582: LD_INT 22
4584: PUSH
4585: LD_INT 1
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: PUSH
4592: LD_INT 50
4594: PUSH
4595: EMPTY
4596: LIST
4597: PUSH
4598: LD_INT 34
4600: PUSH
4601: LD_INT 14
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: LIST
4612: PPUSH
4613: CALL_OW 69
4617: PUSH
4618: FOR_IN
4619: IFFALSE 4635
// CutTreeInArea ( unit , TreeArea ) ;
4621: LD_VAR 0 1
4625: PPUSH
4626: LD_INT 18
4628: PPUSH
4629: CALL 14427 0 2
4633: GO 4618
4635: POP
4636: POP
// end ;
4637: PPOPN 1
4639: END
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , repairArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack , canRebuild ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , offensiveUnits , offensiveReadyCounter , target1 , target2 , defenceUnits , weapons , chassis , baseBuildings , destroyedBuildings , destroyedBuilding , constructedBuilding , constructedBuildings , depot , factory , lab , bunkers , barracks , controlTowers , attackBuildings , enemyBuildings , damageBuilding , damageUnit , emptyBunkers , enemyUnits ; begin
4640: LD_INT 0
4642: PPUSH
4643: PPUSH
4644: PPUSH
4645: PPUSH
4646: PPUSH
4647: PPUSH
4648: PPUSH
4649: PPUSH
4650: PPUSH
4651: PPUSH
4652: PPUSH
4653: PPUSH
4654: PPUSH
4655: PPUSH
4656: PPUSH
4657: PPUSH
4658: PPUSH
4659: PPUSH
4660: PPUSH
4661: PPUSH
4662: PPUSH
4663: PPUSH
4664: PPUSH
4665: PPUSH
4666: PPUSH
4667: PPUSH
4668: PPUSH
4669: PPUSH
4670: PPUSH
4671: PPUSH
4672: PPUSH
4673: PPUSH
4674: PPUSH
4675: PPUSH
4676: PPUSH
4677: PPUSH
4678: PPUSH
4679: PPUSH
// personel = [ ] ;
4680: LD_ADDR_VAR 0 19
4684: PUSH
4685: EMPTY
4686: ST_TO_ADDR
// vehicles = [ ] ;
4687: LD_ADDR_VAR 0 25
4691: PUSH
4692: EMPTY
4693: ST_TO_ADDR
// destroyedBuildings = [ ] ;
4694: LD_ADDR_VAR 0 35
4698: PUSH
4699: EMPTY
4700: ST_TO_ADDR
// for unit in basePersonel do
4701: LD_ADDR_VAR 0 18
4705: PUSH
4706: LD_VAR 0 3
4710: PUSH
4711: FOR_IN
4712: IFFALSE 4732
// personel = personel ^ unit ;
4714: LD_ADDR_VAR 0 19
4718: PUSH
4719: LD_VAR 0 19
4723: PUSH
4724: LD_VAR 0 18
4728: ADD
4729: ST_TO_ADDR
4730: GO 4711
4732: POP
4733: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ] ] ) do
4734: LD_ADDR_VAR 0 24
4738: PUSH
4739: LD_VAR 0 4
4743: PPUSH
4744: LD_INT 22
4746: PUSH
4747: LD_VAR 0 1
4751: PUSH
4752: EMPTY
4753: LIST
4754: LIST
4755: PUSH
4756: LD_INT 21
4758: PUSH
4759: LD_INT 2
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PUSH
4766: LD_INT 50
4768: PUSH
4769: EMPTY
4770: LIST
4771: PUSH
4772: LD_INT 3
4774: PUSH
4775: LD_INT 2
4777: PUSH
4778: LD_INT 34
4780: PUSH
4781: LD_INT 12
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: PUSH
4788: LD_INT 34
4790: PUSH
4791: LD_INT 51
4793: PUSH
4794: EMPTY
4795: LIST
4796: LIST
4797: PUSH
4798: LD_INT 34
4800: PUSH
4801: LD_INT 32
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: PUSH
4808: LD_INT 34
4810: PUSH
4811: LD_INT 31
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: PUSH
4829: EMPTY
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: PPUSH
4835: CALL_OW 70
4839: PUSH
4840: FOR_IN
4841: IFFALSE 4861
// vehicles = vehicles ^ vehicle ;
4843: LD_ADDR_VAR 0 25
4847: PUSH
4848: LD_VAR 0 25
4852: PUSH
4853: LD_VAR 0 24
4857: ADD
4858: ST_TO_ADDR
4859: GO 4840
4861: POP
4862: POP
// repeat soldiers = [ ] ;
4863: LD_ADDR_VAR 0 20
4867: PUSH
4868: EMPTY
4869: ST_TO_ADDR
// engineers = [ ] ;
4870: LD_ADDR_VAR 0 21
4874: PUSH
4875: EMPTY
4876: ST_TO_ADDR
// mechanics = [ ] ;
4877: LD_ADDR_VAR 0 22
4881: PUSH
4882: EMPTY
4883: ST_TO_ADDR
// scientists = [ ] ;
4884: LD_ADDR_VAR 0 23
4888: PUSH
4889: EMPTY
4890: ST_TO_ADDR
// baseBuildings = [ ] ;
4891: LD_ADDR_VAR 0 34
4895: PUSH
4896: EMPTY
4897: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4898: LD_ADDR_VAR 0 39
4902: PUSH
4903: LD_VAR 0 4
4907: PPUSH
4908: LD_INT 22
4910: PUSH
4911: LD_VAR 0 1
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PUSH
4920: LD_INT 21
4922: PUSH
4923: LD_INT 3
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: PUSH
4930: LD_INT 50
4932: PUSH
4933: EMPTY
4934: LIST
4935: PUSH
4936: LD_INT 2
4938: PUSH
4939: LD_INT 30
4941: PUSH
4942: LD_INT 0
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: PUSH
4949: LD_INT 30
4951: PUSH
4952: LD_INT 1
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: LIST
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: PPUSH
4970: CALL_OW 70
4974: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
4975: LD_ADDR_VAR 0 40
4979: PUSH
4980: LD_VAR 0 4
4984: PPUSH
4985: LD_INT 22
4987: PUSH
4988: LD_VAR 0 1
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: PUSH
4997: LD_INT 21
4999: PUSH
5000: LD_INT 3
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PUSH
5007: LD_INT 50
5009: PUSH
5010: EMPTY
5011: LIST
5012: PUSH
5013: LD_INT 2
5015: PUSH
5016: LD_INT 30
5018: PUSH
5019: LD_INT 2
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: LD_INT 30
5028: PUSH
5029: LD_INT 3
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: LIST
5040: PUSH
5041: EMPTY
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: PPUSH
5047: CALL_OW 70
5051: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5052: LD_ADDR_VAR 0 41
5056: PUSH
5057: LD_VAR 0 4
5061: PPUSH
5062: LD_INT 22
5064: PUSH
5065: LD_VAR 0 1
5069: PUSH
5070: EMPTY
5071: LIST
5072: LIST
5073: PUSH
5074: LD_INT 21
5076: PUSH
5077: LD_INT 3
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: PUSH
5084: LD_INT 50
5086: PUSH
5087: EMPTY
5088: LIST
5089: PUSH
5090: LD_INT 2
5092: PUSH
5093: LD_INT 30
5095: PUSH
5096: LD_INT 6
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PUSH
5103: LD_INT 30
5105: PUSH
5106: LD_INT 7
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: PUSH
5113: LD_INT 30
5115: PUSH
5116: LD_INT 8
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: PPUSH
5135: CALL_OW 70
5139: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
5140: LD_ADDR_VAR 0 42
5144: PUSH
5145: LD_VAR 0 4
5149: PPUSH
5150: LD_INT 22
5152: PUSH
5153: LD_VAR 0 1
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: PUSH
5162: LD_INT 21
5164: PUSH
5165: LD_INT 3
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: PUSH
5172: LD_INT 50
5174: PUSH
5175: EMPTY
5176: LIST
5177: PUSH
5178: LD_INT 2
5180: PUSH
5181: LD_INT 30
5183: PUSH
5184: LD_INT 31
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: PUSH
5191: LD_INT 30
5193: PUSH
5194: LD_INT 32
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: LIST
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: PPUSH
5212: CALL_OW 70
5216: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
5217: LD_ADDR_VAR 0 43
5221: PUSH
5222: LD_VAR 0 4
5226: PPUSH
5227: LD_INT 22
5229: PUSH
5230: LD_VAR 0 1
5234: PUSH
5235: EMPTY
5236: LIST
5237: LIST
5238: PUSH
5239: LD_INT 21
5241: PUSH
5242: LD_INT 3
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: PUSH
5249: LD_INT 50
5251: PUSH
5252: EMPTY
5253: LIST
5254: PUSH
5255: LD_INT 2
5257: PUSH
5258: LD_INT 30
5260: PUSH
5261: LD_INT 4
5263: PUSH
5264: EMPTY
5265: LIST
5266: LIST
5267: PUSH
5268: LD_INT 30
5270: PUSH
5271: LD_INT 5
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: PUSH
5278: EMPTY
5279: LIST
5280: LIST
5281: LIST
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: PPUSH
5289: CALL_OW 70
5293: ST_TO_ADDR
// controlTowers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_vehicle ] ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5294: LD_ADDR_VAR 0 44
5298: PUSH
5299: LD_VAR 0 4
5303: PPUSH
5304: LD_INT 22
5306: PUSH
5307: LD_VAR 0 1
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: PUSH
5316: LD_INT 50
5318: PUSH
5319: EMPTY
5320: LIST
5321: PUSH
5322: LD_INT 2
5324: PUSH
5325: LD_INT 21
5327: PUSH
5328: LD_INT 3
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PUSH
5335: LD_INT 21
5337: PUSH
5338: LD_INT 2
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: LIST
5349: PUSH
5350: LD_INT 2
5352: PUSH
5353: LD_INT 30
5355: PUSH
5356: LD_INT 36
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: PUSH
5363: LD_INT 34
5365: PUSH
5366: LD_INT 31
5368: PUSH
5369: EMPTY
5370: LIST
5371: LIST
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: LIST
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: PPUSH
5384: CALL_OW 70
5388: ST_TO_ADDR
// constructedBuildings = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] ] ) ;
5389: LD_ADDR_VAR 0 38
5393: PUSH
5394: LD_VAR 0 4
5398: PPUSH
5399: LD_INT 22
5401: PUSH
5402: LD_VAR 0 1
5406: PUSH
5407: EMPTY
5408: LIST
5409: LIST
5410: PUSH
5411: LD_INT 21
5413: PUSH
5414: LD_INT 3
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: PUSH
5421: LD_INT 3
5423: PUSH
5424: LD_INT 57
5426: PUSH
5427: EMPTY
5428: LIST
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: LIST
5438: PPUSH
5439: CALL_OW 70
5443: ST_TO_ADDR
// for i := 1 to personel do
5444: LD_ADDR_VAR 0 14
5448: PUSH
5449: DOUBLE
5450: LD_INT 1
5452: DEC
5453: ST_TO_ADDR
5454: LD_VAR 0 19
5458: PUSH
5459: FOR_TO
5460: IFFALSE 5628
// begin if GetLives ( personel [ i ] ) = 1000 then
5462: LD_VAR 0 19
5466: PUSH
5467: LD_VAR 0 14
5471: ARRAY
5472: PPUSH
5473: CALL_OW 256
5477: PUSH
5478: LD_INT 1000
5480: EQUAL
5481: IFFALSE 5503
// SetTag ( personel [ i ] , 1 ) else
5483: LD_VAR 0 19
5487: PUSH
5488: LD_VAR 0 14
5492: ARRAY
5493: PPUSH
5494: LD_INT 1
5496: PPUSH
5497: CALL_OW 109
5501: GO 5583
// if GetLives ( personel [ i ] ) <= 950 and GetLives ( personel [ i ] ) > 250 then
5503: LD_VAR 0 19
5507: PUSH
5508: LD_VAR 0 14
5512: ARRAY
5513: PPUSH
5514: CALL_OW 256
5518: PUSH
5519: LD_INT 950
5521: LESSEQUAL
5522: PUSH
5523: LD_VAR 0 19
5527: PUSH
5528: LD_VAR 0 14
5532: ARRAY
5533: PPUSH
5534: CALL_OW 256
5538: PUSH
5539: LD_INT 250
5541: GREATER
5542: AND
5543: IFFALSE 5583
// begin SetTag ( personel [ i ] , 0 ) ;
5545: LD_VAR 0 19
5549: PUSH
5550: LD_VAR 0 14
5554: ARRAY
5555: PPUSH
5556: LD_INT 0
5558: PPUSH
5559: CALL_OW 109
// ComMoveToArea ( personel [ i ] , healArea ) ;
5563: LD_VAR 0 19
5567: PUSH
5568: LD_VAR 0 14
5572: ARRAY
5573: PPUSH
5574: LD_VAR 0 5
5578: PPUSH
5579: CALL_OW 113
// end ; if GetLives ( personel [ i ] ) < 100 then
5583: LD_VAR 0 19
5587: PUSH
5588: LD_VAR 0 14
5592: ARRAY
5593: PPUSH
5594: CALL_OW 256
5598: PUSH
5599: LD_INT 100
5601: LESS
5602: IFFALSE 5626
// personel = personel diff personel [ i ] ;
5604: LD_ADDR_VAR 0 19
5608: PUSH
5609: LD_VAR 0 19
5613: PUSH
5614: LD_VAR 0 19
5618: PUSH
5619: LD_VAR 0 14
5623: ARRAY
5624: DIFF
5625: ST_TO_ADDR
// end ;
5626: GO 5459
5628: POP
5629: POP
// for i := 1 to vehicles do
5630: LD_ADDR_VAR 0 14
5634: PUSH
5635: DOUBLE
5636: LD_INT 1
5638: DEC
5639: ST_TO_ADDR
5640: LD_VAR 0 25
5644: PUSH
5645: FOR_TO
5646: IFFALSE 6008
// begin if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
5648: LD_VAR 0 25
5652: PUSH
5653: LD_VAR 0 14
5657: ARRAY
5658: PUSH
5659: LD_INT 1
5661: ARRAY
5662: PPUSH
5663: CALL_OW 256
5667: PUSH
5668: LD_INT 1000
5670: EQUAL
5671: IFFALSE 5835
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
5673: LD_VAR 0 25
5677: PUSH
5678: LD_VAR 0 14
5682: ARRAY
5683: PUSH
5684: LD_INT 1
5686: ARRAY
5687: PPUSH
5688: CALL_OW 263
5692: PUSH
5693: LD_INT 1
5695: EQUAL
5696: IFFALSE 5775
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) and IsOK ( vehicles [ i ] [ 2 ] ) then
5698: LD_VAR 0 25
5702: PUSH
5703: LD_VAR 0 14
5707: ARRAY
5708: PUSH
5709: LD_INT 2
5711: ARRAY
5712: PPUSH
5713: CALL_OW 310
5717: NOT
5718: PUSH
5719: LD_VAR 0 25
5723: PUSH
5724: LD_VAR 0 14
5728: ARRAY
5729: PUSH
5730: LD_INT 2
5732: ARRAY
5733: PPUSH
5734: CALL_OW 302
5738: AND
5739: IFFALSE 5775
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
5741: LD_VAR 0 25
5745: PUSH
5746: LD_VAR 0 14
5750: ARRAY
5751: PUSH
5752: LD_INT 2
5754: ARRAY
5755: PPUSH
5756: LD_VAR 0 25
5760: PUSH
5761: LD_VAR 0 14
5765: ARRAY
5766: PUSH
5767: LD_INT 1
5769: ARRAY
5770: PPUSH
5771: CALL_OW 120
// if offensiveUnits < vehiclesToAttackAmount then
5775: LD_VAR 0 27
5779: PUSH
5780: LD_VAR 0 10
5784: LESS
5785: IFFALSE 5811
// SetTag ( vehicles [ i ] [ 1 ] , 2 ) else
5787: LD_VAR 0 25
5791: PUSH
5792: LD_VAR 0 14
5796: ARRAY
5797: PUSH
5798: LD_INT 1
5800: ARRAY
5801: PPUSH
5802: LD_INT 2
5804: PPUSH
5805: CALL_OW 109
5809: GO 5833
// SetTag ( vehicles [ i ] [ 1 ] , 3 ) ;
5811: LD_VAR 0 25
5815: PUSH
5816: LD_VAR 0 14
5820: ARRAY
5821: PUSH
5822: LD_INT 1
5824: ARRAY
5825: PPUSH
5826: LD_INT 3
5828: PPUSH
5829: CALL_OW 109
// end else
5833: GO 5956
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 and GetLives ( vehicles [ i ] [ 1 ] ) > 250 and GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
5835: LD_VAR 0 25
5839: PUSH
5840: LD_VAR 0 14
5844: ARRAY
5845: PUSH
5846: LD_INT 1
5848: ARRAY
5849: PPUSH
5850: CALL_OW 256
5854: PUSH
5855: LD_INT 650
5857: LESSEQUAL
5858: PUSH
5859: LD_VAR 0 25
5863: PUSH
5864: LD_VAR 0 14
5868: ARRAY
5869: PUSH
5870: LD_INT 1
5872: ARRAY
5873: PPUSH
5874: CALL_OW 256
5878: PUSH
5879: LD_INT 250
5881: GREATER
5882: AND
5883: PUSH
5884: LD_VAR 0 25
5888: PUSH
5889: LD_VAR 0 14
5893: ARRAY
5894: PUSH
5895: LD_INT 1
5897: ARRAY
5898: PPUSH
5899: CALL_OW 263
5903: PUSH
5904: LD_INT 1
5906: EQUAL
5907: AND
5908: IFFALSE 5956
// begin SetTag ( vehicles [ i ] [ 1 ] , 0 ) ;
5910: LD_VAR 0 25
5914: PUSH
5915: LD_VAR 0 14
5919: ARRAY
5920: PUSH
5921: LD_INT 1
5923: ARRAY
5924: PPUSH
5925: LD_INT 0
5927: PPUSH
5928: CALL_OW 109
// ComMoveToArea ( vehicles [ i ] [ 1 ] , repairArea ) ;
5932: LD_VAR 0 25
5936: PUSH
5937: LD_VAR 0 14
5941: ARRAY
5942: PUSH
5943: LD_INT 1
5945: ARRAY
5946: PPUSH
5947: LD_VAR 0 6
5951: PPUSH
5952: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
5956: LD_VAR 0 25
5960: PUSH
5961: LD_VAR 0 14
5965: ARRAY
5966: PUSH
5967: LD_INT 1
5969: ARRAY
5970: PPUSH
5971: CALL_OW 256
5975: PUSH
5976: LD_INT 250
5978: LESS
5979: IFFALSE 6006
// begin vehicles = vehicles diff [ vehicles [ i ] ] ;
5981: LD_ADDR_VAR 0 25
5985: PUSH
5986: LD_VAR 0 25
5990: PUSH
5991: LD_VAR 0 25
5995: PUSH
5996: LD_VAR 0 14
6000: ARRAY
6001: PUSH
6002: EMPTY
6003: LIST
6004: DIFF
6005: ST_TO_ADDR
// end ; end ;
6006: GO 5645
6008: POP
6009: POP
// for i := 1 to personel do
6010: LD_ADDR_VAR 0 14
6014: PUSH
6015: DOUBLE
6016: LD_INT 1
6018: DEC
6019: ST_TO_ADDR
6020: LD_VAR 0 19
6024: PUSH
6025: FOR_TO
6026: IFFALSE 6077
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
6028: LD_ADDR_VAR 0 20
6032: PUSH
6033: LD_VAR 0 20
6037: PUSH
6038: LD_VAR 0 19
6042: PUSH
6043: LD_VAR 0 14
6047: ARRAY
6048: PPUSH
6049: LD_INT 25
6051: PUSH
6052: LD_INT 1
6054: PUSH
6055: EMPTY
6056: LIST
6057: LIST
6058: PUSH
6059: LD_INT 50
6061: PUSH
6062: EMPTY
6063: LIST
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: PPUSH
6069: CALL_OW 72
6073: ADD
6074: ST_TO_ADDR
6075: GO 6025
6077: POP
6078: POP
// if soldiers and UnitFilter ( bunkers , [ f_empty ] ) then
6079: LD_VAR 0 20
6083: PUSH
6084: LD_VAR 0 42
6088: PPUSH
6089: LD_INT 58
6091: PUSH
6092: EMPTY
6093: LIST
6094: PPUSH
6095: CALL_OW 72
6099: AND
6100: IFFALSE 6358
// begin for i := 1 to soldiers do
6102: LD_ADDR_VAR 0 14
6106: PUSH
6107: DOUBLE
6108: LD_INT 1
6110: DEC
6111: ST_TO_ADDR
6112: LD_VAR 0 20
6116: PUSH
6117: FOR_TO
6118: IFFALSE 6354
// if GetTag ( soldiers [ i ] ) = 1 then
6120: LD_VAR 0 20
6124: PUSH
6125: LD_VAR 0 14
6129: ARRAY
6130: PPUSH
6131: CALL_OW 110
6135: PUSH
6136: LD_INT 1
6138: EQUAL
6139: IFFALSE 6352
// begin if GetTaskList ( soldiers [ i ] ) then
6141: LD_VAR 0 20
6145: PUSH
6146: LD_VAR 0 14
6150: ARRAY
6151: PPUSH
6152: CALL_OW 437
6156: IFFALSE 6245
// if GetTaskList ( soldiers [ i ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( soldiers [ i ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
6158: LD_VAR 0 20
6162: PUSH
6163: LD_VAR 0 14
6167: ARRAY
6168: PPUSH
6169: CALL_OW 437
6173: PUSH
6174: LD_INT 1
6176: ARRAY
6177: PUSH
6178: LD_INT 1
6180: ARRAY
6181: PUSH
6182: LD_STRING e
6184: EQUAL
6185: PUSH
6186: LD_VAR 0 20
6190: PUSH
6191: LD_VAR 0 14
6195: ARRAY
6196: PPUSH
6197: CALL_OW 437
6201: PUSH
6202: LD_INT 1
6204: ARRAY
6205: PUSH
6206: LD_INT 4
6208: ARRAY
6209: PPUSH
6210: CALL_OW 266
6214: PUSH
6215: LD_INT 4
6217: PUSH
6218: LD_INT 5
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: IN
6225: AND
6226: IFFALSE 6245
// SetTaskList ( soldiers [ i ] , [ ] ) ;
6228: LD_VAR 0 20
6232: PUSH
6233: LD_VAR 0 14
6237: ARRAY
6238: PPUSH
6239: EMPTY
6240: PPUSH
6241: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
6245: LD_ADDR_VAR 0 49
6249: PUSH
6250: LD_VAR 0 42
6254: PPUSH
6255: LD_INT 3
6257: PUSH
6258: LD_INT 59
6260: PUSH
6261: EMPTY
6262: LIST
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: PPUSH
6268: CALL_OW 72
6272: PUSH
6273: FOR_IN
6274: IFFALSE 6350
// if not HasTask ( soldiers [ i ] ) and not GetBType ( IsInUnit ( soldiers [ i ] ) ) in [ b_breastwork , b_bunker ] then
6276: LD_VAR 0 20
6280: PUSH
6281: LD_VAR 0 14
6285: ARRAY
6286: PPUSH
6287: CALL_OW 314
6291: NOT
6292: PUSH
6293: LD_VAR 0 20
6297: PUSH
6298: LD_VAR 0 14
6302: ARRAY
6303: PPUSH
6304: CALL_OW 310
6308: PPUSH
6309: CALL_OW 266
6313: PUSH
6314: LD_INT 31
6316: PUSH
6317: LD_INT 32
6319: PUSH
6320: EMPTY
6321: LIST
6322: LIST
6323: IN
6324: NOT
6325: AND
6326: IFFALSE 6348
// ComEnterUnit ( soldiers [ i ] , emptyBunkers ) ;
6328: LD_VAR 0 20
6332: PUSH
6333: LD_VAR 0 14
6337: ARRAY
6338: PPUSH
6339: LD_VAR 0 49
6343: PPUSH
6344: CALL_OW 120
6348: GO 6273
6350: POP
6351: POP
// end ;
6352: GO 6117
6354: POP
6355: POP
// end else
6356: GO 6530
// if soldiers and barracks then
6358: LD_VAR 0 20
6362: PUSH
6363: LD_VAR 0 43
6367: AND
6368: IFFALSE 6490
// begin for i := 1 to soldiers do
6370: LD_ADDR_VAR 0 14
6374: PUSH
6375: DOUBLE
6376: LD_INT 1
6378: DEC
6379: ST_TO_ADDR
6380: LD_VAR 0 20
6384: PUSH
6385: FOR_TO
6386: IFFALSE 6486
// if GetTag ( soldiers [ i ] ) = 1 and UnitFilter ( soldiers [ i ] , [ f_outside ] ) and not HasTask ( soldiers [ i ] ) then
6388: LD_VAR 0 20
6392: PUSH
6393: LD_VAR 0 14
6397: ARRAY
6398: PPUSH
6399: CALL_OW 110
6403: PUSH
6404: LD_INT 1
6406: EQUAL
6407: PUSH
6408: LD_VAR 0 20
6412: PUSH
6413: LD_VAR 0 14
6417: ARRAY
6418: PPUSH
6419: LD_INT 56
6421: PUSH
6422: EMPTY
6423: LIST
6424: PPUSH
6425: CALL_OW 72
6429: AND
6430: PUSH
6431: LD_VAR 0 20
6435: PUSH
6436: LD_VAR 0 14
6440: ARRAY
6441: PPUSH
6442: CALL_OW 314
6446: NOT
6447: AND
6448: IFFALSE 6484
// ComEnterUnit ( soldiers [ i ] , barracks [ rand ( 1 , barracks ) ] ) ;
6450: LD_VAR 0 20
6454: PUSH
6455: LD_VAR 0 14
6459: ARRAY
6460: PPUSH
6461: LD_VAR 0 43
6465: PUSH
6466: LD_INT 1
6468: PPUSH
6469: LD_VAR 0 43
6473: PPUSH
6474: CALL_OW 12
6478: ARRAY
6479: PPUSH
6480: CALL_OW 120
6484: GO 6385
6486: POP
6487: POP
// end else
6488: GO 6530
// for i := 1 to soldiers do
6490: LD_ADDR_VAR 0 14
6494: PUSH
6495: DOUBLE
6496: LD_INT 1
6498: DEC
6499: ST_TO_ADDR
6500: LD_VAR 0 20
6504: PUSH
6505: FOR_TO
6506: IFFALSE 6528
// SetTag ( soldiers [ i ] , 3 ) ;
6508: LD_VAR 0 20
6512: PUSH
6513: LD_VAR 0 14
6517: ARRAY
6518: PPUSH
6519: LD_INT 3
6521: PPUSH
6522: CALL_OW 109
6526: GO 6505
6528: POP
6529: POP
// for i := 1 to personel do
6530: LD_ADDR_VAR 0 14
6534: PUSH
6535: DOUBLE
6536: LD_INT 1
6538: DEC
6539: ST_TO_ADDR
6540: LD_VAR 0 19
6544: PUSH
6545: FOR_TO
6546: IFFALSE 6587
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
6548: LD_ADDR_VAR 0 21
6552: PUSH
6553: LD_VAR 0 21
6557: PUSH
6558: LD_VAR 0 19
6562: PUSH
6563: LD_VAR 0 14
6567: ARRAY
6568: PPUSH
6569: LD_INT 25
6571: PUSH
6572: LD_INT 2
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: PPUSH
6579: CALL_OW 72
6583: ADD
6584: ST_TO_ADDR
6585: GO 6545
6587: POP
6588: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6589: LD_VAR 0 21
6593: PUSH
6594: LD_VAR 0 4
6598: PPUSH
6599: LD_INT 22
6601: PUSH
6602: LD_VAR 0 1
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: LD_INT 21
6613: PUSH
6614: LD_INT 3
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PUSH
6621: LD_INT 3
6623: PUSH
6624: LD_INT 24
6626: PUSH
6627: LD_INT 1000
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: LIST
6642: PPUSH
6643: CALL_OW 70
6647: AND
6648: IFFALSE 6876
// begin for i := 1 to engineers do
6650: LD_ADDR_VAR 0 14
6654: PUSH
6655: DOUBLE
6656: LD_INT 1
6658: DEC
6659: ST_TO_ADDR
6660: LD_VAR 0 21
6664: PUSH
6665: FOR_TO
6666: IFFALSE 6872
// if GetTag ( engineers [ i ] ) = 1 then
6668: LD_VAR 0 21
6672: PUSH
6673: LD_VAR 0 14
6677: ARRAY
6678: PPUSH
6679: CALL_OW 110
6683: PUSH
6684: LD_INT 1
6686: EQUAL
6687: IFFALSE 6870
// begin if GetTaskList ( engineers [ i ] ) then
6689: LD_VAR 0 21
6693: PUSH
6694: LD_VAR 0 14
6698: ARRAY
6699: PPUSH
6700: CALL_OW 437
6704: IFFALSE 6752
// if GetTaskList ( engineers [ i ] ) [ 1 ] [ 1 ] = e then
6706: LD_VAR 0 21
6710: PUSH
6711: LD_VAR 0 14
6715: ARRAY
6716: PPUSH
6717: CALL_OW 437
6721: PUSH
6722: LD_INT 1
6724: ARRAY
6725: PUSH
6726: LD_INT 1
6728: ARRAY
6729: PUSH
6730: LD_STRING e
6732: EQUAL
6733: IFFALSE 6752
// SetTaskList ( engineers [ i ] , [ ] ) ;
6735: LD_VAR 0 21
6739: PUSH
6740: LD_VAR 0 14
6744: ARRAY
6745: PPUSH
6746: EMPTY
6747: PPUSH
6748: CALL_OW 446
// if IsInUnit ( engineers [ i ] ) then
6752: LD_VAR 0 21
6756: PUSH
6757: LD_VAR 0 14
6761: ARRAY
6762: PPUSH
6763: CALL_OW 310
6767: IFFALSE 6784
// ComExitBuilding ( engineers [ i ] ) ;
6769: LD_VAR 0 21
6773: PUSH
6774: LD_VAR 0 14
6778: ARRAY
6779: PPUSH
6780: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
6784: LD_ADDR_VAR 0 47
6788: PUSH
6789: LD_VAR 0 4
6793: PPUSH
6794: LD_INT 22
6796: PUSH
6797: LD_VAR 0 1
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: LD_INT 21
6808: PUSH
6809: LD_INT 3
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: PUSH
6816: LD_INT 3
6818: PUSH
6819: LD_INT 24
6821: PUSH
6822: LD_INT 1000
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: LIST
6837: PPUSH
6838: CALL_OW 70
6842: PUSH
6843: FOR_IN
6844: IFFALSE 6868
// AddComRepairBuilding ( engineers [ i ] , damageBuilding ) ;
6846: LD_VAR 0 21
6850: PUSH
6851: LD_VAR 0 14
6855: ARRAY
6856: PPUSH
6857: LD_VAR 0 47
6861: PPUSH
6862: CALL_OW 190
6866: GO 6843
6868: POP
6869: POP
// end ;
6870: GO 6665
6872: POP
6873: POP
// end else
6874: GO 7183
// if engineers and destroyedBuildings then
6876: LD_VAR 0 21
6880: PUSH
6881: LD_VAR 0 35
6885: AND
6886: IFFALSE 7062
// begin for i := 1 to engineers do
6888: LD_ADDR_VAR 0 14
6892: PUSH
6893: DOUBLE
6894: LD_INT 1
6896: DEC
6897: ST_TO_ADDR
6898: LD_VAR 0 21
6902: PUSH
6903: FOR_TO
6904: IFFALSE 7058
// if GetTag ( engineers [ i ] ) = 1 then
6906: LD_VAR 0 21
6910: PUSH
6911: LD_VAR 0 14
6915: ARRAY
6916: PPUSH
6917: CALL_OW 110
6921: PUSH
6922: LD_INT 1
6924: EQUAL
6925: IFFALSE 7056
// begin if IsInUnit ( engineers [ i ] ) then
6927: LD_VAR 0 21
6931: PUSH
6932: LD_VAR 0 14
6936: ARRAY
6937: PPUSH
6938: CALL_OW 310
6942: IFFALSE 6959
// ComExitBuilding ( engineers [ i ] ) ;
6944: LD_VAR 0 21
6948: PUSH
6949: LD_VAR 0 14
6953: ARRAY
6954: PPUSH
6955: CALL_OW 122
// for j := 1 to destroyedBuildings / 4 do
6959: LD_ADDR_VAR 0 15
6963: PUSH
6964: DOUBLE
6965: LD_INT 1
6967: DEC
6968: ST_TO_ADDR
6969: LD_VAR 0 35
6973: PUSH
6974: LD_INT 4
6976: DIVREAL
6977: PUSH
6978: FOR_TO
6979: IFFALSE 7054
// AddComBuild ( engineers [ i ] , destroyedBuildings [ j ] , destroyedBuildings [ j + 1 ] , destroyedBuildings [ j + 2 ] , destroyedBuildings [ j + 3 ] ) ;
6981: LD_VAR 0 21
6985: PUSH
6986: LD_VAR 0 14
6990: ARRAY
6991: PPUSH
6992: LD_VAR 0 35
6996: PUSH
6997: LD_VAR 0 15
7001: ARRAY
7002: PPUSH
7003: LD_VAR 0 35
7007: PUSH
7008: LD_VAR 0 15
7012: PUSH
7013: LD_INT 1
7015: PLUS
7016: ARRAY
7017: PPUSH
7018: LD_VAR 0 35
7022: PUSH
7023: LD_VAR 0 15
7027: PUSH
7028: LD_INT 2
7030: PLUS
7031: ARRAY
7032: PPUSH
7033: LD_VAR 0 35
7037: PUSH
7038: LD_VAR 0 15
7042: PUSH
7043: LD_INT 3
7045: PLUS
7046: ARRAY
7047: PPUSH
7048: CALL_OW 205
7052: GO 6978
7054: POP
7055: POP
// end ;
7056: GO 6903
7058: POP
7059: POP
// end else
7060: GO 7183
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot and not destroyedBuildings then
7062: LD_VAR 0 21
7066: PUSH
7067: LD_VAR 0 21
7071: PPUSH
7072: LD_INT 56
7074: PUSH
7075: EMPTY
7076: LIST
7077: PPUSH
7078: CALL_OW 72
7082: AND
7083: PUSH
7084: LD_VAR 0 39
7088: AND
7089: PUSH
7090: LD_VAR 0 35
7094: NOT
7095: AND
7096: IFFALSE 7183
// for i := 1 to engineers do
7098: LD_ADDR_VAR 0 14
7102: PUSH
7103: DOUBLE
7104: LD_INT 1
7106: DEC
7107: ST_TO_ADDR
7108: LD_VAR 0 21
7112: PUSH
7113: FOR_TO
7114: IFFALSE 7181
// begin if GetTag ( engineers [ i ] ) = 1 and not HasTask ( engineers [ i ] ) then
7116: LD_VAR 0 21
7120: PUSH
7121: LD_VAR 0 14
7125: ARRAY
7126: PPUSH
7127: CALL_OW 110
7131: PUSH
7132: LD_INT 1
7134: EQUAL
7135: PUSH
7136: LD_VAR 0 21
7140: PUSH
7141: LD_VAR 0 14
7145: ARRAY
7146: PPUSH
7147: CALL_OW 314
7151: NOT
7152: AND
7153: IFFALSE 7179
// ComEnterUnit ( engineers [ i ] , depot [ 1 ] ) ;
7155: LD_VAR 0 21
7159: PUSH
7160: LD_VAR 0 14
7164: ARRAY
7165: PPUSH
7166: LD_VAR 0 39
7170: PUSH
7171: LD_INT 1
7173: ARRAY
7174: PPUSH
7175: CALL_OW 120
// end ;
7179: GO 7113
7181: POP
7182: POP
// for i := 1 to personel do
7183: LD_ADDR_VAR 0 14
7187: PUSH
7188: DOUBLE
7189: LD_INT 1
7191: DEC
7192: ST_TO_ADDR
7193: LD_VAR 0 19
7197: PUSH
7198: FOR_TO
7199: IFFALSE 7240
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
7201: LD_ADDR_VAR 0 22
7205: PUSH
7206: LD_VAR 0 22
7210: PUSH
7211: LD_VAR 0 19
7215: PUSH
7216: LD_VAR 0 14
7220: ARRAY
7221: PPUSH
7222: LD_INT 25
7224: PUSH
7225: LD_INT 3
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PPUSH
7232: CALL_OW 72
7236: ADD
7237: ST_TO_ADDR
7238: GO 7198
7240: POP
7241: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
7242: LD_VAR 0 22
7246: PUSH
7247: LD_VAR 0 4
7251: PPUSH
7252: LD_INT 22
7254: PUSH
7255: LD_VAR 0 1
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PUSH
7264: LD_INT 21
7266: PUSH
7267: LD_INT 2
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PUSH
7274: LD_INT 3
7276: PUSH
7277: LD_INT 24
7279: PUSH
7280: LD_INT 1000
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: LIST
7295: PPUSH
7296: CALL_OW 70
7300: AND
7301: IFFALSE 7881
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7303: LD_ADDR_VAR 0 48
7307: PUSH
7308: LD_VAR 0 4
7312: PPUSH
7313: LD_INT 22
7315: PUSH
7316: LD_VAR 0 1
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: PUSH
7325: LD_INT 21
7327: PUSH
7328: LD_INT 2
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: PUSH
7335: LD_INT 3
7337: PUSH
7338: LD_INT 24
7340: PUSH
7341: LD_INT 1000
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: LIST
7356: PPUSH
7357: CALL_OW 70
7361: PUSH
7362: FOR_IN
7363: IFFALSE 7877
// begin if GetDistUnitArea ( damageUnit , repairArea ) <= 5 then
7365: LD_VAR 0 48
7369: PPUSH
7370: LD_VAR 0 6
7374: PPUSH
7375: CALL_OW 299
7379: PUSH
7380: LD_INT 5
7382: LESSEQUAL
7383: IFFALSE 7472
// for i := 1 to vehicles do
7385: LD_ADDR_VAR 0 14
7389: PUSH
7390: DOUBLE
7391: LD_INT 1
7393: DEC
7394: ST_TO_ADDR
7395: LD_VAR 0 25
7399: PUSH
7400: FOR_TO
7401: IFFALSE 7470
// if vehicles [ i ] [ 1 ] = damageUnit then
7403: LD_VAR 0 25
7407: PUSH
7408: LD_VAR 0 14
7412: ARRAY
7413: PUSH
7414: LD_INT 1
7416: ARRAY
7417: PUSH
7418: LD_VAR 0 48
7422: EQUAL
7423: IFFALSE 7468
// begin ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
7425: LD_VAR 0 25
7429: PUSH
7430: LD_VAR 0 14
7434: ARRAY
7435: PUSH
7436: LD_INT 2
7438: ARRAY
7439: PPUSH
7440: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
7444: LD_VAR 0 25
7448: PUSH
7449: LD_VAR 0 14
7453: ARRAY
7454: PUSH
7455: LD_INT 2
7457: ARRAY
7458: PPUSH
7459: LD_VAR 0 48
7463: PPUSH
7464: CALL_OW 189
// end ;
7468: GO 7400
7470: POP
7471: POP
// for i := 1 to mechanics do
7472: LD_ADDR_VAR 0 14
7476: PUSH
7477: DOUBLE
7478: LD_INT 1
7480: DEC
7481: ST_TO_ADDR
7482: LD_VAR 0 22
7486: PUSH
7487: FOR_TO
7488: IFFALSE 7656
// if GetTag ( mechanics [ i ] ) = 1 and IsInUnit ( mechanics [ i ] ) in [ b_workshop , b_factory ] then
7490: LD_VAR 0 22
7494: PUSH
7495: LD_VAR 0 14
7499: ARRAY
7500: PPUSH
7501: CALL_OW 110
7505: PUSH
7506: LD_INT 1
7508: EQUAL
7509: PUSH
7510: LD_VAR 0 22
7514: PUSH
7515: LD_VAR 0 14
7519: ARRAY
7520: PPUSH
7521: CALL_OW 310
7525: PUSH
7526: LD_INT 2
7528: PUSH
7529: LD_INT 3
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: IN
7536: AND
7537: IFFALSE 7654
// begin if GetTaskList ( mechanics [ i ] ) then
7539: LD_VAR 0 22
7543: PUSH
7544: LD_VAR 0 14
7548: ARRAY
7549: PPUSH
7550: CALL_OW 437
7554: IFFALSE 7602
// if GetTaskList ( mechanics [ i ] ) [ 1 ] [ 1 ] = e then
7556: LD_VAR 0 22
7560: PUSH
7561: LD_VAR 0 14
7565: ARRAY
7566: PPUSH
7567: CALL_OW 437
7571: PUSH
7572: LD_INT 1
7574: ARRAY
7575: PUSH
7576: LD_INT 1
7578: ARRAY
7579: PUSH
7580: LD_STRING e
7582: EQUAL
7583: IFFALSE 7602
// SetTaskList ( mechanics [ i ] , [ ] ) ;
7585: LD_VAR 0 22
7589: PUSH
7590: LD_VAR 0 14
7594: ARRAY
7595: PPUSH
7596: EMPTY
7597: PPUSH
7598: CALL_OW 446
// if IsInUnit ( mechanics [ i ] ) then
7602: LD_VAR 0 22
7606: PUSH
7607: LD_VAR 0 14
7611: ARRAY
7612: PPUSH
7613: CALL_OW 310
7617: IFFALSE 7634
// ComExitBuilding ( mechanics [ i ] ) ;
7619: LD_VAR 0 22
7623: PUSH
7624: LD_VAR 0 14
7628: ARRAY
7629: PPUSH
7630: CALL_OW 122
// AddComRepairVehicle ( mechanics [ i ] , damageUnit ) ;
7634: LD_VAR 0 22
7638: PUSH
7639: LD_VAR 0 14
7643: ARRAY
7644: PPUSH
7645: LD_VAR 0 48
7649: PPUSH
7650: CALL_OW 189
// end ;
7654: GO 7487
7656: POP
7657: POP
// if GetLives ( damageUnit ) < 250 and IsInArea ( damageUnit , baseArea ) then
7658: LD_VAR 0 48
7662: PPUSH
7663: CALL_OW 256
7667: PUSH
7668: LD_INT 250
7670: LESS
7671: PUSH
7672: LD_VAR 0 48
7676: PPUSH
7677: LD_VAR 0 4
7681: PPUSH
7682: CALL_OW 308
7686: AND
7687: IFFALSE 7875
// for i := 1 to personel do
7689: LD_ADDR_VAR 0 14
7693: PUSH
7694: DOUBLE
7695: LD_INT 1
7697: DEC
7698: ST_TO_ADDR
7699: LD_VAR 0 19
7703: PUSH
7704: FOR_TO
7705: IFFALSE 7873
// if GetTag ( mechanics [ i ] ) = 1 and IsInUnit ( mechanics [ i ] ) in [ b_workshop , b_factory ] then
7707: LD_VAR 0 22
7711: PUSH
7712: LD_VAR 0 14
7716: ARRAY
7717: PPUSH
7718: CALL_OW 110
7722: PUSH
7723: LD_INT 1
7725: EQUAL
7726: PUSH
7727: LD_VAR 0 22
7731: PUSH
7732: LD_VAR 0 14
7736: ARRAY
7737: PPUSH
7738: CALL_OW 310
7742: PUSH
7743: LD_INT 2
7745: PUSH
7746: LD_INT 3
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: IN
7753: AND
7754: IFFALSE 7871
// begin if GetTaskList ( mechanics [ i ] ) then
7756: LD_VAR 0 22
7760: PUSH
7761: LD_VAR 0 14
7765: ARRAY
7766: PPUSH
7767: CALL_OW 437
7771: IFFALSE 7819
// if GetTaskList ( mechanics [ i ] ) [ 1 ] [ 1 ] = e then
7773: LD_VAR 0 22
7777: PUSH
7778: LD_VAR 0 14
7782: ARRAY
7783: PPUSH
7784: CALL_OW 437
7788: PUSH
7789: LD_INT 1
7791: ARRAY
7792: PUSH
7793: LD_INT 1
7795: ARRAY
7796: PUSH
7797: LD_STRING e
7799: EQUAL
7800: IFFALSE 7819
// SetTaskList ( mechanics [ i ] , [ ] ) ;
7802: LD_VAR 0 22
7806: PUSH
7807: LD_VAR 0 14
7811: ARRAY
7812: PPUSH
7813: EMPTY
7814: PPUSH
7815: CALL_OW 446
// if IsInUnit ( mechanics [ i ] ) then
7819: LD_VAR 0 22
7823: PUSH
7824: LD_VAR 0 14
7828: ARRAY
7829: PPUSH
7830: CALL_OW 310
7834: IFFALSE 7851
// ComExitBuilding ( mechanics [ i ] ) ;
7836: LD_VAR 0 22
7840: PUSH
7841: LD_VAR 0 14
7845: ARRAY
7846: PPUSH
7847: CALL_OW 122
// AddComRepairVehicle ( mechanics [ i ] , damageUnit ) ;
7851: LD_VAR 0 22
7855: PUSH
7856: LD_VAR 0 14
7860: ARRAY
7861: PPUSH
7862: LD_VAR 0 48
7866: PPUSH
7867: CALL_OW 189
// end ;
7871: GO 7704
7873: POP
7874: POP
// end ;
7875: GO 7362
7877: POP
7878: POP
// end else
7879: GO 8178
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and UnitFilter ( controlTowers , [ f_empty ] ) then
7881: LD_VAR 0 22
7885: PUSH
7886: LD_VAR 0 22
7890: PPUSH
7891: LD_INT 56
7893: PUSH
7894: EMPTY
7895: LIST
7896: PPUSH
7897: CALL_OW 72
7901: AND
7902: PUSH
7903: LD_VAR 0 44
7907: PPUSH
7908: LD_INT 58
7910: PUSH
7911: EMPTY
7912: LIST
7913: PPUSH
7914: CALL_OW 72
7918: AND
7919: IFFALSE 8036
// begin for i := 1 to mechanics do
7921: LD_ADDR_VAR 0 14
7925: PUSH
7926: DOUBLE
7927: LD_INT 1
7929: DEC
7930: ST_TO_ADDR
7931: LD_VAR 0 22
7935: PUSH
7936: FOR_TO
7937: IFFALSE 8032
// if GetTag ( mechanics [ i ] ) = 1 and not HasTask ( mechanics [ i ] ) and not IsInUnit ( mechanics [ i ] ) then
7939: LD_VAR 0 22
7943: PUSH
7944: LD_VAR 0 14
7948: ARRAY
7949: PPUSH
7950: CALL_OW 110
7954: PUSH
7955: LD_INT 1
7957: EQUAL
7958: PUSH
7959: LD_VAR 0 22
7963: PUSH
7964: LD_VAR 0 14
7968: ARRAY
7969: PPUSH
7970: CALL_OW 314
7974: NOT
7975: AND
7976: PUSH
7977: LD_VAR 0 22
7981: PUSH
7982: LD_VAR 0 14
7986: ARRAY
7987: PPUSH
7988: CALL_OW 310
7992: NOT
7993: AND
7994: IFFALSE 8030
// ComEnterUnit ( mechanics [ i ] , controlTowers [ rand ( 1 , controlTowers ) ] ) ;
7996: LD_VAR 0 22
8000: PUSH
8001: LD_VAR 0 14
8005: ARRAY
8006: PPUSH
8007: LD_VAR 0 44
8011: PUSH
8012: LD_INT 1
8014: PPUSH
8015: LD_VAR 0 44
8019: PPUSH
8020: CALL_OW 12
8024: ARRAY
8025: PPUSH
8026: CALL_OW 120
8030: GO 7936
8032: POP
8033: POP
// end else
8034: GO 8178
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
8036: LD_VAR 0 22
8040: PUSH
8041: LD_VAR 0 22
8045: PPUSH
8046: LD_INT 56
8048: PUSH
8049: EMPTY
8050: LIST
8051: PPUSH
8052: CALL_OW 72
8056: AND
8057: PUSH
8058: LD_VAR 0 40
8062: AND
8063: IFFALSE 8178
// for i := 1 to mechanics do
8065: LD_ADDR_VAR 0 14
8069: PUSH
8070: DOUBLE
8071: LD_INT 1
8073: DEC
8074: ST_TO_ADDR
8075: LD_VAR 0 22
8079: PUSH
8080: FOR_TO
8081: IFFALSE 8176
// if GetTag ( mechanics [ i ] ) = 1 and not HasTask ( mechanics [ i ] ) and not IsInUnit ( mechanics [ i ] ) then
8083: LD_VAR 0 22
8087: PUSH
8088: LD_VAR 0 14
8092: ARRAY
8093: PPUSH
8094: CALL_OW 110
8098: PUSH
8099: LD_INT 1
8101: EQUAL
8102: PUSH
8103: LD_VAR 0 22
8107: PUSH
8108: LD_VAR 0 14
8112: ARRAY
8113: PPUSH
8114: CALL_OW 314
8118: NOT
8119: AND
8120: PUSH
8121: LD_VAR 0 22
8125: PUSH
8126: LD_VAR 0 14
8130: ARRAY
8131: PPUSH
8132: CALL_OW 310
8136: NOT
8137: AND
8138: IFFALSE 8174
// ComEnterUnit ( mechanics [ i ] , factory [ rand ( 1 , factory ) ] ) ;
8140: LD_VAR 0 22
8144: PUSH
8145: LD_VAR 0 14
8149: ARRAY
8150: PPUSH
8151: LD_VAR 0 40
8155: PUSH
8156: LD_INT 1
8158: PPUSH
8159: LD_VAR 0 40
8163: PPUSH
8164: CALL_OW 12
8168: ARRAY
8169: PPUSH
8170: CALL_OW 120
8174: GO 8080
8176: POP
8177: POP
// for i := 1 to personel do
8178: LD_ADDR_VAR 0 14
8182: PUSH
8183: DOUBLE
8184: LD_INT 1
8186: DEC
8187: ST_TO_ADDR
8188: LD_VAR 0 19
8192: PUSH
8193: FOR_TO
8194: IFFALSE 8235
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
8196: LD_ADDR_VAR 0 23
8200: PUSH
8201: LD_VAR 0 23
8205: PUSH
8206: LD_VAR 0 19
8210: PUSH
8211: LD_VAR 0 14
8215: ARRAY
8216: PPUSH
8217: LD_INT 25
8219: PUSH
8220: LD_INT 4
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: PPUSH
8227: CALL_OW 72
8231: ADD
8232: ST_TO_ADDR
8233: GO 8193
8235: POP
8236: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
8237: LD_VAR 0 23
8241: PUSH
8242: LD_VAR 0 4
8246: PPUSH
8247: LD_INT 22
8249: PUSH
8250: LD_VAR 0 1
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: PUSH
8259: LD_INT 21
8261: PUSH
8262: LD_INT 1
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PUSH
8269: LD_INT 3
8271: PUSH
8272: LD_INT 24
8274: PUSH
8275: LD_INT 1000
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: LIST
8290: PPUSH
8291: CALL_OW 70
8295: AND
8296: IFFALSE 8733
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
8298: LD_ADDR_VAR 0 48
8302: PUSH
8303: LD_VAR 0 4
8307: PPUSH
8308: LD_INT 22
8310: PUSH
8311: LD_VAR 0 1
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: LD_INT 21
8322: PUSH
8323: LD_INT 1
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: LD_INT 3
8332: PUSH
8333: LD_INT 24
8335: PUSH
8336: LD_INT 1000
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: PPUSH
8352: CALL_OW 70
8356: PUSH
8357: FOR_IN
8358: IFFALSE 8729
// begin if GetDistUnitArea ( damageUnit , healArea ) <= 5 then
8360: LD_VAR 0 48
8364: PPUSH
8365: LD_VAR 0 5
8369: PPUSH
8370: CALL_OW 299
8374: PUSH
8375: LD_INT 5
8377: LESSEQUAL
8378: IFFALSE 8538
// for i := 1 to scientists do
8380: LD_ADDR_VAR 0 14
8384: PUSH
8385: DOUBLE
8386: LD_INT 1
8388: DEC
8389: ST_TO_ADDR
8390: LD_VAR 0 23
8394: PUSH
8395: FOR_TO
8396: IFFALSE 8536
// if GetTag ( scientists [ i ] ) = 1 then
8398: LD_VAR 0 23
8402: PUSH
8403: LD_VAR 0 14
8407: ARRAY
8408: PPUSH
8409: CALL_OW 110
8413: PUSH
8414: LD_INT 1
8416: EQUAL
8417: IFFALSE 8534
// begin if GetTaskList ( scientists [ i ] ) then
8419: LD_VAR 0 23
8423: PUSH
8424: LD_VAR 0 14
8428: ARRAY
8429: PPUSH
8430: CALL_OW 437
8434: IFFALSE 8482
// if GetTaskList ( scientists [ i ] ) [ 1 ] [ 1 ] = e then
8436: LD_VAR 0 23
8440: PUSH
8441: LD_VAR 0 14
8445: ARRAY
8446: PPUSH
8447: CALL_OW 437
8451: PUSH
8452: LD_INT 1
8454: ARRAY
8455: PUSH
8456: LD_INT 1
8458: ARRAY
8459: PUSH
8460: LD_STRING e
8462: EQUAL
8463: IFFALSE 8482
// SetTaskList ( scientists [ i ] , [ ] ) ;
8465: LD_VAR 0 23
8469: PUSH
8470: LD_VAR 0 14
8474: ARRAY
8475: PPUSH
8476: EMPTY
8477: PPUSH
8478: CALL_OW 446
// if IsInUnit ( scientists [ i ] ) then
8482: LD_VAR 0 23
8486: PUSH
8487: LD_VAR 0 14
8491: ARRAY
8492: PPUSH
8493: CALL_OW 310
8497: IFFALSE 8514
// ComExitBuilding ( scientists [ i ] ) ;
8499: LD_VAR 0 23
8503: PUSH
8504: LD_VAR 0 14
8508: ARRAY
8509: PPUSH
8510: CALL_OW 122
// AddComHeal ( scientists [ i ] , damageUnit ) ;
8514: LD_VAR 0 23
8518: PUSH
8519: LD_VAR 0 14
8523: ARRAY
8524: PPUSH
8525: LD_VAR 0 48
8529: PPUSH
8530: CALL_OW 188
// end ;
8534: GO 8395
8536: POP
8537: POP
// if GetLives ( damageUnit ) < 250 and IsInArea ( damageUnit , baseArea ) then
8538: LD_VAR 0 48
8542: PPUSH
8543: CALL_OW 256
8547: PUSH
8548: LD_INT 250
8550: LESS
8551: PUSH
8552: LD_VAR 0 48
8556: PPUSH
8557: LD_VAR 0 4
8561: PPUSH
8562: CALL_OW 308
8566: AND
8567: IFFALSE 8727
// for i := 1 to scientists do
8569: LD_ADDR_VAR 0 14
8573: PUSH
8574: DOUBLE
8575: LD_INT 1
8577: DEC
8578: ST_TO_ADDR
8579: LD_VAR 0 23
8583: PUSH
8584: FOR_TO
8585: IFFALSE 8725
// if GetTag ( scientists [ i ] ) = 1 then
8587: LD_VAR 0 23
8591: PUSH
8592: LD_VAR 0 14
8596: ARRAY
8597: PPUSH
8598: CALL_OW 110
8602: PUSH
8603: LD_INT 1
8605: EQUAL
8606: IFFALSE 8723
// begin if GetTaskList ( scientists [ i ] ) then
8608: LD_VAR 0 23
8612: PUSH
8613: LD_VAR 0 14
8617: ARRAY
8618: PPUSH
8619: CALL_OW 437
8623: IFFALSE 8671
// if GetTaskList ( scientists [ i ] ) [ 1 ] [ 1 ] = e then
8625: LD_VAR 0 23
8629: PUSH
8630: LD_VAR 0 14
8634: ARRAY
8635: PPUSH
8636: CALL_OW 437
8640: PUSH
8641: LD_INT 1
8643: ARRAY
8644: PUSH
8645: LD_INT 1
8647: ARRAY
8648: PUSH
8649: LD_STRING e
8651: EQUAL
8652: IFFALSE 8671
// SetTaskList ( scientists [ i ] , [ ] ) ;
8654: LD_VAR 0 23
8658: PUSH
8659: LD_VAR 0 14
8663: ARRAY
8664: PPUSH
8665: EMPTY
8666: PPUSH
8667: CALL_OW 446
// if IsInUnit ( scientists [ i ] ) then
8671: LD_VAR 0 23
8675: PUSH
8676: LD_VAR 0 14
8680: ARRAY
8681: PPUSH
8682: CALL_OW 310
8686: IFFALSE 8703
// ComExitBuilding ( scientists [ i ] ) ;
8688: LD_VAR 0 23
8692: PUSH
8693: LD_VAR 0 14
8697: ARRAY
8698: PPUSH
8699: CALL_OW 122
// AddComHeal ( scientists [ i ] , damageUnit ) ;
8703: LD_VAR 0 23
8707: PUSH
8708: LD_VAR 0 14
8712: ARRAY
8713: PPUSH
8714: LD_VAR 0 48
8718: PPUSH
8719: CALL_OW 188
// end ;
8723: GO 8584
8725: POP
8726: POP
// end ;
8727: GO 8357
8729: POP
8730: POP
// end else
8731: GO 8875
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
8733: LD_VAR 0 23
8737: PUSH
8738: LD_VAR 0 23
8742: PPUSH
8743: LD_INT 56
8745: PUSH
8746: EMPTY
8747: LIST
8748: PPUSH
8749: CALL_OW 72
8753: AND
8754: PUSH
8755: LD_VAR 0 41
8759: AND
8760: IFFALSE 8875
// for i := 1 to scientists do
8762: LD_ADDR_VAR 0 14
8766: PUSH
8767: DOUBLE
8768: LD_INT 1
8770: DEC
8771: ST_TO_ADDR
8772: LD_VAR 0 23
8776: PUSH
8777: FOR_TO
8778: IFFALSE 8873
// if GetTag ( scientists [ i ] ) = 1 and not HasTask ( scientists [ i ] ) and not IsInUnit ( scientists [ i ] ) then
8780: LD_VAR 0 23
8784: PUSH
8785: LD_VAR 0 14
8789: ARRAY
8790: PPUSH
8791: CALL_OW 110
8795: PUSH
8796: LD_INT 1
8798: EQUAL
8799: PUSH
8800: LD_VAR 0 23
8804: PUSH
8805: LD_VAR 0 14
8809: ARRAY
8810: PPUSH
8811: CALL_OW 314
8815: NOT
8816: AND
8817: PUSH
8818: LD_VAR 0 23
8822: PUSH
8823: LD_VAR 0 14
8827: ARRAY
8828: PPUSH
8829: CALL_OW 310
8833: NOT
8834: AND
8835: IFFALSE 8871
// ComEnterUnit ( scientists [ i ] , lab [ rand ( 1 , lab ) ] ) ;
8837: LD_VAR 0 23
8841: PUSH
8842: LD_VAR 0 14
8846: ARRAY
8847: PPUSH
8848: LD_VAR 0 41
8852: PUSH
8853: LD_INT 1
8855: PPUSH
8856: LD_VAR 0 41
8860: PPUSH
8861: CALL_OW 12
8865: ARRAY
8866: PPUSH
8867: CALL_OW 120
8871: GO 8777
8873: POP
8874: POP
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , us_bulldozer ] ] ) then
8875: LD_INT 22
8877: PUSH
8878: LD_VAR 0 1
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: PUSH
8887: LD_INT 34
8889: PUSH
8890: LD_INT 14
8892: PUSH
8893: EMPTY
8894: LIST
8895: LIST
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: PPUSH
8901: CALL_OW 69
8905: NOT
8906: IFFALSE 8933
// AddComConstruct ( factory [ 1 ] , us_heavy_tracked , engine_combustion , control_remote , us_bulldozer ) ;
8908: LD_VAR 0 40
8912: PUSH
8913: LD_INT 1
8915: ARRAY
8916: PPUSH
8917: LD_INT 4
8919: PPUSH
8920: LD_INT 1
8922: PPUSH
8923: LD_INT 2
8925: PPUSH
8926: LD_INT 14
8928: PPUSH
8929: CALL_OW 185
// if vehicles < vehiclesAmount and factory then
8933: LD_VAR 0 25
8937: PUSH
8938: LD_VAR 0 8
8942: LESS
8943: PUSH
8944: LD_VAR 0 40
8948: AND
8949: IFFALSE 9197
// begin tmp = vehiclesAmount - vehicles ;
8951: LD_ADDR_VAR 0 16
8955: PUSH
8956: LD_VAR 0 8
8960: PUSH
8961: LD_VAR 0 25
8965: MINUS
8966: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
8967: LD_ADDR_VAR 0 32
8971: PUSH
8972: LD_VAR 0 1
8976: PPUSH
8977: LD_VAR 0 2
8981: PPUSH
8982: CALL 13755 0 2
8986: ST_TO_ADDR
// for i := 1 to tmp do
8987: LD_ADDR_VAR 0 14
8991: PUSH
8992: DOUBLE
8993: LD_INT 1
8995: DEC
8996: ST_TO_ADDR
8997: LD_VAR 0 16
9001: PUSH
9002: FOR_TO
9003: IFFALSE 9193
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
9005: LD_ADDR_VAR 0 16
9009: PUSH
9010: LD_VAR 0 32
9014: PUSH
9015: LD_INT 1
9017: PPUSH
9018: LD_VAR 0 32
9022: PPUSH
9023: CALL_OW 12
9027: ARRAY
9028: ST_TO_ADDR
// if tmp in [ 6 , 34 , 14 , 71 , 47 ] then
9029: LD_VAR 0 16
9033: PUSH
9034: LD_INT 6
9036: PUSH
9037: LD_INT 34
9039: PUSH
9040: LD_INT 14
9042: PUSH
9043: LD_INT 71
9045: PUSH
9046: LD_INT 47
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: IN
9056: IFFALSE 9094
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
9058: LD_ADDR_VAR 0 33
9062: PUSH
9063: LD_INT 4
9065: PUSH
9066: EMPTY
9067: LIST
9068: PUSH
9069: LD_INT 14
9071: PUSH
9072: EMPTY
9073: LIST
9074: PUSH
9075: LD_INT 24
9077: PUSH
9078: EMPTY
9079: LIST
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: LIST
9085: PUSH
9086: LD_VAR 0 2
9090: ARRAY
9091: ST_TO_ADDR
9092: GO 9148
// chassis = [ [ us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
9094: LD_ADDR_VAR 0 33
9098: PUSH
9099: LD_INT 3
9101: PUSH
9102: LD_INT 4
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: PUSH
9109: LD_INT 13
9111: PUSH
9112: LD_INT 14
9114: PUSH
9115: EMPTY
9116: LIST
9117: LIST
9118: PUSH
9119: LD_INT 21
9121: PUSH
9122: LD_INT 23
9124: PUSH
9125: LD_INT 24
9127: PUSH
9128: LD_INT 22
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: LIST
9141: PUSH
9142: LD_VAR 0 2
9146: ARRAY
9147: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_remote , tmp ) ;
9148: LD_VAR 0 40
9152: PUSH
9153: LD_INT 1
9155: ARRAY
9156: PPUSH
9157: LD_VAR 0 33
9161: PUSH
9162: LD_INT 1
9164: PPUSH
9165: LD_VAR 0 33
9169: PPUSH
9170: CALL_OW 12
9174: ARRAY
9175: PPUSH
9176: LD_INT 1
9178: PPUSH
9179: LD_INT 2
9181: PPUSH
9182: LD_VAR 0 16
9186: PPUSH
9187: CALL_OW 185
// end ;
9191: GO 9002
9193: POP
9194: POP
// end else
9195: GO 9210
// ComCancel ( factory [ 1 ] ) ;
9197: LD_VAR 0 40
9201: PUSH
9202: LD_INT 1
9204: ARRAY
9205: PPUSH
9206: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ] ] ) do
9210: LD_ADDR_VAR 0 24
9214: PUSH
9215: LD_VAR 0 4
9219: PPUSH
9220: LD_INT 22
9222: PUSH
9223: LD_VAR 0 1
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PUSH
9232: LD_INT 21
9234: PUSH
9235: LD_INT 2
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 50
9244: PUSH
9245: EMPTY
9246: LIST
9247: PUSH
9248: LD_INT 3
9250: PUSH
9251: LD_INT 2
9253: PUSH
9254: LD_INT 34
9256: PUSH
9257: LD_INT 12
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: PUSH
9264: LD_INT 34
9266: PUSH
9267: LD_INT 51
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PUSH
9274: LD_INT 34
9276: PUSH
9277: LD_INT 32
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 34
9286: PUSH
9287: LD_INT 31
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: PUSH
9301: EMPTY
9302: LIST
9303: LIST
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: PPUSH
9311: CALL_OW 70
9315: PUSH
9316: FOR_IN
9317: IFFALSE 9472
// begin vehicleInList = false ;
9319: LD_ADDR_VAR 0 26
9323: PUSH
9324: LD_INT 0
9326: ST_TO_ADDR
// for i := 1 to vehicles do
9327: LD_ADDR_VAR 0 14
9331: PUSH
9332: DOUBLE
9333: LD_INT 1
9335: DEC
9336: ST_TO_ADDR
9337: LD_VAR 0 25
9341: PUSH
9342: FOR_TO
9343: IFFALSE 9373
// if vehicle in vehicles [ i ] then
9345: LD_VAR 0 24
9349: PUSH
9350: LD_VAR 0 25
9354: PUSH
9355: LD_VAR 0 14
9359: ARRAY
9360: IN
9361: IFFALSE 9371
// vehicleInList = true ;
9363: LD_ADDR_VAR 0 26
9367: PUSH
9368: LD_INT 1
9370: ST_TO_ADDR
9371: GO 9342
9373: POP
9374: POP
// if not vehicleInList then
9375: LD_VAR 0 26
9379: NOT
9380: IFFALSE 9470
// begin if vehicles < vehiclesToAttackAmount then
9382: LD_VAR 0 25
9386: PUSH
9387: LD_VAR 0 10
9391: LESS
9392: IFFALSE 9433
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] ] ] else
9394: LD_ADDR_VAR 0 25
9398: PUSH
9399: LD_VAR 0 25
9403: PUSH
9404: LD_VAR 0 24
9408: PUSH
9409: LD_VAR 0 24
9413: PPUSH
9414: CALL_OW 313
9418: PUSH
9419: LD_INT 1
9421: ARRAY
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: PUSH
9427: EMPTY
9428: LIST
9429: ADD
9430: ST_TO_ADDR
9431: GO 9470
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] ] ] ;
9433: LD_ADDR_VAR 0 25
9437: PUSH
9438: LD_VAR 0 25
9442: PUSH
9443: LD_VAR 0 24
9447: PUSH
9448: LD_VAR 0 24
9452: PPUSH
9453: CALL_OW 313
9457: PUSH
9458: LD_INT 1
9460: ARRAY
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: PUSH
9466: EMPTY
9467: LIST
9468: ADD
9469: ST_TO_ADDR
// end ; end ;
9470: GO 9316
9472: POP
9473: POP
// for enemyUnits in FilterAllUnits ( [ f_enemy , side ] ) do
9474: LD_ADDR_VAR 0 50
9478: PUSH
9479: LD_INT 81
9481: PUSH
9482: LD_VAR 0 1
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: PPUSH
9491: CALL_OW 69
9495: PUSH
9496: FOR_IN
9497: IFFALSE 10015
// begin offensiveUnits = [ ] ;
9499: LD_ADDR_VAR 0 27
9503: PUSH
9504: EMPTY
9505: ST_TO_ADDR
// offensiveReadyCounter = 0 ;
9506: LD_ADDR_VAR 0 28
9510: PUSH
9511: LD_INT 0
9513: ST_TO_ADDR
// for i := 1 to vehicles do
9514: LD_ADDR_VAR 0 14
9518: PUSH
9519: DOUBLE
9520: LD_INT 1
9522: DEC
9523: ST_TO_ADDR
9524: LD_VAR 0 25
9528: PUSH
9529: FOR_TO
9530: IFFALSE 9738
// if GetTag ( vehicles [ i ] [ 1 ] ) = 2 then
9532: LD_VAR 0 25
9536: PUSH
9537: LD_VAR 0 14
9541: ARRAY
9542: PUSH
9543: LD_INT 1
9545: ARRAY
9546: PPUSH
9547: CALL_OW 110
9551: PUSH
9552: LD_INT 2
9554: EQUAL
9555: IFFALSE 9736
// begin if GetLives ( vehicles [ i ] [ 1 ] ) > 650 then
9557: LD_VAR 0 25
9561: PUSH
9562: LD_VAR 0 14
9566: ARRAY
9567: PUSH
9568: LD_INT 1
9570: ARRAY
9571: PPUSH
9572: CALL_OW 256
9576: PUSH
9577: LD_INT 650
9579: GREATER
9580: IFFALSE 9596
// offensiveReadyCounter = offensiveReadyCounter + 1 ;
9582: LD_ADDR_VAR 0 28
9586: PUSH
9587: LD_VAR 0 28
9591: PUSH
9592: LD_INT 1
9594: PLUS
9595: ST_TO_ADDR
// if IsInArea ( vehicles [ i ] [ 1 ] , baseArea ) then
9596: LD_VAR 0 25
9600: PUSH
9601: LD_VAR 0 14
9605: ARRAY
9606: PUSH
9607: LD_INT 1
9609: ARRAY
9610: PPUSH
9611: LD_VAR 0 4
9615: PPUSH
9616: CALL_OW 308
9620: IFFALSE 9648
// offensiveUnits = offensiveUnits ^ vehicles [ i ] [ 1 ] ;
9622: LD_ADDR_VAR 0 27
9626: PUSH
9627: LD_VAR 0 27
9631: PUSH
9632: LD_VAR 0 25
9636: PUSH
9637: LD_VAR 0 14
9641: ARRAY
9642: PUSH
9643: LD_INT 1
9645: ARRAY
9646: ADD
9647: ST_TO_ADDR
// for j = 1 to personel do
9648: LD_ADDR_VAR 0 15
9652: PUSH
9653: DOUBLE
9654: LD_INT 1
9656: DEC
9657: ST_TO_ADDR
9658: LD_VAR 0 19
9662: PUSH
9663: FOR_TO
9664: IFFALSE 9734
// if personel [ j ] = vehicles [ i ] [ 2 ] then
9666: LD_VAR 0 19
9670: PUSH
9671: LD_VAR 0 15
9675: ARRAY
9676: PUSH
9677: LD_VAR 0 25
9681: PUSH
9682: LD_VAR 0 14
9686: ARRAY
9687: PUSH
9688: LD_INT 2
9690: ARRAY
9691: EQUAL
9692: IFFALSE 9732
// personel = ReplaceIn ( personel , [ j , personel [ j ] ] , 3 ) ;
9694: LD_ADDR_VAR 0 19
9698: PUSH
9699: LD_VAR 0 19
9703: PPUSH
9704: LD_VAR 0 15
9708: PUSH
9709: LD_VAR 0 19
9713: PUSH
9714: LD_VAR 0 15
9718: ARRAY
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PPUSH
9724: LD_INT 3
9726: PPUSH
9727: CALL 45394 0 3
9731: ST_TO_ADDR
9732: GO 9663
9734: POP
9735: POP
// end ;
9736: GO 9529
9738: POP
9739: POP
// if vehiclesToAttackAmount <= offensiveReadyCounter then
9740: LD_VAR 0 10
9744: PUSH
9745: LD_VAR 0 28
9749: LESSEQUAL
9750: IFFALSE 10013
// begin for i := 1 to offensiveUnits do
9752: LD_ADDR_VAR 0 14
9756: PUSH
9757: DOUBLE
9758: LD_INT 1
9760: DEC
9761: ST_TO_ADDR
9762: LD_VAR 0 27
9766: PUSH
9767: FOR_TO
9768: IFFALSE 10011
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , offensiveUnits [ i ] ) ;
9770: LD_ADDR_VAR 0 29
9774: PUSH
9775: LD_INT 81
9777: PUSH
9778: LD_INT 1
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PPUSH
9785: CALL_OW 69
9789: PPUSH
9790: LD_VAR 0 27
9794: PUSH
9795: LD_VAR 0 14
9799: ARRAY
9800: PPUSH
9801: CALL_OW 74
9805: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , offensiveUnits [ i ] ) ;
9806: LD_ADDR_VAR 0 30
9810: PUSH
9811: LD_INT 81
9813: PUSH
9814: LD_INT 1
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: LD_INT 2
9823: PUSH
9824: LD_INT 59
9826: PUSH
9827: EMPTY
9828: LIST
9829: PUSH
9830: LD_INT 21
9832: PUSH
9833: LD_INT 1
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PUSH
9840: LD_INT 21
9842: PUSH
9843: LD_INT 2
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: PUSH
9860: EMPTY
9861: LIST
9862: PPUSH
9863: CALL_OW 69
9867: PPUSH
9868: LD_VAR 0 27
9872: PUSH
9873: LD_VAR 0 14
9877: ARRAY
9878: PPUSH
9879: CALL_OW 74
9883: ST_TO_ADDR
// if GetDistUnits ( offensiveUnits [ i ] , target1 ) + 9 < GetDistUnits ( offensiveUnits [ i ] , target2 ) then
9884: LD_VAR 0 27
9888: PUSH
9889: LD_VAR 0 14
9893: ARRAY
9894: PPUSH
9895: LD_VAR 0 29
9899: PPUSH
9900: CALL_OW 296
9904: PUSH
9905: LD_INT 9
9907: PLUS
9908: PUSH
9909: LD_VAR 0 27
9913: PUSH
9914: LD_VAR 0 14
9918: ARRAY
9919: PPUSH
9920: LD_VAR 0 30
9924: PPUSH
9925: CALL_OW 296
9929: LESS
9930: IFFALSE 9954
// ComAttackUnit ( offensiveUnits [ i ] , target1 ) else
9932: LD_VAR 0 27
9936: PUSH
9937: LD_VAR 0 14
9941: ARRAY
9942: PPUSH
9943: LD_VAR 0 29
9947: PPUSH
9948: CALL_OW 115
9952: GO 9974
// ComAttackUnit ( offensiveUnits [ i ] , target2 ) ;
9954: LD_VAR 0 27
9958: PUSH
9959: LD_VAR 0 14
9963: ARRAY
9964: PPUSH
9965: LD_VAR 0 30
9969: PPUSH
9970: CALL_OW 115
// AddComAgressiveMove ( offensiveUnits [ i ] , GetX ( enemyUnits ) , GetY ( enemyUnits ) ) ;
9974: LD_VAR 0 27
9978: PUSH
9979: LD_VAR 0 14
9983: ARRAY
9984: PPUSH
9985: LD_VAR 0 50
9989: PPUSH
9990: CALL_OW 250
9994: PPUSH
9995: LD_VAR 0 50
9999: PPUSH
10000: CALL_OW 251
10004: PPUSH
10005: CALL_OW 174
// end ;
10009: GO 9767
10011: POP
10012: POP
// end ; end ;
10013: GO 9496
10015: POP
10016: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
10017: LD_ADDR_VAR 0 50
10021: PUSH
10022: LD_VAR 0 7
10026: PPUSH
10027: LD_INT 81
10029: PUSH
10030: LD_VAR 0 1
10034: PUSH
10035: EMPTY
10036: LIST
10037: LIST
10038: PPUSH
10039: CALL_OW 70
10043: PUSH
10044: FOR_IN
10045: IFFALSE 10273
// begin defenceUnits = [ ] ;
10047: LD_ADDR_VAR 0 31
10051: PUSH
10052: EMPTY
10053: ST_TO_ADDR
// for i := 1 to personel do
10054: LD_ADDR_VAR 0 14
10058: PUSH
10059: DOUBLE
10060: LD_INT 1
10062: DEC
10063: ST_TO_ADDR
10064: LD_VAR 0 19
10068: PUSH
10069: FOR_TO
10070: IFFALSE 10117
// if GetTag ( personel [ i ] ) = 3 then
10072: LD_VAR 0 19
10076: PUSH
10077: LD_VAR 0 14
10081: ARRAY
10082: PPUSH
10083: CALL_OW 110
10087: PUSH
10088: LD_INT 3
10090: EQUAL
10091: IFFALSE 10115
// defenceUnits = defenceUnits ^ personel [ i ] ;
10093: LD_ADDR_VAR 0 31
10097: PUSH
10098: LD_VAR 0 31
10102: PUSH
10103: LD_VAR 0 19
10107: PUSH
10108: LD_VAR 0 14
10112: ARRAY
10113: ADD
10114: ST_TO_ADDR
10115: GO 10069
10117: POP
10118: POP
// for i := 1 to vehicles do
10119: LD_ADDR_VAR 0 14
10123: PUSH
10124: DOUBLE
10125: LD_INT 1
10127: DEC
10128: ST_TO_ADDR
10129: LD_VAR 0 25
10133: PUSH
10134: FOR_TO
10135: IFFALSE 10190
// if GetTag ( vehicles [ i ] [ 1 ] ) = 3 then
10137: LD_VAR 0 25
10141: PUSH
10142: LD_VAR 0 14
10146: ARRAY
10147: PUSH
10148: LD_INT 1
10150: ARRAY
10151: PPUSH
10152: CALL_OW 110
10156: PUSH
10157: LD_INT 3
10159: EQUAL
10160: IFFALSE 10188
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
10162: LD_ADDR_VAR 0 31
10166: PUSH
10167: LD_VAR 0 31
10171: PUSH
10172: LD_VAR 0 25
10176: PUSH
10177: LD_VAR 0 14
10181: ARRAY
10182: PUSH
10183: LD_INT 1
10185: ARRAY
10186: ADD
10187: ST_TO_ADDR
10188: GO 10134
10190: POP
10191: POP
// ComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
10192: LD_VAR 0 31
10196: PPUSH
10197: LD_INT 3
10199: PUSH
10200: LD_INT 60
10202: PUSH
10203: EMPTY
10204: LIST
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PPUSH
10210: CALL_OW 72
10214: PPUSH
10215: LD_VAR 0 50
10219: PPUSH
10220: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , GetX ( enemyUnits ) , GetY ( enemyUnits ) ) ;
10224: LD_VAR 0 31
10228: PPUSH
10229: LD_INT 3
10231: PUSH
10232: LD_INT 60
10234: PUSH
10235: EMPTY
10236: LIST
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: PPUSH
10242: CALL_OW 72
10246: PPUSH
10247: LD_VAR 0 50
10251: PPUSH
10252: CALL_OW 250
10256: PPUSH
10257: LD_VAR 0 50
10261: PPUSH
10262: CALL_OW 251
10266: PPUSH
10267: CALL_OW 174
// end ;
10271: GO 10044
10273: POP
10274: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
10275: LD_ADDR_VAR 0 45
10279: PUSH
10280: LD_INT 22
10282: PUSH
10283: LD_VAR 0 1
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PUSH
10292: LD_INT 2
10294: PUSH
10295: LD_INT 30
10297: PUSH
10298: LD_INT 31
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PUSH
10305: LD_INT 30
10307: PUSH
10308: LD_INT 32
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: PUSH
10315: LD_INT 30
10317: PUSH
10318: LD_INT 33
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: PUSH
10325: LD_INT 30
10327: PUSH
10328: LD_INT 4
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: LD_INT 30
10337: PUSH
10338: LD_INT 5
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PPUSH
10357: CALL_OW 69
10361: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
10362: LD_ADDR_VAR 0 46
10366: PUSH
10367: LD_INT 81
10369: PUSH
10370: LD_VAR 0 1
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PUSH
10379: LD_INT 21
10381: PUSH
10382: LD_INT 3
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PUSH
10389: LD_INT 58
10391: PUSH
10392: EMPTY
10393: LIST
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: LIST
10399: PPUSH
10400: CALL_OW 69
10404: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
10405: LD_VAR 0 45
10409: PUSH
10410: LD_VAR 0 46
10414: AND
10415: IFFALSE 10485
// for i in attackBuildings do
10417: LD_ADDR_VAR 0 14
10421: PUSH
10422: LD_VAR 0 45
10426: PUSH
10427: FOR_IN
10428: IFFALSE 10483
// for j in enemyBuildings do
10430: LD_ADDR_VAR 0 15
10434: PUSH
10435: LD_VAR 0 46
10439: PUSH
10440: FOR_IN
10441: IFFALSE 10479
// if GetDistUnits ( i , j ) < 12 then
10443: LD_VAR 0 14
10447: PPUSH
10448: LD_VAR 0 15
10452: PPUSH
10453: CALL_OW 296
10457: PUSH
10458: LD_INT 12
10460: LESS
10461: IFFALSE 10477
// ComAttackUnit ( i , j ) ;
10463: LD_VAR 0 14
10467: PPUSH
10468: LD_VAR 0 15
10472: PPUSH
10473: CALL_OW 115
10477: GO 10440
10479: POP
10480: POP
10481: GO 10427
10483: POP
10484: POP
// if canRebuild then
10485: LD_VAR 0 12
10489: IFFALSE 11158
// begin tmp = false ;
10491: LD_ADDR_VAR 0 16
10495: PUSH
10496: LD_INT 0
10498: ST_TO_ADDR
// unit = false ;
10499: LD_ADDR_VAR 0 18
10503: PUSH
10504: LD_INT 0
10506: ST_TO_ADDR
// for destroyedBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 250 ] ] ] ) do
10507: LD_ADDR_VAR 0 36
10511: PUSH
10512: LD_VAR 0 4
10516: PPUSH
10517: LD_INT 22
10519: PUSH
10520: LD_VAR 0 1
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: PUSH
10529: LD_INT 21
10531: PUSH
10532: LD_INT 3
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: LD_INT 3
10541: PUSH
10542: LD_INT 24
10544: PUSH
10545: LD_INT 250
10547: PUSH
10548: EMPTY
10549: LIST
10550: LIST
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: LIST
10560: PPUSH
10561: CALL_OW 70
10565: PUSH
10566: FOR_IN
10567: IFFALSE 10669
// begin unit = destroyedBuilding ;
10569: LD_ADDR_VAR 0 18
10573: PUSH
10574: LD_VAR 0 36
10578: ST_TO_ADDR
// for i := 1 to destroyedBuildings / 4 do
10579: LD_ADDR_VAR 0 14
10583: PUSH
10584: DOUBLE
10585: LD_INT 1
10587: DEC
10588: ST_TO_ADDR
10589: LD_VAR 0 35
10593: PUSH
10594: LD_INT 4
10596: DIVREAL
10597: PUSH
10598: FOR_TO
10599: IFFALSE 10665
// if destroyedBuildings [ i + 1 ] = GetX ( destroyedBuilding ) and destroyedBuildings [ i + 2 ] = GetY ( destroyedBuilding ) then
10601: LD_VAR 0 35
10605: PUSH
10606: LD_VAR 0 14
10610: PUSH
10611: LD_INT 1
10613: PLUS
10614: ARRAY
10615: PUSH
10616: LD_VAR 0 36
10620: PPUSH
10621: CALL_OW 250
10625: EQUAL
10626: PUSH
10627: LD_VAR 0 35
10631: PUSH
10632: LD_VAR 0 14
10636: PUSH
10637: LD_INT 2
10639: PLUS
10640: ARRAY
10641: PUSH
10642: LD_VAR 0 36
10646: PPUSH
10647: CALL_OW 251
10651: EQUAL
10652: AND
10653: IFFALSE 10663
// tmp = true ;
10655: LD_ADDR_VAR 0 16
10659: PUSH
10660: LD_INT 1
10662: ST_TO_ADDR
10663: GO 10598
10665: POP
10666: POP
// end ;
10667: GO 10566
10669: POP
10670: POP
// if not tmp and unit then
10671: LD_VAR 0 16
10675: NOT
10676: PUSH
10677: LD_VAR 0 18
10681: AND
10682: IFFALSE 10942
// begin if GetBType ( unit ) = 1 then
10684: LD_VAR 0 18
10688: PPUSH
10689: CALL_OW 266
10693: PUSH
10694: LD_INT 1
10696: EQUAL
10697: IFFALSE 10751
// destroyedBuildings = destroyedBuildings ^ [ 0 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
10699: LD_ADDR_VAR 0 35
10703: PUSH
10704: LD_VAR 0 35
10708: PUSH
10709: LD_INT 0
10711: PUSH
10712: LD_VAR 0 18
10716: PPUSH
10717: CALL_OW 250
10721: PUSH
10722: LD_VAR 0 18
10726: PPUSH
10727: CALL_OW 251
10731: PUSH
10732: LD_VAR 0 18
10736: PPUSH
10737: CALL_OW 254
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: ADD
10748: ST_TO_ADDR
10749: GO 10942
// if GetBType ( unit ) = 3 then
10751: LD_VAR 0 18
10755: PPUSH
10756: CALL_OW 266
10760: PUSH
10761: LD_INT 3
10763: EQUAL
10764: IFFALSE 10818
// destroyedBuildings = destroyedBuildings ^ [ 2 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
10766: LD_ADDR_VAR 0 35
10770: PUSH
10771: LD_VAR 0 35
10775: PUSH
10776: LD_INT 2
10778: PUSH
10779: LD_VAR 0 18
10783: PPUSH
10784: CALL_OW 250
10788: PUSH
10789: LD_VAR 0 18
10793: PPUSH
10794: CALL_OW 251
10798: PUSH
10799: LD_VAR 0 18
10803: PPUSH
10804: CALL_OW 254
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: ADD
10815: ST_TO_ADDR
10816: GO 10942
// if GetBType ( unit ) = 5 then
10818: LD_VAR 0 18
10822: PPUSH
10823: CALL_OW 266
10827: PUSH
10828: LD_INT 5
10830: EQUAL
10831: IFFALSE 10885
// destroyedBuildings = destroyedBuildings ^ [ 4 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
10833: LD_ADDR_VAR 0 35
10837: PUSH
10838: LD_VAR 0 35
10842: PUSH
10843: LD_INT 4
10845: PUSH
10846: LD_VAR 0 18
10850: PPUSH
10851: CALL_OW 250
10855: PUSH
10856: LD_VAR 0 18
10860: PPUSH
10861: CALL_OW 251
10865: PUSH
10866: LD_VAR 0 18
10870: PPUSH
10871: CALL_OW 254
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: ADD
10882: ST_TO_ADDR
10883: GO 10942
// destroyedBuildings = destroyedBuildings ^ [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ;
10885: LD_ADDR_VAR 0 35
10889: PUSH
10890: LD_VAR 0 35
10894: PUSH
10895: LD_VAR 0 18
10899: PPUSH
10900: CALL_OW 266
10904: PUSH
10905: LD_VAR 0 18
10909: PPUSH
10910: CALL_OW 250
10914: PUSH
10915: LD_VAR 0 18
10919: PPUSH
10920: CALL_OW 251
10924: PUSH
10925: LD_VAR 0 18
10929: PPUSH
10930: CALL_OW 254
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: ADD
10941: ST_TO_ADDR
// end ; for constructedBuilding in constructedBuildings do
10942: LD_ADDR_VAR 0 37
10946: PUSH
10947: LD_VAR 0 38
10951: PUSH
10952: FOR_IN
10953: IFFALSE 11156
// for i := 1 to destroyedBuildings / 4 do
10955: LD_ADDR_VAR 0 14
10959: PUSH
10960: DOUBLE
10961: LD_INT 1
10963: DEC
10964: ST_TO_ADDR
10965: LD_VAR 0 35
10969: PUSH
10970: LD_INT 4
10972: DIVREAL
10973: PUSH
10974: FOR_TO
10975: IFFALSE 11152
// if destroyedBuildings [ i + 1 ] = GetX ( constructedBuilding ) and destroyedBuildings [ i + 2 ] = GetY ( constructedBuilding ) and IsOK ( constructedBuilding ) then
10977: LD_VAR 0 35
10981: PUSH
10982: LD_VAR 0 14
10986: PUSH
10987: LD_INT 1
10989: PLUS
10990: ARRAY
10991: PUSH
10992: LD_VAR 0 37
10996: PPUSH
10997: CALL_OW 250
11001: EQUAL
11002: PUSH
11003: LD_VAR 0 35
11007: PUSH
11008: LD_VAR 0 14
11012: PUSH
11013: LD_INT 2
11015: PLUS
11016: ARRAY
11017: PUSH
11018: LD_VAR 0 37
11022: PPUSH
11023: CALL_OW 251
11027: EQUAL
11028: AND
11029: PUSH
11030: LD_VAR 0 37
11034: PPUSH
11035: CALL_OW 302
11039: AND
11040: IFFALSE 11150
// begin destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11042: LD_ADDR_VAR 0 35
11046: PUSH
11047: LD_VAR 0 35
11051: PPUSH
11052: LD_INT 1
11054: PPUSH
11055: CALL_OW 3
11059: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11060: LD_ADDR_VAR 0 35
11064: PUSH
11065: LD_VAR 0 35
11069: PPUSH
11070: LD_INT 1
11072: PPUSH
11073: CALL_OW 3
11077: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11078: LD_ADDR_VAR 0 35
11082: PUSH
11083: LD_VAR 0 35
11087: PPUSH
11088: LD_INT 1
11090: PPUSH
11091: CALL_OW 3
11095: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11096: LD_ADDR_VAR 0 35
11100: PUSH
11101: LD_VAR 0 35
11105: PPUSH
11106: LD_INT 1
11108: PPUSH
11109: CALL_OW 3
11113: ST_TO_ADDR
// if GetType ( constructedBuilding ) in [ b_bunker , b_turret ] then
11114: LD_VAR 0 37
11118: PPUSH
11119: CALL_OW 247
11123: PUSH
11124: LD_INT 32
11126: PUSH
11127: LD_INT 33
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: IN
11134: IFFALSE 11150
// AddComPlaceWeapon ( constructedBuilding , weapons ) ;
11136: LD_VAR 0 37
11140: PPUSH
11141: LD_VAR 0 32
11145: PPUSH
11146: CALL_OW 208
// end ;
11150: GO 10974
11152: POP
11153: POP
11154: GO 10952
11156: POP
11157: POP
// end ; wait ( 0 0$01 ) ;
11158: LD_INT 35
11160: PPUSH
11161: CALL_OW 67
// until not personel ;
11165: LD_VAR 0 19
11169: NOT
11170: IFFALSE 4863
// end ; end_of_file
11172: LD_VAR 0 13
11176: RET
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
11177: LD_INT 0
11179: PPUSH
11180: PPUSH
// if debugMode then
11181: LD_EXP 33
11185: IFFALSE 11202
// unit := NewCharacter ( ident ) ;
11187: LD_ADDR_VAR 0 5
11191: PUSH
11192: LD_VAR 0 1
11196: PPUSH
11197: CALL_OW 25
11201: ST_TO_ADDR
// if exist_mode and not debugMode then
11202: LD_VAR 0 2
11206: PUSH
11207: LD_EXP 33
11211: NOT
11212: AND
11213: IFFALSE 11238
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
11215: LD_ADDR_VAR 0 5
11219: PUSH
11220: LD_EXP 32
11224: PUSH
11225: LD_VAR 0 1
11229: STR
11230: PPUSH
11231: CALL_OW 34
11235: ST_TO_ADDR
11236: GO 11260
// if not debugMode then
11238: LD_EXP 33
11242: NOT
11243: IFFALSE 11260
// unit := NewCharacter ( ident ) ;
11245: LD_ADDR_VAR 0 5
11249: PUSH
11250: LD_VAR 0 1
11254: PPUSH
11255: CALL_OW 25
11259: ST_TO_ADDR
// if class then
11260: LD_VAR 0 3
11264: IFFALSE 11280
// SetClass ( unit , class ) ;
11266: LD_VAR 0 5
11270: PPUSH
11271: LD_VAR 0 3
11275: PPUSH
11276: CALL_OW 336
// result := unit ;
11280: LD_ADDR_VAR 0 4
11284: PUSH
11285: LD_VAR 0 5
11289: ST_TO_ADDR
// end ;
11290: LD_VAR 0 4
11294: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
11295: LD_INT 0
11297: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
11298: LD_VAR 0 1
11302: PPUSH
11303: CALL_OW 255
11307: PUSH
11308: LD_VAR 0 3
11312: EQUAL
11313: PUSH
11314: LD_VAR 0 1
11318: PPUSH
11319: CALL_OW 302
11323: AND
11324: IFFALSE 11346
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
11326: LD_VAR 0 1
11330: PPUSH
11331: LD_EXP 31
11335: PUSH
11336: LD_VAR 0 2
11340: STR
11341: PPUSH
11342: CALL_OW 38
// end ;
11346: LD_VAR 0 4
11350: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
11351: LD_INT 0
11353: PPUSH
11354: PPUSH
11355: PPUSH
// resultCharactersToSave = [ ] ;
11356: LD_ADDR_VAR 0 6
11360: PUSH
11361: EMPTY
11362: ST_TO_ADDR
// for unit in characters do
11363: LD_ADDR_VAR 0 5
11367: PUSH
11368: LD_VAR 0 1
11372: PUSH
11373: FOR_IN
11374: IFFALSE 11422
// if GetSide ( unit ) = side and IsOK ( unit ) then
11376: LD_VAR 0 5
11380: PPUSH
11381: CALL_OW 255
11385: PUSH
11386: LD_VAR 0 3
11390: EQUAL
11391: PUSH
11392: LD_VAR 0 5
11396: PPUSH
11397: CALL_OW 302
11401: AND
11402: IFFALSE 11420
// resultCharactersToSave = resultCharactersToSave ^ unit ;
11404: LD_ADDR_VAR 0 6
11408: PUSH
11409: LD_VAR 0 6
11413: PUSH
11414: LD_VAR 0 5
11418: ADD
11419: ST_TO_ADDR
11420: GO 11373
11422: POP
11423: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
11424: LD_VAR 0 6
11428: PPUSH
11429: LD_EXP 31
11433: PUSH
11434: LD_VAR 0 2
11438: STR
11439: PPUSH
11440: CALL_OW 38
// end ;
11444: LD_VAR 0 4
11448: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
11449: LD_INT 0
11451: PPUSH
11452: PPUSH
// for unit in units do
11453: LD_ADDR_VAR 0 5
11457: PUSH
11458: LD_VAR 0 1
11462: PUSH
11463: FOR_IN
11464: IFFALSE 11487
// PlaceUnitArea ( unit , area , spawnMode ) ;
11466: LD_VAR 0 5
11470: PPUSH
11471: LD_VAR 0 2
11475: PPUSH
11476: LD_VAR 0 3
11480: PPUSH
11481: CALL_OW 49
11485: GO 11463
11487: POP
11488: POP
// end ;
11489: LD_VAR 0 4
11493: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
11494: LD_INT 0
11496: PPUSH
11497: PPUSH
11498: PPUSH
11499: PPUSH
// units = characters ;
11500: LD_ADDR_VAR 0 9
11504: PUSH
11505: LD_VAR 0 1
11509: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod , Kirilenkova ] ;
11510: LD_ADDR_VAR 0 9
11514: PUSH
11515: LD_VAR 0 9
11519: PUSH
11520: LD_EXP 39
11524: PUSH
11525: LD_EXP 40
11529: PUSH
11530: LD_EXP 41
11534: PUSH
11535: LD_EXP 42
11539: PUSH
11540: LD_EXP 43
11544: PUSH
11545: LD_EXP 44
11549: PUSH
11550: LD_EXP 45
11554: PUSH
11555: LD_EXP 46
11559: PUSH
11560: LD_EXP 49
11564: PUSH
11565: LD_EXP 48
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: DIFF
11582: ST_TO_ADDR
// if not units and not canTalkHero then
11583: LD_VAR 0 9
11587: NOT
11588: PUSH
11589: LD_VAR 0 5
11593: NOT
11594: AND
11595: IFFALSE 11599
// exit ;
11597: GO 11772
// if not units then
11599: LD_VAR 0 9
11603: NOT
11604: IFFALSE 11625
// units = characters diff [ Burlak ] ;
11606: LD_ADDR_VAR 0 9
11610: PUSH
11611: LD_VAR 0 1
11615: PUSH
11616: LD_EXP 39
11620: PUSH
11621: EMPTY
11622: LIST
11623: DIFF
11624: ST_TO_ADDR
// if not units and canTalkHero then
11625: LD_VAR 0 9
11629: NOT
11630: PUSH
11631: LD_VAR 0 5
11635: AND
11636: IFFALSE 11640
// exit ;
11638: GO 11772
// speaker := units [ rand ( 1 , units ) ] ;
11640: LD_ADDR_VAR 0 8
11644: PUSH
11645: LD_VAR 0 9
11649: PUSH
11650: LD_INT 1
11652: PPUSH
11653: LD_VAR 0 9
11657: PPUSH
11658: CALL_OW 12
11662: ARRAY
11663: ST_TO_ADDR
// if radio then
11664: LD_VAR 0 4
11668: IFFALSE 11717
// begin if GetSex ( speaker ) = sex_male then
11670: LD_VAR 0 8
11674: PPUSH
11675: CALL_OW 258
11679: PUSH
11680: LD_INT 1
11682: EQUAL
11683: IFFALSE 11701
// SayRadio ( speaker , dialogMID ) else
11685: LD_VAR 0 8
11689: PPUSH
11690: LD_VAR 0 2
11694: PPUSH
11695: CALL_OW 94
11699: GO 11715
// SayRadio ( speaker , dialogFID ) ;
11701: LD_VAR 0 8
11705: PPUSH
11706: LD_VAR 0 3
11710: PPUSH
11711: CALL_OW 94
// end else
11715: GO 11762
// begin if GetSex ( speaker ) = sex_male then
11717: LD_VAR 0 8
11721: PPUSH
11722: CALL_OW 258
11726: PUSH
11727: LD_INT 1
11729: EQUAL
11730: IFFALSE 11748
// Say ( speaker , dialogMID ) else
11732: LD_VAR 0 8
11736: PPUSH
11737: LD_VAR 0 2
11741: PPUSH
11742: CALL_OW 88
11746: GO 11762
// Say ( speaker , dialogFID ) ;
11748: LD_VAR 0 8
11752: PPUSH
11753: LD_VAR 0 3
11757: PPUSH
11758: CALL_OW 88
// end ; result := speaker ;
11762: LD_ADDR_VAR 0 6
11766: PUSH
11767: LD_VAR 0 8
11771: ST_TO_ADDR
// end ;
11772: LD_VAR 0 6
11776: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
11777: LD_INT 0
11779: PPUSH
11780: PPUSH
// dir := GetDir ( bunker ) - 3 ;
11781: LD_ADDR_VAR 0 4
11785: PUSH
11786: LD_VAR 0 2
11790: PPUSH
11791: CALL_OW 254
11795: PUSH
11796: LD_INT 3
11798: MINUS
11799: ST_TO_ADDR
// if dir < 0 then
11800: LD_VAR 0 4
11804: PUSH
11805: LD_INT 0
11807: LESS
11808: IFFALSE 11824
// dir := 6 + dir ;
11810: LD_ADDR_VAR 0 4
11814: PUSH
11815: LD_INT 6
11817: PUSH
11818: LD_VAR 0 4
11822: PLUS
11823: ST_TO_ADDR
// SetDir ( un , dir ) ;
11824: LD_VAR 0 1
11828: PPUSH
11829: LD_VAR 0 4
11833: PPUSH
11834: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
11838: LD_VAR 0 1
11842: PPUSH
11843: LD_VAR 0 2
11847: PPUSH
11848: CALL_OW 52
// result = un ;
11852: LD_ADDR_VAR 0 3
11856: PUSH
11857: LD_VAR 0 1
11861: ST_TO_ADDR
// end ;
11862: LD_VAR 0 3
11866: RET
// export function AddComCaptureBuilding ( engs , building ) ; var eng ; begin
11867: LD_INT 0
11869: PPUSH
11870: PPUSH
// for eng in engs do
11871: LD_ADDR_VAR 0 4
11875: PUSH
11876: LD_VAR 0 1
11880: PUSH
11881: FOR_IN
11882: IFFALSE 11999
// if GetClass ( eng ) = class_engineer and IsOK ( eng ) and building and not GetSide ( building ) = GetSide ( eng ) then
11884: LD_VAR 0 4
11888: PPUSH
11889: CALL_OW 257
11893: PUSH
11894: LD_INT 2
11896: EQUAL
11897: PUSH
11898: LD_VAR 0 4
11902: PPUSH
11903: CALL_OW 302
11907: AND
11908: PUSH
11909: LD_VAR 0 2
11913: AND
11914: PUSH
11915: LD_VAR 0 2
11919: PPUSH
11920: CALL_OW 255
11924: PUSH
11925: LD_VAR 0 4
11929: PPUSH
11930: CALL_OW 255
11934: EQUAL
11935: NOT
11936: AND
11937: IFFALSE 11997
// AddTaskList ( eng , [ [ e , GetX ( building ) , GetY ( building ) , building , 0 , 0 , 0 ] ] ) end ;
11939: LD_VAR 0 4
11943: PPUSH
11944: LD_STRING e
11946: PUSH
11947: LD_VAR 0 2
11951: PPUSH
11952: CALL_OW 250
11956: PUSH
11957: LD_VAR 0 2
11961: PPUSH
11962: CALL_OW 251
11966: PUSH
11967: LD_VAR 0 2
11971: PUSH
11972: LD_INT 0
11974: PUSH
11975: LD_INT 0
11977: PUSH
11978: LD_INT 0
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: PUSH
11990: EMPTY
11991: LIST
11992: PPUSH
11993: CALL_OW 447
11997: GO 11881
11999: POP
12000: POP
12001: LD_VAR 0 3
12005: RET
// export function Delete2D ( tab , firstIndex , secondIndex ) ; var i , list , tabPom ; begin
12006: LD_INT 0
12008: PPUSH
12009: PPUSH
12010: PPUSH
12011: PPUSH
// tabPom := Delete ( tab [ firstIndex ] , secondIndex ) ;
12012: LD_ADDR_VAR 0 7
12016: PUSH
12017: LD_VAR 0 1
12021: PUSH
12022: LD_VAR 0 2
12026: ARRAY
12027: PPUSH
12028: LD_VAR 0 3
12032: PPUSH
12033: CALL_OW 3
12037: ST_TO_ADDR
// tab := Replace ( tab , firstIndex , tabPom ) ;
12038: LD_ADDR_VAR 0 1
12042: PUSH
12043: LD_VAR 0 1
12047: PPUSH
12048: LD_VAR 0 2
12052: PPUSH
12053: LD_VAR 0 7
12057: PPUSH
12058: CALL_OW 1
12062: ST_TO_ADDR
// result := tab ;
12063: LD_ADDR_VAR 0 4
12067: PUSH
12068: LD_VAR 0 1
12072: ST_TO_ADDR
// end ;
12073: LD_VAR 0 4
12077: RET
// export function Nef_PrepareBase ( base_dep , area , name , skill , sources , nation , personel ) ; var i , j , d , b , f , x , un , base , side , buildings , tmp ; begin
12078: LD_INT 0
12080: PPUSH
12081: PPUSH
12082: PPUSH
12083: PPUSH
12084: PPUSH
12085: PPUSH
12086: PPUSH
12087: PPUSH
12088: PPUSH
12089: PPUSH
12090: PPUSH
12091: PPUSH
// result := [ ] ;
12092: LD_ADDR_VAR 0 8
12096: PUSH
12097: EMPTY
12098: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12099: LD_VAR 0 1
12103: PPUSH
12104: CALL_OW 266
12108: PUSH
12109: LD_INT 0
12111: PUSH
12112: LD_INT 1
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: IN
12119: NOT
12120: IFFALSE 12124
// exit ;
12122: GO 13750
// if name then
12124: LD_VAR 0 3
12128: IFFALSE 12144
// SetBName ( base_dep , name ) ;
12130: LD_VAR 0 1
12134: PPUSH
12135: LD_VAR 0 3
12139: PPUSH
12140: CALL_OW 500
// base := GetBase ( base_dep ) ;
12144: LD_ADDR_VAR 0 16
12148: PUSH
12149: LD_VAR 0 1
12153: PPUSH
12154: CALL_OW 274
12158: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12159: LD_ADDR_VAR 0 17
12163: PUSH
12164: LD_VAR 0 1
12168: PPUSH
12169: CALL_OW 255
12173: ST_TO_ADDR
// if sources then
12174: LD_VAR 0 5
12178: IFFALSE 12225
// for i = 1 to 3 do
12180: LD_ADDR_VAR 0 9
12184: PUSH
12185: DOUBLE
12186: LD_INT 1
12188: DEC
12189: ST_TO_ADDR
12190: LD_INT 3
12192: PUSH
12193: FOR_TO
12194: IFFALSE 12223
// AddResourceType ( base , i , sources [ i ] ) ;
12196: LD_VAR 0 16
12200: PPUSH
12201: LD_VAR 0 9
12205: PPUSH
12206: LD_VAR 0 5
12210: PUSH
12211: LD_VAR 0 9
12215: ARRAY
12216: PPUSH
12217: CALL_OW 276
12221: GO 12193
12223: POP
12224: POP
// buildings := GetBaseBuildings ( base , area ) ;
12225: LD_ADDR_VAR 0 18
12229: PUSH
12230: LD_VAR 0 16
12234: PPUSH
12235: LD_VAR 0 2
12239: PPUSH
12240: CALL 48136 0 2
12244: ST_TO_ADDR
// InitHc ;
12245: CALL_OW 19
// InitUc ;
12249: CALL_OW 18
// uc_side := side ;
12253: LD_ADDR_OWVAR 20
12257: PUSH
12258: LD_VAR 0 17
12262: ST_TO_ADDR
// uc_nation := nation ;
12263: LD_ADDR_OWVAR 21
12267: PUSH
12268: LD_VAR 0 6
12272: ST_TO_ADDR
// if buildings then
12273: LD_VAR 0 18
12277: IFFALSE 13609
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12279: LD_ADDR_VAR 0 19
12283: PUSH
12284: LD_VAR 0 18
12288: PPUSH
12289: LD_INT 2
12291: PUSH
12292: LD_INT 30
12294: PUSH
12295: LD_INT 29
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: PUSH
12302: LD_INT 30
12304: PUSH
12305: LD_INT 30
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: LIST
12316: PPUSH
12317: CALL_OW 72
12321: ST_TO_ADDR
// if tmp then
12322: LD_VAR 0 19
12326: IFFALSE 12374
// for i in tmp do
12328: LD_ADDR_VAR 0 9
12332: PUSH
12333: LD_VAR 0 19
12337: PUSH
12338: FOR_IN
12339: IFFALSE 12372
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12341: LD_VAR 0 9
12345: PPUSH
12346: CALL_OW 250
12350: PPUSH
12351: LD_VAR 0 9
12355: PPUSH
12356: CALL_OW 251
12360: PPUSH
12361: LD_VAR 0 17
12365: PPUSH
12366: CALL_OW 441
12370: GO 12338
12372: POP
12373: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12374: LD_VAR 0 18
12378: PPUSH
12379: LD_INT 2
12381: PUSH
12382: LD_INT 30
12384: PUSH
12385: LD_INT 31
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: PUSH
12392: LD_INT 30
12394: PUSH
12395: LD_INT 32
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: PUSH
12402: LD_INT 30
12404: PUSH
12405: LD_INT 33
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: PPUSH
12418: CALL_OW 72
12422: IFFALSE 12521
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12424: LD_ADDR_VAR 0 9
12428: PUSH
12429: LD_VAR 0 18
12433: PPUSH
12434: LD_INT 2
12436: PUSH
12437: LD_INT 30
12439: PUSH
12440: LD_INT 31
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PUSH
12447: LD_INT 30
12449: PUSH
12450: LD_INT 32
12452: PUSH
12453: EMPTY
12454: LIST
12455: LIST
12456: PUSH
12457: LD_INT 30
12459: PUSH
12460: LD_INT 33
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: PPUSH
12473: CALL_OW 72
12477: PUSH
12478: FOR_IN
12479: IFFALSE 12519
// begin if not GetBWeapon ( i ) then
12481: LD_VAR 0 9
12485: PPUSH
12486: CALL_OW 269
12490: NOT
12491: IFFALSE 12517
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12493: LD_VAR 0 9
12497: PPUSH
12498: LD_VAR 0 9
12502: PPUSH
12503: LD_VAR 0 2
12507: PPUSH
12508: CALL 50364 0 2
12512: PPUSH
12513: CALL_OW 431
// end ;
12517: GO 12478
12519: POP
12520: POP
// end ; for i = 1 to personel do
12521: LD_ADDR_VAR 0 9
12525: PUSH
12526: DOUBLE
12527: LD_INT 1
12529: DEC
12530: ST_TO_ADDR
12531: LD_VAR 0 7
12535: PUSH
12536: FOR_TO
12537: IFFALSE 13589
// begin if i > 4 then
12539: LD_VAR 0 9
12543: PUSH
12544: LD_INT 4
12546: GREATER
12547: IFFALSE 12551
// break ;
12549: GO 13589
// case i of 1 :
12551: LD_VAR 0 9
12555: PUSH
12556: LD_INT 1
12558: DOUBLE
12559: EQUAL
12560: IFTRUE 12564
12562: GO 12655
12564: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12565: LD_ADDR_VAR 0 13
12569: PUSH
12570: LD_VAR 0 18
12574: PPUSH
12575: LD_INT 22
12577: PUSH
12578: LD_VAR 0 17
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: PUSH
12587: LD_INT 58
12589: PUSH
12590: EMPTY
12591: LIST
12592: PUSH
12593: LD_INT 2
12595: PUSH
12596: LD_INT 30
12598: PUSH
12599: LD_INT 31
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: PUSH
12606: LD_INT 30
12608: PUSH
12609: LD_INT 32
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PUSH
12616: LD_INT 30
12618: PUSH
12619: LD_INT 4
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: PUSH
12626: LD_INT 30
12628: PUSH
12629: LD_INT 5
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: LIST
12647: PPUSH
12648: CALL_OW 72
12652: ST_TO_ADDR
12653: GO 12877
12655: LD_INT 2
12657: DOUBLE
12658: EQUAL
12659: IFTRUE 12663
12661: GO 12725
12663: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12664: LD_ADDR_VAR 0 13
12668: PUSH
12669: LD_VAR 0 18
12673: PPUSH
12674: LD_INT 22
12676: PUSH
12677: LD_VAR 0 17
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: PUSH
12686: LD_INT 2
12688: PUSH
12689: LD_INT 30
12691: PUSH
12692: LD_INT 0
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: PUSH
12699: LD_INT 30
12701: PUSH
12702: LD_INT 1
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: LIST
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: PPUSH
12718: CALL_OW 72
12722: ST_TO_ADDR
12723: GO 12877
12725: LD_INT 3
12727: DOUBLE
12728: EQUAL
12729: IFTRUE 12733
12731: GO 12795
12733: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12734: LD_ADDR_VAR 0 13
12738: PUSH
12739: LD_VAR 0 18
12743: PPUSH
12744: LD_INT 22
12746: PUSH
12747: LD_VAR 0 17
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PUSH
12756: LD_INT 2
12758: PUSH
12759: LD_INT 30
12761: PUSH
12762: LD_INT 2
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: LD_INT 30
12771: PUSH
12772: LD_INT 3
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: LIST
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: PPUSH
12788: CALL_OW 72
12792: ST_TO_ADDR
12793: GO 12877
12795: LD_INT 4
12797: DOUBLE
12798: EQUAL
12799: IFTRUE 12803
12801: GO 12876
12803: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12804: LD_ADDR_VAR 0 13
12808: PUSH
12809: LD_VAR 0 18
12813: PPUSH
12814: LD_INT 22
12816: PUSH
12817: LD_VAR 0 17
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: PUSH
12826: LD_INT 2
12828: PUSH
12829: LD_INT 30
12831: PUSH
12832: LD_INT 6
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: PUSH
12839: LD_INT 30
12841: PUSH
12842: LD_INT 7
12844: PUSH
12845: EMPTY
12846: LIST
12847: LIST
12848: PUSH
12849: LD_INT 30
12851: PUSH
12852: LD_INT 8
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: PUSH
12859: EMPTY
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: PPUSH
12869: CALL_OW 72
12873: ST_TO_ADDR
12874: GO 12877
12876: POP
// if i = 1 then
12877: LD_VAR 0 9
12881: PUSH
12882: LD_INT 1
12884: EQUAL
12885: IFFALSE 13003
// begin tmp := [ ] ;
12887: LD_ADDR_VAR 0 19
12891: PUSH
12892: EMPTY
12893: ST_TO_ADDR
// for j in f do
12894: LD_ADDR_VAR 0 10
12898: PUSH
12899: LD_VAR 0 13
12903: PUSH
12904: FOR_IN
12905: IFFALSE 12985
// if GetBType ( j ) in [ b_breastwork , b_bunker ] then
12907: LD_VAR 0 10
12911: PPUSH
12912: CALL_OW 266
12916: PUSH
12917: LD_INT 31
12919: PUSH
12920: LD_INT 32
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: IN
12927: IFFALSE 12954
// tmp := Insert ( tmp , 1 , j ) else
12929: LD_ADDR_VAR 0 19
12933: PUSH
12934: LD_VAR 0 19
12938: PPUSH
12939: LD_INT 1
12941: PPUSH
12942: LD_VAR 0 10
12946: PPUSH
12947: CALL_OW 2
12951: ST_TO_ADDR
12952: GO 12983
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12954: LD_ADDR_VAR 0 19
12958: PUSH
12959: LD_VAR 0 19
12963: PPUSH
12964: LD_VAR 0 19
12968: PUSH
12969: LD_INT 1
12971: PLUS
12972: PPUSH
12973: LD_VAR 0 10
12977: PPUSH
12978: CALL_OW 2
12982: ST_TO_ADDR
12983: GO 12904
12985: POP
12986: POP
// if tmp then
12987: LD_VAR 0 19
12991: IFFALSE 13003
// f := tmp ;
12993: LD_ADDR_VAR 0 13
12997: PUSH
12998: LD_VAR 0 19
13002: ST_TO_ADDR
// end ; x := personel [ i ] ;
13003: LD_ADDR_VAR 0 14
13007: PUSH
13008: LD_VAR 0 7
13012: PUSH
13013: LD_VAR 0 9
13017: ARRAY
13018: ST_TO_ADDR
// if x = - 1 then
13019: LD_VAR 0 14
13023: PUSH
13024: LD_INT 1
13026: NEG
13027: EQUAL
13028: IFFALSE 13222
// begin for j in f do
13030: LD_ADDR_VAR 0 10
13034: PUSH
13035: LD_VAR 0 13
13039: PUSH
13040: FOR_IN
13041: IFFALSE 13218
// repeat InitHc ;
13043: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13047: LD_VAR 0 10
13051: PPUSH
13052: CALL_OW 266
13056: PUSH
13057: LD_INT 5
13059: EQUAL
13060: IFFALSE 13115
// begin if UnitsInside ( j ) < 3 then
13062: LD_VAR 0 10
13066: PPUSH
13067: CALL_OW 313
13071: PUSH
13072: LD_INT 3
13074: LESS
13075: IFFALSE 13096
// PrepareHuman ( false , i , skill ) else
13077: LD_INT 0
13079: PPUSH
13080: LD_VAR 0 9
13084: PPUSH
13085: LD_VAR 0 4
13089: PPUSH
13090: CALL_OW 380
13094: GO 13113
// PrepareHuman ( false , i , skill ) ;
13096: LD_INT 0
13098: PPUSH
13099: LD_VAR 0 9
13103: PPUSH
13104: LD_VAR 0 4
13108: PPUSH
13109: CALL_OW 380
// end else
13113: GO 13132
// PrepareHuman ( false , i , skill ) ;
13115: LD_INT 0
13117: PPUSH
13118: LD_VAR 0 9
13122: PPUSH
13123: LD_VAR 0 4
13127: PPUSH
13128: CALL_OW 380
// un := CreateHuman ;
13132: LD_ADDR_VAR 0 15
13136: PUSH
13137: CALL_OW 44
13141: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13142: LD_ADDR_VAR 0 8
13146: PUSH
13147: LD_VAR 0 8
13151: PPUSH
13152: LD_INT 1
13154: PPUSH
13155: LD_VAR 0 15
13159: PPUSH
13160: CALL_OW 2
13164: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13165: LD_VAR 0 15
13169: PPUSH
13170: LD_VAR 0 10
13174: PPUSH
13175: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13179: LD_VAR 0 10
13183: PPUSH
13184: CALL_OW 313
13188: PUSH
13189: LD_INT 6
13191: EQUAL
13192: PUSH
13193: LD_VAR 0 10
13197: PPUSH
13198: CALL_OW 266
13202: PUSH
13203: LD_INT 32
13205: PUSH
13206: LD_INT 31
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: IN
13213: OR
13214: IFFALSE 13043
13216: GO 13040
13218: POP
13219: POP
// end else
13220: GO 13587
// for j = 1 to x do
13222: LD_ADDR_VAR 0 10
13226: PUSH
13227: DOUBLE
13228: LD_INT 1
13230: DEC
13231: ST_TO_ADDR
13232: LD_VAR 0 14
13236: PUSH
13237: FOR_TO
13238: IFFALSE 13585
// begin InitHc ;
13240: CALL_OW 19
// if not f then
13244: LD_VAR 0 13
13248: NOT
13249: IFFALSE 13338
// begin PrepareHuman ( false , i , skill ) ;
13251: LD_INT 0
13253: PPUSH
13254: LD_VAR 0 9
13258: PPUSH
13259: LD_VAR 0 4
13263: PPUSH
13264: CALL_OW 380
// un := CreateHuman ;
13268: LD_ADDR_VAR 0 15
13272: PUSH
13273: CALL_OW 44
13277: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13278: LD_ADDR_VAR 0 8
13282: PUSH
13283: LD_VAR 0 8
13287: PPUSH
13288: LD_INT 1
13290: PPUSH
13291: LD_VAR 0 15
13295: PPUSH
13296: CALL_OW 2
13300: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13301: LD_VAR 0 15
13305: PPUSH
13306: LD_VAR 0 1
13310: PPUSH
13311: CALL_OW 250
13315: PPUSH
13316: LD_VAR 0 1
13320: PPUSH
13321: CALL_OW 251
13325: PPUSH
13326: LD_INT 10
13328: PPUSH
13329: LD_INT 0
13331: PPUSH
13332: CALL_OW 50
// continue ;
13336: GO 13237
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13338: LD_VAR 0 13
13342: PUSH
13343: LD_INT 1
13345: ARRAY
13346: PPUSH
13347: CALL_OW 313
13351: PUSH
13352: LD_VAR 0 13
13356: PUSH
13357: LD_INT 1
13359: ARRAY
13360: PPUSH
13361: CALL_OW 266
13365: PUSH
13366: LD_INT 32
13368: PUSH
13369: LD_INT 31
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: IN
13376: AND
13377: PUSH
13378: LD_VAR 0 13
13382: PUSH
13383: LD_INT 1
13385: ARRAY
13386: PPUSH
13387: CALL_OW 313
13391: PUSH
13392: LD_INT 6
13394: EQUAL
13395: OR
13396: IFFALSE 13416
// f := Delete ( f , 1 ) ;
13398: LD_ADDR_VAR 0 13
13402: PUSH
13403: LD_VAR 0 13
13407: PPUSH
13408: LD_INT 1
13410: PPUSH
13411: CALL_OW 3
13415: ST_TO_ADDR
// if not f then
13416: LD_VAR 0 13
13420: NOT
13421: IFFALSE 13439
// begin x := x + 2 ;
13423: LD_ADDR_VAR 0 14
13427: PUSH
13428: LD_VAR 0 14
13432: PUSH
13433: LD_INT 2
13435: PLUS
13436: ST_TO_ADDR
// continue ;
13437: GO 13237
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13439: LD_VAR 0 13
13443: PUSH
13444: LD_INT 1
13446: ARRAY
13447: PPUSH
13448: CALL_OW 266
13452: PUSH
13453: LD_INT 5
13455: EQUAL
13456: IFFALSE 13515
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13458: LD_VAR 0 13
13462: PUSH
13463: LD_INT 1
13465: ARRAY
13466: PPUSH
13467: CALL_OW 313
13471: PUSH
13472: LD_INT 3
13474: LESS
13475: IFFALSE 13496
// PrepareHuman ( false , i , skill ) else
13477: LD_INT 0
13479: PPUSH
13480: LD_VAR 0 9
13484: PPUSH
13485: LD_VAR 0 4
13489: PPUSH
13490: CALL_OW 380
13494: GO 13513
// PrepareHuman ( false , i , skill ) ;
13496: LD_INT 0
13498: PPUSH
13499: LD_VAR 0 9
13503: PPUSH
13504: LD_VAR 0 4
13508: PPUSH
13509: CALL_OW 380
// end else
13513: GO 13532
// PrepareHuman ( false , i , skill ) ;
13515: LD_INT 0
13517: PPUSH
13518: LD_VAR 0 9
13522: PPUSH
13523: LD_VAR 0 4
13527: PPUSH
13528: CALL_OW 380
// un := CreateHuman ;
13532: LD_ADDR_VAR 0 15
13536: PUSH
13537: CALL_OW 44
13541: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13542: LD_ADDR_VAR 0 8
13546: PUSH
13547: LD_VAR 0 8
13551: PPUSH
13552: LD_INT 1
13554: PPUSH
13555: LD_VAR 0 15
13559: PPUSH
13560: CALL_OW 2
13564: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13565: LD_VAR 0 15
13569: PPUSH
13570: LD_VAR 0 13
13574: PUSH
13575: LD_INT 1
13577: ARRAY
13578: PPUSH
13579: CALL_OW 52
// end ;
13583: GO 13237
13585: POP
13586: POP
// end ;
13587: GO 12536
13589: POP
13590: POP
// result := result ^ buildings ;
13591: LD_ADDR_VAR 0 8
13595: PUSH
13596: LD_VAR 0 8
13600: PUSH
13601: LD_VAR 0 18
13605: ADD
13606: ST_TO_ADDR
// end else
13607: GO 13750
// begin for i = 1 to personel do
13609: LD_ADDR_VAR 0 9
13613: PUSH
13614: DOUBLE
13615: LD_INT 1
13617: DEC
13618: ST_TO_ADDR
13619: LD_VAR 0 7
13623: PUSH
13624: FOR_TO
13625: IFFALSE 13748
// begin if i > 4 then
13627: LD_VAR 0 9
13631: PUSH
13632: LD_INT 4
13634: GREATER
13635: IFFALSE 13639
// break ;
13637: GO 13748
// x := personel [ i ] ;
13639: LD_ADDR_VAR 0 14
13643: PUSH
13644: LD_VAR 0 7
13648: PUSH
13649: LD_VAR 0 9
13653: ARRAY
13654: ST_TO_ADDR
// if x = - 1 then
13655: LD_VAR 0 14
13659: PUSH
13660: LD_INT 1
13662: NEG
13663: EQUAL
13664: IFFALSE 13668
// continue ;
13666: GO 13624
// PrepareHuman ( false , i , skill ) ;
13668: LD_INT 0
13670: PPUSH
13671: LD_VAR 0 9
13675: PPUSH
13676: LD_VAR 0 4
13680: PPUSH
13681: CALL_OW 380
// un := CreateHuman ;
13685: LD_ADDR_VAR 0 15
13689: PUSH
13690: CALL_OW 44
13694: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13695: LD_VAR 0 15
13699: PPUSH
13700: LD_VAR 0 1
13704: PPUSH
13705: CALL_OW 250
13709: PPUSH
13710: LD_VAR 0 1
13714: PPUSH
13715: CALL_OW 251
13719: PPUSH
13720: LD_INT 10
13722: PPUSH
13723: LD_INT 0
13725: PPUSH
13726: CALL_OW 50
// result := result ^ un ;
13730: LD_ADDR_VAR 0 8
13734: PUSH
13735: LD_VAR 0 8
13739: PUSH
13740: LD_VAR 0 15
13744: ADD
13745: ST_TO_ADDR
// end ;
13746: GO 13624
13748: POP
13749: POP
// end ; end ;
13750: LD_VAR 0 8
13754: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
13755: LD_INT 0
13757: PPUSH
13758: PPUSH
13759: PPUSH
13760: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
13761: LD_ADDR_VAR 0 6
13765: PUSH
13766: LD_INT 34
13768: PUSH
13769: LD_INT 71
13771: PUSH
13772: LD_INT 70
13774: PUSH
13775: LD_INT 69
13777: PUSH
13778: LD_INT 39
13780: PUSH
13781: LD_INT 31
13783: PUSH
13784: LD_INT 14
13786: PUSH
13787: LD_INT 10
13789: PUSH
13790: LD_INT 40
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: ST_TO_ADDR
// resultWeapons = [ ] ;
13804: LD_ADDR_VAR 0 5
13808: PUSH
13809: EMPTY
13810: ST_TO_ADDR
// for i := 1 to weaponTechs do
13811: LD_ADDR_VAR 0 4
13815: PUSH
13816: DOUBLE
13817: LD_INT 1
13819: DEC
13820: ST_TO_ADDR
13821: LD_VAR 0 6
13825: PUSH
13826: FOR_TO
13827: IFFALSE 14014
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
13829: LD_VAR 0 6
13833: PUSH
13834: LD_VAR 0 4
13838: ARRAY
13839: PPUSH
13840: LD_VAR 0 2
13844: PPUSH
13845: CALL_OW 482
13849: PUSH
13850: LD_VAR 0 6
13854: PUSH
13855: LD_VAR 0 4
13859: ARRAY
13860: PPUSH
13861: LD_VAR 0 1
13865: PPUSH
13866: CALL_OW 321
13870: PUSH
13871: LD_INT 2
13873: EQUAL
13874: AND
13875: IFFALSE 14012
// case nation of nation_american :
13877: LD_VAR 0 2
13881: PUSH
13882: LD_INT 1
13884: DOUBLE
13885: EQUAL
13886: IFTRUE 13890
13888: GO 13925
13890: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
13891: LD_ADDR_VAR 0 5
13895: PUSH
13896: LD_VAR 0 5
13900: PUSH
13901: LD_VAR 0 6
13905: PUSH
13906: LD_VAR 0 4
13910: ARRAY
13911: PPUSH
13912: LD_VAR 0 2
13916: PPUSH
13917: CALL 14031 0 2
13921: ADD
13922: ST_TO_ADDR
13923: GO 14012
13925: LD_INT 2
13927: DOUBLE
13928: EQUAL
13929: IFTRUE 13933
13931: GO 13968
13933: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
13934: LD_ADDR_VAR 0 5
13938: PUSH
13939: LD_VAR 0 5
13943: PUSH
13944: LD_VAR 0 6
13948: PUSH
13949: LD_VAR 0 4
13953: ARRAY
13954: PPUSH
13955: LD_VAR 0 2
13959: PPUSH
13960: CALL 14031 0 2
13964: ADD
13965: ST_TO_ADDR
13966: GO 14012
13968: LD_INT 3
13970: DOUBLE
13971: EQUAL
13972: IFTRUE 13976
13974: GO 14011
13976: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
13977: LD_ADDR_VAR 0 5
13981: PUSH
13982: LD_VAR 0 5
13986: PUSH
13987: LD_VAR 0 6
13991: PUSH
13992: LD_VAR 0 4
13996: ARRAY
13997: PPUSH
13998: LD_VAR 0 2
14002: PPUSH
14003: CALL 14031 0 2
14007: ADD
14008: ST_TO_ADDR
14009: GO 14012
14011: POP
// end ;
14012: GO 13826
14014: POP
14015: POP
// result = resultWeapons ;
14016: LD_ADDR_VAR 0 3
14020: PUSH
14021: LD_VAR 0 5
14025: ST_TO_ADDR
// end ;
14026: LD_VAR 0 3
14030: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
14031: LD_INT 0
14033: PPUSH
// case tech of tech_AdvMet :
14034: LD_VAR 0 1
14038: PUSH
14039: LD_INT 34
14041: DOUBLE
14042: EQUAL
14043: IFTRUE 14047
14045: GO 14075
14047: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
14048: LD_ADDR_VAR 0 3
14052: PUSH
14053: LD_INT 6
14055: PUSH
14056: LD_STRING 
14058: PUSH
14059: LD_INT 46
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: LIST
14066: PUSH
14067: LD_VAR 0 2
14071: ARRAY
14072: ST_TO_ADDR
14073: GO 14364
14075: LD_INT 71
14077: DOUBLE
14078: EQUAL
14079: IFTRUE 14083
14081: GO 14111
14083: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
14084: LD_ADDR_VAR 0 3
14088: PUSH
14089: LD_STRING 
14091: PUSH
14092: LD_STRING 
14094: PUSH
14095: LD_INT 47
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: LIST
14102: PUSH
14103: LD_VAR 0 2
14107: ARRAY
14108: ST_TO_ADDR
14109: GO 14364
14111: LD_INT 70
14113: DOUBLE
14114: EQUAL
14115: IFTRUE 14119
14117: GO 14147
14119: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
14120: LD_ADDR_VAR 0 3
14124: PUSH
14125: LD_STRING 
14127: PUSH
14128: LD_INT 26
14130: PUSH
14131: LD_STRING 
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: LIST
14138: PUSH
14139: LD_VAR 0 2
14143: ARRAY
14144: ST_TO_ADDR
14145: GO 14364
14147: LD_INT 69
14149: DOUBLE
14150: EQUAL
14151: IFTRUE 14155
14153: GO 14183
14155: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
14156: LD_ADDR_VAR 0 3
14160: PUSH
14161: LD_INT 4
14163: PUSH
14164: LD_INT 25
14166: PUSH
14167: LD_INT 43
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: LIST
14174: PUSH
14175: LD_VAR 0 2
14179: ARRAY
14180: ST_TO_ADDR
14181: GO 14364
14183: LD_INT 39
14185: DOUBLE
14186: EQUAL
14187: IFTRUE 14191
14189: GO 14219
14191: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
14192: LD_ADDR_VAR 0 3
14196: PUSH
14197: LD_INT 5
14199: PUSH
14200: LD_INT 27
14202: PUSH
14203: LD_INT 44
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: LIST
14210: PUSH
14211: LD_VAR 0 2
14215: ARRAY
14216: ST_TO_ADDR
14217: GO 14364
14219: LD_INT 31
14221: DOUBLE
14222: EQUAL
14223: IFTRUE 14227
14225: GO 14255
14227: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
14228: LD_ADDR_VAR 0 3
14232: PUSH
14233: LD_STRING 
14235: PUSH
14236: LD_STRING 
14238: PUSH
14239: LD_INT 49
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: LIST
14246: PUSH
14247: LD_VAR 0 2
14251: ARRAY
14252: ST_TO_ADDR
14253: GO 14364
14255: LD_INT 14
14257: DOUBLE
14258: EQUAL
14259: IFTRUE 14263
14261: GO 14291
14263: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
14264: LD_ADDR_VAR 0 3
14268: PUSH
14269: LD_INT 10
14271: PUSH
14272: LD_STRING 
14274: PUSH
14275: LD_STRING 
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: LIST
14282: PUSH
14283: LD_VAR 0 2
14287: ARRAY
14288: ST_TO_ADDR
14289: GO 14364
14291: LD_INT 10
14293: DOUBLE
14294: EQUAL
14295: IFTRUE 14299
14297: GO 14327
14299: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
14300: LD_ADDR_VAR 0 3
14304: PUSH
14305: LD_INT 9
14307: PUSH
14308: LD_STRING 
14310: PUSH
14311: LD_STRING 
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: LIST
14318: PUSH
14319: LD_VAR 0 2
14323: ARRAY
14324: ST_TO_ADDR
14325: GO 14364
14327: LD_INT 40
14329: DOUBLE
14330: EQUAL
14331: IFTRUE 14335
14333: GO 14363
14335: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
14336: LD_ADDR_VAR 0 3
14340: PUSH
14341: LD_INT 7
14343: PUSH
14344: LD_INT 28
14346: PUSH
14347: LD_INT 45
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: LIST
14354: PUSH
14355: LD_VAR 0 2
14359: ARRAY
14360: ST_TO_ADDR
14361: GO 14364
14363: POP
// end ;
14364: LD_VAR 0 3
14368: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
14369: LD_INT 0
14371: PPUSH
14372: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
14373: LD_ADDR_VAR 0 2
14377: PUSH
14378: LD_VAR 0 1
14382: PPUSH
14383: LD_INT 1
14385: PPUSH
14386: CALL_OW 289
14390: PUSH
14391: LD_VAR 0 1
14395: PPUSH
14396: LD_INT 2
14398: PPUSH
14399: CALL_OW 289
14403: PUSH
14404: LD_VAR 0 1
14408: PPUSH
14409: LD_INT 3
14411: PPUSH
14412: CALL_OW 289
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: LIST
14421: ST_TO_ADDR
// end ;
14422: LD_VAR 0 2
14426: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
14427: LD_INT 0
14429: PPUSH
14430: PPUSH
// area = ListEnvironmentArea ( area ) ;
14431: LD_ADDR_VAR 0 2
14435: PUSH
14436: LD_VAR 0 2
14440: PPUSH
14441: CALL_OW 353
14445: ST_TO_ADDR
// if bulldozer > 0 then
14446: LD_VAR 0 1
14450: PUSH
14451: LD_INT 0
14453: GREATER
14454: IFFALSE 14565
// for i = area downto 1 do
14456: LD_ADDR_VAR 0 4
14460: PUSH
14461: DOUBLE
14462: LD_VAR 0 2
14466: INC
14467: ST_TO_ADDR
14468: LD_INT 1
14470: PUSH
14471: FOR_DOWNTO
14472: IFFALSE 14563
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
14474: LD_VAR 0 2
14478: PUSH
14479: LD_VAR 0 4
14483: ARRAY
14484: PUSH
14485: LD_INT 1
14487: ARRAY
14488: PPUSH
14489: LD_VAR 0 2
14493: PUSH
14494: LD_VAR 0 4
14498: ARRAY
14499: PUSH
14500: LD_INT 2
14502: ARRAY
14503: PPUSH
14504: CALL_OW 351
14508: IFFALSE 14561
// if not HasTask ( bulldozer ) then
14510: LD_VAR 0 1
14514: PPUSH
14515: CALL_OW 314
14519: NOT
14520: IFFALSE 14561
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
14522: LD_VAR 0 1
14526: PPUSH
14527: LD_VAR 0 2
14531: PUSH
14532: LD_VAR 0 4
14536: ARRAY
14537: PUSH
14538: LD_INT 1
14540: ARRAY
14541: PPUSH
14542: LD_VAR 0 2
14546: PUSH
14547: LD_VAR 0 4
14551: ARRAY
14552: PUSH
14553: LD_INT 2
14555: ARRAY
14556: PPUSH
14557: CALL_OW 171
14561: GO 14471
14563: POP
14564: POP
// end ;
14565: LD_VAR 0 3
14569: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
14570: LD_INT 0
14572: PPUSH
14573: PPUSH
14574: PPUSH
// uc_side := GetSide ( b ) ;
14575: LD_ADDR_OWVAR 20
14579: PUSH
14580: LD_VAR 0 2
14584: PPUSH
14585: CALL_OW 255
14589: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
14590: LD_ADDR_OWVAR 21
14594: PUSH
14595: LD_VAR 0 2
14599: PPUSH
14600: CALL_OW 248
14604: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
14605: LD_INT 0
14607: PPUSH
14608: LD_INT 1
14610: PPUSH
14611: LD_VAR 0 1
14615: PPUSH
14616: CALL_OW 380
// un = CreateHuman ;
14620: LD_ADDR_VAR 0 4
14624: PUSH
14625: CALL_OW 44
14629: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
14630: LD_ADDR_VAR 0 5
14634: PUSH
14635: LD_VAR 0 2
14639: PPUSH
14640: CALL_OW 254
14644: PUSH
14645: LD_INT 3
14647: MINUS
14648: ST_TO_ADDR
// if dir < 0 then
14649: LD_VAR 0 5
14653: PUSH
14654: LD_INT 0
14656: LESS
14657: IFFALSE 14673
// dir := 6 + dir ;
14659: LD_ADDR_VAR 0 5
14663: PUSH
14664: LD_INT 6
14666: PUSH
14667: LD_VAR 0 5
14671: PLUS
14672: ST_TO_ADDR
// SetDir ( un , dir ) ;
14673: LD_VAR 0 4
14677: PPUSH
14678: LD_VAR 0 5
14682: PPUSH
14683: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
14687: LD_VAR 0 4
14691: PPUSH
14692: LD_VAR 0 2
14696: PPUSH
14697: CALL_OW 52
// result = un ;
14701: LD_ADDR_VAR 0 3
14705: PUSH
14706: LD_VAR 0 4
14710: ST_TO_ADDR
// end ;
14711: LD_VAR 0 3
14715: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others , max , test1 , test2 ; begin
14716: LD_INT 0
14718: PPUSH
14719: PPUSH
14720: PPUSH
14721: PPUSH
14722: PPUSH
14723: PPUSH
14724: PPUSH
14725: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Burlak , Vsevolod ] ;
14726: LD_ADDR_VAR 0 3
14730: PUSH
14731: LD_INT 22
14733: PUSH
14734: LD_INT 3
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: PUSH
14741: LD_INT 21
14743: PUSH
14744: LD_INT 1
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: PUSH
14751: LD_INT 23
14753: PUSH
14754: LD_INT 3
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: LIST
14765: PPUSH
14766: CALL_OW 69
14770: PUSH
14771: LD_EXP 39
14775: PUSH
14776: LD_EXP 49
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: DIFF
14785: ST_TO_ADDR
// charsToChoose = charsToChoose diff vsevolodTeam ;
14786: LD_ADDR_VAR 0 3
14790: PUSH
14791: LD_VAR 0 3
14795: PUSH
14796: LD_EXP 50
14800: DIFF
14801: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam diff Vsevolod ;
14802: LD_ADDR_EXP 50
14806: PUSH
14807: LD_EXP 50
14811: PUSH
14812: LD_EXP 49
14816: DIFF
14817: ST_TO_ADDR
// max = charsToChoose div 2 + charsToChoose mod 2 ;
14818: LD_ADDR_VAR 0 6
14822: PUSH
14823: LD_VAR 0 3
14827: PUSH
14828: LD_INT 2
14830: DIV
14831: PUSH
14832: LD_VAR 0 3
14836: PUSH
14837: LD_INT 2
14839: MOD
14840: PLUS
14841: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 0 , 3 , [ Burlak , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_not_hired ] ^ vsevolodTeam ^ [ sel_not_changeable , Vsevolod ] , [ class_soldier , class_mechanic , class_engineer , class_scientistic ] ) ;
14842: LD_ADDR_VAR 0 4
14846: PUSH
14847: LD_STRING text
14849: PPUSH
14850: LD_INT 0
14852: PPUSH
14853: LD_INT 3
14855: PPUSH
14856: LD_EXP 39
14860: PUSH
14861: LD_INT -3
14863: PUSH
14864: LD_INT -5
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: LIST
14871: PUSH
14872: LD_VAR 0 3
14876: ADD
14877: PUSH
14878: LD_INT -2
14880: PUSH
14881: EMPTY
14882: LIST
14883: ADD
14884: PUSH
14885: LD_EXP 50
14889: ADD
14890: PUSH
14891: LD_INT -4
14893: PUSH
14894: LD_EXP 49
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: ADD
14903: PPUSH
14904: LD_INT 1
14906: PUSH
14907: LD_INT 3
14909: PUSH
14910: LD_INT 2
14912: PUSH
14913: LD_INT 4
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: PPUSH
14922: CALL_OW 42
14926: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) , 6 ) ;
14927: LD_INT 22
14929: PUSH
14930: LD_INT 3
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: LD_INT 21
14939: PUSH
14940: LD_INT 1
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: PUSH
14947: LD_INT 23
14949: PUSH
14950: LD_INT 3
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: LIST
14961: PPUSH
14962: CALL_OW 69
14966: PPUSH
14967: LD_INT 6
14969: PPUSH
14970: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
14974: LD_VAR 0 4
14978: PPUSH
14979: LD_INT 3
14981: PPUSH
14982: CALL_OW 235
// SetSide ( Burlak , 3 ) ;
14986: LD_EXP 39
14990: PPUSH
14991: LD_INT 3
14993: PPUSH
14994: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
14998: LD_ADDR_VAR 0 2
15002: PUSH
15003: LD_INT 22
15005: PUSH
15006: LD_INT 6
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PUSH
15013: LD_INT 21
15015: PUSH
15016: LD_INT 1
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: PPUSH
15027: CALL_OW 69
15031: PUSH
15032: FOR_IN
15033: IFFALSE 15066
// if IsInUnit ( i ) then
15035: LD_VAR 0 2
15039: PPUSH
15040: CALL_OW 310
15044: IFFALSE 15064
// begin ComExitVehicle ( i ) ;
15046: LD_VAR 0 2
15050: PPUSH
15051: CALL_OW 121
// ComExitBuilding ( i ) ;
15055: LD_VAR 0 2
15059: PPUSH
15060: CALL_OW 122
// end ;
15064: GO 15032
15066: POP
15067: POP
// if not Vsevolod in selectedPeople then
15068: LD_EXP 49
15072: PUSH
15073: LD_VAR 0 4
15077: IN
15078: NOT
15079: IFFALSE 15096
// ExtSaveCharacter ( Vsevolod , Vsevolod , 6 ) ;
15081: LD_EXP 49
15085: PPUSH
15086: LD_STRING Vsevolod
15088: PPUSH
15089: LD_INT 6
15091: PPUSH
15092: CALL 11295 0 3
// if not Karamazov in selectedPeople then
15096: LD_EXP 40
15100: PUSH
15101: LD_VAR 0 4
15105: IN
15106: NOT
15107: IFFALSE 15124
// ExtSaveCharacter ( Karamazov , Karamazov , 6 ) ;
15109: LD_EXP 40
15113: PPUSH
15114: LD_STRING Karamazov
15116: PPUSH
15117: LD_INT 6
15119: PPUSH
15120: CALL 11295 0 3
// if not Petrovova in selectedPeople then
15124: LD_EXP 41
15128: PUSH
15129: LD_VAR 0 4
15133: IN
15134: NOT
15135: IFFALSE 15152
// ExtSaveCharacter ( Petrovova , Petrovova , 6 ) ;
15137: LD_EXP 41
15141: PPUSH
15142: LD_STRING Petrovova
15144: PPUSH
15145: LD_INT 6
15147: PPUSH
15148: CALL 11295 0 3
// if not Gleb in selectedPeople then
15152: LD_EXP 42
15156: PUSH
15157: LD_VAR 0 4
15161: IN
15162: NOT
15163: IFFALSE 15180
// ExtSaveCharacter ( Gleb , Gleb , 6 ) ;
15165: LD_EXP 42
15169: PPUSH
15170: LD_STRING Gleb
15172: PPUSH
15173: LD_INT 6
15175: PPUSH
15176: CALL 11295 0 3
// if not Petrosyan in selectedPeople then
15180: LD_EXP 43
15184: PUSH
15185: LD_VAR 0 4
15189: IN
15190: NOT
15191: IFFALSE 15208
// ExtSaveCharacter ( Petrosyan , Petrosyan , 6 ) ;
15193: LD_EXP 43
15197: PPUSH
15198: LD_STRING Petrosyan
15200: PPUSH
15201: LD_INT 6
15203: PPUSH
15204: CALL 11295 0 3
// if not Titov in selectedPeople then
15208: LD_EXP 44
15212: PUSH
15213: LD_VAR 0 4
15217: IN
15218: NOT
15219: IFFALSE 15236
// ExtSaveCharacter ( Titov , Titov , 6 ) ;
15221: LD_EXP 44
15225: PPUSH
15226: LD_STRING Titov
15228: PPUSH
15229: LD_INT 6
15231: PPUSH
15232: CALL 11295 0 3
// if not Dolgov in selectedPeople then
15236: LD_EXP 45
15240: PUSH
15241: LD_VAR 0 4
15245: IN
15246: NOT
15247: IFFALSE 15264
// ExtSaveCharacter ( Dolgov , Dolgov , 6 ) ;
15249: LD_EXP 45
15253: PPUSH
15254: LD_STRING Dolgov
15256: PPUSH
15257: LD_INT 6
15259: PPUSH
15260: CALL 11295 0 3
// if not Lipshchin in selectedPeople then
15264: LD_EXP 46
15268: PUSH
15269: LD_VAR 0 4
15273: IN
15274: NOT
15275: IFFALSE 15292
// ExtSaveCharacter ( Lipshchin , Lipshchin , 6 ) ;
15277: LD_EXP 46
15281: PPUSH
15282: LD_STRING Lipshchin
15284: PPUSH
15285: LD_INT 6
15287: PPUSH
15288: CALL 11295 0 3
// others = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod ] ;
15292: LD_ADDR_VAR 0 5
15296: PUSH
15297: LD_INT 22
15299: PUSH
15300: LD_INT 6
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: LD_INT 21
15309: PUSH
15310: LD_INT 1
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PUSH
15317: LD_INT 23
15319: PUSH
15320: LD_INT 3
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: LIST
15331: PPUSH
15332: CALL_OW 69
15336: PUSH
15337: LD_EXP 40
15341: PUSH
15342: LD_EXP 41
15346: PUSH
15347: LD_EXP 42
15351: PUSH
15352: LD_EXP 43
15356: PUSH
15357: LD_EXP 44
15361: PUSH
15362: LD_EXP 45
15366: PUSH
15367: LD_EXP 46
15371: PUSH
15372: LD_EXP 49
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: DIFF
15387: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_vsevolod , 6 ) ;
15388: LD_VAR 0 5
15392: PPUSH
15393: LD_STRING other_survivors_with_vsevolod
15395: PPUSH
15396: LD_INT 6
15398: PPUSH
15399: CALL 11351 0 3
// end ; end_of_file
15403: LD_VAR 0 1
15407: RET
// export function MissionIntro ; var i , ruEng , unit ; begin
15408: LD_INT 0
15410: PPUSH
15411: PPUSH
15412: PPUSH
15413: PPUSH
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) ;
15414: LD_EXP 39
15418: PPUSH
15419: CALL_OW 310
15423: PPUSH
15424: CALL_OW 87
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
15428: LD_ADDR_VAR 0 4
15432: PUSH
15433: LD_INT 22
15435: PUSH
15436: LD_INT 3
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 21
15445: PUSH
15446: LD_INT 2
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PPUSH
15457: CALL_OW 69
15461: PUSH
15462: FOR_IN
15463: IFFALSE 15527
// begin if ( i mod 2 ) = 0 then
15465: LD_VAR 0 2
15469: PUSH
15470: LD_INT 2
15472: MOD
15473: PUSH
15474: LD_INT 0
15476: EQUAL
15477: IFFALSE 15496
// ComMoveXY ( unit , 150 , 212 ) else
15479: LD_VAR 0 4
15483: PPUSH
15484: LD_INT 150
15486: PPUSH
15487: LD_INT 212
15489: PPUSH
15490: CALL_OW 111
15494: GO 15511
// ComMoveXY ( unit , 157 , 205 ) ;
15496: LD_VAR 0 4
15500: PPUSH
15501: LD_INT 157
15503: PPUSH
15504: LD_INT 205
15506: PPUSH
15507: CALL_OW 111
// i = i + 1 ;
15511: LD_ADDR_VAR 0 2
15515: PUSH
15516: LD_VAR 0 2
15520: PUSH
15521: LD_INT 1
15523: PLUS
15524: ST_TO_ADDR
// end ;
15525: GO 15462
15527: POP
15528: POP
// if IsOK ( Karamazov ) then
15529: LD_EXP 40
15533: PPUSH
15534: CALL_OW 302
15538: IFFALSE 15552
// ruEng = Karamazov else
15540: LD_ADDR_VAR 0 3
15544: PUSH
15545: LD_EXP 40
15549: ST_TO_ADDR
15550: GO 15635
// if IsOK ( Lipshchin ) then
15552: LD_EXP 46
15556: PPUSH
15557: CALL_OW 302
15561: IFFALSE 15575
// ruEng = Lipshchin else
15563: LD_ADDR_VAR 0 3
15567: PUSH
15568: LD_EXP 46
15572: ST_TO_ADDR
15573: GO 15635
// ruEng = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_class , class_engineer ] ] ) [ 1 ] ;
15575: LD_ADDR_VAR 0 3
15579: PUSH
15580: LD_INT 22
15582: PUSH
15583: LD_INT 3
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: LD_INT 21
15592: PUSH
15593: LD_INT 1
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PUSH
15600: LD_INT 23
15602: PUSH
15603: LD_INT 3
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: LD_INT 25
15612: PUSH
15613: LD_INT 2
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: PPUSH
15626: CALL_OW 69
15630: PUSH
15631: LD_INT 1
15633: ARRAY
15634: ST_TO_ADDR
// repeat ComMoveXY ( IsInUnit ( ruEng ) , 148 , 214 ) ;
15635: LD_VAR 0 3
15639: PPUSH
15640: CALL_OW 310
15644: PPUSH
15645: LD_INT 148
15647: PPUSH
15648: LD_INT 214
15650: PPUSH
15651: CALL_OW 111
// wait ( 0 0$1 ) ;
15655: LD_INT 35
15657: PPUSH
15658: CALL_OW 67
// until GetDistUnitXY ( IsInUnit ( ruEng ) , 148 , 214 ) <= 2 ;
15662: LD_VAR 0 3
15666: PPUSH
15667: CALL_OW 310
15671: PPUSH
15672: LD_INT 148
15674: PPUSH
15675: LD_INT 214
15677: PPUSH
15678: CALL_OW 297
15682: PUSH
15683: LD_INT 2
15685: LESSEQUAL
15686: IFFALSE 15635
// ComExitVehicle ( ruEng ) ;
15688: LD_VAR 0 3
15692: PPUSH
15693: CALL_OW 121
// wait ( 0 0$1 ) ;
15697: LD_INT 35
15699: PPUSH
15700: CALL_OW 67
// AddComCaptureBuilding ( ruEng , rudepot ) ;
15704: LD_VAR 0 3
15708: PPUSH
15709: LD_INT 74
15711: PPUSH
15712: CALL 11867 0 2
// repeat wait ( 0 0$1 ) ;
15716: LD_INT 35
15718: PPUSH
15719: CALL_OW 67
// until GetSide ( rudepot ) = 3 ;
15723: LD_INT 74
15725: PPUSH
15726: CALL_OW 255
15730: PUSH
15731: LD_INT 3
15733: EQUAL
15734: IFFALSE 15716
// ComEnterUnit ( ruEng , rudepot ) ;
15736: LD_VAR 0 3
15740: PPUSH
15741: LD_INT 74
15743: PPUSH
15744: CALL_OW 120
// wait ( 0 0$2 ) ;
15748: LD_INT 70
15750: PPUSH
15751: CALL_OW 67
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
15755: LD_INT 22
15757: PUSH
15758: LD_INT 6
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PPUSH
15765: CALL_OW 69
15769: PPUSH
15770: LD_INT 3
15772: PPUSH
15773: CALL_OW 235
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
15777: LD_ADDR_VAR 0 4
15781: PUSH
15782: LD_INT 22
15784: PUSH
15785: LD_INT 3
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: PUSH
15792: LD_INT 21
15794: PUSH
15795: LD_INT 1
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PPUSH
15806: CALL_OW 69
15810: PUSH
15811: FOR_IN
15812: IFFALSE 15845
// if GetType ( IsInUnit ( unit ) ) = unit_vehicle then
15814: LD_VAR 0 4
15818: PPUSH
15819: CALL_OW 310
15823: PPUSH
15824: CALL_OW 247
15828: PUSH
15829: LD_INT 2
15831: EQUAL
15832: IFFALSE 15843
// ComExitVehicle ( unit ) ;
15834: LD_VAR 0 4
15838: PPUSH
15839: CALL_OW 121
15843: GO 15811
15845: POP
15846: POP
// if ruEng = Karamazov then
15847: LD_VAR 0 3
15851: PUSH
15852: LD_EXP 40
15856: EQUAL
15857: IFFALSE 15873
// Say ( Karamazov , DStart-Kar-1 ) else
15859: LD_EXP 40
15863: PPUSH
15864: LD_STRING DStart-Kar-1
15866: PPUSH
15867: CALL_OW 88
15871: GO 15897
// if ruEng = Lipshchin then
15873: LD_VAR 0 3
15877: PUSH
15878: LD_EXP 46
15882: EQUAL
15883: IFFALSE 15897
// Say ( Lipshchin , DStart-Lip-1 ) ;
15885: LD_EXP 46
15889: PPUSH
15890: LD_STRING DStart-Lip-1
15892: PPUSH
15893: CALL_OW 88
// ComExitBuilding ( ruEng ) ;
15897: LD_VAR 0 3
15901: PPUSH
15902: CALL_OW 122
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 250 ] ] ] ) do
15906: LD_ADDR_VAR 0 4
15910: PUSH
15911: LD_INT 22
15913: PUSH
15914: LD_INT 3
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: PUSH
15921: LD_INT 21
15923: PUSH
15924: LD_INT 3
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: PUSH
15931: LD_INT 3
15933: PUSH
15934: LD_INT 24
15936: PUSH
15937: LD_INT 250
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: LIST
15952: PPUSH
15953: CALL_OW 69
15957: PUSH
15958: FOR_IN
15959: IFFALSE 16012
// AddComRepairBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , unit ) ;
15961: LD_INT 22
15963: PUSH
15964: LD_INT 3
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PUSH
15971: LD_INT 21
15973: PUSH
15974: LD_INT 1
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: LD_INT 25
15983: PUSH
15984: LD_INT 2
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: LIST
15995: PPUSH
15996: CALL_OW 69
16000: PPUSH
16001: LD_VAR 0 4
16005: PPUSH
16006: CALL_OW 190
16010: GO 15958
16012: POP
16013: POP
// Say ( Burlak , DStart-Bur-1 ) ;
16014: LD_EXP 39
16018: PPUSH
16019: LD_STRING DStart-Bur-1
16021: PPUSH
16022: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-1 ) ;
16026: LD_EXP 47
16030: PPUSH
16031: LD_STRING DStart-Pla-1
16033: PPUSH
16034: CALL_OW 94
// Say ( Burlak , DStart-Bur-2 ) ;
16038: LD_EXP 39
16042: PPUSH
16043: LD_STRING DStart-Bur-2
16045: PPUSH
16046: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-2 ) ;
16050: LD_EXP 47
16054: PPUSH
16055: LD_STRING DStart-Pla-2
16057: PPUSH
16058: CALL_OW 94
// if IsOK ( Petrovova ) then
16062: LD_EXP 41
16066: PPUSH
16067: CALL_OW 302
16071: IFFALSE 16085
// Say ( Petrovova , DStart-Ptr-2 ) ;
16073: LD_EXP 41
16077: PPUSH
16078: LD_STRING DStart-Ptr-2
16080: PPUSH
16081: CALL_OW 88
// InGameOff ;
16085: CALL_OW 9
// ChangeMissionObjectives ( MStart ) ;
16089: LD_STRING MStart
16091: PPUSH
16092: CALL_OW 337
// SaveForQuickRestart ;
16096: CALL_OW 22
// wait ( 0 0$10 ) ;
16100: LD_INT 350
16102: PPUSH
16103: CALL_OW 67
// if IsOK ( Petrosyan ) then
16107: LD_EXP 43
16111: PPUSH
16112: CALL_OW 302
16116: IFFALSE 16132
// Say ( Petrosyan , DMatPrediction-Pty-1 ) else
16118: LD_EXP 43
16122: PPUSH
16123: LD_STRING DMatPrediction-Pty-1
16125: PPUSH
16126: CALL_OW 88
16130: GO 16155
// if IsOK ( Dolgov ) then
16132: LD_EXP 45
16136: PPUSH
16137: CALL_OW 302
16141: IFFALSE 16155
// Say ( Dolgov , DMatPrediction-Dol-1 ) ;
16143: LD_EXP 45
16147: PPUSH
16148: LD_STRING DMatPrediction-Dol-1
16150: PPUSH
16151: CALL_OW 88
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16155: LD_EXP 43
16159: PPUSH
16160: CALL_OW 302
16164: PUSH
16165: LD_EXP 45
16169: PPUSH
16170: CALL_OW 302
16174: OR
16175: IFFALSE 16189
// Say ( Burlak , DMatPrediction-Bur-1 ) ;
16177: LD_EXP 39
16181: PPUSH
16182: LD_STRING DMatPrediction-Bur-1
16184: PPUSH
16185: CALL_OW 88
// if IsOK ( Petrosyan ) then
16189: LD_EXP 43
16193: PPUSH
16194: CALL_OW 302
16198: IFFALSE 16214
// Say ( Petrosyan , DMatPrediction-Pty-2 ) else
16200: LD_EXP 43
16204: PPUSH
16205: LD_STRING DMatPrediction-Pty-2
16207: PPUSH
16208: CALL_OW 88
16212: GO 16237
// if IsOK ( Dolgov ) then
16214: LD_EXP 45
16218: PPUSH
16219: CALL_OW 302
16223: IFFALSE 16237
// Say ( Dolgov , DMatPrediction-Dol-2 ) ;
16225: LD_EXP 45
16229: PPUSH
16230: LD_STRING DMatPrediction-Dol-2
16232: PPUSH
16233: CALL_OW 88
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16237: LD_EXP 43
16241: PPUSH
16242: CALL_OW 302
16246: PUSH
16247: LD_EXP 45
16251: PPUSH
16252: CALL_OW 302
16256: OR
16257: IFFALSE 16271
// Say ( Burlak , DMatPrediction-Bur-2 ) ;
16259: LD_EXP 39
16263: PPUSH
16264: LD_STRING DMatPrediction-Bur-2
16266: PPUSH
16267: CALL_OW 88
// if IsOK ( Petrosyan ) then
16271: LD_EXP 43
16275: PPUSH
16276: CALL_OW 302
16280: IFFALSE 16296
// Say ( Petrosyan , DMatPrediction-Pty-3 ) else
16282: LD_EXP 43
16286: PPUSH
16287: LD_STRING DMatPrediction-Pty-3
16289: PPUSH
16290: CALL_OW 88
16294: GO 16319
// if IsOK ( Dolgov ) then
16296: LD_EXP 45
16300: PPUSH
16301: CALL_OW 302
16305: IFFALSE 16319
// Say ( Dolgov , DMatPrediction-Dol-3 ) ;
16307: LD_EXP 45
16311: PPUSH
16312: LD_STRING DMatPrediction-Dol-3
16314: PPUSH
16315: CALL_OW 88
// ChangeMissionObjectives ( MPred ) ;
16319: LD_STRING MPred
16321: PPUSH
16322: CALL_OW 337
// end ;
16326: LD_VAR 0 1
16330: RET
// every 0 0$1 trigger not UnitFilter ( ovsyenkoBase , [ f_type , unit_human ] ) do
16331: LD_EXP 52
16335: PPUSH
16336: LD_INT 21
16338: PUSH
16339: LD_INT 1
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PPUSH
16346: CALL_OW 72
16350: NOT
16351: IFFALSE 16573
16353: GO 16355
16355: DISABLE
// begin DialogueOn ;
16356: CALL_OW 6
// Say ( Burlak , DOvsyenkoTaken-Bur-1 ) ;
16360: LD_EXP 39
16364: PPUSH
16365: LD_STRING DOvsyenkoTaken-Bur-1
16367: PPUSH
16368: CALL_OW 88
// SayRadio ( Platonov , DOvsyenkoTaken-Pla-1 ) ;
16372: LD_EXP 47
16376: PPUSH
16377: LD_STRING DOvsyenkoTaken-Pla-1
16379: PPUSH
16380: CALL_OW 94
// if IsOK ( Karamazov ) then
16384: LD_EXP 40
16388: PPUSH
16389: CALL_OW 302
16393: IFFALSE 16407
// Say ( Karamazov , DOvsyenkoTaken-Kar-1 ) ;
16395: LD_EXP 40
16399: PPUSH
16400: LD_STRING DOvsyenkoTaken-Kar-1
16402: PPUSH
16403: CALL_OW 88
// if IsOK ( Titov ) then
16407: LD_EXP 44
16411: PPUSH
16412: CALL_OW 302
16416: IFFALSE 16430
// Say ( Titov , DOvsyenkoTaken-Tit-1 ) ;
16418: LD_EXP 44
16422: PPUSH
16423: LD_STRING DOvsyenkoTaken-Tit-1
16425: PPUSH
16426: CALL_OW 88
// if IsOK ( Lipshchin ) and ( IsOK ( Karamazov ) or IsOK ( Titov ) ) then
16430: LD_EXP 46
16434: PPUSH
16435: CALL_OW 302
16439: PUSH
16440: LD_EXP 40
16444: PPUSH
16445: CALL_OW 302
16449: PUSH
16450: LD_EXP 44
16454: PPUSH
16455: CALL_OW 302
16459: OR
16460: AND
16461: IFFALSE 16498
// begin Say ( Lipshchin , DOvsyenkoTaken-Lip-1 ) ;
16463: LD_EXP 46
16467: PPUSH
16468: LD_STRING DOvsyenkoTaken-Lip-1
16470: PPUSH
16471: CALL_OW 88
// if IsOK ( Gleb ) then
16475: LD_EXP 42
16479: PPUSH
16480: CALL_OW 302
16484: IFFALSE 16498
// Say ( Gleb , DOvsyenkoTaken-Glb-1 ) ;
16486: LD_EXP 42
16490: PPUSH
16491: LD_STRING DOvsyenkoTaken-Glb-1
16493: PPUSH
16494: CALL_OW 88
// end ; DialogueOff ;
16498: CALL_OW 7
// ChangeMissionObjectives ( MOutCapture ) ;
16502: LD_STRING MOutCapture
16504: PPUSH
16505: CALL_OW 337
// ChangeMissionObjectives ( MAddMine ) ;
16509: LD_STRING MAddMine
16511: PPUSH
16512: CALL_OW 337
// claimOvsyenkoBase = true ;
16516: LD_ADDR_EXP 15
16520: PUSH
16521: LD_INT 1
16523: ST_TO_ADDR
// wait ( 1 1$10 ) ;
16524: LD_INT 2450
16526: PPUSH
16527: CALL_OW 67
// InitAIManager ( 1 , 1 , headAmBase , HeadAmericanBaseArea , HeadAmericanHealArea , false , HeadAmericanBaseArea , 6 , 2 , 4 , true , true ) ;
16531: LD_INT 1
16533: PPUSH
16534: LD_INT 1
16536: PPUSH
16537: LD_EXP 54
16541: PPUSH
16542: LD_INT 5
16544: PPUSH
16545: LD_INT 9
16547: PPUSH
16548: LD_INT 0
16550: PPUSH
16551: LD_INT 5
16553: PPUSH
16554: LD_INT 6
16556: PPUSH
16557: LD_INT 2
16559: PPUSH
16560: LD_INT 4
16562: PPUSH
16563: LD_INT 1
16565: PPUSH
16566: LD_INT 1
16568: PPUSH
16569: CALL 4640 0 12
// end ;
16573: END
// export function Dial_SibTechs ; begin
16574: LD_INT 0
16576: PPUSH
// dial_SibTechsBlocker = true ;
16577: LD_ADDR_EXP 9
16581: PUSH
16582: LD_INT 1
16584: ST_TO_ADDR
// DialogueOn ;
16585: CALL_OW 6
// if IsOK ( Petrosyan ) then
16589: LD_EXP 43
16593: PPUSH
16594: CALL_OW 302
16598: IFFALSE 16614
// Say ( Petrosyan , DSibResearch-Pty-1 ) else
16600: LD_EXP 43
16604: PPUSH
16605: LD_STRING DSibResearch-Pty-1
16607: PPUSH
16608: CALL_OW 88
16612: GO 16637
// if IsOK ( Dolgov ) then
16614: LD_EXP 45
16618: PPUSH
16619: CALL_OW 302
16623: IFFALSE 16637
// Say ( Dolgov , DSibResearch-Dol-1 ) ;
16625: LD_EXP 45
16629: PPUSH
16630: LD_STRING DSibResearch-Dol-1
16632: PPUSH
16633: CALL_OW 88
// Say ( Burlak , DSibResearch-Bur-1 ) ;
16637: LD_EXP 39
16641: PPUSH
16642: LD_STRING DSibResearch-Bur-1
16644: PPUSH
16645: CALL_OW 88
// SayRadio ( Platonov , DSibResearch-Pla-1 ) ;
16649: LD_EXP 47
16653: PPUSH
16654: LD_STRING DSibResearch-Pla-1
16656: PPUSH
16657: CALL_OW 94
// DialogueOff ;
16661: CALL_OW 7
// ChangeMissionObjectives ( MResearch ) ;
16665: LD_STRING MResearch
16667: PPUSH
16668: CALL_OW 337
// SetRestrict ( b_ext_siberium , 3 , true ) ;
16672: LD_INT 21
16674: PPUSH
16675: LD_INT 3
16677: PPUSH
16678: LD_INT 1
16680: PPUSH
16681: CALL_OW 324
// SetRestrict ( b_siberite_power , 3 , true ) ;
16685: LD_INT 28
16687: PPUSH
16688: LD_INT 3
16690: PPUSH
16691: LD_INT 1
16693: PPUSH
16694: CALL_OW 324
// SetRestrict ( b_lab_siberium , 3 , true ) ;
16698: LD_INT 11
16700: PPUSH
16701: LD_INT 3
16703: PPUSH
16704: LD_INT 1
16706: PPUSH
16707: CALL_OW 324
// SetRestrict ( b_lab_spacetime , 3 , true ) ;
16711: LD_INT 14
16713: PPUSH
16714: LD_INT 3
16716: PPUSH
16717: LD_INT 1
16719: PPUSH
16720: CALL_OW 324
// end ;
16724: LD_VAR 0 1
16728: RET
// export function Dial_ResearchMatPredictions ; begin
16729: LD_INT 0
16731: PPUSH
// ChangeMissionObjectives ( MOutResearch ) ;
16732: LD_STRING MOutResearch
16734: PPUSH
16735: CALL_OW 337
// DialogueOn ;
16739: CALL_OW 6
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16743: LD_EXP 43
16747: PPUSH
16748: CALL_OW 302
16752: PUSH
16753: LD_EXP 45
16757: PPUSH
16758: CALL_OW 302
16762: OR
16763: IFFALSE 16885
// begin if IsOK ( Petrosyan ) then
16765: LD_EXP 43
16769: PPUSH
16770: CALL_OW 302
16774: IFFALSE 16790
// Say ( Petrosyan , DNoMaterial-Pty-1 ) else
16776: LD_EXP 43
16780: PPUSH
16781: LD_STRING DNoMaterial-Pty-1
16783: PPUSH
16784: CALL_OW 88
16788: GO 16813
// if IsOK ( Dolgov ) then
16790: LD_EXP 45
16794: PPUSH
16795: CALL_OW 302
16799: IFFALSE 16813
// Say ( Dolgov , DNoMaterial-Dol-1 ) ;
16801: LD_EXP 45
16805: PPUSH
16806: LD_STRING DNoMaterial-Dol-1
16808: PPUSH
16809: CALL_OW 88
// Say ( Burlak , DNoMaterial-Bur-1 ) ;
16813: LD_EXP 39
16817: PPUSH
16818: LD_STRING DNoMaterial-Bur-1
16820: PPUSH
16821: CALL_OW 88
// if IsOK ( Petrosyan ) then
16825: LD_EXP 43
16829: PPUSH
16830: CALL_OW 302
16834: IFFALSE 16850
// Say ( Petrosyan , DNoMaterial-Pty-2 ) else
16836: LD_EXP 43
16840: PPUSH
16841: LD_STRING DNoMaterial-Pty-2
16843: PPUSH
16844: CALL_OW 88
16848: GO 16873
// if IsOK ( Dolgov ) then
16850: LD_EXP 45
16854: PPUSH
16855: CALL_OW 302
16859: IFFALSE 16873
// Say ( Dolgov , DNoMaterial-Dol-2 ) ;
16861: LD_EXP 45
16865: PPUSH
16866: LD_STRING DNoMaterial-Dol-2
16868: PPUSH
16869: CALL_OW 88
// Say ( Burlak , DNoMaterial-Bur-2 ) ;
16873: LD_EXP 39
16877: PPUSH
16878: LD_STRING DNoMaterial-Bur-2
16880: PPUSH
16881: CALL_OW 88
// end ; DialogueOff ;
16885: CALL_OW 7
// end ;
16889: LD_VAR 0 1
16893: RET
// every 0 0$1 trigger not dial_SibTechsBlocker and ( GetResourceVisibility ( 116 , 123 , 3 ) or GetResourceVisibility ( 72 , 86 , 3 ) ) do
16894: LD_EXP 9
16898: NOT
16899: PUSH
16900: LD_INT 116
16902: PPUSH
16903: LD_INT 123
16905: PPUSH
16906: LD_INT 3
16908: PPUSH
16909: CALL_OW 440
16913: PUSH
16914: LD_INT 72
16916: PPUSH
16917: LD_INT 86
16919: PPUSH
16920: LD_INT 3
16922: PPUSH
16923: CALL_OW 440
16927: OR
16928: AND
16929: IFFALSE 16938
16931: GO 16933
16933: DISABLE
// Dial_SibTechs ;
16934: CALL 16574 0 0
16938: END
// every 5 5$0 trigger claimOvsyenkoBase do
16939: LD_EXP 15
16943: IFFALSE 16967
16945: GO 16947
16947: DISABLE
// begin PrepareVsevolod ;
16948: CALL 2248 0 0
// ComAgressiveMove ( vsevolodTeam , 61 , 45 ) ;
16952: LD_EXP 50
16956: PPUSH
16957: LD_INT 61
16959: PPUSH
16960: LD_INT 45
16962: PPUSH
16963: CALL_OW 114
// end ;
16967: END
// every 0 0$1 trigger immortalVsevolodTeam do var unit ;
16968: LD_EXP 18
16972: IFFALSE 17010
16974: GO 16976
16976: DISABLE
16977: LD_INT 0
16979: PPUSH
// begin enable ;
16980: ENABLE
// for unit in vsevolodTeam do
16981: LD_ADDR_VAR 0 1
16985: PUSH
16986: LD_EXP 50
16990: PUSH
16991: FOR_IN
16992: IFFALSE 17008
// SetLives ( unit , 1000 ) ;
16994: LD_VAR 0 1
16998: PPUSH
16999: LD_INT 1000
17001: PPUSH
17002: CALL_OW 234
17006: GO 16991
17008: POP
17009: POP
// end ;
17010: PPOPN 1
17012: END
// every 0 0$1 trigger GetLives ( ter_bun1 ) <= 650 or GetLives ( ter_arm1 ) <= 650 do var belkovSavedIn02 , tmp , speaker ;
17013: LD_INT 170
17015: PPUSH
17016: CALL_OW 256
17020: PUSH
17021: LD_INT 650
17023: LESSEQUAL
17024: PUSH
17025: LD_INT 174
17027: PPUSH
17028: CALL_OW 256
17032: PUSH
17033: LD_INT 650
17035: LESSEQUAL
17036: OR
17037: IFFALSE 18170
17039: GO 17041
17041: DISABLE
17042: LD_INT 0
17044: PPUSH
17045: PPUSH
17046: PPUSH
// begin ComMoveXY ( UnitFilter ( terminalBase , [ f_type , unit_human ] ) , 35 , 58 ) ;
17047: LD_EXP 53
17051: PPUSH
17052: LD_INT 21
17054: PUSH
17055: LD_INT 1
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PPUSH
17062: CALL_OW 72
17066: PPUSH
17067: LD_INT 35
17069: PPUSH
17070: LD_INT 58
17072: PPUSH
17073: CALL_OW 111
// SetSide ( UnitFilter ( terminalBase , [ f_type , unit_building ] ) , 6 ) ;
17077: LD_EXP 53
17081: PPUSH
17082: LD_INT 21
17084: PUSH
17085: LD_INT 3
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: PPUSH
17092: CALL_OW 72
17096: PPUSH
17097: LD_INT 6
17099: PPUSH
17100: CALL_OW 235
// immortalVsevolodTeam = false ;
17104: LD_ADDR_EXP 18
17108: PUSH
17109: LD_INT 0
17111: ST_TO_ADDR
// ComEnterUnit ( [ Vsevolod , vsevolodTeam [ 2 ] ] , ter_arm1 ) ;
17112: LD_EXP 49
17116: PUSH
17117: LD_EXP 50
17121: PUSH
17122: LD_INT 2
17124: ARRAY
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PPUSH
17130: LD_INT 174
17132: PPUSH
17133: CALL_OW 120
// ComEnterUnit ( vsevolodTeam [ 3 ] , ter_bun1 ) ;
17137: LD_EXP 50
17141: PUSH
17142: LD_INT 3
17144: ARRAY
17145: PPUSH
17146: LD_INT 170
17148: PPUSH
17149: CALL_OW 120
// wait ( 0 0$5 ) ;
17153: LD_INT 175
17155: PPUSH
17156: CALL_OW 67
// DialogueOn ;
17160: CALL_OW 6
// if IsOK ( Dolgov ) then
17164: LD_EXP 45
17168: PPUSH
17169: CALL_OW 302
17173: IFFALSE 17187
// Say ( Dolgov , DVsevolod-Dol-1 ) ;
17175: LD_EXP 45
17179: PPUSH
17180: LD_STRING DVsevolod-Dol-1
17182: PPUSH
17183: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-1 ) ;
17187: LD_EXP 49
17191: PPUSH
17192: LD_STRING DVsevolod-Vse-1
17194: PPUSH
17195: CALL_OW 94
// if IsOK ( Gleb ) then
17199: LD_EXP 42
17203: PPUSH
17204: CALL_OW 302
17208: IFFALSE 17246
// begin Say ( Burlak , DVsevolod-Bur-1 ) ;
17210: LD_EXP 39
17214: PPUSH
17215: LD_STRING DVsevolod-Bur-1
17217: PPUSH
17218: CALL_OW 88
// Say ( Gleb , DVsevolod-Glb-1 ) ;
17222: LD_EXP 42
17226: PPUSH
17227: LD_STRING DVsevolod-Glb-1
17229: PPUSH
17230: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-2 ) ;
17234: LD_EXP 49
17238: PPUSH
17239: LD_STRING DVsevolod-Vse-2
17241: PPUSH
17242: CALL_OW 94
// end ; Say ( Burlak , DVsevolod-Bur-2 ) ;
17246: LD_EXP 39
17250: PPUSH
17251: LD_STRING DVsevolod-Bur-2
17253: PPUSH
17254: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-3 ) ;
17258: LD_EXP 49
17262: PPUSH
17263: LD_STRING DVsevolod-Vse-3
17265: PPUSH
17266: CALL_OW 94
// Say ( Burlak , DVsevolod-Bur-3 ) ;
17270: LD_EXP 39
17274: PPUSH
17275: LD_STRING DVsevolod-Bur-3
17277: PPUSH
17278: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-4 ) ;
17282: LD_EXP 49
17286: PPUSH
17287: LD_STRING DVsevolod-Vse-4
17289: PPUSH
17290: CALL_OW 94
// Say ( Burlak , DVsevolod-Bur-4 ) ;
17294: LD_EXP 39
17298: PPUSH
17299: LD_STRING DVsevolod-Bur-4
17301: PPUSH
17302: CALL_OW 88
// if IsOK ( Gleb ) then
17306: LD_EXP 42
17310: PPUSH
17311: CALL_OW 302
17315: IFFALSE 17343
// begin Say ( Gleb , DVsevolod-Glb-4 ) ;
17317: LD_EXP 42
17321: PPUSH
17322: LD_STRING DVsevolod-Glb-4
17324: PPUSH
17325: CALL_OW 88
// Say ( Burlak , DVsevolod-Bur-5 ) ;
17329: LD_EXP 39
17333: PPUSH
17334: LD_STRING DVsevolod-Bur-5
17336: PPUSH
17337: CALL_OW 88
// end else
17341: GO 17417
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-RSol1-5 ,  , false , true ) ;
17343: LD_INT 22
17345: PUSH
17346: LD_INT 3
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: PUSH
17353: LD_INT 21
17355: PUSH
17356: LD_INT 1
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: PUSH
17363: LD_INT 50
17365: PUSH
17366: EMPTY
17367: LIST
17368: PUSH
17369: LD_INT 26
17371: PUSH
17372: LD_INT 1
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: PUSH
17379: LD_INT 23
17381: PUSH
17382: LD_INT 3
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: PPUSH
17396: CALL_OW 69
17400: PPUSH
17401: LD_STRING DVsevolod-RSol1-5
17403: PPUSH
17404: LD_STRING 
17406: PPUSH
17407: LD_INT 0
17409: PPUSH
17410: LD_INT 1
17412: PPUSH
17413: CALL 11494 0 5
// Say ( Burlak , DVsevolod-Bur-6 ) ;
17417: LD_EXP 39
17421: PPUSH
17422: LD_STRING DVsevolod-Bur-6
17424: PPUSH
17425: CALL_OW 88
// CenterOnXY ( 59 , 40 ) ;
17429: LD_INT 59
17431: PPUSH
17432: LD_INT 40
17434: PPUSH
17435: CALL_OW 84
// RevealFogArea ( 3 , TerminalBaseArea ) ;
17439: LD_INT 3
17441: PPUSH
17442: LD_INT 4
17444: PPUSH
17445: CALL_OW 332
// if IsOK ( Dolgov ) then
17449: LD_EXP 45
17453: PPUSH
17454: CALL_OW 302
17458: IFFALSE 17474
// Say ( Dolgov , DVsevolod-Dol-6 ) else
17460: LD_EXP 45
17464: PPUSH
17465: LD_STRING DVsevolod-Dol-6
17467: PPUSH
17468: CALL_OW 88
17472: GO 17548
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-Dol-6 ,  , false , true ) ;
17474: LD_INT 22
17476: PUSH
17477: LD_INT 3
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: LD_INT 21
17486: PUSH
17487: LD_INT 1
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 50
17496: PUSH
17497: EMPTY
17498: LIST
17499: PUSH
17500: LD_INT 26
17502: PUSH
17503: LD_INT 1
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: LD_INT 23
17512: PUSH
17513: LD_INT 3
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: PPUSH
17527: CALL_OW 69
17531: PPUSH
17532: LD_STRING DVsevolod-Dol-6
17534: PPUSH
17535: LD_STRING 
17537: PPUSH
17538: LD_INT 0
17540: PPUSH
17541: LD_INT 1
17543: PPUSH
17544: CALL 11494 0 5
// Say ( Burlak , DVsevolod-Bur-7 ) ;
17548: LD_EXP 39
17552: PPUSH
17553: LD_STRING DVsevolod-Bur-7
17555: PPUSH
17556: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-7 ) ;
17560: LD_EXP 49
17564: PPUSH
17565: LD_STRING DVsevolod-Vse-7
17567: PPUSH
17568: CALL_OW 94
// DialogueOff ;
17572: CALL_OW 7
// ChangeMissionObjectives ( MVsevolod ) ;
17576: LD_STRING MVsevolod
17578: PPUSH
17579: CALL_OW 337
// enableVsevolodCounter = true ;
17583: LD_ADDR_EXP 22
17587: PUSH
17588: LD_INT 1
17590: ST_TO_ADDR
// canGoNorth = true ;
17591: LD_ADDR_EXP 21
17595: PUSH
17596: LD_INT 1
17598: ST_TO_ADDR
// PrepareSoldiersInBunkers ;
17599: CALL 3371 0 0
// wait ( 0 0$7 ) ;
17603: LD_INT 245
17605: PPUSH
17606: CALL_OW 67
// belkovSavedIn02 = TestCharacters ( 02_Belkov ) ;
17610: LD_ADDR_VAR 0 1
17614: PUSH
17615: LD_STRING 02_Belkov
17617: PPUSH
17618: CALL_OW 28
17622: ST_TO_ADDR
// DialogueOn ;
17623: CALL_OW 6
// if belkovSavedIn02 then
17627: LD_VAR 0 1
17631: IFFALSE 17832
// begin if IsOK ( Gleb ) then
17633: LD_EXP 42
17637: PPUSH
17638: CALL_OW 302
17642: IFFALSE 17656
// Say ( Gleb , DHelp1-Glb-1 ) ;
17644: LD_EXP 42
17648: PPUSH
17649: LD_STRING DHelp1-Glb-1
17651: PPUSH
17652: CALL_OW 88
// if IsOK ( Dolgov ) then
17656: LD_EXP 45
17660: PPUSH
17661: CALL_OW 302
17665: IFFALSE 17679
// Say ( Dolgov , DHelp1-Dol-1 ) ;
17667: LD_EXP 45
17671: PPUSH
17672: LD_STRING DHelp1-Dol-1
17674: PPUSH
17675: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Gleb , Dolgov , Titov ] ;
17679: LD_ADDR_VAR 0 2
17683: PUSH
17684: LD_INT 22
17686: PUSH
17687: LD_INT 3
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: PUSH
17694: LD_INT 21
17696: PUSH
17697: LD_INT 1
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PUSH
17704: LD_INT 50
17706: PUSH
17707: EMPTY
17708: LIST
17709: PUSH
17710: LD_INT 26
17712: PUSH
17713: LD_INT 1
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: PUSH
17720: LD_INT 23
17722: PUSH
17723: LD_INT 3
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: PPUSH
17737: CALL_OW 69
17741: PUSH
17742: LD_EXP 42
17746: PUSH
17747: LD_EXP 45
17751: PUSH
17752: LD_EXP 44
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: LIST
17761: DIFF
17762: ST_TO_ADDR
// DialogRandom ( tmp , DHelp1-RSol1-1 ,  , false , true ) ;
17763: LD_VAR 0 2
17767: PPUSH
17768: LD_STRING DHelp1-RSol1-1
17770: PPUSH
17771: LD_STRING 
17773: PPUSH
17774: LD_INT 0
17776: PPUSH
17777: LD_INT 1
17779: PPUSH
17780: CALL 11494 0 5
// if IsOK ( Titov ) then
17784: LD_EXP 44
17788: PPUSH
17789: CALL_OW 302
17793: IFFALSE 17807
// Say ( Titov , DHelp1-Tit-1 ) ;
17795: LD_EXP 44
17799: PPUSH
17800: LD_STRING DHelp1-Tit-1
17802: PPUSH
17803: CALL_OW 88
// if IsOK ( Gleb ) then
17807: LD_EXP 42
17811: PPUSH
17812: CALL_OW 302
17816: IFFALSE 17830
// Say ( Gleb , DHelp1-Glb-2 ) ;
17818: LD_EXP 42
17822: PPUSH
17823: LD_STRING DHelp1-Glb-2
17825: PPUSH
17826: CALL_OW 88
// end else
17830: GO 18043
// begin if IsOK ( Titov ) then
17832: LD_EXP 44
17836: PPUSH
17837: CALL_OW 302
17841: IFFALSE 17855
// Say ( Titov , DHelp2-Tit-1 ) ;
17843: LD_EXP 44
17847: PPUSH
17848: LD_STRING DHelp2-Tit-1
17850: PPUSH
17851: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Gleb , Titov ] ;
17855: LD_ADDR_VAR 0 2
17859: PUSH
17860: LD_INT 22
17862: PUSH
17863: LD_INT 3
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PUSH
17870: LD_INT 21
17872: PUSH
17873: LD_INT 1
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: LD_INT 50
17882: PUSH
17883: EMPTY
17884: LIST
17885: PUSH
17886: LD_INT 26
17888: PUSH
17889: LD_INT 1
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: LD_INT 23
17898: PUSH
17899: LD_INT 3
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: PPUSH
17913: CALL_OW 69
17917: PUSH
17918: LD_EXP 42
17922: PUSH
17923: LD_EXP 44
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: DIFF
17932: ST_TO_ADDR
// speaker = DialogRandom ( tmp , DHelp2-RSol1-1 ,  , false , true ) ;
17933: LD_ADDR_VAR 0 3
17937: PUSH
17938: LD_VAR 0 2
17942: PPUSH
17943: LD_STRING DHelp2-RSol1-1
17945: PPUSH
17946: LD_STRING 
17948: PPUSH
17949: LD_INT 0
17951: PPUSH
17952: LD_INT 1
17954: PPUSH
17955: CALL 11494 0 5
17959: ST_TO_ADDR
// if IsOK ( Gleb ) then
17960: LD_EXP 42
17964: PPUSH
17965: CALL_OW 302
17969: IFFALSE 17983
// Say ( Gleb , DHelp2-Glb-1 ) ;
17971: LD_EXP 42
17975: PPUSH
17976: LD_STRING DHelp2-Glb-1
17978: PPUSH
17979: CALL_OW 88
// tmp = tmp diff speaker ;
17983: LD_ADDR_VAR 0 2
17987: PUSH
17988: LD_VAR 0 2
17992: PUSH
17993: LD_VAR 0 3
17997: DIFF
17998: ST_TO_ADDR
// DialogRandom ( tmp , DHelp2-RSol2-1 ,  , false , true ) ;
17999: LD_VAR 0 2
18003: PPUSH
18004: LD_STRING DHelp2-RSol2-1
18006: PPUSH
18007: LD_STRING 
18009: PPUSH
18010: LD_INT 0
18012: PPUSH
18013: LD_INT 1
18015: PPUSH
18016: CALL 11494 0 5
// if IsOK ( Titov ) then
18020: LD_EXP 44
18024: PPUSH
18025: CALL_OW 302
18029: IFFALSE 18043
// Say ( Titov , DHelp2-Tit-2 ) ;
18031: LD_EXP 44
18035: PPUSH
18036: LD_STRING DHelp2-Tit-2
18038: PPUSH
18039: CALL_OW 88
// end ; Say ( Burlak , DHelp3-Bur-1 ) ;
18043: LD_EXP 39
18047: PPUSH
18048: LD_STRING DHelp3-Bur-1
18050: PPUSH
18051: CALL_OW 88
// if IsOK ( Lipshchin ) then
18055: LD_EXP 46
18059: PPUSH
18060: CALL_OW 302
18064: IFFALSE 18080
// Say ( Lipshchin , DHelp3-Lip-1 ) else
18066: LD_EXP 46
18070: PPUSH
18071: LD_STRING DHelp3-Lip-1
18073: PPUSH
18074: CALL_OW 88
18078: GO 18154
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-Dol-6 ,  , false , true ) ;
18080: LD_INT 22
18082: PUSH
18083: LD_INT 3
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PUSH
18090: LD_INT 21
18092: PUSH
18093: LD_INT 1
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: PUSH
18100: LD_INT 50
18102: PUSH
18103: EMPTY
18104: LIST
18105: PUSH
18106: LD_INT 26
18108: PUSH
18109: LD_INT 1
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 23
18118: PUSH
18119: LD_INT 3
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: PPUSH
18133: CALL_OW 69
18137: PPUSH
18138: LD_STRING DVsevolod-Dol-6
18140: PPUSH
18141: LD_STRING 
18143: PPUSH
18144: LD_INT 0
18146: PPUSH
18147: LD_INT 1
18149: PPUSH
18150: CALL 11494 0 5
// Say ( Burlak , DHelp3-Bur-2 ) ;
18154: LD_EXP 39
18158: PPUSH
18159: LD_STRING DHelp3-Bur-2
18161: PPUSH
18162: CALL_OW 88
// DialogueOff ;
18166: CALL_OW 7
// end ;
18170: PPOPN 3
18172: END
// every 0 0$1 trigger claimOvsyenkoBase and not FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] , [ f_type , unit_vehicle ] ] ] ) and FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
18173: LD_EXP 15
18177: PUSH
18178: LD_INT 3
18180: PPUSH
18181: LD_INT 22
18183: PUSH
18184: LD_INT 3
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 2
18193: PUSH
18194: LD_INT 21
18196: PUSH
18197: LD_INT 1
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 59
18206: PUSH
18207: EMPTY
18208: LIST
18209: PUSH
18210: LD_INT 21
18212: PUSH
18213: LD_INT 2
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: PPUSH
18230: CALL_OW 70
18234: NOT
18235: AND
18236: PUSH
18237: LD_INT 3
18239: PPUSH
18240: LD_INT 22
18242: PUSH
18243: LD_INT 1
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 2
18252: PUSH
18253: LD_INT 21
18255: PUSH
18256: LD_INT 1
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: LD_INT 21
18265: PUSH
18266: LD_INT 2
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: LIST
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PPUSH
18282: CALL_OW 70
18286: AND
18287: IFFALSE 18454
18289: GO 18291
18291: DISABLE
// begin lostAgainBase = true ;
18292: LD_ADDR_EXP 17
18296: PUSH
18297: LD_INT 1
18299: ST_TO_ADDR
// SetSide ( FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , 1 ) ;
18300: LD_INT 3
18302: PPUSH
18303: LD_INT 22
18305: PUSH
18306: LD_INT 3
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 21
18315: PUSH
18316: LD_INT 3
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PPUSH
18327: CALL_OW 70
18331: PPUSH
18332: LD_INT 1
18334: PPUSH
18335: CALL_OW 235
// if IsOK ( Gleb ) then
18339: LD_EXP 42
18343: PPUSH
18344: CALL_OW 302
18348: IFFALSE 18374
// begin Say ( Gleb , DOvsyenkoCaptured-Glb-1 ) ;
18350: LD_EXP 42
18354: PPUSH
18355: LD_STRING DOvsyenkoCaptured-Glb-1
18357: PPUSH
18358: CALL_OW 88
// Say ( Burlak , DOvsyenkoCaptured-Bur-1 ) ;
18362: LD_EXP 39
18366: PPUSH
18367: LD_STRING DOvsyenkoCaptured-Bur-1
18369: PPUSH
18370: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Gleb , DOvsyenkoCaptured-RSol1-1 ,  , false , true ) ;
18374: LD_INT 22
18376: PUSH
18377: LD_INT 3
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PUSH
18384: LD_INT 21
18386: PUSH
18387: LD_INT 1
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PUSH
18394: LD_INT 50
18396: PUSH
18397: EMPTY
18398: LIST
18399: PUSH
18400: LD_INT 26
18402: PUSH
18403: LD_INT 1
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 23
18412: PUSH
18413: LD_INT 3
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: PPUSH
18427: CALL_OW 69
18431: PUSH
18432: LD_EXP 42
18436: DIFF
18437: PPUSH
18438: LD_STRING DOvsyenkoCaptured-RSol1-1
18440: PPUSH
18441: LD_STRING 
18443: PPUSH
18444: LD_INT 0
18446: PPUSH
18447: LD_INT 1
18449: PPUSH
18450: CALL 11494 0 5
// end ;
18454: END
// every 0 0$1 trigger FilterUnitsInArea ( TrapArea , [ [ f_side , 3 ] , [ f_ok ] ] ) do
18455: LD_INT 12
18457: PPUSH
18458: LD_INT 22
18460: PUSH
18461: LD_INT 3
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 50
18470: PUSH
18471: EMPTY
18472: LIST
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PPUSH
18478: CALL_OW 70
18482: IFFALSE 18491
18484: GO 18486
18486: DISABLE
// PrepareTrap ;
18487: CALL 3207 0 0
18491: END
// every 0 0$1 trigger not dial_TrapDialogBlocker do var tmp , speaker , unit ;
18492: LD_EXP 11
18496: NOT
18497: IFFALSE 18715
18499: GO 18501
18501: DISABLE
18502: LD_INT 0
18504: PPUSH
18505: PPUSH
18506: PPUSH
// begin enable ;
18507: ENABLE
// for unit in trapTeam do
18508: LD_ADDR_VAR 0 3
18512: PUSH
18513: LD_EXP 55
18517: PUSH
18518: FOR_IN
18519: IFFALSE 18713
// if See ( 3 , unit ) then
18521: LD_INT 3
18523: PPUSH
18524: LD_VAR 0 3
18528: PPUSH
18529: CALL_OW 292
18533: IFFALSE 18711
// begin dial_TrapDialogBlocker = true ;
18535: LD_ADDR_EXP 11
18539: PUSH
18540: LD_INT 1
18542: ST_TO_ADDR
// DialogueOn ;
18543: CALL_OW 6
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Gleb ;
18547: LD_ADDR_VAR 0 1
18551: PUSH
18552: LD_INT 22
18554: PUSH
18555: LD_INT 3
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 21
18564: PUSH
18565: LD_INT 1
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: LD_INT 50
18574: PUSH
18575: EMPTY
18576: LIST
18577: PUSH
18578: LD_INT 26
18580: PUSH
18581: LD_INT 1
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 23
18590: PUSH
18591: LD_INT 3
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: PPUSH
18605: CALL_OW 69
18609: PUSH
18610: LD_EXP 42
18614: DIFF
18615: ST_TO_ADDR
// speaker = DialogRandom ( tmp , DPartyAttacked-RSol1-1 ,  , false , true ) ;
18616: LD_ADDR_VAR 0 2
18620: PUSH
18621: LD_VAR 0 1
18625: PPUSH
18626: LD_STRING DPartyAttacked-RSol1-1
18628: PPUSH
18629: LD_STRING 
18631: PPUSH
18632: LD_INT 0
18634: PPUSH
18635: LD_INT 1
18637: PPUSH
18638: CALL 11494 0 5
18642: ST_TO_ADDR
// tmp = tmp diff speaker ;
18643: LD_ADDR_VAR 0 1
18647: PUSH
18648: LD_VAR 0 1
18652: PUSH
18653: LD_VAR 0 2
18657: DIFF
18658: ST_TO_ADDR
// if IsOK ( Gleb ) then
18659: LD_EXP 42
18663: PPUSH
18664: CALL_OW 302
18668: IFFALSE 18682
// Say ( Gleb , DPartyAttacked-Glb-1 ) ;
18670: LD_EXP 42
18674: PPUSH
18675: LD_STRING DPartyAttacked-Glb-1
18677: PPUSH
18678: CALL_OW 88
// DialogRandom ( tmp , DPartyAttacked-RSol1-2 ,  , false , true ) ;
18682: LD_VAR 0 1
18686: PPUSH
18687: LD_STRING DPartyAttacked-RSol1-2
18689: PPUSH
18690: LD_STRING 
18692: PPUSH
18693: LD_INT 0
18695: PPUSH
18696: LD_INT 1
18698: PPUSH
18699: CALL 11494 0 5
// DialogueOff ;
18703: CALL_OW 7
// exit ;
18707: POP
18708: POP
18709: GO 18715
// end ;
18711: GO 18518
18713: POP
18714: POP
// end ;
18715: PPOPN 3
18717: END
// every 0 0$1 trigger not savedVsevolod and IsOK ( Vsevolod ) and FilterUnitsInArea ( TerminalBaseArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ [ f_type , unit_human ] , [ f_nation , nation_russian ] ] , [ f_type , unit_vehicle ] ] ] ) do var nearUnit , unit ;
18718: LD_EXP 19
18722: NOT
18723: PUSH
18724: LD_EXP 49
18728: PPUSH
18729: CALL_OW 302
18733: AND
18734: PUSH
18735: LD_INT 4
18737: PPUSH
18738: LD_INT 22
18740: PUSH
18741: LD_INT 3
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 50
18750: PUSH
18751: EMPTY
18752: LIST
18753: PUSH
18754: LD_INT 2
18756: PUSH
18757: LD_INT 21
18759: PUSH
18760: LD_INT 1
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: LD_INT 23
18769: PUSH
18770: LD_INT 3
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PUSH
18781: LD_INT 21
18783: PUSH
18784: LD_INT 2
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: LIST
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: LIST
18800: PPUSH
18801: CALL_OW 70
18805: AND
18806: IFFALSE 19401
18808: GO 18810
18810: DISABLE
18811: LD_INT 0
18813: PPUSH
18814: PPUSH
// begin savedVsevolod = true ;
18815: LD_ADDR_EXP 19
18819: PUSH
18820: LD_INT 1
18822: ST_TO_ADDR
// ChangeMissionObjectives ( MVsevolodOut ) ;
18823: LD_STRING MVsevolodOut
18825: PPUSH
18826: CALL_OW 337
// unit = FilterUnitsInArea ( TerminalBaseArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ [ f_type , unit_human ] , [ f_nation , nation_russian ] ] , [ f_type , unit_vehicle ] ] ] ) [ 1 ] ;
18830: LD_ADDR_VAR 0 2
18834: PUSH
18835: LD_INT 4
18837: PPUSH
18838: LD_INT 22
18840: PUSH
18841: LD_INT 3
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 50
18850: PUSH
18851: EMPTY
18852: LIST
18853: PUSH
18854: LD_INT 2
18856: PUSH
18857: LD_INT 21
18859: PUSH
18860: LD_INT 1
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 23
18869: PUSH
18870: LD_INT 3
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PUSH
18881: LD_INT 21
18883: PUSH
18884: LD_INT 2
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: LIST
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: LIST
18900: PPUSH
18901: CALL_OW 70
18905: PUSH
18906: LD_INT 1
18908: ARRAY
18909: ST_TO_ADDR
// if GetType ( unit ) = unit_vehicle then
18910: LD_VAR 0 2
18914: PPUSH
18915: CALL_OW 247
18919: PUSH
18920: LD_INT 2
18922: EQUAL
18923: IFFALSE 18944
// unit = UnitsInside ( unit ) [ 1 ] ;
18925: LD_ADDR_VAR 0 2
18929: PUSH
18930: LD_VAR 0 2
18934: PPUSH
18935: CALL_OW 313
18939: PUSH
18940: LD_INT 1
18942: ARRAY
18943: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
18944: LD_INT 22
18946: PUSH
18947: LD_INT 6
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PPUSH
18954: CALL_OW 69
18958: PPUSH
18959: LD_INT 3
18961: PPUSH
18962: CALL_OW 235
// if not unit = Burlak then
18966: LD_VAR 0 2
18970: PUSH
18971: LD_EXP 39
18975: EQUAL
18976: NOT
18977: IFFALSE 19118
// begin vsevolodWaitGorky = true ;
18979: LD_ADDR_EXP 20
18983: PUSH
18984: LD_INT 1
18986: ST_TO_ADDR
// DialogueOn ;
18987: CALL_OW 6
// Say ( Vsevolod , DOtherMeetVsev-Vse-1 ) ;
18991: LD_EXP 49
18995: PPUSH
18996: LD_STRING DOtherMeetVsev-Vse-1
18998: PPUSH
18999: CALL_OW 88
// if GetSex ( unit ) = sex_female then
19003: LD_VAR 0 2
19007: PPUSH
19008: CALL_OW 258
19012: PUSH
19013: LD_INT 2
19015: EQUAL
19016: IFFALSE 19100
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Gleb , DOtherMeetVsev-RSol1-1 ,  , false , true ) else
19018: LD_INT 22
19020: PUSH
19021: LD_INT 3
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 21
19030: PUSH
19031: LD_INT 1
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 50
19040: PUSH
19041: EMPTY
19042: LIST
19043: PUSH
19044: LD_INT 26
19046: PUSH
19047: LD_INT 1
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: LD_INT 23
19056: PUSH
19057: LD_INT 3
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: PPUSH
19071: CALL_OW 69
19075: PUSH
19076: LD_EXP 42
19080: DIFF
19081: PPUSH
19082: LD_STRING DOtherMeetVsev-RSol1-1
19084: PPUSH
19085: LD_STRING 
19087: PPUSH
19088: LD_INT 0
19090: PPUSH
19091: LD_INT 1
19093: PPUSH
19094: CALL 11494 0 5
19098: GO 19112
// Say ( unit , DOtherMeetVsev-RSol1-1 ) ;
19100: LD_VAR 0 2
19104: PPUSH
19105: LD_STRING DOtherMeetVsev-RSol1-1
19107: PPUSH
19108: CALL_OW 88
// DialogueOff ;
19112: CALL_OW 7
// end else
19116: GO 19401
// begin DialogueOn ;
19118: CALL_OW 6
// Say ( Vsevolod , DMeetVsev-Vse-1 ) ;
19122: LD_EXP 49
19126: PPUSH
19127: LD_STRING DMeetVsev-Vse-1
19129: PPUSH
19130: CALL_OW 88
// Say ( Burlak , DMeetVsev-Bur-1 ) ;
19134: LD_EXP 39
19138: PPUSH
19139: LD_STRING DMeetVsev-Bur-1
19141: PPUSH
19142: CALL_OW 88
// if lostAgainBase then
19146: LD_EXP 17
19150: IFFALSE 19190
// begin Say ( Vsevolod , DMeetVsev2-Vse-1 ) ;
19152: LD_EXP 49
19156: PPUSH
19157: LD_STRING DMeetVsev2-Vse-1
19159: PPUSH
19160: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-1 ) ;
19164: LD_EXP 39
19168: PPUSH
19169: LD_STRING DMeetVsev2-Bur-1
19171: PPUSH
19172: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-2 ) ;
19176: LD_EXP 49
19180: PPUSH
19181: LD_STRING DMeetVsev2-Vse-2
19183: PPUSH
19184: CALL_OW 88
// end else
19188: GO 19226
// begin Say ( Vsevolod , DMeetVsev2-Vse-2a ) ;
19190: LD_EXP 49
19194: PPUSH
19195: LD_STRING DMeetVsev2-Vse-2a
19197: PPUSH
19198: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-2 ) ;
19202: LD_EXP 39
19206: PPUSH
19207: LD_STRING DMeetVsev2-Bur-2
19209: PPUSH
19210: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-3 ) ;
19214: LD_EXP 49
19218: PPUSH
19219: LD_STRING DMeetVsev2-Vse-3
19221: PPUSH
19222: CALL_OW 88
// end ; Say ( Burlak , DMeetVsev3-Bur-1 ) ;
19226: LD_EXP 39
19230: PPUSH
19231: LD_STRING DMeetVsev3-Bur-1
19233: PPUSH
19234: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-1 ) ;
19238: LD_EXP 49
19242: PPUSH
19243: LD_STRING DMeetVsev3-Vse-1
19245: PPUSH
19246: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-2 ) ;
19250: LD_EXP 39
19254: PPUSH
19255: LD_STRING DMeetVsev3-Bur-2
19257: PPUSH
19258: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-2 ) ;
19262: LD_EXP 49
19266: PPUSH
19267: LD_STRING DMeetVsev3-Vse-2
19269: PPUSH
19270: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-3 ) ;
19274: LD_EXP 39
19278: PPUSH
19279: LD_STRING DMeetVsev3-Bur-3
19281: PPUSH
19282: CALL_OW 88
// if stevensStatus = 0 then
19286: LD_EXP 4
19290: PUSH
19291: LD_INT 0
19293: EQUAL
19294: IFFALSE 19308
// Say ( Burlak , DMeetVsev4-Bur-1 ) ;
19296: LD_EXP 39
19300: PPUSH
19301: LD_STRING DMeetVsev4-Bur-1
19303: PPUSH
19304: CALL_OW 88
// Say ( Burlak , DMeetVsev5-Bur-1 ) ;
19308: LD_EXP 39
19312: PPUSH
19313: LD_STRING DMeetVsev5-Bur-1
19315: PPUSH
19316: CALL_OW 88
// Say ( Vsevolod , DMeetVsev5-Vse-1 ) ;
19320: LD_EXP 49
19324: PPUSH
19325: LD_STRING DMeetVsev5-Vse-1
19327: PPUSH
19328: CALL_OW 88
// Say ( Burlak , DMeetVsev6-Bur-1 ) ;
19332: LD_EXP 39
19336: PPUSH
19337: LD_STRING DMeetVsev6-Bur-1
19339: PPUSH
19340: CALL_OW 88
// Say ( Vsevolod , DMeetVsev6-Vse-1 ) ;
19344: LD_EXP 49
19348: PPUSH
19349: LD_STRING DMeetVsev6-Vse-1
19351: PPUSH
19352: CALL_OW 88
// DialogueOff ;
19356: CALL_OW 7
// wait ( 0 0$20 ) ;
19360: LD_INT 700
19362: PPUSH
19363: CALL_OW 67
// PrepareConvoy ;
19367: CALL 3415 0 0
// ComMoveXY ( convoyTeam , 57 , 40 ) ;
19371: LD_EXP 56
19375: PPUSH
19376: LD_INT 57
19378: PPUSH
19379: LD_INT 40
19381: PPUSH
19382: CALL_OW 111
// AddComMoveXY ( convoyTeam , 37 , 59 ) ;
19386: LD_EXP 56
19390: PPUSH
19391: LD_INT 37
19393: PPUSH
19394: LD_INT 59
19396: PPUSH
19397: CALL_OW 171
// end ; end ;
19401: PPOPN 2
19403: END
// every 0 0$1 trigger vsevolodWaitGorky and GetDistUnits ( Vsevolod , Burlak ) <= 7 do
19404: LD_EXP 20
19408: PUSH
19409: LD_EXP 49
19413: PPUSH
19414: LD_EXP 39
19418: PPUSH
19419: CALL_OW 296
19423: PUSH
19424: LD_INT 7
19426: LESSEQUAL
19427: AND
19428: IFFALSE 19724
19430: GO 19432
19432: DISABLE
// begin vsevolodWaitGorky = false ;
19433: LD_ADDR_EXP 20
19437: PUSH
19438: LD_INT 0
19440: ST_TO_ADDR
// DialogueOn ;
19441: CALL_OW 6
// Say ( Vsevolod , DMeetVsev-Vse-1 ) ;
19445: LD_EXP 49
19449: PPUSH
19450: LD_STRING DMeetVsev-Vse-1
19452: PPUSH
19453: CALL_OW 88
// Say ( Burlak , DMeetVsev-Bur-1 ) ;
19457: LD_EXP 39
19461: PPUSH
19462: LD_STRING DMeetVsev-Bur-1
19464: PPUSH
19465: CALL_OW 88
// if lostAgainBase then
19469: LD_EXP 17
19473: IFFALSE 19513
// begin Say ( Vsevolod , DMeetVsev2-Vse-1 ) ;
19475: LD_EXP 49
19479: PPUSH
19480: LD_STRING DMeetVsev2-Vse-1
19482: PPUSH
19483: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-1 ) ;
19487: LD_EXP 39
19491: PPUSH
19492: LD_STRING DMeetVsev2-Bur-1
19494: PPUSH
19495: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-2 ) ;
19499: LD_EXP 49
19503: PPUSH
19504: LD_STRING DMeetVsev2-Vse-2
19506: PPUSH
19507: CALL_OW 88
// end else
19511: GO 19549
// begin Say ( Vsevolod , DMeetVsev2-Vse-2a ) ;
19513: LD_EXP 49
19517: PPUSH
19518: LD_STRING DMeetVsev2-Vse-2a
19520: PPUSH
19521: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-2 ) ;
19525: LD_EXP 39
19529: PPUSH
19530: LD_STRING DMeetVsev2-Bur-2
19532: PPUSH
19533: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-3 ) ;
19537: LD_EXP 49
19541: PPUSH
19542: LD_STRING DMeetVsev2-Vse-3
19544: PPUSH
19545: CALL_OW 88
// end ; Say ( Burlak , DMeetVsev3-Bur-1 ) ;
19549: LD_EXP 39
19553: PPUSH
19554: LD_STRING DMeetVsev3-Bur-1
19556: PPUSH
19557: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-1 ) ;
19561: LD_EXP 49
19565: PPUSH
19566: LD_STRING DMeetVsev3-Vse-1
19568: PPUSH
19569: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-2 ) ;
19573: LD_EXP 39
19577: PPUSH
19578: LD_STRING DMeetVsev3-Bur-2
19580: PPUSH
19581: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-2 ) ;
19585: LD_EXP 49
19589: PPUSH
19590: LD_STRING DMeetVsev3-Vse-2
19592: PPUSH
19593: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-3 ) ;
19597: LD_EXP 39
19601: PPUSH
19602: LD_STRING DMeetVsev3-Bur-3
19604: PPUSH
19605: CALL_OW 88
// if stevensStatus = 0 then
19609: LD_EXP 4
19613: PUSH
19614: LD_INT 0
19616: EQUAL
19617: IFFALSE 19631
// Say ( Burlak , DMeetVsev4-Bur-1 ) ;
19619: LD_EXP 39
19623: PPUSH
19624: LD_STRING DMeetVsev4-Bur-1
19626: PPUSH
19627: CALL_OW 88
// Say ( Burlak , DMeetVsev5-Bur-1 ) ;
19631: LD_EXP 39
19635: PPUSH
19636: LD_STRING DMeetVsev5-Bur-1
19638: PPUSH
19639: CALL_OW 88
// Say ( Vsevolod , DMeetVsev5-Vse-1 ) ;
19643: LD_EXP 49
19647: PPUSH
19648: LD_STRING DMeetVsev5-Vse-1
19650: PPUSH
19651: CALL_OW 88
// Say ( Vsevolod , DMeetVsev6-Vse-1 ) ;
19655: LD_EXP 49
19659: PPUSH
19660: LD_STRING DMeetVsev6-Vse-1
19662: PPUSH
19663: CALL_OW 88
// Say ( Burlak , DMeetVsev6-Bur-1 ) ;
19667: LD_EXP 39
19671: PPUSH
19672: LD_STRING DMeetVsev6-Bur-1
19674: PPUSH
19675: CALL_OW 88
// DialogueOff ;
19679: CALL_OW 7
// wait ( 0 0$20 ) ;
19683: LD_INT 700
19685: PPUSH
19686: CALL_OW 67
// PrepareConvoy ;
19690: CALL 3415 0 0
// ComMoveXY ( convoyTeam , 57 , 40 ) ;
19694: LD_EXP 56
19698: PPUSH
19699: LD_INT 57
19701: PPUSH
19702: LD_INT 40
19704: PPUSH
19705: CALL_OW 111
// AddComMoveXY ( convoyTeam , 37 , 59 ) ;
19709: LD_EXP 56
19713: PPUSH
19714: LD_INT 37
19716: PPUSH
19717: LD_INT 59
19719: PPUSH
19720: CALL_OW 171
// end ;
19724: END
// every 0 0$1 trigger not dial_ConvoyDialogBlocker do var tmp , speaker , unit ;
19725: LD_EXP 12
19729: NOT
19730: IFFALSE 19860
19732: GO 19734
19734: DISABLE
19735: LD_INT 0
19737: PPUSH
19738: PPUSH
19739: PPUSH
// begin enable ;
19740: ENABLE
// for unit in convoyTeam do
19741: LD_ADDR_VAR 0 3
19745: PUSH
19746: LD_EXP 56
19750: PUSH
19751: FOR_IN
19752: IFFALSE 19858
// if See ( 3 , unit ) and not IsInArea ( unit , InsideBaseArea ) then
19754: LD_INT 3
19756: PPUSH
19757: LD_VAR 0 3
19761: PPUSH
19762: CALL_OW 292
19766: PUSH
19767: LD_VAR 0 3
19771: PPUSH
19772: LD_INT 19
19774: PPUSH
19775: CALL_OW 308
19779: NOT
19780: AND
19781: IFFALSE 19856
// begin dial_ConvoyDialogBlocker = true ;
19783: LD_ADDR_EXP 12
19787: PUSH
19788: LD_INT 1
19790: ST_TO_ADDR
// DialogueOn ;
19791: CALL_OW 6
// speaker = UnitFilter ( convoyTeam , [ f_type , unit_human ] ) [ 1 ] ;
19795: LD_ADDR_VAR 0 2
19799: PUSH
19800: LD_EXP 56
19804: PPUSH
19805: LD_INT 21
19807: PUSH
19808: LD_INT 1
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PPUSH
19815: CALL_OW 72
19819: PUSH
19820: LD_INT 1
19822: ARRAY
19823: ST_TO_ADDR
// Say ( speaker , DTruck-Sol1-1 ) ;
19824: LD_VAR 0 2
19828: PPUSH
19829: LD_STRING DTruck-Sol1-1
19831: PPUSH
19832: CALL_OW 88
// Say ( Burlak , DTruck-Bur-1 ) ;
19836: LD_EXP 39
19840: PPUSH
19841: LD_STRING DTruck-Bur-1
19843: PPUSH
19844: CALL_OW 88
// DialogueOff ;
19848: CALL_OW 7
// exit ;
19852: POP
19853: POP
19854: GO 19860
// end ;
19856: GO 19751
19858: POP
19859: POP
// end ;
19860: PPOPN 3
19862: END
// every 0 0$1 trigger timeToAttack >= vsevolodSaveTime do
19863: LD_EXP 26
19867: PUSH
19868: LD_EXP 38
19872: GREATEREQUAL
19873: IFFALSE 19912
19875: GO 19877
19877: DISABLE
// begin PrepareAttack ;
19878: CALL 3596 0 0
// ComAgressiveMove ( attackTeam , 60 , 41 ) ;
19882: LD_EXP 57
19886: PPUSH
19887: LD_INT 60
19889: PPUSH
19890: LD_INT 41
19892: PPUSH
19893: CALL_OW 114
// AddComAgressiveMove ( attackTeam , 107 , 125 ) ;
19897: LD_EXP 57
19901: PPUSH
19902: LD_INT 107
19904: PPUSH
19905: LD_INT 125
19907: PPUSH
19908: CALL_OW 174
// end ;
19912: END
// every 1 trigger not savedVsevolod and GetLives ( Vsevolod ) <= 500 do
19913: LD_EXP 19
19917: NOT
19918: PUSH
19919: LD_EXP 49
19923: PPUSH
19924: CALL_OW 256
19928: PUSH
19929: LD_INT 500
19931: LESSEQUAL
19932: AND
19933: IFFALSE 19958
19935: GO 19937
19937: DISABLE
// begin DialogueOn ;
19938: CALL_OW 6
// SayRadio ( Vsevolod , DDieVsev2-Vse-1 ) ;
19942: LD_EXP 49
19946: PPUSH
19947: LD_STRING DDieVsev2-Vse-1
19949: PPUSH
19950: CALL_OW 94
// DialogueOff ;
19954: CALL_OW 7
// end ;
19958: END
// export function Dial_ResearchTauField ; var speaker , sci , randomTalkDialog ; begin
19959: LD_INT 0
19961: PPUSH
19962: PPUSH
19963: PPUSH
19964: PPUSH
// if IsOK ( Petrosyan ) then
19965: LD_EXP 43
19969: PPUSH
19970: CALL_OW 302
19974: IFFALSE 19990
// Say ( Petrosyan , DStasis-Pty-1 ) else
19976: LD_EXP 43
19980: PPUSH
19981: LD_STRING DStasis-Pty-1
19983: PPUSH
19984: CALL_OW 88
19988: GO 20212
// if IsOK ( Dolgov ) then
19990: LD_EXP 45
19994: PPUSH
19995: CALL_OW 302
19999: IFFALSE 20015
// Say ( Dolgov , DStasis-Dol-1 ) else
20001: LD_EXP 45
20005: PPUSH
20006: LD_STRING DStasis-Dol-1
20008: PPUSH
20009: CALL_OW 88
20013: GO 20212
// begin sci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] , [ f_nation , nation_russian ] ] ) diff Burlak ;
20015: LD_ADDR_VAR 0 3
20019: PUSH
20020: LD_INT 22
20022: PUSH
20023: LD_INT 3
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: LD_INT 21
20032: PUSH
20033: LD_INT 1
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: LD_INT 50
20042: PUSH
20043: EMPTY
20044: LIST
20045: PUSH
20046: LD_INT 26
20048: PUSH
20049: LD_INT 1
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PUSH
20056: LD_INT 25
20058: PUSH
20059: LD_INT 4
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PUSH
20066: LD_INT 23
20068: PUSH
20069: LD_INT 3
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: PPUSH
20084: CALL_OW 69
20088: PUSH
20089: LD_EXP 39
20093: DIFF
20094: ST_TO_ADDR
// if not sci then
20095: LD_VAR 0 3
20099: NOT
20100: IFFALSE 20171
// sci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Burlak ;
20102: LD_ADDR_VAR 0 3
20106: PUSH
20107: LD_INT 22
20109: PUSH
20110: LD_INT 3
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 21
20119: PUSH
20120: LD_INT 1
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 50
20129: PUSH
20130: EMPTY
20131: LIST
20132: PUSH
20133: LD_INT 26
20135: PUSH
20136: LD_INT 1
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 23
20145: PUSH
20146: LD_INT 3
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: PPUSH
20160: CALL_OW 69
20164: PUSH
20165: LD_EXP 39
20169: DIFF
20170: ST_TO_ADDR
// if sci then
20171: LD_VAR 0 3
20175: IFFALSE 20212
// begin speaker = DialogRandom ( sci , DStasis-RSol1-1 ,  , false , true ) ;
20177: LD_ADDR_VAR 0 2
20181: PUSH
20182: LD_VAR 0 3
20186: PPUSH
20187: LD_STRING DStasis-RSol1-1
20189: PPUSH
20190: LD_STRING 
20192: PPUSH
20193: LD_INT 0
20195: PPUSH
20196: LD_INT 1
20198: PPUSH
20199: CALL 11494 0 5
20203: ST_TO_ADDR
// randomTalkDialog = true ;
20204: LD_ADDR_VAR 0 4
20208: PUSH
20209: LD_INT 1
20211: ST_TO_ADDR
// end ; end ; if IsOK ( Petrosyan ) or IsOK ( Dolgov ) or randomTalkDialog then
20212: LD_EXP 43
20216: PPUSH
20217: CALL_OW 302
20221: PUSH
20222: LD_EXP 45
20226: PPUSH
20227: CALL_OW 302
20231: OR
20232: PUSH
20233: LD_VAR 0 4
20237: OR
20238: IFFALSE 20335
// begin Say ( Burlak , DStasis-Bur-1 ) ;
20240: LD_EXP 39
20244: PPUSH
20245: LD_STRING DStasis-Bur-1
20247: PPUSH
20248: CALL_OW 88
// if IsOK ( Petrosyan ) then
20252: LD_EXP 43
20256: PPUSH
20257: CALL_OW 302
20261: IFFALSE 20277
// Say ( Petrosyan , DStasis-Pty-2 ) else
20263: LD_EXP 43
20267: PPUSH
20268: LD_STRING DStasis-Pty-2
20270: PPUSH
20271: CALL_OW 88
20275: GO 20323
// if IsOK ( Dolgov ) then
20277: LD_EXP 45
20281: PPUSH
20282: CALL_OW 302
20286: IFFALSE 20302
// Say ( Dolgov , DStasis-Dol-2 ) else
20288: LD_EXP 45
20292: PPUSH
20293: LD_STRING DStasis-Dol-2
20295: PPUSH
20296: CALL_OW 88
20300: GO 20323
// DialogRandom ( speaker , DStasis-RSol1-2 ,  , false , true ) ;
20302: LD_VAR 0 2
20306: PPUSH
20307: LD_STRING DStasis-RSol1-2
20309: PPUSH
20310: LD_STRING 
20312: PPUSH
20313: LD_INT 0
20315: PPUSH
20316: LD_INT 1
20318: PPUSH
20319: CALL 11494 0 5
// Say ( Burlak , DStasis-Bur-2 ) ;
20323: LD_EXP 39
20327: PPUSH
20328: LD_STRING DStasis-Bur-2
20330: PPUSH
20331: CALL_OW 88
// end ; if GetTech ( tech_SibEng , 3 ) = state_researched then
20335: LD_INT 22
20337: PPUSH
20338: LD_INT 3
20340: PPUSH
20341: CALL_OW 321
20345: PUSH
20346: LD_INT 2
20348: EQUAL
20349: IFFALSE 20358
// ChangeMissionObjectives ( MOutResearch ) ;
20351: LD_STRING MOutResearch
20353: PPUSH
20354: CALL_OW 337
// end ;
20358: LD_VAR 0 1
20362: RET
// every 0 0$20 trigger GetTech ( tech_SibEng , 3 ) = state_researched and GetTech ( tech_TauField , 3 ) = state_researched and not dial_EndMissionDialogBlocker do var depots , depot , sibCounter ;
20363: LD_INT 22
20365: PPUSH
20366: LD_INT 3
20368: PPUSH
20369: CALL_OW 321
20373: PUSH
20374: LD_INT 2
20376: EQUAL
20377: PUSH
20378: LD_INT 30
20380: PPUSH
20381: LD_INT 3
20383: PPUSH
20384: CALL_OW 321
20388: PUSH
20389: LD_INT 2
20391: EQUAL
20392: AND
20393: PUSH
20394: LD_EXP 14
20398: NOT
20399: AND
20400: IFFALSE 20729
20402: GO 20404
20404: DISABLE
20405: LD_INT 0
20407: PPUSH
20408: PPUSH
20409: PPUSH
// begin enable ;
20410: ENABLE
// depots = FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20411: LD_ADDR_VAR 0 1
20415: PUSH
20416: LD_INT 22
20418: PUSH
20419: LD_INT 3
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 50
20428: PUSH
20429: EMPTY
20430: LIST
20431: PUSH
20432: LD_INT 21
20434: PUSH
20435: LD_INT 3
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 2
20444: PUSH
20445: LD_INT 30
20447: PUSH
20448: LD_INT 0
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 30
20457: PUSH
20458: LD_INT 1
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: LIST
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: PPUSH
20476: CALL_OW 69
20480: ST_TO_ADDR
// sibCounter = 0 ;
20481: LD_ADDR_VAR 0 3
20485: PUSH
20486: LD_INT 0
20488: ST_TO_ADDR
// for depot in depots do
20489: LD_ADDR_VAR 0 2
20493: PUSH
20494: LD_VAR 0 1
20498: PUSH
20499: FOR_IN
20500: IFFALSE 20533
// sibCounter = sibCounter + GetResourceType ( GetBase ( depot ) , mat_siberit ) ;
20502: LD_ADDR_VAR 0 3
20506: PUSH
20507: LD_VAR 0 3
20511: PUSH
20512: LD_VAR 0 2
20516: PPUSH
20517: CALL_OW 274
20521: PPUSH
20522: LD_INT 3
20524: PPUSH
20525: CALL_OW 275
20529: PLUS
20530: ST_TO_ADDR
20531: GO 20499
20533: POP
20534: POP
// if sibCounter >= 100 then
20535: LD_VAR 0 3
20539: PUSH
20540: LD_INT 100
20542: GREATEREQUAL
20543: IFFALSE 20729
// begin ChangeMissionObjectives ( MOutMine ) ;
20545: LD_STRING MOutMine
20547: PPUSH
20548: CALL_OW 337
// dial_EndMissionDialogBlocker = true ;
20552: LD_ADDR_EXP 14
20556: PUSH
20557: LD_INT 1
20559: ST_TO_ADDR
// DialogueOn ;
20560: CALL_OW 6
// SayRadio ( Platonov , DNextMiss1-Pla-1 ) ;
20564: LD_EXP 47
20568: PPUSH
20569: LD_STRING DNextMiss1-Pla-1
20571: PPUSH
20572: CALL_OW 94
// if not savedVsevolod then
20576: LD_EXP 19
20580: NOT
20581: IFFALSE 20627
// begin SayRadio ( Platonov , DNextMiss2-Pla-1 ) ;
20583: LD_EXP 47
20587: PPUSH
20588: LD_STRING DNextMiss2-Pla-1
20590: PPUSH
20591: CALL_OW 94
// Say ( Burlak , DNextMiss4-Bur-1 ) ;
20595: LD_EXP 39
20599: PPUSH
20600: LD_STRING DNextMiss4-Bur-1
20602: PPUSH
20603: CALL_OW 88
// SayRadio ( Vsevolod , DDieVsev1-Vse-1 ) ;
20607: LD_EXP 49
20611: PPUSH
20612: LD_STRING DDieVsev1-Vse-1
20614: PPUSH
20615: CALL_OW 94
// ForceFinishGame ;
20619: CALL 21402 0 0
// exit ;
20623: GO 20729
// end else
20625: GO 20663
// begin SayRadio ( Platonov , DNextMiss3-Pla-1 ) ;
20627: LD_EXP 47
20631: PPUSH
20632: LD_STRING DNextMiss3-Pla-1
20634: PPUSH
20635: CALL_OW 94
// SayRadio ( Platonov , DNextMiss4-Pla-1 ) ;
20639: LD_EXP 47
20643: PPUSH
20644: LD_STRING DNextMiss4-Pla-1
20646: PPUSH
20647: CALL_OW 94
// Say ( Burlak , DNextMiss4-Bur-1 ) ;
20651: LD_EXP 39
20655: PPUSH
20656: LD_STRING DNextMiss4-Bur-1
20658: PPUSH
20659: CALL_OW 88
// end ; DialogueOff ;
20663: CALL_OW 7
// SelectCharacters ;
20667: CALL 14716 0 0
// canSpawnReinforces = true ;
20671: LD_ADDR_EXP 23
20675: PUSH
20676: LD_INT 1
20678: ST_TO_ADDR
// canRemoveUnits = true ;
20679: LD_ADDR_EXP 25
20683: PUSH
20684: LD_INT 1
20686: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_friend , true ) ;
20687: LD_INT 1
20689: PPUSH
20690: LD_INT 6
20692: PPUSH
20693: LD_INT 1
20695: PPUSH
20696: LD_INT 1
20698: PPUSH
20699: CALL_OW 80
// SetAreaMapShow ( ExitMapArea , 1 ) ;
20703: LD_INT 14
20705: PPUSH
20706: LD_INT 1
20708: PPUSH
20709: CALL_OW 424
// ChangeMissionObjectives ( MOutResearch ) ;
20713: LD_STRING MOutResearch
20715: PPUSH
20716: CALL_OW 337
// ChangeMissionObjectives ( MCars ) ;
20720: LD_STRING MCars
20722: PPUSH
20723: CALL_OW 337
// exit ;
20727: GO 20729
// end ; end ;
20729: PPOPN 3
20731: END
// every 0 0$1 trigger canRemoveUnits do var un ;
20732: LD_EXP 25
20736: IFFALSE 20846
20738: GO 20740
20740: DISABLE
20741: LD_INT 0
20743: PPUSH
// begin enable ;
20744: ENABLE
// SetLives ( Vsevolod , 1000 ) ;
20745: LD_EXP 49
20749: PPUSH
20750: LD_INT 1000
20752: PPUSH
20753: CALL_OW 234
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , ExitMapArea ) ;
20757: LD_INT 22
20759: PUSH
20760: LD_INT 6
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: PUSH
20767: LD_INT 21
20769: PUSH
20770: LD_INT 1
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PPUSH
20781: CALL_OW 69
20785: PPUSH
20786: LD_INT 14
20788: PPUSH
20789: CALL_OW 113
// for un in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
20793: LD_ADDR_VAR 0 1
20797: PUSH
20798: LD_INT 14
20800: PPUSH
20801: LD_INT 22
20803: PUSH
20804: LD_INT 6
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 21
20813: PUSH
20814: LD_INT 1
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: PPUSH
20825: CALL_OW 70
20829: PUSH
20830: FOR_IN
20831: IFFALSE 20844
// RemoveUnit ( un ) ;
20833: LD_VAR 0 1
20837: PPUSH
20838: CALL_OW 64
20842: GO 20830
20844: POP
20845: POP
// end ;
20846: PPOPN 1
20848: END
// every 1 trigger not canGoNorth and FilterUnitsInArea ( NorthBlockerArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do var unit ;
20849: LD_EXP 21
20853: NOT
20854: PUSH
20855: LD_INT 15
20857: PPUSH
20858: LD_INT 22
20860: PUSH
20861: LD_INT 3
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PUSH
20868: LD_INT 50
20870: PUSH
20871: EMPTY
20872: LIST
20873: PUSH
20874: LD_INT 2
20876: PUSH
20877: LD_INT 21
20879: PUSH
20880: LD_INT 1
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 21
20889: PUSH
20890: LD_INT 2
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: LIST
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: LIST
20906: PPUSH
20907: CALL_OW 70
20911: AND
20912: IFFALSE 21044
20914: GO 20916
20916: DISABLE
20917: LD_INT 0
20919: PPUSH
// begin enable ;
20920: ENABLE
// for unit in FilterUnitsInArea ( NorthBlockerArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
20921: LD_ADDR_VAR 0 1
20925: PUSH
20926: LD_INT 15
20928: PPUSH
20929: LD_INT 22
20931: PUSH
20932: LD_INT 3
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: LD_INT 50
20941: PUSH
20942: EMPTY
20943: LIST
20944: PUSH
20945: LD_INT 2
20947: PUSH
20948: LD_INT 21
20950: PUSH
20951: LD_INT 1
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 21
20960: PUSH
20961: LD_INT 2
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: LIST
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: LIST
20977: PPUSH
20978: CALL_OW 70
20982: PUSH
20983: FOR_IN
20984: IFFALSE 21000
// ComMoveToArea ( unit , NorthBlockerReturnArea ) ;
20986: LD_VAR 0 1
20990: PPUSH
20991: LD_INT 16
20993: PPUSH
20994: CALL_OW 113
20998: GO 20983
21000: POP
21001: POP
// if not dial_NorthBlocker then
21002: LD_EXP 13
21006: NOT
21007: IFFALSE 21044
// begin dial_NorthBlocker = true ;
21009: LD_ADDR_EXP 13
21013: PUSH
21014: LD_INT 1
21016: ST_TO_ADDR
// Say ( Burlak , DMoveNorth-Bur-1 ) ;
21017: LD_EXP 39
21021: PPUSH
21022: LD_STRING DMoveNorth-Bur-1
21024: PPUSH
21025: CALL_OW 88
// wait ( 0 0$5 ) ;
21029: LD_INT 175
21031: PPUSH
21032: CALL_OW 67
// dial_NorthBlocker = false ;
21036: LD_ADDR_EXP 13
21040: PUSH
21041: LD_INT 0
21043: ST_TO_ADDR
// end ; end ;
21044: PPOPN 1
21046: END
// every 2 2$30 trigger canSpawnReinforces do
21047: LD_EXP 23
21051: IFFALSE 21107
21053: GO 21055
21055: DISABLE
// begin SpawnPlatonovReinforces ;
21056: CALL 2402 0 0
// CenterOnXY ( 134 , 233 ) ;
21060: LD_INT 134
21062: PPUSH
21063: LD_INT 233
21065: PPUSH
21066: CALL_OW 84
// if Kirilenkova and IsPlaced ( Kirilenkova ) then
21070: LD_EXP 48
21074: PUSH
21075: LD_EXP 48
21079: PPUSH
21080: CALL_OW 305
21084: AND
21085: IFFALSE 21099
// Say ( Kirilenkova , DMeetKirilenkova-Kir-1 ) ;
21087: LD_EXP 48
21091: PPUSH
21092: LD_STRING DMeetKirilenkova-Kir-1
21094: PPUSH
21095: CALL_OW 88
// canEndMission = true ;
21099: LD_ADDR_EXP 24
21103: PUSH
21104: LD_INT 1
21106: ST_TO_ADDR
// end ; end_of_file
21107: END
// export function Lose_Burlak ; begin
21108: LD_INT 0
21110: PPUSH
// YouLost ( Burlak ) ;
21111: LD_STRING Burlak
21113: PPUSH
21114: CALL_OW 104
// end ;
21118: LD_VAR 0 1
21122: RET
// export function Lose_Gleb ; begin
21123: LD_INT 0
21125: PPUSH
// SayRadio ( Platonov , DKillGleb-Pla-1 ) ;
21126: LD_EXP 47
21130: PPUSH
21131: LD_STRING DKillGleb-Pla-1
21133: PPUSH
21134: CALL_OW 94
// YouLost ( Gleb ) ;
21138: LD_STRING Gleb
21140: PPUSH
21141: CALL_OW 104
// end ;
21145: LD_VAR 0 1
21149: RET
// every 0 0$1 trigger not canEndMission and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_engineer ] , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
21150: LD_EXP 24
21154: NOT
21155: PUSH
21156: LD_INT 22
21158: PUSH
21159: LD_INT 3
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: LD_INT 2
21168: PUSH
21169: LD_INT 25
21171: PUSH
21172: LD_INT 2
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: LD_INT 30
21181: PUSH
21182: LD_INT 1
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: PUSH
21189: LD_INT 30
21191: PUSH
21192: LD_INT 0
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PUSH
21199: LD_INT 30
21201: PUSH
21202: LD_INT 6
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PUSH
21209: LD_INT 30
21211: PUSH
21212: LD_INT 7
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: LD_INT 30
21221: PUSH
21222: LD_INT 8
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PPUSH
21242: CALL_OW 69
21246: NOT
21247: AND
21248: IFFALSE 21260
21250: GO 21252
21252: DISABLE
// YouLost ( NoDepotNoEngineerNoLab ) ;
21253: LD_STRING NoDepotNoEngineerNoLab
21255: PPUSH
21256: CALL_OW 104
21260: END
// export function Lose_NoDepotNoEngineerNoLab ; begin
21261: LD_INT 0
21263: PPUSH
// YouLost ( NoDepotNoEngineerNoLab ) ;
21264: LD_STRING NoDepotNoEngineerNoLab
21266: PPUSH
21267: CALL_OW 104
// end ; end_of_file
21271: LD_VAR 0 1
21275: RET
// every 0 0$5 trigger canEndMission and not FilterUnitsExceptArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_and , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ] ) do var units , qr ;
21276: LD_EXP 24
21280: PUSH
21281: LD_INT 14
21283: PPUSH
21284: LD_INT 22
21286: PUSH
21287: LD_INT 3
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 50
21296: PUSH
21297: EMPTY
21298: LIST
21299: PUSH
21300: LD_INT 2
21302: PUSH
21303: LD_INT 21
21305: PUSH
21306: LD_INT 1
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PUSH
21313: LD_INT 1
21315: PUSH
21316: LD_INT 21
21318: PUSH
21319: LD_INT 2
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 59
21328: PUSH
21329: EMPTY
21330: LIST
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: LIST
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: LIST
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: LIST
21346: PPUSH
21347: CALL_OW 71
21351: NOT
21352: AND
21353: IFFALSE 21399
21355: GO 21357
21357: DISABLE
21358: LD_INT 0
21360: PPUSH
21361: PPUSH
// begin case Query ( QEndGame ) of 1 :
21362: LD_STRING QEndGame
21364: PPUSH
21365: CALL_OW 97
21369: PUSH
21370: LD_INT 1
21372: DOUBLE
21373: EQUAL
21374: IFTRUE 21378
21376: GO 21397
21378: POP
// begin SetRewards ;
21379: CALL 21426 0 0
// SavePlayerCharacters ;
21383: CALL 21590 0 0
// SaveGlobalVariables ;
21387: CALL 21937 0 0
// YouWin ;
21391: CALL_OW 103
// end ; end ;
21395: GO 21398
21397: POP
// enable ;
21398: ENABLE
// end ;
21399: PPOPN 2
21401: END
// export function ForceFinishGame ; begin
21402: LD_INT 0
21404: PPUSH
// SetRewards ;
21405: CALL 21426 0 0
// SavePlayerCharacters ;
21409: CALL 21590 0 0
// SaveGlobalVariables ;
21413: CALL 21937 0 0
// YouWin ;
21417: CALL_OW 103
// end ;
21421: LD_VAR 0 1
21425: RET
// function SetRewards ; begin
21426: LD_INT 0
21428: PPUSH
// if savedVsevolod then
21429: LD_EXP 19
21433: IFFALSE 21447
// AddMedal ( Vsevolod , 1 ) else
21435: LD_STRING Vsevolod
21437: PPUSH
21438: LD_INT 1
21440: PPUSH
21441: CALL_OW 101
21445: GO 21458
// AddMedal ( Vsevolod , - 1 ) ;
21447: LD_STRING Vsevolod
21449: PPUSH
21450: LD_INT 1
21452: NEG
21453: PPUSH
21454: CALL_OW 101
// if not lostAgainBase then
21458: LD_EXP 17
21462: NOT
21463: IFFALSE 21477
// AddMedal ( Ovsyenko , 1 ) else
21465: LD_STRING Ovsyenko
21467: PPUSH
21468: LD_INT 1
21470: PPUSH
21471: CALL_OW 101
21475: GO 21488
// AddMedal ( Ovsyenko , - 1 ) ;
21477: LD_STRING Ovsyenko
21479: PPUSH
21480: LD_INT 1
21482: NEG
21483: PPUSH
21484: CALL_OW 101
// if GetTech ( tech_MatPred , 3 ) = state_researched then
21488: LD_INT 9
21490: PPUSH
21491: LD_INT 3
21493: PPUSH
21494: CALL_OW 321
21498: PUSH
21499: LD_INT 2
21501: EQUAL
21502: IFFALSE 21516
// AddMedal ( Prediction , 1 ) else
21504: LD_STRING Prediction
21506: PPUSH
21507: LD_INT 1
21509: PPUSH
21510: CALL_OW 101
21514: GO 21527
// AddMedal ( Prediction , - 1 ) ;
21516: LD_STRING Prediction
21518: PPUSH
21519: LD_INT 1
21521: NEG
21522: PPUSH
21523: CALL_OW 101
// GiveMedals ( Main ) ;
21527: LD_STRING Main
21529: PPUSH
21530: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ) ;
21534: LD_INT 22
21536: PUSH
21537: LD_INT 3
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 21
21546: PUSH
21547: LD_INT 1
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: LD_INT 23
21556: PUSH
21557: LD_INT 3
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 50
21566: PUSH
21567: EMPTY
21568: LIST
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: PPUSH
21576: CALL_OW 69
21580: PPUSH
21581: CALL_OW 43
// end ;
21585: LD_VAR 0 1
21589: RET
// function SavePlayerCharacters ; var randomsToSave ; begin
21590: LD_INT 0
21592: PPUSH
21593: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
21594: LD_EXP 39
21598: PPUSH
21599: LD_STRING Burlak
21601: PPUSH
21602: LD_INT 3
21604: PPUSH
21605: CALL 11295 0 3
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
21609: LD_EXP 40
21613: PPUSH
21614: LD_STRING Karamazov
21616: PPUSH
21617: LD_INT 3
21619: PPUSH
21620: CALL 11295 0 3
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
21624: LD_EXP 41
21628: PPUSH
21629: LD_STRING Petrovova
21631: PPUSH
21632: LD_INT 3
21634: PPUSH
21635: CALL 11295 0 3
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
21639: LD_EXP 42
21643: PPUSH
21644: LD_STRING Gleb
21646: PPUSH
21647: LD_INT 3
21649: PPUSH
21650: CALL 11295 0 3
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
21654: LD_EXP 43
21658: PPUSH
21659: LD_STRING Petrosyan
21661: PPUSH
21662: LD_INT 3
21664: PPUSH
21665: CALL 11295 0 3
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
21669: LD_EXP 45
21673: PPUSH
21674: LD_STRING Dolgov
21676: PPUSH
21677: LD_INT 3
21679: PPUSH
21680: CALL 11295 0 3
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
21684: LD_EXP 46
21688: PPUSH
21689: LD_STRING Lipshchin
21691: PPUSH
21692: LD_INT 3
21694: PPUSH
21695: CALL 11295 0 3
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
21699: LD_EXP 44
21703: PPUSH
21704: LD_STRING Titov
21706: PPUSH
21707: LD_INT 3
21709: PPUSH
21710: CALL 11295 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
21714: LD_EXP 48
21718: PPUSH
21719: LD_STRING Kirilenkova
21721: PPUSH
21722: LD_INT 3
21724: PPUSH
21725: CALL 11295 0 3
// ExtSaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
21729: LD_INT 22
21731: PUSH
21732: LD_INT 3
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 21
21741: PUSH
21742: LD_INT 1
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 2
21751: PUSH
21752: LD_INT 25
21754: PUSH
21755: LD_INT 12
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 25
21764: PUSH
21765: LD_INT 16
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 25
21774: PUSH
21775: LD_INT 15
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: LIST
21792: PPUSH
21793: CALL_OW 69
21797: PPUSH
21798: LD_STRING other_apemans
21800: PPUSH
21801: LD_INT 3
21803: PPUSH
21804: CALL 11351 0 3
// randomsToSave = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova ] ;
21808: LD_ADDR_VAR 0 2
21812: PUSH
21813: LD_INT 22
21815: PUSH
21816: LD_INT 3
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 21
21825: PUSH
21826: LD_INT 1
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: PUSH
21833: LD_INT 23
21835: PUSH
21836: LD_INT 3
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PUSH
21843: LD_INT 50
21845: PUSH
21846: EMPTY
21847: LIST
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: PPUSH
21855: CALL_OW 69
21859: PUSH
21860: LD_EXP 39
21864: PUSH
21865: LD_EXP 40
21869: PUSH
21870: LD_EXP 41
21874: PUSH
21875: LD_EXP 42
21879: PUSH
21880: LD_EXP 43
21884: PUSH
21885: LD_EXP 44
21889: PUSH
21890: LD_EXP 45
21894: PUSH
21895: LD_EXP 46
21899: PUSH
21900: LD_EXP 48
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: DIFF
21916: ST_TO_ADDR
// ExtSaveCharacters ( randomsToSave , other_survivors , 3 ) ;
21917: LD_VAR 0 2
21921: PPUSH
21922: LD_STRING other_survivors
21924: PPUSH
21925: LD_INT 3
21927: PPUSH
21928: CALL 11351 0 3
// end ;
21932: LD_VAR 0 1
21936: RET
// function SaveGlobalVariables ; var i , driver , driverShortName ; begin
21937: LD_INT 0
21939: PPUSH
21940: PPUSH
21941: PPUSH
21942: PPUSH
// resourcesFrom06 = [ ] ;
21943: LD_ADDR_EXP 8
21947: PUSH
21948: EMPTY
21949: ST_TO_ADDR
// SaveVariable ( techMatPredStatus , 06_TechMatPredStatus_1 ) ;
21950: LD_EXP 6
21954: PPUSH
21955: LD_STRING 06_TechMatPredStatus_1
21957: PPUSH
21958: CALL_OW 39
// for i in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_occupied ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , 89 ] ] ] ) do
21962: LD_ADDR_VAR 0 2
21966: PUSH
21967: LD_INT 14
21969: PPUSH
21970: LD_INT 22
21972: PUSH
21973: LD_INT 3
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: LD_INT 59
21982: PUSH
21983: EMPTY
21984: LIST
21985: PUSH
21986: LD_INT 2
21988: PUSH
21989: LD_INT 34
21991: PUSH
21992: LD_INT 51
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 34
22001: PUSH
22002: LD_INT 32
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 34
22011: PUSH
22012: LD_INT 12
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 34
22021: PUSH
22022: LD_INT 89
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: LIST
22040: PPUSH
22041: CALL_OW 70
22045: PUSH
22046: FOR_IN
22047: IFFALSE 22075
// resourcesFrom06 = resourcesFrom06 ^ [ GetMultiCargo ( i ) ] ;
22049: LD_ADDR_EXP 8
22053: PUSH
22054: LD_EXP 8
22058: PUSH
22059: LD_VAR 0 2
22063: PPUSH
22064: CALL 14369 0 1
22068: PUSH
22069: EMPTY
22070: LIST
22071: ADD
22072: ST_TO_ADDR
22073: GO 22046
22075: POP
22076: POP
// SaveVariable ( resourcesFrom06 , 06_ResourcesInCargo_3 ) ;
22077: LD_EXP 8
22081: PPUSH
22082: LD_STRING 06_ResourcesInCargo_3
22084: PPUSH
22085: CALL_OW 39
// for i in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ) do
22089: LD_ADDR_VAR 0 2
22093: PUSH
22094: LD_INT 14
22096: PPUSH
22097: LD_INT 22
22099: PUSH
22100: LD_INT 3
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: LD_INT 21
22109: PUSH
22110: LD_INT 2
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: PUSH
22117: LD_INT 59
22119: PUSH
22120: EMPTY
22121: LIST
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: LIST
22127: PPUSH
22128: CALL_OW 70
22132: PUSH
22133: FOR_IN
22134: IFFALSE 22486
// begin driver = UnitsInside ( i ) [ 1 ] ;
22136: LD_ADDR_VAR 0 3
22140: PUSH
22141: LD_VAR 0 2
22145: PPUSH
22146: CALL_OW 313
22150: PUSH
22151: LD_INT 1
22153: ARRAY
22154: ST_TO_ADDR
// if driver = Burlak then
22155: LD_VAR 0 3
22159: PUSH
22160: LD_EXP 39
22164: EQUAL
22165: IFFALSE 22175
// driverShortName = Bur ;
22167: LD_ADDR_VAR 0 4
22171: PUSH
22172: LD_STRING Bur
22174: ST_TO_ADDR
// if driver = Karamazov then
22175: LD_VAR 0 3
22179: PUSH
22180: LD_EXP 40
22184: EQUAL
22185: IFFALSE 22195
// driverShortName = Kar ;
22187: LD_ADDR_VAR 0 4
22191: PUSH
22192: LD_STRING Kar
22194: ST_TO_ADDR
// if driver = Petrovova then
22195: LD_VAR 0 3
22199: PUSH
22200: LD_EXP 41
22204: EQUAL
22205: IFFALSE 22215
// driverShortName = Ptr ;
22207: LD_ADDR_VAR 0 4
22211: PUSH
22212: LD_STRING Ptr
22214: ST_TO_ADDR
// if driver = Gleb then
22215: LD_VAR 0 3
22219: PUSH
22220: LD_EXP 42
22224: EQUAL
22225: IFFALSE 22235
// driverShortName = Glb ;
22227: LD_ADDR_VAR 0 4
22231: PUSH
22232: LD_STRING Glb
22234: ST_TO_ADDR
// if driver = Petrosyan then
22235: LD_VAR 0 3
22239: PUSH
22240: LD_EXP 43
22244: EQUAL
22245: IFFALSE 22255
// driverShortName = Pet ;
22247: LD_ADDR_VAR 0 4
22251: PUSH
22252: LD_STRING Pet
22254: ST_TO_ADDR
// if driver = Dolgov then
22255: LD_VAR 0 3
22259: PUSH
22260: LD_EXP 45
22264: EQUAL
22265: IFFALSE 22275
// driverShortName = Dol ;
22267: LD_ADDR_VAR 0 4
22271: PUSH
22272: LD_STRING Dol
22274: ST_TO_ADDR
// if driver = Lipshchin then
22275: LD_VAR 0 3
22279: PUSH
22280: LD_EXP 46
22284: EQUAL
22285: IFFALSE 22295
// driverShortName = Lip ;
22287: LD_ADDR_VAR 0 4
22291: PUSH
22292: LD_STRING Lip
22294: ST_TO_ADDR
// if driver = Titov then
22295: LD_VAR 0 3
22299: PUSH
22300: LD_EXP 44
22304: EQUAL
22305: IFFALSE 22315
// driverShortName = Tit ;
22307: LD_ADDR_VAR 0 4
22311: PUSH
22312: LD_STRING Tit
22314: ST_TO_ADDR
// if driver = Kirilenkova then
22315: LD_VAR 0 3
22319: PUSH
22320: LD_EXP 48
22324: EQUAL
22325: IFFALSE 22335
// driverShortName = Kir ;
22327: LD_ADDR_VAR 0 4
22331: PUSH
22332: LD_STRING Kir
22334: ST_TO_ADDR
// if not driver in [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova ] then
22335: LD_VAR 0 3
22339: PUSH
22340: LD_EXP 39
22344: PUSH
22345: LD_EXP 40
22349: PUSH
22350: LD_EXP 41
22354: PUSH
22355: LD_EXP 42
22359: PUSH
22360: LD_EXP 43
22364: PUSH
22365: LD_EXP 44
22369: PUSH
22370: LD_EXP 45
22374: PUSH
22375: LD_EXP 46
22379: PUSH
22380: LD_EXP 48
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: IN
22396: NOT
22397: IFFALSE 22407
// driverShortName = rand ;
22399: LD_ADDR_VAR 0 4
22403: PUSH
22404: LD_STRING rand
22406: ST_TO_ADDR
// vehsFrom06 = vehsFrom06 ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , driverShortName ] ] ;
22407: LD_ADDR_EXP 7
22411: PUSH
22412: LD_EXP 7
22416: PUSH
22417: LD_VAR 0 2
22421: PPUSH
22422: CALL_OW 248
22426: PUSH
22427: LD_VAR 0 2
22431: PPUSH
22432: CALL_OW 265
22436: PUSH
22437: LD_VAR 0 2
22441: PPUSH
22442: CALL_OW 262
22446: PUSH
22447: LD_VAR 0 2
22451: PPUSH
22452: CALL_OW 263
22456: PUSH
22457: LD_VAR 0 2
22461: PPUSH
22462: CALL_OW 264
22466: PUSH
22467: LD_VAR 0 4
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: PUSH
22480: EMPTY
22481: LIST
22482: ADD
22483: ST_TO_ADDR
// end ;
22484: GO 22133
22486: POP
22487: POP
// SaveVariable ( vehsFrom06 , 06_Vehicles_2 ) ;
22488: LD_EXP 7
22492: PPUSH
22493: LD_STRING 06_Vehicles_2
22495: PPUSH
22496: CALL_OW 39
// SaveVariable ( savedVsevolod , 06_VsevolodStatus_4 ) ;
22500: LD_EXP 19
22504: PPUSH
22505: LD_STRING 06_VsevolodStatus_4
22507: PPUSH
22508: CALL_OW 39
// end ; end_of_file
22512: LD_VAR 0 1
22516: RET
// on UnitDestroyed ( unit ) do begin if unit in ovsyenkoBase then
22517: LD_VAR 0 1
22521: PUSH
22522: LD_EXP 52
22526: IN
22527: IFFALSE 22545
// ovsyenkoBase = ovsyenkoBase diff unit ;
22529: LD_ADDR_EXP 52
22533: PUSH
22534: LD_EXP 52
22538: PUSH
22539: LD_VAR 0 1
22543: DIFF
22544: ST_TO_ADDR
// if unit = Burlak then
22545: LD_VAR 0 1
22549: PUSH
22550: LD_EXP 39
22554: EQUAL
22555: IFFALSE 22561
// Lose_Burlak ;
22557: CALL 21108 0 0
// if unit = Vsevolod and GetSide ( Vsevolod ) = 3 then
22561: LD_VAR 0 1
22565: PUSH
22566: LD_EXP 49
22570: EQUAL
22571: PUSH
22572: LD_EXP 49
22576: PPUSH
22577: CALL_OW 255
22581: PUSH
22582: LD_INT 3
22584: EQUAL
22585: AND
22586: IFFALSE 22596
// savedVsevolod = false ;
22588: LD_ADDR_EXP 19
22592: PUSH
22593: LD_INT 0
22595: ST_TO_ADDR
// if unit = ovsyenko and GetSide ( ovsyenko ) = 3 then
22596: LD_VAR 0 1
22600: PUSH
22601: LD_INT 86
22603: EQUAL
22604: PUSH
22605: LD_INT 86
22607: PPUSH
22608: CALL_OW 255
22612: PUSH
22613: LD_INT 3
22615: EQUAL
22616: AND
22617: IFFALSE 22627
// lostAgainBase = true ;
22619: LD_ADDR_EXP 17
22623: PUSH
22624: LD_INT 1
22626: ST_TO_ADDR
// end ;
22627: PPOPN 1
22629: END
// on UnitDestroyed_Extra ( unit , killer_side , killer_unit ) do begin if unit = Gleb and killer_side = 3 then
22630: LD_VAR 0 1
22634: PUSH
22635: LD_EXP 42
22639: EQUAL
22640: PUSH
22641: LD_VAR 0 2
22645: PUSH
22646: LD_INT 3
22648: EQUAL
22649: AND
22650: IFFALSE 22656
// Lose_Gleb ;
22652: CALL 21123 0 0
// if unit = Vsevolod then
22656: LD_VAR 0 1
22660: PUSH
22661: LD_EXP 49
22665: EQUAL
22666: IFFALSE 22676
// savedVsevolod = false ;
22668: LD_ADDR_EXP 19
22672: PUSH
22673: LD_INT 0
22675: ST_TO_ADDR
// end ;
22676: PPOPN 3
22678: END
// on BuildingComplete ( building ) do begin end ;
22679: PPOPN 1
22681: END
// on BuildingCaptured ( building , side , human ) do begin if GetSide ( human ) = 3 and GetBType ( building ) = b_siberite_mine and not dial_SibTechsBlocker then
22682: LD_VAR 0 3
22686: PPUSH
22687: CALL_OW 255
22691: PUSH
22692: LD_INT 3
22694: EQUAL
22695: PUSH
22696: LD_VAR 0 1
22700: PPUSH
22701: CALL_OW 266
22705: PUSH
22706: LD_INT 30
22708: EQUAL
22709: AND
22710: PUSH
22711: LD_EXP 9
22715: NOT
22716: AND
22717: IFFALSE 22723
// Dial_SibTechs ;
22719: CALL 16574 0 0
// if GetSide ( human ) = 3 and GetBType ( building ) in [ b_depot , b_warehouse ] and GetResourceType ( GetBase ( building ) , mat_siberit ) > 0 and not dial_SibTechsBlocker then
22723: LD_VAR 0 3
22727: PPUSH
22728: CALL_OW 255
22732: PUSH
22733: LD_INT 3
22735: EQUAL
22736: PUSH
22737: LD_VAR 0 1
22741: PPUSH
22742: CALL_OW 266
22746: PUSH
22747: LD_INT 0
22749: PUSH
22750: LD_INT 1
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: IN
22757: AND
22758: PUSH
22759: LD_VAR 0 1
22763: PPUSH
22764: CALL_OW 274
22768: PPUSH
22769: LD_INT 3
22771: PPUSH
22772: CALL_OW 275
22776: PUSH
22777: LD_INT 0
22779: GREATER
22780: AND
22781: PUSH
22782: LD_EXP 9
22786: NOT
22787: AND
22788: IFFALSE 22794
// Dial_SibTechs ;
22790: CALL 16574 0 0
// end ;
22794: PPOPN 3
22796: END
// on Contact ( side1 , side2 ) do begin end ;
22797: PPOPN 2
22799: END
// on VehicleConstructed ( vehicle , building ) do var side , controlTowers , tmp ;
22800: LD_INT 0
22802: PPUSH
22803: PPUSH
22804: PPUSH
// begin if GetSide ( vehicle ) = 1 then
22805: LD_VAR 0 1
22809: PPUSH
22810: CALL_OW 255
22814: PUSH
22815: LD_INT 1
22817: EQUAL
22818: IFFALSE 22985
// begin controlTowers = FilterUnitsInArea ( HeadAmericanBaseArea , [ [ f_side , 1 ] , [ f_ok ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_vehicle ] ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
22820: LD_ADDR_VAR 0 4
22824: PUSH
22825: LD_INT 5
22827: PPUSH
22828: LD_INT 22
22830: PUSH
22831: LD_INT 1
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 50
22840: PUSH
22841: EMPTY
22842: LIST
22843: PUSH
22844: LD_INT 2
22846: PUSH
22847: LD_INT 21
22849: PUSH
22850: LD_INT 3
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 21
22859: PUSH
22860: LD_INT 2
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 2
22874: PUSH
22875: LD_INT 30
22877: PUSH
22878: LD_INT 36
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: LD_INT 34
22887: PUSH
22888: LD_INT 31
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: LIST
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: PPUSH
22906: CALL_OW 70
22910: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote and controlTowers then
22911: LD_VAR 0 1
22915: PPUSH
22916: CALL_OW 263
22920: PUSH
22921: LD_INT 2
22923: EQUAL
22924: PUSH
22925: LD_VAR 0 4
22929: AND
22930: IFFALSE 22985
// begin tmp = UnitsInside ( controlTowers [ 1 ] ) ;
22932: LD_ADDR_VAR 0 5
22936: PUSH
22937: LD_VAR 0 4
22941: PUSH
22942: LD_INT 1
22944: ARRAY
22945: PPUSH
22946: CALL_OW 313
22950: ST_TO_ADDR
// if tmp then
22951: LD_VAR 0 5
22955: IFFALSE 22985
// LinkVehicleToHuman ( vehicle , tmp [ rand ( 1 , tmp ) ] ) ;
22957: LD_VAR 0 1
22961: PPUSH
22962: LD_VAR 0 5
22966: PUSH
22967: LD_INT 1
22969: PPUSH
22970: LD_VAR 0 5
22974: PPUSH
22975: CALL_OW 12
22979: ARRAY
22980: PPUSH
22981: CALL_OW 53
// end ; end ; end ;
22985: PPOPN 5
22987: END
// on ResearchComplete ( research , building ) do begin if research = tech_TauField then
22988: LD_VAR 0 1
22992: PUSH
22993: LD_INT 30
22995: EQUAL
22996: IFFALSE 23002
// Dial_ResearchTauField ;
22998: CALL 19959 0 0
// if research = tech_SibEng and GetTech ( tech_TauField , 3 ) = state_researched then
23002: LD_VAR 0 1
23006: PUSH
23007: LD_INT 22
23009: EQUAL
23010: PUSH
23011: LD_INT 30
23013: PPUSH
23014: LD_INT 3
23016: PPUSH
23017: CALL_OW 321
23021: PUSH
23022: LD_INT 2
23024: EQUAL
23025: AND
23026: IFFALSE 23035
// ChangeMissionObjectives ( MOutResearch ) ;
23028: LD_STRING MOutResearch
23030: PPUSH
23031: CALL_OW 337
// if research = tech_MatPred then
23035: LD_VAR 0 1
23039: PUSH
23040: LD_INT 9
23042: EQUAL
23043: IFFALSE 23049
// Dial_ResearchMatPredictions ;
23045: CALL 16729 0 0
// end ; end_of_file
23049: PPOPN 2
23051: END
// every 0 0$1 trigger enableVsevolodCounter do
23052: LD_EXP 22
23056: IFFALSE 23076
23058: GO 23060
23060: DISABLE
// begin enable ;
23061: ENABLE
// timeToAttack = timeToAttack + 0 0$01 ;
23062: LD_ADDR_EXP 26
23066: PUSH
23067: LD_EXP 26
23071: PUSH
23072: LD_INT 35
23074: PLUS
23075: ST_TO_ADDR
// end ; end_of_file
23076: END
// every 0 0$01 do var timer ;
23077: GO 23079
23079: DISABLE
23080: LD_INT 0
23082: PPUSH
// begin timer := 5 5$30 ;
23083: LD_ADDR_VAR 0 1
23087: PUSH
23088: LD_INT 11550
23090: ST_TO_ADDR
// repeat wait ( timer ) ;
23091: LD_VAR 0 1
23095: PPUSH
23096: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
23100: LD_INT 3
23102: PPUSH
23103: LD_INT 5
23105: PPUSH
23106: CALL_OW 12
23110: PPUSH
23111: LD_INT 20
23113: PPUSH
23114: LD_INT 1
23116: PPUSH
23117: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
23121: LD_ADDR_EXP 27
23125: PUSH
23126: LD_EXP 27
23130: PUSH
23131: LD_INT 1
23133: PLUS
23134: ST_TO_ADDR
// until cratesSpawned = 3 ;
23135: LD_EXP 27
23139: PUSH
23140: LD_INT 3
23142: EQUAL
23143: IFFALSE 23091
// end ; end_of_file
23145: PPOPN 1
23147: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
23148: LD_INT 0
23150: PPUSH
// ar_miner := 81 ;
23151: LD_ADDR_EXP 65
23155: PUSH
23156: LD_INT 81
23158: ST_TO_ADDR
// ar_crane := 88 ;
23159: LD_ADDR_EXP 64
23163: PUSH
23164: LD_INT 88
23166: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
23167: LD_ADDR_EXP 59
23171: PUSH
23172: LD_INT 89
23174: ST_TO_ADDR
// us_hack := 99 ;
23175: LD_ADDR_EXP 60
23179: PUSH
23180: LD_INT 99
23182: ST_TO_ADDR
// us_artillery := 97 ;
23183: LD_ADDR_EXP 61
23187: PUSH
23188: LD_INT 97
23190: ST_TO_ADDR
// ar_bio_bomb := 91 ;
23191: LD_ADDR_EXP 62
23195: PUSH
23196: LD_INT 91
23198: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
23199: LD_ADDR_EXP 63
23203: PUSH
23204: LD_INT 92
23206: ST_TO_ADDR
// ru_radar := 98 ;
23207: LD_ADDR_EXP 58
23211: PUSH
23212: LD_INT 98
23214: ST_TO_ADDR
// tech_Artillery := 80 ;
23215: LD_ADDR_EXP 66
23219: PUSH
23220: LD_INT 80
23222: ST_TO_ADDR
// tech_RadMat := 81 ;
23223: LD_ADDR_EXP 67
23227: PUSH
23228: LD_INT 81
23230: ST_TO_ADDR
// tech_BasicTools := 82 ;
23231: LD_ADDR_EXP 68
23235: PUSH
23236: LD_INT 82
23238: ST_TO_ADDR
// tech_Cargo := 83 ;
23239: LD_ADDR_EXP 69
23243: PUSH
23244: LD_INT 83
23246: ST_TO_ADDR
// tech_Track := 84 ;
23247: LD_ADDR_EXP 70
23251: PUSH
23252: LD_INT 84
23254: ST_TO_ADDR
// tech_Crane := 85 ;
23255: LD_ADDR_EXP 71
23259: PUSH
23260: LD_INT 85
23262: ST_TO_ADDR
// tech_Bulldozer := 86 ;
23263: LD_ADDR_EXP 72
23267: PUSH
23268: LD_INT 86
23270: ST_TO_ADDR
// tech_Hovercraft := 87 ;
23271: LD_ADDR_EXP 73
23275: PUSH
23276: LD_INT 87
23278: ST_TO_ADDR
// end ;
23279: LD_VAR 0 1
23283: RET
// every 1 do
23284: GO 23286
23286: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
23287: CALL 23148 0 0
23291: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
23292: LD_VAR 0 2
23296: PUSH
23297: LD_INT 100
23299: EQUAL
23300: IFFALSE 24249
// begin if not StreamModeActive then
23302: LD_EXP 74
23306: NOT
23307: IFFALSE 23317
// StreamModeActive := true ;
23309: LD_ADDR_EXP 74
23313: PUSH
23314: LD_INT 1
23316: ST_TO_ADDR
// if p3 = 0 then
23317: LD_VAR 0 3
23321: PUSH
23322: LD_INT 0
23324: EQUAL
23325: IFFALSE 23331
// InitStreamMode ;
23327: CALL 24407 0 0
// if p3 = 1 then
23331: LD_VAR 0 3
23335: PUSH
23336: LD_INT 1
23338: EQUAL
23339: IFFALSE 23349
// sRocket := true ;
23341: LD_ADDR_EXP 79
23345: PUSH
23346: LD_INT 1
23348: ST_TO_ADDR
// if p3 = 2 then
23349: LD_VAR 0 3
23353: PUSH
23354: LD_INT 2
23356: EQUAL
23357: IFFALSE 23367
// sSpeed := true ;
23359: LD_ADDR_EXP 78
23363: PUSH
23364: LD_INT 1
23366: ST_TO_ADDR
// if p3 = 3 then
23367: LD_VAR 0 3
23371: PUSH
23372: LD_INT 3
23374: EQUAL
23375: IFFALSE 23385
// sEngine := true ;
23377: LD_ADDR_EXP 80
23381: PUSH
23382: LD_INT 1
23384: ST_TO_ADDR
// if p3 = 4 then
23385: LD_VAR 0 3
23389: PUSH
23390: LD_INT 4
23392: EQUAL
23393: IFFALSE 23403
// sSpec := true ;
23395: LD_ADDR_EXP 77
23399: PUSH
23400: LD_INT 1
23402: ST_TO_ADDR
// if p3 = 5 then
23403: LD_VAR 0 3
23407: PUSH
23408: LD_INT 5
23410: EQUAL
23411: IFFALSE 23421
// sLevel := true ;
23413: LD_ADDR_EXP 81
23417: PUSH
23418: LD_INT 1
23420: ST_TO_ADDR
// if p3 = 6 then
23421: LD_VAR 0 3
23425: PUSH
23426: LD_INT 6
23428: EQUAL
23429: IFFALSE 23439
// sArmoury := true ;
23431: LD_ADDR_EXP 82
23435: PUSH
23436: LD_INT 1
23438: ST_TO_ADDR
// if p3 = 7 then
23439: LD_VAR 0 3
23443: PUSH
23444: LD_INT 7
23446: EQUAL
23447: IFFALSE 23457
// sRadar := true ;
23449: LD_ADDR_EXP 83
23453: PUSH
23454: LD_INT 1
23456: ST_TO_ADDR
// if p3 = 8 then
23457: LD_VAR 0 3
23461: PUSH
23462: LD_INT 8
23464: EQUAL
23465: IFFALSE 23475
// sBunker := true ;
23467: LD_ADDR_EXP 84
23471: PUSH
23472: LD_INT 1
23474: ST_TO_ADDR
// if p3 = 9 then
23475: LD_VAR 0 3
23479: PUSH
23480: LD_INT 9
23482: EQUAL
23483: IFFALSE 23493
// sHack := true ;
23485: LD_ADDR_EXP 85
23489: PUSH
23490: LD_INT 1
23492: ST_TO_ADDR
// if p3 = 10 then
23493: LD_VAR 0 3
23497: PUSH
23498: LD_INT 10
23500: EQUAL
23501: IFFALSE 23511
// sFire := true ;
23503: LD_ADDR_EXP 86
23507: PUSH
23508: LD_INT 1
23510: ST_TO_ADDR
// if p3 = 11 then
23511: LD_VAR 0 3
23515: PUSH
23516: LD_INT 11
23518: EQUAL
23519: IFFALSE 23529
// sRefresh := true ;
23521: LD_ADDR_EXP 87
23525: PUSH
23526: LD_INT 1
23528: ST_TO_ADDR
// if p3 = 12 then
23529: LD_VAR 0 3
23533: PUSH
23534: LD_INT 12
23536: EQUAL
23537: IFFALSE 23547
// sExp := true ;
23539: LD_ADDR_EXP 88
23543: PUSH
23544: LD_INT 1
23546: ST_TO_ADDR
// if p3 = 13 then
23547: LD_VAR 0 3
23551: PUSH
23552: LD_INT 13
23554: EQUAL
23555: IFFALSE 23565
// sDepot := true ;
23557: LD_ADDR_EXP 89
23561: PUSH
23562: LD_INT 1
23564: ST_TO_ADDR
// if p3 = 14 then
23565: LD_VAR 0 3
23569: PUSH
23570: LD_INT 14
23572: EQUAL
23573: IFFALSE 23583
// sFlag := true ;
23575: LD_ADDR_EXP 90
23579: PUSH
23580: LD_INT 1
23582: ST_TO_ADDR
// if p3 = 15 then
23583: LD_VAR 0 3
23587: PUSH
23588: LD_INT 15
23590: EQUAL
23591: IFFALSE 23601
// sKamikadze := true ;
23593: LD_ADDR_EXP 98
23597: PUSH
23598: LD_INT 1
23600: ST_TO_ADDR
// if p3 = 16 then
23601: LD_VAR 0 3
23605: PUSH
23606: LD_INT 16
23608: EQUAL
23609: IFFALSE 23619
// sTroll := true ;
23611: LD_ADDR_EXP 99
23615: PUSH
23616: LD_INT 1
23618: ST_TO_ADDR
// if p3 = 17 then
23619: LD_VAR 0 3
23623: PUSH
23624: LD_INT 17
23626: EQUAL
23627: IFFALSE 23637
// sSlow := true ;
23629: LD_ADDR_EXP 100
23633: PUSH
23634: LD_INT 1
23636: ST_TO_ADDR
// if p3 = 18 then
23637: LD_VAR 0 3
23641: PUSH
23642: LD_INT 18
23644: EQUAL
23645: IFFALSE 23655
// sLack := true ;
23647: LD_ADDR_EXP 101
23651: PUSH
23652: LD_INT 1
23654: ST_TO_ADDR
// if p3 = 19 then
23655: LD_VAR 0 3
23659: PUSH
23660: LD_INT 19
23662: EQUAL
23663: IFFALSE 23673
// sTank := true ;
23665: LD_ADDR_EXP 103
23669: PUSH
23670: LD_INT 1
23672: ST_TO_ADDR
// if p3 = 20 then
23673: LD_VAR 0 3
23677: PUSH
23678: LD_INT 20
23680: EQUAL
23681: IFFALSE 23691
// sRemote := true ;
23683: LD_ADDR_EXP 104
23687: PUSH
23688: LD_INT 1
23690: ST_TO_ADDR
// if p3 = 21 then
23691: LD_VAR 0 3
23695: PUSH
23696: LD_INT 21
23698: EQUAL
23699: IFFALSE 23709
// sPowell := true ;
23701: LD_ADDR_EXP 105
23705: PUSH
23706: LD_INT 1
23708: ST_TO_ADDR
// if p3 = 22 then
23709: LD_VAR 0 3
23713: PUSH
23714: LD_INT 22
23716: EQUAL
23717: IFFALSE 23727
// sTeleport := true ;
23719: LD_ADDR_EXP 108
23723: PUSH
23724: LD_INT 1
23726: ST_TO_ADDR
// if p3 = 23 then
23727: LD_VAR 0 3
23731: PUSH
23732: LD_INT 23
23734: EQUAL
23735: IFFALSE 23745
// sOilTower := true ;
23737: LD_ADDR_EXP 110
23741: PUSH
23742: LD_INT 1
23744: ST_TO_ADDR
// if p3 = 24 then
23745: LD_VAR 0 3
23749: PUSH
23750: LD_INT 24
23752: EQUAL
23753: IFFALSE 23763
// sShovel := true ;
23755: LD_ADDR_EXP 111
23759: PUSH
23760: LD_INT 1
23762: ST_TO_ADDR
// if p3 = 25 then
23763: LD_VAR 0 3
23767: PUSH
23768: LD_INT 25
23770: EQUAL
23771: IFFALSE 23781
// sSheik := true ;
23773: LD_ADDR_EXP 112
23777: PUSH
23778: LD_INT 1
23780: ST_TO_ADDR
// if p3 = 26 then
23781: LD_VAR 0 3
23785: PUSH
23786: LD_INT 26
23788: EQUAL
23789: IFFALSE 23799
// sEarthquake := true ;
23791: LD_ADDR_EXP 114
23795: PUSH
23796: LD_INT 1
23798: ST_TO_ADDR
// if p3 = 27 then
23799: LD_VAR 0 3
23803: PUSH
23804: LD_INT 27
23806: EQUAL
23807: IFFALSE 23817
// sAI := true ;
23809: LD_ADDR_EXP 115
23813: PUSH
23814: LD_INT 1
23816: ST_TO_ADDR
// if p3 = 28 then
23817: LD_VAR 0 3
23821: PUSH
23822: LD_INT 28
23824: EQUAL
23825: IFFALSE 23835
// sCargo := true ;
23827: LD_ADDR_EXP 118
23831: PUSH
23832: LD_INT 1
23834: ST_TO_ADDR
// if p3 = 29 then
23835: LD_VAR 0 3
23839: PUSH
23840: LD_INT 29
23842: EQUAL
23843: IFFALSE 23853
// sDLaser := true ;
23845: LD_ADDR_EXP 119
23849: PUSH
23850: LD_INT 1
23852: ST_TO_ADDR
// if p3 = 30 then
23853: LD_VAR 0 3
23857: PUSH
23858: LD_INT 30
23860: EQUAL
23861: IFFALSE 23871
// sExchange := true ;
23863: LD_ADDR_EXP 120
23867: PUSH
23868: LD_INT 1
23870: ST_TO_ADDR
// if p3 = 31 then
23871: LD_VAR 0 3
23875: PUSH
23876: LD_INT 31
23878: EQUAL
23879: IFFALSE 23889
// sFac := true ;
23881: LD_ADDR_EXP 121
23885: PUSH
23886: LD_INT 1
23888: ST_TO_ADDR
// if p3 = 32 then
23889: LD_VAR 0 3
23893: PUSH
23894: LD_INT 32
23896: EQUAL
23897: IFFALSE 23907
// sPower := true ;
23899: LD_ADDR_EXP 122
23903: PUSH
23904: LD_INT 1
23906: ST_TO_ADDR
// if p3 = 33 then
23907: LD_VAR 0 3
23911: PUSH
23912: LD_INT 33
23914: EQUAL
23915: IFFALSE 23925
// sRandom := true ;
23917: LD_ADDR_EXP 123
23921: PUSH
23922: LD_INT 1
23924: ST_TO_ADDR
// if p3 = 34 then
23925: LD_VAR 0 3
23929: PUSH
23930: LD_INT 34
23932: EQUAL
23933: IFFALSE 23943
// sShield := true ;
23935: LD_ADDR_EXP 124
23939: PUSH
23940: LD_INT 1
23942: ST_TO_ADDR
// if p3 = 35 then
23943: LD_VAR 0 3
23947: PUSH
23948: LD_INT 35
23950: EQUAL
23951: IFFALSE 23961
// sTime := true ;
23953: LD_ADDR_EXP 125
23957: PUSH
23958: LD_INT 1
23960: ST_TO_ADDR
// if p3 = 36 then
23961: LD_VAR 0 3
23965: PUSH
23966: LD_INT 36
23968: EQUAL
23969: IFFALSE 23979
// sTools := true ;
23971: LD_ADDR_EXP 126
23975: PUSH
23976: LD_INT 1
23978: ST_TO_ADDR
// if p3 = 101 then
23979: LD_VAR 0 3
23983: PUSH
23984: LD_INT 101
23986: EQUAL
23987: IFFALSE 23997
// sSold := true ;
23989: LD_ADDR_EXP 91
23993: PUSH
23994: LD_INT 1
23996: ST_TO_ADDR
// if p3 = 102 then
23997: LD_VAR 0 3
24001: PUSH
24002: LD_INT 102
24004: EQUAL
24005: IFFALSE 24015
// sDiff := true ;
24007: LD_ADDR_EXP 92
24011: PUSH
24012: LD_INT 1
24014: ST_TO_ADDR
// if p3 = 103 then
24015: LD_VAR 0 3
24019: PUSH
24020: LD_INT 103
24022: EQUAL
24023: IFFALSE 24033
// sFog := true ;
24025: LD_ADDR_EXP 95
24029: PUSH
24030: LD_INT 1
24032: ST_TO_ADDR
// if p3 = 104 then
24033: LD_VAR 0 3
24037: PUSH
24038: LD_INT 104
24040: EQUAL
24041: IFFALSE 24051
// sReset := true ;
24043: LD_ADDR_EXP 96
24047: PUSH
24048: LD_INT 1
24050: ST_TO_ADDR
// if p3 = 105 then
24051: LD_VAR 0 3
24055: PUSH
24056: LD_INT 105
24058: EQUAL
24059: IFFALSE 24069
// sSun := true ;
24061: LD_ADDR_EXP 97
24065: PUSH
24066: LD_INT 1
24068: ST_TO_ADDR
// if p3 = 106 then
24069: LD_VAR 0 3
24073: PUSH
24074: LD_INT 106
24076: EQUAL
24077: IFFALSE 24087
// sTiger := true ;
24079: LD_ADDR_EXP 93
24083: PUSH
24084: LD_INT 1
24086: ST_TO_ADDR
// if p3 = 107 then
24087: LD_VAR 0 3
24091: PUSH
24092: LD_INT 107
24094: EQUAL
24095: IFFALSE 24105
// sBomb := true ;
24097: LD_ADDR_EXP 94
24101: PUSH
24102: LD_INT 1
24104: ST_TO_ADDR
// if p3 = 108 then
24105: LD_VAR 0 3
24109: PUSH
24110: LD_INT 108
24112: EQUAL
24113: IFFALSE 24123
// sWound := true ;
24115: LD_ADDR_EXP 102
24119: PUSH
24120: LD_INT 1
24122: ST_TO_ADDR
// if p3 = 109 then
24123: LD_VAR 0 3
24127: PUSH
24128: LD_INT 109
24130: EQUAL
24131: IFFALSE 24141
// sBetray := true ;
24133: LD_ADDR_EXP 106
24137: PUSH
24138: LD_INT 1
24140: ST_TO_ADDR
// if p3 = 110 then
24141: LD_VAR 0 3
24145: PUSH
24146: LD_INT 110
24148: EQUAL
24149: IFFALSE 24159
// sContamin := true ;
24151: LD_ADDR_EXP 107
24155: PUSH
24156: LD_INT 1
24158: ST_TO_ADDR
// if p3 = 111 then
24159: LD_VAR 0 3
24163: PUSH
24164: LD_INT 111
24166: EQUAL
24167: IFFALSE 24177
// sOil := true ;
24169: LD_ADDR_EXP 109
24173: PUSH
24174: LD_INT 1
24176: ST_TO_ADDR
// if p3 = 112 then
24177: LD_VAR 0 3
24181: PUSH
24182: LD_INT 112
24184: EQUAL
24185: IFFALSE 24195
// sStu := true ;
24187: LD_ADDR_EXP 113
24191: PUSH
24192: LD_INT 1
24194: ST_TO_ADDR
// if p3 = 113 then
24195: LD_VAR 0 3
24199: PUSH
24200: LD_INT 113
24202: EQUAL
24203: IFFALSE 24213
// sBazooka := true ;
24205: LD_ADDR_EXP 116
24209: PUSH
24210: LD_INT 1
24212: ST_TO_ADDR
// if p3 = 114 then
24213: LD_VAR 0 3
24217: PUSH
24218: LD_INT 114
24220: EQUAL
24221: IFFALSE 24231
// sMortar := true ;
24223: LD_ADDR_EXP 117
24227: PUSH
24228: LD_INT 1
24230: ST_TO_ADDR
// if p3 = 115 then
24231: LD_VAR 0 3
24235: PUSH
24236: LD_INT 115
24238: EQUAL
24239: IFFALSE 24249
// sRanger := true ;
24241: LD_ADDR_EXP 127
24245: PUSH
24246: LD_INT 1
24248: ST_TO_ADDR
// end ; if p2 = 101 then
24249: LD_VAR 0 2
24253: PUSH
24254: LD_INT 101
24256: EQUAL
24257: IFFALSE 24385
// begin case p3 of 1 :
24259: LD_VAR 0 3
24263: PUSH
24264: LD_INT 1
24266: DOUBLE
24267: EQUAL
24268: IFTRUE 24272
24270: GO 24279
24272: POP
// hHackUnlimitedResources ; 2 :
24273: CALL 35420 0 0
24277: GO 24385
24279: LD_INT 2
24281: DOUBLE
24282: EQUAL
24283: IFTRUE 24287
24285: GO 24294
24287: POP
// hHackSetLevel10 ; 3 :
24288: CALL 35553 0 0
24292: GO 24385
24294: LD_INT 3
24296: DOUBLE
24297: EQUAL
24298: IFTRUE 24302
24300: GO 24309
24302: POP
// hHackSetLevel10YourUnits ; 4 :
24303: CALL 35638 0 0
24307: GO 24385
24309: LD_INT 4
24311: DOUBLE
24312: EQUAL
24313: IFTRUE 24317
24315: GO 24324
24317: POP
// hHackInvincible ; 5 :
24318: CALL 36086 0 0
24322: GO 24385
24324: LD_INT 5
24326: DOUBLE
24327: EQUAL
24328: IFTRUE 24332
24330: GO 24339
24332: POP
// hHackInvisible ; 6 :
24333: CALL 36197 0 0
24337: GO 24385
24339: LD_INT 6
24341: DOUBLE
24342: EQUAL
24343: IFTRUE 24347
24345: GO 24354
24347: POP
// hHackChangeYourSide ; 7 :
24348: CALL 36254 0 0
24352: GO 24385
24354: LD_INT 7
24356: DOUBLE
24357: EQUAL
24358: IFTRUE 24362
24360: GO 24369
24362: POP
// hHackChangeUnitSide ; 8 :
24363: CALL 36296 0 0
24367: GO 24385
24369: LD_INT 8
24371: DOUBLE
24372: EQUAL
24373: IFTRUE 24377
24375: GO 24384
24377: POP
// hHackFog ; end ;
24378: CALL 36397 0 0
24382: GO 24385
24384: POP
// end ; end ;
24385: PPOPN 6
24387: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
24388: GO 24390
24390: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
24391: LD_STRING initStreamRollete();
24393: PPUSH
24394: CALL_OW 559
// InitStreamMode ;
24398: CALL 24407 0 0
// DefineStreamItems ( ) ;
24402: CALL 24847 0 0
// end ;
24406: END
// function InitStreamMode ; begin
24407: LD_INT 0
24409: PPUSH
// streamModeActive := false ;
24410: LD_ADDR_EXP 74
24414: PUSH
24415: LD_INT 0
24417: ST_TO_ADDR
// normalCounter := 36 ;
24418: LD_ADDR_EXP 75
24422: PUSH
24423: LD_INT 36
24425: ST_TO_ADDR
// hardcoreCounter := 16 ;
24426: LD_ADDR_EXP 76
24430: PUSH
24431: LD_INT 16
24433: ST_TO_ADDR
// sRocket := false ;
24434: LD_ADDR_EXP 79
24438: PUSH
24439: LD_INT 0
24441: ST_TO_ADDR
// sSpeed := false ;
24442: LD_ADDR_EXP 78
24446: PUSH
24447: LD_INT 0
24449: ST_TO_ADDR
// sEngine := false ;
24450: LD_ADDR_EXP 80
24454: PUSH
24455: LD_INT 0
24457: ST_TO_ADDR
// sSpec := false ;
24458: LD_ADDR_EXP 77
24462: PUSH
24463: LD_INT 0
24465: ST_TO_ADDR
// sLevel := false ;
24466: LD_ADDR_EXP 81
24470: PUSH
24471: LD_INT 0
24473: ST_TO_ADDR
// sArmoury := false ;
24474: LD_ADDR_EXP 82
24478: PUSH
24479: LD_INT 0
24481: ST_TO_ADDR
// sRadar := false ;
24482: LD_ADDR_EXP 83
24486: PUSH
24487: LD_INT 0
24489: ST_TO_ADDR
// sBunker := false ;
24490: LD_ADDR_EXP 84
24494: PUSH
24495: LD_INT 0
24497: ST_TO_ADDR
// sHack := false ;
24498: LD_ADDR_EXP 85
24502: PUSH
24503: LD_INT 0
24505: ST_TO_ADDR
// sFire := false ;
24506: LD_ADDR_EXP 86
24510: PUSH
24511: LD_INT 0
24513: ST_TO_ADDR
// sRefresh := false ;
24514: LD_ADDR_EXP 87
24518: PUSH
24519: LD_INT 0
24521: ST_TO_ADDR
// sExp := false ;
24522: LD_ADDR_EXP 88
24526: PUSH
24527: LD_INT 0
24529: ST_TO_ADDR
// sDepot := false ;
24530: LD_ADDR_EXP 89
24534: PUSH
24535: LD_INT 0
24537: ST_TO_ADDR
// sFlag := false ;
24538: LD_ADDR_EXP 90
24542: PUSH
24543: LD_INT 0
24545: ST_TO_ADDR
// sKamikadze := false ;
24546: LD_ADDR_EXP 98
24550: PUSH
24551: LD_INT 0
24553: ST_TO_ADDR
// sTroll := false ;
24554: LD_ADDR_EXP 99
24558: PUSH
24559: LD_INT 0
24561: ST_TO_ADDR
// sSlow := false ;
24562: LD_ADDR_EXP 100
24566: PUSH
24567: LD_INT 0
24569: ST_TO_ADDR
// sLack := false ;
24570: LD_ADDR_EXP 101
24574: PUSH
24575: LD_INT 0
24577: ST_TO_ADDR
// sTank := false ;
24578: LD_ADDR_EXP 103
24582: PUSH
24583: LD_INT 0
24585: ST_TO_ADDR
// sRemote := false ;
24586: LD_ADDR_EXP 104
24590: PUSH
24591: LD_INT 0
24593: ST_TO_ADDR
// sPowell := false ;
24594: LD_ADDR_EXP 105
24598: PUSH
24599: LD_INT 0
24601: ST_TO_ADDR
// sTeleport := false ;
24602: LD_ADDR_EXP 108
24606: PUSH
24607: LD_INT 0
24609: ST_TO_ADDR
// sOilTower := false ;
24610: LD_ADDR_EXP 110
24614: PUSH
24615: LD_INT 0
24617: ST_TO_ADDR
// sShovel := false ;
24618: LD_ADDR_EXP 111
24622: PUSH
24623: LD_INT 0
24625: ST_TO_ADDR
// sSheik := false ;
24626: LD_ADDR_EXP 112
24630: PUSH
24631: LD_INT 0
24633: ST_TO_ADDR
// sEarthquake := false ;
24634: LD_ADDR_EXP 114
24638: PUSH
24639: LD_INT 0
24641: ST_TO_ADDR
// sAI := false ;
24642: LD_ADDR_EXP 115
24646: PUSH
24647: LD_INT 0
24649: ST_TO_ADDR
// sCargo := false ;
24650: LD_ADDR_EXP 118
24654: PUSH
24655: LD_INT 0
24657: ST_TO_ADDR
// sDLaser := false ;
24658: LD_ADDR_EXP 119
24662: PUSH
24663: LD_INT 0
24665: ST_TO_ADDR
// sExchange := false ;
24666: LD_ADDR_EXP 120
24670: PUSH
24671: LD_INT 0
24673: ST_TO_ADDR
// sFac := false ;
24674: LD_ADDR_EXP 121
24678: PUSH
24679: LD_INT 0
24681: ST_TO_ADDR
// sPower := false ;
24682: LD_ADDR_EXP 122
24686: PUSH
24687: LD_INT 0
24689: ST_TO_ADDR
// sRandom := false ;
24690: LD_ADDR_EXP 123
24694: PUSH
24695: LD_INT 0
24697: ST_TO_ADDR
// sShield := false ;
24698: LD_ADDR_EXP 124
24702: PUSH
24703: LD_INT 0
24705: ST_TO_ADDR
// sTime := false ;
24706: LD_ADDR_EXP 125
24710: PUSH
24711: LD_INT 0
24713: ST_TO_ADDR
// sTools := false ;
24714: LD_ADDR_EXP 126
24718: PUSH
24719: LD_INT 0
24721: ST_TO_ADDR
// sSold := false ;
24722: LD_ADDR_EXP 91
24726: PUSH
24727: LD_INT 0
24729: ST_TO_ADDR
// sDiff := false ;
24730: LD_ADDR_EXP 92
24734: PUSH
24735: LD_INT 0
24737: ST_TO_ADDR
// sFog := false ;
24738: LD_ADDR_EXP 95
24742: PUSH
24743: LD_INT 0
24745: ST_TO_ADDR
// sReset := false ;
24746: LD_ADDR_EXP 96
24750: PUSH
24751: LD_INT 0
24753: ST_TO_ADDR
// sSun := false ;
24754: LD_ADDR_EXP 97
24758: PUSH
24759: LD_INT 0
24761: ST_TO_ADDR
// sTiger := false ;
24762: LD_ADDR_EXP 93
24766: PUSH
24767: LD_INT 0
24769: ST_TO_ADDR
// sBomb := false ;
24770: LD_ADDR_EXP 94
24774: PUSH
24775: LD_INT 0
24777: ST_TO_ADDR
// sWound := false ;
24778: LD_ADDR_EXP 102
24782: PUSH
24783: LD_INT 0
24785: ST_TO_ADDR
// sBetray := false ;
24786: LD_ADDR_EXP 106
24790: PUSH
24791: LD_INT 0
24793: ST_TO_ADDR
// sContamin := false ;
24794: LD_ADDR_EXP 107
24798: PUSH
24799: LD_INT 0
24801: ST_TO_ADDR
// sOil := false ;
24802: LD_ADDR_EXP 109
24806: PUSH
24807: LD_INT 0
24809: ST_TO_ADDR
// sStu := false ;
24810: LD_ADDR_EXP 113
24814: PUSH
24815: LD_INT 0
24817: ST_TO_ADDR
// sBazooka := false ;
24818: LD_ADDR_EXP 116
24822: PUSH
24823: LD_INT 0
24825: ST_TO_ADDR
// sMortar := false ;
24826: LD_ADDR_EXP 117
24830: PUSH
24831: LD_INT 0
24833: ST_TO_ADDR
// sRanger := false ;
24834: LD_ADDR_EXP 127
24838: PUSH
24839: LD_INT 0
24841: ST_TO_ADDR
// end ;
24842: LD_VAR 0 1
24846: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
24847: LD_INT 0
24849: PPUSH
24850: PPUSH
24851: PPUSH
24852: PPUSH
24853: PPUSH
// result := [ ] ;
24854: LD_ADDR_VAR 0 1
24858: PUSH
24859: EMPTY
24860: ST_TO_ADDR
// if campaign_id = 1 then
24861: LD_OWVAR 69
24865: PUSH
24866: LD_INT 1
24868: EQUAL
24869: IFFALSE 27807
// begin case mission_number of 1 :
24871: LD_OWVAR 70
24875: PUSH
24876: LD_INT 1
24878: DOUBLE
24879: EQUAL
24880: IFTRUE 24884
24882: GO 24948
24884: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
24885: LD_ADDR_VAR 0 1
24889: PUSH
24890: LD_INT 2
24892: PUSH
24893: LD_INT 4
24895: PUSH
24896: LD_INT 11
24898: PUSH
24899: LD_INT 12
24901: PUSH
24902: LD_INT 15
24904: PUSH
24905: LD_INT 16
24907: PUSH
24908: LD_INT 22
24910: PUSH
24911: LD_INT 23
24913: PUSH
24914: LD_INT 26
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 101
24930: PUSH
24931: LD_INT 102
24933: PUSH
24934: LD_INT 106
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: LIST
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: ST_TO_ADDR
24946: GO 27805
24948: LD_INT 2
24950: DOUBLE
24951: EQUAL
24952: IFTRUE 24956
24954: GO 25028
24956: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
24957: LD_ADDR_VAR 0 1
24961: PUSH
24962: LD_INT 2
24964: PUSH
24965: LD_INT 4
24967: PUSH
24968: LD_INT 11
24970: PUSH
24971: LD_INT 12
24973: PUSH
24974: LD_INT 15
24976: PUSH
24977: LD_INT 16
24979: PUSH
24980: LD_INT 22
24982: PUSH
24983: LD_INT 23
24985: PUSH
24986: LD_INT 26
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 101
25002: PUSH
25003: LD_INT 102
25005: PUSH
25006: LD_INT 105
25008: PUSH
25009: LD_INT 106
25011: PUSH
25012: LD_INT 108
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: ST_TO_ADDR
25026: GO 27805
25028: LD_INT 3
25030: DOUBLE
25031: EQUAL
25032: IFTRUE 25036
25034: GO 25112
25036: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
25037: LD_ADDR_VAR 0 1
25041: PUSH
25042: LD_INT 2
25044: PUSH
25045: LD_INT 4
25047: PUSH
25048: LD_INT 5
25050: PUSH
25051: LD_INT 11
25053: PUSH
25054: LD_INT 12
25056: PUSH
25057: LD_INT 15
25059: PUSH
25060: LD_INT 16
25062: PUSH
25063: LD_INT 22
25065: PUSH
25066: LD_INT 26
25068: PUSH
25069: LD_INT 36
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 101
25086: PUSH
25087: LD_INT 102
25089: PUSH
25090: LD_INT 105
25092: PUSH
25093: LD_INT 106
25095: PUSH
25096: LD_INT 108
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: ST_TO_ADDR
25110: GO 27805
25112: LD_INT 4
25114: DOUBLE
25115: EQUAL
25116: IFTRUE 25120
25118: GO 25204
25120: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
25121: LD_ADDR_VAR 0 1
25125: PUSH
25126: LD_INT 2
25128: PUSH
25129: LD_INT 4
25131: PUSH
25132: LD_INT 5
25134: PUSH
25135: LD_INT 8
25137: PUSH
25138: LD_INT 11
25140: PUSH
25141: LD_INT 12
25143: PUSH
25144: LD_INT 15
25146: PUSH
25147: LD_INT 16
25149: PUSH
25150: LD_INT 22
25152: PUSH
25153: LD_INT 23
25155: PUSH
25156: LD_INT 26
25158: PUSH
25159: LD_INT 36
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 101
25178: PUSH
25179: LD_INT 102
25181: PUSH
25182: LD_INT 105
25184: PUSH
25185: LD_INT 106
25187: PUSH
25188: LD_INT 108
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: ST_TO_ADDR
25202: GO 27805
25204: LD_INT 5
25206: DOUBLE
25207: EQUAL
25208: IFTRUE 25212
25210: GO 25312
25212: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
25213: LD_ADDR_VAR 0 1
25217: PUSH
25218: LD_INT 2
25220: PUSH
25221: LD_INT 4
25223: PUSH
25224: LD_INT 5
25226: PUSH
25227: LD_INT 6
25229: PUSH
25230: LD_INT 8
25232: PUSH
25233: LD_INT 11
25235: PUSH
25236: LD_INT 12
25238: PUSH
25239: LD_INT 15
25241: PUSH
25242: LD_INT 16
25244: PUSH
25245: LD_INT 22
25247: PUSH
25248: LD_INT 23
25250: PUSH
25251: LD_INT 25
25253: PUSH
25254: LD_INT 26
25256: PUSH
25257: LD_INT 36
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: PUSH
25276: LD_INT 101
25278: PUSH
25279: LD_INT 102
25281: PUSH
25282: LD_INT 105
25284: PUSH
25285: LD_INT 106
25287: PUSH
25288: LD_INT 108
25290: PUSH
25291: LD_INT 109
25293: PUSH
25294: LD_INT 112
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: ST_TO_ADDR
25310: GO 27805
25312: LD_INT 6
25314: DOUBLE
25315: EQUAL
25316: IFTRUE 25320
25318: GO 25440
25320: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
25321: LD_ADDR_VAR 0 1
25325: PUSH
25326: LD_INT 2
25328: PUSH
25329: LD_INT 4
25331: PUSH
25332: LD_INT 5
25334: PUSH
25335: LD_INT 6
25337: PUSH
25338: LD_INT 8
25340: PUSH
25341: LD_INT 11
25343: PUSH
25344: LD_INT 12
25346: PUSH
25347: LD_INT 15
25349: PUSH
25350: LD_INT 16
25352: PUSH
25353: LD_INT 20
25355: PUSH
25356: LD_INT 21
25358: PUSH
25359: LD_INT 22
25361: PUSH
25362: LD_INT 23
25364: PUSH
25365: LD_INT 25
25367: PUSH
25368: LD_INT 26
25370: PUSH
25371: LD_INT 30
25373: PUSH
25374: LD_INT 31
25376: PUSH
25377: LD_INT 32
25379: PUSH
25380: LD_INT 36
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: PUSH
25404: LD_INT 101
25406: PUSH
25407: LD_INT 102
25409: PUSH
25410: LD_INT 105
25412: PUSH
25413: LD_INT 106
25415: PUSH
25416: LD_INT 108
25418: PUSH
25419: LD_INT 109
25421: PUSH
25422: LD_INT 112
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: ST_TO_ADDR
25438: GO 27805
25440: LD_INT 7
25442: DOUBLE
25443: EQUAL
25444: IFTRUE 25448
25446: GO 25548
25448: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
25449: LD_ADDR_VAR 0 1
25453: PUSH
25454: LD_INT 2
25456: PUSH
25457: LD_INT 4
25459: PUSH
25460: LD_INT 5
25462: PUSH
25463: LD_INT 7
25465: PUSH
25466: LD_INT 11
25468: PUSH
25469: LD_INT 12
25471: PUSH
25472: LD_INT 15
25474: PUSH
25475: LD_INT 16
25477: PUSH
25478: LD_INT 20
25480: PUSH
25481: LD_INT 21
25483: PUSH
25484: LD_INT 22
25486: PUSH
25487: LD_INT 23
25489: PUSH
25490: LD_INT 25
25492: PUSH
25493: LD_INT 26
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 101
25514: PUSH
25515: LD_INT 102
25517: PUSH
25518: LD_INT 103
25520: PUSH
25521: LD_INT 105
25523: PUSH
25524: LD_INT 106
25526: PUSH
25527: LD_INT 108
25529: PUSH
25530: LD_INT 112
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: ST_TO_ADDR
25546: GO 27805
25548: LD_INT 8
25550: DOUBLE
25551: EQUAL
25552: IFTRUE 25556
25554: GO 25684
25556: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
25557: LD_ADDR_VAR 0 1
25561: PUSH
25562: LD_INT 2
25564: PUSH
25565: LD_INT 4
25567: PUSH
25568: LD_INT 5
25570: PUSH
25571: LD_INT 6
25573: PUSH
25574: LD_INT 7
25576: PUSH
25577: LD_INT 8
25579: PUSH
25580: LD_INT 11
25582: PUSH
25583: LD_INT 12
25585: PUSH
25586: LD_INT 15
25588: PUSH
25589: LD_INT 16
25591: PUSH
25592: LD_INT 20
25594: PUSH
25595: LD_INT 21
25597: PUSH
25598: LD_INT 22
25600: PUSH
25601: LD_INT 23
25603: PUSH
25604: LD_INT 25
25606: PUSH
25607: LD_INT 26
25609: PUSH
25610: LD_INT 30
25612: PUSH
25613: LD_INT 31
25615: PUSH
25616: LD_INT 32
25618: PUSH
25619: LD_INT 36
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: PUSH
25644: LD_INT 101
25646: PUSH
25647: LD_INT 102
25649: PUSH
25650: LD_INT 103
25652: PUSH
25653: LD_INT 105
25655: PUSH
25656: LD_INT 106
25658: PUSH
25659: LD_INT 108
25661: PUSH
25662: LD_INT 109
25664: PUSH
25665: LD_INT 112
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: ST_TO_ADDR
25682: GO 27805
25684: LD_INT 9
25686: DOUBLE
25687: EQUAL
25688: IFTRUE 25692
25690: GO 25828
25692: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
25693: LD_ADDR_VAR 0 1
25697: PUSH
25698: LD_INT 2
25700: PUSH
25701: LD_INT 4
25703: PUSH
25704: LD_INT 5
25706: PUSH
25707: LD_INT 6
25709: PUSH
25710: LD_INT 7
25712: PUSH
25713: LD_INT 8
25715: PUSH
25716: LD_INT 11
25718: PUSH
25719: LD_INT 12
25721: PUSH
25722: LD_INT 15
25724: PUSH
25725: LD_INT 16
25727: PUSH
25728: LD_INT 20
25730: PUSH
25731: LD_INT 21
25733: PUSH
25734: LD_INT 22
25736: PUSH
25737: LD_INT 23
25739: PUSH
25740: LD_INT 25
25742: PUSH
25743: LD_INT 26
25745: PUSH
25746: LD_INT 28
25748: PUSH
25749: LD_INT 30
25751: PUSH
25752: LD_INT 31
25754: PUSH
25755: LD_INT 32
25757: PUSH
25758: LD_INT 36
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 101
25786: PUSH
25787: LD_INT 102
25789: PUSH
25790: LD_INT 103
25792: PUSH
25793: LD_INT 105
25795: PUSH
25796: LD_INT 106
25798: PUSH
25799: LD_INT 108
25801: PUSH
25802: LD_INT 109
25804: PUSH
25805: LD_INT 112
25807: PUSH
25808: LD_INT 114
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: ST_TO_ADDR
25826: GO 27805
25828: LD_INT 10
25830: DOUBLE
25831: EQUAL
25832: IFTRUE 25836
25834: GO 26020
25836: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
25837: LD_ADDR_VAR 0 1
25841: PUSH
25842: LD_INT 2
25844: PUSH
25845: LD_INT 4
25847: PUSH
25848: LD_INT 5
25850: PUSH
25851: LD_INT 6
25853: PUSH
25854: LD_INT 7
25856: PUSH
25857: LD_INT 8
25859: PUSH
25860: LD_INT 9
25862: PUSH
25863: LD_INT 10
25865: PUSH
25866: LD_INT 11
25868: PUSH
25869: LD_INT 12
25871: PUSH
25872: LD_INT 13
25874: PUSH
25875: LD_INT 14
25877: PUSH
25878: LD_INT 15
25880: PUSH
25881: LD_INT 16
25883: PUSH
25884: LD_INT 17
25886: PUSH
25887: LD_INT 18
25889: PUSH
25890: LD_INT 19
25892: PUSH
25893: LD_INT 20
25895: PUSH
25896: LD_INT 21
25898: PUSH
25899: LD_INT 22
25901: PUSH
25902: LD_INT 23
25904: PUSH
25905: LD_INT 24
25907: PUSH
25908: LD_INT 25
25910: PUSH
25911: LD_INT 26
25913: PUSH
25914: LD_INT 28
25916: PUSH
25917: LD_INT 30
25919: PUSH
25920: LD_INT 31
25922: PUSH
25923: LD_INT 32
25925: PUSH
25926: LD_INT 36
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 101
25962: PUSH
25963: LD_INT 102
25965: PUSH
25966: LD_INT 103
25968: PUSH
25969: LD_INT 104
25971: PUSH
25972: LD_INT 105
25974: PUSH
25975: LD_INT 106
25977: PUSH
25978: LD_INT 107
25980: PUSH
25981: LD_INT 108
25983: PUSH
25984: LD_INT 109
25986: PUSH
25987: LD_INT 110
25989: PUSH
25990: LD_INT 111
25992: PUSH
25993: LD_INT 112
25995: PUSH
25996: LD_INT 114
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: ST_TO_ADDR
26018: GO 27805
26020: LD_INT 11
26022: DOUBLE
26023: EQUAL
26024: IFTRUE 26028
26026: GO 26220
26028: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
26029: LD_ADDR_VAR 0 1
26033: PUSH
26034: LD_INT 2
26036: PUSH
26037: LD_INT 3
26039: PUSH
26040: LD_INT 4
26042: PUSH
26043: LD_INT 5
26045: PUSH
26046: LD_INT 6
26048: PUSH
26049: LD_INT 7
26051: PUSH
26052: LD_INT 8
26054: PUSH
26055: LD_INT 9
26057: PUSH
26058: LD_INT 10
26060: PUSH
26061: LD_INT 11
26063: PUSH
26064: LD_INT 12
26066: PUSH
26067: LD_INT 13
26069: PUSH
26070: LD_INT 14
26072: PUSH
26073: LD_INT 15
26075: PUSH
26076: LD_INT 16
26078: PUSH
26079: LD_INT 17
26081: PUSH
26082: LD_INT 18
26084: PUSH
26085: LD_INT 19
26087: PUSH
26088: LD_INT 20
26090: PUSH
26091: LD_INT 21
26093: PUSH
26094: LD_INT 22
26096: PUSH
26097: LD_INT 23
26099: PUSH
26100: LD_INT 24
26102: PUSH
26103: LD_INT 25
26105: PUSH
26106: LD_INT 26
26108: PUSH
26109: LD_INT 28
26111: PUSH
26112: LD_INT 30
26114: PUSH
26115: LD_INT 31
26117: PUSH
26118: LD_INT 32
26120: PUSH
26121: LD_INT 34
26123: PUSH
26124: LD_INT 36
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 101
26162: PUSH
26163: LD_INT 102
26165: PUSH
26166: LD_INT 103
26168: PUSH
26169: LD_INT 104
26171: PUSH
26172: LD_INT 105
26174: PUSH
26175: LD_INT 106
26177: PUSH
26178: LD_INT 107
26180: PUSH
26181: LD_INT 108
26183: PUSH
26184: LD_INT 109
26186: PUSH
26187: LD_INT 110
26189: PUSH
26190: LD_INT 111
26192: PUSH
26193: LD_INT 112
26195: PUSH
26196: LD_INT 114
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: ST_TO_ADDR
26218: GO 27805
26220: LD_INT 12
26222: DOUBLE
26223: EQUAL
26224: IFTRUE 26228
26226: GO 26436
26228: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
26229: LD_ADDR_VAR 0 1
26233: PUSH
26234: LD_INT 1
26236: PUSH
26237: LD_INT 2
26239: PUSH
26240: LD_INT 3
26242: PUSH
26243: LD_INT 4
26245: PUSH
26246: LD_INT 5
26248: PUSH
26249: LD_INT 6
26251: PUSH
26252: LD_INT 7
26254: PUSH
26255: LD_INT 8
26257: PUSH
26258: LD_INT 9
26260: PUSH
26261: LD_INT 10
26263: PUSH
26264: LD_INT 11
26266: PUSH
26267: LD_INT 12
26269: PUSH
26270: LD_INT 13
26272: PUSH
26273: LD_INT 14
26275: PUSH
26276: LD_INT 15
26278: PUSH
26279: LD_INT 16
26281: PUSH
26282: LD_INT 17
26284: PUSH
26285: LD_INT 18
26287: PUSH
26288: LD_INT 19
26290: PUSH
26291: LD_INT 20
26293: PUSH
26294: LD_INT 21
26296: PUSH
26297: LD_INT 22
26299: PUSH
26300: LD_INT 23
26302: PUSH
26303: LD_INT 24
26305: PUSH
26306: LD_INT 25
26308: PUSH
26309: LD_INT 26
26311: PUSH
26312: LD_INT 27
26314: PUSH
26315: LD_INT 28
26317: PUSH
26318: LD_INT 30
26320: PUSH
26321: LD_INT 31
26323: PUSH
26324: LD_INT 32
26326: PUSH
26327: LD_INT 33
26329: PUSH
26330: LD_INT 34
26332: PUSH
26333: LD_INT 36
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 101
26374: PUSH
26375: LD_INT 102
26377: PUSH
26378: LD_INT 103
26380: PUSH
26381: LD_INT 104
26383: PUSH
26384: LD_INT 105
26386: PUSH
26387: LD_INT 106
26389: PUSH
26390: LD_INT 107
26392: PUSH
26393: LD_INT 108
26395: PUSH
26396: LD_INT 109
26398: PUSH
26399: LD_INT 110
26401: PUSH
26402: LD_INT 111
26404: PUSH
26405: LD_INT 112
26407: PUSH
26408: LD_INT 113
26410: PUSH
26411: LD_INT 114
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: ST_TO_ADDR
26434: GO 27805
26436: LD_INT 13
26438: DOUBLE
26439: EQUAL
26440: IFTRUE 26444
26442: GO 26640
26444: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
26445: LD_ADDR_VAR 0 1
26449: PUSH
26450: LD_INT 1
26452: PUSH
26453: LD_INT 2
26455: PUSH
26456: LD_INT 3
26458: PUSH
26459: LD_INT 4
26461: PUSH
26462: LD_INT 5
26464: PUSH
26465: LD_INT 8
26467: PUSH
26468: LD_INT 9
26470: PUSH
26471: LD_INT 10
26473: PUSH
26474: LD_INT 11
26476: PUSH
26477: LD_INT 12
26479: PUSH
26480: LD_INT 14
26482: PUSH
26483: LD_INT 15
26485: PUSH
26486: LD_INT 16
26488: PUSH
26489: LD_INT 17
26491: PUSH
26492: LD_INT 18
26494: PUSH
26495: LD_INT 19
26497: PUSH
26498: LD_INT 20
26500: PUSH
26501: LD_INT 21
26503: PUSH
26504: LD_INT 22
26506: PUSH
26507: LD_INT 23
26509: PUSH
26510: LD_INT 24
26512: PUSH
26513: LD_INT 25
26515: PUSH
26516: LD_INT 26
26518: PUSH
26519: LD_INT 27
26521: PUSH
26522: LD_INT 28
26524: PUSH
26525: LD_INT 30
26527: PUSH
26528: LD_INT 31
26530: PUSH
26531: LD_INT 32
26533: PUSH
26534: LD_INT 33
26536: PUSH
26537: LD_INT 34
26539: PUSH
26540: LD_INT 36
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 101
26578: PUSH
26579: LD_INT 102
26581: PUSH
26582: LD_INT 103
26584: PUSH
26585: LD_INT 104
26587: PUSH
26588: LD_INT 105
26590: PUSH
26591: LD_INT 106
26593: PUSH
26594: LD_INT 107
26596: PUSH
26597: LD_INT 108
26599: PUSH
26600: LD_INT 109
26602: PUSH
26603: LD_INT 110
26605: PUSH
26606: LD_INT 111
26608: PUSH
26609: LD_INT 112
26611: PUSH
26612: LD_INT 113
26614: PUSH
26615: LD_INT 114
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: ST_TO_ADDR
26638: GO 27805
26640: LD_INT 14
26642: DOUBLE
26643: EQUAL
26644: IFTRUE 26648
26646: GO 26860
26648: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
26649: LD_ADDR_VAR 0 1
26653: PUSH
26654: LD_INT 1
26656: PUSH
26657: LD_INT 2
26659: PUSH
26660: LD_INT 3
26662: PUSH
26663: LD_INT 4
26665: PUSH
26666: LD_INT 5
26668: PUSH
26669: LD_INT 6
26671: PUSH
26672: LD_INT 7
26674: PUSH
26675: LD_INT 8
26677: PUSH
26678: LD_INT 9
26680: PUSH
26681: LD_INT 10
26683: PUSH
26684: LD_INT 11
26686: PUSH
26687: LD_INT 12
26689: PUSH
26690: LD_INT 13
26692: PUSH
26693: LD_INT 14
26695: PUSH
26696: LD_INT 15
26698: PUSH
26699: LD_INT 16
26701: PUSH
26702: LD_INT 17
26704: PUSH
26705: LD_INT 18
26707: PUSH
26708: LD_INT 19
26710: PUSH
26711: LD_INT 20
26713: PUSH
26714: LD_INT 21
26716: PUSH
26717: LD_INT 22
26719: PUSH
26720: LD_INT 23
26722: PUSH
26723: LD_INT 24
26725: PUSH
26726: LD_INT 25
26728: PUSH
26729: LD_INT 26
26731: PUSH
26732: LD_INT 27
26734: PUSH
26735: LD_INT 28
26737: PUSH
26738: LD_INT 29
26740: PUSH
26741: LD_INT 30
26743: PUSH
26744: LD_INT 31
26746: PUSH
26747: LD_INT 32
26749: PUSH
26750: LD_INT 33
26752: PUSH
26753: LD_INT 34
26755: PUSH
26756: LD_INT 36
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 101
26798: PUSH
26799: LD_INT 102
26801: PUSH
26802: LD_INT 103
26804: PUSH
26805: LD_INT 104
26807: PUSH
26808: LD_INT 105
26810: PUSH
26811: LD_INT 106
26813: PUSH
26814: LD_INT 107
26816: PUSH
26817: LD_INT 108
26819: PUSH
26820: LD_INT 109
26822: PUSH
26823: LD_INT 110
26825: PUSH
26826: LD_INT 111
26828: PUSH
26829: LD_INT 112
26831: PUSH
26832: LD_INT 113
26834: PUSH
26835: LD_INT 114
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: ST_TO_ADDR
26858: GO 27805
26860: LD_INT 15
26862: DOUBLE
26863: EQUAL
26864: IFTRUE 26868
26866: GO 27080
26868: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
26869: LD_ADDR_VAR 0 1
26873: PUSH
26874: LD_INT 1
26876: PUSH
26877: LD_INT 2
26879: PUSH
26880: LD_INT 3
26882: PUSH
26883: LD_INT 4
26885: PUSH
26886: LD_INT 5
26888: PUSH
26889: LD_INT 6
26891: PUSH
26892: LD_INT 7
26894: PUSH
26895: LD_INT 8
26897: PUSH
26898: LD_INT 9
26900: PUSH
26901: LD_INT 10
26903: PUSH
26904: LD_INT 11
26906: PUSH
26907: LD_INT 12
26909: PUSH
26910: LD_INT 13
26912: PUSH
26913: LD_INT 14
26915: PUSH
26916: LD_INT 15
26918: PUSH
26919: LD_INT 16
26921: PUSH
26922: LD_INT 17
26924: PUSH
26925: LD_INT 18
26927: PUSH
26928: LD_INT 19
26930: PUSH
26931: LD_INT 20
26933: PUSH
26934: LD_INT 21
26936: PUSH
26937: LD_INT 22
26939: PUSH
26940: LD_INT 23
26942: PUSH
26943: LD_INT 24
26945: PUSH
26946: LD_INT 25
26948: PUSH
26949: LD_INT 26
26951: PUSH
26952: LD_INT 27
26954: PUSH
26955: LD_INT 28
26957: PUSH
26958: LD_INT 29
26960: PUSH
26961: LD_INT 30
26963: PUSH
26964: LD_INT 31
26966: PUSH
26967: LD_INT 32
26969: PUSH
26970: LD_INT 33
26972: PUSH
26973: LD_INT 34
26975: PUSH
26976: LD_INT 36
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 101
27018: PUSH
27019: LD_INT 102
27021: PUSH
27022: LD_INT 103
27024: PUSH
27025: LD_INT 104
27027: PUSH
27028: LD_INT 105
27030: PUSH
27031: LD_INT 106
27033: PUSH
27034: LD_INT 107
27036: PUSH
27037: LD_INT 108
27039: PUSH
27040: LD_INT 109
27042: PUSH
27043: LD_INT 110
27045: PUSH
27046: LD_INT 111
27048: PUSH
27049: LD_INT 112
27051: PUSH
27052: LD_INT 113
27054: PUSH
27055: LD_INT 114
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: ST_TO_ADDR
27078: GO 27805
27080: LD_INT 16
27082: DOUBLE
27083: EQUAL
27084: IFTRUE 27088
27086: GO 27212
27088: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
27089: LD_ADDR_VAR 0 1
27093: PUSH
27094: LD_INT 2
27096: PUSH
27097: LD_INT 4
27099: PUSH
27100: LD_INT 5
27102: PUSH
27103: LD_INT 7
27105: PUSH
27106: LD_INT 11
27108: PUSH
27109: LD_INT 12
27111: PUSH
27112: LD_INT 15
27114: PUSH
27115: LD_INT 16
27117: PUSH
27118: LD_INT 20
27120: PUSH
27121: LD_INT 21
27123: PUSH
27124: LD_INT 22
27126: PUSH
27127: LD_INT 23
27129: PUSH
27130: LD_INT 25
27132: PUSH
27133: LD_INT 26
27135: PUSH
27136: LD_INT 30
27138: PUSH
27139: LD_INT 31
27141: PUSH
27142: LD_INT 32
27144: PUSH
27145: LD_INT 33
27147: PUSH
27148: LD_INT 34
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 101
27174: PUSH
27175: LD_INT 102
27177: PUSH
27178: LD_INT 103
27180: PUSH
27181: LD_INT 106
27183: PUSH
27184: LD_INT 108
27186: PUSH
27187: LD_INT 112
27189: PUSH
27190: LD_INT 113
27192: PUSH
27193: LD_INT 114
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: ST_TO_ADDR
27210: GO 27805
27212: LD_INT 17
27214: DOUBLE
27215: EQUAL
27216: IFTRUE 27220
27218: GO 27432
27220: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
27221: LD_ADDR_VAR 0 1
27225: PUSH
27226: LD_INT 1
27228: PUSH
27229: LD_INT 2
27231: PUSH
27232: LD_INT 3
27234: PUSH
27235: LD_INT 4
27237: PUSH
27238: LD_INT 5
27240: PUSH
27241: LD_INT 6
27243: PUSH
27244: LD_INT 7
27246: PUSH
27247: LD_INT 8
27249: PUSH
27250: LD_INT 9
27252: PUSH
27253: LD_INT 10
27255: PUSH
27256: LD_INT 11
27258: PUSH
27259: LD_INT 12
27261: PUSH
27262: LD_INT 13
27264: PUSH
27265: LD_INT 14
27267: PUSH
27268: LD_INT 15
27270: PUSH
27271: LD_INT 16
27273: PUSH
27274: LD_INT 17
27276: PUSH
27277: LD_INT 18
27279: PUSH
27280: LD_INT 19
27282: PUSH
27283: LD_INT 20
27285: PUSH
27286: LD_INT 21
27288: PUSH
27289: LD_INT 22
27291: PUSH
27292: LD_INT 23
27294: PUSH
27295: LD_INT 24
27297: PUSH
27298: LD_INT 25
27300: PUSH
27301: LD_INT 26
27303: PUSH
27304: LD_INT 27
27306: PUSH
27307: LD_INT 28
27309: PUSH
27310: LD_INT 29
27312: PUSH
27313: LD_INT 30
27315: PUSH
27316: LD_INT 31
27318: PUSH
27319: LD_INT 32
27321: PUSH
27322: LD_INT 33
27324: PUSH
27325: LD_INT 34
27327: PUSH
27328: LD_INT 36
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 101
27370: PUSH
27371: LD_INT 102
27373: PUSH
27374: LD_INT 103
27376: PUSH
27377: LD_INT 104
27379: PUSH
27380: LD_INT 105
27382: PUSH
27383: LD_INT 106
27385: PUSH
27386: LD_INT 107
27388: PUSH
27389: LD_INT 108
27391: PUSH
27392: LD_INT 109
27394: PUSH
27395: LD_INT 110
27397: PUSH
27398: LD_INT 111
27400: PUSH
27401: LD_INT 112
27403: PUSH
27404: LD_INT 113
27406: PUSH
27407: LD_INT 114
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: ST_TO_ADDR
27430: GO 27805
27432: LD_INT 18
27434: DOUBLE
27435: EQUAL
27436: IFTRUE 27440
27438: GO 27576
27440: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
27441: LD_ADDR_VAR 0 1
27445: PUSH
27446: LD_INT 2
27448: PUSH
27449: LD_INT 4
27451: PUSH
27452: LD_INT 5
27454: PUSH
27455: LD_INT 7
27457: PUSH
27458: LD_INT 11
27460: PUSH
27461: LD_INT 12
27463: PUSH
27464: LD_INT 15
27466: PUSH
27467: LD_INT 16
27469: PUSH
27470: LD_INT 20
27472: PUSH
27473: LD_INT 21
27475: PUSH
27476: LD_INT 22
27478: PUSH
27479: LD_INT 23
27481: PUSH
27482: LD_INT 25
27484: PUSH
27485: LD_INT 26
27487: PUSH
27488: LD_INT 30
27490: PUSH
27491: LD_INT 31
27493: PUSH
27494: LD_INT 32
27496: PUSH
27497: LD_INT 33
27499: PUSH
27500: LD_INT 34
27502: PUSH
27503: LD_INT 35
27505: PUSH
27506: LD_INT 36
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 101
27534: PUSH
27535: LD_INT 102
27537: PUSH
27538: LD_INT 103
27540: PUSH
27541: LD_INT 106
27543: PUSH
27544: LD_INT 108
27546: PUSH
27547: LD_INT 112
27549: PUSH
27550: LD_INT 113
27552: PUSH
27553: LD_INT 114
27555: PUSH
27556: LD_INT 115
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: ST_TO_ADDR
27574: GO 27805
27576: LD_INT 19
27578: DOUBLE
27579: EQUAL
27580: IFTRUE 27584
27582: GO 27804
27584: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
27585: LD_ADDR_VAR 0 1
27589: PUSH
27590: LD_INT 1
27592: PUSH
27593: LD_INT 2
27595: PUSH
27596: LD_INT 3
27598: PUSH
27599: LD_INT 4
27601: PUSH
27602: LD_INT 5
27604: PUSH
27605: LD_INT 6
27607: PUSH
27608: LD_INT 7
27610: PUSH
27611: LD_INT 8
27613: PUSH
27614: LD_INT 9
27616: PUSH
27617: LD_INT 10
27619: PUSH
27620: LD_INT 11
27622: PUSH
27623: LD_INT 12
27625: PUSH
27626: LD_INT 13
27628: PUSH
27629: LD_INT 14
27631: PUSH
27632: LD_INT 15
27634: PUSH
27635: LD_INT 16
27637: PUSH
27638: LD_INT 17
27640: PUSH
27641: LD_INT 18
27643: PUSH
27644: LD_INT 19
27646: PUSH
27647: LD_INT 20
27649: PUSH
27650: LD_INT 21
27652: PUSH
27653: LD_INT 22
27655: PUSH
27656: LD_INT 23
27658: PUSH
27659: LD_INT 24
27661: PUSH
27662: LD_INT 25
27664: PUSH
27665: LD_INT 26
27667: PUSH
27668: LD_INT 27
27670: PUSH
27671: LD_INT 28
27673: PUSH
27674: LD_INT 29
27676: PUSH
27677: LD_INT 30
27679: PUSH
27680: LD_INT 31
27682: PUSH
27683: LD_INT 32
27685: PUSH
27686: LD_INT 33
27688: PUSH
27689: LD_INT 34
27691: PUSH
27692: LD_INT 35
27694: PUSH
27695: LD_INT 36
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 101
27738: PUSH
27739: LD_INT 102
27741: PUSH
27742: LD_INT 103
27744: PUSH
27745: LD_INT 104
27747: PUSH
27748: LD_INT 105
27750: PUSH
27751: LD_INT 106
27753: PUSH
27754: LD_INT 107
27756: PUSH
27757: LD_INT 108
27759: PUSH
27760: LD_INT 109
27762: PUSH
27763: LD_INT 110
27765: PUSH
27766: LD_INT 111
27768: PUSH
27769: LD_INT 112
27771: PUSH
27772: LD_INT 113
27774: PUSH
27775: LD_INT 114
27777: PUSH
27778: LD_INT 115
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: ST_TO_ADDR
27802: GO 27805
27804: POP
// end else
27805: GO 28024
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
27807: LD_ADDR_VAR 0 1
27811: PUSH
27812: LD_INT 1
27814: PUSH
27815: LD_INT 2
27817: PUSH
27818: LD_INT 3
27820: PUSH
27821: LD_INT 4
27823: PUSH
27824: LD_INT 5
27826: PUSH
27827: LD_INT 6
27829: PUSH
27830: LD_INT 7
27832: PUSH
27833: LD_INT 8
27835: PUSH
27836: LD_INT 9
27838: PUSH
27839: LD_INT 10
27841: PUSH
27842: LD_INT 11
27844: PUSH
27845: LD_INT 12
27847: PUSH
27848: LD_INT 13
27850: PUSH
27851: LD_INT 14
27853: PUSH
27854: LD_INT 15
27856: PUSH
27857: LD_INT 16
27859: PUSH
27860: LD_INT 17
27862: PUSH
27863: LD_INT 18
27865: PUSH
27866: LD_INT 19
27868: PUSH
27869: LD_INT 20
27871: PUSH
27872: LD_INT 21
27874: PUSH
27875: LD_INT 22
27877: PUSH
27878: LD_INT 23
27880: PUSH
27881: LD_INT 24
27883: PUSH
27884: LD_INT 25
27886: PUSH
27887: LD_INT 26
27889: PUSH
27890: LD_INT 27
27892: PUSH
27893: LD_INT 28
27895: PUSH
27896: LD_INT 29
27898: PUSH
27899: LD_INT 30
27901: PUSH
27902: LD_INT 31
27904: PUSH
27905: LD_INT 32
27907: PUSH
27908: LD_INT 33
27910: PUSH
27911: LD_INT 34
27913: PUSH
27914: LD_INT 35
27916: PUSH
27917: LD_INT 36
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 101
27960: PUSH
27961: LD_INT 102
27963: PUSH
27964: LD_INT 103
27966: PUSH
27967: LD_INT 104
27969: PUSH
27970: LD_INT 105
27972: PUSH
27973: LD_INT 106
27975: PUSH
27976: LD_INT 107
27978: PUSH
27979: LD_INT 108
27981: PUSH
27982: LD_INT 109
27984: PUSH
27985: LD_INT 110
27987: PUSH
27988: LD_INT 111
27990: PUSH
27991: LD_INT 112
27993: PUSH
27994: LD_INT 113
27996: PUSH
27997: LD_INT 114
27999: PUSH
28000: LD_INT 115
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: ST_TO_ADDR
// if result then
28024: LD_VAR 0 1
28028: IFFALSE 28317
// begin normal :=  ;
28030: LD_ADDR_VAR 0 3
28034: PUSH
28035: LD_STRING 
28037: ST_TO_ADDR
// hardcore :=  ;
28038: LD_ADDR_VAR 0 4
28042: PUSH
28043: LD_STRING 
28045: ST_TO_ADDR
// for i = 1 to normalCounter do
28046: LD_ADDR_VAR 0 5
28050: PUSH
28051: DOUBLE
28052: LD_INT 1
28054: DEC
28055: ST_TO_ADDR
28056: LD_EXP 75
28060: PUSH
28061: FOR_TO
28062: IFFALSE 28163
// begin tmp := 0 ;
28064: LD_ADDR_VAR 0 2
28068: PUSH
28069: LD_STRING 0
28071: ST_TO_ADDR
// if result [ 1 ] then
28072: LD_VAR 0 1
28076: PUSH
28077: LD_INT 1
28079: ARRAY
28080: IFFALSE 28145
// if result [ 1 ] [ 1 ] = i then
28082: LD_VAR 0 1
28086: PUSH
28087: LD_INT 1
28089: ARRAY
28090: PUSH
28091: LD_INT 1
28093: ARRAY
28094: PUSH
28095: LD_VAR 0 5
28099: EQUAL
28100: IFFALSE 28145
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
28102: LD_ADDR_VAR 0 1
28106: PUSH
28107: LD_VAR 0 1
28111: PPUSH
28112: LD_INT 1
28114: PPUSH
28115: LD_VAR 0 1
28119: PUSH
28120: LD_INT 1
28122: ARRAY
28123: PPUSH
28124: LD_INT 1
28126: PPUSH
28127: CALL_OW 3
28131: PPUSH
28132: CALL_OW 1
28136: ST_TO_ADDR
// tmp := 1 ;
28137: LD_ADDR_VAR 0 2
28141: PUSH
28142: LD_STRING 1
28144: ST_TO_ADDR
// end ; normal := normal & tmp ;
28145: LD_ADDR_VAR 0 3
28149: PUSH
28150: LD_VAR 0 3
28154: PUSH
28155: LD_VAR 0 2
28159: STR
28160: ST_TO_ADDR
// end ;
28161: GO 28061
28163: POP
28164: POP
// for i = 1 to hardcoreCounter do
28165: LD_ADDR_VAR 0 5
28169: PUSH
28170: DOUBLE
28171: LD_INT 1
28173: DEC
28174: ST_TO_ADDR
28175: LD_EXP 76
28179: PUSH
28180: FOR_TO
28181: IFFALSE 28286
// begin tmp := 0 ;
28183: LD_ADDR_VAR 0 2
28187: PUSH
28188: LD_STRING 0
28190: ST_TO_ADDR
// if result [ 2 ] then
28191: LD_VAR 0 1
28195: PUSH
28196: LD_INT 2
28198: ARRAY
28199: IFFALSE 28268
// if result [ 2 ] [ 1 ] = 100 + i then
28201: LD_VAR 0 1
28205: PUSH
28206: LD_INT 2
28208: ARRAY
28209: PUSH
28210: LD_INT 1
28212: ARRAY
28213: PUSH
28214: LD_INT 100
28216: PUSH
28217: LD_VAR 0 5
28221: PLUS
28222: EQUAL
28223: IFFALSE 28268
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
28225: LD_ADDR_VAR 0 1
28229: PUSH
28230: LD_VAR 0 1
28234: PPUSH
28235: LD_INT 2
28237: PPUSH
28238: LD_VAR 0 1
28242: PUSH
28243: LD_INT 2
28245: ARRAY
28246: PPUSH
28247: LD_INT 1
28249: PPUSH
28250: CALL_OW 3
28254: PPUSH
28255: CALL_OW 1
28259: ST_TO_ADDR
// tmp := 1 ;
28260: LD_ADDR_VAR 0 2
28264: PUSH
28265: LD_STRING 1
28267: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
28268: LD_ADDR_VAR 0 4
28272: PUSH
28273: LD_VAR 0 4
28277: PUSH
28278: LD_VAR 0 2
28282: STR
28283: ST_TO_ADDR
// end ;
28284: GO 28180
28286: POP
28287: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
28288: LD_STRING getStreamItemsFromMission("
28290: PUSH
28291: LD_VAR 0 3
28295: STR
28296: PUSH
28297: LD_STRING ","
28299: STR
28300: PUSH
28301: LD_VAR 0 4
28305: STR
28306: PUSH
28307: LD_STRING ")
28309: STR
28310: PPUSH
28311: CALL_OW 559
// end else
28315: GO 28324
// ToLua ( getStreamItemsFromMission("","") ) ;
28317: LD_STRING getStreamItemsFromMission("","")
28319: PPUSH
28320: CALL_OW 559
// end ;
28324: LD_VAR 0 1
28328: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
28329: LD_EXP 74
28333: PUSH
28334: LD_EXP 79
28338: AND
28339: IFFALSE 28463
28341: GO 28343
28343: DISABLE
28344: LD_INT 0
28346: PPUSH
28347: PPUSH
// begin enable ;
28348: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
28349: LD_ADDR_VAR 0 2
28353: PUSH
28354: LD_INT 22
28356: PUSH
28357: LD_OWVAR 2
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 2
28368: PUSH
28369: LD_INT 34
28371: PUSH
28372: LD_INT 7
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 34
28381: PUSH
28382: LD_INT 45
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 34
28391: PUSH
28392: LD_INT 28
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 34
28401: PUSH
28402: LD_INT 47
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PPUSH
28420: CALL_OW 69
28424: ST_TO_ADDR
// if not tmp then
28425: LD_VAR 0 2
28429: NOT
28430: IFFALSE 28434
// exit ;
28432: GO 28463
// for i in tmp do
28434: LD_ADDR_VAR 0 1
28438: PUSH
28439: LD_VAR 0 2
28443: PUSH
28444: FOR_IN
28445: IFFALSE 28461
// begin SetLives ( i , 0 ) ;
28447: LD_VAR 0 1
28451: PPUSH
28452: LD_INT 0
28454: PPUSH
28455: CALL_OW 234
// end ;
28459: GO 28444
28461: POP
28462: POP
// end ;
28463: PPOPN 2
28465: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
28466: LD_EXP 74
28470: PUSH
28471: LD_EXP 80
28475: AND
28476: IFFALSE 28560
28478: GO 28480
28480: DISABLE
28481: LD_INT 0
28483: PPUSH
28484: PPUSH
// begin enable ;
28485: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
28486: LD_ADDR_VAR 0 2
28490: PUSH
28491: LD_INT 22
28493: PUSH
28494: LD_OWVAR 2
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 32
28505: PUSH
28506: LD_INT 3
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PPUSH
28517: CALL_OW 69
28521: ST_TO_ADDR
// if not tmp then
28522: LD_VAR 0 2
28526: NOT
28527: IFFALSE 28531
// exit ;
28529: GO 28560
// for i in tmp do
28531: LD_ADDR_VAR 0 1
28535: PUSH
28536: LD_VAR 0 2
28540: PUSH
28541: FOR_IN
28542: IFFALSE 28558
// begin SetLives ( i , 0 ) ;
28544: LD_VAR 0 1
28548: PPUSH
28549: LD_INT 0
28551: PPUSH
28552: CALL_OW 234
// end ;
28556: GO 28541
28558: POP
28559: POP
// end ;
28560: PPOPN 2
28562: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
28563: LD_EXP 74
28567: PUSH
28568: LD_EXP 77
28572: AND
28573: IFFALSE 28666
28575: GO 28577
28577: DISABLE
28578: LD_INT 0
28580: PPUSH
// begin enable ;
28581: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
28582: LD_ADDR_VAR 0 1
28586: PUSH
28587: LD_INT 22
28589: PUSH
28590: LD_OWVAR 2
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 2
28601: PUSH
28602: LD_INT 25
28604: PUSH
28605: LD_INT 5
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: LD_INT 25
28614: PUSH
28615: LD_INT 9
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PUSH
28622: LD_INT 25
28624: PUSH
28625: LD_INT 8
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PPUSH
28642: CALL_OW 69
28646: PUSH
28647: FOR_IN
28648: IFFALSE 28664
// begin SetClass ( i , 1 ) ;
28650: LD_VAR 0 1
28654: PPUSH
28655: LD_INT 1
28657: PPUSH
28658: CALL_OW 336
// end ;
28662: GO 28647
28664: POP
28665: POP
// end ;
28666: PPOPN 1
28668: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
28669: LD_EXP 74
28673: PUSH
28674: LD_EXP 78
28678: AND
28679: PUSH
28680: LD_OWVAR 65
28684: PUSH
28685: LD_INT 7
28687: LESS
28688: AND
28689: IFFALSE 28703
28691: GO 28693
28693: DISABLE
// begin enable ;
28694: ENABLE
// game_speed := 7 ;
28695: LD_ADDR_OWVAR 65
28699: PUSH
28700: LD_INT 7
28702: ST_TO_ADDR
// end ;
28703: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
28704: LD_EXP 74
28708: PUSH
28709: LD_EXP 81
28713: AND
28714: IFFALSE 28916
28716: GO 28718
28718: DISABLE
28719: LD_INT 0
28721: PPUSH
28722: PPUSH
28723: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28724: LD_ADDR_VAR 0 3
28728: PUSH
28729: LD_INT 81
28731: PUSH
28732: LD_OWVAR 2
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 21
28743: PUSH
28744: LD_INT 1
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PPUSH
28755: CALL_OW 69
28759: ST_TO_ADDR
// if not tmp then
28760: LD_VAR 0 3
28764: NOT
28765: IFFALSE 28769
// exit ;
28767: GO 28916
// if tmp > 5 then
28769: LD_VAR 0 3
28773: PUSH
28774: LD_INT 5
28776: GREATER
28777: IFFALSE 28789
// k := 5 else
28779: LD_ADDR_VAR 0 2
28783: PUSH
28784: LD_INT 5
28786: ST_TO_ADDR
28787: GO 28799
// k := tmp ;
28789: LD_ADDR_VAR 0 2
28793: PUSH
28794: LD_VAR 0 3
28798: ST_TO_ADDR
// for i := 1 to k do
28799: LD_ADDR_VAR 0 1
28803: PUSH
28804: DOUBLE
28805: LD_INT 1
28807: DEC
28808: ST_TO_ADDR
28809: LD_VAR 0 2
28813: PUSH
28814: FOR_TO
28815: IFFALSE 28914
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
28817: LD_VAR 0 3
28821: PUSH
28822: LD_VAR 0 1
28826: ARRAY
28827: PPUSH
28828: LD_VAR 0 1
28832: PUSH
28833: LD_INT 4
28835: MOD
28836: PUSH
28837: LD_INT 1
28839: PLUS
28840: PPUSH
28841: CALL_OW 259
28845: PUSH
28846: LD_INT 10
28848: LESS
28849: IFFALSE 28912
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
28851: LD_VAR 0 3
28855: PUSH
28856: LD_VAR 0 1
28860: ARRAY
28861: PPUSH
28862: LD_VAR 0 1
28866: PUSH
28867: LD_INT 4
28869: MOD
28870: PUSH
28871: LD_INT 1
28873: PLUS
28874: PPUSH
28875: LD_VAR 0 3
28879: PUSH
28880: LD_VAR 0 1
28884: ARRAY
28885: PPUSH
28886: LD_VAR 0 1
28890: PUSH
28891: LD_INT 4
28893: MOD
28894: PUSH
28895: LD_INT 1
28897: PLUS
28898: PPUSH
28899: CALL_OW 259
28903: PUSH
28904: LD_INT 1
28906: PLUS
28907: PPUSH
28908: CALL_OW 237
28912: GO 28814
28914: POP
28915: POP
// end ;
28916: PPOPN 3
28918: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
28919: LD_EXP 74
28923: PUSH
28924: LD_EXP 82
28928: AND
28929: IFFALSE 28949
28931: GO 28933
28933: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
28934: LD_INT 4
28936: PPUSH
28937: LD_OWVAR 2
28941: PPUSH
28942: LD_INT 0
28944: PPUSH
28945: CALL_OW 324
28949: END
// every 0 0$1 trigger StreamModeActive and sShovel do
28950: LD_EXP 74
28954: PUSH
28955: LD_EXP 111
28959: AND
28960: IFFALSE 28980
28962: GO 28964
28964: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
28965: LD_INT 19
28967: PPUSH
28968: LD_OWVAR 2
28972: PPUSH
28973: LD_INT 0
28975: PPUSH
28976: CALL_OW 324
28980: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
28981: LD_EXP 74
28985: PUSH
28986: LD_EXP 83
28990: AND
28991: IFFALSE 29093
28993: GO 28995
28995: DISABLE
28996: LD_INT 0
28998: PPUSH
28999: PPUSH
// begin enable ;
29000: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
29001: LD_ADDR_VAR 0 2
29005: PUSH
29006: LD_INT 22
29008: PUSH
29009: LD_OWVAR 2
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 2
29020: PUSH
29021: LD_INT 34
29023: PUSH
29024: LD_INT 11
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 34
29033: PUSH
29034: LD_INT 30
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: LIST
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PPUSH
29050: CALL_OW 69
29054: ST_TO_ADDR
// if not tmp then
29055: LD_VAR 0 2
29059: NOT
29060: IFFALSE 29064
// exit ;
29062: GO 29093
// for i in tmp do
29064: LD_ADDR_VAR 0 1
29068: PUSH
29069: LD_VAR 0 2
29073: PUSH
29074: FOR_IN
29075: IFFALSE 29091
// begin SetLives ( i , 0 ) ;
29077: LD_VAR 0 1
29081: PPUSH
29082: LD_INT 0
29084: PPUSH
29085: CALL_OW 234
// end ;
29089: GO 29074
29091: POP
29092: POP
// end ;
29093: PPOPN 2
29095: END
// every 0 0$1 trigger StreamModeActive and sBunker do
29096: LD_EXP 74
29100: PUSH
29101: LD_EXP 84
29105: AND
29106: IFFALSE 29126
29108: GO 29110
29110: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
29111: LD_INT 32
29113: PPUSH
29114: LD_OWVAR 2
29118: PPUSH
29119: LD_INT 0
29121: PPUSH
29122: CALL_OW 324
29126: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
29127: LD_EXP 74
29131: PUSH
29132: LD_EXP 85
29136: AND
29137: IFFALSE 29318
29139: GO 29141
29141: DISABLE
29142: LD_INT 0
29144: PPUSH
29145: PPUSH
29146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
29147: LD_ADDR_VAR 0 2
29151: PUSH
29152: LD_INT 22
29154: PUSH
29155: LD_OWVAR 2
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 33
29166: PUSH
29167: LD_INT 3
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PPUSH
29178: CALL_OW 69
29182: ST_TO_ADDR
// if not tmp then
29183: LD_VAR 0 2
29187: NOT
29188: IFFALSE 29192
// exit ;
29190: GO 29318
// side := 0 ;
29192: LD_ADDR_VAR 0 3
29196: PUSH
29197: LD_INT 0
29199: ST_TO_ADDR
// for i := 1 to 8 do
29200: LD_ADDR_VAR 0 1
29204: PUSH
29205: DOUBLE
29206: LD_INT 1
29208: DEC
29209: ST_TO_ADDR
29210: LD_INT 8
29212: PUSH
29213: FOR_TO
29214: IFFALSE 29262
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
29216: LD_OWVAR 2
29220: PUSH
29221: LD_VAR 0 1
29225: NONEQUAL
29226: PUSH
29227: LD_OWVAR 2
29231: PPUSH
29232: LD_VAR 0 1
29236: PPUSH
29237: CALL_OW 81
29241: PUSH
29242: LD_INT 2
29244: EQUAL
29245: AND
29246: IFFALSE 29260
// begin side := i ;
29248: LD_ADDR_VAR 0 3
29252: PUSH
29253: LD_VAR 0 1
29257: ST_TO_ADDR
// break ;
29258: GO 29262
// end ;
29260: GO 29213
29262: POP
29263: POP
// if not side then
29264: LD_VAR 0 3
29268: NOT
29269: IFFALSE 29273
// exit ;
29271: GO 29318
// for i := 1 to tmp do
29273: LD_ADDR_VAR 0 1
29277: PUSH
29278: DOUBLE
29279: LD_INT 1
29281: DEC
29282: ST_TO_ADDR
29283: LD_VAR 0 2
29287: PUSH
29288: FOR_TO
29289: IFFALSE 29316
// if Prob ( 60 ) then
29291: LD_INT 60
29293: PPUSH
29294: CALL_OW 13
29298: IFFALSE 29314
// SetSide ( i , side ) ;
29300: LD_VAR 0 1
29304: PPUSH
29305: LD_VAR 0 3
29309: PPUSH
29310: CALL_OW 235
29314: GO 29288
29316: POP
29317: POP
// end ;
29318: PPOPN 3
29320: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
29321: LD_EXP 74
29325: PUSH
29326: LD_EXP 87
29330: AND
29331: IFFALSE 29450
29333: GO 29335
29335: DISABLE
29336: LD_INT 0
29338: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
29339: LD_ADDR_VAR 0 1
29343: PUSH
29344: LD_INT 22
29346: PUSH
29347: LD_OWVAR 2
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 21
29358: PUSH
29359: LD_INT 1
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: LD_INT 3
29368: PUSH
29369: LD_INT 23
29371: PUSH
29372: LD_INT 0
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: LIST
29387: PPUSH
29388: CALL_OW 69
29392: PUSH
29393: FOR_IN
29394: IFFALSE 29448
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
29396: LD_VAR 0 1
29400: PPUSH
29401: CALL_OW 257
29405: PUSH
29406: LD_INT 1
29408: PUSH
29409: LD_INT 2
29411: PUSH
29412: LD_INT 3
29414: PUSH
29415: LD_INT 4
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: IN
29424: IFFALSE 29446
// SetClass ( un , rand ( 1 , 4 ) ) ;
29426: LD_VAR 0 1
29430: PPUSH
29431: LD_INT 1
29433: PPUSH
29434: LD_INT 4
29436: PPUSH
29437: CALL_OW 12
29441: PPUSH
29442: CALL_OW 336
29446: GO 29393
29448: POP
29449: POP
// end ;
29450: PPOPN 1
29452: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
29453: LD_EXP 74
29457: PUSH
29458: LD_EXP 86
29462: AND
29463: IFFALSE 29542
29465: GO 29467
29467: DISABLE
29468: LD_INT 0
29470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29471: LD_ADDR_VAR 0 1
29475: PUSH
29476: LD_INT 22
29478: PUSH
29479: LD_OWVAR 2
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: PUSH
29488: LD_INT 21
29490: PUSH
29491: LD_INT 3
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PPUSH
29502: CALL_OW 69
29506: ST_TO_ADDR
// if not tmp then
29507: LD_VAR 0 1
29511: NOT
29512: IFFALSE 29516
// exit ;
29514: GO 29542
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
29516: LD_VAR 0 1
29520: PUSH
29521: LD_INT 1
29523: PPUSH
29524: LD_VAR 0 1
29528: PPUSH
29529: CALL_OW 12
29533: ARRAY
29534: PPUSH
29535: LD_INT 100
29537: PPUSH
29538: CALL_OW 234
// end ;
29542: PPOPN 1
29544: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
29545: LD_EXP 74
29549: PUSH
29550: LD_EXP 88
29554: AND
29555: IFFALSE 29653
29557: GO 29559
29559: DISABLE
29560: LD_INT 0
29562: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29563: LD_ADDR_VAR 0 1
29567: PUSH
29568: LD_INT 22
29570: PUSH
29571: LD_OWVAR 2
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 21
29582: PUSH
29583: LD_INT 1
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PPUSH
29594: CALL_OW 69
29598: ST_TO_ADDR
// if not tmp then
29599: LD_VAR 0 1
29603: NOT
29604: IFFALSE 29608
// exit ;
29606: GO 29653
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
29608: LD_VAR 0 1
29612: PUSH
29613: LD_INT 1
29615: PPUSH
29616: LD_VAR 0 1
29620: PPUSH
29621: CALL_OW 12
29625: ARRAY
29626: PPUSH
29627: LD_INT 1
29629: PPUSH
29630: LD_INT 4
29632: PPUSH
29633: CALL_OW 12
29637: PPUSH
29638: LD_INT 3000
29640: PPUSH
29641: LD_INT 9000
29643: PPUSH
29644: CALL_OW 12
29648: PPUSH
29649: CALL_OW 492
// end ;
29653: PPOPN 1
29655: END
// every 0 0$1 trigger StreamModeActive and sDepot do
29656: LD_EXP 74
29660: PUSH
29661: LD_EXP 89
29665: AND
29666: IFFALSE 29686
29668: GO 29670
29670: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
29671: LD_INT 1
29673: PPUSH
29674: LD_OWVAR 2
29678: PPUSH
29679: LD_INT 0
29681: PPUSH
29682: CALL_OW 324
29686: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
29687: LD_EXP 74
29691: PUSH
29692: LD_EXP 90
29696: AND
29697: IFFALSE 29780
29699: GO 29701
29701: DISABLE
29702: LD_INT 0
29704: PPUSH
29705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29706: LD_ADDR_VAR 0 2
29710: PUSH
29711: LD_INT 22
29713: PUSH
29714: LD_OWVAR 2
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 21
29725: PUSH
29726: LD_INT 3
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PPUSH
29737: CALL_OW 69
29741: ST_TO_ADDR
// if not tmp then
29742: LD_VAR 0 2
29746: NOT
29747: IFFALSE 29751
// exit ;
29749: GO 29780
// for i in tmp do
29751: LD_ADDR_VAR 0 1
29755: PUSH
29756: LD_VAR 0 2
29760: PUSH
29761: FOR_IN
29762: IFFALSE 29778
// SetBLevel ( i , 10 ) ;
29764: LD_VAR 0 1
29768: PPUSH
29769: LD_INT 10
29771: PPUSH
29772: CALL_OW 241
29776: GO 29761
29778: POP
29779: POP
// end ;
29780: PPOPN 2
29782: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
29783: LD_EXP 74
29787: PUSH
29788: LD_EXP 91
29792: AND
29793: IFFALSE 29904
29795: GO 29797
29797: DISABLE
29798: LD_INT 0
29800: PPUSH
29801: PPUSH
29802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29803: LD_ADDR_VAR 0 3
29807: PUSH
29808: LD_INT 22
29810: PUSH
29811: LD_OWVAR 2
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 25
29822: PUSH
29823: LD_INT 1
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PPUSH
29834: CALL_OW 69
29838: ST_TO_ADDR
// if not tmp then
29839: LD_VAR 0 3
29843: NOT
29844: IFFALSE 29848
// exit ;
29846: GO 29904
// un := tmp [ rand ( 1 , tmp ) ] ;
29848: LD_ADDR_VAR 0 2
29852: PUSH
29853: LD_VAR 0 3
29857: PUSH
29858: LD_INT 1
29860: PPUSH
29861: LD_VAR 0 3
29865: PPUSH
29866: CALL_OW 12
29870: ARRAY
29871: ST_TO_ADDR
// if Crawls ( un ) then
29872: LD_VAR 0 2
29876: PPUSH
29877: CALL_OW 318
29881: IFFALSE 29892
// ComWalk ( un ) ;
29883: LD_VAR 0 2
29887: PPUSH
29888: CALL_OW 138
// SetClass ( un , class_sniper ) ;
29892: LD_VAR 0 2
29896: PPUSH
29897: LD_INT 5
29899: PPUSH
29900: CALL_OW 336
// end ;
29904: PPOPN 3
29906: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
29907: LD_EXP 74
29911: PUSH
29912: LD_EXP 92
29916: AND
29917: PUSH
29918: LD_OWVAR 67
29922: PUSH
29923: LD_INT 3
29925: LESS
29926: AND
29927: IFFALSE 29946
29929: GO 29931
29931: DISABLE
// Difficulty := Difficulty + 1 ;
29932: LD_ADDR_OWVAR 67
29936: PUSH
29937: LD_OWVAR 67
29941: PUSH
29942: LD_INT 1
29944: PLUS
29945: ST_TO_ADDR
29946: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
29947: LD_EXP 74
29951: PUSH
29952: LD_EXP 93
29956: AND
29957: IFFALSE 30060
29959: GO 29961
29961: DISABLE
29962: LD_INT 0
29964: PPUSH
// begin for i := 1 to 5 do
29965: LD_ADDR_VAR 0 1
29969: PUSH
29970: DOUBLE
29971: LD_INT 1
29973: DEC
29974: ST_TO_ADDR
29975: LD_INT 5
29977: PUSH
29978: FOR_TO
29979: IFFALSE 30058
// begin uc_nation := nation_nature ;
29981: LD_ADDR_OWVAR 21
29985: PUSH
29986: LD_INT 0
29988: ST_TO_ADDR
// uc_side := 0 ;
29989: LD_ADDR_OWVAR 20
29993: PUSH
29994: LD_INT 0
29996: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29997: LD_ADDR_OWVAR 29
30001: PUSH
30002: LD_INT 12
30004: PUSH
30005: LD_INT 12
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: ST_TO_ADDR
// hc_agressivity := 20 ;
30012: LD_ADDR_OWVAR 35
30016: PUSH
30017: LD_INT 20
30019: ST_TO_ADDR
// hc_class := class_tiger ;
30020: LD_ADDR_OWVAR 28
30024: PUSH
30025: LD_INT 14
30027: ST_TO_ADDR
// hc_gallery :=  ;
30028: LD_ADDR_OWVAR 33
30032: PUSH
30033: LD_STRING 
30035: ST_TO_ADDR
// hc_name :=  ;
30036: LD_ADDR_OWVAR 26
30040: PUSH
30041: LD_STRING 
30043: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
30044: CALL_OW 44
30048: PPUSH
30049: LD_INT 0
30051: PPUSH
30052: CALL_OW 51
// end ;
30056: GO 29978
30058: POP
30059: POP
// end ;
30060: PPOPN 1
30062: END
// every 0 0$1 trigger StreamModeActive and sBomb do
30063: LD_EXP 74
30067: PUSH
30068: LD_EXP 94
30072: AND
30073: IFFALSE 30082
30075: GO 30077
30077: DISABLE
// StreamSibBomb ;
30078: CALL 30083 0 0
30082: END
// export function StreamSibBomb ; var i , x , y ; begin
30083: LD_INT 0
30085: PPUSH
30086: PPUSH
30087: PPUSH
30088: PPUSH
// result := false ;
30089: LD_ADDR_VAR 0 1
30093: PUSH
30094: LD_INT 0
30096: ST_TO_ADDR
// for i := 1 to 16 do
30097: LD_ADDR_VAR 0 2
30101: PUSH
30102: DOUBLE
30103: LD_INT 1
30105: DEC
30106: ST_TO_ADDR
30107: LD_INT 16
30109: PUSH
30110: FOR_TO
30111: IFFALSE 30310
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
30113: LD_ADDR_VAR 0 3
30117: PUSH
30118: LD_INT 10
30120: PUSH
30121: LD_INT 20
30123: PUSH
30124: LD_INT 30
30126: PUSH
30127: LD_INT 40
30129: PUSH
30130: LD_INT 50
30132: PUSH
30133: LD_INT 60
30135: PUSH
30136: LD_INT 70
30138: PUSH
30139: LD_INT 80
30141: PUSH
30142: LD_INT 90
30144: PUSH
30145: LD_INT 100
30147: PUSH
30148: LD_INT 110
30150: PUSH
30151: LD_INT 120
30153: PUSH
30154: LD_INT 130
30156: PUSH
30157: LD_INT 140
30159: PUSH
30160: LD_INT 150
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 1
30182: PPUSH
30183: LD_INT 15
30185: PPUSH
30186: CALL_OW 12
30190: ARRAY
30191: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
30192: LD_ADDR_VAR 0 4
30196: PUSH
30197: LD_INT 10
30199: PUSH
30200: LD_INT 20
30202: PUSH
30203: LD_INT 30
30205: PUSH
30206: LD_INT 40
30208: PUSH
30209: LD_INT 50
30211: PUSH
30212: LD_INT 60
30214: PUSH
30215: LD_INT 70
30217: PUSH
30218: LD_INT 80
30220: PUSH
30221: LD_INT 90
30223: PUSH
30224: LD_INT 100
30226: PUSH
30227: LD_INT 110
30229: PUSH
30230: LD_INT 120
30232: PUSH
30233: LD_INT 130
30235: PUSH
30236: LD_INT 140
30238: PUSH
30239: LD_INT 150
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 1
30261: PPUSH
30262: LD_INT 15
30264: PPUSH
30265: CALL_OW 12
30269: ARRAY
30270: ST_TO_ADDR
// if ValidHex ( x , y ) then
30271: LD_VAR 0 3
30275: PPUSH
30276: LD_VAR 0 4
30280: PPUSH
30281: CALL_OW 488
30285: IFFALSE 30308
// begin result := [ x , y ] ;
30287: LD_ADDR_VAR 0 1
30291: PUSH
30292: LD_VAR 0 3
30296: PUSH
30297: LD_VAR 0 4
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: ST_TO_ADDR
// break ;
30306: GO 30310
// end ; end ;
30308: GO 30110
30310: POP
30311: POP
// if result then
30312: LD_VAR 0 1
30316: IFFALSE 30376
// begin ToLua ( playSibBomb() ) ;
30318: LD_STRING playSibBomb()
30320: PPUSH
30321: CALL_OW 559
// wait ( 0 0$14 ) ;
30325: LD_INT 490
30327: PPUSH
30328: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
30332: LD_VAR 0 1
30336: PUSH
30337: LD_INT 1
30339: ARRAY
30340: PPUSH
30341: LD_VAR 0 1
30345: PUSH
30346: LD_INT 2
30348: ARRAY
30349: PPUSH
30350: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
30354: LD_VAR 0 1
30358: PUSH
30359: LD_INT 1
30361: ARRAY
30362: PPUSH
30363: LD_VAR 0 1
30367: PUSH
30368: LD_INT 2
30370: ARRAY
30371: PPUSH
30372: CALL_OW 429
// end ; end ;
30376: LD_VAR 0 1
30380: RET
// every 0 0$1 trigger StreamModeActive and sReset do
30381: LD_EXP 74
30385: PUSH
30386: LD_EXP 96
30390: AND
30391: IFFALSE 30403
30393: GO 30395
30395: DISABLE
// YouLost (  ) ;
30396: LD_STRING 
30398: PPUSH
30399: CALL_OW 104
30403: END
// every 0 0$1 trigger StreamModeActive and sFog do
30404: LD_EXP 74
30408: PUSH
30409: LD_EXP 95
30413: AND
30414: IFFALSE 30428
30416: GO 30418
30418: DISABLE
// FogOff ( your_side ) ;
30419: LD_OWVAR 2
30423: PPUSH
30424: CALL_OW 344
30428: END
// every 0 0$1 trigger StreamModeActive and sSun do
30429: LD_EXP 74
30433: PUSH
30434: LD_EXP 97
30438: AND
30439: IFFALSE 30467
30441: GO 30443
30443: DISABLE
// begin solar_recharge_percent := 0 ;
30444: LD_ADDR_OWVAR 79
30448: PUSH
30449: LD_INT 0
30451: ST_TO_ADDR
// wait ( 5 5$00 ) ;
30452: LD_INT 10500
30454: PPUSH
30455: CALL_OW 67
// solar_recharge_percent := 100 ;
30459: LD_ADDR_OWVAR 79
30463: PUSH
30464: LD_INT 100
30466: ST_TO_ADDR
// end ;
30467: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
30468: LD_EXP 74
30472: PUSH
30473: LD_EXP 98
30477: AND
30478: IFFALSE 30717
30480: GO 30482
30482: DISABLE
30483: LD_INT 0
30485: PPUSH
30486: PPUSH
30487: PPUSH
// begin tmp := [ ] ;
30488: LD_ADDR_VAR 0 3
30492: PUSH
30493: EMPTY
30494: ST_TO_ADDR
// for i := 1 to 6 do
30495: LD_ADDR_VAR 0 1
30499: PUSH
30500: DOUBLE
30501: LD_INT 1
30503: DEC
30504: ST_TO_ADDR
30505: LD_INT 6
30507: PUSH
30508: FOR_TO
30509: IFFALSE 30614
// begin uc_nation := nation_nature ;
30511: LD_ADDR_OWVAR 21
30515: PUSH
30516: LD_INT 0
30518: ST_TO_ADDR
// uc_side := 0 ;
30519: LD_ADDR_OWVAR 20
30523: PUSH
30524: LD_INT 0
30526: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
30527: LD_ADDR_OWVAR 29
30531: PUSH
30532: LD_INT 12
30534: PUSH
30535: LD_INT 12
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: ST_TO_ADDR
// hc_agressivity := 20 ;
30542: LD_ADDR_OWVAR 35
30546: PUSH
30547: LD_INT 20
30549: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
30550: LD_ADDR_OWVAR 28
30554: PUSH
30555: LD_INT 17
30557: ST_TO_ADDR
// hc_gallery :=  ;
30558: LD_ADDR_OWVAR 33
30562: PUSH
30563: LD_STRING 
30565: ST_TO_ADDR
// hc_name :=  ;
30566: LD_ADDR_OWVAR 26
30570: PUSH
30571: LD_STRING 
30573: ST_TO_ADDR
// un := CreateHuman ;
30574: LD_ADDR_VAR 0 2
30578: PUSH
30579: CALL_OW 44
30583: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
30584: LD_VAR 0 2
30588: PPUSH
30589: LD_INT 1
30591: PPUSH
30592: CALL_OW 51
// tmp := tmp ^ un ;
30596: LD_ADDR_VAR 0 3
30600: PUSH
30601: LD_VAR 0 3
30605: PUSH
30606: LD_VAR 0 2
30610: ADD
30611: ST_TO_ADDR
// end ;
30612: GO 30508
30614: POP
30615: POP
// repeat wait ( 0 0$1 ) ;
30616: LD_INT 35
30618: PPUSH
30619: CALL_OW 67
// for un in tmp do
30623: LD_ADDR_VAR 0 2
30627: PUSH
30628: LD_VAR 0 3
30632: PUSH
30633: FOR_IN
30634: IFFALSE 30708
// begin if IsDead ( un ) then
30636: LD_VAR 0 2
30640: PPUSH
30641: CALL_OW 301
30645: IFFALSE 30665
// begin tmp := tmp diff un ;
30647: LD_ADDR_VAR 0 3
30651: PUSH
30652: LD_VAR 0 3
30656: PUSH
30657: LD_VAR 0 2
30661: DIFF
30662: ST_TO_ADDR
// continue ;
30663: GO 30633
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
30665: LD_VAR 0 2
30669: PPUSH
30670: LD_INT 3
30672: PUSH
30673: LD_INT 22
30675: PUSH
30676: LD_INT 0
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PPUSH
30687: CALL_OW 69
30691: PPUSH
30692: LD_VAR 0 2
30696: PPUSH
30697: CALL_OW 74
30701: PPUSH
30702: CALL_OW 115
// end ;
30706: GO 30633
30708: POP
30709: POP
// until not tmp ;
30710: LD_VAR 0 3
30714: NOT
30715: IFFALSE 30616
// end ;
30717: PPOPN 3
30719: END
// every 0 0$1 trigger StreamModeActive and sTroll do
30720: LD_EXP 74
30724: PUSH
30725: LD_EXP 99
30729: AND
30730: IFFALSE 30784
30732: GO 30734
30734: DISABLE
// begin ToLua ( displayTroll(); ) ;
30735: LD_STRING displayTroll();
30737: PPUSH
30738: CALL_OW 559
// wait ( 3 3$00 ) ;
30742: LD_INT 6300
30744: PPUSH
30745: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30749: LD_STRING hideTroll();
30751: PPUSH
30752: CALL_OW 559
// wait ( 1 1$00 ) ;
30756: LD_INT 2100
30758: PPUSH
30759: CALL_OW 67
// ToLua ( displayTroll(); ) ;
30763: LD_STRING displayTroll();
30765: PPUSH
30766: CALL_OW 559
// wait ( 1 1$00 ) ;
30770: LD_INT 2100
30772: PPUSH
30773: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30777: LD_STRING hideTroll();
30779: PPUSH
30780: CALL_OW 559
// end ;
30784: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
30785: LD_EXP 74
30789: PUSH
30790: LD_EXP 100
30794: AND
30795: IFFALSE 30858
30797: GO 30799
30799: DISABLE
30800: LD_INT 0
30802: PPUSH
// begin p := 0 ;
30803: LD_ADDR_VAR 0 1
30807: PUSH
30808: LD_INT 0
30810: ST_TO_ADDR
// repeat game_speed := 1 ;
30811: LD_ADDR_OWVAR 65
30815: PUSH
30816: LD_INT 1
30818: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30819: LD_INT 35
30821: PPUSH
30822: CALL_OW 67
// p := p + 1 ;
30826: LD_ADDR_VAR 0 1
30830: PUSH
30831: LD_VAR 0 1
30835: PUSH
30836: LD_INT 1
30838: PLUS
30839: ST_TO_ADDR
// until p >= 60 ;
30840: LD_VAR 0 1
30844: PUSH
30845: LD_INT 60
30847: GREATEREQUAL
30848: IFFALSE 30811
// game_speed := 4 ;
30850: LD_ADDR_OWVAR 65
30854: PUSH
30855: LD_INT 4
30857: ST_TO_ADDR
// end ;
30858: PPOPN 1
30860: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
30861: LD_EXP 74
30865: PUSH
30866: LD_EXP 101
30870: AND
30871: IFFALSE 31017
30873: GO 30875
30875: DISABLE
30876: LD_INT 0
30878: PPUSH
30879: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30880: LD_ADDR_VAR 0 1
30884: PUSH
30885: LD_INT 22
30887: PUSH
30888: LD_OWVAR 2
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 2
30899: PUSH
30900: LD_INT 30
30902: PUSH
30903: LD_INT 0
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 30
30912: PUSH
30913: LD_INT 1
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: LIST
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PPUSH
30929: CALL_OW 69
30933: ST_TO_ADDR
// if not depot then
30934: LD_VAR 0 1
30938: NOT
30939: IFFALSE 30943
// exit ;
30941: GO 31017
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
30943: LD_ADDR_VAR 0 2
30947: PUSH
30948: LD_VAR 0 1
30952: PUSH
30953: LD_INT 1
30955: PPUSH
30956: LD_VAR 0 1
30960: PPUSH
30961: CALL_OW 12
30965: ARRAY
30966: PPUSH
30967: CALL_OW 274
30971: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
30972: LD_VAR 0 2
30976: PPUSH
30977: LD_INT 1
30979: PPUSH
30980: LD_INT 0
30982: PPUSH
30983: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
30987: LD_VAR 0 2
30991: PPUSH
30992: LD_INT 2
30994: PPUSH
30995: LD_INT 0
30997: PPUSH
30998: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
31002: LD_VAR 0 2
31006: PPUSH
31007: LD_INT 3
31009: PPUSH
31010: LD_INT 0
31012: PPUSH
31013: CALL_OW 277
// end ;
31017: PPOPN 2
31019: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
31020: LD_EXP 74
31024: PUSH
31025: LD_EXP 102
31029: AND
31030: IFFALSE 31127
31032: GO 31034
31034: DISABLE
31035: LD_INT 0
31037: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31038: LD_ADDR_VAR 0 1
31042: PUSH
31043: LD_INT 22
31045: PUSH
31046: LD_OWVAR 2
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 21
31057: PUSH
31058: LD_INT 1
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: LD_INT 3
31067: PUSH
31068: LD_INT 23
31070: PUSH
31071: LD_INT 0
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: LIST
31086: PPUSH
31087: CALL_OW 69
31091: ST_TO_ADDR
// if not tmp then
31092: LD_VAR 0 1
31096: NOT
31097: IFFALSE 31101
// exit ;
31099: GO 31127
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
31101: LD_VAR 0 1
31105: PUSH
31106: LD_INT 1
31108: PPUSH
31109: LD_VAR 0 1
31113: PPUSH
31114: CALL_OW 12
31118: ARRAY
31119: PPUSH
31120: LD_INT 200
31122: PPUSH
31123: CALL_OW 234
// end ;
31127: PPOPN 1
31129: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
31130: LD_EXP 74
31134: PUSH
31135: LD_EXP 103
31139: AND
31140: IFFALSE 31219
31142: GO 31144
31144: DISABLE
31145: LD_INT 0
31147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
31148: LD_ADDR_VAR 0 1
31152: PUSH
31153: LD_INT 22
31155: PUSH
31156: LD_OWVAR 2
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 21
31167: PUSH
31168: LD_INT 2
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PPUSH
31179: CALL_OW 69
31183: ST_TO_ADDR
// if not tmp then
31184: LD_VAR 0 1
31188: NOT
31189: IFFALSE 31193
// exit ;
31191: GO 31219
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
31193: LD_VAR 0 1
31197: PUSH
31198: LD_INT 1
31200: PPUSH
31201: LD_VAR 0 1
31205: PPUSH
31206: CALL_OW 12
31210: ARRAY
31211: PPUSH
31212: LD_INT 60
31214: PPUSH
31215: CALL_OW 234
// end ;
31219: PPOPN 1
31221: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
31222: LD_EXP 74
31226: PUSH
31227: LD_EXP 104
31231: AND
31232: IFFALSE 31331
31234: GO 31236
31236: DISABLE
31237: LD_INT 0
31239: PPUSH
31240: PPUSH
// begin enable ;
31241: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
31242: LD_ADDR_VAR 0 1
31246: PUSH
31247: LD_INT 22
31249: PUSH
31250: LD_OWVAR 2
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 61
31261: PUSH
31262: EMPTY
31263: LIST
31264: PUSH
31265: LD_INT 33
31267: PUSH
31268: LD_INT 2
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: LIST
31279: PPUSH
31280: CALL_OW 69
31284: ST_TO_ADDR
// if not tmp then
31285: LD_VAR 0 1
31289: NOT
31290: IFFALSE 31294
// exit ;
31292: GO 31331
// for i in tmp do
31294: LD_ADDR_VAR 0 2
31298: PUSH
31299: LD_VAR 0 1
31303: PUSH
31304: FOR_IN
31305: IFFALSE 31329
// if IsControledBy ( i ) then
31307: LD_VAR 0 2
31311: PPUSH
31312: CALL_OW 312
31316: IFFALSE 31327
// ComUnlink ( i ) ;
31318: LD_VAR 0 2
31322: PPUSH
31323: CALL_OW 136
31327: GO 31304
31329: POP
31330: POP
// end ;
31331: PPOPN 2
31333: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
31334: LD_EXP 74
31338: PUSH
31339: LD_EXP 105
31343: AND
31344: IFFALSE 31484
31346: GO 31348
31348: DISABLE
31349: LD_INT 0
31351: PPUSH
31352: PPUSH
// begin ToLua ( displayPowell(); ) ;
31353: LD_STRING displayPowell();
31355: PPUSH
31356: CALL_OW 559
// uc_side := 0 ;
31360: LD_ADDR_OWVAR 20
31364: PUSH
31365: LD_INT 0
31367: ST_TO_ADDR
// uc_nation := 2 ;
31368: LD_ADDR_OWVAR 21
31372: PUSH
31373: LD_INT 2
31375: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
31376: LD_ADDR_OWVAR 37
31380: PUSH
31381: LD_INT 14
31383: ST_TO_ADDR
// vc_engine := engine_siberite ;
31384: LD_ADDR_OWVAR 39
31388: PUSH
31389: LD_INT 3
31391: ST_TO_ADDR
// vc_control := control_apeman ;
31392: LD_ADDR_OWVAR 38
31396: PUSH
31397: LD_INT 5
31399: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
31400: LD_ADDR_OWVAR 40
31404: PUSH
31405: LD_INT 29
31407: ST_TO_ADDR
// un := CreateVehicle ;
31408: LD_ADDR_VAR 0 2
31412: PUSH
31413: CALL_OW 45
31417: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31418: LD_VAR 0 2
31422: PPUSH
31423: LD_INT 1
31425: PPUSH
31426: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31430: LD_INT 35
31432: PPUSH
31433: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31437: LD_VAR 0 2
31441: PPUSH
31442: LD_INT 22
31444: PUSH
31445: LD_OWVAR 2
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PPUSH
31454: CALL_OW 69
31458: PPUSH
31459: LD_VAR 0 2
31463: PPUSH
31464: CALL_OW 74
31468: PPUSH
31469: CALL_OW 115
// until IsDead ( un ) ;
31473: LD_VAR 0 2
31477: PPUSH
31478: CALL_OW 301
31482: IFFALSE 31430
// end ;
31484: PPOPN 2
31486: END
// every 0 0$1 trigger StreamModeActive and sStu do
31487: LD_EXP 74
31491: PUSH
31492: LD_EXP 113
31496: AND
31497: IFFALSE 31513
31499: GO 31501
31501: DISABLE
// begin ToLua ( displayStucuk(); ) ;
31502: LD_STRING displayStucuk();
31504: PPUSH
31505: CALL_OW 559
// ResetFog ;
31509: CALL_OW 335
// end ;
31513: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
31514: LD_EXP 74
31518: PUSH
31519: LD_EXP 106
31523: AND
31524: IFFALSE 31665
31526: GO 31528
31528: DISABLE
31529: LD_INT 0
31531: PPUSH
31532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31533: LD_ADDR_VAR 0 2
31537: PUSH
31538: LD_INT 22
31540: PUSH
31541: LD_OWVAR 2
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 21
31552: PUSH
31553: LD_INT 1
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PPUSH
31564: CALL_OW 69
31568: ST_TO_ADDR
// if not tmp then
31569: LD_VAR 0 2
31573: NOT
31574: IFFALSE 31578
// exit ;
31576: GO 31665
// un := tmp [ rand ( 1 , tmp ) ] ;
31578: LD_ADDR_VAR 0 1
31582: PUSH
31583: LD_VAR 0 2
31587: PUSH
31588: LD_INT 1
31590: PPUSH
31591: LD_VAR 0 2
31595: PPUSH
31596: CALL_OW 12
31600: ARRAY
31601: ST_TO_ADDR
// SetSide ( un , 0 ) ;
31602: LD_VAR 0 1
31606: PPUSH
31607: LD_INT 0
31609: PPUSH
31610: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
31614: LD_VAR 0 1
31618: PPUSH
31619: LD_OWVAR 3
31623: PUSH
31624: LD_VAR 0 1
31628: DIFF
31629: PPUSH
31630: LD_VAR 0 1
31634: PPUSH
31635: CALL_OW 74
31639: PPUSH
31640: CALL_OW 115
// wait ( 0 0$20 ) ;
31644: LD_INT 700
31646: PPUSH
31647: CALL_OW 67
// SetSide ( un , your_side ) ;
31651: LD_VAR 0 1
31655: PPUSH
31656: LD_OWVAR 2
31660: PPUSH
31661: CALL_OW 235
// end ;
31665: PPOPN 2
31667: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
31668: LD_EXP 74
31672: PUSH
31673: LD_EXP 107
31677: AND
31678: IFFALSE 31784
31680: GO 31682
31682: DISABLE
31683: LD_INT 0
31685: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31686: LD_ADDR_VAR 0 1
31690: PUSH
31691: LD_INT 22
31693: PUSH
31694: LD_OWVAR 2
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 2
31705: PUSH
31706: LD_INT 30
31708: PUSH
31709: LD_INT 0
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 30
31718: PUSH
31719: LD_INT 1
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: LIST
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PPUSH
31735: CALL_OW 69
31739: ST_TO_ADDR
// if not depot then
31740: LD_VAR 0 1
31744: NOT
31745: IFFALSE 31749
// exit ;
31747: GO 31784
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
31749: LD_VAR 0 1
31753: PUSH
31754: LD_INT 1
31756: ARRAY
31757: PPUSH
31758: CALL_OW 250
31762: PPUSH
31763: LD_VAR 0 1
31767: PUSH
31768: LD_INT 1
31770: ARRAY
31771: PPUSH
31772: CALL_OW 251
31776: PPUSH
31777: LD_INT 70
31779: PPUSH
31780: CALL_OW 495
// end ;
31784: PPOPN 1
31786: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
31787: LD_EXP 74
31791: PUSH
31792: LD_EXP 108
31796: AND
31797: IFFALSE 32008
31799: GO 31801
31801: DISABLE
31802: LD_INT 0
31804: PPUSH
31805: PPUSH
31806: PPUSH
31807: PPUSH
31808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31809: LD_ADDR_VAR 0 5
31813: PUSH
31814: LD_INT 22
31816: PUSH
31817: LD_OWVAR 2
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 21
31828: PUSH
31829: LD_INT 1
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PPUSH
31840: CALL_OW 69
31844: ST_TO_ADDR
// if not tmp then
31845: LD_VAR 0 5
31849: NOT
31850: IFFALSE 31854
// exit ;
31852: GO 32008
// for i in tmp do
31854: LD_ADDR_VAR 0 1
31858: PUSH
31859: LD_VAR 0 5
31863: PUSH
31864: FOR_IN
31865: IFFALSE 32006
// begin d := rand ( 0 , 5 ) ;
31867: LD_ADDR_VAR 0 4
31871: PUSH
31872: LD_INT 0
31874: PPUSH
31875: LD_INT 5
31877: PPUSH
31878: CALL_OW 12
31882: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
31883: LD_ADDR_VAR 0 2
31887: PUSH
31888: LD_VAR 0 1
31892: PPUSH
31893: CALL_OW 250
31897: PPUSH
31898: LD_VAR 0 4
31902: PPUSH
31903: LD_INT 3
31905: PPUSH
31906: LD_INT 12
31908: PPUSH
31909: CALL_OW 12
31913: PPUSH
31914: CALL_OW 272
31918: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
31919: LD_ADDR_VAR 0 3
31923: PUSH
31924: LD_VAR 0 1
31928: PPUSH
31929: CALL_OW 251
31933: PPUSH
31934: LD_VAR 0 4
31938: PPUSH
31939: LD_INT 3
31941: PPUSH
31942: LD_INT 12
31944: PPUSH
31945: CALL_OW 12
31949: PPUSH
31950: CALL_OW 273
31954: ST_TO_ADDR
// if ValidHex ( x , y ) then
31955: LD_VAR 0 2
31959: PPUSH
31960: LD_VAR 0 3
31964: PPUSH
31965: CALL_OW 488
31969: IFFALSE 32004
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
31971: LD_VAR 0 1
31975: PPUSH
31976: LD_VAR 0 2
31980: PPUSH
31981: LD_VAR 0 3
31985: PPUSH
31986: LD_INT 3
31988: PPUSH
31989: LD_INT 6
31991: PPUSH
31992: CALL_OW 12
31996: PPUSH
31997: LD_INT 1
31999: PPUSH
32000: CALL_OW 483
// end ;
32004: GO 31864
32006: POP
32007: POP
// end ;
32008: PPOPN 5
32010: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
32011: LD_EXP 74
32015: PUSH
32016: LD_EXP 109
32020: AND
32021: IFFALSE 32115
32023: GO 32025
32025: DISABLE
32026: LD_INT 0
32028: PPUSH
32029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
32030: LD_ADDR_VAR 0 2
32034: PUSH
32035: LD_INT 22
32037: PUSH
32038: LD_OWVAR 2
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 32
32049: PUSH
32050: LD_INT 1
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 21
32059: PUSH
32060: LD_INT 2
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: LIST
32071: PPUSH
32072: CALL_OW 69
32076: ST_TO_ADDR
// if not tmp then
32077: LD_VAR 0 2
32081: NOT
32082: IFFALSE 32086
// exit ;
32084: GO 32115
// for i in tmp do
32086: LD_ADDR_VAR 0 1
32090: PUSH
32091: LD_VAR 0 2
32095: PUSH
32096: FOR_IN
32097: IFFALSE 32113
// SetFuel ( i , 0 ) ;
32099: LD_VAR 0 1
32103: PPUSH
32104: LD_INT 0
32106: PPUSH
32107: CALL_OW 240
32111: GO 32096
32113: POP
32114: POP
// end ;
32115: PPOPN 2
32117: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
32118: LD_EXP 74
32122: PUSH
32123: LD_EXP 110
32127: AND
32128: IFFALSE 32194
32130: GO 32132
32132: DISABLE
32133: LD_INT 0
32135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
32136: LD_ADDR_VAR 0 1
32140: PUSH
32141: LD_INT 22
32143: PUSH
32144: LD_OWVAR 2
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 30
32155: PUSH
32156: LD_INT 29
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PPUSH
32167: CALL_OW 69
32171: ST_TO_ADDR
// if not tmp then
32172: LD_VAR 0 1
32176: NOT
32177: IFFALSE 32181
// exit ;
32179: GO 32194
// DestroyUnit ( tmp [ 1 ] ) ;
32181: LD_VAR 0 1
32185: PUSH
32186: LD_INT 1
32188: ARRAY
32189: PPUSH
32190: CALL_OW 65
// end ;
32194: PPOPN 1
32196: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
32197: LD_EXP 74
32201: PUSH
32202: LD_EXP 112
32206: AND
32207: IFFALSE 32336
32209: GO 32211
32211: DISABLE
32212: LD_INT 0
32214: PPUSH
// begin uc_side := 0 ;
32215: LD_ADDR_OWVAR 20
32219: PUSH
32220: LD_INT 0
32222: ST_TO_ADDR
// uc_nation := nation_arabian ;
32223: LD_ADDR_OWVAR 21
32227: PUSH
32228: LD_INT 2
32230: ST_TO_ADDR
// hc_gallery :=  ;
32231: LD_ADDR_OWVAR 33
32235: PUSH
32236: LD_STRING 
32238: ST_TO_ADDR
// hc_name :=  ;
32239: LD_ADDR_OWVAR 26
32243: PUSH
32244: LD_STRING 
32246: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
32247: LD_INT 1
32249: PPUSH
32250: LD_INT 11
32252: PPUSH
32253: LD_INT 10
32255: PPUSH
32256: CALL_OW 380
// un := CreateHuman ;
32260: LD_ADDR_VAR 0 1
32264: PUSH
32265: CALL_OW 44
32269: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32270: LD_VAR 0 1
32274: PPUSH
32275: LD_INT 1
32277: PPUSH
32278: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
32282: LD_INT 35
32284: PPUSH
32285: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
32289: LD_VAR 0 1
32293: PPUSH
32294: LD_INT 22
32296: PUSH
32297: LD_OWVAR 2
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PPUSH
32306: CALL_OW 69
32310: PPUSH
32311: LD_VAR 0 1
32315: PPUSH
32316: CALL_OW 74
32320: PPUSH
32321: CALL_OW 115
// until IsDead ( un ) ;
32325: LD_VAR 0 1
32329: PPUSH
32330: CALL_OW 301
32334: IFFALSE 32282
// end ;
32336: PPOPN 1
32338: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
32339: LD_EXP 74
32343: PUSH
32344: LD_EXP 114
32348: AND
32349: IFFALSE 32361
32351: GO 32353
32353: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
32354: LD_STRING earthquake(getX(game), 0, 32)
32356: PPUSH
32357: CALL_OW 559
32361: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
32362: LD_EXP 74
32366: PUSH
32367: LD_EXP 115
32371: AND
32372: IFFALSE 32463
32374: GO 32376
32376: DISABLE
32377: LD_INT 0
32379: PPUSH
// begin enable ;
32380: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
32381: LD_ADDR_VAR 0 1
32385: PUSH
32386: LD_INT 22
32388: PUSH
32389: LD_OWVAR 2
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 21
32400: PUSH
32401: LD_INT 2
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 33
32410: PUSH
32411: LD_INT 3
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: LIST
32422: PPUSH
32423: CALL_OW 69
32427: ST_TO_ADDR
// if not tmp then
32428: LD_VAR 0 1
32432: NOT
32433: IFFALSE 32437
// exit ;
32435: GO 32463
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32437: LD_VAR 0 1
32441: PUSH
32442: LD_INT 1
32444: PPUSH
32445: LD_VAR 0 1
32449: PPUSH
32450: CALL_OW 12
32454: ARRAY
32455: PPUSH
32456: LD_INT 1
32458: PPUSH
32459: CALL_OW 234
// end ;
32463: PPOPN 1
32465: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
32466: LD_EXP 74
32470: PUSH
32471: LD_EXP 116
32475: AND
32476: IFFALSE 32617
32478: GO 32480
32480: DISABLE
32481: LD_INT 0
32483: PPUSH
32484: PPUSH
32485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32486: LD_ADDR_VAR 0 3
32490: PUSH
32491: LD_INT 22
32493: PUSH
32494: LD_OWVAR 2
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 25
32505: PUSH
32506: LD_INT 1
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PPUSH
32517: CALL_OW 69
32521: ST_TO_ADDR
// if not tmp then
32522: LD_VAR 0 3
32526: NOT
32527: IFFALSE 32531
// exit ;
32529: GO 32617
// un := tmp [ rand ( 1 , tmp ) ] ;
32531: LD_ADDR_VAR 0 2
32535: PUSH
32536: LD_VAR 0 3
32540: PUSH
32541: LD_INT 1
32543: PPUSH
32544: LD_VAR 0 3
32548: PPUSH
32549: CALL_OW 12
32553: ARRAY
32554: ST_TO_ADDR
// if Crawls ( un ) then
32555: LD_VAR 0 2
32559: PPUSH
32560: CALL_OW 318
32564: IFFALSE 32575
// ComWalk ( un ) ;
32566: LD_VAR 0 2
32570: PPUSH
32571: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
32575: LD_VAR 0 2
32579: PPUSH
32580: LD_INT 9
32582: PPUSH
32583: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
32587: LD_INT 28
32589: PPUSH
32590: LD_OWVAR 2
32594: PPUSH
32595: LD_INT 2
32597: PPUSH
32598: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
32602: LD_INT 29
32604: PPUSH
32605: LD_OWVAR 2
32609: PPUSH
32610: LD_INT 2
32612: PPUSH
32613: CALL_OW 322
// end ;
32617: PPOPN 3
32619: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
32620: LD_EXP 74
32624: PUSH
32625: LD_EXP 117
32629: AND
32630: IFFALSE 32741
32632: GO 32634
32634: DISABLE
32635: LD_INT 0
32637: PPUSH
32638: PPUSH
32639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32640: LD_ADDR_VAR 0 3
32644: PUSH
32645: LD_INT 22
32647: PUSH
32648: LD_OWVAR 2
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 25
32659: PUSH
32660: LD_INT 1
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PPUSH
32671: CALL_OW 69
32675: ST_TO_ADDR
// if not tmp then
32676: LD_VAR 0 3
32680: NOT
32681: IFFALSE 32685
// exit ;
32683: GO 32741
// un := tmp [ rand ( 1 , tmp ) ] ;
32685: LD_ADDR_VAR 0 2
32689: PUSH
32690: LD_VAR 0 3
32694: PUSH
32695: LD_INT 1
32697: PPUSH
32698: LD_VAR 0 3
32702: PPUSH
32703: CALL_OW 12
32707: ARRAY
32708: ST_TO_ADDR
// if Crawls ( un ) then
32709: LD_VAR 0 2
32713: PPUSH
32714: CALL_OW 318
32718: IFFALSE 32729
// ComWalk ( un ) ;
32720: LD_VAR 0 2
32724: PPUSH
32725: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32729: LD_VAR 0 2
32733: PPUSH
32734: LD_INT 8
32736: PPUSH
32737: CALL_OW 336
// end ;
32741: PPOPN 3
32743: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
32744: LD_EXP 74
32748: PUSH
32749: LD_EXP 118
32753: AND
32754: IFFALSE 32898
32756: GO 32758
32758: DISABLE
32759: LD_INT 0
32761: PPUSH
32762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
32763: LD_ADDR_VAR 0 2
32767: PUSH
32768: LD_INT 22
32770: PUSH
32771: LD_OWVAR 2
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 21
32782: PUSH
32783: LD_INT 2
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 2
32792: PUSH
32793: LD_INT 34
32795: PUSH
32796: LD_INT 12
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 34
32805: PUSH
32806: LD_INT 51
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 34
32815: PUSH
32816: LD_INT 32
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: LIST
32833: PPUSH
32834: CALL_OW 69
32838: ST_TO_ADDR
// if not tmp then
32839: LD_VAR 0 2
32843: NOT
32844: IFFALSE 32848
// exit ;
32846: GO 32898
// for i in tmp do
32848: LD_ADDR_VAR 0 1
32852: PUSH
32853: LD_VAR 0 2
32857: PUSH
32858: FOR_IN
32859: IFFALSE 32896
// if GetCargo ( i , mat_artifact ) = 0 then
32861: LD_VAR 0 1
32865: PPUSH
32866: LD_INT 4
32868: PPUSH
32869: CALL_OW 289
32873: PUSH
32874: LD_INT 0
32876: EQUAL
32877: IFFALSE 32894
// SetCargo ( i , mat_siberit , 100 ) ;
32879: LD_VAR 0 1
32883: PPUSH
32884: LD_INT 3
32886: PPUSH
32887: LD_INT 100
32889: PPUSH
32890: CALL_OW 290
32894: GO 32858
32896: POP
32897: POP
// end ;
32898: PPOPN 2
32900: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
32901: LD_EXP 74
32905: PUSH
32906: LD_EXP 119
32910: AND
32911: IFFALSE 33094
32913: GO 32915
32915: DISABLE
32916: LD_INT 0
32918: PPUSH
32919: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32920: LD_ADDR_VAR 0 2
32924: PUSH
32925: LD_INT 22
32927: PUSH
32928: LD_OWVAR 2
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PPUSH
32937: CALL_OW 69
32941: ST_TO_ADDR
// if not tmp then
32942: LD_VAR 0 2
32946: NOT
32947: IFFALSE 32951
// exit ;
32949: GO 33094
// for i := 1 to 2 do
32951: LD_ADDR_VAR 0 1
32955: PUSH
32956: DOUBLE
32957: LD_INT 1
32959: DEC
32960: ST_TO_ADDR
32961: LD_INT 2
32963: PUSH
32964: FOR_TO
32965: IFFALSE 33092
// begin uc_side := your_side ;
32967: LD_ADDR_OWVAR 20
32971: PUSH
32972: LD_OWVAR 2
32976: ST_TO_ADDR
// uc_nation := nation_american ;
32977: LD_ADDR_OWVAR 21
32981: PUSH
32982: LD_INT 1
32984: ST_TO_ADDR
// vc_chassis := us_morphling ;
32985: LD_ADDR_OWVAR 37
32989: PUSH
32990: LD_INT 5
32992: ST_TO_ADDR
// vc_engine := engine_siberite ;
32993: LD_ADDR_OWVAR 39
32997: PUSH
32998: LD_INT 3
33000: ST_TO_ADDR
// vc_control := control_computer ;
33001: LD_ADDR_OWVAR 38
33005: PUSH
33006: LD_INT 3
33008: ST_TO_ADDR
// vc_weapon := us_double_laser ;
33009: LD_ADDR_OWVAR 40
33013: PUSH
33014: LD_INT 10
33016: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
33017: LD_VAR 0 2
33021: PUSH
33022: LD_INT 1
33024: ARRAY
33025: PPUSH
33026: CALL_OW 310
33030: NOT
33031: IFFALSE 33078
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
33033: CALL_OW 45
33037: PPUSH
33038: LD_VAR 0 2
33042: PUSH
33043: LD_INT 1
33045: ARRAY
33046: PPUSH
33047: CALL_OW 250
33051: PPUSH
33052: LD_VAR 0 2
33056: PUSH
33057: LD_INT 1
33059: ARRAY
33060: PPUSH
33061: CALL_OW 251
33065: PPUSH
33066: LD_INT 12
33068: PPUSH
33069: LD_INT 1
33071: PPUSH
33072: CALL_OW 50
33076: GO 33090
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
33078: CALL_OW 45
33082: PPUSH
33083: LD_INT 1
33085: PPUSH
33086: CALL_OW 51
// end ;
33090: GO 32964
33092: POP
33093: POP
// end ;
33094: PPOPN 2
33096: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
33097: LD_EXP 74
33101: PUSH
33102: LD_EXP 120
33106: AND
33107: IFFALSE 33329
33109: GO 33111
33111: DISABLE
33112: LD_INT 0
33114: PPUSH
33115: PPUSH
33116: PPUSH
33117: PPUSH
33118: PPUSH
33119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33120: LD_ADDR_VAR 0 6
33124: PUSH
33125: LD_INT 22
33127: PUSH
33128: LD_OWVAR 2
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 21
33139: PUSH
33140: LD_INT 1
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 3
33149: PUSH
33150: LD_INT 23
33152: PUSH
33153: LD_INT 0
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: LIST
33168: PPUSH
33169: CALL_OW 69
33173: ST_TO_ADDR
// if not tmp then
33174: LD_VAR 0 6
33178: NOT
33179: IFFALSE 33183
// exit ;
33181: GO 33329
// s1 := rand ( 1 , 4 ) ;
33183: LD_ADDR_VAR 0 2
33187: PUSH
33188: LD_INT 1
33190: PPUSH
33191: LD_INT 4
33193: PPUSH
33194: CALL_OW 12
33198: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
33199: LD_ADDR_VAR 0 4
33203: PUSH
33204: LD_VAR 0 6
33208: PUSH
33209: LD_INT 1
33211: ARRAY
33212: PPUSH
33213: LD_VAR 0 2
33217: PPUSH
33218: CALL_OW 259
33222: ST_TO_ADDR
// if s1 = 1 then
33223: LD_VAR 0 2
33227: PUSH
33228: LD_INT 1
33230: EQUAL
33231: IFFALSE 33251
// s2 := rand ( 2 , 4 ) else
33233: LD_ADDR_VAR 0 3
33237: PUSH
33238: LD_INT 2
33240: PPUSH
33241: LD_INT 4
33243: PPUSH
33244: CALL_OW 12
33248: ST_TO_ADDR
33249: GO 33259
// s2 := 1 ;
33251: LD_ADDR_VAR 0 3
33255: PUSH
33256: LD_INT 1
33258: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
33259: LD_ADDR_VAR 0 5
33263: PUSH
33264: LD_VAR 0 6
33268: PUSH
33269: LD_INT 1
33271: ARRAY
33272: PPUSH
33273: LD_VAR 0 3
33277: PPUSH
33278: CALL_OW 259
33282: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
33283: LD_VAR 0 6
33287: PUSH
33288: LD_INT 1
33290: ARRAY
33291: PPUSH
33292: LD_VAR 0 2
33296: PPUSH
33297: LD_VAR 0 5
33301: PPUSH
33302: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
33306: LD_VAR 0 6
33310: PUSH
33311: LD_INT 1
33313: ARRAY
33314: PPUSH
33315: LD_VAR 0 3
33319: PPUSH
33320: LD_VAR 0 4
33324: PPUSH
33325: CALL_OW 237
// end ;
33329: PPOPN 6
33331: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
33332: LD_EXP 74
33336: PUSH
33337: LD_EXP 121
33341: AND
33342: IFFALSE 33421
33344: GO 33346
33346: DISABLE
33347: LD_INT 0
33349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
33350: LD_ADDR_VAR 0 1
33354: PUSH
33355: LD_INT 22
33357: PUSH
33358: LD_OWVAR 2
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 30
33369: PUSH
33370: LD_INT 3
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PPUSH
33381: CALL_OW 69
33385: ST_TO_ADDR
// if not tmp then
33386: LD_VAR 0 1
33390: NOT
33391: IFFALSE 33395
// exit ;
33393: GO 33421
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
33395: LD_VAR 0 1
33399: PUSH
33400: LD_INT 1
33402: PPUSH
33403: LD_VAR 0 1
33407: PPUSH
33408: CALL_OW 12
33412: ARRAY
33413: PPUSH
33414: LD_INT 1
33416: PPUSH
33417: CALL_OW 234
// end ;
33421: PPOPN 1
33423: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
33424: LD_EXP 74
33428: PUSH
33429: LD_EXP 122
33433: AND
33434: IFFALSE 33546
33436: GO 33438
33438: DISABLE
33439: LD_INT 0
33441: PPUSH
33442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
33443: LD_ADDR_VAR 0 2
33447: PUSH
33448: LD_INT 22
33450: PUSH
33451: LD_OWVAR 2
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 2
33462: PUSH
33463: LD_INT 30
33465: PUSH
33466: LD_INT 27
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 30
33475: PUSH
33476: LD_INT 26
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 30
33485: PUSH
33486: LD_INT 28
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PPUSH
33503: CALL_OW 69
33507: ST_TO_ADDR
// if not tmp then
33508: LD_VAR 0 2
33512: NOT
33513: IFFALSE 33517
// exit ;
33515: GO 33546
// for i in tmp do
33517: LD_ADDR_VAR 0 1
33521: PUSH
33522: LD_VAR 0 2
33526: PUSH
33527: FOR_IN
33528: IFFALSE 33544
// SetLives ( i , 1 ) ;
33530: LD_VAR 0 1
33534: PPUSH
33535: LD_INT 1
33537: PPUSH
33538: CALL_OW 234
33542: GO 33527
33544: POP
33545: POP
// end ;
33546: PPOPN 2
33548: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
33549: LD_EXP 74
33553: PUSH
33554: LD_EXP 123
33558: AND
33559: IFFALSE 33833
33561: GO 33563
33563: DISABLE
33564: LD_INT 0
33566: PPUSH
33567: PPUSH
33568: PPUSH
// begin i := rand ( 1 , 7 ) ;
33569: LD_ADDR_VAR 0 1
33573: PUSH
33574: LD_INT 1
33576: PPUSH
33577: LD_INT 7
33579: PPUSH
33580: CALL_OW 12
33584: ST_TO_ADDR
// case i of 1 :
33585: LD_VAR 0 1
33589: PUSH
33590: LD_INT 1
33592: DOUBLE
33593: EQUAL
33594: IFTRUE 33598
33596: GO 33608
33598: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
33599: LD_STRING earthquake(getX(game), 0, 32)
33601: PPUSH
33602: CALL_OW 559
33606: GO 33833
33608: LD_INT 2
33610: DOUBLE
33611: EQUAL
33612: IFTRUE 33616
33614: GO 33630
33616: POP
// begin ToLua ( displayStucuk(); ) ;
33617: LD_STRING displayStucuk();
33619: PPUSH
33620: CALL_OW 559
// ResetFog ;
33624: CALL_OW 335
// end ; 3 :
33628: GO 33833
33630: LD_INT 3
33632: DOUBLE
33633: EQUAL
33634: IFTRUE 33638
33636: GO 33742
33638: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33639: LD_ADDR_VAR 0 2
33643: PUSH
33644: LD_INT 22
33646: PUSH
33647: LD_OWVAR 2
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: PUSH
33656: LD_INT 25
33658: PUSH
33659: LD_INT 1
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PPUSH
33670: CALL_OW 69
33674: ST_TO_ADDR
// if not tmp then
33675: LD_VAR 0 2
33679: NOT
33680: IFFALSE 33684
// exit ;
33682: GO 33833
// un := tmp [ rand ( 1 , tmp ) ] ;
33684: LD_ADDR_VAR 0 3
33688: PUSH
33689: LD_VAR 0 2
33693: PUSH
33694: LD_INT 1
33696: PPUSH
33697: LD_VAR 0 2
33701: PPUSH
33702: CALL_OW 12
33706: ARRAY
33707: ST_TO_ADDR
// if Crawls ( un ) then
33708: LD_VAR 0 3
33712: PPUSH
33713: CALL_OW 318
33717: IFFALSE 33728
// ComWalk ( un ) ;
33719: LD_VAR 0 3
33723: PPUSH
33724: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33728: LD_VAR 0 3
33732: PPUSH
33733: LD_INT 8
33735: PPUSH
33736: CALL_OW 336
// end ; 4 :
33740: GO 33833
33742: LD_INT 4
33744: DOUBLE
33745: EQUAL
33746: IFTRUE 33750
33748: GO 33811
33750: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33751: LD_ADDR_VAR 0 2
33755: PUSH
33756: LD_INT 22
33758: PUSH
33759: LD_OWVAR 2
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 30
33770: PUSH
33771: LD_INT 29
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PPUSH
33782: CALL_OW 69
33786: ST_TO_ADDR
// if not tmp then
33787: LD_VAR 0 2
33791: NOT
33792: IFFALSE 33796
// exit ;
33794: GO 33833
// DestroyUnit ( tmp [ 1 ] ) ;
33796: LD_VAR 0 2
33800: PUSH
33801: LD_INT 1
33803: ARRAY
33804: PPUSH
33805: CALL_OW 65
// end ; 5 .. 7 :
33809: GO 33833
33811: LD_INT 5
33813: DOUBLE
33814: GREATEREQUAL
33815: IFFALSE 33823
33817: LD_INT 7
33819: DOUBLE
33820: LESSEQUAL
33821: IFTRUE 33825
33823: GO 33832
33825: POP
// StreamSibBomb ; end ;
33826: CALL 30083 0 0
33830: GO 33833
33832: POP
// end ;
33833: PPOPN 3
33835: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
33836: LD_EXP 74
33840: PUSH
33841: LD_EXP 124
33845: AND
33846: IFFALSE 34002
33848: GO 33850
33850: DISABLE
33851: LD_INT 0
33853: PPUSH
33854: PPUSH
33855: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
33856: LD_ADDR_VAR 0 2
33860: PUSH
33861: LD_INT 81
33863: PUSH
33864: LD_OWVAR 2
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 2
33875: PUSH
33876: LD_INT 21
33878: PUSH
33879: LD_INT 1
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 21
33888: PUSH
33889: LD_INT 2
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: LIST
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PPUSH
33905: CALL_OW 69
33909: ST_TO_ADDR
// if not tmp then
33910: LD_VAR 0 2
33914: NOT
33915: IFFALSE 33919
// exit ;
33917: GO 34002
// p := 0 ;
33919: LD_ADDR_VAR 0 3
33923: PUSH
33924: LD_INT 0
33926: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33927: LD_INT 35
33929: PPUSH
33930: CALL_OW 67
// p := p + 1 ;
33934: LD_ADDR_VAR 0 3
33938: PUSH
33939: LD_VAR 0 3
33943: PUSH
33944: LD_INT 1
33946: PLUS
33947: ST_TO_ADDR
// for i in tmp do
33948: LD_ADDR_VAR 0 1
33952: PUSH
33953: LD_VAR 0 2
33957: PUSH
33958: FOR_IN
33959: IFFALSE 33990
// if GetLives ( i ) < 1000 then
33961: LD_VAR 0 1
33965: PPUSH
33966: CALL_OW 256
33970: PUSH
33971: LD_INT 1000
33973: LESS
33974: IFFALSE 33988
// SetLives ( i , 1000 ) ;
33976: LD_VAR 0 1
33980: PPUSH
33981: LD_INT 1000
33983: PPUSH
33984: CALL_OW 234
33988: GO 33958
33990: POP
33991: POP
// until p > 20 ;
33992: LD_VAR 0 3
33996: PUSH
33997: LD_INT 20
33999: GREATER
34000: IFFALSE 33927
// end ;
34002: PPOPN 3
34004: END
// every 0 0$1 trigger StreamModeActive and sTime do
34005: LD_EXP 74
34009: PUSH
34010: LD_EXP 125
34014: AND
34015: IFFALSE 34050
34017: GO 34019
34019: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
34020: LD_INT 28
34022: PPUSH
34023: LD_OWVAR 2
34027: PPUSH
34028: LD_INT 2
34030: PPUSH
34031: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
34035: LD_INT 30
34037: PPUSH
34038: LD_OWVAR 2
34042: PPUSH
34043: LD_INT 2
34045: PPUSH
34046: CALL_OW 322
// end ;
34050: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
34051: LD_EXP 74
34055: PUSH
34056: LD_EXP 126
34060: AND
34061: IFFALSE 34182
34063: GO 34065
34065: DISABLE
34066: LD_INT 0
34068: PPUSH
34069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34070: LD_ADDR_VAR 0 2
34074: PUSH
34075: LD_INT 22
34077: PUSH
34078: LD_OWVAR 2
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 21
34089: PUSH
34090: LD_INT 1
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 3
34099: PUSH
34100: LD_INT 23
34102: PUSH
34103: LD_INT 0
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: LIST
34118: PPUSH
34119: CALL_OW 69
34123: ST_TO_ADDR
// if not tmp then
34124: LD_VAR 0 2
34128: NOT
34129: IFFALSE 34133
// exit ;
34131: GO 34182
// for i in tmp do
34133: LD_ADDR_VAR 0 1
34137: PUSH
34138: LD_VAR 0 2
34142: PUSH
34143: FOR_IN
34144: IFFALSE 34180
// begin if Crawls ( i ) then
34146: LD_VAR 0 1
34150: PPUSH
34151: CALL_OW 318
34155: IFFALSE 34166
// ComWalk ( i ) ;
34157: LD_VAR 0 1
34161: PPUSH
34162: CALL_OW 138
// SetClass ( i , 2 ) ;
34166: LD_VAR 0 1
34170: PPUSH
34171: LD_INT 2
34173: PPUSH
34174: CALL_OW 336
// end ;
34178: GO 34143
34180: POP
34181: POP
// end ;
34182: PPOPN 2
34184: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
34185: LD_EXP 74
34189: PUSH
34190: LD_EXP 127
34194: AND
34195: IFFALSE 34476
34197: GO 34199
34199: DISABLE
34200: LD_INT 0
34202: PPUSH
34203: PPUSH
34204: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
34205: LD_OWVAR 2
34209: PPUSH
34210: LD_INT 9
34212: PPUSH
34213: LD_INT 1
34215: PPUSH
34216: LD_INT 1
34218: PPUSH
34219: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
34223: LD_INT 9
34225: PPUSH
34226: LD_OWVAR 2
34230: PPUSH
34231: CALL_OW 343
// uc_side := 9 ;
34235: LD_ADDR_OWVAR 20
34239: PUSH
34240: LD_INT 9
34242: ST_TO_ADDR
// uc_nation := 2 ;
34243: LD_ADDR_OWVAR 21
34247: PUSH
34248: LD_INT 2
34250: ST_TO_ADDR
// hc_name := Dark Warrior ;
34251: LD_ADDR_OWVAR 26
34255: PUSH
34256: LD_STRING Dark Warrior
34258: ST_TO_ADDR
// hc_gallery :=  ;
34259: LD_ADDR_OWVAR 33
34263: PUSH
34264: LD_STRING 
34266: ST_TO_ADDR
// hc_noskilllimit := true ;
34267: LD_ADDR_OWVAR 76
34271: PUSH
34272: LD_INT 1
34274: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
34275: LD_ADDR_OWVAR 31
34279: PUSH
34280: LD_INT 30
34282: PUSH
34283: LD_INT 30
34285: PUSH
34286: LD_INT 30
34288: PUSH
34289: LD_INT 30
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: ST_TO_ADDR
// un := CreateHuman ;
34298: LD_ADDR_VAR 0 3
34302: PUSH
34303: CALL_OW 44
34307: ST_TO_ADDR
// hc_noskilllimit := false ;
34308: LD_ADDR_OWVAR 76
34312: PUSH
34313: LD_INT 0
34315: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
34316: LD_VAR 0 3
34320: PPUSH
34321: LD_INT 1
34323: PPUSH
34324: CALL_OW 51
// p := 0 ;
34328: LD_ADDR_VAR 0 2
34332: PUSH
34333: LD_INT 0
34335: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
34336: LD_INT 35
34338: PPUSH
34339: CALL_OW 67
// p := p + 1 ;
34343: LD_ADDR_VAR 0 2
34347: PUSH
34348: LD_VAR 0 2
34352: PUSH
34353: LD_INT 1
34355: PLUS
34356: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
34357: LD_VAR 0 3
34361: PPUSH
34362: CALL_OW 256
34366: PUSH
34367: LD_INT 1000
34369: LESS
34370: IFFALSE 34384
// SetLives ( un , 1000 ) ;
34372: LD_VAR 0 3
34376: PPUSH
34377: LD_INT 1000
34379: PPUSH
34380: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
34384: LD_VAR 0 3
34388: PPUSH
34389: LD_INT 81
34391: PUSH
34392: LD_OWVAR 2
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 91
34403: PUSH
34404: LD_VAR 0 3
34408: PUSH
34409: LD_INT 30
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: LIST
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PPUSH
34421: CALL_OW 69
34425: PPUSH
34426: LD_VAR 0 3
34430: PPUSH
34431: CALL_OW 74
34435: PPUSH
34436: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
34440: LD_VAR 0 2
34444: PUSH
34445: LD_INT 60
34447: GREATER
34448: PUSH
34449: LD_VAR 0 3
34453: PPUSH
34454: CALL_OW 301
34458: OR
34459: IFFALSE 34336
// if un then
34461: LD_VAR 0 3
34465: IFFALSE 34476
// RemoveUnit ( un ) ;
34467: LD_VAR 0 3
34471: PPUSH
34472: CALL_OW 64
// end ;
34476: PPOPN 3
34478: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34479: LD_INT 0
34481: PPUSH
// case cmd of 301 :
34482: LD_VAR 0 1
34486: PUSH
34487: LD_INT 301
34489: DOUBLE
34490: EQUAL
34491: IFTRUE 34495
34493: GO 34527
34495: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
34496: LD_VAR 0 6
34500: PPUSH
34501: LD_VAR 0 7
34505: PPUSH
34506: LD_VAR 0 8
34510: PPUSH
34511: LD_VAR 0 4
34515: PPUSH
34516: LD_VAR 0 5
34520: PPUSH
34521: CALL 35728 0 5
34525: GO 34648
34527: LD_INT 302
34529: DOUBLE
34530: EQUAL
34531: IFTRUE 34535
34533: GO 34572
34535: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
34536: LD_VAR 0 6
34540: PPUSH
34541: LD_VAR 0 7
34545: PPUSH
34546: LD_VAR 0 8
34550: PPUSH
34551: LD_VAR 0 9
34555: PPUSH
34556: LD_VAR 0 4
34560: PPUSH
34561: LD_VAR 0 5
34565: PPUSH
34566: CALL 35819 0 6
34570: GO 34648
34572: LD_INT 303
34574: DOUBLE
34575: EQUAL
34576: IFTRUE 34580
34578: GO 34617
34580: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
34581: LD_VAR 0 6
34585: PPUSH
34586: LD_VAR 0 7
34590: PPUSH
34591: LD_VAR 0 8
34595: PPUSH
34596: LD_VAR 0 9
34600: PPUSH
34601: LD_VAR 0 4
34605: PPUSH
34606: LD_VAR 0 5
34610: PPUSH
34611: CALL 34653 0 6
34615: GO 34648
34617: LD_INT 304
34619: DOUBLE
34620: EQUAL
34621: IFTRUE 34625
34623: GO 34647
34625: POP
// hHackTeleport ( unit , x , y ) ; end ;
34626: LD_VAR 0 2
34630: PPUSH
34631: LD_VAR 0 4
34635: PPUSH
34636: LD_VAR 0 5
34640: PPUSH
34641: CALL 36412 0 3
34645: GO 34648
34647: POP
// end ;
34648: LD_VAR 0 12
34652: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
34653: LD_INT 0
34655: PPUSH
34656: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
34657: LD_VAR 0 1
34661: PUSH
34662: LD_INT 1
34664: LESS
34665: PUSH
34666: LD_VAR 0 1
34670: PUSH
34671: LD_INT 3
34673: GREATER
34674: OR
34675: PUSH
34676: LD_VAR 0 5
34680: PPUSH
34681: LD_VAR 0 6
34685: PPUSH
34686: CALL_OW 428
34690: OR
34691: IFFALSE 34695
// exit ;
34693: GO 35415
// uc_side := your_side ;
34695: LD_ADDR_OWVAR 20
34699: PUSH
34700: LD_OWVAR 2
34704: ST_TO_ADDR
// uc_nation := nation ;
34705: LD_ADDR_OWVAR 21
34709: PUSH
34710: LD_VAR 0 1
34714: ST_TO_ADDR
// bc_level = 1 ;
34715: LD_ADDR_OWVAR 43
34719: PUSH
34720: LD_INT 1
34722: ST_TO_ADDR
// case btype of 1 :
34723: LD_VAR 0 2
34727: PUSH
34728: LD_INT 1
34730: DOUBLE
34731: EQUAL
34732: IFTRUE 34736
34734: GO 34747
34736: POP
// bc_type := b_depot ; 2 :
34737: LD_ADDR_OWVAR 42
34741: PUSH
34742: LD_INT 0
34744: ST_TO_ADDR
34745: GO 35359
34747: LD_INT 2
34749: DOUBLE
34750: EQUAL
34751: IFTRUE 34755
34753: GO 34766
34755: POP
// bc_type := b_warehouse ; 3 :
34756: LD_ADDR_OWVAR 42
34760: PUSH
34761: LD_INT 1
34763: ST_TO_ADDR
34764: GO 35359
34766: LD_INT 3
34768: DOUBLE
34769: EQUAL
34770: IFTRUE 34774
34772: GO 34785
34774: POP
// bc_type := b_lab ; 4 .. 9 :
34775: LD_ADDR_OWVAR 42
34779: PUSH
34780: LD_INT 6
34782: ST_TO_ADDR
34783: GO 35359
34785: LD_INT 4
34787: DOUBLE
34788: GREATEREQUAL
34789: IFFALSE 34797
34791: LD_INT 9
34793: DOUBLE
34794: LESSEQUAL
34795: IFTRUE 34799
34797: GO 34851
34799: POP
// begin bc_type := b_lab_half ;
34800: LD_ADDR_OWVAR 42
34804: PUSH
34805: LD_INT 7
34807: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
34808: LD_ADDR_OWVAR 44
34812: PUSH
34813: LD_INT 10
34815: PUSH
34816: LD_INT 11
34818: PUSH
34819: LD_INT 12
34821: PUSH
34822: LD_INT 15
34824: PUSH
34825: LD_INT 14
34827: PUSH
34828: LD_INT 13
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: PUSH
34839: LD_VAR 0 2
34843: PUSH
34844: LD_INT 3
34846: MINUS
34847: ARRAY
34848: ST_TO_ADDR
// end ; 10 .. 13 :
34849: GO 35359
34851: LD_INT 10
34853: DOUBLE
34854: GREATEREQUAL
34855: IFFALSE 34863
34857: LD_INT 13
34859: DOUBLE
34860: LESSEQUAL
34861: IFTRUE 34865
34863: GO 34942
34865: POP
// begin bc_type := b_lab_full ;
34866: LD_ADDR_OWVAR 42
34870: PUSH
34871: LD_INT 8
34873: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
34874: LD_ADDR_OWVAR 44
34878: PUSH
34879: LD_INT 10
34881: PUSH
34882: LD_INT 12
34884: PUSH
34885: LD_INT 14
34887: PUSH
34888: LD_INT 13
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: PUSH
34897: LD_VAR 0 2
34901: PUSH
34902: LD_INT 9
34904: MINUS
34905: ARRAY
34906: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
34907: LD_ADDR_OWVAR 45
34911: PUSH
34912: LD_INT 11
34914: PUSH
34915: LD_INT 15
34917: PUSH
34918: LD_INT 12
34920: PUSH
34921: LD_INT 15
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: PUSH
34930: LD_VAR 0 2
34934: PUSH
34935: LD_INT 9
34937: MINUS
34938: ARRAY
34939: ST_TO_ADDR
// end ; 14 :
34940: GO 35359
34942: LD_INT 14
34944: DOUBLE
34945: EQUAL
34946: IFTRUE 34950
34948: GO 34961
34950: POP
// bc_type := b_workshop ; 15 :
34951: LD_ADDR_OWVAR 42
34955: PUSH
34956: LD_INT 2
34958: ST_TO_ADDR
34959: GO 35359
34961: LD_INT 15
34963: DOUBLE
34964: EQUAL
34965: IFTRUE 34969
34967: GO 34980
34969: POP
// bc_type := b_factory ; 16 :
34970: LD_ADDR_OWVAR 42
34974: PUSH
34975: LD_INT 3
34977: ST_TO_ADDR
34978: GO 35359
34980: LD_INT 16
34982: DOUBLE
34983: EQUAL
34984: IFTRUE 34988
34986: GO 34999
34988: POP
// bc_type := b_ext_gun ; 17 :
34989: LD_ADDR_OWVAR 42
34993: PUSH
34994: LD_INT 17
34996: ST_TO_ADDR
34997: GO 35359
34999: LD_INT 17
35001: DOUBLE
35002: EQUAL
35003: IFTRUE 35007
35005: GO 35035
35007: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
35008: LD_ADDR_OWVAR 42
35012: PUSH
35013: LD_INT 19
35015: PUSH
35016: LD_INT 23
35018: PUSH
35019: LD_INT 19
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: LIST
35026: PUSH
35027: LD_VAR 0 1
35031: ARRAY
35032: ST_TO_ADDR
35033: GO 35359
35035: LD_INT 18
35037: DOUBLE
35038: EQUAL
35039: IFTRUE 35043
35041: GO 35054
35043: POP
// bc_type := b_ext_radar ; 19 :
35044: LD_ADDR_OWVAR 42
35048: PUSH
35049: LD_INT 20
35051: ST_TO_ADDR
35052: GO 35359
35054: LD_INT 19
35056: DOUBLE
35057: EQUAL
35058: IFTRUE 35062
35060: GO 35073
35062: POP
// bc_type := b_ext_radio ; 20 :
35063: LD_ADDR_OWVAR 42
35067: PUSH
35068: LD_INT 22
35070: ST_TO_ADDR
35071: GO 35359
35073: LD_INT 20
35075: DOUBLE
35076: EQUAL
35077: IFTRUE 35081
35079: GO 35092
35081: POP
// bc_type := b_ext_siberium ; 21 :
35082: LD_ADDR_OWVAR 42
35086: PUSH
35087: LD_INT 21
35089: ST_TO_ADDR
35090: GO 35359
35092: LD_INT 21
35094: DOUBLE
35095: EQUAL
35096: IFTRUE 35100
35098: GO 35111
35100: POP
// bc_type := b_ext_computer ; 22 :
35101: LD_ADDR_OWVAR 42
35105: PUSH
35106: LD_INT 24
35108: ST_TO_ADDR
35109: GO 35359
35111: LD_INT 22
35113: DOUBLE
35114: EQUAL
35115: IFTRUE 35119
35117: GO 35130
35119: POP
// bc_type := b_ext_track ; 23 :
35120: LD_ADDR_OWVAR 42
35124: PUSH
35125: LD_INT 16
35127: ST_TO_ADDR
35128: GO 35359
35130: LD_INT 23
35132: DOUBLE
35133: EQUAL
35134: IFTRUE 35138
35136: GO 35149
35138: POP
// bc_type := b_ext_laser ; 24 :
35139: LD_ADDR_OWVAR 42
35143: PUSH
35144: LD_INT 25
35146: ST_TO_ADDR
35147: GO 35359
35149: LD_INT 24
35151: DOUBLE
35152: EQUAL
35153: IFTRUE 35157
35155: GO 35168
35157: POP
// bc_type := b_control_tower ; 25 :
35158: LD_ADDR_OWVAR 42
35162: PUSH
35163: LD_INT 36
35165: ST_TO_ADDR
35166: GO 35359
35168: LD_INT 25
35170: DOUBLE
35171: EQUAL
35172: IFTRUE 35176
35174: GO 35187
35176: POP
// bc_type := b_breastwork ; 26 :
35177: LD_ADDR_OWVAR 42
35181: PUSH
35182: LD_INT 31
35184: ST_TO_ADDR
35185: GO 35359
35187: LD_INT 26
35189: DOUBLE
35190: EQUAL
35191: IFTRUE 35195
35193: GO 35206
35195: POP
// bc_type := b_bunker ; 27 :
35196: LD_ADDR_OWVAR 42
35200: PUSH
35201: LD_INT 32
35203: ST_TO_ADDR
35204: GO 35359
35206: LD_INT 27
35208: DOUBLE
35209: EQUAL
35210: IFTRUE 35214
35212: GO 35225
35214: POP
// bc_type := b_turret ; 28 :
35215: LD_ADDR_OWVAR 42
35219: PUSH
35220: LD_INT 33
35222: ST_TO_ADDR
35223: GO 35359
35225: LD_INT 28
35227: DOUBLE
35228: EQUAL
35229: IFTRUE 35233
35231: GO 35244
35233: POP
// bc_type := b_armoury ; 29 :
35234: LD_ADDR_OWVAR 42
35238: PUSH
35239: LD_INT 4
35241: ST_TO_ADDR
35242: GO 35359
35244: LD_INT 29
35246: DOUBLE
35247: EQUAL
35248: IFTRUE 35252
35250: GO 35263
35252: POP
// bc_type := b_barracks ; 30 :
35253: LD_ADDR_OWVAR 42
35257: PUSH
35258: LD_INT 5
35260: ST_TO_ADDR
35261: GO 35359
35263: LD_INT 30
35265: DOUBLE
35266: EQUAL
35267: IFTRUE 35271
35269: GO 35282
35271: POP
// bc_type := b_solar_power ; 31 :
35272: LD_ADDR_OWVAR 42
35276: PUSH
35277: LD_INT 27
35279: ST_TO_ADDR
35280: GO 35359
35282: LD_INT 31
35284: DOUBLE
35285: EQUAL
35286: IFTRUE 35290
35288: GO 35301
35290: POP
// bc_type := b_oil_power ; 32 :
35291: LD_ADDR_OWVAR 42
35295: PUSH
35296: LD_INT 26
35298: ST_TO_ADDR
35299: GO 35359
35301: LD_INT 32
35303: DOUBLE
35304: EQUAL
35305: IFTRUE 35309
35307: GO 35320
35309: POP
// bc_type := b_siberite_power ; 33 :
35310: LD_ADDR_OWVAR 42
35314: PUSH
35315: LD_INT 28
35317: ST_TO_ADDR
35318: GO 35359
35320: LD_INT 33
35322: DOUBLE
35323: EQUAL
35324: IFTRUE 35328
35326: GO 35339
35328: POP
// bc_type := b_oil_mine ; 34 :
35329: LD_ADDR_OWVAR 42
35333: PUSH
35334: LD_INT 29
35336: ST_TO_ADDR
35337: GO 35359
35339: LD_INT 34
35341: DOUBLE
35342: EQUAL
35343: IFTRUE 35347
35345: GO 35358
35347: POP
// bc_type := b_siberite_mine ; end ;
35348: LD_ADDR_OWVAR 42
35352: PUSH
35353: LD_INT 30
35355: ST_TO_ADDR
35356: GO 35359
35358: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
35359: LD_ADDR_VAR 0 8
35363: PUSH
35364: LD_VAR 0 5
35368: PPUSH
35369: LD_VAR 0 6
35373: PPUSH
35374: LD_VAR 0 3
35378: PPUSH
35379: CALL_OW 47
35383: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
35384: LD_OWVAR 42
35388: PUSH
35389: LD_INT 32
35391: PUSH
35392: LD_INT 33
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: IN
35399: IFFALSE 35415
// PlaceWeaponTurret ( b , weapon ) ;
35401: LD_VAR 0 8
35405: PPUSH
35406: LD_VAR 0 4
35410: PPUSH
35411: CALL_OW 431
// end ;
35415: LD_VAR 0 7
35419: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
35420: LD_INT 0
35422: PPUSH
35423: PPUSH
35424: PPUSH
35425: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35426: LD_ADDR_VAR 0 4
35430: PUSH
35431: LD_INT 22
35433: PUSH
35434: LD_OWVAR 2
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 2
35445: PUSH
35446: LD_INT 30
35448: PUSH
35449: LD_INT 0
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 30
35458: PUSH
35459: LD_INT 1
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: LIST
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PPUSH
35475: CALL_OW 69
35479: ST_TO_ADDR
// if not tmp then
35480: LD_VAR 0 4
35484: NOT
35485: IFFALSE 35489
// exit ;
35487: GO 35548
// for i in tmp do
35489: LD_ADDR_VAR 0 2
35493: PUSH
35494: LD_VAR 0 4
35498: PUSH
35499: FOR_IN
35500: IFFALSE 35546
// for j = 1 to 3 do
35502: LD_ADDR_VAR 0 3
35506: PUSH
35507: DOUBLE
35508: LD_INT 1
35510: DEC
35511: ST_TO_ADDR
35512: LD_INT 3
35514: PUSH
35515: FOR_TO
35516: IFFALSE 35542
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
35518: LD_VAR 0 2
35522: PPUSH
35523: CALL_OW 274
35527: PPUSH
35528: LD_VAR 0 3
35532: PPUSH
35533: LD_INT 99999
35535: PPUSH
35536: CALL_OW 277
35540: GO 35515
35542: POP
35543: POP
35544: GO 35499
35546: POP
35547: POP
// end ;
35548: LD_VAR 0 1
35552: RET
// export function hHackSetLevel10 ; var i , j ; begin
35553: LD_INT 0
35555: PPUSH
35556: PPUSH
35557: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35558: LD_ADDR_VAR 0 2
35562: PUSH
35563: LD_INT 21
35565: PUSH
35566: LD_INT 1
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PPUSH
35573: CALL_OW 69
35577: PUSH
35578: FOR_IN
35579: IFFALSE 35631
// if IsSelected ( i ) then
35581: LD_VAR 0 2
35585: PPUSH
35586: CALL_OW 306
35590: IFFALSE 35629
// begin for j := 1 to 4 do
35592: LD_ADDR_VAR 0 3
35596: PUSH
35597: DOUBLE
35598: LD_INT 1
35600: DEC
35601: ST_TO_ADDR
35602: LD_INT 4
35604: PUSH
35605: FOR_TO
35606: IFFALSE 35627
// SetSkill ( i , j , 10 ) ;
35608: LD_VAR 0 2
35612: PPUSH
35613: LD_VAR 0 3
35617: PPUSH
35618: LD_INT 10
35620: PPUSH
35621: CALL_OW 237
35625: GO 35605
35627: POP
35628: POP
// end ;
35629: GO 35578
35631: POP
35632: POP
// end ;
35633: LD_VAR 0 1
35637: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
35638: LD_INT 0
35640: PPUSH
35641: PPUSH
35642: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
35643: LD_ADDR_VAR 0 2
35647: PUSH
35648: LD_INT 22
35650: PUSH
35651: LD_OWVAR 2
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 21
35662: PUSH
35663: LD_INT 1
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PPUSH
35674: CALL_OW 69
35678: PUSH
35679: FOR_IN
35680: IFFALSE 35721
// begin for j := 1 to 4 do
35682: LD_ADDR_VAR 0 3
35686: PUSH
35687: DOUBLE
35688: LD_INT 1
35690: DEC
35691: ST_TO_ADDR
35692: LD_INT 4
35694: PUSH
35695: FOR_TO
35696: IFFALSE 35717
// SetSkill ( i , j , 10 ) ;
35698: LD_VAR 0 2
35702: PPUSH
35703: LD_VAR 0 3
35707: PPUSH
35708: LD_INT 10
35710: PPUSH
35711: CALL_OW 237
35715: GO 35695
35717: POP
35718: POP
// end ;
35719: GO 35679
35721: POP
35722: POP
// end ;
35723: LD_VAR 0 1
35727: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
35728: LD_INT 0
35730: PPUSH
// uc_side := your_side ;
35731: LD_ADDR_OWVAR 20
35735: PUSH
35736: LD_OWVAR 2
35740: ST_TO_ADDR
// uc_nation := nation ;
35741: LD_ADDR_OWVAR 21
35745: PUSH
35746: LD_VAR 0 1
35750: ST_TO_ADDR
// InitHc ;
35751: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
35755: LD_INT 0
35757: PPUSH
35758: LD_VAR 0 2
35762: PPUSH
35763: LD_VAR 0 3
35767: PPUSH
35768: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
35772: LD_VAR 0 4
35776: PPUSH
35777: LD_VAR 0 5
35781: PPUSH
35782: CALL_OW 428
35786: PUSH
35787: LD_INT 0
35789: EQUAL
35790: IFFALSE 35814
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
35792: CALL_OW 44
35796: PPUSH
35797: LD_VAR 0 4
35801: PPUSH
35802: LD_VAR 0 5
35806: PPUSH
35807: LD_INT 1
35809: PPUSH
35810: CALL_OW 48
// end ;
35814: LD_VAR 0 6
35818: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
35819: LD_INT 0
35821: PPUSH
35822: PPUSH
// uc_side := your_side ;
35823: LD_ADDR_OWVAR 20
35827: PUSH
35828: LD_OWVAR 2
35832: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
35833: LD_VAR 0 1
35837: PUSH
35838: LD_INT 1
35840: PUSH
35841: LD_INT 2
35843: PUSH
35844: LD_INT 3
35846: PUSH
35847: LD_INT 4
35849: PUSH
35850: LD_INT 5
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: IN
35860: IFFALSE 35872
// uc_nation := nation_american else
35862: LD_ADDR_OWVAR 21
35866: PUSH
35867: LD_INT 1
35869: ST_TO_ADDR
35870: GO 35915
// if chassis in [ 11 , 12 , 13 , 14 ] then
35872: LD_VAR 0 1
35876: PUSH
35877: LD_INT 11
35879: PUSH
35880: LD_INT 12
35882: PUSH
35883: LD_INT 13
35885: PUSH
35886: LD_INT 14
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: IN
35895: IFFALSE 35907
// uc_nation := nation_arabian else
35897: LD_ADDR_OWVAR 21
35901: PUSH
35902: LD_INT 2
35904: ST_TO_ADDR
35905: GO 35915
// uc_nation := nation_russian ;
35907: LD_ADDR_OWVAR 21
35911: PUSH
35912: LD_INT 3
35914: ST_TO_ADDR
// vc_chassis := chassis ;
35915: LD_ADDR_OWVAR 37
35919: PUSH
35920: LD_VAR 0 1
35924: ST_TO_ADDR
// vc_engine := engine ;
35925: LD_ADDR_OWVAR 39
35929: PUSH
35930: LD_VAR 0 2
35934: ST_TO_ADDR
// vc_control := control ;
35935: LD_ADDR_OWVAR 38
35939: PUSH
35940: LD_VAR 0 3
35944: ST_TO_ADDR
// vc_weapon := weapon ;
35945: LD_ADDR_OWVAR 40
35949: PUSH
35950: LD_VAR 0 4
35954: ST_TO_ADDR
// un := CreateVehicle ;
35955: LD_ADDR_VAR 0 8
35959: PUSH
35960: CALL_OW 45
35964: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35965: LD_VAR 0 8
35969: PPUSH
35970: LD_INT 0
35972: PPUSH
35973: LD_INT 5
35975: PPUSH
35976: CALL_OW 12
35980: PPUSH
35981: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
35985: LD_VAR 0 8
35989: PPUSH
35990: LD_VAR 0 5
35994: PPUSH
35995: LD_VAR 0 6
35999: PPUSH
36000: LD_INT 1
36002: PPUSH
36003: CALL_OW 48
// end ;
36007: LD_VAR 0 7
36011: RET
// export hInvincible ; every 1 do
36012: GO 36014
36014: DISABLE
// hInvincible := [ ] ;
36015: LD_ADDR_EXP 128
36019: PUSH
36020: EMPTY
36021: ST_TO_ADDR
36022: END
// every 10 do var i ;
36023: GO 36025
36025: DISABLE
36026: LD_INT 0
36028: PPUSH
// begin enable ;
36029: ENABLE
// if not hInvincible then
36030: LD_EXP 128
36034: NOT
36035: IFFALSE 36039
// exit ;
36037: GO 36083
// for i in hInvincible do
36039: LD_ADDR_VAR 0 1
36043: PUSH
36044: LD_EXP 128
36048: PUSH
36049: FOR_IN
36050: IFFALSE 36081
// if GetLives ( i ) < 1000 then
36052: LD_VAR 0 1
36056: PPUSH
36057: CALL_OW 256
36061: PUSH
36062: LD_INT 1000
36064: LESS
36065: IFFALSE 36079
// SetLives ( i , 1000 ) ;
36067: LD_VAR 0 1
36071: PPUSH
36072: LD_INT 1000
36074: PPUSH
36075: CALL_OW 234
36079: GO 36049
36081: POP
36082: POP
// end ;
36083: PPOPN 1
36085: END
// export function hHackInvincible ; var i ; begin
36086: LD_INT 0
36088: PPUSH
36089: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
36090: LD_ADDR_VAR 0 2
36094: PUSH
36095: LD_INT 2
36097: PUSH
36098: LD_INT 21
36100: PUSH
36101: LD_INT 1
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 21
36110: PUSH
36111: LD_INT 2
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: LIST
36122: PPUSH
36123: CALL_OW 69
36127: PUSH
36128: FOR_IN
36129: IFFALSE 36190
// if IsSelected ( i ) then
36131: LD_VAR 0 2
36135: PPUSH
36136: CALL_OW 306
36140: IFFALSE 36188
// begin if i in hInvincible then
36142: LD_VAR 0 2
36146: PUSH
36147: LD_EXP 128
36151: IN
36152: IFFALSE 36172
// hInvincible := hInvincible diff i else
36154: LD_ADDR_EXP 128
36158: PUSH
36159: LD_EXP 128
36163: PUSH
36164: LD_VAR 0 2
36168: DIFF
36169: ST_TO_ADDR
36170: GO 36188
// hInvincible := hInvincible union i ;
36172: LD_ADDR_EXP 128
36176: PUSH
36177: LD_EXP 128
36181: PUSH
36182: LD_VAR 0 2
36186: UNION
36187: ST_TO_ADDR
// end ;
36188: GO 36128
36190: POP
36191: POP
// end ;
36192: LD_VAR 0 1
36196: RET
// export function hHackInvisible ; var i , j ; begin
36197: LD_INT 0
36199: PPUSH
36200: PPUSH
36201: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
36202: LD_ADDR_VAR 0 2
36206: PUSH
36207: LD_INT 21
36209: PUSH
36210: LD_INT 1
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PPUSH
36217: CALL_OW 69
36221: PUSH
36222: FOR_IN
36223: IFFALSE 36247
// if IsSelected ( i ) then
36225: LD_VAR 0 2
36229: PPUSH
36230: CALL_OW 306
36234: IFFALSE 36245
// ComForceInvisible ( i ) ;
36236: LD_VAR 0 2
36240: PPUSH
36241: CALL_OW 496
36245: GO 36222
36247: POP
36248: POP
// end ;
36249: LD_VAR 0 1
36253: RET
// export function hHackChangeYourSide ; begin
36254: LD_INT 0
36256: PPUSH
// if your_side = 8 then
36257: LD_OWVAR 2
36261: PUSH
36262: LD_INT 8
36264: EQUAL
36265: IFFALSE 36277
// your_side := 0 else
36267: LD_ADDR_OWVAR 2
36271: PUSH
36272: LD_INT 0
36274: ST_TO_ADDR
36275: GO 36291
// your_side := your_side + 1 ;
36277: LD_ADDR_OWVAR 2
36281: PUSH
36282: LD_OWVAR 2
36286: PUSH
36287: LD_INT 1
36289: PLUS
36290: ST_TO_ADDR
// end ;
36291: LD_VAR 0 1
36295: RET
// export function hHackChangeUnitSide ; var i , j ; begin
36296: LD_INT 0
36298: PPUSH
36299: PPUSH
36300: PPUSH
// for i in all_units do
36301: LD_ADDR_VAR 0 2
36305: PUSH
36306: LD_OWVAR 3
36310: PUSH
36311: FOR_IN
36312: IFFALSE 36390
// if IsSelected ( i ) then
36314: LD_VAR 0 2
36318: PPUSH
36319: CALL_OW 306
36323: IFFALSE 36388
// begin j := GetSide ( i ) ;
36325: LD_ADDR_VAR 0 3
36329: PUSH
36330: LD_VAR 0 2
36334: PPUSH
36335: CALL_OW 255
36339: ST_TO_ADDR
// if j = 8 then
36340: LD_VAR 0 3
36344: PUSH
36345: LD_INT 8
36347: EQUAL
36348: IFFALSE 36360
// j := 0 else
36350: LD_ADDR_VAR 0 3
36354: PUSH
36355: LD_INT 0
36357: ST_TO_ADDR
36358: GO 36374
// j := j + 1 ;
36360: LD_ADDR_VAR 0 3
36364: PUSH
36365: LD_VAR 0 3
36369: PUSH
36370: LD_INT 1
36372: PLUS
36373: ST_TO_ADDR
// SetSide ( i , j ) ;
36374: LD_VAR 0 2
36378: PPUSH
36379: LD_VAR 0 3
36383: PPUSH
36384: CALL_OW 235
// end ;
36388: GO 36311
36390: POP
36391: POP
// end ;
36392: LD_VAR 0 1
36396: RET
// export function hHackFog ; begin
36397: LD_INT 0
36399: PPUSH
// FogOff ( true ) ;
36400: LD_INT 1
36402: PPUSH
36403: CALL_OW 344
// end ;
36407: LD_VAR 0 1
36411: RET
// export function hHackTeleport ( unit , x , y ) ; begin
36412: LD_INT 0
36414: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
36415: LD_VAR 0 1
36419: PPUSH
36420: LD_VAR 0 2
36424: PPUSH
36425: LD_VAR 0 3
36429: PPUSH
36430: LD_INT 1
36432: PPUSH
36433: LD_INT 1
36435: PPUSH
36436: CALL_OW 483
// CenterOnXY ( x , y ) ;
36440: LD_VAR 0 2
36444: PPUSH
36445: LD_VAR 0 3
36449: PPUSH
36450: CALL_OW 84
// end ; end_of_file
36454: LD_VAR 0 4
36458: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
36459: LD_INT 0
36461: PPUSH
36462: PPUSH
36463: PPUSH
36464: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
36465: LD_VAR 0 1
36469: PPUSH
36470: CALL_OW 264
36474: PUSH
36475: LD_EXP 62
36479: EQUAL
36480: IFFALSE 36552
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36482: LD_INT 68
36484: PPUSH
36485: LD_VAR 0 1
36489: PPUSH
36490: CALL_OW 255
36494: PPUSH
36495: CALL_OW 321
36499: PUSH
36500: LD_INT 2
36502: EQUAL
36503: IFFALSE 36515
// eff := 70 else
36505: LD_ADDR_VAR 0 4
36509: PUSH
36510: LD_INT 70
36512: ST_TO_ADDR
36513: GO 36523
// eff := 30 ;
36515: LD_ADDR_VAR 0 4
36519: PUSH
36520: LD_INT 30
36522: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36523: LD_VAR 0 1
36527: PPUSH
36528: CALL_OW 250
36532: PPUSH
36533: LD_VAR 0 1
36537: PPUSH
36538: CALL_OW 251
36542: PPUSH
36543: LD_VAR 0 4
36547: PPUSH
36548: CALL_OW 495
// end ; end ;
36552: LD_VAR 0 2
36556: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36557: LD_INT 0
36559: PPUSH
// end ;
36560: LD_VAR 0 4
36564: RET
// export function SOS_Command ( cmd ) ; begin
36565: LD_INT 0
36567: PPUSH
// end ;
36568: LD_VAR 0 2
36572: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36573: LD_INT 0
36575: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36576: LD_VAR 0 1
36580: PUSH
36581: LD_INT 250
36583: EQUAL
36584: PUSH
36585: LD_VAR 0 2
36589: PPUSH
36590: CALL_OW 264
36594: PUSH
36595: LD_EXP 65
36599: EQUAL
36600: AND
36601: IFFALSE 36622
// MinerPlaceMine ( unit , x , y ) ;
36603: LD_VAR 0 2
36607: PPUSH
36608: LD_VAR 0 4
36612: PPUSH
36613: LD_VAR 0 5
36617: PPUSH
36618: CALL 38963 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36622: LD_VAR 0 1
36626: PUSH
36627: LD_INT 251
36629: EQUAL
36630: PUSH
36631: LD_VAR 0 2
36635: PPUSH
36636: CALL_OW 264
36640: PUSH
36641: LD_EXP 65
36645: EQUAL
36646: AND
36647: IFFALSE 36668
// MinerDetonateMine ( unit , x , y ) ;
36649: LD_VAR 0 2
36653: PPUSH
36654: LD_VAR 0 4
36658: PPUSH
36659: LD_VAR 0 5
36663: PPUSH
36664: CALL 39240 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36668: LD_VAR 0 1
36672: PUSH
36673: LD_INT 252
36675: EQUAL
36676: PUSH
36677: LD_VAR 0 2
36681: PPUSH
36682: CALL_OW 264
36686: PUSH
36687: LD_EXP 65
36691: EQUAL
36692: AND
36693: IFFALSE 36714
// MinerCreateMinefield ( unit , x , y ) ;
36695: LD_VAR 0 2
36699: PPUSH
36700: LD_VAR 0 4
36704: PPUSH
36705: LD_VAR 0 5
36709: PPUSH
36710: CALL 39657 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36714: LD_VAR 0 1
36718: PUSH
36719: LD_INT 253
36721: EQUAL
36722: PUSH
36723: LD_VAR 0 2
36727: PPUSH
36728: CALL_OW 257
36732: PUSH
36733: LD_INT 5
36735: EQUAL
36736: AND
36737: IFFALSE 36758
// ComBinocular ( unit , x , y ) ;
36739: LD_VAR 0 2
36743: PPUSH
36744: LD_VAR 0 4
36748: PPUSH
36749: LD_VAR 0 5
36753: PPUSH
36754: CALL 40028 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36758: LD_VAR 0 1
36762: PUSH
36763: LD_INT 254
36765: EQUAL
36766: PUSH
36767: LD_VAR 0 2
36771: PPUSH
36772: CALL_OW 264
36776: PUSH
36777: LD_EXP 60
36781: EQUAL
36782: AND
36783: PUSH
36784: LD_VAR 0 3
36788: PPUSH
36789: CALL_OW 263
36793: PUSH
36794: LD_INT 3
36796: EQUAL
36797: AND
36798: IFFALSE 36814
// HackDestroyVehicle ( unit , selectedUnit ) ;
36800: LD_VAR 0 2
36804: PPUSH
36805: LD_VAR 0 3
36809: PPUSH
36810: CALL 38323 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36814: LD_VAR 0 1
36818: PUSH
36819: LD_INT 255
36821: EQUAL
36822: PUSH
36823: LD_VAR 0 2
36827: PPUSH
36828: CALL_OW 264
36832: PUSH
36833: LD_INT 14
36835: PUSH
36836: LD_INT 53
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: IN
36843: AND
36844: PUSH
36845: LD_VAR 0 4
36849: PPUSH
36850: LD_VAR 0 5
36854: PPUSH
36855: CALL_OW 488
36859: AND
36860: IFFALSE 36884
// CutTreeXYR ( unit , x , y , 12 ) ;
36862: LD_VAR 0 2
36866: PPUSH
36867: LD_VAR 0 4
36871: PPUSH
36872: LD_VAR 0 5
36876: PPUSH
36877: LD_INT 12
36879: PPUSH
36880: CALL 36889 0 4
// end ;
36884: LD_VAR 0 6
36888: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36889: LD_INT 0
36891: PPUSH
36892: PPUSH
36893: PPUSH
36894: PPUSH
36895: PPUSH
36896: PPUSH
36897: PPUSH
36898: PPUSH
36899: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36900: LD_VAR 0 1
36904: NOT
36905: PUSH
36906: LD_VAR 0 2
36910: PPUSH
36911: LD_VAR 0 3
36915: PPUSH
36916: CALL_OW 488
36920: NOT
36921: OR
36922: PUSH
36923: LD_VAR 0 4
36927: NOT
36928: OR
36929: IFFALSE 36933
// exit ;
36931: GO 37273
// list := [ ] ;
36933: LD_ADDR_VAR 0 13
36937: PUSH
36938: EMPTY
36939: ST_TO_ADDR
// if x - r < 0 then
36940: LD_VAR 0 2
36944: PUSH
36945: LD_VAR 0 4
36949: MINUS
36950: PUSH
36951: LD_INT 0
36953: LESS
36954: IFFALSE 36966
// min_x := 0 else
36956: LD_ADDR_VAR 0 7
36960: PUSH
36961: LD_INT 0
36963: ST_TO_ADDR
36964: GO 36982
// min_x := x - r ;
36966: LD_ADDR_VAR 0 7
36970: PUSH
36971: LD_VAR 0 2
36975: PUSH
36976: LD_VAR 0 4
36980: MINUS
36981: ST_TO_ADDR
// if y - r < 0 then
36982: LD_VAR 0 3
36986: PUSH
36987: LD_VAR 0 4
36991: MINUS
36992: PUSH
36993: LD_INT 0
36995: LESS
36996: IFFALSE 37008
// min_y := 0 else
36998: LD_ADDR_VAR 0 8
37002: PUSH
37003: LD_INT 0
37005: ST_TO_ADDR
37006: GO 37024
// min_y := y - r ;
37008: LD_ADDR_VAR 0 8
37012: PUSH
37013: LD_VAR 0 3
37017: PUSH
37018: LD_VAR 0 4
37022: MINUS
37023: ST_TO_ADDR
// max_x := x + r ;
37024: LD_ADDR_VAR 0 9
37028: PUSH
37029: LD_VAR 0 2
37033: PUSH
37034: LD_VAR 0 4
37038: PLUS
37039: ST_TO_ADDR
// max_y := y + r ;
37040: LD_ADDR_VAR 0 10
37044: PUSH
37045: LD_VAR 0 3
37049: PUSH
37050: LD_VAR 0 4
37054: PLUS
37055: ST_TO_ADDR
// for _x = min_x to max_x do
37056: LD_ADDR_VAR 0 11
37060: PUSH
37061: DOUBLE
37062: LD_VAR 0 7
37066: DEC
37067: ST_TO_ADDR
37068: LD_VAR 0 9
37072: PUSH
37073: FOR_TO
37074: IFFALSE 37191
// for _y = min_y to max_y do
37076: LD_ADDR_VAR 0 12
37080: PUSH
37081: DOUBLE
37082: LD_VAR 0 8
37086: DEC
37087: ST_TO_ADDR
37088: LD_VAR 0 10
37092: PUSH
37093: FOR_TO
37094: IFFALSE 37187
// begin if not ValidHex ( _x , _y ) then
37096: LD_VAR 0 11
37100: PPUSH
37101: LD_VAR 0 12
37105: PPUSH
37106: CALL_OW 488
37110: NOT
37111: IFFALSE 37115
// continue ;
37113: GO 37093
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37115: LD_VAR 0 11
37119: PPUSH
37120: LD_VAR 0 12
37124: PPUSH
37125: CALL_OW 351
37129: PUSH
37130: LD_VAR 0 11
37134: PPUSH
37135: LD_VAR 0 12
37139: PPUSH
37140: CALL_OW 554
37144: AND
37145: IFFALSE 37185
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37147: LD_ADDR_VAR 0 13
37151: PUSH
37152: LD_VAR 0 13
37156: PPUSH
37157: LD_VAR 0 13
37161: PUSH
37162: LD_INT 1
37164: PLUS
37165: PPUSH
37166: LD_VAR 0 11
37170: PUSH
37171: LD_VAR 0 12
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PPUSH
37180: CALL_OW 2
37184: ST_TO_ADDR
// end ;
37185: GO 37093
37187: POP
37188: POP
37189: GO 37073
37191: POP
37192: POP
// if not list then
37193: LD_VAR 0 13
37197: NOT
37198: IFFALSE 37202
// exit ;
37200: GO 37273
// for i in list do
37202: LD_ADDR_VAR 0 6
37206: PUSH
37207: LD_VAR 0 13
37211: PUSH
37212: FOR_IN
37213: IFFALSE 37271
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37215: LD_VAR 0 1
37219: PPUSH
37220: LD_STRING M
37222: PUSH
37223: LD_VAR 0 6
37227: PUSH
37228: LD_INT 1
37230: ARRAY
37231: PUSH
37232: LD_VAR 0 6
37236: PUSH
37237: LD_INT 2
37239: ARRAY
37240: PUSH
37241: LD_INT 0
37243: PUSH
37244: LD_INT 0
37246: PUSH
37247: LD_INT 0
37249: PUSH
37250: LD_INT 0
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: PUSH
37262: EMPTY
37263: LIST
37264: PPUSH
37265: CALL_OW 447
37269: GO 37212
37271: POP
37272: POP
// end ;
37273: LD_VAR 0 5
37277: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37278: LD_EXP 129
37282: NOT
37283: IFFALSE 37333
37285: GO 37287
37287: DISABLE
// begin initHack := true ;
37288: LD_ADDR_EXP 129
37292: PUSH
37293: LD_INT 1
37295: ST_TO_ADDR
// hackTanks := [ ] ;
37296: LD_ADDR_EXP 130
37300: PUSH
37301: EMPTY
37302: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37303: LD_ADDR_EXP 131
37307: PUSH
37308: EMPTY
37309: ST_TO_ADDR
// hackLimit := 3 ;
37310: LD_ADDR_EXP 132
37314: PUSH
37315: LD_INT 3
37317: ST_TO_ADDR
// hackDist := 12 ;
37318: LD_ADDR_EXP 133
37322: PUSH
37323: LD_INT 12
37325: ST_TO_ADDR
// hackCounter := [ ] ;
37326: LD_ADDR_EXP 134
37330: PUSH
37331: EMPTY
37332: ST_TO_ADDR
// end ;
37333: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37334: LD_EXP 129
37338: PUSH
37339: LD_INT 34
37341: PUSH
37342: LD_EXP 60
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PPUSH
37351: CALL_OW 69
37355: AND
37356: IFFALSE 37611
37358: GO 37360
37360: DISABLE
37361: LD_INT 0
37363: PPUSH
37364: PPUSH
// begin enable ;
37365: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37366: LD_ADDR_VAR 0 1
37370: PUSH
37371: LD_INT 34
37373: PUSH
37374: LD_EXP 60
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PPUSH
37383: CALL_OW 69
37387: PUSH
37388: FOR_IN
37389: IFFALSE 37609
// begin if not i in hackTanks then
37391: LD_VAR 0 1
37395: PUSH
37396: LD_EXP 130
37400: IN
37401: NOT
37402: IFFALSE 37485
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37404: LD_ADDR_EXP 130
37408: PUSH
37409: LD_EXP 130
37413: PPUSH
37414: LD_EXP 130
37418: PUSH
37419: LD_INT 1
37421: PLUS
37422: PPUSH
37423: LD_VAR 0 1
37427: PPUSH
37428: CALL_OW 1
37432: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37433: LD_ADDR_EXP 131
37437: PUSH
37438: LD_EXP 131
37442: PPUSH
37443: LD_EXP 131
37447: PUSH
37448: LD_INT 1
37450: PLUS
37451: PPUSH
37452: EMPTY
37453: PPUSH
37454: CALL_OW 1
37458: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37459: LD_ADDR_EXP 134
37463: PUSH
37464: LD_EXP 134
37468: PPUSH
37469: LD_EXP 134
37473: PUSH
37474: LD_INT 1
37476: PLUS
37477: PPUSH
37478: EMPTY
37479: PPUSH
37480: CALL_OW 1
37484: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37485: LD_VAR 0 1
37489: PPUSH
37490: CALL_OW 302
37494: NOT
37495: IFFALSE 37508
// begin HackUnlinkAll ( i ) ;
37497: LD_VAR 0 1
37501: PPUSH
37502: CALL 37614 0 1
// continue ;
37506: GO 37388
// end ; HackCheckCapturedStatus ( i ) ;
37508: LD_VAR 0 1
37512: PPUSH
37513: CALL 38057 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37517: LD_ADDR_VAR 0 2
37521: PUSH
37522: LD_INT 81
37524: PUSH
37525: LD_VAR 0 1
37529: PPUSH
37530: CALL_OW 255
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 33
37541: PUSH
37542: LD_INT 3
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 91
37551: PUSH
37552: LD_VAR 0 1
37556: PUSH
37557: LD_EXP 133
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 50
37569: PUSH
37570: EMPTY
37571: LIST
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: PPUSH
37579: CALL_OW 69
37583: ST_TO_ADDR
// if not tmp then
37584: LD_VAR 0 2
37588: NOT
37589: IFFALSE 37593
// continue ;
37591: GO 37388
// HackLink ( i , tmp ) ;
37593: LD_VAR 0 1
37597: PPUSH
37598: LD_VAR 0 2
37602: PPUSH
37603: CALL 37750 0 2
// end ;
37607: GO 37388
37609: POP
37610: POP
// end ;
37611: PPOPN 2
37613: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37614: LD_INT 0
37616: PPUSH
37617: PPUSH
37618: PPUSH
// if not hack in hackTanks then
37619: LD_VAR 0 1
37623: PUSH
37624: LD_EXP 130
37628: IN
37629: NOT
37630: IFFALSE 37634
// exit ;
37632: GO 37745
// index := GetElementIndex ( hackTanks , hack ) ;
37634: LD_ADDR_VAR 0 4
37638: PUSH
37639: LD_EXP 130
37643: PPUSH
37644: LD_VAR 0 1
37648: PPUSH
37649: CALL 45179 0 2
37653: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37654: LD_EXP 131
37658: PUSH
37659: LD_VAR 0 4
37663: ARRAY
37664: IFFALSE 37745
// begin for i in hackTanksCaptured [ index ] do
37666: LD_ADDR_VAR 0 3
37670: PUSH
37671: LD_EXP 131
37675: PUSH
37676: LD_VAR 0 4
37680: ARRAY
37681: PUSH
37682: FOR_IN
37683: IFFALSE 37709
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37685: LD_VAR 0 3
37689: PUSH
37690: LD_INT 1
37692: ARRAY
37693: PPUSH
37694: LD_VAR 0 3
37698: PUSH
37699: LD_INT 2
37701: ARRAY
37702: PPUSH
37703: CALL_OW 235
37707: GO 37682
37709: POP
37710: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37711: LD_ADDR_EXP 131
37715: PUSH
37716: LD_EXP 131
37720: PPUSH
37721: LD_VAR 0 4
37725: PPUSH
37726: EMPTY
37727: PPUSH
37728: CALL_OW 1
37732: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37733: LD_VAR 0 1
37737: PPUSH
37738: LD_INT 0
37740: PPUSH
37741: CALL_OW 505
// end ; end ;
37745: LD_VAR 0 2
37749: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37750: LD_INT 0
37752: PPUSH
37753: PPUSH
37754: PPUSH
// if not hack in hackTanks or not vehicles then
37755: LD_VAR 0 1
37759: PUSH
37760: LD_EXP 130
37764: IN
37765: NOT
37766: PUSH
37767: LD_VAR 0 2
37771: NOT
37772: OR
37773: IFFALSE 37777
// exit ;
37775: GO 38052
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37777: LD_ADDR_VAR 0 2
37781: PUSH
37782: LD_VAR 0 1
37786: PPUSH
37787: LD_VAR 0 2
37791: PPUSH
37792: LD_INT 1
37794: PPUSH
37795: LD_INT 1
37797: PPUSH
37798: CALL 45829 0 4
37802: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37803: LD_ADDR_VAR 0 5
37807: PUSH
37808: LD_EXP 130
37812: PPUSH
37813: LD_VAR 0 1
37817: PPUSH
37818: CALL 45179 0 2
37822: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37823: LD_EXP 131
37827: PUSH
37828: LD_VAR 0 5
37832: ARRAY
37833: PUSH
37834: LD_EXP 132
37838: LESS
37839: IFFALSE 38028
// begin for i := 1 to vehicles do
37841: LD_ADDR_VAR 0 4
37845: PUSH
37846: DOUBLE
37847: LD_INT 1
37849: DEC
37850: ST_TO_ADDR
37851: LD_VAR 0 2
37855: PUSH
37856: FOR_TO
37857: IFFALSE 38026
// begin if hackTanksCaptured [ index ] = hackLimit then
37859: LD_EXP 131
37863: PUSH
37864: LD_VAR 0 5
37868: ARRAY
37869: PUSH
37870: LD_EXP 132
37874: EQUAL
37875: IFFALSE 37879
// break ;
37877: GO 38026
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37879: LD_ADDR_EXP 134
37883: PUSH
37884: LD_EXP 134
37888: PPUSH
37889: LD_VAR 0 5
37893: PPUSH
37894: LD_EXP 134
37898: PUSH
37899: LD_VAR 0 5
37903: ARRAY
37904: PUSH
37905: LD_INT 1
37907: PLUS
37908: PPUSH
37909: CALL_OW 1
37913: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37914: LD_ADDR_EXP 131
37918: PUSH
37919: LD_EXP 131
37923: PPUSH
37924: LD_VAR 0 5
37928: PUSH
37929: LD_EXP 131
37933: PUSH
37934: LD_VAR 0 5
37938: ARRAY
37939: PUSH
37940: LD_INT 1
37942: PLUS
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PPUSH
37948: LD_VAR 0 2
37952: PUSH
37953: LD_VAR 0 4
37957: ARRAY
37958: PUSH
37959: LD_VAR 0 2
37963: PUSH
37964: LD_VAR 0 4
37968: ARRAY
37969: PPUSH
37970: CALL_OW 255
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PPUSH
37979: CALL 45394 0 3
37983: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37984: LD_VAR 0 2
37988: PUSH
37989: LD_VAR 0 4
37993: ARRAY
37994: PPUSH
37995: LD_VAR 0 1
37999: PPUSH
38000: CALL_OW 255
38004: PPUSH
38005: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38009: LD_VAR 0 2
38013: PUSH
38014: LD_VAR 0 4
38018: ARRAY
38019: PPUSH
38020: CALL_OW 141
// end ;
38024: GO 37856
38026: POP
38027: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38028: LD_VAR 0 1
38032: PPUSH
38033: LD_EXP 131
38037: PUSH
38038: LD_VAR 0 5
38042: ARRAY
38043: PUSH
38044: LD_INT 0
38046: PLUS
38047: PPUSH
38048: CALL_OW 505
// end ;
38052: LD_VAR 0 3
38056: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38057: LD_INT 0
38059: PPUSH
38060: PPUSH
38061: PPUSH
38062: PPUSH
// if not hack in hackTanks then
38063: LD_VAR 0 1
38067: PUSH
38068: LD_EXP 130
38072: IN
38073: NOT
38074: IFFALSE 38078
// exit ;
38076: GO 38318
// index := GetElementIndex ( hackTanks , hack ) ;
38078: LD_ADDR_VAR 0 4
38082: PUSH
38083: LD_EXP 130
38087: PPUSH
38088: LD_VAR 0 1
38092: PPUSH
38093: CALL 45179 0 2
38097: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38098: LD_ADDR_VAR 0 3
38102: PUSH
38103: DOUBLE
38104: LD_EXP 131
38108: PUSH
38109: LD_VAR 0 4
38113: ARRAY
38114: INC
38115: ST_TO_ADDR
38116: LD_INT 1
38118: PUSH
38119: FOR_DOWNTO
38120: IFFALSE 38292
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38122: LD_ADDR_VAR 0 5
38126: PUSH
38127: LD_EXP 131
38131: PUSH
38132: LD_VAR 0 4
38136: ARRAY
38137: PUSH
38138: LD_VAR 0 3
38142: ARRAY
38143: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38144: LD_VAR 0 5
38148: PUSH
38149: LD_INT 1
38151: ARRAY
38152: PPUSH
38153: CALL_OW 302
38157: NOT
38158: PUSH
38159: LD_VAR 0 5
38163: PUSH
38164: LD_INT 1
38166: ARRAY
38167: PPUSH
38168: CALL_OW 255
38172: PUSH
38173: LD_VAR 0 1
38177: PPUSH
38178: CALL_OW 255
38182: NONEQUAL
38183: OR
38184: IFFALSE 38290
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38186: LD_VAR 0 5
38190: PUSH
38191: LD_INT 1
38193: ARRAY
38194: PPUSH
38195: CALL_OW 305
38199: PUSH
38200: LD_VAR 0 5
38204: PUSH
38205: LD_INT 1
38207: ARRAY
38208: PPUSH
38209: CALL_OW 255
38213: PUSH
38214: LD_VAR 0 1
38218: PPUSH
38219: CALL_OW 255
38223: EQUAL
38224: AND
38225: IFFALSE 38249
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38227: LD_VAR 0 5
38231: PUSH
38232: LD_INT 1
38234: ARRAY
38235: PPUSH
38236: LD_VAR 0 5
38240: PUSH
38241: LD_INT 2
38243: ARRAY
38244: PPUSH
38245: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38249: LD_ADDR_EXP 131
38253: PUSH
38254: LD_EXP 131
38258: PPUSH
38259: LD_VAR 0 4
38263: PPUSH
38264: LD_EXP 131
38268: PUSH
38269: LD_VAR 0 4
38273: ARRAY
38274: PPUSH
38275: LD_VAR 0 3
38279: PPUSH
38280: CALL_OW 3
38284: PPUSH
38285: CALL_OW 1
38289: ST_TO_ADDR
// end ; end ;
38290: GO 38119
38292: POP
38293: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38294: LD_VAR 0 1
38298: PPUSH
38299: LD_EXP 131
38303: PUSH
38304: LD_VAR 0 4
38308: ARRAY
38309: PUSH
38310: LD_INT 0
38312: PLUS
38313: PPUSH
38314: CALL_OW 505
// end ;
38318: LD_VAR 0 2
38322: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38323: LD_INT 0
38325: PPUSH
38326: PPUSH
38327: PPUSH
38328: PPUSH
// if not hack in hackTanks then
38329: LD_VAR 0 1
38333: PUSH
38334: LD_EXP 130
38338: IN
38339: NOT
38340: IFFALSE 38344
// exit ;
38342: GO 38429
// index := GetElementIndex ( hackTanks , hack ) ;
38344: LD_ADDR_VAR 0 5
38348: PUSH
38349: LD_EXP 130
38353: PPUSH
38354: LD_VAR 0 1
38358: PPUSH
38359: CALL 45179 0 2
38363: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38364: LD_ADDR_VAR 0 4
38368: PUSH
38369: DOUBLE
38370: LD_INT 1
38372: DEC
38373: ST_TO_ADDR
38374: LD_EXP 131
38378: PUSH
38379: LD_VAR 0 5
38383: ARRAY
38384: PUSH
38385: FOR_TO
38386: IFFALSE 38427
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38388: LD_EXP 131
38392: PUSH
38393: LD_VAR 0 5
38397: ARRAY
38398: PUSH
38399: LD_VAR 0 4
38403: ARRAY
38404: PUSH
38405: LD_INT 1
38407: ARRAY
38408: PUSH
38409: LD_VAR 0 2
38413: EQUAL
38414: IFFALSE 38425
// KillUnit ( vehicle ) ;
38416: LD_VAR 0 2
38420: PPUSH
38421: CALL_OW 66
38425: GO 38385
38427: POP
38428: POP
// end ;
38429: LD_VAR 0 3
38433: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38434: LD_EXP 135
38438: NOT
38439: IFFALSE 38474
38441: GO 38443
38443: DISABLE
// begin initMiner := true ;
38444: LD_ADDR_EXP 135
38448: PUSH
38449: LD_INT 1
38451: ST_TO_ADDR
// minersList := [ ] ;
38452: LD_ADDR_EXP 136
38456: PUSH
38457: EMPTY
38458: ST_TO_ADDR
// minerMinesList := [ ] ;
38459: LD_ADDR_EXP 137
38463: PUSH
38464: EMPTY
38465: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38466: LD_ADDR_EXP 138
38470: PUSH
38471: LD_INT 5
38473: ST_TO_ADDR
// end ;
38474: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38475: LD_EXP 135
38479: PUSH
38480: LD_INT 34
38482: PUSH
38483: LD_EXP 65
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PPUSH
38492: CALL_OW 69
38496: AND
38497: IFFALSE 38960
38499: GO 38501
38501: DISABLE
38502: LD_INT 0
38504: PPUSH
38505: PPUSH
38506: PPUSH
38507: PPUSH
// begin enable ;
38508: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38509: LD_ADDR_VAR 0 1
38513: PUSH
38514: LD_INT 34
38516: PUSH
38517: LD_EXP 65
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PPUSH
38526: CALL_OW 69
38530: PUSH
38531: FOR_IN
38532: IFFALSE 38604
// begin if not i in minersList then
38534: LD_VAR 0 1
38538: PUSH
38539: LD_EXP 136
38543: IN
38544: NOT
38545: IFFALSE 38602
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38547: LD_ADDR_EXP 136
38551: PUSH
38552: LD_EXP 136
38556: PPUSH
38557: LD_EXP 136
38561: PUSH
38562: LD_INT 1
38564: PLUS
38565: PPUSH
38566: LD_VAR 0 1
38570: PPUSH
38571: CALL_OW 1
38575: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38576: LD_ADDR_EXP 137
38580: PUSH
38581: LD_EXP 137
38585: PPUSH
38586: LD_EXP 137
38590: PUSH
38591: LD_INT 1
38593: PLUS
38594: PPUSH
38595: EMPTY
38596: PPUSH
38597: CALL_OW 1
38601: ST_TO_ADDR
// end end ;
38602: GO 38531
38604: POP
38605: POP
// for i := minerMinesList downto 1 do
38606: LD_ADDR_VAR 0 1
38610: PUSH
38611: DOUBLE
38612: LD_EXP 137
38616: INC
38617: ST_TO_ADDR
38618: LD_INT 1
38620: PUSH
38621: FOR_DOWNTO
38622: IFFALSE 38958
// begin if IsLive ( minersList [ i ] ) then
38624: LD_EXP 136
38628: PUSH
38629: LD_VAR 0 1
38633: ARRAY
38634: PPUSH
38635: CALL_OW 300
38639: IFFALSE 38667
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38641: LD_EXP 136
38645: PUSH
38646: LD_VAR 0 1
38650: ARRAY
38651: PPUSH
38652: LD_EXP 137
38656: PUSH
38657: LD_VAR 0 1
38661: ARRAY
38662: PPUSH
38663: CALL_OW 505
// if not minerMinesList [ i ] then
38667: LD_EXP 137
38671: PUSH
38672: LD_VAR 0 1
38676: ARRAY
38677: NOT
38678: IFFALSE 38682
// continue ;
38680: GO 38621
// for j := minerMinesList [ i ] downto 1 do
38682: LD_ADDR_VAR 0 2
38686: PUSH
38687: DOUBLE
38688: LD_EXP 137
38692: PUSH
38693: LD_VAR 0 1
38697: ARRAY
38698: INC
38699: ST_TO_ADDR
38700: LD_INT 1
38702: PUSH
38703: FOR_DOWNTO
38704: IFFALSE 38954
// begin side := GetSide ( minersList [ i ] ) ;
38706: LD_ADDR_VAR 0 3
38710: PUSH
38711: LD_EXP 136
38715: PUSH
38716: LD_VAR 0 1
38720: ARRAY
38721: PPUSH
38722: CALL_OW 255
38726: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38727: LD_ADDR_VAR 0 4
38731: PUSH
38732: LD_EXP 137
38736: PUSH
38737: LD_VAR 0 1
38741: ARRAY
38742: PUSH
38743: LD_VAR 0 2
38747: ARRAY
38748: PUSH
38749: LD_INT 1
38751: ARRAY
38752: PPUSH
38753: LD_EXP 137
38757: PUSH
38758: LD_VAR 0 1
38762: ARRAY
38763: PUSH
38764: LD_VAR 0 2
38768: ARRAY
38769: PUSH
38770: LD_INT 2
38772: ARRAY
38773: PPUSH
38774: CALL_OW 428
38778: ST_TO_ADDR
// if not tmp then
38779: LD_VAR 0 4
38783: NOT
38784: IFFALSE 38788
// continue ;
38786: GO 38703
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38788: LD_VAR 0 4
38792: PUSH
38793: LD_INT 81
38795: PUSH
38796: LD_VAR 0 3
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PPUSH
38805: CALL_OW 69
38809: IN
38810: PUSH
38811: LD_EXP 137
38815: PUSH
38816: LD_VAR 0 1
38820: ARRAY
38821: PUSH
38822: LD_VAR 0 2
38826: ARRAY
38827: PUSH
38828: LD_INT 1
38830: ARRAY
38831: PPUSH
38832: LD_EXP 137
38836: PUSH
38837: LD_VAR 0 1
38841: ARRAY
38842: PUSH
38843: LD_VAR 0 2
38847: ARRAY
38848: PUSH
38849: LD_INT 2
38851: ARRAY
38852: PPUSH
38853: CALL_OW 458
38857: AND
38858: IFFALSE 38952
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38860: LD_EXP 137
38864: PUSH
38865: LD_VAR 0 1
38869: ARRAY
38870: PUSH
38871: LD_VAR 0 2
38875: ARRAY
38876: PUSH
38877: LD_INT 1
38879: ARRAY
38880: PPUSH
38881: LD_EXP 137
38885: PUSH
38886: LD_VAR 0 1
38890: ARRAY
38891: PUSH
38892: LD_VAR 0 2
38896: ARRAY
38897: PUSH
38898: LD_INT 2
38900: ARRAY
38901: PPUSH
38902: LD_VAR 0 3
38906: PPUSH
38907: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38911: LD_ADDR_EXP 137
38915: PUSH
38916: LD_EXP 137
38920: PPUSH
38921: LD_VAR 0 1
38925: PPUSH
38926: LD_EXP 137
38930: PUSH
38931: LD_VAR 0 1
38935: ARRAY
38936: PPUSH
38937: LD_VAR 0 2
38941: PPUSH
38942: CALL_OW 3
38946: PPUSH
38947: CALL_OW 1
38951: ST_TO_ADDR
// end ; end ;
38952: GO 38703
38954: POP
38955: POP
// end ;
38956: GO 38621
38958: POP
38959: POP
// end ;
38960: PPOPN 4
38962: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38963: LD_INT 0
38965: PPUSH
38966: PPUSH
// result := false ;
38967: LD_ADDR_VAR 0 4
38971: PUSH
38972: LD_INT 0
38974: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38975: LD_VAR 0 1
38979: PPUSH
38980: CALL_OW 264
38984: PUSH
38985: LD_EXP 65
38989: EQUAL
38990: NOT
38991: IFFALSE 38995
// exit ;
38993: GO 39235
// index := GetElementIndex ( minersList , unit ) ;
38995: LD_ADDR_VAR 0 5
38999: PUSH
39000: LD_EXP 136
39004: PPUSH
39005: LD_VAR 0 1
39009: PPUSH
39010: CALL 45179 0 2
39014: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39015: LD_EXP 137
39019: PUSH
39020: LD_VAR 0 5
39024: ARRAY
39025: PUSH
39026: LD_EXP 138
39030: GREATEREQUAL
39031: IFFALSE 39035
// exit ;
39033: GO 39235
// ComMoveXY ( unit , x , y ) ;
39035: LD_VAR 0 1
39039: PPUSH
39040: LD_VAR 0 2
39044: PPUSH
39045: LD_VAR 0 3
39049: PPUSH
39050: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39054: LD_INT 35
39056: PPUSH
39057: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39061: LD_VAR 0 1
39065: PPUSH
39066: LD_VAR 0 2
39070: PPUSH
39071: LD_VAR 0 3
39075: PPUSH
39076: CALL 75243 0 3
39080: NOT
39081: PUSH
39082: LD_VAR 0 1
39086: PPUSH
39087: CALL_OW 314
39091: AND
39092: IFFALSE 39096
// exit ;
39094: GO 39235
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39096: LD_VAR 0 2
39100: PPUSH
39101: LD_VAR 0 3
39105: PPUSH
39106: CALL_OW 428
39110: PUSH
39111: LD_VAR 0 1
39115: EQUAL
39116: PUSH
39117: LD_VAR 0 1
39121: PPUSH
39122: CALL_OW 314
39126: NOT
39127: AND
39128: IFFALSE 39054
// PlaySoundXY ( x , y , PlantMine ) ;
39130: LD_VAR 0 2
39134: PPUSH
39135: LD_VAR 0 3
39139: PPUSH
39140: LD_STRING PlantMine
39142: PPUSH
39143: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39147: LD_VAR 0 2
39151: PPUSH
39152: LD_VAR 0 3
39156: PPUSH
39157: LD_VAR 0 1
39161: PPUSH
39162: CALL_OW 255
39166: PPUSH
39167: LD_INT 0
39169: PPUSH
39170: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39174: LD_ADDR_EXP 137
39178: PUSH
39179: LD_EXP 137
39183: PPUSH
39184: LD_VAR 0 5
39188: PUSH
39189: LD_EXP 137
39193: PUSH
39194: LD_VAR 0 5
39198: ARRAY
39199: PUSH
39200: LD_INT 1
39202: PLUS
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PPUSH
39208: LD_VAR 0 2
39212: PUSH
39213: LD_VAR 0 3
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PPUSH
39222: CALL 45394 0 3
39226: ST_TO_ADDR
// result := true ;
39227: LD_ADDR_VAR 0 4
39231: PUSH
39232: LD_INT 1
39234: ST_TO_ADDR
// end ;
39235: LD_VAR 0 4
39239: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39240: LD_INT 0
39242: PPUSH
39243: PPUSH
39244: PPUSH
// if not unit in minersList then
39245: LD_VAR 0 1
39249: PUSH
39250: LD_EXP 136
39254: IN
39255: NOT
39256: IFFALSE 39260
// exit ;
39258: GO 39652
// index := GetElementIndex ( minersList , unit ) ;
39260: LD_ADDR_VAR 0 6
39264: PUSH
39265: LD_EXP 136
39269: PPUSH
39270: LD_VAR 0 1
39274: PPUSH
39275: CALL 45179 0 2
39279: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39280: LD_ADDR_VAR 0 5
39284: PUSH
39285: DOUBLE
39286: LD_EXP 137
39290: PUSH
39291: LD_VAR 0 6
39295: ARRAY
39296: INC
39297: ST_TO_ADDR
39298: LD_INT 1
39300: PUSH
39301: FOR_DOWNTO
39302: IFFALSE 39463
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39304: LD_EXP 137
39308: PUSH
39309: LD_VAR 0 6
39313: ARRAY
39314: PUSH
39315: LD_VAR 0 5
39319: ARRAY
39320: PUSH
39321: LD_INT 1
39323: ARRAY
39324: PUSH
39325: LD_VAR 0 2
39329: EQUAL
39330: PUSH
39331: LD_EXP 137
39335: PUSH
39336: LD_VAR 0 6
39340: ARRAY
39341: PUSH
39342: LD_VAR 0 5
39346: ARRAY
39347: PUSH
39348: LD_INT 2
39350: ARRAY
39351: PUSH
39352: LD_VAR 0 3
39356: EQUAL
39357: AND
39358: IFFALSE 39461
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39360: LD_EXP 137
39364: PUSH
39365: LD_VAR 0 6
39369: ARRAY
39370: PUSH
39371: LD_VAR 0 5
39375: ARRAY
39376: PUSH
39377: LD_INT 1
39379: ARRAY
39380: PPUSH
39381: LD_EXP 137
39385: PUSH
39386: LD_VAR 0 6
39390: ARRAY
39391: PUSH
39392: LD_VAR 0 5
39396: ARRAY
39397: PUSH
39398: LD_INT 2
39400: ARRAY
39401: PPUSH
39402: LD_VAR 0 1
39406: PPUSH
39407: CALL_OW 255
39411: PPUSH
39412: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39416: LD_ADDR_EXP 137
39420: PUSH
39421: LD_EXP 137
39425: PPUSH
39426: LD_VAR 0 6
39430: PPUSH
39431: LD_EXP 137
39435: PUSH
39436: LD_VAR 0 6
39440: ARRAY
39441: PPUSH
39442: LD_VAR 0 5
39446: PPUSH
39447: CALL_OW 3
39451: PPUSH
39452: CALL_OW 1
39456: ST_TO_ADDR
// exit ;
39457: POP
39458: POP
39459: GO 39652
// end ; end ;
39461: GO 39301
39463: POP
39464: POP
// for i := minerMinesList [ index ] downto 1 do
39465: LD_ADDR_VAR 0 5
39469: PUSH
39470: DOUBLE
39471: LD_EXP 137
39475: PUSH
39476: LD_VAR 0 6
39480: ARRAY
39481: INC
39482: ST_TO_ADDR
39483: LD_INT 1
39485: PUSH
39486: FOR_DOWNTO
39487: IFFALSE 39650
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39489: LD_EXP 137
39493: PUSH
39494: LD_VAR 0 6
39498: ARRAY
39499: PUSH
39500: LD_VAR 0 5
39504: ARRAY
39505: PUSH
39506: LD_INT 1
39508: ARRAY
39509: PPUSH
39510: LD_EXP 137
39514: PUSH
39515: LD_VAR 0 6
39519: ARRAY
39520: PUSH
39521: LD_VAR 0 5
39525: ARRAY
39526: PUSH
39527: LD_INT 2
39529: ARRAY
39530: PPUSH
39531: LD_VAR 0 2
39535: PPUSH
39536: LD_VAR 0 3
39540: PPUSH
39541: CALL_OW 298
39545: PUSH
39546: LD_INT 6
39548: LESS
39549: IFFALSE 39648
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39551: LD_EXP 137
39555: PUSH
39556: LD_VAR 0 6
39560: ARRAY
39561: PUSH
39562: LD_VAR 0 5
39566: ARRAY
39567: PUSH
39568: LD_INT 1
39570: ARRAY
39571: PPUSH
39572: LD_EXP 137
39576: PUSH
39577: LD_VAR 0 6
39581: ARRAY
39582: PUSH
39583: LD_VAR 0 5
39587: ARRAY
39588: PUSH
39589: LD_INT 2
39591: ARRAY
39592: PPUSH
39593: LD_VAR 0 1
39597: PPUSH
39598: CALL_OW 255
39602: PPUSH
39603: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39607: LD_ADDR_EXP 137
39611: PUSH
39612: LD_EXP 137
39616: PPUSH
39617: LD_VAR 0 6
39621: PPUSH
39622: LD_EXP 137
39626: PUSH
39627: LD_VAR 0 6
39631: ARRAY
39632: PPUSH
39633: LD_VAR 0 5
39637: PPUSH
39638: CALL_OW 3
39642: PPUSH
39643: CALL_OW 1
39647: ST_TO_ADDR
// end ; end ;
39648: GO 39486
39650: POP
39651: POP
// end ;
39652: LD_VAR 0 4
39656: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39657: LD_INT 0
39659: PPUSH
39660: PPUSH
39661: PPUSH
39662: PPUSH
39663: PPUSH
39664: PPUSH
39665: PPUSH
39666: PPUSH
39667: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39668: LD_VAR 0 1
39672: PPUSH
39673: CALL_OW 264
39677: PUSH
39678: LD_EXP 65
39682: EQUAL
39683: NOT
39684: PUSH
39685: LD_VAR 0 1
39689: PUSH
39690: LD_EXP 136
39694: IN
39695: NOT
39696: OR
39697: IFFALSE 39701
// exit ;
39699: GO 40023
// index := GetElementIndex ( minersList , unit ) ;
39701: LD_ADDR_VAR 0 6
39705: PUSH
39706: LD_EXP 136
39710: PPUSH
39711: LD_VAR 0 1
39715: PPUSH
39716: CALL 45179 0 2
39720: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39721: LD_ADDR_VAR 0 8
39725: PUSH
39726: LD_EXP 138
39730: PUSH
39731: LD_EXP 137
39735: PUSH
39736: LD_VAR 0 6
39740: ARRAY
39741: MINUS
39742: ST_TO_ADDR
// if not minesFreeAmount then
39743: LD_VAR 0 8
39747: NOT
39748: IFFALSE 39752
// exit ;
39750: GO 40023
// tmp := [ ] ;
39752: LD_ADDR_VAR 0 7
39756: PUSH
39757: EMPTY
39758: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39759: LD_ADDR_VAR 0 5
39763: PUSH
39764: DOUBLE
39765: LD_INT 1
39767: DEC
39768: ST_TO_ADDR
39769: LD_VAR 0 8
39773: PUSH
39774: FOR_TO
39775: IFFALSE 39970
// begin _d := rand ( 0 , 5 ) ;
39777: LD_ADDR_VAR 0 11
39781: PUSH
39782: LD_INT 0
39784: PPUSH
39785: LD_INT 5
39787: PPUSH
39788: CALL_OW 12
39792: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39793: LD_ADDR_VAR 0 12
39797: PUSH
39798: LD_INT 2
39800: PPUSH
39801: LD_INT 6
39803: PPUSH
39804: CALL_OW 12
39808: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39809: LD_ADDR_VAR 0 9
39813: PUSH
39814: LD_VAR 0 2
39818: PPUSH
39819: LD_VAR 0 11
39823: PPUSH
39824: LD_VAR 0 12
39828: PPUSH
39829: CALL_OW 272
39833: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39834: LD_ADDR_VAR 0 10
39838: PUSH
39839: LD_VAR 0 3
39843: PPUSH
39844: LD_VAR 0 11
39848: PPUSH
39849: LD_VAR 0 12
39853: PPUSH
39854: CALL_OW 273
39858: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39859: LD_VAR 0 9
39863: PPUSH
39864: LD_VAR 0 10
39868: PPUSH
39869: CALL_OW 488
39873: PUSH
39874: LD_VAR 0 9
39878: PUSH
39879: LD_VAR 0 10
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_VAR 0 7
39892: IN
39893: NOT
39894: AND
39895: PUSH
39896: LD_VAR 0 9
39900: PPUSH
39901: LD_VAR 0 10
39905: PPUSH
39906: CALL_OW 458
39910: NOT
39911: AND
39912: IFFALSE 39954
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39914: LD_ADDR_VAR 0 7
39918: PUSH
39919: LD_VAR 0 7
39923: PPUSH
39924: LD_VAR 0 7
39928: PUSH
39929: LD_INT 1
39931: PLUS
39932: PPUSH
39933: LD_VAR 0 9
39937: PUSH
39938: LD_VAR 0 10
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PPUSH
39947: CALL_OW 1
39951: ST_TO_ADDR
39952: GO 39968
// i := i - 1 ;
39954: LD_ADDR_VAR 0 5
39958: PUSH
39959: LD_VAR 0 5
39963: PUSH
39964: LD_INT 1
39966: MINUS
39967: ST_TO_ADDR
// end ;
39968: GO 39774
39970: POP
39971: POP
// for i in tmp do
39972: LD_ADDR_VAR 0 5
39976: PUSH
39977: LD_VAR 0 7
39981: PUSH
39982: FOR_IN
39983: IFFALSE 40021
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39985: LD_VAR 0 1
39989: PPUSH
39990: LD_VAR 0 5
39994: PUSH
39995: LD_INT 1
39997: ARRAY
39998: PPUSH
39999: LD_VAR 0 5
40003: PUSH
40004: LD_INT 2
40006: ARRAY
40007: PPUSH
40008: CALL 38963 0 3
40012: NOT
40013: IFFALSE 40019
// exit ;
40015: POP
40016: POP
40017: GO 40023
40019: GO 39982
40021: POP
40022: POP
// end ;
40023: LD_VAR 0 4
40027: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
40028: LD_INT 0
40030: PPUSH
40031: PPUSH
40032: PPUSH
40033: PPUSH
40034: PPUSH
40035: PPUSH
40036: PPUSH
// if not GetClass ( unit ) = class_sniper then
40037: LD_VAR 0 1
40041: PPUSH
40042: CALL_OW 257
40046: PUSH
40047: LD_INT 5
40049: EQUAL
40050: NOT
40051: IFFALSE 40055
// exit ;
40053: GO 40443
// dist := 8 ;
40055: LD_ADDR_VAR 0 5
40059: PUSH
40060: LD_INT 8
40062: ST_TO_ADDR
// viewRange := 12 ;
40063: LD_ADDR_VAR 0 7
40067: PUSH
40068: LD_INT 12
40070: ST_TO_ADDR
// side := GetSide ( unit ) ;
40071: LD_ADDR_VAR 0 6
40075: PUSH
40076: LD_VAR 0 1
40080: PPUSH
40081: CALL_OW 255
40085: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40086: LD_INT 61
40088: PPUSH
40089: LD_VAR 0 6
40093: PPUSH
40094: CALL_OW 321
40098: PUSH
40099: LD_INT 2
40101: EQUAL
40102: IFFALSE 40112
// viewRange := 16 ;
40104: LD_ADDR_VAR 0 7
40108: PUSH
40109: LD_INT 16
40111: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40112: LD_VAR 0 1
40116: PPUSH
40117: LD_VAR 0 2
40121: PPUSH
40122: LD_VAR 0 3
40126: PPUSH
40127: CALL_OW 297
40131: PUSH
40132: LD_VAR 0 5
40136: GREATER
40137: IFFALSE 40216
// begin ComMoveXY ( unit , x , y ) ;
40139: LD_VAR 0 1
40143: PPUSH
40144: LD_VAR 0 2
40148: PPUSH
40149: LD_VAR 0 3
40153: PPUSH
40154: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40158: LD_INT 35
40160: PPUSH
40161: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40165: LD_VAR 0 1
40169: PPUSH
40170: LD_VAR 0 2
40174: PPUSH
40175: LD_VAR 0 3
40179: PPUSH
40180: CALL 75243 0 3
40184: NOT
40185: IFFALSE 40189
// exit ;
40187: GO 40443
// until GetDistUnitXY ( unit , x , y ) < dist ;
40189: LD_VAR 0 1
40193: PPUSH
40194: LD_VAR 0 2
40198: PPUSH
40199: LD_VAR 0 3
40203: PPUSH
40204: CALL_OW 297
40208: PUSH
40209: LD_VAR 0 5
40213: LESS
40214: IFFALSE 40158
// end ; ComTurnXY ( unit , x , y ) ;
40216: LD_VAR 0 1
40220: PPUSH
40221: LD_VAR 0 2
40225: PPUSH
40226: LD_VAR 0 3
40230: PPUSH
40231: CALL_OW 118
// wait ( 5 ) ;
40235: LD_INT 5
40237: PPUSH
40238: CALL_OW 67
// _d := GetDir ( unit ) ;
40242: LD_ADDR_VAR 0 10
40246: PUSH
40247: LD_VAR 0 1
40251: PPUSH
40252: CALL_OW 254
40256: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40257: LD_ADDR_VAR 0 8
40261: PUSH
40262: LD_VAR 0 1
40266: PPUSH
40267: CALL_OW 250
40271: PPUSH
40272: LD_VAR 0 10
40276: PPUSH
40277: LD_VAR 0 5
40281: PPUSH
40282: CALL_OW 272
40286: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40287: LD_ADDR_VAR 0 9
40291: PUSH
40292: LD_VAR 0 1
40296: PPUSH
40297: CALL_OW 251
40301: PPUSH
40302: LD_VAR 0 10
40306: PPUSH
40307: LD_VAR 0 5
40311: PPUSH
40312: CALL_OW 273
40316: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40317: LD_VAR 0 8
40321: PPUSH
40322: LD_VAR 0 9
40326: PPUSH
40327: CALL_OW 488
40331: NOT
40332: IFFALSE 40336
// exit ;
40334: GO 40443
// ComAnimCustom ( unit , 1 ) ;
40336: LD_VAR 0 1
40340: PPUSH
40341: LD_INT 1
40343: PPUSH
40344: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40348: LD_VAR 0 8
40352: PPUSH
40353: LD_VAR 0 9
40357: PPUSH
40358: LD_VAR 0 6
40362: PPUSH
40363: LD_VAR 0 7
40367: PPUSH
40368: CALL_OW 330
// repeat wait ( 1 ) ;
40372: LD_INT 1
40374: PPUSH
40375: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40379: LD_VAR 0 1
40383: PPUSH
40384: CALL_OW 316
40388: PUSH
40389: LD_VAR 0 1
40393: PPUSH
40394: CALL_OW 314
40398: OR
40399: PUSH
40400: LD_VAR 0 1
40404: PPUSH
40405: CALL_OW 302
40409: NOT
40410: OR
40411: PUSH
40412: LD_VAR 0 1
40416: PPUSH
40417: CALL_OW 301
40421: OR
40422: IFFALSE 40372
// RemoveSeeing ( _x , _y , side ) ;
40424: LD_VAR 0 8
40428: PPUSH
40429: LD_VAR 0 9
40433: PPUSH
40434: LD_VAR 0 6
40438: PPUSH
40439: CALL_OW 331
// end ; end_of_file
40443: LD_VAR 0 4
40447: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40448: LD_INT 0
40450: PPUSH
40451: PPUSH
// if exist_mode then
40452: LD_VAR 0 2
40456: IFFALSE 40481
// unit := CreateCharacter ( prefix & ident ) else
40458: LD_ADDR_VAR 0 5
40462: PUSH
40463: LD_VAR 0 3
40467: PUSH
40468: LD_VAR 0 1
40472: STR
40473: PPUSH
40474: CALL_OW 34
40478: ST_TO_ADDR
40479: GO 40496
// unit := NewCharacter ( ident ) ;
40481: LD_ADDR_VAR 0 5
40485: PUSH
40486: LD_VAR 0 1
40490: PPUSH
40491: CALL_OW 25
40495: ST_TO_ADDR
// result := unit ;
40496: LD_ADDR_VAR 0 4
40500: PUSH
40501: LD_VAR 0 5
40505: ST_TO_ADDR
// end ;
40506: LD_VAR 0 4
40510: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40511: LD_INT 0
40513: PPUSH
40514: PPUSH
// if not side or not nation then
40515: LD_VAR 0 1
40519: NOT
40520: PUSH
40521: LD_VAR 0 2
40525: NOT
40526: OR
40527: IFFALSE 40531
// exit ;
40529: GO 41295
// case nation of nation_american :
40531: LD_VAR 0 2
40535: PUSH
40536: LD_INT 1
40538: DOUBLE
40539: EQUAL
40540: IFTRUE 40544
40542: GO 40758
40544: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40545: LD_ADDR_VAR 0 4
40549: PUSH
40550: LD_INT 35
40552: PUSH
40553: LD_INT 45
40555: PUSH
40556: LD_INT 46
40558: PUSH
40559: LD_INT 47
40561: PUSH
40562: LD_INT 82
40564: PUSH
40565: LD_INT 83
40567: PUSH
40568: LD_INT 84
40570: PUSH
40571: LD_INT 85
40573: PUSH
40574: LD_INT 86
40576: PUSH
40577: LD_INT 1
40579: PUSH
40580: LD_INT 2
40582: PUSH
40583: LD_INT 6
40585: PUSH
40586: LD_INT 15
40588: PUSH
40589: LD_INT 16
40591: PUSH
40592: LD_INT 7
40594: PUSH
40595: LD_INT 12
40597: PUSH
40598: LD_INT 13
40600: PUSH
40601: LD_INT 10
40603: PUSH
40604: LD_INT 14
40606: PUSH
40607: LD_INT 20
40609: PUSH
40610: LD_INT 21
40612: PUSH
40613: LD_INT 22
40615: PUSH
40616: LD_INT 25
40618: PUSH
40619: LD_INT 32
40621: PUSH
40622: LD_INT 27
40624: PUSH
40625: LD_INT 36
40627: PUSH
40628: LD_INT 69
40630: PUSH
40631: LD_INT 39
40633: PUSH
40634: LD_INT 34
40636: PUSH
40637: LD_INT 40
40639: PUSH
40640: LD_INT 48
40642: PUSH
40643: LD_INT 49
40645: PUSH
40646: LD_INT 50
40648: PUSH
40649: LD_INT 51
40651: PUSH
40652: LD_INT 52
40654: PUSH
40655: LD_INT 53
40657: PUSH
40658: LD_INT 54
40660: PUSH
40661: LD_INT 55
40663: PUSH
40664: LD_INT 56
40666: PUSH
40667: LD_INT 57
40669: PUSH
40670: LD_INT 58
40672: PUSH
40673: LD_INT 59
40675: PUSH
40676: LD_INT 60
40678: PUSH
40679: LD_INT 61
40681: PUSH
40682: LD_INT 62
40684: PUSH
40685: LD_INT 80
40687: PUSH
40688: LD_INT 82
40690: PUSH
40691: LD_INT 83
40693: PUSH
40694: LD_INT 84
40696: PUSH
40697: LD_INT 85
40699: PUSH
40700: LD_INT 86
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: ST_TO_ADDR
40756: GO 41219
40758: LD_INT 2
40760: DOUBLE
40761: EQUAL
40762: IFTRUE 40766
40764: GO 40988
40766: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
40767: LD_ADDR_VAR 0 4
40771: PUSH
40772: LD_INT 35
40774: PUSH
40775: LD_INT 45
40777: PUSH
40778: LD_INT 46
40780: PUSH
40781: LD_INT 47
40783: PUSH
40784: LD_INT 82
40786: PUSH
40787: LD_INT 83
40789: PUSH
40790: LD_INT 84
40792: PUSH
40793: LD_INT 85
40795: PUSH
40796: LD_INT 87
40798: PUSH
40799: LD_INT 70
40801: PUSH
40802: LD_INT 1
40804: PUSH
40805: LD_INT 11
40807: PUSH
40808: LD_INT 3
40810: PUSH
40811: LD_INT 4
40813: PUSH
40814: LD_INT 5
40816: PUSH
40817: LD_INT 6
40819: PUSH
40820: LD_INT 15
40822: PUSH
40823: LD_INT 18
40825: PUSH
40826: LD_INT 7
40828: PUSH
40829: LD_INT 17
40831: PUSH
40832: LD_INT 8
40834: PUSH
40835: LD_INT 20
40837: PUSH
40838: LD_INT 21
40840: PUSH
40841: LD_INT 22
40843: PUSH
40844: LD_INT 72
40846: PUSH
40847: LD_INT 26
40849: PUSH
40850: LD_INT 69
40852: PUSH
40853: LD_INT 39
40855: PUSH
40856: LD_INT 40
40858: PUSH
40859: LD_INT 41
40861: PUSH
40862: LD_INT 42
40864: PUSH
40865: LD_INT 43
40867: PUSH
40868: LD_INT 48
40870: PUSH
40871: LD_INT 49
40873: PUSH
40874: LD_INT 50
40876: PUSH
40877: LD_INT 51
40879: PUSH
40880: LD_INT 52
40882: PUSH
40883: LD_INT 53
40885: PUSH
40886: LD_INT 54
40888: PUSH
40889: LD_INT 55
40891: PUSH
40892: LD_INT 56
40894: PUSH
40895: LD_INT 60
40897: PUSH
40898: LD_INT 61
40900: PUSH
40901: LD_INT 62
40903: PUSH
40904: LD_INT 66
40906: PUSH
40907: LD_INT 67
40909: PUSH
40910: LD_INT 68
40912: PUSH
40913: LD_INT 81
40915: PUSH
40916: LD_INT 82
40918: PUSH
40919: LD_INT 83
40921: PUSH
40922: LD_INT 84
40924: PUSH
40925: LD_INT 85
40927: PUSH
40928: LD_INT 87
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: ST_TO_ADDR
40986: GO 41219
40988: LD_INT 3
40990: DOUBLE
40991: EQUAL
40992: IFTRUE 40996
40994: GO 41218
40996: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40997: LD_ADDR_VAR 0 4
41001: PUSH
41002: LD_INT 46
41004: PUSH
41005: LD_INT 47
41007: PUSH
41008: LD_INT 1
41010: PUSH
41011: LD_INT 2
41013: PUSH
41014: LD_INT 82
41016: PUSH
41017: LD_INT 83
41019: PUSH
41020: LD_INT 84
41022: PUSH
41023: LD_INT 85
41025: PUSH
41026: LD_INT 86
41028: PUSH
41029: LD_INT 11
41031: PUSH
41032: LD_INT 9
41034: PUSH
41035: LD_INT 20
41037: PUSH
41038: LD_INT 19
41040: PUSH
41041: LD_INT 21
41043: PUSH
41044: LD_INT 24
41046: PUSH
41047: LD_INT 22
41049: PUSH
41050: LD_INT 25
41052: PUSH
41053: LD_INT 28
41055: PUSH
41056: LD_INT 29
41058: PUSH
41059: LD_INT 30
41061: PUSH
41062: LD_INT 31
41064: PUSH
41065: LD_INT 37
41067: PUSH
41068: LD_INT 38
41070: PUSH
41071: LD_INT 32
41073: PUSH
41074: LD_INT 27
41076: PUSH
41077: LD_INT 33
41079: PUSH
41080: LD_INT 69
41082: PUSH
41083: LD_INT 39
41085: PUSH
41086: LD_INT 34
41088: PUSH
41089: LD_INT 40
41091: PUSH
41092: LD_INT 71
41094: PUSH
41095: LD_INT 23
41097: PUSH
41098: LD_INT 44
41100: PUSH
41101: LD_INT 48
41103: PUSH
41104: LD_INT 49
41106: PUSH
41107: LD_INT 50
41109: PUSH
41110: LD_INT 51
41112: PUSH
41113: LD_INT 52
41115: PUSH
41116: LD_INT 53
41118: PUSH
41119: LD_INT 54
41121: PUSH
41122: LD_INT 55
41124: PUSH
41125: LD_INT 56
41127: PUSH
41128: LD_INT 57
41130: PUSH
41131: LD_INT 58
41133: PUSH
41134: LD_INT 59
41136: PUSH
41137: LD_INT 63
41139: PUSH
41140: LD_INT 64
41142: PUSH
41143: LD_INT 65
41145: PUSH
41146: LD_INT 82
41148: PUSH
41149: LD_INT 83
41151: PUSH
41152: LD_INT 84
41154: PUSH
41155: LD_INT 85
41157: PUSH
41158: LD_INT 86
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: ST_TO_ADDR
41216: GO 41219
41218: POP
// if state > - 1 and state < 3 then
41219: LD_VAR 0 3
41223: PUSH
41224: LD_INT 1
41226: NEG
41227: GREATER
41228: PUSH
41229: LD_VAR 0 3
41233: PUSH
41234: LD_INT 3
41236: LESS
41237: AND
41238: IFFALSE 41295
// for i in result do
41240: LD_ADDR_VAR 0 5
41244: PUSH
41245: LD_VAR 0 4
41249: PUSH
41250: FOR_IN
41251: IFFALSE 41293
// if GetTech ( i , side ) <> state then
41253: LD_VAR 0 5
41257: PPUSH
41258: LD_VAR 0 1
41262: PPUSH
41263: CALL_OW 321
41267: PUSH
41268: LD_VAR 0 3
41272: NONEQUAL
41273: IFFALSE 41291
// result := result diff i ;
41275: LD_ADDR_VAR 0 4
41279: PUSH
41280: LD_VAR 0 4
41284: PUSH
41285: LD_VAR 0 5
41289: DIFF
41290: ST_TO_ADDR
41291: GO 41250
41293: POP
41294: POP
// end ;
41295: LD_VAR 0 4
41299: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41300: LD_INT 0
41302: PPUSH
41303: PPUSH
41304: PPUSH
// result := true ;
41305: LD_ADDR_VAR 0 3
41309: PUSH
41310: LD_INT 1
41312: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41313: LD_ADDR_VAR 0 5
41317: PUSH
41318: LD_VAR 0 2
41322: PPUSH
41323: CALL_OW 480
41327: ST_TO_ADDR
// if not tmp then
41328: LD_VAR 0 5
41332: NOT
41333: IFFALSE 41337
// exit ;
41335: GO 41386
// for i in tmp do
41337: LD_ADDR_VAR 0 4
41341: PUSH
41342: LD_VAR 0 5
41346: PUSH
41347: FOR_IN
41348: IFFALSE 41384
// if GetTech ( i , side ) <> state_researched then
41350: LD_VAR 0 4
41354: PPUSH
41355: LD_VAR 0 1
41359: PPUSH
41360: CALL_OW 321
41364: PUSH
41365: LD_INT 2
41367: NONEQUAL
41368: IFFALSE 41382
// begin result := false ;
41370: LD_ADDR_VAR 0 3
41374: PUSH
41375: LD_INT 0
41377: ST_TO_ADDR
// exit ;
41378: POP
41379: POP
41380: GO 41386
// end ;
41382: GO 41347
41384: POP
41385: POP
// end ;
41386: LD_VAR 0 3
41390: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41391: LD_INT 0
41393: PPUSH
41394: PPUSH
41395: PPUSH
41396: PPUSH
41397: PPUSH
41398: PPUSH
41399: PPUSH
41400: PPUSH
41401: PPUSH
41402: PPUSH
41403: PPUSH
41404: PPUSH
41405: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41406: LD_VAR 0 1
41410: NOT
41411: PUSH
41412: LD_VAR 0 1
41416: PPUSH
41417: CALL_OW 257
41421: PUSH
41422: LD_INT 9
41424: NONEQUAL
41425: OR
41426: IFFALSE 41430
// exit ;
41428: GO 42003
// side := GetSide ( unit ) ;
41430: LD_ADDR_VAR 0 9
41434: PUSH
41435: LD_VAR 0 1
41439: PPUSH
41440: CALL_OW 255
41444: ST_TO_ADDR
// tech_space := tech_spacanom ;
41445: LD_ADDR_VAR 0 12
41449: PUSH
41450: LD_INT 29
41452: ST_TO_ADDR
// tech_time := tech_taurad ;
41453: LD_ADDR_VAR 0 13
41457: PUSH
41458: LD_INT 28
41460: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41461: LD_ADDR_VAR 0 11
41465: PUSH
41466: LD_VAR 0 1
41470: PPUSH
41471: CALL_OW 310
41475: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41476: LD_VAR 0 11
41480: PPUSH
41481: CALL_OW 247
41485: PUSH
41486: LD_INT 2
41488: EQUAL
41489: IFFALSE 41493
// exit ;
41491: GO 42003
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41493: LD_ADDR_VAR 0 8
41497: PUSH
41498: LD_INT 81
41500: PUSH
41501: LD_VAR 0 9
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 3
41512: PUSH
41513: LD_INT 21
41515: PUSH
41516: LD_INT 3
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PPUSH
41531: CALL_OW 69
41535: ST_TO_ADDR
// if not tmp then
41536: LD_VAR 0 8
41540: NOT
41541: IFFALSE 41545
// exit ;
41543: GO 42003
// if in_unit then
41545: LD_VAR 0 11
41549: IFFALSE 41573
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41551: LD_ADDR_VAR 0 10
41555: PUSH
41556: LD_VAR 0 8
41560: PPUSH
41561: LD_VAR 0 11
41565: PPUSH
41566: CALL_OW 74
41570: ST_TO_ADDR
41571: GO 41593
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41573: LD_ADDR_VAR 0 10
41577: PUSH
41578: LD_VAR 0 8
41582: PPUSH
41583: LD_VAR 0 1
41587: PPUSH
41588: CALL_OW 74
41592: ST_TO_ADDR
// if not enemy then
41593: LD_VAR 0 10
41597: NOT
41598: IFFALSE 41602
// exit ;
41600: GO 42003
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41602: LD_VAR 0 11
41606: PUSH
41607: LD_VAR 0 11
41611: PPUSH
41612: LD_VAR 0 10
41616: PPUSH
41617: CALL_OW 296
41621: PUSH
41622: LD_INT 13
41624: GREATER
41625: AND
41626: PUSH
41627: LD_VAR 0 1
41631: PPUSH
41632: LD_VAR 0 10
41636: PPUSH
41637: CALL_OW 296
41641: PUSH
41642: LD_INT 12
41644: GREATER
41645: OR
41646: IFFALSE 41650
// exit ;
41648: GO 42003
// missile := [ 1 ] ;
41650: LD_ADDR_VAR 0 14
41654: PUSH
41655: LD_INT 1
41657: PUSH
41658: EMPTY
41659: LIST
41660: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41661: LD_VAR 0 9
41665: PPUSH
41666: LD_VAR 0 12
41670: PPUSH
41671: CALL_OW 325
41675: IFFALSE 41704
// missile := Insert ( missile , missile + 1 , 2 ) ;
41677: LD_ADDR_VAR 0 14
41681: PUSH
41682: LD_VAR 0 14
41686: PPUSH
41687: LD_VAR 0 14
41691: PUSH
41692: LD_INT 1
41694: PLUS
41695: PPUSH
41696: LD_INT 2
41698: PPUSH
41699: CALL_OW 2
41703: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41704: LD_VAR 0 9
41708: PPUSH
41709: LD_VAR 0 13
41713: PPUSH
41714: CALL_OW 325
41718: PUSH
41719: LD_VAR 0 10
41723: PPUSH
41724: CALL_OW 255
41728: PPUSH
41729: LD_VAR 0 13
41733: PPUSH
41734: CALL_OW 325
41738: NOT
41739: AND
41740: IFFALSE 41769
// missile := Insert ( missile , missile + 1 , 3 ) ;
41742: LD_ADDR_VAR 0 14
41746: PUSH
41747: LD_VAR 0 14
41751: PPUSH
41752: LD_VAR 0 14
41756: PUSH
41757: LD_INT 1
41759: PLUS
41760: PPUSH
41761: LD_INT 3
41763: PPUSH
41764: CALL_OW 2
41768: ST_TO_ADDR
// if missile < 2 then
41769: LD_VAR 0 14
41773: PUSH
41774: LD_INT 2
41776: LESS
41777: IFFALSE 41781
// exit ;
41779: GO 42003
// x := GetX ( enemy ) ;
41781: LD_ADDR_VAR 0 4
41785: PUSH
41786: LD_VAR 0 10
41790: PPUSH
41791: CALL_OW 250
41795: ST_TO_ADDR
// y := GetY ( enemy ) ;
41796: LD_ADDR_VAR 0 5
41800: PUSH
41801: LD_VAR 0 10
41805: PPUSH
41806: CALL_OW 251
41810: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41811: LD_ADDR_VAR 0 6
41815: PUSH
41816: LD_VAR 0 4
41820: PUSH
41821: LD_INT 1
41823: NEG
41824: PPUSH
41825: LD_INT 1
41827: PPUSH
41828: CALL_OW 12
41832: PLUS
41833: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41834: LD_ADDR_VAR 0 7
41838: PUSH
41839: LD_VAR 0 5
41843: PUSH
41844: LD_INT 1
41846: NEG
41847: PPUSH
41848: LD_INT 1
41850: PPUSH
41851: CALL_OW 12
41855: PLUS
41856: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41857: LD_VAR 0 6
41861: PPUSH
41862: LD_VAR 0 7
41866: PPUSH
41867: CALL_OW 488
41871: NOT
41872: IFFALSE 41894
// begin _x := x ;
41874: LD_ADDR_VAR 0 6
41878: PUSH
41879: LD_VAR 0 4
41883: ST_TO_ADDR
// _y := y ;
41884: LD_ADDR_VAR 0 7
41888: PUSH
41889: LD_VAR 0 5
41893: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41894: LD_ADDR_VAR 0 3
41898: PUSH
41899: LD_INT 1
41901: PPUSH
41902: LD_VAR 0 14
41906: PPUSH
41907: CALL_OW 12
41911: ST_TO_ADDR
// case i of 1 :
41912: LD_VAR 0 3
41916: PUSH
41917: LD_INT 1
41919: DOUBLE
41920: EQUAL
41921: IFTRUE 41925
41923: GO 41942
41925: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41926: LD_VAR 0 1
41930: PPUSH
41931: LD_VAR 0 10
41935: PPUSH
41936: CALL_OW 115
41940: GO 42003
41942: LD_INT 2
41944: DOUBLE
41945: EQUAL
41946: IFTRUE 41950
41948: GO 41972
41950: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41951: LD_VAR 0 1
41955: PPUSH
41956: LD_VAR 0 6
41960: PPUSH
41961: LD_VAR 0 7
41965: PPUSH
41966: CALL_OW 153
41970: GO 42003
41972: LD_INT 3
41974: DOUBLE
41975: EQUAL
41976: IFTRUE 41980
41978: GO 42002
41980: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41981: LD_VAR 0 1
41985: PPUSH
41986: LD_VAR 0 6
41990: PPUSH
41991: LD_VAR 0 7
41995: PPUSH
41996: CALL_OW 154
42000: GO 42003
42002: POP
// end ;
42003: LD_VAR 0 2
42007: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42008: LD_INT 0
42010: PPUSH
42011: PPUSH
42012: PPUSH
42013: PPUSH
42014: PPUSH
42015: PPUSH
// if not unit or not building then
42016: LD_VAR 0 1
42020: NOT
42021: PUSH
42022: LD_VAR 0 2
42026: NOT
42027: OR
42028: IFFALSE 42032
// exit ;
42030: GO 42190
// x := GetX ( building ) ;
42032: LD_ADDR_VAR 0 5
42036: PUSH
42037: LD_VAR 0 2
42041: PPUSH
42042: CALL_OW 250
42046: ST_TO_ADDR
// y := GetY ( building ) ;
42047: LD_ADDR_VAR 0 6
42051: PUSH
42052: LD_VAR 0 2
42056: PPUSH
42057: CALL_OW 251
42061: ST_TO_ADDR
// for i = 0 to 5 do
42062: LD_ADDR_VAR 0 4
42066: PUSH
42067: DOUBLE
42068: LD_INT 0
42070: DEC
42071: ST_TO_ADDR
42072: LD_INT 5
42074: PUSH
42075: FOR_TO
42076: IFFALSE 42188
// begin _x := ShiftX ( x , i , 3 ) ;
42078: LD_ADDR_VAR 0 7
42082: PUSH
42083: LD_VAR 0 5
42087: PPUSH
42088: LD_VAR 0 4
42092: PPUSH
42093: LD_INT 3
42095: PPUSH
42096: CALL_OW 272
42100: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42101: LD_ADDR_VAR 0 8
42105: PUSH
42106: LD_VAR 0 6
42110: PPUSH
42111: LD_VAR 0 4
42115: PPUSH
42116: LD_INT 3
42118: PPUSH
42119: CALL_OW 273
42123: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42124: LD_VAR 0 7
42128: PPUSH
42129: LD_VAR 0 8
42133: PPUSH
42134: CALL_OW 488
42138: NOT
42139: IFFALSE 42143
// continue ;
42141: GO 42075
// if HexInfo ( _x , _y ) = 0 then
42143: LD_VAR 0 7
42147: PPUSH
42148: LD_VAR 0 8
42152: PPUSH
42153: CALL_OW 428
42157: PUSH
42158: LD_INT 0
42160: EQUAL
42161: IFFALSE 42186
// begin ComMoveXY ( unit , _x , _y ) ;
42163: LD_VAR 0 1
42167: PPUSH
42168: LD_VAR 0 7
42172: PPUSH
42173: LD_VAR 0 8
42177: PPUSH
42178: CALL_OW 111
// exit ;
42182: POP
42183: POP
42184: GO 42190
// end ; end ;
42186: GO 42075
42188: POP
42189: POP
// end ;
42190: LD_VAR 0 3
42194: RET
// export function ScanBase ( side , base_area ) ; begin
42195: LD_INT 0
42197: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42198: LD_ADDR_VAR 0 3
42202: PUSH
42203: LD_VAR 0 2
42207: PPUSH
42208: LD_INT 81
42210: PUSH
42211: LD_VAR 0 1
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PPUSH
42220: CALL_OW 70
42224: ST_TO_ADDR
// end ;
42225: LD_VAR 0 3
42229: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42230: LD_INT 0
42232: PPUSH
42233: PPUSH
42234: PPUSH
42235: PPUSH
// result := false ;
42236: LD_ADDR_VAR 0 2
42240: PUSH
42241: LD_INT 0
42243: ST_TO_ADDR
// side := GetSide ( unit ) ;
42244: LD_ADDR_VAR 0 3
42248: PUSH
42249: LD_VAR 0 1
42253: PPUSH
42254: CALL_OW 255
42258: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42259: LD_ADDR_VAR 0 4
42263: PUSH
42264: LD_VAR 0 1
42268: PPUSH
42269: CALL_OW 248
42273: ST_TO_ADDR
// case nat of 1 :
42274: LD_VAR 0 4
42278: PUSH
42279: LD_INT 1
42281: DOUBLE
42282: EQUAL
42283: IFTRUE 42287
42285: GO 42298
42287: POP
// tech := tech_lassight ; 2 :
42288: LD_ADDR_VAR 0 5
42292: PUSH
42293: LD_INT 12
42295: ST_TO_ADDR
42296: GO 42337
42298: LD_INT 2
42300: DOUBLE
42301: EQUAL
42302: IFTRUE 42306
42304: GO 42317
42306: POP
// tech := tech_mortar ; 3 :
42307: LD_ADDR_VAR 0 5
42311: PUSH
42312: LD_INT 41
42314: ST_TO_ADDR
42315: GO 42337
42317: LD_INT 3
42319: DOUBLE
42320: EQUAL
42321: IFTRUE 42325
42323: GO 42336
42325: POP
// tech := tech_bazooka ; end ;
42326: LD_ADDR_VAR 0 5
42330: PUSH
42331: LD_INT 44
42333: ST_TO_ADDR
42334: GO 42337
42336: POP
// if Researched ( side , tech ) then
42337: LD_VAR 0 3
42341: PPUSH
42342: LD_VAR 0 5
42346: PPUSH
42347: CALL_OW 325
42351: IFFALSE 42378
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42353: LD_ADDR_VAR 0 2
42357: PUSH
42358: LD_INT 5
42360: PUSH
42361: LD_INT 8
42363: PUSH
42364: LD_INT 9
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: LIST
42371: PUSH
42372: LD_VAR 0 4
42376: ARRAY
42377: ST_TO_ADDR
// end ;
42378: LD_VAR 0 2
42382: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42383: LD_INT 0
42385: PPUSH
42386: PPUSH
42387: PPUSH
// if not mines then
42388: LD_VAR 0 2
42392: NOT
42393: IFFALSE 42397
// exit ;
42395: GO 42541
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42397: LD_ADDR_VAR 0 5
42401: PUSH
42402: LD_INT 81
42404: PUSH
42405: LD_VAR 0 1
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 3
42416: PUSH
42417: LD_INT 21
42419: PUSH
42420: LD_INT 3
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PPUSH
42435: CALL_OW 69
42439: ST_TO_ADDR
// for i in mines do
42440: LD_ADDR_VAR 0 4
42444: PUSH
42445: LD_VAR 0 2
42449: PUSH
42450: FOR_IN
42451: IFFALSE 42539
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42453: LD_VAR 0 4
42457: PUSH
42458: LD_INT 1
42460: ARRAY
42461: PPUSH
42462: LD_VAR 0 4
42466: PUSH
42467: LD_INT 2
42469: ARRAY
42470: PPUSH
42471: CALL_OW 458
42475: NOT
42476: IFFALSE 42480
// continue ;
42478: GO 42450
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42480: LD_VAR 0 4
42484: PUSH
42485: LD_INT 1
42487: ARRAY
42488: PPUSH
42489: LD_VAR 0 4
42493: PUSH
42494: LD_INT 2
42496: ARRAY
42497: PPUSH
42498: CALL_OW 428
42502: PUSH
42503: LD_VAR 0 5
42507: IN
42508: IFFALSE 42537
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42510: LD_VAR 0 4
42514: PUSH
42515: LD_INT 1
42517: ARRAY
42518: PPUSH
42519: LD_VAR 0 4
42523: PUSH
42524: LD_INT 2
42526: ARRAY
42527: PPUSH
42528: LD_VAR 0 1
42532: PPUSH
42533: CALL_OW 456
// end ;
42537: GO 42450
42539: POP
42540: POP
// end ;
42541: LD_VAR 0 3
42545: RET
// export function Count ( array ) ; var i ; begin
42546: LD_INT 0
42548: PPUSH
42549: PPUSH
// result := 0 ;
42550: LD_ADDR_VAR 0 2
42554: PUSH
42555: LD_INT 0
42557: ST_TO_ADDR
// for i in array do
42558: LD_ADDR_VAR 0 3
42562: PUSH
42563: LD_VAR 0 1
42567: PUSH
42568: FOR_IN
42569: IFFALSE 42593
// if i then
42571: LD_VAR 0 3
42575: IFFALSE 42591
// result := result + 1 ;
42577: LD_ADDR_VAR 0 2
42581: PUSH
42582: LD_VAR 0 2
42586: PUSH
42587: LD_INT 1
42589: PLUS
42590: ST_TO_ADDR
42591: GO 42568
42593: POP
42594: POP
// end ;
42595: LD_VAR 0 2
42599: RET
// export function IsEmpty ( building ) ; begin
42600: LD_INT 0
42602: PPUSH
// if not building then
42603: LD_VAR 0 1
42607: NOT
42608: IFFALSE 42612
// exit ;
42610: GO 42655
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42612: LD_ADDR_VAR 0 2
42616: PUSH
42617: LD_VAR 0 1
42621: PUSH
42622: LD_INT 22
42624: PUSH
42625: LD_VAR 0 1
42629: PPUSH
42630: CALL_OW 255
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 58
42641: PUSH
42642: EMPTY
42643: LIST
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PPUSH
42649: CALL_OW 69
42653: IN
42654: ST_TO_ADDR
// end ;
42655: LD_VAR 0 2
42659: RET
// export function IsNotFull ( building ) ; begin
42660: LD_INT 0
42662: PPUSH
// if not building then
42663: LD_VAR 0 1
42667: NOT
42668: IFFALSE 42672
// exit ;
42670: GO 42691
// result := UnitsInside ( building ) < 6 ;
42672: LD_ADDR_VAR 0 2
42676: PUSH
42677: LD_VAR 0 1
42681: PPUSH
42682: CALL_OW 313
42686: PUSH
42687: LD_INT 6
42689: LESS
42690: ST_TO_ADDR
// end ;
42691: LD_VAR 0 2
42695: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42696: LD_INT 0
42698: PPUSH
42699: PPUSH
42700: PPUSH
42701: PPUSH
// tmp := [ ] ;
42702: LD_ADDR_VAR 0 3
42706: PUSH
42707: EMPTY
42708: ST_TO_ADDR
// list := [ ] ;
42709: LD_ADDR_VAR 0 5
42713: PUSH
42714: EMPTY
42715: ST_TO_ADDR
// for i = 16 to 25 do
42716: LD_ADDR_VAR 0 4
42720: PUSH
42721: DOUBLE
42722: LD_INT 16
42724: DEC
42725: ST_TO_ADDR
42726: LD_INT 25
42728: PUSH
42729: FOR_TO
42730: IFFALSE 42803
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42732: LD_ADDR_VAR 0 3
42736: PUSH
42737: LD_VAR 0 3
42741: PUSH
42742: LD_INT 22
42744: PUSH
42745: LD_VAR 0 1
42749: PPUSH
42750: CALL_OW 255
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 91
42761: PUSH
42762: LD_VAR 0 1
42766: PUSH
42767: LD_INT 6
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 30
42777: PUSH
42778: LD_VAR 0 4
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: LIST
42791: PUSH
42792: EMPTY
42793: LIST
42794: PPUSH
42795: CALL_OW 69
42799: ADD
42800: ST_TO_ADDR
42801: GO 42729
42803: POP
42804: POP
// for i = 1 to tmp do
42805: LD_ADDR_VAR 0 4
42809: PUSH
42810: DOUBLE
42811: LD_INT 1
42813: DEC
42814: ST_TO_ADDR
42815: LD_VAR 0 3
42819: PUSH
42820: FOR_TO
42821: IFFALSE 42909
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42823: LD_ADDR_VAR 0 5
42827: PUSH
42828: LD_VAR 0 5
42832: PUSH
42833: LD_VAR 0 3
42837: PUSH
42838: LD_VAR 0 4
42842: ARRAY
42843: PPUSH
42844: CALL_OW 266
42848: PUSH
42849: LD_VAR 0 3
42853: PUSH
42854: LD_VAR 0 4
42858: ARRAY
42859: PPUSH
42860: CALL_OW 250
42864: PUSH
42865: LD_VAR 0 3
42869: PUSH
42870: LD_VAR 0 4
42874: ARRAY
42875: PPUSH
42876: CALL_OW 251
42880: PUSH
42881: LD_VAR 0 3
42885: PUSH
42886: LD_VAR 0 4
42890: ARRAY
42891: PPUSH
42892: CALL_OW 254
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: PUSH
42903: EMPTY
42904: LIST
42905: ADD
42906: ST_TO_ADDR
42907: GO 42820
42909: POP
42910: POP
// result := list ;
42911: LD_ADDR_VAR 0 2
42915: PUSH
42916: LD_VAR 0 5
42920: ST_TO_ADDR
// end ;
42921: LD_VAR 0 2
42925: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42926: LD_INT 0
42928: PPUSH
42929: PPUSH
42930: PPUSH
42931: PPUSH
42932: PPUSH
42933: PPUSH
42934: PPUSH
// if not factory then
42935: LD_VAR 0 1
42939: NOT
42940: IFFALSE 42944
// exit ;
42942: GO 43537
// if control = control_apeman then
42944: LD_VAR 0 4
42948: PUSH
42949: LD_INT 5
42951: EQUAL
42952: IFFALSE 43061
// begin tmp := UnitsInside ( factory ) ;
42954: LD_ADDR_VAR 0 8
42958: PUSH
42959: LD_VAR 0 1
42963: PPUSH
42964: CALL_OW 313
42968: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42969: LD_VAR 0 8
42973: PPUSH
42974: LD_INT 25
42976: PUSH
42977: LD_INT 12
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PPUSH
42984: CALL_OW 72
42988: NOT
42989: IFFALSE 42999
// control := control_manual ;
42991: LD_ADDR_VAR 0 4
42995: PUSH
42996: LD_INT 1
42998: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42999: LD_ADDR_VAR 0 8
43003: PUSH
43004: LD_VAR 0 1
43008: PPUSH
43009: CALL 42696 0 1
43013: ST_TO_ADDR
// if tmp then
43014: LD_VAR 0 8
43018: IFFALSE 43061
// begin for i in tmp do
43020: LD_ADDR_VAR 0 7
43024: PUSH
43025: LD_VAR 0 8
43029: PUSH
43030: FOR_IN
43031: IFFALSE 43059
// if i [ 1 ] = b_ext_radio then
43033: LD_VAR 0 7
43037: PUSH
43038: LD_INT 1
43040: ARRAY
43041: PUSH
43042: LD_INT 22
43044: EQUAL
43045: IFFALSE 43057
// begin control := control_remote ;
43047: LD_ADDR_VAR 0 4
43051: PUSH
43052: LD_INT 2
43054: ST_TO_ADDR
// break ;
43055: GO 43059
// end ;
43057: GO 43030
43059: POP
43060: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43061: LD_VAR 0 1
43065: PPUSH
43066: LD_VAR 0 2
43070: PPUSH
43071: LD_VAR 0 3
43075: PPUSH
43076: LD_VAR 0 4
43080: PPUSH
43081: LD_VAR 0 5
43085: PPUSH
43086: CALL_OW 448
43090: IFFALSE 43125
// begin result := [ chassis , engine , control , weapon ] ;
43092: LD_ADDR_VAR 0 6
43096: PUSH
43097: LD_VAR 0 2
43101: PUSH
43102: LD_VAR 0 3
43106: PUSH
43107: LD_VAR 0 4
43111: PUSH
43112: LD_VAR 0 5
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: ST_TO_ADDR
// exit ;
43123: GO 43537
// end ; _chassis := AvailableChassisList ( factory ) ;
43125: LD_ADDR_VAR 0 9
43129: PUSH
43130: LD_VAR 0 1
43134: PPUSH
43135: CALL_OW 475
43139: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43140: LD_ADDR_VAR 0 11
43144: PUSH
43145: LD_VAR 0 1
43149: PPUSH
43150: CALL_OW 476
43154: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43155: LD_ADDR_VAR 0 12
43159: PUSH
43160: LD_VAR 0 1
43164: PPUSH
43165: CALL_OW 477
43169: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43170: LD_ADDR_VAR 0 10
43174: PUSH
43175: LD_VAR 0 1
43179: PPUSH
43180: CALL_OW 478
43184: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43185: LD_VAR 0 9
43189: NOT
43190: PUSH
43191: LD_VAR 0 11
43195: NOT
43196: OR
43197: PUSH
43198: LD_VAR 0 12
43202: NOT
43203: OR
43204: PUSH
43205: LD_VAR 0 10
43209: NOT
43210: OR
43211: IFFALSE 43246
// begin result := [ chassis , engine , control , weapon ] ;
43213: LD_ADDR_VAR 0 6
43217: PUSH
43218: LD_VAR 0 2
43222: PUSH
43223: LD_VAR 0 3
43227: PUSH
43228: LD_VAR 0 4
43232: PUSH
43233: LD_VAR 0 5
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: ST_TO_ADDR
// exit ;
43244: GO 43537
// end ; if not chassis in _chassis then
43246: LD_VAR 0 2
43250: PUSH
43251: LD_VAR 0 9
43255: IN
43256: NOT
43257: IFFALSE 43283
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43259: LD_ADDR_VAR 0 2
43263: PUSH
43264: LD_VAR 0 9
43268: PUSH
43269: LD_INT 1
43271: PPUSH
43272: LD_VAR 0 9
43276: PPUSH
43277: CALL_OW 12
43281: ARRAY
43282: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43283: LD_VAR 0 2
43287: PPUSH
43288: LD_VAR 0 3
43292: PPUSH
43293: CALL 43542 0 2
43297: NOT
43298: IFFALSE 43357
// repeat engine := _engine [ 1 ] ;
43300: LD_ADDR_VAR 0 3
43304: PUSH
43305: LD_VAR 0 11
43309: PUSH
43310: LD_INT 1
43312: ARRAY
43313: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43314: LD_ADDR_VAR 0 11
43318: PUSH
43319: LD_VAR 0 11
43323: PPUSH
43324: LD_INT 1
43326: PPUSH
43327: CALL_OW 3
43331: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43332: LD_VAR 0 2
43336: PPUSH
43337: LD_VAR 0 3
43341: PPUSH
43342: CALL 43542 0 2
43346: PUSH
43347: LD_VAR 0 11
43351: PUSH
43352: EMPTY
43353: EQUAL
43354: OR
43355: IFFALSE 43300
// if not control in _control then
43357: LD_VAR 0 4
43361: PUSH
43362: LD_VAR 0 12
43366: IN
43367: NOT
43368: IFFALSE 43394
// control := _control [ rand ( 1 , _control ) ] ;
43370: LD_ADDR_VAR 0 4
43374: PUSH
43375: LD_VAR 0 12
43379: PUSH
43380: LD_INT 1
43382: PPUSH
43383: LD_VAR 0 12
43387: PPUSH
43388: CALL_OW 12
43392: ARRAY
43393: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43394: LD_VAR 0 2
43398: PPUSH
43399: LD_VAR 0 5
43403: PPUSH
43404: CALL 43762 0 2
43408: NOT
43409: IFFALSE 43468
// repeat weapon := _weapon [ 1 ] ;
43411: LD_ADDR_VAR 0 5
43415: PUSH
43416: LD_VAR 0 10
43420: PUSH
43421: LD_INT 1
43423: ARRAY
43424: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43425: LD_ADDR_VAR 0 10
43429: PUSH
43430: LD_VAR 0 10
43434: PPUSH
43435: LD_INT 1
43437: PPUSH
43438: CALL_OW 3
43442: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43443: LD_VAR 0 2
43447: PPUSH
43448: LD_VAR 0 5
43452: PPUSH
43453: CALL 43762 0 2
43457: PUSH
43458: LD_VAR 0 10
43462: PUSH
43463: EMPTY
43464: EQUAL
43465: OR
43466: IFFALSE 43411
// result := [ ] ;
43468: LD_ADDR_VAR 0 6
43472: PUSH
43473: EMPTY
43474: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43475: LD_VAR 0 1
43479: PPUSH
43480: LD_VAR 0 2
43484: PPUSH
43485: LD_VAR 0 3
43489: PPUSH
43490: LD_VAR 0 4
43494: PPUSH
43495: LD_VAR 0 5
43499: PPUSH
43500: CALL_OW 448
43504: IFFALSE 43537
// result := [ chassis , engine , control , weapon ] ;
43506: LD_ADDR_VAR 0 6
43510: PUSH
43511: LD_VAR 0 2
43515: PUSH
43516: LD_VAR 0 3
43520: PUSH
43521: LD_VAR 0 4
43525: PUSH
43526: LD_VAR 0 5
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: ST_TO_ADDR
// end ;
43537: LD_VAR 0 6
43541: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43542: LD_INT 0
43544: PPUSH
// if not chassis or not engine then
43545: LD_VAR 0 1
43549: NOT
43550: PUSH
43551: LD_VAR 0 2
43555: NOT
43556: OR
43557: IFFALSE 43561
// exit ;
43559: GO 43757
// case engine of engine_solar :
43561: LD_VAR 0 2
43565: PUSH
43566: LD_INT 2
43568: DOUBLE
43569: EQUAL
43570: IFTRUE 43574
43572: GO 43612
43574: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43575: LD_ADDR_VAR 0 3
43579: PUSH
43580: LD_INT 11
43582: PUSH
43583: LD_INT 12
43585: PUSH
43586: LD_INT 13
43588: PUSH
43589: LD_INT 14
43591: PUSH
43592: LD_INT 1
43594: PUSH
43595: LD_INT 2
43597: PUSH
43598: LD_INT 3
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: ST_TO_ADDR
43610: GO 43741
43612: LD_INT 1
43614: DOUBLE
43615: EQUAL
43616: IFTRUE 43620
43618: GO 43682
43620: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43621: LD_ADDR_VAR 0 3
43625: PUSH
43626: LD_INT 11
43628: PUSH
43629: LD_INT 12
43631: PUSH
43632: LD_INT 13
43634: PUSH
43635: LD_INT 14
43637: PUSH
43638: LD_INT 1
43640: PUSH
43641: LD_INT 2
43643: PUSH
43644: LD_INT 3
43646: PUSH
43647: LD_INT 4
43649: PUSH
43650: LD_INT 5
43652: PUSH
43653: LD_INT 21
43655: PUSH
43656: LD_INT 23
43658: PUSH
43659: LD_INT 22
43661: PUSH
43662: LD_INT 24
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: ST_TO_ADDR
43680: GO 43741
43682: LD_INT 3
43684: DOUBLE
43685: EQUAL
43686: IFTRUE 43690
43688: GO 43740
43690: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43691: LD_ADDR_VAR 0 3
43695: PUSH
43696: LD_INT 13
43698: PUSH
43699: LD_INT 14
43701: PUSH
43702: LD_INT 2
43704: PUSH
43705: LD_INT 3
43707: PUSH
43708: LD_INT 4
43710: PUSH
43711: LD_INT 5
43713: PUSH
43714: LD_INT 21
43716: PUSH
43717: LD_INT 22
43719: PUSH
43720: LD_INT 23
43722: PUSH
43723: LD_INT 24
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: ST_TO_ADDR
43738: GO 43741
43740: POP
// result := ( chassis in result ) ;
43741: LD_ADDR_VAR 0 3
43745: PUSH
43746: LD_VAR 0 1
43750: PUSH
43751: LD_VAR 0 3
43755: IN
43756: ST_TO_ADDR
// end ;
43757: LD_VAR 0 3
43761: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43762: LD_INT 0
43764: PPUSH
// if not chassis or not weapon then
43765: LD_VAR 0 1
43769: NOT
43770: PUSH
43771: LD_VAR 0 2
43775: NOT
43776: OR
43777: IFFALSE 43781
// exit ;
43779: GO 44807
// case weapon of us_machine_gun :
43781: LD_VAR 0 2
43785: PUSH
43786: LD_INT 2
43788: DOUBLE
43789: EQUAL
43790: IFTRUE 43794
43792: GO 43824
43794: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43795: LD_ADDR_VAR 0 3
43799: PUSH
43800: LD_INT 1
43802: PUSH
43803: LD_INT 2
43805: PUSH
43806: LD_INT 3
43808: PUSH
43809: LD_INT 4
43811: PUSH
43812: LD_INT 5
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: ST_TO_ADDR
43822: GO 44791
43824: LD_INT 3
43826: DOUBLE
43827: EQUAL
43828: IFTRUE 43832
43830: GO 43862
43832: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43833: LD_ADDR_VAR 0 3
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: LD_INT 2
43843: PUSH
43844: LD_INT 3
43846: PUSH
43847: LD_INT 4
43849: PUSH
43850: LD_INT 5
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: ST_TO_ADDR
43860: GO 44791
43862: LD_INT 11
43864: DOUBLE
43865: EQUAL
43866: IFTRUE 43870
43868: GO 43900
43870: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43871: LD_ADDR_VAR 0 3
43875: PUSH
43876: LD_INT 1
43878: PUSH
43879: LD_INT 2
43881: PUSH
43882: LD_INT 3
43884: PUSH
43885: LD_INT 4
43887: PUSH
43888: LD_INT 5
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: ST_TO_ADDR
43898: GO 44791
43900: LD_INT 4
43902: DOUBLE
43903: EQUAL
43904: IFTRUE 43908
43906: GO 43934
43908: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43909: LD_ADDR_VAR 0 3
43913: PUSH
43914: LD_INT 2
43916: PUSH
43917: LD_INT 3
43919: PUSH
43920: LD_INT 4
43922: PUSH
43923: LD_INT 5
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: ST_TO_ADDR
43932: GO 44791
43934: LD_INT 5
43936: DOUBLE
43937: EQUAL
43938: IFTRUE 43942
43940: GO 43968
43942: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43943: LD_ADDR_VAR 0 3
43947: PUSH
43948: LD_INT 2
43950: PUSH
43951: LD_INT 3
43953: PUSH
43954: LD_INT 4
43956: PUSH
43957: LD_INT 5
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: ST_TO_ADDR
43966: GO 44791
43968: LD_INT 9
43970: DOUBLE
43971: EQUAL
43972: IFTRUE 43976
43974: GO 44002
43976: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43977: LD_ADDR_VAR 0 3
43981: PUSH
43982: LD_INT 2
43984: PUSH
43985: LD_INT 3
43987: PUSH
43988: LD_INT 4
43990: PUSH
43991: LD_INT 5
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: ST_TO_ADDR
44000: GO 44791
44002: LD_INT 7
44004: DOUBLE
44005: EQUAL
44006: IFTRUE 44010
44008: GO 44036
44010: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44011: LD_ADDR_VAR 0 3
44015: PUSH
44016: LD_INT 2
44018: PUSH
44019: LD_INT 3
44021: PUSH
44022: LD_INT 4
44024: PUSH
44025: LD_INT 5
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: ST_TO_ADDR
44034: GO 44791
44036: LD_INT 12
44038: DOUBLE
44039: EQUAL
44040: IFTRUE 44044
44042: GO 44070
44044: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44045: LD_ADDR_VAR 0 3
44049: PUSH
44050: LD_INT 2
44052: PUSH
44053: LD_INT 3
44055: PUSH
44056: LD_INT 4
44058: PUSH
44059: LD_INT 5
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: ST_TO_ADDR
44068: GO 44791
44070: LD_INT 13
44072: DOUBLE
44073: EQUAL
44074: IFTRUE 44078
44076: GO 44104
44078: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44079: LD_ADDR_VAR 0 3
44083: PUSH
44084: LD_INT 2
44086: PUSH
44087: LD_INT 3
44089: PUSH
44090: LD_INT 4
44092: PUSH
44093: LD_INT 5
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: ST_TO_ADDR
44102: GO 44791
44104: LD_INT 14
44106: DOUBLE
44107: EQUAL
44108: IFTRUE 44112
44110: GO 44130
44112: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44113: LD_ADDR_VAR 0 3
44117: PUSH
44118: LD_INT 4
44120: PUSH
44121: LD_INT 5
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: ST_TO_ADDR
44128: GO 44791
44130: LD_INT 6
44132: DOUBLE
44133: EQUAL
44134: IFTRUE 44138
44136: GO 44156
44138: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44139: LD_ADDR_VAR 0 3
44143: PUSH
44144: LD_INT 4
44146: PUSH
44147: LD_INT 5
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: ST_TO_ADDR
44154: GO 44791
44156: LD_INT 10
44158: DOUBLE
44159: EQUAL
44160: IFTRUE 44164
44162: GO 44182
44164: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44165: LD_ADDR_VAR 0 3
44169: PUSH
44170: LD_INT 4
44172: PUSH
44173: LD_INT 5
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: ST_TO_ADDR
44180: GO 44791
44182: LD_INT 22
44184: DOUBLE
44185: EQUAL
44186: IFTRUE 44190
44188: GO 44216
44190: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44191: LD_ADDR_VAR 0 3
44195: PUSH
44196: LD_INT 11
44198: PUSH
44199: LD_INT 12
44201: PUSH
44202: LD_INT 13
44204: PUSH
44205: LD_INT 14
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: ST_TO_ADDR
44214: GO 44791
44216: LD_INT 23
44218: DOUBLE
44219: EQUAL
44220: IFTRUE 44224
44222: GO 44250
44224: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44225: LD_ADDR_VAR 0 3
44229: PUSH
44230: LD_INT 11
44232: PUSH
44233: LD_INT 12
44235: PUSH
44236: LD_INT 13
44238: PUSH
44239: LD_INT 14
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: ST_TO_ADDR
44248: GO 44791
44250: LD_INT 24
44252: DOUBLE
44253: EQUAL
44254: IFTRUE 44258
44256: GO 44284
44258: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44259: LD_ADDR_VAR 0 3
44263: PUSH
44264: LD_INT 11
44266: PUSH
44267: LD_INT 12
44269: PUSH
44270: LD_INT 13
44272: PUSH
44273: LD_INT 14
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: ST_TO_ADDR
44282: GO 44791
44284: LD_INT 30
44286: DOUBLE
44287: EQUAL
44288: IFTRUE 44292
44290: GO 44318
44292: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44293: LD_ADDR_VAR 0 3
44297: PUSH
44298: LD_INT 11
44300: PUSH
44301: LD_INT 12
44303: PUSH
44304: LD_INT 13
44306: PUSH
44307: LD_INT 14
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: ST_TO_ADDR
44316: GO 44791
44318: LD_INT 25
44320: DOUBLE
44321: EQUAL
44322: IFTRUE 44326
44324: GO 44344
44326: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44327: LD_ADDR_VAR 0 3
44331: PUSH
44332: LD_INT 13
44334: PUSH
44335: LD_INT 14
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: ST_TO_ADDR
44342: GO 44791
44344: LD_INT 27
44346: DOUBLE
44347: EQUAL
44348: IFTRUE 44352
44350: GO 44370
44352: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44353: LD_ADDR_VAR 0 3
44357: PUSH
44358: LD_INT 13
44360: PUSH
44361: LD_INT 14
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: ST_TO_ADDR
44368: GO 44791
44370: LD_INT 28
44372: DOUBLE
44373: EQUAL
44374: IFTRUE 44378
44376: GO 44396
44378: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44379: LD_ADDR_VAR 0 3
44383: PUSH
44384: LD_INT 13
44386: PUSH
44387: LD_INT 14
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: ST_TO_ADDR
44394: GO 44791
44396: LD_INT 29
44398: DOUBLE
44399: EQUAL
44400: IFTRUE 44404
44402: GO 44422
44404: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44405: LD_ADDR_VAR 0 3
44409: PUSH
44410: LD_INT 13
44412: PUSH
44413: LD_INT 14
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: ST_TO_ADDR
44420: GO 44791
44422: LD_INT 31
44424: DOUBLE
44425: EQUAL
44426: IFTRUE 44430
44428: GO 44448
44430: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44431: LD_ADDR_VAR 0 3
44435: PUSH
44436: LD_INT 13
44438: PUSH
44439: LD_INT 14
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: ST_TO_ADDR
44446: GO 44791
44448: LD_INT 26
44450: DOUBLE
44451: EQUAL
44452: IFTRUE 44456
44454: GO 44474
44456: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44457: LD_ADDR_VAR 0 3
44461: PUSH
44462: LD_INT 13
44464: PUSH
44465: LD_INT 14
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: ST_TO_ADDR
44472: GO 44791
44474: LD_INT 42
44476: DOUBLE
44477: EQUAL
44478: IFTRUE 44482
44480: GO 44508
44482: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44483: LD_ADDR_VAR 0 3
44487: PUSH
44488: LD_INT 21
44490: PUSH
44491: LD_INT 22
44493: PUSH
44494: LD_INT 23
44496: PUSH
44497: LD_INT 24
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: ST_TO_ADDR
44506: GO 44791
44508: LD_INT 43
44510: DOUBLE
44511: EQUAL
44512: IFTRUE 44516
44514: GO 44542
44516: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44517: LD_ADDR_VAR 0 3
44521: PUSH
44522: LD_INT 21
44524: PUSH
44525: LD_INT 22
44527: PUSH
44528: LD_INT 23
44530: PUSH
44531: LD_INT 24
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: ST_TO_ADDR
44540: GO 44791
44542: LD_INT 44
44544: DOUBLE
44545: EQUAL
44546: IFTRUE 44550
44548: GO 44576
44550: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44551: LD_ADDR_VAR 0 3
44555: PUSH
44556: LD_INT 21
44558: PUSH
44559: LD_INT 22
44561: PUSH
44562: LD_INT 23
44564: PUSH
44565: LD_INT 24
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: ST_TO_ADDR
44574: GO 44791
44576: LD_INT 45
44578: DOUBLE
44579: EQUAL
44580: IFTRUE 44584
44582: GO 44610
44584: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44585: LD_ADDR_VAR 0 3
44589: PUSH
44590: LD_INT 21
44592: PUSH
44593: LD_INT 22
44595: PUSH
44596: LD_INT 23
44598: PUSH
44599: LD_INT 24
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: ST_TO_ADDR
44608: GO 44791
44610: LD_INT 49
44612: DOUBLE
44613: EQUAL
44614: IFTRUE 44618
44616: GO 44644
44618: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44619: LD_ADDR_VAR 0 3
44623: PUSH
44624: LD_INT 21
44626: PUSH
44627: LD_INT 22
44629: PUSH
44630: LD_INT 23
44632: PUSH
44633: LD_INT 24
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: ST_TO_ADDR
44642: GO 44791
44644: LD_INT 51
44646: DOUBLE
44647: EQUAL
44648: IFTRUE 44652
44650: GO 44678
44652: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44653: LD_ADDR_VAR 0 3
44657: PUSH
44658: LD_INT 21
44660: PUSH
44661: LD_INT 22
44663: PUSH
44664: LD_INT 23
44666: PUSH
44667: LD_INT 24
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: ST_TO_ADDR
44676: GO 44791
44678: LD_INT 52
44680: DOUBLE
44681: EQUAL
44682: IFTRUE 44686
44684: GO 44712
44686: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44687: LD_ADDR_VAR 0 3
44691: PUSH
44692: LD_INT 21
44694: PUSH
44695: LD_INT 22
44697: PUSH
44698: LD_INT 23
44700: PUSH
44701: LD_INT 24
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: ST_TO_ADDR
44710: GO 44791
44712: LD_INT 53
44714: DOUBLE
44715: EQUAL
44716: IFTRUE 44720
44718: GO 44738
44720: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44721: LD_ADDR_VAR 0 3
44725: PUSH
44726: LD_INT 23
44728: PUSH
44729: LD_INT 24
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: ST_TO_ADDR
44736: GO 44791
44738: LD_INT 46
44740: DOUBLE
44741: EQUAL
44742: IFTRUE 44746
44744: GO 44764
44746: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44747: LD_ADDR_VAR 0 3
44751: PUSH
44752: LD_INT 23
44754: PUSH
44755: LD_INT 24
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: ST_TO_ADDR
44762: GO 44791
44764: LD_INT 47
44766: DOUBLE
44767: EQUAL
44768: IFTRUE 44772
44770: GO 44790
44772: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44773: LD_ADDR_VAR 0 3
44777: PUSH
44778: LD_INT 23
44780: PUSH
44781: LD_INT 24
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: ST_TO_ADDR
44788: GO 44791
44790: POP
// result := ( chassis in result ) ;
44791: LD_ADDR_VAR 0 3
44795: PUSH
44796: LD_VAR 0 1
44800: PUSH
44801: LD_VAR 0 3
44805: IN
44806: ST_TO_ADDR
// end ;
44807: LD_VAR 0 3
44811: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44812: LD_INT 0
44814: PPUSH
44815: PPUSH
44816: PPUSH
44817: PPUSH
44818: PPUSH
44819: PPUSH
44820: PPUSH
// result := array ;
44821: LD_ADDR_VAR 0 5
44825: PUSH
44826: LD_VAR 0 1
44830: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44831: LD_VAR 0 1
44835: NOT
44836: PUSH
44837: LD_VAR 0 2
44841: NOT
44842: OR
44843: PUSH
44844: LD_VAR 0 3
44848: NOT
44849: OR
44850: PUSH
44851: LD_VAR 0 2
44855: PUSH
44856: LD_VAR 0 1
44860: GREATER
44861: OR
44862: PUSH
44863: LD_VAR 0 3
44867: PUSH
44868: LD_VAR 0 1
44872: GREATER
44873: OR
44874: IFFALSE 44878
// exit ;
44876: GO 45174
// if direction then
44878: LD_VAR 0 4
44882: IFFALSE 44946
// begin d := 1 ;
44884: LD_ADDR_VAR 0 9
44888: PUSH
44889: LD_INT 1
44891: ST_TO_ADDR
// if i_from > i_to then
44892: LD_VAR 0 2
44896: PUSH
44897: LD_VAR 0 3
44901: GREATER
44902: IFFALSE 44928
// length := ( array - i_from ) + i_to else
44904: LD_ADDR_VAR 0 11
44908: PUSH
44909: LD_VAR 0 1
44913: PUSH
44914: LD_VAR 0 2
44918: MINUS
44919: PUSH
44920: LD_VAR 0 3
44924: PLUS
44925: ST_TO_ADDR
44926: GO 44944
// length := i_to - i_from ;
44928: LD_ADDR_VAR 0 11
44932: PUSH
44933: LD_VAR 0 3
44937: PUSH
44938: LD_VAR 0 2
44942: MINUS
44943: ST_TO_ADDR
// end else
44944: GO 45007
// begin d := - 1 ;
44946: LD_ADDR_VAR 0 9
44950: PUSH
44951: LD_INT 1
44953: NEG
44954: ST_TO_ADDR
// if i_from > i_to then
44955: LD_VAR 0 2
44959: PUSH
44960: LD_VAR 0 3
44964: GREATER
44965: IFFALSE 44985
// length := i_from - i_to else
44967: LD_ADDR_VAR 0 11
44971: PUSH
44972: LD_VAR 0 2
44976: PUSH
44977: LD_VAR 0 3
44981: MINUS
44982: ST_TO_ADDR
44983: GO 45007
// length := ( array - i_to ) + i_from ;
44985: LD_ADDR_VAR 0 11
44989: PUSH
44990: LD_VAR 0 1
44994: PUSH
44995: LD_VAR 0 3
44999: MINUS
45000: PUSH
45001: LD_VAR 0 2
45005: PLUS
45006: ST_TO_ADDR
// end ; if not length then
45007: LD_VAR 0 11
45011: NOT
45012: IFFALSE 45016
// exit ;
45014: GO 45174
// tmp := array ;
45016: LD_ADDR_VAR 0 10
45020: PUSH
45021: LD_VAR 0 1
45025: ST_TO_ADDR
// for i = 1 to length do
45026: LD_ADDR_VAR 0 6
45030: PUSH
45031: DOUBLE
45032: LD_INT 1
45034: DEC
45035: ST_TO_ADDR
45036: LD_VAR 0 11
45040: PUSH
45041: FOR_TO
45042: IFFALSE 45162
// begin for j = 1 to array do
45044: LD_ADDR_VAR 0 7
45048: PUSH
45049: DOUBLE
45050: LD_INT 1
45052: DEC
45053: ST_TO_ADDR
45054: LD_VAR 0 1
45058: PUSH
45059: FOR_TO
45060: IFFALSE 45148
// begin k := j + d ;
45062: LD_ADDR_VAR 0 8
45066: PUSH
45067: LD_VAR 0 7
45071: PUSH
45072: LD_VAR 0 9
45076: PLUS
45077: ST_TO_ADDR
// if k > array then
45078: LD_VAR 0 8
45082: PUSH
45083: LD_VAR 0 1
45087: GREATER
45088: IFFALSE 45098
// k := 1 ;
45090: LD_ADDR_VAR 0 8
45094: PUSH
45095: LD_INT 1
45097: ST_TO_ADDR
// if not k then
45098: LD_VAR 0 8
45102: NOT
45103: IFFALSE 45115
// k := array ;
45105: LD_ADDR_VAR 0 8
45109: PUSH
45110: LD_VAR 0 1
45114: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45115: LD_ADDR_VAR 0 10
45119: PUSH
45120: LD_VAR 0 10
45124: PPUSH
45125: LD_VAR 0 8
45129: PPUSH
45130: LD_VAR 0 1
45134: PUSH
45135: LD_VAR 0 7
45139: ARRAY
45140: PPUSH
45141: CALL_OW 1
45145: ST_TO_ADDR
// end ;
45146: GO 45059
45148: POP
45149: POP
// array := tmp ;
45150: LD_ADDR_VAR 0 1
45154: PUSH
45155: LD_VAR 0 10
45159: ST_TO_ADDR
// end ;
45160: GO 45041
45162: POP
45163: POP
// result := array ;
45164: LD_ADDR_VAR 0 5
45168: PUSH
45169: LD_VAR 0 1
45173: ST_TO_ADDR
// end ;
45174: LD_VAR 0 5
45178: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45179: LD_INT 0
45181: PPUSH
45182: PPUSH
// result := 0 ;
45183: LD_ADDR_VAR 0 3
45187: PUSH
45188: LD_INT 0
45190: ST_TO_ADDR
// if not array or not value in array then
45191: LD_VAR 0 1
45195: NOT
45196: PUSH
45197: LD_VAR 0 2
45201: PUSH
45202: LD_VAR 0 1
45206: IN
45207: NOT
45208: OR
45209: IFFALSE 45213
// exit ;
45211: GO 45267
// for i = 1 to array do
45213: LD_ADDR_VAR 0 4
45217: PUSH
45218: DOUBLE
45219: LD_INT 1
45221: DEC
45222: ST_TO_ADDR
45223: LD_VAR 0 1
45227: PUSH
45228: FOR_TO
45229: IFFALSE 45265
// if value = array [ i ] then
45231: LD_VAR 0 2
45235: PUSH
45236: LD_VAR 0 1
45240: PUSH
45241: LD_VAR 0 4
45245: ARRAY
45246: EQUAL
45247: IFFALSE 45263
// begin result := i ;
45249: LD_ADDR_VAR 0 3
45253: PUSH
45254: LD_VAR 0 4
45258: ST_TO_ADDR
// exit ;
45259: POP
45260: POP
45261: GO 45267
// end ;
45263: GO 45228
45265: POP
45266: POP
// end ;
45267: LD_VAR 0 3
45271: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45272: LD_INT 0
45274: PPUSH
// vc_chassis := chassis ;
45275: LD_ADDR_OWVAR 37
45279: PUSH
45280: LD_VAR 0 1
45284: ST_TO_ADDR
// vc_engine := engine ;
45285: LD_ADDR_OWVAR 39
45289: PUSH
45290: LD_VAR 0 2
45294: ST_TO_ADDR
// vc_control := control ;
45295: LD_ADDR_OWVAR 38
45299: PUSH
45300: LD_VAR 0 3
45304: ST_TO_ADDR
// vc_weapon := weapon ;
45305: LD_ADDR_OWVAR 40
45309: PUSH
45310: LD_VAR 0 4
45314: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45315: LD_ADDR_OWVAR 41
45319: PUSH
45320: LD_VAR 0 5
45324: ST_TO_ADDR
// end ;
45325: LD_VAR 0 6
45329: RET
// export function WantPlant ( unit ) ; var task ; begin
45330: LD_INT 0
45332: PPUSH
45333: PPUSH
// result := false ;
45334: LD_ADDR_VAR 0 2
45338: PUSH
45339: LD_INT 0
45341: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45342: LD_ADDR_VAR 0 3
45346: PUSH
45347: LD_VAR 0 1
45351: PPUSH
45352: CALL_OW 437
45356: ST_TO_ADDR
// if task then
45357: LD_VAR 0 3
45361: IFFALSE 45389
// if task [ 1 ] [ 1 ] = p then
45363: LD_VAR 0 3
45367: PUSH
45368: LD_INT 1
45370: ARRAY
45371: PUSH
45372: LD_INT 1
45374: ARRAY
45375: PUSH
45376: LD_STRING p
45378: EQUAL
45379: IFFALSE 45389
// result := true ;
45381: LD_ADDR_VAR 0 2
45385: PUSH
45386: LD_INT 1
45388: ST_TO_ADDR
// end ;
45389: LD_VAR 0 2
45393: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45394: LD_INT 0
45396: PPUSH
45397: PPUSH
45398: PPUSH
45399: PPUSH
// if pos < 1 then
45400: LD_VAR 0 2
45404: PUSH
45405: LD_INT 1
45407: LESS
45408: IFFALSE 45412
// exit ;
45410: GO 45715
// if pos = 1 then
45412: LD_VAR 0 2
45416: PUSH
45417: LD_INT 1
45419: EQUAL
45420: IFFALSE 45453
// result := Replace ( arr , pos [ 1 ] , value ) else
45422: LD_ADDR_VAR 0 4
45426: PUSH
45427: LD_VAR 0 1
45431: PPUSH
45432: LD_VAR 0 2
45436: PUSH
45437: LD_INT 1
45439: ARRAY
45440: PPUSH
45441: LD_VAR 0 3
45445: PPUSH
45446: CALL_OW 1
45450: ST_TO_ADDR
45451: GO 45715
// begin tmp := arr ;
45453: LD_ADDR_VAR 0 6
45457: PUSH
45458: LD_VAR 0 1
45462: ST_TO_ADDR
// s_arr := [ tmp ] ;
45463: LD_ADDR_VAR 0 7
45467: PUSH
45468: LD_VAR 0 6
45472: PUSH
45473: EMPTY
45474: LIST
45475: ST_TO_ADDR
// for i = 1 to pos - 1 do
45476: LD_ADDR_VAR 0 5
45480: PUSH
45481: DOUBLE
45482: LD_INT 1
45484: DEC
45485: ST_TO_ADDR
45486: LD_VAR 0 2
45490: PUSH
45491: LD_INT 1
45493: MINUS
45494: PUSH
45495: FOR_TO
45496: IFFALSE 45541
// begin tmp := tmp [ pos [ i ] ] ;
45498: LD_ADDR_VAR 0 6
45502: PUSH
45503: LD_VAR 0 6
45507: PUSH
45508: LD_VAR 0 2
45512: PUSH
45513: LD_VAR 0 5
45517: ARRAY
45518: ARRAY
45519: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45520: LD_ADDR_VAR 0 7
45524: PUSH
45525: LD_VAR 0 7
45529: PUSH
45530: LD_VAR 0 6
45534: PUSH
45535: EMPTY
45536: LIST
45537: ADD
45538: ST_TO_ADDR
// end ;
45539: GO 45495
45541: POP
45542: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45543: LD_ADDR_VAR 0 6
45547: PUSH
45548: LD_VAR 0 6
45552: PPUSH
45553: LD_VAR 0 2
45557: PUSH
45558: LD_VAR 0 2
45562: ARRAY
45563: PPUSH
45564: LD_VAR 0 3
45568: PPUSH
45569: CALL_OW 1
45573: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45574: LD_ADDR_VAR 0 7
45578: PUSH
45579: LD_VAR 0 7
45583: PPUSH
45584: LD_VAR 0 7
45588: PPUSH
45589: LD_VAR 0 6
45593: PPUSH
45594: CALL_OW 1
45598: ST_TO_ADDR
// for i = s_arr downto 2 do
45599: LD_ADDR_VAR 0 5
45603: PUSH
45604: DOUBLE
45605: LD_VAR 0 7
45609: INC
45610: ST_TO_ADDR
45611: LD_INT 2
45613: PUSH
45614: FOR_DOWNTO
45615: IFFALSE 45699
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45617: LD_ADDR_VAR 0 6
45621: PUSH
45622: LD_VAR 0 7
45626: PUSH
45627: LD_VAR 0 5
45631: PUSH
45632: LD_INT 1
45634: MINUS
45635: ARRAY
45636: PPUSH
45637: LD_VAR 0 2
45641: PUSH
45642: LD_VAR 0 5
45646: PUSH
45647: LD_INT 1
45649: MINUS
45650: ARRAY
45651: PPUSH
45652: LD_VAR 0 7
45656: PUSH
45657: LD_VAR 0 5
45661: ARRAY
45662: PPUSH
45663: CALL_OW 1
45667: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45668: LD_ADDR_VAR 0 7
45672: PUSH
45673: LD_VAR 0 7
45677: PPUSH
45678: LD_VAR 0 5
45682: PUSH
45683: LD_INT 1
45685: MINUS
45686: PPUSH
45687: LD_VAR 0 6
45691: PPUSH
45692: CALL_OW 1
45696: ST_TO_ADDR
// end ;
45697: GO 45614
45699: POP
45700: POP
// result := s_arr [ 1 ] ;
45701: LD_ADDR_VAR 0 4
45705: PUSH
45706: LD_VAR 0 7
45710: PUSH
45711: LD_INT 1
45713: ARRAY
45714: ST_TO_ADDR
// end ; end ;
45715: LD_VAR 0 4
45719: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45720: LD_INT 0
45722: PPUSH
45723: PPUSH
// if not list then
45724: LD_VAR 0 1
45728: NOT
45729: IFFALSE 45733
// exit ;
45731: GO 45824
// i := list [ pos1 ] ;
45733: LD_ADDR_VAR 0 5
45737: PUSH
45738: LD_VAR 0 1
45742: PUSH
45743: LD_VAR 0 2
45747: ARRAY
45748: ST_TO_ADDR
// if not i then
45749: LD_VAR 0 5
45753: NOT
45754: IFFALSE 45758
// exit ;
45756: GO 45824
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45758: LD_ADDR_VAR 0 1
45762: PUSH
45763: LD_VAR 0 1
45767: PPUSH
45768: LD_VAR 0 2
45772: PPUSH
45773: LD_VAR 0 1
45777: PUSH
45778: LD_VAR 0 3
45782: ARRAY
45783: PPUSH
45784: CALL_OW 1
45788: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45789: LD_ADDR_VAR 0 1
45793: PUSH
45794: LD_VAR 0 1
45798: PPUSH
45799: LD_VAR 0 3
45803: PPUSH
45804: LD_VAR 0 5
45808: PPUSH
45809: CALL_OW 1
45813: ST_TO_ADDR
// result := list ;
45814: LD_ADDR_VAR 0 4
45818: PUSH
45819: LD_VAR 0 1
45823: ST_TO_ADDR
// end ;
45824: LD_VAR 0 4
45828: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45829: LD_INT 0
45831: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45832: LD_ADDR_VAR 0 5
45836: PUSH
45837: LD_VAR 0 1
45841: PPUSH
45842: CALL_OW 250
45846: PPUSH
45847: LD_VAR 0 1
45851: PPUSH
45852: CALL_OW 251
45856: PPUSH
45857: LD_VAR 0 2
45861: PPUSH
45862: LD_VAR 0 3
45866: PPUSH
45867: LD_VAR 0 4
45871: PPUSH
45872: CALL 45882 0 5
45876: ST_TO_ADDR
// end ;
45877: LD_VAR 0 5
45881: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45882: LD_INT 0
45884: PPUSH
45885: PPUSH
45886: PPUSH
45887: PPUSH
// if not list then
45888: LD_VAR 0 3
45892: NOT
45893: IFFALSE 45897
// exit ;
45895: GO 46285
// result := [ ] ;
45897: LD_ADDR_VAR 0 6
45901: PUSH
45902: EMPTY
45903: ST_TO_ADDR
// for i in list do
45904: LD_ADDR_VAR 0 7
45908: PUSH
45909: LD_VAR 0 3
45913: PUSH
45914: FOR_IN
45915: IFFALSE 46117
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45917: LD_ADDR_VAR 0 9
45921: PUSH
45922: LD_VAR 0 7
45926: PPUSH
45927: LD_VAR 0 1
45931: PPUSH
45932: LD_VAR 0 2
45936: PPUSH
45937: CALL_OW 297
45941: ST_TO_ADDR
// if not result then
45942: LD_VAR 0 6
45946: NOT
45947: IFFALSE 45973
// result := [ [ i , tmp ] ] else
45949: LD_ADDR_VAR 0 6
45953: PUSH
45954: LD_VAR 0 7
45958: PUSH
45959: LD_VAR 0 9
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: EMPTY
45969: LIST
45970: ST_TO_ADDR
45971: GO 46115
// begin if result [ result ] [ 2 ] < tmp then
45973: LD_VAR 0 6
45977: PUSH
45978: LD_VAR 0 6
45982: ARRAY
45983: PUSH
45984: LD_INT 2
45986: ARRAY
45987: PUSH
45988: LD_VAR 0 9
45992: LESS
45993: IFFALSE 46035
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45995: LD_ADDR_VAR 0 6
45999: PUSH
46000: LD_VAR 0 6
46004: PPUSH
46005: LD_VAR 0 6
46009: PUSH
46010: LD_INT 1
46012: PLUS
46013: PPUSH
46014: LD_VAR 0 7
46018: PUSH
46019: LD_VAR 0 9
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PPUSH
46028: CALL_OW 2
46032: ST_TO_ADDR
46033: GO 46115
// for j = 1 to result do
46035: LD_ADDR_VAR 0 8
46039: PUSH
46040: DOUBLE
46041: LD_INT 1
46043: DEC
46044: ST_TO_ADDR
46045: LD_VAR 0 6
46049: PUSH
46050: FOR_TO
46051: IFFALSE 46113
// begin if tmp < result [ j ] [ 2 ] then
46053: LD_VAR 0 9
46057: PUSH
46058: LD_VAR 0 6
46062: PUSH
46063: LD_VAR 0 8
46067: ARRAY
46068: PUSH
46069: LD_INT 2
46071: ARRAY
46072: LESS
46073: IFFALSE 46111
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46075: LD_ADDR_VAR 0 6
46079: PUSH
46080: LD_VAR 0 6
46084: PPUSH
46085: LD_VAR 0 8
46089: PPUSH
46090: LD_VAR 0 7
46094: PUSH
46095: LD_VAR 0 9
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PPUSH
46104: CALL_OW 2
46108: ST_TO_ADDR
// break ;
46109: GO 46113
// end ; end ;
46111: GO 46050
46113: POP
46114: POP
// end ; end ;
46115: GO 45914
46117: POP
46118: POP
// if result and not asc then
46119: LD_VAR 0 6
46123: PUSH
46124: LD_VAR 0 4
46128: NOT
46129: AND
46130: IFFALSE 46205
// begin tmp := result ;
46132: LD_ADDR_VAR 0 9
46136: PUSH
46137: LD_VAR 0 6
46141: ST_TO_ADDR
// for i = tmp downto 1 do
46142: LD_ADDR_VAR 0 7
46146: PUSH
46147: DOUBLE
46148: LD_VAR 0 9
46152: INC
46153: ST_TO_ADDR
46154: LD_INT 1
46156: PUSH
46157: FOR_DOWNTO
46158: IFFALSE 46203
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46160: LD_ADDR_VAR 0 6
46164: PUSH
46165: LD_VAR 0 6
46169: PPUSH
46170: LD_VAR 0 9
46174: PUSH
46175: LD_VAR 0 7
46179: MINUS
46180: PUSH
46181: LD_INT 1
46183: PLUS
46184: PPUSH
46185: LD_VAR 0 9
46189: PUSH
46190: LD_VAR 0 7
46194: ARRAY
46195: PPUSH
46196: CALL_OW 1
46200: ST_TO_ADDR
46201: GO 46157
46203: POP
46204: POP
// end ; tmp := [ ] ;
46205: LD_ADDR_VAR 0 9
46209: PUSH
46210: EMPTY
46211: ST_TO_ADDR
// if mode then
46212: LD_VAR 0 5
46216: IFFALSE 46285
// begin for i = 1 to result do
46218: LD_ADDR_VAR 0 7
46222: PUSH
46223: DOUBLE
46224: LD_INT 1
46226: DEC
46227: ST_TO_ADDR
46228: LD_VAR 0 6
46232: PUSH
46233: FOR_TO
46234: IFFALSE 46273
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46236: LD_ADDR_VAR 0 9
46240: PUSH
46241: LD_VAR 0 9
46245: PPUSH
46246: LD_VAR 0 7
46250: PPUSH
46251: LD_VAR 0 6
46255: PUSH
46256: LD_VAR 0 7
46260: ARRAY
46261: PUSH
46262: LD_INT 1
46264: ARRAY
46265: PPUSH
46266: CALL_OW 1
46270: ST_TO_ADDR
46271: GO 46233
46273: POP
46274: POP
// result := tmp ;
46275: LD_ADDR_VAR 0 6
46279: PUSH
46280: LD_VAR 0 9
46284: ST_TO_ADDR
// end ; end ;
46285: LD_VAR 0 6
46289: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46290: LD_INT 0
46292: PPUSH
46293: PPUSH
46294: PPUSH
46295: PPUSH
46296: PPUSH
46297: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46298: LD_ADDR_VAR 0 5
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: EMPTY
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: ST_TO_ADDR
// if not x or not y then
46320: LD_VAR 0 2
46324: NOT
46325: PUSH
46326: LD_VAR 0 3
46330: NOT
46331: OR
46332: IFFALSE 46336
// exit ;
46334: GO 47982
// if not range then
46336: LD_VAR 0 4
46340: NOT
46341: IFFALSE 46351
// range := 10 ;
46343: LD_ADDR_VAR 0 4
46347: PUSH
46348: LD_INT 10
46350: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46351: LD_ADDR_VAR 0 8
46355: PUSH
46356: LD_INT 81
46358: PUSH
46359: LD_VAR 0 1
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 92
46370: PUSH
46371: LD_VAR 0 2
46375: PUSH
46376: LD_VAR 0 3
46380: PUSH
46381: LD_VAR 0 4
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 3
46394: PUSH
46395: LD_INT 21
46397: PUSH
46398: LD_INT 3
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: LIST
46413: PPUSH
46414: CALL_OW 69
46418: ST_TO_ADDR
// if not tmp then
46419: LD_VAR 0 8
46423: NOT
46424: IFFALSE 46428
// exit ;
46426: GO 47982
// for i in tmp do
46428: LD_ADDR_VAR 0 6
46432: PUSH
46433: LD_VAR 0 8
46437: PUSH
46438: FOR_IN
46439: IFFALSE 47957
// begin points := [ 0 , 0 , 0 ] ;
46441: LD_ADDR_VAR 0 9
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: LIST
46459: ST_TO_ADDR
// bpoints := 1 ;
46460: LD_ADDR_VAR 0 10
46464: PUSH
46465: LD_INT 1
46467: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46468: LD_VAR 0 6
46472: PPUSH
46473: CALL_OW 247
46477: PUSH
46478: LD_INT 1
46480: DOUBLE
46481: EQUAL
46482: IFTRUE 46486
46484: GO 47064
46486: POP
// begin if GetClass ( i ) = 1 then
46487: LD_VAR 0 6
46491: PPUSH
46492: CALL_OW 257
46496: PUSH
46497: LD_INT 1
46499: EQUAL
46500: IFFALSE 46521
// points := [ 10 , 5 , 3 ] ;
46502: LD_ADDR_VAR 0 9
46506: PUSH
46507: LD_INT 10
46509: PUSH
46510: LD_INT 5
46512: PUSH
46513: LD_INT 3
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: LIST
46520: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46521: LD_VAR 0 6
46525: PPUSH
46526: CALL_OW 257
46530: PUSH
46531: LD_INT 2
46533: PUSH
46534: LD_INT 3
46536: PUSH
46537: LD_INT 4
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: LIST
46544: IN
46545: IFFALSE 46566
// points := [ 3 , 2 , 1 ] ;
46547: LD_ADDR_VAR 0 9
46551: PUSH
46552: LD_INT 3
46554: PUSH
46555: LD_INT 2
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: LIST
46565: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46566: LD_VAR 0 6
46570: PPUSH
46571: CALL_OW 257
46575: PUSH
46576: LD_INT 5
46578: EQUAL
46579: IFFALSE 46600
// points := [ 130 , 5 , 2 ] ;
46581: LD_ADDR_VAR 0 9
46585: PUSH
46586: LD_INT 130
46588: PUSH
46589: LD_INT 5
46591: PUSH
46592: LD_INT 2
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: LIST
46599: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46600: LD_VAR 0 6
46604: PPUSH
46605: CALL_OW 257
46609: PUSH
46610: LD_INT 8
46612: EQUAL
46613: IFFALSE 46634
// points := [ 35 , 35 , 30 ] ;
46615: LD_ADDR_VAR 0 9
46619: PUSH
46620: LD_INT 35
46622: PUSH
46623: LD_INT 35
46625: PUSH
46626: LD_INT 30
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: LIST
46633: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46634: LD_VAR 0 6
46638: PPUSH
46639: CALL_OW 257
46643: PUSH
46644: LD_INT 9
46646: EQUAL
46647: IFFALSE 46668
// points := [ 20 , 55 , 40 ] ;
46649: LD_ADDR_VAR 0 9
46653: PUSH
46654: LD_INT 20
46656: PUSH
46657: LD_INT 55
46659: PUSH
46660: LD_INT 40
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: LIST
46667: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46668: LD_VAR 0 6
46672: PPUSH
46673: CALL_OW 257
46677: PUSH
46678: LD_INT 12
46680: PUSH
46681: LD_INT 16
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: IN
46688: IFFALSE 46709
// points := [ 5 , 3 , 2 ] ;
46690: LD_ADDR_VAR 0 9
46694: PUSH
46695: LD_INT 5
46697: PUSH
46698: LD_INT 3
46700: PUSH
46701: LD_INT 2
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: LIST
46708: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46709: LD_VAR 0 6
46713: PPUSH
46714: CALL_OW 257
46718: PUSH
46719: LD_INT 17
46721: EQUAL
46722: IFFALSE 46743
// points := [ 100 , 50 , 75 ] ;
46724: LD_ADDR_VAR 0 9
46728: PUSH
46729: LD_INT 100
46731: PUSH
46732: LD_INT 50
46734: PUSH
46735: LD_INT 75
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: LIST
46742: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46743: LD_VAR 0 6
46747: PPUSH
46748: CALL_OW 257
46752: PUSH
46753: LD_INT 15
46755: EQUAL
46756: IFFALSE 46777
// points := [ 10 , 5 , 3 ] ;
46758: LD_ADDR_VAR 0 9
46762: PUSH
46763: LD_INT 10
46765: PUSH
46766: LD_INT 5
46768: PUSH
46769: LD_INT 3
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: LIST
46776: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46777: LD_VAR 0 6
46781: PPUSH
46782: CALL_OW 257
46786: PUSH
46787: LD_INT 14
46789: EQUAL
46790: IFFALSE 46811
// points := [ 10 , 0 , 0 ] ;
46792: LD_ADDR_VAR 0 9
46796: PUSH
46797: LD_INT 10
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: LIST
46810: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46811: LD_VAR 0 6
46815: PPUSH
46816: CALL_OW 257
46820: PUSH
46821: LD_INT 11
46823: EQUAL
46824: IFFALSE 46845
// points := [ 30 , 10 , 5 ] ;
46826: LD_ADDR_VAR 0 9
46830: PUSH
46831: LD_INT 30
46833: PUSH
46834: LD_INT 10
46836: PUSH
46837: LD_INT 5
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: LIST
46844: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46845: LD_VAR 0 1
46849: PPUSH
46850: LD_INT 5
46852: PPUSH
46853: CALL_OW 321
46857: PUSH
46858: LD_INT 2
46860: EQUAL
46861: IFFALSE 46878
// bpoints := bpoints * 1.8 ;
46863: LD_ADDR_VAR 0 10
46867: PUSH
46868: LD_VAR 0 10
46872: PUSH
46873: LD_REAL  1.80000000000000E+0000
46876: MUL
46877: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46878: LD_VAR 0 6
46882: PPUSH
46883: CALL_OW 257
46887: PUSH
46888: LD_INT 1
46890: PUSH
46891: LD_INT 2
46893: PUSH
46894: LD_INT 3
46896: PUSH
46897: LD_INT 4
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: IN
46906: PUSH
46907: LD_VAR 0 1
46911: PPUSH
46912: LD_INT 51
46914: PPUSH
46915: CALL_OW 321
46919: PUSH
46920: LD_INT 2
46922: EQUAL
46923: AND
46924: IFFALSE 46941
// bpoints := bpoints * 1.2 ;
46926: LD_ADDR_VAR 0 10
46930: PUSH
46931: LD_VAR 0 10
46935: PUSH
46936: LD_REAL  1.20000000000000E+0000
46939: MUL
46940: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46941: LD_VAR 0 6
46945: PPUSH
46946: CALL_OW 257
46950: PUSH
46951: LD_INT 5
46953: PUSH
46954: LD_INT 7
46956: PUSH
46957: LD_INT 9
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: LIST
46964: IN
46965: PUSH
46966: LD_VAR 0 1
46970: PPUSH
46971: LD_INT 52
46973: PPUSH
46974: CALL_OW 321
46978: PUSH
46979: LD_INT 2
46981: EQUAL
46982: AND
46983: IFFALSE 47000
// bpoints := bpoints * 1.5 ;
46985: LD_ADDR_VAR 0 10
46989: PUSH
46990: LD_VAR 0 10
46994: PUSH
46995: LD_REAL  1.50000000000000E+0000
46998: MUL
46999: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47000: LD_VAR 0 1
47004: PPUSH
47005: LD_INT 66
47007: PPUSH
47008: CALL_OW 321
47012: PUSH
47013: LD_INT 2
47015: EQUAL
47016: IFFALSE 47033
// bpoints := bpoints * 1.1 ;
47018: LD_ADDR_VAR 0 10
47022: PUSH
47023: LD_VAR 0 10
47027: PUSH
47028: LD_REAL  1.10000000000000E+0000
47031: MUL
47032: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47033: LD_ADDR_VAR 0 10
47037: PUSH
47038: LD_VAR 0 10
47042: PUSH
47043: LD_VAR 0 6
47047: PPUSH
47048: LD_INT 1
47050: PPUSH
47051: CALL_OW 259
47055: PUSH
47056: LD_REAL  1.15000000000000E+0000
47059: MUL
47060: MUL
47061: ST_TO_ADDR
// end ; unit_vehicle :
47062: GO 47886
47064: LD_INT 2
47066: DOUBLE
47067: EQUAL
47068: IFTRUE 47072
47070: GO 47874
47072: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47073: LD_VAR 0 6
47077: PPUSH
47078: CALL_OW 264
47082: PUSH
47083: LD_INT 2
47085: PUSH
47086: LD_INT 42
47088: PUSH
47089: LD_INT 24
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: LIST
47096: IN
47097: IFFALSE 47118
// points := [ 25 , 5 , 3 ] ;
47099: LD_ADDR_VAR 0 9
47103: PUSH
47104: LD_INT 25
47106: PUSH
47107: LD_INT 5
47109: PUSH
47110: LD_INT 3
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: LIST
47117: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47118: LD_VAR 0 6
47122: PPUSH
47123: CALL_OW 264
47127: PUSH
47128: LD_INT 4
47130: PUSH
47131: LD_INT 43
47133: PUSH
47134: LD_INT 25
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: LIST
47141: IN
47142: IFFALSE 47163
// points := [ 40 , 15 , 5 ] ;
47144: LD_ADDR_VAR 0 9
47148: PUSH
47149: LD_INT 40
47151: PUSH
47152: LD_INT 15
47154: PUSH
47155: LD_INT 5
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: LIST
47162: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47163: LD_VAR 0 6
47167: PPUSH
47168: CALL_OW 264
47172: PUSH
47173: LD_INT 3
47175: PUSH
47176: LD_INT 23
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: IN
47183: IFFALSE 47204
// points := [ 7 , 25 , 8 ] ;
47185: LD_ADDR_VAR 0 9
47189: PUSH
47190: LD_INT 7
47192: PUSH
47193: LD_INT 25
47195: PUSH
47196: LD_INT 8
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: LIST
47203: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47204: LD_VAR 0 6
47208: PPUSH
47209: CALL_OW 264
47213: PUSH
47214: LD_INT 5
47216: PUSH
47217: LD_INT 27
47219: PUSH
47220: LD_INT 44
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: LIST
47227: IN
47228: IFFALSE 47249
// points := [ 14 , 50 , 16 ] ;
47230: LD_ADDR_VAR 0 9
47234: PUSH
47235: LD_INT 14
47237: PUSH
47238: LD_INT 50
47240: PUSH
47241: LD_INT 16
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: LIST
47248: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47249: LD_VAR 0 6
47253: PPUSH
47254: CALL_OW 264
47258: PUSH
47259: LD_INT 6
47261: PUSH
47262: LD_INT 46
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: IN
47269: IFFALSE 47290
// points := [ 32 , 120 , 70 ] ;
47271: LD_ADDR_VAR 0 9
47275: PUSH
47276: LD_INT 32
47278: PUSH
47279: LD_INT 120
47281: PUSH
47282: LD_INT 70
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: LIST
47289: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
47290: LD_VAR 0 6
47294: PPUSH
47295: CALL_OW 264
47299: PUSH
47300: LD_INT 7
47302: PUSH
47303: LD_INT 28
47305: PUSH
47306: LD_INT 45
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: LIST
47313: IN
47314: IFFALSE 47335
// points := [ 35 , 20 , 45 ] ;
47316: LD_ADDR_VAR 0 9
47320: PUSH
47321: LD_INT 35
47323: PUSH
47324: LD_INT 20
47326: PUSH
47327: LD_INT 45
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: LIST
47334: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47335: LD_VAR 0 6
47339: PPUSH
47340: CALL_OW 264
47344: PUSH
47345: LD_INT 47
47347: PUSH
47348: EMPTY
47349: LIST
47350: IN
47351: IFFALSE 47372
// points := [ 67 , 45 , 75 ] ;
47353: LD_ADDR_VAR 0 9
47357: PUSH
47358: LD_INT 67
47360: PUSH
47361: LD_INT 45
47363: PUSH
47364: LD_INT 75
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: LIST
47371: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47372: LD_VAR 0 6
47376: PPUSH
47377: CALL_OW 264
47381: PUSH
47382: LD_INT 26
47384: PUSH
47385: EMPTY
47386: LIST
47387: IN
47388: IFFALSE 47409
// points := [ 120 , 30 , 80 ] ;
47390: LD_ADDR_VAR 0 9
47394: PUSH
47395: LD_INT 120
47397: PUSH
47398: LD_INT 30
47400: PUSH
47401: LD_INT 80
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: LIST
47408: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47409: LD_VAR 0 6
47413: PPUSH
47414: CALL_OW 264
47418: PUSH
47419: LD_INT 22
47421: PUSH
47422: EMPTY
47423: LIST
47424: IN
47425: IFFALSE 47446
// points := [ 40 , 1 , 1 ] ;
47427: LD_ADDR_VAR 0 9
47431: PUSH
47432: LD_INT 40
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: LD_INT 1
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: LIST
47445: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47446: LD_VAR 0 6
47450: PPUSH
47451: CALL_OW 264
47455: PUSH
47456: LD_INT 29
47458: PUSH
47459: EMPTY
47460: LIST
47461: IN
47462: IFFALSE 47483
// points := [ 70 , 200 , 400 ] ;
47464: LD_ADDR_VAR 0 9
47468: PUSH
47469: LD_INT 70
47471: PUSH
47472: LD_INT 200
47474: PUSH
47475: LD_INT 400
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: LIST
47482: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47483: LD_VAR 0 6
47487: PPUSH
47488: CALL_OW 264
47492: PUSH
47493: LD_INT 14
47495: PUSH
47496: LD_INT 53
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: IN
47503: IFFALSE 47524
// points := [ 40 , 10 , 20 ] ;
47505: LD_ADDR_VAR 0 9
47509: PUSH
47510: LD_INT 40
47512: PUSH
47513: LD_INT 10
47515: PUSH
47516: LD_INT 20
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: LIST
47523: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47524: LD_VAR 0 6
47528: PPUSH
47529: CALL_OW 264
47533: PUSH
47534: LD_INT 9
47536: PUSH
47537: EMPTY
47538: LIST
47539: IN
47540: IFFALSE 47561
// points := [ 5 , 70 , 20 ] ;
47542: LD_ADDR_VAR 0 9
47546: PUSH
47547: LD_INT 5
47549: PUSH
47550: LD_INT 70
47552: PUSH
47553: LD_INT 20
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: LIST
47560: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47561: LD_VAR 0 6
47565: PPUSH
47566: CALL_OW 264
47570: PUSH
47571: LD_INT 10
47573: PUSH
47574: EMPTY
47575: LIST
47576: IN
47577: IFFALSE 47598
// points := [ 35 , 110 , 70 ] ;
47579: LD_ADDR_VAR 0 9
47583: PUSH
47584: LD_INT 35
47586: PUSH
47587: LD_INT 110
47589: PUSH
47590: LD_INT 70
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: LIST
47597: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47598: LD_VAR 0 6
47602: PPUSH
47603: CALL_OW 265
47607: PUSH
47608: LD_INT 25
47610: EQUAL
47611: IFFALSE 47632
// points := [ 80 , 65 , 100 ] ;
47613: LD_ADDR_VAR 0 9
47617: PUSH
47618: LD_INT 80
47620: PUSH
47621: LD_INT 65
47623: PUSH
47624: LD_INT 100
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: LIST
47631: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47632: LD_VAR 0 6
47636: PPUSH
47637: CALL_OW 263
47641: PUSH
47642: LD_INT 1
47644: EQUAL
47645: IFFALSE 47680
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47647: LD_ADDR_VAR 0 10
47651: PUSH
47652: LD_VAR 0 10
47656: PUSH
47657: LD_VAR 0 6
47661: PPUSH
47662: CALL_OW 311
47666: PPUSH
47667: LD_INT 3
47669: PPUSH
47670: CALL_OW 259
47674: PUSH
47675: LD_INT 4
47677: MUL
47678: MUL
47679: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47680: LD_VAR 0 6
47684: PPUSH
47685: CALL_OW 263
47689: PUSH
47690: LD_INT 2
47692: EQUAL
47693: IFFALSE 47744
// begin j := IsControledBy ( i ) ;
47695: LD_ADDR_VAR 0 7
47699: PUSH
47700: LD_VAR 0 6
47704: PPUSH
47705: CALL_OW 312
47709: ST_TO_ADDR
// if j then
47710: LD_VAR 0 7
47714: IFFALSE 47744
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47716: LD_ADDR_VAR 0 10
47720: PUSH
47721: LD_VAR 0 10
47725: PUSH
47726: LD_VAR 0 7
47730: PPUSH
47731: LD_INT 3
47733: PPUSH
47734: CALL_OW 259
47738: PUSH
47739: LD_INT 3
47741: MUL
47742: MUL
47743: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47744: LD_VAR 0 6
47748: PPUSH
47749: CALL_OW 264
47753: PUSH
47754: LD_INT 5
47756: PUSH
47757: LD_INT 6
47759: PUSH
47760: LD_INT 46
47762: PUSH
47763: LD_INT 44
47765: PUSH
47766: LD_INT 47
47768: PUSH
47769: LD_INT 45
47771: PUSH
47772: LD_INT 28
47774: PUSH
47775: LD_INT 7
47777: PUSH
47778: LD_INT 27
47780: PUSH
47781: LD_INT 29
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: IN
47796: PUSH
47797: LD_VAR 0 1
47801: PPUSH
47802: LD_INT 52
47804: PPUSH
47805: CALL_OW 321
47809: PUSH
47810: LD_INT 2
47812: EQUAL
47813: AND
47814: IFFALSE 47831
// bpoints := bpoints * 1.2 ;
47816: LD_ADDR_VAR 0 10
47820: PUSH
47821: LD_VAR 0 10
47825: PUSH
47826: LD_REAL  1.20000000000000E+0000
47829: MUL
47830: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47831: LD_VAR 0 6
47835: PPUSH
47836: CALL_OW 264
47840: PUSH
47841: LD_INT 6
47843: PUSH
47844: LD_INT 46
47846: PUSH
47847: LD_INT 47
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: LIST
47854: IN
47855: IFFALSE 47872
// bpoints := bpoints * 1.2 ;
47857: LD_ADDR_VAR 0 10
47861: PUSH
47862: LD_VAR 0 10
47866: PUSH
47867: LD_REAL  1.20000000000000E+0000
47870: MUL
47871: ST_TO_ADDR
// end ; unit_building :
47872: GO 47886
47874: LD_INT 3
47876: DOUBLE
47877: EQUAL
47878: IFTRUE 47882
47880: GO 47885
47882: POP
// ; end ;
47883: GO 47886
47885: POP
// for j = 1 to 3 do
47886: LD_ADDR_VAR 0 7
47890: PUSH
47891: DOUBLE
47892: LD_INT 1
47894: DEC
47895: ST_TO_ADDR
47896: LD_INT 3
47898: PUSH
47899: FOR_TO
47900: IFFALSE 47953
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47902: LD_ADDR_VAR 0 5
47906: PUSH
47907: LD_VAR 0 5
47911: PPUSH
47912: LD_VAR 0 7
47916: PPUSH
47917: LD_VAR 0 5
47921: PUSH
47922: LD_VAR 0 7
47926: ARRAY
47927: PUSH
47928: LD_VAR 0 9
47932: PUSH
47933: LD_VAR 0 7
47937: ARRAY
47938: PUSH
47939: LD_VAR 0 10
47943: MUL
47944: PLUS
47945: PPUSH
47946: CALL_OW 1
47950: ST_TO_ADDR
47951: GO 47899
47953: POP
47954: POP
// end ;
47955: GO 46438
47957: POP
47958: POP
// result := Replace ( result , 4 , tmp ) ;
47959: LD_ADDR_VAR 0 5
47963: PUSH
47964: LD_VAR 0 5
47968: PPUSH
47969: LD_INT 4
47971: PPUSH
47972: LD_VAR 0 8
47976: PPUSH
47977: CALL_OW 1
47981: ST_TO_ADDR
// end ;
47982: LD_VAR 0 5
47986: RET
// export function DangerAtRange ( unit , range ) ; begin
47987: LD_INT 0
47989: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47990: LD_ADDR_VAR 0 3
47994: PUSH
47995: LD_VAR 0 1
47999: PPUSH
48000: CALL_OW 255
48004: PPUSH
48005: LD_VAR 0 1
48009: PPUSH
48010: CALL_OW 250
48014: PPUSH
48015: LD_VAR 0 1
48019: PPUSH
48020: CALL_OW 251
48024: PPUSH
48025: LD_VAR 0 2
48029: PPUSH
48030: CALL 46290 0 4
48034: ST_TO_ADDR
// end ;
48035: LD_VAR 0 3
48039: RET
// export function DangerInArea ( side , area ) ; begin
48040: LD_INT 0
48042: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48043: LD_ADDR_VAR 0 3
48047: PUSH
48048: LD_VAR 0 2
48052: PPUSH
48053: LD_INT 81
48055: PUSH
48056: LD_VAR 0 1
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PPUSH
48065: CALL_OW 70
48069: ST_TO_ADDR
// end ;
48070: LD_VAR 0 3
48074: RET
// export function IsExtension ( b ) ; begin
48075: LD_INT 0
48077: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48078: LD_ADDR_VAR 0 2
48082: PUSH
48083: LD_VAR 0 1
48087: PUSH
48088: LD_INT 23
48090: PUSH
48091: LD_INT 20
48093: PUSH
48094: LD_INT 22
48096: PUSH
48097: LD_INT 17
48099: PUSH
48100: LD_INT 24
48102: PUSH
48103: LD_INT 21
48105: PUSH
48106: LD_INT 19
48108: PUSH
48109: LD_INT 16
48111: PUSH
48112: LD_INT 25
48114: PUSH
48115: LD_INT 18
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: IN
48130: ST_TO_ADDR
// end ;
48131: LD_VAR 0 2
48135: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
48136: LD_INT 0
48138: PPUSH
48139: PPUSH
48140: PPUSH
// result := [ ] ;
48141: LD_ADDR_VAR 0 3
48145: PUSH
48146: EMPTY
48147: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48148: LD_ADDR_VAR 0 4
48152: PUSH
48153: LD_VAR 0 2
48157: PPUSH
48158: LD_INT 21
48160: PUSH
48161: LD_INT 3
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PPUSH
48168: CALL_OW 70
48172: ST_TO_ADDR
// if not tmp then
48173: LD_VAR 0 4
48177: NOT
48178: IFFALSE 48182
// exit ;
48180: GO 48240
// for i in tmp do
48182: LD_ADDR_VAR 0 5
48186: PUSH
48187: LD_VAR 0 4
48191: PUSH
48192: FOR_IN
48193: IFFALSE 48228
// if GetBase ( i ) <> base then
48195: LD_VAR 0 5
48199: PPUSH
48200: CALL_OW 274
48204: PUSH
48205: LD_VAR 0 1
48209: NONEQUAL
48210: IFFALSE 48226
// ComLinkToBase ( base , i ) ;
48212: LD_VAR 0 1
48216: PPUSH
48217: LD_VAR 0 5
48221: PPUSH
48222: CALL_OW 169
48226: GO 48192
48228: POP
48229: POP
// result := tmp ;
48230: LD_ADDR_VAR 0 3
48234: PUSH
48235: LD_VAR 0 4
48239: ST_TO_ADDR
// end ;
48240: LD_VAR 0 3
48244: RET
// export function ComComplete ( unit , b ) ; var i ; begin
48245: LD_INT 0
48247: PPUSH
48248: PPUSH
// if BuildingStatus ( b ) = bs_build then
48249: LD_VAR 0 2
48253: PPUSH
48254: CALL_OW 461
48258: PUSH
48259: LD_INT 1
48261: EQUAL
48262: IFFALSE 48322
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48264: LD_VAR 0 1
48268: PPUSH
48269: LD_STRING h
48271: PUSH
48272: LD_VAR 0 2
48276: PPUSH
48277: CALL_OW 250
48281: PUSH
48282: LD_VAR 0 2
48286: PPUSH
48287: CALL_OW 251
48291: PUSH
48292: LD_VAR 0 2
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: PUSH
48315: EMPTY
48316: LIST
48317: PPUSH
48318: CALL_OW 446
// end ;
48322: LD_VAR 0 3
48326: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48327: LD_INT 0
48329: PPUSH
48330: PPUSH
48331: PPUSH
48332: PPUSH
48333: PPUSH
48334: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
48335: LD_VAR 0 1
48339: NOT
48340: PUSH
48341: LD_VAR 0 1
48345: PPUSH
48346: CALL_OW 263
48350: PUSH
48351: LD_INT 2
48353: EQUAL
48354: NOT
48355: OR
48356: IFFALSE 48360
// exit ;
48358: GO 48676
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48360: LD_ADDR_VAR 0 6
48364: PUSH
48365: LD_INT 22
48367: PUSH
48368: LD_VAR 0 1
48372: PPUSH
48373: CALL_OW 255
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 2
48384: PUSH
48385: LD_INT 30
48387: PUSH
48388: LD_INT 36
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 34
48397: PUSH
48398: LD_INT 31
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: LIST
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PPUSH
48414: CALL_OW 69
48418: ST_TO_ADDR
// if not tmp then
48419: LD_VAR 0 6
48423: NOT
48424: IFFALSE 48428
// exit ;
48426: GO 48676
// result := [ ] ;
48428: LD_ADDR_VAR 0 2
48432: PUSH
48433: EMPTY
48434: ST_TO_ADDR
// for i in tmp do
48435: LD_ADDR_VAR 0 3
48439: PUSH
48440: LD_VAR 0 6
48444: PUSH
48445: FOR_IN
48446: IFFALSE 48517
// begin t := UnitsInside ( i ) ;
48448: LD_ADDR_VAR 0 4
48452: PUSH
48453: LD_VAR 0 3
48457: PPUSH
48458: CALL_OW 313
48462: ST_TO_ADDR
// if t then
48463: LD_VAR 0 4
48467: IFFALSE 48515
// for j in t do
48469: LD_ADDR_VAR 0 7
48473: PUSH
48474: LD_VAR 0 4
48478: PUSH
48479: FOR_IN
48480: IFFALSE 48513
// result := Insert ( result , result + 1 , j ) ;
48482: LD_ADDR_VAR 0 2
48486: PUSH
48487: LD_VAR 0 2
48491: PPUSH
48492: LD_VAR 0 2
48496: PUSH
48497: LD_INT 1
48499: PLUS
48500: PPUSH
48501: LD_VAR 0 7
48505: PPUSH
48506: CALL_OW 2
48510: ST_TO_ADDR
48511: GO 48479
48513: POP
48514: POP
// end ;
48515: GO 48445
48517: POP
48518: POP
// if not result then
48519: LD_VAR 0 2
48523: NOT
48524: IFFALSE 48528
// exit ;
48526: GO 48676
// mech := result [ 1 ] ;
48528: LD_ADDR_VAR 0 5
48532: PUSH
48533: LD_VAR 0 2
48537: PUSH
48538: LD_INT 1
48540: ARRAY
48541: ST_TO_ADDR
// if result > 1 then
48542: LD_VAR 0 2
48546: PUSH
48547: LD_INT 1
48549: GREATER
48550: IFFALSE 48662
// for i = 2 to result do
48552: LD_ADDR_VAR 0 3
48556: PUSH
48557: DOUBLE
48558: LD_INT 2
48560: DEC
48561: ST_TO_ADDR
48562: LD_VAR 0 2
48566: PUSH
48567: FOR_TO
48568: IFFALSE 48660
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48570: LD_ADDR_VAR 0 4
48574: PUSH
48575: LD_VAR 0 2
48579: PUSH
48580: LD_VAR 0 3
48584: ARRAY
48585: PPUSH
48586: LD_INT 3
48588: PPUSH
48589: CALL_OW 259
48593: PUSH
48594: LD_VAR 0 2
48598: PUSH
48599: LD_VAR 0 3
48603: ARRAY
48604: PPUSH
48605: CALL_OW 432
48609: MINUS
48610: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48611: LD_VAR 0 4
48615: PUSH
48616: LD_VAR 0 5
48620: PPUSH
48621: LD_INT 3
48623: PPUSH
48624: CALL_OW 259
48628: PUSH
48629: LD_VAR 0 5
48633: PPUSH
48634: CALL_OW 432
48638: MINUS
48639: GREATEREQUAL
48640: IFFALSE 48658
// mech := result [ i ] ;
48642: LD_ADDR_VAR 0 5
48646: PUSH
48647: LD_VAR 0 2
48651: PUSH
48652: LD_VAR 0 3
48656: ARRAY
48657: ST_TO_ADDR
// end ;
48658: GO 48567
48660: POP
48661: POP
// ComLinkTo ( vehicle , mech ) ;
48662: LD_VAR 0 1
48666: PPUSH
48667: LD_VAR 0 5
48671: PPUSH
48672: CALL_OW 135
// end ;
48676: LD_VAR 0 2
48680: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48681: LD_INT 0
48683: PPUSH
48684: PPUSH
48685: PPUSH
48686: PPUSH
48687: PPUSH
48688: PPUSH
48689: PPUSH
48690: PPUSH
48691: PPUSH
48692: PPUSH
48693: PPUSH
48694: PPUSH
48695: PPUSH
// result := [ ] ;
48696: LD_ADDR_VAR 0 7
48700: PUSH
48701: EMPTY
48702: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48703: LD_VAR 0 1
48707: PPUSH
48708: CALL_OW 266
48712: PUSH
48713: LD_INT 0
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: IN
48723: NOT
48724: IFFALSE 48728
// exit ;
48726: GO 50359
// if name then
48728: LD_VAR 0 3
48732: IFFALSE 48748
// SetBName ( base_dep , name ) ;
48734: LD_VAR 0 1
48738: PPUSH
48739: LD_VAR 0 3
48743: PPUSH
48744: CALL_OW 500
// base := GetBase ( base_dep ) ;
48748: LD_ADDR_VAR 0 15
48752: PUSH
48753: LD_VAR 0 1
48757: PPUSH
48758: CALL_OW 274
48762: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48763: LD_ADDR_VAR 0 16
48767: PUSH
48768: LD_VAR 0 1
48772: PPUSH
48773: CALL_OW 255
48777: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48778: LD_ADDR_VAR 0 17
48782: PUSH
48783: LD_VAR 0 1
48787: PPUSH
48788: CALL_OW 248
48792: ST_TO_ADDR
// if sources then
48793: LD_VAR 0 5
48797: IFFALSE 48844
// for i = 1 to 3 do
48799: LD_ADDR_VAR 0 8
48803: PUSH
48804: DOUBLE
48805: LD_INT 1
48807: DEC
48808: ST_TO_ADDR
48809: LD_INT 3
48811: PUSH
48812: FOR_TO
48813: IFFALSE 48842
// AddResourceType ( base , i , sources [ i ] ) ;
48815: LD_VAR 0 15
48819: PPUSH
48820: LD_VAR 0 8
48824: PPUSH
48825: LD_VAR 0 5
48829: PUSH
48830: LD_VAR 0 8
48834: ARRAY
48835: PPUSH
48836: CALL_OW 276
48840: GO 48812
48842: POP
48843: POP
// buildings := GetBaseBuildings ( base , area ) ;
48844: LD_ADDR_VAR 0 18
48848: PUSH
48849: LD_VAR 0 15
48853: PPUSH
48854: LD_VAR 0 2
48858: PPUSH
48859: CALL 48136 0 2
48863: ST_TO_ADDR
// InitHc ;
48864: CALL_OW 19
// InitUc ;
48868: CALL_OW 18
// uc_side := side ;
48872: LD_ADDR_OWVAR 20
48876: PUSH
48877: LD_VAR 0 16
48881: ST_TO_ADDR
// uc_nation := nation ;
48882: LD_ADDR_OWVAR 21
48886: PUSH
48887: LD_VAR 0 17
48891: ST_TO_ADDR
// if buildings then
48892: LD_VAR 0 18
48896: IFFALSE 50218
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48898: LD_ADDR_VAR 0 19
48902: PUSH
48903: LD_VAR 0 18
48907: PPUSH
48908: LD_INT 2
48910: PUSH
48911: LD_INT 30
48913: PUSH
48914: LD_INT 29
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 30
48923: PUSH
48924: LD_INT 30
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: LIST
48935: PPUSH
48936: CALL_OW 72
48940: ST_TO_ADDR
// if tmp then
48941: LD_VAR 0 19
48945: IFFALSE 48993
// for i in tmp do
48947: LD_ADDR_VAR 0 8
48951: PUSH
48952: LD_VAR 0 19
48956: PUSH
48957: FOR_IN
48958: IFFALSE 48991
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48960: LD_VAR 0 8
48964: PPUSH
48965: CALL_OW 250
48969: PPUSH
48970: LD_VAR 0 8
48974: PPUSH
48975: CALL_OW 251
48979: PPUSH
48980: LD_VAR 0 16
48984: PPUSH
48985: CALL_OW 441
48989: GO 48957
48991: POP
48992: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48993: LD_VAR 0 18
48997: PPUSH
48998: LD_INT 2
49000: PUSH
49001: LD_INT 30
49003: PUSH
49004: LD_INT 32
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 30
49013: PUSH
49014: LD_INT 33
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: LIST
49025: PPUSH
49026: CALL_OW 72
49030: IFFALSE 49118
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49032: LD_ADDR_VAR 0 8
49036: PUSH
49037: LD_VAR 0 18
49041: PPUSH
49042: LD_INT 2
49044: PUSH
49045: LD_INT 30
49047: PUSH
49048: LD_INT 32
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 30
49057: PUSH
49058: LD_INT 33
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: LIST
49069: PPUSH
49070: CALL_OW 72
49074: PUSH
49075: FOR_IN
49076: IFFALSE 49116
// begin if not GetBWeapon ( i ) then
49078: LD_VAR 0 8
49082: PPUSH
49083: CALL_OW 269
49087: NOT
49088: IFFALSE 49114
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49090: LD_VAR 0 8
49094: PPUSH
49095: LD_VAR 0 8
49099: PPUSH
49100: LD_VAR 0 2
49104: PPUSH
49105: CALL 50364 0 2
49109: PPUSH
49110: CALL_OW 431
// end ;
49114: GO 49075
49116: POP
49117: POP
// end ; for i = 1 to personel do
49118: LD_ADDR_VAR 0 8
49122: PUSH
49123: DOUBLE
49124: LD_INT 1
49126: DEC
49127: ST_TO_ADDR
49128: LD_VAR 0 6
49132: PUSH
49133: FOR_TO
49134: IFFALSE 50198
// begin if i > 4 then
49136: LD_VAR 0 8
49140: PUSH
49141: LD_INT 4
49143: GREATER
49144: IFFALSE 49148
// break ;
49146: GO 50198
// case i of 1 :
49148: LD_VAR 0 8
49152: PUSH
49153: LD_INT 1
49155: DOUBLE
49156: EQUAL
49157: IFTRUE 49161
49159: GO 49241
49161: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49162: LD_ADDR_VAR 0 12
49166: PUSH
49167: LD_VAR 0 18
49171: PPUSH
49172: LD_INT 22
49174: PUSH
49175: LD_VAR 0 16
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 58
49186: PUSH
49187: EMPTY
49188: LIST
49189: PUSH
49190: LD_INT 2
49192: PUSH
49193: LD_INT 30
49195: PUSH
49196: LD_INT 32
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 30
49205: PUSH
49206: LD_INT 4
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 30
49215: PUSH
49216: LD_INT 5
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: LIST
49233: PPUSH
49234: CALL_OW 72
49238: ST_TO_ADDR
49239: GO 49463
49241: LD_INT 2
49243: DOUBLE
49244: EQUAL
49245: IFTRUE 49249
49247: GO 49311
49249: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49250: LD_ADDR_VAR 0 12
49254: PUSH
49255: LD_VAR 0 18
49259: PPUSH
49260: LD_INT 22
49262: PUSH
49263: LD_VAR 0 16
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: LD_INT 30
49277: PUSH
49278: LD_INT 0
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 30
49287: PUSH
49288: LD_INT 1
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: LIST
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PPUSH
49304: CALL_OW 72
49308: ST_TO_ADDR
49309: GO 49463
49311: LD_INT 3
49313: DOUBLE
49314: EQUAL
49315: IFTRUE 49319
49317: GO 49381
49319: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49320: LD_ADDR_VAR 0 12
49324: PUSH
49325: LD_VAR 0 18
49329: PPUSH
49330: LD_INT 22
49332: PUSH
49333: LD_VAR 0 16
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 2
49344: PUSH
49345: LD_INT 30
49347: PUSH
49348: LD_INT 2
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 30
49357: PUSH
49358: LD_INT 3
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: LIST
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PPUSH
49374: CALL_OW 72
49378: ST_TO_ADDR
49379: GO 49463
49381: LD_INT 4
49383: DOUBLE
49384: EQUAL
49385: IFTRUE 49389
49387: GO 49462
49389: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49390: LD_ADDR_VAR 0 12
49394: PUSH
49395: LD_VAR 0 18
49399: PPUSH
49400: LD_INT 22
49402: PUSH
49403: LD_VAR 0 16
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 2
49414: PUSH
49415: LD_INT 30
49417: PUSH
49418: LD_INT 6
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 30
49427: PUSH
49428: LD_INT 7
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 30
49437: PUSH
49438: LD_INT 8
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PPUSH
49455: CALL_OW 72
49459: ST_TO_ADDR
49460: GO 49463
49462: POP
// if i = 1 then
49463: LD_VAR 0 8
49467: PUSH
49468: LD_INT 1
49470: EQUAL
49471: IFFALSE 49582
// begin tmp := [ ] ;
49473: LD_ADDR_VAR 0 19
49477: PUSH
49478: EMPTY
49479: ST_TO_ADDR
// for j in f do
49480: LD_ADDR_VAR 0 9
49484: PUSH
49485: LD_VAR 0 12
49489: PUSH
49490: FOR_IN
49491: IFFALSE 49564
// if GetBType ( j ) = b_bunker then
49493: LD_VAR 0 9
49497: PPUSH
49498: CALL_OW 266
49502: PUSH
49503: LD_INT 32
49505: EQUAL
49506: IFFALSE 49533
// tmp := Insert ( tmp , 1 , j ) else
49508: LD_ADDR_VAR 0 19
49512: PUSH
49513: LD_VAR 0 19
49517: PPUSH
49518: LD_INT 1
49520: PPUSH
49521: LD_VAR 0 9
49525: PPUSH
49526: CALL_OW 2
49530: ST_TO_ADDR
49531: GO 49562
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49533: LD_ADDR_VAR 0 19
49537: PUSH
49538: LD_VAR 0 19
49542: PPUSH
49543: LD_VAR 0 19
49547: PUSH
49548: LD_INT 1
49550: PLUS
49551: PPUSH
49552: LD_VAR 0 9
49556: PPUSH
49557: CALL_OW 2
49561: ST_TO_ADDR
49562: GO 49490
49564: POP
49565: POP
// if tmp then
49566: LD_VAR 0 19
49570: IFFALSE 49582
// f := tmp ;
49572: LD_ADDR_VAR 0 12
49576: PUSH
49577: LD_VAR 0 19
49581: ST_TO_ADDR
// end ; x := personel [ i ] ;
49582: LD_ADDR_VAR 0 13
49586: PUSH
49587: LD_VAR 0 6
49591: PUSH
49592: LD_VAR 0 8
49596: ARRAY
49597: ST_TO_ADDR
// if x = - 1 then
49598: LD_VAR 0 13
49602: PUSH
49603: LD_INT 1
49605: NEG
49606: EQUAL
49607: IFFALSE 49816
// begin for j in f do
49609: LD_ADDR_VAR 0 9
49613: PUSH
49614: LD_VAR 0 12
49618: PUSH
49619: FOR_IN
49620: IFFALSE 49812
// repeat InitHc ;
49622: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49626: LD_VAR 0 9
49630: PPUSH
49631: CALL_OW 266
49635: PUSH
49636: LD_INT 5
49638: EQUAL
49639: IFFALSE 49709
// begin if UnitsInside ( j ) < 3 then
49641: LD_VAR 0 9
49645: PPUSH
49646: CALL_OW 313
49650: PUSH
49651: LD_INT 3
49653: LESS
49654: IFFALSE 49690
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49656: LD_INT 0
49658: PPUSH
49659: LD_INT 5
49661: PUSH
49662: LD_INT 8
49664: PUSH
49665: LD_INT 9
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: LIST
49672: PUSH
49673: LD_VAR 0 17
49677: ARRAY
49678: PPUSH
49679: LD_VAR 0 4
49683: PPUSH
49684: CALL_OW 380
49688: GO 49707
// PrepareHuman ( false , i , skill ) ;
49690: LD_INT 0
49692: PPUSH
49693: LD_VAR 0 8
49697: PPUSH
49698: LD_VAR 0 4
49702: PPUSH
49703: CALL_OW 380
// end else
49707: GO 49726
// PrepareHuman ( false , i , skill ) ;
49709: LD_INT 0
49711: PPUSH
49712: LD_VAR 0 8
49716: PPUSH
49717: LD_VAR 0 4
49721: PPUSH
49722: CALL_OW 380
// un := CreateHuman ;
49726: LD_ADDR_VAR 0 14
49730: PUSH
49731: CALL_OW 44
49735: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49736: LD_ADDR_VAR 0 7
49740: PUSH
49741: LD_VAR 0 7
49745: PPUSH
49746: LD_INT 1
49748: PPUSH
49749: LD_VAR 0 14
49753: PPUSH
49754: CALL_OW 2
49758: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49759: LD_VAR 0 14
49763: PPUSH
49764: LD_VAR 0 9
49768: PPUSH
49769: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49773: LD_VAR 0 9
49777: PPUSH
49778: CALL_OW 313
49782: PUSH
49783: LD_INT 6
49785: EQUAL
49786: PUSH
49787: LD_VAR 0 9
49791: PPUSH
49792: CALL_OW 266
49796: PUSH
49797: LD_INT 32
49799: PUSH
49800: LD_INT 31
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: IN
49807: OR
49808: IFFALSE 49622
49810: GO 49619
49812: POP
49813: POP
// end else
49814: GO 50196
// for j = 1 to x do
49816: LD_ADDR_VAR 0 9
49820: PUSH
49821: DOUBLE
49822: LD_INT 1
49824: DEC
49825: ST_TO_ADDR
49826: LD_VAR 0 13
49830: PUSH
49831: FOR_TO
49832: IFFALSE 50194
// begin InitHc ;
49834: CALL_OW 19
// if not f then
49838: LD_VAR 0 12
49842: NOT
49843: IFFALSE 49932
// begin PrepareHuman ( false , i , skill ) ;
49845: LD_INT 0
49847: PPUSH
49848: LD_VAR 0 8
49852: PPUSH
49853: LD_VAR 0 4
49857: PPUSH
49858: CALL_OW 380
// un := CreateHuman ;
49862: LD_ADDR_VAR 0 14
49866: PUSH
49867: CALL_OW 44
49871: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49872: LD_ADDR_VAR 0 7
49876: PUSH
49877: LD_VAR 0 7
49881: PPUSH
49882: LD_INT 1
49884: PPUSH
49885: LD_VAR 0 14
49889: PPUSH
49890: CALL_OW 2
49894: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49895: LD_VAR 0 14
49899: PPUSH
49900: LD_VAR 0 1
49904: PPUSH
49905: CALL_OW 250
49909: PPUSH
49910: LD_VAR 0 1
49914: PPUSH
49915: CALL_OW 251
49919: PPUSH
49920: LD_INT 10
49922: PPUSH
49923: LD_INT 0
49925: PPUSH
49926: CALL_OW 50
// continue ;
49930: GO 49831
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49932: LD_VAR 0 12
49936: PUSH
49937: LD_INT 1
49939: ARRAY
49940: PPUSH
49941: CALL_OW 313
49945: PUSH
49946: LD_VAR 0 12
49950: PUSH
49951: LD_INT 1
49953: ARRAY
49954: PPUSH
49955: CALL_OW 266
49959: PUSH
49960: LD_INT 32
49962: PUSH
49963: LD_INT 31
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: IN
49970: AND
49971: PUSH
49972: LD_VAR 0 12
49976: PUSH
49977: LD_INT 1
49979: ARRAY
49980: PPUSH
49981: CALL_OW 313
49985: PUSH
49986: LD_INT 6
49988: EQUAL
49989: OR
49990: IFFALSE 50010
// f := Delete ( f , 1 ) ;
49992: LD_ADDR_VAR 0 12
49996: PUSH
49997: LD_VAR 0 12
50001: PPUSH
50002: LD_INT 1
50004: PPUSH
50005: CALL_OW 3
50009: ST_TO_ADDR
// if not f then
50010: LD_VAR 0 12
50014: NOT
50015: IFFALSE 50033
// begin x := x + 2 ;
50017: LD_ADDR_VAR 0 13
50021: PUSH
50022: LD_VAR 0 13
50026: PUSH
50027: LD_INT 2
50029: PLUS
50030: ST_TO_ADDR
// continue ;
50031: GO 49831
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50033: LD_VAR 0 12
50037: PUSH
50038: LD_INT 1
50040: ARRAY
50041: PPUSH
50042: CALL_OW 266
50046: PUSH
50047: LD_INT 5
50049: EQUAL
50050: IFFALSE 50124
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50052: LD_VAR 0 12
50056: PUSH
50057: LD_INT 1
50059: ARRAY
50060: PPUSH
50061: CALL_OW 313
50065: PUSH
50066: LD_INT 3
50068: LESS
50069: IFFALSE 50105
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50071: LD_INT 0
50073: PPUSH
50074: LD_INT 5
50076: PUSH
50077: LD_INT 8
50079: PUSH
50080: LD_INT 9
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: LIST
50087: PUSH
50088: LD_VAR 0 17
50092: ARRAY
50093: PPUSH
50094: LD_VAR 0 4
50098: PPUSH
50099: CALL_OW 380
50103: GO 50122
// PrepareHuman ( false , i , skill ) ;
50105: LD_INT 0
50107: PPUSH
50108: LD_VAR 0 8
50112: PPUSH
50113: LD_VAR 0 4
50117: PPUSH
50118: CALL_OW 380
// end else
50122: GO 50141
// PrepareHuman ( false , i , skill ) ;
50124: LD_INT 0
50126: PPUSH
50127: LD_VAR 0 8
50131: PPUSH
50132: LD_VAR 0 4
50136: PPUSH
50137: CALL_OW 380
// un := CreateHuman ;
50141: LD_ADDR_VAR 0 14
50145: PUSH
50146: CALL_OW 44
50150: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50151: LD_ADDR_VAR 0 7
50155: PUSH
50156: LD_VAR 0 7
50160: PPUSH
50161: LD_INT 1
50163: PPUSH
50164: LD_VAR 0 14
50168: PPUSH
50169: CALL_OW 2
50173: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50174: LD_VAR 0 14
50178: PPUSH
50179: LD_VAR 0 12
50183: PUSH
50184: LD_INT 1
50186: ARRAY
50187: PPUSH
50188: CALL_OW 52
// end ;
50192: GO 49831
50194: POP
50195: POP
// end ;
50196: GO 49133
50198: POP
50199: POP
// result := result ^ buildings ;
50200: LD_ADDR_VAR 0 7
50204: PUSH
50205: LD_VAR 0 7
50209: PUSH
50210: LD_VAR 0 18
50214: ADD
50215: ST_TO_ADDR
// end else
50216: GO 50359
// begin for i = 1 to personel do
50218: LD_ADDR_VAR 0 8
50222: PUSH
50223: DOUBLE
50224: LD_INT 1
50226: DEC
50227: ST_TO_ADDR
50228: LD_VAR 0 6
50232: PUSH
50233: FOR_TO
50234: IFFALSE 50357
// begin if i > 4 then
50236: LD_VAR 0 8
50240: PUSH
50241: LD_INT 4
50243: GREATER
50244: IFFALSE 50248
// break ;
50246: GO 50357
// x := personel [ i ] ;
50248: LD_ADDR_VAR 0 13
50252: PUSH
50253: LD_VAR 0 6
50257: PUSH
50258: LD_VAR 0 8
50262: ARRAY
50263: ST_TO_ADDR
// if x = - 1 then
50264: LD_VAR 0 13
50268: PUSH
50269: LD_INT 1
50271: NEG
50272: EQUAL
50273: IFFALSE 50277
// continue ;
50275: GO 50233
// PrepareHuman ( false , i , skill ) ;
50277: LD_INT 0
50279: PPUSH
50280: LD_VAR 0 8
50284: PPUSH
50285: LD_VAR 0 4
50289: PPUSH
50290: CALL_OW 380
// un := CreateHuman ;
50294: LD_ADDR_VAR 0 14
50298: PUSH
50299: CALL_OW 44
50303: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50304: LD_VAR 0 14
50308: PPUSH
50309: LD_VAR 0 1
50313: PPUSH
50314: CALL_OW 250
50318: PPUSH
50319: LD_VAR 0 1
50323: PPUSH
50324: CALL_OW 251
50328: PPUSH
50329: LD_INT 10
50331: PPUSH
50332: LD_INT 0
50334: PPUSH
50335: CALL_OW 50
// result := result ^ un ;
50339: LD_ADDR_VAR 0 7
50343: PUSH
50344: LD_VAR 0 7
50348: PUSH
50349: LD_VAR 0 14
50353: ADD
50354: ST_TO_ADDR
// end ;
50355: GO 50233
50357: POP
50358: POP
// end ; end ;
50359: LD_VAR 0 7
50363: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50364: LD_INT 0
50366: PPUSH
50367: PPUSH
50368: PPUSH
50369: PPUSH
50370: PPUSH
50371: PPUSH
50372: PPUSH
50373: PPUSH
50374: PPUSH
50375: PPUSH
50376: PPUSH
50377: PPUSH
50378: PPUSH
50379: PPUSH
50380: PPUSH
50381: PPUSH
// result := false ;
50382: LD_ADDR_VAR 0 3
50386: PUSH
50387: LD_INT 0
50389: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50390: LD_VAR 0 1
50394: NOT
50395: PUSH
50396: LD_VAR 0 1
50400: PPUSH
50401: CALL_OW 266
50405: PUSH
50406: LD_INT 32
50408: PUSH
50409: LD_INT 33
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: IN
50416: NOT
50417: OR
50418: IFFALSE 50422
// exit ;
50420: GO 51558
// nat := GetNation ( tower ) ;
50422: LD_ADDR_VAR 0 12
50426: PUSH
50427: LD_VAR 0 1
50431: PPUSH
50432: CALL_OW 248
50436: ST_TO_ADDR
// side := GetSide ( tower ) ;
50437: LD_ADDR_VAR 0 16
50441: PUSH
50442: LD_VAR 0 1
50446: PPUSH
50447: CALL_OW 255
50451: ST_TO_ADDR
// x := GetX ( tower ) ;
50452: LD_ADDR_VAR 0 10
50456: PUSH
50457: LD_VAR 0 1
50461: PPUSH
50462: CALL_OW 250
50466: ST_TO_ADDR
// y := GetY ( tower ) ;
50467: LD_ADDR_VAR 0 11
50471: PUSH
50472: LD_VAR 0 1
50476: PPUSH
50477: CALL_OW 251
50481: ST_TO_ADDR
// if not x or not y then
50482: LD_VAR 0 10
50486: NOT
50487: PUSH
50488: LD_VAR 0 11
50492: NOT
50493: OR
50494: IFFALSE 50498
// exit ;
50496: GO 51558
// weapon := 0 ;
50498: LD_ADDR_VAR 0 18
50502: PUSH
50503: LD_INT 0
50505: ST_TO_ADDR
// fac_list := [ ] ;
50506: LD_ADDR_VAR 0 17
50510: PUSH
50511: EMPTY
50512: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
50513: LD_ADDR_VAR 0 6
50517: PUSH
50518: LD_VAR 0 1
50522: PPUSH
50523: CALL_OW 274
50527: PPUSH
50528: LD_VAR 0 2
50532: PPUSH
50533: CALL 48136 0 2
50537: PPUSH
50538: LD_INT 30
50540: PUSH
50541: LD_INT 3
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PPUSH
50548: CALL_OW 72
50552: ST_TO_ADDR
// if not factories then
50553: LD_VAR 0 6
50557: NOT
50558: IFFALSE 50562
// exit ;
50560: GO 51558
// for i in factories do
50562: LD_ADDR_VAR 0 8
50566: PUSH
50567: LD_VAR 0 6
50571: PUSH
50572: FOR_IN
50573: IFFALSE 50598
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50575: LD_ADDR_VAR 0 17
50579: PUSH
50580: LD_VAR 0 17
50584: PUSH
50585: LD_VAR 0 8
50589: PPUSH
50590: CALL_OW 478
50594: UNION
50595: ST_TO_ADDR
50596: GO 50572
50598: POP
50599: POP
// if not fac_list then
50600: LD_VAR 0 17
50604: NOT
50605: IFFALSE 50609
// exit ;
50607: GO 51558
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50609: LD_ADDR_VAR 0 5
50613: PUSH
50614: LD_INT 4
50616: PUSH
50617: LD_INT 5
50619: PUSH
50620: LD_INT 9
50622: PUSH
50623: LD_INT 10
50625: PUSH
50626: LD_INT 6
50628: PUSH
50629: LD_INT 7
50631: PUSH
50632: LD_INT 11
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 27
50646: PUSH
50647: LD_INT 28
50649: PUSH
50650: LD_INT 26
50652: PUSH
50653: LD_INT 30
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 43
50664: PUSH
50665: LD_INT 44
50667: PUSH
50668: LD_INT 46
50670: PUSH
50671: LD_INT 45
50673: PUSH
50674: LD_INT 47
50676: PUSH
50677: LD_INT 49
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: LIST
50692: PUSH
50693: LD_VAR 0 12
50697: ARRAY
50698: ST_TO_ADDR
// for i in list do
50699: LD_ADDR_VAR 0 8
50703: PUSH
50704: LD_VAR 0 5
50708: PUSH
50709: FOR_IN
50710: IFFALSE 50743
// if not i in fac_list then
50712: LD_VAR 0 8
50716: PUSH
50717: LD_VAR 0 17
50721: IN
50722: NOT
50723: IFFALSE 50741
// list := list diff i ;
50725: LD_ADDR_VAR 0 5
50729: PUSH
50730: LD_VAR 0 5
50734: PUSH
50735: LD_VAR 0 8
50739: DIFF
50740: ST_TO_ADDR
50741: GO 50709
50743: POP
50744: POP
// if not list then
50745: LD_VAR 0 5
50749: NOT
50750: IFFALSE 50754
// exit ;
50752: GO 51558
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50754: LD_VAR 0 12
50758: PUSH
50759: LD_INT 3
50761: EQUAL
50762: PUSH
50763: LD_INT 49
50765: PUSH
50766: LD_VAR 0 5
50770: IN
50771: AND
50772: PUSH
50773: LD_INT 31
50775: PPUSH
50776: LD_VAR 0 16
50780: PPUSH
50781: CALL_OW 321
50785: PUSH
50786: LD_INT 2
50788: EQUAL
50789: AND
50790: IFFALSE 50850
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50792: LD_INT 22
50794: PUSH
50795: LD_VAR 0 16
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 35
50806: PUSH
50807: LD_INT 49
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 91
50816: PUSH
50817: LD_VAR 0 1
50821: PUSH
50822: LD_INT 10
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: LIST
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: LIST
50834: PPUSH
50835: CALL_OW 69
50839: NOT
50840: IFFALSE 50850
// weapon := ru_time_lapser ;
50842: LD_ADDR_VAR 0 18
50846: PUSH
50847: LD_INT 49
50849: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50850: LD_VAR 0 12
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: LD_INT 2
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: IN
50865: PUSH
50866: LD_INT 11
50868: PUSH
50869: LD_VAR 0 5
50873: IN
50874: PUSH
50875: LD_INT 30
50877: PUSH
50878: LD_VAR 0 5
50882: IN
50883: OR
50884: AND
50885: PUSH
50886: LD_INT 6
50888: PPUSH
50889: LD_VAR 0 16
50893: PPUSH
50894: CALL_OW 321
50898: PUSH
50899: LD_INT 2
50901: EQUAL
50902: AND
50903: IFFALSE 51068
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50905: LD_INT 22
50907: PUSH
50908: LD_VAR 0 16
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 2
50919: PUSH
50920: LD_INT 35
50922: PUSH
50923: LD_INT 11
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 35
50932: PUSH
50933: LD_INT 30
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 91
50947: PUSH
50948: LD_VAR 0 1
50952: PUSH
50953: LD_INT 18
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: LIST
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: LIST
50965: PPUSH
50966: CALL_OW 69
50970: NOT
50971: PUSH
50972: LD_INT 22
50974: PUSH
50975: LD_VAR 0 16
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 2
50986: PUSH
50987: LD_INT 30
50989: PUSH
50990: LD_INT 32
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 30
50999: PUSH
51000: LD_INT 33
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 91
51014: PUSH
51015: LD_VAR 0 1
51019: PUSH
51020: LD_INT 12
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: LIST
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: LIST
51032: PUSH
51033: EMPTY
51034: LIST
51035: PPUSH
51036: CALL_OW 69
51040: PUSH
51041: LD_INT 2
51043: GREATER
51044: AND
51045: IFFALSE 51068
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51047: LD_ADDR_VAR 0 18
51051: PUSH
51052: LD_INT 11
51054: PUSH
51055: LD_INT 30
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_VAR 0 12
51066: ARRAY
51067: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51068: LD_VAR 0 18
51072: NOT
51073: PUSH
51074: LD_INT 40
51076: PPUSH
51077: LD_VAR 0 16
51081: PPUSH
51082: CALL_OW 321
51086: PUSH
51087: LD_INT 2
51089: EQUAL
51090: AND
51091: PUSH
51092: LD_INT 7
51094: PUSH
51095: LD_VAR 0 5
51099: IN
51100: PUSH
51101: LD_INT 28
51103: PUSH
51104: LD_VAR 0 5
51108: IN
51109: OR
51110: PUSH
51111: LD_INT 45
51113: PUSH
51114: LD_VAR 0 5
51118: IN
51119: OR
51120: AND
51121: IFFALSE 51375
// begin hex := GetHexInfo ( x , y ) ;
51123: LD_ADDR_VAR 0 4
51127: PUSH
51128: LD_VAR 0 10
51132: PPUSH
51133: LD_VAR 0 11
51137: PPUSH
51138: CALL_OW 546
51142: ST_TO_ADDR
// if hex [ 1 ] then
51143: LD_VAR 0 4
51147: PUSH
51148: LD_INT 1
51150: ARRAY
51151: IFFALSE 51155
// exit ;
51153: GO 51558
// height := hex [ 2 ] ;
51155: LD_ADDR_VAR 0 15
51159: PUSH
51160: LD_VAR 0 4
51164: PUSH
51165: LD_INT 2
51167: ARRAY
51168: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51169: LD_ADDR_VAR 0 14
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: LD_INT 2
51179: PUSH
51180: LD_INT 3
51182: PUSH
51183: LD_INT 5
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: ST_TO_ADDR
// for i in tmp do
51192: LD_ADDR_VAR 0 8
51196: PUSH
51197: LD_VAR 0 14
51201: PUSH
51202: FOR_IN
51203: IFFALSE 51373
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51205: LD_ADDR_VAR 0 9
51209: PUSH
51210: LD_VAR 0 10
51214: PPUSH
51215: LD_VAR 0 8
51219: PPUSH
51220: LD_INT 5
51222: PPUSH
51223: CALL_OW 272
51227: PUSH
51228: LD_VAR 0 11
51232: PPUSH
51233: LD_VAR 0 8
51237: PPUSH
51238: LD_INT 5
51240: PPUSH
51241: CALL_OW 273
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51250: LD_VAR 0 9
51254: PUSH
51255: LD_INT 1
51257: ARRAY
51258: PPUSH
51259: LD_VAR 0 9
51263: PUSH
51264: LD_INT 2
51266: ARRAY
51267: PPUSH
51268: CALL_OW 488
51272: IFFALSE 51371
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51274: LD_ADDR_VAR 0 4
51278: PUSH
51279: LD_VAR 0 9
51283: PUSH
51284: LD_INT 1
51286: ARRAY
51287: PPUSH
51288: LD_VAR 0 9
51292: PUSH
51293: LD_INT 2
51295: ARRAY
51296: PPUSH
51297: CALL_OW 546
51301: ST_TO_ADDR
// if hex [ 1 ] then
51302: LD_VAR 0 4
51306: PUSH
51307: LD_INT 1
51309: ARRAY
51310: IFFALSE 51314
// continue ;
51312: GO 51202
// h := hex [ 2 ] ;
51314: LD_ADDR_VAR 0 13
51318: PUSH
51319: LD_VAR 0 4
51323: PUSH
51324: LD_INT 2
51326: ARRAY
51327: ST_TO_ADDR
// if h + 7 < height then
51328: LD_VAR 0 13
51332: PUSH
51333: LD_INT 7
51335: PLUS
51336: PUSH
51337: LD_VAR 0 15
51341: LESS
51342: IFFALSE 51371
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51344: LD_ADDR_VAR 0 18
51348: PUSH
51349: LD_INT 7
51351: PUSH
51352: LD_INT 28
51354: PUSH
51355: LD_INT 45
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: LIST
51362: PUSH
51363: LD_VAR 0 12
51367: ARRAY
51368: ST_TO_ADDR
// break ;
51369: GO 51373
// end ; end ; end ;
51371: GO 51202
51373: POP
51374: POP
// end ; if not weapon then
51375: LD_VAR 0 18
51379: NOT
51380: IFFALSE 51440
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51382: LD_ADDR_VAR 0 5
51386: PUSH
51387: LD_VAR 0 5
51391: PUSH
51392: LD_INT 11
51394: PUSH
51395: LD_INT 30
51397: PUSH
51398: LD_INT 49
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: LIST
51405: DIFF
51406: ST_TO_ADDR
// if not list then
51407: LD_VAR 0 5
51411: NOT
51412: IFFALSE 51416
// exit ;
51414: GO 51558
// weapon := list [ rand ( 1 , list ) ] ;
51416: LD_ADDR_VAR 0 18
51420: PUSH
51421: LD_VAR 0 5
51425: PUSH
51426: LD_INT 1
51428: PPUSH
51429: LD_VAR 0 5
51433: PPUSH
51434: CALL_OW 12
51438: ARRAY
51439: ST_TO_ADDR
// end ; if weapon then
51440: LD_VAR 0 18
51444: IFFALSE 51558
// begin tmp := CostOfWeapon ( weapon ) ;
51446: LD_ADDR_VAR 0 14
51450: PUSH
51451: LD_VAR 0 18
51455: PPUSH
51456: CALL_OW 451
51460: ST_TO_ADDR
// j := GetBase ( tower ) ;
51461: LD_ADDR_VAR 0 9
51465: PUSH
51466: LD_VAR 0 1
51470: PPUSH
51471: CALL_OW 274
51475: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51476: LD_VAR 0 9
51480: PPUSH
51481: LD_INT 1
51483: PPUSH
51484: CALL_OW 275
51488: PUSH
51489: LD_VAR 0 14
51493: PUSH
51494: LD_INT 1
51496: ARRAY
51497: GREATEREQUAL
51498: PUSH
51499: LD_VAR 0 9
51503: PPUSH
51504: LD_INT 2
51506: PPUSH
51507: CALL_OW 275
51511: PUSH
51512: LD_VAR 0 14
51516: PUSH
51517: LD_INT 2
51519: ARRAY
51520: GREATEREQUAL
51521: AND
51522: PUSH
51523: LD_VAR 0 9
51527: PPUSH
51528: LD_INT 3
51530: PPUSH
51531: CALL_OW 275
51535: PUSH
51536: LD_VAR 0 14
51540: PUSH
51541: LD_INT 3
51543: ARRAY
51544: GREATEREQUAL
51545: AND
51546: IFFALSE 51558
// result := weapon ;
51548: LD_ADDR_VAR 0 3
51552: PUSH
51553: LD_VAR 0 18
51557: ST_TO_ADDR
// end ; end ;
51558: LD_VAR 0 3
51562: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51563: LD_INT 0
51565: PPUSH
51566: PPUSH
// result := true ;
51567: LD_ADDR_VAR 0 3
51571: PUSH
51572: LD_INT 1
51574: ST_TO_ADDR
// if array1 = array2 then
51575: LD_VAR 0 1
51579: PUSH
51580: LD_VAR 0 2
51584: EQUAL
51585: IFFALSE 51645
// begin for i = 1 to array1 do
51587: LD_ADDR_VAR 0 4
51591: PUSH
51592: DOUBLE
51593: LD_INT 1
51595: DEC
51596: ST_TO_ADDR
51597: LD_VAR 0 1
51601: PUSH
51602: FOR_TO
51603: IFFALSE 51641
// if array1 [ i ] <> array2 [ i ] then
51605: LD_VAR 0 1
51609: PUSH
51610: LD_VAR 0 4
51614: ARRAY
51615: PUSH
51616: LD_VAR 0 2
51620: PUSH
51621: LD_VAR 0 4
51625: ARRAY
51626: NONEQUAL
51627: IFFALSE 51639
// begin result := false ;
51629: LD_ADDR_VAR 0 3
51633: PUSH
51634: LD_INT 0
51636: ST_TO_ADDR
// break ;
51637: GO 51641
// end ;
51639: GO 51602
51641: POP
51642: POP
// end else
51643: GO 51653
// result := false ;
51645: LD_ADDR_VAR 0 3
51649: PUSH
51650: LD_INT 0
51652: ST_TO_ADDR
// end ;
51653: LD_VAR 0 3
51657: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51658: LD_INT 0
51660: PPUSH
51661: PPUSH
51662: PPUSH
// pom := GetBase ( fac ) ;
51663: LD_ADDR_VAR 0 5
51667: PUSH
51668: LD_VAR 0 1
51672: PPUSH
51673: CALL_OW 274
51677: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51678: LD_ADDR_VAR 0 4
51682: PUSH
51683: LD_VAR 0 2
51687: PUSH
51688: LD_INT 1
51690: ARRAY
51691: PPUSH
51692: LD_VAR 0 2
51696: PUSH
51697: LD_INT 2
51699: ARRAY
51700: PPUSH
51701: LD_VAR 0 2
51705: PUSH
51706: LD_INT 3
51708: ARRAY
51709: PPUSH
51710: LD_VAR 0 2
51714: PUSH
51715: LD_INT 4
51717: ARRAY
51718: PPUSH
51719: CALL_OW 449
51723: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51724: LD_ADDR_VAR 0 3
51728: PUSH
51729: LD_VAR 0 5
51733: PPUSH
51734: LD_INT 1
51736: PPUSH
51737: CALL_OW 275
51741: PUSH
51742: LD_VAR 0 4
51746: PUSH
51747: LD_INT 1
51749: ARRAY
51750: GREATEREQUAL
51751: PUSH
51752: LD_VAR 0 5
51756: PPUSH
51757: LD_INT 2
51759: PPUSH
51760: CALL_OW 275
51764: PUSH
51765: LD_VAR 0 4
51769: PUSH
51770: LD_INT 2
51772: ARRAY
51773: GREATEREQUAL
51774: AND
51775: PUSH
51776: LD_VAR 0 5
51780: PPUSH
51781: LD_INT 3
51783: PPUSH
51784: CALL_OW 275
51788: PUSH
51789: LD_VAR 0 4
51793: PUSH
51794: LD_INT 3
51796: ARRAY
51797: GREATEREQUAL
51798: AND
51799: ST_TO_ADDR
// end ;
51800: LD_VAR 0 3
51804: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51805: LD_INT 0
51807: PPUSH
51808: PPUSH
51809: PPUSH
51810: PPUSH
// pom := GetBase ( building ) ;
51811: LD_ADDR_VAR 0 3
51815: PUSH
51816: LD_VAR 0 1
51820: PPUSH
51821: CALL_OW 274
51825: ST_TO_ADDR
// if not pom then
51826: LD_VAR 0 3
51830: NOT
51831: IFFALSE 51835
// exit ;
51833: GO 52005
// btype := GetBType ( building ) ;
51835: LD_ADDR_VAR 0 5
51839: PUSH
51840: LD_VAR 0 1
51844: PPUSH
51845: CALL_OW 266
51849: ST_TO_ADDR
// if btype = b_armoury then
51850: LD_VAR 0 5
51854: PUSH
51855: LD_INT 4
51857: EQUAL
51858: IFFALSE 51868
// btype := b_barracks ;
51860: LD_ADDR_VAR 0 5
51864: PUSH
51865: LD_INT 5
51867: ST_TO_ADDR
// if btype = b_depot then
51868: LD_VAR 0 5
51872: PUSH
51873: LD_INT 0
51875: EQUAL
51876: IFFALSE 51886
// btype := b_warehouse ;
51878: LD_ADDR_VAR 0 5
51882: PUSH
51883: LD_INT 1
51885: ST_TO_ADDR
// if btype = b_workshop then
51886: LD_VAR 0 5
51890: PUSH
51891: LD_INT 2
51893: EQUAL
51894: IFFALSE 51904
// btype := b_factory ;
51896: LD_ADDR_VAR 0 5
51900: PUSH
51901: LD_INT 3
51903: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51904: LD_ADDR_VAR 0 4
51908: PUSH
51909: LD_VAR 0 5
51913: PPUSH
51914: LD_VAR 0 1
51918: PPUSH
51919: CALL_OW 248
51923: PPUSH
51924: CALL_OW 450
51928: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51929: LD_ADDR_VAR 0 2
51933: PUSH
51934: LD_VAR 0 3
51938: PPUSH
51939: LD_INT 1
51941: PPUSH
51942: CALL_OW 275
51946: PUSH
51947: LD_VAR 0 4
51951: PUSH
51952: LD_INT 1
51954: ARRAY
51955: GREATEREQUAL
51956: PUSH
51957: LD_VAR 0 3
51961: PPUSH
51962: LD_INT 2
51964: PPUSH
51965: CALL_OW 275
51969: PUSH
51970: LD_VAR 0 4
51974: PUSH
51975: LD_INT 2
51977: ARRAY
51978: GREATEREQUAL
51979: AND
51980: PUSH
51981: LD_VAR 0 3
51985: PPUSH
51986: LD_INT 3
51988: PPUSH
51989: CALL_OW 275
51993: PUSH
51994: LD_VAR 0 4
51998: PUSH
51999: LD_INT 3
52001: ARRAY
52002: GREATEREQUAL
52003: AND
52004: ST_TO_ADDR
// end ;
52005: LD_VAR 0 2
52009: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52010: LD_INT 0
52012: PPUSH
52013: PPUSH
52014: PPUSH
// pom := GetBase ( building ) ;
52015: LD_ADDR_VAR 0 4
52019: PUSH
52020: LD_VAR 0 1
52024: PPUSH
52025: CALL_OW 274
52029: ST_TO_ADDR
// if not pom then
52030: LD_VAR 0 4
52034: NOT
52035: IFFALSE 52039
// exit ;
52037: GO 52140
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52039: LD_ADDR_VAR 0 5
52043: PUSH
52044: LD_VAR 0 2
52048: PPUSH
52049: LD_VAR 0 1
52053: PPUSH
52054: CALL_OW 248
52058: PPUSH
52059: CALL_OW 450
52063: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52064: LD_ADDR_VAR 0 3
52068: PUSH
52069: LD_VAR 0 4
52073: PPUSH
52074: LD_INT 1
52076: PPUSH
52077: CALL_OW 275
52081: PUSH
52082: LD_VAR 0 5
52086: PUSH
52087: LD_INT 1
52089: ARRAY
52090: GREATEREQUAL
52091: PUSH
52092: LD_VAR 0 4
52096: PPUSH
52097: LD_INT 2
52099: PPUSH
52100: CALL_OW 275
52104: PUSH
52105: LD_VAR 0 5
52109: PUSH
52110: LD_INT 2
52112: ARRAY
52113: GREATEREQUAL
52114: AND
52115: PUSH
52116: LD_VAR 0 4
52120: PPUSH
52121: LD_INT 3
52123: PPUSH
52124: CALL_OW 275
52128: PUSH
52129: LD_VAR 0 5
52133: PUSH
52134: LD_INT 3
52136: ARRAY
52137: GREATEREQUAL
52138: AND
52139: ST_TO_ADDR
// end ;
52140: LD_VAR 0 3
52144: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
52145: LD_INT 0
52147: PPUSH
52148: PPUSH
52149: PPUSH
52150: PPUSH
52151: PPUSH
52152: PPUSH
52153: PPUSH
52154: PPUSH
52155: PPUSH
52156: PPUSH
// result := false ;
52157: LD_ADDR_VAR 0 6
52161: PUSH
52162: LD_INT 0
52164: ST_TO_ADDR
// if not base or not btype or not x or not y then
52165: LD_VAR 0 1
52169: NOT
52170: PUSH
52171: LD_VAR 0 2
52175: NOT
52176: OR
52177: PUSH
52178: LD_VAR 0 3
52182: NOT
52183: OR
52184: PUSH
52185: LD_VAR 0 4
52189: NOT
52190: OR
52191: IFFALSE 52195
// exit ;
52193: GO 52804
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
52195: LD_ADDR_VAR 0 12
52199: PUSH
52200: LD_VAR 0 2
52204: PPUSH
52205: LD_VAR 0 3
52209: PPUSH
52210: LD_VAR 0 4
52214: PPUSH
52215: LD_VAR 0 5
52219: PPUSH
52220: LD_VAR 0 1
52224: PUSH
52225: LD_INT 1
52227: ARRAY
52228: PPUSH
52229: CALL_OW 248
52233: PPUSH
52234: LD_INT 0
52236: PPUSH
52237: CALL 53641 0 6
52241: ST_TO_ADDR
// if not hexes then
52242: LD_VAR 0 12
52246: NOT
52247: IFFALSE 52251
// exit ;
52249: GO 52804
// for i = 1 to hexes do
52251: LD_ADDR_VAR 0 7
52255: PUSH
52256: DOUBLE
52257: LD_INT 1
52259: DEC
52260: ST_TO_ADDR
52261: LD_VAR 0 12
52265: PUSH
52266: FOR_TO
52267: IFFALSE 52802
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52269: LD_ADDR_VAR 0 11
52273: PUSH
52274: LD_VAR 0 12
52278: PUSH
52279: LD_VAR 0 7
52283: ARRAY
52284: PUSH
52285: LD_INT 1
52287: ARRAY
52288: PPUSH
52289: LD_VAR 0 12
52293: PUSH
52294: LD_VAR 0 7
52298: ARRAY
52299: PUSH
52300: LD_INT 2
52302: ARRAY
52303: PPUSH
52304: CALL_OW 428
52308: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52309: LD_VAR 0 12
52313: PUSH
52314: LD_VAR 0 7
52318: ARRAY
52319: PUSH
52320: LD_INT 1
52322: ARRAY
52323: PPUSH
52324: LD_VAR 0 12
52328: PUSH
52329: LD_VAR 0 7
52333: ARRAY
52334: PUSH
52335: LD_INT 2
52337: ARRAY
52338: PPUSH
52339: CALL_OW 351
52343: PUSH
52344: LD_VAR 0 12
52348: PUSH
52349: LD_VAR 0 7
52353: ARRAY
52354: PUSH
52355: LD_INT 1
52357: ARRAY
52358: PPUSH
52359: LD_VAR 0 12
52363: PUSH
52364: LD_VAR 0 7
52368: ARRAY
52369: PUSH
52370: LD_INT 2
52372: ARRAY
52373: PPUSH
52374: CALL_OW 488
52378: NOT
52379: OR
52380: PUSH
52381: LD_VAR 0 11
52385: PPUSH
52386: CALL_OW 247
52390: PUSH
52391: LD_INT 3
52393: EQUAL
52394: OR
52395: IFFALSE 52401
// exit ;
52397: POP
52398: POP
52399: GO 52804
// if not tmp or not tmp in base then
52401: LD_VAR 0 11
52405: NOT
52406: PUSH
52407: LD_VAR 0 11
52411: PUSH
52412: LD_VAR 0 1
52416: IN
52417: NOT
52418: OR
52419: IFFALSE 52423
// continue ;
52421: GO 52266
// result := true ;
52423: LD_ADDR_VAR 0 6
52427: PUSH
52428: LD_INT 1
52430: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52431: LD_ADDR_VAR 0 15
52435: PUSH
52436: LD_VAR 0 1
52440: PPUSH
52441: LD_INT 22
52443: PUSH
52444: LD_VAR 0 11
52448: PPUSH
52449: CALL_OW 255
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 2
52460: PUSH
52461: LD_INT 30
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 30
52473: PUSH
52474: LD_INT 1
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: LIST
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PPUSH
52490: CALL_OW 72
52494: ST_TO_ADDR
// if dep then
52495: LD_VAR 0 15
52499: IFFALSE 52635
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52501: LD_ADDR_VAR 0 14
52505: PUSH
52506: LD_VAR 0 15
52510: PUSH
52511: LD_INT 1
52513: ARRAY
52514: PPUSH
52515: CALL_OW 250
52519: PPUSH
52520: LD_VAR 0 15
52524: PUSH
52525: LD_INT 1
52527: ARRAY
52528: PPUSH
52529: CALL_OW 254
52533: PPUSH
52534: LD_INT 5
52536: PPUSH
52537: CALL_OW 272
52541: PUSH
52542: LD_VAR 0 15
52546: PUSH
52547: LD_INT 1
52549: ARRAY
52550: PPUSH
52551: CALL_OW 251
52555: PPUSH
52556: LD_VAR 0 15
52560: PUSH
52561: LD_INT 1
52563: ARRAY
52564: PPUSH
52565: CALL_OW 254
52569: PPUSH
52570: LD_INT 5
52572: PPUSH
52573: CALL_OW 273
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52582: LD_VAR 0 14
52586: PUSH
52587: LD_INT 1
52589: ARRAY
52590: PPUSH
52591: LD_VAR 0 14
52595: PUSH
52596: LD_INT 2
52598: ARRAY
52599: PPUSH
52600: CALL_OW 488
52604: IFFALSE 52635
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52606: LD_VAR 0 11
52610: PPUSH
52611: LD_VAR 0 14
52615: PUSH
52616: LD_INT 1
52618: ARRAY
52619: PPUSH
52620: LD_VAR 0 14
52624: PUSH
52625: LD_INT 2
52627: ARRAY
52628: PPUSH
52629: CALL_OW 111
// continue ;
52633: GO 52266
// end ; end ; r := GetDir ( tmp ) ;
52635: LD_ADDR_VAR 0 13
52639: PUSH
52640: LD_VAR 0 11
52644: PPUSH
52645: CALL_OW 254
52649: ST_TO_ADDR
// if r = 5 then
52650: LD_VAR 0 13
52654: PUSH
52655: LD_INT 5
52657: EQUAL
52658: IFFALSE 52668
// r := 0 ;
52660: LD_ADDR_VAR 0 13
52664: PUSH
52665: LD_INT 0
52667: ST_TO_ADDR
// for j = r to 5 do
52668: LD_ADDR_VAR 0 8
52672: PUSH
52673: DOUBLE
52674: LD_VAR 0 13
52678: DEC
52679: ST_TO_ADDR
52680: LD_INT 5
52682: PUSH
52683: FOR_TO
52684: IFFALSE 52798
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52686: LD_ADDR_VAR 0 9
52690: PUSH
52691: LD_VAR 0 11
52695: PPUSH
52696: CALL_OW 250
52700: PPUSH
52701: LD_VAR 0 8
52705: PPUSH
52706: LD_INT 2
52708: PPUSH
52709: CALL_OW 272
52713: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52714: LD_ADDR_VAR 0 10
52718: PUSH
52719: LD_VAR 0 11
52723: PPUSH
52724: CALL_OW 251
52728: PPUSH
52729: LD_VAR 0 8
52733: PPUSH
52734: LD_INT 2
52736: PPUSH
52737: CALL_OW 273
52741: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52742: LD_VAR 0 9
52746: PPUSH
52747: LD_VAR 0 10
52751: PPUSH
52752: CALL_OW 488
52756: PUSH
52757: LD_VAR 0 9
52761: PPUSH
52762: LD_VAR 0 10
52766: PPUSH
52767: CALL_OW 428
52771: NOT
52772: AND
52773: IFFALSE 52796
// begin ComMoveXY ( tmp , _x , _y ) ;
52775: LD_VAR 0 11
52779: PPUSH
52780: LD_VAR 0 9
52784: PPUSH
52785: LD_VAR 0 10
52789: PPUSH
52790: CALL_OW 111
// break ;
52794: GO 52798
// end ; end ;
52796: GO 52683
52798: POP
52799: POP
// end ;
52800: GO 52266
52802: POP
52803: POP
// end ;
52804: LD_VAR 0 6
52808: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
52809: LD_INT 0
52811: PPUSH
52812: PPUSH
52813: PPUSH
52814: PPUSH
52815: PPUSH
52816: PPUSH
52817: PPUSH
52818: PPUSH
52819: PPUSH
52820: PPUSH
// result := false ;
52821: LD_ADDR_VAR 0 6
52825: PUSH
52826: LD_INT 0
52828: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52829: LD_VAR 0 1
52833: NOT
52834: PUSH
52835: LD_VAR 0 1
52839: PPUSH
52840: CALL_OW 266
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: IN
52855: NOT
52856: OR
52857: PUSH
52858: LD_VAR 0 2
52862: NOT
52863: OR
52864: PUSH
52865: LD_VAR 0 5
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: LD_INT 2
52878: PUSH
52879: LD_INT 3
52881: PUSH
52882: LD_INT 4
52884: PUSH
52885: LD_INT 5
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: IN
52896: NOT
52897: OR
52898: PUSH
52899: LD_VAR 0 3
52903: PPUSH
52904: LD_VAR 0 4
52908: PPUSH
52909: CALL_OW 488
52913: NOT
52914: OR
52915: IFFALSE 52919
// exit ;
52917: GO 53636
// pom := GetBase ( depot ) ;
52919: LD_ADDR_VAR 0 10
52923: PUSH
52924: LD_VAR 0 1
52928: PPUSH
52929: CALL_OW 274
52933: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52934: LD_ADDR_VAR 0 11
52938: PUSH
52939: LD_VAR 0 2
52943: PPUSH
52944: LD_VAR 0 1
52948: PPUSH
52949: CALL_OW 248
52953: PPUSH
52954: CALL_OW 450
52958: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52959: LD_VAR 0 10
52963: PPUSH
52964: LD_INT 1
52966: PPUSH
52967: CALL_OW 275
52971: PUSH
52972: LD_VAR 0 11
52976: PUSH
52977: LD_INT 1
52979: ARRAY
52980: GREATEREQUAL
52981: PUSH
52982: LD_VAR 0 10
52986: PPUSH
52987: LD_INT 2
52989: PPUSH
52990: CALL_OW 275
52994: PUSH
52995: LD_VAR 0 11
52999: PUSH
53000: LD_INT 2
53002: ARRAY
53003: GREATEREQUAL
53004: AND
53005: PUSH
53006: LD_VAR 0 10
53010: PPUSH
53011: LD_INT 3
53013: PPUSH
53014: CALL_OW 275
53018: PUSH
53019: LD_VAR 0 11
53023: PUSH
53024: LD_INT 3
53026: ARRAY
53027: GREATEREQUAL
53028: AND
53029: NOT
53030: IFFALSE 53034
// exit ;
53032: GO 53636
// if GetBType ( depot ) = b_depot then
53034: LD_VAR 0 1
53038: PPUSH
53039: CALL_OW 266
53043: PUSH
53044: LD_INT 0
53046: EQUAL
53047: IFFALSE 53059
// dist := 28 else
53049: LD_ADDR_VAR 0 14
53053: PUSH
53054: LD_INT 28
53056: ST_TO_ADDR
53057: GO 53067
// dist := 36 ;
53059: LD_ADDR_VAR 0 14
53063: PUSH
53064: LD_INT 36
53066: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53067: LD_VAR 0 1
53071: PPUSH
53072: LD_VAR 0 3
53076: PPUSH
53077: LD_VAR 0 4
53081: PPUSH
53082: CALL_OW 297
53086: PUSH
53087: LD_VAR 0 14
53091: GREATER
53092: IFFALSE 53096
// exit ;
53094: GO 53636
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53096: LD_ADDR_VAR 0 12
53100: PUSH
53101: LD_VAR 0 2
53105: PPUSH
53106: LD_VAR 0 3
53110: PPUSH
53111: LD_VAR 0 4
53115: PPUSH
53116: LD_VAR 0 5
53120: PPUSH
53121: LD_VAR 0 1
53125: PPUSH
53126: CALL_OW 248
53130: PPUSH
53131: LD_INT 0
53133: PPUSH
53134: CALL 53641 0 6
53138: ST_TO_ADDR
// if not hexes then
53139: LD_VAR 0 12
53143: NOT
53144: IFFALSE 53148
// exit ;
53146: GO 53636
// hex := GetHexInfo ( x , y ) ;
53148: LD_ADDR_VAR 0 15
53152: PUSH
53153: LD_VAR 0 3
53157: PPUSH
53158: LD_VAR 0 4
53162: PPUSH
53163: CALL_OW 546
53167: ST_TO_ADDR
// if hex [ 1 ] then
53168: LD_VAR 0 15
53172: PUSH
53173: LD_INT 1
53175: ARRAY
53176: IFFALSE 53180
// exit ;
53178: GO 53636
// height := hex [ 2 ] ;
53180: LD_ADDR_VAR 0 13
53184: PUSH
53185: LD_VAR 0 15
53189: PUSH
53190: LD_INT 2
53192: ARRAY
53193: ST_TO_ADDR
// for i = 1 to hexes do
53194: LD_ADDR_VAR 0 7
53198: PUSH
53199: DOUBLE
53200: LD_INT 1
53202: DEC
53203: ST_TO_ADDR
53204: LD_VAR 0 12
53208: PUSH
53209: FOR_TO
53210: IFFALSE 53540
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53212: LD_VAR 0 12
53216: PUSH
53217: LD_VAR 0 7
53221: ARRAY
53222: PUSH
53223: LD_INT 1
53225: ARRAY
53226: PPUSH
53227: LD_VAR 0 12
53231: PUSH
53232: LD_VAR 0 7
53236: ARRAY
53237: PUSH
53238: LD_INT 2
53240: ARRAY
53241: PPUSH
53242: CALL_OW 488
53246: NOT
53247: PUSH
53248: LD_VAR 0 12
53252: PUSH
53253: LD_VAR 0 7
53257: ARRAY
53258: PUSH
53259: LD_INT 1
53261: ARRAY
53262: PPUSH
53263: LD_VAR 0 12
53267: PUSH
53268: LD_VAR 0 7
53272: ARRAY
53273: PUSH
53274: LD_INT 2
53276: ARRAY
53277: PPUSH
53278: CALL_OW 428
53282: PUSH
53283: LD_INT 0
53285: GREATER
53286: OR
53287: PUSH
53288: LD_VAR 0 12
53292: PUSH
53293: LD_VAR 0 7
53297: ARRAY
53298: PUSH
53299: LD_INT 1
53301: ARRAY
53302: PPUSH
53303: LD_VAR 0 12
53307: PUSH
53308: LD_VAR 0 7
53312: ARRAY
53313: PUSH
53314: LD_INT 2
53316: ARRAY
53317: PPUSH
53318: CALL_OW 351
53322: OR
53323: IFFALSE 53329
// exit ;
53325: POP
53326: POP
53327: GO 53636
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53329: LD_ADDR_VAR 0 8
53333: PUSH
53334: LD_VAR 0 12
53338: PUSH
53339: LD_VAR 0 7
53343: ARRAY
53344: PUSH
53345: LD_INT 1
53347: ARRAY
53348: PPUSH
53349: LD_VAR 0 12
53353: PUSH
53354: LD_VAR 0 7
53358: ARRAY
53359: PUSH
53360: LD_INT 2
53362: ARRAY
53363: PPUSH
53364: CALL_OW 546
53368: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53369: LD_VAR 0 8
53373: PUSH
53374: LD_INT 1
53376: ARRAY
53377: PUSH
53378: LD_VAR 0 8
53382: PUSH
53383: LD_INT 2
53385: ARRAY
53386: PUSH
53387: LD_VAR 0 13
53391: PUSH
53392: LD_INT 2
53394: PLUS
53395: GREATER
53396: OR
53397: PUSH
53398: LD_VAR 0 8
53402: PUSH
53403: LD_INT 2
53405: ARRAY
53406: PUSH
53407: LD_VAR 0 13
53411: PUSH
53412: LD_INT 2
53414: MINUS
53415: LESS
53416: OR
53417: PUSH
53418: LD_VAR 0 8
53422: PUSH
53423: LD_INT 3
53425: ARRAY
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: LD_INT 8
53432: PUSH
53433: LD_INT 9
53435: PUSH
53436: LD_INT 10
53438: PUSH
53439: LD_INT 11
53441: PUSH
53442: LD_INT 12
53444: PUSH
53445: LD_INT 13
53447: PUSH
53448: LD_INT 16
53450: PUSH
53451: LD_INT 17
53453: PUSH
53454: LD_INT 18
53456: PUSH
53457: LD_INT 19
53459: PUSH
53460: LD_INT 20
53462: PUSH
53463: LD_INT 21
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: IN
53481: NOT
53482: OR
53483: PUSH
53484: LD_VAR 0 8
53488: PUSH
53489: LD_INT 5
53491: ARRAY
53492: NOT
53493: OR
53494: PUSH
53495: LD_VAR 0 8
53499: PUSH
53500: LD_INT 6
53502: ARRAY
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: LD_INT 2
53509: PUSH
53510: LD_INT 7
53512: PUSH
53513: LD_INT 9
53515: PUSH
53516: LD_INT 10
53518: PUSH
53519: LD_INT 11
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: IN
53530: NOT
53531: OR
53532: IFFALSE 53538
// exit ;
53534: POP
53535: POP
53536: GO 53636
// end ;
53538: GO 53209
53540: POP
53541: POP
// side := GetSide ( depot ) ;
53542: LD_ADDR_VAR 0 9
53546: PUSH
53547: LD_VAR 0 1
53551: PPUSH
53552: CALL_OW 255
53556: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53557: LD_VAR 0 9
53561: PPUSH
53562: LD_VAR 0 3
53566: PPUSH
53567: LD_VAR 0 4
53571: PPUSH
53572: LD_INT 20
53574: PPUSH
53575: CALL 46290 0 4
53579: PUSH
53580: LD_INT 4
53582: ARRAY
53583: IFFALSE 53587
// exit ;
53585: GO 53636
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53587: LD_VAR 0 2
53591: PUSH
53592: LD_INT 29
53594: PUSH
53595: LD_INT 30
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: IN
53602: PUSH
53603: LD_VAR 0 3
53607: PPUSH
53608: LD_VAR 0 4
53612: PPUSH
53613: LD_VAR 0 9
53617: PPUSH
53618: CALL_OW 440
53622: NOT
53623: AND
53624: IFFALSE 53628
// exit ;
53626: GO 53636
// result := true ;
53628: LD_ADDR_VAR 0 6
53632: PUSH
53633: LD_INT 1
53635: ST_TO_ADDR
// end ;
53636: LD_VAR 0 6
53640: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53641: LD_INT 0
53643: PPUSH
53644: PPUSH
53645: PPUSH
53646: PPUSH
53647: PPUSH
53648: PPUSH
53649: PPUSH
53650: PPUSH
53651: PPUSH
53652: PPUSH
53653: PPUSH
53654: PPUSH
53655: PPUSH
53656: PPUSH
53657: PPUSH
53658: PPUSH
53659: PPUSH
53660: PPUSH
53661: PPUSH
53662: PPUSH
53663: PPUSH
53664: PPUSH
53665: PPUSH
53666: PPUSH
53667: PPUSH
53668: PPUSH
53669: PPUSH
53670: PPUSH
53671: PPUSH
53672: PPUSH
53673: PPUSH
53674: PPUSH
53675: PPUSH
53676: PPUSH
53677: PPUSH
53678: PPUSH
53679: PPUSH
53680: PPUSH
53681: PPUSH
53682: PPUSH
53683: PPUSH
53684: PPUSH
53685: PPUSH
53686: PPUSH
53687: PPUSH
53688: PPUSH
53689: PPUSH
53690: PPUSH
53691: PPUSH
53692: PPUSH
53693: PPUSH
53694: PPUSH
53695: PPUSH
53696: PPUSH
53697: PPUSH
53698: PPUSH
53699: PPUSH
53700: PPUSH
// result = [ ] ;
53701: LD_ADDR_VAR 0 7
53705: PUSH
53706: EMPTY
53707: ST_TO_ADDR
// temp_list = [ ] ;
53708: LD_ADDR_VAR 0 9
53712: PUSH
53713: EMPTY
53714: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53715: LD_VAR 0 4
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: LD_INT 2
53728: PUSH
53729: LD_INT 3
53731: PUSH
53732: LD_INT 4
53734: PUSH
53735: LD_INT 5
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: IN
53746: NOT
53747: PUSH
53748: LD_VAR 0 1
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: LD_INT 1
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: IN
53763: PUSH
53764: LD_VAR 0 5
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: LD_INT 2
53774: PUSH
53775: LD_INT 3
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: LIST
53782: IN
53783: NOT
53784: AND
53785: OR
53786: IFFALSE 53790
// exit ;
53788: GO 72181
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53790: LD_VAR 0 1
53794: PUSH
53795: LD_INT 6
53797: PUSH
53798: LD_INT 7
53800: PUSH
53801: LD_INT 8
53803: PUSH
53804: LD_INT 13
53806: PUSH
53807: LD_INT 12
53809: PUSH
53810: LD_INT 15
53812: PUSH
53813: LD_INT 11
53815: PUSH
53816: LD_INT 14
53818: PUSH
53819: LD_INT 10
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: IN
53833: IFFALSE 53843
// btype = b_lab ;
53835: LD_ADDR_VAR 0 1
53839: PUSH
53840: LD_INT 6
53842: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53843: LD_VAR 0 6
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: LD_INT 1
53853: PUSH
53854: LD_INT 2
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: LIST
53861: IN
53862: NOT
53863: PUSH
53864: LD_VAR 0 1
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: LD_INT 2
53877: PUSH
53878: LD_INT 3
53880: PUSH
53881: LD_INT 6
53883: PUSH
53884: LD_INT 36
53886: PUSH
53887: LD_INT 4
53889: PUSH
53890: LD_INT 5
53892: PUSH
53893: LD_INT 31
53895: PUSH
53896: LD_INT 32
53898: PUSH
53899: LD_INT 33
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: IN
53915: NOT
53916: PUSH
53917: LD_VAR 0 6
53921: PUSH
53922: LD_INT 1
53924: EQUAL
53925: AND
53926: OR
53927: PUSH
53928: LD_VAR 0 1
53932: PUSH
53933: LD_INT 2
53935: PUSH
53936: LD_INT 3
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: IN
53943: NOT
53944: PUSH
53945: LD_VAR 0 6
53949: PUSH
53950: LD_INT 2
53952: EQUAL
53953: AND
53954: OR
53955: IFFALSE 53965
// mode = 0 ;
53957: LD_ADDR_VAR 0 6
53961: PUSH
53962: LD_INT 0
53964: ST_TO_ADDR
// case mode of 0 :
53965: LD_VAR 0 6
53969: PUSH
53970: LD_INT 0
53972: DOUBLE
53973: EQUAL
53974: IFTRUE 53978
53976: GO 65431
53978: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53979: LD_ADDR_VAR 0 11
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: LD_INT 1
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: LD_INT 1
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 1
54037: NEG
54038: PUSH
54039: LD_INT 0
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 1
54048: NEG
54049: PUSH
54050: LD_INT 1
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 1
54060: NEG
54061: PUSH
54062: LD_INT 2
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: LD_INT 2
54075: NEG
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: LD_INT 1
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: LD_INT 2
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: LD_INT 2
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: LD_INT 1
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: LD_INT 3
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: LD_INT 3
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 1
54145: NEG
54146: PUSH
54147: LD_INT 2
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54172: LD_ADDR_VAR 0 12
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 0
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: LD_INT 1
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: LD_INT 1
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 1
54230: NEG
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: NEG
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 2
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 2
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 2
54295: NEG
54296: PUSH
54297: LD_INT 0
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 2
54306: NEG
54307: PUSH
54308: LD_INT 1
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 2
54318: NEG
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 3
54329: NEG
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 3
54340: NEG
54341: PUSH
54342: LD_INT 1
54344: NEG
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54368: LD_ADDR_VAR 0 13
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: LD_INT 0
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 0
54385: PUSH
54386: LD_INT 1
54388: NEG
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 1
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: LD_INT 1
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: LD_INT 0
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 1
54437: NEG
54438: PUSH
54439: LD_INT 1
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: NEG
54450: PUSH
54451: LD_INT 2
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 2
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 2
54471: PUSH
54472: LD_INT 2
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 1
54481: PUSH
54482: LD_INT 2
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 2
54491: NEG
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 2
54503: NEG
54504: PUSH
54505: LD_INT 2
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 2
54515: NEG
54516: PUSH
54517: LD_INT 3
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 3
54527: NEG
54528: PUSH
54529: LD_INT 2
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 3
54539: NEG
54540: PUSH
54541: LD_INT 3
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54567: LD_ADDR_VAR 0 14
54571: PUSH
54572: LD_INT 0
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: LD_INT 1
54587: NEG
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 1
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: PUSH
54606: LD_INT 1
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 0
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: NEG
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 1
54636: NEG
54637: PUSH
54638: LD_INT 1
54640: NEG
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 1
54648: NEG
54649: PUSH
54650: LD_INT 2
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: LD_INT 2
54663: NEG
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 1
54671: PUSH
54672: LD_INT 1
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: LD_INT 2
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: LD_INT 2
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: NEG
54714: PUSH
54715: LD_INT 3
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: LD_INT 3
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: LD_INT 2
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54763: LD_ADDR_VAR 0 15
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: LD_INT 0
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: LD_INT 1
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: NEG
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 1
54832: NEG
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 2
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 2
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: LD_INT 1
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 2
54886: NEG
54887: PUSH
54888: LD_INT 0
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 2
54897: NEG
54898: PUSH
54899: LD_INT 1
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 2
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 3
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 3
54930: PUSH
54931: LD_INT 1
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54956: LD_ADDR_VAR 0 16
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: LD_INT 0
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: LD_INT 1
54976: NEG
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 1
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: LD_INT 1
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 1
55037: NEG
55038: PUSH
55039: LD_INT 2
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 2
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 2
55059: PUSH
55060: LD_INT 2
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: PUSH
55070: LD_INT 2
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 2
55079: NEG
55080: PUSH
55081: LD_INT 1
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 2
55091: NEG
55092: PUSH
55093: LD_INT 2
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 3
55103: PUSH
55104: LD_INT 2
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 3
55113: PUSH
55114: LD_INT 3
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 2
55123: PUSH
55124: LD_INT 3
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55149: LD_ADDR_VAR 0 17
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: LD_INT 1
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 1
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: NEG
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: PUSH
55232: LD_INT 2
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: LD_INT 2
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: LD_INT 1
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 2
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 2
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 2
55284: PUSH
55285: LD_INT 2
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: LD_INT 2
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: LD_INT 2
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 1
55314: NEG
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 2
55325: NEG
55326: PUSH
55327: LD_INT 0
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 2
55336: NEG
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 2
55348: NEG
55349: PUSH
55350: LD_INT 2
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55379: LD_ADDR_VAR 0 18
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 0
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 1
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: LD_INT 1
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: LD_INT 1
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 1
55437: NEG
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 1
55448: NEG
55449: PUSH
55450: LD_INT 1
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: NEG
55461: PUSH
55462: LD_INT 2
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: LD_INT 2
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: LD_INT 1
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 2
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 2
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 2
55514: PUSH
55515: LD_INT 2
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 1
55524: PUSH
55525: LD_INT 2
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: LD_INT 2
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 1
55544: NEG
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 2
55555: NEG
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 2
55566: NEG
55567: PUSH
55568: LD_INT 1
55570: NEG
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 2
55578: NEG
55579: PUSH
55580: LD_INT 2
55582: NEG
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55609: LD_ADDR_VAR 0 19
55613: PUSH
55614: LD_INT 0
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 1
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 1
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: LD_INT 1
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 1
55667: NEG
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 1
55690: NEG
55691: PUSH
55692: LD_INT 2
55694: NEG
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: LD_INT 2
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: LD_INT 1
55716: NEG
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 2
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 2
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 2
55744: PUSH
55745: LD_INT 2
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: LD_INT 2
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: LD_INT 2
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 1
55774: NEG
55775: PUSH
55776: LD_INT 1
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 2
55785: NEG
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 2
55796: NEG
55797: PUSH
55798: LD_INT 1
55800: NEG
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 2
55808: NEG
55809: PUSH
55810: LD_INT 2
55812: NEG
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55839: LD_ADDR_VAR 0 20
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 1
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: LD_INT 1
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: LD_INT 0
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 1
55908: NEG
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: NEG
55921: PUSH
55922: LD_INT 2
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: LD_INT 2
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: LD_INT 1
55946: NEG
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: LD_INT 0
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 2
55964: PUSH
55965: LD_INT 1
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 2
55974: PUSH
55975: LD_INT 2
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: LD_INT 2
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: LD_INT 2
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 1
56004: NEG
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 2
56015: NEG
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 2
56026: NEG
56027: PUSH
56028: LD_INT 1
56030: NEG
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 2
56038: NEG
56039: PUSH
56040: LD_INT 2
56042: NEG
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56069: LD_ADDR_VAR 0 21
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: LD_INT 0
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: LD_INT 1
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 1
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: LD_INT 1
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 1
56138: NEG
56139: PUSH
56140: LD_INT 1
56142: NEG
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 1
56150: NEG
56151: PUSH
56152: LD_INT 2
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: LD_INT 2
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 2
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 2
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 2
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: LD_INT 2
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: LD_INT 1
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 2
56245: NEG
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 2
56256: NEG
56257: PUSH
56258: LD_INT 1
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 2
56268: NEG
56269: PUSH
56270: LD_INT 2
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56299: LD_ADDR_VAR 0 22
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: LD_INT 1
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: LD_INT 1
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: LD_INT 1
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 1
56357: NEG
56358: PUSH
56359: LD_INT 0
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: LD_INT 1
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 1
56380: NEG
56381: PUSH
56382: LD_INT 2
56384: NEG
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: LD_INT 2
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: LD_INT 1
56406: NEG
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 2
56414: PUSH
56415: LD_INT 0
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 2
56424: PUSH
56425: LD_INT 1
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 2
56434: PUSH
56435: LD_INT 2
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: PUSH
56445: LD_INT 2
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: LD_INT 2
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: LD_INT 1
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 2
56475: NEG
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 2
56486: NEG
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 2
56498: NEG
56499: PUSH
56500: LD_INT 2
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56529: LD_ADDR_VAR 0 23
56533: PUSH
56534: LD_INT 0
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: NEG
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: NEG
56611: PUSH
56612: LD_INT 2
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 0
56622: PUSH
56623: LD_INT 2
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 1
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 2
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 2
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 2
56664: PUSH
56665: LD_INT 2
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 1
56674: PUSH
56675: LD_INT 2
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: LD_INT 2
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: LD_INT 1
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 2
56705: NEG
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 2
56716: NEG
56717: PUSH
56718: LD_INT 1
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 2
56728: NEG
56729: PUSH
56730: LD_INT 2
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 2
56740: NEG
56741: PUSH
56742: LD_INT 3
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 1
56752: NEG
56753: PUSH
56754: LD_INT 3
56756: NEG
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 1
56764: PUSH
56765: LD_INT 2
56767: NEG
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 2
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56809: LD_ADDR_VAR 0 24
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: LD_INT 1
56829: NEG
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: PUSH
56838: LD_INT 0
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: LD_INT 1
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 1
56867: NEG
56868: PUSH
56869: LD_INT 0
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 1
56878: NEG
56879: PUSH
56880: LD_INT 1
56882: NEG
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: LD_INT 2
56894: NEG
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 0
56902: PUSH
56903: LD_INT 2
56905: NEG
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: LD_INT 1
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 2
56924: PUSH
56925: LD_INT 0
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 2
56934: PUSH
56935: LD_INT 1
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 2
56944: PUSH
56945: LD_INT 2
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 1
56954: PUSH
56955: LD_INT 2
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: LD_INT 2
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 1
56974: NEG
56975: PUSH
56976: LD_INT 1
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 2
56985: NEG
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 2
56996: NEG
56997: PUSH
56998: LD_INT 1
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 2
57008: NEG
57009: PUSH
57010: LD_INT 2
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 1
57020: PUSH
57021: LD_INT 2
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 2
57031: PUSH
57032: LD_INT 1
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 3
57042: PUSH
57043: LD_INT 1
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 3
57052: PUSH
57053: LD_INT 2
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57085: LD_ADDR_VAR 0 25
57089: PUSH
57090: LD_INT 0
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: LD_INT 1
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 1
57123: PUSH
57124: LD_INT 1
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 0
57133: PUSH
57134: LD_INT 1
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: NEG
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: LD_INT 2
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: LD_INT 2
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: LD_INT 1
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 2
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 2
57210: PUSH
57211: LD_INT 1
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 2
57220: PUSH
57221: LD_INT 2
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: PUSH
57231: LD_INT 2
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: LD_INT 2
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: LD_INT 1
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 2
57261: NEG
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 2
57272: NEG
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 2
57284: NEG
57285: PUSH
57286: LD_INT 2
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 3
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 3
57306: PUSH
57307: LD_INT 2
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 2
57316: PUSH
57317: LD_INT 3
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: LD_INT 3
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57359: LD_ADDR_VAR 0 26
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 1
57387: PUSH
57388: LD_INT 0
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 1
57397: PUSH
57398: LD_INT 1
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 1
57417: NEG
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 1
57428: NEG
57429: PUSH
57430: LD_INT 1
57432: NEG
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 1
57440: NEG
57441: PUSH
57442: LD_INT 2
57444: NEG
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: LD_INT 2
57455: NEG
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 1
57463: PUSH
57464: LD_INT 1
57466: NEG
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 2
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 2
57484: PUSH
57485: LD_INT 1
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 2
57494: PUSH
57495: LD_INT 2
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 1
57504: PUSH
57505: LD_INT 2
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: LD_INT 2
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 1
57524: NEG
57525: PUSH
57526: LD_INT 1
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 2
57535: NEG
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 2
57546: NEG
57547: PUSH
57548: LD_INT 1
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 2
57558: NEG
57559: PUSH
57560: LD_INT 2
57562: NEG
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 2
57570: PUSH
57571: LD_INT 3
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 1
57580: PUSH
57581: LD_INT 3
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 1
57590: NEG
57591: PUSH
57592: LD_INT 2
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: LD_INT 1
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57635: LD_ADDR_VAR 0 27
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 0
57652: PUSH
57653: LD_INT 1
57655: NEG
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: LD_INT 1
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 1
57693: NEG
57694: PUSH
57695: LD_INT 0
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 1
57704: NEG
57705: PUSH
57706: LD_INT 1
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 1
57716: NEG
57717: PUSH
57718: LD_INT 2
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 0
57728: PUSH
57729: LD_INT 2
57731: NEG
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 1
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 2
57750: PUSH
57751: LD_INT 0
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 2
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 2
57770: PUSH
57771: LD_INT 2
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 1
57780: PUSH
57781: LD_INT 2
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: LD_INT 2
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 1
57800: NEG
57801: PUSH
57802: LD_INT 1
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 2
57811: NEG
57812: PUSH
57813: LD_INT 0
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 2
57822: NEG
57823: PUSH
57824: LD_INT 1
57826: NEG
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 2
57834: NEG
57835: PUSH
57836: LD_INT 2
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: LD_INT 2
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 2
57857: NEG
57858: PUSH
57859: LD_INT 1
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 3
57868: NEG
57869: PUSH
57870: LD_INT 1
57872: NEG
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 3
57880: NEG
57881: PUSH
57882: LD_INT 2
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57915: LD_ADDR_VAR 0 28
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: LD_INT 0
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: LD_INT 1
57935: NEG
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 1
57943: PUSH
57944: LD_INT 0
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 1
57953: PUSH
57954: LD_INT 1
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 0
57963: PUSH
57964: LD_INT 1
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 1
57973: NEG
57974: PUSH
57975: LD_INT 0
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 1
57984: NEG
57985: PUSH
57986: LD_INT 1
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 1
57996: NEG
57997: PUSH
57998: LD_INT 2
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 0
58008: PUSH
58009: LD_INT 2
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: LD_INT 1
58022: NEG
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 2
58030: PUSH
58031: LD_INT 0
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 2
58040: PUSH
58041: LD_INT 1
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 2
58050: PUSH
58051: LD_INT 2
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: LD_INT 2
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 0
58070: PUSH
58071: LD_INT 2
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: LD_INT 1
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: LD_INT 0
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 2
58102: NEG
58103: PUSH
58104: LD_INT 1
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 2
58114: NEG
58115: PUSH
58116: LD_INT 2
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 2
58126: NEG
58127: PUSH
58128: LD_INT 3
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 1
58138: NEG
58139: PUSH
58140: LD_INT 3
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 3
58150: NEG
58151: PUSH
58152: LD_INT 1
58154: NEG
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 3
58162: NEG
58163: PUSH
58164: LD_INT 2
58166: NEG
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58197: LD_ADDR_VAR 0 29
58201: PUSH
58202: LD_INT 0
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 0
58214: PUSH
58215: LD_INT 1
58217: NEG
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 1
58225: PUSH
58226: LD_INT 0
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 1
58235: PUSH
58236: LD_INT 1
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 0
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 1
58255: NEG
58256: PUSH
58257: LD_INT 0
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: NEG
58267: PUSH
58268: LD_INT 1
58270: NEG
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: LD_INT 2
58282: NEG
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 0
58290: PUSH
58291: LD_INT 2
58293: NEG
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 1
58301: PUSH
58302: LD_INT 1
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 2
58312: PUSH
58313: LD_INT 0
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 2
58322: PUSH
58323: LD_INT 1
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 1
58332: PUSH
58333: LD_INT 2
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 0
58342: PUSH
58343: LD_INT 2
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: NEG
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 2
58363: NEG
58364: PUSH
58365: LD_INT 1
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 2
58375: NEG
58376: PUSH
58377: LD_INT 2
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 2
58387: NEG
58388: PUSH
58389: LD_INT 3
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 2
58399: PUSH
58400: LD_INT 1
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 3
58410: PUSH
58411: LD_INT 1
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 1
58420: PUSH
58421: LD_INT 3
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 1
58430: NEG
58431: PUSH
58432: LD_INT 2
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 3
58441: NEG
58442: PUSH
58443: LD_INT 2
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58476: LD_ADDR_VAR 0 30
58480: PUSH
58481: LD_INT 0
58483: PUSH
58484: LD_INT 0
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 0
58493: PUSH
58494: LD_INT 1
58496: NEG
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: LD_INT 0
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 1
58514: PUSH
58515: LD_INT 1
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 0
58524: PUSH
58525: LD_INT 1
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 1
58534: NEG
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 1
58545: NEG
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 1
58557: NEG
58558: PUSH
58559: LD_INT 2
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 0
58569: PUSH
58570: LD_INT 2
58572: NEG
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: LD_INT 1
58583: NEG
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 2
58591: PUSH
58592: LD_INT 0
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 2
58601: PUSH
58602: LD_INT 1
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 2
58611: PUSH
58612: LD_INT 2
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 1
58621: PUSH
58622: LD_INT 2
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 1
58631: NEG
58632: PUSH
58633: LD_INT 1
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 2
58642: NEG
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 2
58653: NEG
58654: PUSH
58655: LD_INT 1
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 1
58665: NEG
58666: PUSH
58667: LD_INT 3
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 1
58677: PUSH
58678: LD_INT 2
58680: NEG
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 3
58688: PUSH
58689: LD_INT 2
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 2
58698: PUSH
58699: LD_INT 3
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 2
58708: NEG
58709: PUSH
58710: LD_INT 1
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 3
58719: NEG
58720: PUSH
58721: LD_INT 1
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58754: LD_ADDR_VAR 0 31
58758: PUSH
58759: LD_INT 0
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 0
58771: PUSH
58772: LD_INT 1
58774: NEG
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 1
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 1
58792: PUSH
58793: LD_INT 1
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 0
58802: PUSH
58803: LD_INT 1
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 1
58812: NEG
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 1
58823: NEG
58824: PUSH
58825: LD_INT 1
58827: NEG
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 1
58835: NEG
58836: PUSH
58837: LD_INT 2
58839: NEG
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 1
58847: PUSH
58848: LD_INT 1
58850: NEG
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 2
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 2
58868: PUSH
58869: LD_INT 1
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 2
58878: PUSH
58879: LD_INT 2
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 1
58888: PUSH
58889: LD_INT 2
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: LD_INT 2
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 1
58908: NEG
58909: PUSH
58910: LD_INT 1
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 2
58919: NEG
58920: PUSH
58921: LD_INT 1
58923: NEG
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 2
58931: NEG
58932: PUSH
58933: LD_INT 2
58935: NEG
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 2
58943: NEG
58944: PUSH
58945: LD_INT 3
58947: NEG
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 2
58955: PUSH
58956: LD_INT 1
58958: NEG
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 3
58966: PUSH
58967: LD_INT 1
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: LD_INT 3
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 1
58986: NEG
58987: PUSH
58988: LD_INT 2
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 3
58997: NEG
58998: PUSH
58999: LD_INT 2
59001: NEG
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59032: LD_ADDR_VAR 0 32
59036: PUSH
59037: LD_INT 0
59039: PUSH
59040: LD_INT 0
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 0
59049: PUSH
59050: LD_INT 1
59052: NEG
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 1
59060: PUSH
59061: LD_INT 0
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 1
59070: PUSH
59071: LD_INT 1
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 0
59080: PUSH
59081: LD_INT 1
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 1
59090: NEG
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 1
59101: NEG
59102: PUSH
59103: LD_INT 1
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 1
59113: NEG
59114: PUSH
59115: LD_INT 2
59117: NEG
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 0
59125: PUSH
59126: LD_INT 2
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 1
59136: PUSH
59137: LD_INT 1
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 2
59147: PUSH
59148: LD_INT 1
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 2
59157: PUSH
59158: LD_INT 2
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 1
59167: PUSH
59168: LD_INT 2
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 0
59177: PUSH
59178: LD_INT 2
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 1
59187: NEG
59188: PUSH
59189: LD_INT 1
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 2
59198: NEG
59199: PUSH
59200: LD_INT 0
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 2
59209: NEG
59210: PUSH
59211: LD_INT 1
59213: NEG
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 1
59221: NEG
59222: PUSH
59223: LD_INT 3
59225: NEG
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 1
59233: PUSH
59234: LD_INT 2
59236: NEG
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 3
59244: PUSH
59245: LD_INT 2
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 2
59254: PUSH
59255: LD_INT 3
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 2
59264: NEG
59265: PUSH
59266: LD_INT 1
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 3
59275: NEG
59276: PUSH
59277: LD_INT 1
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59310: LD_ADDR_VAR 0 33
59314: PUSH
59315: LD_INT 0
59317: PUSH
59318: LD_INT 0
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: LD_INT 1
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 1
59338: PUSH
59339: LD_INT 0
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: LD_INT 1
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 0
59358: PUSH
59359: LD_INT 1
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 1
59368: NEG
59369: PUSH
59370: LD_INT 0
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 1
59379: NEG
59380: PUSH
59381: LD_INT 1
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 1
59391: NEG
59392: PUSH
59393: LD_INT 2
59395: NEG
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 1
59403: PUSH
59404: LD_INT 1
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 2
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 2
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 1
59434: PUSH
59435: LD_INT 2
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: LD_INT 2
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 1
59454: NEG
59455: PUSH
59456: LD_INT 1
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 2
59465: NEG
59466: PUSH
59467: LD_INT 0
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 2
59476: NEG
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 2
59488: NEG
59489: PUSH
59490: LD_INT 2
59492: NEG
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 2
59500: NEG
59501: PUSH
59502: LD_INT 3
59504: NEG
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 2
59512: PUSH
59513: LD_INT 1
59515: NEG
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 3
59523: PUSH
59524: LD_INT 1
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 1
59533: PUSH
59534: LD_INT 3
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 1
59543: NEG
59544: PUSH
59545: LD_INT 2
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 3
59554: NEG
59555: PUSH
59556: LD_INT 2
59558: NEG
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59589: LD_ADDR_VAR 0 34
59593: PUSH
59594: LD_INT 0
59596: PUSH
59597: LD_INT 0
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 0
59606: PUSH
59607: LD_INT 1
59609: NEG
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 1
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 1
59627: PUSH
59628: LD_INT 1
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 0
59637: PUSH
59638: LD_INT 1
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 1
59647: NEG
59648: PUSH
59649: LD_INT 0
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: LD_INT 1
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 1
59670: NEG
59671: PUSH
59672: LD_INT 2
59674: NEG
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 0
59682: PUSH
59683: LD_INT 2
59685: NEG
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 1
59693: PUSH
59694: LD_INT 1
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 2
59704: PUSH
59705: LD_INT 1
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 2
59714: PUSH
59715: LD_INT 2
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 1
59724: PUSH
59725: LD_INT 2
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 1
59734: NEG
59735: PUSH
59736: LD_INT 1
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 2
59745: NEG
59746: PUSH
59747: LD_INT 0
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 2
59756: NEG
59757: PUSH
59758: LD_INT 1
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 2
59768: NEG
59769: PUSH
59770: LD_INT 2
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 1
59780: NEG
59781: PUSH
59782: LD_INT 3
59784: NEG
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 1
59792: PUSH
59793: LD_INT 2
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 3
59803: PUSH
59804: LD_INT 2
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 2
59813: PUSH
59814: LD_INT 3
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 2
59823: NEG
59824: PUSH
59825: LD_INT 1
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 3
59834: NEG
59835: PUSH
59836: LD_INT 1
59838: NEG
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59869: LD_ADDR_VAR 0 35
59873: PUSH
59874: LD_INT 0
59876: PUSH
59877: LD_INT 0
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: LD_INT 1
59889: NEG
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 1
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 1
59907: PUSH
59908: LD_INT 1
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: LD_INT 1
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 1
59927: NEG
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 1
59938: NEG
59939: PUSH
59940: LD_INT 1
59942: NEG
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 2
59950: PUSH
59951: LD_INT 1
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 2
59960: NEG
59961: PUSH
59962: LD_INT 1
59964: NEG
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59981: LD_ADDR_VAR 0 36
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: LD_INT 0
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 0
59998: PUSH
59999: LD_INT 1
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 1
60009: PUSH
60010: LD_INT 0
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 1
60019: PUSH
60020: LD_INT 1
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 0
60029: PUSH
60030: LD_INT 1
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 1
60039: NEG
60040: PUSH
60041: LD_INT 0
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 1
60050: NEG
60051: PUSH
60052: LD_INT 1
60054: NEG
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 1
60062: NEG
60063: PUSH
60064: LD_INT 2
60066: NEG
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 1
60074: PUSH
60075: LD_INT 2
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60093: LD_ADDR_VAR 0 37
60097: PUSH
60098: LD_INT 0
60100: PUSH
60101: LD_INT 0
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 0
60110: PUSH
60111: LD_INT 1
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 1
60121: PUSH
60122: LD_INT 0
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 1
60131: PUSH
60132: LD_INT 1
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 0
60141: PUSH
60142: LD_INT 1
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 1
60151: NEG
60152: PUSH
60153: LD_INT 0
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 1
60162: NEG
60163: PUSH
60164: LD_INT 1
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 1
60174: PUSH
60175: LD_INT 1
60177: NEG
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 1
60185: NEG
60186: PUSH
60187: LD_INT 1
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60205: LD_ADDR_VAR 0 38
60209: PUSH
60210: LD_INT 0
60212: PUSH
60213: LD_INT 0
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 0
60222: PUSH
60223: LD_INT 1
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 1
60233: PUSH
60234: LD_INT 0
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 1
60243: PUSH
60244: LD_INT 1
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 0
60253: PUSH
60254: LD_INT 1
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 1
60263: NEG
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 1
60274: NEG
60275: PUSH
60276: LD_INT 1
60278: NEG
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 2
60286: PUSH
60287: LD_INT 1
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 2
60296: NEG
60297: PUSH
60298: LD_INT 1
60300: NEG
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60317: LD_ADDR_VAR 0 39
60321: PUSH
60322: LD_INT 0
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 0
60334: PUSH
60335: LD_INT 1
60337: NEG
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 1
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 1
60355: PUSH
60356: LD_INT 1
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 0
60365: PUSH
60366: LD_INT 1
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 1
60375: NEG
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 1
60386: NEG
60387: PUSH
60388: LD_INT 1
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 1
60398: NEG
60399: PUSH
60400: LD_INT 2
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 1
60410: PUSH
60411: LD_INT 2
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60429: LD_ADDR_VAR 0 40
60433: PUSH
60434: LD_INT 0
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 0
60446: PUSH
60447: LD_INT 1
60449: NEG
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 1
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 1
60467: PUSH
60468: LD_INT 1
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 0
60477: PUSH
60478: LD_INT 1
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 1
60487: NEG
60488: PUSH
60489: LD_INT 0
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 1
60498: NEG
60499: PUSH
60500: LD_INT 1
60502: NEG
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 1
60510: PUSH
60511: LD_INT 1
60513: NEG
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 1
60521: NEG
60522: PUSH
60523: LD_INT 1
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60541: LD_ADDR_VAR 0 41
60545: PUSH
60546: LD_INT 0
60548: PUSH
60549: LD_INT 0
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 0
60558: PUSH
60559: LD_INT 1
60561: NEG
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 1
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 1
60579: PUSH
60580: LD_INT 1
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 0
60589: PUSH
60590: LD_INT 1
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 1
60599: NEG
60600: PUSH
60601: LD_INT 0
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 1
60610: NEG
60611: PUSH
60612: LD_INT 1
60614: NEG
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 1
60622: NEG
60623: PUSH
60624: LD_INT 2
60626: NEG
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 1
60634: PUSH
60635: LD_INT 1
60637: NEG
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 2
60645: PUSH
60646: LD_INT 0
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 2
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 2
60665: PUSH
60666: LD_INT 2
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 1
60675: PUSH
60676: LD_INT 2
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 1
60685: NEG
60686: PUSH
60687: LD_INT 1
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 2
60696: NEG
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 2
60707: NEG
60708: PUSH
60709: LD_INT 1
60711: NEG
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 2
60719: NEG
60720: PUSH
60721: LD_INT 2
60723: NEG
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 2
60731: NEG
60732: PUSH
60733: LD_INT 3
60735: NEG
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 2
60743: PUSH
60744: LD_INT 1
60746: NEG
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 3
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 3
60764: PUSH
60765: LD_INT 1
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 3
60774: PUSH
60775: LD_INT 2
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 3
60784: PUSH
60785: LD_INT 3
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 2
60794: PUSH
60795: LD_INT 3
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 2
60804: NEG
60805: PUSH
60806: LD_INT 1
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 3
60815: NEG
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 3
60826: NEG
60827: PUSH
60828: LD_INT 1
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 3
60838: NEG
60839: PUSH
60840: LD_INT 2
60842: NEG
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 3
60850: NEG
60851: PUSH
60852: LD_INT 3
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60891: LD_ADDR_VAR 0 42
60895: PUSH
60896: LD_INT 0
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 0
60908: PUSH
60909: LD_INT 1
60911: NEG
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 1
60919: PUSH
60920: LD_INT 0
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: PUSH
60930: LD_INT 1
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 0
60939: PUSH
60940: LD_INT 1
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 1
60949: NEG
60950: PUSH
60951: LD_INT 0
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 1
60960: NEG
60961: PUSH
60962: LD_INT 1
60964: NEG
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 1
60972: NEG
60973: PUSH
60974: LD_INT 2
60976: NEG
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 0
60984: PUSH
60985: LD_INT 2
60987: NEG
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 1
60995: PUSH
60996: LD_INT 1
60998: NEG
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 2
61006: PUSH
61007: LD_INT 1
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 2
61016: PUSH
61017: LD_INT 2
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 1
61026: PUSH
61027: LD_INT 2
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 0
61036: PUSH
61037: LD_INT 2
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 1
61046: NEG
61047: PUSH
61048: LD_INT 1
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 2
61057: NEG
61058: PUSH
61059: LD_INT 1
61061: NEG
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 2
61069: NEG
61070: PUSH
61071: LD_INT 2
61073: NEG
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 2
61081: NEG
61082: PUSH
61083: LD_INT 3
61085: NEG
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 1
61093: NEG
61094: PUSH
61095: LD_INT 3
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 0
61105: PUSH
61106: LD_INT 3
61108: NEG
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 1
61116: PUSH
61117: LD_INT 2
61119: NEG
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 3
61127: PUSH
61128: LD_INT 2
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 3
61137: PUSH
61138: LD_INT 3
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 2
61147: PUSH
61148: LD_INT 3
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 1
61157: PUSH
61158: LD_INT 3
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 0
61167: PUSH
61168: LD_INT 3
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 1
61177: NEG
61178: PUSH
61179: LD_INT 2
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 3
61188: NEG
61189: PUSH
61190: LD_INT 2
61192: NEG
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 3
61200: NEG
61201: PUSH
61202: LD_INT 3
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61241: LD_ADDR_VAR 0 43
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: LD_INT 0
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: LD_INT 1
61261: NEG
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 1
61269: PUSH
61270: LD_INT 0
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 1
61279: PUSH
61280: LD_INT 1
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 0
61289: PUSH
61290: LD_INT 1
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 1
61299: NEG
61300: PUSH
61301: LD_INT 0
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 1
61310: NEG
61311: PUSH
61312: LD_INT 1
61314: NEG
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 1
61322: NEG
61323: PUSH
61324: LD_INT 2
61326: NEG
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: LD_INT 2
61337: NEG
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 1
61345: PUSH
61346: LD_INT 1
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 2
61356: PUSH
61357: LD_INT 0
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 2
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 1
61376: PUSH
61377: LD_INT 2
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 0
61386: PUSH
61387: LD_INT 2
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 1
61396: NEG
61397: PUSH
61398: LD_INT 1
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 2
61407: NEG
61408: PUSH
61409: LD_INT 0
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 2
61418: NEG
61419: PUSH
61420: LD_INT 1
61422: NEG
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 1
61430: NEG
61431: PUSH
61432: LD_INT 3
61434: NEG
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 0
61442: PUSH
61443: LD_INT 3
61445: NEG
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 1
61453: PUSH
61454: LD_INT 2
61456: NEG
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 2
61464: PUSH
61465: LD_INT 1
61467: NEG
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 3
61475: PUSH
61476: LD_INT 0
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 3
61485: PUSH
61486: LD_INT 1
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 1
61495: PUSH
61496: LD_INT 3
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: LD_INT 3
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 1
61515: NEG
61516: PUSH
61517: LD_INT 2
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 2
61526: NEG
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 3
61537: NEG
61538: PUSH
61539: LD_INT 0
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 3
61548: NEG
61549: PUSH
61550: LD_INT 1
61552: NEG
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61589: LD_ADDR_VAR 0 44
61593: PUSH
61594: LD_INT 0
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 0
61606: PUSH
61607: LD_INT 1
61609: NEG
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 1
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 1
61627: PUSH
61628: LD_INT 1
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 0
61637: PUSH
61638: LD_INT 1
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 1
61647: NEG
61648: PUSH
61649: LD_INT 0
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 1
61658: NEG
61659: PUSH
61660: LD_INT 1
61662: NEG
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 1
61670: NEG
61671: PUSH
61672: LD_INT 2
61674: NEG
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 1
61682: PUSH
61683: LD_INT 1
61685: NEG
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 2
61693: PUSH
61694: LD_INT 0
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 2
61703: PUSH
61704: LD_INT 1
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 2
61713: PUSH
61714: LD_INT 2
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 1
61723: PUSH
61724: LD_INT 2
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 1
61733: NEG
61734: PUSH
61735: LD_INT 1
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 2
61744: NEG
61745: PUSH
61746: LD_INT 0
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 2
61755: NEG
61756: PUSH
61757: LD_INT 1
61759: NEG
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 2
61767: NEG
61768: PUSH
61769: LD_INT 2
61771: NEG
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 2
61779: NEG
61780: PUSH
61781: LD_INT 3
61783: NEG
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 2
61791: PUSH
61792: LD_INT 1
61794: NEG
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 3
61802: PUSH
61803: LD_INT 0
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 3
61812: PUSH
61813: LD_INT 1
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 3
61822: PUSH
61823: LD_INT 2
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 3
61832: PUSH
61833: LD_INT 3
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 2
61842: PUSH
61843: LD_INT 3
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 2
61852: NEG
61853: PUSH
61854: LD_INT 1
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 3
61863: NEG
61864: PUSH
61865: LD_INT 0
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 3
61874: NEG
61875: PUSH
61876: LD_INT 1
61878: NEG
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 3
61886: NEG
61887: PUSH
61888: LD_INT 2
61890: NEG
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 3
61898: NEG
61899: PUSH
61900: LD_INT 3
61902: NEG
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61939: LD_ADDR_VAR 0 45
61943: PUSH
61944: LD_INT 0
61946: PUSH
61947: LD_INT 0
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 0
61956: PUSH
61957: LD_INT 1
61959: NEG
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 1
61967: PUSH
61968: LD_INT 0
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 1
61977: PUSH
61978: LD_INT 1
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 0
61987: PUSH
61988: LD_INT 1
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 1
61997: NEG
61998: PUSH
61999: LD_INT 0
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 1
62008: NEG
62009: PUSH
62010: LD_INT 1
62012: NEG
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 1
62020: NEG
62021: PUSH
62022: LD_INT 2
62024: NEG
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 0
62032: PUSH
62033: LD_INT 2
62035: NEG
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 1
62043: PUSH
62044: LD_INT 1
62046: NEG
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 2
62054: PUSH
62055: LD_INT 1
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 2
62064: PUSH
62065: LD_INT 2
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 1
62074: PUSH
62075: LD_INT 2
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 0
62084: PUSH
62085: LD_INT 2
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 1
62094: NEG
62095: PUSH
62096: LD_INT 1
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 2
62105: NEG
62106: PUSH
62107: LD_INT 1
62109: NEG
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 2
62117: NEG
62118: PUSH
62119: LD_INT 2
62121: NEG
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 2
62129: NEG
62130: PUSH
62131: LD_INT 3
62133: NEG
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 1
62141: NEG
62142: PUSH
62143: LD_INT 3
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 0
62153: PUSH
62154: LD_INT 3
62156: NEG
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 1
62164: PUSH
62165: LD_INT 2
62167: NEG
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 3
62175: PUSH
62176: LD_INT 2
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 3
62185: PUSH
62186: LD_INT 3
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 2
62195: PUSH
62196: LD_INT 3
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 1
62205: PUSH
62206: LD_INT 3
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 0
62215: PUSH
62216: LD_INT 3
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 1
62225: NEG
62226: PUSH
62227: LD_INT 2
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 3
62236: NEG
62237: PUSH
62238: LD_INT 2
62240: NEG
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 3
62248: NEG
62249: PUSH
62250: LD_INT 3
62252: NEG
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62289: LD_ADDR_VAR 0 46
62293: PUSH
62294: LD_INT 0
62296: PUSH
62297: LD_INT 0
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 0
62306: PUSH
62307: LD_INT 1
62309: NEG
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 1
62317: PUSH
62318: LD_INT 0
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 1
62327: PUSH
62328: LD_INT 1
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 0
62337: PUSH
62338: LD_INT 1
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 1
62347: NEG
62348: PUSH
62349: LD_INT 0
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 1
62358: NEG
62359: PUSH
62360: LD_INT 1
62362: NEG
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 1
62370: NEG
62371: PUSH
62372: LD_INT 2
62374: NEG
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 0
62382: PUSH
62383: LD_INT 2
62385: NEG
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 1
62393: PUSH
62394: LD_INT 1
62396: NEG
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 2
62404: PUSH
62405: LD_INT 0
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 2
62414: PUSH
62415: LD_INT 1
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 1
62424: PUSH
62425: LD_INT 2
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 0
62434: PUSH
62435: LD_INT 2
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 1
62444: NEG
62445: PUSH
62446: LD_INT 1
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 2
62455: NEG
62456: PUSH
62457: LD_INT 0
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 2
62466: NEG
62467: PUSH
62468: LD_INT 1
62470: NEG
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 1
62478: NEG
62479: PUSH
62480: LD_INT 3
62482: NEG
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 0
62490: PUSH
62491: LD_INT 3
62493: NEG
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 1
62501: PUSH
62502: LD_INT 2
62504: NEG
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 2
62512: PUSH
62513: LD_INT 1
62515: NEG
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 3
62523: PUSH
62524: LD_INT 0
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 3
62533: PUSH
62534: LD_INT 1
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 1
62543: PUSH
62544: LD_INT 3
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 0
62553: PUSH
62554: LD_INT 3
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 1
62563: NEG
62564: PUSH
62565: LD_INT 2
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 2
62574: NEG
62575: PUSH
62576: LD_INT 1
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 3
62585: NEG
62586: PUSH
62587: LD_INT 0
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 3
62596: NEG
62597: PUSH
62598: LD_INT 1
62600: NEG
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62637: LD_ADDR_VAR 0 47
62641: PUSH
62642: LD_INT 0
62644: PUSH
62645: LD_INT 0
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 0
62654: PUSH
62655: LD_INT 1
62657: NEG
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 1
62665: PUSH
62666: LD_INT 0
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 1
62675: PUSH
62676: LD_INT 1
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 0
62685: PUSH
62686: LD_INT 1
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 1
62695: NEG
62696: PUSH
62697: LD_INT 0
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 1
62706: NEG
62707: PUSH
62708: LD_INT 1
62710: NEG
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 1
62718: NEG
62719: PUSH
62720: LD_INT 2
62722: NEG
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 0
62730: PUSH
62731: LD_INT 2
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 1
62741: PUSH
62742: LD_INT 1
62744: NEG
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 2
62752: NEG
62753: PUSH
62754: LD_INT 1
62756: NEG
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 2
62764: NEG
62765: PUSH
62766: LD_INT 2
62768: NEG
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62788: LD_ADDR_VAR 0 48
62792: PUSH
62793: LD_INT 0
62795: PUSH
62796: LD_INT 0
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 0
62805: PUSH
62806: LD_INT 1
62808: NEG
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 1
62816: PUSH
62817: LD_INT 0
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 1
62826: PUSH
62827: LD_INT 1
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 0
62836: PUSH
62837: LD_INT 1
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 1
62846: NEG
62847: PUSH
62848: LD_INT 0
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 1
62857: NEG
62858: PUSH
62859: LD_INT 1
62861: NEG
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 1
62869: NEG
62870: PUSH
62871: LD_INT 2
62873: NEG
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 0
62881: PUSH
62882: LD_INT 2
62884: NEG
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 1
62892: PUSH
62893: LD_INT 1
62895: NEG
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 2
62903: PUSH
62904: LD_INT 0
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 2
62913: PUSH
62914: LD_INT 1
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62935: LD_ADDR_VAR 0 49
62939: PUSH
62940: LD_INT 0
62942: PUSH
62943: LD_INT 0
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 0
62952: PUSH
62953: LD_INT 1
62955: NEG
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 1
62963: PUSH
62964: LD_INT 0
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 1
62973: PUSH
62974: LD_INT 1
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 0
62983: PUSH
62984: LD_INT 1
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 1
62993: NEG
62994: PUSH
62995: LD_INT 0
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 1
63004: NEG
63005: PUSH
63006: LD_INT 1
63008: NEG
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 1
63016: PUSH
63017: LD_INT 1
63019: NEG
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 2
63027: PUSH
63028: LD_INT 0
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 2
63037: PUSH
63038: LD_INT 1
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 2
63047: PUSH
63048: LD_INT 2
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 1
63057: PUSH
63058: LD_INT 2
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63079: LD_ADDR_VAR 0 50
63083: PUSH
63084: LD_INT 0
63086: PUSH
63087: LD_INT 0
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 0
63096: PUSH
63097: LD_INT 1
63099: NEG
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 1
63107: PUSH
63108: LD_INT 0
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 1
63117: PUSH
63118: LD_INT 1
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 0
63127: PUSH
63128: LD_INT 1
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 1
63137: NEG
63138: PUSH
63139: LD_INT 0
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 1
63148: NEG
63149: PUSH
63150: LD_INT 1
63152: NEG
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 2
63160: PUSH
63161: LD_INT 1
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 2
63170: PUSH
63171: LD_INT 2
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 1
63180: PUSH
63181: LD_INT 2
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 0
63190: PUSH
63191: LD_INT 2
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 1
63200: NEG
63201: PUSH
63202: LD_INT 1
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63223: LD_ADDR_VAR 0 51
63227: PUSH
63228: LD_INT 0
63230: PUSH
63231: LD_INT 0
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 0
63240: PUSH
63241: LD_INT 1
63243: NEG
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 1
63251: PUSH
63252: LD_INT 0
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 1
63261: PUSH
63262: LD_INT 1
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 0
63271: PUSH
63272: LD_INT 1
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 1
63281: NEG
63282: PUSH
63283: LD_INT 0
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 1
63292: NEG
63293: PUSH
63294: LD_INT 1
63296: NEG
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 1
63304: PUSH
63305: LD_INT 2
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 0
63314: PUSH
63315: LD_INT 2
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 1
63324: NEG
63325: PUSH
63326: LD_INT 1
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 2
63335: NEG
63336: PUSH
63337: LD_INT 0
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 2
63346: NEG
63347: PUSH
63348: LD_INT 1
63350: NEG
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63370: LD_ADDR_VAR 0 52
63374: PUSH
63375: LD_INT 0
63377: PUSH
63378: LD_INT 0
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 0
63387: PUSH
63388: LD_INT 1
63390: NEG
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 1
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 1
63408: PUSH
63409: LD_INT 1
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 0
63418: PUSH
63419: LD_INT 1
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 1
63428: NEG
63429: PUSH
63430: LD_INT 0
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 1
63439: NEG
63440: PUSH
63441: LD_INT 1
63443: NEG
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 1
63451: NEG
63452: PUSH
63453: LD_INT 2
63455: NEG
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 1
63463: NEG
63464: PUSH
63465: LD_INT 1
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 2
63474: NEG
63475: PUSH
63476: LD_INT 0
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 2
63485: NEG
63486: PUSH
63487: LD_INT 1
63489: NEG
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 2
63497: NEG
63498: PUSH
63499: LD_INT 2
63501: NEG
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63521: LD_ADDR_VAR 0 53
63525: PUSH
63526: LD_INT 0
63528: PUSH
63529: LD_INT 0
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 0
63538: PUSH
63539: LD_INT 1
63541: NEG
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 1
63549: PUSH
63550: LD_INT 0
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 1
63559: PUSH
63560: LD_INT 1
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 0
63569: PUSH
63570: LD_INT 1
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 1
63579: NEG
63580: PUSH
63581: LD_INT 0
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 1
63590: NEG
63591: PUSH
63592: LD_INT 1
63594: NEG
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 1
63602: NEG
63603: PUSH
63604: LD_INT 2
63606: NEG
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 0
63614: PUSH
63615: LD_INT 2
63617: NEG
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 1
63625: PUSH
63626: LD_INT 1
63628: NEG
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 2
63636: PUSH
63637: LD_INT 0
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 2
63646: PUSH
63647: LD_INT 1
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 2
63656: PUSH
63657: LD_INT 2
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 1
63666: PUSH
63667: LD_INT 2
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 0
63676: PUSH
63677: LD_INT 2
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 1
63686: NEG
63687: PUSH
63688: LD_INT 1
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 2
63697: NEG
63698: PUSH
63699: LD_INT 0
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 2
63708: NEG
63709: PUSH
63710: LD_INT 1
63712: NEG
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 2
63720: NEG
63721: PUSH
63722: LD_INT 2
63724: NEG
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63751: LD_ADDR_VAR 0 54
63755: PUSH
63756: LD_INT 0
63758: PUSH
63759: LD_INT 0
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 0
63768: PUSH
63769: LD_INT 1
63771: NEG
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 1
63779: PUSH
63780: LD_INT 0
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 1
63789: PUSH
63790: LD_INT 1
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 0
63799: PUSH
63800: LD_INT 1
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 1
63809: NEG
63810: PUSH
63811: LD_INT 0
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 1
63820: NEG
63821: PUSH
63822: LD_INT 1
63824: NEG
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 1
63832: NEG
63833: PUSH
63834: LD_INT 2
63836: NEG
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 0
63844: PUSH
63845: LD_INT 2
63847: NEG
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_INT 1
63855: PUSH
63856: LD_INT 1
63858: NEG
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 2
63866: PUSH
63867: LD_INT 0
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 2
63876: PUSH
63877: LD_INT 1
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 2
63886: PUSH
63887: LD_INT 2
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 1
63896: PUSH
63897: LD_INT 2
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 0
63906: PUSH
63907: LD_INT 2
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 1
63916: NEG
63917: PUSH
63918: LD_INT 1
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 2
63927: NEG
63928: PUSH
63929: LD_INT 0
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 2
63938: NEG
63939: PUSH
63940: LD_INT 1
63942: NEG
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 2
63950: NEG
63951: PUSH
63952: LD_INT 2
63954: NEG
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63981: LD_ADDR_VAR 0 55
63985: PUSH
63986: LD_INT 0
63988: PUSH
63989: LD_INT 0
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 0
63998: PUSH
63999: LD_INT 1
64001: NEG
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 1
64009: PUSH
64010: LD_INT 0
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 1
64019: PUSH
64020: LD_INT 1
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 0
64029: PUSH
64030: LD_INT 1
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 1
64039: NEG
64040: PUSH
64041: LD_INT 0
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 1
64050: NEG
64051: PUSH
64052: LD_INT 1
64054: NEG
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 1
64062: NEG
64063: PUSH
64064: LD_INT 2
64066: NEG
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 0
64074: PUSH
64075: LD_INT 2
64077: NEG
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 1
64085: PUSH
64086: LD_INT 1
64088: NEG
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 2
64096: PUSH
64097: LD_INT 0
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: LD_INT 2
64106: PUSH
64107: LD_INT 1
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 2
64116: PUSH
64117: LD_INT 2
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 1
64126: PUSH
64127: LD_INT 2
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 0
64136: PUSH
64137: LD_INT 2
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: LD_INT 1
64146: NEG
64147: PUSH
64148: LD_INT 1
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 2
64157: NEG
64158: PUSH
64159: LD_INT 0
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 2
64168: NEG
64169: PUSH
64170: LD_INT 1
64172: NEG
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 2
64180: NEG
64181: PUSH
64182: LD_INT 2
64184: NEG
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64211: LD_ADDR_VAR 0 56
64215: PUSH
64216: LD_INT 0
64218: PUSH
64219: LD_INT 0
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: LD_INT 0
64228: PUSH
64229: LD_INT 1
64231: NEG
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 1
64239: PUSH
64240: LD_INT 0
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 1
64249: PUSH
64250: LD_INT 1
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 0
64259: PUSH
64260: LD_INT 1
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 1
64269: NEG
64270: PUSH
64271: LD_INT 0
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 1
64280: NEG
64281: PUSH
64282: LD_INT 1
64284: NEG
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 1
64292: NEG
64293: PUSH
64294: LD_INT 2
64296: NEG
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 0
64304: PUSH
64305: LD_INT 2
64307: NEG
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 1
64315: PUSH
64316: LD_INT 1
64318: NEG
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 2
64326: PUSH
64327: LD_INT 0
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 2
64336: PUSH
64337: LD_INT 1
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 2
64346: PUSH
64347: LD_INT 2
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 1
64356: PUSH
64357: LD_INT 2
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 0
64366: PUSH
64367: LD_INT 2
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 1
64376: NEG
64377: PUSH
64378: LD_INT 1
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 2
64387: NEG
64388: PUSH
64389: LD_INT 0
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 2
64398: NEG
64399: PUSH
64400: LD_INT 1
64402: NEG
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 2
64410: NEG
64411: PUSH
64412: LD_INT 2
64414: NEG
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64441: LD_ADDR_VAR 0 57
64445: PUSH
64446: LD_INT 0
64448: PUSH
64449: LD_INT 0
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 0
64458: PUSH
64459: LD_INT 1
64461: NEG
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 1
64469: PUSH
64470: LD_INT 0
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 1
64479: PUSH
64480: LD_INT 1
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 0
64489: PUSH
64490: LD_INT 1
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 1
64499: NEG
64500: PUSH
64501: LD_INT 0
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 1
64510: NEG
64511: PUSH
64512: LD_INT 1
64514: NEG
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 1
64522: NEG
64523: PUSH
64524: LD_INT 2
64526: NEG
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 0
64534: PUSH
64535: LD_INT 2
64537: NEG
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 1
64545: PUSH
64546: LD_INT 1
64548: NEG
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 2
64556: PUSH
64557: LD_INT 0
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: LD_INT 2
64566: PUSH
64567: LD_INT 1
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 2
64576: PUSH
64577: LD_INT 2
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 1
64586: PUSH
64587: LD_INT 2
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 0
64596: PUSH
64597: LD_INT 2
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 1
64606: NEG
64607: PUSH
64608: LD_INT 1
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 2
64617: NEG
64618: PUSH
64619: LD_INT 0
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 2
64628: NEG
64629: PUSH
64630: LD_INT 1
64632: NEG
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 2
64640: NEG
64641: PUSH
64642: LD_INT 2
64644: NEG
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64671: LD_ADDR_VAR 0 58
64675: PUSH
64676: LD_INT 0
64678: PUSH
64679: LD_INT 0
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 0
64688: PUSH
64689: LD_INT 1
64691: NEG
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 1
64699: PUSH
64700: LD_INT 0
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 1
64709: PUSH
64710: LD_INT 1
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 0
64719: PUSH
64720: LD_INT 1
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 1
64729: NEG
64730: PUSH
64731: LD_INT 0
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 1
64740: NEG
64741: PUSH
64742: LD_INT 1
64744: NEG
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: LD_INT 1
64752: NEG
64753: PUSH
64754: LD_INT 2
64756: NEG
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 0
64764: PUSH
64765: LD_INT 2
64767: NEG
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 1
64775: PUSH
64776: LD_INT 1
64778: NEG
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 2
64786: PUSH
64787: LD_INT 0
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 2
64796: PUSH
64797: LD_INT 1
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 2
64806: PUSH
64807: LD_INT 2
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 1
64816: PUSH
64817: LD_INT 2
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 0
64826: PUSH
64827: LD_INT 2
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: PUSH
64834: LD_INT 1
64836: NEG
64837: PUSH
64838: LD_INT 1
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 2
64847: NEG
64848: PUSH
64849: LD_INT 0
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 2
64858: NEG
64859: PUSH
64860: LD_INT 1
64862: NEG
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 2
64870: NEG
64871: PUSH
64872: LD_INT 2
64874: NEG
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: LIST
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64901: LD_ADDR_VAR 0 59
64905: PUSH
64906: LD_INT 0
64908: PUSH
64909: LD_INT 0
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 0
64918: PUSH
64919: LD_INT 1
64921: NEG
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 1
64929: PUSH
64930: LD_INT 0
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 1
64939: PUSH
64940: LD_INT 1
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 0
64949: PUSH
64950: LD_INT 1
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 1
64959: NEG
64960: PUSH
64961: LD_INT 0
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 1
64970: NEG
64971: PUSH
64972: LD_INT 1
64974: NEG
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64989: LD_ADDR_VAR 0 60
64993: PUSH
64994: LD_INT 0
64996: PUSH
64997: LD_INT 0
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 0
65006: PUSH
65007: LD_INT 1
65009: NEG
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 1
65017: PUSH
65018: LD_INT 0
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 1
65027: PUSH
65028: LD_INT 1
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 0
65037: PUSH
65038: LD_INT 1
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 1
65047: NEG
65048: PUSH
65049: LD_INT 0
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 1
65058: NEG
65059: PUSH
65060: LD_INT 1
65062: NEG
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65077: LD_ADDR_VAR 0 61
65081: PUSH
65082: LD_INT 0
65084: PUSH
65085: LD_INT 0
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 0
65094: PUSH
65095: LD_INT 1
65097: NEG
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 1
65105: PUSH
65106: LD_INT 0
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 1
65115: PUSH
65116: LD_INT 1
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 0
65125: PUSH
65126: LD_INT 1
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 1
65135: NEG
65136: PUSH
65137: LD_INT 0
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 1
65146: NEG
65147: PUSH
65148: LD_INT 1
65150: NEG
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65165: LD_ADDR_VAR 0 62
65169: PUSH
65170: LD_INT 0
65172: PUSH
65173: LD_INT 0
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 0
65182: PUSH
65183: LD_INT 1
65185: NEG
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 1
65193: PUSH
65194: LD_INT 0
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 1
65203: PUSH
65204: LD_INT 1
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 0
65213: PUSH
65214: LD_INT 1
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 1
65223: NEG
65224: PUSH
65225: LD_INT 0
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 1
65234: NEG
65235: PUSH
65236: LD_INT 1
65238: NEG
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65253: LD_ADDR_VAR 0 63
65257: PUSH
65258: LD_INT 0
65260: PUSH
65261: LD_INT 0
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 0
65270: PUSH
65271: LD_INT 1
65273: NEG
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 1
65281: PUSH
65282: LD_INT 0
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 1
65291: PUSH
65292: LD_INT 1
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 0
65301: PUSH
65302: LD_INT 1
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 1
65311: NEG
65312: PUSH
65313: LD_INT 0
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 1
65322: NEG
65323: PUSH
65324: LD_INT 1
65326: NEG
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: LIST
65336: LIST
65337: LIST
65338: LIST
65339: LIST
65340: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65341: LD_ADDR_VAR 0 64
65345: PUSH
65346: LD_INT 0
65348: PUSH
65349: LD_INT 0
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 0
65358: PUSH
65359: LD_INT 1
65361: NEG
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 1
65369: PUSH
65370: LD_INT 0
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 1
65379: PUSH
65380: LD_INT 1
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 0
65389: PUSH
65390: LD_INT 1
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 1
65399: NEG
65400: PUSH
65401: LD_INT 0
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 1
65410: NEG
65411: PUSH
65412: LD_INT 1
65414: NEG
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: LIST
65424: LIST
65425: LIST
65426: LIST
65427: LIST
65428: ST_TO_ADDR
// end ; 1 :
65429: GO 71326
65431: LD_INT 1
65433: DOUBLE
65434: EQUAL
65435: IFTRUE 65439
65437: GO 68062
65439: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65440: LD_ADDR_VAR 0 11
65444: PUSH
65445: LD_INT 1
65447: NEG
65448: PUSH
65449: LD_INT 3
65451: NEG
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 0
65459: PUSH
65460: LD_INT 3
65462: NEG
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 1
65470: PUSH
65471: LD_INT 2
65473: NEG
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: LIST
65483: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65484: LD_ADDR_VAR 0 12
65488: PUSH
65489: LD_INT 2
65491: PUSH
65492: LD_INT 1
65494: NEG
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: LD_INT 3
65502: PUSH
65503: LD_INT 0
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 3
65512: PUSH
65513: LD_INT 1
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: LIST
65524: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65525: LD_ADDR_VAR 0 13
65529: PUSH
65530: LD_INT 3
65532: PUSH
65533: LD_INT 2
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 3
65542: PUSH
65543: LD_INT 3
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 2
65552: PUSH
65553: LD_INT 3
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: LIST
65564: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65565: LD_ADDR_VAR 0 14
65569: PUSH
65570: LD_INT 1
65572: PUSH
65573: LD_INT 3
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 0
65582: PUSH
65583: LD_INT 3
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 1
65592: NEG
65593: PUSH
65594: LD_INT 2
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: LIST
65605: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65606: LD_ADDR_VAR 0 15
65610: PUSH
65611: LD_INT 2
65613: NEG
65614: PUSH
65615: LD_INT 1
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 3
65624: NEG
65625: PUSH
65626: LD_INT 0
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 3
65635: NEG
65636: PUSH
65637: LD_INT 1
65639: NEG
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: LIST
65649: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65650: LD_ADDR_VAR 0 16
65654: PUSH
65655: LD_INT 2
65657: NEG
65658: PUSH
65659: LD_INT 3
65661: NEG
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 3
65669: NEG
65670: PUSH
65671: LD_INT 2
65673: NEG
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 3
65681: NEG
65682: PUSH
65683: LD_INT 3
65685: NEG
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: LIST
65695: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65696: LD_ADDR_VAR 0 17
65700: PUSH
65701: LD_INT 1
65703: NEG
65704: PUSH
65705: LD_INT 3
65707: NEG
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 0
65715: PUSH
65716: LD_INT 3
65718: NEG
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 1
65726: PUSH
65727: LD_INT 2
65729: NEG
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: LIST
65739: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65740: LD_ADDR_VAR 0 18
65744: PUSH
65745: LD_INT 2
65747: PUSH
65748: LD_INT 1
65750: NEG
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: LD_INT 3
65758: PUSH
65759: LD_INT 0
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 3
65768: PUSH
65769: LD_INT 1
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: LIST
65780: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65781: LD_ADDR_VAR 0 19
65785: PUSH
65786: LD_INT 3
65788: PUSH
65789: LD_INT 2
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 3
65798: PUSH
65799: LD_INT 3
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: LD_INT 2
65808: PUSH
65809: LD_INT 3
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: LIST
65820: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65821: LD_ADDR_VAR 0 20
65825: PUSH
65826: LD_INT 1
65828: PUSH
65829: LD_INT 3
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 0
65838: PUSH
65839: LD_INT 3
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: LD_INT 1
65848: NEG
65849: PUSH
65850: LD_INT 2
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: LIST
65861: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65862: LD_ADDR_VAR 0 21
65866: PUSH
65867: LD_INT 2
65869: NEG
65870: PUSH
65871: LD_INT 1
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 3
65880: NEG
65881: PUSH
65882: LD_INT 0
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 3
65891: NEG
65892: PUSH
65893: LD_INT 1
65895: NEG
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: LIST
65905: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65906: LD_ADDR_VAR 0 22
65910: PUSH
65911: LD_INT 2
65913: NEG
65914: PUSH
65915: LD_INT 3
65917: NEG
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 3
65925: NEG
65926: PUSH
65927: LD_INT 2
65929: NEG
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_INT 3
65937: NEG
65938: PUSH
65939: LD_INT 3
65941: NEG
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: LIST
65951: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65952: LD_ADDR_VAR 0 23
65956: PUSH
65957: LD_INT 0
65959: PUSH
65960: LD_INT 3
65962: NEG
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 1
65970: NEG
65971: PUSH
65972: LD_INT 4
65974: NEG
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 1
65982: PUSH
65983: LD_INT 3
65985: NEG
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: LIST
65995: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65996: LD_ADDR_VAR 0 24
66000: PUSH
66001: LD_INT 3
66003: PUSH
66004: LD_INT 0
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_INT 3
66013: PUSH
66014: LD_INT 1
66016: NEG
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 4
66024: PUSH
66025: LD_INT 1
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: LIST
66036: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66037: LD_ADDR_VAR 0 25
66041: PUSH
66042: LD_INT 3
66044: PUSH
66045: LD_INT 3
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 4
66054: PUSH
66055: LD_INT 3
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 3
66064: PUSH
66065: LD_INT 4
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: LIST
66076: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66077: LD_ADDR_VAR 0 26
66081: PUSH
66082: LD_INT 0
66084: PUSH
66085: LD_INT 3
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 1
66094: PUSH
66095: LD_INT 4
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 1
66104: NEG
66105: PUSH
66106: LD_INT 3
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: LIST
66117: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66118: LD_ADDR_VAR 0 27
66122: PUSH
66123: LD_INT 3
66125: NEG
66126: PUSH
66127: LD_INT 0
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: LD_INT 3
66136: NEG
66137: PUSH
66138: LD_INT 1
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: LD_INT 4
66147: NEG
66148: PUSH
66149: LD_INT 1
66151: NEG
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: LIST
66161: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66162: LD_ADDR_VAR 0 28
66166: PUSH
66167: LD_INT 3
66169: NEG
66170: PUSH
66171: LD_INT 3
66173: NEG
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 3
66181: NEG
66182: PUSH
66183: LD_INT 4
66185: NEG
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 4
66193: NEG
66194: PUSH
66195: LD_INT 3
66197: NEG
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: LIST
66207: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66208: LD_ADDR_VAR 0 29
66212: PUSH
66213: LD_INT 1
66215: NEG
66216: PUSH
66217: LD_INT 3
66219: NEG
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 0
66227: PUSH
66228: LD_INT 3
66230: NEG
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 1
66238: PUSH
66239: LD_INT 2
66241: NEG
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 1
66249: NEG
66250: PUSH
66251: LD_INT 4
66253: NEG
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: LD_INT 0
66261: PUSH
66262: LD_INT 4
66264: NEG
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 1
66272: PUSH
66273: LD_INT 3
66275: NEG
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 1
66283: NEG
66284: PUSH
66285: LD_INT 5
66287: NEG
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 0
66295: PUSH
66296: LD_INT 5
66298: NEG
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 1
66306: PUSH
66307: LD_INT 4
66309: NEG
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 1
66317: NEG
66318: PUSH
66319: LD_INT 6
66321: NEG
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: PUSH
66327: LD_INT 0
66329: PUSH
66330: LD_INT 6
66332: NEG
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: LD_INT 1
66340: PUSH
66341: LD_INT 5
66343: NEG
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66363: LD_ADDR_VAR 0 30
66367: PUSH
66368: LD_INT 2
66370: PUSH
66371: LD_INT 1
66373: NEG
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: LD_INT 3
66381: PUSH
66382: LD_INT 0
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 3
66391: PUSH
66392: LD_INT 1
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 3
66401: PUSH
66402: LD_INT 1
66404: NEG
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 4
66412: PUSH
66413: LD_INT 0
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 4
66422: PUSH
66423: LD_INT 1
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: LD_INT 4
66432: PUSH
66433: LD_INT 1
66435: NEG
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 5
66443: PUSH
66444: LD_INT 0
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 5
66453: PUSH
66454: LD_INT 1
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 5
66463: PUSH
66464: LD_INT 1
66466: NEG
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 6
66474: PUSH
66475: LD_INT 0
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 6
66484: PUSH
66485: LD_INT 1
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: LIST
66504: LIST
66505: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66506: LD_ADDR_VAR 0 31
66510: PUSH
66511: LD_INT 3
66513: PUSH
66514: LD_INT 2
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: PUSH
66521: LD_INT 3
66523: PUSH
66524: LD_INT 3
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 2
66533: PUSH
66534: LD_INT 3
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 4
66543: PUSH
66544: LD_INT 3
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: LD_INT 4
66553: PUSH
66554: LD_INT 4
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: LD_INT 3
66563: PUSH
66564: LD_INT 4
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 5
66573: PUSH
66574: LD_INT 4
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 5
66583: PUSH
66584: LD_INT 5
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 4
66593: PUSH
66594: LD_INT 5
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 6
66603: PUSH
66604: LD_INT 5
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 6
66613: PUSH
66614: LD_INT 6
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_INT 5
66623: PUSH
66624: LD_INT 6
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66645: LD_ADDR_VAR 0 32
66649: PUSH
66650: LD_INT 1
66652: PUSH
66653: LD_INT 3
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 0
66662: PUSH
66663: LD_INT 3
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 1
66672: NEG
66673: PUSH
66674: LD_INT 2
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: LD_INT 1
66683: PUSH
66684: LD_INT 4
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 0
66693: PUSH
66694: LD_INT 4
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 1
66703: NEG
66704: PUSH
66705: LD_INT 3
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 1
66714: PUSH
66715: LD_INT 5
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 0
66724: PUSH
66725: LD_INT 5
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 1
66734: NEG
66735: PUSH
66736: LD_INT 4
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 1
66745: PUSH
66746: LD_INT 6
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 0
66755: PUSH
66756: LD_INT 6
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: LD_INT 1
66765: NEG
66766: PUSH
66767: LD_INT 5
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66788: LD_ADDR_VAR 0 33
66792: PUSH
66793: LD_INT 2
66795: NEG
66796: PUSH
66797: LD_INT 1
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 3
66806: NEG
66807: PUSH
66808: LD_INT 0
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PUSH
66815: LD_INT 3
66817: NEG
66818: PUSH
66819: LD_INT 1
66821: NEG
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 3
66829: NEG
66830: PUSH
66831: LD_INT 1
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: LD_INT 4
66840: NEG
66841: PUSH
66842: LD_INT 0
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 4
66851: NEG
66852: PUSH
66853: LD_INT 1
66855: NEG
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 4
66863: NEG
66864: PUSH
66865: LD_INT 1
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 5
66874: NEG
66875: PUSH
66876: LD_INT 0
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 5
66885: NEG
66886: PUSH
66887: LD_INT 1
66889: NEG
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 5
66897: NEG
66898: PUSH
66899: LD_INT 1
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 6
66908: NEG
66909: PUSH
66910: LD_INT 0
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 6
66919: NEG
66920: PUSH
66921: LD_INT 1
66923: NEG
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66943: LD_ADDR_VAR 0 34
66947: PUSH
66948: LD_INT 2
66950: NEG
66951: PUSH
66952: LD_INT 3
66954: NEG
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 3
66962: NEG
66963: PUSH
66964: LD_INT 2
66966: NEG
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 3
66974: NEG
66975: PUSH
66976: LD_INT 3
66978: NEG
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PUSH
66984: LD_INT 3
66986: NEG
66987: PUSH
66988: LD_INT 4
66990: NEG
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 4
66998: NEG
66999: PUSH
67000: LD_INT 3
67002: NEG
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 4
67010: NEG
67011: PUSH
67012: LD_INT 4
67014: NEG
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 4
67022: NEG
67023: PUSH
67024: LD_INT 5
67026: NEG
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 5
67034: NEG
67035: PUSH
67036: LD_INT 4
67038: NEG
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: PUSH
67044: LD_INT 5
67046: NEG
67047: PUSH
67048: LD_INT 5
67050: NEG
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 5
67058: NEG
67059: PUSH
67060: LD_INT 6
67062: NEG
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 6
67070: NEG
67071: PUSH
67072: LD_INT 5
67074: NEG
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 6
67082: NEG
67083: PUSH
67084: LD_INT 6
67086: NEG
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67106: LD_ADDR_VAR 0 41
67110: PUSH
67111: LD_INT 0
67113: PUSH
67114: LD_INT 2
67116: NEG
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 1
67124: NEG
67125: PUSH
67126: LD_INT 3
67128: NEG
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 1
67136: PUSH
67137: LD_INT 2
67139: NEG
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: LIST
67149: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67150: LD_ADDR_VAR 0 42
67154: PUSH
67155: LD_INT 2
67157: PUSH
67158: LD_INT 0
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: LD_INT 2
67167: PUSH
67168: LD_INT 1
67170: NEG
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 3
67178: PUSH
67179: LD_INT 1
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: LIST
67190: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67191: LD_ADDR_VAR 0 43
67195: PUSH
67196: LD_INT 2
67198: PUSH
67199: LD_INT 2
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 3
67208: PUSH
67209: LD_INT 2
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 2
67218: PUSH
67219: LD_INT 3
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: LIST
67230: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67231: LD_ADDR_VAR 0 44
67235: PUSH
67236: LD_INT 0
67238: PUSH
67239: LD_INT 2
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 1
67248: PUSH
67249: LD_INT 3
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 1
67258: NEG
67259: PUSH
67260: LD_INT 2
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: LIST
67271: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67272: LD_ADDR_VAR 0 45
67276: PUSH
67277: LD_INT 2
67279: NEG
67280: PUSH
67281: LD_INT 0
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 2
67290: NEG
67291: PUSH
67292: LD_INT 1
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 3
67301: NEG
67302: PUSH
67303: LD_INT 1
67305: NEG
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: LIST
67315: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67316: LD_ADDR_VAR 0 46
67320: PUSH
67321: LD_INT 2
67323: NEG
67324: PUSH
67325: LD_INT 2
67327: NEG
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 2
67335: NEG
67336: PUSH
67337: LD_INT 3
67339: NEG
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 3
67347: NEG
67348: PUSH
67349: LD_INT 2
67351: NEG
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: LIST
67361: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67362: LD_ADDR_VAR 0 47
67366: PUSH
67367: LD_INT 2
67369: NEG
67370: PUSH
67371: LD_INT 3
67373: NEG
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 1
67381: NEG
67382: PUSH
67383: LD_INT 3
67385: NEG
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67395: LD_ADDR_VAR 0 48
67399: PUSH
67400: LD_INT 1
67402: PUSH
67403: LD_INT 2
67405: NEG
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 2
67413: PUSH
67414: LD_INT 1
67416: NEG
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67426: LD_ADDR_VAR 0 49
67430: PUSH
67431: LD_INT 3
67433: PUSH
67434: LD_INT 1
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 3
67443: PUSH
67444: LD_INT 2
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67455: LD_ADDR_VAR 0 50
67459: PUSH
67460: LD_INT 2
67462: PUSH
67463: LD_INT 3
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 1
67472: PUSH
67473: LD_INT 3
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67484: LD_ADDR_VAR 0 51
67488: PUSH
67489: LD_INT 1
67491: NEG
67492: PUSH
67493: LD_INT 2
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: LD_INT 2
67502: NEG
67503: PUSH
67504: LD_INT 1
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67515: LD_ADDR_VAR 0 52
67519: PUSH
67520: LD_INT 3
67522: NEG
67523: PUSH
67524: LD_INT 1
67526: NEG
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 3
67534: NEG
67535: PUSH
67536: LD_INT 2
67538: NEG
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67548: LD_ADDR_VAR 0 53
67552: PUSH
67553: LD_INT 1
67555: NEG
67556: PUSH
67557: LD_INT 3
67559: NEG
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 0
67567: PUSH
67568: LD_INT 3
67570: NEG
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 1
67578: PUSH
67579: LD_INT 2
67581: NEG
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: LIST
67591: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67592: LD_ADDR_VAR 0 54
67596: PUSH
67597: LD_INT 2
67599: PUSH
67600: LD_INT 1
67602: NEG
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: LD_INT 3
67610: PUSH
67611: LD_INT 0
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: LD_INT 3
67620: PUSH
67621: LD_INT 1
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: LIST
67632: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67633: LD_ADDR_VAR 0 55
67637: PUSH
67638: LD_INT 3
67640: PUSH
67641: LD_INT 2
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 3
67650: PUSH
67651: LD_INT 3
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 2
67660: PUSH
67661: LD_INT 3
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: LIST
67672: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67673: LD_ADDR_VAR 0 56
67677: PUSH
67678: LD_INT 1
67680: PUSH
67681: LD_INT 3
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 0
67690: PUSH
67691: LD_INT 3
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: LD_INT 1
67700: NEG
67701: PUSH
67702: LD_INT 2
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: LIST
67713: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67714: LD_ADDR_VAR 0 57
67718: PUSH
67719: LD_INT 2
67721: NEG
67722: PUSH
67723: LD_INT 1
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 3
67732: NEG
67733: PUSH
67734: LD_INT 0
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 3
67743: NEG
67744: PUSH
67745: LD_INT 1
67747: NEG
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: LIST
67757: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67758: LD_ADDR_VAR 0 58
67762: PUSH
67763: LD_INT 2
67765: NEG
67766: PUSH
67767: LD_INT 3
67769: NEG
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 3
67777: NEG
67778: PUSH
67779: LD_INT 2
67781: NEG
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: LD_INT 3
67789: NEG
67790: PUSH
67791: LD_INT 3
67793: NEG
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: LIST
67803: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67804: LD_ADDR_VAR 0 59
67808: PUSH
67809: LD_INT 1
67811: NEG
67812: PUSH
67813: LD_INT 2
67815: NEG
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: LD_INT 0
67823: PUSH
67824: LD_INT 2
67826: NEG
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: PUSH
67832: LD_INT 1
67834: PUSH
67835: LD_INT 1
67837: NEG
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: LIST
67847: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67848: LD_ADDR_VAR 0 60
67852: PUSH
67853: LD_INT 1
67855: PUSH
67856: LD_INT 1
67858: NEG
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 2
67866: PUSH
67867: LD_INT 0
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 2
67876: PUSH
67877: LD_INT 1
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: LIST
67888: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67889: LD_ADDR_VAR 0 61
67893: PUSH
67894: LD_INT 2
67896: PUSH
67897: LD_INT 1
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 2
67906: PUSH
67907: LD_INT 2
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 1
67916: PUSH
67917: LD_INT 2
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: LIST
67928: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67929: LD_ADDR_VAR 0 62
67933: PUSH
67934: LD_INT 1
67936: PUSH
67937: LD_INT 2
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: LD_INT 0
67946: PUSH
67947: LD_INT 2
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 1
67956: NEG
67957: PUSH
67958: LD_INT 1
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: LIST
67969: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67970: LD_ADDR_VAR 0 63
67974: PUSH
67975: LD_INT 1
67977: NEG
67978: PUSH
67979: LD_INT 1
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 2
67988: NEG
67989: PUSH
67990: LD_INT 0
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: LD_INT 2
67999: NEG
68000: PUSH
68001: LD_INT 1
68003: NEG
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: LIST
68013: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68014: LD_ADDR_VAR 0 64
68018: PUSH
68019: LD_INT 1
68021: NEG
68022: PUSH
68023: LD_INT 2
68025: NEG
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: LD_INT 2
68033: NEG
68034: PUSH
68035: LD_INT 1
68037: NEG
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PUSH
68043: LD_INT 2
68045: NEG
68046: PUSH
68047: LD_INT 2
68049: NEG
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: LIST
68059: ST_TO_ADDR
// end ; 2 :
68060: GO 71326
68062: LD_INT 2
68064: DOUBLE
68065: EQUAL
68066: IFTRUE 68070
68068: GO 71325
68070: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68071: LD_ADDR_VAR 0 29
68075: PUSH
68076: LD_INT 4
68078: PUSH
68079: LD_INT 0
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: PUSH
68086: LD_INT 4
68088: PUSH
68089: LD_INT 1
68091: NEG
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: PUSH
68097: LD_INT 5
68099: PUSH
68100: LD_INT 0
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: PUSH
68107: LD_INT 5
68109: PUSH
68110: LD_INT 1
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PUSH
68117: LD_INT 4
68119: PUSH
68120: LD_INT 1
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: PUSH
68127: LD_INT 3
68129: PUSH
68130: LD_INT 0
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 3
68139: PUSH
68140: LD_INT 1
68142: NEG
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 3
68150: PUSH
68151: LD_INT 2
68153: NEG
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: LD_INT 5
68161: PUSH
68162: LD_INT 2
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 3
68171: PUSH
68172: LD_INT 3
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 3
68181: PUSH
68182: LD_INT 2
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: LD_INT 4
68191: PUSH
68192: LD_INT 3
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 4
68201: PUSH
68202: LD_INT 4
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 3
68211: PUSH
68212: LD_INT 4
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 2
68221: PUSH
68222: LD_INT 3
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: LD_INT 2
68231: PUSH
68232: LD_INT 2
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: LD_INT 4
68241: PUSH
68242: LD_INT 2
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 2
68251: PUSH
68252: LD_INT 4
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: PUSH
68259: LD_INT 0
68261: PUSH
68262: LD_INT 4
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_INT 0
68271: PUSH
68272: LD_INT 3
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 1
68281: PUSH
68282: LD_INT 4
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: LD_INT 1
68291: PUSH
68292: LD_INT 5
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: PUSH
68299: LD_INT 0
68301: PUSH
68302: LD_INT 5
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 1
68311: NEG
68312: PUSH
68313: LD_INT 4
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: PUSH
68320: LD_INT 1
68322: NEG
68323: PUSH
68324: LD_INT 3
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 2
68333: PUSH
68334: LD_INT 5
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_INT 2
68343: NEG
68344: PUSH
68345: LD_INT 3
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 3
68354: NEG
68355: PUSH
68356: LD_INT 0
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: PUSH
68363: LD_INT 3
68365: NEG
68366: PUSH
68367: LD_INT 1
68369: NEG
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 2
68377: NEG
68378: PUSH
68379: LD_INT 0
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: LD_INT 2
68388: NEG
68389: PUSH
68390: LD_INT 1
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 3
68399: NEG
68400: PUSH
68401: LD_INT 1
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 4
68410: NEG
68411: PUSH
68412: LD_INT 0
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: LD_INT 4
68421: NEG
68422: PUSH
68423: LD_INT 1
68425: NEG
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 4
68433: NEG
68434: PUSH
68435: LD_INT 2
68437: NEG
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 2
68445: NEG
68446: PUSH
68447: LD_INT 2
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 4
68456: NEG
68457: PUSH
68458: LD_INT 4
68460: NEG
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PUSH
68466: LD_INT 4
68468: NEG
68469: PUSH
68470: LD_INT 5
68472: NEG
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: LD_INT 3
68480: NEG
68481: PUSH
68482: LD_INT 4
68484: NEG
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: LD_INT 3
68492: NEG
68493: PUSH
68494: LD_INT 3
68496: NEG
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 4
68504: NEG
68505: PUSH
68506: LD_INT 3
68508: NEG
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 5
68516: NEG
68517: PUSH
68518: LD_INT 4
68520: NEG
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 5
68528: NEG
68529: PUSH
68530: LD_INT 5
68532: NEG
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 3
68540: NEG
68541: PUSH
68542: LD_INT 5
68544: NEG
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 5
68552: NEG
68553: PUSH
68554: LD_INT 3
68556: NEG
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: LIST
68574: LIST
68575: LIST
68576: LIST
68577: LIST
68578: LIST
68579: LIST
68580: LIST
68581: LIST
68582: LIST
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: LIST
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: LIST
68608: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68609: LD_ADDR_VAR 0 30
68613: PUSH
68614: LD_INT 4
68616: PUSH
68617: LD_INT 4
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 4
68626: PUSH
68627: LD_INT 3
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 5
68636: PUSH
68637: LD_INT 4
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 5
68646: PUSH
68647: LD_INT 5
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 4
68656: PUSH
68657: LD_INT 5
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 3
68666: PUSH
68667: LD_INT 4
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 3
68676: PUSH
68677: LD_INT 3
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PUSH
68684: LD_INT 5
68686: PUSH
68687: LD_INT 3
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 3
68696: PUSH
68697: LD_INT 5
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: PUSH
68704: LD_INT 0
68706: PUSH
68707: LD_INT 3
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: PUSH
68714: LD_INT 0
68716: PUSH
68717: LD_INT 2
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: LD_INT 1
68726: PUSH
68727: LD_INT 3
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: PUSH
68734: LD_INT 1
68736: PUSH
68737: LD_INT 4
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: PUSH
68744: LD_INT 0
68746: PUSH
68747: LD_INT 4
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 1
68756: NEG
68757: PUSH
68758: LD_INT 3
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: LD_INT 1
68767: NEG
68768: PUSH
68769: LD_INT 2
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 2
68778: PUSH
68779: LD_INT 4
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 2
68788: NEG
68789: PUSH
68790: LD_INT 2
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: LD_INT 4
68799: NEG
68800: PUSH
68801: LD_INT 0
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: PUSH
68808: LD_INT 4
68810: NEG
68811: PUSH
68812: LD_INT 1
68814: NEG
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 3
68822: NEG
68823: PUSH
68824: LD_INT 0
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 3
68833: NEG
68834: PUSH
68835: LD_INT 1
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 4
68844: NEG
68845: PUSH
68846: LD_INT 1
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: LD_INT 5
68855: NEG
68856: PUSH
68857: LD_INT 0
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 5
68866: NEG
68867: PUSH
68868: LD_INT 1
68870: NEG
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: LD_INT 5
68878: NEG
68879: PUSH
68880: LD_INT 2
68882: NEG
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: LD_INT 3
68890: NEG
68891: PUSH
68892: LD_INT 2
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 3
68901: NEG
68902: PUSH
68903: LD_INT 3
68905: NEG
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 3
68913: NEG
68914: PUSH
68915: LD_INT 4
68917: NEG
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: LD_INT 2
68925: NEG
68926: PUSH
68927: LD_INT 3
68929: NEG
68930: PUSH
68931: EMPTY
68932: LIST
68933: LIST
68934: PUSH
68935: LD_INT 2
68937: NEG
68938: PUSH
68939: LD_INT 2
68941: NEG
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: PUSH
68947: LD_INT 3
68949: NEG
68950: PUSH
68951: LD_INT 2
68953: NEG
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 4
68961: NEG
68962: PUSH
68963: LD_INT 3
68965: NEG
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: PUSH
68971: LD_INT 4
68973: NEG
68974: PUSH
68975: LD_INT 4
68977: NEG
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 2
68985: NEG
68986: PUSH
68987: LD_INT 4
68989: NEG
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: LD_INT 4
68997: NEG
68998: PUSH
68999: LD_INT 2
69001: NEG
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 0
69009: PUSH
69010: LD_INT 4
69012: NEG
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 0
69020: PUSH
69021: LD_INT 5
69023: NEG
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: LD_INT 1
69031: PUSH
69032: LD_INT 4
69034: NEG
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 1
69042: PUSH
69043: LD_INT 3
69045: NEG
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 0
69053: PUSH
69054: LD_INT 3
69056: NEG
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: PUSH
69062: LD_INT 1
69064: NEG
69065: PUSH
69066: LD_INT 4
69068: NEG
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 1
69076: NEG
69077: PUSH
69078: LD_INT 5
69080: NEG
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: LD_INT 2
69088: PUSH
69089: LD_INT 3
69091: NEG
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: LD_INT 2
69099: NEG
69100: PUSH
69101: LD_INT 5
69103: NEG
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: LIST
69145: LIST
69146: LIST
69147: LIST
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: LIST
69154: LIST
69155: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69156: LD_ADDR_VAR 0 31
69160: PUSH
69161: LD_INT 0
69163: PUSH
69164: LD_INT 4
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PUSH
69171: LD_INT 0
69173: PUSH
69174: LD_INT 3
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PUSH
69181: LD_INT 1
69183: PUSH
69184: LD_INT 4
69186: PUSH
69187: EMPTY
69188: LIST
69189: LIST
69190: PUSH
69191: LD_INT 1
69193: PUSH
69194: LD_INT 5
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: PUSH
69201: LD_INT 0
69203: PUSH
69204: LD_INT 5
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: PUSH
69211: LD_INT 1
69213: NEG
69214: PUSH
69215: LD_INT 4
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: PUSH
69222: LD_INT 1
69224: NEG
69225: PUSH
69226: LD_INT 3
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: PUSH
69233: LD_INT 2
69235: PUSH
69236: LD_INT 5
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: LD_INT 2
69245: NEG
69246: PUSH
69247: LD_INT 3
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: PUSH
69254: LD_INT 3
69256: NEG
69257: PUSH
69258: LD_INT 0
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: LD_INT 3
69267: NEG
69268: PUSH
69269: LD_INT 1
69271: NEG
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 2
69279: NEG
69280: PUSH
69281: LD_INT 0
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 2
69290: NEG
69291: PUSH
69292: LD_INT 1
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 3
69301: NEG
69302: PUSH
69303: LD_INT 1
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 4
69312: NEG
69313: PUSH
69314: LD_INT 0
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: PUSH
69321: LD_INT 4
69323: NEG
69324: PUSH
69325: LD_INT 1
69327: NEG
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: PUSH
69333: LD_INT 4
69335: NEG
69336: PUSH
69337: LD_INT 2
69339: NEG
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: LD_INT 2
69347: NEG
69348: PUSH
69349: LD_INT 2
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 4
69358: NEG
69359: PUSH
69360: LD_INT 4
69362: NEG
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: LD_INT 4
69370: NEG
69371: PUSH
69372: LD_INT 5
69374: NEG
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 3
69382: NEG
69383: PUSH
69384: LD_INT 4
69386: NEG
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: PUSH
69392: LD_INT 3
69394: NEG
69395: PUSH
69396: LD_INT 3
69398: NEG
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 4
69406: NEG
69407: PUSH
69408: LD_INT 3
69410: NEG
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 5
69418: NEG
69419: PUSH
69420: LD_INT 4
69422: NEG
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 5
69430: NEG
69431: PUSH
69432: LD_INT 5
69434: NEG
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: LD_INT 3
69442: NEG
69443: PUSH
69444: LD_INT 5
69446: NEG
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: PUSH
69452: LD_INT 5
69454: NEG
69455: PUSH
69456: LD_INT 3
69458: NEG
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: LD_INT 0
69466: PUSH
69467: LD_INT 3
69469: NEG
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: PUSH
69475: LD_INT 0
69477: PUSH
69478: LD_INT 4
69480: NEG
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 1
69488: PUSH
69489: LD_INT 3
69491: NEG
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 1
69499: PUSH
69500: LD_INT 2
69502: NEG
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: LD_INT 0
69510: PUSH
69511: LD_INT 2
69513: NEG
69514: PUSH
69515: EMPTY
69516: LIST
69517: LIST
69518: PUSH
69519: LD_INT 1
69521: NEG
69522: PUSH
69523: LD_INT 3
69525: NEG
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 1
69533: NEG
69534: PUSH
69535: LD_INT 4
69537: NEG
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 2
69545: PUSH
69546: LD_INT 2
69548: NEG
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 2
69556: NEG
69557: PUSH
69558: LD_INT 4
69560: NEG
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: LD_INT 4
69568: PUSH
69569: LD_INT 0
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: LD_INT 4
69578: PUSH
69579: LD_INT 1
69581: NEG
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: LD_INT 5
69589: PUSH
69590: LD_INT 0
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: LD_INT 5
69599: PUSH
69600: LD_INT 1
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: LD_INT 4
69609: PUSH
69610: LD_INT 1
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 3
69619: PUSH
69620: LD_INT 0
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: LD_INT 3
69629: PUSH
69630: LD_INT 1
69632: NEG
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 3
69640: PUSH
69641: LD_INT 2
69643: NEG
69644: PUSH
69645: EMPTY
69646: LIST
69647: LIST
69648: PUSH
69649: LD_INT 5
69651: PUSH
69652: LD_INT 2
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: LIST
69663: LIST
69664: LIST
69665: LIST
69666: LIST
69667: LIST
69668: LIST
69669: LIST
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: LIST
69678: LIST
69679: LIST
69680: LIST
69681: LIST
69682: LIST
69683: LIST
69684: LIST
69685: LIST
69686: LIST
69687: LIST
69688: LIST
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: LIST
69695: LIST
69696: LIST
69697: LIST
69698: LIST
69699: LIST
69700: LIST
69701: LIST
69702: LIST
69703: LIST
69704: LIST
69705: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69706: LD_ADDR_VAR 0 32
69710: PUSH
69711: LD_INT 4
69713: NEG
69714: PUSH
69715: LD_INT 0
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: PUSH
69722: LD_INT 4
69724: NEG
69725: PUSH
69726: LD_INT 1
69728: NEG
69729: PUSH
69730: EMPTY
69731: LIST
69732: LIST
69733: PUSH
69734: LD_INT 3
69736: NEG
69737: PUSH
69738: LD_INT 0
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: LD_INT 3
69747: NEG
69748: PUSH
69749: LD_INT 1
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: PUSH
69756: LD_INT 4
69758: NEG
69759: PUSH
69760: LD_INT 1
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: PUSH
69767: LD_INT 5
69769: NEG
69770: PUSH
69771: LD_INT 0
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: PUSH
69778: LD_INT 5
69780: NEG
69781: PUSH
69782: LD_INT 1
69784: NEG
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 5
69792: NEG
69793: PUSH
69794: LD_INT 2
69796: NEG
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: PUSH
69802: LD_INT 3
69804: NEG
69805: PUSH
69806: LD_INT 2
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 3
69815: NEG
69816: PUSH
69817: LD_INT 3
69819: NEG
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: PUSH
69825: LD_INT 3
69827: NEG
69828: PUSH
69829: LD_INT 4
69831: NEG
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: PUSH
69837: LD_INT 2
69839: NEG
69840: PUSH
69841: LD_INT 3
69843: NEG
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: PUSH
69849: LD_INT 2
69851: NEG
69852: PUSH
69853: LD_INT 2
69855: NEG
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PUSH
69861: LD_INT 3
69863: NEG
69864: PUSH
69865: LD_INT 2
69867: NEG
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 4
69875: NEG
69876: PUSH
69877: LD_INT 3
69879: NEG
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 4
69887: NEG
69888: PUSH
69889: LD_INT 4
69891: NEG
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: LD_INT 2
69899: NEG
69900: PUSH
69901: LD_INT 4
69903: NEG
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PUSH
69909: LD_INT 4
69911: NEG
69912: PUSH
69913: LD_INT 2
69915: NEG
69916: PUSH
69917: EMPTY
69918: LIST
69919: LIST
69920: PUSH
69921: LD_INT 0
69923: PUSH
69924: LD_INT 4
69926: NEG
69927: PUSH
69928: EMPTY
69929: LIST
69930: LIST
69931: PUSH
69932: LD_INT 0
69934: PUSH
69935: LD_INT 5
69937: NEG
69938: PUSH
69939: EMPTY
69940: LIST
69941: LIST
69942: PUSH
69943: LD_INT 1
69945: PUSH
69946: LD_INT 4
69948: NEG
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: LD_INT 1
69956: PUSH
69957: LD_INT 3
69959: NEG
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 0
69967: PUSH
69968: LD_INT 3
69970: NEG
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: PUSH
69976: LD_INT 1
69978: NEG
69979: PUSH
69980: LD_INT 4
69982: NEG
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 1
69990: NEG
69991: PUSH
69992: LD_INT 5
69994: NEG
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: PUSH
70000: LD_INT 2
70002: PUSH
70003: LD_INT 3
70005: NEG
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: PUSH
70011: LD_INT 2
70013: NEG
70014: PUSH
70015: LD_INT 5
70017: NEG
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: LD_INT 3
70025: PUSH
70026: LD_INT 0
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: PUSH
70033: LD_INT 3
70035: PUSH
70036: LD_INT 1
70038: NEG
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: PUSH
70044: LD_INT 4
70046: PUSH
70047: LD_INT 0
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: PUSH
70054: LD_INT 4
70056: PUSH
70057: LD_INT 1
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: PUSH
70064: LD_INT 3
70066: PUSH
70067: LD_INT 1
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: LD_INT 2
70076: PUSH
70077: LD_INT 0
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: PUSH
70084: LD_INT 2
70086: PUSH
70087: LD_INT 1
70089: NEG
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: PUSH
70095: LD_INT 2
70097: PUSH
70098: LD_INT 2
70100: NEG
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: PUSH
70106: LD_INT 4
70108: PUSH
70109: LD_INT 2
70111: PUSH
70112: EMPTY
70113: LIST
70114: LIST
70115: PUSH
70116: LD_INT 4
70118: PUSH
70119: LD_INT 4
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: PUSH
70126: LD_INT 4
70128: PUSH
70129: LD_INT 3
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: PUSH
70136: LD_INT 5
70138: PUSH
70139: LD_INT 4
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: LD_INT 5
70148: PUSH
70149: LD_INT 5
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: LD_INT 4
70158: PUSH
70159: LD_INT 5
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 3
70168: PUSH
70169: LD_INT 4
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: PUSH
70176: LD_INT 3
70178: PUSH
70179: LD_INT 3
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: LD_INT 5
70188: PUSH
70189: LD_INT 3
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: PUSH
70196: LD_INT 3
70198: PUSH
70199: LD_INT 5
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: LIST
70210: LIST
70211: LIST
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: LIST
70217: LIST
70218: LIST
70219: LIST
70220: LIST
70221: LIST
70222: LIST
70223: LIST
70224: LIST
70225: LIST
70226: LIST
70227: LIST
70228: LIST
70229: LIST
70230: LIST
70231: LIST
70232: LIST
70233: LIST
70234: LIST
70235: LIST
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: LIST
70241: LIST
70242: LIST
70243: LIST
70244: LIST
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70253: LD_ADDR_VAR 0 33
70257: PUSH
70258: LD_INT 4
70260: NEG
70261: PUSH
70262: LD_INT 4
70264: NEG
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: LD_INT 4
70272: NEG
70273: PUSH
70274: LD_INT 5
70276: NEG
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: PUSH
70282: LD_INT 3
70284: NEG
70285: PUSH
70286: LD_INT 4
70288: NEG
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: PUSH
70294: LD_INT 3
70296: NEG
70297: PUSH
70298: LD_INT 3
70300: NEG
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 4
70308: NEG
70309: PUSH
70310: LD_INT 3
70312: NEG
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PUSH
70318: LD_INT 5
70320: NEG
70321: PUSH
70322: LD_INT 4
70324: NEG
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 5
70332: NEG
70333: PUSH
70334: LD_INT 5
70336: NEG
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 3
70344: NEG
70345: PUSH
70346: LD_INT 5
70348: NEG
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: LD_INT 5
70356: NEG
70357: PUSH
70358: LD_INT 3
70360: NEG
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: PUSH
70366: LD_INT 0
70368: PUSH
70369: LD_INT 3
70371: NEG
70372: PUSH
70373: EMPTY
70374: LIST
70375: LIST
70376: PUSH
70377: LD_INT 0
70379: PUSH
70380: LD_INT 4
70382: NEG
70383: PUSH
70384: EMPTY
70385: LIST
70386: LIST
70387: PUSH
70388: LD_INT 1
70390: PUSH
70391: LD_INT 3
70393: NEG
70394: PUSH
70395: EMPTY
70396: LIST
70397: LIST
70398: PUSH
70399: LD_INT 1
70401: PUSH
70402: LD_INT 2
70404: NEG
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PUSH
70410: LD_INT 0
70412: PUSH
70413: LD_INT 2
70415: NEG
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 1
70423: NEG
70424: PUSH
70425: LD_INT 3
70427: NEG
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PUSH
70433: LD_INT 1
70435: NEG
70436: PUSH
70437: LD_INT 4
70439: NEG
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: PUSH
70445: LD_INT 2
70447: PUSH
70448: LD_INT 2
70450: NEG
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: PUSH
70456: LD_INT 2
70458: NEG
70459: PUSH
70460: LD_INT 4
70462: NEG
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: PUSH
70468: LD_INT 4
70470: PUSH
70471: LD_INT 0
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: PUSH
70478: LD_INT 4
70480: PUSH
70481: LD_INT 1
70483: NEG
70484: PUSH
70485: EMPTY
70486: LIST
70487: LIST
70488: PUSH
70489: LD_INT 5
70491: PUSH
70492: LD_INT 0
70494: PUSH
70495: EMPTY
70496: LIST
70497: LIST
70498: PUSH
70499: LD_INT 5
70501: PUSH
70502: LD_INT 1
70504: PUSH
70505: EMPTY
70506: LIST
70507: LIST
70508: PUSH
70509: LD_INT 4
70511: PUSH
70512: LD_INT 1
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: PUSH
70519: LD_INT 3
70521: PUSH
70522: LD_INT 0
70524: PUSH
70525: EMPTY
70526: LIST
70527: LIST
70528: PUSH
70529: LD_INT 3
70531: PUSH
70532: LD_INT 1
70534: NEG
70535: PUSH
70536: EMPTY
70537: LIST
70538: LIST
70539: PUSH
70540: LD_INT 3
70542: PUSH
70543: LD_INT 2
70545: NEG
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: PUSH
70551: LD_INT 5
70553: PUSH
70554: LD_INT 2
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 3
70563: PUSH
70564: LD_INT 3
70566: PUSH
70567: EMPTY
70568: LIST
70569: LIST
70570: PUSH
70571: LD_INT 3
70573: PUSH
70574: LD_INT 2
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PUSH
70581: LD_INT 4
70583: PUSH
70584: LD_INT 3
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 4
70593: PUSH
70594: LD_INT 4
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PUSH
70601: LD_INT 3
70603: PUSH
70604: LD_INT 4
70606: PUSH
70607: EMPTY
70608: LIST
70609: LIST
70610: PUSH
70611: LD_INT 2
70613: PUSH
70614: LD_INT 3
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PUSH
70621: LD_INT 2
70623: PUSH
70624: LD_INT 2
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 4
70633: PUSH
70634: LD_INT 2
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: LD_INT 2
70643: PUSH
70644: LD_INT 4
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 0
70653: PUSH
70654: LD_INT 4
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: LD_INT 0
70663: PUSH
70664: LD_INT 3
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: PUSH
70671: LD_INT 1
70673: PUSH
70674: LD_INT 4
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: PUSH
70681: LD_INT 1
70683: PUSH
70684: LD_INT 5
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: LD_INT 0
70693: PUSH
70694: LD_INT 5
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: PUSH
70701: LD_INT 1
70703: NEG
70704: PUSH
70705: LD_INT 4
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: LD_INT 1
70714: NEG
70715: PUSH
70716: LD_INT 3
70718: PUSH
70719: EMPTY
70720: LIST
70721: LIST
70722: PUSH
70723: LD_INT 2
70725: PUSH
70726: LD_INT 5
70728: PUSH
70729: EMPTY
70730: LIST
70731: LIST
70732: PUSH
70733: LD_INT 2
70735: NEG
70736: PUSH
70737: LD_INT 3
70739: PUSH
70740: EMPTY
70741: LIST
70742: LIST
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: LIST
70748: LIST
70749: LIST
70750: LIST
70751: LIST
70752: LIST
70753: LIST
70754: LIST
70755: LIST
70756: LIST
70757: LIST
70758: LIST
70759: LIST
70760: LIST
70761: LIST
70762: LIST
70763: LIST
70764: LIST
70765: LIST
70766: LIST
70767: LIST
70768: LIST
70769: LIST
70770: LIST
70771: LIST
70772: LIST
70773: LIST
70774: LIST
70775: LIST
70776: LIST
70777: LIST
70778: LIST
70779: LIST
70780: LIST
70781: LIST
70782: LIST
70783: LIST
70784: LIST
70785: LIST
70786: LIST
70787: LIST
70788: LIST
70789: LIST
70790: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70791: LD_ADDR_VAR 0 34
70795: PUSH
70796: LD_INT 0
70798: PUSH
70799: LD_INT 4
70801: NEG
70802: PUSH
70803: EMPTY
70804: LIST
70805: LIST
70806: PUSH
70807: LD_INT 0
70809: PUSH
70810: LD_INT 5
70812: NEG
70813: PUSH
70814: EMPTY
70815: LIST
70816: LIST
70817: PUSH
70818: LD_INT 1
70820: PUSH
70821: LD_INT 4
70823: NEG
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: PUSH
70829: LD_INT 1
70831: PUSH
70832: LD_INT 3
70834: NEG
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: PUSH
70840: LD_INT 0
70842: PUSH
70843: LD_INT 3
70845: NEG
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: PUSH
70851: LD_INT 1
70853: NEG
70854: PUSH
70855: LD_INT 4
70857: NEG
70858: PUSH
70859: EMPTY
70860: LIST
70861: LIST
70862: PUSH
70863: LD_INT 1
70865: NEG
70866: PUSH
70867: LD_INT 5
70869: NEG
70870: PUSH
70871: EMPTY
70872: LIST
70873: LIST
70874: PUSH
70875: LD_INT 2
70877: PUSH
70878: LD_INT 3
70880: NEG
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: PUSH
70886: LD_INT 2
70888: NEG
70889: PUSH
70890: LD_INT 5
70892: NEG
70893: PUSH
70894: EMPTY
70895: LIST
70896: LIST
70897: PUSH
70898: LD_INT 3
70900: PUSH
70901: LD_INT 0
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: PUSH
70908: LD_INT 3
70910: PUSH
70911: LD_INT 1
70913: NEG
70914: PUSH
70915: EMPTY
70916: LIST
70917: LIST
70918: PUSH
70919: LD_INT 4
70921: PUSH
70922: LD_INT 0
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: PUSH
70929: LD_INT 4
70931: PUSH
70932: LD_INT 1
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: PUSH
70939: LD_INT 3
70941: PUSH
70942: LD_INT 1
70944: PUSH
70945: EMPTY
70946: LIST
70947: LIST
70948: PUSH
70949: LD_INT 2
70951: PUSH
70952: LD_INT 0
70954: PUSH
70955: EMPTY
70956: LIST
70957: LIST
70958: PUSH
70959: LD_INT 2
70961: PUSH
70962: LD_INT 1
70964: NEG
70965: PUSH
70966: EMPTY
70967: LIST
70968: LIST
70969: PUSH
70970: LD_INT 2
70972: PUSH
70973: LD_INT 2
70975: NEG
70976: PUSH
70977: EMPTY
70978: LIST
70979: LIST
70980: PUSH
70981: LD_INT 4
70983: PUSH
70984: LD_INT 2
70986: PUSH
70987: EMPTY
70988: LIST
70989: LIST
70990: PUSH
70991: LD_INT 4
70993: PUSH
70994: LD_INT 4
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: LD_INT 4
71003: PUSH
71004: LD_INT 3
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 5
71013: PUSH
71014: LD_INT 4
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: PUSH
71021: LD_INT 5
71023: PUSH
71024: LD_INT 5
71026: PUSH
71027: EMPTY
71028: LIST
71029: LIST
71030: PUSH
71031: LD_INT 4
71033: PUSH
71034: LD_INT 5
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: PUSH
71041: LD_INT 3
71043: PUSH
71044: LD_INT 4
71046: PUSH
71047: EMPTY
71048: LIST
71049: LIST
71050: PUSH
71051: LD_INT 3
71053: PUSH
71054: LD_INT 3
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: PUSH
71061: LD_INT 5
71063: PUSH
71064: LD_INT 3
71066: PUSH
71067: EMPTY
71068: LIST
71069: LIST
71070: PUSH
71071: LD_INT 3
71073: PUSH
71074: LD_INT 5
71076: PUSH
71077: EMPTY
71078: LIST
71079: LIST
71080: PUSH
71081: LD_INT 0
71083: PUSH
71084: LD_INT 3
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: PUSH
71091: LD_INT 0
71093: PUSH
71094: LD_INT 2
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: LD_INT 1
71103: PUSH
71104: LD_INT 3
71106: PUSH
71107: EMPTY
71108: LIST
71109: LIST
71110: PUSH
71111: LD_INT 1
71113: PUSH
71114: LD_INT 4
71116: PUSH
71117: EMPTY
71118: LIST
71119: LIST
71120: PUSH
71121: LD_INT 0
71123: PUSH
71124: LD_INT 4
71126: PUSH
71127: EMPTY
71128: LIST
71129: LIST
71130: PUSH
71131: LD_INT 1
71133: NEG
71134: PUSH
71135: LD_INT 3
71137: PUSH
71138: EMPTY
71139: LIST
71140: LIST
71141: PUSH
71142: LD_INT 1
71144: NEG
71145: PUSH
71146: LD_INT 2
71148: PUSH
71149: EMPTY
71150: LIST
71151: LIST
71152: PUSH
71153: LD_INT 2
71155: PUSH
71156: LD_INT 4
71158: PUSH
71159: EMPTY
71160: LIST
71161: LIST
71162: PUSH
71163: LD_INT 2
71165: NEG
71166: PUSH
71167: LD_INT 2
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PUSH
71174: LD_INT 4
71176: NEG
71177: PUSH
71178: LD_INT 0
71180: PUSH
71181: EMPTY
71182: LIST
71183: LIST
71184: PUSH
71185: LD_INT 4
71187: NEG
71188: PUSH
71189: LD_INT 1
71191: NEG
71192: PUSH
71193: EMPTY
71194: LIST
71195: LIST
71196: PUSH
71197: LD_INT 3
71199: NEG
71200: PUSH
71201: LD_INT 0
71203: PUSH
71204: EMPTY
71205: LIST
71206: LIST
71207: PUSH
71208: LD_INT 3
71210: NEG
71211: PUSH
71212: LD_INT 1
71214: PUSH
71215: EMPTY
71216: LIST
71217: LIST
71218: PUSH
71219: LD_INT 4
71221: NEG
71222: PUSH
71223: LD_INT 1
71225: PUSH
71226: EMPTY
71227: LIST
71228: LIST
71229: PUSH
71230: LD_INT 5
71232: NEG
71233: PUSH
71234: LD_INT 0
71236: PUSH
71237: EMPTY
71238: LIST
71239: LIST
71240: PUSH
71241: LD_INT 5
71243: NEG
71244: PUSH
71245: LD_INT 1
71247: NEG
71248: PUSH
71249: EMPTY
71250: LIST
71251: LIST
71252: PUSH
71253: LD_INT 5
71255: NEG
71256: PUSH
71257: LD_INT 2
71259: NEG
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: PUSH
71265: LD_INT 3
71267: NEG
71268: PUSH
71269: LD_INT 2
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: PUSH
71276: EMPTY
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: LIST
71282: LIST
71283: LIST
71284: LIST
71285: LIST
71286: LIST
71287: LIST
71288: LIST
71289: LIST
71290: LIST
71291: LIST
71292: LIST
71293: LIST
71294: LIST
71295: LIST
71296: LIST
71297: LIST
71298: LIST
71299: LIST
71300: LIST
71301: LIST
71302: LIST
71303: LIST
71304: LIST
71305: LIST
71306: LIST
71307: LIST
71308: LIST
71309: LIST
71310: LIST
71311: LIST
71312: LIST
71313: LIST
71314: LIST
71315: LIST
71316: LIST
71317: LIST
71318: LIST
71319: LIST
71320: LIST
71321: LIST
71322: ST_TO_ADDR
// end ; end ;
71323: GO 71326
71325: POP
// case btype of b_depot , b_warehouse :
71326: LD_VAR 0 1
71330: PUSH
71331: LD_INT 0
71333: DOUBLE
71334: EQUAL
71335: IFTRUE 71345
71337: LD_INT 1
71339: DOUBLE
71340: EQUAL
71341: IFTRUE 71345
71343: GO 71546
71345: POP
// case nation of nation_american :
71346: LD_VAR 0 5
71350: PUSH
71351: LD_INT 1
71353: DOUBLE
71354: EQUAL
71355: IFTRUE 71359
71357: GO 71415
71359: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71360: LD_ADDR_VAR 0 9
71364: PUSH
71365: LD_VAR 0 11
71369: PUSH
71370: LD_VAR 0 12
71374: PUSH
71375: LD_VAR 0 13
71379: PUSH
71380: LD_VAR 0 14
71384: PUSH
71385: LD_VAR 0 15
71389: PUSH
71390: LD_VAR 0 16
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: PUSH
71403: LD_VAR 0 4
71407: PUSH
71408: LD_INT 1
71410: PLUS
71411: ARRAY
71412: ST_TO_ADDR
71413: GO 71544
71415: LD_INT 2
71417: DOUBLE
71418: EQUAL
71419: IFTRUE 71423
71421: GO 71479
71423: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71424: LD_ADDR_VAR 0 9
71428: PUSH
71429: LD_VAR 0 17
71433: PUSH
71434: LD_VAR 0 18
71438: PUSH
71439: LD_VAR 0 19
71443: PUSH
71444: LD_VAR 0 20
71448: PUSH
71449: LD_VAR 0 21
71453: PUSH
71454: LD_VAR 0 22
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: LIST
71463: LIST
71464: LIST
71465: LIST
71466: PUSH
71467: LD_VAR 0 4
71471: PUSH
71472: LD_INT 1
71474: PLUS
71475: ARRAY
71476: ST_TO_ADDR
71477: GO 71544
71479: LD_INT 3
71481: DOUBLE
71482: EQUAL
71483: IFTRUE 71487
71485: GO 71543
71487: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71488: LD_ADDR_VAR 0 9
71492: PUSH
71493: LD_VAR 0 23
71497: PUSH
71498: LD_VAR 0 24
71502: PUSH
71503: LD_VAR 0 25
71507: PUSH
71508: LD_VAR 0 26
71512: PUSH
71513: LD_VAR 0 27
71517: PUSH
71518: LD_VAR 0 28
71522: PUSH
71523: EMPTY
71524: LIST
71525: LIST
71526: LIST
71527: LIST
71528: LIST
71529: LIST
71530: PUSH
71531: LD_VAR 0 4
71535: PUSH
71536: LD_INT 1
71538: PLUS
71539: ARRAY
71540: ST_TO_ADDR
71541: GO 71544
71543: POP
71544: GO 72099
71546: LD_INT 2
71548: DOUBLE
71549: EQUAL
71550: IFTRUE 71560
71552: LD_INT 3
71554: DOUBLE
71555: EQUAL
71556: IFTRUE 71560
71558: GO 71616
71560: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71561: LD_ADDR_VAR 0 9
71565: PUSH
71566: LD_VAR 0 29
71570: PUSH
71571: LD_VAR 0 30
71575: PUSH
71576: LD_VAR 0 31
71580: PUSH
71581: LD_VAR 0 32
71585: PUSH
71586: LD_VAR 0 33
71590: PUSH
71591: LD_VAR 0 34
71595: PUSH
71596: EMPTY
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: PUSH
71604: LD_VAR 0 4
71608: PUSH
71609: LD_INT 1
71611: PLUS
71612: ARRAY
71613: ST_TO_ADDR
71614: GO 72099
71616: LD_INT 16
71618: DOUBLE
71619: EQUAL
71620: IFTRUE 71678
71622: LD_INT 17
71624: DOUBLE
71625: EQUAL
71626: IFTRUE 71678
71628: LD_INT 18
71630: DOUBLE
71631: EQUAL
71632: IFTRUE 71678
71634: LD_INT 19
71636: DOUBLE
71637: EQUAL
71638: IFTRUE 71678
71640: LD_INT 22
71642: DOUBLE
71643: EQUAL
71644: IFTRUE 71678
71646: LD_INT 20
71648: DOUBLE
71649: EQUAL
71650: IFTRUE 71678
71652: LD_INT 21
71654: DOUBLE
71655: EQUAL
71656: IFTRUE 71678
71658: LD_INT 23
71660: DOUBLE
71661: EQUAL
71662: IFTRUE 71678
71664: LD_INT 24
71666: DOUBLE
71667: EQUAL
71668: IFTRUE 71678
71670: LD_INT 25
71672: DOUBLE
71673: EQUAL
71674: IFTRUE 71678
71676: GO 71734
71678: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71679: LD_ADDR_VAR 0 9
71683: PUSH
71684: LD_VAR 0 35
71688: PUSH
71689: LD_VAR 0 36
71693: PUSH
71694: LD_VAR 0 37
71698: PUSH
71699: LD_VAR 0 38
71703: PUSH
71704: LD_VAR 0 39
71708: PUSH
71709: LD_VAR 0 40
71713: PUSH
71714: EMPTY
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: PUSH
71722: LD_VAR 0 4
71726: PUSH
71727: LD_INT 1
71729: PLUS
71730: ARRAY
71731: ST_TO_ADDR
71732: GO 72099
71734: LD_INT 6
71736: DOUBLE
71737: EQUAL
71738: IFTRUE 71790
71740: LD_INT 7
71742: DOUBLE
71743: EQUAL
71744: IFTRUE 71790
71746: LD_INT 8
71748: DOUBLE
71749: EQUAL
71750: IFTRUE 71790
71752: LD_INT 13
71754: DOUBLE
71755: EQUAL
71756: IFTRUE 71790
71758: LD_INT 12
71760: DOUBLE
71761: EQUAL
71762: IFTRUE 71790
71764: LD_INT 15
71766: DOUBLE
71767: EQUAL
71768: IFTRUE 71790
71770: LD_INT 11
71772: DOUBLE
71773: EQUAL
71774: IFTRUE 71790
71776: LD_INT 14
71778: DOUBLE
71779: EQUAL
71780: IFTRUE 71790
71782: LD_INT 10
71784: DOUBLE
71785: EQUAL
71786: IFTRUE 71790
71788: GO 71846
71790: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71791: LD_ADDR_VAR 0 9
71795: PUSH
71796: LD_VAR 0 41
71800: PUSH
71801: LD_VAR 0 42
71805: PUSH
71806: LD_VAR 0 43
71810: PUSH
71811: LD_VAR 0 44
71815: PUSH
71816: LD_VAR 0 45
71820: PUSH
71821: LD_VAR 0 46
71825: PUSH
71826: EMPTY
71827: LIST
71828: LIST
71829: LIST
71830: LIST
71831: LIST
71832: LIST
71833: PUSH
71834: LD_VAR 0 4
71838: PUSH
71839: LD_INT 1
71841: PLUS
71842: ARRAY
71843: ST_TO_ADDR
71844: GO 72099
71846: LD_INT 36
71848: DOUBLE
71849: EQUAL
71850: IFTRUE 71854
71852: GO 71910
71854: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71855: LD_ADDR_VAR 0 9
71859: PUSH
71860: LD_VAR 0 47
71864: PUSH
71865: LD_VAR 0 48
71869: PUSH
71870: LD_VAR 0 49
71874: PUSH
71875: LD_VAR 0 50
71879: PUSH
71880: LD_VAR 0 51
71884: PUSH
71885: LD_VAR 0 52
71889: PUSH
71890: EMPTY
71891: LIST
71892: LIST
71893: LIST
71894: LIST
71895: LIST
71896: LIST
71897: PUSH
71898: LD_VAR 0 4
71902: PUSH
71903: LD_INT 1
71905: PLUS
71906: ARRAY
71907: ST_TO_ADDR
71908: GO 72099
71910: LD_INT 4
71912: DOUBLE
71913: EQUAL
71914: IFTRUE 71936
71916: LD_INT 5
71918: DOUBLE
71919: EQUAL
71920: IFTRUE 71936
71922: LD_INT 34
71924: DOUBLE
71925: EQUAL
71926: IFTRUE 71936
71928: LD_INT 37
71930: DOUBLE
71931: EQUAL
71932: IFTRUE 71936
71934: GO 71992
71936: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71937: LD_ADDR_VAR 0 9
71941: PUSH
71942: LD_VAR 0 53
71946: PUSH
71947: LD_VAR 0 54
71951: PUSH
71952: LD_VAR 0 55
71956: PUSH
71957: LD_VAR 0 56
71961: PUSH
71962: LD_VAR 0 57
71966: PUSH
71967: LD_VAR 0 58
71971: PUSH
71972: EMPTY
71973: LIST
71974: LIST
71975: LIST
71976: LIST
71977: LIST
71978: LIST
71979: PUSH
71980: LD_VAR 0 4
71984: PUSH
71985: LD_INT 1
71987: PLUS
71988: ARRAY
71989: ST_TO_ADDR
71990: GO 72099
71992: LD_INT 31
71994: DOUBLE
71995: EQUAL
71996: IFTRUE 72042
71998: LD_INT 32
72000: DOUBLE
72001: EQUAL
72002: IFTRUE 72042
72004: LD_INT 33
72006: DOUBLE
72007: EQUAL
72008: IFTRUE 72042
72010: LD_INT 27
72012: DOUBLE
72013: EQUAL
72014: IFTRUE 72042
72016: LD_INT 26
72018: DOUBLE
72019: EQUAL
72020: IFTRUE 72042
72022: LD_INT 28
72024: DOUBLE
72025: EQUAL
72026: IFTRUE 72042
72028: LD_INT 29
72030: DOUBLE
72031: EQUAL
72032: IFTRUE 72042
72034: LD_INT 30
72036: DOUBLE
72037: EQUAL
72038: IFTRUE 72042
72040: GO 72098
72042: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72043: LD_ADDR_VAR 0 9
72047: PUSH
72048: LD_VAR 0 59
72052: PUSH
72053: LD_VAR 0 60
72057: PUSH
72058: LD_VAR 0 61
72062: PUSH
72063: LD_VAR 0 62
72067: PUSH
72068: LD_VAR 0 63
72072: PUSH
72073: LD_VAR 0 64
72077: PUSH
72078: EMPTY
72079: LIST
72080: LIST
72081: LIST
72082: LIST
72083: LIST
72084: LIST
72085: PUSH
72086: LD_VAR 0 4
72090: PUSH
72091: LD_INT 1
72093: PLUS
72094: ARRAY
72095: ST_TO_ADDR
72096: GO 72099
72098: POP
// temp_list2 = [ ] ;
72099: LD_ADDR_VAR 0 10
72103: PUSH
72104: EMPTY
72105: ST_TO_ADDR
// for i in temp_list do
72106: LD_ADDR_VAR 0 8
72110: PUSH
72111: LD_VAR 0 9
72115: PUSH
72116: FOR_IN
72117: IFFALSE 72169
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72119: LD_ADDR_VAR 0 10
72123: PUSH
72124: LD_VAR 0 10
72128: PUSH
72129: LD_VAR 0 8
72133: PUSH
72134: LD_INT 1
72136: ARRAY
72137: PUSH
72138: LD_VAR 0 2
72142: PLUS
72143: PUSH
72144: LD_VAR 0 8
72148: PUSH
72149: LD_INT 2
72151: ARRAY
72152: PUSH
72153: LD_VAR 0 3
72157: PLUS
72158: PUSH
72159: EMPTY
72160: LIST
72161: LIST
72162: PUSH
72163: EMPTY
72164: LIST
72165: ADD
72166: ST_TO_ADDR
72167: GO 72116
72169: POP
72170: POP
// result = temp_list2 ;
72171: LD_ADDR_VAR 0 7
72175: PUSH
72176: LD_VAR 0 10
72180: ST_TO_ADDR
// end ;
72181: LD_VAR 0 7
72185: RET
// export function EnemyInRange ( unit , dist ) ; begin
72186: LD_INT 0
72188: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72189: LD_ADDR_VAR 0 3
72193: PUSH
72194: LD_VAR 0 1
72198: PPUSH
72199: CALL_OW 255
72203: PPUSH
72204: LD_VAR 0 1
72208: PPUSH
72209: CALL_OW 250
72213: PPUSH
72214: LD_VAR 0 1
72218: PPUSH
72219: CALL_OW 251
72223: PPUSH
72224: LD_VAR 0 2
72228: PPUSH
72229: CALL 46290 0 4
72233: PUSH
72234: LD_INT 4
72236: ARRAY
72237: ST_TO_ADDR
// end ;
72238: LD_VAR 0 3
72242: RET
// export function PlayerSeeMe ( unit ) ; begin
72243: LD_INT 0
72245: PPUSH
// result := See ( your_side , unit ) ;
72246: LD_ADDR_VAR 0 2
72250: PUSH
72251: LD_OWVAR 2
72255: PPUSH
72256: LD_VAR 0 1
72260: PPUSH
72261: CALL_OW 292
72265: ST_TO_ADDR
// end ;
72266: LD_VAR 0 2
72270: RET
// export function ReverseDir ( unit ) ; begin
72271: LD_INT 0
72273: PPUSH
// if not unit then
72274: LD_VAR 0 1
72278: NOT
72279: IFFALSE 72283
// exit ;
72281: GO 72306
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72283: LD_ADDR_VAR 0 2
72287: PUSH
72288: LD_VAR 0 1
72292: PPUSH
72293: CALL_OW 254
72297: PUSH
72298: LD_INT 3
72300: PLUS
72301: PUSH
72302: LD_INT 6
72304: MOD
72305: ST_TO_ADDR
// end ;
72306: LD_VAR 0 2
72310: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
72311: LD_INT 0
72313: PPUSH
72314: PPUSH
72315: PPUSH
72316: PPUSH
72317: PPUSH
// if not hexes then
72318: LD_VAR 0 2
72322: NOT
72323: IFFALSE 72327
// exit ;
72325: GO 72475
// dist := 9999 ;
72327: LD_ADDR_VAR 0 5
72331: PUSH
72332: LD_INT 9999
72334: ST_TO_ADDR
// for i = 1 to hexes do
72335: LD_ADDR_VAR 0 4
72339: PUSH
72340: DOUBLE
72341: LD_INT 1
72343: DEC
72344: ST_TO_ADDR
72345: LD_VAR 0 2
72349: PUSH
72350: FOR_TO
72351: IFFALSE 72463
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
72353: LD_VAR 0 1
72357: PPUSH
72358: LD_VAR 0 2
72362: PUSH
72363: LD_VAR 0 4
72367: ARRAY
72368: PUSH
72369: LD_INT 1
72371: ARRAY
72372: PPUSH
72373: LD_VAR 0 2
72377: PUSH
72378: LD_VAR 0 4
72382: ARRAY
72383: PUSH
72384: LD_INT 2
72386: ARRAY
72387: PPUSH
72388: CALL_OW 297
72392: PUSH
72393: LD_VAR 0 5
72397: LESS
72398: IFFALSE 72461
// begin hex := hexes [ i ] ;
72400: LD_ADDR_VAR 0 7
72404: PUSH
72405: LD_VAR 0 2
72409: PUSH
72410: LD_VAR 0 4
72414: ARRAY
72415: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72416: LD_ADDR_VAR 0 5
72420: PUSH
72421: LD_VAR 0 1
72425: PPUSH
72426: LD_VAR 0 2
72430: PUSH
72431: LD_VAR 0 4
72435: ARRAY
72436: PUSH
72437: LD_INT 1
72439: ARRAY
72440: PPUSH
72441: LD_VAR 0 2
72445: PUSH
72446: LD_VAR 0 4
72450: ARRAY
72451: PUSH
72452: LD_INT 2
72454: ARRAY
72455: PPUSH
72456: CALL_OW 297
72460: ST_TO_ADDR
// end ; end ;
72461: GO 72350
72463: POP
72464: POP
// result := hex ;
72465: LD_ADDR_VAR 0 3
72469: PUSH
72470: LD_VAR 0 7
72474: ST_TO_ADDR
// end ;
72475: LD_VAR 0 3
72479: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72480: LD_INT 0
72482: PPUSH
72483: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72484: LD_VAR 0 1
72488: NOT
72489: PUSH
72490: LD_VAR 0 1
72494: PUSH
72495: LD_INT 21
72497: PUSH
72498: LD_INT 2
72500: PUSH
72501: EMPTY
72502: LIST
72503: LIST
72504: PUSH
72505: LD_INT 23
72507: PUSH
72508: LD_INT 2
72510: PUSH
72511: EMPTY
72512: LIST
72513: LIST
72514: PUSH
72515: EMPTY
72516: LIST
72517: LIST
72518: PPUSH
72519: CALL_OW 69
72523: IN
72524: NOT
72525: OR
72526: IFFALSE 72530
// exit ;
72528: GO 72577
// for i = 1 to 3 do
72530: LD_ADDR_VAR 0 3
72534: PUSH
72535: DOUBLE
72536: LD_INT 1
72538: DEC
72539: ST_TO_ADDR
72540: LD_INT 3
72542: PUSH
72543: FOR_TO
72544: IFFALSE 72575
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72546: LD_VAR 0 1
72550: PPUSH
72551: CALL_OW 250
72555: PPUSH
72556: LD_VAR 0 1
72560: PPUSH
72561: CALL_OW 251
72565: PPUSH
72566: LD_INT 1
72568: PPUSH
72569: CALL_OW 453
72573: GO 72543
72575: POP
72576: POP
// end ;
72577: LD_VAR 0 2
72581: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72582: LD_INT 0
72584: PPUSH
72585: PPUSH
72586: PPUSH
72587: PPUSH
72588: PPUSH
72589: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72590: LD_VAR 0 1
72594: NOT
72595: PUSH
72596: LD_VAR 0 2
72600: NOT
72601: OR
72602: PUSH
72603: LD_VAR 0 1
72607: PPUSH
72608: CALL_OW 314
72612: OR
72613: IFFALSE 72617
// exit ;
72615: GO 73058
// x := GetX ( enemy_unit ) ;
72617: LD_ADDR_VAR 0 7
72621: PUSH
72622: LD_VAR 0 2
72626: PPUSH
72627: CALL_OW 250
72631: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72632: LD_ADDR_VAR 0 8
72636: PUSH
72637: LD_VAR 0 2
72641: PPUSH
72642: CALL_OW 251
72646: ST_TO_ADDR
// if not x or not y then
72647: LD_VAR 0 7
72651: NOT
72652: PUSH
72653: LD_VAR 0 8
72657: NOT
72658: OR
72659: IFFALSE 72663
// exit ;
72661: GO 73058
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72663: LD_ADDR_VAR 0 6
72667: PUSH
72668: LD_VAR 0 7
72672: PPUSH
72673: LD_INT 0
72675: PPUSH
72676: LD_INT 4
72678: PPUSH
72679: CALL_OW 272
72683: PUSH
72684: LD_VAR 0 8
72688: PPUSH
72689: LD_INT 0
72691: PPUSH
72692: LD_INT 4
72694: PPUSH
72695: CALL_OW 273
72699: PUSH
72700: EMPTY
72701: LIST
72702: LIST
72703: PUSH
72704: LD_VAR 0 7
72708: PPUSH
72709: LD_INT 1
72711: PPUSH
72712: LD_INT 4
72714: PPUSH
72715: CALL_OW 272
72719: PUSH
72720: LD_VAR 0 8
72724: PPUSH
72725: LD_INT 1
72727: PPUSH
72728: LD_INT 4
72730: PPUSH
72731: CALL_OW 273
72735: PUSH
72736: EMPTY
72737: LIST
72738: LIST
72739: PUSH
72740: LD_VAR 0 7
72744: PPUSH
72745: LD_INT 2
72747: PPUSH
72748: LD_INT 4
72750: PPUSH
72751: CALL_OW 272
72755: PUSH
72756: LD_VAR 0 8
72760: PPUSH
72761: LD_INT 2
72763: PPUSH
72764: LD_INT 4
72766: PPUSH
72767: CALL_OW 273
72771: PUSH
72772: EMPTY
72773: LIST
72774: LIST
72775: PUSH
72776: LD_VAR 0 7
72780: PPUSH
72781: LD_INT 3
72783: PPUSH
72784: LD_INT 4
72786: PPUSH
72787: CALL_OW 272
72791: PUSH
72792: LD_VAR 0 8
72796: PPUSH
72797: LD_INT 3
72799: PPUSH
72800: LD_INT 4
72802: PPUSH
72803: CALL_OW 273
72807: PUSH
72808: EMPTY
72809: LIST
72810: LIST
72811: PUSH
72812: LD_VAR 0 7
72816: PPUSH
72817: LD_INT 4
72819: PPUSH
72820: LD_INT 4
72822: PPUSH
72823: CALL_OW 272
72827: PUSH
72828: LD_VAR 0 8
72832: PPUSH
72833: LD_INT 4
72835: PPUSH
72836: LD_INT 4
72838: PPUSH
72839: CALL_OW 273
72843: PUSH
72844: EMPTY
72845: LIST
72846: LIST
72847: PUSH
72848: LD_VAR 0 7
72852: PPUSH
72853: LD_INT 5
72855: PPUSH
72856: LD_INT 4
72858: PPUSH
72859: CALL_OW 272
72863: PUSH
72864: LD_VAR 0 8
72868: PPUSH
72869: LD_INT 5
72871: PPUSH
72872: LD_INT 4
72874: PPUSH
72875: CALL_OW 273
72879: PUSH
72880: EMPTY
72881: LIST
72882: LIST
72883: PUSH
72884: EMPTY
72885: LIST
72886: LIST
72887: LIST
72888: LIST
72889: LIST
72890: LIST
72891: ST_TO_ADDR
// for i = tmp downto 1 do
72892: LD_ADDR_VAR 0 4
72896: PUSH
72897: DOUBLE
72898: LD_VAR 0 6
72902: INC
72903: ST_TO_ADDR
72904: LD_INT 1
72906: PUSH
72907: FOR_DOWNTO
72908: IFFALSE 73009
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72910: LD_VAR 0 6
72914: PUSH
72915: LD_VAR 0 4
72919: ARRAY
72920: PUSH
72921: LD_INT 1
72923: ARRAY
72924: PPUSH
72925: LD_VAR 0 6
72929: PUSH
72930: LD_VAR 0 4
72934: ARRAY
72935: PUSH
72936: LD_INT 2
72938: ARRAY
72939: PPUSH
72940: CALL_OW 488
72944: NOT
72945: PUSH
72946: LD_VAR 0 6
72950: PUSH
72951: LD_VAR 0 4
72955: ARRAY
72956: PUSH
72957: LD_INT 1
72959: ARRAY
72960: PPUSH
72961: LD_VAR 0 6
72965: PUSH
72966: LD_VAR 0 4
72970: ARRAY
72971: PUSH
72972: LD_INT 2
72974: ARRAY
72975: PPUSH
72976: CALL_OW 428
72980: PUSH
72981: LD_INT 0
72983: NONEQUAL
72984: OR
72985: IFFALSE 73007
// tmp := Delete ( tmp , i ) ;
72987: LD_ADDR_VAR 0 6
72991: PUSH
72992: LD_VAR 0 6
72996: PPUSH
72997: LD_VAR 0 4
73001: PPUSH
73002: CALL_OW 3
73006: ST_TO_ADDR
73007: GO 72907
73009: POP
73010: POP
// j := GetClosestHex ( unit , tmp ) ;
73011: LD_ADDR_VAR 0 5
73015: PUSH
73016: LD_VAR 0 1
73020: PPUSH
73021: LD_VAR 0 6
73025: PPUSH
73026: CALL 72311 0 2
73030: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73031: LD_VAR 0 1
73035: PPUSH
73036: LD_VAR 0 5
73040: PUSH
73041: LD_INT 1
73043: ARRAY
73044: PPUSH
73045: LD_VAR 0 5
73049: PUSH
73050: LD_INT 2
73052: ARRAY
73053: PPUSH
73054: CALL_OW 111
// end ;
73058: LD_VAR 0 3
73062: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73063: LD_INT 0
73065: PPUSH
73066: PPUSH
73067: PPUSH
// uc_side = 0 ;
73068: LD_ADDR_OWVAR 20
73072: PUSH
73073: LD_INT 0
73075: ST_TO_ADDR
// uc_nation = 0 ;
73076: LD_ADDR_OWVAR 21
73080: PUSH
73081: LD_INT 0
73083: ST_TO_ADDR
// InitHc_All ( ) ;
73084: CALL_OW 584
// InitVc ;
73088: CALL_OW 20
// if mastodonts then
73092: LD_VAR 0 6
73096: IFFALSE 73163
// for i = 1 to mastodonts do
73098: LD_ADDR_VAR 0 11
73102: PUSH
73103: DOUBLE
73104: LD_INT 1
73106: DEC
73107: ST_TO_ADDR
73108: LD_VAR 0 6
73112: PUSH
73113: FOR_TO
73114: IFFALSE 73161
// begin vc_chassis := 31 ;
73116: LD_ADDR_OWVAR 37
73120: PUSH
73121: LD_INT 31
73123: ST_TO_ADDR
// vc_control := control_rider ;
73124: LD_ADDR_OWVAR 38
73128: PUSH
73129: LD_INT 4
73131: ST_TO_ADDR
// animal := CreateVehicle ;
73132: LD_ADDR_VAR 0 12
73136: PUSH
73137: CALL_OW 45
73141: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73142: LD_VAR 0 12
73146: PPUSH
73147: LD_VAR 0 8
73151: PPUSH
73152: LD_INT 0
73154: PPUSH
73155: CALL 75351 0 3
// end ;
73159: GO 73113
73161: POP
73162: POP
// if horses then
73163: LD_VAR 0 5
73167: IFFALSE 73234
// for i = 1 to horses do
73169: LD_ADDR_VAR 0 11
73173: PUSH
73174: DOUBLE
73175: LD_INT 1
73177: DEC
73178: ST_TO_ADDR
73179: LD_VAR 0 5
73183: PUSH
73184: FOR_TO
73185: IFFALSE 73232
// begin hc_class := 21 ;
73187: LD_ADDR_OWVAR 28
73191: PUSH
73192: LD_INT 21
73194: ST_TO_ADDR
// hc_gallery :=  ;
73195: LD_ADDR_OWVAR 33
73199: PUSH
73200: LD_STRING 
73202: ST_TO_ADDR
// animal := CreateHuman ;
73203: LD_ADDR_VAR 0 12
73207: PUSH
73208: CALL_OW 44
73212: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73213: LD_VAR 0 12
73217: PPUSH
73218: LD_VAR 0 8
73222: PPUSH
73223: LD_INT 0
73225: PPUSH
73226: CALL 75351 0 3
// end ;
73230: GO 73184
73232: POP
73233: POP
// if birds then
73234: LD_VAR 0 1
73238: IFFALSE 73305
// for i = 1 to birds do
73240: LD_ADDR_VAR 0 11
73244: PUSH
73245: DOUBLE
73246: LD_INT 1
73248: DEC
73249: ST_TO_ADDR
73250: LD_VAR 0 1
73254: PUSH
73255: FOR_TO
73256: IFFALSE 73303
// begin hc_class = 18 ;
73258: LD_ADDR_OWVAR 28
73262: PUSH
73263: LD_INT 18
73265: ST_TO_ADDR
// hc_gallery =  ;
73266: LD_ADDR_OWVAR 33
73270: PUSH
73271: LD_STRING 
73273: ST_TO_ADDR
// animal := CreateHuman ;
73274: LD_ADDR_VAR 0 12
73278: PUSH
73279: CALL_OW 44
73283: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73284: LD_VAR 0 12
73288: PPUSH
73289: LD_VAR 0 8
73293: PPUSH
73294: LD_INT 0
73296: PPUSH
73297: CALL 75351 0 3
// end ;
73301: GO 73255
73303: POP
73304: POP
// if tigers then
73305: LD_VAR 0 2
73309: IFFALSE 73393
// for i = 1 to tigers do
73311: LD_ADDR_VAR 0 11
73315: PUSH
73316: DOUBLE
73317: LD_INT 1
73319: DEC
73320: ST_TO_ADDR
73321: LD_VAR 0 2
73325: PUSH
73326: FOR_TO
73327: IFFALSE 73391
// begin hc_class = class_tiger ;
73329: LD_ADDR_OWVAR 28
73333: PUSH
73334: LD_INT 14
73336: ST_TO_ADDR
// hc_gallery =  ;
73337: LD_ADDR_OWVAR 33
73341: PUSH
73342: LD_STRING 
73344: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73345: LD_ADDR_OWVAR 35
73349: PUSH
73350: LD_INT 7
73352: NEG
73353: PPUSH
73354: LD_INT 7
73356: PPUSH
73357: CALL_OW 12
73361: ST_TO_ADDR
// animal := CreateHuman ;
73362: LD_ADDR_VAR 0 12
73366: PUSH
73367: CALL_OW 44
73371: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73372: LD_VAR 0 12
73376: PPUSH
73377: LD_VAR 0 8
73381: PPUSH
73382: LD_INT 0
73384: PPUSH
73385: CALL 75351 0 3
// end ;
73389: GO 73326
73391: POP
73392: POP
// if apemans then
73393: LD_VAR 0 3
73397: IFFALSE 73520
// for i = 1 to apemans do
73399: LD_ADDR_VAR 0 11
73403: PUSH
73404: DOUBLE
73405: LD_INT 1
73407: DEC
73408: ST_TO_ADDR
73409: LD_VAR 0 3
73413: PUSH
73414: FOR_TO
73415: IFFALSE 73518
// begin hc_class = class_apeman ;
73417: LD_ADDR_OWVAR 28
73421: PUSH
73422: LD_INT 12
73424: ST_TO_ADDR
// hc_gallery =  ;
73425: LD_ADDR_OWVAR 33
73429: PUSH
73430: LD_STRING 
73432: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
73433: LD_ADDR_OWVAR 35
73437: PUSH
73438: LD_INT 5
73440: NEG
73441: PPUSH
73442: LD_INT 5
73444: PPUSH
73445: CALL_OW 12
73449: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73450: LD_ADDR_OWVAR 31
73454: PUSH
73455: LD_INT 1
73457: PPUSH
73458: LD_INT 3
73460: PPUSH
73461: CALL_OW 12
73465: PUSH
73466: LD_INT 1
73468: PPUSH
73469: LD_INT 3
73471: PPUSH
73472: CALL_OW 12
73476: PUSH
73477: LD_INT 0
73479: PUSH
73480: LD_INT 0
73482: PUSH
73483: EMPTY
73484: LIST
73485: LIST
73486: LIST
73487: LIST
73488: ST_TO_ADDR
// animal := CreateHuman ;
73489: LD_ADDR_VAR 0 12
73493: PUSH
73494: CALL_OW 44
73498: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73499: LD_VAR 0 12
73503: PPUSH
73504: LD_VAR 0 8
73508: PPUSH
73509: LD_INT 0
73511: PPUSH
73512: CALL 75351 0 3
// end ;
73516: GO 73414
73518: POP
73519: POP
// if enchidnas then
73520: LD_VAR 0 4
73524: IFFALSE 73591
// for i = 1 to enchidnas do
73526: LD_ADDR_VAR 0 11
73530: PUSH
73531: DOUBLE
73532: LD_INT 1
73534: DEC
73535: ST_TO_ADDR
73536: LD_VAR 0 4
73540: PUSH
73541: FOR_TO
73542: IFFALSE 73589
// begin hc_class = 13 ;
73544: LD_ADDR_OWVAR 28
73548: PUSH
73549: LD_INT 13
73551: ST_TO_ADDR
// hc_gallery =  ;
73552: LD_ADDR_OWVAR 33
73556: PUSH
73557: LD_STRING 
73559: ST_TO_ADDR
// animal := CreateHuman ;
73560: LD_ADDR_VAR 0 12
73564: PUSH
73565: CALL_OW 44
73569: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73570: LD_VAR 0 12
73574: PPUSH
73575: LD_VAR 0 8
73579: PPUSH
73580: LD_INT 0
73582: PPUSH
73583: CALL 75351 0 3
// end ;
73587: GO 73541
73589: POP
73590: POP
// if fishes then
73591: LD_VAR 0 7
73595: IFFALSE 73662
// for i = 1 to fishes do
73597: LD_ADDR_VAR 0 11
73601: PUSH
73602: DOUBLE
73603: LD_INT 1
73605: DEC
73606: ST_TO_ADDR
73607: LD_VAR 0 7
73611: PUSH
73612: FOR_TO
73613: IFFALSE 73660
// begin hc_class = 20 ;
73615: LD_ADDR_OWVAR 28
73619: PUSH
73620: LD_INT 20
73622: ST_TO_ADDR
// hc_gallery =  ;
73623: LD_ADDR_OWVAR 33
73627: PUSH
73628: LD_STRING 
73630: ST_TO_ADDR
// animal := CreateHuman ;
73631: LD_ADDR_VAR 0 12
73635: PUSH
73636: CALL_OW 44
73640: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73641: LD_VAR 0 12
73645: PPUSH
73646: LD_VAR 0 9
73650: PPUSH
73651: LD_INT 0
73653: PPUSH
73654: CALL 75351 0 3
// end ;
73658: GO 73612
73660: POP
73661: POP
// end ;
73662: LD_VAR 0 10
73666: RET
// export function WantHeal ( sci , unit ) ; begin
73667: LD_INT 0
73669: PPUSH
// if GetTaskList ( sci ) > 0 then
73670: LD_VAR 0 1
73674: PPUSH
73675: CALL_OW 437
73679: PUSH
73680: LD_INT 0
73682: GREATER
73683: IFFALSE 73753
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73685: LD_VAR 0 1
73689: PPUSH
73690: CALL_OW 437
73694: PUSH
73695: LD_INT 1
73697: ARRAY
73698: PUSH
73699: LD_INT 1
73701: ARRAY
73702: PUSH
73703: LD_STRING l
73705: EQUAL
73706: PUSH
73707: LD_VAR 0 1
73711: PPUSH
73712: CALL_OW 437
73716: PUSH
73717: LD_INT 1
73719: ARRAY
73720: PUSH
73721: LD_INT 4
73723: ARRAY
73724: PUSH
73725: LD_VAR 0 2
73729: EQUAL
73730: AND
73731: IFFALSE 73743
// result := true else
73733: LD_ADDR_VAR 0 3
73737: PUSH
73738: LD_INT 1
73740: ST_TO_ADDR
73741: GO 73751
// result := false ;
73743: LD_ADDR_VAR 0 3
73747: PUSH
73748: LD_INT 0
73750: ST_TO_ADDR
// end else
73751: GO 73761
// result := false ;
73753: LD_ADDR_VAR 0 3
73757: PUSH
73758: LD_INT 0
73760: ST_TO_ADDR
// end ;
73761: LD_VAR 0 3
73765: RET
// export function HealTarget ( sci ) ; begin
73766: LD_INT 0
73768: PPUSH
// if not sci then
73769: LD_VAR 0 1
73773: NOT
73774: IFFALSE 73778
// exit ;
73776: GO 73843
// result := 0 ;
73778: LD_ADDR_VAR 0 2
73782: PUSH
73783: LD_INT 0
73785: ST_TO_ADDR
// if GetTaskList ( sci ) then
73786: LD_VAR 0 1
73790: PPUSH
73791: CALL_OW 437
73795: IFFALSE 73843
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73797: LD_VAR 0 1
73801: PPUSH
73802: CALL_OW 437
73806: PUSH
73807: LD_INT 1
73809: ARRAY
73810: PUSH
73811: LD_INT 1
73813: ARRAY
73814: PUSH
73815: LD_STRING l
73817: EQUAL
73818: IFFALSE 73843
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73820: LD_ADDR_VAR 0 2
73824: PUSH
73825: LD_VAR 0 1
73829: PPUSH
73830: CALL_OW 437
73834: PUSH
73835: LD_INT 1
73837: ARRAY
73838: PUSH
73839: LD_INT 4
73841: ARRAY
73842: ST_TO_ADDR
// end ;
73843: LD_VAR 0 2
73847: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73848: LD_INT 0
73850: PPUSH
73851: PPUSH
73852: PPUSH
73853: PPUSH
// if not base_units then
73854: LD_VAR 0 1
73858: NOT
73859: IFFALSE 73863
// exit ;
73861: GO 73950
// result := false ;
73863: LD_ADDR_VAR 0 2
73867: PUSH
73868: LD_INT 0
73870: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73871: LD_ADDR_VAR 0 5
73875: PUSH
73876: LD_VAR 0 1
73880: PPUSH
73881: LD_INT 21
73883: PUSH
73884: LD_INT 3
73886: PUSH
73887: EMPTY
73888: LIST
73889: LIST
73890: PPUSH
73891: CALL_OW 72
73895: ST_TO_ADDR
// if not tmp then
73896: LD_VAR 0 5
73900: NOT
73901: IFFALSE 73905
// exit ;
73903: GO 73950
// for i in tmp do
73905: LD_ADDR_VAR 0 3
73909: PUSH
73910: LD_VAR 0 5
73914: PUSH
73915: FOR_IN
73916: IFFALSE 73948
// begin result := EnemyInRange ( i , 22 ) ;
73918: LD_ADDR_VAR 0 2
73922: PUSH
73923: LD_VAR 0 3
73927: PPUSH
73928: LD_INT 22
73930: PPUSH
73931: CALL 72186 0 2
73935: ST_TO_ADDR
// if result then
73936: LD_VAR 0 2
73940: IFFALSE 73946
// exit ;
73942: POP
73943: POP
73944: GO 73950
// end ;
73946: GO 73915
73948: POP
73949: POP
// end ;
73950: LD_VAR 0 2
73954: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
73955: LD_INT 0
73957: PPUSH
73958: PPUSH
// if not units then
73959: LD_VAR 0 1
73963: NOT
73964: IFFALSE 73968
// exit ;
73966: GO 74038
// result := [ ] ;
73968: LD_ADDR_VAR 0 3
73972: PUSH
73973: EMPTY
73974: ST_TO_ADDR
// for i in units do
73975: LD_ADDR_VAR 0 4
73979: PUSH
73980: LD_VAR 0 1
73984: PUSH
73985: FOR_IN
73986: IFFALSE 74036
// if GetTag ( i ) = tag then
73988: LD_VAR 0 4
73992: PPUSH
73993: CALL_OW 110
73997: PUSH
73998: LD_VAR 0 2
74002: EQUAL
74003: IFFALSE 74034
// result := Insert ( result , result + 1 , i ) ;
74005: LD_ADDR_VAR 0 3
74009: PUSH
74010: LD_VAR 0 3
74014: PPUSH
74015: LD_VAR 0 3
74019: PUSH
74020: LD_INT 1
74022: PLUS
74023: PPUSH
74024: LD_VAR 0 4
74028: PPUSH
74029: CALL_OW 2
74033: ST_TO_ADDR
74034: GO 73985
74036: POP
74037: POP
// end ;
74038: LD_VAR 0 3
74042: RET
// export function IsDriver ( un ) ; begin
74043: LD_INT 0
74045: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74046: LD_ADDR_VAR 0 2
74050: PUSH
74051: LD_VAR 0 1
74055: PUSH
74056: LD_INT 55
74058: PUSH
74059: EMPTY
74060: LIST
74061: PPUSH
74062: CALL_OW 69
74066: IN
74067: ST_TO_ADDR
// end ;
74068: LD_VAR 0 2
74072: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74073: LD_INT 0
74075: PPUSH
74076: PPUSH
// list := [ ] ;
74077: LD_ADDR_VAR 0 5
74081: PUSH
74082: EMPTY
74083: ST_TO_ADDR
// case d of 0 :
74084: LD_VAR 0 3
74088: PUSH
74089: LD_INT 0
74091: DOUBLE
74092: EQUAL
74093: IFTRUE 74097
74095: GO 74230
74097: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74098: LD_ADDR_VAR 0 5
74102: PUSH
74103: LD_VAR 0 1
74107: PUSH
74108: LD_INT 4
74110: MINUS
74111: PUSH
74112: LD_VAR 0 2
74116: PUSH
74117: LD_INT 4
74119: MINUS
74120: PUSH
74121: LD_INT 2
74123: PUSH
74124: EMPTY
74125: LIST
74126: LIST
74127: LIST
74128: PUSH
74129: LD_VAR 0 1
74133: PUSH
74134: LD_INT 3
74136: MINUS
74137: PUSH
74138: LD_VAR 0 2
74142: PUSH
74143: LD_INT 1
74145: PUSH
74146: EMPTY
74147: LIST
74148: LIST
74149: LIST
74150: PUSH
74151: LD_VAR 0 1
74155: PUSH
74156: LD_INT 4
74158: PLUS
74159: PUSH
74160: LD_VAR 0 2
74164: PUSH
74165: LD_INT 4
74167: PUSH
74168: EMPTY
74169: LIST
74170: LIST
74171: LIST
74172: PUSH
74173: LD_VAR 0 1
74177: PUSH
74178: LD_INT 3
74180: PLUS
74181: PUSH
74182: LD_VAR 0 2
74186: PUSH
74187: LD_INT 3
74189: PLUS
74190: PUSH
74191: LD_INT 5
74193: PUSH
74194: EMPTY
74195: LIST
74196: LIST
74197: LIST
74198: PUSH
74199: LD_VAR 0 1
74203: PUSH
74204: LD_VAR 0 2
74208: PUSH
74209: LD_INT 4
74211: PLUS
74212: PUSH
74213: LD_INT 0
74215: PUSH
74216: EMPTY
74217: LIST
74218: LIST
74219: LIST
74220: PUSH
74221: EMPTY
74222: LIST
74223: LIST
74224: LIST
74225: LIST
74226: LIST
74227: ST_TO_ADDR
// end ; 1 :
74228: GO 74928
74230: LD_INT 1
74232: DOUBLE
74233: EQUAL
74234: IFTRUE 74238
74236: GO 74371
74238: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74239: LD_ADDR_VAR 0 5
74243: PUSH
74244: LD_VAR 0 1
74248: PUSH
74249: LD_VAR 0 2
74253: PUSH
74254: LD_INT 4
74256: MINUS
74257: PUSH
74258: LD_INT 3
74260: PUSH
74261: EMPTY
74262: LIST
74263: LIST
74264: LIST
74265: PUSH
74266: LD_VAR 0 1
74270: PUSH
74271: LD_INT 3
74273: MINUS
74274: PUSH
74275: LD_VAR 0 2
74279: PUSH
74280: LD_INT 3
74282: MINUS
74283: PUSH
74284: LD_INT 2
74286: PUSH
74287: EMPTY
74288: LIST
74289: LIST
74290: LIST
74291: PUSH
74292: LD_VAR 0 1
74296: PUSH
74297: LD_INT 4
74299: MINUS
74300: PUSH
74301: LD_VAR 0 2
74305: PUSH
74306: LD_INT 1
74308: PUSH
74309: EMPTY
74310: LIST
74311: LIST
74312: LIST
74313: PUSH
74314: LD_VAR 0 1
74318: PUSH
74319: LD_VAR 0 2
74323: PUSH
74324: LD_INT 3
74326: PLUS
74327: PUSH
74328: LD_INT 0
74330: PUSH
74331: EMPTY
74332: LIST
74333: LIST
74334: LIST
74335: PUSH
74336: LD_VAR 0 1
74340: PUSH
74341: LD_INT 4
74343: PLUS
74344: PUSH
74345: LD_VAR 0 2
74349: PUSH
74350: LD_INT 4
74352: PLUS
74353: PUSH
74354: LD_INT 5
74356: PUSH
74357: EMPTY
74358: LIST
74359: LIST
74360: LIST
74361: PUSH
74362: EMPTY
74363: LIST
74364: LIST
74365: LIST
74366: LIST
74367: LIST
74368: ST_TO_ADDR
// end ; 2 :
74369: GO 74928
74371: LD_INT 2
74373: DOUBLE
74374: EQUAL
74375: IFTRUE 74379
74377: GO 74508
74379: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74380: LD_ADDR_VAR 0 5
74384: PUSH
74385: LD_VAR 0 1
74389: PUSH
74390: LD_VAR 0 2
74394: PUSH
74395: LD_INT 3
74397: MINUS
74398: PUSH
74399: LD_INT 3
74401: PUSH
74402: EMPTY
74403: LIST
74404: LIST
74405: LIST
74406: PUSH
74407: LD_VAR 0 1
74411: PUSH
74412: LD_INT 4
74414: PLUS
74415: PUSH
74416: LD_VAR 0 2
74420: PUSH
74421: LD_INT 4
74423: PUSH
74424: EMPTY
74425: LIST
74426: LIST
74427: LIST
74428: PUSH
74429: LD_VAR 0 1
74433: PUSH
74434: LD_VAR 0 2
74438: PUSH
74439: LD_INT 4
74441: PLUS
74442: PUSH
74443: LD_INT 0
74445: PUSH
74446: EMPTY
74447: LIST
74448: LIST
74449: LIST
74450: PUSH
74451: LD_VAR 0 1
74455: PUSH
74456: LD_INT 3
74458: MINUS
74459: PUSH
74460: LD_VAR 0 2
74464: PUSH
74465: LD_INT 1
74467: PUSH
74468: EMPTY
74469: LIST
74470: LIST
74471: LIST
74472: PUSH
74473: LD_VAR 0 1
74477: PUSH
74478: LD_INT 4
74480: MINUS
74481: PUSH
74482: LD_VAR 0 2
74486: PUSH
74487: LD_INT 4
74489: MINUS
74490: PUSH
74491: LD_INT 2
74493: PUSH
74494: EMPTY
74495: LIST
74496: LIST
74497: LIST
74498: PUSH
74499: EMPTY
74500: LIST
74501: LIST
74502: LIST
74503: LIST
74504: LIST
74505: ST_TO_ADDR
// end ; 3 :
74506: GO 74928
74508: LD_INT 3
74510: DOUBLE
74511: EQUAL
74512: IFTRUE 74516
74514: GO 74649
74516: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74517: LD_ADDR_VAR 0 5
74521: PUSH
74522: LD_VAR 0 1
74526: PUSH
74527: LD_INT 3
74529: PLUS
74530: PUSH
74531: LD_VAR 0 2
74535: PUSH
74536: LD_INT 4
74538: PUSH
74539: EMPTY
74540: LIST
74541: LIST
74542: LIST
74543: PUSH
74544: LD_VAR 0 1
74548: PUSH
74549: LD_INT 4
74551: PLUS
74552: PUSH
74553: LD_VAR 0 2
74557: PUSH
74558: LD_INT 4
74560: PLUS
74561: PUSH
74562: LD_INT 5
74564: PUSH
74565: EMPTY
74566: LIST
74567: LIST
74568: LIST
74569: PUSH
74570: LD_VAR 0 1
74574: PUSH
74575: LD_INT 4
74577: MINUS
74578: PUSH
74579: LD_VAR 0 2
74583: PUSH
74584: LD_INT 1
74586: PUSH
74587: EMPTY
74588: LIST
74589: LIST
74590: LIST
74591: PUSH
74592: LD_VAR 0 1
74596: PUSH
74597: LD_VAR 0 2
74601: PUSH
74602: LD_INT 4
74604: MINUS
74605: PUSH
74606: LD_INT 3
74608: PUSH
74609: EMPTY
74610: LIST
74611: LIST
74612: LIST
74613: PUSH
74614: LD_VAR 0 1
74618: PUSH
74619: LD_INT 3
74621: MINUS
74622: PUSH
74623: LD_VAR 0 2
74627: PUSH
74628: LD_INT 3
74630: MINUS
74631: PUSH
74632: LD_INT 2
74634: PUSH
74635: EMPTY
74636: LIST
74637: LIST
74638: LIST
74639: PUSH
74640: EMPTY
74641: LIST
74642: LIST
74643: LIST
74644: LIST
74645: LIST
74646: ST_TO_ADDR
// end ; 4 :
74647: GO 74928
74649: LD_INT 4
74651: DOUBLE
74652: EQUAL
74653: IFTRUE 74657
74655: GO 74790
74657: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74658: LD_ADDR_VAR 0 5
74662: PUSH
74663: LD_VAR 0 1
74667: PUSH
74668: LD_VAR 0 2
74672: PUSH
74673: LD_INT 4
74675: PLUS
74676: PUSH
74677: LD_INT 0
74679: PUSH
74680: EMPTY
74681: LIST
74682: LIST
74683: LIST
74684: PUSH
74685: LD_VAR 0 1
74689: PUSH
74690: LD_INT 3
74692: PLUS
74693: PUSH
74694: LD_VAR 0 2
74698: PUSH
74699: LD_INT 3
74701: PLUS
74702: PUSH
74703: LD_INT 5
74705: PUSH
74706: EMPTY
74707: LIST
74708: LIST
74709: LIST
74710: PUSH
74711: LD_VAR 0 1
74715: PUSH
74716: LD_INT 4
74718: PLUS
74719: PUSH
74720: LD_VAR 0 2
74724: PUSH
74725: LD_INT 4
74727: PUSH
74728: EMPTY
74729: LIST
74730: LIST
74731: LIST
74732: PUSH
74733: LD_VAR 0 1
74737: PUSH
74738: LD_VAR 0 2
74742: PUSH
74743: LD_INT 3
74745: MINUS
74746: PUSH
74747: LD_INT 3
74749: PUSH
74750: EMPTY
74751: LIST
74752: LIST
74753: LIST
74754: PUSH
74755: LD_VAR 0 1
74759: PUSH
74760: LD_INT 4
74762: MINUS
74763: PUSH
74764: LD_VAR 0 2
74768: PUSH
74769: LD_INT 4
74771: MINUS
74772: PUSH
74773: LD_INT 2
74775: PUSH
74776: EMPTY
74777: LIST
74778: LIST
74779: LIST
74780: PUSH
74781: EMPTY
74782: LIST
74783: LIST
74784: LIST
74785: LIST
74786: LIST
74787: ST_TO_ADDR
// end ; 5 :
74788: GO 74928
74790: LD_INT 5
74792: DOUBLE
74793: EQUAL
74794: IFTRUE 74798
74796: GO 74927
74798: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74799: LD_ADDR_VAR 0 5
74803: PUSH
74804: LD_VAR 0 1
74808: PUSH
74809: LD_INT 4
74811: MINUS
74812: PUSH
74813: LD_VAR 0 2
74817: PUSH
74818: LD_INT 1
74820: PUSH
74821: EMPTY
74822: LIST
74823: LIST
74824: LIST
74825: PUSH
74826: LD_VAR 0 1
74830: PUSH
74831: LD_VAR 0 2
74835: PUSH
74836: LD_INT 4
74838: MINUS
74839: PUSH
74840: LD_INT 3
74842: PUSH
74843: EMPTY
74844: LIST
74845: LIST
74846: LIST
74847: PUSH
74848: LD_VAR 0 1
74852: PUSH
74853: LD_INT 4
74855: PLUS
74856: PUSH
74857: LD_VAR 0 2
74861: PUSH
74862: LD_INT 4
74864: PLUS
74865: PUSH
74866: LD_INT 5
74868: PUSH
74869: EMPTY
74870: LIST
74871: LIST
74872: LIST
74873: PUSH
74874: LD_VAR 0 1
74878: PUSH
74879: LD_INT 3
74881: PLUS
74882: PUSH
74883: LD_VAR 0 2
74887: PUSH
74888: LD_INT 4
74890: PUSH
74891: EMPTY
74892: LIST
74893: LIST
74894: LIST
74895: PUSH
74896: LD_VAR 0 1
74900: PUSH
74901: LD_VAR 0 2
74905: PUSH
74906: LD_INT 3
74908: PLUS
74909: PUSH
74910: LD_INT 0
74912: PUSH
74913: EMPTY
74914: LIST
74915: LIST
74916: LIST
74917: PUSH
74918: EMPTY
74919: LIST
74920: LIST
74921: LIST
74922: LIST
74923: LIST
74924: ST_TO_ADDR
// end ; end ;
74925: GO 74928
74927: POP
// result := list ;
74928: LD_ADDR_VAR 0 4
74932: PUSH
74933: LD_VAR 0 5
74937: ST_TO_ADDR
// end ;
74938: LD_VAR 0 4
74942: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74943: LD_INT 0
74945: PPUSH
74946: PPUSH
74947: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74948: LD_VAR 0 1
74952: NOT
74953: PUSH
74954: LD_VAR 0 2
74958: PUSH
74959: LD_INT 1
74961: PUSH
74962: LD_INT 2
74964: PUSH
74965: LD_INT 3
74967: PUSH
74968: LD_INT 4
74970: PUSH
74971: EMPTY
74972: LIST
74973: LIST
74974: LIST
74975: LIST
74976: IN
74977: NOT
74978: OR
74979: IFFALSE 74983
// exit ;
74981: GO 75075
// tmp := [ ] ;
74983: LD_ADDR_VAR 0 5
74987: PUSH
74988: EMPTY
74989: ST_TO_ADDR
// for i in units do
74990: LD_ADDR_VAR 0 4
74994: PUSH
74995: LD_VAR 0 1
74999: PUSH
75000: FOR_IN
75001: IFFALSE 75044
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
75003: LD_ADDR_VAR 0 5
75007: PUSH
75008: LD_VAR 0 5
75012: PPUSH
75013: LD_VAR 0 5
75017: PUSH
75018: LD_INT 1
75020: PLUS
75021: PPUSH
75022: LD_VAR 0 4
75026: PPUSH
75027: LD_VAR 0 2
75031: PPUSH
75032: CALL_OW 259
75036: PPUSH
75037: CALL_OW 2
75041: ST_TO_ADDR
75042: GO 75000
75044: POP
75045: POP
// if not tmp then
75046: LD_VAR 0 5
75050: NOT
75051: IFFALSE 75055
// exit ;
75053: GO 75075
// result := SortListByListDesc ( units , tmp ) ;
75055: LD_ADDR_VAR 0 3
75059: PUSH
75060: LD_VAR 0 1
75064: PPUSH
75065: LD_VAR 0 5
75069: PPUSH
75070: CALL_OW 77
75074: ST_TO_ADDR
// end ;
75075: LD_VAR 0 3
75079: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75080: LD_INT 0
75082: PPUSH
75083: PPUSH
75084: PPUSH
// result := false ;
75085: LD_ADDR_VAR 0 3
75089: PUSH
75090: LD_INT 0
75092: ST_TO_ADDR
// x := GetX ( building ) ;
75093: LD_ADDR_VAR 0 4
75097: PUSH
75098: LD_VAR 0 2
75102: PPUSH
75103: CALL_OW 250
75107: ST_TO_ADDR
// y := GetY ( building ) ;
75108: LD_ADDR_VAR 0 5
75112: PUSH
75113: LD_VAR 0 2
75117: PPUSH
75118: CALL_OW 251
75122: ST_TO_ADDR
// if not building or not x or not y then
75123: LD_VAR 0 2
75127: NOT
75128: PUSH
75129: LD_VAR 0 4
75133: NOT
75134: OR
75135: PUSH
75136: LD_VAR 0 5
75140: NOT
75141: OR
75142: IFFALSE 75146
// exit ;
75144: GO 75238
// if GetTaskList ( unit ) then
75146: LD_VAR 0 1
75150: PPUSH
75151: CALL_OW 437
75155: IFFALSE 75238
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75157: LD_STRING e
75159: PUSH
75160: LD_VAR 0 1
75164: PPUSH
75165: CALL_OW 437
75169: PUSH
75170: LD_INT 1
75172: ARRAY
75173: PUSH
75174: LD_INT 1
75176: ARRAY
75177: EQUAL
75178: PUSH
75179: LD_VAR 0 4
75183: PUSH
75184: LD_VAR 0 1
75188: PPUSH
75189: CALL_OW 437
75193: PUSH
75194: LD_INT 1
75196: ARRAY
75197: PUSH
75198: LD_INT 2
75200: ARRAY
75201: EQUAL
75202: AND
75203: PUSH
75204: LD_VAR 0 5
75208: PUSH
75209: LD_VAR 0 1
75213: PPUSH
75214: CALL_OW 437
75218: PUSH
75219: LD_INT 1
75221: ARRAY
75222: PUSH
75223: LD_INT 3
75225: ARRAY
75226: EQUAL
75227: AND
75228: IFFALSE 75238
// result := true end ;
75230: LD_ADDR_VAR 0 3
75234: PUSH
75235: LD_INT 1
75237: ST_TO_ADDR
// end ;
75238: LD_VAR 0 3
75242: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75243: LD_INT 0
75245: PPUSH
// result := false ;
75246: LD_ADDR_VAR 0 4
75250: PUSH
75251: LD_INT 0
75253: ST_TO_ADDR
// if GetTaskList ( unit ) then
75254: LD_VAR 0 1
75258: PPUSH
75259: CALL_OW 437
75263: IFFALSE 75346
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75265: LD_STRING M
75267: PUSH
75268: LD_VAR 0 1
75272: PPUSH
75273: CALL_OW 437
75277: PUSH
75278: LD_INT 1
75280: ARRAY
75281: PUSH
75282: LD_INT 1
75284: ARRAY
75285: EQUAL
75286: PUSH
75287: LD_VAR 0 2
75291: PUSH
75292: LD_VAR 0 1
75296: PPUSH
75297: CALL_OW 437
75301: PUSH
75302: LD_INT 1
75304: ARRAY
75305: PUSH
75306: LD_INT 2
75308: ARRAY
75309: EQUAL
75310: AND
75311: PUSH
75312: LD_VAR 0 3
75316: PUSH
75317: LD_VAR 0 1
75321: PPUSH
75322: CALL_OW 437
75326: PUSH
75327: LD_INT 1
75329: ARRAY
75330: PUSH
75331: LD_INT 3
75333: ARRAY
75334: EQUAL
75335: AND
75336: IFFALSE 75346
// result := true ;
75338: LD_ADDR_VAR 0 4
75342: PUSH
75343: LD_INT 1
75345: ST_TO_ADDR
// end ; end ;
75346: LD_VAR 0 4
75350: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75351: LD_INT 0
75353: PPUSH
75354: PPUSH
75355: PPUSH
75356: PPUSH
// if not unit or not area then
75357: LD_VAR 0 1
75361: NOT
75362: PUSH
75363: LD_VAR 0 2
75367: NOT
75368: OR
75369: IFFALSE 75373
// exit ;
75371: GO 75537
// tmp := AreaToList ( area , i ) ;
75373: LD_ADDR_VAR 0 6
75377: PUSH
75378: LD_VAR 0 2
75382: PPUSH
75383: LD_VAR 0 5
75387: PPUSH
75388: CALL_OW 517
75392: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75393: LD_ADDR_VAR 0 5
75397: PUSH
75398: DOUBLE
75399: LD_INT 1
75401: DEC
75402: ST_TO_ADDR
75403: LD_VAR 0 6
75407: PUSH
75408: LD_INT 1
75410: ARRAY
75411: PUSH
75412: FOR_TO
75413: IFFALSE 75535
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75415: LD_ADDR_VAR 0 7
75419: PUSH
75420: LD_VAR 0 6
75424: PUSH
75425: LD_INT 1
75427: ARRAY
75428: PUSH
75429: LD_VAR 0 5
75433: ARRAY
75434: PUSH
75435: LD_VAR 0 6
75439: PUSH
75440: LD_INT 2
75442: ARRAY
75443: PUSH
75444: LD_VAR 0 5
75448: ARRAY
75449: PUSH
75450: EMPTY
75451: LIST
75452: LIST
75453: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75454: LD_VAR 0 7
75458: PUSH
75459: LD_INT 1
75461: ARRAY
75462: PPUSH
75463: LD_VAR 0 7
75467: PUSH
75468: LD_INT 2
75470: ARRAY
75471: PPUSH
75472: CALL_OW 428
75476: PUSH
75477: LD_INT 0
75479: EQUAL
75480: IFFALSE 75533
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75482: LD_VAR 0 1
75486: PPUSH
75487: LD_VAR 0 7
75491: PUSH
75492: LD_INT 1
75494: ARRAY
75495: PPUSH
75496: LD_VAR 0 7
75500: PUSH
75501: LD_INT 2
75503: ARRAY
75504: PPUSH
75505: LD_VAR 0 3
75509: PPUSH
75510: CALL_OW 48
// result := IsPlaced ( unit ) ;
75514: LD_ADDR_VAR 0 4
75518: PUSH
75519: LD_VAR 0 1
75523: PPUSH
75524: CALL_OW 305
75528: ST_TO_ADDR
// exit ;
75529: POP
75530: POP
75531: GO 75537
// end ; end ;
75533: GO 75412
75535: POP
75536: POP
// end ;
75537: LD_VAR 0 4
75541: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75542: LD_INT 0
75544: PPUSH
75545: PPUSH
75546: PPUSH
// if not side or side > 8 then
75547: LD_VAR 0 1
75551: NOT
75552: PUSH
75553: LD_VAR 0 1
75557: PUSH
75558: LD_INT 8
75560: GREATER
75561: OR
75562: IFFALSE 75566
// exit ;
75564: GO 75753
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75566: LD_ADDR_VAR 0 4
75570: PUSH
75571: LD_INT 22
75573: PUSH
75574: LD_VAR 0 1
75578: PUSH
75579: EMPTY
75580: LIST
75581: LIST
75582: PUSH
75583: LD_INT 21
75585: PUSH
75586: LD_INT 3
75588: PUSH
75589: EMPTY
75590: LIST
75591: LIST
75592: PUSH
75593: EMPTY
75594: LIST
75595: LIST
75596: PPUSH
75597: CALL_OW 69
75601: ST_TO_ADDR
// if not tmp then
75602: LD_VAR 0 4
75606: NOT
75607: IFFALSE 75611
// exit ;
75609: GO 75753
// enable_addtolog := true ;
75611: LD_ADDR_OWVAR 81
75615: PUSH
75616: LD_INT 1
75618: ST_TO_ADDR
// AddToLog ( [ ) ;
75619: LD_STRING [
75621: PPUSH
75622: CALL_OW 561
// for i in tmp do
75626: LD_ADDR_VAR 0 3
75630: PUSH
75631: LD_VAR 0 4
75635: PUSH
75636: FOR_IN
75637: IFFALSE 75744
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75639: LD_STRING [
75641: PUSH
75642: LD_VAR 0 3
75646: PPUSH
75647: CALL_OW 266
75651: STR
75652: PUSH
75653: LD_STRING , 
75655: STR
75656: PUSH
75657: LD_VAR 0 3
75661: PPUSH
75662: CALL_OW 250
75666: STR
75667: PUSH
75668: LD_STRING , 
75670: STR
75671: PUSH
75672: LD_VAR 0 3
75676: PPUSH
75677: CALL_OW 251
75681: STR
75682: PUSH
75683: LD_STRING , 
75685: STR
75686: PUSH
75687: LD_VAR 0 3
75691: PPUSH
75692: CALL_OW 254
75696: STR
75697: PUSH
75698: LD_STRING , 
75700: STR
75701: PUSH
75702: LD_VAR 0 3
75706: PPUSH
75707: LD_INT 1
75709: PPUSH
75710: CALL_OW 268
75714: STR
75715: PUSH
75716: LD_STRING , 
75718: STR
75719: PUSH
75720: LD_VAR 0 3
75724: PPUSH
75725: LD_INT 2
75727: PPUSH
75728: CALL_OW 268
75732: STR
75733: PUSH
75734: LD_STRING ],
75736: STR
75737: PPUSH
75738: CALL_OW 561
// end ;
75742: GO 75636
75744: POP
75745: POP
// AddToLog ( ]; ) ;
75746: LD_STRING ];
75748: PPUSH
75749: CALL_OW 561
// end ;
75753: LD_VAR 0 2
75757: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75758: LD_INT 0
75760: PPUSH
75761: PPUSH
75762: PPUSH
75763: PPUSH
75764: PPUSH
// if not area or not rate or not max then
75765: LD_VAR 0 1
75769: NOT
75770: PUSH
75771: LD_VAR 0 2
75775: NOT
75776: OR
75777: PUSH
75778: LD_VAR 0 4
75782: NOT
75783: OR
75784: IFFALSE 75788
// exit ;
75786: GO 75980
// while 1 do
75788: LD_INT 1
75790: IFFALSE 75980
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75792: LD_ADDR_VAR 0 9
75796: PUSH
75797: LD_VAR 0 1
75801: PPUSH
75802: LD_INT 1
75804: PPUSH
75805: CALL_OW 287
75809: PUSH
75810: LD_INT 10
75812: MUL
75813: ST_TO_ADDR
// r := rate / 10 ;
75814: LD_ADDR_VAR 0 7
75818: PUSH
75819: LD_VAR 0 2
75823: PUSH
75824: LD_INT 10
75826: DIVREAL
75827: ST_TO_ADDR
// time := 1 1$00 ;
75828: LD_ADDR_VAR 0 8
75832: PUSH
75833: LD_INT 2100
75835: ST_TO_ADDR
// if amount < min then
75836: LD_VAR 0 9
75840: PUSH
75841: LD_VAR 0 3
75845: LESS
75846: IFFALSE 75864
// r := r * 2 else
75848: LD_ADDR_VAR 0 7
75852: PUSH
75853: LD_VAR 0 7
75857: PUSH
75858: LD_INT 2
75860: MUL
75861: ST_TO_ADDR
75862: GO 75890
// if amount > max then
75864: LD_VAR 0 9
75868: PUSH
75869: LD_VAR 0 4
75873: GREATER
75874: IFFALSE 75890
// r := r / 2 ;
75876: LD_ADDR_VAR 0 7
75880: PUSH
75881: LD_VAR 0 7
75885: PUSH
75886: LD_INT 2
75888: DIVREAL
75889: ST_TO_ADDR
// time := time / r ;
75890: LD_ADDR_VAR 0 8
75894: PUSH
75895: LD_VAR 0 8
75899: PUSH
75900: LD_VAR 0 7
75904: DIVREAL
75905: ST_TO_ADDR
// if time < 0 then
75906: LD_VAR 0 8
75910: PUSH
75911: LD_INT 0
75913: LESS
75914: IFFALSE 75931
// time := time * - 1 ;
75916: LD_ADDR_VAR 0 8
75920: PUSH
75921: LD_VAR 0 8
75925: PUSH
75926: LD_INT 1
75928: NEG
75929: MUL
75930: ST_TO_ADDR
// wait ( time ) ;
75931: LD_VAR 0 8
75935: PPUSH
75936: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
75940: LD_INT 35
75942: PPUSH
75943: LD_INT 875
75945: PPUSH
75946: CALL_OW 12
75950: PPUSH
75951: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75955: LD_INT 1
75957: PPUSH
75958: LD_INT 5
75960: PPUSH
75961: CALL_OW 12
75965: PPUSH
75966: LD_VAR 0 1
75970: PPUSH
75971: LD_INT 1
75973: PPUSH
75974: CALL_OW 55
// end ;
75978: GO 75788
// end ;
75980: LD_VAR 0 5
75984: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75985: LD_INT 0
75987: PPUSH
75988: PPUSH
75989: PPUSH
75990: PPUSH
75991: PPUSH
75992: PPUSH
75993: PPUSH
75994: PPUSH
// if not turrets or not factories then
75995: LD_VAR 0 1
75999: NOT
76000: PUSH
76001: LD_VAR 0 2
76005: NOT
76006: OR
76007: IFFALSE 76011
// exit ;
76009: GO 76318
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76011: LD_ADDR_VAR 0 10
76015: PUSH
76016: LD_INT 5
76018: PUSH
76019: LD_INT 6
76021: PUSH
76022: EMPTY
76023: LIST
76024: LIST
76025: PUSH
76026: LD_INT 2
76028: PUSH
76029: LD_INT 4
76031: PUSH
76032: EMPTY
76033: LIST
76034: LIST
76035: PUSH
76036: LD_INT 3
76038: PUSH
76039: LD_INT 5
76041: PUSH
76042: EMPTY
76043: LIST
76044: LIST
76045: PUSH
76046: EMPTY
76047: LIST
76048: LIST
76049: LIST
76050: PUSH
76051: LD_INT 24
76053: PUSH
76054: LD_INT 25
76056: PUSH
76057: EMPTY
76058: LIST
76059: LIST
76060: PUSH
76061: LD_INT 23
76063: PUSH
76064: LD_INT 27
76066: PUSH
76067: EMPTY
76068: LIST
76069: LIST
76070: PUSH
76071: EMPTY
76072: LIST
76073: LIST
76074: PUSH
76075: LD_INT 42
76077: PUSH
76078: LD_INT 43
76080: PUSH
76081: EMPTY
76082: LIST
76083: LIST
76084: PUSH
76085: LD_INT 44
76087: PUSH
76088: LD_INT 46
76090: PUSH
76091: EMPTY
76092: LIST
76093: LIST
76094: PUSH
76095: LD_INT 45
76097: PUSH
76098: LD_INT 47
76100: PUSH
76101: EMPTY
76102: LIST
76103: LIST
76104: PUSH
76105: EMPTY
76106: LIST
76107: LIST
76108: LIST
76109: PUSH
76110: EMPTY
76111: LIST
76112: LIST
76113: LIST
76114: ST_TO_ADDR
// result := [ ] ;
76115: LD_ADDR_VAR 0 3
76119: PUSH
76120: EMPTY
76121: ST_TO_ADDR
// for i in turrets do
76122: LD_ADDR_VAR 0 4
76126: PUSH
76127: LD_VAR 0 1
76131: PUSH
76132: FOR_IN
76133: IFFALSE 76316
// begin nat := GetNation ( i ) ;
76135: LD_ADDR_VAR 0 7
76139: PUSH
76140: LD_VAR 0 4
76144: PPUSH
76145: CALL_OW 248
76149: ST_TO_ADDR
// weapon := 0 ;
76150: LD_ADDR_VAR 0 8
76154: PUSH
76155: LD_INT 0
76157: ST_TO_ADDR
// if not nat then
76158: LD_VAR 0 7
76162: NOT
76163: IFFALSE 76167
// continue ;
76165: GO 76132
// for j in list [ nat ] do
76167: LD_ADDR_VAR 0 5
76171: PUSH
76172: LD_VAR 0 10
76176: PUSH
76177: LD_VAR 0 7
76181: ARRAY
76182: PUSH
76183: FOR_IN
76184: IFFALSE 76225
// if GetBWeapon ( i ) = j [ 1 ] then
76186: LD_VAR 0 4
76190: PPUSH
76191: CALL_OW 269
76195: PUSH
76196: LD_VAR 0 5
76200: PUSH
76201: LD_INT 1
76203: ARRAY
76204: EQUAL
76205: IFFALSE 76223
// begin weapon := j [ 2 ] ;
76207: LD_ADDR_VAR 0 8
76211: PUSH
76212: LD_VAR 0 5
76216: PUSH
76217: LD_INT 2
76219: ARRAY
76220: ST_TO_ADDR
// break ;
76221: GO 76225
// end ;
76223: GO 76183
76225: POP
76226: POP
// if not weapon then
76227: LD_VAR 0 8
76231: NOT
76232: IFFALSE 76236
// continue ;
76234: GO 76132
// for k in factories do
76236: LD_ADDR_VAR 0 6
76240: PUSH
76241: LD_VAR 0 2
76245: PUSH
76246: FOR_IN
76247: IFFALSE 76312
// begin weapons := AvailableWeaponList ( k ) ;
76249: LD_ADDR_VAR 0 9
76253: PUSH
76254: LD_VAR 0 6
76258: PPUSH
76259: CALL_OW 478
76263: ST_TO_ADDR
// if not weapons then
76264: LD_VAR 0 9
76268: NOT
76269: IFFALSE 76273
// continue ;
76271: GO 76246
// if weapon in weapons then
76273: LD_VAR 0 8
76277: PUSH
76278: LD_VAR 0 9
76282: IN
76283: IFFALSE 76310
// begin result := [ i , weapon ] ;
76285: LD_ADDR_VAR 0 3
76289: PUSH
76290: LD_VAR 0 4
76294: PUSH
76295: LD_VAR 0 8
76299: PUSH
76300: EMPTY
76301: LIST
76302: LIST
76303: ST_TO_ADDR
// exit ;
76304: POP
76305: POP
76306: POP
76307: POP
76308: GO 76318
// end ; end ;
76310: GO 76246
76312: POP
76313: POP
// end ;
76314: GO 76132
76316: POP
76317: POP
// end ;
76318: LD_VAR 0 3
76322: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76323: LD_INT 0
76325: PPUSH
// if not side or side > 8 then
76326: LD_VAR 0 3
76330: NOT
76331: PUSH
76332: LD_VAR 0 3
76336: PUSH
76337: LD_INT 8
76339: GREATER
76340: OR
76341: IFFALSE 76345
// exit ;
76343: GO 76404
// if not range then
76345: LD_VAR 0 4
76349: NOT
76350: IFFALSE 76361
// range := - 12 ;
76352: LD_ADDR_VAR 0 4
76356: PUSH
76357: LD_INT 12
76359: NEG
76360: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76361: LD_VAR 0 1
76365: PPUSH
76366: LD_VAR 0 2
76370: PPUSH
76371: LD_VAR 0 3
76375: PPUSH
76376: LD_VAR 0 4
76380: PPUSH
76381: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76385: LD_VAR 0 1
76389: PPUSH
76390: LD_VAR 0 2
76394: PPUSH
76395: LD_VAR 0 3
76399: PPUSH
76400: CALL_OW 331
// end ;
76404: LD_VAR 0 5
76408: RET
// export function Video ( mode ) ; begin
76409: LD_INT 0
76411: PPUSH
// ingame_video = mode ;
76412: LD_ADDR_OWVAR 52
76416: PUSH
76417: LD_VAR 0 1
76421: ST_TO_ADDR
// interface_hidden = mode ;
76422: LD_ADDR_OWVAR 54
76426: PUSH
76427: LD_VAR 0 1
76431: ST_TO_ADDR
// end ;
76432: LD_VAR 0 2
76436: RET
// export function Join ( array , element ) ; begin
76437: LD_INT 0
76439: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76440: LD_ADDR_VAR 0 3
76444: PUSH
76445: LD_VAR 0 1
76449: PPUSH
76450: LD_VAR 0 1
76454: PUSH
76455: LD_INT 1
76457: PLUS
76458: PPUSH
76459: LD_VAR 0 2
76463: PPUSH
76464: CALL_OW 1
76468: ST_TO_ADDR
// end ;
76469: LD_VAR 0 3
76473: RET
// export function JoinUnion ( array , element ) ; begin
76474: LD_INT 0
76476: PPUSH
// result := array union element ;
76477: LD_ADDR_VAR 0 3
76481: PUSH
76482: LD_VAR 0 1
76486: PUSH
76487: LD_VAR 0 2
76491: UNION
76492: ST_TO_ADDR
// end ;
76493: LD_VAR 0 3
76497: RET
// export function GetBehemoths ( side ) ; begin
76498: LD_INT 0
76500: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
76501: LD_ADDR_VAR 0 2
76505: PUSH
76506: LD_INT 22
76508: PUSH
76509: LD_VAR 0 1
76513: PUSH
76514: EMPTY
76515: LIST
76516: LIST
76517: PUSH
76518: LD_INT 31
76520: PUSH
76521: LD_INT 25
76523: PUSH
76524: EMPTY
76525: LIST
76526: LIST
76527: PUSH
76528: EMPTY
76529: LIST
76530: LIST
76531: PPUSH
76532: CALL_OW 69
76536: ST_TO_ADDR
// end ;
76537: LD_VAR 0 2
76541: RET
// export function Shuffle ( array ) ; var i , index ; begin
76542: LD_INT 0
76544: PPUSH
76545: PPUSH
76546: PPUSH
// result := [ ] ;
76547: LD_ADDR_VAR 0 2
76551: PUSH
76552: EMPTY
76553: ST_TO_ADDR
// if not array then
76554: LD_VAR 0 1
76558: NOT
76559: IFFALSE 76563
// exit ;
76561: GO 76662
// Randomize ;
76563: CALL_OW 10
// for i = array downto 1 do
76567: LD_ADDR_VAR 0 3
76571: PUSH
76572: DOUBLE
76573: LD_VAR 0 1
76577: INC
76578: ST_TO_ADDR
76579: LD_INT 1
76581: PUSH
76582: FOR_DOWNTO
76583: IFFALSE 76660
// begin index := rand ( 1 , array ) ;
76585: LD_ADDR_VAR 0 4
76589: PUSH
76590: LD_INT 1
76592: PPUSH
76593: LD_VAR 0 1
76597: PPUSH
76598: CALL_OW 12
76602: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76603: LD_ADDR_VAR 0 2
76607: PUSH
76608: LD_VAR 0 2
76612: PPUSH
76613: LD_VAR 0 2
76617: PUSH
76618: LD_INT 1
76620: PLUS
76621: PPUSH
76622: LD_VAR 0 1
76626: PUSH
76627: LD_VAR 0 4
76631: ARRAY
76632: PPUSH
76633: CALL_OW 2
76637: ST_TO_ADDR
// array := Delete ( array , index ) ;
76638: LD_ADDR_VAR 0 1
76642: PUSH
76643: LD_VAR 0 1
76647: PPUSH
76648: LD_VAR 0 4
76652: PPUSH
76653: CALL_OW 3
76657: ST_TO_ADDR
// end ;
76658: GO 76582
76660: POP
76661: POP
// end ;
76662: LD_VAR 0 2
76666: RET
// export function GetBaseMaterials ( base ) ; begin
76667: LD_INT 0
76669: PPUSH
// result := [ 0 , 0 , 0 ] ;
76670: LD_ADDR_VAR 0 2
76674: PUSH
76675: LD_INT 0
76677: PUSH
76678: LD_INT 0
76680: PUSH
76681: LD_INT 0
76683: PUSH
76684: EMPTY
76685: LIST
76686: LIST
76687: LIST
76688: ST_TO_ADDR
// if not base then
76689: LD_VAR 0 1
76693: NOT
76694: IFFALSE 76698
// exit ;
76696: GO 76747
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76698: LD_ADDR_VAR 0 2
76702: PUSH
76703: LD_VAR 0 1
76707: PPUSH
76708: LD_INT 1
76710: PPUSH
76711: CALL_OW 275
76715: PUSH
76716: LD_VAR 0 1
76720: PPUSH
76721: LD_INT 2
76723: PPUSH
76724: CALL_OW 275
76728: PUSH
76729: LD_VAR 0 1
76733: PPUSH
76734: LD_INT 3
76736: PPUSH
76737: CALL_OW 275
76741: PUSH
76742: EMPTY
76743: LIST
76744: LIST
76745: LIST
76746: ST_TO_ADDR
// end ;
76747: LD_VAR 0 2
76751: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76752: LD_INT 0
76754: PPUSH
76755: PPUSH
// result := array ;
76756: LD_ADDR_VAR 0 3
76760: PUSH
76761: LD_VAR 0 1
76765: ST_TO_ADDR
// if size > 0 then
76766: LD_VAR 0 2
76770: PUSH
76771: LD_INT 0
76773: GREATER
76774: IFFALSE 76820
// for i := array downto size do
76776: LD_ADDR_VAR 0 4
76780: PUSH
76781: DOUBLE
76782: LD_VAR 0 1
76786: INC
76787: ST_TO_ADDR
76788: LD_VAR 0 2
76792: PUSH
76793: FOR_DOWNTO
76794: IFFALSE 76818
// result := Delete ( result , result ) ;
76796: LD_ADDR_VAR 0 3
76800: PUSH
76801: LD_VAR 0 3
76805: PPUSH
76806: LD_VAR 0 3
76810: PPUSH
76811: CALL_OW 3
76815: ST_TO_ADDR
76816: GO 76793
76818: POP
76819: POP
// end ;
76820: LD_VAR 0 3
76824: RET
// export function ComExit ( unit ) ; var tmp ; begin
76825: LD_INT 0
76827: PPUSH
76828: PPUSH
// if not IsInUnit ( unit ) then
76829: LD_VAR 0 1
76833: PPUSH
76834: CALL_OW 310
76838: NOT
76839: IFFALSE 76843
// exit ;
76841: GO 76903
// tmp := IsInUnit ( unit ) ;
76843: LD_ADDR_VAR 0 3
76847: PUSH
76848: LD_VAR 0 1
76852: PPUSH
76853: CALL_OW 310
76857: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76858: LD_VAR 0 3
76862: PPUSH
76863: CALL_OW 247
76867: PUSH
76868: LD_INT 2
76870: EQUAL
76871: IFFALSE 76884
// ComExitVehicle ( unit ) else
76873: LD_VAR 0 1
76877: PPUSH
76878: CALL_OW 121
76882: GO 76893
// ComExitBuilding ( unit ) ;
76884: LD_VAR 0 1
76888: PPUSH
76889: CALL_OW 122
// result := tmp ;
76893: LD_ADDR_VAR 0 2
76897: PUSH
76898: LD_VAR 0 3
76902: ST_TO_ADDR
// end ;
76903: LD_VAR 0 2
76907: RET
// export function ResetHc ; begin
76908: LD_INT 0
76910: PPUSH
// InitHc ;
76911: CALL_OW 19
// hc_importance := 0 ;
76915: LD_ADDR_OWVAR 32
76919: PUSH
76920: LD_INT 0
76922: ST_TO_ADDR
// end ;
76923: LD_VAR 0 1
76927: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76928: LD_INT 0
76930: PPUSH
76931: PPUSH
76932: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76933: LD_ADDR_VAR 0 6
76937: PUSH
76938: LD_VAR 0 1
76942: PUSH
76943: LD_VAR 0 3
76947: PLUS
76948: PUSH
76949: LD_INT 2
76951: DIV
76952: ST_TO_ADDR
// if _x < 0 then
76953: LD_VAR 0 6
76957: PUSH
76958: LD_INT 0
76960: LESS
76961: IFFALSE 76978
// _x := _x * - 1 ;
76963: LD_ADDR_VAR 0 6
76967: PUSH
76968: LD_VAR 0 6
76972: PUSH
76973: LD_INT 1
76975: NEG
76976: MUL
76977: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76978: LD_ADDR_VAR 0 7
76982: PUSH
76983: LD_VAR 0 2
76987: PUSH
76988: LD_VAR 0 4
76992: PLUS
76993: PUSH
76994: LD_INT 2
76996: DIV
76997: ST_TO_ADDR
// if _y < 0 then
76998: LD_VAR 0 7
77002: PUSH
77003: LD_INT 0
77005: LESS
77006: IFFALSE 77023
// _y := _y * - 1 ;
77008: LD_ADDR_VAR 0 7
77012: PUSH
77013: LD_VAR 0 7
77017: PUSH
77018: LD_INT 1
77020: NEG
77021: MUL
77022: ST_TO_ADDR
// result := [ _x , _y ] ;
77023: LD_ADDR_VAR 0 5
77027: PUSH
77028: LD_VAR 0 6
77032: PUSH
77033: LD_VAR 0 7
77037: PUSH
77038: EMPTY
77039: LIST
77040: LIST
77041: ST_TO_ADDR
// end ;
77042: LD_VAR 0 5
77046: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77047: LD_INT 0
77049: PPUSH
77050: PPUSH
77051: PPUSH
77052: PPUSH
// task := GetTaskList ( unit ) ;
77053: LD_ADDR_VAR 0 7
77057: PUSH
77058: LD_VAR 0 1
77062: PPUSH
77063: CALL_OW 437
77067: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77068: LD_VAR 0 7
77072: NOT
77073: PUSH
77074: LD_VAR 0 1
77078: PPUSH
77079: LD_VAR 0 2
77083: PPUSH
77084: CALL_OW 308
77088: NOT
77089: AND
77090: IFFALSE 77094
// exit ;
77092: GO 77212
// if IsInArea ( unit , area ) then
77094: LD_VAR 0 1
77098: PPUSH
77099: LD_VAR 0 2
77103: PPUSH
77104: CALL_OW 308
77108: IFFALSE 77126
// begin ComMoveToArea ( unit , goAway ) ;
77110: LD_VAR 0 1
77114: PPUSH
77115: LD_VAR 0 3
77119: PPUSH
77120: CALL_OW 113
// exit ;
77124: GO 77212
// end ; if task [ 1 ] [ 1 ] <> M then
77126: LD_VAR 0 7
77130: PUSH
77131: LD_INT 1
77133: ARRAY
77134: PUSH
77135: LD_INT 1
77137: ARRAY
77138: PUSH
77139: LD_STRING M
77141: NONEQUAL
77142: IFFALSE 77146
// exit ;
77144: GO 77212
// x := task [ 1 ] [ 2 ] ;
77146: LD_ADDR_VAR 0 5
77150: PUSH
77151: LD_VAR 0 7
77155: PUSH
77156: LD_INT 1
77158: ARRAY
77159: PUSH
77160: LD_INT 2
77162: ARRAY
77163: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77164: LD_ADDR_VAR 0 6
77168: PUSH
77169: LD_VAR 0 7
77173: PUSH
77174: LD_INT 1
77176: ARRAY
77177: PUSH
77178: LD_INT 3
77180: ARRAY
77181: ST_TO_ADDR
// if InArea ( x , y , area ) then
77182: LD_VAR 0 5
77186: PPUSH
77187: LD_VAR 0 6
77191: PPUSH
77192: LD_VAR 0 2
77196: PPUSH
77197: CALL_OW 309
77201: IFFALSE 77212
// ComStop ( unit ) ;
77203: LD_VAR 0 1
77207: PPUSH
77208: CALL_OW 141
// end ;
77212: LD_VAR 0 4
77216: RET
// export function Abs ( value ) ; begin
77217: LD_INT 0
77219: PPUSH
// result := value ;
77220: LD_ADDR_VAR 0 2
77224: PUSH
77225: LD_VAR 0 1
77229: ST_TO_ADDR
// if value < 0 then
77230: LD_VAR 0 1
77234: PUSH
77235: LD_INT 0
77237: LESS
77238: IFFALSE 77255
// result := value * - 1 ;
77240: LD_ADDR_VAR 0 2
77244: PUSH
77245: LD_VAR 0 1
77249: PUSH
77250: LD_INT 1
77252: NEG
77253: MUL
77254: ST_TO_ADDR
// end ;
77255: LD_VAR 0 2
77259: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77260: LD_INT 0
77262: PPUSH
77263: PPUSH
77264: PPUSH
77265: PPUSH
77266: PPUSH
77267: PPUSH
77268: PPUSH
77269: PPUSH
// if not unit or not building then
77270: LD_VAR 0 1
77274: NOT
77275: PUSH
77276: LD_VAR 0 2
77280: NOT
77281: OR
77282: IFFALSE 77286
// exit ;
77284: GO 77512
// x := GetX ( building ) ;
77286: LD_ADDR_VAR 0 4
77290: PUSH
77291: LD_VAR 0 2
77295: PPUSH
77296: CALL_OW 250
77300: ST_TO_ADDR
// y := GetY ( building ) ;
77301: LD_ADDR_VAR 0 6
77305: PUSH
77306: LD_VAR 0 2
77310: PPUSH
77311: CALL_OW 251
77315: ST_TO_ADDR
// d := GetDir ( building ) ;
77316: LD_ADDR_VAR 0 8
77320: PUSH
77321: LD_VAR 0 2
77325: PPUSH
77326: CALL_OW 254
77330: ST_TO_ADDR
// r := 4 ;
77331: LD_ADDR_VAR 0 9
77335: PUSH
77336: LD_INT 4
77338: ST_TO_ADDR
// for i := 1 to 5 do
77339: LD_ADDR_VAR 0 10
77343: PUSH
77344: DOUBLE
77345: LD_INT 1
77347: DEC
77348: ST_TO_ADDR
77349: LD_INT 5
77351: PUSH
77352: FOR_TO
77353: IFFALSE 77510
// begin _x := ShiftX ( x , d , r + i ) ;
77355: LD_ADDR_VAR 0 5
77359: PUSH
77360: LD_VAR 0 4
77364: PPUSH
77365: LD_VAR 0 8
77369: PPUSH
77370: LD_VAR 0 9
77374: PUSH
77375: LD_VAR 0 10
77379: PLUS
77380: PPUSH
77381: CALL_OW 272
77385: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77386: LD_ADDR_VAR 0 7
77390: PUSH
77391: LD_VAR 0 6
77395: PPUSH
77396: LD_VAR 0 8
77400: PPUSH
77401: LD_VAR 0 9
77405: PUSH
77406: LD_VAR 0 10
77410: PLUS
77411: PPUSH
77412: CALL_OW 273
77416: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77417: LD_VAR 0 5
77421: PPUSH
77422: LD_VAR 0 7
77426: PPUSH
77427: CALL_OW 488
77431: PUSH
77432: LD_VAR 0 5
77436: PPUSH
77437: LD_VAR 0 7
77441: PPUSH
77442: CALL_OW 428
77446: PPUSH
77447: CALL_OW 247
77451: PUSH
77452: LD_INT 3
77454: PUSH
77455: LD_INT 2
77457: PUSH
77458: EMPTY
77459: LIST
77460: LIST
77461: IN
77462: NOT
77463: AND
77464: IFFALSE 77508
// begin ComMoveXY ( unit , _x , _y ) ;
77466: LD_VAR 0 1
77470: PPUSH
77471: LD_VAR 0 5
77475: PPUSH
77476: LD_VAR 0 7
77480: PPUSH
77481: CALL_OW 111
// result := [ _x , _y ] ;
77485: LD_ADDR_VAR 0 3
77489: PUSH
77490: LD_VAR 0 5
77494: PUSH
77495: LD_VAR 0 7
77499: PUSH
77500: EMPTY
77501: LIST
77502: LIST
77503: ST_TO_ADDR
// exit ;
77504: POP
77505: POP
77506: GO 77512
// end ; end ;
77508: GO 77352
77510: POP
77511: POP
// end ;
77512: LD_VAR 0 3
77516: RET
