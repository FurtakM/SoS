// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export vehiclesFrom05 , resourcesFrom05 , fastBreakthrough , stevensStatus , apeTechsStatus ; export techMatPredStatus ; export vehsFrom06 , resourcesFrom06 ; export dial_SibTechsBlocker , dial_VsevolodContactBlocker , dial_TrapDialogBlocker , dial_ConvoyDialogBlocker , dial_NorthBlocker , dial_EndMissionDialogBlocker ; export claimOvsyenkoBase , claimTerminalBase , lostAgainBase ; export immortalVsevolodTeam , savedVsevolod , vsevolodWaitGorky ; export canGoNorth ; export enableVsevolodCounter ; export canSpawnReinforces ; export canEndMission ; export canRemoveUnits ; export timeToAttack ; export cratesSpawned ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 308 0 0
// vehiclesFrom05 = LoadVariable ( 05_Tanks_4 , [ ] ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 05_Tanks_4
  31: PPUSH
  32: EMPTY
  33: PPUSH
  34: CALL_OW 30
  38: ST_TO_ADDR
// resourcesFrom05 = LoadVariable ( 05_ResourcesInCargo_3 , [ ] ) ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: LD_STRING 05_ResourcesInCargo_3
  46: PPUSH
  47: EMPTY
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// fastBreakthrough = LoadVariable ( 05_FastBreakthrough_6 , false ) ;
  54: LD_ADDR_EXP 3
  58: PUSH
  59: LD_STRING 05_FastBreakthrough_6
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// stevensStatus = LoadVariable ( 05_StevensStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 4
  74: PUSH
  75: LD_STRING 05_StevensStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// apeTechsStatus = LoadVariable ( 05_ApeTechsStatus_7 , [ 0 , 0 , 0 ] ) ;
  86: LD_ADDR_EXP 5
  90: PUSH
  91: LD_STRING 05_ApeTechsStatus_7
  93: PPUSH
  94: LD_INT 0
  96: PUSH
  97: LD_INT 0
  99: PUSH
 100: LD_INT 0
 102: PUSH
 103: EMPTY
 104: LIST
 105: LIST
 106: LIST
 107: PPUSH
 108: CALL_OW 30
 112: ST_TO_ADDR
// techMatPredStatus = state_enabled ;
 113: LD_ADDR_EXP 6
 117: PUSH
 118: LD_INT 1
 120: ST_TO_ADDR
// vehsFrom06 = [ ] ;
 121: LD_ADDR_EXP 7
 125: PUSH
 126: EMPTY
 127: ST_TO_ADDR
// resourcesFrom06 = [ ] ;
 128: LD_ADDR_EXP 8
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// dial_SibTechsBlocker = false ;
 135: LD_ADDR_EXP 9
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// dial_VsevolodContactBlocker = false ;
 143: LD_ADDR_EXP 10
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// dial_TrapDialogBlocker = false ;
 151: LD_ADDR_EXP 11
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// dial_ConvoyDialogBlocker = false ;
 159: LD_ADDR_EXP 12
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// dial_NorthBlocker = false ;
 167: LD_ADDR_EXP 13
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// dial_EndMissionDialogBlocker = false ;
 175: LD_ADDR_EXP 14
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// claimOvsyenkoBase = false ;
 183: LD_ADDR_EXP 15
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// claimTerminalBase = false ;
 191: LD_ADDR_EXP 16
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// lostAgainBase = false ;
 199: LD_ADDR_EXP 17
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// immortalVsevolodTeam = true ;
 207: LD_ADDR_EXP 18
 211: PUSH
 212: LD_INT 1
 214: ST_TO_ADDR
// savedVsevolod = false ;
 215: LD_ADDR_EXP 19
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// vsevolodWaitGorky = false ;
 223: LD_ADDR_EXP 20
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// enableVsevolodCounter = false ;
 231: LD_ADDR_EXP 22
 235: PUSH
 236: LD_INT 0
 238: ST_TO_ADDR
// canGoNorth = false ;
 239: LD_ADDR_EXP 21
 243: PUSH
 244: LD_INT 0
 246: ST_TO_ADDR
// canSpawnReinforces = false ;
 247: LD_ADDR_EXP 23
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// canEndMission = false ;
 255: LD_ADDR_EXP 24
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// canRemoveUnits = false ;
 263: LD_ADDR_EXP 25
 267: PUSH
 268: LD_INT 0
 270: ST_TO_ADDR
// timeToAttack = 0 0$00 ;
 271: LD_ADDR_EXP 26
 275: PUSH
 276: LD_INT 0
 278: ST_TO_ADDR
// cratesSpawned = 0 ;
 279: LD_ADDR_EXP 27
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// PrepareRussians ;
 287: CALL 893 0 0
// PrepareAmericans ;
 291: CALL 2945 0 0
// Nef_PrepareNature ;
 295: CALL 4039 0 0
// MissionIntro ;
 299: CALL 15645 0 0
// end ; end_of_file
 303: LD_VAR 0 1
 307: RET
// export function InitMapConfig ; begin
 308: LD_INT 0
 310: PPUSH
// BaseMapConfig ;
 311: CALL 324 0 0
// MissionMapConfig ;
 315: CALL 414 0 0
// end ;
 319: LD_VAR 0 1
 323: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 324: LD_INT 0
 326: PPUSH
// animalsAmount = [ 3 , 3 , 1 , 3 , 0 ] ;
 327: LD_ADDR_EXP 28
 331: PUSH
 332: LD_INT 3
 334: PUSH
 335: LD_INT 3
 337: PUSH
 338: LD_INT 1
 340: PUSH
 341: LD_INT 3
 343: PUSH
 344: LD_INT 0
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 354: LD_ADDR_EXP 29
 358: PUSH
 359: LD_INT 2
 361: PUSH
 362: LD_INT 2
 364: PUSH
 365: LD_INT 2
 367: PUSH
 368: LD_INT 2
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: LIST
 375: LIST
 376: ST_TO_ADDR
// animalsAgression = 3 ;
 377: LD_ADDR_EXP 30
 381: PUSH
 382: LD_INT 3
 384: ST_TO_ADDR
// debugMode = 0 ;
 385: LD_ADDR_EXP 33
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// missionPrefix = 06_ ;
 393: LD_ADDR_EXP 31
 397: PUSH
 398: LD_STRING 06_
 400: ST_TO_ADDR
// previousMissionPrefix = 05_ ;
 401: LD_ADDR_EXP 32
 405: PUSH
 406: LD_STRING 05_
 408: ST_TO_ADDR
// end ;
 409: LD_VAR 0 1
 413: RET
// export enemySkillLevel ; export ovsyenkoStartCrates , terminalStartSiberite ; export trapAmount ; export vsevolodSaveTime ; function MissionMapConfig ; begin
 414: LD_INT 0
 416: PPUSH
// enemySkillLevel = [ 3 , 4 , 5 ] [ Difficulty ] ;
 417: LD_ADDR_EXP 34
 421: PUSH
 422: LD_INT 3
 424: PUSH
 425: LD_INT 4
 427: PUSH
 428: LD_INT 5
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: LIST
 435: PUSH
 436: LD_OWVAR 67
 440: ARRAY
 441: ST_TO_ADDR
// ovsyenkoStartCrates = [ 150 , 100 , 50 ] [ Difficulty ] ;
 442: LD_ADDR_EXP 35
 446: PUSH
 447: LD_INT 150
 449: PUSH
 450: LD_INT 100
 452: PUSH
 453: LD_INT 50
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: LIST
 460: PUSH
 461: LD_OWVAR 67
 465: ARRAY
 466: ST_TO_ADDR
// terminalStartSiberite = [ 100 , 70 , 50 ] [ Difficulty ] ;
 467: LD_ADDR_EXP 36
 471: PUSH
 472: LD_INT 100
 474: PUSH
 475: LD_INT 70
 477: PUSH
 478: LD_INT 50
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: PUSH
 486: LD_OWVAR 67
 490: ARRAY
 491: ST_TO_ADDR
// trapAmount = [ rand ( 4 , 5 ) , rand ( 5 , 6 ) , rand ( 6 , 7 ) ] [ Difficulty ] ;
 492: LD_ADDR_EXP 37
 496: PUSH
 497: LD_INT 4
 499: PPUSH
 500: LD_INT 5
 502: PPUSH
 503: CALL_OW 12
 507: PUSH
 508: LD_INT 5
 510: PPUSH
 511: LD_INT 6
 513: PPUSH
 514: CALL_OW 12
 518: PUSH
 519: LD_INT 6
 521: PPUSH
 522: LD_INT 7
 524: PPUSH
 525: CALL_OW 12
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: LIST
 534: PUSH
 535: LD_OWVAR 67
 539: ARRAY
 540: ST_TO_ADDR
// vsevolodSaveTime = [ 12 12$0 , 11 11$0 , 10 10$0 ] [ Difficulty ] ;
 541: LD_ADDR_EXP 38
 545: PUSH
 546: LD_INT 25200
 548: PUSH
 549: LD_INT 23100
 551: PUSH
 552: LD_INT 21000
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: PUSH
 560: LD_OWVAR 67
 564: ARRAY
 565: ST_TO_ADDR
// end ;
 566: LD_VAR 0 1
 570: RET
// every 0 0$1 trigger debugMode do var i ;
 571: LD_EXP 33
 575: IFFALSE 890
 577: GO 579
 579: DISABLE
 580: LD_INT 0
 582: PPUSH
// begin enable ;
 583: ENABLE
// FogOff ( your_side ) ;
 584: LD_OWVAR 2
 588: PPUSH
 589: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 593: LD_ADDR_VAR 0 1
 597: PUSH
 598: LD_INT 22
 600: PUSH
 601: LD_OWVAR 2
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 2
 612: PUSH
 613: LD_INT 21
 615: PUSH
 616: LD_INT 1
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: PUSH
 623: LD_INT 21
 625: PUSH
 626: LD_INT 2
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: LIST
 637: PUSH
 638: EMPTY
 639: LIST
 640: LIST
 641: PPUSH
 642: CALL_OW 69
 646: PUSH
 647: FOR_IN
 648: IFFALSE 664
// SetLives ( i , 1000 ) ;
 650: LD_VAR 0 1
 654: PPUSH
 655: LD_INT 1000
 657: PPUSH
 658: CALL_OW 234
 662: GO 647
 664: POP
 665: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 666: LD_ADDR_VAR 0 1
 670: PUSH
 671: LD_INT 22
 673: PUSH
 674: LD_OWVAR 2
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: PUSH
 683: LD_INT 21
 685: PUSH
 686: LD_INT 1
 688: PUSH
 689: EMPTY
 690: LIST
 691: LIST
 692: PUSH
 693: EMPTY
 694: LIST
 695: LIST
 696: PPUSH
 697: CALL_OW 69
 701: PUSH
 702: FOR_IN
 703: IFFALSE 767
// begin SetSkill ( i , skill_combat , 10 ) ;
 705: LD_VAR 0 1
 709: PPUSH
 710: LD_INT 1
 712: PPUSH
 713: LD_INT 10
 715: PPUSH
 716: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 720: LD_VAR 0 1
 724: PPUSH
 725: LD_INT 2
 727: PPUSH
 728: LD_INT 10
 730: PPUSH
 731: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 735: LD_VAR 0 1
 739: PPUSH
 740: LD_INT 3
 742: PPUSH
 743: LD_INT 10
 745: PPUSH
 746: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 750: LD_VAR 0 1
 754: PPUSH
 755: LD_INT 4
 757: PPUSH
 758: LD_INT 10
 760: PPUSH
 761: CALL_OW 237
// end ;
 765: GO 702
 767: POP
 768: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 769: LD_ADDR_VAR 0 1
 773: PUSH
 774: LD_INT 22
 776: PUSH
 777: LD_OWVAR 2
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: PUSH
 786: LD_INT 2
 788: PUSH
 789: LD_INT 30
 791: PUSH
 792: LD_INT 0
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PUSH
 799: LD_INT 30
 801: PUSH
 802: LD_INT 1
 804: PUSH
 805: EMPTY
 806: LIST
 807: LIST
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: LIST
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: PPUSH
 818: CALL_OW 69
 822: PUSH
 823: FOR_IN
 824: IFFALSE 888
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 826: LD_VAR 0 1
 830: PPUSH
 831: CALL_OW 274
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: LD_INT 9999
 841: PPUSH
 842: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 846: LD_VAR 0 1
 850: PPUSH
 851: CALL_OW 274
 855: PPUSH
 856: LD_INT 2
 858: PPUSH
 859: LD_INT 9999
 861: PPUSH
 862: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 866: LD_VAR 0 1
 870: PPUSH
 871: CALL_OW 274
 875: PPUSH
 876: LD_INT 3
 878: PPUSH
 879: LD_INT 9999
 881: PPUSH
 882: CALL_OW 277
// end ;
 886: GO 823
 888: POP
 889: POP
// end ; end_of_file
 890: PPOPN 1
 892: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Platonov , Kirilenkova , Belkov , Belkov2 ; export Vsevolod , vsevolodTeam , Petr , Igor ; export function PrepareRussians ; begin
 893: LD_INT 0
 895: PPUSH
// PrepareHeroes ;
 896: CALL 905 0 0
// end ;
 900: LD_VAR 0 1
 904: RET
// function PrepareHeroes ; var i , j , car , tmp , cargoList , point , areaPoints , nearPosition , burlakPosition , distance , index ; begin
 905: LD_INT 0
 907: PPUSH
 908: PPUSH
 909: PPUSH
 910: PPUSH
 911: PPUSH
 912: PPUSH
 913: PPUSH
 914: PPUSH
 915: PPUSH
 916: PPUSH
 917: PPUSH
 918: PPUSH
// point = [ 170 , 208 ] ;
 919: LD_ADDR_VAR 0 7
 923: PUSH
 924: LD_INT 170
 926: PUSH
 927: LD_INT 208
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: ST_TO_ADDR
// areaPoints = AreaToList ( RussianSpawnArea1 , 0 ) ;
 934: LD_ADDR_VAR 0 8
 938: PUSH
 939: LD_INT 1
 941: PPUSH
 942: LD_INT 0
 944: PPUSH
 945: CALL_OW 517
 949: ST_TO_ADDR
// uc_side = 3 ;
 950: LD_ADDR_OWVAR 20
 954: PUSH
 955: LD_INT 3
 957: ST_TO_ADDR
// uc_nation = 3 ;
 958: LD_ADDR_OWVAR 21
 962: PUSH
 963: LD_INT 3
 965: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , 0 ) ;
 966: LD_ADDR_EXP 39
 970: PUSH
 971: LD_STRING Burlak
 973: PPUSH
 974: LD_INT 1
 976: PPUSH
 977: LD_INT 0
 979: PPUSH
 980: CALL 11365 0 3
 984: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , true , 0 ) ;
 985: LD_ADDR_EXP 44
 989: PUSH
 990: LD_STRING Titov
 992: PPUSH
 993: LD_INT 1
 995: PPUSH
 996: LD_INT 0
 998: PPUSH
 999: CALL 11365 0 3
1003: ST_TO_ADDR
// Dolgov := PrepareUnitExt ( Dolgov , true , 0 ) ;
1004: LD_ADDR_EXP 45
1008: PUSH
1009: LD_STRING Dolgov
1011: PPUSH
1012: LD_INT 1
1014: PPUSH
1015: LD_INT 0
1017: PPUSH
1018: CALL 11365 0 3
1022: ST_TO_ADDR
// Lipshchin := PrepareUnitExt ( Lipshchin , true , 0 ) ;
1023: LD_ADDR_EXP 46
1027: PUSH
1028: LD_STRING Lipshchin
1030: PPUSH
1031: LD_INT 1
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL 11365 0 3
1041: ST_TO_ADDR
// Karamazov := PrepareUnitExt ( Karamazov , true , class_engineer ) ;
1042: LD_ADDR_EXP 40
1046: PUSH
1047: LD_STRING Karamazov
1049: PPUSH
1050: LD_INT 1
1052: PPUSH
1053: LD_INT 2
1055: PPUSH
1056: CALL 11365 0 3
1060: ST_TO_ADDR
// Petrovova := PrepareUnitExt ( Petrovova , true , 0 ) ;
1061: LD_ADDR_EXP 41
1065: PUSH
1066: LD_STRING Petrovova
1068: PPUSH
1069: LD_INT 1
1071: PPUSH
1072: LD_INT 0
1074: PPUSH
1075: CALL 11365 0 3
1079: ST_TO_ADDR
// Gleb := PrepareUnitExt ( Gleb , true , 0 ) ;
1080: LD_ADDR_EXP 42
1084: PUSH
1085: LD_STRING Gleb
1087: PPUSH
1088: LD_INT 1
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL 11365 0 3
1098: ST_TO_ADDR
// Petrosyan := PrepareUnitExt ( Petrosyan , true , 0 ) ;
1099: LD_ADDR_EXP 43
1103: PUSH
1104: LD_STRING Petrosyan
1106: PPUSH
1107: LD_INT 1
1109: PPUSH
1110: LD_INT 0
1112: PPUSH
1113: CALL 11365 0 3
1117: ST_TO_ADDR
// Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
1118: LD_ADDR_EXP 47
1122: PUSH
1123: LD_STRING Platonov
1125: PPUSH
1126: LD_INT 0
1128: PPUSH
1129: LD_INT 0
1131: PPUSH
1132: CALL 11365 0 3
1136: ST_TO_ADDR
// if TestCharacters ( 04_Kirilenkova ) then
1137: LD_STRING 04_Kirilenkova
1139: PPUSH
1140: CALL_OW 28
1144: IFFALSE 1171
// begin Kirilenkova := CreateCharacter ( 04_Kirilenkova ) ;
1146: LD_ADDR_EXP 48
1150: PUSH
1151: LD_STRING 04_Kirilenkova
1153: PPUSH
1154: CALL_OW 34
1158: ST_TO_ADDR
// SetClass ( Kirilenkova , class_scientistic ) ;
1159: LD_EXP 48
1163: PPUSH
1164: LD_INT 4
1166: PPUSH
1167: CALL_OW 336
// end ; if TestCharacters ( 04_Belkov ) then
1171: LD_STRING 04_Belkov
1173: PPUSH
1174: CALL_OW 28
1178: IFFALSE 1205
// begin Belkov := CreateCharacter ( 04_Belkov ) ;
1180: LD_ADDR_EXP 49
1184: PUSH
1185: LD_STRING 04_Belkov
1187: PPUSH
1188: CALL_OW 34
1192: ST_TO_ADDR
// SetClass ( Belkov , class_soldier ) ;
1193: LD_EXP 49
1197: PPUSH
1198: LD_INT 1
1200: PPUSH
1201: CALL_OW 336
// end ; if TestCharacters ( 04_Belkov2 ) then
1205: LD_STRING 04_Belkov2
1207: PPUSH
1208: CALL_OW 28
1212: IFFALSE 1239
// begin Belkov2 := CreateCharacter ( 04_Belkov2 ) ;
1214: LD_ADDR_EXP 50
1218: PUSH
1219: LD_STRING 04_Belkov2
1221: PPUSH
1222: CALL_OW 34
1226: ST_TO_ADDR
// SetClass ( Belkov2 , class_soldier ) ;
1227: LD_EXP 50
1231: PPUSH
1232: LD_INT 1
1234: PPUSH
1235: CALL_OW 336
// end ; for i := 1 to vehiclesFrom05 do
1239: LD_ADDR_VAR 0 2
1243: PUSH
1244: DOUBLE
1245: LD_INT 1
1247: DEC
1248: ST_TO_ADDR
1249: LD_EXP 1
1253: PUSH
1254: FOR_TO
1255: IFFALSE 1917
// begin uc_nation = vehiclesFrom05 [ i ] [ 1 ] ;
1257: LD_ADDR_OWVAR 21
1261: PUSH
1262: LD_EXP 1
1266: PUSH
1267: LD_VAR 0 2
1271: ARRAY
1272: PUSH
1273: LD_INT 1
1275: ARRAY
1276: ST_TO_ADDR
// vc_chassis := vehiclesFrom05 [ i ] [ 2 ] ;
1277: LD_ADDR_OWVAR 37
1281: PUSH
1282: LD_EXP 1
1286: PUSH
1287: LD_VAR 0 2
1291: ARRAY
1292: PUSH
1293: LD_INT 2
1295: ARRAY
1296: ST_TO_ADDR
// vc_engine = vehiclesFrom05 [ i ] [ 3 ] ;
1297: LD_ADDR_OWVAR 39
1301: PUSH
1302: LD_EXP 1
1306: PUSH
1307: LD_VAR 0 2
1311: ARRAY
1312: PUSH
1313: LD_INT 3
1315: ARRAY
1316: ST_TO_ADDR
// vc_control = vehiclesFrom05 [ i ] [ 4 ] ;
1317: LD_ADDR_OWVAR 38
1321: PUSH
1322: LD_EXP 1
1326: PUSH
1327: LD_VAR 0 2
1331: ARRAY
1332: PUSH
1333: LD_INT 4
1335: ARRAY
1336: ST_TO_ADDR
// vc_weapon := vehiclesFrom05 [ i ] [ 5 ] ;
1337: LD_ADDR_OWVAR 40
1341: PUSH
1342: LD_EXP 1
1346: PUSH
1347: LD_VAR 0 2
1351: ARRAY
1352: PUSH
1353: LD_INT 5
1355: ARRAY
1356: ST_TO_ADDR
// uc_direction := 0 ;
1357: LD_ADDR_OWVAR 24
1361: PUSH
1362: LD_INT 0
1364: ST_TO_ADDR
// vc_fuel_battery := Rand ( 10 , 15 ) ;
1365: LD_ADDR_OWVAR 41
1369: PUSH
1370: LD_INT 10
1372: PPUSH
1373: LD_INT 15
1375: PPUSH
1376: CALL_OW 12
1380: ST_TO_ADDR
// car := CreateVehicle ;
1381: LD_ADDR_VAR 0 4
1385: PUSH
1386: CALL_OW 45
1390: ST_TO_ADDR
// distance = 999 ;
1391: LD_ADDR_VAR 0 11
1395: PUSH
1396: LD_INT 999
1398: ST_TO_ADDR
// index = 1 ;
1399: LD_ADDR_VAR 0 12
1403: PUSH
1404: LD_INT 1
1406: ST_TO_ADDR
// for j := 1 to areaPoints [ 1 ] do
1407: LD_ADDR_VAR 0 3
1411: PUSH
1412: DOUBLE
1413: LD_INT 1
1415: DEC
1416: ST_TO_ADDR
1417: LD_VAR 0 8
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PUSH
1426: FOR_TO
1427: IFFALSE 1598
// begin if GetDistXY ( point [ 1 ] , point [ 2 ] , areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ) < distance then
1429: LD_VAR 0 7
1433: PUSH
1434: LD_INT 1
1436: ARRAY
1437: PPUSH
1438: LD_VAR 0 7
1442: PUSH
1443: LD_INT 2
1445: ARRAY
1446: PPUSH
1447: LD_VAR 0 8
1451: PUSH
1452: LD_INT 1
1454: ARRAY
1455: PUSH
1456: LD_VAR 0 3
1460: ARRAY
1461: PPUSH
1462: LD_VAR 0 8
1466: PUSH
1467: LD_INT 2
1469: ARRAY
1470: PUSH
1471: LD_VAR 0 3
1475: ARRAY
1476: PPUSH
1477: CALL_OW 298
1481: PUSH
1482: LD_VAR 0 11
1486: LESS
1487: IFFALSE 1596
// begin distance = GetDistXY ( point [ 1 ] , point [ 2 ] , areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ) ;
1489: LD_ADDR_VAR 0 11
1493: PUSH
1494: LD_VAR 0 7
1498: PUSH
1499: LD_INT 1
1501: ARRAY
1502: PPUSH
1503: LD_VAR 0 7
1507: PUSH
1508: LD_INT 2
1510: ARRAY
1511: PPUSH
1512: LD_VAR 0 8
1516: PUSH
1517: LD_INT 1
1519: ARRAY
1520: PUSH
1521: LD_VAR 0 3
1525: ARRAY
1526: PPUSH
1527: LD_VAR 0 8
1531: PUSH
1532: LD_INT 2
1534: ARRAY
1535: PUSH
1536: LD_VAR 0 3
1540: ARRAY
1541: PPUSH
1542: CALL_OW 298
1546: ST_TO_ADDR
// nearPosition = [ areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ] ;
1547: LD_ADDR_VAR 0 9
1551: PUSH
1552: LD_VAR 0 8
1556: PUSH
1557: LD_INT 1
1559: ARRAY
1560: PUSH
1561: LD_VAR 0 3
1565: ARRAY
1566: PUSH
1567: LD_VAR 0 8
1571: PUSH
1572: LD_INT 2
1574: ARRAY
1575: PUSH
1576: LD_VAR 0 3
1580: ARRAY
1581: PUSH
1582: EMPTY
1583: LIST
1584: LIST
1585: ST_TO_ADDR
// index = j ;
1586: LD_ADDR_VAR 0 12
1590: PUSH
1591: LD_VAR 0 3
1595: ST_TO_ADDR
// end ; end ;
1596: GO 1426
1598: POP
1599: POP
// if not burlakPosition then
1600: LD_VAR 0 10
1604: NOT
1605: IFFALSE 1617
// burlakPosition = nearPosition ;
1607: LD_ADDR_VAR 0 10
1611: PUSH
1612: LD_VAR 0 9
1616: ST_TO_ADDR
// if areaPoints then
1617: LD_VAR 0 8
1621: IFFALSE 1669
// begin areaPoints = Delete2D ( areaPoints , 1 , index ) ;
1623: LD_ADDR_VAR 0 8
1627: PUSH
1628: LD_VAR 0 8
1632: PPUSH
1633: LD_INT 1
1635: PPUSH
1636: LD_VAR 0 12
1640: PPUSH
1641: CALL 12194 0 3
1645: ST_TO_ADDR
// areaPoints = Delete2D ( areaPoints , 2 , index ) ;
1646: LD_ADDR_VAR 0 8
1650: PUSH
1651: LD_VAR 0 8
1655: PPUSH
1656: LD_INT 2
1658: PPUSH
1659: LD_VAR 0 12
1663: PPUSH
1664: CALL 12194 0 3
1668: ST_TO_ADDR
// end ; PlaceUnitXY ( car , nearPosition [ 1 ] , nearPosition [ 2 ] , false ) ;
1669: LD_VAR 0 4
1673: PPUSH
1674: LD_VAR 0 9
1678: PUSH
1679: LD_INT 1
1681: ARRAY
1682: PPUSH
1683: LD_VAR 0 9
1687: PUSH
1688: LD_INT 2
1690: ARRAY
1691: PPUSH
1692: LD_INT 0
1694: PPUSH
1695: CALL_OW 48
// case vehiclesFrom05 [ i ] [ 6 ] of Bur :
1699: LD_EXP 1
1703: PUSH
1704: LD_VAR 0 2
1708: ARRAY
1709: PUSH
1710: LD_INT 6
1712: ARRAY
1713: PUSH
1714: LD_STRING Bur
1716: DOUBLE
1717: EQUAL
1718: IFTRUE 1722
1720: GO 1739
1722: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
1723: LD_EXP 39
1727: PPUSH
1728: LD_VAR 0 4
1732: PPUSH
1733: CALL_OW 52
1737: GO 1915
1739: LD_STRING Kar
1741: DOUBLE
1742: EQUAL
1743: IFTRUE 1747
1745: GO 1764
1747: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
1748: LD_EXP 40
1752: PPUSH
1753: LD_VAR 0 4
1757: PPUSH
1758: CALL_OW 52
1762: GO 1915
1764: LD_STRING Ptr
1766: DOUBLE
1767: EQUAL
1768: IFTRUE 1772
1770: GO 1789
1772: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
1773: LD_EXP 41
1777: PPUSH
1778: LD_VAR 0 4
1782: PPUSH
1783: CALL_OW 52
1787: GO 1915
1789: LD_STRING Glb
1791: DOUBLE
1792: EQUAL
1793: IFTRUE 1797
1795: GO 1814
1797: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
1798: LD_EXP 42
1802: PPUSH
1803: LD_VAR 0 4
1807: PPUSH
1808: CALL_OW 52
1812: GO 1915
1814: LD_STRING Pet
1816: DOUBLE
1817: EQUAL
1818: IFTRUE 1822
1820: GO 1839
1822: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
1823: LD_EXP 43
1827: PPUSH
1828: LD_VAR 0 4
1832: PPUSH
1833: CALL_OW 52
1837: GO 1915
1839: LD_STRING Dol
1841: DOUBLE
1842: EQUAL
1843: IFTRUE 1847
1845: GO 1864
1847: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
1848: LD_EXP 45
1852: PPUSH
1853: LD_VAR 0 4
1857: PPUSH
1858: CALL_OW 52
1862: GO 1915
1864: LD_STRING Lip
1866: DOUBLE
1867: EQUAL
1868: IFTRUE 1872
1870: GO 1889
1872: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
1873: LD_EXP 46
1877: PPUSH
1878: LD_VAR 0 4
1882: PPUSH
1883: CALL_OW 52
1887: GO 1915
1889: LD_STRING Tit
1891: DOUBLE
1892: EQUAL
1893: IFTRUE 1897
1895: GO 1914
1897: POP
// PlaceHumanInUnit ( Titov , car ) ; end ;
1898: LD_EXP 44
1902: PPUSH
1903: LD_VAR 0 4
1907: PPUSH
1908: CALL_OW 52
1912: GO 1915
1914: POP
// end ;
1915: GO 1254
1917: POP
1918: POP
// cargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
1919: LD_ADDR_VAR 0 6
1923: PUSH
1924: LD_INT 22
1926: PUSH
1927: LD_INT 3
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: PUSH
1934: LD_INT 21
1936: PUSH
1937: LD_INT 2
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: PUSH
1944: LD_INT 2
1946: PUSH
1947: LD_INT 34
1949: PUSH
1950: LD_INT 51
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: PUSH
1957: LD_INT 34
1959: PUSH
1960: LD_INT 32
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: LIST
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: PPUSH
1977: CALL_OW 69
1981: ST_TO_ADDR
// if cargoList then
1982: LD_VAR 0 6
1986: IFFALSE 2115
// for i = 1 to cargoList do
1988: LD_ADDR_VAR 0 2
1992: PUSH
1993: DOUBLE
1994: LD_INT 1
1996: DEC
1997: ST_TO_ADDR
1998: LD_VAR 0 6
2002: PUSH
2003: FOR_TO
2004: IFFALSE 2113
// if resourcesFrom05 then
2006: LD_EXP 2
2010: IFFALSE 2111
// begin AddCargo ( cargoList [ i ] , 1 , resourcesFrom05 [ i ] [ 1 ] ) ;
2012: LD_VAR 0 6
2016: PUSH
2017: LD_VAR 0 2
2021: ARRAY
2022: PPUSH
2023: LD_INT 1
2025: PPUSH
2026: LD_EXP 2
2030: PUSH
2031: LD_VAR 0 2
2035: ARRAY
2036: PUSH
2037: LD_INT 1
2039: ARRAY
2040: PPUSH
2041: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resourcesFrom05 [ i ] [ 2 ] ) ;
2045: LD_VAR 0 6
2049: PUSH
2050: LD_VAR 0 2
2054: ARRAY
2055: PPUSH
2056: LD_INT 2
2058: PPUSH
2059: LD_EXP 2
2063: PUSH
2064: LD_VAR 0 2
2068: ARRAY
2069: PUSH
2070: LD_INT 2
2072: ARRAY
2073: PPUSH
2074: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resourcesFrom05 [ i ] [ 3 ] ) ;
2078: LD_VAR 0 6
2082: PUSH
2083: LD_VAR 0 2
2087: ARRAY
2088: PPUSH
2089: LD_INT 3
2091: PPUSH
2092: LD_EXP 2
2096: PUSH
2097: LD_VAR 0 2
2101: ARRAY
2102: PUSH
2103: LD_INT 3
2105: ARRAY
2106: PPUSH
2107: CALL_OW 291
// end ;
2111: GO 2003
2113: POP
2114: POP
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_class , class_engineer ] ] ) then
2115: LD_INT 22
2117: PUSH
2118: LD_INT 3
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: LD_INT 21
2127: PUSH
2128: LD_INT 1
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: PUSH
2135: LD_INT 23
2137: PUSH
2138: LD_INT 3
2140: PUSH
2141: EMPTY
2142: LIST
2143: LIST
2144: PUSH
2145: LD_INT 25
2147: PUSH
2148: LD_INT 2
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: PUSH
2155: EMPTY
2156: LIST
2157: LIST
2158: LIST
2159: LIST
2160: PPUSH
2161: CALL_OW 69
2165: NOT
2166: IFFALSE 2271
// begin if IsOk ( Lipshchin ) then
2168: LD_EXP 46
2172: PPUSH
2173: CALL_OW 302
2177: IFFALSE 2193
// SetClass ( Lipshchin , class_engineer ) else
2179: LD_EXP 46
2183: PPUSH
2184: LD_INT 2
2186: PPUSH
2187: CALL_OW 336
2191: GO 2271
// begin tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ;
2193: LD_ADDR_VAR 0 5
2197: PUSH
2198: LD_INT 22
2200: PUSH
2201: LD_INT 3
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: PUSH
2208: LD_INT 21
2210: PUSH
2211: LD_INT 1
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: PUSH
2218: LD_INT 23
2220: PUSH
2221: LD_INT 3
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: PUSH
2228: LD_INT 50
2230: PUSH
2231: EMPTY
2232: LIST
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: LIST
2238: LIST
2239: PPUSH
2240: CALL_OW 69
2244: ST_TO_ADDR
// SetClass ( tmp [ rand ( 0 , tmp ) ] , class_engineer ) ;
2245: LD_VAR 0 5
2249: PUSH
2250: LD_INT 0
2252: PPUSH
2253: LD_VAR 0 5
2257: PPUSH
2258: CALL_OW 12
2262: ARRAY
2263: PPUSH
2264: LD_INT 2
2266: PPUSH
2267: CALL_OW 336
// end ; end ; SetTech ( tech_ApeLang , 3 , apeTechsStatus [ 1 ] ) ;
2271: LD_INT 1
2273: PPUSH
2274: LD_INT 3
2276: PPUSH
2277: LD_EXP 5
2281: PUSH
2282: LD_INT 1
2284: ARRAY
2285: PPUSH
2286: CALL_OW 322
// SetTech ( tech_ApePsych , 3 , apeTechsStatus [ 2 ] ) ;
2290: LD_INT 2
2292: PPUSH
2293: LD_INT 3
2295: PPUSH
2296: LD_EXP 5
2300: PUSH
2301: LD_INT 2
2303: ARRAY
2304: PPUSH
2305: CALL_OW 322
// SetTech ( tech_ApeAgres , 3 , apeTechsStatus [ 3 ] ) ;
2309: LD_INT 11
2311: PPUSH
2312: LD_INT 3
2314: PPUSH
2315: LD_EXP 5
2319: PUSH
2320: LD_INT 3
2322: ARRAY
2323: PPUSH
2324: CALL_OW 322
// end ;
2328: LD_VAR 0 1
2332: RET
// export function PrepareVsevolod ; var i , un ; begin
2333: LD_INT 0
2335: PPUSH
2336: PPUSH
2337: PPUSH
// uc_side = 6 ;
2338: LD_ADDR_OWVAR 20
2342: PUSH
2343: LD_INT 6
2345: ST_TO_ADDR
// uc_nation = 3 ;
2346: LD_ADDR_OWVAR 21
2350: PUSH
2351: LD_INT 3
2353: ST_TO_ADDR
// vsevolodTeam = [ ] ;
2354: LD_ADDR_EXP 52
2358: PUSH
2359: EMPTY
2360: ST_TO_ADDR
// Vsevolod := PrepareUnitExt ( Vsevolod , false , class_soldier ) ;
2361: LD_ADDR_EXP 51
2365: PUSH
2366: LD_STRING Vsevolod
2368: PPUSH
2369: LD_INT 0
2371: PPUSH
2372: LD_INT 1
2374: PPUSH
2375: CALL 11365 0 3
2379: ST_TO_ADDR
// PlaceUnitArea ( Vsevolod , VsevolodSpawnArea , false ) ;
2380: LD_EXP 51
2384: PPUSH
2385: LD_INT 7
2387: PPUSH
2388: LD_INT 0
2390: PPUSH
2391: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Vsevolod ;
2395: LD_ADDR_EXP 52
2399: PUSH
2400: LD_EXP 52
2404: PUSH
2405: LD_EXP 51
2409: ADD
2410: ST_TO_ADDR
// Petr = PrepareUnitExt ( SPetr , false , class_soldier ) ;
2411: LD_ADDR_EXP 53
2415: PUSH
2416: LD_STRING SPetr
2418: PPUSH
2419: LD_INT 0
2421: PPUSH
2422: LD_INT 1
2424: PPUSH
2425: CALL 11365 0 3
2429: ST_TO_ADDR
// PlaceUnitArea ( Petr , VsevolodSpawnArea , false ) ;
2430: LD_EXP 53
2434: PPUSH
2435: LD_INT 7
2437: PPUSH
2438: LD_INT 0
2440: PPUSH
2441: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Petr ;
2445: LD_ADDR_EXP 52
2449: PUSH
2450: LD_EXP 52
2454: PUSH
2455: LD_EXP 53
2459: ADD
2460: ST_TO_ADDR
// Igor = PrepareUnitExt ( SIgor , false , class_soldier ) ;
2461: LD_ADDR_EXP 54
2465: PUSH
2466: LD_STRING SIgor
2468: PPUSH
2469: LD_INT 0
2471: PPUSH
2472: LD_INT 1
2474: PPUSH
2475: CALL 11365 0 3
2479: ST_TO_ADDR
// PlaceUnitArea ( Igor , VsevolodSpawnArea , false ) ;
2480: LD_EXP 54
2484: PPUSH
2485: LD_INT 7
2487: PPUSH
2488: LD_INT 0
2490: PPUSH
2491: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Igor ;
2495: LD_ADDR_EXP 52
2499: PUSH
2500: LD_EXP 52
2504: PUSH
2505: LD_EXP 54
2509: ADD
2510: ST_TO_ADDR
// end ;
2511: LD_VAR 0 1
2515: RET
// export function SpawnPlatonovReinforces ; var i , un , veh ; begin
2516: LD_INT 0
2518: PPUSH
2519: PPUSH
2520: PPUSH
2521: PPUSH
// uc_side = 3 ;
2522: LD_ADDR_OWVAR 20
2526: PUSH
2527: LD_INT 3
2529: ST_TO_ADDR
// uc_nation = 3 ;
2530: LD_ADDR_OWVAR 21
2534: PUSH
2535: LD_INT 3
2537: ST_TO_ADDR
// PrepareSoldier ( false , 4 ) ;
2538: LD_INT 0
2540: PPUSH
2541: LD_INT 4
2543: PPUSH
2544: CALL_OW 381
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] , rand ( 50 , 60 ) ) ;
2548: LD_INT 22
2550: PPUSH
2551: LD_INT 1
2553: PPUSH
2554: LD_INT 1
2556: PPUSH
2557: LD_INT 43
2559: PUSH
2560: LD_INT 44
2562: PUSH
2563: EMPTY
2564: LIST
2565: LIST
2566: PUSH
2567: LD_INT 1
2569: PPUSH
2570: LD_INT 2
2572: PPUSH
2573: CALL_OW 12
2577: ARRAY
2578: PPUSH
2579: LD_INT 50
2581: PPUSH
2582: LD_INT 60
2584: PPUSH
2585: CALL_OW 12
2589: PPUSH
2590: CALL 45672 0 5
// veh = CreateVehicle ;
2594: LD_ADDR_VAR 0 4
2598: PUSH
2599: CALL_OW 45
2603: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
2604: LD_VAR 0 4
2608: PPUSH
2609: LD_INT 0
2611: PPUSH
2612: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 230 , false ) ;
2616: LD_VAR 0 4
2620: PPUSH
2621: LD_INT 134
2623: PPUSH
2624: LD_INT 230
2626: PPUSH
2627: LD_INT 0
2629: PPUSH
2630: CALL_OW 48
// if Belkov then
2634: LD_EXP 49
2638: IFFALSE 2656
// PlaceHumanInUnit ( Belkov , veh ) else
2640: LD_EXP 49
2644: PPUSH
2645: LD_VAR 0 4
2649: PPUSH
2650: CALL_OW 52
2654: GO 2700
// if Difficulty = 1 or Difficulty = 2 then
2656: LD_OWVAR 67
2660: PUSH
2661: LD_INT 1
2663: EQUAL
2664: PUSH
2665: LD_OWVAR 67
2669: PUSH
2670: LD_INT 2
2672: EQUAL
2673: OR
2674: IFFALSE 2700
// begin un = CreateHuman ;
2676: LD_ADDR_VAR 0 3
2680: PUSH
2681: CALL_OW 44
2685: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2686: LD_VAR 0 3
2690: PPUSH
2691: LD_VAR 0 4
2695: PPUSH
2696: CALL_OW 52
// end ; PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
2700: LD_INT 22
2702: PPUSH
2703: LD_INT 1
2705: PPUSH
2706: LD_INT 1
2708: PPUSH
2709: LD_INT 51
2711: PPUSH
2712: LD_INT 50
2714: PPUSH
2715: LD_INT 60
2717: PPUSH
2718: CALL_OW 12
2722: PPUSH
2723: CALL 45672 0 5
// veh = CreateVehicle ;
2727: LD_ADDR_VAR 0 4
2731: PUSH
2732: CALL_OW 45
2736: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
2737: LD_VAR 0 4
2741: PPUSH
2742: LD_INT 0
2744: PPUSH
2745: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 233 , false ) ;
2749: LD_VAR 0 4
2753: PPUSH
2754: LD_INT 134
2756: PPUSH
2757: LD_INT 233
2759: PPUSH
2760: LD_INT 0
2762: PPUSH
2763: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
2767: LD_VAR 0 4
2771: PPUSH
2772: LD_INT 1
2774: PPUSH
2775: LD_INT 100
2777: PPUSH
2778: CALL_OW 290
// if Belkov2 then
2782: LD_EXP 50
2786: IFFALSE 2804
// PlaceHumanInUnit ( Belkov2 , veh ) else
2788: LD_EXP 50
2792: PPUSH
2793: LD_VAR 0 4
2797: PPUSH
2798: CALL_OW 52
2802: GO 2838
// if Difficulty = 1 then
2804: LD_OWVAR 67
2808: PUSH
2809: LD_INT 1
2811: EQUAL
2812: IFFALSE 2838
// begin un = CreateHuman ;
2814: LD_ADDR_VAR 0 3
2818: PUSH
2819: CALL_OW 44
2823: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2824: LD_VAR 0 3
2828: PPUSH
2829: LD_VAR 0 4
2833: PPUSH
2834: CALL_OW 52
// end ; if Kirilenkova then
2838: LD_EXP 48
2842: IFFALSE 2940
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
2844: LD_INT 22
2846: PPUSH
2847: LD_INT 1
2849: PPUSH
2850: LD_INT 1
2852: PPUSH
2853: LD_INT 51
2855: PPUSH
2856: LD_INT 50
2858: PPUSH
2859: LD_INT 60
2861: PPUSH
2862: CALL_OW 12
2866: PPUSH
2867: CALL 45672 0 5
// veh = CreateVehicle ;
2871: LD_ADDR_VAR 0 4
2875: PUSH
2876: CALL_OW 45
2880: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
2881: LD_VAR 0 4
2885: PPUSH
2886: LD_INT 0
2888: PPUSH
2889: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 236 , false ) ;
2893: LD_VAR 0 4
2897: PPUSH
2898: LD_INT 134
2900: PPUSH
2901: LD_INT 236
2903: PPUSH
2904: LD_INT 0
2906: PPUSH
2907: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
2911: LD_VAR 0 4
2915: PPUSH
2916: LD_INT 1
2918: PPUSH
2919: LD_INT 100
2921: PPUSH
2922: CALL_OW 290
// PlaceHumanInUnit ( Kirilenkova , veh ) ;
2926: LD_EXP 48
2930: PPUSH
2931: LD_VAR 0 4
2935: PPUSH
2936: CALL_OW 52
// end ; end ; end_of_file
2940: LD_VAR 0 1
2944: RET
// export VanHouten ; export ovsyenkoBase , terminalBase , headAmBase ; export trapTeam , convoyTeam , attackTeam ; export function PrepareAmericans ; begin
2945: LD_INT 0
2947: PPUSH
// PrepareOvsyenko ;
2948: CALL 2965 0 0
// PrepareTerminal ;
2952: CALL 3160 0 0
// PrepareMainAmericanBase ;
2956: CALL 3243 0 0
// end ;
2960: LD_VAR 0 1
2964: RET
// function PrepareOvsyenko ; var soldiersAmount ; begin
2965: LD_INT 0
2967: PPUSH
2968: PPUSH
// uc_side = 1 ;
2969: LD_ADDR_OWVAR 20
2973: PUSH
2974: LD_INT 1
2976: ST_TO_ADDR
// uc_nation = nation_american ;
2977: LD_ADDR_OWVAR 21
2981: PUSH
2982: LD_INT 1
2984: ST_TO_ADDR
// soldiersAmount = 3 ;
2985: LD_ADDR_VAR 0 2
2989: PUSH
2990: LD_INT 3
2992: ST_TO_ADDR
// if fastBreakthrough then
2993: LD_EXP 3
2997: IFFALSE 3015
// begin RemoveUnit ( ovs_bun2 ) ;
2999: LD_INT 229
3001: PPUSH
3002: CALL_OW 64
// RemoveUnit ( ovs_bun3 ) ;
3006: LD_INT 258
3008: PPUSH
3009: CALL_OW 64
// end else
3013: GO 3023
// soldiersAmount = 4 ;
3015: LD_ADDR_VAR 0 2
3019: PUSH
3020: LD_INT 4
3022: ST_TO_ADDR
// ovsyenkoBase := Nef_PrepareBase ( ovsyenko , OvsyenkoBaseArea , ovsyenko , enemySkillLevel , [ ovsyenkoStartCrates , 50 , 0 ] , 1 , [ soldiersAmount , 1 , 0 , 1 ] ) ;
3023: LD_ADDR_EXP 56
3027: PUSH
3028: LD_INT 86
3030: PPUSH
3031: LD_INT 3
3033: PPUSH
3034: LD_STRING ovsyenko
3036: PPUSH
3037: LD_EXP 34
3041: PPUSH
3042: LD_EXP 35
3046: PUSH
3047: LD_INT 50
3049: PUSH
3050: LD_INT 0
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: LIST
3057: PPUSH
3058: LD_INT 1
3060: PPUSH
3061: LD_VAR 0 2
3065: PUSH
3066: LD_INT 1
3068: PUSH
3069: LD_INT 0
3071: PUSH
3072: LD_INT 1
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: PPUSH
3081: CALL 12266 0 7
3085: ST_TO_ADDR
// case Difficulty of 1 :
3086: LD_OWVAR 67
3090: PUSH
3091: LD_INT 1
3093: DOUBLE
3094: EQUAL
3095: IFTRUE 3099
3097: GO 3112
3099: POP
// PlaceWeaponTurret ( ovs_bun1 , us_double_gun ) ; 2 :
3100: LD_INT 97
3102: PPUSH
3103: LD_INT 5
3105: PPUSH
3106: CALL_OW 431
3110: GO 3155
3112: LD_INT 2
3114: DOUBLE
3115: EQUAL
3116: IFTRUE 3120
3118: GO 3133
3120: POP
// PlaceWeaponTurret ( ovs_bun1 , us_light_gun ) ; 3 :
3121: LD_INT 97
3123: PPUSH
3124: LD_INT 3
3126: PPUSH
3127: CALL_OW 431
3131: GO 3155
3133: LD_INT 3
3135: DOUBLE
3136: EQUAL
3137: IFTRUE 3141
3139: GO 3154
3141: POP
// PlaceWeaponTurret ( ovs_bun1 , us_gatling_gun ) ; end ;
3142: LD_INT 97
3144: PPUSH
3145: LD_INT 4
3147: PPUSH
3148: CALL_OW 431
3152: GO 3155
3154: POP
// end ;
3155: LD_VAR 0 1
3159: RET
// function PrepareTerminal ; begin
3160: LD_INT 0
3162: PPUSH
// uc_side = 1 ;
3163: LD_ADDR_OWVAR 20
3167: PUSH
3168: LD_INT 1
3170: ST_TO_ADDR
// uc_nation = nation_american ;
3171: LD_ADDR_OWVAR 21
3175: PUSH
3176: LD_INT 1
3178: ST_TO_ADDR
// terminalBase := Nef_PrepareBase ( terminal , terminalBaseArea , terminal , enemySkillLevel , [ 100 , 50 , 0 ] , 1 , [ 2 , 1 , 0 , 0 ] ) ;
3179: LD_ADDR_EXP 57
3183: PUSH
3184: LD_INT 168
3186: PPUSH
3187: LD_INT 4
3189: PPUSH
3190: LD_STRING terminal
3192: PPUSH
3193: LD_EXP 34
3197: PPUSH
3198: LD_INT 100
3200: PUSH
3201: LD_INT 50
3203: PUSH
3204: LD_INT 0
3206: PUSH
3207: EMPTY
3208: LIST
3209: LIST
3210: LIST
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: LD_INT 2
3217: PUSH
3218: LD_INT 1
3220: PUSH
3221: LD_INT 0
3223: PUSH
3224: LD_INT 0
3226: PUSH
3227: EMPTY
3228: LIST
3229: LIST
3230: LIST
3231: LIST
3232: PPUSH
3233: CALL 12266 0 7
3237: ST_TO_ADDR
// end ;
3238: LD_VAR 0 1
3242: RET
// function PrepareMainAmericanBase ; begin
3243: LD_INT 0
3245: PPUSH
// uc_side = 1 ;
3246: LD_ADDR_OWVAR 20
3250: PUSH
3251: LD_INT 1
3253: ST_TO_ADDR
// uc_nation = nation_american ;
3254: LD_ADDR_OWVAR 21
3258: PUSH
3259: LD_INT 1
3261: ST_TO_ADDR
// if fastBreakthrough then
3262: LD_EXP 3
3266: IFFALSE 3275
// RemoveUnit ( ovs_bun2 ) ;
3268: LD_INT 229
3270: PPUSH
3271: CALL_OW 64
// headAmBase := Nef_PrepareBase ( headamdepot , HeadAmericanBaseArea ,  , enemySkillLevel , [ 3000 , 1000 , 0 ] , 1 , [ 9 , 3 , 6 , 2 ] ) ;
3275: LD_ADDR_EXP 58
3279: PUSH
3280: LD_INT 106
3282: PPUSH
3283: LD_INT 5
3285: PPUSH
3286: LD_STRING 
3288: PPUSH
3289: LD_EXP 34
3293: PPUSH
3294: LD_INT 3000
3296: PUSH
3297: LD_INT 1000
3299: PUSH
3300: LD_INT 0
3302: PUSH
3303: EMPTY
3304: LIST
3305: LIST
3306: LIST
3307: PPUSH
3308: LD_INT 1
3310: PPUSH
3311: LD_INT 9
3313: PUSH
3314: LD_INT 3
3316: PUSH
3317: LD_INT 6
3319: PUSH
3320: LD_INT 2
3322: PUSH
3323: EMPTY
3324: LIST
3325: LIST
3326: LIST
3327: LIST
3328: PPUSH
3329: CALL 12266 0 7
3333: ST_TO_ADDR
// VanHouten = PrepareUnitExt ( VanHouten , false , class_soldier ) ;
3334: LD_ADDR_EXP 55
3338: PUSH
3339: LD_STRING VanHouten
3341: PPUSH
3342: LD_INT 0
3344: PPUSH
3345: LD_INT 1
3347: PPUSH
3348: CALL 11365 0 3
3352: ST_TO_ADDR
// headAmBase = headAmBase ^ VanHouten ;
3353: LD_ADDR_EXP 58
3357: PUSH
3358: LD_EXP 58
3362: PUSH
3363: LD_EXP 55
3367: ADD
3368: ST_TO_ADDR
// PlaceUnitXYR ( VanHouten , 35 , 57 , 3 , false ) ;
3369: LD_EXP 55
3373: PPUSH
3374: LD_INT 35
3376: PPUSH
3377: LD_INT 57
3379: PPUSH
3380: LD_INT 3
3382: PPUSH
3383: LD_INT 0
3385: PPUSH
3386: CALL_OW 50
// end ;
3390: LD_VAR 0 1
3394: RET
// export function PrepareTrap ; var i , un , nearEnemyUnit ; begin
3395: LD_INT 0
3397: PPUSH
3398: PPUSH
3399: PPUSH
3400: PPUSH
// uc_side = 1 ;
3401: LD_ADDR_OWVAR 20
3405: PUSH
3406: LD_INT 1
3408: ST_TO_ADDR
// uc_nation = nation_american ;
3409: LD_ADDR_OWVAR 21
3413: PUSH
3414: LD_INT 1
3416: ST_TO_ADDR
// for i := 1 to trapAmount do
3417: LD_ADDR_VAR 0 2
3421: PUSH
3422: DOUBLE
3423: LD_INT 1
3425: DEC
3426: ST_TO_ADDR
3427: LD_EXP 37
3431: PUSH
3432: FOR_TO
3433: IFFALSE 3552
// begin PrepareSoldier ( false , enemySkillLevel ) ;
3435: LD_INT 0
3437: PPUSH
3438: LD_EXP 34
3442: PPUSH
3443: CALL_OW 381
// un = CreateHuman ;
3447: LD_ADDR_VAR 0 3
3451: PUSH
3452: CALL_OW 44
3456: ST_TO_ADDR
// trapTeam = trapTeam ^ un ;
3457: LD_ADDR_EXP 59
3461: PUSH
3462: LD_EXP 59
3466: PUSH
3467: LD_VAR 0 3
3471: ADD
3472: ST_TO_ADDR
// PlaceUnitArea ( un , TrapSpawnArea , false ) ;
3473: LD_VAR 0 3
3477: PPUSH
3478: LD_INT 11
3480: PPUSH
3481: LD_INT 0
3483: PPUSH
3484: CALL_OW 49
// nearEnemyUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] ] ) , un ) ;
3488: LD_ADDR_VAR 0 4
3492: PUSH
3493: LD_INT 22
3495: PUSH
3496: LD_INT 3
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: EMPTY
3504: LIST
3505: PPUSH
3506: CALL_OW 69
3510: PPUSH
3511: LD_VAR 0 3
3515: PPUSH
3516: CALL_OW 74
3520: ST_TO_ADDR
// ComAgressiveMove ( un , GetX ( nearEnemyUnit ) , GetY ( nearEnemyUnit ) ) ;
3521: LD_VAR 0 3
3525: PPUSH
3526: LD_VAR 0 4
3530: PPUSH
3531: CALL_OW 250
3535: PPUSH
3536: LD_VAR 0 4
3540: PPUSH
3541: CALL_OW 251
3545: PPUSH
3546: CALL_OW 114
// end ;
3550: GO 3432
3552: POP
3553: POP
// end ;
3554: LD_VAR 0 1
3558: RET
// export function PrepareSoldiersInBunkers ; begin
3559: LD_INT 0
3561: PPUSH
// PrepareSolBun ( enemySkilLLevel , non_bun1 ) ;
3562: LD_EXP 34
3566: PPUSH
3567: LD_INT 236
3569: PPUSH
3570: CALL 14807 0 2
// PrepareSolBun ( enemySkilLLevel , non_bun2 ) ;
3574: LD_EXP 34
3578: PPUSH
3579: LD_INT 240
3581: PPUSH
3582: CALL 14807 0 2
// PrepareSolBun ( enemySkilLLevel , non_bun3 ) ;
3586: LD_EXP 34
3590: PPUSH
3591: LD_INT 243
3593: PPUSH
3594: CALL 14807 0 2
// end ;
3598: LD_VAR 0 1
3602: RET
// export function PrepareConvoy ; var i , un , veh ; begin
3603: LD_INT 0
3605: PPUSH
3606: PPUSH
3607: PPUSH
3608: PPUSH
// convoyTeam = [ ] ;
3609: LD_ADDR_EXP 60
3613: PUSH
3614: EMPTY
3615: ST_TO_ADDR
// uc_side = 1 ;
3616: LD_ADDR_OWVAR 20
3620: PUSH
3621: LD_INT 1
3623: ST_TO_ADDR
// uc_nation = nation_american ;
3624: LD_ADDR_OWVAR 21
3628: PUSH
3629: LD_INT 1
3631: ST_TO_ADDR
// for i := 1 to 2 do
3632: LD_ADDR_VAR 0 2
3636: PUSH
3637: DOUBLE
3638: LD_INT 1
3640: DEC
3641: ST_TO_ADDR
3642: LD_INT 2
3644: PUSH
3645: FOR_TO
3646: IFFALSE 3777
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
3648: LD_INT 3
3650: PPUSH
3651: LD_INT 1
3653: PPUSH
3654: LD_INT 1
3656: PPUSH
3657: LD_INT 12
3659: PPUSH
3660: LD_INT 80
3662: PPUSH
3663: CALL 45672 0 5
// veh = CreateVehicle ;
3667: LD_ADDR_VAR 0 4
3671: PUSH
3672: CALL_OW 45
3676: ST_TO_ADDR
// AddCargo ( veh , mat_cans , 100 ) ;
3677: LD_VAR 0 4
3681: PPUSH
3682: LD_INT 1
3684: PPUSH
3685: LD_INT 100
3687: PPUSH
3688: CALL_OW 291
// convoyTeam = convoyTeam ^ veh ;
3692: LD_ADDR_EXP 60
3696: PUSH
3697: LD_EXP 60
3701: PUSH
3702: LD_VAR 0 4
3706: ADD
3707: ST_TO_ADDR
// PlaceUnitArea ( veh , AmericanSpawnArea1 , false ) ;
3708: LD_VAR 0 4
3712: PPUSH
3713: LD_INT 8
3715: PPUSH
3716: LD_INT 0
3718: PPUSH
3719: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
3723: LD_INT 0
3725: PPUSH
3726: LD_EXP 34
3730: PPUSH
3731: CALL_OW 383
// un = CreateHuman ;
3735: LD_ADDR_VAR 0 3
3739: PUSH
3740: CALL_OW 44
3744: ST_TO_ADDR
// convoyTeam = convoyTeam ^ un ;
3745: LD_ADDR_EXP 60
3749: PUSH
3750: LD_EXP 60
3754: PUSH
3755: LD_VAR 0 3
3759: ADD
3760: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3761: LD_VAR 0 3
3765: PPUSH
3766: LD_VAR 0 4
3770: PPUSH
3771: CALL_OW 52
// end ;
3775: GO 3645
3777: POP
3778: POP
// end ;
3779: LD_VAR 0 1
3783: RET
// export function PrepareAttack ; var i , un , veh ; begin
3784: LD_INT 0
3786: PPUSH
3787: PPUSH
3788: PPUSH
3789: PPUSH
// uc_side = 1 ;
3790: LD_ADDR_OWVAR 20
3794: PUSH
3795: LD_INT 1
3797: ST_TO_ADDR
// uc_nation = nation_american ;
3798: LD_ADDR_OWVAR 21
3802: PUSH
3803: LD_INT 1
3805: ST_TO_ADDR
// for i := 1 to 4 do
3806: LD_ADDR_VAR 0 2
3810: PUSH
3811: DOUBLE
3812: LD_INT 1
3814: DEC
3815: ST_TO_ADDR
3816: LD_INT 4
3818: PUSH
3819: FOR_TO
3820: IFFALSE 3959
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_light_gun , us_double_gun , us_gatling_gun ] [ Rand ( 1 , 3 ) ] , 80 ) ;
3822: LD_INT 3
3824: PPUSH
3825: LD_INT 1
3827: PPUSH
3828: LD_INT 1
3830: PPUSH
3831: LD_INT 3
3833: PUSH
3834: LD_INT 5
3836: PUSH
3837: LD_INT 4
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: LIST
3844: PUSH
3845: LD_INT 1
3847: PPUSH
3848: LD_INT 3
3850: PPUSH
3851: CALL_OW 12
3855: ARRAY
3856: PPUSH
3857: LD_INT 80
3859: PPUSH
3860: CALL 45672 0 5
// veh = CreateVehicle ;
3864: LD_ADDR_VAR 0 4
3868: PUSH
3869: CALL_OW 45
3873: ST_TO_ADDR
// attackTeam = attackTeam ^ veh ;
3874: LD_ADDR_EXP 61
3878: PUSH
3879: LD_EXP 61
3883: PUSH
3884: LD_VAR 0 4
3888: ADD
3889: ST_TO_ADDR
// PlaceUnitArea ( veh , AmericanSpawnArea2 , false ) ;
3890: LD_VAR 0 4
3894: PPUSH
3895: LD_INT 17
3897: PPUSH
3898: LD_INT 0
3900: PPUSH
3901: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
3905: LD_INT 0
3907: PPUSH
3908: LD_EXP 34
3912: PPUSH
3913: CALL_OW 383
// un = CreateHuman ;
3917: LD_ADDR_VAR 0 3
3921: PUSH
3922: CALL_OW 44
3926: ST_TO_ADDR
// attackTeam = attackTeam ^ un ;
3927: LD_ADDR_EXP 61
3931: PUSH
3932: LD_EXP 61
3936: PUSH
3937: LD_VAR 0 3
3941: ADD
3942: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3943: LD_VAR 0 3
3947: PPUSH
3948: LD_VAR 0 4
3952: PPUSH
3953: CALL_OW 52
// end ;
3957: GO 3819
3959: POP
3960: POP
// for i := 1 to 3 do
3961: LD_ADDR_VAR 0 2
3965: PUSH
3966: DOUBLE
3967: LD_INT 1
3969: DEC
3970: ST_TO_ADDR
3971: LD_INT 3
3973: PUSH
3974: FOR_TO
3975: IFFALSE 4032
// begin PrepareSoldier ( false , enemySkillLevel ) ;
3977: LD_INT 0
3979: PPUSH
3980: LD_EXP 34
3984: PPUSH
3985: CALL_OW 381
// un = CreateHuman ;
3989: LD_ADDR_VAR 0 3
3993: PUSH
3994: CALL_OW 44
3998: ST_TO_ADDR
// attackTeam = attackTeam ^ un ;
3999: LD_ADDR_EXP 61
4003: PUSH
4004: LD_EXP 61
4008: PUSH
4009: LD_VAR 0 3
4013: ADD
4014: ST_TO_ADDR
// PlaceUnitArea ( un , AmericanSpawnArea2 , false ) ;
4015: LD_VAR 0 3
4019: PPUSH
4020: LD_INT 17
4022: PPUSH
4023: LD_INT 0
4025: PPUSH
4026: CALL_OW 49
// end ;
4030: GO 3974
4032: POP
4033: POP
// end ; end_of_file
4034: LD_VAR 0 1
4038: RET
// export function Nef_PrepareNature ; var i , un ; begin
4039: LD_INT 0
4041: PPUSH
4042: PPUSH
4043: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
4044: LD_ADDR_VAR 0 2
4048: PUSH
4049: DOUBLE
4050: LD_INT 1
4052: DEC
4053: ST_TO_ADDR
4054: LD_EXP 28
4058: PUSH
4059: LD_INT 1
4061: ARRAY
4062: PUSH
4063: FOR_TO
4064: IFFALSE 4174
// begin uc_side = 0 ;
4066: LD_ADDR_OWVAR 20
4070: PUSH
4071: LD_INT 0
4073: ST_TO_ADDR
// uc_nation = nation_nature ;
4074: LD_ADDR_OWVAR 21
4078: PUSH
4079: LD_INT 0
4081: ST_TO_ADDR
// hc_class = class_apeman ;
4082: LD_ADDR_OWVAR 28
4086: PUSH
4087: LD_INT 12
4089: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4090: LD_ADDR_OWVAR 31
4094: PUSH
4095: LD_EXP 29
4099: PUSH
4100: LD_INT 1
4102: ARRAY
4103: PUSH
4104: LD_EXP 29
4108: PUSH
4109: LD_INT 2
4111: ARRAY
4112: PUSH
4113: LD_EXP 29
4117: PUSH
4118: LD_INT 3
4120: ARRAY
4121: PUSH
4122: LD_EXP 29
4126: PUSH
4127: LD_INT 4
4129: ARRAY
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: LIST
4135: LIST
4136: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4137: LD_ADDR_OWVAR 35
4141: PUSH
4142: LD_EXP 30
4146: ST_TO_ADDR
// un = CreateHuman ;
4147: LD_ADDR_VAR 0 3
4151: PUSH
4152: CALL_OW 44
4156: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4157: LD_VAR 0 3
4161: PPUSH
4162: LD_INT 2
4164: PPUSH
4165: LD_INT 0
4167: PPUSH
4168: CALL_OW 49
// end ;
4172: GO 4063
4174: POP
4175: POP
// for i := 1 to animalsAmount [ 2 ] do
4176: LD_ADDR_VAR 0 2
4180: PUSH
4181: DOUBLE
4182: LD_INT 1
4184: DEC
4185: ST_TO_ADDR
4186: LD_EXP 28
4190: PUSH
4191: LD_INT 2
4193: ARRAY
4194: PUSH
4195: FOR_TO
4196: IFFALSE 4306
// begin uc_side = 0 ;
4198: LD_ADDR_OWVAR 20
4202: PUSH
4203: LD_INT 0
4205: ST_TO_ADDR
// uc_nation = nation_nature ;
4206: LD_ADDR_OWVAR 21
4210: PUSH
4211: LD_INT 0
4213: ST_TO_ADDR
// hc_class = class_phororhacos ;
4214: LD_ADDR_OWVAR 28
4218: PUSH
4219: LD_INT 18
4221: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4222: LD_ADDR_OWVAR 31
4226: PUSH
4227: LD_EXP 29
4231: PUSH
4232: LD_INT 1
4234: ARRAY
4235: PUSH
4236: LD_EXP 29
4240: PUSH
4241: LD_INT 2
4243: ARRAY
4244: PUSH
4245: LD_EXP 29
4249: PUSH
4250: LD_INT 3
4252: ARRAY
4253: PUSH
4254: LD_EXP 29
4258: PUSH
4259: LD_INT 4
4261: ARRAY
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4269: LD_ADDR_OWVAR 35
4273: PUSH
4274: LD_EXP 30
4278: ST_TO_ADDR
// un = CreateHuman ;
4279: LD_ADDR_VAR 0 3
4283: PUSH
4284: CALL_OW 44
4288: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4289: LD_VAR 0 3
4293: PPUSH
4294: LD_INT 2
4296: PPUSH
4297: LD_INT 0
4299: PPUSH
4300: CALL_OW 49
// end ;
4304: GO 4195
4306: POP
4307: POP
// for i := 1 to animalsAmount [ 3 ] do
4308: LD_ADDR_VAR 0 2
4312: PUSH
4313: DOUBLE
4314: LD_INT 1
4316: DEC
4317: ST_TO_ADDR
4318: LD_EXP 28
4322: PUSH
4323: LD_INT 3
4325: ARRAY
4326: PUSH
4327: FOR_TO
4328: IFFALSE 4438
// begin uc_side = 0 ;
4330: LD_ADDR_OWVAR 20
4334: PUSH
4335: LD_INT 0
4337: ST_TO_ADDR
// uc_nation = nation_nature ;
4338: LD_ADDR_OWVAR 21
4342: PUSH
4343: LD_INT 0
4345: ST_TO_ADDR
// hc_class = class_tiger ;
4346: LD_ADDR_OWVAR 28
4350: PUSH
4351: LD_INT 14
4353: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4354: LD_ADDR_OWVAR 31
4358: PUSH
4359: LD_EXP 29
4363: PUSH
4364: LD_INT 1
4366: ARRAY
4367: PUSH
4368: LD_EXP 29
4372: PUSH
4373: LD_INT 2
4375: ARRAY
4376: PUSH
4377: LD_EXP 29
4381: PUSH
4382: LD_INT 3
4384: ARRAY
4385: PUSH
4386: LD_EXP 29
4390: PUSH
4391: LD_INT 4
4393: ARRAY
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4401: LD_ADDR_OWVAR 35
4405: PUSH
4406: LD_EXP 30
4410: ST_TO_ADDR
// un = CreateHuman ;
4411: LD_ADDR_VAR 0 3
4415: PUSH
4416: CALL_OW 44
4420: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4421: LD_VAR 0 3
4425: PPUSH
4426: LD_INT 2
4428: PPUSH
4429: LD_INT 0
4431: PPUSH
4432: CALL_OW 49
// end ;
4436: GO 4327
4438: POP
4439: POP
// for i := 1 to animalsAmount [ 4 ] do
4440: LD_ADDR_VAR 0 2
4444: PUSH
4445: DOUBLE
4446: LD_INT 1
4448: DEC
4449: ST_TO_ADDR
4450: LD_EXP 28
4454: PUSH
4455: LD_INT 4
4457: ARRAY
4458: PUSH
4459: FOR_TO
4460: IFFALSE 4570
// begin uc_side = 0 ;
4462: LD_ADDR_OWVAR 20
4466: PUSH
4467: LD_INT 0
4469: ST_TO_ADDR
// uc_nation = nation_nature ;
4470: LD_ADDR_OWVAR 21
4474: PUSH
4475: LD_INT 0
4477: ST_TO_ADDR
// hc_class = 21 ;
4478: LD_ADDR_OWVAR 28
4482: PUSH
4483: LD_INT 21
4485: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4486: LD_ADDR_OWVAR 31
4490: PUSH
4491: LD_EXP 29
4495: PUSH
4496: LD_INT 1
4498: ARRAY
4499: PUSH
4500: LD_EXP 29
4504: PUSH
4505: LD_INT 2
4507: ARRAY
4508: PUSH
4509: LD_EXP 29
4513: PUSH
4514: LD_INT 3
4516: ARRAY
4517: PUSH
4518: LD_EXP 29
4522: PUSH
4523: LD_INT 4
4525: ARRAY
4526: PUSH
4527: EMPTY
4528: LIST
4529: LIST
4530: LIST
4531: LIST
4532: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4533: LD_ADDR_OWVAR 35
4537: PUSH
4538: LD_EXP 30
4542: ST_TO_ADDR
// un = CreateHuman ;
4543: LD_ADDR_VAR 0 3
4547: PUSH
4548: CALL_OW 44
4552: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4553: LD_VAR 0 3
4557: PPUSH
4558: LD_INT 2
4560: PPUSH
4561: LD_INT 0
4563: PPUSH
4564: CALL_OW 49
// end ;
4568: GO 4459
4570: POP
4571: POP
// for i := 1 to animalsAmount [ 5 ] do
4572: LD_ADDR_VAR 0 2
4576: PUSH
4577: DOUBLE
4578: LD_INT 1
4580: DEC
4581: ST_TO_ADDR
4582: LD_EXP 28
4586: PUSH
4587: LD_INT 5
4589: ARRAY
4590: PUSH
4591: FOR_TO
4592: IFFALSE 4653
// begin uc_side = 0 ;
4594: LD_ADDR_OWVAR 20
4598: PUSH
4599: LD_INT 0
4601: ST_TO_ADDR
// uc_nation = nation_nature ;
4602: LD_ADDR_OWVAR 21
4606: PUSH
4607: LD_INT 0
4609: ST_TO_ADDR
// vc_chassis := 31 ;
4610: LD_ADDR_OWVAR 37
4614: PUSH
4615: LD_INT 31
4617: ST_TO_ADDR
// vc_control := control_rider ;
4618: LD_ADDR_OWVAR 38
4622: PUSH
4623: LD_INT 4
4625: ST_TO_ADDR
// un := CreateVehicle ;
4626: LD_ADDR_VAR 0 3
4630: PUSH
4631: CALL_OW 45
4635: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4636: LD_VAR 0 3
4640: PPUSH
4641: LD_INT 2
4643: PPUSH
4644: LD_INT 0
4646: PPUSH
4647: CALL_OW 49
// end ;
4651: GO 4591
4653: POP
4654: POP
// end ; end_of_file
4655: LD_VAR 0 1
4659: RET
// every 0 0$1 do
4660: GO 4662
4662: DISABLE
// InitAIManager ( 1 , 2 , UnitFilter ( ovsyenkoBase , [ f_type , unit_human ] ) , OvsyenkoBaseArea , OvsyenkoHealArea , false , false , 0 , 0 , 0 , 0 , 0 ) ;
4663: LD_INT 1
4665: PPUSH
4666: LD_INT 2
4668: PPUSH
4669: LD_EXP 56
4673: PPUSH
4674: LD_INT 21
4676: PUSH
4677: LD_INT 1
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PPUSH
4684: CALL_OW 72
4688: PPUSH
4689: LD_INT 3
4691: PPUSH
4692: LD_INT 6
4694: PPUSH
4695: LD_INT 0
4697: PPUSH
4698: LD_INT 0
4700: PPUSH
4701: LD_INT 0
4703: PPUSH
4704: LD_INT 0
4706: PPUSH
4707: LD_INT 0
4709: PPUSH
4710: LD_INT 0
4712: PPUSH
4713: LD_INT 0
4715: PPUSH
4716: CALL 4828 0 12
4720: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_weapon , us_bulldozer ] ] ) do var unit ;
4721: LD_INT 22
4723: PUSH
4724: LD_INT 1
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: PUSH
4731: LD_INT 50
4733: PUSH
4734: EMPTY
4735: LIST
4736: PUSH
4737: LD_INT 34
4739: PUSH
4740: LD_INT 14
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: LIST
4751: PPUSH
4752: CALL_OW 69
4756: IFFALSE 4825
4758: GO 4760
4760: DISABLE
4761: LD_INT 0
4763: PPUSH
// begin enable ;
4764: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_weapon , us_bulldozer ] ] ) do
4765: LD_ADDR_VAR 0 1
4769: PUSH
4770: LD_INT 22
4772: PUSH
4773: LD_INT 1
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: PUSH
4780: LD_INT 50
4782: PUSH
4783: EMPTY
4784: LIST
4785: PUSH
4786: LD_INT 34
4788: PUSH
4789: LD_INT 14
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: LIST
4800: PPUSH
4801: CALL_OW 69
4805: PUSH
4806: FOR_IN
4807: IFFALSE 4823
// CutTreeInArea ( unit , TreeArea ) ;
4809: LD_VAR 0 1
4813: PPUSH
4814: LD_INT 18
4816: PPUSH
4817: CALL 14664 0 2
4821: GO 4806
4823: POP
4824: POP
// end ;
4825: PPOPN 1
4827: END
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , repairArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack , canRebuild ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , offensiveUnits , offensiveReadyCounter , target1 , target2 , defenceUnits , weapons , chassis , baseBuildings , destroyedBuildings , destroyedBuilding , constructedBuilding , constructedBuildings , depot , factory , lab , bunkers , barracks , controlTowers , attackBuildings , enemyBuildings , damageBuilding , damageUnit , emptyBunkers , enemyUnits ; begin
4828: LD_INT 0
4830: PPUSH
4831: PPUSH
4832: PPUSH
4833: PPUSH
4834: PPUSH
4835: PPUSH
4836: PPUSH
4837: PPUSH
4838: PPUSH
4839: PPUSH
4840: PPUSH
4841: PPUSH
4842: PPUSH
4843: PPUSH
4844: PPUSH
4845: PPUSH
4846: PPUSH
4847: PPUSH
4848: PPUSH
4849: PPUSH
4850: PPUSH
4851: PPUSH
4852: PPUSH
4853: PPUSH
4854: PPUSH
4855: PPUSH
4856: PPUSH
4857: PPUSH
4858: PPUSH
4859: PPUSH
4860: PPUSH
4861: PPUSH
4862: PPUSH
4863: PPUSH
4864: PPUSH
4865: PPUSH
4866: PPUSH
4867: PPUSH
// personel = [ ] ;
4868: LD_ADDR_VAR 0 19
4872: PUSH
4873: EMPTY
4874: ST_TO_ADDR
// vehicles = [ ] ;
4875: LD_ADDR_VAR 0 25
4879: PUSH
4880: EMPTY
4881: ST_TO_ADDR
// destroyedBuildings = [ ] ;
4882: LD_ADDR_VAR 0 35
4886: PUSH
4887: EMPTY
4888: ST_TO_ADDR
// for unit in basePersonel do
4889: LD_ADDR_VAR 0 18
4893: PUSH
4894: LD_VAR 0 3
4898: PUSH
4899: FOR_IN
4900: IFFALSE 4920
// personel = personel ^ unit ;
4902: LD_ADDR_VAR 0 19
4906: PUSH
4907: LD_VAR 0 19
4911: PUSH
4912: LD_VAR 0 18
4916: ADD
4917: ST_TO_ADDR
4918: GO 4899
4920: POP
4921: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ] ] ) do
4922: LD_ADDR_VAR 0 24
4926: PUSH
4927: LD_VAR 0 4
4931: PPUSH
4932: LD_INT 22
4934: PUSH
4935: LD_VAR 0 1
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: PUSH
4944: LD_INT 21
4946: PUSH
4947: LD_INT 2
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PUSH
4954: LD_INT 50
4956: PUSH
4957: EMPTY
4958: LIST
4959: PUSH
4960: LD_INT 3
4962: PUSH
4963: LD_INT 2
4965: PUSH
4966: LD_INT 34
4968: PUSH
4969: LD_INT 12
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: LD_INT 34
4978: PUSH
4979: LD_INT 51
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: PUSH
4986: LD_INT 34
4988: PUSH
4989: LD_INT 32
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: PUSH
4996: LD_INT 34
4998: PUSH
4999: LD_INT 31
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: PPUSH
5023: CALL_OW 70
5027: PUSH
5028: FOR_IN
5029: IFFALSE 5049
// vehicles = vehicles ^ vehicle ;
5031: LD_ADDR_VAR 0 25
5035: PUSH
5036: LD_VAR 0 25
5040: PUSH
5041: LD_VAR 0 24
5045: ADD
5046: ST_TO_ADDR
5047: GO 5028
5049: POP
5050: POP
// repeat soldiers = [ ] ;
5051: LD_ADDR_VAR 0 20
5055: PUSH
5056: EMPTY
5057: ST_TO_ADDR
// engineers = [ ] ;
5058: LD_ADDR_VAR 0 21
5062: PUSH
5063: EMPTY
5064: ST_TO_ADDR
// mechanics = [ ] ;
5065: LD_ADDR_VAR 0 22
5069: PUSH
5070: EMPTY
5071: ST_TO_ADDR
// scientists = [ ] ;
5072: LD_ADDR_VAR 0 23
5076: PUSH
5077: EMPTY
5078: ST_TO_ADDR
// baseBuildings = [ ] ;
5079: LD_ADDR_VAR 0 34
5083: PUSH
5084: EMPTY
5085: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5086: LD_ADDR_VAR 0 39
5090: PUSH
5091: LD_VAR 0 4
5095: PPUSH
5096: LD_INT 22
5098: PUSH
5099: LD_VAR 0 1
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: PUSH
5108: LD_INT 21
5110: PUSH
5111: LD_INT 3
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PUSH
5118: LD_INT 50
5120: PUSH
5121: EMPTY
5122: LIST
5123: PUSH
5124: LD_INT 2
5126: PUSH
5127: LD_INT 30
5129: PUSH
5130: LD_INT 0
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: PUSH
5137: LD_INT 30
5139: PUSH
5140: LD_INT 1
5142: PUSH
5143: EMPTY
5144: LIST
5145: LIST
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: LIST
5151: PUSH
5152: EMPTY
5153: LIST
5154: LIST
5155: LIST
5156: LIST
5157: PPUSH
5158: CALL_OW 70
5162: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
5163: LD_ADDR_VAR 0 40
5167: PUSH
5168: LD_VAR 0 4
5172: PPUSH
5173: LD_INT 22
5175: PUSH
5176: LD_VAR 0 1
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: PUSH
5185: LD_INT 21
5187: PUSH
5188: LD_INT 3
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: PUSH
5195: LD_INT 50
5197: PUSH
5198: EMPTY
5199: LIST
5200: PUSH
5201: LD_INT 2
5203: PUSH
5204: LD_INT 30
5206: PUSH
5207: LD_INT 2
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: PUSH
5214: LD_INT 30
5216: PUSH
5217: LD_INT 3
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: PUSH
5224: EMPTY
5225: LIST
5226: LIST
5227: LIST
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: PPUSH
5235: CALL_OW 70
5239: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5240: LD_ADDR_VAR 0 41
5244: PUSH
5245: LD_VAR 0 4
5249: PPUSH
5250: LD_INT 22
5252: PUSH
5253: LD_VAR 0 1
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PUSH
5262: LD_INT 21
5264: PUSH
5265: LD_INT 3
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: PUSH
5272: LD_INT 50
5274: PUSH
5275: EMPTY
5276: LIST
5277: PUSH
5278: LD_INT 2
5280: PUSH
5281: LD_INT 30
5283: PUSH
5284: LD_INT 6
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: PUSH
5291: LD_INT 30
5293: PUSH
5294: LD_INT 7
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: PUSH
5301: LD_INT 30
5303: PUSH
5304: LD_INT 8
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: PPUSH
5323: CALL_OW 70
5327: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
5328: LD_ADDR_VAR 0 42
5332: PUSH
5333: LD_VAR 0 4
5337: PPUSH
5338: LD_INT 22
5340: PUSH
5341: LD_VAR 0 1
5345: PUSH
5346: EMPTY
5347: LIST
5348: LIST
5349: PUSH
5350: LD_INT 21
5352: PUSH
5353: LD_INT 3
5355: PUSH
5356: EMPTY
5357: LIST
5358: LIST
5359: PUSH
5360: LD_INT 50
5362: PUSH
5363: EMPTY
5364: LIST
5365: PUSH
5366: LD_INT 2
5368: PUSH
5369: LD_INT 30
5371: PUSH
5372: LD_INT 31
5374: PUSH
5375: EMPTY
5376: LIST
5377: LIST
5378: PUSH
5379: LD_INT 30
5381: PUSH
5382: LD_INT 32
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: PUSH
5389: EMPTY
5390: LIST
5391: LIST
5392: LIST
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: PPUSH
5400: CALL_OW 70
5404: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
5405: LD_ADDR_VAR 0 43
5409: PUSH
5410: LD_VAR 0 4
5414: PPUSH
5415: LD_INT 22
5417: PUSH
5418: LD_VAR 0 1
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: PUSH
5427: LD_INT 21
5429: PUSH
5430: LD_INT 3
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: PUSH
5437: LD_INT 50
5439: PUSH
5440: EMPTY
5441: LIST
5442: PUSH
5443: LD_INT 2
5445: PUSH
5446: LD_INT 30
5448: PUSH
5449: LD_INT 4
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: PUSH
5456: LD_INT 30
5458: PUSH
5459: LD_INT 5
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: LIST
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: LIST
5475: LIST
5476: PPUSH
5477: CALL_OW 70
5481: ST_TO_ADDR
// controlTowers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_vehicle ] ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5482: LD_ADDR_VAR 0 44
5486: PUSH
5487: LD_VAR 0 4
5491: PPUSH
5492: LD_INT 22
5494: PUSH
5495: LD_VAR 0 1
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: PUSH
5504: LD_INT 50
5506: PUSH
5507: EMPTY
5508: LIST
5509: PUSH
5510: LD_INT 2
5512: PUSH
5513: LD_INT 21
5515: PUSH
5516: LD_INT 3
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PUSH
5523: LD_INT 21
5525: PUSH
5526: LD_INT 2
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: LIST
5537: PUSH
5538: LD_INT 2
5540: PUSH
5541: LD_INT 30
5543: PUSH
5544: LD_INT 36
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: PUSH
5551: LD_INT 34
5553: PUSH
5554: LD_INT 31
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: LIST
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: PPUSH
5572: CALL_OW 70
5576: ST_TO_ADDR
// constructedBuildings = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] ] ) ;
5577: LD_ADDR_VAR 0 38
5581: PUSH
5582: LD_VAR 0 4
5586: PPUSH
5587: LD_INT 22
5589: PUSH
5590: LD_VAR 0 1
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PUSH
5599: LD_INT 21
5601: PUSH
5602: LD_INT 3
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: PUSH
5609: LD_INT 3
5611: PUSH
5612: LD_INT 57
5614: PUSH
5615: EMPTY
5616: LIST
5617: PUSH
5618: EMPTY
5619: LIST
5620: LIST
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: LIST
5626: PPUSH
5627: CALL_OW 70
5631: ST_TO_ADDR
// for i := 1 to personel do
5632: LD_ADDR_VAR 0 14
5636: PUSH
5637: DOUBLE
5638: LD_INT 1
5640: DEC
5641: ST_TO_ADDR
5642: LD_VAR 0 19
5646: PUSH
5647: FOR_TO
5648: IFFALSE 5816
// begin if GetLives ( personel [ i ] ) = 1000 then
5650: LD_VAR 0 19
5654: PUSH
5655: LD_VAR 0 14
5659: ARRAY
5660: PPUSH
5661: CALL_OW 256
5665: PUSH
5666: LD_INT 1000
5668: EQUAL
5669: IFFALSE 5691
// SetTag ( personel [ i ] , 1 ) else
5671: LD_VAR 0 19
5675: PUSH
5676: LD_VAR 0 14
5680: ARRAY
5681: PPUSH
5682: LD_INT 1
5684: PPUSH
5685: CALL_OW 109
5689: GO 5771
// if GetLives ( personel [ i ] ) <= 950 and GetLives ( personel [ i ] ) > 250 then
5691: LD_VAR 0 19
5695: PUSH
5696: LD_VAR 0 14
5700: ARRAY
5701: PPUSH
5702: CALL_OW 256
5706: PUSH
5707: LD_INT 950
5709: LESSEQUAL
5710: PUSH
5711: LD_VAR 0 19
5715: PUSH
5716: LD_VAR 0 14
5720: ARRAY
5721: PPUSH
5722: CALL_OW 256
5726: PUSH
5727: LD_INT 250
5729: GREATER
5730: AND
5731: IFFALSE 5771
// begin SetTag ( personel [ i ] , 0 ) ;
5733: LD_VAR 0 19
5737: PUSH
5738: LD_VAR 0 14
5742: ARRAY
5743: PPUSH
5744: LD_INT 0
5746: PPUSH
5747: CALL_OW 109
// ComMoveToArea ( personel [ i ] , healArea ) ;
5751: LD_VAR 0 19
5755: PUSH
5756: LD_VAR 0 14
5760: ARRAY
5761: PPUSH
5762: LD_VAR 0 5
5766: PPUSH
5767: CALL_OW 113
// end ; if GetLives ( personel [ i ] ) < 100 then
5771: LD_VAR 0 19
5775: PUSH
5776: LD_VAR 0 14
5780: ARRAY
5781: PPUSH
5782: CALL_OW 256
5786: PUSH
5787: LD_INT 100
5789: LESS
5790: IFFALSE 5814
// personel = personel diff personel [ i ] ;
5792: LD_ADDR_VAR 0 19
5796: PUSH
5797: LD_VAR 0 19
5801: PUSH
5802: LD_VAR 0 19
5806: PUSH
5807: LD_VAR 0 14
5811: ARRAY
5812: DIFF
5813: ST_TO_ADDR
// end ;
5814: GO 5647
5816: POP
5817: POP
// for i := 1 to vehicles do
5818: LD_ADDR_VAR 0 14
5822: PUSH
5823: DOUBLE
5824: LD_INT 1
5826: DEC
5827: ST_TO_ADDR
5828: LD_VAR 0 25
5832: PUSH
5833: FOR_TO
5834: IFFALSE 6196
// begin if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
5836: LD_VAR 0 25
5840: PUSH
5841: LD_VAR 0 14
5845: ARRAY
5846: PUSH
5847: LD_INT 1
5849: ARRAY
5850: PPUSH
5851: CALL_OW 256
5855: PUSH
5856: LD_INT 1000
5858: EQUAL
5859: IFFALSE 6023
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
5861: LD_VAR 0 25
5865: PUSH
5866: LD_VAR 0 14
5870: ARRAY
5871: PUSH
5872: LD_INT 1
5874: ARRAY
5875: PPUSH
5876: CALL_OW 263
5880: PUSH
5881: LD_INT 1
5883: EQUAL
5884: IFFALSE 5963
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) and IsOK ( vehicles [ i ] [ 2 ] ) then
5886: LD_VAR 0 25
5890: PUSH
5891: LD_VAR 0 14
5895: ARRAY
5896: PUSH
5897: LD_INT 2
5899: ARRAY
5900: PPUSH
5901: CALL_OW 310
5905: NOT
5906: PUSH
5907: LD_VAR 0 25
5911: PUSH
5912: LD_VAR 0 14
5916: ARRAY
5917: PUSH
5918: LD_INT 2
5920: ARRAY
5921: PPUSH
5922: CALL_OW 302
5926: AND
5927: IFFALSE 5963
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
5929: LD_VAR 0 25
5933: PUSH
5934: LD_VAR 0 14
5938: ARRAY
5939: PUSH
5940: LD_INT 2
5942: ARRAY
5943: PPUSH
5944: LD_VAR 0 25
5948: PUSH
5949: LD_VAR 0 14
5953: ARRAY
5954: PUSH
5955: LD_INT 1
5957: ARRAY
5958: PPUSH
5959: CALL_OW 120
// if offensiveUnits < vehiclesToAttackAmount then
5963: LD_VAR 0 27
5967: PUSH
5968: LD_VAR 0 10
5972: LESS
5973: IFFALSE 5999
// SetTag ( vehicles [ i ] [ 1 ] , 2 ) else
5975: LD_VAR 0 25
5979: PUSH
5980: LD_VAR 0 14
5984: ARRAY
5985: PUSH
5986: LD_INT 1
5988: ARRAY
5989: PPUSH
5990: LD_INT 2
5992: PPUSH
5993: CALL_OW 109
5997: GO 6021
// SetTag ( vehicles [ i ] [ 1 ] , 3 ) ;
5999: LD_VAR 0 25
6003: PUSH
6004: LD_VAR 0 14
6008: ARRAY
6009: PUSH
6010: LD_INT 1
6012: ARRAY
6013: PPUSH
6014: LD_INT 3
6016: PPUSH
6017: CALL_OW 109
// end else
6021: GO 6144
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 and GetLives ( vehicles [ i ] [ 1 ] ) > 250 and GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
6023: LD_VAR 0 25
6027: PUSH
6028: LD_VAR 0 14
6032: ARRAY
6033: PUSH
6034: LD_INT 1
6036: ARRAY
6037: PPUSH
6038: CALL_OW 256
6042: PUSH
6043: LD_INT 650
6045: LESSEQUAL
6046: PUSH
6047: LD_VAR 0 25
6051: PUSH
6052: LD_VAR 0 14
6056: ARRAY
6057: PUSH
6058: LD_INT 1
6060: ARRAY
6061: PPUSH
6062: CALL_OW 256
6066: PUSH
6067: LD_INT 250
6069: GREATER
6070: AND
6071: PUSH
6072: LD_VAR 0 25
6076: PUSH
6077: LD_VAR 0 14
6081: ARRAY
6082: PUSH
6083: LD_INT 1
6085: ARRAY
6086: PPUSH
6087: CALL_OW 263
6091: PUSH
6092: LD_INT 1
6094: EQUAL
6095: AND
6096: IFFALSE 6144
// begin SetTag ( vehicles [ i ] [ 1 ] , 0 ) ;
6098: LD_VAR 0 25
6102: PUSH
6103: LD_VAR 0 14
6107: ARRAY
6108: PUSH
6109: LD_INT 1
6111: ARRAY
6112: PPUSH
6113: LD_INT 0
6115: PPUSH
6116: CALL_OW 109
// ComMoveToArea ( vehicles [ i ] [ 1 ] , repairArea ) ;
6120: LD_VAR 0 25
6124: PUSH
6125: LD_VAR 0 14
6129: ARRAY
6130: PUSH
6131: LD_INT 1
6133: ARRAY
6134: PPUSH
6135: LD_VAR 0 6
6139: PPUSH
6140: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
6144: LD_VAR 0 25
6148: PUSH
6149: LD_VAR 0 14
6153: ARRAY
6154: PUSH
6155: LD_INT 1
6157: ARRAY
6158: PPUSH
6159: CALL_OW 256
6163: PUSH
6164: LD_INT 250
6166: LESS
6167: IFFALSE 6194
// begin vehicles = vehicles diff [ vehicles [ i ] ] ;
6169: LD_ADDR_VAR 0 25
6173: PUSH
6174: LD_VAR 0 25
6178: PUSH
6179: LD_VAR 0 25
6183: PUSH
6184: LD_VAR 0 14
6188: ARRAY
6189: PUSH
6190: EMPTY
6191: LIST
6192: DIFF
6193: ST_TO_ADDR
// end ; end ;
6194: GO 5833
6196: POP
6197: POP
// for i := 1 to personel do
6198: LD_ADDR_VAR 0 14
6202: PUSH
6203: DOUBLE
6204: LD_INT 1
6206: DEC
6207: ST_TO_ADDR
6208: LD_VAR 0 19
6212: PUSH
6213: FOR_TO
6214: IFFALSE 6265
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
6216: LD_ADDR_VAR 0 20
6220: PUSH
6221: LD_VAR 0 20
6225: PUSH
6226: LD_VAR 0 19
6230: PUSH
6231: LD_VAR 0 14
6235: ARRAY
6236: PPUSH
6237: LD_INT 25
6239: PUSH
6240: LD_INT 1
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PUSH
6247: LD_INT 50
6249: PUSH
6250: EMPTY
6251: LIST
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: PPUSH
6257: CALL_OW 72
6261: ADD
6262: ST_TO_ADDR
6263: GO 6213
6265: POP
6266: POP
// if soldiers and UnitFilter ( bunkers , [ f_empty ] ) then
6267: LD_VAR 0 20
6271: PUSH
6272: LD_VAR 0 42
6276: PPUSH
6277: LD_INT 58
6279: PUSH
6280: EMPTY
6281: LIST
6282: PPUSH
6283: CALL_OW 72
6287: AND
6288: IFFALSE 6546
// begin for i := 1 to soldiers do
6290: LD_ADDR_VAR 0 14
6294: PUSH
6295: DOUBLE
6296: LD_INT 1
6298: DEC
6299: ST_TO_ADDR
6300: LD_VAR 0 20
6304: PUSH
6305: FOR_TO
6306: IFFALSE 6542
// if GetTag ( soldiers [ i ] ) = 1 then
6308: LD_VAR 0 20
6312: PUSH
6313: LD_VAR 0 14
6317: ARRAY
6318: PPUSH
6319: CALL_OW 110
6323: PUSH
6324: LD_INT 1
6326: EQUAL
6327: IFFALSE 6540
// begin if GetTaskList ( soldiers [ i ] ) then
6329: LD_VAR 0 20
6333: PUSH
6334: LD_VAR 0 14
6338: ARRAY
6339: PPUSH
6340: CALL_OW 437
6344: IFFALSE 6433
// if GetTaskList ( soldiers [ i ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( soldiers [ i ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
6346: LD_VAR 0 20
6350: PUSH
6351: LD_VAR 0 14
6355: ARRAY
6356: PPUSH
6357: CALL_OW 437
6361: PUSH
6362: LD_INT 1
6364: ARRAY
6365: PUSH
6366: LD_INT 1
6368: ARRAY
6369: PUSH
6370: LD_STRING e
6372: EQUAL
6373: PUSH
6374: LD_VAR 0 20
6378: PUSH
6379: LD_VAR 0 14
6383: ARRAY
6384: PPUSH
6385: CALL_OW 437
6389: PUSH
6390: LD_INT 1
6392: ARRAY
6393: PUSH
6394: LD_INT 4
6396: ARRAY
6397: PPUSH
6398: CALL_OW 266
6402: PUSH
6403: LD_INT 4
6405: PUSH
6406: LD_INT 5
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: IN
6413: AND
6414: IFFALSE 6433
// SetTaskList ( soldiers [ i ] , [ ] ) ;
6416: LD_VAR 0 20
6420: PUSH
6421: LD_VAR 0 14
6425: ARRAY
6426: PPUSH
6427: EMPTY
6428: PPUSH
6429: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
6433: LD_ADDR_VAR 0 49
6437: PUSH
6438: LD_VAR 0 42
6442: PPUSH
6443: LD_INT 3
6445: PUSH
6446: LD_INT 59
6448: PUSH
6449: EMPTY
6450: LIST
6451: PUSH
6452: EMPTY
6453: LIST
6454: LIST
6455: PPUSH
6456: CALL_OW 72
6460: PUSH
6461: FOR_IN
6462: IFFALSE 6538
// if not HasTask ( soldiers [ i ] ) and not GetBType ( IsInUnit ( soldiers [ i ] ) ) in [ b_breastwork , b_bunker ] then
6464: LD_VAR 0 20
6468: PUSH
6469: LD_VAR 0 14
6473: ARRAY
6474: PPUSH
6475: CALL_OW 314
6479: NOT
6480: PUSH
6481: LD_VAR 0 20
6485: PUSH
6486: LD_VAR 0 14
6490: ARRAY
6491: PPUSH
6492: CALL_OW 310
6496: PPUSH
6497: CALL_OW 266
6501: PUSH
6502: LD_INT 31
6504: PUSH
6505: LD_INT 32
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: IN
6512: NOT
6513: AND
6514: IFFALSE 6536
// ComEnterUnit ( soldiers [ i ] , emptyBunkers ) ;
6516: LD_VAR 0 20
6520: PUSH
6521: LD_VAR 0 14
6525: ARRAY
6526: PPUSH
6527: LD_VAR 0 49
6531: PPUSH
6532: CALL_OW 120
6536: GO 6461
6538: POP
6539: POP
// end ;
6540: GO 6305
6542: POP
6543: POP
// end else
6544: GO 6718
// if soldiers and barracks then
6546: LD_VAR 0 20
6550: PUSH
6551: LD_VAR 0 43
6555: AND
6556: IFFALSE 6678
// begin for i := 1 to soldiers do
6558: LD_ADDR_VAR 0 14
6562: PUSH
6563: DOUBLE
6564: LD_INT 1
6566: DEC
6567: ST_TO_ADDR
6568: LD_VAR 0 20
6572: PUSH
6573: FOR_TO
6574: IFFALSE 6674
// if GetTag ( soldiers [ i ] ) = 1 and UnitFilter ( soldiers [ i ] , [ f_outside ] ) and not HasTask ( soldiers [ i ] ) then
6576: LD_VAR 0 20
6580: PUSH
6581: LD_VAR 0 14
6585: ARRAY
6586: PPUSH
6587: CALL_OW 110
6591: PUSH
6592: LD_INT 1
6594: EQUAL
6595: PUSH
6596: LD_VAR 0 20
6600: PUSH
6601: LD_VAR 0 14
6605: ARRAY
6606: PPUSH
6607: LD_INT 56
6609: PUSH
6610: EMPTY
6611: LIST
6612: PPUSH
6613: CALL_OW 72
6617: AND
6618: PUSH
6619: LD_VAR 0 20
6623: PUSH
6624: LD_VAR 0 14
6628: ARRAY
6629: PPUSH
6630: CALL_OW 314
6634: NOT
6635: AND
6636: IFFALSE 6672
// ComEnterUnit ( soldiers [ i ] , barracks [ rand ( 1 , barracks ) ] ) ;
6638: LD_VAR 0 20
6642: PUSH
6643: LD_VAR 0 14
6647: ARRAY
6648: PPUSH
6649: LD_VAR 0 43
6653: PUSH
6654: LD_INT 1
6656: PPUSH
6657: LD_VAR 0 43
6661: PPUSH
6662: CALL_OW 12
6666: ARRAY
6667: PPUSH
6668: CALL_OW 120
6672: GO 6573
6674: POP
6675: POP
// end else
6676: GO 6718
// for i := 1 to soldiers do
6678: LD_ADDR_VAR 0 14
6682: PUSH
6683: DOUBLE
6684: LD_INT 1
6686: DEC
6687: ST_TO_ADDR
6688: LD_VAR 0 20
6692: PUSH
6693: FOR_TO
6694: IFFALSE 6716
// SetTag ( soldiers [ i ] , 3 ) ;
6696: LD_VAR 0 20
6700: PUSH
6701: LD_VAR 0 14
6705: ARRAY
6706: PPUSH
6707: LD_INT 3
6709: PPUSH
6710: CALL_OW 109
6714: GO 6693
6716: POP
6717: POP
// for i := 1 to personel do
6718: LD_ADDR_VAR 0 14
6722: PUSH
6723: DOUBLE
6724: LD_INT 1
6726: DEC
6727: ST_TO_ADDR
6728: LD_VAR 0 19
6732: PUSH
6733: FOR_TO
6734: IFFALSE 6775
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
6736: LD_ADDR_VAR 0 21
6740: PUSH
6741: LD_VAR 0 21
6745: PUSH
6746: LD_VAR 0 19
6750: PUSH
6751: LD_VAR 0 14
6755: ARRAY
6756: PPUSH
6757: LD_INT 25
6759: PUSH
6760: LD_INT 2
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PPUSH
6767: CALL_OW 72
6771: ADD
6772: ST_TO_ADDR
6773: GO 6733
6775: POP
6776: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6777: LD_VAR 0 21
6781: PUSH
6782: LD_VAR 0 4
6786: PPUSH
6787: LD_INT 22
6789: PUSH
6790: LD_VAR 0 1
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: PUSH
6799: LD_INT 21
6801: PUSH
6802: LD_INT 3
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PUSH
6809: LD_INT 3
6811: PUSH
6812: LD_INT 24
6814: PUSH
6815: LD_INT 1000
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: LIST
6830: PPUSH
6831: CALL_OW 70
6835: AND
6836: IFFALSE 7064
// begin for i := 1 to engineers do
6838: LD_ADDR_VAR 0 14
6842: PUSH
6843: DOUBLE
6844: LD_INT 1
6846: DEC
6847: ST_TO_ADDR
6848: LD_VAR 0 21
6852: PUSH
6853: FOR_TO
6854: IFFALSE 7060
// if GetTag ( engineers [ i ] ) = 1 then
6856: LD_VAR 0 21
6860: PUSH
6861: LD_VAR 0 14
6865: ARRAY
6866: PPUSH
6867: CALL_OW 110
6871: PUSH
6872: LD_INT 1
6874: EQUAL
6875: IFFALSE 7058
// begin if GetTaskList ( engineers [ i ] ) then
6877: LD_VAR 0 21
6881: PUSH
6882: LD_VAR 0 14
6886: ARRAY
6887: PPUSH
6888: CALL_OW 437
6892: IFFALSE 6940
// if GetTaskList ( engineers [ i ] ) [ 1 ] [ 1 ] = e then
6894: LD_VAR 0 21
6898: PUSH
6899: LD_VAR 0 14
6903: ARRAY
6904: PPUSH
6905: CALL_OW 437
6909: PUSH
6910: LD_INT 1
6912: ARRAY
6913: PUSH
6914: LD_INT 1
6916: ARRAY
6917: PUSH
6918: LD_STRING e
6920: EQUAL
6921: IFFALSE 6940
// SetTaskList ( engineers [ i ] , [ ] ) ;
6923: LD_VAR 0 21
6927: PUSH
6928: LD_VAR 0 14
6932: ARRAY
6933: PPUSH
6934: EMPTY
6935: PPUSH
6936: CALL_OW 446
// if IsInUnit ( engineers [ i ] ) then
6940: LD_VAR 0 21
6944: PUSH
6945: LD_VAR 0 14
6949: ARRAY
6950: PPUSH
6951: CALL_OW 310
6955: IFFALSE 6972
// ComExitBuilding ( engineers [ i ] ) ;
6957: LD_VAR 0 21
6961: PUSH
6962: LD_VAR 0 14
6966: ARRAY
6967: PPUSH
6968: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
6972: LD_ADDR_VAR 0 47
6976: PUSH
6977: LD_VAR 0 4
6981: PPUSH
6982: LD_INT 22
6984: PUSH
6985: LD_VAR 0 1
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: LD_INT 21
6996: PUSH
6997: LD_INT 3
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: LD_INT 3
7006: PUSH
7007: LD_INT 24
7009: PUSH
7010: LD_INT 1000
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: LIST
7025: PPUSH
7026: CALL_OW 70
7030: PUSH
7031: FOR_IN
7032: IFFALSE 7056
// AddComRepairBuilding ( engineers [ i ] , damageBuilding ) ;
7034: LD_VAR 0 21
7038: PUSH
7039: LD_VAR 0 14
7043: ARRAY
7044: PPUSH
7045: LD_VAR 0 47
7049: PPUSH
7050: CALL_OW 190
7054: GO 7031
7056: POP
7057: POP
// end ;
7058: GO 6853
7060: POP
7061: POP
// end else
7062: GO 7371
// if engineers and destroyedBuildings then
7064: LD_VAR 0 21
7068: PUSH
7069: LD_VAR 0 35
7073: AND
7074: IFFALSE 7250
// begin for i := 1 to engineers do
7076: LD_ADDR_VAR 0 14
7080: PUSH
7081: DOUBLE
7082: LD_INT 1
7084: DEC
7085: ST_TO_ADDR
7086: LD_VAR 0 21
7090: PUSH
7091: FOR_TO
7092: IFFALSE 7246
// if GetTag ( engineers [ i ] ) = 1 then
7094: LD_VAR 0 21
7098: PUSH
7099: LD_VAR 0 14
7103: ARRAY
7104: PPUSH
7105: CALL_OW 110
7109: PUSH
7110: LD_INT 1
7112: EQUAL
7113: IFFALSE 7244
// begin if IsInUnit ( engineers [ i ] ) then
7115: LD_VAR 0 21
7119: PUSH
7120: LD_VAR 0 14
7124: ARRAY
7125: PPUSH
7126: CALL_OW 310
7130: IFFALSE 7147
// ComExitBuilding ( engineers [ i ] ) ;
7132: LD_VAR 0 21
7136: PUSH
7137: LD_VAR 0 14
7141: ARRAY
7142: PPUSH
7143: CALL_OW 122
// for j := 1 to destroyedBuildings / 4 do
7147: LD_ADDR_VAR 0 15
7151: PUSH
7152: DOUBLE
7153: LD_INT 1
7155: DEC
7156: ST_TO_ADDR
7157: LD_VAR 0 35
7161: PUSH
7162: LD_INT 4
7164: DIVREAL
7165: PUSH
7166: FOR_TO
7167: IFFALSE 7242
// AddComBuild ( engineers [ i ] , destroyedBuildings [ j ] , destroyedBuildings [ j + 1 ] , destroyedBuildings [ j + 2 ] , destroyedBuildings [ j + 3 ] ) ;
7169: LD_VAR 0 21
7173: PUSH
7174: LD_VAR 0 14
7178: ARRAY
7179: PPUSH
7180: LD_VAR 0 35
7184: PUSH
7185: LD_VAR 0 15
7189: ARRAY
7190: PPUSH
7191: LD_VAR 0 35
7195: PUSH
7196: LD_VAR 0 15
7200: PUSH
7201: LD_INT 1
7203: PLUS
7204: ARRAY
7205: PPUSH
7206: LD_VAR 0 35
7210: PUSH
7211: LD_VAR 0 15
7215: PUSH
7216: LD_INT 2
7218: PLUS
7219: ARRAY
7220: PPUSH
7221: LD_VAR 0 35
7225: PUSH
7226: LD_VAR 0 15
7230: PUSH
7231: LD_INT 3
7233: PLUS
7234: ARRAY
7235: PPUSH
7236: CALL_OW 205
7240: GO 7166
7242: POP
7243: POP
// end ;
7244: GO 7091
7246: POP
7247: POP
// end else
7248: GO 7371
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot and not destroyedBuildings then
7250: LD_VAR 0 21
7254: PUSH
7255: LD_VAR 0 21
7259: PPUSH
7260: LD_INT 56
7262: PUSH
7263: EMPTY
7264: LIST
7265: PPUSH
7266: CALL_OW 72
7270: AND
7271: PUSH
7272: LD_VAR 0 39
7276: AND
7277: PUSH
7278: LD_VAR 0 35
7282: NOT
7283: AND
7284: IFFALSE 7371
// for i := 1 to engineers do
7286: LD_ADDR_VAR 0 14
7290: PUSH
7291: DOUBLE
7292: LD_INT 1
7294: DEC
7295: ST_TO_ADDR
7296: LD_VAR 0 21
7300: PUSH
7301: FOR_TO
7302: IFFALSE 7369
// begin if GetTag ( engineers [ i ] ) = 1 and not HasTask ( engineers [ i ] ) then
7304: LD_VAR 0 21
7308: PUSH
7309: LD_VAR 0 14
7313: ARRAY
7314: PPUSH
7315: CALL_OW 110
7319: PUSH
7320: LD_INT 1
7322: EQUAL
7323: PUSH
7324: LD_VAR 0 21
7328: PUSH
7329: LD_VAR 0 14
7333: ARRAY
7334: PPUSH
7335: CALL_OW 314
7339: NOT
7340: AND
7341: IFFALSE 7367
// ComEnterUnit ( engineers [ i ] , depot [ 1 ] ) ;
7343: LD_VAR 0 21
7347: PUSH
7348: LD_VAR 0 14
7352: ARRAY
7353: PPUSH
7354: LD_VAR 0 39
7358: PUSH
7359: LD_INT 1
7361: ARRAY
7362: PPUSH
7363: CALL_OW 120
// end ;
7367: GO 7301
7369: POP
7370: POP
// for i := 1 to personel do
7371: LD_ADDR_VAR 0 14
7375: PUSH
7376: DOUBLE
7377: LD_INT 1
7379: DEC
7380: ST_TO_ADDR
7381: LD_VAR 0 19
7385: PUSH
7386: FOR_TO
7387: IFFALSE 7428
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
7389: LD_ADDR_VAR 0 22
7393: PUSH
7394: LD_VAR 0 22
7398: PUSH
7399: LD_VAR 0 19
7403: PUSH
7404: LD_VAR 0 14
7408: ARRAY
7409: PPUSH
7410: LD_INT 25
7412: PUSH
7413: LD_INT 3
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: PPUSH
7420: CALL_OW 72
7424: ADD
7425: ST_TO_ADDR
7426: GO 7386
7428: POP
7429: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
7430: LD_VAR 0 22
7434: PUSH
7435: LD_VAR 0 4
7439: PPUSH
7440: LD_INT 22
7442: PUSH
7443: LD_VAR 0 1
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: PUSH
7452: LD_INT 21
7454: PUSH
7455: LD_INT 2
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: LD_INT 3
7464: PUSH
7465: LD_INT 24
7467: PUSH
7468: LD_INT 1000
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: LIST
7483: PPUSH
7484: CALL_OW 70
7488: AND
7489: IFFALSE 8069
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7491: LD_ADDR_VAR 0 48
7495: PUSH
7496: LD_VAR 0 4
7500: PPUSH
7501: LD_INT 22
7503: PUSH
7504: LD_VAR 0 1
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: PUSH
7513: LD_INT 21
7515: PUSH
7516: LD_INT 2
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PUSH
7523: LD_INT 3
7525: PUSH
7526: LD_INT 24
7528: PUSH
7529: LD_INT 1000
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: LIST
7544: PPUSH
7545: CALL_OW 70
7549: PUSH
7550: FOR_IN
7551: IFFALSE 8065
// begin if GetDistUnitArea ( damageUnit , repairArea ) <= 5 then
7553: LD_VAR 0 48
7557: PPUSH
7558: LD_VAR 0 6
7562: PPUSH
7563: CALL_OW 299
7567: PUSH
7568: LD_INT 5
7570: LESSEQUAL
7571: IFFALSE 7660
// for i := 1 to vehicles do
7573: LD_ADDR_VAR 0 14
7577: PUSH
7578: DOUBLE
7579: LD_INT 1
7581: DEC
7582: ST_TO_ADDR
7583: LD_VAR 0 25
7587: PUSH
7588: FOR_TO
7589: IFFALSE 7658
// if vehicles [ i ] [ 1 ] = damageUnit then
7591: LD_VAR 0 25
7595: PUSH
7596: LD_VAR 0 14
7600: ARRAY
7601: PUSH
7602: LD_INT 1
7604: ARRAY
7605: PUSH
7606: LD_VAR 0 48
7610: EQUAL
7611: IFFALSE 7656
// begin ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
7613: LD_VAR 0 25
7617: PUSH
7618: LD_VAR 0 14
7622: ARRAY
7623: PUSH
7624: LD_INT 2
7626: ARRAY
7627: PPUSH
7628: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
7632: LD_VAR 0 25
7636: PUSH
7637: LD_VAR 0 14
7641: ARRAY
7642: PUSH
7643: LD_INT 2
7645: ARRAY
7646: PPUSH
7647: LD_VAR 0 48
7651: PPUSH
7652: CALL_OW 189
// end ;
7656: GO 7588
7658: POP
7659: POP
// for i := 1 to mechanics do
7660: LD_ADDR_VAR 0 14
7664: PUSH
7665: DOUBLE
7666: LD_INT 1
7668: DEC
7669: ST_TO_ADDR
7670: LD_VAR 0 22
7674: PUSH
7675: FOR_TO
7676: IFFALSE 7844
// if GetTag ( mechanics [ i ] ) = 1 and IsInUnit ( mechanics [ i ] ) in [ b_workshop , b_factory ] then
7678: LD_VAR 0 22
7682: PUSH
7683: LD_VAR 0 14
7687: ARRAY
7688: PPUSH
7689: CALL_OW 110
7693: PUSH
7694: LD_INT 1
7696: EQUAL
7697: PUSH
7698: LD_VAR 0 22
7702: PUSH
7703: LD_VAR 0 14
7707: ARRAY
7708: PPUSH
7709: CALL_OW 310
7713: PUSH
7714: LD_INT 2
7716: PUSH
7717: LD_INT 3
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: IN
7724: AND
7725: IFFALSE 7842
// begin if GetTaskList ( mechanics [ i ] ) then
7727: LD_VAR 0 22
7731: PUSH
7732: LD_VAR 0 14
7736: ARRAY
7737: PPUSH
7738: CALL_OW 437
7742: IFFALSE 7790
// if GetTaskList ( mechanics [ i ] ) [ 1 ] [ 1 ] = e then
7744: LD_VAR 0 22
7748: PUSH
7749: LD_VAR 0 14
7753: ARRAY
7754: PPUSH
7755: CALL_OW 437
7759: PUSH
7760: LD_INT 1
7762: ARRAY
7763: PUSH
7764: LD_INT 1
7766: ARRAY
7767: PUSH
7768: LD_STRING e
7770: EQUAL
7771: IFFALSE 7790
// SetTaskList ( mechanics [ i ] , [ ] ) ;
7773: LD_VAR 0 22
7777: PUSH
7778: LD_VAR 0 14
7782: ARRAY
7783: PPUSH
7784: EMPTY
7785: PPUSH
7786: CALL_OW 446
// if IsInUnit ( mechanics [ i ] ) then
7790: LD_VAR 0 22
7794: PUSH
7795: LD_VAR 0 14
7799: ARRAY
7800: PPUSH
7801: CALL_OW 310
7805: IFFALSE 7822
// ComExitBuilding ( mechanics [ i ] ) ;
7807: LD_VAR 0 22
7811: PUSH
7812: LD_VAR 0 14
7816: ARRAY
7817: PPUSH
7818: CALL_OW 122
// AddComRepairVehicle ( mechanics [ i ] , damageUnit ) ;
7822: LD_VAR 0 22
7826: PUSH
7827: LD_VAR 0 14
7831: ARRAY
7832: PPUSH
7833: LD_VAR 0 48
7837: PPUSH
7838: CALL_OW 189
// end ;
7842: GO 7675
7844: POP
7845: POP
// if GetLives ( damageUnit ) < 250 and IsInArea ( damageUnit , baseArea ) then
7846: LD_VAR 0 48
7850: PPUSH
7851: CALL_OW 256
7855: PUSH
7856: LD_INT 250
7858: LESS
7859: PUSH
7860: LD_VAR 0 48
7864: PPUSH
7865: LD_VAR 0 4
7869: PPUSH
7870: CALL_OW 308
7874: AND
7875: IFFALSE 8063
// for i := 1 to personel do
7877: LD_ADDR_VAR 0 14
7881: PUSH
7882: DOUBLE
7883: LD_INT 1
7885: DEC
7886: ST_TO_ADDR
7887: LD_VAR 0 19
7891: PUSH
7892: FOR_TO
7893: IFFALSE 8061
// if GetTag ( mechanics [ i ] ) = 1 and IsInUnit ( mechanics [ i ] ) in [ b_workshop , b_factory ] then
7895: LD_VAR 0 22
7899: PUSH
7900: LD_VAR 0 14
7904: ARRAY
7905: PPUSH
7906: CALL_OW 110
7910: PUSH
7911: LD_INT 1
7913: EQUAL
7914: PUSH
7915: LD_VAR 0 22
7919: PUSH
7920: LD_VAR 0 14
7924: ARRAY
7925: PPUSH
7926: CALL_OW 310
7930: PUSH
7931: LD_INT 2
7933: PUSH
7934: LD_INT 3
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: IN
7941: AND
7942: IFFALSE 8059
// begin if GetTaskList ( mechanics [ i ] ) then
7944: LD_VAR 0 22
7948: PUSH
7949: LD_VAR 0 14
7953: ARRAY
7954: PPUSH
7955: CALL_OW 437
7959: IFFALSE 8007
// if GetTaskList ( mechanics [ i ] ) [ 1 ] [ 1 ] = e then
7961: LD_VAR 0 22
7965: PUSH
7966: LD_VAR 0 14
7970: ARRAY
7971: PPUSH
7972: CALL_OW 437
7976: PUSH
7977: LD_INT 1
7979: ARRAY
7980: PUSH
7981: LD_INT 1
7983: ARRAY
7984: PUSH
7985: LD_STRING e
7987: EQUAL
7988: IFFALSE 8007
// SetTaskList ( mechanics [ i ] , [ ] ) ;
7990: LD_VAR 0 22
7994: PUSH
7995: LD_VAR 0 14
7999: ARRAY
8000: PPUSH
8001: EMPTY
8002: PPUSH
8003: CALL_OW 446
// if IsInUnit ( mechanics [ i ] ) then
8007: LD_VAR 0 22
8011: PUSH
8012: LD_VAR 0 14
8016: ARRAY
8017: PPUSH
8018: CALL_OW 310
8022: IFFALSE 8039
// ComExitBuilding ( mechanics [ i ] ) ;
8024: LD_VAR 0 22
8028: PUSH
8029: LD_VAR 0 14
8033: ARRAY
8034: PPUSH
8035: CALL_OW 122
// AddComRepairVehicle ( mechanics [ i ] , damageUnit ) ;
8039: LD_VAR 0 22
8043: PUSH
8044: LD_VAR 0 14
8048: ARRAY
8049: PPUSH
8050: LD_VAR 0 48
8054: PPUSH
8055: CALL_OW 189
// end ;
8059: GO 7892
8061: POP
8062: POP
// end ;
8063: GO 7550
8065: POP
8066: POP
// end else
8067: GO 8366
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and UnitFilter ( controlTowers , [ f_empty ] ) then
8069: LD_VAR 0 22
8073: PUSH
8074: LD_VAR 0 22
8078: PPUSH
8079: LD_INT 56
8081: PUSH
8082: EMPTY
8083: LIST
8084: PPUSH
8085: CALL_OW 72
8089: AND
8090: PUSH
8091: LD_VAR 0 44
8095: PPUSH
8096: LD_INT 58
8098: PUSH
8099: EMPTY
8100: LIST
8101: PPUSH
8102: CALL_OW 72
8106: AND
8107: IFFALSE 8224
// begin for i := 1 to mechanics do
8109: LD_ADDR_VAR 0 14
8113: PUSH
8114: DOUBLE
8115: LD_INT 1
8117: DEC
8118: ST_TO_ADDR
8119: LD_VAR 0 22
8123: PUSH
8124: FOR_TO
8125: IFFALSE 8220
// if GetTag ( mechanics [ i ] ) = 1 and not HasTask ( mechanics [ i ] ) and not IsInUnit ( mechanics [ i ] ) then
8127: LD_VAR 0 22
8131: PUSH
8132: LD_VAR 0 14
8136: ARRAY
8137: PPUSH
8138: CALL_OW 110
8142: PUSH
8143: LD_INT 1
8145: EQUAL
8146: PUSH
8147: LD_VAR 0 22
8151: PUSH
8152: LD_VAR 0 14
8156: ARRAY
8157: PPUSH
8158: CALL_OW 314
8162: NOT
8163: AND
8164: PUSH
8165: LD_VAR 0 22
8169: PUSH
8170: LD_VAR 0 14
8174: ARRAY
8175: PPUSH
8176: CALL_OW 310
8180: NOT
8181: AND
8182: IFFALSE 8218
// ComEnterUnit ( mechanics [ i ] , controlTowers [ rand ( 1 , controlTowers ) ] ) ;
8184: LD_VAR 0 22
8188: PUSH
8189: LD_VAR 0 14
8193: ARRAY
8194: PPUSH
8195: LD_VAR 0 44
8199: PUSH
8200: LD_INT 1
8202: PPUSH
8203: LD_VAR 0 44
8207: PPUSH
8208: CALL_OW 12
8212: ARRAY
8213: PPUSH
8214: CALL_OW 120
8218: GO 8124
8220: POP
8221: POP
// end else
8222: GO 8366
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
8224: LD_VAR 0 22
8228: PUSH
8229: LD_VAR 0 22
8233: PPUSH
8234: LD_INT 56
8236: PUSH
8237: EMPTY
8238: LIST
8239: PPUSH
8240: CALL_OW 72
8244: AND
8245: PUSH
8246: LD_VAR 0 40
8250: AND
8251: IFFALSE 8366
// for i := 1 to mechanics do
8253: LD_ADDR_VAR 0 14
8257: PUSH
8258: DOUBLE
8259: LD_INT 1
8261: DEC
8262: ST_TO_ADDR
8263: LD_VAR 0 22
8267: PUSH
8268: FOR_TO
8269: IFFALSE 8364
// if GetTag ( mechanics [ i ] ) = 1 and not HasTask ( mechanics [ i ] ) and not IsInUnit ( mechanics [ i ] ) then
8271: LD_VAR 0 22
8275: PUSH
8276: LD_VAR 0 14
8280: ARRAY
8281: PPUSH
8282: CALL_OW 110
8286: PUSH
8287: LD_INT 1
8289: EQUAL
8290: PUSH
8291: LD_VAR 0 22
8295: PUSH
8296: LD_VAR 0 14
8300: ARRAY
8301: PPUSH
8302: CALL_OW 314
8306: NOT
8307: AND
8308: PUSH
8309: LD_VAR 0 22
8313: PUSH
8314: LD_VAR 0 14
8318: ARRAY
8319: PPUSH
8320: CALL_OW 310
8324: NOT
8325: AND
8326: IFFALSE 8362
// ComEnterUnit ( mechanics [ i ] , factory [ rand ( 1 , factory ) ] ) ;
8328: LD_VAR 0 22
8332: PUSH
8333: LD_VAR 0 14
8337: ARRAY
8338: PPUSH
8339: LD_VAR 0 40
8343: PUSH
8344: LD_INT 1
8346: PPUSH
8347: LD_VAR 0 40
8351: PPUSH
8352: CALL_OW 12
8356: ARRAY
8357: PPUSH
8358: CALL_OW 120
8362: GO 8268
8364: POP
8365: POP
// for i := 1 to personel do
8366: LD_ADDR_VAR 0 14
8370: PUSH
8371: DOUBLE
8372: LD_INT 1
8374: DEC
8375: ST_TO_ADDR
8376: LD_VAR 0 19
8380: PUSH
8381: FOR_TO
8382: IFFALSE 8423
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
8384: LD_ADDR_VAR 0 23
8388: PUSH
8389: LD_VAR 0 23
8393: PUSH
8394: LD_VAR 0 19
8398: PUSH
8399: LD_VAR 0 14
8403: ARRAY
8404: PPUSH
8405: LD_INT 25
8407: PUSH
8408: LD_INT 4
8410: PUSH
8411: EMPTY
8412: LIST
8413: LIST
8414: PPUSH
8415: CALL_OW 72
8419: ADD
8420: ST_TO_ADDR
8421: GO 8381
8423: POP
8424: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
8425: LD_VAR 0 23
8429: PUSH
8430: LD_VAR 0 4
8434: PPUSH
8435: LD_INT 22
8437: PUSH
8438: LD_VAR 0 1
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: PUSH
8447: LD_INT 21
8449: PUSH
8450: LD_INT 1
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PUSH
8457: LD_INT 3
8459: PUSH
8460: LD_INT 24
8462: PUSH
8463: LD_INT 1000
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: LIST
8478: PPUSH
8479: CALL_OW 70
8483: AND
8484: IFFALSE 8921
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
8486: LD_ADDR_VAR 0 48
8490: PUSH
8491: LD_VAR 0 4
8495: PPUSH
8496: LD_INT 22
8498: PUSH
8499: LD_VAR 0 1
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: PUSH
8508: LD_INT 21
8510: PUSH
8511: LD_INT 1
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PUSH
8518: LD_INT 3
8520: PUSH
8521: LD_INT 24
8523: PUSH
8524: LD_INT 1000
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: PUSH
8531: EMPTY
8532: LIST
8533: LIST
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: LIST
8539: PPUSH
8540: CALL_OW 70
8544: PUSH
8545: FOR_IN
8546: IFFALSE 8917
// begin if GetDistUnitArea ( damageUnit , healArea ) <= 5 then
8548: LD_VAR 0 48
8552: PPUSH
8553: LD_VAR 0 5
8557: PPUSH
8558: CALL_OW 299
8562: PUSH
8563: LD_INT 5
8565: LESSEQUAL
8566: IFFALSE 8726
// for i := 1 to scientists do
8568: LD_ADDR_VAR 0 14
8572: PUSH
8573: DOUBLE
8574: LD_INT 1
8576: DEC
8577: ST_TO_ADDR
8578: LD_VAR 0 23
8582: PUSH
8583: FOR_TO
8584: IFFALSE 8724
// if GetTag ( scientists [ i ] ) = 1 then
8586: LD_VAR 0 23
8590: PUSH
8591: LD_VAR 0 14
8595: ARRAY
8596: PPUSH
8597: CALL_OW 110
8601: PUSH
8602: LD_INT 1
8604: EQUAL
8605: IFFALSE 8722
// begin if GetTaskList ( scientists [ i ] ) then
8607: LD_VAR 0 23
8611: PUSH
8612: LD_VAR 0 14
8616: ARRAY
8617: PPUSH
8618: CALL_OW 437
8622: IFFALSE 8670
// if GetTaskList ( scientists [ i ] ) [ 1 ] [ 1 ] = e then
8624: LD_VAR 0 23
8628: PUSH
8629: LD_VAR 0 14
8633: ARRAY
8634: PPUSH
8635: CALL_OW 437
8639: PUSH
8640: LD_INT 1
8642: ARRAY
8643: PUSH
8644: LD_INT 1
8646: ARRAY
8647: PUSH
8648: LD_STRING e
8650: EQUAL
8651: IFFALSE 8670
// SetTaskList ( scientists [ i ] , [ ] ) ;
8653: LD_VAR 0 23
8657: PUSH
8658: LD_VAR 0 14
8662: ARRAY
8663: PPUSH
8664: EMPTY
8665: PPUSH
8666: CALL_OW 446
// if IsInUnit ( scientists [ i ] ) then
8670: LD_VAR 0 23
8674: PUSH
8675: LD_VAR 0 14
8679: ARRAY
8680: PPUSH
8681: CALL_OW 310
8685: IFFALSE 8702
// ComExitBuilding ( scientists [ i ] ) ;
8687: LD_VAR 0 23
8691: PUSH
8692: LD_VAR 0 14
8696: ARRAY
8697: PPUSH
8698: CALL_OW 122
// AddComHeal ( scientists [ i ] , damageUnit ) ;
8702: LD_VAR 0 23
8706: PUSH
8707: LD_VAR 0 14
8711: ARRAY
8712: PPUSH
8713: LD_VAR 0 48
8717: PPUSH
8718: CALL_OW 188
// end ;
8722: GO 8583
8724: POP
8725: POP
// if GetLives ( damageUnit ) < 250 and IsInArea ( damageUnit , baseArea ) then
8726: LD_VAR 0 48
8730: PPUSH
8731: CALL_OW 256
8735: PUSH
8736: LD_INT 250
8738: LESS
8739: PUSH
8740: LD_VAR 0 48
8744: PPUSH
8745: LD_VAR 0 4
8749: PPUSH
8750: CALL_OW 308
8754: AND
8755: IFFALSE 8915
// for i := 1 to scientists do
8757: LD_ADDR_VAR 0 14
8761: PUSH
8762: DOUBLE
8763: LD_INT 1
8765: DEC
8766: ST_TO_ADDR
8767: LD_VAR 0 23
8771: PUSH
8772: FOR_TO
8773: IFFALSE 8913
// if GetTag ( scientists [ i ] ) = 1 then
8775: LD_VAR 0 23
8779: PUSH
8780: LD_VAR 0 14
8784: ARRAY
8785: PPUSH
8786: CALL_OW 110
8790: PUSH
8791: LD_INT 1
8793: EQUAL
8794: IFFALSE 8911
// begin if GetTaskList ( scientists [ i ] ) then
8796: LD_VAR 0 23
8800: PUSH
8801: LD_VAR 0 14
8805: ARRAY
8806: PPUSH
8807: CALL_OW 437
8811: IFFALSE 8859
// if GetTaskList ( scientists [ i ] ) [ 1 ] [ 1 ] = e then
8813: LD_VAR 0 23
8817: PUSH
8818: LD_VAR 0 14
8822: ARRAY
8823: PPUSH
8824: CALL_OW 437
8828: PUSH
8829: LD_INT 1
8831: ARRAY
8832: PUSH
8833: LD_INT 1
8835: ARRAY
8836: PUSH
8837: LD_STRING e
8839: EQUAL
8840: IFFALSE 8859
// SetTaskList ( scientists [ i ] , [ ] ) ;
8842: LD_VAR 0 23
8846: PUSH
8847: LD_VAR 0 14
8851: ARRAY
8852: PPUSH
8853: EMPTY
8854: PPUSH
8855: CALL_OW 446
// if IsInUnit ( scientists [ i ] ) then
8859: LD_VAR 0 23
8863: PUSH
8864: LD_VAR 0 14
8868: ARRAY
8869: PPUSH
8870: CALL_OW 310
8874: IFFALSE 8891
// ComExitBuilding ( scientists [ i ] ) ;
8876: LD_VAR 0 23
8880: PUSH
8881: LD_VAR 0 14
8885: ARRAY
8886: PPUSH
8887: CALL_OW 122
// AddComHeal ( scientists [ i ] , damageUnit ) ;
8891: LD_VAR 0 23
8895: PUSH
8896: LD_VAR 0 14
8900: ARRAY
8901: PPUSH
8902: LD_VAR 0 48
8906: PPUSH
8907: CALL_OW 188
// end ;
8911: GO 8772
8913: POP
8914: POP
// end ;
8915: GO 8545
8917: POP
8918: POP
// end else
8919: GO 9063
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
8921: LD_VAR 0 23
8925: PUSH
8926: LD_VAR 0 23
8930: PPUSH
8931: LD_INT 56
8933: PUSH
8934: EMPTY
8935: LIST
8936: PPUSH
8937: CALL_OW 72
8941: AND
8942: PUSH
8943: LD_VAR 0 41
8947: AND
8948: IFFALSE 9063
// for i := 1 to scientists do
8950: LD_ADDR_VAR 0 14
8954: PUSH
8955: DOUBLE
8956: LD_INT 1
8958: DEC
8959: ST_TO_ADDR
8960: LD_VAR 0 23
8964: PUSH
8965: FOR_TO
8966: IFFALSE 9061
// if GetTag ( scientists [ i ] ) = 1 and not HasTask ( scientists [ i ] ) and not IsInUnit ( scientists [ i ] ) then
8968: LD_VAR 0 23
8972: PUSH
8973: LD_VAR 0 14
8977: ARRAY
8978: PPUSH
8979: CALL_OW 110
8983: PUSH
8984: LD_INT 1
8986: EQUAL
8987: PUSH
8988: LD_VAR 0 23
8992: PUSH
8993: LD_VAR 0 14
8997: ARRAY
8998: PPUSH
8999: CALL_OW 314
9003: NOT
9004: AND
9005: PUSH
9006: LD_VAR 0 23
9010: PUSH
9011: LD_VAR 0 14
9015: ARRAY
9016: PPUSH
9017: CALL_OW 310
9021: NOT
9022: AND
9023: IFFALSE 9059
// ComEnterUnit ( scientists [ i ] , lab [ rand ( 1 , lab ) ] ) ;
9025: LD_VAR 0 23
9029: PUSH
9030: LD_VAR 0 14
9034: ARRAY
9035: PPUSH
9036: LD_VAR 0 41
9040: PUSH
9041: LD_INT 1
9043: PPUSH
9044: LD_VAR 0 41
9048: PPUSH
9049: CALL_OW 12
9053: ARRAY
9054: PPUSH
9055: CALL_OW 120
9059: GO 8965
9061: POP
9062: POP
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , us_bulldozer ] ] ) then
9063: LD_INT 22
9065: PUSH
9066: LD_VAR 0 1
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: PUSH
9075: LD_INT 34
9077: PUSH
9078: LD_INT 14
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PPUSH
9089: CALL_OW 69
9093: NOT
9094: IFFALSE 9121
// AddComConstruct ( factory [ 1 ] , us_heavy_tracked , engine_combustion , control_remote , us_bulldozer ) ;
9096: LD_VAR 0 40
9100: PUSH
9101: LD_INT 1
9103: ARRAY
9104: PPUSH
9105: LD_INT 4
9107: PPUSH
9108: LD_INT 1
9110: PPUSH
9111: LD_INT 2
9113: PPUSH
9114: LD_INT 14
9116: PPUSH
9117: CALL_OW 185
// if vehicles < vehiclesAmount and factory then
9121: LD_VAR 0 25
9125: PUSH
9126: LD_VAR 0 8
9130: LESS
9131: PUSH
9132: LD_VAR 0 40
9136: AND
9137: IFFALSE 9385
// begin tmp = vehiclesAmount - vehicles ;
9139: LD_ADDR_VAR 0 16
9143: PUSH
9144: LD_VAR 0 8
9148: PUSH
9149: LD_VAR 0 25
9153: MINUS
9154: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
9155: LD_ADDR_VAR 0 32
9159: PUSH
9160: LD_VAR 0 1
9164: PPUSH
9165: LD_VAR 0 2
9169: PPUSH
9170: CALL 13992 0 2
9174: ST_TO_ADDR
// for i := 1 to tmp do
9175: LD_ADDR_VAR 0 14
9179: PUSH
9180: DOUBLE
9181: LD_INT 1
9183: DEC
9184: ST_TO_ADDR
9185: LD_VAR 0 16
9189: PUSH
9190: FOR_TO
9191: IFFALSE 9381
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
9193: LD_ADDR_VAR 0 16
9197: PUSH
9198: LD_VAR 0 32
9202: PUSH
9203: LD_INT 1
9205: PPUSH
9206: LD_VAR 0 32
9210: PPUSH
9211: CALL_OW 12
9215: ARRAY
9216: ST_TO_ADDR
// if tmp in [ 6 , 34 , 14 , 71 , 47 ] then
9217: LD_VAR 0 16
9221: PUSH
9222: LD_INT 6
9224: PUSH
9225: LD_INT 34
9227: PUSH
9228: LD_INT 14
9230: PUSH
9231: LD_INT 71
9233: PUSH
9234: LD_INT 47
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: IN
9244: IFFALSE 9282
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
9246: LD_ADDR_VAR 0 33
9250: PUSH
9251: LD_INT 4
9253: PUSH
9254: EMPTY
9255: LIST
9256: PUSH
9257: LD_INT 14
9259: PUSH
9260: EMPTY
9261: LIST
9262: PUSH
9263: LD_INT 24
9265: PUSH
9266: EMPTY
9267: LIST
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: LIST
9273: PUSH
9274: LD_VAR 0 2
9278: ARRAY
9279: ST_TO_ADDR
9280: GO 9336
// chassis = [ [ us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
9282: LD_ADDR_VAR 0 33
9286: PUSH
9287: LD_INT 3
9289: PUSH
9290: LD_INT 4
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: PUSH
9297: LD_INT 13
9299: PUSH
9300: LD_INT 14
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: LD_INT 21
9309: PUSH
9310: LD_INT 23
9312: PUSH
9313: LD_INT 24
9315: PUSH
9316: LD_INT 22
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: LIST
9329: PUSH
9330: LD_VAR 0 2
9334: ARRAY
9335: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_remote , tmp ) ;
9336: LD_VAR 0 40
9340: PUSH
9341: LD_INT 1
9343: ARRAY
9344: PPUSH
9345: LD_VAR 0 33
9349: PUSH
9350: LD_INT 1
9352: PPUSH
9353: LD_VAR 0 33
9357: PPUSH
9358: CALL_OW 12
9362: ARRAY
9363: PPUSH
9364: LD_INT 1
9366: PPUSH
9367: LD_INT 2
9369: PPUSH
9370: LD_VAR 0 16
9374: PPUSH
9375: CALL_OW 185
// end ;
9379: GO 9190
9381: POP
9382: POP
// end else
9383: GO 9398
// ComCancel ( factory [ 1 ] ) ;
9385: LD_VAR 0 40
9389: PUSH
9390: LD_INT 1
9392: ARRAY
9393: PPUSH
9394: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ] ] ) do
9398: LD_ADDR_VAR 0 24
9402: PUSH
9403: LD_VAR 0 4
9407: PPUSH
9408: LD_INT 22
9410: PUSH
9411: LD_VAR 0 1
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: PUSH
9420: LD_INT 21
9422: PUSH
9423: LD_INT 2
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: PUSH
9430: LD_INT 50
9432: PUSH
9433: EMPTY
9434: LIST
9435: PUSH
9436: LD_INT 3
9438: PUSH
9439: LD_INT 2
9441: PUSH
9442: LD_INT 34
9444: PUSH
9445: LD_INT 12
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PUSH
9452: LD_INT 34
9454: PUSH
9455: LD_INT 51
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: PUSH
9462: LD_INT 34
9464: PUSH
9465: LD_INT 32
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PUSH
9472: LD_INT 34
9474: PUSH
9475: LD_INT 31
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: PPUSH
9499: CALL_OW 70
9503: PUSH
9504: FOR_IN
9505: IFFALSE 9660
// begin vehicleInList = false ;
9507: LD_ADDR_VAR 0 26
9511: PUSH
9512: LD_INT 0
9514: ST_TO_ADDR
// for i := 1 to vehicles do
9515: LD_ADDR_VAR 0 14
9519: PUSH
9520: DOUBLE
9521: LD_INT 1
9523: DEC
9524: ST_TO_ADDR
9525: LD_VAR 0 25
9529: PUSH
9530: FOR_TO
9531: IFFALSE 9561
// if vehicle in vehicles [ i ] then
9533: LD_VAR 0 24
9537: PUSH
9538: LD_VAR 0 25
9542: PUSH
9543: LD_VAR 0 14
9547: ARRAY
9548: IN
9549: IFFALSE 9559
// vehicleInList = true ;
9551: LD_ADDR_VAR 0 26
9555: PUSH
9556: LD_INT 1
9558: ST_TO_ADDR
9559: GO 9530
9561: POP
9562: POP
// if not vehicleInList then
9563: LD_VAR 0 26
9567: NOT
9568: IFFALSE 9658
// begin if vehicles < vehiclesToAttackAmount then
9570: LD_VAR 0 25
9574: PUSH
9575: LD_VAR 0 10
9579: LESS
9580: IFFALSE 9621
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] ] ] else
9582: LD_ADDR_VAR 0 25
9586: PUSH
9587: LD_VAR 0 25
9591: PUSH
9592: LD_VAR 0 24
9596: PUSH
9597: LD_VAR 0 24
9601: PPUSH
9602: CALL_OW 313
9606: PUSH
9607: LD_INT 1
9609: ARRAY
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: PUSH
9615: EMPTY
9616: LIST
9617: ADD
9618: ST_TO_ADDR
9619: GO 9658
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] ] ] ;
9621: LD_ADDR_VAR 0 25
9625: PUSH
9626: LD_VAR 0 25
9630: PUSH
9631: LD_VAR 0 24
9635: PUSH
9636: LD_VAR 0 24
9640: PPUSH
9641: CALL_OW 313
9645: PUSH
9646: LD_INT 1
9648: ARRAY
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PUSH
9654: EMPTY
9655: LIST
9656: ADD
9657: ST_TO_ADDR
// end ; end ;
9658: GO 9504
9660: POP
9661: POP
// for enemyUnits in FilterAllUnits ( [ f_enemy , side ] ) do
9662: LD_ADDR_VAR 0 50
9666: PUSH
9667: LD_INT 81
9669: PUSH
9670: LD_VAR 0 1
9674: PUSH
9675: EMPTY
9676: LIST
9677: LIST
9678: PPUSH
9679: CALL_OW 69
9683: PUSH
9684: FOR_IN
9685: IFFALSE 10203
// begin offensiveUnits = [ ] ;
9687: LD_ADDR_VAR 0 27
9691: PUSH
9692: EMPTY
9693: ST_TO_ADDR
// offensiveReadyCounter = 0 ;
9694: LD_ADDR_VAR 0 28
9698: PUSH
9699: LD_INT 0
9701: ST_TO_ADDR
// for i := 1 to vehicles do
9702: LD_ADDR_VAR 0 14
9706: PUSH
9707: DOUBLE
9708: LD_INT 1
9710: DEC
9711: ST_TO_ADDR
9712: LD_VAR 0 25
9716: PUSH
9717: FOR_TO
9718: IFFALSE 9926
// if GetTag ( vehicles [ i ] [ 1 ] ) = 2 then
9720: LD_VAR 0 25
9724: PUSH
9725: LD_VAR 0 14
9729: ARRAY
9730: PUSH
9731: LD_INT 1
9733: ARRAY
9734: PPUSH
9735: CALL_OW 110
9739: PUSH
9740: LD_INT 2
9742: EQUAL
9743: IFFALSE 9924
// begin if GetLives ( vehicles [ i ] [ 1 ] ) > 650 then
9745: LD_VAR 0 25
9749: PUSH
9750: LD_VAR 0 14
9754: ARRAY
9755: PUSH
9756: LD_INT 1
9758: ARRAY
9759: PPUSH
9760: CALL_OW 256
9764: PUSH
9765: LD_INT 650
9767: GREATER
9768: IFFALSE 9784
// offensiveReadyCounter = offensiveReadyCounter + 1 ;
9770: LD_ADDR_VAR 0 28
9774: PUSH
9775: LD_VAR 0 28
9779: PUSH
9780: LD_INT 1
9782: PLUS
9783: ST_TO_ADDR
// if IsInArea ( vehicles [ i ] [ 1 ] , baseArea ) then
9784: LD_VAR 0 25
9788: PUSH
9789: LD_VAR 0 14
9793: ARRAY
9794: PUSH
9795: LD_INT 1
9797: ARRAY
9798: PPUSH
9799: LD_VAR 0 4
9803: PPUSH
9804: CALL_OW 308
9808: IFFALSE 9836
// offensiveUnits = offensiveUnits ^ vehicles [ i ] [ 1 ] ;
9810: LD_ADDR_VAR 0 27
9814: PUSH
9815: LD_VAR 0 27
9819: PUSH
9820: LD_VAR 0 25
9824: PUSH
9825: LD_VAR 0 14
9829: ARRAY
9830: PUSH
9831: LD_INT 1
9833: ARRAY
9834: ADD
9835: ST_TO_ADDR
// for j = 1 to personel do
9836: LD_ADDR_VAR 0 15
9840: PUSH
9841: DOUBLE
9842: LD_INT 1
9844: DEC
9845: ST_TO_ADDR
9846: LD_VAR 0 19
9850: PUSH
9851: FOR_TO
9852: IFFALSE 9922
// if personel [ j ] = vehicles [ i ] [ 2 ] then
9854: LD_VAR 0 19
9858: PUSH
9859: LD_VAR 0 15
9863: ARRAY
9864: PUSH
9865: LD_VAR 0 25
9869: PUSH
9870: LD_VAR 0 14
9874: ARRAY
9875: PUSH
9876: LD_INT 2
9878: ARRAY
9879: EQUAL
9880: IFFALSE 9920
// personel = ReplaceIn ( personel , [ j , personel [ j ] ] , 3 ) ;
9882: LD_ADDR_VAR 0 19
9886: PUSH
9887: LD_VAR 0 19
9891: PPUSH
9892: LD_VAR 0 15
9896: PUSH
9897: LD_VAR 0 19
9901: PUSH
9902: LD_VAR 0 15
9906: ARRAY
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: PPUSH
9912: LD_INT 3
9914: PPUSH
9915: CALL 45794 0 3
9919: ST_TO_ADDR
9920: GO 9851
9922: POP
9923: POP
// end ;
9924: GO 9717
9926: POP
9927: POP
// if vehiclesToAttackAmount <= offensiveReadyCounter then
9928: LD_VAR 0 10
9932: PUSH
9933: LD_VAR 0 28
9937: LESSEQUAL
9938: IFFALSE 10201
// begin for i := 1 to offensiveUnits do
9940: LD_ADDR_VAR 0 14
9944: PUSH
9945: DOUBLE
9946: LD_INT 1
9948: DEC
9949: ST_TO_ADDR
9950: LD_VAR 0 27
9954: PUSH
9955: FOR_TO
9956: IFFALSE 10199
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , offensiveUnits [ i ] ) ;
9958: LD_ADDR_VAR 0 29
9962: PUSH
9963: LD_INT 81
9965: PUSH
9966: LD_INT 1
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: PPUSH
9973: CALL_OW 69
9977: PPUSH
9978: LD_VAR 0 27
9982: PUSH
9983: LD_VAR 0 14
9987: ARRAY
9988: PPUSH
9989: CALL_OW 74
9993: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , offensiveUnits [ i ] ) ;
9994: LD_ADDR_VAR 0 30
9998: PUSH
9999: LD_INT 81
10001: PUSH
10002: LD_INT 1
10004: PUSH
10005: EMPTY
10006: LIST
10007: LIST
10008: PUSH
10009: LD_INT 2
10011: PUSH
10012: LD_INT 59
10014: PUSH
10015: EMPTY
10016: LIST
10017: PUSH
10018: LD_INT 21
10020: PUSH
10021: LD_INT 1
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: PUSH
10028: LD_INT 21
10030: PUSH
10031: LD_INT 2
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: EMPTY
10049: LIST
10050: PPUSH
10051: CALL_OW 69
10055: PPUSH
10056: LD_VAR 0 27
10060: PUSH
10061: LD_VAR 0 14
10065: ARRAY
10066: PPUSH
10067: CALL_OW 74
10071: ST_TO_ADDR
// if GetDistUnits ( offensiveUnits [ i ] , target1 ) + 9 < GetDistUnits ( offensiveUnits [ i ] , target2 ) then
10072: LD_VAR 0 27
10076: PUSH
10077: LD_VAR 0 14
10081: ARRAY
10082: PPUSH
10083: LD_VAR 0 29
10087: PPUSH
10088: CALL_OW 296
10092: PUSH
10093: LD_INT 9
10095: PLUS
10096: PUSH
10097: LD_VAR 0 27
10101: PUSH
10102: LD_VAR 0 14
10106: ARRAY
10107: PPUSH
10108: LD_VAR 0 30
10112: PPUSH
10113: CALL_OW 296
10117: LESS
10118: IFFALSE 10142
// ComAttackUnit ( offensiveUnits [ i ] , target1 ) else
10120: LD_VAR 0 27
10124: PUSH
10125: LD_VAR 0 14
10129: ARRAY
10130: PPUSH
10131: LD_VAR 0 29
10135: PPUSH
10136: CALL_OW 115
10140: GO 10162
// ComAttackUnit ( offensiveUnits [ i ] , target2 ) ;
10142: LD_VAR 0 27
10146: PUSH
10147: LD_VAR 0 14
10151: ARRAY
10152: PPUSH
10153: LD_VAR 0 30
10157: PPUSH
10158: CALL_OW 115
// AddComAgressiveMove ( offensiveUnits [ i ] , GetX ( enemyUnits ) , GetY ( enemyUnits ) ) ;
10162: LD_VAR 0 27
10166: PUSH
10167: LD_VAR 0 14
10171: ARRAY
10172: PPUSH
10173: LD_VAR 0 50
10177: PPUSH
10178: CALL_OW 250
10182: PPUSH
10183: LD_VAR 0 50
10187: PPUSH
10188: CALL_OW 251
10192: PPUSH
10193: CALL_OW 174
// end ;
10197: GO 9955
10199: POP
10200: POP
// end ; end ;
10201: GO 9684
10203: POP
10204: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
10205: LD_ADDR_VAR 0 50
10209: PUSH
10210: LD_VAR 0 7
10214: PPUSH
10215: LD_INT 81
10217: PUSH
10218: LD_VAR 0 1
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PPUSH
10227: CALL_OW 70
10231: PUSH
10232: FOR_IN
10233: IFFALSE 10461
// begin defenceUnits = [ ] ;
10235: LD_ADDR_VAR 0 31
10239: PUSH
10240: EMPTY
10241: ST_TO_ADDR
// for i := 1 to personel do
10242: LD_ADDR_VAR 0 14
10246: PUSH
10247: DOUBLE
10248: LD_INT 1
10250: DEC
10251: ST_TO_ADDR
10252: LD_VAR 0 19
10256: PUSH
10257: FOR_TO
10258: IFFALSE 10305
// if GetTag ( personel [ i ] ) = 3 then
10260: LD_VAR 0 19
10264: PUSH
10265: LD_VAR 0 14
10269: ARRAY
10270: PPUSH
10271: CALL_OW 110
10275: PUSH
10276: LD_INT 3
10278: EQUAL
10279: IFFALSE 10303
// defenceUnits = defenceUnits ^ personel [ i ] ;
10281: LD_ADDR_VAR 0 31
10285: PUSH
10286: LD_VAR 0 31
10290: PUSH
10291: LD_VAR 0 19
10295: PUSH
10296: LD_VAR 0 14
10300: ARRAY
10301: ADD
10302: ST_TO_ADDR
10303: GO 10257
10305: POP
10306: POP
// for i := 1 to vehicles do
10307: LD_ADDR_VAR 0 14
10311: PUSH
10312: DOUBLE
10313: LD_INT 1
10315: DEC
10316: ST_TO_ADDR
10317: LD_VAR 0 25
10321: PUSH
10322: FOR_TO
10323: IFFALSE 10378
// if GetTag ( vehicles [ i ] [ 1 ] ) = 3 then
10325: LD_VAR 0 25
10329: PUSH
10330: LD_VAR 0 14
10334: ARRAY
10335: PUSH
10336: LD_INT 1
10338: ARRAY
10339: PPUSH
10340: CALL_OW 110
10344: PUSH
10345: LD_INT 3
10347: EQUAL
10348: IFFALSE 10376
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
10350: LD_ADDR_VAR 0 31
10354: PUSH
10355: LD_VAR 0 31
10359: PUSH
10360: LD_VAR 0 25
10364: PUSH
10365: LD_VAR 0 14
10369: ARRAY
10370: PUSH
10371: LD_INT 1
10373: ARRAY
10374: ADD
10375: ST_TO_ADDR
10376: GO 10322
10378: POP
10379: POP
// ComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
10380: LD_VAR 0 31
10384: PPUSH
10385: LD_INT 3
10387: PUSH
10388: LD_INT 60
10390: PUSH
10391: EMPTY
10392: LIST
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PPUSH
10398: CALL_OW 72
10402: PPUSH
10403: LD_VAR 0 50
10407: PPUSH
10408: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , GetX ( enemyUnits ) , GetY ( enemyUnits ) ) ;
10412: LD_VAR 0 31
10416: PPUSH
10417: LD_INT 3
10419: PUSH
10420: LD_INT 60
10422: PUSH
10423: EMPTY
10424: LIST
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: PPUSH
10430: CALL_OW 72
10434: PPUSH
10435: LD_VAR 0 50
10439: PPUSH
10440: CALL_OW 250
10444: PPUSH
10445: LD_VAR 0 50
10449: PPUSH
10450: CALL_OW 251
10454: PPUSH
10455: CALL_OW 174
// end ;
10459: GO 10232
10461: POP
10462: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
10463: LD_ADDR_VAR 0 45
10467: PUSH
10468: LD_INT 22
10470: PUSH
10471: LD_VAR 0 1
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: PUSH
10480: LD_INT 2
10482: PUSH
10483: LD_INT 30
10485: PUSH
10486: LD_INT 31
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: PUSH
10493: LD_INT 30
10495: PUSH
10496: LD_INT 32
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 30
10505: PUSH
10506: LD_INT 33
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 30
10515: PUSH
10516: LD_INT 4
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: LD_INT 30
10525: PUSH
10526: LD_INT 5
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PPUSH
10545: CALL_OW 69
10549: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
10550: LD_ADDR_VAR 0 46
10554: PUSH
10555: LD_INT 81
10557: PUSH
10558: LD_VAR 0 1
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PUSH
10567: LD_INT 21
10569: PUSH
10570: LD_INT 3
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: PUSH
10577: LD_INT 58
10579: PUSH
10580: EMPTY
10581: LIST
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: PPUSH
10588: CALL_OW 69
10592: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
10593: LD_VAR 0 45
10597: PUSH
10598: LD_VAR 0 46
10602: AND
10603: IFFALSE 10673
// for i in attackBuildings do
10605: LD_ADDR_VAR 0 14
10609: PUSH
10610: LD_VAR 0 45
10614: PUSH
10615: FOR_IN
10616: IFFALSE 10671
// for j in enemyBuildings do
10618: LD_ADDR_VAR 0 15
10622: PUSH
10623: LD_VAR 0 46
10627: PUSH
10628: FOR_IN
10629: IFFALSE 10667
// if GetDistUnits ( i , j ) < 12 then
10631: LD_VAR 0 14
10635: PPUSH
10636: LD_VAR 0 15
10640: PPUSH
10641: CALL_OW 296
10645: PUSH
10646: LD_INT 12
10648: LESS
10649: IFFALSE 10665
// ComAttackUnit ( i , j ) ;
10651: LD_VAR 0 14
10655: PPUSH
10656: LD_VAR 0 15
10660: PPUSH
10661: CALL_OW 115
10665: GO 10628
10667: POP
10668: POP
10669: GO 10615
10671: POP
10672: POP
// if canRebuild then
10673: LD_VAR 0 12
10677: IFFALSE 11346
// begin tmp = false ;
10679: LD_ADDR_VAR 0 16
10683: PUSH
10684: LD_INT 0
10686: ST_TO_ADDR
// unit = false ;
10687: LD_ADDR_VAR 0 18
10691: PUSH
10692: LD_INT 0
10694: ST_TO_ADDR
// for destroyedBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 250 ] ] ] ) do
10695: LD_ADDR_VAR 0 36
10699: PUSH
10700: LD_VAR 0 4
10704: PPUSH
10705: LD_INT 22
10707: PUSH
10708: LD_VAR 0 1
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: LD_INT 21
10719: PUSH
10720: LD_INT 3
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: PUSH
10727: LD_INT 3
10729: PUSH
10730: LD_INT 24
10732: PUSH
10733: LD_INT 250
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: LIST
10748: PPUSH
10749: CALL_OW 70
10753: PUSH
10754: FOR_IN
10755: IFFALSE 10857
// begin unit = destroyedBuilding ;
10757: LD_ADDR_VAR 0 18
10761: PUSH
10762: LD_VAR 0 36
10766: ST_TO_ADDR
// for i := 1 to destroyedBuildings / 4 do
10767: LD_ADDR_VAR 0 14
10771: PUSH
10772: DOUBLE
10773: LD_INT 1
10775: DEC
10776: ST_TO_ADDR
10777: LD_VAR 0 35
10781: PUSH
10782: LD_INT 4
10784: DIVREAL
10785: PUSH
10786: FOR_TO
10787: IFFALSE 10853
// if destroyedBuildings [ i + 1 ] = GetX ( destroyedBuilding ) and destroyedBuildings [ i + 2 ] = GetY ( destroyedBuilding ) then
10789: LD_VAR 0 35
10793: PUSH
10794: LD_VAR 0 14
10798: PUSH
10799: LD_INT 1
10801: PLUS
10802: ARRAY
10803: PUSH
10804: LD_VAR 0 36
10808: PPUSH
10809: CALL_OW 250
10813: EQUAL
10814: PUSH
10815: LD_VAR 0 35
10819: PUSH
10820: LD_VAR 0 14
10824: PUSH
10825: LD_INT 2
10827: PLUS
10828: ARRAY
10829: PUSH
10830: LD_VAR 0 36
10834: PPUSH
10835: CALL_OW 251
10839: EQUAL
10840: AND
10841: IFFALSE 10851
// tmp = true ;
10843: LD_ADDR_VAR 0 16
10847: PUSH
10848: LD_INT 1
10850: ST_TO_ADDR
10851: GO 10786
10853: POP
10854: POP
// end ;
10855: GO 10754
10857: POP
10858: POP
// if not tmp and unit then
10859: LD_VAR 0 16
10863: NOT
10864: PUSH
10865: LD_VAR 0 18
10869: AND
10870: IFFALSE 11130
// begin if GetBType ( unit ) = 1 then
10872: LD_VAR 0 18
10876: PPUSH
10877: CALL_OW 266
10881: PUSH
10882: LD_INT 1
10884: EQUAL
10885: IFFALSE 10939
// destroyedBuildings = destroyedBuildings ^ [ 0 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
10887: LD_ADDR_VAR 0 35
10891: PUSH
10892: LD_VAR 0 35
10896: PUSH
10897: LD_INT 0
10899: PUSH
10900: LD_VAR 0 18
10904: PPUSH
10905: CALL_OW 250
10909: PUSH
10910: LD_VAR 0 18
10914: PPUSH
10915: CALL_OW 251
10919: PUSH
10920: LD_VAR 0 18
10924: PPUSH
10925: CALL_OW 254
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: ADD
10936: ST_TO_ADDR
10937: GO 11130
// if GetBType ( unit ) = 3 then
10939: LD_VAR 0 18
10943: PPUSH
10944: CALL_OW 266
10948: PUSH
10949: LD_INT 3
10951: EQUAL
10952: IFFALSE 11006
// destroyedBuildings = destroyedBuildings ^ [ 2 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
10954: LD_ADDR_VAR 0 35
10958: PUSH
10959: LD_VAR 0 35
10963: PUSH
10964: LD_INT 2
10966: PUSH
10967: LD_VAR 0 18
10971: PPUSH
10972: CALL_OW 250
10976: PUSH
10977: LD_VAR 0 18
10981: PPUSH
10982: CALL_OW 251
10986: PUSH
10987: LD_VAR 0 18
10991: PPUSH
10992: CALL_OW 254
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: ADD
11003: ST_TO_ADDR
11004: GO 11130
// if GetBType ( unit ) = 5 then
11006: LD_VAR 0 18
11010: PPUSH
11011: CALL_OW 266
11015: PUSH
11016: LD_INT 5
11018: EQUAL
11019: IFFALSE 11073
// destroyedBuildings = destroyedBuildings ^ [ 4 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11021: LD_ADDR_VAR 0 35
11025: PUSH
11026: LD_VAR 0 35
11030: PUSH
11031: LD_INT 4
11033: PUSH
11034: LD_VAR 0 18
11038: PPUSH
11039: CALL_OW 250
11043: PUSH
11044: LD_VAR 0 18
11048: PPUSH
11049: CALL_OW 251
11053: PUSH
11054: LD_VAR 0 18
11058: PPUSH
11059: CALL_OW 254
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: ADD
11070: ST_TO_ADDR
11071: GO 11130
// destroyedBuildings = destroyedBuildings ^ [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ;
11073: LD_ADDR_VAR 0 35
11077: PUSH
11078: LD_VAR 0 35
11082: PUSH
11083: LD_VAR 0 18
11087: PPUSH
11088: CALL_OW 266
11092: PUSH
11093: LD_VAR 0 18
11097: PPUSH
11098: CALL_OW 250
11102: PUSH
11103: LD_VAR 0 18
11107: PPUSH
11108: CALL_OW 251
11112: PUSH
11113: LD_VAR 0 18
11117: PPUSH
11118: CALL_OW 254
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: ADD
11129: ST_TO_ADDR
// end ; for constructedBuilding in constructedBuildings do
11130: LD_ADDR_VAR 0 37
11134: PUSH
11135: LD_VAR 0 38
11139: PUSH
11140: FOR_IN
11141: IFFALSE 11344
// for i := 1 to destroyedBuildings / 4 do
11143: LD_ADDR_VAR 0 14
11147: PUSH
11148: DOUBLE
11149: LD_INT 1
11151: DEC
11152: ST_TO_ADDR
11153: LD_VAR 0 35
11157: PUSH
11158: LD_INT 4
11160: DIVREAL
11161: PUSH
11162: FOR_TO
11163: IFFALSE 11340
// if destroyedBuildings [ i + 1 ] = GetX ( constructedBuilding ) and destroyedBuildings [ i + 2 ] = GetY ( constructedBuilding ) and IsOK ( constructedBuilding ) then
11165: LD_VAR 0 35
11169: PUSH
11170: LD_VAR 0 14
11174: PUSH
11175: LD_INT 1
11177: PLUS
11178: ARRAY
11179: PUSH
11180: LD_VAR 0 37
11184: PPUSH
11185: CALL_OW 250
11189: EQUAL
11190: PUSH
11191: LD_VAR 0 35
11195: PUSH
11196: LD_VAR 0 14
11200: PUSH
11201: LD_INT 2
11203: PLUS
11204: ARRAY
11205: PUSH
11206: LD_VAR 0 37
11210: PPUSH
11211: CALL_OW 251
11215: EQUAL
11216: AND
11217: PUSH
11218: LD_VAR 0 37
11222: PPUSH
11223: CALL_OW 302
11227: AND
11228: IFFALSE 11338
// begin destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11230: LD_ADDR_VAR 0 35
11234: PUSH
11235: LD_VAR 0 35
11239: PPUSH
11240: LD_INT 1
11242: PPUSH
11243: CALL_OW 3
11247: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11248: LD_ADDR_VAR 0 35
11252: PUSH
11253: LD_VAR 0 35
11257: PPUSH
11258: LD_INT 1
11260: PPUSH
11261: CALL_OW 3
11265: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11266: LD_ADDR_VAR 0 35
11270: PUSH
11271: LD_VAR 0 35
11275: PPUSH
11276: LD_INT 1
11278: PPUSH
11279: CALL_OW 3
11283: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11284: LD_ADDR_VAR 0 35
11288: PUSH
11289: LD_VAR 0 35
11293: PPUSH
11294: LD_INT 1
11296: PPUSH
11297: CALL_OW 3
11301: ST_TO_ADDR
// if GetType ( constructedBuilding ) in [ b_bunker , b_turret ] then
11302: LD_VAR 0 37
11306: PPUSH
11307: CALL_OW 247
11311: PUSH
11312: LD_INT 32
11314: PUSH
11315: LD_INT 33
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: IN
11322: IFFALSE 11338
// AddComPlaceWeapon ( constructedBuilding , weapons ) ;
11324: LD_VAR 0 37
11328: PPUSH
11329: LD_VAR 0 32
11333: PPUSH
11334: CALL_OW 208
// end ;
11338: GO 11162
11340: POP
11341: POP
11342: GO 11140
11344: POP
11345: POP
// end ; wait ( 0 0$01 ) ;
11346: LD_INT 35
11348: PPUSH
11349: CALL_OW 67
// until not personel ;
11353: LD_VAR 0 19
11357: NOT
11358: IFFALSE 5051
// end ; end_of_file
11360: LD_VAR 0 13
11364: RET
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
11365: LD_INT 0
11367: PPUSH
11368: PPUSH
// if debugMode then
11369: LD_EXP 33
11373: IFFALSE 11390
// unit := NewCharacter ( ident ) ;
11375: LD_ADDR_VAR 0 5
11379: PUSH
11380: LD_VAR 0 1
11384: PPUSH
11385: CALL_OW 25
11389: ST_TO_ADDR
// if exist_mode and not debugMode then
11390: LD_VAR 0 2
11394: PUSH
11395: LD_EXP 33
11399: NOT
11400: AND
11401: IFFALSE 11426
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
11403: LD_ADDR_VAR 0 5
11407: PUSH
11408: LD_EXP 32
11412: PUSH
11413: LD_VAR 0 1
11417: STR
11418: PPUSH
11419: CALL_OW 34
11423: ST_TO_ADDR
11424: GO 11448
// if not debugMode then
11426: LD_EXP 33
11430: NOT
11431: IFFALSE 11448
// unit := NewCharacter ( ident ) ;
11433: LD_ADDR_VAR 0 5
11437: PUSH
11438: LD_VAR 0 1
11442: PPUSH
11443: CALL_OW 25
11447: ST_TO_ADDR
// if class then
11448: LD_VAR 0 3
11452: IFFALSE 11468
// SetClass ( unit , class ) ;
11454: LD_VAR 0 5
11458: PPUSH
11459: LD_VAR 0 3
11463: PPUSH
11464: CALL_OW 336
// result := unit ;
11468: LD_ADDR_VAR 0 4
11472: PUSH
11473: LD_VAR 0 5
11477: ST_TO_ADDR
// end ;
11478: LD_VAR 0 4
11482: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
11483: LD_INT 0
11485: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
11486: LD_VAR 0 1
11490: PPUSH
11491: CALL_OW 255
11495: PUSH
11496: LD_VAR 0 3
11500: EQUAL
11501: PUSH
11502: LD_VAR 0 1
11506: PPUSH
11507: CALL_OW 302
11511: AND
11512: IFFALSE 11534
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
11514: LD_VAR 0 1
11518: PPUSH
11519: LD_EXP 31
11523: PUSH
11524: LD_VAR 0 2
11528: STR
11529: PPUSH
11530: CALL_OW 38
// end ;
11534: LD_VAR 0 4
11538: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
11539: LD_INT 0
11541: PPUSH
11542: PPUSH
11543: PPUSH
// resultCharactersToSave = [ ] ;
11544: LD_ADDR_VAR 0 6
11548: PUSH
11549: EMPTY
11550: ST_TO_ADDR
// for unit in characters do
11551: LD_ADDR_VAR 0 5
11555: PUSH
11556: LD_VAR 0 1
11560: PUSH
11561: FOR_IN
11562: IFFALSE 11610
// if GetSide ( unit ) = side and IsOK ( unit ) then
11564: LD_VAR 0 5
11568: PPUSH
11569: CALL_OW 255
11573: PUSH
11574: LD_VAR 0 3
11578: EQUAL
11579: PUSH
11580: LD_VAR 0 5
11584: PPUSH
11585: CALL_OW 302
11589: AND
11590: IFFALSE 11608
// resultCharactersToSave = resultCharactersToSave ^ unit ;
11592: LD_ADDR_VAR 0 6
11596: PUSH
11597: LD_VAR 0 6
11601: PUSH
11602: LD_VAR 0 5
11606: ADD
11607: ST_TO_ADDR
11608: GO 11561
11610: POP
11611: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
11612: LD_VAR 0 6
11616: PPUSH
11617: LD_EXP 31
11621: PUSH
11622: LD_VAR 0 2
11626: STR
11627: PPUSH
11628: CALL_OW 38
// end ;
11632: LD_VAR 0 4
11636: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
11637: LD_INT 0
11639: PPUSH
11640: PPUSH
// for unit in units do
11641: LD_ADDR_VAR 0 5
11645: PUSH
11646: LD_VAR 0 1
11650: PUSH
11651: FOR_IN
11652: IFFALSE 11675
// PlaceUnitArea ( unit , area , spawnMode ) ;
11654: LD_VAR 0 5
11658: PPUSH
11659: LD_VAR 0 2
11663: PPUSH
11664: LD_VAR 0 3
11668: PPUSH
11669: CALL_OW 49
11673: GO 11651
11675: POP
11676: POP
// end ;
11677: LD_VAR 0 4
11681: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
11682: LD_INT 0
11684: PPUSH
11685: PPUSH
11686: PPUSH
11687: PPUSH
// units = characters ;
11688: LD_ADDR_VAR 0 9
11692: PUSH
11693: LD_VAR 0 1
11697: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod , Kirilenkova ] ;
11698: LD_ADDR_VAR 0 9
11702: PUSH
11703: LD_VAR 0 9
11707: PUSH
11708: LD_EXP 39
11712: PUSH
11713: LD_EXP 40
11717: PUSH
11718: LD_EXP 41
11722: PUSH
11723: LD_EXP 42
11727: PUSH
11728: LD_EXP 43
11732: PUSH
11733: LD_EXP 44
11737: PUSH
11738: LD_EXP 45
11742: PUSH
11743: LD_EXP 46
11747: PUSH
11748: LD_EXP 51
11752: PUSH
11753: LD_EXP 48
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: DIFF
11770: ST_TO_ADDR
// if not units and not canTalkHero then
11771: LD_VAR 0 9
11775: NOT
11776: PUSH
11777: LD_VAR 0 5
11781: NOT
11782: AND
11783: IFFALSE 11787
// exit ;
11785: GO 11960
// if not units then
11787: LD_VAR 0 9
11791: NOT
11792: IFFALSE 11813
// units = characters diff [ Burlak ] ;
11794: LD_ADDR_VAR 0 9
11798: PUSH
11799: LD_VAR 0 1
11803: PUSH
11804: LD_EXP 39
11808: PUSH
11809: EMPTY
11810: LIST
11811: DIFF
11812: ST_TO_ADDR
// if not units and canTalkHero then
11813: LD_VAR 0 9
11817: NOT
11818: PUSH
11819: LD_VAR 0 5
11823: AND
11824: IFFALSE 11828
// exit ;
11826: GO 11960
// speaker := units [ rand ( 1 , units ) ] ;
11828: LD_ADDR_VAR 0 8
11832: PUSH
11833: LD_VAR 0 9
11837: PUSH
11838: LD_INT 1
11840: PPUSH
11841: LD_VAR 0 9
11845: PPUSH
11846: CALL_OW 12
11850: ARRAY
11851: ST_TO_ADDR
// if radio then
11852: LD_VAR 0 4
11856: IFFALSE 11905
// begin if GetSex ( speaker ) = sex_male then
11858: LD_VAR 0 8
11862: PPUSH
11863: CALL_OW 258
11867: PUSH
11868: LD_INT 1
11870: EQUAL
11871: IFFALSE 11889
// SayRadio ( speaker , dialogMID ) else
11873: LD_VAR 0 8
11877: PPUSH
11878: LD_VAR 0 2
11882: PPUSH
11883: CALL_OW 94
11887: GO 11903
// SayRadio ( speaker , dialogFID ) ;
11889: LD_VAR 0 8
11893: PPUSH
11894: LD_VAR 0 3
11898: PPUSH
11899: CALL_OW 94
// end else
11903: GO 11950
// begin if GetSex ( speaker ) = sex_male then
11905: LD_VAR 0 8
11909: PPUSH
11910: CALL_OW 258
11914: PUSH
11915: LD_INT 1
11917: EQUAL
11918: IFFALSE 11936
// Say ( speaker , dialogMID ) else
11920: LD_VAR 0 8
11924: PPUSH
11925: LD_VAR 0 2
11929: PPUSH
11930: CALL_OW 88
11934: GO 11950
// Say ( speaker , dialogFID ) ;
11936: LD_VAR 0 8
11940: PPUSH
11941: LD_VAR 0 3
11945: PPUSH
11946: CALL_OW 88
// end ; result := speaker ;
11950: LD_ADDR_VAR 0 6
11954: PUSH
11955: LD_VAR 0 8
11959: ST_TO_ADDR
// end ;
11960: LD_VAR 0 6
11964: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
11965: LD_INT 0
11967: PPUSH
11968: PPUSH
// dir := GetDir ( bunker ) - 3 ;
11969: LD_ADDR_VAR 0 4
11973: PUSH
11974: LD_VAR 0 2
11978: PPUSH
11979: CALL_OW 254
11983: PUSH
11984: LD_INT 3
11986: MINUS
11987: ST_TO_ADDR
// if dir < 0 then
11988: LD_VAR 0 4
11992: PUSH
11993: LD_INT 0
11995: LESS
11996: IFFALSE 12012
// dir := 6 + dir ;
11998: LD_ADDR_VAR 0 4
12002: PUSH
12003: LD_INT 6
12005: PUSH
12006: LD_VAR 0 4
12010: PLUS
12011: ST_TO_ADDR
// SetDir ( un , dir ) ;
12012: LD_VAR 0 1
12016: PPUSH
12017: LD_VAR 0 4
12021: PPUSH
12022: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
12026: LD_VAR 0 1
12030: PPUSH
12031: LD_VAR 0 2
12035: PPUSH
12036: CALL_OW 52
// result = un ;
12040: LD_ADDR_VAR 0 3
12044: PUSH
12045: LD_VAR 0 1
12049: ST_TO_ADDR
// end ;
12050: LD_VAR 0 3
12054: RET
// export function AddComCaptureBuilding ( engs , building ) ; var eng ; begin
12055: LD_INT 0
12057: PPUSH
12058: PPUSH
// for eng in engs do
12059: LD_ADDR_VAR 0 4
12063: PUSH
12064: LD_VAR 0 1
12068: PUSH
12069: FOR_IN
12070: IFFALSE 12187
// if GetClass ( eng ) = class_engineer and IsOK ( eng ) and building and not GetSide ( building ) = GetSide ( eng ) then
12072: LD_VAR 0 4
12076: PPUSH
12077: CALL_OW 257
12081: PUSH
12082: LD_INT 2
12084: EQUAL
12085: PUSH
12086: LD_VAR 0 4
12090: PPUSH
12091: CALL_OW 302
12095: AND
12096: PUSH
12097: LD_VAR 0 2
12101: AND
12102: PUSH
12103: LD_VAR 0 2
12107: PPUSH
12108: CALL_OW 255
12112: PUSH
12113: LD_VAR 0 4
12117: PPUSH
12118: CALL_OW 255
12122: EQUAL
12123: NOT
12124: AND
12125: IFFALSE 12185
// AddTaskList ( eng , [ [ e , GetX ( building ) , GetY ( building ) , building , 0 , 0 , 0 ] ] ) end ;
12127: LD_VAR 0 4
12131: PPUSH
12132: LD_STRING e
12134: PUSH
12135: LD_VAR 0 2
12139: PPUSH
12140: CALL_OW 250
12144: PUSH
12145: LD_VAR 0 2
12149: PPUSH
12150: CALL_OW 251
12154: PUSH
12155: LD_VAR 0 2
12159: PUSH
12160: LD_INT 0
12162: PUSH
12163: LD_INT 0
12165: PUSH
12166: LD_INT 0
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: PUSH
12178: EMPTY
12179: LIST
12180: PPUSH
12181: CALL_OW 447
12185: GO 12069
12187: POP
12188: POP
12189: LD_VAR 0 3
12193: RET
// export function Delete2D ( tab , firstIndex , secondIndex ) ; var i , list , tabPom ; begin
12194: LD_INT 0
12196: PPUSH
12197: PPUSH
12198: PPUSH
12199: PPUSH
// tabPom := Delete ( tab [ firstIndex ] , secondIndex ) ;
12200: LD_ADDR_VAR 0 7
12204: PUSH
12205: LD_VAR 0 1
12209: PUSH
12210: LD_VAR 0 2
12214: ARRAY
12215: PPUSH
12216: LD_VAR 0 3
12220: PPUSH
12221: CALL_OW 3
12225: ST_TO_ADDR
// tab := Replace ( tab , firstIndex , tabPom ) ;
12226: LD_ADDR_VAR 0 1
12230: PUSH
12231: LD_VAR 0 1
12235: PPUSH
12236: LD_VAR 0 2
12240: PPUSH
12241: LD_VAR 0 7
12245: PPUSH
12246: CALL_OW 1
12250: ST_TO_ADDR
// result := tab ;
12251: LD_ADDR_VAR 0 4
12255: PUSH
12256: LD_VAR 0 1
12260: ST_TO_ADDR
// end ;
12261: LD_VAR 0 4
12265: RET
// export function Nef_PrepareBase ( base_dep , area , name , skill , sources , nation , personel ) ; var i , j , d , b , f , x , un , base , side , buildings , tmp ; begin
12266: LD_INT 0
12268: PPUSH
12269: PPUSH
12270: PPUSH
12271: PPUSH
12272: PPUSH
12273: PPUSH
12274: PPUSH
12275: PPUSH
12276: PPUSH
12277: PPUSH
12278: PPUSH
12279: PPUSH
// result := [ ] ;
12280: LD_ADDR_VAR 0 8
12284: PUSH
12285: EMPTY
12286: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12287: LD_VAR 0 1
12291: PPUSH
12292: CALL_OW 266
12296: PUSH
12297: LD_INT 0
12299: PUSH
12300: LD_INT 1
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: IN
12307: NOT
12308: IFFALSE 12312
// exit ;
12310: GO 13987
// if name then
12312: LD_VAR 0 3
12316: IFFALSE 12332
// SetBName ( base_dep , name ) ;
12318: LD_VAR 0 1
12322: PPUSH
12323: LD_VAR 0 3
12327: PPUSH
12328: CALL_OW 500
// base := GetBase ( base_dep ) ;
12332: LD_ADDR_VAR 0 16
12336: PUSH
12337: LD_VAR 0 1
12341: PPUSH
12342: CALL_OW 274
12346: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12347: LD_ADDR_VAR 0 17
12351: PUSH
12352: LD_VAR 0 1
12356: PPUSH
12357: CALL_OW 255
12361: ST_TO_ADDR
// if sources then
12362: LD_VAR 0 5
12366: IFFALSE 12413
// for i = 1 to 3 do
12368: LD_ADDR_VAR 0 9
12372: PUSH
12373: DOUBLE
12374: LD_INT 1
12376: DEC
12377: ST_TO_ADDR
12378: LD_INT 3
12380: PUSH
12381: FOR_TO
12382: IFFALSE 12411
// AddResourceType ( base , i , sources [ i ] ) ;
12384: LD_VAR 0 16
12388: PPUSH
12389: LD_VAR 0 9
12393: PPUSH
12394: LD_VAR 0 5
12398: PUSH
12399: LD_VAR 0 9
12403: ARRAY
12404: PPUSH
12405: CALL_OW 276
12409: GO 12381
12411: POP
12412: POP
// buildings := GetBaseBuildings ( base , area ) ;
12413: LD_ADDR_VAR 0 18
12417: PUSH
12418: LD_VAR 0 16
12422: PPUSH
12423: LD_VAR 0 2
12427: PPUSH
12428: CALL 48536 0 2
12432: ST_TO_ADDR
// InitHc ;
12433: CALL_OW 19
// InitUc ;
12437: CALL_OW 18
// uc_side := side ;
12441: LD_ADDR_OWVAR 20
12445: PUSH
12446: LD_VAR 0 17
12450: ST_TO_ADDR
// uc_nation := nation ;
12451: LD_ADDR_OWVAR 21
12455: PUSH
12456: LD_VAR 0 6
12460: ST_TO_ADDR
// if buildings then
12461: LD_VAR 0 18
12465: IFFALSE 13846
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12467: LD_ADDR_VAR 0 19
12471: PUSH
12472: LD_VAR 0 18
12476: PPUSH
12477: LD_INT 2
12479: PUSH
12480: LD_INT 30
12482: PUSH
12483: LD_INT 29
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: LD_INT 30
12492: PUSH
12493: LD_INT 30
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: LIST
12504: PPUSH
12505: CALL_OW 72
12509: ST_TO_ADDR
// if tmp then
12510: LD_VAR 0 19
12514: IFFALSE 12562
// for i in tmp do
12516: LD_ADDR_VAR 0 9
12520: PUSH
12521: LD_VAR 0 19
12525: PUSH
12526: FOR_IN
12527: IFFALSE 12560
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12529: LD_VAR 0 9
12533: PPUSH
12534: CALL_OW 250
12538: PPUSH
12539: LD_VAR 0 9
12543: PPUSH
12544: CALL_OW 251
12548: PPUSH
12549: LD_VAR 0 17
12553: PPUSH
12554: CALL_OW 441
12558: GO 12526
12560: POP
12561: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12562: LD_VAR 0 18
12566: PPUSH
12567: LD_INT 2
12569: PUSH
12570: LD_INT 30
12572: PUSH
12573: LD_INT 31
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PUSH
12580: LD_INT 30
12582: PUSH
12583: LD_INT 32
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PUSH
12590: LD_INT 30
12592: PUSH
12593: LD_INT 33
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: PPUSH
12606: CALL_OW 72
12610: IFFALSE 12709
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12612: LD_ADDR_VAR 0 9
12616: PUSH
12617: LD_VAR 0 18
12621: PPUSH
12622: LD_INT 2
12624: PUSH
12625: LD_INT 30
12627: PUSH
12628: LD_INT 31
12630: PUSH
12631: EMPTY
12632: LIST
12633: LIST
12634: PUSH
12635: LD_INT 30
12637: PUSH
12638: LD_INT 32
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: PUSH
12645: LD_INT 30
12647: PUSH
12648: LD_INT 33
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: PPUSH
12661: CALL_OW 72
12665: PUSH
12666: FOR_IN
12667: IFFALSE 12707
// begin if not GetBWeapon ( i ) then
12669: LD_VAR 0 9
12673: PPUSH
12674: CALL_OW 269
12678: NOT
12679: IFFALSE 12705
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12681: LD_VAR 0 9
12685: PPUSH
12686: LD_VAR 0 9
12690: PPUSH
12691: LD_VAR 0 2
12695: PPUSH
12696: CALL 50764 0 2
12700: PPUSH
12701: CALL_OW 431
// end ;
12705: GO 12666
12707: POP
12708: POP
// end ; for i = 1 to personel do
12709: LD_ADDR_VAR 0 9
12713: PUSH
12714: DOUBLE
12715: LD_INT 1
12717: DEC
12718: ST_TO_ADDR
12719: LD_VAR 0 7
12723: PUSH
12724: FOR_TO
12725: IFFALSE 13826
// begin if i > 4 then
12727: LD_VAR 0 9
12731: PUSH
12732: LD_INT 4
12734: GREATER
12735: IFFALSE 12739
// break ;
12737: GO 13826
// case i of 1 :
12739: LD_VAR 0 9
12743: PUSH
12744: LD_INT 1
12746: DOUBLE
12747: EQUAL
12748: IFTRUE 12752
12750: GO 12843
12752: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12753: LD_ADDR_VAR 0 13
12757: PUSH
12758: LD_VAR 0 18
12762: PPUSH
12763: LD_INT 22
12765: PUSH
12766: LD_VAR 0 17
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: PUSH
12775: LD_INT 58
12777: PUSH
12778: EMPTY
12779: LIST
12780: PUSH
12781: LD_INT 2
12783: PUSH
12784: LD_INT 30
12786: PUSH
12787: LD_INT 31
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: PUSH
12794: LD_INT 30
12796: PUSH
12797: LD_INT 32
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PUSH
12804: LD_INT 30
12806: PUSH
12807: LD_INT 4
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PUSH
12814: LD_INT 30
12816: PUSH
12817: LD_INT 5
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: LIST
12835: PPUSH
12836: CALL_OW 72
12840: ST_TO_ADDR
12841: GO 13076
12843: LD_INT 2
12845: DOUBLE
12846: EQUAL
12847: IFTRUE 12851
12849: GO 12913
12851: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12852: LD_ADDR_VAR 0 13
12856: PUSH
12857: LD_VAR 0 18
12861: PPUSH
12862: LD_INT 22
12864: PUSH
12865: LD_VAR 0 17
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: PUSH
12874: LD_INT 2
12876: PUSH
12877: LD_INT 30
12879: PUSH
12880: LD_INT 0
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: PUSH
12887: LD_INT 30
12889: PUSH
12890: LD_INT 1
12892: PUSH
12893: EMPTY
12894: LIST
12895: LIST
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: LIST
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: PPUSH
12906: CALL_OW 72
12910: ST_TO_ADDR
12911: GO 13076
12913: LD_INT 3
12915: DOUBLE
12916: EQUAL
12917: IFTRUE 12921
12919: GO 12994
12921: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_control_tower ] , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12922: LD_ADDR_VAR 0 13
12926: PUSH
12927: LD_VAR 0 18
12931: PPUSH
12932: LD_INT 22
12934: PUSH
12935: LD_VAR 0 17
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 2
12946: PUSH
12947: LD_INT 30
12949: PUSH
12950: LD_INT 36
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: PUSH
12957: LD_INT 30
12959: PUSH
12960: LD_INT 2
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: PUSH
12967: LD_INT 30
12969: PUSH
12970: LD_INT 3
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: PUSH
12977: EMPTY
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: PUSH
12983: EMPTY
12984: LIST
12985: LIST
12986: PPUSH
12987: CALL_OW 72
12991: ST_TO_ADDR
12992: GO 13076
12994: LD_INT 4
12996: DOUBLE
12997: EQUAL
12998: IFTRUE 13002
13000: GO 13075
13002: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13003: LD_ADDR_VAR 0 13
13007: PUSH
13008: LD_VAR 0 18
13012: PPUSH
13013: LD_INT 22
13015: PUSH
13016: LD_VAR 0 17
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: PUSH
13025: LD_INT 2
13027: PUSH
13028: LD_INT 30
13030: PUSH
13031: LD_INT 6
13033: PUSH
13034: EMPTY
13035: LIST
13036: LIST
13037: PUSH
13038: LD_INT 30
13040: PUSH
13041: LD_INT 7
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: PUSH
13048: LD_INT 30
13050: PUSH
13051: LD_INT 8
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PPUSH
13068: CALL_OW 72
13072: ST_TO_ADDR
13073: GO 13076
13075: POP
// if i = 1 then
13076: LD_VAR 0 9
13080: PUSH
13081: LD_INT 1
13083: EQUAL
13084: IFFALSE 13202
// begin tmp := [ ] ;
13086: LD_ADDR_VAR 0 19
13090: PUSH
13091: EMPTY
13092: ST_TO_ADDR
// for j in f do
13093: LD_ADDR_VAR 0 10
13097: PUSH
13098: LD_VAR 0 13
13102: PUSH
13103: FOR_IN
13104: IFFALSE 13184
// if GetBType ( j ) in [ b_breastwork , b_bunker ] then
13106: LD_VAR 0 10
13110: PPUSH
13111: CALL_OW 266
13115: PUSH
13116: LD_INT 31
13118: PUSH
13119: LD_INT 32
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: IN
13126: IFFALSE 13153
// tmp := Insert ( tmp , 1 , j ) else
13128: LD_ADDR_VAR 0 19
13132: PUSH
13133: LD_VAR 0 19
13137: PPUSH
13138: LD_INT 1
13140: PPUSH
13141: LD_VAR 0 10
13145: PPUSH
13146: CALL_OW 2
13150: ST_TO_ADDR
13151: GO 13182
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13153: LD_ADDR_VAR 0 19
13157: PUSH
13158: LD_VAR 0 19
13162: PPUSH
13163: LD_VAR 0 19
13167: PUSH
13168: LD_INT 1
13170: PLUS
13171: PPUSH
13172: LD_VAR 0 10
13176: PPUSH
13177: CALL_OW 2
13181: ST_TO_ADDR
13182: GO 13103
13184: POP
13185: POP
// if tmp then
13186: LD_VAR 0 19
13190: IFFALSE 13202
// f := tmp ;
13192: LD_ADDR_VAR 0 13
13196: PUSH
13197: LD_VAR 0 19
13201: ST_TO_ADDR
// end ; x := personel [ i ] ;
13202: LD_ADDR_VAR 0 14
13206: PUSH
13207: LD_VAR 0 7
13211: PUSH
13212: LD_VAR 0 9
13216: ARRAY
13217: ST_TO_ADDR
// if x = - 1 then
13218: LD_VAR 0 14
13222: PUSH
13223: LD_INT 1
13225: NEG
13226: EQUAL
13227: IFFALSE 13421
// begin for j in f do
13229: LD_ADDR_VAR 0 10
13233: PUSH
13234: LD_VAR 0 13
13238: PUSH
13239: FOR_IN
13240: IFFALSE 13417
// repeat InitHc ;
13242: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13246: LD_VAR 0 10
13250: PPUSH
13251: CALL_OW 266
13255: PUSH
13256: LD_INT 5
13258: EQUAL
13259: IFFALSE 13314
// begin if UnitsInside ( j ) < 3 then
13261: LD_VAR 0 10
13265: PPUSH
13266: CALL_OW 313
13270: PUSH
13271: LD_INT 3
13273: LESS
13274: IFFALSE 13295
// PrepareHuman ( false , i , skill ) else
13276: LD_INT 0
13278: PPUSH
13279: LD_VAR 0 9
13283: PPUSH
13284: LD_VAR 0 4
13288: PPUSH
13289: CALL_OW 380
13293: GO 13312
// PrepareHuman ( false , i , skill ) ;
13295: LD_INT 0
13297: PPUSH
13298: LD_VAR 0 9
13302: PPUSH
13303: LD_VAR 0 4
13307: PPUSH
13308: CALL_OW 380
// end else
13312: GO 13331
// PrepareHuman ( false , i , skill ) ;
13314: LD_INT 0
13316: PPUSH
13317: LD_VAR 0 9
13321: PPUSH
13322: LD_VAR 0 4
13326: PPUSH
13327: CALL_OW 380
// un := CreateHuman ;
13331: LD_ADDR_VAR 0 15
13335: PUSH
13336: CALL_OW 44
13340: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13341: LD_ADDR_VAR 0 8
13345: PUSH
13346: LD_VAR 0 8
13350: PPUSH
13351: LD_INT 1
13353: PPUSH
13354: LD_VAR 0 15
13358: PPUSH
13359: CALL_OW 2
13363: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13364: LD_VAR 0 15
13368: PPUSH
13369: LD_VAR 0 10
13373: PPUSH
13374: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13378: LD_VAR 0 10
13382: PPUSH
13383: CALL_OW 313
13387: PUSH
13388: LD_INT 6
13390: EQUAL
13391: PUSH
13392: LD_VAR 0 10
13396: PPUSH
13397: CALL_OW 266
13401: PUSH
13402: LD_INT 32
13404: PUSH
13405: LD_INT 31
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: IN
13412: OR
13413: IFFALSE 13242
13415: GO 13239
13417: POP
13418: POP
// end else
13419: GO 13824
// for j = 1 to x do
13421: LD_ADDR_VAR 0 10
13425: PUSH
13426: DOUBLE
13427: LD_INT 1
13429: DEC
13430: ST_TO_ADDR
13431: LD_VAR 0 14
13435: PUSH
13436: FOR_TO
13437: IFFALSE 13822
// begin InitHc ;
13439: CALL_OW 19
// if not f then
13443: LD_VAR 0 13
13447: NOT
13448: IFFALSE 13537
// begin PrepareHuman ( false , i , skill ) ;
13450: LD_INT 0
13452: PPUSH
13453: LD_VAR 0 9
13457: PPUSH
13458: LD_VAR 0 4
13462: PPUSH
13463: CALL_OW 380
// un := CreateHuman ;
13467: LD_ADDR_VAR 0 15
13471: PUSH
13472: CALL_OW 44
13476: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13477: LD_ADDR_VAR 0 8
13481: PUSH
13482: LD_VAR 0 8
13486: PPUSH
13487: LD_INT 1
13489: PPUSH
13490: LD_VAR 0 15
13494: PPUSH
13495: CALL_OW 2
13499: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13500: LD_VAR 0 15
13504: PPUSH
13505: LD_VAR 0 1
13509: PPUSH
13510: CALL_OW 250
13514: PPUSH
13515: LD_VAR 0 1
13519: PPUSH
13520: CALL_OW 251
13524: PPUSH
13525: LD_INT 10
13527: PPUSH
13528: LD_INT 0
13530: PPUSH
13531: CALL_OW 50
// continue ;
13535: GO 13436
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 3 and GetBType ( f [ 1 ] ) = b_control_tower ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13537: LD_VAR 0 13
13541: PUSH
13542: LD_INT 1
13544: ARRAY
13545: PPUSH
13546: CALL_OW 313
13550: PUSH
13551: LD_VAR 0 13
13555: PUSH
13556: LD_INT 1
13558: ARRAY
13559: PPUSH
13560: CALL_OW 266
13564: PUSH
13565: LD_INT 32
13567: PUSH
13568: LD_INT 31
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: IN
13575: AND
13576: PUSH
13577: LD_VAR 0 13
13581: PUSH
13582: LD_INT 1
13584: ARRAY
13585: PPUSH
13586: CALL_OW 313
13590: PUSH
13591: LD_INT 3
13593: EQUAL
13594: PUSH
13595: LD_VAR 0 13
13599: PUSH
13600: LD_INT 1
13602: ARRAY
13603: PPUSH
13604: CALL_OW 266
13608: PUSH
13609: LD_INT 36
13611: EQUAL
13612: AND
13613: OR
13614: PUSH
13615: LD_VAR 0 13
13619: PUSH
13620: LD_INT 1
13622: ARRAY
13623: PPUSH
13624: CALL_OW 313
13628: PUSH
13629: LD_INT 6
13631: EQUAL
13632: OR
13633: IFFALSE 13653
// f := Delete ( f , 1 ) ;
13635: LD_ADDR_VAR 0 13
13639: PUSH
13640: LD_VAR 0 13
13644: PPUSH
13645: LD_INT 1
13647: PPUSH
13648: CALL_OW 3
13652: ST_TO_ADDR
// if not f then
13653: LD_VAR 0 13
13657: NOT
13658: IFFALSE 13676
// begin x := x + 2 ;
13660: LD_ADDR_VAR 0 14
13664: PUSH
13665: LD_VAR 0 14
13669: PUSH
13670: LD_INT 2
13672: PLUS
13673: ST_TO_ADDR
// continue ;
13674: GO 13436
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13676: LD_VAR 0 13
13680: PUSH
13681: LD_INT 1
13683: ARRAY
13684: PPUSH
13685: CALL_OW 266
13689: PUSH
13690: LD_INT 5
13692: EQUAL
13693: IFFALSE 13752
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13695: LD_VAR 0 13
13699: PUSH
13700: LD_INT 1
13702: ARRAY
13703: PPUSH
13704: CALL_OW 313
13708: PUSH
13709: LD_INT 3
13711: LESS
13712: IFFALSE 13733
// PrepareHuman ( false , i , skill ) else
13714: LD_INT 0
13716: PPUSH
13717: LD_VAR 0 9
13721: PPUSH
13722: LD_VAR 0 4
13726: PPUSH
13727: CALL_OW 380
13731: GO 13750
// PrepareHuman ( false , i , skill ) ;
13733: LD_INT 0
13735: PPUSH
13736: LD_VAR 0 9
13740: PPUSH
13741: LD_VAR 0 4
13745: PPUSH
13746: CALL_OW 380
// end else
13750: GO 13769
// PrepareHuman ( false , i , skill ) ;
13752: LD_INT 0
13754: PPUSH
13755: LD_VAR 0 9
13759: PPUSH
13760: LD_VAR 0 4
13764: PPUSH
13765: CALL_OW 380
// un := CreateHuman ;
13769: LD_ADDR_VAR 0 15
13773: PUSH
13774: CALL_OW 44
13778: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13779: LD_ADDR_VAR 0 8
13783: PUSH
13784: LD_VAR 0 8
13788: PPUSH
13789: LD_INT 1
13791: PPUSH
13792: LD_VAR 0 15
13796: PPUSH
13797: CALL_OW 2
13801: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13802: LD_VAR 0 15
13806: PPUSH
13807: LD_VAR 0 13
13811: PUSH
13812: LD_INT 1
13814: ARRAY
13815: PPUSH
13816: CALL_OW 52
// end ;
13820: GO 13436
13822: POP
13823: POP
// end ;
13824: GO 12724
13826: POP
13827: POP
// result := result ^ buildings ;
13828: LD_ADDR_VAR 0 8
13832: PUSH
13833: LD_VAR 0 8
13837: PUSH
13838: LD_VAR 0 18
13842: ADD
13843: ST_TO_ADDR
// end else
13844: GO 13987
// begin for i = 1 to personel do
13846: LD_ADDR_VAR 0 9
13850: PUSH
13851: DOUBLE
13852: LD_INT 1
13854: DEC
13855: ST_TO_ADDR
13856: LD_VAR 0 7
13860: PUSH
13861: FOR_TO
13862: IFFALSE 13985
// begin if i > 4 then
13864: LD_VAR 0 9
13868: PUSH
13869: LD_INT 4
13871: GREATER
13872: IFFALSE 13876
// break ;
13874: GO 13985
// x := personel [ i ] ;
13876: LD_ADDR_VAR 0 14
13880: PUSH
13881: LD_VAR 0 7
13885: PUSH
13886: LD_VAR 0 9
13890: ARRAY
13891: ST_TO_ADDR
// if x = - 1 then
13892: LD_VAR 0 14
13896: PUSH
13897: LD_INT 1
13899: NEG
13900: EQUAL
13901: IFFALSE 13905
// continue ;
13903: GO 13861
// PrepareHuman ( false , i , skill ) ;
13905: LD_INT 0
13907: PPUSH
13908: LD_VAR 0 9
13912: PPUSH
13913: LD_VAR 0 4
13917: PPUSH
13918: CALL_OW 380
// un := CreateHuman ;
13922: LD_ADDR_VAR 0 15
13926: PUSH
13927: CALL_OW 44
13931: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13932: LD_VAR 0 15
13936: PPUSH
13937: LD_VAR 0 1
13941: PPUSH
13942: CALL_OW 250
13946: PPUSH
13947: LD_VAR 0 1
13951: PPUSH
13952: CALL_OW 251
13956: PPUSH
13957: LD_INT 10
13959: PPUSH
13960: LD_INT 0
13962: PPUSH
13963: CALL_OW 50
// result := result ^ un ;
13967: LD_ADDR_VAR 0 8
13971: PUSH
13972: LD_VAR 0 8
13976: PUSH
13977: LD_VAR 0 15
13981: ADD
13982: ST_TO_ADDR
// end ;
13983: GO 13861
13985: POP
13986: POP
// end ; end ;
13987: LD_VAR 0 8
13991: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
13992: LD_INT 0
13994: PPUSH
13995: PPUSH
13996: PPUSH
13997: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
13998: LD_ADDR_VAR 0 6
14002: PUSH
14003: LD_INT 34
14005: PUSH
14006: LD_INT 71
14008: PUSH
14009: LD_INT 70
14011: PUSH
14012: LD_INT 69
14014: PUSH
14015: LD_INT 39
14017: PUSH
14018: LD_INT 31
14020: PUSH
14021: LD_INT 14
14023: PUSH
14024: LD_INT 10
14026: PUSH
14027: LD_INT 40
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: ST_TO_ADDR
// resultWeapons = [ ] ;
14041: LD_ADDR_VAR 0 5
14045: PUSH
14046: EMPTY
14047: ST_TO_ADDR
// for i := 1 to weaponTechs do
14048: LD_ADDR_VAR 0 4
14052: PUSH
14053: DOUBLE
14054: LD_INT 1
14056: DEC
14057: ST_TO_ADDR
14058: LD_VAR 0 6
14062: PUSH
14063: FOR_TO
14064: IFFALSE 14251
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
14066: LD_VAR 0 6
14070: PUSH
14071: LD_VAR 0 4
14075: ARRAY
14076: PPUSH
14077: LD_VAR 0 2
14081: PPUSH
14082: CALL_OW 482
14086: PUSH
14087: LD_VAR 0 6
14091: PUSH
14092: LD_VAR 0 4
14096: ARRAY
14097: PPUSH
14098: LD_VAR 0 1
14102: PPUSH
14103: CALL_OW 321
14107: PUSH
14108: LD_INT 2
14110: EQUAL
14111: AND
14112: IFFALSE 14249
// case nation of nation_american :
14114: LD_VAR 0 2
14118: PUSH
14119: LD_INT 1
14121: DOUBLE
14122: EQUAL
14123: IFTRUE 14127
14125: GO 14162
14127: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
14128: LD_ADDR_VAR 0 5
14132: PUSH
14133: LD_VAR 0 5
14137: PUSH
14138: LD_VAR 0 6
14142: PUSH
14143: LD_VAR 0 4
14147: ARRAY
14148: PPUSH
14149: LD_VAR 0 2
14153: PPUSH
14154: CALL 14268 0 2
14158: ADD
14159: ST_TO_ADDR
14160: GO 14249
14162: LD_INT 2
14164: DOUBLE
14165: EQUAL
14166: IFTRUE 14170
14168: GO 14205
14170: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
14171: LD_ADDR_VAR 0 5
14175: PUSH
14176: LD_VAR 0 5
14180: PUSH
14181: LD_VAR 0 6
14185: PUSH
14186: LD_VAR 0 4
14190: ARRAY
14191: PPUSH
14192: LD_VAR 0 2
14196: PPUSH
14197: CALL 14268 0 2
14201: ADD
14202: ST_TO_ADDR
14203: GO 14249
14205: LD_INT 3
14207: DOUBLE
14208: EQUAL
14209: IFTRUE 14213
14211: GO 14248
14213: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
14214: LD_ADDR_VAR 0 5
14218: PUSH
14219: LD_VAR 0 5
14223: PUSH
14224: LD_VAR 0 6
14228: PUSH
14229: LD_VAR 0 4
14233: ARRAY
14234: PPUSH
14235: LD_VAR 0 2
14239: PPUSH
14240: CALL 14268 0 2
14244: ADD
14245: ST_TO_ADDR
14246: GO 14249
14248: POP
// end ;
14249: GO 14063
14251: POP
14252: POP
// result = resultWeapons ;
14253: LD_ADDR_VAR 0 3
14257: PUSH
14258: LD_VAR 0 5
14262: ST_TO_ADDR
// end ;
14263: LD_VAR 0 3
14267: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
14268: LD_INT 0
14270: PPUSH
// case tech of tech_AdvMet :
14271: LD_VAR 0 1
14275: PUSH
14276: LD_INT 34
14278: DOUBLE
14279: EQUAL
14280: IFTRUE 14284
14282: GO 14312
14284: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
14285: LD_ADDR_VAR 0 3
14289: PUSH
14290: LD_INT 6
14292: PUSH
14293: LD_STRING 
14295: PUSH
14296: LD_INT 46
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: PUSH
14304: LD_VAR 0 2
14308: ARRAY
14309: ST_TO_ADDR
14310: GO 14601
14312: LD_INT 71
14314: DOUBLE
14315: EQUAL
14316: IFTRUE 14320
14318: GO 14348
14320: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
14321: LD_ADDR_VAR 0 3
14325: PUSH
14326: LD_STRING 
14328: PUSH
14329: LD_STRING 
14331: PUSH
14332: LD_INT 47
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: LIST
14339: PUSH
14340: LD_VAR 0 2
14344: ARRAY
14345: ST_TO_ADDR
14346: GO 14601
14348: LD_INT 70
14350: DOUBLE
14351: EQUAL
14352: IFTRUE 14356
14354: GO 14384
14356: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
14357: LD_ADDR_VAR 0 3
14361: PUSH
14362: LD_STRING 
14364: PUSH
14365: LD_INT 26
14367: PUSH
14368: LD_STRING 
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: LIST
14375: PUSH
14376: LD_VAR 0 2
14380: ARRAY
14381: ST_TO_ADDR
14382: GO 14601
14384: LD_INT 69
14386: DOUBLE
14387: EQUAL
14388: IFTRUE 14392
14390: GO 14420
14392: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
14393: LD_ADDR_VAR 0 3
14397: PUSH
14398: LD_INT 4
14400: PUSH
14401: LD_INT 25
14403: PUSH
14404: LD_INT 43
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: LIST
14411: PUSH
14412: LD_VAR 0 2
14416: ARRAY
14417: ST_TO_ADDR
14418: GO 14601
14420: LD_INT 39
14422: DOUBLE
14423: EQUAL
14424: IFTRUE 14428
14426: GO 14456
14428: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
14429: LD_ADDR_VAR 0 3
14433: PUSH
14434: LD_INT 5
14436: PUSH
14437: LD_INT 27
14439: PUSH
14440: LD_INT 44
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: LIST
14447: PUSH
14448: LD_VAR 0 2
14452: ARRAY
14453: ST_TO_ADDR
14454: GO 14601
14456: LD_INT 31
14458: DOUBLE
14459: EQUAL
14460: IFTRUE 14464
14462: GO 14492
14464: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
14465: LD_ADDR_VAR 0 3
14469: PUSH
14470: LD_STRING 
14472: PUSH
14473: LD_STRING 
14475: PUSH
14476: LD_INT 49
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: LIST
14483: PUSH
14484: LD_VAR 0 2
14488: ARRAY
14489: ST_TO_ADDR
14490: GO 14601
14492: LD_INT 14
14494: DOUBLE
14495: EQUAL
14496: IFTRUE 14500
14498: GO 14528
14500: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
14501: LD_ADDR_VAR 0 3
14505: PUSH
14506: LD_INT 10
14508: PUSH
14509: LD_STRING 
14511: PUSH
14512: LD_STRING 
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: LIST
14519: PUSH
14520: LD_VAR 0 2
14524: ARRAY
14525: ST_TO_ADDR
14526: GO 14601
14528: LD_INT 10
14530: DOUBLE
14531: EQUAL
14532: IFTRUE 14536
14534: GO 14564
14536: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
14537: LD_ADDR_VAR 0 3
14541: PUSH
14542: LD_INT 9
14544: PUSH
14545: LD_STRING 
14547: PUSH
14548: LD_STRING 
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: LIST
14555: PUSH
14556: LD_VAR 0 2
14560: ARRAY
14561: ST_TO_ADDR
14562: GO 14601
14564: LD_INT 40
14566: DOUBLE
14567: EQUAL
14568: IFTRUE 14572
14570: GO 14600
14572: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
14573: LD_ADDR_VAR 0 3
14577: PUSH
14578: LD_INT 7
14580: PUSH
14581: LD_INT 28
14583: PUSH
14584: LD_INT 45
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: LIST
14591: PUSH
14592: LD_VAR 0 2
14596: ARRAY
14597: ST_TO_ADDR
14598: GO 14601
14600: POP
// end ;
14601: LD_VAR 0 3
14605: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
14606: LD_INT 0
14608: PPUSH
14609: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
14610: LD_ADDR_VAR 0 2
14614: PUSH
14615: LD_VAR 0 1
14619: PPUSH
14620: LD_INT 1
14622: PPUSH
14623: CALL_OW 289
14627: PUSH
14628: LD_VAR 0 1
14632: PPUSH
14633: LD_INT 2
14635: PPUSH
14636: CALL_OW 289
14640: PUSH
14641: LD_VAR 0 1
14645: PPUSH
14646: LD_INT 3
14648: PPUSH
14649: CALL_OW 289
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: LIST
14658: ST_TO_ADDR
// end ;
14659: LD_VAR 0 2
14663: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
14664: LD_INT 0
14666: PPUSH
14667: PPUSH
// area = ListEnvironmentArea ( area ) ;
14668: LD_ADDR_VAR 0 2
14672: PUSH
14673: LD_VAR 0 2
14677: PPUSH
14678: CALL_OW 353
14682: ST_TO_ADDR
// if bulldozer > 0 then
14683: LD_VAR 0 1
14687: PUSH
14688: LD_INT 0
14690: GREATER
14691: IFFALSE 14802
// for i = area downto 1 do
14693: LD_ADDR_VAR 0 4
14697: PUSH
14698: DOUBLE
14699: LD_VAR 0 2
14703: INC
14704: ST_TO_ADDR
14705: LD_INT 1
14707: PUSH
14708: FOR_DOWNTO
14709: IFFALSE 14800
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
14711: LD_VAR 0 2
14715: PUSH
14716: LD_VAR 0 4
14720: ARRAY
14721: PUSH
14722: LD_INT 1
14724: ARRAY
14725: PPUSH
14726: LD_VAR 0 2
14730: PUSH
14731: LD_VAR 0 4
14735: ARRAY
14736: PUSH
14737: LD_INT 2
14739: ARRAY
14740: PPUSH
14741: CALL_OW 351
14745: IFFALSE 14798
// if not HasTask ( bulldozer ) then
14747: LD_VAR 0 1
14751: PPUSH
14752: CALL_OW 314
14756: NOT
14757: IFFALSE 14798
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
14759: LD_VAR 0 1
14763: PPUSH
14764: LD_VAR 0 2
14768: PUSH
14769: LD_VAR 0 4
14773: ARRAY
14774: PUSH
14775: LD_INT 1
14777: ARRAY
14778: PPUSH
14779: LD_VAR 0 2
14783: PUSH
14784: LD_VAR 0 4
14788: ARRAY
14789: PUSH
14790: LD_INT 2
14792: ARRAY
14793: PPUSH
14794: CALL_OW 171
14798: GO 14708
14800: POP
14801: POP
// end ;
14802: LD_VAR 0 3
14806: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
14807: LD_INT 0
14809: PPUSH
14810: PPUSH
14811: PPUSH
// uc_side := GetSide ( b ) ;
14812: LD_ADDR_OWVAR 20
14816: PUSH
14817: LD_VAR 0 2
14821: PPUSH
14822: CALL_OW 255
14826: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
14827: LD_ADDR_OWVAR 21
14831: PUSH
14832: LD_VAR 0 2
14836: PPUSH
14837: CALL_OW 248
14841: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
14842: LD_INT 0
14844: PPUSH
14845: LD_INT 1
14847: PPUSH
14848: LD_VAR 0 1
14852: PPUSH
14853: CALL_OW 380
// un = CreateHuman ;
14857: LD_ADDR_VAR 0 4
14861: PUSH
14862: CALL_OW 44
14866: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
14867: LD_ADDR_VAR 0 5
14871: PUSH
14872: LD_VAR 0 2
14876: PPUSH
14877: CALL_OW 254
14881: PUSH
14882: LD_INT 3
14884: MINUS
14885: ST_TO_ADDR
// if dir < 0 then
14886: LD_VAR 0 5
14890: PUSH
14891: LD_INT 0
14893: LESS
14894: IFFALSE 14910
// dir := 6 + dir ;
14896: LD_ADDR_VAR 0 5
14900: PUSH
14901: LD_INT 6
14903: PUSH
14904: LD_VAR 0 5
14908: PLUS
14909: ST_TO_ADDR
// SetDir ( un , dir ) ;
14910: LD_VAR 0 4
14914: PPUSH
14915: LD_VAR 0 5
14919: PPUSH
14920: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
14924: LD_VAR 0 4
14928: PPUSH
14929: LD_VAR 0 2
14933: PPUSH
14934: CALL_OW 52
// result = un ;
14938: LD_ADDR_VAR 0 3
14942: PUSH
14943: LD_VAR 0 4
14947: ST_TO_ADDR
// end ;
14948: LD_VAR 0 3
14952: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others , max , test1 , test2 ; begin
14953: LD_INT 0
14955: PPUSH
14956: PPUSH
14957: PPUSH
14958: PPUSH
14959: PPUSH
14960: PPUSH
14961: PPUSH
14962: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Burlak , Vsevolod ] ;
14963: LD_ADDR_VAR 0 3
14967: PUSH
14968: LD_INT 22
14970: PUSH
14971: LD_INT 3
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 21
14980: PUSH
14981: LD_INT 1
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 23
14990: PUSH
14991: LD_INT 3
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: LIST
15002: PPUSH
15003: CALL_OW 69
15007: PUSH
15008: LD_EXP 39
15012: PUSH
15013: LD_EXP 51
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: DIFF
15022: ST_TO_ADDR
// charsToChoose = charsToChoose diff vsevolodTeam ;
15023: LD_ADDR_VAR 0 3
15027: PUSH
15028: LD_VAR 0 3
15032: PUSH
15033: LD_EXP 52
15037: DIFF
15038: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam diff Vsevolod ;
15039: LD_ADDR_EXP 52
15043: PUSH
15044: LD_EXP 52
15048: PUSH
15049: LD_EXP 51
15053: DIFF
15054: ST_TO_ADDR
// max = charsToChoose div 2 + charsToChoose mod 2 ;
15055: LD_ADDR_VAR 0 6
15059: PUSH
15060: LD_VAR 0 3
15064: PUSH
15065: LD_INT 2
15067: DIV
15068: PUSH
15069: LD_VAR 0 3
15073: PUSH
15074: LD_INT 2
15076: MOD
15077: PLUS
15078: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 0 , 3 , [ Burlak , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_not_hired ] ^ vsevolodTeam ^ [ sel_not_changeable , Vsevolod ] , [ class_soldier , class_mechanic , class_engineer , class_scientistic ] ) ;
15079: LD_ADDR_VAR 0 4
15083: PUSH
15084: LD_STRING text
15086: PPUSH
15087: LD_INT 0
15089: PPUSH
15090: LD_INT 3
15092: PPUSH
15093: LD_EXP 39
15097: PUSH
15098: LD_INT -3
15100: PUSH
15101: LD_INT -5
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: LIST
15108: PUSH
15109: LD_VAR 0 3
15113: ADD
15114: PUSH
15115: LD_INT -2
15117: PUSH
15118: EMPTY
15119: LIST
15120: ADD
15121: PUSH
15122: LD_EXP 52
15126: ADD
15127: PUSH
15128: LD_INT -4
15130: PUSH
15131: LD_EXP 51
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: ADD
15140: PPUSH
15141: LD_INT 1
15143: PUSH
15144: LD_INT 3
15146: PUSH
15147: LD_INT 2
15149: PUSH
15150: LD_INT 4
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: PPUSH
15159: CALL_OW 42
15163: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) , 6 ) ;
15164: LD_INT 22
15166: PUSH
15167: LD_INT 3
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: LD_INT 21
15176: PUSH
15177: LD_INT 1
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PUSH
15184: LD_INT 23
15186: PUSH
15187: LD_INT 3
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: LIST
15198: PPUSH
15199: CALL_OW 69
15203: PPUSH
15204: LD_INT 6
15206: PPUSH
15207: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
15211: LD_VAR 0 4
15215: PPUSH
15216: LD_INT 3
15218: PPUSH
15219: CALL_OW 235
// SetSide ( Burlak , 3 ) ;
15223: LD_EXP 39
15227: PPUSH
15228: LD_INT 3
15230: PPUSH
15231: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
15235: LD_ADDR_VAR 0 2
15239: PUSH
15240: LD_INT 22
15242: PUSH
15243: LD_INT 6
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PUSH
15250: LD_INT 21
15252: PUSH
15253: LD_INT 1
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: PPUSH
15264: CALL_OW 69
15268: PUSH
15269: FOR_IN
15270: IFFALSE 15303
// if IsInUnit ( i ) then
15272: LD_VAR 0 2
15276: PPUSH
15277: CALL_OW 310
15281: IFFALSE 15301
// begin ComExitVehicle ( i ) ;
15283: LD_VAR 0 2
15287: PPUSH
15288: CALL_OW 121
// ComExitBuilding ( i ) ;
15292: LD_VAR 0 2
15296: PPUSH
15297: CALL_OW 122
// end ;
15301: GO 15269
15303: POP
15304: POP
// if not Vsevolod in selectedPeople then
15305: LD_EXP 51
15309: PUSH
15310: LD_VAR 0 4
15314: IN
15315: NOT
15316: IFFALSE 15333
// ExtSaveCharacter ( Vsevolod , Vsevolod , 6 ) ;
15318: LD_EXP 51
15322: PPUSH
15323: LD_STRING Vsevolod
15325: PPUSH
15326: LD_INT 6
15328: PPUSH
15329: CALL 11483 0 3
// if not Karamazov in selectedPeople then
15333: LD_EXP 40
15337: PUSH
15338: LD_VAR 0 4
15342: IN
15343: NOT
15344: IFFALSE 15361
// ExtSaveCharacter ( Karamazov , VSKaramazov , 6 ) ;
15346: LD_EXP 40
15350: PPUSH
15351: LD_STRING VSKaramazov
15353: PPUSH
15354: LD_INT 6
15356: PPUSH
15357: CALL 11483 0 3
// if not Petrovova in selectedPeople then
15361: LD_EXP 41
15365: PUSH
15366: LD_VAR 0 4
15370: IN
15371: NOT
15372: IFFALSE 15389
// ExtSaveCharacter ( Petrovova , VSPetrovova , 6 ) ;
15374: LD_EXP 41
15378: PPUSH
15379: LD_STRING VSPetrovova
15381: PPUSH
15382: LD_INT 6
15384: PPUSH
15385: CALL 11483 0 3
// if not Gleb in selectedPeople then
15389: LD_EXP 42
15393: PUSH
15394: LD_VAR 0 4
15398: IN
15399: NOT
15400: IFFALSE 15417
// ExtSaveCharacter ( Gleb , VSGleb , 6 ) ;
15402: LD_EXP 42
15406: PPUSH
15407: LD_STRING VSGleb
15409: PPUSH
15410: LD_INT 6
15412: PPUSH
15413: CALL 11483 0 3
// if not Petrosyan in selectedPeople then
15417: LD_EXP 43
15421: PUSH
15422: LD_VAR 0 4
15426: IN
15427: NOT
15428: IFFALSE 15445
// ExtSaveCharacter ( Petrosyan , VSPetrosyan , 6 ) ;
15430: LD_EXP 43
15434: PPUSH
15435: LD_STRING VSPetrosyan
15437: PPUSH
15438: LD_INT 6
15440: PPUSH
15441: CALL 11483 0 3
// if not Titov in selectedPeople then
15445: LD_EXP 44
15449: PUSH
15450: LD_VAR 0 4
15454: IN
15455: NOT
15456: IFFALSE 15473
// ExtSaveCharacter ( Titov , VSTitov , 6 ) ;
15458: LD_EXP 44
15462: PPUSH
15463: LD_STRING VSTitov
15465: PPUSH
15466: LD_INT 6
15468: PPUSH
15469: CALL 11483 0 3
// if not Dolgov in selectedPeople then
15473: LD_EXP 45
15477: PUSH
15478: LD_VAR 0 4
15482: IN
15483: NOT
15484: IFFALSE 15501
// ExtSaveCharacter ( Dolgov , VSDolgov , 6 ) ;
15486: LD_EXP 45
15490: PPUSH
15491: LD_STRING VSDolgov
15493: PPUSH
15494: LD_INT 6
15496: PPUSH
15497: CALL 11483 0 3
// if not Lipshchin in selectedPeople then
15501: LD_EXP 46
15505: PUSH
15506: LD_VAR 0 4
15510: IN
15511: NOT
15512: IFFALSE 15529
// ExtSaveCharacter ( Lipshchin , VSLipshchin , 6 ) ;
15514: LD_EXP 46
15518: PPUSH
15519: LD_STRING VSLipshchin
15521: PPUSH
15522: LD_INT 6
15524: PPUSH
15525: CALL 11483 0 3
// others = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod ] ;
15529: LD_ADDR_VAR 0 5
15533: PUSH
15534: LD_INT 22
15536: PUSH
15537: LD_INT 6
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PUSH
15544: LD_INT 21
15546: PUSH
15547: LD_INT 1
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: PUSH
15554: LD_INT 23
15556: PUSH
15557: LD_INT 3
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: LIST
15568: PPUSH
15569: CALL_OW 69
15573: PUSH
15574: LD_EXP 40
15578: PUSH
15579: LD_EXP 41
15583: PUSH
15584: LD_EXP 42
15588: PUSH
15589: LD_EXP 43
15593: PUSH
15594: LD_EXP 44
15598: PUSH
15599: LD_EXP 45
15603: PUSH
15604: LD_EXP 46
15608: PUSH
15609: LD_EXP 51
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: DIFF
15624: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_vsevolod , 6 ) ;
15625: LD_VAR 0 5
15629: PPUSH
15630: LD_STRING other_survivors_with_vsevolod
15632: PPUSH
15633: LD_INT 6
15635: PPUSH
15636: CALL 11539 0 3
// end ; end_of_file
15640: LD_VAR 0 1
15644: RET
// export function MissionIntro ; var i , ruEng , unit ; begin
15645: LD_INT 0
15647: PPUSH
15648: PPUSH
15649: PPUSH
15650: PPUSH
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) ;
15651: LD_EXP 39
15655: PPUSH
15656: CALL_OW 310
15660: PPUSH
15661: CALL_OW 87
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
15665: LD_ADDR_VAR 0 4
15669: PUSH
15670: LD_INT 22
15672: PUSH
15673: LD_INT 3
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: LD_INT 21
15682: PUSH
15683: LD_INT 2
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PPUSH
15694: CALL_OW 69
15698: PUSH
15699: FOR_IN
15700: IFFALSE 15764
// begin if ( i mod 2 ) = 0 then
15702: LD_VAR 0 2
15706: PUSH
15707: LD_INT 2
15709: MOD
15710: PUSH
15711: LD_INT 0
15713: EQUAL
15714: IFFALSE 15733
// ComMoveXY ( unit , 150 , 212 ) else
15716: LD_VAR 0 4
15720: PPUSH
15721: LD_INT 150
15723: PPUSH
15724: LD_INT 212
15726: PPUSH
15727: CALL_OW 111
15731: GO 15748
// ComMoveXY ( unit , 160 , 215 ) ;
15733: LD_VAR 0 4
15737: PPUSH
15738: LD_INT 160
15740: PPUSH
15741: LD_INT 215
15743: PPUSH
15744: CALL_OW 111
// i = i + 1 ;
15748: LD_ADDR_VAR 0 2
15752: PUSH
15753: LD_VAR 0 2
15757: PUSH
15758: LD_INT 1
15760: PLUS
15761: ST_TO_ADDR
// end ;
15762: GO 15699
15764: POP
15765: POP
// if IsOK ( Karamazov ) then
15766: LD_EXP 40
15770: PPUSH
15771: CALL_OW 302
15775: IFFALSE 15789
// ruEng = Karamazov else
15777: LD_ADDR_VAR 0 3
15781: PUSH
15782: LD_EXP 40
15786: ST_TO_ADDR
15787: GO 15872
// if IsOK ( Lipshchin ) then
15789: LD_EXP 46
15793: PPUSH
15794: CALL_OW 302
15798: IFFALSE 15812
// ruEng = Lipshchin else
15800: LD_ADDR_VAR 0 3
15804: PUSH
15805: LD_EXP 46
15809: ST_TO_ADDR
15810: GO 15872
// ruEng = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_class , class_engineer ] ] ) [ 1 ] ;
15812: LD_ADDR_VAR 0 3
15816: PUSH
15817: LD_INT 22
15819: PUSH
15820: LD_INT 3
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PUSH
15827: LD_INT 21
15829: PUSH
15830: LD_INT 1
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PUSH
15837: LD_INT 23
15839: PUSH
15840: LD_INT 3
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: LD_INT 25
15849: PUSH
15850: LD_INT 2
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: PPUSH
15863: CALL_OW 69
15867: PUSH
15868: LD_INT 1
15870: ARRAY
15871: ST_TO_ADDR
// repeat ComMoveXY ( IsInUnit ( ruEng ) , 149 , 212 ) ;
15872: LD_VAR 0 3
15876: PPUSH
15877: CALL_OW 310
15881: PPUSH
15882: LD_INT 149
15884: PPUSH
15885: LD_INT 212
15887: PPUSH
15888: CALL_OW 111
// wait ( 0 0$1 ) ;
15892: LD_INT 35
15894: PPUSH
15895: CALL_OW 67
// until GetDistUnitXY ( IsInUnit ( ruEng ) , 149 , 212 ) <= 2 ;
15899: LD_VAR 0 3
15903: PPUSH
15904: CALL_OW 310
15908: PPUSH
15909: LD_INT 149
15911: PPUSH
15912: LD_INT 212
15914: PPUSH
15915: CALL_OW 297
15919: PUSH
15920: LD_INT 2
15922: LESSEQUAL
15923: IFFALSE 15872
// ComExitVehicle ( ruEng ) ;
15925: LD_VAR 0 3
15929: PPUSH
15930: CALL_OW 121
// wait ( 0 0$1 ) ;
15934: LD_INT 35
15936: PPUSH
15937: CALL_OW 67
// AddComCaptureBuilding ( ruEng , rudepot ) ;
15941: LD_VAR 0 3
15945: PPUSH
15946: LD_INT 74
15948: PPUSH
15949: CALL 12055 0 2
// repeat wait ( 0 0$1 ) ;
15953: LD_INT 35
15955: PPUSH
15956: CALL_OW 67
// until GetSide ( rudepot ) = 3 ;
15960: LD_INT 74
15962: PPUSH
15963: CALL_OW 255
15967: PUSH
15968: LD_INT 3
15970: EQUAL
15971: IFFALSE 15953
// ComEnterUnit ( ruEng , rudepot ) ;
15973: LD_VAR 0 3
15977: PPUSH
15978: LD_INT 74
15980: PPUSH
15981: CALL_OW 120
// wait ( 0 0$2 ) ;
15985: LD_INT 70
15987: PPUSH
15988: CALL_OW 67
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
15992: LD_INT 22
15994: PUSH
15995: LD_INT 6
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PPUSH
16002: CALL_OW 69
16006: PPUSH
16007: LD_INT 3
16009: PPUSH
16010: CALL_OW 235
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
16014: LD_ADDR_VAR 0 4
16018: PUSH
16019: LD_INT 22
16021: PUSH
16022: LD_INT 3
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: PUSH
16029: LD_INT 21
16031: PUSH
16032: LD_INT 1
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: PPUSH
16043: CALL_OW 69
16047: PUSH
16048: FOR_IN
16049: IFFALSE 16082
// if GetType ( IsInUnit ( unit ) ) = unit_vehicle then
16051: LD_VAR 0 4
16055: PPUSH
16056: CALL_OW 310
16060: PPUSH
16061: CALL_OW 247
16065: PUSH
16066: LD_INT 2
16068: EQUAL
16069: IFFALSE 16080
// ComExitVehicle ( unit ) ;
16071: LD_VAR 0 4
16075: PPUSH
16076: CALL_OW 121
16080: GO 16048
16082: POP
16083: POP
// if ruEng = Karamazov then
16084: LD_VAR 0 3
16088: PUSH
16089: LD_EXP 40
16093: EQUAL
16094: IFFALSE 16110
// Say ( Karamazov , DStart-Kar-1 ) else
16096: LD_EXP 40
16100: PPUSH
16101: LD_STRING DStart-Kar-1
16103: PPUSH
16104: CALL_OW 88
16108: GO 16134
// if ruEng = Lipshchin then
16110: LD_VAR 0 3
16114: PUSH
16115: LD_EXP 46
16119: EQUAL
16120: IFFALSE 16134
// Say ( Lipshchin , DStart-Lip-1 ) ;
16122: LD_EXP 46
16126: PPUSH
16127: LD_STRING DStart-Lip-1
16129: PPUSH
16130: CALL_OW 88
// ComExitBuilding ( ruEng ) ;
16134: LD_VAR 0 3
16138: PPUSH
16139: CALL_OW 122
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 250 ] ] ] ) do
16143: LD_ADDR_VAR 0 4
16147: PUSH
16148: LD_INT 22
16150: PUSH
16151: LD_INT 3
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PUSH
16158: LD_INT 21
16160: PUSH
16161: LD_INT 3
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PUSH
16168: LD_INT 3
16170: PUSH
16171: LD_INT 24
16173: PUSH
16174: LD_INT 250
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: LIST
16189: PPUSH
16190: CALL_OW 69
16194: PUSH
16195: FOR_IN
16196: IFFALSE 16249
// AddComRepairBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , unit ) ;
16198: LD_INT 22
16200: PUSH
16201: LD_INT 3
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 21
16210: PUSH
16211: LD_INT 1
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: LD_INT 25
16220: PUSH
16221: LD_INT 2
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: LIST
16232: PPUSH
16233: CALL_OW 69
16237: PPUSH
16238: LD_VAR 0 4
16242: PPUSH
16243: CALL_OW 190
16247: GO 16195
16249: POP
16250: POP
// Say ( Burlak , DStart-Bur-1 ) ;
16251: LD_EXP 39
16255: PPUSH
16256: LD_STRING DStart-Bur-1
16258: PPUSH
16259: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-1 ) ;
16263: LD_EXP 47
16267: PPUSH
16268: LD_STRING DStart-Pla-1
16270: PPUSH
16271: CALL_OW 94
// Say ( Burlak , DStart-Bur-2 ) ;
16275: LD_EXP 39
16279: PPUSH
16280: LD_STRING DStart-Bur-2
16282: PPUSH
16283: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-2 ) ;
16287: LD_EXP 47
16291: PPUSH
16292: LD_STRING DStart-Pla-2
16294: PPUSH
16295: CALL_OW 94
// if IsOK ( Petrovova ) then
16299: LD_EXP 41
16303: PPUSH
16304: CALL_OW 302
16308: IFFALSE 16322
// Say ( Petrovova , DStart-Ptr-2 ) ;
16310: LD_EXP 41
16314: PPUSH
16315: LD_STRING DStart-Ptr-2
16317: PPUSH
16318: CALL_OW 88
// InGameOff ;
16322: CALL_OW 9
// ChangeMissionObjectives ( MStart ) ;
16326: LD_STRING MStart
16328: PPUSH
16329: CALL_OW 337
// SaveForQuickRestart ;
16333: CALL_OW 22
// wait ( 0 0$10 ) ;
16337: LD_INT 350
16339: PPUSH
16340: CALL_OW 67
// if IsOK ( Petrosyan ) then
16344: LD_EXP 43
16348: PPUSH
16349: CALL_OW 302
16353: IFFALSE 16369
// Say ( Petrosyan , DMatPrediction-Pty-1 ) else
16355: LD_EXP 43
16359: PPUSH
16360: LD_STRING DMatPrediction-Pty-1
16362: PPUSH
16363: CALL_OW 88
16367: GO 16392
// if IsOK ( Dolgov ) then
16369: LD_EXP 45
16373: PPUSH
16374: CALL_OW 302
16378: IFFALSE 16392
// Say ( Dolgov , DMatPrediction-Dol-1 ) ;
16380: LD_EXP 45
16384: PPUSH
16385: LD_STRING DMatPrediction-Dol-1
16387: PPUSH
16388: CALL_OW 88
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16392: LD_EXP 43
16396: PPUSH
16397: CALL_OW 302
16401: PUSH
16402: LD_EXP 45
16406: PPUSH
16407: CALL_OW 302
16411: OR
16412: IFFALSE 16426
// Say ( Burlak , DMatPrediction-Bur-1 ) ;
16414: LD_EXP 39
16418: PPUSH
16419: LD_STRING DMatPrediction-Bur-1
16421: PPUSH
16422: CALL_OW 88
// if IsOK ( Petrosyan ) then
16426: LD_EXP 43
16430: PPUSH
16431: CALL_OW 302
16435: IFFALSE 16451
// Say ( Petrosyan , DMatPrediction-Pty-2 ) else
16437: LD_EXP 43
16441: PPUSH
16442: LD_STRING DMatPrediction-Pty-2
16444: PPUSH
16445: CALL_OW 88
16449: GO 16474
// if IsOK ( Dolgov ) then
16451: LD_EXP 45
16455: PPUSH
16456: CALL_OW 302
16460: IFFALSE 16474
// Say ( Dolgov , DMatPrediction-Dol-2 ) ;
16462: LD_EXP 45
16466: PPUSH
16467: LD_STRING DMatPrediction-Dol-2
16469: PPUSH
16470: CALL_OW 88
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16474: LD_EXP 43
16478: PPUSH
16479: CALL_OW 302
16483: PUSH
16484: LD_EXP 45
16488: PPUSH
16489: CALL_OW 302
16493: OR
16494: IFFALSE 16508
// Say ( Burlak , DMatPrediction-Bur-2 ) ;
16496: LD_EXP 39
16500: PPUSH
16501: LD_STRING DMatPrediction-Bur-2
16503: PPUSH
16504: CALL_OW 88
// if IsOK ( Petrosyan ) then
16508: LD_EXP 43
16512: PPUSH
16513: CALL_OW 302
16517: IFFALSE 16533
// Say ( Petrosyan , DMatPrediction-Pty-3 ) else
16519: LD_EXP 43
16523: PPUSH
16524: LD_STRING DMatPrediction-Pty-3
16526: PPUSH
16527: CALL_OW 88
16531: GO 16556
// if IsOK ( Dolgov ) then
16533: LD_EXP 45
16537: PPUSH
16538: CALL_OW 302
16542: IFFALSE 16556
// Say ( Dolgov , DMatPrediction-Dol-3 ) ;
16544: LD_EXP 45
16548: PPUSH
16549: LD_STRING DMatPrediction-Dol-3
16551: PPUSH
16552: CALL_OW 88
// ChangeMissionObjectives ( MPred ) ;
16556: LD_STRING MPred
16558: PPUSH
16559: CALL_OW 337
// end ;
16563: LD_VAR 0 1
16567: RET
// every 0 0$1 trigger not UnitFilter ( ovsyenkoBase , [ f_type , unit_human ] ) do
16568: LD_EXP 56
16572: PPUSH
16573: LD_INT 21
16575: PUSH
16576: LD_INT 1
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PPUSH
16583: CALL_OW 72
16587: NOT
16588: IFFALSE 16810
16590: GO 16592
16592: DISABLE
// begin DialogueOn ;
16593: CALL_OW 6
// Say ( Burlak , DOvsyenkoTaken-Bur-1 ) ;
16597: LD_EXP 39
16601: PPUSH
16602: LD_STRING DOvsyenkoTaken-Bur-1
16604: PPUSH
16605: CALL_OW 88
// SayRadio ( Platonov , DOvsyenkoTaken-Pla-1 ) ;
16609: LD_EXP 47
16613: PPUSH
16614: LD_STRING DOvsyenkoTaken-Pla-1
16616: PPUSH
16617: CALL_OW 94
// if IsOK ( Karamazov ) then
16621: LD_EXP 40
16625: PPUSH
16626: CALL_OW 302
16630: IFFALSE 16644
// Say ( Karamazov , DOvsyenkoTaken-Kar-1 ) ;
16632: LD_EXP 40
16636: PPUSH
16637: LD_STRING DOvsyenkoTaken-Kar-1
16639: PPUSH
16640: CALL_OW 88
// if IsOK ( Titov ) then
16644: LD_EXP 44
16648: PPUSH
16649: CALL_OW 302
16653: IFFALSE 16667
// Say ( Titov , DOvsyenkoTaken-Tit-1 ) ;
16655: LD_EXP 44
16659: PPUSH
16660: LD_STRING DOvsyenkoTaken-Tit-1
16662: PPUSH
16663: CALL_OW 88
// if IsOK ( Lipshchin ) and ( IsOK ( Karamazov ) or IsOK ( Titov ) ) then
16667: LD_EXP 46
16671: PPUSH
16672: CALL_OW 302
16676: PUSH
16677: LD_EXP 40
16681: PPUSH
16682: CALL_OW 302
16686: PUSH
16687: LD_EXP 44
16691: PPUSH
16692: CALL_OW 302
16696: OR
16697: AND
16698: IFFALSE 16735
// begin Say ( Lipshchin , DOvsyenkoTaken-Lip-1 ) ;
16700: LD_EXP 46
16704: PPUSH
16705: LD_STRING DOvsyenkoTaken-Lip-1
16707: PPUSH
16708: CALL_OW 88
// if IsOK ( Gleb ) then
16712: LD_EXP 42
16716: PPUSH
16717: CALL_OW 302
16721: IFFALSE 16735
// Say ( Gleb , DOvsyenkoTaken-Glb-1 ) ;
16723: LD_EXP 42
16727: PPUSH
16728: LD_STRING DOvsyenkoTaken-Glb-1
16730: PPUSH
16731: CALL_OW 88
// end ; DialogueOff ;
16735: CALL_OW 7
// ChangeMissionObjectives ( MOutCapture ) ;
16739: LD_STRING MOutCapture
16741: PPUSH
16742: CALL_OW 337
// ChangeMissionObjectives ( MAddMine ) ;
16746: LD_STRING MAddMine
16748: PPUSH
16749: CALL_OW 337
// claimOvsyenkoBase = true ;
16753: LD_ADDR_EXP 15
16757: PUSH
16758: LD_INT 1
16760: ST_TO_ADDR
// wait ( 1 1$10 ) ;
16761: LD_INT 2450
16763: PPUSH
16764: CALL_OW 67
// InitAIManager ( 1 , 1 , headAmBase , HeadAmericanBaseArea , HeadAmericanHealArea , false , HeadAmericanBaseArea , 6 , 2 , 4 , true , true ) ;
16768: LD_INT 1
16770: PPUSH
16771: LD_INT 1
16773: PPUSH
16774: LD_EXP 58
16778: PPUSH
16779: LD_INT 5
16781: PPUSH
16782: LD_INT 9
16784: PPUSH
16785: LD_INT 0
16787: PPUSH
16788: LD_INT 5
16790: PPUSH
16791: LD_INT 6
16793: PPUSH
16794: LD_INT 2
16796: PPUSH
16797: LD_INT 4
16799: PPUSH
16800: LD_INT 1
16802: PPUSH
16803: LD_INT 1
16805: PPUSH
16806: CALL 4828 0 12
// end ;
16810: END
// export function Dial_SibTechs ; begin
16811: LD_INT 0
16813: PPUSH
// dial_SibTechsBlocker = true ;
16814: LD_ADDR_EXP 9
16818: PUSH
16819: LD_INT 1
16821: ST_TO_ADDR
// DialogueOn ;
16822: CALL_OW 6
// if IsOK ( Petrosyan ) then
16826: LD_EXP 43
16830: PPUSH
16831: CALL_OW 302
16835: IFFALSE 16851
// Say ( Petrosyan , DSibResearch-Pty-1 ) else
16837: LD_EXP 43
16841: PPUSH
16842: LD_STRING DSibResearch-Pty-1
16844: PPUSH
16845: CALL_OW 88
16849: GO 16874
// if IsOK ( Dolgov ) then
16851: LD_EXP 45
16855: PPUSH
16856: CALL_OW 302
16860: IFFALSE 16874
// Say ( Dolgov , DSibResearch-Dol-1 ) ;
16862: LD_EXP 45
16866: PPUSH
16867: LD_STRING DSibResearch-Dol-1
16869: PPUSH
16870: CALL_OW 88
// Say ( Burlak , DSibResearch-Bur-1 ) ;
16874: LD_EXP 39
16878: PPUSH
16879: LD_STRING DSibResearch-Bur-1
16881: PPUSH
16882: CALL_OW 88
// SayRadio ( Platonov , DSibResearch-Pla-1 ) ;
16886: LD_EXP 47
16890: PPUSH
16891: LD_STRING DSibResearch-Pla-1
16893: PPUSH
16894: CALL_OW 94
// DialogueOff ;
16898: CALL_OW 7
// ChangeMissionObjectives ( MResearch ) ;
16902: LD_STRING MResearch
16904: PPUSH
16905: CALL_OW 337
// SetRestrict ( b_ext_siberium , 3 , true ) ;
16909: LD_INT 21
16911: PPUSH
16912: LD_INT 3
16914: PPUSH
16915: LD_INT 1
16917: PPUSH
16918: CALL_OW 324
// SetRestrict ( b_siberite_power , 3 , true ) ;
16922: LD_INT 28
16924: PPUSH
16925: LD_INT 3
16927: PPUSH
16928: LD_INT 1
16930: PPUSH
16931: CALL_OW 324
// SetRestrict ( b_lab_siberium , 3 , true ) ;
16935: LD_INT 11
16937: PPUSH
16938: LD_INT 3
16940: PPUSH
16941: LD_INT 1
16943: PPUSH
16944: CALL_OW 324
// SetRestrict ( b_lab_spacetime , 3 , true ) ;
16948: LD_INT 14
16950: PPUSH
16951: LD_INT 3
16953: PPUSH
16954: LD_INT 1
16956: PPUSH
16957: CALL_OW 324
// end ;
16961: LD_VAR 0 1
16965: RET
// export function Dial_ResearchMatPredictions ; begin
16966: LD_INT 0
16968: PPUSH
// ChangeMissionObjectives ( MOutResearch ) ;
16969: LD_STRING MOutResearch
16971: PPUSH
16972: CALL_OW 337
// DialogueOn ;
16976: CALL_OW 6
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16980: LD_EXP 43
16984: PPUSH
16985: CALL_OW 302
16989: PUSH
16990: LD_EXP 45
16994: PPUSH
16995: CALL_OW 302
16999: OR
17000: IFFALSE 17122
// begin if IsOK ( Petrosyan ) then
17002: LD_EXP 43
17006: PPUSH
17007: CALL_OW 302
17011: IFFALSE 17027
// Say ( Petrosyan , DNoMaterial-Pty-1 ) else
17013: LD_EXP 43
17017: PPUSH
17018: LD_STRING DNoMaterial-Pty-1
17020: PPUSH
17021: CALL_OW 88
17025: GO 17050
// if IsOK ( Dolgov ) then
17027: LD_EXP 45
17031: PPUSH
17032: CALL_OW 302
17036: IFFALSE 17050
// Say ( Dolgov , DNoMaterial-Dol-1 ) ;
17038: LD_EXP 45
17042: PPUSH
17043: LD_STRING DNoMaterial-Dol-1
17045: PPUSH
17046: CALL_OW 88
// Say ( Burlak , DNoMaterial-Bur-1 ) ;
17050: LD_EXP 39
17054: PPUSH
17055: LD_STRING DNoMaterial-Bur-1
17057: PPUSH
17058: CALL_OW 88
// if IsOK ( Petrosyan ) then
17062: LD_EXP 43
17066: PPUSH
17067: CALL_OW 302
17071: IFFALSE 17087
// Say ( Petrosyan , DNoMaterial-Pty-2 ) else
17073: LD_EXP 43
17077: PPUSH
17078: LD_STRING DNoMaterial-Pty-2
17080: PPUSH
17081: CALL_OW 88
17085: GO 17110
// if IsOK ( Dolgov ) then
17087: LD_EXP 45
17091: PPUSH
17092: CALL_OW 302
17096: IFFALSE 17110
// Say ( Dolgov , DNoMaterial-Dol-2 ) ;
17098: LD_EXP 45
17102: PPUSH
17103: LD_STRING DNoMaterial-Dol-2
17105: PPUSH
17106: CALL_OW 88
// Say ( Burlak , DNoMaterial-Bur-2 ) ;
17110: LD_EXP 39
17114: PPUSH
17115: LD_STRING DNoMaterial-Bur-2
17117: PPUSH
17118: CALL_OW 88
// end ; DialogueOff ;
17122: CALL_OW 7
// end ;
17126: LD_VAR 0 1
17130: RET
// every 0 0$1 trigger not dial_SibTechsBlocker and ( GetResourceVisibility ( 116 , 123 , 3 ) or GetResourceVisibility ( 72 , 86 , 3 ) ) do
17131: LD_EXP 9
17135: NOT
17136: PUSH
17137: LD_INT 116
17139: PPUSH
17140: LD_INT 123
17142: PPUSH
17143: LD_INT 3
17145: PPUSH
17146: CALL_OW 440
17150: PUSH
17151: LD_INT 72
17153: PPUSH
17154: LD_INT 86
17156: PPUSH
17157: LD_INT 3
17159: PPUSH
17160: CALL_OW 440
17164: OR
17165: AND
17166: IFFALSE 17175
17168: GO 17170
17170: DISABLE
// Dial_SibTechs ;
17171: CALL 16811 0 0
17175: END
// every 5 5$0 trigger claimOvsyenkoBase do
17176: LD_EXP 15
17180: IFFALSE 17204
17182: GO 17184
17184: DISABLE
// begin PrepareVsevolod ;
17185: CALL 2333 0 0
// ComAgressiveMove ( vsevolodTeam , 61 , 45 ) ;
17189: LD_EXP 52
17193: PPUSH
17194: LD_INT 61
17196: PPUSH
17197: LD_INT 45
17199: PPUSH
17200: CALL_OW 114
// end ;
17204: END
// every 0 0$1 trigger immortalVsevolodTeam do var unit ;
17205: LD_EXP 18
17209: IFFALSE 17247
17211: GO 17213
17213: DISABLE
17214: LD_INT 0
17216: PPUSH
// begin enable ;
17217: ENABLE
// for unit in vsevolodTeam do
17218: LD_ADDR_VAR 0 1
17222: PUSH
17223: LD_EXP 52
17227: PUSH
17228: FOR_IN
17229: IFFALSE 17245
// SetLives ( unit , 1000 ) ;
17231: LD_VAR 0 1
17235: PPUSH
17236: LD_INT 1000
17238: PPUSH
17239: CALL_OW 234
17243: GO 17228
17245: POP
17246: POP
// end ;
17247: PPOPN 1
17249: END
// every 0 0$1 trigger GetLives ( ter_bun1 ) <= 650 or GetLives ( ter_arm1 ) <= 650 do var belkovSavedIn02 , tmp , speaker ;
17250: LD_INT 170
17252: PPUSH
17253: CALL_OW 256
17257: PUSH
17258: LD_INT 650
17260: LESSEQUAL
17261: PUSH
17262: LD_INT 174
17264: PPUSH
17265: CALL_OW 256
17269: PUSH
17270: LD_INT 650
17272: LESSEQUAL
17273: OR
17274: IFFALSE 18407
17276: GO 17278
17278: DISABLE
17279: LD_INT 0
17281: PPUSH
17282: PPUSH
17283: PPUSH
// begin ComMoveXY ( UnitFilter ( terminalBase , [ f_type , unit_human ] ) , 35 , 58 ) ;
17284: LD_EXP 57
17288: PPUSH
17289: LD_INT 21
17291: PUSH
17292: LD_INT 1
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PPUSH
17299: CALL_OW 72
17303: PPUSH
17304: LD_INT 35
17306: PPUSH
17307: LD_INT 58
17309: PPUSH
17310: CALL_OW 111
// SetSide ( UnitFilter ( terminalBase , [ f_type , unit_building ] ) , 6 ) ;
17314: LD_EXP 57
17318: PPUSH
17319: LD_INT 21
17321: PUSH
17322: LD_INT 3
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PPUSH
17329: CALL_OW 72
17333: PPUSH
17334: LD_INT 6
17336: PPUSH
17337: CALL_OW 235
// immortalVsevolodTeam = false ;
17341: LD_ADDR_EXP 18
17345: PUSH
17346: LD_INT 0
17348: ST_TO_ADDR
// ComEnterUnit ( [ Vsevolod , vsevolodTeam [ 2 ] ] , ter_arm1 ) ;
17349: LD_EXP 51
17353: PUSH
17354: LD_EXP 52
17358: PUSH
17359: LD_INT 2
17361: ARRAY
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PPUSH
17367: LD_INT 174
17369: PPUSH
17370: CALL_OW 120
// ComEnterUnit ( vsevolodTeam [ 3 ] , ter_bun1 ) ;
17374: LD_EXP 52
17378: PUSH
17379: LD_INT 3
17381: ARRAY
17382: PPUSH
17383: LD_INT 170
17385: PPUSH
17386: CALL_OW 120
// wait ( 0 0$5 ) ;
17390: LD_INT 175
17392: PPUSH
17393: CALL_OW 67
// DialogueOn ;
17397: CALL_OW 6
// if IsOK ( Dolgov ) then
17401: LD_EXP 45
17405: PPUSH
17406: CALL_OW 302
17410: IFFALSE 17424
// Say ( Dolgov , DVsevolod-Dol-1 ) ;
17412: LD_EXP 45
17416: PPUSH
17417: LD_STRING DVsevolod-Dol-1
17419: PPUSH
17420: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-1 ) ;
17424: LD_EXP 51
17428: PPUSH
17429: LD_STRING DVsevolod-Vse-1
17431: PPUSH
17432: CALL_OW 94
// if IsOK ( Gleb ) then
17436: LD_EXP 42
17440: PPUSH
17441: CALL_OW 302
17445: IFFALSE 17483
// begin Say ( Burlak , DVsevolod-Bur-1 ) ;
17447: LD_EXP 39
17451: PPUSH
17452: LD_STRING DVsevolod-Bur-1
17454: PPUSH
17455: CALL_OW 88
// Say ( Gleb , DVsevolod-Glb-1 ) ;
17459: LD_EXP 42
17463: PPUSH
17464: LD_STRING DVsevolod-Glb-1
17466: PPUSH
17467: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-2 ) ;
17471: LD_EXP 51
17475: PPUSH
17476: LD_STRING DVsevolod-Vse-2
17478: PPUSH
17479: CALL_OW 94
// end ; Say ( Burlak , DVsevolod-Bur-2 ) ;
17483: LD_EXP 39
17487: PPUSH
17488: LD_STRING DVsevolod-Bur-2
17490: PPUSH
17491: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-3 ) ;
17495: LD_EXP 51
17499: PPUSH
17500: LD_STRING DVsevolod-Vse-3
17502: PPUSH
17503: CALL_OW 94
// Say ( Burlak , DVsevolod-Bur-3 ) ;
17507: LD_EXP 39
17511: PPUSH
17512: LD_STRING DVsevolod-Bur-3
17514: PPUSH
17515: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-4 ) ;
17519: LD_EXP 51
17523: PPUSH
17524: LD_STRING DVsevolod-Vse-4
17526: PPUSH
17527: CALL_OW 94
// Say ( Burlak , DVsevolod-Bur-4 ) ;
17531: LD_EXP 39
17535: PPUSH
17536: LD_STRING DVsevolod-Bur-4
17538: PPUSH
17539: CALL_OW 88
// if IsOK ( Gleb ) then
17543: LD_EXP 42
17547: PPUSH
17548: CALL_OW 302
17552: IFFALSE 17580
// begin Say ( Gleb , DVsevolod-Glb-4 ) ;
17554: LD_EXP 42
17558: PPUSH
17559: LD_STRING DVsevolod-Glb-4
17561: PPUSH
17562: CALL_OW 88
// Say ( Burlak , DVsevolod-Bur-5 ) ;
17566: LD_EXP 39
17570: PPUSH
17571: LD_STRING DVsevolod-Bur-5
17573: PPUSH
17574: CALL_OW 88
// end else
17578: GO 17654
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-RSol1-5 ,  , false , true ) ;
17580: LD_INT 22
17582: PUSH
17583: LD_INT 3
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: LD_INT 21
17592: PUSH
17593: LD_INT 1
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: LD_INT 50
17602: PUSH
17603: EMPTY
17604: LIST
17605: PUSH
17606: LD_INT 26
17608: PUSH
17609: LD_INT 1
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: PUSH
17616: LD_INT 23
17618: PUSH
17619: LD_INT 3
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: PPUSH
17633: CALL_OW 69
17637: PPUSH
17638: LD_STRING DVsevolod-RSol1-5
17640: PPUSH
17641: LD_STRING 
17643: PPUSH
17644: LD_INT 0
17646: PPUSH
17647: LD_INT 1
17649: PPUSH
17650: CALL 11682 0 5
// Say ( Burlak , DVsevolod-Bur-6 ) ;
17654: LD_EXP 39
17658: PPUSH
17659: LD_STRING DVsevolod-Bur-6
17661: PPUSH
17662: CALL_OW 88
// CenterOnXY ( 59 , 40 ) ;
17666: LD_INT 59
17668: PPUSH
17669: LD_INT 40
17671: PPUSH
17672: CALL_OW 84
// RevealFogArea ( 3 , TerminalBaseArea ) ;
17676: LD_INT 3
17678: PPUSH
17679: LD_INT 4
17681: PPUSH
17682: CALL_OW 332
// if IsOK ( Dolgov ) then
17686: LD_EXP 45
17690: PPUSH
17691: CALL_OW 302
17695: IFFALSE 17711
// Say ( Dolgov , DVsevolod-Dol-6 ) else
17697: LD_EXP 45
17701: PPUSH
17702: LD_STRING DVsevolod-Dol-6
17704: PPUSH
17705: CALL_OW 88
17709: GO 17785
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-Dol-6 ,  , false , true ) ;
17711: LD_INT 22
17713: PUSH
17714: LD_INT 3
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PUSH
17721: LD_INT 21
17723: PUSH
17724: LD_INT 1
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PUSH
17731: LD_INT 50
17733: PUSH
17734: EMPTY
17735: LIST
17736: PUSH
17737: LD_INT 26
17739: PUSH
17740: LD_INT 1
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 23
17749: PUSH
17750: LD_INT 3
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: PPUSH
17764: CALL_OW 69
17768: PPUSH
17769: LD_STRING DVsevolod-Dol-6
17771: PPUSH
17772: LD_STRING 
17774: PPUSH
17775: LD_INT 0
17777: PPUSH
17778: LD_INT 1
17780: PPUSH
17781: CALL 11682 0 5
// Say ( Burlak , DVsevolod-Bur-7 ) ;
17785: LD_EXP 39
17789: PPUSH
17790: LD_STRING DVsevolod-Bur-7
17792: PPUSH
17793: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-7 ) ;
17797: LD_EXP 51
17801: PPUSH
17802: LD_STRING DVsevolod-Vse-7
17804: PPUSH
17805: CALL_OW 94
// DialogueOff ;
17809: CALL_OW 7
// ChangeMissionObjectives ( MVsevolod ) ;
17813: LD_STRING MVsevolod
17815: PPUSH
17816: CALL_OW 337
// enableVsevolodCounter = true ;
17820: LD_ADDR_EXP 22
17824: PUSH
17825: LD_INT 1
17827: ST_TO_ADDR
// canGoNorth = true ;
17828: LD_ADDR_EXP 21
17832: PUSH
17833: LD_INT 1
17835: ST_TO_ADDR
// PrepareSoldiersInBunkers ;
17836: CALL 3559 0 0
// wait ( 0 0$7 ) ;
17840: LD_INT 245
17842: PPUSH
17843: CALL_OW 67
// belkovSavedIn02 = TestCharacters ( 02_Belkov ) ;
17847: LD_ADDR_VAR 0 1
17851: PUSH
17852: LD_STRING 02_Belkov
17854: PPUSH
17855: CALL_OW 28
17859: ST_TO_ADDR
// DialogueOn ;
17860: CALL_OW 6
// if belkovSavedIn02 then
17864: LD_VAR 0 1
17868: IFFALSE 18069
// begin if IsOK ( Gleb ) then
17870: LD_EXP 42
17874: PPUSH
17875: CALL_OW 302
17879: IFFALSE 17893
// Say ( Gleb , DHelp1-Glb-1 ) ;
17881: LD_EXP 42
17885: PPUSH
17886: LD_STRING DHelp1-Glb-1
17888: PPUSH
17889: CALL_OW 88
// if IsOK ( Dolgov ) then
17893: LD_EXP 45
17897: PPUSH
17898: CALL_OW 302
17902: IFFALSE 17916
// Say ( Dolgov , DHelp1-Dol-1 ) ;
17904: LD_EXP 45
17908: PPUSH
17909: LD_STRING DHelp1-Dol-1
17911: PPUSH
17912: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Gleb , Dolgov , Titov ] ;
17916: LD_ADDR_VAR 0 2
17920: PUSH
17921: LD_INT 22
17923: PUSH
17924: LD_INT 3
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: LD_INT 21
17933: PUSH
17934: LD_INT 1
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: LD_INT 50
17943: PUSH
17944: EMPTY
17945: LIST
17946: PUSH
17947: LD_INT 26
17949: PUSH
17950: LD_INT 1
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 23
17959: PUSH
17960: LD_INT 3
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: PPUSH
17974: CALL_OW 69
17978: PUSH
17979: LD_EXP 42
17983: PUSH
17984: LD_EXP 45
17988: PUSH
17989: LD_EXP 44
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: LIST
17998: DIFF
17999: ST_TO_ADDR
// DialogRandom ( tmp , DHelp1-RSol1-1 ,  , false , true ) ;
18000: LD_VAR 0 2
18004: PPUSH
18005: LD_STRING DHelp1-RSol1-1
18007: PPUSH
18008: LD_STRING 
18010: PPUSH
18011: LD_INT 0
18013: PPUSH
18014: LD_INT 1
18016: PPUSH
18017: CALL 11682 0 5
// if IsOK ( Titov ) then
18021: LD_EXP 44
18025: PPUSH
18026: CALL_OW 302
18030: IFFALSE 18044
// Say ( Titov , DHelp1-Tit-1 ) ;
18032: LD_EXP 44
18036: PPUSH
18037: LD_STRING DHelp1-Tit-1
18039: PPUSH
18040: CALL_OW 88
// if IsOK ( Gleb ) then
18044: LD_EXP 42
18048: PPUSH
18049: CALL_OW 302
18053: IFFALSE 18067
// Say ( Gleb , DHelp1-Glb-2 ) ;
18055: LD_EXP 42
18059: PPUSH
18060: LD_STRING DHelp1-Glb-2
18062: PPUSH
18063: CALL_OW 88
// end else
18067: GO 18280
// begin if IsOK ( Titov ) then
18069: LD_EXP 44
18073: PPUSH
18074: CALL_OW 302
18078: IFFALSE 18092
// Say ( Titov , DHelp2-Tit-1 ) ;
18080: LD_EXP 44
18084: PPUSH
18085: LD_STRING DHelp2-Tit-1
18087: PPUSH
18088: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Gleb , Titov ] ;
18092: LD_ADDR_VAR 0 2
18096: PUSH
18097: LD_INT 22
18099: PUSH
18100: LD_INT 3
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: LD_INT 21
18109: PUSH
18110: LD_INT 1
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 50
18119: PUSH
18120: EMPTY
18121: LIST
18122: PUSH
18123: LD_INT 26
18125: PUSH
18126: LD_INT 1
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 23
18135: PUSH
18136: LD_INT 3
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: PPUSH
18150: CALL_OW 69
18154: PUSH
18155: LD_EXP 42
18159: PUSH
18160: LD_EXP 44
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: DIFF
18169: ST_TO_ADDR
// speaker = DialogRandom ( tmp , DHelp2-RSol1-1 ,  , false , true ) ;
18170: LD_ADDR_VAR 0 3
18174: PUSH
18175: LD_VAR 0 2
18179: PPUSH
18180: LD_STRING DHelp2-RSol1-1
18182: PPUSH
18183: LD_STRING 
18185: PPUSH
18186: LD_INT 0
18188: PPUSH
18189: LD_INT 1
18191: PPUSH
18192: CALL 11682 0 5
18196: ST_TO_ADDR
// if IsOK ( Gleb ) then
18197: LD_EXP 42
18201: PPUSH
18202: CALL_OW 302
18206: IFFALSE 18220
// Say ( Gleb , DHelp2-Glb-1 ) ;
18208: LD_EXP 42
18212: PPUSH
18213: LD_STRING DHelp2-Glb-1
18215: PPUSH
18216: CALL_OW 88
// tmp = tmp diff speaker ;
18220: LD_ADDR_VAR 0 2
18224: PUSH
18225: LD_VAR 0 2
18229: PUSH
18230: LD_VAR 0 3
18234: DIFF
18235: ST_TO_ADDR
// DialogRandom ( tmp , DHelp2-RSol2-1 ,  , false , true ) ;
18236: LD_VAR 0 2
18240: PPUSH
18241: LD_STRING DHelp2-RSol2-1
18243: PPUSH
18244: LD_STRING 
18246: PPUSH
18247: LD_INT 0
18249: PPUSH
18250: LD_INT 1
18252: PPUSH
18253: CALL 11682 0 5
// if IsOK ( Titov ) then
18257: LD_EXP 44
18261: PPUSH
18262: CALL_OW 302
18266: IFFALSE 18280
// Say ( Titov , DHelp2-Tit-2 ) ;
18268: LD_EXP 44
18272: PPUSH
18273: LD_STRING DHelp2-Tit-2
18275: PPUSH
18276: CALL_OW 88
// end ; Say ( Burlak , DHelp3-Bur-1 ) ;
18280: LD_EXP 39
18284: PPUSH
18285: LD_STRING DHelp3-Bur-1
18287: PPUSH
18288: CALL_OW 88
// if IsOK ( Lipshchin ) then
18292: LD_EXP 46
18296: PPUSH
18297: CALL_OW 302
18301: IFFALSE 18317
// Say ( Lipshchin , DHelp3-Lip-1 ) else
18303: LD_EXP 46
18307: PPUSH
18308: LD_STRING DHelp3-Lip-1
18310: PPUSH
18311: CALL_OW 88
18315: GO 18391
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-Dol-6 ,  , false , true ) ;
18317: LD_INT 22
18319: PUSH
18320: LD_INT 3
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 21
18329: PUSH
18330: LD_INT 1
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PUSH
18337: LD_INT 50
18339: PUSH
18340: EMPTY
18341: LIST
18342: PUSH
18343: LD_INT 26
18345: PUSH
18346: LD_INT 1
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: LD_INT 23
18355: PUSH
18356: LD_INT 3
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: PPUSH
18370: CALL_OW 69
18374: PPUSH
18375: LD_STRING DVsevolod-Dol-6
18377: PPUSH
18378: LD_STRING 
18380: PPUSH
18381: LD_INT 0
18383: PPUSH
18384: LD_INT 1
18386: PPUSH
18387: CALL 11682 0 5
// Say ( Burlak , DHelp3-Bur-2 ) ;
18391: LD_EXP 39
18395: PPUSH
18396: LD_STRING DHelp3-Bur-2
18398: PPUSH
18399: CALL_OW 88
// DialogueOff ;
18403: CALL_OW 7
// end ;
18407: PPOPN 3
18409: END
// every 0 0$1 trigger claimOvsyenkoBase and not FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] , [ f_type , unit_vehicle ] ] ] ) and FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
18410: LD_EXP 15
18414: PUSH
18415: LD_INT 3
18417: PPUSH
18418: LD_INT 22
18420: PUSH
18421: LD_INT 3
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 2
18430: PUSH
18431: LD_INT 21
18433: PUSH
18434: LD_INT 1
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_INT 59
18443: PUSH
18444: EMPTY
18445: LIST
18446: PUSH
18447: LD_INT 21
18449: PUSH
18450: LD_INT 2
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PPUSH
18467: CALL_OW 70
18471: NOT
18472: AND
18473: PUSH
18474: LD_INT 3
18476: PPUSH
18477: LD_INT 22
18479: PUSH
18480: LD_INT 1
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 2
18489: PUSH
18490: LD_INT 21
18492: PUSH
18493: LD_INT 1
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 21
18502: PUSH
18503: LD_INT 2
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: LIST
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PPUSH
18519: CALL_OW 70
18523: AND
18524: IFFALSE 18691
18526: GO 18528
18528: DISABLE
// begin lostAgainBase = true ;
18529: LD_ADDR_EXP 17
18533: PUSH
18534: LD_INT 1
18536: ST_TO_ADDR
// SetSide ( FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , 1 ) ;
18537: LD_INT 3
18539: PPUSH
18540: LD_INT 22
18542: PUSH
18543: LD_INT 3
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 21
18552: PUSH
18553: LD_INT 3
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PPUSH
18564: CALL_OW 70
18568: PPUSH
18569: LD_INT 1
18571: PPUSH
18572: CALL_OW 235
// if IsOK ( Gleb ) then
18576: LD_EXP 42
18580: PPUSH
18581: CALL_OW 302
18585: IFFALSE 18611
// begin Say ( Gleb , DOvsyenkoCaptured-Glb-1 ) ;
18587: LD_EXP 42
18591: PPUSH
18592: LD_STRING DOvsyenkoCaptured-Glb-1
18594: PPUSH
18595: CALL_OW 88
// Say ( Burlak , DOvsyenkoCaptured-Bur-1 ) ;
18599: LD_EXP 39
18603: PPUSH
18604: LD_STRING DOvsyenkoCaptured-Bur-1
18606: PPUSH
18607: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Gleb , DOvsyenkoCaptured-RSol1-1 ,  , false , true ) ;
18611: LD_INT 22
18613: PUSH
18614: LD_INT 3
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: LD_INT 21
18623: PUSH
18624: LD_INT 1
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 50
18633: PUSH
18634: EMPTY
18635: LIST
18636: PUSH
18637: LD_INT 26
18639: PUSH
18640: LD_INT 1
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: LD_INT 23
18649: PUSH
18650: LD_INT 3
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: PPUSH
18664: CALL_OW 69
18668: PUSH
18669: LD_EXP 42
18673: DIFF
18674: PPUSH
18675: LD_STRING DOvsyenkoCaptured-RSol1-1
18677: PPUSH
18678: LD_STRING 
18680: PPUSH
18681: LD_INT 0
18683: PPUSH
18684: LD_INT 1
18686: PPUSH
18687: CALL 11682 0 5
// end ;
18691: END
// every 0 0$1 trigger FilterUnitsInArea ( TrapArea , [ [ f_side , 3 ] , [ f_ok ] ] ) do
18692: LD_INT 12
18694: PPUSH
18695: LD_INT 22
18697: PUSH
18698: LD_INT 3
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 50
18707: PUSH
18708: EMPTY
18709: LIST
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PPUSH
18715: CALL_OW 70
18719: IFFALSE 18728
18721: GO 18723
18723: DISABLE
// PrepareTrap ;
18724: CALL 3395 0 0
18728: END
// every 0 0$1 trigger not dial_TrapDialogBlocker do var tmp , speaker , unit ;
18729: LD_EXP 11
18733: NOT
18734: IFFALSE 18952
18736: GO 18738
18738: DISABLE
18739: LD_INT 0
18741: PPUSH
18742: PPUSH
18743: PPUSH
// begin enable ;
18744: ENABLE
// for unit in trapTeam do
18745: LD_ADDR_VAR 0 3
18749: PUSH
18750: LD_EXP 59
18754: PUSH
18755: FOR_IN
18756: IFFALSE 18950
// if See ( 3 , unit ) then
18758: LD_INT 3
18760: PPUSH
18761: LD_VAR 0 3
18765: PPUSH
18766: CALL_OW 292
18770: IFFALSE 18948
// begin dial_TrapDialogBlocker = true ;
18772: LD_ADDR_EXP 11
18776: PUSH
18777: LD_INT 1
18779: ST_TO_ADDR
// DialogueOn ;
18780: CALL_OW 6
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Gleb ;
18784: LD_ADDR_VAR 0 1
18788: PUSH
18789: LD_INT 22
18791: PUSH
18792: LD_INT 3
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: LD_INT 21
18801: PUSH
18802: LD_INT 1
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PUSH
18809: LD_INT 50
18811: PUSH
18812: EMPTY
18813: LIST
18814: PUSH
18815: LD_INT 26
18817: PUSH
18818: LD_INT 1
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: LD_INT 23
18827: PUSH
18828: LD_INT 3
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: PPUSH
18842: CALL_OW 69
18846: PUSH
18847: LD_EXP 42
18851: DIFF
18852: ST_TO_ADDR
// speaker = DialogRandom ( tmp , DPartyAttacked-RSol1-1 ,  , false , true ) ;
18853: LD_ADDR_VAR 0 2
18857: PUSH
18858: LD_VAR 0 1
18862: PPUSH
18863: LD_STRING DPartyAttacked-RSol1-1
18865: PPUSH
18866: LD_STRING 
18868: PPUSH
18869: LD_INT 0
18871: PPUSH
18872: LD_INT 1
18874: PPUSH
18875: CALL 11682 0 5
18879: ST_TO_ADDR
// tmp = tmp diff speaker ;
18880: LD_ADDR_VAR 0 1
18884: PUSH
18885: LD_VAR 0 1
18889: PUSH
18890: LD_VAR 0 2
18894: DIFF
18895: ST_TO_ADDR
// if IsOK ( Gleb ) then
18896: LD_EXP 42
18900: PPUSH
18901: CALL_OW 302
18905: IFFALSE 18919
// Say ( Gleb , DPartyAttacked-Glb-1 ) ;
18907: LD_EXP 42
18911: PPUSH
18912: LD_STRING DPartyAttacked-Glb-1
18914: PPUSH
18915: CALL_OW 88
// DialogRandom ( tmp , DPartyAttacked-RSol1-2 ,  , false , true ) ;
18919: LD_VAR 0 1
18923: PPUSH
18924: LD_STRING DPartyAttacked-RSol1-2
18926: PPUSH
18927: LD_STRING 
18929: PPUSH
18930: LD_INT 0
18932: PPUSH
18933: LD_INT 1
18935: PPUSH
18936: CALL 11682 0 5
// DialogueOff ;
18940: CALL_OW 7
// exit ;
18944: POP
18945: POP
18946: GO 18952
// end ;
18948: GO 18755
18950: POP
18951: POP
// end ;
18952: PPOPN 3
18954: END
// every 0 0$1 trigger not savedVsevolod and IsOK ( Vsevolod ) and FilterUnitsInArea ( TerminalBaseArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ [ f_type , unit_human ] , [ f_nation , nation_russian ] ] , [ f_type , unit_vehicle ] ] ] ) do var nearUnit , unit , maleRandomUnits ;
18955: LD_EXP 19
18959: NOT
18960: PUSH
18961: LD_EXP 51
18965: PPUSH
18966: CALL_OW 302
18970: AND
18971: PUSH
18972: LD_INT 4
18974: PPUSH
18975: LD_INT 22
18977: PUSH
18978: LD_INT 3
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: LD_INT 50
18987: PUSH
18988: EMPTY
18989: LIST
18990: PUSH
18991: LD_INT 2
18993: PUSH
18994: LD_INT 21
18996: PUSH
18997: LD_INT 1
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 23
19006: PUSH
19007: LD_INT 3
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 21
19020: PUSH
19021: LD_INT 2
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: LIST
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: LIST
19037: PPUSH
19038: CALL_OW 70
19042: AND
19043: IFFALSE 19685
19045: GO 19047
19047: DISABLE
19048: LD_INT 0
19050: PPUSH
19051: PPUSH
19052: PPUSH
// begin savedVsevolod = true ;
19053: LD_ADDR_EXP 19
19057: PUSH
19058: LD_INT 1
19060: ST_TO_ADDR
// ChangeMissionObjectives ( MVsevolodOut ) ;
19061: LD_STRING MVsevolodOut
19063: PPUSH
19064: CALL_OW 337
// unit = FilterUnitsInArea ( TerminalBaseArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ [ f_type , unit_human ] , [ f_nation , nation_russian ] ] , [ f_type , unit_vehicle ] ] ] ) ;
19068: LD_ADDR_VAR 0 2
19072: PUSH
19073: LD_INT 4
19075: PPUSH
19076: LD_INT 22
19078: PUSH
19079: LD_INT 3
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: LD_INT 50
19088: PUSH
19089: EMPTY
19090: LIST
19091: PUSH
19092: LD_INT 2
19094: PUSH
19095: LD_INT 21
19097: PUSH
19098: LD_INT 1
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 23
19107: PUSH
19108: LD_INT 3
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PUSH
19119: LD_INT 21
19121: PUSH
19122: LD_INT 2
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: LIST
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: LIST
19138: PPUSH
19139: CALL_OW 70
19143: ST_TO_ADDR
// unit = unit [ 1 ] ;
19144: LD_ADDR_VAR 0 2
19148: PUSH
19149: LD_VAR 0 2
19153: PUSH
19154: LD_INT 1
19156: ARRAY
19157: ST_TO_ADDR
// if GetType ( unit ) = unit_vehicle then
19158: LD_VAR 0 2
19162: PPUSH
19163: CALL_OW 247
19167: PUSH
19168: LD_INT 2
19170: EQUAL
19171: IFFALSE 19192
// unit = UnitsInside ( unit ) [ 1 ] ;
19173: LD_ADDR_VAR 0 2
19177: PUSH
19178: LD_VAR 0 2
19182: PPUSH
19183: CALL_OW 313
19187: PUSH
19188: LD_INT 1
19190: ARRAY
19191: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
19192: LD_INT 22
19194: PUSH
19195: LD_INT 6
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PPUSH
19202: CALL_OW 69
19206: PPUSH
19207: LD_INT 3
19209: PPUSH
19210: CALL_OW 235
// if not unit = Burlak then
19214: LD_VAR 0 2
19218: PUSH
19219: LD_EXP 39
19223: EQUAL
19224: NOT
19225: IFFALSE 19402
// begin vsevolodWaitGorky = true ;
19227: LD_ADDR_EXP 20
19231: PUSH
19232: LD_INT 1
19234: ST_TO_ADDR
// DialogueOn ;
19235: CALL_OW 6
// Say ( Vsevolod , DOtherMeetVsev-Vse-1 ) ;
19239: LD_EXP 51
19243: PPUSH
19244: LD_STRING DOtherMeetVsev-Vse-1
19246: PPUSH
19247: CALL_OW 88
// if GetSex ( unit ) = sex_female then
19251: LD_VAR 0 2
19255: PPUSH
19256: CALL_OW 258
19260: PUSH
19261: LD_INT 2
19263: EQUAL
19264: IFFALSE 19384
// begin maleRandomUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff vsevolodTeam ;
19266: LD_ADDR_VAR 0 3
19270: PUSH
19271: LD_INT 22
19273: PUSH
19274: LD_INT 3
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 21
19283: PUSH
19284: LD_INT 1
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: LD_INT 50
19293: PUSH
19294: EMPTY
19295: LIST
19296: PUSH
19297: LD_INT 26
19299: PUSH
19300: LD_INT 1
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 23
19309: PUSH
19310: LD_INT 3
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: PPUSH
19324: CALL_OW 69
19328: PUSH
19329: LD_EXP 52
19333: DIFF
19334: ST_TO_ADDR
// maleRandomUnits = maleRandomUnits diff Gleb ;
19335: LD_ADDR_VAR 0 3
19339: PUSH
19340: LD_VAR 0 3
19344: PUSH
19345: LD_EXP 42
19349: DIFF
19350: ST_TO_ADDR
// if maleRandomUnits then
19351: LD_VAR 0 3
19355: IFFALSE 19382
// DialogRandom ( maleRandomUnits [ 1 ] , DOtherMeetVsev-RSol1-1 ,  , false , true ) ;
19357: LD_VAR 0 3
19361: PUSH
19362: LD_INT 1
19364: ARRAY
19365: PPUSH
19366: LD_STRING DOtherMeetVsev-RSol1-1
19368: PPUSH
19369: LD_STRING 
19371: PPUSH
19372: LD_INT 0
19374: PPUSH
19375: LD_INT 1
19377: PPUSH
19378: CALL 11682 0 5
// end else
19382: GO 19396
// Say ( unit , DOtherMeetVsev-RSol1-1 ) ;
19384: LD_VAR 0 2
19388: PPUSH
19389: LD_STRING DOtherMeetVsev-RSol1-1
19391: PPUSH
19392: CALL_OW 88
// DialogueOff ;
19396: CALL_OW 7
// end else
19400: GO 19685
// begin DialogueOn ;
19402: CALL_OW 6
// Say ( Vsevolod , DMeetVsev-Vse-1 ) ;
19406: LD_EXP 51
19410: PPUSH
19411: LD_STRING DMeetVsev-Vse-1
19413: PPUSH
19414: CALL_OW 88
// Say ( Burlak , DMeetVsev-Bur-1 ) ;
19418: LD_EXP 39
19422: PPUSH
19423: LD_STRING DMeetVsev-Bur-1
19425: PPUSH
19426: CALL_OW 88
// if lostAgainBase then
19430: LD_EXP 17
19434: IFFALSE 19474
// begin Say ( Vsevolod , DMeetVsev2-Vse-1 ) ;
19436: LD_EXP 51
19440: PPUSH
19441: LD_STRING DMeetVsev2-Vse-1
19443: PPUSH
19444: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-1 ) ;
19448: LD_EXP 39
19452: PPUSH
19453: LD_STRING DMeetVsev2-Bur-1
19455: PPUSH
19456: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-2 ) ;
19460: LD_EXP 51
19464: PPUSH
19465: LD_STRING DMeetVsev2-Vse-2
19467: PPUSH
19468: CALL_OW 88
// end else
19472: GO 19510
// begin Say ( Vsevolod , DMeetVsev2-Vse-2a ) ;
19474: LD_EXP 51
19478: PPUSH
19479: LD_STRING DMeetVsev2-Vse-2a
19481: PPUSH
19482: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-2 ) ;
19486: LD_EXP 39
19490: PPUSH
19491: LD_STRING DMeetVsev2-Bur-2
19493: PPUSH
19494: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-3 ) ;
19498: LD_EXP 51
19502: PPUSH
19503: LD_STRING DMeetVsev2-Vse-3
19505: PPUSH
19506: CALL_OW 88
// end ; Say ( Burlak , DMeetVsev3-Bur-1 ) ;
19510: LD_EXP 39
19514: PPUSH
19515: LD_STRING DMeetVsev3-Bur-1
19517: PPUSH
19518: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-1 ) ;
19522: LD_EXP 51
19526: PPUSH
19527: LD_STRING DMeetVsev3-Vse-1
19529: PPUSH
19530: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-2 ) ;
19534: LD_EXP 39
19538: PPUSH
19539: LD_STRING DMeetVsev3-Bur-2
19541: PPUSH
19542: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-2 ) ;
19546: LD_EXP 51
19550: PPUSH
19551: LD_STRING DMeetVsev3-Vse-2
19553: PPUSH
19554: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-3 ) ;
19558: LD_EXP 39
19562: PPUSH
19563: LD_STRING DMeetVsev3-Bur-3
19565: PPUSH
19566: CALL_OW 88
// if stevensStatus = 0 then
19570: LD_EXP 4
19574: PUSH
19575: LD_INT 0
19577: EQUAL
19578: IFFALSE 19592
// Say ( Burlak , DMeetVsev4-Bur-1 ) ;
19580: LD_EXP 39
19584: PPUSH
19585: LD_STRING DMeetVsev4-Bur-1
19587: PPUSH
19588: CALL_OW 88
// Say ( Burlak , DMeetVsev5-Bur-1 ) ;
19592: LD_EXP 39
19596: PPUSH
19597: LD_STRING DMeetVsev5-Bur-1
19599: PPUSH
19600: CALL_OW 88
// Say ( Vsevolod , DMeetVsev5-Vse-1 ) ;
19604: LD_EXP 51
19608: PPUSH
19609: LD_STRING DMeetVsev5-Vse-1
19611: PPUSH
19612: CALL_OW 88
// Say ( Burlak , DMeetVsev6-Bur-1 ) ;
19616: LD_EXP 39
19620: PPUSH
19621: LD_STRING DMeetVsev6-Bur-1
19623: PPUSH
19624: CALL_OW 88
// Say ( Vsevolod , DMeetVsev6-Vse-1 ) ;
19628: LD_EXP 51
19632: PPUSH
19633: LD_STRING DMeetVsev6-Vse-1
19635: PPUSH
19636: CALL_OW 88
// DialogueOff ;
19640: CALL_OW 7
// wait ( 0 0$20 ) ;
19644: LD_INT 700
19646: PPUSH
19647: CALL_OW 67
// PrepareConvoy ;
19651: CALL 3603 0 0
// ComMoveXY ( convoyTeam , 57 , 40 ) ;
19655: LD_EXP 60
19659: PPUSH
19660: LD_INT 57
19662: PPUSH
19663: LD_INT 40
19665: PPUSH
19666: CALL_OW 111
// AddComMoveXY ( convoyTeam , 37 , 59 ) ;
19670: LD_EXP 60
19674: PPUSH
19675: LD_INT 37
19677: PPUSH
19678: LD_INT 59
19680: PPUSH
19681: CALL_OW 171
// end ; end ;
19685: PPOPN 3
19687: END
// every 0 0$1 trigger vsevolodWaitGorky and GetDistUnits ( Vsevolod , Burlak ) <= 7 do
19688: LD_EXP 20
19692: PUSH
19693: LD_EXP 51
19697: PPUSH
19698: LD_EXP 39
19702: PPUSH
19703: CALL_OW 296
19707: PUSH
19708: LD_INT 7
19710: LESSEQUAL
19711: AND
19712: IFFALSE 20008
19714: GO 19716
19716: DISABLE
// begin vsevolodWaitGorky = false ;
19717: LD_ADDR_EXP 20
19721: PUSH
19722: LD_INT 0
19724: ST_TO_ADDR
// DialogueOn ;
19725: CALL_OW 6
// Say ( Vsevolod , DMeetVsev-Vse-1 ) ;
19729: LD_EXP 51
19733: PPUSH
19734: LD_STRING DMeetVsev-Vse-1
19736: PPUSH
19737: CALL_OW 88
// Say ( Burlak , DMeetVsev-Bur-1 ) ;
19741: LD_EXP 39
19745: PPUSH
19746: LD_STRING DMeetVsev-Bur-1
19748: PPUSH
19749: CALL_OW 88
// if lostAgainBase then
19753: LD_EXP 17
19757: IFFALSE 19797
// begin Say ( Vsevolod , DMeetVsev2-Vse-1 ) ;
19759: LD_EXP 51
19763: PPUSH
19764: LD_STRING DMeetVsev2-Vse-1
19766: PPUSH
19767: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-1 ) ;
19771: LD_EXP 39
19775: PPUSH
19776: LD_STRING DMeetVsev2-Bur-1
19778: PPUSH
19779: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-2 ) ;
19783: LD_EXP 51
19787: PPUSH
19788: LD_STRING DMeetVsev2-Vse-2
19790: PPUSH
19791: CALL_OW 88
// end else
19795: GO 19833
// begin Say ( Vsevolod , DMeetVsev2-Vse-2a ) ;
19797: LD_EXP 51
19801: PPUSH
19802: LD_STRING DMeetVsev2-Vse-2a
19804: PPUSH
19805: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-2 ) ;
19809: LD_EXP 39
19813: PPUSH
19814: LD_STRING DMeetVsev2-Bur-2
19816: PPUSH
19817: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-3 ) ;
19821: LD_EXP 51
19825: PPUSH
19826: LD_STRING DMeetVsev2-Vse-3
19828: PPUSH
19829: CALL_OW 88
// end ; Say ( Burlak , DMeetVsev3-Bur-1 ) ;
19833: LD_EXP 39
19837: PPUSH
19838: LD_STRING DMeetVsev3-Bur-1
19840: PPUSH
19841: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-1 ) ;
19845: LD_EXP 51
19849: PPUSH
19850: LD_STRING DMeetVsev3-Vse-1
19852: PPUSH
19853: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-2 ) ;
19857: LD_EXP 39
19861: PPUSH
19862: LD_STRING DMeetVsev3-Bur-2
19864: PPUSH
19865: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-2 ) ;
19869: LD_EXP 51
19873: PPUSH
19874: LD_STRING DMeetVsev3-Vse-2
19876: PPUSH
19877: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-3 ) ;
19881: LD_EXP 39
19885: PPUSH
19886: LD_STRING DMeetVsev3-Bur-3
19888: PPUSH
19889: CALL_OW 88
// if stevensStatus = 0 then
19893: LD_EXP 4
19897: PUSH
19898: LD_INT 0
19900: EQUAL
19901: IFFALSE 19915
// Say ( Burlak , DMeetVsev4-Bur-1 ) ;
19903: LD_EXP 39
19907: PPUSH
19908: LD_STRING DMeetVsev4-Bur-1
19910: PPUSH
19911: CALL_OW 88
// Say ( Burlak , DMeetVsev5-Bur-1 ) ;
19915: LD_EXP 39
19919: PPUSH
19920: LD_STRING DMeetVsev5-Bur-1
19922: PPUSH
19923: CALL_OW 88
// Say ( Vsevolod , DMeetVsev5-Vse-1 ) ;
19927: LD_EXP 51
19931: PPUSH
19932: LD_STRING DMeetVsev5-Vse-1
19934: PPUSH
19935: CALL_OW 88
// Say ( Vsevolod , DMeetVsev6-Vse-1 ) ;
19939: LD_EXP 51
19943: PPUSH
19944: LD_STRING DMeetVsev6-Vse-1
19946: PPUSH
19947: CALL_OW 88
// Say ( Burlak , DMeetVsev6-Bur-1 ) ;
19951: LD_EXP 39
19955: PPUSH
19956: LD_STRING DMeetVsev6-Bur-1
19958: PPUSH
19959: CALL_OW 88
// DialogueOff ;
19963: CALL_OW 7
// wait ( 0 0$20 ) ;
19967: LD_INT 700
19969: PPUSH
19970: CALL_OW 67
// PrepareConvoy ;
19974: CALL 3603 0 0
// ComMoveXY ( convoyTeam , 57 , 40 ) ;
19978: LD_EXP 60
19982: PPUSH
19983: LD_INT 57
19985: PPUSH
19986: LD_INT 40
19988: PPUSH
19989: CALL_OW 111
// AddComMoveXY ( convoyTeam , 37 , 59 ) ;
19993: LD_EXP 60
19997: PPUSH
19998: LD_INT 37
20000: PPUSH
20001: LD_INT 59
20003: PPUSH
20004: CALL_OW 171
// end ;
20008: END
// every 0 0$1 trigger not dial_ConvoyDialogBlocker do var tmp , speaker , unit ;
20009: LD_EXP 12
20013: NOT
20014: IFFALSE 20144
20016: GO 20018
20018: DISABLE
20019: LD_INT 0
20021: PPUSH
20022: PPUSH
20023: PPUSH
// begin enable ;
20024: ENABLE
// for unit in convoyTeam do
20025: LD_ADDR_VAR 0 3
20029: PUSH
20030: LD_EXP 60
20034: PUSH
20035: FOR_IN
20036: IFFALSE 20142
// if See ( 3 , unit ) and not IsInArea ( unit , InsideBaseArea ) then
20038: LD_INT 3
20040: PPUSH
20041: LD_VAR 0 3
20045: PPUSH
20046: CALL_OW 292
20050: PUSH
20051: LD_VAR 0 3
20055: PPUSH
20056: LD_INT 19
20058: PPUSH
20059: CALL_OW 308
20063: NOT
20064: AND
20065: IFFALSE 20140
// begin dial_ConvoyDialogBlocker = true ;
20067: LD_ADDR_EXP 12
20071: PUSH
20072: LD_INT 1
20074: ST_TO_ADDR
// DialogueOn ;
20075: CALL_OW 6
// speaker = UnitFilter ( convoyTeam , [ f_type , unit_human ] ) [ 1 ] ;
20079: LD_ADDR_VAR 0 2
20083: PUSH
20084: LD_EXP 60
20088: PPUSH
20089: LD_INT 21
20091: PUSH
20092: LD_INT 1
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PPUSH
20099: CALL_OW 72
20103: PUSH
20104: LD_INT 1
20106: ARRAY
20107: ST_TO_ADDR
// Say ( speaker , DTruck-Sol1-1 ) ;
20108: LD_VAR 0 2
20112: PPUSH
20113: LD_STRING DTruck-Sol1-1
20115: PPUSH
20116: CALL_OW 88
// Say ( Burlak , DTruck-Bur-1 ) ;
20120: LD_EXP 39
20124: PPUSH
20125: LD_STRING DTruck-Bur-1
20127: PPUSH
20128: CALL_OW 88
// DialogueOff ;
20132: CALL_OW 7
// exit ;
20136: POP
20137: POP
20138: GO 20144
// end ;
20140: GO 20035
20142: POP
20143: POP
// end ;
20144: PPOPN 3
20146: END
// every 0 0$1 trigger timeToAttack >= vsevolodSaveTime do
20147: LD_EXP 26
20151: PUSH
20152: LD_EXP 38
20156: GREATEREQUAL
20157: IFFALSE 20196
20159: GO 20161
20161: DISABLE
// begin PrepareAttack ;
20162: CALL 3784 0 0
// ComAgressiveMove ( attackTeam , 60 , 41 ) ;
20166: LD_EXP 61
20170: PPUSH
20171: LD_INT 60
20173: PPUSH
20174: LD_INT 41
20176: PPUSH
20177: CALL_OW 114
// AddComAgressiveMove ( attackTeam , 107 , 125 ) ;
20181: LD_EXP 61
20185: PPUSH
20186: LD_INT 107
20188: PPUSH
20189: LD_INT 125
20191: PPUSH
20192: CALL_OW 174
// end ;
20196: END
// every 1 trigger not savedVsevolod and GetLives ( Vsevolod ) <= 500 do
20197: LD_EXP 19
20201: NOT
20202: PUSH
20203: LD_EXP 51
20207: PPUSH
20208: CALL_OW 256
20212: PUSH
20213: LD_INT 500
20215: LESSEQUAL
20216: AND
20217: IFFALSE 20242
20219: GO 20221
20221: DISABLE
// begin DialogueOn ;
20222: CALL_OW 6
// SayRadio ( Vsevolod , DDieVsev2-Vse-1 ) ;
20226: LD_EXP 51
20230: PPUSH
20231: LD_STRING DDieVsev2-Vse-1
20233: PPUSH
20234: CALL_OW 94
// DialogueOff ;
20238: CALL_OW 7
// end ;
20242: END
// export function Dial_ResearchTauField ; var speaker , sci , randomTalkDialog ; begin
20243: LD_INT 0
20245: PPUSH
20246: PPUSH
20247: PPUSH
20248: PPUSH
// DialogueOn ;
20249: CALL_OW 6
// if IsOK ( Petrosyan ) then
20253: LD_EXP 43
20257: PPUSH
20258: CALL_OW 302
20262: IFFALSE 20278
// Say ( Petrosyan , DStasis-Pty-1 ) else
20264: LD_EXP 43
20268: PPUSH
20269: LD_STRING DStasis-Pty-1
20271: PPUSH
20272: CALL_OW 88
20276: GO 20500
// if IsOK ( Dolgov ) then
20278: LD_EXP 45
20282: PPUSH
20283: CALL_OW 302
20287: IFFALSE 20303
// Say ( Dolgov , DStasis-Dol-1 ) else
20289: LD_EXP 45
20293: PPUSH
20294: LD_STRING DStasis-Dol-1
20296: PPUSH
20297: CALL_OW 88
20301: GO 20500
// begin sci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] , [ f_nation , nation_russian ] ] ) diff Burlak ;
20303: LD_ADDR_VAR 0 3
20307: PUSH
20308: LD_INT 22
20310: PUSH
20311: LD_INT 3
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: PUSH
20318: LD_INT 21
20320: PUSH
20321: LD_INT 1
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: PUSH
20328: LD_INT 50
20330: PUSH
20331: EMPTY
20332: LIST
20333: PUSH
20334: LD_INT 26
20336: PUSH
20337: LD_INT 1
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 25
20346: PUSH
20347: LD_INT 4
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: LD_INT 23
20356: PUSH
20357: LD_INT 3
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: PPUSH
20372: CALL_OW 69
20376: PUSH
20377: LD_EXP 39
20381: DIFF
20382: ST_TO_ADDR
// if not sci then
20383: LD_VAR 0 3
20387: NOT
20388: IFFALSE 20459
// sci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Burlak ;
20390: LD_ADDR_VAR 0 3
20394: PUSH
20395: LD_INT 22
20397: PUSH
20398: LD_INT 3
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: PUSH
20405: LD_INT 21
20407: PUSH
20408: LD_INT 1
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: PUSH
20415: LD_INT 50
20417: PUSH
20418: EMPTY
20419: LIST
20420: PUSH
20421: LD_INT 26
20423: PUSH
20424: LD_INT 1
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 23
20433: PUSH
20434: LD_INT 3
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: PPUSH
20448: CALL_OW 69
20452: PUSH
20453: LD_EXP 39
20457: DIFF
20458: ST_TO_ADDR
// if sci then
20459: LD_VAR 0 3
20463: IFFALSE 20500
// begin speaker = DialogRandom ( sci , DStasis-RSol1-1 ,  , false , true ) ;
20465: LD_ADDR_VAR 0 2
20469: PUSH
20470: LD_VAR 0 3
20474: PPUSH
20475: LD_STRING DStasis-RSol1-1
20477: PPUSH
20478: LD_STRING 
20480: PPUSH
20481: LD_INT 0
20483: PPUSH
20484: LD_INT 1
20486: PPUSH
20487: CALL 11682 0 5
20491: ST_TO_ADDR
// randomTalkDialog = true ;
20492: LD_ADDR_VAR 0 4
20496: PUSH
20497: LD_INT 1
20499: ST_TO_ADDR
// end ; end ; if IsOK ( Petrosyan ) or IsOK ( Dolgov ) or randomTalkDialog then
20500: LD_EXP 43
20504: PPUSH
20505: CALL_OW 302
20509: PUSH
20510: LD_EXP 45
20514: PPUSH
20515: CALL_OW 302
20519: OR
20520: PUSH
20521: LD_VAR 0 4
20525: OR
20526: IFFALSE 20623
// begin Say ( Burlak , DStasis-Bur-1 ) ;
20528: LD_EXP 39
20532: PPUSH
20533: LD_STRING DStasis-Bur-1
20535: PPUSH
20536: CALL_OW 88
// if IsOK ( Petrosyan ) then
20540: LD_EXP 43
20544: PPUSH
20545: CALL_OW 302
20549: IFFALSE 20565
// Say ( Petrosyan , DStasis-Pty-2 ) else
20551: LD_EXP 43
20555: PPUSH
20556: LD_STRING DStasis-Pty-2
20558: PPUSH
20559: CALL_OW 88
20563: GO 20611
// if IsOK ( Dolgov ) then
20565: LD_EXP 45
20569: PPUSH
20570: CALL_OW 302
20574: IFFALSE 20590
// Say ( Dolgov , DStasis-Dol-2 ) else
20576: LD_EXP 45
20580: PPUSH
20581: LD_STRING DStasis-Dol-2
20583: PPUSH
20584: CALL_OW 88
20588: GO 20611
// DialogRandom ( speaker , DStasis-RSol1-2 ,  , false , true ) ;
20590: LD_VAR 0 2
20594: PPUSH
20595: LD_STRING DStasis-RSol1-2
20597: PPUSH
20598: LD_STRING 
20600: PPUSH
20601: LD_INT 0
20603: PPUSH
20604: LD_INT 1
20606: PPUSH
20607: CALL 11682 0 5
// Say ( Burlak , DStasis-Bur-2 ) ;
20611: LD_EXP 39
20615: PPUSH
20616: LD_STRING DStasis-Bur-2
20618: PPUSH
20619: CALL_OW 88
// end ; DialogueOff ;
20623: CALL_OW 7
// if GetTech ( tech_SibEng , 3 ) = state_researched then
20627: LD_INT 22
20629: PPUSH
20630: LD_INT 3
20632: PPUSH
20633: CALL_OW 321
20637: PUSH
20638: LD_INT 2
20640: EQUAL
20641: IFFALSE 20650
// ChangeMissionObjectives ( MOutResearch ) ;
20643: LD_STRING MOutResearch
20645: PPUSH
20646: CALL_OW 337
// end ;
20650: LD_VAR 0 1
20654: RET
// every 0 0$01 trigger GetTech ( tech_SibEng , 3 ) = state_researched and GetTech ( tech_TauField , 3 ) = state_researched and not dial_EndMissionDialogBlocker do var depots , depot , sibCounter ;
20655: LD_INT 22
20657: PPUSH
20658: LD_INT 3
20660: PPUSH
20661: CALL_OW 321
20665: PUSH
20666: LD_INT 2
20668: EQUAL
20669: PUSH
20670: LD_INT 30
20672: PPUSH
20673: LD_INT 3
20675: PPUSH
20676: CALL_OW 321
20680: PUSH
20681: LD_INT 2
20683: EQUAL
20684: AND
20685: PUSH
20686: LD_EXP 14
20690: NOT
20691: AND
20692: IFFALSE 21035
20694: GO 20696
20696: DISABLE
20697: LD_INT 0
20699: PPUSH
20700: PPUSH
20701: PPUSH
// begin wait ( 0 0$15 ) ;
20702: LD_INT 525
20704: PPUSH
20705: CALL_OW 67
// depots = FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20709: LD_ADDR_VAR 0 1
20713: PUSH
20714: LD_INT 22
20716: PUSH
20717: LD_INT 3
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 50
20726: PUSH
20727: EMPTY
20728: LIST
20729: PUSH
20730: LD_INT 21
20732: PUSH
20733: LD_INT 3
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 2
20742: PUSH
20743: LD_INT 30
20745: PUSH
20746: LD_INT 0
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: LD_INT 30
20755: PUSH
20756: LD_INT 1
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: LIST
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: PPUSH
20774: CALL_OW 69
20778: ST_TO_ADDR
// sibCounter = 0 ;
20779: LD_ADDR_VAR 0 3
20783: PUSH
20784: LD_INT 0
20786: ST_TO_ADDR
// for depot in depots do
20787: LD_ADDR_VAR 0 2
20791: PUSH
20792: LD_VAR 0 1
20796: PUSH
20797: FOR_IN
20798: IFFALSE 20831
// sibCounter = sibCounter + GetResourceType ( GetBase ( depot ) , mat_siberit ) ;
20800: LD_ADDR_VAR 0 3
20804: PUSH
20805: LD_VAR 0 3
20809: PUSH
20810: LD_VAR 0 2
20814: PPUSH
20815: CALL_OW 274
20819: PPUSH
20820: LD_INT 3
20822: PPUSH
20823: CALL_OW 275
20827: PLUS
20828: ST_TO_ADDR
20829: GO 20797
20831: POP
20832: POP
// if sibCounter >= 100 then
20833: LD_VAR 0 3
20837: PUSH
20838: LD_INT 100
20840: GREATEREQUAL
20841: IFFALSE 21027
// begin ChangeMissionObjectives ( MOutMine ) ;
20843: LD_STRING MOutMine
20845: PPUSH
20846: CALL_OW 337
// dial_EndMissionDialogBlocker = true ;
20850: LD_ADDR_EXP 14
20854: PUSH
20855: LD_INT 1
20857: ST_TO_ADDR
// DialogueOn ;
20858: CALL_OW 6
// SayRadio ( Platonov , DNextMiss1-Pla-1 ) ;
20862: LD_EXP 47
20866: PPUSH
20867: LD_STRING DNextMiss1-Pla-1
20869: PPUSH
20870: CALL_OW 94
// if not savedVsevolod then
20874: LD_EXP 19
20878: NOT
20879: IFFALSE 20925
// begin SayRadio ( Platonov , DNextMiss2-Pla-1 ) ;
20881: LD_EXP 47
20885: PPUSH
20886: LD_STRING DNextMiss2-Pla-1
20888: PPUSH
20889: CALL_OW 94
// Say ( Burlak , DNextMiss4-Bur-1 ) ;
20893: LD_EXP 39
20897: PPUSH
20898: LD_STRING DNextMiss4-Bur-1
20900: PPUSH
20901: CALL_OW 88
// SayRadio ( Vsevolod , DDieVsev1-Vse-1 ) ;
20905: LD_EXP 51
20909: PPUSH
20910: LD_STRING DDieVsev1-Vse-1
20912: PPUSH
20913: CALL_OW 94
// ForceFinishGame ;
20917: CALL 21708 0 0
// exit ;
20921: GO 21035
// end else
20923: GO 20961
// begin SayRadio ( Platonov , DNextMiss3-Pla-1 ) ;
20925: LD_EXP 47
20929: PPUSH
20930: LD_STRING DNextMiss3-Pla-1
20932: PPUSH
20933: CALL_OW 94
// SayRadio ( Platonov , DNextMiss4-Pla-1 ) ;
20937: LD_EXP 47
20941: PPUSH
20942: LD_STRING DNextMiss4-Pla-1
20944: PPUSH
20945: CALL_OW 94
// Say ( Burlak , DNextMiss4-Bur-1 ) ;
20949: LD_EXP 39
20953: PPUSH
20954: LD_STRING DNextMiss4-Bur-1
20956: PPUSH
20957: CALL_OW 88
// end ; DialogueOff ;
20961: CALL_OW 7
// SelectCharacters ;
20965: CALL 14953 0 0
// canSpawnReinforces = true ;
20969: LD_ADDR_EXP 23
20973: PUSH
20974: LD_INT 1
20976: ST_TO_ADDR
// canRemoveUnits = true ;
20977: LD_ADDR_EXP 25
20981: PUSH
20982: LD_INT 1
20984: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_friend , true ) ;
20985: LD_INT 1
20987: PPUSH
20988: LD_INT 6
20990: PPUSH
20991: LD_INT 1
20993: PPUSH
20994: LD_INT 1
20996: PPUSH
20997: CALL_OW 80
// SetAreaMapShow ( ExitMapArea , 1 ) ;
21001: LD_INT 14
21003: PPUSH
21004: LD_INT 1
21006: PPUSH
21007: CALL_OW 424
// ChangeMissionObjectives ( MOutResearch ) ;
21011: LD_STRING MOutResearch
21013: PPUSH
21014: CALL_OW 337
// ChangeMissionObjectives ( MCars ) ;
21018: LD_STRING MCars
21020: PPUSH
21021: CALL_OW 337
// exit ;
21025: GO 21035
// end ; wait ( 0 0$10 ) ;
21027: LD_INT 350
21029: PPUSH
21030: CALL_OW 67
// enable ;
21034: ENABLE
// end ;
21035: PPOPN 3
21037: END
// every 0 0$1 trigger canRemoveUnits do var un ;
21038: LD_EXP 25
21042: IFFALSE 21152
21044: GO 21046
21046: DISABLE
21047: LD_INT 0
21049: PPUSH
// begin enable ;
21050: ENABLE
// SetLives ( Vsevolod , 1000 ) ;
21051: LD_EXP 51
21055: PPUSH
21056: LD_INT 1000
21058: PPUSH
21059: CALL_OW 234
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , ExitMapArea ) ;
21063: LD_INT 22
21065: PUSH
21066: LD_INT 6
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: LD_INT 21
21075: PUSH
21076: LD_INT 1
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PPUSH
21087: CALL_OW 69
21091: PPUSH
21092: LD_INT 14
21094: PPUSH
21095: CALL_OW 113
// for un in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
21099: LD_ADDR_VAR 0 1
21103: PUSH
21104: LD_INT 14
21106: PPUSH
21107: LD_INT 22
21109: PUSH
21110: LD_INT 6
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PUSH
21117: LD_INT 21
21119: PUSH
21120: LD_INT 1
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PPUSH
21131: CALL_OW 70
21135: PUSH
21136: FOR_IN
21137: IFFALSE 21150
// RemoveUnit ( un ) ;
21139: LD_VAR 0 1
21143: PPUSH
21144: CALL_OW 64
21148: GO 21136
21150: POP
21151: POP
// end ;
21152: PPOPN 1
21154: END
// every 1 trigger not canGoNorth and FilterUnitsInArea ( NorthBlockerArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do var unit ;
21155: LD_EXP 21
21159: NOT
21160: PUSH
21161: LD_INT 15
21163: PPUSH
21164: LD_INT 22
21166: PUSH
21167: LD_INT 3
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: LD_INT 50
21176: PUSH
21177: EMPTY
21178: LIST
21179: PUSH
21180: LD_INT 2
21182: PUSH
21183: LD_INT 21
21185: PUSH
21186: LD_INT 1
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 21
21195: PUSH
21196: LD_INT 2
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: LIST
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: LIST
21212: PPUSH
21213: CALL_OW 70
21217: AND
21218: IFFALSE 21350
21220: GO 21222
21222: DISABLE
21223: LD_INT 0
21225: PPUSH
// begin enable ;
21226: ENABLE
// for unit in FilterUnitsInArea ( NorthBlockerArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
21227: LD_ADDR_VAR 0 1
21231: PUSH
21232: LD_INT 15
21234: PPUSH
21235: LD_INT 22
21237: PUSH
21238: LD_INT 3
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PUSH
21245: LD_INT 50
21247: PUSH
21248: EMPTY
21249: LIST
21250: PUSH
21251: LD_INT 2
21253: PUSH
21254: LD_INT 21
21256: PUSH
21257: LD_INT 1
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 21
21266: PUSH
21267: LD_INT 2
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: LIST
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: LIST
21283: PPUSH
21284: CALL_OW 70
21288: PUSH
21289: FOR_IN
21290: IFFALSE 21306
// ComMoveToArea ( unit , NorthBlockerReturnArea ) ;
21292: LD_VAR 0 1
21296: PPUSH
21297: LD_INT 16
21299: PPUSH
21300: CALL_OW 113
21304: GO 21289
21306: POP
21307: POP
// if not dial_NorthBlocker then
21308: LD_EXP 13
21312: NOT
21313: IFFALSE 21350
// begin dial_NorthBlocker = true ;
21315: LD_ADDR_EXP 13
21319: PUSH
21320: LD_INT 1
21322: ST_TO_ADDR
// Say ( Burlak , DMoveNorth-Bur-1 ) ;
21323: LD_EXP 39
21327: PPUSH
21328: LD_STRING DMoveNorth-Bur-1
21330: PPUSH
21331: CALL_OW 88
// wait ( 0 0$5 ) ;
21335: LD_INT 175
21337: PPUSH
21338: CALL_OW 67
// dial_NorthBlocker = false ;
21342: LD_ADDR_EXP 13
21346: PUSH
21347: LD_INT 0
21349: ST_TO_ADDR
// end ; end ;
21350: PPOPN 1
21352: END
// every 2 2$30 trigger canSpawnReinforces do
21353: LD_EXP 23
21357: IFFALSE 21413
21359: GO 21361
21361: DISABLE
// begin SpawnPlatonovReinforces ;
21362: CALL 2516 0 0
// CenterOnXY ( 134 , 233 ) ;
21366: LD_INT 134
21368: PPUSH
21369: LD_INT 233
21371: PPUSH
21372: CALL_OW 84
// if Kirilenkova and IsPlaced ( Kirilenkova ) then
21376: LD_EXP 48
21380: PUSH
21381: LD_EXP 48
21385: PPUSH
21386: CALL_OW 305
21390: AND
21391: IFFALSE 21405
// Say ( Kirilenkova , DMeetKirilenkova-Kir-1 ) ;
21393: LD_EXP 48
21397: PPUSH
21398: LD_STRING DMeetKirilenkova-Kir-1
21400: PPUSH
21401: CALL_OW 88
// canEndMission = true ;
21405: LD_ADDR_EXP 24
21409: PUSH
21410: LD_INT 1
21412: ST_TO_ADDR
// end ; end_of_file
21413: END
// export function Lose_Burlak ; begin
21414: LD_INT 0
21416: PPUSH
// YouLost ( Burlak ) ;
21417: LD_STRING Burlak
21419: PPUSH
21420: CALL_OW 104
// end ;
21424: LD_VAR 0 1
21428: RET
// export function Lose_Gleb ; begin
21429: LD_INT 0
21431: PPUSH
// SayRadio ( Platonov , DKillGleb-Pla-1 ) ;
21432: LD_EXP 47
21436: PPUSH
21437: LD_STRING DKillGleb-Pla-1
21439: PPUSH
21440: CALL_OW 94
// YouLost ( Gleb ) ;
21444: LD_STRING Gleb
21446: PPUSH
21447: CALL_OW 104
// end ;
21451: LD_VAR 0 1
21455: RET
// every 0 0$1 trigger not canEndMission and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_engineer ] , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
21456: LD_EXP 24
21460: NOT
21461: PUSH
21462: LD_INT 22
21464: PUSH
21465: LD_INT 3
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 2
21474: PUSH
21475: LD_INT 25
21477: PUSH
21478: LD_INT 2
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 30
21487: PUSH
21488: LD_INT 1
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 30
21497: PUSH
21498: LD_INT 0
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: LD_INT 30
21507: PUSH
21508: LD_INT 6
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 30
21517: PUSH
21518: LD_INT 7
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: LD_INT 30
21527: PUSH
21528: LD_INT 8
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PPUSH
21548: CALL_OW 69
21552: NOT
21553: AND
21554: IFFALSE 21566
21556: GO 21558
21558: DISABLE
// YouLost ( NoDepotNoEngineerNoLab ) ;
21559: LD_STRING NoDepotNoEngineerNoLab
21561: PPUSH
21562: CALL_OW 104
21566: END
// export function Lose_NoDepotNoEngineerNoLab ; begin
21567: LD_INT 0
21569: PPUSH
// YouLost ( NoDepotNoEngineerNoLab ) ;
21570: LD_STRING NoDepotNoEngineerNoLab
21572: PPUSH
21573: CALL_OW 104
// end ; end_of_file
21577: LD_VAR 0 1
21581: RET
// every 0 0$5 trigger canEndMission and not FilterUnitsExceptArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_and , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ] ) do var units , qr ;
21582: LD_EXP 24
21586: PUSH
21587: LD_INT 14
21589: PPUSH
21590: LD_INT 22
21592: PUSH
21593: LD_INT 3
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 50
21602: PUSH
21603: EMPTY
21604: LIST
21605: PUSH
21606: LD_INT 2
21608: PUSH
21609: LD_INT 21
21611: PUSH
21612: LD_INT 1
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 1
21621: PUSH
21622: LD_INT 21
21624: PUSH
21625: LD_INT 2
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 59
21634: PUSH
21635: EMPTY
21636: LIST
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: LIST
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: LIST
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: LIST
21652: PPUSH
21653: CALL_OW 71
21657: NOT
21658: AND
21659: IFFALSE 21705
21661: GO 21663
21663: DISABLE
21664: LD_INT 0
21666: PPUSH
21667: PPUSH
// begin case Query ( QEndGame ) of 1 :
21668: LD_STRING QEndGame
21670: PPUSH
21671: CALL_OW 97
21675: PUSH
21676: LD_INT 1
21678: DOUBLE
21679: EQUAL
21680: IFTRUE 21684
21682: GO 21703
21684: POP
// begin SetRewards ;
21685: CALL 21732 0 0
// SavePlayerCharacters ;
21689: CALL 21896 0 0
// SaveGlobalVariables ;
21693: CALL 22285 0 0
// YouWin ;
21697: CALL_OW 103
// end ; end ;
21701: GO 21704
21703: POP
// enable ;
21704: ENABLE
// end ;
21705: PPOPN 2
21707: END
// export function ForceFinishGame ; begin
21708: LD_INT 0
21710: PPUSH
// SetRewards ;
21711: CALL 21732 0 0
// SavePlayerCharacters ;
21715: CALL 21896 0 0
// SaveGlobalVariables ;
21719: CALL 22285 0 0
// YouWin ;
21723: CALL_OW 103
// end ;
21727: LD_VAR 0 1
21731: RET
// function SetRewards ; begin
21732: LD_INT 0
21734: PPUSH
// if savedVsevolod then
21735: LD_EXP 19
21739: IFFALSE 21753
// AddMedal ( Vsevolod , 1 ) else
21741: LD_STRING Vsevolod
21743: PPUSH
21744: LD_INT 1
21746: PPUSH
21747: CALL_OW 101
21751: GO 21764
// AddMedal ( Vsevolod , - 1 ) ;
21753: LD_STRING Vsevolod
21755: PPUSH
21756: LD_INT 1
21758: NEG
21759: PPUSH
21760: CALL_OW 101
// if not lostAgainBase then
21764: LD_EXP 17
21768: NOT
21769: IFFALSE 21783
// AddMedal ( Ovsyenko , 1 ) else
21771: LD_STRING Ovsyenko
21773: PPUSH
21774: LD_INT 1
21776: PPUSH
21777: CALL_OW 101
21781: GO 21794
// AddMedal ( Ovsyenko , - 1 ) ;
21783: LD_STRING Ovsyenko
21785: PPUSH
21786: LD_INT 1
21788: NEG
21789: PPUSH
21790: CALL_OW 101
// if GetTech ( tech_MatPred , 3 ) = state_researched then
21794: LD_INT 9
21796: PPUSH
21797: LD_INT 3
21799: PPUSH
21800: CALL_OW 321
21804: PUSH
21805: LD_INT 2
21807: EQUAL
21808: IFFALSE 21822
// AddMedal ( Prediction , 1 ) else
21810: LD_STRING Prediction
21812: PPUSH
21813: LD_INT 1
21815: PPUSH
21816: CALL_OW 101
21820: GO 21833
// AddMedal ( Prediction , - 1 ) ;
21822: LD_STRING Prediction
21824: PPUSH
21825: LD_INT 1
21827: NEG
21828: PPUSH
21829: CALL_OW 101
// GiveMedals ( Main ) ;
21833: LD_STRING Main
21835: PPUSH
21836: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ) ;
21840: LD_INT 22
21842: PUSH
21843: LD_INT 3
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 21
21852: PUSH
21853: LD_INT 1
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 23
21862: PUSH
21863: LD_INT 3
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 50
21872: PUSH
21873: EMPTY
21874: LIST
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: PPUSH
21882: CALL_OW 69
21886: PPUSH
21887: CALL_OW 43
// end ;
21891: LD_VAR 0 1
21895: RET
// function SavePlayerCharacters ; var randomsToSave ; begin
21896: LD_INT 0
21898: PPUSH
21899: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
21900: LD_EXP 39
21904: PPUSH
21905: LD_STRING Burlak
21907: PPUSH
21908: LD_INT 3
21910: PPUSH
21911: CALL 11483 0 3
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
21915: LD_EXP 40
21919: PPUSH
21920: LD_STRING Karamazov
21922: PPUSH
21923: LD_INT 3
21925: PPUSH
21926: CALL 11483 0 3
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
21930: LD_EXP 41
21934: PPUSH
21935: LD_STRING Petrovova
21937: PPUSH
21938: LD_INT 3
21940: PPUSH
21941: CALL 11483 0 3
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
21945: LD_EXP 42
21949: PPUSH
21950: LD_STRING Gleb
21952: PPUSH
21953: LD_INT 3
21955: PPUSH
21956: CALL 11483 0 3
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
21960: LD_EXP 43
21964: PPUSH
21965: LD_STRING Petrosyan
21967: PPUSH
21968: LD_INT 3
21970: PPUSH
21971: CALL 11483 0 3
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
21975: LD_EXP 45
21979: PPUSH
21980: LD_STRING Dolgov
21982: PPUSH
21983: LD_INT 3
21985: PPUSH
21986: CALL 11483 0 3
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
21990: LD_EXP 46
21994: PPUSH
21995: LD_STRING Lipshchin
21997: PPUSH
21998: LD_INT 3
22000: PPUSH
22001: CALL 11483 0 3
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
22005: LD_EXP 44
22009: PPUSH
22010: LD_STRING Titov
22012: PPUSH
22013: LD_INT 3
22015: PPUSH
22016: CALL 11483 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
22020: LD_EXP 48
22024: PPUSH
22025: LD_STRING Kirilenkova
22027: PPUSH
22028: LD_INT 3
22030: PPUSH
22031: CALL 11483 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
22035: LD_EXP 49
22039: PPUSH
22040: LD_STRING Belkov
22042: PPUSH
22043: LD_INT 3
22045: PPUSH
22046: CALL 11483 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
22050: LD_EXP 50
22054: PPUSH
22055: LD_STRING Belkov2
22057: PPUSH
22058: LD_INT 3
22060: PPUSH
22061: CALL 11483 0 3
// ExtSaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
22065: LD_INT 22
22067: PUSH
22068: LD_INT 3
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 21
22077: PUSH
22078: LD_INT 1
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 2
22087: PUSH
22088: LD_INT 25
22090: PUSH
22091: LD_INT 12
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 25
22100: PUSH
22101: LD_INT 16
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 25
22110: PUSH
22111: LD_INT 15
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: LIST
22128: PPUSH
22129: CALL_OW 69
22133: PPUSH
22134: LD_STRING other_apemans
22136: PPUSH
22137: LD_INT 3
22139: PPUSH
22140: CALL 11539 0 3
// randomsToSave = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 ] ;
22144: LD_ADDR_VAR 0 2
22148: PUSH
22149: LD_INT 22
22151: PUSH
22152: LD_INT 3
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 21
22161: PUSH
22162: LD_INT 1
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 23
22171: PUSH
22172: LD_INT 3
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 50
22181: PUSH
22182: EMPTY
22183: LIST
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: PPUSH
22191: CALL_OW 69
22195: PUSH
22196: LD_EXP 39
22200: PUSH
22201: LD_EXP 40
22205: PUSH
22206: LD_EXP 41
22210: PUSH
22211: LD_EXP 42
22215: PUSH
22216: LD_EXP 43
22220: PUSH
22221: LD_EXP 44
22225: PUSH
22226: LD_EXP 45
22230: PUSH
22231: LD_EXP 46
22235: PUSH
22236: LD_EXP 48
22240: PUSH
22241: LD_EXP 49
22245: PUSH
22246: LD_EXP 50
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: DIFF
22264: ST_TO_ADDR
// ExtSaveCharacters ( randomsToSave , other_survivors , 3 ) ;
22265: LD_VAR 0 2
22269: PPUSH
22270: LD_STRING other_survivors
22272: PPUSH
22273: LD_INT 3
22275: PPUSH
22276: CALL 11539 0 3
// end ;
22280: LD_VAR 0 1
22284: RET
// function SaveGlobalVariables ; var i , driver , driverShortName ; begin
22285: LD_INT 0
22287: PPUSH
22288: PPUSH
22289: PPUSH
22290: PPUSH
// resourcesFrom06 = [ ] ;
22291: LD_ADDR_EXP 8
22295: PUSH
22296: EMPTY
22297: ST_TO_ADDR
// SaveVariable ( techMatPredStatus , 06_TechMatPredStatus_1 ) ;
22298: LD_EXP 6
22302: PPUSH
22303: LD_STRING 06_TechMatPredStatus_1
22305: PPUSH
22306: CALL_OW 39
// for i in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_occupied ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , 89 ] ] ] ) do
22310: LD_ADDR_VAR 0 2
22314: PUSH
22315: LD_INT 14
22317: PPUSH
22318: LD_INT 22
22320: PUSH
22321: LD_INT 3
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 59
22330: PUSH
22331: EMPTY
22332: LIST
22333: PUSH
22334: LD_INT 2
22336: PUSH
22337: LD_INT 34
22339: PUSH
22340: LD_INT 51
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: LD_INT 34
22349: PUSH
22350: LD_INT 32
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 34
22359: PUSH
22360: LD_INT 12
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 34
22369: PUSH
22370: LD_INT 89
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: LIST
22388: PPUSH
22389: CALL_OW 70
22393: PUSH
22394: FOR_IN
22395: IFFALSE 22423
// resourcesFrom06 = resourcesFrom06 ^ [ GetMultiCargo ( i ) ] ;
22397: LD_ADDR_EXP 8
22401: PUSH
22402: LD_EXP 8
22406: PUSH
22407: LD_VAR 0 2
22411: PPUSH
22412: CALL 14606 0 1
22416: PUSH
22417: EMPTY
22418: LIST
22419: ADD
22420: ST_TO_ADDR
22421: GO 22394
22423: POP
22424: POP
// SaveVariable ( resourcesFrom06 , 06_ResourcesInCargo_3 ) ;
22425: LD_EXP 8
22429: PPUSH
22430: LD_STRING 06_ResourcesInCargo_3
22432: PPUSH
22433: CALL_OW 39
// for i in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ) do
22437: LD_ADDR_VAR 0 2
22441: PUSH
22442: LD_INT 14
22444: PPUSH
22445: LD_INT 22
22447: PUSH
22448: LD_INT 3
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: LD_INT 21
22457: PUSH
22458: LD_INT 2
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: LD_INT 59
22467: PUSH
22468: EMPTY
22469: LIST
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: LIST
22475: PPUSH
22476: CALL_OW 70
22480: PUSH
22481: FOR_IN
22482: IFFALSE 22886
// begin driver = UnitsInside ( i ) [ 1 ] ;
22484: LD_ADDR_VAR 0 3
22488: PUSH
22489: LD_VAR 0 2
22493: PPUSH
22494: CALL_OW 313
22498: PUSH
22499: LD_INT 1
22501: ARRAY
22502: ST_TO_ADDR
// if driver = Burlak then
22503: LD_VAR 0 3
22507: PUSH
22508: LD_EXP 39
22512: EQUAL
22513: IFFALSE 22523
// driverShortName = Bur ;
22515: LD_ADDR_VAR 0 4
22519: PUSH
22520: LD_STRING Bur
22522: ST_TO_ADDR
// if driver = Karamazov then
22523: LD_VAR 0 3
22527: PUSH
22528: LD_EXP 40
22532: EQUAL
22533: IFFALSE 22543
// driverShortName = Kar ;
22535: LD_ADDR_VAR 0 4
22539: PUSH
22540: LD_STRING Kar
22542: ST_TO_ADDR
// if driver = Petrovova then
22543: LD_VAR 0 3
22547: PUSH
22548: LD_EXP 41
22552: EQUAL
22553: IFFALSE 22563
// driverShortName = Ptr ;
22555: LD_ADDR_VAR 0 4
22559: PUSH
22560: LD_STRING Ptr
22562: ST_TO_ADDR
// if driver = Gleb then
22563: LD_VAR 0 3
22567: PUSH
22568: LD_EXP 42
22572: EQUAL
22573: IFFALSE 22583
// driverShortName = Glb ;
22575: LD_ADDR_VAR 0 4
22579: PUSH
22580: LD_STRING Glb
22582: ST_TO_ADDR
// if driver = Petrosyan then
22583: LD_VAR 0 3
22587: PUSH
22588: LD_EXP 43
22592: EQUAL
22593: IFFALSE 22603
// driverShortName = Pet ;
22595: LD_ADDR_VAR 0 4
22599: PUSH
22600: LD_STRING Pet
22602: ST_TO_ADDR
// if driver = Dolgov then
22603: LD_VAR 0 3
22607: PUSH
22608: LD_EXP 45
22612: EQUAL
22613: IFFALSE 22623
// driverShortName = Dol ;
22615: LD_ADDR_VAR 0 4
22619: PUSH
22620: LD_STRING Dol
22622: ST_TO_ADDR
// if driver = Lipshchin then
22623: LD_VAR 0 3
22627: PUSH
22628: LD_EXP 46
22632: EQUAL
22633: IFFALSE 22643
// driverShortName = Lip ;
22635: LD_ADDR_VAR 0 4
22639: PUSH
22640: LD_STRING Lip
22642: ST_TO_ADDR
// if driver = Titov then
22643: LD_VAR 0 3
22647: PUSH
22648: LD_EXP 44
22652: EQUAL
22653: IFFALSE 22663
// driverShortName = Tit ;
22655: LD_ADDR_VAR 0 4
22659: PUSH
22660: LD_STRING Tit
22662: ST_TO_ADDR
// if driver = Kirilenkova then
22663: LD_VAR 0 3
22667: PUSH
22668: LD_EXP 48
22672: EQUAL
22673: IFFALSE 22683
// driverShortName = Kir ;
22675: LD_ADDR_VAR 0 4
22679: PUSH
22680: LD_STRING Kir
22682: ST_TO_ADDR
// if driver = Belkov then
22683: LD_VAR 0 3
22687: PUSH
22688: LD_EXP 49
22692: EQUAL
22693: IFFALSE 22703
// driverShortName = Bel ;
22695: LD_ADDR_VAR 0 4
22699: PUSH
22700: LD_STRING Bel
22702: ST_TO_ADDR
// if driver = Belkov2 then
22703: LD_VAR 0 3
22707: PUSH
22708: LD_EXP 50
22712: EQUAL
22713: IFFALSE 22723
// driverShortName = Bel2 ;
22715: LD_ADDR_VAR 0 4
22719: PUSH
22720: LD_STRING Bel2
22722: ST_TO_ADDR
// if not driver in [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 ] then
22723: LD_VAR 0 3
22727: PUSH
22728: LD_EXP 39
22732: PUSH
22733: LD_EXP 40
22737: PUSH
22738: LD_EXP 41
22742: PUSH
22743: LD_EXP 42
22747: PUSH
22748: LD_EXP 43
22752: PUSH
22753: LD_EXP 44
22757: PUSH
22758: LD_EXP 45
22762: PUSH
22763: LD_EXP 46
22767: PUSH
22768: LD_EXP 48
22772: PUSH
22773: LD_EXP 49
22777: PUSH
22778: LD_EXP 50
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: IN
22796: NOT
22797: IFFALSE 22807
// driverShortName = rand ;
22799: LD_ADDR_VAR 0 4
22803: PUSH
22804: LD_STRING rand
22806: ST_TO_ADDR
// vehsFrom06 = vehsFrom06 ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , driverShortName ] ] ;
22807: LD_ADDR_EXP 7
22811: PUSH
22812: LD_EXP 7
22816: PUSH
22817: LD_VAR 0 2
22821: PPUSH
22822: CALL_OW 248
22826: PUSH
22827: LD_VAR 0 2
22831: PPUSH
22832: CALL_OW 265
22836: PUSH
22837: LD_VAR 0 2
22841: PPUSH
22842: CALL_OW 262
22846: PUSH
22847: LD_VAR 0 2
22851: PPUSH
22852: CALL_OW 263
22856: PUSH
22857: LD_VAR 0 2
22861: PPUSH
22862: CALL_OW 264
22866: PUSH
22867: LD_VAR 0 4
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: PUSH
22880: EMPTY
22881: LIST
22882: ADD
22883: ST_TO_ADDR
// end ;
22884: GO 22481
22886: POP
22887: POP
// SaveVariable ( vehsFrom06 , 06_Vehicles_2 ) ;
22888: LD_EXP 7
22892: PPUSH
22893: LD_STRING 06_Vehicles_2
22895: PPUSH
22896: CALL_OW 39
// SaveVariable ( savedVsevolod , 06_VsevolodStatus_4 ) ;
22900: LD_EXP 19
22904: PPUSH
22905: LD_STRING 06_VsevolodStatus_4
22907: PPUSH
22908: CALL_OW 39
// end ; end_of_file
22912: LD_VAR 0 1
22916: RET
// on UnitDestroyed ( unit ) do begin if unit in ovsyenkoBase then
22917: LD_VAR 0 1
22921: PUSH
22922: LD_EXP 56
22926: IN
22927: IFFALSE 22945
// ovsyenkoBase = ovsyenkoBase diff unit ;
22929: LD_ADDR_EXP 56
22933: PUSH
22934: LD_EXP 56
22938: PUSH
22939: LD_VAR 0 1
22943: DIFF
22944: ST_TO_ADDR
// if unit = Burlak then
22945: LD_VAR 0 1
22949: PUSH
22950: LD_EXP 39
22954: EQUAL
22955: IFFALSE 22961
// Lose_Burlak ;
22957: CALL 21414 0 0
// if unit = Vsevolod and GetSide ( Vsevolod ) = 3 then
22961: LD_VAR 0 1
22965: PUSH
22966: LD_EXP 51
22970: EQUAL
22971: PUSH
22972: LD_EXP 51
22976: PPUSH
22977: CALL_OW 255
22981: PUSH
22982: LD_INT 3
22984: EQUAL
22985: AND
22986: IFFALSE 22996
// savedVsevolod = false ;
22988: LD_ADDR_EXP 19
22992: PUSH
22993: LD_INT 0
22995: ST_TO_ADDR
// if unit = ovsyenko and GetSide ( ovsyenko ) = 3 then
22996: LD_VAR 0 1
23000: PUSH
23001: LD_INT 86
23003: EQUAL
23004: PUSH
23005: LD_INT 86
23007: PPUSH
23008: CALL_OW 255
23012: PUSH
23013: LD_INT 3
23015: EQUAL
23016: AND
23017: IFFALSE 23027
// lostAgainBase = true ;
23019: LD_ADDR_EXP 17
23023: PUSH
23024: LD_INT 1
23026: ST_TO_ADDR
// end ;
23027: PPOPN 1
23029: END
// on UnitDestroyed_Extra ( unit , killer_side , killer_unit ) do begin if unit = Gleb and killer_side = 3 then
23030: LD_VAR 0 1
23034: PUSH
23035: LD_EXP 42
23039: EQUAL
23040: PUSH
23041: LD_VAR 0 2
23045: PUSH
23046: LD_INT 3
23048: EQUAL
23049: AND
23050: IFFALSE 23056
// Lose_Gleb ;
23052: CALL 21429 0 0
// if unit = Vsevolod then
23056: LD_VAR 0 1
23060: PUSH
23061: LD_EXP 51
23065: EQUAL
23066: IFFALSE 23076
// savedVsevolod = false ;
23068: LD_ADDR_EXP 19
23072: PUSH
23073: LD_INT 0
23075: ST_TO_ADDR
// end ;
23076: PPOPN 3
23078: END
// on BuildingComplete ( building ) do begin end ;
23079: PPOPN 1
23081: END
// on BuildingCaptured ( building , side , human ) do begin if GetSide ( human ) = 3 and GetBType ( building ) = b_siberite_mine and not dial_SibTechsBlocker then
23082: LD_VAR 0 3
23086: PPUSH
23087: CALL_OW 255
23091: PUSH
23092: LD_INT 3
23094: EQUAL
23095: PUSH
23096: LD_VAR 0 1
23100: PPUSH
23101: CALL_OW 266
23105: PUSH
23106: LD_INT 30
23108: EQUAL
23109: AND
23110: PUSH
23111: LD_EXP 9
23115: NOT
23116: AND
23117: IFFALSE 23123
// Dial_SibTechs ;
23119: CALL 16811 0 0
// if GetSide ( human ) = 3 and GetBType ( building ) in [ b_depot , b_warehouse ] and GetResourceType ( GetBase ( building ) , mat_siberit ) > 0 and not dial_SibTechsBlocker then
23123: LD_VAR 0 3
23127: PPUSH
23128: CALL_OW 255
23132: PUSH
23133: LD_INT 3
23135: EQUAL
23136: PUSH
23137: LD_VAR 0 1
23141: PPUSH
23142: CALL_OW 266
23146: PUSH
23147: LD_INT 0
23149: PUSH
23150: LD_INT 1
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: IN
23157: AND
23158: PUSH
23159: LD_VAR 0 1
23163: PPUSH
23164: CALL_OW 274
23168: PPUSH
23169: LD_INT 3
23171: PPUSH
23172: CALL_OW 275
23176: PUSH
23177: LD_INT 0
23179: GREATER
23180: AND
23181: PUSH
23182: LD_EXP 9
23186: NOT
23187: AND
23188: IFFALSE 23194
// Dial_SibTechs ;
23190: CALL 16811 0 0
// end ;
23194: PPOPN 3
23196: END
// on Contact ( side1 , side2 ) do begin end ;
23197: PPOPN 2
23199: END
// on VehicleConstructed ( vehicle , building ) do var side , controlTowers , tmp ;
23200: LD_INT 0
23202: PPUSH
23203: PPUSH
23204: PPUSH
// begin if GetSide ( vehicle ) = 1 then
23205: LD_VAR 0 1
23209: PPUSH
23210: CALL_OW 255
23214: PUSH
23215: LD_INT 1
23217: EQUAL
23218: IFFALSE 23385
// begin controlTowers = FilterUnitsInArea ( HeadAmericanBaseArea , [ [ f_side , 1 ] , [ f_ok ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_vehicle ] ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23220: LD_ADDR_VAR 0 4
23224: PUSH
23225: LD_INT 5
23227: PPUSH
23228: LD_INT 22
23230: PUSH
23231: LD_INT 1
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 50
23240: PUSH
23241: EMPTY
23242: LIST
23243: PUSH
23244: LD_INT 2
23246: PUSH
23247: LD_INT 21
23249: PUSH
23250: LD_INT 3
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: LD_INT 21
23259: PUSH
23260: LD_INT 2
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: LIST
23271: PUSH
23272: LD_INT 2
23274: PUSH
23275: LD_INT 30
23277: PUSH
23278: LD_INT 36
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PUSH
23285: LD_INT 34
23287: PUSH
23288: LD_INT 31
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: LIST
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: PPUSH
23306: CALL_OW 70
23310: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote and controlTowers then
23311: LD_VAR 0 1
23315: PPUSH
23316: CALL_OW 263
23320: PUSH
23321: LD_INT 2
23323: EQUAL
23324: PUSH
23325: LD_VAR 0 4
23329: AND
23330: IFFALSE 23385
// begin tmp = UnitsInside ( controlTowers [ 1 ] ) ;
23332: LD_ADDR_VAR 0 5
23336: PUSH
23337: LD_VAR 0 4
23341: PUSH
23342: LD_INT 1
23344: ARRAY
23345: PPUSH
23346: CALL_OW 313
23350: ST_TO_ADDR
// if tmp then
23351: LD_VAR 0 5
23355: IFFALSE 23385
// LinkVehicleToHuman ( vehicle , tmp [ rand ( 1 , tmp ) ] ) ;
23357: LD_VAR 0 1
23361: PPUSH
23362: LD_VAR 0 5
23366: PUSH
23367: LD_INT 1
23369: PPUSH
23370: LD_VAR 0 5
23374: PPUSH
23375: CALL_OW 12
23379: ARRAY
23380: PPUSH
23381: CALL_OW 53
// end ; end ; end ;
23385: PPOPN 5
23387: END
// on ResearchComplete ( research , building ) do begin if research = tech_TauField then
23388: LD_VAR 0 1
23392: PUSH
23393: LD_INT 30
23395: EQUAL
23396: IFFALSE 23402
// Dial_ResearchTauField ;
23398: CALL 20243 0 0
// if research = tech_SibEng and GetTech ( tech_TauField , 3 ) = state_researched then
23402: LD_VAR 0 1
23406: PUSH
23407: LD_INT 22
23409: EQUAL
23410: PUSH
23411: LD_INT 30
23413: PPUSH
23414: LD_INT 3
23416: PPUSH
23417: CALL_OW 321
23421: PUSH
23422: LD_INT 2
23424: EQUAL
23425: AND
23426: IFFALSE 23435
// ChangeMissionObjectives ( MOutResearch ) ;
23428: LD_STRING MOutResearch
23430: PPUSH
23431: CALL_OW 337
// if research = tech_MatPred then
23435: LD_VAR 0 1
23439: PUSH
23440: LD_INT 9
23442: EQUAL
23443: IFFALSE 23449
// Dial_ResearchMatPredictions ;
23445: CALL 16966 0 0
// end ; end_of_file
23449: PPOPN 2
23451: END
// every 0 0$1 trigger enableVsevolodCounter do
23452: LD_EXP 22
23456: IFFALSE 23476
23458: GO 23460
23460: DISABLE
// begin enable ;
23461: ENABLE
// timeToAttack = timeToAttack + 0 0$01 ;
23462: LD_ADDR_EXP 26
23466: PUSH
23467: LD_EXP 26
23471: PUSH
23472: LD_INT 35
23474: PLUS
23475: ST_TO_ADDR
// end ; end_of_file
23476: END
// every 0 0$01 do var timer ;
23477: GO 23479
23479: DISABLE
23480: LD_INT 0
23482: PPUSH
// begin timer := 5 5$30 ;
23483: LD_ADDR_VAR 0 1
23487: PUSH
23488: LD_INT 11550
23490: ST_TO_ADDR
// repeat wait ( timer ) ;
23491: LD_VAR 0 1
23495: PPUSH
23496: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
23500: LD_INT 3
23502: PPUSH
23503: LD_INT 5
23505: PPUSH
23506: CALL_OW 12
23510: PPUSH
23511: LD_INT 20
23513: PPUSH
23514: LD_INT 1
23516: PPUSH
23517: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
23521: LD_ADDR_EXP 27
23525: PUSH
23526: LD_EXP 27
23530: PUSH
23531: LD_INT 1
23533: PLUS
23534: ST_TO_ADDR
// until cratesSpawned = 3 ;
23535: LD_EXP 27
23539: PUSH
23540: LD_INT 3
23542: EQUAL
23543: IFFALSE 23491
// end ; end_of_file
23545: PPOPN 1
23547: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
23548: LD_INT 0
23550: PPUSH
// ar_miner := 81 ;
23551: LD_ADDR_EXP 69
23555: PUSH
23556: LD_INT 81
23558: ST_TO_ADDR
// ar_crane := 88 ;
23559: LD_ADDR_EXP 68
23563: PUSH
23564: LD_INT 88
23566: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
23567: LD_ADDR_EXP 63
23571: PUSH
23572: LD_INT 89
23574: ST_TO_ADDR
// us_hack := 99 ;
23575: LD_ADDR_EXP 64
23579: PUSH
23580: LD_INT 99
23582: ST_TO_ADDR
// us_artillery := 97 ;
23583: LD_ADDR_EXP 65
23587: PUSH
23588: LD_INT 97
23590: ST_TO_ADDR
// ar_bio_bomb := 91 ;
23591: LD_ADDR_EXP 66
23595: PUSH
23596: LD_INT 91
23598: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
23599: LD_ADDR_EXP 67
23603: PUSH
23604: LD_INT 92
23606: ST_TO_ADDR
// ru_radar := 98 ;
23607: LD_ADDR_EXP 62
23611: PUSH
23612: LD_INT 98
23614: ST_TO_ADDR
// tech_Artillery := 80 ;
23615: LD_ADDR_EXP 70
23619: PUSH
23620: LD_INT 80
23622: ST_TO_ADDR
// tech_RadMat := 81 ;
23623: LD_ADDR_EXP 71
23627: PUSH
23628: LD_INT 81
23630: ST_TO_ADDR
// tech_BasicTools := 82 ;
23631: LD_ADDR_EXP 72
23635: PUSH
23636: LD_INT 82
23638: ST_TO_ADDR
// tech_Cargo := 83 ;
23639: LD_ADDR_EXP 73
23643: PUSH
23644: LD_INT 83
23646: ST_TO_ADDR
// tech_Track := 84 ;
23647: LD_ADDR_EXP 74
23651: PUSH
23652: LD_INT 84
23654: ST_TO_ADDR
// tech_Crane := 85 ;
23655: LD_ADDR_EXP 75
23659: PUSH
23660: LD_INT 85
23662: ST_TO_ADDR
// tech_Bulldozer := 86 ;
23663: LD_ADDR_EXP 76
23667: PUSH
23668: LD_INT 86
23670: ST_TO_ADDR
// tech_Hovercraft := 87 ;
23671: LD_ADDR_EXP 77
23675: PUSH
23676: LD_INT 87
23678: ST_TO_ADDR
// end ;
23679: LD_VAR 0 1
23683: RET
// every 1 do
23684: GO 23686
23686: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
23687: CALL 23548 0 0
23691: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
23692: LD_VAR 0 2
23696: PUSH
23697: LD_INT 100
23699: EQUAL
23700: IFFALSE 24649
// begin if not StreamModeActive then
23702: LD_EXP 78
23706: NOT
23707: IFFALSE 23717
// StreamModeActive := true ;
23709: LD_ADDR_EXP 78
23713: PUSH
23714: LD_INT 1
23716: ST_TO_ADDR
// if p3 = 0 then
23717: LD_VAR 0 3
23721: PUSH
23722: LD_INT 0
23724: EQUAL
23725: IFFALSE 23731
// InitStreamMode ;
23727: CALL 24807 0 0
// if p3 = 1 then
23731: LD_VAR 0 3
23735: PUSH
23736: LD_INT 1
23738: EQUAL
23739: IFFALSE 23749
// sRocket := true ;
23741: LD_ADDR_EXP 83
23745: PUSH
23746: LD_INT 1
23748: ST_TO_ADDR
// if p3 = 2 then
23749: LD_VAR 0 3
23753: PUSH
23754: LD_INT 2
23756: EQUAL
23757: IFFALSE 23767
// sSpeed := true ;
23759: LD_ADDR_EXP 82
23763: PUSH
23764: LD_INT 1
23766: ST_TO_ADDR
// if p3 = 3 then
23767: LD_VAR 0 3
23771: PUSH
23772: LD_INT 3
23774: EQUAL
23775: IFFALSE 23785
// sEngine := true ;
23777: LD_ADDR_EXP 84
23781: PUSH
23782: LD_INT 1
23784: ST_TO_ADDR
// if p3 = 4 then
23785: LD_VAR 0 3
23789: PUSH
23790: LD_INT 4
23792: EQUAL
23793: IFFALSE 23803
// sSpec := true ;
23795: LD_ADDR_EXP 81
23799: PUSH
23800: LD_INT 1
23802: ST_TO_ADDR
// if p3 = 5 then
23803: LD_VAR 0 3
23807: PUSH
23808: LD_INT 5
23810: EQUAL
23811: IFFALSE 23821
// sLevel := true ;
23813: LD_ADDR_EXP 85
23817: PUSH
23818: LD_INT 1
23820: ST_TO_ADDR
// if p3 = 6 then
23821: LD_VAR 0 3
23825: PUSH
23826: LD_INT 6
23828: EQUAL
23829: IFFALSE 23839
// sArmoury := true ;
23831: LD_ADDR_EXP 86
23835: PUSH
23836: LD_INT 1
23838: ST_TO_ADDR
// if p3 = 7 then
23839: LD_VAR 0 3
23843: PUSH
23844: LD_INT 7
23846: EQUAL
23847: IFFALSE 23857
// sRadar := true ;
23849: LD_ADDR_EXP 87
23853: PUSH
23854: LD_INT 1
23856: ST_TO_ADDR
// if p3 = 8 then
23857: LD_VAR 0 3
23861: PUSH
23862: LD_INT 8
23864: EQUAL
23865: IFFALSE 23875
// sBunker := true ;
23867: LD_ADDR_EXP 88
23871: PUSH
23872: LD_INT 1
23874: ST_TO_ADDR
// if p3 = 9 then
23875: LD_VAR 0 3
23879: PUSH
23880: LD_INT 9
23882: EQUAL
23883: IFFALSE 23893
// sHack := true ;
23885: LD_ADDR_EXP 89
23889: PUSH
23890: LD_INT 1
23892: ST_TO_ADDR
// if p3 = 10 then
23893: LD_VAR 0 3
23897: PUSH
23898: LD_INT 10
23900: EQUAL
23901: IFFALSE 23911
// sFire := true ;
23903: LD_ADDR_EXP 90
23907: PUSH
23908: LD_INT 1
23910: ST_TO_ADDR
// if p3 = 11 then
23911: LD_VAR 0 3
23915: PUSH
23916: LD_INT 11
23918: EQUAL
23919: IFFALSE 23929
// sRefresh := true ;
23921: LD_ADDR_EXP 91
23925: PUSH
23926: LD_INT 1
23928: ST_TO_ADDR
// if p3 = 12 then
23929: LD_VAR 0 3
23933: PUSH
23934: LD_INT 12
23936: EQUAL
23937: IFFALSE 23947
// sExp := true ;
23939: LD_ADDR_EXP 92
23943: PUSH
23944: LD_INT 1
23946: ST_TO_ADDR
// if p3 = 13 then
23947: LD_VAR 0 3
23951: PUSH
23952: LD_INT 13
23954: EQUAL
23955: IFFALSE 23965
// sDepot := true ;
23957: LD_ADDR_EXP 93
23961: PUSH
23962: LD_INT 1
23964: ST_TO_ADDR
// if p3 = 14 then
23965: LD_VAR 0 3
23969: PUSH
23970: LD_INT 14
23972: EQUAL
23973: IFFALSE 23983
// sFlag := true ;
23975: LD_ADDR_EXP 94
23979: PUSH
23980: LD_INT 1
23982: ST_TO_ADDR
// if p3 = 15 then
23983: LD_VAR 0 3
23987: PUSH
23988: LD_INT 15
23990: EQUAL
23991: IFFALSE 24001
// sKamikadze := true ;
23993: LD_ADDR_EXP 102
23997: PUSH
23998: LD_INT 1
24000: ST_TO_ADDR
// if p3 = 16 then
24001: LD_VAR 0 3
24005: PUSH
24006: LD_INT 16
24008: EQUAL
24009: IFFALSE 24019
// sTroll := true ;
24011: LD_ADDR_EXP 103
24015: PUSH
24016: LD_INT 1
24018: ST_TO_ADDR
// if p3 = 17 then
24019: LD_VAR 0 3
24023: PUSH
24024: LD_INT 17
24026: EQUAL
24027: IFFALSE 24037
// sSlow := true ;
24029: LD_ADDR_EXP 104
24033: PUSH
24034: LD_INT 1
24036: ST_TO_ADDR
// if p3 = 18 then
24037: LD_VAR 0 3
24041: PUSH
24042: LD_INT 18
24044: EQUAL
24045: IFFALSE 24055
// sLack := true ;
24047: LD_ADDR_EXP 105
24051: PUSH
24052: LD_INT 1
24054: ST_TO_ADDR
// if p3 = 19 then
24055: LD_VAR 0 3
24059: PUSH
24060: LD_INT 19
24062: EQUAL
24063: IFFALSE 24073
// sTank := true ;
24065: LD_ADDR_EXP 107
24069: PUSH
24070: LD_INT 1
24072: ST_TO_ADDR
// if p3 = 20 then
24073: LD_VAR 0 3
24077: PUSH
24078: LD_INT 20
24080: EQUAL
24081: IFFALSE 24091
// sRemote := true ;
24083: LD_ADDR_EXP 108
24087: PUSH
24088: LD_INT 1
24090: ST_TO_ADDR
// if p3 = 21 then
24091: LD_VAR 0 3
24095: PUSH
24096: LD_INT 21
24098: EQUAL
24099: IFFALSE 24109
// sPowell := true ;
24101: LD_ADDR_EXP 109
24105: PUSH
24106: LD_INT 1
24108: ST_TO_ADDR
// if p3 = 22 then
24109: LD_VAR 0 3
24113: PUSH
24114: LD_INT 22
24116: EQUAL
24117: IFFALSE 24127
// sTeleport := true ;
24119: LD_ADDR_EXP 112
24123: PUSH
24124: LD_INT 1
24126: ST_TO_ADDR
// if p3 = 23 then
24127: LD_VAR 0 3
24131: PUSH
24132: LD_INT 23
24134: EQUAL
24135: IFFALSE 24145
// sOilTower := true ;
24137: LD_ADDR_EXP 114
24141: PUSH
24142: LD_INT 1
24144: ST_TO_ADDR
// if p3 = 24 then
24145: LD_VAR 0 3
24149: PUSH
24150: LD_INT 24
24152: EQUAL
24153: IFFALSE 24163
// sShovel := true ;
24155: LD_ADDR_EXP 115
24159: PUSH
24160: LD_INT 1
24162: ST_TO_ADDR
// if p3 = 25 then
24163: LD_VAR 0 3
24167: PUSH
24168: LD_INT 25
24170: EQUAL
24171: IFFALSE 24181
// sSheik := true ;
24173: LD_ADDR_EXP 116
24177: PUSH
24178: LD_INT 1
24180: ST_TO_ADDR
// if p3 = 26 then
24181: LD_VAR 0 3
24185: PUSH
24186: LD_INT 26
24188: EQUAL
24189: IFFALSE 24199
// sEarthquake := true ;
24191: LD_ADDR_EXP 118
24195: PUSH
24196: LD_INT 1
24198: ST_TO_ADDR
// if p3 = 27 then
24199: LD_VAR 0 3
24203: PUSH
24204: LD_INT 27
24206: EQUAL
24207: IFFALSE 24217
// sAI := true ;
24209: LD_ADDR_EXP 119
24213: PUSH
24214: LD_INT 1
24216: ST_TO_ADDR
// if p3 = 28 then
24217: LD_VAR 0 3
24221: PUSH
24222: LD_INT 28
24224: EQUAL
24225: IFFALSE 24235
// sCargo := true ;
24227: LD_ADDR_EXP 122
24231: PUSH
24232: LD_INT 1
24234: ST_TO_ADDR
// if p3 = 29 then
24235: LD_VAR 0 3
24239: PUSH
24240: LD_INT 29
24242: EQUAL
24243: IFFALSE 24253
// sDLaser := true ;
24245: LD_ADDR_EXP 123
24249: PUSH
24250: LD_INT 1
24252: ST_TO_ADDR
// if p3 = 30 then
24253: LD_VAR 0 3
24257: PUSH
24258: LD_INT 30
24260: EQUAL
24261: IFFALSE 24271
// sExchange := true ;
24263: LD_ADDR_EXP 124
24267: PUSH
24268: LD_INT 1
24270: ST_TO_ADDR
// if p3 = 31 then
24271: LD_VAR 0 3
24275: PUSH
24276: LD_INT 31
24278: EQUAL
24279: IFFALSE 24289
// sFac := true ;
24281: LD_ADDR_EXP 125
24285: PUSH
24286: LD_INT 1
24288: ST_TO_ADDR
// if p3 = 32 then
24289: LD_VAR 0 3
24293: PUSH
24294: LD_INT 32
24296: EQUAL
24297: IFFALSE 24307
// sPower := true ;
24299: LD_ADDR_EXP 126
24303: PUSH
24304: LD_INT 1
24306: ST_TO_ADDR
// if p3 = 33 then
24307: LD_VAR 0 3
24311: PUSH
24312: LD_INT 33
24314: EQUAL
24315: IFFALSE 24325
// sRandom := true ;
24317: LD_ADDR_EXP 127
24321: PUSH
24322: LD_INT 1
24324: ST_TO_ADDR
// if p3 = 34 then
24325: LD_VAR 0 3
24329: PUSH
24330: LD_INT 34
24332: EQUAL
24333: IFFALSE 24343
// sShield := true ;
24335: LD_ADDR_EXP 128
24339: PUSH
24340: LD_INT 1
24342: ST_TO_ADDR
// if p3 = 35 then
24343: LD_VAR 0 3
24347: PUSH
24348: LD_INT 35
24350: EQUAL
24351: IFFALSE 24361
// sTime := true ;
24353: LD_ADDR_EXP 129
24357: PUSH
24358: LD_INT 1
24360: ST_TO_ADDR
// if p3 = 36 then
24361: LD_VAR 0 3
24365: PUSH
24366: LD_INT 36
24368: EQUAL
24369: IFFALSE 24379
// sTools := true ;
24371: LD_ADDR_EXP 130
24375: PUSH
24376: LD_INT 1
24378: ST_TO_ADDR
// if p3 = 101 then
24379: LD_VAR 0 3
24383: PUSH
24384: LD_INT 101
24386: EQUAL
24387: IFFALSE 24397
// sSold := true ;
24389: LD_ADDR_EXP 95
24393: PUSH
24394: LD_INT 1
24396: ST_TO_ADDR
// if p3 = 102 then
24397: LD_VAR 0 3
24401: PUSH
24402: LD_INT 102
24404: EQUAL
24405: IFFALSE 24415
// sDiff := true ;
24407: LD_ADDR_EXP 96
24411: PUSH
24412: LD_INT 1
24414: ST_TO_ADDR
// if p3 = 103 then
24415: LD_VAR 0 3
24419: PUSH
24420: LD_INT 103
24422: EQUAL
24423: IFFALSE 24433
// sFog := true ;
24425: LD_ADDR_EXP 99
24429: PUSH
24430: LD_INT 1
24432: ST_TO_ADDR
// if p3 = 104 then
24433: LD_VAR 0 3
24437: PUSH
24438: LD_INT 104
24440: EQUAL
24441: IFFALSE 24451
// sReset := true ;
24443: LD_ADDR_EXP 100
24447: PUSH
24448: LD_INT 1
24450: ST_TO_ADDR
// if p3 = 105 then
24451: LD_VAR 0 3
24455: PUSH
24456: LD_INT 105
24458: EQUAL
24459: IFFALSE 24469
// sSun := true ;
24461: LD_ADDR_EXP 101
24465: PUSH
24466: LD_INT 1
24468: ST_TO_ADDR
// if p3 = 106 then
24469: LD_VAR 0 3
24473: PUSH
24474: LD_INT 106
24476: EQUAL
24477: IFFALSE 24487
// sTiger := true ;
24479: LD_ADDR_EXP 97
24483: PUSH
24484: LD_INT 1
24486: ST_TO_ADDR
// if p3 = 107 then
24487: LD_VAR 0 3
24491: PUSH
24492: LD_INT 107
24494: EQUAL
24495: IFFALSE 24505
// sBomb := true ;
24497: LD_ADDR_EXP 98
24501: PUSH
24502: LD_INT 1
24504: ST_TO_ADDR
// if p3 = 108 then
24505: LD_VAR 0 3
24509: PUSH
24510: LD_INT 108
24512: EQUAL
24513: IFFALSE 24523
// sWound := true ;
24515: LD_ADDR_EXP 106
24519: PUSH
24520: LD_INT 1
24522: ST_TO_ADDR
// if p3 = 109 then
24523: LD_VAR 0 3
24527: PUSH
24528: LD_INT 109
24530: EQUAL
24531: IFFALSE 24541
// sBetray := true ;
24533: LD_ADDR_EXP 110
24537: PUSH
24538: LD_INT 1
24540: ST_TO_ADDR
// if p3 = 110 then
24541: LD_VAR 0 3
24545: PUSH
24546: LD_INT 110
24548: EQUAL
24549: IFFALSE 24559
// sContamin := true ;
24551: LD_ADDR_EXP 111
24555: PUSH
24556: LD_INT 1
24558: ST_TO_ADDR
// if p3 = 111 then
24559: LD_VAR 0 3
24563: PUSH
24564: LD_INT 111
24566: EQUAL
24567: IFFALSE 24577
// sOil := true ;
24569: LD_ADDR_EXP 113
24573: PUSH
24574: LD_INT 1
24576: ST_TO_ADDR
// if p3 = 112 then
24577: LD_VAR 0 3
24581: PUSH
24582: LD_INT 112
24584: EQUAL
24585: IFFALSE 24595
// sStu := true ;
24587: LD_ADDR_EXP 117
24591: PUSH
24592: LD_INT 1
24594: ST_TO_ADDR
// if p3 = 113 then
24595: LD_VAR 0 3
24599: PUSH
24600: LD_INT 113
24602: EQUAL
24603: IFFALSE 24613
// sBazooka := true ;
24605: LD_ADDR_EXP 120
24609: PUSH
24610: LD_INT 1
24612: ST_TO_ADDR
// if p3 = 114 then
24613: LD_VAR 0 3
24617: PUSH
24618: LD_INT 114
24620: EQUAL
24621: IFFALSE 24631
// sMortar := true ;
24623: LD_ADDR_EXP 121
24627: PUSH
24628: LD_INT 1
24630: ST_TO_ADDR
// if p3 = 115 then
24631: LD_VAR 0 3
24635: PUSH
24636: LD_INT 115
24638: EQUAL
24639: IFFALSE 24649
// sRanger := true ;
24641: LD_ADDR_EXP 131
24645: PUSH
24646: LD_INT 1
24648: ST_TO_ADDR
// end ; if p2 = 101 then
24649: LD_VAR 0 2
24653: PUSH
24654: LD_INT 101
24656: EQUAL
24657: IFFALSE 24785
// begin case p3 of 1 :
24659: LD_VAR 0 3
24663: PUSH
24664: LD_INT 1
24666: DOUBLE
24667: EQUAL
24668: IFTRUE 24672
24670: GO 24679
24672: POP
// hHackUnlimitedResources ; 2 :
24673: CALL 35820 0 0
24677: GO 24785
24679: LD_INT 2
24681: DOUBLE
24682: EQUAL
24683: IFTRUE 24687
24685: GO 24694
24687: POP
// hHackSetLevel10 ; 3 :
24688: CALL 35953 0 0
24692: GO 24785
24694: LD_INT 3
24696: DOUBLE
24697: EQUAL
24698: IFTRUE 24702
24700: GO 24709
24702: POP
// hHackSetLevel10YourUnits ; 4 :
24703: CALL 36038 0 0
24707: GO 24785
24709: LD_INT 4
24711: DOUBLE
24712: EQUAL
24713: IFTRUE 24717
24715: GO 24724
24717: POP
// hHackInvincible ; 5 :
24718: CALL 36486 0 0
24722: GO 24785
24724: LD_INT 5
24726: DOUBLE
24727: EQUAL
24728: IFTRUE 24732
24730: GO 24739
24732: POP
// hHackInvisible ; 6 :
24733: CALL 36597 0 0
24737: GO 24785
24739: LD_INT 6
24741: DOUBLE
24742: EQUAL
24743: IFTRUE 24747
24745: GO 24754
24747: POP
// hHackChangeYourSide ; 7 :
24748: CALL 36654 0 0
24752: GO 24785
24754: LD_INT 7
24756: DOUBLE
24757: EQUAL
24758: IFTRUE 24762
24760: GO 24769
24762: POP
// hHackChangeUnitSide ; 8 :
24763: CALL 36696 0 0
24767: GO 24785
24769: LD_INT 8
24771: DOUBLE
24772: EQUAL
24773: IFTRUE 24777
24775: GO 24784
24777: POP
// hHackFog ; end ;
24778: CALL 36797 0 0
24782: GO 24785
24784: POP
// end ; end ;
24785: PPOPN 6
24787: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
24788: GO 24790
24790: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
24791: LD_STRING initStreamRollete();
24793: PPUSH
24794: CALL_OW 559
// InitStreamMode ;
24798: CALL 24807 0 0
// DefineStreamItems ( ) ;
24802: CALL 25247 0 0
// end ;
24806: END
// function InitStreamMode ; begin
24807: LD_INT 0
24809: PPUSH
// streamModeActive := false ;
24810: LD_ADDR_EXP 78
24814: PUSH
24815: LD_INT 0
24817: ST_TO_ADDR
// normalCounter := 36 ;
24818: LD_ADDR_EXP 79
24822: PUSH
24823: LD_INT 36
24825: ST_TO_ADDR
// hardcoreCounter := 16 ;
24826: LD_ADDR_EXP 80
24830: PUSH
24831: LD_INT 16
24833: ST_TO_ADDR
// sRocket := false ;
24834: LD_ADDR_EXP 83
24838: PUSH
24839: LD_INT 0
24841: ST_TO_ADDR
// sSpeed := false ;
24842: LD_ADDR_EXP 82
24846: PUSH
24847: LD_INT 0
24849: ST_TO_ADDR
// sEngine := false ;
24850: LD_ADDR_EXP 84
24854: PUSH
24855: LD_INT 0
24857: ST_TO_ADDR
// sSpec := false ;
24858: LD_ADDR_EXP 81
24862: PUSH
24863: LD_INT 0
24865: ST_TO_ADDR
// sLevel := false ;
24866: LD_ADDR_EXP 85
24870: PUSH
24871: LD_INT 0
24873: ST_TO_ADDR
// sArmoury := false ;
24874: LD_ADDR_EXP 86
24878: PUSH
24879: LD_INT 0
24881: ST_TO_ADDR
// sRadar := false ;
24882: LD_ADDR_EXP 87
24886: PUSH
24887: LD_INT 0
24889: ST_TO_ADDR
// sBunker := false ;
24890: LD_ADDR_EXP 88
24894: PUSH
24895: LD_INT 0
24897: ST_TO_ADDR
// sHack := false ;
24898: LD_ADDR_EXP 89
24902: PUSH
24903: LD_INT 0
24905: ST_TO_ADDR
// sFire := false ;
24906: LD_ADDR_EXP 90
24910: PUSH
24911: LD_INT 0
24913: ST_TO_ADDR
// sRefresh := false ;
24914: LD_ADDR_EXP 91
24918: PUSH
24919: LD_INT 0
24921: ST_TO_ADDR
// sExp := false ;
24922: LD_ADDR_EXP 92
24926: PUSH
24927: LD_INT 0
24929: ST_TO_ADDR
// sDepot := false ;
24930: LD_ADDR_EXP 93
24934: PUSH
24935: LD_INT 0
24937: ST_TO_ADDR
// sFlag := false ;
24938: LD_ADDR_EXP 94
24942: PUSH
24943: LD_INT 0
24945: ST_TO_ADDR
// sKamikadze := false ;
24946: LD_ADDR_EXP 102
24950: PUSH
24951: LD_INT 0
24953: ST_TO_ADDR
// sTroll := false ;
24954: LD_ADDR_EXP 103
24958: PUSH
24959: LD_INT 0
24961: ST_TO_ADDR
// sSlow := false ;
24962: LD_ADDR_EXP 104
24966: PUSH
24967: LD_INT 0
24969: ST_TO_ADDR
// sLack := false ;
24970: LD_ADDR_EXP 105
24974: PUSH
24975: LD_INT 0
24977: ST_TO_ADDR
// sTank := false ;
24978: LD_ADDR_EXP 107
24982: PUSH
24983: LD_INT 0
24985: ST_TO_ADDR
// sRemote := false ;
24986: LD_ADDR_EXP 108
24990: PUSH
24991: LD_INT 0
24993: ST_TO_ADDR
// sPowell := false ;
24994: LD_ADDR_EXP 109
24998: PUSH
24999: LD_INT 0
25001: ST_TO_ADDR
// sTeleport := false ;
25002: LD_ADDR_EXP 112
25006: PUSH
25007: LD_INT 0
25009: ST_TO_ADDR
// sOilTower := false ;
25010: LD_ADDR_EXP 114
25014: PUSH
25015: LD_INT 0
25017: ST_TO_ADDR
// sShovel := false ;
25018: LD_ADDR_EXP 115
25022: PUSH
25023: LD_INT 0
25025: ST_TO_ADDR
// sSheik := false ;
25026: LD_ADDR_EXP 116
25030: PUSH
25031: LD_INT 0
25033: ST_TO_ADDR
// sEarthquake := false ;
25034: LD_ADDR_EXP 118
25038: PUSH
25039: LD_INT 0
25041: ST_TO_ADDR
// sAI := false ;
25042: LD_ADDR_EXP 119
25046: PUSH
25047: LD_INT 0
25049: ST_TO_ADDR
// sCargo := false ;
25050: LD_ADDR_EXP 122
25054: PUSH
25055: LD_INT 0
25057: ST_TO_ADDR
// sDLaser := false ;
25058: LD_ADDR_EXP 123
25062: PUSH
25063: LD_INT 0
25065: ST_TO_ADDR
// sExchange := false ;
25066: LD_ADDR_EXP 124
25070: PUSH
25071: LD_INT 0
25073: ST_TO_ADDR
// sFac := false ;
25074: LD_ADDR_EXP 125
25078: PUSH
25079: LD_INT 0
25081: ST_TO_ADDR
// sPower := false ;
25082: LD_ADDR_EXP 126
25086: PUSH
25087: LD_INT 0
25089: ST_TO_ADDR
// sRandom := false ;
25090: LD_ADDR_EXP 127
25094: PUSH
25095: LD_INT 0
25097: ST_TO_ADDR
// sShield := false ;
25098: LD_ADDR_EXP 128
25102: PUSH
25103: LD_INT 0
25105: ST_TO_ADDR
// sTime := false ;
25106: LD_ADDR_EXP 129
25110: PUSH
25111: LD_INT 0
25113: ST_TO_ADDR
// sTools := false ;
25114: LD_ADDR_EXP 130
25118: PUSH
25119: LD_INT 0
25121: ST_TO_ADDR
// sSold := false ;
25122: LD_ADDR_EXP 95
25126: PUSH
25127: LD_INT 0
25129: ST_TO_ADDR
// sDiff := false ;
25130: LD_ADDR_EXP 96
25134: PUSH
25135: LD_INT 0
25137: ST_TO_ADDR
// sFog := false ;
25138: LD_ADDR_EXP 99
25142: PUSH
25143: LD_INT 0
25145: ST_TO_ADDR
// sReset := false ;
25146: LD_ADDR_EXP 100
25150: PUSH
25151: LD_INT 0
25153: ST_TO_ADDR
// sSun := false ;
25154: LD_ADDR_EXP 101
25158: PUSH
25159: LD_INT 0
25161: ST_TO_ADDR
// sTiger := false ;
25162: LD_ADDR_EXP 97
25166: PUSH
25167: LD_INT 0
25169: ST_TO_ADDR
// sBomb := false ;
25170: LD_ADDR_EXP 98
25174: PUSH
25175: LD_INT 0
25177: ST_TO_ADDR
// sWound := false ;
25178: LD_ADDR_EXP 106
25182: PUSH
25183: LD_INT 0
25185: ST_TO_ADDR
// sBetray := false ;
25186: LD_ADDR_EXP 110
25190: PUSH
25191: LD_INT 0
25193: ST_TO_ADDR
// sContamin := false ;
25194: LD_ADDR_EXP 111
25198: PUSH
25199: LD_INT 0
25201: ST_TO_ADDR
// sOil := false ;
25202: LD_ADDR_EXP 113
25206: PUSH
25207: LD_INT 0
25209: ST_TO_ADDR
// sStu := false ;
25210: LD_ADDR_EXP 117
25214: PUSH
25215: LD_INT 0
25217: ST_TO_ADDR
// sBazooka := false ;
25218: LD_ADDR_EXP 120
25222: PUSH
25223: LD_INT 0
25225: ST_TO_ADDR
// sMortar := false ;
25226: LD_ADDR_EXP 121
25230: PUSH
25231: LD_INT 0
25233: ST_TO_ADDR
// sRanger := false ;
25234: LD_ADDR_EXP 131
25238: PUSH
25239: LD_INT 0
25241: ST_TO_ADDR
// end ;
25242: LD_VAR 0 1
25246: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
25247: LD_INT 0
25249: PPUSH
25250: PPUSH
25251: PPUSH
25252: PPUSH
25253: PPUSH
// result := [ ] ;
25254: LD_ADDR_VAR 0 1
25258: PUSH
25259: EMPTY
25260: ST_TO_ADDR
// if campaign_id = 1 then
25261: LD_OWVAR 69
25265: PUSH
25266: LD_INT 1
25268: EQUAL
25269: IFFALSE 28207
// begin case mission_number of 1 :
25271: LD_OWVAR 70
25275: PUSH
25276: LD_INT 1
25278: DOUBLE
25279: EQUAL
25280: IFTRUE 25284
25282: GO 25348
25284: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
25285: LD_ADDR_VAR 0 1
25289: PUSH
25290: LD_INT 2
25292: PUSH
25293: LD_INT 4
25295: PUSH
25296: LD_INT 11
25298: PUSH
25299: LD_INT 12
25301: PUSH
25302: LD_INT 15
25304: PUSH
25305: LD_INT 16
25307: PUSH
25308: LD_INT 22
25310: PUSH
25311: LD_INT 23
25313: PUSH
25314: LD_INT 26
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: PUSH
25328: LD_INT 101
25330: PUSH
25331: LD_INT 102
25333: PUSH
25334: LD_INT 106
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: LIST
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: ST_TO_ADDR
25346: GO 28205
25348: LD_INT 2
25350: DOUBLE
25351: EQUAL
25352: IFTRUE 25356
25354: GO 25428
25356: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
25357: LD_ADDR_VAR 0 1
25361: PUSH
25362: LD_INT 2
25364: PUSH
25365: LD_INT 4
25367: PUSH
25368: LD_INT 11
25370: PUSH
25371: LD_INT 12
25373: PUSH
25374: LD_INT 15
25376: PUSH
25377: LD_INT 16
25379: PUSH
25380: LD_INT 22
25382: PUSH
25383: LD_INT 23
25385: PUSH
25386: LD_INT 26
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 101
25402: PUSH
25403: LD_INT 102
25405: PUSH
25406: LD_INT 105
25408: PUSH
25409: LD_INT 106
25411: PUSH
25412: LD_INT 108
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: ST_TO_ADDR
25426: GO 28205
25428: LD_INT 3
25430: DOUBLE
25431: EQUAL
25432: IFTRUE 25436
25434: GO 25512
25436: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
25437: LD_ADDR_VAR 0 1
25441: PUSH
25442: LD_INT 2
25444: PUSH
25445: LD_INT 4
25447: PUSH
25448: LD_INT 5
25450: PUSH
25451: LD_INT 11
25453: PUSH
25454: LD_INT 12
25456: PUSH
25457: LD_INT 15
25459: PUSH
25460: LD_INT 16
25462: PUSH
25463: LD_INT 22
25465: PUSH
25466: LD_INT 26
25468: PUSH
25469: LD_INT 36
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 101
25486: PUSH
25487: LD_INT 102
25489: PUSH
25490: LD_INT 105
25492: PUSH
25493: LD_INT 106
25495: PUSH
25496: LD_INT 108
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: ST_TO_ADDR
25510: GO 28205
25512: LD_INT 4
25514: DOUBLE
25515: EQUAL
25516: IFTRUE 25520
25518: GO 25604
25520: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
25521: LD_ADDR_VAR 0 1
25525: PUSH
25526: LD_INT 2
25528: PUSH
25529: LD_INT 4
25531: PUSH
25532: LD_INT 5
25534: PUSH
25535: LD_INT 8
25537: PUSH
25538: LD_INT 11
25540: PUSH
25541: LD_INT 12
25543: PUSH
25544: LD_INT 15
25546: PUSH
25547: LD_INT 16
25549: PUSH
25550: LD_INT 22
25552: PUSH
25553: LD_INT 23
25555: PUSH
25556: LD_INT 26
25558: PUSH
25559: LD_INT 36
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 101
25578: PUSH
25579: LD_INT 102
25581: PUSH
25582: LD_INT 105
25584: PUSH
25585: LD_INT 106
25587: PUSH
25588: LD_INT 108
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: ST_TO_ADDR
25602: GO 28205
25604: LD_INT 5
25606: DOUBLE
25607: EQUAL
25608: IFTRUE 25612
25610: GO 25712
25612: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
25613: LD_ADDR_VAR 0 1
25617: PUSH
25618: LD_INT 2
25620: PUSH
25621: LD_INT 4
25623: PUSH
25624: LD_INT 5
25626: PUSH
25627: LD_INT 6
25629: PUSH
25630: LD_INT 8
25632: PUSH
25633: LD_INT 11
25635: PUSH
25636: LD_INT 12
25638: PUSH
25639: LD_INT 15
25641: PUSH
25642: LD_INT 16
25644: PUSH
25645: LD_INT 22
25647: PUSH
25648: LD_INT 23
25650: PUSH
25651: LD_INT 25
25653: PUSH
25654: LD_INT 26
25656: PUSH
25657: LD_INT 36
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 101
25678: PUSH
25679: LD_INT 102
25681: PUSH
25682: LD_INT 105
25684: PUSH
25685: LD_INT 106
25687: PUSH
25688: LD_INT 108
25690: PUSH
25691: LD_INT 109
25693: PUSH
25694: LD_INT 112
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: ST_TO_ADDR
25710: GO 28205
25712: LD_INT 6
25714: DOUBLE
25715: EQUAL
25716: IFTRUE 25720
25718: GO 25840
25720: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
25721: LD_ADDR_VAR 0 1
25725: PUSH
25726: LD_INT 2
25728: PUSH
25729: LD_INT 4
25731: PUSH
25732: LD_INT 5
25734: PUSH
25735: LD_INT 6
25737: PUSH
25738: LD_INT 8
25740: PUSH
25741: LD_INT 11
25743: PUSH
25744: LD_INT 12
25746: PUSH
25747: LD_INT 15
25749: PUSH
25750: LD_INT 16
25752: PUSH
25753: LD_INT 20
25755: PUSH
25756: LD_INT 21
25758: PUSH
25759: LD_INT 22
25761: PUSH
25762: LD_INT 23
25764: PUSH
25765: LD_INT 25
25767: PUSH
25768: LD_INT 26
25770: PUSH
25771: LD_INT 30
25773: PUSH
25774: LD_INT 31
25776: PUSH
25777: LD_INT 32
25779: PUSH
25780: LD_INT 36
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 101
25806: PUSH
25807: LD_INT 102
25809: PUSH
25810: LD_INT 105
25812: PUSH
25813: LD_INT 106
25815: PUSH
25816: LD_INT 108
25818: PUSH
25819: LD_INT 109
25821: PUSH
25822: LD_INT 112
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: ST_TO_ADDR
25838: GO 28205
25840: LD_INT 7
25842: DOUBLE
25843: EQUAL
25844: IFTRUE 25848
25846: GO 25948
25848: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
25849: LD_ADDR_VAR 0 1
25853: PUSH
25854: LD_INT 2
25856: PUSH
25857: LD_INT 4
25859: PUSH
25860: LD_INT 5
25862: PUSH
25863: LD_INT 7
25865: PUSH
25866: LD_INT 11
25868: PUSH
25869: LD_INT 12
25871: PUSH
25872: LD_INT 15
25874: PUSH
25875: LD_INT 16
25877: PUSH
25878: LD_INT 20
25880: PUSH
25881: LD_INT 21
25883: PUSH
25884: LD_INT 22
25886: PUSH
25887: LD_INT 23
25889: PUSH
25890: LD_INT 25
25892: PUSH
25893: LD_INT 26
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 101
25914: PUSH
25915: LD_INT 102
25917: PUSH
25918: LD_INT 103
25920: PUSH
25921: LD_INT 105
25923: PUSH
25924: LD_INT 106
25926: PUSH
25927: LD_INT 108
25929: PUSH
25930: LD_INT 112
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: ST_TO_ADDR
25946: GO 28205
25948: LD_INT 8
25950: DOUBLE
25951: EQUAL
25952: IFTRUE 25956
25954: GO 26084
25956: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
25957: LD_ADDR_VAR 0 1
25961: PUSH
25962: LD_INT 2
25964: PUSH
25965: LD_INT 4
25967: PUSH
25968: LD_INT 5
25970: PUSH
25971: LD_INT 6
25973: PUSH
25974: LD_INT 7
25976: PUSH
25977: LD_INT 8
25979: PUSH
25980: LD_INT 11
25982: PUSH
25983: LD_INT 12
25985: PUSH
25986: LD_INT 15
25988: PUSH
25989: LD_INT 16
25991: PUSH
25992: LD_INT 20
25994: PUSH
25995: LD_INT 21
25997: PUSH
25998: LD_INT 22
26000: PUSH
26001: LD_INT 23
26003: PUSH
26004: LD_INT 25
26006: PUSH
26007: LD_INT 26
26009: PUSH
26010: LD_INT 30
26012: PUSH
26013: LD_INT 31
26015: PUSH
26016: LD_INT 32
26018: PUSH
26019: LD_INT 36
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 101
26046: PUSH
26047: LD_INT 102
26049: PUSH
26050: LD_INT 103
26052: PUSH
26053: LD_INT 105
26055: PUSH
26056: LD_INT 106
26058: PUSH
26059: LD_INT 108
26061: PUSH
26062: LD_INT 109
26064: PUSH
26065: LD_INT 112
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: ST_TO_ADDR
26082: GO 28205
26084: LD_INT 9
26086: DOUBLE
26087: EQUAL
26088: IFTRUE 26092
26090: GO 26228
26092: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
26093: LD_ADDR_VAR 0 1
26097: PUSH
26098: LD_INT 2
26100: PUSH
26101: LD_INT 4
26103: PUSH
26104: LD_INT 5
26106: PUSH
26107: LD_INT 6
26109: PUSH
26110: LD_INT 7
26112: PUSH
26113: LD_INT 8
26115: PUSH
26116: LD_INT 11
26118: PUSH
26119: LD_INT 12
26121: PUSH
26122: LD_INT 15
26124: PUSH
26125: LD_INT 16
26127: PUSH
26128: LD_INT 20
26130: PUSH
26131: LD_INT 21
26133: PUSH
26134: LD_INT 22
26136: PUSH
26137: LD_INT 23
26139: PUSH
26140: LD_INT 25
26142: PUSH
26143: LD_INT 26
26145: PUSH
26146: LD_INT 28
26148: PUSH
26149: LD_INT 30
26151: PUSH
26152: LD_INT 31
26154: PUSH
26155: LD_INT 32
26157: PUSH
26158: LD_INT 36
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 101
26186: PUSH
26187: LD_INT 102
26189: PUSH
26190: LD_INT 103
26192: PUSH
26193: LD_INT 105
26195: PUSH
26196: LD_INT 106
26198: PUSH
26199: LD_INT 108
26201: PUSH
26202: LD_INT 109
26204: PUSH
26205: LD_INT 112
26207: PUSH
26208: LD_INT 114
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: ST_TO_ADDR
26226: GO 28205
26228: LD_INT 10
26230: DOUBLE
26231: EQUAL
26232: IFTRUE 26236
26234: GO 26420
26236: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
26237: LD_ADDR_VAR 0 1
26241: PUSH
26242: LD_INT 2
26244: PUSH
26245: LD_INT 4
26247: PUSH
26248: LD_INT 5
26250: PUSH
26251: LD_INT 6
26253: PUSH
26254: LD_INT 7
26256: PUSH
26257: LD_INT 8
26259: PUSH
26260: LD_INT 9
26262: PUSH
26263: LD_INT 10
26265: PUSH
26266: LD_INT 11
26268: PUSH
26269: LD_INT 12
26271: PUSH
26272: LD_INT 13
26274: PUSH
26275: LD_INT 14
26277: PUSH
26278: LD_INT 15
26280: PUSH
26281: LD_INT 16
26283: PUSH
26284: LD_INT 17
26286: PUSH
26287: LD_INT 18
26289: PUSH
26290: LD_INT 19
26292: PUSH
26293: LD_INT 20
26295: PUSH
26296: LD_INT 21
26298: PUSH
26299: LD_INT 22
26301: PUSH
26302: LD_INT 23
26304: PUSH
26305: LD_INT 24
26307: PUSH
26308: LD_INT 25
26310: PUSH
26311: LD_INT 26
26313: PUSH
26314: LD_INT 28
26316: PUSH
26317: LD_INT 30
26319: PUSH
26320: LD_INT 31
26322: PUSH
26323: LD_INT 32
26325: PUSH
26326: LD_INT 36
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 101
26362: PUSH
26363: LD_INT 102
26365: PUSH
26366: LD_INT 103
26368: PUSH
26369: LD_INT 104
26371: PUSH
26372: LD_INT 105
26374: PUSH
26375: LD_INT 106
26377: PUSH
26378: LD_INT 107
26380: PUSH
26381: LD_INT 108
26383: PUSH
26384: LD_INT 109
26386: PUSH
26387: LD_INT 110
26389: PUSH
26390: LD_INT 111
26392: PUSH
26393: LD_INT 112
26395: PUSH
26396: LD_INT 114
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: ST_TO_ADDR
26418: GO 28205
26420: LD_INT 11
26422: DOUBLE
26423: EQUAL
26424: IFTRUE 26428
26426: GO 26620
26428: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
26429: LD_ADDR_VAR 0 1
26433: PUSH
26434: LD_INT 2
26436: PUSH
26437: LD_INT 3
26439: PUSH
26440: LD_INT 4
26442: PUSH
26443: LD_INT 5
26445: PUSH
26446: LD_INT 6
26448: PUSH
26449: LD_INT 7
26451: PUSH
26452: LD_INT 8
26454: PUSH
26455: LD_INT 9
26457: PUSH
26458: LD_INT 10
26460: PUSH
26461: LD_INT 11
26463: PUSH
26464: LD_INT 12
26466: PUSH
26467: LD_INT 13
26469: PUSH
26470: LD_INT 14
26472: PUSH
26473: LD_INT 15
26475: PUSH
26476: LD_INT 16
26478: PUSH
26479: LD_INT 17
26481: PUSH
26482: LD_INT 18
26484: PUSH
26485: LD_INT 19
26487: PUSH
26488: LD_INT 20
26490: PUSH
26491: LD_INT 21
26493: PUSH
26494: LD_INT 22
26496: PUSH
26497: LD_INT 23
26499: PUSH
26500: LD_INT 24
26502: PUSH
26503: LD_INT 25
26505: PUSH
26506: LD_INT 26
26508: PUSH
26509: LD_INT 28
26511: PUSH
26512: LD_INT 30
26514: PUSH
26515: LD_INT 31
26517: PUSH
26518: LD_INT 32
26520: PUSH
26521: LD_INT 34
26523: PUSH
26524: LD_INT 36
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 101
26562: PUSH
26563: LD_INT 102
26565: PUSH
26566: LD_INT 103
26568: PUSH
26569: LD_INT 104
26571: PUSH
26572: LD_INT 105
26574: PUSH
26575: LD_INT 106
26577: PUSH
26578: LD_INT 107
26580: PUSH
26581: LD_INT 108
26583: PUSH
26584: LD_INT 109
26586: PUSH
26587: LD_INT 110
26589: PUSH
26590: LD_INT 111
26592: PUSH
26593: LD_INT 112
26595: PUSH
26596: LD_INT 114
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: ST_TO_ADDR
26618: GO 28205
26620: LD_INT 12
26622: DOUBLE
26623: EQUAL
26624: IFTRUE 26628
26626: GO 26836
26628: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
26629: LD_ADDR_VAR 0 1
26633: PUSH
26634: LD_INT 1
26636: PUSH
26637: LD_INT 2
26639: PUSH
26640: LD_INT 3
26642: PUSH
26643: LD_INT 4
26645: PUSH
26646: LD_INT 5
26648: PUSH
26649: LD_INT 6
26651: PUSH
26652: LD_INT 7
26654: PUSH
26655: LD_INT 8
26657: PUSH
26658: LD_INT 9
26660: PUSH
26661: LD_INT 10
26663: PUSH
26664: LD_INT 11
26666: PUSH
26667: LD_INT 12
26669: PUSH
26670: LD_INT 13
26672: PUSH
26673: LD_INT 14
26675: PUSH
26676: LD_INT 15
26678: PUSH
26679: LD_INT 16
26681: PUSH
26682: LD_INT 17
26684: PUSH
26685: LD_INT 18
26687: PUSH
26688: LD_INT 19
26690: PUSH
26691: LD_INT 20
26693: PUSH
26694: LD_INT 21
26696: PUSH
26697: LD_INT 22
26699: PUSH
26700: LD_INT 23
26702: PUSH
26703: LD_INT 24
26705: PUSH
26706: LD_INT 25
26708: PUSH
26709: LD_INT 26
26711: PUSH
26712: LD_INT 27
26714: PUSH
26715: LD_INT 28
26717: PUSH
26718: LD_INT 30
26720: PUSH
26721: LD_INT 31
26723: PUSH
26724: LD_INT 32
26726: PUSH
26727: LD_INT 33
26729: PUSH
26730: LD_INT 34
26732: PUSH
26733: LD_INT 36
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: PUSH
26772: LD_INT 101
26774: PUSH
26775: LD_INT 102
26777: PUSH
26778: LD_INT 103
26780: PUSH
26781: LD_INT 104
26783: PUSH
26784: LD_INT 105
26786: PUSH
26787: LD_INT 106
26789: PUSH
26790: LD_INT 107
26792: PUSH
26793: LD_INT 108
26795: PUSH
26796: LD_INT 109
26798: PUSH
26799: LD_INT 110
26801: PUSH
26802: LD_INT 111
26804: PUSH
26805: LD_INT 112
26807: PUSH
26808: LD_INT 113
26810: PUSH
26811: LD_INT 114
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: ST_TO_ADDR
26834: GO 28205
26836: LD_INT 13
26838: DOUBLE
26839: EQUAL
26840: IFTRUE 26844
26842: GO 27040
26844: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
26845: LD_ADDR_VAR 0 1
26849: PUSH
26850: LD_INT 1
26852: PUSH
26853: LD_INT 2
26855: PUSH
26856: LD_INT 3
26858: PUSH
26859: LD_INT 4
26861: PUSH
26862: LD_INT 5
26864: PUSH
26865: LD_INT 8
26867: PUSH
26868: LD_INT 9
26870: PUSH
26871: LD_INT 10
26873: PUSH
26874: LD_INT 11
26876: PUSH
26877: LD_INT 12
26879: PUSH
26880: LD_INT 14
26882: PUSH
26883: LD_INT 15
26885: PUSH
26886: LD_INT 16
26888: PUSH
26889: LD_INT 17
26891: PUSH
26892: LD_INT 18
26894: PUSH
26895: LD_INT 19
26897: PUSH
26898: LD_INT 20
26900: PUSH
26901: LD_INT 21
26903: PUSH
26904: LD_INT 22
26906: PUSH
26907: LD_INT 23
26909: PUSH
26910: LD_INT 24
26912: PUSH
26913: LD_INT 25
26915: PUSH
26916: LD_INT 26
26918: PUSH
26919: LD_INT 27
26921: PUSH
26922: LD_INT 28
26924: PUSH
26925: LD_INT 30
26927: PUSH
26928: LD_INT 31
26930: PUSH
26931: LD_INT 32
26933: PUSH
26934: LD_INT 33
26936: PUSH
26937: LD_INT 34
26939: PUSH
26940: LD_INT 36
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 101
26978: PUSH
26979: LD_INT 102
26981: PUSH
26982: LD_INT 103
26984: PUSH
26985: LD_INT 104
26987: PUSH
26988: LD_INT 105
26990: PUSH
26991: LD_INT 106
26993: PUSH
26994: LD_INT 107
26996: PUSH
26997: LD_INT 108
26999: PUSH
27000: LD_INT 109
27002: PUSH
27003: LD_INT 110
27005: PUSH
27006: LD_INT 111
27008: PUSH
27009: LD_INT 112
27011: PUSH
27012: LD_INT 113
27014: PUSH
27015: LD_INT 114
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: ST_TO_ADDR
27038: GO 28205
27040: LD_INT 14
27042: DOUBLE
27043: EQUAL
27044: IFTRUE 27048
27046: GO 27260
27048: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
27049: LD_ADDR_VAR 0 1
27053: PUSH
27054: LD_INT 1
27056: PUSH
27057: LD_INT 2
27059: PUSH
27060: LD_INT 3
27062: PUSH
27063: LD_INT 4
27065: PUSH
27066: LD_INT 5
27068: PUSH
27069: LD_INT 6
27071: PUSH
27072: LD_INT 7
27074: PUSH
27075: LD_INT 8
27077: PUSH
27078: LD_INT 9
27080: PUSH
27081: LD_INT 10
27083: PUSH
27084: LD_INT 11
27086: PUSH
27087: LD_INT 12
27089: PUSH
27090: LD_INT 13
27092: PUSH
27093: LD_INT 14
27095: PUSH
27096: LD_INT 15
27098: PUSH
27099: LD_INT 16
27101: PUSH
27102: LD_INT 17
27104: PUSH
27105: LD_INT 18
27107: PUSH
27108: LD_INT 19
27110: PUSH
27111: LD_INT 20
27113: PUSH
27114: LD_INT 21
27116: PUSH
27117: LD_INT 22
27119: PUSH
27120: LD_INT 23
27122: PUSH
27123: LD_INT 24
27125: PUSH
27126: LD_INT 25
27128: PUSH
27129: LD_INT 26
27131: PUSH
27132: LD_INT 27
27134: PUSH
27135: LD_INT 28
27137: PUSH
27138: LD_INT 29
27140: PUSH
27141: LD_INT 30
27143: PUSH
27144: LD_INT 31
27146: PUSH
27147: LD_INT 32
27149: PUSH
27150: LD_INT 33
27152: PUSH
27153: LD_INT 34
27155: PUSH
27156: LD_INT 36
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 101
27198: PUSH
27199: LD_INT 102
27201: PUSH
27202: LD_INT 103
27204: PUSH
27205: LD_INT 104
27207: PUSH
27208: LD_INT 105
27210: PUSH
27211: LD_INT 106
27213: PUSH
27214: LD_INT 107
27216: PUSH
27217: LD_INT 108
27219: PUSH
27220: LD_INT 109
27222: PUSH
27223: LD_INT 110
27225: PUSH
27226: LD_INT 111
27228: PUSH
27229: LD_INT 112
27231: PUSH
27232: LD_INT 113
27234: PUSH
27235: LD_INT 114
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: ST_TO_ADDR
27258: GO 28205
27260: LD_INT 15
27262: DOUBLE
27263: EQUAL
27264: IFTRUE 27268
27266: GO 27480
27268: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
27269: LD_ADDR_VAR 0 1
27273: PUSH
27274: LD_INT 1
27276: PUSH
27277: LD_INT 2
27279: PUSH
27280: LD_INT 3
27282: PUSH
27283: LD_INT 4
27285: PUSH
27286: LD_INT 5
27288: PUSH
27289: LD_INT 6
27291: PUSH
27292: LD_INT 7
27294: PUSH
27295: LD_INT 8
27297: PUSH
27298: LD_INT 9
27300: PUSH
27301: LD_INT 10
27303: PUSH
27304: LD_INT 11
27306: PUSH
27307: LD_INT 12
27309: PUSH
27310: LD_INT 13
27312: PUSH
27313: LD_INT 14
27315: PUSH
27316: LD_INT 15
27318: PUSH
27319: LD_INT 16
27321: PUSH
27322: LD_INT 17
27324: PUSH
27325: LD_INT 18
27327: PUSH
27328: LD_INT 19
27330: PUSH
27331: LD_INT 20
27333: PUSH
27334: LD_INT 21
27336: PUSH
27337: LD_INT 22
27339: PUSH
27340: LD_INT 23
27342: PUSH
27343: LD_INT 24
27345: PUSH
27346: LD_INT 25
27348: PUSH
27349: LD_INT 26
27351: PUSH
27352: LD_INT 27
27354: PUSH
27355: LD_INT 28
27357: PUSH
27358: LD_INT 29
27360: PUSH
27361: LD_INT 30
27363: PUSH
27364: LD_INT 31
27366: PUSH
27367: LD_INT 32
27369: PUSH
27370: LD_INT 33
27372: PUSH
27373: LD_INT 34
27375: PUSH
27376: LD_INT 36
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 101
27418: PUSH
27419: LD_INT 102
27421: PUSH
27422: LD_INT 103
27424: PUSH
27425: LD_INT 104
27427: PUSH
27428: LD_INT 105
27430: PUSH
27431: LD_INT 106
27433: PUSH
27434: LD_INT 107
27436: PUSH
27437: LD_INT 108
27439: PUSH
27440: LD_INT 109
27442: PUSH
27443: LD_INT 110
27445: PUSH
27446: LD_INT 111
27448: PUSH
27449: LD_INT 112
27451: PUSH
27452: LD_INT 113
27454: PUSH
27455: LD_INT 114
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: ST_TO_ADDR
27478: GO 28205
27480: LD_INT 16
27482: DOUBLE
27483: EQUAL
27484: IFTRUE 27488
27486: GO 27612
27488: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
27489: LD_ADDR_VAR 0 1
27493: PUSH
27494: LD_INT 2
27496: PUSH
27497: LD_INT 4
27499: PUSH
27500: LD_INT 5
27502: PUSH
27503: LD_INT 7
27505: PUSH
27506: LD_INT 11
27508: PUSH
27509: LD_INT 12
27511: PUSH
27512: LD_INT 15
27514: PUSH
27515: LD_INT 16
27517: PUSH
27518: LD_INT 20
27520: PUSH
27521: LD_INT 21
27523: PUSH
27524: LD_INT 22
27526: PUSH
27527: LD_INT 23
27529: PUSH
27530: LD_INT 25
27532: PUSH
27533: LD_INT 26
27535: PUSH
27536: LD_INT 30
27538: PUSH
27539: LD_INT 31
27541: PUSH
27542: LD_INT 32
27544: PUSH
27545: LD_INT 33
27547: PUSH
27548: LD_INT 34
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 101
27574: PUSH
27575: LD_INT 102
27577: PUSH
27578: LD_INT 103
27580: PUSH
27581: LD_INT 106
27583: PUSH
27584: LD_INT 108
27586: PUSH
27587: LD_INT 112
27589: PUSH
27590: LD_INT 113
27592: PUSH
27593: LD_INT 114
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: ST_TO_ADDR
27610: GO 28205
27612: LD_INT 17
27614: DOUBLE
27615: EQUAL
27616: IFTRUE 27620
27618: GO 27832
27620: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
27621: LD_ADDR_VAR 0 1
27625: PUSH
27626: LD_INT 1
27628: PUSH
27629: LD_INT 2
27631: PUSH
27632: LD_INT 3
27634: PUSH
27635: LD_INT 4
27637: PUSH
27638: LD_INT 5
27640: PUSH
27641: LD_INT 6
27643: PUSH
27644: LD_INT 7
27646: PUSH
27647: LD_INT 8
27649: PUSH
27650: LD_INT 9
27652: PUSH
27653: LD_INT 10
27655: PUSH
27656: LD_INT 11
27658: PUSH
27659: LD_INT 12
27661: PUSH
27662: LD_INT 13
27664: PUSH
27665: LD_INT 14
27667: PUSH
27668: LD_INT 15
27670: PUSH
27671: LD_INT 16
27673: PUSH
27674: LD_INT 17
27676: PUSH
27677: LD_INT 18
27679: PUSH
27680: LD_INT 19
27682: PUSH
27683: LD_INT 20
27685: PUSH
27686: LD_INT 21
27688: PUSH
27689: LD_INT 22
27691: PUSH
27692: LD_INT 23
27694: PUSH
27695: LD_INT 24
27697: PUSH
27698: LD_INT 25
27700: PUSH
27701: LD_INT 26
27703: PUSH
27704: LD_INT 27
27706: PUSH
27707: LD_INT 28
27709: PUSH
27710: LD_INT 29
27712: PUSH
27713: LD_INT 30
27715: PUSH
27716: LD_INT 31
27718: PUSH
27719: LD_INT 32
27721: PUSH
27722: LD_INT 33
27724: PUSH
27725: LD_INT 34
27727: PUSH
27728: LD_INT 36
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 101
27770: PUSH
27771: LD_INT 102
27773: PUSH
27774: LD_INT 103
27776: PUSH
27777: LD_INT 104
27779: PUSH
27780: LD_INT 105
27782: PUSH
27783: LD_INT 106
27785: PUSH
27786: LD_INT 107
27788: PUSH
27789: LD_INT 108
27791: PUSH
27792: LD_INT 109
27794: PUSH
27795: LD_INT 110
27797: PUSH
27798: LD_INT 111
27800: PUSH
27801: LD_INT 112
27803: PUSH
27804: LD_INT 113
27806: PUSH
27807: LD_INT 114
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: ST_TO_ADDR
27830: GO 28205
27832: LD_INT 18
27834: DOUBLE
27835: EQUAL
27836: IFTRUE 27840
27838: GO 27976
27840: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
27841: LD_ADDR_VAR 0 1
27845: PUSH
27846: LD_INT 2
27848: PUSH
27849: LD_INT 4
27851: PUSH
27852: LD_INT 5
27854: PUSH
27855: LD_INT 7
27857: PUSH
27858: LD_INT 11
27860: PUSH
27861: LD_INT 12
27863: PUSH
27864: LD_INT 15
27866: PUSH
27867: LD_INT 16
27869: PUSH
27870: LD_INT 20
27872: PUSH
27873: LD_INT 21
27875: PUSH
27876: LD_INT 22
27878: PUSH
27879: LD_INT 23
27881: PUSH
27882: LD_INT 25
27884: PUSH
27885: LD_INT 26
27887: PUSH
27888: LD_INT 30
27890: PUSH
27891: LD_INT 31
27893: PUSH
27894: LD_INT 32
27896: PUSH
27897: LD_INT 33
27899: PUSH
27900: LD_INT 34
27902: PUSH
27903: LD_INT 35
27905: PUSH
27906: LD_INT 36
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 101
27934: PUSH
27935: LD_INT 102
27937: PUSH
27938: LD_INT 103
27940: PUSH
27941: LD_INT 106
27943: PUSH
27944: LD_INT 108
27946: PUSH
27947: LD_INT 112
27949: PUSH
27950: LD_INT 113
27952: PUSH
27953: LD_INT 114
27955: PUSH
27956: LD_INT 115
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: ST_TO_ADDR
27974: GO 28205
27976: LD_INT 19
27978: DOUBLE
27979: EQUAL
27980: IFTRUE 27984
27982: GO 28204
27984: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
27985: LD_ADDR_VAR 0 1
27989: PUSH
27990: LD_INT 1
27992: PUSH
27993: LD_INT 2
27995: PUSH
27996: LD_INT 3
27998: PUSH
27999: LD_INT 4
28001: PUSH
28002: LD_INT 5
28004: PUSH
28005: LD_INT 6
28007: PUSH
28008: LD_INT 7
28010: PUSH
28011: LD_INT 8
28013: PUSH
28014: LD_INT 9
28016: PUSH
28017: LD_INT 10
28019: PUSH
28020: LD_INT 11
28022: PUSH
28023: LD_INT 12
28025: PUSH
28026: LD_INT 13
28028: PUSH
28029: LD_INT 14
28031: PUSH
28032: LD_INT 15
28034: PUSH
28035: LD_INT 16
28037: PUSH
28038: LD_INT 17
28040: PUSH
28041: LD_INT 18
28043: PUSH
28044: LD_INT 19
28046: PUSH
28047: LD_INT 20
28049: PUSH
28050: LD_INT 21
28052: PUSH
28053: LD_INT 22
28055: PUSH
28056: LD_INT 23
28058: PUSH
28059: LD_INT 24
28061: PUSH
28062: LD_INT 25
28064: PUSH
28065: LD_INT 26
28067: PUSH
28068: LD_INT 27
28070: PUSH
28071: LD_INT 28
28073: PUSH
28074: LD_INT 29
28076: PUSH
28077: LD_INT 30
28079: PUSH
28080: LD_INT 31
28082: PUSH
28083: LD_INT 32
28085: PUSH
28086: LD_INT 33
28088: PUSH
28089: LD_INT 34
28091: PUSH
28092: LD_INT 35
28094: PUSH
28095: LD_INT 36
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 101
28138: PUSH
28139: LD_INT 102
28141: PUSH
28142: LD_INT 103
28144: PUSH
28145: LD_INT 104
28147: PUSH
28148: LD_INT 105
28150: PUSH
28151: LD_INT 106
28153: PUSH
28154: LD_INT 107
28156: PUSH
28157: LD_INT 108
28159: PUSH
28160: LD_INT 109
28162: PUSH
28163: LD_INT 110
28165: PUSH
28166: LD_INT 111
28168: PUSH
28169: LD_INT 112
28171: PUSH
28172: LD_INT 113
28174: PUSH
28175: LD_INT 114
28177: PUSH
28178: LD_INT 115
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: ST_TO_ADDR
28202: GO 28205
28204: POP
// end else
28205: GO 28424
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
28207: LD_ADDR_VAR 0 1
28211: PUSH
28212: LD_INT 1
28214: PUSH
28215: LD_INT 2
28217: PUSH
28218: LD_INT 3
28220: PUSH
28221: LD_INT 4
28223: PUSH
28224: LD_INT 5
28226: PUSH
28227: LD_INT 6
28229: PUSH
28230: LD_INT 7
28232: PUSH
28233: LD_INT 8
28235: PUSH
28236: LD_INT 9
28238: PUSH
28239: LD_INT 10
28241: PUSH
28242: LD_INT 11
28244: PUSH
28245: LD_INT 12
28247: PUSH
28248: LD_INT 13
28250: PUSH
28251: LD_INT 14
28253: PUSH
28254: LD_INT 15
28256: PUSH
28257: LD_INT 16
28259: PUSH
28260: LD_INT 17
28262: PUSH
28263: LD_INT 18
28265: PUSH
28266: LD_INT 19
28268: PUSH
28269: LD_INT 20
28271: PUSH
28272: LD_INT 21
28274: PUSH
28275: LD_INT 22
28277: PUSH
28278: LD_INT 23
28280: PUSH
28281: LD_INT 24
28283: PUSH
28284: LD_INT 25
28286: PUSH
28287: LD_INT 26
28289: PUSH
28290: LD_INT 27
28292: PUSH
28293: LD_INT 28
28295: PUSH
28296: LD_INT 29
28298: PUSH
28299: LD_INT 30
28301: PUSH
28302: LD_INT 31
28304: PUSH
28305: LD_INT 32
28307: PUSH
28308: LD_INT 33
28310: PUSH
28311: LD_INT 34
28313: PUSH
28314: LD_INT 35
28316: PUSH
28317: LD_INT 36
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 101
28360: PUSH
28361: LD_INT 102
28363: PUSH
28364: LD_INT 103
28366: PUSH
28367: LD_INT 104
28369: PUSH
28370: LD_INT 105
28372: PUSH
28373: LD_INT 106
28375: PUSH
28376: LD_INT 107
28378: PUSH
28379: LD_INT 108
28381: PUSH
28382: LD_INT 109
28384: PUSH
28385: LD_INT 110
28387: PUSH
28388: LD_INT 111
28390: PUSH
28391: LD_INT 112
28393: PUSH
28394: LD_INT 113
28396: PUSH
28397: LD_INT 114
28399: PUSH
28400: LD_INT 115
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: ST_TO_ADDR
// if result then
28424: LD_VAR 0 1
28428: IFFALSE 28717
// begin normal :=  ;
28430: LD_ADDR_VAR 0 3
28434: PUSH
28435: LD_STRING 
28437: ST_TO_ADDR
// hardcore :=  ;
28438: LD_ADDR_VAR 0 4
28442: PUSH
28443: LD_STRING 
28445: ST_TO_ADDR
// for i = 1 to normalCounter do
28446: LD_ADDR_VAR 0 5
28450: PUSH
28451: DOUBLE
28452: LD_INT 1
28454: DEC
28455: ST_TO_ADDR
28456: LD_EXP 79
28460: PUSH
28461: FOR_TO
28462: IFFALSE 28563
// begin tmp := 0 ;
28464: LD_ADDR_VAR 0 2
28468: PUSH
28469: LD_STRING 0
28471: ST_TO_ADDR
// if result [ 1 ] then
28472: LD_VAR 0 1
28476: PUSH
28477: LD_INT 1
28479: ARRAY
28480: IFFALSE 28545
// if result [ 1 ] [ 1 ] = i then
28482: LD_VAR 0 1
28486: PUSH
28487: LD_INT 1
28489: ARRAY
28490: PUSH
28491: LD_INT 1
28493: ARRAY
28494: PUSH
28495: LD_VAR 0 5
28499: EQUAL
28500: IFFALSE 28545
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
28502: LD_ADDR_VAR 0 1
28506: PUSH
28507: LD_VAR 0 1
28511: PPUSH
28512: LD_INT 1
28514: PPUSH
28515: LD_VAR 0 1
28519: PUSH
28520: LD_INT 1
28522: ARRAY
28523: PPUSH
28524: LD_INT 1
28526: PPUSH
28527: CALL_OW 3
28531: PPUSH
28532: CALL_OW 1
28536: ST_TO_ADDR
// tmp := 1 ;
28537: LD_ADDR_VAR 0 2
28541: PUSH
28542: LD_STRING 1
28544: ST_TO_ADDR
// end ; normal := normal & tmp ;
28545: LD_ADDR_VAR 0 3
28549: PUSH
28550: LD_VAR 0 3
28554: PUSH
28555: LD_VAR 0 2
28559: STR
28560: ST_TO_ADDR
// end ;
28561: GO 28461
28563: POP
28564: POP
// for i = 1 to hardcoreCounter do
28565: LD_ADDR_VAR 0 5
28569: PUSH
28570: DOUBLE
28571: LD_INT 1
28573: DEC
28574: ST_TO_ADDR
28575: LD_EXP 80
28579: PUSH
28580: FOR_TO
28581: IFFALSE 28686
// begin tmp := 0 ;
28583: LD_ADDR_VAR 0 2
28587: PUSH
28588: LD_STRING 0
28590: ST_TO_ADDR
// if result [ 2 ] then
28591: LD_VAR 0 1
28595: PUSH
28596: LD_INT 2
28598: ARRAY
28599: IFFALSE 28668
// if result [ 2 ] [ 1 ] = 100 + i then
28601: LD_VAR 0 1
28605: PUSH
28606: LD_INT 2
28608: ARRAY
28609: PUSH
28610: LD_INT 1
28612: ARRAY
28613: PUSH
28614: LD_INT 100
28616: PUSH
28617: LD_VAR 0 5
28621: PLUS
28622: EQUAL
28623: IFFALSE 28668
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
28625: LD_ADDR_VAR 0 1
28629: PUSH
28630: LD_VAR 0 1
28634: PPUSH
28635: LD_INT 2
28637: PPUSH
28638: LD_VAR 0 1
28642: PUSH
28643: LD_INT 2
28645: ARRAY
28646: PPUSH
28647: LD_INT 1
28649: PPUSH
28650: CALL_OW 3
28654: PPUSH
28655: CALL_OW 1
28659: ST_TO_ADDR
// tmp := 1 ;
28660: LD_ADDR_VAR 0 2
28664: PUSH
28665: LD_STRING 1
28667: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
28668: LD_ADDR_VAR 0 4
28672: PUSH
28673: LD_VAR 0 4
28677: PUSH
28678: LD_VAR 0 2
28682: STR
28683: ST_TO_ADDR
// end ;
28684: GO 28580
28686: POP
28687: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
28688: LD_STRING getStreamItemsFromMission("
28690: PUSH
28691: LD_VAR 0 3
28695: STR
28696: PUSH
28697: LD_STRING ","
28699: STR
28700: PUSH
28701: LD_VAR 0 4
28705: STR
28706: PUSH
28707: LD_STRING ")
28709: STR
28710: PPUSH
28711: CALL_OW 559
// end else
28715: GO 28724
// ToLua ( getStreamItemsFromMission("","") ) ;
28717: LD_STRING getStreamItemsFromMission("","")
28719: PPUSH
28720: CALL_OW 559
// end ;
28724: LD_VAR 0 1
28728: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
28729: LD_EXP 78
28733: PUSH
28734: LD_EXP 83
28738: AND
28739: IFFALSE 28863
28741: GO 28743
28743: DISABLE
28744: LD_INT 0
28746: PPUSH
28747: PPUSH
// begin enable ;
28748: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
28749: LD_ADDR_VAR 0 2
28753: PUSH
28754: LD_INT 22
28756: PUSH
28757: LD_OWVAR 2
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 2
28768: PUSH
28769: LD_INT 34
28771: PUSH
28772: LD_INT 7
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 34
28781: PUSH
28782: LD_INT 45
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 34
28791: PUSH
28792: LD_INT 28
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 34
28801: PUSH
28802: LD_INT 47
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PPUSH
28820: CALL_OW 69
28824: ST_TO_ADDR
// if not tmp then
28825: LD_VAR 0 2
28829: NOT
28830: IFFALSE 28834
// exit ;
28832: GO 28863
// for i in tmp do
28834: LD_ADDR_VAR 0 1
28838: PUSH
28839: LD_VAR 0 2
28843: PUSH
28844: FOR_IN
28845: IFFALSE 28861
// begin SetLives ( i , 0 ) ;
28847: LD_VAR 0 1
28851: PPUSH
28852: LD_INT 0
28854: PPUSH
28855: CALL_OW 234
// end ;
28859: GO 28844
28861: POP
28862: POP
// end ;
28863: PPOPN 2
28865: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
28866: LD_EXP 78
28870: PUSH
28871: LD_EXP 84
28875: AND
28876: IFFALSE 28960
28878: GO 28880
28880: DISABLE
28881: LD_INT 0
28883: PPUSH
28884: PPUSH
// begin enable ;
28885: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
28886: LD_ADDR_VAR 0 2
28890: PUSH
28891: LD_INT 22
28893: PUSH
28894: LD_OWVAR 2
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 32
28905: PUSH
28906: LD_INT 3
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PPUSH
28917: CALL_OW 69
28921: ST_TO_ADDR
// if not tmp then
28922: LD_VAR 0 2
28926: NOT
28927: IFFALSE 28931
// exit ;
28929: GO 28960
// for i in tmp do
28931: LD_ADDR_VAR 0 1
28935: PUSH
28936: LD_VAR 0 2
28940: PUSH
28941: FOR_IN
28942: IFFALSE 28958
// begin SetLives ( i , 0 ) ;
28944: LD_VAR 0 1
28948: PPUSH
28949: LD_INT 0
28951: PPUSH
28952: CALL_OW 234
// end ;
28956: GO 28941
28958: POP
28959: POP
// end ;
28960: PPOPN 2
28962: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
28963: LD_EXP 78
28967: PUSH
28968: LD_EXP 81
28972: AND
28973: IFFALSE 29066
28975: GO 28977
28977: DISABLE
28978: LD_INT 0
28980: PPUSH
// begin enable ;
28981: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
28982: LD_ADDR_VAR 0 1
28986: PUSH
28987: LD_INT 22
28989: PUSH
28990: LD_OWVAR 2
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 2
29001: PUSH
29002: LD_INT 25
29004: PUSH
29005: LD_INT 5
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 25
29014: PUSH
29015: LD_INT 9
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 25
29024: PUSH
29025: LD_INT 8
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PPUSH
29042: CALL_OW 69
29046: PUSH
29047: FOR_IN
29048: IFFALSE 29064
// begin SetClass ( i , 1 ) ;
29050: LD_VAR 0 1
29054: PPUSH
29055: LD_INT 1
29057: PPUSH
29058: CALL_OW 336
// end ;
29062: GO 29047
29064: POP
29065: POP
// end ;
29066: PPOPN 1
29068: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
29069: LD_EXP 78
29073: PUSH
29074: LD_EXP 82
29078: AND
29079: PUSH
29080: LD_OWVAR 65
29084: PUSH
29085: LD_INT 7
29087: LESS
29088: AND
29089: IFFALSE 29103
29091: GO 29093
29093: DISABLE
// begin enable ;
29094: ENABLE
// game_speed := 7 ;
29095: LD_ADDR_OWVAR 65
29099: PUSH
29100: LD_INT 7
29102: ST_TO_ADDR
// end ;
29103: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
29104: LD_EXP 78
29108: PUSH
29109: LD_EXP 85
29113: AND
29114: IFFALSE 29316
29116: GO 29118
29118: DISABLE
29119: LD_INT 0
29121: PPUSH
29122: PPUSH
29123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29124: LD_ADDR_VAR 0 3
29128: PUSH
29129: LD_INT 81
29131: PUSH
29132: LD_OWVAR 2
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 21
29143: PUSH
29144: LD_INT 1
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PPUSH
29155: CALL_OW 69
29159: ST_TO_ADDR
// if not tmp then
29160: LD_VAR 0 3
29164: NOT
29165: IFFALSE 29169
// exit ;
29167: GO 29316
// if tmp > 5 then
29169: LD_VAR 0 3
29173: PUSH
29174: LD_INT 5
29176: GREATER
29177: IFFALSE 29189
// k := 5 else
29179: LD_ADDR_VAR 0 2
29183: PUSH
29184: LD_INT 5
29186: ST_TO_ADDR
29187: GO 29199
// k := tmp ;
29189: LD_ADDR_VAR 0 2
29193: PUSH
29194: LD_VAR 0 3
29198: ST_TO_ADDR
// for i := 1 to k do
29199: LD_ADDR_VAR 0 1
29203: PUSH
29204: DOUBLE
29205: LD_INT 1
29207: DEC
29208: ST_TO_ADDR
29209: LD_VAR 0 2
29213: PUSH
29214: FOR_TO
29215: IFFALSE 29314
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
29217: LD_VAR 0 3
29221: PUSH
29222: LD_VAR 0 1
29226: ARRAY
29227: PPUSH
29228: LD_VAR 0 1
29232: PUSH
29233: LD_INT 4
29235: MOD
29236: PUSH
29237: LD_INT 1
29239: PLUS
29240: PPUSH
29241: CALL_OW 259
29245: PUSH
29246: LD_INT 10
29248: LESS
29249: IFFALSE 29312
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
29251: LD_VAR 0 3
29255: PUSH
29256: LD_VAR 0 1
29260: ARRAY
29261: PPUSH
29262: LD_VAR 0 1
29266: PUSH
29267: LD_INT 4
29269: MOD
29270: PUSH
29271: LD_INT 1
29273: PLUS
29274: PPUSH
29275: LD_VAR 0 3
29279: PUSH
29280: LD_VAR 0 1
29284: ARRAY
29285: PPUSH
29286: LD_VAR 0 1
29290: PUSH
29291: LD_INT 4
29293: MOD
29294: PUSH
29295: LD_INT 1
29297: PLUS
29298: PPUSH
29299: CALL_OW 259
29303: PUSH
29304: LD_INT 1
29306: PLUS
29307: PPUSH
29308: CALL_OW 237
29312: GO 29214
29314: POP
29315: POP
// end ;
29316: PPOPN 3
29318: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
29319: LD_EXP 78
29323: PUSH
29324: LD_EXP 86
29328: AND
29329: IFFALSE 29349
29331: GO 29333
29333: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
29334: LD_INT 4
29336: PPUSH
29337: LD_OWVAR 2
29341: PPUSH
29342: LD_INT 0
29344: PPUSH
29345: CALL_OW 324
29349: END
// every 0 0$1 trigger StreamModeActive and sShovel do
29350: LD_EXP 78
29354: PUSH
29355: LD_EXP 115
29359: AND
29360: IFFALSE 29380
29362: GO 29364
29364: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
29365: LD_INT 19
29367: PPUSH
29368: LD_OWVAR 2
29372: PPUSH
29373: LD_INT 0
29375: PPUSH
29376: CALL_OW 324
29380: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
29381: LD_EXP 78
29385: PUSH
29386: LD_EXP 87
29390: AND
29391: IFFALSE 29493
29393: GO 29395
29395: DISABLE
29396: LD_INT 0
29398: PPUSH
29399: PPUSH
// begin enable ;
29400: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
29401: LD_ADDR_VAR 0 2
29405: PUSH
29406: LD_INT 22
29408: PUSH
29409: LD_OWVAR 2
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 2
29420: PUSH
29421: LD_INT 34
29423: PUSH
29424: LD_INT 11
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 34
29433: PUSH
29434: LD_INT 30
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: LIST
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PPUSH
29450: CALL_OW 69
29454: ST_TO_ADDR
// if not tmp then
29455: LD_VAR 0 2
29459: NOT
29460: IFFALSE 29464
// exit ;
29462: GO 29493
// for i in tmp do
29464: LD_ADDR_VAR 0 1
29468: PUSH
29469: LD_VAR 0 2
29473: PUSH
29474: FOR_IN
29475: IFFALSE 29491
// begin SetLives ( i , 0 ) ;
29477: LD_VAR 0 1
29481: PPUSH
29482: LD_INT 0
29484: PPUSH
29485: CALL_OW 234
// end ;
29489: GO 29474
29491: POP
29492: POP
// end ;
29493: PPOPN 2
29495: END
// every 0 0$1 trigger StreamModeActive and sBunker do
29496: LD_EXP 78
29500: PUSH
29501: LD_EXP 88
29505: AND
29506: IFFALSE 29526
29508: GO 29510
29510: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
29511: LD_INT 32
29513: PPUSH
29514: LD_OWVAR 2
29518: PPUSH
29519: LD_INT 0
29521: PPUSH
29522: CALL_OW 324
29526: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
29527: LD_EXP 78
29531: PUSH
29532: LD_EXP 89
29536: AND
29537: IFFALSE 29718
29539: GO 29541
29541: DISABLE
29542: LD_INT 0
29544: PPUSH
29545: PPUSH
29546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
29547: LD_ADDR_VAR 0 2
29551: PUSH
29552: LD_INT 22
29554: PUSH
29555: LD_OWVAR 2
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 33
29566: PUSH
29567: LD_INT 3
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PPUSH
29578: CALL_OW 69
29582: ST_TO_ADDR
// if not tmp then
29583: LD_VAR 0 2
29587: NOT
29588: IFFALSE 29592
// exit ;
29590: GO 29718
// side := 0 ;
29592: LD_ADDR_VAR 0 3
29596: PUSH
29597: LD_INT 0
29599: ST_TO_ADDR
// for i := 1 to 8 do
29600: LD_ADDR_VAR 0 1
29604: PUSH
29605: DOUBLE
29606: LD_INT 1
29608: DEC
29609: ST_TO_ADDR
29610: LD_INT 8
29612: PUSH
29613: FOR_TO
29614: IFFALSE 29662
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
29616: LD_OWVAR 2
29620: PUSH
29621: LD_VAR 0 1
29625: NONEQUAL
29626: PUSH
29627: LD_OWVAR 2
29631: PPUSH
29632: LD_VAR 0 1
29636: PPUSH
29637: CALL_OW 81
29641: PUSH
29642: LD_INT 2
29644: EQUAL
29645: AND
29646: IFFALSE 29660
// begin side := i ;
29648: LD_ADDR_VAR 0 3
29652: PUSH
29653: LD_VAR 0 1
29657: ST_TO_ADDR
// break ;
29658: GO 29662
// end ;
29660: GO 29613
29662: POP
29663: POP
// if not side then
29664: LD_VAR 0 3
29668: NOT
29669: IFFALSE 29673
// exit ;
29671: GO 29718
// for i := 1 to tmp do
29673: LD_ADDR_VAR 0 1
29677: PUSH
29678: DOUBLE
29679: LD_INT 1
29681: DEC
29682: ST_TO_ADDR
29683: LD_VAR 0 2
29687: PUSH
29688: FOR_TO
29689: IFFALSE 29716
// if Prob ( 60 ) then
29691: LD_INT 60
29693: PPUSH
29694: CALL_OW 13
29698: IFFALSE 29714
// SetSide ( i , side ) ;
29700: LD_VAR 0 1
29704: PPUSH
29705: LD_VAR 0 3
29709: PPUSH
29710: CALL_OW 235
29714: GO 29688
29716: POP
29717: POP
// end ;
29718: PPOPN 3
29720: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
29721: LD_EXP 78
29725: PUSH
29726: LD_EXP 91
29730: AND
29731: IFFALSE 29850
29733: GO 29735
29735: DISABLE
29736: LD_INT 0
29738: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
29739: LD_ADDR_VAR 0 1
29743: PUSH
29744: LD_INT 22
29746: PUSH
29747: LD_OWVAR 2
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 21
29758: PUSH
29759: LD_INT 1
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: LD_INT 3
29768: PUSH
29769: LD_INT 23
29771: PUSH
29772: LD_INT 0
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: LIST
29787: PPUSH
29788: CALL_OW 69
29792: PUSH
29793: FOR_IN
29794: IFFALSE 29848
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
29796: LD_VAR 0 1
29800: PPUSH
29801: CALL_OW 257
29805: PUSH
29806: LD_INT 1
29808: PUSH
29809: LD_INT 2
29811: PUSH
29812: LD_INT 3
29814: PUSH
29815: LD_INT 4
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: IN
29824: IFFALSE 29846
// SetClass ( un , rand ( 1 , 4 ) ) ;
29826: LD_VAR 0 1
29830: PPUSH
29831: LD_INT 1
29833: PPUSH
29834: LD_INT 4
29836: PPUSH
29837: CALL_OW 12
29841: PPUSH
29842: CALL_OW 336
29846: GO 29793
29848: POP
29849: POP
// end ;
29850: PPOPN 1
29852: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
29853: LD_EXP 78
29857: PUSH
29858: LD_EXP 90
29862: AND
29863: IFFALSE 29942
29865: GO 29867
29867: DISABLE
29868: LD_INT 0
29870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29871: LD_ADDR_VAR 0 1
29875: PUSH
29876: LD_INT 22
29878: PUSH
29879: LD_OWVAR 2
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 21
29890: PUSH
29891: LD_INT 3
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PPUSH
29902: CALL_OW 69
29906: ST_TO_ADDR
// if not tmp then
29907: LD_VAR 0 1
29911: NOT
29912: IFFALSE 29916
// exit ;
29914: GO 29942
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
29916: LD_VAR 0 1
29920: PUSH
29921: LD_INT 1
29923: PPUSH
29924: LD_VAR 0 1
29928: PPUSH
29929: CALL_OW 12
29933: ARRAY
29934: PPUSH
29935: LD_INT 100
29937: PPUSH
29938: CALL_OW 234
// end ;
29942: PPOPN 1
29944: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
29945: LD_EXP 78
29949: PUSH
29950: LD_EXP 92
29954: AND
29955: IFFALSE 30053
29957: GO 29959
29959: DISABLE
29960: LD_INT 0
29962: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29963: LD_ADDR_VAR 0 1
29967: PUSH
29968: LD_INT 22
29970: PUSH
29971: LD_OWVAR 2
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 21
29982: PUSH
29983: LD_INT 1
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PPUSH
29994: CALL_OW 69
29998: ST_TO_ADDR
// if not tmp then
29999: LD_VAR 0 1
30003: NOT
30004: IFFALSE 30008
// exit ;
30006: GO 30053
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
30008: LD_VAR 0 1
30012: PUSH
30013: LD_INT 1
30015: PPUSH
30016: LD_VAR 0 1
30020: PPUSH
30021: CALL_OW 12
30025: ARRAY
30026: PPUSH
30027: LD_INT 1
30029: PPUSH
30030: LD_INT 4
30032: PPUSH
30033: CALL_OW 12
30037: PPUSH
30038: LD_INT 3000
30040: PPUSH
30041: LD_INT 9000
30043: PPUSH
30044: CALL_OW 12
30048: PPUSH
30049: CALL_OW 492
// end ;
30053: PPOPN 1
30055: END
// every 0 0$1 trigger StreamModeActive and sDepot do
30056: LD_EXP 78
30060: PUSH
30061: LD_EXP 93
30065: AND
30066: IFFALSE 30086
30068: GO 30070
30070: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
30071: LD_INT 1
30073: PPUSH
30074: LD_OWVAR 2
30078: PPUSH
30079: LD_INT 0
30081: PPUSH
30082: CALL_OW 324
30086: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
30087: LD_EXP 78
30091: PUSH
30092: LD_EXP 94
30096: AND
30097: IFFALSE 30180
30099: GO 30101
30101: DISABLE
30102: LD_INT 0
30104: PPUSH
30105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
30106: LD_ADDR_VAR 0 2
30110: PUSH
30111: LD_INT 22
30113: PUSH
30114: LD_OWVAR 2
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 21
30125: PUSH
30126: LD_INT 3
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PPUSH
30137: CALL_OW 69
30141: ST_TO_ADDR
// if not tmp then
30142: LD_VAR 0 2
30146: NOT
30147: IFFALSE 30151
// exit ;
30149: GO 30180
// for i in tmp do
30151: LD_ADDR_VAR 0 1
30155: PUSH
30156: LD_VAR 0 2
30160: PUSH
30161: FOR_IN
30162: IFFALSE 30178
// SetBLevel ( i , 10 ) ;
30164: LD_VAR 0 1
30168: PPUSH
30169: LD_INT 10
30171: PPUSH
30172: CALL_OW 241
30176: GO 30161
30178: POP
30179: POP
// end ;
30180: PPOPN 2
30182: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
30183: LD_EXP 78
30187: PUSH
30188: LD_EXP 95
30192: AND
30193: IFFALSE 30304
30195: GO 30197
30197: DISABLE
30198: LD_INT 0
30200: PPUSH
30201: PPUSH
30202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30203: LD_ADDR_VAR 0 3
30207: PUSH
30208: LD_INT 22
30210: PUSH
30211: LD_OWVAR 2
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 25
30222: PUSH
30223: LD_INT 1
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PPUSH
30234: CALL_OW 69
30238: ST_TO_ADDR
// if not tmp then
30239: LD_VAR 0 3
30243: NOT
30244: IFFALSE 30248
// exit ;
30246: GO 30304
// un := tmp [ rand ( 1 , tmp ) ] ;
30248: LD_ADDR_VAR 0 2
30252: PUSH
30253: LD_VAR 0 3
30257: PUSH
30258: LD_INT 1
30260: PPUSH
30261: LD_VAR 0 3
30265: PPUSH
30266: CALL_OW 12
30270: ARRAY
30271: ST_TO_ADDR
// if Crawls ( un ) then
30272: LD_VAR 0 2
30276: PPUSH
30277: CALL_OW 318
30281: IFFALSE 30292
// ComWalk ( un ) ;
30283: LD_VAR 0 2
30287: PPUSH
30288: CALL_OW 138
// SetClass ( un , class_sniper ) ;
30292: LD_VAR 0 2
30296: PPUSH
30297: LD_INT 5
30299: PPUSH
30300: CALL_OW 336
// end ;
30304: PPOPN 3
30306: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
30307: LD_EXP 78
30311: PUSH
30312: LD_EXP 96
30316: AND
30317: PUSH
30318: LD_OWVAR 67
30322: PUSH
30323: LD_INT 3
30325: LESS
30326: AND
30327: IFFALSE 30346
30329: GO 30331
30331: DISABLE
// Difficulty := Difficulty + 1 ;
30332: LD_ADDR_OWVAR 67
30336: PUSH
30337: LD_OWVAR 67
30341: PUSH
30342: LD_INT 1
30344: PLUS
30345: ST_TO_ADDR
30346: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
30347: LD_EXP 78
30351: PUSH
30352: LD_EXP 97
30356: AND
30357: IFFALSE 30460
30359: GO 30361
30361: DISABLE
30362: LD_INT 0
30364: PPUSH
// begin for i := 1 to 5 do
30365: LD_ADDR_VAR 0 1
30369: PUSH
30370: DOUBLE
30371: LD_INT 1
30373: DEC
30374: ST_TO_ADDR
30375: LD_INT 5
30377: PUSH
30378: FOR_TO
30379: IFFALSE 30458
// begin uc_nation := nation_nature ;
30381: LD_ADDR_OWVAR 21
30385: PUSH
30386: LD_INT 0
30388: ST_TO_ADDR
// uc_side := 0 ;
30389: LD_ADDR_OWVAR 20
30393: PUSH
30394: LD_INT 0
30396: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
30397: LD_ADDR_OWVAR 29
30401: PUSH
30402: LD_INT 12
30404: PUSH
30405: LD_INT 12
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: ST_TO_ADDR
// hc_agressivity := 20 ;
30412: LD_ADDR_OWVAR 35
30416: PUSH
30417: LD_INT 20
30419: ST_TO_ADDR
// hc_class := class_tiger ;
30420: LD_ADDR_OWVAR 28
30424: PUSH
30425: LD_INT 14
30427: ST_TO_ADDR
// hc_gallery :=  ;
30428: LD_ADDR_OWVAR 33
30432: PUSH
30433: LD_STRING 
30435: ST_TO_ADDR
// hc_name :=  ;
30436: LD_ADDR_OWVAR 26
30440: PUSH
30441: LD_STRING 
30443: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
30444: CALL_OW 44
30448: PPUSH
30449: LD_INT 0
30451: PPUSH
30452: CALL_OW 51
// end ;
30456: GO 30378
30458: POP
30459: POP
// end ;
30460: PPOPN 1
30462: END
// every 0 0$1 trigger StreamModeActive and sBomb do
30463: LD_EXP 78
30467: PUSH
30468: LD_EXP 98
30472: AND
30473: IFFALSE 30482
30475: GO 30477
30477: DISABLE
// StreamSibBomb ;
30478: CALL 30483 0 0
30482: END
// export function StreamSibBomb ; var i , x , y ; begin
30483: LD_INT 0
30485: PPUSH
30486: PPUSH
30487: PPUSH
30488: PPUSH
// result := false ;
30489: LD_ADDR_VAR 0 1
30493: PUSH
30494: LD_INT 0
30496: ST_TO_ADDR
// for i := 1 to 16 do
30497: LD_ADDR_VAR 0 2
30501: PUSH
30502: DOUBLE
30503: LD_INT 1
30505: DEC
30506: ST_TO_ADDR
30507: LD_INT 16
30509: PUSH
30510: FOR_TO
30511: IFFALSE 30710
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
30513: LD_ADDR_VAR 0 3
30517: PUSH
30518: LD_INT 10
30520: PUSH
30521: LD_INT 20
30523: PUSH
30524: LD_INT 30
30526: PUSH
30527: LD_INT 40
30529: PUSH
30530: LD_INT 50
30532: PUSH
30533: LD_INT 60
30535: PUSH
30536: LD_INT 70
30538: PUSH
30539: LD_INT 80
30541: PUSH
30542: LD_INT 90
30544: PUSH
30545: LD_INT 100
30547: PUSH
30548: LD_INT 110
30550: PUSH
30551: LD_INT 120
30553: PUSH
30554: LD_INT 130
30556: PUSH
30557: LD_INT 140
30559: PUSH
30560: LD_INT 150
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 1
30582: PPUSH
30583: LD_INT 15
30585: PPUSH
30586: CALL_OW 12
30590: ARRAY
30591: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
30592: LD_ADDR_VAR 0 4
30596: PUSH
30597: LD_INT 10
30599: PUSH
30600: LD_INT 20
30602: PUSH
30603: LD_INT 30
30605: PUSH
30606: LD_INT 40
30608: PUSH
30609: LD_INT 50
30611: PUSH
30612: LD_INT 60
30614: PUSH
30615: LD_INT 70
30617: PUSH
30618: LD_INT 80
30620: PUSH
30621: LD_INT 90
30623: PUSH
30624: LD_INT 100
30626: PUSH
30627: LD_INT 110
30629: PUSH
30630: LD_INT 120
30632: PUSH
30633: LD_INT 130
30635: PUSH
30636: LD_INT 140
30638: PUSH
30639: LD_INT 150
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 1
30661: PPUSH
30662: LD_INT 15
30664: PPUSH
30665: CALL_OW 12
30669: ARRAY
30670: ST_TO_ADDR
// if ValidHex ( x , y ) then
30671: LD_VAR 0 3
30675: PPUSH
30676: LD_VAR 0 4
30680: PPUSH
30681: CALL_OW 488
30685: IFFALSE 30708
// begin result := [ x , y ] ;
30687: LD_ADDR_VAR 0 1
30691: PUSH
30692: LD_VAR 0 3
30696: PUSH
30697: LD_VAR 0 4
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: ST_TO_ADDR
// break ;
30706: GO 30710
// end ; end ;
30708: GO 30510
30710: POP
30711: POP
// if result then
30712: LD_VAR 0 1
30716: IFFALSE 30776
// begin ToLua ( playSibBomb() ) ;
30718: LD_STRING playSibBomb()
30720: PPUSH
30721: CALL_OW 559
// wait ( 0 0$14 ) ;
30725: LD_INT 490
30727: PPUSH
30728: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
30732: LD_VAR 0 1
30736: PUSH
30737: LD_INT 1
30739: ARRAY
30740: PPUSH
30741: LD_VAR 0 1
30745: PUSH
30746: LD_INT 2
30748: ARRAY
30749: PPUSH
30750: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
30754: LD_VAR 0 1
30758: PUSH
30759: LD_INT 1
30761: ARRAY
30762: PPUSH
30763: LD_VAR 0 1
30767: PUSH
30768: LD_INT 2
30770: ARRAY
30771: PPUSH
30772: CALL_OW 429
// end ; end ;
30776: LD_VAR 0 1
30780: RET
// every 0 0$1 trigger StreamModeActive and sReset do
30781: LD_EXP 78
30785: PUSH
30786: LD_EXP 100
30790: AND
30791: IFFALSE 30803
30793: GO 30795
30795: DISABLE
// YouLost (  ) ;
30796: LD_STRING 
30798: PPUSH
30799: CALL_OW 104
30803: END
// every 0 0$1 trigger StreamModeActive and sFog do
30804: LD_EXP 78
30808: PUSH
30809: LD_EXP 99
30813: AND
30814: IFFALSE 30828
30816: GO 30818
30818: DISABLE
// FogOff ( your_side ) ;
30819: LD_OWVAR 2
30823: PPUSH
30824: CALL_OW 344
30828: END
// every 0 0$1 trigger StreamModeActive and sSun do
30829: LD_EXP 78
30833: PUSH
30834: LD_EXP 101
30838: AND
30839: IFFALSE 30867
30841: GO 30843
30843: DISABLE
// begin solar_recharge_percent := 0 ;
30844: LD_ADDR_OWVAR 79
30848: PUSH
30849: LD_INT 0
30851: ST_TO_ADDR
// wait ( 5 5$00 ) ;
30852: LD_INT 10500
30854: PPUSH
30855: CALL_OW 67
// solar_recharge_percent := 100 ;
30859: LD_ADDR_OWVAR 79
30863: PUSH
30864: LD_INT 100
30866: ST_TO_ADDR
// end ;
30867: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
30868: LD_EXP 78
30872: PUSH
30873: LD_EXP 102
30877: AND
30878: IFFALSE 31117
30880: GO 30882
30882: DISABLE
30883: LD_INT 0
30885: PPUSH
30886: PPUSH
30887: PPUSH
// begin tmp := [ ] ;
30888: LD_ADDR_VAR 0 3
30892: PUSH
30893: EMPTY
30894: ST_TO_ADDR
// for i := 1 to 6 do
30895: LD_ADDR_VAR 0 1
30899: PUSH
30900: DOUBLE
30901: LD_INT 1
30903: DEC
30904: ST_TO_ADDR
30905: LD_INT 6
30907: PUSH
30908: FOR_TO
30909: IFFALSE 31014
// begin uc_nation := nation_nature ;
30911: LD_ADDR_OWVAR 21
30915: PUSH
30916: LD_INT 0
30918: ST_TO_ADDR
// uc_side := 0 ;
30919: LD_ADDR_OWVAR 20
30923: PUSH
30924: LD_INT 0
30926: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
30927: LD_ADDR_OWVAR 29
30931: PUSH
30932: LD_INT 12
30934: PUSH
30935: LD_INT 12
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: ST_TO_ADDR
// hc_agressivity := 20 ;
30942: LD_ADDR_OWVAR 35
30946: PUSH
30947: LD_INT 20
30949: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
30950: LD_ADDR_OWVAR 28
30954: PUSH
30955: LD_INT 17
30957: ST_TO_ADDR
// hc_gallery :=  ;
30958: LD_ADDR_OWVAR 33
30962: PUSH
30963: LD_STRING 
30965: ST_TO_ADDR
// hc_name :=  ;
30966: LD_ADDR_OWVAR 26
30970: PUSH
30971: LD_STRING 
30973: ST_TO_ADDR
// un := CreateHuman ;
30974: LD_ADDR_VAR 0 2
30978: PUSH
30979: CALL_OW 44
30983: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
30984: LD_VAR 0 2
30988: PPUSH
30989: LD_INT 1
30991: PPUSH
30992: CALL_OW 51
// tmp := tmp ^ un ;
30996: LD_ADDR_VAR 0 3
31000: PUSH
31001: LD_VAR 0 3
31005: PUSH
31006: LD_VAR 0 2
31010: ADD
31011: ST_TO_ADDR
// end ;
31012: GO 30908
31014: POP
31015: POP
// repeat wait ( 0 0$1 ) ;
31016: LD_INT 35
31018: PPUSH
31019: CALL_OW 67
// for un in tmp do
31023: LD_ADDR_VAR 0 2
31027: PUSH
31028: LD_VAR 0 3
31032: PUSH
31033: FOR_IN
31034: IFFALSE 31108
// begin if IsDead ( un ) then
31036: LD_VAR 0 2
31040: PPUSH
31041: CALL_OW 301
31045: IFFALSE 31065
// begin tmp := tmp diff un ;
31047: LD_ADDR_VAR 0 3
31051: PUSH
31052: LD_VAR 0 3
31056: PUSH
31057: LD_VAR 0 2
31061: DIFF
31062: ST_TO_ADDR
// continue ;
31063: GO 31033
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
31065: LD_VAR 0 2
31069: PPUSH
31070: LD_INT 3
31072: PUSH
31073: LD_INT 22
31075: PUSH
31076: LD_INT 0
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PPUSH
31087: CALL_OW 69
31091: PPUSH
31092: LD_VAR 0 2
31096: PPUSH
31097: CALL_OW 74
31101: PPUSH
31102: CALL_OW 115
// end ;
31106: GO 31033
31108: POP
31109: POP
// until not tmp ;
31110: LD_VAR 0 3
31114: NOT
31115: IFFALSE 31016
// end ;
31117: PPOPN 3
31119: END
// every 0 0$1 trigger StreamModeActive and sTroll do
31120: LD_EXP 78
31124: PUSH
31125: LD_EXP 103
31129: AND
31130: IFFALSE 31184
31132: GO 31134
31134: DISABLE
// begin ToLua ( displayTroll(); ) ;
31135: LD_STRING displayTroll();
31137: PPUSH
31138: CALL_OW 559
// wait ( 3 3$00 ) ;
31142: LD_INT 6300
31144: PPUSH
31145: CALL_OW 67
// ToLua ( hideTroll(); ) ;
31149: LD_STRING hideTroll();
31151: PPUSH
31152: CALL_OW 559
// wait ( 1 1$00 ) ;
31156: LD_INT 2100
31158: PPUSH
31159: CALL_OW 67
// ToLua ( displayTroll(); ) ;
31163: LD_STRING displayTroll();
31165: PPUSH
31166: CALL_OW 559
// wait ( 1 1$00 ) ;
31170: LD_INT 2100
31172: PPUSH
31173: CALL_OW 67
// ToLua ( hideTroll(); ) ;
31177: LD_STRING hideTroll();
31179: PPUSH
31180: CALL_OW 559
// end ;
31184: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
31185: LD_EXP 78
31189: PUSH
31190: LD_EXP 104
31194: AND
31195: IFFALSE 31258
31197: GO 31199
31199: DISABLE
31200: LD_INT 0
31202: PPUSH
// begin p := 0 ;
31203: LD_ADDR_VAR 0 1
31207: PUSH
31208: LD_INT 0
31210: ST_TO_ADDR
// repeat game_speed := 1 ;
31211: LD_ADDR_OWVAR 65
31215: PUSH
31216: LD_INT 1
31218: ST_TO_ADDR
// wait ( 0 0$1 ) ;
31219: LD_INT 35
31221: PPUSH
31222: CALL_OW 67
// p := p + 1 ;
31226: LD_ADDR_VAR 0 1
31230: PUSH
31231: LD_VAR 0 1
31235: PUSH
31236: LD_INT 1
31238: PLUS
31239: ST_TO_ADDR
// until p >= 60 ;
31240: LD_VAR 0 1
31244: PUSH
31245: LD_INT 60
31247: GREATEREQUAL
31248: IFFALSE 31211
// game_speed := 4 ;
31250: LD_ADDR_OWVAR 65
31254: PUSH
31255: LD_INT 4
31257: ST_TO_ADDR
// end ;
31258: PPOPN 1
31260: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
31261: LD_EXP 78
31265: PUSH
31266: LD_EXP 105
31270: AND
31271: IFFALSE 31417
31273: GO 31275
31275: DISABLE
31276: LD_INT 0
31278: PPUSH
31279: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31280: LD_ADDR_VAR 0 1
31284: PUSH
31285: LD_INT 22
31287: PUSH
31288: LD_OWVAR 2
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 2
31299: PUSH
31300: LD_INT 30
31302: PUSH
31303: LD_INT 0
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 30
31312: PUSH
31313: LD_INT 1
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: LIST
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PPUSH
31329: CALL_OW 69
31333: ST_TO_ADDR
// if not depot then
31334: LD_VAR 0 1
31338: NOT
31339: IFFALSE 31343
// exit ;
31341: GO 31417
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
31343: LD_ADDR_VAR 0 2
31347: PUSH
31348: LD_VAR 0 1
31352: PUSH
31353: LD_INT 1
31355: PPUSH
31356: LD_VAR 0 1
31360: PPUSH
31361: CALL_OW 12
31365: ARRAY
31366: PPUSH
31367: CALL_OW 274
31371: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
31372: LD_VAR 0 2
31376: PPUSH
31377: LD_INT 1
31379: PPUSH
31380: LD_INT 0
31382: PPUSH
31383: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
31387: LD_VAR 0 2
31391: PPUSH
31392: LD_INT 2
31394: PPUSH
31395: LD_INT 0
31397: PPUSH
31398: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
31402: LD_VAR 0 2
31406: PPUSH
31407: LD_INT 3
31409: PPUSH
31410: LD_INT 0
31412: PPUSH
31413: CALL_OW 277
// end ;
31417: PPOPN 2
31419: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
31420: LD_EXP 78
31424: PUSH
31425: LD_EXP 106
31429: AND
31430: IFFALSE 31527
31432: GO 31434
31434: DISABLE
31435: LD_INT 0
31437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31438: LD_ADDR_VAR 0 1
31442: PUSH
31443: LD_INT 22
31445: PUSH
31446: LD_OWVAR 2
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 21
31457: PUSH
31458: LD_INT 1
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 3
31467: PUSH
31468: LD_INT 23
31470: PUSH
31471: LD_INT 0
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: LIST
31486: PPUSH
31487: CALL_OW 69
31491: ST_TO_ADDR
// if not tmp then
31492: LD_VAR 0 1
31496: NOT
31497: IFFALSE 31501
// exit ;
31499: GO 31527
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
31501: LD_VAR 0 1
31505: PUSH
31506: LD_INT 1
31508: PPUSH
31509: LD_VAR 0 1
31513: PPUSH
31514: CALL_OW 12
31518: ARRAY
31519: PPUSH
31520: LD_INT 200
31522: PPUSH
31523: CALL_OW 234
// end ;
31527: PPOPN 1
31529: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
31530: LD_EXP 78
31534: PUSH
31535: LD_EXP 107
31539: AND
31540: IFFALSE 31619
31542: GO 31544
31544: DISABLE
31545: LD_INT 0
31547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
31548: LD_ADDR_VAR 0 1
31552: PUSH
31553: LD_INT 22
31555: PUSH
31556: LD_OWVAR 2
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 21
31567: PUSH
31568: LD_INT 2
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PPUSH
31579: CALL_OW 69
31583: ST_TO_ADDR
// if not tmp then
31584: LD_VAR 0 1
31588: NOT
31589: IFFALSE 31593
// exit ;
31591: GO 31619
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
31593: LD_VAR 0 1
31597: PUSH
31598: LD_INT 1
31600: PPUSH
31601: LD_VAR 0 1
31605: PPUSH
31606: CALL_OW 12
31610: ARRAY
31611: PPUSH
31612: LD_INT 60
31614: PPUSH
31615: CALL_OW 234
// end ;
31619: PPOPN 1
31621: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
31622: LD_EXP 78
31626: PUSH
31627: LD_EXP 108
31631: AND
31632: IFFALSE 31731
31634: GO 31636
31636: DISABLE
31637: LD_INT 0
31639: PPUSH
31640: PPUSH
// begin enable ;
31641: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
31642: LD_ADDR_VAR 0 1
31646: PUSH
31647: LD_INT 22
31649: PUSH
31650: LD_OWVAR 2
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 61
31661: PUSH
31662: EMPTY
31663: LIST
31664: PUSH
31665: LD_INT 33
31667: PUSH
31668: LD_INT 2
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: LIST
31679: PPUSH
31680: CALL_OW 69
31684: ST_TO_ADDR
// if not tmp then
31685: LD_VAR 0 1
31689: NOT
31690: IFFALSE 31694
// exit ;
31692: GO 31731
// for i in tmp do
31694: LD_ADDR_VAR 0 2
31698: PUSH
31699: LD_VAR 0 1
31703: PUSH
31704: FOR_IN
31705: IFFALSE 31729
// if IsControledBy ( i ) then
31707: LD_VAR 0 2
31711: PPUSH
31712: CALL_OW 312
31716: IFFALSE 31727
// ComUnlink ( i ) ;
31718: LD_VAR 0 2
31722: PPUSH
31723: CALL_OW 136
31727: GO 31704
31729: POP
31730: POP
// end ;
31731: PPOPN 2
31733: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
31734: LD_EXP 78
31738: PUSH
31739: LD_EXP 109
31743: AND
31744: IFFALSE 31884
31746: GO 31748
31748: DISABLE
31749: LD_INT 0
31751: PPUSH
31752: PPUSH
// begin ToLua ( displayPowell(); ) ;
31753: LD_STRING displayPowell();
31755: PPUSH
31756: CALL_OW 559
// uc_side := 0 ;
31760: LD_ADDR_OWVAR 20
31764: PUSH
31765: LD_INT 0
31767: ST_TO_ADDR
// uc_nation := 2 ;
31768: LD_ADDR_OWVAR 21
31772: PUSH
31773: LD_INT 2
31775: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
31776: LD_ADDR_OWVAR 37
31780: PUSH
31781: LD_INT 14
31783: ST_TO_ADDR
// vc_engine := engine_siberite ;
31784: LD_ADDR_OWVAR 39
31788: PUSH
31789: LD_INT 3
31791: ST_TO_ADDR
// vc_control := control_apeman ;
31792: LD_ADDR_OWVAR 38
31796: PUSH
31797: LD_INT 5
31799: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
31800: LD_ADDR_OWVAR 40
31804: PUSH
31805: LD_INT 29
31807: ST_TO_ADDR
// un := CreateVehicle ;
31808: LD_ADDR_VAR 0 2
31812: PUSH
31813: CALL_OW 45
31817: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31818: LD_VAR 0 2
31822: PPUSH
31823: LD_INT 1
31825: PPUSH
31826: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31830: LD_INT 35
31832: PPUSH
31833: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31837: LD_VAR 0 2
31841: PPUSH
31842: LD_INT 22
31844: PUSH
31845: LD_OWVAR 2
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PPUSH
31854: CALL_OW 69
31858: PPUSH
31859: LD_VAR 0 2
31863: PPUSH
31864: CALL_OW 74
31868: PPUSH
31869: CALL_OW 115
// until IsDead ( un ) ;
31873: LD_VAR 0 2
31877: PPUSH
31878: CALL_OW 301
31882: IFFALSE 31830
// end ;
31884: PPOPN 2
31886: END
// every 0 0$1 trigger StreamModeActive and sStu do
31887: LD_EXP 78
31891: PUSH
31892: LD_EXP 117
31896: AND
31897: IFFALSE 31913
31899: GO 31901
31901: DISABLE
// begin ToLua ( displayStucuk(); ) ;
31902: LD_STRING displayStucuk();
31904: PPUSH
31905: CALL_OW 559
// ResetFog ;
31909: CALL_OW 335
// end ;
31913: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
31914: LD_EXP 78
31918: PUSH
31919: LD_EXP 110
31923: AND
31924: IFFALSE 32065
31926: GO 31928
31928: DISABLE
31929: LD_INT 0
31931: PPUSH
31932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31933: LD_ADDR_VAR 0 2
31937: PUSH
31938: LD_INT 22
31940: PUSH
31941: LD_OWVAR 2
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 21
31952: PUSH
31953: LD_INT 1
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PPUSH
31964: CALL_OW 69
31968: ST_TO_ADDR
// if not tmp then
31969: LD_VAR 0 2
31973: NOT
31974: IFFALSE 31978
// exit ;
31976: GO 32065
// un := tmp [ rand ( 1 , tmp ) ] ;
31978: LD_ADDR_VAR 0 1
31982: PUSH
31983: LD_VAR 0 2
31987: PUSH
31988: LD_INT 1
31990: PPUSH
31991: LD_VAR 0 2
31995: PPUSH
31996: CALL_OW 12
32000: ARRAY
32001: ST_TO_ADDR
// SetSide ( un , 0 ) ;
32002: LD_VAR 0 1
32006: PPUSH
32007: LD_INT 0
32009: PPUSH
32010: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
32014: LD_VAR 0 1
32018: PPUSH
32019: LD_OWVAR 3
32023: PUSH
32024: LD_VAR 0 1
32028: DIFF
32029: PPUSH
32030: LD_VAR 0 1
32034: PPUSH
32035: CALL_OW 74
32039: PPUSH
32040: CALL_OW 115
// wait ( 0 0$20 ) ;
32044: LD_INT 700
32046: PPUSH
32047: CALL_OW 67
// SetSide ( un , your_side ) ;
32051: LD_VAR 0 1
32055: PPUSH
32056: LD_OWVAR 2
32060: PPUSH
32061: CALL_OW 235
// end ;
32065: PPOPN 2
32067: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
32068: LD_EXP 78
32072: PUSH
32073: LD_EXP 111
32077: AND
32078: IFFALSE 32184
32080: GO 32082
32082: DISABLE
32083: LD_INT 0
32085: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32086: LD_ADDR_VAR 0 1
32090: PUSH
32091: LD_INT 22
32093: PUSH
32094: LD_OWVAR 2
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 2
32105: PUSH
32106: LD_INT 30
32108: PUSH
32109: LD_INT 0
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 30
32118: PUSH
32119: LD_INT 1
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: LIST
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PPUSH
32135: CALL_OW 69
32139: ST_TO_ADDR
// if not depot then
32140: LD_VAR 0 1
32144: NOT
32145: IFFALSE 32149
// exit ;
32147: GO 32184
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
32149: LD_VAR 0 1
32153: PUSH
32154: LD_INT 1
32156: ARRAY
32157: PPUSH
32158: CALL_OW 250
32162: PPUSH
32163: LD_VAR 0 1
32167: PUSH
32168: LD_INT 1
32170: ARRAY
32171: PPUSH
32172: CALL_OW 251
32176: PPUSH
32177: LD_INT 70
32179: PPUSH
32180: CALL_OW 495
// end ;
32184: PPOPN 1
32186: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
32187: LD_EXP 78
32191: PUSH
32192: LD_EXP 112
32196: AND
32197: IFFALSE 32408
32199: GO 32201
32201: DISABLE
32202: LD_INT 0
32204: PPUSH
32205: PPUSH
32206: PPUSH
32207: PPUSH
32208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
32209: LD_ADDR_VAR 0 5
32213: PUSH
32214: LD_INT 22
32216: PUSH
32217: LD_OWVAR 2
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 21
32228: PUSH
32229: LD_INT 1
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PPUSH
32240: CALL_OW 69
32244: ST_TO_ADDR
// if not tmp then
32245: LD_VAR 0 5
32249: NOT
32250: IFFALSE 32254
// exit ;
32252: GO 32408
// for i in tmp do
32254: LD_ADDR_VAR 0 1
32258: PUSH
32259: LD_VAR 0 5
32263: PUSH
32264: FOR_IN
32265: IFFALSE 32406
// begin d := rand ( 0 , 5 ) ;
32267: LD_ADDR_VAR 0 4
32271: PUSH
32272: LD_INT 0
32274: PPUSH
32275: LD_INT 5
32277: PPUSH
32278: CALL_OW 12
32282: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
32283: LD_ADDR_VAR 0 2
32287: PUSH
32288: LD_VAR 0 1
32292: PPUSH
32293: CALL_OW 250
32297: PPUSH
32298: LD_VAR 0 4
32302: PPUSH
32303: LD_INT 3
32305: PPUSH
32306: LD_INT 12
32308: PPUSH
32309: CALL_OW 12
32313: PPUSH
32314: CALL_OW 272
32318: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
32319: LD_ADDR_VAR 0 3
32323: PUSH
32324: LD_VAR 0 1
32328: PPUSH
32329: CALL_OW 251
32333: PPUSH
32334: LD_VAR 0 4
32338: PPUSH
32339: LD_INT 3
32341: PPUSH
32342: LD_INT 12
32344: PPUSH
32345: CALL_OW 12
32349: PPUSH
32350: CALL_OW 273
32354: ST_TO_ADDR
// if ValidHex ( x , y ) then
32355: LD_VAR 0 2
32359: PPUSH
32360: LD_VAR 0 3
32364: PPUSH
32365: CALL_OW 488
32369: IFFALSE 32404
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
32371: LD_VAR 0 1
32375: PPUSH
32376: LD_VAR 0 2
32380: PPUSH
32381: LD_VAR 0 3
32385: PPUSH
32386: LD_INT 3
32388: PPUSH
32389: LD_INT 6
32391: PPUSH
32392: CALL_OW 12
32396: PPUSH
32397: LD_INT 1
32399: PPUSH
32400: CALL_OW 483
// end ;
32404: GO 32264
32406: POP
32407: POP
// end ;
32408: PPOPN 5
32410: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
32411: LD_EXP 78
32415: PUSH
32416: LD_EXP 113
32420: AND
32421: IFFALSE 32515
32423: GO 32425
32425: DISABLE
32426: LD_INT 0
32428: PPUSH
32429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
32430: LD_ADDR_VAR 0 2
32434: PUSH
32435: LD_INT 22
32437: PUSH
32438: LD_OWVAR 2
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 32
32449: PUSH
32450: LD_INT 1
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 21
32459: PUSH
32460: LD_INT 2
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: LIST
32471: PPUSH
32472: CALL_OW 69
32476: ST_TO_ADDR
// if not tmp then
32477: LD_VAR 0 2
32481: NOT
32482: IFFALSE 32486
// exit ;
32484: GO 32515
// for i in tmp do
32486: LD_ADDR_VAR 0 1
32490: PUSH
32491: LD_VAR 0 2
32495: PUSH
32496: FOR_IN
32497: IFFALSE 32513
// SetFuel ( i , 0 ) ;
32499: LD_VAR 0 1
32503: PPUSH
32504: LD_INT 0
32506: PPUSH
32507: CALL_OW 240
32511: GO 32496
32513: POP
32514: POP
// end ;
32515: PPOPN 2
32517: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
32518: LD_EXP 78
32522: PUSH
32523: LD_EXP 114
32527: AND
32528: IFFALSE 32594
32530: GO 32532
32532: DISABLE
32533: LD_INT 0
32535: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
32536: LD_ADDR_VAR 0 1
32540: PUSH
32541: LD_INT 22
32543: PUSH
32544: LD_OWVAR 2
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 30
32555: PUSH
32556: LD_INT 29
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PPUSH
32567: CALL_OW 69
32571: ST_TO_ADDR
// if not tmp then
32572: LD_VAR 0 1
32576: NOT
32577: IFFALSE 32581
// exit ;
32579: GO 32594
// DestroyUnit ( tmp [ 1 ] ) ;
32581: LD_VAR 0 1
32585: PUSH
32586: LD_INT 1
32588: ARRAY
32589: PPUSH
32590: CALL_OW 65
// end ;
32594: PPOPN 1
32596: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
32597: LD_EXP 78
32601: PUSH
32602: LD_EXP 116
32606: AND
32607: IFFALSE 32736
32609: GO 32611
32611: DISABLE
32612: LD_INT 0
32614: PPUSH
// begin uc_side := 0 ;
32615: LD_ADDR_OWVAR 20
32619: PUSH
32620: LD_INT 0
32622: ST_TO_ADDR
// uc_nation := nation_arabian ;
32623: LD_ADDR_OWVAR 21
32627: PUSH
32628: LD_INT 2
32630: ST_TO_ADDR
// hc_gallery :=  ;
32631: LD_ADDR_OWVAR 33
32635: PUSH
32636: LD_STRING 
32638: ST_TO_ADDR
// hc_name :=  ;
32639: LD_ADDR_OWVAR 26
32643: PUSH
32644: LD_STRING 
32646: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
32647: LD_INT 1
32649: PPUSH
32650: LD_INT 11
32652: PPUSH
32653: LD_INT 10
32655: PPUSH
32656: CALL_OW 380
// un := CreateHuman ;
32660: LD_ADDR_VAR 0 1
32664: PUSH
32665: CALL_OW 44
32669: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32670: LD_VAR 0 1
32674: PPUSH
32675: LD_INT 1
32677: PPUSH
32678: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
32682: LD_INT 35
32684: PPUSH
32685: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
32689: LD_VAR 0 1
32693: PPUSH
32694: LD_INT 22
32696: PUSH
32697: LD_OWVAR 2
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PPUSH
32706: CALL_OW 69
32710: PPUSH
32711: LD_VAR 0 1
32715: PPUSH
32716: CALL_OW 74
32720: PPUSH
32721: CALL_OW 115
// until IsDead ( un ) ;
32725: LD_VAR 0 1
32729: PPUSH
32730: CALL_OW 301
32734: IFFALSE 32682
// end ;
32736: PPOPN 1
32738: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
32739: LD_EXP 78
32743: PUSH
32744: LD_EXP 118
32748: AND
32749: IFFALSE 32761
32751: GO 32753
32753: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
32754: LD_STRING earthquake(getX(game), 0, 32)
32756: PPUSH
32757: CALL_OW 559
32761: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
32762: LD_EXP 78
32766: PUSH
32767: LD_EXP 119
32771: AND
32772: IFFALSE 32863
32774: GO 32776
32776: DISABLE
32777: LD_INT 0
32779: PPUSH
// begin enable ;
32780: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
32781: LD_ADDR_VAR 0 1
32785: PUSH
32786: LD_INT 22
32788: PUSH
32789: LD_OWVAR 2
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 21
32800: PUSH
32801: LD_INT 2
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 33
32810: PUSH
32811: LD_INT 3
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: LIST
32822: PPUSH
32823: CALL_OW 69
32827: ST_TO_ADDR
// if not tmp then
32828: LD_VAR 0 1
32832: NOT
32833: IFFALSE 32837
// exit ;
32835: GO 32863
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32837: LD_VAR 0 1
32841: PUSH
32842: LD_INT 1
32844: PPUSH
32845: LD_VAR 0 1
32849: PPUSH
32850: CALL_OW 12
32854: ARRAY
32855: PPUSH
32856: LD_INT 1
32858: PPUSH
32859: CALL_OW 234
// end ;
32863: PPOPN 1
32865: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
32866: LD_EXP 78
32870: PUSH
32871: LD_EXP 120
32875: AND
32876: IFFALSE 33017
32878: GO 32880
32880: DISABLE
32881: LD_INT 0
32883: PPUSH
32884: PPUSH
32885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32886: LD_ADDR_VAR 0 3
32890: PUSH
32891: LD_INT 22
32893: PUSH
32894: LD_OWVAR 2
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 25
32905: PUSH
32906: LD_INT 1
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PPUSH
32917: CALL_OW 69
32921: ST_TO_ADDR
// if not tmp then
32922: LD_VAR 0 3
32926: NOT
32927: IFFALSE 32931
// exit ;
32929: GO 33017
// un := tmp [ rand ( 1 , tmp ) ] ;
32931: LD_ADDR_VAR 0 2
32935: PUSH
32936: LD_VAR 0 3
32940: PUSH
32941: LD_INT 1
32943: PPUSH
32944: LD_VAR 0 3
32948: PPUSH
32949: CALL_OW 12
32953: ARRAY
32954: ST_TO_ADDR
// if Crawls ( un ) then
32955: LD_VAR 0 2
32959: PPUSH
32960: CALL_OW 318
32964: IFFALSE 32975
// ComWalk ( un ) ;
32966: LD_VAR 0 2
32970: PPUSH
32971: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
32975: LD_VAR 0 2
32979: PPUSH
32980: LD_INT 9
32982: PPUSH
32983: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
32987: LD_INT 28
32989: PPUSH
32990: LD_OWVAR 2
32994: PPUSH
32995: LD_INT 2
32997: PPUSH
32998: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
33002: LD_INT 29
33004: PPUSH
33005: LD_OWVAR 2
33009: PPUSH
33010: LD_INT 2
33012: PPUSH
33013: CALL_OW 322
// end ;
33017: PPOPN 3
33019: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
33020: LD_EXP 78
33024: PUSH
33025: LD_EXP 121
33029: AND
33030: IFFALSE 33141
33032: GO 33034
33034: DISABLE
33035: LD_INT 0
33037: PPUSH
33038: PPUSH
33039: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33040: LD_ADDR_VAR 0 3
33044: PUSH
33045: LD_INT 22
33047: PUSH
33048: LD_OWVAR 2
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 25
33059: PUSH
33060: LD_INT 1
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PPUSH
33071: CALL_OW 69
33075: ST_TO_ADDR
// if not tmp then
33076: LD_VAR 0 3
33080: NOT
33081: IFFALSE 33085
// exit ;
33083: GO 33141
// un := tmp [ rand ( 1 , tmp ) ] ;
33085: LD_ADDR_VAR 0 2
33089: PUSH
33090: LD_VAR 0 3
33094: PUSH
33095: LD_INT 1
33097: PPUSH
33098: LD_VAR 0 3
33102: PPUSH
33103: CALL_OW 12
33107: ARRAY
33108: ST_TO_ADDR
// if Crawls ( un ) then
33109: LD_VAR 0 2
33113: PPUSH
33114: CALL_OW 318
33118: IFFALSE 33129
// ComWalk ( un ) ;
33120: LD_VAR 0 2
33124: PPUSH
33125: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33129: LD_VAR 0 2
33133: PPUSH
33134: LD_INT 8
33136: PPUSH
33137: CALL_OW 336
// end ;
33141: PPOPN 3
33143: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
33144: LD_EXP 78
33148: PUSH
33149: LD_EXP 122
33153: AND
33154: IFFALSE 33298
33156: GO 33158
33158: DISABLE
33159: LD_INT 0
33161: PPUSH
33162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
33163: LD_ADDR_VAR 0 2
33167: PUSH
33168: LD_INT 22
33170: PUSH
33171: LD_OWVAR 2
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 21
33182: PUSH
33183: LD_INT 2
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 2
33192: PUSH
33193: LD_INT 34
33195: PUSH
33196: LD_INT 12
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 34
33205: PUSH
33206: LD_INT 51
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 34
33215: PUSH
33216: LD_INT 32
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: LIST
33233: PPUSH
33234: CALL_OW 69
33238: ST_TO_ADDR
// if not tmp then
33239: LD_VAR 0 2
33243: NOT
33244: IFFALSE 33248
// exit ;
33246: GO 33298
// for i in tmp do
33248: LD_ADDR_VAR 0 1
33252: PUSH
33253: LD_VAR 0 2
33257: PUSH
33258: FOR_IN
33259: IFFALSE 33296
// if GetCargo ( i , mat_artifact ) = 0 then
33261: LD_VAR 0 1
33265: PPUSH
33266: LD_INT 4
33268: PPUSH
33269: CALL_OW 289
33273: PUSH
33274: LD_INT 0
33276: EQUAL
33277: IFFALSE 33294
// SetCargo ( i , mat_siberit , 100 ) ;
33279: LD_VAR 0 1
33283: PPUSH
33284: LD_INT 3
33286: PPUSH
33287: LD_INT 100
33289: PPUSH
33290: CALL_OW 290
33294: GO 33258
33296: POP
33297: POP
// end ;
33298: PPOPN 2
33300: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
33301: LD_EXP 78
33305: PUSH
33306: LD_EXP 123
33310: AND
33311: IFFALSE 33494
33313: GO 33315
33315: DISABLE
33316: LD_INT 0
33318: PPUSH
33319: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33320: LD_ADDR_VAR 0 2
33324: PUSH
33325: LD_INT 22
33327: PUSH
33328: LD_OWVAR 2
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PPUSH
33337: CALL_OW 69
33341: ST_TO_ADDR
// if not tmp then
33342: LD_VAR 0 2
33346: NOT
33347: IFFALSE 33351
// exit ;
33349: GO 33494
// for i := 1 to 2 do
33351: LD_ADDR_VAR 0 1
33355: PUSH
33356: DOUBLE
33357: LD_INT 1
33359: DEC
33360: ST_TO_ADDR
33361: LD_INT 2
33363: PUSH
33364: FOR_TO
33365: IFFALSE 33492
// begin uc_side := your_side ;
33367: LD_ADDR_OWVAR 20
33371: PUSH
33372: LD_OWVAR 2
33376: ST_TO_ADDR
// uc_nation := nation_american ;
33377: LD_ADDR_OWVAR 21
33381: PUSH
33382: LD_INT 1
33384: ST_TO_ADDR
// vc_chassis := us_morphling ;
33385: LD_ADDR_OWVAR 37
33389: PUSH
33390: LD_INT 5
33392: ST_TO_ADDR
// vc_engine := engine_siberite ;
33393: LD_ADDR_OWVAR 39
33397: PUSH
33398: LD_INT 3
33400: ST_TO_ADDR
// vc_control := control_computer ;
33401: LD_ADDR_OWVAR 38
33405: PUSH
33406: LD_INT 3
33408: ST_TO_ADDR
// vc_weapon := us_double_laser ;
33409: LD_ADDR_OWVAR 40
33413: PUSH
33414: LD_INT 10
33416: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
33417: LD_VAR 0 2
33421: PUSH
33422: LD_INT 1
33424: ARRAY
33425: PPUSH
33426: CALL_OW 310
33430: NOT
33431: IFFALSE 33478
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
33433: CALL_OW 45
33437: PPUSH
33438: LD_VAR 0 2
33442: PUSH
33443: LD_INT 1
33445: ARRAY
33446: PPUSH
33447: CALL_OW 250
33451: PPUSH
33452: LD_VAR 0 2
33456: PUSH
33457: LD_INT 1
33459: ARRAY
33460: PPUSH
33461: CALL_OW 251
33465: PPUSH
33466: LD_INT 12
33468: PPUSH
33469: LD_INT 1
33471: PPUSH
33472: CALL_OW 50
33476: GO 33490
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
33478: CALL_OW 45
33482: PPUSH
33483: LD_INT 1
33485: PPUSH
33486: CALL_OW 51
// end ;
33490: GO 33364
33492: POP
33493: POP
// end ;
33494: PPOPN 2
33496: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
33497: LD_EXP 78
33501: PUSH
33502: LD_EXP 124
33506: AND
33507: IFFALSE 33729
33509: GO 33511
33511: DISABLE
33512: LD_INT 0
33514: PPUSH
33515: PPUSH
33516: PPUSH
33517: PPUSH
33518: PPUSH
33519: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33520: LD_ADDR_VAR 0 6
33524: PUSH
33525: LD_INT 22
33527: PUSH
33528: LD_OWVAR 2
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 21
33539: PUSH
33540: LD_INT 1
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 3
33549: PUSH
33550: LD_INT 23
33552: PUSH
33553: LD_INT 0
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: LIST
33568: PPUSH
33569: CALL_OW 69
33573: ST_TO_ADDR
// if not tmp then
33574: LD_VAR 0 6
33578: NOT
33579: IFFALSE 33583
// exit ;
33581: GO 33729
// s1 := rand ( 1 , 4 ) ;
33583: LD_ADDR_VAR 0 2
33587: PUSH
33588: LD_INT 1
33590: PPUSH
33591: LD_INT 4
33593: PPUSH
33594: CALL_OW 12
33598: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
33599: LD_ADDR_VAR 0 4
33603: PUSH
33604: LD_VAR 0 6
33608: PUSH
33609: LD_INT 1
33611: ARRAY
33612: PPUSH
33613: LD_VAR 0 2
33617: PPUSH
33618: CALL_OW 259
33622: ST_TO_ADDR
// if s1 = 1 then
33623: LD_VAR 0 2
33627: PUSH
33628: LD_INT 1
33630: EQUAL
33631: IFFALSE 33651
// s2 := rand ( 2 , 4 ) else
33633: LD_ADDR_VAR 0 3
33637: PUSH
33638: LD_INT 2
33640: PPUSH
33641: LD_INT 4
33643: PPUSH
33644: CALL_OW 12
33648: ST_TO_ADDR
33649: GO 33659
// s2 := 1 ;
33651: LD_ADDR_VAR 0 3
33655: PUSH
33656: LD_INT 1
33658: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
33659: LD_ADDR_VAR 0 5
33663: PUSH
33664: LD_VAR 0 6
33668: PUSH
33669: LD_INT 1
33671: ARRAY
33672: PPUSH
33673: LD_VAR 0 3
33677: PPUSH
33678: CALL_OW 259
33682: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
33683: LD_VAR 0 6
33687: PUSH
33688: LD_INT 1
33690: ARRAY
33691: PPUSH
33692: LD_VAR 0 2
33696: PPUSH
33697: LD_VAR 0 5
33701: PPUSH
33702: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
33706: LD_VAR 0 6
33710: PUSH
33711: LD_INT 1
33713: ARRAY
33714: PPUSH
33715: LD_VAR 0 3
33719: PPUSH
33720: LD_VAR 0 4
33724: PPUSH
33725: CALL_OW 237
// end ;
33729: PPOPN 6
33731: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
33732: LD_EXP 78
33736: PUSH
33737: LD_EXP 125
33741: AND
33742: IFFALSE 33821
33744: GO 33746
33746: DISABLE
33747: LD_INT 0
33749: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
33750: LD_ADDR_VAR 0 1
33754: PUSH
33755: LD_INT 22
33757: PUSH
33758: LD_OWVAR 2
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 30
33769: PUSH
33770: LD_INT 3
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PPUSH
33781: CALL_OW 69
33785: ST_TO_ADDR
// if not tmp then
33786: LD_VAR 0 1
33790: NOT
33791: IFFALSE 33795
// exit ;
33793: GO 33821
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
33795: LD_VAR 0 1
33799: PUSH
33800: LD_INT 1
33802: PPUSH
33803: LD_VAR 0 1
33807: PPUSH
33808: CALL_OW 12
33812: ARRAY
33813: PPUSH
33814: LD_INT 1
33816: PPUSH
33817: CALL_OW 234
// end ;
33821: PPOPN 1
33823: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
33824: LD_EXP 78
33828: PUSH
33829: LD_EXP 126
33833: AND
33834: IFFALSE 33946
33836: GO 33838
33838: DISABLE
33839: LD_INT 0
33841: PPUSH
33842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
33843: LD_ADDR_VAR 0 2
33847: PUSH
33848: LD_INT 22
33850: PUSH
33851: LD_OWVAR 2
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 2
33862: PUSH
33863: LD_INT 30
33865: PUSH
33866: LD_INT 27
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 30
33875: PUSH
33876: LD_INT 26
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 30
33885: PUSH
33886: LD_INT 28
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PPUSH
33903: CALL_OW 69
33907: ST_TO_ADDR
// if not tmp then
33908: LD_VAR 0 2
33912: NOT
33913: IFFALSE 33917
// exit ;
33915: GO 33946
// for i in tmp do
33917: LD_ADDR_VAR 0 1
33921: PUSH
33922: LD_VAR 0 2
33926: PUSH
33927: FOR_IN
33928: IFFALSE 33944
// SetLives ( i , 1 ) ;
33930: LD_VAR 0 1
33934: PPUSH
33935: LD_INT 1
33937: PPUSH
33938: CALL_OW 234
33942: GO 33927
33944: POP
33945: POP
// end ;
33946: PPOPN 2
33948: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
33949: LD_EXP 78
33953: PUSH
33954: LD_EXP 127
33958: AND
33959: IFFALSE 34233
33961: GO 33963
33963: DISABLE
33964: LD_INT 0
33966: PPUSH
33967: PPUSH
33968: PPUSH
// begin i := rand ( 1 , 7 ) ;
33969: LD_ADDR_VAR 0 1
33973: PUSH
33974: LD_INT 1
33976: PPUSH
33977: LD_INT 7
33979: PPUSH
33980: CALL_OW 12
33984: ST_TO_ADDR
// case i of 1 :
33985: LD_VAR 0 1
33989: PUSH
33990: LD_INT 1
33992: DOUBLE
33993: EQUAL
33994: IFTRUE 33998
33996: GO 34008
33998: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
33999: LD_STRING earthquake(getX(game), 0, 32)
34001: PPUSH
34002: CALL_OW 559
34006: GO 34233
34008: LD_INT 2
34010: DOUBLE
34011: EQUAL
34012: IFTRUE 34016
34014: GO 34030
34016: POP
// begin ToLua ( displayStucuk(); ) ;
34017: LD_STRING displayStucuk();
34019: PPUSH
34020: CALL_OW 559
// ResetFog ;
34024: CALL_OW 335
// end ; 3 :
34028: GO 34233
34030: LD_INT 3
34032: DOUBLE
34033: EQUAL
34034: IFTRUE 34038
34036: GO 34142
34038: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34039: LD_ADDR_VAR 0 2
34043: PUSH
34044: LD_INT 22
34046: PUSH
34047: LD_OWVAR 2
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 25
34058: PUSH
34059: LD_INT 1
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PPUSH
34070: CALL_OW 69
34074: ST_TO_ADDR
// if not tmp then
34075: LD_VAR 0 2
34079: NOT
34080: IFFALSE 34084
// exit ;
34082: GO 34233
// un := tmp [ rand ( 1 , tmp ) ] ;
34084: LD_ADDR_VAR 0 3
34088: PUSH
34089: LD_VAR 0 2
34093: PUSH
34094: LD_INT 1
34096: PPUSH
34097: LD_VAR 0 2
34101: PPUSH
34102: CALL_OW 12
34106: ARRAY
34107: ST_TO_ADDR
// if Crawls ( un ) then
34108: LD_VAR 0 3
34112: PPUSH
34113: CALL_OW 318
34117: IFFALSE 34128
// ComWalk ( un ) ;
34119: LD_VAR 0 3
34123: PPUSH
34124: CALL_OW 138
// SetClass ( un , class_mortar ) ;
34128: LD_VAR 0 3
34132: PPUSH
34133: LD_INT 8
34135: PPUSH
34136: CALL_OW 336
// end ; 4 :
34140: GO 34233
34142: LD_INT 4
34144: DOUBLE
34145: EQUAL
34146: IFTRUE 34150
34148: GO 34211
34150: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
34151: LD_ADDR_VAR 0 2
34155: PUSH
34156: LD_INT 22
34158: PUSH
34159: LD_OWVAR 2
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 30
34170: PUSH
34171: LD_INT 29
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PPUSH
34182: CALL_OW 69
34186: ST_TO_ADDR
// if not tmp then
34187: LD_VAR 0 2
34191: NOT
34192: IFFALSE 34196
// exit ;
34194: GO 34233
// DestroyUnit ( tmp [ 1 ] ) ;
34196: LD_VAR 0 2
34200: PUSH
34201: LD_INT 1
34203: ARRAY
34204: PPUSH
34205: CALL_OW 65
// end ; 5 .. 7 :
34209: GO 34233
34211: LD_INT 5
34213: DOUBLE
34214: GREATEREQUAL
34215: IFFALSE 34223
34217: LD_INT 7
34219: DOUBLE
34220: LESSEQUAL
34221: IFTRUE 34225
34223: GO 34232
34225: POP
// StreamSibBomb ; end ;
34226: CALL 30483 0 0
34230: GO 34233
34232: POP
// end ;
34233: PPOPN 3
34235: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
34236: LD_EXP 78
34240: PUSH
34241: LD_EXP 128
34245: AND
34246: IFFALSE 34402
34248: GO 34250
34250: DISABLE
34251: LD_INT 0
34253: PPUSH
34254: PPUSH
34255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
34256: LD_ADDR_VAR 0 2
34260: PUSH
34261: LD_INT 81
34263: PUSH
34264: LD_OWVAR 2
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 2
34275: PUSH
34276: LD_INT 21
34278: PUSH
34279: LD_INT 1
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 21
34288: PUSH
34289: LD_INT 2
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: LIST
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PPUSH
34305: CALL_OW 69
34309: ST_TO_ADDR
// if not tmp then
34310: LD_VAR 0 2
34314: NOT
34315: IFFALSE 34319
// exit ;
34317: GO 34402
// p := 0 ;
34319: LD_ADDR_VAR 0 3
34323: PUSH
34324: LD_INT 0
34326: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
34327: LD_INT 35
34329: PPUSH
34330: CALL_OW 67
// p := p + 1 ;
34334: LD_ADDR_VAR 0 3
34338: PUSH
34339: LD_VAR 0 3
34343: PUSH
34344: LD_INT 1
34346: PLUS
34347: ST_TO_ADDR
// for i in tmp do
34348: LD_ADDR_VAR 0 1
34352: PUSH
34353: LD_VAR 0 2
34357: PUSH
34358: FOR_IN
34359: IFFALSE 34390
// if GetLives ( i ) < 1000 then
34361: LD_VAR 0 1
34365: PPUSH
34366: CALL_OW 256
34370: PUSH
34371: LD_INT 1000
34373: LESS
34374: IFFALSE 34388
// SetLives ( i , 1000 ) ;
34376: LD_VAR 0 1
34380: PPUSH
34381: LD_INT 1000
34383: PPUSH
34384: CALL_OW 234
34388: GO 34358
34390: POP
34391: POP
// until p > 20 ;
34392: LD_VAR 0 3
34396: PUSH
34397: LD_INT 20
34399: GREATER
34400: IFFALSE 34327
// end ;
34402: PPOPN 3
34404: END
// every 0 0$1 trigger StreamModeActive and sTime do
34405: LD_EXP 78
34409: PUSH
34410: LD_EXP 129
34414: AND
34415: IFFALSE 34450
34417: GO 34419
34419: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
34420: LD_INT 28
34422: PPUSH
34423: LD_OWVAR 2
34427: PPUSH
34428: LD_INT 2
34430: PPUSH
34431: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
34435: LD_INT 30
34437: PPUSH
34438: LD_OWVAR 2
34442: PPUSH
34443: LD_INT 2
34445: PPUSH
34446: CALL_OW 322
// end ;
34450: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
34451: LD_EXP 78
34455: PUSH
34456: LD_EXP 130
34460: AND
34461: IFFALSE 34582
34463: GO 34465
34465: DISABLE
34466: LD_INT 0
34468: PPUSH
34469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34470: LD_ADDR_VAR 0 2
34474: PUSH
34475: LD_INT 22
34477: PUSH
34478: LD_OWVAR 2
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 21
34489: PUSH
34490: LD_INT 1
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 3
34499: PUSH
34500: LD_INT 23
34502: PUSH
34503: LD_INT 0
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: LIST
34518: PPUSH
34519: CALL_OW 69
34523: ST_TO_ADDR
// if not tmp then
34524: LD_VAR 0 2
34528: NOT
34529: IFFALSE 34533
// exit ;
34531: GO 34582
// for i in tmp do
34533: LD_ADDR_VAR 0 1
34537: PUSH
34538: LD_VAR 0 2
34542: PUSH
34543: FOR_IN
34544: IFFALSE 34580
// begin if Crawls ( i ) then
34546: LD_VAR 0 1
34550: PPUSH
34551: CALL_OW 318
34555: IFFALSE 34566
// ComWalk ( i ) ;
34557: LD_VAR 0 1
34561: PPUSH
34562: CALL_OW 138
// SetClass ( i , 2 ) ;
34566: LD_VAR 0 1
34570: PPUSH
34571: LD_INT 2
34573: PPUSH
34574: CALL_OW 336
// end ;
34578: GO 34543
34580: POP
34581: POP
// end ;
34582: PPOPN 2
34584: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
34585: LD_EXP 78
34589: PUSH
34590: LD_EXP 131
34594: AND
34595: IFFALSE 34876
34597: GO 34599
34599: DISABLE
34600: LD_INT 0
34602: PPUSH
34603: PPUSH
34604: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
34605: LD_OWVAR 2
34609: PPUSH
34610: LD_INT 9
34612: PPUSH
34613: LD_INT 1
34615: PPUSH
34616: LD_INT 1
34618: PPUSH
34619: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
34623: LD_INT 9
34625: PPUSH
34626: LD_OWVAR 2
34630: PPUSH
34631: CALL_OW 343
// uc_side := 9 ;
34635: LD_ADDR_OWVAR 20
34639: PUSH
34640: LD_INT 9
34642: ST_TO_ADDR
// uc_nation := 2 ;
34643: LD_ADDR_OWVAR 21
34647: PUSH
34648: LD_INT 2
34650: ST_TO_ADDR
// hc_name := Dark Warrior ;
34651: LD_ADDR_OWVAR 26
34655: PUSH
34656: LD_STRING Dark Warrior
34658: ST_TO_ADDR
// hc_gallery :=  ;
34659: LD_ADDR_OWVAR 33
34663: PUSH
34664: LD_STRING 
34666: ST_TO_ADDR
// hc_noskilllimit := true ;
34667: LD_ADDR_OWVAR 76
34671: PUSH
34672: LD_INT 1
34674: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
34675: LD_ADDR_OWVAR 31
34679: PUSH
34680: LD_INT 30
34682: PUSH
34683: LD_INT 30
34685: PUSH
34686: LD_INT 30
34688: PUSH
34689: LD_INT 30
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: ST_TO_ADDR
// un := CreateHuman ;
34698: LD_ADDR_VAR 0 3
34702: PUSH
34703: CALL_OW 44
34707: ST_TO_ADDR
// hc_noskilllimit := false ;
34708: LD_ADDR_OWVAR 76
34712: PUSH
34713: LD_INT 0
34715: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
34716: LD_VAR 0 3
34720: PPUSH
34721: LD_INT 1
34723: PPUSH
34724: CALL_OW 51
// p := 0 ;
34728: LD_ADDR_VAR 0 2
34732: PUSH
34733: LD_INT 0
34735: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
34736: LD_INT 35
34738: PPUSH
34739: CALL_OW 67
// p := p + 1 ;
34743: LD_ADDR_VAR 0 2
34747: PUSH
34748: LD_VAR 0 2
34752: PUSH
34753: LD_INT 1
34755: PLUS
34756: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
34757: LD_VAR 0 3
34761: PPUSH
34762: CALL_OW 256
34766: PUSH
34767: LD_INT 1000
34769: LESS
34770: IFFALSE 34784
// SetLives ( un , 1000 ) ;
34772: LD_VAR 0 3
34776: PPUSH
34777: LD_INT 1000
34779: PPUSH
34780: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
34784: LD_VAR 0 3
34788: PPUSH
34789: LD_INT 81
34791: PUSH
34792: LD_OWVAR 2
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 91
34803: PUSH
34804: LD_VAR 0 3
34808: PUSH
34809: LD_INT 30
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: LIST
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PPUSH
34821: CALL_OW 69
34825: PPUSH
34826: LD_VAR 0 3
34830: PPUSH
34831: CALL_OW 74
34835: PPUSH
34836: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
34840: LD_VAR 0 2
34844: PUSH
34845: LD_INT 60
34847: GREATER
34848: PUSH
34849: LD_VAR 0 3
34853: PPUSH
34854: CALL_OW 301
34858: OR
34859: IFFALSE 34736
// if un then
34861: LD_VAR 0 3
34865: IFFALSE 34876
// RemoveUnit ( un ) ;
34867: LD_VAR 0 3
34871: PPUSH
34872: CALL_OW 64
// end ;
34876: PPOPN 3
34878: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34879: LD_INT 0
34881: PPUSH
// case cmd of 301 :
34882: LD_VAR 0 1
34886: PUSH
34887: LD_INT 301
34889: DOUBLE
34890: EQUAL
34891: IFTRUE 34895
34893: GO 34927
34895: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
34896: LD_VAR 0 6
34900: PPUSH
34901: LD_VAR 0 7
34905: PPUSH
34906: LD_VAR 0 8
34910: PPUSH
34911: LD_VAR 0 4
34915: PPUSH
34916: LD_VAR 0 5
34920: PPUSH
34921: CALL 36128 0 5
34925: GO 35048
34927: LD_INT 302
34929: DOUBLE
34930: EQUAL
34931: IFTRUE 34935
34933: GO 34972
34935: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
34936: LD_VAR 0 6
34940: PPUSH
34941: LD_VAR 0 7
34945: PPUSH
34946: LD_VAR 0 8
34950: PPUSH
34951: LD_VAR 0 9
34955: PPUSH
34956: LD_VAR 0 4
34960: PPUSH
34961: LD_VAR 0 5
34965: PPUSH
34966: CALL 36219 0 6
34970: GO 35048
34972: LD_INT 303
34974: DOUBLE
34975: EQUAL
34976: IFTRUE 34980
34978: GO 35017
34980: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
34981: LD_VAR 0 6
34985: PPUSH
34986: LD_VAR 0 7
34990: PPUSH
34991: LD_VAR 0 8
34995: PPUSH
34996: LD_VAR 0 9
35000: PPUSH
35001: LD_VAR 0 4
35005: PPUSH
35006: LD_VAR 0 5
35010: PPUSH
35011: CALL 35053 0 6
35015: GO 35048
35017: LD_INT 304
35019: DOUBLE
35020: EQUAL
35021: IFTRUE 35025
35023: GO 35047
35025: POP
// hHackTeleport ( unit , x , y ) ; end ;
35026: LD_VAR 0 2
35030: PPUSH
35031: LD_VAR 0 4
35035: PPUSH
35036: LD_VAR 0 5
35040: PPUSH
35041: CALL 36812 0 3
35045: GO 35048
35047: POP
// end ;
35048: LD_VAR 0 12
35052: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
35053: LD_INT 0
35055: PPUSH
35056: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
35057: LD_VAR 0 1
35061: PUSH
35062: LD_INT 1
35064: LESS
35065: PUSH
35066: LD_VAR 0 1
35070: PUSH
35071: LD_INT 3
35073: GREATER
35074: OR
35075: PUSH
35076: LD_VAR 0 5
35080: PPUSH
35081: LD_VAR 0 6
35085: PPUSH
35086: CALL_OW 428
35090: OR
35091: IFFALSE 35095
// exit ;
35093: GO 35815
// uc_side := your_side ;
35095: LD_ADDR_OWVAR 20
35099: PUSH
35100: LD_OWVAR 2
35104: ST_TO_ADDR
// uc_nation := nation ;
35105: LD_ADDR_OWVAR 21
35109: PUSH
35110: LD_VAR 0 1
35114: ST_TO_ADDR
// bc_level = 1 ;
35115: LD_ADDR_OWVAR 43
35119: PUSH
35120: LD_INT 1
35122: ST_TO_ADDR
// case btype of 1 :
35123: LD_VAR 0 2
35127: PUSH
35128: LD_INT 1
35130: DOUBLE
35131: EQUAL
35132: IFTRUE 35136
35134: GO 35147
35136: POP
// bc_type := b_depot ; 2 :
35137: LD_ADDR_OWVAR 42
35141: PUSH
35142: LD_INT 0
35144: ST_TO_ADDR
35145: GO 35759
35147: LD_INT 2
35149: DOUBLE
35150: EQUAL
35151: IFTRUE 35155
35153: GO 35166
35155: POP
// bc_type := b_warehouse ; 3 :
35156: LD_ADDR_OWVAR 42
35160: PUSH
35161: LD_INT 1
35163: ST_TO_ADDR
35164: GO 35759
35166: LD_INT 3
35168: DOUBLE
35169: EQUAL
35170: IFTRUE 35174
35172: GO 35185
35174: POP
// bc_type := b_lab ; 4 .. 9 :
35175: LD_ADDR_OWVAR 42
35179: PUSH
35180: LD_INT 6
35182: ST_TO_ADDR
35183: GO 35759
35185: LD_INT 4
35187: DOUBLE
35188: GREATEREQUAL
35189: IFFALSE 35197
35191: LD_INT 9
35193: DOUBLE
35194: LESSEQUAL
35195: IFTRUE 35199
35197: GO 35251
35199: POP
// begin bc_type := b_lab_half ;
35200: LD_ADDR_OWVAR 42
35204: PUSH
35205: LD_INT 7
35207: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
35208: LD_ADDR_OWVAR 44
35212: PUSH
35213: LD_INT 10
35215: PUSH
35216: LD_INT 11
35218: PUSH
35219: LD_INT 12
35221: PUSH
35222: LD_INT 15
35224: PUSH
35225: LD_INT 14
35227: PUSH
35228: LD_INT 13
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: PUSH
35239: LD_VAR 0 2
35243: PUSH
35244: LD_INT 3
35246: MINUS
35247: ARRAY
35248: ST_TO_ADDR
// end ; 10 .. 13 :
35249: GO 35759
35251: LD_INT 10
35253: DOUBLE
35254: GREATEREQUAL
35255: IFFALSE 35263
35257: LD_INT 13
35259: DOUBLE
35260: LESSEQUAL
35261: IFTRUE 35265
35263: GO 35342
35265: POP
// begin bc_type := b_lab_full ;
35266: LD_ADDR_OWVAR 42
35270: PUSH
35271: LD_INT 8
35273: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
35274: LD_ADDR_OWVAR 44
35278: PUSH
35279: LD_INT 10
35281: PUSH
35282: LD_INT 12
35284: PUSH
35285: LD_INT 14
35287: PUSH
35288: LD_INT 13
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: PUSH
35297: LD_VAR 0 2
35301: PUSH
35302: LD_INT 9
35304: MINUS
35305: ARRAY
35306: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
35307: LD_ADDR_OWVAR 45
35311: PUSH
35312: LD_INT 11
35314: PUSH
35315: LD_INT 15
35317: PUSH
35318: LD_INT 12
35320: PUSH
35321: LD_INT 15
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: PUSH
35330: LD_VAR 0 2
35334: PUSH
35335: LD_INT 9
35337: MINUS
35338: ARRAY
35339: ST_TO_ADDR
// end ; 14 :
35340: GO 35759
35342: LD_INT 14
35344: DOUBLE
35345: EQUAL
35346: IFTRUE 35350
35348: GO 35361
35350: POP
// bc_type := b_workshop ; 15 :
35351: LD_ADDR_OWVAR 42
35355: PUSH
35356: LD_INT 2
35358: ST_TO_ADDR
35359: GO 35759
35361: LD_INT 15
35363: DOUBLE
35364: EQUAL
35365: IFTRUE 35369
35367: GO 35380
35369: POP
// bc_type := b_factory ; 16 :
35370: LD_ADDR_OWVAR 42
35374: PUSH
35375: LD_INT 3
35377: ST_TO_ADDR
35378: GO 35759
35380: LD_INT 16
35382: DOUBLE
35383: EQUAL
35384: IFTRUE 35388
35386: GO 35399
35388: POP
// bc_type := b_ext_gun ; 17 :
35389: LD_ADDR_OWVAR 42
35393: PUSH
35394: LD_INT 17
35396: ST_TO_ADDR
35397: GO 35759
35399: LD_INT 17
35401: DOUBLE
35402: EQUAL
35403: IFTRUE 35407
35405: GO 35435
35407: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
35408: LD_ADDR_OWVAR 42
35412: PUSH
35413: LD_INT 19
35415: PUSH
35416: LD_INT 23
35418: PUSH
35419: LD_INT 19
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: LIST
35426: PUSH
35427: LD_VAR 0 1
35431: ARRAY
35432: ST_TO_ADDR
35433: GO 35759
35435: LD_INT 18
35437: DOUBLE
35438: EQUAL
35439: IFTRUE 35443
35441: GO 35454
35443: POP
// bc_type := b_ext_radar ; 19 :
35444: LD_ADDR_OWVAR 42
35448: PUSH
35449: LD_INT 20
35451: ST_TO_ADDR
35452: GO 35759
35454: LD_INT 19
35456: DOUBLE
35457: EQUAL
35458: IFTRUE 35462
35460: GO 35473
35462: POP
// bc_type := b_ext_radio ; 20 :
35463: LD_ADDR_OWVAR 42
35467: PUSH
35468: LD_INT 22
35470: ST_TO_ADDR
35471: GO 35759
35473: LD_INT 20
35475: DOUBLE
35476: EQUAL
35477: IFTRUE 35481
35479: GO 35492
35481: POP
// bc_type := b_ext_siberium ; 21 :
35482: LD_ADDR_OWVAR 42
35486: PUSH
35487: LD_INT 21
35489: ST_TO_ADDR
35490: GO 35759
35492: LD_INT 21
35494: DOUBLE
35495: EQUAL
35496: IFTRUE 35500
35498: GO 35511
35500: POP
// bc_type := b_ext_computer ; 22 :
35501: LD_ADDR_OWVAR 42
35505: PUSH
35506: LD_INT 24
35508: ST_TO_ADDR
35509: GO 35759
35511: LD_INT 22
35513: DOUBLE
35514: EQUAL
35515: IFTRUE 35519
35517: GO 35530
35519: POP
// bc_type := b_ext_track ; 23 :
35520: LD_ADDR_OWVAR 42
35524: PUSH
35525: LD_INT 16
35527: ST_TO_ADDR
35528: GO 35759
35530: LD_INT 23
35532: DOUBLE
35533: EQUAL
35534: IFTRUE 35538
35536: GO 35549
35538: POP
// bc_type := b_ext_laser ; 24 :
35539: LD_ADDR_OWVAR 42
35543: PUSH
35544: LD_INT 25
35546: ST_TO_ADDR
35547: GO 35759
35549: LD_INT 24
35551: DOUBLE
35552: EQUAL
35553: IFTRUE 35557
35555: GO 35568
35557: POP
// bc_type := b_control_tower ; 25 :
35558: LD_ADDR_OWVAR 42
35562: PUSH
35563: LD_INT 36
35565: ST_TO_ADDR
35566: GO 35759
35568: LD_INT 25
35570: DOUBLE
35571: EQUAL
35572: IFTRUE 35576
35574: GO 35587
35576: POP
// bc_type := b_breastwork ; 26 :
35577: LD_ADDR_OWVAR 42
35581: PUSH
35582: LD_INT 31
35584: ST_TO_ADDR
35585: GO 35759
35587: LD_INT 26
35589: DOUBLE
35590: EQUAL
35591: IFTRUE 35595
35593: GO 35606
35595: POP
// bc_type := b_bunker ; 27 :
35596: LD_ADDR_OWVAR 42
35600: PUSH
35601: LD_INT 32
35603: ST_TO_ADDR
35604: GO 35759
35606: LD_INT 27
35608: DOUBLE
35609: EQUAL
35610: IFTRUE 35614
35612: GO 35625
35614: POP
// bc_type := b_turret ; 28 :
35615: LD_ADDR_OWVAR 42
35619: PUSH
35620: LD_INT 33
35622: ST_TO_ADDR
35623: GO 35759
35625: LD_INT 28
35627: DOUBLE
35628: EQUAL
35629: IFTRUE 35633
35631: GO 35644
35633: POP
// bc_type := b_armoury ; 29 :
35634: LD_ADDR_OWVAR 42
35638: PUSH
35639: LD_INT 4
35641: ST_TO_ADDR
35642: GO 35759
35644: LD_INT 29
35646: DOUBLE
35647: EQUAL
35648: IFTRUE 35652
35650: GO 35663
35652: POP
// bc_type := b_barracks ; 30 :
35653: LD_ADDR_OWVAR 42
35657: PUSH
35658: LD_INT 5
35660: ST_TO_ADDR
35661: GO 35759
35663: LD_INT 30
35665: DOUBLE
35666: EQUAL
35667: IFTRUE 35671
35669: GO 35682
35671: POP
// bc_type := b_solar_power ; 31 :
35672: LD_ADDR_OWVAR 42
35676: PUSH
35677: LD_INT 27
35679: ST_TO_ADDR
35680: GO 35759
35682: LD_INT 31
35684: DOUBLE
35685: EQUAL
35686: IFTRUE 35690
35688: GO 35701
35690: POP
// bc_type := b_oil_power ; 32 :
35691: LD_ADDR_OWVAR 42
35695: PUSH
35696: LD_INT 26
35698: ST_TO_ADDR
35699: GO 35759
35701: LD_INT 32
35703: DOUBLE
35704: EQUAL
35705: IFTRUE 35709
35707: GO 35720
35709: POP
// bc_type := b_siberite_power ; 33 :
35710: LD_ADDR_OWVAR 42
35714: PUSH
35715: LD_INT 28
35717: ST_TO_ADDR
35718: GO 35759
35720: LD_INT 33
35722: DOUBLE
35723: EQUAL
35724: IFTRUE 35728
35726: GO 35739
35728: POP
// bc_type := b_oil_mine ; 34 :
35729: LD_ADDR_OWVAR 42
35733: PUSH
35734: LD_INT 29
35736: ST_TO_ADDR
35737: GO 35759
35739: LD_INT 34
35741: DOUBLE
35742: EQUAL
35743: IFTRUE 35747
35745: GO 35758
35747: POP
// bc_type := b_siberite_mine ; end ;
35748: LD_ADDR_OWVAR 42
35752: PUSH
35753: LD_INT 30
35755: ST_TO_ADDR
35756: GO 35759
35758: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
35759: LD_ADDR_VAR 0 8
35763: PUSH
35764: LD_VAR 0 5
35768: PPUSH
35769: LD_VAR 0 6
35773: PPUSH
35774: LD_VAR 0 3
35778: PPUSH
35779: CALL_OW 47
35783: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
35784: LD_OWVAR 42
35788: PUSH
35789: LD_INT 32
35791: PUSH
35792: LD_INT 33
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: IN
35799: IFFALSE 35815
// PlaceWeaponTurret ( b , weapon ) ;
35801: LD_VAR 0 8
35805: PPUSH
35806: LD_VAR 0 4
35810: PPUSH
35811: CALL_OW 431
// end ;
35815: LD_VAR 0 7
35819: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
35820: LD_INT 0
35822: PPUSH
35823: PPUSH
35824: PPUSH
35825: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35826: LD_ADDR_VAR 0 4
35830: PUSH
35831: LD_INT 22
35833: PUSH
35834: LD_OWVAR 2
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 2
35845: PUSH
35846: LD_INT 30
35848: PUSH
35849: LD_INT 0
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 30
35858: PUSH
35859: LD_INT 1
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: LIST
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PPUSH
35875: CALL_OW 69
35879: ST_TO_ADDR
// if not tmp then
35880: LD_VAR 0 4
35884: NOT
35885: IFFALSE 35889
// exit ;
35887: GO 35948
// for i in tmp do
35889: LD_ADDR_VAR 0 2
35893: PUSH
35894: LD_VAR 0 4
35898: PUSH
35899: FOR_IN
35900: IFFALSE 35946
// for j = 1 to 3 do
35902: LD_ADDR_VAR 0 3
35906: PUSH
35907: DOUBLE
35908: LD_INT 1
35910: DEC
35911: ST_TO_ADDR
35912: LD_INT 3
35914: PUSH
35915: FOR_TO
35916: IFFALSE 35942
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
35918: LD_VAR 0 2
35922: PPUSH
35923: CALL_OW 274
35927: PPUSH
35928: LD_VAR 0 3
35932: PPUSH
35933: LD_INT 99999
35935: PPUSH
35936: CALL_OW 277
35940: GO 35915
35942: POP
35943: POP
35944: GO 35899
35946: POP
35947: POP
// end ;
35948: LD_VAR 0 1
35952: RET
// export function hHackSetLevel10 ; var i , j ; begin
35953: LD_INT 0
35955: PPUSH
35956: PPUSH
35957: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35958: LD_ADDR_VAR 0 2
35962: PUSH
35963: LD_INT 21
35965: PUSH
35966: LD_INT 1
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PPUSH
35973: CALL_OW 69
35977: PUSH
35978: FOR_IN
35979: IFFALSE 36031
// if IsSelected ( i ) then
35981: LD_VAR 0 2
35985: PPUSH
35986: CALL_OW 306
35990: IFFALSE 36029
// begin for j := 1 to 4 do
35992: LD_ADDR_VAR 0 3
35996: PUSH
35997: DOUBLE
35998: LD_INT 1
36000: DEC
36001: ST_TO_ADDR
36002: LD_INT 4
36004: PUSH
36005: FOR_TO
36006: IFFALSE 36027
// SetSkill ( i , j , 10 ) ;
36008: LD_VAR 0 2
36012: PPUSH
36013: LD_VAR 0 3
36017: PPUSH
36018: LD_INT 10
36020: PPUSH
36021: CALL_OW 237
36025: GO 36005
36027: POP
36028: POP
// end ;
36029: GO 35978
36031: POP
36032: POP
// end ;
36033: LD_VAR 0 1
36037: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
36038: LD_INT 0
36040: PPUSH
36041: PPUSH
36042: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
36043: LD_ADDR_VAR 0 2
36047: PUSH
36048: LD_INT 22
36050: PUSH
36051: LD_OWVAR 2
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 21
36062: PUSH
36063: LD_INT 1
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PPUSH
36074: CALL_OW 69
36078: PUSH
36079: FOR_IN
36080: IFFALSE 36121
// begin for j := 1 to 4 do
36082: LD_ADDR_VAR 0 3
36086: PUSH
36087: DOUBLE
36088: LD_INT 1
36090: DEC
36091: ST_TO_ADDR
36092: LD_INT 4
36094: PUSH
36095: FOR_TO
36096: IFFALSE 36117
// SetSkill ( i , j , 10 ) ;
36098: LD_VAR 0 2
36102: PPUSH
36103: LD_VAR 0 3
36107: PPUSH
36108: LD_INT 10
36110: PPUSH
36111: CALL_OW 237
36115: GO 36095
36117: POP
36118: POP
// end ;
36119: GO 36079
36121: POP
36122: POP
// end ;
36123: LD_VAR 0 1
36127: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
36128: LD_INT 0
36130: PPUSH
// uc_side := your_side ;
36131: LD_ADDR_OWVAR 20
36135: PUSH
36136: LD_OWVAR 2
36140: ST_TO_ADDR
// uc_nation := nation ;
36141: LD_ADDR_OWVAR 21
36145: PUSH
36146: LD_VAR 0 1
36150: ST_TO_ADDR
// InitHc ;
36151: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
36155: LD_INT 0
36157: PPUSH
36158: LD_VAR 0 2
36162: PPUSH
36163: LD_VAR 0 3
36167: PPUSH
36168: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
36172: LD_VAR 0 4
36176: PPUSH
36177: LD_VAR 0 5
36181: PPUSH
36182: CALL_OW 428
36186: PUSH
36187: LD_INT 0
36189: EQUAL
36190: IFFALSE 36214
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
36192: CALL_OW 44
36196: PPUSH
36197: LD_VAR 0 4
36201: PPUSH
36202: LD_VAR 0 5
36206: PPUSH
36207: LD_INT 1
36209: PPUSH
36210: CALL_OW 48
// end ;
36214: LD_VAR 0 6
36218: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
36219: LD_INT 0
36221: PPUSH
36222: PPUSH
// uc_side := your_side ;
36223: LD_ADDR_OWVAR 20
36227: PUSH
36228: LD_OWVAR 2
36232: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
36233: LD_VAR 0 1
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: LD_INT 2
36243: PUSH
36244: LD_INT 3
36246: PUSH
36247: LD_INT 4
36249: PUSH
36250: LD_INT 5
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: IN
36260: IFFALSE 36272
// uc_nation := nation_american else
36262: LD_ADDR_OWVAR 21
36266: PUSH
36267: LD_INT 1
36269: ST_TO_ADDR
36270: GO 36315
// if chassis in [ 11 , 12 , 13 , 14 ] then
36272: LD_VAR 0 1
36276: PUSH
36277: LD_INT 11
36279: PUSH
36280: LD_INT 12
36282: PUSH
36283: LD_INT 13
36285: PUSH
36286: LD_INT 14
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: IN
36295: IFFALSE 36307
// uc_nation := nation_arabian else
36297: LD_ADDR_OWVAR 21
36301: PUSH
36302: LD_INT 2
36304: ST_TO_ADDR
36305: GO 36315
// uc_nation := nation_russian ;
36307: LD_ADDR_OWVAR 21
36311: PUSH
36312: LD_INT 3
36314: ST_TO_ADDR
// vc_chassis := chassis ;
36315: LD_ADDR_OWVAR 37
36319: PUSH
36320: LD_VAR 0 1
36324: ST_TO_ADDR
// vc_engine := engine ;
36325: LD_ADDR_OWVAR 39
36329: PUSH
36330: LD_VAR 0 2
36334: ST_TO_ADDR
// vc_control := control ;
36335: LD_ADDR_OWVAR 38
36339: PUSH
36340: LD_VAR 0 3
36344: ST_TO_ADDR
// vc_weapon := weapon ;
36345: LD_ADDR_OWVAR 40
36349: PUSH
36350: LD_VAR 0 4
36354: ST_TO_ADDR
// un := CreateVehicle ;
36355: LD_ADDR_VAR 0 8
36359: PUSH
36360: CALL_OW 45
36364: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
36365: LD_VAR 0 8
36369: PPUSH
36370: LD_INT 0
36372: PPUSH
36373: LD_INT 5
36375: PPUSH
36376: CALL_OW 12
36380: PPUSH
36381: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
36385: LD_VAR 0 8
36389: PPUSH
36390: LD_VAR 0 5
36394: PPUSH
36395: LD_VAR 0 6
36399: PPUSH
36400: LD_INT 1
36402: PPUSH
36403: CALL_OW 48
// end ;
36407: LD_VAR 0 7
36411: RET
// export hInvincible ; every 1 do
36412: GO 36414
36414: DISABLE
// hInvincible := [ ] ;
36415: LD_ADDR_EXP 132
36419: PUSH
36420: EMPTY
36421: ST_TO_ADDR
36422: END
// every 10 do var i ;
36423: GO 36425
36425: DISABLE
36426: LD_INT 0
36428: PPUSH
// begin enable ;
36429: ENABLE
// if not hInvincible then
36430: LD_EXP 132
36434: NOT
36435: IFFALSE 36439
// exit ;
36437: GO 36483
// for i in hInvincible do
36439: LD_ADDR_VAR 0 1
36443: PUSH
36444: LD_EXP 132
36448: PUSH
36449: FOR_IN
36450: IFFALSE 36481
// if GetLives ( i ) < 1000 then
36452: LD_VAR 0 1
36456: PPUSH
36457: CALL_OW 256
36461: PUSH
36462: LD_INT 1000
36464: LESS
36465: IFFALSE 36479
// SetLives ( i , 1000 ) ;
36467: LD_VAR 0 1
36471: PPUSH
36472: LD_INT 1000
36474: PPUSH
36475: CALL_OW 234
36479: GO 36449
36481: POP
36482: POP
// end ;
36483: PPOPN 1
36485: END
// export function hHackInvincible ; var i ; begin
36486: LD_INT 0
36488: PPUSH
36489: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
36490: LD_ADDR_VAR 0 2
36494: PUSH
36495: LD_INT 2
36497: PUSH
36498: LD_INT 21
36500: PUSH
36501: LD_INT 1
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 21
36510: PUSH
36511: LD_INT 2
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: LIST
36522: PPUSH
36523: CALL_OW 69
36527: PUSH
36528: FOR_IN
36529: IFFALSE 36590
// if IsSelected ( i ) then
36531: LD_VAR 0 2
36535: PPUSH
36536: CALL_OW 306
36540: IFFALSE 36588
// begin if i in hInvincible then
36542: LD_VAR 0 2
36546: PUSH
36547: LD_EXP 132
36551: IN
36552: IFFALSE 36572
// hInvincible := hInvincible diff i else
36554: LD_ADDR_EXP 132
36558: PUSH
36559: LD_EXP 132
36563: PUSH
36564: LD_VAR 0 2
36568: DIFF
36569: ST_TO_ADDR
36570: GO 36588
// hInvincible := hInvincible union i ;
36572: LD_ADDR_EXP 132
36576: PUSH
36577: LD_EXP 132
36581: PUSH
36582: LD_VAR 0 2
36586: UNION
36587: ST_TO_ADDR
// end ;
36588: GO 36528
36590: POP
36591: POP
// end ;
36592: LD_VAR 0 1
36596: RET
// export function hHackInvisible ; var i , j ; begin
36597: LD_INT 0
36599: PPUSH
36600: PPUSH
36601: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
36602: LD_ADDR_VAR 0 2
36606: PUSH
36607: LD_INT 21
36609: PUSH
36610: LD_INT 1
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PPUSH
36617: CALL_OW 69
36621: PUSH
36622: FOR_IN
36623: IFFALSE 36647
// if IsSelected ( i ) then
36625: LD_VAR 0 2
36629: PPUSH
36630: CALL_OW 306
36634: IFFALSE 36645
// ComForceInvisible ( i ) ;
36636: LD_VAR 0 2
36640: PPUSH
36641: CALL_OW 496
36645: GO 36622
36647: POP
36648: POP
// end ;
36649: LD_VAR 0 1
36653: RET
// export function hHackChangeYourSide ; begin
36654: LD_INT 0
36656: PPUSH
// if your_side = 8 then
36657: LD_OWVAR 2
36661: PUSH
36662: LD_INT 8
36664: EQUAL
36665: IFFALSE 36677
// your_side := 0 else
36667: LD_ADDR_OWVAR 2
36671: PUSH
36672: LD_INT 0
36674: ST_TO_ADDR
36675: GO 36691
// your_side := your_side + 1 ;
36677: LD_ADDR_OWVAR 2
36681: PUSH
36682: LD_OWVAR 2
36686: PUSH
36687: LD_INT 1
36689: PLUS
36690: ST_TO_ADDR
// end ;
36691: LD_VAR 0 1
36695: RET
// export function hHackChangeUnitSide ; var i , j ; begin
36696: LD_INT 0
36698: PPUSH
36699: PPUSH
36700: PPUSH
// for i in all_units do
36701: LD_ADDR_VAR 0 2
36705: PUSH
36706: LD_OWVAR 3
36710: PUSH
36711: FOR_IN
36712: IFFALSE 36790
// if IsSelected ( i ) then
36714: LD_VAR 0 2
36718: PPUSH
36719: CALL_OW 306
36723: IFFALSE 36788
// begin j := GetSide ( i ) ;
36725: LD_ADDR_VAR 0 3
36729: PUSH
36730: LD_VAR 0 2
36734: PPUSH
36735: CALL_OW 255
36739: ST_TO_ADDR
// if j = 8 then
36740: LD_VAR 0 3
36744: PUSH
36745: LD_INT 8
36747: EQUAL
36748: IFFALSE 36760
// j := 0 else
36750: LD_ADDR_VAR 0 3
36754: PUSH
36755: LD_INT 0
36757: ST_TO_ADDR
36758: GO 36774
// j := j + 1 ;
36760: LD_ADDR_VAR 0 3
36764: PUSH
36765: LD_VAR 0 3
36769: PUSH
36770: LD_INT 1
36772: PLUS
36773: ST_TO_ADDR
// SetSide ( i , j ) ;
36774: LD_VAR 0 2
36778: PPUSH
36779: LD_VAR 0 3
36783: PPUSH
36784: CALL_OW 235
// end ;
36788: GO 36711
36790: POP
36791: POP
// end ;
36792: LD_VAR 0 1
36796: RET
// export function hHackFog ; begin
36797: LD_INT 0
36799: PPUSH
// FogOff ( true ) ;
36800: LD_INT 1
36802: PPUSH
36803: CALL_OW 344
// end ;
36807: LD_VAR 0 1
36811: RET
// export function hHackTeleport ( unit , x , y ) ; begin
36812: LD_INT 0
36814: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
36815: LD_VAR 0 1
36819: PPUSH
36820: LD_VAR 0 2
36824: PPUSH
36825: LD_VAR 0 3
36829: PPUSH
36830: LD_INT 1
36832: PPUSH
36833: LD_INT 1
36835: PPUSH
36836: CALL_OW 483
// CenterOnXY ( x , y ) ;
36840: LD_VAR 0 2
36844: PPUSH
36845: LD_VAR 0 3
36849: PPUSH
36850: CALL_OW 84
// end ; end_of_file
36854: LD_VAR 0 4
36858: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
36859: LD_INT 0
36861: PPUSH
36862: PPUSH
36863: PPUSH
36864: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
36865: LD_VAR 0 1
36869: PPUSH
36870: CALL_OW 264
36874: PUSH
36875: LD_EXP 66
36879: EQUAL
36880: IFFALSE 36952
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36882: LD_INT 68
36884: PPUSH
36885: LD_VAR 0 1
36889: PPUSH
36890: CALL_OW 255
36894: PPUSH
36895: CALL_OW 321
36899: PUSH
36900: LD_INT 2
36902: EQUAL
36903: IFFALSE 36915
// eff := 70 else
36905: LD_ADDR_VAR 0 4
36909: PUSH
36910: LD_INT 70
36912: ST_TO_ADDR
36913: GO 36923
// eff := 30 ;
36915: LD_ADDR_VAR 0 4
36919: PUSH
36920: LD_INT 30
36922: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36923: LD_VAR 0 1
36927: PPUSH
36928: CALL_OW 250
36932: PPUSH
36933: LD_VAR 0 1
36937: PPUSH
36938: CALL_OW 251
36942: PPUSH
36943: LD_VAR 0 4
36947: PPUSH
36948: CALL_OW 495
// end ; end ;
36952: LD_VAR 0 2
36956: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36957: LD_INT 0
36959: PPUSH
// end ;
36960: LD_VAR 0 4
36964: RET
// export function SOS_Command ( cmd ) ; begin
36965: LD_INT 0
36967: PPUSH
// end ;
36968: LD_VAR 0 2
36972: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36973: LD_INT 0
36975: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36976: LD_VAR 0 1
36980: PUSH
36981: LD_INT 250
36983: EQUAL
36984: PUSH
36985: LD_VAR 0 2
36989: PPUSH
36990: CALL_OW 264
36994: PUSH
36995: LD_EXP 69
36999: EQUAL
37000: AND
37001: IFFALSE 37022
// MinerPlaceMine ( unit , x , y ) ;
37003: LD_VAR 0 2
37007: PPUSH
37008: LD_VAR 0 4
37012: PPUSH
37013: LD_VAR 0 5
37017: PPUSH
37018: CALL 39363 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37022: LD_VAR 0 1
37026: PUSH
37027: LD_INT 251
37029: EQUAL
37030: PUSH
37031: LD_VAR 0 2
37035: PPUSH
37036: CALL_OW 264
37040: PUSH
37041: LD_EXP 69
37045: EQUAL
37046: AND
37047: IFFALSE 37068
// MinerDetonateMine ( unit , x , y ) ;
37049: LD_VAR 0 2
37053: PPUSH
37054: LD_VAR 0 4
37058: PPUSH
37059: LD_VAR 0 5
37063: PPUSH
37064: CALL 39640 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37068: LD_VAR 0 1
37072: PUSH
37073: LD_INT 252
37075: EQUAL
37076: PUSH
37077: LD_VAR 0 2
37081: PPUSH
37082: CALL_OW 264
37086: PUSH
37087: LD_EXP 69
37091: EQUAL
37092: AND
37093: IFFALSE 37114
// MinerCreateMinefield ( unit , x , y ) ;
37095: LD_VAR 0 2
37099: PPUSH
37100: LD_VAR 0 4
37104: PPUSH
37105: LD_VAR 0 5
37109: PPUSH
37110: CALL 40057 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37114: LD_VAR 0 1
37118: PUSH
37119: LD_INT 253
37121: EQUAL
37122: PUSH
37123: LD_VAR 0 2
37127: PPUSH
37128: CALL_OW 257
37132: PUSH
37133: LD_INT 5
37135: EQUAL
37136: AND
37137: IFFALSE 37158
// ComBinocular ( unit , x , y ) ;
37139: LD_VAR 0 2
37143: PPUSH
37144: LD_VAR 0 4
37148: PPUSH
37149: LD_VAR 0 5
37153: PPUSH
37154: CALL 40428 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37158: LD_VAR 0 1
37162: PUSH
37163: LD_INT 254
37165: EQUAL
37166: PUSH
37167: LD_VAR 0 2
37171: PPUSH
37172: CALL_OW 264
37176: PUSH
37177: LD_EXP 64
37181: EQUAL
37182: AND
37183: PUSH
37184: LD_VAR 0 3
37188: PPUSH
37189: CALL_OW 263
37193: PUSH
37194: LD_INT 3
37196: EQUAL
37197: AND
37198: IFFALSE 37214
// HackDestroyVehicle ( unit , selectedUnit ) ;
37200: LD_VAR 0 2
37204: PPUSH
37205: LD_VAR 0 3
37209: PPUSH
37210: CALL 38723 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37214: LD_VAR 0 1
37218: PUSH
37219: LD_INT 255
37221: EQUAL
37222: PUSH
37223: LD_VAR 0 2
37227: PPUSH
37228: CALL_OW 264
37232: PUSH
37233: LD_INT 14
37235: PUSH
37236: LD_INT 53
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: IN
37243: AND
37244: PUSH
37245: LD_VAR 0 4
37249: PPUSH
37250: LD_VAR 0 5
37254: PPUSH
37255: CALL_OW 488
37259: AND
37260: IFFALSE 37284
// CutTreeXYR ( unit , x , y , 12 ) ;
37262: LD_VAR 0 2
37266: PPUSH
37267: LD_VAR 0 4
37271: PPUSH
37272: LD_VAR 0 5
37276: PPUSH
37277: LD_INT 12
37279: PPUSH
37280: CALL 37289 0 4
// end ;
37284: LD_VAR 0 6
37288: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37289: LD_INT 0
37291: PPUSH
37292: PPUSH
37293: PPUSH
37294: PPUSH
37295: PPUSH
37296: PPUSH
37297: PPUSH
37298: PPUSH
37299: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
37300: LD_VAR 0 1
37304: NOT
37305: PUSH
37306: LD_VAR 0 2
37310: PPUSH
37311: LD_VAR 0 3
37315: PPUSH
37316: CALL_OW 488
37320: NOT
37321: OR
37322: PUSH
37323: LD_VAR 0 4
37327: NOT
37328: OR
37329: IFFALSE 37333
// exit ;
37331: GO 37673
// list := [ ] ;
37333: LD_ADDR_VAR 0 13
37337: PUSH
37338: EMPTY
37339: ST_TO_ADDR
// if x - r < 0 then
37340: LD_VAR 0 2
37344: PUSH
37345: LD_VAR 0 4
37349: MINUS
37350: PUSH
37351: LD_INT 0
37353: LESS
37354: IFFALSE 37366
// min_x := 0 else
37356: LD_ADDR_VAR 0 7
37360: PUSH
37361: LD_INT 0
37363: ST_TO_ADDR
37364: GO 37382
// min_x := x - r ;
37366: LD_ADDR_VAR 0 7
37370: PUSH
37371: LD_VAR 0 2
37375: PUSH
37376: LD_VAR 0 4
37380: MINUS
37381: ST_TO_ADDR
// if y - r < 0 then
37382: LD_VAR 0 3
37386: PUSH
37387: LD_VAR 0 4
37391: MINUS
37392: PUSH
37393: LD_INT 0
37395: LESS
37396: IFFALSE 37408
// min_y := 0 else
37398: LD_ADDR_VAR 0 8
37402: PUSH
37403: LD_INT 0
37405: ST_TO_ADDR
37406: GO 37424
// min_y := y - r ;
37408: LD_ADDR_VAR 0 8
37412: PUSH
37413: LD_VAR 0 3
37417: PUSH
37418: LD_VAR 0 4
37422: MINUS
37423: ST_TO_ADDR
// max_x := x + r ;
37424: LD_ADDR_VAR 0 9
37428: PUSH
37429: LD_VAR 0 2
37433: PUSH
37434: LD_VAR 0 4
37438: PLUS
37439: ST_TO_ADDR
// max_y := y + r ;
37440: LD_ADDR_VAR 0 10
37444: PUSH
37445: LD_VAR 0 3
37449: PUSH
37450: LD_VAR 0 4
37454: PLUS
37455: ST_TO_ADDR
// for _x = min_x to max_x do
37456: LD_ADDR_VAR 0 11
37460: PUSH
37461: DOUBLE
37462: LD_VAR 0 7
37466: DEC
37467: ST_TO_ADDR
37468: LD_VAR 0 9
37472: PUSH
37473: FOR_TO
37474: IFFALSE 37591
// for _y = min_y to max_y do
37476: LD_ADDR_VAR 0 12
37480: PUSH
37481: DOUBLE
37482: LD_VAR 0 8
37486: DEC
37487: ST_TO_ADDR
37488: LD_VAR 0 10
37492: PUSH
37493: FOR_TO
37494: IFFALSE 37587
// begin if not ValidHex ( _x , _y ) then
37496: LD_VAR 0 11
37500: PPUSH
37501: LD_VAR 0 12
37505: PPUSH
37506: CALL_OW 488
37510: NOT
37511: IFFALSE 37515
// continue ;
37513: GO 37493
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37515: LD_VAR 0 11
37519: PPUSH
37520: LD_VAR 0 12
37524: PPUSH
37525: CALL_OW 351
37529: PUSH
37530: LD_VAR 0 11
37534: PPUSH
37535: LD_VAR 0 12
37539: PPUSH
37540: CALL_OW 554
37544: AND
37545: IFFALSE 37585
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37547: LD_ADDR_VAR 0 13
37551: PUSH
37552: LD_VAR 0 13
37556: PPUSH
37557: LD_VAR 0 13
37561: PUSH
37562: LD_INT 1
37564: PLUS
37565: PPUSH
37566: LD_VAR 0 11
37570: PUSH
37571: LD_VAR 0 12
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PPUSH
37580: CALL_OW 2
37584: ST_TO_ADDR
// end ;
37585: GO 37493
37587: POP
37588: POP
37589: GO 37473
37591: POP
37592: POP
// if not list then
37593: LD_VAR 0 13
37597: NOT
37598: IFFALSE 37602
// exit ;
37600: GO 37673
// for i in list do
37602: LD_ADDR_VAR 0 6
37606: PUSH
37607: LD_VAR 0 13
37611: PUSH
37612: FOR_IN
37613: IFFALSE 37671
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37615: LD_VAR 0 1
37619: PPUSH
37620: LD_STRING M
37622: PUSH
37623: LD_VAR 0 6
37627: PUSH
37628: LD_INT 1
37630: ARRAY
37631: PUSH
37632: LD_VAR 0 6
37636: PUSH
37637: LD_INT 2
37639: ARRAY
37640: PUSH
37641: LD_INT 0
37643: PUSH
37644: LD_INT 0
37646: PUSH
37647: LD_INT 0
37649: PUSH
37650: LD_INT 0
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: PUSH
37662: EMPTY
37663: LIST
37664: PPUSH
37665: CALL_OW 447
37669: GO 37612
37671: POP
37672: POP
// end ;
37673: LD_VAR 0 5
37677: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37678: LD_EXP 133
37682: NOT
37683: IFFALSE 37733
37685: GO 37687
37687: DISABLE
// begin initHack := true ;
37688: LD_ADDR_EXP 133
37692: PUSH
37693: LD_INT 1
37695: ST_TO_ADDR
// hackTanks := [ ] ;
37696: LD_ADDR_EXP 134
37700: PUSH
37701: EMPTY
37702: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37703: LD_ADDR_EXP 135
37707: PUSH
37708: EMPTY
37709: ST_TO_ADDR
// hackLimit := 3 ;
37710: LD_ADDR_EXP 136
37714: PUSH
37715: LD_INT 3
37717: ST_TO_ADDR
// hackDist := 12 ;
37718: LD_ADDR_EXP 137
37722: PUSH
37723: LD_INT 12
37725: ST_TO_ADDR
// hackCounter := [ ] ;
37726: LD_ADDR_EXP 138
37730: PUSH
37731: EMPTY
37732: ST_TO_ADDR
// end ;
37733: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37734: LD_EXP 133
37738: PUSH
37739: LD_INT 34
37741: PUSH
37742: LD_EXP 64
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PPUSH
37751: CALL_OW 69
37755: AND
37756: IFFALSE 38011
37758: GO 37760
37760: DISABLE
37761: LD_INT 0
37763: PPUSH
37764: PPUSH
// begin enable ;
37765: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37766: LD_ADDR_VAR 0 1
37770: PUSH
37771: LD_INT 34
37773: PUSH
37774: LD_EXP 64
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PPUSH
37783: CALL_OW 69
37787: PUSH
37788: FOR_IN
37789: IFFALSE 38009
// begin if not i in hackTanks then
37791: LD_VAR 0 1
37795: PUSH
37796: LD_EXP 134
37800: IN
37801: NOT
37802: IFFALSE 37885
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37804: LD_ADDR_EXP 134
37808: PUSH
37809: LD_EXP 134
37813: PPUSH
37814: LD_EXP 134
37818: PUSH
37819: LD_INT 1
37821: PLUS
37822: PPUSH
37823: LD_VAR 0 1
37827: PPUSH
37828: CALL_OW 1
37832: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37833: LD_ADDR_EXP 135
37837: PUSH
37838: LD_EXP 135
37842: PPUSH
37843: LD_EXP 135
37847: PUSH
37848: LD_INT 1
37850: PLUS
37851: PPUSH
37852: EMPTY
37853: PPUSH
37854: CALL_OW 1
37858: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37859: LD_ADDR_EXP 138
37863: PUSH
37864: LD_EXP 138
37868: PPUSH
37869: LD_EXP 138
37873: PUSH
37874: LD_INT 1
37876: PLUS
37877: PPUSH
37878: EMPTY
37879: PPUSH
37880: CALL_OW 1
37884: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37885: LD_VAR 0 1
37889: PPUSH
37890: CALL_OW 302
37894: NOT
37895: IFFALSE 37908
// begin HackUnlinkAll ( i ) ;
37897: LD_VAR 0 1
37901: PPUSH
37902: CALL 38014 0 1
// continue ;
37906: GO 37788
// end ; HackCheckCapturedStatus ( i ) ;
37908: LD_VAR 0 1
37912: PPUSH
37913: CALL 38457 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37917: LD_ADDR_VAR 0 2
37921: PUSH
37922: LD_INT 81
37924: PUSH
37925: LD_VAR 0 1
37929: PPUSH
37930: CALL_OW 255
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 33
37941: PUSH
37942: LD_INT 3
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 91
37951: PUSH
37952: LD_VAR 0 1
37956: PUSH
37957: LD_EXP 137
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 50
37969: PUSH
37970: EMPTY
37971: LIST
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: PPUSH
37979: CALL_OW 69
37983: ST_TO_ADDR
// if not tmp then
37984: LD_VAR 0 2
37988: NOT
37989: IFFALSE 37993
// continue ;
37991: GO 37788
// HackLink ( i , tmp ) ;
37993: LD_VAR 0 1
37997: PPUSH
37998: LD_VAR 0 2
38002: PPUSH
38003: CALL 38150 0 2
// end ;
38007: GO 37788
38009: POP
38010: POP
// end ;
38011: PPOPN 2
38013: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38014: LD_INT 0
38016: PPUSH
38017: PPUSH
38018: PPUSH
// if not hack in hackTanks then
38019: LD_VAR 0 1
38023: PUSH
38024: LD_EXP 134
38028: IN
38029: NOT
38030: IFFALSE 38034
// exit ;
38032: GO 38145
// index := GetElementIndex ( hackTanks , hack ) ;
38034: LD_ADDR_VAR 0 4
38038: PUSH
38039: LD_EXP 134
38043: PPUSH
38044: LD_VAR 0 1
38048: PPUSH
38049: CALL 45579 0 2
38053: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38054: LD_EXP 135
38058: PUSH
38059: LD_VAR 0 4
38063: ARRAY
38064: IFFALSE 38145
// begin for i in hackTanksCaptured [ index ] do
38066: LD_ADDR_VAR 0 3
38070: PUSH
38071: LD_EXP 135
38075: PUSH
38076: LD_VAR 0 4
38080: ARRAY
38081: PUSH
38082: FOR_IN
38083: IFFALSE 38109
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38085: LD_VAR 0 3
38089: PUSH
38090: LD_INT 1
38092: ARRAY
38093: PPUSH
38094: LD_VAR 0 3
38098: PUSH
38099: LD_INT 2
38101: ARRAY
38102: PPUSH
38103: CALL_OW 235
38107: GO 38082
38109: POP
38110: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38111: LD_ADDR_EXP 135
38115: PUSH
38116: LD_EXP 135
38120: PPUSH
38121: LD_VAR 0 4
38125: PPUSH
38126: EMPTY
38127: PPUSH
38128: CALL_OW 1
38132: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38133: LD_VAR 0 1
38137: PPUSH
38138: LD_INT 0
38140: PPUSH
38141: CALL_OW 505
// end ; end ;
38145: LD_VAR 0 2
38149: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38150: LD_INT 0
38152: PPUSH
38153: PPUSH
38154: PPUSH
// if not hack in hackTanks or not vehicles then
38155: LD_VAR 0 1
38159: PUSH
38160: LD_EXP 134
38164: IN
38165: NOT
38166: PUSH
38167: LD_VAR 0 2
38171: NOT
38172: OR
38173: IFFALSE 38177
// exit ;
38175: GO 38452
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38177: LD_ADDR_VAR 0 2
38181: PUSH
38182: LD_VAR 0 1
38186: PPUSH
38187: LD_VAR 0 2
38191: PPUSH
38192: LD_INT 1
38194: PPUSH
38195: LD_INT 1
38197: PPUSH
38198: CALL 46229 0 4
38202: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38203: LD_ADDR_VAR 0 5
38207: PUSH
38208: LD_EXP 134
38212: PPUSH
38213: LD_VAR 0 1
38217: PPUSH
38218: CALL 45579 0 2
38222: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38223: LD_EXP 135
38227: PUSH
38228: LD_VAR 0 5
38232: ARRAY
38233: PUSH
38234: LD_EXP 136
38238: LESS
38239: IFFALSE 38428
// begin for i := 1 to vehicles do
38241: LD_ADDR_VAR 0 4
38245: PUSH
38246: DOUBLE
38247: LD_INT 1
38249: DEC
38250: ST_TO_ADDR
38251: LD_VAR 0 2
38255: PUSH
38256: FOR_TO
38257: IFFALSE 38426
// begin if hackTanksCaptured [ index ] = hackLimit then
38259: LD_EXP 135
38263: PUSH
38264: LD_VAR 0 5
38268: ARRAY
38269: PUSH
38270: LD_EXP 136
38274: EQUAL
38275: IFFALSE 38279
// break ;
38277: GO 38426
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38279: LD_ADDR_EXP 138
38283: PUSH
38284: LD_EXP 138
38288: PPUSH
38289: LD_VAR 0 5
38293: PPUSH
38294: LD_EXP 138
38298: PUSH
38299: LD_VAR 0 5
38303: ARRAY
38304: PUSH
38305: LD_INT 1
38307: PLUS
38308: PPUSH
38309: CALL_OW 1
38313: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38314: LD_ADDR_EXP 135
38318: PUSH
38319: LD_EXP 135
38323: PPUSH
38324: LD_VAR 0 5
38328: PUSH
38329: LD_EXP 135
38333: PUSH
38334: LD_VAR 0 5
38338: ARRAY
38339: PUSH
38340: LD_INT 1
38342: PLUS
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PPUSH
38348: LD_VAR 0 2
38352: PUSH
38353: LD_VAR 0 4
38357: ARRAY
38358: PUSH
38359: LD_VAR 0 2
38363: PUSH
38364: LD_VAR 0 4
38368: ARRAY
38369: PPUSH
38370: CALL_OW 255
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PPUSH
38379: CALL 45794 0 3
38383: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38384: LD_VAR 0 2
38388: PUSH
38389: LD_VAR 0 4
38393: ARRAY
38394: PPUSH
38395: LD_VAR 0 1
38399: PPUSH
38400: CALL_OW 255
38404: PPUSH
38405: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38409: LD_VAR 0 2
38413: PUSH
38414: LD_VAR 0 4
38418: ARRAY
38419: PPUSH
38420: CALL_OW 141
// end ;
38424: GO 38256
38426: POP
38427: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38428: LD_VAR 0 1
38432: PPUSH
38433: LD_EXP 135
38437: PUSH
38438: LD_VAR 0 5
38442: ARRAY
38443: PUSH
38444: LD_INT 0
38446: PLUS
38447: PPUSH
38448: CALL_OW 505
// end ;
38452: LD_VAR 0 3
38456: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38457: LD_INT 0
38459: PPUSH
38460: PPUSH
38461: PPUSH
38462: PPUSH
// if not hack in hackTanks then
38463: LD_VAR 0 1
38467: PUSH
38468: LD_EXP 134
38472: IN
38473: NOT
38474: IFFALSE 38478
// exit ;
38476: GO 38718
// index := GetElementIndex ( hackTanks , hack ) ;
38478: LD_ADDR_VAR 0 4
38482: PUSH
38483: LD_EXP 134
38487: PPUSH
38488: LD_VAR 0 1
38492: PPUSH
38493: CALL 45579 0 2
38497: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38498: LD_ADDR_VAR 0 3
38502: PUSH
38503: DOUBLE
38504: LD_EXP 135
38508: PUSH
38509: LD_VAR 0 4
38513: ARRAY
38514: INC
38515: ST_TO_ADDR
38516: LD_INT 1
38518: PUSH
38519: FOR_DOWNTO
38520: IFFALSE 38692
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38522: LD_ADDR_VAR 0 5
38526: PUSH
38527: LD_EXP 135
38531: PUSH
38532: LD_VAR 0 4
38536: ARRAY
38537: PUSH
38538: LD_VAR 0 3
38542: ARRAY
38543: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38544: LD_VAR 0 5
38548: PUSH
38549: LD_INT 1
38551: ARRAY
38552: PPUSH
38553: CALL_OW 302
38557: NOT
38558: PUSH
38559: LD_VAR 0 5
38563: PUSH
38564: LD_INT 1
38566: ARRAY
38567: PPUSH
38568: CALL_OW 255
38572: PUSH
38573: LD_VAR 0 1
38577: PPUSH
38578: CALL_OW 255
38582: NONEQUAL
38583: OR
38584: IFFALSE 38690
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38586: LD_VAR 0 5
38590: PUSH
38591: LD_INT 1
38593: ARRAY
38594: PPUSH
38595: CALL_OW 305
38599: PUSH
38600: LD_VAR 0 5
38604: PUSH
38605: LD_INT 1
38607: ARRAY
38608: PPUSH
38609: CALL_OW 255
38613: PUSH
38614: LD_VAR 0 1
38618: PPUSH
38619: CALL_OW 255
38623: EQUAL
38624: AND
38625: IFFALSE 38649
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38627: LD_VAR 0 5
38631: PUSH
38632: LD_INT 1
38634: ARRAY
38635: PPUSH
38636: LD_VAR 0 5
38640: PUSH
38641: LD_INT 2
38643: ARRAY
38644: PPUSH
38645: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38649: LD_ADDR_EXP 135
38653: PUSH
38654: LD_EXP 135
38658: PPUSH
38659: LD_VAR 0 4
38663: PPUSH
38664: LD_EXP 135
38668: PUSH
38669: LD_VAR 0 4
38673: ARRAY
38674: PPUSH
38675: LD_VAR 0 3
38679: PPUSH
38680: CALL_OW 3
38684: PPUSH
38685: CALL_OW 1
38689: ST_TO_ADDR
// end ; end ;
38690: GO 38519
38692: POP
38693: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38694: LD_VAR 0 1
38698: PPUSH
38699: LD_EXP 135
38703: PUSH
38704: LD_VAR 0 4
38708: ARRAY
38709: PUSH
38710: LD_INT 0
38712: PLUS
38713: PPUSH
38714: CALL_OW 505
// end ;
38718: LD_VAR 0 2
38722: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38723: LD_INT 0
38725: PPUSH
38726: PPUSH
38727: PPUSH
38728: PPUSH
// if not hack in hackTanks then
38729: LD_VAR 0 1
38733: PUSH
38734: LD_EXP 134
38738: IN
38739: NOT
38740: IFFALSE 38744
// exit ;
38742: GO 38829
// index := GetElementIndex ( hackTanks , hack ) ;
38744: LD_ADDR_VAR 0 5
38748: PUSH
38749: LD_EXP 134
38753: PPUSH
38754: LD_VAR 0 1
38758: PPUSH
38759: CALL 45579 0 2
38763: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38764: LD_ADDR_VAR 0 4
38768: PUSH
38769: DOUBLE
38770: LD_INT 1
38772: DEC
38773: ST_TO_ADDR
38774: LD_EXP 135
38778: PUSH
38779: LD_VAR 0 5
38783: ARRAY
38784: PUSH
38785: FOR_TO
38786: IFFALSE 38827
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38788: LD_EXP 135
38792: PUSH
38793: LD_VAR 0 5
38797: ARRAY
38798: PUSH
38799: LD_VAR 0 4
38803: ARRAY
38804: PUSH
38805: LD_INT 1
38807: ARRAY
38808: PUSH
38809: LD_VAR 0 2
38813: EQUAL
38814: IFFALSE 38825
// KillUnit ( vehicle ) ;
38816: LD_VAR 0 2
38820: PPUSH
38821: CALL_OW 66
38825: GO 38785
38827: POP
38828: POP
// end ;
38829: LD_VAR 0 3
38833: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38834: LD_EXP 139
38838: NOT
38839: IFFALSE 38874
38841: GO 38843
38843: DISABLE
// begin initMiner := true ;
38844: LD_ADDR_EXP 139
38848: PUSH
38849: LD_INT 1
38851: ST_TO_ADDR
// minersList := [ ] ;
38852: LD_ADDR_EXP 140
38856: PUSH
38857: EMPTY
38858: ST_TO_ADDR
// minerMinesList := [ ] ;
38859: LD_ADDR_EXP 141
38863: PUSH
38864: EMPTY
38865: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38866: LD_ADDR_EXP 142
38870: PUSH
38871: LD_INT 5
38873: ST_TO_ADDR
// end ;
38874: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38875: LD_EXP 139
38879: PUSH
38880: LD_INT 34
38882: PUSH
38883: LD_EXP 69
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PPUSH
38892: CALL_OW 69
38896: AND
38897: IFFALSE 39360
38899: GO 38901
38901: DISABLE
38902: LD_INT 0
38904: PPUSH
38905: PPUSH
38906: PPUSH
38907: PPUSH
// begin enable ;
38908: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38909: LD_ADDR_VAR 0 1
38913: PUSH
38914: LD_INT 34
38916: PUSH
38917: LD_EXP 69
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PPUSH
38926: CALL_OW 69
38930: PUSH
38931: FOR_IN
38932: IFFALSE 39004
// begin if not i in minersList then
38934: LD_VAR 0 1
38938: PUSH
38939: LD_EXP 140
38943: IN
38944: NOT
38945: IFFALSE 39002
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38947: LD_ADDR_EXP 140
38951: PUSH
38952: LD_EXP 140
38956: PPUSH
38957: LD_EXP 140
38961: PUSH
38962: LD_INT 1
38964: PLUS
38965: PPUSH
38966: LD_VAR 0 1
38970: PPUSH
38971: CALL_OW 1
38975: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38976: LD_ADDR_EXP 141
38980: PUSH
38981: LD_EXP 141
38985: PPUSH
38986: LD_EXP 141
38990: PUSH
38991: LD_INT 1
38993: PLUS
38994: PPUSH
38995: EMPTY
38996: PPUSH
38997: CALL_OW 1
39001: ST_TO_ADDR
// end end ;
39002: GO 38931
39004: POP
39005: POP
// for i := minerMinesList downto 1 do
39006: LD_ADDR_VAR 0 1
39010: PUSH
39011: DOUBLE
39012: LD_EXP 141
39016: INC
39017: ST_TO_ADDR
39018: LD_INT 1
39020: PUSH
39021: FOR_DOWNTO
39022: IFFALSE 39358
// begin if IsLive ( minersList [ i ] ) then
39024: LD_EXP 140
39028: PUSH
39029: LD_VAR 0 1
39033: ARRAY
39034: PPUSH
39035: CALL_OW 300
39039: IFFALSE 39067
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39041: LD_EXP 140
39045: PUSH
39046: LD_VAR 0 1
39050: ARRAY
39051: PPUSH
39052: LD_EXP 141
39056: PUSH
39057: LD_VAR 0 1
39061: ARRAY
39062: PPUSH
39063: CALL_OW 505
// if not minerMinesList [ i ] then
39067: LD_EXP 141
39071: PUSH
39072: LD_VAR 0 1
39076: ARRAY
39077: NOT
39078: IFFALSE 39082
// continue ;
39080: GO 39021
// for j := minerMinesList [ i ] downto 1 do
39082: LD_ADDR_VAR 0 2
39086: PUSH
39087: DOUBLE
39088: LD_EXP 141
39092: PUSH
39093: LD_VAR 0 1
39097: ARRAY
39098: INC
39099: ST_TO_ADDR
39100: LD_INT 1
39102: PUSH
39103: FOR_DOWNTO
39104: IFFALSE 39354
// begin side := GetSide ( minersList [ i ] ) ;
39106: LD_ADDR_VAR 0 3
39110: PUSH
39111: LD_EXP 140
39115: PUSH
39116: LD_VAR 0 1
39120: ARRAY
39121: PPUSH
39122: CALL_OW 255
39126: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39127: LD_ADDR_VAR 0 4
39131: PUSH
39132: LD_EXP 141
39136: PUSH
39137: LD_VAR 0 1
39141: ARRAY
39142: PUSH
39143: LD_VAR 0 2
39147: ARRAY
39148: PUSH
39149: LD_INT 1
39151: ARRAY
39152: PPUSH
39153: LD_EXP 141
39157: PUSH
39158: LD_VAR 0 1
39162: ARRAY
39163: PUSH
39164: LD_VAR 0 2
39168: ARRAY
39169: PUSH
39170: LD_INT 2
39172: ARRAY
39173: PPUSH
39174: CALL_OW 428
39178: ST_TO_ADDR
// if not tmp then
39179: LD_VAR 0 4
39183: NOT
39184: IFFALSE 39188
// continue ;
39186: GO 39103
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39188: LD_VAR 0 4
39192: PUSH
39193: LD_INT 81
39195: PUSH
39196: LD_VAR 0 3
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PPUSH
39205: CALL_OW 69
39209: IN
39210: PUSH
39211: LD_EXP 141
39215: PUSH
39216: LD_VAR 0 1
39220: ARRAY
39221: PUSH
39222: LD_VAR 0 2
39226: ARRAY
39227: PUSH
39228: LD_INT 1
39230: ARRAY
39231: PPUSH
39232: LD_EXP 141
39236: PUSH
39237: LD_VAR 0 1
39241: ARRAY
39242: PUSH
39243: LD_VAR 0 2
39247: ARRAY
39248: PUSH
39249: LD_INT 2
39251: ARRAY
39252: PPUSH
39253: CALL_OW 458
39257: AND
39258: IFFALSE 39352
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39260: LD_EXP 141
39264: PUSH
39265: LD_VAR 0 1
39269: ARRAY
39270: PUSH
39271: LD_VAR 0 2
39275: ARRAY
39276: PUSH
39277: LD_INT 1
39279: ARRAY
39280: PPUSH
39281: LD_EXP 141
39285: PUSH
39286: LD_VAR 0 1
39290: ARRAY
39291: PUSH
39292: LD_VAR 0 2
39296: ARRAY
39297: PUSH
39298: LD_INT 2
39300: ARRAY
39301: PPUSH
39302: LD_VAR 0 3
39306: PPUSH
39307: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39311: LD_ADDR_EXP 141
39315: PUSH
39316: LD_EXP 141
39320: PPUSH
39321: LD_VAR 0 1
39325: PPUSH
39326: LD_EXP 141
39330: PUSH
39331: LD_VAR 0 1
39335: ARRAY
39336: PPUSH
39337: LD_VAR 0 2
39341: PPUSH
39342: CALL_OW 3
39346: PPUSH
39347: CALL_OW 1
39351: ST_TO_ADDR
// end ; end ;
39352: GO 39103
39354: POP
39355: POP
// end ;
39356: GO 39021
39358: POP
39359: POP
// end ;
39360: PPOPN 4
39362: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39363: LD_INT 0
39365: PPUSH
39366: PPUSH
// result := false ;
39367: LD_ADDR_VAR 0 4
39371: PUSH
39372: LD_INT 0
39374: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39375: LD_VAR 0 1
39379: PPUSH
39380: CALL_OW 264
39384: PUSH
39385: LD_EXP 69
39389: EQUAL
39390: NOT
39391: IFFALSE 39395
// exit ;
39393: GO 39635
// index := GetElementIndex ( minersList , unit ) ;
39395: LD_ADDR_VAR 0 5
39399: PUSH
39400: LD_EXP 140
39404: PPUSH
39405: LD_VAR 0 1
39409: PPUSH
39410: CALL 45579 0 2
39414: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39415: LD_EXP 141
39419: PUSH
39420: LD_VAR 0 5
39424: ARRAY
39425: PUSH
39426: LD_EXP 142
39430: GREATEREQUAL
39431: IFFALSE 39435
// exit ;
39433: GO 39635
// ComMoveXY ( unit , x , y ) ;
39435: LD_VAR 0 1
39439: PPUSH
39440: LD_VAR 0 2
39444: PPUSH
39445: LD_VAR 0 3
39449: PPUSH
39450: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39454: LD_INT 35
39456: PPUSH
39457: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39461: LD_VAR 0 1
39465: PPUSH
39466: LD_VAR 0 2
39470: PPUSH
39471: LD_VAR 0 3
39475: PPUSH
39476: CALL 75643 0 3
39480: NOT
39481: PUSH
39482: LD_VAR 0 1
39486: PPUSH
39487: CALL_OW 314
39491: AND
39492: IFFALSE 39496
// exit ;
39494: GO 39635
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39496: LD_VAR 0 2
39500: PPUSH
39501: LD_VAR 0 3
39505: PPUSH
39506: CALL_OW 428
39510: PUSH
39511: LD_VAR 0 1
39515: EQUAL
39516: PUSH
39517: LD_VAR 0 1
39521: PPUSH
39522: CALL_OW 314
39526: NOT
39527: AND
39528: IFFALSE 39454
// PlaySoundXY ( x , y , PlantMine ) ;
39530: LD_VAR 0 2
39534: PPUSH
39535: LD_VAR 0 3
39539: PPUSH
39540: LD_STRING PlantMine
39542: PPUSH
39543: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39547: LD_VAR 0 2
39551: PPUSH
39552: LD_VAR 0 3
39556: PPUSH
39557: LD_VAR 0 1
39561: PPUSH
39562: CALL_OW 255
39566: PPUSH
39567: LD_INT 0
39569: PPUSH
39570: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39574: LD_ADDR_EXP 141
39578: PUSH
39579: LD_EXP 141
39583: PPUSH
39584: LD_VAR 0 5
39588: PUSH
39589: LD_EXP 141
39593: PUSH
39594: LD_VAR 0 5
39598: ARRAY
39599: PUSH
39600: LD_INT 1
39602: PLUS
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PPUSH
39608: LD_VAR 0 2
39612: PUSH
39613: LD_VAR 0 3
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PPUSH
39622: CALL 45794 0 3
39626: ST_TO_ADDR
// result := true ;
39627: LD_ADDR_VAR 0 4
39631: PUSH
39632: LD_INT 1
39634: ST_TO_ADDR
// end ;
39635: LD_VAR 0 4
39639: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39640: LD_INT 0
39642: PPUSH
39643: PPUSH
39644: PPUSH
// if not unit in minersList then
39645: LD_VAR 0 1
39649: PUSH
39650: LD_EXP 140
39654: IN
39655: NOT
39656: IFFALSE 39660
// exit ;
39658: GO 40052
// index := GetElementIndex ( minersList , unit ) ;
39660: LD_ADDR_VAR 0 6
39664: PUSH
39665: LD_EXP 140
39669: PPUSH
39670: LD_VAR 0 1
39674: PPUSH
39675: CALL 45579 0 2
39679: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39680: LD_ADDR_VAR 0 5
39684: PUSH
39685: DOUBLE
39686: LD_EXP 141
39690: PUSH
39691: LD_VAR 0 6
39695: ARRAY
39696: INC
39697: ST_TO_ADDR
39698: LD_INT 1
39700: PUSH
39701: FOR_DOWNTO
39702: IFFALSE 39863
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39704: LD_EXP 141
39708: PUSH
39709: LD_VAR 0 6
39713: ARRAY
39714: PUSH
39715: LD_VAR 0 5
39719: ARRAY
39720: PUSH
39721: LD_INT 1
39723: ARRAY
39724: PUSH
39725: LD_VAR 0 2
39729: EQUAL
39730: PUSH
39731: LD_EXP 141
39735: PUSH
39736: LD_VAR 0 6
39740: ARRAY
39741: PUSH
39742: LD_VAR 0 5
39746: ARRAY
39747: PUSH
39748: LD_INT 2
39750: ARRAY
39751: PUSH
39752: LD_VAR 0 3
39756: EQUAL
39757: AND
39758: IFFALSE 39861
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39760: LD_EXP 141
39764: PUSH
39765: LD_VAR 0 6
39769: ARRAY
39770: PUSH
39771: LD_VAR 0 5
39775: ARRAY
39776: PUSH
39777: LD_INT 1
39779: ARRAY
39780: PPUSH
39781: LD_EXP 141
39785: PUSH
39786: LD_VAR 0 6
39790: ARRAY
39791: PUSH
39792: LD_VAR 0 5
39796: ARRAY
39797: PUSH
39798: LD_INT 2
39800: ARRAY
39801: PPUSH
39802: LD_VAR 0 1
39806: PPUSH
39807: CALL_OW 255
39811: PPUSH
39812: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39816: LD_ADDR_EXP 141
39820: PUSH
39821: LD_EXP 141
39825: PPUSH
39826: LD_VAR 0 6
39830: PPUSH
39831: LD_EXP 141
39835: PUSH
39836: LD_VAR 0 6
39840: ARRAY
39841: PPUSH
39842: LD_VAR 0 5
39846: PPUSH
39847: CALL_OW 3
39851: PPUSH
39852: CALL_OW 1
39856: ST_TO_ADDR
// exit ;
39857: POP
39858: POP
39859: GO 40052
// end ; end ;
39861: GO 39701
39863: POP
39864: POP
// for i := minerMinesList [ index ] downto 1 do
39865: LD_ADDR_VAR 0 5
39869: PUSH
39870: DOUBLE
39871: LD_EXP 141
39875: PUSH
39876: LD_VAR 0 6
39880: ARRAY
39881: INC
39882: ST_TO_ADDR
39883: LD_INT 1
39885: PUSH
39886: FOR_DOWNTO
39887: IFFALSE 40050
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39889: LD_EXP 141
39893: PUSH
39894: LD_VAR 0 6
39898: ARRAY
39899: PUSH
39900: LD_VAR 0 5
39904: ARRAY
39905: PUSH
39906: LD_INT 1
39908: ARRAY
39909: PPUSH
39910: LD_EXP 141
39914: PUSH
39915: LD_VAR 0 6
39919: ARRAY
39920: PUSH
39921: LD_VAR 0 5
39925: ARRAY
39926: PUSH
39927: LD_INT 2
39929: ARRAY
39930: PPUSH
39931: LD_VAR 0 2
39935: PPUSH
39936: LD_VAR 0 3
39940: PPUSH
39941: CALL_OW 298
39945: PUSH
39946: LD_INT 6
39948: LESS
39949: IFFALSE 40048
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39951: LD_EXP 141
39955: PUSH
39956: LD_VAR 0 6
39960: ARRAY
39961: PUSH
39962: LD_VAR 0 5
39966: ARRAY
39967: PUSH
39968: LD_INT 1
39970: ARRAY
39971: PPUSH
39972: LD_EXP 141
39976: PUSH
39977: LD_VAR 0 6
39981: ARRAY
39982: PUSH
39983: LD_VAR 0 5
39987: ARRAY
39988: PUSH
39989: LD_INT 2
39991: ARRAY
39992: PPUSH
39993: LD_VAR 0 1
39997: PPUSH
39998: CALL_OW 255
40002: PPUSH
40003: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40007: LD_ADDR_EXP 141
40011: PUSH
40012: LD_EXP 141
40016: PPUSH
40017: LD_VAR 0 6
40021: PPUSH
40022: LD_EXP 141
40026: PUSH
40027: LD_VAR 0 6
40031: ARRAY
40032: PPUSH
40033: LD_VAR 0 5
40037: PPUSH
40038: CALL_OW 3
40042: PPUSH
40043: CALL_OW 1
40047: ST_TO_ADDR
// end ; end ;
40048: GO 39886
40050: POP
40051: POP
// end ;
40052: LD_VAR 0 4
40056: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40057: LD_INT 0
40059: PPUSH
40060: PPUSH
40061: PPUSH
40062: PPUSH
40063: PPUSH
40064: PPUSH
40065: PPUSH
40066: PPUSH
40067: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40068: LD_VAR 0 1
40072: PPUSH
40073: CALL_OW 264
40077: PUSH
40078: LD_EXP 69
40082: EQUAL
40083: NOT
40084: PUSH
40085: LD_VAR 0 1
40089: PUSH
40090: LD_EXP 140
40094: IN
40095: NOT
40096: OR
40097: IFFALSE 40101
// exit ;
40099: GO 40423
// index := GetElementIndex ( minersList , unit ) ;
40101: LD_ADDR_VAR 0 6
40105: PUSH
40106: LD_EXP 140
40110: PPUSH
40111: LD_VAR 0 1
40115: PPUSH
40116: CALL 45579 0 2
40120: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40121: LD_ADDR_VAR 0 8
40125: PUSH
40126: LD_EXP 142
40130: PUSH
40131: LD_EXP 141
40135: PUSH
40136: LD_VAR 0 6
40140: ARRAY
40141: MINUS
40142: ST_TO_ADDR
// if not minesFreeAmount then
40143: LD_VAR 0 8
40147: NOT
40148: IFFALSE 40152
// exit ;
40150: GO 40423
// tmp := [ ] ;
40152: LD_ADDR_VAR 0 7
40156: PUSH
40157: EMPTY
40158: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40159: LD_ADDR_VAR 0 5
40163: PUSH
40164: DOUBLE
40165: LD_INT 1
40167: DEC
40168: ST_TO_ADDR
40169: LD_VAR 0 8
40173: PUSH
40174: FOR_TO
40175: IFFALSE 40370
// begin _d := rand ( 0 , 5 ) ;
40177: LD_ADDR_VAR 0 11
40181: PUSH
40182: LD_INT 0
40184: PPUSH
40185: LD_INT 5
40187: PPUSH
40188: CALL_OW 12
40192: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40193: LD_ADDR_VAR 0 12
40197: PUSH
40198: LD_INT 2
40200: PPUSH
40201: LD_INT 6
40203: PPUSH
40204: CALL_OW 12
40208: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40209: LD_ADDR_VAR 0 9
40213: PUSH
40214: LD_VAR 0 2
40218: PPUSH
40219: LD_VAR 0 11
40223: PPUSH
40224: LD_VAR 0 12
40228: PPUSH
40229: CALL_OW 272
40233: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40234: LD_ADDR_VAR 0 10
40238: PUSH
40239: LD_VAR 0 3
40243: PPUSH
40244: LD_VAR 0 11
40248: PPUSH
40249: LD_VAR 0 12
40253: PPUSH
40254: CALL_OW 273
40258: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40259: LD_VAR 0 9
40263: PPUSH
40264: LD_VAR 0 10
40268: PPUSH
40269: CALL_OW 488
40273: PUSH
40274: LD_VAR 0 9
40278: PUSH
40279: LD_VAR 0 10
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_VAR 0 7
40292: IN
40293: NOT
40294: AND
40295: PUSH
40296: LD_VAR 0 9
40300: PPUSH
40301: LD_VAR 0 10
40305: PPUSH
40306: CALL_OW 458
40310: NOT
40311: AND
40312: IFFALSE 40354
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40314: LD_ADDR_VAR 0 7
40318: PUSH
40319: LD_VAR 0 7
40323: PPUSH
40324: LD_VAR 0 7
40328: PUSH
40329: LD_INT 1
40331: PLUS
40332: PPUSH
40333: LD_VAR 0 9
40337: PUSH
40338: LD_VAR 0 10
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PPUSH
40347: CALL_OW 1
40351: ST_TO_ADDR
40352: GO 40368
// i := i - 1 ;
40354: LD_ADDR_VAR 0 5
40358: PUSH
40359: LD_VAR 0 5
40363: PUSH
40364: LD_INT 1
40366: MINUS
40367: ST_TO_ADDR
// end ;
40368: GO 40174
40370: POP
40371: POP
// for i in tmp do
40372: LD_ADDR_VAR 0 5
40376: PUSH
40377: LD_VAR 0 7
40381: PUSH
40382: FOR_IN
40383: IFFALSE 40421
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40385: LD_VAR 0 1
40389: PPUSH
40390: LD_VAR 0 5
40394: PUSH
40395: LD_INT 1
40397: ARRAY
40398: PPUSH
40399: LD_VAR 0 5
40403: PUSH
40404: LD_INT 2
40406: ARRAY
40407: PPUSH
40408: CALL 39363 0 3
40412: NOT
40413: IFFALSE 40419
// exit ;
40415: POP
40416: POP
40417: GO 40423
40419: GO 40382
40421: POP
40422: POP
// end ;
40423: LD_VAR 0 4
40427: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
40428: LD_INT 0
40430: PPUSH
40431: PPUSH
40432: PPUSH
40433: PPUSH
40434: PPUSH
40435: PPUSH
40436: PPUSH
// if not GetClass ( unit ) = class_sniper then
40437: LD_VAR 0 1
40441: PPUSH
40442: CALL_OW 257
40446: PUSH
40447: LD_INT 5
40449: EQUAL
40450: NOT
40451: IFFALSE 40455
// exit ;
40453: GO 40843
// dist := 8 ;
40455: LD_ADDR_VAR 0 5
40459: PUSH
40460: LD_INT 8
40462: ST_TO_ADDR
// viewRange := 12 ;
40463: LD_ADDR_VAR 0 7
40467: PUSH
40468: LD_INT 12
40470: ST_TO_ADDR
// side := GetSide ( unit ) ;
40471: LD_ADDR_VAR 0 6
40475: PUSH
40476: LD_VAR 0 1
40480: PPUSH
40481: CALL_OW 255
40485: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40486: LD_INT 61
40488: PPUSH
40489: LD_VAR 0 6
40493: PPUSH
40494: CALL_OW 321
40498: PUSH
40499: LD_INT 2
40501: EQUAL
40502: IFFALSE 40512
// viewRange := 16 ;
40504: LD_ADDR_VAR 0 7
40508: PUSH
40509: LD_INT 16
40511: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40512: LD_VAR 0 1
40516: PPUSH
40517: LD_VAR 0 2
40521: PPUSH
40522: LD_VAR 0 3
40526: PPUSH
40527: CALL_OW 297
40531: PUSH
40532: LD_VAR 0 5
40536: GREATER
40537: IFFALSE 40616
// begin ComMoveXY ( unit , x , y ) ;
40539: LD_VAR 0 1
40543: PPUSH
40544: LD_VAR 0 2
40548: PPUSH
40549: LD_VAR 0 3
40553: PPUSH
40554: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40558: LD_INT 35
40560: PPUSH
40561: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40565: LD_VAR 0 1
40569: PPUSH
40570: LD_VAR 0 2
40574: PPUSH
40575: LD_VAR 0 3
40579: PPUSH
40580: CALL 75643 0 3
40584: NOT
40585: IFFALSE 40589
// exit ;
40587: GO 40843
// until GetDistUnitXY ( unit , x , y ) < dist ;
40589: LD_VAR 0 1
40593: PPUSH
40594: LD_VAR 0 2
40598: PPUSH
40599: LD_VAR 0 3
40603: PPUSH
40604: CALL_OW 297
40608: PUSH
40609: LD_VAR 0 5
40613: LESS
40614: IFFALSE 40558
// end ; ComTurnXY ( unit , x , y ) ;
40616: LD_VAR 0 1
40620: PPUSH
40621: LD_VAR 0 2
40625: PPUSH
40626: LD_VAR 0 3
40630: PPUSH
40631: CALL_OW 118
// wait ( 5 ) ;
40635: LD_INT 5
40637: PPUSH
40638: CALL_OW 67
// _d := GetDir ( unit ) ;
40642: LD_ADDR_VAR 0 10
40646: PUSH
40647: LD_VAR 0 1
40651: PPUSH
40652: CALL_OW 254
40656: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40657: LD_ADDR_VAR 0 8
40661: PUSH
40662: LD_VAR 0 1
40666: PPUSH
40667: CALL_OW 250
40671: PPUSH
40672: LD_VAR 0 10
40676: PPUSH
40677: LD_VAR 0 5
40681: PPUSH
40682: CALL_OW 272
40686: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40687: LD_ADDR_VAR 0 9
40691: PUSH
40692: LD_VAR 0 1
40696: PPUSH
40697: CALL_OW 251
40701: PPUSH
40702: LD_VAR 0 10
40706: PPUSH
40707: LD_VAR 0 5
40711: PPUSH
40712: CALL_OW 273
40716: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40717: LD_VAR 0 8
40721: PPUSH
40722: LD_VAR 0 9
40726: PPUSH
40727: CALL_OW 488
40731: NOT
40732: IFFALSE 40736
// exit ;
40734: GO 40843
// ComAnimCustom ( unit , 1 ) ;
40736: LD_VAR 0 1
40740: PPUSH
40741: LD_INT 1
40743: PPUSH
40744: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40748: LD_VAR 0 8
40752: PPUSH
40753: LD_VAR 0 9
40757: PPUSH
40758: LD_VAR 0 6
40762: PPUSH
40763: LD_VAR 0 7
40767: PPUSH
40768: CALL_OW 330
// repeat wait ( 1 ) ;
40772: LD_INT 1
40774: PPUSH
40775: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40779: LD_VAR 0 1
40783: PPUSH
40784: CALL_OW 316
40788: PUSH
40789: LD_VAR 0 1
40793: PPUSH
40794: CALL_OW 314
40798: OR
40799: PUSH
40800: LD_VAR 0 1
40804: PPUSH
40805: CALL_OW 302
40809: NOT
40810: OR
40811: PUSH
40812: LD_VAR 0 1
40816: PPUSH
40817: CALL_OW 301
40821: OR
40822: IFFALSE 40772
// RemoveSeeing ( _x , _y , side ) ;
40824: LD_VAR 0 8
40828: PPUSH
40829: LD_VAR 0 9
40833: PPUSH
40834: LD_VAR 0 6
40838: PPUSH
40839: CALL_OW 331
// end ; end_of_file
40843: LD_VAR 0 4
40847: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40848: LD_INT 0
40850: PPUSH
40851: PPUSH
// if exist_mode then
40852: LD_VAR 0 2
40856: IFFALSE 40881
// unit := CreateCharacter ( prefix & ident ) else
40858: LD_ADDR_VAR 0 5
40862: PUSH
40863: LD_VAR 0 3
40867: PUSH
40868: LD_VAR 0 1
40872: STR
40873: PPUSH
40874: CALL_OW 34
40878: ST_TO_ADDR
40879: GO 40896
// unit := NewCharacter ( ident ) ;
40881: LD_ADDR_VAR 0 5
40885: PUSH
40886: LD_VAR 0 1
40890: PPUSH
40891: CALL_OW 25
40895: ST_TO_ADDR
// result := unit ;
40896: LD_ADDR_VAR 0 4
40900: PUSH
40901: LD_VAR 0 5
40905: ST_TO_ADDR
// end ;
40906: LD_VAR 0 4
40910: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40911: LD_INT 0
40913: PPUSH
40914: PPUSH
// if not side or not nation then
40915: LD_VAR 0 1
40919: NOT
40920: PUSH
40921: LD_VAR 0 2
40925: NOT
40926: OR
40927: IFFALSE 40931
// exit ;
40929: GO 41695
// case nation of nation_american :
40931: LD_VAR 0 2
40935: PUSH
40936: LD_INT 1
40938: DOUBLE
40939: EQUAL
40940: IFTRUE 40944
40942: GO 41158
40944: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40945: LD_ADDR_VAR 0 4
40949: PUSH
40950: LD_INT 35
40952: PUSH
40953: LD_INT 45
40955: PUSH
40956: LD_INT 46
40958: PUSH
40959: LD_INT 47
40961: PUSH
40962: LD_INT 82
40964: PUSH
40965: LD_INT 83
40967: PUSH
40968: LD_INT 84
40970: PUSH
40971: LD_INT 85
40973: PUSH
40974: LD_INT 86
40976: PUSH
40977: LD_INT 1
40979: PUSH
40980: LD_INT 2
40982: PUSH
40983: LD_INT 6
40985: PUSH
40986: LD_INT 15
40988: PUSH
40989: LD_INT 16
40991: PUSH
40992: LD_INT 7
40994: PUSH
40995: LD_INT 12
40997: PUSH
40998: LD_INT 13
41000: PUSH
41001: LD_INT 10
41003: PUSH
41004: LD_INT 14
41006: PUSH
41007: LD_INT 20
41009: PUSH
41010: LD_INT 21
41012: PUSH
41013: LD_INT 22
41015: PUSH
41016: LD_INT 25
41018: PUSH
41019: LD_INT 32
41021: PUSH
41022: LD_INT 27
41024: PUSH
41025: LD_INT 36
41027: PUSH
41028: LD_INT 69
41030: PUSH
41031: LD_INT 39
41033: PUSH
41034: LD_INT 34
41036: PUSH
41037: LD_INT 40
41039: PUSH
41040: LD_INT 48
41042: PUSH
41043: LD_INT 49
41045: PUSH
41046: LD_INT 50
41048: PUSH
41049: LD_INT 51
41051: PUSH
41052: LD_INT 52
41054: PUSH
41055: LD_INT 53
41057: PUSH
41058: LD_INT 54
41060: PUSH
41061: LD_INT 55
41063: PUSH
41064: LD_INT 56
41066: PUSH
41067: LD_INT 57
41069: PUSH
41070: LD_INT 58
41072: PUSH
41073: LD_INT 59
41075: PUSH
41076: LD_INT 60
41078: PUSH
41079: LD_INT 61
41081: PUSH
41082: LD_INT 62
41084: PUSH
41085: LD_INT 80
41087: PUSH
41088: LD_INT 82
41090: PUSH
41091: LD_INT 83
41093: PUSH
41094: LD_INT 84
41096: PUSH
41097: LD_INT 85
41099: PUSH
41100: LD_INT 86
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: ST_TO_ADDR
41156: GO 41619
41158: LD_INT 2
41160: DOUBLE
41161: EQUAL
41162: IFTRUE 41166
41164: GO 41388
41166: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
41167: LD_ADDR_VAR 0 4
41171: PUSH
41172: LD_INT 35
41174: PUSH
41175: LD_INT 45
41177: PUSH
41178: LD_INT 46
41180: PUSH
41181: LD_INT 47
41183: PUSH
41184: LD_INT 82
41186: PUSH
41187: LD_INT 83
41189: PUSH
41190: LD_INT 84
41192: PUSH
41193: LD_INT 85
41195: PUSH
41196: LD_INT 87
41198: PUSH
41199: LD_INT 70
41201: PUSH
41202: LD_INT 1
41204: PUSH
41205: LD_INT 11
41207: PUSH
41208: LD_INT 3
41210: PUSH
41211: LD_INT 4
41213: PUSH
41214: LD_INT 5
41216: PUSH
41217: LD_INT 6
41219: PUSH
41220: LD_INT 15
41222: PUSH
41223: LD_INT 18
41225: PUSH
41226: LD_INT 7
41228: PUSH
41229: LD_INT 17
41231: PUSH
41232: LD_INT 8
41234: PUSH
41235: LD_INT 20
41237: PUSH
41238: LD_INT 21
41240: PUSH
41241: LD_INT 22
41243: PUSH
41244: LD_INT 72
41246: PUSH
41247: LD_INT 26
41249: PUSH
41250: LD_INT 69
41252: PUSH
41253: LD_INT 39
41255: PUSH
41256: LD_INT 40
41258: PUSH
41259: LD_INT 41
41261: PUSH
41262: LD_INT 42
41264: PUSH
41265: LD_INT 43
41267: PUSH
41268: LD_INT 48
41270: PUSH
41271: LD_INT 49
41273: PUSH
41274: LD_INT 50
41276: PUSH
41277: LD_INT 51
41279: PUSH
41280: LD_INT 52
41282: PUSH
41283: LD_INT 53
41285: PUSH
41286: LD_INT 54
41288: PUSH
41289: LD_INT 55
41291: PUSH
41292: LD_INT 56
41294: PUSH
41295: LD_INT 60
41297: PUSH
41298: LD_INT 61
41300: PUSH
41301: LD_INT 62
41303: PUSH
41304: LD_INT 66
41306: PUSH
41307: LD_INT 67
41309: PUSH
41310: LD_INT 68
41312: PUSH
41313: LD_INT 81
41315: PUSH
41316: LD_INT 82
41318: PUSH
41319: LD_INT 83
41321: PUSH
41322: LD_INT 84
41324: PUSH
41325: LD_INT 85
41327: PUSH
41328: LD_INT 87
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: ST_TO_ADDR
41386: GO 41619
41388: LD_INT 3
41390: DOUBLE
41391: EQUAL
41392: IFTRUE 41396
41394: GO 41618
41396: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41397: LD_ADDR_VAR 0 4
41401: PUSH
41402: LD_INT 46
41404: PUSH
41405: LD_INT 47
41407: PUSH
41408: LD_INT 1
41410: PUSH
41411: LD_INT 2
41413: PUSH
41414: LD_INT 82
41416: PUSH
41417: LD_INT 83
41419: PUSH
41420: LD_INT 84
41422: PUSH
41423: LD_INT 85
41425: PUSH
41426: LD_INT 86
41428: PUSH
41429: LD_INT 11
41431: PUSH
41432: LD_INT 9
41434: PUSH
41435: LD_INT 20
41437: PUSH
41438: LD_INT 19
41440: PUSH
41441: LD_INT 21
41443: PUSH
41444: LD_INT 24
41446: PUSH
41447: LD_INT 22
41449: PUSH
41450: LD_INT 25
41452: PUSH
41453: LD_INT 28
41455: PUSH
41456: LD_INT 29
41458: PUSH
41459: LD_INT 30
41461: PUSH
41462: LD_INT 31
41464: PUSH
41465: LD_INT 37
41467: PUSH
41468: LD_INT 38
41470: PUSH
41471: LD_INT 32
41473: PUSH
41474: LD_INT 27
41476: PUSH
41477: LD_INT 33
41479: PUSH
41480: LD_INT 69
41482: PUSH
41483: LD_INT 39
41485: PUSH
41486: LD_INT 34
41488: PUSH
41489: LD_INT 40
41491: PUSH
41492: LD_INT 71
41494: PUSH
41495: LD_INT 23
41497: PUSH
41498: LD_INT 44
41500: PUSH
41501: LD_INT 48
41503: PUSH
41504: LD_INT 49
41506: PUSH
41507: LD_INT 50
41509: PUSH
41510: LD_INT 51
41512: PUSH
41513: LD_INT 52
41515: PUSH
41516: LD_INT 53
41518: PUSH
41519: LD_INT 54
41521: PUSH
41522: LD_INT 55
41524: PUSH
41525: LD_INT 56
41527: PUSH
41528: LD_INT 57
41530: PUSH
41531: LD_INT 58
41533: PUSH
41534: LD_INT 59
41536: PUSH
41537: LD_INT 63
41539: PUSH
41540: LD_INT 64
41542: PUSH
41543: LD_INT 65
41545: PUSH
41546: LD_INT 82
41548: PUSH
41549: LD_INT 83
41551: PUSH
41552: LD_INT 84
41554: PUSH
41555: LD_INT 85
41557: PUSH
41558: LD_INT 86
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: ST_TO_ADDR
41616: GO 41619
41618: POP
// if state > - 1 and state < 3 then
41619: LD_VAR 0 3
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: GREATER
41628: PUSH
41629: LD_VAR 0 3
41633: PUSH
41634: LD_INT 3
41636: LESS
41637: AND
41638: IFFALSE 41695
// for i in result do
41640: LD_ADDR_VAR 0 5
41644: PUSH
41645: LD_VAR 0 4
41649: PUSH
41650: FOR_IN
41651: IFFALSE 41693
// if GetTech ( i , side ) <> state then
41653: LD_VAR 0 5
41657: PPUSH
41658: LD_VAR 0 1
41662: PPUSH
41663: CALL_OW 321
41667: PUSH
41668: LD_VAR 0 3
41672: NONEQUAL
41673: IFFALSE 41691
// result := result diff i ;
41675: LD_ADDR_VAR 0 4
41679: PUSH
41680: LD_VAR 0 4
41684: PUSH
41685: LD_VAR 0 5
41689: DIFF
41690: ST_TO_ADDR
41691: GO 41650
41693: POP
41694: POP
// end ;
41695: LD_VAR 0 4
41699: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41700: LD_INT 0
41702: PPUSH
41703: PPUSH
41704: PPUSH
// result := true ;
41705: LD_ADDR_VAR 0 3
41709: PUSH
41710: LD_INT 1
41712: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41713: LD_ADDR_VAR 0 5
41717: PUSH
41718: LD_VAR 0 2
41722: PPUSH
41723: CALL_OW 480
41727: ST_TO_ADDR
// if not tmp then
41728: LD_VAR 0 5
41732: NOT
41733: IFFALSE 41737
// exit ;
41735: GO 41786
// for i in tmp do
41737: LD_ADDR_VAR 0 4
41741: PUSH
41742: LD_VAR 0 5
41746: PUSH
41747: FOR_IN
41748: IFFALSE 41784
// if GetTech ( i , side ) <> state_researched then
41750: LD_VAR 0 4
41754: PPUSH
41755: LD_VAR 0 1
41759: PPUSH
41760: CALL_OW 321
41764: PUSH
41765: LD_INT 2
41767: NONEQUAL
41768: IFFALSE 41782
// begin result := false ;
41770: LD_ADDR_VAR 0 3
41774: PUSH
41775: LD_INT 0
41777: ST_TO_ADDR
// exit ;
41778: POP
41779: POP
41780: GO 41786
// end ;
41782: GO 41747
41784: POP
41785: POP
// end ;
41786: LD_VAR 0 3
41790: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41791: LD_INT 0
41793: PPUSH
41794: PPUSH
41795: PPUSH
41796: PPUSH
41797: PPUSH
41798: PPUSH
41799: PPUSH
41800: PPUSH
41801: PPUSH
41802: PPUSH
41803: PPUSH
41804: PPUSH
41805: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41806: LD_VAR 0 1
41810: NOT
41811: PUSH
41812: LD_VAR 0 1
41816: PPUSH
41817: CALL_OW 257
41821: PUSH
41822: LD_INT 9
41824: NONEQUAL
41825: OR
41826: IFFALSE 41830
// exit ;
41828: GO 42403
// side := GetSide ( unit ) ;
41830: LD_ADDR_VAR 0 9
41834: PUSH
41835: LD_VAR 0 1
41839: PPUSH
41840: CALL_OW 255
41844: ST_TO_ADDR
// tech_space := tech_spacanom ;
41845: LD_ADDR_VAR 0 12
41849: PUSH
41850: LD_INT 29
41852: ST_TO_ADDR
// tech_time := tech_taurad ;
41853: LD_ADDR_VAR 0 13
41857: PUSH
41858: LD_INT 28
41860: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41861: LD_ADDR_VAR 0 11
41865: PUSH
41866: LD_VAR 0 1
41870: PPUSH
41871: CALL_OW 310
41875: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41876: LD_VAR 0 11
41880: PPUSH
41881: CALL_OW 247
41885: PUSH
41886: LD_INT 2
41888: EQUAL
41889: IFFALSE 41893
// exit ;
41891: GO 42403
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41893: LD_ADDR_VAR 0 8
41897: PUSH
41898: LD_INT 81
41900: PUSH
41901: LD_VAR 0 9
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 3
41912: PUSH
41913: LD_INT 21
41915: PUSH
41916: LD_INT 3
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PPUSH
41931: CALL_OW 69
41935: ST_TO_ADDR
// if not tmp then
41936: LD_VAR 0 8
41940: NOT
41941: IFFALSE 41945
// exit ;
41943: GO 42403
// if in_unit then
41945: LD_VAR 0 11
41949: IFFALSE 41973
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41951: LD_ADDR_VAR 0 10
41955: PUSH
41956: LD_VAR 0 8
41960: PPUSH
41961: LD_VAR 0 11
41965: PPUSH
41966: CALL_OW 74
41970: ST_TO_ADDR
41971: GO 41993
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41973: LD_ADDR_VAR 0 10
41977: PUSH
41978: LD_VAR 0 8
41982: PPUSH
41983: LD_VAR 0 1
41987: PPUSH
41988: CALL_OW 74
41992: ST_TO_ADDR
// if not enemy then
41993: LD_VAR 0 10
41997: NOT
41998: IFFALSE 42002
// exit ;
42000: GO 42403
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42002: LD_VAR 0 11
42006: PUSH
42007: LD_VAR 0 11
42011: PPUSH
42012: LD_VAR 0 10
42016: PPUSH
42017: CALL_OW 296
42021: PUSH
42022: LD_INT 13
42024: GREATER
42025: AND
42026: PUSH
42027: LD_VAR 0 1
42031: PPUSH
42032: LD_VAR 0 10
42036: PPUSH
42037: CALL_OW 296
42041: PUSH
42042: LD_INT 12
42044: GREATER
42045: OR
42046: IFFALSE 42050
// exit ;
42048: GO 42403
// missile := [ 1 ] ;
42050: LD_ADDR_VAR 0 14
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: EMPTY
42059: LIST
42060: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42061: LD_VAR 0 9
42065: PPUSH
42066: LD_VAR 0 12
42070: PPUSH
42071: CALL_OW 325
42075: IFFALSE 42104
// missile := Insert ( missile , missile + 1 , 2 ) ;
42077: LD_ADDR_VAR 0 14
42081: PUSH
42082: LD_VAR 0 14
42086: PPUSH
42087: LD_VAR 0 14
42091: PUSH
42092: LD_INT 1
42094: PLUS
42095: PPUSH
42096: LD_INT 2
42098: PPUSH
42099: CALL_OW 2
42103: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42104: LD_VAR 0 9
42108: PPUSH
42109: LD_VAR 0 13
42113: PPUSH
42114: CALL_OW 325
42118: PUSH
42119: LD_VAR 0 10
42123: PPUSH
42124: CALL_OW 255
42128: PPUSH
42129: LD_VAR 0 13
42133: PPUSH
42134: CALL_OW 325
42138: NOT
42139: AND
42140: IFFALSE 42169
// missile := Insert ( missile , missile + 1 , 3 ) ;
42142: LD_ADDR_VAR 0 14
42146: PUSH
42147: LD_VAR 0 14
42151: PPUSH
42152: LD_VAR 0 14
42156: PUSH
42157: LD_INT 1
42159: PLUS
42160: PPUSH
42161: LD_INT 3
42163: PPUSH
42164: CALL_OW 2
42168: ST_TO_ADDR
// if missile < 2 then
42169: LD_VAR 0 14
42173: PUSH
42174: LD_INT 2
42176: LESS
42177: IFFALSE 42181
// exit ;
42179: GO 42403
// x := GetX ( enemy ) ;
42181: LD_ADDR_VAR 0 4
42185: PUSH
42186: LD_VAR 0 10
42190: PPUSH
42191: CALL_OW 250
42195: ST_TO_ADDR
// y := GetY ( enemy ) ;
42196: LD_ADDR_VAR 0 5
42200: PUSH
42201: LD_VAR 0 10
42205: PPUSH
42206: CALL_OW 251
42210: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42211: LD_ADDR_VAR 0 6
42215: PUSH
42216: LD_VAR 0 4
42220: PUSH
42221: LD_INT 1
42223: NEG
42224: PPUSH
42225: LD_INT 1
42227: PPUSH
42228: CALL_OW 12
42232: PLUS
42233: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42234: LD_ADDR_VAR 0 7
42238: PUSH
42239: LD_VAR 0 5
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PPUSH
42248: LD_INT 1
42250: PPUSH
42251: CALL_OW 12
42255: PLUS
42256: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42257: LD_VAR 0 6
42261: PPUSH
42262: LD_VAR 0 7
42266: PPUSH
42267: CALL_OW 488
42271: NOT
42272: IFFALSE 42294
// begin _x := x ;
42274: LD_ADDR_VAR 0 6
42278: PUSH
42279: LD_VAR 0 4
42283: ST_TO_ADDR
// _y := y ;
42284: LD_ADDR_VAR 0 7
42288: PUSH
42289: LD_VAR 0 5
42293: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42294: LD_ADDR_VAR 0 3
42298: PUSH
42299: LD_INT 1
42301: PPUSH
42302: LD_VAR 0 14
42306: PPUSH
42307: CALL_OW 12
42311: ST_TO_ADDR
// case i of 1 :
42312: LD_VAR 0 3
42316: PUSH
42317: LD_INT 1
42319: DOUBLE
42320: EQUAL
42321: IFTRUE 42325
42323: GO 42342
42325: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42326: LD_VAR 0 1
42330: PPUSH
42331: LD_VAR 0 10
42335: PPUSH
42336: CALL_OW 115
42340: GO 42403
42342: LD_INT 2
42344: DOUBLE
42345: EQUAL
42346: IFTRUE 42350
42348: GO 42372
42350: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42351: LD_VAR 0 1
42355: PPUSH
42356: LD_VAR 0 6
42360: PPUSH
42361: LD_VAR 0 7
42365: PPUSH
42366: CALL_OW 153
42370: GO 42403
42372: LD_INT 3
42374: DOUBLE
42375: EQUAL
42376: IFTRUE 42380
42378: GO 42402
42380: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42381: LD_VAR 0 1
42385: PPUSH
42386: LD_VAR 0 6
42390: PPUSH
42391: LD_VAR 0 7
42395: PPUSH
42396: CALL_OW 154
42400: GO 42403
42402: POP
// end ;
42403: LD_VAR 0 2
42407: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42408: LD_INT 0
42410: PPUSH
42411: PPUSH
42412: PPUSH
42413: PPUSH
42414: PPUSH
42415: PPUSH
// if not unit or not building then
42416: LD_VAR 0 1
42420: NOT
42421: PUSH
42422: LD_VAR 0 2
42426: NOT
42427: OR
42428: IFFALSE 42432
// exit ;
42430: GO 42590
// x := GetX ( building ) ;
42432: LD_ADDR_VAR 0 5
42436: PUSH
42437: LD_VAR 0 2
42441: PPUSH
42442: CALL_OW 250
42446: ST_TO_ADDR
// y := GetY ( building ) ;
42447: LD_ADDR_VAR 0 6
42451: PUSH
42452: LD_VAR 0 2
42456: PPUSH
42457: CALL_OW 251
42461: ST_TO_ADDR
// for i = 0 to 5 do
42462: LD_ADDR_VAR 0 4
42466: PUSH
42467: DOUBLE
42468: LD_INT 0
42470: DEC
42471: ST_TO_ADDR
42472: LD_INT 5
42474: PUSH
42475: FOR_TO
42476: IFFALSE 42588
// begin _x := ShiftX ( x , i , 3 ) ;
42478: LD_ADDR_VAR 0 7
42482: PUSH
42483: LD_VAR 0 5
42487: PPUSH
42488: LD_VAR 0 4
42492: PPUSH
42493: LD_INT 3
42495: PPUSH
42496: CALL_OW 272
42500: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42501: LD_ADDR_VAR 0 8
42505: PUSH
42506: LD_VAR 0 6
42510: PPUSH
42511: LD_VAR 0 4
42515: PPUSH
42516: LD_INT 3
42518: PPUSH
42519: CALL_OW 273
42523: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42524: LD_VAR 0 7
42528: PPUSH
42529: LD_VAR 0 8
42533: PPUSH
42534: CALL_OW 488
42538: NOT
42539: IFFALSE 42543
// continue ;
42541: GO 42475
// if HexInfo ( _x , _y ) = 0 then
42543: LD_VAR 0 7
42547: PPUSH
42548: LD_VAR 0 8
42552: PPUSH
42553: CALL_OW 428
42557: PUSH
42558: LD_INT 0
42560: EQUAL
42561: IFFALSE 42586
// begin ComMoveXY ( unit , _x , _y ) ;
42563: LD_VAR 0 1
42567: PPUSH
42568: LD_VAR 0 7
42572: PPUSH
42573: LD_VAR 0 8
42577: PPUSH
42578: CALL_OW 111
// exit ;
42582: POP
42583: POP
42584: GO 42590
// end ; end ;
42586: GO 42475
42588: POP
42589: POP
// end ;
42590: LD_VAR 0 3
42594: RET
// export function ScanBase ( side , base_area ) ; begin
42595: LD_INT 0
42597: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42598: LD_ADDR_VAR 0 3
42602: PUSH
42603: LD_VAR 0 2
42607: PPUSH
42608: LD_INT 81
42610: PUSH
42611: LD_VAR 0 1
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PPUSH
42620: CALL_OW 70
42624: ST_TO_ADDR
// end ;
42625: LD_VAR 0 3
42629: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42630: LD_INT 0
42632: PPUSH
42633: PPUSH
42634: PPUSH
42635: PPUSH
// result := false ;
42636: LD_ADDR_VAR 0 2
42640: PUSH
42641: LD_INT 0
42643: ST_TO_ADDR
// side := GetSide ( unit ) ;
42644: LD_ADDR_VAR 0 3
42648: PUSH
42649: LD_VAR 0 1
42653: PPUSH
42654: CALL_OW 255
42658: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42659: LD_ADDR_VAR 0 4
42663: PUSH
42664: LD_VAR 0 1
42668: PPUSH
42669: CALL_OW 248
42673: ST_TO_ADDR
// case nat of 1 :
42674: LD_VAR 0 4
42678: PUSH
42679: LD_INT 1
42681: DOUBLE
42682: EQUAL
42683: IFTRUE 42687
42685: GO 42698
42687: POP
// tech := tech_lassight ; 2 :
42688: LD_ADDR_VAR 0 5
42692: PUSH
42693: LD_INT 12
42695: ST_TO_ADDR
42696: GO 42737
42698: LD_INT 2
42700: DOUBLE
42701: EQUAL
42702: IFTRUE 42706
42704: GO 42717
42706: POP
// tech := tech_mortar ; 3 :
42707: LD_ADDR_VAR 0 5
42711: PUSH
42712: LD_INT 41
42714: ST_TO_ADDR
42715: GO 42737
42717: LD_INT 3
42719: DOUBLE
42720: EQUAL
42721: IFTRUE 42725
42723: GO 42736
42725: POP
// tech := tech_bazooka ; end ;
42726: LD_ADDR_VAR 0 5
42730: PUSH
42731: LD_INT 44
42733: ST_TO_ADDR
42734: GO 42737
42736: POP
// if Researched ( side , tech ) then
42737: LD_VAR 0 3
42741: PPUSH
42742: LD_VAR 0 5
42746: PPUSH
42747: CALL_OW 325
42751: IFFALSE 42778
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42753: LD_ADDR_VAR 0 2
42757: PUSH
42758: LD_INT 5
42760: PUSH
42761: LD_INT 8
42763: PUSH
42764: LD_INT 9
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: LIST
42771: PUSH
42772: LD_VAR 0 4
42776: ARRAY
42777: ST_TO_ADDR
// end ;
42778: LD_VAR 0 2
42782: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42783: LD_INT 0
42785: PPUSH
42786: PPUSH
42787: PPUSH
// if not mines then
42788: LD_VAR 0 2
42792: NOT
42793: IFFALSE 42797
// exit ;
42795: GO 42941
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42797: LD_ADDR_VAR 0 5
42801: PUSH
42802: LD_INT 81
42804: PUSH
42805: LD_VAR 0 1
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 3
42816: PUSH
42817: LD_INT 21
42819: PUSH
42820: LD_INT 3
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PPUSH
42835: CALL_OW 69
42839: ST_TO_ADDR
// for i in mines do
42840: LD_ADDR_VAR 0 4
42844: PUSH
42845: LD_VAR 0 2
42849: PUSH
42850: FOR_IN
42851: IFFALSE 42939
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42853: LD_VAR 0 4
42857: PUSH
42858: LD_INT 1
42860: ARRAY
42861: PPUSH
42862: LD_VAR 0 4
42866: PUSH
42867: LD_INT 2
42869: ARRAY
42870: PPUSH
42871: CALL_OW 458
42875: NOT
42876: IFFALSE 42880
// continue ;
42878: GO 42850
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42880: LD_VAR 0 4
42884: PUSH
42885: LD_INT 1
42887: ARRAY
42888: PPUSH
42889: LD_VAR 0 4
42893: PUSH
42894: LD_INT 2
42896: ARRAY
42897: PPUSH
42898: CALL_OW 428
42902: PUSH
42903: LD_VAR 0 5
42907: IN
42908: IFFALSE 42937
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42910: LD_VAR 0 4
42914: PUSH
42915: LD_INT 1
42917: ARRAY
42918: PPUSH
42919: LD_VAR 0 4
42923: PUSH
42924: LD_INT 2
42926: ARRAY
42927: PPUSH
42928: LD_VAR 0 1
42932: PPUSH
42933: CALL_OW 456
// end ;
42937: GO 42850
42939: POP
42940: POP
// end ;
42941: LD_VAR 0 3
42945: RET
// export function Count ( array ) ; var i ; begin
42946: LD_INT 0
42948: PPUSH
42949: PPUSH
// result := 0 ;
42950: LD_ADDR_VAR 0 2
42954: PUSH
42955: LD_INT 0
42957: ST_TO_ADDR
// for i in array do
42958: LD_ADDR_VAR 0 3
42962: PUSH
42963: LD_VAR 0 1
42967: PUSH
42968: FOR_IN
42969: IFFALSE 42993
// if i then
42971: LD_VAR 0 3
42975: IFFALSE 42991
// result := result + 1 ;
42977: LD_ADDR_VAR 0 2
42981: PUSH
42982: LD_VAR 0 2
42986: PUSH
42987: LD_INT 1
42989: PLUS
42990: ST_TO_ADDR
42991: GO 42968
42993: POP
42994: POP
// end ;
42995: LD_VAR 0 2
42999: RET
// export function IsEmpty ( building ) ; begin
43000: LD_INT 0
43002: PPUSH
// if not building then
43003: LD_VAR 0 1
43007: NOT
43008: IFFALSE 43012
// exit ;
43010: GO 43055
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43012: LD_ADDR_VAR 0 2
43016: PUSH
43017: LD_VAR 0 1
43021: PUSH
43022: LD_INT 22
43024: PUSH
43025: LD_VAR 0 1
43029: PPUSH
43030: CALL_OW 255
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 58
43041: PUSH
43042: EMPTY
43043: LIST
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PPUSH
43049: CALL_OW 69
43053: IN
43054: ST_TO_ADDR
// end ;
43055: LD_VAR 0 2
43059: RET
// export function IsNotFull ( building ) ; begin
43060: LD_INT 0
43062: PPUSH
// if not building then
43063: LD_VAR 0 1
43067: NOT
43068: IFFALSE 43072
// exit ;
43070: GO 43091
// result := UnitsInside ( building ) < 6 ;
43072: LD_ADDR_VAR 0 2
43076: PUSH
43077: LD_VAR 0 1
43081: PPUSH
43082: CALL_OW 313
43086: PUSH
43087: LD_INT 6
43089: LESS
43090: ST_TO_ADDR
// end ;
43091: LD_VAR 0 2
43095: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43096: LD_INT 0
43098: PPUSH
43099: PPUSH
43100: PPUSH
43101: PPUSH
// tmp := [ ] ;
43102: LD_ADDR_VAR 0 3
43106: PUSH
43107: EMPTY
43108: ST_TO_ADDR
// list := [ ] ;
43109: LD_ADDR_VAR 0 5
43113: PUSH
43114: EMPTY
43115: ST_TO_ADDR
// for i = 16 to 25 do
43116: LD_ADDR_VAR 0 4
43120: PUSH
43121: DOUBLE
43122: LD_INT 16
43124: DEC
43125: ST_TO_ADDR
43126: LD_INT 25
43128: PUSH
43129: FOR_TO
43130: IFFALSE 43203
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43132: LD_ADDR_VAR 0 3
43136: PUSH
43137: LD_VAR 0 3
43141: PUSH
43142: LD_INT 22
43144: PUSH
43145: LD_VAR 0 1
43149: PPUSH
43150: CALL_OW 255
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 91
43161: PUSH
43162: LD_VAR 0 1
43166: PUSH
43167: LD_INT 6
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 30
43177: PUSH
43178: LD_VAR 0 4
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: LIST
43191: PUSH
43192: EMPTY
43193: LIST
43194: PPUSH
43195: CALL_OW 69
43199: ADD
43200: ST_TO_ADDR
43201: GO 43129
43203: POP
43204: POP
// for i = 1 to tmp do
43205: LD_ADDR_VAR 0 4
43209: PUSH
43210: DOUBLE
43211: LD_INT 1
43213: DEC
43214: ST_TO_ADDR
43215: LD_VAR 0 3
43219: PUSH
43220: FOR_TO
43221: IFFALSE 43309
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43223: LD_ADDR_VAR 0 5
43227: PUSH
43228: LD_VAR 0 5
43232: PUSH
43233: LD_VAR 0 3
43237: PUSH
43238: LD_VAR 0 4
43242: ARRAY
43243: PPUSH
43244: CALL_OW 266
43248: PUSH
43249: LD_VAR 0 3
43253: PUSH
43254: LD_VAR 0 4
43258: ARRAY
43259: PPUSH
43260: CALL_OW 250
43264: PUSH
43265: LD_VAR 0 3
43269: PUSH
43270: LD_VAR 0 4
43274: ARRAY
43275: PPUSH
43276: CALL_OW 251
43280: PUSH
43281: LD_VAR 0 3
43285: PUSH
43286: LD_VAR 0 4
43290: ARRAY
43291: PPUSH
43292: CALL_OW 254
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: PUSH
43303: EMPTY
43304: LIST
43305: ADD
43306: ST_TO_ADDR
43307: GO 43220
43309: POP
43310: POP
// result := list ;
43311: LD_ADDR_VAR 0 2
43315: PUSH
43316: LD_VAR 0 5
43320: ST_TO_ADDR
// end ;
43321: LD_VAR 0 2
43325: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43326: LD_INT 0
43328: PPUSH
43329: PPUSH
43330: PPUSH
43331: PPUSH
43332: PPUSH
43333: PPUSH
43334: PPUSH
// if not factory then
43335: LD_VAR 0 1
43339: NOT
43340: IFFALSE 43344
// exit ;
43342: GO 43937
// if control = control_apeman then
43344: LD_VAR 0 4
43348: PUSH
43349: LD_INT 5
43351: EQUAL
43352: IFFALSE 43461
// begin tmp := UnitsInside ( factory ) ;
43354: LD_ADDR_VAR 0 8
43358: PUSH
43359: LD_VAR 0 1
43363: PPUSH
43364: CALL_OW 313
43368: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43369: LD_VAR 0 8
43373: PPUSH
43374: LD_INT 25
43376: PUSH
43377: LD_INT 12
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PPUSH
43384: CALL_OW 72
43388: NOT
43389: IFFALSE 43399
// control := control_manual ;
43391: LD_ADDR_VAR 0 4
43395: PUSH
43396: LD_INT 1
43398: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43399: LD_ADDR_VAR 0 8
43403: PUSH
43404: LD_VAR 0 1
43408: PPUSH
43409: CALL 43096 0 1
43413: ST_TO_ADDR
// if tmp then
43414: LD_VAR 0 8
43418: IFFALSE 43461
// begin for i in tmp do
43420: LD_ADDR_VAR 0 7
43424: PUSH
43425: LD_VAR 0 8
43429: PUSH
43430: FOR_IN
43431: IFFALSE 43459
// if i [ 1 ] = b_ext_radio then
43433: LD_VAR 0 7
43437: PUSH
43438: LD_INT 1
43440: ARRAY
43441: PUSH
43442: LD_INT 22
43444: EQUAL
43445: IFFALSE 43457
// begin control := control_remote ;
43447: LD_ADDR_VAR 0 4
43451: PUSH
43452: LD_INT 2
43454: ST_TO_ADDR
// break ;
43455: GO 43459
// end ;
43457: GO 43430
43459: POP
43460: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43461: LD_VAR 0 1
43465: PPUSH
43466: LD_VAR 0 2
43470: PPUSH
43471: LD_VAR 0 3
43475: PPUSH
43476: LD_VAR 0 4
43480: PPUSH
43481: LD_VAR 0 5
43485: PPUSH
43486: CALL_OW 448
43490: IFFALSE 43525
// begin result := [ chassis , engine , control , weapon ] ;
43492: LD_ADDR_VAR 0 6
43496: PUSH
43497: LD_VAR 0 2
43501: PUSH
43502: LD_VAR 0 3
43506: PUSH
43507: LD_VAR 0 4
43511: PUSH
43512: LD_VAR 0 5
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: ST_TO_ADDR
// exit ;
43523: GO 43937
// end ; _chassis := AvailableChassisList ( factory ) ;
43525: LD_ADDR_VAR 0 9
43529: PUSH
43530: LD_VAR 0 1
43534: PPUSH
43535: CALL_OW 475
43539: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43540: LD_ADDR_VAR 0 11
43544: PUSH
43545: LD_VAR 0 1
43549: PPUSH
43550: CALL_OW 476
43554: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43555: LD_ADDR_VAR 0 12
43559: PUSH
43560: LD_VAR 0 1
43564: PPUSH
43565: CALL_OW 477
43569: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43570: LD_ADDR_VAR 0 10
43574: PUSH
43575: LD_VAR 0 1
43579: PPUSH
43580: CALL_OW 478
43584: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43585: LD_VAR 0 9
43589: NOT
43590: PUSH
43591: LD_VAR 0 11
43595: NOT
43596: OR
43597: PUSH
43598: LD_VAR 0 12
43602: NOT
43603: OR
43604: PUSH
43605: LD_VAR 0 10
43609: NOT
43610: OR
43611: IFFALSE 43646
// begin result := [ chassis , engine , control , weapon ] ;
43613: LD_ADDR_VAR 0 6
43617: PUSH
43618: LD_VAR 0 2
43622: PUSH
43623: LD_VAR 0 3
43627: PUSH
43628: LD_VAR 0 4
43632: PUSH
43633: LD_VAR 0 5
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: ST_TO_ADDR
// exit ;
43644: GO 43937
// end ; if not chassis in _chassis then
43646: LD_VAR 0 2
43650: PUSH
43651: LD_VAR 0 9
43655: IN
43656: NOT
43657: IFFALSE 43683
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43659: LD_ADDR_VAR 0 2
43663: PUSH
43664: LD_VAR 0 9
43668: PUSH
43669: LD_INT 1
43671: PPUSH
43672: LD_VAR 0 9
43676: PPUSH
43677: CALL_OW 12
43681: ARRAY
43682: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43683: LD_VAR 0 2
43687: PPUSH
43688: LD_VAR 0 3
43692: PPUSH
43693: CALL 43942 0 2
43697: NOT
43698: IFFALSE 43757
// repeat engine := _engine [ 1 ] ;
43700: LD_ADDR_VAR 0 3
43704: PUSH
43705: LD_VAR 0 11
43709: PUSH
43710: LD_INT 1
43712: ARRAY
43713: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43714: LD_ADDR_VAR 0 11
43718: PUSH
43719: LD_VAR 0 11
43723: PPUSH
43724: LD_INT 1
43726: PPUSH
43727: CALL_OW 3
43731: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43732: LD_VAR 0 2
43736: PPUSH
43737: LD_VAR 0 3
43741: PPUSH
43742: CALL 43942 0 2
43746: PUSH
43747: LD_VAR 0 11
43751: PUSH
43752: EMPTY
43753: EQUAL
43754: OR
43755: IFFALSE 43700
// if not control in _control then
43757: LD_VAR 0 4
43761: PUSH
43762: LD_VAR 0 12
43766: IN
43767: NOT
43768: IFFALSE 43794
// control := _control [ rand ( 1 , _control ) ] ;
43770: LD_ADDR_VAR 0 4
43774: PUSH
43775: LD_VAR 0 12
43779: PUSH
43780: LD_INT 1
43782: PPUSH
43783: LD_VAR 0 12
43787: PPUSH
43788: CALL_OW 12
43792: ARRAY
43793: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43794: LD_VAR 0 2
43798: PPUSH
43799: LD_VAR 0 5
43803: PPUSH
43804: CALL 44162 0 2
43808: NOT
43809: IFFALSE 43868
// repeat weapon := _weapon [ 1 ] ;
43811: LD_ADDR_VAR 0 5
43815: PUSH
43816: LD_VAR 0 10
43820: PUSH
43821: LD_INT 1
43823: ARRAY
43824: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43825: LD_ADDR_VAR 0 10
43829: PUSH
43830: LD_VAR 0 10
43834: PPUSH
43835: LD_INT 1
43837: PPUSH
43838: CALL_OW 3
43842: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43843: LD_VAR 0 2
43847: PPUSH
43848: LD_VAR 0 5
43852: PPUSH
43853: CALL 44162 0 2
43857: PUSH
43858: LD_VAR 0 10
43862: PUSH
43863: EMPTY
43864: EQUAL
43865: OR
43866: IFFALSE 43811
// result := [ ] ;
43868: LD_ADDR_VAR 0 6
43872: PUSH
43873: EMPTY
43874: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43875: LD_VAR 0 1
43879: PPUSH
43880: LD_VAR 0 2
43884: PPUSH
43885: LD_VAR 0 3
43889: PPUSH
43890: LD_VAR 0 4
43894: PPUSH
43895: LD_VAR 0 5
43899: PPUSH
43900: CALL_OW 448
43904: IFFALSE 43937
// result := [ chassis , engine , control , weapon ] ;
43906: LD_ADDR_VAR 0 6
43910: PUSH
43911: LD_VAR 0 2
43915: PUSH
43916: LD_VAR 0 3
43920: PUSH
43921: LD_VAR 0 4
43925: PUSH
43926: LD_VAR 0 5
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: ST_TO_ADDR
// end ;
43937: LD_VAR 0 6
43941: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43942: LD_INT 0
43944: PPUSH
// if not chassis or not engine then
43945: LD_VAR 0 1
43949: NOT
43950: PUSH
43951: LD_VAR 0 2
43955: NOT
43956: OR
43957: IFFALSE 43961
// exit ;
43959: GO 44157
// case engine of engine_solar :
43961: LD_VAR 0 2
43965: PUSH
43966: LD_INT 2
43968: DOUBLE
43969: EQUAL
43970: IFTRUE 43974
43972: GO 44012
43974: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43975: LD_ADDR_VAR 0 3
43979: PUSH
43980: LD_INT 11
43982: PUSH
43983: LD_INT 12
43985: PUSH
43986: LD_INT 13
43988: PUSH
43989: LD_INT 14
43991: PUSH
43992: LD_INT 1
43994: PUSH
43995: LD_INT 2
43997: PUSH
43998: LD_INT 3
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: ST_TO_ADDR
44010: GO 44141
44012: LD_INT 1
44014: DOUBLE
44015: EQUAL
44016: IFTRUE 44020
44018: GO 44082
44020: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44021: LD_ADDR_VAR 0 3
44025: PUSH
44026: LD_INT 11
44028: PUSH
44029: LD_INT 12
44031: PUSH
44032: LD_INT 13
44034: PUSH
44035: LD_INT 14
44037: PUSH
44038: LD_INT 1
44040: PUSH
44041: LD_INT 2
44043: PUSH
44044: LD_INT 3
44046: PUSH
44047: LD_INT 4
44049: PUSH
44050: LD_INT 5
44052: PUSH
44053: LD_INT 21
44055: PUSH
44056: LD_INT 23
44058: PUSH
44059: LD_INT 22
44061: PUSH
44062: LD_INT 24
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: ST_TO_ADDR
44080: GO 44141
44082: LD_INT 3
44084: DOUBLE
44085: EQUAL
44086: IFTRUE 44090
44088: GO 44140
44090: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44091: LD_ADDR_VAR 0 3
44095: PUSH
44096: LD_INT 13
44098: PUSH
44099: LD_INT 14
44101: PUSH
44102: LD_INT 2
44104: PUSH
44105: LD_INT 3
44107: PUSH
44108: LD_INT 4
44110: PUSH
44111: LD_INT 5
44113: PUSH
44114: LD_INT 21
44116: PUSH
44117: LD_INT 22
44119: PUSH
44120: LD_INT 23
44122: PUSH
44123: LD_INT 24
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: ST_TO_ADDR
44138: GO 44141
44140: POP
// result := ( chassis in result ) ;
44141: LD_ADDR_VAR 0 3
44145: PUSH
44146: LD_VAR 0 1
44150: PUSH
44151: LD_VAR 0 3
44155: IN
44156: ST_TO_ADDR
// end ;
44157: LD_VAR 0 3
44161: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44162: LD_INT 0
44164: PPUSH
// if not chassis or not weapon then
44165: LD_VAR 0 1
44169: NOT
44170: PUSH
44171: LD_VAR 0 2
44175: NOT
44176: OR
44177: IFFALSE 44181
// exit ;
44179: GO 45207
// case weapon of us_machine_gun :
44181: LD_VAR 0 2
44185: PUSH
44186: LD_INT 2
44188: DOUBLE
44189: EQUAL
44190: IFTRUE 44194
44192: GO 44224
44194: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44195: LD_ADDR_VAR 0 3
44199: PUSH
44200: LD_INT 1
44202: PUSH
44203: LD_INT 2
44205: PUSH
44206: LD_INT 3
44208: PUSH
44209: LD_INT 4
44211: PUSH
44212: LD_INT 5
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: ST_TO_ADDR
44222: GO 45191
44224: LD_INT 3
44226: DOUBLE
44227: EQUAL
44228: IFTRUE 44232
44230: GO 44262
44232: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44233: LD_ADDR_VAR 0 3
44237: PUSH
44238: LD_INT 1
44240: PUSH
44241: LD_INT 2
44243: PUSH
44244: LD_INT 3
44246: PUSH
44247: LD_INT 4
44249: PUSH
44250: LD_INT 5
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: ST_TO_ADDR
44260: GO 45191
44262: LD_INT 11
44264: DOUBLE
44265: EQUAL
44266: IFTRUE 44270
44268: GO 44300
44270: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44271: LD_ADDR_VAR 0 3
44275: PUSH
44276: LD_INT 1
44278: PUSH
44279: LD_INT 2
44281: PUSH
44282: LD_INT 3
44284: PUSH
44285: LD_INT 4
44287: PUSH
44288: LD_INT 5
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: ST_TO_ADDR
44298: GO 45191
44300: LD_INT 4
44302: DOUBLE
44303: EQUAL
44304: IFTRUE 44308
44306: GO 44334
44308: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44309: LD_ADDR_VAR 0 3
44313: PUSH
44314: LD_INT 2
44316: PUSH
44317: LD_INT 3
44319: PUSH
44320: LD_INT 4
44322: PUSH
44323: LD_INT 5
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: ST_TO_ADDR
44332: GO 45191
44334: LD_INT 5
44336: DOUBLE
44337: EQUAL
44338: IFTRUE 44342
44340: GO 44368
44342: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44343: LD_ADDR_VAR 0 3
44347: PUSH
44348: LD_INT 2
44350: PUSH
44351: LD_INT 3
44353: PUSH
44354: LD_INT 4
44356: PUSH
44357: LD_INT 5
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: ST_TO_ADDR
44366: GO 45191
44368: LD_INT 9
44370: DOUBLE
44371: EQUAL
44372: IFTRUE 44376
44374: GO 44402
44376: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44377: LD_ADDR_VAR 0 3
44381: PUSH
44382: LD_INT 2
44384: PUSH
44385: LD_INT 3
44387: PUSH
44388: LD_INT 4
44390: PUSH
44391: LD_INT 5
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: ST_TO_ADDR
44400: GO 45191
44402: LD_INT 7
44404: DOUBLE
44405: EQUAL
44406: IFTRUE 44410
44408: GO 44436
44410: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44411: LD_ADDR_VAR 0 3
44415: PUSH
44416: LD_INT 2
44418: PUSH
44419: LD_INT 3
44421: PUSH
44422: LD_INT 4
44424: PUSH
44425: LD_INT 5
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: ST_TO_ADDR
44434: GO 45191
44436: LD_INT 12
44438: DOUBLE
44439: EQUAL
44440: IFTRUE 44444
44442: GO 44470
44444: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44445: LD_ADDR_VAR 0 3
44449: PUSH
44450: LD_INT 2
44452: PUSH
44453: LD_INT 3
44455: PUSH
44456: LD_INT 4
44458: PUSH
44459: LD_INT 5
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: ST_TO_ADDR
44468: GO 45191
44470: LD_INT 13
44472: DOUBLE
44473: EQUAL
44474: IFTRUE 44478
44476: GO 44504
44478: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44479: LD_ADDR_VAR 0 3
44483: PUSH
44484: LD_INT 2
44486: PUSH
44487: LD_INT 3
44489: PUSH
44490: LD_INT 4
44492: PUSH
44493: LD_INT 5
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: ST_TO_ADDR
44502: GO 45191
44504: LD_INT 14
44506: DOUBLE
44507: EQUAL
44508: IFTRUE 44512
44510: GO 44530
44512: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44513: LD_ADDR_VAR 0 3
44517: PUSH
44518: LD_INT 4
44520: PUSH
44521: LD_INT 5
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: ST_TO_ADDR
44528: GO 45191
44530: LD_INT 6
44532: DOUBLE
44533: EQUAL
44534: IFTRUE 44538
44536: GO 44556
44538: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44539: LD_ADDR_VAR 0 3
44543: PUSH
44544: LD_INT 4
44546: PUSH
44547: LD_INT 5
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: ST_TO_ADDR
44554: GO 45191
44556: LD_INT 10
44558: DOUBLE
44559: EQUAL
44560: IFTRUE 44564
44562: GO 44582
44564: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44565: LD_ADDR_VAR 0 3
44569: PUSH
44570: LD_INT 4
44572: PUSH
44573: LD_INT 5
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: ST_TO_ADDR
44580: GO 45191
44582: LD_INT 22
44584: DOUBLE
44585: EQUAL
44586: IFTRUE 44590
44588: GO 44616
44590: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44591: LD_ADDR_VAR 0 3
44595: PUSH
44596: LD_INT 11
44598: PUSH
44599: LD_INT 12
44601: PUSH
44602: LD_INT 13
44604: PUSH
44605: LD_INT 14
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: ST_TO_ADDR
44614: GO 45191
44616: LD_INT 23
44618: DOUBLE
44619: EQUAL
44620: IFTRUE 44624
44622: GO 44650
44624: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44625: LD_ADDR_VAR 0 3
44629: PUSH
44630: LD_INT 11
44632: PUSH
44633: LD_INT 12
44635: PUSH
44636: LD_INT 13
44638: PUSH
44639: LD_INT 14
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: ST_TO_ADDR
44648: GO 45191
44650: LD_INT 24
44652: DOUBLE
44653: EQUAL
44654: IFTRUE 44658
44656: GO 44684
44658: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44659: LD_ADDR_VAR 0 3
44663: PUSH
44664: LD_INT 11
44666: PUSH
44667: LD_INT 12
44669: PUSH
44670: LD_INT 13
44672: PUSH
44673: LD_INT 14
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: ST_TO_ADDR
44682: GO 45191
44684: LD_INT 30
44686: DOUBLE
44687: EQUAL
44688: IFTRUE 44692
44690: GO 44718
44692: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44693: LD_ADDR_VAR 0 3
44697: PUSH
44698: LD_INT 11
44700: PUSH
44701: LD_INT 12
44703: PUSH
44704: LD_INT 13
44706: PUSH
44707: LD_INT 14
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: ST_TO_ADDR
44716: GO 45191
44718: LD_INT 25
44720: DOUBLE
44721: EQUAL
44722: IFTRUE 44726
44724: GO 44744
44726: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44727: LD_ADDR_VAR 0 3
44731: PUSH
44732: LD_INT 13
44734: PUSH
44735: LD_INT 14
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: ST_TO_ADDR
44742: GO 45191
44744: LD_INT 27
44746: DOUBLE
44747: EQUAL
44748: IFTRUE 44752
44750: GO 44770
44752: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44753: LD_ADDR_VAR 0 3
44757: PUSH
44758: LD_INT 13
44760: PUSH
44761: LD_INT 14
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: ST_TO_ADDR
44768: GO 45191
44770: LD_INT 28
44772: DOUBLE
44773: EQUAL
44774: IFTRUE 44778
44776: GO 44796
44778: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44779: LD_ADDR_VAR 0 3
44783: PUSH
44784: LD_INT 13
44786: PUSH
44787: LD_INT 14
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: ST_TO_ADDR
44794: GO 45191
44796: LD_INT 29
44798: DOUBLE
44799: EQUAL
44800: IFTRUE 44804
44802: GO 44822
44804: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44805: LD_ADDR_VAR 0 3
44809: PUSH
44810: LD_INT 13
44812: PUSH
44813: LD_INT 14
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: ST_TO_ADDR
44820: GO 45191
44822: LD_INT 31
44824: DOUBLE
44825: EQUAL
44826: IFTRUE 44830
44828: GO 44848
44830: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44831: LD_ADDR_VAR 0 3
44835: PUSH
44836: LD_INT 13
44838: PUSH
44839: LD_INT 14
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: ST_TO_ADDR
44846: GO 45191
44848: LD_INT 26
44850: DOUBLE
44851: EQUAL
44852: IFTRUE 44856
44854: GO 44874
44856: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44857: LD_ADDR_VAR 0 3
44861: PUSH
44862: LD_INT 13
44864: PUSH
44865: LD_INT 14
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: ST_TO_ADDR
44872: GO 45191
44874: LD_INT 42
44876: DOUBLE
44877: EQUAL
44878: IFTRUE 44882
44880: GO 44908
44882: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44883: LD_ADDR_VAR 0 3
44887: PUSH
44888: LD_INT 21
44890: PUSH
44891: LD_INT 22
44893: PUSH
44894: LD_INT 23
44896: PUSH
44897: LD_INT 24
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: ST_TO_ADDR
44906: GO 45191
44908: LD_INT 43
44910: DOUBLE
44911: EQUAL
44912: IFTRUE 44916
44914: GO 44942
44916: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44917: LD_ADDR_VAR 0 3
44921: PUSH
44922: LD_INT 21
44924: PUSH
44925: LD_INT 22
44927: PUSH
44928: LD_INT 23
44930: PUSH
44931: LD_INT 24
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: ST_TO_ADDR
44940: GO 45191
44942: LD_INT 44
44944: DOUBLE
44945: EQUAL
44946: IFTRUE 44950
44948: GO 44976
44950: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44951: LD_ADDR_VAR 0 3
44955: PUSH
44956: LD_INT 21
44958: PUSH
44959: LD_INT 22
44961: PUSH
44962: LD_INT 23
44964: PUSH
44965: LD_INT 24
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: ST_TO_ADDR
44974: GO 45191
44976: LD_INT 45
44978: DOUBLE
44979: EQUAL
44980: IFTRUE 44984
44982: GO 45010
44984: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44985: LD_ADDR_VAR 0 3
44989: PUSH
44990: LD_INT 21
44992: PUSH
44993: LD_INT 22
44995: PUSH
44996: LD_INT 23
44998: PUSH
44999: LD_INT 24
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: ST_TO_ADDR
45008: GO 45191
45010: LD_INT 49
45012: DOUBLE
45013: EQUAL
45014: IFTRUE 45018
45016: GO 45044
45018: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45019: LD_ADDR_VAR 0 3
45023: PUSH
45024: LD_INT 21
45026: PUSH
45027: LD_INT 22
45029: PUSH
45030: LD_INT 23
45032: PUSH
45033: LD_INT 24
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: ST_TO_ADDR
45042: GO 45191
45044: LD_INT 51
45046: DOUBLE
45047: EQUAL
45048: IFTRUE 45052
45050: GO 45078
45052: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45053: LD_ADDR_VAR 0 3
45057: PUSH
45058: LD_INT 21
45060: PUSH
45061: LD_INT 22
45063: PUSH
45064: LD_INT 23
45066: PUSH
45067: LD_INT 24
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: ST_TO_ADDR
45076: GO 45191
45078: LD_INT 52
45080: DOUBLE
45081: EQUAL
45082: IFTRUE 45086
45084: GO 45112
45086: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45087: LD_ADDR_VAR 0 3
45091: PUSH
45092: LD_INT 21
45094: PUSH
45095: LD_INT 22
45097: PUSH
45098: LD_INT 23
45100: PUSH
45101: LD_INT 24
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: ST_TO_ADDR
45110: GO 45191
45112: LD_INT 53
45114: DOUBLE
45115: EQUAL
45116: IFTRUE 45120
45118: GO 45138
45120: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45121: LD_ADDR_VAR 0 3
45125: PUSH
45126: LD_INT 23
45128: PUSH
45129: LD_INT 24
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: ST_TO_ADDR
45136: GO 45191
45138: LD_INT 46
45140: DOUBLE
45141: EQUAL
45142: IFTRUE 45146
45144: GO 45164
45146: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45147: LD_ADDR_VAR 0 3
45151: PUSH
45152: LD_INT 23
45154: PUSH
45155: LD_INT 24
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: ST_TO_ADDR
45162: GO 45191
45164: LD_INT 47
45166: DOUBLE
45167: EQUAL
45168: IFTRUE 45172
45170: GO 45190
45172: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45173: LD_ADDR_VAR 0 3
45177: PUSH
45178: LD_INT 23
45180: PUSH
45181: LD_INT 24
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: ST_TO_ADDR
45188: GO 45191
45190: POP
// result := ( chassis in result ) ;
45191: LD_ADDR_VAR 0 3
45195: PUSH
45196: LD_VAR 0 1
45200: PUSH
45201: LD_VAR 0 3
45205: IN
45206: ST_TO_ADDR
// end ;
45207: LD_VAR 0 3
45211: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45212: LD_INT 0
45214: PPUSH
45215: PPUSH
45216: PPUSH
45217: PPUSH
45218: PPUSH
45219: PPUSH
45220: PPUSH
// result := array ;
45221: LD_ADDR_VAR 0 5
45225: PUSH
45226: LD_VAR 0 1
45230: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45231: LD_VAR 0 1
45235: NOT
45236: PUSH
45237: LD_VAR 0 2
45241: NOT
45242: OR
45243: PUSH
45244: LD_VAR 0 3
45248: NOT
45249: OR
45250: PUSH
45251: LD_VAR 0 2
45255: PUSH
45256: LD_VAR 0 1
45260: GREATER
45261: OR
45262: PUSH
45263: LD_VAR 0 3
45267: PUSH
45268: LD_VAR 0 1
45272: GREATER
45273: OR
45274: IFFALSE 45278
// exit ;
45276: GO 45574
// if direction then
45278: LD_VAR 0 4
45282: IFFALSE 45346
// begin d := 1 ;
45284: LD_ADDR_VAR 0 9
45288: PUSH
45289: LD_INT 1
45291: ST_TO_ADDR
// if i_from > i_to then
45292: LD_VAR 0 2
45296: PUSH
45297: LD_VAR 0 3
45301: GREATER
45302: IFFALSE 45328
// length := ( array - i_from ) + i_to else
45304: LD_ADDR_VAR 0 11
45308: PUSH
45309: LD_VAR 0 1
45313: PUSH
45314: LD_VAR 0 2
45318: MINUS
45319: PUSH
45320: LD_VAR 0 3
45324: PLUS
45325: ST_TO_ADDR
45326: GO 45344
// length := i_to - i_from ;
45328: LD_ADDR_VAR 0 11
45332: PUSH
45333: LD_VAR 0 3
45337: PUSH
45338: LD_VAR 0 2
45342: MINUS
45343: ST_TO_ADDR
// end else
45344: GO 45407
// begin d := - 1 ;
45346: LD_ADDR_VAR 0 9
45350: PUSH
45351: LD_INT 1
45353: NEG
45354: ST_TO_ADDR
// if i_from > i_to then
45355: LD_VAR 0 2
45359: PUSH
45360: LD_VAR 0 3
45364: GREATER
45365: IFFALSE 45385
// length := i_from - i_to else
45367: LD_ADDR_VAR 0 11
45371: PUSH
45372: LD_VAR 0 2
45376: PUSH
45377: LD_VAR 0 3
45381: MINUS
45382: ST_TO_ADDR
45383: GO 45407
// length := ( array - i_to ) + i_from ;
45385: LD_ADDR_VAR 0 11
45389: PUSH
45390: LD_VAR 0 1
45394: PUSH
45395: LD_VAR 0 3
45399: MINUS
45400: PUSH
45401: LD_VAR 0 2
45405: PLUS
45406: ST_TO_ADDR
// end ; if not length then
45407: LD_VAR 0 11
45411: NOT
45412: IFFALSE 45416
// exit ;
45414: GO 45574
// tmp := array ;
45416: LD_ADDR_VAR 0 10
45420: PUSH
45421: LD_VAR 0 1
45425: ST_TO_ADDR
// for i = 1 to length do
45426: LD_ADDR_VAR 0 6
45430: PUSH
45431: DOUBLE
45432: LD_INT 1
45434: DEC
45435: ST_TO_ADDR
45436: LD_VAR 0 11
45440: PUSH
45441: FOR_TO
45442: IFFALSE 45562
// begin for j = 1 to array do
45444: LD_ADDR_VAR 0 7
45448: PUSH
45449: DOUBLE
45450: LD_INT 1
45452: DEC
45453: ST_TO_ADDR
45454: LD_VAR 0 1
45458: PUSH
45459: FOR_TO
45460: IFFALSE 45548
// begin k := j + d ;
45462: LD_ADDR_VAR 0 8
45466: PUSH
45467: LD_VAR 0 7
45471: PUSH
45472: LD_VAR 0 9
45476: PLUS
45477: ST_TO_ADDR
// if k > array then
45478: LD_VAR 0 8
45482: PUSH
45483: LD_VAR 0 1
45487: GREATER
45488: IFFALSE 45498
// k := 1 ;
45490: LD_ADDR_VAR 0 8
45494: PUSH
45495: LD_INT 1
45497: ST_TO_ADDR
// if not k then
45498: LD_VAR 0 8
45502: NOT
45503: IFFALSE 45515
// k := array ;
45505: LD_ADDR_VAR 0 8
45509: PUSH
45510: LD_VAR 0 1
45514: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45515: LD_ADDR_VAR 0 10
45519: PUSH
45520: LD_VAR 0 10
45524: PPUSH
45525: LD_VAR 0 8
45529: PPUSH
45530: LD_VAR 0 1
45534: PUSH
45535: LD_VAR 0 7
45539: ARRAY
45540: PPUSH
45541: CALL_OW 1
45545: ST_TO_ADDR
// end ;
45546: GO 45459
45548: POP
45549: POP
// array := tmp ;
45550: LD_ADDR_VAR 0 1
45554: PUSH
45555: LD_VAR 0 10
45559: ST_TO_ADDR
// end ;
45560: GO 45441
45562: POP
45563: POP
// result := array ;
45564: LD_ADDR_VAR 0 5
45568: PUSH
45569: LD_VAR 0 1
45573: ST_TO_ADDR
// end ;
45574: LD_VAR 0 5
45578: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45579: LD_INT 0
45581: PPUSH
45582: PPUSH
// result := 0 ;
45583: LD_ADDR_VAR 0 3
45587: PUSH
45588: LD_INT 0
45590: ST_TO_ADDR
// if not array or not value in array then
45591: LD_VAR 0 1
45595: NOT
45596: PUSH
45597: LD_VAR 0 2
45601: PUSH
45602: LD_VAR 0 1
45606: IN
45607: NOT
45608: OR
45609: IFFALSE 45613
// exit ;
45611: GO 45667
// for i = 1 to array do
45613: LD_ADDR_VAR 0 4
45617: PUSH
45618: DOUBLE
45619: LD_INT 1
45621: DEC
45622: ST_TO_ADDR
45623: LD_VAR 0 1
45627: PUSH
45628: FOR_TO
45629: IFFALSE 45665
// if value = array [ i ] then
45631: LD_VAR 0 2
45635: PUSH
45636: LD_VAR 0 1
45640: PUSH
45641: LD_VAR 0 4
45645: ARRAY
45646: EQUAL
45647: IFFALSE 45663
// begin result := i ;
45649: LD_ADDR_VAR 0 3
45653: PUSH
45654: LD_VAR 0 4
45658: ST_TO_ADDR
// exit ;
45659: POP
45660: POP
45661: GO 45667
// end ;
45663: GO 45628
45665: POP
45666: POP
// end ;
45667: LD_VAR 0 3
45671: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45672: LD_INT 0
45674: PPUSH
// vc_chassis := chassis ;
45675: LD_ADDR_OWVAR 37
45679: PUSH
45680: LD_VAR 0 1
45684: ST_TO_ADDR
// vc_engine := engine ;
45685: LD_ADDR_OWVAR 39
45689: PUSH
45690: LD_VAR 0 2
45694: ST_TO_ADDR
// vc_control := control ;
45695: LD_ADDR_OWVAR 38
45699: PUSH
45700: LD_VAR 0 3
45704: ST_TO_ADDR
// vc_weapon := weapon ;
45705: LD_ADDR_OWVAR 40
45709: PUSH
45710: LD_VAR 0 4
45714: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45715: LD_ADDR_OWVAR 41
45719: PUSH
45720: LD_VAR 0 5
45724: ST_TO_ADDR
// end ;
45725: LD_VAR 0 6
45729: RET
// export function WantPlant ( unit ) ; var task ; begin
45730: LD_INT 0
45732: PPUSH
45733: PPUSH
// result := false ;
45734: LD_ADDR_VAR 0 2
45738: PUSH
45739: LD_INT 0
45741: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45742: LD_ADDR_VAR 0 3
45746: PUSH
45747: LD_VAR 0 1
45751: PPUSH
45752: CALL_OW 437
45756: ST_TO_ADDR
// if task then
45757: LD_VAR 0 3
45761: IFFALSE 45789
// if task [ 1 ] [ 1 ] = p then
45763: LD_VAR 0 3
45767: PUSH
45768: LD_INT 1
45770: ARRAY
45771: PUSH
45772: LD_INT 1
45774: ARRAY
45775: PUSH
45776: LD_STRING p
45778: EQUAL
45779: IFFALSE 45789
// result := true ;
45781: LD_ADDR_VAR 0 2
45785: PUSH
45786: LD_INT 1
45788: ST_TO_ADDR
// end ;
45789: LD_VAR 0 2
45793: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45794: LD_INT 0
45796: PPUSH
45797: PPUSH
45798: PPUSH
45799: PPUSH
// if pos < 1 then
45800: LD_VAR 0 2
45804: PUSH
45805: LD_INT 1
45807: LESS
45808: IFFALSE 45812
// exit ;
45810: GO 46115
// if pos = 1 then
45812: LD_VAR 0 2
45816: PUSH
45817: LD_INT 1
45819: EQUAL
45820: IFFALSE 45853
// result := Replace ( arr , pos [ 1 ] , value ) else
45822: LD_ADDR_VAR 0 4
45826: PUSH
45827: LD_VAR 0 1
45831: PPUSH
45832: LD_VAR 0 2
45836: PUSH
45837: LD_INT 1
45839: ARRAY
45840: PPUSH
45841: LD_VAR 0 3
45845: PPUSH
45846: CALL_OW 1
45850: ST_TO_ADDR
45851: GO 46115
// begin tmp := arr ;
45853: LD_ADDR_VAR 0 6
45857: PUSH
45858: LD_VAR 0 1
45862: ST_TO_ADDR
// s_arr := [ tmp ] ;
45863: LD_ADDR_VAR 0 7
45867: PUSH
45868: LD_VAR 0 6
45872: PUSH
45873: EMPTY
45874: LIST
45875: ST_TO_ADDR
// for i = 1 to pos - 1 do
45876: LD_ADDR_VAR 0 5
45880: PUSH
45881: DOUBLE
45882: LD_INT 1
45884: DEC
45885: ST_TO_ADDR
45886: LD_VAR 0 2
45890: PUSH
45891: LD_INT 1
45893: MINUS
45894: PUSH
45895: FOR_TO
45896: IFFALSE 45941
// begin tmp := tmp [ pos [ i ] ] ;
45898: LD_ADDR_VAR 0 6
45902: PUSH
45903: LD_VAR 0 6
45907: PUSH
45908: LD_VAR 0 2
45912: PUSH
45913: LD_VAR 0 5
45917: ARRAY
45918: ARRAY
45919: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45920: LD_ADDR_VAR 0 7
45924: PUSH
45925: LD_VAR 0 7
45929: PUSH
45930: LD_VAR 0 6
45934: PUSH
45935: EMPTY
45936: LIST
45937: ADD
45938: ST_TO_ADDR
// end ;
45939: GO 45895
45941: POP
45942: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45943: LD_ADDR_VAR 0 6
45947: PUSH
45948: LD_VAR 0 6
45952: PPUSH
45953: LD_VAR 0 2
45957: PUSH
45958: LD_VAR 0 2
45962: ARRAY
45963: PPUSH
45964: LD_VAR 0 3
45968: PPUSH
45969: CALL_OW 1
45973: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45974: LD_ADDR_VAR 0 7
45978: PUSH
45979: LD_VAR 0 7
45983: PPUSH
45984: LD_VAR 0 7
45988: PPUSH
45989: LD_VAR 0 6
45993: PPUSH
45994: CALL_OW 1
45998: ST_TO_ADDR
// for i = s_arr downto 2 do
45999: LD_ADDR_VAR 0 5
46003: PUSH
46004: DOUBLE
46005: LD_VAR 0 7
46009: INC
46010: ST_TO_ADDR
46011: LD_INT 2
46013: PUSH
46014: FOR_DOWNTO
46015: IFFALSE 46099
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46017: LD_ADDR_VAR 0 6
46021: PUSH
46022: LD_VAR 0 7
46026: PUSH
46027: LD_VAR 0 5
46031: PUSH
46032: LD_INT 1
46034: MINUS
46035: ARRAY
46036: PPUSH
46037: LD_VAR 0 2
46041: PUSH
46042: LD_VAR 0 5
46046: PUSH
46047: LD_INT 1
46049: MINUS
46050: ARRAY
46051: PPUSH
46052: LD_VAR 0 7
46056: PUSH
46057: LD_VAR 0 5
46061: ARRAY
46062: PPUSH
46063: CALL_OW 1
46067: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46068: LD_ADDR_VAR 0 7
46072: PUSH
46073: LD_VAR 0 7
46077: PPUSH
46078: LD_VAR 0 5
46082: PUSH
46083: LD_INT 1
46085: MINUS
46086: PPUSH
46087: LD_VAR 0 6
46091: PPUSH
46092: CALL_OW 1
46096: ST_TO_ADDR
// end ;
46097: GO 46014
46099: POP
46100: POP
// result := s_arr [ 1 ] ;
46101: LD_ADDR_VAR 0 4
46105: PUSH
46106: LD_VAR 0 7
46110: PUSH
46111: LD_INT 1
46113: ARRAY
46114: ST_TO_ADDR
// end ; end ;
46115: LD_VAR 0 4
46119: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46120: LD_INT 0
46122: PPUSH
46123: PPUSH
// if not list then
46124: LD_VAR 0 1
46128: NOT
46129: IFFALSE 46133
// exit ;
46131: GO 46224
// i := list [ pos1 ] ;
46133: LD_ADDR_VAR 0 5
46137: PUSH
46138: LD_VAR 0 1
46142: PUSH
46143: LD_VAR 0 2
46147: ARRAY
46148: ST_TO_ADDR
// if not i then
46149: LD_VAR 0 5
46153: NOT
46154: IFFALSE 46158
// exit ;
46156: GO 46224
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46158: LD_ADDR_VAR 0 1
46162: PUSH
46163: LD_VAR 0 1
46167: PPUSH
46168: LD_VAR 0 2
46172: PPUSH
46173: LD_VAR 0 1
46177: PUSH
46178: LD_VAR 0 3
46182: ARRAY
46183: PPUSH
46184: CALL_OW 1
46188: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46189: LD_ADDR_VAR 0 1
46193: PUSH
46194: LD_VAR 0 1
46198: PPUSH
46199: LD_VAR 0 3
46203: PPUSH
46204: LD_VAR 0 5
46208: PPUSH
46209: CALL_OW 1
46213: ST_TO_ADDR
// result := list ;
46214: LD_ADDR_VAR 0 4
46218: PUSH
46219: LD_VAR 0 1
46223: ST_TO_ADDR
// end ;
46224: LD_VAR 0 4
46228: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46229: LD_INT 0
46231: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46232: LD_ADDR_VAR 0 5
46236: PUSH
46237: LD_VAR 0 1
46241: PPUSH
46242: CALL_OW 250
46246: PPUSH
46247: LD_VAR 0 1
46251: PPUSH
46252: CALL_OW 251
46256: PPUSH
46257: LD_VAR 0 2
46261: PPUSH
46262: LD_VAR 0 3
46266: PPUSH
46267: LD_VAR 0 4
46271: PPUSH
46272: CALL 46282 0 5
46276: ST_TO_ADDR
// end ;
46277: LD_VAR 0 5
46281: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46282: LD_INT 0
46284: PPUSH
46285: PPUSH
46286: PPUSH
46287: PPUSH
// if not list then
46288: LD_VAR 0 3
46292: NOT
46293: IFFALSE 46297
// exit ;
46295: GO 46685
// result := [ ] ;
46297: LD_ADDR_VAR 0 6
46301: PUSH
46302: EMPTY
46303: ST_TO_ADDR
// for i in list do
46304: LD_ADDR_VAR 0 7
46308: PUSH
46309: LD_VAR 0 3
46313: PUSH
46314: FOR_IN
46315: IFFALSE 46517
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46317: LD_ADDR_VAR 0 9
46321: PUSH
46322: LD_VAR 0 7
46326: PPUSH
46327: LD_VAR 0 1
46331: PPUSH
46332: LD_VAR 0 2
46336: PPUSH
46337: CALL_OW 297
46341: ST_TO_ADDR
// if not result then
46342: LD_VAR 0 6
46346: NOT
46347: IFFALSE 46373
// result := [ [ i , tmp ] ] else
46349: LD_ADDR_VAR 0 6
46353: PUSH
46354: LD_VAR 0 7
46358: PUSH
46359: LD_VAR 0 9
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: EMPTY
46369: LIST
46370: ST_TO_ADDR
46371: GO 46515
// begin if result [ result ] [ 2 ] < tmp then
46373: LD_VAR 0 6
46377: PUSH
46378: LD_VAR 0 6
46382: ARRAY
46383: PUSH
46384: LD_INT 2
46386: ARRAY
46387: PUSH
46388: LD_VAR 0 9
46392: LESS
46393: IFFALSE 46435
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46395: LD_ADDR_VAR 0 6
46399: PUSH
46400: LD_VAR 0 6
46404: PPUSH
46405: LD_VAR 0 6
46409: PUSH
46410: LD_INT 1
46412: PLUS
46413: PPUSH
46414: LD_VAR 0 7
46418: PUSH
46419: LD_VAR 0 9
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PPUSH
46428: CALL_OW 2
46432: ST_TO_ADDR
46433: GO 46515
// for j = 1 to result do
46435: LD_ADDR_VAR 0 8
46439: PUSH
46440: DOUBLE
46441: LD_INT 1
46443: DEC
46444: ST_TO_ADDR
46445: LD_VAR 0 6
46449: PUSH
46450: FOR_TO
46451: IFFALSE 46513
// begin if tmp < result [ j ] [ 2 ] then
46453: LD_VAR 0 9
46457: PUSH
46458: LD_VAR 0 6
46462: PUSH
46463: LD_VAR 0 8
46467: ARRAY
46468: PUSH
46469: LD_INT 2
46471: ARRAY
46472: LESS
46473: IFFALSE 46511
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46475: LD_ADDR_VAR 0 6
46479: PUSH
46480: LD_VAR 0 6
46484: PPUSH
46485: LD_VAR 0 8
46489: PPUSH
46490: LD_VAR 0 7
46494: PUSH
46495: LD_VAR 0 9
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PPUSH
46504: CALL_OW 2
46508: ST_TO_ADDR
// break ;
46509: GO 46513
// end ; end ;
46511: GO 46450
46513: POP
46514: POP
// end ; end ;
46515: GO 46314
46517: POP
46518: POP
// if result and not asc then
46519: LD_VAR 0 6
46523: PUSH
46524: LD_VAR 0 4
46528: NOT
46529: AND
46530: IFFALSE 46605
// begin tmp := result ;
46532: LD_ADDR_VAR 0 9
46536: PUSH
46537: LD_VAR 0 6
46541: ST_TO_ADDR
// for i = tmp downto 1 do
46542: LD_ADDR_VAR 0 7
46546: PUSH
46547: DOUBLE
46548: LD_VAR 0 9
46552: INC
46553: ST_TO_ADDR
46554: LD_INT 1
46556: PUSH
46557: FOR_DOWNTO
46558: IFFALSE 46603
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46560: LD_ADDR_VAR 0 6
46564: PUSH
46565: LD_VAR 0 6
46569: PPUSH
46570: LD_VAR 0 9
46574: PUSH
46575: LD_VAR 0 7
46579: MINUS
46580: PUSH
46581: LD_INT 1
46583: PLUS
46584: PPUSH
46585: LD_VAR 0 9
46589: PUSH
46590: LD_VAR 0 7
46594: ARRAY
46595: PPUSH
46596: CALL_OW 1
46600: ST_TO_ADDR
46601: GO 46557
46603: POP
46604: POP
// end ; tmp := [ ] ;
46605: LD_ADDR_VAR 0 9
46609: PUSH
46610: EMPTY
46611: ST_TO_ADDR
// if mode then
46612: LD_VAR 0 5
46616: IFFALSE 46685
// begin for i = 1 to result do
46618: LD_ADDR_VAR 0 7
46622: PUSH
46623: DOUBLE
46624: LD_INT 1
46626: DEC
46627: ST_TO_ADDR
46628: LD_VAR 0 6
46632: PUSH
46633: FOR_TO
46634: IFFALSE 46673
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46636: LD_ADDR_VAR 0 9
46640: PUSH
46641: LD_VAR 0 9
46645: PPUSH
46646: LD_VAR 0 7
46650: PPUSH
46651: LD_VAR 0 6
46655: PUSH
46656: LD_VAR 0 7
46660: ARRAY
46661: PUSH
46662: LD_INT 1
46664: ARRAY
46665: PPUSH
46666: CALL_OW 1
46670: ST_TO_ADDR
46671: GO 46633
46673: POP
46674: POP
// result := tmp ;
46675: LD_ADDR_VAR 0 6
46679: PUSH
46680: LD_VAR 0 9
46684: ST_TO_ADDR
// end ; end ;
46685: LD_VAR 0 6
46689: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46690: LD_INT 0
46692: PPUSH
46693: PPUSH
46694: PPUSH
46695: PPUSH
46696: PPUSH
46697: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46698: LD_ADDR_VAR 0 5
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: LD_INT 0
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: EMPTY
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: ST_TO_ADDR
// if not x or not y then
46720: LD_VAR 0 2
46724: NOT
46725: PUSH
46726: LD_VAR 0 3
46730: NOT
46731: OR
46732: IFFALSE 46736
// exit ;
46734: GO 48382
// if not range then
46736: LD_VAR 0 4
46740: NOT
46741: IFFALSE 46751
// range := 10 ;
46743: LD_ADDR_VAR 0 4
46747: PUSH
46748: LD_INT 10
46750: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46751: LD_ADDR_VAR 0 8
46755: PUSH
46756: LD_INT 81
46758: PUSH
46759: LD_VAR 0 1
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 92
46770: PUSH
46771: LD_VAR 0 2
46775: PUSH
46776: LD_VAR 0 3
46780: PUSH
46781: LD_VAR 0 4
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 3
46794: PUSH
46795: LD_INT 21
46797: PUSH
46798: LD_INT 3
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: LIST
46813: PPUSH
46814: CALL_OW 69
46818: ST_TO_ADDR
// if not tmp then
46819: LD_VAR 0 8
46823: NOT
46824: IFFALSE 46828
// exit ;
46826: GO 48382
// for i in tmp do
46828: LD_ADDR_VAR 0 6
46832: PUSH
46833: LD_VAR 0 8
46837: PUSH
46838: FOR_IN
46839: IFFALSE 48357
// begin points := [ 0 , 0 , 0 ] ;
46841: LD_ADDR_VAR 0 9
46845: PUSH
46846: LD_INT 0
46848: PUSH
46849: LD_INT 0
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: LIST
46859: ST_TO_ADDR
// bpoints := 1 ;
46860: LD_ADDR_VAR 0 10
46864: PUSH
46865: LD_INT 1
46867: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46868: LD_VAR 0 6
46872: PPUSH
46873: CALL_OW 247
46877: PUSH
46878: LD_INT 1
46880: DOUBLE
46881: EQUAL
46882: IFTRUE 46886
46884: GO 47464
46886: POP
// begin if GetClass ( i ) = 1 then
46887: LD_VAR 0 6
46891: PPUSH
46892: CALL_OW 257
46896: PUSH
46897: LD_INT 1
46899: EQUAL
46900: IFFALSE 46921
// points := [ 10 , 5 , 3 ] ;
46902: LD_ADDR_VAR 0 9
46906: PUSH
46907: LD_INT 10
46909: PUSH
46910: LD_INT 5
46912: PUSH
46913: LD_INT 3
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: LIST
46920: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46921: LD_VAR 0 6
46925: PPUSH
46926: CALL_OW 257
46930: PUSH
46931: LD_INT 2
46933: PUSH
46934: LD_INT 3
46936: PUSH
46937: LD_INT 4
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: LIST
46944: IN
46945: IFFALSE 46966
// points := [ 3 , 2 , 1 ] ;
46947: LD_ADDR_VAR 0 9
46951: PUSH
46952: LD_INT 3
46954: PUSH
46955: LD_INT 2
46957: PUSH
46958: LD_INT 1
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: LIST
46965: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46966: LD_VAR 0 6
46970: PPUSH
46971: CALL_OW 257
46975: PUSH
46976: LD_INT 5
46978: EQUAL
46979: IFFALSE 47000
// points := [ 130 , 5 , 2 ] ;
46981: LD_ADDR_VAR 0 9
46985: PUSH
46986: LD_INT 130
46988: PUSH
46989: LD_INT 5
46991: PUSH
46992: LD_INT 2
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: LIST
46999: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47000: LD_VAR 0 6
47004: PPUSH
47005: CALL_OW 257
47009: PUSH
47010: LD_INT 8
47012: EQUAL
47013: IFFALSE 47034
// points := [ 35 , 35 , 30 ] ;
47015: LD_ADDR_VAR 0 9
47019: PUSH
47020: LD_INT 35
47022: PUSH
47023: LD_INT 35
47025: PUSH
47026: LD_INT 30
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: LIST
47033: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47034: LD_VAR 0 6
47038: PPUSH
47039: CALL_OW 257
47043: PUSH
47044: LD_INT 9
47046: EQUAL
47047: IFFALSE 47068
// points := [ 20 , 55 , 40 ] ;
47049: LD_ADDR_VAR 0 9
47053: PUSH
47054: LD_INT 20
47056: PUSH
47057: LD_INT 55
47059: PUSH
47060: LD_INT 40
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: LIST
47067: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47068: LD_VAR 0 6
47072: PPUSH
47073: CALL_OW 257
47077: PUSH
47078: LD_INT 12
47080: PUSH
47081: LD_INT 16
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: IN
47088: IFFALSE 47109
// points := [ 5 , 3 , 2 ] ;
47090: LD_ADDR_VAR 0 9
47094: PUSH
47095: LD_INT 5
47097: PUSH
47098: LD_INT 3
47100: PUSH
47101: LD_INT 2
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: LIST
47108: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47109: LD_VAR 0 6
47113: PPUSH
47114: CALL_OW 257
47118: PUSH
47119: LD_INT 17
47121: EQUAL
47122: IFFALSE 47143
// points := [ 100 , 50 , 75 ] ;
47124: LD_ADDR_VAR 0 9
47128: PUSH
47129: LD_INT 100
47131: PUSH
47132: LD_INT 50
47134: PUSH
47135: LD_INT 75
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: LIST
47142: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47143: LD_VAR 0 6
47147: PPUSH
47148: CALL_OW 257
47152: PUSH
47153: LD_INT 15
47155: EQUAL
47156: IFFALSE 47177
// points := [ 10 , 5 , 3 ] ;
47158: LD_ADDR_VAR 0 9
47162: PUSH
47163: LD_INT 10
47165: PUSH
47166: LD_INT 5
47168: PUSH
47169: LD_INT 3
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: LIST
47176: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47177: LD_VAR 0 6
47181: PPUSH
47182: CALL_OW 257
47186: PUSH
47187: LD_INT 14
47189: EQUAL
47190: IFFALSE 47211
// points := [ 10 , 0 , 0 ] ;
47192: LD_ADDR_VAR 0 9
47196: PUSH
47197: LD_INT 10
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: LIST
47210: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47211: LD_VAR 0 6
47215: PPUSH
47216: CALL_OW 257
47220: PUSH
47221: LD_INT 11
47223: EQUAL
47224: IFFALSE 47245
// points := [ 30 , 10 , 5 ] ;
47226: LD_ADDR_VAR 0 9
47230: PUSH
47231: LD_INT 30
47233: PUSH
47234: LD_INT 10
47236: PUSH
47237: LD_INT 5
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: LIST
47244: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47245: LD_VAR 0 1
47249: PPUSH
47250: LD_INT 5
47252: PPUSH
47253: CALL_OW 321
47257: PUSH
47258: LD_INT 2
47260: EQUAL
47261: IFFALSE 47278
// bpoints := bpoints * 1.8 ;
47263: LD_ADDR_VAR 0 10
47267: PUSH
47268: LD_VAR 0 10
47272: PUSH
47273: LD_REAL  1.80000000000000E+0000
47276: MUL
47277: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47278: LD_VAR 0 6
47282: PPUSH
47283: CALL_OW 257
47287: PUSH
47288: LD_INT 1
47290: PUSH
47291: LD_INT 2
47293: PUSH
47294: LD_INT 3
47296: PUSH
47297: LD_INT 4
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: IN
47306: PUSH
47307: LD_VAR 0 1
47311: PPUSH
47312: LD_INT 51
47314: PPUSH
47315: CALL_OW 321
47319: PUSH
47320: LD_INT 2
47322: EQUAL
47323: AND
47324: IFFALSE 47341
// bpoints := bpoints * 1.2 ;
47326: LD_ADDR_VAR 0 10
47330: PUSH
47331: LD_VAR 0 10
47335: PUSH
47336: LD_REAL  1.20000000000000E+0000
47339: MUL
47340: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47341: LD_VAR 0 6
47345: PPUSH
47346: CALL_OW 257
47350: PUSH
47351: LD_INT 5
47353: PUSH
47354: LD_INT 7
47356: PUSH
47357: LD_INT 9
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: LIST
47364: IN
47365: PUSH
47366: LD_VAR 0 1
47370: PPUSH
47371: LD_INT 52
47373: PPUSH
47374: CALL_OW 321
47378: PUSH
47379: LD_INT 2
47381: EQUAL
47382: AND
47383: IFFALSE 47400
// bpoints := bpoints * 1.5 ;
47385: LD_ADDR_VAR 0 10
47389: PUSH
47390: LD_VAR 0 10
47394: PUSH
47395: LD_REAL  1.50000000000000E+0000
47398: MUL
47399: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47400: LD_VAR 0 1
47404: PPUSH
47405: LD_INT 66
47407: PPUSH
47408: CALL_OW 321
47412: PUSH
47413: LD_INT 2
47415: EQUAL
47416: IFFALSE 47433
// bpoints := bpoints * 1.1 ;
47418: LD_ADDR_VAR 0 10
47422: PUSH
47423: LD_VAR 0 10
47427: PUSH
47428: LD_REAL  1.10000000000000E+0000
47431: MUL
47432: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47433: LD_ADDR_VAR 0 10
47437: PUSH
47438: LD_VAR 0 10
47442: PUSH
47443: LD_VAR 0 6
47447: PPUSH
47448: LD_INT 1
47450: PPUSH
47451: CALL_OW 259
47455: PUSH
47456: LD_REAL  1.15000000000000E+0000
47459: MUL
47460: MUL
47461: ST_TO_ADDR
// end ; unit_vehicle :
47462: GO 48286
47464: LD_INT 2
47466: DOUBLE
47467: EQUAL
47468: IFTRUE 47472
47470: GO 48274
47472: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47473: LD_VAR 0 6
47477: PPUSH
47478: CALL_OW 264
47482: PUSH
47483: LD_INT 2
47485: PUSH
47486: LD_INT 42
47488: PUSH
47489: LD_INT 24
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: LIST
47496: IN
47497: IFFALSE 47518
// points := [ 25 , 5 , 3 ] ;
47499: LD_ADDR_VAR 0 9
47503: PUSH
47504: LD_INT 25
47506: PUSH
47507: LD_INT 5
47509: PUSH
47510: LD_INT 3
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: LIST
47517: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47518: LD_VAR 0 6
47522: PPUSH
47523: CALL_OW 264
47527: PUSH
47528: LD_INT 4
47530: PUSH
47531: LD_INT 43
47533: PUSH
47534: LD_INT 25
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: LIST
47541: IN
47542: IFFALSE 47563
// points := [ 40 , 15 , 5 ] ;
47544: LD_ADDR_VAR 0 9
47548: PUSH
47549: LD_INT 40
47551: PUSH
47552: LD_INT 15
47554: PUSH
47555: LD_INT 5
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: LIST
47562: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47563: LD_VAR 0 6
47567: PPUSH
47568: CALL_OW 264
47572: PUSH
47573: LD_INT 3
47575: PUSH
47576: LD_INT 23
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: IN
47583: IFFALSE 47604
// points := [ 7 , 25 , 8 ] ;
47585: LD_ADDR_VAR 0 9
47589: PUSH
47590: LD_INT 7
47592: PUSH
47593: LD_INT 25
47595: PUSH
47596: LD_INT 8
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: LIST
47603: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47604: LD_VAR 0 6
47608: PPUSH
47609: CALL_OW 264
47613: PUSH
47614: LD_INT 5
47616: PUSH
47617: LD_INT 27
47619: PUSH
47620: LD_INT 44
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: LIST
47627: IN
47628: IFFALSE 47649
// points := [ 14 , 50 , 16 ] ;
47630: LD_ADDR_VAR 0 9
47634: PUSH
47635: LD_INT 14
47637: PUSH
47638: LD_INT 50
47640: PUSH
47641: LD_INT 16
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: LIST
47648: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47649: LD_VAR 0 6
47653: PPUSH
47654: CALL_OW 264
47658: PUSH
47659: LD_INT 6
47661: PUSH
47662: LD_INT 46
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: IN
47669: IFFALSE 47690
// points := [ 32 , 120 , 70 ] ;
47671: LD_ADDR_VAR 0 9
47675: PUSH
47676: LD_INT 32
47678: PUSH
47679: LD_INT 120
47681: PUSH
47682: LD_INT 70
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: LIST
47689: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
47690: LD_VAR 0 6
47694: PPUSH
47695: CALL_OW 264
47699: PUSH
47700: LD_INT 7
47702: PUSH
47703: LD_INT 28
47705: PUSH
47706: LD_INT 45
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: LIST
47713: IN
47714: IFFALSE 47735
// points := [ 35 , 20 , 45 ] ;
47716: LD_ADDR_VAR 0 9
47720: PUSH
47721: LD_INT 35
47723: PUSH
47724: LD_INT 20
47726: PUSH
47727: LD_INT 45
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: LIST
47734: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47735: LD_VAR 0 6
47739: PPUSH
47740: CALL_OW 264
47744: PUSH
47745: LD_INT 47
47747: PUSH
47748: EMPTY
47749: LIST
47750: IN
47751: IFFALSE 47772
// points := [ 67 , 45 , 75 ] ;
47753: LD_ADDR_VAR 0 9
47757: PUSH
47758: LD_INT 67
47760: PUSH
47761: LD_INT 45
47763: PUSH
47764: LD_INT 75
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: LIST
47771: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47772: LD_VAR 0 6
47776: PPUSH
47777: CALL_OW 264
47781: PUSH
47782: LD_INT 26
47784: PUSH
47785: EMPTY
47786: LIST
47787: IN
47788: IFFALSE 47809
// points := [ 120 , 30 , 80 ] ;
47790: LD_ADDR_VAR 0 9
47794: PUSH
47795: LD_INT 120
47797: PUSH
47798: LD_INT 30
47800: PUSH
47801: LD_INT 80
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: LIST
47808: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47809: LD_VAR 0 6
47813: PPUSH
47814: CALL_OW 264
47818: PUSH
47819: LD_INT 22
47821: PUSH
47822: EMPTY
47823: LIST
47824: IN
47825: IFFALSE 47846
// points := [ 40 , 1 , 1 ] ;
47827: LD_ADDR_VAR 0 9
47831: PUSH
47832: LD_INT 40
47834: PUSH
47835: LD_INT 1
47837: PUSH
47838: LD_INT 1
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: LIST
47845: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47846: LD_VAR 0 6
47850: PPUSH
47851: CALL_OW 264
47855: PUSH
47856: LD_INT 29
47858: PUSH
47859: EMPTY
47860: LIST
47861: IN
47862: IFFALSE 47883
// points := [ 70 , 200 , 400 ] ;
47864: LD_ADDR_VAR 0 9
47868: PUSH
47869: LD_INT 70
47871: PUSH
47872: LD_INT 200
47874: PUSH
47875: LD_INT 400
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: LIST
47882: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47883: LD_VAR 0 6
47887: PPUSH
47888: CALL_OW 264
47892: PUSH
47893: LD_INT 14
47895: PUSH
47896: LD_INT 53
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: IN
47903: IFFALSE 47924
// points := [ 40 , 10 , 20 ] ;
47905: LD_ADDR_VAR 0 9
47909: PUSH
47910: LD_INT 40
47912: PUSH
47913: LD_INT 10
47915: PUSH
47916: LD_INT 20
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: LIST
47923: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47924: LD_VAR 0 6
47928: PPUSH
47929: CALL_OW 264
47933: PUSH
47934: LD_INT 9
47936: PUSH
47937: EMPTY
47938: LIST
47939: IN
47940: IFFALSE 47961
// points := [ 5 , 70 , 20 ] ;
47942: LD_ADDR_VAR 0 9
47946: PUSH
47947: LD_INT 5
47949: PUSH
47950: LD_INT 70
47952: PUSH
47953: LD_INT 20
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: LIST
47960: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47961: LD_VAR 0 6
47965: PPUSH
47966: CALL_OW 264
47970: PUSH
47971: LD_INT 10
47973: PUSH
47974: EMPTY
47975: LIST
47976: IN
47977: IFFALSE 47998
// points := [ 35 , 110 , 70 ] ;
47979: LD_ADDR_VAR 0 9
47983: PUSH
47984: LD_INT 35
47986: PUSH
47987: LD_INT 110
47989: PUSH
47990: LD_INT 70
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: LIST
47997: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47998: LD_VAR 0 6
48002: PPUSH
48003: CALL_OW 265
48007: PUSH
48008: LD_INT 25
48010: EQUAL
48011: IFFALSE 48032
// points := [ 80 , 65 , 100 ] ;
48013: LD_ADDR_VAR 0 9
48017: PUSH
48018: LD_INT 80
48020: PUSH
48021: LD_INT 65
48023: PUSH
48024: LD_INT 100
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: LIST
48031: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48032: LD_VAR 0 6
48036: PPUSH
48037: CALL_OW 263
48041: PUSH
48042: LD_INT 1
48044: EQUAL
48045: IFFALSE 48080
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48047: LD_ADDR_VAR 0 10
48051: PUSH
48052: LD_VAR 0 10
48056: PUSH
48057: LD_VAR 0 6
48061: PPUSH
48062: CALL_OW 311
48066: PPUSH
48067: LD_INT 3
48069: PPUSH
48070: CALL_OW 259
48074: PUSH
48075: LD_INT 4
48077: MUL
48078: MUL
48079: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48080: LD_VAR 0 6
48084: PPUSH
48085: CALL_OW 263
48089: PUSH
48090: LD_INT 2
48092: EQUAL
48093: IFFALSE 48144
// begin j := IsControledBy ( i ) ;
48095: LD_ADDR_VAR 0 7
48099: PUSH
48100: LD_VAR 0 6
48104: PPUSH
48105: CALL_OW 312
48109: ST_TO_ADDR
// if j then
48110: LD_VAR 0 7
48114: IFFALSE 48144
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48116: LD_ADDR_VAR 0 10
48120: PUSH
48121: LD_VAR 0 10
48125: PUSH
48126: LD_VAR 0 7
48130: PPUSH
48131: LD_INT 3
48133: PPUSH
48134: CALL_OW 259
48138: PUSH
48139: LD_INT 3
48141: MUL
48142: MUL
48143: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48144: LD_VAR 0 6
48148: PPUSH
48149: CALL_OW 264
48153: PUSH
48154: LD_INT 5
48156: PUSH
48157: LD_INT 6
48159: PUSH
48160: LD_INT 46
48162: PUSH
48163: LD_INT 44
48165: PUSH
48166: LD_INT 47
48168: PUSH
48169: LD_INT 45
48171: PUSH
48172: LD_INT 28
48174: PUSH
48175: LD_INT 7
48177: PUSH
48178: LD_INT 27
48180: PUSH
48181: LD_INT 29
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: IN
48196: PUSH
48197: LD_VAR 0 1
48201: PPUSH
48202: LD_INT 52
48204: PPUSH
48205: CALL_OW 321
48209: PUSH
48210: LD_INT 2
48212: EQUAL
48213: AND
48214: IFFALSE 48231
// bpoints := bpoints * 1.2 ;
48216: LD_ADDR_VAR 0 10
48220: PUSH
48221: LD_VAR 0 10
48225: PUSH
48226: LD_REAL  1.20000000000000E+0000
48229: MUL
48230: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48231: LD_VAR 0 6
48235: PPUSH
48236: CALL_OW 264
48240: PUSH
48241: LD_INT 6
48243: PUSH
48244: LD_INT 46
48246: PUSH
48247: LD_INT 47
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: LIST
48254: IN
48255: IFFALSE 48272
// bpoints := bpoints * 1.2 ;
48257: LD_ADDR_VAR 0 10
48261: PUSH
48262: LD_VAR 0 10
48266: PUSH
48267: LD_REAL  1.20000000000000E+0000
48270: MUL
48271: ST_TO_ADDR
// end ; unit_building :
48272: GO 48286
48274: LD_INT 3
48276: DOUBLE
48277: EQUAL
48278: IFTRUE 48282
48280: GO 48285
48282: POP
// ; end ;
48283: GO 48286
48285: POP
// for j = 1 to 3 do
48286: LD_ADDR_VAR 0 7
48290: PUSH
48291: DOUBLE
48292: LD_INT 1
48294: DEC
48295: ST_TO_ADDR
48296: LD_INT 3
48298: PUSH
48299: FOR_TO
48300: IFFALSE 48353
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48302: LD_ADDR_VAR 0 5
48306: PUSH
48307: LD_VAR 0 5
48311: PPUSH
48312: LD_VAR 0 7
48316: PPUSH
48317: LD_VAR 0 5
48321: PUSH
48322: LD_VAR 0 7
48326: ARRAY
48327: PUSH
48328: LD_VAR 0 9
48332: PUSH
48333: LD_VAR 0 7
48337: ARRAY
48338: PUSH
48339: LD_VAR 0 10
48343: MUL
48344: PLUS
48345: PPUSH
48346: CALL_OW 1
48350: ST_TO_ADDR
48351: GO 48299
48353: POP
48354: POP
// end ;
48355: GO 46838
48357: POP
48358: POP
// result := Replace ( result , 4 , tmp ) ;
48359: LD_ADDR_VAR 0 5
48363: PUSH
48364: LD_VAR 0 5
48368: PPUSH
48369: LD_INT 4
48371: PPUSH
48372: LD_VAR 0 8
48376: PPUSH
48377: CALL_OW 1
48381: ST_TO_ADDR
// end ;
48382: LD_VAR 0 5
48386: RET
// export function DangerAtRange ( unit , range ) ; begin
48387: LD_INT 0
48389: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48390: LD_ADDR_VAR 0 3
48394: PUSH
48395: LD_VAR 0 1
48399: PPUSH
48400: CALL_OW 255
48404: PPUSH
48405: LD_VAR 0 1
48409: PPUSH
48410: CALL_OW 250
48414: PPUSH
48415: LD_VAR 0 1
48419: PPUSH
48420: CALL_OW 251
48424: PPUSH
48425: LD_VAR 0 2
48429: PPUSH
48430: CALL 46690 0 4
48434: ST_TO_ADDR
// end ;
48435: LD_VAR 0 3
48439: RET
// export function DangerInArea ( side , area ) ; begin
48440: LD_INT 0
48442: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48443: LD_ADDR_VAR 0 3
48447: PUSH
48448: LD_VAR 0 2
48452: PPUSH
48453: LD_INT 81
48455: PUSH
48456: LD_VAR 0 1
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PPUSH
48465: CALL_OW 70
48469: ST_TO_ADDR
// end ;
48470: LD_VAR 0 3
48474: RET
// export function IsExtension ( b ) ; begin
48475: LD_INT 0
48477: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48478: LD_ADDR_VAR 0 2
48482: PUSH
48483: LD_VAR 0 1
48487: PUSH
48488: LD_INT 23
48490: PUSH
48491: LD_INT 20
48493: PUSH
48494: LD_INT 22
48496: PUSH
48497: LD_INT 17
48499: PUSH
48500: LD_INT 24
48502: PUSH
48503: LD_INT 21
48505: PUSH
48506: LD_INT 19
48508: PUSH
48509: LD_INT 16
48511: PUSH
48512: LD_INT 25
48514: PUSH
48515: LD_INT 18
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: IN
48530: ST_TO_ADDR
// end ;
48531: LD_VAR 0 2
48535: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
48536: LD_INT 0
48538: PPUSH
48539: PPUSH
48540: PPUSH
// result := [ ] ;
48541: LD_ADDR_VAR 0 3
48545: PUSH
48546: EMPTY
48547: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48548: LD_ADDR_VAR 0 4
48552: PUSH
48553: LD_VAR 0 2
48557: PPUSH
48558: LD_INT 21
48560: PUSH
48561: LD_INT 3
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PPUSH
48568: CALL_OW 70
48572: ST_TO_ADDR
// if not tmp then
48573: LD_VAR 0 4
48577: NOT
48578: IFFALSE 48582
// exit ;
48580: GO 48640
// for i in tmp do
48582: LD_ADDR_VAR 0 5
48586: PUSH
48587: LD_VAR 0 4
48591: PUSH
48592: FOR_IN
48593: IFFALSE 48628
// if GetBase ( i ) <> base then
48595: LD_VAR 0 5
48599: PPUSH
48600: CALL_OW 274
48604: PUSH
48605: LD_VAR 0 1
48609: NONEQUAL
48610: IFFALSE 48626
// ComLinkToBase ( base , i ) ;
48612: LD_VAR 0 1
48616: PPUSH
48617: LD_VAR 0 5
48621: PPUSH
48622: CALL_OW 169
48626: GO 48592
48628: POP
48629: POP
// result := tmp ;
48630: LD_ADDR_VAR 0 3
48634: PUSH
48635: LD_VAR 0 4
48639: ST_TO_ADDR
// end ;
48640: LD_VAR 0 3
48644: RET
// export function ComComplete ( unit , b ) ; var i ; begin
48645: LD_INT 0
48647: PPUSH
48648: PPUSH
// if BuildingStatus ( b ) = bs_build then
48649: LD_VAR 0 2
48653: PPUSH
48654: CALL_OW 461
48658: PUSH
48659: LD_INT 1
48661: EQUAL
48662: IFFALSE 48722
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48664: LD_VAR 0 1
48668: PPUSH
48669: LD_STRING h
48671: PUSH
48672: LD_VAR 0 2
48676: PPUSH
48677: CALL_OW 250
48681: PUSH
48682: LD_VAR 0 2
48686: PPUSH
48687: CALL_OW 251
48691: PUSH
48692: LD_VAR 0 2
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: PUSH
48715: EMPTY
48716: LIST
48717: PPUSH
48718: CALL_OW 446
// end ;
48722: LD_VAR 0 3
48726: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48727: LD_INT 0
48729: PPUSH
48730: PPUSH
48731: PPUSH
48732: PPUSH
48733: PPUSH
48734: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
48735: LD_VAR 0 1
48739: NOT
48740: PUSH
48741: LD_VAR 0 1
48745: PPUSH
48746: CALL_OW 263
48750: PUSH
48751: LD_INT 2
48753: EQUAL
48754: NOT
48755: OR
48756: IFFALSE 48760
// exit ;
48758: GO 49076
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48760: LD_ADDR_VAR 0 6
48764: PUSH
48765: LD_INT 22
48767: PUSH
48768: LD_VAR 0 1
48772: PPUSH
48773: CALL_OW 255
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 2
48784: PUSH
48785: LD_INT 30
48787: PUSH
48788: LD_INT 36
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 34
48797: PUSH
48798: LD_INT 31
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: LIST
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PPUSH
48814: CALL_OW 69
48818: ST_TO_ADDR
// if not tmp then
48819: LD_VAR 0 6
48823: NOT
48824: IFFALSE 48828
// exit ;
48826: GO 49076
// result := [ ] ;
48828: LD_ADDR_VAR 0 2
48832: PUSH
48833: EMPTY
48834: ST_TO_ADDR
// for i in tmp do
48835: LD_ADDR_VAR 0 3
48839: PUSH
48840: LD_VAR 0 6
48844: PUSH
48845: FOR_IN
48846: IFFALSE 48917
// begin t := UnitsInside ( i ) ;
48848: LD_ADDR_VAR 0 4
48852: PUSH
48853: LD_VAR 0 3
48857: PPUSH
48858: CALL_OW 313
48862: ST_TO_ADDR
// if t then
48863: LD_VAR 0 4
48867: IFFALSE 48915
// for j in t do
48869: LD_ADDR_VAR 0 7
48873: PUSH
48874: LD_VAR 0 4
48878: PUSH
48879: FOR_IN
48880: IFFALSE 48913
// result := Insert ( result , result + 1 , j ) ;
48882: LD_ADDR_VAR 0 2
48886: PUSH
48887: LD_VAR 0 2
48891: PPUSH
48892: LD_VAR 0 2
48896: PUSH
48897: LD_INT 1
48899: PLUS
48900: PPUSH
48901: LD_VAR 0 7
48905: PPUSH
48906: CALL_OW 2
48910: ST_TO_ADDR
48911: GO 48879
48913: POP
48914: POP
// end ;
48915: GO 48845
48917: POP
48918: POP
// if not result then
48919: LD_VAR 0 2
48923: NOT
48924: IFFALSE 48928
// exit ;
48926: GO 49076
// mech := result [ 1 ] ;
48928: LD_ADDR_VAR 0 5
48932: PUSH
48933: LD_VAR 0 2
48937: PUSH
48938: LD_INT 1
48940: ARRAY
48941: ST_TO_ADDR
// if result > 1 then
48942: LD_VAR 0 2
48946: PUSH
48947: LD_INT 1
48949: GREATER
48950: IFFALSE 49062
// for i = 2 to result do
48952: LD_ADDR_VAR 0 3
48956: PUSH
48957: DOUBLE
48958: LD_INT 2
48960: DEC
48961: ST_TO_ADDR
48962: LD_VAR 0 2
48966: PUSH
48967: FOR_TO
48968: IFFALSE 49060
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48970: LD_ADDR_VAR 0 4
48974: PUSH
48975: LD_VAR 0 2
48979: PUSH
48980: LD_VAR 0 3
48984: ARRAY
48985: PPUSH
48986: LD_INT 3
48988: PPUSH
48989: CALL_OW 259
48993: PUSH
48994: LD_VAR 0 2
48998: PUSH
48999: LD_VAR 0 3
49003: ARRAY
49004: PPUSH
49005: CALL_OW 432
49009: MINUS
49010: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49011: LD_VAR 0 4
49015: PUSH
49016: LD_VAR 0 5
49020: PPUSH
49021: LD_INT 3
49023: PPUSH
49024: CALL_OW 259
49028: PUSH
49029: LD_VAR 0 5
49033: PPUSH
49034: CALL_OW 432
49038: MINUS
49039: GREATEREQUAL
49040: IFFALSE 49058
// mech := result [ i ] ;
49042: LD_ADDR_VAR 0 5
49046: PUSH
49047: LD_VAR 0 2
49051: PUSH
49052: LD_VAR 0 3
49056: ARRAY
49057: ST_TO_ADDR
// end ;
49058: GO 48967
49060: POP
49061: POP
// ComLinkTo ( vehicle , mech ) ;
49062: LD_VAR 0 1
49066: PPUSH
49067: LD_VAR 0 5
49071: PPUSH
49072: CALL_OW 135
// end ;
49076: LD_VAR 0 2
49080: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49081: LD_INT 0
49083: PPUSH
49084: PPUSH
49085: PPUSH
49086: PPUSH
49087: PPUSH
49088: PPUSH
49089: PPUSH
49090: PPUSH
49091: PPUSH
49092: PPUSH
49093: PPUSH
49094: PPUSH
49095: PPUSH
// result := [ ] ;
49096: LD_ADDR_VAR 0 7
49100: PUSH
49101: EMPTY
49102: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49103: LD_VAR 0 1
49107: PPUSH
49108: CALL_OW 266
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: IN
49123: NOT
49124: IFFALSE 49128
// exit ;
49126: GO 50759
// if name then
49128: LD_VAR 0 3
49132: IFFALSE 49148
// SetBName ( base_dep , name ) ;
49134: LD_VAR 0 1
49138: PPUSH
49139: LD_VAR 0 3
49143: PPUSH
49144: CALL_OW 500
// base := GetBase ( base_dep ) ;
49148: LD_ADDR_VAR 0 15
49152: PUSH
49153: LD_VAR 0 1
49157: PPUSH
49158: CALL_OW 274
49162: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49163: LD_ADDR_VAR 0 16
49167: PUSH
49168: LD_VAR 0 1
49172: PPUSH
49173: CALL_OW 255
49177: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49178: LD_ADDR_VAR 0 17
49182: PUSH
49183: LD_VAR 0 1
49187: PPUSH
49188: CALL_OW 248
49192: ST_TO_ADDR
// if sources then
49193: LD_VAR 0 5
49197: IFFALSE 49244
// for i = 1 to 3 do
49199: LD_ADDR_VAR 0 8
49203: PUSH
49204: DOUBLE
49205: LD_INT 1
49207: DEC
49208: ST_TO_ADDR
49209: LD_INT 3
49211: PUSH
49212: FOR_TO
49213: IFFALSE 49242
// AddResourceType ( base , i , sources [ i ] ) ;
49215: LD_VAR 0 15
49219: PPUSH
49220: LD_VAR 0 8
49224: PPUSH
49225: LD_VAR 0 5
49229: PUSH
49230: LD_VAR 0 8
49234: ARRAY
49235: PPUSH
49236: CALL_OW 276
49240: GO 49212
49242: POP
49243: POP
// buildings := GetBaseBuildings ( base , area ) ;
49244: LD_ADDR_VAR 0 18
49248: PUSH
49249: LD_VAR 0 15
49253: PPUSH
49254: LD_VAR 0 2
49258: PPUSH
49259: CALL 48536 0 2
49263: ST_TO_ADDR
// InitHc ;
49264: CALL_OW 19
// InitUc ;
49268: CALL_OW 18
// uc_side := side ;
49272: LD_ADDR_OWVAR 20
49276: PUSH
49277: LD_VAR 0 16
49281: ST_TO_ADDR
// uc_nation := nation ;
49282: LD_ADDR_OWVAR 21
49286: PUSH
49287: LD_VAR 0 17
49291: ST_TO_ADDR
// if buildings then
49292: LD_VAR 0 18
49296: IFFALSE 50618
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49298: LD_ADDR_VAR 0 19
49302: PUSH
49303: LD_VAR 0 18
49307: PPUSH
49308: LD_INT 2
49310: PUSH
49311: LD_INT 30
49313: PUSH
49314: LD_INT 29
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 30
49323: PUSH
49324: LD_INT 30
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: LIST
49335: PPUSH
49336: CALL_OW 72
49340: ST_TO_ADDR
// if tmp then
49341: LD_VAR 0 19
49345: IFFALSE 49393
// for i in tmp do
49347: LD_ADDR_VAR 0 8
49351: PUSH
49352: LD_VAR 0 19
49356: PUSH
49357: FOR_IN
49358: IFFALSE 49391
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49360: LD_VAR 0 8
49364: PPUSH
49365: CALL_OW 250
49369: PPUSH
49370: LD_VAR 0 8
49374: PPUSH
49375: CALL_OW 251
49379: PPUSH
49380: LD_VAR 0 16
49384: PPUSH
49385: CALL_OW 441
49389: GO 49357
49391: POP
49392: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49393: LD_VAR 0 18
49397: PPUSH
49398: LD_INT 2
49400: PUSH
49401: LD_INT 30
49403: PUSH
49404: LD_INT 32
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 30
49413: PUSH
49414: LD_INT 33
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: LIST
49425: PPUSH
49426: CALL_OW 72
49430: IFFALSE 49518
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49432: LD_ADDR_VAR 0 8
49436: PUSH
49437: LD_VAR 0 18
49441: PPUSH
49442: LD_INT 2
49444: PUSH
49445: LD_INT 30
49447: PUSH
49448: LD_INT 32
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 30
49457: PUSH
49458: LD_INT 33
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: LIST
49469: PPUSH
49470: CALL_OW 72
49474: PUSH
49475: FOR_IN
49476: IFFALSE 49516
// begin if not GetBWeapon ( i ) then
49478: LD_VAR 0 8
49482: PPUSH
49483: CALL_OW 269
49487: NOT
49488: IFFALSE 49514
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49490: LD_VAR 0 8
49494: PPUSH
49495: LD_VAR 0 8
49499: PPUSH
49500: LD_VAR 0 2
49504: PPUSH
49505: CALL 50764 0 2
49509: PPUSH
49510: CALL_OW 431
// end ;
49514: GO 49475
49516: POP
49517: POP
// end ; for i = 1 to personel do
49518: LD_ADDR_VAR 0 8
49522: PUSH
49523: DOUBLE
49524: LD_INT 1
49526: DEC
49527: ST_TO_ADDR
49528: LD_VAR 0 6
49532: PUSH
49533: FOR_TO
49534: IFFALSE 50598
// begin if i > 4 then
49536: LD_VAR 0 8
49540: PUSH
49541: LD_INT 4
49543: GREATER
49544: IFFALSE 49548
// break ;
49546: GO 50598
// case i of 1 :
49548: LD_VAR 0 8
49552: PUSH
49553: LD_INT 1
49555: DOUBLE
49556: EQUAL
49557: IFTRUE 49561
49559: GO 49641
49561: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49562: LD_ADDR_VAR 0 12
49566: PUSH
49567: LD_VAR 0 18
49571: PPUSH
49572: LD_INT 22
49574: PUSH
49575: LD_VAR 0 16
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 58
49586: PUSH
49587: EMPTY
49588: LIST
49589: PUSH
49590: LD_INT 2
49592: PUSH
49593: LD_INT 30
49595: PUSH
49596: LD_INT 32
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 30
49605: PUSH
49606: LD_INT 4
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 30
49615: PUSH
49616: LD_INT 5
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: LIST
49633: PPUSH
49634: CALL_OW 72
49638: ST_TO_ADDR
49639: GO 49863
49641: LD_INT 2
49643: DOUBLE
49644: EQUAL
49645: IFTRUE 49649
49647: GO 49711
49649: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49650: LD_ADDR_VAR 0 12
49654: PUSH
49655: LD_VAR 0 18
49659: PPUSH
49660: LD_INT 22
49662: PUSH
49663: LD_VAR 0 16
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 2
49674: PUSH
49675: LD_INT 30
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 30
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: LIST
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PPUSH
49704: CALL_OW 72
49708: ST_TO_ADDR
49709: GO 49863
49711: LD_INT 3
49713: DOUBLE
49714: EQUAL
49715: IFTRUE 49719
49717: GO 49781
49719: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49720: LD_ADDR_VAR 0 12
49724: PUSH
49725: LD_VAR 0 18
49729: PPUSH
49730: LD_INT 22
49732: PUSH
49733: LD_VAR 0 16
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: LD_INT 30
49747: PUSH
49748: LD_INT 2
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 30
49757: PUSH
49758: LD_INT 3
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: LIST
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PPUSH
49774: CALL_OW 72
49778: ST_TO_ADDR
49779: GO 49863
49781: LD_INT 4
49783: DOUBLE
49784: EQUAL
49785: IFTRUE 49789
49787: GO 49862
49789: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49790: LD_ADDR_VAR 0 12
49794: PUSH
49795: LD_VAR 0 18
49799: PPUSH
49800: LD_INT 22
49802: PUSH
49803: LD_VAR 0 16
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 2
49814: PUSH
49815: LD_INT 30
49817: PUSH
49818: LD_INT 6
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 30
49827: PUSH
49828: LD_INT 7
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 30
49837: PUSH
49838: LD_INT 8
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PPUSH
49855: CALL_OW 72
49859: ST_TO_ADDR
49860: GO 49863
49862: POP
// if i = 1 then
49863: LD_VAR 0 8
49867: PUSH
49868: LD_INT 1
49870: EQUAL
49871: IFFALSE 49982
// begin tmp := [ ] ;
49873: LD_ADDR_VAR 0 19
49877: PUSH
49878: EMPTY
49879: ST_TO_ADDR
// for j in f do
49880: LD_ADDR_VAR 0 9
49884: PUSH
49885: LD_VAR 0 12
49889: PUSH
49890: FOR_IN
49891: IFFALSE 49964
// if GetBType ( j ) = b_bunker then
49893: LD_VAR 0 9
49897: PPUSH
49898: CALL_OW 266
49902: PUSH
49903: LD_INT 32
49905: EQUAL
49906: IFFALSE 49933
// tmp := Insert ( tmp , 1 , j ) else
49908: LD_ADDR_VAR 0 19
49912: PUSH
49913: LD_VAR 0 19
49917: PPUSH
49918: LD_INT 1
49920: PPUSH
49921: LD_VAR 0 9
49925: PPUSH
49926: CALL_OW 2
49930: ST_TO_ADDR
49931: GO 49962
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49933: LD_ADDR_VAR 0 19
49937: PUSH
49938: LD_VAR 0 19
49942: PPUSH
49943: LD_VAR 0 19
49947: PUSH
49948: LD_INT 1
49950: PLUS
49951: PPUSH
49952: LD_VAR 0 9
49956: PPUSH
49957: CALL_OW 2
49961: ST_TO_ADDR
49962: GO 49890
49964: POP
49965: POP
// if tmp then
49966: LD_VAR 0 19
49970: IFFALSE 49982
// f := tmp ;
49972: LD_ADDR_VAR 0 12
49976: PUSH
49977: LD_VAR 0 19
49981: ST_TO_ADDR
// end ; x := personel [ i ] ;
49982: LD_ADDR_VAR 0 13
49986: PUSH
49987: LD_VAR 0 6
49991: PUSH
49992: LD_VAR 0 8
49996: ARRAY
49997: ST_TO_ADDR
// if x = - 1 then
49998: LD_VAR 0 13
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: EQUAL
50007: IFFALSE 50216
// begin for j in f do
50009: LD_ADDR_VAR 0 9
50013: PUSH
50014: LD_VAR 0 12
50018: PUSH
50019: FOR_IN
50020: IFFALSE 50212
// repeat InitHc ;
50022: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50026: LD_VAR 0 9
50030: PPUSH
50031: CALL_OW 266
50035: PUSH
50036: LD_INT 5
50038: EQUAL
50039: IFFALSE 50109
// begin if UnitsInside ( j ) < 3 then
50041: LD_VAR 0 9
50045: PPUSH
50046: CALL_OW 313
50050: PUSH
50051: LD_INT 3
50053: LESS
50054: IFFALSE 50090
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50056: LD_INT 0
50058: PPUSH
50059: LD_INT 5
50061: PUSH
50062: LD_INT 8
50064: PUSH
50065: LD_INT 9
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: LIST
50072: PUSH
50073: LD_VAR 0 17
50077: ARRAY
50078: PPUSH
50079: LD_VAR 0 4
50083: PPUSH
50084: CALL_OW 380
50088: GO 50107
// PrepareHuman ( false , i , skill ) ;
50090: LD_INT 0
50092: PPUSH
50093: LD_VAR 0 8
50097: PPUSH
50098: LD_VAR 0 4
50102: PPUSH
50103: CALL_OW 380
// end else
50107: GO 50126
// PrepareHuman ( false , i , skill ) ;
50109: LD_INT 0
50111: PPUSH
50112: LD_VAR 0 8
50116: PPUSH
50117: LD_VAR 0 4
50121: PPUSH
50122: CALL_OW 380
// un := CreateHuman ;
50126: LD_ADDR_VAR 0 14
50130: PUSH
50131: CALL_OW 44
50135: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50136: LD_ADDR_VAR 0 7
50140: PUSH
50141: LD_VAR 0 7
50145: PPUSH
50146: LD_INT 1
50148: PPUSH
50149: LD_VAR 0 14
50153: PPUSH
50154: CALL_OW 2
50158: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50159: LD_VAR 0 14
50163: PPUSH
50164: LD_VAR 0 9
50168: PPUSH
50169: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50173: LD_VAR 0 9
50177: PPUSH
50178: CALL_OW 313
50182: PUSH
50183: LD_INT 6
50185: EQUAL
50186: PUSH
50187: LD_VAR 0 9
50191: PPUSH
50192: CALL_OW 266
50196: PUSH
50197: LD_INT 32
50199: PUSH
50200: LD_INT 31
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: IN
50207: OR
50208: IFFALSE 50022
50210: GO 50019
50212: POP
50213: POP
// end else
50214: GO 50596
// for j = 1 to x do
50216: LD_ADDR_VAR 0 9
50220: PUSH
50221: DOUBLE
50222: LD_INT 1
50224: DEC
50225: ST_TO_ADDR
50226: LD_VAR 0 13
50230: PUSH
50231: FOR_TO
50232: IFFALSE 50594
// begin InitHc ;
50234: CALL_OW 19
// if not f then
50238: LD_VAR 0 12
50242: NOT
50243: IFFALSE 50332
// begin PrepareHuman ( false , i , skill ) ;
50245: LD_INT 0
50247: PPUSH
50248: LD_VAR 0 8
50252: PPUSH
50253: LD_VAR 0 4
50257: PPUSH
50258: CALL_OW 380
// un := CreateHuman ;
50262: LD_ADDR_VAR 0 14
50266: PUSH
50267: CALL_OW 44
50271: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50272: LD_ADDR_VAR 0 7
50276: PUSH
50277: LD_VAR 0 7
50281: PPUSH
50282: LD_INT 1
50284: PPUSH
50285: LD_VAR 0 14
50289: PPUSH
50290: CALL_OW 2
50294: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50295: LD_VAR 0 14
50299: PPUSH
50300: LD_VAR 0 1
50304: PPUSH
50305: CALL_OW 250
50309: PPUSH
50310: LD_VAR 0 1
50314: PPUSH
50315: CALL_OW 251
50319: PPUSH
50320: LD_INT 10
50322: PPUSH
50323: LD_INT 0
50325: PPUSH
50326: CALL_OW 50
// continue ;
50330: GO 50231
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50332: LD_VAR 0 12
50336: PUSH
50337: LD_INT 1
50339: ARRAY
50340: PPUSH
50341: CALL_OW 313
50345: PUSH
50346: LD_VAR 0 12
50350: PUSH
50351: LD_INT 1
50353: ARRAY
50354: PPUSH
50355: CALL_OW 266
50359: PUSH
50360: LD_INT 32
50362: PUSH
50363: LD_INT 31
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: IN
50370: AND
50371: PUSH
50372: LD_VAR 0 12
50376: PUSH
50377: LD_INT 1
50379: ARRAY
50380: PPUSH
50381: CALL_OW 313
50385: PUSH
50386: LD_INT 6
50388: EQUAL
50389: OR
50390: IFFALSE 50410
// f := Delete ( f , 1 ) ;
50392: LD_ADDR_VAR 0 12
50396: PUSH
50397: LD_VAR 0 12
50401: PPUSH
50402: LD_INT 1
50404: PPUSH
50405: CALL_OW 3
50409: ST_TO_ADDR
// if not f then
50410: LD_VAR 0 12
50414: NOT
50415: IFFALSE 50433
// begin x := x + 2 ;
50417: LD_ADDR_VAR 0 13
50421: PUSH
50422: LD_VAR 0 13
50426: PUSH
50427: LD_INT 2
50429: PLUS
50430: ST_TO_ADDR
// continue ;
50431: GO 50231
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50433: LD_VAR 0 12
50437: PUSH
50438: LD_INT 1
50440: ARRAY
50441: PPUSH
50442: CALL_OW 266
50446: PUSH
50447: LD_INT 5
50449: EQUAL
50450: IFFALSE 50524
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50452: LD_VAR 0 12
50456: PUSH
50457: LD_INT 1
50459: ARRAY
50460: PPUSH
50461: CALL_OW 313
50465: PUSH
50466: LD_INT 3
50468: LESS
50469: IFFALSE 50505
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50471: LD_INT 0
50473: PPUSH
50474: LD_INT 5
50476: PUSH
50477: LD_INT 8
50479: PUSH
50480: LD_INT 9
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: LIST
50487: PUSH
50488: LD_VAR 0 17
50492: ARRAY
50493: PPUSH
50494: LD_VAR 0 4
50498: PPUSH
50499: CALL_OW 380
50503: GO 50522
// PrepareHuman ( false , i , skill ) ;
50505: LD_INT 0
50507: PPUSH
50508: LD_VAR 0 8
50512: PPUSH
50513: LD_VAR 0 4
50517: PPUSH
50518: CALL_OW 380
// end else
50522: GO 50541
// PrepareHuman ( false , i , skill ) ;
50524: LD_INT 0
50526: PPUSH
50527: LD_VAR 0 8
50531: PPUSH
50532: LD_VAR 0 4
50536: PPUSH
50537: CALL_OW 380
// un := CreateHuman ;
50541: LD_ADDR_VAR 0 14
50545: PUSH
50546: CALL_OW 44
50550: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50551: LD_ADDR_VAR 0 7
50555: PUSH
50556: LD_VAR 0 7
50560: PPUSH
50561: LD_INT 1
50563: PPUSH
50564: LD_VAR 0 14
50568: PPUSH
50569: CALL_OW 2
50573: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50574: LD_VAR 0 14
50578: PPUSH
50579: LD_VAR 0 12
50583: PUSH
50584: LD_INT 1
50586: ARRAY
50587: PPUSH
50588: CALL_OW 52
// end ;
50592: GO 50231
50594: POP
50595: POP
// end ;
50596: GO 49533
50598: POP
50599: POP
// result := result ^ buildings ;
50600: LD_ADDR_VAR 0 7
50604: PUSH
50605: LD_VAR 0 7
50609: PUSH
50610: LD_VAR 0 18
50614: ADD
50615: ST_TO_ADDR
// end else
50616: GO 50759
// begin for i = 1 to personel do
50618: LD_ADDR_VAR 0 8
50622: PUSH
50623: DOUBLE
50624: LD_INT 1
50626: DEC
50627: ST_TO_ADDR
50628: LD_VAR 0 6
50632: PUSH
50633: FOR_TO
50634: IFFALSE 50757
// begin if i > 4 then
50636: LD_VAR 0 8
50640: PUSH
50641: LD_INT 4
50643: GREATER
50644: IFFALSE 50648
// break ;
50646: GO 50757
// x := personel [ i ] ;
50648: LD_ADDR_VAR 0 13
50652: PUSH
50653: LD_VAR 0 6
50657: PUSH
50658: LD_VAR 0 8
50662: ARRAY
50663: ST_TO_ADDR
// if x = - 1 then
50664: LD_VAR 0 13
50668: PUSH
50669: LD_INT 1
50671: NEG
50672: EQUAL
50673: IFFALSE 50677
// continue ;
50675: GO 50633
// PrepareHuman ( false , i , skill ) ;
50677: LD_INT 0
50679: PPUSH
50680: LD_VAR 0 8
50684: PPUSH
50685: LD_VAR 0 4
50689: PPUSH
50690: CALL_OW 380
// un := CreateHuman ;
50694: LD_ADDR_VAR 0 14
50698: PUSH
50699: CALL_OW 44
50703: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50704: LD_VAR 0 14
50708: PPUSH
50709: LD_VAR 0 1
50713: PPUSH
50714: CALL_OW 250
50718: PPUSH
50719: LD_VAR 0 1
50723: PPUSH
50724: CALL_OW 251
50728: PPUSH
50729: LD_INT 10
50731: PPUSH
50732: LD_INT 0
50734: PPUSH
50735: CALL_OW 50
// result := result ^ un ;
50739: LD_ADDR_VAR 0 7
50743: PUSH
50744: LD_VAR 0 7
50748: PUSH
50749: LD_VAR 0 14
50753: ADD
50754: ST_TO_ADDR
// end ;
50755: GO 50633
50757: POP
50758: POP
// end ; end ;
50759: LD_VAR 0 7
50763: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50764: LD_INT 0
50766: PPUSH
50767: PPUSH
50768: PPUSH
50769: PPUSH
50770: PPUSH
50771: PPUSH
50772: PPUSH
50773: PPUSH
50774: PPUSH
50775: PPUSH
50776: PPUSH
50777: PPUSH
50778: PPUSH
50779: PPUSH
50780: PPUSH
50781: PPUSH
// result := false ;
50782: LD_ADDR_VAR 0 3
50786: PUSH
50787: LD_INT 0
50789: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50790: LD_VAR 0 1
50794: NOT
50795: PUSH
50796: LD_VAR 0 1
50800: PPUSH
50801: CALL_OW 266
50805: PUSH
50806: LD_INT 32
50808: PUSH
50809: LD_INT 33
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: IN
50816: NOT
50817: OR
50818: IFFALSE 50822
// exit ;
50820: GO 51958
// nat := GetNation ( tower ) ;
50822: LD_ADDR_VAR 0 12
50826: PUSH
50827: LD_VAR 0 1
50831: PPUSH
50832: CALL_OW 248
50836: ST_TO_ADDR
// side := GetSide ( tower ) ;
50837: LD_ADDR_VAR 0 16
50841: PUSH
50842: LD_VAR 0 1
50846: PPUSH
50847: CALL_OW 255
50851: ST_TO_ADDR
// x := GetX ( tower ) ;
50852: LD_ADDR_VAR 0 10
50856: PUSH
50857: LD_VAR 0 1
50861: PPUSH
50862: CALL_OW 250
50866: ST_TO_ADDR
// y := GetY ( tower ) ;
50867: LD_ADDR_VAR 0 11
50871: PUSH
50872: LD_VAR 0 1
50876: PPUSH
50877: CALL_OW 251
50881: ST_TO_ADDR
// if not x or not y then
50882: LD_VAR 0 10
50886: NOT
50887: PUSH
50888: LD_VAR 0 11
50892: NOT
50893: OR
50894: IFFALSE 50898
// exit ;
50896: GO 51958
// weapon := 0 ;
50898: LD_ADDR_VAR 0 18
50902: PUSH
50903: LD_INT 0
50905: ST_TO_ADDR
// fac_list := [ ] ;
50906: LD_ADDR_VAR 0 17
50910: PUSH
50911: EMPTY
50912: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
50913: LD_ADDR_VAR 0 6
50917: PUSH
50918: LD_VAR 0 1
50922: PPUSH
50923: CALL_OW 274
50927: PPUSH
50928: LD_VAR 0 2
50932: PPUSH
50933: CALL 48536 0 2
50937: PPUSH
50938: LD_INT 30
50940: PUSH
50941: LD_INT 3
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PPUSH
50948: CALL_OW 72
50952: ST_TO_ADDR
// if not factories then
50953: LD_VAR 0 6
50957: NOT
50958: IFFALSE 50962
// exit ;
50960: GO 51958
// for i in factories do
50962: LD_ADDR_VAR 0 8
50966: PUSH
50967: LD_VAR 0 6
50971: PUSH
50972: FOR_IN
50973: IFFALSE 50998
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50975: LD_ADDR_VAR 0 17
50979: PUSH
50980: LD_VAR 0 17
50984: PUSH
50985: LD_VAR 0 8
50989: PPUSH
50990: CALL_OW 478
50994: UNION
50995: ST_TO_ADDR
50996: GO 50972
50998: POP
50999: POP
// if not fac_list then
51000: LD_VAR 0 17
51004: NOT
51005: IFFALSE 51009
// exit ;
51007: GO 51958
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51009: LD_ADDR_VAR 0 5
51013: PUSH
51014: LD_INT 4
51016: PUSH
51017: LD_INT 5
51019: PUSH
51020: LD_INT 9
51022: PUSH
51023: LD_INT 10
51025: PUSH
51026: LD_INT 6
51028: PUSH
51029: LD_INT 7
51031: PUSH
51032: LD_INT 11
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 27
51046: PUSH
51047: LD_INT 28
51049: PUSH
51050: LD_INT 26
51052: PUSH
51053: LD_INT 30
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 43
51064: PUSH
51065: LD_INT 44
51067: PUSH
51068: LD_INT 46
51070: PUSH
51071: LD_INT 45
51073: PUSH
51074: LD_INT 47
51076: PUSH
51077: LD_INT 49
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: LIST
51092: PUSH
51093: LD_VAR 0 12
51097: ARRAY
51098: ST_TO_ADDR
// for i in list do
51099: LD_ADDR_VAR 0 8
51103: PUSH
51104: LD_VAR 0 5
51108: PUSH
51109: FOR_IN
51110: IFFALSE 51143
// if not i in fac_list then
51112: LD_VAR 0 8
51116: PUSH
51117: LD_VAR 0 17
51121: IN
51122: NOT
51123: IFFALSE 51141
// list := list diff i ;
51125: LD_ADDR_VAR 0 5
51129: PUSH
51130: LD_VAR 0 5
51134: PUSH
51135: LD_VAR 0 8
51139: DIFF
51140: ST_TO_ADDR
51141: GO 51109
51143: POP
51144: POP
// if not list then
51145: LD_VAR 0 5
51149: NOT
51150: IFFALSE 51154
// exit ;
51152: GO 51958
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51154: LD_VAR 0 12
51158: PUSH
51159: LD_INT 3
51161: EQUAL
51162: PUSH
51163: LD_INT 49
51165: PUSH
51166: LD_VAR 0 5
51170: IN
51171: AND
51172: PUSH
51173: LD_INT 31
51175: PPUSH
51176: LD_VAR 0 16
51180: PPUSH
51181: CALL_OW 321
51185: PUSH
51186: LD_INT 2
51188: EQUAL
51189: AND
51190: IFFALSE 51250
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51192: LD_INT 22
51194: PUSH
51195: LD_VAR 0 16
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 35
51206: PUSH
51207: LD_INT 49
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 91
51216: PUSH
51217: LD_VAR 0 1
51221: PUSH
51222: LD_INT 10
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: LIST
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: LIST
51234: PPUSH
51235: CALL_OW 69
51239: NOT
51240: IFFALSE 51250
// weapon := ru_time_lapser ;
51242: LD_ADDR_VAR 0 18
51246: PUSH
51247: LD_INT 49
51249: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51250: LD_VAR 0 12
51254: PUSH
51255: LD_INT 1
51257: PUSH
51258: LD_INT 2
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: IN
51265: PUSH
51266: LD_INT 11
51268: PUSH
51269: LD_VAR 0 5
51273: IN
51274: PUSH
51275: LD_INT 30
51277: PUSH
51278: LD_VAR 0 5
51282: IN
51283: OR
51284: AND
51285: PUSH
51286: LD_INT 6
51288: PPUSH
51289: LD_VAR 0 16
51293: PPUSH
51294: CALL_OW 321
51298: PUSH
51299: LD_INT 2
51301: EQUAL
51302: AND
51303: IFFALSE 51468
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51305: LD_INT 22
51307: PUSH
51308: LD_VAR 0 16
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 2
51319: PUSH
51320: LD_INT 35
51322: PUSH
51323: LD_INT 11
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 35
51332: PUSH
51333: LD_INT 30
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 91
51347: PUSH
51348: LD_VAR 0 1
51352: PUSH
51353: LD_INT 18
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: LIST
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: LIST
51365: PPUSH
51366: CALL_OW 69
51370: NOT
51371: PUSH
51372: LD_INT 22
51374: PUSH
51375: LD_VAR 0 16
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 2
51386: PUSH
51387: LD_INT 30
51389: PUSH
51390: LD_INT 32
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 30
51399: PUSH
51400: LD_INT 33
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 91
51414: PUSH
51415: LD_VAR 0 1
51419: PUSH
51420: LD_INT 12
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: LIST
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: LIST
51432: PUSH
51433: EMPTY
51434: LIST
51435: PPUSH
51436: CALL_OW 69
51440: PUSH
51441: LD_INT 2
51443: GREATER
51444: AND
51445: IFFALSE 51468
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51447: LD_ADDR_VAR 0 18
51451: PUSH
51452: LD_INT 11
51454: PUSH
51455: LD_INT 30
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_VAR 0 12
51466: ARRAY
51467: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51468: LD_VAR 0 18
51472: NOT
51473: PUSH
51474: LD_INT 40
51476: PPUSH
51477: LD_VAR 0 16
51481: PPUSH
51482: CALL_OW 321
51486: PUSH
51487: LD_INT 2
51489: EQUAL
51490: AND
51491: PUSH
51492: LD_INT 7
51494: PUSH
51495: LD_VAR 0 5
51499: IN
51500: PUSH
51501: LD_INT 28
51503: PUSH
51504: LD_VAR 0 5
51508: IN
51509: OR
51510: PUSH
51511: LD_INT 45
51513: PUSH
51514: LD_VAR 0 5
51518: IN
51519: OR
51520: AND
51521: IFFALSE 51775
// begin hex := GetHexInfo ( x , y ) ;
51523: LD_ADDR_VAR 0 4
51527: PUSH
51528: LD_VAR 0 10
51532: PPUSH
51533: LD_VAR 0 11
51537: PPUSH
51538: CALL_OW 546
51542: ST_TO_ADDR
// if hex [ 1 ] then
51543: LD_VAR 0 4
51547: PUSH
51548: LD_INT 1
51550: ARRAY
51551: IFFALSE 51555
// exit ;
51553: GO 51958
// height := hex [ 2 ] ;
51555: LD_ADDR_VAR 0 15
51559: PUSH
51560: LD_VAR 0 4
51564: PUSH
51565: LD_INT 2
51567: ARRAY
51568: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51569: LD_ADDR_VAR 0 14
51573: PUSH
51574: LD_INT 0
51576: PUSH
51577: LD_INT 2
51579: PUSH
51580: LD_INT 3
51582: PUSH
51583: LD_INT 5
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: ST_TO_ADDR
// for i in tmp do
51592: LD_ADDR_VAR 0 8
51596: PUSH
51597: LD_VAR 0 14
51601: PUSH
51602: FOR_IN
51603: IFFALSE 51773
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51605: LD_ADDR_VAR 0 9
51609: PUSH
51610: LD_VAR 0 10
51614: PPUSH
51615: LD_VAR 0 8
51619: PPUSH
51620: LD_INT 5
51622: PPUSH
51623: CALL_OW 272
51627: PUSH
51628: LD_VAR 0 11
51632: PPUSH
51633: LD_VAR 0 8
51637: PPUSH
51638: LD_INT 5
51640: PPUSH
51641: CALL_OW 273
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51650: LD_VAR 0 9
51654: PUSH
51655: LD_INT 1
51657: ARRAY
51658: PPUSH
51659: LD_VAR 0 9
51663: PUSH
51664: LD_INT 2
51666: ARRAY
51667: PPUSH
51668: CALL_OW 488
51672: IFFALSE 51771
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51674: LD_ADDR_VAR 0 4
51678: PUSH
51679: LD_VAR 0 9
51683: PUSH
51684: LD_INT 1
51686: ARRAY
51687: PPUSH
51688: LD_VAR 0 9
51692: PUSH
51693: LD_INT 2
51695: ARRAY
51696: PPUSH
51697: CALL_OW 546
51701: ST_TO_ADDR
// if hex [ 1 ] then
51702: LD_VAR 0 4
51706: PUSH
51707: LD_INT 1
51709: ARRAY
51710: IFFALSE 51714
// continue ;
51712: GO 51602
// h := hex [ 2 ] ;
51714: LD_ADDR_VAR 0 13
51718: PUSH
51719: LD_VAR 0 4
51723: PUSH
51724: LD_INT 2
51726: ARRAY
51727: ST_TO_ADDR
// if h + 7 < height then
51728: LD_VAR 0 13
51732: PUSH
51733: LD_INT 7
51735: PLUS
51736: PUSH
51737: LD_VAR 0 15
51741: LESS
51742: IFFALSE 51771
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51744: LD_ADDR_VAR 0 18
51748: PUSH
51749: LD_INT 7
51751: PUSH
51752: LD_INT 28
51754: PUSH
51755: LD_INT 45
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: LIST
51762: PUSH
51763: LD_VAR 0 12
51767: ARRAY
51768: ST_TO_ADDR
// break ;
51769: GO 51773
// end ; end ; end ;
51771: GO 51602
51773: POP
51774: POP
// end ; if not weapon then
51775: LD_VAR 0 18
51779: NOT
51780: IFFALSE 51840
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51782: LD_ADDR_VAR 0 5
51786: PUSH
51787: LD_VAR 0 5
51791: PUSH
51792: LD_INT 11
51794: PUSH
51795: LD_INT 30
51797: PUSH
51798: LD_INT 49
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: LIST
51805: DIFF
51806: ST_TO_ADDR
// if not list then
51807: LD_VAR 0 5
51811: NOT
51812: IFFALSE 51816
// exit ;
51814: GO 51958
// weapon := list [ rand ( 1 , list ) ] ;
51816: LD_ADDR_VAR 0 18
51820: PUSH
51821: LD_VAR 0 5
51825: PUSH
51826: LD_INT 1
51828: PPUSH
51829: LD_VAR 0 5
51833: PPUSH
51834: CALL_OW 12
51838: ARRAY
51839: ST_TO_ADDR
// end ; if weapon then
51840: LD_VAR 0 18
51844: IFFALSE 51958
// begin tmp := CostOfWeapon ( weapon ) ;
51846: LD_ADDR_VAR 0 14
51850: PUSH
51851: LD_VAR 0 18
51855: PPUSH
51856: CALL_OW 451
51860: ST_TO_ADDR
// j := GetBase ( tower ) ;
51861: LD_ADDR_VAR 0 9
51865: PUSH
51866: LD_VAR 0 1
51870: PPUSH
51871: CALL_OW 274
51875: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51876: LD_VAR 0 9
51880: PPUSH
51881: LD_INT 1
51883: PPUSH
51884: CALL_OW 275
51888: PUSH
51889: LD_VAR 0 14
51893: PUSH
51894: LD_INT 1
51896: ARRAY
51897: GREATEREQUAL
51898: PUSH
51899: LD_VAR 0 9
51903: PPUSH
51904: LD_INT 2
51906: PPUSH
51907: CALL_OW 275
51911: PUSH
51912: LD_VAR 0 14
51916: PUSH
51917: LD_INT 2
51919: ARRAY
51920: GREATEREQUAL
51921: AND
51922: PUSH
51923: LD_VAR 0 9
51927: PPUSH
51928: LD_INT 3
51930: PPUSH
51931: CALL_OW 275
51935: PUSH
51936: LD_VAR 0 14
51940: PUSH
51941: LD_INT 3
51943: ARRAY
51944: GREATEREQUAL
51945: AND
51946: IFFALSE 51958
// result := weapon ;
51948: LD_ADDR_VAR 0 3
51952: PUSH
51953: LD_VAR 0 18
51957: ST_TO_ADDR
// end ; end ;
51958: LD_VAR 0 3
51962: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51963: LD_INT 0
51965: PPUSH
51966: PPUSH
// result := true ;
51967: LD_ADDR_VAR 0 3
51971: PUSH
51972: LD_INT 1
51974: ST_TO_ADDR
// if array1 = array2 then
51975: LD_VAR 0 1
51979: PUSH
51980: LD_VAR 0 2
51984: EQUAL
51985: IFFALSE 52045
// begin for i = 1 to array1 do
51987: LD_ADDR_VAR 0 4
51991: PUSH
51992: DOUBLE
51993: LD_INT 1
51995: DEC
51996: ST_TO_ADDR
51997: LD_VAR 0 1
52001: PUSH
52002: FOR_TO
52003: IFFALSE 52041
// if array1 [ i ] <> array2 [ i ] then
52005: LD_VAR 0 1
52009: PUSH
52010: LD_VAR 0 4
52014: ARRAY
52015: PUSH
52016: LD_VAR 0 2
52020: PUSH
52021: LD_VAR 0 4
52025: ARRAY
52026: NONEQUAL
52027: IFFALSE 52039
// begin result := false ;
52029: LD_ADDR_VAR 0 3
52033: PUSH
52034: LD_INT 0
52036: ST_TO_ADDR
// break ;
52037: GO 52041
// end ;
52039: GO 52002
52041: POP
52042: POP
// end else
52043: GO 52053
// result := false ;
52045: LD_ADDR_VAR 0 3
52049: PUSH
52050: LD_INT 0
52052: ST_TO_ADDR
// end ;
52053: LD_VAR 0 3
52057: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52058: LD_INT 0
52060: PPUSH
52061: PPUSH
52062: PPUSH
// pom := GetBase ( fac ) ;
52063: LD_ADDR_VAR 0 5
52067: PUSH
52068: LD_VAR 0 1
52072: PPUSH
52073: CALL_OW 274
52077: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52078: LD_ADDR_VAR 0 4
52082: PUSH
52083: LD_VAR 0 2
52087: PUSH
52088: LD_INT 1
52090: ARRAY
52091: PPUSH
52092: LD_VAR 0 2
52096: PUSH
52097: LD_INT 2
52099: ARRAY
52100: PPUSH
52101: LD_VAR 0 2
52105: PUSH
52106: LD_INT 3
52108: ARRAY
52109: PPUSH
52110: LD_VAR 0 2
52114: PUSH
52115: LD_INT 4
52117: ARRAY
52118: PPUSH
52119: CALL_OW 449
52123: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52124: LD_ADDR_VAR 0 3
52128: PUSH
52129: LD_VAR 0 5
52133: PPUSH
52134: LD_INT 1
52136: PPUSH
52137: CALL_OW 275
52141: PUSH
52142: LD_VAR 0 4
52146: PUSH
52147: LD_INT 1
52149: ARRAY
52150: GREATEREQUAL
52151: PUSH
52152: LD_VAR 0 5
52156: PPUSH
52157: LD_INT 2
52159: PPUSH
52160: CALL_OW 275
52164: PUSH
52165: LD_VAR 0 4
52169: PUSH
52170: LD_INT 2
52172: ARRAY
52173: GREATEREQUAL
52174: AND
52175: PUSH
52176: LD_VAR 0 5
52180: PPUSH
52181: LD_INT 3
52183: PPUSH
52184: CALL_OW 275
52188: PUSH
52189: LD_VAR 0 4
52193: PUSH
52194: LD_INT 3
52196: ARRAY
52197: GREATEREQUAL
52198: AND
52199: ST_TO_ADDR
// end ;
52200: LD_VAR 0 3
52204: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52205: LD_INT 0
52207: PPUSH
52208: PPUSH
52209: PPUSH
52210: PPUSH
// pom := GetBase ( building ) ;
52211: LD_ADDR_VAR 0 3
52215: PUSH
52216: LD_VAR 0 1
52220: PPUSH
52221: CALL_OW 274
52225: ST_TO_ADDR
// if not pom then
52226: LD_VAR 0 3
52230: NOT
52231: IFFALSE 52235
// exit ;
52233: GO 52405
// btype := GetBType ( building ) ;
52235: LD_ADDR_VAR 0 5
52239: PUSH
52240: LD_VAR 0 1
52244: PPUSH
52245: CALL_OW 266
52249: ST_TO_ADDR
// if btype = b_armoury then
52250: LD_VAR 0 5
52254: PUSH
52255: LD_INT 4
52257: EQUAL
52258: IFFALSE 52268
// btype := b_barracks ;
52260: LD_ADDR_VAR 0 5
52264: PUSH
52265: LD_INT 5
52267: ST_TO_ADDR
// if btype = b_depot then
52268: LD_VAR 0 5
52272: PUSH
52273: LD_INT 0
52275: EQUAL
52276: IFFALSE 52286
// btype := b_warehouse ;
52278: LD_ADDR_VAR 0 5
52282: PUSH
52283: LD_INT 1
52285: ST_TO_ADDR
// if btype = b_workshop then
52286: LD_VAR 0 5
52290: PUSH
52291: LD_INT 2
52293: EQUAL
52294: IFFALSE 52304
// btype := b_factory ;
52296: LD_ADDR_VAR 0 5
52300: PUSH
52301: LD_INT 3
52303: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52304: LD_ADDR_VAR 0 4
52308: PUSH
52309: LD_VAR 0 5
52313: PPUSH
52314: LD_VAR 0 1
52318: PPUSH
52319: CALL_OW 248
52323: PPUSH
52324: CALL_OW 450
52328: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52329: LD_ADDR_VAR 0 2
52333: PUSH
52334: LD_VAR 0 3
52338: PPUSH
52339: LD_INT 1
52341: PPUSH
52342: CALL_OW 275
52346: PUSH
52347: LD_VAR 0 4
52351: PUSH
52352: LD_INT 1
52354: ARRAY
52355: GREATEREQUAL
52356: PUSH
52357: LD_VAR 0 3
52361: PPUSH
52362: LD_INT 2
52364: PPUSH
52365: CALL_OW 275
52369: PUSH
52370: LD_VAR 0 4
52374: PUSH
52375: LD_INT 2
52377: ARRAY
52378: GREATEREQUAL
52379: AND
52380: PUSH
52381: LD_VAR 0 3
52385: PPUSH
52386: LD_INT 3
52388: PPUSH
52389: CALL_OW 275
52393: PUSH
52394: LD_VAR 0 4
52398: PUSH
52399: LD_INT 3
52401: ARRAY
52402: GREATEREQUAL
52403: AND
52404: ST_TO_ADDR
// end ;
52405: LD_VAR 0 2
52409: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52410: LD_INT 0
52412: PPUSH
52413: PPUSH
52414: PPUSH
// pom := GetBase ( building ) ;
52415: LD_ADDR_VAR 0 4
52419: PUSH
52420: LD_VAR 0 1
52424: PPUSH
52425: CALL_OW 274
52429: ST_TO_ADDR
// if not pom then
52430: LD_VAR 0 4
52434: NOT
52435: IFFALSE 52439
// exit ;
52437: GO 52540
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52439: LD_ADDR_VAR 0 5
52443: PUSH
52444: LD_VAR 0 2
52448: PPUSH
52449: LD_VAR 0 1
52453: PPUSH
52454: CALL_OW 248
52458: PPUSH
52459: CALL_OW 450
52463: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52464: LD_ADDR_VAR 0 3
52468: PUSH
52469: LD_VAR 0 4
52473: PPUSH
52474: LD_INT 1
52476: PPUSH
52477: CALL_OW 275
52481: PUSH
52482: LD_VAR 0 5
52486: PUSH
52487: LD_INT 1
52489: ARRAY
52490: GREATEREQUAL
52491: PUSH
52492: LD_VAR 0 4
52496: PPUSH
52497: LD_INT 2
52499: PPUSH
52500: CALL_OW 275
52504: PUSH
52505: LD_VAR 0 5
52509: PUSH
52510: LD_INT 2
52512: ARRAY
52513: GREATEREQUAL
52514: AND
52515: PUSH
52516: LD_VAR 0 4
52520: PPUSH
52521: LD_INT 3
52523: PPUSH
52524: CALL_OW 275
52528: PUSH
52529: LD_VAR 0 5
52533: PUSH
52534: LD_INT 3
52536: ARRAY
52537: GREATEREQUAL
52538: AND
52539: ST_TO_ADDR
// end ;
52540: LD_VAR 0 3
52544: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
52545: LD_INT 0
52547: PPUSH
52548: PPUSH
52549: PPUSH
52550: PPUSH
52551: PPUSH
52552: PPUSH
52553: PPUSH
52554: PPUSH
52555: PPUSH
52556: PPUSH
// result := false ;
52557: LD_ADDR_VAR 0 6
52561: PUSH
52562: LD_INT 0
52564: ST_TO_ADDR
// if not base or not btype or not x or not y then
52565: LD_VAR 0 1
52569: NOT
52570: PUSH
52571: LD_VAR 0 2
52575: NOT
52576: OR
52577: PUSH
52578: LD_VAR 0 3
52582: NOT
52583: OR
52584: PUSH
52585: LD_VAR 0 4
52589: NOT
52590: OR
52591: IFFALSE 52595
// exit ;
52593: GO 53204
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
52595: LD_ADDR_VAR 0 12
52599: PUSH
52600: LD_VAR 0 2
52604: PPUSH
52605: LD_VAR 0 3
52609: PPUSH
52610: LD_VAR 0 4
52614: PPUSH
52615: LD_VAR 0 5
52619: PPUSH
52620: LD_VAR 0 1
52624: PUSH
52625: LD_INT 1
52627: ARRAY
52628: PPUSH
52629: CALL_OW 248
52633: PPUSH
52634: LD_INT 0
52636: PPUSH
52637: CALL 54041 0 6
52641: ST_TO_ADDR
// if not hexes then
52642: LD_VAR 0 12
52646: NOT
52647: IFFALSE 52651
// exit ;
52649: GO 53204
// for i = 1 to hexes do
52651: LD_ADDR_VAR 0 7
52655: PUSH
52656: DOUBLE
52657: LD_INT 1
52659: DEC
52660: ST_TO_ADDR
52661: LD_VAR 0 12
52665: PUSH
52666: FOR_TO
52667: IFFALSE 53202
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52669: LD_ADDR_VAR 0 11
52673: PUSH
52674: LD_VAR 0 12
52678: PUSH
52679: LD_VAR 0 7
52683: ARRAY
52684: PUSH
52685: LD_INT 1
52687: ARRAY
52688: PPUSH
52689: LD_VAR 0 12
52693: PUSH
52694: LD_VAR 0 7
52698: ARRAY
52699: PUSH
52700: LD_INT 2
52702: ARRAY
52703: PPUSH
52704: CALL_OW 428
52708: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52709: LD_VAR 0 12
52713: PUSH
52714: LD_VAR 0 7
52718: ARRAY
52719: PUSH
52720: LD_INT 1
52722: ARRAY
52723: PPUSH
52724: LD_VAR 0 12
52728: PUSH
52729: LD_VAR 0 7
52733: ARRAY
52734: PUSH
52735: LD_INT 2
52737: ARRAY
52738: PPUSH
52739: CALL_OW 351
52743: PUSH
52744: LD_VAR 0 12
52748: PUSH
52749: LD_VAR 0 7
52753: ARRAY
52754: PUSH
52755: LD_INT 1
52757: ARRAY
52758: PPUSH
52759: LD_VAR 0 12
52763: PUSH
52764: LD_VAR 0 7
52768: ARRAY
52769: PUSH
52770: LD_INT 2
52772: ARRAY
52773: PPUSH
52774: CALL_OW 488
52778: NOT
52779: OR
52780: PUSH
52781: LD_VAR 0 11
52785: PPUSH
52786: CALL_OW 247
52790: PUSH
52791: LD_INT 3
52793: EQUAL
52794: OR
52795: IFFALSE 52801
// exit ;
52797: POP
52798: POP
52799: GO 53204
// if not tmp or not tmp in base then
52801: LD_VAR 0 11
52805: NOT
52806: PUSH
52807: LD_VAR 0 11
52811: PUSH
52812: LD_VAR 0 1
52816: IN
52817: NOT
52818: OR
52819: IFFALSE 52823
// continue ;
52821: GO 52666
// result := true ;
52823: LD_ADDR_VAR 0 6
52827: PUSH
52828: LD_INT 1
52830: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52831: LD_ADDR_VAR 0 15
52835: PUSH
52836: LD_VAR 0 1
52840: PPUSH
52841: LD_INT 22
52843: PUSH
52844: LD_VAR 0 11
52848: PPUSH
52849: CALL_OW 255
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 2
52860: PUSH
52861: LD_INT 30
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 30
52873: PUSH
52874: LD_INT 1
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: LIST
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PPUSH
52890: CALL_OW 72
52894: ST_TO_ADDR
// if dep then
52895: LD_VAR 0 15
52899: IFFALSE 53035
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52901: LD_ADDR_VAR 0 14
52905: PUSH
52906: LD_VAR 0 15
52910: PUSH
52911: LD_INT 1
52913: ARRAY
52914: PPUSH
52915: CALL_OW 250
52919: PPUSH
52920: LD_VAR 0 15
52924: PUSH
52925: LD_INT 1
52927: ARRAY
52928: PPUSH
52929: CALL_OW 254
52933: PPUSH
52934: LD_INT 5
52936: PPUSH
52937: CALL_OW 272
52941: PUSH
52942: LD_VAR 0 15
52946: PUSH
52947: LD_INT 1
52949: ARRAY
52950: PPUSH
52951: CALL_OW 251
52955: PPUSH
52956: LD_VAR 0 15
52960: PUSH
52961: LD_INT 1
52963: ARRAY
52964: PPUSH
52965: CALL_OW 254
52969: PPUSH
52970: LD_INT 5
52972: PPUSH
52973: CALL_OW 273
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52982: LD_VAR 0 14
52986: PUSH
52987: LD_INT 1
52989: ARRAY
52990: PPUSH
52991: LD_VAR 0 14
52995: PUSH
52996: LD_INT 2
52998: ARRAY
52999: PPUSH
53000: CALL_OW 488
53004: IFFALSE 53035
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53006: LD_VAR 0 11
53010: PPUSH
53011: LD_VAR 0 14
53015: PUSH
53016: LD_INT 1
53018: ARRAY
53019: PPUSH
53020: LD_VAR 0 14
53024: PUSH
53025: LD_INT 2
53027: ARRAY
53028: PPUSH
53029: CALL_OW 111
// continue ;
53033: GO 52666
// end ; end ; r := GetDir ( tmp ) ;
53035: LD_ADDR_VAR 0 13
53039: PUSH
53040: LD_VAR 0 11
53044: PPUSH
53045: CALL_OW 254
53049: ST_TO_ADDR
// if r = 5 then
53050: LD_VAR 0 13
53054: PUSH
53055: LD_INT 5
53057: EQUAL
53058: IFFALSE 53068
// r := 0 ;
53060: LD_ADDR_VAR 0 13
53064: PUSH
53065: LD_INT 0
53067: ST_TO_ADDR
// for j = r to 5 do
53068: LD_ADDR_VAR 0 8
53072: PUSH
53073: DOUBLE
53074: LD_VAR 0 13
53078: DEC
53079: ST_TO_ADDR
53080: LD_INT 5
53082: PUSH
53083: FOR_TO
53084: IFFALSE 53198
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53086: LD_ADDR_VAR 0 9
53090: PUSH
53091: LD_VAR 0 11
53095: PPUSH
53096: CALL_OW 250
53100: PPUSH
53101: LD_VAR 0 8
53105: PPUSH
53106: LD_INT 2
53108: PPUSH
53109: CALL_OW 272
53113: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53114: LD_ADDR_VAR 0 10
53118: PUSH
53119: LD_VAR 0 11
53123: PPUSH
53124: CALL_OW 251
53128: PPUSH
53129: LD_VAR 0 8
53133: PPUSH
53134: LD_INT 2
53136: PPUSH
53137: CALL_OW 273
53141: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53142: LD_VAR 0 9
53146: PPUSH
53147: LD_VAR 0 10
53151: PPUSH
53152: CALL_OW 488
53156: PUSH
53157: LD_VAR 0 9
53161: PPUSH
53162: LD_VAR 0 10
53166: PPUSH
53167: CALL_OW 428
53171: NOT
53172: AND
53173: IFFALSE 53196
// begin ComMoveXY ( tmp , _x , _y ) ;
53175: LD_VAR 0 11
53179: PPUSH
53180: LD_VAR 0 9
53184: PPUSH
53185: LD_VAR 0 10
53189: PPUSH
53190: CALL_OW 111
// break ;
53194: GO 53198
// end ; end ;
53196: GO 53083
53198: POP
53199: POP
// end ;
53200: GO 52666
53202: POP
53203: POP
// end ;
53204: LD_VAR 0 6
53208: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
53209: LD_INT 0
53211: PPUSH
53212: PPUSH
53213: PPUSH
53214: PPUSH
53215: PPUSH
53216: PPUSH
53217: PPUSH
53218: PPUSH
53219: PPUSH
53220: PPUSH
// result := false ;
53221: LD_ADDR_VAR 0 6
53225: PUSH
53226: LD_INT 0
53228: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53229: LD_VAR 0 1
53233: NOT
53234: PUSH
53235: LD_VAR 0 1
53239: PPUSH
53240: CALL_OW 266
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: IN
53255: NOT
53256: OR
53257: PUSH
53258: LD_VAR 0 2
53262: NOT
53263: OR
53264: PUSH
53265: LD_VAR 0 5
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: LD_INT 2
53278: PUSH
53279: LD_INT 3
53281: PUSH
53282: LD_INT 4
53284: PUSH
53285: LD_INT 5
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: IN
53296: NOT
53297: OR
53298: PUSH
53299: LD_VAR 0 3
53303: PPUSH
53304: LD_VAR 0 4
53308: PPUSH
53309: CALL_OW 488
53313: NOT
53314: OR
53315: IFFALSE 53319
// exit ;
53317: GO 54036
// pom := GetBase ( depot ) ;
53319: LD_ADDR_VAR 0 10
53323: PUSH
53324: LD_VAR 0 1
53328: PPUSH
53329: CALL_OW 274
53333: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53334: LD_ADDR_VAR 0 11
53338: PUSH
53339: LD_VAR 0 2
53343: PPUSH
53344: LD_VAR 0 1
53348: PPUSH
53349: CALL_OW 248
53353: PPUSH
53354: CALL_OW 450
53358: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53359: LD_VAR 0 10
53363: PPUSH
53364: LD_INT 1
53366: PPUSH
53367: CALL_OW 275
53371: PUSH
53372: LD_VAR 0 11
53376: PUSH
53377: LD_INT 1
53379: ARRAY
53380: GREATEREQUAL
53381: PUSH
53382: LD_VAR 0 10
53386: PPUSH
53387: LD_INT 2
53389: PPUSH
53390: CALL_OW 275
53394: PUSH
53395: LD_VAR 0 11
53399: PUSH
53400: LD_INT 2
53402: ARRAY
53403: GREATEREQUAL
53404: AND
53405: PUSH
53406: LD_VAR 0 10
53410: PPUSH
53411: LD_INT 3
53413: PPUSH
53414: CALL_OW 275
53418: PUSH
53419: LD_VAR 0 11
53423: PUSH
53424: LD_INT 3
53426: ARRAY
53427: GREATEREQUAL
53428: AND
53429: NOT
53430: IFFALSE 53434
// exit ;
53432: GO 54036
// if GetBType ( depot ) = b_depot then
53434: LD_VAR 0 1
53438: PPUSH
53439: CALL_OW 266
53443: PUSH
53444: LD_INT 0
53446: EQUAL
53447: IFFALSE 53459
// dist := 28 else
53449: LD_ADDR_VAR 0 14
53453: PUSH
53454: LD_INT 28
53456: ST_TO_ADDR
53457: GO 53467
// dist := 36 ;
53459: LD_ADDR_VAR 0 14
53463: PUSH
53464: LD_INT 36
53466: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53467: LD_VAR 0 1
53471: PPUSH
53472: LD_VAR 0 3
53476: PPUSH
53477: LD_VAR 0 4
53481: PPUSH
53482: CALL_OW 297
53486: PUSH
53487: LD_VAR 0 14
53491: GREATER
53492: IFFALSE 53496
// exit ;
53494: GO 54036
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53496: LD_ADDR_VAR 0 12
53500: PUSH
53501: LD_VAR 0 2
53505: PPUSH
53506: LD_VAR 0 3
53510: PPUSH
53511: LD_VAR 0 4
53515: PPUSH
53516: LD_VAR 0 5
53520: PPUSH
53521: LD_VAR 0 1
53525: PPUSH
53526: CALL_OW 248
53530: PPUSH
53531: LD_INT 0
53533: PPUSH
53534: CALL 54041 0 6
53538: ST_TO_ADDR
// if not hexes then
53539: LD_VAR 0 12
53543: NOT
53544: IFFALSE 53548
// exit ;
53546: GO 54036
// hex := GetHexInfo ( x , y ) ;
53548: LD_ADDR_VAR 0 15
53552: PUSH
53553: LD_VAR 0 3
53557: PPUSH
53558: LD_VAR 0 4
53562: PPUSH
53563: CALL_OW 546
53567: ST_TO_ADDR
// if hex [ 1 ] then
53568: LD_VAR 0 15
53572: PUSH
53573: LD_INT 1
53575: ARRAY
53576: IFFALSE 53580
// exit ;
53578: GO 54036
// height := hex [ 2 ] ;
53580: LD_ADDR_VAR 0 13
53584: PUSH
53585: LD_VAR 0 15
53589: PUSH
53590: LD_INT 2
53592: ARRAY
53593: ST_TO_ADDR
// for i = 1 to hexes do
53594: LD_ADDR_VAR 0 7
53598: PUSH
53599: DOUBLE
53600: LD_INT 1
53602: DEC
53603: ST_TO_ADDR
53604: LD_VAR 0 12
53608: PUSH
53609: FOR_TO
53610: IFFALSE 53940
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53612: LD_VAR 0 12
53616: PUSH
53617: LD_VAR 0 7
53621: ARRAY
53622: PUSH
53623: LD_INT 1
53625: ARRAY
53626: PPUSH
53627: LD_VAR 0 12
53631: PUSH
53632: LD_VAR 0 7
53636: ARRAY
53637: PUSH
53638: LD_INT 2
53640: ARRAY
53641: PPUSH
53642: CALL_OW 488
53646: NOT
53647: PUSH
53648: LD_VAR 0 12
53652: PUSH
53653: LD_VAR 0 7
53657: ARRAY
53658: PUSH
53659: LD_INT 1
53661: ARRAY
53662: PPUSH
53663: LD_VAR 0 12
53667: PUSH
53668: LD_VAR 0 7
53672: ARRAY
53673: PUSH
53674: LD_INT 2
53676: ARRAY
53677: PPUSH
53678: CALL_OW 428
53682: PUSH
53683: LD_INT 0
53685: GREATER
53686: OR
53687: PUSH
53688: LD_VAR 0 12
53692: PUSH
53693: LD_VAR 0 7
53697: ARRAY
53698: PUSH
53699: LD_INT 1
53701: ARRAY
53702: PPUSH
53703: LD_VAR 0 12
53707: PUSH
53708: LD_VAR 0 7
53712: ARRAY
53713: PUSH
53714: LD_INT 2
53716: ARRAY
53717: PPUSH
53718: CALL_OW 351
53722: OR
53723: IFFALSE 53729
// exit ;
53725: POP
53726: POP
53727: GO 54036
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53729: LD_ADDR_VAR 0 8
53733: PUSH
53734: LD_VAR 0 12
53738: PUSH
53739: LD_VAR 0 7
53743: ARRAY
53744: PUSH
53745: LD_INT 1
53747: ARRAY
53748: PPUSH
53749: LD_VAR 0 12
53753: PUSH
53754: LD_VAR 0 7
53758: ARRAY
53759: PUSH
53760: LD_INT 2
53762: ARRAY
53763: PPUSH
53764: CALL_OW 546
53768: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53769: LD_VAR 0 8
53773: PUSH
53774: LD_INT 1
53776: ARRAY
53777: PUSH
53778: LD_VAR 0 8
53782: PUSH
53783: LD_INT 2
53785: ARRAY
53786: PUSH
53787: LD_VAR 0 13
53791: PUSH
53792: LD_INT 2
53794: PLUS
53795: GREATER
53796: OR
53797: PUSH
53798: LD_VAR 0 8
53802: PUSH
53803: LD_INT 2
53805: ARRAY
53806: PUSH
53807: LD_VAR 0 13
53811: PUSH
53812: LD_INT 2
53814: MINUS
53815: LESS
53816: OR
53817: PUSH
53818: LD_VAR 0 8
53822: PUSH
53823: LD_INT 3
53825: ARRAY
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: LD_INT 8
53832: PUSH
53833: LD_INT 9
53835: PUSH
53836: LD_INT 10
53838: PUSH
53839: LD_INT 11
53841: PUSH
53842: LD_INT 12
53844: PUSH
53845: LD_INT 13
53847: PUSH
53848: LD_INT 16
53850: PUSH
53851: LD_INT 17
53853: PUSH
53854: LD_INT 18
53856: PUSH
53857: LD_INT 19
53859: PUSH
53860: LD_INT 20
53862: PUSH
53863: LD_INT 21
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: IN
53881: NOT
53882: OR
53883: PUSH
53884: LD_VAR 0 8
53888: PUSH
53889: LD_INT 5
53891: ARRAY
53892: NOT
53893: OR
53894: PUSH
53895: LD_VAR 0 8
53899: PUSH
53900: LD_INT 6
53902: ARRAY
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: LD_INT 2
53909: PUSH
53910: LD_INT 7
53912: PUSH
53913: LD_INT 9
53915: PUSH
53916: LD_INT 10
53918: PUSH
53919: LD_INT 11
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: IN
53930: NOT
53931: OR
53932: IFFALSE 53938
// exit ;
53934: POP
53935: POP
53936: GO 54036
// end ;
53938: GO 53609
53940: POP
53941: POP
// side := GetSide ( depot ) ;
53942: LD_ADDR_VAR 0 9
53946: PUSH
53947: LD_VAR 0 1
53951: PPUSH
53952: CALL_OW 255
53956: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53957: LD_VAR 0 9
53961: PPUSH
53962: LD_VAR 0 3
53966: PPUSH
53967: LD_VAR 0 4
53971: PPUSH
53972: LD_INT 20
53974: PPUSH
53975: CALL 46690 0 4
53979: PUSH
53980: LD_INT 4
53982: ARRAY
53983: IFFALSE 53987
// exit ;
53985: GO 54036
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53987: LD_VAR 0 2
53991: PUSH
53992: LD_INT 29
53994: PUSH
53995: LD_INT 30
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: IN
54002: PUSH
54003: LD_VAR 0 3
54007: PPUSH
54008: LD_VAR 0 4
54012: PPUSH
54013: LD_VAR 0 9
54017: PPUSH
54018: CALL_OW 440
54022: NOT
54023: AND
54024: IFFALSE 54028
// exit ;
54026: GO 54036
// result := true ;
54028: LD_ADDR_VAR 0 6
54032: PUSH
54033: LD_INT 1
54035: ST_TO_ADDR
// end ;
54036: LD_VAR 0 6
54040: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54041: LD_INT 0
54043: PPUSH
54044: PPUSH
54045: PPUSH
54046: PPUSH
54047: PPUSH
54048: PPUSH
54049: PPUSH
54050: PPUSH
54051: PPUSH
54052: PPUSH
54053: PPUSH
54054: PPUSH
54055: PPUSH
54056: PPUSH
54057: PPUSH
54058: PPUSH
54059: PPUSH
54060: PPUSH
54061: PPUSH
54062: PPUSH
54063: PPUSH
54064: PPUSH
54065: PPUSH
54066: PPUSH
54067: PPUSH
54068: PPUSH
54069: PPUSH
54070: PPUSH
54071: PPUSH
54072: PPUSH
54073: PPUSH
54074: PPUSH
54075: PPUSH
54076: PPUSH
54077: PPUSH
54078: PPUSH
54079: PPUSH
54080: PPUSH
54081: PPUSH
54082: PPUSH
54083: PPUSH
54084: PPUSH
54085: PPUSH
54086: PPUSH
54087: PPUSH
54088: PPUSH
54089: PPUSH
54090: PPUSH
54091: PPUSH
54092: PPUSH
54093: PPUSH
54094: PPUSH
54095: PPUSH
54096: PPUSH
54097: PPUSH
54098: PPUSH
54099: PPUSH
54100: PPUSH
// result = [ ] ;
54101: LD_ADDR_VAR 0 7
54105: PUSH
54106: EMPTY
54107: ST_TO_ADDR
// temp_list = [ ] ;
54108: LD_ADDR_VAR 0 9
54112: PUSH
54113: EMPTY
54114: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54115: LD_VAR 0 4
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: LD_INT 2
54128: PUSH
54129: LD_INT 3
54131: PUSH
54132: LD_INT 4
54134: PUSH
54135: LD_INT 5
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: IN
54146: NOT
54147: PUSH
54148: LD_VAR 0 1
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: IN
54163: PUSH
54164: LD_VAR 0 5
54168: PUSH
54169: LD_INT 1
54171: PUSH
54172: LD_INT 2
54174: PUSH
54175: LD_INT 3
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: LIST
54182: IN
54183: NOT
54184: AND
54185: OR
54186: IFFALSE 54190
// exit ;
54188: GO 72581
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54190: LD_VAR 0 1
54194: PUSH
54195: LD_INT 6
54197: PUSH
54198: LD_INT 7
54200: PUSH
54201: LD_INT 8
54203: PUSH
54204: LD_INT 13
54206: PUSH
54207: LD_INT 12
54209: PUSH
54210: LD_INT 15
54212: PUSH
54213: LD_INT 11
54215: PUSH
54216: LD_INT 14
54218: PUSH
54219: LD_INT 10
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: IN
54233: IFFALSE 54243
// btype = b_lab ;
54235: LD_ADDR_VAR 0 1
54239: PUSH
54240: LD_INT 6
54242: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54243: LD_VAR 0 6
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: LD_INT 2
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: LIST
54261: IN
54262: NOT
54263: PUSH
54264: LD_VAR 0 1
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: LD_INT 1
54274: PUSH
54275: LD_INT 2
54277: PUSH
54278: LD_INT 3
54280: PUSH
54281: LD_INT 6
54283: PUSH
54284: LD_INT 36
54286: PUSH
54287: LD_INT 4
54289: PUSH
54290: LD_INT 5
54292: PUSH
54293: LD_INT 31
54295: PUSH
54296: LD_INT 32
54298: PUSH
54299: LD_INT 33
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: IN
54315: NOT
54316: PUSH
54317: LD_VAR 0 6
54321: PUSH
54322: LD_INT 1
54324: EQUAL
54325: AND
54326: OR
54327: PUSH
54328: LD_VAR 0 1
54332: PUSH
54333: LD_INT 2
54335: PUSH
54336: LD_INT 3
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: IN
54343: NOT
54344: PUSH
54345: LD_VAR 0 6
54349: PUSH
54350: LD_INT 2
54352: EQUAL
54353: AND
54354: OR
54355: IFFALSE 54365
// mode = 0 ;
54357: LD_ADDR_VAR 0 6
54361: PUSH
54362: LD_INT 0
54364: ST_TO_ADDR
// case mode of 0 :
54365: LD_VAR 0 6
54369: PUSH
54370: LD_INT 0
54372: DOUBLE
54373: EQUAL
54374: IFTRUE 54378
54376: GO 65831
54378: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54379: LD_ADDR_VAR 0 11
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: LD_INT 1
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 1
54417: PUSH
54418: LD_INT 1
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 1
54437: NEG
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: NEG
54449: PUSH
54450: LD_INT 1
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: NEG
54461: PUSH
54462: LD_INT 2
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: LD_INT 2
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: LD_INT 2
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: LD_INT 2
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: NEG
54515: PUSH
54516: LD_INT 1
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 1
54525: PUSH
54526: LD_INT 3
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: LD_INT 3
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 1
54545: NEG
54546: PUSH
54547: LD_INT 2
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54572: LD_ADDR_VAR 0 12
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 0
54620: PUSH
54621: LD_INT 1
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 1
54653: PUSH
54654: LD_INT 1
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 2
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 2
54674: PUSH
54675: LD_INT 1
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 2
54695: NEG
54696: PUSH
54697: LD_INT 0
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 2
54706: NEG
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 2
54718: NEG
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 3
54729: NEG
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 3
54740: NEG
54741: PUSH
54742: LD_INT 1
54744: NEG
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54768: LD_ADDR_VAR 0 13
54772: PUSH
54773: LD_INT 0
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 0
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 1
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 1
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 1
54826: NEG
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 1
54849: NEG
54850: PUSH
54851: LD_INT 2
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 2
54861: PUSH
54862: LD_INT 1
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 2
54871: PUSH
54872: LD_INT 2
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 1
54881: PUSH
54882: LD_INT 2
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 2
54891: NEG
54892: PUSH
54893: LD_INT 1
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 2
54903: NEG
54904: PUSH
54905: LD_INT 2
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 2
54915: NEG
54916: PUSH
54917: LD_INT 3
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 3
54927: NEG
54928: PUSH
54929: LD_INT 2
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 3
54939: NEG
54940: PUSH
54941: LD_INT 3
54943: NEG
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54967: LD_ADDR_VAR 0 14
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 1
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 1
55048: NEG
55049: PUSH
55050: LD_INT 2
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: LD_INT 2
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: LD_INT 2
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: LD_INT 2
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: LD_INT 1
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 1
55113: NEG
55114: PUSH
55115: LD_INT 3
55117: NEG
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 0
55125: PUSH
55126: LD_INT 3
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 1
55136: PUSH
55137: LD_INT 2
55139: NEG
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55163: LD_ADDR_VAR 0 15
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: LD_INT 0
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: LD_INT 1
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 1
55201: PUSH
55202: LD_INT 1
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: LD_INT 1
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 1
55221: NEG
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 1
55232: NEG
55233: PUSH
55234: LD_INT 1
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 1
55244: PUSH
55245: LD_INT 1
55247: NEG
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 2
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 2
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 1
55275: NEG
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 2
55286: NEG
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 2
55297: NEG
55298: PUSH
55299: LD_INT 1
55301: NEG
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 2
55309: PUSH
55310: LD_INT 1
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 3
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 3
55330: PUSH
55331: LD_INT 1
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55356: LD_ADDR_VAR 0 16
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: LD_INT 0
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 0
55373: PUSH
55374: LD_INT 1
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 1
55384: PUSH
55385: LD_INT 0
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: LD_INT 1
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: LD_INT 1
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 1
55414: NEG
55415: PUSH
55416: LD_INT 0
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 1
55425: NEG
55426: PUSH
55427: LD_INT 1
55429: NEG
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 1
55437: NEG
55438: PUSH
55439: LD_INT 2
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 2
55449: PUSH
55450: LD_INT 1
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 2
55459: PUSH
55460: LD_INT 2
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: LD_INT 2
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 2
55479: NEG
55480: PUSH
55481: LD_INT 1
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 2
55491: NEG
55492: PUSH
55493: LD_INT 2
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 3
55503: PUSH
55504: LD_INT 2
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 3
55513: PUSH
55514: LD_INT 3
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 2
55523: PUSH
55524: LD_INT 3
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55549: LD_ADDR_VAR 0 17
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: LD_INT 1
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 1
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: LD_INT 1
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 0
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: NEG
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 1
55630: NEG
55631: PUSH
55632: LD_INT 2
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: LD_INT 2
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: LD_INT 1
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 2
55664: PUSH
55665: LD_INT 0
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 2
55674: PUSH
55675: LD_INT 1
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 2
55684: PUSH
55685: LD_INT 2
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 1
55694: PUSH
55695: LD_INT 2
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 0
55704: PUSH
55705: LD_INT 2
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: NEG
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 2
55725: NEG
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 2
55736: NEG
55737: PUSH
55738: LD_INT 1
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 2
55748: NEG
55749: PUSH
55750: LD_INT 2
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55779: LD_ADDR_VAR 0 18
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: LD_INT 1
55799: NEG
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 1
55807: PUSH
55808: LD_INT 0
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 1
55817: PUSH
55818: LD_INT 1
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 1
55837: NEG
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: NEG
55849: PUSH
55850: LD_INT 1
55852: NEG
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 1
55860: NEG
55861: PUSH
55862: LD_INT 2
55864: NEG
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: LD_INT 2
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: LD_INT 1
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 2
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 2
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 2
55914: PUSH
55915: LD_INT 2
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: LD_INT 2
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 2
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 2
55955: NEG
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 2
55966: NEG
55967: PUSH
55968: LD_INT 1
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 2
55978: NEG
55979: PUSH
55980: LD_INT 2
55982: NEG
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56009: LD_ADDR_VAR 0 19
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 1
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 1
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 1
56078: NEG
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 1
56090: NEG
56091: PUSH
56092: LD_INT 2
56094: NEG
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: LD_INT 2
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: LD_INT 1
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 2
56124: PUSH
56125: LD_INT 0
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 2
56134: PUSH
56135: LD_INT 1
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 2
56144: PUSH
56145: LD_INT 2
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: LD_INT 2
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: LD_INT 2
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: NEG
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 2
56185: NEG
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 2
56196: NEG
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 2
56208: NEG
56209: PUSH
56210: LD_INT 2
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56239: LD_ADDR_VAR 0 20
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 1
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: LD_INT 1
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 0
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 1
56297: NEG
56298: PUSH
56299: LD_INT 0
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 1
56308: NEG
56309: PUSH
56310: LD_INT 1
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: LD_INT 2
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 0
56332: PUSH
56333: LD_INT 2
56335: NEG
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 1
56343: PUSH
56344: LD_INT 1
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 2
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 2
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 2
56374: PUSH
56375: LD_INT 2
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: PUSH
56385: LD_INT 2
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: LD_INT 2
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 2
56415: NEG
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 2
56426: NEG
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 2
56438: NEG
56439: PUSH
56440: LD_INT 2
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56469: LD_ADDR_VAR 0 21
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: LD_INT 1
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 1
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 0
56517: PUSH
56518: LD_INT 1
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: NEG
56528: PUSH
56529: LD_INT 0
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: LD_INT 1
56542: NEG
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 1
56550: NEG
56551: PUSH
56552: LD_INT 2
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 0
56562: PUSH
56563: LD_INT 2
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: LD_INT 1
56576: NEG
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 2
56584: PUSH
56585: LD_INT 0
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 2
56594: PUSH
56595: LD_INT 1
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 2
56604: PUSH
56605: LD_INT 2
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 1
56614: PUSH
56615: LD_INT 2
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 0
56624: PUSH
56625: LD_INT 2
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 1
56634: NEG
56635: PUSH
56636: LD_INT 1
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 2
56645: NEG
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 2
56656: NEG
56657: PUSH
56658: LD_INT 1
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 2
56668: NEG
56669: PUSH
56670: LD_INT 2
56672: NEG
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56699: LD_ADDR_VAR 0 22
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: LD_INT 1
56719: NEG
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: LD_INT 0
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 1
56737: PUSH
56738: LD_INT 1
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: LD_INT 1
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 1
56757: NEG
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 1
56768: NEG
56769: PUSH
56770: LD_INT 1
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: LD_INT 2
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 0
56792: PUSH
56793: LD_INT 2
56795: NEG
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 1
56803: PUSH
56804: LD_INT 1
56806: NEG
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 2
56814: PUSH
56815: LD_INT 0
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 2
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 2
56834: PUSH
56835: LD_INT 2
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 1
56844: PUSH
56845: LD_INT 2
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: LD_INT 2
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: LD_INT 1
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 2
56875: NEG
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 2
56886: NEG
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 2
56898: NEG
56899: PUSH
56900: LD_INT 2
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56929: LD_ADDR_VAR 0 23
56933: PUSH
56934: LD_INT 0
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 0
56946: PUSH
56947: LD_INT 1
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 1
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 1
56967: PUSH
56968: LD_INT 1
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 1
56987: NEG
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 1
56998: NEG
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: LD_INT 2
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: LD_INT 2
57025: NEG
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 2
57044: PUSH
57045: LD_INT 0
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 2
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 2
57064: PUSH
57065: LD_INT 2
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: LD_INT 2
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 0
57084: PUSH
57085: LD_INT 2
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: LD_INT 1
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 2
57105: NEG
57106: PUSH
57107: LD_INT 0
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 2
57116: NEG
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 2
57128: NEG
57129: PUSH
57130: LD_INT 2
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 2
57140: NEG
57141: PUSH
57142: LD_INT 3
57144: NEG
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 1
57152: NEG
57153: PUSH
57154: LD_INT 3
57156: NEG
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 1
57164: PUSH
57165: LD_INT 2
57167: NEG
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 2
57175: PUSH
57176: LD_INT 1
57178: NEG
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57209: LD_ADDR_VAR 0 24
57213: PUSH
57214: LD_INT 0
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: LD_INT 1
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 1
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: LD_INT 1
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 1
57267: NEG
57268: PUSH
57269: LD_INT 0
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: LD_INT 1
57282: NEG
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 1
57290: NEG
57291: PUSH
57292: LD_INT 2
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: LD_INT 2
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 1
57313: PUSH
57314: LD_INT 1
57316: NEG
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 2
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 2
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 2
57344: PUSH
57345: LD_INT 2
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: LD_INT 2
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: LD_INT 2
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 2
57385: NEG
57386: PUSH
57387: LD_INT 0
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 2
57396: NEG
57397: PUSH
57398: LD_INT 1
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 2
57408: NEG
57409: PUSH
57410: LD_INT 2
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 1
57420: PUSH
57421: LD_INT 2
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 2
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 3
57442: PUSH
57443: LD_INT 1
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 3
57452: PUSH
57453: LD_INT 2
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57485: LD_ADDR_VAR 0 25
57489: PUSH
57490: LD_INT 0
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 0
57502: PUSH
57503: LD_INT 1
57505: NEG
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 1
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 1
57523: PUSH
57524: LD_INT 1
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: NEG
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 1
57554: NEG
57555: PUSH
57556: LD_INT 1
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: LD_INT 2
57570: NEG
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: LD_INT 2
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 1
57589: PUSH
57590: LD_INT 1
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 2
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 2
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 2
57620: PUSH
57621: LD_INT 2
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 1
57630: PUSH
57631: LD_INT 2
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 0
57640: PUSH
57641: LD_INT 2
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: NEG
57651: PUSH
57652: LD_INT 1
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 2
57661: NEG
57662: PUSH
57663: LD_INT 0
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 2
57672: NEG
57673: PUSH
57674: LD_INT 1
57676: NEG
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 2
57684: NEG
57685: PUSH
57686: LD_INT 2
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 3
57696: PUSH
57697: LD_INT 1
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 3
57706: PUSH
57707: LD_INT 2
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 2
57716: PUSH
57717: LD_INT 3
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 1
57726: PUSH
57727: LD_INT 3
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57759: LD_ADDR_VAR 0 26
57763: PUSH
57764: LD_INT 0
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: LD_INT 1
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 0
57807: PUSH
57808: LD_INT 1
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 1
57817: NEG
57818: PUSH
57819: LD_INT 0
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 1
57828: NEG
57829: PUSH
57830: LD_INT 1
57832: NEG
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 1
57840: NEG
57841: PUSH
57842: LD_INT 2
57844: NEG
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 0
57852: PUSH
57853: LD_INT 2
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 1
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 2
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 2
57884: PUSH
57885: LD_INT 1
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 2
57894: PUSH
57895: LD_INT 2
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 1
57904: PUSH
57905: LD_INT 2
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: LD_INT 2
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 1
57924: NEG
57925: PUSH
57926: LD_INT 1
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 2
57935: NEG
57936: PUSH
57937: LD_INT 0
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 2
57946: NEG
57947: PUSH
57948: LD_INT 1
57950: NEG
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 2
57958: NEG
57959: PUSH
57960: LD_INT 2
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 2
57970: PUSH
57971: LD_INT 3
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 1
57980: PUSH
57981: LD_INT 3
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 1
57990: NEG
57991: PUSH
57992: LD_INT 2
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 2
58001: NEG
58002: PUSH
58003: LD_INT 1
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58035: LD_ADDR_VAR 0 27
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: LD_INT 0
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: LD_INT 1
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 1
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 1
58073: PUSH
58074: LD_INT 1
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 0
58083: PUSH
58084: LD_INT 1
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 1
58093: NEG
58094: PUSH
58095: LD_INT 0
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 1
58104: NEG
58105: PUSH
58106: LD_INT 1
58108: NEG
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 1
58116: NEG
58117: PUSH
58118: LD_INT 2
58120: NEG
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: LD_INT 2
58131: NEG
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 1
58139: PUSH
58140: LD_INT 1
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 2
58150: PUSH
58151: LD_INT 0
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 2
58160: PUSH
58161: LD_INT 1
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 2
58170: PUSH
58171: LD_INT 2
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 1
58180: PUSH
58181: LD_INT 2
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 0
58190: PUSH
58191: LD_INT 2
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 1
58200: NEG
58201: PUSH
58202: LD_INT 1
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 2
58211: NEG
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 2
58222: NEG
58223: PUSH
58224: LD_INT 1
58226: NEG
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 2
58234: NEG
58235: PUSH
58236: LD_INT 2
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 1
58246: NEG
58247: PUSH
58248: LD_INT 2
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 2
58257: NEG
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 3
58268: NEG
58269: PUSH
58270: LD_INT 1
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 3
58280: NEG
58281: PUSH
58282: LD_INT 2
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58315: LD_ADDR_VAR 0 28
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 0
58332: PUSH
58333: LD_INT 1
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 1
58343: PUSH
58344: LD_INT 0
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 1
58373: NEG
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 1
58384: NEG
58385: PUSH
58386: LD_INT 1
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: LD_INT 2
58400: NEG
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 0
58408: PUSH
58409: LD_INT 2
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: LD_INT 1
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 2
58430: PUSH
58431: LD_INT 0
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 2
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 2
58450: PUSH
58451: LD_INT 2
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 1
58460: PUSH
58461: LD_INT 2
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 0
58470: PUSH
58471: LD_INT 2
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 1
58480: NEG
58481: PUSH
58482: LD_INT 1
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 2
58491: NEG
58492: PUSH
58493: LD_INT 0
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 2
58502: NEG
58503: PUSH
58504: LD_INT 1
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 2
58514: NEG
58515: PUSH
58516: LD_INT 2
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 2
58526: NEG
58527: PUSH
58528: LD_INT 3
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: LD_INT 3
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 3
58550: NEG
58551: PUSH
58552: LD_INT 1
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 3
58562: NEG
58563: PUSH
58564: LD_INT 2
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58597: LD_ADDR_VAR 0 29
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: LD_INT 0
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: LD_INT 1
58617: NEG
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 1
58625: PUSH
58626: LD_INT 0
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 1
58635: PUSH
58636: LD_INT 1
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 1
58655: NEG
58656: PUSH
58657: LD_INT 0
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 1
58666: NEG
58667: PUSH
58668: LD_INT 1
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 1
58678: NEG
58679: PUSH
58680: LD_INT 2
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 0
58690: PUSH
58691: LD_INT 2
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: PUSH
58702: LD_INT 1
58704: NEG
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 2
58712: PUSH
58713: LD_INT 0
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 2
58722: PUSH
58723: LD_INT 1
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 1
58732: PUSH
58733: LD_INT 2
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 0
58742: PUSH
58743: LD_INT 2
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 1
58752: NEG
58753: PUSH
58754: LD_INT 1
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 2
58763: NEG
58764: PUSH
58765: LD_INT 1
58767: NEG
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 2
58775: NEG
58776: PUSH
58777: LD_INT 2
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 2
58787: NEG
58788: PUSH
58789: LD_INT 3
58791: NEG
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 2
58799: PUSH
58800: LD_INT 1
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 3
58810: PUSH
58811: LD_INT 1
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: PUSH
58821: LD_INT 3
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 1
58830: NEG
58831: PUSH
58832: LD_INT 2
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 3
58841: NEG
58842: PUSH
58843: LD_INT 2
58845: NEG
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58876: LD_ADDR_VAR 0 30
58880: PUSH
58881: LD_INT 0
58883: PUSH
58884: LD_INT 0
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 0
58893: PUSH
58894: LD_INT 1
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 1
58914: PUSH
58915: LD_INT 1
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: LD_INT 1
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 1
58934: NEG
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 1
58945: NEG
58946: PUSH
58947: LD_INT 1
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 1
58957: NEG
58958: PUSH
58959: LD_INT 2
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 0
58969: PUSH
58970: LD_INT 2
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: LD_INT 1
58983: NEG
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 2
58991: PUSH
58992: LD_INT 0
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 2
59001: PUSH
59002: LD_INT 1
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 2
59011: PUSH
59012: LD_INT 2
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 1
59021: PUSH
59022: LD_INT 2
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 1
59031: NEG
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 2
59042: NEG
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 2
59053: NEG
59054: PUSH
59055: LD_INT 1
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 1
59065: NEG
59066: PUSH
59067: LD_INT 3
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 1
59077: PUSH
59078: LD_INT 2
59080: NEG
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 3
59088: PUSH
59089: LD_INT 2
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 2
59098: PUSH
59099: LD_INT 3
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 2
59108: NEG
59109: PUSH
59110: LD_INT 1
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 3
59119: NEG
59120: PUSH
59121: LD_INT 1
59123: NEG
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59154: LD_ADDR_VAR 0 31
59158: PUSH
59159: LD_INT 0
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 0
59171: PUSH
59172: LD_INT 1
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 1
59182: PUSH
59183: LD_INT 0
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 1
59192: PUSH
59193: LD_INT 1
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 0
59202: PUSH
59203: LD_INT 1
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 1
59212: NEG
59213: PUSH
59214: LD_INT 0
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 1
59223: NEG
59224: PUSH
59225: LD_INT 1
59227: NEG
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 1
59235: NEG
59236: PUSH
59237: LD_INT 2
59239: NEG
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 1
59247: PUSH
59248: LD_INT 1
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 2
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 2
59268: PUSH
59269: LD_INT 1
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 2
59278: PUSH
59279: LD_INT 2
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 1
59288: PUSH
59289: LD_INT 2
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 0
59298: PUSH
59299: LD_INT 2
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 1
59308: NEG
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 2
59319: NEG
59320: PUSH
59321: LD_INT 1
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 2
59331: NEG
59332: PUSH
59333: LD_INT 2
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 2
59343: NEG
59344: PUSH
59345: LD_INT 3
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 2
59355: PUSH
59356: LD_INT 1
59358: NEG
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 3
59366: PUSH
59367: LD_INT 1
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 1
59376: PUSH
59377: LD_INT 3
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 1
59386: NEG
59387: PUSH
59388: LD_INT 2
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 3
59397: NEG
59398: PUSH
59399: LD_INT 2
59401: NEG
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59432: LD_ADDR_VAR 0 32
59436: PUSH
59437: LD_INT 0
59439: PUSH
59440: LD_INT 0
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: LD_INT 1
59452: NEG
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 1
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 1
59470: PUSH
59471: LD_INT 1
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 0
59480: PUSH
59481: LD_INT 1
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 1
59490: NEG
59491: PUSH
59492: LD_INT 0
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 1
59501: NEG
59502: PUSH
59503: LD_INT 1
59505: NEG
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 1
59513: NEG
59514: PUSH
59515: LD_INT 2
59517: NEG
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 0
59525: PUSH
59526: LD_INT 2
59528: NEG
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 1
59536: PUSH
59537: LD_INT 1
59539: NEG
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 2
59547: PUSH
59548: LD_INT 1
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 2
59557: PUSH
59558: LD_INT 2
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: LD_INT 2
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: LD_INT 2
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 1
59587: NEG
59588: PUSH
59589: LD_INT 1
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 2
59598: NEG
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 2
59609: NEG
59610: PUSH
59611: LD_INT 1
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 1
59621: NEG
59622: PUSH
59623: LD_INT 3
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 1
59633: PUSH
59634: LD_INT 2
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 3
59644: PUSH
59645: LD_INT 2
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 2
59654: PUSH
59655: LD_INT 3
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 2
59664: NEG
59665: PUSH
59666: LD_INT 1
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 3
59675: NEG
59676: PUSH
59677: LD_INT 1
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59710: LD_ADDR_VAR 0 33
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: LD_INT 1
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 1
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 0
59758: PUSH
59759: LD_INT 1
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 1
59768: NEG
59769: PUSH
59770: LD_INT 0
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 1
59779: NEG
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 1
59791: NEG
59792: PUSH
59793: LD_INT 2
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 1
59803: PUSH
59804: LD_INT 1
59806: NEG
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 2
59814: PUSH
59815: LD_INT 0
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 2
59824: PUSH
59825: LD_INT 1
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: PUSH
59835: LD_INT 2
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 0
59844: PUSH
59845: LD_INT 2
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 1
59854: NEG
59855: PUSH
59856: LD_INT 1
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 2
59865: NEG
59866: PUSH
59867: LD_INT 0
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 2
59876: NEG
59877: PUSH
59878: LD_INT 1
59880: NEG
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 2
59888: NEG
59889: PUSH
59890: LD_INT 2
59892: NEG
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 2
59900: NEG
59901: PUSH
59902: LD_INT 3
59904: NEG
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 2
59912: PUSH
59913: LD_INT 1
59915: NEG
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 3
59923: PUSH
59924: LD_INT 1
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 1
59933: PUSH
59934: LD_INT 3
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: PUSH
59945: LD_INT 2
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 3
59954: NEG
59955: PUSH
59956: LD_INT 2
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59989: LD_ADDR_VAR 0 34
59993: PUSH
59994: LD_INT 0
59996: PUSH
59997: LD_INT 0
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: LD_INT 1
60009: NEG
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 1
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 1
60027: PUSH
60028: LD_INT 1
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 0
60037: PUSH
60038: LD_INT 1
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 1
60047: NEG
60048: PUSH
60049: LD_INT 0
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 1
60058: NEG
60059: PUSH
60060: LD_INT 1
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 1
60070: NEG
60071: PUSH
60072: LD_INT 2
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 0
60082: PUSH
60083: LD_INT 2
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 1
60093: PUSH
60094: LD_INT 1
60096: NEG
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 2
60104: PUSH
60105: LD_INT 1
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 2
60114: PUSH
60115: LD_INT 2
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 1
60124: PUSH
60125: LD_INT 2
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 1
60134: NEG
60135: PUSH
60136: LD_INT 1
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 2
60145: NEG
60146: PUSH
60147: LD_INT 0
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 2
60156: NEG
60157: PUSH
60158: LD_INT 1
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 2
60168: NEG
60169: PUSH
60170: LD_INT 2
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 1
60180: NEG
60181: PUSH
60182: LD_INT 3
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 1
60192: PUSH
60193: LD_INT 2
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 3
60203: PUSH
60204: LD_INT 2
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 2
60213: PUSH
60214: LD_INT 3
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 2
60223: NEG
60224: PUSH
60225: LD_INT 1
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 3
60234: NEG
60235: PUSH
60236: LD_INT 1
60238: NEG
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60269: LD_ADDR_VAR 0 35
60273: PUSH
60274: LD_INT 0
60276: PUSH
60277: LD_INT 0
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 0
60286: PUSH
60287: LD_INT 1
60289: NEG
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: LD_INT 0
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 1
60307: PUSH
60308: LD_INT 1
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 0
60317: PUSH
60318: LD_INT 1
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 1
60327: NEG
60328: PUSH
60329: LD_INT 0
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 1
60338: NEG
60339: PUSH
60340: LD_INT 1
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 2
60350: PUSH
60351: LD_INT 1
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 2
60360: NEG
60361: PUSH
60362: LD_INT 1
60364: NEG
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60381: LD_ADDR_VAR 0 36
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: LD_INT 0
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 1
60419: PUSH
60420: LD_INT 1
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: LD_INT 1
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 1
60439: NEG
60440: PUSH
60441: LD_INT 0
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 1
60450: NEG
60451: PUSH
60452: LD_INT 1
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 1
60462: NEG
60463: PUSH
60464: LD_INT 2
60466: NEG
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 1
60474: PUSH
60475: LD_INT 2
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60493: LD_ADDR_VAR 0 37
60497: PUSH
60498: LD_INT 0
60500: PUSH
60501: LD_INT 0
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: LD_INT 1
60513: NEG
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 1
60521: PUSH
60522: LD_INT 0
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 1
60531: PUSH
60532: LD_INT 1
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 0
60541: PUSH
60542: LD_INT 1
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 1
60551: NEG
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 1
60562: NEG
60563: PUSH
60564: LD_INT 1
60566: NEG
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 1
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 1
60585: NEG
60586: PUSH
60587: LD_INT 1
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60605: LD_ADDR_VAR 0 38
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: LD_INT 0
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 0
60622: PUSH
60623: LD_INT 1
60625: NEG
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 1
60633: PUSH
60634: LD_INT 0
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 1
60643: PUSH
60644: LD_INT 1
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 0
60653: PUSH
60654: LD_INT 1
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 1
60663: NEG
60664: PUSH
60665: LD_INT 0
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 1
60674: NEG
60675: PUSH
60676: LD_INT 1
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 2
60686: PUSH
60687: LD_INT 1
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 2
60696: NEG
60697: PUSH
60698: LD_INT 1
60700: NEG
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60717: LD_ADDR_VAR 0 39
60721: PUSH
60722: LD_INT 0
60724: PUSH
60725: LD_INT 0
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 0
60734: PUSH
60735: LD_INT 1
60737: NEG
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 1
60745: PUSH
60746: LD_INT 0
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 1
60755: PUSH
60756: LD_INT 1
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 0
60765: PUSH
60766: LD_INT 1
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 1
60775: NEG
60776: PUSH
60777: LD_INT 0
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 1
60786: NEG
60787: PUSH
60788: LD_INT 1
60790: NEG
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 1
60798: NEG
60799: PUSH
60800: LD_INT 2
60802: NEG
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 1
60810: PUSH
60811: LD_INT 2
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60829: LD_ADDR_VAR 0 40
60833: PUSH
60834: LD_INT 0
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: LD_INT 1
60849: NEG
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 1
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 1
60867: PUSH
60868: LD_INT 1
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: LD_INT 1
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 1
60887: NEG
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 1
60898: NEG
60899: PUSH
60900: LD_INT 1
60902: NEG
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 1
60910: PUSH
60911: LD_INT 1
60913: NEG
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 1
60921: NEG
60922: PUSH
60923: LD_INT 1
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60941: LD_ADDR_VAR 0 41
60945: PUSH
60946: LD_INT 0
60948: PUSH
60949: LD_INT 0
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 0
60958: PUSH
60959: LD_INT 1
60961: NEG
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 1
60969: PUSH
60970: LD_INT 0
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 1
60979: PUSH
60980: LD_INT 1
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 0
60989: PUSH
60990: LD_INT 1
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 1
60999: NEG
61000: PUSH
61001: LD_INT 0
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 1
61010: NEG
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 1
61022: NEG
61023: PUSH
61024: LD_INT 2
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 1
61034: PUSH
61035: LD_INT 1
61037: NEG
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 2
61045: PUSH
61046: LD_INT 0
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 2
61055: PUSH
61056: LD_INT 1
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 2
61065: PUSH
61066: LD_INT 2
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 1
61075: PUSH
61076: LD_INT 2
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 1
61085: NEG
61086: PUSH
61087: LD_INT 1
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 2
61096: NEG
61097: PUSH
61098: LD_INT 0
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 2
61107: NEG
61108: PUSH
61109: LD_INT 1
61111: NEG
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 2
61119: NEG
61120: PUSH
61121: LD_INT 2
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 2
61131: NEG
61132: PUSH
61133: LD_INT 3
61135: NEG
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 2
61143: PUSH
61144: LD_INT 1
61146: NEG
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 3
61154: PUSH
61155: LD_INT 0
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 3
61164: PUSH
61165: LD_INT 1
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 3
61174: PUSH
61175: LD_INT 2
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 3
61184: PUSH
61185: LD_INT 3
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 2
61194: PUSH
61195: LD_INT 3
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 2
61204: NEG
61205: PUSH
61206: LD_INT 1
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 3
61215: NEG
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 3
61226: NEG
61227: PUSH
61228: LD_INT 1
61230: NEG
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 3
61238: NEG
61239: PUSH
61240: LD_INT 2
61242: NEG
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 3
61250: NEG
61251: PUSH
61252: LD_INT 3
61254: NEG
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61291: LD_ADDR_VAR 0 42
61295: PUSH
61296: LD_INT 0
61298: PUSH
61299: LD_INT 0
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 0
61308: PUSH
61309: LD_INT 1
61311: NEG
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 1
61319: PUSH
61320: LD_INT 0
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 1
61329: PUSH
61330: LD_INT 1
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 0
61339: PUSH
61340: LD_INT 1
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 1
61349: NEG
61350: PUSH
61351: LD_INT 0
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 1
61360: NEG
61361: PUSH
61362: LD_INT 1
61364: NEG
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 1
61372: NEG
61373: PUSH
61374: LD_INT 2
61376: NEG
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 0
61384: PUSH
61385: LD_INT 2
61387: NEG
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 1
61395: PUSH
61396: LD_INT 1
61398: NEG
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 2
61406: PUSH
61407: LD_INT 1
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 2
61416: PUSH
61417: LD_INT 2
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 1
61426: PUSH
61427: LD_INT 2
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 0
61436: PUSH
61437: LD_INT 2
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 1
61446: NEG
61447: PUSH
61448: LD_INT 1
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 2
61457: NEG
61458: PUSH
61459: LD_INT 1
61461: NEG
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 2
61469: NEG
61470: PUSH
61471: LD_INT 2
61473: NEG
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 2
61481: NEG
61482: PUSH
61483: LD_INT 3
61485: NEG
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 1
61493: NEG
61494: PUSH
61495: LD_INT 3
61497: NEG
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: LD_INT 3
61508: NEG
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 1
61516: PUSH
61517: LD_INT 2
61519: NEG
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 3
61527: PUSH
61528: LD_INT 2
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 3
61537: PUSH
61538: LD_INT 3
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 2
61547: PUSH
61548: LD_INT 3
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 1
61557: PUSH
61558: LD_INT 3
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 0
61567: PUSH
61568: LD_INT 3
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 1
61577: NEG
61578: PUSH
61579: LD_INT 2
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 3
61588: NEG
61589: PUSH
61590: LD_INT 2
61592: NEG
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 3
61600: NEG
61601: PUSH
61602: LD_INT 3
61604: NEG
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61641: LD_ADDR_VAR 0 43
61645: PUSH
61646: LD_INT 0
61648: PUSH
61649: LD_INT 0
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 0
61658: PUSH
61659: LD_INT 1
61661: NEG
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 1
61669: PUSH
61670: LD_INT 0
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 1
61679: PUSH
61680: LD_INT 1
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 0
61689: PUSH
61690: LD_INT 1
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 1
61699: NEG
61700: PUSH
61701: LD_INT 0
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 1
61710: NEG
61711: PUSH
61712: LD_INT 1
61714: NEG
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 1
61722: NEG
61723: PUSH
61724: LD_INT 2
61726: NEG
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 0
61734: PUSH
61735: LD_INT 2
61737: NEG
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 1
61745: PUSH
61746: LD_INT 1
61748: NEG
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 2
61756: PUSH
61757: LD_INT 0
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 2
61766: PUSH
61767: LD_INT 1
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 1
61776: PUSH
61777: LD_INT 2
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 0
61786: PUSH
61787: LD_INT 2
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 1
61796: NEG
61797: PUSH
61798: LD_INT 1
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 2
61807: NEG
61808: PUSH
61809: LD_INT 0
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 2
61818: NEG
61819: PUSH
61820: LD_INT 1
61822: NEG
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 1
61830: NEG
61831: PUSH
61832: LD_INT 3
61834: NEG
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 0
61842: PUSH
61843: LD_INT 3
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 1
61853: PUSH
61854: LD_INT 2
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 2
61864: PUSH
61865: LD_INT 1
61867: NEG
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 3
61875: PUSH
61876: LD_INT 0
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 3
61885: PUSH
61886: LD_INT 1
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 1
61895: PUSH
61896: LD_INT 3
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 0
61905: PUSH
61906: LD_INT 3
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 1
61915: NEG
61916: PUSH
61917: LD_INT 2
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 2
61926: NEG
61927: PUSH
61928: LD_INT 1
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 3
61937: NEG
61938: PUSH
61939: LD_INT 0
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 3
61948: NEG
61949: PUSH
61950: LD_INT 1
61952: NEG
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61989: LD_ADDR_VAR 0 44
61993: PUSH
61994: LD_INT 0
61996: PUSH
61997: LD_INT 0
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 0
62006: PUSH
62007: LD_INT 1
62009: NEG
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 1
62017: PUSH
62018: LD_INT 0
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 1
62027: PUSH
62028: LD_INT 1
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: LD_INT 1
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 1
62047: NEG
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 1
62058: NEG
62059: PUSH
62060: LD_INT 1
62062: NEG
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 1
62070: NEG
62071: PUSH
62072: LD_INT 2
62074: NEG
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 1
62082: PUSH
62083: LD_INT 1
62085: NEG
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 2
62093: PUSH
62094: LD_INT 0
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 2
62103: PUSH
62104: LD_INT 1
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 2
62113: PUSH
62114: LD_INT 2
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 1
62123: PUSH
62124: LD_INT 2
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 1
62133: NEG
62134: PUSH
62135: LD_INT 1
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 2
62144: NEG
62145: PUSH
62146: LD_INT 0
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 2
62155: NEG
62156: PUSH
62157: LD_INT 1
62159: NEG
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 2
62167: NEG
62168: PUSH
62169: LD_INT 2
62171: NEG
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 2
62179: NEG
62180: PUSH
62181: LD_INT 3
62183: NEG
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 2
62191: PUSH
62192: LD_INT 1
62194: NEG
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 3
62202: PUSH
62203: LD_INT 0
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 3
62212: PUSH
62213: LD_INT 1
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 3
62222: PUSH
62223: LD_INT 2
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 3
62232: PUSH
62233: LD_INT 3
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 2
62242: PUSH
62243: LD_INT 3
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 2
62252: NEG
62253: PUSH
62254: LD_INT 1
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 3
62263: NEG
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 3
62274: NEG
62275: PUSH
62276: LD_INT 1
62278: NEG
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 3
62286: NEG
62287: PUSH
62288: LD_INT 2
62290: NEG
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 3
62298: NEG
62299: PUSH
62300: LD_INT 3
62302: NEG
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62339: LD_ADDR_VAR 0 45
62343: PUSH
62344: LD_INT 0
62346: PUSH
62347: LD_INT 0
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 0
62356: PUSH
62357: LD_INT 1
62359: NEG
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 1
62367: PUSH
62368: LD_INT 0
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 1
62377: PUSH
62378: LD_INT 1
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 0
62387: PUSH
62388: LD_INT 1
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 1
62397: NEG
62398: PUSH
62399: LD_INT 0
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 1
62408: NEG
62409: PUSH
62410: LD_INT 1
62412: NEG
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 1
62420: NEG
62421: PUSH
62422: LD_INT 2
62424: NEG
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 0
62432: PUSH
62433: LD_INT 2
62435: NEG
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 1
62443: PUSH
62444: LD_INT 1
62446: NEG
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 2
62454: PUSH
62455: LD_INT 1
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 2
62464: PUSH
62465: LD_INT 2
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 1
62474: PUSH
62475: LD_INT 2
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 0
62484: PUSH
62485: LD_INT 2
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 1
62494: NEG
62495: PUSH
62496: LD_INT 1
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 2
62505: NEG
62506: PUSH
62507: LD_INT 1
62509: NEG
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 2
62517: NEG
62518: PUSH
62519: LD_INT 2
62521: NEG
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 2
62529: NEG
62530: PUSH
62531: LD_INT 3
62533: NEG
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 1
62541: NEG
62542: PUSH
62543: LD_INT 3
62545: NEG
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 0
62553: PUSH
62554: LD_INT 3
62556: NEG
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 1
62564: PUSH
62565: LD_INT 2
62567: NEG
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 3
62575: PUSH
62576: LD_INT 2
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 3
62585: PUSH
62586: LD_INT 3
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 2
62595: PUSH
62596: LD_INT 3
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 1
62605: PUSH
62606: LD_INT 3
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 0
62615: PUSH
62616: LD_INT 3
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 1
62625: NEG
62626: PUSH
62627: LD_INT 2
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 3
62636: NEG
62637: PUSH
62638: LD_INT 2
62640: NEG
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 3
62648: NEG
62649: PUSH
62650: LD_INT 3
62652: NEG
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62689: LD_ADDR_VAR 0 46
62693: PUSH
62694: LD_INT 0
62696: PUSH
62697: LD_INT 0
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 0
62706: PUSH
62707: LD_INT 1
62709: NEG
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 1
62717: PUSH
62718: LD_INT 0
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 1
62727: PUSH
62728: LD_INT 1
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 0
62737: PUSH
62738: LD_INT 1
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 1
62747: NEG
62748: PUSH
62749: LD_INT 0
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 1
62758: NEG
62759: PUSH
62760: LD_INT 1
62762: NEG
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 1
62770: NEG
62771: PUSH
62772: LD_INT 2
62774: NEG
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 0
62782: PUSH
62783: LD_INT 2
62785: NEG
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 1
62793: PUSH
62794: LD_INT 1
62796: NEG
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 2
62804: PUSH
62805: LD_INT 0
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 2
62814: PUSH
62815: LD_INT 1
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 1
62824: PUSH
62825: LD_INT 2
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 0
62834: PUSH
62835: LD_INT 2
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 1
62844: NEG
62845: PUSH
62846: LD_INT 1
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 2
62855: NEG
62856: PUSH
62857: LD_INT 0
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 2
62866: NEG
62867: PUSH
62868: LD_INT 1
62870: NEG
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 1
62878: NEG
62879: PUSH
62880: LD_INT 3
62882: NEG
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 0
62890: PUSH
62891: LD_INT 3
62893: NEG
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 1
62901: PUSH
62902: LD_INT 2
62904: NEG
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 2
62912: PUSH
62913: LD_INT 1
62915: NEG
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 3
62923: PUSH
62924: LD_INT 0
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 3
62933: PUSH
62934: LD_INT 1
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 1
62943: PUSH
62944: LD_INT 3
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 0
62953: PUSH
62954: LD_INT 3
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 1
62963: NEG
62964: PUSH
62965: LD_INT 2
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 2
62974: NEG
62975: PUSH
62976: LD_INT 1
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 3
62985: NEG
62986: PUSH
62987: LD_INT 0
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 3
62996: NEG
62997: PUSH
62998: LD_INT 1
63000: NEG
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63037: LD_ADDR_VAR 0 47
63041: PUSH
63042: LD_INT 0
63044: PUSH
63045: LD_INT 0
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 0
63054: PUSH
63055: LD_INT 1
63057: NEG
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 1
63065: PUSH
63066: LD_INT 0
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 1
63075: PUSH
63076: LD_INT 1
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 0
63085: PUSH
63086: LD_INT 1
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 1
63095: NEG
63096: PUSH
63097: LD_INT 0
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 1
63106: NEG
63107: PUSH
63108: LD_INT 1
63110: NEG
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 1
63118: NEG
63119: PUSH
63120: LD_INT 2
63122: NEG
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 0
63130: PUSH
63131: LD_INT 2
63133: NEG
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 1
63141: PUSH
63142: LD_INT 1
63144: NEG
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 2
63152: NEG
63153: PUSH
63154: LD_INT 1
63156: NEG
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 2
63164: NEG
63165: PUSH
63166: LD_INT 2
63168: NEG
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63188: LD_ADDR_VAR 0 48
63192: PUSH
63193: LD_INT 0
63195: PUSH
63196: LD_INT 0
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 0
63205: PUSH
63206: LD_INT 1
63208: NEG
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 1
63216: PUSH
63217: LD_INT 0
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 1
63226: PUSH
63227: LD_INT 1
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 0
63236: PUSH
63237: LD_INT 1
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 1
63246: NEG
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 1
63257: NEG
63258: PUSH
63259: LD_INT 1
63261: NEG
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 1
63269: NEG
63270: PUSH
63271: LD_INT 2
63273: NEG
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 0
63281: PUSH
63282: LD_INT 2
63284: NEG
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 1
63292: PUSH
63293: LD_INT 1
63295: NEG
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 2
63303: PUSH
63304: LD_INT 0
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 2
63313: PUSH
63314: LD_INT 1
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63335: LD_ADDR_VAR 0 49
63339: PUSH
63340: LD_INT 0
63342: PUSH
63343: LD_INT 0
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 0
63352: PUSH
63353: LD_INT 1
63355: NEG
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 1
63363: PUSH
63364: LD_INT 0
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 1
63373: PUSH
63374: LD_INT 1
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 0
63383: PUSH
63384: LD_INT 1
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 1
63393: NEG
63394: PUSH
63395: LD_INT 0
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 1
63404: NEG
63405: PUSH
63406: LD_INT 1
63408: NEG
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 1
63416: PUSH
63417: LD_INT 1
63419: NEG
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 2
63427: PUSH
63428: LD_INT 0
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 2
63437: PUSH
63438: LD_INT 1
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 2
63447: PUSH
63448: LD_INT 2
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 1
63457: PUSH
63458: LD_INT 2
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63479: LD_ADDR_VAR 0 50
63483: PUSH
63484: LD_INT 0
63486: PUSH
63487: LD_INT 0
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 0
63496: PUSH
63497: LD_INT 1
63499: NEG
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 1
63507: PUSH
63508: LD_INT 0
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 1
63517: PUSH
63518: LD_INT 1
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 0
63527: PUSH
63528: LD_INT 1
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 1
63537: NEG
63538: PUSH
63539: LD_INT 0
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 1
63548: NEG
63549: PUSH
63550: LD_INT 1
63552: NEG
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 2
63560: PUSH
63561: LD_INT 1
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 2
63570: PUSH
63571: LD_INT 2
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 1
63580: PUSH
63581: LD_INT 2
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 0
63590: PUSH
63591: LD_INT 2
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 1
63600: NEG
63601: PUSH
63602: LD_INT 1
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63623: LD_ADDR_VAR 0 51
63627: PUSH
63628: LD_INT 0
63630: PUSH
63631: LD_INT 0
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 0
63640: PUSH
63641: LD_INT 1
63643: NEG
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 1
63651: PUSH
63652: LD_INT 0
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 1
63661: PUSH
63662: LD_INT 1
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 0
63671: PUSH
63672: LD_INT 1
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 1
63681: NEG
63682: PUSH
63683: LD_INT 0
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 1
63692: NEG
63693: PUSH
63694: LD_INT 1
63696: NEG
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 1
63704: PUSH
63705: LD_INT 2
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 0
63714: PUSH
63715: LD_INT 2
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 1
63724: NEG
63725: PUSH
63726: LD_INT 1
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 2
63735: NEG
63736: PUSH
63737: LD_INT 0
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 2
63746: NEG
63747: PUSH
63748: LD_INT 1
63750: NEG
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63770: LD_ADDR_VAR 0 52
63774: PUSH
63775: LD_INT 0
63777: PUSH
63778: LD_INT 0
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 0
63787: PUSH
63788: LD_INT 1
63790: NEG
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 1
63798: PUSH
63799: LD_INT 0
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 1
63808: PUSH
63809: LD_INT 1
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 0
63818: PUSH
63819: LD_INT 1
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 1
63828: NEG
63829: PUSH
63830: LD_INT 0
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 1
63839: NEG
63840: PUSH
63841: LD_INT 1
63843: NEG
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 1
63851: NEG
63852: PUSH
63853: LD_INT 2
63855: NEG
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 1
63863: NEG
63864: PUSH
63865: LD_INT 1
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 2
63874: NEG
63875: PUSH
63876: LD_INT 0
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 2
63885: NEG
63886: PUSH
63887: LD_INT 1
63889: NEG
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 2
63897: NEG
63898: PUSH
63899: LD_INT 2
63901: NEG
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63921: LD_ADDR_VAR 0 53
63925: PUSH
63926: LD_INT 0
63928: PUSH
63929: LD_INT 0
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 0
63938: PUSH
63939: LD_INT 1
63941: NEG
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 1
63949: PUSH
63950: LD_INT 0
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 1
63959: PUSH
63960: LD_INT 1
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 0
63969: PUSH
63970: LD_INT 1
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 1
63979: NEG
63980: PUSH
63981: LD_INT 0
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 1
63990: NEG
63991: PUSH
63992: LD_INT 1
63994: NEG
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 1
64002: NEG
64003: PUSH
64004: LD_INT 2
64006: NEG
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 0
64014: PUSH
64015: LD_INT 2
64017: NEG
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 1
64025: PUSH
64026: LD_INT 1
64028: NEG
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 2
64036: PUSH
64037: LD_INT 0
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 2
64046: PUSH
64047: LD_INT 1
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 2
64056: PUSH
64057: LD_INT 2
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 1
64066: PUSH
64067: LD_INT 2
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 0
64076: PUSH
64077: LD_INT 2
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 1
64086: NEG
64087: PUSH
64088: LD_INT 1
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 2
64097: NEG
64098: PUSH
64099: LD_INT 0
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 2
64108: NEG
64109: PUSH
64110: LD_INT 1
64112: NEG
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 2
64120: NEG
64121: PUSH
64122: LD_INT 2
64124: NEG
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64151: LD_ADDR_VAR 0 54
64155: PUSH
64156: LD_INT 0
64158: PUSH
64159: LD_INT 0
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 0
64168: PUSH
64169: LD_INT 1
64171: NEG
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 1
64179: PUSH
64180: LD_INT 0
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 1
64189: PUSH
64190: LD_INT 1
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 0
64199: PUSH
64200: LD_INT 1
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 1
64209: NEG
64210: PUSH
64211: LD_INT 0
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 1
64220: NEG
64221: PUSH
64222: LD_INT 1
64224: NEG
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 1
64232: NEG
64233: PUSH
64234: LD_INT 2
64236: NEG
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 0
64244: PUSH
64245: LD_INT 2
64247: NEG
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 1
64255: PUSH
64256: LD_INT 1
64258: NEG
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 2
64266: PUSH
64267: LD_INT 0
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 2
64276: PUSH
64277: LD_INT 1
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 2
64286: PUSH
64287: LD_INT 2
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 1
64296: PUSH
64297: LD_INT 2
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 0
64306: PUSH
64307: LD_INT 2
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 1
64316: NEG
64317: PUSH
64318: LD_INT 1
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 2
64327: NEG
64328: PUSH
64329: LD_INT 0
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 2
64338: NEG
64339: PUSH
64340: LD_INT 1
64342: NEG
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 2
64350: NEG
64351: PUSH
64352: LD_INT 2
64354: NEG
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64381: LD_ADDR_VAR 0 55
64385: PUSH
64386: LD_INT 0
64388: PUSH
64389: LD_INT 0
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 0
64398: PUSH
64399: LD_INT 1
64401: NEG
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 1
64409: PUSH
64410: LD_INT 0
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 1
64419: PUSH
64420: LD_INT 1
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 0
64429: PUSH
64430: LD_INT 1
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 1
64439: NEG
64440: PUSH
64441: LD_INT 0
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 1
64450: NEG
64451: PUSH
64452: LD_INT 1
64454: NEG
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 1
64462: NEG
64463: PUSH
64464: LD_INT 2
64466: NEG
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 0
64474: PUSH
64475: LD_INT 2
64477: NEG
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 1
64485: PUSH
64486: LD_INT 1
64488: NEG
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 2
64496: PUSH
64497: LD_INT 0
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 2
64506: PUSH
64507: LD_INT 1
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 2
64516: PUSH
64517: LD_INT 2
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 1
64526: PUSH
64527: LD_INT 2
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 0
64536: PUSH
64537: LD_INT 2
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 1
64546: NEG
64547: PUSH
64548: LD_INT 1
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 2
64557: NEG
64558: PUSH
64559: LD_INT 0
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 2
64568: NEG
64569: PUSH
64570: LD_INT 1
64572: NEG
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 2
64580: NEG
64581: PUSH
64582: LD_INT 2
64584: NEG
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64611: LD_ADDR_VAR 0 56
64615: PUSH
64616: LD_INT 0
64618: PUSH
64619: LD_INT 0
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 0
64628: PUSH
64629: LD_INT 1
64631: NEG
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 1
64639: PUSH
64640: LD_INT 0
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 1
64649: PUSH
64650: LD_INT 1
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 0
64659: PUSH
64660: LD_INT 1
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 1
64669: NEG
64670: PUSH
64671: LD_INT 0
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 1
64680: NEG
64681: PUSH
64682: LD_INT 1
64684: NEG
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 1
64692: NEG
64693: PUSH
64694: LD_INT 2
64696: NEG
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: LD_INT 0
64704: PUSH
64705: LD_INT 2
64707: NEG
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 1
64715: PUSH
64716: LD_INT 1
64718: NEG
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 2
64726: PUSH
64727: LD_INT 0
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 2
64736: PUSH
64737: LD_INT 1
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 2
64746: PUSH
64747: LD_INT 2
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 1
64756: PUSH
64757: LD_INT 2
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 0
64766: PUSH
64767: LD_INT 2
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 1
64776: NEG
64777: PUSH
64778: LD_INT 1
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 2
64787: NEG
64788: PUSH
64789: LD_INT 0
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 2
64798: NEG
64799: PUSH
64800: LD_INT 1
64802: NEG
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 2
64810: NEG
64811: PUSH
64812: LD_INT 2
64814: NEG
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: LIST
64837: LIST
64838: LIST
64839: LIST
64840: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64841: LD_ADDR_VAR 0 57
64845: PUSH
64846: LD_INT 0
64848: PUSH
64849: LD_INT 0
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 0
64858: PUSH
64859: LD_INT 1
64861: NEG
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 1
64869: PUSH
64870: LD_INT 0
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 1
64879: PUSH
64880: LD_INT 1
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 0
64889: PUSH
64890: LD_INT 1
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 1
64899: NEG
64900: PUSH
64901: LD_INT 0
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 1
64910: NEG
64911: PUSH
64912: LD_INT 1
64914: NEG
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 1
64922: NEG
64923: PUSH
64924: LD_INT 2
64926: NEG
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 0
64934: PUSH
64935: LD_INT 2
64937: NEG
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 1
64945: PUSH
64946: LD_INT 1
64948: NEG
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 2
64956: PUSH
64957: LD_INT 0
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: LD_INT 2
64966: PUSH
64967: LD_INT 1
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 2
64976: PUSH
64977: LD_INT 2
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 1
64986: PUSH
64987: LD_INT 2
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 0
64996: PUSH
64997: LD_INT 2
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 1
65006: NEG
65007: PUSH
65008: LD_INT 1
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 2
65017: NEG
65018: PUSH
65019: LD_INT 0
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_INT 2
65028: NEG
65029: PUSH
65030: LD_INT 1
65032: NEG
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 2
65040: NEG
65041: PUSH
65042: LD_INT 2
65044: NEG
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65071: LD_ADDR_VAR 0 58
65075: PUSH
65076: LD_INT 0
65078: PUSH
65079: LD_INT 0
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 0
65088: PUSH
65089: LD_INT 1
65091: NEG
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 1
65099: PUSH
65100: LD_INT 0
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 1
65109: PUSH
65110: LD_INT 1
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 0
65119: PUSH
65120: LD_INT 1
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 1
65129: NEG
65130: PUSH
65131: LD_INT 0
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 1
65140: NEG
65141: PUSH
65142: LD_INT 1
65144: NEG
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 1
65152: NEG
65153: PUSH
65154: LD_INT 2
65156: NEG
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 0
65164: PUSH
65165: LD_INT 2
65167: NEG
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 1
65175: PUSH
65176: LD_INT 1
65178: NEG
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 2
65186: PUSH
65187: LD_INT 0
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 2
65196: PUSH
65197: LD_INT 1
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 2
65206: PUSH
65207: LD_INT 2
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 1
65216: PUSH
65217: LD_INT 2
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 0
65226: PUSH
65227: LD_INT 2
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 1
65236: NEG
65237: PUSH
65238: LD_INT 1
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 2
65247: NEG
65248: PUSH
65249: LD_INT 0
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 2
65258: NEG
65259: PUSH
65260: LD_INT 1
65262: NEG
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 2
65270: NEG
65271: PUSH
65272: LD_INT 2
65274: NEG
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65301: LD_ADDR_VAR 0 59
65305: PUSH
65306: LD_INT 0
65308: PUSH
65309: LD_INT 0
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 0
65318: PUSH
65319: LD_INT 1
65321: NEG
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 1
65329: PUSH
65330: LD_INT 0
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 1
65339: PUSH
65340: LD_INT 1
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 0
65349: PUSH
65350: LD_INT 1
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 1
65359: NEG
65360: PUSH
65361: LD_INT 0
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 1
65370: NEG
65371: PUSH
65372: LD_INT 1
65374: NEG
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: LIST
65386: LIST
65387: LIST
65388: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65389: LD_ADDR_VAR 0 60
65393: PUSH
65394: LD_INT 0
65396: PUSH
65397: LD_INT 0
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 0
65406: PUSH
65407: LD_INT 1
65409: NEG
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 1
65417: PUSH
65418: LD_INT 0
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: LD_INT 1
65427: PUSH
65428: LD_INT 1
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 0
65437: PUSH
65438: LD_INT 1
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 1
65447: NEG
65448: PUSH
65449: LD_INT 0
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 1
65458: NEG
65459: PUSH
65460: LD_INT 1
65462: NEG
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: LIST
65476: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65477: LD_ADDR_VAR 0 61
65481: PUSH
65482: LD_INT 0
65484: PUSH
65485: LD_INT 0
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 0
65494: PUSH
65495: LD_INT 1
65497: NEG
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 1
65505: PUSH
65506: LD_INT 0
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 1
65515: PUSH
65516: LD_INT 1
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: LD_INT 0
65525: PUSH
65526: LD_INT 1
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: LD_INT 1
65535: NEG
65536: PUSH
65537: LD_INT 0
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 1
65546: NEG
65547: PUSH
65548: LD_INT 1
65550: NEG
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65565: LD_ADDR_VAR 0 62
65569: PUSH
65570: LD_INT 0
65572: PUSH
65573: LD_INT 0
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 0
65582: PUSH
65583: LD_INT 1
65585: NEG
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PUSH
65591: LD_INT 1
65593: PUSH
65594: LD_INT 0
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 1
65603: PUSH
65604: LD_INT 1
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 0
65613: PUSH
65614: LD_INT 1
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 1
65623: NEG
65624: PUSH
65625: LD_INT 0
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 1
65634: NEG
65635: PUSH
65636: LD_INT 1
65638: NEG
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65653: LD_ADDR_VAR 0 63
65657: PUSH
65658: LD_INT 0
65660: PUSH
65661: LD_INT 0
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 0
65670: PUSH
65671: LD_INT 1
65673: NEG
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 1
65681: PUSH
65682: LD_INT 0
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: LD_INT 1
65691: PUSH
65692: LD_INT 1
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 0
65701: PUSH
65702: LD_INT 1
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 1
65711: NEG
65712: PUSH
65713: LD_INT 0
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 1
65722: NEG
65723: PUSH
65724: LD_INT 1
65726: NEG
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: LIST
65740: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65741: LD_ADDR_VAR 0 64
65745: PUSH
65746: LD_INT 0
65748: PUSH
65749: LD_INT 0
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: LD_INT 0
65758: PUSH
65759: LD_INT 1
65761: NEG
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: PUSH
65767: LD_INT 1
65769: PUSH
65770: LD_INT 0
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 1
65779: PUSH
65780: LD_INT 1
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 0
65789: PUSH
65790: LD_INT 1
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 1
65799: NEG
65800: PUSH
65801: LD_INT 0
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 1
65810: NEG
65811: PUSH
65812: LD_INT 1
65814: NEG
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: LIST
65828: ST_TO_ADDR
// end ; 1 :
65829: GO 71726
65831: LD_INT 1
65833: DOUBLE
65834: EQUAL
65835: IFTRUE 65839
65837: GO 68462
65839: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65840: LD_ADDR_VAR 0 11
65844: PUSH
65845: LD_INT 1
65847: NEG
65848: PUSH
65849: LD_INT 3
65851: NEG
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 0
65859: PUSH
65860: LD_INT 3
65862: NEG
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 1
65870: PUSH
65871: LD_INT 2
65873: NEG
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: LIST
65883: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65884: LD_ADDR_VAR 0 12
65888: PUSH
65889: LD_INT 2
65891: PUSH
65892: LD_INT 1
65894: NEG
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 3
65902: PUSH
65903: LD_INT 0
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 3
65912: PUSH
65913: LD_INT 1
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: LIST
65924: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65925: LD_ADDR_VAR 0 13
65929: PUSH
65930: LD_INT 3
65932: PUSH
65933: LD_INT 2
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 3
65942: PUSH
65943: LD_INT 3
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 2
65952: PUSH
65953: LD_INT 3
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: LIST
65964: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65965: LD_ADDR_VAR 0 14
65969: PUSH
65970: LD_INT 1
65972: PUSH
65973: LD_INT 3
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 0
65982: PUSH
65983: LD_INT 3
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 1
65992: NEG
65993: PUSH
65994: LD_INT 2
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: LIST
66005: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66006: LD_ADDR_VAR 0 15
66010: PUSH
66011: LD_INT 2
66013: NEG
66014: PUSH
66015: LD_INT 1
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 3
66024: NEG
66025: PUSH
66026: LD_INT 0
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 3
66035: NEG
66036: PUSH
66037: LD_INT 1
66039: NEG
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: LIST
66049: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66050: LD_ADDR_VAR 0 16
66054: PUSH
66055: LD_INT 2
66057: NEG
66058: PUSH
66059: LD_INT 3
66061: NEG
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 3
66069: NEG
66070: PUSH
66071: LD_INT 2
66073: NEG
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: PUSH
66079: LD_INT 3
66081: NEG
66082: PUSH
66083: LD_INT 3
66085: NEG
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: LIST
66095: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66096: LD_ADDR_VAR 0 17
66100: PUSH
66101: LD_INT 1
66103: NEG
66104: PUSH
66105: LD_INT 3
66107: NEG
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 0
66115: PUSH
66116: LD_INT 3
66118: NEG
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 1
66126: PUSH
66127: LD_INT 2
66129: NEG
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: LIST
66139: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66140: LD_ADDR_VAR 0 18
66144: PUSH
66145: LD_INT 2
66147: PUSH
66148: LD_INT 1
66150: NEG
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 3
66158: PUSH
66159: LD_INT 0
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: LD_INT 3
66168: PUSH
66169: LD_INT 1
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: LIST
66180: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66181: LD_ADDR_VAR 0 19
66185: PUSH
66186: LD_INT 3
66188: PUSH
66189: LD_INT 2
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 3
66198: PUSH
66199: LD_INT 3
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 2
66208: PUSH
66209: LD_INT 3
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: LIST
66220: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66221: LD_ADDR_VAR 0 20
66225: PUSH
66226: LD_INT 1
66228: PUSH
66229: LD_INT 3
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 0
66238: PUSH
66239: LD_INT 3
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 1
66248: NEG
66249: PUSH
66250: LD_INT 2
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: LIST
66261: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66262: LD_ADDR_VAR 0 21
66266: PUSH
66267: LD_INT 2
66269: NEG
66270: PUSH
66271: LD_INT 1
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 3
66280: NEG
66281: PUSH
66282: LD_INT 0
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 3
66291: NEG
66292: PUSH
66293: LD_INT 1
66295: NEG
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: LIST
66305: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66306: LD_ADDR_VAR 0 22
66310: PUSH
66311: LD_INT 2
66313: NEG
66314: PUSH
66315: LD_INT 3
66317: NEG
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 3
66325: NEG
66326: PUSH
66327: LD_INT 2
66329: NEG
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: LD_INT 3
66337: NEG
66338: PUSH
66339: LD_INT 3
66341: NEG
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: LIST
66351: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66352: LD_ADDR_VAR 0 23
66356: PUSH
66357: LD_INT 0
66359: PUSH
66360: LD_INT 3
66362: NEG
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: LD_INT 1
66370: NEG
66371: PUSH
66372: LD_INT 4
66374: NEG
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PUSH
66380: LD_INT 1
66382: PUSH
66383: LD_INT 3
66385: NEG
66386: PUSH
66387: EMPTY
66388: LIST
66389: LIST
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: LIST
66395: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66396: LD_ADDR_VAR 0 24
66400: PUSH
66401: LD_INT 3
66403: PUSH
66404: LD_INT 0
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 3
66413: PUSH
66414: LD_INT 1
66416: NEG
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: LD_INT 4
66424: PUSH
66425: LD_INT 1
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: LIST
66436: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66437: LD_ADDR_VAR 0 25
66441: PUSH
66442: LD_INT 3
66444: PUSH
66445: LD_INT 3
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 4
66454: PUSH
66455: LD_INT 3
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 3
66464: PUSH
66465: LD_INT 4
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: LIST
66476: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66477: LD_ADDR_VAR 0 26
66481: PUSH
66482: LD_INT 0
66484: PUSH
66485: LD_INT 3
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 1
66494: PUSH
66495: LD_INT 4
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 1
66504: NEG
66505: PUSH
66506: LD_INT 3
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: LIST
66517: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66518: LD_ADDR_VAR 0 27
66522: PUSH
66523: LD_INT 3
66525: NEG
66526: PUSH
66527: LD_INT 0
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 3
66536: NEG
66537: PUSH
66538: LD_INT 1
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 4
66547: NEG
66548: PUSH
66549: LD_INT 1
66551: NEG
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: LIST
66561: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66562: LD_ADDR_VAR 0 28
66566: PUSH
66567: LD_INT 3
66569: NEG
66570: PUSH
66571: LD_INT 3
66573: NEG
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 3
66581: NEG
66582: PUSH
66583: LD_INT 4
66585: NEG
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 4
66593: NEG
66594: PUSH
66595: LD_INT 3
66597: NEG
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: LIST
66607: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66608: LD_ADDR_VAR 0 29
66612: PUSH
66613: LD_INT 1
66615: NEG
66616: PUSH
66617: LD_INT 3
66619: NEG
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 0
66627: PUSH
66628: LD_INT 3
66630: NEG
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 1
66638: PUSH
66639: LD_INT 2
66641: NEG
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 1
66649: NEG
66650: PUSH
66651: LD_INT 4
66653: NEG
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 0
66661: PUSH
66662: LD_INT 4
66664: NEG
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 1
66672: PUSH
66673: LD_INT 3
66675: NEG
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: LD_INT 1
66683: NEG
66684: PUSH
66685: LD_INT 5
66687: NEG
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: PUSH
66693: LD_INT 0
66695: PUSH
66696: LD_INT 5
66698: NEG
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 1
66706: PUSH
66707: LD_INT 4
66709: NEG
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PUSH
66715: LD_INT 1
66717: NEG
66718: PUSH
66719: LD_INT 6
66721: NEG
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: LD_INT 0
66729: PUSH
66730: LD_INT 6
66732: NEG
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: LD_INT 1
66740: PUSH
66741: LD_INT 5
66743: NEG
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66763: LD_ADDR_VAR 0 30
66767: PUSH
66768: LD_INT 2
66770: PUSH
66771: LD_INT 1
66773: NEG
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 3
66781: PUSH
66782: LD_INT 0
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 3
66791: PUSH
66792: LD_INT 1
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 3
66801: PUSH
66802: LD_INT 1
66804: NEG
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: PUSH
66810: LD_INT 4
66812: PUSH
66813: LD_INT 0
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 4
66822: PUSH
66823: LD_INT 1
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 4
66832: PUSH
66833: LD_INT 1
66835: NEG
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 5
66843: PUSH
66844: LD_INT 0
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 5
66853: PUSH
66854: LD_INT 1
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 5
66863: PUSH
66864: LD_INT 1
66866: NEG
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 6
66874: PUSH
66875: LD_INT 0
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 6
66884: PUSH
66885: LD_INT 1
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66906: LD_ADDR_VAR 0 31
66910: PUSH
66911: LD_INT 3
66913: PUSH
66914: LD_INT 2
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 3
66923: PUSH
66924: LD_INT 3
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 2
66933: PUSH
66934: LD_INT 3
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 4
66943: PUSH
66944: LD_INT 3
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PUSH
66951: LD_INT 4
66953: PUSH
66954: LD_INT 4
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: LD_INT 3
66963: PUSH
66964: LD_INT 4
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 5
66973: PUSH
66974: LD_INT 4
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: LD_INT 5
66983: PUSH
66984: LD_INT 5
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 4
66993: PUSH
66994: LD_INT 5
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 6
67003: PUSH
67004: LD_INT 5
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: LD_INT 6
67013: PUSH
67014: LD_INT 6
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: LD_INT 5
67023: PUSH
67024: LD_INT 6
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67045: LD_ADDR_VAR 0 32
67049: PUSH
67050: LD_INT 1
67052: PUSH
67053: LD_INT 3
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 0
67062: PUSH
67063: LD_INT 3
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 1
67072: NEG
67073: PUSH
67074: LD_INT 2
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 1
67083: PUSH
67084: LD_INT 4
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 0
67093: PUSH
67094: LD_INT 4
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 1
67103: NEG
67104: PUSH
67105: LD_INT 3
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: PUSH
67112: LD_INT 1
67114: PUSH
67115: LD_INT 5
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 0
67124: PUSH
67125: LD_INT 5
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 1
67134: NEG
67135: PUSH
67136: LD_INT 4
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: LD_INT 1
67145: PUSH
67146: LD_INT 6
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 0
67155: PUSH
67156: LD_INT 6
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 1
67165: NEG
67166: PUSH
67167: LD_INT 5
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67188: LD_ADDR_VAR 0 33
67192: PUSH
67193: LD_INT 2
67195: NEG
67196: PUSH
67197: LD_INT 1
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 3
67206: NEG
67207: PUSH
67208: LD_INT 0
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 3
67217: NEG
67218: PUSH
67219: LD_INT 1
67221: NEG
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: LD_INT 3
67229: NEG
67230: PUSH
67231: LD_INT 1
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 4
67240: NEG
67241: PUSH
67242: LD_INT 0
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: LD_INT 4
67251: NEG
67252: PUSH
67253: LD_INT 1
67255: NEG
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: LD_INT 4
67263: NEG
67264: PUSH
67265: LD_INT 1
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 5
67274: NEG
67275: PUSH
67276: LD_INT 0
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 5
67285: NEG
67286: PUSH
67287: LD_INT 1
67289: NEG
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: LD_INT 5
67297: NEG
67298: PUSH
67299: LD_INT 1
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 6
67308: NEG
67309: PUSH
67310: LD_INT 0
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 6
67319: NEG
67320: PUSH
67321: LD_INT 1
67323: NEG
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67343: LD_ADDR_VAR 0 34
67347: PUSH
67348: LD_INT 2
67350: NEG
67351: PUSH
67352: LD_INT 3
67354: NEG
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 3
67362: NEG
67363: PUSH
67364: LD_INT 2
67366: NEG
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 3
67374: NEG
67375: PUSH
67376: LD_INT 3
67378: NEG
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: LD_INT 3
67386: NEG
67387: PUSH
67388: LD_INT 4
67390: NEG
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: PUSH
67396: LD_INT 4
67398: NEG
67399: PUSH
67400: LD_INT 3
67402: NEG
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 4
67410: NEG
67411: PUSH
67412: LD_INT 4
67414: NEG
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 4
67422: NEG
67423: PUSH
67424: LD_INT 5
67426: NEG
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 5
67434: NEG
67435: PUSH
67436: LD_INT 4
67438: NEG
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 5
67446: NEG
67447: PUSH
67448: LD_INT 5
67450: NEG
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 5
67458: NEG
67459: PUSH
67460: LD_INT 6
67462: NEG
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 6
67470: NEG
67471: PUSH
67472: LD_INT 5
67474: NEG
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: LD_INT 6
67482: NEG
67483: PUSH
67484: LD_INT 6
67486: NEG
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67506: LD_ADDR_VAR 0 41
67510: PUSH
67511: LD_INT 0
67513: PUSH
67514: LD_INT 2
67516: NEG
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: LD_INT 1
67524: NEG
67525: PUSH
67526: LD_INT 3
67528: NEG
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PUSH
67534: LD_INT 1
67536: PUSH
67537: LD_INT 2
67539: NEG
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: LIST
67549: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67550: LD_ADDR_VAR 0 42
67554: PUSH
67555: LD_INT 2
67557: PUSH
67558: LD_INT 0
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 2
67567: PUSH
67568: LD_INT 1
67570: NEG
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 3
67578: PUSH
67579: LD_INT 1
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: LIST
67590: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67591: LD_ADDR_VAR 0 43
67595: PUSH
67596: LD_INT 2
67598: PUSH
67599: LD_INT 2
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 3
67608: PUSH
67609: LD_INT 2
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 2
67618: PUSH
67619: LD_INT 3
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: LIST
67630: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67631: LD_ADDR_VAR 0 44
67635: PUSH
67636: LD_INT 0
67638: PUSH
67639: LD_INT 2
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 1
67648: PUSH
67649: LD_INT 3
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 1
67658: NEG
67659: PUSH
67660: LD_INT 2
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: LIST
67671: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67672: LD_ADDR_VAR 0 45
67676: PUSH
67677: LD_INT 2
67679: NEG
67680: PUSH
67681: LD_INT 0
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 2
67690: NEG
67691: PUSH
67692: LD_INT 1
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 3
67701: NEG
67702: PUSH
67703: LD_INT 1
67705: NEG
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: LIST
67715: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67716: LD_ADDR_VAR 0 46
67720: PUSH
67721: LD_INT 2
67723: NEG
67724: PUSH
67725: LD_INT 2
67727: NEG
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 2
67735: NEG
67736: PUSH
67737: LD_INT 3
67739: NEG
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: LD_INT 3
67747: NEG
67748: PUSH
67749: LD_INT 2
67751: NEG
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: LIST
67761: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67762: LD_ADDR_VAR 0 47
67766: PUSH
67767: LD_INT 2
67769: NEG
67770: PUSH
67771: LD_INT 3
67773: NEG
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: LD_INT 1
67781: NEG
67782: PUSH
67783: LD_INT 3
67785: NEG
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67795: LD_ADDR_VAR 0 48
67799: PUSH
67800: LD_INT 1
67802: PUSH
67803: LD_INT 2
67805: NEG
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: LD_INT 2
67813: PUSH
67814: LD_INT 1
67816: NEG
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67826: LD_ADDR_VAR 0 49
67830: PUSH
67831: LD_INT 3
67833: PUSH
67834: LD_INT 1
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: LD_INT 3
67843: PUSH
67844: LD_INT 2
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67855: LD_ADDR_VAR 0 50
67859: PUSH
67860: LD_INT 2
67862: PUSH
67863: LD_INT 3
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 1
67872: PUSH
67873: LD_INT 3
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67884: LD_ADDR_VAR 0 51
67888: PUSH
67889: LD_INT 1
67891: NEG
67892: PUSH
67893: LD_INT 2
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 2
67902: NEG
67903: PUSH
67904: LD_INT 1
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67915: LD_ADDR_VAR 0 52
67919: PUSH
67920: LD_INT 3
67922: NEG
67923: PUSH
67924: LD_INT 1
67926: NEG
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 3
67934: NEG
67935: PUSH
67936: LD_INT 2
67938: NEG
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67948: LD_ADDR_VAR 0 53
67952: PUSH
67953: LD_INT 1
67955: NEG
67956: PUSH
67957: LD_INT 3
67959: NEG
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 0
67967: PUSH
67968: LD_INT 3
67970: NEG
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 1
67978: PUSH
67979: LD_INT 2
67981: NEG
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: LIST
67991: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67992: LD_ADDR_VAR 0 54
67996: PUSH
67997: LD_INT 2
67999: PUSH
68000: LD_INT 1
68002: NEG
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 3
68010: PUSH
68011: LD_INT 0
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: PUSH
68018: LD_INT 3
68020: PUSH
68021: LD_INT 1
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: LIST
68032: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68033: LD_ADDR_VAR 0 55
68037: PUSH
68038: LD_INT 3
68040: PUSH
68041: LD_INT 2
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 3
68050: PUSH
68051: LD_INT 3
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 2
68060: PUSH
68061: LD_INT 3
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: LIST
68072: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68073: LD_ADDR_VAR 0 56
68077: PUSH
68078: LD_INT 1
68080: PUSH
68081: LD_INT 3
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 0
68090: PUSH
68091: LD_INT 3
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 1
68100: NEG
68101: PUSH
68102: LD_INT 2
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: LIST
68113: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68114: LD_ADDR_VAR 0 57
68118: PUSH
68119: LD_INT 2
68121: NEG
68122: PUSH
68123: LD_INT 1
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 3
68132: NEG
68133: PUSH
68134: LD_INT 0
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: LD_INT 3
68143: NEG
68144: PUSH
68145: LD_INT 1
68147: NEG
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: LIST
68157: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68158: LD_ADDR_VAR 0 58
68162: PUSH
68163: LD_INT 2
68165: NEG
68166: PUSH
68167: LD_INT 3
68169: NEG
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 3
68177: NEG
68178: PUSH
68179: LD_INT 2
68181: NEG
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 3
68189: NEG
68190: PUSH
68191: LD_INT 3
68193: NEG
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: LIST
68203: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68204: LD_ADDR_VAR 0 59
68208: PUSH
68209: LD_INT 1
68211: NEG
68212: PUSH
68213: LD_INT 2
68215: NEG
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 0
68223: PUSH
68224: LD_INT 2
68226: NEG
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 1
68234: PUSH
68235: LD_INT 1
68237: NEG
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: LIST
68247: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68248: LD_ADDR_VAR 0 60
68252: PUSH
68253: LD_INT 1
68255: PUSH
68256: LD_INT 1
68258: NEG
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 2
68266: PUSH
68267: LD_INT 0
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 2
68276: PUSH
68277: LD_INT 1
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: LIST
68288: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68289: LD_ADDR_VAR 0 61
68293: PUSH
68294: LD_INT 2
68296: PUSH
68297: LD_INT 1
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 2
68306: PUSH
68307: LD_INT 2
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 1
68316: PUSH
68317: LD_INT 2
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: LIST
68328: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68329: LD_ADDR_VAR 0 62
68333: PUSH
68334: LD_INT 1
68336: PUSH
68337: LD_INT 2
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: PUSH
68344: LD_INT 0
68346: PUSH
68347: LD_INT 2
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: LD_INT 1
68356: NEG
68357: PUSH
68358: LD_INT 1
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: LIST
68369: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68370: LD_ADDR_VAR 0 63
68374: PUSH
68375: LD_INT 1
68377: NEG
68378: PUSH
68379: LD_INT 1
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: LD_INT 2
68388: NEG
68389: PUSH
68390: LD_INT 0
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 2
68399: NEG
68400: PUSH
68401: LD_INT 1
68403: NEG
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: LIST
68413: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68414: LD_ADDR_VAR 0 64
68418: PUSH
68419: LD_INT 1
68421: NEG
68422: PUSH
68423: LD_INT 2
68425: NEG
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 2
68433: NEG
68434: PUSH
68435: LD_INT 1
68437: NEG
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 2
68445: NEG
68446: PUSH
68447: LD_INT 2
68449: NEG
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: LIST
68459: ST_TO_ADDR
// end ; 2 :
68460: GO 71726
68462: LD_INT 2
68464: DOUBLE
68465: EQUAL
68466: IFTRUE 68470
68468: GO 71725
68470: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68471: LD_ADDR_VAR 0 29
68475: PUSH
68476: LD_INT 4
68478: PUSH
68479: LD_INT 0
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: PUSH
68486: LD_INT 4
68488: PUSH
68489: LD_INT 1
68491: NEG
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: LD_INT 5
68499: PUSH
68500: LD_INT 0
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: PUSH
68507: LD_INT 5
68509: PUSH
68510: LD_INT 1
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 4
68519: PUSH
68520: LD_INT 1
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 3
68529: PUSH
68530: LD_INT 0
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: LD_INT 3
68539: PUSH
68540: LD_INT 1
68542: NEG
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 3
68550: PUSH
68551: LD_INT 2
68553: NEG
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: PUSH
68559: LD_INT 5
68561: PUSH
68562: LD_INT 2
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: LD_INT 3
68571: PUSH
68572: LD_INT 3
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 3
68581: PUSH
68582: LD_INT 2
68584: PUSH
68585: EMPTY
68586: LIST
68587: LIST
68588: PUSH
68589: LD_INT 4
68591: PUSH
68592: LD_INT 3
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: LD_INT 4
68601: PUSH
68602: LD_INT 4
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 3
68611: PUSH
68612: LD_INT 4
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_INT 2
68621: PUSH
68622: LD_INT 3
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 2
68631: PUSH
68632: LD_INT 2
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 4
68641: PUSH
68642: LD_INT 2
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: PUSH
68649: LD_INT 2
68651: PUSH
68652: LD_INT 4
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 0
68661: PUSH
68662: LD_INT 4
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PUSH
68669: LD_INT 0
68671: PUSH
68672: LD_INT 3
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: PUSH
68679: LD_INT 1
68681: PUSH
68682: LD_INT 4
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 1
68691: PUSH
68692: LD_INT 5
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: LD_INT 0
68701: PUSH
68702: LD_INT 5
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: LD_INT 1
68711: NEG
68712: PUSH
68713: LD_INT 4
68715: PUSH
68716: EMPTY
68717: LIST
68718: LIST
68719: PUSH
68720: LD_INT 1
68722: NEG
68723: PUSH
68724: LD_INT 3
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: LD_INT 2
68733: PUSH
68734: LD_INT 5
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 2
68743: NEG
68744: PUSH
68745: LD_INT 3
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 3
68754: NEG
68755: PUSH
68756: LD_INT 0
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 3
68765: NEG
68766: PUSH
68767: LD_INT 1
68769: NEG
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 2
68777: NEG
68778: PUSH
68779: LD_INT 0
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 2
68788: NEG
68789: PUSH
68790: LD_INT 1
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: LD_INT 3
68799: NEG
68800: PUSH
68801: LD_INT 1
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: PUSH
68808: LD_INT 4
68810: NEG
68811: PUSH
68812: LD_INT 0
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: LD_INT 4
68821: NEG
68822: PUSH
68823: LD_INT 1
68825: NEG
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 4
68833: NEG
68834: PUSH
68835: LD_INT 2
68837: NEG
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: LD_INT 2
68845: NEG
68846: PUSH
68847: LD_INT 2
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 4
68856: NEG
68857: PUSH
68858: LD_INT 4
68860: NEG
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: PUSH
68866: LD_INT 4
68868: NEG
68869: PUSH
68870: LD_INT 5
68872: NEG
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: LD_INT 3
68880: NEG
68881: PUSH
68882: LD_INT 4
68884: NEG
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: LD_INT 3
68892: NEG
68893: PUSH
68894: LD_INT 3
68896: NEG
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 4
68904: NEG
68905: PUSH
68906: LD_INT 3
68908: NEG
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 5
68916: NEG
68917: PUSH
68918: LD_INT 4
68920: NEG
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: PUSH
68926: LD_INT 5
68928: NEG
68929: PUSH
68930: LD_INT 5
68932: NEG
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: LD_INT 3
68940: NEG
68941: PUSH
68942: LD_INT 5
68944: NEG
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PUSH
68950: LD_INT 5
68952: NEG
68953: PUSH
68954: LD_INT 3
68956: NEG
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: LIST
68984: LIST
68985: LIST
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69009: LD_ADDR_VAR 0 30
69013: PUSH
69014: LD_INT 4
69016: PUSH
69017: LD_INT 4
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PUSH
69024: LD_INT 4
69026: PUSH
69027: LD_INT 3
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: PUSH
69034: LD_INT 5
69036: PUSH
69037: LD_INT 4
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: PUSH
69044: LD_INT 5
69046: PUSH
69047: LD_INT 5
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: LD_INT 4
69056: PUSH
69057: LD_INT 5
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 3
69066: PUSH
69067: LD_INT 4
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 3
69076: PUSH
69077: LD_INT 3
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 5
69086: PUSH
69087: LD_INT 3
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: PUSH
69094: LD_INT 3
69096: PUSH
69097: LD_INT 5
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 0
69106: PUSH
69107: LD_INT 3
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: LD_INT 0
69116: PUSH
69117: LD_INT 2
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 1
69126: PUSH
69127: LD_INT 3
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PUSH
69134: LD_INT 1
69136: PUSH
69137: LD_INT 4
69139: PUSH
69140: EMPTY
69141: LIST
69142: LIST
69143: PUSH
69144: LD_INT 0
69146: PUSH
69147: LD_INT 4
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PUSH
69154: LD_INT 1
69156: NEG
69157: PUSH
69158: LD_INT 3
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: LD_INT 1
69167: NEG
69168: PUSH
69169: LD_INT 2
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: PUSH
69176: LD_INT 2
69178: PUSH
69179: LD_INT 4
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: LD_INT 2
69188: NEG
69189: PUSH
69190: LD_INT 2
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 4
69199: NEG
69200: PUSH
69201: LD_INT 0
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 4
69210: NEG
69211: PUSH
69212: LD_INT 1
69214: NEG
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: PUSH
69220: LD_INT 3
69222: NEG
69223: PUSH
69224: LD_INT 0
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: PUSH
69231: LD_INT 3
69233: NEG
69234: PUSH
69235: LD_INT 1
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 4
69244: NEG
69245: PUSH
69246: LD_INT 1
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: LD_INT 5
69255: NEG
69256: PUSH
69257: LD_INT 0
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 5
69266: NEG
69267: PUSH
69268: LD_INT 1
69270: NEG
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 5
69278: NEG
69279: PUSH
69280: LD_INT 2
69282: NEG
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 3
69290: NEG
69291: PUSH
69292: LD_INT 2
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 3
69301: NEG
69302: PUSH
69303: LD_INT 3
69305: NEG
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: PUSH
69311: LD_INT 3
69313: NEG
69314: PUSH
69315: LD_INT 4
69317: NEG
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: PUSH
69323: LD_INT 2
69325: NEG
69326: PUSH
69327: LD_INT 3
69329: NEG
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: LD_INT 2
69337: NEG
69338: PUSH
69339: LD_INT 2
69341: NEG
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 3
69349: NEG
69350: PUSH
69351: LD_INT 2
69353: NEG
69354: PUSH
69355: EMPTY
69356: LIST
69357: LIST
69358: PUSH
69359: LD_INT 4
69361: NEG
69362: PUSH
69363: LD_INT 3
69365: NEG
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 4
69373: NEG
69374: PUSH
69375: LD_INT 4
69377: NEG
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PUSH
69383: LD_INT 2
69385: NEG
69386: PUSH
69387: LD_INT 4
69389: NEG
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: PUSH
69395: LD_INT 4
69397: NEG
69398: PUSH
69399: LD_INT 2
69401: NEG
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: LD_INT 0
69409: PUSH
69410: LD_INT 4
69412: NEG
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PUSH
69418: LD_INT 0
69420: PUSH
69421: LD_INT 5
69423: NEG
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: LD_INT 1
69431: PUSH
69432: LD_INT 4
69434: NEG
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: LD_INT 1
69442: PUSH
69443: LD_INT 3
69445: NEG
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: PUSH
69451: LD_INT 0
69453: PUSH
69454: LD_INT 3
69456: NEG
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: LD_INT 1
69464: NEG
69465: PUSH
69466: LD_INT 4
69468: NEG
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: PUSH
69474: LD_INT 1
69476: NEG
69477: PUSH
69478: LD_INT 5
69480: NEG
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 2
69488: PUSH
69489: LD_INT 3
69491: NEG
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 2
69499: NEG
69500: PUSH
69501: LD_INT 5
69503: NEG
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: LIST
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69556: LD_ADDR_VAR 0 31
69560: PUSH
69561: LD_INT 0
69563: PUSH
69564: LD_INT 4
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: PUSH
69571: LD_INT 0
69573: PUSH
69574: LD_INT 3
69576: PUSH
69577: EMPTY
69578: LIST
69579: LIST
69580: PUSH
69581: LD_INT 1
69583: PUSH
69584: LD_INT 4
69586: PUSH
69587: EMPTY
69588: LIST
69589: LIST
69590: PUSH
69591: LD_INT 1
69593: PUSH
69594: LD_INT 5
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: PUSH
69601: LD_INT 0
69603: PUSH
69604: LD_INT 5
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: PUSH
69611: LD_INT 1
69613: NEG
69614: PUSH
69615: LD_INT 4
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: LD_INT 1
69624: NEG
69625: PUSH
69626: LD_INT 3
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: PUSH
69633: LD_INT 2
69635: PUSH
69636: LD_INT 5
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PUSH
69643: LD_INT 2
69645: NEG
69646: PUSH
69647: LD_INT 3
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PUSH
69654: LD_INT 3
69656: NEG
69657: PUSH
69658: LD_INT 0
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: PUSH
69665: LD_INT 3
69667: NEG
69668: PUSH
69669: LD_INT 1
69671: NEG
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 2
69679: NEG
69680: PUSH
69681: LD_INT 0
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PUSH
69688: LD_INT 2
69690: NEG
69691: PUSH
69692: LD_INT 1
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: PUSH
69699: LD_INT 3
69701: NEG
69702: PUSH
69703: LD_INT 1
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 4
69712: NEG
69713: PUSH
69714: LD_INT 0
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: PUSH
69721: LD_INT 4
69723: NEG
69724: PUSH
69725: LD_INT 1
69727: NEG
69728: PUSH
69729: EMPTY
69730: LIST
69731: LIST
69732: PUSH
69733: LD_INT 4
69735: NEG
69736: PUSH
69737: LD_INT 2
69739: NEG
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: LD_INT 2
69747: NEG
69748: PUSH
69749: LD_INT 2
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: PUSH
69756: LD_INT 4
69758: NEG
69759: PUSH
69760: LD_INT 4
69762: NEG
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: LD_INT 4
69770: NEG
69771: PUSH
69772: LD_INT 5
69774: NEG
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: LD_INT 3
69782: NEG
69783: PUSH
69784: LD_INT 4
69786: NEG
69787: PUSH
69788: EMPTY
69789: LIST
69790: LIST
69791: PUSH
69792: LD_INT 3
69794: NEG
69795: PUSH
69796: LD_INT 3
69798: NEG
69799: PUSH
69800: EMPTY
69801: LIST
69802: LIST
69803: PUSH
69804: LD_INT 4
69806: NEG
69807: PUSH
69808: LD_INT 3
69810: NEG
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: PUSH
69816: LD_INT 5
69818: NEG
69819: PUSH
69820: LD_INT 4
69822: NEG
69823: PUSH
69824: EMPTY
69825: LIST
69826: LIST
69827: PUSH
69828: LD_INT 5
69830: NEG
69831: PUSH
69832: LD_INT 5
69834: NEG
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: PUSH
69840: LD_INT 3
69842: NEG
69843: PUSH
69844: LD_INT 5
69846: NEG
69847: PUSH
69848: EMPTY
69849: LIST
69850: LIST
69851: PUSH
69852: LD_INT 5
69854: NEG
69855: PUSH
69856: LD_INT 3
69858: NEG
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PUSH
69864: LD_INT 0
69866: PUSH
69867: LD_INT 3
69869: NEG
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: LD_INT 0
69877: PUSH
69878: LD_INT 4
69880: NEG
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: PUSH
69886: LD_INT 1
69888: PUSH
69889: LD_INT 3
69891: NEG
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: LD_INT 1
69899: PUSH
69900: LD_INT 2
69902: NEG
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: PUSH
69908: LD_INT 0
69910: PUSH
69911: LD_INT 2
69913: NEG
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: PUSH
69919: LD_INT 1
69921: NEG
69922: PUSH
69923: LD_INT 3
69925: NEG
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: PUSH
69931: LD_INT 1
69933: NEG
69934: PUSH
69935: LD_INT 4
69937: NEG
69938: PUSH
69939: EMPTY
69940: LIST
69941: LIST
69942: PUSH
69943: LD_INT 2
69945: PUSH
69946: LD_INT 2
69948: NEG
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: LD_INT 2
69956: NEG
69957: PUSH
69958: LD_INT 4
69960: NEG
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: PUSH
69966: LD_INT 4
69968: PUSH
69969: LD_INT 0
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: PUSH
69976: LD_INT 4
69978: PUSH
69979: LD_INT 1
69981: NEG
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: PUSH
69987: LD_INT 5
69989: PUSH
69990: LD_INT 0
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: PUSH
69997: LD_INT 5
69999: PUSH
70000: LD_INT 1
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PUSH
70007: LD_INT 4
70009: PUSH
70010: LD_INT 1
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: LD_INT 3
70019: PUSH
70020: LD_INT 0
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: LD_INT 3
70029: PUSH
70030: LD_INT 1
70032: NEG
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: PUSH
70038: LD_INT 3
70040: PUSH
70041: LD_INT 2
70043: NEG
70044: PUSH
70045: EMPTY
70046: LIST
70047: LIST
70048: PUSH
70049: LD_INT 5
70051: PUSH
70052: LD_INT 2
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: LIST
70105: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70106: LD_ADDR_VAR 0 32
70110: PUSH
70111: LD_INT 4
70113: NEG
70114: PUSH
70115: LD_INT 0
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PUSH
70122: LD_INT 4
70124: NEG
70125: PUSH
70126: LD_INT 1
70128: NEG
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: PUSH
70134: LD_INT 3
70136: NEG
70137: PUSH
70138: LD_INT 0
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: PUSH
70145: LD_INT 3
70147: NEG
70148: PUSH
70149: LD_INT 1
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: LD_INT 4
70158: NEG
70159: PUSH
70160: LD_INT 1
70162: PUSH
70163: EMPTY
70164: LIST
70165: LIST
70166: PUSH
70167: LD_INT 5
70169: NEG
70170: PUSH
70171: LD_INT 0
70173: PUSH
70174: EMPTY
70175: LIST
70176: LIST
70177: PUSH
70178: LD_INT 5
70180: NEG
70181: PUSH
70182: LD_INT 1
70184: NEG
70185: PUSH
70186: EMPTY
70187: LIST
70188: LIST
70189: PUSH
70190: LD_INT 5
70192: NEG
70193: PUSH
70194: LD_INT 2
70196: NEG
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 3
70204: NEG
70205: PUSH
70206: LD_INT 2
70208: PUSH
70209: EMPTY
70210: LIST
70211: LIST
70212: PUSH
70213: LD_INT 3
70215: NEG
70216: PUSH
70217: LD_INT 3
70219: NEG
70220: PUSH
70221: EMPTY
70222: LIST
70223: LIST
70224: PUSH
70225: LD_INT 3
70227: NEG
70228: PUSH
70229: LD_INT 4
70231: NEG
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: PUSH
70237: LD_INT 2
70239: NEG
70240: PUSH
70241: LD_INT 3
70243: NEG
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: PUSH
70249: LD_INT 2
70251: NEG
70252: PUSH
70253: LD_INT 2
70255: NEG
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: LD_INT 3
70263: NEG
70264: PUSH
70265: LD_INT 2
70267: NEG
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: PUSH
70273: LD_INT 4
70275: NEG
70276: PUSH
70277: LD_INT 3
70279: NEG
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: PUSH
70285: LD_INT 4
70287: NEG
70288: PUSH
70289: LD_INT 4
70291: NEG
70292: PUSH
70293: EMPTY
70294: LIST
70295: LIST
70296: PUSH
70297: LD_INT 2
70299: NEG
70300: PUSH
70301: LD_INT 4
70303: NEG
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: LD_INT 4
70311: NEG
70312: PUSH
70313: LD_INT 2
70315: NEG
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PUSH
70321: LD_INT 0
70323: PUSH
70324: LD_INT 4
70326: NEG
70327: PUSH
70328: EMPTY
70329: LIST
70330: LIST
70331: PUSH
70332: LD_INT 0
70334: PUSH
70335: LD_INT 5
70337: NEG
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: PUSH
70343: LD_INT 1
70345: PUSH
70346: LD_INT 4
70348: NEG
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: LD_INT 1
70356: PUSH
70357: LD_INT 3
70359: NEG
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: PUSH
70365: LD_INT 0
70367: PUSH
70368: LD_INT 3
70370: NEG
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: PUSH
70376: LD_INT 1
70378: NEG
70379: PUSH
70380: LD_INT 4
70382: NEG
70383: PUSH
70384: EMPTY
70385: LIST
70386: LIST
70387: PUSH
70388: LD_INT 1
70390: NEG
70391: PUSH
70392: LD_INT 5
70394: NEG
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: PUSH
70400: LD_INT 2
70402: PUSH
70403: LD_INT 3
70405: NEG
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: LD_INT 2
70413: NEG
70414: PUSH
70415: LD_INT 5
70417: NEG
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PUSH
70423: LD_INT 3
70425: PUSH
70426: LD_INT 0
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PUSH
70433: LD_INT 3
70435: PUSH
70436: LD_INT 1
70438: NEG
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: PUSH
70444: LD_INT 4
70446: PUSH
70447: LD_INT 0
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: PUSH
70454: LD_INT 4
70456: PUSH
70457: LD_INT 1
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: PUSH
70464: LD_INT 3
70466: PUSH
70467: LD_INT 1
70469: PUSH
70470: EMPTY
70471: LIST
70472: LIST
70473: PUSH
70474: LD_INT 2
70476: PUSH
70477: LD_INT 0
70479: PUSH
70480: EMPTY
70481: LIST
70482: LIST
70483: PUSH
70484: LD_INT 2
70486: PUSH
70487: LD_INT 1
70489: NEG
70490: PUSH
70491: EMPTY
70492: LIST
70493: LIST
70494: PUSH
70495: LD_INT 2
70497: PUSH
70498: LD_INT 2
70500: NEG
70501: PUSH
70502: EMPTY
70503: LIST
70504: LIST
70505: PUSH
70506: LD_INT 4
70508: PUSH
70509: LD_INT 2
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: PUSH
70516: LD_INT 4
70518: PUSH
70519: LD_INT 4
70521: PUSH
70522: EMPTY
70523: LIST
70524: LIST
70525: PUSH
70526: LD_INT 4
70528: PUSH
70529: LD_INT 3
70531: PUSH
70532: EMPTY
70533: LIST
70534: LIST
70535: PUSH
70536: LD_INT 5
70538: PUSH
70539: LD_INT 4
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: PUSH
70546: LD_INT 5
70548: PUSH
70549: LD_INT 5
70551: PUSH
70552: EMPTY
70553: LIST
70554: LIST
70555: PUSH
70556: LD_INT 4
70558: PUSH
70559: LD_INT 5
70561: PUSH
70562: EMPTY
70563: LIST
70564: LIST
70565: PUSH
70566: LD_INT 3
70568: PUSH
70569: LD_INT 4
70571: PUSH
70572: EMPTY
70573: LIST
70574: LIST
70575: PUSH
70576: LD_INT 3
70578: PUSH
70579: LD_INT 3
70581: PUSH
70582: EMPTY
70583: LIST
70584: LIST
70585: PUSH
70586: LD_INT 5
70588: PUSH
70589: LD_INT 3
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PUSH
70596: LD_INT 3
70598: PUSH
70599: LD_INT 5
70601: PUSH
70602: EMPTY
70603: LIST
70604: LIST
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70653: LD_ADDR_VAR 0 33
70657: PUSH
70658: LD_INT 4
70660: NEG
70661: PUSH
70662: LD_INT 4
70664: NEG
70665: PUSH
70666: EMPTY
70667: LIST
70668: LIST
70669: PUSH
70670: LD_INT 4
70672: NEG
70673: PUSH
70674: LD_INT 5
70676: NEG
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: PUSH
70682: LD_INT 3
70684: NEG
70685: PUSH
70686: LD_INT 4
70688: NEG
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: PUSH
70694: LD_INT 3
70696: NEG
70697: PUSH
70698: LD_INT 3
70700: NEG
70701: PUSH
70702: EMPTY
70703: LIST
70704: LIST
70705: PUSH
70706: LD_INT 4
70708: NEG
70709: PUSH
70710: LD_INT 3
70712: NEG
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PUSH
70718: LD_INT 5
70720: NEG
70721: PUSH
70722: LD_INT 4
70724: NEG
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: PUSH
70730: LD_INT 5
70732: NEG
70733: PUSH
70734: LD_INT 5
70736: NEG
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 3
70744: NEG
70745: PUSH
70746: LD_INT 5
70748: NEG
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: PUSH
70754: LD_INT 5
70756: NEG
70757: PUSH
70758: LD_INT 3
70760: NEG
70761: PUSH
70762: EMPTY
70763: LIST
70764: LIST
70765: PUSH
70766: LD_INT 0
70768: PUSH
70769: LD_INT 3
70771: NEG
70772: PUSH
70773: EMPTY
70774: LIST
70775: LIST
70776: PUSH
70777: LD_INT 0
70779: PUSH
70780: LD_INT 4
70782: NEG
70783: PUSH
70784: EMPTY
70785: LIST
70786: LIST
70787: PUSH
70788: LD_INT 1
70790: PUSH
70791: LD_INT 3
70793: NEG
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 1
70801: PUSH
70802: LD_INT 2
70804: NEG
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: PUSH
70810: LD_INT 0
70812: PUSH
70813: LD_INT 2
70815: NEG
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: PUSH
70821: LD_INT 1
70823: NEG
70824: PUSH
70825: LD_INT 3
70827: NEG
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: PUSH
70833: LD_INT 1
70835: NEG
70836: PUSH
70837: LD_INT 4
70839: NEG
70840: PUSH
70841: EMPTY
70842: LIST
70843: LIST
70844: PUSH
70845: LD_INT 2
70847: PUSH
70848: LD_INT 2
70850: NEG
70851: PUSH
70852: EMPTY
70853: LIST
70854: LIST
70855: PUSH
70856: LD_INT 2
70858: NEG
70859: PUSH
70860: LD_INT 4
70862: NEG
70863: PUSH
70864: EMPTY
70865: LIST
70866: LIST
70867: PUSH
70868: LD_INT 4
70870: PUSH
70871: LD_INT 0
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: PUSH
70878: LD_INT 4
70880: PUSH
70881: LD_INT 1
70883: NEG
70884: PUSH
70885: EMPTY
70886: LIST
70887: LIST
70888: PUSH
70889: LD_INT 5
70891: PUSH
70892: LD_INT 0
70894: PUSH
70895: EMPTY
70896: LIST
70897: LIST
70898: PUSH
70899: LD_INT 5
70901: PUSH
70902: LD_INT 1
70904: PUSH
70905: EMPTY
70906: LIST
70907: LIST
70908: PUSH
70909: LD_INT 4
70911: PUSH
70912: LD_INT 1
70914: PUSH
70915: EMPTY
70916: LIST
70917: LIST
70918: PUSH
70919: LD_INT 3
70921: PUSH
70922: LD_INT 0
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: PUSH
70929: LD_INT 3
70931: PUSH
70932: LD_INT 1
70934: NEG
70935: PUSH
70936: EMPTY
70937: LIST
70938: LIST
70939: PUSH
70940: LD_INT 3
70942: PUSH
70943: LD_INT 2
70945: NEG
70946: PUSH
70947: EMPTY
70948: LIST
70949: LIST
70950: PUSH
70951: LD_INT 5
70953: PUSH
70954: LD_INT 2
70956: PUSH
70957: EMPTY
70958: LIST
70959: LIST
70960: PUSH
70961: LD_INT 3
70963: PUSH
70964: LD_INT 3
70966: PUSH
70967: EMPTY
70968: LIST
70969: LIST
70970: PUSH
70971: LD_INT 3
70973: PUSH
70974: LD_INT 2
70976: PUSH
70977: EMPTY
70978: LIST
70979: LIST
70980: PUSH
70981: LD_INT 4
70983: PUSH
70984: LD_INT 3
70986: PUSH
70987: EMPTY
70988: LIST
70989: LIST
70990: PUSH
70991: LD_INT 4
70993: PUSH
70994: LD_INT 4
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: LD_INT 3
71003: PUSH
71004: LD_INT 4
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 2
71013: PUSH
71014: LD_INT 3
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: PUSH
71021: LD_INT 2
71023: PUSH
71024: LD_INT 2
71026: PUSH
71027: EMPTY
71028: LIST
71029: LIST
71030: PUSH
71031: LD_INT 4
71033: PUSH
71034: LD_INT 2
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: PUSH
71041: LD_INT 2
71043: PUSH
71044: LD_INT 4
71046: PUSH
71047: EMPTY
71048: LIST
71049: LIST
71050: PUSH
71051: LD_INT 0
71053: PUSH
71054: LD_INT 4
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: PUSH
71061: LD_INT 0
71063: PUSH
71064: LD_INT 3
71066: PUSH
71067: EMPTY
71068: LIST
71069: LIST
71070: PUSH
71071: LD_INT 1
71073: PUSH
71074: LD_INT 4
71076: PUSH
71077: EMPTY
71078: LIST
71079: LIST
71080: PUSH
71081: LD_INT 1
71083: PUSH
71084: LD_INT 5
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: PUSH
71091: LD_INT 0
71093: PUSH
71094: LD_INT 5
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: LD_INT 1
71103: NEG
71104: PUSH
71105: LD_INT 4
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: LD_INT 1
71114: NEG
71115: PUSH
71116: LD_INT 3
71118: PUSH
71119: EMPTY
71120: LIST
71121: LIST
71122: PUSH
71123: LD_INT 2
71125: PUSH
71126: LD_INT 5
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: PUSH
71133: LD_INT 2
71135: NEG
71136: PUSH
71137: LD_INT 3
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: LIST
71148: LIST
71149: LIST
71150: LIST
71151: LIST
71152: LIST
71153: LIST
71154: LIST
71155: LIST
71156: LIST
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: LIST
71165: LIST
71166: LIST
71167: LIST
71168: LIST
71169: LIST
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71191: LD_ADDR_VAR 0 34
71195: PUSH
71196: LD_INT 0
71198: PUSH
71199: LD_INT 4
71201: NEG
71202: PUSH
71203: EMPTY
71204: LIST
71205: LIST
71206: PUSH
71207: LD_INT 0
71209: PUSH
71210: LD_INT 5
71212: NEG
71213: PUSH
71214: EMPTY
71215: LIST
71216: LIST
71217: PUSH
71218: LD_INT 1
71220: PUSH
71221: LD_INT 4
71223: NEG
71224: PUSH
71225: EMPTY
71226: LIST
71227: LIST
71228: PUSH
71229: LD_INT 1
71231: PUSH
71232: LD_INT 3
71234: NEG
71235: PUSH
71236: EMPTY
71237: LIST
71238: LIST
71239: PUSH
71240: LD_INT 0
71242: PUSH
71243: LD_INT 3
71245: NEG
71246: PUSH
71247: EMPTY
71248: LIST
71249: LIST
71250: PUSH
71251: LD_INT 1
71253: NEG
71254: PUSH
71255: LD_INT 4
71257: NEG
71258: PUSH
71259: EMPTY
71260: LIST
71261: LIST
71262: PUSH
71263: LD_INT 1
71265: NEG
71266: PUSH
71267: LD_INT 5
71269: NEG
71270: PUSH
71271: EMPTY
71272: LIST
71273: LIST
71274: PUSH
71275: LD_INT 2
71277: PUSH
71278: LD_INT 3
71280: NEG
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: PUSH
71286: LD_INT 2
71288: NEG
71289: PUSH
71290: LD_INT 5
71292: NEG
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: PUSH
71298: LD_INT 3
71300: PUSH
71301: LD_INT 0
71303: PUSH
71304: EMPTY
71305: LIST
71306: LIST
71307: PUSH
71308: LD_INT 3
71310: PUSH
71311: LD_INT 1
71313: NEG
71314: PUSH
71315: EMPTY
71316: LIST
71317: LIST
71318: PUSH
71319: LD_INT 4
71321: PUSH
71322: LD_INT 0
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: PUSH
71329: LD_INT 4
71331: PUSH
71332: LD_INT 1
71334: PUSH
71335: EMPTY
71336: LIST
71337: LIST
71338: PUSH
71339: LD_INT 3
71341: PUSH
71342: LD_INT 1
71344: PUSH
71345: EMPTY
71346: LIST
71347: LIST
71348: PUSH
71349: LD_INT 2
71351: PUSH
71352: LD_INT 0
71354: PUSH
71355: EMPTY
71356: LIST
71357: LIST
71358: PUSH
71359: LD_INT 2
71361: PUSH
71362: LD_INT 1
71364: NEG
71365: PUSH
71366: EMPTY
71367: LIST
71368: LIST
71369: PUSH
71370: LD_INT 2
71372: PUSH
71373: LD_INT 2
71375: NEG
71376: PUSH
71377: EMPTY
71378: LIST
71379: LIST
71380: PUSH
71381: LD_INT 4
71383: PUSH
71384: LD_INT 2
71386: PUSH
71387: EMPTY
71388: LIST
71389: LIST
71390: PUSH
71391: LD_INT 4
71393: PUSH
71394: LD_INT 4
71396: PUSH
71397: EMPTY
71398: LIST
71399: LIST
71400: PUSH
71401: LD_INT 4
71403: PUSH
71404: LD_INT 3
71406: PUSH
71407: EMPTY
71408: LIST
71409: LIST
71410: PUSH
71411: LD_INT 5
71413: PUSH
71414: LD_INT 4
71416: PUSH
71417: EMPTY
71418: LIST
71419: LIST
71420: PUSH
71421: LD_INT 5
71423: PUSH
71424: LD_INT 5
71426: PUSH
71427: EMPTY
71428: LIST
71429: LIST
71430: PUSH
71431: LD_INT 4
71433: PUSH
71434: LD_INT 5
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: PUSH
71441: LD_INT 3
71443: PUSH
71444: LD_INT 4
71446: PUSH
71447: EMPTY
71448: LIST
71449: LIST
71450: PUSH
71451: LD_INT 3
71453: PUSH
71454: LD_INT 3
71456: PUSH
71457: EMPTY
71458: LIST
71459: LIST
71460: PUSH
71461: LD_INT 5
71463: PUSH
71464: LD_INT 3
71466: PUSH
71467: EMPTY
71468: LIST
71469: LIST
71470: PUSH
71471: LD_INT 3
71473: PUSH
71474: LD_INT 5
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PUSH
71481: LD_INT 0
71483: PUSH
71484: LD_INT 3
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: PUSH
71491: LD_INT 0
71493: PUSH
71494: LD_INT 2
71496: PUSH
71497: EMPTY
71498: LIST
71499: LIST
71500: PUSH
71501: LD_INT 1
71503: PUSH
71504: LD_INT 3
71506: PUSH
71507: EMPTY
71508: LIST
71509: LIST
71510: PUSH
71511: LD_INT 1
71513: PUSH
71514: LD_INT 4
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: PUSH
71521: LD_INT 0
71523: PUSH
71524: LD_INT 4
71526: PUSH
71527: EMPTY
71528: LIST
71529: LIST
71530: PUSH
71531: LD_INT 1
71533: NEG
71534: PUSH
71535: LD_INT 3
71537: PUSH
71538: EMPTY
71539: LIST
71540: LIST
71541: PUSH
71542: LD_INT 1
71544: NEG
71545: PUSH
71546: LD_INT 2
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: PUSH
71553: LD_INT 2
71555: PUSH
71556: LD_INT 4
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: PUSH
71563: LD_INT 2
71565: NEG
71566: PUSH
71567: LD_INT 2
71569: PUSH
71570: EMPTY
71571: LIST
71572: LIST
71573: PUSH
71574: LD_INT 4
71576: NEG
71577: PUSH
71578: LD_INT 0
71580: PUSH
71581: EMPTY
71582: LIST
71583: LIST
71584: PUSH
71585: LD_INT 4
71587: NEG
71588: PUSH
71589: LD_INT 1
71591: NEG
71592: PUSH
71593: EMPTY
71594: LIST
71595: LIST
71596: PUSH
71597: LD_INT 3
71599: NEG
71600: PUSH
71601: LD_INT 0
71603: PUSH
71604: EMPTY
71605: LIST
71606: LIST
71607: PUSH
71608: LD_INT 3
71610: NEG
71611: PUSH
71612: LD_INT 1
71614: PUSH
71615: EMPTY
71616: LIST
71617: LIST
71618: PUSH
71619: LD_INT 4
71621: NEG
71622: PUSH
71623: LD_INT 1
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PUSH
71630: LD_INT 5
71632: NEG
71633: PUSH
71634: LD_INT 0
71636: PUSH
71637: EMPTY
71638: LIST
71639: LIST
71640: PUSH
71641: LD_INT 5
71643: NEG
71644: PUSH
71645: LD_INT 1
71647: NEG
71648: PUSH
71649: EMPTY
71650: LIST
71651: LIST
71652: PUSH
71653: LD_INT 5
71655: NEG
71656: PUSH
71657: LD_INT 2
71659: NEG
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: PUSH
71665: LD_INT 3
71667: NEG
71668: PUSH
71669: LD_INT 2
71671: PUSH
71672: EMPTY
71673: LIST
71674: LIST
71675: PUSH
71676: EMPTY
71677: LIST
71678: LIST
71679: LIST
71680: LIST
71681: LIST
71682: LIST
71683: LIST
71684: LIST
71685: LIST
71686: LIST
71687: LIST
71688: LIST
71689: LIST
71690: LIST
71691: LIST
71692: LIST
71693: LIST
71694: LIST
71695: LIST
71696: LIST
71697: LIST
71698: LIST
71699: LIST
71700: LIST
71701: LIST
71702: LIST
71703: LIST
71704: LIST
71705: LIST
71706: LIST
71707: LIST
71708: LIST
71709: LIST
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: ST_TO_ADDR
// end ; end ;
71723: GO 71726
71725: POP
// case btype of b_depot , b_warehouse :
71726: LD_VAR 0 1
71730: PUSH
71731: LD_INT 0
71733: DOUBLE
71734: EQUAL
71735: IFTRUE 71745
71737: LD_INT 1
71739: DOUBLE
71740: EQUAL
71741: IFTRUE 71745
71743: GO 71946
71745: POP
// case nation of nation_american :
71746: LD_VAR 0 5
71750: PUSH
71751: LD_INT 1
71753: DOUBLE
71754: EQUAL
71755: IFTRUE 71759
71757: GO 71815
71759: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71760: LD_ADDR_VAR 0 9
71764: PUSH
71765: LD_VAR 0 11
71769: PUSH
71770: LD_VAR 0 12
71774: PUSH
71775: LD_VAR 0 13
71779: PUSH
71780: LD_VAR 0 14
71784: PUSH
71785: LD_VAR 0 15
71789: PUSH
71790: LD_VAR 0 16
71794: PUSH
71795: EMPTY
71796: LIST
71797: LIST
71798: LIST
71799: LIST
71800: LIST
71801: LIST
71802: PUSH
71803: LD_VAR 0 4
71807: PUSH
71808: LD_INT 1
71810: PLUS
71811: ARRAY
71812: ST_TO_ADDR
71813: GO 71944
71815: LD_INT 2
71817: DOUBLE
71818: EQUAL
71819: IFTRUE 71823
71821: GO 71879
71823: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71824: LD_ADDR_VAR 0 9
71828: PUSH
71829: LD_VAR 0 17
71833: PUSH
71834: LD_VAR 0 18
71838: PUSH
71839: LD_VAR 0 19
71843: PUSH
71844: LD_VAR 0 20
71848: PUSH
71849: LD_VAR 0 21
71853: PUSH
71854: LD_VAR 0 22
71858: PUSH
71859: EMPTY
71860: LIST
71861: LIST
71862: LIST
71863: LIST
71864: LIST
71865: LIST
71866: PUSH
71867: LD_VAR 0 4
71871: PUSH
71872: LD_INT 1
71874: PLUS
71875: ARRAY
71876: ST_TO_ADDR
71877: GO 71944
71879: LD_INT 3
71881: DOUBLE
71882: EQUAL
71883: IFTRUE 71887
71885: GO 71943
71887: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71888: LD_ADDR_VAR 0 9
71892: PUSH
71893: LD_VAR 0 23
71897: PUSH
71898: LD_VAR 0 24
71902: PUSH
71903: LD_VAR 0 25
71907: PUSH
71908: LD_VAR 0 26
71912: PUSH
71913: LD_VAR 0 27
71917: PUSH
71918: LD_VAR 0 28
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: LIST
71927: LIST
71928: LIST
71929: LIST
71930: PUSH
71931: LD_VAR 0 4
71935: PUSH
71936: LD_INT 1
71938: PLUS
71939: ARRAY
71940: ST_TO_ADDR
71941: GO 71944
71943: POP
71944: GO 72499
71946: LD_INT 2
71948: DOUBLE
71949: EQUAL
71950: IFTRUE 71960
71952: LD_INT 3
71954: DOUBLE
71955: EQUAL
71956: IFTRUE 71960
71958: GO 72016
71960: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71961: LD_ADDR_VAR 0 9
71965: PUSH
71966: LD_VAR 0 29
71970: PUSH
71971: LD_VAR 0 30
71975: PUSH
71976: LD_VAR 0 31
71980: PUSH
71981: LD_VAR 0 32
71985: PUSH
71986: LD_VAR 0 33
71990: PUSH
71991: LD_VAR 0 34
71995: PUSH
71996: EMPTY
71997: LIST
71998: LIST
71999: LIST
72000: LIST
72001: LIST
72002: LIST
72003: PUSH
72004: LD_VAR 0 4
72008: PUSH
72009: LD_INT 1
72011: PLUS
72012: ARRAY
72013: ST_TO_ADDR
72014: GO 72499
72016: LD_INT 16
72018: DOUBLE
72019: EQUAL
72020: IFTRUE 72078
72022: LD_INT 17
72024: DOUBLE
72025: EQUAL
72026: IFTRUE 72078
72028: LD_INT 18
72030: DOUBLE
72031: EQUAL
72032: IFTRUE 72078
72034: LD_INT 19
72036: DOUBLE
72037: EQUAL
72038: IFTRUE 72078
72040: LD_INT 22
72042: DOUBLE
72043: EQUAL
72044: IFTRUE 72078
72046: LD_INT 20
72048: DOUBLE
72049: EQUAL
72050: IFTRUE 72078
72052: LD_INT 21
72054: DOUBLE
72055: EQUAL
72056: IFTRUE 72078
72058: LD_INT 23
72060: DOUBLE
72061: EQUAL
72062: IFTRUE 72078
72064: LD_INT 24
72066: DOUBLE
72067: EQUAL
72068: IFTRUE 72078
72070: LD_INT 25
72072: DOUBLE
72073: EQUAL
72074: IFTRUE 72078
72076: GO 72134
72078: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72079: LD_ADDR_VAR 0 9
72083: PUSH
72084: LD_VAR 0 35
72088: PUSH
72089: LD_VAR 0 36
72093: PUSH
72094: LD_VAR 0 37
72098: PUSH
72099: LD_VAR 0 38
72103: PUSH
72104: LD_VAR 0 39
72108: PUSH
72109: LD_VAR 0 40
72113: PUSH
72114: EMPTY
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: PUSH
72122: LD_VAR 0 4
72126: PUSH
72127: LD_INT 1
72129: PLUS
72130: ARRAY
72131: ST_TO_ADDR
72132: GO 72499
72134: LD_INT 6
72136: DOUBLE
72137: EQUAL
72138: IFTRUE 72190
72140: LD_INT 7
72142: DOUBLE
72143: EQUAL
72144: IFTRUE 72190
72146: LD_INT 8
72148: DOUBLE
72149: EQUAL
72150: IFTRUE 72190
72152: LD_INT 13
72154: DOUBLE
72155: EQUAL
72156: IFTRUE 72190
72158: LD_INT 12
72160: DOUBLE
72161: EQUAL
72162: IFTRUE 72190
72164: LD_INT 15
72166: DOUBLE
72167: EQUAL
72168: IFTRUE 72190
72170: LD_INT 11
72172: DOUBLE
72173: EQUAL
72174: IFTRUE 72190
72176: LD_INT 14
72178: DOUBLE
72179: EQUAL
72180: IFTRUE 72190
72182: LD_INT 10
72184: DOUBLE
72185: EQUAL
72186: IFTRUE 72190
72188: GO 72246
72190: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72191: LD_ADDR_VAR 0 9
72195: PUSH
72196: LD_VAR 0 41
72200: PUSH
72201: LD_VAR 0 42
72205: PUSH
72206: LD_VAR 0 43
72210: PUSH
72211: LD_VAR 0 44
72215: PUSH
72216: LD_VAR 0 45
72220: PUSH
72221: LD_VAR 0 46
72225: PUSH
72226: EMPTY
72227: LIST
72228: LIST
72229: LIST
72230: LIST
72231: LIST
72232: LIST
72233: PUSH
72234: LD_VAR 0 4
72238: PUSH
72239: LD_INT 1
72241: PLUS
72242: ARRAY
72243: ST_TO_ADDR
72244: GO 72499
72246: LD_INT 36
72248: DOUBLE
72249: EQUAL
72250: IFTRUE 72254
72252: GO 72310
72254: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72255: LD_ADDR_VAR 0 9
72259: PUSH
72260: LD_VAR 0 47
72264: PUSH
72265: LD_VAR 0 48
72269: PUSH
72270: LD_VAR 0 49
72274: PUSH
72275: LD_VAR 0 50
72279: PUSH
72280: LD_VAR 0 51
72284: PUSH
72285: LD_VAR 0 52
72289: PUSH
72290: EMPTY
72291: LIST
72292: LIST
72293: LIST
72294: LIST
72295: LIST
72296: LIST
72297: PUSH
72298: LD_VAR 0 4
72302: PUSH
72303: LD_INT 1
72305: PLUS
72306: ARRAY
72307: ST_TO_ADDR
72308: GO 72499
72310: LD_INT 4
72312: DOUBLE
72313: EQUAL
72314: IFTRUE 72336
72316: LD_INT 5
72318: DOUBLE
72319: EQUAL
72320: IFTRUE 72336
72322: LD_INT 34
72324: DOUBLE
72325: EQUAL
72326: IFTRUE 72336
72328: LD_INT 37
72330: DOUBLE
72331: EQUAL
72332: IFTRUE 72336
72334: GO 72392
72336: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72337: LD_ADDR_VAR 0 9
72341: PUSH
72342: LD_VAR 0 53
72346: PUSH
72347: LD_VAR 0 54
72351: PUSH
72352: LD_VAR 0 55
72356: PUSH
72357: LD_VAR 0 56
72361: PUSH
72362: LD_VAR 0 57
72366: PUSH
72367: LD_VAR 0 58
72371: PUSH
72372: EMPTY
72373: LIST
72374: LIST
72375: LIST
72376: LIST
72377: LIST
72378: LIST
72379: PUSH
72380: LD_VAR 0 4
72384: PUSH
72385: LD_INT 1
72387: PLUS
72388: ARRAY
72389: ST_TO_ADDR
72390: GO 72499
72392: LD_INT 31
72394: DOUBLE
72395: EQUAL
72396: IFTRUE 72442
72398: LD_INT 32
72400: DOUBLE
72401: EQUAL
72402: IFTRUE 72442
72404: LD_INT 33
72406: DOUBLE
72407: EQUAL
72408: IFTRUE 72442
72410: LD_INT 27
72412: DOUBLE
72413: EQUAL
72414: IFTRUE 72442
72416: LD_INT 26
72418: DOUBLE
72419: EQUAL
72420: IFTRUE 72442
72422: LD_INT 28
72424: DOUBLE
72425: EQUAL
72426: IFTRUE 72442
72428: LD_INT 29
72430: DOUBLE
72431: EQUAL
72432: IFTRUE 72442
72434: LD_INT 30
72436: DOUBLE
72437: EQUAL
72438: IFTRUE 72442
72440: GO 72498
72442: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72443: LD_ADDR_VAR 0 9
72447: PUSH
72448: LD_VAR 0 59
72452: PUSH
72453: LD_VAR 0 60
72457: PUSH
72458: LD_VAR 0 61
72462: PUSH
72463: LD_VAR 0 62
72467: PUSH
72468: LD_VAR 0 63
72472: PUSH
72473: LD_VAR 0 64
72477: PUSH
72478: EMPTY
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: PUSH
72486: LD_VAR 0 4
72490: PUSH
72491: LD_INT 1
72493: PLUS
72494: ARRAY
72495: ST_TO_ADDR
72496: GO 72499
72498: POP
// temp_list2 = [ ] ;
72499: LD_ADDR_VAR 0 10
72503: PUSH
72504: EMPTY
72505: ST_TO_ADDR
// for i in temp_list do
72506: LD_ADDR_VAR 0 8
72510: PUSH
72511: LD_VAR 0 9
72515: PUSH
72516: FOR_IN
72517: IFFALSE 72569
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72519: LD_ADDR_VAR 0 10
72523: PUSH
72524: LD_VAR 0 10
72528: PUSH
72529: LD_VAR 0 8
72533: PUSH
72534: LD_INT 1
72536: ARRAY
72537: PUSH
72538: LD_VAR 0 2
72542: PLUS
72543: PUSH
72544: LD_VAR 0 8
72548: PUSH
72549: LD_INT 2
72551: ARRAY
72552: PUSH
72553: LD_VAR 0 3
72557: PLUS
72558: PUSH
72559: EMPTY
72560: LIST
72561: LIST
72562: PUSH
72563: EMPTY
72564: LIST
72565: ADD
72566: ST_TO_ADDR
72567: GO 72516
72569: POP
72570: POP
// result = temp_list2 ;
72571: LD_ADDR_VAR 0 7
72575: PUSH
72576: LD_VAR 0 10
72580: ST_TO_ADDR
// end ;
72581: LD_VAR 0 7
72585: RET
// export function EnemyInRange ( unit , dist ) ; begin
72586: LD_INT 0
72588: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72589: LD_ADDR_VAR 0 3
72593: PUSH
72594: LD_VAR 0 1
72598: PPUSH
72599: CALL_OW 255
72603: PPUSH
72604: LD_VAR 0 1
72608: PPUSH
72609: CALL_OW 250
72613: PPUSH
72614: LD_VAR 0 1
72618: PPUSH
72619: CALL_OW 251
72623: PPUSH
72624: LD_VAR 0 2
72628: PPUSH
72629: CALL 46690 0 4
72633: PUSH
72634: LD_INT 4
72636: ARRAY
72637: ST_TO_ADDR
// end ;
72638: LD_VAR 0 3
72642: RET
// export function PlayerSeeMe ( unit ) ; begin
72643: LD_INT 0
72645: PPUSH
// result := See ( your_side , unit ) ;
72646: LD_ADDR_VAR 0 2
72650: PUSH
72651: LD_OWVAR 2
72655: PPUSH
72656: LD_VAR 0 1
72660: PPUSH
72661: CALL_OW 292
72665: ST_TO_ADDR
// end ;
72666: LD_VAR 0 2
72670: RET
// export function ReverseDir ( unit ) ; begin
72671: LD_INT 0
72673: PPUSH
// if not unit then
72674: LD_VAR 0 1
72678: NOT
72679: IFFALSE 72683
// exit ;
72681: GO 72706
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72683: LD_ADDR_VAR 0 2
72687: PUSH
72688: LD_VAR 0 1
72692: PPUSH
72693: CALL_OW 254
72697: PUSH
72698: LD_INT 3
72700: PLUS
72701: PUSH
72702: LD_INT 6
72704: MOD
72705: ST_TO_ADDR
// end ;
72706: LD_VAR 0 2
72710: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
72711: LD_INT 0
72713: PPUSH
72714: PPUSH
72715: PPUSH
72716: PPUSH
72717: PPUSH
// if not hexes then
72718: LD_VAR 0 2
72722: NOT
72723: IFFALSE 72727
// exit ;
72725: GO 72875
// dist := 9999 ;
72727: LD_ADDR_VAR 0 5
72731: PUSH
72732: LD_INT 9999
72734: ST_TO_ADDR
// for i = 1 to hexes do
72735: LD_ADDR_VAR 0 4
72739: PUSH
72740: DOUBLE
72741: LD_INT 1
72743: DEC
72744: ST_TO_ADDR
72745: LD_VAR 0 2
72749: PUSH
72750: FOR_TO
72751: IFFALSE 72863
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
72753: LD_VAR 0 1
72757: PPUSH
72758: LD_VAR 0 2
72762: PUSH
72763: LD_VAR 0 4
72767: ARRAY
72768: PUSH
72769: LD_INT 1
72771: ARRAY
72772: PPUSH
72773: LD_VAR 0 2
72777: PUSH
72778: LD_VAR 0 4
72782: ARRAY
72783: PUSH
72784: LD_INT 2
72786: ARRAY
72787: PPUSH
72788: CALL_OW 297
72792: PUSH
72793: LD_VAR 0 5
72797: LESS
72798: IFFALSE 72861
// begin hex := hexes [ i ] ;
72800: LD_ADDR_VAR 0 7
72804: PUSH
72805: LD_VAR 0 2
72809: PUSH
72810: LD_VAR 0 4
72814: ARRAY
72815: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72816: LD_ADDR_VAR 0 5
72820: PUSH
72821: LD_VAR 0 1
72825: PPUSH
72826: LD_VAR 0 2
72830: PUSH
72831: LD_VAR 0 4
72835: ARRAY
72836: PUSH
72837: LD_INT 1
72839: ARRAY
72840: PPUSH
72841: LD_VAR 0 2
72845: PUSH
72846: LD_VAR 0 4
72850: ARRAY
72851: PUSH
72852: LD_INT 2
72854: ARRAY
72855: PPUSH
72856: CALL_OW 297
72860: ST_TO_ADDR
// end ; end ;
72861: GO 72750
72863: POP
72864: POP
// result := hex ;
72865: LD_ADDR_VAR 0 3
72869: PUSH
72870: LD_VAR 0 7
72874: ST_TO_ADDR
// end ;
72875: LD_VAR 0 3
72879: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72880: LD_INT 0
72882: PPUSH
72883: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72884: LD_VAR 0 1
72888: NOT
72889: PUSH
72890: LD_VAR 0 1
72894: PUSH
72895: LD_INT 21
72897: PUSH
72898: LD_INT 2
72900: PUSH
72901: EMPTY
72902: LIST
72903: LIST
72904: PUSH
72905: LD_INT 23
72907: PUSH
72908: LD_INT 2
72910: PUSH
72911: EMPTY
72912: LIST
72913: LIST
72914: PUSH
72915: EMPTY
72916: LIST
72917: LIST
72918: PPUSH
72919: CALL_OW 69
72923: IN
72924: NOT
72925: OR
72926: IFFALSE 72930
// exit ;
72928: GO 72977
// for i = 1 to 3 do
72930: LD_ADDR_VAR 0 3
72934: PUSH
72935: DOUBLE
72936: LD_INT 1
72938: DEC
72939: ST_TO_ADDR
72940: LD_INT 3
72942: PUSH
72943: FOR_TO
72944: IFFALSE 72975
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72946: LD_VAR 0 1
72950: PPUSH
72951: CALL_OW 250
72955: PPUSH
72956: LD_VAR 0 1
72960: PPUSH
72961: CALL_OW 251
72965: PPUSH
72966: LD_INT 1
72968: PPUSH
72969: CALL_OW 453
72973: GO 72943
72975: POP
72976: POP
// end ;
72977: LD_VAR 0 2
72981: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72982: LD_INT 0
72984: PPUSH
72985: PPUSH
72986: PPUSH
72987: PPUSH
72988: PPUSH
72989: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72990: LD_VAR 0 1
72994: NOT
72995: PUSH
72996: LD_VAR 0 2
73000: NOT
73001: OR
73002: PUSH
73003: LD_VAR 0 1
73007: PPUSH
73008: CALL_OW 314
73012: OR
73013: IFFALSE 73017
// exit ;
73015: GO 73458
// x := GetX ( enemy_unit ) ;
73017: LD_ADDR_VAR 0 7
73021: PUSH
73022: LD_VAR 0 2
73026: PPUSH
73027: CALL_OW 250
73031: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73032: LD_ADDR_VAR 0 8
73036: PUSH
73037: LD_VAR 0 2
73041: PPUSH
73042: CALL_OW 251
73046: ST_TO_ADDR
// if not x or not y then
73047: LD_VAR 0 7
73051: NOT
73052: PUSH
73053: LD_VAR 0 8
73057: NOT
73058: OR
73059: IFFALSE 73063
// exit ;
73061: GO 73458
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73063: LD_ADDR_VAR 0 6
73067: PUSH
73068: LD_VAR 0 7
73072: PPUSH
73073: LD_INT 0
73075: PPUSH
73076: LD_INT 4
73078: PPUSH
73079: CALL_OW 272
73083: PUSH
73084: LD_VAR 0 8
73088: PPUSH
73089: LD_INT 0
73091: PPUSH
73092: LD_INT 4
73094: PPUSH
73095: CALL_OW 273
73099: PUSH
73100: EMPTY
73101: LIST
73102: LIST
73103: PUSH
73104: LD_VAR 0 7
73108: PPUSH
73109: LD_INT 1
73111: PPUSH
73112: LD_INT 4
73114: PPUSH
73115: CALL_OW 272
73119: PUSH
73120: LD_VAR 0 8
73124: PPUSH
73125: LD_INT 1
73127: PPUSH
73128: LD_INT 4
73130: PPUSH
73131: CALL_OW 273
73135: PUSH
73136: EMPTY
73137: LIST
73138: LIST
73139: PUSH
73140: LD_VAR 0 7
73144: PPUSH
73145: LD_INT 2
73147: PPUSH
73148: LD_INT 4
73150: PPUSH
73151: CALL_OW 272
73155: PUSH
73156: LD_VAR 0 8
73160: PPUSH
73161: LD_INT 2
73163: PPUSH
73164: LD_INT 4
73166: PPUSH
73167: CALL_OW 273
73171: PUSH
73172: EMPTY
73173: LIST
73174: LIST
73175: PUSH
73176: LD_VAR 0 7
73180: PPUSH
73181: LD_INT 3
73183: PPUSH
73184: LD_INT 4
73186: PPUSH
73187: CALL_OW 272
73191: PUSH
73192: LD_VAR 0 8
73196: PPUSH
73197: LD_INT 3
73199: PPUSH
73200: LD_INT 4
73202: PPUSH
73203: CALL_OW 273
73207: PUSH
73208: EMPTY
73209: LIST
73210: LIST
73211: PUSH
73212: LD_VAR 0 7
73216: PPUSH
73217: LD_INT 4
73219: PPUSH
73220: LD_INT 4
73222: PPUSH
73223: CALL_OW 272
73227: PUSH
73228: LD_VAR 0 8
73232: PPUSH
73233: LD_INT 4
73235: PPUSH
73236: LD_INT 4
73238: PPUSH
73239: CALL_OW 273
73243: PUSH
73244: EMPTY
73245: LIST
73246: LIST
73247: PUSH
73248: LD_VAR 0 7
73252: PPUSH
73253: LD_INT 5
73255: PPUSH
73256: LD_INT 4
73258: PPUSH
73259: CALL_OW 272
73263: PUSH
73264: LD_VAR 0 8
73268: PPUSH
73269: LD_INT 5
73271: PPUSH
73272: LD_INT 4
73274: PPUSH
73275: CALL_OW 273
73279: PUSH
73280: EMPTY
73281: LIST
73282: LIST
73283: PUSH
73284: EMPTY
73285: LIST
73286: LIST
73287: LIST
73288: LIST
73289: LIST
73290: LIST
73291: ST_TO_ADDR
// for i = tmp downto 1 do
73292: LD_ADDR_VAR 0 4
73296: PUSH
73297: DOUBLE
73298: LD_VAR 0 6
73302: INC
73303: ST_TO_ADDR
73304: LD_INT 1
73306: PUSH
73307: FOR_DOWNTO
73308: IFFALSE 73409
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73310: LD_VAR 0 6
73314: PUSH
73315: LD_VAR 0 4
73319: ARRAY
73320: PUSH
73321: LD_INT 1
73323: ARRAY
73324: PPUSH
73325: LD_VAR 0 6
73329: PUSH
73330: LD_VAR 0 4
73334: ARRAY
73335: PUSH
73336: LD_INT 2
73338: ARRAY
73339: PPUSH
73340: CALL_OW 488
73344: NOT
73345: PUSH
73346: LD_VAR 0 6
73350: PUSH
73351: LD_VAR 0 4
73355: ARRAY
73356: PUSH
73357: LD_INT 1
73359: ARRAY
73360: PPUSH
73361: LD_VAR 0 6
73365: PUSH
73366: LD_VAR 0 4
73370: ARRAY
73371: PUSH
73372: LD_INT 2
73374: ARRAY
73375: PPUSH
73376: CALL_OW 428
73380: PUSH
73381: LD_INT 0
73383: NONEQUAL
73384: OR
73385: IFFALSE 73407
// tmp := Delete ( tmp , i ) ;
73387: LD_ADDR_VAR 0 6
73391: PUSH
73392: LD_VAR 0 6
73396: PPUSH
73397: LD_VAR 0 4
73401: PPUSH
73402: CALL_OW 3
73406: ST_TO_ADDR
73407: GO 73307
73409: POP
73410: POP
// j := GetClosestHex ( unit , tmp ) ;
73411: LD_ADDR_VAR 0 5
73415: PUSH
73416: LD_VAR 0 1
73420: PPUSH
73421: LD_VAR 0 6
73425: PPUSH
73426: CALL 72711 0 2
73430: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73431: LD_VAR 0 1
73435: PPUSH
73436: LD_VAR 0 5
73440: PUSH
73441: LD_INT 1
73443: ARRAY
73444: PPUSH
73445: LD_VAR 0 5
73449: PUSH
73450: LD_INT 2
73452: ARRAY
73453: PPUSH
73454: CALL_OW 111
// end ;
73458: LD_VAR 0 3
73462: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73463: LD_INT 0
73465: PPUSH
73466: PPUSH
73467: PPUSH
// uc_side = 0 ;
73468: LD_ADDR_OWVAR 20
73472: PUSH
73473: LD_INT 0
73475: ST_TO_ADDR
// uc_nation = 0 ;
73476: LD_ADDR_OWVAR 21
73480: PUSH
73481: LD_INT 0
73483: ST_TO_ADDR
// InitHc_All ( ) ;
73484: CALL_OW 584
// InitVc ;
73488: CALL_OW 20
// if mastodonts then
73492: LD_VAR 0 6
73496: IFFALSE 73563
// for i = 1 to mastodonts do
73498: LD_ADDR_VAR 0 11
73502: PUSH
73503: DOUBLE
73504: LD_INT 1
73506: DEC
73507: ST_TO_ADDR
73508: LD_VAR 0 6
73512: PUSH
73513: FOR_TO
73514: IFFALSE 73561
// begin vc_chassis := 31 ;
73516: LD_ADDR_OWVAR 37
73520: PUSH
73521: LD_INT 31
73523: ST_TO_ADDR
// vc_control := control_rider ;
73524: LD_ADDR_OWVAR 38
73528: PUSH
73529: LD_INT 4
73531: ST_TO_ADDR
// animal := CreateVehicle ;
73532: LD_ADDR_VAR 0 12
73536: PUSH
73537: CALL_OW 45
73541: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73542: LD_VAR 0 12
73546: PPUSH
73547: LD_VAR 0 8
73551: PPUSH
73552: LD_INT 0
73554: PPUSH
73555: CALL 75751 0 3
// end ;
73559: GO 73513
73561: POP
73562: POP
// if horses then
73563: LD_VAR 0 5
73567: IFFALSE 73634
// for i = 1 to horses do
73569: LD_ADDR_VAR 0 11
73573: PUSH
73574: DOUBLE
73575: LD_INT 1
73577: DEC
73578: ST_TO_ADDR
73579: LD_VAR 0 5
73583: PUSH
73584: FOR_TO
73585: IFFALSE 73632
// begin hc_class := 21 ;
73587: LD_ADDR_OWVAR 28
73591: PUSH
73592: LD_INT 21
73594: ST_TO_ADDR
// hc_gallery :=  ;
73595: LD_ADDR_OWVAR 33
73599: PUSH
73600: LD_STRING 
73602: ST_TO_ADDR
// animal := CreateHuman ;
73603: LD_ADDR_VAR 0 12
73607: PUSH
73608: CALL_OW 44
73612: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73613: LD_VAR 0 12
73617: PPUSH
73618: LD_VAR 0 8
73622: PPUSH
73623: LD_INT 0
73625: PPUSH
73626: CALL 75751 0 3
// end ;
73630: GO 73584
73632: POP
73633: POP
// if birds then
73634: LD_VAR 0 1
73638: IFFALSE 73705
// for i = 1 to birds do
73640: LD_ADDR_VAR 0 11
73644: PUSH
73645: DOUBLE
73646: LD_INT 1
73648: DEC
73649: ST_TO_ADDR
73650: LD_VAR 0 1
73654: PUSH
73655: FOR_TO
73656: IFFALSE 73703
// begin hc_class = 18 ;
73658: LD_ADDR_OWVAR 28
73662: PUSH
73663: LD_INT 18
73665: ST_TO_ADDR
// hc_gallery =  ;
73666: LD_ADDR_OWVAR 33
73670: PUSH
73671: LD_STRING 
73673: ST_TO_ADDR
// animal := CreateHuman ;
73674: LD_ADDR_VAR 0 12
73678: PUSH
73679: CALL_OW 44
73683: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73684: LD_VAR 0 12
73688: PPUSH
73689: LD_VAR 0 8
73693: PPUSH
73694: LD_INT 0
73696: PPUSH
73697: CALL 75751 0 3
// end ;
73701: GO 73655
73703: POP
73704: POP
// if tigers then
73705: LD_VAR 0 2
73709: IFFALSE 73793
// for i = 1 to tigers do
73711: LD_ADDR_VAR 0 11
73715: PUSH
73716: DOUBLE
73717: LD_INT 1
73719: DEC
73720: ST_TO_ADDR
73721: LD_VAR 0 2
73725: PUSH
73726: FOR_TO
73727: IFFALSE 73791
// begin hc_class = class_tiger ;
73729: LD_ADDR_OWVAR 28
73733: PUSH
73734: LD_INT 14
73736: ST_TO_ADDR
// hc_gallery =  ;
73737: LD_ADDR_OWVAR 33
73741: PUSH
73742: LD_STRING 
73744: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73745: LD_ADDR_OWVAR 35
73749: PUSH
73750: LD_INT 7
73752: NEG
73753: PPUSH
73754: LD_INT 7
73756: PPUSH
73757: CALL_OW 12
73761: ST_TO_ADDR
// animal := CreateHuman ;
73762: LD_ADDR_VAR 0 12
73766: PUSH
73767: CALL_OW 44
73771: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73772: LD_VAR 0 12
73776: PPUSH
73777: LD_VAR 0 8
73781: PPUSH
73782: LD_INT 0
73784: PPUSH
73785: CALL 75751 0 3
// end ;
73789: GO 73726
73791: POP
73792: POP
// if apemans then
73793: LD_VAR 0 3
73797: IFFALSE 73920
// for i = 1 to apemans do
73799: LD_ADDR_VAR 0 11
73803: PUSH
73804: DOUBLE
73805: LD_INT 1
73807: DEC
73808: ST_TO_ADDR
73809: LD_VAR 0 3
73813: PUSH
73814: FOR_TO
73815: IFFALSE 73918
// begin hc_class = class_apeman ;
73817: LD_ADDR_OWVAR 28
73821: PUSH
73822: LD_INT 12
73824: ST_TO_ADDR
// hc_gallery =  ;
73825: LD_ADDR_OWVAR 33
73829: PUSH
73830: LD_STRING 
73832: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
73833: LD_ADDR_OWVAR 35
73837: PUSH
73838: LD_INT 5
73840: NEG
73841: PPUSH
73842: LD_INT 5
73844: PPUSH
73845: CALL_OW 12
73849: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73850: LD_ADDR_OWVAR 31
73854: PUSH
73855: LD_INT 1
73857: PPUSH
73858: LD_INT 3
73860: PPUSH
73861: CALL_OW 12
73865: PUSH
73866: LD_INT 1
73868: PPUSH
73869: LD_INT 3
73871: PPUSH
73872: CALL_OW 12
73876: PUSH
73877: LD_INT 0
73879: PUSH
73880: LD_INT 0
73882: PUSH
73883: EMPTY
73884: LIST
73885: LIST
73886: LIST
73887: LIST
73888: ST_TO_ADDR
// animal := CreateHuman ;
73889: LD_ADDR_VAR 0 12
73893: PUSH
73894: CALL_OW 44
73898: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73899: LD_VAR 0 12
73903: PPUSH
73904: LD_VAR 0 8
73908: PPUSH
73909: LD_INT 0
73911: PPUSH
73912: CALL 75751 0 3
// end ;
73916: GO 73814
73918: POP
73919: POP
// if enchidnas then
73920: LD_VAR 0 4
73924: IFFALSE 73991
// for i = 1 to enchidnas do
73926: LD_ADDR_VAR 0 11
73930: PUSH
73931: DOUBLE
73932: LD_INT 1
73934: DEC
73935: ST_TO_ADDR
73936: LD_VAR 0 4
73940: PUSH
73941: FOR_TO
73942: IFFALSE 73989
// begin hc_class = 13 ;
73944: LD_ADDR_OWVAR 28
73948: PUSH
73949: LD_INT 13
73951: ST_TO_ADDR
// hc_gallery =  ;
73952: LD_ADDR_OWVAR 33
73956: PUSH
73957: LD_STRING 
73959: ST_TO_ADDR
// animal := CreateHuman ;
73960: LD_ADDR_VAR 0 12
73964: PUSH
73965: CALL_OW 44
73969: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73970: LD_VAR 0 12
73974: PPUSH
73975: LD_VAR 0 8
73979: PPUSH
73980: LD_INT 0
73982: PPUSH
73983: CALL 75751 0 3
// end ;
73987: GO 73941
73989: POP
73990: POP
// if fishes then
73991: LD_VAR 0 7
73995: IFFALSE 74062
// for i = 1 to fishes do
73997: LD_ADDR_VAR 0 11
74001: PUSH
74002: DOUBLE
74003: LD_INT 1
74005: DEC
74006: ST_TO_ADDR
74007: LD_VAR 0 7
74011: PUSH
74012: FOR_TO
74013: IFFALSE 74060
// begin hc_class = 20 ;
74015: LD_ADDR_OWVAR 28
74019: PUSH
74020: LD_INT 20
74022: ST_TO_ADDR
// hc_gallery =  ;
74023: LD_ADDR_OWVAR 33
74027: PUSH
74028: LD_STRING 
74030: ST_TO_ADDR
// animal := CreateHuman ;
74031: LD_ADDR_VAR 0 12
74035: PUSH
74036: CALL_OW 44
74040: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74041: LD_VAR 0 12
74045: PPUSH
74046: LD_VAR 0 9
74050: PPUSH
74051: LD_INT 0
74053: PPUSH
74054: CALL 75751 0 3
// end ;
74058: GO 74012
74060: POP
74061: POP
// end ;
74062: LD_VAR 0 10
74066: RET
// export function WantHeal ( sci , unit ) ; begin
74067: LD_INT 0
74069: PPUSH
// if GetTaskList ( sci ) > 0 then
74070: LD_VAR 0 1
74074: PPUSH
74075: CALL_OW 437
74079: PUSH
74080: LD_INT 0
74082: GREATER
74083: IFFALSE 74153
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74085: LD_VAR 0 1
74089: PPUSH
74090: CALL_OW 437
74094: PUSH
74095: LD_INT 1
74097: ARRAY
74098: PUSH
74099: LD_INT 1
74101: ARRAY
74102: PUSH
74103: LD_STRING l
74105: EQUAL
74106: PUSH
74107: LD_VAR 0 1
74111: PPUSH
74112: CALL_OW 437
74116: PUSH
74117: LD_INT 1
74119: ARRAY
74120: PUSH
74121: LD_INT 4
74123: ARRAY
74124: PUSH
74125: LD_VAR 0 2
74129: EQUAL
74130: AND
74131: IFFALSE 74143
// result := true else
74133: LD_ADDR_VAR 0 3
74137: PUSH
74138: LD_INT 1
74140: ST_TO_ADDR
74141: GO 74151
// result := false ;
74143: LD_ADDR_VAR 0 3
74147: PUSH
74148: LD_INT 0
74150: ST_TO_ADDR
// end else
74151: GO 74161
// result := false ;
74153: LD_ADDR_VAR 0 3
74157: PUSH
74158: LD_INT 0
74160: ST_TO_ADDR
// end ;
74161: LD_VAR 0 3
74165: RET
// export function HealTarget ( sci ) ; begin
74166: LD_INT 0
74168: PPUSH
// if not sci then
74169: LD_VAR 0 1
74173: NOT
74174: IFFALSE 74178
// exit ;
74176: GO 74243
// result := 0 ;
74178: LD_ADDR_VAR 0 2
74182: PUSH
74183: LD_INT 0
74185: ST_TO_ADDR
// if GetTaskList ( sci ) then
74186: LD_VAR 0 1
74190: PPUSH
74191: CALL_OW 437
74195: IFFALSE 74243
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74197: LD_VAR 0 1
74201: PPUSH
74202: CALL_OW 437
74206: PUSH
74207: LD_INT 1
74209: ARRAY
74210: PUSH
74211: LD_INT 1
74213: ARRAY
74214: PUSH
74215: LD_STRING l
74217: EQUAL
74218: IFFALSE 74243
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74220: LD_ADDR_VAR 0 2
74224: PUSH
74225: LD_VAR 0 1
74229: PPUSH
74230: CALL_OW 437
74234: PUSH
74235: LD_INT 1
74237: ARRAY
74238: PUSH
74239: LD_INT 4
74241: ARRAY
74242: ST_TO_ADDR
// end ;
74243: LD_VAR 0 2
74247: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74248: LD_INT 0
74250: PPUSH
74251: PPUSH
74252: PPUSH
74253: PPUSH
// if not base_units then
74254: LD_VAR 0 1
74258: NOT
74259: IFFALSE 74263
// exit ;
74261: GO 74350
// result := false ;
74263: LD_ADDR_VAR 0 2
74267: PUSH
74268: LD_INT 0
74270: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74271: LD_ADDR_VAR 0 5
74275: PUSH
74276: LD_VAR 0 1
74280: PPUSH
74281: LD_INT 21
74283: PUSH
74284: LD_INT 3
74286: PUSH
74287: EMPTY
74288: LIST
74289: LIST
74290: PPUSH
74291: CALL_OW 72
74295: ST_TO_ADDR
// if not tmp then
74296: LD_VAR 0 5
74300: NOT
74301: IFFALSE 74305
// exit ;
74303: GO 74350
// for i in tmp do
74305: LD_ADDR_VAR 0 3
74309: PUSH
74310: LD_VAR 0 5
74314: PUSH
74315: FOR_IN
74316: IFFALSE 74348
// begin result := EnemyInRange ( i , 22 ) ;
74318: LD_ADDR_VAR 0 2
74322: PUSH
74323: LD_VAR 0 3
74327: PPUSH
74328: LD_INT 22
74330: PPUSH
74331: CALL 72586 0 2
74335: ST_TO_ADDR
// if result then
74336: LD_VAR 0 2
74340: IFFALSE 74346
// exit ;
74342: POP
74343: POP
74344: GO 74350
// end ;
74346: GO 74315
74348: POP
74349: POP
// end ;
74350: LD_VAR 0 2
74354: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
74355: LD_INT 0
74357: PPUSH
74358: PPUSH
// if not units then
74359: LD_VAR 0 1
74363: NOT
74364: IFFALSE 74368
// exit ;
74366: GO 74438
// result := [ ] ;
74368: LD_ADDR_VAR 0 3
74372: PUSH
74373: EMPTY
74374: ST_TO_ADDR
// for i in units do
74375: LD_ADDR_VAR 0 4
74379: PUSH
74380: LD_VAR 0 1
74384: PUSH
74385: FOR_IN
74386: IFFALSE 74436
// if GetTag ( i ) = tag then
74388: LD_VAR 0 4
74392: PPUSH
74393: CALL_OW 110
74397: PUSH
74398: LD_VAR 0 2
74402: EQUAL
74403: IFFALSE 74434
// result := Insert ( result , result + 1 , i ) ;
74405: LD_ADDR_VAR 0 3
74409: PUSH
74410: LD_VAR 0 3
74414: PPUSH
74415: LD_VAR 0 3
74419: PUSH
74420: LD_INT 1
74422: PLUS
74423: PPUSH
74424: LD_VAR 0 4
74428: PPUSH
74429: CALL_OW 2
74433: ST_TO_ADDR
74434: GO 74385
74436: POP
74437: POP
// end ;
74438: LD_VAR 0 3
74442: RET
// export function IsDriver ( un ) ; begin
74443: LD_INT 0
74445: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74446: LD_ADDR_VAR 0 2
74450: PUSH
74451: LD_VAR 0 1
74455: PUSH
74456: LD_INT 55
74458: PUSH
74459: EMPTY
74460: LIST
74461: PPUSH
74462: CALL_OW 69
74466: IN
74467: ST_TO_ADDR
// end ;
74468: LD_VAR 0 2
74472: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74473: LD_INT 0
74475: PPUSH
74476: PPUSH
// list := [ ] ;
74477: LD_ADDR_VAR 0 5
74481: PUSH
74482: EMPTY
74483: ST_TO_ADDR
// case d of 0 :
74484: LD_VAR 0 3
74488: PUSH
74489: LD_INT 0
74491: DOUBLE
74492: EQUAL
74493: IFTRUE 74497
74495: GO 74630
74497: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74498: LD_ADDR_VAR 0 5
74502: PUSH
74503: LD_VAR 0 1
74507: PUSH
74508: LD_INT 4
74510: MINUS
74511: PUSH
74512: LD_VAR 0 2
74516: PUSH
74517: LD_INT 4
74519: MINUS
74520: PUSH
74521: LD_INT 2
74523: PUSH
74524: EMPTY
74525: LIST
74526: LIST
74527: LIST
74528: PUSH
74529: LD_VAR 0 1
74533: PUSH
74534: LD_INT 3
74536: MINUS
74537: PUSH
74538: LD_VAR 0 2
74542: PUSH
74543: LD_INT 1
74545: PUSH
74546: EMPTY
74547: LIST
74548: LIST
74549: LIST
74550: PUSH
74551: LD_VAR 0 1
74555: PUSH
74556: LD_INT 4
74558: PLUS
74559: PUSH
74560: LD_VAR 0 2
74564: PUSH
74565: LD_INT 4
74567: PUSH
74568: EMPTY
74569: LIST
74570: LIST
74571: LIST
74572: PUSH
74573: LD_VAR 0 1
74577: PUSH
74578: LD_INT 3
74580: PLUS
74581: PUSH
74582: LD_VAR 0 2
74586: PUSH
74587: LD_INT 3
74589: PLUS
74590: PUSH
74591: LD_INT 5
74593: PUSH
74594: EMPTY
74595: LIST
74596: LIST
74597: LIST
74598: PUSH
74599: LD_VAR 0 1
74603: PUSH
74604: LD_VAR 0 2
74608: PUSH
74609: LD_INT 4
74611: PLUS
74612: PUSH
74613: LD_INT 0
74615: PUSH
74616: EMPTY
74617: LIST
74618: LIST
74619: LIST
74620: PUSH
74621: EMPTY
74622: LIST
74623: LIST
74624: LIST
74625: LIST
74626: LIST
74627: ST_TO_ADDR
// end ; 1 :
74628: GO 75328
74630: LD_INT 1
74632: DOUBLE
74633: EQUAL
74634: IFTRUE 74638
74636: GO 74771
74638: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74639: LD_ADDR_VAR 0 5
74643: PUSH
74644: LD_VAR 0 1
74648: PUSH
74649: LD_VAR 0 2
74653: PUSH
74654: LD_INT 4
74656: MINUS
74657: PUSH
74658: LD_INT 3
74660: PUSH
74661: EMPTY
74662: LIST
74663: LIST
74664: LIST
74665: PUSH
74666: LD_VAR 0 1
74670: PUSH
74671: LD_INT 3
74673: MINUS
74674: PUSH
74675: LD_VAR 0 2
74679: PUSH
74680: LD_INT 3
74682: MINUS
74683: PUSH
74684: LD_INT 2
74686: PUSH
74687: EMPTY
74688: LIST
74689: LIST
74690: LIST
74691: PUSH
74692: LD_VAR 0 1
74696: PUSH
74697: LD_INT 4
74699: MINUS
74700: PUSH
74701: LD_VAR 0 2
74705: PUSH
74706: LD_INT 1
74708: PUSH
74709: EMPTY
74710: LIST
74711: LIST
74712: LIST
74713: PUSH
74714: LD_VAR 0 1
74718: PUSH
74719: LD_VAR 0 2
74723: PUSH
74724: LD_INT 3
74726: PLUS
74727: PUSH
74728: LD_INT 0
74730: PUSH
74731: EMPTY
74732: LIST
74733: LIST
74734: LIST
74735: PUSH
74736: LD_VAR 0 1
74740: PUSH
74741: LD_INT 4
74743: PLUS
74744: PUSH
74745: LD_VAR 0 2
74749: PUSH
74750: LD_INT 4
74752: PLUS
74753: PUSH
74754: LD_INT 5
74756: PUSH
74757: EMPTY
74758: LIST
74759: LIST
74760: LIST
74761: PUSH
74762: EMPTY
74763: LIST
74764: LIST
74765: LIST
74766: LIST
74767: LIST
74768: ST_TO_ADDR
// end ; 2 :
74769: GO 75328
74771: LD_INT 2
74773: DOUBLE
74774: EQUAL
74775: IFTRUE 74779
74777: GO 74908
74779: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74780: LD_ADDR_VAR 0 5
74784: PUSH
74785: LD_VAR 0 1
74789: PUSH
74790: LD_VAR 0 2
74794: PUSH
74795: LD_INT 3
74797: MINUS
74798: PUSH
74799: LD_INT 3
74801: PUSH
74802: EMPTY
74803: LIST
74804: LIST
74805: LIST
74806: PUSH
74807: LD_VAR 0 1
74811: PUSH
74812: LD_INT 4
74814: PLUS
74815: PUSH
74816: LD_VAR 0 2
74820: PUSH
74821: LD_INT 4
74823: PUSH
74824: EMPTY
74825: LIST
74826: LIST
74827: LIST
74828: PUSH
74829: LD_VAR 0 1
74833: PUSH
74834: LD_VAR 0 2
74838: PUSH
74839: LD_INT 4
74841: PLUS
74842: PUSH
74843: LD_INT 0
74845: PUSH
74846: EMPTY
74847: LIST
74848: LIST
74849: LIST
74850: PUSH
74851: LD_VAR 0 1
74855: PUSH
74856: LD_INT 3
74858: MINUS
74859: PUSH
74860: LD_VAR 0 2
74864: PUSH
74865: LD_INT 1
74867: PUSH
74868: EMPTY
74869: LIST
74870: LIST
74871: LIST
74872: PUSH
74873: LD_VAR 0 1
74877: PUSH
74878: LD_INT 4
74880: MINUS
74881: PUSH
74882: LD_VAR 0 2
74886: PUSH
74887: LD_INT 4
74889: MINUS
74890: PUSH
74891: LD_INT 2
74893: PUSH
74894: EMPTY
74895: LIST
74896: LIST
74897: LIST
74898: PUSH
74899: EMPTY
74900: LIST
74901: LIST
74902: LIST
74903: LIST
74904: LIST
74905: ST_TO_ADDR
// end ; 3 :
74906: GO 75328
74908: LD_INT 3
74910: DOUBLE
74911: EQUAL
74912: IFTRUE 74916
74914: GO 75049
74916: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74917: LD_ADDR_VAR 0 5
74921: PUSH
74922: LD_VAR 0 1
74926: PUSH
74927: LD_INT 3
74929: PLUS
74930: PUSH
74931: LD_VAR 0 2
74935: PUSH
74936: LD_INT 4
74938: PUSH
74939: EMPTY
74940: LIST
74941: LIST
74942: LIST
74943: PUSH
74944: LD_VAR 0 1
74948: PUSH
74949: LD_INT 4
74951: PLUS
74952: PUSH
74953: LD_VAR 0 2
74957: PUSH
74958: LD_INT 4
74960: PLUS
74961: PUSH
74962: LD_INT 5
74964: PUSH
74965: EMPTY
74966: LIST
74967: LIST
74968: LIST
74969: PUSH
74970: LD_VAR 0 1
74974: PUSH
74975: LD_INT 4
74977: MINUS
74978: PUSH
74979: LD_VAR 0 2
74983: PUSH
74984: LD_INT 1
74986: PUSH
74987: EMPTY
74988: LIST
74989: LIST
74990: LIST
74991: PUSH
74992: LD_VAR 0 1
74996: PUSH
74997: LD_VAR 0 2
75001: PUSH
75002: LD_INT 4
75004: MINUS
75005: PUSH
75006: LD_INT 3
75008: PUSH
75009: EMPTY
75010: LIST
75011: LIST
75012: LIST
75013: PUSH
75014: LD_VAR 0 1
75018: PUSH
75019: LD_INT 3
75021: MINUS
75022: PUSH
75023: LD_VAR 0 2
75027: PUSH
75028: LD_INT 3
75030: MINUS
75031: PUSH
75032: LD_INT 2
75034: PUSH
75035: EMPTY
75036: LIST
75037: LIST
75038: LIST
75039: PUSH
75040: EMPTY
75041: LIST
75042: LIST
75043: LIST
75044: LIST
75045: LIST
75046: ST_TO_ADDR
// end ; 4 :
75047: GO 75328
75049: LD_INT 4
75051: DOUBLE
75052: EQUAL
75053: IFTRUE 75057
75055: GO 75190
75057: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75058: LD_ADDR_VAR 0 5
75062: PUSH
75063: LD_VAR 0 1
75067: PUSH
75068: LD_VAR 0 2
75072: PUSH
75073: LD_INT 4
75075: PLUS
75076: PUSH
75077: LD_INT 0
75079: PUSH
75080: EMPTY
75081: LIST
75082: LIST
75083: LIST
75084: PUSH
75085: LD_VAR 0 1
75089: PUSH
75090: LD_INT 3
75092: PLUS
75093: PUSH
75094: LD_VAR 0 2
75098: PUSH
75099: LD_INT 3
75101: PLUS
75102: PUSH
75103: LD_INT 5
75105: PUSH
75106: EMPTY
75107: LIST
75108: LIST
75109: LIST
75110: PUSH
75111: LD_VAR 0 1
75115: PUSH
75116: LD_INT 4
75118: PLUS
75119: PUSH
75120: LD_VAR 0 2
75124: PUSH
75125: LD_INT 4
75127: PUSH
75128: EMPTY
75129: LIST
75130: LIST
75131: LIST
75132: PUSH
75133: LD_VAR 0 1
75137: PUSH
75138: LD_VAR 0 2
75142: PUSH
75143: LD_INT 3
75145: MINUS
75146: PUSH
75147: LD_INT 3
75149: PUSH
75150: EMPTY
75151: LIST
75152: LIST
75153: LIST
75154: PUSH
75155: LD_VAR 0 1
75159: PUSH
75160: LD_INT 4
75162: MINUS
75163: PUSH
75164: LD_VAR 0 2
75168: PUSH
75169: LD_INT 4
75171: MINUS
75172: PUSH
75173: LD_INT 2
75175: PUSH
75176: EMPTY
75177: LIST
75178: LIST
75179: LIST
75180: PUSH
75181: EMPTY
75182: LIST
75183: LIST
75184: LIST
75185: LIST
75186: LIST
75187: ST_TO_ADDR
// end ; 5 :
75188: GO 75328
75190: LD_INT 5
75192: DOUBLE
75193: EQUAL
75194: IFTRUE 75198
75196: GO 75327
75198: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75199: LD_ADDR_VAR 0 5
75203: PUSH
75204: LD_VAR 0 1
75208: PUSH
75209: LD_INT 4
75211: MINUS
75212: PUSH
75213: LD_VAR 0 2
75217: PUSH
75218: LD_INT 1
75220: PUSH
75221: EMPTY
75222: LIST
75223: LIST
75224: LIST
75225: PUSH
75226: LD_VAR 0 1
75230: PUSH
75231: LD_VAR 0 2
75235: PUSH
75236: LD_INT 4
75238: MINUS
75239: PUSH
75240: LD_INT 3
75242: PUSH
75243: EMPTY
75244: LIST
75245: LIST
75246: LIST
75247: PUSH
75248: LD_VAR 0 1
75252: PUSH
75253: LD_INT 4
75255: PLUS
75256: PUSH
75257: LD_VAR 0 2
75261: PUSH
75262: LD_INT 4
75264: PLUS
75265: PUSH
75266: LD_INT 5
75268: PUSH
75269: EMPTY
75270: LIST
75271: LIST
75272: LIST
75273: PUSH
75274: LD_VAR 0 1
75278: PUSH
75279: LD_INT 3
75281: PLUS
75282: PUSH
75283: LD_VAR 0 2
75287: PUSH
75288: LD_INT 4
75290: PUSH
75291: EMPTY
75292: LIST
75293: LIST
75294: LIST
75295: PUSH
75296: LD_VAR 0 1
75300: PUSH
75301: LD_VAR 0 2
75305: PUSH
75306: LD_INT 3
75308: PLUS
75309: PUSH
75310: LD_INT 0
75312: PUSH
75313: EMPTY
75314: LIST
75315: LIST
75316: LIST
75317: PUSH
75318: EMPTY
75319: LIST
75320: LIST
75321: LIST
75322: LIST
75323: LIST
75324: ST_TO_ADDR
// end ; end ;
75325: GO 75328
75327: POP
// result := list ;
75328: LD_ADDR_VAR 0 4
75332: PUSH
75333: LD_VAR 0 5
75337: ST_TO_ADDR
// end ;
75338: LD_VAR 0 4
75342: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75343: LD_INT 0
75345: PPUSH
75346: PPUSH
75347: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75348: LD_VAR 0 1
75352: NOT
75353: PUSH
75354: LD_VAR 0 2
75358: PUSH
75359: LD_INT 1
75361: PUSH
75362: LD_INT 2
75364: PUSH
75365: LD_INT 3
75367: PUSH
75368: LD_INT 4
75370: PUSH
75371: EMPTY
75372: LIST
75373: LIST
75374: LIST
75375: LIST
75376: IN
75377: NOT
75378: OR
75379: IFFALSE 75383
// exit ;
75381: GO 75475
// tmp := [ ] ;
75383: LD_ADDR_VAR 0 5
75387: PUSH
75388: EMPTY
75389: ST_TO_ADDR
// for i in units do
75390: LD_ADDR_VAR 0 4
75394: PUSH
75395: LD_VAR 0 1
75399: PUSH
75400: FOR_IN
75401: IFFALSE 75444
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
75403: LD_ADDR_VAR 0 5
75407: PUSH
75408: LD_VAR 0 5
75412: PPUSH
75413: LD_VAR 0 5
75417: PUSH
75418: LD_INT 1
75420: PLUS
75421: PPUSH
75422: LD_VAR 0 4
75426: PPUSH
75427: LD_VAR 0 2
75431: PPUSH
75432: CALL_OW 259
75436: PPUSH
75437: CALL_OW 2
75441: ST_TO_ADDR
75442: GO 75400
75444: POP
75445: POP
// if not tmp then
75446: LD_VAR 0 5
75450: NOT
75451: IFFALSE 75455
// exit ;
75453: GO 75475
// result := SortListByListDesc ( units , tmp ) ;
75455: LD_ADDR_VAR 0 3
75459: PUSH
75460: LD_VAR 0 1
75464: PPUSH
75465: LD_VAR 0 5
75469: PPUSH
75470: CALL_OW 77
75474: ST_TO_ADDR
// end ;
75475: LD_VAR 0 3
75479: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75480: LD_INT 0
75482: PPUSH
75483: PPUSH
75484: PPUSH
// result := false ;
75485: LD_ADDR_VAR 0 3
75489: PUSH
75490: LD_INT 0
75492: ST_TO_ADDR
// x := GetX ( building ) ;
75493: LD_ADDR_VAR 0 4
75497: PUSH
75498: LD_VAR 0 2
75502: PPUSH
75503: CALL_OW 250
75507: ST_TO_ADDR
// y := GetY ( building ) ;
75508: LD_ADDR_VAR 0 5
75512: PUSH
75513: LD_VAR 0 2
75517: PPUSH
75518: CALL_OW 251
75522: ST_TO_ADDR
// if not building or not x or not y then
75523: LD_VAR 0 2
75527: NOT
75528: PUSH
75529: LD_VAR 0 4
75533: NOT
75534: OR
75535: PUSH
75536: LD_VAR 0 5
75540: NOT
75541: OR
75542: IFFALSE 75546
// exit ;
75544: GO 75638
// if GetTaskList ( unit ) then
75546: LD_VAR 0 1
75550: PPUSH
75551: CALL_OW 437
75555: IFFALSE 75638
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75557: LD_STRING e
75559: PUSH
75560: LD_VAR 0 1
75564: PPUSH
75565: CALL_OW 437
75569: PUSH
75570: LD_INT 1
75572: ARRAY
75573: PUSH
75574: LD_INT 1
75576: ARRAY
75577: EQUAL
75578: PUSH
75579: LD_VAR 0 4
75583: PUSH
75584: LD_VAR 0 1
75588: PPUSH
75589: CALL_OW 437
75593: PUSH
75594: LD_INT 1
75596: ARRAY
75597: PUSH
75598: LD_INT 2
75600: ARRAY
75601: EQUAL
75602: AND
75603: PUSH
75604: LD_VAR 0 5
75608: PUSH
75609: LD_VAR 0 1
75613: PPUSH
75614: CALL_OW 437
75618: PUSH
75619: LD_INT 1
75621: ARRAY
75622: PUSH
75623: LD_INT 3
75625: ARRAY
75626: EQUAL
75627: AND
75628: IFFALSE 75638
// result := true end ;
75630: LD_ADDR_VAR 0 3
75634: PUSH
75635: LD_INT 1
75637: ST_TO_ADDR
// end ;
75638: LD_VAR 0 3
75642: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75643: LD_INT 0
75645: PPUSH
// result := false ;
75646: LD_ADDR_VAR 0 4
75650: PUSH
75651: LD_INT 0
75653: ST_TO_ADDR
// if GetTaskList ( unit ) then
75654: LD_VAR 0 1
75658: PPUSH
75659: CALL_OW 437
75663: IFFALSE 75746
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75665: LD_STRING M
75667: PUSH
75668: LD_VAR 0 1
75672: PPUSH
75673: CALL_OW 437
75677: PUSH
75678: LD_INT 1
75680: ARRAY
75681: PUSH
75682: LD_INT 1
75684: ARRAY
75685: EQUAL
75686: PUSH
75687: LD_VAR 0 2
75691: PUSH
75692: LD_VAR 0 1
75696: PPUSH
75697: CALL_OW 437
75701: PUSH
75702: LD_INT 1
75704: ARRAY
75705: PUSH
75706: LD_INT 2
75708: ARRAY
75709: EQUAL
75710: AND
75711: PUSH
75712: LD_VAR 0 3
75716: PUSH
75717: LD_VAR 0 1
75721: PPUSH
75722: CALL_OW 437
75726: PUSH
75727: LD_INT 1
75729: ARRAY
75730: PUSH
75731: LD_INT 3
75733: ARRAY
75734: EQUAL
75735: AND
75736: IFFALSE 75746
// result := true ;
75738: LD_ADDR_VAR 0 4
75742: PUSH
75743: LD_INT 1
75745: ST_TO_ADDR
// end ; end ;
75746: LD_VAR 0 4
75750: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75751: LD_INT 0
75753: PPUSH
75754: PPUSH
75755: PPUSH
75756: PPUSH
// if not unit or not area then
75757: LD_VAR 0 1
75761: NOT
75762: PUSH
75763: LD_VAR 0 2
75767: NOT
75768: OR
75769: IFFALSE 75773
// exit ;
75771: GO 75937
// tmp := AreaToList ( area , i ) ;
75773: LD_ADDR_VAR 0 6
75777: PUSH
75778: LD_VAR 0 2
75782: PPUSH
75783: LD_VAR 0 5
75787: PPUSH
75788: CALL_OW 517
75792: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75793: LD_ADDR_VAR 0 5
75797: PUSH
75798: DOUBLE
75799: LD_INT 1
75801: DEC
75802: ST_TO_ADDR
75803: LD_VAR 0 6
75807: PUSH
75808: LD_INT 1
75810: ARRAY
75811: PUSH
75812: FOR_TO
75813: IFFALSE 75935
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75815: LD_ADDR_VAR 0 7
75819: PUSH
75820: LD_VAR 0 6
75824: PUSH
75825: LD_INT 1
75827: ARRAY
75828: PUSH
75829: LD_VAR 0 5
75833: ARRAY
75834: PUSH
75835: LD_VAR 0 6
75839: PUSH
75840: LD_INT 2
75842: ARRAY
75843: PUSH
75844: LD_VAR 0 5
75848: ARRAY
75849: PUSH
75850: EMPTY
75851: LIST
75852: LIST
75853: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75854: LD_VAR 0 7
75858: PUSH
75859: LD_INT 1
75861: ARRAY
75862: PPUSH
75863: LD_VAR 0 7
75867: PUSH
75868: LD_INT 2
75870: ARRAY
75871: PPUSH
75872: CALL_OW 428
75876: PUSH
75877: LD_INT 0
75879: EQUAL
75880: IFFALSE 75933
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75882: LD_VAR 0 1
75886: PPUSH
75887: LD_VAR 0 7
75891: PUSH
75892: LD_INT 1
75894: ARRAY
75895: PPUSH
75896: LD_VAR 0 7
75900: PUSH
75901: LD_INT 2
75903: ARRAY
75904: PPUSH
75905: LD_VAR 0 3
75909: PPUSH
75910: CALL_OW 48
// result := IsPlaced ( unit ) ;
75914: LD_ADDR_VAR 0 4
75918: PUSH
75919: LD_VAR 0 1
75923: PPUSH
75924: CALL_OW 305
75928: ST_TO_ADDR
// exit ;
75929: POP
75930: POP
75931: GO 75937
// end ; end ;
75933: GO 75812
75935: POP
75936: POP
// end ;
75937: LD_VAR 0 4
75941: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75942: LD_INT 0
75944: PPUSH
75945: PPUSH
75946: PPUSH
// if not side or side > 8 then
75947: LD_VAR 0 1
75951: NOT
75952: PUSH
75953: LD_VAR 0 1
75957: PUSH
75958: LD_INT 8
75960: GREATER
75961: OR
75962: IFFALSE 75966
// exit ;
75964: GO 76153
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75966: LD_ADDR_VAR 0 4
75970: PUSH
75971: LD_INT 22
75973: PUSH
75974: LD_VAR 0 1
75978: PUSH
75979: EMPTY
75980: LIST
75981: LIST
75982: PUSH
75983: LD_INT 21
75985: PUSH
75986: LD_INT 3
75988: PUSH
75989: EMPTY
75990: LIST
75991: LIST
75992: PUSH
75993: EMPTY
75994: LIST
75995: LIST
75996: PPUSH
75997: CALL_OW 69
76001: ST_TO_ADDR
// if not tmp then
76002: LD_VAR 0 4
76006: NOT
76007: IFFALSE 76011
// exit ;
76009: GO 76153
// enable_addtolog := true ;
76011: LD_ADDR_OWVAR 81
76015: PUSH
76016: LD_INT 1
76018: ST_TO_ADDR
// AddToLog ( [ ) ;
76019: LD_STRING [
76021: PPUSH
76022: CALL_OW 561
// for i in tmp do
76026: LD_ADDR_VAR 0 3
76030: PUSH
76031: LD_VAR 0 4
76035: PUSH
76036: FOR_IN
76037: IFFALSE 76144
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76039: LD_STRING [
76041: PUSH
76042: LD_VAR 0 3
76046: PPUSH
76047: CALL_OW 266
76051: STR
76052: PUSH
76053: LD_STRING , 
76055: STR
76056: PUSH
76057: LD_VAR 0 3
76061: PPUSH
76062: CALL_OW 250
76066: STR
76067: PUSH
76068: LD_STRING , 
76070: STR
76071: PUSH
76072: LD_VAR 0 3
76076: PPUSH
76077: CALL_OW 251
76081: STR
76082: PUSH
76083: LD_STRING , 
76085: STR
76086: PUSH
76087: LD_VAR 0 3
76091: PPUSH
76092: CALL_OW 254
76096: STR
76097: PUSH
76098: LD_STRING , 
76100: STR
76101: PUSH
76102: LD_VAR 0 3
76106: PPUSH
76107: LD_INT 1
76109: PPUSH
76110: CALL_OW 268
76114: STR
76115: PUSH
76116: LD_STRING , 
76118: STR
76119: PUSH
76120: LD_VAR 0 3
76124: PPUSH
76125: LD_INT 2
76127: PPUSH
76128: CALL_OW 268
76132: STR
76133: PUSH
76134: LD_STRING ],
76136: STR
76137: PPUSH
76138: CALL_OW 561
// end ;
76142: GO 76036
76144: POP
76145: POP
// AddToLog ( ]; ) ;
76146: LD_STRING ];
76148: PPUSH
76149: CALL_OW 561
// end ;
76153: LD_VAR 0 2
76157: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76158: LD_INT 0
76160: PPUSH
76161: PPUSH
76162: PPUSH
76163: PPUSH
76164: PPUSH
// if not area or not rate or not max then
76165: LD_VAR 0 1
76169: NOT
76170: PUSH
76171: LD_VAR 0 2
76175: NOT
76176: OR
76177: PUSH
76178: LD_VAR 0 4
76182: NOT
76183: OR
76184: IFFALSE 76188
// exit ;
76186: GO 76380
// while 1 do
76188: LD_INT 1
76190: IFFALSE 76380
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76192: LD_ADDR_VAR 0 9
76196: PUSH
76197: LD_VAR 0 1
76201: PPUSH
76202: LD_INT 1
76204: PPUSH
76205: CALL_OW 287
76209: PUSH
76210: LD_INT 10
76212: MUL
76213: ST_TO_ADDR
// r := rate / 10 ;
76214: LD_ADDR_VAR 0 7
76218: PUSH
76219: LD_VAR 0 2
76223: PUSH
76224: LD_INT 10
76226: DIVREAL
76227: ST_TO_ADDR
// time := 1 1$00 ;
76228: LD_ADDR_VAR 0 8
76232: PUSH
76233: LD_INT 2100
76235: ST_TO_ADDR
// if amount < min then
76236: LD_VAR 0 9
76240: PUSH
76241: LD_VAR 0 3
76245: LESS
76246: IFFALSE 76264
// r := r * 2 else
76248: LD_ADDR_VAR 0 7
76252: PUSH
76253: LD_VAR 0 7
76257: PUSH
76258: LD_INT 2
76260: MUL
76261: ST_TO_ADDR
76262: GO 76290
// if amount > max then
76264: LD_VAR 0 9
76268: PUSH
76269: LD_VAR 0 4
76273: GREATER
76274: IFFALSE 76290
// r := r / 2 ;
76276: LD_ADDR_VAR 0 7
76280: PUSH
76281: LD_VAR 0 7
76285: PUSH
76286: LD_INT 2
76288: DIVREAL
76289: ST_TO_ADDR
// time := time / r ;
76290: LD_ADDR_VAR 0 8
76294: PUSH
76295: LD_VAR 0 8
76299: PUSH
76300: LD_VAR 0 7
76304: DIVREAL
76305: ST_TO_ADDR
// if time < 0 then
76306: LD_VAR 0 8
76310: PUSH
76311: LD_INT 0
76313: LESS
76314: IFFALSE 76331
// time := time * - 1 ;
76316: LD_ADDR_VAR 0 8
76320: PUSH
76321: LD_VAR 0 8
76325: PUSH
76326: LD_INT 1
76328: NEG
76329: MUL
76330: ST_TO_ADDR
// wait ( time ) ;
76331: LD_VAR 0 8
76335: PPUSH
76336: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
76340: LD_INT 35
76342: PPUSH
76343: LD_INT 875
76345: PPUSH
76346: CALL_OW 12
76350: PPUSH
76351: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76355: LD_INT 1
76357: PPUSH
76358: LD_INT 5
76360: PPUSH
76361: CALL_OW 12
76365: PPUSH
76366: LD_VAR 0 1
76370: PPUSH
76371: LD_INT 1
76373: PPUSH
76374: CALL_OW 55
// end ;
76378: GO 76188
// end ;
76380: LD_VAR 0 5
76384: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76385: LD_INT 0
76387: PPUSH
76388: PPUSH
76389: PPUSH
76390: PPUSH
76391: PPUSH
76392: PPUSH
76393: PPUSH
76394: PPUSH
// if not turrets or not factories then
76395: LD_VAR 0 1
76399: NOT
76400: PUSH
76401: LD_VAR 0 2
76405: NOT
76406: OR
76407: IFFALSE 76411
// exit ;
76409: GO 76718
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76411: LD_ADDR_VAR 0 10
76415: PUSH
76416: LD_INT 5
76418: PUSH
76419: LD_INT 6
76421: PUSH
76422: EMPTY
76423: LIST
76424: LIST
76425: PUSH
76426: LD_INT 2
76428: PUSH
76429: LD_INT 4
76431: PUSH
76432: EMPTY
76433: LIST
76434: LIST
76435: PUSH
76436: LD_INT 3
76438: PUSH
76439: LD_INT 5
76441: PUSH
76442: EMPTY
76443: LIST
76444: LIST
76445: PUSH
76446: EMPTY
76447: LIST
76448: LIST
76449: LIST
76450: PUSH
76451: LD_INT 24
76453: PUSH
76454: LD_INT 25
76456: PUSH
76457: EMPTY
76458: LIST
76459: LIST
76460: PUSH
76461: LD_INT 23
76463: PUSH
76464: LD_INT 27
76466: PUSH
76467: EMPTY
76468: LIST
76469: LIST
76470: PUSH
76471: EMPTY
76472: LIST
76473: LIST
76474: PUSH
76475: LD_INT 42
76477: PUSH
76478: LD_INT 43
76480: PUSH
76481: EMPTY
76482: LIST
76483: LIST
76484: PUSH
76485: LD_INT 44
76487: PUSH
76488: LD_INT 46
76490: PUSH
76491: EMPTY
76492: LIST
76493: LIST
76494: PUSH
76495: LD_INT 45
76497: PUSH
76498: LD_INT 47
76500: PUSH
76501: EMPTY
76502: LIST
76503: LIST
76504: PUSH
76505: EMPTY
76506: LIST
76507: LIST
76508: LIST
76509: PUSH
76510: EMPTY
76511: LIST
76512: LIST
76513: LIST
76514: ST_TO_ADDR
// result := [ ] ;
76515: LD_ADDR_VAR 0 3
76519: PUSH
76520: EMPTY
76521: ST_TO_ADDR
// for i in turrets do
76522: LD_ADDR_VAR 0 4
76526: PUSH
76527: LD_VAR 0 1
76531: PUSH
76532: FOR_IN
76533: IFFALSE 76716
// begin nat := GetNation ( i ) ;
76535: LD_ADDR_VAR 0 7
76539: PUSH
76540: LD_VAR 0 4
76544: PPUSH
76545: CALL_OW 248
76549: ST_TO_ADDR
// weapon := 0 ;
76550: LD_ADDR_VAR 0 8
76554: PUSH
76555: LD_INT 0
76557: ST_TO_ADDR
// if not nat then
76558: LD_VAR 0 7
76562: NOT
76563: IFFALSE 76567
// continue ;
76565: GO 76532
// for j in list [ nat ] do
76567: LD_ADDR_VAR 0 5
76571: PUSH
76572: LD_VAR 0 10
76576: PUSH
76577: LD_VAR 0 7
76581: ARRAY
76582: PUSH
76583: FOR_IN
76584: IFFALSE 76625
// if GetBWeapon ( i ) = j [ 1 ] then
76586: LD_VAR 0 4
76590: PPUSH
76591: CALL_OW 269
76595: PUSH
76596: LD_VAR 0 5
76600: PUSH
76601: LD_INT 1
76603: ARRAY
76604: EQUAL
76605: IFFALSE 76623
// begin weapon := j [ 2 ] ;
76607: LD_ADDR_VAR 0 8
76611: PUSH
76612: LD_VAR 0 5
76616: PUSH
76617: LD_INT 2
76619: ARRAY
76620: ST_TO_ADDR
// break ;
76621: GO 76625
// end ;
76623: GO 76583
76625: POP
76626: POP
// if not weapon then
76627: LD_VAR 0 8
76631: NOT
76632: IFFALSE 76636
// continue ;
76634: GO 76532
// for k in factories do
76636: LD_ADDR_VAR 0 6
76640: PUSH
76641: LD_VAR 0 2
76645: PUSH
76646: FOR_IN
76647: IFFALSE 76712
// begin weapons := AvailableWeaponList ( k ) ;
76649: LD_ADDR_VAR 0 9
76653: PUSH
76654: LD_VAR 0 6
76658: PPUSH
76659: CALL_OW 478
76663: ST_TO_ADDR
// if not weapons then
76664: LD_VAR 0 9
76668: NOT
76669: IFFALSE 76673
// continue ;
76671: GO 76646
// if weapon in weapons then
76673: LD_VAR 0 8
76677: PUSH
76678: LD_VAR 0 9
76682: IN
76683: IFFALSE 76710
// begin result := [ i , weapon ] ;
76685: LD_ADDR_VAR 0 3
76689: PUSH
76690: LD_VAR 0 4
76694: PUSH
76695: LD_VAR 0 8
76699: PUSH
76700: EMPTY
76701: LIST
76702: LIST
76703: ST_TO_ADDR
// exit ;
76704: POP
76705: POP
76706: POP
76707: POP
76708: GO 76718
// end ; end ;
76710: GO 76646
76712: POP
76713: POP
// end ;
76714: GO 76532
76716: POP
76717: POP
// end ;
76718: LD_VAR 0 3
76722: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76723: LD_INT 0
76725: PPUSH
// if not side or side > 8 then
76726: LD_VAR 0 3
76730: NOT
76731: PUSH
76732: LD_VAR 0 3
76736: PUSH
76737: LD_INT 8
76739: GREATER
76740: OR
76741: IFFALSE 76745
// exit ;
76743: GO 76804
// if not range then
76745: LD_VAR 0 4
76749: NOT
76750: IFFALSE 76761
// range := - 12 ;
76752: LD_ADDR_VAR 0 4
76756: PUSH
76757: LD_INT 12
76759: NEG
76760: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76761: LD_VAR 0 1
76765: PPUSH
76766: LD_VAR 0 2
76770: PPUSH
76771: LD_VAR 0 3
76775: PPUSH
76776: LD_VAR 0 4
76780: PPUSH
76781: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76785: LD_VAR 0 1
76789: PPUSH
76790: LD_VAR 0 2
76794: PPUSH
76795: LD_VAR 0 3
76799: PPUSH
76800: CALL_OW 331
// end ;
76804: LD_VAR 0 5
76808: RET
// export function Video ( mode ) ; begin
76809: LD_INT 0
76811: PPUSH
// ingame_video = mode ;
76812: LD_ADDR_OWVAR 52
76816: PUSH
76817: LD_VAR 0 1
76821: ST_TO_ADDR
// interface_hidden = mode ;
76822: LD_ADDR_OWVAR 54
76826: PUSH
76827: LD_VAR 0 1
76831: ST_TO_ADDR
// end ;
76832: LD_VAR 0 2
76836: RET
// export function Join ( array , element ) ; begin
76837: LD_INT 0
76839: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76840: LD_ADDR_VAR 0 3
76844: PUSH
76845: LD_VAR 0 1
76849: PPUSH
76850: LD_VAR 0 1
76854: PUSH
76855: LD_INT 1
76857: PLUS
76858: PPUSH
76859: LD_VAR 0 2
76863: PPUSH
76864: CALL_OW 1
76868: ST_TO_ADDR
// end ;
76869: LD_VAR 0 3
76873: RET
// export function JoinUnion ( array , element ) ; begin
76874: LD_INT 0
76876: PPUSH
// result := array union element ;
76877: LD_ADDR_VAR 0 3
76881: PUSH
76882: LD_VAR 0 1
76886: PUSH
76887: LD_VAR 0 2
76891: UNION
76892: ST_TO_ADDR
// end ;
76893: LD_VAR 0 3
76897: RET
// export function GetBehemoths ( side ) ; begin
76898: LD_INT 0
76900: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
76901: LD_ADDR_VAR 0 2
76905: PUSH
76906: LD_INT 22
76908: PUSH
76909: LD_VAR 0 1
76913: PUSH
76914: EMPTY
76915: LIST
76916: LIST
76917: PUSH
76918: LD_INT 31
76920: PUSH
76921: LD_INT 25
76923: PUSH
76924: EMPTY
76925: LIST
76926: LIST
76927: PUSH
76928: EMPTY
76929: LIST
76930: LIST
76931: PPUSH
76932: CALL_OW 69
76936: ST_TO_ADDR
// end ;
76937: LD_VAR 0 2
76941: RET
// export function Shuffle ( array ) ; var i , index ; begin
76942: LD_INT 0
76944: PPUSH
76945: PPUSH
76946: PPUSH
// result := [ ] ;
76947: LD_ADDR_VAR 0 2
76951: PUSH
76952: EMPTY
76953: ST_TO_ADDR
// if not array then
76954: LD_VAR 0 1
76958: NOT
76959: IFFALSE 76963
// exit ;
76961: GO 77062
// Randomize ;
76963: CALL_OW 10
// for i = array downto 1 do
76967: LD_ADDR_VAR 0 3
76971: PUSH
76972: DOUBLE
76973: LD_VAR 0 1
76977: INC
76978: ST_TO_ADDR
76979: LD_INT 1
76981: PUSH
76982: FOR_DOWNTO
76983: IFFALSE 77060
// begin index := rand ( 1 , array ) ;
76985: LD_ADDR_VAR 0 4
76989: PUSH
76990: LD_INT 1
76992: PPUSH
76993: LD_VAR 0 1
76997: PPUSH
76998: CALL_OW 12
77002: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77003: LD_ADDR_VAR 0 2
77007: PUSH
77008: LD_VAR 0 2
77012: PPUSH
77013: LD_VAR 0 2
77017: PUSH
77018: LD_INT 1
77020: PLUS
77021: PPUSH
77022: LD_VAR 0 1
77026: PUSH
77027: LD_VAR 0 4
77031: ARRAY
77032: PPUSH
77033: CALL_OW 2
77037: ST_TO_ADDR
// array := Delete ( array , index ) ;
77038: LD_ADDR_VAR 0 1
77042: PUSH
77043: LD_VAR 0 1
77047: PPUSH
77048: LD_VAR 0 4
77052: PPUSH
77053: CALL_OW 3
77057: ST_TO_ADDR
// end ;
77058: GO 76982
77060: POP
77061: POP
// end ;
77062: LD_VAR 0 2
77066: RET
// export function GetBaseMaterials ( base ) ; begin
77067: LD_INT 0
77069: PPUSH
// result := [ 0 , 0 , 0 ] ;
77070: LD_ADDR_VAR 0 2
77074: PUSH
77075: LD_INT 0
77077: PUSH
77078: LD_INT 0
77080: PUSH
77081: LD_INT 0
77083: PUSH
77084: EMPTY
77085: LIST
77086: LIST
77087: LIST
77088: ST_TO_ADDR
// if not base then
77089: LD_VAR 0 1
77093: NOT
77094: IFFALSE 77098
// exit ;
77096: GO 77147
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77098: LD_ADDR_VAR 0 2
77102: PUSH
77103: LD_VAR 0 1
77107: PPUSH
77108: LD_INT 1
77110: PPUSH
77111: CALL_OW 275
77115: PUSH
77116: LD_VAR 0 1
77120: PPUSH
77121: LD_INT 2
77123: PPUSH
77124: CALL_OW 275
77128: PUSH
77129: LD_VAR 0 1
77133: PPUSH
77134: LD_INT 3
77136: PPUSH
77137: CALL_OW 275
77141: PUSH
77142: EMPTY
77143: LIST
77144: LIST
77145: LIST
77146: ST_TO_ADDR
// end ;
77147: LD_VAR 0 2
77151: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77152: LD_INT 0
77154: PPUSH
77155: PPUSH
// result := array ;
77156: LD_ADDR_VAR 0 3
77160: PUSH
77161: LD_VAR 0 1
77165: ST_TO_ADDR
// if size > 0 then
77166: LD_VAR 0 2
77170: PUSH
77171: LD_INT 0
77173: GREATER
77174: IFFALSE 77220
// for i := array downto size do
77176: LD_ADDR_VAR 0 4
77180: PUSH
77181: DOUBLE
77182: LD_VAR 0 1
77186: INC
77187: ST_TO_ADDR
77188: LD_VAR 0 2
77192: PUSH
77193: FOR_DOWNTO
77194: IFFALSE 77218
// result := Delete ( result , result ) ;
77196: LD_ADDR_VAR 0 3
77200: PUSH
77201: LD_VAR 0 3
77205: PPUSH
77206: LD_VAR 0 3
77210: PPUSH
77211: CALL_OW 3
77215: ST_TO_ADDR
77216: GO 77193
77218: POP
77219: POP
// end ;
77220: LD_VAR 0 3
77224: RET
// export function ComExit ( unit ) ; var tmp ; begin
77225: LD_INT 0
77227: PPUSH
77228: PPUSH
// if not IsInUnit ( unit ) then
77229: LD_VAR 0 1
77233: PPUSH
77234: CALL_OW 310
77238: NOT
77239: IFFALSE 77243
// exit ;
77241: GO 77303
// tmp := IsInUnit ( unit ) ;
77243: LD_ADDR_VAR 0 3
77247: PUSH
77248: LD_VAR 0 1
77252: PPUSH
77253: CALL_OW 310
77257: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77258: LD_VAR 0 3
77262: PPUSH
77263: CALL_OW 247
77267: PUSH
77268: LD_INT 2
77270: EQUAL
77271: IFFALSE 77284
// ComExitVehicle ( unit ) else
77273: LD_VAR 0 1
77277: PPUSH
77278: CALL_OW 121
77282: GO 77293
// ComExitBuilding ( unit ) ;
77284: LD_VAR 0 1
77288: PPUSH
77289: CALL_OW 122
// result := tmp ;
77293: LD_ADDR_VAR 0 2
77297: PUSH
77298: LD_VAR 0 3
77302: ST_TO_ADDR
// end ;
77303: LD_VAR 0 2
77307: RET
// export function ResetHc ; begin
77308: LD_INT 0
77310: PPUSH
// InitHc ;
77311: CALL_OW 19
// hc_importance := 0 ;
77315: LD_ADDR_OWVAR 32
77319: PUSH
77320: LD_INT 0
77322: ST_TO_ADDR
// end ;
77323: LD_VAR 0 1
77327: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77328: LD_INT 0
77330: PPUSH
77331: PPUSH
77332: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77333: LD_ADDR_VAR 0 6
77337: PUSH
77338: LD_VAR 0 1
77342: PUSH
77343: LD_VAR 0 3
77347: PLUS
77348: PUSH
77349: LD_INT 2
77351: DIV
77352: ST_TO_ADDR
// if _x < 0 then
77353: LD_VAR 0 6
77357: PUSH
77358: LD_INT 0
77360: LESS
77361: IFFALSE 77378
// _x := _x * - 1 ;
77363: LD_ADDR_VAR 0 6
77367: PUSH
77368: LD_VAR 0 6
77372: PUSH
77373: LD_INT 1
77375: NEG
77376: MUL
77377: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77378: LD_ADDR_VAR 0 7
77382: PUSH
77383: LD_VAR 0 2
77387: PUSH
77388: LD_VAR 0 4
77392: PLUS
77393: PUSH
77394: LD_INT 2
77396: DIV
77397: ST_TO_ADDR
// if _y < 0 then
77398: LD_VAR 0 7
77402: PUSH
77403: LD_INT 0
77405: LESS
77406: IFFALSE 77423
// _y := _y * - 1 ;
77408: LD_ADDR_VAR 0 7
77412: PUSH
77413: LD_VAR 0 7
77417: PUSH
77418: LD_INT 1
77420: NEG
77421: MUL
77422: ST_TO_ADDR
// result := [ _x , _y ] ;
77423: LD_ADDR_VAR 0 5
77427: PUSH
77428: LD_VAR 0 6
77432: PUSH
77433: LD_VAR 0 7
77437: PUSH
77438: EMPTY
77439: LIST
77440: LIST
77441: ST_TO_ADDR
// end ;
77442: LD_VAR 0 5
77446: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77447: LD_INT 0
77449: PPUSH
77450: PPUSH
77451: PPUSH
77452: PPUSH
// task := GetTaskList ( unit ) ;
77453: LD_ADDR_VAR 0 7
77457: PUSH
77458: LD_VAR 0 1
77462: PPUSH
77463: CALL_OW 437
77467: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77468: LD_VAR 0 7
77472: NOT
77473: PUSH
77474: LD_VAR 0 1
77478: PPUSH
77479: LD_VAR 0 2
77483: PPUSH
77484: CALL_OW 308
77488: NOT
77489: AND
77490: IFFALSE 77494
// exit ;
77492: GO 77612
// if IsInArea ( unit , area ) then
77494: LD_VAR 0 1
77498: PPUSH
77499: LD_VAR 0 2
77503: PPUSH
77504: CALL_OW 308
77508: IFFALSE 77526
// begin ComMoveToArea ( unit , goAway ) ;
77510: LD_VAR 0 1
77514: PPUSH
77515: LD_VAR 0 3
77519: PPUSH
77520: CALL_OW 113
// exit ;
77524: GO 77612
// end ; if task [ 1 ] [ 1 ] <> M then
77526: LD_VAR 0 7
77530: PUSH
77531: LD_INT 1
77533: ARRAY
77534: PUSH
77535: LD_INT 1
77537: ARRAY
77538: PUSH
77539: LD_STRING M
77541: NONEQUAL
77542: IFFALSE 77546
// exit ;
77544: GO 77612
// x := task [ 1 ] [ 2 ] ;
77546: LD_ADDR_VAR 0 5
77550: PUSH
77551: LD_VAR 0 7
77555: PUSH
77556: LD_INT 1
77558: ARRAY
77559: PUSH
77560: LD_INT 2
77562: ARRAY
77563: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77564: LD_ADDR_VAR 0 6
77568: PUSH
77569: LD_VAR 0 7
77573: PUSH
77574: LD_INT 1
77576: ARRAY
77577: PUSH
77578: LD_INT 3
77580: ARRAY
77581: ST_TO_ADDR
// if InArea ( x , y , area ) then
77582: LD_VAR 0 5
77586: PPUSH
77587: LD_VAR 0 6
77591: PPUSH
77592: LD_VAR 0 2
77596: PPUSH
77597: CALL_OW 309
77601: IFFALSE 77612
// ComStop ( unit ) ;
77603: LD_VAR 0 1
77607: PPUSH
77608: CALL_OW 141
// end ;
77612: LD_VAR 0 4
77616: RET
// export function Abs ( value ) ; begin
77617: LD_INT 0
77619: PPUSH
// result := value ;
77620: LD_ADDR_VAR 0 2
77624: PUSH
77625: LD_VAR 0 1
77629: ST_TO_ADDR
// if value < 0 then
77630: LD_VAR 0 1
77634: PUSH
77635: LD_INT 0
77637: LESS
77638: IFFALSE 77655
// result := value * - 1 ;
77640: LD_ADDR_VAR 0 2
77644: PUSH
77645: LD_VAR 0 1
77649: PUSH
77650: LD_INT 1
77652: NEG
77653: MUL
77654: ST_TO_ADDR
// end ;
77655: LD_VAR 0 2
77659: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77660: LD_INT 0
77662: PPUSH
77663: PPUSH
77664: PPUSH
77665: PPUSH
77666: PPUSH
77667: PPUSH
77668: PPUSH
77669: PPUSH
// if not unit or not building then
77670: LD_VAR 0 1
77674: NOT
77675: PUSH
77676: LD_VAR 0 2
77680: NOT
77681: OR
77682: IFFALSE 77686
// exit ;
77684: GO 77912
// x := GetX ( building ) ;
77686: LD_ADDR_VAR 0 4
77690: PUSH
77691: LD_VAR 0 2
77695: PPUSH
77696: CALL_OW 250
77700: ST_TO_ADDR
// y := GetY ( building ) ;
77701: LD_ADDR_VAR 0 6
77705: PUSH
77706: LD_VAR 0 2
77710: PPUSH
77711: CALL_OW 251
77715: ST_TO_ADDR
// d := GetDir ( building ) ;
77716: LD_ADDR_VAR 0 8
77720: PUSH
77721: LD_VAR 0 2
77725: PPUSH
77726: CALL_OW 254
77730: ST_TO_ADDR
// r := 4 ;
77731: LD_ADDR_VAR 0 9
77735: PUSH
77736: LD_INT 4
77738: ST_TO_ADDR
// for i := 1 to 5 do
77739: LD_ADDR_VAR 0 10
77743: PUSH
77744: DOUBLE
77745: LD_INT 1
77747: DEC
77748: ST_TO_ADDR
77749: LD_INT 5
77751: PUSH
77752: FOR_TO
77753: IFFALSE 77910
// begin _x := ShiftX ( x , d , r + i ) ;
77755: LD_ADDR_VAR 0 5
77759: PUSH
77760: LD_VAR 0 4
77764: PPUSH
77765: LD_VAR 0 8
77769: PPUSH
77770: LD_VAR 0 9
77774: PUSH
77775: LD_VAR 0 10
77779: PLUS
77780: PPUSH
77781: CALL_OW 272
77785: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77786: LD_ADDR_VAR 0 7
77790: PUSH
77791: LD_VAR 0 6
77795: PPUSH
77796: LD_VAR 0 8
77800: PPUSH
77801: LD_VAR 0 9
77805: PUSH
77806: LD_VAR 0 10
77810: PLUS
77811: PPUSH
77812: CALL_OW 273
77816: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77817: LD_VAR 0 5
77821: PPUSH
77822: LD_VAR 0 7
77826: PPUSH
77827: CALL_OW 488
77831: PUSH
77832: LD_VAR 0 5
77836: PPUSH
77837: LD_VAR 0 7
77841: PPUSH
77842: CALL_OW 428
77846: PPUSH
77847: CALL_OW 247
77851: PUSH
77852: LD_INT 3
77854: PUSH
77855: LD_INT 2
77857: PUSH
77858: EMPTY
77859: LIST
77860: LIST
77861: IN
77862: NOT
77863: AND
77864: IFFALSE 77908
// begin ComMoveXY ( unit , _x , _y ) ;
77866: LD_VAR 0 1
77870: PPUSH
77871: LD_VAR 0 5
77875: PPUSH
77876: LD_VAR 0 7
77880: PPUSH
77881: CALL_OW 111
// result := [ _x , _y ] ;
77885: LD_ADDR_VAR 0 3
77889: PUSH
77890: LD_VAR 0 5
77894: PUSH
77895: LD_VAR 0 7
77899: PUSH
77900: EMPTY
77901: LIST
77902: LIST
77903: ST_TO_ADDR
// exit ;
77904: POP
77905: POP
77906: GO 77912
// end ; end ;
77908: GO 77752
77910: POP
77911: POP
// end ;
77912: LD_VAR 0 3
77916: RET
