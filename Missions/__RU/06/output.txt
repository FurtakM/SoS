// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export vehiclesFrom05 , resourcesFrom05 , fastBreakthrough , stevensStatus , apeTechsStatus ; export techMatPredStatus ; export vehsFrom06 , resourcesFrom06 ; export dial_SibTechsBlocker , dial_VsevolodContactBlocker , dial_TrapDialogBlocker , dial_ConvoyDialogBlocker , dial_NorthBlocker , dial_EndMissionDialogBlocker ; export claimOvsyenkoBase , claimTerminalBase , lostAgainBase ; export immortalVsevolodTeam , savedVsevolod , vsevolodWaitGorky ; export canGoNorth ; export enableVsevolodCounter ; export canSpawnReinforces ; export canEndMission ; export canRemoveUnits ; export timeToAttack ; export cratesSpawned ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 308 0 0
// vehiclesFrom05 = LoadVariable ( 05_Tanks_4 , [ ] ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 05_Tanks_4
  31: PPUSH
  32: EMPTY
  33: PPUSH
  34: CALL_OW 30
  38: ST_TO_ADDR
// resourcesFrom05 = LoadVariable ( 05_ResourcesInCargo_3 , [ ] ) ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: LD_STRING 05_ResourcesInCargo_3
  46: PPUSH
  47: EMPTY
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// fastBreakthrough = LoadVariable ( 05_FastBreakthrough_6 , false ) ;
  54: LD_ADDR_EXP 3
  58: PUSH
  59: LD_STRING 05_FastBreakthrough_6
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// stevensStatus = LoadVariable ( 05_StevensStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 4
  74: PUSH
  75: LD_STRING 05_StevensStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// apeTechsStatus = LoadVariable ( 05_ApeTechsStatus_7 , [ 0 , 0 , 0 ] ) ;
  86: LD_ADDR_EXP 5
  90: PUSH
  91: LD_STRING 05_ApeTechsStatus_7
  93: PPUSH
  94: LD_INT 0
  96: PUSH
  97: LD_INT 0
  99: PUSH
 100: LD_INT 0
 102: PUSH
 103: EMPTY
 104: LIST
 105: LIST
 106: LIST
 107: PPUSH
 108: CALL_OW 30
 112: ST_TO_ADDR
// techMatPredStatus = state_enabled ;
 113: LD_ADDR_EXP 6
 117: PUSH
 118: LD_INT 1
 120: ST_TO_ADDR
// vehsFrom06 = [ ] ;
 121: LD_ADDR_EXP 7
 125: PUSH
 126: EMPTY
 127: ST_TO_ADDR
// resourcesFrom06 = [ ] ;
 128: LD_ADDR_EXP 8
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// dial_SibTechsBlocker = false ;
 135: LD_ADDR_EXP 9
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// dial_VsevolodContactBlocker = false ;
 143: LD_ADDR_EXP 10
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// dial_TrapDialogBlocker = false ;
 151: LD_ADDR_EXP 11
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// dial_ConvoyDialogBlocker = false ;
 159: LD_ADDR_EXP 12
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// dial_NorthBlocker = false ;
 167: LD_ADDR_EXP 13
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// dial_EndMissionDialogBlocker = false ;
 175: LD_ADDR_EXP 14
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// claimOvsyenkoBase = false ;
 183: LD_ADDR_EXP 15
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// claimTerminalBase = false ;
 191: LD_ADDR_EXP 16
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// lostAgainBase = false ;
 199: LD_ADDR_EXP 17
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// immortalVsevolodTeam = true ;
 207: LD_ADDR_EXP 18
 211: PUSH
 212: LD_INT 1
 214: ST_TO_ADDR
// savedVsevolod = false ;
 215: LD_ADDR_EXP 19
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// vsevolodWaitGorky = false ;
 223: LD_ADDR_EXP 20
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// enableVsevolodCounter = false ;
 231: LD_ADDR_EXP 22
 235: PUSH
 236: LD_INT 0
 238: ST_TO_ADDR
// canGoNorth = false ;
 239: LD_ADDR_EXP 21
 243: PUSH
 244: LD_INT 0
 246: ST_TO_ADDR
// canSpawnReinforces = false ;
 247: LD_ADDR_EXP 23
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// canEndMission = false ;
 255: LD_ADDR_EXP 24
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// canRemoveUnits = false ;
 263: LD_ADDR_EXP 25
 267: PUSH
 268: LD_INT 0
 270: ST_TO_ADDR
// timeToAttack = 0 0$00 ;
 271: LD_ADDR_EXP 26
 275: PUSH
 276: LD_INT 0
 278: ST_TO_ADDR
// cratesSpawned = 0 ;
 279: LD_ADDR_EXP 27
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// PrepareRussians ;
 287: CALL 913 0 0
// PrepareAmericans ;
 291: CALL 3344 0 0
// Nef_PrepareNature ;
 295: CALL 4459 0 0
// MissionIntro ;
 299: CALL 16068 0 0
// end ; end_of_file
 303: LD_VAR 0 1
 307: RET
// export function InitMapConfig ; begin
 308: LD_INT 0
 310: PPUSH
// BaseMapConfig ;
 311: CALL 324 0 0
// MissionMapConfig ;
 315: CALL 414 0 0
// end ;
 319: LD_VAR 0 1
 323: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 324: LD_INT 0
 326: PPUSH
// animalsAmount = [ 3 , 3 , 1 , 3 , 0 ] ;
 327: LD_ADDR_EXP 28
 331: PUSH
 332: LD_INT 3
 334: PUSH
 335: LD_INT 3
 337: PUSH
 338: LD_INT 1
 340: PUSH
 341: LD_INT 3
 343: PUSH
 344: LD_INT 0
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 354: LD_ADDR_EXP 29
 358: PUSH
 359: LD_INT 2
 361: PUSH
 362: LD_INT 2
 364: PUSH
 365: LD_INT 2
 367: PUSH
 368: LD_INT 2
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: LIST
 375: LIST
 376: ST_TO_ADDR
// animalsAgression = 3 ;
 377: LD_ADDR_EXP 30
 381: PUSH
 382: LD_INT 3
 384: ST_TO_ADDR
// debugMode = 0 ;
 385: LD_ADDR_EXP 33
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// missionPrefix = 06_ ;
 393: LD_ADDR_EXP 31
 397: PUSH
 398: LD_STRING 06_
 400: ST_TO_ADDR
// previousMissionPrefix = 05_ ;
 401: LD_ADDR_EXP 32
 405: PUSH
 406: LD_STRING 05_
 408: ST_TO_ADDR
// end ;
 409: LD_VAR 0 1
 413: RET
// export enemySkillLevel ; export ovsyenkoStartCrates , terminalStartSiberite ; export trapAmount ; export vsevolodSaveTime ; function MissionMapConfig ; begin
 414: LD_INT 0
 416: PPUSH
// enemySkillLevel = [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 417: LD_ADDR_EXP 34
 421: PUSH
 422: LD_INT 3
 424: PUSH
 425: LD_INT 4
 427: PUSH
 428: LD_INT 5
 430: PUSH
 431: LD_INT 6
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: PUSH
 440: LD_OWVAR 67
 444: ARRAY
 445: ST_TO_ADDR
// ovsyenkoStartCrates = [ 150 , 100 , 50 , 30 ] [ Difficulty ] ;
 446: LD_ADDR_EXP 35
 450: PUSH
 451: LD_INT 150
 453: PUSH
 454: LD_INT 100
 456: PUSH
 457: LD_INT 50
 459: PUSH
 460: LD_INT 30
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_OWVAR 67
 473: ARRAY
 474: ST_TO_ADDR
// terminalStartSiberite = [ 100 , 70 , 50 , 30 ] [ Difficulty ] ;
 475: LD_ADDR_EXP 36
 479: PUSH
 480: LD_INT 100
 482: PUSH
 483: LD_INT 70
 485: PUSH
 486: LD_INT 50
 488: PUSH
 489: LD_INT 30
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: PUSH
 498: LD_OWVAR 67
 502: ARRAY
 503: ST_TO_ADDR
// trapAmount = [ rand ( 4 , 5 ) , rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] ;
 504: LD_ADDR_EXP 37
 508: PUSH
 509: LD_INT 4
 511: PPUSH
 512: LD_INT 5
 514: PPUSH
 515: CALL_OW 12
 519: PUSH
 520: LD_INT 5
 522: PPUSH
 523: LD_INT 6
 525: PPUSH
 526: CALL_OW 12
 530: PUSH
 531: LD_INT 6
 533: PPUSH
 534: LD_INT 7
 536: PPUSH
 537: CALL_OW 12
 541: PUSH
 542: LD_INT 7
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: PUSH
 551: LD_OWVAR 67
 555: ARRAY
 556: ST_TO_ADDR
// vsevolodSaveTime = [ 12 12$0 , 11 11$0 , 10 10$0 , 10 10$0 ] [ Difficulty ] ;
 557: LD_ADDR_EXP 38
 561: PUSH
 562: LD_INT 25200
 564: PUSH
 565: LD_INT 23100
 567: PUSH
 568: LD_INT 21000
 570: PUSH
 571: LD_INT 21000
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: LD_OWVAR 67
 584: ARRAY
 585: ST_TO_ADDR
// end ;
 586: LD_VAR 0 1
 590: RET
// every 0 0$1 trigger debugMode do var i ;
 591: LD_EXP 33
 595: IFFALSE 910
 597: GO 599
 599: DISABLE
 600: LD_INT 0
 602: PPUSH
// begin enable ;
 603: ENABLE
// FogOff ( your_side ) ;
 604: LD_OWVAR 2
 608: PPUSH
 609: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 613: LD_ADDR_VAR 0 1
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_OWVAR 2
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: LD_INT 2
 632: PUSH
 633: LD_INT 21
 635: PUSH
 636: LD_INT 1
 638: PUSH
 639: EMPTY
 640: LIST
 641: LIST
 642: PUSH
 643: LD_INT 21
 645: PUSH
 646: LD_INT 2
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: LIST
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PPUSH
 662: CALL_OW 69
 666: PUSH
 667: FOR_IN
 668: IFFALSE 684
// SetLives ( i , 1000 ) ;
 670: LD_VAR 0 1
 674: PPUSH
 675: LD_INT 1000
 677: PPUSH
 678: CALL_OW 234
 682: GO 667
 684: POP
 685: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 686: LD_ADDR_VAR 0 1
 690: PUSH
 691: LD_INT 22
 693: PUSH
 694: LD_OWVAR 2
 698: PUSH
 699: EMPTY
 700: LIST
 701: LIST
 702: PUSH
 703: LD_INT 21
 705: PUSH
 706: LD_INT 1
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: PPUSH
 717: CALL_OW 69
 721: PUSH
 722: FOR_IN
 723: IFFALSE 787
// begin SetSkill ( i , skill_combat , 10 ) ;
 725: LD_VAR 0 1
 729: PPUSH
 730: LD_INT 1
 732: PPUSH
 733: LD_INT 10
 735: PPUSH
 736: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 740: LD_VAR 0 1
 744: PPUSH
 745: LD_INT 2
 747: PPUSH
 748: LD_INT 10
 750: PPUSH
 751: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 755: LD_VAR 0 1
 759: PPUSH
 760: LD_INT 3
 762: PPUSH
 763: LD_INT 10
 765: PPUSH
 766: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 770: LD_VAR 0 1
 774: PPUSH
 775: LD_INT 4
 777: PPUSH
 778: LD_INT 10
 780: PPUSH
 781: CALL_OW 237
// end ;
 785: GO 722
 787: POP
 788: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 789: LD_ADDR_VAR 0 1
 793: PUSH
 794: LD_INT 22
 796: PUSH
 797: LD_OWVAR 2
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: PUSH
 806: LD_INT 2
 808: PUSH
 809: LD_INT 30
 811: PUSH
 812: LD_INT 0
 814: PUSH
 815: EMPTY
 816: LIST
 817: LIST
 818: PUSH
 819: LD_INT 30
 821: PUSH
 822: LD_INT 1
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: LIST
 833: PUSH
 834: EMPTY
 835: LIST
 836: LIST
 837: PPUSH
 838: CALL_OW 69
 842: PUSH
 843: FOR_IN
 844: IFFALSE 908
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 846: LD_VAR 0 1
 850: PPUSH
 851: CALL_OW 274
 855: PPUSH
 856: LD_INT 1
 858: PPUSH
 859: LD_INT 9999
 861: PPUSH
 862: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 866: LD_VAR 0 1
 870: PPUSH
 871: CALL_OW 274
 875: PPUSH
 876: LD_INT 2
 878: PPUSH
 879: LD_INT 9999
 881: PPUSH
 882: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 886: LD_VAR 0 1
 890: PPUSH
 891: CALL_OW 274
 895: PPUSH
 896: LD_INT 3
 898: PPUSH
 899: LD_INT 9999
 901: PPUSH
 902: CALL_OW 277
// end ;
 906: GO 843
 908: POP
 909: POP
// end ; end_of_file
 910: PPOPN 1
 912: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Platonov , Kirilenkova , Belkov , Belkov2 ; export Vsevolod , vsevolodTeam , Petr , Igor , Boris ; export ConvoyBoris , ConvoyIbrahim ; export function PrepareRussians ; begin
 913: LD_INT 0
 915: PPUSH
// PrepareHeroes ;
 916: CALL 925 0 0
// end ;
 920: LD_VAR 0 1
 924: RET
// function PrepareHeroes ; var i , j , car , tmp , cargoList , bigCargoList , point , areaPoints , nearPosition , burlakPosition , distance , index ; begin
 925: LD_INT 0
 927: PPUSH
 928: PPUSH
 929: PPUSH
 930: PPUSH
 931: PPUSH
 932: PPUSH
 933: PPUSH
 934: PPUSH
 935: PPUSH
 936: PPUSH
 937: PPUSH
 938: PPUSH
 939: PPUSH
// point = [ 170 , 208 ] ;
 940: LD_ADDR_VAR 0 8
 944: PUSH
 945: LD_INT 170
 947: PUSH
 948: LD_INT 208
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: ST_TO_ADDR
// areaPoints = AreaToList ( RussianSpawnArea1 , 0 ) ;
 955: LD_ADDR_VAR 0 9
 959: PUSH
 960: LD_INT 1
 962: PPUSH
 963: LD_INT 0
 965: PPUSH
 966: CALL_OW 517
 970: ST_TO_ADDR
// uc_side = 3 ;
 971: LD_ADDR_OWVAR 20
 975: PUSH
 976: LD_INT 3
 978: ST_TO_ADDR
// uc_nation = 3 ;
 979: LD_ADDR_OWVAR 21
 983: PUSH
 984: LD_INT 3
 986: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , 0 ) ;
 987: LD_ADDR_EXP 39
 991: PUSH
 992: LD_STRING Burlak
 994: PPUSH
 995: LD_INT 1
 997: PPUSH
 998: LD_INT 0
1000: PPUSH
1001: CALL 11785 0 3
1005: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , true , 0 ) ;
1006: LD_ADDR_EXP 44
1010: PUSH
1011: LD_STRING Titov
1013: PPUSH
1014: LD_INT 1
1016: PPUSH
1017: LD_INT 0
1019: PPUSH
1020: CALL 11785 0 3
1024: ST_TO_ADDR
// Dolgov := PrepareUnitExt ( Dolgov , true , 0 ) ;
1025: LD_ADDR_EXP 45
1029: PUSH
1030: LD_STRING Dolgov
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_INT 0
1038: PPUSH
1039: CALL 11785 0 3
1043: ST_TO_ADDR
// Lipshchin := PrepareUnitExt ( Lipshchin , true , 0 ) ;
1044: LD_ADDR_EXP 46
1048: PUSH
1049: LD_STRING Lipshchin
1051: PPUSH
1052: LD_INT 1
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL 11785 0 3
1062: ST_TO_ADDR
// Karamazov := PrepareUnitExt ( Karamazov , true , class_engineer ) ;
1063: LD_ADDR_EXP 40
1067: PUSH
1068: LD_STRING Karamazov
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: LD_INT 2
1076: PPUSH
1077: CALL 11785 0 3
1081: ST_TO_ADDR
// Petrovova := PrepareUnitExt ( Petrovova , true , 0 ) ;
1082: LD_ADDR_EXP 41
1086: PUSH
1087: LD_STRING Petrovova
1089: PPUSH
1090: LD_INT 1
1092: PPUSH
1093: LD_INT 0
1095: PPUSH
1096: CALL 11785 0 3
1100: ST_TO_ADDR
// Gleb := PrepareUnitExt ( Gleb , true , 0 ) ;
1101: LD_ADDR_EXP 42
1105: PUSH
1106: LD_STRING Gleb
1108: PPUSH
1109: LD_INT 1
1111: PPUSH
1112: LD_INT 0
1114: PPUSH
1115: CALL 11785 0 3
1119: ST_TO_ADDR
// Petrosyan := PrepareUnitExt ( Petrosyan , true , 0 ) ;
1120: LD_ADDR_EXP 43
1124: PUSH
1125: LD_STRING Petrosyan
1127: PPUSH
1128: LD_INT 1
1130: PPUSH
1131: LD_INT 0
1133: PPUSH
1134: CALL 11785 0 3
1138: ST_TO_ADDR
// Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
1139: LD_ADDR_EXP 47
1143: PUSH
1144: LD_STRING Platonov
1146: PPUSH
1147: LD_INT 0
1149: PPUSH
1150: LD_INT 0
1152: PPUSH
1153: CALL 11785 0 3
1157: ST_TO_ADDR
// if TestCharacters ( 04_Kirilenkova ) then
1158: LD_STRING 04_Kirilenkova
1160: PPUSH
1161: CALL_OW 28
1165: IFFALSE 1192
// begin Kirilenkova := CreateCharacter ( 04_Kirilenkova ) ;
1167: LD_ADDR_EXP 48
1171: PUSH
1172: LD_STRING 04_Kirilenkova
1174: PPUSH
1175: CALL_OW 34
1179: ST_TO_ADDR
// SetClass ( Kirilenkova , class_scientistic ) ;
1180: LD_EXP 48
1184: PPUSH
1185: LD_INT 4
1187: PPUSH
1188: CALL_OW 336
// end ; if TestCharacters ( 04_Belkov ) then
1192: LD_STRING 04_Belkov
1194: PPUSH
1195: CALL_OW 28
1199: IFFALSE 1226
// begin Belkov := CreateCharacter ( 04_Belkov ) ;
1201: LD_ADDR_EXP 49
1205: PUSH
1206: LD_STRING 04_Belkov
1208: PPUSH
1209: CALL_OW 34
1213: ST_TO_ADDR
// SetClass ( Belkov , class_soldier ) ;
1214: LD_EXP 49
1218: PPUSH
1219: LD_INT 1
1221: PPUSH
1222: CALL_OW 336
// end ; if TestCharacters ( 04_Belkov2 ) then
1226: LD_STRING 04_Belkov2
1228: PPUSH
1229: CALL_OW 28
1233: IFFALSE 1260
// begin Belkov2 := CreateCharacter ( 04_Belkov2 ) ;
1235: LD_ADDR_EXP 50
1239: PUSH
1240: LD_STRING 04_Belkov2
1242: PPUSH
1243: CALL_OW 34
1247: ST_TO_ADDR
// SetClass ( Belkov2 , class_soldier ) ;
1248: LD_EXP 50
1252: PPUSH
1253: LD_INT 1
1255: PPUSH
1256: CALL_OW 336
// end ; for i := 1 to vehiclesFrom05 do
1260: LD_ADDR_VAR 0 2
1264: PUSH
1265: DOUBLE
1266: LD_INT 1
1268: DEC
1269: ST_TO_ADDR
1270: LD_EXP 1
1274: PUSH
1275: FOR_TO
1276: IFFALSE 1938
// begin uc_nation = vehiclesFrom05 [ i ] [ 1 ] ;
1278: LD_ADDR_OWVAR 21
1282: PUSH
1283: LD_EXP 1
1287: PUSH
1288: LD_VAR 0 2
1292: ARRAY
1293: PUSH
1294: LD_INT 1
1296: ARRAY
1297: ST_TO_ADDR
// vc_chassis := vehiclesFrom05 [ i ] [ 2 ] ;
1298: LD_ADDR_OWVAR 37
1302: PUSH
1303: LD_EXP 1
1307: PUSH
1308: LD_VAR 0 2
1312: ARRAY
1313: PUSH
1314: LD_INT 2
1316: ARRAY
1317: ST_TO_ADDR
// vc_engine = vehiclesFrom05 [ i ] [ 3 ] ;
1318: LD_ADDR_OWVAR 39
1322: PUSH
1323: LD_EXP 1
1327: PUSH
1328: LD_VAR 0 2
1332: ARRAY
1333: PUSH
1334: LD_INT 3
1336: ARRAY
1337: ST_TO_ADDR
// vc_control = vehiclesFrom05 [ i ] [ 4 ] ;
1338: LD_ADDR_OWVAR 38
1342: PUSH
1343: LD_EXP 1
1347: PUSH
1348: LD_VAR 0 2
1352: ARRAY
1353: PUSH
1354: LD_INT 4
1356: ARRAY
1357: ST_TO_ADDR
// vc_weapon := vehiclesFrom05 [ i ] [ 5 ] ;
1358: LD_ADDR_OWVAR 40
1362: PUSH
1363: LD_EXP 1
1367: PUSH
1368: LD_VAR 0 2
1372: ARRAY
1373: PUSH
1374: LD_INT 5
1376: ARRAY
1377: ST_TO_ADDR
// uc_direction := 0 ;
1378: LD_ADDR_OWVAR 24
1382: PUSH
1383: LD_INT 0
1385: ST_TO_ADDR
// vc_fuel_battery := Rand ( 10 , 15 ) ;
1386: LD_ADDR_OWVAR 41
1390: PUSH
1391: LD_INT 10
1393: PPUSH
1394: LD_INT 15
1396: PPUSH
1397: CALL_OW 12
1401: ST_TO_ADDR
// car := CreateVehicle ;
1402: LD_ADDR_VAR 0 4
1406: PUSH
1407: CALL_OW 45
1411: ST_TO_ADDR
// distance = 999 ;
1412: LD_ADDR_VAR 0 12
1416: PUSH
1417: LD_INT 999
1419: ST_TO_ADDR
// index = 1 ;
1420: LD_ADDR_VAR 0 13
1424: PUSH
1425: LD_INT 1
1427: ST_TO_ADDR
// for j := 1 to areaPoints [ 1 ] do
1428: LD_ADDR_VAR 0 3
1432: PUSH
1433: DOUBLE
1434: LD_INT 1
1436: DEC
1437: ST_TO_ADDR
1438: LD_VAR 0 9
1442: PUSH
1443: LD_INT 1
1445: ARRAY
1446: PUSH
1447: FOR_TO
1448: IFFALSE 1619
// begin if GetDistXY ( point [ 1 ] , point [ 2 ] , areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ) < distance then
1450: LD_VAR 0 8
1454: PUSH
1455: LD_INT 1
1457: ARRAY
1458: PPUSH
1459: LD_VAR 0 8
1463: PUSH
1464: LD_INT 2
1466: ARRAY
1467: PPUSH
1468: LD_VAR 0 9
1472: PUSH
1473: LD_INT 1
1475: ARRAY
1476: PUSH
1477: LD_VAR 0 3
1481: ARRAY
1482: PPUSH
1483: LD_VAR 0 9
1487: PUSH
1488: LD_INT 2
1490: ARRAY
1491: PUSH
1492: LD_VAR 0 3
1496: ARRAY
1497: PPUSH
1498: CALL_OW 298
1502: PUSH
1503: LD_VAR 0 12
1507: LESS
1508: IFFALSE 1617
// begin distance = GetDistXY ( point [ 1 ] , point [ 2 ] , areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ) ;
1510: LD_ADDR_VAR 0 12
1514: PUSH
1515: LD_VAR 0 8
1519: PUSH
1520: LD_INT 1
1522: ARRAY
1523: PPUSH
1524: LD_VAR 0 8
1528: PUSH
1529: LD_INT 2
1531: ARRAY
1532: PPUSH
1533: LD_VAR 0 9
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PUSH
1542: LD_VAR 0 3
1546: ARRAY
1547: PPUSH
1548: LD_VAR 0 9
1552: PUSH
1553: LD_INT 2
1555: ARRAY
1556: PUSH
1557: LD_VAR 0 3
1561: ARRAY
1562: PPUSH
1563: CALL_OW 298
1567: ST_TO_ADDR
// nearPosition = [ areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ] ;
1568: LD_ADDR_VAR 0 10
1572: PUSH
1573: LD_VAR 0 9
1577: PUSH
1578: LD_INT 1
1580: ARRAY
1581: PUSH
1582: LD_VAR 0 3
1586: ARRAY
1587: PUSH
1588: LD_VAR 0 9
1592: PUSH
1593: LD_INT 2
1595: ARRAY
1596: PUSH
1597: LD_VAR 0 3
1601: ARRAY
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: ST_TO_ADDR
// index = j ;
1607: LD_ADDR_VAR 0 13
1611: PUSH
1612: LD_VAR 0 3
1616: ST_TO_ADDR
// end ; end ;
1617: GO 1447
1619: POP
1620: POP
// if not burlakPosition then
1621: LD_VAR 0 11
1625: NOT
1626: IFFALSE 1638
// burlakPosition = nearPosition ;
1628: LD_ADDR_VAR 0 11
1632: PUSH
1633: LD_VAR 0 10
1637: ST_TO_ADDR
// if areaPoints then
1638: LD_VAR 0 9
1642: IFFALSE 1690
// begin areaPoints = Delete2D ( areaPoints , 1 , index ) ;
1644: LD_ADDR_VAR 0 9
1648: PUSH
1649: LD_VAR 0 9
1653: PPUSH
1654: LD_INT 1
1656: PPUSH
1657: LD_VAR 0 13
1661: PPUSH
1662: CALL 12614 0 3
1666: ST_TO_ADDR
// areaPoints = Delete2D ( areaPoints , 2 , index ) ;
1667: LD_ADDR_VAR 0 9
1671: PUSH
1672: LD_VAR 0 9
1676: PPUSH
1677: LD_INT 2
1679: PPUSH
1680: LD_VAR 0 13
1684: PPUSH
1685: CALL 12614 0 3
1689: ST_TO_ADDR
// end ; PlaceUnitXY ( car , nearPosition [ 1 ] , nearPosition [ 2 ] , false ) ;
1690: LD_VAR 0 4
1694: PPUSH
1695: LD_VAR 0 10
1699: PUSH
1700: LD_INT 1
1702: ARRAY
1703: PPUSH
1704: LD_VAR 0 10
1708: PUSH
1709: LD_INT 2
1711: ARRAY
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 48
// case vehiclesFrom05 [ i ] [ 6 ] of Bur :
1720: LD_EXP 1
1724: PUSH
1725: LD_VAR 0 2
1729: ARRAY
1730: PUSH
1731: LD_INT 6
1733: ARRAY
1734: PUSH
1735: LD_STRING Bur
1737: DOUBLE
1738: EQUAL
1739: IFTRUE 1743
1741: GO 1760
1743: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
1744: LD_EXP 39
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL_OW 52
1758: GO 1936
1760: LD_STRING Kar
1762: DOUBLE
1763: EQUAL
1764: IFTRUE 1768
1766: GO 1785
1768: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
1769: LD_EXP 40
1773: PPUSH
1774: LD_VAR 0 4
1778: PPUSH
1779: CALL_OW 52
1783: GO 1936
1785: LD_STRING Ptr
1787: DOUBLE
1788: EQUAL
1789: IFTRUE 1793
1791: GO 1810
1793: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
1794: LD_EXP 41
1798: PPUSH
1799: LD_VAR 0 4
1803: PPUSH
1804: CALL_OW 52
1808: GO 1936
1810: LD_STRING Glb
1812: DOUBLE
1813: EQUAL
1814: IFTRUE 1818
1816: GO 1835
1818: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
1819: LD_EXP 42
1823: PPUSH
1824: LD_VAR 0 4
1828: PPUSH
1829: CALL_OW 52
1833: GO 1936
1835: LD_STRING Pet
1837: DOUBLE
1838: EQUAL
1839: IFTRUE 1843
1841: GO 1860
1843: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
1844: LD_EXP 43
1848: PPUSH
1849: LD_VAR 0 4
1853: PPUSH
1854: CALL_OW 52
1858: GO 1936
1860: LD_STRING Dol
1862: DOUBLE
1863: EQUAL
1864: IFTRUE 1868
1866: GO 1885
1868: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
1869: LD_EXP 45
1873: PPUSH
1874: LD_VAR 0 4
1878: PPUSH
1879: CALL_OW 52
1883: GO 1936
1885: LD_STRING Lip
1887: DOUBLE
1888: EQUAL
1889: IFTRUE 1893
1891: GO 1910
1893: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
1894: LD_EXP 46
1898: PPUSH
1899: LD_VAR 0 4
1903: PPUSH
1904: CALL_OW 52
1908: GO 1936
1910: LD_STRING Tit
1912: DOUBLE
1913: EQUAL
1914: IFTRUE 1918
1916: GO 1935
1918: POP
// PlaceHumanInUnit ( Titov , car ) ; end ;
1919: LD_EXP 44
1923: PPUSH
1924: LD_VAR 0 4
1928: PPUSH
1929: CALL_OW 52
1933: GO 1936
1935: POP
// end ;
1936: GO 1275
1938: POP
1939: POP
// cargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
1940: LD_ADDR_VAR 0 6
1944: PUSH
1945: LD_INT 22
1947: PUSH
1948: LD_INT 3
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: PUSH
1955: LD_INT 21
1957: PUSH
1958: LD_INT 2
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: LD_INT 34
1970: PUSH
1971: LD_INT 51
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 34
1980: PUSH
1981: LD_INT 32
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: PUSH
1988: LD_INT 34
1990: PUSH
1991: LD_INT 12
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: LIST
2008: PPUSH
2009: CALL_OW 69
2013: ST_TO_ADDR
// bigCargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 89 ] ] ) ;
2014: LD_ADDR_VAR 0 7
2018: PUSH
2019: LD_INT 22
2021: PUSH
2022: LD_INT 3
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PUSH
2029: LD_INT 21
2031: PUSH
2032: LD_INT 2
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: PUSH
2039: LD_INT 34
2041: PUSH
2042: LD_INT 89
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: PPUSH
2054: CALL_OW 69
2058: ST_TO_ADDR
// if cargoList then
2059: LD_VAR 0 6
2063: IFFALSE 2253
// for i = 1 to cargoList do
2065: LD_ADDR_VAR 0 2
2069: PUSH
2070: DOUBLE
2071: LD_INT 1
2073: DEC
2074: ST_TO_ADDR
2075: LD_VAR 0 6
2079: PUSH
2080: FOR_TO
2081: IFFALSE 2251
// if resourcesFrom05 then
2083: LD_EXP 2
2087: IFFALSE 2249
// begin if not resourcesFrom05 [ i ] [ 1 ] > 100 or resourcesFrom05 [ i ] [ 2 ] > 100 or resourcesFrom05 [ i ] [ 3 ] > 100 then
2089: LD_EXP 2
2093: PUSH
2094: LD_VAR 0 2
2098: ARRAY
2099: PUSH
2100: LD_INT 1
2102: ARRAY
2103: PUSH
2104: LD_INT 100
2106: GREATER
2107: NOT
2108: PUSH
2109: LD_EXP 2
2113: PUSH
2114: LD_VAR 0 2
2118: ARRAY
2119: PUSH
2120: LD_INT 2
2122: ARRAY
2123: PUSH
2124: LD_INT 100
2126: GREATER
2127: OR
2128: PUSH
2129: LD_EXP 2
2133: PUSH
2134: LD_VAR 0 2
2138: ARRAY
2139: PUSH
2140: LD_INT 3
2142: ARRAY
2143: PUSH
2144: LD_INT 100
2146: GREATER
2147: OR
2148: IFFALSE 2249
// begin AddCargo ( cargoList [ i ] , 1 , resourcesFrom05 [ i ] [ 1 ] ) ;
2150: LD_VAR 0 6
2154: PUSH
2155: LD_VAR 0 2
2159: ARRAY
2160: PPUSH
2161: LD_INT 1
2163: PPUSH
2164: LD_EXP 2
2168: PUSH
2169: LD_VAR 0 2
2173: ARRAY
2174: PUSH
2175: LD_INT 1
2177: ARRAY
2178: PPUSH
2179: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resourcesFrom05 [ i ] [ 2 ] ) ;
2183: LD_VAR 0 6
2187: PUSH
2188: LD_VAR 0 2
2192: ARRAY
2193: PPUSH
2194: LD_INT 2
2196: PPUSH
2197: LD_EXP 2
2201: PUSH
2202: LD_VAR 0 2
2206: ARRAY
2207: PUSH
2208: LD_INT 2
2210: ARRAY
2211: PPUSH
2212: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resourcesFrom05 [ i ] [ 3 ] ) ;
2216: LD_VAR 0 6
2220: PUSH
2221: LD_VAR 0 2
2225: ARRAY
2226: PPUSH
2227: LD_INT 3
2229: PPUSH
2230: LD_EXP 2
2234: PUSH
2235: LD_VAR 0 2
2239: ARRAY
2240: PUSH
2241: LD_INT 3
2243: ARRAY
2244: PPUSH
2245: CALL_OW 291
// end ; end ;
2249: GO 2080
2251: POP
2252: POP
// if bigCargoList then
2253: LD_VAR 0 7
2257: IFFALSE 2446
// for i = 1 to bigCargoList do
2259: LD_ADDR_VAR 0 2
2263: PUSH
2264: DOUBLE
2265: LD_INT 1
2267: DEC
2268: ST_TO_ADDR
2269: LD_VAR 0 7
2273: PUSH
2274: FOR_TO
2275: IFFALSE 2444
// if resourcesFrom05 then
2277: LD_EXP 2
2281: IFFALSE 2442
// begin if resourcesFrom05 [ i ] [ 1 ] > 100 or resourcesFrom05 [ i ] [ 2 ] > 100 or resourcesFrom05 [ i ] [ 3 ] > 100 then
2283: LD_EXP 2
2287: PUSH
2288: LD_VAR 0 2
2292: ARRAY
2293: PUSH
2294: LD_INT 1
2296: ARRAY
2297: PUSH
2298: LD_INT 100
2300: GREATER
2301: PUSH
2302: LD_EXP 2
2306: PUSH
2307: LD_VAR 0 2
2311: ARRAY
2312: PUSH
2313: LD_INT 2
2315: ARRAY
2316: PUSH
2317: LD_INT 100
2319: GREATER
2320: OR
2321: PUSH
2322: LD_EXP 2
2326: PUSH
2327: LD_VAR 0 2
2331: ARRAY
2332: PUSH
2333: LD_INT 3
2335: ARRAY
2336: PUSH
2337: LD_INT 100
2339: GREATER
2340: OR
2341: IFFALSE 2442
// begin AddCargo ( bigCargoList [ i ] , 1 , resourcesFrom05 [ i ] [ 1 ] ) ;
2343: LD_VAR 0 7
2347: PUSH
2348: LD_VAR 0 2
2352: ARRAY
2353: PPUSH
2354: LD_INT 1
2356: PPUSH
2357: LD_EXP 2
2361: PUSH
2362: LD_VAR 0 2
2366: ARRAY
2367: PUSH
2368: LD_INT 1
2370: ARRAY
2371: PPUSH
2372: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 2 , resourcesFrom05 [ i ] [ 2 ] ) ;
2376: LD_VAR 0 7
2380: PUSH
2381: LD_VAR 0 2
2385: ARRAY
2386: PPUSH
2387: LD_INT 2
2389: PPUSH
2390: LD_EXP 2
2394: PUSH
2395: LD_VAR 0 2
2399: ARRAY
2400: PUSH
2401: LD_INT 2
2403: ARRAY
2404: PPUSH
2405: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 3 , resourcesFrom05 [ i ] [ 3 ] ) ;
2409: LD_VAR 0 7
2413: PUSH
2414: LD_VAR 0 2
2418: ARRAY
2419: PPUSH
2420: LD_INT 3
2422: PPUSH
2423: LD_EXP 2
2427: PUSH
2428: LD_VAR 0 2
2432: ARRAY
2433: PUSH
2434: LD_INT 3
2436: ARRAY
2437: PPUSH
2438: CALL_OW 291
// end ; end ;
2442: GO 2274
2444: POP
2445: POP
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_class , class_engineer ] ] ) then
2446: LD_INT 22
2448: PUSH
2449: LD_INT 3
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PUSH
2456: LD_INT 21
2458: PUSH
2459: LD_INT 1
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PUSH
2466: LD_INT 23
2468: PUSH
2469: LD_INT 3
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: PUSH
2476: LD_INT 25
2478: PUSH
2479: LD_INT 2
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: EMPTY
2487: LIST
2488: LIST
2489: LIST
2490: LIST
2491: PPUSH
2492: CALL_OW 69
2496: NOT
2497: IFFALSE 2602
// begin if IsOk ( Lipshchin ) then
2499: LD_EXP 46
2503: PPUSH
2504: CALL_OW 302
2508: IFFALSE 2524
// SetClass ( Lipshchin , class_engineer ) else
2510: LD_EXP 46
2514: PPUSH
2515: LD_INT 2
2517: PPUSH
2518: CALL_OW 336
2522: GO 2602
// begin tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ;
2524: LD_ADDR_VAR 0 5
2528: PUSH
2529: LD_INT 22
2531: PUSH
2532: LD_INT 3
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: PUSH
2539: LD_INT 21
2541: PUSH
2542: LD_INT 1
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: PUSH
2549: LD_INT 23
2551: PUSH
2552: LD_INT 3
2554: PUSH
2555: EMPTY
2556: LIST
2557: LIST
2558: PUSH
2559: LD_INT 50
2561: PUSH
2562: EMPTY
2563: LIST
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: PPUSH
2571: CALL_OW 69
2575: ST_TO_ADDR
// SetClass ( tmp [ rand ( 0 , tmp ) ] , class_engineer ) ;
2576: LD_VAR 0 5
2580: PUSH
2581: LD_INT 0
2583: PPUSH
2584: LD_VAR 0 5
2588: PPUSH
2589: CALL_OW 12
2593: ARRAY
2594: PPUSH
2595: LD_INT 2
2597: PPUSH
2598: CALL_OW 336
// end ; end ; SetTech ( tech_ApeLang , 3 , apeTechsStatus [ 1 ] ) ;
2602: LD_INT 1
2604: PPUSH
2605: LD_INT 3
2607: PPUSH
2608: LD_EXP 5
2612: PUSH
2613: LD_INT 1
2615: ARRAY
2616: PPUSH
2617: CALL_OW 322
// SetTech ( tech_ApePsych , 3 , apeTechsStatus [ 2 ] ) ;
2621: LD_INT 2
2623: PPUSH
2624: LD_INT 3
2626: PPUSH
2627: LD_EXP 5
2631: PUSH
2632: LD_INT 2
2634: ARRAY
2635: PPUSH
2636: CALL_OW 322
// SetTech ( tech_ApeAgres , 3 , apeTechsStatus [ 3 ] ) ;
2640: LD_INT 11
2642: PPUSH
2643: LD_INT 3
2645: PPUSH
2646: LD_EXP 5
2650: PUSH
2651: LD_INT 3
2653: ARRAY
2654: PPUSH
2655: CALL_OW 322
// end ;
2659: LD_VAR 0 1
2663: RET
// export function PrepareVsevolod ; var i , un ; begin
2664: LD_INT 0
2666: PPUSH
2667: PPUSH
2668: PPUSH
// uc_side = 6 ;
2669: LD_ADDR_OWVAR 20
2673: PUSH
2674: LD_INT 6
2676: ST_TO_ADDR
// uc_nation = 3 ;
2677: LD_ADDR_OWVAR 21
2681: PUSH
2682: LD_INT 3
2684: ST_TO_ADDR
// vsevolodTeam = [ ] ;
2685: LD_ADDR_EXP 52
2689: PUSH
2690: EMPTY
2691: ST_TO_ADDR
// Vsevolod := PrepareUnitExt ( Vsevolod , false , class_soldier ) ;
2692: LD_ADDR_EXP 51
2696: PUSH
2697: LD_STRING Vsevolod
2699: PPUSH
2700: LD_INT 0
2702: PPUSH
2703: LD_INT 1
2705: PPUSH
2706: CALL 11785 0 3
2710: ST_TO_ADDR
// PlaceUnitArea ( Vsevolod , VsevolodSpawnArea , false ) ;
2711: LD_EXP 51
2715: PPUSH
2716: LD_INT 7
2718: PPUSH
2719: LD_INT 0
2721: PPUSH
2722: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Vsevolod ;
2726: LD_ADDR_EXP 52
2730: PUSH
2731: LD_EXP 52
2735: PUSH
2736: LD_EXP 51
2740: ADD
2741: ST_TO_ADDR
// Petr = PrepareUnitExt ( SPetr , false , class_engineer ) ;
2742: LD_ADDR_EXP 53
2746: PUSH
2747: LD_STRING SPetr
2749: PPUSH
2750: LD_INT 0
2752: PPUSH
2753: LD_INT 2
2755: PPUSH
2756: CALL 11785 0 3
2760: ST_TO_ADDR
// PlaceUnitArea ( Petr , VsevolodSpawnArea , false ) ;
2761: LD_EXP 53
2765: PPUSH
2766: LD_INT 7
2768: PPUSH
2769: LD_INT 0
2771: PPUSH
2772: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Petr ;
2776: LD_ADDR_EXP 52
2780: PUSH
2781: LD_EXP 52
2785: PUSH
2786: LD_EXP 53
2790: ADD
2791: ST_TO_ADDR
// Igor = PrepareUnitExt ( SIgor , false , class_soldier ) ;
2792: LD_ADDR_EXP 54
2796: PUSH
2797: LD_STRING SIgor
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: LD_INT 1
2805: PPUSH
2806: CALL 11785 0 3
2810: ST_TO_ADDR
// PlaceUnitArea ( Igor , VsevolodSpawnArea , false ) ;
2811: LD_EXP 54
2815: PPUSH
2816: LD_INT 7
2818: PPUSH
2819: LD_INT 0
2821: PPUSH
2822: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Igor ;
2826: LD_ADDR_EXP 52
2830: PUSH
2831: LD_EXP 52
2835: PUSH
2836: LD_EXP 54
2840: ADD
2841: ST_TO_ADDR
// Boris = PrepareUnitExt ( SBoris , false , class_soldier ) ;
2842: LD_ADDR_EXP 55
2846: PUSH
2847: LD_STRING SBoris
2849: PPUSH
2850: LD_INT 0
2852: PPUSH
2853: LD_INT 1
2855: PPUSH
2856: CALL 11785 0 3
2860: ST_TO_ADDR
// PlaceUnitArea ( Boris , VsevolodSpawnArea , false ) ;
2861: LD_EXP 55
2865: PPUSH
2866: LD_INT 7
2868: PPUSH
2869: LD_INT 0
2871: PPUSH
2872: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Boris ;
2876: LD_ADDR_EXP 52
2880: PUSH
2881: LD_EXP 52
2885: PUSH
2886: LD_EXP 55
2890: ADD
2891: ST_TO_ADDR
// end ;
2892: LD_VAR 0 1
2896: RET
// export function SpawnPlatonovReinforces ; var i , un , veh ; begin
2897: LD_INT 0
2899: PPUSH
2900: PPUSH
2901: PPUSH
2902: PPUSH
// uc_side = 3 ;
2903: LD_ADDR_OWVAR 20
2907: PUSH
2908: LD_INT 3
2910: ST_TO_ADDR
// uc_nation = 3 ;
2911: LD_ADDR_OWVAR 21
2915: PUSH
2916: LD_INT 3
2918: ST_TO_ADDR
// PrepareSoldier ( false , 4 ) ;
2919: LD_INT 0
2921: PPUSH
2922: LD_INT 4
2924: PPUSH
2925: CALL_OW 381
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] , rand ( 50 , 60 ) ) ;
2929: LD_INT 22
2931: PPUSH
2932: LD_INT 1
2934: PPUSH
2935: LD_INT 1
2937: PPUSH
2938: LD_INT 43
2940: PUSH
2941: LD_INT 44
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PUSH
2948: LD_INT 1
2950: PPUSH
2951: LD_INT 2
2953: PPUSH
2954: CALL_OW 12
2958: ARRAY
2959: PPUSH
2960: LD_INT 50
2962: PPUSH
2963: LD_INT 60
2965: PPUSH
2966: CALL_OW 12
2970: PPUSH
2971: CALL 46885 0 5
// veh = CreateVehicle ;
2975: LD_ADDR_VAR 0 4
2979: PUSH
2980: CALL_OW 45
2984: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
2985: LD_VAR 0 4
2989: PPUSH
2990: LD_INT 0
2992: PPUSH
2993: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 230 , false ) ;
2997: LD_VAR 0 4
3001: PPUSH
3002: LD_INT 134
3004: PPUSH
3005: LD_INT 230
3007: PPUSH
3008: LD_INT 0
3010: PPUSH
3011: CALL_OW 48
// if Belkov then
3015: LD_EXP 49
3019: IFFALSE 3037
// PlaceHumanInUnit ( Belkov , veh ) else
3021: LD_EXP 49
3025: PPUSH
3026: LD_VAR 0 4
3030: PPUSH
3031: CALL_OW 52
3035: GO 3090
// if Difficulty = 1 or Difficulty = 2 then
3037: LD_OWVAR 67
3041: PUSH
3042: LD_INT 1
3044: EQUAL
3045: PUSH
3046: LD_OWVAR 67
3050: PUSH
3051: LD_INT 2
3053: EQUAL
3054: OR
3055: IFFALSE 3090
// begin ConvoyBoris = PrepareUnitExt ( SCBoris , false , class_soldier ) ;
3057: LD_ADDR_EXP 56
3061: PUSH
3062: LD_STRING SCBoris
3064: PPUSH
3065: LD_INT 0
3067: PPUSH
3068: LD_INT 1
3070: PPUSH
3071: CALL 11785 0 3
3075: ST_TO_ADDR
// PlaceHumanInUnit ( ConvoyBoris , veh ) ;
3076: LD_EXP 56
3080: PPUSH
3081: LD_VAR 0 4
3085: PPUSH
3086: CALL_OW 52
// end ; PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3090: LD_INT 22
3092: PPUSH
3093: LD_INT 1
3095: PPUSH
3096: LD_INT 1
3098: PPUSH
3099: LD_INT 51
3101: PPUSH
3102: LD_INT 50
3104: PPUSH
3105: LD_INT 60
3107: PPUSH
3108: CALL_OW 12
3112: PPUSH
3113: CALL 46885 0 5
// veh = CreateVehicle ;
3117: LD_ADDR_VAR 0 4
3121: PUSH
3122: CALL_OW 45
3126: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3127: LD_VAR 0 4
3131: PPUSH
3132: LD_INT 0
3134: PPUSH
3135: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 233 , false ) ;
3139: LD_VAR 0 4
3143: PPUSH
3144: LD_INT 134
3146: PPUSH
3147: LD_INT 233
3149: PPUSH
3150: LD_INT 0
3152: PPUSH
3153: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
3157: LD_VAR 0 4
3161: PPUSH
3162: LD_INT 1
3164: PPUSH
3165: LD_INT 100
3167: PPUSH
3168: CALL_OW 290
// if Belkov2 then
3172: LD_EXP 50
3176: IFFALSE 3194
// PlaceHumanInUnit ( Belkov2 , veh ) else
3178: LD_EXP 50
3182: PPUSH
3183: LD_VAR 0 4
3187: PPUSH
3188: CALL_OW 52
3192: GO 3237
// if Difficulty = 1 then
3194: LD_OWVAR 67
3198: PUSH
3199: LD_INT 1
3201: EQUAL
3202: IFFALSE 3237
// begin ConvoyIbrahim = PrepareUnitExt ( SCIbrahim , false , class_soldier ) ;
3204: LD_ADDR_EXP 57
3208: PUSH
3209: LD_STRING SCIbrahim
3211: PPUSH
3212: LD_INT 0
3214: PPUSH
3215: LD_INT 1
3217: PPUSH
3218: CALL 11785 0 3
3222: ST_TO_ADDR
// PlaceHumanInUnit ( ConvoyIbrahim , veh ) ;
3223: LD_EXP 57
3227: PPUSH
3228: LD_VAR 0 4
3232: PPUSH
3233: CALL_OW 52
// end ; if Kirilenkova then
3237: LD_EXP 48
3241: IFFALSE 3339
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3243: LD_INT 22
3245: PPUSH
3246: LD_INT 1
3248: PPUSH
3249: LD_INT 1
3251: PPUSH
3252: LD_INT 51
3254: PPUSH
3255: LD_INT 50
3257: PPUSH
3258: LD_INT 60
3260: PPUSH
3261: CALL_OW 12
3265: PPUSH
3266: CALL 46885 0 5
// veh = CreateVehicle ;
3270: LD_ADDR_VAR 0 4
3274: PUSH
3275: CALL_OW 45
3279: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3280: LD_VAR 0 4
3284: PPUSH
3285: LD_INT 0
3287: PPUSH
3288: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 236 , false ) ;
3292: LD_VAR 0 4
3296: PPUSH
3297: LD_INT 134
3299: PPUSH
3300: LD_INT 236
3302: PPUSH
3303: LD_INT 0
3305: PPUSH
3306: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
3310: LD_VAR 0 4
3314: PPUSH
3315: LD_INT 1
3317: PPUSH
3318: LD_INT 100
3320: PPUSH
3321: CALL_OW 290
// PlaceHumanInUnit ( Kirilenkova , veh ) ;
3325: LD_EXP 48
3329: PPUSH
3330: LD_VAR 0 4
3334: PPUSH
3335: CALL_OW 52
// end ; end ; end_of_file
3339: LD_VAR 0 1
3343: RET
// export VanHouten ; export ovsyenkoBase , terminalBase , headAmBase ; export trapTeam , convoyTeam , attackTeam ; export function PrepareAmericans ; begin
3344: LD_INT 0
3346: PPUSH
// PrepareOvsyenko ;
3347: CALL 3364 0 0
// PrepareTerminal ;
3351: CALL 3565 0 0
// PrepareMainAmericanBase ;
3355: CALL 3648 0 0
// end ;
3359: LD_VAR 0 1
3363: RET
// function PrepareOvsyenko ; var soldiersAmount ; begin
3364: LD_INT 0
3366: PPUSH
3367: PPUSH
// uc_side = 1 ;
3368: LD_ADDR_OWVAR 20
3372: PUSH
3373: LD_INT 1
3375: ST_TO_ADDR
// uc_nation = nation_american ;
3376: LD_ADDR_OWVAR 21
3380: PUSH
3381: LD_INT 1
3383: ST_TO_ADDR
// soldiersAmount = 3 ;
3384: LD_ADDR_VAR 0 2
3388: PUSH
3389: LD_INT 3
3391: ST_TO_ADDR
// if fastBreakthrough then
3392: LD_EXP 3
3396: IFFALSE 3414
// begin RemoveUnit ( ovs_bun2 ) ;
3398: LD_INT 229
3400: PPUSH
3401: CALL_OW 64
// RemoveUnit ( ovs_bun3 ) ;
3405: LD_INT 258
3407: PPUSH
3408: CALL_OW 64
// end else
3412: GO 3422
// soldiersAmount = 4 ;
3414: LD_ADDR_VAR 0 2
3418: PUSH
3419: LD_INT 4
3421: ST_TO_ADDR
// ovsyenkoBase := Nef_PrepareBase ( ovsyenko , OvsyenkoBaseArea , ovsyenko , enemySkillLevel , [ ovsyenkoStartCrates , 50 , 0 ] , 1 , [ soldiersAmount , 1 , 0 , 1 ] ) ;
3422: LD_ADDR_EXP 59
3426: PUSH
3427: LD_INT 86
3429: PPUSH
3430: LD_INT 3
3432: PPUSH
3433: LD_STRING ovsyenko
3435: PPUSH
3436: LD_EXP 34
3440: PPUSH
3441: LD_EXP 35
3445: PUSH
3446: LD_INT 50
3448: PUSH
3449: LD_INT 0
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: LIST
3456: PPUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_VAR 0 2
3464: PUSH
3465: LD_INT 1
3467: PUSH
3468: LD_INT 0
3470: PUSH
3471: LD_INT 1
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: PPUSH
3480: CALL 12686 0 7
3484: ST_TO_ADDR
// case Difficulty of 1 :
3485: LD_OWVAR 67
3489: PUSH
3490: LD_INT 1
3492: DOUBLE
3493: EQUAL
3494: IFTRUE 3498
3496: GO 3511
3498: POP
// PlaceWeaponTurret ( ovs_bun1 , us_double_gun ) ; 2 :
3499: LD_INT 97
3501: PPUSH
3502: LD_INT 5
3504: PPUSH
3505: CALL_OW 431
3509: GO 3560
3511: LD_INT 2
3513: DOUBLE
3514: EQUAL
3515: IFTRUE 3519
3517: GO 3532
3519: POP
// PlaceWeaponTurret ( ovs_bun1 , us_light_gun ) ; 3 .. 4 :
3520: LD_INT 97
3522: PPUSH
3523: LD_INT 3
3525: PPUSH
3526: CALL_OW 431
3530: GO 3560
3532: LD_INT 3
3534: DOUBLE
3535: GREATEREQUAL
3536: IFFALSE 3544
3538: LD_INT 4
3540: DOUBLE
3541: LESSEQUAL
3542: IFTRUE 3546
3544: GO 3559
3546: POP
// PlaceWeaponTurret ( ovs_bun1 , us_gatling_gun ) ; end ;
3547: LD_INT 97
3549: PPUSH
3550: LD_INT 4
3552: PPUSH
3553: CALL_OW 431
3557: GO 3560
3559: POP
// end ;
3560: LD_VAR 0 1
3564: RET
// function PrepareTerminal ; begin
3565: LD_INT 0
3567: PPUSH
// uc_side = 1 ;
3568: LD_ADDR_OWVAR 20
3572: PUSH
3573: LD_INT 1
3575: ST_TO_ADDR
// uc_nation = nation_american ;
3576: LD_ADDR_OWVAR 21
3580: PUSH
3581: LD_INT 1
3583: ST_TO_ADDR
// terminalBase := Nef_PrepareBase ( terminal , terminalBaseArea , terminal , enemySkillLevel , [ 100 , 50 , 0 ] , 1 , [ 2 , 1 , 0 , 0 ] ) ;
3584: LD_ADDR_EXP 60
3588: PUSH
3589: LD_INT 168
3591: PPUSH
3592: LD_INT 4
3594: PPUSH
3595: LD_STRING terminal
3597: PPUSH
3598: LD_EXP 34
3602: PPUSH
3603: LD_INT 100
3605: PUSH
3606: LD_INT 50
3608: PUSH
3609: LD_INT 0
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: PPUSH
3617: LD_INT 1
3619: PPUSH
3620: LD_INT 2
3622: PUSH
3623: LD_INT 1
3625: PUSH
3626: LD_INT 0
3628: PUSH
3629: LD_INT 0
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL 12686 0 7
3642: ST_TO_ADDR
// end ;
3643: LD_VAR 0 1
3647: RET
// function PrepareMainAmericanBase ; begin
3648: LD_INT 0
3650: PPUSH
// uc_side = 1 ;
3651: LD_ADDR_OWVAR 20
3655: PUSH
3656: LD_INT 1
3658: ST_TO_ADDR
// uc_nation = nation_american ;
3659: LD_ADDR_OWVAR 21
3663: PUSH
3664: LD_INT 1
3666: ST_TO_ADDR
// if fastBreakthrough then
3667: LD_EXP 3
3671: IFFALSE 3680
// RemoveUnit ( ovs_bun2 ) ;
3673: LD_INT 229
3675: PPUSH
3676: CALL_OW 64
// headAmBase := Nef_PrepareBase ( headamdepot , HeadAmericanBaseArea ,  , enemySkillLevel , [ 3000 , 1000 , 0 ] , 1 , [ 9 , 3 , 6 , 2 ] ) ;
3680: LD_ADDR_EXP 61
3684: PUSH
3685: LD_INT 106
3687: PPUSH
3688: LD_INT 5
3690: PPUSH
3691: LD_STRING 
3693: PPUSH
3694: LD_EXP 34
3698: PPUSH
3699: LD_INT 3000
3701: PUSH
3702: LD_INT 1000
3704: PUSH
3705: LD_INT 0
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: LIST
3712: PPUSH
3713: LD_INT 1
3715: PPUSH
3716: LD_INT 9
3718: PUSH
3719: LD_INT 3
3721: PUSH
3722: LD_INT 6
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: PPUSH
3734: CALL 12686 0 7
3738: ST_TO_ADDR
// VanHouten = PrepareUnitExt ( VanHouten , false , class_soldier ) ;
3739: LD_ADDR_EXP 58
3743: PUSH
3744: LD_STRING VanHouten
3746: PPUSH
3747: LD_INT 0
3749: PPUSH
3750: LD_INT 1
3752: PPUSH
3753: CALL 11785 0 3
3757: ST_TO_ADDR
// headAmBase = headAmBase ^ VanHouten ;
3758: LD_ADDR_EXP 61
3762: PUSH
3763: LD_EXP 61
3767: PUSH
3768: LD_EXP 58
3772: ADD
3773: ST_TO_ADDR
// PlaceUnitXYR ( VanHouten , 35 , 57 , 3 , false ) ;
3774: LD_EXP 58
3778: PPUSH
3779: LD_INT 35
3781: PPUSH
3782: LD_INT 57
3784: PPUSH
3785: LD_INT 3
3787: PPUSH
3788: LD_INT 0
3790: PPUSH
3791: CALL_OW 50
// end ;
3795: LD_VAR 0 1
3799: RET
// export function PrepareTrap ; var i , un , nearEnemyUnit ; begin
3800: LD_INT 0
3802: PPUSH
3803: PPUSH
3804: PPUSH
3805: PPUSH
// uc_side = 1 ;
3806: LD_ADDR_OWVAR 20
3810: PUSH
3811: LD_INT 1
3813: ST_TO_ADDR
// uc_nation = nation_american ;
3814: LD_ADDR_OWVAR 21
3818: PUSH
3819: LD_INT 1
3821: ST_TO_ADDR
// for i := 1 to trapAmount do
3822: LD_ADDR_VAR 0 2
3826: PUSH
3827: DOUBLE
3828: LD_INT 1
3830: DEC
3831: ST_TO_ADDR
3832: LD_EXP 37
3836: PUSH
3837: FOR_TO
3838: IFFALSE 3972
// begin PrepareSoldier ( false , enemySkillLevel ) ;
3840: LD_INT 0
3842: PPUSH
3843: LD_EXP 34
3847: PPUSH
3848: CALL_OW 381
// un = CreateHuman ;
3852: LD_ADDR_VAR 0 3
3856: PUSH
3857: CALL_OW 44
3861: ST_TO_ADDR
// trapTeam = trapTeam ^ un ;
3862: LD_ADDR_EXP 62
3866: PUSH
3867: LD_EXP 62
3871: PUSH
3872: LD_VAR 0 3
3876: ADD
3877: ST_TO_ADDR
// PlaceUnitArea ( un , TrapSpawnArea , false ) ;
3878: LD_VAR 0 3
3882: PPUSH
3883: LD_INT 11
3885: PPUSH
3886: LD_INT 0
3888: PPUSH
3889: CALL_OW 49
// nearEnemyUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] ] ) , un ) ;
3893: LD_ADDR_VAR 0 4
3897: PUSH
3898: LD_INT 22
3900: PUSH
3901: LD_INT 3
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: PUSH
3908: EMPTY
3909: LIST
3910: PPUSH
3911: CALL_OW 69
3915: PPUSH
3916: LD_VAR 0 3
3920: PPUSH
3921: CALL_OW 74
3925: ST_TO_ADDR
// ComAgressiveMove ( un , GetX ( nearEnemyUnit ) , GetY ( nearEnemyUnit ) ) ;
3926: LD_VAR 0 3
3930: PPUSH
3931: LD_VAR 0 4
3935: PPUSH
3936: CALL_OW 250
3940: PPUSH
3941: LD_VAR 0 4
3945: PPUSH
3946: CALL_OW 251
3950: PPUSH
3951: CALL_OW 114
// AddComAgressiveMove ( un , 106 , 124 ) ;
3955: LD_VAR 0 3
3959: PPUSH
3960: LD_INT 106
3962: PPUSH
3963: LD_INT 124
3965: PPUSH
3966: CALL_OW 174
// end ;
3970: GO 3837
3972: POP
3973: POP
// end ;
3974: LD_VAR 0 1
3978: RET
// export function PrepareSoldiersInBunkers ; begin
3979: LD_INT 0
3981: PPUSH
// PrepareSolBun ( enemySkilLLevel , non_bun1 ) ;
3982: LD_EXP 34
3986: PPUSH
3987: LD_INT 236
3989: PPUSH
3990: CALL 15230 0 2
// PrepareSolBun ( enemySkilLLevel , non_bun2 ) ;
3994: LD_EXP 34
3998: PPUSH
3999: LD_INT 240
4001: PPUSH
4002: CALL 15230 0 2
// PrepareSolBun ( enemySkilLLevel , non_bun3 ) ;
4006: LD_EXP 34
4010: PPUSH
4011: LD_INT 243
4013: PPUSH
4014: CALL 15230 0 2
// end ;
4018: LD_VAR 0 1
4022: RET
// export function PrepareConvoy ; var i , un , veh ; begin
4023: LD_INT 0
4025: PPUSH
4026: PPUSH
4027: PPUSH
4028: PPUSH
// convoyTeam = [ ] ;
4029: LD_ADDR_EXP 63
4033: PUSH
4034: EMPTY
4035: ST_TO_ADDR
// uc_side = 1 ;
4036: LD_ADDR_OWVAR 20
4040: PUSH
4041: LD_INT 1
4043: ST_TO_ADDR
// uc_nation = nation_american ;
4044: LD_ADDR_OWVAR 21
4048: PUSH
4049: LD_INT 1
4051: ST_TO_ADDR
// for i := 1 to 2 do
4052: LD_ADDR_VAR 0 2
4056: PUSH
4057: DOUBLE
4058: LD_INT 1
4060: DEC
4061: ST_TO_ADDR
4062: LD_INT 2
4064: PUSH
4065: FOR_TO
4066: IFFALSE 4197
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
4068: LD_INT 3
4070: PPUSH
4071: LD_INT 1
4073: PPUSH
4074: LD_INT 1
4076: PPUSH
4077: LD_INT 12
4079: PPUSH
4080: LD_INT 80
4082: PPUSH
4083: CALL 46885 0 5
// veh = CreateVehicle ;
4087: LD_ADDR_VAR 0 4
4091: PUSH
4092: CALL_OW 45
4096: ST_TO_ADDR
// AddCargo ( veh , mat_cans , 100 ) ;
4097: LD_VAR 0 4
4101: PPUSH
4102: LD_INT 1
4104: PPUSH
4105: LD_INT 100
4107: PPUSH
4108: CALL_OW 291
// convoyTeam = convoyTeam ^ veh ;
4112: LD_ADDR_EXP 63
4116: PUSH
4117: LD_EXP 63
4121: PUSH
4122: LD_VAR 0 4
4126: ADD
4127: ST_TO_ADDR
// PlaceUnitArea ( veh , AmericanSpawnArea1 , false ) ;
4128: LD_VAR 0 4
4132: PPUSH
4133: LD_INT 8
4135: PPUSH
4136: LD_INT 0
4138: PPUSH
4139: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
4143: LD_INT 0
4145: PPUSH
4146: LD_EXP 34
4150: PPUSH
4151: CALL_OW 383
// un = CreateHuman ;
4155: LD_ADDR_VAR 0 3
4159: PUSH
4160: CALL_OW 44
4164: ST_TO_ADDR
// convoyTeam = convoyTeam ^ un ;
4165: LD_ADDR_EXP 63
4169: PUSH
4170: LD_EXP 63
4174: PUSH
4175: LD_VAR 0 3
4179: ADD
4180: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4181: LD_VAR 0 3
4185: PPUSH
4186: LD_VAR 0 4
4190: PPUSH
4191: CALL_OW 52
// end ;
4195: GO 4065
4197: POP
4198: POP
// end ;
4199: LD_VAR 0 1
4203: RET
// export function PrepareAttack ; var i , un , veh ; begin
4204: LD_INT 0
4206: PPUSH
4207: PPUSH
4208: PPUSH
4209: PPUSH
// uc_side = 1 ;
4210: LD_ADDR_OWVAR 20
4214: PUSH
4215: LD_INT 1
4217: ST_TO_ADDR
// uc_nation = nation_american ;
4218: LD_ADDR_OWVAR 21
4222: PUSH
4223: LD_INT 1
4225: ST_TO_ADDR
// for i := 1 to 4 do
4226: LD_ADDR_VAR 0 2
4230: PUSH
4231: DOUBLE
4232: LD_INT 1
4234: DEC
4235: ST_TO_ADDR
4236: LD_INT 4
4238: PUSH
4239: FOR_TO
4240: IFFALSE 4379
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_light_gun , us_double_gun , us_gatling_gun ] [ Rand ( 1 , 3 ) ] , 80 ) ;
4242: LD_INT 3
4244: PPUSH
4245: LD_INT 1
4247: PPUSH
4248: LD_INT 1
4250: PPUSH
4251: LD_INT 3
4253: PUSH
4254: LD_INT 5
4256: PUSH
4257: LD_INT 4
4259: PUSH
4260: EMPTY
4261: LIST
4262: LIST
4263: LIST
4264: PUSH
4265: LD_INT 1
4267: PPUSH
4268: LD_INT 3
4270: PPUSH
4271: CALL_OW 12
4275: ARRAY
4276: PPUSH
4277: LD_INT 80
4279: PPUSH
4280: CALL 46885 0 5
// veh = CreateVehicle ;
4284: LD_ADDR_VAR 0 4
4288: PUSH
4289: CALL_OW 45
4293: ST_TO_ADDR
// attackTeam = attackTeam ^ veh ;
4294: LD_ADDR_EXP 64
4298: PUSH
4299: LD_EXP 64
4303: PUSH
4304: LD_VAR 0 4
4308: ADD
4309: ST_TO_ADDR
// PlaceUnitArea ( veh , AmericanSpawnArea2 , false ) ;
4310: LD_VAR 0 4
4314: PPUSH
4315: LD_INT 17
4317: PPUSH
4318: LD_INT 0
4320: PPUSH
4321: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
4325: LD_INT 0
4327: PPUSH
4328: LD_EXP 34
4332: PPUSH
4333: CALL_OW 383
// un = CreateHuman ;
4337: LD_ADDR_VAR 0 3
4341: PUSH
4342: CALL_OW 44
4346: ST_TO_ADDR
// attackTeam = attackTeam ^ un ;
4347: LD_ADDR_EXP 64
4351: PUSH
4352: LD_EXP 64
4356: PUSH
4357: LD_VAR 0 3
4361: ADD
4362: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4363: LD_VAR 0 3
4367: PPUSH
4368: LD_VAR 0 4
4372: PPUSH
4373: CALL_OW 52
// end ;
4377: GO 4239
4379: POP
4380: POP
// for i := 1 to 3 do
4381: LD_ADDR_VAR 0 2
4385: PUSH
4386: DOUBLE
4387: LD_INT 1
4389: DEC
4390: ST_TO_ADDR
4391: LD_INT 3
4393: PUSH
4394: FOR_TO
4395: IFFALSE 4452
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4397: LD_INT 0
4399: PPUSH
4400: LD_EXP 34
4404: PPUSH
4405: CALL_OW 381
// un = CreateHuman ;
4409: LD_ADDR_VAR 0 3
4413: PUSH
4414: CALL_OW 44
4418: ST_TO_ADDR
// attackTeam = attackTeam ^ un ;
4419: LD_ADDR_EXP 64
4423: PUSH
4424: LD_EXP 64
4428: PUSH
4429: LD_VAR 0 3
4433: ADD
4434: ST_TO_ADDR
// PlaceUnitArea ( un , AmericanSpawnArea2 , false ) ;
4435: LD_VAR 0 3
4439: PPUSH
4440: LD_INT 17
4442: PPUSH
4443: LD_INT 0
4445: PPUSH
4446: CALL_OW 49
// end ;
4450: GO 4394
4452: POP
4453: POP
// end ; end_of_file
4454: LD_VAR 0 1
4458: RET
// export function Nef_PrepareNature ; var i , un ; begin
4459: LD_INT 0
4461: PPUSH
4462: PPUSH
4463: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
4464: LD_ADDR_VAR 0 2
4468: PUSH
4469: DOUBLE
4470: LD_INT 1
4472: DEC
4473: ST_TO_ADDR
4474: LD_EXP 28
4478: PUSH
4479: LD_INT 1
4481: ARRAY
4482: PUSH
4483: FOR_TO
4484: IFFALSE 4594
// begin uc_side = 0 ;
4486: LD_ADDR_OWVAR 20
4490: PUSH
4491: LD_INT 0
4493: ST_TO_ADDR
// uc_nation = nation_nature ;
4494: LD_ADDR_OWVAR 21
4498: PUSH
4499: LD_INT 0
4501: ST_TO_ADDR
// hc_class = class_apeman ;
4502: LD_ADDR_OWVAR 28
4506: PUSH
4507: LD_INT 12
4509: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4510: LD_ADDR_OWVAR 31
4514: PUSH
4515: LD_EXP 29
4519: PUSH
4520: LD_INT 1
4522: ARRAY
4523: PUSH
4524: LD_EXP 29
4528: PUSH
4529: LD_INT 2
4531: ARRAY
4532: PUSH
4533: LD_EXP 29
4537: PUSH
4538: LD_INT 3
4540: ARRAY
4541: PUSH
4542: LD_EXP 29
4546: PUSH
4547: LD_INT 4
4549: ARRAY
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4557: LD_ADDR_OWVAR 35
4561: PUSH
4562: LD_EXP 30
4566: ST_TO_ADDR
// un = CreateHuman ;
4567: LD_ADDR_VAR 0 3
4571: PUSH
4572: CALL_OW 44
4576: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4577: LD_VAR 0 3
4581: PPUSH
4582: LD_INT 2
4584: PPUSH
4585: LD_INT 0
4587: PPUSH
4588: CALL_OW 49
// end ;
4592: GO 4483
4594: POP
4595: POP
// for i := 1 to animalsAmount [ 2 ] do
4596: LD_ADDR_VAR 0 2
4600: PUSH
4601: DOUBLE
4602: LD_INT 1
4604: DEC
4605: ST_TO_ADDR
4606: LD_EXP 28
4610: PUSH
4611: LD_INT 2
4613: ARRAY
4614: PUSH
4615: FOR_TO
4616: IFFALSE 4726
// begin uc_side = 0 ;
4618: LD_ADDR_OWVAR 20
4622: PUSH
4623: LD_INT 0
4625: ST_TO_ADDR
// uc_nation = nation_nature ;
4626: LD_ADDR_OWVAR 21
4630: PUSH
4631: LD_INT 0
4633: ST_TO_ADDR
// hc_class = class_phororhacos ;
4634: LD_ADDR_OWVAR 28
4638: PUSH
4639: LD_INT 18
4641: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4642: LD_ADDR_OWVAR 31
4646: PUSH
4647: LD_EXP 29
4651: PUSH
4652: LD_INT 1
4654: ARRAY
4655: PUSH
4656: LD_EXP 29
4660: PUSH
4661: LD_INT 2
4663: ARRAY
4664: PUSH
4665: LD_EXP 29
4669: PUSH
4670: LD_INT 3
4672: ARRAY
4673: PUSH
4674: LD_EXP 29
4678: PUSH
4679: LD_INT 4
4681: ARRAY
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4689: LD_ADDR_OWVAR 35
4693: PUSH
4694: LD_EXP 30
4698: ST_TO_ADDR
// un = CreateHuman ;
4699: LD_ADDR_VAR 0 3
4703: PUSH
4704: CALL_OW 44
4708: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4709: LD_VAR 0 3
4713: PPUSH
4714: LD_INT 2
4716: PPUSH
4717: LD_INT 0
4719: PPUSH
4720: CALL_OW 49
// end ;
4724: GO 4615
4726: POP
4727: POP
// for i := 1 to animalsAmount [ 3 ] do
4728: LD_ADDR_VAR 0 2
4732: PUSH
4733: DOUBLE
4734: LD_INT 1
4736: DEC
4737: ST_TO_ADDR
4738: LD_EXP 28
4742: PUSH
4743: LD_INT 3
4745: ARRAY
4746: PUSH
4747: FOR_TO
4748: IFFALSE 4858
// begin uc_side = 0 ;
4750: LD_ADDR_OWVAR 20
4754: PUSH
4755: LD_INT 0
4757: ST_TO_ADDR
// uc_nation = nation_nature ;
4758: LD_ADDR_OWVAR 21
4762: PUSH
4763: LD_INT 0
4765: ST_TO_ADDR
// hc_class = class_tiger ;
4766: LD_ADDR_OWVAR 28
4770: PUSH
4771: LD_INT 14
4773: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4774: LD_ADDR_OWVAR 31
4778: PUSH
4779: LD_EXP 29
4783: PUSH
4784: LD_INT 1
4786: ARRAY
4787: PUSH
4788: LD_EXP 29
4792: PUSH
4793: LD_INT 2
4795: ARRAY
4796: PUSH
4797: LD_EXP 29
4801: PUSH
4802: LD_INT 3
4804: ARRAY
4805: PUSH
4806: LD_EXP 29
4810: PUSH
4811: LD_INT 4
4813: ARRAY
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4821: LD_ADDR_OWVAR 35
4825: PUSH
4826: LD_EXP 30
4830: ST_TO_ADDR
// un = CreateHuman ;
4831: LD_ADDR_VAR 0 3
4835: PUSH
4836: CALL_OW 44
4840: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4841: LD_VAR 0 3
4845: PPUSH
4846: LD_INT 2
4848: PPUSH
4849: LD_INT 0
4851: PPUSH
4852: CALL_OW 49
// end ;
4856: GO 4747
4858: POP
4859: POP
// for i := 1 to animalsAmount [ 4 ] do
4860: LD_ADDR_VAR 0 2
4864: PUSH
4865: DOUBLE
4866: LD_INT 1
4868: DEC
4869: ST_TO_ADDR
4870: LD_EXP 28
4874: PUSH
4875: LD_INT 4
4877: ARRAY
4878: PUSH
4879: FOR_TO
4880: IFFALSE 4990
// begin uc_side = 0 ;
4882: LD_ADDR_OWVAR 20
4886: PUSH
4887: LD_INT 0
4889: ST_TO_ADDR
// uc_nation = nation_nature ;
4890: LD_ADDR_OWVAR 21
4894: PUSH
4895: LD_INT 0
4897: ST_TO_ADDR
// hc_class = 21 ;
4898: LD_ADDR_OWVAR 28
4902: PUSH
4903: LD_INT 21
4905: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4906: LD_ADDR_OWVAR 31
4910: PUSH
4911: LD_EXP 29
4915: PUSH
4916: LD_INT 1
4918: ARRAY
4919: PUSH
4920: LD_EXP 29
4924: PUSH
4925: LD_INT 2
4927: ARRAY
4928: PUSH
4929: LD_EXP 29
4933: PUSH
4934: LD_INT 3
4936: ARRAY
4937: PUSH
4938: LD_EXP 29
4942: PUSH
4943: LD_INT 4
4945: ARRAY
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4953: LD_ADDR_OWVAR 35
4957: PUSH
4958: LD_EXP 30
4962: ST_TO_ADDR
// un = CreateHuman ;
4963: LD_ADDR_VAR 0 3
4967: PUSH
4968: CALL_OW 44
4972: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4973: LD_VAR 0 3
4977: PPUSH
4978: LD_INT 2
4980: PPUSH
4981: LD_INT 0
4983: PPUSH
4984: CALL_OW 49
// end ;
4988: GO 4879
4990: POP
4991: POP
// for i := 1 to animalsAmount [ 5 ] do
4992: LD_ADDR_VAR 0 2
4996: PUSH
4997: DOUBLE
4998: LD_INT 1
5000: DEC
5001: ST_TO_ADDR
5002: LD_EXP 28
5006: PUSH
5007: LD_INT 5
5009: ARRAY
5010: PUSH
5011: FOR_TO
5012: IFFALSE 5073
// begin uc_side = 0 ;
5014: LD_ADDR_OWVAR 20
5018: PUSH
5019: LD_INT 0
5021: ST_TO_ADDR
// uc_nation = nation_nature ;
5022: LD_ADDR_OWVAR 21
5026: PUSH
5027: LD_INT 0
5029: ST_TO_ADDR
// vc_chassis := 31 ;
5030: LD_ADDR_OWVAR 37
5034: PUSH
5035: LD_INT 31
5037: ST_TO_ADDR
// vc_control := control_rider ;
5038: LD_ADDR_OWVAR 38
5042: PUSH
5043: LD_INT 4
5045: ST_TO_ADDR
// un := CreateVehicle ;
5046: LD_ADDR_VAR 0 3
5050: PUSH
5051: CALL_OW 45
5055: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
5056: LD_VAR 0 3
5060: PPUSH
5061: LD_INT 2
5063: PPUSH
5064: LD_INT 0
5066: PPUSH
5067: CALL_OW 49
// end ;
5071: GO 5011
5073: POP
5074: POP
// end ; end_of_file
5075: LD_VAR 0 1
5079: RET
// every 0 0$1 do
5080: GO 5082
5082: DISABLE
// InitAIManager ( 1 , 2 , UnitFilter ( ovsyenkoBase , [ f_type , unit_human ] ) , OvsyenkoBaseArea , OvsyenkoHealArea , false , false , 0 , 0 , 0 , 0 , 0 ) ;
5083: LD_INT 1
5085: PPUSH
5086: LD_INT 2
5088: PPUSH
5089: LD_EXP 59
5093: PPUSH
5094: LD_INT 21
5096: PUSH
5097: LD_INT 1
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PPUSH
5104: CALL_OW 72
5108: PPUSH
5109: LD_INT 3
5111: PPUSH
5112: LD_INT 6
5114: PPUSH
5115: LD_INT 0
5117: PPUSH
5118: LD_INT 0
5120: PPUSH
5121: LD_INT 0
5123: PPUSH
5124: LD_INT 0
5126: PPUSH
5127: LD_INT 0
5129: PPUSH
5130: LD_INT 0
5132: PPUSH
5133: LD_INT 0
5135: PPUSH
5136: CALL 5248 0 12
5140: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_weapon , us_bulldozer ] ] ) do var unit ;
5141: LD_INT 22
5143: PUSH
5144: LD_INT 1
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: LD_INT 50
5153: PUSH
5154: EMPTY
5155: LIST
5156: PUSH
5157: LD_INT 34
5159: PUSH
5160: LD_INT 14
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: LIST
5171: PPUSH
5172: CALL_OW 69
5176: IFFALSE 5245
5178: GO 5180
5180: DISABLE
5181: LD_INT 0
5183: PPUSH
// begin enable ;
5184: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_weapon , us_bulldozer ] ] ) do
5185: LD_ADDR_VAR 0 1
5189: PUSH
5190: LD_INT 22
5192: PUSH
5193: LD_INT 1
5195: PUSH
5196: EMPTY
5197: LIST
5198: LIST
5199: PUSH
5200: LD_INT 50
5202: PUSH
5203: EMPTY
5204: LIST
5205: PUSH
5206: LD_INT 34
5208: PUSH
5209: LD_INT 14
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: LIST
5220: PPUSH
5221: CALL_OW 69
5225: PUSH
5226: FOR_IN
5227: IFFALSE 5243
// CutTreeInArea ( unit , TreeArea ) ;
5229: LD_VAR 0 1
5233: PPUSH
5234: LD_INT 18
5236: PPUSH
5237: CALL 15087 0 2
5241: GO 5226
5243: POP
5244: POP
// end ;
5245: PPOPN 1
5247: END
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , repairArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack , canRebuild ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , offensiveUnits , offensiveReadyCounter , target1 , target2 , defenceUnits , weapons , chassis , baseBuildings , destroyedBuildings , destroyedBuilding , constructedBuilding , constructedBuildings , depot , factory , lab , bunkers , barracks , controlTowers , attackBuildings , enemyBuildings , damageBuilding , damageUnit , emptyBunkers , enemyUnits ; begin
5248: LD_INT 0
5250: PPUSH
5251: PPUSH
5252: PPUSH
5253: PPUSH
5254: PPUSH
5255: PPUSH
5256: PPUSH
5257: PPUSH
5258: PPUSH
5259: PPUSH
5260: PPUSH
5261: PPUSH
5262: PPUSH
5263: PPUSH
5264: PPUSH
5265: PPUSH
5266: PPUSH
5267: PPUSH
5268: PPUSH
5269: PPUSH
5270: PPUSH
5271: PPUSH
5272: PPUSH
5273: PPUSH
5274: PPUSH
5275: PPUSH
5276: PPUSH
5277: PPUSH
5278: PPUSH
5279: PPUSH
5280: PPUSH
5281: PPUSH
5282: PPUSH
5283: PPUSH
5284: PPUSH
5285: PPUSH
5286: PPUSH
5287: PPUSH
// personel = [ ] ;
5288: LD_ADDR_VAR 0 19
5292: PUSH
5293: EMPTY
5294: ST_TO_ADDR
// vehicles = [ ] ;
5295: LD_ADDR_VAR 0 25
5299: PUSH
5300: EMPTY
5301: ST_TO_ADDR
// destroyedBuildings = [ ] ;
5302: LD_ADDR_VAR 0 35
5306: PUSH
5307: EMPTY
5308: ST_TO_ADDR
// for unit in basePersonel do
5309: LD_ADDR_VAR 0 18
5313: PUSH
5314: LD_VAR 0 3
5318: PUSH
5319: FOR_IN
5320: IFFALSE 5340
// personel = personel ^ unit ;
5322: LD_ADDR_VAR 0 19
5326: PUSH
5327: LD_VAR 0 19
5331: PUSH
5332: LD_VAR 0 18
5336: ADD
5337: ST_TO_ADDR
5338: GO 5319
5340: POP
5341: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ] ] ) do
5342: LD_ADDR_VAR 0 24
5346: PUSH
5347: LD_VAR 0 4
5351: PPUSH
5352: LD_INT 22
5354: PUSH
5355: LD_VAR 0 1
5359: PUSH
5360: EMPTY
5361: LIST
5362: LIST
5363: PUSH
5364: LD_INT 21
5366: PUSH
5367: LD_INT 2
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: PUSH
5374: LD_INT 50
5376: PUSH
5377: EMPTY
5378: LIST
5379: PUSH
5380: LD_INT 3
5382: PUSH
5383: LD_INT 2
5385: PUSH
5386: LD_INT 34
5388: PUSH
5389: LD_INT 12
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: PUSH
5396: LD_INT 34
5398: PUSH
5399: LD_INT 51
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PUSH
5406: LD_INT 34
5408: PUSH
5409: LD_INT 32
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: PUSH
5416: LD_INT 34
5418: PUSH
5419: LD_INT 31
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: PUSH
5426: EMPTY
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: PPUSH
5443: CALL_OW 70
5447: PUSH
5448: FOR_IN
5449: IFFALSE 5469
// vehicles = vehicles ^ vehicle ;
5451: LD_ADDR_VAR 0 25
5455: PUSH
5456: LD_VAR 0 25
5460: PUSH
5461: LD_VAR 0 24
5465: ADD
5466: ST_TO_ADDR
5467: GO 5448
5469: POP
5470: POP
// repeat soldiers = [ ] ;
5471: LD_ADDR_VAR 0 20
5475: PUSH
5476: EMPTY
5477: ST_TO_ADDR
// engineers = [ ] ;
5478: LD_ADDR_VAR 0 21
5482: PUSH
5483: EMPTY
5484: ST_TO_ADDR
// mechanics = [ ] ;
5485: LD_ADDR_VAR 0 22
5489: PUSH
5490: EMPTY
5491: ST_TO_ADDR
// scientists = [ ] ;
5492: LD_ADDR_VAR 0 23
5496: PUSH
5497: EMPTY
5498: ST_TO_ADDR
// baseBuildings = [ ] ;
5499: LD_ADDR_VAR 0 34
5503: PUSH
5504: EMPTY
5505: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5506: LD_ADDR_VAR 0 39
5510: PUSH
5511: LD_VAR 0 4
5515: PPUSH
5516: LD_INT 22
5518: PUSH
5519: LD_VAR 0 1
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: PUSH
5528: LD_INT 21
5530: PUSH
5531: LD_INT 3
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: PUSH
5538: LD_INT 50
5540: PUSH
5541: EMPTY
5542: LIST
5543: PUSH
5544: LD_INT 2
5546: PUSH
5547: LD_INT 30
5549: PUSH
5550: LD_INT 0
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: PUSH
5557: LD_INT 30
5559: PUSH
5560: LD_INT 1
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: LIST
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: PPUSH
5578: CALL_OW 70
5582: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
5583: LD_ADDR_VAR 0 40
5587: PUSH
5588: LD_VAR 0 4
5592: PPUSH
5593: LD_INT 22
5595: PUSH
5596: LD_VAR 0 1
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: LD_INT 21
5607: PUSH
5608: LD_INT 3
5610: PUSH
5611: EMPTY
5612: LIST
5613: LIST
5614: PUSH
5615: LD_INT 50
5617: PUSH
5618: EMPTY
5619: LIST
5620: PUSH
5621: LD_INT 2
5623: PUSH
5624: LD_INT 30
5626: PUSH
5627: LD_INT 2
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: PUSH
5634: LD_INT 30
5636: PUSH
5637: LD_INT 3
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: LIST
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: PPUSH
5655: CALL_OW 70
5659: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5660: LD_ADDR_VAR 0 41
5664: PUSH
5665: LD_VAR 0 4
5669: PPUSH
5670: LD_INT 22
5672: PUSH
5673: LD_VAR 0 1
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: LD_INT 21
5684: PUSH
5685: LD_INT 3
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: PUSH
5692: LD_INT 50
5694: PUSH
5695: EMPTY
5696: LIST
5697: PUSH
5698: LD_INT 2
5700: PUSH
5701: LD_INT 30
5703: PUSH
5704: LD_INT 6
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: PUSH
5711: LD_INT 30
5713: PUSH
5714: LD_INT 7
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: PUSH
5721: LD_INT 30
5723: PUSH
5724: LD_INT 8
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: PUSH
5737: EMPTY
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: PPUSH
5743: CALL_OW 70
5747: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
5748: LD_ADDR_VAR 0 42
5752: PUSH
5753: LD_VAR 0 4
5757: PPUSH
5758: LD_INT 22
5760: PUSH
5761: LD_VAR 0 1
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: LD_INT 21
5772: PUSH
5773: LD_INT 3
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PUSH
5780: LD_INT 50
5782: PUSH
5783: EMPTY
5784: LIST
5785: PUSH
5786: LD_INT 2
5788: PUSH
5789: LD_INT 30
5791: PUSH
5792: LD_INT 31
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: LD_INT 30
5801: PUSH
5802: LD_INT 32
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: LIST
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: LIST
5818: LIST
5819: PPUSH
5820: CALL_OW 70
5824: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
5825: LD_ADDR_VAR 0 43
5829: PUSH
5830: LD_VAR 0 4
5834: PPUSH
5835: LD_INT 22
5837: PUSH
5838: LD_VAR 0 1
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PUSH
5847: LD_INT 21
5849: PUSH
5850: LD_INT 3
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: PUSH
5857: LD_INT 50
5859: PUSH
5860: EMPTY
5861: LIST
5862: PUSH
5863: LD_INT 2
5865: PUSH
5866: LD_INT 30
5868: PUSH
5869: LD_INT 4
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: PUSH
5876: LD_INT 30
5878: PUSH
5879: LD_INT 5
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: LIST
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: PPUSH
5897: CALL_OW 70
5901: ST_TO_ADDR
// controlTowers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_vehicle ] ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5902: LD_ADDR_VAR 0 44
5906: PUSH
5907: LD_VAR 0 4
5911: PPUSH
5912: LD_INT 22
5914: PUSH
5915: LD_VAR 0 1
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: PUSH
5924: LD_INT 50
5926: PUSH
5927: EMPTY
5928: LIST
5929: PUSH
5930: LD_INT 2
5932: PUSH
5933: LD_INT 21
5935: PUSH
5936: LD_INT 3
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: PUSH
5943: LD_INT 21
5945: PUSH
5946: LD_INT 2
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: LIST
5957: PUSH
5958: LD_INT 2
5960: PUSH
5961: LD_INT 30
5963: PUSH
5964: LD_INT 36
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: PUSH
5971: LD_INT 34
5973: PUSH
5974: LD_INT 31
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: LIST
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: PPUSH
5992: CALL_OW 70
5996: ST_TO_ADDR
// constructedBuildings = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] ] ) ;
5997: LD_ADDR_VAR 0 38
6001: PUSH
6002: LD_VAR 0 4
6006: PPUSH
6007: LD_INT 22
6009: PUSH
6010: LD_VAR 0 1
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: PUSH
6019: LD_INT 21
6021: PUSH
6022: LD_INT 3
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: PUSH
6029: LD_INT 3
6031: PUSH
6032: LD_INT 57
6034: PUSH
6035: EMPTY
6036: LIST
6037: PUSH
6038: EMPTY
6039: LIST
6040: LIST
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: LIST
6046: PPUSH
6047: CALL_OW 70
6051: ST_TO_ADDR
// for i := 1 to personel do
6052: LD_ADDR_VAR 0 14
6056: PUSH
6057: DOUBLE
6058: LD_INT 1
6060: DEC
6061: ST_TO_ADDR
6062: LD_VAR 0 19
6066: PUSH
6067: FOR_TO
6068: IFFALSE 6236
// begin if GetLives ( personel [ i ] ) = 1000 then
6070: LD_VAR 0 19
6074: PUSH
6075: LD_VAR 0 14
6079: ARRAY
6080: PPUSH
6081: CALL_OW 256
6085: PUSH
6086: LD_INT 1000
6088: EQUAL
6089: IFFALSE 6111
// SetTag ( personel [ i ] , 1 ) else
6091: LD_VAR 0 19
6095: PUSH
6096: LD_VAR 0 14
6100: ARRAY
6101: PPUSH
6102: LD_INT 1
6104: PPUSH
6105: CALL_OW 109
6109: GO 6191
// if GetLives ( personel [ i ] ) <= 950 and GetLives ( personel [ i ] ) > 250 then
6111: LD_VAR 0 19
6115: PUSH
6116: LD_VAR 0 14
6120: ARRAY
6121: PPUSH
6122: CALL_OW 256
6126: PUSH
6127: LD_INT 950
6129: LESSEQUAL
6130: PUSH
6131: LD_VAR 0 19
6135: PUSH
6136: LD_VAR 0 14
6140: ARRAY
6141: PPUSH
6142: CALL_OW 256
6146: PUSH
6147: LD_INT 250
6149: GREATER
6150: AND
6151: IFFALSE 6191
// begin SetTag ( personel [ i ] , 0 ) ;
6153: LD_VAR 0 19
6157: PUSH
6158: LD_VAR 0 14
6162: ARRAY
6163: PPUSH
6164: LD_INT 0
6166: PPUSH
6167: CALL_OW 109
// ComMoveToArea ( personel [ i ] , healArea ) ;
6171: LD_VAR 0 19
6175: PUSH
6176: LD_VAR 0 14
6180: ARRAY
6181: PPUSH
6182: LD_VAR 0 5
6186: PPUSH
6187: CALL_OW 113
// end ; if GetLives ( personel [ i ] ) < 100 then
6191: LD_VAR 0 19
6195: PUSH
6196: LD_VAR 0 14
6200: ARRAY
6201: PPUSH
6202: CALL_OW 256
6206: PUSH
6207: LD_INT 100
6209: LESS
6210: IFFALSE 6234
// personel = personel diff personel [ i ] ;
6212: LD_ADDR_VAR 0 19
6216: PUSH
6217: LD_VAR 0 19
6221: PUSH
6222: LD_VAR 0 19
6226: PUSH
6227: LD_VAR 0 14
6231: ARRAY
6232: DIFF
6233: ST_TO_ADDR
// end ;
6234: GO 6067
6236: POP
6237: POP
// for i := 1 to vehicles do
6238: LD_ADDR_VAR 0 14
6242: PUSH
6243: DOUBLE
6244: LD_INT 1
6246: DEC
6247: ST_TO_ADDR
6248: LD_VAR 0 25
6252: PUSH
6253: FOR_TO
6254: IFFALSE 6616
// begin if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
6256: LD_VAR 0 25
6260: PUSH
6261: LD_VAR 0 14
6265: ARRAY
6266: PUSH
6267: LD_INT 1
6269: ARRAY
6270: PPUSH
6271: CALL_OW 256
6275: PUSH
6276: LD_INT 1000
6278: EQUAL
6279: IFFALSE 6443
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
6281: LD_VAR 0 25
6285: PUSH
6286: LD_VAR 0 14
6290: ARRAY
6291: PUSH
6292: LD_INT 1
6294: ARRAY
6295: PPUSH
6296: CALL_OW 263
6300: PUSH
6301: LD_INT 1
6303: EQUAL
6304: IFFALSE 6383
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) and IsOK ( vehicles [ i ] [ 2 ] ) then
6306: LD_VAR 0 25
6310: PUSH
6311: LD_VAR 0 14
6315: ARRAY
6316: PUSH
6317: LD_INT 2
6319: ARRAY
6320: PPUSH
6321: CALL_OW 310
6325: NOT
6326: PUSH
6327: LD_VAR 0 25
6331: PUSH
6332: LD_VAR 0 14
6336: ARRAY
6337: PUSH
6338: LD_INT 2
6340: ARRAY
6341: PPUSH
6342: CALL_OW 302
6346: AND
6347: IFFALSE 6383
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
6349: LD_VAR 0 25
6353: PUSH
6354: LD_VAR 0 14
6358: ARRAY
6359: PUSH
6360: LD_INT 2
6362: ARRAY
6363: PPUSH
6364: LD_VAR 0 25
6368: PUSH
6369: LD_VAR 0 14
6373: ARRAY
6374: PUSH
6375: LD_INT 1
6377: ARRAY
6378: PPUSH
6379: CALL_OW 120
// if offensiveUnits < vehiclesToAttackAmount then
6383: LD_VAR 0 27
6387: PUSH
6388: LD_VAR 0 10
6392: LESS
6393: IFFALSE 6419
// SetTag ( vehicles [ i ] [ 1 ] , 2 ) else
6395: LD_VAR 0 25
6399: PUSH
6400: LD_VAR 0 14
6404: ARRAY
6405: PUSH
6406: LD_INT 1
6408: ARRAY
6409: PPUSH
6410: LD_INT 2
6412: PPUSH
6413: CALL_OW 109
6417: GO 6441
// SetTag ( vehicles [ i ] [ 1 ] , 3 ) ;
6419: LD_VAR 0 25
6423: PUSH
6424: LD_VAR 0 14
6428: ARRAY
6429: PUSH
6430: LD_INT 1
6432: ARRAY
6433: PPUSH
6434: LD_INT 3
6436: PPUSH
6437: CALL_OW 109
// end else
6441: GO 6564
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 and GetLives ( vehicles [ i ] [ 1 ] ) > 250 and GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
6443: LD_VAR 0 25
6447: PUSH
6448: LD_VAR 0 14
6452: ARRAY
6453: PUSH
6454: LD_INT 1
6456: ARRAY
6457: PPUSH
6458: CALL_OW 256
6462: PUSH
6463: LD_INT 650
6465: LESSEQUAL
6466: PUSH
6467: LD_VAR 0 25
6471: PUSH
6472: LD_VAR 0 14
6476: ARRAY
6477: PUSH
6478: LD_INT 1
6480: ARRAY
6481: PPUSH
6482: CALL_OW 256
6486: PUSH
6487: LD_INT 250
6489: GREATER
6490: AND
6491: PUSH
6492: LD_VAR 0 25
6496: PUSH
6497: LD_VAR 0 14
6501: ARRAY
6502: PUSH
6503: LD_INT 1
6505: ARRAY
6506: PPUSH
6507: CALL_OW 263
6511: PUSH
6512: LD_INT 1
6514: EQUAL
6515: AND
6516: IFFALSE 6564
// begin SetTag ( vehicles [ i ] [ 1 ] , 0 ) ;
6518: LD_VAR 0 25
6522: PUSH
6523: LD_VAR 0 14
6527: ARRAY
6528: PUSH
6529: LD_INT 1
6531: ARRAY
6532: PPUSH
6533: LD_INT 0
6535: PPUSH
6536: CALL_OW 109
// ComMoveToArea ( vehicles [ i ] [ 1 ] , repairArea ) ;
6540: LD_VAR 0 25
6544: PUSH
6545: LD_VAR 0 14
6549: ARRAY
6550: PUSH
6551: LD_INT 1
6553: ARRAY
6554: PPUSH
6555: LD_VAR 0 6
6559: PPUSH
6560: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
6564: LD_VAR 0 25
6568: PUSH
6569: LD_VAR 0 14
6573: ARRAY
6574: PUSH
6575: LD_INT 1
6577: ARRAY
6578: PPUSH
6579: CALL_OW 256
6583: PUSH
6584: LD_INT 250
6586: LESS
6587: IFFALSE 6614
// begin vehicles = vehicles diff [ vehicles [ i ] ] ;
6589: LD_ADDR_VAR 0 25
6593: PUSH
6594: LD_VAR 0 25
6598: PUSH
6599: LD_VAR 0 25
6603: PUSH
6604: LD_VAR 0 14
6608: ARRAY
6609: PUSH
6610: EMPTY
6611: LIST
6612: DIFF
6613: ST_TO_ADDR
// end ; end ;
6614: GO 6253
6616: POP
6617: POP
// for i := 1 to personel do
6618: LD_ADDR_VAR 0 14
6622: PUSH
6623: DOUBLE
6624: LD_INT 1
6626: DEC
6627: ST_TO_ADDR
6628: LD_VAR 0 19
6632: PUSH
6633: FOR_TO
6634: IFFALSE 6685
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
6636: LD_ADDR_VAR 0 20
6640: PUSH
6641: LD_VAR 0 20
6645: PUSH
6646: LD_VAR 0 19
6650: PUSH
6651: LD_VAR 0 14
6655: ARRAY
6656: PPUSH
6657: LD_INT 25
6659: PUSH
6660: LD_INT 1
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: LD_INT 50
6669: PUSH
6670: EMPTY
6671: LIST
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PPUSH
6677: CALL_OW 72
6681: ADD
6682: ST_TO_ADDR
6683: GO 6633
6685: POP
6686: POP
// if soldiers and UnitFilter ( bunkers , [ f_empty ] ) then
6687: LD_VAR 0 20
6691: PUSH
6692: LD_VAR 0 42
6696: PPUSH
6697: LD_INT 58
6699: PUSH
6700: EMPTY
6701: LIST
6702: PPUSH
6703: CALL_OW 72
6707: AND
6708: IFFALSE 6966
// begin for i := 1 to soldiers do
6710: LD_ADDR_VAR 0 14
6714: PUSH
6715: DOUBLE
6716: LD_INT 1
6718: DEC
6719: ST_TO_ADDR
6720: LD_VAR 0 20
6724: PUSH
6725: FOR_TO
6726: IFFALSE 6962
// if GetTag ( soldiers [ i ] ) = 1 then
6728: LD_VAR 0 20
6732: PUSH
6733: LD_VAR 0 14
6737: ARRAY
6738: PPUSH
6739: CALL_OW 110
6743: PUSH
6744: LD_INT 1
6746: EQUAL
6747: IFFALSE 6960
// begin if GetTaskList ( soldiers [ i ] ) then
6749: LD_VAR 0 20
6753: PUSH
6754: LD_VAR 0 14
6758: ARRAY
6759: PPUSH
6760: CALL_OW 437
6764: IFFALSE 6853
// if GetTaskList ( soldiers [ i ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( soldiers [ i ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
6766: LD_VAR 0 20
6770: PUSH
6771: LD_VAR 0 14
6775: ARRAY
6776: PPUSH
6777: CALL_OW 437
6781: PUSH
6782: LD_INT 1
6784: ARRAY
6785: PUSH
6786: LD_INT 1
6788: ARRAY
6789: PUSH
6790: LD_STRING e
6792: EQUAL
6793: PUSH
6794: LD_VAR 0 20
6798: PUSH
6799: LD_VAR 0 14
6803: ARRAY
6804: PPUSH
6805: CALL_OW 437
6809: PUSH
6810: LD_INT 1
6812: ARRAY
6813: PUSH
6814: LD_INT 4
6816: ARRAY
6817: PPUSH
6818: CALL_OW 266
6822: PUSH
6823: LD_INT 4
6825: PUSH
6826: LD_INT 5
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: IN
6833: AND
6834: IFFALSE 6853
// SetTaskList ( soldiers [ i ] , [ ] ) ;
6836: LD_VAR 0 20
6840: PUSH
6841: LD_VAR 0 14
6845: ARRAY
6846: PPUSH
6847: EMPTY
6848: PPUSH
6849: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
6853: LD_ADDR_VAR 0 49
6857: PUSH
6858: LD_VAR 0 42
6862: PPUSH
6863: LD_INT 3
6865: PUSH
6866: LD_INT 59
6868: PUSH
6869: EMPTY
6870: LIST
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PPUSH
6876: CALL_OW 72
6880: PUSH
6881: FOR_IN
6882: IFFALSE 6958
// if not HasTask ( soldiers [ i ] ) and not GetBType ( IsInUnit ( soldiers [ i ] ) ) in [ b_breastwork , b_bunker ] then
6884: LD_VAR 0 20
6888: PUSH
6889: LD_VAR 0 14
6893: ARRAY
6894: PPUSH
6895: CALL_OW 314
6899: NOT
6900: PUSH
6901: LD_VAR 0 20
6905: PUSH
6906: LD_VAR 0 14
6910: ARRAY
6911: PPUSH
6912: CALL_OW 310
6916: PPUSH
6917: CALL_OW 266
6921: PUSH
6922: LD_INT 31
6924: PUSH
6925: LD_INT 32
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: IN
6932: NOT
6933: AND
6934: IFFALSE 6956
// ComEnterUnit ( soldiers [ i ] , emptyBunkers ) ;
6936: LD_VAR 0 20
6940: PUSH
6941: LD_VAR 0 14
6945: ARRAY
6946: PPUSH
6947: LD_VAR 0 49
6951: PPUSH
6952: CALL_OW 120
6956: GO 6881
6958: POP
6959: POP
// end ;
6960: GO 6725
6962: POP
6963: POP
// end else
6964: GO 7138
// if soldiers and barracks then
6966: LD_VAR 0 20
6970: PUSH
6971: LD_VAR 0 43
6975: AND
6976: IFFALSE 7098
// begin for i := 1 to soldiers do
6978: LD_ADDR_VAR 0 14
6982: PUSH
6983: DOUBLE
6984: LD_INT 1
6986: DEC
6987: ST_TO_ADDR
6988: LD_VAR 0 20
6992: PUSH
6993: FOR_TO
6994: IFFALSE 7094
// if GetTag ( soldiers [ i ] ) = 1 and UnitFilter ( soldiers [ i ] , [ f_outside ] ) and not HasTask ( soldiers [ i ] ) then
6996: LD_VAR 0 20
7000: PUSH
7001: LD_VAR 0 14
7005: ARRAY
7006: PPUSH
7007: CALL_OW 110
7011: PUSH
7012: LD_INT 1
7014: EQUAL
7015: PUSH
7016: LD_VAR 0 20
7020: PUSH
7021: LD_VAR 0 14
7025: ARRAY
7026: PPUSH
7027: LD_INT 56
7029: PUSH
7030: EMPTY
7031: LIST
7032: PPUSH
7033: CALL_OW 72
7037: AND
7038: PUSH
7039: LD_VAR 0 20
7043: PUSH
7044: LD_VAR 0 14
7048: ARRAY
7049: PPUSH
7050: CALL_OW 314
7054: NOT
7055: AND
7056: IFFALSE 7092
// ComEnterUnit ( soldiers [ i ] , barracks [ rand ( 1 , barracks ) ] ) ;
7058: LD_VAR 0 20
7062: PUSH
7063: LD_VAR 0 14
7067: ARRAY
7068: PPUSH
7069: LD_VAR 0 43
7073: PUSH
7074: LD_INT 1
7076: PPUSH
7077: LD_VAR 0 43
7081: PPUSH
7082: CALL_OW 12
7086: ARRAY
7087: PPUSH
7088: CALL_OW 120
7092: GO 6993
7094: POP
7095: POP
// end else
7096: GO 7138
// for i := 1 to soldiers do
7098: LD_ADDR_VAR 0 14
7102: PUSH
7103: DOUBLE
7104: LD_INT 1
7106: DEC
7107: ST_TO_ADDR
7108: LD_VAR 0 20
7112: PUSH
7113: FOR_TO
7114: IFFALSE 7136
// SetTag ( soldiers [ i ] , 3 ) ;
7116: LD_VAR 0 20
7120: PUSH
7121: LD_VAR 0 14
7125: ARRAY
7126: PPUSH
7127: LD_INT 3
7129: PPUSH
7130: CALL_OW 109
7134: GO 7113
7136: POP
7137: POP
// for i := 1 to personel do
7138: LD_ADDR_VAR 0 14
7142: PUSH
7143: DOUBLE
7144: LD_INT 1
7146: DEC
7147: ST_TO_ADDR
7148: LD_VAR 0 19
7152: PUSH
7153: FOR_TO
7154: IFFALSE 7195
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
7156: LD_ADDR_VAR 0 21
7160: PUSH
7161: LD_VAR 0 21
7165: PUSH
7166: LD_VAR 0 19
7170: PUSH
7171: LD_VAR 0 14
7175: ARRAY
7176: PPUSH
7177: LD_INT 25
7179: PUSH
7180: LD_INT 2
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PPUSH
7187: CALL_OW 72
7191: ADD
7192: ST_TO_ADDR
7193: GO 7153
7195: POP
7196: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
7197: LD_VAR 0 21
7201: PUSH
7202: LD_VAR 0 4
7206: PPUSH
7207: LD_INT 22
7209: PUSH
7210: LD_VAR 0 1
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PUSH
7219: LD_INT 21
7221: PUSH
7222: LD_INT 3
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: LD_INT 3
7231: PUSH
7232: LD_INT 24
7234: PUSH
7235: LD_INT 1000
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: LIST
7250: PPUSH
7251: CALL_OW 70
7255: AND
7256: IFFALSE 7484
// begin for i := 1 to engineers do
7258: LD_ADDR_VAR 0 14
7262: PUSH
7263: DOUBLE
7264: LD_INT 1
7266: DEC
7267: ST_TO_ADDR
7268: LD_VAR 0 21
7272: PUSH
7273: FOR_TO
7274: IFFALSE 7480
// if GetTag ( engineers [ i ] ) = 1 then
7276: LD_VAR 0 21
7280: PUSH
7281: LD_VAR 0 14
7285: ARRAY
7286: PPUSH
7287: CALL_OW 110
7291: PUSH
7292: LD_INT 1
7294: EQUAL
7295: IFFALSE 7478
// begin if GetTaskList ( engineers [ i ] ) then
7297: LD_VAR 0 21
7301: PUSH
7302: LD_VAR 0 14
7306: ARRAY
7307: PPUSH
7308: CALL_OW 437
7312: IFFALSE 7360
// if GetTaskList ( engineers [ i ] ) [ 1 ] [ 1 ] = e then
7314: LD_VAR 0 21
7318: PUSH
7319: LD_VAR 0 14
7323: ARRAY
7324: PPUSH
7325: CALL_OW 437
7329: PUSH
7330: LD_INT 1
7332: ARRAY
7333: PUSH
7334: LD_INT 1
7336: ARRAY
7337: PUSH
7338: LD_STRING e
7340: EQUAL
7341: IFFALSE 7360
// SetTaskList ( engineers [ i ] , [ ] ) ;
7343: LD_VAR 0 21
7347: PUSH
7348: LD_VAR 0 14
7352: ARRAY
7353: PPUSH
7354: EMPTY
7355: PPUSH
7356: CALL_OW 446
// if IsInUnit ( engineers [ i ] ) then
7360: LD_VAR 0 21
7364: PUSH
7365: LD_VAR 0 14
7369: ARRAY
7370: PPUSH
7371: CALL_OW 310
7375: IFFALSE 7392
// ComExitBuilding ( engineers [ i ] ) ;
7377: LD_VAR 0 21
7381: PUSH
7382: LD_VAR 0 14
7386: ARRAY
7387: PPUSH
7388: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7392: LD_ADDR_VAR 0 47
7396: PUSH
7397: LD_VAR 0 4
7401: PPUSH
7402: LD_INT 22
7404: PUSH
7405: LD_VAR 0 1
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: LD_INT 21
7416: PUSH
7417: LD_INT 3
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: PUSH
7424: LD_INT 3
7426: PUSH
7427: LD_INT 24
7429: PUSH
7430: LD_INT 1000
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: PPUSH
7446: CALL_OW 70
7450: PUSH
7451: FOR_IN
7452: IFFALSE 7476
// AddComRepairBuilding ( engineers [ i ] , damageBuilding ) ;
7454: LD_VAR 0 21
7458: PUSH
7459: LD_VAR 0 14
7463: ARRAY
7464: PPUSH
7465: LD_VAR 0 47
7469: PPUSH
7470: CALL_OW 190
7474: GO 7451
7476: POP
7477: POP
// end ;
7478: GO 7273
7480: POP
7481: POP
// end else
7482: GO 7791
// if engineers and destroyedBuildings then
7484: LD_VAR 0 21
7488: PUSH
7489: LD_VAR 0 35
7493: AND
7494: IFFALSE 7670
// begin for i := 1 to engineers do
7496: LD_ADDR_VAR 0 14
7500: PUSH
7501: DOUBLE
7502: LD_INT 1
7504: DEC
7505: ST_TO_ADDR
7506: LD_VAR 0 21
7510: PUSH
7511: FOR_TO
7512: IFFALSE 7666
// if GetTag ( engineers [ i ] ) = 1 then
7514: LD_VAR 0 21
7518: PUSH
7519: LD_VAR 0 14
7523: ARRAY
7524: PPUSH
7525: CALL_OW 110
7529: PUSH
7530: LD_INT 1
7532: EQUAL
7533: IFFALSE 7664
// begin if IsInUnit ( engineers [ i ] ) then
7535: LD_VAR 0 21
7539: PUSH
7540: LD_VAR 0 14
7544: ARRAY
7545: PPUSH
7546: CALL_OW 310
7550: IFFALSE 7567
// ComExitBuilding ( engineers [ i ] ) ;
7552: LD_VAR 0 21
7556: PUSH
7557: LD_VAR 0 14
7561: ARRAY
7562: PPUSH
7563: CALL_OW 122
// for j := 1 to destroyedBuildings / 4 do
7567: LD_ADDR_VAR 0 15
7571: PUSH
7572: DOUBLE
7573: LD_INT 1
7575: DEC
7576: ST_TO_ADDR
7577: LD_VAR 0 35
7581: PUSH
7582: LD_INT 4
7584: DIVREAL
7585: PUSH
7586: FOR_TO
7587: IFFALSE 7662
// AddComBuild ( engineers [ i ] , destroyedBuildings [ j ] , destroyedBuildings [ j + 1 ] , destroyedBuildings [ j + 2 ] , destroyedBuildings [ j + 3 ] ) ;
7589: LD_VAR 0 21
7593: PUSH
7594: LD_VAR 0 14
7598: ARRAY
7599: PPUSH
7600: LD_VAR 0 35
7604: PUSH
7605: LD_VAR 0 15
7609: ARRAY
7610: PPUSH
7611: LD_VAR 0 35
7615: PUSH
7616: LD_VAR 0 15
7620: PUSH
7621: LD_INT 1
7623: PLUS
7624: ARRAY
7625: PPUSH
7626: LD_VAR 0 35
7630: PUSH
7631: LD_VAR 0 15
7635: PUSH
7636: LD_INT 2
7638: PLUS
7639: ARRAY
7640: PPUSH
7641: LD_VAR 0 35
7645: PUSH
7646: LD_VAR 0 15
7650: PUSH
7651: LD_INT 3
7653: PLUS
7654: ARRAY
7655: PPUSH
7656: CALL_OW 205
7660: GO 7586
7662: POP
7663: POP
// end ;
7664: GO 7511
7666: POP
7667: POP
// end else
7668: GO 7791
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot and not destroyedBuildings then
7670: LD_VAR 0 21
7674: PUSH
7675: LD_VAR 0 21
7679: PPUSH
7680: LD_INT 56
7682: PUSH
7683: EMPTY
7684: LIST
7685: PPUSH
7686: CALL_OW 72
7690: AND
7691: PUSH
7692: LD_VAR 0 39
7696: AND
7697: PUSH
7698: LD_VAR 0 35
7702: NOT
7703: AND
7704: IFFALSE 7791
// for i := 1 to engineers do
7706: LD_ADDR_VAR 0 14
7710: PUSH
7711: DOUBLE
7712: LD_INT 1
7714: DEC
7715: ST_TO_ADDR
7716: LD_VAR 0 21
7720: PUSH
7721: FOR_TO
7722: IFFALSE 7789
// begin if GetTag ( engineers [ i ] ) = 1 and not HasTask ( engineers [ i ] ) then
7724: LD_VAR 0 21
7728: PUSH
7729: LD_VAR 0 14
7733: ARRAY
7734: PPUSH
7735: CALL_OW 110
7739: PUSH
7740: LD_INT 1
7742: EQUAL
7743: PUSH
7744: LD_VAR 0 21
7748: PUSH
7749: LD_VAR 0 14
7753: ARRAY
7754: PPUSH
7755: CALL_OW 314
7759: NOT
7760: AND
7761: IFFALSE 7787
// ComEnterUnit ( engineers [ i ] , depot [ 1 ] ) ;
7763: LD_VAR 0 21
7767: PUSH
7768: LD_VAR 0 14
7772: ARRAY
7773: PPUSH
7774: LD_VAR 0 39
7778: PUSH
7779: LD_INT 1
7781: ARRAY
7782: PPUSH
7783: CALL_OW 120
// end ;
7787: GO 7721
7789: POP
7790: POP
// for i := 1 to personel do
7791: LD_ADDR_VAR 0 14
7795: PUSH
7796: DOUBLE
7797: LD_INT 1
7799: DEC
7800: ST_TO_ADDR
7801: LD_VAR 0 19
7805: PUSH
7806: FOR_TO
7807: IFFALSE 7848
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
7809: LD_ADDR_VAR 0 22
7813: PUSH
7814: LD_VAR 0 22
7818: PUSH
7819: LD_VAR 0 19
7823: PUSH
7824: LD_VAR 0 14
7828: ARRAY
7829: PPUSH
7830: LD_INT 25
7832: PUSH
7833: LD_INT 3
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PPUSH
7840: CALL_OW 72
7844: ADD
7845: ST_TO_ADDR
7846: GO 7806
7848: POP
7849: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
7850: LD_VAR 0 22
7854: PUSH
7855: LD_VAR 0 4
7859: PPUSH
7860: LD_INT 22
7862: PUSH
7863: LD_VAR 0 1
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: LD_INT 21
7874: PUSH
7875: LD_INT 2
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: PUSH
7882: LD_INT 3
7884: PUSH
7885: LD_INT 24
7887: PUSH
7888: LD_INT 1000
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: LIST
7903: PPUSH
7904: CALL_OW 70
7908: AND
7909: IFFALSE 8489
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7911: LD_ADDR_VAR 0 48
7915: PUSH
7916: LD_VAR 0 4
7920: PPUSH
7921: LD_INT 22
7923: PUSH
7924: LD_VAR 0 1
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PUSH
7933: LD_INT 21
7935: PUSH
7936: LD_INT 2
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: PUSH
7943: LD_INT 3
7945: PUSH
7946: LD_INT 24
7948: PUSH
7949: LD_INT 1000
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: LIST
7964: PPUSH
7965: CALL_OW 70
7969: PUSH
7970: FOR_IN
7971: IFFALSE 8485
// begin if GetDistUnitArea ( damageUnit , repairArea ) <= 5 then
7973: LD_VAR 0 48
7977: PPUSH
7978: LD_VAR 0 6
7982: PPUSH
7983: CALL_OW 299
7987: PUSH
7988: LD_INT 5
7990: LESSEQUAL
7991: IFFALSE 8080
// for i := 1 to vehicles do
7993: LD_ADDR_VAR 0 14
7997: PUSH
7998: DOUBLE
7999: LD_INT 1
8001: DEC
8002: ST_TO_ADDR
8003: LD_VAR 0 25
8007: PUSH
8008: FOR_TO
8009: IFFALSE 8078
// if vehicles [ i ] [ 1 ] = damageUnit then
8011: LD_VAR 0 25
8015: PUSH
8016: LD_VAR 0 14
8020: ARRAY
8021: PUSH
8022: LD_INT 1
8024: ARRAY
8025: PUSH
8026: LD_VAR 0 48
8030: EQUAL
8031: IFFALSE 8076
// begin ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
8033: LD_VAR 0 25
8037: PUSH
8038: LD_VAR 0 14
8042: ARRAY
8043: PUSH
8044: LD_INT 2
8046: ARRAY
8047: PPUSH
8048: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
8052: LD_VAR 0 25
8056: PUSH
8057: LD_VAR 0 14
8061: ARRAY
8062: PUSH
8063: LD_INT 2
8065: ARRAY
8066: PPUSH
8067: LD_VAR 0 48
8071: PPUSH
8072: CALL_OW 189
// end ;
8076: GO 8008
8078: POP
8079: POP
// for i := 1 to mechanics do
8080: LD_ADDR_VAR 0 14
8084: PUSH
8085: DOUBLE
8086: LD_INT 1
8088: DEC
8089: ST_TO_ADDR
8090: LD_VAR 0 22
8094: PUSH
8095: FOR_TO
8096: IFFALSE 8264
// if GetTag ( mechanics [ i ] ) = 1 and IsInUnit ( mechanics [ i ] ) in [ b_workshop , b_factory ] then
8098: LD_VAR 0 22
8102: PUSH
8103: LD_VAR 0 14
8107: ARRAY
8108: PPUSH
8109: CALL_OW 110
8113: PUSH
8114: LD_INT 1
8116: EQUAL
8117: PUSH
8118: LD_VAR 0 22
8122: PUSH
8123: LD_VAR 0 14
8127: ARRAY
8128: PPUSH
8129: CALL_OW 310
8133: PUSH
8134: LD_INT 2
8136: PUSH
8137: LD_INT 3
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: IN
8144: AND
8145: IFFALSE 8262
// begin if GetTaskList ( mechanics [ i ] ) then
8147: LD_VAR 0 22
8151: PUSH
8152: LD_VAR 0 14
8156: ARRAY
8157: PPUSH
8158: CALL_OW 437
8162: IFFALSE 8210
// if GetTaskList ( mechanics [ i ] ) [ 1 ] [ 1 ] = e then
8164: LD_VAR 0 22
8168: PUSH
8169: LD_VAR 0 14
8173: ARRAY
8174: PPUSH
8175: CALL_OW 437
8179: PUSH
8180: LD_INT 1
8182: ARRAY
8183: PUSH
8184: LD_INT 1
8186: ARRAY
8187: PUSH
8188: LD_STRING e
8190: EQUAL
8191: IFFALSE 8210
// SetTaskList ( mechanics [ i ] , [ ] ) ;
8193: LD_VAR 0 22
8197: PUSH
8198: LD_VAR 0 14
8202: ARRAY
8203: PPUSH
8204: EMPTY
8205: PPUSH
8206: CALL_OW 446
// if IsInUnit ( mechanics [ i ] ) then
8210: LD_VAR 0 22
8214: PUSH
8215: LD_VAR 0 14
8219: ARRAY
8220: PPUSH
8221: CALL_OW 310
8225: IFFALSE 8242
// ComExitBuilding ( mechanics [ i ] ) ;
8227: LD_VAR 0 22
8231: PUSH
8232: LD_VAR 0 14
8236: ARRAY
8237: PPUSH
8238: CALL_OW 122
// AddComRepairVehicle ( mechanics [ i ] , damageUnit ) ;
8242: LD_VAR 0 22
8246: PUSH
8247: LD_VAR 0 14
8251: ARRAY
8252: PPUSH
8253: LD_VAR 0 48
8257: PPUSH
8258: CALL_OW 189
// end ;
8262: GO 8095
8264: POP
8265: POP
// if GetLives ( damageUnit ) < 250 and IsInArea ( damageUnit , baseArea ) then
8266: LD_VAR 0 48
8270: PPUSH
8271: CALL_OW 256
8275: PUSH
8276: LD_INT 250
8278: LESS
8279: PUSH
8280: LD_VAR 0 48
8284: PPUSH
8285: LD_VAR 0 4
8289: PPUSH
8290: CALL_OW 308
8294: AND
8295: IFFALSE 8483
// for i := 1 to personel do
8297: LD_ADDR_VAR 0 14
8301: PUSH
8302: DOUBLE
8303: LD_INT 1
8305: DEC
8306: ST_TO_ADDR
8307: LD_VAR 0 19
8311: PUSH
8312: FOR_TO
8313: IFFALSE 8481
// if GetTag ( mechanics [ i ] ) = 1 and IsInUnit ( mechanics [ i ] ) in [ b_workshop , b_factory ] then
8315: LD_VAR 0 22
8319: PUSH
8320: LD_VAR 0 14
8324: ARRAY
8325: PPUSH
8326: CALL_OW 110
8330: PUSH
8331: LD_INT 1
8333: EQUAL
8334: PUSH
8335: LD_VAR 0 22
8339: PUSH
8340: LD_VAR 0 14
8344: ARRAY
8345: PPUSH
8346: CALL_OW 310
8350: PUSH
8351: LD_INT 2
8353: PUSH
8354: LD_INT 3
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: IN
8361: AND
8362: IFFALSE 8479
// begin if GetTaskList ( mechanics [ i ] ) then
8364: LD_VAR 0 22
8368: PUSH
8369: LD_VAR 0 14
8373: ARRAY
8374: PPUSH
8375: CALL_OW 437
8379: IFFALSE 8427
// if GetTaskList ( mechanics [ i ] ) [ 1 ] [ 1 ] = e then
8381: LD_VAR 0 22
8385: PUSH
8386: LD_VAR 0 14
8390: ARRAY
8391: PPUSH
8392: CALL_OW 437
8396: PUSH
8397: LD_INT 1
8399: ARRAY
8400: PUSH
8401: LD_INT 1
8403: ARRAY
8404: PUSH
8405: LD_STRING e
8407: EQUAL
8408: IFFALSE 8427
// SetTaskList ( mechanics [ i ] , [ ] ) ;
8410: LD_VAR 0 22
8414: PUSH
8415: LD_VAR 0 14
8419: ARRAY
8420: PPUSH
8421: EMPTY
8422: PPUSH
8423: CALL_OW 446
// if IsInUnit ( mechanics [ i ] ) then
8427: LD_VAR 0 22
8431: PUSH
8432: LD_VAR 0 14
8436: ARRAY
8437: PPUSH
8438: CALL_OW 310
8442: IFFALSE 8459
// ComExitBuilding ( mechanics [ i ] ) ;
8444: LD_VAR 0 22
8448: PUSH
8449: LD_VAR 0 14
8453: ARRAY
8454: PPUSH
8455: CALL_OW 122
// AddComRepairVehicle ( mechanics [ i ] , damageUnit ) ;
8459: LD_VAR 0 22
8463: PUSH
8464: LD_VAR 0 14
8468: ARRAY
8469: PPUSH
8470: LD_VAR 0 48
8474: PPUSH
8475: CALL_OW 189
// end ;
8479: GO 8312
8481: POP
8482: POP
// end ;
8483: GO 7970
8485: POP
8486: POP
// end else
8487: GO 8786
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and UnitFilter ( controlTowers , [ f_empty ] ) then
8489: LD_VAR 0 22
8493: PUSH
8494: LD_VAR 0 22
8498: PPUSH
8499: LD_INT 56
8501: PUSH
8502: EMPTY
8503: LIST
8504: PPUSH
8505: CALL_OW 72
8509: AND
8510: PUSH
8511: LD_VAR 0 44
8515: PPUSH
8516: LD_INT 58
8518: PUSH
8519: EMPTY
8520: LIST
8521: PPUSH
8522: CALL_OW 72
8526: AND
8527: IFFALSE 8644
// begin for i := 1 to mechanics do
8529: LD_ADDR_VAR 0 14
8533: PUSH
8534: DOUBLE
8535: LD_INT 1
8537: DEC
8538: ST_TO_ADDR
8539: LD_VAR 0 22
8543: PUSH
8544: FOR_TO
8545: IFFALSE 8640
// if GetTag ( mechanics [ i ] ) = 1 and not HasTask ( mechanics [ i ] ) and not IsInUnit ( mechanics [ i ] ) then
8547: LD_VAR 0 22
8551: PUSH
8552: LD_VAR 0 14
8556: ARRAY
8557: PPUSH
8558: CALL_OW 110
8562: PUSH
8563: LD_INT 1
8565: EQUAL
8566: PUSH
8567: LD_VAR 0 22
8571: PUSH
8572: LD_VAR 0 14
8576: ARRAY
8577: PPUSH
8578: CALL_OW 314
8582: NOT
8583: AND
8584: PUSH
8585: LD_VAR 0 22
8589: PUSH
8590: LD_VAR 0 14
8594: ARRAY
8595: PPUSH
8596: CALL_OW 310
8600: NOT
8601: AND
8602: IFFALSE 8638
// ComEnterUnit ( mechanics [ i ] , controlTowers [ rand ( 1 , controlTowers ) ] ) ;
8604: LD_VAR 0 22
8608: PUSH
8609: LD_VAR 0 14
8613: ARRAY
8614: PPUSH
8615: LD_VAR 0 44
8619: PUSH
8620: LD_INT 1
8622: PPUSH
8623: LD_VAR 0 44
8627: PPUSH
8628: CALL_OW 12
8632: ARRAY
8633: PPUSH
8634: CALL_OW 120
8638: GO 8544
8640: POP
8641: POP
// end else
8642: GO 8786
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
8644: LD_VAR 0 22
8648: PUSH
8649: LD_VAR 0 22
8653: PPUSH
8654: LD_INT 56
8656: PUSH
8657: EMPTY
8658: LIST
8659: PPUSH
8660: CALL_OW 72
8664: AND
8665: PUSH
8666: LD_VAR 0 40
8670: AND
8671: IFFALSE 8786
// for i := 1 to mechanics do
8673: LD_ADDR_VAR 0 14
8677: PUSH
8678: DOUBLE
8679: LD_INT 1
8681: DEC
8682: ST_TO_ADDR
8683: LD_VAR 0 22
8687: PUSH
8688: FOR_TO
8689: IFFALSE 8784
// if GetTag ( mechanics [ i ] ) = 1 and not HasTask ( mechanics [ i ] ) and not IsInUnit ( mechanics [ i ] ) then
8691: LD_VAR 0 22
8695: PUSH
8696: LD_VAR 0 14
8700: ARRAY
8701: PPUSH
8702: CALL_OW 110
8706: PUSH
8707: LD_INT 1
8709: EQUAL
8710: PUSH
8711: LD_VAR 0 22
8715: PUSH
8716: LD_VAR 0 14
8720: ARRAY
8721: PPUSH
8722: CALL_OW 314
8726: NOT
8727: AND
8728: PUSH
8729: LD_VAR 0 22
8733: PUSH
8734: LD_VAR 0 14
8738: ARRAY
8739: PPUSH
8740: CALL_OW 310
8744: NOT
8745: AND
8746: IFFALSE 8782
// ComEnterUnit ( mechanics [ i ] , factory [ rand ( 1 , factory ) ] ) ;
8748: LD_VAR 0 22
8752: PUSH
8753: LD_VAR 0 14
8757: ARRAY
8758: PPUSH
8759: LD_VAR 0 40
8763: PUSH
8764: LD_INT 1
8766: PPUSH
8767: LD_VAR 0 40
8771: PPUSH
8772: CALL_OW 12
8776: ARRAY
8777: PPUSH
8778: CALL_OW 120
8782: GO 8688
8784: POP
8785: POP
// for i := 1 to personel do
8786: LD_ADDR_VAR 0 14
8790: PUSH
8791: DOUBLE
8792: LD_INT 1
8794: DEC
8795: ST_TO_ADDR
8796: LD_VAR 0 19
8800: PUSH
8801: FOR_TO
8802: IFFALSE 8843
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
8804: LD_ADDR_VAR 0 23
8808: PUSH
8809: LD_VAR 0 23
8813: PUSH
8814: LD_VAR 0 19
8818: PUSH
8819: LD_VAR 0 14
8823: ARRAY
8824: PPUSH
8825: LD_INT 25
8827: PUSH
8828: LD_INT 4
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PPUSH
8835: CALL_OW 72
8839: ADD
8840: ST_TO_ADDR
8841: GO 8801
8843: POP
8844: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
8845: LD_VAR 0 23
8849: PUSH
8850: LD_VAR 0 4
8854: PPUSH
8855: LD_INT 22
8857: PUSH
8858: LD_VAR 0 1
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PUSH
8867: LD_INT 21
8869: PUSH
8870: LD_INT 1
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PUSH
8877: LD_INT 3
8879: PUSH
8880: LD_INT 24
8882: PUSH
8883: LD_INT 1000
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: LIST
8898: PPUSH
8899: CALL_OW 70
8903: AND
8904: IFFALSE 9341
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
8906: LD_ADDR_VAR 0 48
8910: PUSH
8911: LD_VAR 0 4
8915: PPUSH
8916: LD_INT 22
8918: PUSH
8919: LD_VAR 0 1
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: PUSH
8928: LD_INT 21
8930: PUSH
8931: LD_INT 1
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: PUSH
8938: LD_INT 3
8940: PUSH
8941: LD_INT 24
8943: PUSH
8944: LD_INT 1000
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: LIST
8959: PPUSH
8960: CALL_OW 70
8964: PUSH
8965: FOR_IN
8966: IFFALSE 9337
// begin if GetDistUnitArea ( damageUnit , healArea ) <= 5 then
8968: LD_VAR 0 48
8972: PPUSH
8973: LD_VAR 0 5
8977: PPUSH
8978: CALL_OW 299
8982: PUSH
8983: LD_INT 5
8985: LESSEQUAL
8986: IFFALSE 9146
// for i := 1 to scientists do
8988: LD_ADDR_VAR 0 14
8992: PUSH
8993: DOUBLE
8994: LD_INT 1
8996: DEC
8997: ST_TO_ADDR
8998: LD_VAR 0 23
9002: PUSH
9003: FOR_TO
9004: IFFALSE 9144
// if GetTag ( scientists [ i ] ) = 1 then
9006: LD_VAR 0 23
9010: PUSH
9011: LD_VAR 0 14
9015: ARRAY
9016: PPUSH
9017: CALL_OW 110
9021: PUSH
9022: LD_INT 1
9024: EQUAL
9025: IFFALSE 9142
// begin if GetTaskList ( scientists [ i ] ) then
9027: LD_VAR 0 23
9031: PUSH
9032: LD_VAR 0 14
9036: ARRAY
9037: PPUSH
9038: CALL_OW 437
9042: IFFALSE 9090
// if GetTaskList ( scientists [ i ] ) [ 1 ] [ 1 ] = e then
9044: LD_VAR 0 23
9048: PUSH
9049: LD_VAR 0 14
9053: ARRAY
9054: PPUSH
9055: CALL_OW 437
9059: PUSH
9060: LD_INT 1
9062: ARRAY
9063: PUSH
9064: LD_INT 1
9066: ARRAY
9067: PUSH
9068: LD_STRING e
9070: EQUAL
9071: IFFALSE 9090
// SetTaskList ( scientists [ i ] , [ ] ) ;
9073: LD_VAR 0 23
9077: PUSH
9078: LD_VAR 0 14
9082: ARRAY
9083: PPUSH
9084: EMPTY
9085: PPUSH
9086: CALL_OW 446
// if IsInUnit ( scientists [ i ] ) then
9090: LD_VAR 0 23
9094: PUSH
9095: LD_VAR 0 14
9099: ARRAY
9100: PPUSH
9101: CALL_OW 310
9105: IFFALSE 9122
// ComExitBuilding ( scientists [ i ] ) ;
9107: LD_VAR 0 23
9111: PUSH
9112: LD_VAR 0 14
9116: ARRAY
9117: PPUSH
9118: CALL_OW 122
// AddComHeal ( scientists [ i ] , damageUnit ) ;
9122: LD_VAR 0 23
9126: PUSH
9127: LD_VAR 0 14
9131: ARRAY
9132: PPUSH
9133: LD_VAR 0 48
9137: PPUSH
9138: CALL_OW 188
// end ;
9142: GO 9003
9144: POP
9145: POP
// if GetLives ( damageUnit ) < 250 and IsInArea ( damageUnit , baseArea ) then
9146: LD_VAR 0 48
9150: PPUSH
9151: CALL_OW 256
9155: PUSH
9156: LD_INT 250
9158: LESS
9159: PUSH
9160: LD_VAR 0 48
9164: PPUSH
9165: LD_VAR 0 4
9169: PPUSH
9170: CALL_OW 308
9174: AND
9175: IFFALSE 9335
// for i := 1 to scientists do
9177: LD_ADDR_VAR 0 14
9181: PUSH
9182: DOUBLE
9183: LD_INT 1
9185: DEC
9186: ST_TO_ADDR
9187: LD_VAR 0 23
9191: PUSH
9192: FOR_TO
9193: IFFALSE 9333
// if GetTag ( scientists [ i ] ) = 1 then
9195: LD_VAR 0 23
9199: PUSH
9200: LD_VAR 0 14
9204: ARRAY
9205: PPUSH
9206: CALL_OW 110
9210: PUSH
9211: LD_INT 1
9213: EQUAL
9214: IFFALSE 9331
// begin if GetTaskList ( scientists [ i ] ) then
9216: LD_VAR 0 23
9220: PUSH
9221: LD_VAR 0 14
9225: ARRAY
9226: PPUSH
9227: CALL_OW 437
9231: IFFALSE 9279
// if GetTaskList ( scientists [ i ] ) [ 1 ] [ 1 ] = e then
9233: LD_VAR 0 23
9237: PUSH
9238: LD_VAR 0 14
9242: ARRAY
9243: PPUSH
9244: CALL_OW 437
9248: PUSH
9249: LD_INT 1
9251: ARRAY
9252: PUSH
9253: LD_INT 1
9255: ARRAY
9256: PUSH
9257: LD_STRING e
9259: EQUAL
9260: IFFALSE 9279
// SetTaskList ( scientists [ i ] , [ ] ) ;
9262: LD_VAR 0 23
9266: PUSH
9267: LD_VAR 0 14
9271: ARRAY
9272: PPUSH
9273: EMPTY
9274: PPUSH
9275: CALL_OW 446
// if IsInUnit ( scientists [ i ] ) then
9279: LD_VAR 0 23
9283: PUSH
9284: LD_VAR 0 14
9288: ARRAY
9289: PPUSH
9290: CALL_OW 310
9294: IFFALSE 9311
// ComExitBuilding ( scientists [ i ] ) ;
9296: LD_VAR 0 23
9300: PUSH
9301: LD_VAR 0 14
9305: ARRAY
9306: PPUSH
9307: CALL_OW 122
// AddComHeal ( scientists [ i ] , damageUnit ) ;
9311: LD_VAR 0 23
9315: PUSH
9316: LD_VAR 0 14
9320: ARRAY
9321: PPUSH
9322: LD_VAR 0 48
9326: PPUSH
9327: CALL_OW 188
// end ;
9331: GO 9192
9333: POP
9334: POP
// end ;
9335: GO 8965
9337: POP
9338: POP
// end else
9339: GO 9483
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
9341: LD_VAR 0 23
9345: PUSH
9346: LD_VAR 0 23
9350: PPUSH
9351: LD_INT 56
9353: PUSH
9354: EMPTY
9355: LIST
9356: PPUSH
9357: CALL_OW 72
9361: AND
9362: PUSH
9363: LD_VAR 0 41
9367: AND
9368: IFFALSE 9483
// for i := 1 to scientists do
9370: LD_ADDR_VAR 0 14
9374: PUSH
9375: DOUBLE
9376: LD_INT 1
9378: DEC
9379: ST_TO_ADDR
9380: LD_VAR 0 23
9384: PUSH
9385: FOR_TO
9386: IFFALSE 9481
// if GetTag ( scientists [ i ] ) = 1 and not HasTask ( scientists [ i ] ) and not IsInUnit ( scientists [ i ] ) then
9388: LD_VAR 0 23
9392: PUSH
9393: LD_VAR 0 14
9397: ARRAY
9398: PPUSH
9399: CALL_OW 110
9403: PUSH
9404: LD_INT 1
9406: EQUAL
9407: PUSH
9408: LD_VAR 0 23
9412: PUSH
9413: LD_VAR 0 14
9417: ARRAY
9418: PPUSH
9419: CALL_OW 314
9423: NOT
9424: AND
9425: PUSH
9426: LD_VAR 0 23
9430: PUSH
9431: LD_VAR 0 14
9435: ARRAY
9436: PPUSH
9437: CALL_OW 310
9441: NOT
9442: AND
9443: IFFALSE 9479
// ComEnterUnit ( scientists [ i ] , lab [ rand ( 1 , lab ) ] ) ;
9445: LD_VAR 0 23
9449: PUSH
9450: LD_VAR 0 14
9454: ARRAY
9455: PPUSH
9456: LD_VAR 0 41
9460: PUSH
9461: LD_INT 1
9463: PPUSH
9464: LD_VAR 0 41
9468: PPUSH
9469: CALL_OW 12
9473: ARRAY
9474: PPUSH
9475: CALL_OW 120
9479: GO 9385
9481: POP
9482: POP
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , us_bulldozer ] ] ) then
9483: LD_INT 22
9485: PUSH
9486: LD_VAR 0 1
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PUSH
9495: LD_INT 34
9497: PUSH
9498: LD_INT 14
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PPUSH
9509: CALL_OW 69
9513: NOT
9514: IFFALSE 9541
// AddComConstruct ( factory [ 1 ] , us_heavy_tracked , engine_combustion , control_remote , us_bulldozer ) ;
9516: LD_VAR 0 40
9520: PUSH
9521: LD_INT 1
9523: ARRAY
9524: PPUSH
9525: LD_INT 4
9527: PPUSH
9528: LD_INT 1
9530: PPUSH
9531: LD_INT 2
9533: PPUSH
9534: LD_INT 14
9536: PPUSH
9537: CALL_OW 185
// if vehicles < vehiclesAmount and factory then
9541: LD_VAR 0 25
9545: PUSH
9546: LD_VAR 0 8
9550: LESS
9551: PUSH
9552: LD_VAR 0 40
9556: AND
9557: IFFALSE 9805
// begin tmp = vehiclesAmount - vehicles ;
9559: LD_ADDR_VAR 0 16
9563: PUSH
9564: LD_VAR 0 8
9568: PUSH
9569: LD_VAR 0 25
9573: MINUS
9574: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
9575: LD_ADDR_VAR 0 32
9579: PUSH
9580: LD_VAR 0 1
9584: PPUSH
9585: LD_VAR 0 2
9589: PPUSH
9590: CALL 14415 0 2
9594: ST_TO_ADDR
// for i := 1 to tmp do
9595: LD_ADDR_VAR 0 14
9599: PUSH
9600: DOUBLE
9601: LD_INT 1
9603: DEC
9604: ST_TO_ADDR
9605: LD_VAR 0 16
9609: PUSH
9610: FOR_TO
9611: IFFALSE 9801
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
9613: LD_ADDR_VAR 0 16
9617: PUSH
9618: LD_VAR 0 32
9622: PUSH
9623: LD_INT 1
9625: PPUSH
9626: LD_VAR 0 32
9630: PPUSH
9631: CALL_OW 12
9635: ARRAY
9636: ST_TO_ADDR
// if tmp in [ 6 , 34 , 14 , 71 , 47 ] then
9637: LD_VAR 0 16
9641: PUSH
9642: LD_INT 6
9644: PUSH
9645: LD_INT 34
9647: PUSH
9648: LD_INT 14
9650: PUSH
9651: LD_INT 71
9653: PUSH
9654: LD_INT 47
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: IN
9664: IFFALSE 9702
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
9666: LD_ADDR_VAR 0 33
9670: PUSH
9671: LD_INT 4
9673: PUSH
9674: EMPTY
9675: LIST
9676: PUSH
9677: LD_INT 14
9679: PUSH
9680: EMPTY
9681: LIST
9682: PUSH
9683: LD_INT 24
9685: PUSH
9686: EMPTY
9687: LIST
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: LIST
9693: PUSH
9694: LD_VAR 0 2
9698: ARRAY
9699: ST_TO_ADDR
9700: GO 9756
// chassis = [ [ us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
9702: LD_ADDR_VAR 0 33
9706: PUSH
9707: LD_INT 3
9709: PUSH
9710: LD_INT 4
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: PUSH
9717: LD_INT 13
9719: PUSH
9720: LD_INT 14
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: PUSH
9727: LD_INT 21
9729: PUSH
9730: LD_INT 23
9732: PUSH
9733: LD_INT 24
9735: PUSH
9736: LD_INT 22
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: LIST
9749: PUSH
9750: LD_VAR 0 2
9754: ARRAY
9755: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_remote , tmp ) ;
9756: LD_VAR 0 40
9760: PUSH
9761: LD_INT 1
9763: ARRAY
9764: PPUSH
9765: LD_VAR 0 33
9769: PUSH
9770: LD_INT 1
9772: PPUSH
9773: LD_VAR 0 33
9777: PPUSH
9778: CALL_OW 12
9782: ARRAY
9783: PPUSH
9784: LD_INT 1
9786: PPUSH
9787: LD_INT 2
9789: PPUSH
9790: LD_VAR 0 16
9794: PPUSH
9795: CALL_OW 185
// end ;
9799: GO 9610
9801: POP
9802: POP
// end else
9803: GO 9818
// ComCancel ( factory [ 1 ] ) ;
9805: LD_VAR 0 40
9809: PUSH
9810: LD_INT 1
9812: ARRAY
9813: PPUSH
9814: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ] ] ) do
9818: LD_ADDR_VAR 0 24
9822: PUSH
9823: LD_VAR 0 4
9827: PPUSH
9828: LD_INT 22
9830: PUSH
9831: LD_VAR 0 1
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PUSH
9840: LD_INT 21
9842: PUSH
9843: LD_INT 2
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 50
9852: PUSH
9853: EMPTY
9854: LIST
9855: PUSH
9856: LD_INT 3
9858: PUSH
9859: LD_INT 2
9861: PUSH
9862: LD_INT 34
9864: PUSH
9865: LD_INT 12
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PUSH
9872: LD_INT 34
9874: PUSH
9875: LD_INT 51
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PUSH
9882: LD_INT 34
9884: PUSH
9885: LD_INT 32
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: PUSH
9892: LD_INT 34
9894: PUSH
9895: LD_INT 31
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: PPUSH
9919: CALL_OW 70
9923: PUSH
9924: FOR_IN
9925: IFFALSE 10080
// begin vehicleInList = false ;
9927: LD_ADDR_VAR 0 26
9931: PUSH
9932: LD_INT 0
9934: ST_TO_ADDR
// for i := 1 to vehicles do
9935: LD_ADDR_VAR 0 14
9939: PUSH
9940: DOUBLE
9941: LD_INT 1
9943: DEC
9944: ST_TO_ADDR
9945: LD_VAR 0 25
9949: PUSH
9950: FOR_TO
9951: IFFALSE 9981
// if vehicle in vehicles [ i ] then
9953: LD_VAR 0 24
9957: PUSH
9958: LD_VAR 0 25
9962: PUSH
9963: LD_VAR 0 14
9967: ARRAY
9968: IN
9969: IFFALSE 9979
// vehicleInList = true ;
9971: LD_ADDR_VAR 0 26
9975: PUSH
9976: LD_INT 1
9978: ST_TO_ADDR
9979: GO 9950
9981: POP
9982: POP
// if not vehicleInList then
9983: LD_VAR 0 26
9987: NOT
9988: IFFALSE 10078
// begin if vehicles < vehiclesToAttackAmount then
9990: LD_VAR 0 25
9994: PUSH
9995: LD_VAR 0 10
9999: LESS
10000: IFFALSE 10041
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] ] ] else
10002: LD_ADDR_VAR 0 25
10006: PUSH
10007: LD_VAR 0 25
10011: PUSH
10012: LD_VAR 0 24
10016: PUSH
10017: LD_VAR 0 24
10021: PPUSH
10022: CALL_OW 313
10026: PUSH
10027: LD_INT 1
10029: ARRAY
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PUSH
10035: EMPTY
10036: LIST
10037: ADD
10038: ST_TO_ADDR
10039: GO 10078
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] ] ] ;
10041: LD_ADDR_VAR 0 25
10045: PUSH
10046: LD_VAR 0 25
10050: PUSH
10051: LD_VAR 0 24
10055: PUSH
10056: LD_VAR 0 24
10060: PPUSH
10061: CALL_OW 313
10065: PUSH
10066: LD_INT 1
10068: ARRAY
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: PUSH
10074: EMPTY
10075: LIST
10076: ADD
10077: ST_TO_ADDR
// end ; end ;
10078: GO 9924
10080: POP
10081: POP
// for enemyUnits in FilterAllUnits ( [ f_enemy , side ] ) do
10082: LD_ADDR_VAR 0 50
10086: PUSH
10087: LD_INT 81
10089: PUSH
10090: LD_VAR 0 1
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PPUSH
10099: CALL_OW 69
10103: PUSH
10104: FOR_IN
10105: IFFALSE 10623
// begin offensiveUnits = [ ] ;
10107: LD_ADDR_VAR 0 27
10111: PUSH
10112: EMPTY
10113: ST_TO_ADDR
// offensiveReadyCounter = 0 ;
10114: LD_ADDR_VAR 0 28
10118: PUSH
10119: LD_INT 0
10121: ST_TO_ADDR
// for i := 1 to vehicles do
10122: LD_ADDR_VAR 0 14
10126: PUSH
10127: DOUBLE
10128: LD_INT 1
10130: DEC
10131: ST_TO_ADDR
10132: LD_VAR 0 25
10136: PUSH
10137: FOR_TO
10138: IFFALSE 10346
// if GetTag ( vehicles [ i ] [ 1 ] ) = 2 then
10140: LD_VAR 0 25
10144: PUSH
10145: LD_VAR 0 14
10149: ARRAY
10150: PUSH
10151: LD_INT 1
10153: ARRAY
10154: PPUSH
10155: CALL_OW 110
10159: PUSH
10160: LD_INT 2
10162: EQUAL
10163: IFFALSE 10344
// begin if GetLives ( vehicles [ i ] [ 1 ] ) > 650 then
10165: LD_VAR 0 25
10169: PUSH
10170: LD_VAR 0 14
10174: ARRAY
10175: PUSH
10176: LD_INT 1
10178: ARRAY
10179: PPUSH
10180: CALL_OW 256
10184: PUSH
10185: LD_INT 650
10187: GREATER
10188: IFFALSE 10204
// offensiveReadyCounter = offensiveReadyCounter + 1 ;
10190: LD_ADDR_VAR 0 28
10194: PUSH
10195: LD_VAR 0 28
10199: PUSH
10200: LD_INT 1
10202: PLUS
10203: ST_TO_ADDR
// if IsInArea ( vehicles [ i ] [ 1 ] , baseArea ) then
10204: LD_VAR 0 25
10208: PUSH
10209: LD_VAR 0 14
10213: ARRAY
10214: PUSH
10215: LD_INT 1
10217: ARRAY
10218: PPUSH
10219: LD_VAR 0 4
10223: PPUSH
10224: CALL_OW 308
10228: IFFALSE 10256
// offensiveUnits = offensiveUnits ^ vehicles [ i ] [ 1 ] ;
10230: LD_ADDR_VAR 0 27
10234: PUSH
10235: LD_VAR 0 27
10239: PUSH
10240: LD_VAR 0 25
10244: PUSH
10245: LD_VAR 0 14
10249: ARRAY
10250: PUSH
10251: LD_INT 1
10253: ARRAY
10254: ADD
10255: ST_TO_ADDR
// for j = 1 to personel do
10256: LD_ADDR_VAR 0 15
10260: PUSH
10261: DOUBLE
10262: LD_INT 1
10264: DEC
10265: ST_TO_ADDR
10266: LD_VAR 0 19
10270: PUSH
10271: FOR_TO
10272: IFFALSE 10342
// if personel [ j ] = vehicles [ i ] [ 2 ] then
10274: LD_VAR 0 19
10278: PUSH
10279: LD_VAR 0 15
10283: ARRAY
10284: PUSH
10285: LD_VAR 0 25
10289: PUSH
10290: LD_VAR 0 14
10294: ARRAY
10295: PUSH
10296: LD_INT 2
10298: ARRAY
10299: EQUAL
10300: IFFALSE 10340
// personel = ReplaceIn ( personel , [ j , personel [ j ] ] , 3 ) ;
10302: LD_ADDR_VAR 0 19
10306: PUSH
10307: LD_VAR 0 19
10311: PPUSH
10312: LD_VAR 0 15
10316: PUSH
10317: LD_VAR 0 19
10321: PUSH
10322: LD_VAR 0 15
10326: ARRAY
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PPUSH
10332: LD_INT 3
10334: PPUSH
10335: CALL 47007 0 3
10339: ST_TO_ADDR
10340: GO 10271
10342: POP
10343: POP
// end ;
10344: GO 10137
10346: POP
10347: POP
// if vehiclesToAttackAmount <= offensiveReadyCounter then
10348: LD_VAR 0 10
10352: PUSH
10353: LD_VAR 0 28
10357: LESSEQUAL
10358: IFFALSE 10621
// begin for i := 1 to offensiveUnits do
10360: LD_ADDR_VAR 0 14
10364: PUSH
10365: DOUBLE
10366: LD_INT 1
10368: DEC
10369: ST_TO_ADDR
10370: LD_VAR 0 27
10374: PUSH
10375: FOR_TO
10376: IFFALSE 10619
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , offensiveUnits [ i ] ) ;
10378: LD_ADDR_VAR 0 29
10382: PUSH
10383: LD_INT 81
10385: PUSH
10386: LD_INT 1
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL_OW 69
10397: PPUSH
10398: LD_VAR 0 27
10402: PUSH
10403: LD_VAR 0 14
10407: ARRAY
10408: PPUSH
10409: CALL_OW 74
10413: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , offensiveUnits [ i ] ) ;
10414: LD_ADDR_VAR 0 30
10418: PUSH
10419: LD_INT 81
10421: PUSH
10422: LD_INT 1
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: LD_INT 2
10431: PUSH
10432: LD_INT 59
10434: PUSH
10435: EMPTY
10436: LIST
10437: PUSH
10438: LD_INT 21
10440: PUSH
10441: LD_INT 1
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PUSH
10448: LD_INT 21
10450: PUSH
10451: LD_INT 2
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: EMPTY
10469: LIST
10470: PPUSH
10471: CALL_OW 69
10475: PPUSH
10476: LD_VAR 0 27
10480: PUSH
10481: LD_VAR 0 14
10485: ARRAY
10486: PPUSH
10487: CALL_OW 74
10491: ST_TO_ADDR
// if GetDistUnits ( offensiveUnits [ i ] , target1 ) + 9 < GetDistUnits ( offensiveUnits [ i ] , target2 ) then
10492: LD_VAR 0 27
10496: PUSH
10497: LD_VAR 0 14
10501: ARRAY
10502: PPUSH
10503: LD_VAR 0 29
10507: PPUSH
10508: CALL_OW 296
10512: PUSH
10513: LD_INT 9
10515: PLUS
10516: PUSH
10517: LD_VAR 0 27
10521: PUSH
10522: LD_VAR 0 14
10526: ARRAY
10527: PPUSH
10528: LD_VAR 0 30
10532: PPUSH
10533: CALL_OW 296
10537: LESS
10538: IFFALSE 10562
// ComAttackUnit ( offensiveUnits [ i ] , target1 ) else
10540: LD_VAR 0 27
10544: PUSH
10545: LD_VAR 0 14
10549: ARRAY
10550: PPUSH
10551: LD_VAR 0 29
10555: PPUSH
10556: CALL_OW 115
10560: GO 10582
// ComAttackUnit ( offensiveUnits [ i ] , target2 ) ;
10562: LD_VAR 0 27
10566: PUSH
10567: LD_VAR 0 14
10571: ARRAY
10572: PPUSH
10573: LD_VAR 0 30
10577: PPUSH
10578: CALL_OW 115
// AddComAgressiveMove ( offensiveUnits [ i ] , GetX ( enemyUnits ) , GetY ( enemyUnits ) ) ;
10582: LD_VAR 0 27
10586: PUSH
10587: LD_VAR 0 14
10591: ARRAY
10592: PPUSH
10593: LD_VAR 0 50
10597: PPUSH
10598: CALL_OW 250
10602: PPUSH
10603: LD_VAR 0 50
10607: PPUSH
10608: CALL_OW 251
10612: PPUSH
10613: CALL_OW 174
// end ;
10617: GO 10375
10619: POP
10620: POP
// end ; end ;
10621: GO 10104
10623: POP
10624: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
10625: LD_ADDR_VAR 0 50
10629: PUSH
10630: LD_VAR 0 7
10634: PPUSH
10635: LD_INT 81
10637: PUSH
10638: LD_VAR 0 1
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: PPUSH
10647: CALL_OW 70
10651: PUSH
10652: FOR_IN
10653: IFFALSE 10881
// begin defenceUnits = [ ] ;
10655: LD_ADDR_VAR 0 31
10659: PUSH
10660: EMPTY
10661: ST_TO_ADDR
// for i := 1 to personel do
10662: LD_ADDR_VAR 0 14
10666: PUSH
10667: DOUBLE
10668: LD_INT 1
10670: DEC
10671: ST_TO_ADDR
10672: LD_VAR 0 19
10676: PUSH
10677: FOR_TO
10678: IFFALSE 10725
// if GetTag ( personel [ i ] ) = 3 then
10680: LD_VAR 0 19
10684: PUSH
10685: LD_VAR 0 14
10689: ARRAY
10690: PPUSH
10691: CALL_OW 110
10695: PUSH
10696: LD_INT 3
10698: EQUAL
10699: IFFALSE 10723
// defenceUnits = defenceUnits ^ personel [ i ] ;
10701: LD_ADDR_VAR 0 31
10705: PUSH
10706: LD_VAR 0 31
10710: PUSH
10711: LD_VAR 0 19
10715: PUSH
10716: LD_VAR 0 14
10720: ARRAY
10721: ADD
10722: ST_TO_ADDR
10723: GO 10677
10725: POP
10726: POP
// for i := 1 to vehicles do
10727: LD_ADDR_VAR 0 14
10731: PUSH
10732: DOUBLE
10733: LD_INT 1
10735: DEC
10736: ST_TO_ADDR
10737: LD_VAR 0 25
10741: PUSH
10742: FOR_TO
10743: IFFALSE 10798
// if GetTag ( vehicles [ i ] [ 1 ] ) = 3 then
10745: LD_VAR 0 25
10749: PUSH
10750: LD_VAR 0 14
10754: ARRAY
10755: PUSH
10756: LD_INT 1
10758: ARRAY
10759: PPUSH
10760: CALL_OW 110
10764: PUSH
10765: LD_INT 3
10767: EQUAL
10768: IFFALSE 10796
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
10770: LD_ADDR_VAR 0 31
10774: PUSH
10775: LD_VAR 0 31
10779: PUSH
10780: LD_VAR 0 25
10784: PUSH
10785: LD_VAR 0 14
10789: ARRAY
10790: PUSH
10791: LD_INT 1
10793: ARRAY
10794: ADD
10795: ST_TO_ADDR
10796: GO 10742
10798: POP
10799: POP
// ComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
10800: LD_VAR 0 31
10804: PPUSH
10805: LD_INT 3
10807: PUSH
10808: LD_INT 60
10810: PUSH
10811: EMPTY
10812: LIST
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PPUSH
10818: CALL_OW 72
10822: PPUSH
10823: LD_VAR 0 50
10827: PPUSH
10828: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , GetX ( enemyUnits ) , GetY ( enemyUnits ) ) ;
10832: LD_VAR 0 31
10836: PPUSH
10837: LD_INT 3
10839: PUSH
10840: LD_INT 60
10842: PUSH
10843: EMPTY
10844: LIST
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PPUSH
10850: CALL_OW 72
10854: PPUSH
10855: LD_VAR 0 50
10859: PPUSH
10860: CALL_OW 250
10864: PPUSH
10865: LD_VAR 0 50
10869: PPUSH
10870: CALL_OW 251
10874: PPUSH
10875: CALL_OW 174
// end ;
10879: GO 10652
10881: POP
10882: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
10883: LD_ADDR_VAR 0 45
10887: PUSH
10888: LD_INT 22
10890: PUSH
10891: LD_VAR 0 1
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: PUSH
10900: LD_INT 2
10902: PUSH
10903: LD_INT 30
10905: PUSH
10906: LD_INT 31
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: LD_INT 30
10915: PUSH
10916: LD_INT 32
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: PUSH
10923: LD_INT 30
10925: PUSH
10926: LD_INT 33
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PUSH
10933: LD_INT 30
10935: PUSH
10936: LD_INT 4
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: LD_INT 30
10945: PUSH
10946: LD_INT 5
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: PPUSH
10965: CALL_OW 69
10969: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
10970: LD_ADDR_VAR 0 46
10974: PUSH
10975: LD_INT 81
10977: PUSH
10978: LD_VAR 0 1
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PUSH
10987: LD_INT 21
10989: PUSH
10990: LD_INT 3
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: PUSH
10997: LD_INT 58
10999: PUSH
11000: EMPTY
11001: LIST
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: PPUSH
11008: CALL_OW 69
11012: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
11013: LD_VAR 0 45
11017: PUSH
11018: LD_VAR 0 46
11022: AND
11023: IFFALSE 11093
// for i in attackBuildings do
11025: LD_ADDR_VAR 0 14
11029: PUSH
11030: LD_VAR 0 45
11034: PUSH
11035: FOR_IN
11036: IFFALSE 11091
// for j in enemyBuildings do
11038: LD_ADDR_VAR 0 15
11042: PUSH
11043: LD_VAR 0 46
11047: PUSH
11048: FOR_IN
11049: IFFALSE 11087
// if GetDistUnits ( i , j ) < 12 then
11051: LD_VAR 0 14
11055: PPUSH
11056: LD_VAR 0 15
11060: PPUSH
11061: CALL_OW 296
11065: PUSH
11066: LD_INT 12
11068: LESS
11069: IFFALSE 11085
// ComAttackUnit ( i , j ) ;
11071: LD_VAR 0 14
11075: PPUSH
11076: LD_VAR 0 15
11080: PPUSH
11081: CALL_OW 115
11085: GO 11048
11087: POP
11088: POP
11089: GO 11035
11091: POP
11092: POP
// if canRebuild then
11093: LD_VAR 0 12
11097: IFFALSE 11766
// begin tmp = false ;
11099: LD_ADDR_VAR 0 16
11103: PUSH
11104: LD_INT 0
11106: ST_TO_ADDR
// unit = false ;
11107: LD_ADDR_VAR 0 18
11111: PUSH
11112: LD_INT 0
11114: ST_TO_ADDR
// for destroyedBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 250 ] ] ] ) do
11115: LD_ADDR_VAR 0 36
11119: PUSH
11120: LD_VAR 0 4
11124: PPUSH
11125: LD_INT 22
11127: PUSH
11128: LD_VAR 0 1
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 21
11139: PUSH
11140: LD_INT 3
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: LD_INT 3
11149: PUSH
11150: LD_INT 24
11152: PUSH
11153: LD_INT 250
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: LIST
11168: PPUSH
11169: CALL_OW 70
11173: PUSH
11174: FOR_IN
11175: IFFALSE 11277
// begin unit = destroyedBuilding ;
11177: LD_ADDR_VAR 0 18
11181: PUSH
11182: LD_VAR 0 36
11186: ST_TO_ADDR
// for i := 1 to destroyedBuildings / 4 do
11187: LD_ADDR_VAR 0 14
11191: PUSH
11192: DOUBLE
11193: LD_INT 1
11195: DEC
11196: ST_TO_ADDR
11197: LD_VAR 0 35
11201: PUSH
11202: LD_INT 4
11204: DIVREAL
11205: PUSH
11206: FOR_TO
11207: IFFALSE 11273
// if destroyedBuildings [ i + 1 ] = GetX ( destroyedBuilding ) and destroyedBuildings [ i + 2 ] = GetY ( destroyedBuilding ) then
11209: LD_VAR 0 35
11213: PUSH
11214: LD_VAR 0 14
11218: PUSH
11219: LD_INT 1
11221: PLUS
11222: ARRAY
11223: PUSH
11224: LD_VAR 0 36
11228: PPUSH
11229: CALL_OW 250
11233: EQUAL
11234: PUSH
11235: LD_VAR 0 35
11239: PUSH
11240: LD_VAR 0 14
11244: PUSH
11245: LD_INT 2
11247: PLUS
11248: ARRAY
11249: PUSH
11250: LD_VAR 0 36
11254: PPUSH
11255: CALL_OW 251
11259: EQUAL
11260: AND
11261: IFFALSE 11271
// tmp = true ;
11263: LD_ADDR_VAR 0 16
11267: PUSH
11268: LD_INT 1
11270: ST_TO_ADDR
11271: GO 11206
11273: POP
11274: POP
// end ;
11275: GO 11174
11277: POP
11278: POP
// if not tmp and unit then
11279: LD_VAR 0 16
11283: NOT
11284: PUSH
11285: LD_VAR 0 18
11289: AND
11290: IFFALSE 11550
// begin if GetBType ( unit ) = 1 then
11292: LD_VAR 0 18
11296: PPUSH
11297: CALL_OW 266
11301: PUSH
11302: LD_INT 1
11304: EQUAL
11305: IFFALSE 11359
// destroyedBuildings = destroyedBuildings ^ [ 0 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11307: LD_ADDR_VAR 0 35
11311: PUSH
11312: LD_VAR 0 35
11316: PUSH
11317: LD_INT 0
11319: PUSH
11320: LD_VAR 0 18
11324: PPUSH
11325: CALL_OW 250
11329: PUSH
11330: LD_VAR 0 18
11334: PPUSH
11335: CALL_OW 251
11339: PUSH
11340: LD_VAR 0 18
11344: PPUSH
11345: CALL_OW 254
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: ADD
11356: ST_TO_ADDR
11357: GO 11550
// if GetBType ( unit ) = 3 then
11359: LD_VAR 0 18
11363: PPUSH
11364: CALL_OW 266
11368: PUSH
11369: LD_INT 3
11371: EQUAL
11372: IFFALSE 11426
// destroyedBuildings = destroyedBuildings ^ [ 2 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11374: LD_ADDR_VAR 0 35
11378: PUSH
11379: LD_VAR 0 35
11383: PUSH
11384: LD_INT 2
11386: PUSH
11387: LD_VAR 0 18
11391: PPUSH
11392: CALL_OW 250
11396: PUSH
11397: LD_VAR 0 18
11401: PPUSH
11402: CALL_OW 251
11406: PUSH
11407: LD_VAR 0 18
11411: PPUSH
11412: CALL_OW 254
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: ADD
11423: ST_TO_ADDR
11424: GO 11550
// if GetBType ( unit ) = 5 then
11426: LD_VAR 0 18
11430: PPUSH
11431: CALL_OW 266
11435: PUSH
11436: LD_INT 5
11438: EQUAL
11439: IFFALSE 11493
// destroyedBuildings = destroyedBuildings ^ [ 4 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11441: LD_ADDR_VAR 0 35
11445: PUSH
11446: LD_VAR 0 35
11450: PUSH
11451: LD_INT 4
11453: PUSH
11454: LD_VAR 0 18
11458: PPUSH
11459: CALL_OW 250
11463: PUSH
11464: LD_VAR 0 18
11468: PPUSH
11469: CALL_OW 251
11473: PUSH
11474: LD_VAR 0 18
11478: PPUSH
11479: CALL_OW 254
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: ADD
11490: ST_TO_ADDR
11491: GO 11550
// destroyedBuildings = destroyedBuildings ^ [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ;
11493: LD_ADDR_VAR 0 35
11497: PUSH
11498: LD_VAR 0 35
11502: PUSH
11503: LD_VAR 0 18
11507: PPUSH
11508: CALL_OW 266
11512: PUSH
11513: LD_VAR 0 18
11517: PPUSH
11518: CALL_OW 250
11522: PUSH
11523: LD_VAR 0 18
11527: PPUSH
11528: CALL_OW 251
11532: PUSH
11533: LD_VAR 0 18
11537: PPUSH
11538: CALL_OW 254
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: ADD
11549: ST_TO_ADDR
// end ; for constructedBuilding in constructedBuildings do
11550: LD_ADDR_VAR 0 37
11554: PUSH
11555: LD_VAR 0 38
11559: PUSH
11560: FOR_IN
11561: IFFALSE 11764
// for i := 1 to destroyedBuildings / 4 do
11563: LD_ADDR_VAR 0 14
11567: PUSH
11568: DOUBLE
11569: LD_INT 1
11571: DEC
11572: ST_TO_ADDR
11573: LD_VAR 0 35
11577: PUSH
11578: LD_INT 4
11580: DIVREAL
11581: PUSH
11582: FOR_TO
11583: IFFALSE 11760
// if destroyedBuildings [ i + 1 ] = GetX ( constructedBuilding ) and destroyedBuildings [ i + 2 ] = GetY ( constructedBuilding ) and IsOK ( constructedBuilding ) then
11585: LD_VAR 0 35
11589: PUSH
11590: LD_VAR 0 14
11594: PUSH
11595: LD_INT 1
11597: PLUS
11598: ARRAY
11599: PUSH
11600: LD_VAR 0 37
11604: PPUSH
11605: CALL_OW 250
11609: EQUAL
11610: PUSH
11611: LD_VAR 0 35
11615: PUSH
11616: LD_VAR 0 14
11620: PUSH
11621: LD_INT 2
11623: PLUS
11624: ARRAY
11625: PUSH
11626: LD_VAR 0 37
11630: PPUSH
11631: CALL_OW 251
11635: EQUAL
11636: AND
11637: PUSH
11638: LD_VAR 0 37
11642: PPUSH
11643: CALL_OW 302
11647: AND
11648: IFFALSE 11758
// begin destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11650: LD_ADDR_VAR 0 35
11654: PUSH
11655: LD_VAR 0 35
11659: PPUSH
11660: LD_INT 1
11662: PPUSH
11663: CALL_OW 3
11667: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11668: LD_ADDR_VAR 0 35
11672: PUSH
11673: LD_VAR 0 35
11677: PPUSH
11678: LD_INT 1
11680: PPUSH
11681: CALL_OW 3
11685: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11686: LD_ADDR_VAR 0 35
11690: PUSH
11691: LD_VAR 0 35
11695: PPUSH
11696: LD_INT 1
11698: PPUSH
11699: CALL_OW 3
11703: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11704: LD_ADDR_VAR 0 35
11708: PUSH
11709: LD_VAR 0 35
11713: PPUSH
11714: LD_INT 1
11716: PPUSH
11717: CALL_OW 3
11721: ST_TO_ADDR
// if GetType ( constructedBuilding ) in [ b_bunker , b_turret ] then
11722: LD_VAR 0 37
11726: PPUSH
11727: CALL_OW 247
11731: PUSH
11732: LD_INT 32
11734: PUSH
11735: LD_INT 33
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: IN
11742: IFFALSE 11758
// AddComPlaceWeapon ( constructedBuilding , weapons ) ;
11744: LD_VAR 0 37
11748: PPUSH
11749: LD_VAR 0 32
11753: PPUSH
11754: CALL_OW 208
// end ;
11758: GO 11582
11760: POP
11761: POP
11762: GO 11560
11764: POP
11765: POP
// end ; wait ( 0 0$01 ) ;
11766: LD_INT 35
11768: PPUSH
11769: CALL_OW 67
// until not personel ;
11773: LD_VAR 0 19
11777: NOT
11778: IFFALSE 5471
// end ; end_of_file
11780: LD_VAR 0 13
11784: RET
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
11785: LD_INT 0
11787: PPUSH
11788: PPUSH
// if debugMode then
11789: LD_EXP 33
11793: IFFALSE 11810
// unit := NewCharacter ( ident ) ;
11795: LD_ADDR_VAR 0 5
11799: PUSH
11800: LD_VAR 0 1
11804: PPUSH
11805: CALL_OW 25
11809: ST_TO_ADDR
// if exist_mode and not debugMode then
11810: LD_VAR 0 2
11814: PUSH
11815: LD_EXP 33
11819: NOT
11820: AND
11821: IFFALSE 11846
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
11823: LD_ADDR_VAR 0 5
11827: PUSH
11828: LD_EXP 32
11832: PUSH
11833: LD_VAR 0 1
11837: STR
11838: PPUSH
11839: CALL_OW 34
11843: ST_TO_ADDR
11844: GO 11868
// if not debugMode then
11846: LD_EXP 33
11850: NOT
11851: IFFALSE 11868
// unit := NewCharacter ( ident ) ;
11853: LD_ADDR_VAR 0 5
11857: PUSH
11858: LD_VAR 0 1
11862: PPUSH
11863: CALL_OW 25
11867: ST_TO_ADDR
// if class then
11868: LD_VAR 0 3
11872: IFFALSE 11888
// SetClass ( unit , class ) ;
11874: LD_VAR 0 5
11878: PPUSH
11879: LD_VAR 0 3
11883: PPUSH
11884: CALL_OW 336
// result := unit ;
11888: LD_ADDR_VAR 0 4
11892: PUSH
11893: LD_VAR 0 5
11897: ST_TO_ADDR
// end ;
11898: LD_VAR 0 4
11902: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
11903: LD_INT 0
11905: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
11906: LD_VAR 0 1
11910: PPUSH
11911: CALL_OW 255
11915: PUSH
11916: LD_VAR 0 3
11920: EQUAL
11921: PUSH
11922: LD_VAR 0 1
11926: PPUSH
11927: CALL_OW 302
11931: AND
11932: IFFALSE 11954
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
11934: LD_VAR 0 1
11938: PPUSH
11939: LD_EXP 31
11943: PUSH
11944: LD_VAR 0 2
11948: STR
11949: PPUSH
11950: CALL_OW 38
// end ;
11954: LD_VAR 0 4
11958: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
11959: LD_INT 0
11961: PPUSH
11962: PPUSH
11963: PPUSH
// resultCharactersToSave = [ ] ;
11964: LD_ADDR_VAR 0 6
11968: PUSH
11969: EMPTY
11970: ST_TO_ADDR
// for unit in characters do
11971: LD_ADDR_VAR 0 5
11975: PUSH
11976: LD_VAR 0 1
11980: PUSH
11981: FOR_IN
11982: IFFALSE 12030
// if GetSide ( unit ) = side and IsOK ( unit ) then
11984: LD_VAR 0 5
11988: PPUSH
11989: CALL_OW 255
11993: PUSH
11994: LD_VAR 0 3
11998: EQUAL
11999: PUSH
12000: LD_VAR 0 5
12004: PPUSH
12005: CALL_OW 302
12009: AND
12010: IFFALSE 12028
// resultCharactersToSave = resultCharactersToSave ^ unit ;
12012: LD_ADDR_VAR 0 6
12016: PUSH
12017: LD_VAR 0 6
12021: PUSH
12022: LD_VAR 0 5
12026: ADD
12027: ST_TO_ADDR
12028: GO 11981
12030: POP
12031: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
12032: LD_VAR 0 6
12036: PPUSH
12037: LD_EXP 31
12041: PUSH
12042: LD_VAR 0 2
12046: STR
12047: PPUSH
12048: CALL_OW 38
// end ;
12052: LD_VAR 0 4
12056: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
12057: LD_INT 0
12059: PPUSH
12060: PPUSH
// for unit in units do
12061: LD_ADDR_VAR 0 5
12065: PUSH
12066: LD_VAR 0 1
12070: PUSH
12071: FOR_IN
12072: IFFALSE 12095
// PlaceUnitArea ( unit , area , spawnMode ) ;
12074: LD_VAR 0 5
12078: PPUSH
12079: LD_VAR 0 2
12083: PPUSH
12084: LD_VAR 0 3
12088: PPUSH
12089: CALL_OW 49
12093: GO 12071
12095: POP
12096: POP
// end ;
12097: LD_VAR 0 4
12101: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
12102: LD_INT 0
12104: PPUSH
12105: PPUSH
12106: PPUSH
12107: PPUSH
// units = characters ;
12108: LD_ADDR_VAR 0 9
12112: PUSH
12113: LD_VAR 0 1
12117: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod , Kirilenkova ] ;
12118: LD_ADDR_VAR 0 9
12122: PUSH
12123: LD_VAR 0 9
12127: PUSH
12128: LD_EXP 39
12132: PUSH
12133: LD_EXP 40
12137: PUSH
12138: LD_EXP 41
12142: PUSH
12143: LD_EXP 42
12147: PUSH
12148: LD_EXP 43
12152: PUSH
12153: LD_EXP 44
12157: PUSH
12158: LD_EXP 45
12162: PUSH
12163: LD_EXP 46
12167: PUSH
12168: LD_EXP 51
12172: PUSH
12173: LD_EXP 48
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: DIFF
12190: ST_TO_ADDR
// if not units and not canTalkHero then
12191: LD_VAR 0 9
12195: NOT
12196: PUSH
12197: LD_VAR 0 5
12201: NOT
12202: AND
12203: IFFALSE 12207
// exit ;
12205: GO 12380
// if not units then
12207: LD_VAR 0 9
12211: NOT
12212: IFFALSE 12233
// units = characters diff [ Burlak ] ;
12214: LD_ADDR_VAR 0 9
12218: PUSH
12219: LD_VAR 0 1
12223: PUSH
12224: LD_EXP 39
12228: PUSH
12229: EMPTY
12230: LIST
12231: DIFF
12232: ST_TO_ADDR
// if not units and canTalkHero then
12233: LD_VAR 0 9
12237: NOT
12238: PUSH
12239: LD_VAR 0 5
12243: AND
12244: IFFALSE 12248
// exit ;
12246: GO 12380
// speaker := units [ rand ( 1 , units ) ] ;
12248: LD_ADDR_VAR 0 8
12252: PUSH
12253: LD_VAR 0 9
12257: PUSH
12258: LD_INT 1
12260: PPUSH
12261: LD_VAR 0 9
12265: PPUSH
12266: CALL_OW 12
12270: ARRAY
12271: ST_TO_ADDR
// if radio then
12272: LD_VAR 0 4
12276: IFFALSE 12325
// begin if GetSex ( speaker ) = sex_male then
12278: LD_VAR 0 8
12282: PPUSH
12283: CALL_OW 258
12287: PUSH
12288: LD_INT 1
12290: EQUAL
12291: IFFALSE 12309
// SayRadio ( speaker , dialogMID ) else
12293: LD_VAR 0 8
12297: PPUSH
12298: LD_VAR 0 2
12302: PPUSH
12303: CALL_OW 94
12307: GO 12323
// SayRadio ( speaker , dialogFID ) ;
12309: LD_VAR 0 8
12313: PPUSH
12314: LD_VAR 0 3
12318: PPUSH
12319: CALL_OW 94
// end else
12323: GO 12370
// begin if GetSex ( speaker ) = sex_male then
12325: LD_VAR 0 8
12329: PPUSH
12330: CALL_OW 258
12334: PUSH
12335: LD_INT 1
12337: EQUAL
12338: IFFALSE 12356
// Say ( speaker , dialogMID ) else
12340: LD_VAR 0 8
12344: PPUSH
12345: LD_VAR 0 2
12349: PPUSH
12350: CALL_OW 88
12354: GO 12370
// Say ( speaker , dialogFID ) ;
12356: LD_VAR 0 8
12360: PPUSH
12361: LD_VAR 0 3
12365: PPUSH
12366: CALL_OW 88
// end ; result := speaker ;
12370: LD_ADDR_VAR 0 6
12374: PUSH
12375: LD_VAR 0 8
12379: ST_TO_ADDR
// end ;
12380: LD_VAR 0 6
12384: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
12385: LD_INT 0
12387: PPUSH
12388: PPUSH
// dir := GetDir ( bunker ) - 3 ;
12389: LD_ADDR_VAR 0 4
12393: PUSH
12394: LD_VAR 0 2
12398: PPUSH
12399: CALL_OW 254
12403: PUSH
12404: LD_INT 3
12406: MINUS
12407: ST_TO_ADDR
// if dir < 0 then
12408: LD_VAR 0 4
12412: PUSH
12413: LD_INT 0
12415: LESS
12416: IFFALSE 12432
// dir := 6 + dir ;
12418: LD_ADDR_VAR 0 4
12422: PUSH
12423: LD_INT 6
12425: PUSH
12426: LD_VAR 0 4
12430: PLUS
12431: ST_TO_ADDR
// SetDir ( un , dir ) ;
12432: LD_VAR 0 1
12436: PPUSH
12437: LD_VAR 0 4
12441: PPUSH
12442: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
12446: LD_VAR 0 1
12450: PPUSH
12451: LD_VAR 0 2
12455: PPUSH
12456: CALL_OW 52
// result = un ;
12460: LD_ADDR_VAR 0 3
12464: PUSH
12465: LD_VAR 0 1
12469: ST_TO_ADDR
// end ;
12470: LD_VAR 0 3
12474: RET
// export function AddComCaptureBuilding ( engs , building ) ; var eng ; begin
12475: LD_INT 0
12477: PPUSH
12478: PPUSH
// for eng in engs do
12479: LD_ADDR_VAR 0 4
12483: PUSH
12484: LD_VAR 0 1
12488: PUSH
12489: FOR_IN
12490: IFFALSE 12607
// if GetClass ( eng ) = class_engineer and IsOK ( eng ) and building and not GetSide ( building ) = GetSide ( eng ) then
12492: LD_VAR 0 4
12496: PPUSH
12497: CALL_OW 257
12501: PUSH
12502: LD_INT 2
12504: EQUAL
12505: PUSH
12506: LD_VAR 0 4
12510: PPUSH
12511: CALL_OW 302
12515: AND
12516: PUSH
12517: LD_VAR 0 2
12521: AND
12522: PUSH
12523: LD_VAR 0 2
12527: PPUSH
12528: CALL_OW 255
12532: PUSH
12533: LD_VAR 0 4
12537: PPUSH
12538: CALL_OW 255
12542: EQUAL
12543: NOT
12544: AND
12545: IFFALSE 12605
// AddTaskList ( eng , [ [ e , GetX ( building ) , GetY ( building ) , building , 0 , 0 , 0 ] ] ) end ;
12547: LD_VAR 0 4
12551: PPUSH
12552: LD_STRING e
12554: PUSH
12555: LD_VAR 0 2
12559: PPUSH
12560: CALL_OW 250
12564: PUSH
12565: LD_VAR 0 2
12569: PPUSH
12570: CALL_OW 251
12574: PUSH
12575: LD_VAR 0 2
12579: PUSH
12580: LD_INT 0
12582: PUSH
12583: LD_INT 0
12585: PUSH
12586: LD_INT 0
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: PUSH
12598: EMPTY
12599: LIST
12600: PPUSH
12601: CALL_OW 447
12605: GO 12489
12607: POP
12608: POP
12609: LD_VAR 0 3
12613: RET
// export function Delete2D ( tab , firstIndex , secondIndex ) ; var i , list , tabPom ; begin
12614: LD_INT 0
12616: PPUSH
12617: PPUSH
12618: PPUSH
12619: PPUSH
// tabPom := Delete ( tab [ firstIndex ] , secondIndex ) ;
12620: LD_ADDR_VAR 0 7
12624: PUSH
12625: LD_VAR 0 1
12629: PUSH
12630: LD_VAR 0 2
12634: ARRAY
12635: PPUSH
12636: LD_VAR 0 3
12640: PPUSH
12641: CALL_OW 3
12645: ST_TO_ADDR
// tab := Replace ( tab , firstIndex , tabPom ) ;
12646: LD_ADDR_VAR 0 1
12650: PUSH
12651: LD_VAR 0 1
12655: PPUSH
12656: LD_VAR 0 2
12660: PPUSH
12661: LD_VAR 0 7
12665: PPUSH
12666: CALL_OW 1
12670: ST_TO_ADDR
// result := tab ;
12671: LD_ADDR_VAR 0 4
12675: PUSH
12676: LD_VAR 0 1
12680: ST_TO_ADDR
// end ;
12681: LD_VAR 0 4
12685: RET
// export function Nef_PrepareBase ( base_dep , area , name , skill , sources , nation , personel ) ; var i , j , d , b , f , x , un , base , side , buildings , tmp ; begin
12686: LD_INT 0
12688: PPUSH
12689: PPUSH
12690: PPUSH
12691: PPUSH
12692: PPUSH
12693: PPUSH
12694: PPUSH
12695: PPUSH
12696: PPUSH
12697: PPUSH
12698: PPUSH
12699: PPUSH
// result := [ ] ;
12700: LD_ADDR_VAR 0 8
12704: PUSH
12705: EMPTY
12706: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12707: LD_VAR 0 1
12711: PPUSH
12712: CALL_OW 266
12716: PUSH
12717: LD_INT 0
12719: PUSH
12720: LD_INT 1
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: IN
12727: NOT
12728: IFFALSE 12732
// exit ;
12730: GO 14410
// if name then
12732: LD_VAR 0 3
12736: IFFALSE 12752
// SetBName ( base_dep , name ) ;
12738: LD_VAR 0 1
12742: PPUSH
12743: LD_VAR 0 3
12747: PPUSH
12748: CALL_OW 500
// base := GetBase ( base_dep ) ;
12752: LD_ADDR_VAR 0 16
12756: PUSH
12757: LD_VAR 0 1
12761: PPUSH
12762: CALL_OW 274
12766: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12767: LD_ADDR_VAR 0 17
12771: PUSH
12772: LD_VAR 0 1
12776: PPUSH
12777: CALL_OW 255
12781: ST_TO_ADDR
// if sources then
12782: LD_VAR 0 5
12786: IFFALSE 12833
// for i = 1 to 3 do
12788: LD_ADDR_VAR 0 9
12792: PUSH
12793: DOUBLE
12794: LD_INT 1
12796: DEC
12797: ST_TO_ADDR
12798: LD_INT 3
12800: PUSH
12801: FOR_TO
12802: IFFALSE 12831
// AddResourceType ( base , i , sources [ i ] ) ;
12804: LD_VAR 0 16
12808: PPUSH
12809: LD_VAR 0 9
12813: PPUSH
12814: LD_VAR 0 5
12818: PUSH
12819: LD_VAR 0 9
12823: ARRAY
12824: PPUSH
12825: CALL_OW 276
12829: GO 12801
12831: POP
12832: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12833: LD_ADDR_VAR 0 18
12837: PUSH
12838: LD_VAR 0 16
12842: PPUSH
12843: LD_VAR 0 2
12847: PPUSH
12848: LD_INT 1
12850: PPUSH
12851: CALL 49755 0 3
12855: ST_TO_ADDR
// InitHc ;
12856: CALL_OW 19
// InitUc ;
12860: CALL_OW 18
// uc_side := side ;
12864: LD_ADDR_OWVAR 20
12868: PUSH
12869: LD_VAR 0 17
12873: ST_TO_ADDR
// uc_nation := nation ;
12874: LD_ADDR_OWVAR 21
12878: PUSH
12879: LD_VAR 0 6
12883: ST_TO_ADDR
// if buildings then
12884: LD_VAR 0 18
12888: IFFALSE 14269
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12890: LD_ADDR_VAR 0 19
12894: PUSH
12895: LD_VAR 0 18
12899: PPUSH
12900: LD_INT 2
12902: PUSH
12903: LD_INT 30
12905: PUSH
12906: LD_INT 29
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PUSH
12913: LD_INT 30
12915: PUSH
12916: LD_INT 30
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: LIST
12927: PPUSH
12928: CALL_OW 72
12932: ST_TO_ADDR
// if tmp then
12933: LD_VAR 0 19
12937: IFFALSE 12985
// for i in tmp do
12939: LD_ADDR_VAR 0 9
12943: PUSH
12944: LD_VAR 0 19
12948: PUSH
12949: FOR_IN
12950: IFFALSE 12983
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12952: LD_VAR 0 9
12956: PPUSH
12957: CALL_OW 250
12961: PPUSH
12962: LD_VAR 0 9
12966: PPUSH
12967: CALL_OW 251
12971: PPUSH
12972: LD_VAR 0 17
12976: PPUSH
12977: CALL_OW 441
12981: GO 12949
12983: POP
12984: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12985: LD_VAR 0 18
12989: PPUSH
12990: LD_INT 2
12992: PUSH
12993: LD_INT 30
12995: PUSH
12996: LD_INT 31
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: PUSH
13003: LD_INT 30
13005: PUSH
13006: LD_INT 32
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: PUSH
13013: LD_INT 30
13015: PUSH
13016: LD_INT 33
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: PPUSH
13029: CALL_OW 72
13033: IFFALSE 13132
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13035: LD_ADDR_VAR 0 9
13039: PUSH
13040: LD_VAR 0 18
13044: PPUSH
13045: LD_INT 2
13047: PUSH
13048: LD_INT 30
13050: PUSH
13051: LD_INT 31
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PUSH
13058: LD_INT 30
13060: PUSH
13061: LD_INT 32
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: LD_INT 30
13070: PUSH
13071: LD_INT 33
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: PPUSH
13084: CALL_OW 72
13088: PUSH
13089: FOR_IN
13090: IFFALSE 13130
// begin if not GetBWeapon ( i ) then
13092: LD_VAR 0 9
13096: PPUSH
13097: CALL_OW 269
13101: NOT
13102: IFFALSE 13128
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13104: LD_VAR 0 9
13108: PPUSH
13109: LD_VAR 0 9
13113: PPUSH
13114: LD_VAR 0 2
13118: PPUSH
13119: CALL 52017 0 2
13123: PPUSH
13124: CALL_OW 431
// end ;
13128: GO 13089
13130: POP
13131: POP
// end ; for i = 1 to personel do
13132: LD_ADDR_VAR 0 9
13136: PUSH
13137: DOUBLE
13138: LD_INT 1
13140: DEC
13141: ST_TO_ADDR
13142: LD_VAR 0 7
13146: PUSH
13147: FOR_TO
13148: IFFALSE 14249
// begin if i > 4 then
13150: LD_VAR 0 9
13154: PUSH
13155: LD_INT 4
13157: GREATER
13158: IFFALSE 13162
// break ;
13160: GO 14249
// case i of 1 :
13162: LD_VAR 0 9
13166: PUSH
13167: LD_INT 1
13169: DOUBLE
13170: EQUAL
13171: IFTRUE 13175
13173: GO 13266
13175: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13176: LD_ADDR_VAR 0 13
13180: PUSH
13181: LD_VAR 0 18
13185: PPUSH
13186: LD_INT 22
13188: PUSH
13189: LD_VAR 0 17
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 58
13200: PUSH
13201: EMPTY
13202: LIST
13203: PUSH
13204: LD_INT 2
13206: PUSH
13207: LD_INT 30
13209: PUSH
13210: LD_INT 31
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: PUSH
13217: LD_INT 30
13219: PUSH
13220: LD_INT 32
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: PUSH
13227: LD_INT 30
13229: PUSH
13230: LD_INT 4
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PUSH
13237: LD_INT 30
13239: PUSH
13240: LD_INT 5
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: LIST
13258: PPUSH
13259: CALL_OW 72
13263: ST_TO_ADDR
13264: GO 13499
13266: LD_INT 2
13268: DOUBLE
13269: EQUAL
13270: IFTRUE 13274
13272: GO 13336
13274: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13275: LD_ADDR_VAR 0 13
13279: PUSH
13280: LD_VAR 0 18
13284: PPUSH
13285: LD_INT 22
13287: PUSH
13288: LD_VAR 0 17
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: LD_INT 2
13299: PUSH
13300: LD_INT 30
13302: PUSH
13303: LD_INT 0
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PUSH
13310: LD_INT 30
13312: PUSH
13313: LD_INT 1
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: LIST
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: PPUSH
13329: CALL_OW 72
13333: ST_TO_ADDR
13334: GO 13499
13336: LD_INT 3
13338: DOUBLE
13339: EQUAL
13340: IFTRUE 13344
13342: GO 13417
13344: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_control_tower ] , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13345: LD_ADDR_VAR 0 13
13349: PUSH
13350: LD_VAR 0 18
13354: PPUSH
13355: LD_INT 22
13357: PUSH
13358: LD_VAR 0 17
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: LD_INT 2
13369: PUSH
13370: LD_INT 30
13372: PUSH
13373: LD_INT 36
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PUSH
13380: LD_INT 30
13382: PUSH
13383: LD_INT 2
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: PUSH
13390: LD_INT 30
13392: PUSH
13393: LD_INT 3
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 72
13414: ST_TO_ADDR
13415: GO 13499
13417: LD_INT 4
13419: DOUBLE
13420: EQUAL
13421: IFTRUE 13425
13423: GO 13498
13425: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13426: LD_ADDR_VAR 0 13
13430: PUSH
13431: LD_VAR 0 18
13435: PPUSH
13436: LD_INT 22
13438: PUSH
13439: LD_VAR 0 17
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 2
13450: PUSH
13451: LD_INT 30
13453: PUSH
13454: LD_INT 6
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: PUSH
13461: LD_INT 30
13463: PUSH
13464: LD_INT 7
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PUSH
13471: LD_INT 30
13473: PUSH
13474: LD_INT 8
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PPUSH
13491: CALL_OW 72
13495: ST_TO_ADDR
13496: GO 13499
13498: POP
// if i = 1 then
13499: LD_VAR 0 9
13503: PUSH
13504: LD_INT 1
13506: EQUAL
13507: IFFALSE 13625
// begin tmp := [ ] ;
13509: LD_ADDR_VAR 0 19
13513: PUSH
13514: EMPTY
13515: ST_TO_ADDR
// for j in f do
13516: LD_ADDR_VAR 0 10
13520: PUSH
13521: LD_VAR 0 13
13525: PUSH
13526: FOR_IN
13527: IFFALSE 13607
// if GetBType ( j ) in [ b_breastwork , b_bunker ] then
13529: LD_VAR 0 10
13533: PPUSH
13534: CALL_OW 266
13538: PUSH
13539: LD_INT 31
13541: PUSH
13542: LD_INT 32
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: IN
13549: IFFALSE 13576
// tmp := Insert ( tmp , 1 , j ) else
13551: LD_ADDR_VAR 0 19
13555: PUSH
13556: LD_VAR 0 19
13560: PPUSH
13561: LD_INT 1
13563: PPUSH
13564: LD_VAR 0 10
13568: PPUSH
13569: CALL_OW 2
13573: ST_TO_ADDR
13574: GO 13605
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13576: LD_ADDR_VAR 0 19
13580: PUSH
13581: LD_VAR 0 19
13585: PPUSH
13586: LD_VAR 0 19
13590: PUSH
13591: LD_INT 1
13593: PLUS
13594: PPUSH
13595: LD_VAR 0 10
13599: PPUSH
13600: CALL_OW 2
13604: ST_TO_ADDR
13605: GO 13526
13607: POP
13608: POP
// if tmp then
13609: LD_VAR 0 19
13613: IFFALSE 13625
// f := tmp ;
13615: LD_ADDR_VAR 0 13
13619: PUSH
13620: LD_VAR 0 19
13624: ST_TO_ADDR
// end ; x := personel [ i ] ;
13625: LD_ADDR_VAR 0 14
13629: PUSH
13630: LD_VAR 0 7
13634: PUSH
13635: LD_VAR 0 9
13639: ARRAY
13640: ST_TO_ADDR
// if x = - 1 then
13641: LD_VAR 0 14
13645: PUSH
13646: LD_INT 1
13648: NEG
13649: EQUAL
13650: IFFALSE 13844
// begin for j in f do
13652: LD_ADDR_VAR 0 10
13656: PUSH
13657: LD_VAR 0 13
13661: PUSH
13662: FOR_IN
13663: IFFALSE 13840
// repeat InitHc ;
13665: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13669: LD_VAR 0 10
13673: PPUSH
13674: CALL_OW 266
13678: PUSH
13679: LD_INT 5
13681: EQUAL
13682: IFFALSE 13737
// begin if UnitsInside ( j ) < 3 then
13684: LD_VAR 0 10
13688: PPUSH
13689: CALL_OW 313
13693: PUSH
13694: LD_INT 3
13696: LESS
13697: IFFALSE 13718
// PrepareHuman ( false , i , skill ) else
13699: LD_INT 0
13701: PPUSH
13702: LD_VAR 0 9
13706: PPUSH
13707: LD_VAR 0 4
13711: PPUSH
13712: CALL_OW 380
13716: GO 13735
// PrepareHuman ( false , i , skill ) ;
13718: LD_INT 0
13720: PPUSH
13721: LD_VAR 0 9
13725: PPUSH
13726: LD_VAR 0 4
13730: PPUSH
13731: CALL_OW 380
// end else
13735: GO 13754
// PrepareHuman ( false , i , skill ) ;
13737: LD_INT 0
13739: PPUSH
13740: LD_VAR 0 9
13744: PPUSH
13745: LD_VAR 0 4
13749: PPUSH
13750: CALL_OW 380
// un := CreateHuman ;
13754: LD_ADDR_VAR 0 15
13758: PUSH
13759: CALL_OW 44
13763: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13764: LD_ADDR_VAR 0 8
13768: PUSH
13769: LD_VAR 0 8
13773: PPUSH
13774: LD_INT 1
13776: PPUSH
13777: LD_VAR 0 15
13781: PPUSH
13782: CALL_OW 2
13786: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13787: LD_VAR 0 15
13791: PPUSH
13792: LD_VAR 0 10
13796: PPUSH
13797: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13801: LD_VAR 0 10
13805: PPUSH
13806: CALL_OW 313
13810: PUSH
13811: LD_INT 6
13813: EQUAL
13814: PUSH
13815: LD_VAR 0 10
13819: PPUSH
13820: CALL_OW 266
13824: PUSH
13825: LD_INT 32
13827: PUSH
13828: LD_INT 31
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: IN
13835: OR
13836: IFFALSE 13665
13838: GO 13662
13840: POP
13841: POP
// end else
13842: GO 14247
// for j = 1 to x do
13844: LD_ADDR_VAR 0 10
13848: PUSH
13849: DOUBLE
13850: LD_INT 1
13852: DEC
13853: ST_TO_ADDR
13854: LD_VAR 0 14
13858: PUSH
13859: FOR_TO
13860: IFFALSE 14245
// begin InitHc ;
13862: CALL_OW 19
// if not f then
13866: LD_VAR 0 13
13870: NOT
13871: IFFALSE 13960
// begin PrepareHuman ( false , i , skill ) ;
13873: LD_INT 0
13875: PPUSH
13876: LD_VAR 0 9
13880: PPUSH
13881: LD_VAR 0 4
13885: PPUSH
13886: CALL_OW 380
// un := CreateHuman ;
13890: LD_ADDR_VAR 0 15
13894: PUSH
13895: CALL_OW 44
13899: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13900: LD_ADDR_VAR 0 8
13904: PUSH
13905: LD_VAR 0 8
13909: PPUSH
13910: LD_INT 1
13912: PPUSH
13913: LD_VAR 0 15
13917: PPUSH
13918: CALL_OW 2
13922: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13923: LD_VAR 0 15
13927: PPUSH
13928: LD_VAR 0 1
13932: PPUSH
13933: CALL_OW 250
13937: PPUSH
13938: LD_VAR 0 1
13942: PPUSH
13943: CALL_OW 251
13947: PPUSH
13948: LD_INT 10
13950: PPUSH
13951: LD_INT 0
13953: PPUSH
13954: CALL_OW 50
// continue ;
13958: GO 13859
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 3 and GetBType ( f [ 1 ] ) = b_control_tower ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13960: LD_VAR 0 13
13964: PUSH
13965: LD_INT 1
13967: ARRAY
13968: PPUSH
13969: CALL_OW 313
13973: PUSH
13974: LD_VAR 0 13
13978: PUSH
13979: LD_INT 1
13981: ARRAY
13982: PPUSH
13983: CALL_OW 266
13987: PUSH
13988: LD_INT 32
13990: PUSH
13991: LD_INT 31
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: IN
13998: AND
13999: PUSH
14000: LD_VAR 0 13
14004: PUSH
14005: LD_INT 1
14007: ARRAY
14008: PPUSH
14009: CALL_OW 313
14013: PUSH
14014: LD_INT 3
14016: EQUAL
14017: PUSH
14018: LD_VAR 0 13
14022: PUSH
14023: LD_INT 1
14025: ARRAY
14026: PPUSH
14027: CALL_OW 266
14031: PUSH
14032: LD_INT 36
14034: EQUAL
14035: AND
14036: OR
14037: PUSH
14038: LD_VAR 0 13
14042: PUSH
14043: LD_INT 1
14045: ARRAY
14046: PPUSH
14047: CALL_OW 313
14051: PUSH
14052: LD_INT 6
14054: EQUAL
14055: OR
14056: IFFALSE 14076
// f := Delete ( f , 1 ) ;
14058: LD_ADDR_VAR 0 13
14062: PUSH
14063: LD_VAR 0 13
14067: PPUSH
14068: LD_INT 1
14070: PPUSH
14071: CALL_OW 3
14075: ST_TO_ADDR
// if not f then
14076: LD_VAR 0 13
14080: NOT
14081: IFFALSE 14099
// begin x := x + 2 ;
14083: LD_ADDR_VAR 0 14
14087: PUSH
14088: LD_VAR 0 14
14092: PUSH
14093: LD_INT 2
14095: PLUS
14096: ST_TO_ADDR
// continue ;
14097: GO 13859
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14099: LD_VAR 0 13
14103: PUSH
14104: LD_INT 1
14106: ARRAY
14107: PPUSH
14108: CALL_OW 266
14112: PUSH
14113: LD_INT 5
14115: EQUAL
14116: IFFALSE 14175
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14118: LD_VAR 0 13
14122: PUSH
14123: LD_INT 1
14125: ARRAY
14126: PPUSH
14127: CALL_OW 313
14131: PUSH
14132: LD_INT 3
14134: LESS
14135: IFFALSE 14156
// PrepareHuman ( false , i , skill ) else
14137: LD_INT 0
14139: PPUSH
14140: LD_VAR 0 9
14144: PPUSH
14145: LD_VAR 0 4
14149: PPUSH
14150: CALL_OW 380
14154: GO 14173
// PrepareHuman ( false , i , skill ) ;
14156: LD_INT 0
14158: PPUSH
14159: LD_VAR 0 9
14163: PPUSH
14164: LD_VAR 0 4
14168: PPUSH
14169: CALL_OW 380
// end else
14173: GO 14192
// PrepareHuman ( false , i , skill ) ;
14175: LD_INT 0
14177: PPUSH
14178: LD_VAR 0 9
14182: PPUSH
14183: LD_VAR 0 4
14187: PPUSH
14188: CALL_OW 380
// un := CreateHuman ;
14192: LD_ADDR_VAR 0 15
14196: PUSH
14197: CALL_OW 44
14201: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14202: LD_ADDR_VAR 0 8
14206: PUSH
14207: LD_VAR 0 8
14211: PPUSH
14212: LD_INT 1
14214: PPUSH
14215: LD_VAR 0 15
14219: PPUSH
14220: CALL_OW 2
14224: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14225: LD_VAR 0 15
14229: PPUSH
14230: LD_VAR 0 13
14234: PUSH
14235: LD_INT 1
14237: ARRAY
14238: PPUSH
14239: CALL_OW 52
// end ;
14243: GO 13859
14245: POP
14246: POP
// end ;
14247: GO 13147
14249: POP
14250: POP
// result := result ^ buildings ;
14251: LD_ADDR_VAR 0 8
14255: PUSH
14256: LD_VAR 0 8
14260: PUSH
14261: LD_VAR 0 18
14265: ADD
14266: ST_TO_ADDR
// end else
14267: GO 14410
// begin for i = 1 to personel do
14269: LD_ADDR_VAR 0 9
14273: PUSH
14274: DOUBLE
14275: LD_INT 1
14277: DEC
14278: ST_TO_ADDR
14279: LD_VAR 0 7
14283: PUSH
14284: FOR_TO
14285: IFFALSE 14408
// begin if i > 4 then
14287: LD_VAR 0 9
14291: PUSH
14292: LD_INT 4
14294: GREATER
14295: IFFALSE 14299
// break ;
14297: GO 14408
// x := personel [ i ] ;
14299: LD_ADDR_VAR 0 14
14303: PUSH
14304: LD_VAR 0 7
14308: PUSH
14309: LD_VAR 0 9
14313: ARRAY
14314: ST_TO_ADDR
// if x = - 1 then
14315: LD_VAR 0 14
14319: PUSH
14320: LD_INT 1
14322: NEG
14323: EQUAL
14324: IFFALSE 14328
// continue ;
14326: GO 14284
// PrepareHuman ( false , i , skill ) ;
14328: LD_INT 0
14330: PPUSH
14331: LD_VAR 0 9
14335: PPUSH
14336: LD_VAR 0 4
14340: PPUSH
14341: CALL_OW 380
// un := CreateHuman ;
14345: LD_ADDR_VAR 0 15
14349: PUSH
14350: CALL_OW 44
14354: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14355: LD_VAR 0 15
14359: PPUSH
14360: LD_VAR 0 1
14364: PPUSH
14365: CALL_OW 250
14369: PPUSH
14370: LD_VAR 0 1
14374: PPUSH
14375: CALL_OW 251
14379: PPUSH
14380: LD_INT 10
14382: PPUSH
14383: LD_INT 0
14385: PPUSH
14386: CALL_OW 50
// result := result ^ un ;
14390: LD_ADDR_VAR 0 8
14394: PUSH
14395: LD_VAR 0 8
14399: PUSH
14400: LD_VAR 0 15
14404: ADD
14405: ST_TO_ADDR
// end ;
14406: GO 14284
14408: POP
14409: POP
// end ; end ;
14410: LD_VAR 0 8
14414: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
14415: LD_INT 0
14417: PPUSH
14418: PPUSH
14419: PPUSH
14420: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
14421: LD_ADDR_VAR 0 6
14425: PUSH
14426: LD_INT 34
14428: PUSH
14429: LD_INT 71
14431: PUSH
14432: LD_INT 70
14434: PUSH
14435: LD_INT 69
14437: PUSH
14438: LD_INT 39
14440: PUSH
14441: LD_INT 31
14443: PUSH
14444: LD_INT 14
14446: PUSH
14447: LD_INT 10
14449: PUSH
14450: LD_INT 40
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: ST_TO_ADDR
// resultWeapons = [ ] ;
14464: LD_ADDR_VAR 0 5
14468: PUSH
14469: EMPTY
14470: ST_TO_ADDR
// for i := 1 to weaponTechs do
14471: LD_ADDR_VAR 0 4
14475: PUSH
14476: DOUBLE
14477: LD_INT 1
14479: DEC
14480: ST_TO_ADDR
14481: LD_VAR 0 6
14485: PUSH
14486: FOR_TO
14487: IFFALSE 14674
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
14489: LD_VAR 0 6
14493: PUSH
14494: LD_VAR 0 4
14498: ARRAY
14499: PPUSH
14500: LD_VAR 0 2
14504: PPUSH
14505: CALL_OW 482
14509: PUSH
14510: LD_VAR 0 6
14514: PUSH
14515: LD_VAR 0 4
14519: ARRAY
14520: PPUSH
14521: LD_VAR 0 1
14525: PPUSH
14526: CALL_OW 321
14530: PUSH
14531: LD_INT 2
14533: EQUAL
14534: AND
14535: IFFALSE 14672
// case nation of nation_american :
14537: LD_VAR 0 2
14541: PUSH
14542: LD_INT 1
14544: DOUBLE
14545: EQUAL
14546: IFTRUE 14550
14548: GO 14585
14550: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
14551: LD_ADDR_VAR 0 5
14555: PUSH
14556: LD_VAR 0 5
14560: PUSH
14561: LD_VAR 0 6
14565: PUSH
14566: LD_VAR 0 4
14570: ARRAY
14571: PPUSH
14572: LD_VAR 0 2
14576: PPUSH
14577: CALL 14691 0 2
14581: ADD
14582: ST_TO_ADDR
14583: GO 14672
14585: LD_INT 2
14587: DOUBLE
14588: EQUAL
14589: IFTRUE 14593
14591: GO 14628
14593: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
14594: LD_ADDR_VAR 0 5
14598: PUSH
14599: LD_VAR 0 5
14603: PUSH
14604: LD_VAR 0 6
14608: PUSH
14609: LD_VAR 0 4
14613: ARRAY
14614: PPUSH
14615: LD_VAR 0 2
14619: PPUSH
14620: CALL 14691 0 2
14624: ADD
14625: ST_TO_ADDR
14626: GO 14672
14628: LD_INT 3
14630: DOUBLE
14631: EQUAL
14632: IFTRUE 14636
14634: GO 14671
14636: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
14637: LD_ADDR_VAR 0 5
14641: PUSH
14642: LD_VAR 0 5
14646: PUSH
14647: LD_VAR 0 6
14651: PUSH
14652: LD_VAR 0 4
14656: ARRAY
14657: PPUSH
14658: LD_VAR 0 2
14662: PPUSH
14663: CALL 14691 0 2
14667: ADD
14668: ST_TO_ADDR
14669: GO 14672
14671: POP
// end ;
14672: GO 14486
14674: POP
14675: POP
// result = resultWeapons ;
14676: LD_ADDR_VAR 0 3
14680: PUSH
14681: LD_VAR 0 5
14685: ST_TO_ADDR
// end ;
14686: LD_VAR 0 3
14690: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
14691: LD_INT 0
14693: PPUSH
// case tech of tech_AdvMet :
14694: LD_VAR 0 1
14698: PUSH
14699: LD_INT 34
14701: DOUBLE
14702: EQUAL
14703: IFTRUE 14707
14705: GO 14735
14707: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
14708: LD_ADDR_VAR 0 3
14712: PUSH
14713: LD_INT 6
14715: PUSH
14716: LD_STRING 
14718: PUSH
14719: LD_INT 46
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: LIST
14726: PUSH
14727: LD_VAR 0 2
14731: ARRAY
14732: ST_TO_ADDR
14733: GO 15024
14735: LD_INT 71
14737: DOUBLE
14738: EQUAL
14739: IFTRUE 14743
14741: GO 14771
14743: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
14744: LD_ADDR_VAR 0 3
14748: PUSH
14749: LD_STRING 
14751: PUSH
14752: LD_STRING 
14754: PUSH
14755: LD_INT 47
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: LIST
14762: PUSH
14763: LD_VAR 0 2
14767: ARRAY
14768: ST_TO_ADDR
14769: GO 15024
14771: LD_INT 70
14773: DOUBLE
14774: EQUAL
14775: IFTRUE 14779
14777: GO 14807
14779: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
14780: LD_ADDR_VAR 0 3
14784: PUSH
14785: LD_STRING 
14787: PUSH
14788: LD_INT 26
14790: PUSH
14791: LD_STRING 
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: LIST
14798: PUSH
14799: LD_VAR 0 2
14803: ARRAY
14804: ST_TO_ADDR
14805: GO 15024
14807: LD_INT 69
14809: DOUBLE
14810: EQUAL
14811: IFTRUE 14815
14813: GO 14843
14815: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
14816: LD_ADDR_VAR 0 3
14820: PUSH
14821: LD_INT 4
14823: PUSH
14824: LD_INT 25
14826: PUSH
14827: LD_INT 43
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: LIST
14834: PUSH
14835: LD_VAR 0 2
14839: ARRAY
14840: ST_TO_ADDR
14841: GO 15024
14843: LD_INT 39
14845: DOUBLE
14846: EQUAL
14847: IFTRUE 14851
14849: GO 14879
14851: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
14852: LD_ADDR_VAR 0 3
14856: PUSH
14857: LD_INT 5
14859: PUSH
14860: LD_INT 27
14862: PUSH
14863: LD_INT 44
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: LIST
14870: PUSH
14871: LD_VAR 0 2
14875: ARRAY
14876: ST_TO_ADDR
14877: GO 15024
14879: LD_INT 31
14881: DOUBLE
14882: EQUAL
14883: IFTRUE 14887
14885: GO 14915
14887: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
14888: LD_ADDR_VAR 0 3
14892: PUSH
14893: LD_STRING 
14895: PUSH
14896: LD_STRING 
14898: PUSH
14899: LD_INT 49
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: LIST
14906: PUSH
14907: LD_VAR 0 2
14911: ARRAY
14912: ST_TO_ADDR
14913: GO 15024
14915: LD_INT 14
14917: DOUBLE
14918: EQUAL
14919: IFTRUE 14923
14921: GO 14951
14923: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
14924: LD_ADDR_VAR 0 3
14928: PUSH
14929: LD_INT 10
14931: PUSH
14932: LD_STRING 
14934: PUSH
14935: LD_STRING 
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: LIST
14942: PUSH
14943: LD_VAR 0 2
14947: ARRAY
14948: ST_TO_ADDR
14949: GO 15024
14951: LD_INT 10
14953: DOUBLE
14954: EQUAL
14955: IFTRUE 14959
14957: GO 14987
14959: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
14960: LD_ADDR_VAR 0 3
14964: PUSH
14965: LD_INT 9
14967: PUSH
14968: LD_STRING 
14970: PUSH
14971: LD_STRING 
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: LIST
14978: PUSH
14979: LD_VAR 0 2
14983: ARRAY
14984: ST_TO_ADDR
14985: GO 15024
14987: LD_INT 40
14989: DOUBLE
14990: EQUAL
14991: IFTRUE 14995
14993: GO 15023
14995: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
14996: LD_ADDR_VAR 0 3
15000: PUSH
15001: LD_INT 7
15003: PUSH
15004: LD_INT 28
15006: PUSH
15007: LD_INT 45
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: LIST
15014: PUSH
15015: LD_VAR 0 2
15019: ARRAY
15020: ST_TO_ADDR
15021: GO 15024
15023: POP
// end ;
15024: LD_VAR 0 3
15028: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
15029: LD_INT 0
15031: PPUSH
15032: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
15033: LD_ADDR_VAR 0 2
15037: PUSH
15038: LD_VAR 0 1
15042: PPUSH
15043: LD_INT 1
15045: PPUSH
15046: CALL_OW 289
15050: PUSH
15051: LD_VAR 0 1
15055: PPUSH
15056: LD_INT 2
15058: PPUSH
15059: CALL_OW 289
15063: PUSH
15064: LD_VAR 0 1
15068: PPUSH
15069: LD_INT 3
15071: PPUSH
15072: CALL_OW 289
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: LIST
15081: ST_TO_ADDR
// end ;
15082: LD_VAR 0 2
15086: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
15087: LD_INT 0
15089: PPUSH
15090: PPUSH
// area = ListEnvironmentArea ( area ) ;
15091: LD_ADDR_VAR 0 2
15095: PUSH
15096: LD_VAR 0 2
15100: PPUSH
15101: CALL_OW 353
15105: ST_TO_ADDR
// if bulldozer > 0 then
15106: LD_VAR 0 1
15110: PUSH
15111: LD_INT 0
15113: GREATER
15114: IFFALSE 15225
// for i = area downto 1 do
15116: LD_ADDR_VAR 0 4
15120: PUSH
15121: DOUBLE
15122: LD_VAR 0 2
15126: INC
15127: ST_TO_ADDR
15128: LD_INT 1
15130: PUSH
15131: FOR_DOWNTO
15132: IFFALSE 15223
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
15134: LD_VAR 0 2
15138: PUSH
15139: LD_VAR 0 4
15143: ARRAY
15144: PUSH
15145: LD_INT 1
15147: ARRAY
15148: PPUSH
15149: LD_VAR 0 2
15153: PUSH
15154: LD_VAR 0 4
15158: ARRAY
15159: PUSH
15160: LD_INT 2
15162: ARRAY
15163: PPUSH
15164: CALL_OW 351
15168: IFFALSE 15221
// if not HasTask ( bulldozer ) then
15170: LD_VAR 0 1
15174: PPUSH
15175: CALL_OW 314
15179: NOT
15180: IFFALSE 15221
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
15182: LD_VAR 0 1
15186: PPUSH
15187: LD_VAR 0 2
15191: PUSH
15192: LD_VAR 0 4
15196: ARRAY
15197: PUSH
15198: LD_INT 1
15200: ARRAY
15201: PPUSH
15202: LD_VAR 0 2
15206: PUSH
15207: LD_VAR 0 4
15211: ARRAY
15212: PUSH
15213: LD_INT 2
15215: ARRAY
15216: PPUSH
15217: CALL_OW 171
15221: GO 15131
15223: POP
15224: POP
// end ;
15225: LD_VAR 0 3
15229: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
15230: LD_INT 0
15232: PPUSH
15233: PPUSH
15234: PPUSH
// uc_side := GetSide ( b ) ;
15235: LD_ADDR_OWVAR 20
15239: PUSH
15240: LD_VAR 0 2
15244: PPUSH
15245: CALL_OW 255
15249: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
15250: LD_ADDR_OWVAR 21
15254: PUSH
15255: LD_VAR 0 2
15259: PPUSH
15260: CALL_OW 248
15264: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
15265: LD_INT 0
15267: PPUSH
15268: LD_INT 1
15270: PPUSH
15271: LD_VAR 0 1
15275: PPUSH
15276: CALL_OW 380
// un = CreateHuman ;
15280: LD_ADDR_VAR 0 4
15284: PUSH
15285: CALL_OW 44
15289: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
15290: LD_ADDR_VAR 0 5
15294: PUSH
15295: LD_VAR 0 2
15299: PPUSH
15300: CALL_OW 254
15304: PUSH
15305: LD_INT 3
15307: MINUS
15308: ST_TO_ADDR
// if dir < 0 then
15309: LD_VAR 0 5
15313: PUSH
15314: LD_INT 0
15316: LESS
15317: IFFALSE 15333
// dir := 6 + dir ;
15319: LD_ADDR_VAR 0 5
15323: PUSH
15324: LD_INT 6
15326: PUSH
15327: LD_VAR 0 5
15331: PLUS
15332: ST_TO_ADDR
// SetDir ( un , dir ) ;
15333: LD_VAR 0 4
15337: PPUSH
15338: LD_VAR 0 5
15342: PPUSH
15343: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
15347: LD_VAR 0 4
15351: PPUSH
15352: LD_VAR 0 2
15356: PPUSH
15357: CALL_OW 52
// result = un ;
15361: LD_ADDR_VAR 0 3
15365: PUSH
15366: LD_VAR 0 4
15370: ST_TO_ADDR
// end ;
15371: LD_VAR 0 3
15375: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others , max , test1 , test2 ; begin
15376: LD_INT 0
15378: PPUSH
15379: PPUSH
15380: PPUSH
15381: PPUSH
15382: PPUSH
15383: PPUSH
15384: PPUSH
15385: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Burlak , Vsevolod ] ;
15386: LD_ADDR_VAR 0 3
15390: PUSH
15391: LD_INT 22
15393: PUSH
15394: LD_INT 3
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 21
15403: PUSH
15404: LD_INT 1
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 23
15413: PUSH
15414: LD_INT 3
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: LIST
15425: PPUSH
15426: CALL_OW 69
15430: PUSH
15431: LD_EXP 39
15435: PUSH
15436: LD_EXP 51
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: DIFF
15445: ST_TO_ADDR
// charsToChoose = charsToChoose diff vsevolodTeam ;
15446: LD_ADDR_VAR 0 3
15450: PUSH
15451: LD_VAR 0 3
15455: PUSH
15456: LD_EXP 52
15460: DIFF
15461: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam diff Vsevolod ;
15462: LD_ADDR_EXP 52
15466: PUSH
15467: LD_EXP 52
15471: PUSH
15472: LD_EXP 51
15476: DIFF
15477: ST_TO_ADDR
// max = charsToChoose div 2 + charsToChoose mod 2 ;
15478: LD_ADDR_VAR 0 6
15482: PUSH
15483: LD_VAR 0 3
15487: PUSH
15488: LD_INT 2
15490: DIV
15491: PUSH
15492: LD_VAR 0 3
15496: PUSH
15497: LD_INT 2
15499: MOD
15500: PLUS
15501: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 0 , 3 , [ Burlak , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_not_hired ] ^ vsevolodTeam ^ [ sel_not_changeable , Vsevolod ] , [ class_soldier , class_mechanic , class_engineer , class_scientistic ] ) ;
15502: LD_ADDR_VAR 0 4
15506: PUSH
15507: LD_STRING text
15509: PPUSH
15510: LD_INT 0
15512: PPUSH
15513: LD_INT 3
15515: PPUSH
15516: LD_EXP 39
15520: PUSH
15521: LD_INT -3
15523: PUSH
15524: LD_INT -5
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: PUSH
15532: LD_VAR 0 3
15536: ADD
15537: PUSH
15538: LD_INT -2
15540: PUSH
15541: EMPTY
15542: LIST
15543: ADD
15544: PUSH
15545: LD_EXP 52
15549: ADD
15550: PUSH
15551: LD_INT -4
15553: PUSH
15554: LD_EXP 51
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: ADD
15563: PPUSH
15564: LD_INT 1
15566: PUSH
15567: LD_INT 3
15569: PUSH
15570: LD_INT 2
15572: PUSH
15573: LD_INT 4
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: PPUSH
15582: CALL_OW 42
15586: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) , 6 ) ;
15587: LD_INT 22
15589: PUSH
15590: LD_INT 3
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 21
15599: PUSH
15600: LD_INT 1
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: LD_INT 23
15609: PUSH
15610: LD_INT 3
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: LIST
15621: PPUSH
15622: CALL_OW 69
15626: PPUSH
15627: LD_INT 6
15629: PPUSH
15630: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
15634: LD_VAR 0 4
15638: PPUSH
15639: LD_INT 3
15641: PPUSH
15642: CALL_OW 235
// SetSide ( Burlak , 3 ) ;
15646: LD_EXP 39
15650: PPUSH
15651: LD_INT 3
15653: PPUSH
15654: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
15658: LD_ADDR_VAR 0 2
15662: PUSH
15663: LD_INT 22
15665: PUSH
15666: LD_INT 6
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: LD_INT 21
15675: PUSH
15676: LD_INT 1
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PPUSH
15687: CALL_OW 69
15691: PUSH
15692: FOR_IN
15693: IFFALSE 15726
// if IsInUnit ( i ) then
15695: LD_VAR 0 2
15699: PPUSH
15700: CALL_OW 310
15704: IFFALSE 15724
// begin ComExitVehicle ( i ) ;
15706: LD_VAR 0 2
15710: PPUSH
15711: CALL_OW 121
// ComExitBuilding ( i ) ;
15715: LD_VAR 0 2
15719: PPUSH
15720: CALL_OW 122
// end ;
15724: GO 15692
15726: POP
15727: POP
// if not Vsevolod in selectedPeople then
15728: LD_EXP 51
15732: PUSH
15733: LD_VAR 0 4
15737: IN
15738: NOT
15739: IFFALSE 15756
// ExtSaveCharacter ( Vsevolod , Vsevolod , 6 ) ;
15741: LD_EXP 51
15745: PPUSH
15746: LD_STRING Vsevolod
15748: PPUSH
15749: LD_INT 6
15751: PPUSH
15752: CALL 11903 0 3
// if not Karamazov in selectedPeople then
15756: LD_EXP 40
15760: PUSH
15761: LD_VAR 0 4
15765: IN
15766: NOT
15767: IFFALSE 15784
// ExtSaveCharacter ( Karamazov , VSKaramazov , 6 ) ;
15769: LD_EXP 40
15773: PPUSH
15774: LD_STRING VSKaramazov
15776: PPUSH
15777: LD_INT 6
15779: PPUSH
15780: CALL 11903 0 3
// if not Petrovova in selectedPeople then
15784: LD_EXP 41
15788: PUSH
15789: LD_VAR 0 4
15793: IN
15794: NOT
15795: IFFALSE 15812
// ExtSaveCharacter ( Petrovova , VSPetrovova , 6 ) ;
15797: LD_EXP 41
15801: PPUSH
15802: LD_STRING VSPetrovova
15804: PPUSH
15805: LD_INT 6
15807: PPUSH
15808: CALL 11903 0 3
// if not Gleb in selectedPeople then
15812: LD_EXP 42
15816: PUSH
15817: LD_VAR 0 4
15821: IN
15822: NOT
15823: IFFALSE 15840
// ExtSaveCharacter ( Gleb , VSGleb , 6 ) ;
15825: LD_EXP 42
15829: PPUSH
15830: LD_STRING VSGleb
15832: PPUSH
15833: LD_INT 6
15835: PPUSH
15836: CALL 11903 0 3
// if not Petrosyan in selectedPeople then
15840: LD_EXP 43
15844: PUSH
15845: LD_VAR 0 4
15849: IN
15850: NOT
15851: IFFALSE 15868
// ExtSaveCharacter ( Petrosyan , VSPetrosyan , 6 ) ;
15853: LD_EXP 43
15857: PPUSH
15858: LD_STRING VSPetrosyan
15860: PPUSH
15861: LD_INT 6
15863: PPUSH
15864: CALL 11903 0 3
// if not Titov in selectedPeople then
15868: LD_EXP 44
15872: PUSH
15873: LD_VAR 0 4
15877: IN
15878: NOT
15879: IFFALSE 15896
// ExtSaveCharacter ( Titov , VSTitov , 6 ) ;
15881: LD_EXP 44
15885: PPUSH
15886: LD_STRING VSTitov
15888: PPUSH
15889: LD_INT 6
15891: PPUSH
15892: CALL 11903 0 3
// if not Dolgov in selectedPeople then
15896: LD_EXP 45
15900: PUSH
15901: LD_VAR 0 4
15905: IN
15906: NOT
15907: IFFALSE 15924
// ExtSaveCharacter ( Dolgov , VSDolgov , 6 ) ;
15909: LD_EXP 45
15913: PPUSH
15914: LD_STRING VSDolgov
15916: PPUSH
15917: LD_INT 6
15919: PPUSH
15920: CALL 11903 0 3
// if not Lipshchin in selectedPeople then
15924: LD_EXP 46
15928: PUSH
15929: LD_VAR 0 4
15933: IN
15934: NOT
15935: IFFALSE 15952
// ExtSaveCharacter ( Lipshchin , VSLipshchin , 6 ) ;
15937: LD_EXP 46
15941: PPUSH
15942: LD_STRING VSLipshchin
15944: PPUSH
15945: LD_INT 6
15947: PPUSH
15948: CALL 11903 0 3
// others = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod ] ;
15952: LD_ADDR_VAR 0 5
15956: PUSH
15957: LD_INT 22
15959: PUSH
15960: LD_INT 6
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: LD_INT 21
15969: PUSH
15970: LD_INT 1
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: LD_INT 23
15979: PUSH
15980: LD_INT 3
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: LIST
15991: PPUSH
15992: CALL_OW 69
15996: PUSH
15997: LD_EXP 40
16001: PUSH
16002: LD_EXP 41
16006: PUSH
16007: LD_EXP 42
16011: PUSH
16012: LD_EXP 43
16016: PUSH
16017: LD_EXP 44
16021: PUSH
16022: LD_EXP 45
16026: PUSH
16027: LD_EXP 46
16031: PUSH
16032: LD_EXP 51
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: DIFF
16047: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_vsevolod , 6 ) ;
16048: LD_VAR 0 5
16052: PPUSH
16053: LD_STRING other_survivors_with_vsevolod
16055: PPUSH
16056: LD_INT 6
16058: PPUSH
16059: CALL 11959 0 3
// end ; end_of_file
16063: LD_VAR 0 1
16067: RET
// export function MissionIntro ; var i , ruEng , unit ; begin
16068: LD_INT 0
16070: PPUSH
16071: PPUSH
16072: PPUSH
16073: PPUSH
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) ;
16074: LD_EXP 39
16078: PPUSH
16079: CALL_OW 310
16083: PPUSH
16084: CALL_OW 87
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
16088: LD_ADDR_VAR 0 4
16092: PUSH
16093: LD_INT 22
16095: PUSH
16096: LD_INT 3
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: LD_INT 21
16105: PUSH
16106: LD_INT 2
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PPUSH
16117: CALL_OW 69
16121: PUSH
16122: FOR_IN
16123: IFFALSE 16187
// begin if ( i mod 2 ) = 0 then
16125: LD_VAR 0 2
16129: PUSH
16130: LD_INT 2
16132: MOD
16133: PUSH
16134: LD_INT 0
16136: EQUAL
16137: IFFALSE 16156
// ComMoveXY ( unit , 156 , 205 ) else
16139: LD_VAR 0 4
16143: PPUSH
16144: LD_INT 156
16146: PPUSH
16147: LD_INT 205
16149: PPUSH
16150: CALL_OW 111
16154: GO 16171
// ComMoveXY ( unit , 160 , 215 ) ;
16156: LD_VAR 0 4
16160: PPUSH
16161: LD_INT 160
16163: PPUSH
16164: LD_INT 215
16166: PPUSH
16167: CALL_OW 111
// i = i + 1 ;
16171: LD_ADDR_VAR 0 2
16175: PUSH
16176: LD_VAR 0 2
16180: PUSH
16181: LD_INT 1
16183: PLUS
16184: ST_TO_ADDR
// end ;
16185: GO 16122
16187: POP
16188: POP
// if IsOK ( Karamazov ) then
16189: LD_EXP 40
16193: PPUSH
16194: CALL_OW 302
16198: IFFALSE 16212
// ruEng = Karamazov else
16200: LD_ADDR_VAR 0 3
16204: PUSH
16205: LD_EXP 40
16209: ST_TO_ADDR
16210: GO 16295
// if IsOK ( Lipshchin ) then
16212: LD_EXP 46
16216: PPUSH
16217: CALL_OW 302
16221: IFFALSE 16235
// ruEng = Lipshchin else
16223: LD_ADDR_VAR 0 3
16227: PUSH
16228: LD_EXP 46
16232: ST_TO_ADDR
16233: GO 16295
// ruEng = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_class , class_engineer ] ] ) [ 1 ] ;
16235: LD_ADDR_VAR 0 3
16239: PUSH
16240: LD_INT 22
16242: PUSH
16243: LD_INT 3
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 21
16252: PUSH
16253: LD_INT 1
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 23
16262: PUSH
16263: LD_INT 3
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 25
16272: PUSH
16273: LD_INT 2
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: PPUSH
16286: CALL_OW 69
16290: PUSH
16291: LD_INT 1
16293: ARRAY
16294: ST_TO_ADDR
// wait ( 0 0$3 ) ;
16295: LD_INT 105
16297: PPUSH
16298: CALL_OW 67
// CenterOnXY ( 160 , 213 ) ;
16302: LD_INT 160
16304: PPUSH
16305: LD_INT 213
16307: PPUSH
16308: CALL_OW 84
// wait ( 0 0$3 ) ;
16312: LD_INT 105
16314: PPUSH
16315: CALL_OW 67
// CenterOnXY ( 149 , 211 ) ;
16319: LD_INT 149
16321: PPUSH
16322: LD_INT 211
16324: PPUSH
16325: CALL_OW 84
// repeat ComMoveXY ( IsInUnit ( ruEng ) , 149 , 212 ) ;
16329: LD_VAR 0 3
16333: PPUSH
16334: CALL_OW 310
16338: PPUSH
16339: LD_INT 149
16341: PPUSH
16342: LD_INT 212
16344: PPUSH
16345: CALL_OW 111
// wait ( 0 0$1 ) ;
16349: LD_INT 35
16351: PPUSH
16352: CALL_OW 67
// until GetDistUnitXY ( IsInUnit ( ruEng ) , 149 , 212 ) <= 2 ;
16356: LD_VAR 0 3
16360: PPUSH
16361: CALL_OW 310
16365: PPUSH
16366: LD_INT 149
16368: PPUSH
16369: LD_INT 212
16371: PPUSH
16372: CALL_OW 297
16376: PUSH
16377: LD_INT 2
16379: LESSEQUAL
16380: IFFALSE 16329
// ComExitVehicle ( ruEng ) ;
16382: LD_VAR 0 3
16386: PPUSH
16387: CALL_OW 121
// wait ( 0 0$1 ) ;
16391: LD_INT 35
16393: PPUSH
16394: CALL_OW 67
// AddComCaptureBuilding ( ruEng , rudepot ) ;
16398: LD_VAR 0 3
16402: PPUSH
16403: LD_INT 74
16405: PPUSH
16406: CALL 12475 0 2
// repeat wait ( 0 0$1 ) ;
16410: LD_INT 35
16412: PPUSH
16413: CALL_OW 67
// until GetSide ( rudepot ) = 3 ;
16417: LD_INT 74
16419: PPUSH
16420: CALL_OW 255
16424: PUSH
16425: LD_INT 3
16427: EQUAL
16428: IFFALSE 16410
// ComEnterUnit ( ruEng , rudepot ) ;
16430: LD_VAR 0 3
16434: PPUSH
16435: LD_INT 74
16437: PPUSH
16438: CALL_OW 120
// wait ( 0 0$2 ) ;
16442: LD_INT 70
16444: PPUSH
16445: CALL_OW 67
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
16449: LD_INT 22
16451: PUSH
16452: LD_INT 6
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PPUSH
16459: CALL_OW 69
16463: PPUSH
16464: LD_INT 3
16466: PPUSH
16467: CALL_OW 235
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
16471: LD_ADDR_VAR 0 4
16475: PUSH
16476: LD_INT 22
16478: PUSH
16479: LD_INT 3
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 21
16488: PUSH
16489: LD_INT 1
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PPUSH
16500: CALL_OW 69
16504: PUSH
16505: FOR_IN
16506: IFFALSE 16539
// if GetType ( IsInUnit ( unit ) ) = unit_vehicle then
16508: LD_VAR 0 4
16512: PPUSH
16513: CALL_OW 310
16517: PPUSH
16518: CALL_OW 247
16522: PUSH
16523: LD_INT 2
16525: EQUAL
16526: IFFALSE 16537
// ComExitVehicle ( unit ) ;
16528: LD_VAR 0 4
16532: PPUSH
16533: CALL_OW 121
16537: GO 16505
16539: POP
16540: POP
// if ruEng = Karamazov then
16541: LD_VAR 0 3
16545: PUSH
16546: LD_EXP 40
16550: EQUAL
16551: IFFALSE 16567
// Say ( Karamazov , DStart-Kar-1 ) else
16553: LD_EXP 40
16557: PPUSH
16558: LD_STRING DStart-Kar-1
16560: PPUSH
16561: CALL_OW 88
16565: GO 16591
// if ruEng = Lipshchin then
16567: LD_VAR 0 3
16571: PUSH
16572: LD_EXP 46
16576: EQUAL
16577: IFFALSE 16591
// Say ( Lipshchin , DStart-Lip-1 ) ;
16579: LD_EXP 46
16583: PPUSH
16584: LD_STRING DStart-Lip-1
16586: PPUSH
16587: CALL_OW 88
// ComExitBuilding ( ruEng ) ;
16591: LD_VAR 0 3
16595: PPUSH
16596: CALL_OW 122
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 250 ] ] ] ) do
16600: LD_ADDR_VAR 0 4
16604: PUSH
16605: LD_INT 22
16607: PUSH
16608: LD_INT 3
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: LD_INT 21
16617: PUSH
16618: LD_INT 3
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 3
16627: PUSH
16628: LD_INT 24
16630: PUSH
16631: LD_INT 250
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: LIST
16646: PPUSH
16647: CALL_OW 69
16651: PUSH
16652: FOR_IN
16653: IFFALSE 16706
// AddComRepairBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , unit ) ;
16655: LD_INT 22
16657: PUSH
16658: LD_INT 3
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PUSH
16665: LD_INT 21
16667: PUSH
16668: LD_INT 1
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: PUSH
16675: LD_INT 25
16677: PUSH
16678: LD_INT 2
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: LIST
16689: PPUSH
16690: CALL_OW 69
16694: PPUSH
16695: LD_VAR 0 4
16699: PPUSH
16700: CALL_OW 190
16704: GO 16652
16706: POP
16707: POP
// Say ( Burlak , DStart-Bur-1 ) ;
16708: LD_EXP 39
16712: PPUSH
16713: LD_STRING DStart-Bur-1
16715: PPUSH
16716: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-1 ) ;
16720: LD_EXP 47
16724: PPUSH
16725: LD_STRING DStart-Pla-1
16727: PPUSH
16728: CALL_OW 94
// Say ( Burlak , DStart-Bur-2 ) ;
16732: LD_EXP 39
16736: PPUSH
16737: LD_STRING DStart-Bur-2
16739: PPUSH
16740: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-2 ) ;
16744: LD_EXP 47
16748: PPUSH
16749: LD_STRING DStart-Pla-2
16751: PPUSH
16752: CALL_OW 94
// if IsOK ( Petrovova ) then
16756: LD_EXP 41
16760: PPUSH
16761: CALL_OW 302
16765: IFFALSE 16779
// Say ( Petrovova , DStart-Ptr-2 ) ;
16767: LD_EXP 41
16771: PPUSH
16772: LD_STRING DStart-Ptr-2
16774: PPUSH
16775: CALL_OW 88
// InGameOff ;
16779: CALL_OW 9
// ChangeMissionObjectives ( MStart ) ;
16783: LD_STRING MStart
16785: PPUSH
16786: CALL_OW 337
// SaveForQuickRestart ;
16790: CALL_OW 22
// wait ( 0 0$10 ) ;
16794: LD_INT 350
16796: PPUSH
16797: CALL_OW 67
// if IsOK ( Petrosyan ) then
16801: LD_EXP 43
16805: PPUSH
16806: CALL_OW 302
16810: IFFALSE 16826
// Say ( Petrosyan , DMatPrediction-Pty-1 ) else
16812: LD_EXP 43
16816: PPUSH
16817: LD_STRING DMatPrediction-Pty-1
16819: PPUSH
16820: CALL_OW 88
16824: GO 16849
// if IsOK ( Dolgov ) then
16826: LD_EXP 45
16830: PPUSH
16831: CALL_OW 302
16835: IFFALSE 16849
// Say ( Dolgov , DMatPrediction-Dol-1 ) ;
16837: LD_EXP 45
16841: PPUSH
16842: LD_STRING DMatPrediction-Dol-1
16844: PPUSH
16845: CALL_OW 88
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16849: LD_EXP 43
16853: PPUSH
16854: CALL_OW 302
16858: PUSH
16859: LD_EXP 45
16863: PPUSH
16864: CALL_OW 302
16868: OR
16869: IFFALSE 16883
// Say ( Burlak , DMatPrediction-Bur-1 ) ;
16871: LD_EXP 39
16875: PPUSH
16876: LD_STRING DMatPrediction-Bur-1
16878: PPUSH
16879: CALL_OW 88
// if IsOK ( Petrosyan ) then
16883: LD_EXP 43
16887: PPUSH
16888: CALL_OW 302
16892: IFFALSE 16908
// Say ( Petrosyan , DMatPrediction-Pty-2 ) else
16894: LD_EXP 43
16898: PPUSH
16899: LD_STRING DMatPrediction-Pty-2
16901: PPUSH
16902: CALL_OW 88
16906: GO 16931
// if IsOK ( Dolgov ) then
16908: LD_EXP 45
16912: PPUSH
16913: CALL_OW 302
16917: IFFALSE 16931
// Say ( Dolgov , DMatPrediction-Dol-2 ) ;
16919: LD_EXP 45
16923: PPUSH
16924: LD_STRING DMatPrediction-Dol-2
16926: PPUSH
16927: CALL_OW 88
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16931: LD_EXP 43
16935: PPUSH
16936: CALL_OW 302
16940: PUSH
16941: LD_EXP 45
16945: PPUSH
16946: CALL_OW 302
16950: OR
16951: IFFALSE 16965
// Say ( Burlak , DMatPrediction-Bur-2 ) ;
16953: LD_EXP 39
16957: PPUSH
16958: LD_STRING DMatPrediction-Bur-2
16960: PPUSH
16961: CALL_OW 88
// if IsOK ( Petrosyan ) then
16965: LD_EXP 43
16969: PPUSH
16970: CALL_OW 302
16974: IFFALSE 16990
// Say ( Petrosyan , DMatPrediction-Pty-3 ) else
16976: LD_EXP 43
16980: PPUSH
16981: LD_STRING DMatPrediction-Pty-3
16983: PPUSH
16984: CALL_OW 88
16988: GO 17013
// if IsOK ( Dolgov ) then
16990: LD_EXP 45
16994: PPUSH
16995: CALL_OW 302
16999: IFFALSE 17013
// Say ( Dolgov , DMatPrediction-Dol-3 ) ;
17001: LD_EXP 45
17005: PPUSH
17006: LD_STRING DMatPrediction-Dol-3
17008: PPUSH
17009: CALL_OW 88
// ChangeMissionObjectives ( MPred ) ;
17013: LD_STRING MPred
17015: PPUSH
17016: CALL_OW 337
// end ;
17020: LD_VAR 0 1
17024: RET
// every 0 0$1 trigger not UnitFilter ( ovsyenkoBase , [ f_type , unit_human ] ) do
17025: LD_EXP 59
17029: PPUSH
17030: LD_INT 21
17032: PUSH
17033: LD_INT 1
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PPUSH
17040: CALL_OW 72
17044: NOT
17045: IFFALSE 17267
17047: GO 17049
17049: DISABLE
// begin DialogueOn ;
17050: CALL_OW 6
// Say ( Burlak , DOvsyenkoTaken-Bur-1 ) ;
17054: LD_EXP 39
17058: PPUSH
17059: LD_STRING DOvsyenkoTaken-Bur-1
17061: PPUSH
17062: CALL_OW 88
// SayRadio ( Platonov , DOvsyenkoTaken-Pla-1 ) ;
17066: LD_EXP 47
17070: PPUSH
17071: LD_STRING DOvsyenkoTaken-Pla-1
17073: PPUSH
17074: CALL_OW 94
// if IsOK ( Karamazov ) then
17078: LD_EXP 40
17082: PPUSH
17083: CALL_OW 302
17087: IFFALSE 17101
// Say ( Karamazov , DOvsyenkoTaken-Kar-1 ) ;
17089: LD_EXP 40
17093: PPUSH
17094: LD_STRING DOvsyenkoTaken-Kar-1
17096: PPUSH
17097: CALL_OW 88
// if IsOK ( Titov ) then
17101: LD_EXP 44
17105: PPUSH
17106: CALL_OW 302
17110: IFFALSE 17124
// Say ( Titov , DOvsyenkoTaken-Tit-1 ) ;
17112: LD_EXP 44
17116: PPUSH
17117: LD_STRING DOvsyenkoTaken-Tit-1
17119: PPUSH
17120: CALL_OW 88
// if IsOK ( Lipshchin ) and ( IsOK ( Karamazov ) or IsOK ( Titov ) ) then
17124: LD_EXP 46
17128: PPUSH
17129: CALL_OW 302
17133: PUSH
17134: LD_EXP 40
17138: PPUSH
17139: CALL_OW 302
17143: PUSH
17144: LD_EXP 44
17148: PPUSH
17149: CALL_OW 302
17153: OR
17154: AND
17155: IFFALSE 17192
// begin Say ( Lipshchin , DOvsyenkoTaken-Lip-1 ) ;
17157: LD_EXP 46
17161: PPUSH
17162: LD_STRING DOvsyenkoTaken-Lip-1
17164: PPUSH
17165: CALL_OW 88
// if IsOK ( Gleb ) then
17169: LD_EXP 42
17173: PPUSH
17174: CALL_OW 302
17178: IFFALSE 17192
// Say ( Gleb , DOvsyenkoTaken-Glb-1 ) ;
17180: LD_EXP 42
17184: PPUSH
17185: LD_STRING DOvsyenkoTaken-Glb-1
17187: PPUSH
17188: CALL_OW 88
// end ; DialogueOff ;
17192: CALL_OW 7
// ChangeMissionObjectives ( MOutCapture ) ;
17196: LD_STRING MOutCapture
17198: PPUSH
17199: CALL_OW 337
// ChangeMissionObjectives ( MAddMine ) ;
17203: LD_STRING MAddMine
17205: PPUSH
17206: CALL_OW 337
// claimOvsyenkoBase = true ;
17210: LD_ADDR_EXP 15
17214: PUSH
17215: LD_INT 1
17217: ST_TO_ADDR
// wait ( 1 1$10 ) ;
17218: LD_INT 2450
17220: PPUSH
17221: CALL_OW 67
// InitAIManager ( 1 , 1 , headAmBase , HeadAmericanBaseArea , HeadAmericanHealArea , false , HeadAmericanBaseArea , 6 , 2 , 4 , true , true ) ;
17225: LD_INT 1
17227: PPUSH
17228: LD_INT 1
17230: PPUSH
17231: LD_EXP 61
17235: PPUSH
17236: LD_INT 5
17238: PPUSH
17239: LD_INT 9
17241: PPUSH
17242: LD_INT 0
17244: PPUSH
17245: LD_INT 5
17247: PPUSH
17248: LD_INT 6
17250: PPUSH
17251: LD_INT 2
17253: PPUSH
17254: LD_INT 4
17256: PPUSH
17257: LD_INT 1
17259: PPUSH
17260: LD_INT 1
17262: PPUSH
17263: CALL 5248 0 12
// end ;
17267: END
// export function Dial_SibTechs ; begin
17268: LD_INT 0
17270: PPUSH
// dial_SibTechsBlocker = true ;
17271: LD_ADDR_EXP 9
17275: PUSH
17276: LD_INT 1
17278: ST_TO_ADDR
// DialogueOn ;
17279: CALL_OW 6
// if IsOK ( Petrosyan ) then
17283: LD_EXP 43
17287: PPUSH
17288: CALL_OW 302
17292: IFFALSE 17308
// Say ( Petrosyan , DSibResearch-Pty-1 ) else
17294: LD_EXP 43
17298: PPUSH
17299: LD_STRING DSibResearch-Pty-1
17301: PPUSH
17302: CALL_OW 88
17306: GO 17331
// if IsOK ( Dolgov ) then
17308: LD_EXP 45
17312: PPUSH
17313: CALL_OW 302
17317: IFFALSE 17331
// Say ( Dolgov , DSibResearch-Dol-1 ) ;
17319: LD_EXP 45
17323: PPUSH
17324: LD_STRING DSibResearch-Dol-1
17326: PPUSH
17327: CALL_OW 88
// Say ( Burlak , DSibResearch-Bur-1 ) ;
17331: LD_EXP 39
17335: PPUSH
17336: LD_STRING DSibResearch-Bur-1
17338: PPUSH
17339: CALL_OW 88
// SayRadio ( Platonov , DSibResearch-Pla-1 ) ;
17343: LD_EXP 47
17347: PPUSH
17348: LD_STRING DSibResearch-Pla-1
17350: PPUSH
17351: CALL_OW 94
// DialogueOff ;
17355: CALL_OW 7
// ChangeMissionObjectives ( MResearch ) ;
17359: LD_STRING MResearch
17361: PPUSH
17362: CALL_OW 337
// SetRestrict ( b_ext_siberium , 3 , true ) ;
17366: LD_INT 21
17368: PPUSH
17369: LD_INT 3
17371: PPUSH
17372: LD_INT 1
17374: PPUSH
17375: CALL_OW 324
// SetRestrict ( b_siberite_power , 3 , true ) ;
17379: LD_INT 28
17381: PPUSH
17382: LD_INT 3
17384: PPUSH
17385: LD_INT 1
17387: PPUSH
17388: CALL_OW 324
// SetRestrict ( b_lab_siberium , 3 , true ) ;
17392: LD_INT 11
17394: PPUSH
17395: LD_INT 3
17397: PPUSH
17398: LD_INT 1
17400: PPUSH
17401: CALL_OW 324
// SetRestrict ( b_lab_spacetime , 3 , true ) ;
17405: LD_INT 14
17407: PPUSH
17408: LD_INT 3
17410: PPUSH
17411: LD_INT 1
17413: PPUSH
17414: CALL_OW 324
// end ;
17418: LD_VAR 0 1
17422: RET
// export function Dial_ResearchMatPredictions ; begin
17423: LD_INT 0
17425: PPUSH
// techMatPredStatus = state_researched ;
17426: LD_ADDR_EXP 6
17430: PUSH
17431: LD_INT 2
17433: ST_TO_ADDR
// ChangeMissionObjectives ( MOutPred ) ;
17434: LD_STRING MOutPred
17436: PPUSH
17437: CALL_OW 337
// DialogueOn ;
17441: CALL_OW 6
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
17445: LD_EXP 43
17449: PPUSH
17450: CALL_OW 302
17454: PUSH
17455: LD_EXP 45
17459: PPUSH
17460: CALL_OW 302
17464: OR
17465: IFFALSE 17587
// begin if IsOK ( Petrosyan ) then
17467: LD_EXP 43
17471: PPUSH
17472: CALL_OW 302
17476: IFFALSE 17492
// Say ( Petrosyan , DNoMaterial-Pty-1 ) else
17478: LD_EXP 43
17482: PPUSH
17483: LD_STRING DNoMaterial-Pty-1
17485: PPUSH
17486: CALL_OW 88
17490: GO 17515
// if IsOK ( Dolgov ) then
17492: LD_EXP 45
17496: PPUSH
17497: CALL_OW 302
17501: IFFALSE 17515
// Say ( Dolgov , DNoMaterial-Dol-1 ) ;
17503: LD_EXP 45
17507: PPUSH
17508: LD_STRING DNoMaterial-Dol-1
17510: PPUSH
17511: CALL_OW 88
// Say ( Burlak , DNoMaterial-Bur-1 ) ;
17515: LD_EXP 39
17519: PPUSH
17520: LD_STRING DNoMaterial-Bur-1
17522: PPUSH
17523: CALL_OW 88
// if IsOK ( Petrosyan ) then
17527: LD_EXP 43
17531: PPUSH
17532: CALL_OW 302
17536: IFFALSE 17552
// Say ( Petrosyan , DNoMaterial-Pty-2 ) else
17538: LD_EXP 43
17542: PPUSH
17543: LD_STRING DNoMaterial-Pty-2
17545: PPUSH
17546: CALL_OW 88
17550: GO 17575
// if IsOK ( Dolgov ) then
17552: LD_EXP 45
17556: PPUSH
17557: CALL_OW 302
17561: IFFALSE 17575
// Say ( Dolgov , DNoMaterial-Dol-2 ) ;
17563: LD_EXP 45
17567: PPUSH
17568: LD_STRING DNoMaterial-Dol-2
17570: PPUSH
17571: CALL_OW 88
// Say ( Burlak , DNoMaterial-Bur-2 ) ;
17575: LD_EXP 39
17579: PPUSH
17580: LD_STRING DNoMaterial-Bur-2
17582: PPUSH
17583: CALL_OW 88
// end ; DialogueOff ;
17587: CALL_OW 7
// end ;
17591: LD_VAR 0 1
17595: RET
// every 0 0$1 trigger not dial_SibTechsBlocker and ( GetResourceVisibility ( 116 , 123 , 3 ) or GetResourceVisibility ( 72 , 86 , 3 ) ) do
17596: LD_EXP 9
17600: NOT
17601: PUSH
17602: LD_INT 116
17604: PPUSH
17605: LD_INT 123
17607: PPUSH
17608: LD_INT 3
17610: PPUSH
17611: CALL_OW 440
17615: PUSH
17616: LD_INT 72
17618: PPUSH
17619: LD_INT 86
17621: PPUSH
17622: LD_INT 3
17624: PPUSH
17625: CALL_OW 440
17629: OR
17630: AND
17631: IFFALSE 17640
17633: GO 17635
17635: DISABLE
// Dial_SibTechs ;
17636: CALL 17268 0 0
17640: END
// every 5 5$0 trigger claimOvsyenkoBase do
17641: LD_EXP 15
17645: IFFALSE 17669
17647: GO 17649
17649: DISABLE
// begin PrepareVsevolod ;
17650: CALL 2664 0 0
// ComAgressiveMove ( vsevolodTeam , 61 , 45 ) ;
17654: LD_EXP 52
17658: PPUSH
17659: LD_INT 61
17661: PPUSH
17662: LD_INT 45
17664: PPUSH
17665: CALL_OW 114
// end ;
17669: END
// every 0 0$1 trigger immortalVsevolodTeam do var unit ;
17670: LD_EXP 18
17674: IFFALSE 17712
17676: GO 17678
17678: DISABLE
17679: LD_INT 0
17681: PPUSH
// begin enable ;
17682: ENABLE
// for unit in vsevolodTeam do
17683: LD_ADDR_VAR 0 1
17687: PUSH
17688: LD_EXP 52
17692: PUSH
17693: FOR_IN
17694: IFFALSE 17710
// SetLives ( unit , 1000 ) ;
17696: LD_VAR 0 1
17700: PPUSH
17701: LD_INT 1000
17703: PPUSH
17704: CALL_OW 234
17708: GO 17693
17710: POP
17711: POP
// end ;
17712: PPOPN 1
17714: END
// every 0 0$1 trigger GetLives ( ter_bun1 ) <= 650 or GetLives ( ter_arm1 ) <= 650 do var belkovSavedIn02 , tmp , speaker ;
17715: LD_INT 170
17717: PPUSH
17718: CALL_OW 256
17722: PUSH
17723: LD_INT 650
17725: LESSEQUAL
17726: PUSH
17727: LD_INT 174
17729: PPUSH
17730: CALL_OW 256
17734: PUSH
17735: LD_INT 650
17737: LESSEQUAL
17738: OR
17739: IFFALSE 18900
17741: GO 17743
17743: DISABLE
17744: LD_INT 0
17746: PPUSH
17747: PPUSH
17748: PPUSH
// begin ComMoveXY ( UnitFilter ( terminalBase , [ f_type , unit_human ] ) , 35 , 58 ) ;
17749: LD_EXP 60
17753: PPUSH
17754: LD_INT 21
17756: PUSH
17757: LD_INT 1
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PPUSH
17764: CALL_OW 72
17768: PPUSH
17769: LD_INT 35
17771: PPUSH
17772: LD_INT 58
17774: PPUSH
17775: CALL_OW 111
// SetSide ( UnitFilter ( terminalBase , [ f_type , unit_building ] ) , 6 ) ;
17779: LD_EXP 60
17783: PPUSH
17784: LD_INT 21
17786: PUSH
17787: LD_INT 3
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PPUSH
17794: CALL_OW 72
17798: PPUSH
17799: LD_INT 6
17801: PPUSH
17802: CALL_OW 235
// immortalVsevolodTeam = false ;
17806: LD_ADDR_EXP 18
17810: PUSH
17811: LD_INT 0
17813: ST_TO_ADDR
// ComEnterUnit ( [ Vsevolod , vsevolodTeam [ 3 ] ] , ter_arm1 ) ;
17814: LD_EXP 51
17818: PUSH
17819: LD_EXP 52
17823: PUSH
17824: LD_INT 3
17826: ARRAY
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PPUSH
17832: LD_INT 174
17834: PPUSH
17835: CALL_OW 120
// ComEnterUnit ( vsevolodTeam [ 4 ] , ter_bun1 ) ;
17839: LD_EXP 52
17843: PUSH
17844: LD_INT 4
17846: ARRAY
17847: PPUSH
17848: LD_INT 170
17850: PPUSH
17851: CALL_OW 120
// SetLives ( Petr , 500 ) ;
17855: LD_EXP 53
17859: PPUSH
17860: LD_INT 500
17862: PPUSH
17863: CALL_OW 234
// ComEnterUnit ( vsevolodTeam [ 2 ] , terminal ) ;
17867: LD_EXP 52
17871: PUSH
17872: LD_INT 2
17874: ARRAY
17875: PPUSH
17876: LD_INT 168
17878: PPUSH
17879: CALL_OW 120
// wait ( 0 0$5 ) ;
17883: LD_INT 175
17885: PPUSH
17886: CALL_OW 67
// DialogueOn ;
17890: CALL_OW 6
// if IsOK ( Dolgov ) then
17894: LD_EXP 45
17898: PPUSH
17899: CALL_OW 302
17903: IFFALSE 17917
// Say ( Dolgov , DVsevolod-Dol-1 ) ;
17905: LD_EXP 45
17909: PPUSH
17910: LD_STRING DVsevolod-Dol-1
17912: PPUSH
17913: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-1 ) ;
17917: LD_EXP 51
17921: PPUSH
17922: LD_STRING DVsevolod-Vse-1
17924: PPUSH
17925: CALL_OW 94
// if IsOK ( Gleb ) then
17929: LD_EXP 42
17933: PPUSH
17934: CALL_OW 302
17938: IFFALSE 17976
// begin Say ( Burlak , DVsevolod-Bur-1 ) ;
17940: LD_EXP 39
17944: PPUSH
17945: LD_STRING DVsevolod-Bur-1
17947: PPUSH
17948: CALL_OW 88
// Say ( Gleb , DVsevolod-Glb-1 ) ;
17952: LD_EXP 42
17956: PPUSH
17957: LD_STRING DVsevolod-Glb-1
17959: PPUSH
17960: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-2 ) ;
17964: LD_EXP 51
17968: PPUSH
17969: LD_STRING DVsevolod-Vse-2
17971: PPUSH
17972: CALL_OW 94
// end ; Say ( Burlak , DVsevolod-Bur-2 ) ;
17976: LD_EXP 39
17980: PPUSH
17981: LD_STRING DVsevolod-Bur-2
17983: PPUSH
17984: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-3 ) ;
17988: LD_EXP 51
17992: PPUSH
17993: LD_STRING DVsevolod-Vse-3
17995: PPUSH
17996: CALL_OW 94
// Say ( Burlak , DVsevolod-Bur-3 ) ;
18000: LD_EXP 39
18004: PPUSH
18005: LD_STRING DVsevolod-Bur-3
18007: PPUSH
18008: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-4 ) ;
18012: LD_EXP 51
18016: PPUSH
18017: LD_STRING DVsevolod-Vse-4
18019: PPUSH
18020: CALL_OW 94
// Say ( Burlak , DVsevolod-Bur-4 ) ;
18024: LD_EXP 39
18028: PPUSH
18029: LD_STRING DVsevolod-Bur-4
18031: PPUSH
18032: CALL_OW 88
// if IsOK ( Gleb ) then
18036: LD_EXP 42
18040: PPUSH
18041: CALL_OW 302
18045: IFFALSE 18073
// begin Say ( Gleb , DVsevolod-Glb-4 ) ;
18047: LD_EXP 42
18051: PPUSH
18052: LD_STRING DVsevolod-Glb-4
18054: PPUSH
18055: CALL_OW 88
// Say ( Burlak , DVsevolod-Bur-5 ) ;
18059: LD_EXP 39
18063: PPUSH
18064: LD_STRING DVsevolod-Bur-5
18066: PPUSH
18067: CALL_OW 88
// end else
18071: GO 18147
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-RSol1-5 ,  , false , true ) ;
18073: LD_INT 22
18075: PUSH
18076: LD_INT 3
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 21
18085: PUSH
18086: LD_INT 1
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 50
18095: PUSH
18096: EMPTY
18097: LIST
18098: PUSH
18099: LD_INT 26
18101: PUSH
18102: LD_INT 1
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 23
18111: PUSH
18112: LD_INT 3
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: PPUSH
18126: CALL_OW 69
18130: PPUSH
18131: LD_STRING DVsevolod-RSol1-5
18133: PPUSH
18134: LD_STRING 
18136: PPUSH
18137: LD_INT 0
18139: PPUSH
18140: LD_INT 1
18142: PPUSH
18143: CALL 12102 0 5
// Say ( Burlak , DVsevolod-Bur-6 ) ;
18147: LD_EXP 39
18151: PPUSH
18152: LD_STRING DVsevolod-Bur-6
18154: PPUSH
18155: CALL_OW 88
// CenterOnXY ( 59 , 40 ) ;
18159: LD_INT 59
18161: PPUSH
18162: LD_INT 40
18164: PPUSH
18165: CALL_OW 84
// RevealFogArea ( 3 , TerminalBaseArea ) ;
18169: LD_INT 3
18171: PPUSH
18172: LD_INT 4
18174: PPUSH
18175: CALL_OW 332
// if IsOK ( Dolgov ) then
18179: LD_EXP 45
18183: PPUSH
18184: CALL_OW 302
18188: IFFALSE 18204
// Say ( Dolgov , DVsevolod-Dol-6 ) else
18190: LD_EXP 45
18194: PPUSH
18195: LD_STRING DVsevolod-Dol-6
18197: PPUSH
18198: CALL_OW 88
18202: GO 18278
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-Dol-6 ,  , false , true ) ;
18204: LD_INT 22
18206: PUSH
18207: LD_INT 3
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 21
18216: PUSH
18217: LD_INT 1
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 50
18226: PUSH
18227: EMPTY
18228: LIST
18229: PUSH
18230: LD_INT 26
18232: PUSH
18233: LD_INT 1
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 23
18242: PUSH
18243: LD_INT 3
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: PPUSH
18257: CALL_OW 69
18261: PPUSH
18262: LD_STRING DVsevolod-Dol-6
18264: PPUSH
18265: LD_STRING 
18267: PPUSH
18268: LD_INT 0
18270: PPUSH
18271: LD_INT 1
18273: PPUSH
18274: CALL 12102 0 5
// Say ( Burlak , DVsevolod-Bur-7 ) ;
18278: LD_EXP 39
18282: PPUSH
18283: LD_STRING DVsevolod-Bur-7
18285: PPUSH
18286: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-7 ) ;
18290: LD_EXP 51
18294: PPUSH
18295: LD_STRING DVsevolod-Vse-7
18297: PPUSH
18298: CALL_OW 94
// DialogueOff ;
18302: CALL_OW 7
// ChangeMissionObjectives ( MVsevolod ) ;
18306: LD_STRING MVsevolod
18308: PPUSH
18309: CALL_OW 337
// enableVsevolodCounter = true ;
18313: LD_ADDR_EXP 22
18317: PUSH
18318: LD_INT 1
18320: ST_TO_ADDR
// canGoNorth = true ;
18321: LD_ADDR_EXP 21
18325: PUSH
18326: LD_INT 1
18328: ST_TO_ADDR
// PrepareSoldiersInBunkers ;
18329: CALL 3979 0 0
// wait ( 0 0$7 ) ;
18333: LD_INT 245
18335: PPUSH
18336: CALL_OW 67
// belkovSavedIn02 = TestCharacters ( 02_Belkov ) ;
18340: LD_ADDR_VAR 0 1
18344: PUSH
18345: LD_STRING 02_Belkov
18347: PPUSH
18348: CALL_OW 28
18352: ST_TO_ADDR
// DialogueOn ;
18353: CALL_OW 6
// if belkovSavedIn02 then
18357: LD_VAR 0 1
18361: IFFALSE 18562
// begin if IsOK ( Gleb ) then
18363: LD_EXP 42
18367: PPUSH
18368: CALL_OW 302
18372: IFFALSE 18386
// Say ( Gleb , DHelp1-Glb-1 ) ;
18374: LD_EXP 42
18378: PPUSH
18379: LD_STRING DHelp1-Glb-1
18381: PPUSH
18382: CALL_OW 88
// if IsOK ( Dolgov ) then
18386: LD_EXP 45
18390: PPUSH
18391: CALL_OW 302
18395: IFFALSE 18409
// Say ( Dolgov , DHelp1-Dol-1 ) ;
18397: LD_EXP 45
18401: PPUSH
18402: LD_STRING DHelp1-Dol-1
18404: PPUSH
18405: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Gleb , Dolgov , Titov ] ;
18409: LD_ADDR_VAR 0 2
18413: PUSH
18414: LD_INT 22
18416: PUSH
18417: LD_INT 3
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 21
18426: PUSH
18427: LD_INT 1
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 50
18436: PUSH
18437: EMPTY
18438: LIST
18439: PUSH
18440: LD_INT 26
18442: PUSH
18443: LD_INT 1
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 23
18452: PUSH
18453: LD_INT 3
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: PPUSH
18467: CALL_OW 69
18471: PUSH
18472: LD_EXP 42
18476: PUSH
18477: LD_EXP 45
18481: PUSH
18482: LD_EXP 44
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: LIST
18491: DIFF
18492: ST_TO_ADDR
// DialogRandom ( tmp , DHelp1-RSol1-1 ,  , false , true ) ;
18493: LD_VAR 0 2
18497: PPUSH
18498: LD_STRING DHelp1-RSol1-1
18500: PPUSH
18501: LD_STRING 
18503: PPUSH
18504: LD_INT 0
18506: PPUSH
18507: LD_INT 1
18509: PPUSH
18510: CALL 12102 0 5
// if IsOK ( Titov ) then
18514: LD_EXP 44
18518: PPUSH
18519: CALL_OW 302
18523: IFFALSE 18537
// Say ( Titov , DHelp1-Tit-1 ) ;
18525: LD_EXP 44
18529: PPUSH
18530: LD_STRING DHelp1-Tit-1
18532: PPUSH
18533: CALL_OW 88
// if IsOK ( Gleb ) then
18537: LD_EXP 42
18541: PPUSH
18542: CALL_OW 302
18546: IFFALSE 18560
// Say ( Gleb , DHelp1-Glb-2 ) ;
18548: LD_EXP 42
18552: PPUSH
18553: LD_STRING DHelp1-Glb-2
18555: PPUSH
18556: CALL_OW 88
// end else
18560: GO 18773
// begin if IsOK ( Titov ) then
18562: LD_EXP 44
18566: PPUSH
18567: CALL_OW 302
18571: IFFALSE 18585
// Say ( Titov , DHelp2-Tit-1 ) ;
18573: LD_EXP 44
18577: PPUSH
18578: LD_STRING DHelp2-Tit-1
18580: PPUSH
18581: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Gleb , Titov ] ;
18585: LD_ADDR_VAR 0 2
18589: PUSH
18590: LD_INT 22
18592: PUSH
18593: LD_INT 3
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 21
18602: PUSH
18603: LD_INT 1
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 50
18612: PUSH
18613: EMPTY
18614: LIST
18615: PUSH
18616: LD_INT 26
18618: PUSH
18619: LD_INT 1
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PUSH
18626: LD_INT 23
18628: PUSH
18629: LD_INT 3
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: PPUSH
18643: CALL_OW 69
18647: PUSH
18648: LD_EXP 42
18652: PUSH
18653: LD_EXP 44
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: DIFF
18662: ST_TO_ADDR
// speaker = DialogRandom ( tmp , DHelp2-RSol1-1 ,  , false , true ) ;
18663: LD_ADDR_VAR 0 3
18667: PUSH
18668: LD_VAR 0 2
18672: PPUSH
18673: LD_STRING DHelp2-RSol1-1
18675: PPUSH
18676: LD_STRING 
18678: PPUSH
18679: LD_INT 0
18681: PPUSH
18682: LD_INT 1
18684: PPUSH
18685: CALL 12102 0 5
18689: ST_TO_ADDR
// if IsOK ( Gleb ) then
18690: LD_EXP 42
18694: PPUSH
18695: CALL_OW 302
18699: IFFALSE 18713
// Say ( Gleb , DHelp2-Glb-1 ) ;
18701: LD_EXP 42
18705: PPUSH
18706: LD_STRING DHelp2-Glb-1
18708: PPUSH
18709: CALL_OW 88
// tmp = tmp diff speaker ;
18713: LD_ADDR_VAR 0 2
18717: PUSH
18718: LD_VAR 0 2
18722: PUSH
18723: LD_VAR 0 3
18727: DIFF
18728: ST_TO_ADDR
// DialogRandom ( tmp , DHelp2-RSol2-1 ,  , false , true ) ;
18729: LD_VAR 0 2
18733: PPUSH
18734: LD_STRING DHelp2-RSol2-1
18736: PPUSH
18737: LD_STRING 
18739: PPUSH
18740: LD_INT 0
18742: PPUSH
18743: LD_INT 1
18745: PPUSH
18746: CALL 12102 0 5
// if IsOK ( Titov ) then
18750: LD_EXP 44
18754: PPUSH
18755: CALL_OW 302
18759: IFFALSE 18773
// Say ( Titov , DHelp2-Tit-2 ) ;
18761: LD_EXP 44
18765: PPUSH
18766: LD_STRING DHelp2-Tit-2
18768: PPUSH
18769: CALL_OW 88
// end ; Say ( Burlak , DHelp3-Bur-1 ) ;
18773: LD_EXP 39
18777: PPUSH
18778: LD_STRING DHelp3-Bur-1
18780: PPUSH
18781: CALL_OW 88
// if IsOK ( Lipshchin ) then
18785: LD_EXP 46
18789: PPUSH
18790: CALL_OW 302
18794: IFFALSE 18810
// Say ( Lipshchin , DHelp3-Lip-1 ) else
18796: LD_EXP 46
18800: PPUSH
18801: LD_STRING DHelp3-Lip-1
18803: PPUSH
18804: CALL_OW 88
18808: GO 18884
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-Dol-6 ,  , false , true ) ;
18810: LD_INT 22
18812: PUSH
18813: LD_INT 3
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 21
18822: PUSH
18823: LD_INT 1
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 50
18832: PUSH
18833: EMPTY
18834: LIST
18835: PUSH
18836: LD_INT 26
18838: PUSH
18839: LD_INT 1
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 23
18848: PUSH
18849: LD_INT 3
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: PPUSH
18863: CALL_OW 69
18867: PPUSH
18868: LD_STRING DVsevolod-Dol-6
18870: PPUSH
18871: LD_STRING 
18873: PPUSH
18874: LD_INT 0
18876: PPUSH
18877: LD_INT 1
18879: PPUSH
18880: CALL 12102 0 5
// Say ( Burlak , DHelp3-Bur-2 ) ;
18884: LD_EXP 39
18888: PPUSH
18889: LD_STRING DHelp3-Bur-2
18891: PPUSH
18892: CALL_OW 88
// DialogueOff ;
18896: CALL_OW 7
// end ;
18900: PPOPN 3
18902: END
// every 0 0$1 trigger claimOvsyenkoBase and not FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] , [ f_type , unit_vehicle ] ] ] ) and FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
18903: LD_EXP 15
18907: PUSH
18908: LD_INT 3
18910: PPUSH
18911: LD_INT 22
18913: PUSH
18914: LD_INT 3
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 2
18923: PUSH
18924: LD_INT 21
18926: PUSH
18927: LD_INT 1
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 59
18936: PUSH
18937: EMPTY
18938: LIST
18939: PUSH
18940: LD_INT 21
18942: PUSH
18943: LD_INT 2
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PPUSH
18960: CALL_OW 70
18964: NOT
18965: AND
18966: PUSH
18967: LD_INT 3
18969: PPUSH
18970: LD_INT 22
18972: PUSH
18973: LD_INT 1
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 2
18982: PUSH
18983: LD_INT 21
18985: PUSH
18986: LD_INT 1
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 21
18995: PUSH
18996: LD_INT 2
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: LIST
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PPUSH
19012: CALL_OW 70
19016: AND
19017: IFFALSE 19184
19019: GO 19021
19021: DISABLE
// begin lostAgainBase = true ;
19022: LD_ADDR_EXP 17
19026: PUSH
19027: LD_INT 1
19029: ST_TO_ADDR
// SetSide ( FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , 1 ) ;
19030: LD_INT 3
19032: PPUSH
19033: LD_INT 22
19035: PUSH
19036: LD_INT 3
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 21
19045: PUSH
19046: LD_INT 3
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PPUSH
19057: CALL_OW 70
19061: PPUSH
19062: LD_INT 1
19064: PPUSH
19065: CALL_OW 235
// if IsOK ( Gleb ) then
19069: LD_EXP 42
19073: PPUSH
19074: CALL_OW 302
19078: IFFALSE 19104
// begin Say ( Gleb , DOvsyenkoCaptured-Glb-1 ) ;
19080: LD_EXP 42
19084: PPUSH
19085: LD_STRING DOvsyenkoCaptured-Glb-1
19087: PPUSH
19088: CALL_OW 88
// Say ( Burlak , DOvsyenkoCaptured-Bur-1 ) ;
19092: LD_EXP 39
19096: PPUSH
19097: LD_STRING DOvsyenkoCaptured-Bur-1
19099: PPUSH
19100: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Gleb , DOvsyenkoCaptured-RSol1-1 ,  , false , true ) ;
19104: LD_INT 22
19106: PUSH
19107: LD_INT 3
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 21
19116: PUSH
19117: LD_INT 1
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 50
19126: PUSH
19127: EMPTY
19128: LIST
19129: PUSH
19130: LD_INT 26
19132: PUSH
19133: LD_INT 1
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 23
19142: PUSH
19143: LD_INT 3
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: PPUSH
19157: CALL_OW 69
19161: PUSH
19162: LD_EXP 42
19166: DIFF
19167: PPUSH
19168: LD_STRING DOvsyenkoCaptured-RSol1-1
19170: PPUSH
19171: LD_STRING 
19173: PPUSH
19174: LD_INT 0
19176: PPUSH
19177: LD_INT 1
19179: PPUSH
19180: CALL 12102 0 5
// end ;
19184: END
// every 0 0$1 trigger FilterUnitsInArea ( TrapArea , [ [ f_side , 3 ] , [ f_ok ] ] ) do
19185: LD_INT 12
19187: PPUSH
19188: LD_INT 22
19190: PUSH
19191: LD_INT 3
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 50
19200: PUSH
19201: EMPTY
19202: LIST
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PPUSH
19208: CALL_OW 70
19212: IFFALSE 19221
19214: GO 19216
19216: DISABLE
// PrepareTrap ;
19217: CALL 3800 0 0
19221: END
// every 0 0$1 trigger not dial_TrapDialogBlocker do var tmp , speaker , unit ;
19222: LD_EXP 11
19226: NOT
19227: IFFALSE 19445
19229: GO 19231
19231: DISABLE
19232: LD_INT 0
19234: PPUSH
19235: PPUSH
19236: PPUSH
// begin enable ;
19237: ENABLE
// for unit in trapTeam do
19238: LD_ADDR_VAR 0 3
19242: PUSH
19243: LD_EXP 62
19247: PUSH
19248: FOR_IN
19249: IFFALSE 19443
// if See ( 3 , unit ) then
19251: LD_INT 3
19253: PPUSH
19254: LD_VAR 0 3
19258: PPUSH
19259: CALL_OW 292
19263: IFFALSE 19441
// begin dial_TrapDialogBlocker = true ;
19265: LD_ADDR_EXP 11
19269: PUSH
19270: LD_INT 1
19272: ST_TO_ADDR
// DialogueOn ;
19273: CALL_OW 6
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Gleb ;
19277: LD_ADDR_VAR 0 1
19281: PUSH
19282: LD_INT 22
19284: PUSH
19285: LD_INT 3
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 21
19294: PUSH
19295: LD_INT 1
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 50
19304: PUSH
19305: EMPTY
19306: LIST
19307: PUSH
19308: LD_INT 26
19310: PUSH
19311: LD_INT 1
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 23
19320: PUSH
19321: LD_INT 3
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: PPUSH
19335: CALL_OW 69
19339: PUSH
19340: LD_EXP 42
19344: DIFF
19345: ST_TO_ADDR
// speaker = DialogRandom ( tmp , DPartyAttacked-RSol1-1 ,  , false , true ) ;
19346: LD_ADDR_VAR 0 2
19350: PUSH
19351: LD_VAR 0 1
19355: PPUSH
19356: LD_STRING DPartyAttacked-RSol1-1
19358: PPUSH
19359: LD_STRING 
19361: PPUSH
19362: LD_INT 0
19364: PPUSH
19365: LD_INT 1
19367: PPUSH
19368: CALL 12102 0 5
19372: ST_TO_ADDR
// tmp = tmp diff speaker ;
19373: LD_ADDR_VAR 0 1
19377: PUSH
19378: LD_VAR 0 1
19382: PUSH
19383: LD_VAR 0 2
19387: DIFF
19388: ST_TO_ADDR
// if IsOK ( Gleb ) then
19389: LD_EXP 42
19393: PPUSH
19394: CALL_OW 302
19398: IFFALSE 19412
// Say ( Gleb , DPartyAttacked-Glb-1 ) ;
19400: LD_EXP 42
19404: PPUSH
19405: LD_STRING DPartyAttacked-Glb-1
19407: PPUSH
19408: CALL_OW 88
// DialogRandom ( tmp , DPartyAttacked-RSol1-2 ,  , false , true ) ;
19412: LD_VAR 0 1
19416: PPUSH
19417: LD_STRING DPartyAttacked-RSol1-2
19419: PPUSH
19420: LD_STRING 
19422: PPUSH
19423: LD_INT 0
19425: PPUSH
19426: LD_INT 1
19428: PPUSH
19429: CALL 12102 0 5
// DialogueOff ;
19433: CALL_OW 7
// exit ;
19437: POP
19438: POP
19439: GO 19445
// end ;
19441: GO 19248
19443: POP
19444: POP
// end ;
19445: PPOPN 3
19447: END
// every 0 0$1 trigger not savedVsevolod and IsOK ( Vsevolod ) and FilterUnitsInArea ( TerminalBaseArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ [ f_type , unit_human ] , [ f_nation , nation_russian ] ] , [ f_type , unit_vehicle ] ] ] ) do var nearUnit , unit , maleRandomUnits ;
19448: LD_EXP 19
19452: NOT
19453: PUSH
19454: LD_EXP 51
19458: PPUSH
19459: CALL_OW 302
19463: AND
19464: PUSH
19465: LD_INT 4
19467: PPUSH
19468: LD_INT 22
19470: PUSH
19471: LD_INT 3
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 50
19480: PUSH
19481: EMPTY
19482: LIST
19483: PUSH
19484: LD_INT 2
19486: PUSH
19487: LD_INT 21
19489: PUSH
19490: LD_INT 1
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 23
19499: PUSH
19500: LD_INT 3
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 21
19513: PUSH
19514: LD_INT 2
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: LIST
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: LIST
19530: PPUSH
19531: CALL_OW 70
19535: AND
19536: IFFALSE 20178
19538: GO 19540
19540: DISABLE
19541: LD_INT 0
19543: PPUSH
19544: PPUSH
19545: PPUSH
// begin savedVsevolod = true ;
19546: LD_ADDR_EXP 19
19550: PUSH
19551: LD_INT 1
19553: ST_TO_ADDR
// ChangeMissionObjectives ( MVsevolodOut ) ;
19554: LD_STRING MVsevolodOut
19556: PPUSH
19557: CALL_OW 337
// unit = FilterUnitsInArea ( TerminalBaseArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ [ f_type , unit_human ] , [ f_nation , nation_russian ] ] , [ f_type , unit_vehicle ] ] ] ) ;
19561: LD_ADDR_VAR 0 2
19565: PUSH
19566: LD_INT 4
19568: PPUSH
19569: LD_INT 22
19571: PUSH
19572: LD_INT 3
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 50
19581: PUSH
19582: EMPTY
19583: LIST
19584: PUSH
19585: LD_INT 2
19587: PUSH
19588: LD_INT 21
19590: PUSH
19591: LD_INT 1
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 23
19600: PUSH
19601: LD_INT 3
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 21
19614: PUSH
19615: LD_INT 2
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: LIST
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: LIST
19631: PPUSH
19632: CALL_OW 70
19636: ST_TO_ADDR
// unit = unit [ 1 ] ;
19637: LD_ADDR_VAR 0 2
19641: PUSH
19642: LD_VAR 0 2
19646: PUSH
19647: LD_INT 1
19649: ARRAY
19650: ST_TO_ADDR
// if GetType ( unit ) = unit_vehicle then
19651: LD_VAR 0 2
19655: PPUSH
19656: CALL_OW 247
19660: PUSH
19661: LD_INT 2
19663: EQUAL
19664: IFFALSE 19685
// unit = UnitsInside ( unit ) [ 1 ] ;
19666: LD_ADDR_VAR 0 2
19670: PUSH
19671: LD_VAR 0 2
19675: PPUSH
19676: CALL_OW 313
19680: PUSH
19681: LD_INT 1
19683: ARRAY
19684: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
19685: LD_INT 22
19687: PUSH
19688: LD_INT 6
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PPUSH
19695: CALL_OW 69
19699: PPUSH
19700: LD_INT 3
19702: PPUSH
19703: CALL_OW 235
// if not unit = Burlak then
19707: LD_VAR 0 2
19711: PUSH
19712: LD_EXP 39
19716: EQUAL
19717: NOT
19718: IFFALSE 19895
// begin vsevolodWaitGorky = true ;
19720: LD_ADDR_EXP 20
19724: PUSH
19725: LD_INT 1
19727: ST_TO_ADDR
// DialogueOn ;
19728: CALL_OW 6
// Say ( Vsevolod , DOtherMeetVsev-Vse-1 ) ;
19732: LD_EXP 51
19736: PPUSH
19737: LD_STRING DOtherMeetVsev-Vse-1
19739: PPUSH
19740: CALL_OW 88
// if GetSex ( unit ) = sex_female then
19744: LD_VAR 0 2
19748: PPUSH
19749: CALL_OW 258
19753: PUSH
19754: LD_INT 2
19756: EQUAL
19757: IFFALSE 19877
// begin maleRandomUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff vsevolodTeam ;
19759: LD_ADDR_VAR 0 3
19763: PUSH
19764: LD_INT 22
19766: PUSH
19767: LD_INT 3
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 21
19776: PUSH
19777: LD_INT 1
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 50
19786: PUSH
19787: EMPTY
19788: LIST
19789: PUSH
19790: LD_INT 26
19792: PUSH
19793: LD_INT 1
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 23
19802: PUSH
19803: LD_INT 3
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: PPUSH
19817: CALL_OW 69
19821: PUSH
19822: LD_EXP 52
19826: DIFF
19827: ST_TO_ADDR
// maleRandomUnits = maleRandomUnits diff Gleb ;
19828: LD_ADDR_VAR 0 3
19832: PUSH
19833: LD_VAR 0 3
19837: PUSH
19838: LD_EXP 42
19842: DIFF
19843: ST_TO_ADDR
// if maleRandomUnits then
19844: LD_VAR 0 3
19848: IFFALSE 19875
// DialogRandom ( maleRandomUnits [ 1 ] , DOtherMeetVsev-RSol1-1 ,  , false , true ) ;
19850: LD_VAR 0 3
19854: PUSH
19855: LD_INT 1
19857: ARRAY
19858: PPUSH
19859: LD_STRING DOtherMeetVsev-RSol1-1
19861: PPUSH
19862: LD_STRING 
19864: PPUSH
19865: LD_INT 0
19867: PPUSH
19868: LD_INT 1
19870: PPUSH
19871: CALL 12102 0 5
// end else
19875: GO 19889
// Say ( unit , DOtherMeetVsev-RSol1-1 ) ;
19877: LD_VAR 0 2
19881: PPUSH
19882: LD_STRING DOtherMeetVsev-RSol1-1
19884: PPUSH
19885: CALL_OW 88
// DialogueOff ;
19889: CALL_OW 7
// end else
19893: GO 20178
// begin DialogueOn ;
19895: CALL_OW 6
// Say ( Vsevolod , DMeetVsev-Vse-1 ) ;
19899: LD_EXP 51
19903: PPUSH
19904: LD_STRING DMeetVsev-Vse-1
19906: PPUSH
19907: CALL_OW 88
// Say ( Burlak , DMeetVsev-Bur-1 ) ;
19911: LD_EXP 39
19915: PPUSH
19916: LD_STRING DMeetVsev-Bur-1
19918: PPUSH
19919: CALL_OW 88
// if lostAgainBase then
19923: LD_EXP 17
19927: IFFALSE 19967
// begin Say ( Vsevolod , DMeetVsev2-Vse-1 ) ;
19929: LD_EXP 51
19933: PPUSH
19934: LD_STRING DMeetVsev2-Vse-1
19936: PPUSH
19937: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-1 ) ;
19941: LD_EXP 39
19945: PPUSH
19946: LD_STRING DMeetVsev2-Bur-1
19948: PPUSH
19949: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-2 ) ;
19953: LD_EXP 51
19957: PPUSH
19958: LD_STRING DMeetVsev2-Vse-2
19960: PPUSH
19961: CALL_OW 88
// end else
19965: GO 20003
// begin Say ( Vsevolod , DMeetVsev2-Vse-2a ) ;
19967: LD_EXP 51
19971: PPUSH
19972: LD_STRING DMeetVsev2-Vse-2a
19974: PPUSH
19975: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-2 ) ;
19979: LD_EXP 39
19983: PPUSH
19984: LD_STRING DMeetVsev2-Bur-2
19986: PPUSH
19987: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-3 ) ;
19991: LD_EXP 51
19995: PPUSH
19996: LD_STRING DMeetVsev2-Vse-3
19998: PPUSH
19999: CALL_OW 88
// end ; Say ( Burlak , DMeetVsev3-Bur-1 ) ;
20003: LD_EXP 39
20007: PPUSH
20008: LD_STRING DMeetVsev3-Bur-1
20010: PPUSH
20011: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-1 ) ;
20015: LD_EXP 51
20019: PPUSH
20020: LD_STRING DMeetVsev3-Vse-1
20022: PPUSH
20023: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-2 ) ;
20027: LD_EXP 39
20031: PPUSH
20032: LD_STRING DMeetVsev3-Bur-2
20034: PPUSH
20035: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-2 ) ;
20039: LD_EXP 51
20043: PPUSH
20044: LD_STRING DMeetVsev3-Vse-2
20046: PPUSH
20047: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-3 ) ;
20051: LD_EXP 39
20055: PPUSH
20056: LD_STRING DMeetVsev3-Bur-3
20058: PPUSH
20059: CALL_OW 88
// if stevensStatus = 0 then
20063: LD_EXP 4
20067: PUSH
20068: LD_INT 0
20070: EQUAL
20071: IFFALSE 20085
// Say ( Burlak , DMeetVsev4-Bur-1 ) ;
20073: LD_EXP 39
20077: PPUSH
20078: LD_STRING DMeetVsev4-Bur-1
20080: PPUSH
20081: CALL_OW 88
// Say ( Burlak , DMeetVsev5-Bur-1 ) ;
20085: LD_EXP 39
20089: PPUSH
20090: LD_STRING DMeetVsev5-Bur-1
20092: PPUSH
20093: CALL_OW 88
// Say ( Vsevolod , DMeetVsev5-Vse-1 ) ;
20097: LD_EXP 51
20101: PPUSH
20102: LD_STRING DMeetVsev5-Vse-1
20104: PPUSH
20105: CALL_OW 88
// Say ( Burlak , DMeetVsev6-Bur-1 ) ;
20109: LD_EXP 39
20113: PPUSH
20114: LD_STRING DMeetVsev6-Bur-1
20116: PPUSH
20117: CALL_OW 88
// Say ( Vsevolod , DMeetVsev6-Vse-1 ) ;
20121: LD_EXP 51
20125: PPUSH
20126: LD_STRING DMeetVsev6-Vse-1
20128: PPUSH
20129: CALL_OW 88
// DialogueOff ;
20133: CALL_OW 7
// wait ( 0 0$20 ) ;
20137: LD_INT 700
20139: PPUSH
20140: CALL_OW 67
// PrepareConvoy ;
20144: CALL 4023 0 0
// ComMoveXY ( convoyTeam , 57 , 40 ) ;
20148: LD_EXP 63
20152: PPUSH
20153: LD_INT 57
20155: PPUSH
20156: LD_INT 40
20158: PPUSH
20159: CALL_OW 111
// AddComMoveXY ( convoyTeam , 37 , 59 ) ;
20163: LD_EXP 63
20167: PPUSH
20168: LD_INT 37
20170: PPUSH
20171: LD_INT 59
20173: PPUSH
20174: CALL_OW 171
// end ; end ;
20178: PPOPN 3
20180: END
// every 0 0$1 trigger vsevolodWaitGorky and GetDistUnits ( Vsevolod , Burlak ) <= 7 do
20181: LD_EXP 20
20185: PUSH
20186: LD_EXP 51
20190: PPUSH
20191: LD_EXP 39
20195: PPUSH
20196: CALL_OW 296
20200: PUSH
20201: LD_INT 7
20203: LESSEQUAL
20204: AND
20205: IFFALSE 20501
20207: GO 20209
20209: DISABLE
// begin vsevolodWaitGorky = false ;
20210: LD_ADDR_EXP 20
20214: PUSH
20215: LD_INT 0
20217: ST_TO_ADDR
// DialogueOn ;
20218: CALL_OW 6
// Say ( Vsevolod , DMeetVsev-Vse-1 ) ;
20222: LD_EXP 51
20226: PPUSH
20227: LD_STRING DMeetVsev-Vse-1
20229: PPUSH
20230: CALL_OW 88
// Say ( Burlak , DMeetVsev-Bur-1 ) ;
20234: LD_EXP 39
20238: PPUSH
20239: LD_STRING DMeetVsev-Bur-1
20241: PPUSH
20242: CALL_OW 88
// if lostAgainBase then
20246: LD_EXP 17
20250: IFFALSE 20290
// begin Say ( Vsevolod , DMeetVsev2-Vse-1 ) ;
20252: LD_EXP 51
20256: PPUSH
20257: LD_STRING DMeetVsev2-Vse-1
20259: PPUSH
20260: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-1 ) ;
20264: LD_EXP 39
20268: PPUSH
20269: LD_STRING DMeetVsev2-Bur-1
20271: PPUSH
20272: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-2 ) ;
20276: LD_EXP 51
20280: PPUSH
20281: LD_STRING DMeetVsev2-Vse-2
20283: PPUSH
20284: CALL_OW 88
// end else
20288: GO 20326
// begin Say ( Vsevolod , DMeetVsev2-Vse-2a ) ;
20290: LD_EXP 51
20294: PPUSH
20295: LD_STRING DMeetVsev2-Vse-2a
20297: PPUSH
20298: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-2 ) ;
20302: LD_EXP 39
20306: PPUSH
20307: LD_STRING DMeetVsev2-Bur-2
20309: PPUSH
20310: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-3 ) ;
20314: LD_EXP 51
20318: PPUSH
20319: LD_STRING DMeetVsev2-Vse-3
20321: PPUSH
20322: CALL_OW 88
// end ; Say ( Burlak , DMeetVsev3-Bur-1 ) ;
20326: LD_EXP 39
20330: PPUSH
20331: LD_STRING DMeetVsev3-Bur-1
20333: PPUSH
20334: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-1 ) ;
20338: LD_EXP 51
20342: PPUSH
20343: LD_STRING DMeetVsev3-Vse-1
20345: PPUSH
20346: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-2 ) ;
20350: LD_EXP 39
20354: PPUSH
20355: LD_STRING DMeetVsev3-Bur-2
20357: PPUSH
20358: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-2 ) ;
20362: LD_EXP 51
20366: PPUSH
20367: LD_STRING DMeetVsev3-Vse-2
20369: PPUSH
20370: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-3 ) ;
20374: LD_EXP 39
20378: PPUSH
20379: LD_STRING DMeetVsev3-Bur-3
20381: PPUSH
20382: CALL_OW 88
// if stevensStatus = 0 then
20386: LD_EXP 4
20390: PUSH
20391: LD_INT 0
20393: EQUAL
20394: IFFALSE 20408
// Say ( Burlak , DMeetVsev4-Bur-1 ) ;
20396: LD_EXP 39
20400: PPUSH
20401: LD_STRING DMeetVsev4-Bur-1
20403: PPUSH
20404: CALL_OW 88
// Say ( Burlak , DMeetVsev5-Bur-1 ) ;
20408: LD_EXP 39
20412: PPUSH
20413: LD_STRING DMeetVsev5-Bur-1
20415: PPUSH
20416: CALL_OW 88
// Say ( Vsevolod , DMeetVsev5-Vse-1 ) ;
20420: LD_EXP 51
20424: PPUSH
20425: LD_STRING DMeetVsev5-Vse-1
20427: PPUSH
20428: CALL_OW 88
// Say ( Vsevolod , DMeetVsev6-Vse-1 ) ;
20432: LD_EXP 51
20436: PPUSH
20437: LD_STRING DMeetVsev6-Vse-1
20439: PPUSH
20440: CALL_OW 88
// Say ( Burlak , DMeetVsev6-Bur-1 ) ;
20444: LD_EXP 39
20448: PPUSH
20449: LD_STRING DMeetVsev6-Bur-1
20451: PPUSH
20452: CALL_OW 88
// DialogueOff ;
20456: CALL_OW 7
// wait ( 0 0$20 ) ;
20460: LD_INT 700
20462: PPUSH
20463: CALL_OW 67
// PrepareConvoy ;
20467: CALL 4023 0 0
// ComMoveXY ( convoyTeam , 57 , 40 ) ;
20471: LD_EXP 63
20475: PPUSH
20476: LD_INT 57
20478: PPUSH
20479: LD_INT 40
20481: PPUSH
20482: CALL_OW 111
// AddComMoveXY ( convoyTeam , 37 , 59 ) ;
20486: LD_EXP 63
20490: PPUSH
20491: LD_INT 37
20493: PPUSH
20494: LD_INT 59
20496: PPUSH
20497: CALL_OW 171
// end ;
20501: END
// every 0 0$1 trigger not dial_ConvoyDialogBlocker do var tmp , speaker , unit ;
20502: LD_EXP 12
20506: NOT
20507: IFFALSE 20637
20509: GO 20511
20511: DISABLE
20512: LD_INT 0
20514: PPUSH
20515: PPUSH
20516: PPUSH
// begin enable ;
20517: ENABLE
// for unit in convoyTeam do
20518: LD_ADDR_VAR 0 3
20522: PUSH
20523: LD_EXP 63
20527: PUSH
20528: FOR_IN
20529: IFFALSE 20635
// if See ( 3 , unit ) and not IsInArea ( unit , InsideBaseArea ) then
20531: LD_INT 3
20533: PPUSH
20534: LD_VAR 0 3
20538: PPUSH
20539: CALL_OW 292
20543: PUSH
20544: LD_VAR 0 3
20548: PPUSH
20549: LD_INT 19
20551: PPUSH
20552: CALL_OW 308
20556: NOT
20557: AND
20558: IFFALSE 20633
// begin dial_ConvoyDialogBlocker = true ;
20560: LD_ADDR_EXP 12
20564: PUSH
20565: LD_INT 1
20567: ST_TO_ADDR
// DialogueOn ;
20568: CALL_OW 6
// speaker = UnitFilter ( convoyTeam , [ f_type , unit_human ] ) [ 1 ] ;
20572: LD_ADDR_VAR 0 2
20576: PUSH
20577: LD_EXP 63
20581: PPUSH
20582: LD_INT 21
20584: PUSH
20585: LD_INT 1
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PPUSH
20592: CALL_OW 72
20596: PUSH
20597: LD_INT 1
20599: ARRAY
20600: ST_TO_ADDR
// Say ( speaker , DTruck-Sol1-1 ) ;
20601: LD_VAR 0 2
20605: PPUSH
20606: LD_STRING DTruck-Sol1-1
20608: PPUSH
20609: CALL_OW 88
// Say ( Burlak , DTruck-Bur-1 ) ;
20613: LD_EXP 39
20617: PPUSH
20618: LD_STRING DTruck-Bur-1
20620: PPUSH
20621: CALL_OW 88
// DialogueOff ;
20625: CALL_OW 7
// exit ;
20629: POP
20630: POP
20631: GO 20637
// end ;
20633: GO 20528
20635: POP
20636: POP
// end ;
20637: PPOPN 3
20639: END
// every 0 0$1 trigger timeToAttack >= vsevolodSaveTime do
20640: LD_EXP 26
20644: PUSH
20645: LD_EXP 38
20649: GREATEREQUAL
20650: IFFALSE 20689
20652: GO 20654
20654: DISABLE
// begin PrepareAttack ;
20655: CALL 4204 0 0
// ComAgressiveMove ( attackTeam , 60 , 41 ) ;
20659: LD_EXP 64
20663: PPUSH
20664: LD_INT 60
20666: PPUSH
20667: LD_INT 41
20669: PPUSH
20670: CALL_OW 114
// AddComAgressiveMove ( attackTeam , 107 , 125 ) ;
20674: LD_EXP 64
20678: PPUSH
20679: LD_INT 107
20681: PPUSH
20682: LD_INT 125
20684: PPUSH
20685: CALL_OW 174
// end ;
20689: END
// every 1 trigger not savedVsevolod and GetLives ( Vsevolod ) <= 500 do
20690: LD_EXP 19
20694: NOT
20695: PUSH
20696: LD_EXP 51
20700: PPUSH
20701: CALL_OW 256
20705: PUSH
20706: LD_INT 500
20708: LESSEQUAL
20709: AND
20710: IFFALSE 20735
20712: GO 20714
20714: DISABLE
// begin DialogueOn ;
20715: CALL_OW 6
// SayRadio ( Vsevolod , DDieVsev2-Vse-1 ) ;
20719: LD_EXP 51
20723: PPUSH
20724: LD_STRING DDieVsev2-Vse-1
20726: PPUSH
20727: CALL_OW 94
// DialogueOff ;
20731: CALL_OW 7
// end ;
20735: END
// export function Dial_ResearchTauField ; var speaker , sci , randomTalkDialog ; begin
20736: LD_INT 0
20738: PPUSH
20739: PPUSH
20740: PPUSH
20741: PPUSH
// DialogueOn ;
20742: CALL_OW 6
// if IsOK ( Petrosyan ) then
20746: LD_EXP 43
20750: PPUSH
20751: CALL_OW 302
20755: IFFALSE 20771
// Say ( Petrosyan , DStasis-Pty-1 ) else
20757: LD_EXP 43
20761: PPUSH
20762: LD_STRING DStasis-Pty-1
20764: PPUSH
20765: CALL_OW 88
20769: GO 20993
// if IsOK ( Dolgov ) then
20771: LD_EXP 45
20775: PPUSH
20776: CALL_OW 302
20780: IFFALSE 20796
// Say ( Dolgov , DStasis-Dol-1 ) else
20782: LD_EXP 45
20786: PPUSH
20787: LD_STRING DStasis-Dol-1
20789: PPUSH
20790: CALL_OW 88
20794: GO 20993
// begin sci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] , [ f_nation , nation_russian ] ] ) diff Burlak ;
20796: LD_ADDR_VAR 0 3
20800: PUSH
20801: LD_INT 22
20803: PUSH
20804: LD_INT 3
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 21
20813: PUSH
20814: LD_INT 1
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 50
20823: PUSH
20824: EMPTY
20825: LIST
20826: PUSH
20827: LD_INT 26
20829: PUSH
20830: LD_INT 1
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 25
20839: PUSH
20840: LD_INT 4
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 23
20849: PUSH
20850: LD_INT 3
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: PPUSH
20865: CALL_OW 69
20869: PUSH
20870: LD_EXP 39
20874: DIFF
20875: ST_TO_ADDR
// if not sci then
20876: LD_VAR 0 3
20880: NOT
20881: IFFALSE 20952
// sci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Burlak ;
20883: LD_ADDR_VAR 0 3
20887: PUSH
20888: LD_INT 22
20890: PUSH
20891: LD_INT 3
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 21
20900: PUSH
20901: LD_INT 1
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 50
20910: PUSH
20911: EMPTY
20912: LIST
20913: PUSH
20914: LD_INT 26
20916: PUSH
20917: LD_INT 1
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 23
20926: PUSH
20927: LD_INT 3
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: PPUSH
20941: CALL_OW 69
20945: PUSH
20946: LD_EXP 39
20950: DIFF
20951: ST_TO_ADDR
// if sci then
20952: LD_VAR 0 3
20956: IFFALSE 20993
// begin speaker = DialogRandom ( sci , DStasis-RSol1-1 ,  , false , true ) ;
20958: LD_ADDR_VAR 0 2
20962: PUSH
20963: LD_VAR 0 3
20967: PPUSH
20968: LD_STRING DStasis-RSol1-1
20970: PPUSH
20971: LD_STRING 
20973: PPUSH
20974: LD_INT 0
20976: PPUSH
20977: LD_INT 1
20979: PPUSH
20980: CALL 12102 0 5
20984: ST_TO_ADDR
// randomTalkDialog = true ;
20985: LD_ADDR_VAR 0 4
20989: PUSH
20990: LD_INT 1
20992: ST_TO_ADDR
// end ; end ; if IsOK ( Petrosyan ) or IsOK ( Dolgov ) or randomTalkDialog then
20993: LD_EXP 43
20997: PPUSH
20998: CALL_OW 302
21002: PUSH
21003: LD_EXP 45
21007: PPUSH
21008: CALL_OW 302
21012: OR
21013: PUSH
21014: LD_VAR 0 4
21018: OR
21019: IFFALSE 21116
// begin Say ( Burlak , DStasis-Bur-1 ) ;
21021: LD_EXP 39
21025: PPUSH
21026: LD_STRING DStasis-Bur-1
21028: PPUSH
21029: CALL_OW 88
// if IsOK ( Petrosyan ) then
21033: LD_EXP 43
21037: PPUSH
21038: CALL_OW 302
21042: IFFALSE 21058
// Say ( Petrosyan , DStasis-Pty-2 ) else
21044: LD_EXP 43
21048: PPUSH
21049: LD_STRING DStasis-Pty-2
21051: PPUSH
21052: CALL_OW 88
21056: GO 21104
// if IsOK ( Dolgov ) then
21058: LD_EXP 45
21062: PPUSH
21063: CALL_OW 302
21067: IFFALSE 21083
// Say ( Dolgov , DStasis-Dol-2 ) else
21069: LD_EXP 45
21073: PPUSH
21074: LD_STRING DStasis-Dol-2
21076: PPUSH
21077: CALL_OW 88
21081: GO 21104
// DialogRandom ( speaker , DStasis-RSol1-2 ,  , false , true ) ;
21083: LD_VAR 0 2
21087: PPUSH
21088: LD_STRING DStasis-RSol1-2
21090: PPUSH
21091: LD_STRING 
21093: PPUSH
21094: LD_INT 0
21096: PPUSH
21097: LD_INT 1
21099: PPUSH
21100: CALL 12102 0 5
// Say ( Burlak , DStasis-Bur-2 ) ;
21104: LD_EXP 39
21108: PPUSH
21109: LD_STRING DStasis-Bur-2
21111: PPUSH
21112: CALL_OW 88
// end ; DialogueOff ;
21116: CALL_OW 7
// if GetTech ( tech_SibEng , 3 ) = state_researched then
21120: LD_INT 22
21122: PPUSH
21123: LD_INT 3
21125: PPUSH
21126: CALL_OW 321
21130: PUSH
21131: LD_INT 2
21133: EQUAL
21134: IFFALSE 21143
// ChangeMissionObjectives ( MOutResearch ) ;
21136: LD_STRING MOutResearch
21138: PPUSH
21139: CALL_OW 337
// end ;
21143: LD_VAR 0 1
21147: RET
// every 0 0$01 trigger GetTech ( tech_SibEng , 3 ) = state_researched and GetTech ( tech_TauField , 3 ) = state_researched and not dial_EndMissionDialogBlocker do var depots , depot , sibCounter ;
21148: LD_INT 22
21150: PPUSH
21151: LD_INT 3
21153: PPUSH
21154: CALL_OW 321
21158: PUSH
21159: LD_INT 2
21161: EQUAL
21162: PUSH
21163: LD_INT 30
21165: PPUSH
21166: LD_INT 3
21168: PPUSH
21169: CALL_OW 321
21173: PUSH
21174: LD_INT 2
21176: EQUAL
21177: AND
21178: PUSH
21179: LD_EXP 14
21183: NOT
21184: AND
21185: IFFALSE 21528
21187: GO 21189
21189: DISABLE
21190: LD_INT 0
21192: PPUSH
21193: PPUSH
21194: PPUSH
// begin wait ( 0 0$15 ) ;
21195: LD_INT 525
21197: PPUSH
21198: CALL_OW 67
// depots = FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21202: LD_ADDR_VAR 0 1
21206: PUSH
21207: LD_INT 22
21209: PUSH
21210: LD_INT 3
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 50
21219: PUSH
21220: EMPTY
21221: LIST
21222: PUSH
21223: LD_INT 21
21225: PUSH
21226: LD_INT 3
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 2
21235: PUSH
21236: LD_INT 30
21238: PUSH
21239: LD_INT 0
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 30
21248: PUSH
21249: LD_INT 1
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: LIST
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: PPUSH
21267: CALL_OW 69
21271: ST_TO_ADDR
// sibCounter = 0 ;
21272: LD_ADDR_VAR 0 3
21276: PUSH
21277: LD_INT 0
21279: ST_TO_ADDR
// for depot in depots do
21280: LD_ADDR_VAR 0 2
21284: PUSH
21285: LD_VAR 0 1
21289: PUSH
21290: FOR_IN
21291: IFFALSE 21324
// sibCounter = sibCounter + GetResourceType ( GetBase ( depot ) , mat_siberit ) ;
21293: LD_ADDR_VAR 0 3
21297: PUSH
21298: LD_VAR 0 3
21302: PUSH
21303: LD_VAR 0 2
21307: PPUSH
21308: CALL_OW 274
21312: PPUSH
21313: LD_INT 3
21315: PPUSH
21316: CALL_OW 275
21320: PLUS
21321: ST_TO_ADDR
21322: GO 21290
21324: POP
21325: POP
// if sibCounter >= 100 then
21326: LD_VAR 0 3
21330: PUSH
21331: LD_INT 100
21333: GREATEREQUAL
21334: IFFALSE 21520
// begin ChangeMissionObjectives ( MOutMine ) ;
21336: LD_STRING MOutMine
21338: PPUSH
21339: CALL_OW 337
// dial_EndMissionDialogBlocker = true ;
21343: LD_ADDR_EXP 14
21347: PUSH
21348: LD_INT 1
21350: ST_TO_ADDR
// DialogueOn ;
21351: CALL_OW 6
// SayRadio ( Platonov , DNextMiss1-Pla-1 ) ;
21355: LD_EXP 47
21359: PPUSH
21360: LD_STRING DNextMiss1-Pla-1
21362: PPUSH
21363: CALL_OW 94
// if not savedVsevolod then
21367: LD_EXP 19
21371: NOT
21372: IFFALSE 21418
// begin SayRadio ( Platonov , DNextMiss2-Pla-1 ) ;
21374: LD_EXP 47
21378: PPUSH
21379: LD_STRING DNextMiss2-Pla-1
21381: PPUSH
21382: CALL_OW 94
// Say ( Burlak , DNextMiss4-Bur-1 ) ;
21386: LD_EXP 39
21390: PPUSH
21391: LD_STRING DNextMiss4-Bur-1
21393: PPUSH
21394: CALL_OW 88
// SayRadio ( Vsevolod , DDieVsev1-Vse-1 ) ;
21398: LD_EXP 51
21402: PPUSH
21403: LD_STRING DDieVsev1-Vse-1
21405: PPUSH
21406: CALL_OW 94
// ForceFinishGame ;
21410: CALL 22201 0 0
// exit ;
21414: GO 21528
// end else
21416: GO 21454
// begin SayRadio ( Platonov , DNextMiss3-Pla-1 ) ;
21418: LD_EXP 47
21422: PPUSH
21423: LD_STRING DNextMiss3-Pla-1
21425: PPUSH
21426: CALL_OW 94
// SayRadio ( Platonov , DNextMiss4-Pla-1 ) ;
21430: LD_EXP 47
21434: PPUSH
21435: LD_STRING DNextMiss4-Pla-1
21437: PPUSH
21438: CALL_OW 94
// Say ( Burlak , DNextMiss4-Bur-1 ) ;
21442: LD_EXP 39
21446: PPUSH
21447: LD_STRING DNextMiss4-Bur-1
21449: PPUSH
21450: CALL_OW 88
// end ; DialogueOff ;
21454: CALL_OW 7
// SelectCharacters ;
21458: CALL 15376 0 0
// canSpawnReinforces = true ;
21462: LD_ADDR_EXP 23
21466: PUSH
21467: LD_INT 1
21469: ST_TO_ADDR
// canRemoveUnits = true ;
21470: LD_ADDR_EXP 25
21474: PUSH
21475: LD_INT 1
21477: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_friend , true ) ;
21478: LD_INT 1
21480: PPUSH
21481: LD_INT 6
21483: PPUSH
21484: LD_INT 1
21486: PPUSH
21487: LD_INT 1
21489: PPUSH
21490: CALL_OW 80
// SetAreaMapShow ( ExitMapArea , 1 ) ;
21494: LD_INT 14
21496: PPUSH
21497: LD_INT 1
21499: PPUSH
21500: CALL_OW 424
// ChangeMissionObjectives ( MOutResearch ) ;
21504: LD_STRING MOutResearch
21506: PPUSH
21507: CALL_OW 337
// ChangeMissionObjectives ( MCars ) ;
21511: LD_STRING MCars
21513: PPUSH
21514: CALL_OW 337
// exit ;
21518: GO 21528
// end ; wait ( 0 0$10 ) ;
21520: LD_INT 350
21522: PPUSH
21523: CALL_OW 67
// enable ;
21527: ENABLE
// end ;
21528: PPOPN 3
21530: END
// every 0 0$1 trigger canRemoveUnits do var un ;
21531: LD_EXP 25
21535: IFFALSE 21645
21537: GO 21539
21539: DISABLE
21540: LD_INT 0
21542: PPUSH
// begin enable ;
21543: ENABLE
// SetLives ( Vsevolod , 1000 ) ;
21544: LD_EXP 51
21548: PPUSH
21549: LD_INT 1000
21551: PPUSH
21552: CALL_OW 234
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , ExitMapArea ) ;
21556: LD_INT 22
21558: PUSH
21559: LD_INT 6
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 21
21568: PUSH
21569: LD_INT 1
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PPUSH
21580: CALL_OW 69
21584: PPUSH
21585: LD_INT 14
21587: PPUSH
21588: CALL_OW 113
// for un in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
21592: LD_ADDR_VAR 0 1
21596: PUSH
21597: LD_INT 14
21599: PPUSH
21600: LD_INT 22
21602: PUSH
21603: LD_INT 6
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 21
21612: PUSH
21613: LD_INT 1
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PPUSH
21624: CALL_OW 70
21628: PUSH
21629: FOR_IN
21630: IFFALSE 21643
// RemoveUnit ( un ) ;
21632: LD_VAR 0 1
21636: PPUSH
21637: CALL_OW 64
21641: GO 21629
21643: POP
21644: POP
// end ;
21645: PPOPN 1
21647: END
// every 1 trigger not canGoNorth and FilterUnitsInArea ( NorthBlockerArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do var unit ;
21648: LD_EXP 21
21652: NOT
21653: PUSH
21654: LD_INT 15
21656: PPUSH
21657: LD_INT 22
21659: PUSH
21660: LD_INT 3
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: LD_INT 50
21669: PUSH
21670: EMPTY
21671: LIST
21672: PUSH
21673: LD_INT 2
21675: PUSH
21676: LD_INT 21
21678: PUSH
21679: LD_INT 1
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 21
21688: PUSH
21689: LD_INT 2
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: LIST
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: LIST
21705: PPUSH
21706: CALL_OW 70
21710: AND
21711: IFFALSE 21843
21713: GO 21715
21715: DISABLE
21716: LD_INT 0
21718: PPUSH
// begin enable ;
21719: ENABLE
// for unit in FilterUnitsInArea ( NorthBlockerArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
21720: LD_ADDR_VAR 0 1
21724: PUSH
21725: LD_INT 15
21727: PPUSH
21728: LD_INT 22
21730: PUSH
21731: LD_INT 3
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: LD_INT 50
21740: PUSH
21741: EMPTY
21742: LIST
21743: PUSH
21744: LD_INT 2
21746: PUSH
21747: LD_INT 21
21749: PUSH
21750: LD_INT 1
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 21
21759: PUSH
21760: LD_INT 2
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: LIST
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: LIST
21776: PPUSH
21777: CALL_OW 70
21781: PUSH
21782: FOR_IN
21783: IFFALSE 21799
// ComMoveToArea ( unit , NorthBlockerReturnArea ) ;
21785: LD_VAR 0 1
21789: PPUSH
21790: LD_INT 16
21792: PPUSH
21793: CALL_OW 113
21797: GO 21782
21799: POP
21800: POP
// if not dial_NorthBlocker then
21801: LD_EXP 13
21805: NOT
21806: IFFALSE 21843
// begin dial_NorthBlocker = true ;
21808: LD_ADDR_EXP 13
21812: PUSH
21813: LD_INT 1
21815: ST_TO_ADDR
// Say ( Burlak , DMoveNorth-Bur-1 ) ;
21816: LD_EXP 39
21820: PPUSH
21821: LD_STRING DMoveNorth-Bur-1
21823: PPUSH
21824: CALL_OW 88
// wait ( 0 0$5 ) ;
21828: LD_INT 175
21830: PPUSH
21831: CALL_OW 67
// dial_NorthBlocker = false ;
21835: LD_ADDR_EXP 13
21839: PUSH
21840: LD_INT 0
21842: ST_TO_ADDR
// end ; end ;
21843: PPOPN 1
21845: END
// every 2 2$30 trigger canSpawnReinforces do
21846: LD_EXP 23
21850: IFFALSE 21906
21852: GO 21854
21854: DISABLE
// begin SpawnPlatonovReinforces ;
21855: CALL 2897 0 0
// CenterOnXY ( 134 , 233 ) ;
21859: LD_INT 134
21861: PPUSH
21862: LD_INT 233
21864: PPUSH
21865: CALL_OW 84
// if Kirilenkova and IsPlaced ( Kirilenkova ) then
21869: LD_EXP 48
21873: PUSH
21874: LD_EXP 48
21878: PPUSH
21879: CALL_OW 305
21883: AND
21884: IFFALSE 21898
// Say ( Kirilenkova , DMeetKirilenkova-Kir-1 ) ;
21886: LD_EXP 48
21890: PPUSH
21891: LD_STRING DMeetKirilenkova-Kir-1
21893: PPUSH
21894: CALL_OW 88
// canEndMission = true ;
21898: LD_ADDR_EXP 24
21902: PUSH
21903: LD_INT 1
21905: ST_TO_ADDR
// end ; end_of_file
21906: END
// export function Lose_Burlak ; begin
21907: LD_INT 0
21909: PPUSH
// YouLost ( Burlak ) ;
21910: LD_STRING Burlak
21912: PPUSH
21913: CALL_OW 104
// end ;
21917: LD_VAR 0 1
21921: RET
// export function Lose_Gleb ; begin
21922: LD_INT 0
21924: PPUSH
// SayRadio ( Platonov , DKillGleb-Pla-1 ) ;
21925: LD_EXP 47
21929: PPUSH
21930: LD_STRING DKillGleb-Pla-1
21932: PPUSH
21933: CALL_OW 94
// YouLost ( Gleb ) ;
21937: LD_STRING Gleb
21939: PPUSH
21940: CALL_OW 104
// end ;
21944: LD_VAR 0 1
21948: RET
// every 0 0$1 trigger not canEndMission and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_engineer ] , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
21949: LD_EXP 24
21953: NOT
21954: PUSH
21955: LD_INT 22
21957: PUSH
21958: LD_INT 3
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 2
21967: PUSH
21968: LD_INT 25
21970: PUSH
21971: LD_INT 2
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 30
21980: PUSH
21981: LD_INT 1
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 30
21990: PUSH
21991: LD_INT 0
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 30
22000: PUSH
22001: LD_INT 6
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 30
22010: PUSH
22011: LD_INT 7
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 30
22020: PUSH
22021: LD_INT 8
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PPUSH
22041: CALL_OW 69
22045: NOT
22046: AND
22047: IFFALSE 22059
22049: GO 22051
22051: DISABLE
// YouLost ( NoDepotNoEngineerNoLab ) ;
22052: LD_STRING NoDepotNoEngineerNoLab
22054: PPUSH
22055: CALL_OW 104
22059: END
// export function Lose_NoDepotNoEngineerNoLab ; begin
22060: LD_INT 0
22062: PPUSH
// YouLost ( NoDepotNoEngineerNoLab ) ;
22063: LD_STRING NoDepotNoEngineerNoLab
22065: PPUSH
22066: CALL_OW 104
// end ; end_of_file
22070: LD_VAR 0 1
22074: RET
// every 0 0$5 trigger canEndMission and not FilterUnitsExceptArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_and , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ] ) do var units , qr ;
22075: LD_EXP 24
22079: PUSH
22080: LD_INT 14
22082: PPUSH
22083: LD_INT 22
22085: PUSH
22086: LD_INT 3
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 50
22095: PUSH
22096: EMPTY
22097: LIST
22098: PUSH
22099: LD_INT 2
22101: PUSH
22102: LD_INT 21
22104: PUSH
22105: LD_INT 1
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 1
22114: PUSH
22115: LD_INT 21
22117: PUSH
22118: LD_INT 2
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 59
22127: PUSH
22128: EMPTY
22129: LIST
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: LIST
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: LIST
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: LIST
22145: PPUSH
22146: CALL_OW 71
22150: NOT
22151: AND
22152: IFFALSE 22198
22154: GO 22156
22156: DISABLE
22157: LD_INT 0
22159: PPUSH
22160: PPUSH
// begin case Query ( QEndGame ) of 1 :
22161: LD_STRING QEndGame
22163: PPUSH
22164: CALL_OW 97
22168: PUSH
22169: LD_INT 1
22171: DOUBLE
22172: EQUAL
22173: IFTRUE 22177
22175: GO 22196
22177: POP
// begin SetRewards ;
22178: CALL 22225 0 0
// SavePlayerCharacters ;
22182: CALL 22389 0 0
// SaveGlobalVariables ;
22186: CALL 22778 0 0
// YouWin ;
22190: CALL_OW 103
// end ; end ;
22194: GO 22197
22196: POP
// enable ;
22197: ENABLE
// end ;
22198: PPOPN 2
22200: END
// export function ForceFinishGame ; begin
22201: LD_INT 0
22203: PPUSH
// SetRewards ;
22204: CALL 22225 0 0
// SavePlayerCharacters ;
22208: CALL 22389 0 0
// SaveGlobalVariables ;
22212: CALL 22778 0 0
// YouWin ;
22216: CALL_OW 103
// end ;
22220: LD_VAR 0 1
22224: RET
// function SetRewards ; begin
22225: LD_INT 0
22227: PPUSH
// if savedVsevolod then
22228: LD_EXP 19
22232: IFFALSE 22246
// AddMedal ( Vsevolod , 1 ) else
22234: LD_STRING Vsevolod
22236: PPUSH
22237: LD_INT 1
22239: PPUSH
22240: CALL_OW 101
22244: GO 22257
// AddMedal ( Vsevolod , - 1 ) ;
22246: LD_STRING Vsevolod
22248: PPUSH
22249: LD_INT 1
22251: NEG
22252: PPUSH
22253: CALL_OW 101
// if not lostAgainBase then
22257: LD_EXP 17
22261: NOT
22262: IFFALSE 22276
// AddMedal ( Ovsyenko , 1 ) else
22264: LD_STRING Ovsyenko
22266: PPUSH
22267: LD_INT 1
22269: PPUSH
22270: CALL_OW 101
22274: GO 22287
// AddMedal ( Ovsyenko , - 1 ) ;
22276: LD_STRING Ovsyenko
22278: PPUSH
22279: LD_INT 1
22281: NEG
22282: PPUSH
22283: CALL_OW 101
// if GetTech ( tech_MatPred , 3 ) = state_researched then
22287: LD_INT 9
22289: PPUSH
22290: LD_INT 3
22292: PPUSH
22293: CALL_OW 321
22297: PUSH
22298: LD_INT 2
22300: EQUAL
22301: IFFALSE 22315
// AddMedal ( Prediction , 1 ) else
22303: LD_STRING Prediction
22305: PPUSH
22306: LD_INT 1
22308: PPUSH
22309: CALL_OW 101
22313: GO 22326
// AddMedal ( Prediction , - 1 ) ;
22315: LD_STRING Prediction
22317: PPUSH
22318: LD_INT 1
22320: NEG
22321: PPUSH
22322: CALL_OW 101
// GiveMedals ( Main ) ;
22326: LD_STRING Main
22328: PPUSH
22329: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ) ;
22333: LD_INT 22
22335: PUSH
22336: LD_INT 3
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 21
22345: PUSH
22346: LD_INT 1
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: LD_INT 23
22355: PUSH
22356: LD_INT 3
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 50
22365: PUSH
22366: EMPTY
22367: LIST
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: PPUSH
22375: CALL_OW 69
22379: PPUSH
22380: CALL_OW 43
// end ;
22384: LD_VAR 0 1
22388: RET
// function SavePlayerCharacters ; var randomsToSave ; begin
22389: LD_INT 0
22391: PPUSH
22392: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
22393: LD_EXP 39
22397: PPUSH
22398: LD_STRING Burlak
22400: PPUSH
22401: LD_INT 3
22403: PPUSH
22404: CALL 11903 0 3
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
22408: LD_EXP 40
22412: PPUSH
22413: LD_STRING Karamazov
22415: PPUSH
22416: LD_INT 3
22418: PPUSH
22419: CALL 11903 0 3
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
22423: LD_EXP 41
22427: PPUSH
22428: LD_STRING Petrovova
22430: PPUSH
22431: LD_INT 3
22433: PPUSH
22434: CALL 11903 0 3
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
22438: LD_EXP 42
22442: PPUSH
22443: LD_STRING Gleb
22445: PPUSH
22446: LD_INT 3
22448: PPUSH
22449: CALL 11903 0 3
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
22453: LD_EXP 43
22457: PPUSH
22458: LD_STRING Petrosyan
22460: PPUSH
22461: LD_INT 3
22463: PPUSH
22464: CALL 11903 0 3
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
22468: LD_EXP 45
22472: PPUSH
22473: LD_STRING Dolgov
22475: PPUSH
22476: LD_INT 3
22478: PPUSH
22479: CALL 11903 0 3
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
22483: LD_EXP 46
22487: PPUSH
22488: LD_STRING Lipshchin
22490: PPUSH
22491: LD_INT 3
22493: PPUSH
22494: CALL 11903 0 3
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
22498: LD_EXP 44
22502: PPUSH
22503: LD_STRING Titov
22505: PPUSH
22506: LD_INT 3
22508: PPUSH
22509: CALL 11903 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
22513: LD_EXP 48
22517: PPUSH
22518: LD_STRING Kirilenkova
22520: PPUSH
22521: LD_INT 3
22523: PPUSH
22524: CALL 11903 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
22528: LD_EXP 49
22532: PPUSH
22533: LD_STRING Belkov
22535: PPUSH
22536: LD_INT 3
22538: PPUSH
22539: CALL 11903 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
22543: LD_EXP 50
22547: PPUSH
22548: LD_STRING Belkov2
22550: PPUSH
22551: LD_INT 3
22553: PPUSH
22554: CALL 11903 0 3
// ExtSaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
22558: LD_INT 22
22560: PUSH
22561: LD_INT 3
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 21
22570: PUSH
22571: LD_INT 1
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 2
22580: PUSH
22581: LD_INT 25
22583: PUSH
22584: LD_INT 12
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 25
22593: PUSH
22594: LD_INT 16
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 25
22603: PUSH
22604: LD_INT 15
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: LIST
22621: PPUSH
22622: CALL_OW 69
22626: PPUSH
22627: LD_STRING other_apemans
22629: PPUSH
22630: LD_INT 3
22632: PPUSH
22633: CALL 11959 0 3
// randomsToSave = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 ] ;
22637: LD_ADDR_VAR 0 2
22641: PUSH
22642: LD_INT 22
22644: PUSH
22645: LD_INT 3
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 21
22654: PUSH
22655: LD_INT 1
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 23
22664: PUSH
22665: LD_INT 3
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 50
22674: PUSH
22675: EMPTY
22676: LIST
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: PPUSH
22684: CALL_OW 69
22688: PUSH
22689: LD_EXP 39
22693: PUSH
22694: LD_EXP 40
22698: PUSH
22699: LD_EXP 41
22703: PUSH
22704: LD_EXP 42
22708: PUSH
22709: LD_EXP 43
22713: PUSH
22714: LD_EXP 44
22718: PUSH
22719: LD_EXP 45
22723: PUSH
22724: LD_EXP 46
22728: PUSH
22729: LD_EXP 48
22733: PUSH
22734: LD_EXP 49
22738: PUSH
22739: LD_EXP 50
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: DIFF
22757: ST_TO_ADDR
// ExtSaveCharacters ( randomsToSave , other_survivors , 3 ) ;
22758: LD_VAR 0 2
22762: PPUSH
22763: LD_STRING other_survivors
22765: PPUSH
22766: LD_INT 3
22768: PPUSH
22769: CALL 11959 0 3
// end ;
22773: LD_VAR 0 1
22777: RET
// function SaveGlobalVariables ; var i , driver , driverShortName ; begin
22778: LD_INT 0
22780: PPUSH
22781: PPUSH
22782: PPUSH
22783: PPUSH
// resourcesFrom06 = [ ] ;
22784: LD_ADDR_EXP 8
22788: PUSH
22789: EMPTY
22790: ST_TO_ADDR
// SaveVariable ( techMatPredStatus , 06_TechMatPredStatus_1 ) ;
22791: LD_EXP 6
22795: PPUSH
22796: LD_STRING 06_TechMatPredStatus_1
22798: PPUSH
22799: CALL_OW 39
// for i in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_occupied ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , 89 ] ] ] ) do
22803: LD_ADDR_VAR 0 2
22807: PUSH
22808: LD_INT 14
22810: PPUSH
22811: LD_INT 22
22813: PUSH
22814: LD_INT 3
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 59
22823: PUSH
22824: EMPTY
22825: LIST
22826: PUSH
22827: LD_INT 2
22829: PUSH
22830: LD_INT 34
22832: PUSH
22833: LD_INT 51
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 34
22842: PUSH
22843: LD_INT 32
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 34
22852: PUSH
22853: LD_INT 12
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 34
22862: PUSH
22863: LD_INT 89
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: LIST
22881: PPUSH
22882: CALL_OW 70
22886: PUSH
22887: FOR_IN
22888: IFFALSE 22916
// resourcesFrom06 = resourcesFrom06 ^ [ GetMultiCargo ( i ) ] ;
22890: LD_ADDR_EXP 8
22894: PUSH
22895: LD_EXP 8
22899: PUSH
22900: LD_VAR 0 2
22904: PPUSH
22905: CALL 15029 0 1
22909: PUSH
22910: EMPTY
22911: LIST
22912: ADD
22913: ST_TO_ADDR
22914: GO 22887
22916: POP
22917: POP
// SaveVariable ( resourcesFrom06 , 06_ResourcesInCargo_3 ) ;
22918: LD_EXP 8
22922: PPUSH
22923: LD_STRING 06_ResourcesInCargo_3
22925: PPUSH
22926: CALL_OW 39
// for i in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ) do
22930: LD_ADDR_VAR 0 2
22934: PUSH
22935: LD_INT 14
22937: PPUSH
22938: LD_INT 22
22940: PUSH
22941: LD_INT 3
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 21
22950: PUSH
22951: LD_INT 2
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 59
22960: PUSH
22961: EMPTY
22962: LIST
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: LIST
22968: PPUSH
22969: CALL_OW 70
22973: PUSH
22974: FOR_IN
22975: IFFALSE 23379
// begin driver = UnitsInside ( i ) [ 1 ] ;
22977: LD_ADDR_VAR 0 3
22981: PUSH
22982: LD_VAR 0 2
22986: PPUSH
22987: CALL_OW 313
22991: PUSH
22992: LD_INT 1
22994: ARRAY
22995: ST_TO_ADDR
// if driver = Burlak then
22996: LD_VAR 0 3
23000: PUSH
23001: LD_EXP 39
23005: EQUAL
23006: IFFALSE 23016
// driverShortName = Bur ;
23008: LD_ADDR_VAR 0 4
23012: PUSH
23013: LD_STRING Bur
23015: ST_TO_ADDR
// if driver = Karamazov then
23016: LD_VAR 0 3
23020: PUSH
23021: LD_EXP 40
23025: EQUAL
23026: IFFALSE 23036
// driverShortName = Kar ;
23028: LD_ADDR_VAR 0 4
23032: PUSH
23033: LD_STRING Kar
23035: ST_TO_ADDR
// if driver = Petrovova then
23036: LD_VAR 0 3
23040: PUSH
23041: LD_EXP 41
23045: EQUAL
23046: IFFALSE 23056
// driverShortName = Ptr ;
23048: LD_ADDR_VAR 0 4
23052: PUSH
23053: LD_STRING Ptr
23055: ST_TO_ADDR
// if driver = Gleb then
23056: LD_VAR 0 3
23060: PUSH
23061: LD_EXP 42
23065: EQUAL
23066: IFFALSE 23076
// driverShortName = Glb ;
23068: LD_ADDR_VAR 0 4
23072: PUSH
23073: LD_STRING Glb
23075: ST_TO_ADDR
// if driver = Petrosyan then
23076: LD_VAR 0 3
23080: PUSH
23081: LD_EXP 43
23085: EQUAL
23086: IFFALSE 23096
// driverShortName = Pet ;
23088: LD_ADDR_VAR 0 4
23092: PUSH
23093: LD_STRING Pet
23095: ST_TO_ADDR
// if driver = Dolgov then
23096: LD_VAR 0 3
23100: PUSH
23101: LD_EXP 45
23105: EQUAL
23106: IFFALSE 23116
// driverShortName = Dol ;
23108: LD_ADDR_VAR 0 4
23112: PUSH
23113: LD_STRING Dol
23115: ST_TO_ADDR
// if driver = Lipshchin then
23116: LD_VAR 0 3
23120: PUSH
23121: LD_EXP 46
23125: EQUAL
23126: IFFALSE 23136
// driverShortName = Lip ;
23128: LD_ADDR_VAR 0 4
23132: PUSH
23133: LD_STRING Lip
23135: ST_TO_ADDR
// if driver = Titov then
23136: LD_VAR 0 3
23140: PUSH
23141: LD_EXP 44
23145: EQUAL
23146: IFFALSE 23156
// driverShortName = Tit ;
23148: LD_ADDR_VAR 0 4
23152: PUSH
23153: LD_STRING Tit
23155: ST_TO_ADDR
// if driver = Kirilenkova then
23156: LD_VAR 0 3
23160: PUSH
23161: LD_EXP 48
23165: EQUAL
23166: IFFALSE 23176
// driverShortName = Kir ;
23168: LD_ADDR_VAR 0 4
23172: PUSH
23173: LD_STRING Kir
23175: ST_TO_ADDR
// if driver = Belkov then
23176: LD_VAR 0 3
23180: PUSH
23181: LD_EXP 49
23185: EQUAL
23186: IFFALSE 23196
// driverShortName = Bel ;
23188: LD_ADDR_VAR 0 4
23192: PUSH
23193: LD_STRING Bel
23195: ST_TO_ADDR
// if driver = Belkov2 then
23196: LD_VAR 0 3
23200: PUSH
23201: LD_EXP 50
23205: EQUAL
23206: IFFALSE 23216
// driverShortName = Bel2 ;
23208: LD_ADDR_VAR 0 4
23212: PUSH
23213: LD_STRING Bel2
23215: ST_TO_ADDR
// if not driver in [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 ] then
23216: LD_VAR 0 3
23220: PUSH
23221: LD_EXP 39
23225: PUSH
23226: LD_EXP 40
23230: PUSH
23231: LD_EXP 41
23235: PUSH
23236: LD_EXP 42
23240: PUSH
23241: LD_EXP 43
23245: PUSH
23246: LD_EXP 44
23250: PUSH
23251: LD_EXP 45
23255: PUSH
23256: LD_EXP 46
23260: PUSH
23261: LD_EXP 48
23265: PUSH
23266: LD_EXP 49
23270: PUSH
23271: LD_EXP 50
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: IN
23289: NOT
23290: IFFALSE 23300
// driverShortName = rand ;
23292: LD_ADDR_VAR 0 4
23296: PUSH
23297: LD_STRING rand
23299: ST_TO_ADDR
// vehsFrom06 = vehsFrom06 ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , driverShortName ] ] ;
23300: LD_ADDR_EXP 7
23304: PUSH
23305: LD_EXP 7
23309: PUSH
23310: LD_VAR 0 2
23314: PPUSH
23315: CALL_OW 248
23319: PUSH
23320: LD_VAR 0 2
23324: PPUSH
23325: CALL_OW 265
23329: PUSH
23330: LD_VAR 0 2
23334: PPUSH
23335: CALL_OW 262
23339: PUSH
23340: LD_VAR 0 2
23344: PPUSH
23345: CALL_OW 263
23349: PUSH
23350: LD_VAR 0 2
23354: PPUSH
23355: CALL_OW 264
23359: PUSH
23360: LD_VAR 0 4
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: PUSH
23373: EMPTY
23374: LIST
23375: ADD
23376: ST_TO_ADDR
// end ;
23377: GO 22974
23379: POP
23380: POP
// SaveVariable ( vehsFrom06 , 06_Vehicles_2 ) ;
23381: LD_EXP 7
23385: PPUSH
23386: LD_STRING 06_Vehicles_2
23388: PPUSH
23389: CALL_OW 39
// SaveVariable ( savedVsevolod , 06_VsevolodStatus_4 ) ;
23393: LD_EXP 19
23397: PPUSH
23398: LD_STRING 06_VsevolodStatus_4
23400: PPUSH
23401: CALL_OW 39
// end ; end_of_file
23405: LD_VAR 0 1
23409: RET
// on UnitDestroyed ( unit ) do begin if unit in ovsyenkoBase then
23410: LD_VAR 0 1
23414: PUSH
23415: LD_EXP 59
23419: IN
23420: IFFALSE 23438
// ovsyenkoBase = ovsyenkoBase diff unit ;
23422: LD_ADDR_EXP 59
23426: PUSH
23427: LD_EXP 59
23431: PUSH
23432: LD_VAR 0 1
23436: DIFF
23437: ST_TO_ADDR
// if unit = Burlak then
23438: LD_VAR 0 1
23442: PUSH
23443: LD_EXP 39
23447: EQUAL
23448: IFFALSE 23454
// Lose_Burlak ;
23450: CALL 21907 0 0
// if unit = Vsevolod and GetSide ( Vsevolod ) = 3 then
23454: LD_VAR 0 1
23458: PUSH
23459: LD_EXP 51
23463: EQUAL
23464: PUSH
23465: LD_EXP 51
23469: PPUSH
23470: CALL_OW 255
23474: PUSH
23475: LD_INT 3
23477: EQUAL
23478: AND
23479: IFFALSE 23489
// savedVsevolod = false ;
23481: LD_ADDR_EXP 19
23485: PUSH
23486: LD_INT 0
23488: ST_TO_ADDR
// if unit = ovsyenko and GetSide ( ovsyenko ) = 3 then
23489: LD_VAR 0 1
23493: PUSH
23494: LD_INT 86
23496: EQUAL
23497: PUSH
23498: LD_INT 86
23500: PPUSH
23501: CALL_OW 255
23505: PUSH
23506: LD_INT 3
23508: EQUAL
23509: AND
23510: IFFALSE 23520
// lostAgainBase = true ;
23512: LD_ADDR_EXP 17
23516: PUSH
23517: LD_INT 1
23519: ST_TO_ADDR
// end ;
23520: PPOPN 1
23522: END
// on UnitDestroyed_Extra ( unit , killer_side , killer_unit ) do begin if unit = Gleb and killer_side = 3 then
23523: LD_VAR 0 1
23527: PUSH
23528: LD_EXP 42
23532: EQUAL
23533: PUSH
23534: LD_VAR 0 2
23538: PUSH
23539: LD_INT 3
23541: EQUAL
23542: AND
23543: IFFALSE 23549
// Lose_Gleb ;
23545: CALL 21922 0 0
// if unit = Vsevolod then
23549: LD_VAR 0 1
23553: PUSH
23554: LD_EXP 51
23558: EQUAL
23559: IFFALSE 23569
// savedVsevolod = false ;
23561: LD_ADDR_EXP 19
23565: PUSH
23566: LD_INT 0
23568: ST_TO_ADDR
// end ;
23569: PPOPN 3
23571: END
// on BuildingComplete ( building ) do begin end ;
23572: PPOPN 1
23574: END
// on BuildingCaptured ( building , side , human ) do begin if GetSide ( human ) = 3 and GetBType ( building ) = b_siberite_mine and not dial_SibTechsBlocker then
23575: LD_VAR 0 3
23579: PPUSH
23580: CALL_OW 255
23584: PUSH
23585: LD_INT 3
23587: EQUAL
23588: PUSH
23589: LD_VAR 0 1
23593: PPUSH
23594: CALL_OW 266
23598: PUSH
23599: LD_INT 30
23601: EQUAL
23602: AND
23603: PUSH
23604: LD_EXP 9
23608: NOT
23609: AND
23610: IFFALSE 23616
// Dial_SibTechs ;
23612: CALL 17268 0 0
// if GetSide ( human ) = 3 and GetBType ( building ) in [ b_depot , b_warehouse ] and GetResourceType ( GetBase ( building ) , mat_siberit ) > 0 and not dial_SibTechsBlocker then
23616: LD_VAR 0 3
23620: PPUSH
23621: CALL_OW 255
23625: PUSH
23626: LD_INT 3
23628: EQUAL
23629: PUSH
23630: LD_VAR 0 1
23634: PPUSH
23635: CALL_OW 266
23639: PUSH
23640: LD_INT 0
23642: PUSH
23643: LD_INT 1
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: IN
23650: AND
23651: PUSH
23652: LD_VAR 0 1
23656: PPUSH
23657: CALL_OW 274
23661: PPUSH
23662: LD_INT 3
23664: PPUSH
23665: CALL_OW 275
23669: PUSH
23670: LD_INT 0
23672: GREATER
23673: AND
23674: PUSH
23675: LD_EXP 9
23679: NOT
23680: AND
23681: IFFALSE 23687
// Dial_SibTechs ;
23683: CALL 17268 0 0
// end ;
23687: PPOPN 3
23689: END
// on Contact ( side1 , side2 ) do begin end ;
23690: PPOPN 2
23692: END
// on VehicleConstructed ( vehicle , building ) do var side , controlTowers , tmp ;
23693: LD_INT 0
23695: PPUSH
23696: PPUSH
23697: PPUSH
// begin if GetSide ( vehicle ) = 1 then
23698: LD_VAR 0 1
23702: PPUSH
23703: CALL_OW 255
23707: PUSH
23708: LD_INT 1
23710: EQUAL
23711: IFFALSE 23878
// begin controlTowers = FilterUnitsInArea ( HeadAmericanBaseArea , [ [ f_side , 1 ] , [ f_ok ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_vehicle ] ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23713: LD_ADDR_VAR 0 4
23717: PUSH
23718: LD_INT 5
23720: PPUSH
23721: LD_INT 22
23723: PUSH
23724: LD_INT 1
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 50
23733: PUSH
23734: EMPTY
23735: LIST
23736: PUSH
23737: LD_INT 2
23739: PUSH
23740: LD_INT 21
23742: PUSH
23743: LD_INT 3
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 21
23752: PUSH
23753: LD_INT 2
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 2
23767: PUSH
23768: LD_INT 30
23770: PUSH
23771: LD_INT 36
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 34
23780: PUSH
23781: LD_INT 31
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: LIST
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: PPUSH
23799: CALL_OW 70
23803: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote and controlTowers then
23804: LD_VAR 0 1
23808: PPUSH
23809: CALL_OW 263
23813: PUSH
23814: LD_INT 2
23816: EQUAL
23817: PUSH
23818: LD_VAR 0 4
23822: AND
23823: IFFALSE 23878
// begin tmp = UnitsInside ( controlTowers [ 1 ] ) ;
23825: LD_ADDR_VAR 0 5
23829: PUSH
23830: LD_VAR 0 4
23834: PUSH
23835: LD_INT 1
23837: ARRAY
23838: PPUSH
23839: CALL_OW 313
23843: ST_TO_ADDR
// if tmp then
23844: LD_VAR 0 5
23848: IFFALSE 23878
// LinkVehicleToHuman ( vehicle , tmp [ rand ( 1 , tmp ) ] ) ;
23850: LD_VAR 0 1
23854: PPUSH
23855: LD_VAR 0 5
23859: PUSH
23860: LD_INT 1
23862: PPUSH
23863: LD_VAR 0 5
23867: PPUSH
23868: CALL_OW 12
23872: ARRAY
23873: PPUSH
23874: CALL_OW 53
// end ; end ; end ;
23878: PPOPN 5
23880: END
// on ResearchComplete ( research , building ) do begin if research = tech_TauField then
23881: LD_VAR 0 1
23885: PUSH
23886: LD_INT 30
23888: EQUAL
23889: IFFALSE 23895
// Dial_ResearchTauField ;
23891: CALL 20736 0 0
// if research = tech_SibEng and GetTech ( tech_TauField , 3 ) = state_researched then
23895: LD_VAR 0 1
23899: PUSH
23900: LD_INT 22
23902: EQUAL
23903: PUSH
23904: LD_INT 30
23906: PPUSH
23907: LD_INT 3
23909: PPUSH
23910: CALL_OW 321
23914: PUSH
23915: LD_INT 2
23917: EQUAL
23918: AND
23919: IFFALSE 23928
// ChangeMissionObjectives ( MOutResearch ) ;
23921: LD_STRING MOutResearch
23923: PPUSH
23924: CALL_OW 337
// if research = tech_MatPred then
23928: LD_VAR 0 1
23932: PUSH
23933: LD_INT 9
23935: EQUAL
23936: IFFALSE 23942
// Dial_ResearchMatPredictions ;
23938: CALL 17423 0 0
// end ; end_of_file
23942: PPOPN 2
23944: END
// every 0 0$1 trigger enableVsevolodCounter do
23945: LD_EXP 22
23949: IFFALSE 23969
23951: GO 23953
23953: DISABLE
// begin enable ;
23954: ENABLE
// timeToAttack = timeToAttack + 0 0$01 ;
23955: LD_ADDR_EXP 26
23959: PUSH
23960: LD_EXP 26
23964: PUSH
23965: LD_INT 35
23967: PLUS
23968: ST_TO_ADDR
// end ; end_of_file
23969: END
// every 0 0$01 do var timer ;
23970: GO 23972
23972: DISABLE
23973: LD_INT 0
23975: PPUSH
// begin timer := 5 5$30 ;
23976: LD_ADDR_VAR 0 1
23980: PUSH
23981: LD_INT 11550
23983: ST_TO_ADDR
// repeat wait ( timer ) ;
23984: LD_VAR 0 1
23988: PPUSH
23989: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
23993: LD_INT 3
23995: PPUSH
23996: LD_INT 5
23998: PPUSH
23999: CALL_OW 12
24003: PPUSH
24004: LD_INT 20
24006: PPUSH
24007: LD_INT 1
24009: PPUSH
24010: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
24014: LD_ADDR_EXP 27
24018: PUSH
24019: LD_EXP 27
24023: PUSH
24024: LD_INT 1
24026: PLUS
24027: ST_TO_ADDR
// until cratesSpawned = 3 ;
24028: LD_EXP 27
24032: PUSH
24033: LD_INT 3
24035: EQUAL
24036: IFFALSE 23984
// end ; end_of_file
24038: PPOPN 1
24040: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
24041: LD_INT 0
24043: PPUSH
// ar_miner := 81 ;
24044: LD_ADDR_EXP 72
24048: PUSH
24049: LD_INT 81
24051: ST_TO_ADDR
// ar_crane := 88 ;
24052: LD_ADDR_EXP 71
24056: PUSH
24057: LD_INT 88
24059: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24060: LD_ADDR_EXP 66
24064: PUSH
24065: LD_INT 89
24067: ST_TO_ADDR
// us_hack := 99 ;
24068: LD_ADDR_EXP 67
24072: PUSH
24073: LD_INT 99
24075: ST_TO_ADDR
// us_artillery := 97 ;
24076: LD_ADDR_EXP 68
24080: PUSH
24081: LD_INT 97
24083: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24084: LD_ADDR_EXP 69
24088: PUSH
24089: LD_INT 91
24091: ST_TO_ADDR
// ar_mortar := 92 ;
24092: LD_ADDR_EXP 70
24096: PUSH
24097: LD_INT 92
24099: ST_TO_ADDR
// ru_radar := 98 ;
24100: LD_ADDR_EXP 65
24104: PUSH
24105: LD_INT 98
24107: ST_TO_ADDR
// tech_Artillery := 80 ;
24108: LD_ADDR_EXP 73
24112: PUSH
24113: LD_INT 80
24115: ST_TO_ADDR
// tech_RadMat := 81 ;
24116: LD_ADDR_EXP 74
24120: PUSH
24121: LD_INT 81
24123: ST_TO_ADDR
// tech_BasicTools := 82 ;
24124: LD_ADDR_EXP 75
24128: PUSH
24129: LD_INT 82
24131: ST_TO_ADDR
// tech_Cargo := 83 ;
24132: LD_ADDR_EXP 76
24136: PUSH
24137: LD_INT 83
24139: ST_TO_ADDR
// tech_Track := 84 ;
24140: LD_ADDR_EXP 77
24144: PUSH
24145: LD_INT 84
24147: ST_TO_ADDR
// tech_Crane := 85 ;
24148: LD_ADDR_EXP 78
24152: PUSH
24153: LD_INT 85
24155: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24156: LD_ADDR_EXP 79
24160: PUSH
24161: LD_INT 86
24163: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24164: LD_ADDR_EXP 80
24168: PUSH
24169: LD_INT 87
24171: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
24172: LD_ADDR_EXP 81
24176: PUSH
24177: LD_INT 88
24179: ST_TO_ADDR
// class_mastodont := 31 ;
24180: LD_ADDR_EXP 82
24184: PUSH
24185: LD_INT 31
24187: ST_TO_ADDR
// class_horse := 21 ;
24188: LD_ADDR_EXP 83
24192: PUSH
24193: LD_INT 21
24195: ST_TO_ADDR
// end ;
24196: LD_VAR 0 1
24200: RET
// every 1 do
24201: GO 24203
24203: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
24204: CALL 24041 0 0
24208: END
// every 0 0$1 do
24209: GO 24211
24211: DISABLE
// begin enable ;
24212: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
24213: LD_STRING updateTimer(
24215: PUSH
24216: LD_OWVAR 1
24220: STR
24221: PUSH
24222: LD_STRING );
24224: STR
24225: PPUSH
24226: CALL_OW 559
// end ;
24230: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24231: LD_INT 0
24233: PPUSH
// if p2 = 100 then
24234: LD_VAR 0 2
24238: PUSH
24239: LD_INT 100
24241: EQUAL
24242: IFFALSE 25245
// begin if not StreamModeActive then
24244: LD_EXP 84
24248: NOT
24249: IFFALSE 24259
// StreamModeActive := true ;
24251: LD_ADDR_EXP 84
24255: PUSH
24256: LD_INT 1
24258: ST_TO_ADDR
// if p3 = 0 then
24259: LD_VAR 0 3
24263: PUSH
24264: LD_INT 0
24266: EQUAL
24267: IFFALSE 24273
// InitStreamMode ;
24269: CALL 25405 0 0
// if p3 = 1 then
24273: LD_VAR 0 3
24277: PUSH
24278: LD_INT 1
24280: EQUAL
24281: IFFALSE 24291
// sRocket := true ;
24283: LD_ADDR_EXP 89
24287: PUSH
24288: LD_INT 1
24290: ST_TO_ADDR
// if p3 = 2 then
24291: LD_VAR 0 3
24295: PUSH
24296: LD_INT 2
24298: EQUAL
24299: IFFALSE 24309
// sSpeed := true ;
24301: LD_ADDR_EXP 88
24305: PUSH
24306: LD_INT 1
24308: ST_TO_ADDR
// if p3 = 3 then
24309: LD_VAR 0 3
24313: PUSH
24314: LD_INT 3
24316: EQUAL
24317: IFFALSE 24327
// sEngine := true ;
24319: LD_ADDR_EXP 90
24323: PUSH
24324: LD_INT 1
24326: ST_TO_ADDR
// if p3 = 4 then
24327: LD_VAR 0 3
24331: PUSH
24332: LD_INT 4
24334: EQUAL
24335: IFFALSE 24345
// sSpec := true ;
24337: LD_ADDR_EXP 87
24341: PUSH
24342: LD_INT 1
24344: ST_TO_ADDR
// if p3 = 5 then
24345: LD_VAR 0 3
24349: PUSH
24350: LD_INT 5
24352: EQUAL
24353: IFFALSE 24363
// sLevel := true ;
24355: LD_ADDR_EXP 91
24359: PUSH
24360: LD_INT 1
24362: ST_TO_ADDR
// if p3 = 6 then
24363: LD_VAR 0 3
24367: PUSH
24368: LD_INT 6
24370: EQUAL
24371: IFFALSE 24381
// sArmoury := true ;
24373: LD_ADDR_EXP 92
24377: PUSH
24378: LD_INT 1
24380: ST_TO_ADDR
// if p3 = 7 then
24381: LD_VAR 0 3
24385: PUSH
24386: LD_INT 7
24388: EQUAL
24389: IFFALSE 24399
// sRadar := true ;
24391: LD_ADDR_EXP 93
24395: PUSH
24396: LD_INT 1
24398: ST_TO_ADDR
// if p3 = 8 then
24399: LD_VAR 0 3
24403: PUSH
24404: LD_INT 8
24406: EQUAL
24407: IFFALSE 24417
// sBunker := true ;
24409: LD_ADDR_EXP 94
24413: PUSH
24414: LD_INT 1
24416: ST_TO_ADDR
// if p3 = 9 then
24417: LD_VAR 0 3
24421: PUSH
24422: LD_INT 9
24424: EQUAL
24425: IFFALSE 24435
// sHack := true ;
24427: LD_ADDR_EXP 95
24431: PUSH
24432: LD_INT 1
24434: ST_TO_ADDR
// if p3 = 10 then
24435: LD_VAR 0 3
24439: PUSH
24440: LD_INT 10
24442: EQUAL
24443: IFFALSE 24453
// sFire := true ;
24445: LD_ADDR_EXP 96
24449: PUSH
24450: LD_INT 1
24452: ST_TO_ADDR
// if p3 = 11 then
24453: LD_VAR 0 3
24457: PUSH
24458: LD_INT 11
24460: EQUAL
24461: IFFALSE 24471
// sRefresh := true ;
24463: LD_ADDR_EXP 97
24467: PUSH
24468: LD_INT 1
24470: ST_TO_ADDR
// if p3 = 12 then
24471: LD_VAR 0 3
24475: PUSH
24476: LD_INT 12
24478: EQUAL
24479: IFFALSE 24489
// sExp := true ;
24481: LD_ADDR_EXP 98
24485: PUSH
24486: LD_INT 1
24488: ST_TO_ADDR
// if p3 = 13 then
24489: LD_VAR 0 3
24493: PUSH
24494: LD_INT 13
24496: EQUAL
24497: IFFALSE 24507
// sDepot := true ;
24499: LD_ADDR_EXP 99
24503: PUSH
24504: LD_INT 1
24506: ST_TO_ADDR
// if p3 = 14 then
24507: LD_VAR 0 3
24511: PUSH
24512: LD_INT 14
24514: EQUAL
24515: IFFALSE 24525
// sFlag := true ;
24517: LD_ADDR_EXP 100
24521: PUSH
24522: LD_INT 1
24524: ST_TO_ADDR
// if p3 = 15 then
24525: LD_VAR 0 3
24529: PUSH
24530: LD_INT 15
24532: EQUAL
24533: IFFALSE 24543
// sKamikadze := true ;
24535: LD_ADDR_EXP 108
24539: PUSH
24540: LD_INT 1
24542: ST_TO_ADDR
// if p3 = 16 then
24543: LD_VAR 0 3
24547: PUSH
24548: LD_INT 16
24550: EQUAL
24551: IFFALSE 24561
// sTroll := true ;
24553: LD_ADDR_EXP 109
24557: PUSH
24558: LD_INT 1
24560: ST_TO_ADDR
// if p3 = 17 then
24561: LD_VAR 0 3
24565: PUSH
24566: LD_INT 17
24568: EQUAL
24569: IFFALSE 24579
// sSlow := true ;
24571: LD_ADDR_EXP 110
24575: PUSH
24576: LD_INT 1
24578: ST_TO_ADDR
// if p3 = 18 then
24579: LD_VAR 0 3
24583: PUSH
24584: LD_INT 18
24586: EQUAL
24587: IFFALSE 24597
// sLack := true ;
24589: LD_ADDR_EXP 111
24593: PUSH
24594: LD_INT 1
24596: ST_TO_ADDR
// if p3 = 19 then
24597: LD_VAR 0 3
24601: PUSH
24602: LD_INT 19
24604: EQUAL
24605: IFFALSE 24615
// sTank := true ;
24607: LD_ADDR_EXP 113
24611: PUSH
24612: LD_INT 1
24614: ST_TO_ADDR
// if p3 = 20 then
24615: LD_VAR 0 3
24619: PUSH
24620: LD_INT 20
24622: EQUAL
24623: IFFALSE 24633
// sRemote := true ;
24625: LD_ADDR_EXP 114
24629: PUSH
24630: LD_INT 1
24632: ST_TO_ADDR
// if p3 = 21 then
24633: LD_VAR 0 3
24637: PUSH
24638: LD_INT 21
24640: EQUAL
24641: IFFALSE 24651
// sPowell := true ;
24643: LD_ADDR_EXP 115
24647: PUSH
24648: LD_INT 1
24650: ST_TO_ADDR
// if p3 = 22 then
24651: LD_VAR 0 3
24655: PUSH
24656: LD_INT 22
24658: EQUAL
24659: IFFALSE 24669
// sTeleport := true ;
24661: LD_ADDR_EXP 118
24665: PUSH
24666: LD_INT 1
24668: ST_TO_ADDR
// if p3 = 23 then
24669: LD_VAR 0 3
24673: PUSH
24674: LD_INT 23
24676: EQUAL
24677: IFFALSE 24687
// sOilTower := true ;
24679: LD_ADDR_EXP 120
24683: PUSH
24684: LD_INT 1
24686: ST_TO_ADDR
// if p3 = 24 then
24687: LD_VAR 0 3
24691: PUSH
24692: LD_INT 24
24694: EQUAL
24695: IFFALSE 24705
// sShovel := true ;
24697: LD_ADDR_EXP 121
24701: PUSH
24702: LD_INT 1
24704: ST_TO_ADDR
// if p3 = 25 then
24705: LD_VAR 0 3
24709: PUSH
24710: LD_INT 25
24712: EQUAL
24713: IFFALSE 24723
// sSheik := true ;
24715: LD_ADDR_EXP 122
24719: PUSH
24720: LD_INT 1
24722: ST_TO_ADDR
// if p3 = 26 then
24723: LD_VAR 0 3
24727: PUSH
24728: LD_INT 26
24730: EQUAL
24731: IFFALSE 24741
// sEarthquake := true ;
24733: LD_ADDR_EXP 124
24737: PUSH
24738: LD_INT 1
24740: ST_TO_ADDR
// if p3 = 27 then
24741: LD_VAR 0 3
24745: PUSH
24746: LD_INT 27
24748: EQUAL
24749: IFFALSE 24759
// sAI := true ;
24751: LD_ADDR_EXP 125
24755: PUSH
24756: LD_INT 1
24758: ST_TO_ADDR
// if p3 = 28 then
24759: LD_VAR 0 3
24763: PUSH
24764: LD_INT 28
24766: EQUAL
24767: IFFALSE 24777
// sCargo := true ;
24769: LD_ADDR_EXP 128
24773: PUSH
24774: LD_INT 1
24776: ST_TO_ADDR
// if p3 = 29 then
24777: LD_VAR 0 3
24781: PUSH
24782: LD_INT 29
24784: EQUAL
24785: IFFALSE 24795
// sDLaser := true ;
24787: LD_ADDR_EXP 129
24791: PUSH
24792: LD_INT 1
24794: ST_TO_ADDR
// if p3 = 30 then
24795: LD_VAR 0 3
24799: PUSH
24800: LD_INT 30
24802: EQUAL
24803: IFFALSE 24813
// sExchange := true ;
24805: LD_ADDR_EXP 130
24809: PUSH
24810: LD_INT 1
24812: ST_TO_ADDR
// if p3 = 31 then
24813: LD_VAR 0 3
24817: PUSH
24818: LD_INT 31
24820: EQUAL
24821: IFFALSE 24831
// sFac := true ;
24823: LD_ADDR_EXP 131
24827: PUSH
24828: LD_INT 1
24830: ST_TO_ADDR
// if p3 = 32 then
24831: LD_VAR 0 3
24835: PUSH
24836: LD_INT 32
24838: EQUAL
24839: IFFALSE 24849
// sPower := true ;
24841: LD_ADDR_EXP 132
24845: PUSH
24846: LD_INT 1
24848: ST_TO_ADDR
// if p3 = 33 then
24849: LD_VAR 0 3
24853: PUSH
24854: LD_INT 33
24856: EQUAL
24857: IFFALSE 24867
// sRandom := true ;
24859: LD_ADDR_EXP 133
24863: PUSH
24864: LD_INT 1
24866: ST_TO_ADDR
// if p3 = 34 then
24867: LD_VAR 0 3
24871: PUSH
24872: LD_INT 34
24874: EQUAL
24875: IFFALSE 24885
// sShield := true ;
24877: LD_ADDR_EXP 134
24881: PUSH
24882: LD_INT 1
24884: ST_TO_ADDR
// if p3 = 35 then
24885: LD_VAR 0 3
24889: PUSH
24890: LD_INT 35
24892: EQUAL
24893: IFFALSE 24903
// sTime := true ;
24895: LD_ADDR_EXP 135
24899: PUSH
24900: LD_INT 1
24902: ST_TO_ADDR
// if p3 = 36 then
24903: LD_VAR 0 3
24907: PUSH
24908: LD_INT 36
24910: EQUAL
24911: IFFALSE 24921
// sTools := true ;
24913: LD_ADDR_EXP 136
24917: PUSH
24918: LD_INT 1
24920: ST_TO_ADDR
// if p3 = 101 then
24921: LD_VAR 0 3
24925: PUSH
24926: LD_INT 101
24928: EQUAL
24929: IFFALSE 24939
// sSold := true ;
24931: LD_ADDR_EXP 101
24935: PUSH
24936: LD_INT 1
24938: ST_TO_ADDR
// if p3 = 102 then
24939: LD_VAR 0 3
24943: PUSH
24944: LD_INT 102
24946: EQUAL
24947: IFFALSE 24957
// sDiff := true ;
24949: LD_ADDR_EXP 102
24953: PUSH
24954: LD_INT 1
24956: ST_TO_ADDR
// if p3 = 103 then
24957: LD_VAR 0 3
24961: PUSH
24962: LD_INT 103
24964: EQUAL
24965: IFFALSE 24975
// sFog := true ;
24967: LD_ADDR_EXP 105
24971: PUSH
24972: LD_INT 1
24974: ST_TO_ADDR
// if p3 = 104 then
24975: LD_VAR 0 3
24979: PUSH
24980: LD_INT 104
24982: EQUAL
24983: IFFALSE 24993
// sReset := true ;
24985: LD_ADDR_EXP 106
24989: PUSH
24990: LD_INT 1
24992: ST_TO_ADDR
// if p3 = 105 then
24993: LD_VAR 0 3
24997: PUSH
24998: LD_INT 105
25000: EQUAL
25001: IFFALSE 25011
// sSun := true ;
25003: LD_ADDR_EXP 107
25007: PUSH
25008: LD_INT 1
25010: ST_TO_ADDR
// if p3 = 106 then
25011: LD_VAR 0 3
25015: PUSH
25016: LD_INT 106
25018: EQUAL
25019: IFFALSE 25029
// sTiger := true ;
25021: LD_ADDR_EXP 103
25025: PUSH
25026: LD_INT 1
25028: ST_TO_ADDR
// if p3 = 107 then
25029: LD_VAR 0 3
25033: PUSH
25034: LD_INT 107
25036: EQUAL
25037: IFFALSE 25047
// sBomb := true ;
25039: LD_ADDR_EXP 104
25043: PUSH
25044: LD_INT 1
25046: ST_TO_ADDR
// if p3 = 108 then
25047: LD_VAR 0 3
25051: PUSH
25052: LD_INT 108
25054: EQUAL
25055: IFFALSE 25065
// sWound := true ;
25057: LD_ADDR_EXP 112
25061: PUSH
25062: LD_INT 1
25064: ST_TO_ADDR
// if p3 = 109 then
25065: LD_VAR 0 3
25069: PUSH
25070: LD_INT 109
25072: EQUAL
25073: IFFALSE 25083
// sBetray := true ;
25075: LD_ADDR_EXP 116
25079: PUSH
25080: LD_INT 1
25082: ST_TO_ADDR
// if p3 = 110 then
25083: LD_VAR 0 3
25087: PUSH
25088: LD_INT 110
25090: EQUAL
25091: IFFALSE 25101
// sContamin := true ;
25093: LD_ADDR_EXP 117
25097: PUSH
25098: LD_INT 1
25100: ST_TO_ADDR
// if p3 = 111 then
25101: LD_VAR 0 3
25105: PUSH
25106: LD_INT 111
25108: EQUAL
25109: IFFALSE 25119
// sOil := true ;
25111: LD_ADDR_EXP 119
25115: PUSH
25116: LD_INT 1
25118: ST_TO_ADDR
// if p3 = 112 then
25119: LD_VAR 0 3
25123: PUSH
25124: LD_INT 112
25126: EQUAL
25127: IFFALSE 25137
// sStu := true ;
25129: LD_ADDR_EXP 123
25133: PUSH
25134: LD_INT 1
25136: ST_TO_ADDR
// if p3 = 113 then
25137: LD_VAR 0 3
25141: PUSH
25142: LD_INT 113
25144: EQUAL
25145: IFFALSE 25155
// sBazooka := true ;
25147: LD_ADDR_EXP 126
25151: PUSH
25152: LD_INT 1
25154: ST_TO_ADDR
// if p3 = 114 then
25155: LD_VAR 0 3
25159: PUSH
25160: LD_INT 114
25162: EQUAL
25163: IFFALSE 25173
// sMortar := true ;
25165: LD_ADDR_EXP 127
25169: PUSH
25170: LD_INT 1
25172: ST_TO_ADDR
// if p3 = 115 then
25173: LD_VAR 0 3
25177: PUSH
25178: LD_INT 115
25180: EQUAL
25181: IFFALSE 25191
// sRanger := true ;
25183: LD_ADDR_EXP 137
25187: PUSH
25188: LD_INT 1
25190: ST_TO_ADDR
// if p3 = 116 then
25191: LD_VAR 0 3
25195: PUSH
25196: LD_INT 116
25198: EQUAL
25199: IFFALSE 25209
// sComputer := true ;
25201: LD_ADDR_EXP 138
25205: PUSH
25206: LD_INT 1
25208: ST_TO_ADDR
// if p3 = 117 then
25209: LD_VAR 0 3
25213: PUSH
25214: LD_INT 117
25216: EQUAL
25217: IFFALSE 25227
// s30 := true ;
25219: LD_ADDR_EXP 139
25223: PUSH
25224: LD_INT 1
25226: ST_TO_ADDR
// if p3 = 118 then
25227: LD_VAR 0 3
25231: PUSH
25232: LD_INT 118
25234: EQUAL
25235: IFFALSE 25245
// s60 := true ;
25237: LD_ADDR_EXP 140
25241: PUSH
25242: LD_INT 1
25244: ST_TO_ADDR
// end ; if p2 = 101 then
25245: LD_VAR 0 2
25249: PUSH
25250: LD_INT 101
25252: EQUAL
25253: IFFALSE 25381
// begin case p3 of 1 :
25255: LD_VAR 0 3
25259: PUSH
25260: LD_INT 1
25262: DOUBLE
25263: EQUAL
25264: IFTRUE 25268
25266: GO 25275
25268: POP
// hHackUnlimitedResources ; 2 :
25269: CALL 36977 0 0
25273: GO 25381
25275: LD_INT 2
25277: DOUBLE
25278: EQUAL
25279: IFTRUE 25283
25281: GO 25290
25283: POP
// hHackSetLevel10 ; 3 :
25284: CALL 37110 0 0
25288: GO 25381
25290: LD_INT 3
25292: DOUBLE
25293: EQUAL
25294: IFTRUE 25298
25296: GO 25305
25298: POP
// hHackSetLevel10YourUnits ; 4 :
25299: CALL 37195 0 0
25303: GO 25381
25305: LD_INT 4
25307: DOUBLE
25308: EQUAL
25309: IFTRUE 25313
25311: GO 25320
25313: POP
// hHackInvincible ; 5 :
25314: CALL 37643 0 0
25318: GO 25381
25320: LD_INT 5
25322: DOUBLE
25323: EQUAL
25324: IFTRUE 25328
25326: GO 25335
25328: POP
// hHackInvisible ; 6 :
25329: CALL 37754 0 0
25333: GO 25381
25335: LD_INT 6
25337: DOUBLE
25338: EQUAL
25339: IFTRUE 25343
25341: GO 25350
25343: POP
// hHackChangeYourSide ; 7 :
25344: CALL 37811 0 0
25348: GO 25381
25350: LD_INT 7
25352: DOUBLE
25353: EQUAL
25354: IFTRUE 25358
25356: GO 25365
25358: POP
// hHackChangeUnitSide ; 8 :
25359: CALL 37853 0 0
25363: GO 25381
25365: LD_INT 8
25367: DOUBLE
25368: EQUAL
25369: IFTRUE 25373
25371: GO 25380
25373: POP
// hHackFog ; end ;
25374: CALL 37954 0 0
25378: GO 25381
25380: POP
// end ; end ;
25381: LD_VAR 0 7
25385: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
25386: GO 25388
25388: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
25389: LD_STRING initStreamRollete();
25391: PPUSH
25392: CALL_OW 559
// InitStreamMode ;
25396: CALL 25405 0 0
// DefineStreamItems ( ) ;
25400: CALL 25869 0 0
// end ;
25404: END
// function InitStreamMode ; begin
25405: LD_INT 0
25407: PPUSH
// streamModeActive := false ;
25408: LD_ADDR_EXP 84
25412: PUSH
25413: LD_INT 0
25415: ST_TO_ADDR
// normalCounter := 36 ;
25416: LD_ADDR_EXP 85
25420: PUSH
25421: LD_INT 36
25423: ST_TO_ADDR
// hardcoreCounter := 16 ;
25424: LD_ADDR_EXP 86
25428: PUSH
25429: LD_INT 16
25431: ST_TO_ADDR
// sRocket := false ;
25432: LD_ADDR_EXP 89
25436: PUSH
25437: LD_INT 0
25439: ST_TO_ADDR
// sSpeed := false ;
25440: LD_ADDR_EXP 88
25444: PUSH
25445: LD_INT 0
25447: ST_TO_ADDR
// sEngine := false ;
25448: LD_ADDR_EXP 90
25452: PUSH
25453: LD_INT 0
25455: ST_TO_ADDR
// sSpec := false ;
25456: LD_ADDR_EXP 87
25460: PUSH
25461: LD_INT 0
25463: ST_TO_ADDR
// sLevel := false ;
25464: LD_ADDR_EXP 91
25468: PUSH
25469: LD_INT 0
25471: ST_TO_ADDR
// sArmoury := false ;
25472: LD_ADDR_EXP 92
25476: PUSH
25477: LD_INT 0
25479: ST_TO_ADDR
// sRadar := false ;
25480: LD_ADDR_EXP 93
25484: PUSH
25485: LD_INT 0
25487: ST_TO_ADDR
// sBunker := false ;
25488: LD_ADDR_EXP 94
25492: PUSH
25493: LD_INT 0
25495: ST_TO_ADDR
// sHack := false ;
25496: LD_ADDR_EXP 95
25500: PUSH
25501: LD_INT 0
25503: ST_TO_ADDR
// sFire := false ;
25504: LD_ADDR_EXP 96
25508: PUSH
25509: LD_INT 0
25511: ST_TO_ADDR
// sRefresh := false ;
25512: LD_ADDR_EXP 97
25516: PUSH
25517: LD_INT 0
25519: ST_TO_ADDR
// sExp := false ;
25520: LD_ADDR_EXP 98
25524: PUSH
25525: LD_INT 0
25527: ST_TO_ADDR
// sDepot := false ;
25528: LD_ADDR_EXP 99
25532: PUSH
25533: LD_INT 0
25535: ST_TO_ADDR
// sFlag := false ;
25536: LD_ADDR_EXP 100
25540: PUSH
25541: LD_INT 0
25543: ST_TO_ADDR
// sKamikadze := false ;
25544: LD_ADDR_EXP 108
25548: PUSH
25549: LD_INT 0
25551: ST_TO_ADDR
// sTroll := false ;
25552: LD_ADDR_EXP 109
25556: PUSH
25557: LD_INT 0
25559: ST_TO_ADDR
// sSlow := false ;
25560: LD_ADDR_EXP 110
25564: PUSH
25565: LD_INT 0
25567: ST_TO_ADDR
// sLack := false ;
25568: LD_ADDR_EXP 111
25572: PUSH
25573: LD_INT 0
25575: ST_TO_ADDR
// sTank := false ;
25576: LD_ADDR_EXP 113
25580: PUSH
25581: LD_INT 0
25583: ST_TO_ADDR
// sRemote := false ;
25584: LD_ADDR_EXP 114
25588: PUSH
25589: LD_INT 0
25591: ST_TO_ADDR
// sPowell := false ;
25592: LD_ADDR_EXP 115
25596: PUSH
25597: LD_INT 0
25599: ST_TO_ADDR
// sTeleport := false ;
25600: LD_ADDR_EXP 118
25604: PUSH
25605: LD_INT 0
25607: ST_TO_ADDR
// sOilTower := false ;
25608: LD_ADDR_EXP 120
25612: PUSH
25613: LD_INT 0
25615: ST_TO_ADDR
// sShovel := false ;
25616: LD_ADDR_EXP 121
25620: PUSH
25621: LD_INT 0
25623: ST_TO_ADDR
// sSheik := false ;
25624: LD_ADDR_EXP 122
25628: PUSH
25629: LD_INT 0
25631: ST_TO_ADDR
// sEarthquake := false ;
25632: LD_ADDR_EXP 124
25636: PUSH
25637: LD_INT 0
25639: ST_TO_ADDR
// sAI := false ;
25640: LD_ADDR_EXP 125
25644: PUSH
25645: LD_INT 0
25647: ST_TO_ADDR
// sCargo := false ;
25648: LD_ADDR_EXP 128
25652: PUSH
25653: LD_INT 0
25655: ST_TO_ADDR
// sDLaser := false ;
25656: LD_ADDR_EXP 129
25660: PUSH
25661: LD_INT 0
25663: ST_TO_ADDR
// sExchange := false ;
25664: LD_ADDR_EXP 130
25668: PUSH
25669: LD_INT 0
25671: ST_TO_ADDR
// sFac := false ;
25672: LD_ADDR_EXP 131
25676: PUSH
25677: LD_INT 0
25679: ST_TO_ADDR
// sPower := false ;
25680: LD_ADDR_EXP 132
25684: PUSH
25685: LD_INT 0
25687: ST_TO_ADDR
// sRandom := false ;
25688: LD_ADDR_EXP 133
25692: PUSH
25693: LD_INT 0
25695: ST_TO_ADDR
// sShield := false ;
25696: LD_ADDR_EXP 134
25700: PUSH
25701: LD_INT 0
25703: ST_TO_ADDR
// sTime := false ;
25704: LD_ADDR_EXP 135
25708: PUSH
25709: LD_INT 0
25711: ST_TO_ADDR
// sTools := false ;
25712: LD_ADDR_EXP 136
25716: PUSH
25717: LD_INT 0
25719: ST_TO_ADDR
// sSold := false ;
25720: LD_ADDR_EXP 101
25724: PUSH
25725: LD_INT 0
25727: ST_TO_ADDR
// sDiff := false ;
25728: LD_ADDR_EXP 102
25732: PUSH
25733: LD_INT 0
25735: ST_TO_ADDR
// sFog := false ;
25736: LD_ADDR_EXP 105
25740: PUSH
25741: LD_INT 0
25743: ST_TO_ADDR
// sReset := false ;
25744: LD_ADDR_EXP 106
25748: PUSH
25749: LD_INT 0
25751: ST_TO_ADDR
// sSun := false ;
25752: LD_ADDR_EXP 107
25756: PUSH
25757: LD_INT 0
25759: ST_TO_ADDR
// sTiger := false ;
25760: LD_ADDR_EXP 103
25764: PUSH
25765: LD_INT 0
25767: ST_TO_ADDR
// sBomb := false ;
25768: LD_ADDR_EXP 104
25772: PUSH
25773: LD_INT 0
25775: ST_TO_ADDR
// sWound := false ;
25776: LD_ADDR_EXP 112
25780: PUSH
25781: LD_INT 0
25783: ST_TO_ADDR
// sBetray := false ;
25784: LD_ADDR_EXP 116
25788: PUSH
25789: LD_INT 0
25791: ST_TO_ADDR
// sContamin := false ;
25792: LD_ADDR_EXP 117
25796: PUSH
25797: LD_INT 0
25799: ST_TO_ADDR
// sOil := false ;
25800: LD_ADDR_EXP 119
25804: PUSH
25805: LD_INT 0
25807: ST_TO_ADDR
// sStu := false ;
25808: LD_ADDR_EXP 123
25812: PUSH
25813: LD_INT 0
25815: ST_TO_ADDR
// sBazooka := false ;
25816: LD_ADDR_EXP 126
25820: PUSH
25821: LD_INT 0
25823: ST_TO_ADDR
// sMortar := false ;
25824: LD_ADDR_EXP 127
25828: PUSH
25829: LD_INT 0
25831: ST_TO_ADDR
// sRanger := false ;
25832: LD_ADDR_EXP 137
25836: PUSH
25837: LD_INT 0
25839: ST_TO_ADDR
// sComputer := false ;
25840: LD_ADDR_EXP 138
25844: PUSH
25845: LD_INT 0
25847: ST_TO_ADDR
// s30 := false ;
25848: LD_ADDR_EXP 139
25852: PUSH
25853: LD_INT 0
25855: ST_TO_ADDR
// s60 := false ;
25856: LD_ADDR_EXP 140
25860: PUSH
25861: LD_INT 0
25863: ST_TO_ADDR
// end ;
25864: LD_VAR 0 1
25868: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
25869: LD_INT 0
25871: PPUSH
25872: PPUSH
25873: PPUSH
25874: PPUSH
25875: PPUSH
// result := [ ] ;
25876: LD_ADDR_VAR 0 1
25880: PUSH
25881: EMPTY
25882: ST_TO_ADDR
// if campaign_id = 1 then
25883: LD_OWVAR 69
25887: PUSH
25888: LD_INT 1
25890: EQUAL
25891: IFFALSE 29057
// begin case mission_number of 1 :
25893: LD_OWVAR 70
25897: PUSH
25898: LD_INT 1
25900: DOUBLE
25901: EQUAL
25902: IFTRUE 25906
25904: GO 25982
25906: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
25907: LD_ADDR_VAR 0 1
25911: PUSH
25912: LD_INT 2
25914: PUSH
25915: LD_INT 4
25917: PUSH
25918: LD_INT 11
25920: PUSH
25921: LD_INT 12
25923: PUSH
25924: LD_INT 15
25926: PUSH
25927: LD_INT 16
25929: PUSH
25930: LD_INT 22
25932: PUSH
25933: LD_INT 23
25935: PUSH
25936: LD_INT 26
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 101
25952: PUSH
25953: LD_INT 102
25955: PUSH
25956: LD_INT 106
25958: PUSH
25959: LD_INT 116
25961: PUSH
25962: LD_INT 117
25964: PUSH
25965: LD_INT 118
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: ST_TO_ADDR
25980: GO 29055
25982: LD_INT 2
25984: DOUBLE
25985: EQUAL
25986: IFTRUE 25990
25988: GO 26074
25990: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
25991: LD_ADDR_VAR 0 1
25995: PUSH
25996: LD_INT 2
25998: PUSH
25999: LD_INT 4
26001: PUSH
26002: LD_INT 11
26004: PUSH
26005: LD_INT 12
26007: PUSH
26008: LD_INT 15
26010: PUSH
26011: LD_INT 16
26013: PUSH
26014: LD_INT 22
26016: PUSH
26017: LD_INT 23
26019: PUSH
26020: LD_INT 26
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 101
26036: PUSH
26037: LD_INT 102
26039: PUSH
26040: LD_INT 105
26042: PUSH
26043: LD_INT 106
26045: PUSH
26046: LD_INT 108
26048: PUSH
26049: LD_INT 116
26051: PUSH
26052: LD_INT 117
26054: PUSH
26055: LD_INT 118
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: ST_TO_ADDR
26072: GO 29055
26074: LD_INT 3
26076: DOUBLE
26077: EQUAL
26078: IFTRUE 26082
26080: GO 26170
26082: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
26083: LD_ADDR_VAR 0 1
26087: PUSH
26088: LD_INT 2
26090: PUSH
26091: LD_INT 4
26093: PUSH
26094: LD_INT 5
26096: PUSH
26097: LD_INT 11
26099: PUSH
26100: LD_INT 12
26102: PUSH
26103: LD_INT 15
26105: PUSH
26106: LD_INT 16
26108: PUSH
26109: LD_INT 22
26111: PUSH
26112: LD_INT 26
26114: PUSH
26115: LD_INT 36
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 101
26132: PUSH
26133: LD_INT 102
26135: PUSH
26136: LD_INT 105
26138: PUSH
26139: LD_INT 106
26141: PUSH
26142: LD_INT 108
26144: PUSH
26145: LD_INT 116
26147: PUSH
26148: LD_INT 117
26150: PUSH
26151: LD_INT 118
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: ST_TO_ADDR
26168: GO 29055
26170: LD_INT 4
26172: DOUBLE
26173: EQUAL
26174: IFTRUE 26178
26176: GO 26274
26178: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
26179: LD_ADDR_VAR 0 1
26183: PUSH
26184: LD_INT 2
26186: PUSH
26187: LD_INT 4
26189: PUSH
26190: LD_INT 5
26192: PUSH
26193: LD_INT 8
26195: PUSH
26196: LD_INT 11
26198: PUSH
26199: LD_INT 12
26201: PUSH
26202: LD_INT 15
26204: PUSH
26205: LD_INT 16
26207: PUSH
26208: LD_INT 22
26210: PUSH
26211: LD_INT 23
26213: PUSH
26214: LD_INT 26
26216: PUSH
26217: LD_INT 36
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 101
26236: PUSH
26237: LD_INT 102
26239: PUSH
26240: LD_INT 105
26242: PUSH
26243: LD_INT 106
26245: PUSH
26246: LD_INT 108
26248: PUSH
26249: LD_INT 116
26251: PUSH
26252: LD_INT 117
26254: PUSH
26255: LD_INT 118
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: ST_TO_ADDR
26272: GO 29055
26274: LD_INT 5
26276: DOUBLE
26277: EQUAL
26278: IFTRUE 26282
26280: GO 26394
26282: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
26283: LD_ADDR_VAR 0 1
26287: PUSH
26288: LD_INT 2
26290: PUSH
26291: LD_INT 4
26293: PUSH
26294: LD_INT 5
26296: PUSH
26297: LD_INT 6
26299: PUSH
26300: LD_INT 8
26302: PUSH
26303: LD_INT 11
26305: PUSH
26306: LD_INT 12
26308: PUSH
26309: LD_INT 15
26311: PUSH
26312: LD_INT 16
26314: PUSH
26315: LD_INT 22
26317: PUSH
26318: LD_INT 23
26320: PUSH
26321: LD_INT 25
26323: PUSH
26324: LD_INT 26
26326: PUSH
26327: LD_INT 36
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 101
26348: PUSH
26349: LD_INT 102
26351: PUSH
26352: LD_INT 105
26354: PUSH
26355: LD_INT 106
26357: PUSH
26358: LD_INT 108
26360: PUSH
26361: LD_INT 109
26363: PUSH
26364: LD_INT 112
26366: PUSH
26367: LD_INT 116
26369: PUSH
26370: LD_INT 117
26372: PUSH
26373: LD_INT 118
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: ST_TO_ADDR
26392: GO 29055
26394: LD_INT 6
26396: DOUBLE
26397: EQUAL
26398: IFTRUE 26402
26400: GO 26534
26402: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
26403: LD_ADDR_VAR 0 1
26407: PUSH
26408: LD_INT 2
26410: PUSH
26411: LD_INT 4
26413: PUSH
26414: LD_INT 5
26416: PUSH
26417: LD_INT 6
26419: PUSH
26420: LD_INT 8
26422: PUSH
26423: LD_INT 11
26425: PUSH
26426: LD_INT 12
26428: PUSH
26429: LD_INT 15
26431: PUSH
26432: LD_INT 16
26434: PUSH
26435: LD_INT 20
26437: PUSH
26438: LD_INT 21
26440: PUSH
26441: LD_INT 22
26443: PUSH
26444: LD_INT 23
26446: PUSH
26447: LD_INT 25
26449: PUSH
26450: LD_INT 26
26452: PUSH
26453: LD_INT 30
26455: PUSH
26456: LD_INT 31
26458: PUSH
26459: LD_INT 32
26461: PUSH
26462: LD_INT 36
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 101
26488: PUSH
26489: LD_INT 102
26491: PUSH
26492: LD_INT 105
26494: PUSH
26495: LD_INT 106
26497: PUSH
26498: LD_INT 108
26500: PUSH
26501: LD_INT 109
26503: PUSH
26504: LD_INT 112
26506: PUSH
26507: LD_INT 116
26509: PUSH
26510: LD_INT 117
26512: PUSH
26513: LD_INT 118
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: ST_TO_ADDR
26532: GO 29055
26534: LD_INT 7
26536: DOUBLE
26537: EQUAL
26538: IFTRUE 26542
26540: GO 26654
26542: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
26543: LD_ADDR_VAR 0 1
26547: PUSH
26548: LD_INT 2
26550: PUSH
26551: LD_INT 4
26553: PUSH
26554: LD_INT 5
26556: PUSH
26557: LD_INT 7
26559: PUSH
26560: LD_INT 11
26562: PUSH
26563: LD_INT 12
26565: PUSH
26566: LD_INT 15
26568: PUSH
26569: LD_INT 16
26571: PUSH
26572: LD_INT 20
26574: PUSH
26575: LD_INT 21
26577: PUSH
26578: LD_INT 22
26580: PUSH
26581: LD_INT 23
26583: PUSH
26584: LD_INT 25
26586: PUSH
26587: LD_INT 26
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 101
26608: PUSH
26609: LD_INT 102
26611: PUSH
26612: LD_INT 103
26614: PUSH
26615: LD_INT 105
26617: PUSH
26618: LD_INT 106
26620: PUSH
26621: LD_INT 108
26623: PUSH
26624: LD_INT 112
26626: PUSH
26627: LD_INT 116
26629: PUSH
26630: LD_INT 117
26632: PUSH
26633: LD_INT 118
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: ST_TO_ADDR
26652: GO 29055
26654: LD_INT 8
26656: DOUBLE
26657: EQUAL
26658: IFTRUE 26662
26660: GO 26802
26662: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
26663: LD_ADDR_VAR 0 1
26667: PUSH
26668: LD_INT 2
26670: PUSH
26671: LD_INT 4
26673: PUSH
26674: LD_INT 5
26676: PUSH
26677: LD_INT 6
26679: PUSH
26680: LD_INT 7
26682: PUSH
26683: LD_INT 8
26685: PUSH
26686: LD_INT 11
26688: PUSH
26689: LD_INT 12
26691: PUSH
26692: LD_INT 15
26694: PUSH
26695: LD_INT 16
26697: PUSH
26698: LD_INT 20
26700: PUSH
26701: LD_INT 21
26703: PUSH
26704: LD_INT 22
26706: PUSH
26707: LD_INT 23
26709: PUSH
26710: LD_INT 25
26712: PUSH
26713: LD_INT 26
26715: PUSH
26716: LD_INT 30
26718: PUSH
26719: LD_INT 31
26721: PUSH
26722: LD_INT 32
26724: PUSH
26725: LD_INT 36
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 101
26752: PUSH
26753: LD_INT 102
26755: PUSH
26756: LD_INT 103
26758: PUSH
26759: LD_INT 105
26761: PUSH
26762: LD_INT 106
26764: PUSH
26765: LD_INT 108
26767: PUSH
26768: LD_INT 109
26770: PUSH
26771: LD_INT 112
26773: PUSH
26774: LD_INT 116
26776: PUSH
26777: LD_INT 117
26779: PUSH
26780: LD_INT 118
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: ST_TO_ADDR
26800: GO 29055
26802: LD_INT 9
26804: DOUBLE
26805: EQUAL
26806: IFTRUE 26810
26808: GO 26958
26810: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
26811: LD_ADDR_VAR 0 1
26815: PUSH
26816: LD_INT 2
26818: PUSH
26819: LD_INT 4
26821: PUSH
26822: LD_INT 5
26824: PUSH
26825: LD_INT 6
26827: PUSH
26828: LD_INT 7
26830: PUSH
26831: LD_INT 8
26833: PUSH
26834: LD_INT 11
26836: PUSH
26837: LD_INT 12
26839: PUSH
26840: LD_INT 15
26842: PUSH
26843: LD_INT 16
26845: PUSH
26846: LD_INT 20
26848: PUSH
26849: LD_INT 21
26851: PUSH
26852: LD_INT 22
26854: PUSH
26855: LD_INT 23
26857: PUSH
26858: LD_INT 25
26860: PUSH
26861: LD_INT 26
26863: PUSH
26864: LD_INT 28
26866: PUSH
26867: LD_INT 30
26869: PUSH
26870: LD_INT 31
26872: PUSH
26873: LD_INT 32
26875: PUSH
26876: LD_INT 36
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: PUSH
26902: LD_INT 101
26904: PUSH
26905: LD_INT 102
26907: PUSH
26908: LD_INT 103
26910: PUSH
26911: LD_INT 105
26913: PUSH
26914: LD_INT 106
26916: PUSH
26917: LD_INT 108
26919: PUSH
26920: LD_INT 109
26922: PUSH
26923: LD_INT 112
26925: PUSH
26926: LD_INT 114
26928: PUSH
26929: LD_INT 116
26931: PUSH
26932: LD_INT 117
26934: PUSH
26935: LD_INT 118
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: ST_TO_ADDR
26956: GO 29055
26958: LD_INT 10
26960: DOUBLE
26961: EQUAL
26962: IFTRUE 26966
26964: GO 27162
26966: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
26967: LD_ADDR_VAR 0 1
26971: PUSH
26972: LD_INT 2
26974: PUSH
26975: LD_INT 4
26977: PUSH
26978: LD_INT 5
26980: PUSH
26981: LD_INT 6
26983: PUSH
26984: LD_INT 7
26986: PUSH
26987: LD_INT 8
26989: PUSH
26990: LD_INT 9
26992: PUSH
26993: LD_INT 10
26995: PUSH
26996: LD_INT 11
26998: PUSH
26999: LD_INT 12
27001: PUSH
27002: LD_INT 13
27004: PUSH
27005: LD_INT 14
27007: PUSH
27008: LD_INT 15
27010: PUSH
27011: LD_INT 16
27013: PUSH
27014: LD_INT 17
27016: PUSH
27017: LD_INT 18
27019: PUSH
27020: LD_INT 19
27022: PUSH
27023: LD_INT 20
27025: PUSH
27026: LD_INT 21
27028: PUSH
27029: LD_INT 22
27031: PUSH
27032: LD_INT 23
27034: PUSH
27035: LD_INT 24
27037: PUSH
27038: LD_INT 25
27040: PUSH
27041: LD_INT 26
27043: PUSH
27044: LD_INT 28
27046: PUSH
27047: LD_INT 30
27049: PUSH
27050: LD_INT 31
27052: PUSH
27053: LD_INT 32
27055: PUSH
27056: LD_INT 36
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 101
27092: PUSH
27093: LD_INT 102
27095: PUSH
27096: LD_INT 103
27098: PUSH
27099: LD_INT 104
27101: PUSH
27102: LD_INT 105
27104: PUSH
27105: LD_INT 106
27107: PUSH
27108: LD_INT 107
27110: PUSH
27111: LD_INT 108
27113: PUSH
27114: LD_INT 109
27116: PUSH
27117: LD_INT 110
27119: PUSH
27120: LD_INT 111
27122: PUSH
27123: LD_INT 112
27125: PUSH
27126: LD_INT 114
27128: PUSH
27129: LD_INT 116
27131: PUSH
27132: LD_INT 117
27134: PUSH
27135: LD_INT 118
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: ST_TO_ADDR
27160: GO 29055
27162: LD_INT 11
27164: DOUBLE
27165: EQUAL
27166: IFTRUE 27170
27168: GO 27374
27170: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
27171: LD_ADDR_VAR 0 1
27175: PUSH
27176: LD_INT 2
27178: PUSH
27179: LD_INT 3
27181: PUSH
27182: LD_INT 4
27184: PUSH
27185: LD_INT 5
27187: PUSH
27188: LD_INT 6
27190: PUSH
27191: LD_INT 7
27193: PUSH
27194: LD_INT 8
27196: PUSH
27197: LD_INT 9
27199: PUSH
27200: LD_INT 10
27202: PUSH
27203: LD_INT 11
27205: PUSH
27206: LD_INT 12
27208: PUSH
27209: LD_INT 13
27211: PUSH
27212: LD_INT 14
27214: PUSH
27215: LD_INT 15
27217: PUSH
27218: LD_INT 16
27220: PUSH
27221: LD_INT 17
27223: PUSH
27224: LD_INT 18
27226: PUSH
27227: LD_INT 19
27229: PUSH
27230: LD_INT 20
27232: PUSH
27233: LD_INT 21
27235: PUSH
27236: LD_INT 22
27238: PUSH
27239: LD_INT 23
27241: PUSH
27242: LD_INT 24
27244: PUSH
27245: LD_INT 25
27247: PUSH
27248: LD_INT 26
27250: PUSH
27251: LD_INT 28
27253: PUSH
27254: LD_INT 30
27256: PUSH
27257: LD_INT 31
27259: PUSH
27260: LD_INT 32
27262: PUSH
27263: LD_INT 34
27265: PUSH
27266: LD_INT 36
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 101
27304: PUSH
27305: LD_INT 102
27307: PUSH
27308: LD_INT 103
27310: PUSH
27311: LD_INT 104
27313: PUSH
27314: LD_INT 105
27316: PUSH
27317: LD_INT 106
27319: PUSH
27320: LD_INT 107
27322: PUSH
27323: LD_INT 108
27325: PUSH
27326: LD_INT 109
27328: PUSH
27329: LD_INT 110
27331: PUSH
27332: LD_INT 111
27334: PUSH
27335: LD_INT 112
27337: PUSH
27338: LD_INT 114
27340: PUSH
27341: LD_INT 116
27343: PUSH
27344: LD_INT 117
27346: PUSH
27347: LD_INT 118
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: ST_TO_ADDR
27372: GO 29055
27374: LD_INT 12
27376: DOUBLE
27377: EQUAL
27378: IFTRUE 27382
27380: GO 27602
27382: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
27383: LD_ADDR_VAR 0 1
27387: PUSH
27388: LD_INT 1
27390: PUSH
27391: LD_INT 2
27393: PUSH
27394: LD_INT 3
27396: PUSH
27397: LD_INT 4
27399: PUSH
27400: LD_INT 5
27402: PUSH
27403: LD_INT 6
27405: PUSH
27406: LD_INT 7
27408: PUSH
27409: LD_INT 8
27411: PUSH
27412: LD_INT 9
27414: PUSH
27415: LD_INT 10
27417: PUSH
27418: LD_INT 11
27420: PUSH
27421: LD_INT 12
27423: PUSH
27424: LD_INT 13
27426: PUSH
27427: LD_INT 14
27429: PUSH
27430: LD_INT 15
27432: PUSH
27433: LD_INT 16
27435: PUSH
27436: LD_INT 17
27438: PUSH
27439: LD_INT 18
27441: PUSH
27442: LD_INT 19
27444: PUSH
27445: LD_INT 20
27447: PUSH
27448: LD_INT 21
27450: PUSH
27451: LD_INT 22
27453: PUSH
27454: LD_INT 23
27456: PUSH
27457: LD_INT 24
27459: PUSH
27460: LD_INT 25
27462: PUSH
27463: LD_INT 26
27465: PUSH
27466: LD_INT 27
27468: PUSH
27469: LD_INT 28
27471: PUSH
27472: LD_INT 30
27474: PUSH
27475: LD_INT 31
27477: PUSH
27478: LD_INT 32
27480: PUSH
27481: LD_INT 33
27483: PUSH
27484: LD_INT 34
27486: PUSH
27487: LD_INT 36
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 101
27528: PUSH
27529: LD_INT 102
27531: PUSH
27532: LD_INT 103
27534: PUSH
27535: LD_INT 104
27537: PUSH
27538: LD_INT 105
27540: PUSH
27541: LD_INT 106
27543: PUSH
27544: LD_INT 107
27546: PUSH
27547: LD_INT 108
27549: PUSH
27550: LD_INT 109
27552: PUSH
27553: LD_INT 110
27555: PUSH
27556: LD_INT 111
27558: PUSH
27559: LD_INT 112
27561: PUSH
27562: LD_INT 113
27564: PUSH
27565: LD_INT 114
27567: PUSH
27568: LD_INT 116
27570: PUSH
27571: LD_INT 117
27573: PUSH
27574: LD_INT 118
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: ST_TO_ADDR
27600: GO 29055
27602: LD_INT 13
27604: DOUBLE
27605: EQUAL
27606: IFTRUE 27610
27608: GO 27818
27610: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
27611: LD_ADDR_VAR 0 1
27615: PUSH
27616: LD_INT 1
27618: PUSH
27619: LD_INT 2
27621: PUSH
27622: LD_INT 3
27624: PUSH
27625: LD_INT 4
27627: PUSH
27628: LD_INT 5
27630: PUSH
27631: LD_INT 8
27633: PUSH
27634: LD_INT 9
27636: PUSH
27637: LD_INT 10
27639: PUSH
27640: LD_INT 11
27642: PUSH
27643: LD_INT 12
27645: PUSH
27646: LD_INT 14
27648: PUSH
27649: LD_INT 15
27651: PUSH
27652: LD_INT 16
27654: PUSH
27655: LD_INT 17
27657: PUSH
27658: LD_INT 18
27660: PUSH
27661: LD_INT 19
27663: PUSH
27664: LD_INT 20
27666: PUSH
27667: LD_INT 21
27669: PUSH
27670: LD_INT 22
27672: PUSH
27673: LD_INT 23
27675: PUSH
27676: LD_INT 24
27678: PUSH
27679: LD_INT 25
27681: PUSH
27682: LD_INT 26
27684: PUSH
27685: LD_INT 27
27687: PUSH
27688: LD_INT 28
27690: PUSH
27691: LD_INT 30
27693: PUSH
27694: LD_INT 31
27696: PUSH
27697: LD_INT 32
27699: PUSH
27700: LD_INT 33
27702: PUSH
27703: LD_INT 34
27705: PUSH
27706: LD_INT 36
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 101
27744: PUSH
27745: LD_INT 102
27747: PUSH
27748: LD_INT 103
27750: PUSH
27751: LD_INT 104
27753: PUSH
27754: LD_INT 105
27756: PUSH
27757: LD_INT 106
27759: PUSH
27760: LD_INT 107
27762: PUSH
27763: LD_INT 108
27765: PUSH
27766: LD_INT 109
27768: PUSH
27769: LD_INT 110
27771: PUSH
27772: LD_INT 111
27774: PUSH
27775: LD_INT 112
27777: PUSH
27778: LD_INT 113
27780: PUSH
27781: LD_INT 114
27783: PUSH
27784: LD_INT 116
27786: PUSH
27787: LD_INT 117
27789: PUSH
27790: LD_INT 118
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: ST_TO_ADDR
27816: GO 29055
27818: LD_INT 14
27820: DOUBLE
27821: EQUAL
27822: IFTRUE 27826
27824: GO 28050
27826: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
27827: LD_ADDR_VAR 0 1
27831: PUSH
27832: LD_INT 1
27834: PUSH
27835: LD_INT 2
27837: PUSH
27838: LD_INT 3
27840: PUSH
27841: LD_INT 4
27843: PUSH
27844: LD_INT 5
27846: PUSH
27847: LD_INT 6
27849: PUSH
27850: LD_INT 7
27852: PUSH
27853: LD_INT 8
27855: PUSH
27856: LD_INT 9
27858: PUSH
27859: LD_INT 10
27861: PUSH
27862: LD_INT 11
27864: PUSH
27865: LD_INT 12
27867: PUSH
27868: LD_INT 13
27870: PUSH
27871: LD_INT 14
27873: PUSH
27874: LD_INT 15
27876: PUSH
27877: LD_INT 16
27879: PUSH
27880: LD_INT 17
27882: PUSH
27883: LD_INT 18
27885: PUSH
27886: LD_INT 19
27888: PUSH
27889: LD_INT 20
27891: PUSH
27892: LD_INT 21
27894: PUSH
27895: LD_INT 22
27897: PUSH
27898: LD_INT 23
27900: PUSH
27901: LD_INT 24
27903: PUSH
27904: LD_INT 25
27906: PUSH
27907: LD_INT 26
27909: PUSH
27910: LD_INT 27
27912: PUSH
27913: LD_INT 28
27915: PUSH
27916: LD_INT 29
27918: PUSH
27919: LD_INT 30
27921: PUSH
27922: LD_INT 31
27924: PUSH
27925: LD_INT 32
27927: PUSH
27928: LD_INT 33
27930: PUSH
27931: LD_INT 34
27933: PUSH
27934: LD_INT 36
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 101
27976: PUSH
27977: LD_INT 102
27979: PUSH
27980: LD_INT 103
27982: PUSH
27983: LD_INT 104
27985: PUSH
27986: LD_INT 105
27988: PUSH
27989: LD_INT 106
27991: PUSH
27992: LD_INT 107
27994: PUSH
27995: LD_INT 108
27997: PUSH
27998: LD_INT 109
28000: PUSH
28001: LD_INT 110
28003: PUSH
28004: LD_INT 111
28006: PUSH
28007: LD_INT 112
28009: PUSH
28010: LD_INT 113
28012: PUSH
28013: LD_INT 114
28015: PUSH
28016: LD_INT 116
28018: PUSH
28019: LD_INT 117
28021: PUSH
28022: LD_INT 118
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: ST_TO_ADDR
28048: GO 29055
28050: LD_INT 15
28052: DOUBLE
28053: EQUAL
28054: IFTRUE 28058
28056: GO 28282
28058: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
28059: LD_ADDR_VAR 0 1
28063: PUSH
28064: LD_INT 1
28066: PUSH
28067: LD_INT 2
28069: PUSH
28070: LD_INT 3
28072: PUSH
28073: LD_INT 4
28075: PUSH
28076: LD_INT 5
28078: PUSH
28079: LD_INT 6
28081: PUSH
28082: LD_INT 7
28084: PUSH
28085: LD_INT 8
28087: PUSH
28088: LD_INT 9
28090: PUSH
28091: LD_INT 10
28093: PUSH
28094: LD_INT 11
28096: PUSH
28097: LD_INT 12
28099: PUSH
28100: LD_INT 13
28102: PUSH
28103: LD_INT 14
28105: PUSH
28106: LD_INT 15
28108: PUSH
28109: LD_INT 16
28111: PUSH
28112: LD_INT 17
28114: PUSH
28115: LD_INT 18
28117: PUSH
28118: LD_INT 19
28120: PUSH
28121: LD_INT 20
28123: PUSH
28124: LD_INT 21
28126: PUSH
28127: LD_INT 22
28129: PUSH
28130: LD_INT 23
28132: PUSH
28133: LD_INT 24
28135: PUSH
28136: LD_INT 25
28138: PUSH
28139: LD_INT 26
28141: PUSH
28142: LD_INT 27
28144: PUSH
28145: LD_INT 28
28147: PUSH
28148: LD_INT 29
28150: PUSH
28151: LD_INT 30
28153: PUSH
28154: LD_INT 31
28156: PUSH
28157: LD_INT 32
28159: PUSH
28160: LD_INT 33
28162: PUSH
28163: LD_INT 34
28165: PUSH
28166: LD_INT 36
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 101
28208: PUSH
28209: LD_INT 102
28211: PUSH
28212: LD_INT 103
28214: PUSH
28215: LD_INT 104
28217: PUSH
28218: LD_INT 105
28220: PUSH
28221: LD_INT 106
28223: PUSH
28224: LD_INT 107
28226: PUSH
28227: LD_INT 108
28229: PUSH
28230: LD_INT 109
28232: PUSH
28233: LD_INT 110
28235: PUSH
28236: LD_INT 111
28238: PUSH
28239: LD_INT 112
28241: PUSH
28242: LD_INT 113
28244: PUSH
28245: LD_INT 114
28247: PUSH
28248: LD_INT 116
28250: PUSH
28251: LD_INT 117
28253: PUSH
28254: LD_INT 118
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: ST_TO_ADDR
28280: GO 29055
28282: LD_INT 16
28284: DOUBLE
28285: EQUAL
28286: IFTRUE 28290
28288: GO 28426
28290: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
28291: LD_ADDR_VAR 0 1
28295: PUSH
28296: LD_INT 2
28298: PUSH
28299: LD_INT 4
28301: PUSH
28302: LD_INT 5
28304: PUSH
28305: LD_INT 7
28307: PUSH
28308: LD_INT 11
28310: PUSH
28311: LD_INT 12
28313: PUSH
28314: LD_INT 15
28316: PUSH
28317: LD_INT 16
28319: PUSH
28320: LD_INT 20
28322: PUSH
28323: LD_INT 21
28325: PUSH
28326: LD_INT 22
28328: PUSH
28329: LD_INT 23
28331: PUSH
28332: LD_INT 25
28334: PUSH
28335: LD_INT 26
28337: PUSH
28338: LD_INT 30
28340: PUSH
28341: LD_INT 31
28343: PUSH
28344: LD_INT 32
28346: PUSH
28347: LD_INT 33
28349: PUSH
28350: LD_INT 34
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 101
28376: PUSH
28377: LD_INT 102
28379: PUSH
28380: LD_INT 103
28382: PUSH
28383: LD_INT 106
28385: PUSH
28386: LD_INT 108
28388: PUSH
28389: LD_INT 112
28391: PUSH
28392: LD_INT 113
28394: PUSH
28395: LD_INT 114
28397: PUSH
28398: LD_INT 116
28400: PUSH
28401: LD_INT 117
28403: PUSH
28404: LD_INT 118
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: ST_TO_ADDR
28424: GO 29055
28426: LD_INT 17
28428: DOUBLE
28429: EQUAL
28430: IFTRUE 28434
28432: GO 28658
28434: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
28435: LD_ADDR_VAR 0 1
28439: PUSH
28440: LD_INT 1
28442: PUSH
28443: LD_INT 2
28445: PUSH
28446: LD_INT 3
28448: PUSH
28449: LD_INT 4
28451: PUSH
28452: LD_INT 5
28454: PUSH
28455: LD_INT 6
28457: PUSH
28458: LD_INT 7
28460: PUSH
28461: LD_INT 8
28463: PUSH
28464: LD_INT 9
28466: PUSH
28467: LD_INT 10
28469: PUSH
28470: LD_INT 11
28472: PUSH
28473: LD_INT 12
28475: PUSH
28476: LD_INT 13
28478: PUSH
28479: LD_INT 14
28481: PUSH
28482: LD_INT 15
28484: PUSH
28485: LD_INT 16
28487: PUSH
28488: LD_INT 17
28490: PUSH
28491: LD_INT 18
28493: PUSH
28494: LD_INT 19
28496: PUSH
28497: LD_INT 20
28499: PUSH
28500: LD_INT 21
28502: PUSH
28503: LD_INT 22
28505: PUSH
28506: LD_INT 23
28508: PUSH
28509: LD_INT 24
28511: PUSH
28512: LD_INT 25
28514: PUSH
28515: LD_INT 26
28517: PUSH
28518: LD_INT 27
28520: PUSH
28521: LD_INT 28
28523: PUSH
28524: LD_INT 29
28526: PUSH
28527: LD_INT 30
28529: PUSH
28530: LD_INT 31
28532: PUSH
28533: LD_INT 32
28535: PUSH
28536: LD_INT 33
28538: PUSH
28539: LD_INT 34
28541: PUSH
28542: LD_INT 36
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 101
28584: PUSH
28585: LD_INT 102
28587: PUSH
28588: LD_INT 103
28590: PUSH
28591: LD_INT 104
28593: PUSH
28594: LD_INT 105
28596: PUSH
28597: LD_INT 106
28599: PUSH
28600: LD_INT 107
28602: PUSH
28603: LD_INT 108
28605: PUSH
28606: LD_INT 109
28608: PUSH
28609: LD_INT 110
28611: PUSH
28612: LD_INT 111
28614: PUSH
28615: LD_INT 112
28617: PUSH
28618: LD_INT 113
28620: PUSH
28621: LD_INT 114
28623: PUSH
28624: LD_INT 116
28626: PUSH
28627: LD_INT 117
28629: PUSH
28630: LD_INT 118
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: ST_TO_ADDR
28656: GO 29055
28658: LD_INT 18
28660: DOUBLE
28661: EQUAL
28662: IFTRUE 28666
28664: GO 28814
28666: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
28667: LD_ADDR_VAR 0 1
28671: PUSH
28672: LD_INT 2
28674: PUSH
28675: LD_INT 4
28677: PUSH
28678: LD_INT 5
28680: PUSH
28681: LD_INT 7
28683: PUSH
28684: LD_INT 11
28686: PUSH
28687: LD_INT 12
28689: PUSH
28690: LD_INT 15
28692: PUSH
28693: LD_INT 16
28695: PUSH
28696: LD_INT 20
28698: PUSH
28699: LD_INT 21
28701: PUSH
28702: LD_INT 22
28704: PUSH
28705: LD_INT 23
28707: PUSH
28708: LD_INT 25
28710: PUSH
28711: LD_INT 26
28713: PUSH
28714: LD_INT 30
28716: PUSH
28717: LD_INT 31
28719: PUSH
28720: LD_INT 32
28722: PUSH
28723: LD_INT 33
28725: PUSH
28726: LD_INT 34
28728: PUSH
28729: LD_INT 35
28731: PUSH
28732: LD_INT 36
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 101
28760: PUSH
28761: LD_INT 102
28763: PUSH
28764: LD_INT 103
28766: PUSH
28767: LD_INT 106
28769: PUSH
28770: LD_INT 108
28772: PUSH
28773: LD_INT 112
28775: PUSH
28776: LD_INT 113
28778: PUSH
28779: LD_INT 114
28781: PUSH
28782: LD_INT 115
28784: PUSH
28785: LD_INT 116
28787: PUSH
28788: LD_INT 117
28790: PUSH
28791: LD_INT 118
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: ST_TO_ADDR
28812: GO 29055
28814: LD_INT 19
28816: DOUBLE
28817: EQUAL
28818: IFTRUE 28822
28820: GO 29054
28822: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
28823: LD_ADDR_VAR 0 1
28827: PUSH
28828: LD_INT 1
28830: PUSH
28831: LD_INT 2
28833: PUSH
28834: LD_INT 3
28836: PUSH
28837: LD_INT 4
28839: PUSH
28840: LD_INT 5
28842: PUSH
28843: LD_INT 6
28845: PUSH
28846: LD_INT 7
28848: PUSH
28849: LD_INT 8
28851: PUSH
28852: LD_INT 9
28854: PUSH
28855: LD_INT 10
28857: PUSH
28858: LD_INT 11
28860: PUSH
28861: LD_INT 12
28863: PUSH
28864: LD_INT 13
28866: PUSH
28867: LD_INT 14
28869: PUSH
28870: LD_INT 15
28872: PUSH
28873: LD_INT 16
28875: PUSH
28876: LD_INT 17
28878: PUSH
28879: LD_INT 18
28881: PUSH
28882: LD_INT 19
28884: PUSH
28885: LD_INT 20
28887: PUSH
28888: LD_INT 21
28890: PUSH
28891: LD_INT 22
28893: PUSH
28894: LD_INT 23
28896: PUSH
28897: LD_INT 24
28899: PUSH
28900: LD_INT 25
28902: PUSH
28903: LD_INT 26
28905: PUSH
28906: LD_INT 27
28908: PUSH
28909: LD_INT 28
28911: PUSH
28912: LD_INT 29
28914: PUSH
28915: LD_INT 30
28917: PUSH
28918: LD_INT 31
28920: PUSH
28921: LD_INT 32
28923: PUSH
28924: LD_INT 33
28926: PUSH
28927: LD_INT 34
28929: PUSH
28930: LD_INT 35
28932: PUSH
28933: LD_INT 36
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 101
28976: PUSH
28977: LD_INT 102
28979: PUSH
28980: LD_INT 103
28982: PUSH
28983: LD_INT 104
28985: PUSH
28986: LD_INT 105
28988: PUSH
28989: LD_INT 106
28991: PUSH
28992: LD_INT 107
28994: PUSH
28995: LD_INT 108
28997: PUSH
28998: LD_INT 109
29000: PUSH
29001: LD_INT 110
29003: PUSH
29004: LD_INT 111
29006: PUSH
29007: LD_INT 112
29009: PUSH
29010: LD_INT 113
29012: PUSH
29013: LD_INT 114
29015: PUSH
29016: LD_INT 115
29018: PUSH
29019: LD_INT 116
29021: PUSH
29022: LD_INT 117
29024: PUSH
29025: LD_INT 118
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: ST_TO_ADDR
29052: GO 29055
29054: POP
// end else
29055: GO 29286
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
29057: LD_ADDR_VAR 0 1
29061: PUSH
29062: LD_INT 1
29064: PUSH
29065: LD_INT 2
29067: PUSH
29068: LD_INT 3
29070: PUSH
29071: LD_INT 4
29073: PUSH
29074: LD_INT 5
29076: PUSH
29077: LD_INT 6
29079: PUSH
29080: LD_INT 7
29082: PUSH
29083: LD_INT 8
29085: PUSH
29086: LD_INT 9
29088: PUSH
29089: LD_INT 10
29091: PUSH
29092: LD_INT 11
29094: PUSH
29095: LD_INT 12
29097: PUSH
29098: LD_INT 13
29100: PUSH
29101: LD_INT 14
29103: PUSH
29104: LD_INT 15
29106: PUSH
29107: LD_INT 16
29109: PUSH
29110: LD_INT 17
29112: PUSH
29113: LD_INT 18
29115: PUSH
29116: LD_INT 19
29118: PUSH
29119: LD_INT 20
29121: PUSH
29122: LD_INT 21
29124: PUSH
29125: LD_INT 22
29127: PUSH
29128: LD_INT 23
29130: PUSH
29131: LD_INT 24
29133: PUSH
29134: LD_INT 25
29136: PUSH
29137: LD_INT 26
29139: PUSH
29140: LD_INT 27
29142: PUSH
29143: LD_INT 28
29145: PUSH
29146: LD_INT 29
29148: PUSH
29149: LD_INT 30
29151: PUSH
29152: LD_INT 31
29154: PUSH
29155: LD_INT 32
29157: PUSH
29158: LD_INT 33
29160: PUSH
29161: LD_INT 34
29163: PUSH
29164: LD_INT 35
29166: PUSH
29167: LD_INT 36
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 101
29210: PUSH
29211: LD_INT 102
29213: PUSH
29214: LD_INT 103
29216: PUSH
29217: LD_INT 104
29219: PUSH
29220: LD_INT 105
29222: PUSH
29223: LD_INT 106
29225: PUSH
29226: LD_INT 107
29228: PUSH
29229: LD_INT 108
29231: PUSH
29232: LD_INT 109
29234: PUSH
29235: LD_INT 110
29237: PUSH
29238: LD_INT 111
29240: PUSH
29241: LD_INT 112
29243: PUSH
29244: LD_INT 113
29246: PUSH
29247: LD_INT 114
29249: PUSH
29250: LD_INT 115
29252: PUSH
29253: LD_INT 116
29255: PUSH
29256: LD_INT 117
29258: PUSH
29259: LD_INT 118
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: ST_TO_ADDR
// if result then
29286: LD_VAR 0 1
29290: IFFALSE 29579
// begin normal :=  ;
29292: LD_ADDR_VAR 0 3
29296: PUSH
29297: LD_STRING 
29299: ST_TO_ADDR
// hardcore :=  ;
29300: LD_ADDR_VAR 0 4
29304: PUSH
29305: LD_STRING 
29307: ST_TO_ADDR
// for i = 1 to normalCounter do
29308: LD_ADDR_VAR 0 5
29312: PUSH
29313: DOUBLE
29314: LD_INT 1
29316: DEC
29317: ST_TO_ADDR
29318: LD_EXP 85
29322: PUSH
29323: FOR_TO
29324: IFFALSE 29425
// begin tmp := 0 ;
29326: LD_ADDR_VAR 0 2
29330: PUSH
29331: LD_STRING 0
29333: ST_TO_ADDR
// if result [ 1 ] then
29334: LD_VAR 0 1
29338: PUSH
29339: LD_INT 1
29341: ARRAY
29342: IFFALSE 29407
// if result [ 1 ] [ 1 ] = i then
29344: LD_VAR 0 1
29348: PUSH
29349: LD_INT 1
29351: ARRAY
29352: PUSH
29353: LD_INT 1
29355: ARRAY
29356: PUSH
29357: LD_VAR 0 5
29361: EQUAL
29362: IFFALSE 29407
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
29364: LD_ADDR_VAR 0 1
29368: PUSH
29369: LD_VAR 0 1
29373: PPUSH
29374: LD_INT 1
29376: PPUSH
29377: LD_VAR 0 1
29381: PUSH
29382: LD_INT 1
29384: ARRAY
29385: PPUSH
29386: LD_INT 1
29388: PPUSH
29389: CALL_OW 3
29393: PPUSH
29394: CALL_OW 1
29398: ST_TO_ADDR
// tmp := 1 ;
29399: LD_ADDR_VAR 0 2
29403: PUSH
29404: LD_STRING 1
29406: ST_TO_ADDR
// end ; normal := normal & tmp ;
29407: LD_ADDR_VAR 0 3
29411: PUSH
29412: LD_VAR 0 3
29416: PUSH
29417: LD_VAR 0 2
29421: STR
29422: ST_TO_ADDR
// end ;
29423: GO 29323
29425: POP
29426: POP
// for i = 1 to hardcoreCounter do
29427: LD_ADDR_VAR 0 5
29431: PUSH
29432: DOUBLE
29433: LD_INT 1
29435: DEC
29436: ST_TO_ADDR
29437: LD_EXP 86
29441: PUSH
29442: FOR_TO
29443: IFFALSE 29548
// begin tmp := 0 ;
29445: LD_ADDR_VAR 0 2
29449: PUSH
29450: LD_STRING 0
29452: ST_TO_ADDR
// if result [ 2 ] then
29453: LD_VAR 0 1
29457: PUSH
29458: LD_INT 2
29460: ARRAY
29461: IFFALSE 29530
// if result [ 2 ] [ 1 ] = 100 + i then
29463: LD_VAR 0 1
29467: PUSH
29468: LD_INT 2
29470: ARRAY
29471: PUSH
29472: LD_INT 1
29474: ARRAY
29475: PUSH
29476: LD_INT 100
29478: PUSH
29479: LD_VAR 0 5
29483: PLUS
29484: EQUAL
29485: IFFALSE 29530
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
29487: LD_ADDR_VAR 0 1
29491: PUSH
29492: LD_VAR 0 1
29496: PPUSH
29497: LD_INT 2
29499: PPUSH
29500: LD_VAR 0 1
29504: PUSH
29505: LD_INT 2
29507: ARRAY
29508: PPUSH
29509: LD_INT 1
29511: PPUSH
29512: CALL_OW 3
29516: PPUSH
29517: CALL_OW 1
29521: ST_TO_ADDR
// tmp := 1 ;
29522: LD_ADDR_VAR 0 2
29526: PUSH
29527: LD_STRING 1
29529: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
29530: LD_ADDR_VAR 0 4
29534: PUSH
29535: LD_VAR 0 4
29539: PUSH
29540: LD_VAR 0 2
29544: STR
29545: ST_TO_ADDR
// end ;
29546: GO 29442
29548: POP
29549: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
29550: LD_STRING getStreamItemsFromMission("
29552: PUSH
29553: LD_VAR 0 3
29557: STR
29558: PUSH
29559: LD_STRING ","
29561: STR
29562: PUSH
29563: LD_VAR 0 4
29567: STR
29568: PUSH
29569: LD_STRING ")
29571: STR
29572: PPUSH
29573: CALL_OW 559
// end else
29577: GO 29586
// ToLua ( getStreamItemsFromMission("","") ) ;
29579: LD_STRING getStreamItemsFromMission("","")
29581: PPUSH
29582: CALL_OW 559
// end ;
29586: LD_VAR 0 1
29590: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
29591: LD_EXP 84
29595: PUSH
29596: LD_EXP 89
29600: AND
29601: IFFALSE 29725
29603: GO 29605
29605: DISABLE
29606: LD_INT 0
29608: PPUSH
29609: PPUSH
// begin enable ;
29610: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
29611: LD_ADDR_VAR 0 2
29615: PUSH
29616: LD_INT 22
29618: PUSH
29619: LD_OWVAR 2
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 2
29630: PUSH
29631: LD_INT 34
29633: PUSH
29634: LD_INT 7
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 34
29643: PUSH
29644: LD_INT 45
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 34
29653: PUSH
29654: LD_INT 28
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 34
29663: PUSH
29664: LD_INT 47
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PPUSH
29682: CALL_OW 69
29686: ST_TO_ADDR
// if not tmp then
29687: LD_VAR 0 2
29691: NOT
29692: IFFALSE 29696
// exit ;
29694: GO 29725
// for i in tmp do
29696: LD_ADDR_VAR 0 1
29700: PUSH
29701: LD_VAR 0 2
29705: PUSH
29706: FOR_IN
29707: IFFALSE 29723
// begin SetLives ( i , 0 ) ;
29709: LD_VAR 0 1
29713: PPUSH
29714: LD_INT 0
29716: PPUSH
29717: CALL_OW 234
// end ;
29721: GO 29706
29723: POP
29724: POP
// end ;
29725: PPOPN 2
29727: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
29728: LD_EXP 84
29732: PUSH
29733: LD_EXP 90
29737: AND
29738: IFFALSE 29822
29740: GO 29742
29742: DISABLE
29743: LD_INT 0
29745: PPUSH
29746: PPUSH
// begin enable ;
29747: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
29748: LD_ADDR_VAR 0 2
29752: PUSH
29753: LD_INT 22
29755: PUSH
29756: LD_OWVAR 2
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 32
29767: PUSH
29768: LD_INT 3
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PPUSH
29779: CALL_OW 69
29783: ST_TO_ADDR
// if not tmp then
29784: LD_VAR 0 2
29788: NOT
29789: IFFALSE 29793
// exit ;
29791: GO 29822
// for i in tmp do
29793: LD_ADDR_VAR 0 1
29797: PUSH
29798: LD_VAR 0 2
29802: PUSH
29803: FOR_IN
29804: IFFALSE 29820
// begin SetLives ( i , 0 ) ;
29806: LD_VAR 0 1
29810: PPUSH
29811: LD_INT 0
29813: PPUSH
29814: CALL_OW 234
// end ;
29818: GO 29803
29820: POP
29821: POP
// end ;
29822: PPOPN 2
29824: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
29825: LD_EXP 84
29829: PUSH
29830: LD_EXP 87
29834: AND
29835: IFFALSE 29928
29837: GO 29839
29839: DISABLE
29840: LD_INT 0
29842: PPUSH
// begin enable ;
29843: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
29844: LD_ADDR_VAR 0 1
29848: PUSH
29849: LD_INT 22
29851: PUSH
29852: LD_OWVAR 2
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: LD_INT 2
29863: PUSH
29864: LD_INT 25
29866: PUSH
29867: LD_INT 5
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 25
29876: PUSH
29877: LD_INT 9
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 25
29886: PUSH
29887: LD_INT 8
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PPUSH
29904: CALL_OW 69
29908: PUSH
29909: FOR_IN
29910: IFFALSE 29926
// begin SetClass ( i , 1 ) ;
29912: LD_VAR 0 1
29916: PPUSH
29917: LD_INT 1
29919: PPUSH
29920: CALL_OW 336
// end ;
29924: GO 29909
29926: POP
29927: POP
// end ;
29928: PPOPN 1
29930: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
29931: LD_EXP 84
29935: PUSH
29936: LD_EXP 88
29940: AND
29941: PUSH
29942: LD_OWVAR 65
29946: PUSH
29947: LD_INT 7
29949: LESS
29950: AND
29951: IFFALSE 29965
29953: GO 29955
29955: DISABLE
// begin enable ;
29956: ENABLE
// game_speed := 7 ;
29957: LD_ADDR_OWVAR 65
29961: PUSH
29962: LD_INT 7
29964: ST_TO_ADDR
// end ;
29965: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
29966: LD_EXP 84
29970: PUSH
29971: LD_EXP 91
29975: AND
29976: IFFALSE 30178
29978: GO 29980
29980: DISABLE
29981: LD_INT 0
29983: PPUSH
29984: PPUSH
29985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29986: LD_ADDR_VAR 0 3
29990: PUSH
29991: LD_INT 81
29993: PUSH
29994: LD_OWVAR 2
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 21
30005: PUSH
30006: LD_INT 1
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PPUSH
30017: CALL_OW 69
30021: ST_TO_ADDR
// if not tmp then
30022: LD_VAR 0 3
30026: NOT
30027: IFFALSE 30031
// exit ;
30029: GO 30178
// if tmp > 5 then
30031: LD_VAR 0 3
30035: PUSH
30036: LD_INT 5
30038: GREATER
30039: IFFALSE 30051
// k := 5 else
30041: LD_ADDR_VAR 0 2
30045: PUSH
30046: LD_INT 5
30048: ST_TO_ADDR
30049: GO 30061
// k := tmp ;
30051: LD_ADDR_VAR 0 2
30055: PUSH
30056: LD_VAR 0 3
30060: ST_TO_ADDR
// for i := 1 to k do
30061: LD_ADDR_VAR 0 1
30065: PUSH
30066: DOUBLE
30067: LD_INT 1
30069: DEC
30070: ST_TO_ADDR
30071: LD_VAR 0 2
30075: PUSH
30076: FOR_TO
30077: IFFALSE 30176
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
30079: LD_VAR 0 3
30083: PUSH
30084: LD_VAR 0 1
30088: ARRAY
30089: PPUSH
30090: LD_VAR 0 1
30094: PUSH
30095: LD_INT 4
30097: MOD
30098: PUSH
30099: LD_INT 1
30101: PLUS
30102: PPUSH
30103: CALL_OW 259
30107: PUSH
30108: LD_INT 10
30110: LESS
30111: IFFALSE 30174
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
30113: LD_VAR 0 3
30117: PUSH
30118: LD_VAR 0 1
30122: ARRAY
30123: PPUSH
30124: LD_VAR 0 1
30128: PUSH
30129: LD_INT 4
30131: MOD
30132: PUSH
30133: LD_INT 1
30135: PLUS
30136: PPUSH
30137: LD_VAR 0 3
30141: PUSH
30142: LD_VAR 0 1
30146: ARRAY
30147: PPUSH
30148: LD_VAR 0 1
30152: PUSH
30153: LD_INT 4
30155: MOD
30156: PUSH
30157: LD_INT 1
30159: PLUS
30160: PPUSH
30161: CALL_OW 259
30165: PUSH
30166: LD_INT 1
30168: PLUS
30169: PPUSH
30170: CALL_OW 237
30174: GO 30076
30176: POP
30177: POP
// end ;
30178: PPOPN 3
30180: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
30181: LD_EXP 84
30185: PUSH
30186: LD_EXP 92
30190: AND
30191: IFFALSE 30211
30193: GO 30195
30195: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
30196: LD_INT 4
30198: PPUSH
30199: LD_OWVAR 2
30203: PPUSH
30204: LD_INT 0
30206: PPUSH
30207: CALL_OW 324
30211: END
// every 0 0$1 trigger StreamModeActive and sShovel do
30212: LD_EXP 84
30216: PUSH
30217: LD_EXP 121
30221: AND
30222: IFFALSE 30242
30224: GO 30226
30226: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
30227: LD_INT 19
30229: PPUSH
30230: LD_OWVAR 2
30234: PPUSH
30235: LD_INT 0
30237: PPUSH
30238: CALL_OW 324
30242: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
30243: LD_EXP 84
30247: PUSH
30248: LD_EXP 93
30252: AND
30253: IFFALSE 30355
30255: GO 30257
30257: DISABLE
30258: LD_INT 0
30260: PPUSH
30261: PPUSH
// begin enable ;
30262: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
30263: LD_ADDR_VAR 0 2
30267: PUSH
30268: LD_INT 22
30270: PUSH
30271: LD_OWVAR 2
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 2
30282: PUSH
30283: LD_INT 34
30285: PUSH
30286: LD_INT 11
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 34
30295: PUSH
30296: LD_INT 30
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: LIST
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PPUSH
30312: CALL_OW 69
30316: ST_TO_ADDR
// if not tmp then
30317: LD_VAR 0 2
30321: NOT
30322: IFFALSE 30326
// exit ;
30324: GO 30355
// for i in tmp do
30326: LD_ADDR_VAR 0 1
30330: PUSH
30331: LD_VAR 0 2
30335: PUSH
30336: FOR_IN
30337: IFFALSE 30353
// begin SetLives ( i , 0 ) ;
30339: LD_VAR 0 1
30343: PPUSH
30344: LD_INT 0
30346: PPUSH
30347: CALL_OW 234
// end ;
30351: GO 30336
30353: POP
30354: POP
// end ;
30355: PPOPN 2
30357: END
// every 0 0$1 trigger StreamModeActive and sBunker do
30358: LD_EXP 84
30362: PUSH
30363: LD_EXP 94
30367: AND
30368: IFFALSE 30388
30370: GO 30372
30372: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
30373: LD_INT 32
30375: PPUSH
30376: LD_OWVAR 2
30380: PPUSH
30381: LD_INT 0
30383: PPUSH
30384: CALL_OW 324
30388: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
30389: LD_EXP 84
30393: PUSH
30394: LD_EXP 95
30398: AND
30399: IFFALSE 30580
30401: GO 30403
30403: DISABLE
30404: LD_INT 0
30406: PPUSH
30407: PPUSH
30408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
30409: LD_ADDR_VAR 0 2
30413: PUSH
30414: LD_INT 22
30416: PUSH
30417: LD_OWVAR 2
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 33
30428: PUSH
30429: LD_INT 3
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PPUSH
30440: CALL_OW 69
30444: ST_TO_ADDR
// if not tmp then
30445: LD_VAR 0 2
30449: NOT
30450: IFFALSE 30454
// exit ;
30452: GO 30580
// side := 0 ;
30454: LD_ADDR_VAR 0 3
30458: PUSH
30459: LD_INT 0
30461: ST_TO_ADDR
// for i := 1 to 8 do
30462: LD_ADDR_VAR 0 1
30466: PUSH
30467: DOUBLE
30468: LD_INT 1
30470: DEC
30471: ST_TO_ADDR
30472: LD_INT 8
30474: PUSH
30475: FOR_TO
30476: IFFALSE 30524
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
30478: LD_OWVAR 2
30482: PUSH
30483: LD_VAR 0 1
30487: NONEQUAL
30488: PUSH
30489: LD_OWVAR 2
30493: PPUSH
30494: LD_VAR 0 1
30498: PPUSH
30499: CALL_OW 81
30503: PUSH
30504: LD_INT 2
30506: EQUAL
30507: AND
30508: IFFALSE 30522
// begin side := i ;
30510: LD_ADDR_VAR 0 3
30514: PUSH
30515: LD_VAR 0 1
30519: ST_TO_ADDR
// break ;
30520: GO 30524
// end ;
30522: GO 30475
30524: POP
30525: POP
// if not side then
30526: LD_VAR 0 3
30530: NOT
30531: IFFALSE 30535
// exit ;
30533: GO 30580
// for i := 1 to tmp do
30535: LD_ADDR_VAR 0 1
30539: PUSH
30540: DOUBLE
30541: LD_INT 1
30543: DEC
30544: ST_TO_ADDR
30545: LD_VAR 0 2
30549: PUSH
30550: FOR_TO
30551: IFFALSE 30578
// if Prob ( 60 ) then
30553: LD_INT 60
30555: PPUSH
30556: CALL_OW 13
30560: IFFALSE 30576
// SetSide ( i , side ) ;
30562: LD_VAR 0 1
30566: PPUSH
30567: LD_VAR 0 3
30571: PPUSH
30572: CALL_OW 235
30576: GO 30550
30578: POP
30579: POP
// end ;
30580: PPOPN 3
30582: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
30583: LD_EXP 84
30587: PUSH
30588: LD_EXP 97
30592: AND
30593: IFFALSE 30712
30595: GO 30597
30597: DISABLE
30598: LD_INT 0
30600: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
30601: LD_ADDR_VAR 0 1
30605: PUSH
30606: LD_INT 22
30608: PUSH
30609: LD_OWVAR 2
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 21
30620: PUSH
30621: LD_INT 1
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 3
30630: PUSH
30631: LD_INT 23
30633: PUSH
30634: LD_INT 0
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: LIST
30649: PPUSH
30650: CALL_OW 69
30654: PUSH
30655: FOR_IN
30656: IFFALSE 30710
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
30658: LD_VAR 0 1
30662: PPUSH
30663: CALL_OW 257
30667: PUSH
30668: LD_INT 1
30670: PUSH
30671: LD_INT 2
30673: PUSH
30674: LD_INT 3
30676: PUSH
30677: LD_INT 4
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: IN
30686: IFFALSE 30708
// SetClass ( un , rand ( 1 , 4 ) ) ;
30688: LD_VAR 0 1
30692: PPUSH
30693: LD_INT 1
30695: PPUSH
30696: LD_INT 4
30698: PPUSH
30699: CALL_OW 12
30703: PPUSH
30704: CALL_OW 336
30708: GO 30655
30710: POP
30711: POP
// end ;
30712: PPOPN 1
30714: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
30715: LD_EXP 84
30719: PUSH
30720: LD_EXP 96
30724: AND
30725: IFFALSE 30804
30727: GO 30729
30729: DISABLE
30730: LD_INT 0
30732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
30733: LD_ADDR_VAR 0 1
30737: PUSH
30738: LD_INT 22
30740: PUSH
30741: LD_OWVAR 2
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 21
30752: PUSH
30753: LD_INT 3
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PPUSH
30764: CALL_OW 69
30768: ST_TO_ADDR
// if not tmp then
30769: LD_VAR 0 1
30773: NOT
30774: IFFALSE 30778
// exit ;
30776: GO 30804
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
30778: LD_VAR 0 1
30782: PUSH
30783: LD_INT 1
30785: PPUSH
30786: LD_VAR 0 1
30790: PPUSH
30791: CALL_OW 12
30795: ARRAY
30796: PPUSH
30797: LD_INT 100
30799: PPUSH
30800: CALL_OW 234
// end ;
30804: PPOPN 1
30806: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
30807: LD_EXP 84
30811: PUSH
30812: LD_EXP 98
30816: AND
30817: IFFALSE 30915
30819: GO 30821
30821: DISABLE
30822: LD_INT 0
30824: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30825: LD_ADDR_VAR 0 1
30829: PUSH
30830: LD_INT 22
30832: PUSH
30833: LD_OWVAR 2
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 21
30844: PUSH
30845: LD_INT 1
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PPUSH
30856: CALL_OW 69
30860: ST_TO_ADDR
// if not tmp then
30861: LD_VAR 0 1
30865: NOT
30866: IFFALSE 30870
// exit ;
30868: GO 30915
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
30870: LD_VAR 0 1
30874: PUSH
30875: LD_INT 1
30877: PPUSH
30878: LD_VAR 0 1
30882: PPUSH
30883: CALL_OW 12
30887: ARRAY
30888: PPUSH
30889: LD_INT 1
30891: PPUSH
30892: LD_INT 4
30894: PPUSH
30895: CALL_OW 12
30899: PPUSH
30900: LD_INT 3000
30902: PPUSH
30903: LD_INT 9000
30905: PPUSH
30906: CALL_OW 12
30910: PPUSH
30911: CALL_OW 492
// end ;
30915: PPOPN 1
30917: END
// every 0 0$1 trigger StreamModeActive and sDepot do
30918: LD_EXP 84
30922: PUSH
30923: LD_EXP 99
30927: AND
30928: IFFALSE 30948
30930: GO 30932
30932: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
30933: LD_INT 1
30935: PPUSH
30936: LD_OWVAR 2
30940: PPUSH
30941: LD_INT 0
30943: PPUSH
30944: CALL_OW 324
30948: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
30949: LD_EXP 84
30953: PUSH
30954: LD_EXP 100
30958: AND
30959: IFFALSE 31042
30961: GO 30963
30963: DISABLE
30964: LD_INT 0
30966: PPUSH
30967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
30968: LD_ADDR_VAR 0 2
30972: PUSH
30973: LD_INT 22
30975: PUSH
30976: LD_OWVAR 2
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 21
30987: PUSH
30988: LD_INT 3
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: PPUSH
30999: CALL_OW 69
31003: ST_TO_ADDR
// if not tmp then
31004: LD_VAR 0 2
31008: NOT
31009: IFFALSE 31013
// exit ;
31011: GO 31042
// for i in tmp do
31013: LD_ADDR_VAR 0 1
31017: PUSH
31018: LD_VAR 0 2
31022: PUSH
31023: FOR_IN
31024: IFFALSE 31040
// SetBLevel ( i , 10 ) ;
31026: LD_VAR 0 1
31030: PPUSH
31031: LD_INT 10
31033: PPUSH
31034: CALL_OW 241
31038: GO 31023
31040: POP
31041: POP
// end ;
31042: PPOPN 2
31044: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
31045: LD_EXP 84
31049: PUSH
31050: LD_EXP 101
31054: AND
31055: IFFALSE 31166
31057: GO 31059
31059: DISABLE
31060: LD_INT 0
31062: PPUSH
31063: PPUSH
31064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31065: LD_ADDR_VAR 0 3
31069: PUSH
31070: LD_INT 22
31072: PUSH
31073: LD_OWVAR 2
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 25
31084: PUSH
31085: LD_INT 1
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PPUSH
31096: CALL_OW 69
31100: ST_TO_ADDR
// if not tmp then
31101: LD_VAR 0 3
31105: NOT
31106: IFFALSE 31110
// exit ;
31108: GO 31166
// un := tmp [ rand ( 1 , tmp ) ] ;
31110: LD_ADDR_VAR 0 2
31114: PUSH
31115: LD_VAR 0 3
31119: PUSH
31120: LD_INT 1
31122: PPUSH
31123: LD_VAR 0 3
31127: PPUSH
31128: CALL_OW 12
31132: ARRAY
31133: ST_TO_ADDR
// if Crawls ( un ) then
31134: LD_VAR 0 2
31138: PPUSH
31139: CALL_OW 318
31143: IFFALSE 31154
// ComWalk ( un ) ;
31145: LD_VAR 0 2
31149: PPUSH
31150: CALL_OW 138
// SetClass ( un , class_sniper ) ;
31154: LD_VAR 0 2
31158: PPUSH
31159: LD_INT 5
31161: PPUSH
31162: CALL_OW 336
// end ;
31166: PPOPN 3
31168: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
31169: LD_EXP 84
31173: PUSH
31174: LD_EXP 102
31178: AND
31179: PUSH
31180: LD_OWVAR 67
31184: PUSH
31185: LD_INT 4
31187: LESS
31188: AND
31189: IFFALSE 31208
31191: GO 31193
31193: DISABLE
// begin Difficulty := Difficulty + 1 ;
31194: LD_ADDR_OWVAR 67
31198: PUSH
31199: LD_OWVAR 67
31203: PUSH
31204: LD_INT 1
31206: PLUS
31207: ST_TO_ADDR
// end ;
31208: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
31209: LD_EXP 84
31213: PUSH
31214: LD_EXP 103
31218: AND
31219: IFFALSE 31322
31221: GO 31223
31223: DISABLE
31224: LD_INT 0
31226: PPUSH
// begin for i := 1 to 5 do
31227: LD_ADDR_VAR 0 1
31231: PUSH
31232: DOUBLE
31233: LD_INT 1
31235: DEC
31236: ST_TO_ADDR
31237: LD_INT 5
31239: PUSH
31240: FOR_TO
31241: IFFALSE 31320
// begin uc_nation := nation_nature ;
31243: LD_ADDR_OWVAR 21
31247: PUSH
31248: LD_INT 0
31250: ST_TO_ADDR
// uc_side := 0 ;
31251: LD_ADDR_OWVAR 20
31255: PUSH
31256: LD_INT 0
31258: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
31259: LD_ADDR_OWVAR 29
31263: PUSH
31264: LD_INT 12
31266: PUSH
31267: LD_INT 12
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: ST_TO_ADDR
// hc_agressivity := 20 ;
31274: LD_ADDR_OWVAR 35
31278: PUSH
31279: LD_INT 20
31281: ST_TO_ADDR
// hc_class := class_tiger ;
31282: LD_ADDR_OWVAR 28
31286: PUSH
31287: LD_INT 14
31289: ST_TO_ADDR
// hc_gallery :=  ;
31290: LD_ADDR_OWVAR 33
31294: PUSH
31295: LD_STRING 
31297: ST_TO_ADDR
// hc_name :=  ;
31298: LD_ADDR_OWVAR 26
31302: PUSH
31303: LD_STRING 
31305: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
31306: CALL_OW 44
31310: PPUSH
31311: LD_INT 0
31313: PPUSH
31314: CALL_OW 51
// end ;
31318: GO 31240
31320: POP
31321: POP
// end ;
31322: PPOPN 1
31324: END
// every 0 0$1 trigger StreamModeActive and sBomb do
31325: LD_EXP 84
31329: PUSH
31330: LD_EXP 104
31334: AND
31335: IFFALSE 31344
31337: GO 31339
31339: DISABLE
// StreamSibBomb ;
31340: CALL 31345 0 0
31344: END
// export function StreamSibBomb ; var i , x , y ; begin
31345: LD_INT 0
31347: PPUSH
31348: PPUSH
31349: PPUSH
31350: PPUSH
// result := false ;
31351: LD_ADDR_VAR 0 1
31355: PUSH
31356: LD_INT 0
31358: ST_TO_ADDR
// for i := 1 to 16 do
31359: LD_ADDR_VAR 0 2
31363: PUSH
31364: DOUBLE
31365: LD_INT 1
31367: DEC
31368: ST_TO_ADDR
31369: LD_INT 16
31371: PUSH
31372: FOR_TO
31373: IFFALSE 31572
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31375: LD_ADDR_VAR 0 3
31379: PUSH
31380: LD_INT 10
31382: PUSH
31383: LD_INT 20
31385: PUSH
31386: LD_INT 30
31388: PUSH
31389: LD_INT 40
31391: PUSH
31392: LD_INT 50
31394: PUSH
31395: LD_INT 60
31397: PUSH
31398: LD_INT 70
31400: PUSH
31401: LD_INT 80
31403: PUSH
31404: LD_INT 90
31406: PUSH
31407: LD_INT 100
31409: PUSH
31410: LD_INT 110
31412: PUSH
31413: LD_INT 120
31415: PUSH
31416: LD_INT 130
31418: PUSH
31419: LD_INT 140
31421: PUSH
31422: LD_INT 150
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 1
31444: PPUSH
31445: LD_INT 15
31447: PPUSH
31448: CALL_OW 12
31452: ARRAY
31453: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31454: LD_ADDR_VAR 0 4
31458: PUSH
31459: LD_INT 10
31461: PUSH
31462: LD_INT 20
31464: PUSH
31465: LD_INT 30
31467: PUSH
31468: LD_INT 40
31470: PUSH
31471: LD_INT 50
31473: PUSH
31474: LD_INT 60
31476: PUSH
31477: LD_INT 70
31479: PUSH
31480: LD_INT 80
31482: PUSH
31483: LD_INT 90
31485: PUSH
31486: LD_INT 100
31488: PUSH
31489: LD_INT 110
31491: PUSH
31492: LD_INT 120
31494: PUSH
31495: LD_INT 130
31497: PUSH
31498: LD_INT 140
31500: PUSH
31501: LD_INT 150
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 1
31523: PPUSH
31524: LD_INT 15
31526: PPUSH
31527: CALL_OW 12
31531: ARRAY
31532: ST_TO_ADDR
// if ValidHex ( x , y ) then
31533: LD_VAR 0 3
31537: PPUSH
31538: LD_VAR 0 4
31542: PPUSH
31543: CALL_OW 488
31547: IFFALSE 31570
// begin result := [ x , y ] ;
31549: LD_ADDR_VAR 0 1
31553: PUSH
31554: LD_VAR 0 3
31558: PUSH
31559: LD_VAR 0 4
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: ST_TO_ADDR
// break ;
31568: GO 31572
// end ; end ;
31570: GO 31372
31572: POP
31573: POP
// if result then
31574: LD_VAR 0 1
31578: IFFALSE 31638
// begin ToLua ( playSibBomb() ) ;
31580: LD_STRING playSibBomb()
31582: PPUSH
31583: CALL_OW 559
// wait ( 0 0$14 ) ;
31587: LD_INT 490
31589: PPUSH
31590: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
31594: LD_VAR 0 1
31598: PUSH
31599: LD_INT 1
31601: ARRAY
31602: PPUSH
31603: LD_VAR 0 1
31607: PUSH
31608: LD_INT 2
31610: ARRAY
31611: PPUSH
31612: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
31616: LD_VAR 0 1
31620: PUSH
31621: LD_INT 1
31623: ARRAY
31624: PPUSH
31625: LD_VAR 0 1
31629: PUSH
31630: LD_INT 2
31632: ARRAY
31633: PPUSH
31634: CALL_OW 429
// end ; end ;
31638: LD_VAR 0 1
31642: RET
// every 0 0$1 trigger StreamModeActive and sReset do
31643: LD_EXP 84
31647: PUSH
31648: LD_EXP 106
31652: AND
31653: IFFALSE 31665
31655: GO 31657
31657: DISABLE
// YouLost (  ) ;
31658: LD_STRING 
31660: PPUSH
31661: CALL_OW 104
31665: END
// every 0 0$1 trigger StreamModeActive and sFog do
31666: LD_EXP 84
31670: PUSH
31671: LD_EXP 105
31675: AND
31676: IFFALSE 31690
31678: GO 31680
31680: DISABLE
// FogOff ( your_side ) ;
31681: LD_OWVAR 2
31685: PPUSH
31686: CALL_OW 344
31690: END
// every 0 0$1 trigger StreamModeActive and sSun do
31691: LD_EXP 84
31695: PUSH
31696: LD_EXP 107
31700: AND
31701: IFFALSE 31729
31703: GO 31705
31705: DISABLE
// begin solar_recharge_percent := 0 ;
31706: LD_ADDR_OWVAR 79
31710: PUSH
31711: LD_INT 0
31713: ST_TO_ADDR
// wait ( 5 5$00 ) ;
31714: LD_INT 10500
31716: PPUSH
31717: CALL_OW 67
// solar_recharge_percent := 100 ;
31721: LD_ADDR_OWVAR 79
31725: PUSH
31726: LD_INT 100
31728: ST_TO_ADDR
// end ;
31729: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
31730: LD_EXP 84
31734: PUSH
31735: LD_EXP 108
31739: AND
31740: IFFALSE 31979
31742: GO 31744
31744: DISABLE
31745: LD_INT 0
31747: PPUSH
31748: PPUSH
31749: PPUSH
// begin tmp := [ ] ;
31750: LD_ADDR_VAR 0 3
31754: PUSH
31755: EMPTY
31756: ST_TO_ADDR
// for i := 1 to 6 do
31757: LD_ADDR_VAR 0 1
31761: PUSH
31762: DOUBLE
31763: LD_INT 1
31765: DEC
31766: ST_TO_ADDR
31767: LD_INT 6
31769: PUSH
31770: FOR_TO
31771: IFFALSE 31876
// begin uc_nation := nation_nature ;
31773: LD_ADDR_OWVAR 21
31777: PUSH
31778: LD_INT 0
31780: ST_TO_ADDR
// uc_side := 0 ;
31781: LD_ADDR_OWVAR 20
31785: PUSH
31786: LD_INT 0
31788: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
31789: LD_ADDR_OWVAR 29
31793: PUSH
31794: LD_INT 12
31796: PUSH
31797: LD_INT 12
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: ST_TO_ADDR
// hc_agressivity := 20 ;
31804: LD_ADDR_OWVAR 35
31808: PUSH
31809: LD_INT 20
31811: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
31812: LD_ADDR_OWVAR 28
31816: PUSH
31817: LD_INT 17
31819: ST_TO_ADDR
// hc_gallery :=  ;
31820: LD_ADDR_OWVAR 33
31824: PUSH
31825: LD_STRING 
31827: ST_TO_ADDR
// hc_name :=  ;
31828: LD_ADDR_OWVAR 26
31832: PUSH
31833: LD_STRING 
31835: ST_TO_ADDR
// un := CreateHuman ;
31836: LD_ADDR_VAR 0 2
31840: PUSH
31841: CALL_OW 44
31845: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
31846: LD_VAR 0 2
31850: PPUSH
31851: LD_INT 1
31853: PPUSH
31854: CALL_OW 51
// tmp := tmp ^ un ;
31858: LD_ADDR_VAR 0 3
31862: PUSH
31863: LD_VAR 0 3
31867: PUSH
31868: LD_VAR 0 2
31872: ADD
31873: ST_TO_ADDR
// end ;
31874: GO 31770
31876: POP
31877: POP
// repeat wait ( 0 0$1 ) ;
31878: LD_INT 35
31880: PPUSH
31881: CALL_OW 67
// for un in tmp do
31885: LD_ADDR_VAR 0 2
31889: PUSH
31890: LD_VAR 0 3
31894: PUSH
31895: FOR_IN
31896: IFFALSE 31970
// begin if IsDead ( un ) then
31898: LD_VAR 0 2
31902: PPUSH
31903: CALL_OW 301
31907: IFFALSE 31927
// begin tmp := tmp diff un ;
31909: LD_ADDR_VAR 0 3
31913: PUSH
31914: LD_VAR 0 3
31918: PUSH
31919: LD_VAR 0 2
31923: DIFF
31924: ST_TO_ADDR
// continue ;
31925: GO 31895
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
31927: LD_VAR 0 2
31931: PPUSH
31932: LD_INT 3
31934: PUSH
31935: LD_INT 22
31937: PUSH
31938: LD_INT 0
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PPUSH
31949: CALL_OW 69
31953: PPUSH
31954: LD_VAR 0 2
31958: PPUSH
31959: CALL_OW 74
31963: PPUSH
31964: CALL_OW 115
// end ;
31968: GO 31895
31970: POP
31971: POP
// until not tmp ;
31972: LD_VAR 0 3
31976: NOT
31977: IFFALSE 31878
// end ;
31979: PPOPN 3
31981: END
// every 0 0$1 trigger StreamModeActive and sTroll do
31982: LD_EXP 84
31986: PUSH
31987: LD_EXP 109
31991: AND
31992: IFFALSE 32046
31994: GO 31996
31996: DISABLE
// begin ToLua ( displayTroll(); ) ;
31997: LD_STRING displayTroll();
31999: PPUSH
32000: CALL_OW 559
// wait ( 3 3$00 ) ;
32004: LD_INT 6300
32006: PPUSH
32007: CALL_OW 67
// ToLua ( hideTroll(); ) ;
32011: LD_STRING hideTroll();
32013: PPUSH
32014: CALL_OW 559
// wait ( 1 1$00 ) ;
32018: LD_INT 2100
32020: PPUSH
32021: CALL_OW 67
// ToLua ( displayTroll(); ) ;
32025: LD_STRING displayTroll();
32027: PPUSH
32028: CALL_OW 559
// wait ( 1 1$00 ) ;
32032: LD_INT 2100
32034: PPUSH
32035: CALL_OW 67
// ToLua ( hideTroll(); ) ;
32039: LD_STRING hideTroll();
32041: PPUSH
32042: CALL_OW 559
// end ;
32046: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
32047: LD_EXP 84
32051: PUSH
32052: LD_EXP 110
32056: AND
32057: IFFALSE 32120
32059: GO 32061
32061: DISABLE
32062: LD_INT 0
32064: PPUSH
// begin p := 0 ;
32065: LD_ADDR_VAR 0 1
32069: PUSH
32070: LD_INT 0
32072: ST_TO_ADDR
// repeat game_speed := 1 ;
32073: LD_ADDR_OWVAR 65
32077: PUSH
32078: LD_INT 1
32080: ST_TO_ADDR
// wait ( 0 0$1 ) ;
32081: LD_INT 35
32083: PPUSH
32084: CALL_OW 67
// p := p + 1 ;
32088: LD_ADDR_VAR 0 1
32092: PUSH
32093: LD_VAR 0 1
32097: PUSH
32098: LD_INT 1
32100: PLUS
32101: ST_TO_ADDR
// until p >= 60 ;
32102: LD_VAR 0 1
32106: PUSH
32107: LD_INT 60
32109: GREATEREQUAL
32110: IFFALSE 32073
// game_speed := 4 ;
32112: LD_ADDR_OWVAR 65
32116: PUSH
32117: LD_INT 4
32119: ST_TO_ADDR
// end ;
32120: PPOPN 1
32122: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
32123: LD_EXP 84
32127: PUSH
32128: LD_EXP 111
32132: AND
32133: IFFALSE 32279
32135: GO 32137
32137: DISABLE
32138: LD_INT 0
32140: PPUSH
32141: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32142: LD_ADDR_VAR 0 1
32146: PUSH
32147: LD_INT 22
32149: PUSH
32150: LD_OWVAR 2
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 2
32161: PUSH
32162: LD_INT 30
32164: PUSH
32165: LD_INT 0
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: LD_INT 30
32174: PUSH
32175: LD_INT 1
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: LIST
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PPUSH
32191: CALL_OW 69
32195: ST_TO_ADDR
// if not depot then
32196: LD_VAR 0 1
32200: NOT
32201: IFFALSE 32205
// exit ;
32203: GO 32279
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
32205: LD_ADDR_VAR 0 2
32209: PUSH
32210: LD_VAR 0 1
32214: PUSH
32215: LD_INT 1
32217: PPUSH
32218: LD_VAR 0 1
32222: PPUSH
32223: CALL_OW 12
32227: ARRAY
32228: PPUSH
32229: CALL_OW 274
32233: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
32234: LD_VAR 0 2
32238: PPUSH
32239: LD_INT 1
32241: PPUSH
32242: LD_INT 0
32244: PPUSH
32245: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
32249: LD_VAR 0 2
32253: PPUSH
32254: LD_INT 2
32256: PPUSH
32257: LD_INT 0
32259: PPUSH
32260: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
32264: LD_VAR 0 2
32268: PPUSH
32269: LD_INT 3
32271: PPUSH
32272: LD_INT 0
32274: PPUSH
32275: CALL_OW 277
// end ;
32279: PPOPN 2
32281: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
32282: LD_EXP 84
32286: PUSH
32287: LD_EXP 112
32291: AND
32292: IFFALSE 32389
32294: GO 32296
32296: DISABLE
32297: LD_INT 0
32299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32300: LD_ADDR_VAR 0 1
32304: PUSH
32305: LD_INT 22
32307: PUSH
32308: LD_OWVAR 2
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 21
32319: PUSH
32320: LD_INT 1
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 3
32329: PUSH
32330: LD_INT 23
32332: PUSH
32333: LD_INT 0
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: LIST
32348: PPUSH
32349: CALL_OW 69
32353: ST_TO_ADDR
// if not tmp then
32354: LD_VAR 0 1
32358: NOT
32359: IFFALSE 32363
// exit ;
32361: GO 32389
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
32363: LD_VAR 0 1
32367: PUSH
32368: LD_INT 1
32370: PPUSH
32371: LD_VAR 0 1
32375: PPUSH
32376: CALL_OW 12
32380: ARRAY
32381: PPUSH
32382: LD_INT 200
32384: PPUSH
32385: CALL_OW 234
// end ;
32389: PPOPN 1
32391: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
32392: LD_EXP 84
32396: PUSH
32397: LD_EXP 113
32401: AND
32402: IFFALSE 32481
32404: GO 32406
32406: DISABLE
32407: LD_INT 0
32409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
32410: LD_ADDR_VAR 0 1
32414: PUSH
32415: LD_INT 22
32417: PUSH
32418: LD_OWVAR 2
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 21
32429: PUSH
32430: LD_INT 2
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PPUSH
32441: CALL_OW 69
32445: ST_TO_ADDR
// if not tmp then
32446: LD_VAR 0 1
32450: NOT
32451: IFFALSE 32455
// exit ;
32453: GO 32481
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
32455: LD_VAR 0 1
32459: PUSH
32460: LD_INT 1
32462: PPUSH
32463: LD_VAR 0 1
32467: PPUSH
32468: CALL_OW 12
32472: ARRAY
32473: PPUSH
32474: LD_INT 60
32476: PPUSH
32477: CALL_OW 234
// end ;
32481: PPOPN 1
32483: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
32484: LD_EXP 84
32488: PUSH
32489: LD_EXP 114
32493: AND
32494: IFFALSE 32593
32496: GO 32498
32498: DISABLE
32499: LD_INT 0
32501: PPUSH
32502: PPUSH
// begin enable ;
32503: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
32504: LD_ADDR_VAR 0 1
32508: PUSH
32509: LD_INT 22
32511: PUSH
32512: LD_OWVAR 2
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 61
32523: PUSH
32524: EMPTY
32525: LIST
32526: PUSH
32527: LD_INT 33
32529: PUSH
32530: LD_INT 2
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: LIST
32541: PPUSH
32542: CALL_OW 69
32546: ST_TO_ADDR
// if not tmp then
32547: LD_VAR 0 1
32551: NOT
32552: IFFALSE 32556
// exit ;
32554: GO 32593
// for i in tmp do
32556: LD_ADDR_VAR 0 2
32560: PUSH
32561: LD_VAR 0 1
32565: PUSH
32566: FOR_IN
32567: IFFALSE 32591
// if IsControledBy ( i ) then
32569: LD_VAR 0 2
32573: PPUSH
32574: CALL_OW 312
32578: IFFALSE 32589
// ComUnlink ( i ) ;
32580: LD_VAR 0 2
32584: PPUSH
32585: CALL_OW 136
32589: GO 32566
32591: POP
32592: POP
// end ;
32593: PPOPN 2
32595: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
32596: LD_EXP 84
32600: PUSH
32601: LD_EXP 115
32605: AND
32606: IFFALSE 32746
32608: GO 32610
32610: DISABLE
32611: LD_INT 0
32613: PPUSH
32614: PPUSH
// begin ToLua ( displayPowell(); ) ;
32615: LD_STRING displayPowell();
32617: PPUSH
32618: CALL_OW 559
// uc_side := 0 ;
32622: LD_ADDR_OWVAR 20
32626: PUSH
32627: LD_INT 0
32629: ST_TO_ADDR
// uc_nation := 2 ;
32630: LD_ADDR_OWVAR 21
32634: PUSH
32635: LD_INT 2
32637: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
32638: LD_ADDR_OWVAR 37
32642: PUSH
32643: LD_INT 14
32645: ST_TO_ADDR
// vc_engine := engine_siberite ;
32646: LD_ADDR_OWVAR 39
32650: PUSH
32651: LD_INT 3
32653: ST_TO_ADDR
// vc_control := control_apeman ;
32654: LD_ADDR_OWVAR 38
32658: PUSH
32659: LD_INT 5
32661: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
32662: LD_ADDR_OWVAR 40
32666: PUSH
32667: LD_INT 29
32669: ST_TO_ADDR
// un := CreateVehicle ;
32670: LD_ADDR_VAR 0 2
32674: PUSH
32675: CALL_OW 45
32679: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32680: LD_VAR 0 2
32684: PPUSH
32685: LD_INT 1
32687: PPUSH
32688: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
32692: LD_INT 35
32694: PPUSH
32695: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
32699: LD_VAR 0 2
32703: PPUSH
32704: LD_INT 22
32706: PUSH
32707: LD_OWVAR 2
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PPUSH
32716: CALL_OW 69
32720: PPUSH
32721: LD_VAR 0 2
32725: PPUSH
32726: CALL_OW 74
32730: PPUSH
32731: CALL_OW 115
// until IsDead ( un ) ;
32735: LD_VAR 0 2
32739: PPUSH
32740: CALL_OW 301
32744: IFFALSE 32692
// end ;
32746: PPOPN 2
32748: END
// every 0 0$1 trigger StreamModeActive and sStu do
32749: LD_EXP 84
32753: PUSH
32754: LD_EXP 123
32758: AND
32759: IFFALSE 32775
32761: GO 32763
32763: DISABLE
// begin ToLua ( displayStucuk(); ) ;
32764: LD_STRING displayStucuk();
32766: PPUSH
32767: CALL_OW 559
// ResetFog ;
32771: CALL_OW 335
// end ;
32775: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
32776: LD_EXP 84
32780: PUSH
32781: LD_EXP 116
32785: AND
32786: IFFALSE 32927
32788: GO 32790
32790: DISABLE
32791: LD_INT 0
32793: PPUSH
32794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
32795: LD_ADDR_VAR 0 2
32799: PUSH
32800: LD_INT 22
32802: PUSH
32803: LD_OWVAR 2
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 21
32814: PUSH
32815: LD_INT 1
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PPUSH
32826: CALL_OW 69
32830: ST_TO_ADDR
// if not tmp then
32831: LD_VAR 0 2
32835: NOT
32836: IFFALSE 32840
// exit ;
32838: GO 32927
// un := tmp [ rand ( 1 , tmp ) ] ;
32840: LD_ADDR_VAR 0 1
32844: PUSH
32845: LD_VAR 0 2
32849: PUSH
32850: LD_INT 1
32852: PPUSH
32853: LD_VAR 0 2
32857: PPUSH
32858: CALL_OW 12
32862: ARRAY
32863: ST_TO_ADDR
// SetSide ( un , 0 ) ;
32864: LD_VAR 0 1
32868: PPUSH
32869: LD_INT 0
32871: PPUSH
32872: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
32876: LD_VAR 0 1
32880: PPUSH
32881: LD_OWVAR 3
32885: PUSH
32886: LD_VAR 0 1
32890: DIFF
32891: PPUSH
32892: LD_VAR 0 1
32896: PPUSH
32897: CALL_OW 74
32901: PPUSH
32902: CALL_OW 115
// wait ( 0 0$20 ) ;
32906: LD_INT 700
32908: PPUSH
32909: CALL_OW 67
// SetSide ( un , your_side ) ;
32913: LD_VAR 0 1
32917: PPUSH
32918: LD_OWVAR 2
32922: PPUSH
32923: CALL_OW 235
// end ;
32927: PPOPN 2
32929: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
32930: LD_EXP 84
32934: PUSH
32935: LD_EXP 117
32939: AND
32940: IFFALSE 33046
32942: GO 32944
32944: DISABLE
32945: LD_INT 0
32947: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32948: LD_ADDR_VAR 0 1
32952: PUSH
32953: LD_INT 22
32955: PUSH
32956: LD_OWVAR 2
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 2
32967: PUSH
32968: LD_INT 30
32970: PUSH
32971: LD_INT 0
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 30
32980: PUSH
32981: LD_INT 1
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: LIST
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PPUSH
32997: CALL_OW 69
33001: ST_TO_ADDR
// if not depot then
33002: LD_VAR 0 1
33006: NOT
33007: IFFALSE 33011
// exit ;
33009: GO 33046
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
33011: LD_VAR 0 1
33015: PUSH
33016: LD_INT 1
33018: ARRAY
33019: PPUSH
33020: CALL_OW 250
33024: PPUSH
33025: LD_VAR 0 1
33029: PUSH
33030: LD_INT 1
33032: ARRAY
33033: PPUSH
33034: CALL_OW 251
33038: PPUSH
33039: LD_INT 70
33041: PPUSH
33042: CALL_OW 495
// end ;
33046: PPOPN 1
33048: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
33049: LD_EXP 84
33053: PUSH
33054: LD_EXP 118
33058: AND
33059: IFFALSE 33270
33061: GO 33063
33063: DISABLE
33064: LD_INT 0
33066: PPUSH
33067: PPUSH
33068: PPUSH
33069: PPUSH
33070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
33071: LD_ADDR_VAR 0 5
33075: PUSH
33076: LD_INT 22
33078: PUSH
33079: LD_OWVAR 2
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 21
33090: PUSH
33091: LD_INT 1
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PPUSH
33102: CALL_OW 69
33106: ST_TO_ADDR
// if not tmp then
33107: LD_VAR 0 5
33111: NOT
33112: IFFALSE 33116
// exit ;
33114: GO 33270
// for i in tmp do
33116: LD_ADDR_VAR 0 1
33120: PUSH
33121: LD_VAR 0 5
33125: PUSH
33126: FOR_IN
33127: IFFALSE 33268
// begin d := rand ( 0 , 5 ) ;
33129: LD_ADDR_VAR 0 4
33133: PUSH
33134: LD_INT 0
33136: PPUSH
33137: LD_INT 5
33139: PPUSH
33140: CALL_OW 12
33144: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
33145: LD_ADDR_VAR 0 2
33149: PUSH
33150: LD_VAR 0 1
33154: PPUSH
33155: CALL_OW 250
33159: PPUSH
33160: LD_VAR 0 4
33164: PPUSH
33165: LD_INT 3
33167: PPUSH
33168: LD_INT 12
33170: PPUSH
33171: CALL_OW 12
33175: PPUSH
33176: CALL_OW 272
33180: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
33181: LD_ADDR_VAR 0 3
33185: PUSH
33186: LD_VAR 0 1
33190: PPUSH
33191: CALL_OW 251
33195: PPUSH
33196: LD_VAR 0 4
33200: PPUSH
33201: LD_INT 3
33203: PPUSH
33204: LD_INT 12
33206: PPUSH
33207: CALL_OW 12
33211: PPUSH
33212: CALL_OW 273
33216: ST_TO_ADDR
// if ValidHex ( x , y ) then
33217: LD_VAR 0 2
33221: PPUSH
33222: LD_VAR 0 3
33226: PPUSH
33227: CALL_OW 488
33231: IFFALSE 33266
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
33233: LD_VAR 0 1
33237: PPUSH
33238: LD_VAR 0 2
33242: PPUSH
33243: LD_VAR 0 3
33247: PPUSH
33248: LD_INT 3
33250: PPUSH
33251: LD_INT 6
33253: PPUSH
33254: CALL_OW 12
33258: PPUSH
33259: LD_INT 1
33261: PPUSH
33262: CALL_OW 483
// end ;
33266: GO 33126
33268: POP
33269: POP
// end ;
33270: PPOPN 5
33272: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
33273: LD_EXP 84
33277: PUSH
33278: LD_EXP 119
33282: AND
33283: IFFALSE 33377
33285: GO 33287
33287: DISABLE
33288: LD_INT 0
33290: PPUSH
33291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
33292: LD_ADDR_VAR 0 2
33296: PUSH
33297: LD_INT 22
33299: PUSH
33300: LD_OWVAR 2
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 32
33311: PUSH
33312: LD_INT 1
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 21
33321: PUSH
33322: LD_INT 2
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: LIST
33333: PPUSH
33334: CALL_OW 69
33338: ST_TO_ADDR
// if not tmp then
33339: LD_VAR 0 2
33343: NOT
33344: IFFALSE 33348
// exit ;
33346: GO 33377
// for i in tmp do
33348: LD_ADDR_VAR 0 1
33352: PUSH
33353: LD_VAR 0 2
33357: PUSH
33358: FOR_IN
33359: IFFALSE 33375
// SetFuel ( i , 0 ) ;
33361: LD_VAR 0 1
33365: PPUSH
33366: LD_INT 0
33368: PPUSH
33369: CALL_OW 240
33373: GO 33358
33375: POP
33376: POP
// end ;
33377: PPOPN 2
33379: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
33380: LD_EXP 84
33384: PUSH
33385: LD_EXP 120
33389: AND
33390: IFFALSE 33456
33392: GO 33394
33394: DISABLE
33395: LD_INT 0
33397: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33398: LD_ADDR_VAR 0 1
33402: PUSH
33403: LD_INT 22
33405: PUSH
33406: LD_OWVAR 2
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 30
33417: PUSH
33418: LD_INT 29
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PPUSH
33429: CALL_OW 69
33433: ST_TO_ADDR
// if not tmp then
33434: LD_VAR 0 1
33438: NOT
33439: IFFALSE 33443
// exit ;
33441: GO 33456
// DestroyUnit ( tmp [ 1 ] ) ;
33443: LD_VAR 0 1
33447: PUSH
33448: LD_INT 1
33450: ARRAY
33451: PPUSH
33452: CALL_OW 65
// end ;
33456: PPOPN 1
33458: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
33459: LD_EXP 84
33463: PUSH
33464: LD_EXP 122
33468: AND
33469: IFFALSE 33598
33471: GO 33473
33473: DISABLE
33474: LD_INT 0
33476: PPUSH
// begin uc_side := 0 ;
33477: LD_ADDR_OWVAR 20
33481: PUSH
33482: LD_INT 0
33484: ST_TO_ADDR
// uc_nation := nation_arabian ;
33485: LD_ADDR_OWVAR 21
33489: PUSH
33490: LD_INT 2
33492: ST_TO_ADDR
// hc_gallery :=  ;
33493: LD_ADDR_OWVAR 33
33497: PUSH
33498: LD_STRING 
33500: ST_TO_ADDR
// hc_name :=  ;
33501: LD_ADDR_OWVAR 26
33505: PUSH
33506: LD_STRING 
33508: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
33509: LD_INT 1
33511: PPUSH
33512: LD_INT 11
33514: PPUSH
33515: LD_INT 10
33517: PPUSH
33518: CALL_OW 380
// un := CreateHuman ;
33522: LD_ADDR_VAR 0 1
33526: PUSH
33527: CALL_OW 44
33531: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33532: LD_VAR 0 1
33536: PPUSH
33537: LD_INT 1
33539: PPUSH
33540: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
33544: LD_INT 35
33546: PPUSH
33547: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
33551: LD_VAR 0 1
33555: PPUSH
33556: LD_INT 22
33558: PUSH
33559: LD_OWVAR 2
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PPUSH
33568: CALL_OW 69
33572: PPUSH
33573: LD_VAR 0 1
33577: PPUSH
33578: CALL_OW 74
33582: PPUSH
33583: CALL_OW 115
// until IsDead ( un ) ;
33587: LD_VAR 0 1
33591: PPUSH
33592: CALL_OW 301
33596: IFFALSE 33544
// end ;
33598: PPOPN 1
33600: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
33601: LD_EXP 84
33605: PUSH
33606: LD_EXP 124
33610: AND
33611: IFFALSE 33623
33613: GO 33615
33615: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
33616: LD_STRING earthquake(getX(game), 0, 32)
33618: PPUSH
33619: CALL_OW 559
33623: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
33624: LD_EXP 84
33628: PUSH
33629: LD_EXP 125
33633: AND
33634: IFFALSE 33725
33636: GO 33638
33638: DISABLE
33639: LD_INT 0
33641: PPUSH
// begin enable ;
33642: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
33643: LD_ADDR_VAR 0 1
33647: PUSH
33648: LD_INT 22
33650: PUSH
33651: LD_OWVAR 2
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 21
33662: PUSH
33663: LD_INT 2
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 33
33672: PUSH
33673: LD_INT 3
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: LIST
33684: PPUSH
33685: CALL_OW 69
33689: ST_TO_ADDR
// if not tmp then
33690: LD_VAR 0 1
33694: NOT
33695: IFFALSE 33699
// exit ;
33697: GO 33725
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
33699: LD_VAR 0 1
33703: PUSH
33704: LD_INT 1
33706: PPUSH
33707: LD_VAR 0 1
33711: PPUSH
33712: CALL_OW 12
33716: ARRAY
33717: PPUSH
33718: LD_INT 1
33720: PPUSH
33721: CALL_OW 234
// end ;
33725: PPOPN 1
33727: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
33728: LD_EXP 84
33732: PUSH
33733: LD_EXP 126
33737: AND
33738: IFFALSE 33879
33740: GO 33742
33742: DISABLE
33743: LD_INT 0
33745: PPUSH
33746: PPUSH
33747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33748: LD_ADDR_VAR 0 3
33752: PUSH
33753: LD_INT 22
33755: PUSH
33756: LD_OWVAR 2
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 25
33767: PUSH
33768: LD_INT 1
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PPUSH
33779: CALL_OW 69
33783: ST_TO_ADDR
// if not tmp then
33784: LD_VAR 0 3
33788: NOT
33789: IFFALSE 33793
// exit ;
33791: GO 33879
// un := tmp [ rand ( 1 , tmp ) ] ;
33793: LD_ADDR_VAR 0 2
33797: PUSH
33798: LD_VAR 0 3
33802: PUSH
33803: LD_INT 1
33805: PPUSH
33806: LD_VAR 0 3
33810: PPUSH
33811: CALL_OW 12
33815: ARRAY
33816: ST_TO_ADDR
// if Crawls ( un ) then
33817: LD_VAR 0 2
33821: PPUSH
33822: CALL_OW 318
33826: IFFALSE 33837
// ComWalk ( un ) ;
33828: LD_VAR 0 2
33832: PPUSH
33833: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
33837: LD_VAR 0 2
33841: PPUSH
33842: LD_INT 9
33844: PPUSH
33845: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
33849: LD_INT 28
33851: PPUSH
33852: LD_OWVAR 2
33856: PPUSH
33857: LD_INT 2
33859: PPUSH
33860: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
33864: LD_INT 29
33866: PPUSH
33867: LD_OWVAR 2
33871: PPUSH
33872: LD_INT 2
33874: PPUSH
33875: CALL_OW 322
// end ;
33879: PPOPN 3
33881: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
33882: LD_EXP 84
33886: PUSH
33887: LD_EXP 127
33891: AND
33892: IFFALSE 34003
33894: GO 33896
33896: DISABLE
33897: LD_INT 0
33899: PPUSH
33900: PPUSH
33901: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33902: LD_ADDR_VAR 0 3
33906: PUSH
33907: LD_INT 22
33909: PUSH
33910: LD_OWVAR 2
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 25
33921: PUSH
33922: LD_INT 1
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PPUSH
33933: CALL_OW 69
33937: ST_TO_ADDR
// if not tmp then
33938: LD_VAR 0 3
33942: NOT
33943: IFFALSE 33947
// exit ;
33945: GO 34003
// un := tmp [ rand ( 1 , tmp ) ] ;
33947: LD_ADDR_VAR 0 2
33951: PUSH
33952: LD_VAR 0 3
33956: PUSH
33957: LD_INT 1
33959: PPUSH
33960: LD_VAR 0 3
33964: PPUSH
33965: CALL_OW 12
33969: ARRAY
33970: ST_TO_ADDR
// if Crawls ( un ) then
33971: LD_VAR 0 2
33975: PPUSH
33976: CALL_OW 318
33980: IFFALSE 33991
// ComWalk ( un ) ;
33982: LD_VAR 0 2
33986: PPUSH
33987: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33991: LD_VAR 0 2
33995: PPUSH
33996: LD_INT 8
33998: PPUSH
33999: CALL_OW 336
// end ;
34003: PPOPN 3
34005: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
34006: LD_EXP 84
34010: PUSH
34011: LD_EXP 128
34015: AND
34016: IFFALSE 34160
34018: GO 34020
34020: DISABLE
34021: LD_INT 0
34023: PPUSH
34024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
34025: LD_ADDR_VAR 0 2
34029: PUSH
34030: LD_INT 22
34032: PUSH
34033: LD_OWVAR 2
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 21
34044: PUSH
34045: LD_INT 2
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 2
34054: PUSH
34055: LD_INT 34
34057: PUSH
34058: LD_INT 12
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 34
34067: PUSH
34068: LD_INT 51
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 34
34077: PUSH
34078: LD_INT 32
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: LIST
34095: PPUSH
34096: CALL_OW 69
34100: ST_TO_ADDR
// if not tmp then
34101: LD_VAR 0 2
34105: NOT
34106: IFFALSE 34110
// exit ;
34108: GO 34160
// for i in tmp do
34110: LD_ADDR_VAR 0 1
34114: PUSH
34115: LD_VAR 0 2
34119: PUSH
34120: FOR_IN
34121: IFFALSE 34158
// if GetCargo ( i , mat_artifact ) = 0 then
34123: LD_VAR 0 1
34127: PPUSH
34128: LD_INT 4
34130: PPUSH
34131: CALL_OW 289
34135: PUSH
34136: LD_INT 0
34138: EQUAL
34139: IFFALSE 34156
// SetCargo ( i , mat_siberit , 100 ) ;
34141: LD_VAR 0 1
34145: PPUSH
34146: LD_INT 3
34148: PPUSH
34149: LD_INT 100
34151: PPUSH
34152: CALL_OW 290
34156: GO 34120
34158: POP
34159: POP
// end ;
34160: PPOPN 2
34162: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
34163: LD_EXP 84
34167: PUSH
34168: LD_EXP 129
34172: AND
34173: IFFALSE 34356
34175: GO 34177
34177: DISABLE
34178: LD_INT 0
34180: PPUSH
34181: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34182: LD_ADDR_VAR 0 2
34186: PUSH
34187: LD_INT 22
34189: PUSH
34190: LD_OWVAR 2
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PPUSH
34199: CALL_OW 69
34203: ST_TO_ADDR
// if not tmp then
34204: LD_VAR 0 2
34208: NOT
34209: IFFALSE 34213
// exit ;
34211: GO 34356
// for i := 1 to 2 do
34213: LD_ADDR_VAR 0 1
34217: PUSH
34218: DOUBLE
34219: LD_INT 1
34221: DEC
34222: ST_TO_ADDR
34223: LD_INT 2
34225: PUSH
34226: FOR_TO
34227: IFFALSE 34354
// begin uc_side := your_side ;
34229: LD_ADDR_OWVAR 20
34233: PUSH
34234: LD_OWVAR 2
34238: ST_TO_ADDR
// uc_nation := nation_american ;
34239: LD_ADDR_OWVAR 21
34243: PUSH
34244: LD_INT 1
34246: ST_TO_ADDR
// vc_chassis := us_morphling ;
34247: LD_ADDR_OWVAR 37
34251: PUSH
34252: LD_INT 5
34254: ST_TO_ADDR
// vc_engine := engine_siberite ;
34255: LD_ADDR_OWVAR 39
34259: PUSH
34260: LD_INT 3
34262: ST_TO_ADDR
// vc_control := control_computer ;
34263: LD_ADDR_OWVAR 38
34267: PUSH
34268: LD_INT 3
34270: ST_TO_ADDR
// vc_weapon := us_double_laser ;
34271: LD_ADDR_OWVAR 40
34275: PUSH
34276: LD_INT 10
34278: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
34279: LD_VAR 0 2
34283: PUSH
34284: LD_INT 1
34286: ARRAY
34287: PPUSH
34288: CALL_OW 310
34292: NOT
34293: IFFALSE 34340
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
34295: CALL_OW 45
34299: PPUSH
34300: LD_VAR 0 2
34304: PUSH
34305: LD_INT 1
34307: ARRAY
34308: PPUSH
34309: CALL_OW 250
34313: PPUSH
34314: LD_VAR 0 2
34318: PUSH
34319: LD_INT 1
34321: ARRAY
34322: PPUSH
34323: CALL_OW 251
34327: PPUSH
34328: LD_INT 12
34330: PPUSH
34331: LD_INT 1
34333: PPUSH
34334: CALL_OW 50
34338: GO 34352
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
34340: CALL_OW 45
34344: PPUSH
34345: LD_INT 1
34347: PPUSH
34348: CALL_OW 51
// end ;
34352: GO 34226
34354: POP
34355: POP
// end ;
34356: PPOPN 2
34358: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
34359: LD_EXP 84
34363: PUSH
34364: LD_EXP 130
34368: AND
34369: IFFALSE 34591
34371: GO 34373
34373: DISABLE
34374: LD_INT 0
34376: PPUSH
34377: PPUSH
34378: PPUSH
34379: PPUSH
34380: PPUSH
34381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34382: LD_ADDR_VAR 0 6
34386: PUSH
34387: LD_INT 22
34389: PUSH
34390: LD_OWVAR 2
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 21
34401: PUSH
34402: LD_INT 1
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 3
34411: PUSH
34412: LD_INT 23
34414: PUSH
34415: LD_INT 0
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: LIST
34430: PPUSH
34431: CALL_OW 69
34435: ST_TO_ADDR
// if not tmp then
34436: LD_VAR 0 6
34440: NOT
34441: IFFALSE 34445
// exit ;
34443: GO 34591
// s1 := rand ( 1 , 4 ) ;
34445: LD_ADDR_VAR 0 2
34449: PUSH
34450: LD_INT 1
34452: PPUSH
34453: LD_INT 4
34455: PPUSH
34456: CALL_OW 12
34460: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
34461: LD_ADDR_VAR 0 4
34465: PUSH
34466: LD_VAR 0 6
34470: PUSH
34471: LD_INT 1
34473: ARRAY
34474: PPUSH
34475: LD_VAR 0 2
34479: PPUSH
34480: CALL_OW 259
34484: ST_TO_ADDR
// if s1 = 1 then
34485: LD_VAR 0 2
34489: PUSH
34490: LD_INT 1
34492: EQUAL
34493: IFFALSE 34513
// s2 := rand ( 2 , 4 ) else
34495: LD_ADDR_VAR 0 3
34499: PUSH
34500: LD_INT 2
34502: PPUSH
34503: LD_INT 4
34505: PPUSH
34506: CALL_OW 12
34510: ST_TO_ADDR
34511: GO 34521
// s2 := 1 ;
34513: LD_ADDR_VAR 0 3
34517: PUSH
34518: LD_INT 1
34520: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
34521: LD_ADDR_VAR 0 5
34525: PUSH
34526: LD_VAR 0 6
34530: PUSH
34531: LD_INT 1
34533: ARRAY
34534: PPUSH
34535: LD_VAR 0 3
34539: PPUSH
34540: CALL_OW 259
34544: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
34545: LD_VAR 0 6
34549: PUSH
34550: LD_INT 1
34552: ARRAY
34553: PPUSH
34554: LD_VAR 0 2
34558: PPUSH
34559: LD_VAR 0 5
34563: PPUSH
34564: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
34568: LD_VAR 0 6
34572: PUSH
34573: LD_INT 1
34575: ARRAY
34576: PPUSH
34577: LD_VAR 0 3
34581: PPUSH
34582: LD_VAR 0 4
34586: PPUSH
34587: CALL_OW 237
// end ;
34591: PPOPN 6
34593: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
34594: LD_EXP 84
34598: PUSH
34599: LD_EXP 131
34603: AND
34604: IFFALSE 34683
34606: GO 34608
34608: DISABLE
34609: LD_INT 0
34611: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
34612: LD_ADDR_VAR 0 1
34616: PUSH
34617: LD_INT 22
34619: PUSH
34620: LD_OWVAR 2
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 30
34631: PUSH
34632: LD_INT 3
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PPUSH
34643: CALL_OW 69
34647: ST_TO_ADDR
// if not tmp then
34648: LD_VAR 0 1
34652: NOT
34653: IFFALSE 34657
// exit ;
34655: GO 34683
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
34657: LD_VAR 0 1
34661: PUSH
34662: LD_INT 1
34664: PPUSH
34665: LD_VAR 0 1
34669: PPUSH
34670: CALL_OW 12
34674: ARRAY
34675: PPUSH
34676: LD_INT 1
34678: PPUSH
34679: CALL_OW 234
// end ;
34683: PPOPN 1
34685: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
34686: LD_EXP 84
34690: PUSH
34691: LD_EXP 132
34695: AND
34696: IFFALSE 34808
34698: GO 34700
34700: DISABLE
34701: LD_INT 0
34703: PPUSH
34704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
34705: LD_ADDR_VAR 0 2
34709: PUSH
34710: LD_INT 22
34712: PUSH
34713: LD_OWVAR 2
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 2
34724: PUSH
34725: LD_INT 30
34727: PUSH
34728: LD_INT 27
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 30
34737: PUSH
34738: LD_INT 26
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 30
34747: PUSH
34748: LD_INT 28
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PPUSH
34765: CALL_OW 69
34769: ST_TO_ADDR
// if not tmp then
34770: LD_VAR 0 2
34774: NOT
34775: IFFALSE 34779
// exit ;
34777: GO 34808
// for i in tmp do
34779: LD_ADDR_VAR 0 1
34783: PUSH
34784: LD_VAR 0 2
34788: PUSH
34789: FOR_IN
34790: IFFALSE 34806
// SetLives ( i , 1 ) ;
34792: LD_VAR 0 1
34796: PPUSH
34797: LD_INT 1
34799: PPUSH
34800: CALL_OW 234
34804: GO 34789
34806: POP
34807: POP
// end ;
34808: PPOPN 2
34810: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
34811: LD_EXP 84
34815: PUSH
34816: LD_EXP 133
34820: AND
34821: IFFALSE 35108
34823: GO 34825
34825: DISABLE
34826: LD_INT 0
34828: PPUSH
34829: PPUSH
34830: PPUSH
// begin i := rand ( 1 , 7 ) ;
34831: LD_ADDR_VAR 0 1
34835: PUSH
34836: LD_INT 1
34838: PPUSH
34839: LD_INT 7
34841: PPUSH
34842: CALL_OW 12
34846: ST_TO_ADDR
// case i of 1 :
34847: LD_VAR 0 1
34851: PUSH
34852: LD_INT 1
34854: DOUBLE
34855: EQUAL
34856: IFTRUE 34860
34858: GO 34870
34860: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
34861: LD_STRING earthquake(getX(game), 0, 32)
34863: PPUSH
34864: CALL_OW 559
34868: GO 35108
34870: LD_INT 2
34872: DOUBLE
34873: EQUAL
34874: IFTRUE 34878
34876: GO 34892
34878: POP
// begin ToLua ( displayStucuk(); ) ;
34879: LD_STRING displayStucuk();
34881: PPUSH
34882: CALL_OW 559
// ResetFog ;
34886: CALL_OW 335
// end ; 3 :
34890: GO 35108
34892: LD_INT 3
34894: DOUBLE
34895: EQUAL
34896: IFTRUE 34900
34898: GO 35004
34900: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34901: LD_ADDR_VAR 0 2
34905: PUSH
34906: LD_INT 22
34908: PUSH
34909: LD_OWVAR 2
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 25
34920: PUSH
34921: LD_INT 1
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PPUSH
34932: CALL_OW 69
34936: ST_TO_ADDR
// if not tmp then
34937: LD_VAR 0 2
34941: NOT
34942: IFFALSE 34946
// exit ;
34944: GO 35108
// un := tmp [ rand ( 1 , tmp ) ] ;
34946: LD_ADDR_VAR 0 3
34950: PUSH
34951: LD_VAR 0 2
34955: PUSH
34956: LD_INT 1
34958: PPUSH
34959: LD_VAR 0 2
34963: PPUSH
34964: CALL_OW 12
34968: ARRAY
34969: ST_TO_ADDR
// if Crawls ( un ) then
34970: LD_VAR 0 3
34974: PPUSH
34975: CALL_OW 318
34979: IFFALSE 34990
// ComWalk ( un ) ;
34981: LD_VAR 0 3
34985: PPUSH
34986: CALL_OW 138
// SetClass ( un , class_mortar ) ;
34990: LD_VAR 0 3
34994: PPUSH
34995: LD_INT 8
34997: PPUSH
34998: CALL_OW 336
// end ; 4 :
35002: GO 35108
35004: LD_INT 4
35006: DOUBLE
35007: EQUAL
35008: IFTRUE 35012
35010: GO 35086
35012: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
35013: LD_ADDR_VAR 0 2
35017: PUSH
35018: LD_INT 22
35020: PUSH
35021: LD_OWVAR 2
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 30
35032: PUSH
35033: LD_INT 29
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PPUSH
35044: CALL_OW 69
35048: ST_TO_ADDR
// if not tmp then
35049: LD_VAR 0 2
35053: NOT
35054: IFFALSE 35058
// exit ;
35056: GO 35108
// CenterNowOnUnits ( tmp [ 1 ] ) ;
35058: LD_VAR 0 2
35062: PUSH
35063: LD_INT 1
35065: ARRAY
35066: PPUSH
35067: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
35071: LD_VAR 0 2
35075: PUSH
35076: LD_INT 1
35078: ARRAY
35079: PPUSH
35080: CALL_OW 65
// end ; 5 .. 7 :
35084: GO 35108
35086: LD_INT 5
35088: DOUBLE
35089: GREATEREQUAL
35090: IFFALSE 35098
35092: LD_INT 7
35094: DOUBLE
35095: LESSEQUAL
35096: IFTRUE 35100
35098: GO 35107
35100: POP
// StreamSibBomb ; end ;
35101: CALL 31345 0 0
35105: GO 35108
35107: POP
// end ;
35108: PPOPN 3
35110: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
35111: LD_EXP 84
35115: PUSH
35116: LD_EXP 134
35120: AND
35121: IFFALSE 35277
35123: GO 35125
35125: DISABLE
35126: LD_INT 0
35128: PPUSH
35129: PPUSH
35130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
35131: LD_ADDR_VAR 0 2
35135: PUSH
35136: LD_INT 81
35138: PUSH
35139: LD_OWVAR 2
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 2
35150: PUSH
35151: LD_INT 21
35153: PUSH
35154: LD_INT 1
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 21
35163: PUSH
35164: LD_INT 2
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: LIST
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PPUSH
35180: CALL_OW 69
35184: ST_TO_ADDR
// if not tmp then
35185: LD_VAR 0 2
35189: NOT
35190: IFFALSE 35194
// exit ;
35192: GO 35277
// p := 0 ;
35194: LD_ADDR_VAR 0 3
35198: PUSH
35199: LD_INT 0
35201: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35202: LD_INT 35
35204: PPUSH
35205: CALL_OW 67
// p := p + 1 ;
35209: LD_ADDR_VAR 0 3
35213: PUSH
35214: LD_VAR 0 3
35218: PUSH
35219: LD_INT 1
35221: PLUS
35222: ST_TO_ADDR
// for i in tmp do
35223: LD_ADDR_VAR 0 1
35227: PUSH
35228: LD_VAR 0 2
35232: PUSH
35233: FOR_IN
35234: IFFALSE 35265
// if GetLives ( i ) < 1000 then
35236: LD_VAR 0 1
35240: PPUSH
35241: CALL_OW 256
35245: PUSH
35246: LD_INT 1000
35248: LESS
35249: IFFALSE 35263
// SetLives ( i , 1000 ) ;
35251: LD_VAR 0 1
35255: PPUSH
35256: LD_INT 1000
35258: PPUSH
35259: CALL_OW 234
35263: GO 35233
35265: POP
35266: POP
// until p > 20 ;
35267: LD_VAR 0 3
35271: PUSH
35272: LD_INT 20
35274: GREATER
35275: IFFALSE 35202
// end ;
35277: PPOPN 3
35279: END
// every 0 0$1 trigger StreamModeActive and sTime do
35280: LD_EXP 84
35284: PUSH
35285: LD_EXP 135
35289: AND
35290: IFFALSE 35325
35292: GO 35294
35294: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
35295: LD_INT 28
35297: PPUSH
35298: LD_OWVAR 2
35302: PPUSH
35303: LD_INT 2
35305: PPUSH
35306: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
35310: LD_INT 30
35312: PPUSH
35313: LD_OWVAR 2
35317: PPUSH
35318: LD_INT 2
35320: PPUSH
35321: CALL_OW 322
// end ;
35325: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
35326: LD_EXP 84
35330: PUSH
35331: LD_EXP 136
35335: AND
35336: IFFALSE 35457
35338: GO 35340
35340: DISABLE
35341: LD_INT 0
35343: PPUSH
35344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
35345: LD_ADDR_VAR 0 2
35349: PUSH
35350: LD_INT 22
35352: PUSH
35353: LD_OWVAR 2
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 21
35364: PUSH
35365: LD_INT 1
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 3
35374: PUSH
35375: LD_INT 23
35377: PUSH
35378: LD_INT 0
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: LIST
35393: PPUSH
35394: CALL_OW 69
35398: ST_TO_ADDR
// if not tmp then
35399: LD_VAR 0 2
35403: NOT
35404: IFFALSE 35408
// exit ;
35406: GO 35457
// for i in tmp do
35408: LD_ADDR_VAR 0 1
35412: PUSH
35413: LD_VAR 0 2
35417: PUSH
35418: FOR_IN
35419: IFFALSE 35455
// begin if Crawls ( i ) then
35421: LD_VAR 0 1
35425: PPUSH
35426: CALL_OW 318
35430: IFFALSE 35441
// ComWalk ( i ) ;
35432: LD_VAR 0 1
35436: PPUSH
35437: CALL_OW 138
// SetClass ( i , 2 ) ;
35441: LD_VAR 0 1
35445: PPUSH
35446: LD_INT 2
35448: PPUSH
35449: CALL_OW 336
// end ;
35453: GO 35418
35455: POP
35456: POP
// end ;
35457: PPOPN 2
35459: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
35460: LD_EXP 84
35464: PUSH
35465: LD_EXP 137
35469: AND
35470: IFFALSE 35758
35472: GO 35474
35474: DISABLE
35475: LD_INT 0
35477: PPUSH
35478: PPUSH
35479: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
35480: LD_OWVAR 2
35484: PPUSH
35485: LD_INT 9
35487: PPUSH
35488: LD_INT 1
35490: PPUSH
35491: LD_INT 1
35493: PPUSH
35494: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
35498: LD_INT 9
35500: PPUSH
35501: LD_OWVAR 2
35505: PPUSH
35506: CALL_OW 343
// uc_side := 9 ;
35510: LD_ADDR_OWVAR 20
35514: PUSH
35515: LD_INT 9
35517: ST_TO_ADDR
// uc_nation := 2 ;
35518: LD_ADDR_OWVAR 21
35522: PUSH
35523: LD_INT 2
35525: ST_TO_ADDR
// hc_name := Dark Warrior ;
35526: LD_ADDR_OWVAR 26
35530: PUSH
35531: LD_STRING Dark Warrior
35533: ST_TO_ADDR
// hc_gallery :=  ;
35534: LD_ADDR_OWVAR 33
35538: PUSH
35539: LD_STRING 
35541: ST_TO_ADDR
// hc_noskilllimit := true ;
35542: LD_ADDR_OWVAR 76
35546: PUSH
35547: LD_INT 1
35549: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
35550: LD_ADDR_OWVAR 31
35554: PUSH
35555: LD_INT 30
35557: PUSH
35558: LD_INT 30
35560: PUSH
35561: LD_INT 30
35563: PUSH
35564: LD_INT 30
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: ST_TO_ADDR
// un := CreateHuman ;
35573: LD_ADDR_VAR 0 3
35577: PUSH
35578: CALL_OW 44
35582: ST_TO_ADDR
// hc_noskilllimit := false ;
35583: LD_ADDR_OWVAR 76
35587: PUSH
35588: LD_INT 0
35590: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
35591: LD_VAR 0 3
35595: PPUSH
35596: LD_INT 1
35598: PPUSH
35599: CALL_OW 51
// ToLua ( playRanger() ) ;
35603: LD_STRING playRanger()
35605: PPUSH
35606: CALL_OW 559
// p := 0 ;
35610: LD_ADDR_VAR 0 2
35614: PUSH
35615: LD_INT 0
35617: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35618: LD_INT 35
35620: PPUSH
35621: CALL_OW 67
// p := p + 1 ;
35625: LD_ADDR_VAR 0 2
35629: PUSH
35630: LD_VAR 0 2
35634: PUSH
35635: LD_INT 1
35637: PLUS
35638: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
35639: LD_VAR 0 3
35643: PPUSH
35644: CALL_OW 256
35648: PUSH
35649: LD_INT 1000
35651: LESS
35652: IFFALSE 35666
// SetLives ( un , 1000 ) ;
35654: LD_VAR 0 3
35658: PPUSH
35659: LD_INT 1000
35661: PPUSH
35662: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
35666: LD_VAR 0 3
35670: PPUSH
35671: LD_INT 81
35673: PUSH
35674: LD_OWVAR 2
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 91
35685: PUSH
35686: LD_VAR 0 3
35690: PUSH
35691: LD_INT 30
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: LIST
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PPUSH
35703: CALL_OW 69
35707: PPUSH
35708: LD_VAR 0 3
35712: PPUSH
35713: CALL_OW 74
35717: PPUSH
35718: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
35722: LD_VAR 0 2
35726: PUSH
35727: LD_INT 80
35729: GREATER
35730: PUSH
35731: LD_VAR 0 3
35735: PPUSH
35736: CALL_OW 301
35740: OR
35741: IFFALSE 35618
// if un then
35743: LD_VAR 0 3
35747: IFFALSE 35758
// RemoveUnit ( un ) ;
35749: LD_VAR 0 3
35753: PPUSH
35754: CALL_OW 64
// end ;
35758: PPOPN 3
35760: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
35761: LD_EXP 138
35765: IFFALSE 35881
35767: GO 35769
35769: DISABLE
35770: LD_INT 0
35772: PPUSH
35773: PPUSH
35774: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
35775: LD_ADDR_VAR 0 2
35779: PUSH
35780: LD_INT 81
35782: PUSH
35783: LD_OWVAR 2
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 21
35794: PUSH
35795: LD_INT 1
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PPUSH
35806: CALL_OW 69
35810: ST_TO_ADDR
// ToLua ( playComputer() ) ;
35811: LD_STRING playComputer()
35813: PPUSH
35814: CALL_OW 559
// if not tmp then
35818: LD_VAR 0 2
35822: NOT
35823: IFFALSE 35827
// exit ;
35825: GO 35881
// for i in tmp do
35827: LD_ADDR_VAR 0 1
35831: PUSH
35832: LD_VAR 0 2
35836: PUSH
35837: FOR_IN
35838: IFFALSE 35879
// for j := 1 to 4 do
35840: LD_ADDR_VAR 0 3
35844: PUSH
35845: DOUBLE
35846: LD_INT 1
35848: DEC
35849: ST_TO_ADDR
35850: LD_INT 4
35852: PUSH
35853: FOR_TO
35854: IFFALSE 35875
// SetSkill ( i , j , 10 ) ;
35856: LD_VAR 0 1
35860: PPUSH
35861: LD_VAR 0 3
35865: PPUSH
35866: LD_INT 10
35868: PPUSH
35869: CALL_OW 237
35873: GO 35853
35875: POP
35876: POP
35877: GO 35837
35879: POP
35880: POP
// end ;
35881: PPOPN 3
35883: END
// every 0 0$1 trigger s30 do var i , tmp ;
35884: LD_EXP 139
35888: IFFALSE 35957
35890: GO 35892
35892: DISABLE
35893: LD_INT 0
35895: PPUSH
35896: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
35897: LD_ADDR_VAR 0 2
35901: PUSH
35902: LD_INT 22
35904: PUSH
35905: LD_OWVAR 2
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PPUSH
35914: CALL_OW 69
35918: ST_TO_ADDR
// if not tmp then
35919: LD_VAR 0 2
35923: NOT
35924: IFFALSE 35928
// exit ;
35926: GO 35957
// for i in tmp do
35928: LD_ADDR_VAR 0 1
35932: PUSH
35933: LD_VAR 0 2
35937: PUSH
35938: FOR_IN
35939: IFFALSE 35955
// SetLives ( i , 300 ) ;
35941: LD_VAR 0 1
35945: PPUSH
35946: LD_INT 300
35948: PPUSH
35949: CALL_OW 234
35953: GO 35938
35955: POP
35956: POP
// end ;
35957: PPOPN 2
35959: END
// every 0 0$1 trigger s60 do var i , tmp ;
35960: LD_EXP 140
35964: IFFALSE 36033
35966: GO 35968
35968: DISABLE
35969: LD_INT 0
35971: PPUSH
35972: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
35973: LD_ADDR_VAR 0 2
35977: PUSH
35978: LD_INT 22
35980: PUSH
35981: LD_OWVAR 2
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PPUSH
35990: CALL_OW 69
35994: ST_TO_ADDR
// if not tmp then
35995: LD_VAR 0 2
35999: NOT
36000: IFFALSE 36004
// exit ;
36002: GO 36033
// for i in tmp do
36004: LD_ADDR_VAR 0 1
36008: PUSH
36009: LD_VAR 0 2
36013: PUSH
36014: FOR_IN
36015: IFFALSE 36031
// SetLives ( i , 600 ) ;
36017: LD_VAR 0 1
36021: PPUSH
36022: LD_INT 600
36024: PPUSH
36025: CALL_OW 234
36029: GO 36014
36031: POP
36032: POP
// end ;
36033: PPOPN 2
36035: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
36036: LD_INT 0
36038: PPUSH
// case cmd of 301 :
36039: LD_VAR 0 1
36043: PUSH
36044: LD_INT 301
36046: DOUBLE
36047: EQUAL
36048: IFTRUE 36052
36050: GO 36084
36052: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
36053: LD_VAR 0 6
36057: PPUSH
36058: LD_VAR 0 7
36062: PPUSH
36063: LD_VAR 0 8
36067: PPUSH
36068: LD_VAR 0 4
36072: PPUSH
36073: LD_VAR 0 5
36077: PPUSH
36078: CALL 37285 0 5
36082: GO 36205
36084: LD_INT 302
36086: DOUBLE
36087: EQUAL
36088: IFTRUE 36092
36090: GO 36129
36092: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
36093: LD_VAR 0 6
36097: PPUSH
36098: LD_VAR 0 7
36102: PPUSH
36103: LD_VAR 0 8
36107: PPUSH
36108: LD_VAR 0 9
36112: PPUSH
36113: LD_VAR 0 4
36117: PPUSH
36118: LD_VAR 0 5
36122: PPUSH
36123: CALL 37376 0 6
36127: GO 36205
36129: LD_INT 303
36131: DOUBLE
36132: EQUAL
36133: IFTRUE 36137
36135: GO 36174
36137: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
36138: LD_VAR 0 6
36142: PPUSH
36143: LD_VAR 0 7
36147: PPUSH
36148: LD_VAR 0 8
36152: PPUSH
36153: LD_VAR 0 9
36157: PPUSH
36158: LD_VAR 0 4
36162: PPUSH
36163: LD_VAR 0 5
36167: PPUSH
36168: CALL 36210 0 6
36172: GO 36205
36174: LD_INT 304
36176: DOUBLE
36177: EQUAL
36178: IFTRUE 36182
36180: GO 36204
36182: POP
// hHackTeleport ( unit , x , y ) ; end ;
36183: LD_VAR 0 2
36187: PPUSH
36188: LD_VAR 0 4
36192: PPUSH
36193: LD_VAR 0 5
36197: PPUSH
36198: CALL 37969 0 3
36202: GO 36205
36204: POP
// end ;
36205: LD_VAR 0 12
36209: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
36210: LD_INT 0
36212: PPUSH
36213: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
36214: LD_VAR 0 1
36218: PUSH
36219: LD_INT 1
36221: LESS
36222: PUSH
36223: LD_VAR 0 1
36227: PUSH
36228: LD_INT 3
36230: GREATER
36231: OR
36232: PUSH
36233: LD_VAR 0 5
36237: PPUSH
36238: LD_VAR 0 6
36242: PPUSH
36243: CALL_OW 428
36247: OR
36248: IFFALSE 36252
// exit ;
36250: GO 36972
// uc_side := your_side ;
36252: LD_ADDR_OWVAR 20
36256: PUSH
36257: LD_OWVAR 2
36261: ST_TO_ADDR
// uc_nation := nation ;
36262: LD_ADDR_OWVAR 21
36266: PUSH
36267: LD_VAR 0 1
36271: ST_TO_ADDR
// bc_level = 1 ;
36272: LD_ADDR_OWVAR 43
36276: PUSH
36277: LD_INT 1
36279: ST_TO_ADDR
// case btype of 1 :
36280: LD_VAR 0 2
36284: PUSH
36285: LD_INT 1
36287: DOUBLE
36288: EQUAL
36289: IFTRUE 36293
36291: GO 36304
36293: POP
// bc_type := b_depot ; 2 :
36294: LD_ADDR_OWVAR 42
36298: PUSH
36299: LD_INT 0
36301: ST_TO_ADDR
36302: GO 36916
36304: LD_INT 2
36306: DOUBLE
36307: EQUAL
36308: IFTRUE 36312
36310: GO 36323
36312: POP
// bc_type := b_warehouse ; 3 :
36313: LD_ADDR_OWVAR 42
36317: PUSH
36318: LD_INT 1
36320: ST_TO_ADDR
36321: GO 36916
36323: LD_INT 3
36325: DOUBLE
36326: EQUAL
36327: IFTRUE 36331
36329: GO 36342
36331: POP
// bc_type := b_lab ; 4 .. 9 :
36332: LD_ADDR_OWVAR 42
36336: PUSH
36337: LD_INT 6
36339: ST_TO_ADDR
36340: GO 36916
36342: LD_INT 4
36344: DOUBLE
36345: GREATEREQUAL
36346: IFFALSE 36354
36348: LD_INT 9
36350: DOUBLE
36351: LESSEQUAL
36352: IFTRUE 36356
36354: GO 36408
36356: POP
// begin bc_type := b_lab_half ;
36357: LD_ADDR_OWVAR 42
36361: PUSH
36362: LD_INT 7
36364: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
36365: LD_ADDR_OWVAR 44
36369: PUSH
36370: LD_INT 10
36372: PUSH
36373: LD_INT 11
36375: PUSH
36376: LD_INT 12
36378: PUSH
36379: LD_INT 15
36381: PUSH
36382: LD_INT 14
36384: PUSH
36385: LD_INT 13
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: PUSH
36396: LD_VAR 0 2
36400: PUSH
36401: LD_INT 3
36403: MINUS
36404: ARRAY
36405: ST_TO_ADDR
// end ; 10 .. 13 :
36406: GO 36916
36408: LD_INT 10
36410: DOUBLE
36411: GREATEREQUAL
36412: IFFALSE 36420
36414: LD_INT 13
36416: DOUBLE
36417: LESSEQUAL
36418: IFTRUE 36422
36420: GO 36499
36422: POP
// begin bc_type := b_lab_full ;
36423: LD_ADDR_OWVAR 42
36427: PUSH
36428: LD_INT 8
36430: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
36431: LD_ADDR_OWVAR 44
36435: PUSH
36436: LD_INT 10
36438: PUSH
36439: LD_INT 12
36441: PUSH
36442: LD_INT 14
36444: PUSH
36445: LD_INT 13
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: PUSH
36454: LD_VAR 0 2
36458: PUSH
36459: LD_INT 9
36461: MINUS
36462: ARRAY
36463: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
36464: LD_ADDR_OWVAR 45
36468: PUSH
36469: LD_INT 11
36471: PUSH
36472: LD_INT 15
36474: PUSH
36475: LD_INT 12
36477: PUSH
36478: LD_INT 15
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: PUSH
36487: LD_VAR 0 2
36491: PUSH
36492: LD_INT 9
36494: MINUS
36495: ARRAY
36496: ST_TO_ADDR
// end ; 14 :
36497: GO 36916
36499: LD_INT 14
36501: DOUBLE
36502: EQUAL
36503: IFTRUE 36507
36505: GO 36518
36507: POP
// bc_type := b_workshop ; 15 :
36508: LD_ADDR_OWVAR 42
36512: PUSH
36513: LD_INT 2
36515: ST_TO_ADDR
36516: GO 36916
36518: LD_INT 15
36520: DOUBLE
36521: EQUAL
36522: IFTRUE 36526
36524: GO 36537
36526: POP
// bc_type := b_factory ; 16 :
36527: LD_ADDR_OWVAR 42
36531: PUSH
36532: LD_INT 3
36534: ST_TO_ADDR
36535: GO 36916
36537: LD_INT 16
36539: DOUBLE
36540: EQUAL
36541: IFTRUE 36545
36543: GO 36556
36545: POP
// bc_type := b_ext_gun ; 17 :
36546: LD_ADDR_OWVAR 42
36550: PUSH
36551: LD_INT 17
36553: ST_TO_ADDR
36554: GO 36916
36556: LD_INT 17
36558: DOUBLE
36559: EQUAL
36560: IFTRUE 36564
36562: GO 36592
36564: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
36565: LD_ADDR_OWVAR 42
36569: PUSH
36570: LD_INT 19
36572: PUSH
36573: LD_INT 23
36575: PUSH
36576: LD_INT 19
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: LIST
36583: PUSH
36584: LD_VAR 0 1
36588: ARRAY
36589: ST_TO_ADDR
36590: GO 36916
36592: LD_INT 18
36594: DOUBLE
36595: EQUAL
36596: IFTRUE 36600
36598: GO 36611
36600: POP
// bc_type := b_ext_radar ; 19 :
36601: LD_ADDR_OWVAR 42
36605: PUSH
36606: LD_INT 20
36608: ST_TO_ADDR
36609: GO 36916
36611: LD_INT 19
36613: DOUBLE
36614: EQUAL
36615: IFTRUE 36619
36617: GO 36630
36619: POP
// bc_type := b_ext_radio ; 20 :
36620: LD_ADDR_OWVAR 42
36624: PUSH
36625: LD_INT 22
36627: ST_TO_ADDR
36628: GO 36916
36630: LD_INT 20
36632: DOUBLE
36633: EQUAL
36634: IFTRUE 36638
36636: GO 36649
36638: POP
// bc_type := b_ext_siberium ; 21 :
36639: LD_ADDR_OWVAR 42
36643: PUSH
36644: LD_INT 21
36646: ST_TO_ADDR
36647: GO 36916
36649: LD_INT 21
36651: DOUBLE
36652: EQUAL
36653: IFTRUE 36657
36655: GO 36668
36657: POP
// bc_type := b_ext_computer ; 22 :
36658: LD_ADDR_OWVAR 42
36662: PUSH
36663: LD_INT 24
36665: ST_TO_ADDR
36666: GO 36916
36668: LD_INT 22
36670: DOUBLE
36671: EQUAL
36672: IFTRUE 36676
36674: GO 36687
36676: POP
// bc_type := b_ext_track ; 23 :
36677: LD_ADDR_OWVAR 42
36681: PUSH
36682: LD_INT 16
36684: ST_TO_ADDR
36685: GO 36916
36687: LD_INT 23
36689: DOUBLE
36690: EQUAL
36691: IFTRUE 36695
36693: GO 36706
36695: POP
// bc_type := b_ext_laser ; 24 :
36696: LD_ADDR_OWVAR 42
36700: PUSH
36701: LD_INT 25
36703: ST_TO_ADDR
36704: GO 36916
36706: LD_INT 24
36708: DOUBLE
36709: EQUAL
36710: IFTRUE 36714
36712: GO 36725
36714: POP
// bc_type := b_control_tower ; 25 :
36715: LD_ADDR_OWVAR 42
36719: PUSH
36720: LD_INT 36
36722: ST_TO_ADDR
36723: GO 36916
36725: LD_INT 25
36727: DOUBLE
36728: EQUAL
36729: IFTRUE 36733
36731: GO 36744
36733: POP
// bc_type := b_breastwork ; 26 :
36734: LD_ADDR_OWVAR 42
36738: PUSH
36739: LD_INT 31
36741: ST_TO_ADDR
36742: GO 36916
36744: LD_INT 26
36746: DOUBLE
36747: EQUAL
36748: IFTRUE 36752
36750: GO 36763
36752: POP
// bc_type := b_bunker ; 27 :
36753: LD_ADDR_OWVAR 42
36757: PUSH
36758: LD_INT 32
36760: ST_TO_ADDR
36761: GO 36916
36763: LD_INT 27
36765: DOUBLE
36766: EQUAL
36767: IFTRUE 36771
36769: GO 36782
36771: POP
// bc_type := b_turret ; 28 :
36772: LD_ADDR_OWVAR 42
36776: PUSH
36777: LD_INT 33
36779: ST_TO_ADDR
36780: GO 36916
36782: LD_INT 28
36784: DOUBLE
36785: EQUAL
36786: IFTRUE 36790
36788: GO 36801
36790: POP
// bc_type := b_armoury ; 29 :
36791: LD_ADDR_OWVAR 42
36795: PUSH
36796: LD_INT 4
36798: ST_TO_ADDR
36799: GO 36916
36801: LD_INT 29
36803: DOUBLE
36804: EQUAL
36805: IFTRUE 36809
36807: GO 36820
36809: POP
// bc_type := b_barracks ; 30 :
36810: LD_ADDR_OWVAR 42
36814: PUSH
36815: LD_INT 5
36817: ST_TO_ADDR
36818: GO 36916
36820: LD_INT 30
36822: DOUBLE
36823: EQUAL
36824: IFTRUE 36828
36826: GO 36839
36828: POP
// bc_type := b_solar_power ; 31 :
36829: LD_ADDR_OWVAR 42
36833: PUSH
36834: LD_INT 27
36836: ST_TO_ADDR
36837: GO 36916
36839: LD_INT 31
36841: DOUBLE
36842: EQUAL
36843: IFTRUE 36847
36845: GO 36858
36847: POP
// bc_type := b_oil_power ; 32 :
36848: LD_ADDR_OWVAR 42
36852: PUSH
36853: LD_INT 26
36855: ST_TO_ADDR
36856: GO 36916
36858: LD_INT 32
36860: DOUBLE
36861: EQUAL
36862: IFTRUE 36866
36864: GO 36877
36866: POP
// bc_type := b_siberite_power ; 33 :
36867: LD_ADDR_OWVAR 42
36871: PUSH
36872: LD_INT 28
36874: ST_TO_ADDR
36875: GO 36916
36877: LD_INT 33
36879: DOUBLE
36880: EQUAL
36881: IFTRUE 36885
36883: GO 36896
36885: POP
// bc_type := b_oil_mine ; 34 :
36886: LD_ADDR_OWVAR 42
36890: PUSH
36891: LD_INT 29
36893: ST_TO_ADDR
36894: GO 36916
36896: LD_INT 34
36898: DOUBLE
36899: EQUAL
36900: IFTRUE 36904
36902: GO 36915
36904: POP
// bc_type := b_siberite_mine ; end ;
36905: LD_ADDR_OWVAR 42
36909: PUSH
36910: LD_INT 30
36912: ST_TO_ADDR
36913: GO 36916
36915: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
36916: LD_ADDR_VAR 0 8
36920: PUSH
36921: LD_VAR 0 5
36925: PPUSH
36926: LD_VAR 0 6
36930: PPUSH
36931: LD_VAR 0 3
36935: PPUSH
36936: CALL_OW 47
36940: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
36941: LD_OWVAR 42
36945: PUSH
36946: LD_INT 32
36948: PUSH
36949: LD_INT 33
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: IN
36956: IFFALSE 36972
// PlaceWeaponTurret ( b , weapon ) ;
36958: LD_VAR 0 8
36962: PPUSH
36963: LD_VAR 0 4
36967: PPUSH
36968: CALL_OW 431
// end ;
36972: LD_VAR 0 7
36976: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
36977: LD_INT 0
36979: PPUSH
36980: PPUSH
36981: PPUSH
36982: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36983: LD_ADDR_VAR 0 4
36987: PUSH
36988: LD_INT 22
36990: PUSH
36991: LD_OWVAR 2
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 2
37002: PUSH
37003: LD_INT 30
37005: PUSH
37006: LD_INT 0
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 30
37015: PUSH
37016: LD_INT 1
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: LIST
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PPUSH
37032: CALL_OW 69
37036: ST_TO_ADDR
// if not tmp then
37037: LD_VAR 0 4
37041: NOT
37042: IFFALSE 37046
// exit ;
37044: GO 37105
// for i in tmp do
37046: LD_ADDR_VAR 0 2
37050: PUSH
37051: LD_VAR 0 4
37055: PUSH
37056: FOR_IN
37057: IFFALSE 37103
// for j = 1 to 3 do
37059: LD_ADDR_VAR 0 3
37063: PUSH
37064: DOUBLE
37065: LD_INT 1
37067: DEC
37068: ST_TO_ADDR
37069: LD_INT 3
37071: PUSH
37072: FOR_TO
37073: IFFALSE 37099
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
37075: LD_VAR 0 2
37079: PPUSH
37080: CALL_OW 274
37084: PPUSH
37085: LD_VAR 0 3
37089: PPUSH
37090: LD_INT 99999
37092: PPUSH
37093: CALL_OW 277
37097: GO 37072
37099: POP
37100: POP
37101: GO 37056
37103: POP
37104: POP
// end ;
37105: LD_VAR 0 1
37109: RET
// export function hHackSetLevel10 ; var i , j ; begin
37110: LD_INT 0
37112: PPUSH
37113: PPUSH
37114: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
37115: LD_ADDR_VAR 0 2
37119: PUSH
37120: LD_INT 21
37122: PUSH
37123: LD_INT 1
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PPUSH
37130: CALL_OW 69
37134: PUSH
37135: FOR_IN
37136: IFFALSE 37188
// if IsSelected ( i ) then
37138: LD_VAR 0 2
37142: PPUSH
37143: CALL_OW 306
37147: IFFALSE 37186
// begin for j := 1 to 4 do
37149: LD_ADDR_VAR 0 3
37153: PUSH
37154: DOUBLE
37155: LD_INT 1
37157: DEC
37158: ST_TO_ADDR
37159: LD_INT 4
37161: PUSH
37162: FOR_TO
37163: IFFALSE 37184
// SetSkill ( i , j , 10 ) ;
37165: LD_VAR 0 2
37169: PPUSH
37170: LD_VAR 0 3
37174: PPUSH
37175: LD_INT 10
37177: PPUSH
37178: CALL_OW 237
37182: GO 37162
37184: POP
37185: POP
// end ;
37186: GO 37135
37188: POP
37189: POP
// end ;
37190: LD_VAR 0 1
37194: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
37195: LD_INT 0
37197: PPUSH
37198: PPUSH
37199: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
37200: LD_ADDR_VAR 0 2
37204: PUSH
37205: LD_INT 22
37207: PUSH
37208: LD_OWVAR 2
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 21
37219: PUSH
37220: LD_INT 1
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PPUSH
37231: CALL_OW 69
37235: PUSH
37236: FOR_IN
37237: IFFALSE 37278
// begin for j := 1 to 4 do
37239: LD_ADDR_VAR 0 3
37243: PUSH
37244: DOUBLE
37245: LD_INT 1
37247: DEC
37248: ST_TO_ADDR
37249: LD_INT 4
37251: PUSH
37252: FOR_TO
37253: IFFALSE 37274
// SetSkill ( i , j , 10 ) ;
37255: LD_VAR 0 2
37259: PPUSH
37260: LD_VAR 0 3
37264: PPUSH
37265: LD_INT 10
37267: PPUSH
37268: CALL_OW 237
37272: GO 37252
37274: POP
37275: POP
// end ;
37276: GO 37236
37278: POP
37279: POP
// end ;
37280: LD_VAR 0 1
37284: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
37285: LD_INT 0
37287: PPUSH
// uc_side := your_side ;
37288: LD_ADDR_OWVAR 20
37292: PUSH
37293: LD_OWVAR 2
37297: ST_TO_ADDR
// uc_nation := nation ;
37298: LD_ADDR_OWVAR 21
37302: PUSH
37303: LD_VAR 0 1
37307: ST_TO_ADDR
// InitHc ;
37308: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
37312: LD_INT 0
37314: PPUSH
37315: LD_VAR 0 2
37319: PPUSH
37320: LD_VAR 0 3
37324: PPUSH
37325: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
37329: LD_VAR 0 4
37333: PPUSH
37334: LD_VAR 0 5
37338: PPUSH
37339: CALL_OW 428
37343: PUSH
37344: LD_INT 0
37346: EQUAL
37347: IFFALSE 37371
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
37349: CALL_OW 44
37353: PPUSH
37354: LD_VAR 0 4
37358: PPUSH
37359: LD_VAR 0 5
37363: PPUSH
37364: LD_INT 1
37366: PPUSH
37367: CALL_OW 48
// end ;
37371: LD_VAR 0 6
37375: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
37376: LD_INT 0
37378: PPUSH
37379: PPUSH
// uc_side := your_side ;
37380: LD_ADDR_OWVAR 20
37384: PUSH
37385: LD_OWVAR 2
37389: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
37390: LD_VAR 0 1
37394: PUSH
37395: LD_INT 1
37397: PUSH
37398: LD_INT 2
37400: PUSH
37401: LD_INT 3
37403: PUSH
37404: LD_INT 4
37406: PUSH
37407: LD_INT 5
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: IN
37417: IFFALSE 37429
// uc_nation := nation_american else
37419: LD_ADDR_OWVAR 21
37423: PUSH
37424: LD_INT 1
37426: ST_TO_ADDR
37427: GO 37472
// if chassis in [ 11 , 12 , 13 , 14 ] then
37429: LD_VAR 0 1
37433: PUSH
37434: LD_INT 11
37436: PUSH
37437: LD_INT 12
37439: PUSH
37440: LD_INT 13
37442: PUSH
37443: LD_INT 14
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: IN
37452: IFFALSE 37464
// uc_nation := nation_arabian else
37454: LD_ADDR_OWVAR 21
37458: PUSH
37459: LD_INT 2
37461: ST_TO_ADDR
37462: GO 37472
// uc_nation := nation_russian ;
37464: LD_ADDR_OWVAR 21
37468: PUSH
37469: LD_INT 3
37471: ST_TO_ADDR
// vc_chassis := chassis ;
37472: LD_ADDR_OWVAR 37
37476: PUSH
37477: LD_VAR 0 1
37481: ST_TO_ADDR
// vc_engine := engine ;
37482: LD_ADDR_OWVAR 39
37486: PUSH
37487: LD_VAR 0 2
37491: ST_TO_ADDR
// vc_control := control ;
37492: LD_ADDR_OWVAR 38
37496: PUSH
37497: LD_VAR 0 3
37501: ST_TO_ADDR
// vc_weapon := weapon ;
37502: LD_ADDR_OWVAR 40
37506: PUSH
37507: LD_VAR 0 4
37511: ST_TO_ADDR
// un := CreateVehicle ;
37512: LD_ADDR_VAR 0 8
37516: PUSH
37517: CALL_OW 45
37521: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
37522: LD_VAR 0 8
37526: PPUSH
37527: LD_INT 0
37529: PPUSH
37530: LD_INT 5
37532: PPUSH
37533: CALL_OW 12
37537: PPUSH
37538: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
37542: LD_VAR 0 8
37546: PPUSH
37547: LD_VAR 0 5
37551: PPUSH
37552: LD_VAR 0 6
37556: PPUSH
37557: LD_INT 1
37559: PPUSH
37560: CALL_OW 48
// end ;
37564: LD_VAR 0 7
37568: RET
// export hInvincible ; every 1 do
37569: GO 37571
37571: DISABLE
// hInvincible := [ ] ;
37572: LD_ADDR_EXP 141
37576: PUSH
37577: EMPTY
37578: ST_TO_ADDR
37579: END
// every 10 do var i ;
37580: GO 37582
37582: DISABLE
37583: LD_INT 0
37585: PPUSH
// begin enable ;
37586: ENABLE
// if not hInvincible then
37587: LD_EXP 141
37591: NOT
37592: IFFALSE 37596
// exit ;
37594: GO 37640
// for i in hInvincible do
37596: LD_ADDR_VAR 0 1
37600: PUSH
37601: LD_EXP 141
37605: PUSH
37606: FOR_IN
37607: IFFALSE 37638
// if GetLives ( i ) < 1000 then
37609: LD_VAR 0 1
37613: PPUSH
37614: CALL_OW 256
37618: PUSH
37619: LD_INT 1000
37621: LESS
37622: IFFALSE 37636
// SetLives ( i , 1000 ) ;
37624: LD_VAR 0 1
37628: PPUSH
37629: LD_INT 1000
37631: PPUSH
37632: CALL_OW 234
37636: GO 37606
37638: POP
37639: POP
// end ;
37640: PPOPN 1
37642: END
// export function hHackInvincible ; var i ; begin
37643: LD_INT 0
37645: PPUSH
37646: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
37647: LD_ADDR_VAR 0 2
37651: PUSH
37652: LD_INT 2
37654: PUSH
37655: LD_INT 21
37657: PUSH
37658: LD_INT 1
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 21
37667: PUSH
37668: LD_INT 2
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: LIST
37679: PPUSH
37680: CALL_OW 69
37684: PUSH
37685: FOR_IN
37686: IFFALSE 37747
// if IsSelected ( i ) then
37688: LD_VAR 0 2
37692: PPUSH
37693: CALL_OW 306
37697: IFFALSE 37745
// begin if i in hInvincible then
37699: LD_VAR 0 2
37703: PUSH
37704: LD_EXP 141
37708: IN
37709: IFFALSE 37729
// hInvincible := hInvincible diff i else
37711: LD_ADDR_EXP 141
37715: PUSH
37716: LD_EXP 141
37720: PUSH
37721: LD_VAR 0 2
37725: DIFF
37726: ST_TO_ADDR
37727: GO 37745
// hInvincible := hInvincible union i ;
37729: LD_ADDR_EXP 141
37733: PUSH
37734: LD_EXP 141
37738: PUSH
37739: LD_VAR 0 2
37743: UNION
37744: ST_TO_ADDR
// end ;
37745: GO 37685
37747: POP
37748: POP
// end ;
37749: LD_VAR 0 1
37753: RET
// export function hHackInvisible ; var i , j ; begin
37754: LD_INT 0
37756: PPUSH
37757: PPUSH
37758: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
37759: LD_ADDR_VAR 0 2
37763: PUSH
37764: LD_INT 21
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PPUSH
37774: CALL_OW 69
37778: PUSH
37779: FOR_IN
37780: IFFALSE 37804
// if IsSelected ( i ) then
37782: LD_VAR 0 2
37786: PPUSH
37787: CALL_OW 306
37791: IFFALSE 37802
// ComForceInvisible ( i ) ;
37793: LD_VAR 0 2
37797: PPUSH
37798: CALL_OW 496
37802: GO 37779
37804: POP
37805: POP
// end ;
37806: LD_VAR 0 1
37810: RET
// export function hHackChangeYourSide ; begin
37811: LD_INT 0
37813: PPUSH
// if your_side = 8 then
37814: LD_OWVAR 2
37818: PUSH
37819: LD_INT 8
37821: EQUAL
37822: IFFALSE 37834
// your_side := 0 else
37824: LD_ADDR_OWVAR 2
37828: PUSH
37829: LD_INT 0
37831: ST_TO_ADDR
37832: GO 37848
// your_side := your_side + 1 ;
37834: LD_ADDR_OWVAR 2
37838: PUSH
37839: LD_OWVAR 2
37843: PUSH
37844: LD_INT 1
37846: PLUS
37847: ST_TO_ADDR
// end ;
37848: LD_VAR 0 1
37852: RET
// export function hHackChangeUnitSide ; var i , j ; begin
37853: LD_INT 0
37855: PPUSH
37856: PPUSH
37857: PPUSH
// for i in all_units do
37858: LD_ADDR_VAR 0 2
37862: PUSH
37863: LD_OWVAR 3
37867: PUSH
37868: FOR_IN
37869: IFFALSE 37947
// if IsSelected ( i ) then
37871: LD_VAR 0 2
37875: PPUSH
37876: CALL_OW 306
37880: IFFALSE 37945
// begin j := GetSide ( i ) ;
37882: LD_ADDR_VAR 0 3
37886: PUSH
37887: LD_VAR 0 2
37891: PPUSH
37892: CALL_OW 255
37896: ST_TO_ADDR
// if j = 8 then
37897: LD_VAR 0 3
37901: PUSH
37902: LD_INT 8
37904: EQUAL
37905: IFFALSE 37917
// j := 0 else
37907: LD_ADDR_VAR 0 3
37911: PUSH
37912: LD_INT 0
37914: ST_TO_ADDR
37915: GO 37931
// j := j + 1 ;
37917: LD_ADDR_VAR 0 3
37921: PUSH
37922: LD_VAR 0 3
37926: PUSH
37927: LD_INT 1
37929: PLUS
37930: ST_TO_ADDR
// SetSide ( i , j ) ;
37931: LD_VAR 0 2
37935: PPUSH
37936: LD_VAR 0 3
37940: PPUSH
37941: CALL_OW 235
// end ;
37945: GO 37868
37947: POP
37948: POP
// end ;
37949: LD_VAR 0 1
37953: RET
// export function hHackFog ; begin
37954: LD_INT 0
37956: PPUSH
// FogOff ( true ) ;
37957: LD_INT 1
37959: PPUSH
37960: CALL_OW 344
// end ;
37964: LD_VAR 0 1
37968: RET
// export function hHackTeleport ( unit , x , y ) ; begin
37969: LD_INT 0
37971: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
37972: LD_VAR 0 1
37976: PPUSH
37977: LD_VAR 0 2
37981: PPUSH
37982: LD_VAR 0 3
37986: PPUSH
37987: LD_INT 1
37989: PPUSH
37990: LD_INT 1
37992: PPUSH
37993: CALL_OW 483
// CenterOnXY ( x , y ) ;
37997: LD_VAR 0 2
38001: PPUSH
38002: LD_VAR 0 3
38006: PPUSH
38007: CALL_OW 84
// end ; end_of_file
38011: LD_VAR 0 4
38015: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
38016: LD_INT 0
38018: PPUSH
38019: PPUSH
38020: PPUSH
38021: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
38022: LD_VAR 0 1
38026: PPUSH
38027: CALL_OW 264
38031: PUSH
38032: LD_EXP 69
38036: EQUAL
38037: IFFALSE 38109
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
38039: LD_INT 68
38041: PPUSH
38042: LD_VAR 0 1
38046: PPUSH
38047: CALL_OW 255
38051: PPUSH
38052: CALL_OW 321
38056: PUSH
38057: LD_INT 2
38059: EQUAL
38060: IFFALSE 38072
// eff := 70 else
38062: LD_ADDR_VAR 0 4
38066: PUSH
38067: LD_INT 70
38069: ST_TO_ADDR
38070: GO 38080
// eff := 30 ;
38072: LD_ADDR_VAR 0 4
38076: PUSH
38077: LD_INT 30
38079: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
38080: LD_VAR 0 1
38084: PPUSH
38085: CALL_OW 250
38089: PPUSH
38090: LD_VAR 0 1
38094: PPUSH
38095: CALL_OW 251
38099: PPUSH
38100: LD_VAR 0 4
38104: PPUSH
38105: CALL_OW 495
// end ; end ;
38109: LD_VAR 0 2
38113: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
38114: LD_INT 0
38116: PPUSH
// end ;
38117: LD_VAR 0 4
38121: RET
// export function SOS_Command ( cmd ) ; begin
38122: LD_INT 0
38124: PPUSH
// end ;
38125: LD_VAR 0 2
38129: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
38130: LD_INT 0
38132: PPUSH
// end ;
38133: LD_VAR 0 6
38137: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
38138: LD_INT 0
38140: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
38141: LD_VAR 0 1
38145: PUSH
38146: LD_INT 250
38148: EQUAL
38149: PUSH
38150: LD_VAR 0 2
38154: PPUSH
38155: CALL_OW 264
38159: PUSH
38160: LD_EXP 72
38164: EQUAL
38165: AND
38166: IFFALSE 38187
// MinerPlaceMine ( unit , x , y ) ;
38168: LD_VAR 0 2
38172: PPUSH
38173: LD_VAR 0 4
38177: PPUSH
38178: LD_VAR 0 5
38182: PPUSH
38183: CALL 40536 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
38187: LD_VAR 0 1
38191: PUSH
38192: LD_INT 251
38194: EQUAL
38195: PUSH
38196: LD_VAR 0 2
38200: PPUSH
38201: CALL_OW 264
38205: PUSH
38206: LD_EXP 72
38210: EQUAL
38211: AND
38212: IFFALSE 38233
// MinerDetonateMine ( unit , x , y ) ;
38214: LD_VAR 0 2
38218: PPUSH
38219: LD_VAR 0 4
38223: PPUSH
38224: LD_VAR 0 5
38228: PPUSH
38229: CALL 40813 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
38233: LD_VAR 0 1
38237: PUSH
38238: LD_INT 252
38240: EQUAL
38241: PUSH
38242: LD_VAR 0 2
38246: PPUSH
38247: CALL_OW 264
38251: PUSH
38252: LD_EXP 72
38256: EQUAL
38257: AND
38258: IFFALSE 38279
// MinerCreateMinefield ( unit , x , y ) ;
38260: LD_VAR 0 2
38264: PPUSH
38265: LD_VAR 0 4
38269: PPUSH
38270: LD_VAR 0 5
38274: PPUSH
38275: CALL 41230 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
38279: LD_VAR 0 1
38283: PUSH
38284: LD_INT 253
38286: EQUAL
38287: PUSH
38288: LD_VAR 0 2
38292: PPUSH
38293: CALL_OW 257
38297: PUSH
38298: LD_INT 5
38300: EQUAL
38301: AND
38302: IFFALSE 38323
// ComBinocular ( unit , x , y ) ;
38304: LD_VAR 0 2
38308: PPUSH
38309: LD_VAR 0 4
38313: PPUSH
38314: LD_VAR 0 5
38318: PPUSH
38319: CALL 41601 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
38323: LD_VAR 0 1
38327: PUSH
38328: LD_INT 254
38330: EQUAL
38331: PUSH
38332: LD_VAR 0 2
38336: PPUSH
38337: CALL_OW 264
38341: PUSH
38342: LD_EXP 67
38346: EQUAL
38347: AND
38348: PUSH
38349: LD_VAR 0 3
38353: PPUSH
38354: CALL_OW 263
38358: PUSH
38359: LD_INT 3
38361: EQUAL
38362: AND
38363: IFFALSE 38379
// HackDestroyVehicle ( unit , selectedUnit ) ;
38365: LD_VAR 0 2
38369: PPUSH
38370: LD_VAR 0 3
38374: PPUSH
38375: CALL 39896 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
38379: LD_VAR 0 1
38383: PUSH
38384: LD_INT 255
38386: EQUAL
38387: PUSH
38388: LD_VAR 0 2
38392: PPUSH
38393: CALL_OW 264
38397: PUSH
38398: LD_INT 14
38400: PUSH
38401: LD_INT 53
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: IN
38408: AND
38409: PUSH
38410: LD_VAR 0 4
38414: PPUSH
38415: LD_VAR 0 5
38419: PPUSH
38420: CALL_OW 488
38424: AND
38425: IFFALSE 38449
// CutTreeXYR ( unit , x , y , 12 ) ;
38427: LD_VAR 0 2
38431: PPUSH
38432: LD_VAR 0 4
38436: PPUSH
38437: LD_VAR 0 5
38441: PPUSH
38442: LD_INT 12
38444: PPUSH
38445: CALL 38462 0 4
// end ;
38449: LD_VAR 0 6
38453: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
38454: LD_INT 0
38456: PPUSH
// end ;
38457: LD_VAR 0 4
38461: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
38462: LD_INT 0
38464: PPUSH
38465: PPUSH
38466: PPUSH
38467: PPUSH
38468: PPUSH
38469: PPUSH
38470: PPUSH
38471: PPUSH
38472: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
38473: LD_VAR 0 1
38477: NOT
38478: PUSH
38479: LD_VAR 0 2
38483: PPUSH
38484: LD_VAR 0 3
38488: PPUSH
38489: CALL_OW 488
38493: NOT
38494: OR
38495: PUSH
38496: LD_VAR 0 4
38500: NOT
38501: OR
38502: IFFALSE 38506
// exit ;
38504: GO 38846
// list := [ ] ;
38506: LD_ADDR_VAR 0 13
38510: PUSH
38511: EMPTY
38512: ST_TO_ADDR
// if x - r < 0 then
38513: LD_VAR 0 2
38517: PUSH
38518: LD_VAR 0 4
38522: MINUS
38523: PUSH
38524: LD_INT 0
38526: LESS
38527: IFFALSE 38539
// min_x := 0 else
38529: LD_ADDR_VAR 0 7
38533: PUSH
38534: LD_INT 0
38536: ST_TO_ADDR
38537: GO 38555
// min_x := x - r ;
38539: LD_ADDR_VAR 0 7
38543: PUSH
38544: LD_VAR 0 2
38548: PUSH
38549: LD_VAR 0 4
38553: MINUS
38554: ST_TO_ADDR
// if y - r < 0 then
38555: LD_VAR 0 3
38559: PUSH
38560: LD_VAR 0 4
38564: MINUS
38565: PUSH
38566: LD_INT 0
38568: LESS
38569: IFFALSE 38581
// min_y := 0 else
38571: LD_ADDR_VAR 0 8
38575: PUSH
38576: LD_INT 0
38578: ST_TO_ADDR
38579: GO 38597
// min_y := y - r ;
38581: LD_ADDR_VAR 0 8
38585: PUSH
38586: LD_VAR 0 3
38590: PUSH
38591: LD_VAR 0 4
38595: MINUS
38596: ST_TO_ADDR
// max_x := x + r ;
38597: LD_ADDR_VAR 0 9
38601: PUSH
38602: LD_VAR 0 2
38606: PUSH
38607: LD_VAR 0 4
38611: PLUS
38612: ST_TO_ADDR
// max_y := y + r ;
38613: LD_ADDR_VAR 0 10
38617: PUSH
38618: LD_VAR 0 3
38622: PUSH
38623: LD_VAR 0 4
38627: PLUS
38628: ST_TO_ADDR
// for _x = min_x to max_x do
38629: LD_ADDR_VAR 0 11
38633: PUSH
38634: DOUBLE
38635: LD_VAR 0 7
38639: DEC
38640: ST_TO_ADDR
38641: LD_VAR 0 9
38645: PUSH
38646: FOR_TO
38647: IFFALSE 38764
// for _y = min_y to max_y do
38649: LD_ADDR_VAR 0 12
38653: PUSH
38654: DOUBLE
38655: LD_VAR 0 8
38659: DEC
38660: ST_TO_ADDR
38661: LD_VAR 0 10
38665: PUSH
38666: FOR_TO
38667: IFFALSE 38760
// begin if not ValidHex ( _x , _y ) then
38669: LD_VAR 0 11
38673: PPUSH
38674: LD_VAR 0 12
38678: PPUSH
38679: CALL_OW 488
38683: NOT
38684: IFFALSE 38688
// continue ;
38686: GO 38666
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38688: LD_VAR 0 11
38692: PPUSH
38693: LD_VAR 0 12
38697: PPUSH
38698: CALL_OW 351
38702: PUSH
38703: LD_VAR 0 11
38707: PPUSH
38708: LD_VAR 0 12
38712: PPUSH
38713: CALL_OW 554
38717: AND
38718: IFFALSE 38758
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38720: LD_ADDR_VAR 0 13
38724: PUSH
38725: LD_VAR 0 13
38729: PPUSH
38730: LD_VAR 0 13
38734: PUSH
38735: LD_INT 1
38737: PLUS
38738: PPUSH
38739: LD_VAR 0 11
38743: PUSH
38744: LD_VAR 0 12
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PPUSH
38753: CALL_OW 2
38757: ST_TO_ADDR
// end ;
38758: GO 38666
38760: POP
38761: POP
38762: GO 38646
38764: POP
38765: POP
// if not list then
38766: LD_VAR 0 13
38770: NOT
38771: IFFALSE 38775
// exit ;
38773: GO 38846
// for i in list do
38775: LD_ADDR_VAR 0 6
38779: PUSH
38780: LD_VAR 0 13
38784: PUSH
38785: FOR_IN
38786: IFFALSE 38844
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
38788: LD_VAR 0 1
38792: PPUSH
38793: LD_STRING M
38795: PUSH
38796: LD_VAR 0 6
38800: PUSH
38801: LD_INT 1
38803: ARRAY
38804: PUSH
38805: LD_VAR 0 6
38809: PUSH
38810: LD_INT 2
38812: ARRAY
38813: PUSH
38814: LD_INT 0
38816: PUSH
38817: LD_INT 0
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: LD_INT 0
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: PUSH
38835: EMPTY
38836: LIST
38837: PPUSH
38838: CALL_OW 447
38842: GO 38785
38844: POP
38845: POP
// end ;
38846: LD_VAR 0 5
38850: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38851: LD_EXP 144
38855: NOT
38856: IFFALSE 38906
38858: GO 38860
38860: DISABLE
// begin initHack := true ;
38861: LD_ADDR_EXP 144
38865: PUSH
38866: LD_INT 1
38868: ST_TO_ADDR
// hackTanks := [ ] ;
38869: LD_ADDR_EXP 145
38873: PUSH
38874: EMPTY
38875: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38876: LD_ADDR_EXP 146
38880: PUSH
38881: EMPTY
38882: ST_TO_ADDR
// hackLimit := 3 ;
38883: LD_ADDR_EXP 147
38887: PUSH
38888: LD_INT 3
38890: ST_TO_ADDR
// hackDist := 12 ;
38891: LD_ADDR_EXP 148
38895: PUSH
38896: LD_INT 12
38898: ST_TO_ADDR
// hackCounter := [ ] ;
38899: LD_ADDR_EXP 149
38903: PUSH
38904: EMPTY
38905: ST_TO_ADDR
// end ;
38906: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38907: LD_EXP 144
38911: PUSH
38912: LD_INT 34
38914: PUSH
38915: LD_EXP 67
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PPUSH
38924: CALL_OW 69
38928: AND
38929: IFFALSE 39184
38931: GO 38933
38933: DISABLE
38934: LD_INT 0
38936: PPUSH
38937: PPUSH
// begin enable ;
38938: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38939: LD_ADDR_VAR 0 1
38943: PUSH
38944: LD_INT 34
38946: PUSH
38947: LD_EXP 67
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PPUSH
38956: CALL_OW 69
38960: PUSH
38961: FOR_IN
38962: IFFALSE 39182
// begin if not i in hackTanks then
38964: LD_VAR 0 1
38968: PUSH
38969: LD_EXP 145
38973: IN
38974: NOT
38975: IFFALSE 39058
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38977: LD_ADDR_EXP 145
38981: PUSH
38982: LD_EXP 145
38986: PPUSH
38987: LD_EXP 145
38991: PUSH
38992: LD_INT 1
38994: PLUS
38995: PPUSH
38996: LD_VAR 0 1
39000: PPUSH
39001: CALL_OW 1
39005: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
39006: LD_ADDR_EXP 146
39010: PUSH
39011: LD_EXP 146
39015: PPUSH
39016: LD_EXP 146
39020: PUSH
39021: LD_INT 1
39023: PLUS
39024: PPUSH
39025: EMPTY
39026: PPUSH
39027: CALL_OW 1
39031: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
39032: LD_ADDR_EXP 149
39036: PUSH
39037: LD_EXP 149
39041: PPUSH
39042: LD_EXP 149
39046: PUSH
39047: LD_INT 1
39049: PLUS
39050: PPUSH
39051: EMPTY
39052: PPUSH
39053: CALL_OW 1
39057: ST_TO_ADDR
// end ; if not IsOk ( i ) then
39058: LD_VAR 0 1
39062: PPUSH
39063: CALL_OW 302
39067: NOT
39068: IFFALSE 39081
// begin HackUnlinkAll ( i ) ;
39070: LD_VAR 0 1
39074: PPUSH
39075: CALL 39187 0 1
// continue ;
39079: GO 38961
// end ; HackCheckCapturedStatus ( i ) ;
39081: LD_VAR 0 1
39085: PPUSH
39086: CALL 39630 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
39090: LD_ADDR_VAR 0 2
39094: PUSH
39095: LD_INT 81
39097: PUSH
39098: LD_VAR 0 1
39102: PPUSH
39103: CALL_OW 255
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 33
39114: PUSH
39115: LD_INT 3
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 91
39124: PUSH
39125: LD_VAR 0 1
39129: PUSH
39130: LD_EXP 148
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 50
39142: PUSH
39143: EMPTY
39144: LIST
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: PPUSH
39152: CALL_OW 69
39156: ST_TO_ADDR
// if not tmp then
39157: LD_VAR 0 2
39161: NOT
39162: IFFALSE 39166
// continue ;
39164: GO 38961
// HackLink ( i , tmp ) ;
39166: LD_VAR 0 1
39170: PPUSH
39171: LD_VAR 0 2
39175: PPUSH
39176: CALL 39323 0 2
// end ;
39180: GO 38961
39182: POP
39183: POP
// end ;
39184: PPOPN 2
39186: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
39187: LD_INT 0
39189: PPUSH
39190: PPUSH
39191: PPUSH
// if not hack in hackTanks then
39192: LD_VAR 0 1
39196: PUSH
39197: LD_EXP 145
39201: IN
39202: NOT
39203: IFFALSE 39207
// exit ;
39205: GO 39318
// index := GetElementIndex ( hackTanks , hack ) ;
39207: LD_ADDR_VAR 0 4
39211: PUSH
39212: LD_EXP 145
39216: PPUSH
39217: LD_VAR 0 1
39221: PPUSH
39222: CALL 46792 0 2
39226: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
39227: LD_EXP 146
39231: PUSH
39232: LD_VAR 0 4
39236: ARRAY
39237: IFFALSE 39318
// begin for i in hackTanksCaptured [ index ] do
39239: LD_ADDR_VAR 0 3
39243: PUSH
39244: LD_EXP 146
39248: PUSH
39249: LD_VAR 0 4
39253: ARRAY
39254: PUSH
39255: FOR_IN
39256: IFFALSE 39282
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
39258: LD_VAR 0 3
39262: PUSH
39263: LD_INT 1
39265: ARRAY
39266: PPUSH
39267: LD_VAR 0 3
39271: PUSH
39272: LD_INT 2
39274: ARRAY
39275: PPUSH
39276: CALL_OW 235
39280: GO 39255
39282: POP
39283: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
39284: LD_ADDR_EXP 146
39288: PUSH
39289: LD_EXP 146
39293: PPUSH
39294: LD_VAR 0 4
39298: PPUSH
39299: EMPTY
39300: PPUSH
39301: CALL_OW 1
39305: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
39306: LD_VAR 0 1
39310: PPUSH
39311: LD_INT 0
39313: PPUSH
39314: CALL_OW 505
// end ; end ;
39318: LD_VAR 0 2
39322: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
39323: LD_INT 0
39325: PPUSH
39326: PPUSH
39327: PPUSH
// if not hack in hackTanks or not vehicles then
39328: LD_VAR 0 1
39332: PUSH
39333: LD_EXP 145
39337: IN
39338: NOT
39339: PUSH
39340: LD_VAR 0 2
39344: NOT
39345: OR
39346: IFFALSE 39350
// exit ;
39348: GO 39625
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
39350: LD_ADDR_VAR 0 2
39354: PUSH
39355: LD_VAR 0 1
39359: PPUSH
39360: LD_VAR 0 2
39364: PPUSH
39365: LD_INT 1
39367: PPUSH
39368: LD_INT 1
39370: PPUSH
39371: CALL 47442 0 4
39375: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
39376: LD_ADDR_VAR 0 5
39380: PUSH
39381: LD_EXP 145
39385: PPUSH
39386: LD_VAR 0 1
39390: PPUSH
39391: CALL 46792 0 2
39395: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
39396: LD_EXP 146
39400: PUSH
39401: LD_VAR 0 5
39405: ARRAY
39406: PUSH
39407: LD_EXP 147
39411: LESS
39412: IFFALSE 39601
// begin for i := 1 to vehicles do
39414: LD_ADDR_VAR 0 4
39418: PUSH
39419: DOUBLE
39420: LD_INT 1
39422: DEC
39423: ST_TO_ADDR
39424: LD_VAR 0 2
39428: PUSH
39429: FOR_TO
39430: IFFALSE 39599
// begin if hackTanksCaptured [ index ] = hackLimit then
39432: LD_EXP 146
39436: PUSH
39437: LD_VAR 0 5
39441: ARRAY
39442: PUSH
39443: LD_EXP 147
39447: EQUAL
39448: IFFALSE 39452
// break ;
39450: GO 39599
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
39452: LD_ADDR_EXP 149
39456: PUSH
39457: LD_EXP 149
39461: PPUSH
39462: LD_VAR 0 5
39466: PPUSH
39467: LD_EXP 149
39471: PUSH
39472: LD_VAR 0 5
39476: ARRAY
39477: PUSH
39478: LD_INT 1
39480: PLUS
39481: PPUSH
39482: CALL_OW 1
39486: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
39487: LD_ADDR_EXP 146
39491: PUSH
39492: LD_EXP 146
39496: PPUSH
39497: LD_VAR 0 5
39501: PUSH
39502: LD_EXP 146
39506: PUSH
39507: LD_VAR 0 5
39511: ARRAY
39512: PUSH
39513: LD_INT 1
39515: PLUS
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PPUSH
39521: LD_VAR 0 2
39525: PUSH
39526: LD_VAR 0 4
39530: ARRAY
39531: PUSH
39532: LD_VAR 0 2
39536: PUSH
39537: LD_VAR 0 4
39541: ARRAY
39542: PPUSH
39543: CALL_OW 255
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PPUSH
39552: CALL 47007 0 3
39556: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
39557: LD_VAR 0 2
39561: PUSH
39562: LD_VAR 0 4
39566: ARRAY
39567: PPUSH
39568: LD_VAR 0 1
39572: PPUSH
39573: CALL_OW 255
39577: PPUSH
39578: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
39582: LD_VAR 0 2
39586: PUSH
39587: LD_VAR 0 4
39591: ARRAY
39592: PPUSH
39593: CALL_OW 141
// end ;
39597: GO 39429
39599: POP
39600: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39601: LD_VAR 0 1
39605: PPUSH
39606: LD_EXP 146
39610: PUSH
39611: LD_VAR 0 5
39615: ARRAY
39616: PUSH
39617: LD_INT 0
39619: PLUS
39620: PPUSH
39621: CALL_OW 505
// end ;
39625: LD_VAR 0 3
39629: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
39630: LD_INT 0
39632: PPUSH
39633: PPUSH
39634: PPUSH
39635: PPUSH
// if not hack in hackTanks then
39636: LD_VAR 0 1
39640: PUSH
39641: LD_EXP 145
39645: IN
39646: NOT
39647: IFFALSE 39651
// exit ;
39649: GO 39891
// index := GetElementIndex ( hackTanks , hack ) ;
39651: LD_ADDR_VAR 0 4
39655: PUSH
39656: LD_EXP 145
39660: PPUSH
39661: LD_VAR 0 1
39665: PPUSH
39666: CALL 46792 0 2
39670: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39671: LD_ADDR_VAR 0 3
39675: PUSH
39676: DOUBLE
39677: LD_EXP 146
39681: PUSH
39682: LD_VAR 0 4
39686: ARRAY
39687: INC
39688: ST_TO_ADDR
39689: LD_INT 1
39691: PUSH
39692: FOR_DOWNTO
39693: IFFALSE 39865
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39695: LD_ADDR_VAR 0 5
39699: PUSH
39700: LD_EXP 146
39704: PUSH
39705: LD_VAR 0 4
39709: ARRAY
39710: PUSH
39711: LD_VAR 0 3
39715: ARRAY
39716: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39717: LD_VAR 0 5
39721: PUSH
39722: LD_INT 1
39724: ARRAY
39725: PPUSH
39726: CALL_OW 302
39730: NOT
39731: PUSH
39732: LD_VAR 0 5
39736: PUSH
39737: LD_INT 1
39739: ARRAY
39740: PPUSH
39741: CALL_OW 255
39745: PUSH
39746: LD_VAR 0 1
39750: PPUSH
39751: CALL_OW 255
39755: NONEQUAL
39756: OR
39757: IFFALSE 39863
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39759: LD_VAR 0 5
39763: PUSH
39764: LD_INT 1
39766: ARRAY
39767: PPUSH
39768: CALL_OW 305
39772: PUSH
39773: LD_VAR 0 5
39777: PUSH
39778: LD_INT 1
39780: ARRAY
39781: PPUSH
39782: CALL_OW 255
39786: PUSH
39787: LD_VAR 0 1
39791: PPUSH
39792: CALL_OW 255
39796: EQUAL
39797: AND
39798: IFFALSE 39822
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39800: LD_VAR 0 5
39804: PUSH
39805: LD_INT 1
39807: ARRAY
39808: PPUSH
39809: LD_VAR 0 5
39813: PUSH
39814: LD_INT 2
39816: ARRAY
39817: PPUSH
39818: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39822: LD_ADDR_EXP 146
39826: PUSH
39827: LD_EXP 146
39831: PPUSH
39832: LD_VAR 0 4
39836: PPUSH
39837: LD_EXP 146
39841: PUSH
39842: LD_VAR 0 4
39846: ARRAY
39847: PPUSH
39848: LD_VAR 0 3
39852: PPUSH
39853: CALL_OW 3
39857: PPUSH
39858: CALL_OW 1
39862: ST_TO_ADDR
// end ; end ;
39863: GO 39692
39865: POP
39866: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39867: LD_VAR 0 1
39871: PPUSH
39872: LD_EXP 146
39876: PUSH
39877: LD_VAR 0 4
39881: ARRAY
39882: PUSH
39883: LD_INT 0
39885: PLUS
39886: PPUSH
39887: CALL_OW 505
// end ;
39891: LD_VAR 0 2
39895: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39896: LD_INT 0
39898: PPUSH
39899: PPUSH
39900: PPUSH
39901: PPUSH
// if not hack in hackTanks then
39902: LD_VAR 0 1
39906: PUSH
39907: LD_EXP 145
39911: IN
39912: NOT
39913: IFFALSE 39917
// exit ;
39915: GO 40002
// index := GetElementIndex ( hackTanks , hack ) ;
39917: LD_ADDR_VAR 0 5
39921: PUSH
39922: LD_EXP 145
39926: PPUSH
39927: LD_VAR 0 1
39931: PPUSH
39932: CALL 46792 0 2
39936: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39937: LD_ADDR_VAR 0 4
39941: PUSH
39942: DOUBLE
39943: LD_INT 1
39945: DEC
39946: ST_TO_ADDR
39947: LD_EXP 146
39951: PUSH
39952: LD_VAR 0 5
39956: ARRAY
39957: PUSH
39958: FOR_TO
39959: IFFALSE 40000
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39961: LD_EXP 146
39965: PUSH
39966: LD_VAR 0 5
39970: ARRAY
39971: PUSH
39972: LD_VAR 0 4
39976: ARRAY
39977: PUSH
39978: LD_INT 1
39980: ARRAY
39981: PUSH
39982: LD_VAR 0 2
39986: EQUAL
39987: IFFALSE 39998
// KillUnit ( vehicle ) ;
39989: LD_VAR 0 2
39993: PPUSH
39994: CALL_OW 66
39998: GO 39958
40000: POP
40001: POP
// end ;
40002: LD_VAR 0 3
40006: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
40007: LD_EXP 150
40011: NOT
40012: IFFALSE 40047
40014: GO 40016
40016: DISABLE
// begin initMiner := true ;
40017: LD_ADDR_EXP 150
40021: PUSH
40022: LD_INT 1
40024: ST_TO_ADDR
// minersList := [ ] ;
40025: LD_ADDR_EXP 151
40029: PUSH
40030: EMPTY
40031: ST_TO_ADDR
// minerMinesList := [ ] ;
40032: LD_ADDR_EXP 152
40036: PUSH
40037: EMPTY
40038: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
40039: LD_ADDR_EXP 153
40043: PUSH
40044: LD_INT 5
40046: ST_TO_ADDR
// end ;
40047: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
40048: LD_EXP 150
40052: PUSH
40053: LD_INT 34
40055: PUSH
40056: LD_EXP 72
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PPUSH
40065: CALL_OW 69
40069: AND
40070: IFFALSE 40533
40072: GO 40074
40074: DISABLE
40075: LD_INT 0
40077: PPUSH
40078: PPUSH
40079: PPUSH
40080: PPUSH
// begin enable ;
40081: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
40082: LD_ADDR_VAR 0 1
40086: PUSH
40087: LD_INT 34
40089: PUSH
40090: LD_EXP 72
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PPUSH
40099: CALL_OW 69
40103: PUSH
40104: FOR_IN
40105: IFFALSE 40177
// begin if not i in minersList then
40107: LD_VAR 0 1
40111: PUSH
40112: LD_EXP 151
40116: IN
40117: NOT
40118: IFFALSE 40175
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
40120: LD_ADDR_EXP 151
40124: PUSH
40125: LD_EXP 151
40129: PPUSH
40130: LD_EXP 151
40134: PUSH
40135: LD_INT 1
40137: PLUS
40138: PPUSH
40139: LD_VAR 0 1
40143: PPUSH
40144: CALL_OW 1
40148: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
40149: LD_ADDR_EXP 152
40153: PUSH
40154: LD_EXP 152
40158: PPUSH
40159: LD_EXP 152
40163: PUSH
40164: LD_INT 1
40166: PLUS
40167: PPUSH
40168: EMPTY
40169: PPUSH
40170: CALL_OW 1
40174: ST_TO_ADDR
// end end ;
40175: GO 40104
40177: POP
40178: POP
// for i := minerMinesList downto 1 do
40179: LD_ADDR_VAR 0 1
40183: PUSH
40184: DOUBLE
40185: LD_EXP 152
40189: INC
40190: ST_TO_ADDR
40191: LD_INT 1
40193: PUSH
40194: FOR_DOWNTO
40195: IFFALSE 40531
// begin if IsLive ( minersList [ i ] ) then
40197: LD_EXP 151
40201: PUSH
40202: LD_VAR 0 1
40206: ARRAY
40207: PPUSH
40208: CALL_OW 300
40212: IFFALSE 40240
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
40214: LD_EXP 151
40218: PUSH
40219: LD_VAR 0 1
40223: ARRAY
40224: PPUSH
40225: LD_EXP 152
40229: PUSH
40230: LD_VAR 0 1
40234: ARRAY
40235: PPUSH
40236: CALL_OW 505
// if not minerMinesList [ i ] then
40240: LD_EXP 152
40244: PUSH
40245: LD_VAR 0 1
40249: ARRAY
40250: NOT
40251: IFFALSE 40255
// continue ;
40253: GO 40194
// for j := minerMinesList [ i ] downto 1 do
40255: LD_ADDR_VAR 0 2
40259: PUSH
40260: DOUBLE
40261: LD_EXP 152
40265: PUSH
40266: LD_VAR 0 1
40270: ARRAY
40271: INC
40272: ST_TO_ADDR
40273: LD_INT 1
40275: PUSH
40276: FOR_DOWNTO
40277: IFFALSE 40527
// begin side := GetSide ( minersList [ i ] ) ;
40279: LD_ADDR_VAR 0 3
40283: PUSH
40284: LD_EXP 151
40288: PUSH
40289: LD_VAR 0 1
40293: ARRAY
40294: PPUSH
40295: CALL_OW 255
40299: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
40300: LD_ADDR_VAR 0 4
40304: PUSH
40305: LD_EXP 152
40309: PUSH
40310: LD_VAR 0 1
40314: ARRAY
40315: PUSH
40316: LD_VAR 0 2
40320: ARRAY
40321: PUSH
40322: LD_INT 1
40324: ARRAY
40325: PPUSH
40326: LD_EXP 152
40330: PUSH
40331: LD_VAR 0 1
40335: ARRAY
40336: PUSH
40337: LD_VAR 0 2
40341: ARRAY
40342: PUSH
40343: LD_INT 2
40345: ARRAY
40346: PPUSH
40347: CALL_OW 428
40351: ST_TO_ADDR
// if not tmp then
40352: LD_VAR 0 4
40356: NOT
40357: IFFALSE 40361
// continue ;
40359: GO 40276
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
40361: LD_VAR 0 4
40365: PUSH
40366: LD_INT 81
40368: PUSH
40369: LD_VAR 0 3
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PPUSH
40378: CALL_OW 69
40382: IN
40383: PUSH
40384: LD_EXP 152
40388: PUSH
40389: LD_VAR 0 1
40393: ARRAY
40394: PUSH
40395: LD_VAR 0 2
40399: ARRAY
40400: PUSH
40401: LD_INT 1
40403: ARRAY
40404: PPUSH
40405: LD_EXP 152
40409: PUSH
40410: LD_VAR 0 1
40414: ARRAY
40415: PUSH
40416: LD_VAR 0 2
40420: ARRAY
40421: PUSH
40422: LD_INT 2
40424: ARRAY
40425: PPUSH
40426: CALL_OW 458
40430: AND
40431: IFFALSE 40525
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
40433: LD_EXP 152
40437: PUSH
40438: LD_VAR 0 1
40442: ARRAY
40443: PUSH
40444: LD_VAR 0 2
40448: ARRAY
40449: PUSH
40450: LD_INT 1
40452: ARRAY
40453: PPUSH
40454: LD_EXP 152
40458: PUSH
40459: LD_VAR 0 1
40463: ARRAY
40464: PUSH
40465: LD_VAR 0 2
40469: ARRAY
40470: PUSH
40471: LD_INT 2
40473: ARRAY
40474: PPUSH
40475: LD_VAR 0 3
40479: PPUSH
40480: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40484: LD_ADDR_EXP 152
40488: PUSH
40489: LD_EXP 152
40493: PPUSH
40494: LD_VAR 0 1
40498: PPUSH
40499: LD_EXP 152
40503: PUSH
40504: LD_VAR 0 1
40508: ARRAY
40509: PPUSH
40510: LD_VAR 0 2
40514: PPUSH
40515: CALL_OW 3
40519: PPUSH
40520: CALL_OW 1
40524: ST_TO_ADDR
// end ; end ;
40525: GO 40276
40527: POP
40528: POP
// end ;
40529: GO 40194
40531: POP
40532: POP
// end ;
40533: PPOPN 4
40535: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
40536: LD_INT 0
40538: PPUSH
40539: PPUSH
// result := false ;
40540: LD_ADDR_VAR 0 4
40544: PUSH
40545: LD_INT 0
40547: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
40548: LD_VAR 0 1
40552: PPUSH
40553: CALL_OW 264
40557: PUSH
40558: LD_EXP 72
40562: EQUAL
40563: NOT
40564: IFFALSE 40568
// exit ;
40566: GO 40808
// index := GetElementIndex ( minersList , unit ) ;
40568: LD_ADDR_VAR 0 5
40572: PUSH
40573: LD_EXP 151
40577: PPUSH
40578: LD_VAR 0 1
40582: PPUSH
40583: CALL 46792 0 2
40587: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
40588: LD_EXP 152
40592: PUSH
40593: LD_VAR 0 5
40597: ARRAY
40598: PUSH
40599: LD_EXP 153
40603: GREATEREQUAL
40604: IFFALSE 40608
// exit ;
40606: GO 40808
// ComMoveXY ( unit , x , y ) ;
40608: LD_VAR 0 1
40612: PPUSH
40613: LD_VAR 0 2
40617: PPUSH
40618: LD_VAR 0 3
40622: PPUSH
40623: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40627: LD_INT 35
40629: PPUSH
40630: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
40634: LD_VAR 0 1
40638: PPUSH
40639: LD_VAR 0 2
40643: PPUSH
40644: LD_VAR 0 3
40648: PPUSH
40649: CALL 77564 0 3
40653: NOT
40654: PUSH
40655: LD_VAR 0 1
40659: PPUSH
40660: CALL_OW 314
40664: AND
40665: IFFALSE 40669
// exit ;
40667: GO 40808
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40669: LD_VAR 0 2
40673: PPUSH
40674: LD_VAR 0 3
40678: PPUSH
40679: CALL_OW 428
40683: PUSH
40684: LD_VAR 0 1
40688: EQUAL
40689: PUSH
40690: LD_VAR 0 1
40694: PPUSH
40695: CALL_OW 314
40699: NOT
40700: AND
40701: IFFALSE 40627
// PlaySoundXY ( x , y , PlantMine ) ;
40703: LD_VAR 0 2
40707: PPUSH
40708: LD_VAR 0 3
40712: PPUSH
40713: LD_STRING PlantMine
40715: PPUSH
40716: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
40720: LD_VAR 0 2
40724: PPUSH
40725: LD_VAR 0 3
40729: PPUSH
40730: LD_VAR 0 1
40734: PPUSH
40735: CALL_OW 255
40739: PPUSH
40740: LD_INT 0
40742: PPUSH
40743: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40747: LD_ADDR_EXP 152
40751: PUSH
40752: LD_EXP 152
40756: PPUSH
40757: LD_VAR 0 5
40761: PUSH
40762: LD_EXP 152
40766: PUSH
40767: LD_VAR 0 5
40771: ARRAY
40772: PUSH
40773: LD_INT 1
40775: PLUS
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PPUSH
40781: LD_VAR 0 2
40785: PUSH
40786: LD_VAR 0 3
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PPUSH
40795: CALL 47007 0 3
40799: ST_TO_ADDR
// result := true ;
40800: LD_ADDR_VAR 0 4
40804: PUSH
40805: LD_INT 1
40807: ST_TO_ADDR
// end ;
40808: LD_VAR 0 4
40812: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40813: LD_INT 0
40815: PPUSH
40816: PPUSH
40817: PPUSH
// if not unit in minersList then
40818: LD_VAR 0 1
40822: PUSH
40823: LD_EXP 151
40827: IN
40828: NOT
40829: IFFALSE 40833
// exit ;
40831: GO 41225
// index := GetElementIndex ( minersList , unit ) ;
40833: LD_ADDR_VAR 0 6
40837: PUSH
40838: LD_EXP 151
40842: PPUSH
40843: LD_VAR 0 1
40847: PPUSH
40848: CALL 46792 0 2
40852: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40853: LD_ADDR_VAR 0 5
40857: PUSH
40858: DOUBLE
40859: LD_EXP 152
40863: PUSH
40864: LD_VAR 0 6
40868: ARRAY
40869: INC
40870: ST_TO_ADDR
40871: LD_INT 1
40873: PUSH
40874: FOR_DOWNTO
40875: IFFALSE 41036
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40877: LD_EXP 152
40881: PUSH
40882: LD_VAR 0 6
40886: ARRAY
40887: PUSH
40888: LD_VAR 0 5
40892: ARRAY
40893: PUSH
40894: LD_INT 1
40896: ARRAY
40897: PUSH
40898: LD_VAR 0 2
40902: EQUAL
40903: PUSH
40904: LD_EXP 152
40908: PUSH
40909: LD_VAR 0 6
40913: ARRAY
40914: PUSH
40915: LD_VAR 0 5
40919: ARRAY
40920: PUSH
40921: LD_INT 2
40923: ARRAY
40924: PUSH
40925: LD_VAR 0 3
40929: EQUAL
40930: AND
40931: IFFALSE 41034
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40933: LD_EXP 152
40937: PUSH
40938: LD_VAR 0 6
40942: ARRAY
40943: PUSH
40944: LD_VAR 0 5
40948: ARRAY
40949: PUSH
40950: LD_INT 1
40952: ARRAY
40953: PPUSH
40954: LD_EXP 152
40958: PUSH
40959: LD_VAR 0 6
40963: ARRAY
40964: PUSH
40965: LD_VAR 0 5
40969: ARRAY
40970: PUSH
40971: LD_INT 2
40973: ARRAY
40974: PPUSH
40975: LD_VAR 0 1
40979: PPUSH
40980: CALL_OW 255
40984: PPUSH
40985: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40989: LD_ADDR_EXP 152
40993: PUSH
40994: LD_EXP 152
40998: PPUSH
40999: LD_VAR 0 6
41003: PPUSH
41004: LD_EXP 152
41008: PUSH
41009: LD_VAR 0 6
41013: ARRAY
41014: PPUSH
41015: LD_VAR 0 5
41019: PPUSH
41020: CALL_OW 3
41024: PPUSH
41025: CALL_OW 1
41029: ST_TO_ADDR
// exit ;
41030: POP
41031: POP
41032: GO 41225
// end ; end ;
41034: GO 40874
41036: POP
41037: POP
// for i := minerMinesList [ index ] downto 1 do
41038: LD_ADDR_VAR 0 5
41042: PUSH
41043: DOUBLE
41044: LD_EXP 152
41048: PUSH
41049: LD_VAR 0 6
41053: ARRAY
41054: INC
41055: ST_TO_ADDR
41056: LD_INT 1
41058: PUSH
41059: FOR_DOWNTO
41060: IFFALSE 41223
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
41062: LD_EXP 152
41066: PUSH
41067: LD_VAR 0 6
41071: ARRAY
41072: PUSH
41073: LD_VAR 0 5
41077: ARRAY
41078: PUSH
41079: LD_INT 1
41081: ARRAY
41082: PPUSH
41083: LD_EXP 152
41087: PUSH
41088: LD_VAR 0 6
41092: ARRAY
41093: PUSH
41094: LD_VAR 0 5
41098: ARRAY
41099: PUSH
41100: LD_INT 2
41102: ARRAY
41103: PPUSH
41104: LD_VAR 0 2
41108: PPUSH
41109: LD_VAR 0 3
41113: PPUSH
41114: CALL_OW 298
41118: PUSH
41119: LD_INT 6
41121: LESS
41122: IFFALSE 41221
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
41124: LD_EXP 152
41128: PUSH
41129: LD_VAR 0 6
41133: ARRAY
41134: PUSH
41135: LD_VAR 0 5
41139: ARRAY
41140: PUSH
41141: LD_INT 1
41143: ARRAY
41144: PPUSH
41145: LD_EXP 152
41149: PUSH
41150: LD_VAR 0 6
41154: ARRAY
41155: PUSH
41156: LD_VAR 0 5
41160: ARRAY
41161: PUSH
41162: LD_INT 2
41164: ARRAY
41165: PPUSH
41166: LD_VAR 0 1
41170: PPUSH
41171: CALL_OW 255
41175: PPUSH
41176: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
41180: LD_ADDR_EXP 152
41184: PUSH
41185: LD_EXP 152
41189: PPUSH
41190: LD_VAR 0 6
41194: PPUSH
41195: LD_EXP 152
41199: PUSH
41200: LD_VAR 0 6
41204: ARRAY
41205: PPUSH
41206: LD_VAR 0 5
41210: PPUSH
41211: CALL_OW 3
41215: PPUSH
41216: CALL_OW 1
41220: ST_TO_ADDR
// end ; end ;
41221: GO 41059
41223: POP
41224: POP
// end ;
41225: LD_VAR 0 4
41229: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
41230: LD_INT 0
41232: PPUSH
41233: PPUSH
41234: PPUSH
41235: PPUSH
41236: PPUSH
41237: PPUSH
41238: PPUSH
41239: PPUSH
41240: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
41241: LD_VAR 0 1
41245: PPUSH
41246: CALL_OW 264
41250: PUSH
41251: LD_EXP 72
41255: EQUAL
41256: NOT
41257: PUSH
41258: LD_VAR 0 1
41262: PUSH
41263: LD_EXP 151
41267: IN
41268: NOT
41269: OR
41270: IFFALSE 41274
// exit ;
41272: GO 41596
// index := GetElementIndex ( minersList , unit ) ;
41274: LD_ADDR_VAR 0 6
41278: PUSH
41279: LD_EXP 151
41283: PPUSH
41284: LD_VAR 0 1
41288: PPUSH
41289: CALL 46792 0 2
41293: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
41294: LD_ADDR_VAR 0 8
41298: PUSH
41299: LD_EXP 153
41303: PUSH
41304: LD_EXP 152
41308: PUSH
41309: LD_VAR 0 6
41313: ARRAY
41314: MINUS
41315: ST_TO_ADDR
// if not minesFreeAmount then
41316: LD_VAR 0 8
41320: NOT
41321: IFFALSE 41325
// exit ;
41323: GO 41596
// tmp := [ ] ;
41325: LD_ADDR_VAR 0 7
41329: PUSH
41330: EMPTY
41331: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
41332: LD_ADDR_VAR 0 5
41336: PUSH
41337: DOUBLE
41338: LD_INT 1
41340: DEC
41341: ST_TO_ADDR
41342: LD_VAR 0 8
41346: PUSH
41347: FOR_TO
41348: IFFALSE 41543
// begin _d := rand ( 0 , 5 ) ;
41350: LD_ADDR_VAR 0 11
41354: PUSH
41355: LD_INT 0
41357: PPUSH
41358: LD_INT 5
41360: PPUSH
41361: CALL_OW 12
41365: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
41366: LD_ADDR_VAR 0 12
41370: PUSH
41371: LD_INT 2
41373: PPUSH
41374: LD_INT 6
41376: PPUSH
41377: CALL_OW 12
41381: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
41382: LD_ADDR_VAR 0 9
41386: PUSH
41387: LD_VAR 0 2
41391: PPUSH
41392: LD_VAR 0 11
41396: PPUSH
41397: LD_VAR 0 12
41401: PPUSH
41402: CALL_OW 272
41406: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
41407: LD_ADDR_VAR 0 10
41411: PUSH
41412: LD_VAR 0 3
41416: PPUSH
41417: LD_VAR 0 11
41421: PPUSH
41422: LD_VAR 0 12
41426: PPUSH
41427: CALL_OW 273
41431: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
41432: LD_VAR 0 9
41436: PPUSH
41437: LD_VAR 0 10
41441: PPUSH
41442: CALL_OW 488
41446: PUSH
41447: LD_VAR 0 9
41451: PUSH
41452: LD_VAR 0 10
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_VAR 0 7
41465: IN
41466: NOT
41467: AND
41468: PUSH
41469: LD_VAR 0 9
41473: PPUSH
41474: LD_VAR 0 10
41478: PPUSH
41479: CALL_OW 458
41483: NOT
41484: AND
41485: IFFALSE 41527
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
41487: LD_ADDR_VAR 0 7
41491: PUSH
41492: LD_VAR 0 7
41496: PPUSH
41497: LD_VAR 0 7
41501: PUSH
41502: LD_INT 1
41504: PLUS
41505: PPUSH
41506: LD_VAR 0 9
41510: PUSH
41511: LD_VAR 0 10
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PPUSH
41520: CALL_OW 1
41524: ST_TO_ADDR
41525: GO 41541
// i := i - 1 ;
41527: LD_ADDR_VAR 0 5
41531: PUSH
41532: LD_VAR 0 5
41536: PUSH
41537: LD_INT 1
41539: MINUS
41540: ST_TO_ADDR
// end ;
41541: GO 41347
41543: POP
41544: POP
// for i in tmp do
41545: LD_ADDR_VAR 0 5
41549: PUSH
41550: LD_VAR 0 7
41554: PUSH
41555: FOR_IN
41556: IFFALSE 41594
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
41558: LD_VAR 0 1
41562: PPUSH
41563: LD_VAR 0 5
41567: PUSH
41568: LD_INT 1
41570: ARRAY
41571: PPUSH
41572: LD_VAR 0 5
41576: PUSH
41577: LD_INT 2
41579: ARRAY
41580: PPUSH
41581: CALL 40536 0 3
41585: NOT
41586: IFFALSE 41592
// exit ;
41588: POP
41589: POP
41590: GO 41596
41592: GO 41555
41594: POP
41595: POP
// end ;
41596: LD_VAR 0 4
41600: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
41601: LD_INT 0
41603: PPUSH
41604: PPUSH
41605: PPUSH
41606: PPUSH
41607: PPUSH
41608: PPUSH
41609: PPUSH
// if not GetClass ( unit ) = class_sniper then
41610: LD_VAR 0 1
41614: PPUSH
41615: CALL_OW 257
41619: PUSH
41620: LD_INT 5
41622: EQUAL
41623: NOT
41624: IFFALSE 41628
// exit ;
41626: GO 42016
// dist := 8 ;
41628: LD_ADDR_VAR 0 5
41632: PUSH
41633: LD_INT 8
41635: ST_TO_ADDR
// viewRange := 12 ;
41636: LD_ADDR_VAR 0 7
41640: PUSH
41641: LD_INT 12
41643: ST_TO_ADDR
// side := GetSide ( unit ) ;
41644: LD_ADDR_VAR 0 6
41648: PUSH
41649: LD_VAR 0 1
41653: PPUSH
41654: CALL_OW 255
41658: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41659: LD_INT 61
41661: PPUSH
41662: LD_VAR 0 6
41666: PPUSH
41667: CALL_OW 321
41671: PUSH
41672: LD_INT 2
41674: EQUAL
41675: IFFALSE 41685
// viewRange := 16 ;
41677: LD_ADDR_VAR 0 7
41681: PUSH
41682: LD_INT 16
41684: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41685: LD_VAR 0 1
41689: PPUSH
41690: LD_VAR 0 2
41694: PPUSH
41695: LD_VAR 0 3
41699: PPUSH
41700: CALL_OW 297
41704: PUSH
41705: LD_VAR 0 5
41709: GREATER
41710: IFFALSE 41789
// begin ComMoveXY ( unit , x , y ) ;
41712: LD_VAR 0 1
41716: PPUSH
41717: LD_VAR 0 2
41721: PPUSH
41722: LD_VAR 0 3
41726: PPUSH
41727: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41731: LD_INT 35
41733: PPUSH
41734: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41738: LD_VAR 0 1
41742: PPUSH
41743: LD_VAR 0 2
41747: PPUSH
41748: LD_VAR 0 3
41752: PPUSH
41753: CALL 77564 0 3
41757: NOT
41758: IFFALSE 41762
// exit ;
41760: GO 42016
// until GetDistUnitXY ( unit , x , y ) < dist ;
41762: LD_VAR 0 1
41766: PPUSH
41767: LD_VAR 0 2
41771: PPUSH
41772: LD_VAR 0 3
41776: PPUSH
41777: CALL_OW 297
41781: PUSH
41782: LD_VAR 0 5
41786: LESS
41787: IFFALSE 41731
// end ; ComTurnXY ( unit , x , y ) ;
41789: LD_VAR 0 1
41793: PPUSH
41794: LD_VAR 0 2
41798: PPUSH
41799: LD_VAR 0 3
41803: PPUSH
41804: CALL_OW 118
// wait ( 5 ) ;
41808: LD_INT 5
41810: PPUSH
41811: CALL_OW 67
// _d := GetDir ( unit ) ;
41815: LD_ADDR_VAR 0 10
41819: PUSH
41820: LD_VAR 0 1
41824: PPUSH
41825: CALL_OW 254
41829: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
41830: LD_ADDR_VAR 0 8
41834: PUSH
41835: LD_VAR 0 1
41839: PPUSH
41840: CALL_OW 250
41844: PPUSH
41845: LD_VAR 0 10
41849: PPUSH
41850: LD_VAR 0 5
41854: PPUSH
41855: CALL_OW 272
41859: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
41860: LD_ADDR_VAR 0 9
41864: PUSH
41865: LD_VAR 0 1
41869: PPUSH
41870: CALL_OW 251
41874: PPUSH
41875: LD_VAR 0 10
41879: PPUSH
41880: LD_VAR 0 5
41884: PPUSH
41885: CALL_OW 273
41889: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41890: LD_VAR 0 8
41894: PPUSH
41895: LD_VAR 0 9
41899: PPUSH
41900: CALL_OW 488
41904: NOT
41905: IFFALSE 41909
// exit ;
41907: GO 42016
// ComAnimCustom ( unit , 1 ) ;
41909: LD_VAR 0 1
41913: PPUSH
41914: LD_INT 1
41916: PPUSH
41917: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41921: LD_VAR 0 8
41925: PPUSH
41926: LD_VAR 0 9
41930: PPUSH
41931: LD_VAR 0 6
41935: PPUSH
41936: LD_VAR 0 7
41940: PPUSH
41941: CALL_OW 330
// repeat wait ( 1 ) ;
41945: LD_INT 1
41947: PPUSH
41948: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
41952: LD_VAR 0 1
41956: PPUSH
41957: CALL_OW 316
41961: PUSH
41962: LD_VAR 0 1
41966: PPUSH
41967: CALL_OW 314
41971: OR
41972: PUSH
41973: LD_VAR 0 1
41977: PPUSH
41978: CALL_OW 302
41982: NOT
41983: OR
41984: PUSH
41985: LD_VAR 0 1
41989: PPUSH
41990: CALL_OW 301
41994: OR
41995: IFFALSE 41945
// RemoveSeeing ( _x , _y , side ) ;
41997: LD_VAR 0 8
42001: PPUSH
42002: LD_VAR 0 9
42006: PPUSH
42007: LD_VAR 0 6
42011: PPUSH
42012: CALL_OW 331
// end ; end_of_file
42016: LD_VAR 0 4
42020: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
42021: LD_INT 0
42023: PPUSH
42024: PPUSH
// if exist_mode then
42025: LD_VAR 0 2
42029: IFFALSE 42054
// unit := CreateCharacter ( prefix & ident ) else
42031: LD_ADDR_VAR 0 5
42035: PUSH
42036: LD_VAR 0 3
42040: PUSH
42041: LD_VAR 0 1
42045: STR
42046: PPUSH
42047: CALL_OW 34
42051: ST_TO_ADDR
42052: GO 42069
// unit := NewCharacter ( ident ) ;
42054: LD_ADDR_VAR 0 5
42058: PUSH
42059: LD_VAR 0 1
42063: PPUSH
42064: CALL_OW 25
42068: ST_TO_ADDR
// result := unit ;
42069: LD_ADDR_VAR 0 4
42073: PUSH
42074: LD_VAR 0 5
42078: ST_TO_ADDR
// end ;
42079: LD_VAR 0 4
42083: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
42084: LD_INT 0
42086: PPUSH
42087: PPUSH
// if not side or not nation then
42088: LD_VAR 0 1
42092: NOT
42093: PUSH
42094: LD_VAR 0 2
42098: NOT
42099: OR
42100: IFFALSE 42104
// exit ;
42102: GO 42872
// case nation of nation_american :
42104: LD_VAR 0 2
42108: PUSH
42109: LD_INT 1
42111: DOUBLE
42112: EQUAL
42113: IFTRUE 42117
42115: GO 42331
42117: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
42118: LD_ADDR_VAR 0 4
42122: PUSH
42123: LD_INT 35
42125: PUSH
42126: LD_INT 45
42128: PUSH
42129: LD_INT 46
42131: PUSH
42132: LD_INT 47
42134: PUSH
42135: LD_INT 82
42137: PUSH
42138: LD_INT 83
42140: PUSH
42141: LD_INT 84
42143: PUSH
42144: LD_INT 85
42146: PUSH
42147: LD_INT 86
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: LD_INT 2
42155: PUSH
42156: LD_INT 6
42158: PUSH
42159: LD_INT 15
42161: PUSH
42162: LD_INT 16
42164: PUSH
42165: LD_INT 7
42167: PUSH
42168: LD_INT 12
42170: PUSH
42171: LD_INT 13
42173: PUSH
42174: LD_INT 10
42176: PUSH
42177: LD_INT 14
42179: PUSH
42180: LD_INT 20
42182: PUSH
42183: LD_INT 21
42185: PUSH
42186: LD_INT 22
42188: PUSH
42189: LD_INT 25
42191: PUSH
42192: LD_INT 32
42194: PUSH
42195: LD_INT 27
42197: PUSH
42198: LD_INT 36
42200: PUSH
42201: LD_INT 69
42203: PUSH
42204: LD_INT 39
42206: PUSH
42207: LD_INT 34
42209: PUSH
42210: LD_INT 40
42212: PUSH
42213: LD_INT 48
42215: PUSH
42216: LD_INT 49
42218: PUSH
42219: LD_INT 50
42221: PUSH
42222: LD_INT 51
42224: PUSH
42225: LD_INT 52
42227: PUSH
42228: LD_INT 53
42230: PUSH
42231: LD_INT 54
42233: PUSH
42234: LD_INT 55
42236: PUSH
42237: LD_INT 56
42239: PUSH
42240: LD_INT 57
42242: PUSH
42243: LD_INT 58
42245: PUSH
42246: LD_INT 59
42248: PUSH
42249: LD_INT 60
42251: PUSH
42252: LD_INT 61
42254: PUSH
42255: LD_INT 62
42257: PUSH
42258: LD_INT 80
42260: PUSH
42261: LD_INT 82
42263: PUSH
42264: LD_INT 83
42266: PUSH
42267: LD_INT 84
42269: PUSH
42270: LD_INT 85
42272: PUSH
42273: LD_INT 86
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: ST_TO_ADDR
42329: GO 42796
42331: LD_INT 2
42333: DOUBLE
42334: EQUAL
42335: IFTRUE 42339
42337: GO 42565
42339: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
42340: LD_ADDR_VAR 0 4
42344: PUSH
42345: LD_INT 35
42347: PUSH
42348: LD_INT 45
42350: PUSH
42351: LD_INT 46
42353: PUSH
42354: LD_INT 47
42356: PUSH
42357: LD_INT 82
42359: PUSH
42360: LD_INT 83
42362: PUSH
42363: LD_INT 84
42365: PUSH
42366: LD_INT 85
42368: PUSH
42369: LD_INT 87
42371: PUSH
42372: LD_INT 70
42374: PUSH
42375: LD_INT 1
42377: PUSH
42378: LD_INT 11
42380: PUSH
42381: LD_INT 3
42383: PUSH
42384: LD_INT 4
42386: PUSH
42387: LD_INT 5
42389: PUSH
42390: LD_INT 6
42392: PUSH
42393: LD_INT 15
42395: PUSH
42396: LD_INT 18
42398: PUSH
42399: LD_INT 7
42401: PUSH
42402: LD_INT 17
42404: PUSH
42405: LD_INT 8
42407: PUSH
42408: LD_INT 20
42410: PUSH
42411: LD_INT 21
42413: PUSH
42414: LD_INT 22
42416: PUSH
42417: LD_INT 72
42419: PUSH
42420: LD_INT 26
42422: PUSH
42423: LD_INT 69
42425: PUSH
42426: LD_INT 39
42428: PUSH
42429: LD_INT 40
42431: PUSH
42432: LD_INT 41
42434: PUSH
42435: LD_INT 42
42437: PUSH
42438: LD_INT 43
42440: PUSH
42441: LD_INT 48
42443: PUSH
42444: LD_INT 49
42446: PUSH
42447: LD_INT 50
42449: PUSH
42450: LD_INT 51
42452: PUSH
42453: LD_INT 52
42455: PUSH
42456: LD_INT 53
42458: PUSH
42459: LD_INT 54
42461: PUSH
42462: LD_INT 55
42464: PUSH
42465: LD_INT 56
42467: PUSH
42468: LD_INT 60
42470: PUSH
42471: LD_INT 61
42473: PUSH
42474: LD_INT 62
42476: PUSH
42477: LD_INT 66
42479: PUSH
42480: LD_INT 67
42482: PUSH
42483: LD_INT 68
42485: PUSH
42486: LD_INT 81
42488: PUSH
42489: LD_INT 82
42491: PUSH
42492: LD_INT 83
42494: PUSH
42495: LD_INT 84
42497: PUSH
42498: LD_INT 85
42500: PUSH
42501: LD_INT 87
42503: PUSH
42504: LD_INT 88
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: ST_TO_ADDR
42563: GO 42796
42565: LD_INT 3
42567: DOUBLE
42568: EQUAL
42569: IFTRUE 42573
42571: GO 42795
42573: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
42574: LD_ADDR_VAR 0 4
42578: PUSH
42579: LD_INT 46
42581: PUSH
42582: LD_INT 47
42584: PUSH
42585: LD_INT 1
42587: PUSH
42588: LD_INT 2
42590: PUSH
42591: LD_INT 82
42593: PUSH
42594: LD_INT 83
42596: PUSH
42597: LD_INT 84
42599: PUSH
42600: LD_INT 85
42602: PUSH
42603: LD_INT 86
42605: PUSH
42606: LD_INT 11
42608: PUSH
42609: LD_INT 9
42611: PUSH
42612: LD_INT 20
42614: PUSH
42615: LD_INT 19
42617: PUSH
42618: LD_INT 21
42620: PUSH
42621: LD_INT 24
42623: PUSH
42624: LD_INT 22
42626: PUSH
42627: LD_INT 25
42629: PUSH
42630: LD_INT 28
42632: PUSH
42633: LD_INT 29
42635: PUSH
42636: LD_INT 30
42638: PUSH
42639: LD_INT 31
42641: PUSH
42642: LD_INT 37
42644: PUSH
42645: LD_INT 38
42647: PUSH
42648: LD_INT 32
42650: PUSH
42651: LD_INT 27
42653: PUSH
42654: LD_INT 33
42656: PUSH
42657: LD_INT 69
42659: PUSH
42660: LD_INT 39
42662: PUSH
42663: LD_INT 34
42665: PUSH
42666: LD_INT 40
42668: PUSH
42669: LD_INT 71
42671: PUSH
42672: LD_INT 23
42674: PUSH
42675: LD_INT 44
42677: PUSH
42678: LD_INT 48
42680: PUSH
42681: LD_INT 49
42683: PUSH
42684: LD_INT 50
42686: PUSH
42687: LD_INT 51
42689: PUSH
42690: LD_INT 52
42692: PUSH
42693: LD_INT 53
42695: PUSH
42696: LD_INT 54
42698: PUSH
42699: LD_INT 55
42701: PUSH
42702: LD_INT 56
42704: PUSH
42705: LD_INT 57
42707: PUSH
42708: LD_INT 58
42710: PUSH
42711: LD_INT 59
42713: PUSH
42714: LD_INT 63
42716: PUSH
42717: LD_INT 64
42719: PUSH
42720: LD_INT 65
42722: PUSH
42723: LD_INT 82
42725: PUSH
42726: LD_INT 83
42728: PUSH
42729: LD_INT 84
42731: PUSH
42732: LD_INT 85
42734: PUSH
42735: LD_INT 86
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: ST_TO_ADDR
42793: GO 42796
42795: POP
// if state > - 1 and state < 3 then
42796: LD_VAR 0 3
42800: PUSH
42801: LD_INT 1
42803: NEG
42804: GREATER
42805: PUSH
42806: LD_VAR 0 3
42810: PUSH
42811: LD_INT 3
42813: LESS
42814: AND
42815: IFFALSE 42872
// for i in result do
42817: LD_ADDR_VAR 0 5
42821: PUSH
42822: LD_VAR 0 4
42826: PUSH
42827: FOR_IN
42828: IFFALSE 42870
// if GetTech ( i , side ) <> state then
42830: LD_VAR 0 5
42834: PPUSH
42835: LD_VAR 0 1
42839: PPUSH
42840: CALL_OW 321
42844: PUSH
42845: LD_VAR 0 3
42849: NONEQUAL
42850: IFFALSE 42868
// result := result diff i ;
42852: LD_ADDR_VAR 0 4
42856: PUSH
42857: LD_VAR 0 4
42861: PUSH
42862: LD_VAR 0 5
42866: DIFF
42867: ST_TO_ADDR
42868: GO 42827
42870: POP
42871: POP
// end ;
42872: LD_VAR 0 4
42876: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42877: LD_INT 0
42879: PPUSH
42880: PPUSH
42881: PPUSH
// result := true ;
42882: LD_ADDR_VAR 0 3
42886: PUSH
42887: LD_INT 1
42889: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42890: LD_ADDR_VAR 0 5
42894: PUSH
42895: LD_VAR 0 2
42899: PPUSH
42900: CALL_OW 480
42904: ST_TO_ADDR
// if not tmp then
42905: LD_VAR 0 5
42909: NOT
42910: IFFALSE 42914
// exit ;
42912: GO 42963
// for i in tmp do
42914: LD_ADDR_VAR 0 4
42918: PUSH
42919: LD_VAR 0 5
42923: PUSH
42924: FOR_IN
42925: IFFALSE 42961
// if GetTech ( i , side ) <> state_researched then
42927: LD_VAR 0 4
42931: PPUSH
42932: LD_VAR 0 1
42936: PPUSH
42937: CALL_OW 321
42941: PUSH
42942: LD_INT 2
42944: NONEQUAL
42945: IFFALSE 42959
// begin result := false ;
42947: LD_ADDR_VAR 0 3
42951: PUSH
42952: LD_INT 0
42954: ST_TO_ADDR
// exit ;
42955: POP
42956: POP
42957: GO 42963
// end ;
42959: GO 42924
42961: POP
42962: POP
// end ;
42963: LD_VAR 0 3
42967: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42968: LD_INT 0
42970: PPUSH
42971: PPUSH
42972: PPUSH
42973: PPUSH
42974: PPUSH
42975: PPUSH
42976: PPUSH
42977: PPUSH
42978: PPUSH
42979: PPUSH
42980: PPUSH
42981: PPUSH
42982: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42983: LD_VAR 0 1
42987: NOT
42988: PUSH
42989: LD_VAR 0 1
42993: PPUSH
42994: CALL_OW 257
42998: PUSH
42999: LD_INT 9
43001: NONEQUAL
43002: OR
43003: IFFALSE 43007
// exit ;
43005: GO 43580
// side := GetSide ( unit ) ;
43007: LD_ADDR_VAR 0 9
43011: PUSH
43012: LD_VAR 0 1
43016: PPUSH
43017: CALL_OW 255
43021: ST_TO_ADDR
// tech_space := tech_spacanom ;
43022: LD_ADDR_VAR 0 12
43026: PUSH
43027: LD_INT 29
43029: ST_TO_ADDR
// tech_time := tech_taurad ;
43030: LD_ADDR_VAR 0 13
43034: PUSH
43035: LD_INT 28
43037: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
43038: LD_ADDR_VAR 0 11
43042: PUSH
43043: LD_VAR 0 1
43047: PPUSH
43048: CALL_OW 310
43052: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
43053: LD_VAR 0 11
43057: PPUSH
43058: CALL_OW 247
43062: PUSH
43063: LD_INT 2
43065: EQUAL
43066: IFFALSE 43070
// exit ;
43068: GO 43580
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43070: LD_ADDR_VAR 0 8
43074: PUSH
43075: LD_INT 81
43077: PUSH
43078: LD_VAR 0 9
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 3
43089: PUSH
43090: LD_INT 21
43092: PUSH
43093: LD_INT 3
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PPUSH
43108: CALL_OW 69
43112: ST_TO_ADDR
// if not tmp then
43113: LD_VAR 0 8
43117: NOT
43118: IFFALSE 43122
// exit ;
43120: GO 43580
// if in_unit then
43122: LD_VAR 0 11
43126: IFFALSE 43150
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
43128: LD_ADDR_VAR 0 10
43132: PUSH
43133: LD_VAR 0 8
43137: PPUSH
43138: LD_VAR 0 11
43142: PPUSH
43143: CALL_OW 74
43147: ST_TO_ADDR
43148: GO 43170
// enemy := NearestUnitToUnit ( tmp , unit ) ;
43150: LD_ADDR_VAR 0 10
43154: PUSH
43155: LD_VAR 0 8
43159: PPUSH
43160: LD_VAR 0 1
43164: PPUSH
43165: CALL_OW 74
43169: ST_TO_ADDR
// if not enemy then
43170: LD_VAR 0 10
43174: NOT
43175: IFFALSE 43179
// exit ;
43177: GO 43580
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
43179: LD_VAR 0 11
43183: PUSH
43184: LD_VAR 0 11
43188: PPUSH
43189: LD_VAR 0 10
43193: PPUSH
43194: CALL_OW 296
43198: PUSH
43199: LD_INT 13
43201: GREATER
43202: AND
43203: PUSH
43204: LD_VAR 0 1
43208: PPUSH
43209: LD_VAR 0 10
43213: PPUSH
43214: CALL_OW 296
43218: PUSH
43219: LD_INT 12
43221: GREATER
43222: OR
43223: IFFALSE 43227
// exit ;
43225: GO 43580
// missile := [ 1 ] ;
43227: LD_ADDR_VAR 0 14
43231: PUSH
43232: LD_INT 1
43234: PUSH
43235: EMPTY
43236: LIST
43237: ST_TO_ADDR
// if Researched ( side , tech_space ) then
43238: LD_VAR 0 9
43242: PPUSH
43243: LD_VAR 0 12
43247: PPUSH
43248: CALL_OW 325
43252: IFFALSE 43281
// missile := Insert ( missile , missile + 1 , 2 ) ;
43254: LD_ADDR_VAR 0 14
43258: PUSH
43259: LD_VAR 0 14
43263: PPUSH
43264: LD_VAR 0 14
43268: PUSH
43269: LD_INT 1
43271: PLUS
43272: PPUSH
43273: LD_INT 2
43275: PPUSH
43276: CALL_OW 2
43280: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
43281: LD_VAR 0 9
43285: PPUSH
43286: LD_VAR 0 13
43290: PPUSH
43291: CALL_OW 325
43295: PUSH
43296: LD_VAR 0 10
43300: PPUSH
43301: CALL_OW 255
43305: PPUSH
43306: LD_VAR 0 13
43310: PPUSH
43311: CALL_OW 325
43315: NOT
43316: AND
43317: IFFALSE 43346
// missile := Insert ( missile , missile + 1 , 3 ) ;
43319: LD_ADDR_VAR 0 14
43323: PUSH
43324: LD_VAR 0 14
43328: PPUSH
43329: LD_VAR 0 14
43333: PUSH
43334: LD_INT 1
43336: PLUS
43337: PPUSH
43338: LD_INT 3
43340: PPUSH
43341: CALL_OW 2
43345: ST_TO_ADDR
// if missile < 2 then
43346: LD_VAR 0 14
43350: PUSH
43351: LD_INT 2
43353: LESS
43354: IFFALSE 43358
// exit ;
43356: GO 43580
// x := GetX ( enemy ) ;
43358: LD_ADDR_VAR 0 4
43362: PUSH
43363: LD_VAR 0 10
43367: PPUSH
43368: CALL_OW 250
43372: ST_TO_ADDR
// y := GetY ( enemy ) ;
43373: LD_ADDR_VAR 0 5
43377: PUSH
43378: LD_VAR 0 10
43382: PPUSH
43383: CALL_OW 251
43387: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
43388: LD_ADDR_VAR 0 6
43392: PUSH
43393: LD_VAR 0 4
43397: PUSH
43398: LD_INT 1
43400: NEG
43401: PPUSH
43402: LD_INT 1
43404: PPUSH
43405: CALL_OW 12
43409: PLUS
43410: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43411: LD_ADDR_VAR 0 7
43415: PUSH
43416: LD_VAR 0 5
43420: PUSH
43421: LD_INT 1
43423: NEG
43424: PPUSH
43425: LD_INT 1
43427: PPUSH
43428: CALL_OW 12
43432: PLUS
43433: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43434: LD_VAR 0 6
43438: PPUSH
43439: LD_VAR 0 7
43443: PPUSH
43444: CALL_OW 488
43448: NOT
43449: IFFALSE 43471
// begin _x := x ;
43451: LD_ADDR_VAR 0 6
43455: PUSH
43456: LD_VAR 0 4
43460: ST_TO_ADDR
// _y := y ;
43461: LD_ADDR_VAR 0 7
43465: PUSH
43466: LD_VAR 0 5
43470: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43471: LD_ADDR_VAR 0 3
43475: PUSH
43476: LD_INT 1
43478: PPUSH
43479: LD_VAR 0 14
43483: PPUSH
43484: CALL_OW 12
43488: ST_TO_ADDR
// case i of 1 :
43489: LD_VAR 0 3
43493: PUSH
43494: LD_INT 1
43496: DOUBLE
43497: EQUAL
43498: IFTRUE 43502
43500: GO 43519
43502: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43503: LD_VAR 0 1
43507: PPUSH
43508: LD_VAR 0 10
43512: PPUSH
43513: CALL_OW 115
43517: GO 43580
43519: LD_INT 2
43521: DOUBLE
43522: EQUAL
43523: IFTRUE 43527
43525: GO 43549
43527: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43528: LD_VAR 0 1
43532: PPUSH
43533: LD_VAR 0 6
43537: PPUSH
43538: LD_VAR 0 7
43542: PPUSH
43543: CALL_OW 153
43547: GO 43580
43549: LD_INT 3
43551: DOUBLE
43552: EQUAL
43553: IFTRUE 43557
43555: GO 43579
43557: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43558: LD_VAR 0 1
43562: PPUSH
43563: LD_VAR 0 6
43567: PPUSH
43568: LD_VAR 0 7
43572: PPUSH
43573: CALL_OW 154
43577: GO 43580
43579: POP
// end ;
43580: LD_VAR 0 2
43584: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43585: LD_INT 0
43587: PPUSH
43588: PPUSH
43589: PPUSH
43590: PPUSH
43591: PPUSH
43592: PPUSH
// if not unit or not building then
43593: LD_VAR 0 1
43597: NOT
43598: PUSH
43599: LD_VAR 0 2
43603: NOT
43604: OR
43605: IFFALSE 43609
// exit ;
43607: GO 43767
// x := GetX ( building ) ;
43609: LD_ADDR_VAR 0 5
43613: PUSH
43614: LD_VAR 0 2
43618: PPUSH
43619: CALL_OW 250
43623: ST_TO_ADDR
// y := GetY ( building ) ;
43624: LD_ADDR_VAR 0 6
43628: PUSH
43629: LD_VAR 0 2
43633: PPUSH
43634: CALL_OW 251
43638: ST_TO_ADDR
// for i = 0 to 5 do
43639: LD_ADDR_VAR 0 4
43643: PUSH
43644: DOUBLE
43645: LD_INT 0
43647: DEC
43648: ST_TO_ADDR
43649: LD_INT 5
43651: PUSH
43652: FOR_TO
43653: IFFALSE 43765
// begin _x := ShiftX ( x , i , 3 ) ;
43655: LD_ADDR_VAR 0 7
43659: PUSH
43660: LD_VAR 0 5
43664: PPUSH
43665: LD_VAR 0 4
43669: PPUSH
43670: LD_INT 3
43672: PPUSH
43673: CALL_OW 272
43677: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43678: LD_ADDR_VAR 0 8
43682: PUSH
43683: LD_VAR 0 6
43687: PPUSH
43688: LD_VAR 0 4
43692: PPUSH
43693: LD_INT 3
43695: PPUSH
43696: CALL_OW 273
43700: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43701: LD_VAR 0 7
43705: PPUSH
43706: LD_VAR 0 8
43710: PPUSH
43711: CALL_OW 488
43715: NOT
43716: IFFALSE 43720
// continue ;
43718: GO 43652
// if HexInfo ( _x , _y ) = 0 then
43720: LD_VAR 0 7
43724: PPUSH
43725: LD_VAR 0 8
43729: PPUSH
43730: CALL_OW 428
43734: PUSH
43735: LD_INT 0
43737: EQUAL
43738: IFFALSE 43763
// begin ComMoveXY ( unit , _x , _y ) ;
43740: LD_VAR 0 1
43744: PPUSH
43745: LD_VAR 0 7
43749: PPUSH
43750: LD_VAR 0 8
43754: PPUSH
43755: CALL_OW 111
// exit ;
43759: POP
43760: POP
43761: GO 43767
// end ; end ;
43763: GO 43652
43765: POP
43766: POP
// end ;
43767: LD_VAR 0 3
43771: RET
// export function ScanBase ( side , base_area ) ; begin
43772: LD_INT 0
43774: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43775: LD_ADDR_VAR 0 3
43779: PUSH
43780: LD_VAR 0 2
43784: PPUSH
43785: LD_INT 81
43787: PUSH
43788: LD_VAR 0 1
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PPUSH
43797: CALL_OW 70
43801: ST_TO_ADDR
// end ;
43802: LD_VAR 0 3
43806: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43807: LD_INT 0
43809: PPUSH
43810: PPUSH
43811: PPUSH
43812: PPUSH
// result := false ;
43813: LD_ADDR_VAR 0 2
43817: PUSH
43818: LD_INT 0
43820: ST_TO_ADDR
// side := GetSide ( unit ) ;
43821: LD_ADDR_VAR 0 3
43825: PUSH
43826: LD_VAR 0 1
43830: PPUSH
43831: CALL_OW 255
43835: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43836: LD_ADDR_VAR 0 4
43840: PUSH
43841: LD_VAR 0 1
43845: PPUSH
43846: CALL_OW 248
43850: ST_TO_ADDR
// case nat of 1 :
43851: LD_VAR 0 4
43855: PUSH
43856: LD_INT 1
43858: DOUBLE
43859: EQUAL
43860: IFTRUE 43864
43862: GO 43875
43864: POP
// tech := tech_lassight ; 2 :
43865: LD_ADDR_VAR 0 5
43869: PUSH
43870: LD_INT 12
43872: ST_TO_ADDR
43873: GO 43914
43875: LD_INT 2
43877: DOUBLE
43878: EQUAL
43879: IFTRUE 43883
43881: GO 43894
43883: POP
// tech := tech_mortar ; 3 :
43884: LD_ADDR_VAR 0 5
43888: PUSH
43889: LD_INT 41
43891: ST_TO_ADDR
43892: GO 43914
43894: LD_INT 3
43896: DOUBLE
43897: EQUAL
43898: IFTRUE 43902
43900: GO 43913
43902: POP
// tech := tech_bazooka ; end ;
43903: LD_ADDR_VAR 0 5
43907: PUSH
43908: LD_INT 44
43910: ST_TO_ADDR
43911: GO 43914
43913: POP
// if Researched ( side , tech ) then
43914: LD_VAR 0 3
43918: PPUSH
43919: LD_VAR 0 5
43923: PPUSH
43924: CALL_OW 325
43928: IFFALSE 43955
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43930: LD_ADDR_VAR 0 2
43934: PUSH
43935: LD_INT 5
43937: PUSH
43938: LD_INT 8
43940: PUSH
43941: LD_INT 9
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: LIST
43948: PUSH
43949: LD_VAR 0 4
43953: ARRAY
43954: ST_TO_ADDR
// end ;
43955: LD_VAR 0 2
43959: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43960: LD_INT 0
43962: PPUSH
43963: PPUSH
43964: PPUSH
// if not mines then
43965: LD_VAR 0 2
43969: NOT
43970: IFFALSE 43974
// exit ;
43972: GO 44118
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43974: LD_ADDR_VAR 0 5
43978: PUSH
43979: LD_INT 81
43981: PUSH
43982: LD_VAR 0 1
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 3
43993: PUSH
43994: LD_INT 21
43996: PUSH
43997: LD_INT 3
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PPUSH
44012: CALL_OW 69
44016: ST_TO_ADDR
// for i in mines do
44017: LD_ADDR_VAR 0 4
44021: PUSH
44022: LD_VAR 0 2
44026: PUSH
44027: FOR_IN
44028: IFFALSE 44116
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
44030: LD_VAR 0 4
44034: PUSH
44035: LD_INT 1
44037: ARRAY
44038: PPUSH
44039: LD_VAR 0 4
44043: PUSH
44044: LD_INT 2
44046: ARRAY
44047: PPUSH
44048: CALL_OW 458
44052: NOT
44053: IFFALSE 44057
// continue ;
44055: GO 44027
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
44057: LD_VAR 0 4
44061: PUSH
44062: LD_INT 1
44064: ARRAY
44065: PPUSH
44066: LD_VAR 0 4
44070: PUSH
44071: LD_INT 2
44073: ARRAY
44074: PPUSH
44075: CALL_OW 428
44079: PUSH
44080: LD_VAR 0 5
44084: IN
44085: IFFALSE 44114
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
44087: LD_VAR 0 4
44091: PUSH
44092: LD_INT 1
44094: ARRAY
44095: PPUSH
44096: LD_VAR 0 4
44100: PUSH
44101: LD_INT 2
44103: ARRAY
44104: PPUSH
44105: LD_VAR 0 1
44109: PPUSH
44110: CALL_OW 456
// end ;
44114: GO 44027
44116: POP
44117: POP
// end ;
44118: LD_VAR 0 3
44122: RET
// export function Count ( array ) ; var i ; begin
44123: LD_INT 0
44125: PPUSH
44126: PPUSH
// result := 0 ;
44127: LD_ADDR_VAR 0 2
44131: PUSH
44132: LD_INT 0
44134: ST_TO_ADDR
// for i in array do
44135: LD_ADDR_VAR 0 3
44139: PUSH
44140: LD_VAR 0 1
44144: PUSH
44145: FOR_IN
44146: IFFALSE 44170
// if i then
44148: LD_VAR 0 3
44152: IFFALSE 44168
// result := result + 1 ;
44154: LD_ADDR_VAR 0 2
44158: PUSH
44159: LD_VAR 0 2
44163: PUSH
44164: LD_INT 1
44166: PLUS
44167: ST_TO_ADDR
44168: GO 44145
44170: POP
44171: POP
// end ;
44172: LD_VAR 0 2
44176: RET
// export function IsEmpty ( building ) ; begin
44177: LD_INT 0
44179: PPUSH
// if not building then
44180: LD_VAR 0 1
44184: NOT
44185: IFFALSE 44189
// exit ;
44187: GO 44232
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
44189: LD_ADDR_VAR 0 2
44193: PUSH
44194: LD_VAR 0 1
44198: PUSH
44199: LD_INT 22
44201: PUSH
44202: LD_VAR 0 1
44206: PPUSH
44207: CALL_OW 255
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 58
44218: PUSH
44219: EMPTY
44220: LIST
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PPUSH
44226: CALL_OW 69
44230: IN
44231: ST_TO_ADDR
// end ;
44232: LD_VAR 0 2
44236: RET
// export function IsNotFull ( building ) ; begin
44237: LD_INT 0
44239: PPUSH
// if not building then
44240: LD_VAR 0 1
44244: NOT
44245: IFFALSE 44249
// exit ;
44247: GO 44268
// result := UnitsInside ( building ) < 6 ;
44249: LD_ADDR_VAR 0 2
44253: PUSH
44254: LD_VAR 0 1
44258: PPUSH
44259: CALL_OW 313
44263: PUSH
44264: LD_INT 6
44266: LESS
44267: ST_TO_ADDR
// end ;
44268: LD_VAR 0 2
44272: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
44273: LD_INT 0
44275: PPUSH
44276: PPUSH
44277: PPUSH
44278: PPUSH
// tmp := [ ] ;
44279: LD_ADDR_VAR 0 3
44283: PUSH
44284: EMPTY
44285: ST_TO_ADDR
// list := [ ] ;
44286: LD_ADDR_VAR 0 5
44290: PUSH
44291: EMPTY
44292: ST_TO_ADDR
// for i = 16 to 25 do
44293: LD_ADDR_VAR 0 4
44297: PUSH
44298: DOUBLE
44299: LD_INT 16
44301: DEC
44302: ST_TO_ADDR
44303: LD_INT 25
44305: PUSH
44306: FOR_TO
44307: IFFALSE 44380
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
44309: LD_ADDR_VAR 0 3
44313: PUSH
44314: LD_VAR 0 3
44318: PUSH
44319: LD_INT 22
44321: PUSH
44322: LD_VAR 0 1
44326: PPUSH
44327: CALL_OW 255
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 91
44338: PUSH
44339: LD_VAR 0 1
44343: PUSH
44344: LD_INT 6
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 30
44354: PUSH
44355: LD_VAR 0 4
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: LIST
44368: PUSH
44369: EMPTY
44370: LIST
44371: PPUSH
44372: CALL_OW 69
44376: ADD
44377: ST_TO_ADDR
44378: GO 44306
44380: POP
44381: POP
// for i = 1 to tmp do
44382: LD_ADDR_VAR 0 4
44386: PUSH
44387: DOUBLE
44388: LD_INT 1
44390: DEC
44391: ST_TO_ADDR
44392: LD_VAR 0 3
44396: PUSH
44397: FOR_TO
44398: IFFALSE 44486
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
44400: LD_ADDR_VAR 0 5
44404: PUSH
44405: LD_VAR 0 5
44409: PUSH
44410: LD_VAR 0 3
44414: PUSH
44415: LD_VAR 0 4
44419: ARRAY
44420: PPUSH
44421: CALL_OW 266
44425: PUSH
44426: LD_VAR 0 3
44430: PUSH
44431: LD_VAR 0 4
44435: ARRAY
44436: PPUSH
44437: CALL_OW 250
44441: PUSH
44442: LD_VAR 0 3
44446: PUSH
44447: LD_VAR 0 4
44451: ARRAY
44452: PPUSH
44453: CALL_OW 251
44457: PUSH
44458: LD_VAR 0 3
44462: PUSH
44463: LD_VAR 0 4
44467: ARRAY
44468: PPUSH
44469: CALL_OW 254
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: PUSH
44480: EMPTY
44481: LIST
44482: ADD
44483: ST_TO_ADDR
44484: GO 44397
44486: POP
44487: POP
// result := list ;
44488: LD_ADDR_VAR 0 2
44492: PUSH
44493: LD_VAR 0 5
44497: ST_TO_ADDR
// end ;
44498: LD_VAR 0 2
44502: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44503: LD_INT 0
44505: PPUSH
44506: PPUSH
44507: PPUSH
44508: PPUSH
44509: PPUSH
44510: PPUSH
44511: PPUSH
// if not factory then
44512: LD_VAR 0 1
44516: NOT
44517: IFFALSE 44521
// exit ;
44519: GO 45114
// if control = control_apeman then
44521: LD_VAR 0 4
44525: PUSH
44526: LD_INT 5
44528: EQUAL
44529: IFFALSE 44638
// begin tmp := UnitsInside ( factory ) ;
44531: LD_ADDR_VAR 0 8
44535: PUSH
44536: LD_VAR 0 1
44540: PPUSH
44541: CALL_OW 313
44545: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44546: LD_VAR 0 8
44550: PPUSH
44551: LD_INT 25
44553: PUSH
44554: LD_INT 12
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PPUSH
44561: CALL_OW 72
44565: NOT
44566: IFFALSE 44576
// control := control_manual ;
44568: LD_ADDR_VAR 0 4
44572: PUSH
44573: LD_INT 1
44575: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44576: LD_ADDR_VAR 0 8
44580: PUSH
44581: LD_VAR 0 1
44585: PPUSH
44586: CALL 44273 0 1
44590: ST_TO_ADDR
// if tmp then
44591: LD_VAR 0 8
44595: IFFALSE 44638
// begin for i in tmp do
44597: LD_ADDR_VAR 0 7
44601: PUSH
44602: LD_VAR 0 8
44606: PUSH
44607: FOR_IN
44608: IFFALSE 44636
// if i [ 1 ] = b_ext_radio then
44610: LD_VAR 0 7
44614: PUSH
44615: LD_INT 1
44617: ARRAY
44618: PUSH
44619: LD_INT 22
44621: EQUAL
44622: IFFALSE 44634
// begin control := control_remote ;
44624: LD_ADDR_VAR 0 4
44628: PUSH
44629: LD_INT 2
44631: ST_TO_ADDR
// break ;
44632: GO 44636
// end ;
44634: GO 44607
44636: POP
44637: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44638: LD_VAR 0 1
44642: PPUSH
44643: LD_VAR 0 2
44647: PPUSH
44648: LD_VAR 0 3
44652: PPUSH
44653: LD_VAR 0 4
44657: PPUSH
44658: LD_VAR 0 5
44662: PPUSH
44663: CALL_OW 448
44667: IFFALSE 44702
// begin result := [ chassis , engine , control , weapon ] ;
44669: LD_ADDR_VAR 0 6
44673: PUSH
44674: LD_VAR 0 2
44678: PUSH
44679: LD_VAR 0 3
44683: PUSH
44684: LD_VAR 0 4
44688: PUSH
44689: LD_VAR 0 5
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: ST_TO_ADDR
// exit ;
44700: GO 45114
// end ; _chassis := AvailableChassisList ( factory ) ;
44702: LD_ADDR_VAR 0 9
44706: PUSH
44707: LD_VAR 0 1
44711: PPUSH
44712: CALL_OW 475
44716: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44717: LD_ADDR_VAR 0 11
44721: PUSH
44722: LD_VAR 0 1
44726: PPUSH
44727: CALL_OW 476
44731: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44732: LD_ADDR_VAR 0 12
44736: PUSH
44737: LD_VAR 0 1
44741: PPUSH
44742: CALL_OW 477
44746: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44747: LD_ADDR_VAR 0 10
44751: PUSH
44752: LD_VAR 0 1
44756: PPUSH
44757: CALL_OW 478
44761: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44762: LD_VAR 0 9
44766: NOT
44767: PUSH
44768: LD_VAR 0 11
44772: NOT
44773: OR
44774: PUSH
44775: LD_VAR 0 12
44779: NOT
44780: OR
44781: PUSH
44782: LD_VAR 0 10
44786: NOT
44787: OR
44788: IFFALSE 44823
// begin result := [ chassis , engine , control , weapon ] ;
44790: LD_ADDR_VAR 0 6
44794: PUSH
44795: LD_VAR 0 2
44799: PUSH
44800: LD_VAR 0 3
44804: PUSH
44805: LD_VAR 0 4
44809: PUSH
44810: LD_VAR 0 5
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: ST_TO_ADDR
// exit ;
44821: GO 45114
// end ; if not chassis in _chassis then
44823: LD_VAR 0 2
44827: PUSH
44828: LD_VAR 0 9
44832: IN
44833: NOT
44834: IFFALSE 44860
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44836: LD_ADDR_VAR 0 2
44840: PUSH
44841: LD_VAR 0 9
44845: PUSH
44846: LD_INT 1
44848: PPUSH
44849: LD_VAR 0 9
44853: PPUSH
44854: CALL_OW 12
44858: ARRAY
44859: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44860: LD_VAR 0 2
44864: PPUSH
44865: LD_VAR 0 3
44869: PPUSH
44870: CALL 45119 0 2
44874: NOT
44875: IFFALSE 44934
// repeat engine := _engine [ 1 ] ;
44877: LD_ADDR_VAR 0 3
44881: PUSH
44882: LD_VAR 0 11
44886: PUSH
44887: LD_INT 1
44889: ARRAY
44890: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44891: LD_ADDR_VAR 0 11
44895: PUSH
44896: LD_VAR 0 11
44900: PPUSH
44901: LD_INT 1
44903: PPUSH
44904: CALL_OW 3
44908: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44909: LD_VAR 0 2
44913: PPUSH
44914: LD_VAR 0 3
44918: PPUSH
44919: CALL 45119 0 2
44923: PUSH
44924: LD_VAR 0 11
44928: PUSH
44929: EMPTY
44930: EQUAL
44931: OR
44932: IFFALSE 44877
// if not control in _control then
44934: LD_VAR 0 4
44938: PUSH
44939: LD_VAR 0 12
44943: IN
44944: NOT
44945: IFFALSE 44971
// control := _control [ rand ( 1 , _control ) ] ;
44947: LD_ADDR_VAR 0 4
44951: PUSH
44952: LD_VAR 0 12
44956: PUSH
44957: LD_INT 1
44959: PPUSH
44960: LD_VAR 0 12
44964: PPUSH
44965: CALL_OW 12
44969: ARRAY
44970: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44971: LD_VAR 0 2
44975: PPUSH
44976: LD_VAR 0 5
44980: PPUSH
44981: CALL 45339 0 2
44985: NOT
44986: IFFALSE 45045
// repeat weapon := _weapon [ 1 ] ;
44988: LD_ADDR_VAR 0 5
44992: PUSH
44993: LD_VAR 0 10
44997: PUSH
44998: LD_INT 1
45000: ARRAY
45001: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
45002: LD_ADDR_VAR 0 10
45006: PUSH
45007: LD_VAR 0 10
45011: PPUSH
45012: LD_INT 1
45014: PPUSH
45015: CALL_OW 3
45019: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
45020: LD_VAR 0 2
45024: PPUSH
45025: LD_VAR 0 5
45029: PPUSH
45030: CALL 45339 0 2
45034: PUSH
45035: LD_VAR 0 10
45039: PUSH
45040: EMPTY
45041: EQUAL
45042: OR
45043: IFFALSE 44988
// result := [ ] ;
45045: LD_ADDR_VAR 0 6
45049: PUSH
45050: EMPTY
45051: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45052: LD_VAR 0 1
45056: PPUSH
45057: LD_VAR 0 2
45061: PPUSH
45062: LD_VAR 0 3
45066: PPUSH
45067: LD_VAR 0 4
45071: PPUSH
45072: LD_VAR 0 5
45076: PPUSH
45077: CALL_OW 448
45081: IFFALSE 45114
// result := [ chassis , engine , control , weapon ] ;
45083: LD_ADDR_VAR 0 6
45087: PUSH
45088: LD_VAR 0 2
45092: PUSH
45093: LD_VAR 0 3
45097: PUSH
45098: LD_VAR 0 4
45102: PUSH
45103: LD_VAR 0 5
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: ST_TO_ADDR
// end ;
45114: LD_VAR 0 6
45118: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
45119: LD_INT 0
45121: PPUSH
// if not chassis or not engine then
45122: LD_VAR 0 1
45126: NOT
45127: PUSH
45128: LD_VAR 0 2
45132: NOT
45133: OR
45134: IFFALSE 45138
// exit ;
45136: GO 45334
// case engine of engine_solar :
45138: LD_VAR 0 2
45142: PUSH
45143: LD_INT 2
45145: DOUBLE
45146: EQUAL
45147: IFTRUE 45151
45149: GO 45189
45151: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
45152: LD_ADDR_VAR 0 3
45156: PUSH
45157: LD_INT 11
45159: PUSH
45160: LD_INT 12
45162: PUSH
45163: LD_INT 13
45165: PUSH
45166: LD_INT 14
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: LD_INT 2
45174: PUSH
45175: LD_INT 3
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: ST_TO_ADDR
45187: GO 45318
45189: LD_INT 1
45191: DOUBLE
45192: EQUAL
45193: IFTRUE 45197
45195: GO 45259
45197: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
45198: LD_ADDR_VAR 0 3
45202: PUSH
45203: LD_INT 11
45205: PUSH
45206: LD_INT 12
45208: PUSH
45209: LD_INT 13
45211: PUSH
45212: LD_INT 14
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: LD_INT 2
45220: PUSH
45221: LD_INT 3
45223: PUSH
45224: LD_INT 4
45226: PUSH
45227: LD_INT 5
45229: PUSH
45230: LD_INT 21
45232: PUSH
45233: LD_INT 23
45235: PUSH
45236: LD_INT 22
45238: PUSH
45239: LD_INT 24
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: ST_TO_ADDR
45257: GO 45318
45259: LD_INT 3
45261: DOUBLE
45262: EQUAL
45263: IFTRUE 45267
45265: GO 45317
45267: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45268: LD_ADDR_VAR 0 3
45272: PUSH
45273: LD_INT 13
45275: PUSH
45276: LD_INT 14
45278: PUSH
45279: LD_INT 2
45281: PUSH
45282: LD_INT 3
45284: PUSH
45285: LD_INT 4
45287: PUSH
45288: LD_INT 5
45290: PUSH
45291: LD_INT 21
45293: PUSH
45294: LD_INT 22
45296: PUSH
45297: LD_INT 23
45299: PUSH
45300: LD_INT 24
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: ST_TO_ADDR
45315: GO 45318
45317: POP
// result := ( chassis in result ) ;
45318: LD_ADDR_VAR 0 3
45322: PUSH
45323: LD_VAR 0 1
45327: PUSH
45328: LD_VAR 0 3
45332: IN
45333: ST_TO_ADDR
// end ;
45334: LD_VAR 0 3
45338: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
45339: LD_INT 0
45341: PPUSH
// if not chassis or not weapon then
45342: LD_VAR 0 1
45346: NOT
45347: PUSH
45348: LD_VAR 0 2
45352: NOT
45353: OR
45354: IFFALSE 45358
// exit ;
45356: GO 46420
// case weapon of us_machine_gun :
45358: LD_VAR 0 2
45362: PUSH
45363: LD_INT 2
45365: DOUBLE
45366: EQUAL
45367: IFTRUE 45371
45369: GO 45401
45371: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
45372: LD_ADDR_VAR 0 3
45376: PUSH
45377: LD_INT 1
45379: PUSH
45380: LD_INT 2
45382: PUSH
45383: LD_INT 3
45385: PUSH
45386: LD_INT 4
45388: PUSH
45389: LD_INT 5
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: ST_TO_ADDR
45399: GO 46404
45401: LD_INT 3
45403: DOUBLE
45404: EQUAL
45405: IFTRUE 45409
45407: GO 45439
45409: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
45410: LD_ADDR_VAR 0 3
45414: PUSH
45415: LD_INT 1
45417: PUSH
45418: LD_INT 2
45420: PUSH
45421: LD_INT 3
45423: PUSH
45424: LD_INT 4
45426: PUSH
45427: LD_INT 5
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: ST_TO_ADDR
45437: GO 46404
45439: LD_INT 11
45441: DOUBLE
45442: EQUAL
45443: IFTRUE 45447
45445: GO 45477
45447: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45448: LD_ADDR_VAR 0 3
45452: PUSH
45453: LD_INT 1
45455: PUSH
45456: LD_INT 2
45458: PUSH
45459: LD_INT 3
45461: PUSH
45462: LD_INT 4
45464: PUSH
45465: LD_INT 5
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: ST_TO_ADDR
45475: GO 46404
45477: LD_INT 4
45479: DOUBLE
45480: EQUAL
45481: IFTRUE 45485
45483: GO 45511
45485: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45486: LD_ADDR_VAR 0 3
45490: PUSH
45491: LD_INT 2
45493: PUSH
45494: LD_INT 3
45496: PUSH
45497: LD_INT 4
45499: PUSH
45500: LD_INT 5
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: ST_TO_ADDR
45509: GO 46404
45511: LD_INT 5
45513: DOUBLE
45514: EQUAL
45515: IFTRUE 45519
45517: GO 45545
45519: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45520: LD_ADDR_VAR 0 3
45524: PUSH
45525: LD_INT 2
45527: PUSH
45528: LD_INT 3
45530: PUSH
45531: LD_INT 4
45533: PUSH
45534: LD_INT 5
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: ST_TO_ADDR
45543: GO 46404
45545: LD_INT 9
45547: DOUBLE
45548: EQUAL
45549: IFTRUE 45553
45551: GO 45579
45553: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45554: LD_ADDR_VAR 0 3
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: LD_INT 3
45564: PUSH
45565: LD_INT 4
45567: PUSH
45568: LD_INT 5
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: ST_TO_ADDR
45577: GO 46404
45579: LD_INT 7
45581: DOUBLE
45582: EQUAL
45583: IFTRUE 45587
45585: GO 45613
45587: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45588: LD_ADDR_VAR 0 3
45592: PUSH
45593: LD_INT 2
45595: PUSH
45596: LD_INT 3
45598: PUSH
45599: LD_INT 4
45601: PUSH
45602: LD_INT 5
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: ST_TO_ADDR
45611: GO 46404
45613: LD_INT 12
45615: DOUBLE
45616: EQUAL
45617: IFTRUE 45621
45619: GO 45647
45621: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45622: LD_ADDR_VAR 0 3
45626: PUSH
45627: LD_INT 2
45629: PUSH
45630: LD_INT 3
45632: PUSH
45633: LD_INT 4
45635: PUSH
45636: LD_INT 5
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: ST_TO_ADDR
45645: GO 46404
45647: LD_INT 13
45649: DOUBLE
45650: EQUAL
45651: IFTRUE 45655
45653: GO 45681
45655: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45656: LD_ADDR_VAR 0 3
45660: PUSH
45661: LD_INT 2
45663: PUSH
45664: LD_INT 3
45666: PUSH
45667: LD_INT 4
45669: PUSH
45670: LD_INT 5
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: ST_TO_ADDR
45679: GO 46404
45681: LD_INT 14
45683: DOUBLE
45684: EQUAL
45685: IFTRUE 45689
45687: GO 45707
45689: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45690: LD_ADDR_VAR 0 3
45694: PUSH
45695: LD_INT 4
45697: PUSH
45698: LD_INT 5
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: ST_TO_ADDR
45705: GO 46404
45707: LD_INT 6
45709: DOUBLE
45710: EQUAL
45711: IFTRUE 45715
45713: GO 45733
45715: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45716: LD_ADDR_VAR 0 3
45720: PUSH
45721: LD_INT 4
45723: PUSH
45724: LD_INT 5
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: ST_TO_ADDR
45731: GO 46404
45733: LD_INT 10
45735: DOUBLE
45736: EQUAL
45737: IFTRUE 45741
45739: GO 45759
45741: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45742: LD_ADDR_VAR 0 3
45746: PUSH
45747: LD_INT 4
45749: PUSH
45750: LD_INT 5
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: ST_TO_ADDR
45757: GO 46404
45759: LD_INT 22
45761: DOUBLE
45762: EQUAL
45763: IFTRUE 45767
45765: GO 45793
45767: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45768: LD_ADDR_VAR 0 3
45772: PUSH
45773: LD_INT 11
45775: PUSH
45776: LD_INT 12
45778: PUSH
45779: LD_INT 13
45781: PUSH
45782: LD_INT 14
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: ST_TO_ADDR
45791: GO 46404
45793: LD_INT 23
45795: DOUBLE
45796: EQUAL
45797: IFTRUE 45801
45799: GO 45827
45801: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45802: LD_ADDR_VAR 0 3
45806: PUSH
45807: LD_INT 11
45809: PUSH
45810: LD_INT 12
45812: PUSH
45813: LD_INT 13
45815: PUSH
45816: LD_INT 14
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: ST_TO_ADDR
45825: GO 46404
45827: LD_INT 24
45829: DOUBLE
45830: EQUAL
45831: IFTRUE 45835
45833: GO 45861
45835: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45836: LD_ADDR_VAR 0 3
45840: PUSH
45841: LD_INT 11
45843: PUSH
45844: LD_INT 12
45846: PUSH
45847: LD_INT 13
45849: PUSH
45850: LD_INT 14
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: ST_TO_ADDR
45859: GO 46404
45861: LD_INT 30
45863: DOUBLE
45864: EQUAL
45865: IFTRUE 45869
45867: GO 45895
45869: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45870: LD_ADDR_VAR 0 3
45874: PUSH
45875: LD_INT 11
45877: PUSH
45878: LD_INT 12
45880: PUSH
45881: LD_INT 13
45883: PUSH
45884: LD_INT 14
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: ST_TO_ADDR
45893: GO 46404
45895: LD_INT 25
45897: DOUBLE
45898: EQUAL
45899: IFTRUE 45903
45901: GO 45921
45903: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45904: LD_ADDR_VAR 0 3
45908: PUSH
45909: LD_INT 13
45911: PUSH
45912: LD_INT 14
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: ST_TO_ADDR
45919: GO 46404
45921: LD_INT 27
45923: DOUBLE
45924: EQUAL
45925: IFTRUE 45929
45927: GO 45947
45929: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45930: LD_ADDR_VAR 0 3
45934: PUSH
45935: LD_INT 13
45937: PUSH
45938: LD_INT 14
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: ST_TO_ADDR
45945: GO 46404
45947: LD_EXP 70
45951: DOUBLE
45952: EQUAL
45953: IFTRUE 45957
45955: GO 45983
45957: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45958: LD_ADDR_VAR 0 3
45962: PUSH
45963: LD_INT 11
45965: PUSH
45966: LD_INT 12
45968: PUSH
45969: LD_INT 13
45971: PUSH
45972: LD_INT 14
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: ST_TO_ADDR
45981: GO 46404
45983: LD_INT 28
45985: DOUBLE
45986: EQUAL
45987: IFTRUE 45991
45989: GO 46009
45991: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45992: LD_ADDR_VAR 0 3
45996: PUSH
45997: LD_INT 13
45999: PUSH
46000: LD_INT 14
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: ST_TO_ADDR
46007: GO 46404
46009: LD_INT 29
46011: DOUBLE
46012: EQUAL
46013: IFTRUE 46017
46015: GO 46035
46017: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
46018: LD_ADDR_VAR 0 3
46022: PUSH
46023: LD_INT 13
46025: PUSH
46026: LD_INT 14
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: ST_TO_ADDR
46033: GO 46404
46035: LD_INT 31
46037: DOUBLE
46038: EQUAL
46039: IFTRUE 46043
46041: GO 46061
46043: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
46044: LD_ADDR_VAR 0 3
46048: PUSH
46049: LD_INT 13
46051: PUSH
46052: LD_INT 14
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: ST_TO_ADDR
46059: GO 46404
46061: LD_INT 26
46063: DOUBLE
46064: EQUAL
46065: IFTRUE 46069
46067: GO 46087
46069: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
46070: LD_ADDR_VAR 0 3
46074: PUSH
46075: LD_INT 13
46077: PUSH
46078: LD_INT 14
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: ST_TO_ADDR
46085: GO 46404
46087: LD_INT 42
46089: DOUBLE
46090: EQUAL
46091: IFTRUE 46095
46093: GO 46121
46095: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
46096: LD_ADDR_VAR 0 3
46100: PUSH
46101: LD_INT 21
46103: PUSH
46104: LD_INT 22
46106: PUSH
46107: LD_INT 23
46109: PUSH
46110: LD_INT 24
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: ST_TO_ADDR
46119: GO 46404
46121: LD_INT 43
46123: DOUBLE
46124: EQUAL
46125: IFTRUE 46129
46127: GO 46155
46129: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
46130: LD_ADDR_VAR 0 3
46134: PUSH
46135: LD_INT 21
46137: PUSH
46138: LD_INT 22
46140: PUSH
46141: LD_INT 23
46143: PUSH
46144: LD_INT 24
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: ST_TO_ADDR
46153: GO 46404
46155: LD_INT 44
46157: DOUBLE
46158: EQUAL
46159: IFTRUE 46163
46161: GO 46189
46163: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
46164: LD_ADDR_VAR 0 3
46168: PUSH
46169: LD_INT 21
46171: PUSH
46172: LD_INT 22
46174: PUSH
46175: LD_INT 23
46177: PUSH
46178: LD_INT 24
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: ST_TO_ADDR
46187: GO 46404
46189: LD_INT 45
46191: DOUBLE
46192: EQUAL
46193: IFTRUE 46197
46195: GO 46223
46197: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
46198: LD_ADDR_VAR 0 3
46202: PUSH
46203: LD_INT 21
46205: PUSH
46206: LD_INT 22
46208: PUSH
46209: LD_INT 23
46211: PUSH
46212: LD_INT 24
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: ST_TO_ADDR
46221: GO 46404
46223: LD_INT 49
46225: DOUBLE
46226: EQUAL
46227: IFTRUE 46231
46229: GO 46257
46231: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
46232: LD_ADDR_VAR 0 3
46236: PUSH
46237: LD_INT 21
46239: PUSH
46240: LD_INT 22
46242: PUSH
46243: LD_INT 23
46245: PUSH
46246: LD_INT 24
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: ST_TO_ADDR
46255: GO 46404
46257: LD_INT 51
46259: DOUBLE
46260: EQUAL
46261: IFTRUE 46265
46263: GO 46291
46265: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
46266: LD_ADDR_VAR 0 3
46270: PUSH
46271: LD_INT 21
46273: PUSH
46274: LD_INT 22
46276: PUSH
46277: LD_INT 23
46279: PUSH
46280: LD_INT 24
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: ST_TO_ADDR
46289: GO 46404
46291: LD_INT 52
46293: DOUBLE
46294: EQUAL
46295: IFTRUE 46299
46297: GO 46325
46299: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
46300: LD_ADDR_VAR 0 3
46304: PUSH
46305: LD_INT 21
46307: PUSH
46308: LD_INT 22
46310: PUSH
46311: LD_INT 23
46313: PUSH
46314: LD_INT 24
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: ST_TO_ADDR
46323: GO 46404
46325: LD_INT 53
46327: DOUBLE
46328: EQUAL
46329: IFTRUE 46333
46331: GO 46351
46333: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
46334: LD_ADDR_VAR 0 3
46338: PUSH
46339: LD_INT 23
46341: PUSH
46342: LD_INT 24
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: ST_TO_ADDR
46349: GO 46404
46351: LD_INT 46
46353: DOUBLE
46354: EQUAL
46355: IFTRUE 46359
46357: GO 46377
46359: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
46360: LD_ADDR_VAR 0 3
46364: PUSH
46365: LD_INT 23
46367: PUSH
46368: LD_INT 24
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: ST_TO_ADDR
46375: GO 46404
46377: LD_INT 47
46379: DOUBLE
46380: EQUAL
46381: IFTRUE 46385
46383: GO 46403
46385: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46386: LD_ADDR_VAR 0 3
46390: PUSH
46391: LD_INT 23
46393: PUSH
46394: LD_INT 24
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: ST_TO_ADDR
46401: GO 46404
46403: POP
// result := ( chassis in result ) ;
46404: LD_ADDR_VAR 0 3
46408: PUSH
46409: LD_VAR 0 1
46413: PUSH
46414: LD_VAR 0 3
46418: IN
46419: ST_TO_ADDR
// end ;
46420: LD_VAR 0 3
46424: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46425: LD_INT 0
46427: PPUSH
46428: PPUSH
46429: PPUSH
46430: PPUSH
46431: PPUSH
46432: PPUSH
46433: PPUSH
// result := array ;
46434: LD_ADDR_VAR 0 5
46438: PUSH
46439: LD_VAR 0 1
46443: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46444: LD_VAR 0 1
46448: NOT
46449: PUSH
46450: LD_VAR 0 2
46454: NOT
46455: OR
46456: PUSH
46457: LD_VAR 0 3
46461: NOT
46462: OR
46463: PUSH
46464: LD_VAR 0 2
46468: PUSH
46469: LD_VAR 0 1
46473: GREATER
46474: OR
46475: PUSH
46476: LD_VAR 0 3
46480: PUSH
46481: LD_VAR 0 1
46485: GREATER
46486: OR
46487: IFFALSE 46491
// exit ;
46489: GO 46787
// if direction then
46491: LD_VAR 0 4
46495: IFFALSE 46559
// begin d := 1 ;
46497: LD_ADDR_VAR 0 9
46501: PUSH
46502: LD_INT 1
46504: ST_TO_ADDR
// if i_from > i_to then
46505: LD_VAR 0 2
46509: PUSH
46510: LD_VAR 0 3
46514: GREATER
46515: IFFALSE 46541
// length := ( array - i_from ) + i_to else
46517: LD_ADDR_VAR 0 11
46521: PUSH
46522: LD_VAR 0 1
46526: PUSH
46527: LD_VAR 0 2
46531: MINUS
46532: PUSH
46533: LD_VAR 0 3
46537: PLUS
46538: ST_TO_ADDR
46539: GO 46557
// length := i_to - i_from ;
46541: LD_ADDR_VAR 0 11
46545: PUSH
46546: LD_VAR 0 3
46550: PUSH
46551: LD_VAR 0 2
46555: MINUS
46556: ST_TO_ADDR
// end else
46557: GO 46620
// begin d := - 1 ;
46559: LD_ADDR_VAR 0 9
46563: PUSH
46564: LD_INT 1
46566: NEG
46567: ST_TO_ADDR
// if i_from > i_to then
46568: LD_VAR 0 2
46572: PUSH
46573: LD_VAR 0 3
46577: GREATER
46578: IFFALSE 46598
// length := i_from - i_to else
46580: LD_ADDR_VAR 0 11
46584: PUSH
46585: LD_VAR 0 2
46589: PUSH
46590: LD_VAR 0 3
46594: MINUS
46595: ST_TO_ADDR
46596: GO 46620
// length := ( array - i_to ) + i_from ;
46598: LD_ADDR_VAR 0 11
46602: PUSH
46603: LD_VAR 0 1
46607: PUSH
46608: LD_VAR 0 3
46612: MINUS
46613: PUSH
46614: LD_VAR 0 2
46618: PLUS
46619: ST_TO_ADDR
// end ; if not length then
46620: LD_VAR 0 11
46624: NOT
46625: IFFALSE 46629
// exit ;
46627: GO 46787
// tmp := array ;
46629: LD_ADDR_VAR 0 10
46633: PUSH
46634: LD_VAR 0 1
46638: ST_TO_ADDR
// for i = 1 to length do
46639: LD_ADDR_VAR 0 6
46643: PUSH
46644: DOUBLE
46645: LD_INT 1
46647: DEC
46648: ST_TO_ADDR
46649: LD_VAR 0 11
46653: PUSH
46654: FOR_TO
46655: IFFALSE 46775
// begin for j = 1 to array do
46657: LD_ADDR_VAR 0 7
46661: PUSH
46662: DOUBLE
46663: LD_INT 1
46665: DEC
46666: ST_TO_ADDR
46667: LD_VAR 0 1
46671: PUSH
46672: FOR_TO
46673: IFFALSE 46761
// begin k := j + d ;
46675: LD_ADDR_VAR 0 8
46679: PUSH
46680: LD_VAR 0 7
46684: PUSH
46685: LD_VAR 0 9
46689: PLUS
46690: ST_TO_ADDR
// if k > array then
46691: LD_VAR 0 8
46695: PUSH
46696: LD_VAR 0 1
46700: GREATER
46701: IFFALSE 46711
// k := 1 ;
46703: LD_ADDR_VAR 0 8
46707: PUSH
46708: LD_INT 1
46710: ST_TO_ADDR
// if not k then
46711: LD_VAR 0 8
46715: NOT
46716: IFFALSE 46728
// k := array ;
46718: LD_ADDR_VAR 0 8
46722: PUSH
46723: LD_VAR 0 1
46727: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46728: LD_ADDR_VAR 0 10
46732: PUSH
46733: LD_VAR 0 10
46737: PPUSH
46738: LD_VAR 0 8
46742: PPUSH
46743: LD_VAR 0 1
46747: PUSH
46748: LD_VAR 0 7
46752: ARRAY
46753: PPUSH
46754: CALL_OW 1
46758: ST_TO_ADDR
// end ;
46759: GO 46672
46761: POP
46762: POP
// array := tmp ;
46763: LD_ADDR_VAR 0 1
46767: PUSH
46768: LD_VAR 0 10
46772: ST_TO_ADDR
// end ;
46773: GO 46654
46775: POP
46776: POP
// result := array ;
46777: LD_ADDR_VAR 0 5
46781: PUSH
46782: LD_VAR 0 1
46786: ST_TO_ADDR
// end ;
46787: LD_VAR 0 5
46791: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46792: LD_INT 0
46794: PPUSH
46795: PPUSH
// result := 0 ;
46796: LD_ADDR_VAR 0 3
46800: PUSH
46801: LD_INT 0
46803: ST_TO_ADDR
// if not array or not value in array then
46804: LD_VAR 0 1
46808: NOT
46809: PUSH
46810: LD_VAR 0 2
46814: PUSH
46815: LD_VAR 0 1
46819: IN
46820: NOT
46821: OR
46822: IFFALSE 46826
// exit ;
46824: GO 46880
// for i = 1 to array do
46826: LD_ADDR_VAR 0 4
46830: PUSH
46831: DOUBLE
46832: LD_INT 1
46834: DEC
46835: ST_TO_ADDR
46836: LD_VAR 0 1
46840: PUSH
46841: FOR_TO
46842: IFFALSE 46878
// if value = array [ i ] then
46844: LD_VAR 0 2
46848: PUSH
46849: LD_VAR 0 1
46853: PUSH
46854: LD_VAR 0 4
46858: ARRAY
46859: EQUAL
46860: IFFALSE 46876
// begin result := i ;
46862: LD_ADDR_VAR 0 3
46866: PUSH
46867: LD_VAR 0 4
46871: ST_TO_ADDR
// exit ;
46872: POP
46873: POP
46874: GO 46880
// end ;
46876: GO 46841
46878: POP
46879: POP
// end ;
46880: LD_VAR 0 3
46884: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46885: LD_INT 0
46887: PPUSH
// vc_chassis := chassis ;
46888: LD_ADDR_OWVAR 37
46892: PUSH
46893: LD_VAR 0 1
46897: ST_TO_ADDR
// vc_engine := engine ;
46898: LD_ADDR_OWVAR 39
46902: PUSH
46903: LD_VAR 0 2
46907: ST_TO_ADDR
// vc_control := control ;
46908: LD_ADDR_OWVAR 38
46912: PUSH
46913: LD_VAR 0 3
46917: ST_TO_ADDR
// vc_weapon := weapon ;
46918: LD_ADDR_OWVAR 40
46922: PUSH
46923: LD_VAR 0 4
46927: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46928: LD_ADDR_OWVAR 41
46932: PUSH
46933: LD_VAR 0 5
46937: ST_TO_ADDR
// end ;
46938: LD_VAR 0 6
46942: RET
// export function WantPlant ( unit ) ; var task ; begin
46943: LD_INT 0
46945: PPUSH
46946: PPUSH
// result := false ;
46947: LD_ADDR_VAR 0 2
46951: PUSH
46952: LD_INT 0
46954: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46955: LD_ADDR_VAR 0 3
46959: PUSH
46960: LD_VAR 0 1
46964: PPUSH
46965: CALL_OW 437
46969: ST_TO_ADDR
// if task then
46970: LD_VAR 0 3
46974: IFFALSE 47002
// if task [ 1 ] [ 1 ] = p then
46976: LD_VAR 0 3
46980: PUSH
46981: LD_INT 1
46983: ARRAY
46984: PUSH
46985: LD_INT 1
46987: ARRAY
46988: PUSH
46989: LD_STRING p
46991: EQUAL
46992: IFFALSE 47002
// result := true ;
46994: LD_ADDR_VAR 0 2
46998: PUSH
46999: LD_INT 1
47001: ST_TO_ADDR
// end ;
47002: LD_VAR 0 2
47006: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
47007: LD_INT 0
47009: PPUSH
47010: PPUSH
47011: PPUSH
47012: PPUSH
// if pos < 1 then
47013: LD_VAR 0 2
47017: PUSH
47018: LD_INT 1
47020: LESS
47021: IFFALSE 47025
// exit ;
47023: GO 47328
// if pos = 1 then
47025: LD_VAR 0 2
47029: PUSH
47030: LD_INT 1
47032: EQUAL
47033: IFFALSE 47066
// result := Replace ( arr , pos [ 1 ] , value ) else
47035: LD_ADDR_VAR 0 4
47039: PUSH
47040: LD_VAR 0 1
47044: PPUSH
47045: LD_VAR 0 2
47049: PUSH
47050: LD_INT 1
47052: ARRAY
47053: PPUSH
47054: LD_VAR 0 3
47058: PPUSH
47059: CALL_OW 1
47063: ST_TO_ADDR
47064: GO 47328
// begin tmp := arr ;
47066: LD_ADDR_VAR 0 6
47070: PUSH
47071: LD_VAR 0 1
47075: ST_TO_ADDR
// s_arr := [ tmp ] ;
47076: LD_ADDR_VAR 0 7
47080: PUSH
47081: LD_VAR 0 6
47085: PUSH
47086: EMPTY
47087: LIST
47088: ST_TO_ADDR
// for i = 1 to pos - 1 do
47089: LD_ADDR_VAR 0 5
47093: PUSH
47094: DOUBLE
47095: LD_INT 1
47097: DEC
47098: ST_TO_ADDR
47099: LD_VAR 0 2
47103: PUSH
47104: LD_INT 1
47106: MINUS
47107: PUSH
47108: FOR_TO
47109: IFFALSE 47154
// begin tmp := tmp [ pos [ i ] ] ;
47111: LD_ADDR_VAR 0 6
47115: PUSH
47116: LD_VAR 0 6
47120: PUSH
47121: LD_VAR 0 2
47125: PUSH
47126: LD_VAR 0 5
47130: ARRAY
47131: ARRAY
47132: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
47133: LD_ADDR_VAR 0 7
47137: PUSH
47138: LD_VAR 0 7
47142: PUSH
47143: LD_VAR 0 6
47147: PUSH
47148: EMPTY
47149: LIST
47150: ADD
47151: ST_TO_ADDR
// end ;
47152: GO 47108
47154: POP
47155: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
47156: LD_ADDR_VAR 0 6
47160: PUSH
47161: LD_VAR 0 6
47165: PPUSH
47166: LD_VAR 0 2
47170: PUSH
47171: LD_VAR 0 2
47175: ARRAY
47176: PPUSH
47177: LD_VAR 0 3
47181: PPUSH
47182: CALL_OW 1
47186: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
47187: LD_ADDR_VAR 0 7
47191: PUSH
47192: LD_VAR 0 7
47196: PPUSH
47197: LD_VAR 0 7
47201: PPUSH
47202: LD_VAR 0 6
47206: PPUSH
47207: CALL_OW 1
47211: ST_TO_ADDR
// for i = s_arr downto 2 do
47212: LD_ADDR_VAR 0 5
47216: PUSH
47217: DOUBLE
47218: LD_VAR 0 7
47222: INC
47223: ST_TO_ADDR
47224: LD_INT 2
47226: PUSH
47227: FOR_DOWNTO
47228: IFFALSE 47312
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
47230: LD_ADDR_VAR 0 6
47234: PUSH
47235: LD_VAR 0 7
47239: PUSH
47240: LD_VAR 0 5
47244: PUSH
47245: LD_INT 1
47247: MINUS
47248: ARRAY
47249: PPUSH
47250: LD_VAR 0 2
47254: PUSH
47255: LD_VAR 0 5
47259: PUSH
47260: LD_INT 1
47262: MINUS
47263: ARRAY
47264: PPUSH
47265: LD_VAR 0 7
47269: PUSH
47270: LD_VAR 0 5
47274: ARRAY
47275: PPUSH
47276: CALL_OW 1
47280: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
47281: LD_ADDR_VAR 0 7
47285: PUSH
47286: LD_VAR 0 7
47290: PPUSH
47291: LD_VAR 0 5
47295: PUSH
47296: LD_INT 1
47298: MINUS
47299: PPUSH
47300: LD_VAR 0 6
47304: PPUSH
47305: CALL_OW 1
47309: ST_TO_ADDR
// end ;
47310: GO 47227
47312: POP
47313: POP
// result := s_arr [ 1 ] ;
47314: LD_ADDR_VAR 0 4
47318: PUSH
47319: LD_VAR 0 7
47323: PUSH
47324: LD_INT 1
47326: ARRAY
47327: ST_TO_ADDR
// end ; end ;
47328: LD_VAR 0 4
47332: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
47333: LD_INT 0
47335: PPUSH
47336: PPUSH
// if not list then
47337: LD_VAR 0 1
47341: NOT
47342: IFFALSE 47346
// exit ;
47344: GO 47437
// i := list [ pos1 ] ;
47346: LD_ADDR_VAR 0 5
47350: PUSH
47351: LD_VAR 0 1
47355: PUSH
47356: LD_VAR 0 2
47360: ARRAY
47361: ST_TO_ADDR
// if not i then
47362: LD_VAR 0 5
47366: NOT
47367: IFFALSE 47371
// exit ;
47369: GO 47437
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
47371: LD_ADDR_VAR 0 1
47375: PUSH
47376: LD_VAR 0 1
47380: PPUSH
47381: LD_VAR 0 2
47385: PPUSH
47386: LD_VAR 0 1
47390: PUSH
47391: LD_VAR 0 3
47395: ARRAY
47396: PPUSH
47397: CALL_OW 1
47401: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47402: LD_ADDR_VAR 0 1
47406: PUSH
47407: LD_VAR 0 1
47411: PPUSH
47412: LD_VAR 0 3
47416: PPUSH
47417: LD_VAR 0 5
47421: PPUSH
47422: CALL_OW 1
47426: ST_TO_ADDR
// result := list ;
47427: LD_ADDR_VAR 0 4
47431: PUSH
47432: LD_VAR 0 1
47436: ST_TO_ADDR
// end ;
47437: LD_VAR 0 4
47441: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47442: LD_INT 0
47444: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47445: LD_ADDR_VAR 0 5
47449: PUSH
47450: LD_VAR 0 1
47454: PPUSH
47455: CALL_OW 250
47459: PPUSH
47460: LD_VAR 0 1
47464: PPUSH
47465: CALL_OW 251
47469: PPUSH
47470: LD_VAR 0 2
47474: PPUSH
47475: LD_VAR 0 3
47479: PPUSH
47480: LD_VAR 0 4
47484: PPUSH
47485: CALL 47495 0 5
47489: ST_TO_ADDR
// end ;
47490: LD_VAR 0 5
47494: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47495: LD_INT 0
47497: PPUSH
47498: PPUSH
47499: PPUSH
47500: PPUSH
// if not list then
47501: LD_VAR 0 3
47505: NOT
47506: IFFALSE 47510
// exit ;
47508: GO 47898
// result := [ ] ;
47510: LD_ADDR_VAR 0 6
47514: PUSH
47515: EMPTY
47516: ST_TO_ADDR
// for i in list do
47517: LD_ADDR_VAR 0 7
47521: PUSH
47522: LD_VAR 0 3
47526: PUSH
47527: FOR_IN
47528: IFFALSE 47730
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47530: LD_ADDR_VAR 0 9
47534: PUSH
47535: LD_VAR 0 7
47539: PPUSH
47540: LD_VAR 0 1
47544: PPUSH
47545: LD_VAR 0 2
47549: PPUSH
47550: CALL_OW 297
47554: ST_TO_ADDR
// if not result then
47555: LD_VAR 0 6
47559: NOT
47560: IFFALSE 47586
// result := [ [ i , tmp ] ] else
47562: LD_ADDR_VAR 0 6
47566: PUSH
47567: LD_VAR 0 7
47571: PUSH
47572: LD_VAR 0 9
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: EMPTY
47582: LIST
47583: ST_TO_ADDR
47584: GO 47728
// begin if result [ result ] [ 2 ] < tmp then
47586: LD_VAR 0 6
47590: PUSH
47591: LD_VAR 0 6
47595: ARRAY
47596: PUSH
47597: LD_INT 2
47599: ARRAY
47600: PUSH
47601: LD_VAR 0 9
47605: LESS
47606: IFFALSE 47648
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47608: LD_ADDR_VAR 0 6
47612: PUSH
47613: LD_VAR 0 6
47617: PPUSH
47618: LD_VAR 0 6
47622: PUSH
47623: LD_INT 1
47625: PLUS
47626: PPUSH
47627: LD_VAR 0 7
47631: PUSH
47632: LD_VAR 0 9
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PPUSH
47641: CALL_OW 2
47645: ST_TO_ADDR
47646: GO 47728
// for j = 1 to result do
47648: LD_ADDR_VAR 0 8
47652: PUSH
47653: DOUBLE
47654: LD_INT 1
47656: DEC
47657: ST_TO_ADDR
47658: LD_VAR 0 6
47662: PUSH
47663: FOR_TO
47664: IFFALSE 47726
// begin if tmp < result [ j ] [ 2 ] then
47666: LD_VAR 0 9
47670: PUSH
47671: LD_VAR 0 6
47675: PUSH
47676: LD_VAR 0 8
47680: ARRAY
47681: PUSH
47682: LD_INT 2
47684: ARRAY
47685: LESS
47686: IFFALSE 47724
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47688: LD_ADDR_VAR 0 6
47692: PUSH
47693: LD_VAR 0 6
47697: PPUSH
47698: LD_VAR 0 8
47702: PPUSH
47703: LD_VAR 0 7
47707: PUSH
47708: LD_VAR 0 9
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PPUSH
47717: CALL_OW 2
47721: ST_TO_ADDR
// break ;
47722: GO 47726
// end ; end ;
47724: GO 47663
47726: POP
47727: POP
// end ; end ;
47728: GO 47527
47730: POP
47731: POP
// if result and not asc then
47732: LD_VAR 0 6
47736: PUSH
47737: LD_VAR 0 4
47741: NOT
47742: AND
47743: IFFALSE 47818
// begin tmp := result ;
47745: LD_ADDR_VAR 0 9
47749: PUSH
47750: LD_VAR 0 6
47754: ST_TO_ADDR
// for i = tmp downto 1 do
47755: LD_ADDR_VAR 0 7
47759: PUSH
47760: DOUBLE
47761: LD_VAR 0 9
47765: INC
47766: ST_TO_ADDR
47767: LD_INT 1
47769: PUSH
47770: FOR_DOWNTO
47771: IFFALSE 47816
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47773: LD_ADDR_VAR 0 6
47777: PUSH
47778: LD_VAR 0 6
47782: PPUSH
47783: LD_VAR 0 9
47787: PUSH
47788: LD_VAR 0 7
47792: MINUS
47793: PUSH
47794: LD_INT 1
47796: PLUS
47797: PPUSH
47798: LD_VAR 0 9
47802: PUSH
47803: LD_VAR 0 7
47807: ARRAY
47808: PPUSH
47809: CALL_OW 1
47813: ST_TO_ADDR
47814: GO 47770
47816: POP
47817: POP
// end ; tmp := [ ] ;
47818: LD_ADDR_VAR 0 9
47822: PUSH
47823: EMPTY
47824: ST_TO_ADDR
// if mode then
47825: LD_VAR 0 5
47829: IFFALSE 47898
// begin for i = 1 to result do
47831: LD_ADDR_VAR 0 7
47835: PUSH
47836: DOUBLE
47837: LD_INT 1
47839: DEC
47840: ST_TO_ADDR
47841: LD_VAR 0 6
47845: PUSH
47846: FOR_TO
47847: IFFALSE 47886
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47849: LD_ADDR_VAR 0 9
47853: PUSH
47854: LD_VAR 0 9
47858: PPUSH
47859: LD_VAR 0 7
47863: PPUSH
47864: LD_VAR 0 6
47868: PUSH
47869: LD_VAR 0 7
47873: ARRAY
47874: PUSH
47875: LD_INT 1
47877: ARRAY
47878: PPUSH
47879: CALL_OW 1
47883: ST_TO_ADDR
47884: GO 47846
47886: POP
47887: POP
// result := tmp ;
47888: LD_ADDR_VAR 0 6
47892: PUSH
47893: LD_VAR 0 9
47897: ST_TO_ADDR
// end ; end ;
47898: LD_VAR 0 6
47902: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47903: LD_INT 0
47905: PPUSH
47906: PPUSH
47907: PPUSH
47908: PPUSH
47909: PPUSH
47910: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47911: LD_ADDR_VAR 0 5
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: EMPTY
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: ST_TO_ADDR
// if not x or not y then
47933: LD_VAR 0 2
47937: NOT
47938: PUSH
47939: LD_VAR 0 3
47943: NOT
47944: OR
47945: IFFALSE 47949
// exit ;
47947: GO 49601
// if not range then
47949: LD_VAR 0 4
47953: NOT
47954: IFFALSE 47964
// range := 10 ;
47956: LD_ADDR_VAR 0 4
47960: PUSH
47961: LD_INT 10
47963: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47964: LD_ADDR_VAR 0 8
47968: PUSH
47969: LD_INT 81
47971: PUSH
47972: LD_VAR 0 1
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 92
47983: PUSH
47984: LD_VAR 0 2
47988: PUSH
47989: LD_VAR 0 3
47993: PUSH
47994: LD_VAR 0 4
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 3
48007: PUSH
48008: LD_INT 21
48010: PUSH
48011: LD_INT 3
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: LIST
48026: PPUSH
48027: CALL_OW 69
48031: ST_TO_ADDR
// if not tmp then
48032: LD_VAR 0 8
48036: NOT
48037: IFFALSE 48041
// exit ;
48039: GO 49601
// for i in tmp do
48041: LD_ADDR_VAR 0 6
48045: PUSH
48046: LD_VAR 0 8
48050: PUSH
48051: FOR_IN
48052: IFFALSE 49576
// begin points := [ 0 , 0 , 0 ] ;
48054: LD_ADDR_VAR 0 9
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: LD_INT 0
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: LIST
48072: ST_TO_ADDR
// bpoints := 1 ;
48073: LD_ADDR_VAR 0 10
48077: PUSH
48078: LD_INT 1
48080: ST_TO_ADDR
// case GetType ( i ) of unit_human :
48081: LD_VAR 0 6
48085: PPUSH
48086: CALL_OW 247
48090: PUSH
48091: LD_INT 1
48093: DOUBLE
48094: EQUAL
48095: IFTRUE 48099
48097: GO 48677
48099: POP
// begin if GetClass ( i ) = 1 then
48100: LD_VAR 0 6
48104: PPUSH
48105: CALL_OW 257
48109: PUSH
48110: LD_INT 1
48112: EQUAL
48113: IFFALSE 48134
// points := [ 10 , 5 , 3 ] ;
48115: LD_ADDR_VAR 0 9
48119: PUSH
48120: LD_INT 10
48122: PUSH
48123: LD_INT 5
48125: PUSH
48126: LD_INT 3
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: LIST
48133: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
48134: LD_VAR 0 6
48138: PPUSH
48139: CALL_OW 257
48143: PUSH
48144: LD_INT 2
48146: PUSH
48147: LD_INT 3
48149: PUSH
48150: LD_INT 4
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: LIST
48157: IN
48158: IFFALSE 48179
// points := [ 3 , 2 , 1 ] ;
48160: LD_ADDR_VAR 0 9
48164: PUSH
48165: LD_INT 3
48167: PUSH
48168: LD_INT 2
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: LIST
48178: ST_TO_ADDR
// if GetClass ( i ) = 5 then
48179: LD_VAR 0 6
48183: PPUSH
48184: CALL_OW 257
48188: PUSH
48189: LD_INT 5
48191: EQUAL
48192: IFFALSE 48213
// points := [ 130 , 5 , 2 ] ;
48194: LD_ADDR_VAR 0 9
48198: PUSH
48199: LD_INT 130
48201: PUSH
48202: LD_INT 5
48204: PUSH
48205: LD_INT 2
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: LIST
48212: ST_TO_ADDR
// if GetClass ( i ) = 8 then
48213: LD_VAR 0 6
48217: PPUSH
48218: CALL_OW 257
48222: PUSH
48223: LD_INT 8
48225: EQUAL
48226: IFFALSE 48247
// points := [ 35 , 35 , 30 ] ;
48228: LD_ADDR_VAR 0 9
48232: PUSH
48233: LD_INT 35
48235: PUSH
48236: LD_INT 35
48238: PUSH
48239: LD_INT 30
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: LIST
48246: ST_TO_ADDR
// if GetClass ( i ) = 9 then
48247: LD_VAR 0 6
48251: PPUSH
48252: CALL_OW 257
48256: PUSH
48257: LD_INT 9
48259: EQUAL
48260: IFFALSE 48281
// points := [ 20 , 55 , 40 ] ;
48262: LD_ADDR_VAR 0 9
48266: PUSH
48267: LD_INT 20
48269: PUSH
48270: LD_INT 55
48272: PUSH
48273: LD_INT 40
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: LIST
48280: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
48281: LD_VAR 0 6
48285: PPUSH
48286: CALL_OW 257
48290: PUSH
48291: LD_INT 12
48293: PUSH
48294: LD_INT 16
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: IN
48301: IFFALSE 48322
// points := [ 5 , 3 , 2 ] ;
48303: LD_ADDR_VAR 0 9
48307: PUSH
48308: LD_INT 5
48310: PUSH
48311: LD_INT 3
48313: PUSH
48314: LD_INT 2
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: LIST
48321: ST_TO_ADDR
// if GetClass ( i ) = 17 then
48322: LD_VAR 0 6
48326: PPUSH
48327: CALL_OW 257
48331: PUSH
48332: LD_INT 17
48334: EQUAL
48335: IFFALSE 48356
// points := [ 100 , 50 , 75 ] ;
48337: LD_ADDR_VAR 0 9
48341: PUSH
48342: LD_INT 100
48344: PUSH
48345: LD_INT 50
48347: PUSH
48348: LD_INT 75
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: LIST
48355: ST_TO_ADDR
// if GetClass ( i ) = 15 then
48356: LD_VAR 0 6
48360: PPUSH
48361: CALL_OW 257
48365: PUSH
48366: LD_INT 15
48368: EQUAL
48369: IFFALSE 48390
// points := [ 10 , 5 , 3 ] ;
48371: LD_ADDR_VAR 0 9
48375: PUSH
48376: LD_INT 10
48378: PUSH
48379: LD_INT 5
48381: PUSH
48382: LD_INT 3
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: LIST
48389: ST_TO_ADDR
// if GetClass ( i ) = 14 then
48390: LD_VAR 0 6
48394: PPUSH
48395: CALL_OW 257
48399: PUSH
48400: LD_INT 14
48402: EQUAL
48403: IFFALSE 48424
// points := [ 10 , 0 , 0 ] ;
48405: LD_ADDR_VAR 0 9
48409: PUSH
48410: LD_INT 10
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: LIST
48423: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48424: LD_VAR 0 6
48428: PPUSH
48429: CALL_OW 257
48433: PUSH
48434: LD_INT 11
48436: EQUAL
48437: IFFALSE 48458
// points := [ 30 , 10 , 5 ] ;
48439: LD_ADDR_VAR 0 9
48443: PUSH
48444: LD_INT 30
48446: PUSH
48447: LD_INT 10
48449: PUSH
48450: LD_INT 5
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: LIST
48457: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48458: LD_VAR 0 1
48462: PPUSH
48463: LD_INT 5
48465: PPUSH
48466: CALL_OW 321
48470: PUSH
48471: LD_INT 2
48473: EQUAL
48474: IFFALSE 48491
// bpoints := bpoints * 1.8 ;
48476: LD_ADDR_VAR 0 10
48480: PUSH
48481: LD_VAR 0 10
48485: PUSH
48486: LD_REAL  1.80000000000000E+0000
48489: MUL
48490: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48491: LD_VAR 0 6
48495: PPUSH
48496: CALL_OW 257
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: LD_INT 2
48506: PUSH
48507: LD_INT 3
48509: PUSH
48510: LD_INT 4
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: IN
48519: PUSH
48520: LD_VAR 0 1
48524: PPUSH
48525: LD_INT 51
48527: PPUSH
48528: CALL_OW 321
48532: PUSH
48533: LD_INT 2
48535: EQUAL
48536: AND
48537: IFFALSE 48554
// bpoints := bpoints * 1.2 ;
48539: LD_ADDR_VAR 0 10
48543: PUSH
48544: LD_VAR 0 10
48548: PUSH
48549: LD_REAL  1.20000000000000E+0000
48552: MUL
48553: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48554: LD_VAR 0 6
48558: PPUSH
48559: CALL_OW 257
48563: PUSH
48564: LD_INT 5
48566: PUSH
48567: LD_INT 7
48569: PUSH
48570: LD_INT 9
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: LIST
48577: IN
48578: PUSH
48579: LD_VAR 0 1
48583: PPUSH
48584: LD_INT 52
48586: PPUSH
48587: CALL_OW 321
48591: PUSH
48592: LD_INT 2
48594: EQUAL
48595: AND
48596: IFFALSE 48613
// bpoints := bpoints * 1.5 ;
48598: LD_ADDR_VAR 0 10
48602: PUSH
48603: LD_VAR 0 10
48607: PUSH
48608: LD_REAL  1.50000000000000E+0000
48611: MUL
48612: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48613: LD_VAR 0 1
48617: PPUSH
48618: LD_INT 66
48620: PPUSH
48621: CALL_OW 321
48625: PUSH
48626: LD_INT 2
48628: EQUAL
48629: IFFALSE 48646
// bpoints := bpoints * 1.1 ;
48631: LD_ADDR_VAR 0 10
48635: PUSH
48636: LD_VAR 0 10
48640: PUSH
48641: LD_REAL  1.10000000000000E+0000
48644: MUL
48645: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48646: LD_ADDR_VAR 0 10
48650: PUSH
48651: LD_VAR 0 10
48655: PUSH
48656: LD_VAR 0 6
48660: PPUSH
48661: LD_INT 1
48663: PPUSH
48664: CALL_OW 259
48668: PUSH
48669: LD_REAL  1.15000000000000E+0000
48672: MUL
48673: MUL
48674: ST_TO_ADDR
// end ; unit_vehicle :
48675: GO 49505
48677: LD_INT 2
48679: DOUBLE
48680: EQUAL
48681: IFTRUE 48685
48683: GO 49493
48685: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48686: LD_VAR 0 6
48690: PPUSH
48691: CALL_OW 264
48695: PUSH
48696: LD_INT 2
48698: PUSH
48699: LD_INT 42
48701: PUSH
48702: LD_INT 24
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: LIST
48709: IN
48710: IFFALSE 48731
// points := [ 25 , 5 , 3 ] ;
48712: LD_ADDR_VAR 0 9
48716: PUSH
48717: LD_INT 25
48719: PUSH
48720: LD_INT 5
48722: PUSH
48723: LD_INT 3
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: LIST
48730: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48731: LD_VAR 0 6
48735: PPUSH
48736: CALL_OW 264
48740: PUSH
48741: LD_INT 4
48743: PUSH
48744: LD_INT 43
48746: PUSH
48747: LD_INT 25
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: LIST
48754: IN
48755: IFFALSE 48776
// points := [ 40 , 15 , 5 ] ;
48757: LD_ADDR_VAR 0 9
48761: PUSH
48762: LD_INT 40
48764: PUSH
48765: LD_INT 15
48767: PUSH
48768: LD_INT 5
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: LIST
48775: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48776: LD_VAR 0 6
48780: PPUSH
48781: CALL_OW 264
48785: PUSH
48786: LD_INT 3
48788: PUSH
48789: LD_INT 23
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: IN
48796: IFFALSE 48817
// points := [ 7 , 25 , 8 ] ;
48798: LD_ADDR_VAR 0 9
48802: PUSH
48803: LD_INT 7
48805: PUSH
48806: LD_INT 25
48808: PUSH
48809: LD_INT 8
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: LIST
48816: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48817: LD_VAR 0 6
48821: PPUSH
48822: CALL_OW 264
48826: PUSH
48827: LD_INT 5
48829: PUSH
48830: LD_INT 27
48832: PUSH
48833: LD_INT 44
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: LIST
48840: IN
48841: IFFALSE 48862
// points := [ 14 , 50 , 16 ] ;
48843: LD_ADDR_VAR 0 9
48847: PUSH
48848: LD_INT 14
48850: PUSH
48851: LD_INT 50
48853: PUSH
48854: LD_INT 16
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: LIST
48861: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48862: LD_VAR 0 6
48866: PPUSH
48867: CALL_OW 264
48871: PUSH
48872: LD_INT 6
48874: PUSH
48875: LD_INT 46
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: IN
48882: IFFALSE 48903
// points := [ 32 , 120 , 70 ] ;
48884: LD_ADDR_VAR 0 9
48888: PUSH
48889: LD_INT 32
48891: PUSH
48892: LD_INT 120
48894: PUSH
48895: LD_INT 70
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: LIST
48902: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48903: LD_VAR 0 6
48907: PPUSH
48908: CALL_OW 264
48912: PUSH
48913: LD_INT 7
48915: PUSH
48916: LD_INT 28
48918: PUSH
48919: LD_INT 45
48921: PUSH
48922: LD_EXP 70
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: IN
48933: IFFALSE 48954
// points := [ 35 , 20 , 45 ] ;
48935: LD_ADDR_VAR 0 9
48939: PUSH
48940: LD_INT 35
48942: PUSH
48943: LD_INT 20
48945: PUSH
48946: LD_INT 45
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: LIST
48953: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48954: LD_VAR 0 6
48958: PPUSH
48959: CALL_OW 264
48963: PUSH
48964: LD_INT 47
48966: PUSH
48967: EMPTY
48968: LIST
48969: IN
48970: IFFALSE 48991
// points := [ 67 , 45 , 75 ] ;
48972: LD_ADDR_VAR 0 9
48976: PUSH
48977: LD_INT 67
48979: PUSH
48980: LD_INT 45
48982: PUSH
48983: LD_INT 75
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: LIST
48990: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48991: LD_VAR 0 6
48995: PPUSH
48996: CALL_OW 264
49000: PUSH
49001: LD_INT 26
49003: PUSH
49004: EMPTY
49005: LIST
49006: IN
49007: IFFALSE 49028
// points := [ 120 , 30 , 80 ] ;
49009: LD_ADDR_VAR 0 9
49013: PUSH
49014: LD_INT 120
49016: PUSH
49017: LD_INT 30
49019: PUSH
49020: LD_INT 80
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: LIST
49027: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
49028: LD_VAR 0 6
49032: PPUSH
49033: CALL_OW 264
49037: PUSH
49038: LD_INT 22
49040: PUSH
49041: EMPTY
49042: LIST
49043: IN
49044: IFFALSE 49065
// points := [ 40 , 1 , 1 ] ;
49046: LD_ADDR_VAR 0 9
49050: PUSH
49051: LD_INT 40
49053: PUSH
49054: LD_INT 1
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: LIST
49064: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
49065: LD_VAR 0 6
49069: PPUSH
49070: CALL_OW 264
49074: PUSH
49075: LD_INT 29
49077: PUSH
49078: EMPTY
49079: LIST
49080: IN
49081: IFFALSE 49102
// points := [ 70 , 200 , 400 ] ;
49083: LD_ADDR_VAR 0 9
49087: PUSH
49088: LD_INT 70
49090: PUSH
49091: LD_INT 200
49093: PUSH
49094: LD_INT 400
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: LIST
49101: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
49102: LD_VAR 0 6
49106: PPUSH
49107: CALL_OW 264
49111: PUSH
49112: LD_INT 14
49114: PUSH
49115: LD_INT 53
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: IN
49122: IFFALSE 49143
// points := [ 40 , 10 , 20 ] ;
49124: LD_ADDR_VAR 0 9
49128: PUSH
49129: LD_INT 40
49131: PUSH
49132: LD_INT 10
49134: PUSH
49135: LD_INT 20
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: LIST
49142: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
49143: LD_VAR 0 6
49147: PPUSH
49148: CALL_OW 264
49152: PUSH
49153: LD_INT 9
49155: PUSH
49156: EMPTY
49157: LIST
49158: IN
49159: IFFALSE 49180
// points := [ 5 , 70 , 20 ] ;
49161: LD_ADDR_VAR 0 9
49165: PUSH
49166: LD_INT 5
49168: PUSH
49169: LD_INT 70
49171: PUSH
49172: LD_INT 20
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: LIST
49179: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
49180: LD_VAR 0 6
49184: PPUSH
49185: CALL_OW 264
49189: PUSH
49190: LD_INT 10
49192: PUSH
49193: EMPTY
49194: LIST
49195: IN
49196: IFFALSE 49217
// points := [ 35 , 110 , 70 ] ;
49198: LD_ADDR_VAR 0 9
49202: PUSH
49203: LD_INT 35
49205: PUSH
49206: LD_INT 110
49208: PUSH
49209: LD_INT 70
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: LIST
49216: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
49217: LD_VAR 0 6
49221: PPUSH
49222: CALL_OW 265
49226: PUSH
49227: LD_INT 25
49229: EQUAL
49230: IFFALSE 49251
// points := [ 80 , 65 , 100 ] ;
49232: LD_ADDR_VAR 0 9
49236: PUSH
49237: LD_INT 80
49239: PUSH
49240: LD_INT 65
49242: PUSH
49243: LD_INT 100
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: LIST
49250: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
49251: LD_VAR 0 6
49255: PPUSH
49256: CALL_OW 263
49260: PUSH
49261: LD_INT 1
49263: EQUAL
49264: IFFALSE 49299
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
49266: LD_ADDR_VAR 0 10
49270: PUSH
49271: LD_VAR 0 10
49275: PUSH
49276: LD_VAR 0 6
49280: PPUSH
49281: CALL_OW 311
49285: PPUSH
49286: LD_INT 3
49288: PPUSH
49289: CALL_OW 259
49293: PUSH
49294: LD_INT 4
49296: MUL
49297: MUL
49298: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
49299: LD_VAR 0 6
49303: PPUSH
49304: CALL_OW 263
49308: PUSH
49309: LD_INT 2
49311: EQUAL
49312: IFFALSE 49363
// begin j := IsControledBy ( i ) ;
49314: LD_ADDR_VAR 0 7
49318: PUSH
49319: LD_VAR 0 6
49323: PPUSH
49324: CALL_OW 312
49328: ST_TO_ADDR
// if j then
49329: LD_VAR 0 7
49333: IFFALSE 49363
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
49335: LD_ADDR_VAR 0 10
49339: PUSH
49340: LD_VAR 0 10
49344: PUSH
49345: LD_VAR 0 7
49349: PPUSH
49350: LD_INT 3
49352: PPUSH
49353: CALL_OW 259
49357: PUSH
49358: LD_INT 3
49360: MUL
49361: MUL
49362: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
49363: LD_VAR 0 6
49367: PPUSH
49368: CALL_OW 264
49372: PUSH
49373: LD_INT 5
49375: PUSH
49376: LD_INT 6
49378: PUSH
49379: LD_INT 46
49381: PUSH
49382: LD_INT 44
49384: PUSH
49385: LD_INT 47
49387: PUSH
49388: LD_INT 45
49390: PUSH
49391: LD_INT 28
49393: PUSH
49394: LD_INT 7
49396: PUSH
49397: LD_INT 27
49399: PUSH
49400: LD_INT 29
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: IN
49415: PUSH
49416: LD_VAR 0 1
49420: PPUSH
49421: LD_INT 52
49423: PPUSH
49424: CALL_OW 321
49428: PUSH
49429: LD_INT 2
49431: EQUAL
49432: AND
49433: IFFALSE 49450
// bpoints := bpoints * 1.2 ;
49435: LD_ADDR_VAR 0 10
49439: PUSH
49440: LD_VAR 0 10
49444: PUSH
49445: LD_REAL  1.20000000000000E+0000
49448: MUL
49449: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49450: LD_VAR 0 6
49454: PPUSH
49455: CALL_OW 264
49459: PUSH
49460: LD_INT 6
49462: PUSH
49463: LD_INT 46
49465: PUSH
49466: LD_INT 47
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: LIST
49473: IN
49474: IFFALSE 49491
// bpoints := bpoints * 1.2 ;
49476: LD_ADDR_VAR 0 10
49480: PUSH
49481: LD_VAR 0 10
49485: PUSH
49486: LD_REAL  1.20000000000000E+0000
49489: MUL
49490: ST_TO_ADDR
// end ; unit_building :
49491: GO 49505
49493: LD_INT 3
49495: DOUBLE
49496: EQUAL
49497: IFTRUE 49501
49499: GO 49504
49501: POP
// ; end ;
49502: GO 49505
49504: POP
// for j = 1 to 3 do
49505: LD_ADDR_VAR 0 7
49509: PUSH
49510: DOUBLE
49511: LD_INT 1
49513: DEC
49514: ST_TO_ADDR
49515: LD_INT 3
49517: PUSH
49518: FOR_TO
49519: IFFALSE 49572
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49521: LD_ADDR_VAR 0 5
49525: PUSH
49526: LD_VAR 0 5
49530: PPUSH
49531: LD_VAR 0 7
49535: PPUSH
49536: LD_VAR 0 5
49540: PUSH
49541: LD_VAR 0 7
49545: ARRAY
49546: PUSH
49547: LD_VAR 0 9
49551: PUSH
49552: LD_VAR 0 7
49556: ARRAY
49557: PUSH
49558: LD_VAR 0 10
49562: MUL
49563: PLUS
49564: PPUSH
49565: CALL_OW 1
49569: ST_TO_ADDR
49570: GO 49518
49572: POP
49573: POP
// end ;
49574: GO 48051
49576: POP
49577: POP
// result := Replace ( result , 4 , tmp ) ;
49578: LD_ADDR_VAR 0 5
49582: PUSH
49583: LD_VAR 0 5
49587: PPUSH
49588: LD_INT 4
49590: PPUSH
49591: LD_VAR 0 8
49595: PPUSH
49596: CALL_OW 1
49600: ST_TO_ADDR
// end ;
49601: LD_VAR 0 5
49605: RET
// export function DangerAtRange ( unit , range ) ; begin
49606: LD_INT 0
49608: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49609: LD_ADDR_VAR 0 3
49613: PUSH
49614: LD_VAR 0 1
49618: PPUSH
49619: CALL_OW 255
49623: PPUSH
49624: LD_VAR 0 1
49628: PPUSH
49629: CALL_OW 250
49633: PPUSH
49634: LD_VAR 0 1
49638: PPUSH
49639: CALL_OW 251
49643: PPUSH
49644: LD_VAR 0 2
49648: PPUSH
49649: CALL 47903 0 4
49653: ST_TO_ADDR
// end ;
49654: LD_VAR 0 3
49658: RET
// export function DangerInArea ( side , area ) ; begin
49659: LD_INT 0
49661: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49662: LD_ADDR_VAR 0 3
49666: PUSH
49667: LD_VAR 0 2
49671: PPUSH
49672: LD_INT 81
49674: PUSH
49675: LD_VAR 0 1
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PPUSH
49684: CALL_OW 70
49688: ST_TO_ADDR
// end ;
49689: LD_VAR 0 3
49693: RET
// export function IsExtension ( b ) ; begin
49694: LD_INT 0
49696: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49697: LD_ADDR_VAR 0 2
49701: PUSH
49702: LD_VAR 0 1
49706: PUSH
49707: LD_INT 23
49709: PUSH
49710: LD_INT 20
49712: PUSH
49713: LD_INT 22
49715: PUSH
49716: LD_INT 17
49718: PUSH
49719: LD_INT 24
49721: PUSH
49722: LD_INT 21
49724: PUSH
49725: LD_INT 19
49727: PUSH
49728: LD_INT 16
49730: PUSH
49731: LD_INT 25
49733: PUSH
49734: LD_INT 18
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: IN
49749: ST_TO_ADDR
// end ;
49750: LD_VAR 0 2
49754: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49755: LD_INT 0
49757: PPUSH
49758: PPUSH
49759: PPUSH
// result := [ ] ;
49760: LD_ADDR_VAR 0 4
49764: PUSH
49765: EMPTY
49766: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49767: LD_ADDR_VAR 0 5
49771: PUSH
49772: LD_VAR 0 2
49776: PPUSH
49777: LD_INT 21
49779: PUSH
49780: LD_INT 3
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PPUSH
49787: CALL_OW 70
49791: ST_TO_ADDR
// if not tmp then
49792: LD_VAR 0 5
49796: NOT
49797: IFFALSE 49801
// exit ;
49799: GO 49865
// if checkLink then
49801: LD_VAR 0 3
49805: IFFALSE 49855
// begin for i in tmp do
49807: LD_ADDR_VAR 0 6
49811: PUSH
49812: LD_VAR 0 5
49816: PUSH
49817: FOR_IN
49818: IFFALSE 49853
// if GetBase ( i ) <> base then
49820: LD_VAR 0 6
49824: PPUSH
49825: CALL_OW 274
49829: PUSH
49830: LD_VAR 0 1
49834: NONEQUAL
49835: IFFALSE 49851
// ComLinkToBase ( base , i ) ;
49837: LD_VAR 0 1
49841: PPUSH
49842: LD_VAR 0 6
49846: PPUSH
49847: CALL_OW 169
49851: GO 49817
49853: POP
49854: POP
// end ; result := tmp ;
49855: LD_ADDR_VAR 0 4
49859: PUSH
49860: LD_VAR 0 5
49864: ST_TO_ADDR
// end ;
49865: LD_VAR 0 4
49869: RET
// export function ComComplete ( units , b ) ; var i ; begin
49870: LD_INT 0
49872: PPUSH
49873: PPUSH
// if not units then
49874: LD_VAR 0 1
49878: NOT
49879: IFFALSE 49883
// exit ;
49881: GO 49973
// for i in units do
49883: LD_ADDR_VAR 0 4
49887: PUSH
49888: LD_VAR 0 1
49892: PUSH
49893: FOR_IN
49894: IFFALSE 49971
// if BuildingStatus ( b ) = bs_build then
49896: LD_VAR 0 2
49900: PPUSH
49901: CALL_OW 461
49905: PUSH
49906: LD_INT 1
49908: EQUAL
49909: IFFALSE 49969
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49911: LD_VAR 0 4
49915: PPUSH
49916: LD_STRING h
49918: PUSH
49919: LD_VAR 0 2
49923: PPUSH
49924: CALL_OW 250
49928: PUSH
49929: LD_VAR 0 2
49933: PPUSH
49934: CALL_OW 251
49938: PUSH
49939: LD_VAR 0 2
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: PUSH
49962: EMPTY
49963: LIST
49964: PPUSH
49965: CALL_OW 446
49969: GO 49893
49971: POP
49972: POP
// end ;
49973: LD_VAR 0 3
49977: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49978: LD_INT 0
49980: PPUSH
49981: PPUSH
49982: PPUSH
49983: PPUSH
49984: PPUSH
49985: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49986: LD_VAR 0 1
49990: NOT
49991: PUSH
49992: LD_VAR 0 1
49996: PPUSH
49997: CALL_OW 263
50001: PUSH
50002: LD_INT 2
50004: NONEQUAL
50005: OR
50006: IFFALSE 50010
// exit ;
50008: GO 50326
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
50010: LD_ADDR_VAR 0 6
50014: PUSH
50015: LD_INT 22
50017: PUSH
50018: LD_VAR 0 1
50022: PPUSH
50023: CALL_OW 255
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 2
50034: PUSH
50035: LD_INT 30
50037: PUSH
50038: LD_INT 36
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 34
50047: PUSH
50048: LD_INT 31
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: LIST
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PPUSH
50064: CALL_OW 69
50068: ST_TO_ADDR
// if not tmp then
50069: LD_VAR 0 6
50073: NOT
50074: IFFALSE 50078
// exit ;
50076: GO 50326
// result := [ ] ;
50078: LD_ADDR_VAR 0 2
50082: PUSH
50083: EMPTY
50084: ST_TO_ADDR
// for i in tmp do
50085: LD_ADDR_VAR 0 3
50089: PUSH
50090: LD_VAR 0 6
50094: PUSH
50095: FOR_IN
50096: IFFALSE 50167
// begin t := UnitsInside ( i ) ;
50098: LD_ADDR_VAR 0 4
50102: PUSH
50103: LD_VAR 0 3
50107: PPUSH
50108: CALL_OW 313
50112: ST_TO_ADDR
// if t then
50113: LD_VAR 0 4
50117: IFFALSE 50165
// for j in t do
50119: LD_ADDR_VAR 0 7
50123: PUSH
50124: LD_VAR 0 4
50128: PUSH
50129: FOR_IN
50130: IFFALSE 50163
// result := Replace ( result , result + 1 , j ) ;
50132: LD_ADDR_VAR 0 2
50136: PUSH
50137: LD_VAR 0 2
50141: PPUSH
50142: LD_VAR 0 2
50146: PUSH
50147: LD_INT 1
50149: PLUS
50150: PPUSH
50151: LD_VAR 0 7
50155: PPUSH
50156: CALL_OW 1
50160: ST_TO_ADDR
50161: GO 50129
50163: POP
50164: POP
// end ;
50165: GO 50095
50167: POP
50168: POP
// if not result then
50169: LD_VAR 0 2
50173: NOT
50174: IFFALSE 50178
// exit ;
50176: GO 50326
// mech := result [ 1 ] ;
50178: LD_ADDR_VAR 0 5
50182: PUSH
50183: LD_VAR 0 2
50187: PUSH
50188: LD_INT 1
50190: ARRAY
50191: ST_TO_ADDR
// if result > 1 then
50192: LD_VAR 0 2
50196: PUSH
50197: LD_INT 1
50199: GREATER
50200: IFFALSE 50312
// begin for i = 2 to result do
50202: LD_ADDR_VAR 0 3
50206: PUSH
50207: DOUBLE
50208: LD_INT 2
50210: DEC
50211: ST_TO_ADDR
50212: LD_VAR 0 2
50216: PUSH
50217: FOR_TO
50218: IFFALSE 50310
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
50220: LD_ADDR_VAR 0 4
50224: PUSH
50225: LD_VAR 0 2
50229: PUSH
50230: LD_VAR 0 3
50234: ARRAY
50235: PPUSH
50236: LD_INT 3
50238: PPUSH
50239: CALL_OW 259
50243: PUSH
50244: LD_VAR 0 2
50248: PUSH
50249: LD_VAR 0 3
50253: ARRAY
50254: PPUSH
50255: CALL_OW 432
50259: MINUS
50260: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
50261: LD_VAR 0 4
50265: PUSH
50266: LD_VAR 0 5
50270: PPUSH
50271: LD_INT 3
50273: PPUSH
50274: CALL_OW 259
50278: PUSH
50279: LD_VAR 0 5
50283: PPUSH
50284: CALL_OW 432
50288: MINUS
50289: GREATEREQUAL
50290: IFFALSE 50308
// mech := result [ i ] ;
50292: LD_ADDR_VAR 0 5
50296: PUSH
50297: LD_VAR 0 2
50301: PUSH
50302: LD_VAR 0 3
50306: ARRAY
50307: ST_TO_ADDR
// end ;
50308: GO 50217
50310: POP
50311: POP
// end ; ComLinkTo ( vehicle , mech ) ;
50312: LD_VAR 0 1
50316: PPUSH
50317: LD_VAR 0 5
50321: PPUSH
50322: CALL_OW 135
// end ;
50326: LD_VAR 0 2
50330: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
50331: LD_INT 0
50333: PPUSH
50334: PPUSH
50335: PPUSH
50336: PPUSH
50337: PPUSH
50338: PPUSH
50339: PPUSH
50340: PPUSH
50341: PPUSH
50342: PPUSH
50343: PPUSH
50344: PPUSH
50345: PPUSH
// result := [ ] ;
50346: LD_ADDR_VAR 0 7
50350: PUSH
50351: EMPTY
50352: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
50353: LD_VAR 0 1
50357: PPUSH
50358: CALL_OW 266
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: IN
50373: NOT
50374: IFFALSE 50378
// exit ;
50376: GO 52012
// if name then
50378: LD_VAR 0 3
50382: IFFALSE 50398
// SetBName ( base_dep , name ) ;
50384: LD_VAR 0 1
50388: PPUSH
50389: LD_VAR 0 3
50393: PPUSH
50394: CALL_OW 500
// base := GetBase ( base_dep ) ;
50398: LD_ADDR_VAR 0 15
50402: PUSH
50403: LD_VAR 0 1
50407: PPUSH
50408: CALL_OW 274
50412: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50413: LD_ADDR_VAR 0 16
50417: PUSH
50418: LD_VAR 0 1
50422: PPUSH
50423: CALL_OW 255
50427: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50428: LD_ADDR_VAR 0 17
50432: PUSH
50433: LD_VAR 0 1
50437: PPUSH
50438: CALL_OW 248
50442: ST_TO_ADDR
// if sources then
50443: LD_VAR 0 5
50447: IFFALSE 50494
// for i = 1 to 3 do
50449: LD_ADDR_VAR 0 8
50453: PUSH
50454: DOUBLE
50455: LD_INT 1
50457: DEC
50458: ST_TO_ADDR
50459: LD_INT 3
50461: PUSH
50462: FOR_TO
50463: IFFALSE 50492
// AddResourceType ( base , i , sources [ i ] ) ;
50465: LD_VAR 0 15
50469: PPUSH
50470: LD_VAR 0 8
50474: PPUSH
50475: LD_VAR 0 5
50479: PUSH
50480: LD_VAR 0 8
50484: ARRAY
50485: PPUSH
50486: CALL_OW 276
50490: GO 50462
50492: POP
50493: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50494: LD_ADDR_VAR 0 18
50498: PUSH
50499: LD_VAR 0 15
50503: PPUSH
50504: LD_VAR 0 2
50508: PPUSH
50509: LD_INT 1
50511: PPUSH
50512: CALL 49755 0 3
50516: ST_TO_ADDR
// InitHc ;
50517: CALL_OW 19
// InitUc ;
50521: CALL_OW 18
// uc_side := side ;
50525: LD_ADDR_OWVAR 20
50529: PUSH
50530: LD_VAR 0 16
50534: ST_TO_ADDR
// uc_nation := nation ;
50535: LD_ADDR_OWVAR 21
50539: PUSH
50540: LD_VAR 0 17
50544: ST_TO_ADDR
// if buildings then
50545: LD_VAR 0 18
50549: IFFALSE 51871
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50551: LD_ADDR_VAR 0 19
50555: PUSH
50556: LD_VAR 0 18
50560: PPUSH
50561: LD_INT 2
50563: PUSH
50564: LD_INT 30
50566: PUSH
50567: LD_INT 29
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 30
50576: PUSH
50577: LD_INT 30
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: LIST
50588: PPUSH
50589: CALL_OW 72
50593: ST_TO_ADDR
// if tmp then
50594: LD_VAR 0 19
50598: IFFALSE 50646
// for i in tmp do
50600: LD_ADDR_VAR 0 8
50604: PUSH
50605: LD_VAR 0 19
50609: PUSH
50610: FOR_IN
50611: IFFALSE 50644
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50613: LD_VAR 0 8
50617: PPUSH
50618: CALL_OW 250
50622: PPUSH
50623: LD_VAR 0 8
50627: PPUSH
50628: CALL_OW 251
50632: PPUSH
50633: LD_VAR 0 16
50637: PPUSH
50638: CALL_OW 441
50642: GO 50610
50644: POP
50645: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50646: LD_VAR 0 18
50650: PPUSH
50651: LD_INT 2
50653: PUSH
50654: LD_INT 30
50656: PUSH
50657: LD_INT 32
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 30
50666: PUSH
50667: LD_INT 33
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: LIST
50678: PPUSH
50679: CALL_OW 72
50683: IFFALSE 50771
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50685: LD_ADDR_VAR 0 8
50689: PUSH
50690: LD_VAR 0 18
50694: PPUSH
50695: LD_INT 2
50697: PUSH
50698: LD_INT 30
50700: PUSH
50701: LD_INT 32
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 30
50710: PUSH
50711: LD_INT 33
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: LIST
50722: PPUSH
50723: CALL_OW 72
50727: PUSH
50728: FOR_IN
50729: IFFALSE 50769
// begin if not GetBWeapon ( i ) then
50731: LD_VAR 0 8
50735: PPUSH
50736: CALL_OW 269
50740: NOT
50741: IFFALSE 50767
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50743: LD_VAR 0 8
50747: PPUSH
50748: LD_VAR 0 8
50752: PPUSH
50753: LD_VAR 0 2
50757: PPUSH
50758: CALL 52017 0 2
50762: PPUSH
50763: CALL_OW 431
// end ;
50767: GO 50728
50769: POP
50770: POP
// end ; for i = 1 to personel do
50771: LD_ADDR_VAR 0 8
50775: PUSH
50776: DOUBLE
50777: LD_INT 1
50779: DEC
50780: ST_TO_ADDR
50781: LD_VAR 0 6
50785: PUSH
50786: FOR_TO
50787: IFFALSE 51851
// begin if i > 4 then
50789: LD_VAR 0 8
50793: PUSH
50794: LD_INT 4
50796: GREATER
50797: IFFALSE 50801
// break ;
50799: GO 51851
// case i of 1 :
50801: LD_VAR 0 8
50805: PUSH
50806: LD_INT 1
50808: DOUBLE
50809: EQUAL
50810: IFTRUE 50814
50812: GO 50894
50814: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50815: LD_ADDR_VAR 0 12
50819: PUSH
50820: LD_VAR 0 18
50824: PPUSH
50825: LD_INT 22
50827: PUSH
50828: LD_VAR 0 16
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 58
50839: PUSH
50840: EMPTY
50841: LIST
50842: PUSH
50843: LD_INT 2
50845: PUSH
50846: LD_INT 30
50848: PUSH
50849: LD_INT 32
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 30
50858: PUSH
50859: LD_INT 4
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 30
50868: PUSH
50869: LD_INT 5
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: LIST
50886: PPUSH
50887: CALL_OW 72
50891: ST_TO_ADDR
50892: GO 51116
50894: LD_INT 2
50896: DOUBLE
50897: EQUAL
50898: IFTRUE 50902
50900: GO 50964
50902: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50903: LD_ADDR_VAR 0 12
50907: PUSH
50908: LD_VAR 0 18
50912: PPUSH
50913: LD_INT 22
50915: PUSH
50916: LD_VAR 0 16
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 2
50927: PUSH
50928: LD_INT 30
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 30
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: LIST
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PPUSH
50957: CALL_OW 72
50961: ST_TO_ADDR
50962: GO 51116
50964: LD_INT 3
50966: DOUBLE
50967: EQUAL
50968: IFTRUE 50972
50970: GO 51034
50972: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50973: LD_ADDR_VAR 0 12
50977: PUSH
50978: LD_VAR 0 18
50982: PPUSH
50983: LD_INT 22
50985: PUSH
50986: LD_VAR 0 16
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 2
50997: PUSH
50998: LD_INT 30
51000: PUSH
51001: LD_INT 2
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 30
51010: PUSH
51011: LD_INT 3
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: LIST
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PPUSH
51027: CALL_OW 72
51031: ST_TO_ADDR
51032: GO 51116
51034: LD_INT 4
51036: DOUBLE
51037: EQUAL
51038: IFTRUE 51042
51040: GO 51115
51042: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
51043: LD_ADDR_VAR 0 12
51047: PUSH
51048: LD_VAR 0 18
51052: PPUSH
51053: LD_INT 22
51055: PUSH
51056: LD_VAR 0 16
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 2
51067: PUSH
51068: LD_INT 30
51070: PUSH
51071: LD_INT 6
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 30
51080: PUSH
51081: LD_INT 7
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 30
51090: PUSH
51091: LD_INT 8
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PPUSH
51108: CALL_OW 72
51112: ST_TO_ADDR
51113: GO 51116
51115: POP
// if i = 1 then
51116: LD_VAR 0 8
51120: PUSH
51121: LD_INT 1
51123: EQUAL
51124: IFFALSE 51235
// begin tmp := [ ] ;
51126: LD_ADDR_VAR 0 19
51130: PUSH
51131: EMPTY
51132: ST_TO_ADDR
// for j in f do
51133: LD_ADDR_VAR 0 9
51137: PUSH
51138: LD_VAR 0 12
51142: PUSH
51143: FOR_IN
51144: IFFALSE 51217
// if GetBType ( j ) = b_bunker then
51146: LD_VAR 0 9
51150: PPUSH
51151: CALL_OW 266
51155: PUSH
51156: LD_INT 32
51158: EQUAL
51159: IFFALSE 51186
// tmp := Insert ( tmp , 1 , j ) else
51161: LD_ADDR_VAR 0 19
51165: PUSH
51166: LD_VAR 0 19
51170: PPUSH
51171: LD_INT 1
51173: PPUSH
51174: LD_VAR 0 9
51178: PPUSH
51179: CALL_OW 2
51183: ST_TO_ADDR
51184: GO 51215
// tmp := Insert ( tmp , tmp + 1 , j ) ;
51186: LD_ADDR_VAR 0 19
51190: PUSH
51191: LD_VAR 0 19
51195: PPUSH
51196: LD_VAR 0 19
51200: PUSH
51201: LD_INT 1
51203: PLUS
51204: PPUSH
51205: LD_VAR 0 9
51209: PPUSH
51210: CALL_OW 2
51214: ST_TO_ADDR
51215: GO 51143
51217: POP
51218: POP
// if tmp then
51219: LD_VAR 0 19
51223: IFFALSE 51235
// f := tmp ;
51225: LD_ADDR_VAR 0 12
51229: PUSH
51230: LD_VAR 0 19
51234: ST_TO_ADDR
// end ; x := personel [ i ] ;
51235: LD_ADDR_VAR 0 13
51239: PUSH
51240: LD_VAR 0 6
51244: PUSH
51245: LD_VAR 0 8
51249: ARRAY
51250: ST_TO_ADDR
// if x = - 1 then
51251: LD_VAR 0 13
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: EQUAL
51260: IFFALSE 51469
// begin for j in f do
51262: LD_ADDR_VAR 0 9
51266: PUSH
51267: LD_VAR 0 12
51271: PUSH
51272: FOR_IN
51273: IFFALSE 51465
// repeat InitHc ;
51275: CALL_OW 19
// if GetBType ( j ) = b_barracks then
51279: LD_VAR 0 9
51283: PPUSH
51284: CALL_OW 266
51288: PUSH
51289: LD_INT 5
51291: EQUAL
51292: IFFALSE 51362
// begin if UnitsInside ( j ) < 3 then
51294: LD_VAR 0 9
51298: PPUSH
51299: CALL_OW 313
51303: PUSH
51304: LD_INT 3
51306: LESS
51307: IFFALSE 51343
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51309: LD_INT 0
51311: PPUSH
51312: LD_INT 5
51314: PUSH
51315: LD_INT 8
51317: PUSH
51318: LD_INT 9
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: LIST
51325: PUSH
51326: LD_VAR 0 17
51330: ARRAY
51331: PPUSH
51332: LD_VAR 0 4
51336: PPUSH
51337: CALL_OW 380
51341: GO 51360
// PrepareHuman ( false , i , skill ) ;
51343: LD_INT 0
51345: PPUSH
51346: LD_VAR 0 8
51350: PPUSH
51351: LD_VAR 0 4
51355: PPUSH
51356: CALL_OW 380
// end else
51360: GO 51379
// PrepareHuman ( false , i , skill ) ;
51362: LD_INT 0
51364: PPUSH
51365: LD_VAR 0 8
51369: PPUSH
51370: LD_VAR 0 4
51374: PPUSH
51375: CALL_OW 380
// un := CreateHuman ;
51379: LD_ADDR_VAR 0 14
51383: PUSH
51384: CALL_OW 44
51388: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51389: LD_ADDR_VAR 0 7
51393: PUSH
51394: LD_VAR 0 7
51398: PPUSH
51399: LD_INT 1
51401: PPUSH
51402: LD_VAR 0 14
51406: PPUSH
51407: CALL_OW 2
51411: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51412: LD_VAR 0 14
51416: PPUSH
51417: LD_VAR 0 9
51421: PPUSH
51422: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51426: LD_VAR 0 9
51430: PPUSH
51431: CALL_OW 313
51435: PUSH
51436: LD_INT 6
51438: EQUAL
51439: PUSH
51440: LD_VAR 0 9
51444: PPUSH
51445: CALL_OW 266
51449: PUSH
51450: LD_INT 32
51452: PUSH
51453: LD_INT 31
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: IN
51460: OR
51461: IFFALSE 51275
51463: GO 51272
51465: POP
51466: POP
// end else
51467: GO 51849
// for j = 1 to x do
51469: LD_ADDR_VAR 0 9
51473: PUSH
51474: DOUBLE
51475: LD_INT 1
51477: DEC
51478: ST_TO_ADDR
51479: LD_VAR 0 13
51483: PUSH
51484: FOR_TO
51485: IFFALSE 51847
// begin InitHc ;
51487: CALL_OW 19
// if not f then
51491: LD_VAR 0 12
51495: NOT
51496: IFFALSE 51585
// begin PrepareHuman ( false , i , skill ) ;
51498: LD_INT 0
51500: PPUSH
51501: LD_VAR 0 8
51505: PPUSH
51506: LD_VAR 0 4
51510: PPUSH
51511: CALL_OW 380
// un := CreateHuman ;
51515: LD_ADDR_VAR 0 14
51519: PUSH
51520: CALL_OW 44
51524: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51525: LD_ADDR_VAR 0 7
51529: PUSH
51530: LD_VAR 0 7
51534: PPUSH
51535: LD_INT 1
51537: PPUSH
51538: LD_VAR 0 14
51542: PPUSH
51543: CALL_OW 2
51547: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51548: LD_VAR 0 14
51552: PPUSH
51553: LD_VAR 0 1
51557: PPUSH
51558: CALL_OW 250
51562: PPUSH
51563: LD_VAR 0 1
51567: PPUSH
51568: CALL_OW 251
51572: PPUSH
51573: LD_INT 10
51575: PPUSH
51576: LD_INT 0
51578: PPUSH
51579: CALL_OW 50
// continue ;
51583: GO 51484
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51585: LD_VAR 0 12
51589: PUSH
51590: LD_INT 1
51592: ARRAY
51593: PPUSH
51594: CALL_OW 313
51598: PUSH
51599: LD_VAR 0 12
51603: PUSH
51604: LD_INT 1
51606: ARRAY
51607: PPUSH
51608: CALL_OW 266
51612: PUSH
51613: LD_INT 32
51615: PUSH
51616: LD_INT 31
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: IN
51623: AND
51624: PUSH
51625: LD_VAR 0 12
51629: PUSH
51630: LD_INT 1
51632: ARRAY
51633: PPUSH
51634: CALL_OW 313
51638: PUSH
51639: LD_INT 6
51641: EQUAL
51642: OR
51643: IFFALSE 51663
// f := Delete ( f , 1 ) ;
51645: LD_ADDR_VAR 0 12
51649: PUSH
51650: LD_VAR 0 12
51654: PPUSH
51655: LD_INT 1
51657: PPUSH
51658: CALL_OW 3
51662: ST_TO_ADDR
// if not f then
51663: LD_VAR 0 12
51667: NOT
51668: IFFALSE 51686
// begin x := x + 2 ;
51670: LD_ADDR_VAR 0 13
51674: PUSH
51675: LD_VAR 0 13
51679: PUSH
51680: LD_INT 2
51682: PLUS
51683: ST_TO_ADDR
// continue ;
51684: GO 51484
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51686: LD_VAR 0 12
51690: PUSH
51691: LD_INT 1
51693: ARRAY
51694: PPUSH
51695: CALL_OW 266
51699: PUSH
51700: LD_INT 5
51702: EQUAL
51703: IFFALSE 51777
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51705: LD_VAR 0 12
51709: PUSH
51710: LD_INT 1
51712: ARRAY
51713: PPUSH
51714: CALL_OW 313
51718: PUSH
51719: LD_INT 3
51721: LESS
51722: IFFALSE 51758
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51724: LD_INT 0
51726: PPUSH
51727: LD_INT 5
51729: PUSH
51730: LD_INT 8
51732: PUSH
51733: LD_INT 9
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: LIST
51740: PUSH
51741: LD_VAR 0 17
51745: ARRAY
51746: PPUSH
51747: LD_VAR 0 4
51751: PPUSH
51752: CALL_OW 380
51756: GO 51775
// PrepareHuman ( false , i , skill ) ;
51758: LD_INT 0
51760: PPUSH
51761: LD_VAR 0 8
51765: PPUSH
51766: LD_VAR 0 4
51770: PPUSH
51771: CALL_OW 380
// end else
51775: GO 51794
// PrepareHuman ( false , i , skill ) ;
51777: LD_INT 0
51779: PPUSH
51780: LD_VAR 0 8
51784: PPUSH
51785: LD_VAR 0 4
51789: PPUSH
51790: CALL_OW 380
// un := CreateHuman ;
51794: LD_ADDR_VAR 0 14
51798: PUSH
51799: CALL_OW 44
51803: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51804: LD_ADDR_VAR 0 7
51808: PUSH
51809: LD_VAR 0 7
51813: PPUSH
51814: LD_INT 1
51816: PPUSH
51817: LD_VAR 0 14
51821: PPUSH
51822: CALL_OW 2
51826: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51827: LD_VAR 0 14
51831: PPUSH
51832: LD_VAR 0 12
51836: PUSH
51837: LD_INT 1
51839: ARRAY
51840: PPUSH
51841: CALL_OW 52
// end ;
51845: GO 51484
51847: POP
51848: POP
// end ;
51849: GO 50786
51851: POP
51852: POP
// result := result ^ buildings ;
51853: LD_ADDR_VAR 0 7
51857: PUSH
51858: LD_VAR 0 7
51862: PUSH
51863: LD_VAR 0 18
51867: ADD
51868: ST_TO_ADDR
// end else
51869: GO 52012
// begin for i = 1 to personel do
51871: LD_ADDR_VAR 0 8
51875: PUSH
51876: DOUBLE
51877: LD_INT 1
51879: DEC
51880: ST_TO_ADDR
51881: LD_VAR 0 6
51885: PUSH
51886: FOR_TO
51887: IFFALSE 52010
// begin if i > 4 then
51889: LD_VAR 0 8
51893: PUSH
51894: LD_INT 4
51896: GREATER
51897: IFFALSE 51901
// break ;
51899: GO 52010
// x := personel [ i ] ;
51901: LD_ADDR_VAR 0 13
51905: PUSH
51906: LD_VAR 0 6
51910: PUSH
51911: LD_VAR 0 8
51915: ARRAY
51916: ST_TO_ADDR
// if x = - 1 then
51917: LD_VAR 0 13
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: EQUAL
51926: IFFALSE 51930
// continue ;
51928: GO 51886
// PrepareHuman ( false , i , skill ) ;
51930: LD_INT 0
51932: PPUSH
51933: LD_VAR 0 8
51937: PPUSH
51938: LD_VAR 0 4
51942: PPUSH
51943: CALL_OW 380
// un := CreateHuman ;
51947: LD_ADDR_VAR 0 14
51951: PUSH
51952: CALL_OW 44
51956: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51957: LD_VAR 0 14
51961: PPUSH
51962: LD_VAR 0 1
51966: PPUSH
51967: CALL_OW 250
51971: PPUSH
51972: LD_VAR 0 1
51976: PPUSH
51977: CALL_OW 251
51981: PPUSH
51982: LD_INT 10
51984: PPUSH
51985: LD_INT 0
51987: PPUSH
51988: CALL_OW 50
// result := result ^ un ;
51992: LD_ADDR_VAR 0 7
51996: PUSH
51997: LD_VAR 0 7
52001: PUSH
52002: LD_VAR 0 14
52006: ADD
52007: ST_TO_ADDR
// end ;
52008: GO 51886
52010: POP
52011: POP
// end ; end ;
52012: LD_VAR 0 7
52016: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
52017: LD_INT 0
52019: PPUSH
52020: PPUSH
52021: PPUSH
52022: PPUSH
52023: PPUSH
52024: PPUSH
52025: PPUSH
52026: PPUSH
52027: PPUSH
52028: PPUSH
52029: PPUSH
52030: PPUSH
52031: PPUSH
52032: PPUSH
52033: PPUSH
52034: PPUSH
// result := false ;
52035: LD_ADDR_VAR 0 3
52039: PUSH
52040: LD_INT 0
52042: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
52043: LD_VAR 0 1
52047: NOT
52048: PUSH
52049: LD_VAR 0 1
52053: PPUSH
52054: CALL_OW 266
52058: PUSH
52059: LD_INT 32
52061: PUSH
52062: LD_INT 33
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: IN
52069: NOT
52070: OR
52071: IFFALSE 52075
// exit ;
52073: GO 53184
// nat := GetNation ( tower ) ;
52075: LD_ADDR_VAR 0 12
52079: PUSH
52080: LD_VAR 0 1
52084: PPUSH
52085: CALL_OW 248
52089: ST_TO_ADDR
// side := GetSide ( tower ) ;
52090: LD_ADDR_VAR 0 16
52094: PUSH
52095: LD_VAR 0 1
52099: PPUSH
52100: CALL_OW 255
52104: ST_TO_ADDR
// x := GetX ( tower ) ;
52105: LD_ADDR_VAR 0 10
52109: PUSH
52110: LD_VAR 0 1
52114: PPUSH
52115: CALL_OW 250
52119: ST_TO_ADDR
// y := GetY ( tower ) ;
52120: LD_ADDR_VAR 0 11
52124: PUSH
52125: LD_VAR 0 1
52129: PPUSH
52130: CALL_OW 251
52134: ST_TO_ADDR
// if not x or not y then
52135: LD_VAR 0 10
52139: NOT
52140: PUSH
52141: LD_VAR 0 11
52145: NOT
52146: OR
52147: IFFALSE 52151
// exit ;
52149: GO 53184
// weapon := 0 ;
52151: LD_ADDR_VAR 0 18
52155: PUSH
52156: LD_INT 0
52158: ST_TO_ADDR
// fac_list := [ ] ;
52159: LD_ADDR_VAR 0 17
52163: PUSH
52164: EMPTY
52165: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
52166: LD_ADDR_VAR 0 6
52170: PUSH
52171: LD_VAR 0 1
52175: PPUSH
52176: CALL_OW 274
52180: PPUSH
52181: LD_VAR 0 2
52185: PPUSH
52186: LD_INT 0
52188: PPUSH
52189: CALL 49755 0 3
52193: PPUSH
52194: LD_INT 30
52196: PUSH
52197: LD_INT 3
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PPUSH
52204: CALL_OW 72
52208: ST_TO_ADDR
// if not factories then
52209: LD_VAR 0 6
52213: NOT
52214: IFFALSE 52218
// exit ;
52216: GO 53184
// for i in factories do
52218: LD_ADDR_VAR 0 8
52222: PUSH
52223: LD_VAR 0 6
52227: PUSH
52228: FOR_IN
52229: IFFALSE 52254
// fac_list := fac_list union AvailableWeaponList ( i ) ;
52231: LD_ADDR_VAR 0 17
52235: PUSH
52236: LD_VAR 0 17
52240: PUSH
52241: LD_VAR 0 8
52245: PPUSH
52246: CALL_OW 478
52250: UNION
52251: ST_TO_ADDR
52252: GO 52228
52254: POP
52255: POP
// if not fac_list then
52256: LD_VAR 0 17
52260: NOT
52261: IFFALSE 52265
// exit ;
52263: GO 53184
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
52265: LD_ADDR_VAR 0 5
52269: PUSH
52270: LD_INT 4
52272: PUSH
52273: LD_INT 5
52275: PUSH
52276: LD_INT 9
52278: PUSH
52279: LD_INT 10
52281: PUSH
52282: LD_INT 6
52284: PUSH
52285: LD_INT 7
52287: PUSH
52288: LD_INT 11
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 27
52302: PUSH
52303: LD_INT 28
52305: PUSH
52306: LD_INT 26
52308: PUSH
52309: LD_INT 30
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 43
52320: PUSH
52321: LD_INT 44
52323: PUSH
52324: LD_INT 46
52326: PUSH
52327: LD_INT 45
52329: PUSH
52330: LD_INT 47
52332: PUSH
52333: LD_INT 49
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: LIST
52348: PUSH
52349: LD_VAR 0 12
52353: ARRAY
52354: ST_TO_ADDR
// list := list isect fac_list ;
52355: LD_ADDR_VAR 0 5
52359: PUSH
52360: LD_VAR 0 5
52364: PUSH
52365: LD_VAR 0 17
52369: ISECT
52370: ST_TO_ADDR
// if not list then
52371: LD_VAR 0 5
52375: NOT
52376: IFFALSE 52380
// exit ;
52378: GO 53184
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
52380: LD_VAR 0 12
52384: PUSH
52385: LD_INT 3
52387: EQUAL
52388: PUSH
52389: LD_INT 49
52391: PUSH
52392: LD_VAR 0 5
52396: IN
52397: AND
52398: PUSH
52399: LD_INT 31
52401: PPUSH
52402: LD_VAR 0 16
52406: PPUSH
52407: CALL_OW 321
52411: PUSH
52412: LD_INT 2
52414: EQUAL
52415: AND
52416: IFFALSE 52476
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52418: LD_INT 22
52420: PUSH
52421: LD_VAR 0 16
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 35
52432: PUSH
52433: LD_INT 49
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 91
52442: PUSH
52443: LD_VAR 0 1
52447: PUSH
52448: LD_INT 10
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: LIST
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: LIST
52460: PPUSH
52461: CALL_OW 69
52465: NOT
52466: IFFALSE 52476
// weapon := ru_time_lapser ;
52468: LD_ADDR_VAR 0 18
52472: PUSH
52473: LD_INT 49
52475: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52476: LD_VAR 0 12
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: LD_INT 2
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: IN
52491: PUSH
52492: LD_INT 11
52494: PUSH
52495: LD_VAR 0 5
52499: IN
52500: PUSH
52501: LD_INT 30
52503: PUSH
52504: LD_VAR 0 5
52508: IN
52509: OR
52510: AND
52511: PUSH
52512: LD_INT 6
52514: PPUSH
52515: LD_VAR 0 16
52519: PPUSH
52520: CALL_OW 321
52524: PUSH
52525: LD_INT 2
52527: EQUAL
52528: AND
52529: IFFALSE 52694
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52531: LD_INT 22
52533: PUSH
52534: LD_VAR 0 16
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 2
52545: PUSH
52546: LD_INT 35
52548: PUSH
52549: LD_INT 11
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 35
52558: PUSH
52559: LD_INT 30
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 91
52573: PUSH
52574: LD_VAR 0 1
52578: PUSH
52579: LD_INT 18
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: LIST
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: LIST
52591: PPUSH
52592: CALL_OW 69
52596: NOT
52597: PUSH
52598: LD_INT 22
52600: PUSH
52601: LD_VAR 0 16
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 2
52612: PUSH
52613: LD_INT 30
52615: PUSH
52616: LD_INT 32
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 30
52625: PUSH
52626: LD_INT 33
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 91
52640: PUSH
52641: LD_VAR 0 1
52645: PUSH
52646: LD_INT 12
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: LIST
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: LIST
52658: PUSH
52659: EMPTY
52660: LIST
52661: PPUSH
52662: CALL_OW 69
52666: PUSH
52667: LD_INT 2
52669: GREATER
52670: AND
52671: IFFALSE 52694
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52673: LD_ADDR_VAR 0 18
52677: PUSH
52678: LD_INT 11
52680: PUSH
52681: LD_INT 30
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_VAR 0 12
52692: ARRAY
52693: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52694: LD_VAR 0 18
52698: NOT
52699: PUSH
52700: LD_INT 40
52702: PPUSH
52703: LD_VAR 0 16
52707: PPUSH
52708: CALL_OW 321
52712: PUSH
52713: LD_INT 2
52715: EQUAL
52716: AND
52717: PUSH
52718: LD_INT 7
52720: PUSH
52721: LD_VAR 0 5
52725: IN
52726: PUSH
52727: LD_INT 28
52729: PUSH
52730: LD_VAR 0 5
52734: IN
52735: OR
52736: PUSH
52737: LD_INT 45
52739: PUSH
52740: LD_VAR 0 5
52744: IN
52745: OR
52746: AND
52747: IFFALSE 53001
// begin hex := GetHexInfo ( x , y ) ;
52749: LD_ADDR_VAR 0 4
52753: PUSH
52754: LD_VAR 0 10
52758: PPUSH
52759: LD_VAR 0 11
52763: PPUSH
52764: CALL_OW 546
52768: ST_TO_ADDR
// if hex [ 1 ] then
52769: LD_VAR 0 4
52773: PUSH
52774: LD_INT 1
52776: ARRAY
52777: IFFALSE 52781
// exit ;
52779: GO 53184
// height := hex [ 2 ] ;
52781: LD_ADDR_VAR 0 15
52785: PUSH
52786: LD_VAR 0 4
52790: PUSH
52791: LD_INT 2
52793: ARRAY
52794: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52795: LD_ADDR_VAR 0 14
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: LD_INT 2
52805: PUSH
52806: LD_INT 3
52808: PUSH
52809: LD_INT 5
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: ST_TO_ADDR
// for i in tmp do
52818: LD_ADDR_VAR 0 8
52822: PUSH
52823: LD_VAR 0 14
52827: PUSH
52828: FOR_IN
52829: IFFALSE 52999
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52831: LD_ADDR_VAR 0 9
52835: PUSH
52836: LD_VAR 0 10
52840: PPUSH
52841: LD_VAR 0 8
52845: PPUSH
52846: LD_INT 5
52848: PPUSH
52849: CALL_OW 272
52853: PUSH
52854: LD_VAR 0 11
52858: PPUSH
52859: LD_VAR 0 8
52863: PPUSH
52864: LD_INT 5
52866: PPUSH
52867: CALL_OW 273
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52876: LD_VAR 0 9
52880: PUSH
52881: LD_INT 1
52883: ARRAY
52884: PPUSH
52885: LD_VAR 0 9
52889: PUSH
52890: LD_INT 2
52892: ARRAY
52893: PPUSH
52894: CALL_OW 488
52898: IFFALSE 52997
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52900: LD_ADDR_VAR 0 4
52904: PUSH
52905: LD_VAR 0 9
52909: PUSH
52910: LD_INT 1
52912: ARRAY
52913: PPUSH
52914: LD_VAR 0 9
52918: PUSH
52919: LD_INT 2
52921: ARRAY
52922: PPUSH
52923: CALL_OW 546
52927: ST_TO_ADDR
// if hex [ 1 ] then
52928: LD_VAR 0 4
52932: PUSH
52933: LD_INT 1
52935: ARRAY
52936: IFFALSE 52940
// continue ;
52938: GO 52828
// h := hex [ 2 ] ;
52940: LD_ADDR_VAR 0 13
52944: PUSH
52945: LD_VAR 0 4
52949: PUSH
52950: LD_INT 2
52952: ARRAY
52953: ST_TO_ADDR
// if h + 7 < height then
52954: LD_VAR 0 13
52958: PUSH
52959: LD_INT 7
52961: PLUS
52962: PUSH
52963: LD_VAR 0 15
52967: LESS
52968: IFFALSE 52997
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52970: LD_ADDR_VAR 0 18
52974: PUSH
52975: LD_INT 7
52977: PUSH
52978: LD_INT 28
52980: PUSH
52981: LD_INT 45
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: LIST
52988: PUSH
52989: LD_VAR 0 12
52993: ARRAY
52994: ST_TO_ADDR
// break ;
52995: GO 52999
// end ; end ; end ;
52997: GO 52828
52999: POP
53000: POP
// end ; if not weapon then
53001: LD_VAR 0 18
53005: NOT
53006: IFFALSE 53066
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
53008: LD_ADDR_VAR 0 5
53012: PUSH
53013: LD_VAR 0 5
53017: PUSH
53018: LD_INT 11
53020: PUSH
53021: LD_INT 30
53023: PUSH
53024: LD_INT 49
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: LIST
53031: DIFF
53032: ST_TO_ADDR
// if not list then
53033: LD_VAR 0 5
53037: NOT
53038: IFFALSE 53042
// exit ;
53040: GO 53184
// weapon := list [ rand ( 1 , list ) ] ;
53042: LD_ADDR_VAR 0 18
53046: PUSH
53047: LD_VAR 0 5
53051: PUSH
53052: LD_INT 1
53054: PPUSH
53055: LD_VAR 0 5
53059: PPUSH
53060: CALL_OW 12
53064: ARRAY
53065: ST_TO_ADDR
// end ; if weapon then
53066: LD_VAR 0 18
53070: IFFALSE 53184
// begin tmp := CostOfWeapon ( weapon ) ;
53072: LD_ADDR_VAR 0 14
53076: PUSH
53077: LD_VAR 0 18
53081: PPUSH
53082: CALL_OW 451
53086: ST_TO_ADDR
// j := GetBase ( tower ) ;
53087: LD_ADDR_VAR 0 9
53091: PUSH
53092: LD_VAR 0 1
53096: PPUSH
53097: CALL_OW 274
53101: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
53102: LD_VAR 0 9
53106: PPUSH
53107: LD_INT 1
53109: PPUSH
53110: CALL_OW 275
53114: PUSH
53115: LD_VAR 0 14
53119: PUSH
53120: LD_INT 1
53122: ARRAY
53123: GREATEREQUAL
53124: PUSH
53125: LD_VAR 0 9
53129: PPUSH
53130: LD_INT 2
53132: PPUSH
53133: CALL_OW 275
53137: PUSH
53138: LD_VAR 0 14
53142: PUSH
53143: LD_INT 2
53145: ARRAY
53146: GREATEREQUAL
53147: AND
53148: PUSH
53149: LD_VAR 0 9
53153: PPUSH
53154: LD_INT 3
53156: PPUSH
53157: CALL_OW 275
53161: PUSH
53162: LD_VAR 0 14
53166: PUSH
53167: LD_INT 3
53169: ARRAY
53170: GREATEREQUAL
53171: AND
53172: IFFALSE 53184
// result := weapon ;
53174: LD_ADDR_VAR 0 3
53178: PUSH
53179: LD_VAR 0 18
53183: ST_TO_ADDR
// end ; end ;
53184: LD_VAR 0 3
53188: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
53189: LD_INT 0
53191: PPUSH
53192: PPUSH
// result := true ;
53193: LD_ADDR_VAR 0 3
53197: PUSH
53198: LD_INT 1
53200: ST_TO_ADDR
// if array1 = array2 then
53201: LD_VAR 0 1
53205: PUSH
53206: LD_VAR 0 2
53210: EQUAL
53211: IFFALSE 53271
// begin for i = 1 to array1 do
53213: LD_ADDR_VAR 0 4
53217: PUSH
53218: DOUBLE
53219: LD_INT 1
53221: DEC
53222: ST_TO_ADDR
53223: LD_VAR 0 1
53227: PUSH
53228: FOR_TO
53229: IFFALSE 53267
// if array1 [ i ] <> array2 [ i ] then
53231: LD_VAR 0 1
53235: PUSH
53236: LD_VAR 0 4
53240: ARRAY
53241: PUSH
53242: LD_VAR 0 2
53246: PUSH
53247: LD_VAR 0 4
53251: ARRAY
53252: NONEQUAL
53253: IFFALSE 53265
// begin result := false ;
53255: LD_ADDR_VAR 0 3
53259: PUSH
53260: LD_INT 0
53262: ST_TO_ADDR
// break ;
53263: GO 53267
// end ;
53265: GO 53228
53267: POP
53268: POP
// end else
53269: GO 53279
// result := false ;
53271: LD_ADDR_VAR 0 3
53275: PUSH
53276: LD_INT 0
53278: ST_TO_ADDR
// end ;
53279: LD_VAR 0 3
53283: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
53284: LD_INT 0
53286: PPUSH
53287: PPUSH
// if not array1 or not array2 then
53288: LD_VAR 0 1
53292: NOT
53293: PUSH
53294: LD_VAR 0 2
53298: NOT
53299: OR
53300: IFFALSE 53304
// exit ;
53302: GO 53368
// result := true ;
53304: LD_ADDR_VAR 0 3
53308: PUSH
53309: LD_INT 1
53311: ST_TO_ADDR
// for i = 1 to array1 do
53312: LD_ADDR_VAR 0 4
53316: PUSH
53317: DOUBLE
53318: LD_INT 1
53320: DEC
53321: ST_TO_ADDR
53322: LD_VAR 0 1
53326: PUSH
53327: FOR_TO
53328: IFFALSE 53366
// if array1 [ i ] <> array2 [ i ] then
53330: LD_VAR 0 1
53334: PUSH
53335: LD_VAR 0 4
53339: ARRAY
53340: PUSH
53341: LD_VAR 0 2
53345: PUSH
53346: LD_VAR 0 4
53350: ARRAY
53351: NONEQUAL
53352: IFFALSE 53364
// begin result := false ;
53354: LD_ADDR_VAR 0 3
53358: PUSH
53359: LD_INT 0
53361: ST_TO_ADDR
// break ;
53362: GO 53366
// end ;
53364: GO 53327
53366: POP
53367: POP
// end ;
53368: LD_VAR 0 3
53372: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
53373: LD_INT 0
53375: PPUSH
53376: PPUSH
53377: PPUSH
// pom := GetBase ( fac ) ;
53378: LD_ADDR_VAR 0 5
53382: PUSH
53383: LD_VAR 0 1
53387: PPUSH
53388: CALL_OW 274
53392: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
53393: LD_ADDR_VAR 0 4
53397: PUSH
53398: LD_VAR 0 2
53402: PUSH
53403: LD_INT 1
53405: ARRAY
53406: PPUSH
53407: LD_VAR 0 2
53411: PUSH
53412: LD_INT 2
53414: ARRAY
53415: PPUSH
53416: LD_VAR 0 2
53420: PUSH
53421: LD_INT 3
53423: ARRAY
53424: PPUSH
53425: LD_VAR 0 2
53429: PUSH
53430: LD_INT 4
53432: ARRAY
53433: PPUSH
53434: CALL_OW 449
53438: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53439: LD_ADDR_VAR 0 3
53443: PUSH
53444: LD_VAR 0 5
53448: PPUSH
53449: LD_INT 1
53451: PPUSH
53452: CALL_OW 275
53456: PUSH
53457: LD_VAR 0 4
53461: PUSH
53462: LD_INT 1
53464: ARRAY
53465: GREATEREQUAL
53466: PUSH
53467: LD_VAR 0 5
53471: PPUSH
53472: LD_INT 2
53474: PPUSH
53475: CALL_OW 275
53479: PUSH
53480: LD_VAR 0 4
53484: PUSH
53485: LD_INT 2
53487: ARRAY
53488: GREATEREQUAL
53489: AND
53490: PUSH
53491: LD_VAR 0 5
53495: PPUSH
53496: LD_INT 3
53498: PPUSH
53499: CALL_OW 275
53503: PUSH
53504: LD_VAR 0 4
53508: PUSH
53509: LD_INT 3
53511: ARRAY
53512: GREATEREQUAL
53513: AND
53514: ST_TO_ADDR
// end ;
53515: LD_VAR 0 3
53519: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53520: LD_INT 0
53522: PPUSH
53523: PPUSH
53524: PPUSH
53525: PPUSH
// pom := GetBase ( building ) ;
53526: LD_ADDR_VAR 0 3
53530: PUSH
53531: LD_VAR 0 1
53535: PPUSH
53536: CALL_OW 274
53540: ST_TO_ADDR
// if not pom then
53541: LD_VAR 0 3
53545: NOT
53546: IFFALSE 53550
// exit ;
53548: GO 53720
// btype := GetBType ( building ) ;
53550: LD_ADDR_VAR 0 5
53554: PUSH
53555: LD_VAR 0 1
53559: PPUSH
53560: CALL_OW 266
53564: ST_TO_ADDR
// if btype = b_armoury then
53565: LD_VAR 0 5
53569: PUSH
53570: LD_INT 4
53572: EQUAL
53573: IFFALSE 53583
// btype := b_barracks ;
53575: LD_ADDR_VAR 0 5
53579: PUSH
53580: LD_INT 5
53582: ST_TO_ADDR
// if btype = b_depot then
53583: LD_VAR 0 5
53587: PUSH
53588: LD_INT 0
53590: EQUAL
53591: IFFALSE 53601
// btype := b_warehouse ;
53593: LD_ADDR_VAR 0 5
53597: PUSH
53598: LD_INT 1
53600: ST_TO_ADDR
// if btype = b_workshop then
53601: LD_VAR 0 5
53605: PUSH
53606: LD_INT 2
53608: EQUAL
53609: IFFALSE 53619
// btype := b_factory ;
53611: LD_ADDR_VAR 0 5
53615: PUSH
53616: LD_INT 3
53618: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53619: LD_ADDR_VAR 0 4
53623: PUSH
53624: LD_VAR 0 5
53628: PPUSH
53629: LD_VAR 0 1
53633: PPUSH
53634: CALL_OW 248
53638: PPUSH
53639: CALL_OW 450
53643: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53644: LD_ADDR_VAR 0 2
53648: PUSH
53649: LD_VAR 0 3
53653: PPUSH
53654: LD_INT 1
53656: PPUSH
53657: CALL_OW 275
53661: PUSH
53662: LD_VAR 0 4
53666: PUSH
53667: LD_INT 1
53669: ARRAY
53670: GREATEREQUAL
53671: PUSH
53672: LD_VAR 0 3
53676: PPUSH
53677: LD_INT 2
53679: PPUSH
53680: CALL_OW 275
53684: PUSH
53685: LD_VAR 0 4
53689: PUSH
53690: LD_INT 2
53692: ARRAY
53693: GREATEREQUAL
53694: AND
53695: PUSH
53696: LD_VAR 0 3
53700: PPUSH
53701: LD_INT 3
53703: PPUSH
53704: CALL_OW 275
53708: PUSH
53709: LD_VAR 0 4
53713: PUSH
53714: LD_INT 3
53716: ARRAY
53717: GREATEREQUAL
53718: AND
53719: ST_TO_ADDR
// end ;
53720: LD_VAR 0 2
53724: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53725: LD_INT 0
53727: PPUSH
53728: PPUSH
53729: PPUSH
// pom := GetBase ( building ) ;
53730: LD_ADDR_VAR 0 4
53734: PUSH
53735: LD_VAR 0 1
53739: PPUSH
53740: CALL_OW 274
53744: ST_TO_ADDR
// if not pom then
53745: LD_VAR 0 4
53749: NOT
53750: IFFALSE 53754
// exit ;
53752: GO 53855
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53754: LD_ADDR_VAR 0 5
53758: PUSH
53759: LD_VAR 0 2
53763: PPUSH
53764: LD_VAR 0 1
53768: PPUSH
53769: CALL_OW 248
53773: PPUSH
53774: CALL_OW 450
53778: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53779: LD_ADDR_VAR 0 3
53783: PUSH
53784: LD_VAR 0 4
53788: PPUSH
53789: LD_INT 1
53791: PPUSH
53792: CALL_OW 275
53796: PUSH
53797: LD_VAR 0 5
53801: PUSH
53802: LD_INT 1
53804: ARRAY
53805: GREATEREQUAL
53806: PUSH
53807: LD_VAR 0 4
53811: PPUSH
53812: LD_INT 2
53814: PPUSH
53815: CALL_OW 275
53819: PUSH
53820: LD_VAR 0 5
53824: PUSH
53825: LD_INT 2
53827: ARRAY
53828: GREATEREQUAL
53829: AND
53830: PUSH
53831: LD_VAR 0 4
53835: PPUSH
53836: LD_INT 3
53838: PPUSH
53839: CALL_OW 275
53843: PUSH
53844: LD_VAR 0 5
53848: PUSH
53849: LD_INT 3
53851: ARRAY
53852: GREATEREQUAL
53853: AND
53854: ST_TO_ADDR
// end ;
53855: LD_VAR 0 3
53859: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53860: LD_INT 0
53862: PPUSH
53863: PPUSH
53864: PPUSH
53865: PPUSH
53866: PPUSH
53867: PPUSH
53868: PPUSH
53869: PPUSH
53870: PPUSH
53871: PPUSH
53872: PPUSH
// result := false ;
53873: LD_ADDR_VAR 0 8
53877: PUSH
53878: LD_INT 0
53880: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53881: LD_VAR 0 5
53885: NOT
53886: PUSH
53887: LD_VAR 0 1
53891: NOT
53892: OR
53893: PUSH
53894: LD_VAR 0 2
53898: NOT
53899: OR
53900: PUSH
53901: LD_VAR 0 3
53905: NOT
53906: OR
53907: IFFALSE 53911
// exit ;
53909: GO 54725
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53911: LD_ADDR_VAR 0 14
53915: PUSH
53916: LD_VAR 0 1
53920: PPUSH
53921: LD_VAR 0 2
53925: PPUSH
53926: LD_VAR 0 3
53930: PPUSH
53931: LD_VAR 0 4
53935: PPUSH
53936: LD_VAR 0 5
53940: PUSH
53941: LD_INT 1
53943: ARRAY
53944: PPUSH
53945: CALL_OW 248
53949: PPUSH
53950: LD_INT 0
53952: PPUSH
53953: CALL 55962 0 6
53957: ST_TO_ADDR
// if not hexes then
53958: LD_VAR 0 14
53962: NOT
53963: IFFALSE 53967
// exit ;
53965: GO 54725
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53967: LD_ADDR_VAR 0 17
53971: PUSH
53972: LD_VAR 0 5
53976: PPUSH
53977: LD_INT 22
53979: PUSH
53980: LD_VAR 0 13
53984: PPUSH
53985: CALL_OW 255
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 2
53996: PUSH
53997: LD_INT 30
53999: PUSH
54000: LD_INT 0
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 30
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: LIST
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PPUSH
54026: CALL_OW 72
54030: ST_TO_ADDR
// for i = 1 to hexes do
54031: LD_ADDR_VAR 0 9
54035: PUSH
54036: DOUBLE
54037: LD_INT 1
54039: DEC
54040: ST_TO_ADDR
54041: LD_VAR 0 14
54045: PUSH
54046: FOR_TO
54047: IFFALSE 54723
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54049: LD_ADDR_VAR 0 13
54053: PUSH
54054: LD_VAR 0 14
54058: PUSH
54059: LD_VAR 0 9
54063: ARRAY
54064: PUSH
54065: LD_INT 1
54067: ARRAY
54068: PPUSH
54069: LD_VAR 0 14
54073: PUSH
54074: LD_VAR 0 9
54078: ARRAY
54079: PUSH
54080: LD_INT 2
54082: ARRAY
54083: PPUSH
54084: CALL_OW 428
54088: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
54089: LD_VAR 0 14
54093: PUSH
54094: LD_VAR 0 9
54098: ARRAY
54099: PUSH
54100: LD_INT 1
54102: ARRAY
54103: PPUSH
54104: LD_VAR 0 14
54108: PUSH
54109: LD_VAR 0 9
54113: ARRAY
54114: PUSH
54115: LD_INT 2
54117: ARRAY
54118: PPUSH
54119: CALL_OW 351
54123: PUSH
54124: LD_VAR 0 14
54128: PUSH
54129: LD_VAR 0 9
54133: ARRAY
54134: PUSH
54135: LD_INT 1
54137: ARRAY
54138: PPUSH
54139: LD_VAR 0 14
54143: PUSH
54144: LD_VAR 0 9
54148: ARRAY
54149: PUSH
54150: LD_INT 2
54152: ARRAY
54153: PPUSH
54154: CALL_OW 488
54158: NOT
54159: OR
54160: PUSH
54161: LD_VAR 0 13
54165: PPUSH
54166: CALL_OW 247
54170: PUSH
54171: LD_INT 3
54173: EQUAL
54174: OR
54175: IFFALSE 54181
// exit ;
54177: POP
54178: POP
54179: GO 54725
// if not tmp then
54181: LD_VAR 0 13
54185: NOT
54186: IFFALSE 54190
// continue ;
54188: GO 54046
// result := true ;
54190: LD_ADDR_VAR 0 8
54194: PUSH
54195: LD_INT 1
54197: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
54198: LD_VAR 0 6
54202: PUSH
54203: LD_VAR 0 13
54207: PPUSH
54208: CALL_OW 247
54212: PUSH
54213: LD_INT 2
54215: EQUAL
54216: AND
54217: PUSH
54218: LD_VAR 0 13
54222: PPUSH
54223: CALL_OW 263
54227: PUSH
54228: LD_INT 1
54230: EQUAL
54231: AND
54232: IFFALSE 54396
// begin if IsDrivenBy ( tmp ) then
54234: LD_VAR 0 13
54238: PPUSH
54239: CALL_OW 311
54243: IFFALSE 54247
// continue ;
54245: GO 54046
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
54247: LD_VAR 0 6
54251: PPUSH
54252: LD_INT 3
54254: PUSH
54255: LD_INT 60
54257: PUSH
54258: EMPTY
54259: LIST
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 3
54267: PUSH
54268: LD_INT 55
54270: PUSH
54271: EMPTY
54272: LIST
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PPUSH
54282: CALL_OW 72
54286: IFFALSE 54394
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
54288: LD_ADDR_VAR 0 18
54292: PUSH
54293: LD_VAR 0 6
54297: PPUSH
54298: LD_INT 3
54300: PUSH
54301: LD_INT 60
54303: PUSH
54304: EMPTY
54305: LIST
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 3
54313: PUSH
54314: LD_INT 55
54316: PUSH
54317: EMPTY
54318: LIST
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PPUSH
54328: CALL_OW 72
54332: PUSH
54333: LD_INT 1
54335: ARRAY
54336: ST_TO_ADDR
// if IsInUnit ( driver ) then
54337: LD_VAR 0 18
54341: PPUSH
54342: CALL_OW 310
54346: IFFALSE 54357
// ComExit ( driver ) ;
54348: LD_VAR 0 18
54352: PPUSH
54353: CALL 79146 0 1
// AddComEnterUnit ( driver , tmp ) ;
54357: LD_VAR 0 18
54361: PPUSH
54362: LD_VAR 0 13
54366: PPUSH
54367: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
54371: LD_VAR 0 18
54375: PPUSH
54376: LD_VAR 0 7
54380: PPUSH
54381: CALL_OW 173
// AddComExitVehicle ( driver ) ;
54385: LD_VAR 0 18
54389: PPUSH
54390: CALL_OW 181
// end ; continue ;
54394: GO 54046
// end ; if not cleaners or not tmp in cleaners then
54396: LD_VAR 0 6
54400: NOT
54401: PUSH
54402: LD_VAR 0 13
54406: PUSH
54407: LD_VAR 0 6
54411: IN
54412: NOT
54413: OR
54414: IFFALSE 54721
// begin if dep then
54416: LD_VAR 0 17
54420: IFFALSE 54556
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54422: LD_ADDR_VAR 0 16
54426: PUSH
54427: LD_VAR 0 17
54431: PUSH
54432: LD_INT 1
54434: ARRAY
54435: PPUSH
54436: CALL_OW 250
54440: PPUSH
54441: LD_VAR 0 17
54445: PUSH
54446: LD_INT 1
54448: ARRAY
54449: PPUSH
54450: CALL_OW 254
54454: PPUSH
54455: LD_INT 5
54457: PPUSH
54458: CALL_OW 272
54462: PUSH
54463: LD_VAR 0 17
54467: PUSH
54468: LD_INT 1
54470: ARRAY
54471: PPUSH
54472: CALL_OW 251
54476: PPUSH
54477: LD_VAR 0 17
54481: PUSH
54482: LD_INT 1
54484: ARRAY
54485: PPUSH
54486: CALL_OW 254
54490: PPUSH
54491: LD_INT 5
54493: PPUSH
54494: CALL_OW 273
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54503: LD_VAR 0 16
54507: PUSH
54508: LD_INT 1
54510: ARRAY
54511: PPUSH
54512: LD_VAR 0 16
54516: PUSH
54517: LD_INT 2
54519: ARRAY
54520: PPUSH
54521: CALL_OW 488
54525: IFFALSE 54556
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54527: LD_VAR 0 13
54531: PPUSH
54532: LD_VAR 0 16
54536: PUSH
54537: LD_INT 1
54539: ARRAY
54540: PPUSH
54541: LD_VAR 0 16
54545: PUSH
54546: LD_INT 2
54548: ARRAY
54549: PPUSH
54550: CALL_OW 111
// continue ;
54554: GO 54046
// end ; end ; r := GetDir ( tmp ) ;
54556: LD_ADDR_VAR 0 15
54560: PUSH
54561: LD_VAR 0 13
54565: PPUSH
54566: CALL_OW 254
54570: ST_TO_ADDR
// if r = 5 then
54571: LD_VAR 0 15
54575: PUSH
54576: LD_INT 5
54578: EQUAL
54579: IFFALSE 54589
// r := 0 ;
54581: LD_ADDR_VAR 0 15
54585: PUSH
54586: LD_INT 0
54588: ST_TO_ADDR
// for j = r to 5 do
54589: LD_ADDR_VAR 0 10
54593: PUSH
54594: DOUBLE
54595: LD_VAR 0 15
54599: DEC
54600: ST_TO_ADDR
54601: LD_INT 5
54603: PUSH
54604: FOR_TO
54605: IFFALSE 54719
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54607: LD_ADDR_VAR 0 11
54611: PUSH
54612: LD_VAR 0 13
54616: PPUSH
54617: CALL_OW 250
54621: PPUSH
54622: LD_VAR 0 10
54626: PPUSH
54627: LD_INT 2
54629: PPUSH
54630: CALL_OW 272
54634: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54635: LD_ADDR_VAR 0 12
54639: PUSH
54640: LD_VAR 0 13
54644: PPUSH
54645: CALL_OW 251
54649: PPUSH
54650: LD_VAR 0 10
54654: PPUSH
54655: LD_INT 2
54657: PPUSH
54658: CALL_OW 273
54662: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54663: LD_VAR 0 11
54667: PPUSH
54668: LD_VAR 0 12
54672: PPUSH
54673: CALL_OW 488
54677: PUSH
54678: LD_VAR 0 11
54682: PPUSH
54683: LD_VAR 0 12
54687: PPUSH
54688: CALL_OW 428
54692: NOT
54693: AND
54694: IFFALSE 54717
// begin ComMoveXY ( tmp , _x , _y ) ;
54696: LD_VAR 0 13
54700: PPUSH
54701: LD_VAR 0 11
54705: PPUSH
54706: LD_VAR 0 12
54710: PPUSH
54711: CALL_OW 111
// break ;
54715: GO 54719
// end ; end ;
54717: GO 54604
54719: POP
54720: POP
// end ; end ;
54721: GO 54046
54723: POP
54724: POP
// end ;
54725: LD_VAR 0 8
54729: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54730: LD_INT 0
54732: PPUSH
// result := true ;
54733: LD_ADDR_VAR 0 3
54737: PUSH
54738: LD_INT 1
54740: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54741: LD_VAR 0 2
54745: PUSH
54746: LD_INT 24
54748: DOUBLE
54749: EQUAL
54750: IFTRUE 54760
54752: LD_INT 33
54754: DOUBLE
54755: EQUAL
54756: IFTRUE 54760
54758: GO 54785
54760: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54761: LD_ADDR_VAR 0 3
54765: PUSH
54766: LD_INT 32
54768: PPUSH
54769: LD_VAR 0 1
54773: PPUSH
54774: CALL_OW 321
54778: PUSH
54779: LD_INT 2
54781: EQUAL
54782: ST_TO_ADDR
54783: GO 55105
54785: LD_INT 20
54787: DOUBLE
54788: EQUAL
54789: IFTRUE 54793
54791: GO 54818
54793: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54794: LD_ADDR_VAR 0 3
54798: PUSH
54799: LD_INT 6
54801: PPUSH
54802: LD_VAR 0 1
54806: PPUSH
54807: CALL_OW 321
54811: PUSH
54812: LD_INT 2
54814: EQUAL
54815: ST_TO_ADDR
54816: GO 55105
54818: LD_INT 22
54820: DOUBLE
54821: EQUAL
54822: IFTRUE 54832
54824: LD_INT 36
54826: DOUBLE
54827: EQUAL
54828: IFTRUE 54832
54830: GO 54857
54832: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54833: LD_ADDR_VAR 0 3
54837: PUSH
54838: LD_INT 15
54840: PPUSH
54841: LD_VAR 0 1
54845: PPUSH
54846: CALL_OW 321
54850: PUSH
54851: LD_INT 2
54853: EQUAL
54854: ST_TO_ADDR
54855: GO 55105
54857: LD_INT 30
54859: DOUBLE
54860: EQUAL
54861: IFTRUE 54865
54863: GO 54890
54865: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54866: LD_ADDR_VAR 0 3
54870: PUSH
54871: LD_INT 20
54873: PPUSH
54874: LD_VAR 0 1
54878: PPUSH
54879: CALL_OW 321
54883: PUSH
54884: LD_INT 2
54886: EQUAL
54887: ST_TO_ADDR
54888: GO 55105
54890: LD_INT 28
54892: DOUBLE
54893: EQUAL
54894: IFTRUE 54904
54896: LD_INT 21
54898: DOUBLE
54899: EQUAL
54900: IFTRUE 54904
54902: GO 54929
54904: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54905: LD_ADDR_VAR 0 3
54909: PUSH
54910: LD_INT 21
54912: PPUSH
54913: LD_VAR 0 1
54917: PPUSH
54918: CALL_OW 321
54922: PUSH
54923: LD_INT 2
54925: EQUAL
54926: ST_TO_ADDR
54927: GO 55105
54929: LD_INT 16
54931: DOUBLE
54932: EQUAL
54933: IFTRUE 54937
54935: GO 54964
54937: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54938: LD_ADDR_VAR 0 3
54942: PUSH
54943: LD_EXP 77
54947: PPUSH
54948: LD_VAR 0 1
54952: PPUSH
54953: CALL_OW 321
54957: PUSH
54958: LD_INT 2
54960: EQUAL
54961: ST_TO_ADDR
54962: GO 55105
54964: LD_INT 19
54966: DOUBLE
54967: EQUAL
54968: IFTRUE 54978
54970: LD_INT 23
54972: DOUBLE
54973: EQUAL
54974: IFTRUE 54978
54976: GO 55005
54978: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54979: LD_ADDR_VAR 0 3
54983: PUSH
54984: LD_EXP 76
54988: PPUSH
54989: LD_VAR 0 1
54993: PPUSH
54994: CALL_OW 321
54998: PUSH
54999: LD_INT 2
55001: EQUAL
55002: ST_TO_ADDR
55003: GO 55105
55005: LD_INT 17
55007: DOUBLE
55008: EQUAL
55009: IFTRUE 55013
55011: GO 55038
55013: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
55014: LD_ADDR_VAR 0 3
55018: PUSH
55019: LD_INT 39
55021: PPUSH
55022: LD_VAR 0 1
55026: PPUSH
55027: CALL_OW 321
55031: PUSH
55032: LD_INT 2
55034: EQUAL
55035: ST_TO_ADDR
55036: GO 55105
55038: LD_INT 18
55040: DOUBLE
55041: EQUAL
55042: IFTRUE 55046
55044: GO 55071
55046: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
55047: LD_ADDR_VAR 0 3
55051: PUSH
55052: LD_INT 40
55054: PPUSH
55055: LD_VAR 0 1
55059: PPUSH
55060: CALL_OW 321
55064: PUSH
55065: LD_INT 2
55067: EQUAL
55068: ST_TO_ADDR
55069: GO 55105
55071: LD_INT 27
55073: DOUBLE
55074: EQUAL
55075: IFTRUE 55079
55077: GO 55104
55079: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
55080: LD_ADDR_VAR 0 3
55084: PUSH
55085: LD_INT 35
55087: PPUSH
55088: LD_VAR 0 1
55092: PPUSH
55093: CALL_OW 321
55097: PUSH
55098: LD_INT 2
55100: EQUAL
55101: ST_TO_ADDR
55102: GO 55105
55104: POP
// end ;
55105: LD_VAR 0 3
55109: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
55110: LD_INT 0
55112: PPUSH
55113: PPUSH
55114: PPUSH
55115: PPUSH
55116: PPUSH
55117: PPUSH
55118: PPUSH
55119: PPUSH
55120: PPUSH
55121: PPUSH
55122: PPUSH
// result := false ;
55123: LD_ADDR_VAR 0 6
55127: PUSH
55128: LD_INT 0
55130: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
55131: LD_VAR 0 1
55135: NOT
55136: PUSH
55137: LD_VAR 0 1
55141: PPUSH
55142: CALL_OW 266
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: LD_INT 1
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: IN
55157: NOT
55158: OR
55159: PUSH
55160: LD_VAR 0 2
55164: NOT
55165: OR
55166: PUSH
55167: LD_VAR 0 5
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: LD_INT 1
55177: PUSH
55178: LD_INT 2
55180: PUSH
55181: LD_INT 3
55183: PUSH
55184: LD_INT 4
55186: PUSH
55187: LD_INT 5
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: IN
55198: NOT
55199: OR
55200: PUSH
55201: LD_VAR 0 3
55205: PPUSH
55206: LD_VAR 0 4
55210: PPUSH
55211: CALL_OW 488
55215: NOT
55216: OR
55217: IFFALSE 55221
// exit ;
55219: GO 55957
// side := GetSide ( depot ) ;
55221: LD_ADDR_VAR 0 9
55225: PUSH
55226: LD_VAR 0 1
55230: PPUSH
55231: CALL_OW 255
55235: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
55236: LD_VAR 0 9
55240: PPUSH
55241: LD_VAR 0 2
55245: PPUSH
55246: CALL 54730 0 2
55250: NOT
55251: IFFALSE 55255
// exit ;
55253: GO 55957
// pom := GetBase ( depot ) ;
55255: LD_ADDR_VAR 0 10
55259: PUSH
55260: LD_VAR 0 1
55264: PPUSH
55265: CALL_OW 274
55269: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55270: LD_ADDR_VAR 0 11
55274: PUSH
55275: LD_VAR 0 2
55279: PPUSH
55280: LD_VAR 0 1
55284: PPUSH
55285: CALL_OW 248
55289: PPUSH
55290: CALL_OW 450
55294: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
55295: LD_VAR 0 10
55299: PPUSH
55300: LD_INT 1
55302: PPUSH
55303: CALL_OW 275
55307: PUSH
55308: LD_VAR 0 11
55312: PUSH
55313: LD_INT 1
55315: ARRAY
55316: GREATEREQUAL
55317: PUSH
55318: LD_VAR 0 10
55322: PPUSH
55323: LD_INT 2
55325: PPUSH
55326: CALL_OW 275
55330: PUSH
55331: LD_VAR 0 11
55335: PUSH
55336: LD_INT 2
55338: ARRAY
55339: GREATEREQUAL
55340: AND
55341: PUSH
55342: LD_VAR 0 10
55346: PPUSH
55347: LD_INT 3
55349: PPUSH
55350: CALL_OW 275
55354: PUSH
55355: LD_VAR 0 11
55359: PUSH
55360: LD_INT 3
55362: ARRAY
55363: GREATEREQUAL
55364: AND
55365: NOT
55366: IFFALSE 55370
// exit ;
55368: GO 55957
// if GetBType ( depot ) = b_depot then
55370: LD_VAR 0 1
55374: PPUSH
55375: CALL_OW 266
55379: PUSH
55380: LD_INT 0
55382: EQUAL
55383: IFFALSE 55395
// dist := 28 else
55385: LD_ADDR_VAR 0 14
55389: PUSH
55390: LD_INT 28
55392: ST_TO_ADDR
55393: GO 55403
// dist := 36 ;
55395: LD_ADDR_VAR 0 14
55399: PUSH
55400: LD_INT 36
55402: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55403: LD_VAR 0 1
55407: PPUSH
55408: LD_VAR 0 3
55412: PPUSH
55413: LD_VAR 0 4
55417: PPUSH
55418: CALL_OW 297
55422: PUSH
55423: LD_VAR 0 14
55427: GREATER
55428: IFFALSE 55432
// exit ;
55430: GO 55957
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55432: LD_ADDR_VAR 0 12
55436: PUSH
55437: LD_VAR 0 2
55441: PPUSH
55442: LD_VAR 0 3
55446: PPUSH
55447: LD_VAR 0 4
55451: PPUSH
55452: LD_VAR 0 5
55456: PPUSH
55457: LD_VAR 0 1
55461: PPUSH
55462: CALL_OW 248
55466: PPUSH
55467: LD_INT 0
55469: PPUSH
55470: CALL 55962 0 6
55474: ST_TO_ADDR
// if not hexes then
55475: LD_VAR 0 12
55479: NOT
55480: IFFALSE 55484
// exit ;
55482: GO 55957
// hex := GetHexInfo ( x , y ) ;
55484: LD_ADDR_VAR 0 15
55488: PUSH
55489: LD_VAR 0 3
55493: PPUSH
55494: LD_VAR 0 4
55498: PPUSH
55499: CALL_OW 546
55503: ST_TO_ADDR
// if hex [ 1 ] then
55504: LD_VAR 0 15
55508: PUSH
55509: LD_INT 1
55511: ARRAY
55512: IFFALSE 55516
// exit ;
55514: GO 55957
// height := hex [ 2 ] ;
55516: LD_ADDR_VAR 0 13
55520: PUSH
55521: LD_VAR 0 15
55525: PUSH
55526: LD_INT 2
55528: ARRAY
55529: ST_TO_ADDR
// for i = 1 to hexes do
55530: LD_ADDR_VAR 0 7
55534: PUSH
55535: DOUBLE
55536: LD_INT 1
55538: DEC
55539: ST_TO_ADDR
55540: LD_VAR 0 12
55544: PUSH
55545: FOR_TO
55546: IFFALSE 55876
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55548: LD_VAR 0 12
55552: PUSH
55553: LD_VAR 0 7
55557: ARRAY
55558: PUSH
55559: LD_INT 1
55561: ARRAY
55562: PPUSH
55563: LD_VAR 0 12
55567: PUSH
55568: LD_VAR 0 7
55572: ARRAY
55573: PUSH
55574: LD_INT 2
55576: ARRAY
55577: PPUSH
55578: CALL_OW 488
55582: NOT
55583: PUSH
55584: LD_VAR 0 12
55588: PUSH
55589: LD_VAR 0 7
55593: ARRAY
55594: PUSH
55595: LD_INT 1
55597: ARRAY
55598: PPUSH
55599: LD_VAR 0 12
55603: PUSH
55604: LD_VAR 0 7
55608: ARRAY
55609: PUSH
55610: LD_INT 2
55612: ARRAY
55613: PPUSH
55614: CALL_OW 428
55618: PUSH
55619: LD_INT 0
55621: GREATER
55622: OR
55623: PUSH
55624: LD_VAR 0 12
55628: PUSH
55629: LD_VAR 0 7
55633: ARRAY
55634: PUSH
55635: LD_INT 1
55637: ARRAY
55638: PPUSH
55639: LD_VAR 0 12
55643: PUSH
55644: LD_VAR 0 7
55648: ARRAY
55649: PUSH
55650: LD_INT 2
55652: ARRAY
55653: PPUSH
55654: CALL_OW 351
55658: OR
55659: IFFALSE 55665
// exit ;
55661: POP
55662: POP
55663: GO 55957
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55665: LD_ADDR_VAR 0 8
55669: PUSH
55670: LD_VAR 0 12
55674: PUSH
55675: LD_VAR 0 7
55679: ARRAY
55680: PUSH
55681: LD_INT 1
55683: ARRAY
55684: PPUSH
55685: LD_VAR 0 12
55689: PUSH
55690: LD_VAR 0 7
55694: ARRAY
55695: PUSH
55696: LD_INT 2
55698: ARRAY
55699: PPUSH
55700: CALL_OW 546
55704: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55705: LD_VAR 0 8
55709: PUSH
55710: LD_INT 1
55712: ARRAY
55713: PUSH
55714: LD_VAR 0 8
55718: PUSH
55719: LD_INT 2
55721: ARRAY
55722: PUSH
55723: LD_VAR 0 13
55727: PUSH
55728: LD_INT 2
55730: PLUS
55731: GREATER
55732: OR
55733: PUSH
55734: LD_VAR 0 8
55738: PUSH
55739: LD_INT 2
55741: ARRAY
55742: PUSH
55743: LD_VAR 0 13
55747: PUSH
55748: LD_INT 2
55750: MINUS
55751: LESS
55752: OR
55753: PUSH
55754: LD_VAR 0 8
55758: PUSH
55759: LD_INT 3
55761: ARRAY
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: LD_INT 8
55768: PUSH
55769: LD_INT 9
55771: PUSH
55772: LD_INT 10
55774: PUSH
55775: LD_INT 11
55777: PUSH
55778: LD_INT 12
55780: PUSH
55781: LD_INT 13
55783: PUSH
55784: LD_INT 16
55786: PUSH
55787: LD_INT 17
55789: PUSH
55790: LD_INT 18
55792: PUSH
55793: LD_INT 19
55795: PUSH
55796: LD_INT 20
55798: PUSH
55799: LD_INT 21
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: IN
55817: NOT
55818: OR
55819: PUSH
55820: LD_VAR 0 8
55824: PUSH
55825: LD_INT 5
55827: ARRAY
55828: NOT
55829: OR
55830: PUSH
55831: LD_VAR 0 8
55835: PUSH
55836: LD_INT 6
55838: ARRAY
55839: PUSH
55840: LD_INT 1
55842: PUSH
55843: LD_INT 2
55845: PUSH
55846: LD_INT 7
55848: PUSH
55849: LD_INT 9
55851: PUSH
55852: LD_INT 10
55854: PUSH
55855: LD_INT 11
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: IN
55866: NOT
55867: OR
55868: IFFALSE 55874
// exit ;
55870: POP
55871: POP
55872: GO 55957
// end ;
55874: GO 55545
55876: POP
55877: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55878: LD_VAR 0 9
55882: PPUSH
55883: LD_VAR 0 3
55887: PPUSH
55888: LD_VAR 0 4
55892: PPUSH
55893: LD_INT 20
55895: PPUSH
55896: CALL 47903 0 4
55900: PUSH
55901: LD_INT 4
55903: ARRAY
55904: IFFALSE 55908
// exit ;
55906: GO 55957
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55908: LD_VAR 0 2
55912: PUSH
55913: LD_INT 29
55915: PUSH
55916: LD_INT 30
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: IN
55923: PUSH
55924: LD_VAR 0 3
55928: PPUSH
55929: LD_VAR 0 4
55933: PPUSH
55934: LD_VAR 0 9
55938: PPUSH
55939: CALL_OW 440
55943: NOT
55944: AND
55945: IFFALSE 55949
// exit ;
55947: GO 55957
// result := true ;
55949: LD_ADDR_VAR 0 6
55953: PUSH
55954: LD_INT 1
55956: ST_TO_ADDR
// end ;
55957: LD_VAR 0 6
55961: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55962: LD_INT 0
55964: PPUSH
55965: PPUSH
55966: PPUSH
55967: PPUSH
55968: PPUSH
55969: PPUSH
55970: PPUSH
55971: PPUSH
55972: PPUSH
55973: PPUSH
55974: PPUSH
55975: PPUSH
55976: PPUSH
55977: PPUSH
55978: PPUSH
55979: PPUSH
55980: PPUSH
55981: PPUSH
55982: PPUSH
55983: PPUSH
55984: PPUSH
55985: PPUSH
55986: PPUSH
55987: PPUSH
55988: PPUSH
55989: PPUSH
55990: PPUSH
55991: PPUSH
55992: PPUSH
55993: PPUSH
55994: PPUSH
55995: PPUSH
55996: PPUSH
55997: PPUSH
55998: PPUSH
55999: PPUSH
56000: PPUSH
56001: PPUSH
56002: PPUSH
56003: PPUSH
56004: PPUSH
56005: PPUSH
56006: PPUSH
56007: PPUSH
56008: PPUSH
56009: PPUSH
56010: PPUSH
56011: PPUSH
56012: PPUSH
56013: PPUSH
56014: PPUSH
56015: PPUSH
56016: PPUSH
56017: PPUSH
56018: PPUSH
56019: PPUSH
56020: PPUSH
56021: PPUSH
// result = [ ] ;
56022: LD_ADDR_VAR 0 7
56026: PUSH
56027: EMPTY
56028: ST_TO_ADDR
// temp_list = [ ] ;
56029: LD_ADDR_VAR 0 9
56033: PUSH
56034: EMPTY
56035: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
56036: LD_VAR 0 4
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: LD_INT 1
56046: PUSH
56047: LD_INT 2
56049: PUSH
56050: LD_INT 3
56052: PUSH
56053: LD_INT 4
56055: PUSH
56056: LD_INT 5
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: IN
56067: NOT
56068: PUSH
56069: LD_VAR 0 1
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: LD_INT 1
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: IN
56084: PUSH
56085: LD_VAR 0 5
56089: PUSH
56090: LD_INT 1
56092: PUSH
56093: LD_INT 2
56095: PUSH
56096: LD_INT 3
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: LIST
56103: IN
56104: NOT
56105: AND
56106: OR
56107: IFFALSE 56111
// exit ;
56109: GO 74502
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
56111: LD_VAR 0 1
56115: PUSH
56116: LD_INT 6
56118: PUSH
56119: LD_INT 7
56121: PUSH
56122: LD_INT 8
56124: PUSH
56125: LD_INT 13
56127: PUSH
56128: LD_INT 12
56130: PUSH
56131: LD_INT 15
56133: PUSH
56134: LD_INT 11
56136: PUSH
56137: LD_INT 14
56139: PUSH
56140: LD_INT 10
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: IN
56154: IFFALSE 56164
// btype = b_lab ;
56156: LD_ADDR_VAR 0 1
56160: PUSH
56161: LD_INT 6
56163: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
56164: LD_VAR 0 6
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: LD_INT 2
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: LIST
56182: IN
56183: NOT
56184: PUSH
56185: LD_VAR 0 1
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: LD_INT 1
56195: PUSH
56196: LD_INT 2
56198: PUSH
56199: LD_INT 3
56201: PUSH
56202: LD_INT 6
56204: PUSH
56205: LD_INT 36
56207: PUSH
56208: LD_INT 4
56210: PUSH
56211: LD_INT 5
56213: PUSH
56214: LD_INT 31
56216: PUSH
56217: LD_INT 32
56219: PUSH
56220: LD_INT 33
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: IN
56236: NOT
56237: PUSH
56238: LD_VAR 0 6
56242: PUSH
56243: LD_INT 1
56245: EQUAL
56246: AND
56247: OR
56248: PUSH
56249: LD_VAR 0 1
56253: PUSH
56254: LD_INT 2
56256: PUSH
56257: LD_INT 3
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: IN
56264: NOT
56265: PUSH
56266: LD_VAR 0 6
56270: PUSH
56271: LD_INT 2
56273: EQUAL
56274: AND
56275: OR
56276: IFFALSE 56286
// mode = 0 ;
56278: LD_ADDR_VAR 0 6
56282: PUSH
56283: LD_INT 0
56285: ST_TO_ADDR
// case mode of 0 :
56286: LD_VAR 0 6
56290: PUSH
56291: LD_INT 0
56293: DOUBLE
56294: EQUAL
56295: IFTRUE 56299
56297: GO 67752
56299: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56300: LD_ADDR_VAR 0 11
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 1
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: NEG
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 1
56369: NEG
56370: PUSH
56371: LD_INT 1
56373: NEG
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: LD_INT 2
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: LD_INT 2
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: PUSH
56405: LD_INT 1
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: PUSH
56416: LD_INT 2
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: LD_INT 2
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 1
56435: NEG
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 1
56446: PUSH
56447: LD_INT 3
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 0
56456: PUSH
56457: LD_INT 3
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 1
56466: NEG
56467: PUSH
56468: LD_INT 2
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56493: LD_ADDR_VAR 0 12
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: LD_INT 0
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 1
56521: PUSH
56522: LD_INT 0
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: LD_INT 1
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: NEG
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 1
56562: NEG
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 1
56574: PUSH
56575: LD_INT 1
56577: NEG
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 2
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 2
56595: PUSH
56596: LD_INT 1
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 1
56605: NEG
56606: PUSH
56607: LD_INT 1
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 2
56616: NEG
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 2
56627: NEG
56628: PUSH
56629: LD_INT 1
56631: NEG
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 2
56639: NEG
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 3
56650: NEG
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 3
56661: NEG
56662: PUSH
56663: LD_INT 1
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56689: LD_ADDR_VAR 0 13
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 1
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: LD_INT 1
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: LD_INT 1
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: LD_INT 1
56762: NEG
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: LD_INT 2
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 2
56782: PUSH
56783: LD_INT 1
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 2
56792: PUSH
56793: LD_INT 2
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 1
56802: PUSH
56803: LD_INT 2
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 2
56812: NEG
56813: PUSH
56814: LD_INT 1
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 2
56824: NEG
56825: PUSH
56826: LD_INT 2
56828: NEG
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 2
56836: NEG
56837: PUSH
56838: LD_INT 3
56840: NEG
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 3
56848: NEG
56849: PUSH
56850: LD_INT 2
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 3
56860: NEG
56861: PUSH
56862: LD_INT 3
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56888: LD_ADDR_VAR 0 14
56892: PUSH
56893: LD_INT 0
56895: PUSH
56896: LD_INT 0
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 0
56905: PUSH
56906: LD_INT 1
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 1
56916: PUSH
56917: LD_INT 0
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 1
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 0
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 1
56946: NEG
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 1
56957: NEG
56958: PUSH
56959: LD_INT 1
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 1
56969: NEG
56970: PUSH
56971: LD_INT 2
56973: NEG
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 0
56981: PUSH
56982: LD_INT 2
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 1
56992: PUSH
56993: LD_INT 1
56995: NEG
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 1
57003: PUSH
57004: LD_INT 2
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 0
57013: PUSH
57014: LD_INT 2
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 1
57023: NEG
57024: PUSH
57025: LD_INT 1
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 1
57034: NEG
57035: PUSH
57036: LD_INT 3
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: LD_INT 3
57049: NEG
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: LD_INT 2
57060: NEG
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57084: LD_ADDR_VAR 0 15
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 0
57101: PUSH
57102: LD_INT 1
57104: NEG
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: LD_INT 0
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 0
57132: PUSH
57133: LD_INT 1
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 1
57142: NEG
57143: PUSH
57144: LD_INT 0
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 1
57165: PUSH
57166: LD_INT 1
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 2
57176: PUSH
57177: LD_INT 0
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 2
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: LD_INT 1
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 2
57207: NEG
57208: PUSH
57209: LD_INT 0
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 2
57218: NEG
57219: PUSH
57220: LD_INT 1
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 2
57230: PUSH
57231: LD_INT 1
57233: NEG
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 3
57241: PUSH
57242: LD_INT 0
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 3
57251: PUSH
57252: LD_INT 1
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57277: LD_ADDR_VAR 0 16
57281: PUSH
57282: LD_INT 0
57284: PUSH
57285: LD_INT 0
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 0
57294: PUSH
57295: LD_INT 1
57297: NEG
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 1
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 1
57315: PUSH
57316: LD_INT 1
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: LD_INT 1
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 1
57335: NEG
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 1
57346: NEG
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 1
57358: NEG
57359: PUSH
57360: LD_INT 2
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 2
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 2
57380: PUSH
57381: LD_INT 2
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 1
57390: PUSH
57391: LD_INT 2
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 2
57400: NEG
57401: PUSH
57402: LD_INT 1
57404: NEG
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 2
57412: NEG
57413: PUSH
57414: LD_INT 2
57416: NEG
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 3
57424: PUSH
57425: LD_INT 2
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 3
57434: PUSH
57435: LD_INT 3
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 2
57444: PUSH
57445: LD_INT 3
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57470: LD_ADDR_VAR 0 17
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 1
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: LD_INT 1
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 1
57539: NEG
57540: PUSH
57541: LD_INT 1
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: LD_INT 2
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: LD_INT 2
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 2
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 2
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 2
57605: PUSH
57606: LD_INT 2
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 1
57615: PUSH
57616: LD_INT 2
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: LD_INT 2
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: LD_INT 1
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 2
57646: NEG
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 2
57657: NEG
57658: PUSH
57659: LD_INT 1
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 2
57669: NEG
57670: PUSH
57671: LD_INT 2
57673: NEG
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57700: LD_ADDR_VAR 0 18
57704: PUSH
57705: LD_INT 0
57707: PUSH
57708: LD_INT 0
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 0
57717: PUSH
57718: LD_INT 1
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 1
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 1
57738: PUSH
57739: LD_INT 1
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 0
57748: PUSH
57749: LD_INT 1
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 1
57758: NEG
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 1
57769: NEG
57770: PUSH
57771: LD_INT 1
57773: NEG
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: LD_INT 2
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 0
57793: PUSH
57794: LD_INT 2
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 1
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 2
57815: PUSH
57816: LD_INT 0
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 2
57825: PUSH
57826: LD_INT 1
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 2
57835: PUSH
57836: LD_INT 2
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 1
57845: PUSH
57846: LD_INT 2
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 0
57855: PUSH
57856: LD_INT 2
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 1
57865: NEG
57866: PUSH
57867: LD_INT 1
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 2
57876: NEG
57877: PUSH
57878: LD_INT 0
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 2
57887: NEG
57888: PUSH
57889: LD_INT 1
57891: NEG
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 2
57899: NEG
57900: PUSH
57901: LD_INT 2
57903: NEG
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57930: LD_ADDR_VAR 0 19
57934: PUSH
57935: LD_INT 0
57937: PUSH
57938: LD_INT 0
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: LD_INT 1
57950: NEG
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 1
57958: PUSH
57959: LD_INT 0
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 1
57968: PUSH
57969: LD_INT 1
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 0
57978: PUSH
57979: LD_INT 1
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 1
57988: NEG
57989: PUSH
57990: LD_INT 0
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 1
57999: NEG
58000: PUSH
58001: LD_INT 1
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 1
58011: NEG
58012: PUSH
58013: LD_INT 2
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 0
58023: PUSH
58024: LD_INT 2
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: PUSH
58035: LD_INT 1
58037: NEG
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 2
58045: PUSH
58046: LD_INT 0
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 2
58055: PUSH
58056: LD_INT 1
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 2
58065: PUSH
58066: LD_INT 2
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: PUSH
58076: LD_INT 2
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 0
58085: PUSH
58086: LD_INT 2
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 1
58095: NEG
58096: PUSH
58097: LD_INT 1
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 2
58106: NEG
58107: PUSH
58108: LD_INT 0
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 2
58117: NEG
58118: PUSH
58119: LD_INT 1
58121: NEG
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 2
58129: NEG
58130: PUSH
58131: LD_INT 2
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58160: LD_ADDR_VAR 0 20
58164: PUSH
58165: LD_INT 0
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 0
58177: PUSH
58178: LD_INT 1
58180: NEG
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 1
58188: PUSH
58189: LD_INT 0
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 1
58198: PUSH
58199: LD_INT 1
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 0
58208: PUSH
58209: LD_INT 1
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 1
58229: NEG
58230: PUSH
58231: LD_INT 1
58233: NEG
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 1
58241: NEG
58242: PUSH
58243: LD_INT 2
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: LD_INT 2
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: PUSH
58265: LD_INT 1
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 2
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 2
58285: PUSH
58286: LD_INT 1
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 2
58295: PUSH
58296: LD_INT 2
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 1
58305: PUSH
58306: LD_INT 2
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 0
58315: PUSH
58316: LD_INT 2
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 1
58325: NEG
58326: PUSH
58327: LD_INT 1
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 2
58336: NEG
58337: PUSH
58338: LD_INT 0
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 2
58347: NEG
58348: PUSH
58349: LD_INT 1
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 2
58359: NEG
58360: PUSH
58361: LD_INT 2
58363: NEG
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58390: LD_ADDR_VAR 0 21
58394: PUSH
58395: LD_INT 0
58397: PUSH
58398: LD_INT 0
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: LD_INT 1
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 1
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 1
58428: PUSH
58429: LD_INT 1
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 0
58438: PUSH
58439: LD_INT 1
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 1
58448: NEG
58449: PUSH
58450: LD_INT 0
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 1
58459: NEG
58460: PUSH
58461: LD_INT 1
58463: NEG
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 1
58471: NEG
58472: PUSH
58473: LD_INT 2
58475: NEG
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 0
58483: PUSH
58484: LD_INT 2
58486: NEG
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 1
58494: PUSH
58495: LD_INT 1
58497: NEG
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 2
58505: PUSH
58506: LD_INT 0
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 2
58515: PUSH
58516: LD_INT 1
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 2
58525: PUSH
58526: LD_INT 2
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 1
58535: PUSH
58536: LD_INT 2
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 0
58545: PUSH
58546: LD_INT 2
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 1
58555: NEG
58556: PUSH
58557: LD_INT 1
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 2
58566: NEG
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 2
58577: NEG
58578: PUSH
58579: LD_INT 1
58581: NEG
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 2
58589: NEG
58590: PUSH
58591: LD_INT 2
58593: NEG
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58620: LD_ADDR_VAR 0 22
58624: PUSH
58625: LD_INT 0
58627: PUSH
58628: LD_INT 0
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: LD_INT 1
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 1
58658: PUSH
58659: LD_INT 1
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 0
58668: PUSH
58669: LD_INT 1
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 1
58678: NEG
58679: PUSH
58680: LD_INT 0
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 1
58689: NEG
58690: PUSH
58691: LD_INT 1
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: NEG
58702: PUSH
58703: LD_INT 2
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: LD_INT 2
58716: NEG
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 1
58724: PUSH
58725: LD_INT 1
58727: NEG
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 2
58735: PUSH
58736: LD_INT 0
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 2
58745: PUSH
58746: LD_INT 1
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 2
58755: PUSH
58756: LD_INT 2
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 1
58765: PUSH
58766: LD_INT 2
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 0
58775: PUSH
58776: LD_INT 2
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 1
58785: NEG
58786: PUSH
58787: LD_INT 1
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 2
58796: NEG
58797: PUSH
58798: LD_INT 0
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 2
58807: NEG
58808: PUSH
58809: LD_INT 1
58811: NEG
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 2
58819: NEG
58820: PUSH
58821: LD_INT 2
58823: NEG
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58850: LD_ADDR_VAR 0 23
58854: PUSH
58855: LD_INT 0
58857: PUSH
58858: LD_INT 0
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 0
58867: PUSH
58868: LD_INT 1
58870: NEG
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 1
58878: PUSH
58879: LD_INT 0
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 1
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: LD_INT 1
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 1
58908: NEG
58909: PUSH
58910: LD_INT 0
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 1
58919: NEG
58920: PUSH
58921: LD_INT 1
58923: NEG
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: LD_INT 2
58935: NEG
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 0
58943: PUSH
58944: LD_INT 2
58946: NEG
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 1
58954: PUSH
58955: LD_INT 1
58957: NEG
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 2
58965: PUSH
58966: LD_INT 0
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 2
58975: PUSH
58976: LD_INT 1
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 2
58985: PUSH
58986: LD_INT 2
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: LD_INT 2
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: LD_INT 2
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: LD_INT 1
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 2
59026: NEG
59027: PUSH
59028: LD_INT 0
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 2
59037: NEG
59038: PUSH
59039: LD_INT 1
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 2
59049: NEG
59050: PUSH
59051: LD_INT 2
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 2
59061: NEG
59062: PUSH
59063: LD_INT 3
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: LD_INT 3
59077: NEG
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 1
59085: PUSH
59086: LD_INT 2
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 2
59096: PUSH
59097: LD_INT 1
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
59130: LD_ADDR_VAR 0 24
59134: PUSH
59135: LD_INT 0
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 0
59147: PUSH
59148: LD_INT 1
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 1
59158: PUSH
59159: LD_INT 0
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 1
59168: PUSH
59169: LD_INT 1
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 0
59178: PUSH
59179: LD_INT 1
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 1
59188: NEG
59189: PUSH
59190: LD_INT 0
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 1
59199: NEG
59200: PUSH
59201: LD_INT 1
59203: NEG
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 1
59211: NEG
59212: PUSH
59213: LD_INT 2
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: LD_INT 2
59226: NEG
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 1
59234: PUSH
59235: LD_INT 1
59237: NEG
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 2
59245: PUSH
59246: LD_INT 0
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 2
59255: PUSH
59256: LD_INT 1
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 2
59265: PUSH
59266: LD_INT 2
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 1
59275: PUSH
59276: LD_INT 2
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 0
59285: PUSH
59286: LD_INT 2
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 1
59295: NEG
59296: PUSH
59297: LD_INT 1
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 2
59306: NEG
59307: PUSH
59308: LD_INT 0
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 2
59317: NEG
59318: PUSH
59319: LD_INT 1
59321: NEG
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 2
59329: NEG
59330: PUSH
59331: LD_INT 2
59333: NEG
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 1
59341: PUSH
59342: LD_INT 2
59344: NEG
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 2
59352: PUSH
59353: LD_INT 1
59355: NEG
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 3
59363: PUSH
59364: LD_INT 1
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 3
59373: PUSH
59374: LD_INT 2
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59406: LD_ADDR_VAR 0 25
59410: PUSH
59411: LD_INT 0
59413: PUSH
59414: LD_INT 0
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 0
59423: PUSH
59424: LD_INT 1
59426: NEG
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 1
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 1
59444: PUSH
59445: LD_INT 1
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 0
59454: PUSH
59455: LD_INT 1
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 1
59464: NEG
59465: PUSH
59466: LD_INT 0
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 1
59475: NEG
59476: PUSH
59477: LD_INT 1
59479: NEG
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 1
59487: NEG
59488: PUSH
59489: LD_INT 2
59491: NEG
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 0
59499: PUSH
59500: LD_INT 2
59502: NEG
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 1
59510: PUSH
59511: LD_INT 1
59513: NEG
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 2
59521: PUSH
59522: LD_INT 0
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 2
59531: PUSH
59532: LD_INT 1
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 2
59541: PUSH
59542: LD_INT 2
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 1
59551: PUSH
59552: LD_INT 2
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 0
59561: PUSH
59562: LD_INT 2
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 1
59571: NEG
59572: PUSH
59573: LD_INT 1
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 2
59582: NEG
59583: PUSH
59584: LD_INT 0
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 2
59593: NEG
59594: PUSH
59595: LD_INT 1
59597: NEG
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 2
59605: NEG
59606: PUSH
59607: LD_INT 2
59609: NEG
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 3
59617: PUSH
59618: LD_INT 1
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 3
59627: PUSH
59628: LD_INT 2
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 2
59637: PUSH
59638: LD_INT 3
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: LD_INT 3
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59680: LD_ADDR_VAR 0 26
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: LD_INT 0
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 0
59697: PUSH
59698: LD_INT 1
59700: NEG
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 1
59708: PUSH
59709: LD_INT 0
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 1
59718: PUSH
59719: LD_INT 1
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 0
59728: PUSH
59729: LD_INT 1
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 1
59738: NEG
59739: PUSH
59740: LD_INT 0
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 1
59749: NEG
59750: PUSH
59751: LD_INT 1
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 1
59761: NEG
59762: PUSH
59763: LD_INT 2
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 0
59773: PUSH
59774: LD_INT 2
59776: NEG
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 1
59784: PUSH
59785: LD_INT 1
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 2
59795: PUSH
59796: LD_INT 0
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 2
59805: PUSH
59806: LD_INT 1
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 2
59815: PUSH
59816: LD_INT 2
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 1
59825: PUSH
59826: LD_INT 2
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 0
59835: PUSH
59836: LD_INT 2
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 1
59845: NEG
59846: PUSH
59847: LD_INT 1
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 2
59856: NEG
59857: PUSH
59858: LD_INT 0
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 2
59867: NEG
59868: PUSH
59869: LD_INT 1
59871: NEG
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 2
59879: NEG
59880: PUSH
59881: LD_INT 2
59883: NEG
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 2
59891: PUSH
59892: LD_INT 3
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 1
59901: PUSH
59902: LD_INT 3
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 1
59911: NEG
59912: PUSH
59913: LD_INT 2
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 2
59922: NEG
59923: PUSH
59924: LD_INT 1
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59956: LD_ADDR_VAR 0 27
59960: PUSH
59961: LD_INT 0
59963: PUSH
59964: LD_INT 0
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: LD_INT 1
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 1
59984: PUSH
59985: LD_INT 0
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 1
59994: PUSH
59995: LD_INT 1
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 0
60004: PUSH
60005: LD_INT 1
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 1
60014: NEG
60015: PUSH
60016: LD_INT 0
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 1
60025: NEG
60026: PUSH
60027: LD_INT 1
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 1
60037: NEG
60038: PUSH
60039: LD_INT 2
60041: NEG
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 0
60049: PUSH
60050: LD_INT 2
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 1
60060: PUSH
60061: LD_INT 1
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 2
60071: PUSH
60072: LD_INT 0
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 2
60081: PUSH
60082: LD_INT 1
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 2
60091: PUSH
60092: LD_INT 2
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 1
60101: PUSH
60102: LD_INT 2
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 0
60111: PUSH
60112: LD_INT 2
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 1
60121: NEG
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 2
60132: NEG
60133: PUSH
60134: LD_INT 0
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 2
60143: NEG
60144: PUSH
60145: LD_INT 1
60147: NEG
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 2
60155: NEG
60156: PUSH
60157: LD_INT 2
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 1
60167: NEG
60168: PUSH
60169: LD_INT 2
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 2
60178: NEG
60179: PUSH
60180: LD_INT 1
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 3
60189: NEG
60190: PUSH
60191: LD_INT 1
60193: NEG
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 3
60201: NEG
60202: PUSH
60203: LD_INT 2
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60236: LD_ADDR_VAR 0 28
60240: PUSH
60241: LD_INT 0
60243: PUSH
60244: LD_INT 0
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 0
60253: PUSH
60254: LD_INT 1
60256: NEG
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 1
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 1
60274: PUSH
60275: LD_INT 1
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 0
60284: PUSH
60285: LD_INT 1
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 1
60294: NEG
60295: PUSH
60296: LD_INT 0
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 1
60305: NEG
60306: PUSH
60307: LD_INT 1
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 1
60317: NEG
60318: PUSH
60319: LD_INT 2
60321: NEG
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: LD_INT 2
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 1
60340: PUSH
60341: LD_INT 1
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 2
60351: PUSH
60352: LD_INT 0
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 2
60361: PUSH
60362: LD_INT 1
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 2
60371: PUSH
60372: LD_INT 2
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 1
60381: PUSH
60382: LD_INT 2
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 0
60391: PUSH
60392: LD_INT 2
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: LD_INT 1
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 2
60412: NEG
60413: PUSH
60414: LD_INT 0
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 2
60423: NEG
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 2
60435: NEG
60436: PUSH
60437: LD_INT 2
60439: NEG
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 2
60447: NEG
60448: PUSH
60449: LD_INT 3
60451: NEG
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 1
60459: NEG
60460: PUSH
60461: LD_INT 3
60463: NEG
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 3
60471: NEG
60472: PUSH
60473: LD_INT 1
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 3
60483: NEG
60484: PUSH
60485: LD_INT 2
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60518: LD_ADDR_VAR 0 29
60522: PUSH
60523: LD_INT 0
60525: PUSH
60526: LD_INT 0
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 0
60535: PUSH
60536: LD_INT 1
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 1
60546: PUSH
60547: LD_INT 0
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 1
60556: PUSH
60557: LD_INT 1
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 0
60566: PUSH
60567: LD_INT 1
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 1
60576: NEG
60577: PUSH
60578: LD_INT 0
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 1
60587: NEG
60588: PUSH
60589: LD_INT 1
60591: NEG
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 1
60599: NEG
60600: PUSH
60601: LD_INT 2
60603: NEG
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 0
60611: PUSH
60612: LD_INT 2
60614: NEG
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 1
60622: PUSH
60623: LD_INT 1
60625: NEG
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 2
60633: PUSH
60634: LD_INT 0
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 2
60643: PUSH
60644: LD_INT 1
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 1
60653: PUSH
60654: LD_INT 2
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 0
60663: PUSH
60664: LD_INT 2
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 1
60673: NEG
60674: PUSH
60675: LD_INT 1
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 2
60684: NEG
60685: PUSH
60686: LD_INT 1
60688: NEG
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 2
60696: NEG
60697: PUSH
60698: LD_INT 2
60700: NEG
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 2
60708: NEG
60709: PUSH
60710: LD_INT 3
60712: NEG
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 2
60720: PUSH
60721: LD_INT 1
60723: NEG
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 3
60731: PUSH
60732: LD_INT 1
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 1
60741: PUSH
60742: LD_INT 3
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 1
60751: NEG
60752: PUSH
60753: LD_INT 2
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 3
60762: NEG
60763: PUSH
60764: LD_INT 2
60766: NEG
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60797: LD_ADDR_VAR 0 30
60801: PUSH
60802: LD_INT 0
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 0
60814: PUSH
60815: LD_INT 1
60817: NEG
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 1
60825: PUSH
60826: LD_INT 0
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 1
60835: PUSH
60836: LD_INT 1
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 0
60845: PUSH
60846: LD_INT 1
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 1
60855: NEG
60856: PUSH
60857: LD_INT 0
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 1
60866: NEG
60867: PUSH
60868: LD_INT 1
60870: NEG
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 1
60878: NEG
60879: PUSH
60880: LD_INT 2
60882: NEG
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 0
60890: PUSH
60891: LD_INT 2
60893: NEG
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 1
60901: PUSH
60902: LD_INT 1
60904: NEG
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 2
60912: PUSH
60913: LD_INT 0
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 2
60922: PUSH
60923: LD_INT 1
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 2
60932: PUSH
60933: LD_INT 2
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 1
60942: PUSH
60943: LD_INT 2
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 1
60952: NEG
60953: PUSH
60954: LD_INT 1
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 2
60963: NEG
60964: PUSH
60965: LD_INT 0
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 2
60974: NEG
60975: PUSH
60976: LD_INT 1
60978: NEG
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 1
60986: NEG
60987: PUSH
60988: LD_INT 3
60990: NEG
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 1
60998: PUSH
60999: LD_INT 2
61001: NEG
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 3
61009: PUSH
61010: LD_INT 2
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 2
61019: PUSH
61020: LD_INT 3
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 2
61029: NEG
61030: PUSH
61031: LD_INT 1
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 3
61040: NEG
61041: PUSH
61042: LD_INT 1
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61075: LD_ADDR_VAR 0 31
61079: PUSH
61080: LD_INT 0
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 0
61092: PUSH
61093: LD_INT 1
61095: NEG
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 1
61103: PUSH
61104: LD_INT 0
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 1
61113: PUSH
61114: LD_INT 1
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 0
61123: PUSH
61124: LD_INT 1
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 1
61133: NEG
61134: PUSH
61135: LD_INT 0
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 1
61144: NEG
61145: PUSH
61146: LD_INT 1
61148: NEG
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 1
61156: NEG
61157: PUSH
61158: LD_INT 2
61160: NEG
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 1
61168: PUSH
61169: LD_INT 1
61171: NEG
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 2
61179: PUSH
61180: LD_INT 0
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 2
61189: PUSH
61190: LD_INT 1
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 2
61199: PUSH
61200: LD_INT 2
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 1
61209: PUSH
61210: LD_INT 2
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: LD_INT 2
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: NEG
61230: PUSH
61231: LD_INT 1
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 2
61240: NEG
61241: PUSH
61242: LD_INT 1
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 2
61252: NEG
61253: PUSH
61254: LD_INT 2
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 2
61264: NEG
61265: PUSH
61266: LD_INT 3
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 2
61276: PUSH
61277: LD_INT 1
61279: NEG
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 3
61287: PUSH
61288: LD_INT 1
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 1
61297: PUSH
61298: LD_INT 3
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 1
61307: NEG
61308: PUSH
61309: LD_INT 2
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 3
61318: NEG
61319: PUSH
61320: LD_INT 2
61322: NEG
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61353: LD_ADDR_VAR 0 32
61357: PUSH
61358: LD_INT 0
61360: PUSH
61361: LD_INT 0
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: LD_INT 1
61373: NEG
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 1
61381: PUSH
61382: LD_INT 0
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 1
61391: PUSH
61392: LD_INT 1
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 0
61401: PUSH
61402: LD_INT 1
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 1
61411: NEG
61412: PUSH
61413: LD_INT 0
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 1
61422: NEG
61423: PUSH
61424: LD_INT 1
61426: NEG
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 1
61434: NEG
61435: PUSH
61436: LD_INT 2
61438: NEG
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 0
61446: PUSH
61447: LD_INT 2
61449: NEG
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 1
61457: PUSH
61458: LD_INT 1
61460: NEG
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 2
61468: PUSH
61469: LD_INT 1
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 2
61478: PUSH
61479: LD_INT 2
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 1
61488: PUSH
61489: LD_INT 2
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 0
61498: PUSH
61499: LD_INT 2
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 1
61508: NEG
61509: PUSH
61510: LD_INT 1
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 2
61519: NEG
61520: PUSH
61521: LD_INT 0
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 2
61530: NEG
61531: PUSH
61532: LD_INT 1
61534: NEG
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 1
61542: NEG
61543: PUSH
61544: LD_INT 3
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 1
61554: PUSH
61555: LD_INT 2
61557: NEG
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 3
61565: PUSH
61566: LD_INT 2
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 2
61575: PUSH
61576: LD_INT 3
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 2
61585: NEG
61586: PUSH
61587: LD_INT 1
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 3
61596: NEG
61597: PUSH
61598: LD_INT 1
61600: NEG
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61631: LD_ADDR_VAR 0 33
61635: PUSH
61636: LD_INT 0
61638: PUSH
61639: LD_INT 0
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 0
61648: PUSH
61649: LD_INT 1
61651: NEG
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 1
61659: PUSH
61660: LD_INT 0
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 1
61669: PUSH
61670: LD_INT 1
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 0
61679: PUSH
61680: LD_INT 1
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 1
61689: NEG
61690: PUSH
61691: LD_INT 0
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 1
61700: NEG
61701: PUSH
61702: LD_INT 1
61704: NEG
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 1
61712: NEG
61713: PUSH
61714: LD_INT 2
61716: NEG
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 1
61724: PUSH
61725: LD_INT 1
61727: NEG
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 2
61735: PUSH
61736: LD_INT 0
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 2
61745: PUSH
61746: LD_INT 1
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 1
61755: PUSH
61756: LD_INT 2
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 0
61765: PUSH
61766: LD_INT 2
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 1
61775: NEG
61776: PUSH
61777: LD_INT 1
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 2
61786: NEG
61787: PUSH
61788: LD_INT 0
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 2
61797: NEG
61798: PUSH
61799: LD_INT 1
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 2
61809: NEG
61810: PUSH
61811: LD_INT 2
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 2
61821: NEG
61822: PUSH
61823: LD_INT 3
61825: NEG
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 2
61833: PUSH
61834: LD_INT 1
61836: NEG
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 3
61844: PUSH
61845: LD_INT 1
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 1
61854: PUSH
61855: LD_INT 3
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 1
61864: NEG
61865: PUSH
61866: LD_INT 2
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 3
61875: NEG
61876: PUSH
61877: LD_INT 2
61879: NEG
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61910: LD_ADDR_VAR 0 34
61914: PUSH
61915: LD_INT 0
61917: PUSH
61918: LD_INT 0
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 0
61927: PUSH
61928: LD_INT 1
61930: NEG
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 1
61938: PUSH
61939: LD_INT 0
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 1
61948: PUSH
61949: LD_INT 1
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 0
61958: PUSH
61959: LD_INT 1
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 1
61968: NEG
61969: PUSH
61970: LD_INT 0
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 1
61979: NEG
61980: PUSH
61981: LD_INT 1
61983: NEG
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: LD_INT 2
61995: NEG
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 0
62003: PUSH
62004: LD_INT 2
62006: NEG
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 1
62014: PUSH
62015: LD_INT 1
62017: NEG
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 2
62025: PUSH
62026: LD_INT 1
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 2
62035: PUSH
62036: LD_INT 2
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 1
62045: PUSH
62046: LD_INT 2
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 1
62055: NEG
62056: PUSH
62057: LD_INT 1
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 2
62066: NEG
62067: PUSH
62068: LD_INT 0
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 2
62077: NEG
62078: PUSH
62079: LD_INT 1
62081: NEG
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 2
62089: NEG
62090: PUSH
62091: LD_INT 2
62093: NEG
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 1
62101: NEG
62102: PUSH
62103: LD_INT 3
62105: NEG
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 1
62113: PUSH
62114: LD_INT 2
62116: NEG
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 3
62124: PUSH
62125: LD_INT 2
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 2
62134: PUSH
62135: LD_INT 3
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 2
62144: NEG
62145: PUSH
62146: LD_INT 1
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 3
62155: NEG
62156: PUSH
62157: LD_INT 1
62159: NEG
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62190: LD_ADDR_VAR 0 35
62194: PUSH
62195: LD_INT 0
62197: PUSH
62198: LD_INT 0
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 0
62207: PUSH
62208: LD_INT 1
62210: NEG
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 1
62218: PUSH
62219: LD_INT 0
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 1
62228: PUSH
62229: LD_INT 1
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 0
62238: PUSH
62239: LD_INT 1
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 1
62248: NEG
62249: PUSH
62250: LD_INT 0
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 1
62259: NEG
62260: PUSH
62261: LD_INT 1
62263: NEG
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 2
62271: PUSH
62272: LD_INT 1
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 2
62281: NEG
62282: PUSH
62283: LD_INT 1
62285: NEG
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62302: LD_ADDR_VAR 0 36
62306: PUSH
62307: LD_INT 0
62309: PUSH
62310: LD_INT 0
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 0
62319: PUSH
62320: LD_INT 1
62322: NEG
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 1
62330: PUSH
62331: LD_INT 0
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 1
62340: PUSH
62341: LD_INT 1
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 0
62350: PUSH
62351: LD_INT 1
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 1
62360: NEG
62361: PUSH
62362: LD_INT 0
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 1
62371: NEG
62372: PUSH
62373: LD_INT 1
62375: NEG
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 1
62383: NEG
62384: PUSH
62385: LD_INT 2
62387: NEG
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 1
62395: PUSH
62396: LD_INT 2
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62414: LD_ADDR_VAR 0 37
62418: PUSH
62419: LD_INT 0
62421: PUSH
62422: LD_INT 0
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 0
62431: PUSH
62432: LD_INT 1
62434: NEG
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 1
62442: PUSH
62443: LD_INT 0
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 1
62452: PUSH
62453: LD_INT 1
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 0
62462: PUSH
62463: LD_INT 1
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 1
62472: NEG
62473: PUSH
62474: LD_INT 0
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 1
62483: NEG
62484: PUSH
62485: LD_INT 1
62487: NEG
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 1
62495: PUSH
62496: LD_INT 1
62498: NEG
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 1
62506: NEG
62507: PUSH
62508: LD_INT 1
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62526: LD_ADDR_VAR 0 38
62530: PUSH
62531: LD_INT 0
62533: PUSH
62534: LD_INT 0
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 0
62543: PUSH
62544: LD_INT 1
62546: NEG
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 1
62554: PUSH
62555: LD_INT 0
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 1
62564: PUSH
62565: LD_INT 1
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: LD_INT 1
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 1
62584: NEG
62585: PUSH
62586: LD_INT 0
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 1
62595: NEG
62596: PUSH
62597: LD_INT 1
62599: NEG
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 2
62607: PUSH
62608: LD_INT 1
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 2
62617: NEG
62618: PUSH
62619: LD_INT 1
62621: NEG
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62638: LD_ADDR_VAR 0 39
62642: PUSH
62643: LD_INT 0
62645: PUSH
62646: LD_INT 0
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 0
62655: PUSH
62656: LD_INT 1
62658: NEG
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 1
62666: PUSH
62667: LD_INT 0
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 1
62676: PUSH
62677: LD_INT 1
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 0
62686: PUSH
62687: LD_INT 1
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 1
62696: NEG
62697: PUSH
62698: LD_INT 0
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 1
62707: NEG
62708: PUSH
62709: LD_INT 1
62711: NEG
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 1
62719: NEG
62720: PUSH
62721: LD_INT 2
62723: NEG
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 1
62731: PUSH
62732: LD_INT 2
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62750: LD_ADDR_VAR 0 40
62754: PUSH
62755: LD_INT 0
62757: PUSH
62758: LD_INT 0
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 0
62767: PUSH
62768: LD_INT 1
62770: NEG
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 1
62778: PUSH
62779: LD_INT 0
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 1
62788: PUSH
62789: LD_INT 1
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 0
62798: PUSH
62799: LD_INT 1
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 1
62808: NEG
62809: PUSH
62810: LD_INT 0
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 1
62819: NEG
62820: PUSH
62821: LD_INT 1
62823: NEG
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 1
62831: PUSH
62832: LD_INT 1
62834: NEG
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 1
62842: NEG
62843: PUSH
62844: LD_INT 1
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62862: LD_ADDR_VAR 0 41
62866: PUSH
62867: LD_INT 0
62869: PUSH
62870: LD_INT 0
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 0
62879: PUSH
62880: LD_INT 1
62882: NEG
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 1
62890: PUSH
62891: LD_INT 0
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 1
62900: PUSH
62901: LD_INT 1
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 0
62910: PUSH
62911: LD_INT 1
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 1
62920: NEG
62921: PUSH
62922: LD_INT 0
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 1
62931: NEG
62932: PUSH
62933: LD_INT 1
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 1
62943: NEG
62944: PUSH
62945: LD_INT 2
62947: NEG
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 1
62955: PUSH
62956: LD_INT 1
62958: NEG
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 2
62966: PUSH
62967: LD_INT 0
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 2
62976: PUSH
62977: LD_INT 1
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 2
62986: PUSH
62987: LD_INT 2
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 1
62996: PUSH
62997: LD_INT 2
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 1
63006: NEG
63007: PUSH
63008: LD_INT 1
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 2
63017: NEG
63018: PUSH
63019: LD_INT 0
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 2
63028: NEG
63029: PUSH
63030: LD_INT 1
63032: NEG
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 2
63040: NEG
63041: PUSH
63042: LD_INT 2
63044: NEG
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 2
63052: NEG
63053: PUSH
63054: LD_INT 3
63056: NEG
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 2
63064: PUSH
63065: LD_INT 1
63067: NEG
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 3
63075: PUSH
63076: LD_INT 0
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 3
63085: PUSH
63086: LD_INT 1
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 3
63095: PUSH
63096: LD_INT 2
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 3
63105: PUSH
63106: LD_INT 3
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 2
63115: PUSH
63116: LD_INT 3
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 2
63125: NEG
63126: PUSH
63127: LD_INT 1
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 3
63136: NEG
63137: PUSH
63138: LD_INT 0
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 3
63147: NEG
63148: PUSH
63149: LD_INT 1
63151: NEG
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 3
63159: NEG
63160: PUSH
63161: LD_INT 2
63163: NEG
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 3
63171: NEG
63172: PUSH
63173: LD_INT 3
63175: NEG
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63212: LD_ADDR_VAR 0 42
63216: PUSH
63217: LD_INT 0
63219: PUSH
63220: LD_INT 0
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 0
63229: PUSH
63230: LD_INT 1
63232: NEG
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 1
63240: PUSH
63241: LD_INT 0
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 1
63250: PUSH
63251: LD_INT 1
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 0
63260: PUSH
63261: LD_INT 1
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 1
63270: NEG
63271: PUSH
63272: LD_INT 0
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 1
63281: NEG
63282: PUSH
63283: LD_INT 1
63285: NEG
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 1
63293: NEG
63294: PUSH
63295: LD_INT 2
63297: NEG
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 0
63305: PUSH
63306: LD_INT 2
63308: NEG
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 1
63316: PUSH
63317: LD_INT 1
63319: NEG
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 2
63327: PUSH
63328: LD_INT 1
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 2
63337: PUSH
63338: LD_INT 2
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 1
63347: PUSH
63348: LD_INT 2
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 0
63357: PUSH
63358: LD_INT 2
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 1
63367: NEG
63368: PUSH
63369: LD_INT 1
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 2
63378: NEG
63379: PUSH
63380: LD_INT 1
63382: NEG
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 2
63390: NEG
63391: PUSH
63392: LD_INT 2
63394: NEG
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 2
63402: NEG
63403: PUSH
63404: LD_INT 3
63406: NEG
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 1
63414: NEG
63415: PUSH
63416: LD_INT 3
63418: NEG
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: LD_INT 3
63429: NEG
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: LD_INT 2
63440: NEG
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 3
63448: PUSH
63449: LD_INT 2
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 3
63458: PUSH
63459: LD_INT 3
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 2
63468: PUSH
63469: LD_INT 3
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 1
63478: PUSH
63479: LD_INT 3
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 0
63488: PUSH
63489: LD_INT 3
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 1
63498: NEG
63499: PUSH
63500: LD_INT 2
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 3
63509: NEG
63510: PUSH
63511: LD_INT 2
63513: NEG
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 3
63521: NEG
63522: PUSH
63523: LD_INT 3
63525: NEG
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63562: LD_ADDR_VAR 0 43
63566: PUSH
63567: LD_INT 0
63569: PUSH
63570: LD_INT 0
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 0
63579: PUSH
63580: LD_INT 1
63582: NEG
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 1
63590: PUSH
63591: LD_INT 0
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 1
63600: PUSH
63601: LD_INT 1
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 0
63610: PUSH
63611: LD_INT 1
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 1
63620: NEG
63621: PUSH
63622: LD_INT 0
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 1
63631: NEG
63632: PUSH
63633: LD_INT 1
63635: NEG
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 1
63643: NEG
63644: PUSH
63645: LD_INT 2
63647: NEG
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 0
63655: PUSH
63656: LD_INT 2
63658: NEG
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 1
63666: PUSH
63667: LD_INT 1
63669: NEG
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 2
63677: PUSH
63678: LD_INT 0
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 2
63687: PUSH
63688: LD_INT 1
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 1
63697: PUSH
63698: LD_INT 2
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 0
63707: PUSH
63708: LD_INT 2
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 1
63717: NEG
63718: PUSH
63719: LD_INT 1
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 2
63728: NEG
63729: PUSH
63730: LD_INT 0
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 2
63739: NEG
63740: PUSH
63741: LD_INT 1
63743: NEG
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 1
63751: NEG
63752: PUSH
63753: LD_INT 3
63755: NEG
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 0
63763: PUSH
63764: LD_INT 3
63766: NEG
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 1
63774: PUSH
63775: LD_INT 2
63777: NEG
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 2
63785: PUSH
63786: LD_INT 1
63788: NEG
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 3
63796: PUSH
63797: LD_INT 0
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 3
63806: PUSH
63807: LD_INT 1
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 1
63816: PUSH
63817: LD_INT 3
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 0
63826: PUSH
63827: LD_INT 3
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 1
63836: NEG
63837: PUSH
63838: LD_INT 2
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 2
63847: NEG
63848: PUSH
63849: LD_INT 1
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 3
63858: NEG
63859: PUSH
63860: LD_INT 0
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 3
63869: NEG
63870: PUSH
63871: LD_INT 1
63873: NEG
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63910: LD_ADDR_VAR 0 44
63914: PUSH
63915: LD_INT 0
63917: PUSH
63918: LD_INT 0
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 0
63927: PUSH
63928: LD_INT 1
63930: NEG
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 1
63938: PUSH
63939: LD_INT 0
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 1
63948: PUSH
63949: LD_INT 1
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 0
63958: PUSH
63959: LD_INT 1
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 1
63968: NEG
63969: PUSH
63970: LD_INT 0
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 1
63979: NEG
63980: PUSH
63981: LD_INT 1
63983: NEG
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 1
63991: NEG
63992: PUSH
63993: LD_INT 2
63995: NEG
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 1
64003: PUSH
64004: LD_INT 1
64006: NEG
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 2
64014: PUSH
64015: LD_INT 0
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 2
64024: PUSH
64025: LD_INT 1
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 2
64034: PUSH
64035: LD_INT 2
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 1
64044: PUSH
64045: LD_INT 2
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 1
64054: NEG
64055: PUSH
64056: LD_INT 1
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 2
64065: NEG
64066: PUSH
64067: LD_INT 0
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 2
64076: NEG
64077: PUSH
64078: LD_INT 1
64080: NEG
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 2
64088: NEG
64089: PUSH
64090: LD_INT 2
64092: NEG
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 2
64100: NEG
64101: PUSH
64102: LD_INT 3
64104: NEG
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 2
64112: PUSH
64113: LD_INT 1
64115: NEG
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 3
64123: PUSH
64124: LD_INT 0
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 3
64133: PUSH
64134: LD_INT 1
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 3
64143: PUSH
64144: LD_INT 2
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_INT 3
64153: PUSH
64154: LD_INT 3
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 2
64163: PUSH
64164: LD_INT 3
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 2
64173: NEG
64174: PUSH
64175: LD_INT 1
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 3
64184: NEG
64185: PUSH
64186: LD_INT 0
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: LD_INT 3
64195: NEG
64196: PUSH
64197: LD_INT 1
64199: NEG
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 3
64207: NEG
64208: PUSH
64209: LD_INT 2
64211: NEG
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 3
64219: NEG
64220: PUSH
64221: LD_INT 3
64223: NEG
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64260: LD_ADDR_VAR 0 45
64264: PUSH
64265: LD_INT 0
64267: PUSH
64268: LD_INT 0
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 0
64277: PUSH
64278: LD_INT 1
64280: NEG
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 1
64288: PUSH
64289: LD_INT 0
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: LD_INT 1
64298: PUSH
64299: LD_INT 1
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_INT 0
64308: PUSH
64309: LD_INT 1
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 1
64318: NEG
64319: PUSH
64320: LD_INT 0
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 1
64329: NEG
64330: PUSH
64331: LD_INT 1
64333: NEG
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 1
64341: NEG
64342: PUSH
64343: LD_INT 2
64345: NEG
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 0
64353: PUSH
64354: LD_INT 2
64356: NEG
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 1
64364: PUSH
64365: LD_INT 1
64367: NEG
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 2
64375: PUSH
64376: LD_INT 1
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 2
64385: PUSH
64386: LD_INT 2
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 1
64395: PUSH
64396: LD_INT 2
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: LD_INT 2
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 1
64415: NEG
64416: PUSH
64417: LD_INT 1
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 2
64426: NEG
64427: PUSH
64428: LD_INT 1
64430: NEG
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 2
64438: NEG
64439: PUSH
64440: LD_INT 2
64442: NEG
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 2
64450: NEG
64451: PUSH
64452: LD_INT 3
64454: NEG
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 1
64462: NEG
64463: PUSH
64464: LD_INT 3
64466: NEG
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 0
64474: PUSH
64475: LD_INT 3
64477: NEG
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 1
64485: PUSH
64486: LD_INT 2
64488: NEG
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 3
64496: PUSH
64497: LD_INT 2
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 3
64506: PUSH
64507: LD_INT 3
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 2
64516: PUSH
64517: LD_INT 3
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 1
64526: PUSH
64527: LD_INT 3
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 0
64536: PUSH
64537: LD_INT 3
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 1
64546: NEG
64547: PUSH
64548: LD_INT 2
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 3
64557: NEG
64558: PUSH
64559: LD_INT 2
64561: NEG
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 3
64569: NEG
64570: PUSH
64571: LD_INT 3
64573: NEG
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64610: LD_ADDR_VAR 0 46
64614: PUSH
64615: LD_INT 0
64617: PUSH
64618: LD_INT 0
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 0
64627: PUSH
64628: LD_INT 1
64630: NEG
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 1
64638: PUSH
64639: LD_INT 0
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 1
64648: PUSH
64649: LD_INT 1
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 0
64658: PUSH
64659: LD_INT 1
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 1
64668: NEG
64669: PUSH
64670: LD_INT 0
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 1
64679: NEG
64680: PUSH
64681: LD_INT 1
64683: NEG
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 1
64691: NEG
64692: PUSH
64693: LD_INT 2
64695: NEG
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 0
64703: PUSH
64704: LD_INT 2
64706: NEG
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 1
64714: PUSH
64715: LD_INT 1
64717: NEG
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 2
64725: PUSH
64726: LD_INT 0
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 2
64735: PUSH
64736: LD_INT 1
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 1
64745: PUSH
64746: LD_INT 2
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 0
64755: PUSH
64756: LD_INT 2
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 1
64765: NEG
64766: PUSH
64767: LD_INT 1
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 2
64776: NEG
64777: PUSH
64778: LD_INT 0
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 2
64787: NEG
64788: PUSH
64789: LD_INT 1
64791: NEG
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 1
64799: NEG
64800: PUSH
64801: LD_INT 3
64803: NEG
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 0
64811: PUSH
64812: LD_INT 3
64814: NEG
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 1
64822: PUSH
64823: LD_INT 2
64825: NEG
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 2
64833: PUSH
64834: LD_INT 1
64836: NEG
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 3
64844: PUSH
64845: LD_INT 0
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 3
64854: PUSH
64855: LD_INT 1
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 1
64864: PUSH
64865: LD_INT 3
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 0
64874: PUSH
64875: LD_INT 3
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 1
64884: NEG
64885: PUSH
64886: LD_INT 2
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 2
64895: NEG
64896: PUSH
64897: LD_INT 1
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 3
64906: NEG
64907: PUSH
64908: LD_INT 0
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 3
64917: NEG
64918: PUSH
64919: LD_INT 1
64921: NEG
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64958: LD_ADDR_VAR 0 47
64962: PUSH
64963: LD_INT 0
64965: PUSH
64966: LD_INT 0
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 0
64975: PUSH
64976: LD_INT 1
64978: NEG
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 1
64986: PUSH
64987: LD_INT 0
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 1
64996: PUSH
64997: LD_INT 1
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 0
65006: PUSH
65007: LD_INT 1
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 1
65016: NEG
65017: PUSH
65018: LD_INT 0
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 1
65027: NEG
65028: PUSH
65029: LD_INT 1
65031: NEG
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 1
65039: NEG
65040: PUSH
65041: LD_INT 2
65043: NEG
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 0
65051: PUSH
65052: LD_INT 2
65054: NEG
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 1
65062: PUSH
65063: LD_INT 1
65065: NEG
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 2
65073: NEG
65074: PUSH
65075: LD_INT 1
65077: NEG
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 2
65085: NEG
65086: PUSH
65087: LD_INT 2
65089: NEG
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65109: LD_ADDR_VAR 0 48
65113: PUSH
65114: LD_INT 0
65116: PUSH
65117: LD_INT 0
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: LD_INT 0
65126: PUSH
65127: LD_INT 1
65129: NEG
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 1
65137: PUSH
65138: LD_INT 0
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 1
65147: PUSH
65148: LD_INT 1
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 0
65157: PUSH
65158: LD_INT 1
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 1
65167: NEG
65168: PUSH
65169: LD_INT 0
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 1
65178: NEG
65179: PUSH
65180: LD_INT 1
65182: NEG
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 1
65190: NEG
65191: PUSH
65192: LD_INT 2
65194: NEG
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 0
65202: PUSH
65203: LD_INT 2
65205: NEG
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 1
65213: PUSH
65214: LD_INT 1
65216: NEG
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 2
65224: PUSH
65225: LD_INT 0
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 2
65234: PUSH
65235: LD_INT 1
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65256: LD_ADDR_VAR 0 49
65260: PUSH
65261: LD_INT 0
65263: PUSH
65264: LD_INT 0
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 0
65273: PUSH
65274: LD_INT 1
65276: NEG
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_INT 1
65284: PUSH
65285: LD_INT 0
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: LD_INT 1
65294: PUSH
65295: LD_INT 1
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 0
65304: PUSH
65305: LD_INT 1
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 1
65314: NEG
65315: PUSH
65316: LD_INT 0
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 1
65325: NEG
65326: PUSH
65327: LD_INT 1
65329: NEG
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 1
65337: PUSH
65338: LD_INT 1
65340: NEG
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 2
65348: PUSH
65349: LD_INT 0
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 2
65358: PUSH
65359: LD_INT 1
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 2
65368: PUSH
65369: LD_INT 2
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 1
65378: PUSH
65379: LD_INT 2
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: LIST
65390: LIST
65391: LIST
65392: LIST
65393: LIST
65394: LIST
65395: LIST
65396: LIST
65397: LIST
65398: LIST
65399: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65400: LD_ADDR_VAR 0 50
65404: PUSH
65405: LD_INT 0
65407: PUSH
65408: LD_INT 0
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 0
65417: PUSH
65418: LD_INT 1
65420: NEG
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 1
65428: PUSH
65429: LD_INT 0
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 1
65438: PUSH
65439: LD_INT 1
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 0
65448: PUSH
65449: LD_INT 1
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 1
65458: NEG
65459: PUSH
65460: LD_INT 0
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 1
65469: NEG
65470: PUSH
65471: LD_INT 1
65473: NEG
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 2
65481: PUSH
65482: LD_INT 1
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 2
65491: PUSH
65492: LD_INT 2
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 1
65501: PUSH
65502: LD_INT 2
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 0
65511: PUSH
65512: LD_INT 2
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 1
65521: NEG
65522: PUSH
65523: LD_INT 1
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65544: LD_ADDR_VAR 0 51
65548: PUSH
65549: LD_INT 0
65551: PUSH
65552: LD_INT 0
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 0
65561: PUSH
65562: LD_INT 1
65564: NEG
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 1
65572: PUSH
65573: LD_INT 0
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 1
65582: PUSH
65583: LD_INT 1
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 0
65592: PUSH
65593: LD_INT 1
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 1
65602: NEG
65603: PUSH
65604: LD_INT 0
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 1
65613: NEG
65614: PUSH
65615: LD_INT 1
65617: NEG
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 1
65625: PUSH
65626: LD_INT 2
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 0
65635: PUSH
65636: LD_INT 2
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 1
65645: NEG
65646: PUSH
65647: LD_INT 1
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 2
65656: NEG
65657: PUSH
65658: LD_INT 0
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 2
65667: NEG
65668: PUSH
65669: LD_INT 1
65671: NEG
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65691: LD_ADDR_VAR 0 52
65695: PUSH
65696: LD_INT 0
65698: PUSH
65699: LD_INT 0
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 0
65708: PUSH
65709: LD_INT 1
65711: NEG
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 1
65719: PUSH
65720: LD_INT 0
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 1
65729: PUSH
65730: LD_INT 1
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 0
65739: PUSH
65740: LD_INT 1
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 1
65749: NEG
65750: PUSH
65751: LD_INT 0
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 1
65760: NEG
65761: PUSH
65762: LD_INT 1
65764: NEG
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 1
65772: NEG
65773: PUSH
65774: LD_INT 2
65776: NEG
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 1
65784: NEG
65785: PUSH
65786: LD_INT 1
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 2
65795: NEG
65796: PUSH
65797: LD_INT 0
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: LD_INT 2
65806: NEG
65807: PUSH
65808: LD_INT 1
65810: NEG
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 2
65818: NEG
65819: PUSH
65820: LD_INT 2
65822: NEG
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65842: LD_ADDR_VAR 0 53
65846: PUSH
65847: LD_INT 0
65849: PUSH
65850: LD_INT 0
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 0
65859: PUSH
65860: LD_INT 1
65862: NEG
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 1
65870: PUSH
65871: LD_INT 0
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 1
65880: PUSH
65881: LD_INT 1
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 0
65890: PUSH
65891: LD_INT 1
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 1
65900: NEG
65901: PUSH
65902: LD_INT 0
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 1
65911: NEG
65912: PUSH
65913: LD_INT 1
65915: NEG
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 1
65923: NEG
65924: PUSH
65925: LD_INT 2
65927: NEG
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 0
65935: PUSH
65936: LD_INT 2
65938: NEG
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 1
65946: PUSH
65947: LD_INT 1
65949: NEG
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 2
65957: PUSH
65958: LD_INT 0
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: PUSH
65965: LD_INT 2
65967: PUSH
65968: LD_INT 1
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 2
65977: PUSH
65978: LD_INT 2
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 1
65987: PUSH
65988: LD_INT 2
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 0
65997: PUSH
65998: LD_INT 2
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 1
66007: NEG
66008: PUSH
66009: LD_INT 1
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: LD_INT 2
66018: NEG
66019: PUSH
66020: LD_INT 0
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 2
66029: NEG
66030: PUSH
66031: LD_INT 1
66033: NEG
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 2
66041: NEG
66042: PUSH
66043: LD_INT 2
66045: NEG
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66072: LD_ADDR_VAR 0 54
66076: PUSH
66077: LD_INT 0
66079: PUSH
66080: LD_INT 0
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 0
66089: PUSH
66090: LD_INT 1
66092: NEG
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 1
66100: PUSH
66101: LD_INT 0
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 1
66110: PUSH
66111: LD_INT 1
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 0
66120: PUSH
66121: LD_INT 1
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 1
66130: NEG
66131: PUSH
66132: LD_INT 0
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 1
66141: NEG
66142: PUSH
66143: LD_INT 1
66145: NEG
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 1
66153: NEG
66154: PUSH
66155: LD_INT 2
66157: NEG
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 0
66165: PUSH
66166: LD_INT 2
66168: NEG
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 1
66176: PUSH
66177: LD_INT 1
66179: NEG
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 2
66187: PUSH
66188: LD_INT 0
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 2
66197: PUSH
66198: LD_INT 1
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 2
66207: PUSH
66208: LD_INT 2
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 1
66217: PUSH
66218: LD_INT 2
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 0
66227: PUSH
66228: LD_INT 2
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 1
66237: NEG
66238: PUSH
66239: LD_INT 1
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 2
66248: NEG
66249: PUSH
66250: LD_INT 0
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 2
66259: NEG
66260: PUSH
66261: LD_INT 1
66263: NEG
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 2
66271: NEG
66272: PUSH
66273: LD_INT 2
66275: NEG
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: LIST
66288: LIST
66289: LIST
66290: LIST
66291: LIST
66292: LIST
66293: LIST
66294: LIST
66295: LIST
66296: LIST
66297: LIST
66298: LIST
66299: LIST
66300: LIST
66301: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66302: LD_ADDR_VAR 0 55
66306: PUSH
66307: LD_INT 0
66309: PUSH
66310: LD_INT 0
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 0
66319: PUSH
66320: LD_INT 1
66322: NEG
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 1
66330: PUSH
66331: LD_INT 0
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: LD_INT 1
66340: PUSH
66341: LD_INT 1
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 0
66350: PUSH
66351: LD_INT 1
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 1
66360: NEG
66361: PUSH
66362: LD_INT 0
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: PUSH
66369: LD_INT 1
66371: NEG
66372: PUSH
66373: LD_INT 1
66375: NEG
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: PUSH
66381: LD_INT 1
66383: NEG
66384: PUSH
66385: LD_INT 2
66387: NEG
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 0
66395: PUSH
66396: LD_INT 2
66398: NEG
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 1
66406: PUSH
66407: LD_INT 1
66409: NEG
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: LD_INT 2
66417: PUSH
66418: LD_INT 0
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 2
66427: PUSH
66428: LD_INT 1
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 2
66437: PUSH
66438: LD_INT 2
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 1
66447: PUSH
66448: LD_INT 2
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 0
66457: PUSH
66458: LD_INT 2
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 1
66467: NEG
66468: PUSH
66469: LD_INT 1
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 2
66478: NEG
66479: PUSH
66480: LD_INT 0
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 2
66489: NEG
66490: PUSH
66491: LD_INT 1
66493: NEG
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 2
66501: NEG
66502: PUSH
66503: LD_INT 2
66505: NEG
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: LIST
66531: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66532: LD_ADDR_VAR 0 56
66536: PUSH
66537: LD_INT 0
66539: PUSH
66540: LD_INT 0
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 0
66549: PUSH
66550: LD_INT 1
66552: NEG
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 1
66560: PUSH
66561: LD_INT 0
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 1
66570: PUSH
66571: LD_INT 1
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 0
66580: PUSH
66581: LD_INT 1
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 1
66590: NEG
66591: PUSH
66592: LD_INT 0
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 1
66601: NEG
66602: PUSH
66603: LD_INT 1
66605: NEG
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 1
66613: NEG
66614: PUSH
66615: LD_INT 2
66617: NEG
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 0
66625: PUSH
66626: LD_INT 2
66628: NEG
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 1
66636: PUSH
66637: LD_INT 1
66639: NEG
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 2
66647: PUSH
66648: LD_INT 0
66650: PUSH
66651: EMPTY
66652: LIST
66653: LIST
66654: PUSH
66655: LD_INT 2
66657: PUSH
66658: LD_INT 1
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 2
66667: PUSH
66668: LD_INT 2
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: LD_INT 1
66677: PUSH
66678: LD_INT 2
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: LD_INT 0
66687: PUSH
66688: LD_INT 2
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 1
66697: NEG
66698: PUSH
66699: LD_INT 1
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 2
66708: NEG
66709: PUSH
66710: LD_INT 0
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: PUSH
66717: LD_INT 2
66719: NEG
66720: PUSH
66721: LD_INT 1
66723: NEG
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 2
66731: NEG
66732: PUSH
66733: LD_INT 2
66735: NEG
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66762: LD_ADDR_VAR 0 57
66766: PUSH
66767: LD_INT 0
66769: PUSH
66770: LD_INT 0
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 0
66779: PUSH
66780: LD_INT 1
66782: NEG
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 1
66790: PUSH
66791: LD_INT 0
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 1
66800: PUSH
66801: LD_INT 1
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 0
66810: PUSH
66811: LD_INT 1
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 1
66820: NEG
66821: PUSH
66822: LD_INT 0
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 1
66831: NEG
66832: PUSH
66833: LD_INT 1
66835: NEG
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 1
66843: NEG
66844: PUSH
66845: LD_INT 2
66847: NEG
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 0
66855: PUSH
66856: LD_INT 2
66858: NEG
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 1
66866: PUSH
66867: LD_INT 1
66869: NEG
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: PUSH
66875: LD_INT 2
66877: PUSH
66878: LD_INT 0
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: LD_INT 2
66887: PUSH
66888: LD_INT 1
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 2
66897: PUSH
66898: LD_INT 2
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: LD_INT 1
66907: PUSH
66908: LD_INT 2
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 0
66917: PUSH
66918: LD_INT 2
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: LD_INT 1
66927: NEG
66928: PUSH
66929: LD_INT 1
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 2
66938: NEG
66939: PUSH
66940: LD_INT 0
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 2
66949: NEG
66950: PUSH
66951: LD_INT 1
66953: NEG
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 2
66961: NEG
66962: PUSH
66963: LD_INT 2
66965: NEG
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: LIST
66975: LIST
66976: LIST
66977: LIST
66978: LIST
66979: LIST
66980: LIST
66981: LIST
66982: LIST
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66992: LD_ADDR_VAR 0 58
66996: PUSH
66997: LD_INT 0
66999: PUSH
67000: LD_INT 0
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 0
67009: PUSH
67010: LD_INT 1
67012: NEG
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 1
67020: PUSH
67021: LD_INT 0
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 1
67030: PUSH
67031: LD_INT 1
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 0
67040: PUSH
67041: LD_INT 1
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 1
67050: NEG
67051: PUSH
67052: LD_INT 0
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 1
67061: NEG
67062: PUSH
67063: LD_INT 1
67065: NEG
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: LD_INT 1
67073: NEG
67074: PUSH
67075: LD_INT 2
67077: NEG
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 0
67085: PUSH
67086: LD_INT 2
67088: NEG
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 1
67096: PUSH
67097: LD_INT 1
67099: NEG
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 2
67107: PUSH
67108: LD_INT 0
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 2
67117: PUSH
67118: LD_INT 1
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 2
67127: PUSH
67128: LD_INT 2
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 1
67137: PUSH
67138: LD_INT 2
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 0
67147: PUSH
67148: LD_INT 2
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: LD_INT 1
67157: NEG
67158: PUSH
67159: LD_INT 1
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 2
67168: NEG
67169: PUSH
67170: LD_INT 0
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: LD_INT 2
67179: NEG
67180: PUSH
67181: LD_INT 1
67183: NEG
67184: PUSH
67185: EMPTY
67186: LIST
67187: LIST
67188: PUSH
67189: LD_INT 2
67191: NEG
67192: PUSH
67193: LD_INT 2
67195: NEG
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: LIST
67218: LIST
67219: LIST
67220: LIST
67221: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67222: LD_ADDR_VAR 0 59
67226: PUSH
67227: LD_INT 0
67229: PUSH
67230: LD_INT 0
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 0
67239: PUSH
67240: LD_INT 1
67242: NEG
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 1
67250: PUSH
67251: LD_INT 0
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 1
67260: PUSH
67261: LD_INT 1
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 0
67270: PUSH
67271: LD_INT 1
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: LD_INT 1
67280: NEG
67281: PUSH
67282: LD_INT 0
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 1
67291: NEG
67292: PUSH
67293: LD_INT 1
67295: NEG
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67310: LD_ADDR_VAR 0 60
67314: PUSH
67315: LD_INT 0
67317: PUSH
67318: LD_INT 0
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 0
67327: PUSH
67328: LD_INT 1
67330: NEG
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 1
67338: PUSH
67339: LD_INT 0
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: LD_INT 1
67348: PUSH
67349: LD_INT 1
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 0
67358: PUSH
67359: LD_INT 1
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 1
67368: NEG
67369: PUSH
67370: LD_INT 0
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 1
67379: NEG
67380: PUSH
67381: LD_INT 1
67383: NEG
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67398: LD_ADDR_VAR 0 61
67402: PUSH
67403: LD_INT 0
67405: PUSH
67406: LD_INT 0
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: LD_INT 0
67415: PUSH
67416: LD_INT 1
67418: NEG
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 1
67426: PUSH
67427: LD_INT 0
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 1
67436: PUSH
67437: LD_INT 1
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 0
67446: PUSH
67447: LD_INT 1
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: PUSH
67454: LD_INT 1
67456: NEG
67457: PUSH
67458: LD_INT 0
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 1
67467: NEG
67468: PUSH
67469: LD_INT 1
67471: NEG
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67486: LD_ADDR_VAR 0 62
67490: PUSH
67491: LD_INT 0
67493: PUSH
67494: LD_INT 0
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 0
67503: PUSH
67504: LD_INT 1
67506: NEG
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PUSH
67512: LD_INT 1
67514: PUSH
67515: LD_INT 0
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: LD_INT 1
67524: PUSH
67525: LD_INT 1
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 0
67534: PUSH
67535: LD_INT 1
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 1
67544: NEG
67545: PUSH
67546: LD_INT 0
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 1
67555: NEG
67556: PUSH
67557: LD_INT 1
67559: NEG
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: LIST
67569: LIST
67570: LIST
67571: LIST
67572: LIST
67573: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67574: LD_ADDR_VAR 0 63
67578: PUSH
67579: LD_INT 0
67581: PUSH
67582: LD_INT 0
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 0
67591: PUSH
67592: LD_INT 1
67594: NEG
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 1
67602: PUSH
67603: LD_INT 0
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 1
67612: PUSH
67613: LD_INT 1
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 0
67622: PUSH
67623: LD_INT 1
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 1
67632: NEG
67633: PUSH
67634: LD_INT 0
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 1
67643: NEG
67644: PUSH
67645: LD_INT 1
67647: NEG
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: LIST
67659: LIST
67660: LIST
67661: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67662: LD_ADDR_VAR 0 64
67666: PUSH
67667: LD_INT 0
67669: PUSH
67670: LD_INT 0
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 0
67679: PUSH
67680: LD_INT 1
67682: NEG
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 1
67690: PUSH
67691: LD_INT 0
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: LD_INT 1
67700: PUSH
67701: LD_INT 1
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: PUSH
67708: LD_INT 0
67710: PUSH
67711: LD_INT 1
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 1
67720: NEG
67721: PUSH
67722: LD_INT 0
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 1
67731: NEG
67732: PUSH
67733: LD_INT 1
67735: NEG
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: ST_TO_ADDR
// end ; 1 :
67750: GO 73647
67752: LD_INT 1
67754: DOUBLE
67755: EQUAL
67756: IFTRUE 67760
67758: GO 70383
67760: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67761: LD_ADDR_VAR 0 11
67765: PUSH
67766: LD_INT 1
67768: NEG
67769: PUSH
67770: LD_INT 3
67772: NEG
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: LD_INT 0
67780: PUSH
67781: LD_INT 3
67783: NEG
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 1
67791: PUSH
67792: LD_INT 2
67794: NEG
67795: PUSH
67796: EMPTY
67797: LIST
67798: LIST
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: LIST
67804: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67805: LD_ADDR_VAR 0 12
67809: PUSH
67810: LD_INT 2
67812: PUSH
67813: LD_INT 1
67815: NEG
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: LD_INT 3
67823: PUSH
67824: LD_INT 0
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: LD_INT 3
67833: PUSH
67834: LD_INT 1
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: LIST
67845: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67846: LD_ADDR_VAR 0 13
67850: PUSH
67851: LD_INT 3
67853: PUSH
67854: LD_INT 2
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: LD_INT 3
67863: PUSH
67864: LD_INT 3
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: PUSH
67871: LD_INT 2
67873: PUSH
67874: LD_INT 3
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: LIST
67885: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67886: LD_ADDR_VAR 0 14
67890: PUSH
67891: LD_INT 1
67893: PUSH
67894: LD_INT 3
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 0
67903: PUSH
67904: LD_INT 3
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 1
67913: NEG
67914: PUSH
67915: LD_INT 2
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: LIST
67926: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67927: LD_ADDR_VAR 0 15
67931: PUSH
67932: LD_INT 2
67934: NEG
67935: PUSH
67936: LD_INT 1
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 3
67945: NEG
67946: PUSH
67947: LD_INT 0
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 3
67956: NEG
67957: PUSH
67958: LD_INT 1
67960: NEG
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: LIST
67970: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67971: LD_ADDR_VAR 0 16
67975: PUSH
67976: LD_INT 2
67978: NEG
67979: PUSH
67980: LD_INT 3
67982: NEG
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 3
67990: NEG
67991: PUSH
67992: LD_INT 2
67994: NEG
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 3
68002: NEG
68003: PUSH
68004: LD_INT 3
68006: NEG
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: LIST
68016: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68017: LD_ADDR_VAR 0 17
68021: PUSH
68022: LD_INT 1
68024: NEG
68025: PUSH
68026: LD_INT 3
68028: NEG
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 0
68036: PUSH
68037: LD_INT 3
68039: NEG
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PUSH
68045: LD_INT 1
68047: PUSH
68048: LD_INT 2
68050: NEG
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: LIST
68060: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68061: LD_ADDR_VAR 0 18
68065: PUSH
68066: LD_INT 2
68068: PUSH
68069: LD_INT 1
68071: NEG
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 3
68079: PUSH
68080: LD_INT 0
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 3
68089: PUSH
68090: LD_INT 1
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: LIST
68101: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68102: LD_ADDR_VAR 0 19
68106: PUSH
68107: LD_INT 3
68109: PUSH
68110: LD_INT 2
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PUSH
68117: LD_INT 3
68119: PUSH
68120: LD_INT 3
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: PUSH
68127: LD_INT 2
68129: PUSH
68130: LD_INT 3
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: LIST
68141: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68142: LD_ADDR_VAR 0 20
68146: PUSH
68147: LD_INT 1
68149: PUSH
68150: LD_INT 3
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PUSH
68157: LD_INT 0
68159: PUSH
68160: LD_INT 3
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PUSH
68167: LD_INT 1
68169: NEG
68170: PUSH
68171: LD_INT 2
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: LIST
68182: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68183: LD_ADDR_VAR 0 21
68187: PUSH
68188: LD_INT 2
68190: NEG
68191: PUSH
68192: LD_INT 1
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 3
68201: NEG
68202: PUSH
68203: LD_INT 0
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 3
68212: NEG
68213: PUSH
68214: LD_INT 1
68216: NEG
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: LIST
68226: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68227: LD_ADDR_VAR 0 22
68231: PUSH
68232: LD_INT 2
68234: NEG
68235: PUSH
68236: LD_INT 3
68238: NEG
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 3
68246: NEG
68247: PUSH
68248: LD_INT 2
68250: NEG
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: PUSH
68256: LD_INT 3
68258: NEG
68259: PUSH
68260: LD_INT 3
68262: NEG
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: LIST
68272: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
68273: LD_ADDR_VAR 0 23
68277: PUSH
68278: LD_INT 0
68280: PUSH
68281: LD_INT 3
68283: NEG
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: LD_INT 1
68291: NEG
68292: PUSH
68293: LD_INT 4
68295: NEG
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 1
68303: PUSH
68304: LD_INT 3
68306: NEG
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: LIST
68316: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
68317: LD_ADDR_VAR 0 24
68321: PUSH
68322: LD_INT 3
68324: PUSH
68325: LD_INT 0
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 3
68334: PUSH
68335: LD_INT 1
68337: NEG
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: LD_INT 4
68345: PUSH
68346: LD_INT 1
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: LIST
68357: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
68358: LD_ADDR_VAR 0 25
68362: PUSH
68363: LD_INT 3
68365: PUSH
68366: LD_INT 3
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: LD_INT 4
68375: PUSH
68376: LD_INT 3
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PUSH
68383: LD_INT 3
68385: PUSH
68386: LD_INT 4
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: LIST
68397: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68398: LD_ADDR_VAR 0 26
68402: PUSH
68403: LD_INT 0
68405: PUSH
68406: LD_INT 3
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 1
68415: PUSH
68416: LD_INT 4
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: LD_INT 1
68425: NEG
68426: PUSH
68427: LD_INT 3
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: LIST
68438: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68439: LD_ADDR_VAR 0 27
68443: PUSH
68444: LD_INT 3
68446: NEG
68447: PUSH
68448: LD_INT 0
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 3
68457: NEG
68458: PUSH
68459: LD_INT 1
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PUSH
68466: LD_INT 4
68468: NEG
68469: PUSH
68470: LD_INT 1
68472: NEG
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: EMPTY
68479: LIST
68480: LIST
68481: LIST
68482: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68483: LD_ADDR_VAR 0 28
68487: PUSH
68488: LD_INT 3
68490: NEG
68491: PUSH
68492: LD_INT 3
68494: NEG
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PUSH
68500: LD_INT 3
68502: NEG
68503: PUSH
68504: LD_INT 4
68506: NEG
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: PUSH
68512: LD_INT 4
68514: NEG
68515: PUSH
68516: LD_INT 3
68518: NEG
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: LIST
68528: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68529: LD_ADDR_VAR 0 29
68533: PUSH
68534: LD_INT 1
68536: NEG
68537: PUSH
68538: LD_INT 3
68540: NEG
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: LD_INT 0
68548: PUSH
68549: LD_INT 3
68551: NEG
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: PUSH
68557: LD_INT 1
68559: PUSH
68560: LD_INT 2
68562: NEG
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 1
68570: NEG
68571: PUSH
68572: LD_INT 4
68574: NEG
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 0
68582: PUSH
68583: LD_INT 4
68585: NEG
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 1
68593: PUSH
68594: LD_INT 3
68596: NEG
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 1
68604: NEG
68605: PUSH
68606: LD_INT 5
68608: NEG
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 0
68616: PUSH
68617: LD_INT 5
68619: NEG
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: PUSH
68625: LD_INT 1
68627: PUSH
68628: LD_INT 4
68630: NEG
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 1
68638: NEG
68639: PUSH
68640: LD_INT 6
68642: NEG
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 0
68650: PUSH
68651: LD_INT 6
68653: NEG
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 1
68661: PUSH
68662: LD_INT 5
68664: NEG
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68684: LD_ADDR_VAR 0 30
68688: PUSH
68689: LD_INT 2
68691: PUSH
68692: LD_INT 1
68694: NEG
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 3
68702: PUSH
68703: LD_INT 0
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: LD_INT 3
68712: PUSH
68713: LD_INT 1
68715: PUSH
68716: EMPTY
68717: LIST
68718: LIST
68719: PUSH
68720: LD_INT 3
68722: PUSH
68723: LD_INT 1
68725: NEG
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: LD_INT 4
68733: PUSH
68734: LD_INT 0
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 4
68743: PUSH
68744: LD_INT 1
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 4
68753: PUSH
68754: LD_INT 1
68756: NEG
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 5
68764: PUSH
68765: LD_INT 0
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: PUSH
68772: LD_INT 5
68774: PUSH
68775: LD_INT 1
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: LD_INT 5
68784: PUSH
68785: LD_INT 1
68787: NEG
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: PUSH
68793: LD_INT 6
68795: PUSH
68796: LD_INT 0
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: PUSH
68803: LD_INT 6
68805: PUSH
68806: LD_INT 1
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68827: LD_ADDR_VAR 0 31
68831: PUSH
68832: LD_INT 3
68834: PUSH
68835: LD_INT 2
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 3
68844: PUSH
68845: LD_INT 3
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 2
68854: PUSH
68855: LD_INT 3
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: LD_INT 4
68864: PUSH
68865: LD_INT 3
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 4
68874: PUSH
68875: LD_INT 4
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 3
68884: PUSH
68885: LD_INT 4
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: LD_INT 5
68894: PUSH
68895: LD_INT 4
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 5
68904: PUSH
68905: LD_INT 5
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: LD_INT 4
68914: PUSH
68915: LD_INT 5
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 6
68924: PUSH
68925: LD_INT 5
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: PUSH
68932: LD_INT 6
68934: PUSH
68935: LD_INT 6
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 5
68944: PUSH
68945: LD_INT 6
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68966: LD_ADDR_VAR 0 32
68970: PUSH
68971: LD_INT 1
68973: PUSH
68974: LD_INT 3
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PUSH
68981: LD_INT 0
68983: PUSH
68984: LD_INT 3
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: PUSH
68991: LD_INT 1
68993: NEG
68994: PUSH
68995: LD_INT 2
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: PUSH
69002: LD_INT 1
69004: PUSH
69005: LD_INT 4
69007: PUSH
69008: EMPTY
69009: LIST
69010: LIST
69011: PUSH
69012: LD_INT 0
69014: PUSH
69015: LD_INT 4
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: PUSH
69022: LD_INT 1
69024: NEG
69025: PUSH
69026: LD_INT 3
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: PUSH
69033: LD_INT 1
69035: PUSH
69036: LD_INT 5
69038: PUSH
69039: EMPTY
69040: LIST
69041: LIST
69042: PUSH
69043: LD_INT 0
69045: PUSH
69046: LD_INT 5
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: PUSH
69053: LD_INT 1
69055: NEG
69056: PUSH
69057: LD_INT 4
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 1
69066: PUSH
69067: LD_INT 6
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 0
69076: PUSH
69077: LD_INT 6
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 1
69086: NEG
69087: PUSH
69088: LD_INT 5
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: LIST
69108: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
69109: LD_ADDR_VAR 0 33
69113: PUSH
69114: LD_INT 2
69116: NEG
69117: PUSH
69118: LD_INT 1
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: PUSH
69125: LD_INT 3
69127: NEG
69128: PUSH
69129: LD_INT 0
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: LD_INT 3
69138: NEG
69139: PUSH
69140: LD_INT 1
69142: NEG
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 3
69150: NEG
69151: PUSH
69152: LD_INT 1
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 4
69161: NEG
69162: PUSH
69163: LD_INT 0
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PUSH
69170: LD_INT 4
69172: NEG
69173: PUSH
69174: LD_INT 1
69176: NEG
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: LD_INT 4
69184: NEG
69185: PUSH
69186: LD_INT 1
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 5
69195: NEG
69196: PUSH
69197: LD_INT 0
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 5
69206: NEG
69207: PUSH
69208: LD_INT 1
69210: NEG
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: LD_INT 5
69218: NEG
69219: PUSH
69220: LD_INT 1
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 6
69229: NEG
69230: PUSH
69231: LD_INT 0
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: PUSH
69238: LD_INT 6
69240: NEG
69241: PUSH
69242: LD_INT 1
69244: NEG
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: LIST
69254: LIST
69255: LIST
69256: LIST
69257: LIST
69258: LIST
69259: LIST
69260: LIST
69261: LIST
69262: LIST
69263: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
69264: LD_ADDR_VAR 0 34
69268: PUSH
69269: LD_INT 2
69271: NEG
69272: PUSH
69273: LD_INT 3
69275: NEG
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: PUSH
69281: LD_INT 3
69283: NEG
69284: PUSH
69285: LD_INT 2
69287: NEG
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: PUSH
69293: LD_INT 3
69295: NEG
69296: PUSH
69297: LD_INT 3
69299: NEG
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: PUSH
69305: LD_INT 3
69307: NEG
69308: PUSH
69309: LD_INT 4
69311: NEG
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: PUSH
69317: LD_INT 4
69319: NEG
69320: PUSH
69321: LD_INT 3
69323: NEG
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 4
69331: NEG
69332: PUSH
69333: LD_INT 4
69335: NEG
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: LD_INT 4
69343: NEG
69344: PUSH
69345: LD_INT 5
69347: NEG
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: PUSH
69353: LD_INT 5
69355: NEG
69356: PUSH
69357: LD_INT 4
69359: NEG
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PUSH
69365: LD_INT 5
69367: NEG
69368: PUSH
69369: LD_INT 5
69371: NEG
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: PUSH
69377: LD_INT 5
69379: NEG
69380: PUSH
69381: LD_INT 6
69383: NEG
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: PUSH
69389: LD_INT 6
69391: NEG
69392: PUSH
69393: LD_INT 5
69395: NEG
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 6
69403: NEG
69404: PUSH
69405: LD_INT 6
69407: NEG
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: LIST
69417: LIST
69418: LIST
69419: LIST
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69427: LD_ADDR_VAR 0 41
69431: PUSH
69432: LD_INT 0
69434: PUSH
69435: LD_INT 2
69437: NEG
69438: PUSH
69439: EMPTY
69440: LIST
69441: LIST
69442: PUSH
69443: LD_INT 1
69445: NEG
69446: PUSH
69447: LD_INT 3
69449: NEG
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: PUSH
69455: LD_INT 1
69457: PUSH
69458: LD_INT 2
69460: NEG
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: LIST
69470: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69471: LD_ADDR_VAR 0 42
69475: PUSH
69476: LD_INT 2
69478: PUSH
69479: LD_INT 0
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 2
69488: PUSH
69489: LD_INT 1
69491: NEG
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 3
69499: PUSH
69500: LD_INT 1
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: LIST
69511: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69512: LD_ADDR_VAR 0 43
69516: PUSH
69517: LD_INT 2
69519: PUSH
69520: LD_INT 2
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: PUSH
69527: LD_INT 3
69529: PUSH
69530: LD_INT 2
69532: PUSH
69533: EMPTY
69534: LIST
69535: LIST
69536: PUSH
69537: LD_INT 2
69539: PUSH
69540: LD_INT 3
69542: PUSH
69543: EMPTY
69544: LIST
69545: LIST
69546: PUSH
69547: EMPTY
69548: LIST
69549: LIST
69550: LIST
69551: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69552: LD_ADDR_VAR 0 44
69556: PUSH
69557: LD_INT 0
69559: PUSH
69560: LD_INT 2
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 1
69569: PUSH
69570: LD_INT 3
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PUSH
69577: LD_INT 1
69579: NEG
69580: PUSH
69581: LD_INT 2
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: LIST
69592: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69593: LD_ADDR_VAR 0 45
69597: PUSH
69598: LD_INT 2
69600: NEG
69601: PUSH
69602: LD_INT 0
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 2
69611: NEG
69612: PUSH
69613: LD_INT 1
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 3
69622: NEG
69623: PUSH
69624: LD_INT 1
69626: NEG
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: LIST
69636: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69637: LD_ADDR_VAR 0 46
69641: PUSH
69642: LD_INT 2
69644: NEG
69645: PUSH
69646: LD_INT 2
69648: NEG
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PUSH
69654: LD_INT 2
69656: NEG
69657: PUSH
69658: LD_INT 3
69660: NEG
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: PUSH
69666: LD_INT 3
69668: NEG
69669: PUSH
69670: LD_INT 2
69672: NEG
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: LIST
69682: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69683: LD_ADDR_VAR 0 47
69687: PUSH
69688: LD_INT 2
69690: NEG
69691: PUSH
69692: LD_INT 3
69694: NEG
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: LD_INT 1
69702: NEG
69703: PUSH
69704: LD_INT 3
69706: NEG
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69716: LD_ADDR_VAR 0 48
69720: PUSH
69721: LD_INT 1
69723: PUSH
69724: LD_INT 2
69726: NEG
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: PUSH
69732: LD_INT 2
69734: PUSH
69735: LD_INT 1
69737: NEG
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69747: LD_ADDR_VAR 0 49
69751: PUSH
69752: LD_INT 3
69754: PUSH
69755: LD_INT 1
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PUSH
69762: LD_INT 3
69764: PUSH
69765: LD_INT 2
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69776: LD_ADDR_VAR 0 50
69780: PUSH
69781: LD_INT 2
69783: PUSH
69784: LD_INT 3
69786: PUSH
69787: EMPTY
69788: LIST
69789: LIST
69790: PUSH
69791: LD_INT 1
69793: PUSH
69794: LD_INT 3
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69805: LD_ADDR_VAR 0 51
69809: PUSH
69810: LD_INT 1
69812: NEG
69813: PUSH
69814: LD_INT 2
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: LD_INT 2
69823: NEG
69824: PUSH
69825: LD_INT 1
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69836: LD_ADDR_VAR 0 52
69840: PUSH
69841: LD_INT 3
69843: NEG
69844: PUSH
69845: LD_INT 1
69847: NEG
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 3
69855: NEG
69856: PUSH
69857: LD_INT 2
69859: NEG
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69869: LD_ADDR_VAR 0 53
69873: PUSH
69874: LD_INT 1
69876: NEG
69877: PUSH
69878: LD_INT 3
69880: NEG
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: PUSH
69886: LD_INT 0
69888: PUSH
69889: LD_INT 3
69891: NEG
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: LD_INT 1
69899: PUSH
69900: LD_INT 2
69902: NEG
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: LIST
69912: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69913: LD_ADDR_VAR 0 54
69917: PUSH
69918: LD_INT 2
69920: PUSH
69921: LD_INT 1
69923: NEG
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: PUSH
69929: LD_INT 3
69931: PUSH
69932: LD_INT 0
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: PUSH
69939: LD_INT 3
69941: PUSH
69942: LD_INT 1
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: LIST
69953: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69954: LD_ADDR_VAR 0 55
69958: PUSH
69959: LD_INT 3
69961: PUSH
69962: LD_INT 2
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: LD_INT 3
69971: PUSH
69972: LD_INT 3
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: LD_INT 2
69981: PUSH
69982: LD_INT 3
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: LIST
69993: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69994: LD_ADDR_VAR 0 56
69998: PUSH
69999: LD_INT 1
70001: PUSH
70002: LD_INT 3
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: PUSH
70009: LD_INT 0
70011: PUSH
70012: LD_INT 3
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: PUSH
70019: LD_INT 1
70021: NEG
70022: PUSH
70023: LD_INT 2
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: LIST
70034: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70035: LD_ADDR_VAR 0 57
70039: PUSH
70040: LD_INT 2
70042: NEG
70043: PUSH
70044: LD_INT 1
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: PUSH
70051: LD_INT 3
70053: NEG
70054: PUSH
70055: LD_INT 0
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: PUSH
70062: LD_INT 3
70064: NEG
70065: PUSH
70066: LD_INT 1
70068: NEG
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: LIST
70078: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70079: LD_ADDR_VAR 0 58
70083: PUSH
70084: LD_INT 2
70086: NEG
70087: PUSH
70088: LD_INT 3
70090: NEG
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: PUSH
70096: LD_INT 3
70098: NEG
70099: PUSH
70100: LD_INT 2
70102: NEG
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: LD_INT 3
70110: NEG
70111: PUSH
70112: LD_INT 3
70114: NEG
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: LIST
70124: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
70125: LD_ADDR_VAR 0 59
70129: PUSH
70130: LD_INT 1
70132: NEG
70133: PUSH
70134: LD_INT 2
70136: NEG
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: PUSH
70142: LD_INT 0
70144: PUSH
70145: LD_INT 2
70147: NEG
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_INT 1
70155: PUSH
70156: LD_INT 1
70158: NEG
70159: PUSH
70160: EMPTY
70161: LIST
70162: LIST
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: LIST
70168: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70169: LD_ADDR_VAR 0 60
70173: PUSH
70174: LD_INT 1
70176: PUSH
70177: LD_INT 1
70179: NEG
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: PUSH
70185: LD_INT 2
70187: PUSH
70188: LD_INT 0
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: LD_INT 2
70197: PUSH
70198: LD_INT 1
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: LIST
70209: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70210: LD_ADDR_VAR 0 61
70214: PUSH
70215: LD_INT 2
70217: PUSH
70218: LD_INT 1
70220: PUSH
70221: EMPTY
70222: LIST
70223: LIST
70224: PUSH
70225: LD_INT 2
70227: PUSH
70228: LD_INT 2
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PUSH
70235: LD_INT 1
70237: PUSH
70238: LD_INT 2
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: LIST
70249: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
70250: LD_ADDR_VAR 0 62
70254: PUSH
70255: LD_INT 1
70257: PUSH
70258: LD_INT 2
70260: PUSH
70261: EMPTY
70262: LIST
70263: LIST
70264: PUSH
70265: LD_INT 0
70267: PUSH
70268: LD_INT 2
70270: PUSH
70271: EMPTY
70272: LIST
70273: LIST
70274: PUSH
70275: LD_INT 1
70277: NEG
70278: PUSH
70279: LD_INT 1
70281: PUSH
70282: EMPTY
70283: LIST
70284: LIST
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: LIST
70290: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70291: LD_ADDR_VAR 0 63
70295: PUSH
70296: LD_INT 1
70298: NEG
70299: PUSH
70300: LD_INT 1
70302: PUSH
70303: EMPTY
70304: LIST
70305: LIST
70306: PUSH
70307: LD_INT 2
70309: NEG
70310: PUSH
70311: LD_INT 0
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PUSH
70318: LD_INT 2
70320: NEG
70321: PUSH
70322: LD_INT 1
70324: NEG
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: LIST
70334: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70335: LD_ADDR_VAR 0 64
70339: PUSH
70340: LD_INT 1
70342: NEG
70343: PUSH
70344: LD_INT 2
70346: NEG
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: LD_INT 2
70354: NEG
70355: PUSH
70356: LD_INT 1
70358: NEG
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: PUSH
70364: LD_INT 2
70366: NEG
70367: PUSH
70368: LD_INT 2
70370: NEG
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: LIST
70380: ST_TO_ADDR
// end ; 2 :
70381: GO 73647
70383: LD_INT 2
70385: DOUBLE
70386: EQUAL
70387: IFTRUE 70391
70389: GO 73646
70391: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
70392: LD_ADDR_VAR 0 29
70396: PUSH
70397: LD_INT 4
70399: PUSH
70400: LD_INT 0
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: LD_INT 4
70409: PUSH
70410: LD_INT 1
70412: NEG
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: PUSH
70418: LD_INT 5
70420: PUSH
70421: LD_INT 0
70423: PUSH
70424: EMPTY
70425: LIST
70426: LIST
70427: PUSH
70428: LD_INT 5
70430: PUSH
70431: LD_INT 1
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: LD_INT 4
70440: PUSH
70441: LD_INT 1
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: PUSH
70448: LD_INT 3
70450: PUSH
70451: LD_INT 0
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: LD_INT 3
70460: PUSH
70461: LD_INT 1
70463: NEG
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: PUSH
70469: LD_INT 3
70471: PUSH
70472: LD_INT 2
70474: NEG
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: LD_INT 5
70482: PUSH
70483: LD_INT 2
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PUSH
70490: LD_INT 3
70492: PUSH
70493: LD_INT 3
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 3
70502: PUSH
70503: LD_INT 2
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_INT 4
70512: PUSH
70513: LD_INT 3
70515: PUSH
70516: EMPTY
70517: LIST
70518: LIST
70519: PUSH
70520: LD_INT 4
70522: PUSH
70523: LD_INT 4
70525: PUSH
70526: EMPTY
70527: LIST
70528: LIST
70529: PUSH
70530: LD_INT 3
70532: PUSH
70533: LD_INT 4
70535: PUSH
70536: EMPTY
70537: LIST
70538: LIST
70539: PUSH
70540: LD_INT 2
70542: PUSH
70543: LD_INT 3
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PUSH
70550: LD_INT 2
70552: PUSH
70553: LD_INT 2
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: PUSH
70560: LD_INT 4
70562: PUSH
70563: LD_INT 2
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: LD_INT 2
70572: PUSH
70573: LD_INT 4
70575: PUSH
70576: EMPTY
70577: LIST
70578: LIST
70579: PUSH
70580: LD_INT 0
70582: PUSH
70583: LD_INT 4
70585: PUSH
70586: EMPTY
70587: LIST
70588: LIST
70589: PUSH
70590: LD_INT 0
70592: PUSH
70593: LD_INT 3
70595: PUSH
70596: EMPTY
70597: LIST
70598: LIST
70599: PUSH
70600: LD_INT 1
70602: PUSH
70603: LD_INT 4
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_INT 1
70612: PUSH
70613: LD_INT 5
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 0
70622: PUSH
70623: LD_INT 5
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: LD_INT 1
70632: NEG
70633: PUSH
70634: LD_INT 4
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: LD_INT 1
70643: NEG
70644: PUSH
70645: LD_INT 3
70647: PUSH
70648: EMPTY
70649: LIST
70650: LIST
70651: PUSH
70652: LD_INT 2
70654: PUSH
70655: LD_INT 5
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: PUSH
70662: LD_INT 2
70664: NEG
70665: PUSH
70666: LD_INT 3
70668: PUSH
70669: EMPTY
70670: LIST
70671: LIST
70672: PUSH
70673: LD_INT 3
70675: NEG
70676: PUSH
70677: LD_INT 0
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: PUSH
70684: LD_INT 3
70686: NEG
70687: PUSH
70688: LD_INT 1
70690: NEG
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: PUSH
70696: LD_INT 2
70698: NEG
70699: PUSH
70700: LD_INT 0
70702: PUSH
70703: EMPTY
70704: LIST
70705: LIST
70706: PUSH
70707: LD_INT 2
70709: NEG
70710: PUSH
70711: LD_INT 1
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PUSH
70718: LD_INT 3
70720: NEG
70721: PUSH
70722: LD_INT 1
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 4
70731: NEG
70732: PUSH
70733: LD_INT 0
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PUSH
70740: LD_INT 4
70742: NEG
70743: PUSH
70744: LD_INT 1
70746: NEG
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: LD_INT 4
70754: NEG
70755: PUSH
70756: LD_INT 2
70758: NEG
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: PUSH
70764: LD_INT 2
70766: NEG
70767: PUSH
70768: LD_INT 2
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: LD_INT 4
70777: NEG
70778: PUSH
70779: LD_INT 4
70781: NEG
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: PUSH
70787: LD_INT 4
70789: NEG
70790: PUSH
70791: LD_INT 5
70793: NEG
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 3
70801: NEG
70802: PUSH
70803: LD_INT 4
70805: NEG
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: LD_INT 3
70813: NEG
70814: PUSH
70815: LD_INT 3
70817: NEG
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: PUSH
70823: LD_INT 4
70825: NEG
70826: PUSH
70827: LD_INT 3
70829: NEG
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: PUSH
70835: LD_INT 5
70837: NEG
70838: PUSH
70839: LD_INT 4
70841: NEG
70842: PUSH
70843: EMPTY
70844: LIST
70845: LIST
70846: PUSH
70847: LD_INT 5
70849: NEG
70850: PUSH
70851: LD_INT 5
70853: NEG
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: PUSH
70859: LD_INT 3
70861: NEG
70862: PUSH
70863: LD_INT 5
70865: NEG
70866: PUSH
70867: EMPTY
70868: LIST
70869: LIST
70870: PUSH
70871: LD_INT 5
70873: NEG
70874: PUSH
70875: LD_INT 3
70877: NEG
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: LIST
70887: LIST
70888: LIST
70889: LIST
70890: LIST
70891: LIST
70892: LIST
70893: LIST
70894: LIST
70895: LIST
70896: LIST
70897: LIST
70898: LIST
70899: LIST
70900: LIST
70901: LIST
70902: LIST
70903: LIST
70904: LIST
70905: LIST
70906: LIST
70907: LIST
70908: LIST
70909: LIST
70910: LIST
70911: LIST
70912: LIST
70913: LIST
70914: LIST
70915: LIST
70916: LIST
70917: LIST
70918: LIST
70919: LIST
70920: LIST
70921: LIST
70922: LIST
70923: LIST
70924: LIST
70925: LIST
70926: LIST
70927: LIST
70928: LIST
70929: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70930: LD_ADDR_VAR 0 30
70934: PUSH
70935: LD_INT 4
70937: PUSH
70938: LD_INT 4
70940: PUSH
70941: EMPTY
70942: LIST
70943: LIST
70944: PUSH
70945: LD_INT 4
70947: PUSH
70948: LD_INT 3
70950: PUSH
70951: EMPTY
70952: LIST
70953: LIST
70954: PUSH
70955: LD_INT 5
70957: PUSH
70958: LD_INT 4
70960: PUSH
70961: EMPTY
70962: LIST
70963: LIST
70964: PUSH
70965: LD_INT 5
70967: PUSH
70968: LD_INT 5
70970: PUSH
70971: EMPTY
70972: LIST
70973: LIST
70974: PUSH
70975: LD_INT 4
70977: PUSH
70978: LD_INT 5
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: PUSH
70985: LD_INT 3
70987: PUSH
70988: LD_INT 4
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: PUSH
70995: LD_INT 3
70997: PUSH
70998: LD_INT 3
71000: PUSH
71001: EMPTY
71002: LIST
71003: LIST
71004: PUSH
71005: LD_INT 5
71007: PUSH
71008: LD_INT 3
71010: PUSH
71011: EMPTY
71012: LIST
71013: LIST
71014: PUSH
71015: LD_INT 3
71017: PUSH
71018: LD_INT 5
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: PUSH
71025: LD_INT 0
71027: PUSH
71028: LD_INT 3
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: LD_INT 0
71037: PUSH
71038: LD_INT 2
71040: PUSH
71041: EMPTY
71042: LIST
71043: LIST
71044: PUSH
71045: LD_INT 1
71047: PUSH
71048: LD_INT 3
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: PUSH
71055: LD_INT 1
71057: PUSH
71058: LD_INT 4
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: LD_INT 0
71067: PUSH
71068: LD_INT 4
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: PUSH
71075: LD_INT 1
71077: NEG
71078: PUSH
71079: LD_INT 3
71081: PUSH
71082: EMPTY
71083: LIST
71084: LIST
71085: PUSH
71086: LD_INT 1
71088: NEG
71089: PUSH
71090: LD_INT 2
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: PUSH
71097: LD_INT 2
71099: PUSH
71100: LD_INT 4
71102: PUSH
71103: EMPTY
71104: LIST
71105: LIST
71106: PUSH
71107: LD_INT 2
71109: NEG
71110: PUSH
71111: LD_INT 2
71113: PUSH
71114: EMPTY
71115: LIST
71116: LIST
71117: PUSH
71118: LD_INT 4
71120: NEG
71121: PUSH
71122: LD_INT 0
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: PUSH
71129: LD_INT 4
71131: NEG
71132: PUSH
71133: LD_INT 1
71135: NEG
71136: PUSH
71137: EMPTY
71138: LIST
71139: LIST
71140: PUSH
71141: LD_INT 3
71143: NEG
71144: PUSH
71145: LD_INT 0
71147: PUSH
71148: EMPTY
71149: LIST
71150: LIST
71151: PUSH
71152: LD_INT 3
71154: NEG
71155: PUSH
71156: LD_INT 1
71158: PUSH
71159: EMPTY
71160: LIST
71161: LIST
71162: PUSH
71163: LD_INT 4
71165: NEG
71166: PUSH
71167: LD_INT 1
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PUSH
71174: LD_INT 5
71176: NEG
71177: PUSH
71178: LD_INT 0
71180: PUSH
71181: EMPTY
71182: LIST
71183: LIST
71184: PUSH
71185: LD_INT 5
71187: NEG
71188: PUSH
71189: LD_INT 1
71191: NEG
71192: PUSH
71193: EMPTY
71194: LIST
71195: LIST
71196: PUSH
71197: LD_INT 5
71199: NEG
71200: PUSH
71201: LD_INT 2
71203: NEG
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: PUSH
71209: LD_INT 3
71211: NEG
71212: PUSH
71213: LD_INT 2
71215: PUSH
71216: EMPTY
71217: LIST
71218: LIST
71219: PUSH
71220: LD_INT 3
71222: NEG
71223: PUSH
71224: LD_INT 3
71226: NEG
71227: PUSH
71228: EMPTY
71229: LIST
71230: LIST
71231: PUSH
71232: LD_INT 3
71234: NEG
71235: PUSH
71236: LD_INT 4
71238: NEG
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: PUSH
71244: LD_INT 2
71246: NEG
71247: PUSH
71248: LD_INT 3
71250: NEG
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: LD_INT 2
71258: NEG
71259: PUSH
71260: LD_INT 2
71262: NEG
71263: PUSH
71264: EMPTY
71265: LIST
71266: LIST
71267: PUSH
71268: LD_INT 3
71270: NEG
71271: PUSH
71272: LD_INT 2
71274: NEG
71275: PUSH
71276: EMPTY
71277: LIST
71278: LIST
71279: PUSH
71280: LD_INT 4
71282: NEG
71283: PUSH
71284: LD_INT 3
71286: NEG
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: PUSH
71292: LD_INT 4
71294: NEG
71295: PUSH
71296: LD_INT 4
71298: NEG
71299: PUSH
71300: EMPTY
71301: LIST
71302: LIST
71303: PUSH
71304: LD_INT 2
71306: NEG
71307: PUSH
71308: LD_INT 4
71310: NEG
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: PUSH
71316: LD_INT 4
71318: NEG
71319: PUSH
71320: LD_INT 2
71322: NEG
71323: PUSH
71324: EMPTY
71325: LIST
71326: LIST
71327: PUSH
71328: LD_INT 0
71330: PUSH
71331: LD_INT 4
71333: NEG
71334: PUSH
71335: EMPTY
71336: LIST
71337: LIST
71338: PUSH
71339: LD_INT 0
71341: PUSH
71342: LD_INT 5
71344: NEG
71345: PUSH
71346: EMPTY
71347: LIST
71348: LIST
71349: PUSH
71350: LD_INT 1
71352: PUSH
71353: LD_INT 4
71355: NEG
71356: PUSH
71357: EMPTY
71358: LIST
71359: LIST
71360: PUSH
71361: LD_INT 1
71363: PUSH
71364: LD_INT 3
71366: NEG
71367: PUSH
71368: EMPTY
71369: LIST
71370: LIST
71371: PUSH
71372: LD_INT 0
71374: PUSH
71375: LD_INT 3
71377: NEG
71378: PUSH
71379: EMPTY
71380: LIST
71381: LIST
71382: PUSH
71383: LD_INT 1
71385: NEG
71386: PUSH
71387: LD_INT 4
71389: NEG
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: PUSH
71395: LD_INT 1
71397: NEG
71398: PUSH
71399: LD_INT 5
71401: NEG
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: PUSH
71407: LD_INT 2
71409: PUSH
71410: LD_INT 3
71412: NEG
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: LD_INT 2
71420: NEG
71421: PUSH
71422: LD_INT 5
71424: NEG
71425: PUSH
71426: EMPTY
71427: LIST
71428: LIST
71429: PUSH
71430: EMPTY
71431: LIST
71432: LIST
71433: LIST
71434: LIST
71435: LIST
71436: LIST
71437: LIST
71438: LIST
71439: LIST
71440: LIST
71441: LIST
71442: LIST
71443: LIST
71444: LIST
71445: LIST
71446: LIST
71447: LIST
71448: LIST
71449: LIST
71450: LIST
71451: LIST
71452: LIST
71453: LIST
71454: LIST
71455: LIST
71456: LIST
71457: LIST
71458: LIST
71459: LIST
71460: LIST
71461: LIST
71462: LIST
71463: LIST
71464: LIST
71465: LIST
71466: LIST
71467: LIST
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: LIST
71474: LIST
71475: LIST
71476: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71477: LD_ADDR_VAR 0 31
71481: PUSH
71482: LD_INT 0
71484: PUSH
71485: LD_INT 4
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: PUSH
71492: LD_INT 0
71494: PUSH
71495: LD_INT 3
71497: PUSH
71498: EMPTY
71499: LIST
71500: LIST
71501: PUSH
71502: LD_INT 1
71504: PUSH
71505: LD_INT 4
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: PUSH
71512: LD_INT 1
71514: PUSH
71515: LD_INT 5
71517: PUSH
71518: EMPTY
71519: LIST
71520: LIST
71521: PUSH
71522: LD_INT 0
71524: PUSH
71525: LD_INT 5
71527: PUSH
71528: EMPTY
71529: LIST
71530: LIST
71531: PUSH
71532: LD_INT 1
71534: NEG
71535: PUSH
71536: LD_INT 4
71538: PUSH
71539: EMPTY
71540: LIST
71541: LIST
71542: PUSH
71543: LD_INT 1
71545: NEG
71546: PUSH
71547: LD_INT 3
71549: PUSH
71550: EMPTY
71551: LIST
71552: LIST
71553: PUSH
71554: LD_INT 2
71556: PUSH
71557: LD_INT 5
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: PUSH
71564: LD_INT 2
71566: NEG
71567: PUSH
71568: LD_INT 3
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: PUSH
71575: LD_INT 3
71577: NEG
71578: PUSH
71579: LD_INT 0
71581: PUSH
71582: EMPTY
71583: LIST
71584: LIST
71585: PUSH
71586: LD_INT 3
71588: NEG
71589: PUSH
71590: LD_INT 1
71592: NEG
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: PUSH
71598: LD_INT 2
71600: NEG
71601: PUSH
71602: LD_INT 0
71604: PUSH
71605: EMPTY
71606: LIST
71607: LIST
71608: PUSH
71609: LD_INT 2
71611: NEG
71612: PUSH
71613: LD_INT 1
71615: PUSH
71616: EMPTY
71617: LIST
71618: LIST
71619: PUSH
71620: LD_INT 3
71622: NEG
71623: PUSH
71624: LD_INT 1
71626: PUSH
71627: EMPTY
71628: LIST
71629: LIST
71630: PUSH
71631: LD_INT 4
71633: NEG
71634: PUSH
71635: LD_INT 0
71637: PUSH
71638: EMPTY
71639: LIST
71640: LIST
71641: PUSH
71642: LD_INT 4
71644: NEG
71645: PUSH
71646: LD_INT 1
71648: NEG
71649: PUSH
71650: EMPTY
71651: LIST
71652: LIST
71653: PUSH
71654: LD_INT 4
71656: NEG
71657: PUSH
71658: LD_INT 2
71660: NEG
71661: PUSH
71662: EMPTY
71663: LIST
71664: LIST
71665: PUSH
71666: LD_INT 2
71668: NEG
71669: PUSH
71670: LD_INT 2
71672: PUSH
71673: EMPTY
71674: LIST
71675: LIST
71676: PUSH
71677: LD_INT 4
71679: NEG
71680: PUSH
71681: LD_INT 4
71683: NEG
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: PUSH
71689: LD_INT 4
71691: NEG
71692: PUSH
71693: LD_INT 5
71695: NEG
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: PUSH
71701: LD_INT 3
71703: NEG
71704: PUSH
71705: LD_INT 4
71707: NEG
71708: PUSH
71709: EMPTY
71710: LIST
71711: LIST
71712: PUSH
71713: LD_INT 3
71715: NEG
71716: PUSH
71717: LD_INT 3
71719: NEG
71720: PUSH
71721: EMPTY
71722: LIST
71723: LIST
71724: PUSH
71725: LD_INT 4
71727: NEG
71728: PUSH
71729: LD_INT 3
71731: NEG
71732: PUSH
71733: EMPTY
71734: LIST
71735: LIST
71736: PUSH
71737: LD_INT 5
71739: NEG
71740: PUSH
71741: LD_INT 4
71743: NEG
71744: PUSH
71745: EMPTY
71746: LIST
71747: LIST
71748: PUSH
71749: LD_INT 5
71751: NEG
71752: PUSH
71753: LD_INT 5
71755: NEG
71756: PUSH
71757: EMPTY
71758: LIST
71759: LIST
71760: PUSH
71761: LD_INT 3
71763: NEG
71764: PUSH
71765: LD_INT 5
71767: NEG
71768: PUSH
71769: EMPTY
71770: LIST
71771: LIST
71772: PUSH
71773: LD_INT 5
71775: NEG
71776: PUSH
71777: LD_INT 3
71779: NEG
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PUSH
71785: LD_INT 0
71787: PUSH
71788: LD_INT 3
71790: NEG
71791: PUSH
71792: EMPTY
71793: LIST
71794: LIST
71795: PUSH
71796: LD_INT 0
71798: PUSH
71799: LD_INT 4
71801: NEG
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: PUSH
71807: LD_INT 1
71809: PUSH
71810: LD_INT 3
71812: NEG
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: PUSH
71818: LD_INT 1
71820: PUSH
71821: LD_INT 2
71823: NEG
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PUSH
71829: LD_INT 0
71831: PUSH
71832: LD_INT 2
71834: NEG
71835: PUSH
71836: EMPTY
71837: LIST
71838: LIST
71839: PUSH
71840: LD_INT 1
71842: NEG
71843: PUSH
71844: LD_INT 3
71846: NEG
71847: PUSH
71848: EMPTY
71849: LIST
71850: LIST
71851: PUSH
71852: LD_INT 1
71854: NEG
71855: PUSH
71856: LD_INT 4
71858: NEG
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: PUSH
71864: LD_INT 2
71866: PUSH
71867: LD_INT 2
71869: NEG
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: PUSH
71875: LD_INT 2
71877: NEG
71878: PUSH
71879: LD_INT 4
71881: NEG
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: PUSH
71887: LD_INT 4
71889: PUSH
71890: LD_INT 0
71892: PUSH
71893: EMPTY
71894: LIST
71895: LIST
71896: PUSH
71897: LD_INT 4
71899: PUSH
71900: LD_INT 1
71902: NEG
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: PUSH
71908: LD_INT 5
71910: PUSH
71911: LD_INT 0
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: PUSH
71918: LD_INT 5
71920: PUSH
71921: LD_INT 1
71923: PUSH
71924: EMPTY
71925: LIST
71926: LIST
71927: PUSH
71928: LD_INT 4
71930: PUSH
71931: LD_INT 1
71933: PUSH
71934: EMPTY
71935: LIST
71936: LIST
71937: PUSH
71938: LD_INT 3
71940: PUSH
71941: LD_INT 0
71943: PUSH
71944: EMPTY
71945: LIST
71946: LIST
71947: PUSH
71948: LD_INT 3
71950: PUSH
71951: LD_INT 1
71953: NEG
71954: PUSH
71955: EMPTY
71956: LIST
71957: LIST
71958: PUSH
71959: LD_INT 3
71961: PUSH
71962: LD_INT 2
71964: NEG
71965: PUSH
71966: EMPTY
71967: LIST
71968: LIST
71969: PUSH
71970: LD_INT 5
71972: PUSH
71973: LD_INT 2
71975: PUSH
71976: EMPTY
71977: LIST
71978: LIST
71979: PUSH
71980: EMPTY
71981: LIST
71982: LIST
71983: LIST
71984: LIST
71985: LIST
71986: LIST
71987: LIST
71988: LIST
71989: LIST
71990: LIST
71991: LIST
71992: LIST
71993: LIST
71994: LIST
71995: LIST
71996: LIST
71997: LIST
71998: LIST
71999: LIST
72000: LIST
72001: LIST
72002: LIST
72003: LIST
72004: LIST
72005: LIST
72006: LIST
72007: LIST
72008: LIST
72009: LIST
72010: LIST
72011: LIST
72012: LIST
72013: LIST
72014: LIST
72015: LIST
72016: LIST
72017: LIST
72018: LIST
72019: LIST
72020: LIST
72021: LIST
72022: LIST
72023: LIST
72024: LIST
72025: LIST
72026: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
72027: LD_ADDR_VAR 0 32
72031: PUSH
72032: LD_INT 4
72034: NEG
72035: PUSH
72036: LD_INT 0
72038: PUSH
72039: EMPTY
72040: LIST
72041: LIST
72042: PUSH
72043: LD_INT 4
72045: NEG
72046: PUSH
72047: LD_INT 1
72049: NEG
72050: PUSH
72051: EMPTY
72052: LIST
72053: LIST
72054: PUSH
72055: LD_INT 3
72057: NEG
72058: PUSH
72059: LD_INT 0
72061: PUSH
72062: EMPTY
72063: LIST
72064: LIST
72065: PUSH
72066: LD_INT 3
72068: NEG
72069: PUSH
72070: LD_INT 1
72072: PUSH
72073: EMPTY
72074: LIST
72075: LIST
72076: PUSH
72077: LD_INT 4
72079: NEG
72080: PUSH
72081: LD_INT 1
72083: PUSH
72084: EMPTY
72085: LIST
72086: LIST
72087: PUSH
72088: LD_INT 5
72090: NEG
72091: PUSH
72092: LD_INT 0
72094: PUSH
72095: EMPTY
72096: LIST
72097: LIST
72098: PUSH
72099: LD_INT 5
72101: NEG
72102: PUSH
72103: LD_INT 1
72105: NEG
72106: PUSH
72107: EMPTY
72108: LIST
72109: LIST
72110: PUSH
72111: LD_INT 5
72113: NEG
72114: PUSH
72115: LD_INT 2
72117: NEG
72118: PUSH
72119: EMPTY
72120: LIST
72121: LIST
72122: PUSH
72123: LD_INT 3
72125: NEG
72126: PUSH
72127: LD_INT 2
72129: PUSH
72130: EMPTY
72131: LIST
72132: LIST
72133: PUSH
72134: LD_INT 3
72136: NEG
72137: PUSH
72138: LD_INT 3
72140: NEG
72141: PUSH
72142: EMPTY
72143: LIST
72144: LIST
72145: PUSH
72146: LD_INT 3
72148: NEG
72149: PUSH
72150: LD_INT 4
72152: NEG
72153: PUSH
72154: EMPTY
72155: LIST
72156: LIST
72157: PUSH
72158: LD_INT 2
72160: NEG
72161: PUSH
72162: LD_INT 3
72164: NEG
72165: PUSH
72166: EMPTY
72167: LIST
72168: LIST
72169: PUSH
72170: LD_INT 2
72172: NEG
72173: PUSH
72174: LD_INT 2
72176: NEG
72177: PUSH
72178: EMPTY
72179: LIST
72180: LIST
72181: PUSH
72182: LD_INT 3
72184: NEG
72185: PUSH
72186: LD_INT 2
72188: NEG
72189: PUSH
72190: EMPTY
72191: LIST
72192: LIST
72193: PUSH
72194: LD_INT 4
72196: NEG
72197: PUSH
72198: LD_INT 3
72200: NEG
72201: PUSH
72202: EMPTY
72203: LIST
72204: LIST
72205: PUSH
72206: LD_INT 4
72208: NEG
72209: PUSH
72210: LD_INT 4
72212: NEG
72213: PUSH
72214: EMPTY
72215: LIST
72216: LIST
72217: PUSH
72218: LD_INT 2
72220: NEG
72221: PUSH
72222: LD_INT 4
72224: NEG
72225: PUSH
72226: EMPTY
72227: LIST
72228: LIST
72229: PUSH
72230: LD_INT 4
72232: NEG
72233: PUSH
72234: LD_INT 2
72236: NEG
72237: PUSH
72238: EMPTY
72239: LIST
72240: LIST
72241: PUSH
72242: LD_INT 0
72244: PUSH
72245: LD_INT 4
72247: NEG
72248: PUSH
72249: EMPTY
72250: LIST
72251: LIST
72252: PUSH
72253: LD_INT 0
72255: PUSH
72256: LD_INT 5
72258: NEG
72259: PUSH
72260: EMPTY
72261: LIST
72262: LIST
72263: PUSH
72264: LD_INT 1
72266: PUSH
72267: LD_INT 4
72269: NEG
72270: PUSH
72271: EMPTY
72272: LIST
72273: LIST
72274: PUSH
72275: LD_INT 1
72277: PUSH
72278: LD_INT 3
72280: NEG
72281: PUSH
72282: EMPTY
72283: LIST
72284: LIST
72285: PUSH
72286: LD_INT 0
72288: PUSH
72289: LD_INT 3
72291: NEG
72292: PUSH
72293: EMPTY
72294: LIST
72295: LIST
72296: PUSH
72297: LD_INT 1
72299: NEG
72300: PUSH
72301: LD_INT 4
72303: NEG
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: PUSH
72309: LD_INT 1
72311: NEG
72312: PUSH
72313: LD_INT 5
72315: NEG
72316: PUSH
72317: EMPTY
72318: LIST
72319: LIST
72320: PUSH
72321: LD_INT 2
72323: PUSH
72324: LD_INT 3
72326: NEG
72327: PUSH
72328: EMPTY
72329: LIST
72330: LIST
72331: PUSH
72332: LD_INT 2
72334: NEG
72335: PUSH
72336: LD_INT 5
72338: NEG
72339: PUSH
72340: EMPTY
72341: LIST
72342: LIST
72343: PUSH
72344: LD_INT 3
72346: PUSH
72347: LD_INT 0
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: PUSH
72354: LD_INT 3
72356: PUSH
72357: LD_INT 1
72359: NEG
72360: PUSH
72361: EMPTY
72362: LIST
72363: LIST
72364: PUSH
72365: LD_INT 4
72367: PUSH
72368: LD_INT 0
72370: PUSH
72371: EMPTY
72372: LIST
72373: LIST
72374: PUSH
72375: LD_INT 4
72377: PUSH
72378: LD_INT 1
72380: PUSH
72381: EMPTY
72382: LIST
72383: LIST
72384: PUSH
72385: LD_INT 3
72387: PUSH
72388: LD_INT 1
72390: PUSH
72391: EMPTY
72392: LIST
72393: LIST
72394: PUSH
72395: LD_INT 2
72397: PUSH
72398: LD_INT 0
72400: PUSH
72401: EMPTY
72402: LIST
72403: LIST
72404: PUSH
72405: LD_INT 2
72407: PUSH
72408: LD_INT 1
72410: NEG
72411: PUSH
72412: EMPTY
72413: LIST
72414: LIST
72415: PUSH
72416: LD_INT 2
72418: PUSH
72419: LD_INT 2
72421: NEG
72422: PUSH
72423: EMPTY
72424: LIST
72425: LIST
72426: PUSH
72427: LD_INT 4
72429: PUSH
72430: LD_INT 2
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: PUSH
72437: LD_INT 4
72439: PUSH
72440: LD_INT 4
72442: PUSH
72443: EMPTY
72444: LIST
72445: LIST
72446: PUSH
72447: LD_INT 4
72449: PUSH
72450: LD_INT 3
72452: PUSH
72453: EMPTY
72454: LIST
72455: LIST
72456: PUSH
72457: LD_INT 5
72459: PUSH
72460: LD_INT 4
72462: PUSH
72463: EMPTY
72464: LIST
72465: LIST
72466: PUSH
72467: LD_INT 5
72469: PUSH
72470: LD_INT 5
72472: PUSH
72473: EMPTY
72474: LIST
72475: LIST
72476: PUSH
72477: LD_INT 4
72479: PUSH
72480: LD_INT 5
72482: PUSH
72483: EMPTY
72484: LIST
72485: LIST
72486: PUSH
72487: LD_INT 3
72489: PUSH
72490: LD_INT 4
72492: PUSH
72493: EMPTY
72494: LIST
72495: LIST
72496: PUSH
72497: LD_INT 3
72499: PUSH
72500: LD_INT 3
72502: PUSH
72503: EMPTY
72504: LIST
72505: LIST
72506: PUSH
72507: LD_INT 5
72509: PUSH
72510: LD_INT 3
72512: PUSH
72513: EMPTY
72514: LIST
72515: LIST
72516: PUSH
72517: LD_INT 3
72519: PUSH
72520: LD_INT 5
72522: PUSH
72523: EMPTY
72524: LIST
72525: LIST
72526: PUSH
72527: EMPTY
72528: LIST
72529: LIST
72530: LIST
72531: LIST
72532: LIST
72533: LIST
72534: LIST
72535: LIST
72536: LIST
72537: LIST
72538: LIST
72539: LIST
72540: LIST
72541: LIST
72542: LIST
72543: LIST
72544: LIST
72545: LIST
72546: LIST
72547: LIST
72548: LIST
72549: LIST
72550: LIST
72551: LIST
72552: LIST
72553: LIST
72554: LIST
72555: LIST
72556: LIST
72557: LIST
72558: LIST
72559: LIST
72560: LIST
72561: LIST
72562: LIST
72563: LIST
72564: LIST
72565: LIST
72566: LIST
72567: LIST
72568: LIST
72569: LIST
72570: LIST
72571: LIST
72572: LIST
72573: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72574: LD_ADDR_VAR 0 33
72578: PUSH
72579: LD_INT 4
72581: NEG
72582: PUSH
72583: LD_INT 4
72585: NEG
72586: PUSH
72587: EMPTY
72588: LIST
72589: LIST
72590: PUSH
72591: LD_INT 4
72593: NEG
72594: PUSH
72595: LD_INT 5
72597: NEG
72598: PUSH
72599: EMPTY
72600: LIST
72601: LIST
72602: PUSH
72603: LD_INT 3
72605: NEG
72606: PUSH
72607: LD_INT 4
72609: NEG
72610: PUSH
72611: EMPTY
72612: LIST
72613: LIST
72614: PUSH
72615: LD_INT 3
72617: NEG
72618: PUSH
72619: LD_INT 3
72621: NEG
72622: PUSH
72623: EMPTY
72624: LIST
72625: LIST
72626: PUSH
72627: LD_INT 4
72629: NEG
72630: PUSH
72631: LD_INT 3
72633: NEG
72634: PUSH
72635: EMPTY
72636: LIST
72637: LIST
72638: PUSH
72639: LD_INT 5
72641: NEG
72642: PUSH
72643: LD_INT 4
72645: NEG
72646: PUSH
72647: EMPTY
72648: LIST
72649: LIST
72650: PUSH
72651: LD_INT 5
72653: NEG
72654: PUSH
72655: LD_INT 5
72657: NEG
72658: PUSH
72659: EMPTY
72660: LIST
72661: LIST
72662: PUSH
72663: LD_INT 3
72665: NEG
72666: PUSH
72667: LD_INT 5
72669: NEG
72670: PUSH
72671: EMPTY
72672: LIST
72673: LIST
72674: PUSH
72675: LD_INT 5
72677: NEG
72678: PUSH
72679: LD_INT 3
72681: NEG
72682: PUSH
72683: EMPTY
72684: LIST
72685: LIST
72686: PUSH
72687: LD_INT 0
72689: PUSH
72690: LD_INT 3
72692: NEG
72693: PUSH
72694: EMPTY
72695: LIST
72696: LIST
72697: PUSH
72698: LD_INT 0
72700: PUSH
72701: LD_INT 4
72703: NEG
72704: PUSH
72705: EMPTY
72706: LIST
72707: LIST
72708: PUSH
72709: LD_INT 1
72711: PUSH
72712: LD_INT 3
72714: NEG
72715: PUSH
72716: EMPTY
72717: LIST
72718: LIST
72719: PUSH
72720: LD_INT 1
72722: PUSH
72723: LD_INT 2
72725: NEG
72726: PUSH
72727: EMPTY
72728: LIST
72729: LIST
72730: PUSH
72731: LD_INT 0
72733: PUSH
72734: LD_INT 2
72736: NEG
72737: PUSH
72738: EMPTY
72739: LIST
72740: LIST
72741: PUSH
72742: LD_INT 1
72744: NEG
72745: PUSH
72746: LD_INT 3
72748: NEG
72749: PUSH
72750: EMPTY
72751: LIST
72752: LIST
72753: PUSH
72754: LD_INT 1
72756: NEG
72757: PUSH
72758: LD_INT 4
72760: NEG
72761: PUSH
72762: EMPTY
72763: LIST
72764: LIST
72765: PUSH
72766: LD_INT 2
72768: PUSH
72769: LD_INT 2
72771: NEG
72772: PUSH
72773: EMPTY
72774: LIST
72775: LIST
72776: PUSH
72777: LD_INT 2
72779: NEG
72780: PUSH
72781: LD_INT 4
72783: NEG
72784: PUSH
72785: EMPTY
72786: LIST
72787: LIST
72788: PUSH
72789: LD_INT 4
72791: PUSH
72792: LD_INT 0
72794: PUSH
72795: EMPTY
72796: LIST
72797: LIST
72798: PUSH
72799: LD_INT 4
72801: PUSH
72802: LD_INT 1
72804: NEG
72805: PUSH
72806: EMPTY
72807: LIST
72808: LIST
72809: PUSH
72810: LD_INT 5
72812: PUSH
72813: LD_INT 0
72815: PUSH
72816: EMPTY
72817: LIST
72818: LIST
72819: PUSH
72820: LD_INT 5
72822: PUSH
72823: LD_INT 1
72825: PUSH
72826: EMPTY
72827: LIST
72828: LIST
72829: PUSH
72830: LD_INT 4
72832: PUSH
72833: LD_INT 1
72835: PUSH
72836: EMPTY
72837: LIST
72838: LIST
72839: PUSH
72840: LD_INT 3
72842: PUSH
72843: LD_INT 0
72845: PUSH
72846: EMPTY
72847: LIST
72848: LIST
72849: PUSH
72850: LD_INT 3
72852: PUSH
72853: LD_INT 1
72855: NEG
72856: PUSH
72857: EMPTY
72858: LIST
72859: LIST
72860: PUSH
72861: LD_INT 3
72863: PUSH
72864: LD_INT 2
72866: NEG
72867: PUSH
72868: EMPTY
72869: LIST
72870: LIST
72871: PUSH
72872: LD_INT 5
72874: PUSH
72875: LD_INT 2
72877: PUSH
72878: EMPTY
72879: LIST
72880: LIST
72881: PUSH
72882: LD_INT 3
72884: PUSH
72885: LD_INT 3
72887: PUSH
72888: EMPTY
72889: LIST
72890: LIST
72891: PUSH
72892: LD_INT 3
72894: PUSH
72895: LD_INT 2
72897: PUSH
72898: EMPTY
72899: LIST
72900: LIST
72901: PUSH
72902: LD_INT 4
72904: PUSH
72905: LD_INT 3
72907: PUSH
72908: EMPTY
72909: LIST
72910: LIST
72911: PUSH
72912: LD_INT 4
72914: PUSH
72915: LD_INT 4
72917: PUSH
72918: EMPTY
72919: LIST
72920: LIST
72921: PUSH
72922: LD_INT 3
72924: PUSH
72925: LD_INT 4
72927: PUSH
72928: EMPTY
72929: LIST
72930: LIST
72931: PUSH
72932: LD_INT 2
72934: PUSH
72935: LD_INT 3
72937: PUSH
72938: EMPTY
72939: LIST
72940: LIST
72941: PUSH
72942: LD_INT 2
72944: PUSH
72945: LD_INT 2
72947: PUSH
72948: EMPTY
72949: LIST
72950: LIST
72951: PUSH
72952: LD_INT 4
72954: PUSH
72955: LD_INT 2
72957: PUSH
72958: EMPTY
72959: LIST
72960: LIST
72961: PUSH
72962: LD_INT 2
72964: PUSH
72965: LD_INT 4
72967: PUSH
72968: EMPTY
72969: LIST
72970: LIST
72971: PUSH
72972: LD_INT 0
72974: PUSH
72975: LD_INT 4
72977: PUSH
72978: EMPTY
72979: LIST
72980: LIST
72981: PUSH
72982: LD_INT 0
72984: PUSH
72985: LD_INT 3
72987: PUSH
72988: EMPTY
72989: LIST
72990: LIST
72991: PUSH
72992: LD_INT 1
72994: PUSH
72995: LD_INT 4
72997: PUSH
72998: EMPTY
72999: LIST
73000: LIST
73001: PUSH
73002: LD_INT 1
73004: PUSH
73005: LD_INT 5
73007: PUSH
73008: EMPTY
73009: LIST
73010: LIST
73011: PUSH
73012: LD_INT 0
73014: PUSH
73015: LD_INT 5
73017: PUSH
73018: EMPTY
73019: LIST
73020: LIST
73021: PUSH
73022: LD_INT 1
73024: NEG
73025: PUSH
73026: LD_INT 4
73028: PUSH
73029: EMPTY
73030: LIST
73031: LIST
73032: PUSH
73033: LD_INT 1
73035: NEG
73036: PUSH
73037: LD_INT 3
73039: PUSH
73040: EMPTY
73041: LIST
73042: LIST
73043: PUSH
73044: LD_INT 2
73046: PUSH
73047: LD_INT 5
73049: PUSH
73050: EMPTY
73051: LIST
73052: LIST
73053: PUSH
73054: LD_INT 2
73056: NEG
73057: PUSH
73058: LD_INT 3
73060: PUSH
73061: EMPTY
73062: LIST
73063: LIST
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: LIST
73069: LIST
73070: LIST
73071: LIST
73072: LIST
73073: LIST
73074: LIST
73075: LIST
73076: LIST
73077: LIST
73078: LIST
73079: LIST
73080: LIST
73081: LIST
73082: LIST
73083: LIST
73084: LIST
73085: LIST
73086: LIST
73087: LIST
73088: LIST
73089: LIST
73090: LIST
73091: LIST
73092: LIST
73093: LIST
73094: LIST
73095: LIST
73096: LIST
73097: LIST
73098: LIST
73099: LIST
73100: LIST
73101: LIST
73102: LIST
73103: LIST
73104: LIST
73105: LIST
73106: LIST
73107: LIST
73108: LIST
73109: LIST
73110: LIST
73111: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
73112: LD_ADDR_VAR 0 34
73116: PUSH
73117: LD_INT 0
73119: PUSH
73120: LD_INT 4
73122: NEG
73123: PUSH
73124: EMPTY
73125: LIST
73126: LIST
73127: PUSH
73128: LD_INT 0
73130: PUSH
73131: LD_INT 5
73133: NEG
73134: PUSH
73135: EMPTY
73136: LIST
73137: LIST
73138: PUSH
73139: LD_INT 1
73141: PUSH
73142: LD_INT 4
73144: NEG
73145: PUSH
73146: EMPTY
73147: LIST
73148: LIST
73149: PUSH
73150: LD_INT 1
73152: PUSH
73153: LD_INT 3
73155: NEG
73156: PUSH
73157: EMPTY
73158: LIST
73159: LIST
73160: PUSH
73161: LD_INT 0
73163: PUSH
73164: LD_INT 3
73166: NEG
73167: PUSH
73168: EMPTY
73169: LIST
73170: LIST
73171: PUSH
73172: LD_INT 1
73174: NEG
73175: PUSH
73176: LD_INT 4
73178: NEG
73179: PUSH
73180: EMPTY
73181: LIST
73182: LIST
73183: PUSH
73184: LD_INT 1
73186: NEG
73187: PUSH
73188: LD_INT 5
73190: NEG
73191: PUSH
73192: EMPTY
73193: LIST
73194: LIST
73195: PUSH
73196: LD_INT 2
73198: PUSH
73199: LD_INT 3
73201: NEG
73202: PUSH
73203: EMPTY
73204: LIST
73205: LIST
73206: PUSH
73207: LD_INT 2
73209: NEG
73210: PUSH
73211: LD_INT 5
73213: NEG
73214: PUSH
73215: EMPTY
73216: LIST
73217: LIST
73218: PUSH
73219: LD_INT 3
73221: PUSH
73222: LD_INT 0
73224: PUSH
73225: EMPTY
73226: LIST
73227: LIST
73228: PUSH
73229: LD_INT 3
73231: PUSH
73232: LD_INT 1
73234: NEG
73235: PUSH
73236: EMPTY
73237: LIST
73238: LIST
73239: PUSH
73240: LD_INT 4
73242: PUSH
73243: LD_INT 0
73245: PUSH
73246: EMPTY
73247: LIST
73248: LIST
73249: PUSH
73250: LD_INT 4
73252: PUSH
73253: LD_INT 1
73255: PUSH
73256: EMPTY
73257: LIST
73258: LIST
73259: PUSH
73260: LD_INT 3
73262: PUSH
73263: LD_INT 1
73265: PUSH
73266: EMPTY
73267: LIST
73268: LIST
73269: PUSH
73270: LD_INT 2
73272: PUSH
73273: LD_INT 0
73275: PUSH
73276: EMPTY
73277: LIST
73278: LIST
73279: PUSH
73280: LD_INT 2
73282: PUSH
73283: LD_INT 1
73285: NEG
73286: PUSH
73287: EMPTY
73288: LIST
73289: LIST
73290: PUSH
73291: LD_INT 2
73293: PUSH
73294: LD_INT 2
73296: NEG
73297: PUSH
73298: EMPTY
73299: LIST
73300: LIST
73301: PUSH
73302: LD_INT 4
73304: PUSH
73305: LD_INT 2
73307: PUSH
73308: EMPTY
73309: LIST
73310: LIST
73311: PUSH
73312: LD_INT 4
73314: PUSH
73315: LD_INT 4
73317: PUSH
73318: EMPTY
73319: LIST
73320: LIST
73321: PUSH
73322: LD_INT 4
73324: PUSH
73325: LD_INT 3
73327: PUSH
73328: EMPTY
73329: LIST
73330: LIST
73331: PUSH
73332: LD_INT 5
73334: PUSH
73335: LD_INT 4
73337: PUSH
73338: EMPTY
73339: LIST
73340: LIST
73341: PUSH
73342: LD_INT 5
73344: PUSH
73345: LD_INT 5
73347: PUSH
73348: EMPTY
73349: LIST
73350: LIST
73351: PUSH
73352: LD_INT 4
73354: PUSH
73355: LD_INT 5
73357: PUSH
73358: EMPTY
73359: LIST
73360: LIST
73361: PUSH
73362: LD_INT 3
73364: PUSH
73365: LD_INT 4
73367: PUSH
73368: EMPTY
73369: LIST
73370: LIST
73371: PUSH
73372: LD_INT 3
73374: PUSH
73375: LD_INT 3
73377: PUSH
73378: EMPTY
73379: LIST
73380: LIST
73381: PUSH
73382: LD_INT 5
73384: PUSH
73385: LD_INT 3
73387: PUSH
73388: EMPTY
73389: LIST
73390: LIST
73391: PUSH
73392: LD_INT 3
73394: PUSH
73395: LD_INT 5
73397: PUSH
73398: EMPTY
73399: LIST
73400: LIST
73401: PUSH
73402: LD_INT 0
73404: PUSH
73405: LD_INT 3
73407: PUSH
73408: EMPTY
73409: LIST
73410: LIST
73411: PUSH
73412: LD_INT 0
73414: PUSH
73415: LD_INT 2
73417: PUSH
73418: EMPTY
73419: LIST
73420: LIST
73421: PUSH
73422: LD_INT 1
73424: PUSH
73425: LD_INT 3
73427: PUSH
73428: EMPTY
73429: LIST
73430: LIST
73431: PUSH
73432: LD_INT 1
73434: PUSH
73435: LD_INT 4
73437: PUSH
73438: EMPTY
73439: LIST
73440: LIST
73441: PUSH
73442: LD_INT 0
73444: PUSH
73445: LD_INT 4
73447: PUSH
73448: EMPTY
73449: LIST
73450: LIST
73451: PUSH
73452: LD_INT 1
73454: NEG
73455: PUSH
73456: LD_INT 3
73458: PUSH
73459: EMPTY
73460: LIST
73461: LIST
73462: PUSH
73463: LD_INT 1
73465: NEG
73466: PUSH
73467: LD_INT 2
73469: PUSH
73470: EMPTY
73471: LIST
73472: LIST
73473: PUSH
73474: LD_INT 2
73476: PUSH
73477: LD_INT 4
73479: PUSH
73480: EMPTY
73481: LIST
73482: LIST
73483: PUSH
73484: LD_INT 2
73486: NEG
73487: PUSH
73488: LD_INT 2
73490: PUSH
73491: EMPTY
73492: LIST
73493: LIST
73494: PUSH
73495: LD_INT 4
73497: NEG
73498: PUSH
73499: LD_INT 0
73501: PUSH
73502: EMPTY
73503: LIST
73504: LIST
73505: PUSH
73506: LD_INT 4
73508: NEG
73509: PUSH
73510: LD_INT 1
73512: NEG
73513: PUSH
73514: EMPTY
73515: LIST
73516: LIST
73517: PUSH
73518: LD_INT 3
73520: NEG
73521: PUSH
73522: LD_INT 0
73524: PUSH
73525: EMPTY
73526: LIST
73527: LIST
73528: PUSH
73529: LD_INT 3
73531: NEG
73532: PUSH
73533: LD_INT 1
73535: PUSH
73536: EMPTY
73537: LIST
73538: LIST
73539: PUSH
73540: LD_INT 4
73542: NEG
73543: PUSH
73544: LD_INT 1
73546: PUSH
73547: EMPTY
73548: LIST
73549: LIST
73550: PUSH
73551: LD_INT 5
73553: NEG
73554: PUSH
73555: LD_INT 0
73557: PUSH
73558: EMPTY
73559: LIST
73560: LIST
73561: PUSH
73562: LD_INT 5
73564: NEG
73565: PUSH
73566: LD_INT 1
73568: NEG
73569: PUSH
73570: EMPTY
73571: LIST
73572: LIST
73573: PUSH
73574: LD_INT 5
73576: NEG
73577: PUSH
73578: LD_INT 2
73580: NEG
73581: PUSH
73582: EMPTY
73583: LIST
73584: LIST
73585: PUSH
73586: LD_INT 3
73588: NEG
73589: PUSH
73590: LD_INT 2
73592: PUSH
73593: EMPTY
73594: LIST
73595: LIST
73596: PUSH
73597: EMPTY
73598: LIST
73599: LIST
73600: LIST
73601: LIST
73602: LIST
73603: LIST
73604: LIST
73605: LIST
73606: LIST
73607: LIST
73608: LIST
73609: LIST
73610: LIST
73611: LIST
73612: LIST
73613: LIST
73614: LIST
73615: LIST
73616: LIST
73617: LIST
73618: LIST
73619: LIST
73620: LIST
73621: LIST
73622: LIST
73623: LIST
73624: LIST
73625: LIST
73626: LIST
73627: LIST
73628: LIST
73629: LIST
73630: LIST
73631: LIST
73632: LIST
73633: LIST
73634: LIST
73635: LIST
73636: LIST
73637: LIST
73638: LIST
73639: LIST
73640: LIST
73641: LIST
73642: LIST
73643: ST_TO_ADDR
// end ; end ;
73644: GO 73647
73646: POP
// case btype of b_depot , b_warehouse :
73647: LD_VAR 0 1
73651: PUSH
73652: LD_INT 0
73654: DOUBLE
73655: EQUAL
73656: IFTRUE 73666
73658: LD_INT 1
73660: DOUBLE
73661: EQUAL
73662: IFTRUE 73666
73664: GO 73867
73666: POP
// case nation of nation_american :
73667: LD_VAR 0 5
73671: PUSH
73672: LD_INT 1
73674: DOUBLE
73675: EQUAL
73676: IFTRUE 73680
73678: GO 73736
73680: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73681: LD_ADDR_VAR 0 9
73685: PUSH
73686: LD_VAR 0 11
73690: PUSH
73691: LD_VAR 0 12
73695: PUSH
73696: LD_VAR 0 13
73700: PUSH
73701: LD_VAR 0 14
73705: PUSH
73706: LD_VAR 0 15
73710: PUSH
73711: LD_VAR 0 16
73715: PUSH
73716: EMPTY
73717: LIST
73718: LIST
73719: LIST
73720: LIST
73721: LIST
73722: LIST
73723: PUSH
73724: LD_VAR 0 4
73728: PUSH
73729: LD_INT 1
73731: PLUS
73732: ARRAY
73733: ST_TO_ADDR
73734: GO 73865
73736: LD_INT 2
73738: DOUBLE
73739: EQUAL
73740: IFTRUE 73744
73742: GO 73800
73744: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73745: LD_ADDR_VAR 0 9
73749: PUSH
73750: LD_VAR 0 17
73754: PUSH
73755: LD_VAR 0 18
73759: PUSH
73760: LD_VAR 0 19
73764: PUSH
73765: LD_VAR 0 20
73769: PUSH
73770: LD_VAR 0 21
73774: PUSH
73775: LD_VAR 0 22
73779: PUSH
73780: EMPTY
73781: LIST
73782: LIST
73783: LIST
73784: LIST
73785: LIST
73786: LIST
73787: PUSH
73788: LD_VAR 0 4
73792: PUSH
73793: LD_INT 1
73795: PLUS
73796: ARRAY
73797: ST_TO_ADDR
73798: GO 73865
73800: LD_INT 3
73802: DOUBLE
73803: EQUAL
73804: IFTRUE 73808
73806: GO 73864
73808: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73809: LD_ADDR_VAR 0 9
73813: PUSH
73814: LD_VAR 0 23
73818: PUSH
73819: LD_VAR 0 24
73823: PUSH
73824: LD_VAR 0 25
73828: PUSH
73829: LD_VAR 0 26
73833: PUSH
73834: LD_VAR 0 27
73838: PUSH
73839: LD_VAR 0 28
73843: PUSH
73844: EMPTY
73845: LIST
73846: LIST
73847: LIST
73848: LIST
73849: LIST
73850: LIST
73851: PUSH
73852: LD_VAR 0 4
73856: PUSH
73857: LD_INT 1
73859: PLUS
73860: ARRAY
73861: ST_TO_ADDR
73862: GO 73865
73864: POP
73865: GO 74420
73867: LD_INT 2
73869: DOUBLE
73870: EQUAL
73871: IFTRUE 73881
73873: LD_INT 3
73875: DOUBLE
73876: EQUAL
73877: IFTRUE 73881
73879: GO 73937
73881: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73882: LD_ADDR_VAR 0 9
73886: PUSH
73887: LD_VAR 0 29
73891: PUSH
73892: LD_VAR 0 30
73896: PUSH
73897: LD_VAR 0 31
73901: PUSH
73902: LD_VAR 0 32
73906: PUSH
73907: LD_VAR 0 33
73911: PUSH
73912: LD_VAR 0 34
73916: PUSH
73917: EMPTY
73918: LIST
73919: LIST
73920: LIST
73921: LIST
73922: LIST
73923: LIST
73924: PUSH
73925: LD_VAR 0 4
73929: PUSH
73930: LD_INT 1
73932: PLUS
73933: ARRAY
73934: ST_TO_ADDR
73935: GO 74420
73937: LD_INT 16
73939: DOUBLE
73940: EQUAL
73941: IFTRUE 73999
73943: LD_INT 17
73945: DOUBLE
73946: EQUAL
73947: IFTRUE 73999
73949: LD_INT 18
73951: DOUBLE
73952: EQUAL
73953: IFTRUE 73999
73955: LD_INT 19
73957: DOUBLE
73958: EQUAL
73959: IFTRUE 73999
73961: LD_INT 22
73963: DOUBLE
73964: EQUAL
73965: IFTRUE 73999
73967: LD_INT 20
73969: DOUBLE
73970: EQUAL
73971: IFTRUE 73999
73973: LD_INT 21
73975: DOUBLE
73976: EQUAL
73977: IFTRUE 73999
73979: LD_INT 23
73981: DOUBLE
73982: EQUAL
73983: IFTRUE 73999
73985: LD_INT 24
73987: DOUBLE
73988: EQUAL
73989: IFTRUE 73999
73991: LD_INT 25
73993: DOUBLE
73994: EQUAL
73995: IFTRUE 73999
73997: GO 74055
73999: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
74000: LD_ADDR_VAR 0 9
74004: PUSH
74005: LD_VAR 0 35
74009: PUSH
74010: LD_VAR 0 36
74014: PUSH
74015: LD_VAR 0 37
74019: PUSH
74020: LD_VAR 0 38
74024: PUSH
74025: LD_VAR 0 39
74029: PUSH
74030: LD_VAR 0 40
74034: PUSH
74035: EMPTY
74036: LIST
74037: LIST
74038: LIST
74039: LIST
74040: LIST
74041: LIST
74042: PUSH
74043: LD_VAR 0 4
74047: PUSH
74048: LD_INT 1
74050: PLUS
74051: ARRAY
74052: ST_TO_ADDR
74053: GO 74420
74055: LD_INT 6
74057: DOUBLE
74058: EQUAL
74059: IFTRUE 74111
74061: LD_INT 7
74063: DOUBLE
74064: EQUAL
74065: IFTRUE 74111
74067: LD_INT 8
74069: DOUBLE
74070: EQUAL
74071: IFTRUE 74111
74073: LD_INT 13
74075: DOUBLE
74076: EQUAL
74077: IFTRUE 74111
74079: LD_INT 12
74081: DOUBLE
74082: EQUAL
74083: IFTRUE 74111
74085: LD_INT 15
74087: DOUBLE
74088: EQUAL
74089: IFTRUE 74111
74091: LD_INT 11
74093: DOUBLE
74094: EQUAL
74095: IFTRUE 74111
74097: LD_INT 14
74099: DOUBLE
74100: EQUAL
74101: IFTRUE 74111
74103: LD_INT 10
74105: DOUBLE
74106: EQUAL
74107: IFTRUE 74111
74109: GO 74167
74111: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
74112: LD_ADDR_VAR 0 9
74116: PUSH
74117: LD_VAR 0 41
74121: PUSH
74122: LD_VAR 0 42
74126: PUSH
74127: LD_VAR 0 43
74131: PUSH
74132: LD_VAR 0 44
74136: PUSH
74137: LD_VAR 0 45
74141: PUSH
74142: LD_VAR 0 46
74146: PUSH
74147: EMPTY
74148: LIST
74149: LIST
74150: LIST
74151: LIST
74152: LIST
74153: LIST
74154: PUSH
74155: LD_VAR 0 4
74159: PUSH
74160: LD_INT 1
74162: PLUS
74163: ARRAY
74164: ST_TO_ADDR
74165: GO 74420
74167: LD_INT 36
74169: DOUBLE
74170: EQUAL
74171: IFTRUE 74175
74173: GO 74231
74175: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
74176: LD_ADDR_VAR 0 9
74180: PUSH
74181: LD_VAR 0 47
74185: PUSH
74186: LD_VAR 0 48
74190: PUSH
74191: LD_VAR 0 49
74195: PUSH
74196: LD_VAR 0 50
74200: PUSH
74201: LD_VAR 0 51
74205: PUSH
74206: LD_VAR 0 52
74210: PUSH
74211: EMPTY
74212: LIST
74213: LIST
74214: LIST
74215: LIST
74216: LIST
74217: LIST
74218: PUSH
74219: LD_VAR 0 4
74223: PUSH
74224: LD_INT 1
74226: PLUS
74227: ARRAY
74228: ST_TO_ADDR
74229: GO 74420
74231: LD_INT 4
74233: DOUBLE
74234: EQUAL
74235: IFTRUE 74257
74237: LD_INT 5
74239: DOUBLE
74240: EQUAL
74241: IFTRUE 74257
74243: LD_INT 34
74245: DOUBLE
74246: EQUAL
74247: IFTRUE 74257
74249: LD_INT 37
74251: DOUBLE
74252: EQUAL
74253: IFTRUE 74257
74255: GO 74313
74257: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
74258: LD_ADDR_VAR 0 9
74262: PUSH
74263: LD_VAR 0 53
74267: PUSH
74268: LD_VAR 0 54
74272: PUSH
74273: LD_VAR 0 55
74277: PUSH
74278: LD_VAR 0 56
74282: PUSH
74283: LD_VAR 0 57
74287: PUSH
74288: LD_VAR 0 58
74292: PUSH
74293: EMPTY
74294: LIST
74295: LIST
74296: LIST
74297: LIST
74298: LIST
74299: LIST
74300: PUSH
74301: LD_VAR 0 4
74305: PUSH
74306: LD_INT 1
74308: PLUS
74309: ARRAY
74310: ST_TO_ADDR
74311: GO 74420
74313: LD_INT 31
74315: DOUBLE
74316: EQUAL
74317: IFTRUE 74363
74319: LD_INT 32
74321: DOUBLE
74322: EQUAL
74323: IFTRUE 74363
74325: LD_INT 33
74327: DOUBLE
74328: EQUAL
74329: IFTRUE 74363
74331: LD_INT 27
74333: DOUBLE
74334: EQUAL
74335: IFTRUE 74363
74337: LD_INT 26
74339: DOUBLE
74340: EQUAL
74341: IFTRUE 74363
74343: LD_INT 28
74345: DOUBLE
74346: EQUAL
74347: IFTRUE 74363
74349: LD_INT 29
74351: DOUBLE
74352: EQUAL
74353: IFTRUE 74363
74355: LD_INT 30
74357: DOUBLE
74358: EQUAL
74359: IFTRUE 74363
74361: GO 74419
74363: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
74364: LD_ADDR_VAR 0 9
74368: PUSH
74369: LD_VAR 0 59
74373: PUSH
74374: LD_VAR 0 60
74378: PUSH
74379: LD_VAR 0 61
74383: PUSH
74384: LD_VAR 0 62
74388: PUSH
74389: LD_VAR 0 63
74393: PUSH
74394: LD_VAR 0 64
74398: PUSH
74399: EMPTY
74400: LIST
74401: LIST
74402: LIST
74403: LIST
74404: LIST
74405: LIST
74406: PUSH
74407: LD_VAR 0 4
74411: PUSH
74412: LD_INT 1
74414: PLUS
74415: ARRAY
74416: ST_TO_ADDR
74417: GO 74420
74419: POP
// temp_list2 = [ ] ;
74420: LD_ADDR_VAR 0 10
74424: PUSH
74425: EMPTY
74426: ST_TO_ADDR
// for i in temp_list do
74427: LD_ADDR_VAR 0 8
74431: PUSH
74432: LD_VAR 0 9
74436: PUSH
74437: FOR_IN
74438: IFFALSE 74490
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74440: LD_ADDR_VAR 0 10
74444: PUSH
74445: LD_VAR 0 10
74449: PUSH
74450: LD_VAR 0 8
74454: PUSH
74455: LD_INT 1
74457: ARRAY
74458: PUSH
74459: LD_VAR 0 2
74463: PLUS
74464: PUSH
74465: LD_VAR 0 8
74469: PUSH
74470: LD_INT 2
74472: ARRAY
74473: PUSH
74474: LD_VAR 0 3
74478: PLUS
74479: PUSH
74480: EMPTY
74481: LIST
74482: LIST
74483: PUSH
74484: EMPTY
74485: LIST
74486: ADD
74487: ST_TO_ADDR
74488: GO 74437
74490: POP
74491: POP
// result = temp_list2 ;
74492: LD_ADDR_VAR 0 7
74496: PUSH
74497: LD_VAR 0 10
74501: ST_TO_ADDR
// end ;
74502: LD_VAR 0 7
74506: RET
// export function EnemyInRange ( unit , dist ) ; begin
74507: LD_INT 0
74509: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74510: LD_ADDR_VAR 0 3
74514: PUSH
74515: LD_VAR 0 1
74519: PPUSH
74520: CALL_OW 255
74524: PPUSH
74525: LD_VAR 0 1
74529: PPUSH
74530: CALL_OW 250
74534: PPUSH
74535: LD_VAR 0 1
74539: PPUSH
74540: CALL_OW 251
74544: PPUSH
74545: LD_VAR 0 2
74549: PPUSH
74550: CALL 47903 0 4
74554: PUSH
74555: LD_INT 4
74557: ARRAY
74558: ST_TO_ADDR
// end ;
74559: LD_VAR 0 3
74563: RET
// export function PlayerSeeMe ( unit ) ; begin
74564: LD_INT 0
74566: PPUSH
// result := See ( your_side , unit ) ;
74567: LD_ADDR_VAR 0 2
74571: PUSH
74572: LD_OWVAR 2
74576: PPUSH
74577: LD_VAR 0 1
74581: PPUSH
74582: CALL_OW 292
74586: ST_TO_ADDR
// end ;
74587: LD_VAR 0 2
74591: RET
// export function ReverseDir ( unit ) ; begin
74592: LD_INT 0
74594: PPUSH
// if not unit then
74595: LD_VAR 0 1
74599: NOT
74600: IFFALSE 74604
// exit ;
74602: GO 74627
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74604: LD_ADDR_VAR 0 2
74608: PUSH
74609: LD_VAR 0 1
74613: PPUSH
74614: CALL_OW 254
74618: PUSH
74619: LD_INT 3
74621: PLUS
74622: PUSH
74623: LD_INT 6
74625: MOD
74626: ST_TO_ADDR
// end ;
74627: LD_VAR 0 2
74631: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
74632: LD_INT 0
74634: PPUSH
74635: PPUSH
74636: PPUSH
74637: PPUSH
74638: PPUSH
// if not hexes then
74639: LD_VAR 0 2
74643: NOT
74644: IFFALSE 74648
// exit ;
74646: GO 74796
// dist := 9999 ;
74648: LD_ADDR_VAR 0 5
74652: PUSH
74653: LD_INT 9999
74655: ST_TO_ADDR
// for i = 1 to hexes do
74656: LD_ADDR_VAR 0 4
74660: PUSH
74661: DOUBLE
74662: LD_INT 1
74664: DEC
74665: ST_TO_ADDR
74666: LD_VAR 0 2
74670: PUSH
74671: FOR_TO
74672: IFFALSE 74784
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
74674: LD_VAR 0 1
74678: PPUSH
74679: LD_VAR 0 2
74683: PUSH
74684: LD_VAR 0 4
74688: ARRAY
74689: PUSH
74690: LD_INT 1
74692: ARRAY
74693: PPUSH
74694: LD_VAR 0 2
74698: PUSH
74699: LD_VAR 0 4
74703: ARRAY
74704: PUSH
74705: LD_INT 2
74707: ARRAY
74708: PPUSH
74709: CALL_OW 297
74713: PUSH
74714: LD_VAR 0 5
74718: LESS
74719: IFFALSE 74782
// begin hex := hexes [ i ] ;
74721: LD_ADDR_VAR 0 7
74725: PUSH
74726: LD_VAR 0 2
74730: PUSH
74731: LD_VAR 0 4
74735: ARRAY
74736: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74737: LD_ADDR_VAR 0 5
74741: PUSH
74742: LD_VAR 0 1
74746: PPUSH
74747: LD_VAR 0 2
74751: PUSH
74752: LD_VAR 0 4
74756: ARRAY
74757: PUSH
74758: LD_INT 1
74760: ARRAY
74761: PPUSH
74762: LD_VAR 0 2
74766: PUSH
74767: LD_VAR 0 4
74771: ARRAY
74772: PUSH
74773: LD_INT 2
74775: ARRAY
74776: PPUSH
74777: CALL_OW 297
74781: ST_TO_ADDR
// end ; end ;
74782: GO 74671
74784: POP
74785: POP
// result := hex ;
74786: LD_ADDR_VAR 0 3
74790: PUSH
74791: LD_VAR 0 7
74795: ST_TO_ADDR
// end ;
74796: LD_VAR 0 3
74800: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74801: LD_INT 0
74803: PPUSH
74804: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74805: LD_VAR 0 1
74809: NOT
74810: PUSH
74811: LD_VAR 0 1
74815: PUSH
74816: LD_INT 21
74818: PUSH
74819: LD_INT 2
74821: PUSH
74822: EMPTY
74823: LIST
74824: LIST
74825: PUSH
74826: LD_INT 23
74828: PUSH
74829: LD_INT 2
74831: PUSH
74832: EMPTY
74833: LIST
74834: LIST
74835: PUSH
74836: EMPTY
74837: LIST
74838: LIST
74839: PPUSH
74840: CALL_OW 69
74844: IN
74845: NOT
74846: OR
74847: IFFALSE 74851
// exit ;
74849: GO 74898
// for i = 1 to 3 do
74851: LD_ADDR_VAR 0 3
74855: PUSH
74856: DOUBLE
74857: LD_INT 1
74859: DEC
74860: ST_TO_ADDR
74861: LD_INT 3
74863: PUSH
74864: FOR_TO
74865: IFFALSE 74896
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74867: LD_VAR 0 1
74871: PPUSH
74872: CALL_OW 250
74876: PPUSH
74877: LD_VAR 0 1
74881: PPUSH
74882: CALL_OW 251
74886: PPUSH
74887: LD_INT 1
74889: PPUSH
74890: CALL_OW 453
74894: GO 74864
74896: POP
74897: POP
// end ;
74898: LD_VAR 0 2
74902: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74903: LD_INT 0
74905: PPUSH
74906: PPUSH
74907: PPUSH
74908: PPUSH
74909: PPUSH
74910: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
74911: LD_VAR 0 1
74915: NOT
74916: PUSH
74917: LD_VAR 0 2
74921: NOT
74922: OR
74923: PUSH
74924: LD_VAR 0 1
74928: PPUSH
74929: CALL_OW 314
74933: OR
74934: IFFALSE 74938
// exit ;
74936: GO 75379
// x := GetX ( enemy_unit ) ;
74938: LD_ADDR_VAR 0 7
74942: PUSH
74943: LD_VAR 0 2
74947: PPUSH
74948: CALL_OW 250
74952: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74953: LD_ADDR_VAR 0 8
74957: PUSH
74958: LD_VAR 0 2
74962: PPUSH
74963: CALL_OW 251
74967: ST_TO_ADDR
// if not x or not y then
74968: LD_VAR 0 7
74972: NOT
74973: PUSH
74974: LD_VAR 0 8
74978: NOT
74979: OR
74980: IFFALSE 74984
// exit ;
74982: GO 75379
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74984: LD_ADDR_VAR 0 6
74988: PUSH
74989: LD_VAR 0 7
74993: PPUSH
74994: LD_INT 0
74996: PPUSH
74997: LD_INT 4
74999: PPUSH
75000: CALL_OW 272
75004: PUSH
75005: LD_VAR 0 8
75009: PPUSH
75010: LD_INT 0
75012: PPUSH
75013: LD_INT 4
75015: PPUSH
75016: CALL_OW 273
75020: PUSH
75021: EMPTY
75022: LIST
75023: LIST
75024: PUSH
75025: LD_VAR 0 7
75029: PPUSH
75030: LD_INT 1
75032: PPUSH
75033: LD_INT 4
75035: PPUSH
75036: CALL_OW 272
75040: PUSH
75041: LD_VAR 0 8
75045: PPUSH
75046: LD_INT 1
75048: PPUSH
75049: LD_INT 4
75051: PPUSH
75052: CALL_OW 273
75056: PUSH
75057: EMPTY
75058: LIST
75059: LIST
75060: PUSH
75061: LD_VAR 0 7
75065: PPUSH
75066: LD_INT 2
75068: PPUSH
75069: LD_INT 4
75071: PPUSH
75072: CALL_OW 272
75076: PUSH
75077: LD_VAR 0 8
75081: PPUSH
75082: LD_INT 2
75084: PPUSH
75085: LD_INT 4
75087: PPUSH
75088: CALL_OW 273
75092: PUSH
75093: EMPTY
75094: LIST
75095: LIST
75096: PUSH
75097: LD_VAR 0 7
75101: PPUSH
75102: LD_INT 3
75104: PPUSH
75105: LD_INT 4
75107: PPUSH
75108: CALL_OW 272
75112: PUSH
75113: LD_VAR 0 8
75117: PPUSH
75118: LD_INT 3
75120: PPUSH
75121: LD_INT 4
75123: PPUSH
75124: CALL_OW 273
75128: PUSH
75129: EMPTY
75130: LIST
75131: LIST
75132: PUSH
75133: LD_VAR 0 7
75137: PPUSH
75138: LD_INT 4
75140: PPUSH
75141: LD_INT 4
75143: PPUSH
75144: CALL_OW 272
75148: PUSH
75149: LD_VAR 0 8
75153: PPUSH
75154: LD_INT 4
75156: PPUSH
75157: LD_INT 4
75159: PPUSH
75160: CALL_OW 273
75164: PUSH
75165: EMPTY
75166: LIST
75167: LIST
75168: PUSH
75169: LD_VAR 0 7
75173: PPUSH
75174: LD_INT 5
75176: PPUSH
75177: LD_INT 4
75179: PPUSH
75180: CALL_OW 272
75184: PUSH
75185: LD_VAR 0 8
75189: PPUSH
75190: LD_INT 5
75192: PPUSH
75193: LD_INT 4
75195: PPUSH
75196: CALL_OW 273
75200: PUSH
75201: EMPTY
75202: LIST
75203: LIST
75204: PUSH
75205: EMPTY
75206: LIST
75207: LIST
75208: LIST
75209: LIST
75210: LIST
75211: LIST
75212: ST_TO_ADDR
// for i = tmp downto 1 do
75213: LD_ADDR_VAR 0 4
75217: PUSH
75218: DOUBLE
75219: LD_VAR 0 6
75223: INC
75224: ST_TO_ADDR
75225: LD_INT 1
75227: PUSH
75228: FOR_DOWNTO
75229: IFFALSE 75330
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
75231: LD_VAR 0 6
75235: PUSH
75236: LD_VAR 0 4
75240: ARRAY
75241: PUSH
75242: LD_INT 1
75244: ARRAY
75245: PPUSH
75246: LD_VAR 0 6
75250: PUSH
75251: LD_VAR 0 4
75255: ARRAY
75256: PUSH
75257: LD_INT 2
75259: ARRAY
75260: PPUSH
75261: CALL_OW 488
75265: NOT
75266: PUSH
75267: LD_VAR 0 6
75271: PUSH
75272: LD_VAR 0 4
75276: ARRAY
75277: PUSH
75278: LD_INT 1
75280: ARRAY
75281: PPUSH
75282: LD_VAR 0 6
75286: PUSH
75287: LD_VAR 0 4
75291: ARRAY
75292: PUSH
75293: LD_INT 2
75295: ARRAY
75296: PPUSH
75297: CALL_OW 428
75301: PUSH
75302: LD_INT 0
75304: NONEQUAL
75305: OR
75306: IFFALSE 75328
// tmp := Delete ( tmp , i ) ;
75308: LD_ADDR_VAR 0 6
75312: PUSH
75313: LD_VAR 0 6
75317: PPUSH
75318: LD_VAR 0 4
75322: PPUSH
75323: CALL_OW 3
75327: ST_TO_ADDR
75328: GO 75228
75330: POP
75331: POP
// j := GetClosestHex ( unit , tmp ) ;
75332: LD_ADDR_VAR 0 5
75336: PUSH
75337: LD_VAR 0 1
75341: PPUSH
75342: LD_VAR 0 6
75346: PPUSH
75347: CALL 74632 0 2
75351: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
75352: LD_VAR 0 1
75356: PPUSH
75357: LD_VAR 0 5
75361: PUSH
75362: LD_INT 1
75364: ARRAY
75365: PPUSH
75366: LD_VAR 0 5
75370: PUSH
75371: LD_INT 2
75373: ARRAY
75374: PPUSH
75375: CALL_OW 111
// end ;
75379: LD_VAR 0 3
75383: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75384: LD_INT 0
75386: PPUSH
75387: PPUSH
75388: PPUSH
// uc_side = 0 ;
75389: LD_ADDR_OWVAR 20
75393: PUSH
75394: LD_INT 0
75396: ST_TO_ADDR
// uc_nation = 0 ;
75397: LD_ADDR_OWVAR 21
75401: PUSH
75402: LD_INT 0
75404: ST_TO_ADDR
// InitHc_All ( ) ;
75405: CALL_OW 584
// InitVc ;
75409: CALL_OW 20
// if mastodonts then
75413: LD_VAR 0 6
75417: IFFALSE 75484
// for i = 1 to mastodonts do
75419: LD_ADDR_VAR 0 11
75423: PUSH
75424: DOUBLE
75425: LD_INT 1
75427: DEC
75428: ST_TO_ADDR
75429: LD_VAR 0 6
75433: PUSH
75434: FOR_TO
75435: IFFALSE 75482
// begin vc_chassis := 31 ;
75437: LD_ADDR_OWVAR 37
75441: PUSH
75442: LD_INT 31
75444: ST_TO_ADDR
// vc_control := control_rider ;
75445: LD_ADDR_OWVAR 38
75449: PUSH
75450: LD_INT 4
75452: ST_TO_ADDR
// animal := CreateVehicle ;
75453: LD_ADDR_VAR 0 12
75457: PUSH
75458: CALL_OW 45
75462: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75463: LD_VAR 0 12
75467: PPUSH
75468: LD_VAR 0 8
75472: PPUSH
75473: LD_INT 0
75475: PPUSH
75476: CALL 77672 0 3
// end ;
75480: GO 75434
75482: POP
75483: POP
// if horses then
75484: LD_VAR 0 5
75488: IFFALSE 75555
// for i = 1 to horses do
75490: LD_ADDR_VAR 0 11
75494: PUSH
75495: DOUBLE
75496: LD_INT 1
75498: DEC
75499: ST_TO_ADDR
75500: LD_VAR 0 5
75504: PUSH
75505: FOR_TO
75506: IFFALSE 75553
// begin hc_class := 21 ;
75508: LD_ADDR_OWVAR 28
75512: PUSH
75513: LD_INT 21
75515: ST_TO_ADDR
// hc_gallery :=  ;
75516: LD_ADDR_OWVAR 33
75520: PUSH
75521: LD_STRING 
75523: ST_TO_ADDR
// animal := CreateHuman ;
75524: LD_ADDR_VAR 0 12
75528: PUSH
75529: CALL_OW 44
75533: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75534: LD_VAR 0 12
75538: PPUSH
75539: LD_VAR 0 8
75543: PPUSH
75544: LD_INT 0
75546: PPUSH
75547: CALL 77672 0 3
// end ;
75551: GO 75505
75553: POP
75554: POP
// if birds then
75555: LD_VAR 0 1
75559: IFFALSE 75626
// for i = 1 to birds do
75561: LD_ADDR_VAR 0 11
75565: PUSH
75566: DOUBLE
75567: LD_INT 1
75569: DEC
75570: ST_TO_ADDR
75571: LD_VAR 0 1
75575: PUSH
75576: FOR_TO
75577: IFFALSE 75624
// begin hc_class = 18 ;
75579: LD_ADDR_OWVAR 28
75583: PUSH
75584: LD_INT 18
75586: ST_TO_ADDR
// hc_gallery =  ;
75587: LD_ADDR_OWVAR 33
75591: PUSH
75592: LD_STRING 
75594: ST_TO_ADDR
// animal := CreateHuman ;
75595: LD_ADDR_VAR 0 12
75599: PUSH
75600: CALL_OW 44
75604: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75605: LD_VAR 0 12
75609: PPUSH
75610: LD_VAR 0 8
75614: PPUSH
75615: LD_INT 0
75617: PPUSH
75618: CALL 77672 0 3
// end ;
75622: GO 75576
75624: POP
75625: POP
// if tigers then
75626: LD_VAR 0 2
75630: IFFALSE 75714
// for i = 1 to tigers do
75632: LD_ADDR_VAR 0 11
75636: PUSH
75637: DOUBLE
75638: LD_INT 1
75640: DEC
75641: ST_TO_ADDR
75642: LD_VAR 0 2
75646: PUSH
75647: FOR_TO
75648: IFFALSE 75712
// begin hc_class = class_tiger ;
75650: LD_ADDR_OWVAR 28
75654: PUSH
75655: LD_INT 14
75657: ST_TO_ADDR
// hc_gallery =  ;
75658: LD_ADDR_OWVAR 33
75662: PUSH
75663: LD_STRING 
75665: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75666: LD_ADDR_OWVAR 35
75670: PUSH
75671: LD_INT 7
75673: NEG
75674: PPUSH
75675: LD_INT 7
75677: PPUSH
75678: CALL_OW 12
75682: ST_TO_ADDR
// animal := CreateHuman ;
75683: LD_ADDR_VAR 0 12
75687: PUSH
75688: CALL_OW 44
75692: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75693: LD_VAR 0 12
75697: PPUSH
75698: LD_VAR 0 8
75702: PPUSH
75703: LD_INT 0
75705: PPUSH
75706: CALL 77672 0 3
// end ;
75710: GO 75647
75712: POP
75713: POP
// if apemans then
75714: LD_VAR 0 3
75718: IFFALSE 75841
// for i = 1 to apemans do
75720: LD_ADDR_VAR 0 11
75724: PUSH
75725: DOUBLE
75726: LD_INT 1
75728: DEC
75729: ST_TO_ADDR
75730: LD_VAR 0 3
75734: PUSH
75735: FOR_TO
75736: IFFALSE 75839
// begin hc_class = class_apeman ;
75738: LD_ADDR_OWVAR 28
75742: PUSH
75743: LD_INT 12
75745: ST_TO_ADDR
// hc_gallery =  ;
75746: LD_ADDR_OWVAR 33
75750: PUSH
75751: LD_STRING 
75753: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75754: LD_ADDR_OWVAR 35
75758: PUSH
75759: LD_INT 2
75761: NEG
75762: PPUSH
75763: LD_INT 2
75765: PPUSH
75766: CALL_OW 12
75770: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75771: LD_ADDR_OWVAR 31
75775: PUSH
75776: LD_INT 1
75778: PPUSH
75779: LD_INT 3
75781: PPUSH
75782: CALL_OW 12
75786: PUSH
75787: LD_INT 1
75789: PPUSH
75790: LD_INT 3
75792: PPUSH
75793: CALL_OW 12
75797: PUSH
75798: LD_INT 0
75800: PUSH
75801: LD_INT 0
75803: PUSH
75804: EMPTY
75805: LIST
75806: LIST
75807: LIST
75808: LIST
75809: ST_TO_ADDR
// animal := CreateHuman ;
75810: LD_ADDR_VAR 0 12
75814: PUSH
75815: CALL_OW 44
75819: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75820: LD_VAR 0 12
75824: PPUSH
75825: LD_VAR 0 8
75829: PPUSH
75830: LD_INT 0
75832: PPUSH
75833: CALL 77672 0 3
// end ;
75837: GO 75735
75839: POP
75840: POP
// if enchidnas then
75841: LD_VAR 0 4
75845: IFFALSE 75912
// for i = 1 to enchidnas do
75847: LD_ADDR_VAR 0 11
75851: PUSH
75852: DOUBLE
75853: LD_INT 1
75855: DEC
75856: ST_TO_ADDR
75857: LD_VAR 0 4
75861: PUSH
75862: FOR_TO
75863: IFFALSE 75910
// begin hc_class = 13 ;
75865: LD_ADDR_OWVAR 28
75869: PUSH
75870: LD_INT 13
75872: ST_TO_ADDR
// hc_gallery =  ;
75873: LD_ADDR_OWVAR 33
75877: PUSH
75878: LD_STRING 
75880: ST_TO_ADDR
// animal := CreateHuman ;
75881: LD_ADDR_VAR 0 12
75885: PUSH
75886: CALL_OW 44
75890: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75891: LD_VAR 0 12
75895: PPUSH
75896: LD_VAR 0 8
75900: PPUSH
75901: LD_INT 0
75903: PPUSH
75904: CALL 77672 0 3
// end ;
75908: GO 75862
75910: POP
75911: POP
// if fishes then
75912: LD_VAR 0 7
75916: IFFALSE 75983
// for i = 1 to fishes do
75918: LD_ADDR_VAR 0 11
75922: PUSH
75923: DOUBLE
75924: LD_INT 1
75926: DEC
75927: ST_TO_ADDR
75928: LD_VAR 0 7
75932: PUSH
75933: FOR_TO
75934: IFFALSE 75981
// begin hc_class = 20 ;
75936: LD_ADDR_OWVAR 28
75940: PUSH
75941: LD_INT 20
75943: ST_TO_ADDR
// hc_gallery =  ;
75944: LD_ADDR_OWVAR 33
75948: PUSH
75949: LD_STRING 
75951: ST_TO_ADDR
// animal := CreateHuman ;
75952: LD_ADDR_VAR 0 12
75956: PUSH
75957: CALL_OW 44
75961: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75962: LD_VAR 0 12
75966: PPUSH
75967: LD_VAR 0 9
75971: PPUSH
75972: LD_INT 0
75974: PPUSH
75975: CALL 77672 0 3
// end ;
75979: GO 75933
75981: POP
75982: POP
// end ;
75983: LD_VAR 0 10
75987: RET
// export function WantHeal ( sci , unit ) ; begin
75988: LD_INT 0
75990: PPUSH
// if GetTaskList ( sci ) > 0 then
75991: LD_VAR 0 1
75995: PPUSH
75996: CALL_OW 437
76000: PUSH
76001: LD_INT 0
76003: GREATER
76004: IFFALSE 76074
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76006: LD_VAR 0 1
76010: PPUSH
76011: CALL_OW 437
76015: PUSH
76016: LD_INT 1
76018: ARRAY
76019: PUSH
76020: LD_INT 1
76022: ARRAY
76023: PUSH
76024: LD_STRING l
76026: EQUAL
76027: PUSH
76028: LD_VAR 0 1
76032: PPUSH
76033: CALL_OW 437
76037: PUSH
76038: LD_INT 1
76040: ARRAY
76041: PUSH
76042: LD_INT 4
76044: ARRAY
76045: PUSH
76046: LD_VAR 0 2
76050: EQUAL
76051: AND
76052: IFFALSE 76064
// result := true else
76054: LD_ADDR_VAR 0 3
76058: PUSH
76059: LD_INT 1
76061: ST_TO_ADDR
76062: GO 76072
// result := false ;
76064: LD_ADDR_VAR 0 3
76068: PUSH
76069: LD_INT 0
76071: ST_TO_ADDR
// end else
76072: GO 76082
// result := false ;
76074: LD_ADDR_VAR 0 3
76078: PUSH
76079: LD_INT 0
76081: ST_TO_ADDR
// end ;
76082: LD_VAR 0 3
76086: RET
// export function HealTarget ( sci ) ; begin
76087: LD_INT 0
76089: PPUSH
// if not sci then
76090: LD_VAR 0 1
76094: NOT
76095: IFFALSE 76099
// exit ;
76097: GO 76164
// result := 0 ;
76099: LD_ADDR_VAR 0 2
76103: PUSH
76104: LD_INT 0
76106: ST_TO_ADDR
// if GetTaskList ( sci ) then
76107: LD_VAR 0 1
76111: PPUSH
76112: CALL_OW 437
76116: IFFALSE 76164
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76118: LD_VAR 0 1
76122: PPUSH
76123: CALL_OW 437
76127: PUSH
76128: LD_INT 1
76130: ARRAY
76131: PUSH
76132: LD_INT 1
76134: ARRAY
76135: PUSH
76136: LD_STRING l
76138: EQUAL
76139: IFFALSE 76164
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76141: LD_ADDR_VAR 0 2
76145: PUSH
76146: LD_VAR 0 1
76150: PPUSH
76151: CALL_OW 437
76155: PUSH
76156: LD_INT 1
76158: ARRAY
76159: PUSH
76160: LD_INT 4
76162: ARRAY
76163: ST_TO_ADDR
// end ;
76164: LD_VAR 0 2
76168: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76169: LD_INT 0
76171: PPUSH
76172: PPUSH
76173: PPUSH
76174: PPUSH
// if not base_units then
76175: LD_VAR 0 1
76179: NOT
76180: IFFALSE 76184
// exit ;
76182: GO 76271
// result := false ;
76184: LD_ADDR_VAR 0 2
76188: PUSH
76189: LD_INT 0
76191: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76192: LD_ADDR_VAR 0 5
76196: PUSH
76197: LD_VAR 0 1
76201: PPUSH
76202: LD_INT 21
76204: PUSH
76205: LD_INT 3
76207: PUSH
76208: EMPTY
76209: LIST
76210: LIST
76211: PPUSH
76212: CALL_OW 72
76216: ST_TO_ADDR
// if not tmp then
76217: LD_VAR 0 5
76221: NOT
76222: IFFALSE 76226
// exit ;
76224: GO 76271
// for i in tmp do
76226: LD_ADDR_VAR 0 3
76230: PUSH
76231: LD_VAR 0 5
76235: PUSH
76236: FOR_IN
76237: IFFALSE 76269
// begin result := EnemyInRange ( i , 22 ) ;
76239: LD_ADDR_VAR 0 2
76243: PUSH
76244: LD_VAR 0 3
76248: PPUSH
76249: LD_INT 22
76251: PPUSH
76252: CALL 74507 0 2
76256: ST_TO_ADDR
// if result then
76257: LD_VAR 0 2
76261: IFFALSE 76267
// exit ;
76263: POP
76264: POP
76265: GO 76271
// end ;
76267: GO 76236
76269: POP
76270: POP
// end ;
76271: LD_VAR 0 2
76275: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
76276: LD_INT 0
76278: PPUSH
76279: PPUSH
// if not units then
76280: LD_VAR 0 1
76284: NOT
76285: IFFALSE 76289
// exit ;
76287: GO 76359
// result := [ ] ;
76289: LD_ADDR_VAR 0 3
76293: PUSH
76294: EMPTY
76295: ST_TO_ADDR
// for i in units do
76296: LD_ADDR_VAR 0 4
76300: PUSH
76301: LD_VAR 0 1
76305: PUSH
76306: FOR_IN
76307: IFFALSE 76357
// if GetTag ( i ) = tag then
76309: LD_VAR 0 4
76313: PPUSH
76314: CALL_OW 110
76318: PUSH
76319: LD_VAR 0 2
76323: EQUAL
76324: IFFALSE 76355
// result := Replace ( result , result + 1 , i ) ;
76326: LD_ADDR_VAR 0 3
76330: PUSH
76331: LD_VAR 0 3
76335: PPUSH
76336: LD_VAR 0 3
76340: PUSH
76341: LD_INT 1
76343: PLUS
76344: PPUSH
76345: LD_VAR 0 4
76349: PPUSH
76350: CALL_OW 1
76354: ST_TO_ADDR
76355: GO 76306
76357: POP
76358: POP
// end ;
76359: LD_VAR 0 3
76363: RET
// export function IsDriver ( un ) ; begin
76364: LD_INT 0
76366: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76367: LD_ADDR_VAR 0 2
76371: PUSH
76372: LD_VAR 0 1
76376: PUSH
76377: LD_INT 55
76379: PUSH
76380: EMPTY
76381: LIST
76382: PPUSH
76383: CALL_OW 69
76387: IN
76388: ST_TO_ADDR
// end ;
76389: LD_VAR 0 2
76393: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76394: LD_INT 0
76396: PPUSH
76397: PPUSH
// list := [ ] ;
76398: LD_ADDR_VAR 0 5
76402: PUSH
76403: EMPTY
76404: ST_TO_ADDR
// case d of 0 :
76405: LD_VAR 0 3
76409: PUSH
76410: LD_INT 0
76412: DOUBLE
76413: EQUAL
76414: IFTRUE 76418
76416: GO 76551
76418: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76419: LD_ADDR_VAR 0 5
76423: PUSH
76424: LD_VAR 0 1
76428: PUSH
76429: LD_INT 4
76431: MINUS
76432: PUSH
76433: LD_VAR 0 2
76437: PUSH
76438: LD_INT 4
76440: MINUS
76441: PUSH
76442: LD_INT 2
76444: PUSH
76445: EMPTY
76446: LIST
76447: LIST
76448: LIST
76449: PUSH
76450: LD_VAR 0 1
76454: PUSH
76455: LD_INT 3
76457: MINUS
76458: PUSH
76459: LD_VAR 0 2
76463: PUSH
76464: LD_INT 1
76466: PUSH
76467: EMPTY
76468: LIST
76469: LIST
76470: LIST
76471: PUSH
76472: LD_VAR 0 1
76476: PUSH
76477: LD_INT 4
76479: PLUS
76480: PUSH
76481: LD_VAR 0 2
76485: PUSH
76486: LD_INT 4
76488: PUSH
76489: EMPTY
76490: LIST
76491: LIST
76492: LIST
76493: PUSH
76494: LD_VAR 0 1
76498: PUSH
76499: LD_INT 3
76501: PLUS
76502: PUSH
76503: LD_VAR 0 2
76507: PUSH
76508: LD_INT 3
76510: PLUS
76511: PUSH
76512: LD_INT 5
76514: PUSH
76515: EMPTY
76516: LIST
76517: LIST
76518: LIST
76519: PUSH
76520: LD_VAR 0 1
76524: PUSH
76525: LD_VAR 0 2
76529: PUSH
76530: LD_INT 4
76532: PLUS
76533: PUSH
76534: LD_INT 0
76536: PUSH
76537: EMPTY
76538: LIST
76539: LIST
76540: LIST
76541: PUSH
76542: EMPTY
76543: LIST
76544: LIST
76545: LIST
76546: LIST
76547: LIST
76548: ST_TO_ADDR
// end ; 1 :
76549: GO 77249
76551: LD_INT 1
76553: DOUBLE
76554: EQUAL
76555: IFTRUE 76559
76557: GO 76692
76559: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76560: LD_ADDR_VAR 0 5
76564: PUSH
76565: LD_VAR 0 1
76569: PUSH
76570: LD_VAR 0 2
76574: PUSH
76575: LD_INT 4
76577: MINUS
76578: PUSH
76579: LD_INT 3
76581: PUSH
76582: EMPTY
76583: LIST
76584: LIST
76585: LIST
76586: PUSH
76587: LD_VAR 0 1
76591: PUSH
76592: LD_INT 3
76594: MINUS
76595: PUSH
76596: LD_VAR 0 2
76600: PUSH
76601: LD_INT 3
76603: MINUS
76604: PUSH
76605: LD_INT 2
76607: PUSH
76608: EMPTY
76609: LIST
76610: LIST
76611: LIST
76612: PUSH
76613: LD_VAR 0 1
76617: PUSH
76618: LD_INT 4
76620: MINUS
76621: PUSH
76622: LD_VAR 0 2
76626: PUSH
76627: LD_INT 1
76629: PUSH
76630: EMPTY
76631: LIST
76632: LIST
76633: LIST
76634: PUSH
76635: LD_VAR 0 1
76639: PUSH
76640: LD_VAR 0 2
76644: PUSH
76645: LD_INT 3
76647: PLUS
76648: PUSH
76649: LD_INT 0
76651: PUSH
76652: EMPTY
76653: LIST
76654: LIST
76655: LIST
76656: PUSH
76657: LD_VAR 0 1
76661: PUSH
76662: LD_INT 4
76664: PLUS
76665: PUSH
76666: LD_VAR 0 2
76670: PUSH
76671: LD_INT 4
76673: PLUS
76674: PUSH
76675: LD_INT 5
76677: PUSH
76678: EMPTY
76679: LIST
76680: LIST
76681: LIST
76682: PUSH
76683: EMPTY
76684: LIST
76685: LIST
76686: LIST
76687: LIST
76688: LIST
76689: ST_TO_ADDR
// end ; 2 :
76690: GO 77249
76692: LD_INT 2
76694: DOUBLE
76695: EQUAL
76696: IFTRUE 76700
76698: GO 76829
76700: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76701: LD_ADDR_VAR 0 5
76705: PUSH
76706: LD_VAR 0 1
76710: PUSH
76711: LD_VAR 0 2
76715: PUSH
76716: LD_INT 3
76718: MINUS
76719: PUSH
76720: LD_INT 3
76722: PUSH
76723: EMPTY
76724: LIST
76725: LIST
76726: LIST
76727: PUSH
76728: LD_VAR 0 1
76732: PUSH
76733: LD_INT 4
76735: PLUS
76736: PUSH
76737: LD_VAR 0 2
76741: PUSH
76742: LD_INT 4
76744: PUSH
76745: EMPTY
76746: LIST
76747: LIST
76748: LIST
76749: PUSH
76750: LD_VAR 0 1
76754: PUSH
76755: LD_VAR 0 2
76759: PUSH
76760: LD_INT 4
76762: PLUS
76763: PUSH
76764: LD_INT 0
76766: PUSH
76767: EMPTY
76768: LIST
76769: LIST
76770: LIST
76771: PUSH
76772: LD_VAR 0 1
76776: PUSH
76777: LD_INT 3
76779: MINUS
76780: PUSH
76781: LD_VAR 0 2
76785: PUSH
76786: LD_INT 1
76788: PUSH
76789: EMPTY
76790: LIST
76791: LIST
76792: LIST
76793: PUSH
76794: LD_VAR 0 1
76798: PUSH
76799: LD_INT 4
76801: MINUS
76802: PUSH
76803: LD_VAR 0 2
76807: PUSH
76808: LD_INT 4
76810: MINUS
76811: PUSH
76812: LD_INT 2
76814: PUSH
76815: EMPTY
76816: LIST
76817: LIST
76818: LIST
76819: PUSH
76820: EMPTY
76821: LIST
76822: LIST
76823: LIST
76824: LIST
76825: LIST
76826: ST_TO_ADDR
// end ; 3 :
76827: GO 77249
76829: LD_INT 3
76831: DOUBLE
76832: EQUAL
76833: IFTRUE 76837
76835: GO 76970
76837: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76838: LD_ADDR_VAR 0 5
76842: PUSH
76843: LD_VAR 0 1
76847: PUSH
76848: LD_INT 3
76850: PLUS
76851: PUSH
76852: LD_VAR 0 2
76856: PUSH
76857: LD_INT 4
76859: PUSH
76860: EMPTY
76861: LIST
76862: LIST
76863: LIST
76864: PUSH
76865: LD_VAR 0 1
76869: PUSH
76870: LD_INT 4
76872: PLUS
76873: PUSH
76874: LD_VAR 0 2
76878: PUSH
76879: LD_INT 4
76881: PLUS
76882: PUSH
76883: LD_INT 5
76885: PUSH
76886: EMPTY
76887: LIST
76888: LIST
76889: LIST
76890: PUSH
76891: LD_VAR 0 1
76895: PUSH
76896: LD_INT 4
76898: MINUS
76899: PUSH
76900: LD_VAR 0 2
76904: PUSH
76905: LD_INT 1
76907: PUSH
76908: EMPTY
76909: LIST
76910: LIST
76911: LIST
76912: PUSH
76913: LD_VAR 0 1
76917: PUSH
76918: LD_VAR 0 2
76922: PUSH
76923: LD_INT 4
76925: MINUS
76926: PUSH
76927: LD_INT 3
76929: PUSH
76930: EMPTY
76931: LIST
76932: LIST
76933: LIST
76934: PUSH
76935: LD_VAR 0 1
76939: PUSH
76940: LD_INT 3
76942: MINUS
76943: PUSH
76944: LD_VAR 0 2
76948: PUSH
76949: LD_INT 3
76951: MINUS
76952: PUSH
76953: LD_INT 2
76955: PUSH
76956: EMPTY
76957: LIST
76958: LIST
76959: LIST
76960: PUSH
76961: EMPTY
76962: LIST
76963: LIST
76964: LIST
76965: LIST
76966: LIST
76967: ST_TO_ADDR
// end ; 4 :
76968: GO 77249
76970: LD_INT 4
76972: DOUBLE
76973: EQUAL
76974: IFTRUE 76978
76976: GO 77111
76978: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76979: LD_ADDR_VAR 0 5
76983: PUSH
76984: LD_VAR 0 1
76988: PUSH
76989: LD_VAR 0 2
76993: PUSH
76994: LD_INT 4
76996: PLUS
76997: PUSH
76998: LD_INT 0
77000: PUSH
77001: EMPTY
77002: LIST
77003: LIST
77004: LIST
77005: PUSH
77006: LD_VAR 0 1
77010: PUSH
77011: LD_INT 3
77013: PLUS
77014: PUSH
77015: LD_VAR 0 2
77019: PUSH
77020: LD_INT 3
77022: PLUS
77023: PUSH
77024: LD_INT 5
77026: PUSH
77027: EMPTY
77028: LIST
77029: LIST
77030: LIST
77031: PUSH
77032: LD_VAR 0 1
77036: PUSH
77037: LD_INT 4
77039: PLUS
77040: PUSH
77041: LD_VAR 0 2
77045: PUSH
77046: LD_INT 4
77048: PUSH
77049: EMPTY
77050: LIST
77051: LIST
77052: LIST
77053: PUSH
77054: LD_VAR 0 1
77058: PUSH
77059: LD_VAR 0 2
77063: PUSH
77064: LD_INT 3
77066: MINUS
77067: PUSH
77068: LD_INT 3
77070: PUSH
77071: EMPTY
77072: LIST
77073: LIST
77074: LIST
77075: PUSH
77076: LD_VAR 0 1
77080: PUSH
77081: LD_INT 4
77083: MINUS
77084: PUSH
77085: LD_VAR 0 2
77089: PUSH
77090: LD_INT 4
77092: MINUS
77093: PUSH
77094: LD_INT 2
77096: PUSH
77097: EMPTY
77098: LIST
77099: LIST
77100: LIST
77101: PUSH
77102: EMPTY
77103: LIST
77104: LIST
77105: LIST
77106: LIST
77107: LIST
77108: ST_TO_ADDR
// end ; 5 :
77109: GO 77249
77111: LD_INT 5
77113: DOUBLE
77114: EQUAL
77115: IFTRUE 77119
77117: GO 77248
77119: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77120: LD_ADDR_VAR 0 5
77124: PUSH
77125: LD_VAR 0 1
77129: PUSH
77130: LD_INT 4
77132: MINUS
77133: PUSH
77134: LD_VAR 0 2
77138: PUSH
77139: LD_INT 1
77141: PUSH
77142: EMPTY
77143: LIST
77144: LIST
77145: LIST
77146: PUSH
77147: LD_VAR 0 1
77151: PUSH
77152: LD_VAR 0 2
77156: PUSH
77157: LD_INT 4
77159: MINUS
77160: PUSH
77161: LD_INT 3
77163: PUSH
77164: EMPTY
77165: LIST
77166: LIST
77167: LIST
77168: PUSH
77169: LD_VAR 0 1
77173: PUSH
77174: LD_INT 4
77176: PLUS
77177: PUSH
77178: LD_VAR 0 2
77182: PUSH
77183: LD_INT 4
77185: PLUS
77186: PUSH
77187: LD_INT 5
77189: PUSH
77190: EMPTY
77191: LIST
77192: LIST
77193: LIST
77194: PUSH
77195: LD_VAR 0 1
77199: PUSH
77200: LD_INT 3
77202: PLUS
77203: PUSH
77204: LD_VAR 0 2
77208: PUSH
77209: LD_INT 4
77211: PUSH
77212: EMPTY
77213: LIST
77214: LIST
77215: LIST
77216: PUSH
77217: LD_VAR 0 1
77221: PUSH
77222: LD_VAR 0 2
77226: PUSH
77227: LD_INT 3
77229: PLUS
77230: PUSH
77231: LD_INT 0
77233: PUSH
77234: EMPTY
77235: LIST
77236: LIST
77237: LIST
77238: PUSH
77239: EMPTY
77240: LIST
77241: LIST
77242: LIST
77243: LIST
77244: LIST
77245: ST_TO_ADDR
// end ; end ;
77246: GO 77249
77248: POP
// result := list ;
77249: LD_ADDR_VAR 0 4
77253: PUSH
77254: LD_VAR 0 5
77258: ST_TO_ADDR
// end ;
77259: LD_VAR 0 4
77263: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77264: LD_INT 0
77266: PPUSH
77267: PPUSH
77268: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77269: LD_VAR 0 1
77273: NOT
77274: PUSH
77275: LD_VAR 0 2
77279: PUSH
77280: LD_INT 1
77282: PUSH
77283: LD_INT 2
77285: PUSH
77286: LD_INT 3
77288: PUSH
77289: LD_INT 4
77291: PUSH
77292: EMPTY
77293: LIST
77294: LIST
77295: LIST
77296: LIST
77297: IN
77298: NOT
77299: OR
77300: IFFALSE 77304
// exit ;
77302: GO 77396
// tmp := [ ] ;
77304: LD_ADDR_VAR 0 5
77308: PUSH
77309: EMPTY
77310: ST_TO_ADDR
// for i in units do
77311: LD_ADDR_VAR 0 4
77315: PUSH
77316: LD_VAR 0 1
77320: PUSH
77321: FOR_IN
77322: IFFALSE 77365
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
77324: LD_ADDR_VAR 0 5
77328: PUSH
77329: LD_VAR 0 5
77333: PPUSH
77334: LD_VAR 0 5
77338: PUSH
77339: LD_INT 1
77341: PLUS
77342: PPUSH
77343: LD_VAR 0 4
77347: PPUSH
77348: LD_VAR 0 2
77352: PPUSH
77353: CALL_OW 259
77357: PPUSH
77358: CALL_OW 2
77362: ST_TO_ADDR
77363: GO 77321
77365: POP
77366: POP
// if not tmp then
77367: LD_VAR 0 5
77371: NOT
77372: IFFALSE 77376
// exit ;
77374: GO 77396
// result := SortListByListDesc ( units , tmp ) ;
77376: LD_ADDR_VAR 0 3
77380: PUSH
77381: LD_VAR 0 1
77385: PPUSH
77386: LD_VAR 0 5
77390: PPUSH
77391: CALL_OW 77
77395: ST_TO_ADDR
// end ;
77396: LD_VAR 0 3
77400: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77401: LD_INT 0
77403: PPUSH
77404: PPUSH
77405: PPUSH
// result := false ;
77406: LD_ADDR_VAR 0 3
77410: PUSH
77411: LD_INT 0
77413: ST_TO_ADDR
// x := GetX ( building ) ;
77414: LD_ADDR_VAR 0 4
77418: PUSH
77419: LD_VAR 0 2
77423: PPUSH
77424: CALL_OW 250
77428: ST_TO_ADDR
// y := GetY ( building ) ;
77429: LD_ADDR_VAR 0 5
77433: PUSH
77434: LD_VAR 0 2
77438: PPUSH
77439: CALL_OW 251
77443: ST_TO_ADDR
// if not building or not x or not y then
77444: LD_VAR 0 2
77448: NOT
77449: PUSH
77450: LD_VAR 0 4
77454: NOT
77455: OR
77456: PUSH
77457: LD_VAR 0 5
77461: NOT
77462: OR
77463: IFFALSE 77467
// exit ;
77465: GO 77559
// if GetTaskList ( unit ) then
77467: LD_VAR 0 1
77471: PPUSH
77472: CALL_OW 437
77476: IFFALSE 77559
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77478: LD_STRING e
77480: PUSH
77481: LD_VAR 0 1
77485: PPUSH
77486: CALL_OW 437
77490: PUSH
77491: LD_INT 1
77493: ARRAY
77494: PUSH
77495: LD_INT 1
77497: ARRAY
77498: EQUAL
77499: PUSH
77500: LD_VAR 0 4
77504: PUSH
77505: LD_VAR 0 1
77509: PPUSH
77510: CALL_OW 437
77514: PUSH
77515: LD_INT 1
77517: ARRAY
77518: PUSH
77519: LD_INT 2
77521: ARRAY
77522: EQUAL
77523: AND
77524: PUSH
77525: LD_VAR 0 5
77529: PUSH
77530: LD_VAR 0 1
77534: PPUSH
77535: CALL_OW 437
77539: PUSH
77540: LD_INT 1
77542: ARRAY
77543: PUSH
77544: LD_INT 3
77546: ARRAY
77547: EQUAL
77548: AND
77549: IFFALSE 77559
// result := true end ;
77551: LD_ADDR_VAR 0 3
77555: PUSH
77556: LD_INT 1
77558: ST_TO_ADDR
// end ;
77559: LD_VAR 0 3
77563: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77564: LD_INT 0
77566: PPUSH
// result := false ;
77567: LD_ADDR_VAR 0 4
77571: PUSH
77572: LD_INT 0
77574: ST_TO_ADDR
// if GetTaskList ( unit ) then
77575: LD_VAR 0 1
77579: PPUSH
77580: CALL_OW 437
77584: IFFALSE 77667
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77586: LD_STRING M
77588: PUSH
77589: LD_VAR 0 1
77593: PPUSH
77594: CALL_OW 437
77598: PUSH
77599: LD_INT 1
77601: ARRAY
77602: PUSH
77603: LD_INT 1
77605: ARRAY
77606: EQUAL
77607: PUSH
77608: LD_VAR 0 2
77612: PUSH
77613: LD_VAR 0 1
77617: PPUSH
77618: CALL_OW 437
77622: PUSH
77623: LD_INT 1
77625: ARRAY
77626: PUSH
77627: LD_INT 2
77629: ARRAY
77630: EQUAL
77631: AND
77632: PUSH
77633: LD_VAR 0 3
77637: PUSH
77638: LD_VAR 0 1
77642: PPUSH
77643: CALL_OW 437
77647: PUSH
77648: LD_INT 1
77650: ARRAY
77651: PUSH
77652: LD_INT 3
77654: ARRAY
77655: EQUAL
77656: AND
77657: IFFALSE 77667
// result := true ;
77659: LD_ADDR_VAR 0 4
77663: PUSH
77664: LD_INT 1
77666: ST_TO_ADDR
// end ; end ;
77667: LD_VAR 0 4
77671: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77672: LD_INT 0
77674: PPUSH
77675: PPUSH
77676: PPUSH
77677: PPUSH
// if not unit or not area then
77678: LD_VAR 0 1
77682: NOT
77683: PUSH
77684: LD_VAR 0 2
77688: NOT
77689: OR
77690: IFFALSE 77694
// exit ;
77692: GO 77858
// tmp := AreaToList ( area , i ) ;
77694: LD_ADDR_VAR 0 6
77698: PUSH
77699: LD_VAR 0 2
77703: PPUSH
77704: LD_VAR 0 5
77708: PPUSH
77709: CALL_OW 517
77713: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77714: LD_ADDR_VAR 0 5
77718: PUSH
77719: DOUBLE
77720: LD_INT 1
77722: DEC
77723: ST_TO_ADDR
77724: LD_VAR 0 6
77728: PUSH
77729: LD_INT 1
77731: ARRAY
77732: PUSH
77733: FOR_TO
77734: IFFALSE 77856
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77736: LD_ADDR_VAR 0 7
77740: PUSH
77741: LD_VAR 0 6
77745: PUSH
77746: LD_INT 1
77748: ARRAY
77749: PUSH
77750: LD_VAR 0 5
77754: ARRAY
77755: PUSH
77756: LD_VAR 0 6
77760: PUSH
77761: LD_INT 2
77763: ARRAY
77764: PUSH
77765: LD_VAR 0 5
77769: ARRAY
77770: PUSH
77771: EMPTY
77772: LIST
77773: LIST
77774: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
77775: LD_VAR 0 7
77779: PUSH
77780: LD_INT 1
77782: ARRAY
77783: PPUSH
77784: LD_VAR 0 7
77788: PUSH
77789: LD_INT 2
77791: ARRAY
77792: PPUSH
77793: CALL_OW 428
77797: PUSH
77798: LD_INT 0
77800: EQUAL
77801: IFFALSE 77854
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77803: LD_VAR 0 1
77807: PPUSH
77808: LD_VAR 0 7
77812: PUSH
77813: LD_INT 1
77815: ARRAY
77816: PPUSH
77817: LD_VAR 0 7
77821: PUSH
77822: LD_INT 2
77824: ARRAY
77825: PPUSH
77826: LD_VAR 0 3
77830: PPUSH
77831: CALL_OW 48
// result := IsPlaced ( unit ) ;
77835: LD_ADDR_VAR 0 4
77839: PUSH
77840: LD_VAR 0 1
77844: PPUSH
77845: CALL_OW 305
77849: ST_TO_ADDR
// exit ;
77850: POP
77851: POP
77852: GO 77858
// end ; end ;
77854: GO 77733
77856: POP
77857: POP
// end ;
77858: LD_VAR 0 4
77862: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77863: LD_INT 0
77865: PPUSH
77866: PPUSH
77867: PPUSH
// if not side or side > 8 then
77868: LD_VAR 0 1
77872: NOT
77873: PUSH
77874: LD_VAR 0 1
77878: PUSH
77879: LD_INT 8
77881: GREATER
77882: OR
77883: IFFALSE 77887
// exit ;
77885: GO 78074
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77887: LD_ADDR_VAR 0 4
77891: PUSH
77892: LD_INT 22
77894: PUSH
77895: LD_VAR 0 1
77899: PUSH
77900: EMPTY
77901: LIST
77902: LIST
77903: PUSH
77904: LD_INT 21
77906: PUSH
77907: LD_INT 3
77909: PUSH
77910: EMPTY
77911: LIST
77912: LIST
77913: PUSH
77914: EMPTY
77915: LIST
77916: LIST
77917: PPUSH
77918: CALL_OW 69
77922: ST_TO_ADDR
// if not tmp then
77923: LD_VAR 0 4
77927: NOT
77928: IFFALSE 77932
// exit ;
77930: GO 78074
// enable_addtolog := true ;
77932: LD_ADDR_OWVAR 81
77936: PUSH
77937: LD_INT 1
77939: ST_TO_ADDR
// AddToLog ( [ ) ;
77940: LD_STRING [
77942: PPUSH
77943: CALL_OW 561
// for i in tmp do
77947: LD_ADDR_VAR 0 3
77951: PUSH
77952: LD_VAR 0 4
77956: PUSH
77957: FOR_IN
77958: IFFALSE 78065
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77960: LD_STRING [
77962: PUSH
77963: LD_VAR 0 3
77967: PPUSH
77968: CALL_OW 266
77972: STR
77973: PUSH
77974: LD_STRING , 
77976: STR
77977: PUSH
77978: LD_VAR 0 3
77982: PPUSH
77983: CALL_OW 250
77987: STR
77988: PUSH
77989: LD_STRING , 
77991: STR
77992: PUSH
77993: LD_VAR 0 3
77997: PPUSH
77998: CALL_OW 251
78002: STR
78003: PUSH
78004: LD_STRING , 
78006: STR
78007: PUSH
78008: LD_VAR 0 3
78012: PPUSH
78013: CALL_OW 254
78017: STR
78018: PUSH
78019: LD_STRING , 
78021: STR
78022: PUSH
78023: LD_VAR 0 3
78027: PPUSH
78028: LD_INT 1
78030: PPUSH
78031: CALL_OW 268
78035: STR
78036: PUSH
78037: LD_STRING , 
78039: STR
78040: PUSH
78041: LD_VAR 0 3
78045: PPUSH
78046: LD_INT 2
78048: PPUSH
78049: CALL_OW 268
78053: STR
78054: PUSH
78055: LD_STRING ],
78057: STR
78058: PPUSH
78059: CALL_OW 561
// end ;
78063: GO 77957
78065: POP
78066: POP
// AddToLog ( ]; ) ;
78067: LD_STRING ];
78069: PPUSH
78070: CALL_OW 561
// end ;
78074: LD_VAR 0 2
78078: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78079: LD_INT 0
78081: PPUSH
78082: PPUSH
78083: PPUSH
78084: PPUSH
78085: PPUSH
// if not area or not rate or not max then
78086: LD_VAR 0 1
78090: NOT
78091: PUSH
78092: LD_VAR 0 2
78096: NOT
78097: OR
78098: PUSH
78099: LD_VAR 0 4
78103: NOT
78104: OR
78105: IFFALSE 78109
// exit ;
78107: GO 78301
// while 1 do
78109: LD_INT 1
78111: IFFALSE 78301
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78113: LD_ADDR_VAR 0 9
78117: PUSH
78118: LD_VAR 0 1
78122: PPUSH
78123: LD_INT 1
78125: PPUSH
78126: CALL_OW 287
78130: PUSH
78131: LD_INT 10
78133: MUL
78134: ST_TO_ADDR
// r := rate / 10 ;
78135: LD_ADDR_VAR 0 7
78139: PUSH
78140: LD_VAR 0 2
78144: PUSH
78145: LD_INT 10
78147: DIVREAL
78148: ST_TO_ADDR
// time := 1 1$00 ;
78149: LD_ADDR_VAR 0 8
78153: PUSH
78154: LD_INT 2100
78156: ST_TO_ADDR
// if amount < min then
78157: LD_VAR 0 9
78161: PUSH
78162: LD_VAR 0 3
78166: LESS
78167: IFFALSE 78185
// r := r * 2 else
78169: LD_ADDR_VAR 0 7
78173: PUSH
78174: LD_VAR 0 7
78178: PUSH
78179: LD_INT 2
78181: MUL
78182: ST_TO_ADDR
78183: GO 78211
// if amount > max then
78185: LD_VAR 0 9
78189: PUSH
78190: LD_VAR 0 4
78194: GREATER
78195: IFFALSE 78211
// r := r / 2 ;
78197: LD_ADDR_VAR 0 7
78201: PUSH
78202: LD_VAR 0 7
78206: PUSH
78207: LD_INT 2
78209: DIVREAL
78210: ST_TO_ADDR
// time := time / r ;
78211: LD_ADDR_VAR 0 8
78215: PUSH
78216: LD_VAR 0 8
78220: PUSH
78221: LD_VAR 0 7
78225: DIVREAL
78226: ST_TO_ADDR
// if time < 0 then
78227: LD_VAR 0 8
78231: PUSH
78232: LD_INT 0
78234: LESS
78235: IFFALSE 78252
// time := time * - 1 ;
78237: LD_ADDR_VAR 0 8
78241: PUSH
78242: LD_VAR 0 8
78246: PUSH
78247: LD_INT 1
78249: NEG
78250: MUL
78251: ST_TO_ADDR
// wait ( time ) ;
78252: LD_VAR 0 8
78256: PPUSH
78257: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
78261: LD_INT 35
78263: PPUSH
78264: LD_INT 875
78266: PPUSH
78267: CALL_OW 12
78271: PPUSH
78272: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78276: LD_INT 1
78278: PPUSH
78279: LD_INT 5
78281: PPUSH
78282: CALL_OW 12
78286: PPUSH
78287: LD_VAR 0 1
78291: PPUSH
78292: LD_INT 1
78294: PPUSH
78295: CALL_OW 55
// end ;
78299: GO 78109
// end ;
78301: LD_VAR 0 5
78305: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78306: LD_INT 0
78308: PPUSH
78309: PPUSH
78310: PPUSH
78311: PPUSH
78312: PPUSH
78313: PPUSH
78314: PPUSH
78315: PPUSH
// if not turrets or not factories then
78316: LD_VAR 0 1
78320: NOT
78321: PUSH
78322: LD_VAR 0 2
78326: NOT
78327: OR
78328: IFFALSE 78332
// exit ;
78330: GO 78639
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78332: LD_ADDR_VAR 0 10
78336: PUSH
78337: LD_INT 5
78339: PUSH
78340: LD_INT 6
78342: PUSH
78343: EMPTY
78344: LIST
78345: LIST
78346: PUSH
78347: LD_INT 2
78349: PUSH
78350: LD_INT 4
78352: PUSH
78353: EMPTY
78354: LIST
78355: LIST
78356: PUSH
78357: LD_INT 3
78359: PUSH
78360: LD_INT 5
78362: PUSH
78363: EMPTY
78364: LIST
78365: LIST
78366: PUSH
78367: EMPTY
78368: LIST
78369: LIST
78370: LIST
78371: PUSH
78372: LD_INT 24
78374: PUSH
78375: LD_INT 25
78377: PUSH
78378: EMPTY
78379: LIST
78380: LIST
78381: PUSH
78382: LD_INT 23
78384: PUSH
78385: LD_INT 27
78387: PUSH
78388: EMPTY
78389: LIST
78390: LIST
78391: PUSH
78392: EMPTY
78393: LIST
78394: LIST
78395: PUSH
78396: LD_INT 42
78398: PUSH
78399: LD_INT 43
78401: PUSH
78402: EMPTY
78403: LIST
78404: LIST
78405: PUSH
78406: LD_INT 44
78408: PUSH
78409: LD_INT 46
78411: PUSH
78412: EMPTY
78413: LIST
78414: LIST
78415: PUSH
78416: LD_INT 45
78418: PUSH
78419: LD_INT 47
78421: PUSH
78422: EMPTY
78423: LIST
78424: LIST
78425: PUSH
78426: EMPTY
78427: LIST
78428: LIST
78429: LIST
78430: PUSH
78431: EMPTY
78432: LIST
78433: LIST
78434: LIST
78435: ST_TO_ADDR
// result := [ ] ;
78436: LD_ADDR_VAR 0 3
78440: PUSH
78441: EMPTY
78442: ST_TO_ADDR
// for i in turrets do
78443: LD_ADDR_VAR 0 4
78447: PUSH
78448: LD_VAR 0 1
78452: PUSH
78453: FOR_IN
78454: IFFALSE 78637
// begin nat := GetNation ( i ) ;
78456: LD_ADDR_VAR 0 7
78460: PUSH
78461: LD_VAR 0 4
78465: PPUSH
78466: CALL_OW 248
78470: ST_TO_ADDR
// weapon := 0 ;
78471: LD_ADDR_VAR 0 8
78475: PUSH
78476: LD_INT 0
78478: ST_TO_ADDR
// if not nat then
78479: LD_VAR 0 7
78483: NOT
78484: IFFALSE 78488
// continue ;
78486: GO 78453
// for j in list [ nat ] do
78488: LD_ADDR_VAR 0 5
78492: PUSH
78493: LD_VAR 0 10
78497: PUSH
78498: LD_VAR 0 7
78502: ARRAY
78503: PUSH
78504: FOR_IN
78505: IFFALSE 78546
// if GetBWeapon ( i ) = j [ 1 ] then
78507: LD_VAR 0 4
78511: PPUSH
78512: CALL_OW 269
78516: PUSH
78517: LD_VAR 0 5
78521: PUSH
78522: LD_INT 1
78524: ARRAY
78525: EQUAL
78526: IFFALSE 78544
// begin weapon := j [ 2 ] ;
78528: LD_ADDR_VAR 0 8
78532: PUSH
78533: LD_VAR 0 5
78537: PUSH
78538: LD_INT 2
78540: ARRAY
78541: ST_TO_ADDR
// break ;
78542: GO 78546
// end ;
78544: GO 78504
78546: POP
78547: POP
// if not weapon then
78548: LD_VAR 0 8
78552: NOT
78553: IFFALSE 78557
// continue ;
78555: GO 78453
// for k in factories do
78557: LD_ADDR_VAR 0 6
78561: PUSH
78562: LD_VAR 0 2
78566: PUSH
78567: FOR_IN
78568: IFFALSE 78633
// begin weapons := AvailableWeaponList ( k ) ;
78570: LD_ADDR_VAR 0 9
78574: PUSH
78575: LD_VAR 0 6
78579: PPUSH
78580: CALL_OW 478
78584: ST_TO_ADDR
// if not weapons then
78585: LD_VAR 0 9
78589: NOT
78590: IFFALSE 78594
// continue ;
78592: GO 78567
// if weapon in weapons then
78594: LD_VAR 0 8
78598: PUSH
78599: LD_VAR 0 9
78603: IN
78604: IFFALSE 78631
// begin result := [ i , weapon ] ;
78606: LD_ADDR_VAR 0 3
78610: PUSH
78611: LD_VAR 0 4
78615: PUSH
78616: LD_VAR 0 8
78620: PUSH
78621: EMPTY
78622: LIST
78623: LIST
78624: ST_TO_ADDR
// exit ;
78625: POP
78626: POP
78627: POP
78628: POP
78629: GO 78639
// end ; end ;
78631: GO 78567
78633: POP
78634: POP
// end ;
78635: GO 78453
78637: POP
78638: POP
// end ;
78639: LD_VAR 0 3
78643: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78644: LD_INT 0
78646: PPUSH
// if not side or side > 8 then
78647: LD_VAR 0 3
78651: NOT
78652: PUSH
78653: LD_VAR 0 3
78657: PUSH
78658: LD_INT 8
78660: GREATER
78661: OR
78662: IFFALSE 78666
// exit ;
78664: GO 78725
// if not range then
78666: LD_VAR 0 4
78670: NOT
78671: IFFALSE 78682
// range := - 12 ;
78673: LD_ADDR_VAR 0 4
78677: PUSH
78678: LD_INT 12
78680: NEG
78681: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78682: LD_VAR 0 1
78686: PPUSH
78687: LD_VAR 0 2
78691: PPUSH
78692: LD_VAR 0 3
78696: PPUSH
78697: LD_VAR 0 4
78701: PPUSH
78702: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78706: LD_VAR 0 1
78710: PPUSH
78711: LD_VAR 0 2
78715: PPUSH
78716: LD_VAR 0 3
78720: PPUSH
78721: CALL_OW 331
// end ;
78725: LD_VAR 0 5
78729: RET
// export function Video ( mode ) ; begin
78730: LD_INT 0
78732: PPUSH
// ingame_video = mode ;
78733: LD_ADDR_OWVAR 52
78737: PUSH
78738: LD_VAR 0 1
78742: ST_TO_ADDR
// interface_hidden = mode ;
78743: LD_ADDR_OWVAR 54
78747: PUSH
78748: LD_VAR 0 1
78752: ST_TO_ADDR
// end ;
78753: LD_VAR 0 2
78757: RET
// export function Join ( array , element ) ; begin
78758: LD_INT 0
78760: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78761: LD_ADDR_VAR 0 3
78765: PUSH
78766: LD_VAR 0 1
78770: PPUSH
78771: LD_VAR 0 1
78775: PUSH
78776: LD_INT 1
78778: PLUS
78779: PPUSH
78780: LD_VAR 0 2
78784: PPUSH
78785: CALL_OW 1
78789: ST_TO_ADDR
// end ;
78790: LD_VAR 0 3
78794: RET
// export function JoinUnion ( array , element ) ; begin
78795: LD_INT 0
78797: PPUSH
// result := array union element ;
78798: LD_ADDR_VAR 0 3
78802: PUSH
78803: LD_VAR 0 1
78807: PUSH
78808: LD_VAR 0 2
78812: UNION
78813: ST_TO_ADDR
// end ;
78814: LD_VAR 0 3
78818: RET
// export function GetBehemoths ( side ) ; begin
78819: LD_INT 0
78821: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
78822: LD_ADDR_VAR 0 2
78826: PUSH
78827: LD_INT 22
78829: PUSH
78830: LD_VAR 0 1
78834: PUSH
78835: EMPTY
78836: LIST
78837: LIST
78838: PUSH
78839: LD_INT 31
78841: PUSH
78842: LD_INT 25
78844: PUSH
78845: EMPTY
78846: LIST
78847: LIST
78848: PUSH
78849: EMPTY
78850: LIST
78851: LIST
78852: PPUSH
78853: CALL_OW 69
78857: ST_TO_ADDR
// end ;
78858: LD_VAR 0 2
78862: RET
// export function Shuffle ( array ) ; var i , index ; begin
78863: LD_INT 0
78865: PPUSH
78866: PPUSH
78867: PPUSH
// result := [ ] ;
78868: LD_ADDR_VAR 0 2
78872: PUSH
78873: EMPTY
78874: ST_TO_ADDR
// if not array then
78875: LD_VAR 0 1
78879: NOT
78880: IFFALSE 78884
// exit ;
78882: GO 78983
// Randomize ;
78884: CALL_OW 10
// for i = array downto 1 do
78888: LD_ADDR_VAR 0 3
78892: PUSH
78893: DOUBLE
78894: LD_VAR 0 1
78898: INC
78899: ST_TO_ADDR
78900: LD_INT 1
78902: PUSH
78903: FOR_DOWNTO
78904: IFFALSE 78981
// begin index := rand ( 1 , array ) ;
78906: LD_ADDR_VAR 0 4
78910: PUSH
78911: LD_INT 1
78913: PPUSH
78914: LD_VAR 0 1
78918: PPUSH
78919: CALL_OW 12
78923: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78924: LD_ADDR_VAR 0 2
78928: PUSH
78929: LD_VAR 0 2
78933: PPUSH
78934: LD_VAR 0 2
78938: PUSH
78939: LD_INT 1
78941: PLUS
78942: PPUSH
78943: LD_VAR 0 1
78947: PUSH
78948: LD_VAR 0 4
78952: ARRAY
78953: PPUSH
78954: CALL_OW 2
78958: ST_TO_ADDR
// array := Delete ( array , index ) ;
78959: LD_ADDR_VAR 0 1
78963: PUSH
78964: LD_VAR 0 1
78968: PPUSH
78969: LD_VAR 0 4
78973: PPUSH
78974: CALL_OW 3
78978: ST_TO_ADDR
// end ;
78979: GO 78903
78981: POP
78982: POP
// end ;
78983: LD_VAR 0 2
78987: RET
// export function GetBaseMaterials ( base ) ; begin
78988: LD_INT 0
78990: PPUSH
// result := [ 0 , 0 , 0 ] ;
78991: LD_ADDR_VAR 0 2
78995: PUSH
78996: LD_INT 0
78998: PUSH
78999: LD_INT 0
79001: PUSH
79002: LD_INT 0
79004: PUSH
79005: EMPTY
79006: LIST
79007: LIST
79008: LIST
79009: ST_TO_ADDR
// if not base then
79010: LD_VAR 0 1
79014: NOT
79015: IFFALSE 79019
// exit ;
79017: GO 79068
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
79019: LD_ADDR_VAR 0 2
79023: PUSH
79024: LD_VAR 0 1
79028: PPUSH
79029: LD_INT 1
79031: PPUSH
79032: CALL_OW 275
79036: PUSH
79037: LD_VAR 0 1
79041: PPUSH
79042: LD_INT 2
79044: PPUSH
79045: CALL_OW 275
79049: PUSH
79050: LD_VAR 0 1
79054: PPUSH
79055: LD_INT 3
79057: PPUSH
79058: CALL_OW 275
79062: PUSH
79063: EMPTY
79064: LIST
79065: LIST
79066: LIST
79067: ST_TO_ADDR
// end ;
79068: LD_VAR 0 2
79072: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79073: LD_INT 0
79075: PPUSH
79076: PPUSH
// result := array ;
79077: LD_ADDR_VAR 0 3
79081: PUSH
79082: LD_VAR 0 1
79086: ST_TO_ADDR
// if size > 0 then
79087: LD_VAR 0 2
79091: PUSH
79092: LD_INT 0
79094: GREATER
79095: IFFALSE 79141
// for i := array downto size do
79097: LD_ADDR_VAR 0 4
79101: PUSH
79102: DOUBLE
79103: LD_VAR 0 1
79107: INC
79108: ST_TO_ADDR
79109: LD_VAR 0 2
79113: PUSH
79114: FOR_DOWNTO
79115: IFFALSE 79139
// result := Delete ( result , result ) ;
79117: LD_ADDR_VAR 0 3
79121: PUSH
79122: LD_VAR 0 3
79126: PPUSH
79127: LD_VAR 0 3
79131: PPUSH
79132: CALL_OW 3
79136: ST_TO_ADDR
79137: GO 79114
79139: POP
79140: POP
// end ;
79141: LD_VAR 0 3
79145: RET
// export function ComExit ( unit ) ; var tmp ; begin
79146: LD_INT 0
79148: PPUSH
79149: PPUSH
// if not IsInUnit ( unit ) then
79150: LD_VAR 0 1
79154: PPUSH
79155: CALL_OW 310
79159: NOT
79160: IFFALSE 79164
// exit ;
79162: GO 79224
// tmp := IsInUnit ( unit ) ;
79164: LD_ADDR_VAR 0 3
79168: PUSH
79169: LD_VAR 0 1
79173: PPUSH
79174: CALL_OW 310
79178: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79179: LD_VAR 0 3
79183: PPUSH
79184: CALL_OW 247
79188: PUSH
79189: LD_INT 2
79191: EQUAL
79192: IFFALSE 79205
// ComExitVehicle ( unit ) else
79194: LD_VAR 0 1
79198: PPUSH
79199: CALL_OW 121
79203: GO 79214
// ComExitBuilding ( unit ) ;
79205: LD_VAR 0 1
79209: PPUSH
79210: CALL_OW 122
// result := tmp ;
79214: LD_ADDR_VAR 0 2
79218: PUSH
79219: LD_VAR 0 3
79223: ST_TO_ADDR
// end ;
79224: LD_VAR 0 2
79228: RET
// export function ComExitAll ( units ) ; var i ; begin
79229: LD_INT 0
79231: PPUSH
79232: PPUSH
// if not units then
79233: LD_VAR 0 1
79237: NOT
79238: IFFALSE 79242
// exit ;
79240: GO 79268
// for i in units do
79242: LD_ADDR_VAR 0 3
79246: PUSH
79247: LD_VAR 0 1
79251: PUSH
79252: FOR_IN
79253: IFFALSE 79266
// ComExit ( i ) ;
79255: LD_VAR 0 3
79259: PPUSH
79260: CALL 79146 0 1
79264: GO 79252
79266: POP
79267: POP
// end ;
79268: LD_VAR 0 2
79272: RET
// export function ResetHc ; begin
79273: LD_INT 0
79275: PPUSH
// InitHc ;
79276: CALL_OW 19
// hc_importance := 0 ;
79280: LD_ADDR_OWVAR 32
79284: PUSH
79285: LD_INT 0
79287: ST_TO_ADDR
// end ;
79288: LD_VAR 0 1
79292: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79293: LD_INT 0
79295: PPUSH
79296: PPUSH
79297: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79298: LD_ADDR_VAR 0 6
79302: PUSH
79303: LD_VAR 0 1
79307: PUSH
79308: LD_VAR 0 3
79312: PLUS
79313: PUSH
79314: LD_INT 2
79316: DIV
79317: ST_TO_ADDR
// if _x < 0 then
79318: LD_VAR 0 6
79322: PUSH
79323: LD_INT 0
79325: LESS
79326: IFFALSE 79343
// _x := _x * - 1 ;
79328: LD_ADDR_VAR 0 6
79332: PUSH
79333: LD_VAR 0 6
79337: PUSH
79338: LD_INT 1
79340: NEG
79341: MUL
79342: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79343: LD_ADDR_VAR 0 7
79347: PUSH
79348: LD_VAR 0 2
79352: PUSH
79353: LD_VAR 0 4
79357: PLUS
79358: PUSH
79359: LD_INT 2
79361: DIV
79362: ST_TO_ADDR
// if _y < 0 then
79363: LD_VAR 0 7
79367: PUSH
79368: LD_INT 0
79370: LESS
79371: IFFALSE 79388
// _y := _y * - 1 ;
79373: LD_ADDR_VAR 0 7
79377: PUSH
79378: LD_VAR 0 7
79382: PUSH
79383: LD_INT 1
79385: NEG
79386: MUL
79387: ST_TO_ADDR
// result := [ _x , _y ] ;
79388: LD_ADDR_VAR 0 5
79392: PUSH
79393: LD_VAR 0 6
79397: PUSH
79398: LD_VAR 0 7
79402: PUSH
79403: EMPTY
79404: LIST
79405: LIST
79406: ST_TO_ADDR
// end ;
79407: LD_VAR 0 5
79411: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79412: LD_INT 0
79414: PPUSH
79415: PPUSH
79416: PPUSH
79417: PPUSH
// task := GetTaskList ( unit ) ;
79418: LD_ADDR_VAR 0 7
79422: PUSH
79423: LD_VAR 0 1
79427: PPUSH
79428: CALL_OW 437
79432: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79433: LD_VAR 0 7
79437: NOT
79438: PUSH
79439: LD_VAR 0 1
79443: PPUSH
79444: LD_VAR 0 2
79448: PPUSH
79449: CALL_OW 308
79453: NOT
79454: AND
79455: IFFALSE 79459
// exit ;
79457: GO 79577
// if IsInArea ( unit , area ) then
79459: LD_VAR 0 1
79463: PPUSH
79464: LD_VAR 0 2
79468: PPUSH
79469: CALL_OW 308
79473: IFFALSE 79491
// begin ComMoveToArea ( unit , goAway ) ;
79475: LD_VAR 0 1
79479: PPUSH
79480: LD_VAR 0 3
79484: PPUSH
79485: CALL_OW 113
// exit ;
79489: GO 79577
// end ; if task [ 1 ] [ 1 ] <> M then
79491: LD_VAR 0 7
79495: PUSH
79496: LD_INT 1
79498: ARRAY
79499: PUSH
79500: LD_INT 1
79502: ARRAY
79503: PUSH
79504: LD_STRING M
79506: NONEQUAL
79507: IFFALSE 79511
// exit ;
79509: GO 79577
// x := task [ 1 ] [ 2 ] ;
79511: LD_ADDR_VAR 0 5
79515: PUSH
79516: LD_VAR 0 7
79520: PUSH
79521: LD_INT 1
79523: ARRAY
79524: PUSH
79525: LD_INT 2
79527: ARRAY
79528: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79529: LD_ADDR_VAR 0 6
79533: PUSH
79534: LD_VAR 0 7
79538: PUSH
79539: LD_INT 1
79541: ARRAY
79542: PUSH
79543: LD_INT 3
79545: ARRAY
79546: ST_TO_ADDR
// if InArea ( x , y , area ) then
79547: LD_VAR 0 5
79551: PPUSH
79552: LD_VAR 0 6
79556: PPUSH
79557: LD_VAR 0 2
79561: PPUSH
79562: CALL_OW 309
79566: IFFALSE 79577
// ComStop ( unit ) ;
79568: LD_VAR 0 1
79572: PPUSH
79573: CALL_OW 141
// end ;
79577: LD_VAR 0 4
79581: RET
// export function Abs ( value ) ; begin
79582: LD_INT 0
79584: PPUSH
// result := value ;
79585: LD_ADDR_VAR 0 2
79589: PUSH
79590: LD_VAR 0 1
79594: ST_TO_ADDR
// if value < 0 then
79595: LD_VAR 0 1
79599: PUSH
79600: LD_INT 0
79602: LESS
79603: IFFALSE 79620
// result := value * - 1 ;
79605: LD_ADDR_VAR 0 2
79609: PUSH
79610: LD_VAR 0 1
79614: PUSH
79615: LD_INT 1
79617: NEG
79618: MUL
79619: ST_TO_ADDR
// end ;
79620: LD_VAR 0 2
79624: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79625: LD_INT 0
79627: PPUSH
79628: PPUSH
79629: PPUSH
79630: PPUSH
79631: PPUSH
79632: PPUSH
79633: PPUSH
79634: PPUSH
// if not unit or not building then
79635: LD_VAR 0 1
79639: NOT
79640: PUSH
79641: LD_VAR 0 2
79645: NOT
79646: OR
79647: IFFALSE 79651
// exit ;
79649: GO 79877
// x := GetX ( building ) ;
79651: LD_ADDR_VAR 0 4
79655: PUSH
79656: LD_VAR 0 2
79660: PPUSH
79661: CALL_OW 250
79665: ST_TO_ADDR
// y := GetY ( building ) ;
79666: LD_ADDR_VAR 0 6
79670: PUSH
79671: LD_VAR 0 2
79675: PPUSH
79676: CALL_OW 251
79680: ST_TO_ADDR
// d := GetDir ( building ) ;
79681: LD_ADDR_VAR 0 8
79685: PUSH
79686: LD_VAR 0 2
79690: PPUSH
79691: CALL_OW 254
79695: ST_TO_ADDR
// r := 4 ;
79696: LD_ADDR_VAR 0 9
79700: PUSH
79701: LD_INT 4
79703: ST_TO_ADDR
// for i := 1 to 5 do
79704: LD_ADDR_VAR 0 10
79708: PUSH
79709: DOUBLE
79710: LD_INT 1
79712: DEC
79713: ST_TO_ADDR
79714: LD_INT 5
79716: PUSH
79717: FOR_TO
79718: IFFALSE 79875
// begin _x := ShiftX ( x , d , r + i ) ;
79720: LD_ADDR_VAR 0 5
79724: PUSH
79725: LD_VAR 0 4
79729: PPUSH
79730: LD_VAR 0 8
79734: PPUSH
79735: LD_VAR 0 9
79739: PUSH
79740: LD_VAR 0 10
79744: PLUS
79745: PPUSH
79746: CALL_OW 272
79750: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79751: LD_ADDR_VAR 0 7
79755: PUSH
79756: LD_VAR 0 6
79760: PPUSH
79761: LD_VAR 0 8
79765: PPUSH
79766: LD_VAR 0 9
79770: PUSH
79771: LD_VAR 0 10
79775: PLUS
79776: PPUSH
79777: CALL_OW 273
79781: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79782: LD_VAR 0 5
79786: PPUSH
79787: LD_VAR 0 7
79791: PPUSH
79792: CALL_OW 488
79796: PUSH
79797: LD_VAR 0 5
79801: PPUSH
79802: LD_VAR 0 7
79806: PPUSH
79807: CALL_OW 428
79811: PPUSH
79812: CALL_OW 247
79816: PUSH
79817: LD_INT 3
79819: PUSH
79820: LD_INT 2
79822: PUSH
79823: EMPTY
79824: LIST
79825: LIST
79826: IN
79827: NOT
79828: AND
79829: IFFALSE 79873
// begin ComMoveXY ( unit , _x , _y ) ;
79831: LD_VAR 0 1
79835: PPUSH
79836: LD_VAR 0 5
79840: PPUSH
79841: LD_VAR 0 7
79845: PPUSH
79846: CALL_OW 111
// result := [ _x , _y ] ;
79850: LD_ADDR_VAR 0 3
79854: PUSH
79855: LD_VAR 0 5
79859: PUSH
79860: LD_VAR 0 7
79864: PUSH
79865: EMPTY
79866: LIST
79867: LIST
79868: ST_TO_ADDR
// exit ;
79869: POP
79870: POP
79871: GO 79877
// end ; end ;
79873: GO 79717
79875: POP
79876: POP
// end ;
79877: LD_VAR 0 3
79881: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79882: LD_INT 0
79884: PPUSH
79885: PPUSH
79886: PPUSH
// result := 0 ;
79887: LD_ADDR_VAR 0 3
79891: PUSH
79892: LD_INT 0
79894: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79895: LD_VAR 0 1
79899: PUSH
79900: LD_INT 0
79902: LESS
79903: PUSH
79904: LD_VAR 0 1
79908: PUSH
79909: LD_INT 8
79911: GREATER
79912: OR
79913: PUSH
79914: LD_VAR 0 2
79918: PUSH
79919: LD_INT 0
79921: LESS
79922: OR
79923: PUSH
79924: LD_VAR 0 2
79928: PUSH
79929: LD_INT 8
79931: GREATER
79932: OR
79933: IFFALSE 79937
// exit ;
79935: GO 80012
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79937: LD_ADDR_VAR 0 4
79941: PUSH
79942: LD_INT 22
79944: PUSH
79945: LD_VAR 0 2
79949: PUSH
79950: EMPTY
79951: LIST
79952: LIST
79953: PPUSH
79954: CALL_OW 69
79958: PUSH
79959: FOR_IN
79960: IFFALSE 80010
// begin un := UnitShoot ( i ) ;
79962: LD_ADDR_VAR 0 5
79966: PUSH
79967: LD_VAR 0 4
79971: PPUSH
79972: CALL_OW 504
79976: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79977: LD_VAR 0 5
79981: PPUSH
79982: CALL_OW 255
79986: PUSH
79987: LD_VAR 0 1
79991: EQUAL
79992: IFFALSE 80008
// begin result := un ;
79994: LD_ADDR_VAR 0 3
79998: PUSH
79999: LD_VAR 0 5
80003: ST_TO_ADDR
// exit ;
80004: POP
80005: POP
80006: GO 80012
// end ; end ;
80008: GO 79959
80010: POP
80011: POP
// end ;
80012: LD_VAR 0 3
80016: RET
// export function GetCargoBay ( units ) ; begin
80017: LD_INT 0
80019: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
80020: LD_ADDR_VAR 0 2
80024: PUSH
80025: LD_VAR 0 1
80029: PPUSH
80030: LD_INT 2
80032: PUSH
80033: LD_INT 34
80035: PUSH
80036: LD_INT 12
80038: PUSH
80039: EMPTY
80040: LIST
80041: LIST
80042: PUSH
80043: LD_INT 34
80045: PUSH
80046: LD_INT 51
80048: PUSH
80049: EMPTY
80050: LIST
80051: LIST
80052: PUSH
80053: LD_INT 34
80055: PUSH
80056: LD_INT 32
80058: PUSH
80059: EMPTY
80060: LIST
80061: LIST
80062: PUSH
80063: LD_INT 34
80065: PUSH
80066: LD_EXP 66
80070: PUSH
80071: EMPTY
80072: LIST
80073: LIST
80074: PUSH
80075: EMPTY
80076: LIST
80077: LIST
80078: LIST
80079: LIST
80080: LIST
80081: PPUSH
80082: CALL_OW 72
80086: ST_TO_ADDR
// end ;
80087: LD_VAR 0 2
80091: RET
// export function Negate ( value ) ; begin
80092: LD_INT 0
80094: PPUSH
// result := not value ;
80095: LD_ADDR_VAR 0 2
80099: PUSH
80100: LD_VAR 0 1
80104: NOT
80105: ST_TO_ADDR
// end ;
80106: LD_VAR 0 2
80110: RET
// export function Inc ( value ) ; begin
80111: LD_INT 0
80113: PPUSH
// result := value + 1 ;
80114: LD_ADDR_VAR 0 2
80118: PUSH
80119: LD_VAR 0 1
80123: PUSH
80124: LD_INT 1
80126: PLUS
80127: ST_TO_ADDR
// end ;
80128: LD_VAR 0 2
80132: RET
// export function Dec ( value ) ; begin
80133: LD_INT 0
80135: PPUSH
// result := value - 1 ;
80136: LD_ADDR_VAR 0 2
80140: PUSH
80141: LD_VAR 0 1
80145: PUSH
80146: LD_INT 1
80148: MINUS
80149: ST_TO_ADDR
// end ;
80150: LD_VAR 0 2
80154: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80155: LD_INT 0
80157: PPUSH
80158: PPUSH
80159: PPUSH
80160: PPUSH
80161: PPUSH
80162: PPUSH
80163: PPUSH
80164: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80165: LD_VAR 0 1
80169: PPUSH
80170: LD_VAR 0 2
80174: PPUSH
80175: CALL_OW 488
80179: NOT
80180: PUSH
80181: LD_VAR 0 3
80185: PPUSH
80186: LD_VAR 0 4
80190: PPUSH
80191: CALL_OW 488
80195: NOT
80196: OR
80197: IFFALSE 80210
// begin result := - 1 ;
80199: LD_ADDR_VAR 0 5
80203: PUSH
80204: LD_INT 1
80206: NEG
80207: ST_TO_ADDR
// exit ;
80208: GO 80445
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80210: LD_ADDR_VAR 0 12
80214: PUSH
80215: LD_VAR 0 1
80219: PPUSH
80220: LD_VAR 0 2
80224: PPUSH
80225: LD_VAR 0 3
80229: PPUSH
80230: LD_VAR 0 4
80234: PPUSH
80235: CALL 79293 0 4
80239: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80240: LD_ADDR_VAR 0 11
80244: PUSH
80245: LD_VAR 0 1
80249: PPUSH
80250: LD_VAR 0 2
80254: PPUSH
80255: LD_VAR 0 12
80259: PUSH
80260: LD_INT 1
80262: ARRAY
80263: PPUSH
80264: LD_VAR 0 12
80268: PUSH
80269: LD_INT 2
80271: ARRAY
80272: PPUSH
80273: CALL_OW 298
80277: ST_TO_ADDR
// distance := 9999 ;
80278: LD_ADDR_VAR 0 10
80282: PUSH
80283: LD_INT 9999
80285: ST_TO_ADDR
// for i := 0 to 5 do
80286: LD_ADDR_VAR 0 6
80290: PUSH
80291: DOUBLE
80292: LD_INT 0
80294: DEC
80295: ST_TO_ADDR
80296: LD_INT 5
80298: PUSH
80299: FOR_TO
80300: IFFALSE 80443
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80302: LD_ADDR_VAR 0 7
80306: PUSH
80307: LD_VAR 0 1
80311: PPUSH
80312: LD_VAR 0 6
80316: PPUSH
80317: LD_VAR 0 11
80321: PPUSH
80322: CALL_OW 272
80326: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80327: LD_ADDR_VAR 0 8
80331: PUSH
80332: LD_VAR 0 2
80336: PPUSH
80337: LD_VAR 0 6
80341: PPUSH
80342: LD_VAR 0 11
80346: PPUSH
80347: CALL_OW 273
80351: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80352: LD_VAR 0 7
80356: PPUSH
80357: LD_VAR 0 8
80361: PPUSH
80362: CALL_OW 488
80366: NOT
80367: IFFALSE 80371
// continue ;
80369: GO 80299
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80371: LD_ADDR_VAR 0 9
80375: PUSH
80376: LD_VAR 0 12
80380: PUSH
80381: LD_INT 1
80383: ARRAY
80384: PPUSH
80385: LD_VAR 0 12
80389: PUSH
80390: LD_INT 2
80392: ARRAY
80393: PPUSH
80394: LD_VAR 0 7
80398: PPUSH
80399: LD_VAR 0 8
80403: PPUSH
80404: CALL_OW 298
80408: ST_TO_ADDR
// if tmp < distance then
80409: LD_VAR 0 9
80413: PUSH
80414: LD_VAR 0 10
80418: LESS
80419: IFFALSE 80441
// begin result := i ;
80421: LD_ADDR_VAR 0 5
80425: PUSH
80426: LD_VAR 0 6
80430: ST_TO_ADDR
// distance := tmp ;
80431: LD_ADDR_VAR 0 10
80435: PUSH
80436: LD_VAR 0 9
80440: ST_TO_ADDR
// end ; end ;
80441: GO 80299
80443: POP
80444: POP
// end ;
80445: LD_VAR 0 5
80449: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80450: LD_INT 0
80452: PPUSH
80453: PPUSH
// if not driver or not IsInUnit ( driver ) then
80454: LD_VAR 0 1
80458: NOT
80459: PUSH
80460: LD_VAR 0 1
80464: PPUSH
80465: CALL_OW 310
80469: NOT
80470: OR
80471: IFFALSE 80475
// exit ;
80473: GO 80565
// vehicle := IsInUnit ( driver ) ;
80475: LD_ADDR_VAR 0 3
80479: PUSH
80480: LD_VAR 0 1
80484: PPUSH
80485: CALL_OW 310
80489: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80490: LD_VAR 0 1
80494: PPUSH
80495: LD_STRING \
80497: PUSH
80498: LD_INT 0
80500: PUSH
80501: LD_INT 0
80503: PUSH
80504: LD_INT 0
80506: PUSH
80507: LD_INT 0
80509: PUSH
80510: LD_INT 0
80512: PUSH
80513: LD_INT 0
80515: PUSH
80516: EMPTY
80517: LIST
80518: LIST
80519: LIST
80520: LIST
80521: LIST
80522: LIST
80523: LIST
80524: PUSH
80525: LD_STRING E
80527: PUSH
80528: LD_INT 0
80530: PUSH
80531: LD_INT 0
80533: PUSH
80534: LD_VAR 0 3
80538: PUSH
80539: LD_INT 0
80541: PUSH
80542: LD_INT 0
80544: PUSH
80545: LD_INT 0
80547: PUSH
80548: EMPTY
80549: LIST
80550: LIST
80551: LIST
80552: LIST
80553: LIST
80554: LIST
80555: LIST
80556: PUSH
80557: EMPTY
80558: LIST
80559: LIST
80560: PPUSH
80561: CALL_OW 446
// end ;
80565: LD_VAR 0 2
80569: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80570: LD_INT 0
80572: PPUSH
80573: PPUSH
// if not driver or not IsInUnit ( driver ) then
80574: LD_VAR 0 1
80578: NOT
80579: PUSH
80580: LD_VAR 0 1
80584: PPUSH
80585: CALL_OW 310
80589: NOT
80590: OR
80591: IFFALSE 80595
// exit ;
80593: GO 80685
// vehicle := IsInUnit ( driver ) ;
80595: LD_ADDR_VAR 0 3
80599: PUSH
80600: LD_VAR 0 1
80604: PPUSH
80605: CALL_OW 310
80609: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80610: LD_VAR 0 1
80614: PPUSH
80615: LD_STRING \
80617: PUSH
80618: LD_INT 0
80620: PUSH
80621: LD_INT 0
80623: PUSH
80624: LD_INT 0
80626: PUSH
80627: LD_INT 0
80629: PUSH
80630: LD_INT 0
80632: PUSH
80633: LD_INT 0
80635: PUSH
80636: EMPTY
80637: LIST
80638: LIST
80639: LIST
80640: LIST
80641: LIST
80642: LIST
80643: LIST
80644: PUSH
80645: LD_STRING E
80647: PUSH
80648: LD_INT 0
80650: PUSH
80651: LD_INT 0
80653: PUSH
80654: LD_VAR 0 3
80658: PUSH
80659: LD_INT 0
80661: PUSH
80662: LD_INT 0
80664: PUSH
80665: LD_INT 0
80667: PUSH
80668: EMPTY
80669: LIST
80670: LIST
80671: LIST
80672: LIST
80673: LIST
80674: LIST
80675: LIST
80676: PUSH
80677: EMPTY
80678: LIST
80679: LIST
80680: PPUSH
80681: CALL_OW 447
// end ;
80685: LD_VAR 0 2
80689: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80690: LD_INT 0
80692: PPUSH
80693: PPUSH
80694: PPUSH
// tmp := [ ] ;
80695: LD_ADDR_VAR 0 5
80699: PUSH
80700: EMPTY
80701: ST_TO_ADDR
// for i in units do
80702: LD_ADDR_VAR 0 4
80706: PUSH
80707: LD_VAR 0 1
80711: PUSH
80712: FOR_IN
80713: IFFALSE 80751
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80715: LD_ADDR_VAR 0 5
80719: PUSH
80720: LD_VAR 0 5
80724: PPUSH
80725: LD_VAR 0 5
80729: PUSH
80730: LD_INT 1
80732: PLUS
80733: PPUSH
80734: LD_VAR 0 4
80738: PPUSH
80739: CALL_OW 256
80743: PPUSH
80744: CALL_OW 2
80748: ST_TO_ADDR
80749: GO 80712
80751: POP
80752: POP
// if not tmp then
80753: LD_VAR 0 5
80757: NOT
80758: IFFALSE 80762
// exit ;
80760: GO 80810
// if asc then
80762: LD_VAR 0 2
80766: IFFALSE 80790
// result := SortListByListAsc ( units , tmp ) else
80768: LD_ADDR_VAR 0 3
80772: PUSH
80773: LD_VAR 0 1
80777: PPUSH
80778: LD_VAR 0 5
80782: PPUSH
80783: CALL_OW 76
80787: ST_TO_ADDR
80788: GO 80810
// result := SortListByListDesc ( units , tmp ) ;
80790: LD_ADDR_VAR 0 3
80794: PUSH
80795: LD_VAR 0 1
80799: PPUSH
80800: LD_VAR 0 5
80804: PPUSH
80805: CALL_OW 77
80809: ST_TO_ADDR
// end ;
80810: LD_VAR 0 3
80814: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80815: LD_INT 0
80817: PPUSH
80818: PPUSH
// task := GetTaskList ( mech ) ;
80819: LD_ADDR_VAR 0 4
80823: PUSH
80824: LD_VAR 0 1
80828: PPUSH
80829: CALL_OW 437
80833: ST_TO_ADDR
// if not task then
80834: LD_VAR 0 4
80838: NOT
80839: IFFALSE 80843
// exit ;
80841: GO 80885
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80843: LD_ADDR_VAR 0 3
80847: PUSH
80848: LD_VAR 0 4
80852: PUSH
80853: LD_INT 1
80855: ARRAY
80856: PUSH
80857: LD_INT 1
80859: ARRAY
80860: PUSH
80861: LD_STRING r
80863: EQUAL
80864: PUSH
80865: LD_VAR 0 4
80869: PUSH
80870: LD_INT 1
80872: ARRAY
80873: PUSH
80874: LD_INT 4
80876: ARRAY
80877: PUSH
80878: LD_VAR 0 2
80882: EQUAL
80883: AND
80884: ST_TO_ADDR
// end ;
80885: LD_VAR 0 3
80889: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80890: LD_INT 0
80892: PPUSH
// SetDir ( unit , d ) ;
80893: LD_VAR 0 1
80897: PPUSH
80898: LD_VAR 0 4
80902: PPUSH
80903: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80907: LD_VAR 0 1
80911: PPUSH
80912: LD_VAR 0 2
80916: PPUSH
80917: LD_VAR 0 3
80921: PPUSH
80922: LD_VAR 0 5
80926: PPUSH
80927: CALL_OW 48
// end ;
80931: LD_VAR 0 6
80935: RET
// export function ToNaturalNumber ( number ) ; begin
80936: LD_INT 0
80938: PPUSH
// result := number div 1 ;
80939: LD_ADDR_VAR 0 2
80943: PUSH
80944: LD_VAR 0 1
80948: PUSH
80949: LD_INT 1
80951: DIV
80952: ST_TO_ADDR
// if number < 0 then
80953: LD_VAR 0 1
80957: PUSH
80958: LD_INT 0
80960: LESS
80961: IFFALSE 80971
// result := 0 ;
80963: LD_ADDR_VAR 0 2
80967: PUSH
80968: LD_INT 0
80970: ST_TO_ADDR
// end ;
80971: LD_VAR 0 2
80975: RET
// export function SortByClass ( units , class ) ; var un ; begin
80976: LD_INT 0
80978: PPUSH
80979: PPUSH
// if not units or not class then
80980: LD_VAR 0 1
80984: NOT
80985: PUSH
80986: LD_VAR 0 2
80990: NOT
80991: OR
80992: IFFALSE 80996
// exit ;
80994: GO 81091
// result := [ ] ;
80996: LD_ADDR_VAR 0 3
81000: PUSH
81001: EMPTY
81002: ST_TO_ADDR
// for un in units do
81003: LD_ADDR_VAR 0 4
81007: PUSH
81008: LD_VAR 0 1
81012: PUSH
81013: FOR_IN
81014: IFFALSE 81089
// if GetClass ( un ) = class then
81016: LD_VAR 0 4
81020: PPUSH
81021: CALL_OW 257
81025: PUSH
81026: LD_VAR 0 2
81030: EQUAL
81031: IFFALSE 81058
// result := Insert ( result , 1 , un ) else
81033: LD_ADDR_VAR 0 3
81037: PUSH
81038: LD_VAR 0 3
81042: PPUSH
81043: LD_INT 1
81045: PPUSH
81046: LD_VAR 0 4
81050: PPUSH
81051: CALL_OW 2
81055: ST_TO_ADDR
81056: GO 81087
// result := Replace ( result , result + 1 , un ) ;
81058: LD_ADDR_VAR 0 3
81062: PUSH
81063: LD_VAR 0 3
81067: PPUSH
81068: LD_VAR 0 3
81072: PUSH
81073: LD_INT 1
81075: PLUS
81076: PPUSH
81077: LD_VAR 0 4
81081: PPUSH
81082: CALL_OW 1
81086: ST_TO_ADDR
81087: GO 81013
81089: POP
81090: POP
// end ;
81091: LD_VAR 0 3
81095: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81096: LD_INT 0
81098: PPUSH
81099: PPUSH
81100: PPUSH
81101: PPUSH
81102: PPUSH
81103: PPUSH
81104: PPUSH
// result := [ ] ;
81105: LD_ADDR_VAR 0 4
81109: PUSH
81110: EMPTY
81111: ST_TO_ADDR
// if x - r < 0 then
81112: LD_VAR 0 1
81116: PUSH
81117: LD_VAR 0 3
81121: MINUS
81122: PUSH
81123: LD_INT 0
81125: LESS
81126: IFFALSE 81138
// min_x := 0 else
81128: LD_ADDR_VAR 0 8
81132: PUSH
81133: LD_INT 0
81135: ST_TO_ADDR
81136: GO 81154
// min_x := x - r ;
81138: LD_ADDR_VAR 0 8
81142: PUSH
81143: LD_VAR 0 1
81147: PUSH
81148: LD_VAR 0 3
81152: MINUS
81153: ST_TO_ADDR
// if y - r < 0 then
81154: LD_VAR 0 2
81158: PUSH
81159: LD_VAR 0 3
81163: MINUS
81164: PUSH
81165: LD_INT 0
81167: LESS
81168: IFFALSE 81180
// min_y := 0 else
81170: LD_ADDR_VAR 0 7
81174: PUSH
81175: LD_INT 0
81177: ST_TO_ADDR
81178: GO 81196
// min_y := y - r ;
81180: LD_ADDR_VAR 0 7
81184: PUSH
81185: LD_VAR 0 2
81189: PUSH
81190: LD_VAR 0 3
81194: MINUS
81195: ST_TO_ADDR
// max_x := x + r ;
81196: LD_ADDR_VAR 0 9
81200: PUSH
81201: LD_VAR 0 1
81205: PUSH
81206: LD_VAR 0 3
81210: PLUS
81211: ST_TO_ADDR
// max_y := y + r ;
81212: LD_ADDR_VAR 0 10
81216: PUSH
81217: LD_VAR 0 2
81221: PUSH
81222: LD_VAR 0 3
81226: PLUS
81227: ST_TO_ADDR
// for _x = min_x to max_x do
81228: LD_ADDR_VAR 0 5
81232: PUSH
81233: DOUBLE
81234: LD_VAR 0 8
81238: DEC
81239: ST_TO_ADDR
81240: LD_VAR 0 9
81244: PUSH
81245: FOR_TO
81246: IFFALSE 81347
// for _y = min_y to max_y do
81248: LD_ADDR_VAR 0 6
81252: PUSH
81253: DOUBLE
81254: LD_VAR 0 7
81258: DEC
81259: ST_TO_ADDR
81260: LD_VAR 0 10
81264: PUSH
81265: FOR_TO
81266: IFFALSE 81343
// begin if not ValidHex ( _x , _y ) then
81268: LD_VAR 0 5
81272: PPUSH
81273: LD_VAR 0 6
81277: PPUSH
81278: CALL_OW 488
81282: NOT
81283: IFFALSE 81287
// continue ;
81285: GO 81265
// if GetResourceTypeXY ( _x , _y ) then
81287: LD_VAR 0 5
81291: PPUSH
81292: LD_VAR 0 6
81296: PPUSH
81297: CALL_OW 283
81301: IFFALSE 81341
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81303: LD_ADDR_VAR 0 4
81307: PUSH
81308: LD_VAR 0 4
81312: PPUSH
81313: LD_VAR 0 4
81317: PUSH
81318: LD_INT 1
81320: PLUS
81321: PPUSH
81322: LD_VAR 0 5
81326: PUSH
81327: LD_VAR 0 6
81331: PUSH
81332: EMPTY
81333: LIST
81334: LIST
81335: PPUSH
81336: CALL_OW 1
81340: ST_TO_ADDR
// end ;
81341: GO 81265
81343: POP
81344: POP
81345: GO 81245
81347: POP
81348: POP
// end ;
81349: LD_VAR 0 4
81353: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81354: LD_INT 0
81356: PPUSH
81357: PPUSH
81358: PPUSH
81359: PPUSH
81360: PPUSH
81361: PPUSH
81362: PPUSH
81363: PPUSH
// if not units then
81364: LD_VAR 0 1
81368: NOT
81369: IFFALSE 81373
// exit ;
81371: GO 81798
// result := UnitFilter ( units , [ f_ok ] ) ;
81373: LD_ADDR_VAR 0 3
81377: PUSH
81378: LD_VAR 0 1
81382: PPUSH
81383: LD_INT 50
81385: PUSH
81386: EMPTY
81387: LIST
81388: PPUSH
81389: CALL_OW 72
81393: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81394: LD_ADDR_VAR 0 8
81398: PUSH
81399: LD_VAR 0 1
81403: PUSH
81404: LD_INT 1
81406: ARRAY
81407: PPUSH
81408: CALL_OW 255
81412: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
81413: LD_ADDR_VAR 0 10
81417: PUSH
81418: LD_INT 29
81420: PUSH
81421: LD_EXP 69
81425: PUSH
81426: EMPTY
81427: LIST
81428: LIST
81429: ST_TO_ADDR
// if not result then
81430: LD_VAR 0 3
81434: NOT
81435: IFFALSE 81439
// exit ;
81437: GO 81798
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81439: LD_ADDR_VAR 0 5
81443: PUSH
81444: LD_INT 81
81446: PUSH
81447: LD_VAR 0 8
81451: PUSH
81452: EMPTY
81453: LIST
81454: LIST
81455: PPUSH
81456: CALL_OW 69
81460: ST_TO_ADDR
// for i in result do
81461: LD_ADDR_VAR 0 4
81465: PUSH
81466: LD_VAR 0 3
81470: PUSH
81471: FOR_IN
81472: IFFALSE 81796
// begin tag := GetTag ( i ) + 1 ;
81474: LD_ADDR_VAR 0 9
81478: PUSH
81479: LD_VAR 0 4
81483: PPUSH
81484: CALL_OW 110
81488: PUSH
81489: LD_INT 1
81491: PLUS
81492: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
81493: LD_ADDR_VAR 0 7
81497: PUSH
81498: LD_VAR 0 4
81502: PPUSH
81503: CALL_OW 250
81507: PPUSH
81508: LD_VAR 0 4
81512: PPUSH
81513: CALL_OW 251
81517: PPUSH
81518: LD_INT 6
81520: PPUSH
81521: CALL 81096 0 3
81525: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
81526: LD_VAR 0 7
81530: PUSH
81531: LD_VAR 0 4
81535: PPUSH
81536: CALL_OW 264
81540: PUSH
81541: LD_VAR 0 10
81545: IN
81546: NOT
81547: AND
81548: IFFALSE 81587
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81550: LD_VAR 0 4
81554: PPUSH
81555: LD_VAR 0 7
81559: PUSH
81560: LD_INT 1
81562: ARRAY
81563: PUSH
81564: LD_INT 1
81566: ARRAY
81567: PPUSH
81568: LD_VAR 0 7
81572: PUSH
81573: LD_INT 1
81575: ARRAY
81576: PUSH
81577: LD_INT 2
81579: ARRAY
81580: PPUSH
81581: CALL_OW 116
81585: GO 81794
// if path > tag then
81587: LD_VAR 0 2
81591: PUSH
81592: LD_VAR 0 9
81596: GREATER
81597: IFFALSE 81764
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
81599: LD_ADDR_VAR 0 6
81603: PUSH
81604: LD_VAR 0 5
81608: PPUSH
81609: LD_INT 91
81611: PUSH
81612: LD_VAR 0 4
81616: PUSH
81617: LD_INT 12
81619: PUSH
81620: EMPTY
81621: LIST
81622: LIST
81623: LIST
81624: PPUSH
81625: CALL_OW 72
81629: ST_TO_ADDR
// if nearEnemy then
81630: LD_VAR 0 6
81634: IFFALSE 81662
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81636: LD_VAR 0 4
81640: PPUSH
81641: LD_VAR 0 6
81645: PPUSH
81646: LD_VAR 0 4
81650: PPUSH
81651: CALL_OW 74
81655: PPUSH
81656: CALL_OW 115
81660: GO 81762
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81662: LD_VAR 0 4
81666: PPUSH
81667: LD_VAR 0 2
81671: PUSH
81672: LD_VAR 0 9
81676: ARRAY
81677: PUSH
81678: LD_INT 1
81680: ARRAY
81681: PPUSH
81682: LD_VAR 0 2
81686: PUSH
81687: LD_VAR 0 9
81691: ARRAY
81692: PUSH
81693: LD_INT 2
81695: ARRAY
81696: PPUSH
81697: CALL_OW 297
81701: PUSH
81702: LD_INT 6
81704: GREATER
81705: IFFALSE 81748
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81707: LD_VAR 0 4
81711: PPUSH
81712: LD_VAR 0 2
81716: PUSH
81717: LD_VAR 0 9
81721: ARRAY
81722: PUSH
81723: LD_INT 1
81725: ARRAY
81726: PPUSH
81727: LD_VAR 0 2
81731: PUSH
81732: LD_VAR 0 9
81736: ARRAY
81737: PUSH
81738: LD_INT 2
81740: ARRAY
81741: PPUSH
81742: CALL_OW 114
81746: GO 81762
// SetTag ( i , tag ) ;
81748: LD_VAR 0 4
81752: PPUSH
81753: LD_VAR 0 9
81757: PPUSH
81758: CALL_OW 109
// end else
81762: GO 81794
// if enemy then
81764: LD_VAR 0 5
81768: IFFALSE 81794
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81770: LD_VAR 0 4
81774: PPUSH
81775: LD_VAR 0 5
81779: PPUSH
81780: LD_VAR 0 4
81784: PPUSH
81785: CALL_OW 74
81789: PPUSH
81790: CALL_OW 115
// end ;
81794: GO 81471
81796: POP
81797: POP
// end ;
81798: LD_VAR 0 3
81802: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81803: LD_INT 0
81805: PPUSH
81806: PPUSH
81807: PPUSH
// if not unit or IsInUnit ( unit ) then
81808: LD_VAR 0 1
81812: NOT
81813: PUSH
81814: LD_VAR 0 1
81818: PPUSH
81819: CALL_OW 310
81823: OR
81824: IFFALSE 81828
// exit ;
81826: GO 81919
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81828: LD_ADDR_VAR 0 4
81832: PUSH
81833: LD_VAR 0 1
81837: PPUSH
81838: CALL_OW 250
81842: PPUSH
81843: LD_VAR 0 2
81847: PPUSH
81848: LD_INT 1
81850: PPUSH
81851: CALL_OW 272
81855: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81856: LD_ADDR_VAR 0 5
81860: PUSH
81861: LD_VAR 0 1
81865: PPUSH
81866: CALL_OW 251
81870: PPUSH
81871: LD_VAR 0 2
81875: PPUSH
81876: LD_INT 1
81878: PPUSH
81879: CALL_OW 273
81883: ST_TO_ADDR
// if ValidHex ( x , y ) then
81884: LD_VAR 0 4
81888: PPUSH
81889: LD_VAR 0 5
81893: PPUSH
81894: CALL_OW 488
81898: IFFALSE 81919
// ComTurnXY ( unit , x , y ) ;
81900: LD_VAR 0 1
81904: PPUSH
81905: LD_VAR 0 4
81909: PPUSH
81910: LD_VAR 0 5
81914: PPUSH
81915: CALL_OW 118
// end ;
81919: LD_VAR 0 3
81923: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81924: LD_INT 0
81926: PPUSH
81927: PPUSH
// result := false ;
81928: LD_ADDR_VAR 0 3
81932: PUSH
81933: LD_INT 0
81935: ST_TO_ADDR
// if not units then
81936: LD_VAR 0 2
81940: NOT
81941: IFFALSE 81945
// exit ;
81943: GO 81990
// for i in units do
81945: LD_ADDR_VAR 0 4
81949: PUSH
81950: LD_VAR 0 2
81954: PUSH
81955: FOR_IN
81956: IFFALSE 81988
// if See ( side , i ) then
81958: LD_VAR 0 1
81962: PPUSH
81963: LD_VAR 0 4
81967: PPUSH
81968: CALL_OW 292
81972: IFFALSE 81986
// begin result := true ;
81974: LD_ADDR_VAR 0 3
81978: PUSH
81979: LD_INT 1
81981: ST_TO_ADDR
// exit ;
81982: POP
81983: POP
81984: GO 81990
// end ;
81986: GO 81955
81988: POP
81989: POP
// end ;
81990: LD_VAR 0 3
81994: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81995: LD_INT 0
81997: PPUSH
81998: PPUSH
81999: PPUSH
82000: PPUSH
// if not unit or not points then
82001: LD_VAR 0 1
82005: NOT
82006: PUSH
82007: LD_VAR 0 2
82011: NOT
82012: OR
82013: IFFALSE 82017
// exit ;
82015: GO 82107
// dist := 99999 ;
82017: LD_ADDR_VAR 0 5
82021: PUSH
82022: LD_INT 99999
82024: ST_TO_ADDR
// for i in points do
82025: LD_ADDR_VAR 0 4
82029: PUSH
82030: LD_VAR 0 2
82034: PUSH
82035: FOR_IN
82036: IFFALSE 82105
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82038: LD_ADDR_VAR 0 6
82042: PUSH
82043: LD_VAR 0 1
82047: PPUSH
82048: LD_VAR 0 4
82052: PUSH
82053: LD_INT 1
82055: ARRAY
82056: PPUSH
82057: LD_VAR 0 4
82061: PUSH
82062: LD_INT 2
82064: ARRAY
82065: PPUSH
82066: CALL_OW 297
82070: ST_TO_ADDR
// if tmpDist < dist then
82071: LD_VAR 0 6
82075: PUSH
82076: LD_VAR 0 5
82080: LESS
82081: IFFALSE 82103
// begin result := i ;
82083: LD_ADDR_VAR 0 3
82087: PUSH
82088: LD_VAR 0 4
82092: ST_TO_ADDR
// dist := tmpDist ;
82093: LD_ADDR_VAR 0 5
82097: PUSH
82098: LD_VAR 0 6
82102: ST_TO_ADDR
// end ; end ;
82103: GO 82035
82105: POP
82106: POP
// end ;
82107: LD_VAR 0 3
82111: RET
