// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export vehiclesFrom05 , resourcesFrom05 , fastBreakthrough , stevensStatus , apeTechsStatus ; export techMatPredStatus ; export vehsFrom06 , resourcesFrom06 ; export dial_SibTechsBlocker , dial_VsevolodContactBlocker , dial_TrapDialogBlocker , dial_ConvoyDialogBlocker , dial_NorthBlocker , dial_EndMissionDialogBlocker ; export claimOvsyenkoBase , claimTerminalBase , lostAgainBase ; export immortalVsevolodTeam , savedVsevolod , vsevolodWaitGorky ; export canGoNorth ; export enableVsevolodCounter ; export canSpawnReinforces ; export canEndMission ; export canRemoveUnits ; export timeToAttack ; export cratesSpawned ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 308 0 0
// vehiclesFrom05 = LoadVariable ( 05_Tanks_4 , [ ] ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 05_Tanks_4
  31: PPUSH
  32: EMPTY
  33: PPUSH
  34: CALL_OW 30
  38: ST_TO_ADDR
// resourcesFrom05 = LoadVariable ( 05_ResourcesInCargo_3 , [ ] ) ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: LD_STRING 05_ResourcesInCargo_3
  46: PPUSH
  47: EMPTY
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// fastBreakthrough = LoadVariable ( 05_FastBreakthrough_6 , false ) ;
  54: LD_ADDR_EXP 3
  58: PUSH
  59: LD_STRING 05_FastBreakthrough_6
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// stevensStatus = LoadVariable ( 05_StevensStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 4
  74: PUSH
  75: LD_STRING 05_StevensStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// apeTechsStatus = LoadVariable ( 05_ApeTechsStatus_7 , [ 0 , 0 , 0 ] ) ;
  86: LD_ADDR_EXP 5
  90: PUSH
  91: LD_STRING 05_ApeTechsStatus_7
  93: PPUSH
  94: LD_INT 0
  96: PUSH
  97: LD_INT 0
  99: PUSH
 100: LD_INT 0
 102: PUSH
 103: EMPTY
 104: LIST
 105: LIST
 106: LIST
 107: PPUSH
 108: CALL_OW 30
 112: ST_TO_ADDR
// techMatPredStatus = state_enabled ;
 113: LD_ADDR_EXP 6
 117: PUSH
 118: LD_INT 1
 120: ST_TO_ADDR
// vehsFrom06 = [ ] ;
 121: LD_ADDR_EXP 7
 125: PUSH
 126: EMPTY
 127: ST_TO_ADDR
// resourcesFrom06 = [ ] ;
 128: LD_ADDR_EXP 8
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// dial_SibTechsBlocker = false ;
 135: LD_ADDR_EXP 9
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// dial_VsevolodContactBlocker = false ;
 143: LD_ADDR_EXP 10
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// dial_TrapDialogBlocker = false ;
 151: LD_ADDR_EXP 11
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// dial_ConvoyDialogBlocker = false ;
 159: LD_ADDR_EXP 12
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// dial_NorthBlocker = false ;
 167: LD_ADDR_EXP 13
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// dial_EndMissionDialogBlocker = false ;
 175: LD_ADDR_EXP 14
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// claimOvsyenkoBase = false ;
 183: LD_ADDR_EXP 15
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// claimTerminalBase = false ;
 191: LD_ADDR_EXP 16
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// lostAgainBase = false ;
 199: LD_ADDR_EXP 17
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// immortalVsevolodTeam = true ;
 207: LD_ADDR_EXP 18
 211: PUSH
 212: LD_INT 1
 214: ST_TO_ADDR
// savedVsevolod = false ;
 215: LD_ADDR_EXP 19
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// vsevolodWaitGorky = false ;
 223: LD_ADDR_EXP 20
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// enableVsevolodCounter = false ;
 231: LD_ADDR_EXP 22
 235: PUSH
 236: LD_INT 0
 238: ST_TO_ADDR
// canGoNorth = false ;
 239: LD_ADDR_EXP 21
 243: PUSH
 244: LD_INT 0
 246: ST_TO_ADDR
// canSpawnReinforces = false ;
 247: LD_ADDR_EXP 23
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// canEndMission = false ;
 255: LD_ADDR_EXP 24
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// canRemoveUnits = false ;
 263: LD_ADDR_EXP 25
 267: PUSH
 268: LD_INT 0
 270: ST_TO_ADDR
// timeToAttack = 0 0$00 ;
 271: LD_ADDR_EXP 26
 275: PUSH
 276: LD_INT 0
 278: ST_TO_ADDR
// cratesSpawned = 0 ;
 279: LD_ADDR_EXP 27
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// PrepareRussians ;
 287: CALL 913 0 0
// PrepareAmericans ;
 291: CALL 3344 0 0
// Nef_PrepareNature ;
 295: CALL 4459 0 0
// MissionIntro ;
 299: CALL 16068 0 0
// end ; end_of_file
 303: LD_VAR 0 1
 307: RET
// export function InitMapConfig ; begin
 308: LD_INT 0
 310: PPUSH
// BaseMapConfig ;
 311: CALL 324 0 0
// MissionMapConfig ;
 315: CALL 414 0 0
// end ;
 319: LD_VAR 0 1
 323: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 324: LD_INT 0
 326: PPUSH
// animalsAmount = [ 3 , 3 , 1 , 3 , 0 ] ;
 327: LD_ADDR_EXP 28
 331: PUSH
 332: LD_INT 3
 334: PUSH
 335: LD_INT 3
 337: PUSH
 338: LD_INT 1
 340: PUSH
 341: LD_INT 3
 343: PUSH
 344: LD_INT 0
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 354: LD_ADDR_EXP 29
 358: PUSH
 359: LD_INT 2
 361: PUSH
 362: LD_INT 2
 364: PUSH
 365: LD_INT 2
 367: PUSH
 368: LD_INT 2
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: LIST
 375: LIST
 376: ST_TO_ADDR
// animalsAgression = 3 ;
 377: LD_ADDR_EXP 30
 381: PUSH
 382: LD_INT 3
 384: ST_TO_ADDR
// debugMode = 0 ;
 385: LD_ADDR_EXP 33
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// missionPrefix = 06_ ;
 393: LD_ADDR_EXP 31
 397: PUSH
 398: LD_STRING 06_
 400: ST_TO_ADDR
// previousMissionPrefix = 05_ ;
 401: LD_ADDR_EXP 32
 405: PUSH
 406: LD_STRING 05_
 408: ST_TO_ADDR
// end ;
 409: LD_VAR 0 1
 413: RET
// export enemySkillLevel ; export ovsyenkoStartCrates , terminalStartSiberite ; export trapAmount ; export vsevolodSaveTime ; function MissionMapConfig ; begin
 414: LD_INT 0
 416: PPUSH
// enemySkillLevel = [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 417: LD_ADDR_EXP 34
 421: PUSH
 422: LD_INT 3
 424: PUSH
 425: LD_INT 4
 427: PUSH
 428: LD_INT 5
 430: PUSH
 431: LD_INT 6
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: PUSH
 440: LD_OWVAR 67
 444: ARRAY
 445: ST_TO_ADDR
// ovsyenkoStartCrates = [ 150 , 100 , 50 , 30 ] [ Difficulty ] ;
 446: LD_ADDR_EXP 35
 450: PUSH
 451: LD_INT 150
 453: PUSH
 454: LD_INT 100
 456: PUSH
 457: LD_INT 50
 459: PUSH
 460: LD_INT 30
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_OWVAR 67
 473: ARRAY
 474: ST_TO_ADDR
// terminalStartSiberite = [ 100 , 70 , 50 , 30 ] [ Difficulty ] ;
 475: LD_ADDR_EXP 36
 479: PUSH
 480: LD_INT 100
 482: PUSH
 483: LD_INT 70
 485: PUSH
 486: LD_INT 50
 488: PUSH
 489: LD_INT 30
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: PUSH
 498: LD_OWVAR 67
 502: ARRAY
 503: ST_TO_ADDR
// trapAmount = [ rand ( 4 , 5 ) , rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] ;
 504: LD_ADDR_EXP 37
 508: PUSH
 509: LD_INT 4
 511: PPUSH
 512: LD_INT 5
 514: PPUSH
 515: CALL_OW 12
 519: PUSH
 520: LD_INT 5
 522: PPUSH
 523: LD_INT 6
 525: PPUSH
 526: CALL_OW 12
 530: PUSH
 531: LD_INT 6
 533: PPUSH
 534: LD_INT 7
 536: PPUSH
 537: CALL_OW 12
 541: PUSH
 542: LD_INT 7
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: PUSH
 551: LD_OWVAR 67
 555: ARRAY
 556: ST_TO_ADDR
// vsevolodSaveTime = [ 12 12$0 , 11 11$0 , 10 10$0 , 10 10$0 ] [ Difficulty ] ;
 557: LD_ADDR_EXP 38
 561: PUSH
 562: LD_INT 25200
 564: PUSH
 565: LD_INT 23100
 567: PUSH
 568: LD_INT 21000
 570: PUSH
 571: LD_INT 21000
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: LD_OWVAR 67
 584: ARRAY
 585: ST_TO_ADDR
// end ;
 586: LD_VAR 0 1
 590: RET
// every 0 0$1 trigger debugMode do var i ;
 591: LD_EXP 33
 595: IFFALSE 910
 597: GO 599
 599: DISABLE
 600: LD_INT 0
 602: PPUSH
// begin enable ;
 603: ENABLE
// FogOff ( your_side ) ;
 604: LD_OWVAR 2
 608: PPUSH
 609: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 613: LD_ADDR_VAR 0 1
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_OWVAR 2
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: LD_INT 2
 632: PUSH
 633: LD_INT 21
 635: PUSH
 636: LD_INT 1
 638: PUSH
 639: EMPTY
 640: LIST
 641: LIST
 642: PUSH
 643: LD_INT 21
 645: PUSH
 646: LD_INT 2
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: LIST
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PPUSH
 662: CALL_OW 69
 666: PUSH
 667: FOR_IN
 668: IFFALSE 684
// SetLives ( i , 1000 ) ;
 670: LD_VAR 0 1
 674: PPUSH
 675: LD_INT 1000
 677: PPUSH
 678: CALL_OW 234
 682: GO 667
 684: POP
 685: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 686: LD_ADDR_VAR 0 1
 690: PUSH
 691: LD_INT 22
 693: PUSH
 694: LD_OWVAR 2
 698: PUSH
 699: EMPTY
 700: LIST
 701: LIST
 702: PUSH
 703: LD_INT 21
 705: PUSH
 706: LD_INT 1
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: PPUSH
 717: CALL_OW 69
 721: PUSH
 722: FOR_IN
 723: IFFALSE 787
// begin SetSkill ( i , skill_combat , 10 ) ;
 725: LD_VAR 0 1
 729: PPUSH
 730: LD_INT 1
 732: PPUSH
 733: LD_INT 10
 735: PPUSH
 736: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 740: LD_VAR 0 1
 744: PPUSH
 745: LD_INT 2
 747: PPUSH
 748: LD_INT 10
 750: PPUSH
 751: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 755: LD_VAR 0 1
 759: PPUSH
 760: LD_INT 3
 762: PPUSH
 763: LD_INT 10
 765: PPUSH
 766: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 770: LD_VAR 0 1
 774: PPUSH
 775: LD_INT 4
 777: PPUSH
 778: LD_INT 10
 780: PPUSH
 781: CALL_OW 237
// end ;
 785: GO 722
 787: POP
 788: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 789: LD_ADDR_VAR 0 1
 793: PUSH
 794: LD_INT 22
 796: PUSH
 797: LD_OWVAR 2
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: PUSH
 806: LD_INT 2
 808: PUSH
 809: LD_INT 30
 811: PUSH
 812: LD_INT 0
 814: PUSH
 815: EMPTY
 816: LIST
 817: LIST
 818: PUSH
 819: LD_INT 30
 821: PUSH
 822: LD_INT 1
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: LIST
 833: PUSH
 834: EMPTY
 835: LIST
 836: LIST
 837: PPUSH
 838: CALL_OW 69
 842: PUSH
 843: FOR_IN
 844: IFFALSE 908
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 846: LD_VAR 0 1
 850: PPUSH
 851: CALL_OW 274
 855: PPUSH
 856: LD_INT 1
 858: PPUSH
 859: LD_INT 9999
 861: PPUSH
 862: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 866: LD_VAR 0 1
 870: PPUSH
 871: CALL_OW 274
 875: PPUSH
 876: LD_INT 2
 878: PPUSH
 879: LD_INT 9999
 881: PPUSH
 882: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 886: LD_VAR 0 1
 890: PPUSH
 891: CALL_OW 274
 895: PPUSH
 896: LD_INT 3
 898: PPUSH
 899: LD_INT 9999
 901: PPUSH
 902: CALL_OW 277
// end ;
 906: GO 843
 908: POP
 909: POP
// end ; end_of_file
 910: PPOPN 1
 912: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Platonov , Kirilenkova , Belkov , Belkov2 ; export Vsevolod , vsevolodTeam , Petr , Igor , Boris ; export ConvoyBoris , ConvoyIbrahim ; export function PrepareRussians ; begin
 913: LD_INT 0
 915: PPUSH
// PrepareHeroes ;
 916: CALL 925 0 0
// end ;
 920: LD_VAR 0 1
 924: RET
// function PrepareHeroes ; var i , j , car , tmp , cargoList , bigCargoList , point , areaPoints , nearPosition , burlakPosition , distance , index ; begin
 925: LD_INT 0
 927: PPUSH
 928: PPUSH
 929: PPUSH
 930: PPUSH
 931: PPUSH
 932: PPUSH
 933: PPUSH
 934: PPUSH
 935: PPUSH
 936: PPUSH
 937: PPUSH
 938: PPUSH
 939: PPUSH
// point = [ 170 , 208 ] ;
 940: LD_ADDR_VAR 0 8
 944: PUSH
 945: LD_INT 170
 947: PUSH
 948: LD_INT 208
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: ST_TO_ADDR
// areaPoints = AreaToList ( RussianSpawnArea1 , 0 ) ;
 955: LD_ADDR_VAR 0 9
 959: PUSH
 960: LD_INT 1
 962: PPUSH
 963: LD_INT 0
 965: PPUSH
 966: CALL_OW 517
 970: ST_TO_ADDR
// uc_side = 3 ;
 971: LD_ADDR_OWVAR 20
 975: PUSH
 976: LD_INT 3
 978: ST_TO_ADDR
// uc_nation = 3 ;
 979: LD_ADDR_OWVAR 21
 983: PUSH
 984: LD_INT 3
 986: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , 0 ) ;
 987: LD_ADDR_EXP 39
 991: PUSH
 992: LD_STRING Burlak
 994: PPUSH
 995: LD_INT 1
 997: PPUSH
 998: LD_INT 0
1000: PPUSH
1001: CALL 11785 0 3
1005: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , true , 0 ) ;
1006: LD_ADDR_EXP 44
1010: PUSH
1011: LD_STRING Titov
1013: PPUSH
1014: LD_INT 1
1016: PPUSH
1017: LD_INT 0
1019: PPUSH
1020: CALL 11785 0 3
1024: ST_TO_ADDR
// Dolgov := PrepareUnitExt ( Dolgov , true , 0 ) ;
1025: LD_ADDR_EXP 45
1029: PUSH
1030: LD_STRING Dolgov
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_INT 0
1038: PPUSH
1039: CALL 11785 0 3
1043: ST_TO_ADDR
// Lipshchin := PrepareUnitExt ( Lipshchin , true , 0 ) ;
1044: LD_ADDR_EXP 46
1048: PUSH
1049: LD_STRING Lipshchin
1051: PPUSH
1052: LD_INT 1
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL 11785 0 3
1062: ST_TO_ADDR
// Karamazov := PrepareUnitExt ( Karamazov , true , class_engineer ) ;
1063: LD_ADDR_EXP 40
1067: PUSH
1068: LD_STRING Karamazov
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: LD_INT 2
1076: PPUSH
1077: CALL 11785 0 3
1081: ST_TO_ADDR
// Petrovova := PrepareUnitExt ( Petrovova , true , 0 ) ;
1082: LD_ADDR_EXP 41
1086: PUSH
1087: LD_STRING Petrovova
1089: PPUSH
1090: LD_INT 1
1092: PPUSH
1093: LD_INT 0
1095: PPUSH
1096: CALL 11785 0 3
1100: ST_TO_ADDR
// Gleb := PrepareUnitExt ( Gleb , true , 0 ) ;
1101: LD_ADDR_EXP 42
1105: PUSH
1106: LD_STRING Gleb
1108: PPUSH
1109: LD_INT 1
1111: PPUSH
1112: LD_INT 0
1114: PPUSH
1115: CALL 11785 0 3
1119: ST_TO_ADDR
// Petrosyan := PrepareUnitExt ( Petrosyan , true , 0 ) ;
1120: LD_ADDR_EXP 43
1124: PUSH
1125: LD_STRING Petrosyan
1127: PPUSH
1128: LD_INT 1
1130: PPUSH
1131: LD_INT 0
1133: PPUSH
1134: CALL 11785 0 3
1138: ST_TO_ADDR
// Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
1139: LD_ADDR_EXP 47
1143: PUSH
1144: LD_STRING Platonov
1146: PPUSH
1147: LD_INT 0
1149: PPUSH
1150: LD_INT 0
1152: PPUSH
1153: CALL 11785 0 3
1157: ST_TO_ADDR
// if TestCharacters ( 04_Kirilenkova ) then
1158: LD_STRING 04_Kirilenkova
1160: PPUSH
1161: CALL_OW 28
1165: IFFALSE 1192
// begin Kirilenkova := CreateCharacter ( 04_Kirilenkova ) ;
1167: LD_ADDR_EXP 48
1171: PUSH
1172: LD_STRING 04_Kirilenkova
1174: PPUSH
1175: CALL_OW 34
1179: ST_TO_ADDR
// SetClass ( Kirilenkova , class_scientistic ) ;
1180: LD_EXP 48
1184: PPUSH
1185: LD_INT 4
1187: PPUSH
1188: CALL_OW 336
// end ; if TestCharacters ( 04_Belkov ) then
1192: LD_STRING 04_Belkov
1194: PPUSH
1195: CALL_OW 28
1199: IFFALSE 1226
// begin Belkov := CreateCharacter ( 04_Belkov ) ;
1201: LD_ADDR_EXP 49
1205: PUSH
1206: LD_STRING 04_Belkov
1208: PPUSH
1209: CALL_OW 34
1213: ST_TO_ADDR
// SetClass ( Belkov , class_soldier ) ;
1214: LD_EXP 49
1218: PPUSH
1219: LD_INT 1
1221: PPUSH
1222: CALL_OW 336
// end ; if TestCharacters ( 04_Belkov2 ) then
1226: LD_STRING 04_Belkov2
1228: PPUSH
1229: CALL_OW 28
1233: IFFALSE 1260
// begin Belkov2 := CreateCharacter ( 04_Belkov2 ) ;
1235: LD_ADDR_EXP 50
1239: PUSH
1240: LD_STRING 04_Belkov2
1242: PPUSH
1243: CALL_OW 34
1247: ST_TO_ADDR
// SetClass ( Belkov2 , class_soldier ) ;
1248: LD_EXP 50
1252: PPUSH
1253: LD_INT 1
1255: PPUSH
1256: CALL_OW 336
// end ; for i := 1 to vehiclesFrom05 do
1260: LD_ADDR_VAR 0 2
1264: PUSH
1265: DOUBLE
1266: LD_INT 1
1268: DEC
1269: ST_TO_ADDR
1270: LD_EXP 1
1274: PUSH
1275: FOR_TO
1276: IFFALSE 1938
// begin uc_nation = vehiclesFrom05 [ i ] [ 1 ] ;
1278: LD_ADDR_OWVAR 21
1282: PUSH
1283: LD_EXP 1
1287: PUSH
1288: LD_VAR 0 2
1292: ARRAY
1293: PUSH
1294: LD_INT 1
1296: ARRAY
1297: ST_TO_ADDR
// vc_chassis := vehiclesFrom05 [ i ] [ 2 ] ;
1298: LD_ADDR_OWVAR 37
1302: PUSH
1303: LD_EXP 1
1307: PUSH
1308: LD_VAR 0 2
1312: ARRAY
1313: PUSH
1314: LD_INT 2
1316: ARRAY
1317: ST_TO_ADDR
// vc_engine = vehiclesFrom05 [ i ] [ 3 ] ;
1318: LD_ADDR_OWVAR 39
1322: PUSH
1323: LD_EXP 1
1327: PUSH
1328: LD_VAR 0 2
1332: ARRAY
1333: PUSH
1334: LD_INT 3
1336: ARRAY
1337: ST_TO_ADDR
// vc_control = vehiclesFrom05 [ i ] [ 4 ] ;
1338: LD_ADDR_OWVAR 38
1342: PUSH
1343: LD_EXP 1
1347: PUSH
1348: LD_VAR 0 2
1352: ARRAY
1353: PUSH
1354: LD_INT 4
1356: ARRAY
1357: ST_TO_ADDR
// vc_weapon := vehiclesFrom05 [ i ] [ 5 ] ;
1358: LD_ADDR_OWVAR 40
1362: PUSH
1363: LD_EXP 1
1367: PUSH
1368: LD_VAR 0 2
1372: ARRAY
1373: PUSH
1374: LD_INT 5
1376: ARRAY
1377: ST_TO_ADDR
// uc_direction := 0 ;
1378: LD_ADDR_OWVAR 24
1382: PUSH
1383: LD_INT 0
1385: ST_TO_ADDR
// vc_fuel_battery := Rand ( 10 , 15 ) ;
1386: LD_ADDR_OWVAR 41
1390: PUSH
1391: LD_INT 10
1393: PPUSH
1394: LD_INT 15
1396: PPUSH
1397: CALL_OW 12
1401: ST_TO_ADDR
// car := CreateVehicle ;
1402: LD_ADDR_VAR 0 4
1406: PUSH
1407: CALL_OW 45
1411: ST_TO_ADDR
// distance = 999 ;
1412: LD_ADDR_VAR 0 12
1416: PUSH
1417: LD_INT 999
1419: ST_TO_ADDR
// index = 1 ;
1420: LD_ADDR_VAR 0 13
1424: PUSH
1425: LD_INT 1
1427: ST_TO_ADDR
// for j := 1 to areaPoints [ 1 ] do
1428: LD_ADDR_VAR 0 3
1432: PUSH
1433: DOUBLE
1434: LD_INT 1
1436: DEC
1437: ST_TO_ADDR
1438: LD_VAR 0 9
1442: PUSH
1443: LD_INT 1
1445: ARRAY
1446: PUSH
1447: FOR_TO
1448: IFFALSE 1619
// begin if GetDistXY ( point [ 1 ] , point [ 2 ] , areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ) < distance then
1450: LD_VAR 0 8
1454: PUSH
1455: LD_INT 1
1457: ARRAY
1458: PPUSH
1459: LD_VAR 0 8
1463: PUSH
1464: LD_INT 2
1466: ARRAY
1467: PPUSH
1468: LD_VAR 0 9
1472: PUSH
1473: LD_INT 1
1475: ARRAY
1476: PUSH
1477: LD_VAR 0 3
1481: ARRAY
1482: PPUSH
1483: LD_VAR 0 9
1487: PUSH
1488: LD_INT 2
1490: ARRAY
1491: PUSH
1492: LD_VAR 0 3
1496: ARRAY
1497: PPUSH
1498: CALL_OW 298
1502: PUSH
1503: LD_VAR 0 12
1507: LESS
1508: IFFALSE 1617
// begin distance = GetDistXY ( point [ 1 ] , point [ 2 ] , areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ) ;
1510: LD_ADDR_VAR 0 12
1514: PUSH
1515: LD_VAR 0 8
1519: PUSH
1520: LD_INT 1
1522: ARRAY
1523: PPUSH
1524: LD_VAR 0 8
1528: PUSH
1529: LD_INT 2
1531: ARRAY
1532: PPUSH
1533: LD_VAR 0 9
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PUSH
1542: LD_VAR 0 3
1546: ARRAY
1547: PPUSH
1548: LD_VAR 0 9
1552: PUSH
1553: LD_INT 2
1555: ARRAY
1556: PUSH
1557: LD_VAR 0 3
1561: ARRAY
1562: PPUSH
1563: CALL_OW 298
1567: ST_TO_ADDR
// nearPosition = [ areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ] ;
1568: LD_ADDR_VAR 0 10
1572: PUSH
1573: LD_VAR 0 9
1577: PUSH
1578: LD_INT 1
1580: ARRAY
1581: PUSH
1582: LD_VAR 0 3
1586: ARRAY
1587: PUSH
1588: LD_VAR 0 9
1592: PUSH
1593: LD_INT 2
1595: ARRAY
1596: PUSH
1597: LD_VAR 0 3
1601: ARRAY
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: ST_TO_ADDR
// index = j ;
1607: LD_ADDR_VAR 0 13
1611: PUSH
1612: LD_VAR 0 3
1616: ST_TO_ADDR
// end ; end ;
1617: GO 1447
1619: POP
1620: POP
// if not burlakPosition then
1621: LD_VAR 0 11
1625: NOT
1626: IFFALSE 1638
// burlakPosition = nearPosition ;
1628: LD_ADDR_VAR 0 11
1632: PUSH
1633: LD_VAR 0 10
1637: ST_TO_ADDR
// if areaPoints then
1638: LD_VAR 0 9
1642: IFFALSE 1690
// begin areaPoints = Delete2D ( areaPoints , 1 , index ) ;
1644: LD_ADDR_VAR 0 9
1648: PUSH
1649: LD_VAR 0 9
1653: PPUSH
1654: LD_INT 1
1656: PPUSH
1657: LD_VAR 0 13
1661: PPUSH
1662: CALL 12614 0 3
1666: ST_TO_ADDR
// areaPoints = Delete2D ( areaPoints , 2 , index ) ;
1667: LD_ADDR_VAR 0 9
1671: PUSH
1672: LD_VAR 0 9
1676: PPUSH
1677: LD_INT 2
1679: PPUSH
1680: LD_VAR 0 13
1684: PPUSH
1685: CALL 12614 0 3
1689: ST_TO_ADDR
// end ; PlaceUnitXY ( car , nearPosition [ 1 ] , nearPosition [ 2 ] , false ) ;
1690: LD_VAR 0 4
1694: PPUSH
1695: LD_VAR 0 10
1699: PUSH
1700: LD_INT 1
1702: ARRAY
1703: PPUSH
1704: LD_VAR 0 10
1708: PUSH
1709: LD_INT 2
1711: ARRAY
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 48
// case vehiclesFrom05 [ i ] [ 6 ] of Bur :
1720: LD_EXP 1
1724: PUSH
1725: LD_VAR 0 2
1729: ARRAY
1730: PUSH
1731: LD_INT 6
1733: ARRAY
1734: PUSH
1735: LD_STRING Bur
1737: DOUBLE
1738: EQUAL
1739: IFTRUE 1743
1741: GO 1760
1743: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
1744: LD_EXP 39
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL_OW 52
1758: GO 1936
1760: LD_STRING Kar
1762: DOUBLE
1763: EQUAL
1764: IFTRUE 1768
1766: GO 1785
1768: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
1769: LD_EXP 40
1773: PPUSH
1774: LD_VAR 0 4
1778: PPUSH
1779: CALL_OW 52
1783: GO 1936
1785: LD_STRING Ptr
1787: DOUBLE
1788: EQUAL
1789: IFTRUE 1793
1791: GO 1810
1793: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
1794: LD_EXP 41
1798: PPUSH
1799: LD_VAR 0 4
1803: PPUSH
1804: CALL_OW 52
1808: GO 1936
1810: LD_STRING Glb
1812: DOUBLE
1813: EQUAL
1814: IFTRUE 1818
1816: GO 1835
1818: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
1819: LD_EXP 42
1823: PPUSH
1824: LD_VAR 0 4
1828: PPUSH
1829: CALL_OW 52
1833: GO 1936
1835: LD_STRING Pet
1837: DOUBLE
1838: EQUAL
1839: IFTRUE 1843
1841: GO 1860
1843: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
1844: LD_EXP 43
1848: PPUSH
1849: LD_VAR 0 4
1853: PPUSH
1854: CALL_OW 52
1858: GO 1936
1860: LD_STRING Dol
1862: DOUBLE
1863: EQUAL
1864: IFTRUE 1868
1866: GO 1885
1868: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
1869: LD_EXP 45
1873: PPUSH
1874: LD_VAR 0 4
1878: PPUSH
1879: CALL_OW 52
1883: GO 1936
1885: LD_STRING Lip
1887: DOUBLE
1888: EQUAL
1889: IFTRUE 1893
1891: GO 1910
1893: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
1894: LD_EXP 46
1898: PPUSH
1899: LD_VAR 0 4
1903: PPUSH
1904: CALL_OW 52
1908: GO 1936
1910: LD_STRING Tit
1912: DOUBLE
1913: EQUAL
1914: IFTRUE 1918
1916: GO 1935
1918: POP
// PlaceHumanInUnit ( Titov , car ) ; end ;
1919: LD_EXP 44
1923: PPUSH
1924: LD_VAR 0 4
1928: PPUSH
1929: CALL_OW 52
1933: GO 1936
1935: POP
// end ;
1936: GO 1275
1938: POP
1939: POP
// cargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
1940: LD_ADDR_VAR 0 6
1944: PUSH
1945: LD_INT 22
1947: PUSH
1948: LD_INT 3
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: PUSH
1955: LD_INT 21
1957: PUSH
1958: LD_INT 2
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: LD_INT 34
1970: PUSH
1971: LD_INT 51
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 34
1980: PUSH
1981: LD_INT 32
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: PUSH
1988: LD_INT 34
1990: PUSH
1991: LD_INT 12
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: LIST
2008: PPUSH
2009: CALL_OW 69
2013: ST_TO_ADDR
// bigCargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 89 ] ] ) ;
2014: LD_ADDR_VAR 0 7
2018: PUSH
2019: LD_INT 22
2021: PUSH
2022: LD_INT 3
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PUSH
2029: LD_INT 21
2031: PUSH
2032: LD_INT 2
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: PUSH
2039: LD_INT 34
2041: PUSH
2042: LD_INT 89
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: PPUSH
2054: CALL_OW 69
2058: ST_TO_ADDR
// if cargoList then
2059: LD_VAR 0 6
2063: IFFALSE 2253
// for i = 1 to cargoList do
2065: LD_ADDR_VAR 0 2
2069: PUSH
2070: DOUBLE
2071: LD_INT 1
2073: DEC
2074: ST_TO_ADDR
2075: LD_VAR 0 6
2079: PUSH
2080: FOR_TO
2081: IFFALSE 2251
// if resourcesFrom05 then
2083: LD_EXP 2
2087: IFFALSE 2249
// begin if not resourcesFrom05 [ i ] [ 1 ] > 100 or resourcesFrom05 [ i ] [ 2 ] > 100 or resourcesFrom05 [ i ] [ 3 ] > 100 then
2089: LD_EXP 2
2093: PUSH
2094: LD_VAR 0 2
2098: ARRAY
2099: PUSH
2100: LD_INT 1
2102: ARRAY
2103: PUSH
2104: LD_INT 100
2106: GREATER
2107: NOT
2108: PUSH
2109: LD_EXP 2
2113: PUSH
2114: LD_VAR 0 2
2118: ARRAY
2119: PUSH
2120: LD_INT 2
2122: ARRAY
2123: PUSH
2124: LD_INT 100
2126: GREATER
2127: OR
2128: PUSH
2129: LD_EXP 2
2133: PUSH
2134: LD_VAR 0 2
2138: ARRAY
2139: PUSH
2140: LD_INT 3
2142: ARRAY
2143: PUSH
2144: LD_INT 100
2146: GREATER
2147: OR
2148: IFFALSE 2249
// begin AddCargo ( cargoList [ i ] , 1 , resourcesFrom05 [ i ] [ 1 ] ) ;
2150: LD_VAR 0 6
2154: PUSH
2155: LD_VAR 0 2
2159: ARRAY
2160: PPUSH
2161: LD_INT 1
2163: PPUSH
2164: LD_EXP 2
2168: PUSH
2169: LD_VAR 0 2
2173: ARRAY
2174: PUSH
2175: LD_INT 1
2177: ARRAY
2178: PPUSH
2179: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resourcesFrom05 [ i ] [ 2 ] ) ;
2183: LD_VAR 0 6
2187: PUSH
2188: LD_VAR 0 2
2192: ARRAY
2193: PPUSH
2194: LD_INT 2
2196: PPUSH
2197: LD_EXP 2
2201: PUSH
2202: LD_VAR 0 2
2206: ARRAY
2207: PUSH
2208: LD_INT 2
2210: ARRAY
2211: PPUSH
2212: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resourcesFrom05 [ i ] [ 3 ] ) ;
2216: LD_VAR 0 6
2220: PUSH
2221: LD_VAR 0 2
2225: ARRAY
2226: PPUSH
2227: LD_INT 3
2229: PPUSH
2230: LD_EXP 2
2234: PUSH
2235: LD_VAR 0 2
2239: ARRAY
2240: PUSH
2241: LD_INT 3
2243: ARRAY
2244: PPUSH
2245: CALL_OW 291
// end ; end ;
2249: GO 2080
2251: POP
2252: POP
// if bigCargoList then
2253: LD_VAR 0 7
2257: IFFALSE 2446
// for i = 1 to bigCargoList do
2259: LD_ADDR_VAR 0 2
2263: PUSH
2264: DOUBLE
2265: LD_INT 1
2267: DEC
2268: ST_TO_ADDR
2269: LD_VAR 0 7
2273: PUSH
2274: FOR_TO
2275: IFFALSE 2444
// if resourcesFrom05 then
2277: LD_EXP 2
2281: IFFALSE 2442
// begin if resourcesFrom05 [ i ] [ 1 ] > 100 or resourcesFrom05 [ i ] [ 2 ] > 100 or resourcesFrom05 [ i ] [ 3 ] > 100 then
2283: LD_EXP 2
2287: PUSH
2288: LD_VAR 0 2
2292: ARRAY
2293: PUSH
2294: LD_INT 1
2296: ARRAY
2297: PUSH
2298: LD_INT 100
2300: GREATER
2301: PUSH
2302: LD_EXP 2
2306: PUSH
2307: LD_VAR 0 2
2311: ARRAY
2312: PUSH
2313: LD_INT 2
2315: ARRAY
2316: PUSH
2317: LD_INT 100
2319: GREATER
2320: OR
2321: PUSH
2322: LD_EXP 2
2326: PUSH
2327: LD_VAR 0 2
2331: ARRAY
2332: PUSH
2333: LD_INT 3
2335: ARRAY
2336: PUSH
2337: LD_INT 100
2339: GREATER
2340: OR
2341: IFFALSE 2442
// begin AddCargo ( bigCargoList [ i ] , 1 , resourcesFrom05 [ i ] [ 1 ] ) ;
2343: LD_VAR 0 7
2347: PUSH
2348: LD_VAR 0 2
2352: ARRAY
2353: PPUSH
2354: LD_INT 1
2356: PPUSH
2357: LD_EXP 2
2361: PUSH
2362: LD_VAR 0 2
2366: ARRAY
2367: PUSH
2368: LD_INT 1
2370: ARRAY
2371: PPUSH
2372: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 2 , resourcesFrom05 [ i ] [ 2 ] ) ;
2376: LD_VAR 0 7
2380: PUSH
2381: LD_VAR 0 2
2385: ARRAY
2386: PPUSH
2387: LD_INT 2
2389: PPUSH
2390: LD_EXP 2
2394: PUSH
2395: LD_VAR 0 2
2399: ARRAY
2400: PUSH
2401: LD_INT 2
2403: ARRAY
2404: PPUSH
2405: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 3 , resourcesFrom05 [ i ] [ 3 ] ) ;
2409: LD_VAR 0 7
2413: PUSH
2414: LD_VAR 0 2
2418: ARRAY
2419: PPUSH
2420: LD_INT 3
2422: PPUSH
2423: LD_EXP 2
2427: PUSH
2428: LD_VAR 0 2
2432: ARRAY
2433: PUSH
2434: LD_INT 3
2436: ARRAY
2437: PPUSH
2438: CALL_OW 291
// end ; end ;
2442: GO 2274
2444: POP
2445: POP
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_class , class_engineer ] ] ) then
2446: LD_INT 22
2448: PUSH
2449: LD_INT 3
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PUSH
2456: LD_INT 21
2458: PUSH
2459: LD_INT 1
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PUSH
2466: LD_INT 23
2468: PUSH
2469: LD_INT 3
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: PUSH
2476: LD_INT 25
2478: PUSH
2479: LD_INT 2
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: EMPTY
2487: LIST
2488: LIST
2489: LIST
2490: LIST
2491: PPUSH
2492: CALL_OW 69
2496: NOT
2497: IFFALSE 2602
// begin if IsOk ( Lipshchin ) then
2499: LD_EXP 46
2503: PPUSH
2504: CALL_OW 302
2508: IFFALSE 2524
// SetClass ( Lipshchin , class_engineer ) else
2510: LD_EXP 46
2514: PPUSH
2515: LD_INT 2
2517: PPUSH
2518: CALL_OW 336
2522: GO 2602
// begin tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ;
2524: LD_ADDR_VAR 0 5
2528: PUSH
2529: LD_INT 22
2531: PUSH
2532: LD_INT 3
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: PUSH
2539: LD_INT 21
2541: PUSH
2542: LD_INT 1
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: PUSH
2549: LD_INT 23
2551: PUSH
2552: LD_INT 3
2554: PUSH
2555: EMPTY
2556: LIST
2557: LIST
2558: PUSH
2559: LD_INT 50
2561: PUSH
2562: EMPTY
2563: LIST
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: PPUSH
2571: CALL_OW 69
2575: ST_TO_ADDR
// SetClass ( tmp [ rand ( 0 , tmp ) ] , class_engineer ) ;
2576: LD_VAR 0 5
2580: PUSH
2581: LD_INT 0
2583: PPUSH
2584: LD_VAR 0 5
2588: PPUSH
2589: CALL_OW 12
2593: ARRAY
2594: PPUSH
2595: LD_INT 2
2597: PPUSH
2598: CALL_OW 336
// end ; end ; SetTech ( tech_ApeLang , 3 , apeTechsStatus [ 1 ] ) ;
2602: LD_INT 1
2604: PPUSH
2605: LD_INT 3
2607: PPUSH
2608: LD_EXP 5
2612: PUSH
2613: LD_INT 1
2615: ARRAY
2616: PPUSH
2617: CALL_OW 322
// SetTech ( tech_ApePsych , 3 , apeTechsStatus [ 2 ] ) ;
2621: LD_INT 2
2623: PPUSH
2624: LD_INT 3
2626: PPUSH
2627: LD_EXP 5
2631: PUSH
2632: LD_INT 2
2634: ARRAY
2635: PPUSH
2636: CALL_OW 322
// SetTech ( tech_ApeAgres , 3 , apeTechsStatus [ 3 ] ) ;
2640: LD_INT 11
2642: PPUSH
2643: LD_INT 3
2645: PPUSH
2646: LD_EXP 5
2650: PUSH
2651: LD_INT 3
2653: ARRAY
2654: PPUSH
2655: CALL_OW 322
// end ;
2659: LD_VAR 0 1
2663: RET
// export function PrepareVsevolod ; var i , un ; begin
2664: LD_INT 0
2666: PPUSH
2667: PPUSH
2668: PPUSH
// uc_side = 6 ;
2669: LD_ADDR_OWVAR 20
2673: PUSH
2674: LD_INT 6
2676: ST_TO_ADDR
// uc_nation = 3 ;
2677: LD_ADDR_OWVAR 21
2681: PUSH
2682: LD_INT 3
2684: ST_TO_ADDR
// vsevolodTeam = [ ] ;
2685: LD_ADDR_EXP 52
2689: PUSH
2690: EMPTY
2691: ST_TO_ADDR
// Vsevolod := PrepareUnitExt ( Vsevolod , false , class_soldier ) ;
2692: LD_ADDR_EXP 51
2696: PUSH
2697: LD_STRING Vsevolod
2699: PPUSH
2700: LD_INT 0
2702: PPUSH
2703: LD_INT 1
2705: PPUSH
2706: CALL 11785 0 3
2710: ST_TO_ADDR
// PlaceUnitArea ( Vsevolod , VsevolodSpawnArea , false ) ;
2711: LD_EXP 51
2715: PPUSH
2716: LD_INT 7
2718: PPUSH
2719: LD_INT 0
2721: PPUSH
2722: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Vsevolod ;
2726: LD_ADDR_EXP 52
2730: PUSH
2731: LD_EXP 52
2735: PUSH
2736: LD_EXP 51
2740: ADD
2741: ST_TO_ADDR
// Petr = PrepareUnitExt ( SPetr , false , class_engineer ) ;
2742: LD_ADDR_EXP 53
2746: PUSH
2747: LD_STRING SPetr
2749: PPUSH
2750: LD_INT 0
2752: PPUSH
2753: LD_INT 2
2755: PPUSH
2756: CALL 11785 0 3
2760: ST_TO_ADDR
// PlaceUnitArea ( Petr , VsevolodSpawnArea , false ) ;
2761: LD_EXP 53
2765: PPUSH
2766: LD_INT 7
2768: PPUSH
2769: LD_INT 0
2771: PPUSH
2772: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Petr ;
2776: LD_ADDR_EXP 52
2780: PUSH
2781: LD_EXP 52
2785: PUSH
2786: LD_EXP 53
2790: ADD
2791: ST_TO_ADDR
// Igor = PrepareUnitExt ( SIgor , false , class_soldier ) ;
2792: LD_ADDR_EXP 54
2796: PUSH
2797: LD_STRING SIgor
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: LD_INT 1
2805: PPUSH
2806: CALL 11785 0 3
2810: ST_TO_ADDR
// PlaceUnitArea ( Igor , VsevolodSpawnArea , false ) ;
2811: LD_EXP 54
2815: PPUSH
2816: LD_INT 7
2818: PPUSH
2819: LD_INT 0
2821: PPUSH
2822: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Igor ;
2826: LD_ADDR_EXP 52
2830: PUSH
2831: LD_EXP 52
2835: PUSH
2836: LD_EXP 54
2840: ADD
2841: ST_TO_ADDR
// Boris = PrepareUnitExt ( SBoris , false , class_soldier ) ;
2842: LD_ADDR_EXP 55
2846: PUSH
2847: LD_STRING SBoris
2849: PPUSH
2850: LD_INT 0
2852: PPUSH
2853: LD_INT 1
2855: PPUSH
2856: CALL 11785 0 3
2860: ST_TO_ADDR
// PlaceUnitArea ( Boris , VsevolodSpawnArea , false ) ;
2861: LD_EXP 55
2865: PPUSH
2866: LD_INT 7
2868: PPUSH
2869: LD_INT 0
2871: PPUSH
2872: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Boris ;
2876: LD_ADDR_EXP 52
2880: PUSH
2881: LD_EXP 52
2885: PUSH
2886: LD_EXP 55
2890: ADD
2891: ST_TO_ADDR
// end ;
2892: LD_VAR 0 1
2896: RET
// export function SpawnPlatonovReinforces ; var i , un , veh ; begin
2897: LD_INT 0
2899: PPUSH
2900: PPUSH
2901: PPUSH
2902: PPUSH
// uc_side = 3 ;
2903: LD_ADDR_OWVAR 20
2907: PUSH
2908: LD_INT 3
2910: ST_TO_ADDR
// uc_nation = 3 ;
2911: LD_ADDR_OWVAR 21
2915: PUSH
2916: LD_INT 3
2918: ST_TO_ADDR
// PrepareSoldier ( false , 4 ) ;
2919: LD_INT 0
2921: PPUSH
2922: LD_INT 4
2924: PPUSH
2925: CALL_OW 381
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] , rand ( 50 , 60 ) ) ;
2929: LD_INT 22
2931: PPUSH
2932: LD_INT 1
2934: PPUSH
2935: LD_INT 1
2937: PPUSH
2938: LD_INT 43
2940: PUSH
2941: LD_INT 44
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PUSH
2948: LD_INT 1
2950: PPUSH
2951: LD_INT 2
2953: PPUSH
2954: CALL_OW 12
2958: ARRAY
2959: PPUSH
2960: LD_INT 50
2962: PPUSH
2963: LD_INT 60
2965: PPUSH
2966: CALL_OW 12
2970: PPUSH
2971: CALL 46260 0 5
// veh = CreateVehicle ;
2975: LD_ADDR_VAR 0 4
2979: PUSH
2980: CALL_OW 45
2984: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
2985: LD_VAR 0 4
2989: PPUSH
2990: LD_INT 0
2992: PPUSH
2993: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 230 , false ) ;
2997: LD_VAR 0 4
3001: PPUSH
3002: LD_INT 134
3004: PPUSH
3005: LD_INT 230
3007: PPUSH
3008: LD_INT 0
3010: PPUSH
3011: CALL_OW 48
// if Belkov then
3015: LD_EXP 49
3019: IFFALSE 3037
// PlaceHumanInUnit ( Belkov , veh ) else
3021: LD_EXP 49
3025: PPUSH
3026: LD_VAR 0 4
3030: PPUSH
3031: CALL_OW 52
3035: GO 3090
// if Difficulty = 1 or Difficulty = 2 then
3037: LD_OWVAR 67
3041: PUSH
3042: LD_INT 1
3044: EQUAL
3045: PUSH
3046: LD_OWVAR 67
3050: PUSH
3051: LD_INT 2
3053: EQUAL
3054: OR
3055: IFFALSE 3090
// begin ConvoyBoris = PrepareUnitExt ( SCBoris , false , class_soldier ) ;
3057: LD_ADDR_EXP 56
3061: PUSH
3062: LD_STRING SCBoris
3064: PPUSH
3065: LD_INT 0
3067: PPUSH
3068: LD_INT 1
3070: PPUSH
3071: CALL 11785 0 3
3075: ST_TO_ADDR
// PlaceHumanInUnit ( ConvoyBoris , veh ) ;
3076: LD_EXP 56
3080: PPUSH
3081: LD_VAR 0 4
3085: PPUSH
3086: CALL_OW 52
// end ; PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3090: LD_INT 22
3092: PPUSH
3093: LD_INT 1
3095: PPUSH
3096: LD_INT 1
3098: PPUSH
3099: LD_INT 51
3101: PPUSH
3102: LD_INT 50
3104: PPUSH
3105: LD_INT 60
3107: PPUSH
3108: CALL_OW 12
3112: PPUSH
3113: CALL 46260 0 5
// veh = CreateVehicle ;
3117: LD_ADDR_VAR 0 4
3121: PUSH
3122: CALL_OW 45
3126: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3127: LD_VAR 0 4
3131: PPUSH
3132: LD_INT 0
3134: PPUSH
3135: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 233 , false ) ;
3139: LD_VAR 0 4
3143: PPUSH
3144: LD_INT 134
3146: PPUSH
3147: LD_INT 233
3149: PPUSH
3150: LD_INT 0
3152: PPUSH
3153: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
3157: LD_VAR 0 4
3161: PPUSH
3162: LD_INT 1
3164: PPUSH
3165: LD_INT 100
3167: PPUSH
3168: CALL_OW 290
// if Belkov2 then
3172: LD_EXP 50
3176: IFFALSE 3194
// PlaceHumanInUnit ( Belkov2 , veh ) else
3178: LD_EXP 50
3182: PPUSH
3183: LD_VAR 0 4
3187: PPUSH
3188: CALL_OW 52
3192: GO 3237
// if Difficulty = 1 then
3194: LD_OWVAR 67
3198: PUSH
3199: LD_INT 1
3201: EQUAL
3202: IFFALSE 3237
// begin ConvoyIbrahim = PrepareUnitExt ( SCIbrahim , false , class_soldier ) ;
3204: LD_ADDR_EXP 57
3208: PUSH
3209: LD_STRING SCIbrahim
3211: PPUSH
3212: LD_INT 0
3214: PPUSH
3215: LD_INT 1
3217: PPUSH
3218: CALL 11785 0 3
3222: ST_TO_ADDR
// PlaceHumanInUnit ( ConvoyIbrahim , veh ) ;
3223: LD_EXP 57
3227: PPUSH
3228: LD_VAR 0 4
3232: PPUSH
3233: CALL_OW 52
// end ; if Kirilenkova then
3237: LD_EXP 48
3241: IFFALSE 3339
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3243: LD_INT 22
3245: PPUSH
3246: LD_INT 1
3248: PPUSH
3249: LD_INT 1
3251: PPUSH
3252: LD_INT 51
3254: PPUSH
3255: LD_INT 50
3257: PPUSH
3258: LD_INT 60
3260: PPUSH
3261: CALL_OW 12
3265: PPUSH
3266: CALL 46260 0 5
// veh = CreateVehicle ;
3270: LD_ADDR_VAR 0 4
3274: PUSH
3275: CALL_OW 45
3279: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3280: LD_VAR 0 4
3284: PPUSH
3285: LD_INT 0
3287: PPUSH
3288: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 236 , false ) ;
3292: LD_VAR 0 4
3296: PPUSH
3297: LD_INT 134
3299: PPUSH
3300: LD_INT 236
3302: PPUSH
3303: LD_INT 0
3305: PPUSH
3306: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
3310: LD_VAR 0 4
3314: PPUSH
3315: LD_INT 1
3317: PPUSH
3318: LD_INT 100
3320: PPUSH
3321: CALL_OW 290
// PlaceHumanInUnit ( Kirilenkova , veh ) ;
3325: LD_EXP 48
3329: PPUSH
3330: LD_VAR 0 4
3334: PPUSH
3335: CALL_OW 52
// end ; end ; end_of_file
3339: LD_VAR 0 1
3343: RET
// export VanHouten ; export ovsyenkoBase , terminalBase , headAmBase ; export trapTeam , convoyTeam , attackTeam ; export function PrepareAmericans ; begin
3344: LD_INT 0
3346: PPUSH
// PrepareOvsyenko ;
3347: CALL 3364 0 0
// PrepareTerminal ;
3351: CALL 3565 0 0
// PrepareMainAmericanBase ;
3355: CALL 3648 0 0
// end ;
3359: LD_VAR 0 1
3363: RET
// function PrepareOvsyenko ; var soldiersAmount ; begin
3364: LD_INT 0
3366: PPUSH
3367: PPUSH
// uc_side = 1 ;
3368: LD_ADDR_OWVAR 20
3372: PUSH
3373: LD_INT 1
3375: ST_TO_ADDR
// uc_nation = nation_american ;
3376: LD_ADDR_OWVAR 21
3380: PUSH
3381: LD_INT 1
3383: ST_TO_ADDR
// soldiersAmount = 3 ;
3384: LD_ADDR_VAR 0 2
3388: PUSH
3389: LD_INT 3
3391: ST_TO_ADDR
// if fastBreakthrough then
3392: LD_EXP 3
3396: IFFALSE 3414
// begin RemoveUnit ( ovs_bun2 ) ;
3398: LD_INT 229
3400: PPUSH
3401: CALL_OW 64
// RemoveUnit ( ovs_bun3 ) ;
3405: LD_INT 258
3407: PPUSH
3408: CALL_OW 64
// end else
3412: GO 3422
// soldiersAmount = 4 ;
3414: LD_ADDR_VAR 0 2
3418: PUSH
3419: LD_INT 4
3421: ST_TO_ADDR
// ovsyenkoBase := Nef_PrepareBase ( ovsyenko , OvsyenkoBaseArea , ovsyenko , enemySkillLevel , [ ovsyenkoStartCrates , 50 , 0 ] , 1 , [ soldiersAmount , 1 , 0 , 1 ] ) ;
3422: LD_ADDR_EXP 59
3426: PUSH
3427: LD_INT 86
3429: PPUSH
3430: LD_INT 3
3432: PPUSH
3433: LD_STRING ovsyenko
3435: PPUSH
3436: LD_EXP 34
3440: PPUSH
3441: LD_EXP 35
3445: PUSH
3446: LD_INT 50
3448: PUSH
3449: LD_INT 0
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: LIST
3456: PPUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_VAR 0 2
3464: PUSH
3465: LD_INT 1
3467: PUSH
3468: LD_INT 0
3470: PUSH
3471: LD_INT 1
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: PPUSH
3480: CALL 12686 0 7
3484: ST_TO_ADDR
// case Difficulty of 1 :
3485: LD_OWVAR 67
3489: PUSH
3490: LD_INT 1
3492: DOUBLE
3493: EQUAL
3494: IFTRUE 3498
3496: GO 3511
3498: POP
// PlaceWeaponTurret ( ovs_bun1 , us_double_gun ) ; 2 :
3499: LD_INT 97
3501: PPUSH
3502: LD_INT 5
3504: PPUSH
3505: CALL_OW 431
3509: GO 3560
3511: LD_INT 2
3513: DOUBLE
3514: EQUAL
3515: IFTRUE 3519
3517: GO 3532
3519: POP
// PlaceWeaponTurret ( ovs_bun1 , us_light_gun ) ; 3 .. 4 :
3520: LD_INT 97
3522: PPUSH
3523: LD_INT 3
3525: PPUSH
3526: CALL_OW 431
3530: GO 3560
3532: LD_INT 3
3534: DOUBLE
3535: GREATEREQUAL
3536: IFFALSE 3544
3538: LD_INT 4
3540: DOUBLE
3541: LESSEQUAL
3542: IFTRUE 3546
3544: GO 3559
3546: POP
// PlaceWeaponTurret ( ovs_bun1 , us_gatling_gun ) ; end ;
3547: LD_INT 97
3549: PPUSH
3550: LD_INT 4
3552: PPUSH
3553: CALL_OW 431
3557: GO 3560
3559: POP
// end ;
3560: LD_VAR 0 1
3564: RET
// function PrepareTerminal ; begin
3565: LD_INT 0
3567: PPUSH
// uc_side = 1 ;
3568: LD_ADDR_OWVAR 20
3572: PUSH
3573: LD_INT 1
3575: ST_TO_ADDR
// uc_nation = nation_american ;
3576: LD_ADDR_OWVAR 21
3580: PUSH
3581: LD_INT 1
3583: ST_TO_ADDR
// terminalBase := Nef_PrepareBase ( terminal , terminalBaseArea , terminal , enemySkillLevel , [ 100 , 50 , 0 ] , 1 , [ 2 , 1 , 0 , 0 ] ) ;
3584: LD_ADDR_EXP 60
3588: PUSH
3589: LD_INT 168
3591: PPUSH
3592: LD_INT 4
3594: PPUSH
3595: LD_STRING terminal
3597: PPUSH
3598: LD_EXP 34
3602: PPUSH
3603: LD_INT 100
3605: PUSH
3606: LD_INT 50
3608: PUSH
3609: LD_INT 0
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: PPUSH
3617: LD_INT 1
3619: PPUSH
3620: LD_INT 2
3622: PUSH
3623: LD_INT 1
3625: PUSH
3626: LD_INT 0
3628: PUSH
3629: LD_INT 0
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL 12686 0 7
3642: ST_TO_ADDR
// end ;
3643: LD_VAR 0 1
3647: RET
// function PrepareMainAmericanBase ; begin
3648: LD_INT 0
3650: PPUSH
// uc_side = 1 ;
3651: LD_ADDR_OWVAR 20
3655: PUSH
3656: LD_INT 1
3658: ST_TO_ADDR
// uc_nation = nation_american ;
3659: LD_ADDR_OWVAR 21
3663: PUSH
3664: LD_INT 1
3666: ST_TO_ADDR
// if fastBreakthrough then
3667: LD_EXP 3
3671: IFFALSE 3680
// RemoveUnit ( ovs_bun2 ) ;
3673: LD_INT 229
3675: PPUSH
3676: CALL_OW 64
// headAmBase := Nef_PrepareBase ( headamdepot , HeadAmericanBaseArea ,  , enemySkillLevel , [ 3000 , 1000 , 0 ] , 1 , [ 9 , 3 , 6 , 2 ] ) ;
3680: LD_ADDR_EXP 61
3684: PUSH
3685: LD_INT 106
3687: PPUSH
3688: LD_INT 5
3690: PPUSH
3691: LD_STRING 
3693: PPUSH
3694: LD_EXP 34
3698: PPUSH
3699: LD_INT 3000
3701: PUSH
3702: LD_INT 1000
3704: PUSH
3705: LD_INT 0
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: LIST
3712: PPUSH
3713: LD_INT 1
3715: PPUSH
3716: LD_INT 9
3718: PUSH
3719: LD_INT 3
3721: PUSH
3722: LD_INT 6
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: PPUSH
3734: CALL 12686 0 7
3738: ST_TO_ADDR
// VanHouten = PrepareUnitExt ( VanHouten , false , class_soldier ) ;
3739: LD_ADDR_EXP 58
3743: PUSH
3744: LD_STRING VanHouten
3746: PPUSH
3747: LD_INT 0
3749: PPUSH
3750: LD_INT 1
3752: PPUSH
3753: CALL 11785 0 3
3757: ST_TO_ADDR
// headAmBase = headAmBase ^ VanHouten ;
3758: LD_ADDR_EXP 61
3762: PUSH
3763: LD_EXP 61
3767: PUSH
3768: LD_EXP 58
3772: ADD
3773: ST_TO_ADDR
// PlaceUnitXYR ( VanHouten , 35 , 57 , 3 , false ) ;
3774: LD_EXP 58
3778: PPUSH
3779: LD_INT 35
3781: PPUSH
3782: LD_INT 57
3784: PPUSH
3785: LD_INT 3
3787: PPUSH
3788: LD_INT 0
3790: PPUSH
3791: CALL_OW 50
// end ;
3795: LD_VAR 0 1
3799: RET
// export function PrepareTrap ; var i , un , nearEnemyUnit ; begin
3800: LD_INT 0
3802: PPUSH
3803: PPUSH
3804: PPUSH
3805: PPUSH
// uc_side = 1 ;
3806: LD_ADDR_OWVAR 20
3810: PUSH
3811: LD_INT 1
3813: ST_TO_ADDR
// uc_nation = nation_american ;
3814: LD_ADDR_OWVAR 21
3818: PUSH
3819: LD_INT 1
3821: ST_TO_ADDR
// for i := 1 to trapAmount do
3822: LD_ADDR_VAR 0 2
3826: PUSH
3827: DOUBLE
3828: LD_INT 1
3830: DEC
3831: ST_TO_ADDR
3832: LD_EXP 37
3836: PUSH
3837: FOR_TO
3838: IFFALSE 3972
// begin PrepareSoldier ( false , enemySkillLevel ) ;
3840: LD_INT 0
3842: PPUSH
3843: LD_EXP 34
3847: PPUSH
3848: CALL_OW 381
// un = CreateHuman ;
3852: LD_ADDR_VAR 0 3
3856: PUSH
3857: CALL_OW 44
3861: ST_TO_ADDR
// trapTeam = trapTeam ^ un ;
3862: LD_ADDR_EXP 62
3866: PUSH
3867: LD_EXP 62
3871: PUSH
3872: LD_VAR 0 3
3876: ADD
3877: ST_TO_ADDR
// PlaceUnitArea ( un , TrapSpawnArea , false ) ;
3878: LD_VAR 0 3
3882: PPUSH
3883: LD_INT 11
3885: PPUSH
3886: LD_INT 0
3888: PPUSH
3889: CALL_OW 49
// nearEnemyUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] ] ) , un ) ;
3893: LD_ADDR_VAR 0 4
3897: PUSH
3898: LD_INT 22
3900: PUSH
3901: LD_INT 3
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: PUSH
3908: EMPTY
3909: LIST
3910: PPUSH
3911: CALL_OW 69
3915: PPUSH
3916: LD_VAR 0 3
3920: PPUSH
3921: CALL_OW 74
3925: ST_TO_ADDR
// ComAgressiveMove ( un , GetX ( nearEnemyUnit ) , GetY ( nearEnemyUnit ) ) ;
3926: LD_VAR 0 3
3930: PPUSH
3931: LD_VAR 0 4
3935: PPUSH
3936: CALL_OW 250
3940: PPUSH
3941: LD_VAR 0 4
3945: PPUSH
3946: CALL_OW 251
3950: PPUSH
3951: CALL_OW 114
// AddComAgressiveMove ( un , 106 , 124 ) ;
3955: LD_VAR 0 3
3959: PPUSH
3960: LD_INT 106
3962: PPUSH
3963: LD_INT 124
3965: PPUSH
3966: CALL_OW 174
// end ;
3970: GO 3837
3972: POP
3973: POP
// end ;
3974: LD_VAR 0 1
3978: RET
// export function PrepareSoldiersInBunkers ; begin
3979: LD_INT 0
3981: PPUSH
// PrepareSolBun ( enemySkilLLevel , non_bun1 ) ;
3982: LD_EXP 34
3986: PPUSH
3987: LD_INT 236
3989: PPUSH
3990: CALL 15230 0 2
// PrepareSolBun ( enemySkilLLevel , non_bun2 ) ;
3994: LD_EXP 34
3998: PPUSH
3999: LD_INT 240
4001: PPUSH
4002: CALL 15230 0 2
// PrepareSolBun ( enemySkilLLevel , non_bun3 ) ;
4006: LD_EXP 34
4010: PPUSH
4011: LD_INT 243
4013: PPUSH
4014: CALL 15230 0 2
// end ;
4018: LD_VAR 0 1
4022: RET
// export function PrepareConvoy ; var i , un , veh ; begin
4023: LD_INT 0
4025: PPUSH
4026: PPUSH
4027: PPUSH
4028: PPUSH
// convoyTeam = [ ] ;
4029: LD_ADDR_EXP 63
4033: PUSH
4034: EMPTY
4035: ST_TO_ADDR
// uc_side = 1 ;
4036: LD_ADDR_OWVAR 20
4040: PUSH
4041: LD_INT 1
4043: ST_TO_ADDR
// uc_nation = nation_american ;
4044: LD_ADDR_OWVAR 21
4048: PUSH
4049: LD_INT 1
4051: ST_TO_ADDR
// for i := 1 to 2 do
4052: LD_ADDR_VAR 0 2
4056: PUSH
4057: DOUBLE
4058: LD_INT 1
4060: DEC
4061: ST_TO_ADDR
4062: LD_INT 2
4064: PUSH
4065: FOR_TO
4066: IFFALSE 4197
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
4068: LD_INT 3
4070: PPUSH
4071: LD_INT 1
4073: PPUSH
4074: LD_INT 1
4076: PPUSH
4077: LD_INT 12
4079: PPUSH
4080: LD_INT 80
4082: PPUSH
4083: CALL 46260 0 5
// veh = CreateVehicle ;
4087: LD_ADDR_VAR 0 4
4091: PUSH
4092: CALL_OW 45
4096: ST_TO_ADDR
// AddCargo ( veh , mat_cans , 100 ) ;
4097: LD_VAR 0 4
4101: PPUSH
4102: LD_INT 1
4104: PPUSH
4105: LD_INT 100
4107: PPUSH
4108: CALL_OW 291
// convoyTeam = convoyTeam ^ veh ;
4112: LD_ADDR_EXP 63
4116: PUSH
4117: LD_EXP 63
4121: PUSH
4122: LD_VAR 0 4
4126: ADD
4127: ST_TO_ADDR
// PlaceUnitArea ( veh , AmericanSpawnArea1 , false ) ;
4128: LD_VAR 0 4
4132: PPUSH
4133: LD_INT 8
4135: PPUSH
4136: LD_INT 0
4138: PPUSH
4139: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
4143: LD_INT 0
4145: PPUSH
4146: LD_EXP 34
4150: PPUSH
4151: CALL_OW 383
// un = CreateHuman ;
4155: LD_ADDR_VAR 0 3
4159: PUSH
4160: CALL_OW 44
4164: ST_TO_ADDR
// convoyTeam = convoyTeam ^ un ;
4165: LD_ADDR_EXP 63
4169: PUSH
4170: LD_EXP 63
4174: PUSH
4175: LD_VAR 0 3
4179: ADD
4180: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4181: LD_VAR 0 3
4185: PPUSH
4186: LD_VAR 0 4
4190: PPUSH
4191: CALL_OW 52
// end ;
4195: GO 4065
4197: POP
4198: POP
// end ;
4199: LD_VAR 0 1
4203: RET
// export function PrepareAttack ; var i , un , veh ; begin
4204: LD_INT 0
4206: PPUSH
4207: PPUSH
4208: PPUSH
4209: PPUSH
// uc_side = 1 ;
4210: LD_ADDR_OWVAR 20
4214: PUSH
4215: LD_INT 1
4217: ST_TO_ADDR
// uc_nation = nation_american ;
4218: LD_ADDR_OWVAR 21
4222: PUSH
4223: LD_INT 1
4225: ST_TO_ADDR
// for i := 1 to 4 do
4226: LD_ADDR_VAR 0 2
4230: PUSH
4231: DOUBLE
4232: LD_INT 1
4234: DEC
4235: ST_TO_ADDR
4236: LD_INT 4
4238: PUSH
4239: FOR_TO
4240: IFFALSE 4379
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_light_gun , us_double_gun , us_gatling_gun ] [ Rand ( 1 , 3 ) ] , 80 ) ;
4242: LD_INT 3
4244: PPUSH
4245: LD_INT 1
4247: PPUSH
4248: LD_INT 1
4250: PPUSH
4251: LD_INT 3
4253: PUSH
4254: LD_INT 5
4256: PUSH
4257: LD_INT 4
4259: PUSH
4260: EMPTY
4261: LIST
4262: LIST
4263: LIST
4264: PUSH
4265: LD_INT 1
4267: PPUSH
4268: LD_INT 3
4270: PPUSH
4271: CALL_OW 12
4275: ARRAY
4276: PPUSH
4277: LD_INT 80
4279: PPUSH
4280: CALL 46260 0 5
// veh = CreateVehicle ;
4284: LD_ADDR_VAR 0 4
4288: PUSH
4289: CALL_OW 45
4293: ST_TO_ADDR
// attackTeam = attackTeam ^ veh ;
4294: LD_ADDR_EXP 64
4298: PUSH
4299: LD_EXP 64
4303: PUSH
4304: LD_VAR 0 4
4308: ADD
4309: ST_TO_ADDR
// PlaceUnitArea ( veh , AmericanSpawnArea2 , false ) ;
4310: LD_VAR 0 4
4314: PPUSH
4315: LD_INT 17
4317: PPUSH
4318: LD_INT 0
4320: PPUSH
4321: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
4325: LD_INT 0
4327: PPUSH
4328: LD_EXP 34
4332: PPUSH
4333: CALL_OW 383
// un = CreateHuman ;
4337: LD_ADDR_VAR 0 3
4341: PUSH
4342: CALL_OW 44
4346: ST_TO_ADDR
// attackTeam = attackTeam ^ un ;
4347: LD_ADDR_EXP 64
4351: PUSH
4352: LD_EXP 64
4356: PUSH
4357: LD_VAR 0 3
4361: ADD
4362: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4363: LD_VAR 0 3
4367: PPUSH
4368: LD_VAR 0 4
4372: PPUSH
4373: CALL_OW 52
// end ;
4377: GO 4239
4379: POP
4380: POP
// for i := 1 to 3 do
4381: LD_ADDR_VAR 0 2
4385: PUSH
4386: DOUBLE
4387: LD_INT 1
4389: DEC
4390: ST_TO_ADDR
4391: LD_INT 3
4393: PUSH
4394: FOR_TO
4395: IFFALSE 4452
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4397: LD_INT 0
4399: PPUSH
4400: LD_EXP 34
4404: PPUSH
4405: CALL_OW 381
// un = CreateHuman ;
4409: LD_ADDR_VAR 0 3
4413: PUSH
4414: CALL_OW 44
4418: ST_TO_ADDR
// attackTeam = attackTeam ^ un ;
4419: LD_ADDR_EXP 64
4423: PUSH
4424: LD_EXP 64
4428: PUSH
4429: LD_VAR 0 3
4433: ADD
4434: ST_TO_ADDR
// PlaceUnitArea ( un , AmericanSpawnArea2 , false ) ;
4435: LD_VAR 0 3
4439: PPUSH
4440: LD_INT 17
4442: PPUSH
4443: LD_INT 0
4445: PPUSH
4446: CALL_OW 49
// end ;
4450: GO 4394
4452: POP
4453: POP
// end ; end_of_file
4454: LD_VAR 0 1
4458: RET
// export function Nef_PrepareNature ; var i , un ; begin
4459: LD_INT 0
4461: PPUSH
4462: PPUSH
4463: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
4464: LD_ADDR_VAR 0 2
4468: PUSH
4469: DOUBLE
4470: LD_INT 1
4472: DEC
4473: ST_TO_ADDR
4474: LD_EXP 28
4478: PUSH
4479: LD_INT 1
4481: ARRAY
4482: PUSH
4483: FOR_TO
4484: IFFALSE 4594
// begin uc_side = 0 ;
4486: LD_ADDR_OWVAR 20
4490: PUSH
4491: LD_INT 0
4493: ST_TO_ADDR
// uc_nation = nation_nature ;
4494: LD_ADDR_OWVAR 21
4498: PUSH
4499: LD_INT 0
4501: ST_TO_ADDR
// hc_class = class_apeman ;
4502: LD_ADDR_OWVAR 28
4506: PUSH
4507: LD_INT 12
4509: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4510: LD_ADDR_OWVAR 31
4514: PUSH
4515: LD_EXP 29
4519: PUSH
4520: LD_INT 1
4522: ARRAY
4523: PUSH
4524: LD_EXP 29
4528: PUSH
4529: LD_INT 2
4531: ARRAY
4532: PUSH
4533: LD_EXP 29
4537: PUSH
4538: LD_INT 3
4540: ARRAY
4541: PUSH
4542: LD_EXP 29
4546: PUSH
4547: LD_INT 4
4549: ARRAY
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4557: LD_ADDR_OWVAR 35
4561: PUSH
4562: LD_EXP 30
4566: ST_TO_ADDR
// un = CreateHuman ;
4567: LD_ADDR_VAR 0 3
4571: PUSH
4572: CALL_OW 44
4576: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4577: LD_VAR 0 3
4581: PPUSH
4582: LD_INT 2
4584: PPUSH
4585: LD_INT 0
4587: PPUSH
4588: CALL_OW 49
// end ;
4592: GO 4483
4594: POP
4595: POP
// for i := 1 to animalsAmount [ 2 ] do
4596: LD_ADDR_VAR 0 2
4600: PUSH
4601: DOUBLE
4602: LD_INT 1
4604: DEC
4605: ST_TO_ADDR
4606: LD_EXP 28
4610: PUSH
4611: LD_INT 2
4613: ARRAY
4614: PUSH
4615: FOR_TO
4616: IFFALSE 4726
// begin uc_side = 0 ;
4618: LD_ADDR_OWVAR 20
4622: PUSH
4623: LD_INT 0
4625: ST_TO_ADDR
// uc_nation = nation_nature ;
4626: LD_ADDR_OWVAR 21
4630: PUSH
4631: LD_INT 0
4633: ST_TO_ADDR
// hc_class = class_phororhacos ;
4634: LD_ADDR_OWVAR 28
4638: PUSH
4639: LD_INT 18
4641: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4642: LD_ADDR_OWVAR 31
4646: PUSH
4647: LD_EXP 29
4651: PUSH
4652: LD_INT 1
4654: ARRAY
4655: PUSH
4656: LD_EXP 29
4660: PUSH
4661: LD_INT 2
4663: ARRAY
4664: PUSH
4665: LD_EXP 29
4669: PUSH
4670: LD_INT 3
4672: ARRAY
4673: PUSH
4674: LD_EXP 29
4678: PUSH
4679: LD_INT 4
4681: ARRAY
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4689: LD_ADDR_OWVAR 35
4693: PUSH
4694: LD_EXP 30
4698: ST_TO_ADDR
// un = CreateHuman ;
4699: LD_ADDR_VAR 0 3
4703: PUSH
4704: CALL_OW 44
4708: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4709: LD_VAR 0 3
4713: PPUSH
4714: LD_INT 2
4716: PPUSH
4717: LD_INT 0
4719: PPUSH
4720: CALL_OW 49
// end ;
4724: GO 4615
4726: POP
4727: POP
// for i := 1 to animalsAmount [ 3 ] do
4728: LD_ADDR_VAR 0 2
4732: PUSH
4733: DOUBLE
4734: LD_INT 1
4736: DEC
4737: ST_TO_ADDR
4738: LD_EXP 28
4742: PUSH
4743: LD_INT 3
4745: ARRAY
4746: PUSH
4747: FOR_TO
4748: IFFALSE 4858
// begin uc_side = 0 ;
4750: LD_ADDR_OWVAR 20
4754: PUSH
4755: LD_INT 0
4757: ST_TO_ADDR
// uc_nation = nation_nature ;
4758: LD_ADDR_OWVAR 21
4762: PUSH
4763: LD_INT 0
4765: ST_TO_ADDR
// hc_class = class_tiger ;
4766: LD_ADDR_OWVAR 28
4770: PUSH
4771: LD_INT 14
4773: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4774: LD_ADDR_OWVAR 31
4778: PUSH
4779: LD_EXP 29
4783: PUSH
4784: LD_INT 1
4786: ARRAY
4787: PUSH
4788: LD_EXP 29
4792: PUSH
4793: LD_INT 2
4795: ARRAY
4796: PUSH
4797: LD_EXP 29
4801: PUSH
4802: LD_INT 3
4804: ARRAY
4805: PUSH
4806: LD_EXP 29
4810: PUSH
4811: LD_INT 4
4813: ARRAY
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4821: LD_ADDR_OWVAR 35
4825: PUSH
4826: LD_EXP 30
4830: ST_TO_ADDR
// un = CreateHuman ;
4831: LD_ADDR_VAR 0 3
4835: PUSH
4836: CALL_OW 44
4840: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4841: LD_VAR 0 3
4845: PPUSH
4846: LD_INT 2
4848: PPUSH
4849: LD_INT 0
4851: PPUSH
4852: CALL_OW 49
// end ;
4856: GO 4747
4858: POP
4859: POP
// for i := 1 to animalsAmount [ 4 ] do
4860: LD_ADDR_VAR 0 2
4864: PUSH
4865: DOUBLE
4866: LD_INT 1
4868: DEC
4869: ST_TO_ADDR
4870: LD_EXP 28
4874: PUSH
4875: LD_INT 4
4877: ARRAY
4878: PUSH
4879: FOR_TO
4880: IFFALSE 4990
// begin uc_side = 0 ;
4882: LD_ADDR_OWVAR 20
4886: PUSH
4887: LD_INT 0
4889: ST_TO_ADDR
// uc_nation = nation_nature ;
4890: LD_ADDR_OWVAR 21
4894: PUSH
4895: LD_INT 0
4897: ST_TO_ADDR
// hc_class = 21 ;
4898: LD_ADDR_OWVAR 28
4902: PUSH
4903: LD_INT 21
4905: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4906: LD_ADDR_OWVAR 31
4910: PUSH
4911: LD_EXP 29
4915: PUSH
4916: LD_INT 1
4918: ARRAY
4919: PUSH
4920: LD_EXP 29
4924: PUSH
4925: LD_INT 2
4927: ARRAY
4928: PUSH
4929: LD_EXP 29
4933: PUSH
4934: LD_INT 3
4936: ARRAY
4937: PUSH
4938: LD_EXP 29
4942: PUSH
4943: LD_INT 4
4945: ARRAY
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4953: LD_ADDR_OWVAR 35
4957: PUSH
4958: LD_EXP 30
4962: ST_TO_ADDR
// un = CreateHuman ;
4963: LD_ADDR_VAR 0 3
4967: PUSH
4968: CALL_OW 44
4972: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4973: LD_VAR 0 3
4977: PPUSH
4978: LD_INT 2
4980: PPUSH
4981: LD_INT 0
4983: PPUSH
4984: CALL_OW 49
// end ;
4988: GO 4879
4990: POP
4991: POP
// for i := 1 to animalsAmount [ 5 ] do
4992: LD_ADDR_VAR 0 2
4996: PUSH
4997: DOUBLE
4998: LD_INT 1
5000: DEC
5001: ST_TO_ADDR
5002: LD_EXP 28
5006: PUSH
5007: LD_INT 5
5009: ARRAY
5010: PUSH
5011: FOR_TO
5012: IFFALSE 5073
// begin uc_side = 0 ;
5014: LD_ADDR_OWVAR 20
5018: PUSH
5019: LD_INT 0
5021: ST_TO_ADDR
// uc_nation = nation_nature ;
5022: LD_ADDR_OWVAR 21
5026: PUSH
5027: LD_INT 0
5029: ST_TO_ADDR
// vc_chassis := 31 ;
5030: LD_ADDR_OWVAR 37
5034: PUSH
5035: LD_INT 31
5037: ST_TO_ADDR
// vc_control := control_rider ;
5038: LD_ADDR_OWVAR 38
5042: PUSH
5043: LD_INT 4
5045: ST_TO_ADDR
// un := CreateVehicle ;
5046: LD_ADDR_VAR 0 3
5050: PUSH
5051: CALL_OW 45
5055: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
5056: LD_VAR 0 3
5060: PPUSH
5061: LD_INT 2
5063: PPUSH
5064: LD_INT 0
5066: PPUSH
5067: CALL_OW 49
// end ;
5071: GO 5011
5073: POP
5074: POP
// end ; end_of_file
5075: LD_VAR 0 1
5079: RET
// every 0 0$1 do
5080: GO 5082
5082: DISABLE
// InitAIManager ( 1 , 2 , UnitFilter ( ovsyenkoBase , [ f_type , unit_human ] ) , OvsyenkoBaseArea , OvsyenkoHealArea , false , false , 0 , 0 , 0 , 0 , 0 ) ;
5083: LD_INT 1
5085: PPUSH
5086: LD_INT 2
5088: PPUSH
5089: LD_EXP 59
5093: PPUSH
5094: LD_INT 21
5096: PUSH
5097: LD_INT 1
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PPUSH
5104: CALL_OW 72
5108: PPUSH
5109: LD_INT 3
5111: PPUSH
5112: LD_INT 6
5114: PPUSH
5115: LD_INT 0
5117: PPUSH
5118: LD_INT 0
5120: PPUSH
5121: LD_INT 0
5123: PPUSH
5124: LD_INT 0
5126: PPUSH
5127: LD_INT 0
5129: PPUSH
5130: LD_INT 0
5132: PPUSH
5133: LD_INT 0
5135: PPUSH
5136: CALL 5248 0 12
5140: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_weapon , us_bulldozer ] ] ) do var unit ;
5141: LD_INT 22
5143: PUSH
5144: LD_INT 1
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: LD_INT 50
5153: PUSH
5154: EMPTY
5155: LIST
5156: PUSH
5157: LD_INT 34
5159: PUSH
5160: LD_INT 14
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: LIST
5171: PPUSH
5172: CALL_OW 69
5176: IFFALSE 5245
5178: GO 5180
5180: DISABLE
5181: LD_INT 0
5183: PPUSH
// begin enable ;
5184: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_weapon , us_bulldozer ] ] ) do
5185: LD_ADDR_VAR 0 1
5189: PUSH
5190: LD_INT 22
5192: PUSH
5193: LD_INT 1
5195: PUSH
5196: EMPTY
5197: LIST
5198: LIST
5199: PUSH
5200: LD_INT 50
5202: PUSH
5203: EMPTY
5204: LIST
5205: PUSH
5206: LD_INT 34
5208: PUSH
5209: LD_INT 14
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: LIST
5220: PPUSH
5221: CALL_OW 69
5225: PUSH
5226: FOR_IN
5227: IFFALSE 5243
// CutTreeInArea ( unit , TreeArea ) ;
5229: LD_VAR 0 1
5233: PPUSH
5234: LD_INT 18
5236: PPUSH
5237: CALL 15087 0 2
5241: GO 5226
5243: POP
5244: POP
// end ;
5245: PPOPN 1
5247: END
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , repairArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack , canRebuild ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , offensiveUnits , offensiveReadyCounter , target1 , target2 , defenceUnits , weapons , chassis , baseBuildings , destroyedBuildings , destroyedBuilding , constructedBuilding , constructedBuildings , depot , factory , lab , bunkers , barracks , controlTowers , attackBuildings , enemyBuildings , damageBuilding , damageUnit , emptyBunkers , enemyUnits ; begin
5248: LD_INT 0
5250: PPUSH
5251: PPUSH
5252: PPUSH
5253: PPUSH
5254: PPUSH
5255: PPUSH
5256: PPUSH
5257: PPUSH
5258: PPUSH
5259: PPUSH
5260: PPUSH
5261: PPUSH
5262: PPUSH
5263: PPUSH
5264: PPUSH
5265: PPUSH
5266: PPUSH
5267: PPUSH
5268: PPUSH
5269: PPUSH
5270: PPUSH
5271: PPUSH
5272: PPUSH
5273: PPUSH
5274: PPUSH
5275: PPUSH
5276: PPUSH
5277: PPUSH
5278: PPUSH
5279: PPUSH
5280: PPUSH
5281: PPUSH
5282: PPUSH
5283: PPUSH
5284: PPUSH
5285: PPUSH
5286: PPUSH
5287: PPUSH
// personel = [ ] ;
5288: LD_ADDR_VAR 0 19
5292: PUSH
5293: EMPTY
5294: ST_TO_ADDR
// vehicles = [ ] ;
5295: LD_ADDR_VAR 0 25
5299: PUSH
5300: EMPTY
5301: ST_TO_ADDR
// destroyedBuildings = [ ] ;
5302: LD_ADDR_VAR 0 35
5306: PUSH
5307: EMPTY
5308: ST_TO_ADDR
// for unit in basePersonel do
5309: LD_ADDR_VAR 0 18
5313: PUSH
5314: LD_VAR 0 3
5318: PUSH
5319: FOR_IN
5320: IFFALSE 5340
// personel = personel ^ unit ;
5322: LD_ADDR_VAR 0 19
5326: PUSH
5327: LD_VAR 0 19
5331: PUSH
5332: LD_VAR 0 18
5336: ADD
5337: ST_TO_ADDR
5338: GO 5319
5340: POP
5341: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ] ] ) do
5342: LD_ADDR_VAR 0 24
5346: PUSH
5347: LD_VAR 0 4
5351: PPUSH
5352: LD_INT 22
5354: PUSH
5355: LD_VAR 0 1
5359: PUSH
5360: EMPTY
5361: LIST
5362: LIST
5363: PUSH
5364: LD_INT 21
5366: PUSH
5367: LD_INT 2
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: PUSH
5374: LD_INT 50
5376: PUSH
5377: EMPTY
5378: LIST
5379: PUSH
5380: LD_INT 3
5382: PUSH
5383: LD_INT 2
5385: PUSH
5386: LD_INT 34
5388: PUSH
5389: LD_INT 12
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: PUSH
5396: LD_INT 34
5398: PUSH
5399: LD_INT 51
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PUSH
5406: LD_INT 34
5408: PUSH
5409: LD_INT 32
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: PUSH
5416: LD_INT 34
5418: PUSH
5419: LD_INT 31
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: PUSH
5426: EMPTY
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: PPUSH
5443: CALL_OW 70
5447: PUSH
5448: FOR_IN
5449: IFFALSE 5469
// vehicles = vehicles ^ vehicle ;
5451: LD_ADDR_VAR 0 25
5455: PUSH
5456: LD_VAR 0 25
5460: PUSH
5461: LD_VAR 0 24
5465: ADD
5466: ST_TO_ADDR
5467: GO 5448
5469: POP
5470: POP
// repeat soldiers = [ ] ;
5471: LD_ADDR_VAR 0 20
5475: PUSH
5476: EMPTY
5477: ST_TO_ADDR
// engineers = [ ] ;
5478: LD_ADDR_VAR 0 21
5482: PUSH
5483: EMPTY
5484: ST_TO_ADDR
// mechanics = [ ] ;
5485: LD_ADDR_VAR 0 22
5489: PUSH
5490: EMPTY
5491: ST_TO_ADDR
// scientists = [ ] ;
5492: LD_ADDR_VAR 0 23
5496: PUSH
5497: EMPTY
5498: ST_TO_ADDR
// baseBuildings = [ ] ;
5499: LD_ADDR_VAR 0 34
5503: PUSH
5504: EMPTY
5505: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5506: LD_ADDR_VAR 0 39
5510: PUSH
5511: LD_VAR 0 4
5515: PPUSH
5516: LD_INT 22
5518: PUSH
5519: LD_VAR 0 1
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: PUSH
5528: LD_INT 21
5530: PUSH
5531: LD_INT 3
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: PUSH
5538: LD_INT 50
5540: PUSH
5541: EMPTY
5542: LIST
5543: PUSH
5544: LD_INT 2
5546: PUSH
5547: LD_INT 30
5549: PUSH
5550: LD_INT 0
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: PUSH
5557: LD_INT 30
5559: PUSH
5560: LD_INT 1
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: LIST
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: PPUSH
5578: CALL_OW 70
5582: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
5583: LD_ADDR_VAR 0 40
5587: PUSH
5588: LD_VAR 0 4
5592: PPUSH
5593: LD_INT 22
5595: PUSH
5596: LD_VAR 0 1
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: LD_INT 21
5607: PUSH
5608: LD_INT 3
5610: PUSH
5611: EMPTY
5612: LIST
5613: LIST
5614: PUSH
5615: LD_INT 50
5617: PUSH
5618: EMPTY
5619: LIST
5620: PUSH
5621: LD_INT 2
5623: PUSH
5624: LD_INT 30
5626: PUSH
5627: LD_INT 2
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: PUSH
5634: LD_INT 30
5636: PUSH
5637: LD_INT 3
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: LIST
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: PPUSH
5655: CALL_OW 70
5659: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5660: LD_ADDR_VAR 0 41
5664: PUSH
5665: LD_VAR 0 4
5669: PPUSH
5670: LD_INT 22
5672: PUSH
5673: LD_VAR 0 1
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: LD_INT 21
5684: PUSH
5685: LD_INT 3
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: PUSH
5692: LD_INT 50
5694: PUSH
5695: EMPTY
5696: LIST
5697: PUSH
5698: LD_INT 2
5700: PUSH
5701: LD_INT 30
5703: PUSH
5704: LD_INT 6
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: PUSH
5711: LD_INT 30
5713: PUSH
5714: LD_INT 7
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: PUSH
5721: LD_INT 30
5723: PUSH
5724: LD_INT 8
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: PUSH
5737: EMPTY
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: PPUSH
5743: CALL_OW 70
5747: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
5748: LD_ADDR_VAR 0 42
5752: PUSH
5753: LD_VAR 0 4
5757: PPUSH
5758: LD_INT 22
5760: PUSH
5761: LD_VAR 0 1
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: LD_INT 21
5772: PUSH
5773: LD_INT 3
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PUSH
5780: LD_INT 50
5782: PUSH
5783: EMPTY
5784: LIST
5785: PUSH
5786: LD_INT 2
5788: PUSH
5789: LD_INT 30
5791: PUSH
5792: LD_INT 31
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: LD_INT 30
5801: PUSH
5802: LD_INT 32
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: LIST
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: LIST
5818: LIST
5819: PPUSH
5820: CALL_OW 70
5824: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
5825: LD_ADDR_VAR 0 43
5829: PUSH
5830: LD_VAR 0 4
5834: PPUSH
5835: LD_INT 22
5837: PUSH
5838: LD_VAR 0 1
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PUSH
5847: LD_INT 21
5849: PUSH
5850: LD_INT 3
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: PUSH
5857: LD_INT 50
5859: PUSH
5860: EMPTY
5861: LIST
5862: PUSH
5863: LD_INT 2
5865: PUSH
5866: LD_INT 30
5868: PUSH
5869: LD_INT 4
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: PUSH
5876: LD_INT 30
5878: PUSH
5879: LD_INT 5
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: LIST
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: PPUSH
5897: CALL_OW 70
5901: ST_TO_ADDR
// controlTowers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_vehicle ] ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5902: LD_ADDR_VAR 0 44
5906: PUSH
5907: LD_VAR 0 4
5911: PPUSH
5912: LD_INT 22
5914: PUSH
5915: LD_VAR 0 1
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: PUSH
5924: LD_INT 50
5926: PUSH
5927: EMPTY
5928: LIST
5929: PUSH
5930: LD_INT 2
5932: PUSH
5933: LD_INT 21
5935: PUSH
5936: LD_INT 3
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: PUSH
5943: LD_INT 21
5945: PUSH
5946: LD_INT 2
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: LIST
5957: PUSH
5958: LD_INT 2
5960: PUSH
5961: LD_INT 30
5963: PUSH
5964: LD_INT 36
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: PUSH
5971: LD_INT 34
5973: PUSH
5974: LD_INT 31
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: LIST
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: PPUSH
5992: CALL_OW 70
5996: ST_TO_ADDR
// constructedBuildings = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] ] ) ;
5997: LD_ADDR_VAR 0 38
6001: PUSH
6002: LD_VAR 0 4
6006: PPUSH
6007: LD_INT 22
6009: PUSH
6010: LD_VAR 0 1
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: PUSH
6019: LD_INT 21
6021: PUSH
6022: LD_INT 3
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: PUSH
6029: LD_INT 3
6031: PUSH
6032: LD_INT 57
6034: PUSH
6035: EMPTY
6036: LIST
6037: PUSH
6038: EMPTY
6039: LIST
6040: LIST
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: LIST
6046: PPUSH
6047: CALL_OW 70
6051: ST_TO_ADDR
// for i := 1 to personel do
6052: LD_ADDR_VAR 0 14
6056: PUSH
6057: DOUBLE
6058: LD_INT 1
6060: DEC
6061: ST_TO_ADDR
6062: LD_VAR 0 19
6066: PUSH
6067: FOR_TO
6068: IFFALSE 6236
// begin if GetLives ( personel [ i ] ) = 1000 then
6070: LD_VAR 0 19
6074: PUSH
6075: LD_VAR 0 14
6079: ARRAY
6080: PPUSH
6081: CALL_OW 256
6085: PUSH
6086: LD_INT 1000
6088: EQUAL
6089: IFFALSE 6111
// SetTag ( personel [ i ] , 1 ) else
6091: LD_VAR 0 19
6095: PUSH
6096: LD_VAR 0 14
6100: ARRAY
6101: PPUSH
6102: LD_INT 1
6104: PPUSH
6105: CALL_OW 109
6109: GO 6191
// if GetLives ( personel [ i ] ) <= 950 and GetLives ( personel [ i ] ) > 250 then
6111: LD_VAR 0 19
6115: PUSH
6116: LD_VAR 0 14
6120: ARRAY
6121: PPUSH
6122: CALL_OW 256
6126: PUSH
6127: LD_INT 950
6129: LESSEQUAL
6130: PUSH
6131: LD_VAR 0 19
6135: PUSH
6136: LD_VAR 0 14
6140: ARRAY
6141: PPUSH
6142: CALL_OW 256
6146: PUSH
6147: LD_INT 250
6149: GREATER
6150: AND
6151: IFFALSE 6191
// begin SetTag ( personel [ i ] , 0 ) ;
6153: LD_VAR 0 19
6157: PUSH
6158: LD_VAR 0 14
6162: ARRAY
6163: PPUSH
6164: LD_INT 0
6166: PPUSH
6167: CALL_OW 109
// ComMoveToArea ( personel [ i ] , healArea ) ;
6171: LD_VAR 0 19
6175: PUSH
6176: LD_VAR 0 14
6180: ARRAY
6181: PPUSH
6182: LD_VAR 0 5
6186: PPUSH
6187: CALL_OW 113
// end ; if GetLives ( personel [ i ] ) < 100 then
6191: LD_VAR 0 19
6195: PUSH
6196: LD_VAR 0 14
6200: ARRAY
6201: PPUSH
6202: CALL_OW 256
6206: PUSH
6207: LD_INT 100
6209: LESS
6210: IFFALSE 6234
// personel = personel diff personel [ i ] ;
6212: LD_ADDR_VAR 0 19
6216: PUSH
6217: LD_VAR 0 19
6221: PUSH
6222: LD_VAR 0 19
6226: PUSH
6227: LD_VAR 0 14
6231: ARRAY
6232: DIFF
6233: ST_TO_ADDR
// end ;
6234: GO 6067
6236: POP
6237: POP
// for i := 1 to vehicles do
6238: LD_ADDR_VAR 0 14
6242: PUSH
6243: DOUBLE
6244: LD_INT 1
6246: DEC
6247: ST_TO_ADDR
6248: LD_VAR 0 25
6252: PUSH
6253: FOR_TO
6254: IFFALSE 6616
// begin if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
6256: LD_VAR 0 25
6260: PUSH
6261: LD_VAR 0 14
6265: ARRAY
6266: PUSH
6267: LD_INT 1
6269: ARRAY
6270: PPUSH
6271: CALL_OW 256
6275: PUSH
6276: LD_INT 1000
6278: EQUAL
6279: IFFALSE 6443
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
6281: LD_VAR 0 25
6285: PUSH
6286: LD_VAR 0 14
6290: ARRAY
6291: PUSH
6292: LD_INT 1
6294: ARRAY
6295: PPUSH
6296: CALL_OW 263
6300: PUSH
6301: LD_INT 1
6303: EQUAL
6304: IFFALSE 6383
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) and IsOK ( vehicles [ i ] [ 2 ] ) then
6306: LD_VAR 0 25
6310: PUSH
6311: LD_VAR 0 14
6315: ARRAY
6316: PUSH
6317: LD_INT 2
6319: ARRAY
6320: PPUSH
6321: CALL_OW 310
6325: NOT
6326: PUSH
6327: LD_VAR 0 25
6331: PUSH
6332: LD_VAR 0 14
6336: ARRAY
6337: PUSH
6338: LD_INT 2
6340: ARRAY
6341: PPUSH
6342: CALL_OW 302
6346: AND
6347: IFFALSE 6383
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
6349: LD_VAR 0 25
6353: PUSH
6354: LD_VAR 0 14
6358: ARRAY
6359: PUSH
6360: LD_INT 2
6362: ARRAY
6363: PPUSH
6364: LD_VAR 0 25
6368: PUSH
6369: LD_VAR 0 14
6373: ARRAY
6374: PUSH
6375: LD_INT 1
6377: ARRAY
6378: PPUSH
6379: CALL_OW 120
// if offensiveUnits < vehiclesToAttackAmount then
6383: LD_VAR 0 27
6387: PUSH
6388: LD_VAR 0 10
6392: LESS
6393: IFFALSE 6419
// SetTag ( vehicles [ i ] [ 1 ] , 2 ) else
6395: LD_VAR 0 25
6399: PUSH
6400: LD_VAR 0 14
6404: ARRAY
6405: PUSH
6406: LD_INT 1
6408: ARRAY
6409: PPUSH
6410: LD_INT 2
6412: PPUSH
6413: CALL_OW 109
6417: GO 6441
// SetTag ( vehicles [ i ] [ 1 ] , 3 ) ;
6419: LD_VAR 0 25
6423: PUSH
6424: LD_VAR 0 14
6428: ARRAY
6429: PUSH
6430: LD_INT 1
6432: ARRAY
6433: PPUSH
6434: LD_INT 3
6436: PPUSH
6437: CALL_OW 109
// end else
6441: GO 6564
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 and GetLives ( vehicles [ i ] [ 1 ] ) > 250 and GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
6443: LD_VAR 0 25
6447: PUSH
6448: LD_VAR 0 14
6452: ARRAY
6453: PUSH
6454: LD_INT 1
6456: ARRAY
6457: PPUSH
6458: CALL_OW 256
6462: PUSH
6463: LD_INT 650
6465: LESSEQUAL
6466: PUSH
6467: LD_VAR 0 25
6471: PUSH
6472: LD_VAR 0 14
6476: ARRAY
6477: PUSH
6478: LD_INT 1
6480: ARRAY
6481: PPUSH
6482: CALL_OW 256
6486: PUSH
6487: LD_INT 250
6489: GREATER
6490: AND
6491: PUSH
6492: LD_VAR 0 25
6496: PUSH
6497: LD_VAR 0 14
6501: ARRAY
6502: PUSH
6503: LD_INT 1
6505: ARRAY
6506: PPUSH
6507: CALL_OW 263
6511: PUSH
6512: LD_INT 1
6514: EQUAL
6515: AND
6516: IFFALSE 6564
// begin SetTag ( vehicles [ i ] [ 1 ] , 0 ) ;
6518: LD_VAR 0 25
6522: PUSH
6523: LD_VAR 0 14
6527: ARRAY
6528: PUSH
6529: LD_INT 1
6531: ARRAY
6532: PPUSH
6533: LD_INT 0
6535: PPUSH
6536: CALL_OW 109
// ComMoveToArea ( vehicles [ i ] [ 1 ] , repairArea ) ;
6540: LD_VAR 0 25
6544: PUSH
6545: LD_VAR 0 14
6549: ARRAY
6550: PUSH
6551: LD_INT 1
6553: ARRAY
6554: PPUSH
6555: LD_VAR 0 6
6559: PPUSH
6560: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
6564: LD_VAR 0 25
6568: PUSH
6569: LD_VAR 0 14
6573: ARRAY
6574: PUSH
6575: LD_INT 1
6577: ARRAY
6578: PPUSH
6579: CALL_OW 256
6583: PUSH
6584: LD_INT 250
6586: LESS
6587: IFFALSE 6614
// begin vehicles = vehicles diff [ vehicles [ i ] ] ;
6589: LD_ADDR_VAR 0 25
6593: PUSH
6594: LD_VAR 0 25
6598: PUSH
6599: LD_VAR 0 25
6603: PUSH
6604: LD_VAR 0 14
6608: ARRAY
6609: PUSH
6610: EMPTY
6611: LIST
6612: DIFF
6613: ST_TO_ADDR
// end ; end ;
6614: GO 6253
6616: POP
6617: POP
// for i := 1 to personel do
6618: LD_ADDR_VAR 0 14
6622: PUSH
6623: DOUBLE
6624: LD_INT 1
6626: DEC
6627: ST_TO_ADDR
6628: LD_VAR 0 19
6632: PUSH
6633: FOR_TO
6634: IFFALSE 6685
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
6636: LD_ADDR_VAR 0 20
6640: PUSH
6641: LD_VAR 0 20
6645: PUSH
6646: LD_VAR 0 19
6650: PUSH
6651: LD_VAR 0 14
6655: ARRAY
6656: PPUSH
6657: LD_INT 25
6659: PUSH
6660: LD_INT 1
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: LD_INT 50
6669: PUSH
6670: EMPTY
6671: LIST
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PPUSH
6677: CALL_OW 72
6681: ADD
6682: ST_TO_ADDR
6683: GO 6633
6685: POP
6686: POP
// if soldiers and UnitFilter ( bunkers , [ f_empty ] ) then
6687: LD_VAR 0 20
6691: PUSH
6692: LD_VAR 0 42
6696: PPUSH
6697: LD_INT 58
6699: PUSH
6700: EMPTY
6701: LIST
6702: PPUSH
6703: CALL_OW 72
6707: AND
6708: IFFALSE 6966
// begin for i := 1 to soldiers do
6710: LD_ADDR_VAR 0 14
6714: PUSH
6715: DOUBLE
6716: LD_INT 1
6718: DEC
6719: ST_TO_ADDR
6720: LD_VAR 0 20
6724: PUSH
6725: FOR_TO
6726: IFFALSE 6962
// if GetTag ( soldiers [ i ] ) = 1 then
6728: LD_VAR 0 20
6732: PUSH
6733: LD_VAR 0 14
6737: ARRAY
6738: PPUSH
6739: CALL_OW 110
6743: PUSH
6744: LD_INT 1
6746: EQUAL
6747: IFFALSE 6960
// begin if GetTaskList ( soldiers [ i ] ) then
6749: LD_VAR 0 20
6753: PUSH
6754: LD_VAR 0 14
6758: ARRAY
6759: PPUSH
6760: CALL_OW 437
6764: IFFALSE 6853
// if GetTaskList ( soldiers [ i ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( soldiers [ i ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
6766: LD_VAR 0 20
6770: PUSH
6771: LD_VAR 0 14
6775: ARRAY
6776: PPUSH
6777: CALL_OW 437
6781: PUSH
6782: LD_INT 1
6784: ARRAY
6785: PUSH
6786: LD_INT 1
6788: ARRAY
6789: PUSH
6790: LD_STRING e
6792: EQUAL
6793: PUSH
6794: LD_VAR 0 20
6798: PUSH
6799: LD_VAR 0 14
6803: ARRAY
6804: PPUSH
6805: CALL_OW 437
6809: PUSH
6810: LD_INT 1
6812: ARRAY
6813: PUSH
6814: LD_INT 4
6816: ARRAY
6817: PPUSH
6818: CALL_OW 266
6822: PUSH
6823: LD_INT 4
6825: PUSH
6826: LD_INT 5
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: IN
6833: AND
6834: IFFALSE 6853
// SetTaskList ( soldiers [ i ] , [ ] ) ;
6836: LD_VAR 0 20
6840: PUSH
6841: LD_VAR 0 14
6845: ARRAY
6846: PPUSH
6847: EMPTY
6848: PPUSH
6849: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
6853: LD_ADDR_VAR 0 49
6857: PUSH
6858: LD_VAR 0 42
6862: PPUSH
6863: LD_INT 3
6865: PUSH
6866: LD_INT 59
6868: PUSH
6869: EMPTY
6870: LIST
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PPUSH
6876: CALL_OW 72
6880: PUSH
6881: FOR_IN
6882: IFFALSE 6958
// if not HasTask ( soldiers [ i ] ) and not GetBType ( IsInUnit ( soldiers [ i ] ) ) in [ b_breastwork , b_bunker ] then
6884: LD_VAR 0 20
6888: PUSH
6889: LD_VAR 0 14
6893: ARRAY
6894: PPUSH
6895: CALL_OW 314
6899: NOT
6900: PUSH
6901: LD_VAR 0 20
6905: PUSH
6906: LD_VAR 0 14
6910: ARRAY
6911: PPUSH
6912: CALL_OW 310
6916: PPUSH
6917: CALL_OW 266
6921: PUSH
6922: LD_INT 31
6924: PUSH
6925: LD_INT 32
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: IN
6932: NOT
6933: AND
6934: IFFALSE 6956
// ComEnterUnit ( soldiers [ i ] , emptyBunkers ) ;
6936: LD_VAR 0 20
6940: PUSH
6941: LD_VAR 0 14
6945: ARRAY
6946: PPUSH
6947: LD_VAR 0 49
6951: PPUSH
6952: CALL_OW 120
6956: GO 6881
6958: POP
6959: POP
// end ;
6960: GO 6725
6962: POP
6963: POP
// end else
6964: GO 7138
// if soldiers and barracks then
6966: LD_VAR 0 20
6970: PUSH
6971: LD_VAR 0 43
6975: AND
6976: IFFALSE 7098
// begin for i := 1 to soldiers do
6978: LD_ADDR_VAR 0 14
6982: PUSH
6983: DOUBLE
6984: LD_INT 1
6986: DEC
6987: ST_TO_ADDR
6988: LD_VAR 0 20
6992: PUSH
6993: FOR_TO
6994: IFFALSE 7094
// if GetTag ( soldiers [ i ] ) = 1 and UnitFilter ( soldiers [ i ] , [ f_outside ] ) and not HasTask ( soldiers [ i ] ) then
6996: LD_VAR 0 20
7000: PUSH
7001: LD_VAR 0 14
7005: ARRAY
7006: PPUSH
7007: CALL_OW 110
7011: PUSH
7012: LD_INT 1
7014: EQUAL
7015: PUSH
7016: LD_VAR 0 20
7020: PUSH
7021: LD_VAR 0 14
7025: ARRAY
7026: PPUSH
7027: LD_INT 56
7029: PUSH
7030: EMPTY
7031: LIST
7032: PPUSH
7033: CALL_OW 72
7037: AND
7038: PUSH
7039: LD_VAR 0 20
7043: PUSH
7044: LD_VAR 0 14
7048: ARRAY
7049: PPUSH
7050: CALL_OW 314
7054: NOT
7055: AND
7056: IFFALSE 7092
// ComEnterUnit ( soldiers [ i ] , barracks [ rand ( 1 , barracks ) ] ) ;
7058: LD_VAR 0 20
7062: PUSH
7063: LD_VAR 0 14
7067: ARRAY
7068: PPUSH
7069: LD_VAR 0 43
7073: PUSH
7074: LD_INT 1
7076: PPUSH
7077: LD_VAR 0 43
7081: PPUSH
7082: CALL_OW 12
7086: ARRAY
7087: PPUSH
7088: CALL_OW 120
7092: GO 6993
7094: POP
7095: POP
// end else
7096: GO 7138
// for i := 1 to soldiers do
7098: LD_ADDR_VAR 0 14
7102: PUSH
7103: DOUBLE
7104: LD_INT 1
7106: DEC
7107: ST_TO_ADDR
7108: LD_VAR 0 20
7112: PUSH
7113: FOR_TO
7114: IFFALSE 7136
// SetTag ( soldiers [ i ] , 3 ) ;
7116: LD_VAR 0 20
7120: PUSH
7121: LD_VAR 0 14
7125: ARRAY
7126: PPUSH
7127: LD_INT 3
7129: PPUSH
7130: CALL_OW 109
7134: GO 7113
7136: POP
7137: POP
// for i := 1 to personel do
7138: LD_ADDR_VAR 0 14
7142: PUSH
7143: DOUBLE
7144: LD_INT 1
7146: DEC
7147: ST_TO_ADDR
7148: LD_VAR 0 19
7152: PUSH
7153: FOR_TO
7154: IFFALSE 7195
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
7156: LD_ADDR_VAR 0 21
7160: PUSH
7161: LD_VAR 0 21
7165: PUSH
7166: LD_VAR 0 19
7170: PUSH
7171: LD_VAR 0 14
7175: ARRAY
7176: PPUSH
7177: LD_INT 25
7179: PUSH
7180: LD_INT 2
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PPUSH
7187: CALL_OW 72
7191: ADD
7192: ST_TO_ADDR
7193: GO 7153
7195: POP
7196: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
7197: LD_VAR 0 21
7201: PUSH
7202: LD_VAR 0 4
7206: PPUSH
7207: LD_INT 22
7209: PUSH
7210: LD_VAR 0 1
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PUSH
7219: LD_INT 21
7221: PUSH
7222: LD_INT 3
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: LD_INT 3
7231: PUSH
7232: LD_INT 24
7234: PUSH
7235: LD_INT 1000
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: LIST
7250: PPUSH
7251: CALL_OW 70
7255: AND
7256: IFFALSE 7484
// begin for i := 1 to engineers do
7258: LD_ADDR_VAR 0 14
7262: PUSH
7263: DOUBLE
7264: LD_INT 1
7266: DEC
7267: ST_TO_ADDR
7268: LD_VAR 0 21
7272: PUSH
7273: FOR_TO
7274: IFFALSE 7480
// if GetTag ( engineers [ i ] ) = 1 then
7276: LD_VAR 0 21
7280: PUSH
7281: LD_VAR 0 14
7285: ARRAY
7286: PPUSH
7287: CALL_OW 110
7291: PUSH
7292: LD_INT 1
7294: EQUAL
7295: IFFALSE 7478
// begin if GetTaskList ( engineers [ i ] ) then
7297: LD_VAR 0 21
7301: PUSH
7302: LD_VAR 0 14
7306: ARRAY
7307: PPUSH
7308: CALL_OW 437
7312: IFFALSE 7360
// if GetTaskList ( engineers [ i ] ) [ 1 ] [ 1 ] = e then
7314: LD_VAR 0 21
7318: PUSH
7319: LD_VAR 0 14
7323: ARRAY
7324: PPUSH
7325: CALL_OW 437
7329: PUSH
7330: LD_INT 1
7332: ARRAY
7333: PUSH
7334: LD_INT 1
7336: ARRAY
7337: PUSH
7338: LD_STRING e
7340: EQUAL
7341: IFFALSE 7360
// SetTaskList ( engineers [ i ] , [ ] ) ;
7343: LD_VAR 0 21
7347: PUSH
7348: LD_VAR 0 14
7352: ARRAY
7353: PPUSH
7354: EMPTY
7355: PPUSH
7356: CALL_OW 446
// if IsInUnit ( engineers [ i ] ) then
7360: LD_VAR 0 21
7364: PUSH
7365: LD_VAR 0 14
7369: ARRAY
7370: PPUSH
7371: CALL_OW 310
7375: IFFALSE 7392
// ComExitBuilding ( engineers [ i ] ) ;
7377: LD_VAR 0 21
7381: PUSH
7382: LD_VAR 0 14
7386: ARRAY
7387: PPUSH
7388: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7392: LD_ADDR_VAR 0 47
7396: PUSH
7397: LD_VAR 0 4
7401: PPUSH
7402: LD_INT 22
7404: PUSH
7405: LD_VAR 0 1
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: LD_INT 21
7416: PUSH
7417: LD_INT 3
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: PUSH
7424: LD_INT 3
7426: PUSH
7427: LD_INT 24
7429: PUSH
7430: LD_INT 1000
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: PPUSH
7446: CALL_OW 70
7450: PUSH
7451: FOR_IN
7452: IFFALSE 7476
// AddComRepairBuilding ( engineers [ i ] , damageBuilding ) ;
7454: LD_VAR 0 21
7458: PUSH
7459: LD_VAR 0 14
7463: ARRAY
7464: PPUSH
7465: LD_VAR 0 47
7469: PPUSH
7470: CALL_OW 190
7474: GO 7451
7476: POP
7477: POP
// end ;
7478: GO 7273
7480: POP
7481: POP
// end else
7482: GO 7791
// if engineers and destroyedBuildings then
7484: LD_VAR 0 21
7488: PUSH
7489: LD_VAR 0 35
7493: AND
7494: IFFALSE 7670
// begin for i := 1 to engineers do
7496: LD_ADDR_VAR 0 14
7500: PUSH
7501: DOUBLE
7502: LD_INT 1
7504: DEC
7505: ST_TO_ADDR
7506: LD_VAR 0 21
7510: PUSH
7511: FOR_TO
7512: IFFALSE 7666
// if GetTag ( engineers [ i ] ) = 1 then
7514: LD_VAR 0 21
7518: PUSH
7519: LD_VAR 0 14
7523: ARRAY
7524: PPUSH
7525: CALL_OW 110
7529: PUSH
7530: LD_INT 1
7532: EQUAL
7533: IFFALSE 7664
// begin if IsInUnit ( engineers [ i ] ) then
7535: LD_VAR 0 21
7539: PUSH
7540: LD_VAR 0 14
7544: ARRAY
7545: PPUSH
7546: CALL_OW 310
7550: IFFALSE 7567
// ComExitBuilding ( engineers [ i ] ) ;
7552: LD_VAR 0 21
7556: PUSH
7557: LD_VAR 0 14
7561: ARRAY
7562: PPUSH
7563: CALL_OW 122
// for j := 1 to destroyedBuildings / 4 do
7567: LD_ADDR_VAR 0 15
7571: PUSH
7572: DOUBLE
7573: LD_INT 1
7575: DEC
7576: ST_TO_ADDR
7577: LD_VAR 0 35
7581: PUSH
7582: LD_INT 4
7584: DIVREAL
7585: PUSH
7586: FOR_TO
7587: IFFALSE 7662
// AddComBuild ( engineers [ i ] , destroyedBuildings [ j ] , destroyedBuildings [ j + 1 ] , destroyedBuildings [ j + 2 ] , destroyedBuildings [ j + 3 ] ) ;
7589: LD_VAR 0 21
7593: PUSH
7594: LD_VAR 0 14
7598: ARRAY
7599: PPUSH
7600: LD_VAR 0 35
7604: PUSH
7605: LD_VAR 0 15
7609: ARRAY
7610: PPUSH
7611: LD_VAR 0 35
7615: PUSH
7616: LD_VAR 0 15
7620: PUSH
7621: LD_INT 1
7623: PLUS
7624: ARRAY
7625: PPUSH
7626: LD_VAR 0 35
7630: PUSH
7631: LD_VAR 0 15
7635: PUSH
7636: LD_INT 2
7638: PLUS
7639: ARRAY
7640: PPUSH
7641: LD_VAR 0 35
7645: PUSH
7646: LD_VAR 0 15
7650: PUSH
7651: LD_INT 3
7653: PLUS
7654: ARRAY
7655: PPUSH
7656: CALL_OW 205
7660: GO 7586
7662: POP
7663: POP
// end ;
7664: GO 7511
7666: POP
7667: POP
// end else
7668: GO 7791
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot and not destroyedBuildings then
7670: LD_VAR 0 21
7674: PUSH
7675: LD_VAR 0 21
7679: PPUSH
7680: LD_INT 56
7682: PUSH
7683: EMPTY
7684: LIST
7685: PPUSH
7686: CALL_OW 72
7690: AND
7691: PUSH
7692: LD_VAR 0 39
7696: AND
7697: PUSH
7698: LD_VAR 0 35
7702: NOT
7703: AND
7704: IFFALSE 7791
// for i := 1 to engineers do
7706: LD_ADDR_VAR 0 14
7710: PUSH
7711: DOUBLE
7712: LD_INT 1
7714: DEC
7715: ST_TO_ADDR
7716: LD_VAR 0 21
7720: PUSH
7721: FOR_TO
7722: IFFALSE 7789
// begin if GetTag ( engineers [ i ] ) = 1 and not HasTask ( engineers [ i ] ) then
7724: LD_VAR 0 21
7728: PUSH
7729: LD_VAR 0 14
7733: ARRAY
7734: PPUSH
7735: CALL_OW 110
7739: PUSH
7740: LD_INT 1
7742: EQUAL
7743: PUSH
7744: LD_VAR 0 21
7748: PUSH
7749: LD_VAR 0 14
7753: ARRAY
7754: PPUSH
7755: CALL_OW 314
7759: NOT
7760: AND
7761: IFFALSE 7787
// ComEnterUnit ( engineers [ i ] , depot [ 1 ] ) ;
7763: LD_VAR 0 21
7767: PUSH
7768: LD_VAR 0 14
7772: ARRAY
7773: PPUSH
7774: LD_VAR 0 39
7778: PUSH
7779: LD_INT 1
7781: ARRAY
7782: PPUSH
7783: CALL_OW 120
// end ;
7787: GO 7721
7789: POP
7790: POP
// for i := 1 to personel do
7791: LD_ADDR_VAR 0 14
7795: PUSH
7796: DOUBLE
7797: LD_INT 1
7799: DEC
7800: ST_TO_ADDR
7801: LD_VAR 0 19
7805: PUSH
7806: FOR_TO
7807: IFFALSE 7848
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
7809: LD_ADDR_VAR 0 22
7813: PUSH
7814: LD_VAR 0 22
7818: PUSH
7819: LD_VAR 0 19
7823: PUSH
7824: LD_VAR 0 14
7828: ARRAY
7829: PPUSH
7830: LD_INT 25
7832: PUSH
7833: LD_INT 3
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PPUSH
7840: CALL_OW 72
7844: ADD
7845: ST_TO_ADDR
7846: GO 7806
7848: POP
7849: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
7850: LD_VAR 0 22
7854: PUSH
7855: LD_VAR 0 4
7859: PPUSH
7860: LD_INT 22
7862: PUSH
7863: LD_VAR 0 1
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: LD_INT 21
7874: PUSH
7875: LD_INT 2
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: PUSH
7882: LD_INT 3
7884: PUSH
7885: LD_INT 24
7887: PUSH
7888: LD_INT 1000
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: LIST
7903: PPUSH
7904: CALL_OW 70
7908: AND
7909: IFFALSE 8489
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7911: LD_ADDR_VAR 0 48
7915: PUSH
7916: LD_VAR 0 4
7920: PPUSH
7921: LD_INT 22
7923: PUSH
7924: LD_VAR 0 1
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PUSH
7933: LD_INT 21
7935: PUSH
7936: LD_INT 2
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: PUSH
7943: LD_INT 3
7945: PUSH
7946: LD_INT 24
7948: PUSH
7949: LD_INT 1000
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: LIST
7964: PPUSH
7965: CALL_OW 70
7969: PUSH
7970: FOR_IN
7971: IFFALSE 8485
// begin if GetDistUnitArea ( damageUnit , repairArea ) <= 5 then
7973: LD_VAR 0 48
7977: PPUSH
7978: LD_VAR 0 6
7982: PPUSH
7983: CALL_OW 299
7987: PUSH
7988: LD_INT 5
7990: LESSEQUAL
7991: IFFALSE 8080
// for i := 1 to vehicles do
7993: LD_ADDR_VAR 0 14
7997: PUSH
7998: DOUBLE
7999: LD_INT 1
8001: DEC
8002: ST_TO_ADDR
8003: LD_VAR 0 25
8007: PUSH
8008: FOR_TO
8009: IFFALSE 8078
// if vehicles [ i ] [ 1 ] = damageUnit then
8011: LD_VAR 0 25
8015: PUSH
8016: LD_VAR 0 14
8020: ARRAY
8021: PUSH
8022: LD_INT 1
8024: ARRAY
8025: PUSH
8026: LD_VAR 0 48
8030: EQUAL
8031: IFFALSE 8076
// begin ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
8033: LD_VAR 0 25
8037: PUSH
8038: LD_VAR 0 14
8042: ARRAY
8043: PUSH
8044: LD_INT 2
8046: ARRAY
8047: PPUSH
8048: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
8052: LD_VAR 0 25
8056: PUSH
8057: LD_VAR 0 14
8061: ARRAY
8062: PUSH
8063: LD_INT 2
8065: ARRAY
8066: PPUSH
8067: LD_VAR 0 48
8071: PPUSH
8072: CALL_OW 189
// end ;
8076: GO 8008
8078: POP
8079: POP
// for i := 1 to mechanics do
8080: LD_ADDR_VAR 0 14
8084: PUSH
8085: DOUBLE
8086: LD_INT 1
8088: DEC
8089: ST_TO_ADDR
8090: LD_VAR 0 22
8094: PUSH
8095: FOR_TO
8096: IFFALSE 8264
// if GetTag ( mechanics [ i ] ) = 1 and IsInUnit ( mechanics [ i ] ) in [ b_workshop , b_factory ] then
8098: LD_VAR 0 22
8102: PUSH
8103: LD_VAR 0 14
8107: ARRAY
8108: PPUSH
8109: CALL_OW 110
8113: PUSH
8114: LD_INT 1
8116: EQUAL
8117: PUSH
8118: LD_VAR 0 22
8122: PUSH
8123: LD_VAR 0 14
8127: ARRAY
8128: PPUSH
8129: CALL_OW 310
8133: PUSH
8134: LD_INT 2
8136: PUSH
8137: LD_INT 3
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: IN
8144: AND
8145: IFFALSE 8262
// begin if GetTaskList ( mechanics [ i ] ) then
8147: LD_VAR 0 22
8151: PUSH
8152: LD_VAR 0 14
8156: ARRAY
8157: PPUSH
8158: CALL_OW 437
8162: IFFALSE 8210
// if GetTaskList ( mechanics [ i ] ) [ 1 ] [ 1 ] = e then
8164: LD_VAR 0 22
8168: PUSH
8169: LD_VAR 0 14
8173: ARRAY
8174: PPUSH
8175: CALL_OW 437
8179: PUSH
8180: LD_INT 1
8182: ARRAY
8183: PUSH
8184: LD_INT 1
8186: ARRAY
8187: PUSH
8188: LD_STRING e
8190: EQUAL
8191: IFFALSE 8210
// SetTaskList ( mechanics [ i ] , [ ] ) ;
8193: LD_VAR 0 22
8197: PUSH
8198: LD_VAR 0 14
8202: ARRAY
8203: PPUSH
8204: EMPTY
8205: PPUSH
8206: CALL_OW 446
// if IsInUnit ( mechanics [ i ] ) then
8210: LD_VAR 0 22
8214: PUSH
8215: LD_VAR 0 14
8219: ARRAY
8220: PPUSH
8221: CALL_OW 310
8225: IFFALSE 8242
// ComExitBuilding ( mechanics [ i ] ) ;
8227: LD_VAR 0 22
8231: PUSH
8232: LD_VAR 0 14
8236: ARRAY
8237: PPUSH
8238: CALL_OW 122
// AddComRepairVehicle ( mechanics [ i ] , damageUnit ) ;
8242: LD_VAR 0 22
8246: PUSH
8247: LD_VAR 0 14
8251: ARRAY
8252: PPUSH
8253: LD_VAR 0 48
8257: PPUSH
8258: CALL_OW 189
// end ;
8262: GO 8095
8264: POP
8265: POP
// if GetLives ( damageUnit ) < 250 and IsInArea ( damageUnit , baseArea ) then
8266: LD_VAR 0 48
8270: PPUSH
8271: CALL_OW 256
8275: PUSH
8276: LD_INT 250
8278: LESS
8279: PUSH
8280: LD_VAR 0 48
8284: PPUSH
8285: LD_VAR 0 4
8289: PPUSH
8290: CALL_OW 308
8294: AND
8295: IFFALSE 8483
// for i := 1 to personel do
8297: LD_ADDR_VAR 0 14
8301: PUSH
8302: DOUBLE
8303: LD_INT 1
8305: DEC
8306: ST_TO_ADDR
8307: LD_VAR 0 19
8311: PUSH
8312: FOR_TO
8313: IFFALSE 8481
// if GetTag ( mechanics [ i ] ) = 1 and IsInUnit ( mechanics [ i ] ) in [ b_workshop , b_factory ] then
8315: LD_VAR 0 22
8319: PUSH
8320: LD_VAR 0 14
8324: ARRAY
8325: PPUSH
8326: CALL_OW 110
8330: PUSH
8331: LD_INT 1
8333: EQUAL
8334: PUSH
8335: LD_VAR 0 22
8339: PUSH
8340: LD_VAR 0 14
8344: ARRAY
8345: PPUSH
8346: CALL_OW 310
8350: PUSH
8351: LD_INT 2
8353: PUSH
8354: LD_INT 3
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: IN
8361: AND
8362: IFFALSE 8479
// begin if GetTaskList ( mechanics [ i ] ) then
8364: LD_VAR 0 22
8368: PUSH
8369: LD_VAR 0 14
8373: ARRAY
8374: PPUSH
8375: CALL_OW 437
8379: IFFALSE 8427
// if GetTaskList ( mechanics [ i ] ) [ 1 ] [ 1 ] = e then
8381: LD_VAR 0 22
8385: PUSH
8386: LD_VAR 0 14
8390: ARRAY
8391: PPUSH
8392: CALL_OW 437
8396: PUSH
8397: LD_INT 1
8399: ARRAY
8400: PUSH
8401: LD_INT 1
8403: ARRAY
8404: PUSH
8405: LD_STRING e
8407: EQUAL
8408: IFFALSE 8427
// SetTaskList ( mechanics [ i ] , [ ] ) ;
8410: LD_VAR 0 22
8414: PUSH
8415: LD_VAR 0 14
8419: ARRAY
8420: PPUSH
8421: EMPTY
8422: PPUSH
8423: CALL_OW 446
// if IsInUnit ( mechanics [ i ] ) then
8427: LD_VAR 0 22
8431: PUSH
8432: LD_VAR 0 14
8436: ARRAY
8437: PPUSH
8438: CALL_OW 310
8442: IFFALSE 8459
// ComExitBuilding ( mechanics [ i ] ) ;
8444: LD_VAR 0 22
8448: PUSH
8449: LD_VAR 0 14
8453: ARRAY
8454: PPUSH
8455: CALL_OW 122
// AddComRepairVehicle ( mechanics [ i ] , damageUnit ) ;
8459: LD_VAR 0 22
8463: PUSH
8464: LD_VAR 0 14
8468: ARRAY
8469: PPUSH
8470: LD_VAR 0 48
8474: PPUSH
8475: CALL_OW 189
// end ;
8479: GO 8312
8481: POP
8482: POP
// end ;
8483: GO 7970
8485: POP
8486: POP
// end else
8487: GO 8786
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and UnitFilter ( controlTowers , [ f_empty ] ) then
8489: LD_VAR 0 22
8493: PUSH
8494: LD_VAR 0 22
8498: PPUSH
8499: LD_INT 56
8501: PUSH
8502: EMPTY
8503: LIST
8504: PPUSH
8505: CALL_OW 72
8509: AND
8510: PUSH
8511: LD_VAR 0 44
8515: PPUSH
8516: LD_INT 58
8518: PUSH
8519: EMPTY
8520: LIST
8521: PPUSH
8522: CALL_OW 72
8526: AND
8527: IFFALSE 8644
// begin for i := 1 to mechanics do
8529: LD_ADDR_VAR 0 14
8533: PUSH
8534: DOUBLE
8535: LD_INT 1
8537: DEC
8538: ST_TO_ADDR
8539: LD_VAR 0 22
8543: PUSH
8544: FOR_TO
8545: IFFALSE 8640
// if GetTag ( mechanics [ i ] ) = 1 and not HasTask ( mechanics [ i ] ) and not IsInUnit ( mechanics [ i ] ) then
8547: LD_VAR 0 22
8551: PUSH
8552: LD_VAR 0 14
8556: ARRAY
8557: PPUSH
8558: CALL_OW 110
8562: PUSH
8563: LD_INT 1
8565: EQUAL
8566: PUSH
8567: LD_VAR 0 22
8571: PUSH
8572: LD_VAR 0 14
8576: ARRAY
8577: PPUSH
8578: CALL_OW 314
8582: NOT
8583: AND
8584: PUSH
8585: LD_VAR 0 22
8589: PUSH
8590: LD_VAR 0 14
8594: ARRAY
8595: PPUSH
8596: CALL_OW 310
8600: NOT
8601: AND
8602: IFFALSE 8638
// ComEnterUnit ( mechanics [ i ] , controlTowers [ rand ( 1 , controlTowers ) ] ) ;
8604: LD_VAR 0 22
8608: PUSH
8609: LD_VAR 0 14
8613: ARRAY
8614: PPUSH
8615: LD_VAR 0 44
8619: PUSH
8620: LD_INT 1
8622: PPUSH
8623: LD_VAR 0 44
8627: PPUSH
8628: CALL_OW 12
8632: ARRAY
8633: PPUSH
8634: CALL_OW 120
8638: GO 8544
8640: POP
8641: POP
// end else
8642: GO 8786
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
8644: LD_VAR 0 22
8648: PUSH
8649: LD_VAR 0 22
8653: PPUSH
8654: LD_INT 56
8656: PUSH
8657: EMPTY
8658: LIST
8659: PPUSH
8660: CALL_OW 72
8664: AND
8665: PUSH
8666: LD_VAR 0 40
8670: AND
8671: IFFALSE 8786
// for i := 1 to mechanics do
8673: LD_ADDR_VAR 0 14
8677: PUSH
8678: DOUBLE
8679: LD_INT 1
8681: DEC
8682: ST_TO_ADDR
8683: LD_VAR 0 22
8687: PUSH
8688: FOR_TO
8689: IFFALSE 8784
// if GetTag ( mechanics [ i ] ) = 1 and not HasTask ( mechanics [ i ] ) and not IsInUnit ( mechanics [ i ] ) then
8691: LD_VAR 0 22
8695: PUSH
8696: LD_VAR 0 14
8700: ARRAY
8701: PPUSH
8702: CALL_OW 110
8706: PUSH
8707: LD_INT 1
8709: EQUAL
8710: PUSH
8711: LD_VAR 0 22
8715: PUSH
8716: LD_VAR 0 14
8720: ARRAY
8721: PPUSH
8722: CALL_OW 314
8726: NOT
8727: AND
8728: PUSH
8729: LD_VAR 0 22
8733: PUSH
8734: LD_VAR 0 14
8738: ARRAY
8739: PPUSH
8740: CALL_OW 310
8744: NOT
8745: AND
8746: IFFALSE 8782
// ComEnterUnit ( mechanics [ i ] , factory [ rand ( 1 , factory ) ] ) ;
8748: LD_VAR 0 22
8752: PUSH
8753: LD_VAR 0 14
8757: ARRAY
8758: PPUSH
8759: LD_VAR 0 40
8763: PUSH
8764: LD_INT 1
8766: PPUSH
8767: LD_VAR 0 40
8771: PPUSH
8772: CALL_OW 12
8776: ARRAY
8777: PPUSH
8778: CALL_OW 120
8782: GO 8688
8784: POP
8785: POP
// for i := 1 to personel do
8786: LD_ADDR_VAR 0 14
8790: PUSH
8791: DOUBLE
8792: LD_INT 1
8794: DEC
8795: ST_TO_ADDR
8796: LD_VAR 0 19
8800: PUSH
8801: FOR_TO
8802: IFFALSE 8843
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
8804: LD_ADDR_VAR 0 23
8808: PUSH
8809: LD_VAR 0 23
8813: PUSH
8814: LD_VAR 0 19
8818: PUSH
8819: LD_VAR 0 14
8823: ARRAY
8824: PPUSH
8825: LD_INT 25
8827: PUSH
8828: LD_INT 4
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PPUSH
8835: CALL_OW 72
8839: ADD
8840: ST_TO_ADDR
8841: GO 8801
8843: POP
8844: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
8845: LD_VAR 0 23
8849: PUSH
8850: LD_VAR 0 4
8854: PPUSH
8855: LD_INT 22
8857: PUSH
8858: LD_VAR 0 1
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PUSH
8867: LD_INT 21
8869: PUSH
8870: LD_INT 1
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PUSH
8877: LD_INT 3
8879: PUSH
8880: LD_INT 24
8882: PUSH
8883: LD_INT 1000
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: LIST
8898: PPUSH
8899: CALL_OW 70
8903: AND
8904: IFFALSE 9341
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
8906: LD_ADDR_VAR 0 48
8910: PUSH
8911: LD_VAR 0 4
8915: PPUSH
8916: LD_INT 22
8918: PUSH
8919: LD_VAR 0 1
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: PUSH
8928: LD_INT 21
8930: PUSH
8931: LD_INT 1
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: PUSH
8938: LD_INT 3
8940: PUSH
8941: LD_INT 24
8943: PUSH
8944: LD_INT 1000
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: LIST
8959: PPUSH
8960: CALL_OW 70
8964: PUSH
8965: FOR_IN
8966: IFFALSE 9337
// begin if GetDistUnitArea ( damageUnit , healArea ) <= 5 then
8968: LD_VAR 0 48
8972: PPUSH
8973: LD_VAR 0 5
8977: PPUSH
8978: CALL_OW 299
8982: PUSH
8983: LD_INT 5
8985: LESSEQUAL
8986: IFFALSE 9146
// for i := 1 to scientists do
8988: LD_ADDR_VAR 0 14
8992: PUSH
8993: DOUBLE
8994: LD_INT 1
8996: DEC
8997: ST_TO_ADDR
8998: LD_VAR 0 23
9002: PUSH
9003: FOR_TO
9004: IFFALSE 9144
// if GetTag ( scientists [ i ] ) = 1 then
9006: LD_VAR 0 23
9010: PUSH
9011: LD_VAR 0 14
9015: ARRAY
9016: PPUSH
9017: CALL_OW 110
9021: PUSH
9022: LD_INT 1
9024: EQUAL
9025: IFFALSE 9142
// begin if GetTaskList ( scientists [ i ] ) then
9027: LD_VAR 0 23
9031: PUSH
9032: LD_VAR 0 14
9036: ARRAY
9037: PPUSH
9038: CALL_OW 437
9042: IFFALSE 9090
// if GetTaskList ( scientists [ i ] ) [ 1 ] [ 1 ] = e then
9044: LD_VAR 0 23
9048: PUSH
9049: LD_VAR 0 14
9053: ARRAY
9054: PPUSH
9055: CALL_OW 437
9059: PUSH
9060: LD_INT 1
9062: ARRAY
9063: PUSH
9064: LD_INT 1
9066: ARRAY
9067: PUSH
9068: LD_STRING e
9070: EQUAL
9071: IFFALSE 9090
// SetTaskList ( scientists [ i ] , [ ] ) ;
9073: LD_VAR 0 23
9077: PUSH
9078: LD_VAR 0 14
9082: ARRAY
9083: PPUSH
9084: EMPTY
9085: PPUSH
9086: CALL_OW 446
// if IsInUnit ( scientists [ i ] ) then
9090: LD_VAR 0 23
9094: PUSH
9095: LD_VAR 0 14
9099: ARRAY
9100: PPUSH
9101: CALL_OW 310
9105: IFFALSE 9122
// ComExitBuilding ( scientists [ i ] ) ;
9107: LD_VAR 0 23
9111: PUSH
9112: LD_VAR 0 14
9116: ARRAY
9117: PPUSH
9118: CALL_OW 122
// AddComHeal ( scientists [ i ] , damageUnit ) ;
9122: LD_VAR 0 23
9126: PUSH
9127: LD_VAR 0 14
9131: ARRAY
9132: PPUSH
9133: LD_VAR 0 48
9137: PPUSH
9138: CALL_OW 188
// end ;
9142: GO 9003
9144: POP
9145: POP
// if GetLives ( damageUnit ) < 250 and IsInArea ( damageUnit , baseArea ) then
9146: LD_VAR 0 48
9150: PPUSH
9151: CALL_OW 256
9155: PUSH
9156: LD_INT 250
9158: LESS
9159: PUSH
9160: LD_VAR 0 48
9164: PPUSH
9165: LD_VAR 0 4
9169: PPUSH
9170: CALL_OW 308
9174: AND
9175: IFFALSE 9335
// for i := 1 to scientists do
9177: LD_ADDR_VAR 0 14
9181: PUSH
9182: DOUBLE
9183: LD_INT 1
9185: DEC
9186: ST_TO_ADDR
9187: LD_VAR 0 23
9191: PUSH
9192: FOR_TO
9193: IFFALSE 9333
// if GetTag ( scientists [ i ] ) = 1 then
9195: LD_VAR 0 23
9199: PUSH
9200: LD_VAR 0 14
9204: ARRAY
9205: PPUSH
9206: CALL_OW 110
9210: PUSH
9211: LD_INT 1
9213: EQUAL
9214: IFFALSE 9331
// begin if GetTaskList ( scientists [ i ] ) then
9216: LD_VAR 0 23
9220: PUSH
9221: LD_VAR 0 14
9225: ARRAY
9226: PPUSH
9227: CALL_OW 437
9231: IFFALSE 9279
// if GetTaskList ( scientists [ i ] ) [ 1 ] [ 1 ] = e then
9233: LD_VAR 0 23
9237: PUSH
9238: LD_VAR 0 14
9242: ARRAY
9243: PPUSH
9244: CALL_OW 437
9248: PUSH
9249: LD_INT 1
9251: ARRAY
9252: PUSH
9253: LD_INT 1
9255: ARRAY
9256: PUSH
9257: LD_STRING e
9259: EQUAL
9260: IFFALSE 9279
// SetTaskList ( scientists [ i ] , [ ] ) ;
9262: LD_VAR 0 23
9266: PUSH
9267: LD_VAR 0 14
9271: ARRAY
9272: PPUSH
9273: EMPTY
9274: PPUSH
9275: CALL_OW 446
// if IsInUnit ( scientists [ i ] ) then
9279: LD_VAR 0 23
9283: PUSH
9284: LD_VAR 0 14
9288: ARRAY
9289: PPUSH
9290: CALL_OW 310
9294: IFFALSE 9311
// ComExitBuilding ( scientists [ i ] ) ;
9296: LD_VAR 0 23
9300: PUSH
9301: LD_VAR 0 14
9305: ARRAY
9306: PPUSH
9307: CALL_OW 122
// AddComHeal ( scientists [ i ] , damageUnit ) ;
9311: LD_VAR 0 23
9315: PUSH
9316: LD_VAR 0 14
9320: ARRAY
9321: PPUSH
9322: LD_VAR 0 48
9326: PPUSH
9327: CALL_OW 188
// end ;
9331: GO 9192
9333: POP
9334: POP
// end ;
9335: GO 8965
9337: POP
9338: POP
// end else
9339: GO 9483
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
9341: LD_VAR 0 23
9345: PUSH
9346: LD_VAR 0 23
9350: PPUSH
9351: LD_INT 56
9353: PUSH
9354: EMPTY
9355: LIST
9356: PPUSH
9357: CALL_OW 72
9361: AND
9362: PUSH
9363: LD_VAR 0 41
9367: AND
9368: IFFALSE 9483
// for i := 1 to scientists do
9370: LD_ADDR_VAR 0 14
9374: PUSH
9375: DOUBLE
9376: LD_INT 1
9378: DEC
9379: ST_TO_ADDR
9380: LD_VAR 0 23
9384: PUSH
9385: FOR_TO
9386: IFFALSE 9481
// if GetTag ( scientists [ i ] ) = 1 and not HasTask ( scientists [ i ] ) and not IsInUnit ( scientists [ i ] ) then
9388: LD_VAR 0 23
9392: PUSH
9393: LD_VAR 0 14
9397: ARRAY
9398: PPUSH
9399: CALL_OW 110
9403: PUSH
9404: LD_INT 1
9406: EQUAL
9407: PUSH
9408: LD_VAR 0 23
9412: PUSH
9413: LD_VAR 0 14
9417: ARRAY
9418: PPUSH
9419: CALL_OW 314
9423: NOT
9424: AND
9425: PUSH
9426: LD_VAR 0 23
9430: PUSH
9431: LD_VAR 0 14
9435: ARRAY
9436: PPUSH
9437: CALL_OW 310
9441: NOT
9442: AND
9443: IFFALSE 9479
// ComEnterUnit ( scientists [ i ] , lab [ rand ( 1 , lab ) ] ) ;
9445: LD_VAR 0 23
9449: PUSH
9450: LD_VAR 0 14
9454: ARRAY
9455: PPUSH
9456: LD_VAR 0 41
9460: PUSH
9461: LD_INT 1
9463: PPUSH
9464: LD_VAR 0 41
9468: PPUSH
9469: CALL_OW 12
9473: ARRAY
9474: PPUSH
9475: CALL_OW 120
9479: GO 9385
9481: POP
9482: POP
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , us_bulldozer ] ] ) then
9483: LD_INT 22
9485: PUSH
9486: LD_VAR 0 1
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PUSH
9495: LD_INT 34
9497: PUSH
9498: LD_INT 14
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PPUSH
9509: CALL_OW 69
9513: NOT
9514: IFFALSE 9541
// AddComConstruct ( factory [ 1 ] , us_heavy_tracked , engine_combustion , control_remote , us_bulldozer ) ;
9516: LD_VAR 0 40
9520: PUSH
9521: LD_INT 1
9523: ARRAY
9524: PPUSH
9525: LD_INT 4
9527: PPUSH
9528: LD_INT 1
9530: PPUSH
9531: LD_INT 2
9533: PPUSH
9534: LD_INT 14
9536: PPUSH
9537: CALL_OW 185
// if vehicles < vehiclesAmount and factory then
9541: LD_VAR 0 25
9545: PUSH
9546: LD_VAR 0 8
9550: LESS
9551: PUSH
9552: LD_VAR 0 40
9556: AND
9557: IFFALSE 9805
// begin tmp = vehiclesAmount - vehicles ;
9559: LD_ADDR_VAR 0 16
9563: PUSH
9564: LD_VAR 0 8
9568: PUSH
9569: LD_VAR 0 25
9573: MINUS
9574: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
9575: LD_ADDR_VAR 0 32
9579: PUSH
9580: LD_VAR 0 1
9584: PPUSH
9585: LD_VAR 0 2
9589: PPUSH
9590: CALL 14415 0 2
9594: ST_TO_ADDR
// for i := 1 to tmp do
9595: LD_ADDR_VAR 0 14
9599: PUSH
9600: DOUBLE
9601: LD_INT 1
9603: DEC
9604: ST_TO_ADDR
9605: LD_VAR 0 16
9609: PUSH
9610: FOR_TO
9611: IFFALSE 9801
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
9613: LD_ADDR_VAR 0 16
9617: PUSH
9618: LD_VAR 0 32
9622: PUSH
9623: LD_INT 1
9625: PPUSH
9626: LD_VAR 0 32
9630: PPUSH
9631: CALL_OW 12
9635: ARRAY
9636: ST_TO_ADDR
// if tmp in [ 6 , 34 , 14 , 71 , 47 ] then
9637: LD_VAR 0 16
9641: PUSH
9642: LD_INT 6
9644: PUSH
9645: LD_INT 34
9647: PUSH
9648: LD_INT 14
9650: PUSH
9651: LD_INT 71
9653: PUSH
9654: LD_INT 47
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: IN
9664: IFFALSE 9702
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
9666: LD_ADDR_VAR 0 33
9670: PUSH
9671: LD_INT 4
9673: PUSH
9674: EMPTY
9675: LIST
9676: PUSH
9677: LD_INT 14
9679: PUSH
9680: EMPTY
9681: LIST
9682: PUSH
9683: LD_INT 24
9685: PUSH
9686: EMPTY
9687: LIST
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: LIST
9693: PUSH
9694: LD_VAR 0 2
9698: ARRAY
9699: ST_TO_ADDR
9700: GO 9756
// chassis = [ [ us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
9702: LD_ADDR_VAR 0 33
9706: PUSH
9707: LD_INT 3
9709: PUSH
9710: LD_INT 4
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: PUSH
9717: LD_INT 13
9719: PUSH
9720: LD_INT 14
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: PUSH
9727: LD_INT 21
9729: PUSH
9730: LD_INT 23
9732: PUSH
9733: LD_INT 24
9735: PUSH
9736: LD_INT 22
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: LIST
9749: PUSH
9750: LD_VAR 0 2
9754: ARRAY
9755: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_remote , tmp ) ;
9756: LD_VAR 0 40
9760: PUSH
9761: LD_INT 1
9763: ARRAY
9764: PPUSH
9765: LD_VAR 0 33
9769: PUSH
9770: LD_INT 1
9772: PPUSH
9773: LD_VAR 0 33
9777: PPUSH
9778: CALL_OW 12
9782: ARRAY
9783: PPUSH
9784: LD_INT 1
9786: PPUSH
9787: LD_INT 2
9789: PPUSH
9790: LD_VAR 0 16
9794: PPUSH
9795: CALL_OW 185
// end ;
9799: GO 9610
9801: POP
9802: POP
// end else
9803: GO 9818
// ComCancel ( factory [ 1 ] ) ;
9805: LD_VAR 0 40
9809: PUSH
9810: LD_INT 1
9812: ARRAY
9813: PPUSH
9814: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ] ] ) do
9818: LD_ADDR_VAR 0 24
9822: PUSH
9823: LD_VAR 0 4
9827: PPUSH
9828: LD_INT 22
9830: PUSH
9831: LD_VAR 0 1
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PUSH
9840: LD_INT 21
9842: PUSH
9843: LD_INT 2
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 50
9852: PUSH
9853: EMPTY
9854: LIST
9855: PUSH
9856: LD_INT 3
9858: PUSH
9859: LD_INT 2
9861: PUSH
9862: LD_INT 34
9864: PUSH
9865: LD_INT 12
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PUSH
9872: LD_INT 34
9874: PUSH
9875: LD_INT 51
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PUSH
9882: LD_INT 34
9884: PUSH
9885: LD_INT 32
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: PUSH
9892: LD_INT 34
9894: PUSH
9895: LD_INT 31
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: PPUSH
9919: CALL_OW 70
9923: PUSH
9924: FOR_IN
9925: IFFALSE 10080
// begin vehicleInList = false ;
9927: LD_ADDR_VAR 0 26
9931: PUSH
9932: LD_INT 0
9934: ST_TO_ADDR
// for i := 1 to vehicles do
9935: LD_ADDR_VAR 0 14
9939: PUSH
9940: DOUBLE
9941: LD_INT 1
9943: DEC
9944: ST_TO_ADDR
9945: LD_VAR 0 25
9949: PUSH
9950: FOR_TO
9951: IFFALSE 9981
// if vehicle in vehicles [ i ] then
9953: LD_VAR 0 24
9957: PUSH
9958: LD_VAR 0 25
9962: PUSH
9963: LD_VAR 0 14
9967: ARRAY
9968: IN
9969: IFFALSE 9979
// vehicleInList = true ;
9971: LD_ADDR_VAR 0 26
9975: PUSH
9976: LD_INT 1
9978: ST_TO_ADDR
9979: GO 9950
9981: POP
9982: POP
// if not vehicleInList then
9983: LD_VAR 0 26
9987: NOT
9988: IFFALSE 10078
// begin if vehicles < vehiclesToAttackAmount then
9990: LD_VAR 0 25
9994: PUSH
9995: LD_VAR 0 10
9999: LESS
10000: IFFALSE 10041
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] ] ] else
10002: LD_ADDR_VAR 0 25
10006: PUSH
10007: LD_VAR 0 25
10011: PUSH
10012: LD_VAR 0 24
10016: PUSH
10017: LD_VAR 0 24
10021: PPUSH
10022: CALL_OW 313
10026: PUSH
10027: LD_INT 1
10029: ARRAY
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PUSH
10035: EMPTY
10036: LIST
10037: ADD
10038: ST_TO_ADDR
10039: GO 10078
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] ] ] ;
10041: LD_ADDR_VAR 0 25
10045: PUSH
10046: LD_VAR 0 25
10050: PUSH
10051: LD_VAR 0 24
10055: PUSH
10056: LD_VAR 0 24
10060: PPUSH
10061: CALL_OW 313
10065: PUSH
10066: LD_INT 1
10068: ARRAY
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: PUSH
10074: EMPTY
10075: LIST
10076: ADD
10077: ST_TO_ADDR
// end ; end ;
10078: GO 9924
10080: POP
10081: POP
// for enemyUnits in FilterAllUnits ( [ f_enemy , side ] ) do
10082: LD_ADDR_VAR 0 50
10086: PUSH
10087: LD_INT 81
10089: PUSH
10090: LD_VAR 0 1
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PPUSH
10099: CALL_OW 69
10103: PUSH
10104: FOR_IN
10105: IFFALSE 10623
// begin offensiveUnits = [ ] ;
10107: LD_ADDR_VAR 0 27
10111: PUSH
10112: EMPTY
10113: ST_TO_ADDR
// offensiveReadyCounter = 0 ;
10114: LD_ADDR_VAR 0 28
10118: PUSH
10119: LD_INT 0
10121: ST_TO_ADDR
// for i := 1 to vehicles do
10122: LD_ADDR_VAR 0 14
10126: PUSH
10127: DOUBLE
10128: LD_INT 1
10130: DEC
10131: ST_TO_ADDR
10132: LD_VAR 0 25
10136: PUSH
10137: FOR_TO
10138: IFFALSE 10346
// if GetTag ( vehicles [ i ] [ 1 ] ) = 2 then
10140: LD_VAR 0 25
10144: PUSH
10145: LD_VAR 0 14
10149: ARRAY
10150: PUSH
10151: LD_INT 1
10153: ARRAY
10154: PPUSH
10155: CALL_OW 110
10159: PUSH
10160: LD_INT 2
10162: EQUAL
10163: IFFALSE 10344
// begin if GetLives ( vehicles [ i ] [ 1 ] ) > 650 then
10165: LD_VAR 0 25
10169: PUSH
10170: LD_VAR 0 14
10174: ARRAY
10175: PUSH
10176: LD_INT 1
10178: ARRAY
10179: PPUSH
10180: CALL_OW 256
10184: PUSH
10185: LD_INT 650
10187: GREATER
10188: IFFALSE 10204
// offensiveReadyCounter = offensiveReadyCounter + 1 ;
10190: LD_ADDR_VAR 0 28
10194: PUSH
10195: LD_VAR 0 28
10199: PUSH
10200: LD_INT 1
10202: PLUS
10203: ST_TO_ADDR
// if IsInArea ( vehicles [ i ] [ 1 ] , baseArea ) then
10204: LD_VAR 0 25
10208: PUSH
10209: LD_VAR 0 14
10213: ARRAY
10214: PUSH
10215: LD_INT 1
10217: ARRAY
10218: PPUSH
10219: LD_VAR 0 4
10223: PPUSH
10224: CALL_OW 308
10228: IFFALSE 10256
// offensiveUnits = offensiveUnits ^ vehicles [ i ] [ 1 ] ;
10230: LD_ADDR_VAR 0 27
10234: PUSH
10235: LD_VAR 0 27
10239: PUSH
10240: LD_VAR 0 25
10244: PUSH
10245: LD_VAR 0 14
10249: ARRAY
10250: PUSH
10251: LD_INT 1
10253: ARRAY
10254: ADD
10255: ST_TO_ADDR
// for j = 1 to personel do
10256: LD_ADDR_VAR 0 15
10260: PUSH
10261: DOUBLE
10262: LD_INT 1
10264: DEC
10265: ST_TO_ADDR
10266: LD_VAR 0 19
10270: PUSH
10271: FOR_TO
10272: IFFALSE 10342
// if personel [ j ] = vehicles [ i ] [ 2 ] then
10274: LD_VAR 0 19
10278: PUSH
10279: LD_VAR 0 15
10283: ARRAY
10284: PUSH
10285: LD_VAR 0 25
10289: PUSH
10290: LD_VAR 0 14
10294: ARRAY
10295: PUSH
10296: LD_INT 2
10298: ARRAY
10299: EQUAL
10300: IFFALSE 10340
// personel = ReplaceIn ( personel , [ j , personel [ j ] ] , 3 ) ;
10302: LD_ADDR_VAR 0 19
10306: PUSH
10307: LD_VAR 0 19
10311: PPUSH
10312: LD_VAR 0 15
10316: PUSH
10317: LD_VAR 0 19
10321: PUSH
10322: LD_VAR 0 15
10326: ARRAY
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PPUSH
10332: LD_INT 3
10334: PPUSH
10335: CALL 46382 0 3
10339: ST_TO_ADDR
10340: GO 10271
10342: POP
10343: POP
// end ;
10344: GO 10137
10346: POP
10347: POP
// if vehiclesToAttackAmount <= offensiveReadyCounter then
10348: LD_VAR 0 10
10352: PUSH
10353: LD_VAR 0 28
10357: LESSEQUAL
10358: IFFALSE 10621
// begin for i := 1 to offensiveUnits do
10360: LD_ADDR_VAR 0 14
10364: PUSH
10365: DOUBLE
10366: LD_INT 1
10368: DEC
10369: ST_TO_ADDR
10370: LD_VAR 0 27
10374: PUSH
10375: FOR_TO
10376: IFFALSE 10619
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , offensiveUnits [ i ] ) ;
10378: LD_ADDR_VAR 0 29
10382: PUSH
10383: LD_INT 81
10385: PUSH
10386: LD_INT 1
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL_OW 69
10397: PPUSH
10398: LD_VAR 0 27
10402: PUSH
10403: LD_VAR 0 14
10407: ARRAY
10408: PPUSH
10409: CALL_OW 74
10413: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , offensiveUnits [ i ] ) ;
10414: LD_ADDR_VAR 0 30
10418: PUSH
10419: LD_INT 81
10421: PUSH
10422: LD_INT 1
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: LD_INT 2
10431: PUSH
10432: LD_INT 59
10434: PUSH
10435: EMPTY
10436: LIST
10437: PUSH
10438: LD_INT 21
10440: PUSH
10441: LD_INT 1
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PUSH
10448: LD_INT 21
10450: PUSH
10451: LD_INT 2
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: EMPTY
10469: LIST
10470: PPUSH
10471: CALL_OW 69
10475: PPUSH
10476: LD_VAR 0 27
10480: PUSH
10481: LD_VAR 0 14
10485: ARRAY
10486: PPUSH
10487: CALL_OW 74
10491: ST_TO_ADDR
// if GetDistUnits ( offensiveUnits [ i ] , target1 ) + 9 < GetDistUnits ( offensiveUnits [ i ] , target2 ) then
10492: LD_VAR 0 27
10496: PUSH
10497: LD_VAR 0 14
10501: ARRAY
10502: PPUSH
10503: LD_VAR 0 29
10507: PPUSH
10508: CALL_OW 296
10512: PUSH
10513: LD_INT 9
10515: PLUS
10516: PUSH
10517: LD_VAR 0 27
10521: PUSH
10522: LD_VAR 0 14
10526: ARRAY
10527: PPUSH
10528: LD_VAR 0 30
10532: PPUSH
10533: CALL_OW 296
10537: LESS
10538: IFFALSE 10562
// ComAttackUnit ( offensiveUnits [ i ] , target1 ) else
10540: LD_VAR 0 27
10544: PUSH
10545: LD_VAR 0 14
10549: ARRAY
10550: PPUSH
10551: LD_VAR 0 29
10555: PPUSH
10556: CALL_OW 115
10560: GO 10582
// ComAttackUnit ( offensiveUnits [ i ] , target2 ) ;
10562: LD_VAR 0 27
10566: PUSH
10567: LD_VAR 0 14
10571: ARRAY
10572: PPUSH
10573: LD_VAR 0 30
10577: PPUSH
10578: CALL_OW 115
// AddComAgressiveMove ( offensiveUnits [ i ] , GetX ( enemyUnits ) , GetY ( enemyUnits ) ) ;
10582: LD_VAR 0 27
10586: PUSH
10587: LD_VAR 0 14
10591: ARRAY
10592: PPUSH
10593: LD_VAR 0 50
10597: PPUSH
10598: CALL_OW 250
10602: PPUSH
10603: LD_VAR 0 50
10607: PPUSH
10608: CALL_OW 251
10612: PPUSH
10613: CALL_OW 174
// end ;
10617: GO 10375
10619: POP
10620: POP
// end ; end ;
10621: GO 10104
10623: POP
10624: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
10625: LD_ADDR_VAR 0 50
10629: PUSH
10630: LD_VAR 0 7
10634: PPUSH
10635: LD_INT 81
10637: PUSH
10638: LD_VAR 0 1
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: PPUSH
10647: CALL_OW 70
10651: PUSH
10652: FOR_IN
10653: IFFALSE 10881
// begin defenceUnits = [ ] ;
10655: LD_ADDR_VAR 0 31
10659: PUSH
10660: EMPTY
10661: ST_TO_ADDR
// for i := 1 to personel do
10662: LD_ADDR_VAR 0 14
10666: PUSH
10667: DOUBLE
10668: LD_INT 1
10670: DEC
10671: ST_TO_ADDR
10672: LD_VAR 0 19
10676: PUSH
10677: FOR_TO
10678: IFFALSE 10725
// if GetTag ( personel [ i ] ) = 3 then
10680: LD_VAR 0 19
10684: PUSH
10685: LD_VAR 0 14
10689: ARRAY
10690: PPUSH
10691: CALL_OW 110
10695: PUSH
10696: LD_INT 3
10698: EQUAL
10699: IFFALSE 10723
// defenceUnits = defenceUnits ^ personel [ i ] ;
10701: LD_ADDR_VAR 0 31
10705: PUSH
10706: LD_VAR 0 31
10710: PUSH
10711: LD_VAR 0 19
10715: PUSH
10716: LD_VAR 0 14
10720: ARRAY
10721: ADD
10722: ST_TO_ADDR
10723: GO 10677
10725: POP
10726: POP
// for i := 1 to vehicles do
10727: LD_ADDR_VAR 0 14
10731: PUSH
10732: DOUBLE
10733: LD_INT 1
10735: DEC
10736: ST_TO_ADDR
10737: LD_VAR 0 25
10741: PUSH
10742: FOR_TO
10743: IFFALSE 10798
// if GetTag ( vehicles [ i ] [ 1 ] ) = 3 then
10745: LD_VAR 0 25
10749: PUSH
10750: LD_VAR 0 14
10754: ARRAY
10755: PUSH
10756: LD_INT 1
10758: ARRAY
10759: PPUSH
10760: CALL_OW 110
10764: PUSH
10765: LD_INT 3
10767: EQUAL
10768: IFFALSE 10796
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
10770: LD_ADDR_VAR 0 31
10774: PUSH
10775: LD_VAR 0 31
10779: PUSH
10780: LD_VAR 0 25
10784: PUSH
10785: LD_VAR 0 14
10789: ARRAY
10790: PUSH
10791: LD_INT 1
10793: ARRAY
10794: ADD
10795: ST_TO_ADDR
10796: GO 10742
10798: POP
10799: POP
// ComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
10800: LD_VAR 0 31
10804: PPUSH
10805: LD_INT 3
10807: PUSH
10808: LD_INT 60
10810: PUSH
10811: EMPTY
10812: LIST
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PPUSH
10818: CALL_OW 72
10822: PPUSH
10823: LD_VAR 0 50
10827: PPUSH
10828: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , GetX ( enemyUnits ) , GetY ( enemyUnits ) ) ;
10832: LD_VAR 0 31
10836: PPUSH
10837: LD_INT 3
10839: PUSH
10840: LD_INT 60
10842: PUSH
10843: EMPTY
10844: LIST
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PPUSH
10850: CALL_OW 72
10854: PPUSH
10855: LD_VAR 0 50
10859: PPUSH
10860: CALL_OW 250
10864: PPUSH
10865: LD_VAR 0 50
10869: PPUSH
10870: CALL_OW 251
10874: PPUSH
10875: CALL_OW 174
// end ;
10879: GO 10652
10881: POP
10882: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
10883: LD_ADDR_VAR 0 45
10887: PUSH
10888: LD_INT 22
10890: PUSH
10891: LD_VAR 0 1
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: PUSH
10900: LD_INT 2
10902: PUSH
10903: LD_INT 30
10905: PUSH
10906: LD_INT 31
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: LD_INT 30
10915: PUSH
10916: LD_INT 32
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: PUSH
10923: LD_INT 30
10925: PUSH
10926: LD_INT 33
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PUSH
10933: LD_INT 30
10935: PUSH
10936: LD_INT 4
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: LD_INT 30
10945: PUSH
10946: LD_INT 5
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: PPUSH
10965: CALL_OW 69
10969: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
10970: LD_ADDR_VAR 0 46
10974: PUSH
10975: LD_INT 81
10977: PUSH
10978: LD_VAR 0 1
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PUSH
10987: LD_INT 21
10989: PUSH
10990: LD_INT 3
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: PUSH
10997: LD_INT 58
10999: PUSH
11000: EMPTY
11001: LIST
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: PPUSH
11008: CALL_OW 69
11012: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
11013: LD_VAR 0 45
11017: PUSH
11018: LD_VAR 0 46
11022: AND
11023: IFFALSE 11093
// for i in attackBuildings do
11025: LD_ADDR_VAR 0 14
11029: PUSH
11030: LD_VAR 0 45
11034: PUSH
11035: FOR_IN
11036: IFFALSE 11091
// for j in enemyBuildings do
11038: LD_ADDR_VAR 0 15
11042: PUSH
11043: LD_VAR 0 46
11047: PUSH
11048: FOR_IN
11049: IFFALSE 11087
// if GetDistUnits ( i , j ) < 12 then
11051: LD_VAR 0 14
11055: PPUSH
11056: LD_VAR 0 15
11060: PPUSH
11061: CALL_OW 296
11065: PUSH
11066: LD_INT 12
11068: LESS
11069: IFFALSE 11085
// ComAttackUnit ( i , j ) ;
11071: LD_VAR 0 14
11075: PPUSH
11076: LD_VAR 0 15
11080: PPUSH
11081: CALL_OW 115
11085: GO 11048
11087: POP
11088: POP
11089: GO 11035
11091: POP
11092: POP
// if canRebuild then
11093: LD_VAR 0 12
11097: IFFALSE 11766
// begin tmp = false ;
11099: LD_ADDR_VAR 0 16
11103: PUSH
11104: LD_INT 0
11106: ST_TO_ADDR
// unit = false ;
11107: LD_ADDR_VAR 0 18
11111: PUSH
11112: LD_INT 0
11114: ST_TO_ADDR
// for destroyedBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 250 ] ] ] ) do
11115: LD_ADDR_VAR 0 36
11119: PUSH
11120: LD_VAR 0 4
11124: PPUSH
11125: LD_INT 22
11127: PUSH
11128: LD_VAR 0 1
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 21
11139: PUSH
11140: LD_INT 3
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: LD_INT 3
11149: PUSH
11150: LD_INT 24
11152: PUSH
11153: LD_INT 250
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: LIST
11168: PPUSH
11169: CALL_OW 70
11173: PUSH
11174: FOR_IN
11175: IFFALSE 11277
// begin unit = destroyedBuilding ;
11177: LD_ADDR_VAR 0 18
11181: PUSH
11182: LD_VAR 0 36
11186: ST_TO_ADDR
// for i := 1 to destroyedBuildings / 4 do
11187: LD_ADDR_VAR 0 14
11191: PUSH
11192: DOUBLE
11193: LD_INT 1
11195: DEC
11196: ST_TO_ADDR
11197: LD_VAR 0 35
11201: PUSH
11202: LD_INT 4
11204: DIVREAL
11205: PUSH
11206: FOR_TO
11207: IFFALSE 11273
// if destroyedBuildings [ i + 1 ] = GetX ( destroyedBuilding ) and destroyedBuildings [ i + 2 ] = GetY ( destroyedBuilding ) then
11209: LD_VAR 0 35
11213: PUSH
11214: LD_VAR 0 14
11218: PUSH
11219: LD_INT 1
11221: PLUS
11222: ARRAY
11223: PUSH
11224: LD_VAR 0 36
11228: PPUSH
11229: CALL_OW 250
11233: EQUAL
11234: PUSH
11235: LD_VAR 0 35
11239: PUSH
11240: LD_VAR 0 14
11244: PUSH
11245: LD_INT 2
11247: PLUS
11248: ARRAY
11249: PUSH
11250: LD_VAR 0 36
11254: PPUSH
11255: CALL_OW 251
11259: EQUAL
11260: AND
11261: IFFALSE 11271
// tmp = true ;
11263: LD_ADDR_VAR 0 16
11267: PUSH
11268: LD_INT 1
11270: ST_TO_ADDR
11271: GO 11206
11273: POP
11274: POP
// end ;
11275: GO 11174
11277: POP
11278: POP
// if not tmp and unit then
11279: LD_VAR 0 16
11283: NOT
11284: PUSH
11285: LD_VAR 0 18
11289: AND
11290: IFFALSE 11550
// begin if GetBType ( unit ) = 1 then
11292: LD_VAR 0 18
11296: PPUSH
11297: CALL_OW 266
11301: PUSH
11302: LD_INT 1
11304: EQUAL
11305: IFFALSE 11359
// destroyedBuildings = destroyedBuildings ^ [ 0 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11307: LD_ADDR_VAR 0 35
11311: PUSH
11312: LD_VAR 0 35
11316: PUSH
11317: LD_INT 0
11319: PUSH
11320: LD_VAR 0 18
11324: PPUSH
11325: CALL_OW 250
11329: PUSH
11330: LD_VAR 0 18
11334: PPUSH
11335: CALL_OW 251
11339: PUSH
11340: LD_VAR 0 18
11344: PPUSH
11345: CALL_OW 254
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: ADD
11356: ST_TO_ADDR
11357: GO 11550
// if GetBType ( unit ) = 3 then
11359: LD_VAR 0 18
11363: PPUSH
11364: CALL_OW 266
11368: PUSH
11369: LD_INT 3
11371: EQUAL
11372: IFFALSE 11426
// destroyedBuildings = destroyedBuildings ^ [ 2 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11374: LD_ADDR_VAR 0 35
11378: PUSH
11379: LD_VAR 0 35
11383: PUSH
11384: LD_INT 2
11386: PUSH
11387: LD_VAR 0 18
11391: PPUSH
11392: CALL_OW 250
11396: PUSH
11397: LD_VAR 0 18
11401: PPUSH
11402: CALL_OW 251
11406: PUSH
11407: LD_VAR 0 18
11411: PPUSH
11412: CALL_OW 254
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: ADD
11423: ST_TO_ADDR
11424: GO 11550
// if GetBType ( unit ) = 5 then
11426: LD_VAR 0 18
11430: PPUSH
11431: CALL_OW 266
11435: PUSH
11436: LD_INT 5
11438: EQUAL
11439: IFFALSE 11493
// destroyedBuildings = destroyedBuildings ^ [ 4 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11441: LD_ADDR_VAR 0 35
11445: PUSH
11446: LD_VAR 0 35
11450: PUSH
11451: LD_INT 4
11453: PUSH
11454: LD_VAR 0 18
11458: PPUSH
11459: CALL_OW 250
11463: PUSH
11464: LD_VAR 0 18
11468: PPUSH
11469: CALL_OW 251
11473: PUSH
11474: LD_VAR 0 18
11478: PPUSH
11479: CALL_OW 254
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: ADD
11490: ST_TO_ADDR
11491: GO 11550
// destroyedBuildings = destroyedBuildings ^ [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ;
11493: LD_ADDR_VAR 0 35
11497: PUSH
11498: LD_VAR 0 35
11502: PUSH
11503: LD_VAR 0 18
11507: PPUSH
11508: CALL_OW 266
11512: PUSH
11513: LD_VAR 0 18
11517: PPUSH
11518: CALL_OW 250
11522: PUSH
11523: LD_VAR 0 18
11527: PPUSH
11528: CALL_OW 251
11532: PUSH
11533: LD_VAR 0 18
11537: PPUSH
11538: CALL_OW 254
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: ADD
11549: ST_TO_ADDR
// end ; for constructedBuilding in constructedBuildings do
11550: LD_ADDR_VAR 0 37
11554: PUSH
11555: LD_VAR 0 38
11559: PUSH
11560: FOR_IN
11561: IFFALSE 11764
// for i := 1 to destroyedBuildings / 4 do
11563: LD_ADDR_VAR 0 14
11567: PUSH
11568: DOUBLE
11569: LD_INT 1
11571: DEC
11572: ST_TO_ADDR
11573: LD_VAR 0 35
11577: PUSH
11578: LD_INT 4
11580: DIVREAL
11581: PUSH
11582: FOR_TO
11583: IFFALSE 11760
// if destroyedBuildings [ i + 1 ] = GetX ( constructedBuilding ) and destroyedBuildings [ i + 2 ] = GetY ( constructedBuilding ) and IsOK ( constructedBuilding ) then
11585: LD_VAR 0 35
11589: PUSH
11590: LD_VAR 0 14
11594: PUSH
11595: LD_INT 1
11597: PLUS
11598: ARRAY
11599: PUSH
11600: LD_VAR 0 37
11604: PPUSH
11605: CALL_OW 250
11609: EQUAL
11610: PUSH
11611: LD_VAR 0 35
11615: PUSH
11616: LD_VAR 0 14
11620: PUSH
11621: LD_INT 2
11623: PLUS
11624: ARRAY
11625: PUSH
11626: LD_VAR 0 37
11630: PPUSH
11631: CALL_OW 251
11635: EQUAL
11636: AND
11637: PUSH
11638: LD_VAR 0 37
11642: PPUSH
11643: CALL_OW 302
11647: AND
11648: IFFALSE 11758
// begin destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11650: LD_ADDR_VAR 0 35
11654: PUSH
11655: LD_VAR 0 35
11659: PPUSH
11660: LD_INT 1
11662: PPUSH
11663: CALL_OW 3
11667: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11668: LD_ADDR_VAR 0 35
11672: PUSH
11673: LD_VAR 0 35
11677: PPUSH
11678: LD_INT 1
11680: PPUSH
11681: CALL_OW 3
11685: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11686: LD_ADDR_VAR 0 35
11690: PUSH
11691: LD_VAR 0 35
11695: PPUSH
11696: LD_INT 1
11698: PPUSH
11699: CALL_OW 3
11703: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11704: LD_ADDR_VAR 0 35
11708: PUSH
11709: LD_VAR 0 35
11713: PPUSH
11714: LD_INT 1
11716: PPUSH
11717: CALL_OW 3
11721: ST_TO_ADDR
// if GetType ( constructedBuilding ) in [ b_bunker , b_turret ] then
11722: LD_VAR 0 37
11726: PPUSH
11727: CALL_OW 247
11731: PUSH
11732: LD_INT 32
11734: PUSH
11735: LD_INT 33
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: IN
11742: IFFALSE 11758
// AddComPlaceWeapon ( constructedBuilding , weapons ) ;
11744: LD_VAR 0 37
11748: PPUSH
11749: LD_VAR 0 32
11753: PPUSH
11754: CALL_OW 208
// end ;
11758: GO 11582
11760: POP
11761: POP
11762: GO 11560
11764: POP
11765: POP
// end ; wait ( 0 0$01 ) ;
11766: LD_INT 35
11768: PPUSH
11769: CALL_OW 67
// until not personel ;
11773: LD_VAR 0 19
11777: NOT
11778: IFFALSE 5471
// end ; end_of_file
11780: LD_VAR 0 13
11784: RET
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
11785: LD_INT 0
11787: PPUSH
11788: PPUSH
// if debugMode then
11789: LD_EXP 33
11793: IFFALSE 11810
// unit := NewCharacter ( ident ) ;
11795: LD_ADDR_VAR 0 5
11799: PUSH
11800: LD_VAR 0 1
11804: PPUSH
11805: CALL_OW 25
11809: ST_TO_ADDR
// if exist_mode and not debugMode then
11810: LD_VAR 0 2
11814: PUSH
11815: LD_EXP 33
11819: NOT
11820: AND
11821: IFFALSE 11846
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
11823: LD_ADDR_VAR 0 5
11827: PUSH
11828: LD_EXP 32
11832: PUSH
11833: LD_VAR 0 1
11837: STR
11838: PPUSH
11839: CALL_OW 34
11843: ST_TO_ADDR
11844: GO 11868
// if not debugMode then
11846: LD_EXP 33
11850: NOT
11851: IFFALSE 11868
// unit := NewCharacter ( ident ) ;
11853: LD_ADDR_VAR 0 5
11857: PUSH
11858: LD_VAR 0 1
11862: PPUSH
11863: CALL_OW 25
11867: ST_TO_ADDR
// if class then
11868: LD_VAR 0 3
11872: IFFALSE 11888
// SetClass ( unit , class ) ;
11874: LD_VAR 0 5
11878: PPUSH
11879: LD_VAR 0 3
11883: PPUSH
11884: CALL_OW 336
// result := unit ;
11888: LD_ADDR_VAR 0 4
11892: PUSH
11893: LD_VAR 0 5
11897: ST_TO_ADDR
// end ;
11898: LD_VAR 0 4
11902: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
11903: LD_INT 0
11905: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
11906: LD_VAR 0 1
11910: PPUSH
11911: CALL_OW 255
11915: PUSH
11916: LD_VAR 0 3
11920: EQUAL
11921: PUSH
11922: LD_VAR 0 1
11926: PPUSH
11927: CALL_OW 302
11931: AND
11932: IFFALSE 11954
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
11934: LD_VAR 0 1
11938: PPUSH
11939: LD_EXP 31
11943: PUSH
11944: LD_VAR 0 2
11948: STR
11949: PPUSH
11950: CALL_OW 38
// end ;
11954: LD_VAR 0 4
11958: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
11959: LD_INT 0
11961: PPUSH
11962: PPUSH
11963: PPUSH
// resultCharactersToSave = [ ] ;
11964: LD_ADDR_VAR 0 6
11968: PUSH
11969: EMPTY
11970: ST_TO_ADDR
// for unit in characters do
11971: LD_ADDR_VAR 0 5
11975: PUSH
11976: LD_VAR 0 1
11980: PUSH
11981: FOR_IN
11982: IFFALSE 12030
// if GetSide ( unit ) = side and IsOK ( unit ) then
11984: LD_VAR 0 5
11988: PPUSH
11989: CALL_OW 255
11993: PUSH
11994: LD_VAR 0 3
11998: EQUAL
11999: PUSH
12000: LD_VAR 0 5
12004: PPUSH
12005: CALL_OW 302
12009: AND
12010: IFFALSE 12028
// resultCharactersToSave = resultCharactersToSave ^ unit ;
12012: LD_ADDR_VAR 0 6
12016: PUSH
12017: LD_VAR 0 6
12021: PUSH
12022: LD_VAR 0 5
12026: ADD
12027: ST_TO_ADDR
12028: GO 11981
12030: POP
12031: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
12032: LD_VAR 0 6
12036: PPUSH
12037: LD_EXP 31
12041: PUSH
12042: LD_VAR 0 2
12046: STR
12047: PPUSH
12048: CALL_OW 38
// end ;
12052: LD_VAR 0 4
12056: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
12057: LD_INT 0
12059: PPUSH
12060: PPUSH
// for unit in units do
12061: LD_ADDR_VAR 0 5
12065: PUSH
12066: LD_VAR 0 1
12070: PUSH
12071: FOR_IN
12072: IFFALSE 12095
// PlaceUnitArea ( unit , area , spawnMode ) ;
12074: LD_VAR 0 5
12078: PPUSH
12079: LD_VAR 0 2
12083: PPUSH
12084: LD_VAR 0 3
12088: PPUSH
12089: CALL_OW 49
12093: GO 12071
12095: POP
12096: POP
// end ;
12097: LD_VAR 0 4
12101: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
12102: LD_INT 0
12104: PPUSH
12105: PPUSH
12106: PPUSH
12107: PPUSH
// units = characters ;
12108: LD_ADDR_VAR 0 9
12112: PUSH
12113: LD_VAR 0 1
12117: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod , Kirilenkova ] ;
12118: LD_ADDR_VAR 0 9
12122: PUSH
12123: LD_VAR 0 9
12127: PUSH
12128: LD_EXP 39
12132: PUSH
12133: LD_EXP 40
12137: PUSH
12138: LD_EXP 41
12142: PUSH
12143: LD_EXP 42
12147: PUSH
12148: LD_EXP 43
12152: PUSH
12153: LD_EXP 44
12157: PUSH
12158: LD_EXP 45
12162: PUSH
12163: LD_EXP 46
12167: PUSH
12168: LD_EXP 51
12172: PUSH
12173: LD_EXP 48
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: DIFF
12190: ST_TO_ADDR
// if not units and not canTalkHero then
12191: LD_VAR 0 9
12195: NOT
12196: PUSH
12197: LD_VAR 0 5
12201: NOT
12202: AND
12203: IFFALSE 12207
// exit ;
12205: GO 12380
// if not units then
12207: LD_VAR 0 9
12211: NOT
12212: IFFALSE 12233
// units = characters diff [ Burlak ] ;
12214: LD_ADDR_VAR 0 9
12218: PUSH
12219: LD_VAR 0 1
12223: PUSH
12224: LD_EXP 39
12228: PUSH
12229: EMPTY
12230: LIST
12231: DIFF
12232: ST_TO_ADDR
// if not units and canTalkHero then
12233: LD_VAR 0 9
12237: NOT
12238: PUSH
12239: LD_VAR 0 5
12243: AND
12244: IFFALSE 12248
// exit ;
12246: GO 12380
// speaker := units [ rand ( 1 , units ) ] ;
12248: LD_ADDR_VAR 0 8
12252: PUSH
12253: LD_VAR 0 9
12257: PUSH
12258: LD_INT 1
12260: PPUSH
12261: LD_VAR 0 9
12265: PPUSH
12266: CALL_OW 12
12270: ARRAY
12271: ST_TO_ADDR
// if radio then
12272: LD_VAR 0 4
12276: IFFALSE 12325
// begin if GetSex ( speaker ) = sex_male then
12278: LD_VAR 0 8
12282: PPUSH
12283: CALL_OW 258
12287: PUSH
12288: LD_INT 1
12290: EQUAL
12291: IFFALSE 12309
// SayRadio ( speaker , dialogMID ) else
12293: LD_VAR 0 8
12297: PPUSH
12298: LD_VAR 0 2
12302: PPUSH
12303: CALL_OW 94
12307: GO 12323
// SayRadio ( speaker , dialogFID ) ;
12309: LD_VAR 0 8
12313: PPUSH
12314: LD_VAR 0 3
12318: PPUSH
12319: CALL_OW 94
// end else
12323: GO 12370
// begin if GetSex ( speaker ) = sex_male then
12325: LD_VAR 0 8
12329: PPUSH
12330: CALL_OW 258
12334: PUSH
12335: LD_INT 1
12337: EQUAL
12338: IFFALSE 12356
// Say ( speaker , dialogMID ) else
12340: LD_VAR 0 8
12344: PPUSH
12345: LD_VAR 0 2
12349: PPUSH
12350: CALL_OW 88
12354: GO 12370
// Say ( speaker , dialogFID ) ;
12356: LD_VAR 0 8
12360: PPUSH
12361: LD_VAR 0 3
12365: PPUSH
12366: CALL_OW 88
// end ; result := speaker ;
12370: LD_ADDR_VAR 0 6
12374: PUSH
12375: LD_VAR 0 8
12379: ST_TO_ADDR
// end ;
12380: LD_VAR 0 6
12384: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
12385: LD_INT 0
12387: PPUSH
12388: PPUSH
// dir := GetDir ( bunker ) - 3 ;
12389: LD_ADDR_VAR 0 4
12393: PUSH
12394: LD_VAR 0 2
12398: PPUSH
12399: CALL_OW 254
12403: PUSH
12404: LD_INT 3
12406: MINUS
12407: ST_TO_ADDR
// if dir < 0 then
12408: LD_VAR 0 4
12412: PUSH
12413: LD_INT 0
12415: LESS
12416: IFFALSE 12432
// dir := 6 + dir ;
12418: LD_ADDR_VAR 0 4
12422: PUSH
12423: LD_INT 6
12425: PUSH
12426: LD_VAR 0 4
12430: PLUS
12431: ST_TO_ADDR
// SetDir ( un , dir ) ;
12432: LD_VAR 0 1
12436: PPUSH
12437: LD_VAR 0 4
12441: PPUSH
12442: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
12446: LD_VAR 0 1
12450: PPUSH
12451: LD_VAR 0 2
12455: PPUSH
12456: CALL_OW 52
// result = un ;
12460: LD_ADDR_VAR 0 3
12464: PUSH
12465: LD_VAR 0 1
12469: ST_TO_ADDR
// end ;
12470: LD_VAR 0 3
12474: RET
// export function AddComCaptureBuilding ( engs , building ) ; var eng ; begin
12475: LD_INT 0
12477: PPUSH
12478: PPUSH
// for eng in engs do
12479: LD_ADDR_VAR 0 4
12483: PUSH
12484: LD_VAR 0 1
12488: PUSH
12489: FOR_IN
12490: IFFALSE 12607
// if GetClass ( eng ) = class_engineer and IsOK ( eng ) and building and not GetSide ( building ) = GetSide ( eng ) then
12492: LD_VAR 0 4
12496: PPUSH
12497: CALL_OW 257
12501: PUSH
12502: LD_INT 2
12504: EQUAL
12505: PUSH
12506: LD_VAR 0 4
12510: PPUSH
12511: CALL_OW 302
12515: AND
12516: PUSH
12517: LD_VAR 0 2
12521: AND
12522: PUSH
12523: LD_VAR 0 2
12527: PPUSH
12528: CALL_OW 255
12532: PUSH
12533: LD_VAR 0 4
12537: PPUSH
12538: CALL_OW 255
12542: EQUAL
12543: NOT
12544: AND
12545: IFFALSE 12605
// AddTaskList ( eng , [ [ e , GetX ( building ) , GetY ( building ) , building , 0 , 0 , 0 ] ] ) end ;
12547: LD_VAR 0 4
12551: PPUSH
12552: LD_STRING e
12554: PUSH
12555: LD_VAR 0 2
12559: PPUSH
12560: CALL_OW 250
12564: PUSH
12565: LD_VAR 0 2
12569: PPUSH
12570: CALL_OW 251
12574: PUSH
12575: LD_VAR 0 2
12579: PUSH
12580: LD_INT 0
12582: PUSH
12583: LD_INT 0
12585: PUSH
12586: LD_INT 0
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: PUSH
12598: EMPTY
12599: LIST
12600: PPUSH
12601: CALL_OW 447
12605: GO 12489
12607: POP
12608: POP
12609: LD_VAR 0 3
12613: RET
// export function Delete2D ( tab , firstIndex , secondIndex ) ; var i , list , tabPom ; begin
12614: LD_INT 0
12616: PPUSH
12617: PPUSH
12618: PPUSH
12619: PPUSH
// tabPom := Delete ( tab [ firstIndex ] , secondIndex ) ;
12620: LD_ADDR_VAR 0 7
12624: PUSH
12625: LD_VAR 0 1
12629: PUSH
12630: LD_VAR 0 2
12634: ARRAY
12635: PPUSH
12636: LD_VAR 0 3
12640: PPUSH
12641: CALL_OW 3
12645: ST_TO_ADDR
// tab := Replace ( tab , firstIndex , tabPom ) ;
12646: LD_ADDR_VAR 0 1
12650: PUSH
12651: LD_VAR 0 1
12655: PPUSH
12656: LD_VAR 0 2
12660: PPUSH
12661: LD_VAR 0 7
12665: PPUSH
12666: CALL_OW 1
12670: ST_TO_ADDR
// result := tab ;
12671: LD_ADDR_VAR 0 4
12675: PUSH
12676: LD_VAR 0 1
12680: ST_TO_ADDR
// end ;
12681: LD_VAR 0 4
12685: RET
// export function Nef_PrepareBase ( base_dep , area , name , skill , sources , nation , personel ) ; var i , j , d , b , f , x , un , base , side , buildings , tmp ; begin
12686: LD_INT 0
12688: PPUSH
12689: PPUSH
12690: PPUSH
12691: PPUSH
12692: PPUSH
12693: PPUSH
12694: PPUSH
12695: PPUSH
12696: PPUSH
12697: PPUSH
12698: PPUSH
12699: PPUSH
// result := [ ] ;
12700: LD_ADDR_VAR 0 8
12704: PUSH
12705: EMPTY
12706: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12707: LD_VAR 0 1
12711: PPUSH
12712: CALL_OW 266
12716: PUSH
12717: LD_INT 0
12719: PUSH
12720: LD_INT 1
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: IN
12727: NOT
12728: IFFALSE 12732
// exit ;
12730: GO 14410
// if name then
12732: LD_VAR 0 3
12736: IFFALSE 12752
// SetBName ( base_dep , name ) ;
12738: LD_VAR 0 1
12742: PPUSH
12743: LD_VAR 0 3
12747: PPUSH
12748: CALL_OW 500
// base := GetBase ( base_dep ) ;
12752: LD_ADDR_VAR 0 16
12756: PUSH
12757: LD_VAR 0 1
12761: PPUSH
12762: CALL_OW 274
12766: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12767: LD_ADDR_VAR 0 17
12771: PUSH
12772: LD_VAR 0 1
12776: PPUSH
12777: CALL_OW 255
12781: ST_TO_ADDR
// if sources then
12782: LD_VAR 0 5
12786: IFFALSE 12833
// for i = 1 to 3 do
12788: LD_ADDR_VAR 0 9
12792: PUSH
12793: DOUBLE
12794: LD_INT 1
12796: DEC
12797: ST_TO_ADDR
12798: LD_INT 3
12800: PUSH
12801: FOR_TO
12802: IFFALSE 12831
// AddResourceType ( base , i , sources [ i ] ) ;
12804: LD_VAR 0 16
12808: PPUSH
12809: LD_VAR 0 9
12813: PPUSH
12814: LD_VAR 0 5
12818: PUSH
12819: LD_VAR 0 9
12823: ARRAY
12824: PPUSH
12825: CALL_OW 276
12829: GO 12801
12831: POP
12832: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12833: LD_ADDR_VAR 0 18
12837: PUSH
12838: LD_VAR 0 16
12842: PPUSH
12843: LD_VAR 0 2
12847: PPUSH
12848: LD_INT 1
12850: PPUSH
12851: CALL 49130 0 3
12855: ST_TO_ADDR
// InitHc ;
12856: CALL_OW 19
// InitUc ;
12860: CALL_OW 18
// uc_side := side ;
12864: LD_ADDR_OWVAR 20
12868: PUSH
12869: LD_VAR 0 17
12873: ST_TO_ADDR
// uc_nation := nation ;
12874: LD_ADDR_OWVAR 21
12878: PUSH
12879: LD_VAR 0 6
12883: ST_TO_ADDR
// if buildings then
12884: LD_VAR 0 18
12888: IFFALSE 14269
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12890: LD_ADDR_VAR 0 19
12894: PUSH
12895: LD_VAR 0 18
12899: PPUSH
12900: LD_INT 2
12902: PUSH
12903: LD_INT 30
12905: PUSH
12906: LD_INT 29
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PUSH
12913: LD_INT 30
12915: PUSH
12916: LD_INT 30
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: LIST
12927: PPUSH
12928: CALL_OW 72
12932: ST_TO_ADDR
// if tmp then
12933: LD_VAR 0 19
12937: IFFALSE 12985
// for i in tmp do
12939: LD_ADDR_VAR 0 9
12943: PUSH
12944: LD_VAR 0 19
12948: PUSH
12949: FOR_IN
12950: IFFALSE 12983
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12952: LD_VAR 0 9
12956: PPUSH
12957: CALL_OW 250
12961: PPUSH
12962: LD_VAR 0 9
12966: PPUSH
12967: CALL_OW 251
12971: PPUSH
12972: LD_VAR 0 17
12976: PPUSH
12977: CALL_OW 441
12981: GO 12949
12983: POP
12984: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12985: LD_VAR 0 18
12989: PPUSH
12990: LD_INT 2
12992: PUSH
12993: LD_INT 30
12995: PUSH
12996: LD_INT 31
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: PUSH
13003: LD_INT 30
13005: PUSH
13006: LD_INT 32
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: PUSH
13013: LD_INT 30
13015: PUSH
13016: LD_INT 33
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: PPUSH
13029: CALL_OW 72
13033: IFFALSE 13132
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13035: LD_ADDR_VAR 0 9
13039: PUSH
13040: LD_VAR 0 18
13044: PPUSH
13045: LD_INT 2
13047: PUSH
13048: LD_INT 30
13050: PUSH
13051: LD_INT 31
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PUSH
13058: LD_INT 30
13060: PUSH
13061: LD_INT 32
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: LD_INT 30
13070: PUSH
13071: LD_INT 33
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: PPUSH
13084: CALL_OW 72
13088: PUSH
13089: FOR_IN
13090: IFFALSE 13130
// begin if not GetBWeapon ( i ) then
13092: LD_VAR 0 9
13096: PPUSH
13097: CALL_OW 269
13101: NOT
13102: IFFALSE 13128
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13104: LD_VAR 0 9
13108: PPUSH
13109: LD_VAR 0 9
13113: PPUSH
13114: LD_VAR 0 2
13118: PPUSH
13119: CALL 51392 0 2
13123: PPUSH
13124: CALL_OW 431
// end ;
13128: GO 13089
13130: POP
13131: POP
// end ; for i = 1 to personel do
13132: LD_ADDR_VAR 0 9
13136: PUSH
13137: DOUBLE
13138: LD_INT 1
13140: DEC
13141: ST_TO_ADDR
13142: LD_VAR 0 7
13146: PUSH
13147: FOR_TO
13148: IFFALSE 14249
// begin if i > 4 then
13150: LD_VAR 0 9
13154: PUSH
13155: LD_INT 4
13157: GREATER
13158: IFFALSE 13162
// break ;
13160: GO 14249
// case i of 1 :
13162: LD_VAR 0 9
13166: PUSH
13167: LD_INT 1
13169: DOUBLE
13170: EQUAL
13171: IFTRUE 13175
13173: GO 13266
13175: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13176: LD_ADDR_VAR 0 13
13180: PUSH
13181: LD_VAR 0 18
13185: PPUSH
13186: LD_INT 22
13188: PUSH
13189: LD_VAR 0 17
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 58
13200: PUSH
13201: EMPTY
13202: LIST
13203: PUSH
13204: LD_INT 2
13206: PUSH
13207: LD_INT 30
13209: PUSH
13210: LD_INT 31
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: PUSH
13217: LD_INT 30
13219: PUSH
13220: LD_INT 32
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: PUSH
13227: LD_INT 30
13229: PUSH
13230: LD_INT 4
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PUSH
13237: LD_INT 30
13239: PUSH
13240: LD_INT 5
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: LIST
13258: PPUSH
13259: CALL_OW 72
13263: ST_TO_ADDR
13264: GO 13499
13266: LD_INT 2
13268: DOUBLE
13269: EQUAL
13270: IFTRUE 13274
13272: GO 13336
13274: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13275: LD_ADDR_VAR 0 13
13279: PUSH
13280: LD_VAR 0 18
13284: PPUSH
13285: LD_INT 22
13287: PUSH
13288: LD_VAR 0 17
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: LD_INT 2
13299: PUSH
13300: LD_INT 30
13302: PUSH
13303: LD_INT 0
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PUSH
13310: LD_INT 30
13312: PUSH
13313: LD_INT 1
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: LIST
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: PPUSH
13329: CALL_OW 72
13333: ST_TO_ADDR
13334: GO 13499
13336: LD_INT 3
13338: DOUBLE
13339: EQUAL
13340: IFTRUE 13344
13342: GO 13417
13344: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_control_tower ] , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13345: LD_ADDR_VAR 0 13
13349: PUSH
13350: LD_VAR 0 18
13354: PPUSH
13355: LD_INT 22
13357: PUSH
13358: LD_VAR 0 17
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: LD_INT 2
13369: PUSH
13370: LD_INT 30
13372: PUSH
13373: LD_INT 36
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PUSH
13380: LD_INT 30
13382: PUSH
13383: LD_INT 2
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: PUSH
13390: LD_INT 30
13392: PUSH
13393: LD_INT 3
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 72
13414: ST_TO_ADDR
13415: GO 13499
13417: LD_INT 4
13419: DOUBLE
13420: EQUAL
13421: IFTRUE 13425
13423: GO 13498
13425: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13426: LD_ADDR_VAR 0 13
13430: PUSH
13431: LD_VAR 0 18
13435: PPUSH
13436: LD_INT 22
13438: PUSH
13439: LD_VAR 0 17
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 2
13450: PUSH
13451: LD_INT 30
13453: PUSH
13454: LD_INT 6
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: PUSH
13461: LD_INT 30
13463: PUSH
13464: LD_INT 7
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PUSH
13471: LD_INT 30
13473: PUSH
13474: LD_INT 8
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PPUSH
13491: CALL_OW 72
13495: ST_TO_ADDR
13496: GO 13499
13498: POP
// if i = 1 then
13499: LD_VAR 0 9
13503: PUSH
13504: LD_INT 1
13506: EQUAL
13507: IFFALSE 13625
// begin tmp := [ ] ;
13509: LD_ADDR_VAR 0 19
13513: PUSH
13514: EMPTY
13515: ST_TO_ADDR
// for j in f do
13516: LD_ADDR_VAR 0 10
13520: PUSH
13521: LD_VAR 0 13
13525: PUSH
13526: FOR_IN
13527: IFFALSE 13607
// if GetBType ( j ) in [ b_breastwork , b_bunker ] then
13529: LD_VAR 0 10
13533: PPUSH
13534: CALL_OW 266
13538: PUSH
13539: LD_INT 31
13541: PUSH
13542: LD_INT 32
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: IN
13549: IFFALSE 13576
// tmp := Insert ( tmp , 1 , j ) else
13551: LD_ADDR_VAR 0 19
13555: PUSH
13556: LD_VAR 0 19
13560: PPUSH
13561: LD_INT 1
13563: PPUSH
13564: LD_VAR 0 10
13568: PPUSH
13569: CALL_OW 2
13573: ST_TO_ADDR
13574: GO 13605
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13576: LD_ADDR_VAR 0 19
13580: PUSH
13581: LD_VAR 0 19
13585: PPUSH
13586: LD_VAR 0 19
13590: PUSH
13591: LD_INT 1
13593: PLUS
13594: PPUSH
13595: LD_VAR 0 10
13599: PPUSH
13600: CALL_OW 2
13604: ST_TO_ADDR
13605: GO 13526
13607: POP
13608: POP
// if tmp then
13609: LD_VAR 0 19
13613: IFFALSE 13625
// f := tmp ;
13615: LD_ADDR_VAR 0 13
13619: PUSH
13620: LD_VAR 0 19
13624: ST_TO_ADDR
// end ; x := personel [ i ] ;
13625: LD_ADDR_VAR 0 14
13629: PUSH
13630: LD_VAR 0 7
13634: PUSH
13635: LD_VAR 0 9
13639: ARRAY
13640: ST_TO_ADDR
// if x = - 1 then
13641: LD_VAR 0 14
13645: PUSH
13646: LD_INT 1
13648: NEG
13649: EQUAL
13650: IFFALSE 13844
// begin for j in f do
13652: LD_ADDR_VAR 0 10
13656: PUSH
13657: LD_VAR 0 13
13661: PUSH
13662: FOR_IN
13663: IFFALSE 13840
// repeat InitHc ;
13665: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13669: LD_VAR 0 10
13673: PPUSH
13674: CALL_OW 266
13678: PUSH
13679: LD_INT 5
13681: EQUAL
13682: IFFALSE 13737
// begin if UnitsInside ( j ) < 3 then
13684: LD_VAR 0 10
13688: PPUSH
13689: CALL_OW 313
13693: PUSH
13694: LD_INT 3
13696: LESS
13697: IFFALSE 13718
// PrepareHuman ( false , i , skill ) else
13699: LD_INT 0
13701: PPUSH
13702: LD_VAR 0 9
13706: PPUSH
13707: LD_VAR 0 4
13711: PPUSH
13712: CALL_OW 380
13716: GO 13735
// PrepareHuman ( false , i , skill ) ;
13718: LD_INT 0
13720: PPUSH
13721: LD_VAR 0 9
13725: PPUSH
13726: LD_VAR 0 4
13730: PPUSH
13731: CALL_OW 380
// end else
13735: GO 13754
// PrepareHuman ( false , i , skill ) ;
13737: LD_INT 0
13739: PPUSH
13740: LD_VAR 0 9
13744: PPUSH
13745: LD_VAR 0 4
13749: PPUSH
13750: CALL_OW 380
// un := CreateHuman ;
13754: LD_ADDR_VAR 0 15
13758: PUSH
13759: CALL_OW 44
13763: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13764: LD_ADDR_VAR 0 8
13768: PUSH
13769: LD_VAR 0 8
13773: PPUSH
13774: LD_INT 1
13776: PPUSH
13777: LD_VAR 0 15
13781: PPUSH
13782: CALL_OW 2
13786: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13787: LD_VAR 0 15
13791: PPUSH
13792: LD_VAR 0 10
13796: PPUSH
13797: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13801: LD_VAR 0 10
13805: PPUSH
13806: CALL_OW 313
13810: PUSH
13811: LD_INT 6
13813: EQUAL
13814: PUSH
13815: LD_VAR 0 10
13819: PPUSH
13820: CALL_OW 266
13824: PUSH
13825: LD_INT 32
13827: PUSH
13828: LD_INT 31
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: IN
13835: OR
13836: IFFALSE 13665
13838: GO 13662
13840: POP
13841: POP
// end else
13842: GO 14247
// for j = 1 to x do
13844: LD_ADDR_VAR 0 10
13848: PUSH
13849: DOUBLE
13850: LD_INT 1
13852: DEC
13853: ST_TO_ADDR
13854: LD_VAR 0 14
13858: PUSH
13859: FOR_TO
13860: IFFALSE 14245
// begin InitHc ;
13862: CALL_OW 19
// if not f then
13866: LD_VAR 0 13
13870: NOT
13871: IFFALSE 13960
// begin PrepareHuman ( false , i , skill ) ;
13873: LD_INT 0
13875: PPUSH
13876: LD_VAR 0 9
13880: PPUSH
13881: LD_VAR 0 4
13885: PPUSH
13886: CALL_OW 380
// un := CreateHuman ;
13890: LD_ADDR_VAR 0 15
13894: PUSH
13895: CALL_OW 44
13899: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13900: LD_ADDR_VAR 0 8
13904: PUSH
13905: LD_VAR 0 8
13909: PPUSH
13910: LD_INT 1
13912: PPUSH
13913: LD_VAR 0 15
13917: PPUSH
13918: CALL_OW 2
13922: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13923: LD_VAR 0 15
13927: PPUSH
13928: LD_VAR 0 1
13932: PPUSH
13933: CALL_OW 250
13937: PPUSH
13938: LD_VAR 0 1
13942: PPUSH
13943: CALL_OW 251
13947: PPUSH
13948: LD_INT 10
13950: PPUSH
13951: LD_INT 0
13953: PPUSH
13954: CALL_OW 50
// continue ;
13958: GO 13859
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 3 and GetBType ( f [ 1 ] ) = b_control_tower ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13960: LD_VAR 0 13
13964: PUSH
13965: LD_INT 1
13967: ARRAY
13968: PPUSH
13969: CALL_OW 313
13973: PUSH
13974: LD_VAR 0 13
13978: PUSH
13979: LD_INT 1
13981: ARRAY
13982: PPUSH
13983: CALL_OW 266
13987: PUSH
13988: LD_INT 32
13990: PUSH
13991: LD_INT 31
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: IN
13998: AND
13999: PUSH
14000: LD_VAR 0 13
14004: PUSH
14005: LD_INT 1
14007: ARRAY
14008: PPUSH
14009: CALL_OW 313
14013: PUSH
14014: LD_INT 3
14016: EQUAL
14017: PUSH
14018: LD_VAR 0 13
14022: PUSH
14023: LD_INT 1
14025: ARRAY
14026: PPUSH
14027: CALL_OW 266
14031: PUSH
14032: LD_INT 36
14034: EQUAL
14035: AND
14036: OR
14037: PUSH
14038: LD_VAR 0 13
14042: PUSH
14043: LD_INT 1
14045: ARRAY
14046: PPUSH
14047: CALL_OW 313
14051: PUSH
14052: LD_INT 6
14054: EQUAL
14055: OR
14056: IFFALSE 14076
// f := Delete ( f , 1 ) ;
14058: LD_ADDR_VAR 0 13
14062: PUSH
14063: LD_VAR 0 13
14067: PPUSH
14068: LD_INT 1
14070: PPUSH
14071: CALL_OW 3
14075: ST_TO_ADDR
// if not f then
14076: LD_VAR 0 13
14080: NOT
14081: IFFALSE 14099
// begin x := x + 2 ;
14083: LD_ADDR_VAR 0 14
14087: PUSH
14088: LD_VAR 0 14
14092: PUSH
14093: LD_INT 2
14095: PLUS
14096: ST_TO_ADDR
// continue ;
14097: GO 13859
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14099: LD_VAR 0 13
14103: PUSH
14104: LD_INT 1
14106: ARRAY
14107: PPUSH
14108: CALL_OW 266
14112: PUSH
14113: LD_INT 5
14115: EQUAL
14116: IFFALSE 14175
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14118: LD_VAR 0 13
14122: PUSH
14123: LD_INT 1
14125: ARRAY
14126: PPUSH
14127: CALL_OW 313
14131: PUSH
14132: LD_INT 3
14134: LESS
14135: IFFALSE 14156
// PrepareHuman ( false , i , skill ) else
14137: LD_INT 0
14139: PPUSH
14140: LD_VAR 0 9
14144: PPUSH
14145: LD_VAR 0 4
14149: PPUSH
14150: CALL_OW 380
14154: GO 14173
// PrepareHuman ( false , i , skill ) ;
14156: LD_INT 0
14158: PPUSH
14159: LD_VAR 0 9
14163: PPUSH
14164: LD_VAR 0 4
14168: PPUSH
14169: CALL_OW 380
// end else
14173: GO 14192
// PrepareHuman ( false , i , skill ) ;
14175: LD_INT 0
14177: PPUSH
14178: LD_VAR 0 9
14182: PPUSH
14183: LD_VAR 0 4
14187: PPUSH
14188: CALL_OW 380
// un := CreateHuman ;
14192: LD_ADDR_VAR 0 15
14196: PUSH
14197: CALL_OW 44
14201: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14202: LD_ADDR_VAR 0 8
14206: PUSH
14207: LD_VAR 0 8
14211: PPUSH
14212: LD_INT 1
14214: PPUSH
14215: LD_VAR 0 15
14219: PPUSH
14220: CALL_OW 2
14224: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14225: LD_VAR 0 15
14229: PPUSH
14230: LD_VAR 0 13
14234: PUSH
14235: LD_INT 1
14237: ARRAY
14238: PPUSH
14239: CALL_OW 52
// end ;
14243: GO 13859
14245: POP
14246: POP
// end ;
14247: GO 13147
14249: POP
14250: POP
// result := result ^ buildings ;
14251: LD_ADDR_VAR 0 8
14255: PUSH
14256: LD_VAR 0 8
14260: PUSH
14261: LD_VAR 0 18
14265: ADD
14266: ST_TO_ADDR
// end else
14267: GO 14410
// begin for i = 1 to personel do
14269: LD_ADDR_VAR 0 9
14273: PUSH
14274: DOUBLE
14275: LD_INT 1
14277: DEC
14278: ST_TO_ADDR
14279: LD_VAR 0 7
14283: PUSH
14284: FOR_TO
14285: IFFALSE 14408
// begin if i > 4 then
14287: LD_VAR 0 9
14291: PUSH
14292: LD_INT 4
14294: GREATER
14295: IFFALSE 14299
// break ;
14297: GO 14408
// x := personel [ i ] ;
14299: LD_ADDR_VAR 0 14
14303: PUSH
14304: LD_VAR 0 7
14308: PUSH
14309: LD_VAR 0 9
14313: ARRAY
14314: ST_TO_ADDR
// if x = - 1 then
14315: LD_VAR 0 14
14319: PUSH
14320: LD_INT 1
14322: NEG
14323: EQUAL
14324: IFFALSE 14328
// continue ;
14326: GO 14284
// PrepareHuman ( false , i , skill ) ;
14328: LD_INT 0
14330: PPUSH
14331: LD_VAR 0 9
14335: PPUSH
14336: LD_VAR 0 4
14340: PPUSH
14341: CALL_OW 380
// un := CreateHuman ;
14345: LD_ADDR_VAR 0 15
14349: PUSH
14350: CALL_OW 44
14354: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14355: LD_VAR 0 15
14359: PPUSH
14360: LD_VAR 0 1
14364: PPUSH
14365: CALL_OW 250
14369: PPUSH
14370: LD_VAR 0 1
14374: PPUSH
14375: CALL_OW 251
14379: PPUSH
14380: LD_INT 10
14382: PPUSH
14383: LD_INT 0
14385: PPUSH
14386: CALL_OW 50
// result := result ^ un ;
14390: LD_ADDR_VAR 0 8
14394: PUSH
14395: LD_VAR 0 8
14399: PUSH
14400: LD_VAR 0 15
14404: ADD
14405: ST_TO_ADDR
// end ;
14406: GO 14284
14408: POP
14409: POP
// end ; end ;
14410: LD_VAR 0 8
14414: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
14415: LD_INT 0
14417: PPUSH
14418: PPUSH
14419: PPUSH
14420: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
14421: LD_ADDR_VAR 0 6
14425: PUSH
14426: LD_INT 34
14428: PUSH
14429: LD_INT 71
14431: PUSH
14432: LD_INT 70
14434: PUSH
14435: LD_INT 69
14437: PUSH
14438: LD_INT 39
14440: PUSH
14441: LD_INT 31
14443: PUSH
14444: LD_INT 14
14446: PUSH
14447: LD_INT 10
14449: PUSH
14450: LD_INT 40
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: ST_TO_ADDR
// resultWeapons = [ ] ;
14464: LD_ADDR_VAR 0 5
14468: PUSH
14469: EMPTY
14470: ST_TO_ADDR
// for i := 1 to weaponTechs do
14471: LD_ADDR_VAR 0 4
14475: PUSH
14476: DOUBLE
14477: LD_INT 1
14479: DEC
14480: ST_TO_ADDR
14481: LD_VAR 0 6
14485: PUSH
14486: FOR_TO
14487: IFFALSE 14674
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
14489: LD_VAR 0 6
14493: PUSH
14494: LD_VAR 0 4
14498: ARRAY
14499: PPUSH
14500: LD_VAR 0 2
14504: PPUSH
14505: CALL_OW 482
14509: PUSH
14510: LD_VAR 0 6
14514: PUSH
14515: LD_VAR 0 4
14519: ARRAY
14520: PPUSH
14521: LD_VAR 0 1
14525: PPUSH
14526: CALL_OW 321
14530: PUSH
14531: LD_INT 2
14533: EQUAL
14534: AND
14535: IFFALSE 14672
// case nation of nation_american :
14537: LD_VAR 0 2
14541: PUSH
14542: LD_INT 1
14544: DOUBLE
14545: EQUAL
14546: IFTRUE 14550
14548: GO 14585
14550: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
14551: LD_ADDR_VAR 0 5
14555: PUSH
14556: LD_VAR 0 5
14560: PUSH
14561: LD_VAR 0 6
14565: PUSH
14566: LD_VAR 0 4
14570: ARRAY
14571: PPUSH
14572: LD_VAR 0 2
14576: PPUSH
14577: CALL 14691 0 2
14581: ADD
14582: ST_TO_ADDR
14583: GO 14672
14585: LD_INT 2
14587: DOUBLE
14588: EQUAL
14589: IFTRUE 14593
14591: GO 14628
14593: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
14594: LD_ADDR_VAR 0 5
14598: PUSH
14599: LD_VAR 0 5
14603: PUSH
14604: LD_VAR 0 6
14608: PUSH
14609: LD_VAR 0 4
14613: ARRAY
14614: PPUSH
14615: LD_VAR 0 2
14619: PPUSH
14620: CALL 14691 0 2
14624: ADD
14625: ST_TO_ADDR
14626: GO 14672
14628: LD_INT 3
14630: DOUBLE
14631: EQUAL
14632: IFTRUE 14636
14634: GO 14671
14636: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
14637: LD_ADDR_VAR 0 5
14641: PUSH
14642: LD_VAR 0 5
14646: PUSH
14647: LD_VAR 0 6
14651: PUSH
14652: LD_VAR 0 4
14656: ARRAY
14657: PPUSH
14658: LD_VAR 0 2
14662: PPUSH
14663: CALL 14691 0 2
14667: ADD
14668: ST_TO_ADDR
14669: GO 14672
14671: POP
// end ;
14672: GO 14486
14674: POP
14675: POP
// result = resultWeapons ;
14676: LD_ADDR_VAR 0 3
14680: PUSH
14681: LD_VAR 0 5
14685: ST_TO_ADDR
// end ;
14686: LD_VAR 0 3
14690: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
14691: LD_INT 0
14693: PPUSH
// case tech of tech_AdvMet :
14694: LD_VAR 0 1
14698: PUSH
14699: LD_INT 34
14701: DOUBLE
14702: EQUAL
14703: IFTRUE 14707
14705: GO 14735
14707: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
14708: LD_ADDR_VAR 0 3
14712: PUSH
14713: LD_INT 6
14715: PUSH
14716: LD_STRING 
14718: PUSH
14719: LD_INT 46
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: LIST
14726: PUSH
14727: LD_VAR 0 2
14731: ARRAY
14732: ST_TO_ADDR
14733: GO 15024
14735: LD_INT 71
14737: DOUBLE
14738: EQUAL
14739: IFTRUE 14743
14741: GO 14771
14743: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
14744: LD_ADDR_VAR 0 3
14748: PUSH
14749: LD_STRING 
14751: PUSH
14752: LD_STRING 
14754: PUSH
14755: LD_INT 47
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: LIST
14762: PUSH
14763: LD_VAR 0 2
14767: ARRAY
14768: ST_TO_ADDR
14769: GO 15024
14771: LD_INT 70
14773: DOUBLE
14774: EQUAL
14775: IFTRUE 14779
14777: GO 14807
14779: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
14780: LD_ADDR_VAR 0 3
14784: PUSH
14785: LD_STRING 
14787: PUSH
14788: LD_INT 26
14790: PUSH
14791: LD_STRING 
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: LIST
14798: PUSH
14799: LD_VAR 0 2
14803: ARRAY
14804: ST_TO_ADDR
14805: GO 15024
14807: LD_INT 69
14809: DOUBLE
14810: EQUAL
14811: IFTRUE 14815
14813: GO 14843
14815: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
14816: LD_ADDR_VAR 0 3
14820: PUSH
14821: LD_INT 4
14823: PUSH
14824: LD_INT 25
14826: PUSH
14827: LD_INT 43
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: LIST
14834: PUSH
14835: LD_VAR 0 2
14839: ARRAY
14840: ST_TO_ADDR
14841: GO 15024
14843: LD_INT 39
14845: DOUBLE
14846: EQUAL
14847: IFTRUE 14851
14849: GO 14879
14851: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
14852: LD_ADDR_VAR 0 3
14856: PUSH
14857: LD_INT 5
14859: PUSH
14860: LD_INT 27
14862: PUSH
14863: LD_INT 44
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: LIST
14870: PUSH
14871: LD_VAR 0 2
14875: ARRAY
14876: ST_TO_ADDR
14877: GO 15024
14879: LD_INT 31
14881: DOUBLE
14882: EQUAL
14883: IFTRUE 14887
14885: GO 14915
14887: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
14888: LD_ADDR_VAR 0 3
14892: PUSH
14893: LD_STRING 
14895: PUSH
14896: LD_STRING 
14898: PUSH
14899: LD_INT 49
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: LIST
14906: PUSH
14907: LD_VAR 0 2
14911: ARRAY
14912: ST_TO_ADDR
14913: GO 15024
14915: LD_INT 14
14917: DOUBLE
14918: EQUAL
14919: IFTRUE 14923
14921: GO 14951
14923: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
14924: LD_ADDR_VAR 0 3
14928: PUSH
14929: LD_INT 10
14931: PUSH
14932: LD_STRING 
14934: PUSH
14935: LD_STRING 
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: LIST
14942: PUSH
14943: LD_VAR 0 2
14947: ARRAY
14948: ST_TO_ADDR
14949: GO 15024
14951: LD_INT 10
14953: DOUBLE
14954: EQUAL
14955: IFTRUE 14959
14957: GO 14987
14959: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
14960: LD_ADDR_VAR 0 3
14964: PUSH
14965: LD_INT 9
14967: PUSH
14968: LD_STRING 
14970: PUSH
14971: LD_STRING 
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: LIST
14978: PUSH
14979: LD_VAR 0 2
14983: ARRAY
14984: ST_TO_ADDR
14985: GO 15024
14987: LD_INT 40
14989: DOUBLE
14990: EQUAL
14991: IFTRUE 14995
14993: GO 15023
14995: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
14996: LD_ADDR_VAR 0 3
15000: PUSH
15001: LD_INT 7
15003: PUSH
15004: LD_INT 28
15006: PUSH
15007: LD_INT 45
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: LIST
15014: PUSH
15015: LD_VAR 0 2
15019: ARRAY
15020: ST_TO_ADDR
15021: GO 15024
15023: POP
// end ;
15024: LD_VAR 0 3
15028: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
15029: LD_INT 0
15031: PPUSH
15032: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
15033: LD_ADDR_VAR 0 2
15037: PUSH
15038: LD_VAR 0 1
15042: PPUSH
15043: LD_INT 1
15045: PPUSH
15046: CALL_OW 289
15050: PUSH
15051: LD_VAR 0 1
15055: PPUSH
15056: LD_INT 2
15058: PPUSH
15059: CALL_OW 289
15063: PUSH
15064: LD_VAR 0 1
15068: PPUSH
15069: LD_INT 3
15071: PPUSH
15072: CALL_OW 289
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: LIST
15081: ST_TO_ADDR
// end ;
15082: LD_VAR 0 2
15086: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
15087: LD_INT 0
15089: PPUSH
15090: PPUSH
// area = ListEnvironmentArea ( area ) ;
15091: LD_ADDR_VAR 0 2
15095: PUSH
15096: LD_VAR 0 2
15100: PPUSH
15101: CALL_OW 353
15105: ST_TO_ADDR
// if bulldozer > 0 then
15106: LD_VAR 0 1
15110: PUSH
15111: LD_INT 0
15113: GREATER
15114: IFFALSE 15225
// for i = area downto 1 do
15116: LD_ADDR_VAR 0 4
15120: PUSH
15121: DOUBLE
15122: LD_VAR 0 2
15126: INC
15127: ST_TO_ADDR
15128: LD_INT 1
15130: PUSH
15131: FOR_DOWNTO
15132: IFFALSE 15223
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
15134: LD_VAR 0 2
15138: PUSH
15139: LD_VAR 0 4
15143: ARRAY
15144: PUSH
15145: LD_INT 1
15147: ARRAY
15148: PPUSH
15149: LD_VAR 0 2
15153: PUSH
15154: LD_VAR 0 4
15158: ARRAY
15159: PUSH
15160: LD_INT 2
15162: ARRAY
15163: PPUSH
15164: CALL_OW 351
15168: IFFALSE 15221
// if not HasTask ( bulldozer ) then
15170: LD_VAR 0 1
15174: PPUSH
15175: CALL_OW 314
15179: NOT
15180: IFFALSE 15221
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
15182: LD_VAR 0 1
15186: PPUSH
15187: LD_VAR 0 2
15191: PUSH
15192: LD_VAR 0 4
15196: ARRAY
15197: PUSH
15198: LD_INT 1
15200: ARRAY
15201: PPUSH
15202: LD_VAR 0 2
15206: PUSH
15207: LD_VAR 0 4
15211: ARRAY
15212: PUSH
15213: LD_INT 2
15215: ARRAY
15216: PPUSH
15217: CALL_OW 171
15221: GO 15131
15223: POP
15224: POP
// end ;
15225: LD_VAR 0 3
15229: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
15230: LD_INT 0
15232: PPUSH
15233: PPUSH
15234: PPUSH
// uc_side := GetSide ( b ) ;
15235: LD_ADDR_OWVAR 20
15239: PUSH
15240: LD_VAR 0 2
15244: PPUSH
15245: CALL_OW 255
15249: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
15250: LD_ADDR_OWVAR 21
15254: PUSH
15255: LD_VAR 0 2
15259: PPUSH
15260: CALL_OW 248
15264: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
15265: LD_INT 0
15267: PPUSH
15268: LD_INT 1
15270: PPUSH
15271: LD_VAR 0 1
15275: PPUSH
15276: CALL_OW 380
// un = CreateHuman ;
15280: LD_ADDR_VAR 0 4
15284: PUSH
15285: CALL_OW 44
15289: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
15290: LD_ADDR_VAR 0 5
15294: PUSH
15295: LD_VAR 0 2
15299: PPUSH
15300: CALL_OW 254
15304: PUSH
15305: LD_INT 3
15307: MINUS
15308: ST_TO_ADDR
// if dir < 0 then
15309: LD_VAR 0 5
15313: PUSH
15314: LD_INT 0
15316: LESS
15317: IFFALSE 15333
// dir := 6 + dir ;
15319: LD_ADDR_VAR 0 5
15323: PUSH
15324: LD_INT 6
15326: PUSH
15327: LD_VAR 0 5
15331: PLUS
15332: ST_TO_ADDR
// SetDir ( un , dir ) ;
15333: LD_VAR 0 4
15337: PPUSH
15338: LD_VAR 0 5
15342: PPUSH
15343: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
15347: LD_VAR 0 4
15351: PPUSH
15352: LD_VAR 0 2
15356: PPUSH
15357: CALL_OW 52
// result = un ;
15361: LD_ADDR_VAR 0 3
15365: PUSH
15366: LD_VAR 0 4
15370: ST_TO_ADDR
// end ;
15371: LD_VAR 0 3
15375: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others , max , test1 , test2 ; begin
15376: LD_INT 0
15378: PPUSH
15379: PPUSH
15380: PPUSH
15381: PPUSH
15382: PPUSH
15383: PPUSH
15384: PPUSH
15385: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Burlak , Vsevolod ] ;
15386: LD_ADDR_VAR 0 3
15390: PUSH
15391: LD_INT 22
15393: PUSH
15394: LD_INT 3
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 21
15403: PUSH
15404: LD_INT 1
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 23
15413: PUSH
15414: LD_INT 3
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: LIST
15425: PPUSH
15426: CALL_OW 69
15430: PUSH
15431: LD_EXP 39
15435: PUSH
15436: LD_EXP 51
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: DIFF
15445: ST_TO_ADDR
// charsToChoose = charsToChoose diff vsevolodTeam ;
15446: LD_ADDR_VAR 0 3
15450: PUSH
15451: LD_VAR 0 3
15455: PUSH
15456: LD_EXP 52
15460: DIFF
15461: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam diff Vsevolod ;
15462: LD_ADDR_EXP 52
15466: PUSH
15467: LD_EXP 52
15471: PUSH
15472: LD_EXP 51
15476: DIFF
15477: ST_TO_ADDR
// max = charsToChoose div 2 + charsToChoose mod 2 ;
15478: LD_ADDR_VAR 0 6
15482: PUSH
15483: LD_VAR 0 3
15487: PUSH
15488: LD_INT 2
15490: DIV
15491: PUSH
15492: LD_VAR 0 3
15496: PUSH
15497: LD_INT 2
15499: MOD
15500: PLUS
15501: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 0 , 3 , [ Burlak , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_not_hired ] ^ vsevolodTeam ^ [ sel_not_changeable , Vsevolod ] , [ class_soldier , class_mechanic , class_engineer , class_scientistic ] ) ;
15502: LD_ADDR_VAR 0 4
15506: PUSH
15507: LD_STRING text
15509: PPUSH
15510: LD_INT 0
15512: PPUSH
15513: LD_INT 3
15515: PPUSH
15516: LD_EXP 39
15520: PUSH
15521: LD_INT -3
15523: PUSH
15524: LD_INT -5
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: PUSH
15532: LD_VAR 0 3
15536: ADD
15537: PUSH
15538: LD_INT -2
15540: PUSH
15541: EMPTY
15542: LIST
15543: ADD
15544: PUSH
15545: LD_EXP 52
15549: ADD
15550: PUSH
15551: LD_INT -4
15553: PUSH
15554: LD_EXP 51
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: ADD
15563: PPUSH
15564: LD_INT 1
15566: PUSH
15567: LD_INT 3
15569: PUSH
15570: LD_INT 2
15572: PUSH
15573: LD_INT 4
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: PPUSH
15582: CALL_OW 42
15586: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) , 6 ) ;
15587: LD_INT 22
15589: PUSH
15590: LD_INT 3
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 21
15599: PUSH
15600: LD_INT 1
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: LD_INT 23
15609: PUSH
15610: LD_INT 3
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: LIST
15621: PPUSH
15622: CALL_OW 69
15626: PPUSH
15627: LD_INT 6
15629: PPUSH
15630: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
15634: LD_VAR 0 4
15638: PPUSH
15639: LD_INT 3
15641: PPUSH
15642: CALL_OW 235
// SetSide ( Burlak , 3 ) ;
15646: LD_EXP 39
15650: PPUSH
15651: LD_INT 3
15653: PPUSH
15654: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
15658: LD_ADDR_VAR 0 2
15662: PUSH
15663: LD_INT 22
15665: PUSH
15666: LD_INT 6
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: LD_INT 21
15675: PUSH
15676: LD_INT 1
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PPUSH
15687: CALL_OW 69
15691: PUSH
15692: FOR_IN
15693: IFFALSE 15726
// if IsInUnit ( i ) then
15695: LD_VAR 0 2
15699: PPUSH
15700: CALL_OW 310
15704: IFFALSE 15724
// begin ComExitVehicle ( i ) ;
15706: LD_VAR 0 2
15710: PPUSH
15711: CALL_OW 121
// ComExitBuilding ( i ) ;
15715: LD_VAR 0 2
15719: PPUSH
15720: CALL_OW 122
// end ;
15724: GO 15692
15726: POP
15727: POP
// if not Vsevolod in selectedPeople then
15728: LD_EXP 51
15732: PUSH
15733: LD_VAR 0 4
15737: IN
15738: NOT
15739: IFFALSE 15756
// ExtSaveCharacter ( Vsevolod , Vsevolod , 6 ) ;
15741: LD_EXP 51
15745: PPUSH
15746: LD_STRING Vsevolod
15748: PPUSH
15749: LD_INT 6
15751: PPUSH
15752: CALL 11903 0 3
// if not Karamazov in selectedPeople then
15756: LD_EXP 40
15760: PUSH
15761: LD_VAR 0 4
15765: IN
15766: NOT
15767: IFFALSE 15784
// ExtSaveCharacter ( Karamazov , VSKaramazov , 6 ) ;
15769: LD_EXP 40
15773: PPUSH
15774: LD_STRING VSKaramazov
15776: PPUSH
15777: LD_INT 6
15779: PPUSH
15780: CALL 11903 0 3
// if not Petrovova in selectedPeople then
15784: LD_EXP 41
15788: PUSH
15789: LD_VAR 0 4
15793: IN
15794: NOT
15795: IFFALSE 15812
// ExtSaveCharacter ( Petrovova , VSPetrovova , 6 ) ;
15797: LD_EXP 41
15801: PPUSH
15802: LD_STRING VSPetrovova
15804: PPUSH
15805: LD_INT 6
15807: PPUSH
15808: CALL 11903 0 3
// if not Gleb in selectedPeople then
15812: LD_EXP 42
15816: PUSH
15817: LD_VAR 0 4
15821: IN
15822: NOT
15823: IFFALSE 15840
// ExtSaveCharacter ( Gleb , VSGleb , 6 ) ;
15825: LD_EXP 42
15829: PPUSH
15830: LD_STRING VSGleb
15832: PPUSH
15833: LD_INT 6
15835: PPUSH
15836: CALL 11903 0 3
// if not Petrosyan in selectedPeople then
15840: LD_EXP 43
15844: PUSH
15845: LD_VAR 0 4
15849: IN
15850: NOT
15851: IFFALSE 15868
// ExtSaveCharacter ( Petrosyan , VSPetrosyan , 6 ) ;
15853: LD_EXP 43
15857: PPUSH
15858: LD_STRING VSPetrosyan
15860: PPUSH
15861: LD_INT 6
15863: PPUSH
15864: CALL 11903 0 3
// if not Titov in selectedPeople then
15868: LD_EXP 44
15872: PUSH
15873: LD_VAR 0 4
15877: IN
15878: NOT
15879: IFFALSE 15896
// ExtSaveCharacter ( Titov , VSTitov , 6 ) ;
15881: LD_EXP 44
15885: PPUSH
15886: LD_STRING VSTitov
15888: PPUSH
15889: LD_INT 6
15891: PPUSH
15892: CALL 11903 0 3
// if not Dolgov in selectedPeople then
15896: LD_EXP 45
15900: PUSH
15901: LD_VAR 0 4
15905: IN
15906: NOT
15907: IFFALSE 15924
// ExtSaveCharacter ( Dolgov , VSDolgov , 6 ) ;
15909: LD_EXP 45
15913: PPUSH
15914: LD_STRING VSDolgov
15916: PPUSH
15917: LD_INT 6
15919: PPUSH
15920: CALL 11903 0 3
// if not Lipshchin in selectedPeople then
15924: LD_EXP 46
15928: PUSH
15929: LD_VAR 0 4
15933: IN
15934: NOT
15935: IFFALSE 15952
// ExtSaveCharacter ( Lipshchin , VSLipshchin , 6 ) ;
15937: LD_EXP 46
15941: PPUSH
15942: LD_STRING VSLipshchin
15944: PPUSH
15945: LD_INT 6
15947: PPUSH
15948: CALL 11903 0 3
// others = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod ] ;
15952: LD_ADDR_VAR 0 5
15956: PUSH
15957: LD_INT 22
15959: PUSH
15960: LD_INT 6
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: LD_INT 21
15969: PUSH
15970: LD_INT 1
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: LD_INT 23
15979: PUSH
15980: LD_INT 3
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: LIST
15991: PPUSH
15992: CALL_OW 69
15996: PUSH
15997: LD_EXP 40
16001: PUSH
16002: LD_EXP 41
16006: PUSH
16007: LD_EXP 42
16011: PUSH
16012: LD_EXP 43
16016: PUSH
16017: LD_EXP 44
16021: PUSH
16022: LD_EXP 45
16026: PUSH
16027: LD_EXP 46
16031: PUSH
16032: LD_EXP 51
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: DIFF
16047: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_vsevolod , 6 ) ;
16048: LD_VAR 0 5
16052: PPUSH
16053: LD_STRING other_survivors_with_vsevolod
16055: PPUSH
16056: LD_INT 6
16058: PPUSH
16059: CALL 11959 0 3
// end ; end_of_file
16063: LD_VAR 0 1
16067: RET
// export function MissionIntro ; var i , ruEng , unit ; begin
16068: LD_INT 0
16070: PPUSH
16071: PPUSH
16072: PPUSH
16073: PPUSH
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) ;
16074: LD_EXP 39
16078: PPUSH
16079: CALL_OW 310
16083: PPUSH
16084: CALL_OW 87
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
16088: LD_ADDR_VAR 0 4
16092: PUSH
16093: LD_INT 22
16095: PUSH
16096: LD_INT 3
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: LD_INT 21
16105: PUSH
16106: LD_INT 2
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PPUSH
16117: CALL_OW 69
16121: PUSH
16122: FOR_IN
16123: IFFALSE 16187
// begin if ( i mod 2 ) = 0 then
16125: LD_VAR 0 2
16129: PUSH
16130: LD_INT 2
16132: MOD
16133: PUSH
16134: LD_INT 0
16136: EQUAL
16137: IFFALSE 16156
// ComMoveXY ( unit , 156 , 205 ) else
16139: LD_VAR 0 4
16143: PPUSH
16144: LD_INT 156
16146: PPUSH
16147: LD_INT 205
16149: PPUSH
16150: CALL_OW 111
16154: GO 16171
// ComMoveXY ( unit , 160 , 215 ) ;
16156: LD_VAR 0 4
16160: PPUSH
16161: LD_INT 160
16163: PPUSH
16164: LD_INT 215
16166: PPUSH
16167: CALL_OW 111
// i = i + 1 ;
16171: LD_ADDR_VAR 0 2
16175: PUSH
16176: LD_VAR 0 2
16180: PUSH
16181: LD_INT 1
16183: PLUS
16184: ST_TO_ADDR
// end ;
16185: GO 16122
16187: POP
16188: POP
// if IsOK ( Karamazov ) then
16189: LD_EXP 40
16193: PPUSH
16194: CALL_OW 302
16198: IFFALSE 16212
// ruEng = Karamazov else
16200: LD_ADDR_VAR 0 3
16204: PUSH
16205: LD_EXP 40
16209: ST_TO_ADDR
16210: GO 16295
// if IsOK ( Lipshchin ) then
16212: LD_EXP 46
16216: PPUSH
16217: CALL_OW 302
16221: IFFALSE 16235
// ruEng = Lipshchin else
16223: LD_ADDR_VAR 0 3
16227: PUSH
16228: LD_EXP 46
16232: ST_TO_ADDR
16233: GO 16295
// ruEng = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_class , class_engineer ] ] ) [ 1 ] ;
16235: LD_ADDR_VAR 0 3
16239: PUSH
16240: LD_INT 22
16242: PUSH
16243: LD_INT 3
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 21
16252: PUSH
16253: LD_INT 1
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 23
16262: PUSH
16263: LD_INT 3
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 25
16272: PUSH
16273: LD_INT 2
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: PPUSH
16286: CALL_OW 69
16290: PUSH
16291: LD_INT 1
16293: ARRAY
16294: ST_TO_ADDR
// wait ( 0 0$3 ) ;
16295: LD_INT 105
16297: PPUSH
16298: CALL_OW 67
// CenterOnXY ( 160 , 213 ) ;
16302: LD_INT 160
16304: PPUSH
16305: LD_INT 213
16307: PPUSH
16308: CALL_OW 84
// wait ( 0 0$3 ) ;
16312: LD_INT 105
16314: PPUSH
16315: CALL_OW 67
// CenterOnXY ( 149 , 211 ) ;
16319: LD_INT 149
16321: PPUSH
16322: LD_INT 211
16324: PPUSH
16325: CALL_OW 84
// repeat ComMoveXY ( IsInUnit ( ruEng ) , 149 , 212 ) ;
16329: LD_VAR 0 3
16333: PPUSH
16334: CALL_OW 310
16338: PPUSH
16339: LD_INT 149
16341: PPUSH
16342: LD_INT 212
16344: PPUSH
16345: CALL_OW 111
// wait ( 0 0$1 ) ;
16349: LD_INT 35
16351: PPUSH
16352: CALL_OW 67
// until GetDistUnitXY ( IsInUnit ( ruEng ) , 149 , 212 ) <= 2 ;
16356: LD_VAR 0 3
16360: PPUSH
16361: CALL_OW 310
16365: PPUSH
16366: LD_INT 149
16368: PPUSH
16369: LD_INT 212
16371: PPUSH
16372: CALL_OW 297
16376: PUSH
16377: LD_INT 2
16379: LESSEQUAL
16380: IFFALSE 16329
// ComExitVehicle ( ruEng ) ;
16382: LD_VAR 0 3
16386: PPUSH
16387: CALL_OW 121
// wait ( 0 0$1 ) ;
16391: LD_INT 35
16393: PPUSH
16394: CALL_OW 67
// AddComCaptureBuilding ( ruEng , rudepot ) ;
16398: LD_VAR 0 3
16402: PPUSH
16403: LD_INT 74
16405: PPUSH
16406: CALL 12475 0 2
// repeat wait ( 0 0$1 ) ;
16410: LD_INT 35
16412: PPUSH
16413: CALL_OW 67
// until GetSide ( rudepot ) = 3 ;
16417: LD_INT 74
16419: PPUSH
16420: CALL_OW 255
16424: PUSH
16425: LD_INT 3
16427: EQUAL
16428: IFFALSE 16410
// ComEnterUnit ( ruEng , rudepot ) ;
16430: LD_VAR 0 3
16434: PPUSH
16435: LD_INT 74
16437: PPUSH
16438: CALL_OW 120
// wait ( 0 0$2 ) ;
16442: LD_INT 70
16444: PPUSH
16445: CALL_OW 67
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
16449: LD_INT 22
16451: PUSH
16452: LD_INT 6
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PPUSH
16459: CALL_OW 69
16463: PPUSH
16464: LD_INT 3
16466: PPUSH
16467: CALL_OW 235
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
16471: LD_ADDR_VAR 0 4
16475: PUSH
16476: LD_INT 22
16478: PUSH
16479: LD_INT 3
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 21
16488: PUSH
16489: LD_INT 1
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PPUSH
16500: CALL_OW 69
16504: PUSH
16505: FOR_IN
16506: IFFALSE 16539
// if GetType ( IsInUnit ( unit ) ) = unit_vehicle then
16508: LD_VAR 0 4
16512: PPUSH
16513: CALL_OW 310
16517: PPUSH
16518: CALL_OW 247
16522: PUSH
16523: LD_INT 2
16525: EQUAL
16526: IFFALSE 16537
// ComExitVehicle ( unit ) ;
16528: LD_VAR 0 4
16532: PPUSH
16533: CALL_OW 121
16537: GO 16505
16539: POP
16540: POP
// if ruEng = Karamazov then
16541: LD_VAR 0 3
16545: PUSH
16546: LD_EXP 40
16550: EQUAL
16551: IFFALSE 16567
// Say ( Karamazov , DStart-Kar-1 ) else
16553: LD_EXP 40
16557: PPUSH
16558: LD_STRING DStart-Kar-1
16560: PPUSH
16561: CALL_OW 88
16565: GO 16591
// if ruEng = Lipshchin then
16567: LD_VAR 0 3
16571: PUSH
16572: LD_EXP 46
16576: EQUAL
16577: IFFALSE 16591
// Say ( Lipshchin , DStart-Lip-1 ) ;
16579: LD_EXP 46
16583: PPUSH
16584: LD_STRING DStart-Lip-1
16586: PPUSH
16587: CALL_OW 88
// ComExitBuilding ( ruEng ) ;
16591: LD_VAR 0 3
16595: PPUSH
16596: CALL_OW 122
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 250 ] ] ] ) do
16600: LD_ADDR_VAR 0 4
16604: PUSH
16605: LD_INT 22
16607: PUSH
16608: LD_INT 3
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: LD_INT 21
16617: PUSH
16618: LD_INT 3
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 3
16627: PUSH
16628: LD_INT 24
16630: PUSH
16631: LD_INT 250
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: LIST
16646: PPUSH
16647: CALL_OW 69
16651: PUSH
16652: FOR_IN
16653: IFFALSE 16706
// AddComRepairBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , unit ) ;
16655: LD_INT 22
16657: PUSH
16658: LD_INT 3
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PUSH
16665: LD_INT 21
16667: PUSH
16668: LD_INT 1
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: PUSH
16675: LD_INT 25
16677: PUSH
16678: LD_INT 2
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: LIST
16689: PPUSH
16690: CALL_OW 69
16694: PPUSH
16695: LD_VAR 0 4
16699: PPUSH
16700: CALL_OW 190
16704: GO 16652
16706: POP
16707: POP
// Say ( Burlak , DStart-Bur-1 ) ;
16708: LD_EXP 39
16712: PPUSH
16713: LD_STRING DStart-Bur-1
16715: PPUSH
16716: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-1 ) ;
16720: LD_EXP 47
16724: PPUSH
16725: LD_STRING DStart-Pla-1
16727: PPUSH
16728: CALL_OW 94
// Say ( Burlak , DStart-Bur-2 ) ;
16732: LD_EXP 39
16736: PPUSH
16737: LD_STRING DStart-Bur-2
16739: PPUSH
16740: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-2 ) ;
16744: LD_EXP 47
16748: PPUSH
16749: LD_STRING DStart-Pla-2
16751: PPUSH
16752: CALL_OW 94
// if IsOK ( Petrovova ) then
16756: LD_EXP 41
16760: PPUSH
16761: CALL_OW 302
16765: IFFALSE 16779
// Say ( Petrovova , DStart-Ptr-2 ) ;
16767: LD_EXP 41
16771: PPUSH
16772: LD_STRING DStart-Ptr-2
16774: PPUSH
16775: CALL_OW 88
// InGameOff ;
16779: CALL_OW 9
// ChangeMissionObjectives ( MStart ) ;
16783: LD_STRING MStart
16785: PPUSH
16786: CALL_OW 337
// SaveForQuickRestart ;
16790: CALL_OW 22
// wait ( 0 0$10 ) ;
16794: LD_INT 350
16796: PPUSH
16797: CALL_OW 67
// if IsOK ( Petrosyan ) then
16801: LD_EXP 43
16805: PPUSH
16806: CALL_OW 302
16810: IFFALSE 16826
// Say ( Petrosyan , DMatPrediction-Pty-1 ) else
16812: LD_EXP 43
16816: PPUSH
16817: LD_STRING DMatPrediction-Pty-1
16819: PPUSH
16820: CALL_OW 88
16824: GO 16849
// if IsOK ( Dolgov ) then
16826: LD_EXP 45
16830: PPUSH
16831: CALL_OW 302
16835: IFFALSE 16849
// Say ( Dolgov , DMatPrediction-Dol-1 ) ;
16837: LD_EXP 45
16841: PPUSH
16842: LD_STRING DMatPrediction-Dol-1
16844: PPUSH
16845: CALL_OW 88
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16849: LD_EXP 43
16853: PPUSH
16854: CALL_OW 302
16858: PUSH
16859: LD_EXP 45
16863: PPUSH
16864: CALL_OW 302
16868: OR
16869: IFFALSE 16883
// Say ( Burlak , DMatPrediction-Bur-1 ) ;
16871: LD_EXP 39
16875: PPUSH
16876: LD_STRING DMatPrediction-Bur-1
16878: PPUSH
16879: CALL_OW 88
// if IsOK ( Petrosyan ) then
16883: LD_EXP 43
16887: PPUSH
16888: CALL_OW 302
16892: IFFALSE 16908
// Say ( Petrosyan , DMatPrediction-Pty-2 ) else
16894: LD_EXP 43
16898: PPUSH
16899: LD_STRING DMatPrediction-Pty-2
16901: PPUSH
16902: CALL_OW 88
16906: GO 16931
// if IsOK ( Dolgov ) then
16908: LD_EXP 45
16912: PPUSH
16913: CALL_OW 302
16917: IFFALSE 16931
// Say ( Dolgov , DMatPrediction-Dol-2 ) ;
16919: LD_EXP 45
16923: PPUSH
16924: LD_STRING DMatPrediction-Dol-2
16926: PPUSH
16927: CALL_OW 88
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16931: LD_EXP 43
16935: PPUSH
16936: CALL_OW 302
16940: PUSH
16941: LD_EXP 45
16945: PPUSH
16946: CALL_OW 302
16950: OR
16951: IFFALSE 16965
// Say ( Burlak , DMatPrediction-Bur-2 ) ;
16953: LD_EXP 39
16957: PPUSH
16958: LD_STRING DMatPrediction-Bur-2
16960: PPUSH
16961: CALL_OW 88
// if IsOK ( Petrosyan ) then
16965: LD_EXP 43
16969: PPUSH
16970: CALL_OW 302
16974: IFFALSE 16990
// Say ( Petrosyan , DMatPrediction-Pty-3 ) else
16976: LD_EXP 43
16980: PPUSH
16981: LD_STRING DMatPrediction-Pty-3
16983: PPUSH
16984: CALL_OW 88
16988: GO 17013
// if IsOK ( Dolgov ) then
16990: LD_EXP 45
16994: PPUSH
16995: CALL_OW 302
16999: IFFALSE 17013
// Say ( Dolgov , DMatPrediction-Dol-3 ) ;
17001: LD_EXP 45
17005: PPUSH
17006: LD_STRING DMatPrediction-Dol-3
17008: PPUSH
17009: CALL_OW 88
// ChangeMissionObjectives ( MPred ) ;
17013: LD_STRING MPred
17015: PPUSH
17016: CALL_OW 337
// end ;
17020: LD_VAR 0 1
17024: RET
// every 0 0$1 trigger not UnitFilter ( ovsyenkoBase , [ f_type , unit_human ] ) do
17025: LD_EXP 59
17029: PPUSH
17030: LD_INT 21
17032: PUSH
17033: LD_INT 1
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PPUSH
17040: CALL_OW 72
17044: NOT
17045: IFFALSE 17267
17047: GO 17049
17049: DISABLE
// begin DialogueOn ;
17050: CALL_OW 6
// Say ( Burlak , DOvsyenkoTaken-Bur-1 ) ;
17054: LD_EXP 39
17058: PPUSH
17059: LD_STRING DOvsyenkoTaken-Bur-1
17061: PPUSH
17062: CALL_OW 88
// SayRadio ( Platonov , DOvsyenkoTaken-Pla-1 ) ;
17066: LD_EXP 47
17070: PPUSH
17071: LD_STRING DOvsyenkoTaken-Pla-1
17073: PPUSH
17074: CALL_OW 94
// if IsOK ( Karamazov ) then
17078: LD_EXP 40
17082: PPUSH
17083: CALL_OW 302
17087: IFFALSE 17101
// Say ( Karamazov , DOvsyenkoTaken-Kar-1 ) ;
17089: LD_EXP 40
17093: PPUSH
17094: LD_STRING DOvsyenkoTaken-Kar-1
17096: PPUSH
17097: CALL_OW 88
// if IsOK ( Titov ) then
17101: LD_EXP 44
17105: PPUSH
17106: CALL_OW 302
17110: IFFALSE 17124
// Say ( Titov , DOvsyenkoTaken-Tit-1 ) ;
17112: LD_EXP 44
17116: PPUSH
17117: LD_STRING DOvsyenkoTaken-Tit-1
17119: PPUSH
17120: CALL_OW 88
// if IsOK ( Lipshchin ) and ( IsOK ( Karamazov ) or IsOK ( Titov ) ) then
17124: LD_EXP 46
17128: PPUSH
17129: CALL_OW 302
17133: PUSH
17134: LD_EXP 40
17138: PPUSH
17139: CALL_OW 302
17143: PUSH
17144: LD_EXP 44
17148: PPUSH
17149: CALL_OW 302
17153: OR
17154: AND
17155: IFFALSE 17192
// begin Say ( Lipshchin , DOvsyenkoTaken-Lip-1 ) ;
17157: LD_EXP 46
17161: PPUSH
17162: LD_STRING DOvsyenkoTaken-Lip-1
17164: PPUSH
17165: CALL_OW 88
// if IsOK ( Gleb ) then
17169: LD_EXP 42
17173: PPUSH
17174: CALL_OW 302
17178: IFFALSE 17192
// Say ( Gleb , DOvsyenkoTaken-Glb-1 ) ;
17180: LD_EXP 42
17184: PPUSH
17185: LD_STRING DOvsyenkoTaken-Glb-1
17187: PPUSH
17188: CALL_OW 88
// end ; DialogueOff ;
17192: CALL_OW 7
// ChangeMissionObjectives ( MOutCapture ) ;
17196: LD_STRING MOutCapture
17198: PPUSH
17199: CALL_OW 337
// ChangeMissionObjectives ( MAddMine ) ;
17203: LD_STRING MAddMine
17205: PPUSH
17206: CALL_OW 337
// claimOvsyenkoBase = true ;
17210: LD_ADDR_EXP 15
17214: PUSH
17215: LD_INT 1
17217: ST_TO_ADDR
// wait ( 1 1$10 ) ;
17218: LD_INT 2450
17220: PPUSH
17221: CALL_OW 67
// InitAIManager ( 1 , 1 , headAmBase , HeadAmericanBaseArea , HeadAmericanHealArea , false , HeadAmericanBaseArea , 6 , 2 , 4 , true , true ) ;
17225: LD_INT 1
17227: PPUSH
17228: LD_INT 1
17230: PPUSH
17231: LD_EXP 61
17235: PPUSH
17236: LD_INT 5
17238: PPUSH
17239: LD_INT 9
17241: PPUSH
17242: LD_INT 0
17244: PPUSH
17245: LD_INT 5
17247: PPUSH
17248: LD_INT 6
17250: PPUSH
17251: LD_INT 2
17253: PPUSH
17254: LD_INT 4
17256: PPUSH
17257: LD_INT 1
17259: PPUSH
17260: LD_INT 1
17262: PPUSH
17263: CALL 5248 0 12
// end ;
17267: END
// export function Dial_SibTechs ; begin
17268: LD_INT 0
17270: PPUSH
// dial_SibTechsBlocker = true ;
17271: LD_ADDR_EXP 9
17275: PUSH
17276: LD_INT 1
17278: ST_TO_ADDR
// DialogueOn ;
17279: CALL_OW 6
// if IsOK ( Petrosyan ) then
17283: LD_EXP 43
17287: PPUSH
17288: CALL_OW 302
17292: IFFALSE 17308
// Say ( Petrosyan , DSibResearch-Pty-1 ) else
17294: LD_EXP 43
17298: PPUSH
17299: LD_STRING DSibResearch-Pty-1
17301: PPUSH
17302: CALL_OW 88
17306: GO 17331
// if IsOK ( Dolgov ) then
17308: LD_EXP 45
17312: PPUSH
17313: CALL_OW 302
17317: IFFALSE 17331
// Say ( Dolgov , DSibResearch-Dol-1 ) ;
17319: LD_EXP 45
17323: PPUSH
17324: LD_STRING DSibResearch-Dol-1
17326: PPUSH
17327: CALL_OW 88
// Say ( Burlak , DSibResearch-Bur-1 ) ;
17331: LD_EXP 39
17335: PPUSH
17336: LD_STRING DSibResearch-Bur-1
17338: PPUSH
17339: CALL_OW 88
// SayRadio ( Platonov , DSibResearch-Pla-1 ) ;
17343: LD_EXP 47
17347: PPUSH
17348: LD_STRING DSibResearch-Pla-1
17350: PPUSH
17351: CALL_OW 94
// DialogueOff ;
17355: CALL_OW 7
// ChangeMissionObjectives ( MResearch ) ;
17359: LD_STRING MResearch
17361: PPUSH
17362: CALL_OW 337
// SetRestrict ( b_ext_siberium , 3 , true ) ;
17366: LD_INT 21
17368: PPUSH
17369: LD_INT 3
17371: PPUSH
17372: LD_INT 1
17374: PPUSH
17375: CALL_OW 324
// SetRestrict ( b_siberite_power , 3 , true ) ;
17379: LD_INT 28
17381: PPUSH
17382: LD_INT 3
17384: PPUSH
17385: LD_INT 1
17387: PPUSH
17388: CALL_OW 324
// SetRestrict ( b_lab_siberium , 3 , true ) ;
17392: LD_INT 11
17394: PPUSH
17395: LD_INT 3
17397: PPUSH
17398: LD_INT 1
17400: PPUSH
17401: CALL_OW 324
// SetRestrict ( b_lab_spacetime , 3 , true ) ;
17405: LD_INT 14
17407: PPUSH
17408: LD_INT 3
17410: PPUSH
17411: LD_INT 1
17413: PPUSH
17414: CALL_OW 324
// end ;
17418: LD_VAR 0 1
17422: RET
// export function Dial_ResearchMatPredictions ; begin
17423: LD_INT 0
17425: PPUSH
// techMatPredStatus = state_researched ;
17426: LD_ADDR_EXP 6
17430: PUSH
17431: LD_INT 2
17433: ST_TO_ADDR
// ChangeMissionObjectives ( MOutPred ) ;
17434: LD_STRING MOutPred
17436: PPUSH
17437: CALL_OW 337
// DialogueOn ;
17441: CALL_OW 6
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
17445: LD_EXP 43
17449: PPUSH
17450: CALL_OW 302
17454: PUSH
17455: LD_EXP 45
17459: PPUSH
17460: CALL_OW 302
17464: OR
17465: IFFALSE 17587
// begin if IsOK ( Petrosyan ) then
17467: LD_EXP 43
17471: PPUSH
17472: CALL_OW 302
17476: IFFALSE 17492
// Say ( Petrosyan , DNoMaterial-Pty-1 ) else
17478: LD_EXP 43
17482: PPUSH
17483: LD_STRING DNoMaterial-Pty-1
17485: PPUSH
17486: CALL_OW 88
17490: GO 17515
// if IsOK ( Dolgov ) then
17492: LD_EXP 45
17496: PPUSH
17497: CALL_OW 302
17501: IFFALSE 17515
// Say ( Dolgov , DNoMaterial-Dol-1 ) ;
17503: LD_EXP 45
17507: PPUSH
17508: LD_STRING DNoMaterial-Dol-1
17510: PPUSH
17511: CALL_OW 88
// Say ( Burlak , DNoMaterial-Bur-1 ) ;
17515: LD_EXP 39
17519: PPUSH
17520: LD_STRING DNoMaterial-Bur-1
17522: PPUSH
17523: CALL_OW 88
// if IsOK ( Petrosyan ) then
17527: LD_EXP 43
17531: PPUSH
17532: CALL_OW 302
17536: IFFALSE 17552
// Say ( Petrosyan , DNoMaterial-Pty-2 ) else
17538: LD_EXP 43
17542: PPUSH
17543: LD_STRING DNoMaterial-Pty-2
17545: PPUSH
17546: CALL_OW 88
17550: GO 17575
// if IsOK ( Dolgov ) then
17552: LD_EXP 45
17556: PPUSH
17557: CALL_OW 302
17561: IFFALSE 17575
// Say ( Dolgov , DNoMaterial-Dol-2 ) ;
17563: LD_EXP 45
17567: PPUSH
17568: LD_STRING DNoMaterial-Dol-2
17570: PPUSH
17571: CALL_OW 88
// Say ( Burlak , DNoMaterial-Bur-2 ) ;
17575: LD_EXP 39
17579: PPUSH
17580: LD_STRING DNoMaterial-Bur-2
17582: PPUSH
17583: CALL_OW 88
// end ; DialogueOff ;
17587: CALL_OW 7
// end ;
17591: LD_VAR 0 1
17595: RET
// every 0 0$1 trigger not dial_SibTechsBlocker and ( GetResourceVisibility ( 116 , 123 , 3 ) or GetResourceVisibility ( 72 , 86 , 3 ) ) do
17596: LD_EXP 9
17600: NOT
17601: PUSH
17602: LD_INT 116
17604: PPUSH
17605: LD_INT 123
17607: PPUSH
17608: LD_INT 3
17610: PPUSH
17611: CALL_OW 440
17615: PUSH
17616: LD_INT 72
17618: PPUSH
17619: LD_INT 86
17621: PPUSH
17622: LD_INT 3
17624: PPUSH
17625: CALL_OW 440
17629: OR
17630: AND
17631: IFFALSE 17640
17633: GO 17635
17635: DISABLE
// Dial_SibTechs ;
17636: CALL 17268 0 0
17640: END
// every 5 5$0 trigger claimOvsyenkoBase do
17641: LD_EXP 15
17645: IFFALSE 17669
17647: GO 17649
17649: DISABLE
// begin PrepareVsevolod ;
17650: CALL 2664 0 0
// ComAgressiveMove ( vsevolodTeam , 61 , 45 ) ;
17654: LD_EXP 52
17658: PPUSH
17659: LD_INT 61
17661: PPUSH
17662: LD_INT 45
17664: PPUSH
17665: CALL_OW 114
// end ;
17669: END
// every 0 0$1 trigger immortalVsevolodTeam do var unit ;
17670: LD_EXP 18
17674: IFFALSE 17712
17676: GO 17678
17678: DISABLE
17679: LD_INT 0
17681: PPUSH
// begin enable ;
17682: ENABLE
// for unit in vsevolodTeam do
17683: LD_ADDR_VAR 0 1
17687: PUSH
17688: LD_EXP 52
17692: PUSH
17693: FOR_IN
17694: IFFALSE 17710
// SetLives ( unit , 1000 ) ;
17696: LD_VAR 0 1
17700: PPUSH
17701: LD_INT 1000
17703: PPUSH
17704: CALL_OW 234
17708: GO 17693
17710: POP
17711: POP
// end ;
17712: PPOPN 1
17714: END
// every 0 0$1 trigger GetLives ( ter_bun1 ) <= 650 or GetLives ( ter_arm1 ) <= 650 do var belkovSavedIn02 , tmp , speaker ;
17715: LD_INT 170
17717: PPUSH
17718: CALL_OW 256
17722: PUSH
17723: LD_INT 650
17725: LESSEQUAL
17726: PUSH
17727: LD_INT 174
17729: PPUSH
17730: CALL_OW 256
17734: PUSH
17735: LD_INT 650
17737: LESSEQUAL
17738: OR
17739: IFFALSE 18900
17741: GO 17743
17743: DISABLE
17744: LD_INT 0
17746: PPUSH
17747: PPUSH
17748: PPUSH
// begin ComMoveXY ( UnitFilter ( terminalBase , [ f_type , unit_human ] ) , 35 , 58 ) ;
17749: LD_EXP 60
17753: PPUSH
17754: LD_INT 21
17756: PUSH
17757: LD_INT 1
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PPUSH
17764: CALL_OW 72
17768: PPUSH
17769: LD_INT 35
17771: PPUSH
17772: LD_INT 58
17774: PPUSH
17775: CALL_OW 111
// SetSide ( UnitFilter ( terminalBase , [ f_type , unit_building ] ) , 6 ) ;
17779: LD_EXP 60
17783: PPUSH
17784: LD_INT 21
17786: PUSH
17787: LD_INT 3
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PPUSH
17794: CALL_OW 72
17798: PPUSH
17799: LD_INT 6
17801: PPUSH
17802: CALL_OW 235
// immortalVsevolodTeam = false ;
17806: LD_ADDR_EXP 18
17810: PUSH
17811: LD_INT 0
17813: ST_TO_ADDR
// ComEnterUnit ( [ Vsevolod , vsevolodTeam [ 3 ] ] , ter_arm1 ) ;
17814: LD_EXP 51
17818: PUSH
17819: LD_EXP 52
17823: PUSH
17824: LD_INT 3
17826: ARRAY
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PPUSH
17832: LD_INT 174
17834: PPUSH
17835: CALL_OW 120
// ComEnterUnit ( vsevolodTeam [ 4 ] , ter_bun1 ) ;
17839: LD_EXP 52
17843: PUSH
17844: LD_INT 4
17846: ARRAY
17847: PPUSH
17848: LD_INT 170
17850: PPUSH
17851: CALL_OW 120
// SetLives ( Petr , 500 ) ;
17855: LD_EXP 53
17859: PPUSH
17860: LD_INT 500
17862: PPUSH
17863: CALL_OW 234
// ComEnterUnit ( vsevolodTeam [ 2 ] , terminal ) ;
17867: LD_EXP 52
17871: PUSH
17872: LD_INT 2
17874: ARRAY
17875: PPUSH
17876: LD_INT 168
17878: PPUSH
17879: CALL_OW 120
// wait ( 0 0$5 ) ;
17883: LD_INT 175
17885: PPUSH
17886: CALL_OW 67
// DialogueOn ;
17890: CALL_OW 6
// if IsOK ( Dolgov ) then
17894: LD_EXP 45
17898: PPUSH
17899: CALL_OW 302
17903: IFFALSE 17917
// Say ( Dolgov , DVsevolod-Dol-1 ) ;
17905: LD_EXP 45
17909: PPUSH
17910: LD_STRING DVsevolod-Dol-1
17912: PPUSH
17913: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-1 ) ;
17917: LD_EXP 51
17921: PPUSH
17922: LD_STRING DVsevolod-Vse-1
17924: PPUSH
17925: CALL_OW 94
// if IsOK ( Gleb ) then
17929: LD_EXP 42
17933: PPUSH
17934: CALL_OW 302
17938: IFFALSE 17976
// begin Say ( Burlak , DVsevolod-Bur-1 ) ;
17940: LD_EXP 39
17944: PPUSH
17945: LD_STRING DVsevolod-Bur-1
17947: PPUSH
17948: CALL_OW 88
// Say ( Gleb , DVsevolod-Glb-1 ) ;
17952: LD_EXP 42
17956: PPUSH
17957: LD_STRING DVsevolod-Glb-1
17959: PPUSH
17960: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-2 ) ;
17964: LD_EXP 51
17968: PPUSH
17969: LD_STRING DVsevolod-Vse-2
17971: PPUSH
17972: CALL_OW 94
// end ; Say ( Burlak , DVsevolod-Bur-2 ) ;
17976: LD_EXP 39
17980: PPUSH
17981: LD_STRING DVsevolod-Bur-2
17983: PPUSH
17984: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-3 ) ;
17988: LD_EXP 51
17992: PPUSH
17993: LD_STRING DVsevolod-Vse-3
17995: PPUSH
17996: CALL_OW 94
// Say ( Burlak , DVsevolod-Bur-3 ) ;
18000: LD_EXP 39
18004: PPUSH
18005: LD_STRING DVsevolod-Bur-3
18007: PPUSH
18008: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-4 ) ;
18012: LD_EXP 51
18016: PPUSH
18017: LD_STRING DVsevolod-Vse-4
18019: PPUSH
18020: CALL_OW 94
// Say ( Burlak , DVsevolod-Bur-4 ) ;
18024: LD_EXP 39
18028: PPUSH
18029: LD_STRING DVsevolod-Bur-4
18031: PPUSH
18032: CALL_OW 88
// if IsOK ( Gleb ) then
18036: LD_EXP 42
18040: PPUSH
18041: CALL_OW 302
18045: IFFALSE 18073
// begin Say ( Gleb , DVsevolod-Glb-4 ) ;
18047: LD_EXP 42
18051: PPUSH
18052: LD_STRING DVsevolod-Glb-4
18054: PPUSH
18055: CALL_OW 88
// Say ( Burlak , DVsevolod-Bur-5 ) ;
18059: LD_EXP 39
18063: PPUSH
18064: LD_STRING DVsevolod-Bur-5
18066: PPUSH
18067: CALL_OW 88
// end else
18071: GO 18147
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-RSol1-5 ,  , false , true ) ;
18073: LD_INT 22
18075: PUSH
18076: LD_INT 3
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 21
18085: PUSH
18086: LD_INT 1
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 50
18095: PUSH
18096: EMPTY
18097: LIST
18098: PUSH
18099: LD_INT 26
18101: PUSH
18102: LD_INT 1
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 23
18111: PUSH
18112: LD_INT 3
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: PPUSH
18126: CALL_OW 69
18130: PPUSH
18131: LD_STRING DVsevolod-RSol1-5
18133: PPUSH
18134: LD_STRING 
18136: PPUSH
18137: LD_INT 0
18139: PPUSH
18140: LD_INT 1
18142: PPUSH
18143: CALL 12102 0 5
// Say ( Burlak , DVsevolod-Bur-6 ) ;
18147: LD_EXP 39
18151: PPUSH
18152: LD_STRING DVsevolod-Bur-6
18154: PPUSH
18155: CALL_OW 88
// CenterOnXY ( 59 , 40 ) ;
18159: LD_INT 59
18161: PPUSH
18162: LD_INT 40
18164: PPUSH
18165: CALL_OW 84
// RevealFogArea ( 3 , TerminalBaseArea ) ;
18169: LD_INT 3
18171: PPUSH
18172: LD_INT 4
18174: PPUSH
18175: CALL_OW 332
// if IsOK ( Dolgov ) then
18179: LD_EXP 45
18183: PPUSH
18184: CALL_OW 302
18188: IFFALSE 18204
// Say ( Dolgov , DVsevolod-Dol-6 ) else
18190: LD_EXP 45
18194: PPUSH
18195: LD_STRING DVsevolod-Dol-6
18197: PPUSH
18198: CALL_OW 88
18202: GO 18278
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-Dol-6 ,  , false , true ) ;
18204: LD_INT 22
18206: PUSH
18207: LD_INT 3
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 21
18216: PUSH
18217: LD_INT 1
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 50
18226: PUSH
18227: EMPTY
18228: LIST
18229: PUSH
18230: LD_INT 26
18232: PUSH
18233: LD_INT 1
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 23
18242: PUSH
18243: LD_INT 3
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: PPUSH
18257: CALL_OW 69
18261: PPUSH
18262: LD_STRING DVsevolod-Dol-6
18264: PPUSH
18265: LD_STRING 
18267: PPUSH
18268: LD_INT 0
18270: PPUSH
18271: LD_INT 1
18273: PPUSH
18274: CALL 12102 0 5
// Say ( Burlak , DVsevolod-Bur-7 ) ;
18278: LD_EXP 39
18282: PPUSH
18283: LD_STRING DVsevolod-Bur-7
18285: PPUSH
18286: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-7 ) ;
18290: LD_EXP 51
18294: PPUSH
18295: LD_STRING DVsevolod-Vse-7
18297: PPUSH
18298: CALL_OW 94
// DialogueOff ;
18302: CALL_OW 7
// ChangeMissionObjectives ( MVsevolod ) ;
18306: LD_STRING MVsevolod
18308: PPUSH
18309: CALL_OW 337
// enableVsevolodCounter = true ;
18313: LD_ADDR_EXP 22
18317: PUSH
18318: LD_INT 1
18320: ST_TO_ADDR
// canGoNorth = true ;
18321: LD_ADDR_EXP 21
18325: PUSH
18326: LD_INT 1
18328: ST_TO_ADDR
// PrepareSoldiersInBunkers ;
18329: CALL 3979 0 0
// wait ( 0 0$7 ) ;
18333: LD_INT 245
18335: PPUSH
18336: CALL_OW 67
// belkovSavedIn02 = TestCharacters ( 02_Belkov ) ;
18340: LD_ADDR_VAR 0 1
18344: PUSH
18345: LD_STRING 02_Belkov
18347: PPUSH
18348: CALL_OW 28
18352: ST_TO_ADDR
// DialogueOn ;
18353: CALL_OW 6
// if belkovSavedIn02 then
18357: LD_VAR 0 1
18361: IFFALSE 18562
// begin if IsOK ( Gleb ) then
18363: LD_EXP 42
18367: PPUSH
18368: CALL_OW 302
18372: IFFALSE 18386
// Say ( Gleb , DHelp1-Glb-1 ) ;
18374: LD_EXP 42
18378: PPUSH
18379: LD_STRING DHelp1-Glb-1
18381: PPUSH
18382: CALL_OW 88
// if IsOK ( Dolgov ) then
18386: LD_EXP 45
18390: PPUSH
18391: CALL_OW 302
18395: IFFALSE 18409
// Say ( Dolgov , DHelp1-Dol-1 ) ;
18397: LD_EXP 45
18401: PPUSH
18402: LD_STRING DHelp1-Dol-1
18404: PPUSH
18405: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Gleb , Dolgov , Titov ] ;
18409: LD_ADDR_VAR 0 2
18413: PUSH
18414: LD_INT 22
18416: PUSH
18417: LD_INT 3
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 21
18426: PUSH
18427: LD_INT 1
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 50
18436: PUSH
18437: EMPTY
18438: LIST
18439: PUSH
18440: LD_INT 26
18442: PUSH
18443: LD_INT 1
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 23
18452: PUSH
18453: LD_INT 3
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: PPUSH
18467: CALL_OW 69
18471: PUSH
18472: LD_EXP 42
18476: PUSH
18477: LD_EXP 45
18481: PUSH
18482: LD_EXP 44
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: LIST
18491: DIFF
18492: ST_TO_ADDR
// DialogRandom ( tmp , DHelp1-RSol1-1 ,  , false , true ) ;
18493: LD_VAR 0 2
18497: PPUSH
18498: LD_STRING DHelp1-RSol1-1
18500: PPUSH
18501: LD_STRING 
18503: PPUSH
18504: LD_INT 0
18506: PPUSH
18507: LD_INT 1
18509: PPUSH
18510: CALL 12102 0 5
// if IsOK ( Titov ) then
18514: LD_EXP 44
18518: PPUSH
18519: CALL_OW 302
18523: IFFALSE 18537
// Say ( Titov , DHelp1-Tit-1 ) ;
18525: LD_EXP 44
18529: PPUSH
18530: LD_STRING DHelp1-Tit-1
18532: PPUSH
18533: CALL_OW 88
// if IsOK ( Gleb ) then
18537: LD_EXP 42
18541: PPUSH
18542: CALL_OW 302
18546: IFFALSE 18560
// Say ( Gleb , DHelp1-Glb-2 ) ;
18548: LD_EXP 42
18552: PPUSH
18553: LD_STRING DHelp1-Glb-2
18555: PPUSH
18556: CALL_OW 88
// end else
18560: GO 18773
// begin if IsOK ( Titov ) then
18562: LD_EXP 44
18566: PPUSH
18567: CALL_OW 302
18571: IFFALSE 18585
// Say ( Titov , DHelp2-Tit-1 ) ;
18573: LD_EXP 44
18577: PPUSH
18578: LD_STRING DHelp2-Tit-1
18580: PPUSH
18581: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Gleb , Titov ] ;
18585: LD_ADDR_VAR 0 2
18589: PUSH
18590: LD_INT 22
18592: PUSH
18593: LD_INT 3
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 21
18602: PUSH
18603: LD_INT 1
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 50
18612: PUSH
18613: EMPTY
18614: LIST
18615: PUSH
18616: LD_INT 26
18618: PUSH
18619: LD_INT 1
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PUSH
18626: LD_INT 23
18628: PUSH
18629: LD_INT 3
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: PPUSH
18643: CALL_OW 69
18647: PUSH
18648: LD_EXP 42
18652: PUSH
18653: LD_EXP 44
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: DIFF
18662: ST_TO_ADDR
// speaker = DialogRandom ( tmp , DHelp2-RSol1-1 ,  , false , true ) ;
18663: LD_ADDR_VAR 0 3
18667: PUSH
18668: LD_VAR 0 2
18672: PPUSH
18673: LD_STRING DHelp2-RSol1-1
18675: PPUSH
18676: LD_STRING 
18678: PPUSH
18679: LD_INT 0
18681: PPUSH
18682: LD_INT 1
18684: PPUSH
18685: CALL 12102 0 5
18689: ST_TO_ADDR
// if IsOK ( Gleb ) then
18690: LD_EXP 42
18694: PPUSH
18695: CALL_OW 302
18699: IFFALSE 18713
// Say ( Gleb , DHelp2-Glb-1 ) ;
18701: LD_EXP 42
18705: PPUSH
18706: LD_STRING DHelp2-Glb-1
18708: PPUSH
18709: CALL_OW 88
// tmp = tmp diff speaker ;
18713: LD_ADDR_VAR 0 2
18717: PUSH
18718: LD_VAR 0 2
18722: PUSH
18723: LD_VAR 0 3
18727: DIFF
18728: ST_TO_ADDR
// DialogRandom ( tmp , DHelp2-RSol2-1 ,  , false , true ) ;
18729: LD_VAR 0 2
18733: PPUSH
18734: LD_STRING DHelp2-RSol2-1
18736: PPUSH
18737: LD_STRING 
18739: PPUSH
18740: LD_INT 0
18742: PPUSH
18743: LD_INT 1
18745: PPUSH
18746: CALL 12102 0 5
// if IsOK ( Titov ) then
18750: LD_EXP 44
18754: PPUSH
18755: CALL_OW 302
18759: IFFALSE 18773
// Say ( Titov , DHelp2-Tit-2 ) ;
18761: LD_EXP 44
18765: PPUSH
18766: LD_STRING DHelp2-Tit-2
18768: PPUSH
18769: CALL_OW 88
// end ; Say ( Burlak , DHelp3-Bur-1 ) ;
18773: LD_EXP 39
18777: PPUSH
18778: LD_STRING DHelp3-Bur-1
18780: PPUSH
18781: CALL_OW 88
// if IsOK ( Lipshchin ) then
18785: LD_EXP 46
18789: PPUSH
18790: CALL_OW 302
18794: IFFALSE 18810
// Say ( Lipshchin , DHelp3-Lip-1 ) else
18796: LD_EXP 46
18800: PPUSH
18801: LD_STRING DHelp3-Lip-1
18803: PPUSH
18804: CALL_OW 88
18808: GO 18884
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-Dol-6 ,  , false , true ) ;
18810: LD_INT 22
18812: PUSH
18813: LD_INT 3
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 21
18822: PUSH
18823: LD_INT 1
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 50
18832: PUSH
18833: EMPTY
18834: LIST
18835: PUSH
18836: LD_INT 26
18838: PUSH
18839: LD_INT 1
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 23
18848: PUSH
18849: LD_INT 3
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: PPUSH
18863: CALL_OW 69
18867: PPUSH
18868: LD_STRING DVsevolod-Dol-6
18870: PPUSH
18871: LD_STRING 
18873: PPUSH
18874: LD_INT 0
18876: PPUSH
18877: LD_INT 1
18879: PPUSH
18880: CALL 12102 0 5
// Say ( Burlak , DHelp3-Bur-2 ) ;
18884: LD_EXP 39
18888: PPUSH
18889: LD_STRING DHelp3-Bur-2
18891: PPUSH
18892: CALL_OW 88
// DialogueOff ;
18896: CALL_OW 7
// end ;
18900: PPOPN 3
18902: END
// every 0 0$1 trigger claimOvsyenkoBase and not FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] , [ f_type , unit_vehicle ] ] ] ) and FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
18903: LD_EXP 15
18907: PUSH
18908: LD_INT 3
18910: PPUSH
18911: LD_INT 22
18913: PUSH
18914: LD_INT 3
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 2
18923: PUSH
18924: LD_INT 21
18926: PUSH
18927: LD_INT 1
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 59
18936: PUSH
18937: EMPTY
18938: LIST
18939: PUSH
18940: LD_INT 21
18942: PUSH
18943: LD_INT 2
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PPUSH
18960: CALL_OW 70
18964: NOT
18965: AND
18966: PUSH
18967: LD_INT 3
18969: PPUSH
18970: LD_INT 22
18972: PUSH
18973: LD_INT 1
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 2
18982: PUSH
18983: LD_INT 21
18985: PUSH
18986: LD_INT 1
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 21
18995: PUSH
18996: LD_INT 2
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: LIST
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PPUSH
19012: CALL_OW 70
19016: AND
19017: IFFALSE 19184
19019: GO 19021
19021: DISABLE
// begin lostAgainBase = true ;
19022: LD_ADDR_EXP 17
19026: PUSH
19027: LD_INT 1
19029: ST_TO_ADDR
// SetSide ( FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , 1 ) ;
19030: LD_INT 3
19032: PPUSH
19033: LD_INT 22
19035: PUSH
19036: LD_INT 3
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 21
19045: PUSH
19046: LD_INT 3
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PPUSH
19057: CALL_OW 70
19061: PPUSH
19062: LD_INT 1
19064: PPUSH
19065: CALL_OW 235
// if IsOK ( Gleb ) then
19069: LD_EXP 42
19073: PPUSH
19074: CALL_OW 302
19078: IFFALSE 19104
// begin Say ( Gleb , DOvsyenkoCaptured-Glb-1 ) ;
19080: LD_EXP 42
19084: PPUSH
19085: LD_STRING DOvsyenkoCaptured-Glb-1
19087: PPUSH
19088: CALL_OW 88
// Say ( Burlak , DOvsyenkoCaptured-Bur-1 ) ;
19092: LD_EXP 39
19096: PPUSH
19097: LD_STRING DOvsyenkoCaptured-Bur-1
19099: PPUSH
19100: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Gleb , DOvsyenkoCaptured-RSol1-1 ,  , false , true ) ;
19104: LD_INT 22
19106: PUSH
19107: LD_INT 3
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 21
19116: PUSH
19117: LD_INT 1
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 50
19126: PUSH
19127: EMPTY
19128: LIST
19129: PUSH
19130: LD_INT 26
19132: PUSH
19133: LD_INT 1
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 23
19142: PUSH
19143: LD_INT 3
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: PPUSH
19157: CALL_OW 69
19161: PUSH
19162: LD_EXP 42
19166: DIFF
19167: PPUSH
19168: LD_STRING DOvsyenkoCaptured-RSol1-1
19170: PPUSH
19171: LD_STRING 
19173: PPUSH
19174: LD_INT 0
19176: PPUSH
19177: LD_INT 1
19179: PPUSH
19180: CALL 12102 0 5
// end ;
19184: END
// every 0 0$1 trigger FilterUnitsInArea ( TrapArea , [ [ f_side , 3 ] , [ f_ok ] ] ) do
19185: LD_INT 12
19187: PPUSH
19188: LD_INT 22
19190: PUSH
19191: LD_INT 3
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 50
19200: PUSH
19201: EMPTY
19202: LIST
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PPUSH
19208: CALL_OW 70
19212: IFFALSE 19221
19214: GO 19216
19216: DISABLE
// PrepareTrap ;
19217: CALL 3800 0 0
19221: END
// every 0 0$1 trigger not dial_TrapDialogBlocker do var tmp , speaker , unit ;
19222: LD_EXP 11
19226: NOT
19227: IFFALSE 19445
19229: GO 19231
19231: DISABLE
19232: LD_INT 0
19234: PPUSH
19235: PPUSH
19236: PPUSH
// begin enable ;
19237: ENABLE
// for unit in trapTeam do
19238: LD_ADDR_VAR 0 3
19242: PUSH
19243: LD_EXP 62
19247: PUSH
19248: FOR_IN
19249: IFFALSE 19443
// if See ( 3 , unit ) then
19251: LD_INT 3
19253: PPUSH
19254: LD_VAR 0 3
19258: PPUSH
19259: CALL_OW 292
19263: IFFALSE 19441
// begin dial_TrapDialogBlocker = true ;
19265: LD_ADDR_EXP 11
19269: PUSH
19270: LD_INT 1
19272: ST_TO_ADDR
// DialogueOn ;
19273: CALL_OW 6
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Gleb ;
19277: LD_ADDR_VAR 0 1
19281: PUSH
19282: LD_INT 22
19284: PUSH
19285: LD_INT 3
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 21
19294: PUSH
19295: LD_INT 1
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 50
19304: PUSH
19305: EMPTY
19306: LIST
19307: PUSH
19308: LD_INT 26
19310: PUSH
19311: LD_INT 1
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 23
19320: PUSH
19321: LD_INT 3
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: PPUSH
19335: CALL_OW 69
19339: PUSH
19340: LD_EXP 42
19344: DIFF
19345: ST_TO_ADDR
// speaker = DialogRandom ( tmp , DPartyAttacked-RSol1-1 ,  , false , true ) ;
19346: LD_ADDR_VAR 0 2
19350: PUSH
19351: LD_VAR 0 1
19355: PPUSH
19356: LD_STRING DPartyAttacked-RSol1-1
19358: PPUSH
19359: LD_STRING 
19361: PPUSH
19362: LD_INT 0
19364: PPUSH
19365: LD_INT 1
19367: PPUSH
19368: CALL 12102 0 5
19372: ST_TO_ADDR
// tmp = tmp diff speaker ;
19373: LD_ADDR_VAR 0 1
19377: PUSH
19378: LD_VAR 0 1
19382: PUSH
19383: LD_VAR 0 2
19387: DIFF
19388: ST_TO_ADDR
// if IsOK ( Gleb ) then
19389: LD_EXP 42
19393: PPUSH
19394: CALL_OW 302
19398: IFFALSE 19412
// Say ( Gleb , DPartyAttacked-Glb-1 ) ;
19400: LD_EXP 42
19404: PPUSH
19405: LD_STRING DPartyAttacked-Glb-1
19407: PPUSH
19408: CALL_OW 88
// DialogRandom ( tmp , DPartyAttacked-RSol1-2 ,  , false , true ) ;
19412: LD_VAR 0 1
19416: PPUSH
19417: LD_STRING DPartyAttacked-RSol1-2
19419: PPUSH
19420: LD_STRING 
19422: PPUSH
19423: LD_INT 0
19425: PPUSH
19426: LD_INT 1
19428: PPUSH
19429: CALL 12102 0 5
// DialogueOff ;
19433: CALL_OW 7
// exit ;
19437: POP
19438: POP
19439: GO 19445
// end ;
19441: GO 19248
19443: POP
19444: POP
// end ;
19445: PPOPN 3
19447: END
// every 0 0$1 trigger not savedVsevolod and IsOK ( Vsevolod ) and FilterUnitsInArea ( TerminalBaseArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ [ f_type , unit_human ] , [ f_nation , nation_russian ] ] , [ f_type , unit_vehicle ] ] ] ) do var nearUnit , unit , maleRandomUnits ;
19448: LD_EXP 19
19452: NOT
19453: PUSH
19454: LD_EXP 51
19458: PPUSH
19459: CALL_OW 302
19463: AND
19464: PUSH
19465: LD_INT 4
19467: PPUSH
19468: LD_INT 22
19470: PUSH
19471: LD_INT 3
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 50
19480: PUSH
19481: EMPTY
19482: LIST
19483: PUSH
19484: LD_INT 2
19486: PUSH
19487: LD_INT 21
19489: PUSH
19490: LD_INT 1
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 23
19499: PUSH
19500: LD_INT 3
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 21
19513: PUSH
19514: LD_INT 2
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: LIST
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: LIST
19530: PPUSH
19531: CALL_OW 70
19535: AND
19536: IFFALSE 20178
19538: GO 19540
19540: DISABLE
19541: LD_INT 0
19543: PPUSH
19544: PPUSH
19545: PPUSH
// begin savedVsevolod = true ;
19546: LD_ADDR_EXP 19
19550: PUSH
19551: LD_INT 1
19553: ST_TO_ADDR
// ChangeMissionObjectives ( MVsevolodOut ) ;
19554: LD_STRING MVsevolodOut
19556: PPUSH
19557: CALL_OW 337
// unit = FilterUnitsInArea ( TerminalBaseArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ [ f_type , unit_human ] , [ f_nation , nation_russian ] ] , [ f_type , unit_vehicle ] ] ] ) ;
19561: LD_ADDR_VAR 0 2
19565: PUSH
19566: LD_INT 4
19568: PPUSH
19569: LD_INT 22
19571: PUSH
19572: LD_INT 3
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 50
19581: PUSH
19582: EMPTY
19583: LIST
19584: PUSH
19585: LD_INT 2
19587: PUSH
19588: LD_INT 21
19590: PUSH
19591: LD_INT 1
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 23
19600: PUSH
19601: LD_INT 3
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 21
19614: PUSH
19615: LD_INT 2
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: LIST
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: LIST
19631: PPUSH
19632: CALL_OW 70
19636: ST_TO_ADDR
// unit = unit [ 1 ] ;
19637: LD_ADDR_VAR 0 2
19641: PUSH
19642: LD_VAR 0 2
19646: PUSH
19647: LD_INT 1
19649: ARRAY
19650: ST_TO_ADDR
// if GetType ( unit ) = unit_vehicle then
19651: LD_VAR 0 2
19655: PPUSH
19656: CALL_OW 247
19660: PUSH
19661: LD_INT 2
19663: EQUAL
19664: IFFALSE 19685
// unit = UnitsInside ( unit ) [ 1 ] ;
19666: LD_ADDR_VAR 0 2
19670: PUSH
19671: LD_VAR 0 2
19675: PPUSH
19676: CALL_OW 313
19680: PUSH
19681: LD_INT 1
19683: ARRAY
19684: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
19685: LD_INT 22
19687: PUSH
19688: LD_INT 6
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PPUSH
19695: CALL_OW 69
19699: PPUSH
19700: LD_INT 3
19702: PPUSH
19703: CALL_OW 235
// if not unit = Burlak then
19707: LD_VAR 0 2
19711: PUSH
19712: LD_EXP 39
19716: EQUAL
19717: NOT
19718: IFFALSE 19895
// begin vsevolodWaitGorky = true ;
19720: LD_ADDR_EXP 20
19724: PUSH
19725: LD_INT 1
19727: ST_TO_ADDR
// DialogueOn ;
19728: CALL_OW 6
// Say ( Vsevolod , DOtherMeetVsev-Vse-1 ) ;
19732: LD_EXP 51
19736: PPUSH
19737: LD_STRING DOtherMeetVsev-Vse-1
19739: PPUSH
19740: CALL_OW 88
// if GetSex ( unit ) = sex_female then
19744: LD_VAR 0 2
19748: PPUSH
19749: CALL_OW 258
19753: PUSH
19754: LD_INT 2
19756: EQUAL
19757: IFFALSE 19877
// begin maleRandomUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff vsevolodTeam ;
19759: LD_ADDR_VAR 0 3
19763: PUSH
19764: LD_INT 22
19766: PUSH
19767: LD_INT 3
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 21
19776: PUSH
19777: LD_INT 1
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 50
19786: PUSH
19787: EMPTY
19788: LIST
19789: PUSH
19790: LD_INT 26
19792: PUSH
19793: LD_INT 1
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 23
19802: PUSH
19803: LD_INT 3
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: PPUSH
19817: CALL_OW 69
19821: PUSH
19822: LD_EXP 52
19826: DIFF
19827: ST_TO_ADDR
// maleRandomUnits = maleRandomUnits diff Gleb ;
19828: LD_ADDR_VAR 0 3
19832: PUSH
19833: LD_VAR 0 3
19837: PUSH
19838: LD_EXP 42
19842: DIFF
19843: ST_TO_ADDR
// if maleRandomUnits then
19844: LD_VAR 0 3
19848: IFFALSE 19875
// DialogRandom ( maleRandomUnits [ 1 ] , DOtherMeetVsev-RSol1-1 ,  , false , true ) ;
19850: LD_VAR 0 3
19854: PUSH
19855: LD_INT 1
19857: ARRAY
19858: PPUSH
19859: LD_STRING DOtherMeetVsev-RSol1-1
19861: PPUSH
19862: LD_STRING 
19864: PPUSH
19865: LD_INT 0
19867: PPUSH
19868: LD_INT 1
19870: PPUSH
19871: CALL 12102 0 5
// end else
19875: GO 19889
// Say ( unit , DOtherMeetVsev-RSol1-1 ) ;
19877: LD_VAR 0 2
19881: PPUSH
19882: LD_STRING DOtherMeetVsev-RSol1-1
19884: PPUSH
19885: CALL_OW 88
// DialogueOff ;
19889: CALL_OW 7
// end else
19893: GO 20178
// begin DialogueOn ;
19895: CALL_OW 6
// Say ( Vsevolod , DMeetVsev-Vse-1 ) ;
19899: LD_EXP 51
19903: PPUSH
19904: LD_STRING DMeetVsev-Vse-1
19906: PPUSH
19907: CALL_OW 88
// Say ( Burlak , DMeetVsev-Bur-1 ) ;
19911: LD_EXP 39
19915: PPUSH
19916: LD_STRING DMeetVsev-Bur-1
19918: PPUSH
19919: CALL_OW 88
// if lostAgainBase then
19923: LD_EXP 17
19927: IFFALSE 19967
// begin Say ( Vsevolod , DMeetVsev2-Vse-1 ) ;
19929: LD_EXP 51
19933: PPUSH
19934: LD_STRING DMeetVsev2-Vse-1
19936: PPUSH
19937: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-1 ) ;
19941: LD_EXP 39
19945: PPUSH
19946: LD_STRING DMeetVsev2-Bur-1
19948: PPUSH
19949: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-2 ) ;
19953: LD_EXP 51
19957: PPUSH
19958: LD_STRING DMeetVsev2-Vse-2
19960: PPUSH
19961: CALL_OW 88
// end else
19965: GO 20003
// begin Say ( Vsevolod , DMeetVsev2-Vse-2a ) ;
19967: LD_EXP 51
19971: PPUSH
19972: LD_STRING DMeetVsev2-Vse-2a
19974: PPUSH
19975: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-2 ) ;
19979: LD_EXP 39
19983: PPUSH
19984: LD_STRING DMeetVsev2-Bur-2
19986: PPUSH
19987: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-3 ) ;
19991: LD_EXP 51
19995: PPUSH
19996: LD_STRING DMeetVsev2-Vse-3
19998: PPUSH
19999: CALL_OW 88
// end ; Say ( Burlak , DMeetVsev3-Bur-1 ) ;
20003: LD_EXP 39
20007: PPUSH
20008: LD_STRING DMeetVsev3-Bur-1
20010: PPUSH
20011: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-1 ) ;
20015: LD_EXP 51
20019: PPUSH
20020: LD_STRING DMeetVsev3-Vse-1
20022: PPUSH
20023: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-2 ) ;
20027: LD_EXP 39
20031: PPUSH
20032: LD_STRING DMeetVsev3-Bur-2
20034: PPUSH
20035: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-2 ) ;
20039: LD_EXP 51
20043: PPUSH
20044: LD_STRING DMeetVsev3-Vse-2
20046: PPUSH
20047: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-3 ) ;
20051: LD_EXP 39
20055: PPUSH
20056: LD_STRING DMeetVsev3-Bur-3
20058: PPUSH
20059: CALL_OW 88
// if stevensStatus = 0 then
20063: LD_EXP 4
20067: PUSH
20068: LD_INT 0
20070: EQUAL
20071: IFFALSE 20085
// Say ( Burlak , DMeetVsev4-Bur-1 ) ;
20073: LD_EXP 39
20077: PPUSH
20078: LD_STRING DMeetVsev4-Bur-1
20080: PPUSH
20081: CALL_OW 88
// Say ( Burlak , DMeetVsev5-Bur-1 ) ;
20085: LD_EXP 39
20089: PPUSH
20090: LD_STRING DMeetVsev5-Bur-1
20092: PPUSH
20093: CALL_OW 88
// Say ( Vsevolod , DMeetVsev5-Vse-1 ) ;
20097: LD_EXP 51
20101: PPUSH
20102: LD_STRING DMeetVsev5-Vse-1
20104: PPUSH
20105: CALL_OW 88
// Say ( Burlak , DMeetVsev6-Bur-1 ) ;
20109: LD_EXP 39
20113: PPUSH
20114: LD_STRING DMeetVsev6-Bur-1
20116: PPUSH
20117: CALL_OW 88
// Say ( Vsevolod , DMeetVsev6-Vse-1 ) ;
20121: LD_EXP 51
20125: PPUSH
20126: LD_STRING DMeetVsev6-Vse-1
20128: PPUSH
20129: CALL_OW 88
// DialogueOff ;
20133: CALL_OW 7
// wait ( 0 0$20 ) ;
20137: LD_INT 700
20139: PPUSH
20140: CALL_OW 67
// PrepareConvoy ;
20144: CALL 4023 0 0
// ComMoveXY ( convoyTeam , 57 , 40 ) ;
20148: LD_EXP 63
20152: PPUSH
20153: LD_INT 57
20155: PPUSH
20156: LD_INT 40
20158: PPUSH
20159: CALL_OW 111
// AddComMoveXY ( convoyTeam , 37 , 59 ) ;
20163: LD_EXP 63
20167: PPUSH
20168: LD_INT 37
20170: PPUSH
20171: LD_INT 59
20173: PPUSH
20174: CALL_OW 171
// end ; end ;
20178: PPOPN 3
20180: END
// every 0 0$1 trigger vsevolodWaitGorky and GetDistUnits ( Vsevolod , Burlak ) <= 7 do
20181: LD_EXP 20
20185: PUSH
20186: LD_EXP 51
20190: PPUSH
20191: LD_EXP 39
20195: PPUSH
20196: CALL_OW 296
20200: PUSH
20201: LD_INT 7
20203: LESSEQUAL
20204: AND
20205: IFFALSE 20501
20207: GO 20209
20209: DISABLE
// begin vsevolodWaitGorky = false ;
20210: LD_ADDR_EXP 20
20214: PUSH
20215: LD_INT 0
20217: ST_TO_ADDR
// DialogueOn ;
20218: CALL_OW 6
// Say ( Vsevolod , DMeetVsev-Vse-1 ) ;
20222: LD_EXP 51
20226: PPUSH
20227: LD_STRING DMeetVsev-Vse-1
20229: PPUSH
20230: CALL_OW 88
// Say ( Burlak , DMeetVsev-Bur-1 ) ;
20234: LD_EXP 39
20238: PPUSH
20239: LD_STRING DMeetVsev-Bur-1
20241: PPUSH
20242: CALL_OW 88
// if lostAgainBase then
20246: LD_EXP 17
20250: IFFALSE 20290
// begin Say ( Vsevolod , DMeetVsev2-Vse-1 ) ;
20252: LD_EXP 51
20256: PPUSH
20257: LD_STRING DMeetVsev2-Vse-1
20259: PPUSH
20260: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-1 ) ;
20264: LD_EXP 39
20268: PPUSH
20269: LD_STRING DMeetVsev2-Bur-1
20271: PPUSH
20272: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-2 ) ;
20276: LD_EXP 51
20280: PPUSH
20281: LD_STRING DMeetVsev2-Vse-2
20283: PPUSH
20284: CALL_OW 88
// end else
20288: GO 20326
// begin Say ( Vsevolod , DMeetVsev2-Vse-2a ) ;
20290: LD_EXP 51
20294: PPUSH
20295: LD_STRING DMeetVsev2-Vse-2a
20297: PPUSH
20298: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-2 ) ;
20302: LD_EXP 39
20306: PPUSH
20307: LD_STRING DMeetVsev2-Bur-2
20309: PPUSH
20310: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-3 ) ;
20314: LD_EXP 51
20318: PPUSH
20319: LD_STRING DMeetVsev2-Vse-3
20321: PPUSH
20322: CALL_OW 88
// end ; Say ( Burlak , DMeetVsev3-Bur-1 ) ;
20326: LD_EXP 39
20330: PPUSH
20331: LD_STRING DMeetVsev3-Bur-1
20333: PPUSH
20334: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-1 ) ;
20338: LD_EXP 51
20342: PPUSH
20343: LD_STRING DMeetVsev3-Vse-1
20345: PPUSH
20346: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-2 ) ;
20350: LD_EXP 39
20354: PPUSH
20355: LD_STRING DMeetVsev3-Bur-2
20357: PPUSH
20358: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-2 ) ;
20362: LD_EXP 51
20366: PPUSH
20367: LD_STRING DMeetVsev3-Vse-2
20369: PPUSH
20370: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-3 ) ;
20374: LD_EXP 39
20378: PPUSH
20379: LD_STRING DMeetVsev3-Bur-3
20381: PPUSH
20382: CALL_OW 88
// if stevensStatus = 0 then
20386: LD_EXP 4
20390: PUSH
20391: LD_INT 0
20393: EQUAL
20394: IFFALSE 20408
// Say ( Burlak , DMeetVsev4-Bur-1 ) ;
20396: LD_EXP 39
20400: PPUSH
20401: LD_STRING DMeetVsev4-Bur-1
20403: PPUSH
20404: CALL_OW 88
// Say ( Burlak , DMeetVsev5-Bur-1 ) ;
20408: LD_EXP 39
20412: PPUSH
20413: LD_STRING DMeetVsev5-Bur-1
20415: PPUSH
20416: CALL_OW 88
// Say ( Vsevolod , DMeetVsev5-Vse-1 ) ;
20420: LD_EXP 51
20424: PPUSH
20425: LD_STRING DMeetVsev5-Vse-1
20427: PPUSH
20428: CALL_OW 88
// Say ( Vsevolod , DMeetVsev6-Vse-1 ) ;
20432: LD_EXP 51
20436: PPUSH
20437: LD_STRING DMeetVsev6-Vse-1
20439: PPUSH
20440: CALL_OW 88
// Say ( Burlak , DMeetVsev6-Bur-1 ) ;
20444: LD_EXP 39
20448: PPUSH
20449: LD_STRING DMeetVsev6-Bur-1
20451: PPUSH
20452: CALL_OW 88
// DialogueOff ;
20456: CALL_OW 7
// wait ( 0 0$20 ) ;
20460: LD_INT 700
20462: PPUSH
20463: CALL_OW 67
// PrepareConvoy ;
20467: CALL 4023 0 0
// ComMoveXY ( convoyTeam , 57 , 40 ) ;
20471: LD_EXP 63
20475: PPUSH
20476: LD_INT 57
20478: PPUSH
20479: LD_INT 40
20481: PPUSH
20482: CALL_OW 111
// AddComMoveXY ( convoyTeam , 37 , 59 ) ;
20486: LD_EXP 63
20490: PPUSH
20491: LD_INT 37
20493: PPUSH
20494: LD_INT 59
20496: PPUSH
20497: CALL_OW 171
// end ;
20501: END
// every 0 0$1 trigger not dial_ConvoyDialogBlocker do var tmp , speaker , unit ;
20502: LD_EXP 12
20506: NOT
20507: IFFALSE 20637
20509: GO 20511
20511: DISABLE
20512: LD_INT 0
20514: PPUSH
20515: PPUSH
20516: PPUSH
// begin enable ;
20517: ENABLE
// for unit in convoyTeam do
20518: LD_ADDR_VAR 0 3
20522: PUSH
20523: LD_EXP 63
20527: PUSH
20528: FOR_IN
20529: IFFALSE 20635
// if See ( 3 , unit ) and not IsInArea ( unit , InsideBaseArea ) then
20531: LD_INT 3
20533: PPUSH
20534: LD_VAR 0 3
20538: PPUSH
20539: CALL_OW 292
20543: PUSH
20544: LD_VAR 0 3
20548: PPUSH
20549: LD_INT 19
20551: PPUSH
20552: CALL_OW 308
20556: NOT
20557: AND
20558: IFFALSE 20633
// begin dial_ConvoyDialogBlocker = true ;
20560: LD_ADDR_EXP 12
20564: PUSH
20565: LD_INT 1
20567: ST_TO_ADDR
// DialogueOn ;
20568: CALL_OW 6
// speaker = UnitFilter ( convoyTeam , [ f_type , unit_human ] ) [ 1 ] ;
20572: LD_ADDR_VAR 0 2
20576: PUSH
20577: LD_EXP 63
20581: PPUSH
20582: LD_INT 21
20584: PUSH
20585: LD_INT 1
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PPUSH
20592: CALL_OW 72
20596: PUSH
20597: LD_INT 1
20599: ARRAY
20600: ST_TO_ADDR
// Say ( speaker , DTruck-Sol1-1 ) ;
20601: LD_VAR 0 2
20605: PPUSH
20606: LD_STRING DTruck-Sol1-1
20608: PPUSH
20609: CALL_OW 88
// Say ( Burlak , DTruck-Bur-1 ) ;
20613: LD_EXP 39
20617: PPUSH
20618: LD_STRING DTruck-Bur-1
20620: PPUSH
20621: CALL_OW 88
// DialogueOff ;
20625: CALL_OW 7
// exit ;
20629: POP
20630: POP
20631: GO 20637
// end ;
20633: GO 20528
20635: POP
20636: POP
// end ;
20637: PPOPN 3
20639: END
// every 0 0$1 trigger timeToAttack >= vsevolodSaveTime do
20640: LD_EXP 26
20644: PUSH
20645: LD_EXP 38
20649: GREATEREQUAL
20650: IFFALSE 20689
20652: GO 20654
20654: DISABLE
// begin PrepareAttack ;
20655: CALL 4204 0 0
// ComAgressiveMove ( attackTeam , 60 , 41 ) ;
20659: LD_EXP 64
20663: PPUSH
20664: LD_INT 60
20666: PPUSH
20667: LD_INT 41
20669: PPUSH
20670: CALL_OW 114
// AddComAgressiveMove ( attackTeam , 107 , 125 ) ;
20674: LD_EXP 64
20678: PPUSH
20679: LD_INT 107
20681: PPUSH
20682: LD_INT 125
20684: PPUSH
20685: CALL_OW 174
// end ;
20689: END
// every 1 trigger not savedVsevolod and GetLives ( Vsevolod ) <= 500 do
20690: LD_EXP 19
20694: NOT
20695: PUSH
20696: LD_EXP 51
20700: PPUSH
20701: CALL_OW 256
20705: PUSH
20706: LD_INT 500
20708: LESSEQUAL
20709: AND
20710: IFFALSE 20735
20712: GO 20714
20714: DISABLE
// begin DialogueOn ;
20715: CALL_OW 6
// SayRadio ( Vsevolod , DDieVsev2-Vse-1 ) ;
20719: LD_EXP 51
20723: PPUSH
20724: LD_STRING DDieVsev2-Vse-1
20726: PPUSH
20727: CALL_OW 94
// DialogueOff ;
20731: CALL_OW 7
// end ;
20735: END
// export function Dial_ResearchTauField ; var speaker , sci , randomTalkDialog ; begin
20736: LD_INT 0
20738: PPUSH
20739: PPUSH
20740: PPUSH
20741: PPUSH
// DialogueOn ;
20742: CALL_OW 6
// if IsOK ( Petrosyan ) then
20746: LD_EXP 43
20750: PPUSH
20751: CALL_OW 302
20755: IFFALSE 20771
// Say ( Petrosyan , DStasis-Pty-1 ) else
20757: LD_EXP 43
20761: PPUSH
20762: LD_STRING DStasis-Pty-1
20764: PPUSH
20765: CALL_OW 88
20769: GO 20993
// if IsOK ( Dolgov ) then
20771: LD_EXP 45
20775: PPUSH
20776: CALL_OW 302
20780: IFFALSE 20796
// Say ( Dolgov , DStasis-Dol-1 ) else
20782: LD_EXP 45
20786: PPUSH
20787: LD_STRING DStasis-Dol-1
20789: PPUSH
20790: CALL_OW 88
20794: GO 20993
// begin sci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] , [ f_nation , nation_russian ] ] ) diff Burlak ;
20796: LD_ADDR_VAR 0 3
20800: PUSH
20801: LD_INT 22
20803: PUSH
20804: LD_INT 3
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 21
20813: PUSH
20814: LD_INT 1
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 50
20823: PUSH
20824: EMPTY
20825: LIST
20826: PUSH
20827: LD_INT 26
20829: PUSH
20830: LD_INT 1
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 25
20839: PUSH
20840: LD_INT 4
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 23
20849: PUSH
20850: LD_INT 3
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: PPUSH
20865: CALL_OW 69
20869: PUSH
20870: LD_EXP 39
20874: DIFF
20875: ST_TO_ADDR
// if not sci then
20876: LD_VAR 0 3
20880: NOT
20881: IFFALSE 20952
// sci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Burlak ;
20883: LD_ADDR_VAR 0 3
20887: PUSH
20888: LD_INT 22
20890: PUSH
20891: LD_INT 3
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 21
20900: PUSH
20901: LD_INT 1
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 50
20910: PUSH
20911: EMPTY
20912: LIST
20913: PUSH
20914: LD_INT 26
20916: PUSH
20917: LD_INT 1
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 23
20926: PUSH
20927: LD_INT 3
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: PPUSH
20941: CALL_OW 69
20945: PUSH
20946: LD_EXP 39
20950: DIFF
20951: ST_TO_ADDR
// if sci then
20952: LD_VAR 0 3
20956: IFFALSE 20993
// begin speaker = DialogRandom ( sci , DStasis-RSol1-1 ,  , false , true ) ;
20958: LD_ADDR_VAR 0 2
20962: PUSH
20963: LD_VAR 0 3
20967: PPUSH
20968: LD_STRING DStasis-RSol1-1
20970: PPUSH
20971: LD_STRING 
20973: PPUSH
20974: LD_INT 0
20976: PPUSH
20977: LD_INT 1
20979: PPUSH
20980: CALL 12102 0 5
20984: ST_TO_ADDR
// randomTalkDialog = true ;
20985: LD_ADDR_VAR 0 4
20989: PUSH
20990: LD_INT 1
20992: ST_TO_ADDR
// end ; end ; if IsOK ( Petrosyan ) or IsOK ( Dolgov ) or randomTalkDialog then
20993: LD_EXP 43
20997: PPUSH
20998: CALL_OW 302
21002: PUSH
21003: LD_EXP 45
21007: PPUSH
21008: CALL_OW 302
21012: OR
21013: PUSH
21014: LD_VAR 0 4
21018: OR
21019: IFFALSE 21116
// begin Say ( Burlak , DStasis-Bur-1 ) ;
21021: LD_EXP 39
21025: PPUSH
21026: LD_STRING DStasis-Bur-1
21028: PPUSH
21029: CALL_OW 88
// if IsOK ( Petrosyan ) then
21033: LD_EXP 43
21037: PPUSH
21038: CALL_OW 302
21042: IFFALSE 21058
// Say ( Petrosyan , DStasis-Pty-2 ) else
21044: LD_EXP 43
21048: PPUSH
21049: LD_STRING DStasis-Pty-2
21051: PPUSH
21052: CALL_OW 88
21056: GO 21104
// if IsOK ( Dolgov ) then
21058: LD_EXP 45
21062: PPUSH
21063: CALL_OW 302
21067: IFFALSE 21083
// Say ( Dolgov , DStasis-Dol-2 ) else
21069: LD_EXP 45
21073: PPUSH
21074: LD_STRING DStasis-Dol-2
21076: PPUSH
21077: CALL_OW 88
21081: GO 21104
// DialogRandom ( speaker , DStasis-RSol1-2 ,  , false , true ) ;
21083: LD_VAR 0 2
21087: PPUSH
21088: LD_STRING DStasis-RSol1-2
21090: PPUSH
21091: LD_STRING 
21093: PPUSH
21094: LD_INT 0
21096: PPUSH
21097: LD_INT 1
21099: PPUSH
21100: CALL 12102 0 5
// Say ( Burlak , DStasis-Bur-2 ) ;
21104: LD_EXP 39
21108: PPUSH
21109: LD_STRING DStasis-Bur-2
21111: PPUSH
21112: CALL_OW 88
// end ; DialogueOff ;
21116: CALL_OW 7
// if GetTech ( tech_SibEng , 3 ) = state_researched then
21120: LD_INT 22
21122: PPUSH
21123: LD_INT 3
21125: PPUSH
21126: CALL_OW 321
21130: PUSH
21131: LD_INT 2
21133: EQUAL
21134: IFFALSE 21143
// ChangeMissionObjectives ( MOutResearch ) ;
21136: LD_STRING MOutResearch
21138: PPUSH
21139: CALL_OW 337
// end ;
21143: LD_VAR 0 1
21147: RET
// every 0 0$01 trigger GetTech ( tech_SibEng , 3 ) = state_researched and GetTech ( tech_TauField , 3 ) = state_researched and not dial_EndMissionDialogBlocker do var depots , depot , sibCounter ;
21148: LD_INT 22
21150: PPUSH
21151: LD_INT 3
21153: PPUSH
21154: CALL_OW 321
21158: PUSH
21159: LD_INT 2
21161: EQUAL
21162: PUSH
21163: LD_INT 30
21165: PPUSH
21166: LD_INT 3
21168: PPUSH
21169: CALL_OW 321
21173: PUSH
21174: LD_INT 2
21176: EQUAL
21177: AND
21178: PUSH
21179: LD_EXP 14
21183: NOT
21184: AND
21185: IFFALSE 21528
21187: GO 21189
21189: DISABLE
21190: LD_INT 0
21192: PPUSH
21193: PPUSH
21194: PPUSH
// begin wait ( 0 0$15 ) ;
21195: LD_INT 525
21197: PPUSH
21198: CALL_OW 67
// depots = FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21202: LD_ADDR_VAR 0 1
21206: PUSH
21207: LD_INT 22
21209: PUSH
21210: LD_INT 3
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 50
21219: PUSH
21220: EMPTY
21221: LIST
21222: PUSH
21223: LD_INT 21
21225: PUSH
21226: LD_INT 3
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 2
21235: PUSH
21236: LD_INT 30
21238: PUSH
21239: LD_INT 0
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 30
21248: PUSH
21249: LD_INT 1
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: LIST
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: PPUSH
21267: CALL_OW 69
21271: ST_TO_ADDR
// sibCounter = 0 ;
21272: LD_ADDR_VAR 0 3
21276: PUSH
21277: LD_INT 0
21279: ST_TO_ADDR
// for depot in depots do
21280: LD_ADDR_VAR 0 2
21284: PUSH
21285: LD_VAR 0 1
21289: PUSH
21290: FOR_IN
21291: IFFALSE 21324
// sibCounter = sibCounter + GetResourceType ( GetBase ( depot ) , mat_siberit ) ;
21293: LD_ADDR_VAR 0 3
21297: PUSH
21298: LD_VAR 0 3
21302: PUSH
21303: LD_VAR 0 2
21307: PPUSH
21308: CALL_OW 274
21312: PPUSH
21313: LD_INT 3
21315: PPUSH
21316: CALL_OW 275
21320: PLUS
21321: ST_TO_ADDR
21322: GO 21290
21324: POP
21325: POP
// if sibCounter >= 100 then
21326: LD_VAR 0 3
21330: PUSH
21331: LD_INT 100
21333: GREATEREQUAL
21334: IFFALSE 21520
// begin ChangeMissionObjectives ( MOutMine ) ;
21336: LD_STRING MOutMine
21338: PPUSH
21339: CALL_OW 337
// dial_EndMissionDialogBlocker = true ;
21343: LD_ADDR_EXP 14
21347: PUSH
21348: LD_INT 1
21350: ST_TO_ADDR
// DialogueOn ;
21351: CALL_OW 6
// SayRadio ( Platonov , DNextMiss1-Pla-1 ) ;
21355: LD_EXP 47
21359: PPUSH
21360: LD_STRING DNextMiss1-Pla-1
21362: PPUSH
21363: CALL_OW 94
// if not savedVsevolod then
21367: LD_EXP 19
21371: NOT
21372: IFFALSE 21418
// begin SayRadio ( Platonov , DNextMiss2-Pla-1 ) ;
21374: LD_EXP 47
21378: PPUSH
21379: LD_STRING DNextMiss2-Pla-1
21381: PPUSH
21382: CALL_OW 94
// Say ( Burlak , DNextMiss4-Bur-1 ) ;
21386: LD_EXP 39
21390: PPUSH
21391: LD_STRING DNextMiss4-Bur-1
21393: PPUSH
21394: CALL_OW 88
// SayRadio ( Vsevolod , DDieVsev1-Vse-1 ) ;
21398: LD_EXP 51
21402: PPUSH
21403: LD_STRING DDieVsev1-Vse-1
21405: PPUSH
21406: CALL_OW 94
// ForceFinishGame ;
21410: CALL 22201 0 0
// exit ;
21414: GO 21528
// end else
21416: GO 21454
// begin SayRadio ( Platonov , DNextMiss3-Pla-1 ) ;
21418: LD_EXP 47
21422: PPUSH
21423: LD_STRING DNextMiss3-Pla-1
21425: PPUSH
21426: CALL_OW 94
// SayRadio ( Platonov , DNextMiss4-Pla-1 ) ;
21430: LD_EXP 47
21434: PPUSH
21435: LD_STRING DNextMiss4-Pla-1
21437: PPUSH
21438: CALL_OW 94
// Say ( Burlak , DNextMiss4-Bur-1 ) ;
21442: LD_EXP 39
21446: PPUSH
21447: LD_STRING DNextMiss4-Bur-1
21449: PPUSH
21450: CALL_OW 88
// end ; DialogueOff ;
21454: CALL_OW 7
// SelectCharacters ;
21458: CALL 15376 0 0
// canSpawnReinforces = true ;
21462: LD_ADDR_EXP 23
21466: PUSH
21467: LD_INT 1
21469: ST_TO_ADDR
// canRemoveUnits = true ;
21470: LD_ADDR_EXP 25
21474: PUSH
21475: LD_INT 1
21477: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_friend , true ) ;
21478: LD_INT 1
21480: PPUSH
21481: LD_INT 6
21483: PPUSH
21484: LD_INT 1
21486: PPUSH
21487: LD_INT 1
21489: PPUSH
21490: CALL_OW 80
// SetAreaMapShow ( ExitMapArea , 1 ) ;
21494: LD_INT 14
21496: PPUSH
21497: LD_INT 1
21499: PPUSH
21500: CALL_OW 424
// ChangeMissionObjectives ( MOutResearch ) ;
21504: LD_STRING MOutResearch
21506: PPUSH
21507: CALL_OW 337
// ChangeMissionObjectives ( MCars ) ;
21511: LD_STRING MCars
21513: PPUSH
21514: CALL_OW 337
// exit ;
21518: GO 21528
// end ; wait ( 0 0$10 ) ;
21520: LD_INT 350
21522: PPUSH
21523: CALL_OW 67
// enable ;
21527: ENABLE
// end ;
21528: PPOPN 3
21530: END
// every 0 0$1 trigger canRemoveUnits do var un ;
21531: LD_EXP 25
21535: IFFALSE 21645
21537: GO 21539
21539: DISABLE
21540: LD_INT 0
21542: PPUSH
// begin enable ;
21543: ENABLE
// SetLives ( Vsevolod , 1000 ) ;
21544: LD_EXP 51
21548: PPUSH
21549: LD_INT 1000
21551: PPUSH
21552: CALL_OW 234
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , ExitMapArea ) ;
21556: LD_INT 22
21558: PUSH
21559: LD_INT 6
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 21
21568: PUSH
21569: LD_INT 1
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PPUSH
21580: CALL_OW 69
21584: PPUSH
21585: LD_INT 14
21587: PPUSH
21588: CALL_OW 113
// for un in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
21592: LD_ADDR_VAR 0 1
21596: PUSH
21597: LD_INT 14
21599: PPUSH
21600: LD_INT 22
21602: PUSH
21603: LD_INT 6
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 21
21612: PUSH
21613: LD_INT 1
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PPUSH
21624: CALL_OW 70
21628: PUSH
21629: FOR_IN
21630: IFFALSE 21643
// RemoveUnit ( un ) ;
21632: LD_VAR 0 1
21636: PPUSH
21637: CALL_OW 64
21641: GO 21629
21643: POP
21644: POP
// end ;
21645: PPOPN 1
21647: END
// every 1 trigger not canGoNorth and FilterUnitsInArea ( NorthBlockerArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do var unit ;
21648: LD_EXP 21
21652: NOT
21653: PUSH
21654: LD_INT 15
21656: PPUSH
21657: LD_INT 22
21659: PUSH
21660: LD_INT 3
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: LD_INT 50
21669: PUSH
21670: EMPTY
21671: LIST
21672: PUSH
21673: LD_INT 2
21675: PUSH
21676: LD_INT 21
21678: PUSH
21679: LD_INT 1
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 21
21688: PUSH
21689: LD_INT 2
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: LIST
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: LIST
21705: PPUSH
21706: CALL_OW 70
21710: AND
21711: IFFALSE 21843
21713: GO 21715
21715: DISABLE
21716: LD_INT 0
21718: PPUSH
// begin enable ;
21719: ENABLE
// for unit in FilterUnitsInArea ( NorthBlockerArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
21720: LD_ADDR_VAR 0 1
21724: PUSH
21725: LD_INT 15
21727: PPUSH
21728: LD_INT 22
21730: PUSH
21731: LD_INT 3
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: LD_INT 50
21740: PUSH
21741: EMPTY
21742: LIST
21743: PUSH
21744: LD_INT 2
21746: PUSH
21747: LD_INT 21
21749: PUSH
21750: LD_INT 1
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 21
21759: PUSH
21760: LD_INT 2
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: LIST
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: LIST
21776: PPUSH
21777: CALL_OW 70
21781: PUSH
21782: FOR_IN
21783: IFFALSE 21799
// ComMoveToArea ( unit , NorthBlockerReturnArea ) ;
21785: LD_VAR 0 1
21789: PPUSH
21790: LD_INT 16
21792: PPUSH
21793: CALL_OW 113
21797: GO 21782
21799: POP
21800: POP
// if not dial_NorthBlocker then
21801: LD_EXP 13
21805: NOT
21806: IFFALSE 21843
// begin dial_NorthBlocker = true ;
21808: LD_ADDR_EXP 13
21812: PUSH
21813: LD_INT 1
21815: ST_TO_ADDR
// Say ( Burlak , DMoveNorth-Bur-1 ) ;
21816: LD_EXP 39
21820: PPUSH
21821: LD_STRING DMoveNorth-Bur-1
21823: PPUSH
21824: CALL_OW 88
// wait ( 0 0$5 ) ;
21828: LD_INT 175
21830: PPUSH
21831: CALL_OW 67
// dial_NorthBlocker = false ;
21835: LD_ADDR_EXP 13
21839: PUSH
21840: LD_INT 0
21842: ST_TO_ADDR
// end ; end ;
21843: PPOPN 1
21845: END
// every 2 2$30 trigger canSpawnReinforces do
21846: LD_EXP 23
21850: IFFALSE 21906
21852: GO 21854
21854: DISABLE
// begin SpawnPlatonovReinforces ;
21855: CALL 2897 0 0
// CenterOnXY ( 134 , 233 ) ;
21859: LD_INT 134
21861: PPUSH
21862: LD_INT 233
21864: PPUSH
21865: CALL_OW 84
// if Kirilenkova and IsPlaced ( Kirilenkova ) then
21869: LD_EXP 48
21873: PUSH
21874: LD_EXP 48
21878: PPUSH
21879: CALL_OW 305
21883: AND
21884: IFFALSE 21898
// Say ( Kirilenkova , DMeetKirilenkova-Kir-1 ) ;
21886: LD_EXP 48
21890: PPUSH
21891: LD_STRING DMeetKirilenkova-Kir-1
21893: PPUSH
21894: CALL_OW 88
// canEndMission = true ;
21898: LD_ADDR_EXP 24
21902: PUSH
21903: LD_INT 1
21905: ST_TO_ADDR
// end ; end_of_file
21906: END
// export function Lose_Burlak ; begin
21907: LD_INT 0
21909: PPUSH
// YouLost ( Burlak ) ;
21910: LD_STRING Burlak
21912: PPUSH
21913: CALL_OW 104
// end ;
21917: LD_VAR 0 1
21921: RET
// export function Lose_Gleb ; begin
21922: LD_INT 0
21924: PPUSH
// SayRadio ( Platonov , DKillGleb-Pla-1 ) ;
21925: LD_EXP 47
21929: PPUSH
21930: LD_STRING DKillGleb-Pla-1
21932: PPUSH
21933: CALL_OW 94
// YouLost ( Gleb ) ;
21937: LD_STRING Gleb
21939: PPUSH
21940: CALL_OW 104
// end ;
21944: LD_VAR 0 1
21948: RET
// every 0 0$1 trigger not canEndMission and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_engineer ] , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
21949: LD_EXP 24
21953: NOT
21954: PUSH
21955: LD_INT 22
21957: PUSH
21958: LD_INT 3
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 2
21967: PUSH
21968: LD_INT 25
21970: PUSH
21971: LD_INT 2
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 30
21980: PUSH
21981: LD_INT 1
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 30
21990: PUSH
21991: LD_INT 0
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 30
22000: PUSH
22001: LD_INT 6
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 30
22010: PUSH
22011: LD_INT 7
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 30
22020: PUSH
22021: LD_INT 8
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PPUSH
22041: CALL_OW 69
22045: NOT
22046: AND
22047: IFFALSE 22059
22049: GO 22051
22051: DISABLE
// YouLost ( NoDepotNoEngineerNoLab ) ;
22052: LD_STRING NoDepotNoEngineerNoLab
22054: PPUSH
22055: CALL_OW 104
22059: END
// export function Lose_NoDepotNoEngineerNoLab ; begin
22060: LD_INT 0
22062: PPUSH
// YouLost ( NoDepotNoEngineerNoLab ) ;
22063: LD_STRING NoDepotNoEngineerNoLab
22065: PPUSH
22066: CALL_OW 104
// end ; end_of_file
22070: LD_VAR 0 1
22074: RET
// every 0 0$5 trigger canEndMission and not FilterUnitsExceptArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_and , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ] ) do var units , qr ;
22075: LD_EXP 24
22079: PUSH
22080: LD_INT 14
22082: PPUSH
22083: LD_INT 22
22085: PUSH
22086: LD_INT 3
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 50
22095: PUSH
22096: EMPTY
22097: LIST
22098: PUSH
22099: LD_INT 2
22101: PUSH
22102: LD_INT 21
22104: PUSH
22105: LD_INT 1
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 1
22114: PUSH
22115: LD_INT 21
22117: PUSH
22118: LD_INT 2
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 59
22127: PUSH
22128: EMPTY
22129: LIST
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: LIST
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: LIST
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: LIST
22145: PPUSH
22146: CALL_OW 71
22150: NOT
22151: AND
22152: IFFALSE 22198
22154: GO 22156
22156: DISABLE
22157: LD_INT 0
22159: PPUSH
22160: PPUSH
// begin case Query ( QEndGame ) of 1 :
22161: LD_STRING QEndGame
22163: PPUSH
22164: CALL_OW 97
22168: PUSH
22169: LD_INT 1
22171: DOUBLE
22172: EQUAL
22173: IFTRUE 22177
22175: GO 22196
22177: POP
// begin SetRewards ;
22178: CALL 22225 0 0
// SavePlayerCharacters ;
22182: CALL 22389 0 0
// SaveGlobalVariables ;
22186: CALL 22778 0 0
// YouWin ;
22190: CALL_OW 103
// end ; end ;
22194: GO 22197
22196: POP
// enable ;
22197: ENABLE
// end ;
22198: PPOPN 2
22200: END
// export function ForceFinishGame ; begin
22201: LD_INT 0
22203: PPUSH
// SetRewards ;
22204: CALL 22225 0 0
// SavePlayerCharacters ;
22208: CALL 22389 0 0
// SaveGlobalVariables ;
22212: CALL 22778 0 0
// YouWin ;
22216: CALL_OW 103
// end ;
22220: LD_VAR 0 1
22224: RET
// function SetRewards ; begin
22225: LD_INT 0
22227: PPUSH
// if savedVsevolod then
22228: LD_EXP 19
22232: IFFALSE 22246
// AddMedal ( Vsevolod , 1 ) else
22234: LD_STRING Vsevolod
22236: PPUSH
22237: LD_INT 1
22239: PPUSH
22240: CALL_OW 101
22244: GO 22257
// AddMedal ( Vsevolod , - 1 ) ;
22246: LD_STRING Vsevolod
22248: PPUSH
22249: LD_INT 1
22251: NEG
22252: PPUSH
22253: CALL_OW 101
// if not lostAgainBase then
22257: LD_EXP 17
22261: NOT
22262: IFFALSE 22276
// AddMedal ( Ovsyenko , 1 ) else
22264: LD_STRING Ovsyenko
22266: PPUSH
22267: LD_INT 1
22269: PPUSH
22270: CALL_OW 101
22274: GO 22287
// AddMedal ( Ovsyenko , - 1 ) ;
22276: LD_STRING Ovsyenko
22278: PPUSH
22279: LD_INT 1
22281: NEG
22282: PPUSH
22283: CALL_OW 101
// if GetTech ( tech_MatPred , 3 ) = state_researched then
22287: LD_INT 9
22289: PPUSH
22290: LD_INT 3
22292: PPUSH
22293: CALL_OW 321
22297: PUSH
22298: LD_INT 2
22300: EQUAL
22301: IFFALSE 22315
// AddMedal ( Prediction , 1 ) else
22303: LD_STRING Prediction
22305: PPUSH
22306: LD_INT 1
22308: PPUSH
22309: CALL_OW 101
22313: GO 22326
// AddMedal ( Prediction , - 1 ) ;
22315: LD_STRING Prediction
22317: PPUSH
22318: LD_INT 1
22320: NEG
22321: PPUSH
22322: CALL_OW 101
// GiveMedals ( Main ) ;
22326: LD_STRING Main
22328: PPUSH
22329: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ) ;
22333: LD_INT 22
22335: PUSH
22336: LD_INT 3
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 21
22345: PUSH
22346: LD_INT 1
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: LD_INT 23
22355: PUSH
22356: LD_INT 3
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 50
22365: PUSH
22366: EMPTY
22367: LIST
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: PPUSH
22375: CALL_OW 69
22379: PPUSH
22380: CALL_OW 43
// end ;
22384: LD_VAR 0 1
22388: RET
// function SavePlayerCharacters ; var randomsToSave ; begin
22389: LD_INT 0
22391: PPUSH
22392: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
22393: LD_EXP 39
22397: PPUSH
22398: LD_STRING Burlak
22400: PPUSH
22401: LD_INT 3
22403: PPUSH
22404: CALL 11903 0 3
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
22408: LD_EXP 40
22412: PPUSH
22413: LD_STRING Karamazov
22415: PPUSH
22416: LD_INT 3
22418: PPUSH
22419: CALL 11903 0 3
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
22423: LD_EXP 41
22427: PPUSH
22428: LD_STRING Petrovova
22430: PPUSH
22431: LD_INT 3
22433: PPUSH
22434: CALL 11903 0 3
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
22438: LD_EXP 42
22442: PPUSH
22443: LD_STRING Gleb
22445: PPUSH
22446: LD_INT 3
22448: PPUSH
22449: CALL 11903 0 3
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
22453: LD_EXP 43
22457: PPUSH
22458: LD_STRING Petrosyan
22460: PPUSH
22461: LD_INT 3
22463: PPUSH
22464: CALL 11903 0 3
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
22468: LD_EXP 45
22472: PPUSH
22473: LD_STRING Dolgov
22475: PPUSH
22476: LD_INT 3
22478: PPUSH
22479: CALL 11903 0 3
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
22483: LD_EXP 46
22487: PPUSH
22488: LD_STRING Lipshchin
22490: PPUSH
22491: LD_INT 3
22493: PPUSH
22494: CALL 11903 0 3
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
22498: LD_EXP 44
22502: PPUSH
22503: LD_STRING Titov
22505: PPUSH
22506: LD_INT 3
22508: PPUSH
22509: CALL 11903 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
22513: LD_EXP 48
22517: PPUSH
22518: LD_STRING Kirilenkova
22520: PPUSH
22521: LD_INT 3
22523: PPUSH
22524: CALL 11903 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
22528: LD_EXP 49
22532: PPUSH
22533: LD_STRING Belkov
22535: PPUSH
22536: LD_INT 3
22538: PPUSH
22539: CALL 11903 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
22543: LD_EXP 50
22547: PPUSH
22548: LD_STRING Belkov2
22550: PPUSH
22551: LD_INT 3
22553: PPUSH
22554: CALL 11903 0 3
// ExtSaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
22558: LD_INT 22
22560: PUSH
22561: LD_INT 3
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 21
22570: PUSH
22571: LD_INT 1
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 2
22580: PUSH
22581: LD_INT 25
22583: PUSH
22584: LD_INT 12
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 25
22593: PUSH
22594: LD_INT 16
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 25
22603: PUSH
22604: LD_INT 15
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: LIST
22621: PPUSH
22622: CALL_OW 69
22626: PPUSH
22627: LD_STRING other_apemans
22629: PPUSH
22630: LD_INT 3
22632: PPUSH
22633: CALL 11959 0 3
// randomsToSave = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 ] ;
22637: LD_ADDR_VAR 0 2
22641: PUSH
22642: LD_INT 22
22644: PUSH
22645: LD_INT 3
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 21
22654: PUSH
22655: LD_INT 1
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 23
22664: PUSH
22665: LD_INT 3
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 50
22674: PUSH
22675: EMPTY
22676: LIST
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: PPUSH
22684: CALL_OW 69
22688: PUSH
22689: LD_EXP 39
22693: PUSH
22694: LD_EXP 40
22698: PUSH
22699: LD_EXP 41
22703: PUSH
22704: LD_EXP 42
22708: PUSH
22709: LD_EXP 43
22713: PUSH
22714: LD_EXP 44
22718: PUSH
22719: LD_EXP 45
22723: PUSH
22724: LD_EXP 46
22728: PUSH
22729: LD_EXP 48
22733: PUSH
22734: LD_EXP 49
22738: PUSH
22739: LD_EXP 50
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: DIFF
22757: ST_TO_ADDR
// ExtSaveCharacters ( randomsToSave , other_survivors , 3 ) ;
22758: LD_VAR 0 2
22762: PPUSH
22763: LD_STRING other_survivors
22765: PPUSH
22766: LD_INT 3
22768: PPUSH
22769: CALL 11959 0 3
// end ;
22773: LD_VAR 0 1
22777: RET
// function SaveGlobalVariables ; var i , driver , driverShortName ; begin
22778: LD_INT 0
22780: PPUSH
22781: PPUSH
22782: PPUSH
22783: PPUSH
// resourcesFrom06 = [ ] ;
22784: LD_ADDR_EXP 8
22788: PUSH
22789: EMPTY
22790: ST_TO_ADDR
// SaveVariable ( techMatPredStatus , 06_TechMatPredStatus_1 ) ;
22791: LD_EXP 6
22795: PPUSH
22796: LD_STRING 06_TechMatPredStatus_1
22798: PPUSH
22799: CALL_OW 39
// for i in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_occupied ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , 89 ] ] ] ) do
22803: LD_ADDR_VAR 0 2
22807: PUSH
22808: LD_INT 14
22810: PPUSH
22811: LD_INT 22
22813: PUSH
22814: LD_INT 3
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 59
22823: PUSH
22824: EMPTY
22825: LIST
22826: PUSH
22827: LD_INT 2
22829: PUSH
22830: LD_INT 34
22832: PUSH
22833: LD_INT 51
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 34
22842: PUSH
22843: LD_INT 32
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 34
22852: PUSH
22853: LD_INT 12
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 34
22862: PUSH
22863: LD_INT 89
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: LIST
22881: PPUSH
22882: CALL_OW 70
22886: PUSH
22887: FOR_IN
22888: IFFALSE 22916
// resourcesFrom06 = resourcesFrom06 ^ [ GetMultiCargo ( i ) ] ;
22890: LD_ADDR_EXP 8
22894: PUSH
22895: LD_EXP 8
22899: PUSH
22900: LD_VAR 0 2
22904: PPUSH
22905: CALL 15029 0 1
22909: PUSH
22910: EMPTY
22911: LIST
22912: ADD
22913: ST_TO_ADDR
22914: GO 22887
22916: POP
22917: POP
// SaveVariable ( resourcesFrom06 , 06_ResourcesInCargo_3 ) ;
22918: LD_EXP 8
22922: PPUSH
22923: LD_STRING 06_ResourcesInCargo_3
22925: PPUSH
22926: CALL_OW 39
// for i in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ) do
22930: LD_ADDR_VAR 0 2
22934: PUSH
22935: LD_INT 14
22937: PPUSH
22938: LD_INT 22
22940: PUSH
22941: LD_INT 3
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 21
22950: PUSH
22951: LD_INT 2
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 59
22960: PUSH
22961: EMPTY
22962: LIST
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: LIST
22968: PPUSH
22969: CALL_OW 70
22973: PUSH
22974: FOR_IN
22975: IFFALSE 23379
// begin driver = UnitsInside ( i ) [ 1 ] ;
22977: LD_ADDR_VAR 0 3
22981: PUSH
22982: LD_VAR 0 2
22986: PPUSH
22987: CALL_OW 313
22991: PUSH
22992: LD_INT 1
22994: ARRAY
22995: ST_TO_ADDR
// if driver = Burlak then
22996: LD_VAR 0 3
23000: PUSH
23001: LD_EXP 39
23005: EQUAL
23006: IFFALSE 23016
// driverShortName = Bur ;
23008: LD_ADDR_VAR 0 4
23012: PUSH
23013: LD_STRING Bur
23015: ST_TO_ADDR
// if driver = Karamazov then
23016: LD_VAR 0 3
23020: PUSH
23021: LD_EXP 40
23025: EQUAL
23026: IFFALSE 23036
// driverShortName = Kar ;
23028: LD_ADDR_VAR 0 4
23032: PUSH
23033: LD_STRING Kar
23035: ST_TO_ADDR
// if driver = Petrovova then
23036: LD_VAR 0 3
23040: PUSH
23041: LD_EXP 41
23045: EQUAL
23046: IFFALSE 23056
// driverShortName = Ptr ;
23048: LD_ADDR_VAR 0 4
23052: PUSH
23053: LD_STRING Ptr
23055: ST_TO_ADDR
// if driver = Gleb then
23056: LD_VAR 0 3
23060: PUSH
23061: LD_EXP 42
23065: EQUAL
23066: IFFALSE 23076
// driverShortName = Glb ;
23068: LD_ADDR_VAR 0 4
23072: PUSH
23073: LD_STRING Glb
23075: ST_TO_ADDR
// if driver = Petrosyan then
23076: LD_VAR 0 3
23080: PUSH
23081: LD_EXP 43
23085: EQUAL
23086: IFFALSE 23096
// driverShortName = Pet ;
23088: LD_ADDR_VAR 0 4
23092: PUSH
23093: LD_STRING Pet
23095: ST_TO_ADDR
// if driver = Dolgov then
23096: LD_VAR 0 3
23100: PUSH
23101: LD_EXP 45
23105: EQUAL
23106: IFFALSE 23116
// driverShortName = Dol ;
23108: LD_ADDR_VAR 0 4
23112: PUSH
23113: LD_STRING Dol
23115: ST_TO_ADDR
// if driver = Lipshchin then
23116: LD_VAR 0 3
23120: PUSH
23121: LD_EXP 46
23125: EQUAL
23126: IFFALSE 23136
// driverShortName = Lip ;
23128: LD_ADDR_VAR 0 4
23132: PUSH
23133: LD_STRING Lip
23135: ST_TO_ADDR
// if driver = Titov then
23136: LD_VAR 0 3
23140: PUSH
23141: LD_EXP 44
23145: EQUAL
23146: IFFALSE 23156
// driverShortName = Tit ;
23148: LD_ADDR_VAR 0 4
23152: PUSH
23153: LD_STRING Tit
23155: ST_TO_ADDR
// if driver = Kirilenkova then
23156: LD_VAR 0 3
23160: PUSH
23161: LD_EXP 48
23165: EQUAL
23166: IFFALSE 23176
// driverShortName = Kir ;
23168: LD_ADDR_VAR 0 4
23172: PUSH
23173: LD_STRING Kir
23175: ST_TO_ADDR
// if driver = Belkov then
23176: LD_VAR 0 3
23180: PUSH
23181: LD_EXP 49
23185: EQUAL
23186: IFFALSE 23196
// driverShortName = Bel ;
23188: LD_ADDR_VAR 0 4
23192: PUSH
23193: LD_STRING Bel
23195: ST_TO_ADDR
// if driver = Belkov2 then
23196: LD_VAR 0 3
23200: PUSH
23201: LD_EXP 50
23205: EQUAL
23206: IFFALSE 23216
// driverShortName = Bel2 ;
23208: LD_ADDR_VAR 0 4
23212: PUSH
23213: LD_STRING Bel2
23215: ST_TO_ADDR
// if not driver in [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 ] then
23216: LD_VAR 0 3
23220: PUSH
23221: LD_EXP 39
23225: PUSH
23226: LD_EXP 40
23230: PUSH
23231: LD_EXP 41
23235: PUSH
23236: LD_EXP 42
23240: PUSH
23241: LD_EXP 43
23245: PUSH
23246: LD_EXP 44
23250: PUSH
23251: LD_EXP 45
23255: PUSH
23256: LD_EXP 46
23260: PUSH
23261: LD_EXP 48
23265: PUSH
23266: LD_EXP 49
23270: PUSH
23271: LD_EXP 50
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: IN
23289: NOT
23290: IFFALSE 23300
// driverShortName = rand ;
23292: LD_ADDR_VAR 0 4
23296: PUSH
23297: LD_STRING rand
23299: ST_TO_ADDR
// vehsFrom06 = vehsFrom06 ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , driverShortName ] ] ;
23300: LD_ADDR_EXP 7
23304: PUSH
23305: LD_EXP 7
23309: PUSH
23310: LD_VAR 0 2
23314: PPUSH
23315: CALL_OW 248
23319: PUSH
23320: LD_VAR 0 2
23324: PPUSH
23325: CALL_OW 265
23329: PUSH
23330: LD_VAR 0 2
23334: PPUSH
23335: CALL_OW 262
23339: PUSH
23340: LD_VAR 0 2
23344: PPUSH
23345: CALL_OW 263
23349: PUSH
23350: LD_VAR 0 2
23354: PPUSH
23355: CALL_OW 264
23359: PUSH
23360: LD_VAR 0 4
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: PUSH
23373: EMPTY
23374: LIST
23375: ADD
23376: ST_TO_ADDR
// end ;
23377: GO 22974
23379: POP
23380: POP
// SaveVariable ( vehsFrom06 , 06_Vehicles_2 ) ;
23381: LD_EXP 7
23385: PPUSH
23386: LD_STRING 06_Vehicles_2
23388: PPUSH
23389: CALL_OW 39
// SaveVariable ( savedVsevolod , 06_VsevolodStatus_4 ) ;
23393: LD_EXP 19
23397: PPUSH
23398: LD_STRING 06_VsevolodStatus_4
23400: PPUSH
23401: CALL_OW 39
// end ; end_of_file
23405: LD_VAR 0 1
23409: RET
// on UnitDestroyed ( unit ) do begin if unit in ovsyenkoBase then
23410: LD_VAR 0 1
23414: PUSH
23415: LD_EXP 59
23419: IN
23420: IFFALSE 23438
// ovsyenkoBase = ovsyenkoBase diff unit ;
23422: LD_ADDR_EXP 59
23426: PUSH
23427: LD_EXP 59
23431: PUSH
23432: LD_VAR 0 1
23436: DIFF
23437: ST_TO_ADDR
// if unit = Burlak then
23438: LD_VAR 0 1
23442: PUSH
23443: LD_EXP 39
23447: EQUAL
23448: IFFALSE 23454
// Lose_Burlak ;
23450: CALL 21907 0 0
// if unit = Vsevolod and GetSide ( Vsevolod ) = 3 then
23454: LD_VAR 0 1
23458: PUSH
23459: LD_EXP 51
23463: EQUAL
23464: PUSH
23465: LD_EXP 51
23469: PPUSH
23470: CALL_OW 255
23474: PUSH
23475: LD_INT 3
23477: EQUAL
23478: AND
23479: IFFALSE 23489
// savedVsevolod = false ;
23481: LD_ADDR_EXP 19
23485: PUSH
23486: LD_INT 0
23488: ST_TO_ADDR
// if unit = ovsyenko and GetSide ( ovsyenko ) = 3 then
23489: LD_VAR 0 1
23493: PUSH
23494: LD_INT 86
23496: EQUAL
23497: PUSH
23498: LD_INT 86
23500: PPUSH
23501: CALL_OW 255
23505: PUSH
23506: LD_INT 3
23508: EQUAL
23509: AND
23510: IFFALSE 23520
// lostAgainBase = true ;
23512: LD_ADDR_EXP 17
23516: PUSH
23517: LD_INT 1
23519: ST_TO_ADDR
// end ;
23520: PPOPN 1
23522: END
// on UnitDestroyed_Extra ( unit , killer_side , killer_unit ) do begin if unit = Gleb and killer_side = 3 then
23523: LD_VAR 0 1
23527: PUSH
23528: LD_EXP 42
23532: EQUAL
23533: PUSH
23534: LD_VAR 0 2
23538: PUSH
23539: LD_INT 3
23541: EQUAL
23542: AND
23543: IFFALSE 23549
// Lose_Gleb ;
23545: CALL 21922 0 0
// if unit = Vsevolod then
23549: LD_VAR 0 1
23553: PUSH
23554: LD_EXP 51
23558: EQUAL
23559: IFFALSE 23569
// savedVsevolod = false ;
23561: LD_ADDR_EXP 19
23565: PUSH
23566: LD_INT 0
23568: ST_TO_ADDR
// end ;
23569: PPOPN 3
23571: END
// on BuildingComplete ( building ) do begin end ;
23572: PPOPN 1
23574: END
// on BuildingCaptured ( building , side , human ) do begin if GetSide ( human ) = 3 and GetBType ( building ) = b_siberite_mine and not dial_SibTechsBlocker then
23575: LD_VAR 0 3
23579: PPUSH
23580: CALL_OW 255
23584: PUSH
23585: LD_INT 3
23587: EQUAL
23588: PUSH
23589: LD_VAR 0 1
23593: PPUSH
23594: CALL_OW 266
23598: PUSH
23599: LD_INT 30
23601: EQUAL
23602: AND
23603: PUSH
23604: LD_EXP 9
23608: NOT
23609: AND
23610: IFFALSE 23616
// Dial_SibTechs ;
23612: CALL 17268 0 0
// if GetSide ( human ) = 3 and GetBType ( building ) in [ b_depot , b_warehouse ] and GetResourceType ( GetBase ( building ) , mat_siberit ) > 0 and not dial_SibTechsBlocker then
23616: LD_VAR 0 3
23620: PPUSH
23621: CALL_OW 255
23625: PUSH
23626: LD_INT 3
23628: EQUAL
23629: PUSH
23630: LD_VAR 0 1
23634: PPUSH
23635: CALL_OW 266
23639: PUSH
23640: LD_INT 0
23642: PUSH
23643: LD_INT 1
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: IN
23650: AND
23651: PUSH
23652: LD_VAR 0 1
23656: PPUSH
23657: CALL_OW 274
23661: PPUSH
23662: LD_INT 3
23664: PPUSH
23665: CALL_OW 275
23669: PUSH
23670: LD_INT 0
23672: GREATER
23673: AND
23674: PUSH
23675: LD_EXP 9
23679: NOT
23680: AND
23681: IFFALSE 23687
// Dial_SibTechs ;
23683: CALL 17268 0 0
// end ;
23687: PPOPN 3
23689: END
// on Contact ( side1 , side2 ) do begin end ;
23690: PPOPN 2
23692: END
// on VehicleConstructed ( vehicle , building ) do var side , controlTowers , tmp ;
23693: LD_INT 0
23695: PPUSH
23696: PPUSH
23697: PPUSH
// begin if GetSide ( vehicle ) = 1 then
23698: LD_VAR 0 1
23702: PPUSH
23703: CALL_OW 255
23707: PUSH
23708: LD_INT 1
23710: EQUAL
23711: IFFALSE 23878
// begin controlTowers = FilterUnitsInArea ( HeadAmericanBaseArea , [ [ f_side , 1 ] , [ f_ok ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_vehicle ] ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23713: LD_ADDR_VAR 0 4
23717: PUSH
23718: LD_INT 5
23720: PPUSH
23721: LD_INT 22
23723: PUSH
23724: LD_INT 1
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 50
23733: PUSH
23734: EMPTY
23735: LIST
23736: PUSH
23737: LD_INT 2
23739: PUSH
23740: LD_INT 21
23742: PUSH
23743: LD_INT 3
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 21
23752: PUSH
23753: LD_INT 2
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 2
23767: PUSH
23768: LD_INT 30
23770: PUSH
23771: LD_INT 36
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 34
23780: PUSH
23781: LD_INT 31
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: LIST
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: PPUSH
23799: CALL_OW 70
23803: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote and controlTowers then
23804: LD_VAR 0 1
23808: PPUSH
23809: CALL_OW 263
23813: PUSH
23814: LD_INT 2
23816: EQUAL
23817: PUSH
23818: LD_VAR 0 4
23822: AND
23823: IFFALSE 23878
// begin tmp = UnitsInside ( controlTowers [ 1 ] ) ;
23825: LD_ADDR_VAR 0 5
23829: PUSH
23830: LD_VAR 0 4
23834: PUSH
23835: LD_INT 1
23837: ARRAY
23838: PPUSH
23839: CALL_OW 313
23843: ST_TO_ADDR
// if tmp then
23844: LD_VAR 0 5
23848: IFFALSE 23878
// LinkVehicleToHuman ( vehicle , tmp [ rand ( 1 , tmp ) ] ) ;
23850: LD_VAR 0 1
23854: PPUSH
23855: LD_VAR 0 5
23859: PUSH
23860: LD_INT 1
23862: PPUSH
23863: LD_VAR 0 5
23867: PPUSH
23868: CALL_OW 12
23872: ARRAY
23873: PPUSH
23874: CALL_OW 53
// end ; end ; end ;
23878: PPOPN 5
23880: END
// on ResearchComplete ( research , building ) do begin if research = tech_TauField then
23881: LD_VAR 0 1
23885: PUSH
23886: LD_INT 30
23888: EQUAL
23889: IFFALSE 23895
// Dial_ResearchTauField ;
23891: CALL 20736 0 0
// if research = tech_SibEng and GetTech ( tech_TauField , 3 ) = state_researched then
23895: LD_VAR 0 1
23899: PUSH
23900: LD_INT 22
23902: EQUAL
23903: PUSH
23904: LD_INT 30
23906: PPUSH
23907: LD_INT 3
23909: PPUSH
23910: CALL_OW 321
23914: PUSH
23915: LD_INT 2
23917: EQUAL
23918: AND
23919: IFFALSE 23928
// ChangeMissionObjectives ( MOutResearch ) ;
23921: LD_STRING MOutResearch
23923: PPUSH
23924: CALL_OW 337
// if research = tech_MatPred then
23928: LD_VAR 0 1
23932: PUSH
23933: LD_INT 9
23935: EQUAL
23936: IFFALSE 23942
// Dial_ResearchMatPredictions ;
23938: CALL 17423 0 0
// end ; end_of_file
23942: PPOPN 2
23944: END
// every 0 0$1 trigger enableVsevolodCounter do
23945: LD_EXP 22
23949: IFFALSE 23969
23951: GO 23953
23953: DISABLE
// begin enable ;
23954: ENABLE
// timeToAttack = timeToAttack + 0 0$01 ;
23955: LD_ADDR_EXP 26
23959: PUSH
23960: LD_EXP 26
23964: PUSH
23965: LD_INT 35
23967: PLUS
23968: ST_TO_ADDR
// end ; end_of_file
23969: END
// every 0 0$01 do var timer ;
23970: GO 23972
23972: DISABLE
23973: LD_INT 0
23975: PPUSH
// begin timer := 5 5$30 ;
23976: LD_ADDR_VAR 0 1
23980: PUSH
23981: LD_INT 11550
23983: ST_TO_ADDR
// repeat wait ( timer ) ;
23984: LD_VAR 0 1
23988: PPUSH
23989: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
23993: LD_INT 3
23995: PPUSH
23996: LD_INT 5
23998: PPUSH
23999: CALL_OW 12
24003: PPUSH
24004: LD_INT 20
24006: PPUSH
24007: LD_INT 1
24009: PPUSH
24010: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
24014: LD_ADDR_EXP 27
24018: PUSH
24019: LD_EXP 27
24023: PUSH
24024: LD_INT 1
24026: PLUS
24027: ST_TO_ADDR
// until cratesSpawned = 3 ;
24028: LD_EXP 27
24032: PUSH
24033: LD_INT 3
24035: EQUAL
24036: IFFALSE 23984
// end ; end_of_file
24038: PPOPN 1
24040: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
24041: LD_INT 0
24043: PPUSH
// ar_miner := 81 ;
24044: LD_ADDR_EXP 72
24048: PUSH
24049: LD_INT 81
24051: ST_TO_ADDR
// ar_crane := 88 ;
24052: LD_ADDR_EXP 71
24056: PUSH
24057: LD_INT 88
24059: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24060: LD_ADDR_EXP 66
24064: PUSH
24065: LD_INT 89
24067: ST_TO_ADDR
// us_hack := 99 ;
24068: LD_ADDR_EXP 67
24072: PUSH
24073: LD_INT 99
24075: ST_TO_ADDR
// us_artillery := 97 ;
24076: LD_ADDR_EXP 68
24080: PUSH
24081: LD_INT 97
24083: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24084: LD_ADDR_EXP 69
24088: PUSH
24089: LD_INT 91
24091: ST_TO_ADDR
// ar_mortar := 92 ;
24092: LD_ADDR_EXP 70
24096: PUSH
24097: LD_INT 92
24099: ST_TO_ADDR
// ru_radar := 98 ;
24100: LD_ADDR_EXP 65
24104: PUSH
24105: LD_INT 98
24107: ST_TO_ADDR
// tech_Artillery := 80 ;
24108: LD_ADDR_EXP 73
24112: PUSH
24113: LD_INT 80
24115: ST_TO_ADDR
// tech_RadMat := 81 ;
24116: LD_ADDR_EXP 74
24120: PUSH
24121: LD_INT 81
24123: ST_TO_ADDR
// tech_BasicTools := 82 ;
24124: LD_ADDR_EXP 75
24128: PUSH
24129: LD_INT 82
24131: ST_TO_ADDR
// tech_Cargo := 83 ;
24132: LD_ADDR_EXP 76
24136: PUSH
24137: LD_INT 83
24139: ST_TO_ADDR
// tech_Track := 84 ;
24140: LD_ADDR_EXP 77
24144: PUSH
24145: LD_INT 84
24147: ST_TO_ADDR
// tech_Crane := 85 ;
24148: LD_ADDR_EXP 78
24152: PUSH
24153: LD_INT 85
24155: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24156: LD_ADDR_EXP 79
24160: PUSH
24161: LD_INT 86
24163: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24164: LD_ADDR_EXP 80
24168: PUSH
24169: LD_INT 87
24171: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
24172: LD_ADDR_EXP 81
24176: PUSH
24177: LD_INT 88
24179: ST_TO_ADDR
// class_mastodont := 31 ;
24180: LD_ADDR_EXP 82
24184: PUSH
24185: LD_INT 31
24187: ST_TO_ADDR
// class_horse := 21 ;
24188: LD_ADDR_EXP 83
24192: PUSH
24193: LD_INT 21
24195: ST_TO_ADDR
// end ;
24196: LD_VAR 0 1
24200: RET
// every 1 do
24201: GO 24203
24203: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
24204: CALL 24041 0 0
24208: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24209: LD_INT 0
24211: PPUSH
// if p2 = 100 then
24212: LD_VAR 0 2
24216: PUSH
24217: LD_INT 100
24219: EQUAL
24220: IFFALSE 25169
// begin if not StreamModeActive then
24222: LD_EXP 84
24226: NOT
24227: IFFALSE 24237
// StreamModeActive := true ;
24229: LD_ADDR_EXP 84
24233: PUSH
24234: LD_INT 1
24236: ST_TO_ADDR
// if p3 = 0 then
24237: LD_VAR 0 3
24241: PUSH
24242: LD_INT 0
24244: EQUAL
24245: IFFALSE 24251
// InitStreamMode ;
24247: CALL 25329 0 0
// if p3 = 1 then
24251: LD_VAR 0 3
24255: PUSH
24256: LD_INT 1
24258: EQUAL
24259: IFFALSE 24269
// sRocket := true ;
24261: LD_ADDR_EXP 89
24265: PUSH
24266: LD_INT 1
24268: ST_TO_ADDR
// if p3 = 2 then
24269: LD_VAR 0 3
24273: PUSH
24274: LD_INT 2
24276: EQUAL
24277: IFFALSE 24287
// sSpeed := true ;
24279: LD_ADDR_EXP 88
24283: PUSH
24284: LD_INT 1
24286: ST_TO_ADDR
// if p3 = 3 then
24287: LD_VAR 0 3
24291: PUSH
24292: LD_INT 3
24294: EQUAL
24295: IFFALSE 24305
// sEngine := true ;
24297: LD_ADDR_EXP 90
24301: PUSH
24302: LD_INT 1
24304: ST_TO_ADDR
// if p3 = 4 then
24305: LD_VAR 0 3
24309: PUSH
24310: LD_INT 4
24312: EQUAL
24313: IFFALSE 24323
// sSpec := true ;
24315: LD_ADDR_EXP 87
24319: PUSH
24320: LD_INT 1
24322: ST_TO_ADDR
// if p3 = 5 then
24323: LD_VAR 0 3
24327: PUSH
24328: LD_INT 5
24330: EQUAL
24331: IFFALSE 24341
// sLevel := true ;
24333: LD_ADDR_EXP 91
24337: PUSH
24338: LD_INT 1
24340: ST_TO_ADDR
// if p3 = 6 then
24341: LD_VAR 0 3
24345: PUSH
24346: LD_INT 6
24348: EQUAL
24349: IFFALSE 24359
// sArmoury := true ;
24351: LD_ADDR_EXP 92
24355: PUSH
24356: LD_INT 1
24358: ST_TO_ADDR
// if p3 = 7 then
24359: LD_VAR 0 3
24363: PUSH
24364: LD_INT 7
24366: EQUAL
24367: IFFALSE 24377
// sRadar := true ;
24369: LD_ADDR_EXP 93
24373: PUSH
24374: LD_INT 1
24376: ST_TO_ADDR
// if p3 = 8 then
24377: LD_VAR 0 3
24381: PUSH
24382: LD_INT 8
24384: EQUAL
24385: IFFALSE 24395
// sBunker := true ;
24387: LD_ADDR_EXP 94
24391: PUSH
24392: LD_INT 1
24394: ST_TO_ADDR
// if p3 = 9 then
24395: LD_VAR 0 3
24399: PUSH
24400: LD_INT 9
24402: EQUAL
24403: IFFALSE 24413
// sHack := true ;
24405: LD_ADDR_EXP 95
24409: PUSH
24410: LD_INT 1
24412: ST_TO_ADDR
// if p3 = 10 then
24413: LD_VAR 0 3
24417: PUSH
24418: LD_INT 10
24420: EQUAL
24421: IFFALSE 24431
// sFire := true ;
24423: LD_ADDR_EXP 96
24427: PUSH
24428: LD_INT 1
24430: ST_TO_ADDR
// if p3 = 11 then
24431: LD_VAR 0 3
24435: PUSH
24436: LD_INT 11
24438: EQUAL
24439: IFFALSE 24449
// sRefresh := true ;
24441: LD_ADDR_EXP 97
24445: PUSH
24446: LD_INT 1
24448: ST_TO_ADDR
// if p3 = 12 then
24449: LD_VAR 0 3
24453: PUSH
24454: LD_INT 12
24456: EQUAL
24457: IFFALSE 24467
// sExp := true ;
24459: LD_ADDR_EXP 98
24463: PUSH
24464: LD_INT 1
24466: ST_TO_ADDR
// if p3 = 13 then
24467: LD_VAR 0 3
24471: PUSH
24472: LD_INT 13
24474: EQUAL
24475: IFFALSE 24485
// sDepot := true ;
24477: LD_ADDR_EXP 99
24481: PUSH
24482: LD_INT 1
24484: ST_TO_ADDR
// if p3 = 14 then
24485: LD_VAR 0 3
24489: PUSH
24490: LD_INT 14
24492: EQUAL
24493: IFFALSE 24503
// sFlag := true ;
24495: LD_ADDR_EXP 100
24499: PUSH
24500: LD_INT 1
24502: ST_TO_ADDR
// if p3 = 15 then
24503: LD_VAR 0 3
24507: PUSH
24508: LD_INT 15
24510: EQUAL
24511: IFFALSE 24521
// sKamikadze := true ;
24513: LD_ADDR_EXP 108
24517: PUSH
24518: LD_INT 1
24520: ST_TO_ADDR
// if p3 = 16 then
24521: LD_VAR 0 3
24525: PUSH
24526: LD_INT 16
24528: EQUAL
24529: IFFALSE 24539
// sTroll := true ;
24531: LD_ADDR_EXP 109
24535: PUSH
24536: LD_INT 1
24538: ST_TO_ADDR
// if p3 = 17 then
24539: LD_VAR 0 3
24543: PUSH
24544: LD_INT 17
24546: EQUAL
24547: IFFALSE 24557
// sSlow := true ;
24549: LD_ADDR_EXP 110
24553: PUSH
24554: LD_INT 1
24556: ST_TO_ADDR
// if p3 = 18 then
24557: LD_VAR 0 3
24561: PUSH
24562: LD_INT 18
24564: EQUAL
24565: IFFALSE 24575
// sLack := true ;
24567: LD_ADDR_EXP 111
24571: PUSH
24572: LD_INT 1
24574: ST_TO_ADDR
// if p3 = 19 then
24575: LD_VAR 0 3
24579: PUSH
24580: LD_INT 19
24582: EQUAL
24583: IFFALSE 24593
// sTank := true ;
24585: LD_ADDR_EXP 113
24589: PUSH
24590: LD_INT 1
24592: ST_TO_ADDR
// if p3 = 20 then
24593: LD_VAR 0 3
24597: PUSH
24598: LD_INT 20
24600: EQUAL
24601: IFFALSE 24611
// sRemote := true ;
24603: LD_ADDR_EXP 114
24607: PUSH
24608: LD_INT 1
24610: ST_TO_ADDR
// if p3 = 21 then
24611: LD_VAR 0 3
24615: PUSH
24616: LD_INT 21
24618: EQUAL
24619: IFFALSE 24629
// sPowell := true ;
24621: LD_ADDR_EXP 115
24625: PUSH
24626: LD_INT 1
24628: ST_TO_ADDR
// if p3 = 22 then
24629: LD_VAR 0 3
24633: PUSH
24634: LD_INT 22
24636: EQUAL
24637: IFFALSE 24647
// sTeleport := true ;
24639: LD_ADDR_EXP 118
24643: PUSH
24644: LD_INT 1
24646: ST_TO_ADDR
// if p3 = 23 then
24647: LD_VAR 0 3
24651: PUSH
24652: LD_INT 23
24654: EQUAL
24655: IFFALSE 24665
// sOilTower := true ;
24657: LD_ADDR_EXP 120
24661: PUSH
24662: LD_INT 1
24664: ST_TO_ADDR
// if p3 = 24 then
24665: LD_VAR 0 3
24669: PUSH
24670: LD_INT 24
24672: EQUAL
24673: IFFALSE 24683
// sShovel := true ;
24675: LD_ADDR_EXP 121
24679: PUSH
24680: LD_INT 1
24682: ST_TO_ADDR
// if p3 = 25 then
24683: LD_VAR 0 3
24687: PUSH
24688: LD_INT 25
24690: EQUAL
24691: IFFALSE 24701
// sSheik := true ;
24693: LD_ADDR_EXP 122
24697: PUSH
24698: LD_INT 1
24700: ST_TO_ADDR
// if p3 = 26 then
24701: LD_VAR 0 3
24705: PUSH
24706: LD_INT 26
24708: EQUAL
24709: IFFALSE 24719
// sEarthquake := true ;
24711: LD_ADDR_EXP 124
24715: PUSH
24716: LD_INT 1
24718: ST_TO_ADDR
// if p3 = 27 then
24719: LD_VAR 0 3
24723: PUSH
24724: LD_INT 27
24726: EQUAL
24727: IFFALSE 24737
// sAI := true ;
24729: LD_ADDR_EXP 125
24733: PUSH
24734: LD_INT 1
24736: ST_TO_ADDR
// if p3 = 28 then
24737: LD_VAR 0 3
24741: PUSH
24742: LD_INT 28
24744: EQUAL
24745: IFFALSE 24755
// sCargo := true ;
24747: LD_ADDR_EXP 128
24751: PUSH
24752: LD_INT 1
24754: ST_TO_ADDR
// if p3 = 29 then
24755: LD_VAR 0 3
24759: PUSH
24760: LD_INT 29
24762: EQUAL
24763: IFFALSE 24773
// sDLaser := true ;
24765: LD_ADDR_EXP 129
24769: PUSH
24770: LD_INT 1
24772: ST_TO_ADDR
// if p3 = 30 then
24773: LD_VAR 0 3
24777: PUSH
24778: LD_INT 30
24780: EQUAL
24781: IFFALSE 24791
// sExchange := true ;
24783: LD_ADDR_EXP 130
24787: PUSH
24788: LD_INT 1
24790: ST_TO_ADDR
// if p3 = 31 then
24791: LD_VAR 0 3
24795: PUSH
24796: LD_INT 31
24798: EQUAL
24799: IFFALSE 24809
// sFac := true ;
24801: LD_ADDR_EXP 131
24805: PUSH
24806: LD_INT 1
24808: ST_TO_ADDR
// if p3 = 32 then
24809: LD_VAR 0 3
24813: PUSH
24814: LD_INT 32
24816: EQUAL
24817: IFFALSE 24827
// sPower := true ;
24819: LD_ADDR_EXP 132
24823: PUSH
24824: LD_INT 1
24826: ST_TO_ADDR
// if p3 = 33 then
24827: LD_VAR 0 3
24831: PUSH
24832: LD_INT 33
24834: EQUAL
24835: IFFALSE 24845
// sRandom := true ;
24837: LD_ADDR_EXP 133
24841: PUSH
24842: LD_INT 1
24844: ST_TO_ADDR
// if p3 = 34 then
24845: LD_VAR 0 3
24849: PUSH
24850: LD_INT 34
24852: EQUAL
24853: IFFALSE 24863
// sShield := true ;
24855: LD_ADDR_EXP 134
24859: PUSH
24860: LD_INT 1
24862: ST_TO_ADDR
// if p3 = 35 then
24863: LD_VAR 0 3
24867: PUSH
24868: LD_INT 35
24870: EQUAL
24871: IFFALSE 24881
// sTime := true ;
24873: LD_ADDR_EXP 135
24877: PUSH
24878: LD_INT 1
24880: ST_TO_ADDR
// if p3 = 36 then
24881: LD_VAR 0 3
24885: PUSH
24886: LD_INT 36
24888: EQUAL
24889: IFFALSE 24899
// sTools := true ;
24891: LD_ADDR_EXP 136
24895: PUSH
24896: LD_INT 1
24898: ST_TO_ADDR
// if p3 = 101 then
24899: LD_VAR 0 3
24903: PUSH
24904: LD_INT 101
24906: EQUAL
24907: IFFALSE 24917
// sSold := true ;
24909: LD_ADDR_EXP 101
24913: PUSH
24914: LD_INT 1
24916: ST_TO_ADDR
// if p3 = 102 then
24917: LD_VAR 0 3
24921: PUSH
24922: LD_INT 102
24924: EQUAL
24925: IFFALSE 24935
// sDiff := true ;
24927: LD_ADDR_EXP 102
24931: PUSH
24932: LD_INT 1
24934: ST_TO_ADDR
// if p3 = 103 then
24935: LD_VAR 0 3
24939: PUSH
24940: LD_INT 103
24942: EQUAL
24943: IFFALSE 24953
// sFog := true ;
24945: LD_ADDR_EXP 105
24949: PUSH
24950: LD_INT 1
24952: ST_TO_ADDR
// if p3 = 104 then
24953: LD_VAR 0 3
24957: PUSH
24958: LD_INT 104
24960: EQUAL
24961: IFFALSE 24971
// sReset := true ;
24963: LD_ADDR_EXP 106
24967: PUSH
24968: LD_INT 1
24970: ST_TO_ADDR
// if p3 = 105 then
24971: LD_VAR 0 3
24975: PUSH
24976: LD_INT 105
24978: EQUAL
24979: IFFALSE 24989
// sSun := true ;
24981: LD_ADDR_EXP 107
24985: PUSH
24986: LD_INT 1
24988: ST_TO_ADDR
// if p3 = 106 then
24989: LD_VAR 0 3
24993: PUSH
24994: LD_INT 106
24996: EQUAL
24997: IFFALSE 25007
// sTiger := true ;
24999: LD_ADDR_EXP 103
25003: PUSH
25004: LD_INT 1
25006: ST_TO_ADDR
// if p3 = 107 then
25007: LD_VAR 0 3
25011: PUSH
25012: LD_INT 107
25014: EQUAL
25015: IFFALSE 25025
// sBomb := true ;
25017: LD_ADDR_EXP 104
25021: PUSH
25022: LD_INT 1
25024: ST_TO_ADDR
// if p3 = 108 then
25025: LD_VAR 0 3
25029: PUSH
25030: LD_INT 108
25032: EQUAL
25033: IFFALSE 25043
// sWound := true ;
25035: LD_ADDR_EXP 112
25039: PUSH
25040: LD_INT 1
25042: ST_TO_ADDR
// if p3 = 109 then
25043: LD_VAR 0 3
25047: PUSH
25048: LD_INT 109
25050: EQUAL
25051: IFFALSE 25061
// sBetray := true ;
25053: LD_ADDR_EXP 116
25057: PUSH
25058: LD_INT 1
25060: ST_TO_ADDR
// if p3 = 110 then
25061: LD_VAR 0 3
25065: PUSH
25066: LD_INT 110
25068: EQUAL
25069: IFFALSE 25079
// sContamin := true ;
25071: LD_ADDR_EXP 117
25075: PUSH
25076: LD_INT 1
25078: ST_TO_ADDR
// if p3 = 111 then
25079: LD_VAR 0 3
25083: PUSH
25084: LD_INT 111
25086: EQUAL
25087: IFFALSE 25097
// sOil := true ;
25089: LD_ADDR_EXP 119
25093: PUSH
25094: LD_INT 1
25096: ST_TO_ADDR
// if p3 = 112 then
25097: LD_VAR 0 3
25101: PUSH
25102: LD_INT 112
25104: EQUAL
25105: IFFALSE 25115
// sStu := true ;
25107: LD_ADDR_EXP 123
25111: PUSH
25112: LD_INT 1
25114: ST_TO_ADDR
// if p3 = 113 then
25115: LD_VAR 0 3
25119: PUSH
25120: LD_INT 113
25122: EQUAL
25123: IFFALSE 25133
// sBazooka := true ;
25125: LD_ADDR_EXP 126
25129: PUSH
25130: LD_INT 1
25132: ST_TO_ADDR
// if p3 = 114 then
25133: LD_VAR 0 3
25137: PUSH
25138: LD_INT 114
25140: EQUAL
25141: IFFALSE 25151
// sMortar := true ;
25143: LD_ADDR_EXP 127
25147: PUSH
25148: LD_INT 1
25150: ST_TO_ADDR
// if p3 = 115 then
25151: LD_VAR 0 3
25155: PUSH
25156: LD_INT 115
25158: EQUAL
25159: IFFALSE 25169
// sRanger := true ;
25161: LD_ADDR_EXP 137
25165: PUSH
25166: LD_INT 1
25168: ST_TO_ADDR
// end ; if p2 = 101 then
25169: LD_VAR 0 2
25173: PUSH
25174: LD_INT 101
25176: EQUAL
25177: IFFALSE 25305
// begin case p3 of 1 :
25179: LD_VAR 0 3
25183: PUSH
25184: LD_INT 1
25186: DOUBLE
25187: EQUAL
25188: IFTRUE 25192
25190: GO 25199
25192: POP
// hHackUnlimitedResources ; 2 :
25193: CALL 36342 0 0
25197: GO 25305
25199: LD_INT 2
25201: DOUBLE
25202: EQUAL
25203: IFTRUE 25207
25205: GO 25214
25207: POP
// hHackSetLevel10 ; 3 :
25208: CALL 36475 0 0
25212: GO 25305
25214: LD_INT 3
25216: DOUBLE
25217: EQUAL
25218: IFTRUE 25222
25220: GO 25229
25222: POP
// hHackSetLevel10YourUnits ; 4 :
25223: CALL 36560 0 0
25227: GO 25305
25229: LD_INT 4
25231: DOUBLE
25232: EQUAL
25233: IFTRUE 25237
25235: GO 25244
25237: POP
// hHackInvincible ; 5 :
25238: CALL 37008 0 0
25242: GO 25305
25244: LD_INT 5
25246: DOUBLE
25247: EQUAL
25248: IFTRUE 25252
25250: GO 25259
25252: POP
// hHackInvisible ; 6 :
25253: CALL 37119 0 0
25257: GO 25305
25259: LD_INT 6
25261: DOUBLE
25262: EQUAL
25263: IFTRUE 25267
25265: GO 25274
25267: POP
// hHackChangeYourSide ; 7 :
25268: CALL 37176 0 0
25272: GO 25305
25274: LD_INT 7
25276: DOUBLE
25277: EQUAL
25278: IFTRUE 25282
25280: GO 25289
25282: POP
// hHackChangeUnitSide ; 8 :
25283: CALL 37218 0 0
25287: GO 25305
25289: LD_INT 8
25291: DOUBLE
25292: EQUAL
25293: IFTRUE 25297
25295: GO 25304
25297: POP
// hHackFog ; end ;
25298: CALL 37319 0 0
25302: GO 25305
25304: POP
// end ; end ;
25305: LD_VAR 0 7
25309: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
25310: GO 25312
25312: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
25313: LD_STRING initStreamRollete();
25315: PPUSH
25316: CALL_OW 559
// InitStreamMode ;
25320: CALL 25329 0 0
// DefineStreamItems ( ) ;
25324: CALL 25769 0 0
// end ;
25328: END
// function InitStreamMode ; begin
25329: LD_INT 0
25331: PPUSH
// streamModeActive := false ;
25332: LD_ADDR_EXP 84
25336: PUSH
25337: LD_INT 0
25339: ST_TO_ADDR
// normalCounter := 36 ;
25340: LD_ADDR_EXP 85
25344: PUSH
25345: LD_INT 36
25347: ST_TO_ADDR
// hardcoreCounter := 16 ;
25348: LD_ADDR_EXP 86
25352: PUSH
25353: LD_INT 16
25355: ST_TO_ADDR
// sRocket := false ;
25356: LD_ADDR_EXP 89
25360: PUSH
25361: LD_INT 0
25363: ST_TO_ADDR
// sSpeed := false ;
25364: LD_ADDR_EXP 88
25368: PUSH
25369: LD_INT 0
25371: ST_TO_ADDR
// sEngine := false ;
25372: LD_ADDR_EXP 90
25376: PUSH
25377: LD_INT 0
25379: ST_TO_ADDR
// sSpec := false ;
25380: LD_ADDR_EXP 87
25384: PUSH
25385: LD_INT 0
25387: ST_TO_ADDR
// sLevel := false ;
25388: LD_ADDR_EXP 91
25392: PUSH
25393: LD_INT 0
25395: ST_TO_ADDR
// sArmoury := false ;
25396: LD_ADDR_EXP 92
25400: PUSH
25401: LD_INT 0
25403: ST_TO_ADDR
// sRadar := false ;
25404: LD_ADDR_EXP 93
25408: PUSH
25409: LD_INT 0
25411: ST_TO_ADDR
// sBunker := false ;
25412: LD_ADDR_EXP 94
25416: PUSH
25417: LD_INT 0
25419: ST_TO_ADDR
// sHack := false ;
25420: LD_ADDR_EXP 95
25424: PUSH
25425: LD_INT 0
25427: ST_TO_ADDR
// sFire := false ;
25428: LD_ADDR_EXP 96
25432: PUSH
25433: LD_INT 0
25435: ST_TO_ADDR
// sRefresh := false ;
25436: LD_ADDR_EXP 97
25440: PUSH
25441: LD_INT 0
25443: ST_TO_ADDR
// sExp := false ;
25444: LD_ADDR_EXP 98
25448: PUSH
25449: LD_INT 0
25451: ST_TO_ADDR
// sDepot := false ;
25452: LD_ADDR_EXP 99
25456: PUSH
25457: LD_INT 0
25459: ST_TO_ADDR
// sFlag := false ;
25460: LD_ADDR_EXP 100
25464: PUSH
25465: LD_INT 0
25467: ST_TO_ADDR
// sKamikadze := false ;
25468: LD_ADDR_EXP 108
25472: PUSH
25473: LD_INT 0
25475: ST_TO_ADDR
// sTroll := false ;
25476: LD_ADDR_EXP 109
25480: PUSH
25481: LD_INT 0
25483: ST_TO_ADDR
// sSlow := false ;
25484: LD_ADDR_EXP 110
25488: PUSH
25489: LD_INT 0
25491: ST_TO_ADDR
// sLack := false ;
25492: LD_ADDR_EXP 111
25496: PUSH
25497: LD_INT 0
25499: ST_TO_ADDR
// sTank := false ;
25500: LD_ADDR_EXP 113
25504: PUSH
25505: LD_INT 0
25507: ST_TO_ADDR
// sRemote := false ;
25508: LD_ADDR_EXP 114
25512: PUSH
25513: LD_INT 0
25515: ST_TO_ADDR
// sPowell := false ;
25516: LD_ADDR_EXP 115
25520: PUSH
25521: LD_INT 0
25523: ST_TO_ADDR
// sTeleport := false ;
25524: LD_ADDR_EXP 118
25528: PUSH
25529: LD_INT 0
25531: ST_TO_ADDR
// sOilTower := false ;
25532: LD_ADDR_EXP 120
25536: PUSH
25537: LD_INT 0
25539: ST_TO_ADDR
// sShovel := false ;
25540: LD_ADDR_EXP 121
25544: PUSH
25545: LD_INT 0
25547: ST_TO_ADDR
// sSheik := false ;
25548: LD_ADDR_EXP 122
25552: PUSH
25553: LD_INT 0
25555: ST_TO_ADDR
// sEarthquake := false ;
25556: LD_ADDR_EXP 124
25560: PUSH
25561: LD_INT 0
25563: ST_TO_ADDR
// sAI := false ;
25564: LD_ADDR_EXP 125
25568: PUSH
25569: LD_INT 0
25571: ST_TO_ADDR
// sCargo := false ;
25572: LD_ADDR_EXP 128
25576: PUSH
25577: LD_INT 0
25579: ST_TO_ADDR
// sDLaser := false ;
25580: LD_ADDR_EXP 129
25584: PUSH
25585: LD_INT 0
25587: ST_TO_ADDR
// sExchange := false ;
25588: LD_ADDR_EXP 130
25592: PUSH
25593: LD_INT 0
25595: ST_TO_ADDR
// sFac := false ;
25596: LD_ADDR_EXP 131
25600: PUSH
25601: LD_INT 0
25603: ST_TO_ADDR
// sPower := false ;
25604: LD_ADDR_EXP 132
25608: PUSH
25609: LD_INT 0
25611: ST_TO_ADDR
// sRandom := false ;
25612: LD_ADDR_EXP 133
25616: PUSH
25617: LD_INT 0
25619: ST_TO_ADDR
// sShield := false ;
25620: LD_ADDR_EXP 134
25624: PUSH
25625: LD_INT 0
25627: ST_TO_ADDR
// sTime := false ;
25628: LD_ADDR_EXP 135
25632: PUSH
25633: LD_INT 0
25635: ST_TO_ADDR
// sTools := false ;
25636: LD_ADDR_EXP 136
25640: PUSH
25641: LD_INT 0
25643: ST_TO_ADDR
// sSold := false ;
25644: LD_ADDR_EXP 101
25648: PUSH
25649: LD_INT 0
25651: ST_TO_ADDR
// sDiff := false ;
25652: LD_ADDR_EXP 102
25656: PUSH
25657: LD_INT 0
25659: ST_TO_ADDR
// sFog := false ;
25660: LD_ADDR_EXP 105
25664: PUSH
25665: LD_INT 0
25667: ST_TO_ADDR
// sReset := false ;
25668: LD_ADDR_EXP 106
25672: PUSH
25673: LD_INT 0
25675: ST_TO_ADDR
// sSun := false ;
25676: LD_ADDR_EXP 107
25680: PUSH
25681: LD_INT 0
25683: ST_TO_ADDR
// sTiger := false ;
25684: LD_ADDR_EXP 103
25688: PUSH
25689: LD_INT 0
25691: ST_TO_ADDR
// sBomb := false ;
25692: LD_ADDR_EXP 104
25696: PUSH
25697: LD_INT 0
25699: ST_TO_ADDR
// sWound := false ;
25700: LD_ADDR_EXP 112
25704: PUSH
25705: LD_INT 0
25707: ST_TO_ADDR
// sBetray := false ;
25708: LD_ADDR_EXP 116
25712: PUSH
25713: LD_INT 0
25715: ST_TO_ADDR
// sContamin := false ;
25716: LD_ADDR_EXP 117
25720: PUSH
25721: LD_INT 0
25723: ST_TO_ADDR
// sOil := false ;
25724: LD_ADDR_EXP 119
25728: PUSH
25729: LD_INT 0
25731: ST_TO_ADDR
// sStu := false ;
25732: LD_ADDR_EXP 123
25736: PUSH
25737: LD_INT 0
25739: ST_TO_ADDR
// sBazooka := false ;
25740: LD_ADDR_EXP 126
25744: PUSH
25745: LD_INT 0
25747: ST_TO_ADDR
// sMortar := false ;
25748: LD_ADDR_EXP 127
25752: PUSH
25753: LD_INT 0
25755: ST_TO_ADDR
// sRanger := false ;
25756: LD_ADDR_EXP 137
25760: PUSH
25761: LD_INT 0
25763: ST_TO_ADDR
// end ;
25764: LD_VAR 0 1
25768: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
25769: LD_INT 0
25771: PPUSH
25772: PPUSH
25773: PPUSH
25774: PPUSH
25775: PPUSH
// result := [ ] ;
25776: LD_ADDR_VAR 0 1
25780: PUSH
25781: EMPTY
25782: ST_TO_ADDR
// if campaign_id = 1 then
25783: LD_OWVAR 69
25787: PUSH
25788: LD_INT 1
25790: EQUAL
25791: IFFALSE 28729
// begin case mission_number of 1 :
25793: LD_OWVAR 70
25797: PUSH
25798: LD_INT 1
25800: DOUBLE
25801: EQUAL
25802: IFTRUE 25806
25804: GO 25870
25806: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
25807: LD_ADDR_VAR 0 1
25811: PUSH
25812: LD_INT 2
25814: PUSH
25815: LD_INT 4
25817: PUSH
25818: LD_INT 11
25820: PUSH
25821: LD_INT 12
25823: PUSH
25824: LD_INT 15
25826: PUSH
25827: LD_INT 16
25829: PUSH
25830: LD_INT 22
25832: PUSH
25833: LD_INT 23
25835: PUSH
25836: LD_INT 26
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 101
25852: PUSH
25853: LD_INT 102
25855: PUSH
25856: LD_INT 106
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: LIST
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: ST_TO_ADDR
25868: GO 28727
25870: LD_INT 2
25872: DOUBLE
25873: EQUAL
25874: IFTRUE 25878
25876: GO 25950
25878: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
25879: LD_ADDR_VAR 0 1
25883: PUSH
25884: LD_INT 2
25886: PUSH
25887: LD_INT 4
25889: PUSH
25890: LD_INT 11
25892: PUSH
25893: LD_INT 12
25895: PUSH
25896: LD_INT 15
25898: PUSH
25899: LD_INT 16
25901: PUSH
25902: LD_INT 22
25904: PUSH
25905: LD_INT 23
25907: PUSH
25908: LD_INT 26
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 101
25924: PUSH
25925: LD_INT 102
25927: PUSH
25928: LD_INT 105
25930: PUSH
25931: LD_INT 106
25933: PUSH
25934: LD_INT 108
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: ST_TO_ADDR
25948: GO 28727
25950: LD_INT 3
25952: DOUBLE
25953: EQUAL
25954: IFTRUE 25958
25956: GO 26034
25958: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
25959: LD_ADDR_VAR 0 1
25963: PUSH
25964: LD_INT 2
25966: PUSH
25967: LD_INT 4
25969: PUSH
25970: LD_INT 5
25972: PUSH
25973: LD_INT 11
25975: PUSH
25976: LD_INT 12
25978: PUSH
25979: LD_INT 15
25981: PUSH
25982: LD_INT 16
25984: PUSH
25985: LD_INT 22
25987: PUSH
25988: LD_INT 26
25990: PUSH
25991: LD_INT 36
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 101
26008: PUSH
26009: LD_INT 102
26011: PUSH
26012: LD_INT 105
26014: PUSH
26015: LD_INT 106
26017: PUSH
26018: LD_INT 108
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: ST_TO_ADDR
26032: GO 28727
26034: LD_INT 4
26036: DOUBLE
26037: EQUAL
26038: IFTRUE 26042
26040: GO 26126
26042: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
26043: LD_ADDR_VAR 0 1
26047: PUSH
26048: LD_INT 2
26050: PUSH
26051: LD_INT 4
26053: PUSH
26054: LD_INT 5
26056: PUSH
26057: LD_INT 8
26059: PUSH
26060: LD_INT 11
26062: PUSH
26063: LD_INT 12
26065: PUSH
26066: LD_INT 15
26068: PUSH
26069: LD_INT 16
26071: PUSH
26072: LD_INT 22
26074: PUSH
26075: LD_INT 23
26077: PUSH
26078: LD_INT 26
26080: PUSH
26081: LD_INT 36
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: PUSH
26098: LD_INT 101
26100: PUSH
26101: LD_INT 102
26103: PUSH
26104: LD_INT 105
26106: PUSH
26107: LD_INT 106
26109: PUSH
26110: LD_INT 108
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: ST_TO_ADDR
26124: GO 28727
26126: LD_INT 5
26128: DOUBLE
26129: EQUAL
26130: IFTRUE 26134
26132: GO 26234
26134: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
26135: LD_ADDR_VAR 0 1
26139: PUSH
26140: LD_INT 2
26142: PUSH
26143: LD_INT 4
26145: PUSH
26146: LD_INT 5
26148: PUSH
26149: LD_INT 6
26151: PUSH
26152: LD_INT 8
26154: PUSH
26155: LD_INT 11
26157: PUSH
26158: LD_INT 12
26160: PUSH
26161: LD_INT 15
26163: PUSH
26164: LD_INT 16
26166: PUSH
26167: LD_INT 22
26169: PUSH
26170: LD_INT 23
26172: PUSH
26173: LD_INT 25
26175: PUSH
26176: LD_INT 26
26178: PUSH
26179: LD_INT 36
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 101
26200: PUSH
26201: LD_INT 102
26203: PUSH
26204: LD_INT 105
26206: PUSH
26207: LD_INT 106
26209: PUSH
26210: LD_INT 108
26212: PUSH
26213: LD_INT 109
26215: PUSH
26216: LD_INT 112
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: ST_TO_ADDR
26232: GO 28727
26234: LD_INT 6
26236: DOUBLE
26237: EQUAL
26238: IFTRUE 26242
26240: GO 26362
26242: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
26243: LD_ADDR_VAR 0 1
26247: PUSH
26248: LD_INT 2
26250: PUSH
26251: LD_INT 4
26253: PUSH
26254: LD_INT 5
26256: PUSH
26257: LD_INT 6
26259: PUSH
26260: LD_INT 8
26262: PUSH
26263: LD_INT 11
26265: PUSH
26266: LD_INT 12
26268: PUSH
26269: LD_INT 15
26271: PUSH
26272: LD_INT 16
26274: PUSH
26275: LD_INT 20
26277: PUSH
26278: LD_INT 21
26280: PUSH
26281: LD_INT 22
26283: PUSH
26284: LD_INT 23
26286: PUSH
26287: LD_INT 25
26289: PUSH
26290: LD_INT 26
26292: PUSH
26293: LD_INT 30
26295: PUSH
26296: LD_INT 31
26298: PUSH
26299: LD_INT 32
26301: PUSH
26302: LD_INT 36
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 101
26328: PUSH
26329: LD_INT 102
26331: PUSH
26332: LD_INT 105
26334: PUSH
26335: LD_INT 106
26337: PUSH
26338: LD_INT 108
26340: PUSH
26341: LD_INT 109
26343: PUSH
26344: LD_INT 112
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: ST_TO_ADDR
26360: GO 28727
26362: LD_INT 7
26364: DOUBLE
26365: EQUAL
26366: IFTRUE 26370
26368: GO 26470
26370: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
26371: LD_ADDR_VAR 0 1
26375: PUSH
26376: LD_INT 2
26378: PUSH
26379: LD_INT 4
26381: PUSH
26382: LD_INT 5
26384: PUSH
26385: LD_INT 7
26387: PUSH
26388: LD_INT 11
26390: PUSH
26391: LD_INT 12
26393: PUSH
26394: LD_INT 15
26396: PUSH
26397: LD_INT 16
26399: PUSH
26400: LD_INT 20
26402: PUSH
26403: LD_INT 21
26405: PUSH
26406: LD_INT 22
26408: PUSH
26409: LD_INT 23
26411: PUSH
26412: LD_INT 25
26414: PUSH
26415: LD_INT 26
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: PUSH
26434: LD_INT 101
26436: PUSH
26437: LD_INT 102
26439: PUSH
26440: LD_INT 103
26442: PUSH
26443: LD_INT 105
26445: PUSH
26446: LD_INT 106
26448: PUSH
26449: LD_INT 108
26451: PUSH
26452: LD_INT 112
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: ST_TO_ADDR
26468: GO 28727
26470: LD_INT 8
26472: DOUBLE
26473: EQUAL
26474: IFTRUE 26478
26476: GO 26606
26478: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
26479: LD_ADDR_VAR 0 1
26483: PUSH
26484: LD_INT 2
26486: PUSH
26487: LD_INT 4
26489: PUSH
26490: LD_INT 5
26492: PUSH
26493: LD_INT 6
26495: PUSH
26496: LD_INT 7
26498: PUSH
26499: LD_INT 8
26501: PUSH
26502: LD_INT 11
26504: PUSH
26505: LD_INT 12
26507: PUSH
26508: LD_INT 15
26510: PUSH
26511: LD_INT 16
26513: PUSH
26514: LD_INT 20
26516: PUSH
26517: LD_INT 21
26519: PUSH
26520: LD_INT 22
26522: PUSH
26523: LD_INT 23
26525: PUSH
26526: LD_INT 25
26528: PUSH
26529: LD_INT 26
26531: PUSH
26532: LD_INT 30
26534: PUSH
26535: LD_INT 31
26537: PUSH
26538: LD_INT 32
26540: PUSH
26541: LD_INT 36
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 101
26568: PUSH
26569: LD_INT 102
26571: PUSH
26572: LD_INT 103
26574: PUSH
26575: LD_INT 105
26577: PUSH
26578: LD_INT 106
26580: PUSH
26581: LD_INT 108
26583: PUSH
26584: LD_INT 109
26586: PUSH
26587: LD_INT 112
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: ST_TO_ADDR
26604: GO 28727
26606: LD_INT 9
26608: DOUBLE
26609: EQUAL
26610: IFTRUE 26614
26612: GO 26750
26614: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
26615: LD_ADDR_VAR 0 1
26619: PUSH
26620: LD_INT 2
26622: PUSH
26623: LD_INT 4
26625: PUSH
26626: LD_INT 5
26628: PUSH
26629: LD_INT 6
26631: PUSH
26632: LD_INT 7
26634: PUSH
26635: LD_INT 8
26637: PUSH
26638: LD_INT 11
26640: PUSH
26641: LD_INT 12
26643: PUSH
26644: LD_INT 15
26646: PUSH
26647: LD_INT 16
26649: PUSH
26650: LD_INT 20
26652: PUSH
26653: LD_INT 21
26655: PUSH
26656: LD_INT 22
26658: PUSH
26659: LD_INT 23
26661: PUSH
26662: LD_INT 25
26664: PUSH
26665: LD_INT 26
26667: PUSH
26668: LD_INT 28
26670: PUSH
26671: LD_INT 30
26673: PUSH
26674: LD_INT 31
26676: PUSH
26677: LD_INT 32
26679: PUSH
26680: LD_INT 36
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 101
26708: PUSH
26709: LD_INT 102
26711: PUSH
26712: LD_INT 103
26714: PUSH
26715: LD_INT 105
26717: PUSH
26718: LD_INT 106
26720: PUSH
26721: LD_INT 108
26723: PUSH
26724: LD_INT 109
26726: PUSH
26727: LD_INT 112
26729: PUSH
26730: LD_INT 114
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: ST_TO_ADDR
26748: GO 28727
26750: LD_INT 10
26752: DOUBLE
26753: EQUAL
26754: IFTRUE 26758
26756: GO 26942
26758: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
26759: LD_ADDR_VAR 0 1
26763: PUSH
26764: LD_INT 2
26766: PUSH
26767: LD_INT 4
26769: PUSH
26770: LD_INT 5
26772: PUSH
26773: LD_INT 6
26775: PUSH
26776: LD_INT 7
26778: PUSH
26779: LD_INT 8
26781: PUSH
26782: LD_INT 9
26784: PUSH
26785: LD_INT 10
26787: PUSH
26788: LD_INT 11
26790: PUSH
26791: LD_INT 12
26793: PUSH
26794: LD_INT 13
26796: PUSH
26797: LD_INT 14
26799: PUSH
26800: LD_INT 15
26802: PUSH
26803: LD_INT 16
26805: PUSH
26806: LD_INT 17
26808: PUSH
26809: LD_INT 18
26811: PUSH
26812: LD_INT 19
26814: PUSH
26815: LD_INT 20
26817: PUSH
26818: LD_INT 21
26820: PUSH
26821: LD_INT 22
26823: PUSH
26824: LD_INT 23
26826: PUSH
26827: LD_INT 24
26829: PUSH
26830: LD_INT 25
26832: PUSH
26833: LD_INT 26
26835: PUSH
26836: LD_INT 28
26838: PUSH
26839: LD_INT 30
26841: PUSH
26842: LD_INT 31
26844: PUSH
26845: LD_INT 32
26847: PUSH
26848: LD_INT 36
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 101
26884: PUSH
26885: LD_INT 102
26887: PUSH
26888: LD_INT 103
26890: PUSH
26891: LD_INT 104
26893: PUSH
26894: LD_INT 105
26896: PUSH
26897: LD_INT 106
26899: PUSH
26900: LD_INT 107
26902: PUSH
26903: LD_INT 108
26905: PUSH
26906: LD_INT 109
26908: PUSH
26909: LD_INT 110
26911: PUSH
26912: LD_INT 111
26914: PUSH
26915: LD_INT 112
26917: PUSH
26918: LD_INT 114
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: ST_TO_ADDR
26940: GO 28727
26942: LD_INT 11
26944: DOUBLE
26945: EQUAL
26946: IFTRUE 26950
26948: GO 27142
26950: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
26951: LD_ADDR_VAR 0 1
26955: PUSH
26956: LD_INT 2
26958: PUSH
26959: LD_INT 3
26961: PUSH
26962: LD_INT 4
26964: PUSH
26965: LD_INT 5
26967: PUSH
26968: LD_INT 6
26970: PUSH
26971: LD_INT 7
26973: PUSH
26974: LD_INT 8
26976: PUSH
26977: LD_INT 9
26979: PUSH
26980: LD_INT 10
26982: PUSH
26983: LD_INT 11
26985: PUSH
26986: LD_INT 12
26988: PUSH
26989: LD_INT 13
26991: PUSH
26992: LD_INT 14
26994: PUSH
26995: LD_INT 15
26997: PUSH
26998: LD_INT 16
27000: PUSH
27001: LD_INT 17
27003: PUSH
27004: LD_INT 18
27006: PUSH
27007: LD_INT 19
27009: PUSH
27010: LD_INT 20
27012: PUSH
27013: LD_INT 21
27015: PUSH
27016: LD_INT 22
27018: PUSH
27019: LD_INT 23
27021: PUSH
27022: LD_INT 24
27024: PUSH
27025: LD_INT 25
27027: PUSH
27028: LD_INT 26
27030: PUSH
27031: LD_INT 28
27033: PUSH
27034: LD_INT 30
27036: PUSH
27037: LD_INT 31
27039: PUSH
27040: LD_INT 32
27042: PUSH
27043: LD_INT 34
27045: PUSH
27046: LD_INT 36
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 101
27084: PUSH
27085: LD_INT 102
27087: PUSH
27088: LD_INT 103
27090: PUSH
27091: LD_INT 104
27093: PUSH
27094: LD_INT 105
27096: PUSH
27097: LD_INT 106
27099: PUSH
27100: LD_INT 107
27102: PUSH
27103: LD_INT 108
27105: PUSH
27106: LD_INT 109
27108: PUSH
27109: LD_INT 110
27111: PUSH
27112: LD_INT 111
27114: PUSH
27115: LD_INT 112
27117: PUSH
27118: LD_INT 114
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: ST_TO_ADDR
27140: GO 28727
27142: LD_INT 12
27144: DOUBLE
27145: EQUAL
27146: IFTRUE 27150
27148: GO 27358
27150: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
27151: LD_ADDR_VAR 0 1
27155: PUSH
27156: LD_INT 1
27158: PUSH
27159: LD_INT 2
27161: PUSH
27162: LD_INT 3
27164: PUSH
27165: LD_INT 4
27167: PUSH
27168: LD_INT 5
27170: PUSH
27171: LD_INT 6
27173: PUSH
27174: LD_INT 7
27176: PUSH
27177: LD_INT 8
27179: PUSH
27180: LD_INT 9
27182: PUSH
27183: LD_INT 10
27185: PUSH
27186: LD_INT 11
27188: PUSH
27189: LD_INT 12
27191: PUSH
27192: LD_INT 13
27194: PUSH
27195: LD_INT 14
27197: PUSH
27198: LD_INT 15
27200: PUSH
27201: LD_INT 16
27203: PUSH
27204: LD_INT 17
27206: PUSH
27207: LD_INT 18
27209: PUSH
27210: LD_INT 19
27212: PUSH
27213: LD_INT 20
27215: PUSH
27216: LD_INT 21
27218: PUSH
27219: LD_INT 22
27221: PUSH
27222: LD_INT 23
27224: PUSH
27225: LD_INT 24
27227: PUSH
27228: LD_INT 25
27230: PUSH
27231: LD_INT 26
27233: PUSH
27234: LD_INT 27
27236: PUSH
27237: LD_INT 28
27239: PUSH
27240: LD_INT 30
27242: PUSH
27243: LD_INT 31
27245: PUSH
27246: LD_INT 32
27248: PUSH
27249: LD_INT 33
27251: PUSH
27252: LD_INT 34
27254: PUSH
27255: LD_INT 36
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 101
27296: PUSH
27297: LD_INT 102
27299: PUSH
27300: LD_INT 103
27302: PUSH
27303: LD_INT 104
27305: PUSH
27306: LD_INT 105
27308: PUSH
27309: LD_INT 106
27311: PUSH
27312: LD_INT 107
27314: PUSH
27315: LD_INT 108
27317: PUSH
27318: LD_INT 109
27320: PUSH
27321: LD_INT 110
27323: PUSH
27324: LD_INT 111
27326: PUSH
27327: LD_INT 112
27329: PUSH
27330: LD_INT 113
27332: PUSH
27333: LD_INT 114
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: ST_TO_ADDR
27356: GO 28727
27358: LD_INT 13
27360: DOUBLE
27361: EQUAL
27362: IFTRUE 27366
27364: GO 27562
27366: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
27367: LD_ADDR_VAR 0 1
27371: PUSH
27372: LD_INT 1
27374: PUSH
27375: LD_INT 2
27377: PUSH
27378: LD_INT 3
27380: PUSH
27381: LD_INT 4
27383: PUSH
27384: LD_INT 5
27386: PUSH
27387: LD_INT 8
27389: PUSH
27390: LD_INT 9
27392: PUSH
27393: LD_INT 10
27395: PUSH
27396: LD_INT 11
27398: PUSH
27399: LD_INT 12
27401: PUSH
27402: LD_INT 14
27404: PUSH
27405: LD_INT 15
27407: PUSH
27408: LD_INT 16
27410: PUSH
27411: LD_INT 17
27413: PUSH
27414: LD_INT 18
27416: PUSH
27417: LD_INT 19
27419: PUSH
27420: LD_INT 20
27422: PUSH
27423: LD_INT 21
27425: PUSH
27426: LD_INT 22
27428: PUSH
27429: LD_INT 23
27431: PUSH
27432: LD_INT 24
27434: PUSH
27435: LD_INT 25
27437: PUSH
27438: LD_INT 26
27440: PUSH
27441: LD_INT 27
27443: PUSH
27444: LD_INT 28
27446: PUSH
27447: LD_INT 30
27449: PUSH
27450: LD_INT 31
27452: PUSH
27453: LD_INT 32
27455: PUSH
27456: LD_INT 33
27458: PUSH
27459: LD_INT 34
27461: PUSH
27462: LD_INT 36
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 101
27500: PUSH
27501: LD_INT 102
27503: PUSH
27504: LD_INT 103
27506: PUSH
27507: LD_INT 104
27509: PUSH
27510: LD_INT 105
27512: PUSH
27513: LD_INT 106
27515: PUSH
27516: LD_INT 107
27518: PUSH
27519: LD_INT 108
27521: PUSH
27522: LD_INT 109
27524: PUSH
27525: LD_INT 110
27527: PUSH
27528: LD_INT 111
27530: PUSH
27531: LD_INT 112
27533: PUSH
27534: LD_INT 113
27536: PUSH
27537: LD_INT 114
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: ST_TO_ADDR
27560: GO 28727
27562: LD_INT 14
27564: DOUBLE
27565: EQUAL
27566: IFTRUE 27570
27568: GO 27782
27570: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
27571: LD_ADDR_VAR 0 1
27575: PUSH
27576: LD_INT 1
27578: PUSH
27579: LD_INT 2
27581: PUSH
27582: LD_INT 3
27584: PUSH
27585: LD_INT 4
27587: PUSH
27588: LD_INT 5
27590: PUSH
27591: LD_INT 6
27593: PUSH
27594: LD_INT 7
27596: PUSH
27597: LD_INT 8
27599: PUSH
27600: LD_INT 9
27602: PUSH
27603: LD_INT 10
27605: PUSH
27606: LD_INT 11
27608: PUSH
27609: LD_INT 12
27611: PUSH
27612: LD_INT 13
27614: PUSH
27615: LD_INT 14
27617: PUSH
27618: LD_INT 15
27620: PUSH
27621: LD_INT 16
27623: PUSH
27624: LD_INT 17
27626: PUSH
27627: LD_INT 18
27629: PUSH
27630: LD_INT 19
27632: PUSH
27633: LD_INT 20
27635: PUSH
27636: LD_INT 21
27638: PUSH
27639: LD_INT 22
27641: PUSH
27642: LD_INT 23
27644: PUSH
27645: LD_INT 24
27647: PUSH
27648: LD_INT 25
27650: PUSH
27651: LD_INT 26
27653: PUSH
27654: LD_INT 27
27656: PUSH
27657: LD_INT 28
27659: PUSH
27660: LD_INT 29
27662: PUSH
27663: LD_INT 30
27665: PUSH
27666: LD_INT 31
27668: PUSH
27669: LD_INT 32
27671: PUSH
27672: LD_INT 33
27674: PUSH
27675: LD_INT 34
27677: PUSH
27678: LD_INT 36
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 101
27720: PUSH
27721: LD_INT 102
27723: PUSH
27724: LD_INT 103
27726: PUSH
27727: LD_INT 104
27729: PUSH
27730: LD_INT 105
27732: PUSH
27733: LD_INT 106
27735: PUSH
27736: LD_INT 107
27738: PUSH
27739: LD_INT 108
27741: PUSH
27742: LD_INT 109
27744: PUSH
27745: LD_INT 110
27747: PUSH
27748: LD_INT 111
27750: PUSH
27751: LD_INT 112
27753: PUSH
27754: LD_INT 113
27756: PUSH
27757: LD_INT 114
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: ST_TO_ADDR
27780: GO 28727
27782: LD_INT 15
27784: DOUBLE
27785: EQUAL
27786: IFTRUE 27790
27788: GO 28002
27790: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
27791: LD_ADDR_VAR 0 1
27795: PUSH
27796: LD_INT 1
27798: PUSH
27799: LD_INT 2
27801: PUSH
27802: LD_INT 3
27804: PUSH
27805: LD_INT 4
27807: PUSH
27808: LD_INT 5
27810: PUSH
27811: LD_INT 6
27813: PUSH
27814: LD_INT 7
27816: PUSH
27817: LD_INT 8
27819: PUSH
27820: LD_INT 9
27822: PUSH
27823: LD_INT 10
27825: PUSH
27826: LD_INT 11
27828: PUSH
27829: LD_INT 12
27831: PUSH
27832: LD_INT 13
27834: PUSH
27835: LD_INT 14
27837: PUSH
27838: LD_INT 15
27840: PUSH
27841: LD_INT 16
27843: PUSH
27844: LD_INT 17
27846: PUSH
27847: LD_INT 18
27849: PUSH
27850: LD_INT 19
27852: PUSH
27853: LD_INT 20
27855: PUSH
27856: LD_INT 21
27858: PUSH
27859: LD_INT 22
27861: PUSH
27862: LD_INT 23
27864: PUSH
27865: LD_INT 24
27867: PUSH
27868: LD_INT 25
27870: PUSH
27871: LD_INT 26
27873: PUSH
27874: LD_INT 27
27876: PUSH
27877: LD_INT 28
27879: PUSH
27880: LD_INT 29
27882: PUSH
27883: LD_INT 30
27885: PUSH
27886: LD_INT 31
27888: PUSH
27889: LD_INT 32
27891: PUSH
27892: LD_INT 33
27894: PUSH
27895: LD_INT 34
27897: PUSH
27898: LD_INT 36
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 101
27940: PUSH
27941: LD_INT 102
27943: PUSH
27944: LD_INT 103
27946: PUSH
27947: LD_INT 104
27949: PUSH
27950: LD_INT 105
27952: PUSH
27953: LD_INT 106
27955: PUSH
27956: LD_INT 107
27958: PUSH
27959: LD_INT 108
27961: PUSH
27962: LD_INT 109
27964: PUSH
27965: LD_INT 110
27967: PUSH
27968: LD_INT 111
27970: PUSH
27971: LD_INT 112
27973: PUSH
27974: LD_INT 113
27976: PUSH
27977: LD_INT 114
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: ST_TO_ADDR
28000: GO 28727
28002: LD_INT 16
28004: DOUBLE
28005: EQUAL
28006: IFTRUE 28010
28008: GO 28134
28010: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
28011: LD_ADDR_VAR 0 1
28015: PUSH
28016: LD_INT 2
28018: PUSH
28019: LD_INT 4
28021: PUSH
28022: LD_INT 5
28024: PUSH
28025: LD_INT 7
28027: PUSH
28028: LD_INT 11
28030: PUSH
28031: LD_INT 12
28033: PUSH
28034: LD_INT 15
28036: PUSH
28037: LD_INT 16
28039: PUSH
28040: LD_INT 20
28042: PUSH
28043: LD_INT 21
28045: PUSH
28046: LD_INT 22
28048: PUSH
28049: LD_INT 23
28051: PUSH
28052: LD_INT 25
28054: PUSH
28055: LD_INT 26
28057: PUSH
28058: LD_INT 30
28060: PUSH
28061: LD_INT 31
28063: PUSH
28064: LD_INT 32
28066: PUSH
28067: LD_INT 33
28069: PUSH
28070: LD_INT 34
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 101
28096: PUSH
28097: LD_INT 102
28099: PUSH
28100: LD_INT 103
28102: PUSH
28103: LD_INT 106
28105: PUSH
28106: LD_INT 108
28108: PUSH
28109: LD_INT 112
28111: PUSH
28112: LD_INT 113
28114: PUSH
28115: LD_INT 114
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: ST_TO_ADDR
28132: GO 28727
28134: LD_INT 17
28136: DOUBLE
28137: EQUAL
28138: IFTRUE 28142
28140: GO 28354
28142: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
28143: LD_ADDR_VAR 0 1
28147: PUSH
28148: LD_INT 1
28150: PUSH
28151: LD_INT 2
28153: PUSH
28154: LD_INT 3
28156: PUSH
28157: LD_INT 4
28159: PUSH
28160: LD_INT 5
28162: PUSH
28163: LD_INT 6
28165: PUSH
28166: LD_INT 7
28168: PUSH
28169: LD_INT 8
28171: PUSH
28172: LD_INT 9
28174: PUSH
28175: LD_INT 10
28177: PUSH
28178: LD_INT 11
28180: PUSH
28181: LD_INT 12
28183: PUSH
28184: LD_INT 13
28186: PUSH
28187: LD_INT 14
28189: PUSH
28190: LD_INT 15
28192: PUSH
28193: LD_INT 16
28195: PUSH
28196: LD_INT 17
28198: PUSH
28199: LD_INT 18
28201: PUSH
28202: LD_INT 19
28204: PUSH
28205: LD_INT 20
28207: PUSH
28208: LD_INT 21
28210: PUSH
28211: LD_INT 22
28213: PUSH
28214: LD_INT 23
28216: PUSH
28217: LD_INT 24
28219: PUSH
28220: LD_INT 25
28222: PUSH
28223: LD_INT 26
28225: PUSH
28226: LD_INT 27
28228: PUSH
28229: LD_INT 28
28231: PUSH
28232: LD_INT 29
28234: PUSH
28235: LD_INT 30
28237: PUSH
28238: LD_INT 31
28240: PUSH
28241: LD_INT 32
28243: PUSH
28244: LD_INT 33
28246: PUSH
28247: LD_INT 34
28249: PUSH
28250: LD_INT 36
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 101
28292: PUSH
28293: LD_INT 102
28295: PUSH
28296: LD_INT 103
28298: PUSH
28299: LD_INT 104
28301: PUSH
28302: LD_INT 105
28304: PUSH
28305: LD_INT 106
28307: PUSH
28308: LD_INT 107
28310: PUSH
28311: LD_INT 108
28313: PUSH
28314: LD_INT 109
28316: PUSH
28317: LD_INT 110
28319: PUSH
28320: LD_INT 111
28322: PUSH
28323: LD_INT 112
28325: PUSH
28326: LD_INT 113
28328: PUSH
28329: LD_INT 114
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: ST_TO_ADDR
28352: GO 28727
28354: LD_INT 18
28356: DOUBLE
28357: EQUAL
28358: IFTRUE 28362
28360: GO 28498
28362: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
28363: LD_ADDR_VAR 0 1
28367: PUSH
28368: LD_INT 2
28370: PUSH
28371: LD_INT 4
28373: PUSH
28374: LD_INT 5
28376: PUSH
28377: LD_INT 7
28379: PUSH
28380: LD_INT 11
28382: PUSH
28383: LD_INT 12
28385: PUSH
28386: LD_INT 15
28388: PUSH
28389: LD_INT 16
28391: PUSH
28392: LD_INT 20
28394: PUSH
28395: LD_INT 21
28397: PUSH
28398: LD_INT 22
28400: PUSH
28401: LD_INT 23
28403: PUSH
28404: LD_INT 25
28406: PUSH
28407: LD_INT 26
28409: PUSH
28410: LD_INT 30
28412: PUSH
28413: LD_INT 31
28415: PUSH
28416: LD_INT 32
28418: PUSH
28419: LD_INT 33
28421: PUSH
28422: LD_INT 34
28424: PUSH
28425: LD_INT 35
28427: PUSH
28428: LD_INT 36
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: PUSH
28454: LD_INT 101
28456: PUSH
28457: LD_INT 102
28459: PUSH
28460: LD_INT 103
28462: PUSH
28463: LD_INT 106
28465: PUSH
28466: LD_INT 108
28468: PUSH
28469: LD_INT 112
28471: PUSH
28472: LD_INT 113
28474: PUSH
28475: LD_INT 114
28477: PUSH
28478: LD_INT 115
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: ST_TO_ADDR
28496: GO 28727
28498: LD_INT 19
28500: DOUBLE
28501: EQUAL
28502: IFTRUE 28506
28504: GO 28726
28506: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
28507: LD_ADDR_VAR 0 1
28511: PUSH
28512: LD_INT 1
28514: PUSH
28515: LD_INT 2
28517: PUSH
28518: LD_INT 3
28520: PUSH
28521: LD_INT 4
28523: PUSH
28524: LD_INT 5
28526: PUSH
28527: LD_INT 6
28529: PUSH
28530: LD_INT 7
28532: PUSH
28533: LD_INT 8
28535: PUSH
28536: LD_INT 9
28538: PUSH
28539: LD_INT 10
28541: PUSH
28542: LD_INT 11
28544: PUSH
28545: LD_INT 12
28547: PUSH
28548: LD_INT 13
28550: PUSH
28551: LD_INT 14
28553: PUSH
28554: LD_INT 15
28556: PUSH
28557: LD_INT 16
28559: PUSH
28560: LD_INT 17
28562: PUSH
28563: LD_INT 18
28565: PUSH
28566: LD_INT 19
28568: PUSH
28569: LD_INT 20
28571: PUSH
28572: LD_INT 21
28574: PUSH
28575: LD_INT 22
28577: PUSH
28578: LD_INT 23
28580: PUSH
28581: LD_INT 24
28583: PUSH
28584: LD_INT 25
28586: PUSH
28587: LD_INT 26
28589: PUSH
28590: LD_INT 27
28592: PUSH
28593: LD_INT 28
28595: PUSH
28596: LD_INT 29
28598: PUSH
28599: LD_INT 30
28601: PUSH
28602: LD_INT 31
28604: PUSH
28605: LD_INT 32
28607: PUSH
28608: LD_INT 33
28610: PUSH
28611: LD_INT 34
28613: PUSH
28614: LD_INT 35
28616: PUSH
28617: LD_INT 36
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 101
28660: PUSH
28661: LD_INT 102
28663: PUSH
28664: LD_INT 103
28666: PUSH
28667: LD_INT 104
28669: PUSH
28670: LD_INT 105
28672: PUSH
28673: LD_INT 106
28675: PUSH
28676: LD_INT 107
28678: PUSH
28679: LD_INT 108
28681: PUSH
28682: LD_INT 109
28684: PUSH
28685: LD_INT 110
28687: PUSH
28688: LD_INT 111
28690: PUSH
28691: LD_INT 112
28693: PUSH
28694: LD_INT 113
28696: PUSH
28697: LD_INT 114
28699: PUSH
28700: LD_INT 115
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: ST_TO_ADDR
28724: GO 28727
28726: POP
// end else
28727: GO 28946
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
28729: LD_ADDR_VAR 0 1
28733: PUSH
28734: LD_INT 1
28736: PUSH
28737: LD_INT 2
28739: PUSH
28740: LD_INT 3
28742: PUSH
28743: LD_INT 4
28745: PUSH
28746: LD_INT 5
28748: PUSH
28749: LD_INT 6
28751: PUSH
28752: LD_INT 7
28754: PUSH
28755: LD_INT 8
28757: PUSH
28758: LD_INT 9
28760: PUSH
28761: LD_INT 10
28763: PUSH
28764: LD_INT 11
28766: PUSH
28767: LD_INT 12
28769: PUSH
28770: LD_INT 13
28772: PUSH
28773: LD_INT 14
28775: PUSH
28776: LD_INT 15
28778: PUSH
28779: LD_INT 16
28781: PUSH
28782: LD_INT 17
28784: PUSH
28785: LD_INT 18
28787: PUSH
28788: LD_INT 19
28790: PUSH
28791: LD_INT 20
28793: PUSH
28794: LD_INT 21
28796: PUSH
28797: LD_INT 22
28799: PUSH
28800: LD_INT 23
28802: PUSH
28803: LD_INT 24
28805: PUSH
28806: LD_INT 25
28808: PUSH
28809: LD_INT 26
28811: PUSH
28812: LD_INT 27
28814: PUSH
28815: LD_INT 28
28817: PUSH
28818: LD_INT 29
28820: PUSH
28821: LD_INT 30
28823: PUSH
28824: LD_INT 31
28826: PUSH
28827: LD_INT 32
28829: PUSH
28830: LD_INT 33
28832: PUSH
28833: LD_INT 34
28835: PUSH
28836: LD_INT 35
28838: PUSH
28839: LD_INT 36
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 101
28882: PUSH
28883: LD_INT 102
28885: PUSH
28886: LD_INT 103
28888: PUSH
28889: LD_INT 104
28891: PUSH
28892: LD_INT 105
28894: PUSH
28895: LD_INT 106
28897: PUSH
28898: LD_INT 107
28900: PUSH
28901: LD_INT 108
28903: PUSH
28904: LD_INT 109
28906: PUSH
28907: LD_INT 110
28909: PUSH
28910: LD_INT 111
28912: PUSH
28913: LD_INT 112
28915: PUSH
28916: LD_INT 113
28918: PUSH
28919: LD_INT 114
28921: PUSH
28922: LD_INT 115
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: ST_TO_ADDR
// if result then
28946: LD_VAR 0 1
28950: IFFALSE 29239
// begin normal :=  ;
28952: LD_ADDR_VAR 0 3
28956: PUSH
28957: LD_STRING 
28959: ST_TO_ADDR
// hardcore :=  ;
28960: LD_ADDR_VAR 0 4
28964: PUSH
28965: LD_STRING 
28967: ST_TO_ADDR
// for i = 1 to normalCounter do
28968: LD_ADDR_VAR 0 5
28972: PUSH
28973: DOUBLE
28974: LD_INT 1
28976: DEC
28977: ST_TO_ADDR
28978: LD_EXP 85
28982: PUSH
28983: FOR_TO
28984: IFFALSE 29085
// begin tmp := 0 ;
28986: LD_ADDR_VAR 0 2
28990: PUSH
28991: LD_STRING 0
28993: ST_TO_ADDR
// if result [ 1 ] then
28994: LD_VAR 0 1
28998: PUSH
28999: LD_INT 1
29001: ARRAY
29002: IFFALSE 29067
// if result [ 1 ] [ 1 ] = i then
29004: LD_VAR 0 1
29008: PUSH
29009: LD_INT 1
29011: ARRAY
29012: PUSH
29013: LD_INT 1
29015: ARRAY
29016: PUSH
29017: LD_VAR 0 5
29021: EQUAL
29022: IFFALSE 29067
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
29024: LD_ADDR_VAR 0 1
29028: PUSH
29029: LD_VAR 0 1
29033: PPUSH
29034: LD_INT 1
29036: PPUSH
29037: LD_VAR 0 1
29041: PUSH
29042: LD_INT 1
29044: ARRAY
29045: PPUSH
29046: LD_INT 1
29048: PPUSH
29049: CALL_OW 3
29053: PPUSH
29054: CALL_OW 1
29058: ST_TO_ADDR
// tmp := 1 ;
29059: LD_ADDR_VAR 0 2
29063: PUSH
29064: LD_STRING 1
29066: ST_TO_ADDR
// end ; normal := normal & tmp ;
29067: LD_ADDR_VAR 0 3
29071: PUSH
29072: LD_VAR 0 3
29076: PUSH
29077: LD_VAR 0 2
29081: STR
29082: ST_TO_ADDR
// end ;
29083: GO 28983
29085: POP
29086: POP
// for i = 1 to hardcoreCounter do
29087: LD_ADDR_VAR 0 5
29091: PUSH
29092: DOUBLE
29093: LD_INT 1
29095: DEC
29096: ST_TO_ADDR
29097: LD_EXP 86
29101: PUSH
29102: FOR_TO
29103: IFFALSE 29208
// begin tmp := 0 ;
29105: LD_ADDR_VAR 0 2
29109: PUSH
29110: LD_STRING 0
29112: ST_TO_ADDR
// if result [ 2 ] then
29113: LD_VAR 0 1
29117: PUSH
29118: LD_INT 2
29120: ARRAY
29121: IFFALSE 29190
// if result [ 2 ] [ 1 ] = 100 + i then
29123: LD_VAR 0 1
29127: PUSH
29128: LD_INT 2
29130: ARRAY
29131: PUSH
29132: LD_INT 1
29134: ARRAY
29135: PUSH
29136: LD_INT 100
29138: PUSH
29139: LD_VAR 0 5
29143: PLUS
29144: EQUAL
29145: IFFALSE 29190
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
29147: LD_ADDR_VAR 0 1
29151: PUSH
29152: LD_VAR 0 1
29156: PPUSH
29157: LD_INT 2
29159: PPUSH
29160: LD_VAR 0 1
29164: PUSH
29165: LD_INT 2
29167: ARRAY
29168: PPUSH
29169: LD_INT 1
29171: PPUSH
29172: CALL_OW 3
29176: PPUSH
29177: CALL_OW 1
29181: ST_TO_ADDR
// tmp := 1 ;
29182: LD_ADDR_VAR 0 2
29186: PUSH
29187: LD_STRING 1
29189: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
29190: LD_ADDR_VAR 0 4
29194: PUSH
29195: LD_VAR 0 4
29199: PUSH
29200: LD_VAR 0 2
29204: STR
29205: ST_TO_ADDR
// end ;
29206: GO 29102
29208: POP
29209: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
29210: LD_STRING getStreamItemsFromMission("
29212: PUSH
29213: LD_VAR 0 3
29217: STR
29218: PUSH
29219: LD_STRING ","
29221: STR
29222: PUSH
29223: LD_VAR 0 4
29227: STR
29228: PUSH
29229: LD_STRING ")
29231: STR
29232: PPUSH
29233: CALL_OW 559
// end else
29237: GO 29246
// ToLua ( getStreamItemsFromMission("","") ) ;
29239: LD_STRING getStreamItemsFromMission("","")
29241: PPUSH
29242: CALL_OW 559
// end ;
29246: LD_VAR 0 1
29250: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
29251: LD_EXP 84
29255: PUSH
29256: LD_EXP 89
29260: AND
29261: IFFALSE 29385
29263: GO 29265
29265: DISABLE
29266: LD_INT 0
29268: PPUSH
29269: PPUSH
// begin enable ;
29270: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
29271: LD_ADDR_VAR 0 2
29275: PUSH
29276: LD_INT 22
29278: PUSH
29279: LD_OWVAR 2
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 2
29290: PUSH
29291: LD_INT 34
29293: PUSH
29294: LD_INT 7
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 34
29303: PUSH
29304: LD_INT 45
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 34
29313: PUSH
29314: LD_INT 28
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 34
29323: PUSH
29324: LD_INT 47
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PPUSH
29342: CALL_OW 69
29346: ST_TO_ADDR
// if not tmp then
29347: LD_VAR 0 2
29351: NOT
29352: IFFALSE 29356
// exit ;
29354: GO 29385
// for i in tmp do
29356: LD_ADDR_VAR 0 1
29360: PUSH
29361: LD_VAR 0 2
29365: PUSH
29366: FOR_IN
29367: IFFALSE 29383
// begin SetLives ( i , 0 ) ;
29369: LD_VAR 0 1
29373: PPUSH
29374: LD_INT 0
29376: PPUSH
29377: CALL_OW 234
// end ;
29381: GO 29366
29383: POP
29384: POP
// end ;
29385: PPOPN 2
29387: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
29388: LD_EXP 84
29392: PUSH
29393: LD_EXP 90
29397: AND
29398: IFFALSE 29482
29400: GO 29402
29402: DISABLE
29403: LD_INT 0
29405: PPUSH
29406: PPUSH
// begin enable ;
29407: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
29408: LD_ADDR_VAR 0 2
29412: PUSH
29413: LD_INT 22
29415: PUSH
29416: LD_OWVAR 2
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 32
29427: PUSH
29428: LD_INT 3
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PPUSH
29439: CALL_OW 69
29443: ST_TO_ADDR
// if not tmp then
29444: LD_VAR 0 2
29448: NOT
29449: IFFALSE 29453
// exit ;
29451: GO 29482
// for i in tmp do
29453: LD_ADDR_VAR 0 1
29457: PUSH
29458: LD_VAR 0 2
29462: PUSH
29463: FOR_IN
29464: IFFALSE 29480
// begin SetLives ( i , 0 ) ;
29466: LD_VAR 0 1
29470: PPUSH
29471: LD_INT 0
29473: PPUSH
29474: CALL_OW 234
// end ;
29478: GO 29463
29480: POP
29481: POP
// end ;
29482: PPOPN 2
29484: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
29485: LD_EXP 84
29489: PUSH
29490: LD_EXP 87
29494: AND
29495: IFFALSE 29588
29497: GO 29499
29499: DISABLE
29500: LD_INT 0
29502: PPUSH
// begin enable ;
29503: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
29504: LD_ADDR_VAR 0 1
29508: PUSH
29509: LD_INT 22
29511: PUSH
29512: LD_OWVAR 2
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 2
29523: PUSH
29524: LD_INT 25
29526: PUSH
29527: LD_INT 5
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 25
29536: PUSH
29537: LD_INT 9
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 25
29546: PUSH
29547: LD_INT 8
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PPUSH
29564: CALL_OW 69
29568: PUSH
29569: FOR_IN
29570: IFFALSE 29586
// begin SetClass ( i , 1 ) ;
29572: LD_VAR 0 1
29576: PPUSH
29577: LD_INT 1
29579: PPUSH
29580: CALL_OW 336
// end ;
29584: GO 29569
29586: POP
29587: POP
// end ;
29588: PPOPN 1
29590: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
29591: LD_EXP 84
29595: PUSH
29596: LD_EXP 88
29600: AND
29601: PUSH
29602: LD_OWVAR 65
29606: PUSH
29607: LD_INT 7
29609: LESS
29610: AND
29611: IFFALSE 29625
29613: GO 29615
29615: DISABLE
// begin enable ;
29616: ENABLE
// game_speed := 7 ;
29617: LD_ADDR_OWVAR 65
29621: PUSH
29622: LD_INT 7
29624: ST_TO_ADDR
// end ;
29625: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
29626: LD_EXP 84
29630: PUSH
29631: LD_EXP 91
29635: AND
29636: IFFALSE 29838
29638: GO 29640
29640: DISABLE
29641: LD_INT 0
29643: PPUSH
29644: PPUSH
29645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29646: LD_ADDR_VAR 0 3
29650: PUSH
29651: LD_INT 81
29653: PUSH
29654: LD_OWVAR 2
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 21
29665: PUSH
29666: LD_INT 1
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PPUSH
29677: CALL_OW 69
29681: ST_TO_ADDR
// if not tmp then
29682: LD_VAR 0 3
29686: NOT
29687: IFFALSE 29691
// exit ;
29689: GO 29838
// if tmp > 5 then
29691: LD_VAR 0 3
29695: PUSH
29696: LD_INT 5
29698: GREATER
29699: IFFALSE 29711
// k := 5 else
29701: LD_ADDR_VAR 0 2
29705: PUSH
29706: LD_INT 5
29708: ST_TO_ADDR
29709: GO 29721
// k := tmp ;
29711: LD_ADDR_VAR 0 2
29715: PUSH
29716: LD_VAR 0 3
29720: ST_TO_ADDR
// for i := 1 to k do
29721: LD_ADDR_VAR 0 1
29725: PUSH
29726: DOUBLE
29727: LD_INT 1
29729: DEC
29730: ST_TO_ADDR
29731: LD_VAR 0 2
29735: PUSH
29736: FOR_TO
29737: IFFALSE 29836
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
29739: LD_VAR 0 3
29743: PUSH
29744: LD_VAR 0 1
29748: ARRAY
29749: PPUSH
29750: LD_VAR 0 1
29754: PUSH
29755: LD_INT 4
29757: MOD
29758: PUSH
29759: LD_INT 1
29761: PLUS
29762: PPUSH
29763: CALL_OW 259
29767: PUSH
29768: LD_INT 10
29770: LESS
29771: IFFALSE 29834
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
29773: LD_VAR 0 3
29777: PUSH
29778: LD_VAR 0 1
29782: ARRAY
29783: PPUSH
29784: LD_VAR 0 1
29788: PUSH
29789: LD_INT 4
29791: MOD
29792: PUSH
29793: LD_INT 1
29795: PLUS
29796: PPUSH
29797: LD_VAR 0 3
29801: PUSH
29802: LD_VAR 0 1
29806: ARRAY
29807: PPUSH
29808: LD_VAR 0 1
29812: PUSH
29813: LD_INT 4
29815: MOD
29816: PUSH
29817: LD_INT 1
29819: PLUS
29820: PPUSH
29821: CALL_OW 259
29825: PUSH
29826: LD_INT 1
29828: PLUS
29829: PPUSH
29830: CALL_OW 237
29834: GO 29736
29836: POP
29837: POP
// end ;
29838: PPOPN 3
29840: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
29841: LD_EXP 84
29845: PUSH
29846: LD_EXP 92
29850: AND
29851: IFFALSE 29871
29853: GO 29855
29855: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
29856: LD_INT 4
29858: PPUSH
29859: LD_OWVAR 2
29863: PPUSH
29864: LD_INT 0
29866: PPUSH
29867: CALL_OW 324
29871: END
// every 0 0$1 trigger StreamModeActive and sShovel do
29872: LD_EXP 84
29876: PUSH
29877: LD_EXP 121
29881: AND
29882: IFFALSE 29902
29884: GO 29886
29886: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
29887: LD_INT 19
29889: PPUSH
29890: LD_OWVAR 2
29894: PPUSH
29895: LD_INT 0
29897: PPUSH
29898: CALL_OW 324
29902: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
29903: LD_EXP 84
29907: PUSH
29908: LD_EXP 93
29912: AND
29913: IFFALSE 30015
29915: GO 29917
29917: DISABLE
29918: LD_INT 0
29920: PPUSH
29921: PPUSH
// begin enable ;
29922: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
29923: LD_ADDR_VAR 0 2
29927: PUSH
29928: LD_INT 22
29930: PUSH
29931: LD_OWVAR 2
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 2
29942: PUSH
29943: LD_INT 34
29945: PUSH
29946: LD_INT 11
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 34
29955: PUSH
29956: LD_INT 30
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: LIST
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PPUSH
29972: CALL_OW 69
29976: ST_TO_ADDR
// if not tmp then
29977: LD_VAR 0 2
29981: NOT
29982: IFFALSE 29986
// exit ;
29984: GO 30015
// for i in tmp do
29986: LD_ADDR_VAR 0 1
29990: PUSH
29991: LD_VAR 0 2
29995: PUSH
29996: FOR_IN
29997: IFFALSE 30013
// begin SetLives ( i , 0 ) ;
29999: LD_VAR 0 1
30003: PPUSH
30004: LD_INT 0
30006: PPUSH
30007: CALL_OW 234
// end ;
30011: GO 29996
30013: POP
30014: POP
// end ;
30015: PPOPN 2
30017: END
// every 0 0$1 trigger StreamModeActive and sBunker do
30018: LD_EXP 84
30022: PUSH
30023: LD_EXP 94
30027: AND
30028: IFFALSE 30048
30030: GO 30032
30032: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
30033: LD_INT 32
30035: PPUSH
30036: LD_OWVAR 2
30040: PPUSH
30041: LD_INT 0
30043: PPUSH
30044: CALL_OW 324
30048: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
30049: LD_EXP 84
30053: PUSH
30054: LD_EXP 95
30058: AND
30059: IFFALSE 30240
30061: GO 30063
30063: DISABLE
30064: LD_INT 0
30066: PPUSH
30067: PPUSH
30068: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
30069: LD_ADDR_VAR 0 2
30073: PUSH
30074: LD_INT 22
30076: PUSH
30077: LD_OWVAR 2
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 33
30088: PUSH
30089: LD_INT 3
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PPUSH
30100: CALL_OW 69
30104: ST_TO_ADDR
// if not tmp then
30105: LD_VAR 0 2
30109: NOT
30110: IFFALSE 30114
// exit ;
30112: GO 30240
// side := 0 ;
30114: LD_ADDR_VAR 0 3
30118: PUSH
30119: LD_INT 0
30121: ST_TO_ADDR
// for i := 1 to 8 do
30122: LD_ADDR_VAR 0 1
30126: PUSH
30127: DOUBLE
30128: LD_INT 1
30130: DEC
30131: ST_TO_ADDR
30132: LD_INT 8
30134: PUSH
30135: FOR_TO
30136: IFFALSE 30184
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
30138: LD_OWVAR 2
30142: PUSH
30143: LD_VAR 0 1
30147: NONEQUAL
30148: PUSH
30149: LD_OWVAR 2
30153: PPUSH
30154: LD_VAR 0 1
30158: PPUSH
30159: CALL_OW 81
30163: PUSH
30164: LD_INT 2
30166: EQUAL
30167: AND
30168: IFFALSE 30182
// begin side := i ;
30170: LD_ADDR_VAR 0 3
30174: PUSH
30175: LD_VAR 0 1
30179: ST_TO_ADDR
// break ;
30180: GO 30184
// end ;
30182: GO 30135
30184: POP
30185: POP
// if not side then
30186: LD_VAR 0 3
30190: NOT
30191: IFFALSE 30195
// exit ;
30193: GO 30240
// for i := 1 to tmp do
30195: LD_ADDR_VAR 0 1
30199: PUSH
30200: DOUBLE
30201: LD_INT 1
30203: DEC
30204: ST_TO_ADDR
30205: LD_VAR 0 2
30209: PUSH
30210: FOR_TO
30211: IFFALSE 30238
// if Prob ( 60 ) then
30213: LD_INT 60
30215: PPUSH
30216: CALL_OW 13
30220: IFFALSE 30236
// SetSide ( i , side ) ;
30222: LD_VAR 0 1
30226: PPUSH
30227: LD_VAR 0 3
30231: PPUSH
30232: CALL_OW 235
30236: GO 30210
30238: POP
30239: POP
// end ;
30240: PPOPN 3
30242: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
30243: LD_EXP 84
30247: PUSH
30248: LD_EXP 97
30252: AND
30253: IFFALSE 30372
30255: GO 30257
30257: DISABLE
30258: LD_INT 0
30260: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
30261: LD_ADDR_VAR 0 1
30265: PUSH
30266: LD_INT 22
30268: PUSH
30269: LD_OWVAR 2
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 21
30280: PUSH
30281: LD_INT 1
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 3
30290: PUSH
30291: LD_INT 23
30293: PUSH
30294: LD_INT 0
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: LIST
30309: PPUSH
30310: CALL_OW 69
30314: PUSH
30315: FOR_IN
30316: IFFALSE 30370
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
30318: LD_VAR 0 1
30322: PPUSH
30323: CALL_OW 257
30327: PUSH
30328: LD_INT 1
30330: PUSH
30331: LD_INT 2
30333: PUSH
30334: LD_INT 3
30336: PUSH
30337: LD_INT 4
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: IN
30346: IFFALSE 30368
// SetClass ( un , rand ( 1 , 4 ) ) ;
30348: LD_VAR 0 1
30352: PPUSH
30353: LD_INT 1
30355: PPUSH
30356: LD_INT 4
30358: PPUSH
30359: CALL_OW 12
30363: PPUSH
30364: CALL_OW 336
30368: GO 30315
30370: POP
30371: POP
// end ;
30372: PPOPN 1
30374: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
30375: LD_EXP 84
30379: PUSH
30380: LD_EXP 96
30384: AND
30385: IFFALSE 30464
30387: GO 30389
30389: DISABLE
30390: LD_INT 0
30392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
30393: LD_ADDR_VAR 0 1
30397: PUSH
30398: LD_INT 22
30400: PUSH
30401: LD_OWVAR 2
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 21
30412: PUSH
30413: LD_INT 3
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PPUSH
30424: CALL_OW 69
30428: ST_TO_ADDR
// if not tmp then
30429: LD_VAR 0 1
30433: NOT
30434: IFFALSE 30438
// exit ;
30436: GO 30464
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
30438: LD_VAR 0 1
30442: PUSH
30443: LD_INT 1
30445: PPUSH
30446: LD_VAR 0 1
30450: PPUSH
30451: CALL_OW 12
30455: ARRAY
30456: PPUSH
30457: LD_INT 100
30459: PPUSH
30460: CALL_OW 234
// end ;
30464: PPOPN 1
30466: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
30467: LD_EXP 84
30471: PUSH
30472: LD_EXP 98
30476: AND
30477: IFFALSE 30575
30479: GO 30481
30481: DISABLE
30482: LD_INT 0
30484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30485: LD_ADDR_VAR 0 1
30489: PUSH
30490: LD_INT 22
30492: PUSH
30493: LD_OWVAR 2
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 21
30504: PUSH
30505: LD_INT 1
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PPUSH
30516: CALL_OW 69
30520: ST_TO_ADDR
// if not tmp then
30521: LD_VAR 0 1
30525: NOT
30526: IFFALSE 30530
// exit ;
30528: GO 30575
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
30530: LD_VAR 0 1
30534: PUSH
30535: LD_INT 1
30537: PPUSH
30538: LD_VAR 0 1
30542: PPUSH
30543: CALL_OW 12
30547: ARRAY
30548: PPUSH
30549: LD_INT 1
30551: PPUSH
30552: LD_INT 4
30554: PPUSH
30555: CALL_OW 12
30559: PPUSH
30560: LD_INT 3000
30562: PPUSH
30563: LD_INT 9000
30565: PPUSH
30566: CALL_OW 12
30570: PPUSH
30571: CALL_OW 492
// end ;
30575: PPOPN 1
30577: END
// every 0 0$1 trigger StreamModeActive and sDepot do
30578: LD_EXP 84
30582: PUSH
30583: LD_EXP 99
30587: AND
30588: IFFALSE 30608
30590: GO 30592
30592: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
30593: LD_INT 1
30595: PPUSH
30596: LD_OWVAR 2
30600: PPUSH
30601: LD_INT 0
30603: PPUSH
30604: CALL_OW 324
30608: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
30609: LD_EXP 84
30613: PUSH
30614: LD_EXP 100
30618: AND
30619: IFFALSE 30702
30621: GO 30623
30623: DISABLE
30624: LD_INT 0
30626: PPUSH
30627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
30628: LD_ADDR_VAR 0 2
30632: PUSH
30633: LD_INT 22
30635: PUSH
30636: LD_OWVAR 2
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 21
30647: PUSH
30648: LD_INT 3
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PPUSH
30659: CALL_OW 69
30663: ST_TO_ADDR
// if not tmp then
30664: LD_VAR 0 2
30668: NOT
30669: IFFALSE 30673
// exit ;
30671: GO 30702
// for i in tmp do
30673: LD_ADDR_VAR 0 1
30677: PUSH
30678: LD_VAR 0 2
30682: PUSH
30683: FOR_IN
30684: IFFALSE 30700
// SetBLevel ( i , 10 ) ;
30686: LD_VAR 0 1
30690: PPUSH
30691: LD_INT 10
30693: PPUSH
30694: CALL_OW 241
30698: GO 30683
30700: POP
30701: POP
// end ;
30702: PPOPN 2
30704: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
30705: LD_EXP 84
30709: PUSH
30710: LD_EXP 101
30714: AND
30715: IFFALSE 30826
30717: GO 30719
30719: DISABLE
30720: LD_INT 0
30722: PPUSH
30723: PPUSH
30724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30725: LD_ADDR_VAR 0 3
30729: PUSH
30730: LD_INT 22
30732: PUSH
30733: LD_OWVAR 2
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 25
30744: PUSH
30745: LD_INT 1
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PPUSH
30756: CALL_OW 69
30760: ST_TO_ADDR
// if not tmp then
30761: LD_VAR 0 3
30765: NOT
30766: IFFALSE 30770
// exit ;
30768: GO 30826
// un := tmp [ rand ( 1 , tmp ) ] ;
30770: LD_ADDR_VAR 0 2
30774: PUSH
30775: LD_VAR 0 3
30779: PUSH
30780: LD_INT 1
30782: PPUSH
30783: LD_VAR 0 3
30787: PPUSH
30788: CALL_OW 12
30792: ARRAY
30793: ST_TO_ADDR
// if Crawls ( un ) then
30794: LD_VAR 0 2
30798: PPUSH
30799: CALL_OW 318
30803: IFFALSE 30814
// ComWalk ( un ) ;
30805: LD_VAR 0 2
30809: PPUSH
30810: CALL_OW 138
// SetClass ( un , class_sniper ) ;
30814: LD_VAR 0 2
30818: PPUSH
30819: LD_INT 5
30821: PPUSH
30822: CALL_OW 336
// end ;
30826: PPOPN 3
30828: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
30829: LD_EXP 84
30833: PUSH
30834: LD_EXP 102
30838: AND
30839: PUSH
30840: LD_OWVAR 67
30844: PUSH
30845: LD_INT 3
30847: LESS
30848: AND
30849: IFFALSE 30868
30851: GO 30853
30853: DISABLE
// Difficulty := Difficulty + 1 ;
30854: LD_ADDR_OWVAR 67
30858: PUSH
30859: LD_OWVAR 67
30863: PUSH
30864: LD_INT 1
30866: PLUS
30867: ST_TO_ADDR
30868: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
30869: LD_EXP 84
30873: PUSH
30874: LD_EXP 103
30878: AND
30879: IFFALSE 30982
30881: GO 30883
30883: DISABLE
30884: LD_INT 0
30886: PPUSH
// begin for i := 1 to 5 do
30887: LD_ADDR_VAR 0 1
30891: PUSH
30892: DOUBLE
30893: LD_INT 1
30895: DEC
30896: ST_TO_ADDR
30897: LD_INT 5
30899: PUSH
30900: FOR_TO
30901: IFFALSE 30980
// begin uc_nation := nation_nature ;
30903: LD_ADDR_OWVAR 21
30907: PUSH
30908: LD_INT 0
30910: ST_TO_ADDR
// uc_side := 0 ;
30911: LD_ADDR_OWVAR 20
30915: PUSH
30916: LD_INT 0
30918: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
30919: LD_ADDR_OWVAR 29
30923: PUSH
30924: LD_INT 12
30926: PUSH
30927: LD_INT 12
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: ST_TO_ADDR
// hc_agressivity := 20 ;
30934: LD_ADDR_OWVAR 35
30938: PUSH
30939: LD_INT 20
30941: ST_TO_ADDR
// hc_class := class_tiger ;
30942: LD_ADDR_OWVAR 28
30946: PUSH
30947: LD_INT 14
30949: ST_TO_ADDR
// hc_gallery :=  ;
30950: LD_ADDR_OWVAR 33
30954: PUSH
30955: LD_STRING 
30957: ST_TO_ADDR
// hc_name :=  ;
30958: LD_ADDR_OWVAR 26
30962: PUSH
30963: LD_STRING 
30965: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
30966: CALL_OW 44
30970: PPUSH
30971: LD_INT 0
30973: PPUSH
30974: CALL_OW 51
// end ;
30978: GO 30900
30980: POP
30981: POP
// end ;
30982: PPOPN 1
30984: END
// every 0 0$1 trigger StreamModeActive and sBomb do
30985: LD_EXP 84
30989: PUSH
30990: LD_EXP 104
30994: AND
30995: IFFALSE 31004
30997: GO 30999
30999: DISABLE
// StreamSibBomb ;
31000: CALL 31005 0 0
31004: END
// export function StreamSibBomb ; var i , x , y ; begin
31005: LD_INT 0
31007: PPUSH
31008: PPUSH
31009: PPUSH
31010: PPUSH
// result := false ;
31011: LD_ADDR_VAR 0 1
31015: PUSH
31016: LD_INT 0
31018: ST_TO_ADDR
// for i := 1 to 16 do
31019: LD_ADDR_VAR 0 2
31023: PUSH
31024: DOUBLE
31025: LD_INT 1
31027: DEC
31028: ST_TO_ADDR
31029: LD_INT 16
31031: PUSH
31032: FOR_TO
31033: IFFALSE 31232
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31035: LD_ADDR_VAR 0 3
31039: PUSH
31040: LD_INT 10
31042: PUSH
31043: LD_INT 20
31045: PUSH
31046: LD_INT 30
31048: PUSH
31049: LD_INT 40
31051: PUSH
31052: LD_INT 50
31054: PUSH
31055: LD_INT 60
31057: PUSH
31058: LD_INT 70
31060: PUSH
31061: LD_INT 80
31063: PUSH
31064: LD_INT 90
31066: PUSH
31067: LD_INT 100
31069: PUSH
31070: LD_INT 110
31072: PUSH
31073: LD_INT 120
31075: PUSH
31076: LD_INT 130
31078: PUSH
31079: LD_INT 140
31081: PUSH
31082: LD_INT 150
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 1
31104: PPUSH
31105: LD_INT 15
31107: PPUSH
31108: CALL_OW 12
31112: ARRAY
31113: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31114: LD_ADDR_VAR 0 4
31118: PUSH
31119: LD_INT 10
31121: PUSH
31122: LD_INT 20
31124: PUSH
31125: LD_INT 30
31127: PUSH
31128: LD_INT 40
31130: PUSH
31131: LD_INT 50
31133: PUSH
31134: LD_INT 60
31136: PUSH
31137: LD_INT 70
31139: PUSH
31140: LD_INT 80
31142: PUSH
31143: LD_INT 90
31145: PUSH
31146: LD_INT 100
31148: PUSH
31149: LD_INT 110
31151: PUSH
31152: LD_INT 120
31154: PUSH
31155: LD_INT 130
31157: PUSH
31158: LD_INT 140
31160: PUSH
31161: LD_INT 150
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 1
31183: PPUSH
31184: LD_INT 15
31186: PPUSH
31187: CALL_OW 12
31191: ARRAY
31192: ST_TO_ADDR
// if ValidHex ( x , y ) then
31193: LD_VAR 0 3
31197: PPUSH
31198: LD_VAR 0 4
31202: PPUSH
31203: CALL_OW 488
31207: IFFALSE 31230
// begin result := [ x , y ] ;
31209: LD_ADDR_VAR 0 1
31213: PUSH
31214: LD_VAR 0 3
31218: PUSH
31219: LD_VAR 0 4
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: ST_TO_ADDR
// break ;
31228: GO 31232
// end ; end ;
31230: GO 31032
31232: POP
31233: POP
// if result then
31234: LD_VAR 0 1
31238: IFFALSE 31298
// begin ToLua ( playSibBomb() ) ;
31240: LD_STRING playSibBomb()
31242: PPUSH
31243: CALL_OW 559
// wait ( 0 0$14 ) ;
31247: LD_INT 490
31249: PPUSH
31250: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
31254: LD_VAR 0 1
31258: PUSH
31259: LD_INT 1
31261: ARRAY
31262: PPUSH
31263: LD_VAR 0 1
31267: PUSH
31268: LD_INT 2
31270: ARRAY
31271: PPUSH
31272: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
31276: LD_VAR 0 1
31280: PUSH
31281: LD_INT 1
31283: ARRAY
31284: PPUSH
31285: LD_VAR 0 1
31289: PUSH
31290: LD_INT 2
31292: ARRAY
31293: PPUSH
31294: CALL_OW 429
// end ; end ;
31298: LD_VAR 0 1
31302: RET
// every 0 0$1 trigger StreamModeActive and sReset do
31303: LD_EXP 84
31307: PUSH
31308: LD_EXP 106
31312: AND
31313: IFFALSE 31325
31315: GO 31317
31317: DISABLE
// YouLost (  ) ;
31318: LD_STRING 
31320: PPUSH
31321: CALL_OW 104
31325: END
// every 0 0$1 trigger StreamModeActive and sFog do
31326: LD_EXP 84
31330: PUSH
31331: LD_EXP 105
31335: AND
31336: IFFALSE 31350
31338: GO 31340
31340: DISABLE
// FogOff ( your_side ) ;
31341: LD_OWVAR 2
31345: PPUSH
31346: CALL_OW 344
31350: END
// every 0 0$1 trigger StreamModeActive and sSun do
31351: LD_EXP 84
31355: PUSH
31356: LD_EXP 107
31360: AND
31361: IFFALSE 31389
31363: GO 31365
31365: DISABLE
// begin solar_recharge_percent := 0 ;
31366: LD_ADDR_OWVAR 79
31370: PUSH
31371: LD_INT 0
31373: ST_TO_ADDR
// wait ( 5 5$00 ) ;
31374: LD_INT 10500
31376: PPUSH
31377: CALL_OW 67
// solar_recharge_percent := 100 ;
31381: LD_ADDR_OWVAR 79
31385: PUSH
31386: LD_INT 100
31388: ST_TO_ADDR
// end ;
31389: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
31390: LD_EXP 84
31394: PUSH
31395: LD_EXP 108
31399: AND
31400: IFFALSE 31639
31402: GO 31404
31404: DISABLE
31405: LD_INT 0
31407: PPUSH
31408: PPUSH
31409: PPUSH
// begin tmp := [ ] ;
31410: LD_ADDR_VAR 0 3
31414: PUSH
31415: EMPTY
31416: ST_TO_ADDR
// for i := 1 to 6 do
31417: LD_ADDR_VAR 0 1
31421: PUSH
31422: DOUBLE
31423: LD_INT 1
31425: DEC
31426: ST_TO_ADDR
31427: LD_INT 6
31429: PUSH
31430: FOR_TO
31431: IFFALSE 31536
// begin uc_nation := nation_nature ;
31433: LD_ADDR_OWVAR 21
31437: PUSH
31438: LD_INT 0
31440: ST_TO_ADDR
// uc_side := 0 ;
31441: LD_ADDR_OWVAR 20
31445: PUSH
31446: LD_INT 0
31448: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
31449: LD_ADDR_OWVAR 29
31453: PUSH
31454: LD_INT 12
31456: PUSH
31457: LD_INT 12
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: ST_TO_ADDR
// hc_agressivity := 20 ;
31464: LD_ADDR_OWVAR 35
31468: PUSH
31469: LD_INT 20
31471: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
31472: LD_ADDR_OWVAR 28
31476: PUSH
31477: LD_INT 17
31479: ST_TO_ADDR
// hc_gallery :=  ;
31480: LD_ADDR_OWVAR 33
31484: PUSH
31485: LD_STRING 
31487: ST_TO_ADDR
// hc_name :=  ;
31488: LD_ADDR_OWVAR 26
31492: PUSH
31493: LD_STRING 
31495: ST_TO_ADDR
// un := CreateHuman ;
31496: LD_ADDR_VAR 0 2
31500: PUSH
31501: CALL_OW 44
31505: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
31506: LD_VAR 0 2
31510: PPUSH
31511: LD_INT 1
31513: PPUSH
31514: CALL_OW 51
// tmp := tmp ^ un ;
31518: LD_ADDR_VAR 0 3
31522: PUSH
31523: LD_VAR 0 3
31527: PUSH
31528: LD_VAR 0 2
31532: ADD
31533: ST_TO_ADDR
// end ;
31534: GO 31430
31536: POP
31537: POP
// repeat wait ( 0 0$1 ) ;
31538: LD_INT 35
31540: PPUSH
31541: CALL_OW 67
// for un in tmp do
31545: LD_ADDR_VAR 0 2
31549: PUSH
31550: LD_VAR 0 3
31554: PUSH
31555: FOR_IN
31556: IFFALSE 31630
// begin if IsDead ( un ) then
31558: LD_VAR 0 2
31562: PPUSH
31563: CALL_OW 301
31567: IFFALSE 31587
// begin tmp := tmp diff un ;
31569: LD_ADDR_VAR 0 3
31573: PUSH
31574: LD_VAR 0 3
31578: PUSH
31579: LD_VAR 0 2
31583: DIFF
31584: ST_TO_ADDR
// continue ;
31585: GO 31555
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
31587: LD_VAR 0 2
31591: PPUSH
31592: LD_INT 3
31594: PUSH
31595: LD_INT 22
31597: PUSH
31598: LD_INT 0
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PPUSH
31609: CALL_OW 69
31613: PPUSH
31614: LD_VAR 0 2
31618: PPUSH
31619: CALL_OW 74
31623: PPUSH
31624: CALL_OW 115
// end ;
31628: GO 31555
31630: POP
31631: POP
// until not tmp ;
31632: LD_VAR 0 3
31636: NOT
31637: IFFALSE 31538
// end ;
31639: PPOPN 3
31641: END
// every 0 0$1 trigger StreamModeActive and sTroll do
31642: LD_EXP 84
31646: PUSH
31647: LD_EXP 109
31651: AND
31652: IFFALSE 31706
31654: GO 31656
31656: DISABLE
// begin ToLua ( displayTroll(); ) ;
31657: LD_STRING displayTroll();
31659: PPUSH
31660: CALL_OW 559
// wait ( 3 3$00 ) ;
31664: LD_INT 6300
31666: PPUSH
31667: CALL_OW 67
// ToLua ( hideTroll(); ) ;
31671: LD_STRING hideTroll();
31673: PPUSH
31674: CALL_OW 559
// wait ( 1 1$00 ) ;
31678: LD_INT 2100
31680: PPUSH
31681: CALL_OW 67
// ToLua ( displayTroll(); ) ;
31685: LD_STRING displayTroll();
31687: PPUSH
31688: CALL_OW 559
// wait ( 1 1$00 ) ;
31692: LD_INT 2100
31694: PPUSH
31695: CALL_OW 67
// ToLua ( hideTroll(); ) ;
31699: LD_STRING hideTroll();
31701: PPUSH
31702: CALL_OW 559
// end ;
31706: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
31707: LD_EXP 84
31711: PUSH
31712: LD_EXP 110
31716: AND
31717: IFFALSE 31780
31719: GO 31721
31721: DISABLE
31722: LD_INT 0
31724: PPUSH
// begin p := 0 ;
31725: LD_ADDR_VAR 0 1
31729: PUSH
31730: LD_INT 0
31732: ST_TO_ADDR
// repeat game_speed := 1 ;
31733: LD_ADDR_OWVAR 65
31737: PUSH
31738: LD_INT 1
31740: ST_TO_ADDR
// wait ( 0 0$1 ) ;
31741: LD_INT 35
31743: PPUSH
31744: CALL_OW 67
// p := p + 1 ;
31748: LD_ADDR_VAR 0 1
31752: PUSH
31753: LD_VAR 0 1
31757: PUSH
31758: LD_INT 1
31760: PLUS
31761: ST_TO_ADDR
// until p >= 60 ;
31762: LD_VAR 0 1
31766: PUSH
31767: LD_INT 60
31769: GREATEREQUAL
31770: IFFALSE 31733
// game_speed := 4 ;
31772: LD_ADDR_OWVAR 65
31776: PUSH
31777: LD_INT 4
31779: ST_TO_ADDR
// end ;
31780: PPOPN 1
31782: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
31783: LD_EXP 84
31787: PUSH
31788: LD_EXP 111
31792: AND
31793: IFFALSE 31939
31795: GO 31797
31797: DISABLE
31798: LD_INT 0
31800: PPUSH
31801: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31802: LD_ADDR_VAR 0 1
31806: PUSH
31807: LD_INT 22
31809: PUSH
31810: LD_OWVAR 2
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 2
31821: PUSH
31822: LD_INT 30
31824: PUSH
31825: LD_INT 0
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: PUSH
31832: LD_INT 30
31834: PUSH
31835: LD_INT 1
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: LIST
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PPUSH
31851: CALL_OW 69
31855: ST_TO_ADDR
// if not depot then
31856: LD_VAR 0 1
31860: NOT
31861: IFFALSE 31865
// exit ;
31863: GO 31939
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
31865: LD_ADDR_VAR 0 2
31869: PUSH
31870: LD_VAR 0 1
31874: PUSH
31875: LD_INT 1
31877: PPUSH
31878: LD_VAR 0 1
31882: PPUSH
31883: CALL_OW 12
31887: ARRAY
31888: PPUSH
31889: CALL_OW 274
31893: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
31894: LD_VAR 0 2
31898: PPUSH
31899: LD_INT 1
31901: PPUSH
31902: LD_INT 0
31904: PPUSH
31905: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
31909: LD_VAR 0 2
31913: PPUSH
31914: LD_INT 2
31916: PPUSH
31917: LD_INT 0
31919: PPUSH
31920: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
31924: LD_VAR 0 2
31928: PPUSH
31929: LD_INT 3
31931: PPUSH
31932: LD_INT 0
31934: PPUSH
31935: CALL_OW 277
// end ;
31939: PPOPN 2
31941: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
31942: LD_EXP 84
31946: PUSH
31947: LD_EXP 112
31951: AND
31952: IFFALSE 32049
31954: GO 31956
31956: DISABLE
31957: LD_INT 0
31959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31960: LD_ADDR_VAR 0 1
31964: PUSH
31965: LD_INT 22
31967: PUSH
31968: LD_OWVAR 2
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 21
31979: PUSH
31980: LD_INT 1
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 3
31989: PUSH
31990: LD_INT 23
31992: PUSH
31993: LD_INT 0
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: LIST
32008: PPUSH
32009: CALL_OW 69
32013: ST_TO_ADDR
// if not tmp then
32014: LD_VAR 0 1
32018: NOT
32019: IFFALSE 32023
// exit ;
32021: GO 32049
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
32023: LD_VAR 0 1
32027: PUSH
32028: LD_INT 1
32030: PPUSH
32031: LD_VAR 0 1
32035: PPUSH
32036: CALL_OW 12
32040: ARRAY
32041: PPUSH
32042: LD_INT 200
32044: PPUSH
32045: CALL_OW 234
// end ;
32049: PPOPN 1
32051: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
32052: LD_EXP 84
32056: PUSH
32057: LD_EXP 113
32061: AND
32062: IFFALSE 32141
32064: GO 32066
32066: DISABLE
32067: LD_INT 0
32069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
32070: LD_ADDR_VAR 0 1
32074: PUSH
32075: LD_INT 22
32077: PUSH
32078: LD_OWVAR 2
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 21
32089: PUSH
32090: LD_INT 2
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PPUSH
32101: CALL_OW 69
32105: ST_TO_ADDR
// if not tmp then
32106: LD_VAR 0 1
32110: NOT
32111: IFFALSE 32115
// exit ;
32113: GO 32141
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
32115: LD_VAR 0 1
32119: PUSH
32120: LD_INT 1
32122: PPUSH
32123: LD_VAR 0 1
32127: PPUSH
32128: CALL_OW 12
32132: ARRAY
32133: PPUSH
32134: LD_INT 60
32136: PPUSH
32137: CALL_OW 234
// end ;
32141: PPOPN 1
32143: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
32144: LD_EXP 84
32148: PUSH
32149: LD_EXP 114
32153: AND
32154: IFFALSE 32253
32156: GO 32158
32158: DISABLE
32159: LD_INT 0
32161: PPUSH
32162: PPUSH
// begin enable ;
32163: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
32164: LD_ADDR_VAR 0 1
32168: PUSH
32169: LD_INT 22
32171: PUSH
32172: LD_OWVAR 2
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 61
32183: PUSH
32184: EMPTY
32185: LIST
32186: PUSH
32187: LD_INT 33
32189: PUSH
32190: LD_INT 2
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: LIST
32201: PPUSH
32202: CALL_OW 69
32206: ST_TO_ADDR
// if not tmp then
32207: LD_VAR 0 1
32211: NOT
32212: IFFALSE 32216
// exit ;
32214: GO 32253
// for i in tmp do
32216: LD_ADDR_VAR 0 2
32220: PUSH
32221: LD_VAR 0 1
32225: PUSH
32226: FOR_IN
32227: IFFALSE 32251
// if IsControledBy ( i ) then
32229: LD_VAR 0 2
32233: PPUSH
32234: CALL_OW 312
32238: IFFALSE 32249
// ComUnlink ( i ) ;
32240: LD_VAR 0 2
32244: PPUSH
32245: CALL_OW 136
32249: GO 32226
32251: POP
32252: POP
// end ;
32253: PPOPN 2
32255: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
32256: LD_EXP 84
32260: PUSH
32261: LD_EXP 115
32265: AND
32266: IFFALSE 32406
32268: GO 32270
32270: DISABLE
32271: LD_INT 0
32273: PPUSH
32274: PPUSH
// begin ToLua ( displayPowell(); ) ;
32275: LD_STRING displayPowell();
32277: PPUSH
32278: CALL_OW 559
// uc_side := 0 ;
32282: LD_ADDR_OWVAR 20
32286: PUSH
32287: LD_INT 0
32289: ST_TO_ADDR
// uc_nation := 2 ;
32290: LD_ADDR_OWVAR 21
32294: PUSH
32295: LD_INT 2
32297: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
32298: LD_ADDR_OWVAR 37
32302: PUSH
32303: LD_INT 14
32305: ST_TO_ADDR
// vc_engine := engine_siberite ;
32306: LD_ADDR_OWVAR 39
32310: PUSH
32311: LD_INT 3
32313: ST_TO_ADDR
// vc_control := control_apeman ;
32314: LD_ADDR_OWVAR 38
32318: PUSH
32319: LD_INT 5
32321: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
32322: LD_ADDR_OWVAR 40
32326: PUSH
32327: LD_INT 29
32329: ST_TO_ADDR
// un := CreateVehicle ;
32330: LD_ADDR_VAR 0 2
32334: PUSH
32335: CALL_OW 45
32339: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32340: LD_VAR 0 2
32344: PPUSH
32345: LD_INT 1
32347: PPUSH
32348: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
32352: LD_INT 35
32354: PPUSH
32355: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
32359: LD_VAR 0 2
32363: PPUSH
32364: LD_INT 22
32366: PUSH
32367: LD_OWVAR 2
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PPUSH
32376: CALL_OW 69
32380: PPUSH
32381: LD_VAR 0 2
32385: PPUSH
32386: CALL_OW 74
32390: PPUSH
32391: CALL_OW 115
// until IsDead ( un ) ;
32395: LD_VAR 0 2
32399: PPUSH
32400: CALL_OW 301
32404: IFFALSE 32352
// end ;
32406: PPOPN 2
32408: END
// every 0 0$1 trigger StreamModeActive and sStu do
32409: LD_EXP 84
32413: PUSH
32414: LD_EXP 123
32418: AND
32419: IFFALSE 32435
32421: GO 32423
32423: DISABLE
// begin ToLua ( displayStucuk(); ) ;
32424: LD_STRING displayStucuk();
32426: PPUSH
32427: CALL_OW 559
// ResetFog ;
32431: CALL_OW 335
// end ;
32435: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
32436: LD_EXP 84
32440: PUSH
32441: LD_EXP 116
32445: AND
32446: IFFALSE 32587
32448: GO 32450
32450: DISABLE
32451: LD_INT 0
32453: PPUSH
32454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
32455: LD_ADDR_VAR 0 2
32459: PUSH
32460: LD_INT 22
32462: PUSH
32463: LD_OWVAR 2
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 21
32474: PUSH
32475: LD_INT 1
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PPUSH
32486: CALL_OW 69
32490: ST_TO_ADDR
// if not tmp then
32491: LD_VAR 0 2
32495: NOT
32496: IFFALSE 32500
// exit ;
32498: GO 32587
// un := tmp [ rand ( 1 , tmp ) ] ;
32500: LD_ADDR_VAR 0 1
32504: PUSH
32505: LD_VAR 0 2
32509: PUSH
32510: LD_INT 1
32512: PPUSH
32513: LD_VAR 0 2
32517: PPUSH
32518: CALL_OW 12
32522: ARRAY
32523: ST_TO_ADDR
// SetSide ( un , 0 ) ;
32524: LD_VAR 0 1
32528: PPUSH
32529: LD_INT 0
32531: PPUSH
32532: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
32536: LD_VAR 0 1
32540: PPUSH
32541: LD_OWVAR 3
32545: PUSH
32546: LD_VAR 0 1
32550: DIFF
32551: PPUSH
32552: LD_VAR 0 1
32556: PPUSH
32557: CALL_OW 74
32561: PPUSH
32562: CALL_OW 115
// wait ( 0 0$20 ) ;
32566: LD_INT 700
32568: PPUSH
32569: CALL_OW 67
// SetSide ( un , your_side ) ;
32573: LD_VAR 0 1
32577: PPUSH
32578: LD_OWVAR 2
32582: PPUSH
32583: CALL_OW 235
// end ;
32587: PPOPN 2
32589: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
32590: LD_EXP 84
32594: PUSH
32595: LD_EXP 117
32599: AND
32600: IFFALSE 32706
32602: GO 32604
32604: DISABLE
32605: LD_INT 0
32607: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32608: LD_ADDR_VAR 0 1
32612: PUSH
32613: LD_INT 22
32615: PUSH
32616: LD_OWVAR 2
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 2
32627: PUSH
32628: LD_INT 30
32630: PUSH
32631: LD_INT 0
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 30
32640: PUSH
32641: LD_INT 1
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: LIST
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PPUSH
32657: CALL_OW 69
32661: ST_TO_ADDR
// if not depot then
32662: LD_VAR 0 1
32666: NOT
32667: IFFALSE 32671
// exit ;
32669: GO 32706
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
32671: LD_VAR 0 1
32675: PUSH
32676: LD_INT 1
32678: ARRAY
32679: PPUSH
32680: CALL_OW 250
32684: PPUSH
32685: LD_VAR 0 1
32689: PUSH
32690: LD_INT 1
32692: ARRAY
32693: PPUSH
32694: CALL_OW 251
32698: PPUSH
32699: LD_INT 70
32701: PPUSH
32702: CALL_OW 495
// end ;
32706: PPOPN 1
32708: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
32709: LD_EXP 84
32713: PUSH
32714: LD_EXP 118
32718: AND
32719: IFFALSE 32930
32721: GO 32723
32723: DISABLE
32724: LD_INT 0
32726: PPUSH
32727: PPUSH
32728: PPUSH
32729: PPUSH
32730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
32731: LD_ADDR_VAR 0 5
32735: PUSH
32736: LD_INT 22
32738: PUSH
32739: LD_OWVAR 2
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 21
32750: PUSH
32751: LD_INT 1
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PPUSH
32762: CALL_OW 69
32766: ST_TO_ADDR
// if not tmp then
32767: LD_VAR 0 5
32771: NOT
32772: IFFALSE 32776
// exit ;
32774: GO 32930
// for i in tmp do
32776: LD_ADDR_VAR 0 1
32780: PUSH
32781: LD_VAR 0 5
32785: PUSH
32786: FOR_IN
32787: IFFALSE 32928
// begin d := rand ( 0 , 5 ) ;
32789: LD_ADDR_VAR 0 4
32793: PUSH
32794: LD_INT 0
32796: PPUSH
32797: LD_INT 5
32799: PPUSH
32800: CALL_OW 12
32804: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
32805: LD_ADDR_VAR 0 2
32809: PUSH
32810: LD_VAR 0 1
32814: PPUSH
32815: CALL_OW 250
32819: PPUSH
32820: LD_VAR 0 4
32824: PPUSH
32825: LD_INT 3
32827: PPUSH
32828: LD_INT 12
32830: PPUSH
32831: CALL_OW 12
32835: PPUSH
32836: CALL_OW 272
32840: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
32841: LD_ADDR_VAR 0 3
32845: PUSH
32846: LD_VAR 0 1
32850: PPUSH
32851: CALL_OW 251
32855: PPUSH
32856: LD_VAR 0 4
32860: PPUSH
32861: LD_INT 3
32863: PPUSH
32864: LD_INT 12
32866: PPUSH
32867: CALL_OW 12
32871: PPUSH
32872: CALL_OW 273
32876: ST_TO_ADDR
// if ValidHex ( x , y ) then
32877: LD_VAR 0 2
32881: PPUSH
32882: LD_VAR 0 3
32886: PPUSH
32887: CALL_OW 488
32891: IFFALSE 32926
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
32893: LD_VAR 0 1
32897: PPUSH
32898: LD_VAR 0 2
32902: PPUSH
32903: LD_VAR 0 3
32907: PPUSH
32908: LD_INT 3
32910: PPUSH
32911: LD_INT 6
32913: PPUSH
32914: CALL_OW 12
32918: PPUSH
32919: LD_INT 1
32921: PPUSH
32922: CALL_OW 483
// end ;
32926: GO 32786
32928: POP
32929: POP
// end ;
32930: PPOPN 5
32932: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
32933: LD_EXP 84
32937: PUSH
32938: LD_EXP 119
32942: AND
32943: IFFALSE 33037
32945: GO 32947
32947: DISABLE
32948: LD_INT 0
32950: PPUSH
32951: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
32952: LD_ADDR_VAR 0 2
32956: PUSH
32957: LD_INT 22
32959: PUSH
32960: LD_OWVAR 2
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 32
32971: PUSH
32972: LD_INT 1
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 21
32981: PUSH
32982: LD_INT 2
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: LIST
32993: PPUSH
32994: CALL_OW 69
32998: ST_TO_ADDR
// if not tmp then
32999: LD_VAR 0 2
33003: NOT
33004: IFFALSE 33008
// exit ;
33006: GO 33037
// for i in tmp do
33008: LD_ADDR_VAR 0 1
33012: PUSH
33013: LD_VAR 0 2
33017: PUSH
33018: FOR_IN
33019: IFFALSE 33035
// SetFuel ( i , 0 ) ;
33021: LD_VAR 0 1
33025: PPUSH
33026: LD_INT 0
33028: PPUSH
33029: CALL_OW 240
33033: GO 33018
33035: POP
33036: POP
// end ;
33037: PPOPN 2
33039: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
33040: LD_EXP 84
33044: PUSH
33045: LD_EXP 120
33049: AND
33050: IFFALSE 33116
33052: GO 33054
33054: DISABLE
33055: LD_INT 0
33057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33058: LD_ADDR_VAR 0 1
33062: PUSH
33063: LD_INT 22
33065: PUSH
33066: LD_OWVAR 2
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 30
33077: PUSH
33078: LD_INT 29
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PPUSH
33089: CALL_OW 69
33093: ST_TO_ADDR
// if not tmp then
33094: LD_VAR 0 1
33098: NOT
33099: IFFALSE 33103
// exit ;
33101: GO 33116
// DestroyUnit ( tmp [ 1 ] ) ;
33103: LD_VAR 0 1
33107: PUSH
33108: LD_INT 1
33110: ARRAY
33111: PPUSH
33112: CALL_OW 65
// end ;
33116: PPOPN 1
33118: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
33119: LD_EXP 84
33123: PUSH
33124: LD_EXP 122
33128: AND
33129: IFFALSE 33258
33131: GO 33133
33133: DISABLE
33134: LD_INT 0
33136: PPUSH
// begin uc_side := 0 ;
33137: LD_ADDR_OWVAR 20
33141: PUSH
33142: LD_INT 0
33144: ST_TO_ADDR
// uc_nation := nation_arabian ;
33145: LD_ADDR_OWVAR 21
33149: PUSH
33150: LD_INT 2
33152: ST_TO_ADDR
// hc_gallery :=  ;
33153: LD_ADDR_OWVAR 33
33157: PUSH
33158: LD_STRING 
33160: ST_TO_ADDR
// hc_name :=  ;
33161: LD_ADDR_OWVAR 26
33165: PUSH
33166: LD_STRING 
33168: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
33169: LD_INT 1
33171: PPUSH
33172: LD_INT 11
33174: PPUSH
33175: LD_INT 10
33177: PPUSH
33178: CALL_OW 380
// un := CreateHuman ;
33182: LD_ADDR_VAR 0 1
33186: PUSH
33187: CALL_OW 44
33191: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33192: LD_VAR 0 1
33196: PPUSH
33197: LD_INT 1
33199: PPUSH
33200: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
33204: LD_INT 35
33206: PPUSH
33207: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
33211: LD_VAR 0 1
33215: PPUSH
33216: LD_INT 22
33218: PUSH
33219: LD_OWVAR 2
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PPUSH
33228: CALL_OW 69
33232: PPUSH
33233: LD_VAR 0 1
33237: PPUSH
33238: CALL_OW 74
33242: PPUSH
33243: CALL_OW 115
// until IsDead ( un ) ;
33247: LD_VAR 0 1
33251: PPUSH
33252: CALL_OW 301
33256: IFFALSE 33204
// end ;
33258: PPOPN 1
33260: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
33261: LD_EXP 84
33265: PUSH
33266: LD_EXP 124
33270: AND
33271: IFFALSE 33283
33273: GO 33275
33275: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
33276: LD_STRING earthquake(getX(game), 0, 32)
33278: PPUSH
33279: CALL_OW 559
33283: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
33284: LD_EXP 84
33288: PUSH
33289: LD_EXP 125
33293: AND
33294: IFFALSE 33385
33296: GO 33298
33298: DISABLE
33299: LD_INT 0
33301: PPUSH
// begin enable ;
33302: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
33303: LD_ADDR_VAR 0 1
33307: PUSH
33308: LD_INT 22
33310: PUSH
33311: LD_OWVAR 2
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 21
33322: PUSH
33323: LD_INT 2
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 33
33332: PUSH
33333: LD_INT 3
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: LIST
33344: PPUSH
33345: CALL_OW 69
33349: ST_TO_ADDR
// if not tmp then
33350: LD_VAR 0 1
33354: NOT
33355: IFFALSE 33359
// exit ;
33357: GO 33385
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
33359: LD_VAR 0 1
33363: PUSH
33364: LD_INT 1
33366: PPUSH
33367: LD_VAR 0 1
33371: PPUSH
33372: CALL_OW 12
33376: ARRAY
33377: PPUSH
33378: LD_INT 1
33380: PPUSH
33381: CALL_OW 234
// end ;
33385: PPOPN 1
33387: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
33388: LD_EXP 84
33392: PUSH
33393: LD_EXP 126
33397: AND
33398: IFFALSE 33539
33400: GO 33402
33402: DISABLE
33403: LD_INT 0
33405: PPUSH
33406: PPUSH
33407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33408: LD_ADDR_VAR 0 3
33412: PUSH
33413: LD_INT 22
33415: PUSH
33416: LD_OWVAR 2
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 25
33427: PUSH
33428: LD_INT 1
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PPUSH
33439: CALL_OW 69
33443: ST_TO_ADDR
// if not tmp then
33444: LD_VAR 0 3
33448: NOT
33449: IFFALSE 33453
// exit ;
33451: GO 33539
// un := tmp [ rand ( 1 , tmp ) ] ;
33453: LD_ADDR_VAR 0 2
33457: PUSH
33458: LD_VAR 0 3
33462: PUSH
33463: LD_INT 1
33465: PPUSH
33466: LD_VAR 0 3
33470: PPUSH
33471: CALL_OW 12
33475: ARRAY
33476: ST_TO_ADDR
// if Crawls ( un ) then
33477: LD_VAR 0 2
33481: PPUSH
33482: CALL_OW 318
33486: IFFALSE 33497
// ComWalk ( un ) ;
33488: LD_VAR 0 2
33492: PPUSH
33493: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
33497: LD_VAR 0 2
33501: PPUSH
33502: LD_INT 9
33504: PPUSH
33505: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
33509: LD_INT 28
33511: PPUSH
33512: LD_OWVAR 2
33516: PPUSH
33517: LD_INT 2
33519: PPUSH
33520: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
33524: LD_INT 29
33526: PPUSH
33527: LD_OWVAR 2
33531: PPUSH
33532: LD_INT 2
33534: PPUSH
33535: CALL_OW 322
// end ;
33539: PPOPN 3
33541: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
33542: LD_EXP 84
33546: PUSH
33547: LD_EXP 127
33551: AND
33552: IFFALSE 33663
33554: GO 33556
33556: DISABLE
33557: LD_INT 0
33559: PPUSH
33560: PPUSH
33561: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33562: LD_ADDR_VAR 0 3
33566: PUSH
33567: LD_INT 22
33569: PUSH
33570: LD_OWVAR 2
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 25
33581: PUSH
33582: LD_INT 1
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PPUSH
33593: CALL_OW 69
33597: ST_TO_ADDR
// if not tmp then
33598: LD_VAR 0 3
33602: NOT
33603: IFFALSE 33607
// exit ;
33605: GO 33663
// un := tmp [ rand ( 1 , tmp ) ] ;
33607: LD_ADDR_VAR 0 2
33611: PUSH
33612: LD_VAR 0 3
33616: PUSH
33617: LD_INT 1
33619: PPUSH
33620: LD_VAR 0 3
33624: PPUSH
33625: CALL_OW 12
33629: ARRAY
33630: ST_TO_ADDR
// if Crawls ( un ) then
33631: LD_VAR 0 2
33635: PPUSH
33636: CALL_OW 318
33640: IFFALSE 33651
// ComWalk ( un ) ;
33642: LD_VAR 0 2
33646: PPUSH
33647: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33651: LD_VAR 0 2
33655: PPUSH
33656: LD_INT 8
33658: PPUSH
33659: CALL_OW 336
// end ;
33663: PPOPN 3
33665: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
33666: LD_EXP 84
33670: PUSH
33671: LD_EXP 128
33675: AND
33676: IFFALSE 33820
33678: GO 33680
33680: DISABLE
33681: LD_INT 0
33683: PPUSH
33684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
33685: LD_ADDR_VAR 0 2
33689: PUSH
33690: LD_INT 22
33692: PUSH
33693: LD_OWVAR 2
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 21
33704: PUSH
33705: LD_INT 2
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 2
33714: PUSH
33715: LD_INT 34
33717: PUSH
33718: LD_INT 12
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 34
33727: PUSH
33728: LD_INT 51
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 34
33737: PUSH
33738: LD_INT 32
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: LIST
33755: PPUSH
33756: CALL_OW 69
33760: ST_TO_ADDR
// if not tmp then
33761: LD_VAR 0 2
33765: NOT
33766: IFFALSE 33770
// exit ;
33768: GO 33820
// for i in tmp do
33770: LD_ADDR_VAR 0 1
33774: PUSH
33775: LD_VAR 0 2
33779: PUSH
33780: FOR_IN
33781: IFFALSE 33818
// if GetCargo ( i , mat_artifact ) = 0 then
33783: LD_VAR 0 1
33787: PPUSH
33788: LD_INT 4
33790: PPUSH
33791: CALL_OW 289
33795: PUSH
33796: LD_INT 0
33798: EQUAL
33799: IFFALSE 33816
// SetCargo ( i , mat_siberit , 100 ) ;
33801: LD_VAR 0 1
33805: PPUSH
33806: LD_INT 3
33808: PPUSH
33809: LD_INT 100
33811: PPUSH
33812: CALL_OW 290
33816: GO 33780
33818: POP
33819: POP
// end ;
33820: PPOPN 2
33822: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
33823: LD_EXP 84
33827: PUSH
33828: LD_EXP 129
33832: AND
33833: IFFALSE 34016
33835: GO 33837
33837: DISABLE
33838: LD_INT 0
33840: PPUSH
33841: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33842: LD_ADDR_VAR 0 2
33846: PUSH
33847: LD_INT 22
33849: PUSH
33850: LD_OWVAR 2
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PPUSH
33859: CALL_OW 69
33863: ST_TO_ADDR
// if not tmp then
33864: LD_VAR 0 2
33868: NOT
33869: IFFALSE 33873
// exit ;
33871: GO 34016
// for i := 1 to 2 do
33873: LD_ADDR_VAR 0 1
33877: PUSH
33878: DOUBLE
33879: LD_INT 1
33881: DEC
33882: ST_TO_ADDR
33883: LD_INT 2
33885: PUSH
33886: FOR_TO
33887: IFFALSE 34014
// begin uc_side := your_side ;
33889: LD_ADDR_OWVAR 20
33893: PUSH
33894: LD_OWVAR 2
33898: ST_TO_ADDR
// uc_nation := nation_american ;
33899: LD_ADDR_OWVAR 21
33903: PUSH
33904: LD_INT 1
33906: ST_TO_ADDR
// vc_chassis := us_morphling ;
33907: LD_ADDR_OWVAR 37
33911: PUSH
33912: LD_INT 5
33914: ST_TO_ADDR
// vc_engine := engine_siberite ;
33915: LD_ADDR_OWVAR 39
33919: PUSH
33920: LD_INT 3
33922: ST_TO_ADDR
// vc_control := control_computer ;
33923: LD_ADDR_OWVAR 38
33927: PUSH
33928: LD_INT 3
33930: ST_TO_ADDR
// vc_weapon := us_double_laser ;
33931: LD_ADDR_OWVAR 40
33935: PUSH
33936: LD_INT 10
33938: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
33939: LD_VAR 0 2
33943: PUSH
33944: LD_INT 1
33946: ARRAY
33947: PPUSH
33948: CALL_OW 310
33952: NOT
33953: IFFALSE 34000
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
33955: CALL_OW 45
33959: PPUSH
33960: LD_VAR 0 2
33964: PUSH
33965: LD_INT 1
33967: ARRAY
33968: PPUSH
33969: CALL_OW 250
33973: PPUSH
33974: LD_VAR 0 2
33978: PUSH
33979: LD_INT 1
33981: ARRAY
33982: PPUSH
33983: CALL_OW 251
33987: PPUSH
33988: LD_INT 12
33990: PPUSH
33991: LD_INT 1
33993: PPUSH
33994: CALL_OW 50
33998: GO 34012
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
34000: CALL_OW 45
34004: PPUSH
34005: LD_INT 1
34007: PPUSH
34008: CALL_OW 51
// end ;
34012: GO 33886
34014: POP
34015: POP
// end ;
34016: PPOPN 2
34018: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
34019: LD_EXP 84
34023: PUSH
34024: LD_EXP 130
34028: AND
34029: IFFALSE 34251
34031: GO 34033
34033: DISABLE
34034: LD_INT 0
34036: PPUSH
34037: PPUSH
34038: PPUSH
34039: PPUSH
34040: PPUSH
34041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34042: LD_ADDR_VAR 0 6
34046: PUSH
34047: LD_INT 22
34049: PUSH
34050: LD_OWVAR 2
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 21
34061: PUSH
34062: LD_INT 1
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 3
34071: PUSH
34072: LD_INT 23
34074: PUSH
34075: LD_INT 0
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: LIST
34090: PPUSH
34091: CALL_OW 69
34095: ST_TO_ADDR
// if not tmp then
34096: LD_VAR 0 6
34100: NOT
34101: IFFALSE 34105
// exit ;
34103: GO 34251
// s1 := rand ( 1 , 4 ) ;
34105: LD_ADDR_VAR 0 2
34109: PUSH
34110: LD_INT 1
34112: PPUSH
34113: LD_INT 4
34115: PPUSH
34116: CALL_OW 12
34120: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
34121: LD_ADDR_VAR 0 4
34125: PUSH
34126: LD_VAR 0 6
34130: PUSH
34131: LD_INT 1
34133: ARRAY
34134: PPUSH
34135: LD_VAR 0 2
34139: PPUSH
34140: CALL_OW 259
34144: ST_TO_ADDR
// if s1 = 1 then
34145: LD_VAR 0 2
34149: PUSH
34150: LD_INT 1
34152: EQUAL
34153: IFFALSE 34173
// s2 := rand ( 2 , 4 ) else
34155: LD_ADDR_VAR 0 3
34159: PUSH
34160: LD_INT 2
34162: PPUSH
34163: LD_INT 4
34165: PPUSH
34166: CALL_OW 12
34170: ST_TO_ADDR
34171: GO 34181
// s2 := 1 ;
34173: LD_ADDR_VAR 0 3
34177: PUSH
34178: LD_INT 1
34180: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
34181: LD_ADDR_VAR 0 5
34185: PUSH
34186: LD_VAR 0 6
34190: PUSH
34191: LD_INT 1
34193: ARRAY
34194: PPUSH
34195: LD_VAR 0 3
34199: PPUSH
34200: CALL_OW 259
34204: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
34205: LD_VAR 0 6
34209: PUSH
34210: LD_INT 1
34212: ARRAY
34213: PPUSH
34214: LD_VAR 0 2
34218: PPUSH
34219: LD_VAR 0 5
34223: PPUSH
34224: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
34228: LD_VAR 0 6
34232: PUSH
34233: LD_INT 1
34235: ARRAY
34236: PPUSH
34237: LD_VAR 0 3
34241: PPUSH
34242: LD_VAR 0 4
34246: PPUSH
34247: CALL_OW 237
// end ;
34251: PPOPN 6
34253: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
34254: LD_EXP 84
34258: PUSH
34259: LD_EXP 131
34263: AND
34264: IFFALSE 34343
34266: GO 34268
34268: DISABLE
34269: LD_INT 0
34271: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
34272: LD_ADDR_VAR 0 1
34276: PUSH
34277: LD_INT 22
34279: PUSH
34280: LD_OWVAR 2
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 30
34291: PUSH
34292: LD_INT 3
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PPUSH
34303: CALL_OW 69
34307: ST_TO_ADDR
// if not tmp then
34308: LD_VAR 0 1
34312: NOT
34313: IFFALSE 34317
// exit ;
34315: GO 34343
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
34317: LD_VAR 0 1
34321: PUSH
34322: LD_INT 1
34324: PPUSH
34325: LD_VAR 0 1
34329: PPUSH
34330: CALL_OW 12
34334: ARRAY
34335: PPUSH
34336: LD_INT 1
34338: PPUSH
34339: CALL_OW 234
// end ;
34343: PPOPN 1
34345: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
34346: LD_EXP 84
34350: PUSH
34351: LD_EXP 132
34355: AND
34356: IFFALSE 34468
34358: GO 34360
34360: DISABLE
34361: LD_INT 0
34363: PPUSH
34364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
34365: LD_ADDR_VAR 0 2
34369: PUSH
34370: LD_INT 22
34372: PUSH
34373: LD_OWVAR 2
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 2
34384: PUSH
34385: LD_INT 30
34387: PUSH
34388: LD_INT 27
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 30
34397: PUSH
34398: LD_INT 26
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 30
34407: PUSH
34408: LD_INT 28
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PPUSH
34425: CALL_OW 69
34429: ST_TO_ADDR
// if not tmp then
34430: LD_VAR 0 2
34434: NOT
34435: IFFALSE 34439
// exit ;
34437: GO 34468
// for i in tmp do
34439: LD_ADDR_VAR 0 1
34443: PUSH
34444: LD_VAR 0 2
34448: PUSH
34449: FOR_IN
34450: IFFALSE 34466
// SetLives ( i , 1 ) ;
34452: LD_VAR 0 1
34456: PPUSH
34457: LD_INT 1
34459: PPUSH
34460: CALL_OW 234
34464: GO 34449
34466: POP
34467: POP
// end ;
34468: PPOPN 2
34470: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
34471: LD_EXP 84
34475: PUSH
34476: LD_EXP 133
34480: AND
34481: IFFALSE 34755
34483: GO 34485
34485: DISABLE
34486: LD_INT 0
34488: PPUSH
34489: PPUSH
34490: PPUSH
// begin i := rand ( 1 , 7 ) ;
34491: LD_ADDR_VAR 0 1
34495: PUSH
34496: LD_INT 1
34498: PPUSH
34499: LD_INT 7
34501: PPUSH
34502: CALL_OW 12
34506: ST_TO_ADDR
// case i of 1 :
34507: LD_VAR 0 1
34511: PUSH
34512: LD_INT 1
34514: DOUBLE
34515: EQUAL
34516: IFTRUE 34520
34518: GO 34530
34520: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
34521: LD_STRING earthquake(getX(game), 0, 32)
34523: PPUSH
34524: CALL_OW 559
34528: GO 34755
34530: LD_INT 2
34532: DOUBLE
34533: EQUAL
34534: IFTRUE 34538
34536: GO 34552
34538: POP
// begin ToLua ( displayStucuk(); ) ;
34539: LD_STRING displayStucuk();
34541: PPUSH
34542: CALL_OW 559
// ResetFog ;
34546: CALL_OW 335
// end ; 3 :
34550: GO 34755
34552: LD_INT 3
34554: DOUBLE
34555: EQUAL
34556: IFTRUE 34560
34558: GO 34664
34560: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34561: LD_ADDR_VAR 0 2
34565: PUSH
34566: LD_INT 22
34568: PUSH
34569: LD_OWVAR 2
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 25
34580: PUSH
34581: LD_INT 1
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PPUSH
34592: CALL_OW 69
34596: ST_TO_ADDR
// if not tmp then
34597: LD_VAR 0 2
34601: NOT
34602: IFFALSE 34606
// exit ;
34604: GO 34755
// un := tmp [ rand ( 1 , tmp ) ] ;
34606: LD_ADDR_VAR 0 3
34610: PUSH
34611: LD_VAR 0 2
34615: PUSH
34616: LD_INT 1
34618: PPUSH
34619: LD_VAR 0 2
34623: PPUSH
34624: CALL_OW 12
34628: ARRAY
34629: ST_TO_ADDR
// if Crawls ( un ) then
34630: LD_VAR 0 3
34634: PPUSH
34635: CALL_OW 318
34639: IFFALSE 34650
// ComWalk ( un ) ;
34641: LD_VAR 0 3
34645: PPUSH
34646: CALL_OW 138
// SetClass ( un , class_mortar ) ;
34650: LD_VAR 0 3
34654: PPUSH
34655: LD_INT 8
34657: PPUSH
34658: CALL_OW 336
// end ; 4 :
34662: GO 34755
34664: LD_INT 4
34666: DOUBLE
34667: EQUAL
34668: IFTRUE 34672
34670: GO 34733
34672: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
34673: LD_ADDR_VAR 0 2
34677: PUSH
34678: LD_INT 22
34680: PUSH
34681: LD_OWVAR 2
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 30
34692: PUSH
34693: LD_INT 29
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PPUSH
34704: CALL_OW 69
34708: ST_TO_ADDR
// if not tmp then
34709: LD_VAR 0 2
34713: NOT
34714: IFFALSE 34718
// exit ;
34716: GO 34755
// DestroyUnit ( tmp [ 1 ] ) ;
34718: LD_VAR 0 2
34722: PUSH
34723: LD_INT 1
34725: ARRAY
34726: PPUSH
34727: CALL_OW 65
// end ; 5 .. 7 :
34731: GO 34755
34733: LD_INT 5
34735: DOUBLE
34736: GREATEREQUAL
34737: IFFALSE 34745
34739: LD_INT 7
34741: DOUBLE
34742: LESSEQUAL
34743: IFTRUE 34747
34745: GO 34754
34747: POP
// StreamSibBomb ; end ;
34748: CALL 31005 0 0
34752: GO 34755
34754: POP
// end ;
34755: PPOPN 3
34757: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
34758: LD_EXP 84
34762: PUSH
34763: LD_EXP 134
34767: AND
34768: IFFALSE 34924
34770: GO 34772
34772: DISABLE
34773: LD_INT 0
34775: PPUSH
34776: PPUSH
34777: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
34778: LD_ADDR_VAR 0 2
34782: PUSH
34783: LD_INT 81
34785: PUSH
34786: LD_OWVAR 2
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 2
34797: PUSH
34798: LD_INT 21
34800: PUSH
34801: LD_INT 1
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 21
34810: PUSH
34811: LD_INT 2
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: LIST
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PPUSH
34827: CALL_OW 69
34831: ST_TO_ADDR
// if not tmp then
34832: LD_VAR 0 2
34836: NOT
34837: IFFALSE 34841
// exit ;
34839: GO 34924
// p := 0 ;
34841: LD_ADDR_VAR 0 3
34845: PUSH
34846: LD_INT 0
34848: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
34849: LD_INT 35
34851: PPUSH
34852: CALL_OW 67
// p := p + 1 ;
34856: LD_ADDR_VAR 0 3
34860: PUSH
34861: LD_VAR 0 3
34865: PUSH
34866: LD_INT 1
34868: PLUS
34869: ST_TO_ADDR
// for i in tmp do
34870: LD_ADDR_VAR 0 1
34874: PUSH
34875: LD_VAR 0 2
34879: PUSH
34880: FOR_IN
34881: IFFALSE 34912
// if GetLives ( i ) < 1000 then
34883: LD_VAR 0 1
34887: PPUSH
34888: CALL_OW 256
34892: PUSH
34893: LD_INT 1000
34895: LESS
34896: IFFALSE 34910
// SetLives ( i , 1000 ) ;
34898: LD_VAR 0 1
34902: PPUSH
34903: LD_INT 1000
34905: PPUSH
34906: CALL_OW 234
34910: GO 34880
34912: POP
34913: POP
// until p > 20 ;
34914: LD_VAR 0 3
34918: PUSH
34919: LD_INT 20
34921: GREATER
34922: IFFALSE 34849
// end ;
34924: PPOPN 3
34926: END
// every 0 0$1 trigger StreamModeActive and sTime do
34927: LD_EXP 84
34931: PUSH
34932: LD_EXP 135
34936: AND
34937: IFFALSE 34972
34939: GO 34941
34941: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
34942: LD_INT 28
34944: PPUSH
34945: LD_OWVAR 2
34949: PPUSH
34950: LD_INT 2
34952: PPUSH
34953: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
34957: LD_INT 30
34959: PPUSH
34960: LD_OWVAR 2
34964: PPUSH
34965: LD_INT 2
34967: PPUSH
34968: CALL_OW 322
// end ;
34972: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
34973: LD_EXP 84
34977: PUSH
34978: LD_EXP 136
34982: AND
34983: IFFALSE 35104
34985: GO 34987
34987: DISABLE
34988: LD_INT 0
34990: PPUSH
34991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34992: LD_ADDR_VAR 0 2
34996: PUSH
34997: LD_INT 22
34999: PUSH
35000: LD_OWVAR 2
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 21
35011: PUSH
35012: LD_INT 1
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 3
35021: PUSH
35022: LD_INT 23
35024: PUSH
35025: LD_INT 0
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: LIST
35040: PPUSH
35041: CALL_OW 69
35045: ST_TO_ADDR
// if not tmp then
35046: LD_VAR 0 2
35050: NOT
35051: IFFALSE 35055
// exit ;
35053: GO 35104
// for i in tmp do
35055: LD_ADDR_VAR 0 1
35059: PUSH
35060: LD_VAR 0 2
35064: PUSH
35065: FOR_IN
35066: IFFALSE 35102
// begin if Crawls ( i ) then
35068: LD_VAR 0 1
35072: PPUSH
35073: CALL_OW 318
35077: IFFALSE 35088
// ComWalk ( i ) ;
35079: LD_VAR 0 1
35083: PPUSH
35084: CALL_OW 138
// SetClass ( i , 2 ) ;
35088: LD_VAR 0 1
35092: PPUSH
35093: LD_INT 2
35095: PPUSH
35096: CALL_OW 336
// end ;
35100: GO 35065
35102: POP
35103: POP
// end ;
35104: PPOPN 2
35106: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
35107: LD_EXP 84
35111: PUSH
35112: LD_EXP 137
35116: AND
35117: IFFALSE 35398
35119: GO 35121
35121: DISABLE
35122: LD_INT 0
35124: PPUSH
35125: PPUSH
35126: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
35127: LD_OWVAR 2
35131: PPUSH
35132: LD_INT 9
35134: PPUSH
35135: LD_INT 1
35137: PPUSH
35138: LD_INT 1
35140: PPUSH
35141: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
35145: LD_INT 9
35147: PPUSH
35148: LD_OWVAR 2
35152: PPUSH
35153: CALL_OW 343
// uc_side := 9 ;
35157: LD_ADDR_OWVAR 20
35161: PUSH
35162: LD_INT 9
35164: ST_TO_ADDR
// uc_nation := 2 ;
35165: LD_ADDR_OWVAR 21
35169: PUSH
35170: LD_INT 2
35172: ST_TO_ADDR
// hc_name := Dark Warrior ;
35173: LD_ADDR_OWVAR 26
35177: PUSH
35178: LD_STRING Dark Warrior
35180: ST_TO_ADDR
// hc_gallery :=  ;
35181: LD_ADDR_OWVAR 33
35185: PUSH
35186: LD_STRING 
35188: ST_TO_ADDR
// hc_noskilllimit := true ;
35189: LD_ADDR_OWVAR 76
35193: PUSH
35194: LD_INT 1
35196: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
35197: LD_ADDR_OWVAR 31
35201: PUSH
35202: LD_INT 30
35204: PUSH
35205: LD_INT 30
35207: PUSH
35208: LD_INT 30
35210: PUSH
35211: LD_INT 30
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: ST_TO_ADDR
// un := CreateHuman ;
35220: LD_ADDR_VAR 0 3
35224: PUSH
35225: CALL_OW 44
35229: ST_TO_ADDR
// hc_noskilllimit := false ;
35230: LD_ADDR_OWVAR 76
35234: PUSH
35235: LD_INT 0
35237: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
35238: LD_VAR 0 3
35242: PPUSH
35243: LD_INT 1
35245: PPUSH
35246: CALL_OW 51
// p := 0 ;
35250: LD_ADDR_VAR 0 2
35254: PUSH
35255: LD_INT 0
35257: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35258: LD_INT 35
35260: PPUSH
35261: CALL_OW 67
// p := p + 1 ;
35265: LD_ADDR_VAR 0 2
35269: PUSH
35270: LD_VAR 0 2
35274: PUSH
35275: LD_INT 1
35277: PLUS
35278: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
35279: LD_VAR 0 3
35283: PPUSH
35284: CALL_OW 256
35288: PUSH
35289: LD_INT 1000
35291: LESS
35292: IFFALSE 35306
// SetLives ( un , 1000 ) ;
35294: LD_VAR 0 3
35298: PPUSH
35299: LD_INT 1000
35301: PPUSH
35302: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
35306: LD_VAR 0 3
35310: PPUSH
35311: LD_INT 81
35313: PUSH
35314: LD_OWVAR 2
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 91
35325: PUSH
35326: LD_VAR 0 3
35330: PUSH
35331: LD_INT 30
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: LIST
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PPUSH
35343: CALL_OW 69
35347: PPUSH
35348: LD_VAR 0 3
35352: PPUSH
35353: CALL_OW 74
35357: PPUSH
35358: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
35362: LD_VAR 0 2
35366: PUSH
35367: LD_INT 60
35369: GREATER
35370: PUSH
35371: LD_VAR 0 3
35375: PPUSH
35376: CALL_OW 301
35380: OR
35381: IFFALSE 35258
// if un then
35383: LD_VAR 0 3
35387: IFFALSE 35398
// RemoveUnit ( un ) ;
35389: LD_VAR 0 3
35393: PPUSH
35394: CALL_OW 64
// end ;
35398: PPOPN 3
35400: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
35401: LD_INT 0
35403: PPUSH
// case cmd of 301 :
35404: LD_VAR 0 1
35408: PUSH
35409: LD_INT 301
35411: DOUBLE
35412: EQUAL
35413: IFTRUE 35417
35415: GO 35449
35417: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
35418: LD_VAR 0 6
35422: PPUSH
35423: LD_VAR 0 7
35427: PPUSH
35428: LD_VAR 0 8
35432: PPUSH
35433: LD_VAR 0 4
35437: PPUSH
35438: LD_VAR 0 5
35442: PPUSH
35443: CALL 36650 0 5
35447: GO 35570
35449: LD_INT 302
35451: DOUBLE
35452: EQUAL
35453: IFTRUE 35457
35455: GO 35494
35457: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
35458: LD_VAR 0 6
35462: PPUSH
35463: LD_VAR 0 7
35467: PPUSH
35468: LD_VAR 0 8
35472: PPUSH
35473: LD_VAR 0 9
35477: PPUSH
35478: LD_VAR 0 4
35482: PPUSH
35483: LD_VAR 0 5
35487: PPUSH
35488: CALL 36741 0 6
35492: GO 35570
35494: LD_INT 303
35496: DOUBLE
35497: EQUAL
35498: IFTRUE 35502
35500: GO 35539
35502: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
35503: LD_VAR 0 6
35507: PPUSH
35508: LD_VAR 0 7
35512: PPUSH
35513: LD_VAR 0 8
35517: PPUSH
35518: LD_VAR 0 9
35522: PPUSH
35523: LD_VAR 0 4
35527: PPUSH
35528: LD_VAR 0 5
35532: PPUSH
35533: CALL 35575 0 6
35537: GO 35570
35539: LD_INT 304
35541: DOUBLE
35542: EQUAL
35543: IFTRUE 35547
35545: GO 35569
35547: POP
// hHackTeleport ( unit , x , y ) ; end ;
35548: LD_VAR 0 2
35552: PPUSH
35553: LD_VAR 0 4
35557: PPUSH
35558: LD_VAR 0 5
35562: PPUSH
35563: CALL 37334 0 3
35567: GO 35570
35569: POP
// end ;
35570: LD_VAR 0 12
35574: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
35575: LD_INT 0
35577: PPUSH
35578: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
35579: LD_VAR 0 1
35583: PUSH
35584: LD_INT 1
35586: LESS
35587: PUSH
35588: LD_VAR 0 1
35592: PUSH
35593: LD_INT 3
35595: GREATER
35596: OR
35597: PUSH
35598: LD_VAR 0 5
35602: PPUSH
35603: LD_VAR 0 6
35607: PPUSH
35608: CALL_OW 428
35612: OR
35613: IFFALSE 35617
// exit ;
35615: GO 36337
// uc_side := your_side ;
35617: LD_ADDR_OWVAR 20
35621: PUSH
35622: LD_OWVAR 2
35626: ST_TO_ADDR
// uc_nation := nation ;
35627: LD_ADDR_OWVAR 21
35631: PUSH
35632: LD_VAR 0 1
35636: ST_TO_ADDR
// bc_level = 1 ;
35637: LD_ADDR_OWVAR 43
35641: PUSH
35642: LD_INT 1
35644: ST_TO_ADDR
// case btype of 1 :
35645: LD_VAR 0 2
35649: PUSH
35650: LD_INT 1
35652: DOUBLE
35653: EQUAL
35654: IFTRUE 35658
35656: GO 35669
35658: POP
// bc_type := b_depot ; 2 :
35659: LD_ADDR_OWVAR 42
35663: PUSH
35664: LD_INT 0
35666: ST_TO_ADDR
35667: GO 36281
35669: LD_INT 2
35671: DOUBLE
35672: EQUAL
35673: IFTRUE 35677
35675: GO 35688
35677: POP
// bc_type := b_warehouse ; 3 :
35678: LD_ADDR_OWVAR 42
35682: PUSH
35683: LD_INT 1
35685: ST_TO_ADDR
35686: GO 36281
35688: LD_INT 3
35690: DOUBLE
35691: EQUAL
35692: IFTRUE 35696
35694: GO 35707
35696: POP
// bc_type := b_lab ; 4 .. 9 :
35697: LD_ADDR_OWVAR 42
35701: PUSH
35702: LD_INT 6
35704: ST_TO_ADDR
35705: GO 36281
35707: LD_INT 4
35709: DOUBLE
35710: GREATEREQUAL
35711: IFFALSE 35719
35713: LD_INT 9
35715: DOUBLE
35716: LESSEQUAL
35717: IFTRUE 35721
35719: GO 35773
35721: POP
// begin bc_type := b_lab_half ;
35722: LD_ADDR_OWVAR 42
35726: PUSH
35727: LD_INT 7
35729: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
35730: LD_ADDR_OWVAR 44
35734: PUSH
35735: LD_INT 10
35737: PUSH
35738: LD_INT 11
35740: PUSH
35741: LD_INT 12
35743: PUSH
35744: LD_INT 15
35746: PUSH
35747: LD_INT 14
35749: PUSH
35750: LD_INT 13
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: PUSH
35761: LD_VAR 0 2
35765: PUSH
35766: LD_INT 3
35768: MINUS
35769: ARRAY
35770: ST_TO_ADDR
// end ; 10 .. 13 :
35771: GO 36281
35773: LD_INT 10
35775: DOUBLE
35776: GREATEREQUAL
35777: IFFALSE 35785
35779: LD_INT 13
35781: DOUBLE
35782: LESSEQUAL
35783: IFTRUE 35787
35785: GO 35864
35787: POP
// begin bc_type := b_lab_full ;
35788: LD_ADDR_OWVAR 42
35792: PUSH
35793: LD_INT 8
35795: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
35796: LD_ADDR_OWVAR 44
35800: PUSH
35801: LD_INT 10
35803: PUSH
35804: LD_INT 12
35806: PUSH
35807: LD_INT 14
35809: PUSH
35810: LD_INT 13
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: PUSH
35819: LD_VAR 0 2
35823: PUSH
35824: LD_INT 9
35826: MINUS
35827: ARRAY
35828: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
35829: LD_ADDR_OWVAR 45
35833: PUSH
35834: LD_INT 11
35836: PUSH
35837: LD_INT 15
35839: PUSH
35840: LD_INT 12
35842: PUSH
35843: LD_INT 15
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: PUSH
35852: LD_VAR 0 2
35856: PUSH
35857: LD_INT 9
35859: MINUS
35860: ARRAY
35861: ST_TO_ADDR
// end ; 14 :
35862: GO 36281
35864: LD_INT 14
35866: DOUBLE
35867: EQUAL
35868: IFTRUE 35872
35870: GO 35883
35872: POP
// bc_type := b_workshop ; 15 :
35873: LD_ADDR_OWVAR 42
35877: PUSH
35878: LD_INT 2
35880: ST_TO_ADDR
35881: GO 36281
35883: LD_INT 15
35885: DOUBLE
35886: EQUAL
35887: IFTRUE 35891
35889: GO 35902
35891: POP
// bc_type := b_factory ; 16 :
35892: LD_ADDR_OWVAR 42
35896: PUSH
35897: LD_INT 3
35899: ST_TO_ADDR
35900: GO 36281
35902: LD_INT 16
35904: DOUBLE
35905: EQUAL
35906: IFTRUE 35910
35908: GO 35921
35910: POP
// bc_type := b_ext_gun ; 17 :
35911: LD_ADDR_OWVAR 42
35915: PUSH
35916: LD_INT 17
35918: ST_TO_ADDR
35919: GO 36281
35921: LD_INT 17
35923: DOUBLE
35924: EQUAL
35925: IFTRUE 35929
35927: GO 35957
35929: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
35930: LD_ADDR_OWVAR 42
35934: PUSH
35935: LD_INT 19
35937: PUSH
35938: LD_INT 23
35940: PUSH
35941: LD_INT 19
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: LIST
35948: PUSH
35949: LD_VAR 0 1
35953: ARRAY
35954: ST_TO_ADDR
35955: GO 36281
35957: LD_INT 18
35959: DOUBLE
35960: EQUAL
35961: IFTRUE 35965
35963: GO 35976
35965: POP
// bc_type := b_ext_radar ; 19 :
35966: LD_ADDR_OWVAR 42
35970: PUSH
35971: LD_INT 20
35973: ST_TO_ADDR
35974: GO 36281
35976: LD_INT 19
35978: DOUBLE
35979: EQUAL
35980: IFTRUE 35984
35982: GO 35995
35984: POP
// bc_type := b_ext_radio ; 20 :
35985: LD_ADDR_OWVAR 42
35989: PUSH
35990: LD_INT 22
35992: ST_TO_ADDR
35993: GO 36281
35995: LD_INT 20
35997: DOUBLE
35998: EQUAL
35999: IFTRUE 36003
36001: GO 36014
36003: POP
// bc_type := b_ext_siberium ; 21 :
36004: LD_ADDR_OWVAR 42
36008: PUSH
36009: LD_INT 21
36011: ST_TO_ADDR
36012: GO 36281
36014: LD_INT 21
36016: DOUBLE
36017: EQUAL
36018: IFTRUE 36022
36020: GO 36033
36022: POP
// bc_type := b_ext_computer ; 22 :
36023: LD_ADDR_OWVAR 42
36027: PUSH
36028: LD_INT 24
36030: ST_TO_ADDR
36031: GO 36281
36033: LD_INT 22
36035: DOUBLE
36036: EQUAL
36037: IFTRUE 36041
36039: GO 36052
36041: POP
// bc_type := b_ext_track ; 23 :
36042: LD_ADDR_OWVAR 42
36046: PUSH
36047: LD_INT 16
36049: ST_TO_ADDR
36050: GO 36281
36052: LD_INT 23
36054: DOUBLE
36055: EQUAL
36056: IFTRUE 36060
36058: GO 36071
36060: POP
// bc_type := b_ext_laser ; 24 :
36061: LD_ADDR_OWVAR 42
36065: PUSH
36066: LD_INT 25
36068: ST_TO_ADDR
36069: GO 36281
36071: LD_INT 24
36073: DOUBLE
36074: EQUAL
36075: IFTRUE 36079
36077: GO 36090
36079: POP
// bc_type := b_control_tower ; 25 :
36080: LD_ADDR_OWVAR 42
36084: PUSH
36085: LD_INT 36
36087: ST_TO_ADDR
36088: GO 36281
36090: LD_INT 25
36092: DOUBLE
36093: EQUAL
36094: IFTRUE 36098
36096: GO 36109
36098: POP
// bc_type := b_breastwork ; 26 :
36099: LD_ADDR_OWVAR 42
36103: PUSH
36104: LD_INT 31
36106: ST_TO_ADDR
36107: GO 36281
36109: LD_INT 26
36111: DOUBLE
36112: EQUAL
36113: IFTRUE 36117
36115: GO 36128
36117: POP
// bc_type := b_bunker ; 27 :
36118: LD_ADDR_OWVAR 42
36122: PUSH
36123: LD_INT 32
36125: ST_TO_ADDR
36126: GO 36281
36128: LD_INT 27
36130: DOUBLE
36131: EQUAL
36132: IFTRUE 36136
36134: GO 36147
36136: POP
// bc_type := b_turret ; 28 :
36137: LD_ADDR_OWVAR 42
36141: PUSH
36142: LD_INT 33
36144: ST_TO_ADDR
36145: GO 36281
36147: LD_INT 28
36149: DOUBLE
36150: EQUAL
36151: IFTRUE 36155
36153: GO 36166
36155: POP
// bc_type := b_armoury ; 29 :
36156: LD_ADDR_OWVAR 42
36160: PUSH
36161: LD_INT 4
36163: ST_TO_ADDR
36164: GO 36281
36166: LD_INT 29
36168: DOUBLE
36169: EQUAL
36170: IFTRUE 36174
36172: GO 36185
36174: POP
// bc_type := b_barracks ; 30 :
36175: LD_ADDR_OWVAR 42
36179: PUSH
36180: LD_INT 5
36182: ST_TO_ADDR
36183: GO 36281
36185: LD_INT 30
36187: DOUBLE
36188: EQUAL
36189: IFTRUE 36193
36191: GO 36204
36193: POP
// bc_type := b_solar_power ; 31 :
36194: LD_ADDR_OWVAR 42
36198: PUSH
36199: LD_INT 27
36201: ST_TO_ADDR
36202: GO 36281
36204: LD_INT 31
36206: DOUBLE
36207: EQUAL
36208: IFTRUE 36212
36210: GO 36223
36212: POP
// bc_type := b_oil_power ; 32 :
36213: LD_ADDR_OWVAR 42
36217: PUSH
36218: LD_INT 26
36220: ST_TO_ADDR
36221: GO 36281
36223: LD_INT 32
36225: DOUBLE
36226: EQUAL
36227: IFTRUE 36231
36229: GO 36242
36231: POP
// bc_type := b_siberite_power ; 33 :
36232: LD_ADDR_OWVAR 42
36236: PUSH
36237: LD_INT 28
36239: ST_TO_ADDR
36240: GO 36281
36242: LD_INT 33
36244: DOUBLE
36245: EQUAL
36246: IFTRUE 36250
36248: GO 36261
36250: POP
// bc_type := b_oil_mine ; 34 :
36251: LD_ADDR_OWVAR 42
36255: PUSH
36256: LD_INT 29
36258: ST_TO_ADDR
36259: GO 36281
36261: LD_INT 34
36263: DOUBLE
36264: EQUAL
36265: IFTRUE 36269
36267: GO 36280
36269: POP
// bc_type := b_siberite_mine ; end ;
36270: LD_ADDR_OWVAR 42
36274: PUSH
36275: LD_INT 30
36277: ST_TO_ADDR
36278: GO 36281
36280: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
36281: LD_ADDR_VAR 0 8
36285: PUSH
36286: LD_VAR 0 5
36290: PPUSH
36291: LD_VAR 0 6
36295: PPUSH
36296: LD_VAR 0 3
36300: PPUSH
36301: CALL_OW 47
36305: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
36306: LD_OWVAR 42
36310: PUSH
36311: LD_INT 32
36313: PUSH
36314: LD_INT 33
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: IN
36321: IFFALSE 36337
// PlaceWeaponTurret ( b , weapon ) ;
36323: LD_VAR 0 8
36327: PPUSH
36328: LD_VAR 0 4
36332: PPUSH
36333: CALL_OW 431
// end ;
36337: LD_VAR 0 7
36341: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
36342: LD_INT 0
36344: PPUSH
36345: PPUSH
36346: PPUSH
36347: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36348: LD_ADDR_VAR 0 4
36352: PUSH
36353: LD_INT 22
36355: PUSH
36356: LD_OWVAR 2
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 2
36367: PUSH
36368: LD_INT 30
36370: PUSH
36371: LD_INT 0
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 30
36380: PUSH
36381: LD_INT 1
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: LIST
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PPUSH
36397: CALL_OW 69
36401: ST_TO_ADDR
// if not tmp then
36402: LD_VAR 0 4
36406: NOT
36407: IFFALSE 36411
// exit ;
36409: GO 36470
// for i in tmp do
36411: LD_ADDR_VAR 0 2
36415: PUSH
36416: LD_VAR 0 4
36420: PUSH
36421: FOR_IN
36422: IFFALSE 36468
// for j = 1 to 3 do
36424: LD_ADDR_VAR 0 3
36428: PUSH
36429: DOUBLE
36430: LD_INT 1
36432: DEC
36433: ST_TO_ADDR
36434: LD_INT 3
36436: PUSH
36437: FOR_TO
36438: IFFALSE 36464
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
36440: LD_VAR 0 2
36444: PPUSH
36445: CALL_OW 274
36449: PPUSH
36450: LD_VAR 0 3
36454: PPUSH
36455: LD_INT 99999
36457: PPUSH
36458: CALL_OW 277
36462: GO 36437
36464: POP
36465: POP
36466: GO 36421
36468: POP
36469: POP
// end ;
36470: LD_VAR 0 1
36474: RET
// export function hHackSetLevel10 ; var i , j ; begin
36475: LD_INT 0
36477: PPUSH
36478: PPUSH
36479: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
36480: LD_ADDR_VAR 0 2
36484: PUSH
36485: LD_INT 21
36487: PUSH
36488: LD_INT 1
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PPUSH
36495: CALL_OW 69
36499: PUSH
36500: FOR_IN
36501: IFFALSE 36553
// if IsSelected ( i ) then
36503: LD_VAR 0 2
36507: PPUSH
36508: CALL_OW 306
36512: IFFALSE 36551
// begin for j := 1 to 4 do
36514: LD_ADDR_VAR 0 3
36518: PUSH
36519: DOUBLE
36520: LD_INT 1
36522: DEC
36523: ST_TO_ADDR
36524: LD_INT 4
36526: PUSH
36527: FOR_TO
36528: IFFALSE 36549
// SetSkill ( i , j , 10 ) ;
36530: LD_VAR 0 2
36534: PPUSH
36535: LD_VAR 0 3
36539: PPUSH
36540: LD_INT 10
36542: PPUSH
36543: CALL_OW 237
36547: GO 36527
36549: POP
36550: POP
// end ;
36551: GO 36500
36553: POP
36554: POP
// end ;
36555: LD_VAR 0 1
36559: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
36560: LD_INT 0
36562: PPUSH
36563: PPUSH
36564: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
36565: LD_ADDR_VAR 0 2
36569: PUSH
36570: LD_INT 22
36572: PUSH
36573: LD_OWVAR 2
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 21
36584: PUSH
36585: LD_INT 1
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PPUSH
36596: CALL_OW 69
36600: PUSH
36601: FOR_IN
36602: IFFALSE 36643
// begin for j := 1 to 4 do
36604: LD_ADDR_VAR 0 3
36608: PUSH
36609: DOUBLE
36610: LD_INT 1
36612: DEC
36613: ST_TO_ADDR
36614: LD_INT 4
36616: PUSH
36617: FOR_TO
36618: IFFALSE 36639
// SetSkill ( i , j , 10 ) ;
36620: LD_VAR 0 2
36624: PPUSH
36625: LD_VAR 0 3
36629: PPUSH
36630: LD_INT 10
36632: PPUSH
36633: CALL_OW 237
36637: GO 36617
36639: POP
36640: POP
// end ;
36641: GO 36601
36643: POP
36644: POP
// end ;
36645: LD_VAR 0 1
36649: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
36650: LD_INT 0
36652: PPUSH
// uc_side := your_side ;
36653: LD_ADDR_OWVAR 20
36657: PUSH
36658: LD_OWVAR 2
36662: ST_TO_ADDR
// uc_nation := nation ;
36663: LD_ADDR_OWVAR 21
36667: PUSH
36668: LD_VAR 0 1
36672: ST_TO_ADDR
// InitHc ;
36673: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
36677: LD_INT 0
36679: PPUSH
36680: LD_VAR 0 2
36684: PPUSH
36685: LD_VAR 0 3
36689: PPUSH
36690: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
36694: LD_VAR 0 4
36698: PPUSH
36699: LD_VAR 0 5
36703: PPUSH
36704: CALL_OW 428
36708: PUSH
36709: LD_INT 0
36711: EQUAL
36712: IFFALSE 36736
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
36714: CALL_OW 44
36718: PPUSH
36719: LD_VAR 0 4
36723: PPUSH
36724: LD_VAR 0 5
36728: PPUSH
36729: LD_INT 1
36731: PPUSH
36732: CALL_OW 48
// end ;
36736: LD_VAR 0 6
36740: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
36741: LD_INT 0
36743: PPUSH
36744: PPUSH
// uc_side := your_side ;
36745: LD_ADDR_OWVAR 20
36749: PUSH
36750: LD_OWVAR 2
36754: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
36755: LD_VAR 0 1
36759: PUSH
36760: LD_INT 1
36762: PUSH
36763: LD_INT 2
36765: PUSH
36766: LD_INT 3
36768: PUSH
36769: LD_INT 4
36771: PUSH
36772: LD_INT 5
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: IN
36782: IFFALSE 36794
// uc_nation := nation_american else
36784: LD_ADDR_OWVAR 21
36788: PUSH
36789: LD_INT 1
36791: ST_TO_ADDR
36792: GO 36837
// if chassis in [ 11 , 12 , 13 , 14 ] then
36794: LD_VAR 0 1
36798: PUSH
36799: LD_INT 11
36801: PUSH
36802: LD_INT 12
36804: PUSH
36805: LD_INT 13
36807: PUSH
36808: LD_INT 14
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: IN
36817: IFFALSE 36829
// uc_nation := nation_arabian else
36819: LD_ADDR_OWVAR 21
36823: PUSH
36824: LD_INT 2
36826: ST_TO_ADDR
36827: GO 36837
// uc_nation := nation_russian ;
36829: LD_ADDR_OWVAR 21
36833: PUSH
36834: LD_INT 3
36836: ST_TO_ADDR
// vc_chassis := chassis ;
36837: LD_ADDR_OWVAR 37
36841: PUSH
36842: LD_VAR 0 1
36846: ST_TO_ADDR
// vc_engine := engine ;
36847: LD_ADDR_OWVAR 39
36851: PUSH
36852: LD_VAR 0 2
36856: ST_TO_ADDR
// vc_control := control ;
36857: LD_ADDR_OWVAR 38
36861: PUSH
36862: LD_VAR 0 3
36866: ST_TO_ADDR
// vc_weapon := weapon ;
36867: LD_ADDR_OWVAR 40
36871: PUSH
36872: LD_VAR 0 4
36876: ST_TO_ADDR
// un := CreateVehicle ;
36877: LD_ADDR_VAR 0 8
36881: PUSH
36882: CALL_OW 45
36886: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
36887: LD_VAR 0 8
36891: PPUSH
36892: LD_INT 0
36894: PPUSH
36895: LD_INT 5
36897: PPUSH
36898: CALL_OW 12
36902: PPUSH
36903: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
36907: LD_VAR 0 8
36911: PPUSH
36912: LD_VAR 0 5
36916: PPUSH
36917: LD_VAR 0 6
36921: PPUSH
36922: LD_INT 1
36924: PPUSH
36925: CALL_OW 48
// end ;
36929: LD_VAR 0 7
36933: RET
// export hInvincible ; every 1 do
36934: GO 36936
36936: DISABLE
// hInvincible := [ ] ;
36937: LD_ADDR_EXP 138
36941: PUSH
36942: EMPTY
36943: ST_TO_ADDR
36944: END
// every 10 do var i ;
36945: GO 36947
36947: DISABLE
36948: LD_INT 0
36950: PPUSH
// begin enable ;
36951: ENABLE
// if not hInvincible then
36952: LD_EXP 138
36956: NOT
36957: IFFALSE 36961
// exit ;
36959: GO 37005
// for i in hInvincible do
36961: LD_ADDR_VAR 0 1
36965: PUSH
36966: LD_EXP 138
36970: PUSH
36971: FOR_IN
36972: IFFALSE 37003
// if GetLives ( i ) < 1000 then
36974: LD_VAR 0 1
36978: PPUSH
36979: CALL_OW 256
36983: PUSH
36984: LD_INT 1000
36986: LESS
36987: IFFALSE 37001
// SetLives ( i , 1000 ) ;
36989: LD_VAR 0 1
36993: PPUSH
36994: LD_INT 1000
36996: PPUSH
36997: CALL_OW 234
37001: GO 36971
37003: POP
37004: POP
// end ;
37005: PPOPN 1
37007: END
// export function hHackInvincible ; var i ; begin
37008: LD_INT 0
37010: PPUSH
37011: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
37012: LD_ADDR_VAR 0 2
37016: PUSH
37017: LD_INT 2
37019: PUSH
37020: LD_INT 21
37022: PUSH
37023: LD_INT 1
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 21
37032: PUSH
37033: LD_INT 2
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: LIST
37044: PPUSH
37045: CALL_OW 69
37049: PUSH
37050: FOR_IN
37051: IFFALSE 37112
// if IsSelected ( i ) then
37053: LD_VAR 0 2
37057: PPUSH
37058: CALL_OW 306
37062: IFFALSE 37110
// begin if i in hInvincible then
37064: LD_VAR 0 2
37068: PUSH
37069: LD_EXP 138
37073: IN
37074: IFFALSE 37094
// hInvincible := hInvincible diff i else
37076: LD_ADDR_EXP 138
37080: PUSH
37081: LD_EXP 138
37085: PUSH
37086: LD_VAR 0 2
37090: DIFF
37091: ST_TO_ADDR
37092: GO 37110
// hInvincible := hInvincible union i ;
37094: LD_ADDR_EXP 138
37098: PUSH
37099: LD_EXP 138
37103: PUSH
37104: LD_VAR 0 2
37108: UNION
37109: ST_TO_ADDR
// end ;
37110: GO 37050
37112: POP
37113: POP
// end ;
37114: LD_VAR 0 1
37118: RET
// export function hHackInvisible ; var i , j ; begin
37119: LD_INT 0
37121: PPUSH
37122: PPUSH
37123: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
37124: LD_ADDR_VAR 0 2
37128: PUSH
37129: LD_INT 21
37131: PUSH
37132: LD_INT 1
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PPUSH
37139: CALL_OW 69
37143: PUSH
37144: FOR_IN
37145: IFFALSE 37169
// if IsSelected ( i ) then
37147: LD_VAR 0 2
37151: PPUSH
37152: CALL_OW 306
37156: IFFALSE 37167
// ComForceInvisible ( i ) ;
37158: LD_VAR 0 2
37162: PPUSH
37163: CALL_OW 496
37167: GO 37144
37169: POP
37170: POP
// end ;
37171: LD_VAR 0 1
37175: RET
// export function hHackChangeYourSide ; begin
37176: LD_INT 0
37178: PPUSH
// if your_side = 8 then
37179: LD_OWVAR 2
37183: PUSH
37184: LD_INT 8
37186: EQUAL
37187: IFFALSE 37199
// your_side := 0 else
37189: LD_ADDR_OWVAR 2
37193: PUSH
37194: LD_INT 0
37196: ST_TO_ADDR
37197: GO 37213
// your_side := your_side + 1 ;
37199: LD_ADDR_OWVAR 2
37203: PUSH
37204: LD_OWVAR 2
37208: PUSH
37209: LD_INT 1
37211: PLUS
37212: ST_TO_ADDR
// end ;
37213: LD_VAR 0 1
37217: RET
// export function hHackChangeUnitSide ; var i , j ; begin
37218: LD_INT 0
37220: PPUSH
37221: PPUSH
37222: PPUSH
// for i in all_units do
37223: LD_ADDR_VAR 0 2
37227: PUSH
37228: LD_OWVAR 3
37232: PUSH
37233: FOR_IN
37234: IFFALSE 37312
// if IsSelected ( i ) then
37236: LD_VAR 0 2
37240: PPUSH
37241: CALL_OW 306
37245: IFFALSE 37310
// begin j := GetSide ( i ) ;
37247: LD_ADDR_VAR 0 3
37251: PUSH
37252: LD_VAR 0 2
37256: PPUSH
37257: CALL_OW 255
37261: ST_TO_ADDR
// if j = 8 then
37262: LD_VAR 0 3
37266: PUSH
37267: LD_INT 8
37269: EQUAL
37270: IFFALSE 37282
// j := 0 else
37272: LD_ADDR_VAR 0 3
37276: PUSH
37277: LD_INT 0
37279: ST_TO_ADDR
37280: GO 37296
// j := j + 1 ;
37282: LD_ADDR_VAR 0 3
37286: PUSH
37287: LD_VAR 0 3
37291: PUSH
37292: LD_INT 1
37294: PLUS
37295: ST_TO_ADDR
// SetSide ( i , j ) ;
37296: LD_VAR 0 2
37300: PPUSH
37301: LD_VAR 0 3
37305: PPUSH
37306: CALL_OW 235
// end ;
37310: GO 37233
37312: POP
37313: POP
// end ;
37314: LD_VAR 0 1
37318: RET
// export function hHackFog ; begin
37319: LD_INT 0
37321: PPUSH
// FogOff ( true ) ;
37322: LD_INT 1
37324: PPUSH
37325: CALL_OW 344
// end ;
37329: LD_VAR 0 1
37333: RET
// export function hHackTeleport ( unit , x , y ) ; begin
37334: LD_INT 0
37336: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
37337: LD_VAR 0 1
37341: PPUSH
37342: LD_VAR 0 2
37346: PPUSH
37347: LD_VAR 0 3
37351: PPUSH
37352: LD_INT 1
37354: PPUSH
37355: LD_INT 1
37357: PPUSH
37358: CALL_OW 483
// CenterOnXY ( x , y ) ;
37362: LD_VAR 0 2
37366: PPUSH
37367: LD_VAR 0 3
37371: PPUSH
37372: CALL_OW 84
// end ; end_of_file
37376: LD_VAR 0 4
37380: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
37381: LD_INT 0
37383: PPUSH
37384: PPUSH
37385: PPUSH
37386: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
37387: LD_VAR 0 1
37391: PPUSH
37392: CALL_OW 264
37396: PUSH
37397: LD_EXP 69
37401: EQUAL
37402: IFFALSE 37474
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37404: LD_INT 68
37406: PPUSH
37407: LD_VAR 0 1
37411: PPUSH
37412: CALL_OW 255
37416: PPUSH
37417: CALL_OW 321
37421: PUSH
37422: LD_INT 2
37424: EQUAL
37425: IFFALSE 37437
// eff := 70 else
37427: LD_ADDR_VAR 0 4
37431: PUSH
37432: LD_INT 70
37434: ST_TO_ADDR
37435: GO 37445
// eff := 30 ;
37437: LD_ADDR_VAR 0 4
37441: PUSH
37442: LD_INT 30
37444: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37445: LD_VAR 0 1
37449: PPUSH
37450: CALL_OW 250
37454: PPUSH
37455: LD_VAR 0 1
37459: PPUSH
37460: CALL_OW 251
37464: PPUSH
37465: LD_VAR 0 4
37469: PPUSH
37470: CALL_OW 495
// end ; end ;
37474: LD_VAR 0 2
37478: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
37479: LD_INT 0
37481: PPUSH
// end ;
37482: LD_VAR 0 4
37486: RET
// export function SOS_Command ( cmd ) ; begin
37487: LD_INT 0
37489: PPUSH
// end ;
37490: LD_VAR 0 2
37494: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
37495: LD_INT 0
37497: PPUSH
// if cmd = 121 then
37498: LD_VAR 0 1
37502: PUSH
37503: LD_INT 121
37505: EQUAL
37506: IFFALSE 37508
// end ;
37508: LD_VAR 0 6
37512: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37513: LD_INT 0
37515: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37516: LD_VAR 0 1
37520: PUSH
37521: LD_INT 250
37523: EQUAL
37524: PUSH
37525: LD_VAR 0 2
37529: PPUSH
37530: CALL_OW 264
37534: PUSH
37535: LD_EXP 72
37539: EQUAL
37540: AND
37541: IFFALSE 37562
// MinerPlaceMine ( unit , x , y ) ;
37543: LD_VAR 0 2
37547: PPUSH
37548: LD_VAR 0 4
37552: PPUSH
37553: LD_VAR 0 5
37557: PPUSH
37558: CALL 39911 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37562: LD_VAR 0 1
37566: PUSH
37567: LD_INT 251
37569: EQUAL
37570: PUSH
37571: LD_VAR 0 2
37575: PPUSH
37576: CALL_OW 264
37580: PUSH
37581: LD_EXP 72
37585: EQUAL
37586: AND
37587: IFFALSE 37608
// MinerDetonateMine ( unit , x , y ) ;
37589: LD_VAR 0 2
37593: PPUSH
37594: LD_VAR 0 4
37598: PPUSH
37599: LD_VAR 0 5
37603: PPUSH
37604: CALL 40188 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37608: LD_VAR 0 1
37612: PUSH
37613: LD_INT 252
37615: EQUAL
37616: PUSH
37617: LD_VAR 0 2
37621: PPUSH
37622: CALL_OW 264
37626: PUSH
37627: LD_EXP 72
37631: EQUAL
37632: AND
37633: IFFALSE 37654
// MinerCreateMinefield ( unit , x , y ) ;
37635: LD_VAR 0 2
37639: PPUSH
37640: LD_VAR 0 4
37644: PPUSH
37645: LD_VAR 0 5
37649: PPUSH
37650: CALL 40605 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37654: LD_VAR 0 1
37658: PUSH
37659: LD_INT 253
37661: EQUAL
37662: PUSH
37663: LD_VAR 0 2
37667: PPUSH
37668: CALL_OW 257
37672: PUSH
37673: LD_INT 5
37675: EQUAL
37676: AND
37677: IFFALSE 37698
// ComBinocular ( unit , x , y ) ;
37679: LD_VAR 0 2
37683: PPUSH
37684: LD_VAR 0 4
37688: PPUSH
37689: LD_VAR 0 5
37693: PPUSH
37694: CALL 40976 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37698: LD_VAR 0 1
37702: PUSH
37703: LD_INT 254
37705: EQUAL
37706: PUSH
37707: LD_VAR 0 2
37711: PPUSH
37712: CALL_OW 264
37716: PUSH
37717: LD_EXP 67
37721: EQUAL
37722: AND
37723: PUSH
37724: LD_VAR 0 3
37728: PPUSH
37729: CALL_OW 263
37733: PUSH
37734: LD_INT 3
37736: EQUAL
37737: AND
37738: IFFALSE 37754
// HackDestroyVehicle ( unit , selectedUnit ) ;
37740: LD_VAR 0 2
37744: PPUSH
37745: LD_VAR 0 3
37749: PPUSH
37750: CALL 39271 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37754: LD_VAR 0 1
37758: PUSH
37759: LD_INT 255
37761: EQUAL
37762: PUSH
37763: LD_VAR 0 2
37767: PPUSH
37768: CALL_OW 264
37772: PUSH
37773: LD_INT 14
37775: PUSH
37776: LD_INT 53
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: IN
37783: AND
37784: PUSH
37785: LD_VAR 0 4
37789: PPUSH
37790: LD_VAR 0 5
37794: PPUSH
37795: CALL_OW 488
37799: AND
37800: IFFALSE 37824
// CutTreeXYR ( unit , x , y , 12 ) ;
37802: LD_VAR 0 2
37806: PPUSH
37807: LD_VAR 0 4
37811: PPUSH
37812: LD_VAR 0 5
37816: PPUSH
37817: LD_INT 12
37819: PPUSH
37820: CALL 37837 0 4
// end ;
37824: LD_VAR 0 6
37828: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
37829: LD_INT 0
37831: PPUSH
// end ;
37832: LD_VAR 0 4
37836: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37837: LD_INT 0
37839: PPUSH
37840: PPUSH
37841: PPUSH
37842: PPUSH
37843: PPUSH
37844: PPUSH
37845: PPUSH
37846: PPUSH
37847: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
37848: LD_VAR 0 1
37852: NOT
37853: PUSH
37854: LD_VAR 0 2
37858: PPUSH
37859: LD_VAR 0 3
37863: PPUSH
37864: CALL_OW 488
37868: NOT
37869: OR
37870: PUSH
37871: LD_VAR 0 4
37875: NOT
37876: OR
37877: IFFALSE 37881
// exit ;
37879: GO 38221
// list := [ ] ;
37881: LD_ADDR_VAR 0 13
37885: PUSH
37886: EMPTY
37887: ST_TO_ADDR
// if x - r < 0 then
37888: LD_VAR 0 2
37892: PUSH
37893: LD_VAR 0 4
37897: MINUS
37898: PUSH
37899: LD_INT 0
37901: LESS
37902: IFFALSE 37914
// min_x := 0 else
37904: LD_ADDR_VAR 0 7
37908: PUSH
37909: LD_INT 0
37911: ST_TO_ADDR
37912: GO 37930
// min_x := x - r ;
37914: LD_ADDR_VAR 0 7
37918: PUSH
37919: LD_VAR 0 2
37923: PUSH
37924: LD_VAR 0 4
37928: MINUS
37929: ST_TO_ADDR
// if y - r < 0 then
37930: LD_VAR 0 3
37934: PUSH
37935: LD_VAR 0 4
37939: MINUS
37940: PUSH
37941: LD_INT 0
37943: LESS
37944: IFFALSE 37956
// min_y := 0 else
37946: LD_ADDR_VAR 0 8
37950: PUSH
37951: LD_INT 0
37953: ST_TO_ADDR
37954: GO 37972
// min_y := y - r ;
37956: LD_ADDR_VAR 0 8
37960: PUSH
37961: LD_VAR 0 3
37965: PUSH
37966: LD_VAR 0 4
37970: MINUS
37971: ST_TO_ADDR
// max_x := x + r ;
37972: LD_ADDR_VAR 0 9
37976: PUSH
37977: LD_VAR 0 2
37981: PUSH
37982: LD_VAR 0 4
37986: PLUS
37987: ST_TO_ADDR
// max_y := y + r ;
37988: LD_ADDR_VAR 0 10
37992: PUSH
37993: LD_VAR 0 3
37997: PUSH
37998: LD_VAR 0 4
38002: PLUS
38003: ST_TO_ADDR
// for _x = min_x to max_x do
38004: LD_ADDR_VAR 0 11
38008: PUSH
38009: DOUBLE
38010: LD_VAR 0 7
38014: DEC
38015: ST_TO_ADDR
38016: LD_VAR 0 9
38020: PUSH
38021: FOR_TO
38022: IFFALSE 38139
// for _y = min_y to max_y do
38024: LD_ADDR_VAR 0 12
38028: PUSH
38029: DOUBLE
38030: LD_VAR 0 8
38034: DEC
38035: ST_TO_ADDR
38036: LD_VAR 0 10
38040: PUSH
38041: FOR_TO
38042: IFFALSE 38135
// begin if not ValidHex ( _x , _y ) then
38044: LD_VAR 0 11
38048: PPUSH
38049: LD_VAR 0 12
38053: PPUSH
38054: CALL_OW 488
38058: NOT
38059: IFFALSE 38063
// continue ;
38061: GO 38041
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38063: LD_VAR 0 11
38067: PPUSH
38068: LD_VAR 0 12
38072: PPUSH
38073: CALL_OW 351
38077: PUSH
38078: LD_VAR 0 11
38082: PPUSH
38083: LD_VAR 0 12
38087: PPUSH
38088: CALL_OW 554
38092: AND
38093: IFFALSE 38133
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38095: LD_ADDR_VAR 0 13
38099: PUSH
38100: LD_VAR 0 13
38104: PPUSH
38105: LD_VAR 0 13
38109: PUSH
38110: LD_INT 1
38112: PLUS
38113: PPUSH
38114: LD_VAR 0 11
38118: PUSH
38119: LD_VAR 0 12
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PPUSH
38128: CALL_OW 2
38132: ST_TO_ADDR
// end ;
38133: GO 38041
38135: POP
38136: POP
38137: GO 38021
38139: POP
38140: POP
// if not list then
38141: LD_VAR 0 13
38145: NOT
38146: IFFALSE 38150
// exit ;
38148: GO 38221
// for i in list do
38150: LD_ADDR_VAR 0 6
38154: PUSH
38155: LD_VAR 0 13
38159: PUSH
38160: FOR_IN
38161: IFFALSE 38219
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
38163: LD_VAR 0 1
38167: PPUSH
38168: LD_STRING M
38170: PUSH
38171: LD_VAR 0 6
38175: PUSH
38176: LD_INT 1
38178: ARRAY
38179: PUSH
38180: LD_VAR 0 6
38184: PUSH
38185: LD_INT 2
38187: ARRAY
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: LD_INT 0
38194: PUSH
38195: LD_INT 0
38197: PUSH
38198: LD_INT 0
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: PUSH
38210: EMPTY
38211: LIST
38212: PPUSH
38213: CALL_OW 447
38217: GO 38160
38219: POP
38220: POP
// end ;
38221: LD_VAR 0 5
38225: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38226: LD_EXP 141
38230: NOT
38231: IFFALSE 38281
38233: GO 38235
38235: DISABLE
// begin initHack := true ;
38236: LD_ADDR_EXP 141
38240: PUSH
38241: LD_INT 1
38243: ST_TO_ADDR
// hackTanks := [ ] ;
38244: LD_ADDR_EXP 142
38248: PUSH
38249: EMPTY
38250: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38251: LD_ADDR_EXP 143
38255: PUSH
38256: EMPTY
38257: ST_TO_ADDR
// hackLimit := 3 ;
38258: LD_ADDR_EXP 144
38262: PUSH
38263: LD_INT 3
38265: ST_TO_ADDR
// hackDist := 12 ;
38266: LD_ADDR_EXP 145
38270: PUSH
38271: LD_INT 12
38273: ST_TO_ADDR
// hackCounter := [ ] ;
38274: LD_ADDR_EXP 146
38278: PUSH
38279: EMPTY
38280: ST_TO_ADDR
// end ;
38281: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38282: LD_EXP 141
38286: PUSH
38287: LD_INT 34
38289: PUSH
38290: LD_EXP 67
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PPUSH
38299: CALL_OW 69
38303: AND
38304: IFFALSE 38559
38306: GO 38308
38308: DISABLE
38309: LD_INT 0
38311: PPUSH
38312: PPUSH
// begin enable ;
38313: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38314: LD_ADDR_VAR 0 1
38318: PUSH
38319: LD_INT 34
38321: PUSH
38322: LD_EXP 67
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PPUSH
38331: CALL_OW 69
38335: PUSH
38336: FOR_IN
38337: IFFALSE 38557
// begin if not i in hackTanks then
38339: LD_VAR 0 1
38343: PUSH
38344: LD_EXP 142
38348: IN
38349: NOT
38350: IFFALSE 38433
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38352: LD_ADDR_EXP 142
38356: PUSH
38357: LD_EXP 142
38361: PPUSH
38362: LD_EXP 142
38366: PUSH
38367: LD_INT 1
38369: PLUS
38370: PPUSH
38371: LD_VAR 0 1
38375: PPUSH
38376: CALL_OW 1
38380: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38381: LD_ADDR_EXP 143
38385: PUSH
38386: LD_EXP 143
38390: PPUSH
38391: LD_EXP 143
38395: PUSH
38396: LD_INT 1
38398: PLUS
38399: PPUSH
38400: EMPTY
38401: PPUSH
38402: CALL_OW 1
38406: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38407: LD_ADDR_EXP 146
38411: PUSH
38412: LD_EXP 146
38416: PPUSH
38417: LD_EXP 146
38421: PUSH
38422: LD_INT 1
38424: PLUS
38425: PPUSH
38426: EMPTY
38427: PPUSH
38428: CALL_OW 1
38432: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38433: LD_VAR 0 1
38437: PPUSH
38438: CALL_OW 302
38442: NOT
38443: IFFALSE 38456
// begin HackUnlinkAll ( i ) ;
38445: LD_VAR 0 1
38449: PPUSH
38450: CALL 38562 0 1
// continue ;
38454: GO 38336
// end ; HackCheckCapturedStatus ( i ) ;
38456: LD_VAR 0 1
38460: PPUSH
38461: CALL 39005 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38465: LD_ADDR_VAR 0 2
38469: PUSH
38470: LD_INT 81
38472: PUSH
38473: LD_VAR 0 1
38477: PPUSH
38478: CALL_OW 255
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 33
38489: PUSH
38490: LD_INT 3
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 91
38499: PUSH
38500: LD_VAR 0 1
38504: PUSH
38505: LD_EXP 145
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 50
38517: PUSH
38518: EMPTY
38519: LIST
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: PPUSH
38527: CALL_OW 69
38531: ST_TO_ADDR
// if not tmp then
38532: LD_VAR 0 2
38536: NOT
38537: IFFALSE 38541
// continue ;
38539: GO 38336
// HackLink ( i , tmp ) ;
38541: LD_VAR 0 1
38545: PPUSH
38546: LD_VAR 0 2
38550: PPUSH
38551: CALL 38698 0 2
// end ;
38555: GO 38336
38557: POP
38558: POP
// end ;
38559: PPOPN 2
38561: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38562: LD_INT 0
38564: PPUSH
38565: PPUSH
38566: PPUSH
// if not hack in hackTanks then
38567: LD_VAR 0 1
38571: PUSH
38572: LD_EXP 142
38576: IN
38577: NOT
38578: IFFALSE 38582
// exit ;
38580: GO 38693
// index := GetElementIndex ( hackTanks , hack ) ;
38582: LD_ADDR_VAR 0 4
38586: PUSH
38587: LD_EXP 142
38591: PPUSH
38592: LD_VAR 0 1
38596: PPUSH
38597: CALL 46167 0 2
38601: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38602: LD_EXP 143
38606: PUSH
38607: LD_VAR 0 4
38611: ARRAY
38612: IFFALSE 38693
// begin for i in hackTanksCaptured [ index ] do
38614: LD_ADDR_VAR 0 3
38618: PUSH
38619: LD_EXP 143
38623: PUSH
38624: LD_VAR 0 4
38628: ARRAY
38629: PUSH
38630: FOR_IN
38631: IFFALSE 38657
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38633: LD_VAR 0 3
38637: PUSH
38638: LD_INT 1
38640: ARRAY
38641: PPUSH
38642: LD_VAR 0 3
38646: PUSH
38647: LD_INT 2
38649: ARRAY
38650: PPUSH
38651: CALL_OW 235
38655: GO 38630
38657: POP
38658: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38659: LD_ADDR_EXP 143
38663: PUSH
38664: LD_EXP 143
38668: PPUSH
38669: LD_VAR 0 4
38673: PPUSH
38674: EMPTY
38675: PPUSH
38676: CALL_OW 1
38680: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38681: LD_VAR 0 1
38685: PPUSH
38686: LD_INT 0
38688: PPUSH
38689: CALL_OW 505
// end ; end ;
38693: LD_VAR 0 2
38697: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38698: LD_INT 0
38700: PPUSH
38701: PPUSH
38702: PPUSH
// if not hack in hackTanks or not vehicles then
38703: LD_VAR 0 1
38707: PUSH
38708: LD_EXP 142
38712: IN
38713: NOT
38714: PUSH
38715: LD_VAR 0 2
38719: NOT
38720: OR
38721: IFFALSE 38725
// exit ;
38723: GO 39000
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38725: LD_ADDR_VAR 0 2
38729: PUSH
38730: LD_VAR 0 1
38734: PPUSH
38735: LD_VAR 0 2
38739: PPUSH
38740: LD_INT 1
38742: PPUSH
38743: LD_INT 1
38745: PPUSH
38746: CALL 46817 0 4
38750: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38751: LD_ADDR_VAR 0 5
38755: PUSH
38756: LD_EXP 142
38760: PPUSH
38761: LD_VAR 0 1
38765: PPUSH
38766: CALL 46167 0 2
38770: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38771: LD_EXP 143
38775: PUSH
38776: LD_VAR 0 5
38780: ARRAY
38781: PUSH
38782: LD_EXP 144
38786: LESS
38787: IFFALSE 38976
// begin for i := 1 to vehicles do
38789: LD_ADDR_VAR 0 4
38793: PUSH
38794: DOUBLE
38795: LD_INT 1
38797: DEC
38798: ST_TO_ADDR
38799: LD_VAR 0 2
38803: PUSH
38804: FOR_TO
38805: IFFALSE 38974
// begin if hackTanksCaptured [ index ] = hackLimit then
38807: LD_EXP 143
38811: PUSH
38812: LD_VAR 0 5
38816: ARRAY
38817: PUSH
38818: LD_EXP 144
38822: EQUAL
38823: IFFALSE 38827
// break ;
38825: GO 38974
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38827: LD_ADDR_EXP 146
38831: PUSH
38832: LD_EXP 146
38836: PPUSH
38837: LD_VAR 0 5
38841: PPUSH
38842: LD_EXP 146
38846: PUSH
38847: LD_VAR 0 5
38851: ARRAY
38852: PUSH
38853: LD_INT 1
38855: PLUS
38856: PPUSH
38857: CALL_OW 1
38861: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38862: LD_ADDR_EXP 143
38866: PUSH
38867: LD_EXP 143
38871: PPUSH
38872: LD_VAR 0 5
38876: PUSH
38877: LD_EXP 143
38881: PUSH
38882: LD_VAR 0 5
38886: ARRAY
38887: PUSH
38888: LD_INT 1
38890: PLUS
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PPUSH
38896: LD_VAR 0 2
38900: PUSH
38901: LD_VAR 0 4
38905: ARRAY
38906: PUSH
38907: LD_VAR 0 2
38911: PUSH
38912: LD_VAR 0 4
38916: ARRAY
38917: PPUSH
38918: CALL_OW 255
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PPUSH
38927: CALL 46382 0 3
38931: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38932: LD_VAR 0 2
38936: PUSH
38937: LD_VAR 0 4
38941: ARRAY
38942: PPUSH
38943: LD_VAR 0 1
38947: PPUSH
38948: CALL_OW 255
38952: PPUSH
38953: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38957: LD_VAR 0 2
38961: PUSH
38962: LD_VAR 0 4
38966: ARRAY
38967: PPUSH
38968: CALL_OW 141
// end ;
38972: GO 38804
38974: POP
38975: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38976: LD_VAR 0 1
38980: PPUSH
38981: LD_EXP 143
38985: PUSH
38986: LD_VAR 0 5
38990: ARRAY
38991: PUSH
38992: LD_INT 0
38994: PLUS
38995: PPUSH
38996: CALL_OW 505
// end ;
39000: LD_VAR 0 3
39004: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
39005: LD_INT 0
39007: PPUSH
39008: PPUSH
39009: PPUSH
39010: PPUSH
// if not hack in hackTanks then
39011: LD_VAR 0 1
39015: PUSH
39016: LD_EXP 142
39020: IN
39021: NOT
39022: IFFALSE 39026
// exit ;
39024: GO 39266
// index := GetElementIndex ( hackTanks , hack ) ;
39026: LD_ADDR_VAR 0 4
39030: PUSH
39031: LD_EXP 142
39035: PPUSH
39036: LD_VAR 0 1
39040: PPUSH
39041: CALL 46167 0 2
39045: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39046: LD_ADDR_VAR 0 3
39050: PUSH
39051: DOUBLE
39052: LD_EXP 143
39056: PUSH
39057: LD_VAR 0 4
39061: ARRAY
39062: INC
39063: ST_TO_ADDR
39064: LD_INT 1
39066: PUSH
39067: FOR_DOWNTO
39068: IFFALSE 39240
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39070: LD_ADDR_VAR 0 5
39074: PUSH
39075: LD_EXP 143
39079: PUSH
39080: LD_VAR 0 4
39084: ARRAY
39085: PUSH
39086: LD_VAR 0 3
39090: ARRAY
39091: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39092: LD_VAR 0 5
39096: PUSH
39097: LD_INT 1
39099: ARRAY
39100: PPUSH
39101: CALL_OW 302
39105: NOT
39106: PUSH
39107: LD_VAR 0 5
39111: PUSH
39112: LD_INT 1
39114: ARRAY
39115: PPUSH
39116: CALL_OW 255
39120: PUSH
39121: LD_VAR 0 1
39125: PPUSH
39126: CALL_OW 255
39130: NONEQUAL
39131: OR
39132: IFFALSE 39238
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39134: LD_VAR 0 5
39138: PUSH
39139: LD_INT 1
39141: ARRAY
39142: PPUSH
39143: CALL_OW 305
39147: PUSH
39148: LD_VAR 0 5
39152: PUSH
39153: LD_INT 1
39155: ARRAY
39156: PPUSH
39157: CALL_OW 255
39161: PUSH
39162: LD_VAR 0 1
39166: PPUSH
39167: CALL_OW 255
39171: EQUAL
39172: AND
39173: IFFALSE 39197
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39175: LD_VAR 0 5
39179: PUSH
39180: LD_INT 1
39182: ARRAY
39183: PPUSH
39184: LD_VAR 0 5
39188: PUSH
39189: LD_INT 2
39191: ARRAY
39192: PPUSH
39193: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39197: LD_ADDR_EXP 143
39201: PUSH
39202: LD_EXP 143
39206: PPUSH
39207: LD_VAR 0 4
39211: PPUSH
39212: LD_EXP 143
39216: PUSH
39217: LD_VAR 0 4
39221: ARRAY
39222: PPUSH
39223: LD_VAR 0 3
39227: PPUSH
39228: CALL_OW 3
39232: PPUSH
39233: CALL_OW 1
39237: ST_TO_ADDR
// end ; end ;
39238: GO 39067
39240: POP
39241: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39242: LD_VAR 0 1
39246: PPUSH
39247: LD_EXP 143
39251: PUSH
39252: LD_VAR 0 4
39256: ARRAY
39257: PUSH
39258: LD_INT 0
39260: PLUS
39261: PPUSH
39262: CALL_OW 505
// end ;
39266: LD_VAR 0 2
39270: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39271: LD_INT 0
39273: PPUSH
39274: PPUSH
39275: PPUSH
39276: PPUSH
// if not hack in hackTanks then
39277: LD_VAR 0 1
39281: PUSH
39282: LD_EXP 142
39286: IN
39287: NOT
39288: IFFALSE 39292
// exit ;
39290: GO 39377
// index := GetElementIndex ( hackTanks , hack ) ;
39292: LD_ADDR_VAR 0 5
39296: PUSH
39297: LD_EXP 142
39301: PPUSH
39302: LD_VAR 0 1
39306: PPUSH
39307: CALL 46167 0 2
39311: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39312: LD_ADDR_VAR 0 4
39316: PUSH
39317: DOUBLE
39318: LD_INT 1
39320: DEC
39321: ST_TO_ADDR
39322: LD_EXP 143
39326: PUSH
39327: LD_VAR 0 5
39331: ARRAY
39332: PUSH
39333: FOR_TO
39334: IFFALSE 39375
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39336: LD_EXP 143
39340: PUSH
39341: LD_VAR 0 5
39345: ARRAY
39346: PUSH
39347: LD_VAR 0 4
39351: ARRAY
39352: PUSH
39353: LD_INT 1
39355: ARRAY
39356: PUSH
39357: LD_VAR 0 2
39361: EQUAL
39362: IFFALSE 39373
// KillUnit ( vehicle ) ;
39364: LD_VAR 0 2
39368: PPUSH
39369: CALL_OW 66
39373: GO 39333
39375: POP
39376: POP
// end ;
39377: LD_VAR 0 3
39381: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39382: LD_EXP 147
39386: NOT
39387: IFFALSE 39422
39389: GO 39391
39391: DISABLE
// begin initMiner := true ;
39392: LD_ADDR_EXP 147
39396: PUSH
39397: LD_INT 1
39399: ST_TO_ADDR
// minersList := [ ] ;
39400: LD_ADDR_EXP 148
39404: PUSH
39405: EMPTY
39406: ST_TO_ADDR
// minerMinesList := [ ] ;
39407: LD_ADDR_EXP 149
39411: PUSH
39412: EMPTY
39413: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39414: LD_ADDR_EXP 150
39418: PUSH
39419: LD_INT 5
39421: ST_TO_ADDR
// end ;
39422: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39423: LD_EXP 147
39427: PUSH
39428: LD_INT 34
39430: PUSH
39431: LD_EXP 72
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PPUSH
39440: CALL_OW 69
39444: AND
39445: IFFALSE 39908
39447: GO 39449
39449: DISABLE
39450: LD_INT 0
39452: PPUSH
39453: PPUSH
39454: PPUSH
39455: PPUSH
// begin enable ;
39456: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39457: LD_ADDR_VAR 0 1
39461: PUSH
39462: LD_INT 34
39464: PUSH
39465: LD_EXP 72
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PPUSH
39474: CALL_OW 69
39478: PUSH
39479: FOR_IN
39480: IFFALSE 39552
// begin if not i in minersList then
39482: LD_VAR 0 1
39486: PUSH
39487: LD_EXP 148
39491: IN
39492: NOT
39493: IFFALSE 39550
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39495: LD_ADDR_EXP 148
39499: PUSH
39500: LD_EXP 148
39504: PPUSH
39505: LD_EXP 148
39509: PUSH
39510: LD_INT 1
39512: PLUS
39513: PPUSH
39514: LD_VAR 0 1
39518: PPUSH
39519: CALL_OW 1
39523: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39524: LD_ADDR_EXP 149
39528: PUSH
39529: LD_EXP 149
39533: PPUSH
39534: LD_EXP 149
39538: PUSH
39539: LD_INT 1
39541: PLUS
39542: PPUSH
39543: EMPTY
39544: PPUSH
39545: CALL_OW 1
39549: ST_TO_ADDR
// end end ;
39550: GO 39479
39552: POP
39553: POP
// for i := minerMinesList downto 1 do
39554: LD_ADDR_VAR 0 1
39558: PUSH
39559: DOUBLE
39560: LD_EXP 149
39564: INC
39565: ST_TO_ADDR
39566: LD_INT 1
39568: PUSH
39569: FOR_DOWNTO
39570: IFFALSE 39906
// begin if IsLive ( minersList [ i ] ) then
39572: LD_EXP 148
39576: PUSH
39577: LD_VAR 0 1
39581: ARRAY
39582: PPUSH
39583: CALL_OW 300
39587: IFFALSE 39615
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39589: LD_EXP 148
39593: PUSH
39594: LD_VAR 0 1
39598: ARRAY
39599: PPUSH
39600: LD_EXP 149
39604: PUSH
39605: LD_VAR 0 1
39609: ARRAY
39610: PPUSH
39611: CALL_OW 505
// if not minerMinesList [ i ] then
39615: LD_EXP 149
39619: PUSH
39620: LD_VAR 0 1
39624: ARRAY
39625: NOT
39626: IFFALSE 39630
// continue ;
39628: GO 39569
// for j := minerMinesList [ i ] downto 1 do
39630: LD_ADDR_VAR 0 2
39634: PUSH
39635: DOUBLE
39636: LD_EXP 149
39640: PUSH
39641: LD_VAR 0 1
39645: ARRAY
39646: INC
39647: ST_TO_ADDR
39648: LD_INT 1
39650: PUSH
39651: FOR_DOWNTO
39652: IFFALSE 39902
// begin side := GetSide ( minersList [ i ] ) ;
39654: LD_ADDR_VAR 0 3
39658: PUSH
39659: LD_EXP 148
39663: PUSH
39664: LD_VAR 0 1
39668: ARRAY
39669: PPUSH
39670: CALL_OW 255
39674: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39675: LD_ADDR_VAR 0 4
39679: PUSH
39680: LD_EXP 149
39684: PUSH
39685: LD_VAR 0 1
39689: ARRAY
39690: PUSH
39691: LD_VAR 0 2
39695: ARRAY
39696: PUSH
39697: LD_INT 1
39699: ARRAY
39700: PPUSH
39701: LD_EXP 149
39705: PUSH
39706: LD_VAR 0 1
39710: ARRAY
39711: PUSH
39712: LD_VAR 0 2
39716: ARRAY
39717: PUSH
39718: LD_INT 2
39720: ARRAY
39721: PPUSH
39722: CALL_OW 428
39726: ST_TO_ADDR
// if not tmp then
39727: LD_VAR 0 4
39731: NOT
39732: IFFALSE 39736
// continue ;
39734: GO 39651
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39736: LD_VAR 0 4
39740: PUSH
39741: LD_INT 81
39743: PUSH
39744: LD_VAR 0 3
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PPUSH
39753: CALL_OW 69
39757: IN
39758: PUSH
39759: LD_EXP 149
39763: PUSH
39764: LD_VAR 0 1
39768: ARRAY
39769: PUSH
39770: LD_VAR 0 2
39774: ARRAY
39775: PUSH
39776: LD_INT 1
39778: ARRAY
39779: PPUSH
39780: LD_EXP 149
39784: PUSH
39785: LD_VAR 0 1
39789: ARRAY
39790: PUSH
39791: LD_VAR 0 2
39795: ARRAY
39796: PUSH
39797: LD_INT 2
39799: ARRAY
39800: PPUSH
39801: CALL_OW 458
39805: AND
39806: IFFALSE 39900
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39808: LD_EXP 149
39812: PUSH
39813: LD_VAR 0 1
39817: ARRAY
39818: PUSH
39819: LD_VAR 0 2
39823: ARRAY
39824: PUSH
39825: LD_INT 1
39827: ARRAY
39828: PPUSH
39829: LD_EXP 149
39833: PUSH
39834: LD_VAR 0 1
39838: ARRAY
39839: PUSH
39840: LD_VAR 0 2
39844: ARRAY
39845: PUSH
39846: LD_INT 2
39848: ARRAY
39849: PPUSH
39850: LD_VAR 0 3
39854: PPUSH
39855: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39859: LD_ADDR_EXP 149
39863: PUSH
39864: LD_EXP 149
39868: PPUSH
39869: LD_VAR 0 1
39873: PPUSH
39874: LD_EXP 149
39878: PUSH
39879: LD_VAR 0 1
39883: ARRAY
39884: PPUSH
39885: LD_VAR 0 2
39889: PPUSH
39890: CALL_OW 3
39894: PPUSH
39895: CALL_OW 1
39899: ST_TO_ADDR
// end ; end ;
39900: GO 39651
39902: POP
39903: POP
// end ;
39904: GO 39569
39906: POP
39907: POP
// end ;
39908: PPOPN 4
39910: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39911: LD_INT 0
39913: PPUSH
39914: PPUSH
// result := false ;
39915: LD_ADDR_VAR 0 4
39919: PUSH
39920: LD_INT 0
39922: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39923: LD_VAR 0 1
39927: PPUSH
39928: CALL_OW 264
39932: PUSH
39933: LD_EXP 72
39937: EQUAL
39938: NOT
39939: IFFALSE 39943
// exit ;
39941: GO 40183
// index := GetElementIndex ( minersList , unit ) ;
39943: LD_ADDR_VAR 0 5
39947: PUSH
39948: LD_EXP 148
39952: PPUSH
39953: LD_VAR 0 1
39957: PPUSH
39958: CALL 46167 0 2
39962: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39963: LD_EXP 149
39967: PUSH
39968: LD_VAR 0 5
39972: ARRAY
39973: PUSH
39974: LD_EXP 150
39978: GREATEREQUAL
39979: IFFALSE 39983
// exit ;
39981: GO 40183
// ComMoveXY ( unit , x , y ) ;
39983: LD_VAR 0 1
39987: PPUSH
39988: LD_VAR 0 2
39992: PPUSH
39993: LD_VAR 0 3
39997: PPUSH
39998: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40002: LD_INT 35
40004: PPUSH
40005: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
40009: LD_VAR 0 1
40013: PPUSH
40014: LD_VAR 0 2
40018: PPUSH
40019: LD_VAR 0 3
40023: PPUSH
40024: CALL 76939 0 3
40028: NOT
40029: PUSH
40030: LD_VAR 0 1
40034: PPUSH
40035: CALL_OW 314
40039: AND
40040: IFFALSE 40044
// exit ;
40042: GO 40183
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40044: LD_VAR 0 2
40048: PPUSH
40049: LD_VAR 0 3
40053: PPUSH
40054: CALL_OW 428
40058: PUSH
40059: LD_VAR 0 1
40063: EQUAL
40064: PUSH
40065: LD_VAR 0 1
40069: PPUSH
40070: CALL_OW 314
40074: NOT
40075: AND
40076: IFFALSE 40002
// PlaySoundXY ( x , y , PlantMine ) ;
40078: LD_VAR 0 2
40082: PPUSH
40083: LD_VAR 0 3
40087: PPUSH
40088: LD_STRING PlantMine
40090: PPUSH
40091: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
40095: LD_VAR 0 2
40099: PPUSH
40100: LD_VAR 0 3
40104: PPUSH
40105: LD_VAR 0 1
40109: PPUSH
40110: CALL_OW 255
40114: PPUSH
40115: LD_INT 0
40117: PPUSH
40118: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40122: LD_ADDR_EXP 149
40126: PUSH
40127: LD_EXP 149
40131: PPUSH
40132: LD_VAR 0 5
40136: PUSH
40137: LD_EXP 149
40141: PUSH
40142: LD_VAR 0 5
40146: ARRAY
40147: PUSH
40148: LD_INT 1
40150: PLUS
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PPUSH
40156: LD_VAR 0 2
40160: PUSH
40161: LD_VAR 0 3
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PPUSH
40170: CALL 46382 0 3
40174: ST_TO_ADDR
// result := true ;
40175: LD_ADDR_VAR 0 4
40179: PUSH
40180: LD_INT 1
40182: ST_TO_ADDR
// end ;
40183: LD_VAR 0 4
40187: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40188: LD_INT 0
40190: PPUSH
40191: PPUSH
40192: PPUSH
// if not unit in minersList then
40193: LD_VAR 0 1
40197: PUSH
40198: LD_EXP 148
40202: IN
40203: NOT
40204: IFFALSE 40208
// exit ;
40206: GO 40600
// index := GetElementIndex ( minersList , unit ) ;
40208: LD_ADDR_VAR 0 6
40212: PUSH
40213: LD_EXP 148
40217: PPUSH
40218: LD_VAR 0 1
40222: PPUSH
40223: CALL 46167 0 2
40227: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40228: LD_ADDR_VAR 0 5
40232: PUSH
40233: DOUBLE
40234: LD_EXP 149
40238: PUSH
40239: LD_VAR 0 6
40243: ARRAY
40244: INC
40245: ST_TO_ADDR
40246: LD_INT 1
40248: PUSH
40249: FOR_DOWNTO
40250: IFFALSE 40411
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40252: LD_EXP 149
40256: PUSH
40257: LD_VAR 0 6
40261: ARRAY
40262: PUSH
40263: LD_VAR 0 5
40267: ARRAY
40268: PUSH
40269: LD_INT 1
40271: ARRAY
40272: PUSH
40273: LD_VAR 0 2
40277: EQUAL
40278: PUSH
40279: LD_EXP 149
40283: PUSH
40284: LD_VAR 0 6
40288: ARRAY
40289: PUSH
40290: LD_VAR 0 5
40294: ARRAY
40295: PUSH
40296: LD_INT 2
40298: ARRAY
40299: PUSH
40300: LD_VAR 0 3
40304: EQUAL
40305: AND
40306: IFFALSE 40409
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40308: LD_EXP 149
40312: PUSH
40313: LD_VAR 0 6
40317: ARRAY
40318: PUSH
40319: LD_VAR 0 5
40323: ARRAY
40324: PUSH
40325: LD_INT 1
40327: ARRAY
40328: PPUSH
40329: LD_EXP 149
40333: PUSH
40334: LD_VAR 0 6
40338: ARRAY
40339: PUSH
40340: LD_VAR 0 5
40344: ARRAY
40345: PUSH
40346: LD_INT 2
40348: ARRAY
40349: PPUSH
40350: LD_VAR 0 1
40354: PPUSH
40355: CALL_OW 255
40359: PPUSH
40360: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40364: LD_ADDR_EXP 149
40368: PUSH
40369: LD_EXP 149
40373: PPUSH
40374: LD_VAR 0 6
40378: PPUSH
40379: LD_EXP 149
40383: PUSH
40384: LD_VAR 0 6
40388: ARRAY
40389: PPUSH
40390: LD_VAR 0 5
40394: PPUSH
40395: CALL_OW 3
40399: PPUSH
40400: CALL_OW 1
40404: ST_TO_ADDR
// exit ;
40405: POP
40406: POP
40407: GO 40600
// end ; end ;
40409: GO 40249
40411: POP
40412: POP
// for i := minerMinesList [ index ] downto 1 do
40413: LD_ADDR_VAR 0 5
40417: PUSH
40418: DOUBLE
40419: LD_EXP 149
40423: PUSH
40424: LD_VAR 0 6
40428: ARRAY
40429: INC
40430: ST_TO_ADDR
40431: LD_INT 1
40433: PUSH
40434: FOR_DOWNTO
40435: IFFALSE 40598
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40437: LD_EXP 149
40441: PUSH
40442: LD_VAR 0 6
40446: ARRAY
40447: PUSH
40448: LD_VAR 0 5
40452: ARRAY
40453: PUSH
40454: LD_INT 1
40456: ARRAY
40457: PPUSH
40458: LD_EXP 149
40462: PUSH
40463: LD_VAR 0 6
40467: ARRAY
40468: PUSH
40469: LD_VAR 0 5
40473: ARRAY
40474: PUSH
40475: LD_INT 2
40477: ARRAY
40478: PPUSH
40479: LD_VAR 0 2
40483: PPUSH
40484: LD_VAR 0 3
40488: PPUSH
40489: CALL_OW 298
40493: PUSH
40494: LD_INT 6
40496: LESS
40497: IFFALSE 40596
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40499: LD_EXP 149
40503: PUSH
40504: LD_VAR 0 6
40508: ARRAY
40509: PUSH
40510: LD_VAR 0 5
40514: ARRAY
40515: PUSH
40516: LD_INT 1
40518: ARRAY
40519: PPUSH
40520: LD_EXP 149
40524: PUSH
40525: LD_VAR 0 6
40529: ARRAY
40530: PUSH
40531: LD_VAR 0 5
40535: ARRAY
40536: PUSH
40537: LD_INT 2
40539: ARRAY
40540: PPUSH
40541: LD_VAR 0 1
40545: PPUSH
40546: CALL_OW 255
40550: PPUSH
40551: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40555: LD_ADDR_EXP 149
40559: PUSH
40560: LD_EXP 149
40564: PPUSH
40565: LD_VAR 0 6
40569: PPUSH
40570: LD_EXP 149
40574: PUSH
40575: LD_VAR 0 6
40579: ARRAY
40580: PPUSH
40581: LD_VAR 0 5
40585: PPUSH
40586: CALL_OW 3
40590: PPUSH
40591: CALL_OW 1
40595: ST_TO_ADDR
// end ; end ;
40596: GO 40434
40598: POP
40599: POP
// end ;
40600: LD_VAR 0 4
40604: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40605: LD_INT 0
40607: PPUSH
40608: PPUSH
40609: PPUSH
40610: PPUSH
40611: PPUSH
40612: PPUSH
40613: PPUSH
40614: PPUSH
40615: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40616: LD_VAR 0 1
40620: PPUSH
40621: CALL_OW 264
40625: PUSH
40626: LD_EXP 72
40630: EQUAL
40631: NOT
40632: PUSH
40633: LD_VAR 0 1
40637: PUSH
40638: LD_EXP 148
40642: IN
40643: NOT
40644: OR
40645: IFFALSE 40649
// exit ;
40647: GO 40971
// index := GetElementIndex ( minersList , unit ) ;
40649: LD_ADDR_VAR 0 6
40653: PUSH
40654: LD_EXP 148
40658: PPUSH
40659: LD_VAR 0 1
40663: PPUSH
40664: CALL 46167 0 2
40668: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40669: LD_ADDR_VAR 0 8
40673: PUSH
40674: LD_EXP 150
40678: PUSH
40679: LD_EXP 149
40683: PUSH
40684: LD_VAR 0 6
40688: ARRAY
40689: MINUS
40690: ST_TO_ADDR
// if not minesFreeAmount then
40691: LD_VAR 0 8
40695: NOT
40696: IFFALSE 40700
// exit ;
40698: GO 40971
// tmp := [ ] ;
40700: LD_ADDR_VAR 0 7
40704: PUSH
40705: EMPTY
40706: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40707: LD_ADDR_VAR 0 5
40711: PUSH
40712: DOUBLE
40713: LD_INT 1
40715: DEC
40716: ST_TO_ADDR
40717: LD_VAR 0 8
40721: PUSH
40722: FOR_TO
40723: IFFALSE 40918
// begin _d := rand ( 0 , 5 ) ;
40725: LD_ADDR_VAR 0 11
40729: PUSH
40730: LD_INT 0
40732: PPUSH
40733: LD_INT 5
40735: PPUSH
40736: CALL_OW 12
40740: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40741: LD_ADDR_VAR 0 12
40745: PUSH
40746: LD_INT 2
40748: PPUSH
40749: LD_INT 6
40751: PPUSH
40752: CALL_OW 12
40756: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40757: LD_ADDR_VAR 0 9
40761: PUSH
40762: LD_VAR 0 2
40766: PPUSH
40767: LD_VAR 0 11
40771: PPUSH
40772: LD_VAR 0 12
40776: PPUSH
40777: CALL_OW 272
40781: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40782: LD_ADDR_VAR 0 10
40786: PUSH
40787: LD_VAR 0 3
40791: PPUSH
40792: LD_VAR 0 11
40796: PPUSH
40797: LD_VAR 0 12
40801: PPUSH
40802: CALL_OW 273
40806: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40807: LD_VAR 0 9
40811: PPUSH
40812: LD_VAR 0 10
40816: PPUSH
40817: CALL_OW 488
40821: PUSH
40822: LD_VAR 0 9
40826: PUSH
40827: LD_VAR 0 10
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_VAR 0 7
40840: IN
40841: NOT
40842: AND
40843: PUSH
40844: LD_VAR 0 9
40848: PPUSH
40849: LD_VAR 0 10
40853: PPUSH
40854: CALL_OW 458
40858: NOT
40859: AND
40860: IFFALSE 40902
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40862: LD_ADDR_VAR 0 7
40866: PUSH
40867: LD_VAR 0 7
40871: PPUSH
40872: LD_VAR 0 7
40876: PUSH
40877: LD_INT 1
40879: PLUS
40880: PPUSH
40881: LD_VAR 0 9
40885: PUSH
40886: LD_VAR 0 10
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PPUSH
40895: CALL_OW 1
40899: ST_TO_ADDR
40900: GO 40916
// i := i - 1 ;
40902: LD_ADDR_VAR 0 5
40906: PUSH
40907: LD_VAR 0 5
40911: PUSH
40912: LD_INT 1
40914: MINUS
40915: ST_TO_ADDR
// end ;
40916: GO 40722
40918: POP
40919: POP
// for i in tmp do
40920: LD_ADDR_VAR 0 5
40924: PUSH
40925: LD_VAR 0 7
40929: PUSH
40930: FOR_IN
40931: IFFALSE 40969
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40933: LD_VAR 0 1
40937: PPUSH
40938: LD_VAR 0 5
40942: PUSH
40943: LD_INT 1
40945: ARRAY
40946: PPUSH
40947: LD_VAR 0 5
40951: PUSH
40952: LD_INT 2
40954: ARRAY
40955: PPUSH
40956: CALL 39911 0 3
40960: NOT
40961: IFFALSE 40967
// exit ;
40963: POP
40964: POP
40965: GO 40971
40967: GO 40930
40969: POP
40970: POP
// end ;
40971: LD_VAR 0 4
40975: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
40976: LD_INT 0
40978: PPUSH
40979: PPUSH
40980: PPUSH
40981: PPUSH
40982: PPUSH
40983: PPUSH
40984: PPUSH
// if not GetClass ( unit ) = class_sniper then
40985: LD_VAR 0 1
40989: PPUSH
40990: CALL_OW 257
40994: PUSH
40995: LD_INT 5
40997: EQUAL
40998: NOT
40999: IFFALSE 41003
// exit ;
41001: GO 41391
// dist := 8 ;
41003: LD_ADDR_VAR 0 5
41007: PUSH
41008: LD_INT 8
41010: ST_TO_ADDR
// viewRange := 12 ;
41011: LD_ADDR_VAR 0 7
41015: PUSH
41016: LD_INT 12
41018: ST_TO_ADDR
// side := GetSide ( unit ) ;
41019: LD_ADDR_VAR 0 6
41023: PUSH
41024: LD_VAR 0 1
41028: PPUSH
41029: CALL_OW 255
41033: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41034: LD_INT 61
41036: PPUSH
41037: LD_VAR 0 6
41041: PPUSH
41042: CALL_OW 321
41046: PUSH
41047: LD_INT 2
41049: EQUAL
41050: IFFALSE 41060
// viewRange := 16 ;
41052: LD_ADDR_VAR 0 7
41056: PUSH
41057: LD_INT 16
41059: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41060: LD_VAR 0 1
41064: PPUSH
41065: LD_VAR 0 2
41069: PPUSH
41070: LD_VAR 0 3
41074: PPUSH
41075: CALL_OW 297
41079: PUSH
41080: LD_VAR 0 5
41084: GREATER
41085: IFFALSE 41164
// begin ComMoveXY ( unit , x , y ) ;
41087: LD_VAR 0 1
41091: PPUSH
41092: LD_VAR 0 2
41096: PPUSH
41097: LD_VAR 0 3
41101: PPUSH
41102: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41106: LD_INT 35
41108: PPUSH
41109: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41113: LD_VAR 0 1
41117: PPUSH
41118: LD_VAR 0 2
41122: PPUSH
41123: LD_VAR 0 3
41127: PPUSH
41128: CALL 76939 0 3
41132: NOT
41133: IFFALSE 41137
// exit ;
41135: GO 41391
// until GetDistUnitXY ( unit , x , y ) < dist ;
41137: LD_VAR 0 1
41141: PPUSH
41142: LD_VAR 0 2
41146: PPUSH
41147: LD_VAR 0 3
41151: PPUSH
41152: CALL_OW 297
41156: PUSH
41157: LD_VAR 0 5
41161: LESS
41162: IFFALSE 41106
// end ; ComTurnXY ( unit , x , y ) ;
41164: LD_VAR 0 1
41168: PPUSH
41169: LD_VAR 0 2
41173: PPUSH
41174: LD_VAR 0 3
41178: PPUSH
41179: CALL_OW 118
// wait ( 5 ) ;
41183: LD_INT 5
41185: PPUSH
41186: CALL_OW 67
// _d := GetDir ( unit ) ;
41190: LD_ADDR_VAR 0 10
41194: PUSH
41195: LD_VAR 0 1
41199: PPUSH
41200: CALL_OW 254
41204: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
41205: LD_ADDR_VAR 0 8
41209: PUSH
41210: LD_VAR 0 1
41214: PPUSH
41215: CALL_OW 250
41219: PPUSH
41220: LD_VAR 0 10
41224: PPUSH
41225: LD_VAR 0 5
41229: PPUSH
41230: CALL_OW 272
41234: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
41235: LD_ADDR_VAR 0 9
41239: PUSH
41240: LD_VAR 0 1
41244: PPUSH
41245: CALL_OW 251
41249: PPUSH
41250: LD_VAR 0 10
41254: PPUSH
41255: LD_VAR 0 5
41259: PPUSH
41260: CALL_OW 273
41264: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41265: LD_VAR 0 8
41269: PPUSH
41270: LD_VAR 0 9
41274: PPUSH
41275: CALL_OW 488
41279: NOT
41280: IFFALSE 41284
// exit ;
41282: GO 41391
// ComAnimCustom ( unit , 1 ) ;
41284: LD_VAR 0 1
41288: PPUSH
41289: LD_INT 1
41291: PPUSH
41292: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41296: LD_VAR 0 8
41300: PPUSH
41301: LD_VAR 0 9
41305: PPUSH
41306: LD_VAR 0 6
41310: PPUSH
41311: LD_VAR 0 7
41315: PPUSH
41316: CALL_OW 330
// repeat wait ( 1 ) ;
41320: LD_INT 1
41322: PPUSH
41323: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
41327: LD_VAR 0 1
41331: PPUSH
41332: CALL_OW 316
41336: PUSH
41337: LD_VAR 0 1
41341: PPUSH
41342: CALL_OW 314
41346: OR
41347: PUSH
41348: LD_VAR 0 1
41352: PPUSH
41353: CALL_OW 302
41357: NOT
41358: OR
41359: PUSH
41360: LD_VAR 0 1
41364: PPUSH
41365: CALL_OW 301
41369: OR
41370: IFFALSE 41320
// RemoveSeeing ( _x , _y , side ) ;
41372: LD_VAR 0 8
41376: PPUSH
41377: LD_VAR 0 9
41381: PPUSH
41382: LD_VAR 0 6
41386: PPUSH
41387: CALL_OW 331
// end ; end_of_file
41391: LD_VAR 0 4
41395: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41396: LD_INT 0
41398: PPUSH
41399: PPUSH
// if exist_mode then
41400: LD_VAR 0 2
41404: IFFALSE 41429
// unit := CreateCharacter ( prefix & ident ) else
41406: LD_ADDR_VAR 0 5
41410: PUSH
41411: LD_VAR 0 3
41415: PUSH
41416: LD_VAR 0 1
41420: STR
41421: PPUSH
41422: CALL_OW 34
41426: ST_TO_ADDR
41427: GO 41444
// unit := NewCharacter ( ident ) ;
41429: LD_ADDR_VAR 0 5
41433: PUSH
41434: LD_VAR 0 1
41438: PPUSH
41439: CALL_OW 25
41443: ST_TO_ADDR
// result := unit ;
41444: LD_ADDR_VAR 0 4
41448: PUSH
41449: LD_VAR 0 5
41453: ST_TO_ADDR
// end ;
41454: LD_VAR 0 4
41458: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41459: LD_INT 0
41461: PPUSH
41462: PPUSH
// if not side or not nation then
41463: LD_VAR 0 1
41467: NOT
41468: PUSH
41469: LD_VAR 0 2
41473: NOT
41474: OR
41475: IFFALSE 41479
// exit ;
41477: GO 42247
// case nation of nation_american :
41479: LD_VAR 0 2
41483: PUSH
41484: LD_INT 1
41486: DOUBLE
41487: EQUAL
41488: IFTRUE 41492
41490: GO 41706
41492: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41493: LD_ADDR_VAR 0 4
41497: PUSH
41498: LD_INT 35
41500: PUSH
41501: LD_INT 45
41503: PUSH
41504: LD_INT 46
41506: PUSH
41507: LD_INT 47
41509: PUSH
41510: LD_INT 82
41512: PUSH
41513: LD_INT 83
41515: PUSH
41516: LD_INT 84
41518: PUSH
41519: LD_INT 85
41521: PUSH
41522: LD_INT 86
41524: PUSH
41525: LD_INT 1
41527: PUSH
41528: LD_INT 2
41530: PUSH
41531: LD_INT 6
41533: PUSH
41534: LD_INT 15
41536: PUSH
41537: LD_INT 16
41539: PUSH
41540: LD_INT 7
41542: PUSH
41543: LD_INT 12
41545: PUSH
41546: LD_INT 13
41548: PUSH
41549: LD_INT 10
41551: PUSH
41552: LD_INT 14
41554: PUSH
41555: LD_INT 20
41557: PUSH
41558: LD_INT 21
41560: PUSH
41561: LD_INT 22
41563: PUSH
41564: LD_INT 25
41566: PUSH
41567: LD_INT 32
41569: PUSH
41570: LD_INT 27
41572: PUSH
41573: LD_INT 36
41575: PUSH
41576: LD_INT 69
41578: PUSH
41579: LD_INT 39
41581: PUSH
41582: LD_INT 34
41584: PUSH
41585: LD_INT 40
41587: PUSH
41588: LD_INT 48
41590: PUSH
41591: LD_INT 49
41593: PUSH
41594: LD_INT 50
41596: PUSH
41597: LD_INT 51
41599: PUSH
41600: LD_INT 52
41602: PUSH
41603: LD_INT 53
41605: PUSH
41606: LD_INT 54
41608: PUSH
41609: LD_INT 55
41611: PUSH
41612: LD_INT 56
41614: PUSH
41615: LD_INT 57
41617: PUSH
41618: LD_INT 58
41620: PUSH
41621: LD_INT 59
41623: PUSH
41624: LD_INT 60
41626: PUSH
41627: LD_INT 61
41629: PUSH
41630: LD_INT 62
41632: PUSH
41633: LD_INT 80
41635: PUSH
41636: LD_INT 82
41638: PUSH
41639: LD_INT 83
41641: PUSH
41642: LD_INT 84
41644: PUSH
41645: LD_INT 85
41647: PUSH
41648: LD_INT 86
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: ST_TO_ADDR
41704: GO 42171
41706: LD_INT 2
41708: DOUBLE
41709: EQUAL
41710: IFTRUE 41714
41712: GO 41940
41714: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41715: LD_ADDR_VAR 0 4
41719: PUSH
41720: LD_INT 35
41722: PUSH
41723: LD_INT 45
41725: PUSH
41726: LD_INT 46
41728: PUSH
41729: LD_INT 47
41731: PUSH
41732: LD_INT 82
41734: PUSH
41735: LD_INT 83
41737: PUSH
41738: LD_INT 84
41740: PUSH
41741: LD_INT 85
41743: PUSH
41744: LD_INT 87
41746: PUSH
41747: LD_INT 70
41749: PUSH
41750: LD_INT 1
41752: PUSH
41753: LD_INT 11
41755: PUSH
41756: LD_INT 3
41758: PUSH
41759: LD_INT 4
41761: PUSH
41762: LD_INT 5
41764: PUSH
41765: LD_INT 6
41767: PUSH
41768: LD_INT 15
41770: PUSH
41771: LD_INT 18
41773: PUSH
41774: LD_INT 7
41776: PUSH
41777: LD_INT 17
41779: PUSH
41780: LD_INT 8
41782: PUSH
41783: LD_INT 20
41785: PUSH
41786: LD_INT 21
41788: PUSH
41789: LD_INT 22
41791: PUSH
41792: LD_INT 72
41794: PUSH
41795: LD_INT 26
41797: PUSH
41798: LD_INT 69
41800: PUSH
41801: LD_INT 39
41803: PUSH
41804: LD_INT 40
41806: PUSH
41807: LD_INT 41
41809: PUSH
41810: LD_INT 42
41812: PUSH
41813: LD_INT 43
41815: PUSH
41816: LD_INT 48
41818: PUSH
41819: LD_INT 49
41821: PUSH
41822: LD_INT 50
41824: PUSH
41825: LD_INT 51
41827: PUSH
41828: LD_INT 52
41830: PUSH
41831: LD_INT 53
41833: PUSH
41834: LD_INT 54
41836: PUSH
41837: LD_INT 55
41839: PUSH
41840: LD_INT 56
41842: PUSH
41843: LD_INT 60
41845: PUSH
41846: LD_INT 61
41848: PUSH
41849: LD_INT 62
41851: PUSH
41852: LD_INT 66
41854: PUSH
41855: LD_INT 67
41857: PUSH
41858: LD_INT 68
41860: PUSH
41861: LD_INT 81
41863: PUSH
41864: LD_INT 82
41866: PUSH
41867: LD_INT 83
41869: PUSH
41870: LD_INT 84
41872: PUSH
41873: LD_INT 85
41875: PUSH
41876: LD_INT 87
41878: PUSH
41879: LD_INT 88
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: ST_TO_ADDR
41938: GO 42171
41940: LD_INT 3
41942: DOUBLE
41943: EQUAL
41944: IFTRUE 41948
41946: GO 42170
41948: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41949: LD_ADDR_VAR 0 4
41953: PUSH
41954: LD_INT 46
41956: PUSH
41957: LD_INT 47
41959: PUSH
41960: LD_INT 1
41962: PUSH
41963: LD_INT 2
41965: PUSH
41966: LD_INT 82
41968: PUSH
41969: LD_INT 83
41971: PUSH
41972: LD_INT 84
41974: PUSH
41975: LD_INT 85
41977: PUSH
41978: LD_INT 86
41980: PUSH
41981: LD_INT 11
41983: PUSH
41984: LD_INT 9
41986: PUSH
41987: LD_INT 20
41989: PUSH
41990: LD_INT 19
41992: PUSH
41993: LD_INT 21
41995: PUSH
41996: LD_INT 24
41998: PUSH
41999: LD_INT 22
42001: PUSH
42002: LD_INT 25
42004: PUSH
42005: LD_INT 28
42007: PUSH
42008: LD_INT 29
42010: PUSH
42011: LD_INT 30
42013: PUSH
42014: LD_INT 31
42016: PUSH
42017: LD_INT 37
42019: PUSH
42020: LD_INT 38
42022: PUSH
42023: LD_INT 32
42025: PUSH
42026: LD_INT 27
42028: PUSH
42029: LD_INT 33
42031: PUSH
42032: LD_INT 69
42034: PUSH
42035: LD_INT 39
42037: PUSH
42038: LD_INT 34
42040: PUSH
42041: LD_INT 40
42043: PUSH
42044: LD_INT 71
42046: PUSH
42047: LD_INT 23
42049: PUSH
42050: LD_INT 44
42052: PUSH
42053: LD_INT 48
42055: PUSH
42056: LD_INT 49
42058: PUSH
42059: LD_INT 50
42061: PUSH
42062: LD_INT 51
42064: PUSH
42065: LD_INT 52
42067: PUSH
42068: LD_INT 53
42070: PUSH
42071: LD_INT 54
42073: PUSH
42074: LD_INT 55
42076: PUSH
42077: LD_INT 56
42079: PUSH
42080: LD_INT 57
42082: PUSH
42083: LD_INT 58
42085: PUSH
42086: LD_INT 59
42088: PUSH
42089: LD_INT 63
42091: PUSH
42092: LD_INT 64
42094: PUSH
42095: LD_INT 65
42097: PUSH
42098: LD_INT 82
42100: PUSH
42101: LD_INT 83
42103: PUSH
42104: LD_INT 84
42106: PUSH
42107: LD_INT 85
42109: PUSH
42110: LD_INT 86
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: ST_TO_ADDR
42168: GO 42171
42170: POP
// if state > - 1 and state < 3 then
42171: LD_VAR 0 3
42175: PUSH
42176: LD_INT 1
42178: NEG
42179: GREATER
42180: PUSH
42181: LD_VAR 0 3
42185: PUSH
42186: LD_INT 3
42188: LESS
42189: AND
42190: IFFALSE 42247
// for i in result do
42192: LD_ADDR_VAR 0 5
42196: PUSH
42197: LD_VAR 0 4
42201: PUSH
42202: FOR_IN
42203: IFFALSE 42245
// if GetTech ( i , side ) <> state then
42205: LD_VAR 0 5
42209: PPUSH
42210: LD_VAR 0 1
42214: PPUSH
42215: CALL_OW 321
42219: PUSH
42220: LD_VAR 0 3
42224: NONEQUAL
42225: IFFALSE 42243
// result := result diff i ;
42227: LD_ADDR_VAR 0 4
42231: PUSH
42232: LD_VAR 0 4
42236: PUSH
42237: LD_VAR 0 5
42241: DIFF
42242: ST_TO_ADDR
42243: GO 42202
42245: POP
42246: POP
// end ;
42247: LD_VAR 0 4
42251: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42252: LD_INT 0
42254: PPUSH
42255: PPUSH
42256: PPUSH
// result := true ;
42257: LD_ADDR_VAR 0 3
42261: PUSH
42262: LD_INT 1
42264: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42265: LD_ADDR_VAR 0 5
42269: PUSH
42270: LD_VAR 0 2
42274: PPUSH
42275: CALL_OW 480
42279: ST_TO_ADDR
// if not tmp then
42280: LD_VAR 0 5
42284: NOT
42285: IFFALSE 42289
// exit ;
42287: GO 42338
// for i in tmp do
42289: LD_ADDR_VAR 0 4
42293: PUSH
42294: LD_VAR 0 5
42298: PUSH
42299: FOR_IN
42300: IFFALSE 42336
// if GetTech ( i , side ) <> state_researched then
42302: LD_VAR 0 4
42306: PPUSH
42307: LD_VAR 0 1
42311: PPUSH
42312: CALL_OW 321
42316: PUSH
42317: LD_INT 2
42319: NONEQUAL
42320: IFFALSE 42334
// begin result := false ;
42322: LD_ADDR_VAR 0 3
42326: PUSH
42327: LD_INT 0
42329: ST_TO_ADDR
// exit ;
42330: POP
42331: POP
42332: GO 42338
// end ;
42334: GO 42299
42336: POP
42337: POP
// end ;
42338: LD_VAR 0 3
42342: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42343: LD_INT 0
42345: PPUSH
42346: PPUSH
42347: PPUSH
42348: PPUSH
42349: PPUSH
42350: PPUSH
42351: PPUSH
42352: PPUSH
42353: PPUSH
42354: PPUSH
42355: PPUSH
42356: PPUSH
42357: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42358: LD_VAR 0 1
42362: NOT
42363: PUSH
42364: LD_VAR 0 1
42368: PPUSH
42369: CALL_OW 257
42373: PUSH
42374: LD_INT 9
42376: NONEQUAL
42377: OR
42378: IFFALSE 42382
// exit ;
42380: GO 42955
// side := GetSide ( unit ) ;
42382: LD_ADDR_VAR 0 9
42386: PUSH
42387: LD_VAR 0 1
42391: PPUSH
42392: CALL_OW 255
42396: ST_TO_ADDR
// tech_space := tech_spacanom ;
42397: LD_ADDR_VAR 0 12
42401: PUSH
42402: LD_INT 29
42404: ST_TO_ADDR
// tech_time := tech_taurad ;
42405: LD_ADDR_VAR 0 13
42409: PUSH
42410: LD_INT 28
42412: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42413: LD_ADDR_VAR 0 11
42417: PUSH
42418: LD_VAR 0 1
42422: PPUSH
42423: CALL_OW 310
42427: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42428: LD_VAR 0 11
42432: PPUSH
42433: CALL_OW 247
42437: PUSH
42438: LD_INT 2
42440: EQUAL
42441: IFFALSE 42445
// exit ;
42443: GO 42955
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42445: LD_ADDR_VAR 0 8
42449: PUSH
42450: LD_INT 81
42452: PUSH
42453: LD_VAR 0 9
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 3
42464: PUSH
42465: LD_INT 21
42467: PUSH
42468: LD_INT 3
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PPUSH
42483: CALL_OW 69
42487: ST_TO_ADDR
// if not tmp then
42488: LD_VAR 0 8
42492: NOT
42493: IFFALSE 42497
// exit ;
42495: GO 42955
// if in_unit then
42497: LD_VAR 0 11
42501: IFFALSE 42525
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42503: LD_ADDR_VAR 0 10
42507: PUSH
42508: LD_VAR 0 8
42512: PPUSH
42513: LD_VAR 0 11
42517: PPUSH
42518: CALL_OW 74
42522: ST_TO_ADDR
42523: GO 42545
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42525: LD_ADDR_VAR 0 10
42529: PUSH
42530: LD_VAR 0 8
42534: PPUSH
42535: LD_VAR 0 1
42539: PPUSH
42540: CALL_OW 74
42544: ST_TO_ADDR
// if not enemy then
42545: LD_VAR 0 10
42549: NOT
42550: IFFALSE 42554
// exit ;
42552: GO 42955
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42554: LD_VAR 0 11
42558: PUSH
42559: LD_VAR 0 11
42563: PPUSH
42564: LD_VAR 0 10
42568: PPUSH
42569: CALL_OW 296
42573: PUSH
42574: LD_INT 13
42576: GREATER
42577: AND
42578: PUSH
42579: LD_VAR 0 1
42583: PPUSH
42584: LD_VAR 0 10
42588: PPUSH
42589: CALL_OW 296
42593: PUSH
42594: LD_INT 12
42596: GREATER
42597: OR
42598: IFFALSE 42602
// exit ;
42600: GO 42955
// missile := [ 1 ] ;
42602: LD_ADDR_VAR 0 14
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: EMPTY
42611: LIST
42612: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42613: LD_VAR 0 9
42617: PPUSH
42618: LD_VAR 0 12
42622: PPUSH
42623: CALL_OW 325
42627: IFFALSE 42656
// missile := Insert ( missile , missile + 1 , 2 ) ;
42629: LD_ADDR_VAR 0 14
42633: PUSH
42634: LD_VAR 0 14
42638: PPUSH
42639: LD_VAR 0 14
42643: PUSH
42644: LD_INT 1
42646: PLUS
42647: PPUSH
42648: LD_INT 2
42650: PPUSH
42651: CALL_OW 2
42655: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42656: LD_VAR 0 9
42660: PPUSH
42661: LD_VAR 0 13
42665: PPUSH
42666: CALL_OW 325
42670: PUSH
42671: LD_VAR 0 10
42675: PPUSH
42676: CALL_OW 255
42680: PPUSH
42681: LD_VAR 0 13
42685: PPUSH
42686: CALL_OW 325
42690: NOT
42691: AND
42692: IFFALSE 42721
// missile := Insert ( missile , missile + 1 , 3 ) ;
42694: LD_ADDR_VAR 0 14
42698: PUSH
42699: LD_VAR 0 14
42703: PPUSH
42704: LD_VAR 0 14
42708: PUSH
42709: LD_INT 1
42711: PLUS
42712: PPUSH
42713: LD_INT 3
42715: PPUSH
42716: CALL_OW 2
42720: ST_TO_ADDR
// if missile < 2 then
42721: LD_VAR 0 14
42725: PUSH
42726: LD_INT 2
42728: LESS
42729: IFFALSE 42733
// exit ;
42731: GO 42955
// x := GetX ( enemy ) ;
42733: LD_ADDR_VAR 0 4
42737: PUSH
42738: LD_VAR 0 10
42742: PPUSH
42743: CALL_OW 250
42747: ST_TO_ADDR
// y := GetY ( enemy ) ;
42748: LD_ADDR_VAR 0 5
42752: PUSH
42753: LD_VAR 0 10
42757: PPUSH
42758: CALL_OW 251
42762: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42763: LD_ADDR_VAR 0 6
42767: PUSH
42768: LD_VAR 0 4
42772: PUSH
42773: LD_INT 1
42775: NEG
42776: PPUSH
42777: LD_INT 1
42779: PPUSH
42780: CALL_OW 12
42784: PLUS
42785: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42786: LD_ADDR_VAR 0 7
42790: PUSH
42791: LD_VAR 0 5
42795: PUSH
42796: LD_INT 1
42798: NEG
42799: PPUSH
42800: LD_INT 1
42802: PPUSH
42803: CALL_OW 12
42807: PLUS
42808: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42809: LD_VAR 0 6
42813: PPUSH
42814: LD_VAR 0 7
42818: PPUSH
42819: CALL_OW 488
42823: NOT
42824: IFFALSE 42846
// begin _x := x ;
42826: LD_ADDR_VAR 0 6
42830: PUSH
42831: LD_VAR 0 4
42835: ST_TO_ADDR
// _y := y ;
42836: LD_ADDR_VAR 0 7
42840: PUSH
42841: LD_VAR 0 5
42845: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42846: LD_ADDR_VAR 0 3
42850: PUSH
42851: LD_INT 1
42853: PPUSH
42854: LD_VAR 0 14
42858: PPUSH
42859: CALL_OW 12
42863: ST_TO_ADDR
// case i of 1 :
42864: LD_VAR 0 3
42868: PUSH
42869: LD_INT 1
42871: DOUBLE
42872: EQUAL
42873: IFTRUE 42877
42875: GO 42894
42877: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42878: LD_VAR 0 1
42882: PPUSH
42883: LD_VAR 0 10
42887: PPUSH
42888: CALL_OW 115
42892: GO 42955
42894: LD_INT 2
42896: DOUBLE
42897: EQUAL
42898: IFTRUE 42902
42900: GO 42924
42902: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42903: LD_VAR 0 1
42907: PPUSH
42908: LD_VAR 0 6
42912: PPUSH
42913: LD_VAR 0 7
42917: PPUSH
42918: CALL_OW 153
42922: GO 42955
42924: LD_INT 3
42926: DOUBLE
42927: EQUAL
42928: IFTRUE 42932
42930: GO 42954
42932: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42933: LD_VAR 0 1
42937: PPUSH
42938: LD_VAR 0 6
42942: PPUSH
42943: LD_VAR 0 7
42947: PPUSH
42948: CALL_OW 154
42952: GO 42955
42954: POP
// end ;
42955: LD_VAR 0 2
42959: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42960: LD_INT 0
42962: PPUSH
42963: PPUSH
42964: PPUSH
42965: PPUSH
42966: PPUSH
42967: PPUSH
// if not unit or not building then
42968: LD_VAR 0 1
42972: NOT
42973: PUSH
42974: LD_VAR 0 2
42978: NOT
42979: OR
42980: IFFALSE 42984
// exit ;
42982: GO 43142
// x := GetX ( building ) ;
42984: LD_ADDR_VAR 0 5
42988: PUSH
42989: LD_VAR 0 2
42993: PPUSH
42994: CALL_OW 250
42998: ST_TO_ADDR
// y := GetY ( building ) ;
42999: LD_ADDR_VAR 0 6
43003: PUSH
43004: LD_VAR 0 2
43008: PPUSH
43009: CALL_OW 251
43013: ST_TO_ADDR
// for i = 0 to 5 do
43014: LD_ADDR_VAR 0 4
43018: PUSH
43019: DOUBLE
43020: LD_INT 0
43022: DEC
43023: ST_TO_ADDR
43024: LD_INT 5
43026: PUSH
43027: FOR_TO
43028: IFFALSE 43140
// begin _x := ShiftX ( x , i , 3 ) ;
43030: LD_ADDR_VAR 0 7
43034: PUSH
43035: LD_VAR 0 5
43039: PPUSH
43040: LD_VAR 0 4
43044: PPUSH
43045: LD_INT 3
43047: PPUSH
43048: CALL_OW 272
43052: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43053: LD_ADDR_VAR 0 8
43057: PUSH
43058: LD_VAR 0 6
43062: PPUSH
43063: LD_VAR 0 4
43067: PPUSH
43068: LD_INT 3
43070: PPUSH
43071: CALL_OW 273
43075: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43076: LD_VAR 0 7
43080: PPUSH
43081: LD_VAR 0 8
43085: PPUSH
43086: CALL_OW 488
43090: NOT
43091: IFFALSE 43095
// continue ;
43093: GO 43027
// if HexInfo ( _x , _y ) = 0 then
43095: LD_VAR 0 7
43099: PPUSH
43100: LD_VAR 0 8
43104: PPUSH
43105: CALL_OW 428
43109: PUSH
43110: LD_INT 0
43112: EQUAL
43113: IFFALSE 43138
// begin ComMoveXY ( unit , _x , _y ) ;
43115: LD_VAR 0 1
43119: PPUSH
43120: LD_VAR 0 7
43124: PPUSH
43125: LD_VAR 0 8
43129: PPUSH
43130: CALL_OW 111
// exit ;
43134: POP
43135: POP
43136: GO 43142
// end ; end ;
43138: GO 43027
43140: POP
43141: POP
// end ;
43142: LD_VAR 0 3
43146: RET
// export function ScanBase ( side , base_area ) ; begin
43147: LD_INT 0
43149: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43150: LD_ADDR_VAR 0 3
43154: PUSH
43155: LD_VAR 0 2
43159: PPUSH
43160: LD_INT 81
43162: PUSH
43163: LD_VAR 0 1
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PPUSH
43172: CALL_OW 70
43176: ST_TO_ADDR
// end ;
43177: LD_VAR 0 3
43181: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43182: LD_INT 0
43184: PPUSH
43185: PPUSH
43186: PPUSH
43187: PPUSH
// result := false ;
43188: LD_ADDR_VAR 0 2
43192: PUSH
43193: LD_INT 0
43195: ST_TO_ADDR
// side := GetSide ( unit ) ;
43196: LD_ADDR_VAR 0 3
43200: PUSH
43201: LD_VAR 0 1
43205: PPUSH
43206: CALL_OW 255
43210: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43211: LD_ADDR_VAR 0 4
43215: PUSH
43216: LD_VAR 0 1
43220: PPUSH
43221: CALL_OW 248
43225: ST_TO_ADDR
// case nat of 1 :
43226: LD_VAR 0 4
43230: PUSH
43231: LD_INT 1
43233: DOUBLE
43234: EQUAL
43235: IFTRUE 43239
43237: GO 43250
43239: POP
// tech := tech_lassight ; 2 :
43240: LD_ADDR_VAR 0 5
43244: PUSH
43245: LD_INT 12
43247: ST_TO_ADDR
43248: GO 43289
43250: LD_INT 2
43252: DOUBLE
43253: EQUAL
43254: IFTRUE 43258
43256: GO 43269
43258: POP
// tech := tech_mortar ; 3 :
43259: LD_ADDR_VAR 0 5
43263: PUSH
43264: LD_INT 41
43266: ST_TO_ADDR
43267: GO 43289
43269: LD_INT 3
43271: DOUBLE
43272: EQUAL
43273: IFTRUE 43277
43275: GO 43288
43277: POP
// tech := tech_bazooka ; end ;
43278: LD_ADDR_VAR 0 5
43282: PUSH
43283: LD_INT 44
43285: ST_TO_ADDR
43286: GO 43289
43288: POP
// if Researched ( side , tech ) then
43289: LD_VAR 0 3
43293: PPUSH
43294: LD_VAR 0 5
43298: PPUSH
43299: CALL_OW 325
43303: IFFALSE 43330
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43305: LD_ADDR_VAR 0 2
43309: PUSH
43310: LD_INT 5
43312: PUSH
43313: LD_INT 8
43315: PUSH
43316: LD_INT 9
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: LIST
43323: PUSH
43324: LD_VAR 0 4
43328: ARRAY
43329: ST_TO_ADDR
// end ;
43330: LD_VAR 0 2
43334: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43335: LD_INT 0
43337: PPUSH
43338: PPUSH
43339: PPUSH
// if not mines then
43340: LD_VAR 0 2
43344: NOT
43345: IFFALSE 43349
// exit ;
43347: GO 43493
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43349: LD_ADDR_VAR 0 5
43353: PUSH
43354: LD_INT 81
43356: PUSH
43357: LD_VAR 0 1
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 3
43368: PUSH
43369: LD_INT 21
43371: PUSH
43372: LD_INT 3
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PPUSH
43387: CALL_OW 69
43391: ST_TO_ADDR
// for i in mines do
43392: LD_ADDR_VAR 0 4
43396: PUSH
43397: LD_VAR 0 2
43401: PUSH
43402: FOR_IN
43403: IFFALSE 43491
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43405: LD_VAR 0 4
43409: PUSH
43410: LD_INT 1
43412: ARRAY
43413: PPUSH
43414: LD_VAR 0 4
43418: PUSH
43419: LD_INT 2
43421: ARRAY
43422: PPUSH
43423: CALL_OW 458
43427: NOT
43428: IFFALSE 43432
// continue ;
43430: GO 43402
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43432: LD_VAR 0 4
43436: PUSH
43437: LD_INT 1
43439: ARRAY
43440: PPUSH
43441: LD_VAR 0 4
43445: PUSH
43446: LD_INT 2
43448: ARRAY
43449: PPUSH
43450: CALL_OW 428
43454: PUSH
43455: LD_VAR 0 5
43459: IN
43460: IFFALSE 43489
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43462: LD_VAR 0 4
43466: PUSH
43467: LD_INT 1
43469: ARRAY
43470: PPUSH
43471: LD_VAR 0 4
43475: PUSH
43476: LD_INT 2
43478: ARRAY
43479: PPUSH
43480: LD_VAR 0 1
43484: PPUSH
43485: CALL_OW 456
// end ;
43489: GO 43402
43491: POP
43492: POP
// end ;
43493: LD_VAR 0 3
43497: RET
// export function Count ( array ) ; var i ; begin
43498: LD_INT 0
43500: PPUSH
43501: PPUSH
// result := 0 ;
43502: LD_ADDR_VAR 0 2
43506: PUSH
43507: LD_INT 0
43509: ST_TO_ADDR
// for i in array do
43510: LD_ADDR_VAR 0 3
43514: PUSH
43515: LD_VAR 0 1
43519: PUSH
43520: FOR_IN
43521: IFFALSE 43545
// if i then
43523: LD_VAR 0 3
43527: IFFALSE 43543
// result := result + 1 ;
43529: LD_ADDR_VAR 0 2
43533: PUSH
43534: LD_VAR 0 2
43538: PUSH
43539: LD_INT 1
43541: PLUS
43542: ST_TO_ADDR
43543: GO 43520
43545: POP
43546: POP
// end ;
43547: LD_VAR 0 2
43551: RET
// export function IsEmpty ( building ) ; begin
43552: LD_INT 0
43554: PPUSH
// if not building then
43555: LD_VAR 0 1
43559: NOT
43560: IFFALSE 43564
// exit ;
43562: GO 43607
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43564: LD_ADDR_VAR 0 2
43568: PUSH
43569: LD_VAR 0 1
43573: PUSH
43574: LD_INT 22
43576: PUSH
43577: LD_VAR 0 1
43581: PPUSH
43582: CALL_OW 255
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 58
43593: PUSH
43594: EMPTY
43595: LIST
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PPUSH
43601: CALL_OW 69
43605: IN
43606: ST_TO_ADDR
// end ;
43607: LD_VAR 0 2
43611: RET
// export function IsNotFull ( building ) ; begin
43612: LD_INT 0
43614: PPUSH
// if not building then
43615: LD_VAR 0 1
43619: NOT
43620: IFFALSE 43624
// exit ;
43622: GO 43643
// result := UnitsInside ( building ) < 6 ;
43624: LD_ADDR_VAR 0 2
43628: PUSH
43629: LD_VAR 0 1
43633: PPUSH
43634: CALL_OW 313
43638: PUSH
43639: LD_INT 6
43641: LESS
43642: ST_TO_ADDR
// end ;
43643: LD_VAR 0 2
43647: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43648: LD_INT 0
43650: PPUSH
43651: PPUSH
43652: PPUSH
43653: PPUSH
// tmp := [ ] ;
43654: LD_ADDR_VAR 0 3
43658: PUSH
43659: EMPTY
43660: ST_TO_ADDR
// list := [ ] ;
43661: LD_ADDR_VAR 0 5
43665: PUSH
43666: EMPTY
43667: ST_TO_ADDR
// for i = 16 to 25 do
43668: LD_ADDR_VAR 0 4
43672: PUSH
43673: DOUBLE
43674: LD_INT 16
43676: DEC
43677: ST_TO_ADDR
43678: LD_INT 25
43680: PUSH
43681: FOR_TO
43682: IFFALSE 43755
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43684: LD_ADDR_VAR 0 3
43688: PUSH
43689: LD_VAR 0 3
43693: PUSH
43694: LD_INT 22
43696: PUSH
43697: LD_VAR 0 1
43701: PPUSH
43702: CALL_OW 255
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 91
43713: PUSH
43714: LD_VAR 0 1
43718: PUSH
43719: LD_INT 6
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 30
43729: PUSH
43730: LD_VAR 0 4
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: LIST
43743: PUSH
43744: EMPTY
43745: LIST
43746: PPUSH
43747: CALL_OW 69
43751: ADD
43752: ST_TO_ADDR
43753: GO 43681
43755: POP
43756: POP
// for i = 1 to tmp do
43757: LD_ADDR_VAR 0 4
43761: PUSH
43762: DOUBLE
43763: LD_INT 1
43765: DEC
43766: ST_TO_ADDR
43767: LD_VAR 0 3
43771: PUSH
43772: FOR_TO
43773: IFFALSE 43861
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43775: LD_ADDR_VAR 0 5
43779: PUSH
43780: LD_VAR 0 5
43784: PUSH
43785: LD_VAR 0 3
43789: PUSH
43790: LD_VAR 0 4
43794: ARRAY
43795: PPUSH
43796: CALL_OW 266
43800: PUSH
43801: LD_VAR 0 3
43805: PUSH
43806: LD_VAR 0 4
43810: ARRAY
43811: PPUSH
43812: CALL_OW 250
43816: PUSH
43817: LD_VAR 0 3
43821: PUSH
43822: LD_VAR 0 4
43826: ARRAY
43827: PPUSH
43828: CALL_OW 251
43832: PUSH
43833: LD_VAR 0 3
43837: PUSH
43838: LD_VAR 0 4
43842: ARRAY
43843: PPUSH
43844: CALL_OW 254
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: PUSH
43855: EMPTY
43856: LIST
43857: ADD
43858: ST_TO_ADDR
43859: GO 43772
43861: POP
43862: POP
// result := list ;
43863: LD_ADDR_VAR 0 2
43867: PUSH
43868: LD_VAR 0 5
43872: ST_TO_ADDR
// end ;
43873: LD_VAR 0 2
43877: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43878: LD_INT 0
43880: PPUSH
43881: PPUSH
43882: PPUSH
43883: PPUSH
43884: PPUSH
43885: PPUSH
43886: PPUSH
// if not factory then
43887: LD_VAR 0 1
43891: NOT
43892: IFFALSE 43896
// exit ;
43894: GO 44489
// if control = control_apeman then
43896: LD_VAR 0 4
43900: PUSH
43901: LD_INT 5
43903: EQUAL
43904: IFFALSE 44013
// begin tmp := UnitsInside ( factory ) ;
43906: LD_ADDR_VAR 0 8
43910: PUSH
43911: LD_VAR 0 1
43915: PPUSH
43916: CALL_OW 313
43920: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43921: LD_VAR 0 8
43925: PPUSH
43926: LD_INT 25
43928: PUSH
43929: LD_INT 12
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PPUSH
43936: CALL_OW 72
43940: NOT
43941: IFFALSE 43951
// control := control_manual ;
43943: LD_ADDR_VAR 0 4
43947: PUSH
43948: LD_INT 1
43950: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43951: LD_ADDR_VAR 0 8
43955: PUSH
43956: LD_VAR 0 1
43960: PPUSH
43961: CALL 43648 0 1
43965: ST_TO_ADDR
// if tmp then
43966: LD_VAR 0 8
43970: IFFALSE 44013
// begin for i in tmp do
43972: LD_ADDR_VAR 0 7
43976: PUSH
43977: LD_VAR 0 8
43981: PUSH
43982: FOR_IN
43983: IFFALSE 44011
// if i [ 1 ] = b_ext_radio then
43985: LD_VAR 0 7
43989: PUSH
43990: LD_INT 1
43992: ARRAY
43993: PUSH
43994: LD_INT 22
43996: EQUAL
43997: IFFALSE 44009
// begin control := control_remote ;
43999: LD_ADDR_VAR 0 4
44003: PUSH
44004: LD_INT 2
44006: ST_TO_ADDR
// break ;
44007: GO 44011
// end ;
44009: GO 43982
44011: POP
44012: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44013: LD_VAR 0 1
44017: PPUSH
44018: LD_VAR 0 2
44022: PPUSH
44023: LD_VAR 0 3
44027: PPUSH
44028: LD_VAR 0 4
44032: PPUSH
44033: LD_VAR 0 5
44037: PPUSH
44038: CALL_OW 448
44042: IFFALSE 44077
// begin result := [ chassis , engine , control , weapon ] ;
44044: LD_ADDR_VAR 0 6
44048: PUSH
44049: LD_VAR 0 2
44053: PUSH
44054: LD_VAR 0 3
44058: PUSH
44059: LD_VAR 0 4
44063: PUSH
44064: LD_VAR 0 5
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: ST_TO_ADDR
// exit ;
44075: GO 44489
// end ; _chassis := AvailableChassisList ( factory ) ;
44077: LD_ADDR_VAR 0 9
44081: PUSH
44082: LD_VAR 0 1
44086: PPUSH
44087: CALL_OW 475
44091: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44092: LD_ADDR_VAR 0 11
44096: PUSH
44097: LD_VAR 0 1
44101: PPUSH
44102: CALL_OW 476
44106: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44107: LD_ADDR_VAR 0 12
44111: PUSH
44112: LD_VAR 0 1
44116: PPUSH
44117: CALL_OW 477
44121: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44122: LD_ADDR_VAR 0 10
44126: PUSH
44127: LD_VAR 0 1
44131: PPUSH
44132: CALL_OW 478
44136: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44137: LD_VAR 0 9
44141: NOT
44142: PUSH
44143: LD_VAR 0 11
44147: NOT
44148: OR
44149: PUSH
44150: LD_VAR 0 12
44154: NOT
44155: OR
44156: PUSH
44157: LD_VAR 0 10
44161: NOT
44162: OR
44163: IFFALSE 44198
// begin result := [ chassis , engine , control , weapon ] ;
44165: LD_ADDR_VAR 0 6
44169: PUSH
44170: LD_VAR 0 2
44174: PUSH
44175: LD_VAR 0 3
44179: PUSH
44180: LD_VAR 0 4
44184: PUSH
44185: LD_VAR 0 5
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: ST_TO_ADDR
// exit ;
44196: GO 44489
// end ; if not chassis in _chassis then
44198: LD_VAR 0 2
44202: PUSH
44203: LD_VAR 0 9
44207: IN
44208: NOT
44209: IFFALSE 44235
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44211: LD_ADDR_VAR 0 2
44215: PUSH
44216: LD_VAR 0 9
44220: PUSH
44221: LD_INT 1
44223: PPUSH
44224: LD_VAR 0 9
44228: PPUSH
44229: CALL_OW 12
44233: ARRAY
44234: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44235: LD_VAR 0 2
44239: PPUSH
44240: LD_VAR 0 3
44244: PPUSH
44245: CALL 44494 0 2
44249: NOT
44250: IFFALSE 44309
// repeat engine := _engine [ 1 ] ;
44252: LD_ADDR_VAR 0 3
44256: PUSH
44257: LD_VAR 0 11
44261: PUSH
44262: LD_INT 1
44264: ARRAY
44265: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44266: LD_ADDR_VAR 0 11
44270: PUSH
44271: LD_VAR 0 11
44275: PPUSH
44276: LD_INT 1
44278: PPUSH
44279: CALL_OW 3
44283: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44284: LD_VAR 0 2
44288: PPUSH
44289: LD_VAR 0 3
44293: PPUSH
44294: CALL 44494 0 2
44298: PUSH
44299: LD_VAR 0 11
44303: PUSH
44304: EMPTY
44305: EQUAL
44306: OR
44307: IFFALSE 44252
// if not control in _control then
44309: LD_VAR 0 4
44313: PUSH
44314: LD_VAR 0 12
44318: IN
44319: NOT
44320: IFFALSE 44346
// control := _control [ rand ( 1 , _control ) ] ;
44322: LD_ADDR_VAR 0 4
44326: PUSH
44327: LD_VAR 0 12
44331: PUSH
44332: LD_INT 1
44334: PPUSH
44335: LD_VAR 0 12
44339: PPUSH
44340: CALL_OW 12
44344: ARRAY
44345: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44346: LD_VAR 0 2
44350: PPUSH
44351: LD_VAR 0 5
44355: PPUSH
44356: CALL 44714 0 2
44360: NOT
44361: IFFALSE 44420
// repeat weapon := _weapon [ 1 ] ;
44363: LD_ADDR_VAR 0 5
44367: PUSH
44368: LD_VAR 0 10
44372: PUSH
44373: LD_INT 1
44375: ARRAY
44376: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44377: LD_ADDR_VAR 0 10
44381: PUSH
44382: LD_VAR 0 10
44386: PPUSH
44387: LD_INT 1
44389: PPUSH
44390: CALL_OW 3
44394: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44395: LD_VAR 0 2
44399: PPUSH
44400: LD_VAR 0 5
44404: PPUSH
44405: CALL 44714 0 2
44409: PUSH
44410: LD_VAR 0 10
44414: PUSH
44415: EMPTY
44416: EQUAL
44417: OR
44418: IFFALSE 44363
// result := [ ] ;
44420: LD_ADDR_VAR 0 6
44424: PUSH
44425: EMPTY
44426: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44427: LD_VAR 0 1
44431: PPUSH
44432: LD_VAR 0 2
44436: PPUSH
44437: LD_VAR 0 3
44441: PPUSH
44442: LD_VAR 0 4
44446: PPUSH
44447: LD_VAR 0 5
44451: PPUSH
44452: CALL_OW 448
44456: IFFALSE 44489
// result := [ chassis , engine , control , weapon ] ;
44458: LD_ADDR_VAR 0 6
44462: PUSH
44463: LD_VAR 0 2
44467: PUSH
44468: LD_VAR 0 3
44472: PUSH
44473: LD_VAR 0 4
44477: PUSH
44478: LD_VAR 0 5
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: ST_TO_ADDR
// end ;
44489: LD_VAR 0 6
44493: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44494: LD_INT 0
44496: PPUSH
// if not chassis or not engine then
44497: LD_VAR 0 1
44501: NOT
44502: PUSH
44503: LD_VAR 0 2
44507: NOT
44508: OR
44509: IFFALSE 44513
// exit ;
44511: GO 44709
// case engine of engine_solar :
44513: LD_VAR 0 2
44517: PUSH
44518: LD_INT 2
44520: DOUBLE
44521: EQUAL
44522: IFTRUE 44526
44524: GO 44564
44526: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44527: LD_ADDR_VAR 0 3
44531: PUSH
44532: LD_INT 11
44534: PUSH
44535: LD_INT 12
44537: PUSH
44538: LD_INT 13
44540: PUSH
44541: LD_INT 14
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: LD_INT 2
44549: PUSH
44550: LD_INT 3
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: ST_TO_ADDR
44562: GO 44693
44564: LD_INT 1
44566: DOUBLE
44567: EQUAL
44568: IFTRUE 44572
44570: GO 44634
44572: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44573: LD_ADDR_VAR 0 3
44577: PUSH
44578: LD_INT 11
44580: PUSH
44581: LD_INT 12
44583: PUSH
44584: LD_INT 13
44586: PUSH
44587: LD_INT 14
44589: PUSH
44590: LD_INT 1
44592: PUSH
44593: LD_INT 2
44595: PUSH
44596: LD_INT 3
44598: PUSH
44599: LD_INT 4
44601: PUSH
44602: LD_INT 5
44604: PUSH
44605: LD_INT 21
44607: PUSH
44608: LD_INT 23
44610: PUSH
44611: LD_INT 22
44613: PUSH
44614: LD_INT 24
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: ST_TO_ADDR
44632: GO 44693
44634: LD_INT 3
44636: DOUBLE
44637: EQUAL
44638: IFTRUE 44642
44640: GO 44692
44642: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44643: LD_ADDR_VAR 0 3
44647: PUSH
44648: LD_INT 13
44650: PUSH
44651: LD_INT 14
44653: PUSH
44654: LD_INT 2
44656: PUSH
44657: LD_INT 3
44659: PUSH
44660: LD_INT 4
44662: PUSH
44663: LD_INT 5
44665: PUSH
44666: LD_INT 21
44668: PUSH
44669: LD_INT 22
44671: PUSH
44672: LD_INT 23
44674: PUSH
44675: LD_INT 24
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: ST_TO_ADDR
44690: GO 44693
44692: POP
// result := ( chassis in result ) ;
44693: LD_ADDR_VAR 0 3
44697: PUSH
44698: LD_VAR 0 1
44702: PUSH
44703: LD_VAR 0 3
44707: IN
44708: ST_TO_ADDR
// end ;
44709: LD_VAR 0 3
44713: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44714: LD_INT 0
44716: PPUSH
// if not chassis or not weapon then
44717: LD_VAR 0 1
44721: NOT
44722: PUSH
44723: LD_VAR 0 2
44727: NOT
44728: OR
44729: IFFALSE 44733
// exit ;
44731: GO 45795
// case weapon of us_machine_gun :
44733: LD_VAR 0 2
44737: PUSH
44738: LD_INT 2
44740: DOUBLE
44741: EQUAL
44742: IFTRUE 44746
44744: GO 44776
44746: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44747: LD_ADDR_VAR 0 3
44751: PUSH
44752: LD_INT 1
44754: PUSH
44755: LD_INT 2
44757: PUSH
44758: LD_INT 3
44760: PUSH
44761: LD_INT 4
44763: PUSH
44764: LD_INT 5
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: ST_TO_ADDR
44774: GO 45779
44776: LD_INT 3
44778: DOUBLE
44779: EQUAL
44780: IFTRUE 44784
44782: GO 44814
44784: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44785: LD_ADDR_VAR 0 3
44789: PUSH
44790: LD_INT 1
44792: PUSH
44793: LD_INT 2
44795: PUSH
44796: LD_INT 3
44798: PUSH
44799: LD_INT 4
44801: PUSH
44802: LD_INT 5
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: ST_TO_ADDR
44812: GO 45779
44814: LD_INT 11
44816: DOUBLE
44817: EQUAL
44818: IFTRUE 44822
44820: GO 44852
44822: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44823: LD_ADDR_VAR 0 3
44827: PUSH
44828: LD_INT 1
44830: PUSH
44831: LD_INT 2
44833: PUSH
44834: LD_INT 3
44836: PUSH
44837: LD_INT 4
44839: PUSH
44840: LD_INT 5
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: ST_TO_ADDR
44850: GO 45779
44852: LD_INT 4
44854: DOUBLE
44855: EQUAL
44856: IFTRUE 44860
44858: GO 44886
44860: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44861: LD_ADDR_VAR 0 3
44865: PUSH
44866: LD_INT 2
44868: PUSH
44869: LD_INT 3
44871: PUSH
44872: LD_INT 4
44874: PUSH
44875: LD_INT 5
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: ST_TO_ADDR
44884: GO 45779
44886: LD_INT 5
44888: DOUBLE
44889: EQUAL
44890: IFTRUE 44894
44892: GO 44920
44894: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44895: LD_ADDR_VAR 0 3
44899: PUSH
44900: LD_INT 2
44902: PUSH
44903: LD_INT 3
44905: PUSH
44906: LD_INT 4
44908: PUSH
44909: LD_INT 5
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: ST_TO_ADDR
44918: GO 45779
44920: LD_INT 9
44922: DOUBLE
44923: EQUAL
44924: IFTRUE 44928
44926: GO 44954
44928: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44929: LD_ADDR_VAR 0 3
44933: PUSH
44934: LD_INT 2
44936: PUSH
44937: LD_INT 3
44939: PUSH
44940: LD_INT 4
44942: PUSH
44943: LD_INT 5
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: ST_TO_ADDR
44952: GO 45779
44954: LD_INT 7
44956: DOUBLE
44957: EQUAL
44958: IFTRUE 44962
44960: GO 44988
44962: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44963: LD_ADDR_VAR 0 3
44967: PUSH
44968: LD_INT 2
44970: PUSH
44971: LD_INT 3
44973: PUSH
44974: LD_INT 4
44976: PUSH
44977: LD_INT 5
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: ST_TO_ADDR
44986: GO 45779
44988: LD_INT 12
44990: DOUBLE
44991: EQUAL
44992: IFTRUE 44996
44994: GO 45022
44996: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44997: LD_ADDR_VAR 0 3
45001: PUSH
45002: LD_INT 2
45004: PUSH
45005: LD_INT 3
45007: PUSH
45008: LD_INT 4
45010: PUSH
45011: LD_INT 5
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: ST_TO_ADDR
45020: GO 45779
45022: LD_INT 13
45024: DOUBLE
45025: EQUAL
45026: IFTRUE 45030
45028: GO 45056
45030: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45031: LD_ADDR_VAR 0 3
45035: PUSH
45036: LD_INT 2
45038: PUSH
45039: LD_INT 3
45041: PUSH
45042: LD_INT 4
45044: PUSH
45045: LD_INT 5
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: ST_TO_ADDR
45054: GO 45779
45056: LD_INT 14
45058: DOUBLE
45059: EQUAL
45060: IFTRUE 45064
45062: GO 45082
45064: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45065: LD_ADDR_VAR 0 3
45069: PUSH
45070: LD_INT 4
45072: PUSH
45073: LD_INT 5
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: ST_TO_ADDR
45080: GO 45779
45082: LD_INT 6
45084: DOUBLE
45085: EQUAL
45086: IFTRUE 45090
45088: GO 45108
45090: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45091: LD_ADDR_VAR 0 3
45095: PUSH
45096: LD_INT 4
45098: PUSH
45099: LD_INT 5
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: ST_TO_ADDR
45106: GO 45779
45108: LD_INT 10
45110: DOUBLE
45111: EQUAL
45112: IFTRUE 45116
45114: GO 45134
45116: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45117: LD_ADDR_VAR 0 3
45121: PUSH
45122: LD_INT 4
45124: PUSH
45125: LD_INT 5
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: ST_TO_ADDR
45132: GO 45779
45134: LD_INT 22
45136: DOUBLE
45137: EQUAL
45138: IFTRUE 45142
45140: GO 45168
45142: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45143: LD_ADDR_VAR 0 3
45147: PUSH
45148: LD_INT 11
45150: PUSH
45151: LD_INT 12
45153: PUSH
45154: LD_INT 13
45156: PUSH
45157: LD_INT 14
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: ST_TO_ADDR
45166: GO 45779
45168: LD_INT 23
45170: DOUBLE
45171: EQUAL
45172: IFTRUE 45176
45174: GO 45202
45176: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45177: LD_ADDR_VAR 0 3
45181: PUSH
45182: LD_INT 11
45184: PUSH
45185: LD_INT 12
45187: PUSH
45188: LD_INT 13
45190: PUSH
45191: LD_INT 14
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: ST_TO_ADDR
45200: GO 45779
45202: LD_INT 24
45204: DOUBLE
45205: EQUAL
45206: IFTRUE 45210
45208: GO 45236
45210: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45211: LD_ADDR_VAR 0 3
45215: PUSH
45216: LD_INT 11
45218: PUSH
45219: LD_INT 12
45221: PUSH
45222: LD_INT 13
45224: PUSH
45225: LD_INT 14
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: ST_TO_ADDR
45234: GO 45779
45236: LD_INT 30
45238: DOUBLE
45239: EQUAL
45240: IFTRUE 45244
45242: GO 45270
45244: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45245: LD_ADDR_VAR 0 3
45249: PUSH
45250: LD_INT 11
45252: PUSH
45253: LD_INT 12
45255: PUSH
45256: LD_INT 13
45258: PUSH
45259: LD_INT 14
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: ST_TO_ADDR
45268: GO 45779
45270: LD_INT 25
45272: DOUBLE
45273: EQUAL
45274: IFTRUE 45278
45276: GO 45296
45278: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45279: LD_ADDR_VAR 0 3
45283: PUSH
45284: LD_INT 13
45286: PUSH
45287: LD_INT 14
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: ST_TO_ADDR
45294: GO 45779
45296: LD_INT 27
45298: DOUBLE
45299: EQUAL
45300: IFTRUE 45304
45302: GO 45322
45304: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45305: LD_ADDR_VAR 0 3
45309: PUSH
45310: LD_INT 13
45312: PUSH
45313: LD_INT 14
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: ST_TO_ADDR
45320: GO 45779
45322: LD_EXP 70
45326: DOUBLE
45327: EQUAL
45328: IFTRUE 45332
45330: GO 45358
45332: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45333: LD_ADDR_VAR 0 3
45337: PUSH
45338: LD_INT 11
45340: PUSH
45341: LD_INT 12
45343: PUSH
45344: LD_INT 13
45346: PUSH
45347: LD_INT 14
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: ST_TO_ADDR
45356: GO 45779
45358: LD_INT 28
45360: DOUBLE
45361: EQUAL
45362: IFTRUE 45366
45364: GO 45384
45366: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45367: LD_ADDR_VAR 0 3
45371: PUSH
45372: LD_INT 13
45374: PUSH
45375: LD_INT 14
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: ST_TO_ADDR
45382: GO 45779
45384: LD_INT 29
45386: DOUBLE
45387: EQUAL
45388: IFTRUE 45392
45390: GO 45410
45392: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45393: LD_ADDR_VAR 0 3
45397: PUSH
45398: LD_INT 13
45400: PUSH
45401: LD_INT 14
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: ST_TO_ADDR
45408: GO 45779
45410: LD_INT 31
45412: DOUBLE
45413: EQUAL
45414: IFTRUE 45418
45416: GO 45436
45418: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45419: LD_ADDR_VAR 0 3
45423: PUSH
45424: LD_INT 13
45426: PUSH
45427: LD_INT 14
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: ST_TO_ADDR
45434: GO 45779
45436: LD_INT 26
45438: DOUBLE
45439: EQUAL
45440: IFTRUE 45444
45442: GO 45462
45444: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45445: LD_ADDR_VAR 0 3
45449: PUSH
45450: LD_INT 13
45452: PUSH
45453: LD_INT 14
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: ST_TO_ADDR
45460: GO 45779
45462: LD_INT 42
45464: DOUBLE
45465: EQUAL
45466: IFTRUE 45470
45468: GO 45496
45470: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45471: LD_ADDR_VAR 0 3
45475: PUSH
45476: LD_INT 21
45478: PUSH
45479: LD_INT 22
45481: PUSH
45482: LD_INT 23
45484: PUSH
45485: LD_INT 24
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: ST_TO_ADDR
45494: GO 45779
45496: LD_INT 43
45498: DOUBLE
45499: EQUAL
45500: IFTRUE 45504
45502: GO 45530
45504: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45505: LD_ADDR_VAR 0 3
45509: PUSH
45510: LD_INT 21
45512: PUSH
45513: LD_INT 22
45515: PUSH
45516: LD_INT 23
45518: PUSH
45519: LD_INT 24
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: ST_TO_ADDR
45528: GO 45779
45530: LD_INT 44
45532: DOUBLE
45533: EQUAL
45534: IFTRUE 45538
45536: GO 45564
45538: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45539: LD_ADDR_VAR 0 3
45543: PUSH
45544: LD_INT 21
45546: PUSH
45547: LD_INT 22
45549: PUSH
45550: LD_INT 23
45552: PUSH
45553: LD_INT 24
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: ST_TO_ADDR
45562: GO 45779
45564: LD_INT 45
45566: DOUBLE
45567: EQUAL
45568: IFTRUE 45572
45570: GO 45598
45572: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45573: LD_ADDR_VAR 0 3
45577: PUSH
45578: LD_INT 21
45580: PUSH
45581: LD_INT 22
45583: PUSH
45584: LD_INT 23
45586: PUSH
45587: LD_INT 24
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: ST_TO_ADDR
45596: GO 45779
45598: LD_INT 49
45600: DOUBLE
45601: EQUAL
45602: IFTRUE 45606
45604: GO 45632
45606: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45607: LD_ADDR_VAR 0 3
45611: PUSH
45612: LD_INT 21
45614: PUSH
45615: LD_INT 22
45617: PUSH
45618: LD_INT 23
45620: PUSH
45621: LD_INT 24
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: ST_TO_ADDR
45630: GO 45779
45632: LD_INT 51
45634: DOUBLE
45635: EQUAL
45636: IFTRUE 45640
45638: GO 45666
45640: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45641: LD_ADDR_VAR 0 3
45645: PUSH
45646: LD_INT 21
45648: PUSH
45649: LD_INT 22
45651: PUSH
45652: LD_INT 23
45654: PUSH
45655: LD_INT 24
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: ST_TO_ADDR
45664: GO 45779
45666: LD_INT 52
45668: DOUBLE
45669: EQUAL
45670: IFTRUE 45674
45672: GO 45700
45674: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45675: LD_ADDR_VAR 0 3
45679: PUSH
45680: LD_INT 21
45682: PUSH
45683: LD_INT 22
45685: PUSH
45686: LD_INT 23
45688: PUSH
45689: LD_INT 24
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: ST_TO_ADDR
45698: GO 45779
45700: LD_INT 53
45702: DOUBLE
45703: EQUAL
45704: IFTRUE 45708
45706: GO 45726
45708: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45709: LD_ADDR_VAR 0 3
45713: PUSH
45714: LD_INT 23
45716: PUSH
45717: LD_INT 24
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: ST_TO_ADDR
45724: GO 45779
45726: LD_INT 46
45728: DOUBLE
45729: EQUAL
45730: IFTRUE 45734
45732: GO 45752
45734: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45735: LD_ADDR_VAR 0 3
45739: PUSH
45740: LD_INT 23
45742: PUSH
45743: LD_INT 24
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: ST_TO_ADDR
45750: GO 45779
45752: LD_INT 47
45754: DOUBLE
45755: EQUAL
45756: IFTRUE 45760
45758: GO 45778
45760: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45761: LD_ADDR_VAR 0 3
45765: PUSH
45766: LD_INT 23
45768: PUSH
45769: LD_INT 24
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: ST_TO_ADDR
45776: GO 45779
45778: POP
// result := ( chassis in result ) ;
45779: LD_ADDR_VAR 0 3
45783: PUSH
45784: LD_VAR 0 1
45788: PUSH
45789: LD_VAR 0 3
45793: IN
45794: ST_TO_ADDR
// end ;
45795: LD_VAR 0 3
45799: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45800: LD_INT 0
45802: PPUSH
45803: PPUSH
45804: PPUSH
45805: PPUSH
45806: PPUSH
45807: PPUSH
45808: PPUSH
// result := array ;
45809: LD_ADDR_VAR 0 5
45813: PUSH
45814: LD_VAR 0 1
45818: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45819: LD_VAR 0 1
45823: NOT
45824: PUSH
45825: LD_VAR 0 2
45829: NOT
45830: OR
45831: PUSH
45832: LD_VAR 0 3
45836: NOT
45837: OR
45838: PUSH
45839: LD_VAR 0 2
45843: PUSH
45844: LD_VAR 0 1
45848: GREATER
45849: OR
45850: PUSH
45851: LD_VAR 0 3
45855: PUSH
45856: LD_VAR 0 1
45860: GREATER
45861: OR
45862: IFFALSE 45866
// exit ;
45864: GO 46162
// if direction then
45866: LD_VAR 0 4
45870: IFFALSE 45934
// begin d := 1 ;
45872: LD_ADDR_VAR 0 9
45876: PUSH
45877: LD_INT 1
45879: ST_TO_ADDR
// if i_from > i_to then
45880: LD_VAR 0 2
45884: PUSH
45885: LD_VAR 0 3
45889: GREATER
45890: IFFALSE 45916
// length := ( array - i_from ) + i_to else
45892: LD_ADDR_VAR 0 11
45896: PUSH
45897: LD_VAR 0 1
45901: PUSH
45902: LD_VAR 0 2
45906: MINUS
45907: PUSH
45908: LD_VAR 0 3
45912: PLUS
45913: ST_TO_ADDR
45914: GO 45932
// length := i_to - i_from ;
45916: LD_ADDR_VAR 0 11
45920: PUSH
45921: LD_VAR 0 3
45925: PUSH
45926: LD_VAR 0 2
45930: MINUS
45931: ST_TO_ADDR
// end else
45932: GO 45995
// begin d := - 1 ;
45934: LD_ADDR_VAR 0 9
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: ST_TO_ADDR
// if i_from > i_to then
45943: LD_VAR 0 2
45947: PUSH
45948: LD_VAR 0 3
45952: GREATER
45953: IFFALSE 45973
// length := i_from - i_to else
45955: LD_ADDR_VAR 0 11
45959: PUSH
45960: LD_VAR 0 2
45964: PUSH
45965: LD_VAR 0 3
45969: MINUS
45970: ST_TO_ADDR
45971: GO 45995
// length := ( array - i_to ) + i_from ;
45973: LD_ADDR_VAR 0 11
45977: PUSH
45978: LD_VAR 0 1
45982: PUSH
45983: LD_VAR 0 3
45987: MINUS
45988: PUSH
45989: LD_VAR 0 2
45993: PLUS
45994: ST_TO_ADDR
// end ; if not length then
45995: LD_VAR 0 11
45999: NOT
46000: IFFALSE 46004
// exit ;
46002: GO 46162
// tmp := array ;
46004: LD_ADDR_VAR 0 10
46008: PUSH
46009: LD_VAR 0 1
46013: ST_TO_ADDR
// for i = 1 to length do
46014: LD_ADDR_VAR 0 6
46018: PUSH
46019: DOUBLE
46020: LD_INT 1
46022: DEC
46023: ST_TO_ADDR
46024: LD_VAR 0 11
46028: PUSH
46029: FOR_TO
46030: IFFALSE 46150
// begin for j = 1 to array do
46032: LD_ADDR_VAR 0 7
46036: PUSH
46037: DOUBLE
46038: LD_INT 1
46040: DEC
46041: ST_TO_ADDR
46042: LD_VAR 0 1
46046: PUSH
46047: FOR_TO
46048: IFFALSE 46136
// begin k := j + d ;
46050: LD_ADDR_VAR 0 8
46054: PUSH
46055: LD_VAR 0 7
46059: PUSH
46060: LD_VAR 0 9
46064: PLUS
46065: ST_TO_ADDR
// if k > array then
46066: LD_VAR 0 8
46070: PUSH
46071: LD_VAR 0 1
46075: GREATER
46076: IFFALSE 46086
// k := 1 ;
46078: LD_ADDR_VAR 0 8
46082: PUSH
46083: LD_INT 1
46085: ST_TO_ADDR
// if not k then
46086: LD_VAR 0 8
46090: NOT
46091: IFFALSE 46103
// k := array ;
46093: LD_ADDR_VAR 0 8
46097: PUSH
46098: LD_VAR 0 1
46102: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46103: LD_ADDR_VAR 0 10
46107: PUSH
46108: LD_VAR 0 10
46112: PPUSH
46113: LD_VAR 0 8
46117: PPUSH
46118: LD_VAR 0 1
46122: PUSH
46123: LD_VAR 0 7
46127: ARRAY
46128: PPUSH
46129: CALL_OW 1
46133: ST_TO_ADDR
// end ;
46134: GO 46047
46136: POP
46137: POP
// array := tmp ;
46138: LD_ADDR_VAR 0 1
46142: PUSH
46143: LD_VAR 0 10
46147: ST_TO_ADDR
// end ;
46148: GO 46029
46150: POP
46151: POP
// result := array ;
46152: LD_ADDR_VAR 0 5
46156: PUSH
46157: LD_VAR 0 1
46161: ST_TO_ADDR
// end ;
46162: LD_VAR 0 5
46166: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46167: LD_INT 0
46169: PPUSH
46170: PPUSH
// result := 0 ;
46171: LD_ADDR_VAR 0 3
46175: PUSH
46176: LD_INT 0
46178: ST_TO_ADDR
// if not array or not value in array then
46179: LD_VAR 0 1
46183: NOT
46184: PUSH
46185: LD_VAR 0 2
46189: PUSH
46190: LD_VAR 0 1
46194: IN
46195: NOT
46196: OR
46197: IFFALSE 46201
// exit ;
46199: GO 46255
// for i = 1 to array do
46201: LD_ADDR_VAR 0 4
46205: PUSH
46206: DOUBLE
46207: LD_INT 1
46209: DEC
46210: ST_TO_ADDR
46211: LD_VAR 0 1
46215: PUSH
46216: FOR_TO
46217: IFFALSE 46253
// if value = array [ i ] then
46219: LD_VAR 0 2
46223: PUSH
46224: LD_VAR 0 1
46228: PUSH
46229: LD_VAR 0 4
46233: ARRAY
46234: EQUAL
46235: IFFALSE 46251
// begin result := i ;
46237: LD_ADDR_VAR 0 3
46241: PUSH
46242: LD_VAR 0 4
46246: ST_TO_ADDR
// exit ;
46247: POP
46248: POP
46249: GO 46255
// end ;
46251: GO 46216
46253: POP
46254: POP
// end ;
46255: LD_VAR 0 3
46259: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46260: LD_INT 0
46262: PPUSH
// vc_chassis := chassis ;
46263: LD_ADDR_OWVAR 37
46267: PUSH
46268: LD_VAR 0 1
46272: ST_TO_ADDR
// vc_engine := engine ;
46273: LD_ADDR_OWVAR 39
46277: PUSH
46278: LD_VAR 0 2
46282: ST_TO_ADDR
// vc_control := control ;
46283: LD_ADDR_OWVAR 38
46287: PUSH
46288: LD_VAR 0 3
46292: ST_TO_ADDR
// vc_weapon := weapon ;
46293: LD_ADDR_OWVAR 40
46297: PUSH
46298: LD_VAR 0 4
46302: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46303: LD_ADDR_OWVAR 41
46307: PUSH
46308: LD_VAR 0 5
46312: ST_TO_ADDR
// end ;
46313: LD_VAR 0 6
46317: RET
// export function WantPlant ( unit ) ; var task ; begin
46318: LD_INT 0
46320: PPUSH
46321: PPUSH
// result := false ;
46322: LD_ADDR_VAR 0 2
46326: PUSH
46327: LD_INT 0
46329: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46330: LD_ADDR_VAR 0 3
46334: PUSH
46335: LD_VAR 0 1
46339: PPUSH
46340: CALL_OW 437
46344: ST_TO_ADDR
// if task then
46345: LD_VAR 0 3
46349: IFFALSE 46377
// if task [ 1 ] [ 1 ] = p then
46351: LD_VAR 0 3
46355: PUSH
46356: LD_INT 1
46358: ARRAY
46359: PUSH
46360: LD_INT 1
46362: ARRAY
46363: PUSH
46364: LD_STRING p
46366: EQUAL
46367: IFFALSE 46377
// result := true ;
46369: LD_ADDR_VAR 0 2
46373: PUSH
46374: LD_INT 1
46376: ST_TO_ADDR
// end ;
46377: LD_VAR 0 2
46381: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46382: LD_INT 0
46384: PPUSH
46385: PPUSH
46386: PPUSH
46387: PPUSH
// if pos < 1 then
46388: LD_VAR 0 2
46392: PUSH
46393: LD_INT 1
46395: LESS
46396: IFFALSE 46400
// exit ;
46398: GO 46703
// if pos = 1 then
46400: LD_VAR 0 2
46404: PUSH
46405: LD_INT 1
46407: EQUAL
46408: IFFALSE 46441
// result := Replace ( arr , pos [ 1 ] , value ) else
46410: LD_ADDR_VAR 0 4
46414: PUSH
46415: LD_VAR 0 1
46419: PPUSH
46420: LD_VAR 0 2
46424: PUSH
46425: LD_INT 1
46427: ARRAY
46428: PPUSH
46429: LD_VAR 0 3
46433: PPUSH
46434: CALL_OW 1
46438: ST_TO_ADDR
46439: GO 46703
// begin tmp := arr ;
46441: LD_ADDR_VAR 0 6
46445: PUSH
46446: LD_VAR 0 1
46450: ST_TO_ADDR
// s_arr := [ tmp ] ;
46451: LD_ADDR_VAR 0 7
46455: PUSH
46456: LD_VAR 0 6
46460: PUSH
46461: EMPTY
46462: LIST
46463: ST_TO_ADDR
// for i = 1 to pos - 1 do
46464: LD_ADDR_VAR 0 5
46468: PUSH
46469: DOUBLE
46470: LD_INT 1
46472: DEC
46473: ST_TO_ADDR
46474: LD_VAR 0 2
46478: PUSH
46479: LD_INT 1
46481: MINUS
46482: PUSH
46483: FOR_TO
46484: IFFALSE 46529
// begin tmp := tmp [ pos [ i ] ] ;
46486: LD_ADDR_VAR 0 6
46490: PUSH
46491: LD_VAR 0 6
46495: PUSH
46496: LD_VAR 0 2
46500: PUSH
46501: LD_VAR 0 5
46505: ARRAY
46506: ARRAY
46507: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46508: LD_ADDR_VAR 0 7
46512: PUSH
46513: LD_VAR 0 7
46517: PUSH
46518: LD_VAR 0 6
46522: PUSH
46523: EMPTY
46524: LIST
46525: ADD
46526: ST_TO_ADDR
// end ;
46527: GO 46483
46529: POP
46530: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46531: LD_ADDR_VAR 0 6
46535: PUSH
46536: LD_VAR 0 6
46540: PPUSH
46541: LD_VAR 0 2
46545: PUSH
46546: LD_VAR 0 2
46550: ARRAY
46551: PPUSH
46552: LD_VAR 0 3
46556: PPUSH
46557: CALL_OW 1
46561: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46562: LD_ADDR_VAR 0 7
46566: PUSH
46567: LD_VAR 0 7
46571: PPUSH
46572: LD_VAR 0 7
46576: PPUSH
46577: LD_VAR 0 6
46581: PPUSH
46582: CALL_OW 1
46586: ST_TO_ADDR
// for i = s_arr downto 2 do
46587: LD_ADDR_VAR 0 5
46591: PUSH
46592: DOUBLE
46593: LD_VAR 0 7
46597: INC
46598: ST_TO_ADDR
46599: LD_INT 2
46601: PUSH
46602: FOR_DOWNTO
46603: IFFALSE 46687
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46605: LD_ADDR_VAR 0 6
46609: PUSH
46610: LD_VAR 0 7
46614: PUSH
46615: LD_VAR 0 5
46619: PUSH
46620: LD_INT 1
46622: MINUS
46623: ARRAY
46624: PPUSH
46625: LD_VAR 0 2
46629: PUSH
46630: LD_VAR 0 5
46634: PUSH
46635: LD_INT 1
46637: MINUS
46638: ARRAY
46639: PPUSH
46640: LD_VAR 0 7
46644: PUSH
46645: LD_VAR 0 5
46649: ARRAY
46650: PPUSH
46651: CALL_OW 1
46655: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46656: LD_ADDR_VAR 0 7
46660: PUSH
46661: LD_VAR 0 7
46665: PPUSH
46666: LD_VAR 0 5
46670: PUSH
46671: LD_INT 1
46673: MINUS
46674: PPUSH
46675: LD_VAR 0 6
46679: PPUSH
46680: CALL_OW 1
46684: ST_TO_ADDR
// end ;
46685: GO 46602
46687: POP
46688: POP
// result := s_arr [ 1 ] ;
46689: LD_ADDR_VAR 0 4
46693: PUSH
46694: LD_VAR 0 7
46698: PUSH
46699: LD_INT 1
46701: ARRAY
46702: ST_TO_ADDR
// end ; end ;
46703: LD_VAR 0 4
46707: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46708: LD_INT 0
46710: PPUSH
46711: PPUSH
// if not list then
46712: LD_VAR 0 1
46716: NOT
46717: IFFALSE 46721
// exit ;
46719: GO 46812
// i := list [ pos1 ] ;
46721: LD_ADDR_VAR 0 5
46725: PUSH
46726: LD_VAR 0 1
46730: PUSH
46731: LD_VAR 0 2
46735: ARRAY
46736: ST_TO_ADDR
// if not i then
46737: LD_VAR 0 5
46741: NOT
46742: IFFALSE 46746
// exit ;
46744: GO 46812
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46746: LD_ADDR_VAR 0 1
46750: PUSH
46751: LD_VAR 0 1
46755: PPUSH
46756: LD_VAR 0 2
46760: PPUSH
46761: LD_VAR 0 1
46765: PUSH
46766: LD_VAR 0 3
46770: ARRAY
46771: PPUSH
46772: CALL_OW 1
46776: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46777: LD_ADDR_VAR 0 1
46781: PUSH
46782: LD_VAR 0 1
46786: PPUSH
46787: LD_VAR 0 3
46791: PPUSH
46792: LD_VAR 0 5
46796: PPUSH
46797: CALL_OW 1
46801: ST_TO_ADDR
// result := list ;
46802: LD_ADDR_VAR 0 4
46806: PUSH
46807: LD_VAR 0 1
46811: ST_TO_ADDR
// end ;
46812: LD_VAR 0 4
46816: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46817: LD_INT 0
46819: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46820: LD_ADDR_VAR 0 5
46824: PUSH
46825: LD_VAR 0 1
46829: PPUSH
46830: CALL_OW 250
46834: PPUSH
46835: LD_VAR 0 1
46839: PPUSH
46840: CALL_OW 251
46844: PPUSH
46845: LD_VAR 0 2
46849: PPUSH
46850: LD_VAR 0 3
46854: PPUSH
46855: LD_VAR 0 4
46859: PPUSH
46860: CALL 46870 0 5
46864: ST_TO_ADDR
// end ;
46865: LD_VAR 0 5
46869: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46870: LD_INT 0
46872: PPUSH
46873: PPUSH
46874: PPUSH
46875: PPUSH
// if not list then
46876: LD_VAR 0 3
46880: NOT
46881: IFFALSE 46885
// exit ;
46883: GO 47273
// result := [ ] ;
46885: LD_ADDR_VAR 0 6
46889: PUSH
46890: EMPTY
46891: ST_TO_ADDR
// for i in list do
46892: LD_ADDR_VAR 0 7
46896: PUSH
46897: LD_VAR 0 3
46901: PUSH
46902: FOR_IN
46903: IFFALSE 47105
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46905: LD_ADDR_VAR 0 9
46909: PUSH
46910: LD_VAR 0 7
46914: PPUSH
46915: LD_VAR 0 1
46919: PPUSH
46920: LD_VAR 0 2
46924: PPUSH
46925: CALL_OW 297
46929: ST_TO_ADDR
// if not result then
46930: LD_VAR 0 6
46934: NOT
46935: IFFALSE 46961
// result := [ [ i , tmp ] ] else
46937: LD_ADDR_VAR 0 6
46941: PUSH
46942: LD_VAR 0 7
46946: PUSH
46947: LD_VAR 0 9
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: EMPTY
46957: LIST
46958: ST_TO_ADDR
46959: GO 47103
// begin if result [ result ] [ 2 ] < tmp then
46961: LD_VAR 0 6
46965: PUSH
46966: LD_VAR 0 6
46970: ARRAY
46971: PUSH
46972: LD_INT 2
46974: ARRAY
46975: PUSH
46976: LD_VAR 0 9
46980: LESS
46981: IFFALSE 47023
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46983: LD_ADDR_VAR 0 6
46987: PUSH
46988: LD_VAR 0 6
46992: PPUSH
46993: LD_VAR 0 6
46997: PUSH
46998: LD_INT 1
47000: PLUS
47001: PPUSH
47002: LD_VAR 0 7
47006: PUSH
47007: LD_VAR 0 9
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PPUSH
47016: CALL_OW 2
47020: ST_TO_ADDR
47021: GO 47103
// for j = 1 to result do
47023: LD_ADDR_VAR 0 8
47027: PUSH
47028: DOUBLE
47029: LD_INT 1
47031: DEC
47032: ST_TO_ADDR
47033: LD_VAR 0 6
47037: PUSH
47038: FOR_TO
47039: IFFALSE 47101
// begin if tmp < result [ j ] [ 2 ] then
47041: LD_VAR 0 9
47045: PUSH
47046: LD_VAR 0 6
47050: PUSH
47051: LD_VAR 0 8
47055: ARRAY
47056: PUSH
47057: LD_INT 2
47059: ARRAY
47060: LESS
47061: IFFALSE 47099
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47063: LD_ADDR_VAR 0 6
47067: PUSH
47068: LD_VAR 0 6
47072: PPUSH
47073: LD_VAR 0 8
47077: PPUSH
47078: LD_VAR 0 7
47082: PUSH
47083: LD_VAR 0 9
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PPUSH
47092: CALL_OW 2
47096: ST_TO_ADDR
// break ;
47097: GO 47101
// end ; end ;
47099: GO 47038
47101: POP
47102: POP
// end ; end ;
47103: GO 46902
47105: POP
47106: POP
// if result and not asc then
47107: LD_VAR 0 6
47111: PUSH
47112: LD_VAR 0 4
47116: NOT
47117: AND
47118: IFFALSE 47193
// begin tmp := result ;
47120: LD_ADDR_VAR 0 9
47124: PUSH
47125: LD_VAR 0 6
47129: ST_TO_ADDR
// for i = tmp downto 1 do
47130: LD_ADDR_VAR 0 7
47134: PUSH
47135: DOUBLE
47136: LD_VAR 0 9
47140: INC
47141: ST_TO_ADDR
47142: LD_INT 1
47144: PUSH
47145: FOR_DOWNTO
47146: IFFALSE 47191
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47148: LD_ADDR_VAR 0 6
47152: PUSH
47153: LD_VAR 0 6
47157: PPUSH
47158: LD_VAR 0 9
47162: PUSH
47163: LD_VAR 0 7
47167: MINUS
47168: PUSH
47169: LD_INT 1
47171: PLUS
47172: PPUSH
47173: LD_VAR 0 9
47177: PUSH
47178: LD_VAR 0 7
47182: ARRAY
47183: PPUSH
47184: CALL_OW 1
47188: ST_TO_ADDR
47189: GO 47145
47191: POP
47192: POP
// end ; tmp := [ ] ;
47193: LD_ADDR_VAR 0 9
47197: PUSH
47198: EMPTY
47199: ST_TO_ADDR
// if mode then
47200: LD_VAR 0 5
47204: IFFALSE 47273
// begin for i = 1 to result do
47206: LD_ADDR_VAR 0 7
47210: PUSH
47211: DOUBLE
47212: LD_INT 1
47214: DEC
47215: ST_TO_ADDR
47216: LD_VAR 0 6
47220: PUSH
47221: FOR_TO
47222: IFFALSE 47261
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47224: LD_ADDR_VAR 0 9
47228: PUSH
47229: LD_VAR 0 9
47233: PPUSH
47234: LD_VAR 0 7
47238: PPUSH
47239: LD_VAR 0 6
47243: PUSH
47244: LD_VAR 0 7
47248: ARRAY
47249: PUSH
47250: LD_INT 1
47252: ARRAY
47253: PPUSH
47254: CALL_OW 1
47258: ST_TO_ADDR
47259: GO 47221
47261: POP
47262: POP
// result := tmp ;
47263: LD_ADDR_VAR 0 6
47267: PUSH
47268: LD_VAR 0 9
47272: ST_TO_ADDR
// end ; end ;
47273: LD_VAR 0 6
47277: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47278: LD_INT 0
47280: PPUSH
47281: PPUSH
47282: PPUSH
47283: PPUSH
47284: PPUSH
47285: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47286: LD_ADDR_VAR 0 5
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: EMPTY
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: ST_TO_ADDR
// if not x or not y then
47308: LD_VAR 0 2
47312: NOT
47313: PUSH
47314: LD_VAR 0 3
47318: NOT
47319: OR
47320: IFFALSE 47324
// exit ;
47322: GO 48976
// if not range then
47324: LD_VAR 0 4
47328: NOT
47329: IFFALSE 47339
// range := 10 ;
47331: LD_ADDR_VAR 0 4
47335: PUSH
47336: LD_INT 10
47338: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47339: LD_ADDR_VAR 0 8
47343: PUSH
47344: LD_INT 81
47346: PUSH
47347: LD_VAR 0 1
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 92
47358: PUSH
47359: LD_VAR 0 2
47363: PUSH
47364: LD_VAR 0 3
47368: PUSH
47369: LD_VAR 0 4
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 3
47382: PUSH
47383: LD_INT 21
47385: PUSH
47386: LD_INT 3
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: LIST
47401: PPUSH
47402: CALL_OW 69
47406: ST_TO_ADDR
// if not tmp then
47407: LD_VAR 0 8
47411: NOT
47412: IFFALSE 47416
// exit ;
47414: GO 48976
// for i in tmp do
47416: LD_ADDR_VAR 0 6
47420: PUSH
47421: LD_VAR 0 8
47425: PUSH
47426: FOR_IN
47427: IFFALSE 48951
// begin points := [ 0 , 0 , 0 ] ;
47429: LD_ADDR_VAR 0 9
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: LIST
47447: ST_TO_ADDR
// bpoints := 1 ;
47448: LD_ADDR_VAR 0 10
47452: PUSH
47453: LD_INT 1
47455: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47456: LD_VAR 0 6
47460: PPUSH
47461: CALL_OW 247
47465: PUSH
47466: LD_INT 1
47468: DOUBLE
47469: EQUAL
47470: IFTRUE 47474
47472: GO 48052
47474: POP
// begin if GetClass ( i ) = 1 then
47475: LD_VAR 0 6
47479: PPUSH
47480: CALL_OW 257
47484: PUSH
47485: LD_INT 1
47487: EQUAL
47488: IFFALSE 47509
// points := [ 10 , 5 , 3 ] ;
47490: LD_ADDR_VAR 0 9
47494: PUSH
47495: LD_INT 10
47497: PUSH
47498: LD_INT 5
47500: PUSH
47501: LD_INT 3
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: LIST
47508: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47509: LD_VAR 0 6
47513: PPUSH
47514: CALL_OW 257
47518: PUSH
47519: LD_INT 2
47521: PUSH
47522: LD_INT 3
47524: PUSH
47525: LD_INT 4
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: LIST
47532: IN
47533: IFFALSE 47554
// points := [ 3 , 2 , 1 ] ;
47535: LD_ADDR_VAR 0 9
47539: PUSH
47540: LD_INT 3
47542: PUSH
47543: LD_INT 2
47545: PUSH
47546: LD_INT 1
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: LIST
47553: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47554: LD_VAR 0 6
47558: PPUSH
47559: CALL_OW 257
47563: PUSH
47564: LD_INT 5
47566: EQUAL
47567: IFFALSE 47588
// points := [ 130 , 5 , 2 ] ;
47569: LD_ADDR_VAR 0 9
47573: PUSH
47574: LD_INT 130
47576: PUSH
47577: LD_INT 5
47579: PUSH
47580: LD_INT 2
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: LIST
47587: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47588: LD_VAR 0 6
47592: PPUSH
47593: CALL_OW 257
47597: PUSH
47598: LD_INT 8
47600: EQUAL
47601: IFFALSE 47622
// points := [ 35 , 35 , 30 ] ;
47603: LD_ADDR_VAR 0 9
47607: PUSH
47608: LD_INT 35
47610: PUSH
47611: LD_INT 35
47613: PUSH
47614: LD_INT 30
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: LIST
47621: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47622: LD_VAR 0 6
47626: PPUSH
47627: CALL_OW 257
47631: PUSH
47632: LD_INT 9
47634: EQUAL
47635: IFFALSE 47656
// points := [ 20 , 55 , 40 ] ;
47637: LD_ADDR_VAR 0 9
47641: PUSH
47642: LD_INT 20
47644: PUSH
47645: LD_INT 55
47647: PUSH
47648: LD_INT 40
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: LIST
47655: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47656: LD_VAR 0 6
47660: PPUSH
47661: CALL_OW 257
47665: PUSH
47666: LD_INT 12
47668: PUSH
47669: LD_INT 16
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: IN
47676: IFFALSE 47697
// points := [ 5 , 3 , 2 ] ;
47678: LD_ADDR_VAR 0 9
47682: PUSH
47683: LD_INT 5
47685: PUSH
47686: LD_INT 3
47688: PUSH
47689: LD_INT 2
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: LIST
47696: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47697: LD_VAR 0 6
47701: PPUSH
47702: CALL_OW 257
47706: PUSH
47707: LD_INT 17
47709: EQUAL
47710: IFFALSE 47731
// points := [ 100 , 50 , 75 ] ;
47712: LD_ADDR_VAR 0 9
47716: PUSH
47717: LD_INT 100
47719: PUSH
47720: LD_INT 50
47722: PUSH
47723: LD_INT 75
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: LIST
47730: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47731: LD_VAR 0 6
47735: PPUSH
47736: CALL_OW 257
47740: PUSH
47741: LD_INT 15
47743: EQUAL
47744: IFFALSE 47765
// points := [ 10 , 5 , 3 ] ;
47746: LD_ADDR_VAR 0 9
47750: PUSH
47751: LD_INT 10
47753: PUSH
47754: LD_INT 5
47756: PUSH
47757: LD_INT 3
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: LIST
47764: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47765: LD_VAR 0 6
47769: PPUSH
47770: CALL_OW 257
47774: PUSH
47775: LD_INT 14
47777: EQUAL
47778: IFFALSE 47799
// points := [ 10 , 0 , 0 ] ;
47780: LD_ADDR_VAR 0 9
47784: PUSH
47785: LD_INT 10
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: LIST
47798: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47799: LD_VAR 0 6
47803: PPUSH
47804: CALL_OW 257
47808: PUSH
47809: LD_INT 11
47811: EQUAL
47812: IFFALSE 47833
// points := [ 30 , 10 , 5 ] ;
47814: LD_ADDR_VAR 0 9
47818: PUSH
47819: LD_INT 30
47821: PUSH
47822: LD_INT 10
47824: PUSH
47825: LD_INT 5
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: LIST
47832: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47833: LD_VAR 0 1
47837: PPUSH
47838: LD_INT 5
47840: PPUSH
47841: CALL_OW 321
47845: PUSH
47846: LD_INT 2
47848: EQUAL
47849: IFFALSE 47866
// bpoints := bpoints * 1.8 ;
47851: LD_ADDR_VAR 0 10
47855: PUSH
47856: LD_VAR 0 10
47860: PUSH
47861: LD_REAL  1.80000000000000E+0000
47864: MUL
47865: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47866: LD_VAR 0 6
47870: PPUSH
47871: CALL_OW 257
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: LD_INT 2
47881: PUSH
47882: LD_INT 3
47884: PUSH
47885: LD_INT 4
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: IN
47894: PUSH
47895: LD_VAR 0 1
47899: PPUSH
47900: LD_INT 51
47902: PPUSH
47903: CALL_OW 321
47907: PUSH
47908: LD_INT 2
47910: EQUAL
47911: AND
47912: IFFALSE 47929
// bpoints := bpoints * 1.2 ;
47914: LD_ADDR_VAR 0 10
47918: PUSH
47919: LD_VAR 0 10
47923: PUSH
47924: LD_REAL  1.20000000000000E+0000
47927: MUL
47928: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47929: LD_VAR 0 6
47933: PPUSH
47934: CALL_OW 257
47938: PUSH
47939: LD_INT 5
47941: PUSH
47942: LD_INT 7
47944: PUSH
47945: LD_INT 9
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: LIST
47952: IN
47953: PUSH
47954: LD_VAR 0 1
47958: PPUSH
47959: LD_INT 52
47961: PPUSH
47962: CALL_OW 321
47966: PUSH
47967: LD_INT 2
47969: EQUAL
47970: AND
47971: IFFALSE 47988
// bpoints := bpoints * 1.5 ;
47973: LD_ADDR_VAR 0 10
47977: PUSH
47978: LD_VAR 0 10
47982: PUSH
47983: LD_REAL  1.50000000000000E+0000
47986: MUL
47987: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47988: LD_VAR 0 1
47992: PPUSH
47993: LD_INT 66
47995: PPUSH
47996: CALL_OW 321
48000: PUSH
48001: LD_INT 2
48003: EQUAL
48004: IFFALSE 48021
// bpoints := bpoints * 1.1 ;
48006: LD_ADDR_VAR 0 10
48010: PUSH
48011: LD_VAR 0 10
48015: PUSH
48016: LD_REAL  1.10000000000000E+0000
48019: MUL
48020: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48021: LD_ADDR_VAR 0 10
48025: PUSH
48026: LD_VAR 0 10
48030: PUSH
48031: LD_VAR 0 6
48035: PPUSH
48036: LD_INT 1
48038: PPUSH
48039: CALL_OW 259
48043: PUSH
48044: LD_REAL  1.15000000000000E+0000
48047: MUL
48048: MUL
48049: ST_TO_ADDR
// end ; unit_vehicle :
48050: GO 48880
48052: LD_INT 2
48054: DOUBLE
48055: EQUAL
48056: IFTRUE 48060
48058: GO 48868
48060: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48061: LD_VAR 0 6
48065: PPUSH
48066: CALL_OW 264
48070: PUSH
48071: LD_INT 2
48073: PUSH
48074: LD_INT 42
48076: PUSH
48077: LD_INT 24
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: LIST
48084: IN
48085: IFFALSE 48106
// points := [ 25 , 5 , 3 ] ;
48087: LD_ADDR_VAR 0 9
48091: PUSH
48092: LD_INT 25
48094: PUSH
48095: LD_INT 5
48097: PUSH
48098: LD_INT 3
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: LIST
48105: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48106: LD_VAR 0 6
48110: PPUSH
48111: CALL_OW 264
48115: PUSH
48116: LD_INT 4
48118: PUSH
48119: LD_INT 43
48121: PUSH
48122: LD_INT 25
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: LIST
48129: IN
48130: IFFALSE 48151
// points := [ 40 , 15 , 5 ] ;
48132: LD_ADDR_VAR 0 9
48136: PUSH
48137: LD_INT 40
48139: PUSH
48140: LD_INT 15
48142: PUSH
48143: LD_INT 5
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: LIST
48150: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48151: LD_VAR 0 6
48155: PPUSH
48156: CALL_OW 264
48160: PUSH
48161: LD_INT 3
48163: PUSH
48164: LD_INT 23
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: IN
48171: IFFALSE 48192
// points := [ 7 , 25 , 8 ] ;
48173: LD_ADDR_VAR 0 9
48177: PUSH
48178: LD_INT 7
48180: PUSH
48181: LD_INT 25
48183: PUSH
48184: LD_INT 8
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: LIST
48191: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48192: LD_VAR 0 6
48196: PPUSH
48197: CALL_OW 264
48201: PUSH
48202: LD_INT 5
48204: PUSH
48205: LD_INT 27
48207: PUSH
48208: LD_INT 44
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: LIST
48215: IN
48216: IFFALSE 48237
// points := [ 14 , 50 , 16 ] ;
48218: LD_ADDR_VAR 0 9
48222: PUSH
48223: LD_INT 14
48225: PUSH
48226: LD_INT 50
48228: PUSH
48229: LD_INT 16
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: LIST
48236: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48237: LD_VAR 0 6
48241: PPUSH
48242: CALL_OW 264
48246: PUSH
48247: LD_INT 6
48249: PUSH
48250: LD_INT 46
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: IN
48257: IFFALSE 48278
// points := [ 32 , 120 , 70 ] ;
48259: LD_ADDR_VAR 0 9
48263: PUSH
48264: LD_INT 32
48266: PUSH
48267: LD_INT 120
48269: PUSH
48270: LD_INT 70
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: LIST
48277: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48278: LD_VAR 0 6
48282: PPUSH
48283: CALL_OW 264
48287: PUSH
48288: LD_INT 7
48290: PUSH
48291: LD_INT 28
48293: PUSH
48294: LD_INT 45
48296: PUSH
48297: LD_EXP 70
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: IN
48308: IFFALSE 48329
// points := [ 35 , 20 , 45 ] ;
48310: LD_ADDR_VAR 0 9
48314: PUSH
48315: LD_INT 35
48317: PUSH
48318: LD_INT 20
48320: PUSH
48321: LD_INT 45
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: LIST
48328: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48329: LD_VAR 0 6
48333: PPUSH
48334: CALL_OW 264
48338: PUSH
48339: LD_INT 47
48341: PUSH
48342: EMPTY
48343: LIST
48344: IN
48345: IFFALSE 48366
// points := [ 67 , 45 , 75 ] ;
48347: LD_ADDR_VAR 0 9
48351: PUSH
48352: LD_INT 67
48354: PUSH
48355: LD_INT 45
48357: PUSH
48358: LD_INT 75
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: LIST
48365: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48366: LD_VAR 0 6
48370: PPUSH
48371: CALL_OW 264
48375: PUSH
48376: LD_INT 26
48378: PUSH
48379: EMPTY
48380: LIST
48381: IN
48382: IFFALSE 48403
// points := [ 120 , 30 , 80 ] ;
48384: LD_ADDR_VAR 0 9
48388: PUSH
48389: LD_INT 120
48391: PUSH
48392: LD_INT 30
48394: PUSH
48395: LD_INT 80
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: LIST
48402: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48403: LD_VAR 0 6
48407: PPUSH
48408: CALL_OW 264
48412: PUSH
48413: LD_INT 22
48415: PUSH
48416: EMPTY
48417: LIST
48418: IN
48419: IFFALSE 48440
// points := [ 40 , 1 , 1 ] ;
48421: LD_ADDR_VAR 0 9
48425: PUSH
48426: LD_INT 40
48428: PUSH
48429: LD_INT 1
48431: PUSH
48432: LD_INT 1
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: LIST
48439: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48440: LD_VAR 0 6
48444: PPUSH
48445: CALL_OW 264
48449: PUSH
48450: LD_INT 29
48452: PUSH
48453: EMPTY
48454: LIST
48455: IN
48456: IFFALSE 48477
// points := [ 70 , 200 , 400 ] ;
48458: LD_ADDR_VAR 0 9
48462: PUSH
48463: LD_INT 70
48465: PUSH
48466: LD_INT 200
48468: PUSH
48469: LD_INT 400
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: LIST
48476: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48477: LD_VAR 0 6
48481: PPUSH
48482: CALL_OW 264
48486: PUSH
48487: LD_INT 14
48489: PUSH
48490: LD_INT 53
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: IN
48497: IFFALSE 48518
// points := [ 40 , 10 , 20 ] ;
48499: LD_ADDR_VAR 0 9
48503: PUSH
48504: LD_INT 40
48506: PUSH
48507: LD_INT 10
48509: PUSH
48510: LD_INT 20
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: LIST
48517: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48518: LD_VAR 0 6
48522: PPUSH
48523: CALL_OW 264
48527: PUSH
48528: LD_INT 9
48530: PUSH
48531: EMPTY
48532: LIST
48533: IN
48534: IFFALSE 48555
// points := [ 5 , 70 , 20 ] ;
48536: LD_ADDR_VAR 0 9
48540: PUSH
48541: LD_INT 5
48543: PUSH
48544: LD_INT 70
48546: PUSH
48547: LD_INT 20
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: LIST
48554: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48555: LD_VAR 0 6
48559: PPUSH
48560: CALL_OW 264
48564: PUSH
48565: LD_INT 10
48567: PUSH
48568: EMPTY
48569: LIST
48570: IN
48571: IFFALSE 48592
// points := [ 35 , 110 , 70 ] ;
48573: LD_ADDR_VAR 0 9
48577: PUSH
48578: LD_INT 35
48580: PUSH
48581: LD_INT 110
48583: PUSH
48584: LD_INT 70
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: LIST
48591: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48592: LD_VAR 0 6
48596: PPUSH
48597: CALL_OW 265
48601: PUSH
48602: LD_INT 25
48604: EQUAL
48605: IFFALSE 48626
// points := [ 80 , 65 , 100 ] ;
48607: LD_ADDR_VAR 0 9
48611: PUSH
48612: LD_INT 80
48614: PUSH
48615: LD_INT 65
48617: PUSH
48618: LD_INT 100
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: LIST
48625: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48626: LD_VAR 0 6
48630: PPUSH
48631: CALL_OW 263
48635: PUSH
48636: LD_INT 1
48638: EQUAL
48639: IFFALSE 48674
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48641: LD_ADDR_VAR 0 10
48645: PUSH
48646: LD_VAR 0 10
48650: PUSH
48651: LD_VAR 0 6
48655: PPUSH
48656: CALL_OW 311
48660: PPUSH
48661: LD_INT 3
48663: PPUSH
48664: CALL_OW 259
48668: PUSH
48669: LD_INT 4
48671: MUL
48672: MUL
48673: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48674: LD_VAR 0 6
48678: PPUSH
48679: CALL_OW 263
48683: PUSH
48684: LD_INT 2
48686: EQUAL
48687: IFFALSE 48738
// begin j := IsControledBy ( i ) ;
48689: LD_ADDR_VAR 0 7
48693: PUSH
48694: LD_VAR 0 6
48698: PPUSH
48699: CALL_OW 312
48703: ST_TO_ADDR
// if j then
48704: LD_VAR 0 7
48708: IFFALSE 48738
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48710: LD_ADDR_VAR 0 10
48714: PUSH
48715: LD_VAR 0 10
48719: PUSH
48720: LD_VAR 0 7
48724: PPUSH
48725: LD_INT 3
48727: PPUSH
48728: CALL_OW 259
48732: PUSH
48733: LD_INT 3
48735: MUL
48736: MUL
48737: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48738: LD_VAR 0 6
48742: PPUSH
48743: CALL_OW 264
48747: PUSH
48748: LD_INT 5
48750: PUSH
48751: LD_INT 6
48753: PUSH
48754: LD_INT 46
48756: PUSH
48757: LD_INT 44
48759: PUSH
48760: LD_INT 47
48762: PUSH
48763: LD_INT 45
48765: PUSH
48766: LD_INT 28
48768: PUSH
48769: LD_INT 7
48771: PUSH
48772: LD_INT 27
48774: PUSH
48775: LD_INT 29
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: IN
48790: PUSH
48791: LD_VAR 0 1
48795: PPUSH
48796: LD_INT 52
48798: PPUSH
48799: CALL_OW 321
48803: PUSH
48804: LD_INT 2
48806: EQUAL
48807: AND
48808: IFFALSE 48825
// bpoints := bpoints * 1.2 ;
48810: LD_ADDR_VAR 0 10
48814: PUSH
48815: LD_VAR 0 10
48819: PUSH
48820: LD_REAL  1.20000000000000E+0000
48823: MUL
48824: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48825: LD_VAR 0 6
48829: PPUSH
48830: CALL_OW 264
48834: PUSH
48835: LD_INT 6
48837: PUSH
48838: LD_INT 46
48840: PUSH
48841: LD_INT 47
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: LIST
48848: IN
48849: IFFALSE 48866
// bpoints := bpoints * 1.2 ;
48851: LD_ADDR_VAR 0 10
48855: PUSH
48856: LD_VAR 0 10
48860: PUSH
48861: LD_REAL  1.20000000000000E+0000
48864: MUL
48865: ST_TO_ADDR
// end ; unit_building :
48866: GO 48880
48868: LD_INT 3
48870: DOUBLE
48871: EQUAL
48872: IFTRUE 48876
48874: GO 48879
48876: POP
// ; end ;
48877: GO 48880
48879: POP
// for j = 1 to 3 do
48880: LD_ADDR_VAR 0 7
48884: PUSH
48885: DOUBLE
48886: LD_INT 1
48888: DEC
48889: ST_TO_ADDR
48890: LD_INT 3
48892: PUSH
48893: FOR_TO
48894: IFFALSE 48947
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48896: LD_ADDR_VAR 0 5
48900: PUSH
48901: LD_VAR 0 5
48905: PPUSH
48906: LD_VAR 0 7
48910: PPUSH
48911: LD_VAR 0 5
48915: PUSH
48916: LD_VAR 0 7
48920: ARRAY
48921: PUSH
48922: LD_VAR 0 9
48926: PUSH
48927: LD_VAR 0 7
48931: ARRAY
48932: PUSH
48933: LD_VAR 0 10
48937: MUL
48938: PLUS
48939: PPUSH
48940: CALL_OW 1
48944: ST_TO_ADDR
48945: GO 48893
48947: POP
48948: POP
// end ;
48949: GO 47426
48951: POP
48952: POP
// result := Replace ( result , 4 , tmp ) ;
48953: LD_ADDR_VAR 0 5
48957: PUSH
48958: LD_VAR 0 5
48962: PPUSH
48963: LD_INT 4
48965: PPUSH
48966: LD_VAR 0 8
48970: PPUSH
48971: CALL_OW 1
48975: ST_TO_ADDR
// end ;
48976: LD_VAR 0 5
48980: RET
// export function DangerAtRange ( unit , range ) ; begin
48981: LD_INT 0
48983: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48984: LD_ADDR_VAR 0 3
48988: PUSH
48989: LD_VAR 0 1
48993: PPUSH
48994: CALL_OW 255
48998: PPUSH
48999: LD_VAR 0 1
49003: PPUSH
49004: CALL_OW 250
49008: PPUSH
49009: LD_VAR 0 1
49013: PPUSH
49014: CALL_OW 251
49018: PPUSH
49019: LD_VAR 0 2
49023: PPUSH
49024: CALL 47278 0 4
49028: ST_TO_ADDR
// end ;
49029: LD_VAR 0 3
49033: RET
// export function DangerInArea ( side , area ) ; begin
49034: LD_INT 0
49036: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49037: LD_ADDR_VAR 0 3
49041: PUSH
49042: LD_VAR 0 2
49046: PPUSH
49047: LD_INT 81
49049: PUSH
49050: LD_VAR 0 1
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PPUSH
49059: CALL_OW 70
49063: ST_TO_ADDR
// end ;
49064: LD_VAR 0 3
49068: RET
// export function IsExtension ( b ) ; begin
49069: LD_INT 0
49071: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49072: LD_ADDR_VAR 0 2
49076: PUSH
49077: LD_VAR 0 1
49081: PUSH
49082: LD_INT 23
49084: PUSH
49085: LD_INT 20
49087: PUSH
49088: LD_INT 22
49090: PUSH
49091: LD_INT 17
49093: PUSH
49094: LD_INT 24
49096: PUSH
49097: LD_INT 21
49099: PUSH
49100: LD_INT 19
49102: PUSH
49103: LD_INT 16
49105: PUSH
49106: LD_INT 25
49108: PUSH
49109: LD_INT 18
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: IN
49124: ST_TO_ADDR
// end ;
49125: LD_VAR 0 2
49129: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49130: LD_INT 0
49132: PPUSH
49133: PPUSH
49134: PPUSH
// result := [ ] ;
49135: LD_ADDR_VAR 0 4
49139: PUSH
49140: EMPTY
49141: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49142: LD_ADDR_VAR 0 5
49146: PUSH
49147: LD_VAR 0 2
49151: PPUSH
49152: LD_INT 21
49154: PUSH
49155: LD_INT 3
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PPUSH
49162: CALL_OW 70
49166: ST_TO_ADDR
// if not tmp then
49167: LD_VAR 0 5
49171: NOT
49172: IFFALSE 49176
// exit ;
49174: GO 49240
// if checkLink then
49176: LD_VAR 0 3
49180: IFFALSE 49230
// begin for i in tmp do
49182: LD_ADDR_VAR 0 6
49186: PUSH
49187: LD_VAR 0 5
49191: PUSH
49192: FOR_IN
49193: IFFALSE 49228
// if GetBase ( i ) <> base then
49195: LD_VAR 0 6
49199: PPUSH
49200: CALL_OW 274
49204: PUSH
49205: LD_VAR 0 1
49209: NONEQUAL
49210: IFFALSE 49226
// ComLinkToBase ( base , i ) ;
49212: LD_VAR 0 1
49216: PPUSH
49217: LD_VAR 0 6
49221: PPUSH
49222: CALL_OW 169
49226: GO 49192
49228: POP
49229: POP
// end ; result := tmp ;
49230: LD_ADDR_VAR 0 4
49234: PUSH
49235: LD_VAR 0 5
49239: ST_TO_ADDR
// end ;
49240: LD_VAR 0 4
49244: RET
// export function ComComplete ( units , b ) ; var i ; begin
49245: LD_INT 0
49247: PPUSH
49248: PPUSH
// if not units then
49249: LD_VAR 0 1
49253: NOT
49254: IFFALSE 49258
// exit ;
49256: GO 49348
// for i in units do
49258: LD_ADDR_VAR 0 4
49262: PUSH
49263: LD_VAR 0 1
49267: PUSH
49268: FOR_IN
49269: IFFALSE 49346
// if BuildingStatus ( b ) = bs_build then
49271: LD_VAR 0 2
49275: PPUSH
49276: CALL_OW 461
49280: PUSH
49281: LD_INT 1
49283: EQUAL
49284: IFFALSE 49344
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49286: LD_VAR 0 4
49290: PPUSH
49291: LD_STRING h
49293: PUSH
49294: LD_VAR 0 2
49298: PPUSH
49299: CALL_OW 250
49303: PUSH
49304: LD_VAR 0 2
49308: PPUSH
49309: CALL_OW 251
49313: PUSH
49314: LD_VAR 0 2
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: LD_INT 0
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: PUSH
49337: EMPTY
49338: LIST
49339: PPUSH
49340: CALL_OW 446
49344: GO 49268
49346: POP
49347: POP
// end ;
49348: LD_VAR 0 3
49352: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49353: LD_INT 0
49355: PPUSH
49356: PPUSH
49357: PPUSH
49358: PPUSH
49359: PPUSH
49360: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49361: LD_VAR 0 1
49365: NOT
49366: PUSH
49367: LD_VAR 0 1
49371: PPUSH
49372: CALL_OW 263
49376: PUSH
49377: LD_INT 2
49379: NONEQUAL
49380: OR
49381: IFFALSE 49385
// exit ;
49383: GO 49701
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49385: LD_ADDR_VAR 0 6
49389: PUSH
49390: LD_INT 22
49392: PUSH
49393: LD_VAR 0 1
49397: PPUSH
49398: CALL_OW 255
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 2
49409: PUSH
49410: LD_INT 30
49412: PUSH
49413: LD_INT 36
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 34
49422: PUSH
49423: LD_INT 31
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: LIST
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PPUSH
49439: CALL_OW 69
49443: ST_TO_ADDR
// if not tmp then
49444: LD_VAR 0 6
49448: NOT
49449: IFFALSE 49453
// exit ;
49451: GO 49701
// result := [ ] ;
49453: LD_ADDR_VAR 0 2
49457: PUSH
49458: EMPTY
49459: ST_TO_ADDR
// for i in tmp do
49460: LD_ADDR_VAR 0 3
49464: PUSH
49465: LD_VAR 0 6
49469: PUSH
49470: FOR_IN
49471: IFFALSE 49542
// begin t := UnitsInside ( i ) ;
49473: LD_ADDR_VAR 0 4
49477: PUSH
49478: LD_VAR 0 3
49482: PPUSH
49483: CALL_OW 313
49487: ST_TO_ADDR
// if t then
49488: LD_VAR 0 4
49492: IFFALSE 49540
// for j in t do
49494: LD_ADDR_VAR 0 7
49498: PUSH
49499: LD_VAR 0 4
49503: PUSH
49504: FOR_IN
49505: IFFALSE 49538
// result := Replace ( result , result + 1 , j ) ;
49507: LD_ADDR_VAR 0 2
49511: PUSH
49512: LD_VAR 0 2
49516: PPUSH
49517: LD_VAR 0 2
49521: PUSH
49522: LD_INT 1
49524: PLUS
49525: PPUSH
49526: LD_VAR 0 7
49530: PPUSH
49531: CALL_OW 1
49535: ST_TO_ADDR
49536: GO 49504
49538: POP
49539: POP
// end ;
49540: GO 49470
49542: POP
49543: POP
// if not result then
49544: LD_VAR 0 2
49548: NOT
49549: IFFALSE 49553
// exit ;
49551: GO 49701
// mech := result [ 1 ] ;
49553: LD_ADDR_VAR 0 5
49557: PUSH
49558: LD_VAR 0 2
49562: PUSH
49563: LD_INT 1
49565: ARRAY
49566: ST_TO_ADDR
// if result > 1 then
49567: LD_VAR 0 2
49571: PUSH
49572: LD_INT 1
49574: GREATER
49575: IFFALSE 49687
// begin for i = 2 to result do
49577: LD_ADDR_VAR 0 3
49581: PUSH
49582: DOUBLE
49583: LD_INT 2
49585: DEC
49586: ST_TO_ADDR
49587: LD_VAR 0 2
49591: PUSH
49592: FOR_TO
49593: IFFALSE 49685
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49595: LD_ADDR_VAR 0 4
49599: PUSH
49600: LD_VAR 0 2
49604: PUSH
49605: LD_VAR 0 3
49609: ARRAY
49610: PPUSH
49611: LD_INT 3
49613: PPUSH
49614: CALL_OW 259
49618: PUSH
49619: LD_VAR 0 2
49623: PUSH
49624: LD_VAR 0 3
49628: ARRAY
49629: PPUSH
49630: CALL_OW 432
49634: MINUS
49635: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49636: LD_VAR 0 4
49640: PUSH
49641: LD_VAR 0 5
49645: PPUSH
49646: LD_INT 3
49648: PPUSH
49649: CALL_OW 259
49653: PUSH
49654: LD_VAR 0 5
49658: PPUSH
49659: CALL_OW 432
49663: MINUS
49664: GREATEREQUAL
49665: IFFALSE 49683
// mech := result [ i ] ;
49667: LD_ADDR_VAR 0 5
49671: PUSH
49672: LD_VAR 0 2
49676: PUSH
49677: LD_VAR 0 3
49681: ARRAY
49682: ST_TO_ADDR
// end ;
49683: GO 49592
49685: POP
49686: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49687: LD_VAR 0 1
49691: PPUSH
49692: LD_VAR 0 5
49696: PPUSH
49697: CALL_OW 135
// end ;
49701: LD_VAR 0 2
49705: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49706: LD_INT 0
49708: PPUSH
49709: PPUSH
49710: PPUSH
49711: PPUSH
49712: PPUSH
49713: PPUSH
49714: PPUSH
49715: PPUSH
49716: PPUSH
49717: PPUSH
49718: PPUSH
49719: PPUSH
49720: PPUSH
// result := [ ] ;
49721: LD_ADDR_VAR 0 7
49725: PUSH
49726: EMPTY
49727: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49728: LD_VAR 0 1
49732: PPUSH
49733: CALL_OW 266
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: LD_INT 1
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: IN
49748: NOT
49749: IFFALSE 49753
// exit ;
49751: GO 51387
// if name then
49753: LD_VAR 0 3
49757: IFFALSE 49773
// SetBName ( base_dep , name ) ;
49759: LD_VAR 0 1
49763: PPUSH
49764: LD_VAR 0 3
49768: PPUSH
49769: CALL_OW 500
// base := GetBase ( base_dep ) ;
49773: LD_ADDR_VAR 0 15
49777: PUSH
49778: LD_VAR 0 1
49782: PPUSH
49783: CALL_OW 274
49787: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49788: LD_ADDR_VAR 0 16
49792: PUSH
49793: LD_VAR 0 1
49797: PPUSH
49798: CALL_OW 255
49802: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49803: LD_ADDR_VAR 0 17
49807: PUSH
49808: LD_VAR 0 1
49812: PPUSH
49813: CALL_OW 248
49817: ST_TO_ADDR
// if sources then
49818: LD_VAR 0 5
49822: IFFALSE 49869
// for i = 1 to 3 do
49824: LD_ADDR_VAR 0 8
49828: PUSH
49829: DOUBLE
49830: LD_INT 1
49832: DEC
49833: ST_TO_ADDR
49834: LD_INT 3
49836: PUSH
49837: FOR_TO
49838: IFFALSE 49867
// AddResourceType ( base , i , sources [ i ] ) ;
49840: LD_VAR 0 15
49844: PPUSH
49845: LD_VAR 0 8
49849: PPUSH
49850: LD_VAR 0 5
49854: PUSH
49855: LD_VAR 0 8
49859: ARRAY
49860: PPUSH
49861: CALL_OW 276
49865: GO 49837
49867: POP
49868: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49869: LD_ADDR_VAR 0 18
49873: PUSH
49874: LD_VAR 0 15
49878: PPUSH
49879: LD_VAR 0 2
49883: PPUSH
49884: LD_INT 1
49886: PPUSH
49887: CALL 49130 0 3
49891: ST_TO_ADDR
// InitHc ;
49892: CALL_OW 19
// InitUc ;
49896: CALL_OW 18
// uc_side := side ;
49900: LD_ADDR_OWVAR 20
49904: PUSH
49905: LD_VAR 0 16
49909: ST_TO_ADDR
// uc_nation := nation ;
49910: LD_ADDR_OWVAR 21
49914: PUSH
49915: LD_VAR 0 17
49919: ST_TO_ADDR
// if buildings then
49920: LD_VAR 0 18
49924: IFFALSE 51246
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49926: LD_ADDR_VAR 0 19
49930: PUSH
49931: LD_VAR 0 18
49935: PPUSH
49936: LD_INT 2
49938: PUSH
49939: LD_INT 30
49941: PUSH
49942: LD_INT 29
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 30
49951: PUSH
49952: LD_INT 30
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: LIST
49963: PPUSH
49964: CALL_OW 72
49968: ST_TO_ADDR
// if tmp then
49969: LD_VAR 0 19
49973: IFFALSE 50021
// for i in tmp do
49975: LD_ADDR_VAR 0 8
49979: PUSH
49980: LD_VAR 0 19
49984: PUSH
49985: FOR_IN
49986: IFFALSE 50019
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49988: LD_VAR 0 8
49992: PPUSH
49993: CALL_OW 250
49997: PPUSH
49998: LD_VAR 0 8
50002: PPUSH
50003: CALL_OW 251
50007: PPUSH
50008: LD_VAR 0 16
50012: PPUSH
50013: CALL_OW 441
50017: GO 49985
50019: POP
50020: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50021: LD_VAR 0 18
50025: PPUSH
50026: LD_INT 2
50028: PUSH
50029: LD_INT 30
50031: PUSH
50032: LD_INT 32
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 30
50041: PUSH
50042: LD_INT 33
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: LIST
50053: PPUSH
50054: CALL_OW 72
50058: IFFALSE 50146
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50060: LD_ADDR_VAR 0 8
50064: PUSH
50065: LD_VAR 0 18
50069: PPUSH
50070: LD_INT 2
50072: PUSH
50073: LD_INT 30
50075: PUSH
50076: LD_INT 32
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 30
50085: PUSH
50086: LD_INT 33
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: LIST
50097: PPUSH
50098: CALL_OW 72
50102: PUSH
50103: FOR_IN
50104: IFFALSE 50144
// begin if not GetBWeapon ( i ) then
50106: LD_VAR 0 8
50110: PPUSH
50111: CALL_OW 269
50115: NOT
50116: IFFALSE 50142
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50118: LD_VAR 0 8
50122: PPUSH
50123: LD_VAR 0 8
50127: PPUSH
50128: LD_VAR 0 2
50132: PPUSH
50133: CALL 51392 0 2
50137: PPUSH
50138: CALL_OW 431
// end ;
50142: GO 50103
50144: POP
50145: POP
// end ; for i = 1 to personel do
50146: LD_ADDR_VAR 0 8
50150: PUSH
50151: DOUBLE
50152: LD_INT 1
50154: DEC
50155: ST_TO_ADDR
50156: LD_VAR 0 6
50160: PUSH
50161: FOR_TO
50162: IFFALSE 51226
// begin if i > 4 then
50164: LD_VAR 0 8
50168: PUSH
50169: LD_INT 4
50171: GREATER
50172: IFFALSE 50176
// break ;
50174: GO 51226
// case i of 1 :
50176: LD_VAR 0 8
50180: PUSH
50181: LD_INT 1
50183: DOUBLE
50184: EQUAL
50185: IFTRUE 50189
50187: GO 50269
50189: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50190: LD_ADDR_VAR 0 12
50194: PUSH
50195: LD_VAR 0 18
50199: PPUSH
50200: LD_INT 22
50202: PUSH
50203: LD_VAR 0 16
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 58
50214: PUSH
50215: EMPTY
50216: LIST
50217: PUSH
50218: LD_INT 2
50220: PUSH
50221: LD_INT 30
50223: PUSH
50224: LD_INT 32
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 30
50233: PUSH
50234: LD_INT 4
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 30
50243: PUSH
50244: LD_INT 5
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: LIST
50261: PPUSH
50262: CALL_OW 72
50266: ST_TO_ADDR
50267: GO 50491
50269: LD_INT 2
50271: DOUBLE
50272: EQUAL
50273: IFTRUE 50277
50275: GO 50339
50277: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50278: LD_ADDR_VAR 0 12
50282: PUSH
50283: LD_VAR 0 18
50287: PPUSH
50288: LD_INT 22
50290: PUSH
50291: LD_VAR 0 16
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 2
50302: PUSH
50303: LD_INT 30
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 30
50315: PUSH
50316: LD_INT 1
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: LIST
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PPUSH
50332: CALL_OW 72
50336: ST_TO_ADDR
50337: GO 50491
50339: LD_INT 3
50341: DOUBLE
50342: EQUAL
50343: IFTRUE 50347
50345: GO 50409
50347: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50348: LD_ADDR_VAR 0 12
50352: PUSH
50353: LD_VAR 0 18
50357: PPUSH
50358: LD_INT 22
50360: PUSH
50361: LD_VAR 0 16
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 2
50372: PUSH
50373: LD_INT 30
50375: PUSH
50376: LD_INT 2
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 30
50385: PUSH
50386: LD_INT 3
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: LIST
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PPUSH
50402: CALL_OW 72
50406: ST_TO_ADDR
50407: GO 50491
50409: LD_INT 4
50411: DOUBLE
50412: EQUAL
50413: IFTRUE 50417
50415: GO 50490
50417: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50418: LD_ADDR_VAR 0 12
50422: PUSH
50423: LD_VAR 0 18
50427: PPUSH
50428: LD_INT 22
50430: PUSH
50431: LD_VAR 0 16
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 2
50442: PUSH
50443: LD_INT 30
50445: PUSH
50446: LD_INT 6
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 30
50455: PUSH
50456: LD_INT 7
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 30
50465: PUSH
50466: LD_INT 8
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PPUSH
50483: CALL_OW 72
50487: ST_TO_ADDR
50488: GO 50491
50490: POP
// if i = 1 then
50491: LD_VAR 0 8
50495: PUSH
50496: LD_INT 1
50498: EQUAL
50499: IFFALSE 50610
// begin tmp := [ ] ;
50501: LD_ADDR_VAR 0 19
50505: PUSH
50506: EMPTY
50507: ST_TO_ADDR
// for j in f do
50508: LD_ADDR_VAR 0 9
50512: PUSH
50513: LD_VAR 0 12
50517: PUSH
50518: FOR_IN
50519: IFFALSE 50592
// if GetBType ( j ) = b_bunker then
50521: LD_VAR 0 9
50525: PPUSH
50526: CALL_OW 266
50530: PUSH
50531: LD_INT 32
50533: EQUAL
50534: IFFALSE 50561
// tmp := Insert ( tmp , 1 , j ) else
50536: LD_ADDR_VAR 0 19
50540: PUSH
50541: LD_VAR 0 19
50545: PPUSH
50546: LD_INT 1
50548: PPUSH
50549: LD_VAR 0 9
50553: PPUSH
50554: CALL_OW 2
50558: ST_TO_ADDR
50559: GO 50590
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50561: LD_ADDR_VAR 0 19
50565: PUSH
50566: LD_VAR 0 19
50570: PPUSH
50571: LD_VAR 0 19
50575: PUSH
50576: LD_INT 1
50578: PLUS
50579: PPUSH
50580: LD_VAR 0 9
50584: PPUSH
50585: CALL_OW 2
50589: ST_TO_ADDR
50590: GO 50518
50592: POP
50593: POP
// if tmp then
50594: LD_VAR 0 19
50598: IFFALSE 50610
// f := tmp ;
50600: LD_ADDR_VAR 0 12
50604: PUSH
50605: LD_VAR 0 19
50609: ST_TO_ADDR
// end ; x := personel [ i ] ;
50610: LD_ADDR_VAR 0 13
50614: PUSH
50615: LD_VAR 0 6
50619: PUSH
50620: LD_VAR 0 8
50624: ARRAY
50625: ST_TO_ADDR
// if x = - 1 then
50626: LD_VAR 0 13
50630: PUSH
50631: LD_INT 1
50633: NEG
50634: EQUAL
50635: IFFALSE 50844
// begin for j in f do
50637: LD_ADDR_VAR 0 9
50641: PUSH
50642: LD_VAR 0 12
50646: PUSH
50647: FOR_IN
50648: IFFALSE 50840
// repeat InitHc ;
50650: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50654: LD_VAR 0 9
50658: PPUSH
50659: CALL_OW 266
50663: PUSH
50664: LD_INT 5
50666: EQUAL
50667: IFFALSE 50737
// begin if UnitsInside ( j ) < 3 then
50669: LD_VAR 0 9
50673: PPUSH
50674: CALL_OW 313
50678: PUSH
50679: LD_INT 3
50681: LESS
50682: IFFALSE 50718
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50684: LD_INT 0
50686: PPUSH
50687: LD_INT 5
50689: PUSH
50690: LD_INT 8
50692: PUSH
50693: LD_INT 9
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: LIST
50700: PUSH
50701: LD_VAR 0 17
50705: ARRAY
50706: PPUSH
50707: LD_VAR 0 4
50711: PPUSH
50712: CALL_OW 380
50716: GO 50735
// PrepareHuman ( false , i , skill ) ;
50718: LD_INT 0
50720: PPUSH
50721: LD_VAR 0 8
50725: PPUSH
50726: LD_VAR 0 4
50730: PPUSH
50731: CALL_OW 380
// end else
50735: GO 50754
// PrepareHuman ( false , i , skill ) ;
50737: LD_INT 0
50739: PPUSH
50740: LD_VAR 0 8
50744: PPUSH
50745: LD_VAR 0 4
50749: PPUSH
50750: CALL_OW 380
// un := CreateHuman ;
50754: LD_ADDR_VAR 0 14
50758: PUSH
50759: CALL_OW 44
50763: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50764: LD_ADDR_VAR 0 7
50768: PUSH
50769: LD_VAR 0 7
50773: PPUSH
50774: LD_INT 1
50776: PPUSH
50777: LD_VAR 0 14
50781: PPUSH
50782: CALL_OW 2
50786: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50787: LD_VAR 0 14
50791: PPUSH
50792: LD_VAR 0 9
50796: PPUSH
50797: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50801: LD_VAR 0 9
50805: PPUSH
50806: CALL_OW 313
50810: PUSH
50811: LD_INT 6
50813: EQUAL
50814: PUSH
50815: LD_VAR 0 9
50819: PPUSH
50820: CALL_OW 266
50824: PUSH
50825: LD_INT 32
50827: PUSH
50828: LD_INT 31
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: IN
50835: OR
50836: IFFALSE 50650
50838: GO 50647
50840: POP
50841: POP
// end else
50842: GO 51224
// for j = 1 to x do
50844: LD_ADDR_VAR 0 9
50848: PUSH
50849: DOUBLE
50850: LD_INT 1
50852: DEC
50853: ST_TO_ADDR
50854: LD_VAR 0 13
50858: PUSH
50859: FOR_TO
50860: IFFALSE 51222
// begin InitHc ;
50862: CALL_OW 19
// if not f then
50866: LD_VAR 0 12
50870: NOT
50871: IFFALSE 50960
// begin PrepareHuman ( false , i , skill ) ;
50873: LD_INT 0
50875: PPUSH
50876: LD_VAR 0 8
50880: PPUSH
50881: LD_VAR 0 4
50885: PPUSH
50886: CALL_OW 380
// un := CreateHuman ;
50890: LD_ADDR_VAR 0 14
50894: PUSH
50895: CALL_OW 44
50899: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50900: LD_ADDR_VAR 0 7
50904: PUSH
50905: LD_VAR 0 7
50909: PPUSH
50910: LD_INT 1
50912: PPUSH
50913: LD_VAR 0 14
50917: PPUSH
50918: CALL_OW 2
50922: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50923: LD_VAR 0 14
50927: PPUSH
50928: LD_VAR 0 1
50932: PPUSH
50933: CALL_OW 250
50937: PPUSH
50938: LD_VAR 0 1
50942: PPUSH
50943: CALL_OW 251
50947: PPUSH
50948: LD_INT 10
50950: PPUSH
50951: LD_INT 0
50953: PPUSH
50954: CALL_OW 50
// continue ;
50958: GO 50859
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50960: LD_VAR 0 12
50964: PUSH
50965: LD_INT 1
50967: ARRAY
50968: PPUSH
50969: CALL_OW 313
50973: PUSH
50974: LD_VAR 0 12
50978: PUSH
50979: LD_INT 1
50981: ARRAY
50982: PPUSH
50983: CALL_OW 266
50987: PUSH
50988: LD_INT 32
50990: PUSH
50991: LD_INT 31
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: IN
50998: AND
50999: PUSH
51000: LD_VAR 0 12
51004: PUSH
51005: LD_INT 1
51007: ARRAY
51008: PPUSH
51009: CALL_OW 313
51013: PUSH
51014: LD_INT 6
51016: EQUAL
51017: OR
51018: IFFALSE 51038
// f := Delete ( f , 1 ) ;
51020: LD_ADDR_VAR 0 12
51024: PUSH
51025: LD_VAR 0 12
51029: PPUSH
51030: LD_INT 1
51032: PPUSH
51033: CALL_OW 3
51037: ST_TO_ADDR
// if not f then
51038: LD_VAR 0 12
51042: NOT
51043: IFFALSE 51061
// begin x := x + 2 ;
51045: LD_ADDR_VAR 0 13
51049: PUSH
51050: LD_VAR 0 13
51054: PUSH
51055: LD_INT 2
51057: PLUS
51058: ST_TO_ADDR
// continue ;
51059: GO 50859
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51061: LD_VAR 0 12
51065: PUSH
51066: LD_INT 1
51068: ARRAY
51069: PPUSH
51070: CALL_OW 266
51074: PUSH
51075: LD_INT 5
51077: EQUAL
51078: IFFALSE 51152
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51080: LD_VAR 0 12
51084: PUSH
51085: LD_INT 1
51087: ARRAY
51088: PPUSH
51089: CALL_OW 313
51093: PUSH
51094: LD_INT 3
51096: LESS
51097: IFFALSE 51133
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51099: LD_INT 0
51101: PPUSH
51102: LD_INT 5
51104: PUSH
51105: LD_INT 8
51107: PUSH
51108: LD_INT 9
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: LIST
51115: PUSH
51116: LD_VAR 0 17
51120: ARRAY
51121: PPUSH
51122: LD_VAR 0 4
51126: PPUSH
51127: CALL_OW 380
51131: GO 51150
// PrepareHuman ( false , i , skill ) ;
51133: LD_INT 0
51135: PPUSH
51136: LD_VAR 0 8
51140: PPUSH
51141: LD_VAR 0 4
51145: PPUSH
51146: CALL_OW 380
// end else
51150: GO 51169
// PrepareHuman ( false , i , skill ) ;
51152: LD_INT 0
51154: PPUSH
51155: LD_VAR 0 8
51159: PPUSH
51160: LD_VAR 0 4
51164: PPUSH
51165: CALL_OW 380
// un := CreateHuman ;
51169: LD_ADDR_VAR 0 14
51173: PUSH
51174: CALL_OW 44
51178: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51179: LD_ADDR_VAR 0 7
51183: PUSH
51184: LD_VAR 0 7
51188: PPUSH
51189: LD_INT 1
51191: PPUSH
51192: LD_VAR 0 14
51196: PPUSH
51197: CALL_OW 2
51201: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51202: LD_VAR 0 14
51206: PPUSH
51207: LD_VAR 0 12
51211: PUSH
51212: LD_INT 1
51214: ARRAY
51215: PPUSH
51216: CALL_OW 52
// end ;
51220: GO 50859
51222: POP
51223: POP
// end ;
51224: GO 50161
51226: POP
51227: POP
// result := result ^ buildings ;
51228: LD_ADDR_VAR 0 7
51232: PUSH
51233: LD_VAR 0 7
51237: PUSH
51238: LD_VAR 0 18
51242: ADD
51243: ST_TO_ADDR
// end else
51244: GO 51387
// begin for i = 1 to personel do
51246: LD_ADDR_VAR 0 8
51250: PUSH
51251: DOUBLE
51252: LD_INT 1
51254: DEC
51255: ST_TO_ADDR
51256: LD_VAR 0 6
51260: PUSH
51261: FOR_TO
51262: IFFALSE 51385
// begin if i > 4 then
51264: LD_VAR 0 8
51268: PUSH
51269: LD_INT 4
51271: GREATER
51272: IFFALSE 51276
// break ;
51274: GO 51385
// x := personel [ i ] ;
51276: LD_ADDR_VAR 0 13
51280: PUSH
51281: LD_VAR 0 6
51285: PUSH
51286: LD_VAR 0 8
51290: ARRAY
51291: ST_TO_ADDR
// if x = - 1 then
51292: LD_VAR 0 13
51296: PUSH
51297: LD_INT 1
51299: NEG
51300: EQUAL
51301: IFFALSE 51305
// continue ;
51303: GO 51261
// PrepareHuman ( false , i , skill ) ;
51305: LD_INT 0
51307: PPUSH
51308: LD_VAR 0 8
51312: PPUSH
51313: LD_VAR 0 4
51317: PPUSH
51318: CALL_OW 380
// un := CreateHuman ;
51322: LD_ADDR_VAR 0 14
51326: PUSH
51327: CALL_OW 44
51331: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51332: LD_VAR 0 14
51336: PPUSH
51337: LD_VAR 0 1
51341: PPUSH
51342: CALL_OW 250
51346: PPUSH
51347: LD_VAR 0 1
51351: PPUSH
51352: CALL_OW 251
51356: PPUSH
51357: LD_INT 10
51359: PPUSH
51360: LD_INT 0
51362: PPUSH
51363: CALL_OW 50
// result := result ^ un ;
51367: LD_ADDR_VAR 0 7
51371: PUSH
51372: LD_VAR 0 7
51376: PUSH
51377: LD_VAR 0 14
51381: ADD
51382: ST_TO_ADDR
// end ;
51383: GO 51261
51385: POP
51386: POP
// end ; end ;
51387: LD_VAR 0 7
51391: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51392: LD_INT 0
51394: PPUSH
51395: PPUSH
51396: PPUSH
51397: PPUSH
51398: PPUSH
51399: PPUSH
51400: PPUSH
51401: PPUSH
51402: PPUSH
51403: PPUSH
51404: PPUSH
51405: PPUSH
51406: PPUSH
51407: PPUSH
51408: PPUSH
51409: PPUSH
// result := false ;
51410: LD_ADDR_VAR 0 3
51414: PUSH
51415: LD_INT 0
51417: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51418: LD_VAR 0 1
51422: NOT
51423: PUSH
51424: LD_VAR 0 1
51428: PPUSH
51429: CALL_OW 266
51433: PUSH
51434: LD_INT 32
51436: PUSH
51437: LD_INT 33
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: IN
51444: NOT
51445: OR
51446: IFFALSE 51450
// exit ;
51448: GO 52559
// nat := GetNation ( tower ) ;
51450: LD_ADDR_VAR 0 12
51454: PUSH
51455: LD_VAR 0 1
51459: PPUSH
51460: CALL_OW 248
51464: ST_TO_ADDR
// side := GetSide ( tower ) ;
51465: LD_ADDR_VAR 0 16
51469: PUSH
51470: LD_VAR 0 1
51474: PPUSH
51475: CALL_OW 255
51479: ST_TO_ADDR
// x := GetX ( tower ) ;
51480: LD_ADDR_VAR 0 10
51484: PUSH
51485: LD_VAR 0 1
51489: PPUSH
51490: CALL_OW 250
51494: ST_TO_ADDR
// y := GetY ( tower ) ;
51495: LD_ADDR_VAR 0 11
51499: PUSH
51500: LD_VAR 0 1
51504: PPUSH
51505: CALL_OW 251
51509: ST_TO_ADDR
// if not x or not y then
51510: LD_VAR 0 10
51514: NOT
51515: PUSH
51516: LD_VAR 0 11
51520: NOT
51521: OR
51522: IFFALSE 51526
// exit ;
51524: GO 52559
// weapon := 0 ;
51526: LD_ADDR_VAR 0 18
51530: PUSH
51531: LD_INT 0
51533: ST_TO_ADDR
// fac_list := [ ] ;
51534: LD_ADDR_VAR 0 17
51538: PUSH
51539: EMPTY
51540: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51541: LD_ADDR_VAR 0 6
51545: PUSH
51546: LD_VAR 0 1
51550: PPUSH
51551: CALL_OW 274
51555: PPUSH
51556: LD_VAR 0 2
51560: PPUSH
51561: LD_INT 0
51563: PPUSH
51564: CALL 49130 0 3
51568: PPUSH
51569: LD_INT 30
51571: PUSH
51572: LD_INT 3
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PPUSH
51579: CALL_OW 72
51583: ST_TO_ADDR
// if not factories then
51584: LD_VAR 0 6
51588: NOT
51589: IFFALSE 51593
// exit ;
51591: GO 52559
// for i in factories do
51593: LD_ADDR_VAR 0 8
51597: PUSH
51598: LD_VAR 0 6
51602: PUSH
51603: FOR_IN
51604: IFFALSE 51629
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51606: LD_ADDR_VAR 0 17
51610: PUSH
51611: LD_VAR 0 17
51615: PUSH
51616: LD_VAR 0 8
51620: PPUSH
51621: CALL_OW 478
51625: UNION
51626: ST_TO_ADDR
51627: GO 51603
51629: POP
51630: POP
// if not fac_list then
51631: LD_VAR 0 17
51635: NOT
51636: IFFALSE 51640
// exit ;
51638: GO 52559
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51640: LD_ADDR_VAR 0 5
51644: PUSH
51645: LD_INT 4
51647: PUSH
51648: LD_INT 5
51650: PUSH
51651: LD_INT 9
51653: PUSH
51654: LD_INT 10
51656: PUSH
51657: LD_INT 6
51659: PUSH
51660: LD_INT 7
51662: PUSH
51663: LD_INT 11
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 27
51677: PUSH
51678: LD_INT 28
51680: PUSH
51681: LD_INT 26
51683: PUSH
51684: LD_INT 30
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 43
51695: PUSH
51696: LD_INT 44
51698: PUSH
51699: LD_INT 46
51701: PUSH
51702: LD_INT 45
51704: PUSH
51705: LD_INT 47
51707: PUSH
51708: LD_INT 49
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: LIST
51723: PUSH
51724: LD_VAR 0 12
51728: ARRAY
51729: ST_TO_ADDR
// list := list isect fac_list ;
51730: LD_ADDR_VAR 0 5
51734: PUSH
51735: LD_VAR 0 5
51739: PUSH
51740: LD_VAR 0 17
51744: ISECT
51745: ST_TO_ADDR
// if not list then
51746: LD_VAR 0 5
51750: NOT
51751: IFFALSE 51755
// exit ;
51753: GO 52559
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51755: LD_VAR 0 12
51759: PUSH
51760: LD_INT 3
51762: EQUAL
51763: PUSH
51764: LD_INT 49
51766: PUSH
51767: LD_VAR 0 5
51771: IN
51772: AND
51773: PUSH
51774: LD_INT 31
51776: PPUSH
51777: LD_VAR 0 16
51781: PPUSH
51782: CALL_OW 321
51786: PUSH
51787: LD_INT 2
51789: EQUAL
51790: AND
51791: IFFALSE 51851
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51793: LD_INT 22
51795: PUSH
51796: LD_VAR 0 16
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 35
51807: PUSH
51808: LD_INT 49
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 91
51817: PUSH
51818: LD_VAR 0 1
51822: PUSH
51823: LD_INT 10
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: LIST
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: LIST
51835: PPUSH
51836: CALL_OW 69
51840: NOT
51841: IFFALSE 51851
// weapon := ru_time_lapser ;
51843: LD_ADDR_VAR 0 18
51847: PUSH
51848: LD_INT 49
51850: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51851: LD_VAR 0 12
51855: PUSH
51856: LD_INT 1
51858: PUSH
51859: LD_INT 2
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: IN
51866: PUSH
51867: LD_INT 11
51869: PUSH
51870: LD_VAR 0 5
51874: IN
51875: PUSH
51876: LD_INT 30
51878: PUSH
51879: LD_VAR 0 5
51883: IN
51884: OR
51885: AND
51886: PUSH
51887: LD_INT 6
51889: PPUSH
51890: LD_VAR 0 16
51894: PPUSH
51895: CALL_OW 321
51899: PUSH
51900: LD_INT 2
51902: EQUAL
51903: AND
51904: IFFALSE 52069
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51906: LD_INT 22
51908: PUSH
51909: LD_VAR 0 16
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 2
51920: PUSH
51921: LD_INT 35
51923: PUSH
51924: LD_INT 11
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 35
51933: PUSH
51934: LD_INT 30
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 91
51948: PUSH
51949: LD_VAR 0 1
51953: PUSH
51954: LD_INT 18
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: LIST
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: LIST
51966: PPUSH
51967: CALL_OW 69
51971: NOT
51972: PUSH
51973: LD_INT 22
51975: PUSH
51976: LD_VAR 0 16
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 2
51987: PUSH
51988: LD_INT 30
51990: PUSH
51991: LD_INT 32
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 30
52000: PUSH
52001: LD_INT 33
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 91
52015: PUSH
52016: LD_VAR 0 1
52020: PUSH
52021: LD_INT 12
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: LIST
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: LIST
52033: PUSH
52034: EMPTY
52035: LIST
52036: PPUSH
52037: CALL_OW 69
52041: PUSH
52042: LD_INT 2
52044: GREATER
52045: AND
52046: IFFALSE 52069
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52048: LD_ADDR_VAR 0 18
52052: PUSH
52053: LD_INT 11
52055: PUSH
52056: LD_INT 30
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_VAR 0 12
52067: ARRAY
52068: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52069: LD_VAR 0 18
52073: NOT
52074: PUSH
52075: LD_INT 40
52077: PPUSH
52078: LD_VAR 0 16
52082: PPUSH
52083: CALL_OW 321
52087: PUSH
52088: LD_INT 2
52090: EQUAL
52091: AND
52092: PUSH
52093: LD_INT 7
52095: PUSH
52096: LD_VAR 0 5
52100: IN
52101: PUSH
52102: LD_INT 28
52104: PUSH
52105: LD_VAR 0 5
52109: IN
52110: OR
52111: PUSH
52112: LD_INT 45
52114: PUSH
52115: LD_VAR 0 5
52119: IN
52120: OR
52121: AND
52122: IFFALSE 52376
// begin hex := GetHexInfo ( x , y ) ;
52124: LD_ADDR_VAR 0 4
52128: PUSH
52129: LD_VAR 0 10
52133: PPUSH
52134: LD_VAR 0 11
52138: PPUSH
52139: CALL_OW 546
52143: ST_TO_ADDR
// if hex [ 1 ] then
52144: LD_VAR 0 4
52148: PUSH
52149: LD_INT 1
52151: ARRAY
52152: IFFALSE 52156
// exit ;
52154: GO 52559
// height := hex [ 2 ] ;
52156: LD_ADDR_VAR 0 15
52160: PUSH
52161: LD_VAR 0 4
52165: PUSH
52166: LD_INT 2
52168: ARRAY
52169: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52170: LD_ADDR_VAR 0 14
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: LD_INT 2
52180: PUSH
52181: LD_INT 3
52183: PUSH
52184: LD_INT 5
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: ST_TO_ADDR
// for i in tmp do
52193: LD_ADDR_VAR 0 8
52197: PUSH
52198: LD_VAR 0 14
52202: PUSH
52203: FOR_IN
52204: IFFALSE 52374
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52206: LD_ADDR_VAR 0 9
52210: PUSH
52211: LD_VAR 0 10
52215: PPUSH
52216: LD_VAR 0 8
52220: PPUSH
52221: LD_INT 5
52223: PPUSH
52224: CALL_OW 272
52228: PUSH
52229: LD_VAR 0 11
52233: PPUSH
52234: LD_VAR 0 8
52238: PPUSH
52239: LD_INT 5
52241: PPUSH
52242: CALL_OW 273
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52251: LD_VAR 0 9
52255: PUSH
52256: LD_INT 1
52258: ARRAY
52259: PPUSH
52260: LD_VAR 0 9
52264: PUSH
52265: LD_INT 2
52267: ARRAY
52268: PPUSH
52269: CALL_OW 488
52273: IFFALSE 52372
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52275: LD_ADDR_VAR 0 4
52279: PUSH
52280: LD_VAR 0 9
52284: PUSH
52285: LD_INT 1
52287: ARRAY
52288: PPUSH
52289: LD_VAR 0 9
52293: PUSH
52294: LD_INT 2
52296: ARRAY
52297: PPUSH
52298: CALL_OW 546
52302: ST_TO_ADDR
// if hex [ 1 ] then
52303: LD_VAR 0 4
52307: PUSH
52308: LD_INT 1
52310: ARRAY
52311: IFFALSE 52315
// continue ;
52313: GO 52203
// h := hex [ 2 ] ;
52315: LD_ADDR_VAR 0 13
52319: PUSH
52320: LD_VAR 0 4
52324: PUSH
52325: LD_INT 2
52327: ARRAY
52328: ST_TO_ADDR
// if h + 7 < height then
52329: LD_VAR 0 13
52333: PUSH
52334: LD_INT 7
52336: PLUS
52337: PUSH
52338: LD_VAR 0 15
52342: LESS
52343: IFFALSE 52372
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52345: LD_ADDR_VAR 0 18
52349: PUSH
52350: LD_INT 7
52352: PUSH
52353: LD_INT 28
52355: PUSH
52356: LD_INT 45
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: LIST
52363: PUSH
52364: LD_VAR 0 12
52368: ARRAY
52369: ST_TO_ADDR
// break ;
52370: GO 52374
// end ; end ; end ;
52372: GO 52203
52374: POP
52375: POP
// end ; if not weapon then
52376: LD_VAR 0 18
52380: NOT
52381: IFFALSE 52441
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52383: LD_ADDR_VAR 0 5
52387: PUSH
52388: LD_VAR 0 5
52392: PUSH
52393: LD_INT 11
52395: PUSH
52396: LD_INT 30
52398: PUSH
52399: LD_INT 49
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: LIST
52406: DIFF
52407: ST_TO_ADDR
// if not list then
52408: LD_VAR 0 5
52412: NOT
52413: IFFALSE 52417
// exit ;
52415: GO 52559
// weapon := list [ rand ( 1 , list ) ] ;
52417: LD_ADDR_VAR 0 18
52421: PUSH
52422: LD_VAR 0 5
52426: PUSH
52427: LD_INT 1
52429: PPUSH
52430: LD_VAR 0 5
52434: PPUSH
52435: CALL_OW 12
52439: ARRAY
52440: ST_TO_ADDR
// end ; if weapon then
52441: LD_VAR 0 18
52445: IFFALSE 52559
// begin tmp := CostOfWeapon ( weapon ) ;
52447: LD_ADDR_VAR 0 14
52451: PUSH
52452: LD_VAR 0 18
52456: PPUSH
52457: CALL_OW 451
52461: ST_TO_ADDR
// j := GetBase ( tower ) ;
52462: LD_ADDR_VAR 0 9
52466: PUSH
52467: LD_VAR 0 1
52471: PPUSH
52472: CALL_OW 274
52476: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52477: LD_VAR 0 9
52481: PPUSH
52482: LD_INT 1
52484: PPUSH
52485: CALL_OW 275
52489: PUSH
52490: LD_VAR 0 14
52494: PUSH
52495: LD_INT 1
52497: ARRAY
52498: GREATEREQUAL
52499: PUSH
52500: LD_VAR 0 9
52504: PPUSH
52505: LD_INT 2
52507: PPUSH
52508: CALL_OW 275
52512: PUSH
52513: LD_VAR 0 14
52517: PUSH
52518: LD_INT 2
52520: ARRAY
52521: GREATEREQUAL
52522: AND
52523: PUSH
52524: LD_VAR 0 9
52528: PPUSH
52529: LD_INT 3
52531: PPUSH
52532: CALL_OW 275
52536: PUSH
52537: LD_VAR 0 14
52541: PUSH
52542: LD_INT 3
52544: ARRAY
52545: GREATEREQUAL
52546: AND
52547: IFFALSE 52559
// result := weapon ;
52549: LD_ADDR_VAR 0 3
52553: PUSH
52554: LD_VAR 0 18
52558: ST_TO_ADDR
// end ; end ;
52559: LD_VAR 0 3
52563: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52564: LD_INT 0
52566: PPUSH
52567: PPUSH
// result := true ;
52568: LD_ADDR_VAR 0 3
52572: PUSH
52573: LD_INT 1
52575: ST_TO_ADDR
// if array1 = array2 then
52576: LD_VAR 0 1
52580: PUSH
52581: LD_VAR 0 2
52585: EQUAL
52586: IFFALSE 52646
// begin for i = 1 to array1 do
52588: LD_ADDR_VAR 0 4
52592: PUSH
52593: DOUBLE
52594: LD_INT 1
52596: DEC
52597: ST_TO_ADDR
52598: LD_VAR 0 1
52602: PUSH
52603: FOR_TO
52604: IFFALSE 52642
// if array1 [ i ] <> array2 [ i ] then
52606: LD_VAR 0 1
52610: PUSH
52611: LD_VAR 0 4
52615: ARRAY
52616: PUSH
52617: LD_VAR 0 2
52621: PUSH
52622: LD_VAR 0 4
52626: ARRAY
52627: NONEQUAL
52628: IFFALSE 52640
// begin result := false ;
52630: LD_ADDR_VAR 0 3
52634: PUSH
52635: LD_INT 0
52637: ST_TO_ADDR
// break ;
52638: GO 52642
// end ;
52640: GO 52603
52642: POP
52643: POP
// end else
52644: GO 52654
// result := false ;
52646: LD_ADDR_VAR 0 3
52650: PUSH
52651: LD_INT 0
52653: ST_TO_ADDR
// end ;
52654: LD_VAR 0 3
52658: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52659: LD_INT 0
52661: PPUSH
52662: PPUSH
// if not array1 or not array2 then
52663: LD_VAR 0 1
52667: NOT
52668: PUSH
52669: LD_VAR 0 2
52673: NOT
52674: OR
52675: IFFALSE 52679
// exit ;
52677: GO 52743
// result := true ;
52679: LD_ADDR_VAR 0 3
52683: PUSH
52684: LD_INT 1
52686: ST_TO_ADDR
// for i = 1 to array1 do
52687: LD_ADDR_VAR 0 4
52691: PUSH
52692: DOUBLE
52693: LD_INT 1
52695: DEC
52696: ST_TO_ADDR
52697: LD_VAR 0 1
52701: PUSH
52702: FOR_TO
52703: IFFALSE 52741
// if array1 [ i ] <> array2 [ i ] then
52705: LD_VAR 0 1
52709: PUSH
52710: LD_VAR 0 4
52714: ARRAY
52715: PUSH
52716: LD_VAR 0 2
52720: PUSH
52721: LD_VAR 0 4
52725: ARRAY
52726: NONEQUAL
52727: IFFALSE 52739
// begin result := false ;
52729: LD_ADDR_VAR 0 3
52733: PUSH
52734: LD_INT 0
52736: ST_TO_ADDR
// break ;
52737: GO 52741
// end ;
52739: GO 52702
52741: POP
52742: POP
// end ;
52743: LD_VAR 0 3
52747: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52748: LD_INT 0
52750: PPUSH
52751: PPUSH
52752: PPUSH
// pom := GetBase ( fac ) ;
52753: LD_ADDR_VAR 0 5
52757: PUSH
52758: LD_VAR 0 1
52762: PPUSH
52763: CALL_OW 274
52767: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52768: LD_ADDR_VAR 0 4
52772: PUSH
52773: LD_VAR 0 2
52777: PUSH
52778: LD_INT 1
52780: ARRAY
52781: PPUSH
52782: LD_VAR 0 2
52786: PUSH
52787: LD_INT 2
52789: ARRAY
52790: PPUSH
52791: LD_VAR 0 2
52795: PUSH
52796: LD_INT 3
52798: ARRAY
52799: PPUSH
52800: LD_VAR 0 2
52804: PUSH
52805: LD_INT 4
52807: ARRAY
52808: PPUSH
52809: CALL_OW 449
52813: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52814: LD_ADDR_VAR 0 3
52818: PUSH
52819: LD_VAR 0 5
52823: PPUSH
52824: LD_INT 1
52826: PPUSH
52827: CALL_OW 275
52831: PUSH
52832: LD_VAR 0 4
52836: PUSH
52837: LD_INT 1
52839: ARRAY
52840: GREATEREQUAL
52841: PUSH
52842: LD_VAR 0 5
52846: PPUSH
52847: LD_INT 2
52849: PPUSH
52850: CALL_OW 275
52854: PUSH
52855: LD_VAR 0 4
52859: PUSH
52860: LD_INT 2
52862: ARRAY
52863: GREATEREQUAL
52864: AND
52865: PUSH
52866: LD_VAR 0 5
52870: PPUSH
52871: LD_INT 3
52873: PPUSH
52874: CALL_OW 275
52878: PUSH
52879: LD_VAR 0 4
52883: PUSH
52884: LD_INT 3
52886: ARRAY
52887: GREATEREQUAL
52888: AND
52889: ST_TO_ADDR
// end ;
52890: LD_VAR 0 3
52894: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52895: LD_INT 0
52897: PPUSH
52898: PPUSH
52899: PPUSH
52900: PPUSH
// pom := GetBase ( building ) ;
52901: LD_ADDR_VAR 0 3
52905: PUSH
52906: LD_VAR 0 1
52910: PPUSH
52911: CALL_OW 274
52915: ST_TO_ADDR
// if not pom then
52916: LD_VAR 0 3
52920: NOT
52921: IFFALSE 52925
// exit ;
52923: GO 53095
// btype := GetBType ( building ) ;
52925: LD_ADDR_VAR 0 5
52929: PUSH
52930: LD_VAR 0 1
52934: PPUSH
52935: CALL_OW 266
52939: ST_TO_ADDR
// if btype = b_armoury then
52940: LD_VAR 0 5
52944: PUSH
52945: LD_INT 4
52947: EQUAL
52948: IFFALSE 52958
// btype := b_barracks ;
52950: LD_ADDR_VAR 0 5
52954: PUSH
52955: LD_INT 5
52957: ST_TO_ADDR
// if btype = b_depot then
52958: LD_VAR 0 5
52962: PUSH
52963: LD_INT 0
52965: EQUAL
52966: IFFALSE 52976
// btype := b_warehouse ;
52968: LD_ADDR_VAR 0 5
52972: PUSH
52973: LD_INT 1
52975: ST_TO_ADDR
// if btype = b_workshop then
52976: LD_VAR 0 5
52980: PUSH
52981: LD_INT 2
52983: EQUAL
52984: IFFALSE 52994
// btype := b_factory ;
52986: LD_ADDR_VAR 0 5
52990: PUSH
52991: LD_INT 3
52993: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52994: LD_ADDR_VAR 0 4
52998: PUSH
52999: LD_VAR 0 5
53003: PPUSH
53004: LD_VAR 0 1
53008: PPUSH
53009: CALL_OW 248
53013: PPUSH
53014: CALL_OW 450
53018: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53019: LD_ADDR_VAR 0 2
53023: PUSH
53024: LD_VAR 0 3
53028: PPUSH
53029: LD_INT 1
53031: PPUSH
53032: CALL_OW 275
53036: PUSH
53037: LD_VAR 0 4
53041: PUSH
53042: LD_INT 1
53044: ARRAY
53045: GREATEREQUAL
53046: PUSH
53047: LD_VAR 0 3
53051: PPUSH
53052: LD_INT 2
53054: PPUSH
53055: CALL_OW 275
53059: PUSH
53060: LD_VAR 0 4
53064: PUSH
53065: LD_INT 2
53067: ARRAY
53068: GREATEREQUAL
53069: AND
53070: PUSH
53071: LD_VAR 0 3
53075: PPUSH
53076: LD_INT 3
53078: PPUSH
53079: CALL_OW 275
53083: PUSH
53084: LD_VAR 0 4
53088: PUSH
53089: LD_INT 3
53091: ARRAY
53092: GREATEREQUAL
53093: AND
53094: ST_TO_ADDR
// end ;
53095: LD_VAR 0 2
53099: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53100: LD_INT 0
53102: PPUSH
53103: PPUSH
53104: PPUSH
// pom := GetBase ( building ) ;
53105: LD_ADDR_VAR 0 4
53109: PUSH
53110: LD_VAR 0 1
53114: PPUSH
53115: CALL_OW 274
53119: ST_TO_ADDR
// if not pom then
53120: LD_VAR 0 4
53124: NOT
53125: IFFALSE 53129
// exit ;
53127: GO 53230
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53129: LD_ADDR_VAR 0 5
53133: PUSH
53134: LD_VAR 0 2
53138: PPUSH
53139: LD_VAR 0 1
53143: PPUSH
53144: CALL_OW 248
53148: PPUSH
53149: CALL_OW 450
53153: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53154: LD_ADDR_VAR 0 3
53158: PUSH
53159: LD_VAR 0 4
53163: PPUSH
53164: LD_INT 1
53166: PPUSH
53167: CALL_OW 275
53171: PUSH
53172: LD_VAR 0 5
53176: PUSH
53177: LD_INT 1
53179: ARRAY
53180: GREATEREQUAL
53181: PUSH
53182: LD_VAR 0 4
53186: PPUSH
53187: LD_INT 2
53189: PPUSH
53190: CALL_OW 275
53194: PUSH
53195: LD_VAR 0 5
53199: PUSH
53200: LD_INT 2
53202: ARRAY
53203: GREATEREQUAL
53204: AND
53205: PUSH
53206: LD_VAR 0 4
53210: PPUSH
53211: LD_INT 3
53213: PPUSH
53214: CALL_OW 275
53218: PUSH
53219: LD_VAR 0 5
53223: PUSH
53224: LD_INT 3
53226: ARRAY
53227: GREATEREQUAL
53228: AND
53229: ST_TO_ADDR
// end ;
53230: LD_VAR 0 3
53234: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53235: LD_INT 0
53237: PPUSH
53238: PPUSH
53239: PPUSH
53240: PPUSH
53241: PPUSH
53242: PPUSH
53243: PPUSH
53244: PPUSH
53245: PPUSH
53246: PPUSH
53247: PPUSH
// result := false ;
53248: LD_ADDR_VAR 0 8
53252: PUSH
53253: LD_INT 0
53255: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53256: LD_VAR 0 5
53260: NOT
53261: PUSH
53262: LD_VAR 0 1
53266: NOT
53267: OR
53268: PUSH
53269: LD_VAR 0 2
53273: NOT
53274: OR
53275: PUSH
53276: LD_VAR 0 3
53280: NOT
53281: OR
53282: IFFALSE 53286
// exit ;
53284: GO 54100
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53286: LD_ADDR_VAR 0 14
53290: PUSH
53291: LD_VAR 0 1
53295: PPUSH
53296: LD_VAR 0 2
53300: PPUSH
53301: LD_VAR 0 3
53305: PPUSH
53306: LD_VAR 0 4
53310: PPUSH
53311: LD_VAR 0 5
53315: PUSH
53316: LD_INT 1
53318: ARRAY
53319: PPUSH
53320: CALL_OW 248
53324: PPUSH
53325: LD_INT 0
53327: PPUSH
53328: CALL 55337 0 6
53332: ST_TO_ADDR
// if not hexes then
53333: LD_VAR 0 14
53337: NOT
53338: IFFALSE 53342
// exit ;
53340: GO 54100
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53342: LD_ADDR_VAR 0 17
53346: PUSH
53347: LD_VAR 0 5
53351: PPUSH
53352: LD_INT 22
53354: PUSH
53355: LD_VAR 0 13
53359: PPUSH
53360: CALL_OW 255
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 2
53371: PUSH
53372: LD_INT 30
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 30
53384: PUSH
53385: LD_INT 1
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: LIST
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PPUSH
53401: CALL_OW 72
53405: ST_TO_ADDR
// for i = 1 to hexes do
53406: LD_ADDR_VAR 0 9
53410: PUSH
53411: DOUBLE
53412: LD_INT 1
53414: DEC
53415: ST_TO_ADDR
53416: LD_VAR 0 14
53420: PUSH
53421: FOR_TO
53422: IFFALSE 54098
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53424: LD_ADDR_VAR 0 13
53428: PUSH
53429: LD_VAR 0 14
53433: PUSH
53434: LD_VAR 0 9
53438: ARRAY
53439: PUSH
53440: LD_INT 1
53442: ARRAY
53443: PPUSH
53444: LD_VAR 0 14
53448: PUSH
53449: LD_VAR 0 9
53453: ARRAY
53454: PUSH
53455: LD_INT 2
53457: ARRAY
53458: PPUSH
53459: CALL_OW 428
53463: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53464: LD_VAR 0 14
53468: PUSH
53469: LD_VAR 0 9
53473: ARRAY
53474: PUSH
53475: LD_INT 1
53477: ARRAY
53478: PPUSH
53479: LD_VAR 0 14
53483: PUSH
53484: LD_VAR 0 9
53488: ARRAY
53489: PUSH
53490: LD_INT 2
53492: ARRAY
53493: PPUSH
53494: CALL_OW 351
53498: PUSH
53499: LD_VAR 0 14
53503: PUSH
53504: LD_VAR 0 9
53508: ARRAY
53509: PUSH
53510: LD_INT 1
53512: ARRAY
53513: PPUSH
53514: LD_VAR 0 14
53518: PUSH
53519: LD_VAR 0 9
53523: ARRAY
53524: PUSH
53525: LD_INT 2
53527: ARRAY
53528: PPUSH
53529: CALL_OW 488
53533: NOT
53534: OR
53535: PUSH
53536: LD_VAR 0 13
53540: PPUSH
53541: CALL_OW 247
53545: PUSH
53546: LD_INT 3
53548: EQUAL
53549: OR
53550: IFFALSE 53556
// exit ;
53552: POP
53553: POP
53554: GO 54100
// if not tmp then
53556: LD_VAR 0 13
53560: NOT
53561: IFFALSE 53565
// continue ;
53563: GO 53421
// result := true ;
53565: LD_ADDR_VAR 0 8
53569: PUSH
53570: LD_INT 1
53572: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53573: LD_VAR 0 6
53577: PUSH
53578: LD_VAR 0 13
53582: PPUSH
53583: CALL_OW 247
53587: PUSH
53588: LD_INT 2
53590: EQUAL
53591: AND
53592: PUSH
53593: LD_VAR 0 13
53597: PPUSH
53598: CALL_OW 263
53602: PUSH
53603: LD_INT 1
53605: EQUAL
53606: AND
53607: IFFALSE 53771
// begin if IsDrivenBy ( tmp ) then
53609: LD_VAR 0 13
53613: PPUSH
53614: CALL_OW 311
53618: IFFALSE 53622
// continue ;
53620: GO 53421
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53622: LD_VAR 0 6
53626: PPUSH
53627: LD_INT 3
53629: PUSH
53630: LD_INT 60
53632: PUSH
53633: EMPTY
53634: LIST
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 3
53642: PUSH
53643: LD_INT 55
53645: PUSH
53646: EMPTY
53647: LIST
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PPUSH
53657: CALL_OW 72
53661: IFFALSE 53769
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53663: LD_ADDR_VAR 0 18
53667: PUSH
53668: LD_VAR 0 6
53672: PPUSH
53673: LD_INT 3
53675: PUSH
53676: LD_INT 60
53678: PUSH
53679: EMPTY
53680: LIST
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 3
53688: PUSH
53689: LD_INT 55
53691: PUSH
53692: EMPTY
53693: LIST
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PPUSH
53703: CALL_OW 72
53707: PUSH
53708: LD_INT 1
53710: ARRAY
53711: ST_TO_ADDR
// if IsInUnit ( driver ) then
53712: LD_VAR 0 18
53716: PPUSH
53717: CALL_OW 310
53721: IFFALSE 53732
// ComExit ( driver ) ;
53723: LD_VAR 0 18
53727: PPUSH
53728: CALL 78521 0 1
// AddComEnterUnit ( driver , tmp ) ;
53732: LD_VAR 0 18
53736: PPUSH
53737: LD_VAR 0 13
53741: PPUSH
53742: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53746: LD_VAR 0 18
53750: PPUSH
53751: LD_VAR 0 7
53755: PPUSH
53756: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53760: LD_VAR 0 18
53764: PPUSH
53765: CALL_OW 181
// end ; continue ;
53769: GO 53421
// end ; if not cleaners or not tmp in cleaners then
53771: LD_VAR 0 6
53775: NOT
53776: PUSH
53777: LD_VAR 0 13
53781: PUSH
53782: LD_VAR 0 6
53786: IN
53787: NOT
53788: OR
53789: IFFALSE 54096
// begin if dep then
53791: LD_VAR 0 17
53795: IFFALSE 53931
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53797: LD_ADDR_VAR 0 16
53801: PUSH
53802: LD_VAR 0 17
53806: PUSH
53807: LD_INT 1
53809: ARRAY
53810: PPUSH
53811: CALL_OW 250
53815: PPUSH
53816: LD_VAR 0 17
53820: PUSH
53821: LD_INT 1
53823: ARRAY
53824: PPUSH
53825: CALL_OW 254
53829: PPUSH
53830: LD_INT 5
53832: PPUSH
53833: CALL_OW 272
53837: PUSH
53838: LD_VAR 0 17
53842: PUSH
53843: LD_INT 1
53845: ARRAY
53846: PPUSH
53847: CALL_OW 251
53851: PPUSH
53852: LD_VAR 0 17
53856: PUSH
53857: LD_INT 1
53859: ARRAY
53860: PPUSH
53861: CALL_OW 254
53865: PPUSH
53866: LD_INT 5
53868: PPUSH
53869: CALL_OW 273
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53878: LD_VAR 0 16
53882: PUSH
53883: LD_INT 1
53885: ARRAY
53886: PPUSH
53887: LD_VAR 0 16
53891: PUSH
53892: LD_INT 2
53894: ARRAY
53895: PPUSH
53896: CALL_OW 488
53900: IFFALSE 53931
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53902: LD_VAR 0 13
53906: PPUSH
53907: LD_VAR 0 16
53911: PUSH
53912: LD_INT 1
53914: ARRAY
53915: PPUSH
53916: LD_VAR 0 16
53920: PUSH
53921: LD_INT 2
53923: ARRAY
53924: PPUSH
53925: CALL_OW 111
// continue ;
53929: GO 53421
// end ; end ; r := GetDir ( tmp ) ;
53931: LD_ADDR_VAR 0 15
53935: PUSH
53936: LD_VAR 0 13
53940: PPUSH
53941: CALL_OW 254
53945: ST_TO_ADDR
// if r = 5 then
53946: LD_VAR 0 15
53950: PUSH
53951: LD_INT 5
53953: EQUAL
53954: IFFALSE 53964
// r := 0 ;
53956: LD_ADDR_VAR 0 15
53960: PUSH
53961: LD_INT 0
53963: ST_TO_ADDR
// for j = r to 5 do
53964: LD_ADDR_VAR 0 10
53968: PUSH
53969: DOUBLE
53970: LD_VAR 0 15
53974: DEC
53975: ST_TO_ADDR
53976: LD_INT 5
53978: PUSH
53979: FOR_TO
53980: IFFALSE 54094
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53982: LD_ADDR_VAR 0 11
53986: PUSH
53987: LD_VAR 0 13
53991: PPUSH
53992: CALL_OW 250
53996: PPUSH
53997: LD_VAR 0 10
54001: PPUSH
54002: LD_INT 2
54004: PPUSH
54005: CALL_OW 272
54009: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54010: LD_ADDR_VAR 0 12
54014: PUSH
54015: LD_VAR 0 13
54019: PPUSH
54020: CALL_OW 251
54024: PPUSH
54025: LD_VAR 0 10
54029: PPUSH
54030: LD_INT 2
54032: PPUSH
54033: CALL_OW 273
54037: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54038: LD_VAR 0 11
54042: PPUSH
54043: LD_VAR 0 12
54047: PPUSH
54048: CALL_OW 488
54052: PUSH
54053: LD_VAR 0 11
54057: PPUSH
54058: LD_VAR 0 12
54062: PPUSH
54063: CALL_OW 428
54067: NOT
54068: AND
54069: IFFALSE 54092
// begin ComMoveXY ( tmp , _x , _y ) ;
54071: LD_VAR 0 13
54075: PPUSH
54076: LD_VAR 0 11
54080: PPUSH
54081: LD_VAR 0 12
54085: PPUSH
54086: CALL_OW 111
// break ;
54090: GO 54094
// end ; end ;
54092: GO 53979
54094: POP
54095: POP
// end ; end ;
54096: GO 53421
54098: POP
54099: POP
// end ;
54100: LD_VAR 0 8
54104: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54105: LD_INT 0
54107: PPUSH
// result := true ;
54108: LD_ADDR_VAR 0 3
54112: PUSH
54113: LD_INT 1
54115: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54116: LD_VAR 0 2
54120: PUSH
54121: LD_INT 24
54123: DOUBLE
54124: EQUAL
54125: IFTRUE 54135
54127: LD_INT 33
54129: DOUBLE
54130: EQUAL
54131: IFTRUE 54135
54133: GO 54160
54135: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54136: LD_ADDR_VAR 0 3
54140: PUSH
54141: LD_INT 32
54143: PPUSH
54144: LD_VAR 0 1
54148: PPUSH
54149: CALL_OW 321
54153: PUSH
54154: LD_INT 2
54156: EQUAL
54157: ST_TO_ADDR
54158: GO 54480
54160: LD_INT 20
54162: DOUBLE
54163: EQUAL
54164: IFTRUE 54168
54166: GO 54193
54168: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54169: LD_ADDR_VAR 0 3
54173: PUSH
54174: LD_INT 6
54176: PPUSH
54177: LD_VAR 0 1
54181: PPUSH
54182: CALL_OW 321
54186: PUSH
54187: LD_INT 2
54189: EQUAL
54190: ST_TO_ADDR
54191: GO 54480
54193: LD_INT 22
54195: DOUBLE
54196: EQUAL
54197: IFTRUE 54207
54199: LD_INT 36
54201: DOUBLE
54202: EQUAL
54203: IFTRUE 54207
54205: GO 54232
54207: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54208: LD_ADDR_VAR 0 3
54212: PUSH
54213: LD_INT 15
54215: PPUSH
54216: LD_VAR 0 1
54220: PPUSH
54221: CALL_OW 321
54225: PUSH
54226: LD_INT 2
54228: EQUAL
54229: ST_TO_ADDR
54230: GO 54480
54232: LD_INT 30
54234: DOUBLE
54235: EQUAL
54236: IFTRUE 54240
54238: GO 54265
54240: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54241: LD_ADDR_VAR 0 3
54245: PUSH
54246: LD_INT 20
54248: PPUSH
54249: LD_VAR 0 1
54253: PPUSH
54254: CALL_OW 321
54258: PUSH
54259: LD_INT 2
54261: EQUAL
54262: ST_TO_ADDR
54263: GO 54480
54265: LD_INT 28
54267: DOUBLE
54268: EQUAL
54269: IFTRUE 54279
54271: LD_INT 21
54273: DOUBLE
54274: EQUAL
54275: IFTRUE 54279
54277: GO 54304
54279: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54280: LD_ADDR_VAR 0 3
54284: PUSH
54285: LD_INT 21
54287: PPUSH
54288: LD_VAR 0 1
54292: PPUSH
54293: CALL_OW 321
54297: PUSH
54298: LD_INT 2
54300: EQUAL
54301: ST_TO_ADDR
54302: GO 54480
54304: LD_INT 16
54306: DOUBLE
54307: EQUAL
54308: IFTRUE 54312
54310: GO 54339
54312: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54313: LD_ADDR_VAR 0 3
54317: PUSH
54318: LD_EXP 77
54322: PPUSH
54323: LD_VAR 0 1
54327: PPUSH
54328: CALL_OW 321
54332: PUSH
54333: LD_INT 2
54335: EQUAL
54336: ST_TO_ADDR
54337: GO 54480
54339: LD_INT 19
54341: DOUBLE
54342: EQUAL
54343: IFTRUE 54353
54345: LD_INT 23
54347: DOUBLE
54348: EQUAL
54349: IFTRUE 54353
54351: GO 54380
54353: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54354: LD_ADDR_VAR 0 3
54358: PUSH
54359: LD_EXP 76
54363: PPUSH
54364: LD_VAR 0 1
54368: PPUSH
54369: CALL_OW 321
54373: PUSH
54374: LD_INT 2
54376: EQUAL
54377: ST_TO_ADDR
54378: GO 54480
54380: LD_INT 17
54382: DOUBLE
54383: EQUAL
54384: IFTRUE 54388
54386: GO 54413
54388: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54389: LD_ADDR_VAR 0 3
54393: PUSH
54394: LD_INT 39
54396: PPUSH
54397: LD_VAR 0 1
54401: PPUSH
54402: CALL_OW 321
54406: PUSH
54407: LD_INT 2
54409: EQUAL
54410: ST_TO_ADDR
54411: GO 54480
54413: LD_INT 18
54415: DOUBLE
54416: EQUAL
54417: IFTRUE 54421
54419: GO 54446
54421: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54422: LD_ADDR_VAR 0 3
54426: PUSH
54427: LD_INT 40
54429: PPUSH
54430: LD_VAR 0 1
54434: PPUSH
54435: CALL_OW 321
54439: PUSH
54440: LD_INT 2
54442: EQUAL
54443: ST_TO_ADDR
54444: GO 54480
54446: LD_INT 27
54448: DOUBLE
54449: EQUAL
54450: IFTRUE 54454
54452: GO 54479
54454: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54455: LD_ADDR_VAR 0 3
54459: PUSH
54460: LD_INT 35
54462: PPUSH
54463: LD_VAR 0 1
54467: PPUSH
54468: CALL_OW 321
54472: PUSH
54473: LD_INT 2
54475: EQUAL
54476: ST_TO_ADDR
54477: GO 54480
54479: POP
// end ;
54480: LD_VAR 0 3
54484: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54485: LD_INT 0
54487: PPUSH
54488: PPUSH
54489: PPUSH
54490: PPUSH
54491: PPUSH
54492: PPUSH
54493: PPUSH
54494: PPUSH
54495: PPUSH
54496: PPUSH
54497: PPUSH
// result := false ;
54498: LD_ADDR_VAR 0 6
54502: PUSH
54503: LD_INT 0
54505: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54506: LD_VAR 0 1
54510: NOT
54511: PUSH
54512: LD_VAR 0 1
54516: PPUSH
54517: CALL_OW 266
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: LD_INT 1
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: IN
54532: NOT
54533: OR
54534: PUSH
54535: LD_VAR 0 2
54539: NOT
54540: OR
54541: PUSH
54542: LD_VAR 0 5
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: LD_INT 2
54555: PUSH
54556: LD_INT 3
54558: PUSH
54559: LD_INT 4
54561: PUSH
54562: LD_INT 5
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: IN
54573: NOT
54574: OR
54575: PUSH
54576: LD_VAR 0 3
54580: PPUSH
54581: LD_VAR 0 4
54585: PPUSH
54586: CALL_OW 488
54590: NOT
54591: OR
54592: IFFALSE 54596
// exit ;
54594: GO 55332
// side := GetSide ( depot ) ;
54596: LD_ADDR_VAR 0 9
54600: PUSH
54601: LD_VAR 0 1
54605: PPUSH
54606: CALL_OW 255
54610: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54611: LD_VAR 0 9
54615: PPUSH
54616: LD_VAR 0 2
54620: PPUSH
54621: CALL 54105 0 2
54625: NOT
54626: IFFALSE 54630
// exit ;
54628: GO 55332
// pom := GetBase ( depot ) ;
54630: LD_ADDR_VAR 0 10
54634: PUSH
54635: LD_VAR 0 1
54639: PPUSH
54640: CALL_OW 274
54644: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54645: LD_ADDR_VAR 0 11
54649: PUSH
54650: LD_VAR 0 2
54654: PPUSH
54655: LD_VAR 0 1
54659: PPUSH
54660: CALL_OW 248
54664: PPUSH
54665: CALL_OW 450
54669: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54670: LD_VAR 0 10
54674: PPUSH
54675: LD_INT 1
54677: PPUSH
54678: CALL_OW 275
54682: PUSH
54683: LD_VAR 0 11
54687: PUSH
54688: LD_INT 1
54690: ARRAY
54691: GREATEREQUAL
54692: PUSH
54693: LD_VAR 0 10
54697: PPUSH
54698: LD_INT 2
54700: PPUSH
54701: CALL_OW 275
54705: PUSH
54706: LD_VAR 0 11
54710: PUSH
54711: LD_INT 2
54713: ARRAY
54714: GREATEREQUAL
54715: AND
54716: PUSH
54717: LD_VAR 0 10
54721: PPUSH
54722: LD_INT 3
54724: PPUSH
54725: CALL_OW 275
54729: PUSH
54730: LD_VAR 0 11
54734: PUSH
54735: LD_INT 3
54737: ARRAY
54738: GREATEREQUAL
54739: AND
54740: NOT
54741: IFFALSE 54745
// exit ;
54743: GO 55332
// if GetBType ( depot ) = b_depot then
54745: LD_VAR 0 1
54749: PPUSH
54750: CALL_OW 266
54754: PUSH
54755: LD_INT 0
54757: EQUAL
54758: IFFALSE 54770
// dist := 28 else
54760: LD_ADDR_VAR 0 14
54764: PUSH
54765: LD_INT 28
54767: ST_TO_ADDR
54768: GO 54778
// dist := 36 ;
54770: LD_ADDR_VAR 0 14
54774: PUSH
54775: LD_INT 36
54777: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54778: LD_VAR 0 1
54782: PPUSH
54783: LD_VAR 0 3
54787: PPUSH
54788: LD_VAR 0 4
54792: PPUSH
54793: CALL_OW 297
54797: PUSH
54798: LD_VAR 0 14
54802: GREATER
54803: IFFALSE 54807
// exit ;
54805: GO 55332
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54807: LD_ADDR_VAR 0 12
54811: PUSH
54812: LD_VAR 0 2
54816: PPUSH
54817: LD_VAR 0 3
54821: PPUSH
54822: LD_VAR 0 4
54826: PPUSH
54827: LD_VAR 0 5
54831: PPUSH
54832: LD_VAR 0 1
54836: PPUSH
54837: CALL_OW 248
54841: PPUSH
54842: LD_INT 0
54844: PPUSH
54845: CALL 55337 0 6
54849: ST_TO_ADDR
// if not hexes then
54850: LD_VAR 0 12
54854: NOT
54855: IFFALSE 54859
// exit ;
54857: GO 55332
// hex := GetHexInfo ( x , y ) ;
54859: LD_ADDR_VAR 0 15
54863: PUSH
54864: LD_VAR 0 3
54868: PPUSH
54869: LD_VAR 0 4
54873: PPUSH
54874: CALL_OW 546
54878: ST_TO_ADDR
// if hex [ 1 ] then
54879: LD_VAR 0 15
54883: PUSH
54884: LD_INT 1
54886: ARRAY
54887: IFFALSE 54891
// exit ;
54889: GO 55332
// height := hex [ 2 ] ;
54891: LD_ADDR_VAR 0 13
54895: PUSH
54896: LD_VAR 0 15
54900: PUSH
54901: LD_INT 2
54903: ARRAY
54904: ST_TO_ADDR
// for i = 1 to hexes do
54905: LD_ADDR_VAR 0 7
54909: PUSH
54910: DOUBLE
54911: LD_INT 1
54913: DEC
54914: ST_TO_ADDR
54915: LD_VAR 0 12
54919: PUSH
54920: FOR_TO
54921: IFFALSE 55251
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54923: LD_VAR 0 12
54927: PUSH
54928: LD_VAR 0 7
54932: ARRAY
54933: PUSH
54934: LD_INT 1
54936: ARRAY
54937: PPUSH
54938: LD_VAR 0 12
54942: PUSH
54943: LD_VAR 0 7
54947: ARRAY
54948: PUSH
54949: LD_INT 2
54951: ARRAY
54952: PPUSH
54953: CALL_OW 488
54957: NOT
54958: PUSH
54959: LD_VAR 0 12
54963: PUSH
54964: LD_VAR 0 7
54968: ARRAY
54969: PUSH
54970: LD_INT 1
54972: ARRAY
54973: PPUSH
54974: LD_VAR 0 12
54978: PUSH
54979: LD_VAR 0 7
54983: ARRAY
54984: PUSH
54985: LD_INT 2
54987: ARRAY
54988: PPUSH
54989: CALL_OW 428
54993: PUSH
54994: LD_INT 0
54996: GREATER
54997: OR
54998: PUSH
54999: LD_VAR 0 12
55003: PUSH
55004: LD_VAR 0 7
55008: ARRAY
55009: PUSH
55010: LD_INT 1
55012: ARRAY
55013: PPUSH
55014: LD_VAR 0 12
55018: PUSH
55019: LD_VAR 0 7
55023: ARRAY
55024: PUSH
55025: LD_INT 2
55027: ARRAY
55028: PPUSH
55029: CALL_OW 351
55033: OR
55034: IFFALSE 55040
// exit ;
55036: POP
55037: POP
55038: GO 55332
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55040: LD_ADDR_VAR 0 8
55044: PUSH
55045: LD_VAR 0 12
55049: PUSH
55050: LD_VAR 0 7
55054: ARRAY
55055: PUSH
55056: LD_INT 1
55058: ARRAY
55059: PPUSH
55060: LD_VAR 0 12
55064: PUSH
55065: LD_VAR 0 7
55069: ARRAY
55070: PUSH
55071: LD_INT 2
55073: ARRAY
55074: PPUSH
55075: CALL_OW 546
55079: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55080: LD_VAR 0 8
55084: PUSH
55085: LD_INT 1
55087: ARRAY
55088: PUSH
55089: LD_VAR 0 8
55093: PUSH
55094: LD_INT 2
55096: ARRAY
55097: PUSH
55098: LD_VAR 0 13
55102: PUSH
55103: LD_INT 2
55105: PLUS
55106: GREATER
55107: OR
55108: PUSH
55109: LD_VAR 0 8
55113: PUSH
55114: LD_INT 2
55116: ARRAY
55117: PUSH
55118: LD_VAR 0 13
55122: PUSH
55123: LD_INT 2
55125: MINUS
55126: LESS
55127: OR
55128: PUSH
55129: LD_VAR 0 8
55133: PUSH
55134: LD_INT 3
55136: ARRAY
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: LD_INT 8
55143: PUSH
55144: LD_INT 9
55146: PUSH
55147: LD_INT 10
55149: PUSH
55150: LD_INT 11
55152: PUSH
55153: LD_INT 12
55155: PUSH
55156: LD_INT 13
55158: PUSH
55159: LD_INT 16
55161: PUSH
55162: LD_INT 17
55164: PUSH
55165: LD_INT 18
55167: PUSH
55168: LD_INT 19
55170: PUSH
55171: LD_INT 20
55173: PUSH
55174: LD_INT 21
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: IN
55192: NOT
55193: OR
55194: PUSH
55195: LD_VAR 0 8
55199: PUSH
55200: LD_INT 5
55202: ARRAY
55203: NOT
55204: OR
55205: PUSH
55206: LD_VAR 0 8
55210: PUSH
55211: LD_INT 6
55213: ARRAY
55214: PUSH
55215: LD_INT 1
55217: PUSH
55218: LD_INT 2
55220: PUSH
55221: LD_INT 7
55223: PUSH
55224: LD_INT 9
55226: PUSH
55227: LD_INT 10
55229: PUSH
55230: LD_INT 11
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: IN
55241: NOT
55242: OR
55243: IFFALSE 55249
// exit ;
55245: POP
55246: POP
55247: GO 55332
// end ;
55249: GO 54920
55251: POP
55252: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55253: LD_VAR 0 9
55257: PPUSH
55258: LD_VAR 0 3
55262: PPUSH
55263: LD_VAR 0 4
55267: PPUSH
55268: LD_INT 20
55270: PPUSH
55271: CALL 47278 0 4
55275: PUSH
55276: LD_INT 4
55278: ARRAY
55279: IFFALSE 55283
// exit ;
55281: GO 55332
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55283: LD_VAR 0 2
55287: PUSH
55288: LD_INT 29
55290: PUSH
55291: LD_INT 30
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: IN
55298: PUSH
55299: LD_VAR 0 3
55303: PPUSH
55304: LD_VAR 0 4
55308: PPUSH
55309: LD_VAR 0 9
55313: PPUSH
55314: CALL_OW 440
55318: NOT
55319: AND
55320: IFFALSE 55324
// exit ;
55322: GO 55332
// result := true ;
55324: LD_ADDR_VAR 0 6
55328: PUSH
55329: LD_INT 1
55331: ST_TO_ADDR
// end ;
55332: LD_VAR 0 6
55336: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55337: LD_INT 0
55339: PPUSH
55340: PPUSH
55341: PPUSH
55342: PPUSH
55343: PPUSH
55344: PPUSH
55345: PPUSH
55346: PPUSH
55347: PPUSH
55348: PPUSH
55349: PPUSH
55350: PPUSH
55351: PPUSH
55352: PPUSH
55353: PPUSH
55354: PPUSH
55355: PPUSH
55356: PPUSH
55357: PPUSH
55358: PPUSH
55359: PPUSH
55360: PPUSH
55361: PPUSH
55362: PPUSH
55363: PPUSH
55364: PPUSH
55365: PPUSH
55366: PPUSH
55367: PPUSH
55368: PPUSH
55369: PPUSH
55370: PPUSH
55371: PPUSH
55372: PPUSH
55373: PPUSH
55374: PPUSH
55375: PPUSH
55376: PPUSH
55377: PPUSH
55378: PPUSH
55379: PPUSH
55380: PPUSH
55381: PPUSH
55382: PPUSH
55383: PPUSH
55384: PPUSH
55385: PPUSH
55386: PPUSH
55387: PPUSH
55388: PPUSH
55389: PPUSH
55390: PPUSH
55391: PPUSH
55392: PPUSH
55393: PPUSH
55394: PPUSH
55395: PPUSH
55396: PPUSH
// result = [ ] ;
55397: LD_ADDR_VAR 0 7
55401: PUSH
55402: EMPTY
55403: ST_TO_ADDR
// temp_list = [ ] ;
55404: LD_ADDR_VAR 0 9
55408: PUSH
55409: EMPTY
55410: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55411: LD_VAR 0 4
55415: PUSH
55416: LD_INT 0
55418: PUSH
55419: LD_INT 1
55421: PUSH
55422: LD_INT 2
55424: PUSH
55425: LD_INT 3
55427: PUSH
55428: LD_INT 4
55430: PUSH
55431: LD_INT 5
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: IN
55442: NOT
55443: PUSH
55444: LD_VAR 0 1
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: IN
55459: PUSH
55460: LD_VAR 0 5
55464: PUSH
55465: LD_INT 1
55467: PUSH
55468: LD_INT 2
55470: PUSH
55471: LD_INT 3
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: LIST
55478: IN
55479: NOT
55480: AND
55481: OR
55482: IFFALSE 55486
// exit ;
55484: GO 73877
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55486: LD_VAR 0 1
55490: PUSH
55491: LD_INT 6
55493: PUSH
55494: LD_INT 7
55496: PUSH
55497: LD_INT 8
55499: PUSH
55500: LD_INT 13
55502: PUSH
55503: LD_INT 12
55505: PUSH
55506: LD_INT 15
55508: PUSH
55509: LD_INT 11
55511: PUSH
55512: LD_INT 14
55514: PUSH
55515: LD_INT 10
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: IN
55529: IFFALSE 55539
// btype = b_lab ;
55531: LD_ADDR_VAR 0 1
55535: PUSH
55536: LD_INT 6
55538: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55539: LD_VAR 0 6
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: LD_INT 1
55549: PUSH
55550: LD_INT 2
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: LIST
55557: IN
55558: NOT
55559: PUSH
55560: LD_VAR 0 1
55564: PUSH
55565: LD_INT 0
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: LD_INT 2
55573: PUSH
55574: LD_INT 3
55576: PUSH
55577: LD_INT 6
55579: PUSH
55580: LD_INT 36
55582: PUSH
55583: LD_INT 4
55585: PUSH
55586: LD_INT 5
55588: PUSH
55589: LD_INT 31
55591: PUSH
55592: LD_INT 32
55594: PUSH
55595: LD_INT 33
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: IN
55611: NOT
55612: PUSH
55613: LD_VAR 0 6
55617: PUSH
55618: LD_INT 1
55620: EQUAL
55621: AND
55622: OR
55623: PUSH
55624: LD_VAR 0 1
55628: PUSH
55629: LD_INT 2
55631: PUSH
55632: LD_INT 3
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: IN
55639: NOT
55640: PUSH
55641: LD_VAR 0 6
55645: PUSH
55646: LD_INT 2
55648: EQUAL
55649: AND
55650: OR
55651: IFFALSE 55661
// mode = 0 ;
55653: LD_ADDR_VAR 0 6
55657: PUSH
55658: LD_INT 0
55660: ST_TO_ADDR
// case mode of 0 :
55661: LD_VAR 0 6
55665: PUSH
55666: LD_INT 0
55668: DOUBLE
55669: EQUAL
55670: IFTRUE 55674
55672: GO 67127
55674: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55675: LD_ADDR_VAR 0 11
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 1
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: LD_INT 0
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 0
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 1
55744: NEG
55745: PUSH
55746: LD_INT 1
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 1
55756: NEG
55757: PUSH
55758: LD_INT 2
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: LD_INT 2
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: LD_INT 2
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: LD_INT 2
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 1
55821: PUSH
55822: LD_INT 3
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 0
55831: PUSH
55832: LD_INT 3
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: NEG
55842: PUSH
55843: LD_INT 2
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55868: LD_ADDR_VAR 0 12
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: LD_INT 1
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 1
55949: PUSH
55950: LD_INT 1
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 2
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 2
55970: PUSH
55971: LD_INT 1
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: NEG
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 2
55991: NEG
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 2
56002: NEG
56003: PUSH
56004: LD_INT 1
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 2
56014: NEG
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 3
56025: NEG
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 3
56036: NEG
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56064: LD_ADDR_VAR 0 13
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: LD_INT 1
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 1
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 1
56102: PUSH
56103: LD_INT 1
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: LD_INT 1
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 1
56122: NEG
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 1
56145: NEG
56146: PUSH
56147: LD_INT 2
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 2
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 2
56167: PUSH
56168: LD_INT 2
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 1
56177: PUSH
56178: LD_INT 2
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 2
56187: NEG
56188: PUSH
56189: LD_INT 1
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 2
56199: NEG
56200: PUSH
56201: LD_INT 2
56203: NEG
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 2
56211: NEG
56212: PUSH
56213: LD_INT 3
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 3
56223: NEG
56224: PUSH
56225: LD_INT 2
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 3
56235: NEG
56236: PUSH
56237: LD_INT 3
56239: NEG
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56263: LD_ADDR_VAR 0 14
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: LD_INT 0
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: LD_INT 1
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: LD_INT 1
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 1
56321: NEG
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 1
56332: NEG
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: LD_INT 2
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: LD_INT 2
56359: NEG
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: LD_INT 1
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: LD_INT 2
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: LD_INT 2
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 1
56398: NEG
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 1
56409: NEG
56410: PUSH
56411: LD_INT 3
56413: NEG
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: LD_INT 3
56424: NEG
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: LD_INT 2
56435: NEG
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56459: LD_ADDR_VAR 0 15
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 1
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: PUSH
56519: LD_INT 0
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 1
56528: NEG
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 2
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 2
56561: PUSH
56562: LD_INT 1
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 1
56571: NEG
56572: PUSH
56573: LD_INT 1
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 2
56582: NEG
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 2
56593: NEG
56594: PUSH
56595: LD_INT 1
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 2
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 3
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 3
56626: PUSH
56627: LD_INT 1
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56652: LD_ADDR_VAR 0 16
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: LD_INT 1
56672: NEG
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 1
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 0
56700: PUSH
56701: LD_INT 1
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 1
56710: NEG
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: LD_INT 2
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 2
56745: PUSH
56746: LD_INT 1
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 2
56755: PUSH
56756: LD_INT 2
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: LD_INT 2
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 2
56775: NEG
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 2
56787: NEG
56788: PUSH
56789: LD_INT 2
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 3
56799: PUSH
56800: LD_INT 2
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 3
56809: PUSH
56810: LD_INT 3
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 2
56819: PUSH
56820: LD_INT 3
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56845: LD_ADDR_VAR 0 17
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: LD_INT 1
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: LD_INT 1
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 1
56903: NEG
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: LD_INT 1
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 1
56926: NEG
56927: PUSH
56928: LD_INT 2
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: LD_INT 2
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: LD_INT 1
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 2
56960: PUSH
56961: LD_INT 0
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 2
56970: PUSH
56971: LD_INT 1
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 2
56980: PUSH
56981: LD_INT 2
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 1
56990: PUSH
56991: LD_INT 2
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 0
57000: PUSH
57001: LD_INT 2
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 2
57021: NEG
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 2
57032: NEG
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 2
57044: NEG
57045: PUSH
57046: LD_INT 2
57048: NEG
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57075: LD_ADDR_VAR 0 18
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 0
57092: PUSH
57093: LD_INT 1
57095: NEG
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 1
57103: PUSH
57104: LD_INT 0
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: LD_INT 1
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 0
57123: PUSH
57124: LD_INT 1
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 1
57133: NEG
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: LD_INT 1
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 1
57156: NEG
57157: PUSH
57158: LD_INT 2
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: LD_INT 2
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 1
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 2
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 2
57200: PUSH
57201: LD_INT 1
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 2
57210: PUSH
57211: LD_INT 2
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 1
57220: PUSH
57221: LD_INT 2
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: LD_INT 2
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: NEG
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 2
57251: NEG
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 2
57262: NEG
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 2
57274: NEG
57275: PUSH
57276: LD_INT 2
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57305: LD_ADDR_VAR 0 19
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: LD_INT 0
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: LD_INT 1
57325: NEG
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: LD_INT 1
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 1
57363: NEG
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: LD_INT 1
57378: NEG
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 1
57386: NEG
57387: PUSH
57388: LD_INT 2
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 0
57398: PUSH
57399: LD_INT 2
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 1
57409: PUSH
57410: LD_INT 1
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 2
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 2
57430: PUSH
57431: LD_INT 1
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 2
57440: PUSH
57441: LD_INT 2
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 1
57450: PUSH
57451: LD_INT 2
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: LD_INT 2
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: NEG
57471: PUSH
57472: LD_INT 1
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 2
57481: NEG
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 2
57492: NEG
57493: PUSH
57494: LD_INT 1
57496: NEG
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 2
57504: NEG
57505: PUSH
57506: LD_INT 2
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57535: LD_ADDR_VAR 0 20
57539: PUSH
57540: LD_INT 0
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: LD_INT 1
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 1
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 1
57573: PUSH
57574: LD_INT 1
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 0
57583: PUSH
57584: LD_INT 1
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 1
57593: NEG
57594: PUSH
57595: LD_INT 0
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: LD_INT 1
57608: NEG
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: LD_INT 2
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: LD_INT 2
57631: NEG
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 1
57639: PUSH
57640: LD_INT 1
57642: NEG
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 2
57650: PUSH
57651: LD_INT 0
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 2
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 2
57670: PUSH
57671: LD_INT 2
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: PUSH
57681: LD_INT 2
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 0
57690: PUSH
57691: LD_INT 2
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 1
57700: NEG
57701: PUSH
57702: LD_INT 1
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 2
57711: NEG
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 2
57722: NEG
57723: PUSH
57724: LD_INT 1
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 2
57734: NEG
57735: PUSH
57736: LD_INT 2
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57765: LD_ADDR_VAR 0 21
57769: PUSH
57770: LD_INT 0
57772: PUSH
57773: LD_INT 0
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: LD_INT 1
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 1
57803: PUSH
57804: LD_INT 1
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 0
57813: PUSH
57814: LD_INT 1
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 1
57823: NEG
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 1
57834: NEG
57835: PUSH
57836: LD_INT 1
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: LD_INT 2
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: LD_INT 2
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: PUSH
57870: LD_INT 1
57872: NEG
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 2
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 2
57890: PUSH
57891: LD_INT 1
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 2
57900: PUSH
57901: LD_INT 2
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 1
57910: PUSH
57911: LD_INT 2
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: LD_INT 2
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: LD_INT 1
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 2
57941: NEG
57942: PUSH
57943: LD_INT 0
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 2
57952: NEG
57953: PUSH
57954: LD_INT 1
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 2
57964: NEG
57965: PUSH
57966: LD_INT 2
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57995: LD_ADDR_VAR 0 22
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 1
58033: PUSH
58034: LD_INT 1
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 0
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 1
58053: NEG
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: LD_INT 1
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: LD_INT 2
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 1
58099: PUSH
58100: LD_INT 1
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 2
58110: PUSH
58111: LD_INT 0
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 2
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 2
58130: PUSH
58131: LD_INT 2
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 1
58140: PUSH
58141: LD_INT 2
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: LD_INT 2
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 1
58160: NEG
58161: PUSH
58162: LD_INT 1
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 2
58171: NEG
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 2
58182: NEG
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 2
58194: NEG
58195: PUSH
58196: LD_INT 2
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58225: LD_ADDR_VAR 0 23
58229: PUSH
58230: LD_INT 0
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 0
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 1
58253: PUSH
58254: LD_INT 0
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 1
58263: PUSH
58264: LD_INT 1
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: LD_INT 1
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 1
58283: NEG
58284: PUSH
58285: LD_INT 0
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 1
58294: NEG
58295: PUSH
58296: LD_INT 1
58298: NEG
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: LD_INT 2
58310: NEG
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 0
58318: PUSH
58319: LD_INT 2
58321: NEG
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 1
58329: PUSH
58330: LD_INT 1
58332: NEG
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 2
58340: PUSH
58341: LD_INT 0
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 2
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 2
58360: PUSH
58361: LD_INT 2
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 1
58370: PUSH
58371: LD_INT 2
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: LD_INT 2
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 1
58390: NEG
58391: PUSH
58392: LD_INT 1
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 2
58401: NEG
58402: PUSH
58403: LD_INT 0
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 2
58412: NEG
58413: PUSH
58414: LD_INT 1
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 2
58424: NEG
58425: PUSH
58426: LD_INT 2
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 2
58436: NEG
58437: PUSH
58438: LD_INT 3
58440: NEG
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 1
58448: NEG
58449: PUSH
58450: LD_INT 3
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 1
58460: PUSH
58461: LD_INT 2
58463: NEG
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 2
58471: PUSH
58472: LD_INT 1
58474: NEG
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58505: LD_ADDR_VAR 0 24
58509: PUSH
58510: LD_INT 0
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 0
58522: PUSH
58523: LD_INT 1
58525: NEG
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 1
58533: PUSH
58534: LD_INT 0
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 1
58543: PUSH
58544: LD_INT 1
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 0
58553: PUSH
58554: LD_INT 1
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 1
58563: NEG
58564: PUSH
58565: LD_INT 0
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 1
58574: NEG
58575: PUSH
58576: LD_INT 1
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 1
58586: NEG
58587: PUSH
58588: LD_INT 2
58590: NEG
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: LD_INT 2
58601: NEG
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 1
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 2
58620: PUSH
58621: LD_INT 0
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 2
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 2
58640: PUSH
58641: LD_INT 2
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 1
58650: PUSH
58651: LD_INT 2
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 0
58660: PUSH
58661: LD_INT 2
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 1
58670: NEG
58671: PUSH
58672: LD_INT 1
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 2
58681: NEG
58682: PUSH
58683: LD_INT 0
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 2
58692: NEG
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 2
58704: NEG
58705: PUSH
58706: LD_INT 2
58708: NEG
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 1
58716: PUSH
58717: LD_INT 2
58719: NEG
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 2
58727: PUSH
58728: LD_INT 1
58730: NEG
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 3
58738: PUSH
58739: LD_INT 1
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 3
58748: PUSH
58749: LD_INT 2
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58781: LD_ADDR_VAR 0 25
58785: PUSH
58786: LD_INT 0
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: LD_INT 1
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: PUSH
58810: LD_INT 0
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 1
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 0
58829: PUSH
58830: LD_INT 1
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 1
58839: NEG
58840: PUSH
58841: LD_INT 0
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 1
58850: NEG
58851: PUSH
58852: LD_INT 1
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 1
58862: NEG
58863: PUSH
58864: LD_INT 2
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: LD_INT 2
58877: NEG
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 1
58885: PUSH
58886: LD_INT 1
58888: NEG
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 2
58896: PUSH
58897: LD_INT 0
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 2
58906: PUSH
58907: LD_INT 1
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 2
58916: PUSH
58917: LD_INT 2
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 1
58926: PUSH
58927: LD_INT 2
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 0
58936: PUSH
58937: LD_INT 2
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 1
58946: NEG
58947: PUSH
58948: LD_INT 1
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 2
58957: NEG
58958: PUSH
58959: LD_INT 0
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 2
58968: NEG
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 2
58980: NEG
58981: PUSH
58982: LD_INT 2
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 3
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 3
59002: PUSH
59003: LD_INT 2
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 2
59012: PUSH
59013: LD_INT 3
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 1
59022: PUSH
59023: LD_INT 3
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59055: LD_ADDR_VAR 0 26
59059: PUSH
59060: LD_INT 0
59062: PUSH
59063: LD_INT 0
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 0
59072: PUSH
59073: LD_INT 1
59075: NEG
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 1
59083: PUSH
59084: LD_INT 0
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 1
59093: PUSH
59094: LD_INT 1
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 0
59103: PUSH
59104: LD_INT 1
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 1
59113: NEG
59114: PUSH
59115: LD_INT 0
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 1
59124: NEG
59125: PUSH
59126: LD_INT 1
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 1
59136: NEG
59137: PUSH
59138: LD_INT 2
59140: NEG
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: LD_INT 2
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 1
59159: PUSH
59160: LD_INT 1
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 2
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 2
59180: PUSH
59181: LD_INT 1
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 2
59190: PUSH
59191: LD_INT 2
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 1
59200: PUSH
59201: LD_INT 2
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 0
59210: PUSH
59211: LD_INT 2
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: LD_INT 1
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 2
59231: NEG
59232: PUSH
59233: LD_INT 0
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 2
59242: NEG
59243: PUSH
59244: LD_INT 1
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 2
59254: NEG
59255: PUSH
59256: LD_INT 2
59258: NEG
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 2
59266: PUSH
59267: LD_INT 3
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 1
59276: PUSH
59277: LD_INT 3
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 1
59286: NEG
59287: PUSH
59288: LD_INT 2
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 2
59297: NEG
59298: PUSH
59299: LD_INT 1
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59331: LD_ADDR_VAR 0 27
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: LD_INT 0
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 0
59348: PUSH
59349: LD_INT 1
59351: NEG
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 1
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 1
59369: PUSH
59370: LD_INT 1
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 0
59379: PUSH
59380: LD_INT 1
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 1
59389: NEG
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 1
59400: NEG
59401: PUSH
59402: LD_INT 1
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 1
59412: NEG
59413: PUSH
59414: LD_INT 2
59416: NEG
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 0
59424: PUSH
59425: LD_INT 2
59427: NEG
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 1
59435: PUSH
59436: LD_INT 1
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 2
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 2
59456: PUSH
59457: LD_INT 1
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 2
59466: PUSH
59467: LD_INT 2
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 1
59476: PUSH
59477: LD_INT 2
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 0
59486: PUSH
59487: LD_INT 2
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: LD_INT 1
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 2
59507: NEG
59508: PUSH
59509: LD_INT 0
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 2
59518: NEG
59519: PUSH
59520: LD_INT 1
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 2
59530: NEG
59531: PUSH
59532: LD_INT 2
59534: NEG
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 1
59542: NEG
59543: PUSH
59544: LD_INT 2
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 2
59553: NEG
59554: PUSH
59555: LD_INT 1
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 3
59564: NEG
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 3
59576: NEG
59577: PUSH
59578: LD_INT 2
59580: NEG
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59611: LD_ADDR_VAR 0 28
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: LD_INT 0
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 0
59628: PUSH
59629: LD_INT 1
59631: NEG
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 1
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 1
59649: PUSH
59650: LD_INT 1
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 0
59659: PUSH
59660: LD_INT 1
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 1
59669: NEG
59670: PUSH
59671: LD_INT 0
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 1
59680: NEG
59681: PUSH
59682: LD_INT 1
59684: NEG
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 1
59692: NEG
59693: PUSH
59694: LD_INT 2
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 0
59704: PUSH
59705: LD_INT 2
59707: NEG
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 1
59715: PUSH
59716: LD_INT 1
59718: NEG
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 2
59726: PUSH
59727: LD_INT 0
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 2
59736: PUSH
59737: LD_INT 1
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 2
59746: PUSH
59747: LD_INT 2
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 1
59756: PUSH
59757: LD_INT 2
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 0
59766: PUSH
59767: LD_INT 2
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 1
59776: NEG
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 2
59787: NEG
59788: PUSH
59789: LD_INT 0
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 2
59798: NEG
59799: PUSH
59800: LD_INT 1
59802: NEG
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 2
59810: NEG
59811: PUSH
59812: LD_INT 2
59814: NEG
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 2
59822: NEG
59823: PUSH
59824: LD_INT 3
59826: NEG
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: NEG
59835: PUSH
59836: LD_INT 3
59838: NEG
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 3
59846: NEG
59847: PUSH
59848: LD_INT 1
59850: NEG
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 3
59858: NEG
59859: PUSH
59860: LD_INT 2
59862: NEG
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59893: LD_ADDR_VAR 0 29
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 0
59910: PUSH
59911: LD_INT 1
59913: NEG
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 1
59921: PUSH
59922: LD_INT 0
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 1
59931: PUSH
59932: LD_INT 1
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 0
59941: PUSH
59942: LD_INT 1
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 1
59951: NEG
59952: PUSH
59953: LD_INT 0
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 1
59962: NEG
59963: PUSH
59964: LD_INT 1
59966: NEG
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: NEG
59975: PUSH
59976: LD_INT 2
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: LD_INT 2
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 1
59997: PUSH
59998: LD_INT 1
60000: NEG
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 2
60008: PUSH
60009: LD_INT 0
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 2
60018: PUSH
60019: LD_INT 1
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 1
60028: PUSH
60029: LD_INT 2
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: LD_INT 2
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 1
60048: NEG
60049: PUSH
60050: LD_INT 1
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 2
60059: NEG
60060: PUSH
60061: LD_INT 1
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 2
60071: NEG
60072: PUSH
60073: LD_INT 2
60075: NEG
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 2
60083: NEG
60084: PUSH
60085: LD_INT 3
60087: NEG
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 2
60095: PUSH
60096: LD_INT 1
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 3
60106: PUSH
60107: LD_INT 1
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 1
60116: PUSH
60117: LD_INT 3
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 1
60126: NEG
60127: PUSH
60128: LD_INT 2
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 3
60137: NEG
60138: PUSH
60139: LD_INT 2
60141: NEG
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60172: LD_ADDR_VAR 0 30
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: LD_INT 0
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 0
60189: PUSH
60190: LD_INT 1
60192: NEG
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 1
60200: PUSH
60201: LD_INT 0
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 1
60210: PUSH
60211: LD_INT 1
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 0
60220: PUSH
60221: LD_INT 1
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 1
60230: NEG
60231: PUSH
60232: LD_INT 0
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 1
60241: NEG
60242: PUSH
60243: LD_INT 1
60245: NEG
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 1
60253: NEG
60254: PUSH
60255: LD_INT 2
60257: NEG
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 0
60265: PUSH
60266: LD_INT 2
60268: NEG
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 1
60276: PUSH
60277: LD_INT 1
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 2
60287: PUSH
60288: LD_INT 0
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 2
60297: PUSH
60298: LD_INT 1
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 2
60307: PUSH
60308: LD_INT 2
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 1
60317: PUSH
60318: LD_INT 2
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 1
60327: NEG
60328: PUSH
60329: LD_INT 1
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 2
60338: NEG
60339: PUSH
60340: LD_INT 0
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 2
60349: NEG
60350: PUSH
60351: LD_INT 1
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 1
60361: NEG
60362: PUSH
60363: LD_INT 3
60365: NEG
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 1
60373: PUSH
60374: LD_INT 2
60376: NEG
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 3
60384: PUSH
60385: LD_INT 2
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 2
60394: PUSH
60395: LD_INT 3
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 2
60404: NEG
60405: PUSH
60406: LD_INT 1
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 3
60415: NEG
60416: PUSH
60417: LD_INT 1
60419: NEG
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60450: LD_ADDR_VAR 0 31
60454: PUSH
60455: LD_INT 0
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: LD_INT 1
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 1
60478: PUSH
60479: LD_INT 0
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 1
60488: PUSH
60489: LD_INT 1
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 0
60498: PUSH
60499: LD_INT 1
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 1
60508: NEG
60509: PUSH
60510: LD_INT 0
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 1
60519: NEG
60520: PUSH
60521: LD_INT 1
60523: NEG
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 1
60531: NEG
60532: PUSH
60533: LD_INT 2
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 1
60543: PUSH
60544: LD_INT 1
60546: NEG
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 2
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 2
60564: PUSH
60565: LD_INT 1
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 2
60574: PUSH
60575: LD_INT 2
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 1
60584: PUSH
60585: LD_INT 2
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 0
60594: PUSH
60595: LD_INT 2
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 1
60604: NEG
60605: PUSH
60606: LD_INT 1
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 2
60615: NEG
60616: PUSH
60617: LD_INT 1
60619: NEG
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 2
60627: NEG
60628: PUSH
60629: LD_INT 2
60631: NEG
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 2
60639: NEG
60640: PUSH
60641: LD_INT 3
60643: NEG
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 2
60651: PUSH
60652: LD_INT 1
60654: NEG
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 3
60662: PUSH
60663: LD_INT 1
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 1
60672: PUSH
60673: LD_INT 3
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 1
60682: NEG
60683: PUSH
60684: LD_INT 2
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 3
60693: NEG
60694: PUSH
60695: LD_INT 2
60697: NEG
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60728: LD_ADDR_VAR 0 32
60732: PUSH
60733: LD_INT 0
60735: PUSH
60736: LD_INT 0
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 0
60745: PUSH
60746: LD_INT 1
60748: NEG
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 1
60756: PUSH
60757: LD_INT 0
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: LD_INT 1
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: LD_INT 1
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 1
60786: NEG
60787: PUSH
60788: LD_INT 0
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 1
60797: NEG
60798: PUSH
60799: LD_INT 1
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 1
60809: NEG
60810: PUSH
60811: LD_INT 2
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: LD_INT 2
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 1
60832: PUSH
60833: LD_INT 1
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 2
60843: PUSH
60844: LD_INT 1
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 2
60853: PUSH
60854: LD_INT 2
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 1
60863: PUSH
60864: LD_INT 2
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 0
60873: PUSH
60874: LD_INT 2
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 1
60883: NEG
60884: PUSH
60885: LD_INT 1
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 2
60894: NEG
60895: PUSH
60896: LD_INT 0
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 2
60905: NEG
60906: PUSH
60907: LD_INT 1
60909: NEG
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 1
60917: NEG
60918: PUSH
60919: LD_INT 3
60921: NEG
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: PUSH
60930: LD_INT 2
60932: NEG
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 3
60940: PUSH
60941: LD_INT 2
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 2
60950: PUSH
60951: LD_INT 3
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 2
60960: NEG
60961: PUSH
60962: LD_INT 1
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 3
60971: NEG
60972: PUSH
60973: LD_INT 1
60975: NEG
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61006: LD_ADDR_VAR 0 33
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: LD_INT 0
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 0
61023: PUSH
61024: LD_INT 1
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 1
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 1
61044: PUSH
61045: LD_INT 1
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 0
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 1
61064: NEG
61065: PUSH
61066: LD_INT 0
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: LD_INT 1
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 1
61087: NEG
61088: PUSH
61089: LD_INT 2
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 1
61099: PUSH
61100: LD_INT 1
61102: NEG
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 2
61110: PUSH
61111: LD_INT 0
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 2
61120: PUSH
61121: LD_INT 1
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 1
61130: PUSH
61131: LD_INT 2
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 0
61140: PUSH
61141: LD_INT 2
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 1
61150: NEG
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 2
61161: NEG
61162: PUSH
61163: LD_INT 0
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 2
61172: NEG
61173: PUSH
61174: LD_INT 1
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 2
61184: NEG
61185: PUSH
61186: LD_INT 2
61188: NEG
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 2
61196: NEG
61197: PUSH
61198: LD_INT 3
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 2
61208: PUSH
61209: LD_INT 1
61211: NEG
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 3
61219: PUSH
61220: LD_INT 1
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: PUSH
61230: LD_INT 3
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 1
61239: NEG
61240: PUSH
61241: LD_INT 2
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 3
61250: NEG
61251: PUSH
61252: LD_INT 2
61254: NEG
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61285: LD_ADDR_VAR 0 34
61289: PUSH
61290: LD_INT 0
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 1
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 1
61323: PUSH
61324: LD_INT 1
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 1
61343: NEG
61344: PUSH
61345: LD_INT 0
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 1
61354: NEG
61355: PUSH
61356: LD_INT 1
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 1
61366: NEG
61367: PUSH
61368: LD_INT 2
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: LD_INT 2
61381: NEG
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 1
61389: PUSH
61390: LD_INT 1
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 2
61400: PUSH
61401: LD_INT 1
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 2
61410: PUSH
61411: LD_INT 2
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 1
61420: PUSH
61421: LD_INT 2
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 1
61430: NEG
61431: PUSH
61432: LD_INT 1
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 2
61441: NEG
61442: PUSH
61443: LD_INT 0
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 2
61452: NEG
61453: PUSH
61454: LD_INT 1
61456: NEG
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 2
61464: NEG
61465: PUSH
61466: LD_INT 2
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 1
61476: NEG
61477: PUSH
61478: LD_INT 3
61480: NEG
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 1
61488: PUSH
61489: LD_INT 2
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 3
61499: PUSH
61500: LD_INT 2
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 2
61509: PUSH
61510: LD_INT 3
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 2
61519: NEG
61520: PUSH
61521: LD_INT 1
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 3
61530: NEG
61531: PUSH
61532: LD_INT 1
61534: NEG
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61565: LD_ADDR_VAR 0 35
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: LD_INT 0
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 0
61582: PUSH
61583: LD_INT 1
61585: NEG
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 1
61593: PUSH
61594: LD_INT 0
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 1
61603: PUSH
61604: LD_INT 1
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 0
61613: PUSH
61614: LD_INT 1
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 1
61623: NEG
61624: PUSH
61625: LD_INT 0
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 1
61634: NEG
61635: PUSH
61636: LD_INT 1
61638: NEG
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 2
61646: PUSH
61647: LD_INT 1
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 2
61656: NEG
61657: PUSH
61658: LD_INT 1
61660: NEG
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61677: LD_ADDR_VAR 0 36
61681: PUSH
61682: LD_INT 0
61684: PUSH
61685: LD_INT 0
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: LD_INT 1
61697: NEG
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 1
61705: PUSH
61706: LD_INT 0
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 1
61715: PUSH
61716: LD_INT 1
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 0
61725: PUSH
61726: LD_INT 1
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 1
61735: NEG
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: NEG
61747: PUSH
61748: LD_INT 1
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 1
61758: NEG
61759: PUSH
61760: LD_INT 2
61762: NEG
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 1
61770: PUSH
61771: LD_INT 2
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61789: LD_ADDR_VAR 0 37
61793: PUSH
61794: LD_INT 0
61796: PUSH
61797: LD_INT 0
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 0
61806: PUSH
61807: LD_INT 1
61809: NEG
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 1
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 1
61827: PUSH
61828: LD_INT 1
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 0
61837: PUSH
61838: LD_INT 1
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 1
61847: NEG
61848: PUSH
61849: LD_INT 0
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 1
61858: NEG
61859: PUSH
61860: LD_INT 1
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 1
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 1
61881: NEG
61882: PUSH
61883: LD_INT 1
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61901: LD_ADDR_VAR 0 38
61905: PUSH
61906: LD_INT 0
61908: PUSH
61909: LD_INT 0
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 0
61918: PUSH
61919: LD_INT 1
61921: NEG
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 1
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 1
61939: PUSH
61940: LD_INT 1
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 0
61949: PUSH
61950: LD_INT 1
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 1
61959: NEG
61960: PUSH
61961: LD_INT 0
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 1
61970: NEG
61971: PUSH
61972: LD_INT 1
61974: NEG
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 2
61982: PUSH
61983: LD_INT 1
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 2
61992: NEG
61993: PUSH
61994: LD_INT 1
61996: NEG
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62013: LD_ADDR_VAR 0 39
62017: PUSH
62018: LD_INT 0
62020: PUSH
62021: LD_INT 0
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 0
62030: PUSH
62031: LD_INT 1
62033: NEG
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 1
62041: PUSH
62042: LD_INT 0
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 1
62051: PUSH
62052: LD_INT 1
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: LD_INT 1
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 1
62071: NEG
62072: PUSH
62073: LD_INT 0
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 1
62082: NEG
62083: PUSH
62084: LD_INT 1
62086: NEG
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 1
62094: NEG
62095: PUSH
62096: LD_INT 2
62098: NEG
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 1
62106: PUSH
62107: LD_INT 2
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62125: LD_ADDR_VAR 0 40
62129: PUSH
62130: LD_INT 0
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 0
62142: PUSH
62143: LD_INT 1
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 1
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 1
62163: PUSH
62164: LD_INT 1
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 0
62173: PUSH
62174: LD_INT 1
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 1
62183: NEG
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 1
62194: NEG
62195: PUSH
62196: LD_INT 1
62198: NEG
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 1
62206: PUSH
62207: LD_INT 1
62209: NEG
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 1
62217: NEG
62218: PUSH
62219: LD_INT 1
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62237: LD_ADDR_VAR 0 41
62241: PUSH
62242: LD_INT 0
62244: PUSH
62245: LD_INT 0
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 0
62254: PUSH
62255: LD_INT 1
62257: NEG
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 1
62265: PUSH
62266: LD_INT 0
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 1
62275: PUSH
62276: LD_INT 1
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: LD_INT 1
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: LD_INT 0
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 1
62306: NEG
62307: PUSH
62308: LD_INT 1
62310: NEG
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 1
62318: NEG
62319: PUSH
62320: LD_INT 2
62322: NEG
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 1
62330: PUSH
62331: LD_INT 1
62333: NEG
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: LD_INT 2
62341: PUSH
62342: LD_INT 0
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 2
62351: PUSH
62352: LD_INT 1
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 2
62361: PUSH
62362: LD_INT 2
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 1
62371: PUSH
62372: LD_INT 2
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 1
62381: NEG
62382: PUSH
62383: LD_INT 1
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 2
62392: NEG
62393: PUSH
62394: LD_INT 0
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 2
62403: NEG
62404: PUSH
62405: LD_INT 1
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 2
62415: NEG
62416: PUSH
62417: LD_INT 2
62419: NEG
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 2
62427: NEG
62428: PUSH
62429: LD_INT 3
62431: NEG
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 2
62439: PUSH
62440: LD_INT 1
62442: NEG
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 3
62450: PUSH
62451: LD_INT 0
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 3
62460: PUSH
62461: LD_INT 1
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 3
62470: PUSH
62471: LD_INT 2
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 3
62480: PUSH
62481: LD_INT 3
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 2
62490: PUSH
62491: LD_INT 3
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 2
62500: NEG
62501: PUSH
62502: LD_INT 1
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 3
62511: NEG
62512: PUSH
62513: LD_INT 0
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 3
62522: NEG
62523: PUSH
62524: LD_INT 1
62526: NEG
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 3
62534: NEG
62535: PUSH
62536: LD_INT 2
62538: NEG
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 3
62546: NEG
62547: PUSH
62548: LD_INT 3
62550: NEG
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62587: LD_ADDR_VAR 0 42
62591: PUSH
62592: LD_INT 0
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 0
62604: PUSH
62605: LD_INT 1
62607: NEG
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 1
62615: PUSH
62616: LD_INT 0
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 1
62625: PUSH
62626: LD_INT 1
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 0
62635: PUSH
62636: LD_INT 1
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 1
62645: NEG
62646: PUSH
62647: LD_INT 0
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 1
62656: NEG
62657: PUSH
62658: LD_INT 1
62660: NEG
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 1
62668: NEG
62669: PUSH
62670: LD_INT 2
62672: NEG
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 0
62680: PUSH
62681: LD_INT 2
62683: NEG
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 1
62691: PUSH
62692: LD_INT 1
62694: NEG
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 2
62702: PUSH
62703: LD_INT 1
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 2
62712: PUSH
62713: LD_INT 2
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 1
62722: PUSH
62723: LD_INT 2
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 0
62732: PUSH
62733: LD_INT 2
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 1
62742: NEG
62743: PUSH
62744: LD_INT 1
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 2
62753: NEG
62754: PUSH
62755: LD_INT 1
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 2
62765: NEG
62766: PUSH
62767: LD_INT 2
62769: NEG
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 2
62777: NEG
62778: PUSH
62779: LD_INT 3
62781: NEG
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 1
62789: NEG
62790: PUSH
62791: LD_INT 3
62793: NEG
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 0
62801: PUSH
62802: LD_INT 3
62804: NEG
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 1
62812: PUSH
62813: LD_INT 2
62815: NEG
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 3
62823: PUSH
62824: LD_INT 2
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 3
62833: PUSH
62834: LD_INT 3
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 2
62843: PUSH
62844: LD_INT 3
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 1
62853: PUSH
62854: LD_INT 3
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 0
62863: PUSH
62864: LD_INT 3
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 1
62873: NEG
62874: PUSH
62875: LD_INT 2
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 3
62884: NEG
62885: PUSH
62886: LD_INT 2
62888: NEG
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 3
62896: NEG
62897: PUSH
62898: LD_INT 3
62900: NEG
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62937: LD_ADDR_VAR 0 43
62941: PUSH
62942: LD_INT 0
62944: PUSH
62945: LD_INT 0
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 0
62954: PUSH
62955: LD_INT 1
62957: NEG
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 1
62965: PUSH
62966: LD_INT 0
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 1
62975: PUSH
62976: LD_INT 1
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 0
62985: PUSH
62986: LD_INT 1
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 1
62995: NEG
62996: PUSH
62997: LD_INT 0
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 1
63006: NEG
63007: PUSH
63008: LD_INT 1
63010: NEG
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 1
63018: NEG
63019: PUSH
63020: LD_INT 2
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 0
63030: PUSH
63031: LD_INT 2
63033: NEG
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 1
63041: PUSH
63042: LD_INT 1
63044: NEG
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 2
63052: PUSH
63053: LD_INT 0
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 2
63062: PUSH
63063: LD_INT 1
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 1
63072: PUSH
63073: LD_INT 2
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 0
63082: PUSH
63083: LD_INT 2
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 1
63092: NEG
63093: PUSH
63094: LD_INT 1
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 2
63103: NEG
63104: PUSH
63105: LD_INT 0
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 2
63114: NEG
63115: PUSH
63116: LD_INT 1
63118: NEG
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 1
63126: NEG
63127: PUSH
63128: LD_INT 3
63130: NEG
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 0
63138: PUSH
63139: LD_INT 3
63141: NEG
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 1
63149: PUSH
63150: LD_INT 2
63152: NEG
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 2
63160: PUSH
63161: LD_INT 1
63163: NEG
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 3
63171: PUSH
63172: LD_INT 0
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 3
63181: PUSH
63182: LD_INT 1
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 1
63191: PUSH
63192: LD_INT 3
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 0
63201: PUSH
63202: LD_INT 3
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 1
63211: NEG
63212: PUSH
63213: LD_INT 2
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 2
63222: NEG
63223: PUSH
63224: LD_INT 1
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 3
63233: NEG
63234: PUSH
63235: LD_INT 0
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 3
63244: NEG
63245: PUSH
63246: LD_INT 1
63248: NEG
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63285: LD_ADDR_VAR 0 44
63289: PUSH
63290: LD_INT 0
63292: PUSH
63293: LD_INT 0
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 0
63302: PUSH
63303: LD_INT 1
63305: NEG
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 1
63313: PUSH
63314: LD_INT 0
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 1
63323: PUSH
63324: LD_INT 1
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 0
63333: PUSH
63334: LD_INT 1
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 1
63343: NEG
63344: PUSH
63345: LD_INT 0
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 1
63354: NEG
63355: PUSH
63356: LD_INT 1
63358: NEG
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 1
63366: NEG
63367: PUSH
63368: LD_INT 2
63370: NEG
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 1
63378: PUSH
63379: LD_INT 1
63381: NEG
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 2
63389: PUSH
63390: LD_INT 0
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 2
63399: PUSH
63400: LD_INT 1
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 2
63409: PUSH
63410: LD_INT 2
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 1
63419: PUSH
63420: LD_INT 2
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 1
63429: NEG
63430: PUSH
63431: LD_INT 1
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 2
63440: NEG
63441: PUSH
63442: LD_INT 0
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 2
63451: NEG
63452: PUSH
63453: LD_INT 1
63455: NEG
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 2
63463: NEG
63464: PUSH
63465: LD_INT 2
63467: NEG
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 2
63475: NEG
63476: PUSH
63477: LD_INT 3
63479: NEG
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 2
63487: PUSH
63488: LD_INT 1
63490: NEG
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 3
63498: PUSH
63499: LD_INT 0
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 3
63508: PUSH
63509: LD_INT 1
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 3
63518: PUSH
63519: LD_INT 2
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 3
63528: PUSH
63529: LD_INT 3
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 2
63538: PUSH
63539: LD_INT 3
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 2
63548: NEG
63549: PUSH
63550: LD_INT 1
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 3
63559: NEG
63560: PUSH
63561: LD_INT 0
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 3
63570: NEG
63571: PUSH
63572: LD_INT 1
63574: NEG
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 3
63582: NEG
63583: PUSH
63584: LD_INT 2
63586: NEG
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 3
63594: NEG
63595: PUSH
63596: LD_INT 3
63598: NEG
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63635: LD_ADDR_VAR 0 45
63639: PUSH
63640: LD_INT 0
63642: PUSH
63643: LD_INT 0
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 0
63652: PUSH
63653: LD_INT 1
63655: NEG
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 1
63663: PUSH
63664: LD_INT 0
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 1
63673: PUSH
63674: LD_INT 1
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 0
63683: PUSH
63684: LD_INT 1
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 1
63693: NEG
63694: PUSH
63695: LD_INT 0
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 1
63704: NEG
63705: PUSH
63706: LD_INT 1
63708: NEG
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 1
63716: NEG
63717: PUSH
63718: LD_INT 2
63720: NEG
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 0
63728: PUSH
63729: LD_INT 2
63731: NEG
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 1
63739: PUSH
63740: LD_INT 1
63742: NEG
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 2
63750: PUSH
63751: LD_INT 1
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 2
63760: PUSH
63761: LD_INT 2
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 1
63770: PUSH
63771: LD_INT 2
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 0
63780: PUSH
63781: LD_INT 2
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 1
63790: NEG
63791: PUSH
63792: LD_INT 1
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 2
63801: NEG
63802: PUSH
63803: LD_INT 1
63805: NEG
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 2
63813: NEG
63814: PUSH
63815: LD_INT 2
63817: NEG
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 2
63825: NEG
63826: PUSH
63827: LD_INT 3
63829: NEG
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 1
63837: NEG
63838: PUSH
63839: LD_INT 3
63841: NEG
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 0
63849: PUSH
63850: LD_INT 3
63852: NEG
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 1
63860: PUSH
63861: LD_INT 2
63863: NEG
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 3
63871: PUSH
63872: LD_INT 2
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 3
63881: PUSH
63882: LD_INT 3
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 2
63891: PUSH
63892: LD_INT 3
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 1
63901: PUSH
63902: LD_INT 3
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 0
63911: PUSH
63912: LD_INT 3
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 1
63921: NEG
63922: PUSH
63923: LD_INT 2
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 3
63932: NEG
63933: PUSH
63934: LD_INT 2
63936: NEG
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 3
63944: NEG
63945: PUSH
63946: LD_INT 3
63948: NEG
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63985: LD_ADDR_VAR 0 46
63989: PUSH
63990: LD_INT 0
63992: PUSH
63993: LD_INT 0
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 0
64002: PUSH
64003: LD_INT 1
64005: NEG
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 1
64013: PUSH
64014: LD_INT 0
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 1
64023: PUSH
64024: LD_INT 1
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 0
64033: PUSH
64034: LD_INT 1
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 1
64043: NEG
64044: PUSH
64045: LD_INT 0
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 1
64054: NEG
64055: PUSH
64056: LD_INT 1
64058: NEG
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 1
64066: NEG
64067: PUSH
64068: LD_INT 2
64070: NEG
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 0
64078: PUSH
64079: LD_INT 2
64081: NEG
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 1
64089: PUSH
64090: LD_INT 1
64092: NEG
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 2
64100: PUSH
64101: LD_INT 0
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 2
64110: PUSH
64111: LD_INT 1
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 1
64120: PUSH
64121: LD_INT 2
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 0
64130: PUSH
64131: LD_INT 2
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 1
64140: NEG
64141: PUSH
64142: LD_INT 1
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 2
64151: NEG
64152: PUSH
64153: LD_INT 0
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 2
64162: NEG
64163: PUSH
64164: LD_INT 1
64166: NEG
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 1
64174: NEG
64175: PUSH
64176: LD_INT 3
64178: NEG
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 0
64186: PUSH
64187: LD_INT 3
64189: NEG
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 1
64197: PUSH
64198: LD_INT 2
64200: NEG
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PUSH
64206: LD_INT 2
64208: PUSH
64209: LD_INT 1
64211: NEG
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 3
64219: PUSH
64220: LD_INT 0
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 3
64229: PUSH
64230: LD_INT 1
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 1
64239: PUSH
64240: LD_INT 3
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: LD_INT 3
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 1
64259: NEG
64260: PUSH
64261: LD_INT 2
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 2
64270: NEG
64271: PUSH
64272: LD_INT 1
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 3
64281: NEG
64282: PUSH
64283: LD_INT 0
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 3
64292: NEG
64293: PUSH
64294: LD_INT 1
64296: NEG
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64333: LD_ADDR_VAR 0 47
64337: PUSH
64338: LD_INT 0
64340: PUSH
64341: LD_INT 0
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 0
64350: PUSH
64351: LD_INT 1
64353: NEG
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 1
64361: PUSH
64362: LD_INT 0
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 1
64371: PUSH
64372: LD_INT 1
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 0
64381: PUSH
64382: LD_INT 1
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 1
64391: NEG
64392: PUSH
64393: LD_INT 0
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 1
64402: NEG
64403: PUSH
64404: LD_INT 1
64406: NEG
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 1
64414: NEG
64415: PUSH
64416: LD_INT 2
64418: NEG
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 0
64426: PUSH
64427: LD_INT 2
64429: NEG
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 1
64437: PUSH
64438: LD_INT 1
64440: NEG
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 2
64448: NEG
64449: PUSH
64450: LD_INT 1
64452: NEG
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 2
64460: NEG
64461: PUSH
64462: LD_INT 2
64464: NEG
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64484: LD_ADDR_VAR 0 48
64488: PUSH
64489: LD_INT 0
64491: PUSH
64492: LD_INT 0
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 0
64501: PUSH
64502: LD_INT 1
64504: NEG
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 1
64512: PUSH
64513: LD_INT 0
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 1
64522: PUSH
64523: LD_INT 1
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 0
64532: PUSH
64533: LD_INT 1
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 1
64542: NEG
64543: PUSH
64544: LD_INT 0
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 1
64553: NEG
64554: PUSH
64555: LD_INT 1
64557: NEG
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 1
64565: NEG
64566: PUSH
64567: LD_INT 2
64569: NEG
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 0
64577: PUSH
64578: LD_INT 2
64580: NEG
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 1
64588: PUSH
64589: LD_INT 1
64591: NEG
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 2
64599: PUSH
64600: LD_INT 0
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 2
64609: PUSH
64610: LD_INT 1
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64631: LD_ADDR_VAR 0 49
64635: PUSH
64636: LD_INT 0
64638: PUSH
64639: LD_INT 0
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 0
64648: PUSH
64649: LD_INT 1
64651: NEG
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 1
64659: PUSH
64660: LD_INT 0
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 1
64669: PUSH
64670: LD_INT 1
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 0
64679: PUSH
64680: LD_INT 1
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 1
64689: NEG
64690: PUSH
64691: LD_INT 0
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 1
64700: NEG
64701: PUSH
64702: LD_INT 1
64704: NEG
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 1
64712: PUSH
64713: LD_INT 1
64715: NEG
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 2
64723: PUSH
64724: LD_INT 0
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 2
64733: PUSH
64734: LD_INT 1
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 2
64743: PUSH
64744: LD_INT 2
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 1
64753: PUSH
64754: LD_INT 2
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64775: LD_ADDR_VAR 0 50
64779: PUSH
64780: LD_INT 0
64782: PUSH
64783: LD_INT 0
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 0
64792: PUSH
64793: LD_INT 1
64795: NEG
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 1
64803: PUSH
64804: LD_INT 0
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 1
64813: PUSH
64814: LD_INT 1
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 0
64823: PUSH
64824: LD_INT 1
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 1
64833: NEG
64834: PUSH
64835: LD_INT 0
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 1
64844: NEG
64845: PUSH
64846: LD_INT 1
64848: NEG
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 2
64856: PUSH
64857: LD_INT 1
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 2
64866: PUSH
64867: LD_INT 2
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 1
64876: PUSH
64877: LD_INT 2
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 0
64886: PUSH
64887: LD_INT 2
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 1
64896: NEG
64897: PUSH
64898: LD_INT 1
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64919: LD_ADDR_VAR 0 51
64923: PUSH
64924: LD_INT 0
64926: PUSH
64927: LD_INT 0
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 0
64936: PUSH
64937: LD_INT 1
64939: NEG
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 1
64947: PUSH
64948: LD_INT 0
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 1
64957: PUSH
64958: LD_INT 1
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 0
64967: PUSH
64968: LD_INT 1
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 1
64977: NEG
64978: PUSH
64979: LD_INT 0
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 1
64988: NEG
64989: PUSH
64990: LD_INT 1
64992: NEG
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: LD_INT 1
65000: PUSH
65001: LD_INT 2
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 0
65010: PUSH
65011: LD_INT 2
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 1
65020: NEG
65021: PUSH
65022: LD_INT 1
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 2
65031: NEG
65032: PUSH
65033: LD_INT 0
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 2
65042: NEG
65043: PUSH
65044: LD_INT 1
65046: NEG
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65066: LD_ADDR_VAR 0 52
65070: PUSH
65071: LD_INT 0
65073: PUSH
65074: LD_INT 0
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 0
65083: PUSH
65084: LD_INT 1
65086: NEG
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 1
65094: PUSH
65095: LD_INT 0
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 1
65104: PUSH
65105: LD_INT 1
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 0
65114: PUSH
65115: LD_INT 1
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 1
65124: NEG
65125: PUSH
65126: LD_INT 0
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 1
65135: NEG
65136: PUSH
65137: LD_INT 1
65139: NEG
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 1
65147: NEG
65148: PUSH
65149: LD_INT 2
65151: NEG
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 1
65159: NEG
65160: PUSH
65161: LD_INT 1
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 2
65170: NEG
65171: PUSH
65172: LD_INT 0
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 2
65181: NEG
65182: PUSH
65183: LD_INT 1
65185: NEG
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 2
65193: NEG
65194: PUSH
65195: LD_INT 2
65197: NEG
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65217: LD_ADDR_VAR 0 53
65221: PUSH
65222: LD_INT 0
65224: PUSH
65225: LD_INT 0
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 0
65234: PUSH
65235: LD_INT 1
65237: NEG
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 1
65245: PUSH
65246: LD_INT 0
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 1
65255: PUSH
65256: LD_INT 1
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 0
65265: PUSH
65266: LD_INT 1
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 1
65275: NEG
65276: PUSH
65277: LD_INT 0
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 1
65286: NEG
65287: PUSH
65288: LD_INT 1
65290: NEG
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 1
65298: NEG
65299: PUSH
65300: LD_INT 2
65302: NEG
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 0
65310: PUSH
65311: LD_INT 2
65313: NEG
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 1
65321: PUSH
65322: LD_INT 1
65324: NEG
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 2
65332: PUSH
65333: LD_INT 0
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 2
65342: PUSH
65343: LD_INT 1
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 2
65352: PUSH
65353: LD_INT 2
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 1
65362: PUSH
65363: LD_INT 2
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 0
65372: PUSH
65373: LD_INT 2
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 1
65382: NEG
65383: PUSH
65384: LD_INT 1
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 2
65393: NEG
65394: PUSH
65395: LD_INT 0
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 2
65404: NEG
65405: PUSH
65406: LD_INT 1
65408: NEG
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 2
65416: NEG
65417: PUSH
65418: LD_INT 2
65420: NEG
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65447: LD_ADDR_VAR 0 54
65451: PUSH
65452: LD_INT 0
65454: PUSH
65455: LD_INT 0
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 0
65464: PUSH
65465: LD_INT 1
65467: NEG
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 1
65475: PUSH
65476: LD_INT 0
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 1
65485: PUSH
65486: LD_INT 1
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 0
65495: PUSH
65496: LD_INT 1
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 1
65505: NEG
65506: PUSH
65507: LD_INT 0
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 1
65516: NEG
65517: PUSH
65518: LD_INT 1
65520: NEG
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 1
65528: NEG
65529: PUSH
65530: LD_INT 2
65532: NEG
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 0
65540: PUSH
65541: LD_INT 2
65543: NEG
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 1
65551: PUSH
65552: LD_INT 1
65554: NEG
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 2
65562: PUSH
65563: LD_INT 0
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 2
65572: PUSH
65573: LD_INT 1
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 2
65582: PUSH
65583: LD_INT 2
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 1
65592: PUSH
65593: LD_INT 2
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 0
65602: PUSH
65603: LD_INT 2
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 1
65612: NEG
65613: PUSH
65614: LD_INT 1
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 2
65623: NEG
65624: PUSH
65625: LD_INT 0
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 2
65634: NEG
65635: PUSH
65636: LD_INT 1
65638: NEG
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: LD_INT 2
65646: NEG
65647: PUSH
65648: LD_INT 2
65650: NEG
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65677: LD_ADDR_VAR 0 55
65681: PUSH
65682: LD_INT 0
65684: PUSH
65685: LD_INT 0
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 0
65694: PUSH
65695: LD_INT 1
65697: NEG
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 1
65705: PUSH
65706: LD_INT 0
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 1
65715: PUSH
65716: LD_INT 1
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 0
65725: PUSH
65726: LD_INT 1
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 1
65735: NEG
65736: PUSH
65737: LD_INT 0
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 1
65746: NEG
65747: PUSH
65748: LD_INT 1
65750: NEG
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: LD_INT 1
65758: NEG
65759: PUSH
65760: LD_INT 2
65762: NEG
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 0
65770: PUSH
65771: LD_INT 2
65773: NEG
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 1
65781: PUSH
65782: LD_INT 1
65784: NEG
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 2
65792: PUSH
65793: LD_INT 0
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 2
65802: PUSH
65803: LD_INT 1
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 2
65812: PUSH
65813: LD_INT 2
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 1
65822: PUSH
65823: LD_INT 2
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 0
65832: PUSH
65833: LD_INT 2
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 1
65842: NEG
65843: PUSH
65844: LD_INT 1
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 2
65853: NEG
65854: PUSH
65855: LD_INT 0
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 2
65864: NEG
65865: PUSH
65866: LD_INT 1
65868: NEG
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 2
65876: NEG
65877: PUSH
65878: LD_INT 2
65880: NEG
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65907: LD_ADDR_VAR 0 56
65911: PUSH
65912: LD_INT 0
65914: PUSH
65915: LD_INT 0
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 0
65924: PUSH
65925: LD_INT 1
65927: NEG
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 1
65935: PUSH
65936: LD_INT 0
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 1
65945: PUSH
65946: LD_INT 1
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 0
65955: PUSH
65956: LD_INT 1
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 1
65965: NEG
65966: PUSH
65967: LD_INT 0
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 1
65976: NEG
65977: PUSH
65978: LD_INT 1
65980: NEG
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 1
65988: NEG
65989: PUSH
65990: LD_INT 2
65992: NEG
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 0
66000: PUSH
66001: LD_INT 2
66003: NEG
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 1
66011: PUSH
66012: LD_INT 1
66014: NEG
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 2
66022: PUSH
66023: LD_INT 0
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 2
66032: PUSH
66033: LD_INT 1
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 2
66042: PUSH
66043: LD_INT 2
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 1
66052: PUSH
66053: LD_INT 2
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 0
66062: PUSH
66063: LD_INT 2
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 1
66072: NEG
66073: PUSH
66074: LD_INT 1
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 2
66083: NEG
66084: PUSH
66085: LD_INT 0
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 2
66094: NEG
66095: PUSH
66096: LD_INT 1
66098: NEG
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 2
66106: NEG
66107: PUSH
66108: LD_INT 2
66110: NEG
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66137: LD_ADDR_VAR 0 57
66141: PUSH
66142: LD_INT 0
66144: PUSH
66145: LD_INT 0
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 0
66154: PUSH
66155: LD_INT 1
66157: NEG
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 1
66165: PUSH
66166: LD_INT 0
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 1
66175: PUSH
66176: LD_INT 1
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 0
66185: PUSH
66186: LD_INT 1
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: PUSH
66193: LD_INT 1
66195: NEG
66196: PUSH
66197: LD_INT 0
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 1
66206: NEG
66207: PUSH
66208: LD_INT 1
66210: NEG
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 1
66218: NEG
66219: PUSH
66220: LD_INT 2
66222: NEG
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 0
66230: PUSH
66231: LD_INT 2
66233: NEG
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 1
66241: PUSH
66242: LD_INT 1
66244: NEG
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 2
66252: PUSH
66253: LD_INT 0
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 2
66262: PUSH
66263: LD_INT 1
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 2
66272: PUSH
66273: LD_INT 2
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 1
66282: PUSH
66283: LD_INT 2
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 0
66292: PUSH
66293: LD_INT 2
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 1
66302: NEG
66303: PUSH
66304: LD_INT 1
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 2
66313: NEG
66314: PUSH
66315: LD_INT 0
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 2
66324: NEG
66325: PUSH
66326: LD_INT 1
66328: NEG
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 2
66336: NEG
66337: PUSH
66338: LD_INT 2
66340: NEG
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66367: LD_ADDR_VAR 0 58
66371: PUSH
66372: LD_INT 0
66374: PUSH
66375: LD_INT 0
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 0
66384: PUSH
66385: LD_INT 1
66387: NEG
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 1
66395: PUSH
66396: LD_INT 0
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 1
66405: PUSH
66406: LD_INT 1
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 0
66415: PUSH
66416: LD_INT 1
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 1
66425: NEG
66426: PUSH
66427: LD_INT 0
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 1
66436: NEG
66437: PUSH
66438: LD_INT 1
66440: NEG
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: LD_INT 1
66448: NEG
66449: PUSH
66450: LD_INT 2
66452: NEG
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 0
66460: PUSH
66461: LD_INT 2
66463: NEG
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 1
66471: PUSH
66472: LD_INT 1
66474: NEG
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 2
66482: PUSH
66483: LD_INT 0
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 2
66492: PUSH
66493: LD_INT 1
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 2
66502: PUSH
66503: LD_INT 2
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 1
66512: PUSH
66513: LD_INT 2
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 0
66522: PUSH
66523: LD_INT 2
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 1
66532: NEG
66533: PUSH
66534: LD_INT 1
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 2
66543: NEG
66544: PUSH
66545: LD_INT 0
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 2
66554: NEG
66555: PUSH
66556: LD_INT 1
66558: NEG
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 2
66566: NEG
66567: PUSH
66568: LD_INT 2
66570: NEG
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: LIST
66580: LIST
66581: LIST
66582: LIST
66583: LIST
66584: LIST
66585: LIST
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66597: LD_ADDR_VAR 0 59
66601: PUSH
66602: LD_INT 0
66604: PUSH
66605: LD_INT 0
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 0
66614: PUSH
66615: LD_INT 1
66617: NEG
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 1
66625: PUSH
66626: LD_INT 0
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 1
66635: PUSH
66636: LD_INT 1
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 0
66645: PUSH
66646: LD_INT 1
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 1
66655: NEG
66656: PUSH
66657: LD_INT 0
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: LD_INT 1
66666: NEG
66667: PUSH
66668: LD_INT 1
66670: NEG
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66685: LD_ADDR_VAR 0 60
66689: PUSH
66690: LD_INT 0
66692: PUSH
66693: LD_INT 0
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 0
66702: PUSH
66703: LD_INT 1
66705: NEG
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 1
66713: PUSH
66714: LD_INT 0
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 1
66723: PUSH
66724: LD_INT 1
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 0
66733: PUSH
66734: LD_INT 1
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 1
66743: NEG
66744: PUSH
66745: LD_INT 0
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 1
66754: NEG
66755: PUSH
66756: LD_INT 1
66758: NEG
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66773: LD_ADDR_VAR 0 61
66777: PUSH
66778: LD_INT 0
66780: PUSH
66781: LD_INT 0
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 0
66790: PUSH
66791: LD_INT 1
66793: NEG
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 1
66801: PUSH
66802: LD_INT 0
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 1
66811: PUSH
66812: LD_INT 1
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 0
66821: PUSH
66822: LD_INT 1
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 1
66831: NEG
66832: PUSH
66833: LD_INT 0
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 1
66842: NEG
66843: PUSH
66844: LD_INT 1
66846: NEG
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66861: LD_ADDR_VAR 0 62
66865: PUSH
66866: LD_INT 0
66868: PUSH
66869: LD_INT 0
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 0
66878: PUSH
66879: LD_INT 1
66881: NEG
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 1
66889: PUSH
66890: LD_INT 0
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_INT 1
66899: PUSH
66900: LD_INT 1
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 0
66909: PUSH
66910: LD_INT 1
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 1
66919: NEG
66920: PUSH
66921: LD_INT 0
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 1
66930: NEG
66931: PUSH
66932: LD_INT 1
66934: NEG
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66949: LD_ADDR_VAR 0 63
66953: PUSH
66954: LD_INT 0
66956: PUSH
66957: LD_INT 0
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PUSH
66964: LD_INT 0
66966: PUSH
66967: LD_INT 1
66969: NEG
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: LD_INT 1
66977: PUSH
66978: LD_INT 0
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 1
66987: PUSH
66988: LD_INT 1
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: LD_INT 0
66997: PUSH
66998: LD_INT 1
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: LD_INT 1
67007: NEG
67008: PUSH
67009: LD_INT 0
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: LD_INT 1
67018: NEG
67019: PUSH
67020: LD_INT 1
67022: NEG
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67037: LD_ADDR_VAR 0 64
67041: PUSH
67042: LD_INT 0
67044: PUSH
67045: LD_INT 0
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 0
67054: PUSH
67055: LD_INT 1
67057: NEG
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 1
67065: PUSH
67066: LD_INT 0
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 1
67075: PUSH
67076: LD_INT 1
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 0
67085: PUSH
67086: LD_INT 1
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 1
67095: NEG
67096: PUSH
67097: LD_INT 0
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 1
67106: NEG
67107: PUSH
67108: LD_INT 1
67110: NEG
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: LIST
67120: LIST
67121: LIST
67122: LIST
67123: LIST
67124: ST_TO_ADDR
// end ; 1 :
67125: GO 73022
67127: LD_INT 1
67129: DOUBLE
67130: EQUAL
67131: IFTRUE 67135
67133: GO 69758
67135: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67136: LD_ADDR_VAR 0 11
67140: PUSH
67141: LD_INT 1
67143: NEG
67144: PUSH
67145: LD_INT 3
67147: NEG
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 0
67155: PUSH
67156: LD_INT 3
67158: NEG
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 1
67166: PUSH
67167: LD_INT 2
67169: NEG
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: LIST
67179: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67180: LD_ADDR_VAR 0 12
67184: PUSH
67185: LD_INT 2
67187: PUSH
67188: LD_INT 1
67190: NEG
67191: PUSH
67192: EMPTY
67193: LIST
67194: LIST
67195: PUSH
67196: LD_INT 3
67198: PUSH
67199: LD_INT 0
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 3
67208: PUSH
67209: LD_INT 1
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: LIST
67220: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67221: LD_ADDR_VAR 0 13
67225: PUSH
67226: LD_INT 3
67228: PUSH
67229: LD_INT 2
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: LD_INT 3
67238: PUSH
67239: LD_INT 3
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 2
67248: PUSH
67249: LD_INT 3
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: LIST
67260: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67261: LD_ADDR_VAR 0 14
67265: PUSH
67266: LD_INT 1
67268: PUSH
67269: LD_INT 3
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 0
67278: PUSH
67279: LD_INT 3
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 1
67288: NEG
67289: PUSH
67290: LD_INT 2
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: LIST
67301: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67302: LD_ADDR_VAR 0 15
67306: PUSH
67307: LD_INT 2
67309: NEG
67310: PUSH
67311: LD_INT 1
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 3
67320: NEG
67321: PUSH
67322: LD_INT 0
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 3
67331: NEG
67332: PUSH
67333: LD_INT 1
67335: NEG
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: LIST
67345: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67346: LD_ADDR_VAR 0 16
67350: PUSH
67351: LD_INT 2
67353: NEG
67354: PUSH
67355: LD_INT 3
67357: NEG
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 3
67365: NEG
67366: PUSH
67367: LD_INT 2
67369: NEG
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: LD_INT 3
67377: NEG
67378: PUSH
67379: LD_INT 3
67381: NEG
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: LIST
67391: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67392: LD_ADDR_VAR 0 17
67396: PUSH
67397: LD_INT 1
67399: NEG
67400: PUSH
67401: LD_INT 3
67403: NEG
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: LD_INT 0
67411: PUSH
67412: LD_INT 3
67414: NEG
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 1
67422: PUSH
67423: LD_INT 2
67425: NEG
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: LIST
67435: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67436: LD_ADDR_VAR 0 18
67440: PUSH
67441: LD_INT 2
67443: PUSH
67444: LD_INT 1
67446: NEG
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 3
67454: PUSH
67455: LD_INT 0
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 3
67464: PUSH
67465: LD_INT 1
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: LIST
67476: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67477: LD_ADDR_VAR 0 19
67481: PUSH
67482: LD_INT 3
67484: PUSH
67485: LD_INT 2
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 3
67494: PUSH
67495: LD_INT 3
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: LD_INT 2
67504: PUSH
67505: LD_INT 3
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: LIST
67516: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67517: LD_ADDR_VAR 0 20
67521: PUSH
67522: LD_INT 1
67524: PUSH
67525: LD_INT 3
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 0
67534: PUSH
67535: LD_INT 3
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 1
67544: NEG
67545: PUSH
67546: LD_INT 2
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: LIST
67557: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67558: LD_ADDR_VAR 0 21
67562: PUSH
67563: LD_INT 2
67565: NEG
67566: PUSH
67567: LD_INT 1
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 3
67576: NEG
67577: PUSH
67578: LD_INT 0
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 3
67587: NEG
67588: PUSH
67589: LD_INT 1
67591: NEG
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: LIST
67601: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67602: LD_ADDR_VAR 0 22
67606: PUSH
67607: LD_INT 2
67609: NEG
67610: PUSH
67611: LD_INT 3
67613: NEG
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 3
67621: NEG
67622: PUSH
67623: LD_INT 2
67625: NEG
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: LD_INT 3
67633: NEG
67634: PUSH
67635: LD_INT 3
67637: NEG
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: LIST
67647: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67648: LD_ADDR_VAR 0 23
67652: PUSH
67653: LD_INT 0
67655: PUSH
67656: LD_INT 3
67658: NEG
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 1
67666: NEG
67667: PUSH
67668: LD_INT 4
67670: NEG
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 1
67678: PUSH
67679: LD_INT 3
67681: NEG
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: LIST
67691: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67692: LD_ADDR_VAR 0 24
67696: PUSH
67697: LD_INT 3
67699: PUSH
67700: LD_INT 0
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 3
67709: PUSH
67710: LD_INT 1
67712: NEG
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 4
67720: PUSH
67721: LD_INT 1
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: LIST
67732: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67733: LD_ADDR_VAR 0 25
67737: PUSH
67738: LD_INT 3
67740: PUSH
67741: LD_INT 3
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: PUSH
67748: LD_INT 4
67750: PUSH
67751: LD_INT 3
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: PUSH
67758: LD_INT 3
67760: PUSH
67761: LD_INT 4
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: LIST
67772: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67773: LD_ADDR_VAR 0 26
67777: PUSH
67778: LD_INT 0
67780: PUSH
67781: LD_INT 3
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: PUSH
67788: LD_INT 1
67790: PUSH
67791: LD_INT 4
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 1
67800: NEG
67801: PUSH
67802: LD_INT 3
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: LIST
67813: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67814: LD_ADDR_VAR 0 27
67818: PUSH
67819: LD_INT 3
67821: NEG
67822: PUSH
67823: LD_INT 0
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 3
67832: NEG
67833: PUSH
67834: LD_INT 1
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: LD_INT 4
67843: NEG
67844: PUSH
67845: LD_INT 1
67847: NEG
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: LIST
67857: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67858: LD_ADDR_VAR 0 28
67862: PUSH
67863: LD_INT 3
67865: NEG
67866: PUSH
67867: LD_INT 3
67869: NEG
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: PUSH
67875: LD_INT 3
67877: NEG
67878: PUSH
67879: LD_INT 4
67881: NEG
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PUSH
67887: LD_INT 4
67889: NEG
67890: PUSH
67891: LD_INT 3
67893: NEG
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: LIST
67903: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67904: LD_ADDR_VAR 0 29
67908: PUSH
67909: LD_INT 1
67911: NEG
67912: PUSH
67913: LD_INT 3
67915: NEG
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 0
67923: PUSH
67924: LD_INT 3
67926: NEG
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 1
67934: PUSH
67935: LD_INT 2
67937: NEG
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 1
67945: NEG
67946: PUSH
67947: LD_INT 4
67949: NEG
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 0
67957: PUSH
67958: LD_INT 4
67960: NEG
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 1
67968: PUSH
67969: LD_INT 3
67971: NEG
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 1
67979: NEG
67980: PUSH
67981: LD_INT 5
67983: NEG
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 0
67991: PUSH
67992: LD_INT 5
67994: NEG
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 1
68002: PUSH
68003: LD_INT 4
68005: NEG
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 1
68013: NEG
68014: PUSH
68015: LD_INT 6
68017: NEG
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 0
68025: PUSH
68026: LD_INT 6
68028: NEG
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 1
68036: PUSH
68037: LD_INT 5
68039: NEG
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68059: LD_ADDR_VAR 0 30
68063: PUSH
68064: LD_INT 2
68066: PUSH
68067: LD_INT 1
68069: NEG
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 3
68077: PUSH
68078: LD_INT 0
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 3
68087: PUSH
68088: LD_INT 1
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 3
68097: PUSH
68098: LD_INT 1
68100: NEG
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 4
68108: PUSH
68109: LD_INT 0
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 4
68118: PUSH
68119: LD_INT 1
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 4
68128: PUSH
68129: LD_INT 1
68131: NEG
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 5
68139: PUSH
68140: LD_INT 0
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PUSH
68147: LD_INT 5
68149: PUSH
68150: LD_INT 1
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PUSH
68157: LD_INT 5
68159: PUSH
68160: LD_INT 1
68162: NEG
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 6
68170: PUSH
68171: LD_INT 0
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: LD_INT 6
68180: PUSH
68181: LD_INT 1
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: LIST
68192: LIST
68193: LIST
68194: LIST
68195: LIST
68196: LIST
68197: LIST
68198: LIST
68199: LIST
68200: LIST
68201: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68202: LD_ADDR_VAR 0 31
68206: PUSH
68207: LD_INT 3
68209: PUSH
68210: LD_INT 2
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 3
68219: PUSH
68220: LD_INT 3
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: LD_INT 2
68229: PUSH
68230: LD_INT 3
68232: PUSH
68233: EMPTY
68234: LIST
68235: LIST
68236: PUSH
68237: LD_INT 4
68239: PUSH
68240: LD_INT 3
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: LD_INT 4
68249: PUSH
68250: LD_INT 4
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: LD_INT 3
68259: PUSH
68260: LD_INT 4
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: LD_INT 5
68269: PUSH
68270: LD_INT 4
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: PUSH
68277: LD_INT 5
68279: PUSH
68280: LD_INT 5
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: PUSH
68287: LD_INT 4
68289: PUSH
68290: LD_INT 5
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 6
68299: PUSH
68300: LD_INT 5
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 6
68309: PUSH
68310: LD_INT 6
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: LD_INT 5
68319: PUSH
68320: LD_INT 6
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68341: LD_ADDR_VAR 0 32
68345: PUSH
68346: LD_INT 1
68348: PUSH
68349: LD_INT 3
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 0
68358: PUSH
68359: LD_INT 3
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: PUSH
68366: LD_INT 1
68368: NEG
68369: PUSH
68370: LD_INT 2
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 1
68379: PUSH
68380: LD_INT 4
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 0
68389: PUSH
68390: LD_INT 4
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 1
68399: NEG
68400: PUSH
68401: LD_INT 3
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 1
68410: PUSH
68411: LD_INT 5
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PUSH
68418: LD_INT 0
68420: PUSH
68421: LD_INT 5
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: PUSH
68428: LD_INT 1
68430: NEG
68431: PUSH
68432: LD_INT 4
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: PUSH
68439: LD_INT 1
68441: PUSH
68442: LD_INT 6
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: LD_INT 0
68451: PUSH
68452: LD_INT 6
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: PUSH
68459: LD_INT 1
68461: NEG
68462: PUSH
68463: LD_INT 5
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68484: LD_ADDR_VAR 0 33
68488: PUSH
68489: LD_INT 2
68491: NEG
68492: PUSH
68493: LD_INT 1
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PUSH
68500: LD_INT 3
68502: NEG
68503: PUSH
68504: LD_INT 0
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 3
68513: NEG
68514: PUSH
68515: LD_INT 1
68517: NEG
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PUSH
68523: LD_INT 3
68525: NEG
68526: PUSH
68527: LD_INT 1
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: LD_INT 4
68536: NEG
68537: PUSH
68538: LD_INT 0
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 4
68547: NEG
68548: PUSH
68549: LD_INT 1
68551: NEG
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: PUSH
68557: LD_INT 4
68559: NEG
68560: PUSH
68561: LD_INT 1
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 5
68570: NEG
68571: PUSH
68572: LD_INT 0
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 5
68581: NEG
68582: PUSH
68583: LD_INT 1
68585: NEG
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 5
68593: NEG
68594: PUSH
68595: LD_INT 1
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 6
68604: NEG
68605: PUSH
68606: LD_INT 0
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 6
68615: NEG
68616: PUSH
68617: LD_INT 1
68619: NEG
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: LIST
68629: LIST
68630: LIST
68631: LIST
68632: LIST
68633: LIST
68634: LIST
68635: LIST
68636: LIST
68637: LIST
68638: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68639: LD_ADDR_VAR 0 34
68643: PUSH
68644: LD_INT 2
68646: NEG
68647: PUSH
68648: LD_INT 3
68650: NEG
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PUSH
68656: LD_INT 3
68658: NEG
68659: PUSH
68660: LD_INT 2
68662: NEG
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 3
68670: NEG
68671: PUSH
68672: LD_INT 3
68674: NEG
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: LD_INT 3
68682: NEG
68683: PUSH
68684: LD_INT 4
68686: NEG
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 4
68694: NEG
68695: PUSH
68696: LD_INT 3
68698: NEG
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: PUSH
68704: LD_INT 4
68706: NEG
68707: PUSH
68708: LD_INT 4
68710: NEG
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PUSH
68716: LD_INT 4
68718: NEG
68719: PUSH
68720: LD_INT 5
68722: NEG
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: LD_INT 5
68730: NEG
68731: PUSH
68732: LD_INT 4
68734: NEG
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_INT 5
68742: NEG
68743: PUSH
68744: LD_INT 5
68746: NEG
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 5
68754: NEG
68755: PUSH
68756: LD_INT 6
68758: NEG
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: LD_INT 6
68766: NEG
68767: PUSH
68768: LD_INT 5
68770: NEG
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 6
68778: NEG
68779: PUSH
68780: LD_INT 6
68782: NEG
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68802: LD_ADDR_VAR 0 41
68806: PUSH
68807: LD_INT 0
68809: PUSH
68810: LD_INT 2
68812: NEG
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: PUSH
68818: LD_INT 1
68820: NEG
68821: PUSH
68822: LD_INT 3
68824: NEG
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 1
68832: PUSH
68833: LD_INT 2
68835: NEG
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: LIST
68845: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68846: LD_ADDR_VAR 0 42
68850: PUSH
68851: LD_INT 2
68853: PUSH
68854: LD_INT 0
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PUSH
68861: LD_INT 2
68863: PUSH
68864: LD_INT 1
68866: NEG
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 3
68874: PUSH
68875: LD_INT 1
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: LIST
68886: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68887: LD_ADDR_VAR 0 43
68891: PUSH
68892: LD_INT 2
68894: PUSH
68895: LD_INT 2
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 3
68904: PUSH
68905: LD_INT 2
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: LD_INT 2
68914: PUSH
68915: LD_INT 3
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: LIST
68926: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68927: LD_ADDR_VAR 0 44
68931: PUSH
68932: LD_INT 0
68934: PUSH
68935: LD_INT 2
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 1
68944: PUSH
68945: LD_INT 3
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 1
68954: NEG
68955: PUSH
68956: LD_INT 2
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: LIST
68967: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68968: LD_ADDR_VAR 0 45
68972: PUSH
68973: LD_INT 2
68975: NEG
68976: PUSH
68977: LD_INT 0
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 2
68986: NEG
68987: PUSH
68988: LD_INT 1
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: LD_INT 3
68997: NEG
68998: PUSH
68999: LD_INT 1
69001: NEG
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: EMPTY
69008: LIST
69009: LIST
69010: LIST
69011: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69012: LD_ADDR_VAR 0 46
69016: PUSH
69017: LD_INT 2
69019: NEG
69020: PUSH
69021: LD_INT 2
69023: NEG
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: LD_INT 2
69031: NEG
69032: PUSH
69033: LD_INT 3
69035: NEG
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: PUSH
69041: LD_INT 3
69043: NEG
69044: PUSH
69045: LD_INT 2
69047: NEG
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: PUSH
69053: EMPTY
69054: LIST
69055: LIST
69056: LIST
69057: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69058: LD_ADDR_VAR 0 47
69062: PUSH
69063: LD_INT 2
69065: NEG
69066: PUSH
69067: LD_INT 3
69069: NEG
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: LD_INT 1
69077: NEG
69078: PUSH
69079: LD_INT 3
69081: NEG
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69091: LD_ADDR_VAR 0 48
69095: PUSH
69096: LD_INT 1
69098: PUSH
69099: LD_INT 2
69101: NEG
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: LD_INT 2
69109: PUSH
69110: LD_INT 1
69112: NEG
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69122: LD_ADDR_VAR 0 49
69126: PUSH
69127: LD_INT 3
69129: PUSH
69130: LD_INT 1
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 3
69139: PUSH
69140: LD_INT 2
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69151: LD_ADDR_VAR 0 50
69155: PUSH
69156: LD_INT 2
69158: PUSH
69159: LD_INT 3
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: PUSH
69166: LD_INT 1
69168: PUSH
69169: LD_INT 3
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: PUSH
69176: EMPTY
69177: LIST
69178: LIST
69179: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69180: LD_ADDR_VAR 0 51
69184: PUSH
69185: LD_INT 1
69187: NEG
69188: PUSH
69189: LD_INT 2
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: LD_INT 2
69198: NEG
69199: PUSH
69200: LD_INT 1
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69211: LD_ADDR_VAR 0 52
69215: PUSH
69216: LD_INT 3
69218: NEG
69219: PUSH
69220: LD_INT 1
69222: NEG
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: LD_INT 3
69230: NEG
69231: PUSH
69232: LD_INT 2
69234: NEG
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69244: LD_ADDR_VAR 0 53
69248: PUSH
69249: LD_INT 1
69251: NEG
69252: PUSH
69253: LD_INT 3
69255: NEG
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: PUSH
69261: LD_INT 0
69263: PUSH
69264: LD_INT 3
69266: NEG
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: LD_INT 1
69274: PUSH
69275: LD_INT 2
69277: NEG
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: LIST
69287: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69288: LD_ADDR_VAR 0 54
69292: PUSH
69293: LD_INT 2
69295: PUSH
69296: LD_INT 1
69298: NEG
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PUSH
69304: LD_INT 3
69306: PUSH
69307: LD_INT 0
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 3
69316: PUSH
69317: LD_INT 1
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: EMPTY
69325: LIST
69326: LIST
69327: LIST
69328: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69329: LD_ADDR_VAR 0 55
69333: PUSH
69334: LD_INT 3
69336: PUSH
69337: LD_INT 2
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: LD_INT 3
69346: PUSH
69347: LD_INT 3
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PUSH
69354: LD_INT 2
69356: PUSH
69357: LD_INT 3
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: LIST
69368: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69369: LD_ADDR_VAR 0 56
69373: PUSH
69374: LD_INT 1
69376: PUSH
69377: LD_INT 3
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: LD_INT 0
69386: PUSH
69387: LD_INT 3
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 1
69396: NEG
69397: PUSH
69398: LD_INT 2
69400: PUSH
69401: EMPTY
69402: LIST
69403: LIST
69404: PUSH
69405: EMPTY
69406: LIST
69407: LIST
69408: LIST
69409: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69410: LD_ADDR_VAR 0 57
69414: PUSH
69415: LD_INT 2
69417: NEG
69418: PUSH
69419: LD_INT 1
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 3
69428: NEG
69429: PUSH
69430: LD_INT 0
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PUSH
69437: LD_INT 3
69439: NEG
69440: PUSH
69441: LD_INT 1
69443: NEG
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: LIST
69453: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69454: LD_ADDR_VAR 0 58
69458: PUSH
69459: LD_INT 2
69461: NEG
69462: PUSH
69463: LD_INT 3
69465: NEG
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: PUSH
69471: LD_INT 3
69473: NEG
69474: PUSH
69475: LD_INT 2
69477: NEG
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PUSH
69483: LD_INT 3
69485: NEG
69486: PUSH
69487: LD_INT 3
69489: NEG
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: LIST
69499: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69500: LD_ADDR_VAR 0 59
69504: PUSH
69505: LD_INT 1
69507: NEG
69508: PUSH
69509: LD_INT 2
69511: NEG
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 0
69519: PUSH
69520: LD_INT 2
69522: NEG
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_INT 1
69530: PUSH
69531: LD_INT 1
69533: NEG
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: LIST
69543: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69544: LD_ADDR_VAR 0 60
69548: PUSH
69549: LD_INT 1
69551: PUSH
69552: LD_INT 1
69554: NEG
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PUSH
69560: LD_INT 2
69562: PUSH
69563: LD_INT 0
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PUSH
69570: LD_INT 2
69572: PUSH
69573: LD_INT 1
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: LIST
69584: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69585: LD_ADDR_VAR 0 61
69589: PUSH
69590: LD_INT 2
69592: PUSH
69593: LD_INT 1
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: LD_INT 2
69602: PUSH
69603: LD_INT 2
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: LD_INT 1
69612: PUSH
69613: LD_INT 2
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: LIST
69624: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69625: LD_ADDR_VAR 0 62
69629: PUSH
69630: LD_INT 1
69632: PUSH
69633: LD_INT 2
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 0
69642: PUSH
69643: LD_INT 2
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: LD_INT 1
69652: NEG
69653: PUSH
69654: LD_INT 1
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: LIST
69665: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69666: LD_ADDR_VAR 0 63
69670: PUSH
69671: LD_INT 1
69673: NEG
69674: PUSH
69675: LD_INT 1
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: LD_INT 2
69684: NEG
69685: PUSH
69686: LD_INT 0
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: PUSH
69693: LD_INT 2
69695: NEG
69696: PUSH
69697: LD_INT 1
69699: NEG
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: LIST
69709: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69710: LD_ADDR_VAR 0 64
69714: PUSH
69715: LD_INT 1
69717: NEG
69718: PUSH
69719: LD_INT 2
69721: NEG
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: PUSH
69727: LD_INT 2
69729: NEG
69730: PUSH
69731: LD_INT 1
69733: NEG
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 2
69741: NEG
69742: PUSH
69743: LD_INT 2
69745: NEG
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: LIST
69755: ST_TO_ADDR
// end ; 2 :
69756: GO 73022
69758: LD_INT 2
69760: DOUBLE
69761: EQUAL
69762: IFTRUE 69766
69764: GO 73021
69766: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69767: LD_ADDR_VAR 0 29
69771: PUSH
69772: LD_INT 4
69774: PUSH
69775: LD_INT 0
69777: PUSH
69778: EMPTY
69779: LIST
69780: LIST
69781: PUSH
69782: LD_INT 4
69784: PUSH
69785: LD_INT 1
69787: NEG
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: PUSH
69793: LD_INT 5
69795: PUSH
69796: LD_INT 0
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_INT 5
69805: PUSH
69806: LD_INT 1
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 4
69815: PUSH
69816: LD_INT 1
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 3
69825: PUSH
69826: LD_INT 0
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PUSH
69833: LD_INT 3
69835: PUSH
69836: LD_INT 1
69838: NEG
69839: PUSH
69840: EMPTY
69841: LIST
69842: LIST
69843: PUSH
69844: LD_INT 3
69846: PUSH
69847: LD_INT 2
69849: NEG
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: LD_INT 5
69857: PUSH
69858: LD_INT 2
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: LD_INT 3
69867: PUSH
69868: LD_INT 3
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: LD_INT 3
69877: PUSH
69878: LD_INT 2
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 4
69887: PUSH
69888: LD_INT 3
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_INT 4
69897: PUSH
69898: LD_INT 4
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 3
69907: PUSH
69908: LD_INT 4
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 2
69917: PUSH
69918: LD_INT 3
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_INT 2
69927: PUSH
69928: LD_INT 2
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: LD_INT 4
69937: PUSH
69938: LD_INT 2
69940: PUSH
69941: EMPTY
69942: LIST
69943: LIST
69944: PUSH
69945: LD_INT 2
69947: PUSH
69948: LD_INT 4
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: PUSH
69955: LD_INT 0
69957: PUSH
69958: LD_INT 4
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 0
69967: PUSH
69968: LD_INT 3
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 1
69977: PUSH
69978: LD_INT 4
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 1
69987: PUSH
69988: LD_INT 5
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: LD_INT 0
69997: PUSH
69998: LD_INT 5
70000: PUSH
70001: EMPTY
70002: LIST
70003: LIST
70004: PUSH
70005: LD_INT 1
70007: NEG
70008: PUSH
70009: LD_INT 4
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: LD_INT 1
70018: NEG
70019: PUSH
70020: LD_INT 3
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: LD_INT 2
70029: PUSH
70030: LD_INT 5
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: PUSH
70037: LD_INT 2
70039: NEG
70040: PUSH
70041: LD_INT 3
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 3
70050: NEG
70051: PUSH
70052: LD_INT 0
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: PUSH
70059: LD_INT 3
70061: NEG
70062: PUSH
70063: LD_INT 1
70065: NEG
70066: PUSH
70067: EMPTY
70068: LIST
70069: LIST
70070: PUSH
70071: LD_INT 2
70073: NEG
70074: PUSH
70075: LD_INT 0
70077: PUSH
70078: EMPTY
70079: LIST
70080: LIST
70081: PUSH
70082: LD_INT 2
70084: NEG
70085: PUSH
70086: LD_INT 1
70088: PUSH
70089: EMPTY
70090: LIST
70091: LIST
70092: PUSH
70093: LD_INT 3
70095: NEG
70096: PUSH
70097: LD_INT 1
70099: PUSH
70100: EMPTY
70101: LIST
70102: LIST
70103: PUSH
70104: LD_INT 4
70106: NEG
70107: PUSH
70108: LD_INT 0
70110: PUSH
70111: EMPTY
70112: LIST
70113: LIST
70114: PUSH
70115: LD_INT 4
70117: NEG
70118: PUSH
70119: LD_INT 1
70121: NEG
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: PUSH
70127: LD_INT 4
70129: NEG
70130: PUSH
70131: LD_INT 2
70133: NEG
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PUSH
70139: LD_INT 2
70141: NEG
70142: PUSH
70143: LD_INT 2
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: PUSH
70150: LD_INT 4
70152: NEG
70153: PUSH
70154: LD_INT 4
70156: NEG
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PUSH
70162: LD_INT 4
70164: NEG
70165: PUSH
70166: LD_INT 5
70168: NEG
70169: PUSH
70170: EMPTY
70171: LIST
70172: LIST
70173: PUSH
70174: LD_INT 3
70176: NEG
70177: PUSH
70178: LD_INT 4
70180: NEG
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: LD_INT 3
70188: NEG
70189: PUSH
70190: LD_INT 3
70192: NEG
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: PUSH
70198: LD_INT 4
70200: NEG
70201: PUSH
70202: LD_INT 3
70204: NEG
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: LD_INT 5
70212: NEG
70213: PUSH
70214: LD_INT 4
70216: NEG
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 5
70224: NEG
70225: PUSH
70226: LD_INT 5
70228: NEG
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: PUSH
70234: LD_INT 3
70236: NEG
70237: PUSH
70238: LD_INT 5
70240: NEG
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: LD_INT 5
70248: NEG
70249: PUSH
70250: LD_INT 3
70252: NEG
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: LIST
70265: LIST
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: LIST
70271: LIST
70272: LIST
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70305: LD_ADDR_VAR 0 30
70309: PUSH
70310: LD_INT 4
70312: PUSH
70313: LD_INT 4
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: LD_INT 4
70322: PUSH
70323: LD_INT 3
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 5
70332: PUSH
70333: LD_INT 4
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: PUSH
70340: LD_INT 5
70342: PUSH
70343: LD_INT 5
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: LD_INT 4
70352: PUSH
70353: LD_INT 5
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: PUSH
70360: LD_INT 3
70362: PUSH
70363: LD_INT 4
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: LD_INT 3
70372: PUSH
70373: LD_INT 3
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: LD_INT 5
70382: PUSH
70383: LD_INT 3
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 3
70392: PUSH
70393: LD_INT 5
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: PUSH
70400: LD_INT 0
70402: PUSH
70403: LD_INT 3
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PUSH
70410: LD_INT 0
70412: PUSH
70413: LD_INT 2
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: LD_INT 1
70422: PUSH
70423: LD_INT 3
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: PUSH
70430: LD_INT 1
70432: PUSH
70433: LD_INT 4
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 0
70442: PUSH
70443: LD_INT 4
70445: PUSH
70446: EMPTY
70447: LIST
70448: LIST
70449: PUSH
70450: LD_INT 1
70452: NEG
70453: PUSH
70454: LD_INT 3
70456: PUSH
70457: EMPTY
70458: LIST
70459: LIST
70460: PUSH
70461: LD_INT 1
70463: NEG
70464: PUSH
70465: LD_INT 2
70467: PUSH
70468: EMPTY
70469: LIST
70470: LIST
70471: PUSH
70472: LD_INT 2
70474: PUSH
70475: LD_INT 4
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: PUSH
70482: LD_INT 2
70484: NEG
70485: PUSH
70486: LD_INT 2
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: PUSH
70493: LD_INT 4
70495: NEG
70496: PUSH
70497: LD_INT 0
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: PUSH
70504: LD_INT 4
70506: NEG
70507: PUSH
70508: LD_INT 1
70510: NEG
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: PUSH
70516: LD_INT 3
70518: NEG
70519: PUSH
70520: LD_INT 0
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: PUSH
70527: LD_INT 3
70529: NEG
70530: PUSH
70531: LD_INT 1
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: LD_INT 4
70540: NEG
70541: PUSH
70542: LD_INT 1
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: PUSH
70549: LD_INT 5
70551: NEG
70552: PUSH
70553: LD_INT 0
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: PUSH
70560: LD_INT 5
70562: NEG
70563: PUSH
70564: LD_INT 1
70566: NEG
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: PUSH
70572: LD_INT 5
70574: NEG
70575: PUSH
70576: LD_INT 2
70578: NEG
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PUSH
70584: LD_INT 3
70586: NEG
70587: PUSH
70588: LD_INT 2
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: PUSH
70595: LD_INT 3
70597: NEG
70598: PUSH
70599: LD_INT 3
70601: NEG
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: PUSH
70607: LD_INT 3
70609: NEG
70610: PUSH
70611: LD_INT 4
70613: NEG
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: PUSH
70619: LD_INT 2
70621: NEG
70622: PUSH
70623: LD_INT 3
70625: NEG
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 2
70633: NEG
70634: PUSH
70635: LD_INT 2
70637: NEG
70638: PUSH
70639: EMPTY
70640: LIST
70641: LIST
70642: PUSH
70643: LD_INT 3
70645: NEG
70646: PUSH
70647: LD_INT 2
70649: NEG
70650: PUSH
70651: EMPTY
70652: LIST
70653: LIST
70654: PUSH
70655: LD_INT 4
70657: NEG
70658: PUSH
70659: LD_INT 3
70661: NEG
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: LD_INT 4
70669: NEG
70670: PUSH
70671: LD_INT 4
70673: NEG
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: PUSH
70679: LD_INT 2
70681: NEG
70682: PUSH
70683: LD_INT 4
70685: NEG
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: LD_INT 4
70693: NEG
70694: PUSH
70695: LD_INT 2
70697: NEG
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: LD_INT 0
70705: PUSH
70706: LD_INT 4
70708: NEG
70709: PUSH
70710: EMPTY
70711: LIST
70712: LIST
70713: PUSH
70714: LD_INT 0
70716: PUSH
70717: LD_INT 5
70719: NEG
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: PUSH
70725: LD_INT 1
70727: PUSH
70728: LD_INT 4
70730: NEG
70731: PUSH
70732: EMPTY
70733: LIST
70734: LIST
70735: PUSH
70736: LD_INT 1
70738: PUSH
70739: LD_INT 3
70741: NEG
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: PUSH
70747: LD_INT 0
70749: PUSH
70750: LD_INT 3
70752: NEG
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: PUSH
70758: LD_INT 1
70760: NEG
70761: PUSH
70762: LD_INT 4
70764: NEG
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: PUSH
70770: LD_INT 1
70772: NEG
70773: PUSH
70774: LD_INT 5
70776: NEG
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: PUSH
70782: LD_INT 2
70784: PUSH
70785: LD_INT 3
70787: NEG
70788: PUSH
70789: EMPTY
70790: LIST
70791: LIST
70792: PUSH
70793: LD_INT 2
70795: NEG
70796: PUSH
70797: LD_INT 5
70799: NEG
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: LIST
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70852: LD_ADDR_VAR 0 31
70856: PUSH
70857: LD_INT 0
70859: PUSH
70860: LD_INT 4
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: LD_INT 0
70869: PUSH
70870: LD_INT 3
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: PUSH
70877: LD_INT 1
70879: PUSH
70880: LD_INT 4
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: PUSH
70887: LD_INT 1
70889: PUSH
70890: LD_INT 5
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: PUSH
70897: LD_INT 0
70899: PUSH
70900: LD_INT 5
70902: PUSH
70903: EMPTY
70904: LIST
70905: LIST
70906: PUSH
70907: LD_INT 1
70909: NEG
70910: PUSH
70911: LD_INT 4
70913: PUSH
70914: EMPTY
70915: LIST
70916: LIST
70917: PUSH
70918: LD_INT 1
70920: NEG
70921: PUSH
70922: LD_INT 3
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: PUSH
70929: LD_INT 2
70931: PUSH
70932: LD_INT 5
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: PUSH
70939: LD_INT 2
70941: NEG
70942: PUSH
70943: LD_INT 3
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: PUSH
70950: LD_INT 3
70952: NEG
70953: PUSH
70954: LD_INT 0
70956: PUSH
70957: EMPTY
70958: LIST
70959: LIST
70960: PUSH
70961: LD_INT 3
70963: NEG
70964: PUSH
70965: LD_INT 1
70967: NEG
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: PUSH
70973: LD_INT 2
70975: NEG
70976: PUSH
70977: LD_INT 0
70979: PUSH
70980: EMPTY
70981: LIST
70982: LIST
70983: PUSH
70984: LD_INT 2
70986: NEG
70987: PUSH
70988: LD_INT 1
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: PUSH
70995: LD_INT 3
70997: NEG
70998: PUSH
70999: LD_INT 1
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PUSH
71006: LD_INT 4
71008: NEG
71009: PUSH
71010: LD_INT 0
71012: PUSH
71013: EMPTY
71014: LIST
71015: LIST
71016: PUSH
71017: LD_INT 4
71019: NEG
71020: PUSH
71021: LD_INT 1
71023: NEG
71024: PUSH
71025: EMPTY
71026: LIST
71027: LIST
71028: PUSH
71029: LD_INT 4
71031: NEG
71032: PUSH
71033: LD_INT 2
71035: NEG
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: PUSH
71041: LD_INT 2
71043: NEG
71044: PUSH
71045: LD_INT 2
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: PUSH
71052: LD_INT 4
71054: NEG
71055: PUSH
71056: LD_INT 4
71058: NEG
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: PUSH
71064: LD_INT 4
71066: NEG
71067: PUSH
71068: LD_INT 5
71070: NEG
71071: PUSH
71072: EMPTY
71073: LIST
71074: LIST
71075: PUSH
71076: LD_INT 3
71078: NEG
71079: PUSH
71080: LD_INT 4
71082: NEG
71083: PUSH
71084: EMPTY
71085: LIST
71086: LIST
71087: PUSH
71088: LD_INT 3
71090: NEG
71091: PUSH
71092: LD_INT 3
71094: NEG
71095: PUSH
71096: EMPTY
71097: LIST
71098: LIST
71099: PUSH
71100: LD_INT 4
71102: NEG
71103: PUSH
71104: LD_INT 3
71106: NEG
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: LD_INT 5
71114: NEG
71115: PUSH
71116: LD_INT 4
71118: NEG
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: LD_INT 5
71126: NEG
71127: PUSH
71128: LD_INT 5
71130: NEG
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: PUSH
71136: LD_INT 3
71138: NEG
71139: PUSH
71140: LD_INT 5
71142: NEG
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: PUSH
71148: LD_INT 5
71150: NEG
71151: PUSH
71152: LD_INT 3
71154: NEG
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: PUSH
71160: LD_INT 0
71162: PUSH
71163: LD_INT 3
71165: NEG
71166: PUSH
71167: EMPTY
71168: LIST
71169: LIST
71170: PUSH
71171: LD_INT 0
71173: PUSH
71174: LD_INT 4
71176: NEG
71177: PUSH
71178: EMPTY
71179: LIST
71180: LIST
71181: PUSH
71182: LD_INT 1
71184: PUSH
71185: LD_INT 3
71187: NEG
71188: PUSH
71189: EMPTY
71190: LIST
71191: LIST
71192: PUSH
71193: LD_INT 1
71195: PUSH
71196: LD_INT 2
71198: NEG
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: PUSH
71204: LD_INT 0
71206: PUSH
71207: LD_INT 2
71209: NEG
71210: PUSH
71211: EMPTY
71212: LIST
71213: LIST
71214: PUSH
71215: LD_INT 1
71217: NEG
71218: PUSH
71219: LD_INT 3
71221: NEG
71222: PUSH
71223: EMPTY
71224: LIST
71225: LIST
71226: PUSH
71227: LD_INT 1
71229: NEG
71230: PUSH
71231: LD_INT 4
71233: NEG
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: PUSH
71239: LD_INT 2
71241: PUSH
71242: LD_INT 2
71244: NEG
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: PUSH
71250: LD_INT 2
71252: NEG
71253: PUSH
71254: LD_INT 4
71256: NEG
71257: PUSH
71258: EMPTY
71259: LIST
71260: LIST
71261: PUSH
71262: LD_INT 4
71264: PUSH
71265: LD_INT 0
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: PUSH
71272: LD_INT 4
71274: PUSH
71275: LD_INT 1
71277: NEG
71278: PUSH
71279: EMPTY
71280: LIST
71281: LIST
71282: PUSH
71283: LD_INT 5
71285: PUSH
71286: LD_INT 0
71288: PUSH
71289: EMPTY
71290: LIST
71291: LIST
71292: PUSH
71293: LD_INT 5
71295: PUSH
71296: LD_INT 1
71298: PUSH
71299: EMPTY
71300: LIST
71301: LIST
71302: PUSH
71303: LD_INT 4
71305: PUSH
71306: LD_INT 1
71308: PUSH
71309: EMPTY
71310: LIST
71311: LIST
71312: PUSH
71313: LD_INT 3
71315: PUSH
71316: LD_INT 0
71318: PUSH
71319: EMPTY
71320: LIST
71321: LIST
71322: PUSH
71323: LD_INT 3
71325: PUSH
71326: LD_INT 1
71328: NEG
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: PUSH
71334: LD_INT 3
71336: PUSH
71337: LD_INT 2
71339: NEG
71340: PUSH
71341: EMPTY
71342: LIST
71343: LIST
71344: PUSH
71345: LD_INT 5
71347: PUSH
71348: LD_INT 2
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: PUSH
71355: EMPTY
71356: LIST
71357: LIST
71358: LIST
71359: LIST
71360: LIST
71361: LIST
71362: LIST
71363: LIST
71364: LIST
71365: LIST
71366: LIST
71367: LIST
71368: LIST
71369: LIST
71370: LIST
71371: LIST
71372: LIST
71373: LIST
71374: LIST
71375: LIST
71376: LIST
71377: LIST
71378: LIST
71379: LIST
71380: LIST
71381: LIST
71382: LIST
71383: LIST
71384: LIST
71385: LIST
71386: LIST
71387: LIST
71388: LIST
71389: LIST
71390: LIST
71391: LIST
71392: LIST
71393: LIST
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71402: LD_ADDR_VAR 0 32
71406: PUSH
71407: LD_INT 4
71409: NEG
71410: PUSH
71411: LD_INT 0
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: LD_INT 4
71420: NEG
71421: PUSH
71422: LD_INT 1
71424: NEG
71425: PUSH
71426: EMPTY
71427: LIST
71428: LIST
71429: PUSH
71430: LD_INT 3
71432: NEG
71433: PUSH
71434: LD_INT 0
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: PUSH
71441: LD_INT 3
71443: NEG
71444: PUSH
71445: LD_INT 1
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: PUSH
71452: LD_INT 4
71454: NEG
71455: PUSH
71456: LD_INT 1
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: PUSH
71463: LD_INT 5
71465: NEG
71466: PUSH
71467: LD_INT 0
71469: PUSH
71470: EMPTY
71471: LIST
71472: LIST
71473: PUSH
71474: LD_INT 5
71476: NEG
71477: PUSH
71478: LD_INT 1
71480: NEG
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: PUSH
71486: LD_INT 5
71488: NEG
71489: PUSH
71490: LD_INT 2
71492: NEG
71493: PUSH
71494: EMPTY
71495: LIST
71496: LIST
71497: PUSH
71498: LD_INT 3
71500: NEG
71501: PUSH
71502: LD_INT 2
71504: PUSH
71505: EMPTY
71506: LIST
71507: LIST
71508: PUSH
71509: LD_INT 3
71511: NEG
71512: PUSH
71513: LD_INT 3
71515: NEG
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: PUSH
71521: LD_INT 3
71523: NEG
71524: PUSH
71525: LD_INT 4
71527: NEG
71528: PUSH
71529: EMPTY
71530: LIST
71531: LIST
71532: PUSH
71533: LD_INT 2
71535: NEG
71536: PUSH
71537: LD_INT 3
71539: NEG
71540: PUSH
71541: EMPTY
71542: LIST
71543: LIST
71544: PUSH
71545: LD_INT 2
71547: NEG
71548: PUSH
71549: LD_INT 2
71551: NEG
71552: PUSH
71553: EMPTY
71554: LIST
71555: LIST
71556: PUSH
71557: LD_INT 3
71559: NEG
71560: PUSH
71561: LD_INT 2
71563: NEG
71564: PUSH
71565: EMPTY
71566: LIST
71567: LIST
71568: PUSH
71569: LD_INT 4
71571: NEG
71572: PUSH
71573: LD_INT 3
71575: NEG
71576: PUSH
71577: EMPTY
71578: LIST
71579: LIST
71580: PUSH
71581: LD_INT 4
71583: NEG
71584: PUSH
71585: LD_INT 4
71587: NEG
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: PUSH
71593: LD_INT 2
71595: NEG
71596: PUSH
71597: LD_INT 4
71599: NEG
71600: PUSH
71601: EMPTY
71602: LIST
71603: LIST
71604: PUSH
71605: LD_INT 4
71607: NEG
71608: PUSH
71609: LD_INT 2
71611: NEG
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PUSH
71617: LD_INT 0
71619: PUSH
71620: LD_INT 4
71622: NEG
71623: PUSH
71624: EMPTY
71625: LIST
71626: LIST
71627: PUSH
71628: LD_INT 0
71630: PUSH
71631: LD_INT 5
71633: NEG
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PUSH
71639: LD_INT 1
71641: PUSH
71642: LD_INT 4
71644: NEG
71645: PUSH
71646: EMPTY
71647: LIST
71648: LIST
71649: PUSH
71650: LD_INT 1
71652: PUSH
71653: LD_INT 3
71655: NEG
71656: PUSH
71657: EMPTY
71658: LIST
71659: LIST
71660: PUSH
71661: LD_INT 0
71663: PUSH
71664: LD_INT 3
71666: NEG
71667: PUSH
71668: EMPTY
71669: LIST
71670: LIST
71671: PUSH
71672: LD_INT 1
71674: NEG
71675: PUSH
71676: LD_INT 4
71678: NEG
71679: PUSH
71680: EMPTY
71681: LIST
71682: LIST
71683: PUSH
71684: LD_INT 1
71686: NEG
71687: PUSH
71688: LD_INT 5
71690: NEG
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PUSH
71696: LD_INT 2
71698: PUSH
71699: LD_INT 3
71701: NEG
71702: PUSH
71703: EMPTY
71704: LIST
71705: LIST
71706: PUSH
71707: LD_INT 2
71709: NEG
71710: PUSH
71711: LD_INT 5
71713: NEG
71714: PUSH
71715: EMPTY
71716: LIST
71717: LIST
71718: PUSH
71719: LD_INT 3
71721: PUSH
71722: LD_INT 0
71724: PUSH
71725: EMPTY
71726: LIST
71727: LIST
71728: PUSH
71729: LD_INT 3
71731: PUSH
71732: LD_INT 1
71734: NEG
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: PUSH
71740: LD_INT 4
71742: PUSH
71743: LD_INT 0
71745: PUSH
71746: EMPTY
71747: LIST
71748: LIST
71749: PUSH
71750: LD_INT 4
71752: PUSH
71753: LD_INT 1
71755: PUSH
71756: EMPTY
71757: LIST
71758: LIST
71759: PUSH
71760: LD_INT 3
71762: PUSH
71763: LD_INT 1
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: PUSH
71770: LD_INT 2
71772: PUSH
71773: LD_INT 0
71775: PUSH
71776: EMPTY
71777: LIST
71778: LIST
71779: PUSH
71780: LD_INT 2
71782: PUSH
71783: LD_INT 1
71785: NEG
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: PUSH
71791: LD_INT 2
71793: PUSH
71794: LD_INT 2
71796: NEG
71797: PUSH
71798: EMPTY
71799: LIST
71800: LIST
71801: PUSH
71802: LD_INT 4
71804: PUSH
71805: LD_INT 2
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: PUSH
71812: LD_INT 4
71814: PUSH
71815: LD_INT 4
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: PUSH
71822: LD_INT 4
71824: PUSH
71825: LD_INT 3
71827: PUSH
71828: EMPTY
71829: LIST
71830: LIST
71831: PUSH
71832: LD_INT 5
71834: PUSH
71835: LD_INT 4
71837: PUSH
71838: EMPTY
71839: LIST
71840: LIST
71841: PUSH
71842: LD_INT 5
71844: PUSH
71845: LD_INT 5
71847: PUSH
71848: EMPTY
71849: LIST
71850: LIST
71851: PUSH
71852: LD_INT 4
71854: PUSH
71855: LD_INT 5
71857: PUSH
71858: EMPTY
71859: LIST
71860: LIST
71861: PUSH
71862: LD_INT 3
71864: PUSH
71865: LD_INT 4
71867: PUSH
71868: EMPTY
71869: LIST
71870: LIST
71871: PUSH
71872: LD_INT 3
71874: PUSH
71875: LD_INT 3
71877: PUSH
71878: EMPTY
71879: LIST
71880: LIST
71881: PUSH
71882: LD_INT 5
71884: PUSH
71885: LD_INT 3
71887: PUSH
71888: EMPTY
71889: LIST
71890: LIST
71891: PUSH
71892: LD_INT 3
71894: PUSH
71895: LD_INT 5
71897: PUSH
71898: EMPTY
71899: LIST
71900: LIST
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: LIST
71906: LIST
71907: LIST
71908: LIST
71909: LIST
71910: LIST
71911: LIST
71912: LIST
71913: LIST
71914: LIST
71915: LIST
71916: LIST
71917: LIST
71918: LIST
71919: LIST
71920: LIST
71921: LIST
71922: LIST
71923: LIST
71924: LIST
71925: LIST
71926: LIST
71927: LIST
71928: LIST
71929: LIST
71930: LIST
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: LIST
71938: LIST
71939: LIST
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: LIST
71947: LIST
71948: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71949: LD_ADDR_VAR 0 33
71953: PUSH
71954: LD_INT 4
71956: NEG
71957: PUSH
71958: LD_INT 4
71960: NEG
71961: PUSH
71962: EMPTY
71963: LIST
71964: LIST
71965: PUSH
71966: LD_INT 4
71968: NEG
71969: PUSH
71970: LD_INT 5
71972: NEG
71973: PUSH
71974: EMPTY
71975: LIST
71976: LIST
71977: PUSH
71978: LD_INT 3
71980: NEG
71981: PUSH
71982: LD_INT 4
71984: NEG
71985: PUSH
71986: EMPTY
71987: LIST
71988: LIST
71989: PUSH
71990: LD_INT 3
71992: NEG
71993: PUSH
71994: LD_INT 3
71996: NEG
71997: PUSH
71998: EMPTY
71999: LIST
72000: LIST
72001: PUSH
72002: LD_INT 4
72004: NEG
72005: PUSH
72006: LD_INT 3
72008: NEG
72009: PUSH
72010: EMPTY
72011: LIST
72012: LIST
72013: PUSH
72014: LD_INT 5
72016: NEG
72017: PUSH
72018: LD_INT 4
72020: NEG
72021: PUSH
72022: EMPTY
72023: LIST
72024: LIST
72025: PUSH
72026: LD_INT 5
72028: NEG
72029: PUSH
72030: LD_INT 5
72032: NEG
72033: PUSH
72034: EMPTY
72035: LIST
72036: LIST
72037: PUSH
72038: LD_INT 3
72040: NEG
72041: PUSH
72042: LD_INT 5
72044: NEG
72045: PUSH
72046: EMPTY
72047: LIST
72048: LIST
72049: PUSH
72050: LD_INT 5
72052: NEG
72053: PUSH
72054: LD_INT 3
72056: NEG
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: PUSH
72062: LD_INT 0
72064: PUSH
72065: LD_INT 3
72067: NEG
72068: PUSH
72069: EMPTY
72070: LIST
72071: LIST
72072: PUSH
72073: LD_INT 0
72075: PUSH
72076: LD_INT 4
72078: NEG
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: PUSH
72084: LD_INT 1
72086: PUSH
72087: LD_INT 3
72089: NEG
72090: PUSH
72091: EMPTY
72092: LIST
72093: LIST
72094: PUSH
72095: LD_INT 1
72097: PUSH
72098: LD_INT 2
72100: NEG
72101: PUSH
72102: EMPTY
72103: LIST
72104: LIST
72105: PUSH
72106: LD_INT 0
72108: PUSH
72109: LD_INT 2
72111: NEG
72112: PUSH
72113: EMPTY
72114: LIST
72115: LIST
72116: PUSH
72117: LD_INT 1
72119: NEG
72120: PUSH
72121: LD_INT 3
72123: NEG
72124: PUSH
72125: EMPTY
72126: LIST
72127: LIST
72128: PUSH
72129: LD_INT 1
72131: NEG
72132: PUSH
72133: LD_INT 4
72135: NEG
72136: PUSH
72137: EMPTY
72138: LIST
72139: LIST
72140: PUSH
72141: LD_INT 2
72143: PUSH
72144: LD_INT 2
72146: NEG
72147: PUSH
72148: EMPTY
72149: LIST
72150: LIST
72151: PUSH
72152: LD_INT 2
72154: NEG
72155: PUSH
72156: LD_INT 4
72158: NEG
72159: PUSH
72160: EMPTY
72161: LIST
72162: LIST
72163: PUSH
72164: LD_INT 4
72166: PUSH
72167: LD_INT 0
72169: PUSH
72170: EMPTY
72171: LIST
72172: LIST
72173: PUSH
72174: LD_INT 4
72176: PUSH
72177: LD_INT 1
72179: NEG
72180: PUSH
72181: EMPTY
72182: LIST
72183: LIST
72184: PUSH
72185: LD_INT 5
72187: PUSH
72188: LD_INT 0
72190: PUSH
72191: EMPTY
72192: LIST
72193: LIST
72194: PUSH
72195: LD_INT 5
72197: PUSH
72198: LD_INT 1
72200: PUSH
72201: EMPTY
72202: LIST
72203: LIST
72204: PUSH
72205: LD_INT 4
72207: PUSH
72208: LD_INT 1
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: PUSH
72215: LD_INT 3
72217: PUSH
72218: LD_INT 0
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: PUSH
72225: LD_INT 3
72227: PUSH
72228: LD_INT 1
72230: NEG
72231: PUSH
72232: EMPTY
72233: LIST
72234: LIST
72235: PUSH
72236: LD_INT 3
72238: PUSH
72239: LD_INT 2
72241: NEG
72242: PUSH
72243: EMPTY
72244: LIST
72245: LIST
72246: PUSH
72247: LD_INT 5
72249: PUSH
72250: LD_INT 2
72252: PUSH
72253: EMPTY
72254: LIST
72255: LIST
72256: PUSH
72257: LD_INT 3
72259: PUSH
72260: LD_INT 3
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: LD_INT 3
72269: PUSH
72270: LD_INT 2
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: PUSH
72277: LD_INT 4
72279: PUSH
72280: LD_INT 3
72282: PUSH
72283: EMPTY
72284: LIST
72285: LIST
72286: PUSH
72287: LD_INT 4
72289: PUSH
72290: LD_INT 4
72292: PUSH
72293: EMPTY
72294: LIST
72295: LIST
72296: PUSH
72297: LD_INT 3
72299: PUSH
72300: LD_INT 4
72302: PUSH
72303: EMPTY
72304: LIST
72305: LIST
72306: PUSH
72307: LD_INT 2
72309: PUSH
72310: LD_INT 3
72312: PUSH
72313: EMPTY
72314: LIST
72315: LIST
72316: PUSH
72317: LD_INT 2
72319: PUSH
72320: LD_INT 2
72322: PUSH
72323: EMPTY
72324: LIST
72325: LIST
72326: PUSH
72327: LD_INT 4
72329: PUSH
72330: LD_INT 2
72332: PUSH
72333: EMPTY
72334: LIST
72335: LIST
72336: PUSH
72337: LD_INT 2
72339: PUSH
72340: LD_INT 4
72342: PUSH
72343: EMPTY
72344: LIST
72345: LIST
72346: PUSH
72347: LD_INT 0
72349: PUSH
72350: LD_INT 4
72352: PUSH
72353: EMPTY
72354: LIST
72355: LIST
72356: PUSH
72357: LD_INT 0
72359: PUSH
72360: LD_INT 3
72362: PUSH
72363: EMPTY
72364: LIST
72365: LIST
72366: PUSH
72367: LD_INT 1
72369: PUSH
72370: LD_INT 4
72372: PUSH
72373: EMPTY
72374: LIST
72375: LIST
72376: PUSH
72377: LD_INT 1
72379: PUSH
72380: LD_INT 5
72382: PUSH
72383: EMPTY
72384: LIST
72385: LIST
72386: PUSH
72387: LD_INT 0
72389: PUSH
72390: LD_INT 5
72392: PUSH
72393: EMPTY
72394: LIST
72395: LIST
72396: PUSH
72397: LD_INT 1
72399: NEG
72400: PUSH
72401: LD_INT 4
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PUSH
72408: LD_INT 1
72410: NEG
72411: PUSH
72412: LD_INT 3
72414: PUSH
72415: EMPTY
72416: LIST
72417: LIST
72418: PUSH
72419: LD_INT 2
72421: PUSH
72422: LD_INT 5
72424: PUSH
72425: EMPTY
72426: LIST
72427: LIST
72428: PUSH
72429: LD_INT 2
72431: NEG
72432: PUSH
72433: LD_INT 3
72435: PUSH
72436: EMPTY
72437: LIST
72438: LIST
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: LIST
72444: LIST
72445: LIST
72446: LIST
72447: LIST
72448: LIST
72449: LIST
72450: LIST
72451: LIST
72452: LIST
72453: LIST
72454: LIST
72455: LIST
72456: LIST
72457: LIST
72458: LIST
72459: LIST
72460: LIST
72461: LIST
72462: LIST
72463: LIST
72464: LIST
72465: LIST
72466: LIST
72467: LIST
72468: LIST
72469: LIST
72470: LIST
72471: LIST
72472: LIST
72473: LIST
72474: LIST
72475: LIST
72476: LIST
72477: LIST
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: LIST
72486: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72487: LD_ADDR_VAR 0 34
72491: PUSH
72492: LD_INT 0
72494: PUSH
72495: LD_INT 4
72497: NEG
72498: PUSH
72499: EMPTY
72500: LIST
72501: LIST
72502: PUSH
72503: LD_INT 0
72505: PUSH
72506: LD_INT 5
72508: NEG
72509: PUSH
72510: EMPTY
72511: LIST
72512: LIST
72513: PUSH
72514: LD_INT 1
72516: PUSH
72517: LD_INT 4
72519: NEG
72520: PUSH
72521: EMPTY
72522: LIST
72523: LIST
72524: PUSH
72525: LD_INT 1
72527: PUSH
72528: LD_INT 3
72530: NEG
72531: PUSH
72532: EMPTY
72533: LIST
72534: LIST
72535: PUSH
72536: LD_INT 0
72538: PUSH
72539: LD_INT 3
72541: NEG
72542: PUSH
72543: EMPTY
72544: LIST
72545: LIST
72546: PUSH
72547: LD_INT 1
72549: NEG
72550: PUSH
72551: LD_INT 4
72553: NEG
72554: PUSH
72555: EMPTY
72556: LIST
72557: LIST
72558: PUSH
72559: LD_INT 1
72561: NEG
72562: PUSH
72563: LD_INT 5
72565: NEG
72566: PUSH
72567: EMPTY
72568: LIST
72569: LIST
72570: PUSH
72571: LD_INT 2
72573: PUSH
72574: LD_INT 3
72576: NEG
72577: PUSH
72578: EMPTY
72579: LIST
72580: LIST
72581: PUSH
72582: LD_INT 2
72584: NEG
72585: PUSH
72586: LD_INT 5
72588: NEG
72589: PUSH
72590: EMPTY
72591: LIST
72592: LIST
72593: PUSH
72594: LD_INT 3
72596: PUSH
72597: LD_INT 0
72599: PUSH
72600: EMPTY
72601: LIST
72602: LIST
72603: PUSH
72604: LD_INT 3
72606: PUSH
72607: LD_INT 1
72609: NEG
72610: PUSH
72611: EMPTY
72612: LIST
72613: LIST
72614: PUSH
72615: LD_INT 4
72617: PUSH
72618: LD_INT 0
72620: PUSH
72621: EMPTY
72622: LIST
72623: LIST
72624: PUSH
72625: LD_INT 4
72627: PUSH
72628: LD_INT 1
72630: PUSH
72631: EMPTY
72632: LIST
72633: LIST
72634: PUSH
72635: LD_INT 3
72637: PUSH
72638: LD_INT 1
72640: PUSH
72641: EMPTY
72642: LIST
72643: LIST
72644: PUSH
72645: LD_INT 2
72647: PUSH
72648: LD_INT 0
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: PUSH
72655: LD_INT 2
72657: PUSH
72658: LD_INT 1
72660: NEG
72661: PUSH
72662: EMPTY
72663: LIST
72664: LIST
72665: PUSH
72666: LD_INT 2
72668: PUSH
72669: LD_INT 2
72671: NEG
72672: PUSH
72673: EMPTY
72674: LIST
72675: LIST
72676: PUSH
72677: LD_INT 4
72679: PUSH
72680: LD_INT 2
72682: PUSH
72683: EMPTY
72684: LIST
72685: LIST
72686: PUSH
72687: LD_INT 4
72689: PUSH
72690: LD_INT 4
72692: PUSH
72693: EMPTY
72694: LIST
72695: LIST
72696: PUSH
72697: LD_INT 4
72699: PUSH
72700: LD_INT 3
72702: PUSH
72703: EMPTY
72704: LIST
72705: LIST
72706: PUSH
72707: LD_INT 5
72709: PUSH
72710: LD_INT 4
72712: PUSH
72713: EMPTY
72714: LIST
72715: LIST
72716: PUSH
72717: LD_INT 5
72719: PUSH
72720: LD_INT 5
72722: PUSH
72723: EMPTY
72724: LIST
72725: LIST
72726: PUSH
72727: LD_INT 4
72729: PUSH
72730: LD_INT 5
72732: PUSH
72733: EMPTY
72734: LIST
72735: LIST
72736: PUSH
72737: LD_INT 3
72739: PUSH
72740: LD_INT 4
72742: PUSH
72743: EMPTY
72744: LIST
72745: LIST
72746: PUSH
72747: LD_INT 3
72749: PUSH
72750: LD_INT 3
72752: PUSH
72753: EMPTY
72754: LIST
72755: LIST
72756: PUSH
72757: LD_INT 5
72759: PUSH
72760: LD_INT 3
72762: PUSH
72763: EMPTY
72764: LIST
72765: LIST
72766: PUSH
72767: LD_INT 3
72769: PUSH
72770: LD_INT 5
72772: PUSH
72773: EMPTY
72774: LIST
72775: LIST
72776: PUSH
72777: LD_INT 0
72779: PUSH
72780: LD_INT 3
72782: PUSH
72783: EMPTY
72784: LIST
72785: LIST
72786: PUSH
72787: LD_INT 0
72789: PUSH
72790: LD_INT 2
72792: PUSH
72793: EMPTY
72794: LIST
72795: LIST
72796: PUSH
72797: LD_INT 1
72799: PUSH
72800: LD_INT 3
72802: PUSH
72803: EMPTY
72804: LIST
72805: LIST
72806: PUSH
72807: LD_INT 1
72809: PUSH
72810: LD_INT 4
72812: PUSH
72813: EMPTY
72814: LIST
72815: LIST
72816: PUSH
72817: LD_INT 0
72819: PUSH
72820: LD_INT 4
72822: PUSH
72823: EMPTY
72824: LIST
72825: LIST
72826: PUSH
72827: LD_INT 1
72829: NEG
72830: PUSH
72831: LD_INT 3
72833: PUSH
72834: EMPTY
72835: LIST
72836: LIST
72837: PUSH
72838: LD_INT 1
72840: NEG
72841: PUSH
72842: LD_INT 2
72844: PUSH
72845: EMPTY
72846: LIST
72847: LIST
72848: PUSH
72849: LD_INT 2
72851: PUSH
72852: LD_INT 4
72854: PUSH
72855: EMPTY
72856: LIST
72857: LIST
72858: PUSH
72859: LD_INT 2
72861: NEG
72862: PUSH
72863: LD_INT 2
72865: PUSH
72866: EMPTY
72867: LIST
72868: LIST
72869: PUSH
72870: LD_INT 4
72872: NEG
72873: PUSH
72874: LD_INT 0
72876: PUSH
72877: EMPTY
72878: LIST
72879: LIST
72880: PUSH
72881: LD_INT 4
72883: NEG
72884: PUSH
72885: LD_INT 1
72887: NEG
72888: PUSH
72889: EMPTY
72890: LIST
72891: LIST
72892: PUSH
72893: LD_INT 3
72895: NEG
72896: PUSH
72897: LD_INT 0
72899: PUSH
72900: EMPTY
72901: LIST
72902: LIST
72903: PUSH
72904: LD_INT 3
72906: NEG
72907: PUSH
72908: LD_INT 1
72910: PUSH
72911: EMPTY
72912: LIST
72913: LIST
72914: PUSH
72915: LD_INT 4
72917: NEG
72918: PUSH
72919: LD_INT 1
72921: PUSH
72922: EMPTY
72923: LIST
72924: LIST
72925: PUSH
72926: LD_INT 5
72928: NEG
72929: PUSH
72930: LD_INT 0
72932: PUSH
72933: EMPTY
72934: LIST
72935: LIST
72936: PUSH
72937: LD_INT 5
72939: NEG
72940: PUSH
72941: LD_INT 1
72943: NEG
72944: PUSH
72945: EMPTY
72946: LIST
72947: LIST
72948: PUSH
72949: LD_INT 5
72951: NEG
72952: PUSH
72953: LD_INT 2
72955: NEG
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: PUSH
72961: LD_INT 3
72963: NEG
72964: PUSH
72965: LD_INT 2
72967: PUSH
72968: EMPTY
72969: LIST
72970: LIST
72971: PUSH
72972: EMPTY
72973: LIST
72974: LIST
72975: LIST
72976: LIST
72977: LIST
72978: LIST
72979: LIST
72980: LIST
72981: LIST
72982: LIST
72983: LIST
72984: LIST
72985: LIST
72986: LIST
72987: LIST
72988: LIST
72989: LIST
72990: LIST
72991: LIST
72992: LIST
72993: LIST
72994: LIST
72995: LIST
72996: LIST
72997: LIST
72998: LIST
72999: LIST
73000: LIST
73001: LIST
73002: LIST
73003: LIST
73004: LIST
73005: LIST
73006: LIST
73007: LIST
73008: LIST
73009: LIST
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: LIST
73018: ST_TO_ADDR
// end ; end ;
73019: GO 73022
73021: POP
// case btype of b_depot , b_warehouse :
73022: LD_VAR 0 1
73026: PUSH
73027: LD_INT 0
73029: DOUBLE
73030: EQUAL
73031: IFTRUE 73041
73033: LD_INT 1
73035: DOUBLE
73036: EQUAL
73037: IFTRUE 73041
73039: GO 73242
73041: POP
// case nation of nation_american :
73042: LD_VAR 0 5
73046: PUSH
73047: LD_INT 1
73049: DOUBLE
73050: EQUAL
73051: IFTRUE 73055
73053: GO 73111
73055: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73056: LD_ADDR_VAR 0 9
73060: PUSH
73061: LD_VAR 0 11
73065: PUSH
73066: LD_VAR 0 12
73070: PUSH
73071: LD_VAR 0 13
73075: PUSH
73076: LD_VAR 0 14
73080: PUSH
73081: LD_VAR 0 15
73085: PUSH
73086: LD_VAR 0 16
73090: PUSH
73091: EMPTY
73092: LIST
73093: LIST
73094: LIST
73095: LIST
73096: LIST
73097: LIST
73098: PUSH
73099: LD_VAR 0 4
73103: PUSH
73104: LD_INT 1
73106: PLUS
73107: ARRAY
73108: ST_TO_ADDR
73109: GO 73240
73111: LD_INT 2
73113: DOUBLE
73114: EQUAL
73115: IFTRUE 73119
73117: GO 73175
73119: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73120: LD_ADDR_VAR 0 9
73124: PUSH
73125: LD_VAR 0 17
73129: PUSH
73130: LD_VAR 0 18
73134: PUSH
73135: LD_VAR 0 19
73139: PUSH
73140: LD_VAR 0 20
73144: PUSH
73145: LD_VAR 0 21
73149: PUSH
73150: LD_VAR 0 22
73154: PUSH
73155: EMPTY
73156: LIST
73157: LIST
73158: LIST
73159: LIST
73160: LIST
73161: LIST
73162: PUSH
73163: LD_VAR 0 4
73167: PUSH
73168: LD_INT 1
73170: PLUS
73171: ARRAY
73172: ST_TO_ADDR
73173: GO 73240
73175: LD_INT 3
73177: DOUBLE
73178: EQUAL
73179: IFTRUE 73183
73181: GO 73239
73183: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73184: LD_ADDR_VAR 0 9
73188: PUSH
73189: LD_VAR 0 23
73193: PUSH
73194: LD_VAR 0 24
73198: PUSH
73199: LD_VAR 0 25
73203: PUSH
73204: LD_VAR 0 26
73208: PUSH
73209: LD_VAR 0 27
73213: PUSH
73214: LD_VAR 0 28
73218: PUSH
73219: EMPTY
73220: LIST
73221: LIST
73222: LIST
73223: LIST
73224: LIST
73225: LIST
73226: PUSH
73227: LD_VAR 0 4
73231: PUSH
73232: LD_INT 1
73234: PLUS
73235: ARRAY
73236: ST_TO_ADDR
73237: GO 73240
73239: POP
73240: GO 73795
73242: LD_INT 2
73244: DOUBLE
73245: EQUAL
73246: IFTRUE 73256
73248: LD_INT 3
73250: DOUBLE
73251: EQUAL
73252: IFTRUE 73256
73254: GO 73312
73256: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73257: LD_ADDR_VAR 0 9
73261: PUSH
73262: LD_VAR 0 29
73266: PUSH
73267: LD_VAR 0 30
73271: PUSH
73272: LD_VAR 0 31
73276: PUSH
73277: LD_VAR 0 32
73281: PUSH
73282: LD_VAR 0 33
73286: PUSH
73287: LD_VAR 0 34
73291: PUSH
73292: EMPTY
73293: LIST
73294: LIST
73295: LIST
73296: LIST
73297: LIST
73298: LIST
73299: PUSH
73300: LD_VAR 0 4
73304: PUSH
73305: LD_INT 1
73307: PLUS
73308: ARRAY
73309: ST_TO_ADDR
73310: GO 73795
73312: LD_INT 16
73314: DOUBLE
73315: EQUAL
73316: IFTRUE 73374
73318: LD_INT 17
73320: DOUBLE
73321: EQUAL
73322: IFTRUE 73374
73324: LD_INT 18
73326: DOUBLE
73327: EQUAL
73328: IFTRUE 73374
73330: LD_INT 19
73332: DOUBLE
73333: EQUAL
73334: IFTRUE 73374
73336: LD_INT 22
73338: DOUBLE
73339: EQUAL
73340: IFTRUE 73374
73342: LD_INT 20
73344: DOUBLE
73345: EQUAL
73346: IFTRUE 73374
73348: LD_INT 21
73350: DOUBLE
73351: EQUAL
73352: IFTRUE 73374
73354: LD_INT 23
73356: DOUBLE
73357: EQUAL
73358: IFTRUE 73374
73360: LD_INT 24
73362: DOUBLE
73363: EQUAL
73364: IFTRUE 73374
73366: LD_INT 25
73368: DOUBLE
73369: EQUAL
73370: IFTRUE 73374
73372: GO 73430
73374: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73375: LD_ADDR_VAR 0 9
73379: PUSH
73380: LD_VAR 0 35
73384: PUSH
73385: LD_VAR 0 36
73389: PUSH
73390: LD_VAR 0 37
73394: PUSH
73395: LD_VAR 0 38
73399: PUSH
73400: LD_VAR 0 39
73404: PUSH
73405: LD_VAR 0 40
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: LIST
73414: LIST
73415: LIST
73416: LIST
73417: PUSH
73418: LD_VAR 0 4
73422: PUSH
73423: LD_INT 1
73425: PLUS
73426: ARRAY
73427: ST_TO_ADDR
73428: GO 73795
73430: LD_INT 6
73432: DOUBLE
73433: EQUAL
73434: IFTRUE 73486
73436: LD_INT 7
73438: DOUBLE
73439: EQUAL
73440: IFTRUE 73486
73442: LD_INT 8
73444: DOUBLE
73445: EQUAL
73446: IFTRUE 73486
73448: LD_INT 13
73450: DOUBLE
73451: EQUAL
73452: IFTRUE 73486
73454: LD_INT 12
73456: DOUBLE
73457: EQUAL
73458: IFTRUE 73486
73460: LD_INT 15
73462: DOUBLE
73463: EQUAL
73464: IFTRUE 73486
73466: LD_INT 11
73468: DOUBLE
73469: EQUAL
73470: IFTRUE 73486
73472: LD_INT 14
73474: DOUBLE
73475: EQUAL
73476: IFTRUE 73486
73478: LD_INT 10
73480: DOUBLE
73481: EQUAL
73482: IFTRUE 73486
73484: GO 73542
73486: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73487: LD_ADDR_VAR 0 9
73491: PUSH
73492: LD_VAR 0 41
73496: PUSH
73497: LD_VAR 0 42
73501: PUSH
73502: LD_VAR 0 43
73506: PUSH
73507: LD_VAR 0 44
73511: PUSH
73512: LD_VAR 0 45
73516: PUSH
73517: LD_VAR 0 46
73521: PUSH
73522: EMPTY
73523: LIST
73524: LIST
73525: LIST
73526: LIST
73527: LIST
73528: LIST
73529: PUSH
73530: LD_VAR 0 4
73534: PUSH
73535: LD_INT 1
73537: PLUS
73538: ARRAY
73539: ST_TO_ADDR
73540: GO 73795
73542: LD_INT 36
73544: DOUBLE
73545: EQUAL
73546: IFTRUE 73550
73548: GO 73606
73550: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73551: LD_ADDR_VAR 0 9
73555: PUSH
73556: LD_VAR 0 47
73560: PUSH
73561: LD_VAR 0 48
73565: PUSH
73566: LD_VAR 0 49
73570: PUSH
73571: LD_VAR 0 50
73575: PUSH
73576: LD_VAR 0 51
73580: PUSH
73581: LD_VAR 0 52
73585: PUSH
73586: EMPTY
73587: LIST
73588: LIST
73589: LIST
73590: LIST
73591: LIST
73592: LIST
73593: PUSH
73594: LD_VAR 0 4
73598: PUSH
73599: LD_INT 1
73601: PLUS
73602: ARRAY
73603: ST_TO_ADDR
73604: GO 73795
73606: LD_INT 4
73608: DOUBLE
73609: EQUAL
73610: IFTRUE 73632
73612: LD_INT 5
73614: DOUBLE
73615: EQUAL
73616: IFTRUE 73632
73618: LD_INT 34
73620: DOUBLE
73621: EQUAL
73622: IFTRUE 73632
73624: LD_INT 37
73626: DOUBLE
73627: EQUAL
73628: IFTRUE 73632
73630: GO 73688
73632: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73633: LD_ADDR_VAR 0 9
73637: PUSH
73638: LD_VAR 0 53
73642: PUSH
73643: LD_VAR 0 54
73647: PUSH
73648: LD_VAR 0 55
73652: PUSH
73653: LD_VAR 0 56
73657: PUSH
73658: LD_VAR 0 57
73662: PUSH
73663: LD_VAR 0 58
73667: PUSH
73668: EMPTY
73669: LIST
73670: LIST
73671: LIST
73672: LIST
73673: LIST
73674: LIST
73675: PUSH
73676: LD_VAR 0 4
73680: PUSH
73681: LD_INT 1
73683: PLUS
73684: ARRAY
73685: ST_TO_ADDR
73686: GO 73795
73688: LD_INT 31
73690: DOUBLE
73691: EQUAL
73692: IFTRUE 73738
73694: LD_INT 32
73696: DOUBLE
73697: EQUAL
73698: IFTRUE 73738
73700: LD_INT 33
73702: DOUBLE
73703: EQUAL
73704: IFTRUE 73738
73706: LD_INT 27
73708: DOUBLE
73709: EQUAL
73710: IFTRUE 73738
73712: LD_INT 26
73714: DOUBLE
73715: EQUAL
73716: IFTRUE 73738
73718: LD_INT 28
73720: DOUBLE
73721: EQUAL
73722: IFTRUE 73738
73724: LD_INT 29
73726: DOUBLE
73727: EQUAL
73728: IFTRUE 73738
73730: LD_INT 30
73732: DOUBLE
73733: EQUAL
73734: IFTRUE 73738
73736: GO 73794
73738: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73739: LD_ADDR_VAR 0 9
73743: PUSH
73744: LD_VAR 0 59
73748: PUSH
73749: LD_VAR 0 60
73753: PUSH
73754: LD_VAR 0 61
73758: PUSH
73759: LD_VAR 0 62
73763: PUSH
73764: LD_VAR 0 63
73768: PUSH
73769: LD_VAR 0 64
73773: PUSH
73774: EMPTY
73775: LIST
73776: LIST
73777: LIST
73778: LIST
73779: LIST
73780: LIST
73781: PUSH
73782: LD_VAR 0 4
73786: PUSH
73787: LD_INT 1
73789: PLUS
73790: ARRAY
73791: ST_TO_ADDR
73792: GO 73795
73794: POP
// temp_list2 = [ ] ;
73795: LD_ADDR_VAR 0 10
73799: PUSH
73800: EMPTY
73801: ST_TO_ADDR
// for i in temp_list do
73802: LD_ADDR_VAR 0 8
73806: PUSH
73807: LD_VAR 0 9
73811: PUSH
73812: FOR_IN
73813: IFFALSE 73865
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73815: LD_ADDR_VAR 0 10
73819: PUSH
73820: LD_VAR 0 10
73824: PUSH
73825: LD_VAR 0 8
73829: PUSH
73830: LD_INT 1
73832: ARRAY
73833: PUSH
73834: LD_VAR 0 2
73838: PLUS
73839: PUSH
73840: LD_VAR 0 8
73844: PUSH
73845: LD_INT 2
73847: ARRAY
73848: PUSH
73849: LD_VAR 0 3
73853: PLUS
73854: PUSH
73855: EMPTY
73856: LIST
73857: LIST
73858: PUSH
73859: EMPTY
73860: LIST
73861: ADD
73862: ST_TO_ADDR
73863: GO 73812
73865: POP
73866: POP
// result = temp_list2 ;
73867: LD_ADDR_VAR 0 7
73871: PUSH
73872: LD_VAR 0 10
73876: ST_TO_ADDR
// end ;
73877: LD_VAR 0 7
73881: RET
// export function EnemyInRange ( unit , dist ) ; begin
73882: LD_INT 0
73884: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73885: LD_ADDR_VAR 0 3
73889: PUSH
73890: LD_VAR 0 1
73894: PPUSH
73895: CALL_OW 255
73899: PPUSH
73900: LD_VAR 0 1
73904: PPUSH
73905: CALL_OW 250
73909: PPUSH
73910: LD_VAR 0 1
73914: PPUSH
73915: CALL_OW 251
73919: PPUSH
73920: LD_VAR 0 2
73924: PPUSH
73925: CALL 47278 0 4
73929: PUSH
73930: LD_INT 4
73932: ARRAY
73933: ST_TO_ADDR
// end ;
73934: LD_VAR 0 3
73938: RET
// export function PlayerSeeMe ( unit ) ; begin
73939: LD_INT 0
73941: PPUSH
// result := See ( your_side , unit ) ;
73942: LD_ADDR_VAR 0 2
73946: PUSH
73947: LD_OWVAR 2
73951: PPUSH
73952: LD_VAR 0 1
73956: PPUSH
73957: CALL_OW 292
73961: ST_TO_ADDR
// end ;
73962: LD_VAR 0 2
73966: RET
// export function ReverseDir ( unit ) ; begin
73967: LD_INT 0
73969: PPUSH
// if not unit then
73970: LD_VAR 0 1
73974: NOT
73975: IFFALSE 73979
// exit ;
73977: GO 74002
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73979: LD_ADDR_VAR 0 2
73983: PUSH
73984: LD_VAR 0 1
73988: PPUSH
73989: CALL_OW 254
73993: PUSH
73994: LD_INT 3
73996: PLUS
73997: PUSH
73998: LD_INT 6
74000: MOD
74001: ST_TO_ADDR
// end ;
74002: LD_VAR 0 2
74006: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
74007: LD_INT 0
74009: PPUSH
74010: PPUSH
74011: PPUSH
74012: PPUSH
74013: PPUSH
// if not hexes then
74014: LD_VAR 0 2
74018: NOT
74019: IFFALSE 74023
// exit ;
74021: GO 74171
// dist := 9999 ;
74023: LD_ADDR_VAR 0 5
74027: PUSH
74028: LD_INT 9999
74030: ST_TO_ADDR
// for i = 1 to hexes do
74031: LD_ADDR_VAR 0 4
74035: PUSH
74036: DOUBLE
74037: LD_INT 1
74039: DEC
74040: ST_TO_ADDR
74041: LD_VAR 0 2
74045: PUSH
74046: FOR_TO
74047: IFFALSE 74159
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
74049: LD_VAR 0 1
74053: PPUSH
74054: LD_VAR 0 2
74058: PUSH
74059: LD_VAR 0 4
74063: ARRAY
74064: PUSH
74065: LD_INT 1
74067: ARRAY
74068: PPUSH
74069: LD_VAR 0 2
74073: PUSH
74074: LD_VAR 0 4
74078: ARRAY
74079: PUSH
74080: LD_INT 2
74082: ARRAY
74083: PPUSH
74084: CALL_OW 297
74088: PUSH
74089: LD_VAR 0 5
74093: LESS
74094: IFFALSE 74157
// begin hex := hexes [ i ] ;
74096: LD_ADDR_VAR 0 7
74100: PUSH
74101: LD_VAR 0 2
74105: PUSH
74106: LD_VAR 0 4
74110: ARRAY
74111: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74112: LD_ADDR_VAR 0 5
74116: PUSH
74117: LD_VAR 0 1
74121: PPUSH
74122: LD_VAR 0 2
74126: PUSH
74127: LD_VAR 0 4
74131: ARRAY
74132: PUSH
74133: LD_INT 1
74135: ARRAY
74136: PPUSH
74137: LD_VAR 0 2
74141: PUSH
74142: LD_VAR 0 4
74146: ARRAY
74147: PUSH
74148: LD_INT 2
74150: ARRAY
74151: PPUSH
74152: CALL_OW 297
74156: ST_TO_ADDR
// end ; end ;
74157: GO 74046
74159: POP
74160: POP
// result := hex ;
74161: LD_ADDR_VAR 0 3
74165: PUSH
74166: LD_VAR 0 7
74170: ST_TO_ADDR
// end ;
74171: LD_VAR 0 3
74175: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74176: LD_INT 0
74178: PPUSH
74179: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74180: LD_VAR 0 1
74184: NOT
74185: PUSH
74186: LD_VAR 0 1
74190: PUSH
74191: LD_INT 21
74193: PUSH
74194: LD_INT 2
74196: PUSH
74197: EMPTY
74198: LIST
74199: LIST
74200: PUSH
74201: LD_INT 23
74203: PUSH
74204: LD_INT 2
74206: PUSH
74207: EMPTY
74208: LIST
74209: LIST
74210: PUSH
74211: EMPTY
74212: LIST
74213: LIST
74214: PPUSH
74215: CALL_OW 69
74219: IN
74220: NOT
74221: OR
74222: IFFALSE 74226
// exit ;
74224: GO 74273
// for i = 1 to 3 do
74226: LD_ADDR_VAR 0 3
74230: PUSH
74231: DOUBLE
74232: LD_INT 1
74234: DEC
74235: ST_TO_ADDR
74236: LD_INT 3
74238: PUSH
74239: FOR_TO
74240: IFFALSE 74271
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74242: LD_VAR 0 1
74246: PPUSH
74247: CALL_OW 250
74251: PPUSH
74252: LD_VAR 0 1
74256: PPUSH
74257: CALL_OW 251
74261: PPUSH
74262: LD_INT 1
74264: PPUSH
74265: CALL_OW 453
74269: GO 74239
74271: POP
74272: POP
// end ;
74273: LD_VAR 0 2
74277: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74278: LD_INT 0
74280: PPUSH
74281: PPUSH
74282: PPUSH
74283: PPUSH
74284: PPUSH
74285: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
74286: LD_VAR 0 1
74290: NOT
74291: PUSH
74292: LD_VAR 0 2
74296: NOT
74297: OR
74298: PUSH
74299: LD_VAR 0 1
74303: PPUSH
74304: CALL_OW 314
74308: OR
74309: IFFALSE 74313
// exit ;
74311: GO 74754
// x := GetX ( enemy_unit ) ;
74313: LD_ADDR_VAR 0 7
74317: PUSH
74318: LD_VAR 0 2
74322: PPUSH
74323: CALL_OW 250
74327: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74328: LD_ADDR_VAR 0 8
74332: PUSH
74333: LD_VAR 0 2
74337: PPUSH
74338: CALL_OW 251
74342: ST_TO_ADDR
// if not x or not y then
74343: LD_VAR 0 7
74347: NOT
74348: PUSH
74349: LD_VAR 0 8
74353: NOT
74354: OR
74355: IFFALSE 74359
// exit ;
74357: GO 74754
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74359: LD_ADDR_VAR 0 6
74363: PUSH
74364: LD_VAR 0 7
74368: PPUSH
74369: LD_INT 0
74371: PPUSH
74372: LD_INT 4
74374: PPUSH
74375: CALL_OW 272
74379: PUSH
74380: LD_VAR 0 8
74384: PPUSH
74385: LD_INT 0
74387: PPUSH
74388: LD_INT 4
74390: PPUSH
74391: CALL_OW 273
74395: PUSH
74396: EMPTY
74397: LIST
74398: LIST
74399: PUSH
74400: LD_VAR 0 7
74404: PPUSH
74405: LD_INT 1
74407: PPUSH
74408: LD_INT 4
74410: PPUSH
74411: CALL_OW 272
74415: PUSH
74416: LD_VAR 0 8
74420: PPUSH
74421: LD_INT 1
74423: PPUSH
74424: LD_INT 4
74426: PPUSH
74427: CALL_OW 273
74431: PUSH
74432: EMPTY
74433: LIST
74434: LIST
74435: PUSH
74436: LD_VAR 0 7
74440: PPUSH
74441: LD_INT 2
74443: PPUSH
74444: LD_INT 4
74446: PPUSH
74447: CALL_OW 272
74451: PUSH
74452: LD_VAR 0 8
74456: PPUSH
74457: LD_INT 2
74459: PPUSH
74460: LD_INT 4
74462: PPUSH
74463: CALL_OW 273
74467: PUSH
74468: EMPTY
74469: LIST
74470: LIST
74471: PUSH
74472: LD_VAR 0 7
74476: PPUSH
74477: LD_INT 3
74479: PPUSH
74480: LD_INT 4
74482: PPUSH
74483: CALL_OW 272
74487: PUSH
74488: LD_VAR 0 8
74492: PPUSH
74493: LD_INT 3
74495: PPUSH
74496: LD_INT 4
74498: PPUSH
74499: CALL_OW 273
74503: PUSH
74504: EMPTY
74505: LIST
74506: LIST
74507: PUSH
74508: LD_VAR 0 7
74512: PPUSH
74513: LD_INT 4
74515: PPUSH
74516: LD_INT 4
74518: PPUSH
74519: CALL_OW 272
74523: PUSH
74524: LD_VAR 0 8
74528: PPUSH
74529: LD_INT 4
74531: PPUSH
74532: LD_INT 4
74534: PPUSH
74535: CALL_OW 273
74539: PUSH
74540: EMPTY
74541: LIST
74542: LIST
74543: PUSH
74544: LD_VAR 0 7
74548: PPUSH
74549: LD_INT 5
74551: PPUSH
74552: LD_INT 4
74554: PPUSH
74555: CALL_OW 272
74559: PUSH
74560: LD_VAR 0 8
74564: PPUSH
74565: LD_INT 5
74567: PPUSH
74568: LD_INT 4
74570: PPUSH
74571: CALL_OW 273
74575: PUSH
74576: EMPTY
74577: LIST
74578: LIST
74579: PUSH
74580: EMPTY
74581: LIST
74582: LIST
74583: LIST
74584: LIST
74585: LIST
74586: LIST
74587: ST_TO_ADDR
// for i = tmp downto 1 do
74588: LD_ADDR_VAR 0 4
74592: PUSH
74593: DOUBLE
74594: LD_VAR 0 6
74598: INC
74599: ST_TO_ADDR
74600: LD_INT 1
74602: PUSH
74603: FOR_DOWNTO
74604: IFFALSE 74705
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74606: LD_VAR 0 6
74610: PUSH
74611: LD_VAR 0 4
74615: ARRAY
74616: PUSH
74617: LD_INT 1
74619: ARRAY
74620: PPUSH
74621: LD_VAR 0 6
74625: PUSH
74626: LD_VAR 0 4
74630: ARRAY
74631: PUSH
74632: LD_INT 2
74634: ARRAY
74635: PPUSH
74636: CALL_OW 488
74640: NOT
74641: PUSH
74642: LD_VAR 0 6
74646: PUSH
74647: LD_VAR 0 4
74651: ARRAY
74652: PUSH
74653: LD_INT 1
74655: ARRAY
74656: PPUSH
74657: LD_VAR 0 6
74661: PUSH
74662: LD_VAR 0 4
74666: ARRAY
74667: PUSH
74668: LD_INT 2
74670: ARRAY
74671: PPUSH
74672: CALL_OW 428
74676: PUSH
74677: LD_INT 0
74679: NONEQUAL
74680: OR
74681: IFFALSE 74703
// tmp := Delete ( tmp , i ) ;
74683: LD_ADDR_VAR 0 6
74687: PUSH
74688: LD_VAR 0 6
74692: PPUSH
74693: LD_VAR 0 4
74697: PPUSH
74698: CALL_OW 3
74702: ST_TO_ADDR
74703: GO 74603
74705: POP
74706: POP
// j := GetClosestHex ( unit , tmp ) ;
74707: LD_ADDR_VAR 0 5
74711: PUSH
74712: LD_VAR 0 1
74716: PPUSH
74717: LD_VAR 0 6
74721: PPUSH
74722: CALL 74007 0 2
74726: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74727: LD_VAR 0 1
74731: PPUSH
74732: LD_VAR 0 5
74736: PUSH
74737: LD_INT 1
74739: ARRAY
74740: PPUSH
74741: LD_VAR 0 5
74745: PUSH
74746: LD_INT 2
74748: ARRAY
74749: PPUSH
74750: CALL_OW 111
// end ;
74754: LD_VAR 0 3
74758: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74759: LD_INT 0
74761: PPUSH
74762: PPUSH
74763: PPUSH
// uc_side = 0 ;
74764: LD_ADDR_OWVAR 20
74768: PUSH
74769: LD_INT 0
74771: ST_TO_ADDR
// uc_nation = 0 ;
74772: LD_ADDR_OWVAR 21
74776: PUSH
74777: LD_INT 0
74779: ST_TO_ADDR
// InitHc_All ( ) ;
74780: CALL_OW 584
// InitVc ;
74784: CALL_OW 20
// if mastodonts then
74788: LD_VAR 0 6
74792: IFFALSE 74859
// for i = 1 to mastodonts do
74794: LD_ADDR_VAR 0 11
74798: PUSH
74799: DOUBLE
74800: LD_INT 1
74802: DEC
74803: ST_TO_ADDR
74804: LD_VAR 0 6
74808: PUSH
74809: FOR_TO
74810: IFFALSE 74857
// begin vc_chassis := 31 ;
74812: LD_ADDR_OWVAR 37
74816: PUSH
74817: LD_INT 31
74819: ST_TO_ADDR
// vc_control := control_rider ;
74820: LD_ADDR_OWVAR 38
74824: PUSH
74825: LD_INT 4
74827: ST_TO_ADDR
// animal := CreateVehicle ;
74828: LD_ADDR_VAR 0 12
74832: PUSH
74833: CALL_OW 45
74837: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74838: LD_VAR 0 12
74842: PPUSH
74843: LD_VAR 0 8
74847: PPUSH
74848: LD_INT 0
74850: PPUSH
74851: CALL 77047 0 3
// end ;
74855: GO 74809
74857: POP
74858: POP
// if horses then
74859: LD_VAR 0 5
74863: IFFALSE 74930
// for i = 1 to horses do
74865: LD_ADDR_VAR 0 11
74869: PUSH
74870: DOUBLE
74871: LD_INT 1
74873: DEC
74874: ST_TO_ADDR
74875: LD_VAR 0 5
74879: PUSH
74880: FOR_TO
74881: IFFALSE 74928
// begin hc_class := 21 ;
74883: LD_ADDR_OWVAR 28
74887: PUSH
74888: LD_INT 21
74890: ST_TO_ADDR
// hc_gallery :=  ;
74891: LD_ADDR_OWVAR 33
74895: PUSH
74896: LD_STRING 
74898: ST_TO_ADDR
// animal := CreateHuman ;
74899: LD_ADDR_VAR 0 12
74903: PUSH
74904: CALL_OW 44
74908: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74909: LD_VAR 0 12
74913: PPUSH
74914: LD_VAR 0 8
74918: PPUSH
74919: LD_INT 0
74921: PPUSH
74922: CALL 77047 0 3
// end ;
74926: GO 74880
74928: POP
74929: POP
// if birds then
74930: LD_VAR 0 1
74934: IFFALSE 75001
// for i = 1 to birds do
74936: LD_ADDR_VAR 0 11
74940: PUSH
74941: DOUBLE
74942: LD_INT 1
74944: DEC
74945: ST_TO_ADDR
74946: LD_VAR 0 1
74950: PUSH
74951: FOR_TO
74952: IFFALSE 74999
// begin hc_class = 18 ;
74954: LD_ADDR_OWVAR 28
74958: PUSH
74959: LD_INT 18
74961: ST_TO_ADDR
// hc_gallery =  ;
74962: LD_ADDR_OWVAR 33
74966: PUSH
74967: LD_STRING 
74969: ST_TO_ADDR
// animal := CreateHuman ;
74970: LD_ADDR_VAR 0 12
74974: PUSH
74975: CALL_OW 44
74979: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74980: LD_VAR 0 12
74984: PPUSH
74985: LD_VAR 0 8
74989: PPUSH
74990: LD_INT 0
74992: PPUSH
74993: CALL 77047 0 3
// end ;
74997: GO 74951
74999: POP
75000: POP
// if tigers then
75001: LD_VAR 0 2
75005: IFFALSE 75089
// for i = 1 to tigers do
75007: LD_ADDR_VAR 0 11
75011: PUSH
75012: DOUBLE
75013: LD_INT 1
75015: DEC
75016: ST_TO_ADDR
75017: LD_VAR 0 2
75021: PUSH
75022: FOR_TO
75023: IFFALSE 75087
// begin hc_class = class_tiger ;
75025: LD_ADDR_OWVAR 28
75029: PUSH
75030: LD_INT 14
75032: ST_TO_ADDR
// hc_gallery =  ;
75033: LD_ADDR_OWVAR 33
75037: PUSH
75038: LD_STRING 
75040: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75041: LD_ADDR_OWVAR 35
75045: PUSH
75046: LD_INT 7
75048: NEG
75049: PPUSH
75050: LD_INT 7
75052: PPUSH
75053: CALL_OW 12
75057: ST_TO_ADDR
// animal := CreateHuman ;
75058: LD_ADDR_VAR 0 12
75062: PUSH
75063: CALL_OW 44
75067: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75068: LD_VAR 0 12
75072: PPUSH
75073: LD_VAR 0 8
75077: PPUSH
75078: LD_INT 0
75080: PPUSH
75081: CALL 77047 0 3
// end ;
75085: GO 75022
75087: POP
75088: POP
// if apemans then
75089: LD_VAR 0 3
75093: IFFALSE 75216
// for i = 1 to apemans do
75095: LD_ADDR_VAR 0 11
75099: PUSH
75100: DOUBLE
75101: LD_INT 1
75103: DEC
75104: ST_TO_ADDR
75105: LD_VAR 0 3
75109: PUSH
75110: FOR_TO
75111: IFFALSE 75214
// begin hc_class = class_apeman ;
75113: LD_ADDR_OWVAR 28
75117: PUSH
75118: LD_INT 12
75120: ST_TO_ADDR
// hc_gallery =  ;
75121: LD_ADDR_OWVAR 33
75125: PUSH
75126: LD_STRING 
75128: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75129: LD_ADDR_OWVAR 35
75133: PUSH
75134: LD_INT 2
75136: NEG
75137: PPUSH
75138: LD_INT 2
75140: PPUSH
75141: CALL_OW 12
75145: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75146: LD_ADDR_OWVAR 31
75150: PUSH
75151: LD_INT 1
75153: PPUSH
75154: LD_INT 3
75156: PPUSH
75157: CALL_OW 12
75161: PUSH
75162: LD_INT 1
75164: PPUSH
75165: LD_INT 3
75167: PPUSH
75168: CALL_OW 12
75172: PUSH
75173: LD_INT 0
75175: PUSH
75176: LD_INT 0
75178: PUSH
75179: EMPTY
75180: LIST
75181: LIST
75182: LIST
75183: LIST
75184: ST_TO_ADDR
// animal := CreateHuman ;
75185: LD_ADDR_VAR 0 12
75189: PUSH
75190: CALL_OW 44
75194: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75195: LD_VAR 0 12
75199: PPUSH
75200: LD_VAR 0 8
75204: PPUSH
75205: LD_INT 0
75207: PPUSH
75208: CALL 77047 0 3
// end ;
75212: GO 75110
75214: POP
75215: POP
// if enchidnas then
75216: LD_VAR 0 4
75220: IFFALSE 75287
// for i = 1 to enchidnas do
75222: LD_ADDR_VAR 0 11
75226: PUSH
75227: DOUBLE
75228: LD_INT 1
75230: DEC
75231: ST_TO_ADDR
75232: LD_VAR 0 4
75236: PUSH
75237: FOR_TO
75238: IFFALSE 75285
// begin hc_class = 13 ;
75240: LD_ADDR_OWVAR 28
75244: PUSH
75245: LD_INT 13
75247: ST_TO_ADDR
// hc_gallery =  ;
75248: LD_ADDR_OWVAR 33
75252: PUSH
75253: LD_STRING 
75255: ST_TO_ADDR
// animal := CreateHuman ;
75256: LD_ADDR_VAR 0 12
75260: PUSH
75261: CALL_OW 44
75265: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75266: LD_VAR 0 12
75270: PPUSH
75271: LD_VAR 0 8
75275: PPUSH
75276: LD_INT 0
75278: PPUSH
75279: CALL 77047 0 3
// end ;
75283: GO 75237
75285: POP
75286: POP
// if fishes then
75287: LD_VAR 0 7
75291: IFFALSE 75358
// for i = 1 to fishes do
75293: LD_ADDR_VAR 0 11
75297: PUSH
75298: DOUBLE
75299: LD_INT 1
75301: DEC
75302: ST_TO_ADDR
75303: LD_VAR 0 7
75307: PUSH
75308: FOR_TO
75309: IFFALSE 75356
// begin hc_class = 20 ;
75311: LD_ADDR_OWVAR 28
75315: PUSH
75316: LD_INT 20
75318: ST_TO_ADDR
// hc_gallery =  ;
75319: LD_ADDR_OWVAR 33
75323: PUSH
75324: LD_STRING 
75326: ST_TO_ADDR
// animal := CreateHuman ;
75327: LD_ADDR_VAR 0 12
75331: PUSH
75332: CALL_OW 44
75336: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75337: LD_VAR 0 12
75341: PPUSH
75342: LD_VAR 0 9
75346: PPUSH
75347: LD_INT 0
75349: PPUSH
75350: CALL 77047 0 3
// end ;
75354: GO 75308
75356: POP
75357: POP
// end ;
75358: LD_VAR 0 10
75362: RET
// export function WantHeal ( sci , unit ) ; begin
75363: LD_INT 0
75365: PPUSH
// if GetTaskList ( sci ) > 0 then
75366: LD_VAR 0 1
75370: PPUSH
75371: CALL_OW 437
75375: PUSH
75376: LD_INT 0
75378: GREATER
75379: IFFALSE 75449
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75381: LD_VAR 0 1
75385: PPUSH
75386: CALL_OW 437
75390: PUSH
75391: LD_INT 1
75393: ARRAY
75394: PUSH
75395: LD_INT 1
75397: ARRAY
75398: PUSH
75399: LD_STRING l
75401: EQUAL
75402: PUSH
75403: LD_VAR 0 1
75407: PPUSH
75408: CALL_OW 437
75412: PUSH
75413: LD_INT 1
75415: ARRAY
75416: PUSH
75417: LD_INT 4
75419: ARRAY
75420: PUSH
75421: LD_VAR 0 2
75425: EQUAL
75426: AND
75427: IFFALSE 75439
// result := true else
75429: LD_ADDR_VAR 0 3
75433: PUSH
75434: LD_INT 1
75436: ST_TO_ADDR
75437: GO 75447
// result := false ;
75439: LD_ADDR_VAR 0 3
75443: PUSH
75444: LD_INT 0
75446: ST_TO_ADDR
// end else
75447: GO 75457
// result := false ;
75449: LD_ADDR_VAR 0 3
75453: PUSH
75454: LD_INT 0
75456: ST_TO_ADDR
// end ;
75457: LD_VAR 0 3
75461: RET
// export function HealTarget ( sci ) ; begin
75462: LD_INT 0
75464: PPUSH
// if not sci then
75465: LD_VAR 0 1
75469: NOT
75470: IFFALSE 75474
// exit ;
75472: GO 75539
// result := 0 ;
75474: LD_ADDR_VAR 0 2
75478: PUSH
75479: LD_INT 0
75481: ST_TO_ADDR
// if GetTaskList ( sci ) then
75482: LD_VAR 0 1
75486: PPUSH
75487: CALL_OW 437
75491: IFFALSE 75539
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75493: LD_VAR 0 1
75497: PPUSH
75498: CALL_OW 437
75502: PUSH
75503: LD_INT 1
75505: ARRAY
75506: PUSH
75507: LD_INT 1
75509: ARRAY
75510: PUSH
75511: LD_STRING l
75513: EQUAL
75514: IFFALSE 75539
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75516: LD_ADDR_VAR 0 2
75520: PUSH
75521: LD_VAR 0 1
75525: PPUSH
75526: CALL_OW 437
75530: PUSH
75531: LD_INT 1
75533: ARRAY
75534: PUSH
75535: LD_INT 4
75537: ARRAY
75538: ST_TO_ADDR
// end ;
75539: LD_VAR 0 2
75543: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75544: LD_INT 0
75546: PPUSH
75547: PPUSH
75548: PPUSH
75549: PPUSH
// if not base_units then
75550: LD_VAR 0 1
75554: NOT
75555: IFFALSE 75559
// exit ;
75557: GO 75646
// result := false ;
75559: LD_ADDR_VAR 0 2
75563: PUSH
75564: LD_INT 0
75566: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75567: LD_ADDR_VAR 0 5
75571: PUSH
75572: LD_VAR 0 1
75576: PPUSH
75577: LD_INT 21
75579: PUSH
75580: LD_INT 3
75582: PUSH
75583: EMPTY
75584: LIST
75585: LIST
75586: PPUSH
75587: CALL_OW 72
75591: ST_TO_ADDR
// if not tmp then
75592: LD_VAR 0 5
75596: NOT
75597: IFFALSE 75601
// exit ;
75599: GO 75646
// for i in tmp do
75601: LD_ADDR_VAR 0 3
75605: PUSH
75606: LD_VAR 0 5
75610: PUSH
75611: FOR_IN
75612: IFFALSE 75644
// begin result := EnemyInRange ( i , 22 ) ;
75614: LD_ADDR_VAR 0 2
75618: PUSH
75619: LD_VAR 0 3
75623: PPUSH
75624: LD_INT 22
75626: PPUSH
75627: CALL 73882 0 2
75631: ST_TO_ADDR
// if result then
75632: LD_VAR 0 2
75636: IFFALSE 75642
// exit ;
75638: POP
75639: POP
75640: GO 75646
// end ;
75642: GO 75611
75644: POP
75645: POP
// end ;
75646: LD_VAR 0 2
75650: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
75651: LD_INT 0
75653: PPUSH
75654: PPUSH
// if not units then
75655: LD_VAR 0 1
75659: NOT
75660: IFFALSE 75664
// exit ;
75662: GO 75734
// result := [ ] ;
75664: LD_ADDR_VAR 0 3
75668: PUSH
75669: EMPTY
75670: ST_TO_ADDR
// for i in units do
75671: LD_ADDR_VAR 0 4
75675: PUSH
75676: LD_VAR 0 1
75680: PUSH
75681: FOR_IN
75682: IFFALSE 75732
// if GetTag ( i ) = tag then
75684: LD_VAR 0 4
75688: PPUSH
75689: CALL_OW 110
75693: PUSH
75694: LD_VAR 0 2
75698: EQUAL
75699: IFFALSE 75730
// result := Replace ( result , result + 1 , i ) ;
75701: LD_ADDR_VAR 0 3
75705: PUSH
75706: LD_VAR 0 3
75710: PPUSH
75711: LD_VAR 0 3
75715: PUSH
75716: LD_INT 1
75718: PLUS
75719: PPUSH
75720: LD_VAR 0 4
75724: PPUSH
75725: CALL_OW 1
75729: ST_TO_ADDR
75730: GO 75681
75732: POP
75733: POP
// end ;
75734: LD_VAR 0 3
75738: RET
// export function IsDriver ( un ) ; begin
75739: LD_INT 0
75741: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75742: LD_ADDR_VAR 0 2
75746: PUSH
75747: LD_VAR 0 1
75751: PUSH
75752: LD_INT 55
75754: PUSH
75755: EMPTY
75756: LIST
75757: PPUSH
75758: CALL_OW 69
75762: IN
75763: ST_TO_ADDR
// end ;
75764: LD_VAR 0 2
75768: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75769: LD_INT 0
75771: PPUSH
75772: PPUSH
// list := [ ] ;
75773: LD_ADDR_VAR 0 5
75777: PUSH
75778: EMPTY
75779: ST_TO_ADDR
// case d of 0 :
75780: LD_VAR 0 3
75784: PUSH
75785: LD_INT 0
75787: DOUBLE
75788: EQUAL
75789: IFTRUE 75793
75791: GO 75926
75793: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75794: LD_ADDR_VAR 0 5
75798: PUSH
75799: LD_VAR 0 1
75803: PUSH
75804: LD_INT 4
75806: MINUS
75807: PUSH
75808: LD_VAR 0 2
75812: PUSH
75813: LD_INT 4
75815: MINUS
75816: PUSH
75817: LD_INT 2
75819: PUSH
75820: EMPTY
75821: LIST
75822: LIST
75823: LIST
75824: PUSH
75825: LD_VAR 0 1
75829: PUSH
75830: LD_INT 3
75832: MINUS
75833: PUSH
75834: LD_VAR 0 2
75838: PUSH
75839: LD_INT 1
75841: PUSH
75842: EMPTY
75843: LIST
75844: LIST
75845: LIST
75846: PUSH
75847: LD_VAR 0 1
75851: PUSH
75852: LD_INT 4
75854: PLUS
75855: PUSH
75856: LD_VAR 0 2
75860: PUSH
75861: LD_INT 4
75863: PUSH
75864: EMPTY
75865: LIST
75866: LIST
75867: LIST
75868: PUSH
75869: LD_VAR 0 1
75873: PUSH
75874: LD_INT 3
75876: PLUS
75877: PUSH
75878: LD_VAR 0 2
75882: PUSH
75883: LD_INT 3
75885: PLUS
75886: PUSH
75887: LD_INT 5
75889: PUSH
75890: EMPTY
75891: LIST
75892: LIST
75893: LIST
75894: PUSH
75895: LD_VAR 0 1
75899: PUSH
75900: LD_VAR 0 2
75904: PUSH
75905: LD_INT 4
75907: PLUS
75908: PUSH
75909: LD_INT 0
75911: PUSH
75912: EMPTY
75913: LIST
75914: LIST
75915: LIST
75916: PUSH
75917: EMPTY
75918: LIST
75919: LIST
75920: LIST
75921: LIST
75922: LIST
75923: ST_TO_ADDR
// end ; 1 :
75924: GO 76624
75926: LD_INT 1
75928: DOUBLE
75929: EQUAL
75930: IFTRUE 75934
75932: GO 76067
75934: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75935: LD_ADDR_VAR 0 5
75939: PUSH
75940: LD_VAR 0 1
75944: PUSH
75945: LD_VAR 0 2
75949: PUSH
75950: LD_INT 4
75952: MINUS
75953: PUSH
75954: LD_INT 3
75956: PUSH
75957: EMPTY
75958: LIST
75959: LIST
75960: LIST
75961: PUSH
75962: LD_VAR 0 1
75966: PUSH
75967: LD_INT 3
75969: MINUS
75970: PUSH
75971: LD_VAR 0 2
75975: PUSH
75976: LD_INT 3
75978: MINUS
75979: PUSH
75980: LD_INT 2
75982: PUSH
75983: EMPTY
75984: LIST
75985: LIST
75986: LIST
75987: PUSH
75988: LD_VAR 0 1
75992: PUSH
75993: LD_INT 4
75995: MINUS
75996: PUSH
75997: LD_VAR 0 2
76001: PUSH
76002: LD_INT 1
76004: PUSH
76005: EMPTY
76006: LIST
76007: LIST
76008: LIST
76009: PUSH
76010: LD_VAR 0 1
76014: PUSH
76015: LD_VAR 0 2
76019: PUSH
76020: LD_INT 3
76022: PLUS
76023: PUSH
76024: LD_INT 0
76026: PUSH
76027: EMPTY
76028: LIST
76029: LIST
76030: LIST
76031: PUSH
76032: LD_VAR 0 1
76036: PUSH
76037: LD_INT 4
76039: PLUS
76040: PUSH
76041: LD_VAR 0 2
76045: PUSH
76046: LD_INT 4
76048: PLUS
76049: PUSH
76050: LD_INT 5
76052: PUSH
76053: EMPTY
76054: LIST
76055: LIST
76056: LIST
76057: PUSH
76058: EMPTY
76059: LIST
76060: LIST
76061: LIST
76062: LIST
76063: LIST
76064: ST_TO_ADDR
// end ; 2 :
76065: GO 76624
76067: LD_INT 2
76069: DOUBLE
76070: EQUAL
76071: IFTRUE 76075
76073: GO 76204
76075: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76076: LD_ADDR_VAR 0 5
76080: PUSH
76081: LD_VAR 0 1
76085: PUSH
76086: LD_VAR 0 2
76090: PUSH
76091: LD_INT 3
76093: MINUS
76094: PUSH
76095: LD_INT 3
76097: PUSH
76098: EMPTY
76099: LIST
76100: LIST
76101: LIST
76102: PUSH
76103: LD_VAR 0 1
76107: PUSH
76108: LD_INT 4
76110: PLUS
76111: PUSH
76112: LD_VAR 0 2
76116: PUSH
76117: LD_INT 4
76119: PUSH
76120: EMPTY
76121: LIST
76122: LIST
76123: LIST
76124: PUSH
76125: LD_VAR 0 1
76129: PUSH
76130: LD_VAR 0 2
76134: PUSH
76135: LD_INT 4
76137: PLUS
76138: PUSH
76139: LD_INT 0
76141: PUSH
76142: EMPTY
76143: LIST
76144: LIST
76145: LIST
76146: PUSH
76147: LD_VAR 0 1
76151: PUSH
76152: LD_INT 3
76154: MINUS
76155: PUSH
76156: LD_VAR 0 2
76160: PUSH
76161: LD_INT 1
76163: PUSH
76164: EMPTY
76165: LIST
76166: LIST
76167: LIST
76168: PUSH
76169: LD_VAR 0 1
76173: PUSH
76174: LD_INT 4
76176: MINUS
76177: PUSH
76178: LD_VAR 0 2
76182: PUSH
76183: LD_INT 4
76185: MINUS
76186: PUSH
76187: LD_INT 2
76189: PUSH
76190: EMPTY
76191: LIST
76192: LIST
76193: LIST
76194: PUSH
76195: EMPTY
76196: LIST
76197: LIST
76198: LIST
76199: LIST
76200: LIST
76201: ST_TO_ADDR
// end ; 3 :
76202: GO 76624
76204: LD_INT 3
76206: DOUBLE
76207: EQUAL
76208: IFTRUE 76212
76210: GO 76345
76212: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76213: LD_ADDR_VAR 0 5
76217: PUSH
76218: LD_VAR 0 1
76222: PUSH
76223: LD_INT 3
76225: PLUS
76226: PUSH
76227: LD_VAR 0 2
76231: PUSH
76232: LD_INT 4
76234: PUSH
76235: EMPTY
76236: LIST
76237: LIST
76238: LIST
76239: PUSH
76240: LD_VAR 0 1
76244: PUSH
76245: LD_INT 4
76247: PLUS
76248: PUSH
76249: LD_VAR 0 2
76253: PUSH
76254: LD_INT 4
76256: PLUS
76257: PUSH
76258: LD_INT 5
76260: PUSH
76261: EMPTY
76262: LIST
76263: LIST
76264: LIST
76265: PUSH
76266: LD_VAR 0 1
76270: PUSH
76271: LD_INT 4
76273: MINUS
76274: PUSH
76275: LD_VAR 0 2
76279: PUSH
76280: LD_INT 1
76282: PUSH
76283: EMPTY
76284: LIST
76285: LIST
76286: LIST
76287: PUSH
76288: LD_VAR 0 1
76292: PUSH
76293: LD_VAR 0 2
76297: PUSH
76298: LD_INT 4
76300: MINUS
76301: PUSH
76302: LD_INT 3
76304: PUSH
76305: EMPTY
76306: LIST
76307: LIST
76308: LIST
76309: PUSH
76310: LD_VAR 0 1
76314: PUSH
76315: LD_INT 3
76317: MINUS
76318: PUSH
76319: LD_VAR 0 2
76323: PUSH
76324: LD_INT 3
76326: MINUS
76327: PUSH
76328: LD_INT 2
76330: PUSH
76331: EMPTY
76332: LIST
76333: LIST
76334: LIST
76335: PUSH
76336: EMPTY
76337: LIST
76338: LIST
76339: LIST
76340: LIST
76341: LIST
76342: ST_TO_ADDR
// end ; 4 :
76343: GO 76624
76345: LD_INT 4
76347: DOUBLE
76348: EQUAL
76349: IFTRUE 76353
76351: GO 76486
76353: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76354: LD_ADDR_VAR 0 5
76358: PUSH
76359: LD_VAR 0 1
76363: PUSH
76364: LD_VAR 0 2
76368: PUSH
76369: LD_INT 4
76371: PLUS
76372: PUSH
76373: LD_INT 0
76375: PUSH
76376: EMPTY
76377: LIST
76378: LIST
76379: LIST
76380: PUSH
76381: LD_VAR 0 1
76385: PUSH
76386: LD_INT 3
76388: PLUS
76389: PUSH
76390: LD_VAR 0 2
76394: PUSH
76395: LD_INT 3
76397: PLUS
76398: PUSH
76399: LD_INT 5
76401: PUSH
76402: EMPTY
76403: LIST
76404: LIST
76405: LIST
76406: PUSH
76407: LD_VAR 0 1
76411: PUSH
76412: LD_INT 4
76414: PLUS
76415: PUSH
76416: LD_VAR 0 2
76420: PUSH
76421: LD_INT 4
76423: PUSH
76424: EMPTY
76425: LIST
76426: LIST
76427: LIST
76428: PUSH
76429: LD_VAR 0 1
76433: PUSH
76434: LD_VAR 0 2
76438: PUSH
76439: LD_INT 3
76441: MINUS
76442: PUSH
76443: LD_INT 3
76445: PUSH
76446: EMPTY
76447: LIST
76448: LIST
76449: LIST
76450: PUSH
76451: LD_VAR 0 1
76455: PUSH
76456: LD_INT 4
76458: MINUS
76459: PUSH
76460: LD_VAR 0 2
76464: PUSH
76465: LD_INT 4
76467: MINUS
76468: PUSH
76469: LD_INT 2
76471: PUSH
76472: EMPTY
76473: LIST
76474: LIST
76475: LIST
76476: PUSH
76477: EMPTY
76478: LIST
76479: LIST
76480: LIST
76481: LIST
76482: LIST
76483: ST_TO_ADDR
// end ; 5 :
76484: GO 76624
76486: LD_INT 5
76488: DOUBLE
76489: EQUAL
76490: IFTRUE 76494
76492: GO 76623
76494: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76495: LD_ADDR_VAR 0 5
76499: PUSH
76500: LD_VAR 0 1
76504: PUSH
76505: LD_INT 4
76507: MINUS
76508: PUSH
76509: LD_VAR 0 2
76513: PUSH
76514: LD_INT 1
76516: PUSH
76517: EMPTY
76518: LIST
76519: LIST
76520: LIST
76521: PUSH
76522: LD_VAR 0 1
76526: PUSH
76527: LD_VAR 0 2
76531: PUSH
76532: LD_INT 4
76534: MINUS
76535: PUSH
76536: LD_INT 3
76538: PUSH
76539: EMPTY
76540: LIST
76541: LIST
76542: LIST
76543: PUSH
76544: LD_VAR 0 1
76548: PUSH
76549: LD_INT 4
76551: PLUS
76552: PUSH
76553: LD_VAR 0 2
76557: PUSH
76558: LD_INT 4
76560: PLUS
76561: PUSH
76562: LD_INT 5
76564: PUSH
76565: EMPTY
76566: LIST
76567: LIST
76568: LIST
76569: PUSH
76570: LD_VAR 0 1
76574: PUSH
76575: LD_INT 3
76577: PLUS
76578: PUSH
76579: LD_VAR 0 2
76583: PUSH
76584: LD_INT 4
76586: PUSH
76587: EMPTY
76588: LIST
76589: LIST
76590: LIST
76591: PUSH
76592: LD_VAR 0 1
76596: PUSH
76597: LD_VAR 0 2
76601: PUSH
76602: LD_INT 3
76604: PLUS
76605: PUSH
76606: LD_INT 0
76608: PUSH
76609: EMPTY
76610: LIST
76611: LIST
76612: LIST
76613: PUSH
76614: EMPTY
76615: LIST
76616: LIST
76617: LIST
76618: LIST
76619: LIST
76620: ST_TO_ADDR
// end ; end ;
76621: GO 76624
76623: POP
// result := list ;
76624: LD_ADDR_VAR 0 4
76628: PUSH
76629: LD_VAR 0 5
76633: ST_TO_ADDR
// end ;
76634: LD_VAR 0 4
76638: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76639: LD_INT 0
76641: PPUSH
76642: PPUSH
76643: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76644: LD_VAR 0 1
76648: NOT
76649: PUSH
76650: LD_VAR 0 2
76654: PUSH
76655: LD_INT 1
76657: PUSH
76658: LD_INT 2
76660: PUSH
76661: LD_INT 3
76663: PUSH
76664: LD_INT 4
76666: PUSH
76667: EMPTY
76668: LIST
76669: LIST
76670: LIST
76671: LIST
76672: IN
76673: NOT
76674: OR
76675: IFFALSE 76679
// exit ;
76677: GO 76771
// tmp := [ ] ;
76679: LD_ADDR_VAR 0 5
76683: PUSH
76684: EMPTY
76685: ST_TO_ADDR
// for i in units do
76686: LD_ADDR_VAR 0 4
76690: PUSH
76691: LD_VAR 0 1
76695: PUSH
76696: FOR_IN
76697: IFFALSE 76740
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
76699: LD_ADDR_VAR 0 5
76703: PUSH
76704: LD_VAR 0 5
76708: PPUSH
76709: LD_VAR 0 5
76713: PUSH
76714: LD_INT 1
76716: PLUS
76717: PPUSH
76718: LD_VAR 0 4
76722: PPUSH
76723: LD_VAR 0 2
76727: PPUSH
76728: CALL_OW 259
76732: PPUSH
76733: CALL_OW 2
76737: ST_TO_ADDR
76738: GO 76696
76740: POP
76741: POP
// if not tmp then
76742: LD_VAR 0 5
76746: NOT
76747: IFFALSE 76751
// exit ;
76749: GO 76771
// result := SortListByListDesc ( units , tmp ) ;
76751: LD_ADDR_VAR 0 3
76755: PUSH
76756: LD_VAR 0 1
76760: PPUSH
76761: LD_VAR 0 5
76765: PPUSH
76766: CALL_OW 77
76770: ST_TO_ADDR
// end ;
76771: LD_VAR 0 3
76775: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76776: LD_INT 0
76778: PPUSH
76779: PPUSH
76780: PPUSH
// result := false ;
76781: LD_ADDR_VAR 0 3
76785: PUSH
76786: LD_INT 0
76788: ST_TO_ADDR
// x := GetX ( building ) ;
76789: LD_ADDR_VAR 0 4
76793: PUSH
76794: LD_VAR 0 2
76798: PPUSH
76799: CALL_OW 250
76803: ST_TO_ADDR
// y := GetY ( building ) ;
76804: LD_ADDR_VAR 0 5
76808: PUSH
76809: LD_VAR 0 2
76813: PPUSH
76814: CALL_OW 251
76818: ST_TO_ADDR
// if not building or not x or not y then
76819: LD_VAR 0 2
76823: NOT
76824: PUSH
76825: LD_VAR 0 4
76829: NOT
76830: OR
76831: PUSH
76832: LD_VAR 0 5
76836: NOT
76837: OR
76838: IFFALSE 76842
// exit ;
76840: GO 76934
// if GetTaskList ( unit ) then
76842: LD_VAR 0 1
76846: PPUSH
76847: CALL_OW 437
76851: IFFALSE 76934
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76853: LD_STRING e
76855: PUSH
76856: LD_VAR 0 1
76860: PPUSH
76861: CALL_OW 437
76865: PUSH
76866: LD_INT 1
76868: ARRAY
76869: PUSH
76870: LD_INT 1
76872: ARRAY
76873: EQUAL
76874: PUSH
76875: LD_VAR 0 4
76879: PUSH
76880: LD_VAR 0 1
76884: PPUSH
76885: CALL_OW 437
76889: PUSH
76890: LD_INT 1
76892: ARRAY
76893: PUSH
76894: LD_INT 2
76896: ARRAY
76897: EQUAL
76898: AND
76899: PUSH
76900: LD_VAR 0 5
76904: PUSH
76905: LD_VAR 0 1
76909: PPUSH
76910: CALL_OW 437
76914: PUSH
76915: LD_INT 1
76917: ARRAY
76918: PUSH
76919: LD_INT 3
76921: ARRAY
76922: EQUAL
76923: AND
76924: IFFALSE 76934
// result := true end ;
76926: LD_ADDR_VAR 0 3
76930: PUSH
76931: LD_INT 1
76933: ST_TO_ADDR
// end ;
76934: LD_VAR 0 3
76938: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76939: LD_INT 0
76941: PPUSH
// result := false ;
76942: LD_ADDR_VAR 0 4
76946: PUSH
76947: LD_INT 0
76949: ST_TO_ADDR
// if GetTaskList ( unit ) then
76950: LD_VAR 0 1
76954: PPUSH
76955: CALL_OW 437
76959: IFFALSE 77042
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76961: LD_STRING M
76963: PUSH
76964: LD_VAR 0 1
76968: PPUSH
76969: CALL_OW 437
76973: PUSH
76974: LD_INT 1
76976: ARRAY
76977: PUSH
76978: LD_INT 1
76980: ARRAY
76981: EQUAL
76982: PUSH
76983: LD_VAR 0 2
76987: PUSH
76988: LD_VAR 0 1
76992: PPUSH
76993: CALL_OW 437
76997: PUSH
76998: LD_INT 1
77000: ARRAY
77001: PUSH
77002: LD_INT 2
77004: ARRAY
77005: EQUAL
77006: AND
77007: PUSH
77008: LD_VAR 0 3
77012: PUSH
77013: LD_VAR 0 1
77017: PPUSH
77018: CALL_OW 437
77022: PUSH
77023: LD_INT 1
77025: ARRAY
77026: PUSH
77027: LD_INT 3
77029: ARRAY
77030: EQUAL
77031: AND
77032: IFFALSE 77042
// result := true ;
77034: LD_ADDR_VAR 0 4
77038: PUSH
77039: LD_INT 1
77041: ST_TO_ADDR
// end ; end ;
77042: LD_VAR 0 4
77046: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77047: LD_INT 0
77049: PPUSH
77050: PPUSH
77051: PPUSH
77052: PPUSH
// if not unit or not area then
77053: LD_VAR 0 1
77057: NOT
77058: PUSH
77059: LD_VAR 0 2
77063: NOT
77064: OR
77065: IFFALSE 77069
// exit ;
77067: GO 77233
// tmp := AreaToList ( area , i ) ;
77069: LD_ADDR_VAR 0 6
77073: PUSH
77074: LD_VAR 0 2
77078: PPUSH
77079: LD_VAR 0 5
77083: PPUSH
77084: CALL_OW 517
77088: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77089: LD_ADDR_VAR 0 5
77093: PUSH
77094: DOUBLE
77095: LD_INT 1
77097: DEC
77098: ST_TO_ADDR
77099: LD_VAR 0 6
77103: PUSH
77104: LD_INT 1
77106: ARRAY
77107: PUSH
77108: FOR_TO
77109: IFFALSE 77231
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77111: LD_ADDR_VAR 0 7
77115: PUSH
77116: LD_VAR 0 6
77120: PUSH
77121: LD_INT 1
77123: ARRAY
77124: PUSH
77125: LD_VAR 0 5
77129: ARRAY
77130: PUSH
77131: LD_VAR 0 6
77135: PUSH
77136: LD_INT 2
77138: ARRAY
77139: PUSH
77140: LD_VAR 0 5
77144: ARRAY
77145: PUSH
77146: EMPTY
77147: LIST
77148: LIST
77149: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
77150: LD_VAR 0 7
77154: PUSH
77155: LD_INT 1
77157: ARRAY
77158: PPUSH
77159: LD_VAR 0 7
77163: PUSH
77164: LD_INT 2
77166: ARRAY
77167: PPUSH
77168: CALL_OW 428
77172: PUSH
77173: LD_INT 0
77175: EQUAL
77176: IFFALSE 77229
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77178: LD_VAR 0 1
77182: PPUSH
77183: LD_VAR 0 7
77187: PUSH
77188: LD_INT 1
77190: ARRAY
77191: PPUSH
77192: LD_VAR 0 7
77196: PUSH
77197: LD_INT 2
77199: ARRAY
77200: PPUSH
77201: LD_VAR 0 3
77205: PPUSH
77206: CALL_OW 48
// result := IsPlaced ( unit ) ;
77210: LD_ADDR_VAR 0 4
77214: PUSH
77215: LD_VAR 0 1
77219: PPUSH
77220: CALL_OW 305
77224: ST_TO_ADDR
// exit ;
77225: POP
77226: POP
77227: GO 77233
// end ; end ;
77229: GO 77108
77231: POP
77232: POP
// end ;
77233: LD_VAR 0 4
77237: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77238: LD_INT 0
77240: PPUSH
77241: PPUSH
77242: PPUSH
// if not side or side > 8 then
77243: LD_VAR 0 1
77247: NOT
77248: PUSH
77249: LD_VAR 0 1
77253: PUSH
77254: LD_INT 8
77256: GREATER
77257: OR
77258: IFFALSE 77262
// exit ;
77260: GO 77449
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77262: LD_ADDR_VAR 0 4
77266: PUSH
77267: LD_INT 22
77269: PUSH
77270: LD_VAR 0 1
77274: PUSH
77275: EMPTY
77276: LIST
77277: LIST
77278: PUSH
77279: LD_INT 21
77281: PUSH
77282: LD_INT 3
77284: PUSH
77285: EMPTY
77286: LIST
77287: LIST
77288: PUSH
77289: EMPTY
77290: LIST
77291: LIST
77292: PPUSH
77293: CALL_OW 69
77297: ST_TO_ADDR
// if not tmp then
77298: LD_VAR 0 4
77302: NOT
77303: IFFALSE 77307
// exit ;
77305: GO 77449
// enable_addtolog := true ;
77307: LD_ADDR_OWVAR 81
77311: PUSH
77312: LD_INT 1
77314: ST_TO_ADDR
// AddToLog ( [ ) ;
77315: LD_STRING [
77317: PPUSH
77318: CALL_OW 561
// for i in tmp do
77322: LD_ADDR_VAR 0 3
77326: PUSH
77327: LD_VAR 0 4
77331: PUSH
77332: FOR_IN
77333: IFFALSE 77440
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77335: LD_STRING [
77337: PUSH
77338: LD_VAR 0 3
77342: PPUSH
77343: CALL_OW 266
77347: STR
77348: PUSH
77349: LD_STRING , 
77351: STR
77352: PUSH
77353: LD_VAR 0 3
77357: PPUSH
77358: CALL_OW 250
77362: STR
77363: PUSH
77364: LD_STRING , 
77366: STR
77367: PUSH
77368: LD_VAR 0 3
77372: PPUSH
77373: CALL_OW 251
77377: STR
77378: PUSH
77379: LD_STRING , 
77381: STR
77382: PUSH
77383: LD_VAR 0 3
77387: PPUSH
77388: CALL_OW 254
77392: STR
77393: PUSH
77394: LD_STRING , 
77396: STR
77397: PUSH
77398: LD_VAR 0 3
77402: PPUSH
77403: LD_INT 1
77405: PPUSH
77406: CALL_OW 268
77410: STR
77411: PUSH
77412: LD_STRING , 
77414: STR
77415: PUSH
77416: LD_VAR 0 3
77420: PPUSH
77421: LD_INT 2
77423: PPUSH
77424: CALL_OW 268
77428: STR
77429: PUSH
77430: LD_STRING ],
77432: STR
77433: PPUSH
77434: CALL_OW 561
// end ;
77438: GO 77332
77440: POP
77441: POP
// AddToLog ( ]; ) ;
77442: LD_STRING ];
77444: PPUSH
77445: CALL_OW 561
// end ;
77449: LD_VAR 0 2
77453: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77454: LD_INT 0
77456: PPUSH
77457: PPUSH
77458: PPUSH
77459: PPUSH
77460: PPUSH
// if not area or not rate or not max then
77461: LD_VAR 0 1
77465: NOT
77466: PUSH
77467: LD_VAR 0 2
77471: NOT
77472: OR
77473: PUSH
77474: LD_VAR 0 4
77478: NOT
77479: OR
77480: IFFALSE 77484
// exit ;
77482: GO 77676
// while 1 do
77484: LD_INT 1
77486: IFFALSE 77676
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77488: LD_ADDR_VAR 0 9
77492: PUSH
77493: LD_VAR 0 1
77497: PPUSH
77498: LD_INT 1
77500: PPUSH
77501: CALL_OW 287
77505: PUSH
77506: LD_INT 10
77508: MUL
77509: ST_TO_ADDR
// r := rate / 10 ;
77510: LD_ADDR_VAR 0 7
77514: PUSH
77515: LD_VAR 0 2
77519: PUSH
77520: LD_INT 10
77522: DIVREAL
77523: ST_TO_ADDR
// time := 1 1$00 ;
77524: LD_ADDR_VAR 0 8
77528: PUSH
77529: LD_INT 2100
77531: ST_TO_ADDR
// if amount < min then
77532: LD_VAR 0 9
77536: PUSH
77537: LD_VAR 0 3
77541: LESS
77542: IFFALSE 77560
// r := r * 2 else
77544: LD_ADDR_VAR 0 7
77548: PUSH
77549: LD_VAR 0 7
77553: PUSH
77554: LD_INT 2
77556: MUL
77557: ST_TO_ADDR
77558: GO 77586
// if amount > max then
77560: LD_VAR 0 9
77564: PUSH
77565: LD_VAR 0 4
77569: GREATER
77570: IFFALSE 77586
// r := r / 2 ;
77572: LD_ADDR_VAR 0 7
77576: PUSH
77577: LD_VAR 0 7
77581: PUSH
77582: LD_INT 2
77584: DIVREAL
77585: ST_TO_ADDR
// time := time / r ;
77586: LD_ADDR_VAR 0 8
77590: PUSH
77591: LD_VAR 0 8
77595: PUSH
77596: LD_VAR 0 7
77600: DIVREAL
77601: ST_TO_ADDR
// if time < 0 then
77602: LD_VAR 0 8
77606: PUSH
77607: LD_INT 0
77609: LESS
77610: IFFALSE 77627
// time := time * - 1 ;
77612: LD_ADDR_VAR 0 8
77616: PUSH
77617: LD_VAR 0 8
77621: PUSH
77622: LD_INT 1
77624: NEG
77625: MUL
77626: ST_TO_ADDR
// wait ( time ) ;
77627: LD_VAR 0 8
77631: PPUSH
77632: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
77636: LD_INT 35
77638: PPUSH
77639: LD_INT 875
77641: PPUSH
77642: CALL_OW 12
77646: PPUSH
77647: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77651: LD_INT 1
77653: PPUSH
77654: LD_INT 5
77656: PPUSH
77657: CALL_OW 12
77661: PPUSH
77662: LD_VAR 0 1
77666: PPUSH
77667: LD_INT 1
77669: PPUSH
77670: CALL_OW 55
// end ;
77674: GO 77484
// end ;
77676: LD_VAR 0 5
77680: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77681: LD_INT 0
77683: PPUSH
77684: PPUSH
77685: PPUSH
77686: PPUSH
77687: PPUSH
77688: PPUSH
77689: PPUSH
77690: PPUSH
// if not turrets or not factories then
77691: LD_VAR 0 1
77695: NOT
77696: PUSH
77697: LD_VAR 0 2
77701: NOT
77702: OR
77703: IFFALSE 77707
// exit ;
77705: GO 78014
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77707: LD_ADDR_VAR 0 10
77711: PUSH
77712: LD_INT 5
77714: PUSH
77715: LD_INT 6
77717: PUSH
77718: EMPTY
77719: LIST
77720: LIST
77721: PUSH
77722: LD_INT 2
77724: PUSH
77725: LD_INT 4
77727: PUSH
77728: EMPTY
77729: LIST
77730: LIST
77731: PUSH
77732: LD_INT 3
77734: PUSH
77735: LD_INT 5
77737: PUSH
77738: EMPTY
77739: LIST
77740: LIST
77741: PUSH
77742: EMPTY
77743: LIST
77744: LIST
77745: LIST
77746: PUSH
77747: LD_INT 24
77749: PUSH
77750: LD_INT 25
77752: PUSH
77753: EMPTY
77754: LIST
77755: LIST
77756: PUSH
77757: LD_INT 23
77759: PUSH
77760: LD_INT 27
77762: PUSH
77763: EMPTY
77764: LIST
77765: LIST
77766: PUSH
77767: EMPTY
77768: LIST
77769: LIST
77770: PUSH
77771: LD_INT 42
77773: PUSH
77774: LD_INT 43
77776: PUSH
77777: EMPTY
77778: LIST
77779: LIST
77780: PUSH
77781: LD_INT 44
77783: PUSH
77784: LD_INT 46
77786: PUSH
77787: EMPTY
77788: LIST
77789: LIST
77790: PUSH
77791: LD_INT 45
77793: PUSH
77794: LD_INT 47
77796: PUSH
77797: EMPTY
77798: LIST
77799: LIST
77800: PUSH
77801: EMPTY
77802: LIST
77803: LIST
77804: LIST
77805: PUSH
77806: EMPTY
77807: LIST
77808: LIST
77809: LIST
77810: ST_TO_ADDR
// result := [ ] ;
77811: LD_ADDR_VAR 0 3
77815: PUSH
77816: EMPTY
77817: ST_TO_ADDR
// for i in turrets do
77818: LD_ADDR_VAR 0 4
77822: PUSH
77823: LD_VAR 0 1
77827: PUSH
77828: FOR_IN
77829: IFFALSE 78012
// begin nat := GetNation ( i ) ;
77831: LD_ADDR_VAR 0 7
77835: PUSH
77836: LD_VAR 0 4
77840: PPUSH
77841: CALL_OW 248
77845: ST_TO_ADDR
// weapon := 0 ;
77846: LD_ADDR_VAR 0 8
77850: PUSH
77851: LD_INT 0
77853: ST_TO_ADDR
// if not nat then
77854: LD_VAR 0 7
77858: NOT
77859: IFFALSE 77863
// continue ;
77861: GO 77828
// for j in list [ nat ] do
77863: LD_ADDR_VAR 0 5
77867: PUSH
77868: LD_VAR 0 10
77872: PUSH
77873: LD_VAR 0 7
77877: ARRAY
77878: PUSH
77879: FOR_IN
77880: IFFALSE 77921
// if GetBWeapon ( i ) = j [ 1 ] then
77882: LD_VAR 0 4
77886: PPUSH
77887: CALL_OW 269
77891: PUSH
77892: LD_VAR 0 5
77896: PUSH
77897: LD_INT 1
77899: ARRAY
77900: EQUAL
77901: IFFALSE 77919
// begin weapon := j [ 2 ] ;
77903: LD_ADDR_VAR 0 8
77907: PUSH
77908: LD_VAR 0 5
77912: PUSH
77913: LD_INT 2
77915: ARRAY
77916: ST_TO_ADDR
// break ;
77917: GO 77921
// end ;
77919: GO 77879
77921: POP
77922: POP
// if not weapon then
77923: LD_VAR 0 8
77927: NOT
77928: IFFALSE 77932
// continue ;
77930: GO 77828
// for k in factories do
77932: LD_ADDR_VAR 0 6
77936: PUSH
77937: LD_VAR 0 2
77941: PUSH
77942: FOR_IN
77943: IFFALSE 78008
// begin weapons := AvailableWeaponList ( k ) ;
77945: LD_ADDR_VAR 0 9
77949: PUSH
77950: LD_VAR 0 6
77954: PPUSH
77955: CALL_OW 478
77959: ST_TO_ADDR
// if not weapons then
77960: LD_VAR 0 9
77964: NOT
77965: IFFALSE 77969
// continue ;
77967: GO 77942
// if weapon in weapons then
77969: LD_VAR 0 8
77973: PUSH
77974: LD_VAR 0 9
77978: IN
77979: IFFALSE 78006
// begin result := [ i , weapon ] ;
77981: LD_ADDR_VAR 0 3
77985: PUSH
77986: LD_VAR 0 4
77990: PUSH
77991: LD_VAR 0 8
77995: PUSH
77996: EMPTY
77997: LIST
77998: LIST
77999: ST_TO_ADDR
// exit ;
78000: POP
78001: POP
78002: POP
78003: POP
78004: GO 78014
// end ; end ;
78006: GO 77942
78008: POP
78009: POP
// end ;
78010: GO 77828
78012: POP
78013: POP
// end ;
78014: LD_VAR 0 3
78018: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78019: LD_INT 0
78021: PPUSH
// if not side or side > 8 then
78022: LD_VAR 0 3
78026: NOT
78027: PUSH
78028: LD_VAR 0 3
78032: PUSH
78033: LD_INT 8
78035: GREATER
78036: OR
78037: IFFALSE 78041
// exit ;
78039: GO 78100
// if not range then
78041: LD_VAR 0 4
78045: NOT
78046: IFFALSE 78057
// range := - 12 ;
78048: LD_ADDR_VAR 0 4
78052: PUSH
78053: LD_INT 12
78055: NEG
78056: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78057: LD_VAR 0 1
78061: PPUSH
78062: LD_VAR 0 2
78066: PPUSH
78067: LD_VAR 0 3
78071: PPUSH
78072: LD_VAR 0 4
78076: PPUSH
78077: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78081: LD_VAR 0 1
78085: PPUSH
78086: LD_VAR 0 2
78090: PPUSH
78091: LD_VAR 0 3
78095: PPUSH
78096: CALL_OW 331
// end ;
78100: LD_VAR 0 5
78104: RET
// export function Video ( mode ) ; begin
78105: LD_INT 0
78107: PPUSH
// ingame_video = mode ;
78108: LD_ADDR_OWVAR 52
78112: PUSH
78113: LD_VAR 0 1
78117: ST_TO_ADDR
// interface_hidden = mode ;
78118: LD_ADDR_OWVAR 54
78122: PUSH
78123: LD_VAR 0 1
78127: ST_TO_ADDR
// end ;
78128: LD_VAR 0 2
78132: RET
// export function Join ( array , element ) ; begin
78133: LD_INT 0
78135: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78136: LD_ADDR_VAR 0 3
78140: PUSH
78141: LD_VAR 0 1
78145: PPUSH
78146: LD_VAR 0 1
78150: PUSH
78151: LD_INT 1
78153: PLUS
78154: PPUSH
78155: LD_VAR 0 2
78159: PPUSH
78160: CALL_OW 1
78164: ST_TO_ADDR
// end ;
78165: LD_VAR 0 3
78169: RET
// export function JoinUnion ( array , element ) ; begin
78170: LD_INT 0
78172: PPUSH
// result := array union element ;
78173: LD_ADDR_VAR 0 3
78177: PUSH
78178: LD_VAR 0 1
78182: PUSH
78183: LD_VAR 0 2
78187: UNION
78188: ST_TO_ADDR
// end ;
78189: LD_VAR 0 3
78193: RET
// export function GetBehemoths ( side ) ; begin
78194: LD_INT 0
78196: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
78197: LD_ADDR_VAR 0 2
78201: PUSH
78202: LD_INT 22
78204: PUSH
78205: LD_VAR 0 1
78209: PUSH
78210: EMPTY
78211: LIST
78212: LIST
78213: PUSH
78214: LD_INT 31
78216: PUSH
78217: LD_INT 25
78219: PUSH
78220: EMPTY
78221: LIST
78222: LIST
78223: PUSH
78224: EMPTY
78225: LIST
78226: LIST
78227: PPUSH
78228: CALL_OW 69
78232: ST_TO_ADDR
// end ;
78233: LD_VAR 0 2
78237: RET
// export function Shuffle ( array ) ; var i , index ; begin
78238: LD_INT 0
78240: PPUSH
78241: PPUSH
78242: PPUSH
// result := [ ] ;
78243: LD_ADDR_VAR 0 2
78247: PUSH
78248: EMPTY
78249: ST_TO_ADDR
// if not array then
78250: LD_VAR 0 1
78254: NOT
78255: IFFALSE 78259
// exit ;
78257: GO 78358
// Randomize ;
78259: CALL_OW 10
// for i = array downto 1 do
78263: LD_ADDR_VAR 0 3
78267: PUSH
78268: DOUBLE
78269: LD_VAR 0 1
78273: INC
78274: ST_TO_ADDR
78275: LD_INT 1
78277: PUSH
78278: FOR_DOWNTO
78279: IFFALSE 78356
// begin index := rand ( 1 , array ) ;
78281: LD_ADDR_VAR 0 4
78285: PUSH
78286: LD_INT 1
78288: PPUSH
78289: LD_VAR 0 1
78293: PPUSH
78294: CALL_OW 12
78298: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78299: LD_ADDR_VAR 0 2
78303: PUSH
78304: LD_VAR 0 2
78308: PPUSH
78309: LD_VAR 0 2
78313: PUSH
78314: LD_INT 1
78316: PLUS
78317: PPUSH
78318: LD_VAR 0 1
78322: PUSH
78323: LD_VAR 0 4
78327: ARRAY
78328: PPUSH
78329: CALL_OW 2
78333: ST_TO_ADDR
// array := Delete ( array , index ) ;
78334: LD_ADDR_VAR 0 1
78338: PUSH
78339: LD_VAR 0 1
78343: PPUSH
78344: LD_VAR 0 4
78348: PPUSH
78349: CALL_OW 3
78353: ST_TO_ADDR
// end ;
78354: GO 78278
78356: POP
78357: POP
// end ;
78358: LD_VAR 0 2
78362: RET
// export function GetBaseMaterials ( base ) ; begin
78363: LD_INT 0
78365: PPUSH
// result := [ 0 , 0 , 0 ] ;
78366: LD_ADDR_VAR 0 2
78370: PUSH
78371: LD_INT 0
78373: PUSH
78374: LD_INT 0
78376: PUSH
78377: LD_INT 0
78379: PUSH
78380: EMPTY
78381: LIST
78382: LIST
78383: LIST
78384: ST_TO_ADDR
// if not base then
78385: LD_VAR 0 1
78389: NOT
78390: IFFALSE 78394
// exit ;
78392: GO 78443
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78394: LD_ADDR_VAR 0 2
78398: PUSH
78399: LD_VAR 0 1
78403: PPUSH
78404: LD_INT 1
78406: PPUSH
78407: CALL_OW 275
78411: PUSH
78412: LD_VAR 0 1
78416: PPUSH
78417: LD_INT 2
78419: PPUSH
78420: CALL_OW 275
78424: PUSH
78425: LD_VAR 0 1
78429: PPUSH
78430: LD_INT 3
78432: PPUSH
78433: CALL_OW 275
78437: PUSH
78438: EMPTY
78439: LIST
78440: LIST
78441: LIST
78442: ST_TO_ADDR
// end ;
78443: LD_VAR 0 2
78447: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78448: LD_INT 0
78450: PPUSH
78451: PPUSH
// result := array ;
78452: LD_ADDR_VAR 0 3
78456: PUSH
78457: LD_VAR 0 1
78461: ST_TO_ADDR
// if size > 0 then
78462: LD_VAR 0 2
78466: PUSH
78467: LD_INT 0
78469: GREATER
78470: IFFALSE 78516
// for i := array downto size do
78472: LD_ADDR_VAR 0 4
78476: PUSH
78477: DOUBLE
78478: LD_VAR 0 1
78482: INC
78483: ST_TO_ADDR
78484: LD_VAR 0 2
78488: PUSH
78489: FOR_DOWNTO
78490: IFFALSE 78514
// result := Delete ( result , result ) ;
78492: LD_ADDR_VAR 0 3
78496: PUSH
78497: LD_VAR 0 3
78501: PPUSH
78502: LD_VAR 0 3
78506: PPUSH
78507: CALL_OW 3
78511: ST_TO_ADDR
78512: GO 78489
78514: POP
78515: POP
// end ;
78516: LD_VAR 0 3
78520: RET
// export function ComExit ( unit ) ; var tmp ; begin
78521: LD_INT 0
78523: PPUSH
78524: PPUSH
// if not IsInUnit ( unit ) then
78525: LD_VAR 0 1
78529: PPUSH
78530: CALL_OW 310
78534: NOT
78535: IFFALSE 78539
// exit ;
78537: GO 78599
// tmp := IsInUnit ( unit ) ;
78539: LD_ADDR_VAR 0 3
78543: PUSH
78544: LD_VAR 0 1
78548: PPUSH
78549: CALL_OW 310
78553: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78554: LD_VAR 0 3
78558: PPUSH
78559: CALL_OW 247
78563: PUSH
78564: LD_INT 2
78566: EQUAL
78567: IFFALSE 78580
// ComExitVehicle ( unit ) else
78569: LD_VAR 0 1
78573: PPUSH
78574: CALL_OW 121
78578: GO 78589
// ComExitBuilding ( unit ) ;
78580: LD_VAR 0 1
78584: PPUSH
78585: CALL_OW 122
// result := tmp ;
78589: LD_ADDR_VAR 0 2
78593: PUSH
78594: LD_VAR 0 3
78598: ST_TO_ADDR
// end ;
78599: LD_VAR 0 2
78603: RET
// export function ComExitAll ( units ) ; var i ; begin
78604: LD_INT 0
78606: PPUSH
78607: PPUSH
// if not units then
78608: LD_VAR 0 1
78612: NOT
78613: IFFALSE 78617
// exit ;
78615: GO 78643
// for i in units do
78617: LD_ADDR_VAR 0 3
78621: PUSH
78622: LD_VAR 0 1
78626: PUSH
78627: FOR_IN
78628: IFFALSE 78641
// ComExit ( i ) ;
78630: LD_VAR 0 3
78634: PPUSH
78635: CALL 78521 0 1
78639: GO 78627
78641: POP
78642: POP
// end ;
78643: LD_VAR 0 2
78647: RET
// export function ResetHc ; begin
78648: LD_INT 0
78650: PPUSH
// InitHc ;
78651: CALL_OW 19
// hc_importance := 0 ;
78655: LD_ADDR_OWVAR 32
78659: PUSH
78660: LD_INT 0
78662: ST_TO_ADDR
// end ;
78663: LD_VAR 0 1
78667: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78668: LD_INT 0
78670: PPUSH
78671: PPUSH
78672: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78673: LD_ADDR_VAR 0 6
78677: PUSH
78678: LD_VAR 0 1
78682: PUSH
78683: LD_VAR 0 3
78687: PLUS
78688: PUSH
78689: LD_INT 2
78691: DIV
78692: ST_TO_ADDR
// if _x < 0 then
78693: LD_VAR 0 6
78697: PUSH
78698: LD_INT 0
78700: LESS
78701: IFFALSE 78718
// _x := _x * - 1 ;
78703: LD_ADDR_VAR 0 6
78707: PUSH
78708: LD_VAR 0 6
78712: PUSH
78713: LD_INT 1
78715: NEG
78716: MUL
78717: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78718: LD_ADDR_VAR 0 7
78722: PUSH
78723: LD_VAR 0 2
78727: PUSH
78728: LD_VAR 0 4
78732: PLUS
78733: PUSH
78734: LD_INT 2
78736: DIV
78737: ST_TO_ADDR
// if _y < 0 then
78738: LD_VAR 0 7
78742: PUSH
78743: LD_INT 0
78745: LESS
78746: IFFALSE 78763
// _y := _y * - 1 ;
78748: LD_ADDR_VAR 0 7
78752: PUSH
78753: LD_VAR 0 7
78757: PUSH
78758: LD_INT 1
78760: NEG
78761: MUL
78762: ST_TO_ADDR
// result := [ _x , _y ] ;
78763: LD_ADDR_VAR 0 5
78767: PUSH
78768: LD_VAR 0 6
78772: PUSH
78773: LD_VAR 0 7
78777: PUSH
78778: EMPTY
78779: LIST
78780: LIST
78781: ST_TO_ADDR
// end ;
78782: LD_VAR 0 5
78786: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78787: LD_INT 0
78789: PPUSH
78790: PPUSH
78791: PPUSH
78792: PPUSH
// task := GetTaskList ( unit ) ;
78793: LD_ADDR_VAR 0 7
78797: PUSH
78798: LD_VAR 0 1
78802: PPUSH
78803: CALL_OW 437
78807: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78808: LD_VAR 0 7
78812: NOT
78813: PUSH
78814: LD_VAR 0 1
78818: PPUSH
78819: LD_VAR 0 2
78823: PPUSH
78824: CALL_OW 308
78828: NOT
78829: AND
78830: IFFALSE 78834
// exit ;
78832: GO 78952
// if IsInArea ( unit , area ) then
78834: LD_VAR 0 1
78838: PPUSH
78839: LD_VAR 0 2
78843: PPUSH
78844: CALL_OW 308
78848: IFFALSE 78866
// begin ComMoveToArea ( unit , goAway ) ;
78850: LD_VAR 0 1
78854: PPUSH
78855: LD_VAR 0 3
78859: PPUSH
78860: CALL_OW 113
// exit ;
78864: GO 78952
// end ; if task [ 1 ] [ 1 ] <> M then
78866: LD_VAR 0 7
78870: PUSH
78871: LD_INT 1
78873: ARRAY
78874: PUSH
78875: LD_INT 1
78877: ARRAY
78878: PUSH
78879: LD_STRING M
78881: NONEQUAL
78882: IFFALSE 78886
// exit ;
78884: GO 78952
// x := task [ 1 ] [ 2 ] ;
78886: LD_ADDR_VAR 0 5
78890: PUSH
78891: LD_VAR 0 7
78895: PUSH
78896: LD_INT 1
78898: ARRAY
78899: PUSH
78900: LD_INT 2
78902: ARRAY
78903: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78904: LD_ADDR_VAR 0 6
78908: PUSH
78909: LD_VAR 0 7
78913: PUSH
78914: LD_INT 1
78916: ARRAY
78917: PUSH
78918: LD_INT 3
78920: ARRAY
78921: ST_TO_ADDR
// if InArea ( x , y , area ) then
78922: LD_VAR 0 5
78926: PPUSH
78927: LD_VAR 0 6
78931: PPUSH
78932: LD_VAR 0 2
78936: PPUSH
78937: CALL_OW 309
78941: IFFALSE 78952
// ComStop ( unit ) ;
78943: LD_VAR 0 1
78947: PPUSH
78948: CALL_OW 141
// end ;
78952: LD_VAR 0 4
78956: RET
// export function Abs ( value ) ; begin
78957: LD_INT 0
78959: PPUSH
// result := value ;
78960: LD_ADDR_VAR 0 2
78964: PUSH
78965: LD_VAR 0 1
78969: ST_TO_ADDR
// if value < 0 then
78970: LD_VAR 0 1
78974: PUSH
78975: LD_INT 0
78977: LESS
78978: IFFALSE 78995
// result := value * - 1 ;
78980: LD_ADDR_VAR 0 2
78984: PUSH
78985: LD_VAR 0 1
78989: PUSH
78990: LD_INT 1
78992: NEG
78993: MUL
78994: ST_TO_ADDR
// end ;
78995: LD_VAR 0 2
78999: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79000: LD_INT 0
79002: PPUSH
79003: PPUSH
79004: PPUSH
79005: PPUSH
79006: PPUSH
79007: PPUSH
79008: PPUSH
79009: PPUSH
// if not unit or not building then
79010: LD_VAR 0 1
79014: NOT
79015: PUSH
79016: LD_VAR 0 2
79020: NOT
79021: OR
79022: IFFALSE 79026
// exit ;
79024: GO 79252
// x := GetX ( building ) ;
79026: LD_ADDR_VAR 0 4
79030: PUSH
79031: LD_VAR 0 2
79035: PPUSH
79036: CALL_OW 250
79040: ST_TO_ADDR
// y := GetY ( building ) ;
79041: LD_ADDR_VAR 0 6
79045: PUSH
79046: LD_VAR 0 2
79050: PPUSH
79051: CALL_OW 251
79055: ST_TO_ADDR
// d := GetDir ( building ) ;
79056: LD_ADDR_VAR 0 8
79060: PUSH
79061: LD_VAR 0 2
79065: PPUSH
79066: CALL_OW 254
79070: ST_TO_ADDR
// r := 4 ;
79071: LD_ADDR_VAR 0 9
79075: PUSH
79076: LD_INT 4
79078: ST_TO_ADDR
// for i := 1 to 5 do
79079: LD_ADDR_VAR 0 10
79083: PUSH
79084: DOUBLE
79085: LD_INT 1
79087: DEC
79088: ST_TO_ADDR
79089: LD_INT 5
79091: PUSH
79092: FOR_TO
79093: IFFALSE 79250
// begin _x := ShiftX ( x , d , r + i ) ;
79095: LD_ADDR_VAR 0 5
79099: PUSH
79100: LD_VAR 0 4
79104: PPUSH
79105: LD_VAR 0 8
79109: PPUSH
79110: LD_VAR 0 9
79114: PUSH
79115: LD_VAR 0 10
79119: PLUS
79120: PPUSH
79121: CALL_OW 272
79125: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79126: LD_ADDR_VAR 0 7
79130: PUSH
79131: LD_VAR 0 6
79135: PPUSH
79136: LD_VAR 0 8
79140: PPUSH
79141: LD_VAR 0 9
79145: PUSH
79146: LD_VAR 0 10
79150: PLUS
79151: PPUSH
79152: CALL_OW 273
79156: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79157: LD_VAR 0 5
79161: PPUSH
79162: LD_VAR 0 7
79166: PPUSH
79167: CALL_OW 488
79171: PUSH
79172: LD_VAR 0 5
79176: PPUSH
79177: LD_VAR 0 7
79181: PPUSH
79182: CALL_OW 428
79186: PPUSH
79187: CALL_OW 247
79191: PUSH
79192: LD_INT 3
79194: PUSH
79195: LD_INT 2
79197: PUSH
79198: EMPTY
79199: LIST
79200: LIST
79201: IN
79202: NOT
79203: AND
79204: IFFALSE 79248
// begin ComMoveXY ( unit , _x , _y ) ;
79206: LD_VAR 0 1
79210: PPUSH
79211: LD_VAR 0 5
79215: PPUSH
79216: LD_VAR 0 7
79220: PPUSH
79221: CALL_OW 111
// result := [ _x , _y ] ;
79225: LD_ADDR_VAR 0 3
79229: PUSH
79230: LD_VAR 0 5
79234: PUSH
79235: LD_VAR 0 7
79239: PUSH
79240: EMPTY
79241: LIST
79242: LIST
79243: ST_TO_ADDR
// exit ;
79244: POP
79245: POP
79246: GO 79252
// end ; end ;
79248: GO 79092
79250: POP
79251: POP
// end ;
79252: LD_VAR 0 3
79256: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79257: LD_INT 0
79259: PPUSH
79260: PPUSH
79261: PPUSH
// result := 0 ;
79262: LD_ADDR_VAR 0 3
79266: PUSH
79267: LD_INT 0
79269: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79270: LD_VAR 0 1
79274: PUSH
79275: LD_INT 0
79277: LESS
79278: PUSH
79279: LD_VAR 0 1
79283: PUSH
79284: LD_INT 8
79286: GREATER
79287: OR
79288: PUSH
79289: LD_VAR 0 2
79293: PUSH
79294: LD_INT 0
79296: LESS
79297: OR
79298: PUSH
79299: LD_VAR 0 2
79303: PUSH
79304: LD_INT 8
79306: GREATER
79307: OR
79308: IFFALSE 79312
// exit ;
79310: GO 79387
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79312: LD_ADDR_VAR 0 4
79316: PUSH
79317: LD_INT 22
79319: PUSH
79320: LD_VAR 0 2
79324: PUSH
79325: EMPTY
79326: LIST
79327: LIST
79328: PPUSH
79329: CALL_OW 69
79333: PUSH
79334: FOR_IN
79335: IFFALSE 79385
// begin un := UnitShoot ( i ) ;
79337: LD_ADDR_VAR 0 5
79341: PUSH
79342: LD_VAR 0 4
79346: PPUSH
79347: CALL_OW 504
79351: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79352: LD_VAR 0 5
79356: PPUSH
79357: CALL_OW 255
79361: PUSH
79362: LD_VAR 0 1
79366: EQUAL
79367: IFFALSE 79383
// begin result := un ;
79369: LD_ADDR_VAR 0 3
79373: PUSH
79374: LD_VAR 0 5
79378: ST_TO_ADDR
// exit ;
79379: POP
79380: POP
79381: GO 79387
// end ; end ;
79383: GO 79334
79385: POP
79386: POP
// end ;
79387: LD_VAR 0 3
79391: RET
// export function GetCargoBay ( units ) ; begin
79392: LD_INT 0
79394: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79395: LD_ADDR_VAR 0 2
79399: PUSH
79400: LD_VAR 0 1
79404: PPUSH
79405: LD_INT 2
79407: PUSH
79408: LD_INT 34
79410: PUSH
79411: LD_INT 12
79413: PUSH
79414: EMPTY
79415: LIST
79416: LIST
79417: PUSH
79418: LD_INT 34
79420: PUSH
79421: LD_INT 51
79423: PUSH
79424: EMPTY
79425: LIST
79426: LIST
79427: PUSH
79428: LD_INT 34
79430: PUSH
79431: LD_INT 32
79433: PUSH
79434: EMPTY
79435: LIST
79436: LIST
79437: PUSH
79438: LD_INT 34
79440: PUSH
79441: LD_EXP 66
79445: PUSH
79446: EMPTY
79447: LIST
79448: LIST
79449: PUSH
79450: EMPTY
79451: LIST
79452: LIST
79453: LIST
79454: LIST
79455: LIST
79456: PPUSH
79457: CALL_OW 72
79461: ST_TO_ADDR
// end ;
79462: LD_VAR 0 2
79466: RET
// export function Negate ( value ) ; begin
79467: LD_INT 0
79469: PPUSH
// result := not value ;
79470: LD_ADDR_VAR 0 2
79474: PUSH
79475: LD_VAR 0 1
79479: NOT
79480: ST_TO_ADDR
// end ;
79481: LD_VAR 0 2
79485: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
79486: LD_INT 0
79488: PPUSH
// if x1 = x2 then
79489: LD_VAR 0 1
79493: PUSH
79494: LD_VAR 0 3
79498: EQUAL
79499: IFFALSE 79533
// begin if y1 > y2 then
79501: LD_VAR 0 2
79505: PUSH
79506: LD_VAR 0 4
79510: GREATER
79511: IFFALSE 79523
// result := 0 else
79513: LD_ADDR_VAR 0 5
79517: PUSH
79518: LD_INT 0
79520: ST_TO_ADDR
79521: GO 79531
// result := 3 ;
79523: LD_ADDR_VAR 0 5
79527: PUSH
79528: LD_INT 3
79530: ST_TO_ADDR
// exit ;
79531: GO 79619
// end ; if y1 = y2 then
79533: LD_VAR 0 2
79537: PUSH
79538: LD_VAR 0 4
79542: EQUAL
79543: IFFALSE 79577
// begin if x1 > x2 then
79545: LD_VAR 0 1
79549: PUSH
79550: LD_VAR 0 3
79554: GREATER
79555: IFFALSE 79567
// result := 1 else
79557: LD_ADDR_VAR 0 5
79561: PUSH
79562: LD_INT 1
79564: ST_TO_ADDR
79565: GO 79575
// result := 4 ;
79567: LD_ADDR_VAR 0 5
79571: PUSH
79572: LD_INT 4
79574: ST_TO_ADDR
// exit ;
79575: GO 79619
// end ; if x1 > x2 and y1 > y2 then
79577: LD_VAR 0 1
79581: PUSH
79582: LD_VAR 0 3
79586: GREATER
79587: PUSH
79588: LD_VAR 0 2
79592: PUSH
79593: LD_VAR 0 4
79597: GREATER
79598: AND
79599: IFFALSE 79611
// result := 2 else
79601: LD_ADDR_VAR 0 5
79605: PUSH
79606: LD_INT 2
79608: ST_TO_ADDR
79609: GO 79619
// result := 5 ;
79611: LD_ADDR_VAR 0 5
79615: PUSH
79616: LD_INT 5
79618: ST_TO_ADDR
// end ;
79619: LD_VAR 0 5
79623: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79624: LD_INT 0
79626: PPUSH
79627: PPUSH
// if not driver or not IsInUnit ( driver ) then
79628: LD_VAR 0 1
79632: NOT
79633: PUSH
79634: LD_VAR 0 1
79638: PPUSH
79639: CALL_OW 310
79643: NOT
79644: OR
79645: IFFALSE 79649
// exit ;
79647: GO 79739
// vehicle := IsInUnit ( driver ) ;
79649: LD_ADDR_VAR 0 3
79653: PUSH
79654: LD_VAR 0 1
79658: PPUSH
79659: CALL_OW 310
79663: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79664: LD_VAR 0 1
79668: PPUSH
79669: LD_STRING \
79671: PUSH
79672: LD_INT 0
79674: PUSH
79675: LD_INT 0
79677: PUSH
79678: LD_INT 0
79680: PUSH
79681: LD_INT 0
79683: PUSH
79684: LD_INT 0
79686: PUSH
79687: LD_INT 0
79689: PUSH
79690: EMPTY
79691: LIST
79692: LIST
79693: LIST
79694: LIST
79695: LIST
79696: LIST
79697: LIST
79698: PUSH
79699: LD_STRING E
79701: PUSH
79702: LD_INT 0
79704: PUSH
79705: LD_INT 0
79707: PUSH
79708: LD_VAR 0 3
79712: PUSH
79713: LD_INT 0
79715: PUSH
79716: LD_INT 0
79718: PUSH
79719: LD_INT 0
79721: PUSH
79722: EMPTY
79723: LIST
79724: LIST
79725: LIST
79726: LIST
79727: LIST
79728: LIST
79729: LIST
79730: PUSH
79731: EMPTY
79732: LIST
79733: LIST
79734: PPUSH
79735: CALL_OW 446
// end ;
79739: LD_VAR 0 2
79743: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79744: LD_INT 0
79746: PPUSH
79747: PPUSH
// if not driver or not IsInUnit ( driver ) then
79748: LD_VAR 0 1
79752: NOT
79753: PUSH
79754: LD_VAR 0 1
79758: PPUSH
79759: CALL_OW 310
79763: NOT
79764: OR
79765: IFFALSE 79769
// exit ;
79767: GO 79859
// vehicle := IsInUnit ( driver ) ;
79769: LD_ADDR_VAR 0 3
79773: PUSH
79774: LD_VAR 0 1
79778: PPUSH
79779: CALL_OW 310
79783: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79784: LD_VAR 0 1
79788: PPUSH
79789: LD_STRING \
79791: PUSH
79792: LD_INT 0
79794: PUSH
79795: LD_INT 0
79797: PUSH
79798: LD_INT 0
79800: PUSH
79801: LD_INT 0
79803: PUSH
79804: LD_INT 0
79806: PUSH
79807: LD_INT 0
79809: PUSH
79810: EMPTY
79811: LIST
79812: LIST
79813: LIST
79814: LIST
79815: LIST
79816: LIST
79817: LIST
79818: PUSH
79819: LD_STRING E
79821: PUSH
79822: LD_INT 0
79824: PUSH
79825: LD_INT 0
79827: PUSH
79828: LD_VAR 0 3
79832: PUSH
79833: LD_INT 0
79835: PUSH
79836: LD_INT 0
79838: PUSH
79839: LD_INT 0
79841: PUSH
79842: EMPTY
79843: LIST
79844: LIST
79845: LIST
79846: LIST
79847: LIST
79848: LIST
79849: LIST
79850: PUSH
79851: EMPTY
79852: LIST
79853: LIST
79854: PPUSH
79855: CALL_OW 447
// end ;
79859: LD_VAR 0 2
79863: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79864: LD_INT 0
79866: PPUSH
79867: PPUSH
79868: PPUSH
// tmp := [ ] ;
79869: LD_ADDR_VAR 0 5
79873: PUSH
79874: EMPTY
79875: ST_TO_ADDR
// for i in units do
79876: LD_ADDR_VAR 0 4
79880: PUSH
79881: LD_VAR 0 1
79885: PUSH
79886: FOR_IN
79887: IFFALSE 79925
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79889: LD_ADDR_VAR 0 5
79893: PUSH
79894: LD_VAR 0 5
79898: PPUSH
79899: LD_VAR 0 5
79903: PUSH
79904: LD_INT 1
79906: PLUS
79907: PPUSH
79908: LD_VAR 0 4
79912: PPUSH
79913: CALL_OW 256
79917: PPUSH
79918: CALL_OW 2
79922: ST_TO_ADDR
79923: GO 79886
79925: POP
79926: POP
// if not tmp then
79927: LD_VAR 0 5
79931: NOT
79932: IFFALSE 79936
// exit ;
79934: GO 79984
// if asc then
79936: LD_VAR 0 2
79940: IFFALSE 79964
// result := SortListByListAsc ( units , tmp ) else
79942: LD_ADDR_VAR 0 3
79946: PUSH
79947: LD_VAR 0 1
79951: PPUSH
79952: LD_VAR 0 5
79956: PPUSH
79957: CALL_OW 76
79961: ST_TO_ADDR
79962: GO 79984
// result := SortListByListDesc ( units , tmp ) ;
79964: LD_ADDR_VAR 0 3
79968: PUSH
79969: LD_VAR 0 1
79973: PPUSH
79974: LD_VAR 0 5
79978: PPUSH
79979: CALL_OW 77
79983: ST_TO_ADDR
// end ;
79984: LD_VAR 0 3
79988: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79989: LD_INT 0
79991: PPUSH
79992: PPUSH
// task := GetTaskList ( mech ) ;
79993: LD_ADDR_VAR 0 4
79997: PUSH
79998: LD_VAR 0 1
80002: PPUSH
80003: CALL_OW 437
80007: ST_TO_ADDR
// if not task then
80008: LD_VAR 0 4
80012: NOT
80013: IFFALSE 80017
// exit ;
80015: GO 80059
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80017: LD_ADDR_VAR 0 3
80021: PUSH
80022: LD_VAR 0 4
80026: PUSH
80027: LD_INT 1
80029: ARRAY
80030: PUSH
80031: LD_INT 1
80033: ARRAY
80034: PUSH
80035: LD_STRING r
80037: EQUAL
80038: PUSH
80039: LD_VAR 0 4
80043: PUSH
80044: LD_INT 1
80046: ARRAY
80047: PUSH
80048: LD_INT 4
80050: ARRAY
80051: PUSH
80052: LD_VAR 0 2
80056: EQUAL
80057: AND
80058: ST_TO_ADDR
// end ;
80059: LD_VAR 0 3
80063: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80064: LD_INT 0
80066: PPUSH
// SetDir ( unit , d ) ;
80067: LD_VAR 0 1
80071: PPUSH
80072: LD_VAR 0 4
80076: PPUSH
80077: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80081: LD_VAR 0 1
80085: PPUSH
80086: LD_VAR 0 2
80090: PPUSH
80091: LD_VAR 0 3
80095: PPUSH
80096: LD_VAR 0 5
80100: PPUSH
80101: CALL_OW 48
// end ;
80105: LD_VAR 0 6
80109: RET
// export function ToNaturalNumber ( number ) ; begin
80110: LD_INT 0
80112: PPUSH
// result := number div 1 ;
80113: LD_ADDR_VAR 0 2
80117: PUSH
80118: LD_VAR 0 1
80122: PUSH
80123: LD_INT 1
80125: DIV
80126: ST_TO_ADDR
// if number < 0 then
80127: LD_VAR 0 1
80131: PUSH
80132: LD_INT 0
80134: LESS
80135: IFFALSE 80145
// result := 0 ;
80137: LD_ADDR_VAR 0 2
80141: PUSH
80142: LD_INT 0
80144: ST_TO_ADDR
// end ;
80145: LD_VAR 0 2
80149: RET
// export function SortByClass ( units , class ) ; var un ; begin
80150: LD_INT 0
80152: PPUSH
80153: PPUSH
// if not units or not class then
80154: LD_VAR 0 1
80158: NOT
80159: PUSH
80160: LD_VAR 0 2
80164: NOT
80165: OR
80166: IFFALSE 80170
// exit ;
80168: GO 80265
// result := [ ] ;
80170: LD_ADDR_VAR 0 3
80174: PUSH
80175: EMPTY
80176: ST_TO_ADDR
// for un in units do
80177: LD_ADDR_VAR 0 4
80181: PUSH
80182: LD_VAR 0 1
80186: PUSH
80187: FOR_IN
80188: IFFALSE 80263
// if GetClass ( un ) = class then
80190: LD_VAR 0 4
80194: PPUSH
80195: CALL_OW 257
80199: PUSH
80200: LD_VAR 0 2
80204: EQUAL
80205: IFFALSE 80232
// result := Insert ( result , 1 , un ) else
80207: LD_ADDR_VAR 0 3
80211: PUSH
80212: LD_VAR 0 3
80216: PPUSH
80217: LD_INT 1
80219: PPUSH
80220: LD_VAR 0 4
80224: PPUSH
80225: CALL_OW 2
80229: ST_TO_ADDR
80230: GO 80261
// result := Replace ( result , result + 1 , un ) ;
80232: LD_ADDR_VAR 0 3
80236: PUSH
80237: LD_VAR 0 3
80241: PPUSH
80242: LD_VAR 0 3
80246: PUSH
80247: LD_INT 1
80249: PLUS
80250: PPUSH
80251: LD_VAR 0 4
80255: PPUSH
80256: CALL_OW 1
80260: ST_TO_ADDR
80261: GO 80187
80263: POP
80264: POP
// end ;
80265: LD_VAR 0 3
80269: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80270: LD_INT 0
80272: PPUSH
80273: PPUSH
80274: PPUSH
80275: PPUSH
80276: PPUSH
80277: PPUSH
80278: PPUSH
// result := [ ] ;
80279: LD_ADDR_VAR 0 4
80283: PUSH
80284: EMPTY
80285: ST_TO_ADDR
// if x - r < 0 then
80286: LD_VAR 0 1
80290: PUSH
80291: LD_VAR 0 3
80295: MINUS
80296: PUSH
80297: LD_INT 0
80299: LESS
80300: IFFALSE 80312
// min_x := 0 else
80302: LD_ADDR_VAR 0 8
80306: PUSH
80307: LD_INT 0
80309: ST_TO_ADDR
80310: GO 80328
// min_x := x - r ;
80312: LD_ADDR_VAR 0 8
80316: PUSH
80317: LD_VAR 0 1
80321: PUSH
80322: LD_VAR 0 3
80326: MINUS
80327: ST_TO_ADDR
// if y - r < 0 then
80328: LD_VAR 0 2
80332: PUSH
80333: LD_VAR 0 3
80337: MINUS
80338: PUSH
80339: LD_INT 0
80341: LESS
80342: IFFALSE 80354
// min_y := 0 else
80344: LD_ADDR_VAR 0 7
80348: PUSH
80349: LD_INT 0
80351: ST_TO_ADDR
80352: GO 80370
// min_y := y - r ;
80354: LD_ADDR_VAR 0 7
80358: PUSH
80359: LD_VAR 0 2
80363: PUSH
80364: LD_VAR 0 3
80368: MINUS
80369: ST_TO_ADDR
// max_x := x + r ;
80370: LD_ADDR_VAR 0 9
80374: PUSH
80375: LD_VAR 0 1
80379: PUSH
80380: LD_VAR 0 3
80384: PLUS
80385: ST_TO_ADDR
// max_y := y + r ;
80386: LD_ADDR_VAR 0 10
80390: PUSH
80391: LD_VAR 0 2
80395: PUSH
80396: LD_VAR 0 3
80400: PLUS
80401: ST_TO_ADDR
// for _x = min_x to max_x do
80402: LD_ADDR_VAR 0 5
80406: PUSH
80407: DOUBLE
80408: LD_VAR 0 8
80412: DEC
80413: ST_TO_ADDR
80414: LD_VAR 0 9
80418: PUSH
80419: FOR_TO
80420: IFFALSE 80521
// for _y = min_y to max_y do
80422: LD_ADDR_VAR 0 6
80426: PUSH
80427: DOUBLE
80428: LD_VAR 0 7
80432: DEC
80433: ST_TO_ADDR
80434: LD_VAR 0 10
80438: PUSH
80439: FOR_TO
80440: IFFALSE 80517
// begin if not ValidHex ( _x , _y ) then
80442: LD_VAR 0 5
80446: PPUSH
80447: LD_VAR 0 6
80451: PPUSH
80452: CALL_OW 488
80456: NOT
80457: IFFALSE 80461
// continue ;
80459: GO 80439
// if GetResourceTypeXY ( _x , _y ) then
80461: LD_VAR 0 5
80465: PPUSH
80466: LD_VAR 0 6
80470: PPUSH
80471: CALL_OW 283
80475: IFFALSE 80515
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80477: LD_ADDR_VAR 0 4
80481: PUSH
80482: LD_VAR 0 4
80486: PPUSH
80487: LD_VAR 0 4
80491: PUSH
80492: LD_INT 1
80494: PLUS
80495: PPUSH
80496: LD_VAR 0 5
80500: PUSH
80501: LD_VAR 0 6
80505: PUSH
80506: EMPTY
80507: LIST
80508: LIST
80509: PPUSH
80510: CALL_OW 1
80514: ST_TO_ADDR
// end ;
80515: GO 80439
80517: POP
80518: POP
80519: GO 80419
80521: POP
80522: POP
// end ;
80523: LD_VAR 0 4
80527: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
80528: LD_INT 0
80530: PPUSH
80531: PPUSH
80532: PPUSH
80533: PPUSH
80534: PPUSH
80535: PPUSH
// if not units then
80536: LD_VAR 0 1
80540: NOT
80541: IFFALSE 80545
// exit ;
80543: GO 80946
// result := UnitFilter ( units , [ f_ok ] ) ;
80545: LD_ADDR_VAR 0 3
80549: PUSH
80550: LD_VAR 0 1
80554: PPUSH
80555: LD_INT 50
80557: PUSH
80558: EMPTY
80559: LIST
80560: PPUSH
80561: CALL_OW 72
80565: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80566: LD_ADDR_VAR 0 7
80570: PUSH
80571: LD_VAR 0 1
80575: PUSH
80576: LD_INT 1
80578: ARRAY
80579: PPUSH
80580: CALL_OW 255
80584: ST_TO_ADDR
// if not result then
80585: LD_VAR 0 3
80589: NOT
80590: IFFALSE 80594
// exit ;
80592: GO 80946
// for i in result do
80594: LD_ADDR_VAR 0 4
80598: PUSH
80599: LD_VAR 0 3
80603: PUSH
80604: FOR_IN
80605: IFFALSE 80944
// begin tag := GetTag ( i ) + 1 ;
80607: LD_ADDR_VAR 0 8
80611: PUSH
80612: LD_VAR 0 4
80616: PPUSH
80617: CALL_OW 110
80621: PUSH
80622: LD_INT 1
80624: PLUS
80625: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
80626: LD_ADDR_VAR 0 6
80630: PUSH
80631: LD_VAR 0 4
80635: PPUSH
80636: CALL_OW 250
80640: PPUSH
80641: LD_VAR 0 4
80645: PPUSH
80646: CALL_OW 251
80650: PPUSH
80651: LD_INT 6
80653: PPUSH
80654: CALL 80270 0 3
80658: ST_TO_ADDR
// if cr then
80659: LD_VAR 0 6
80663: IFFALSE 80702
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80665: LD_VAR 0 4
80669: PPUSH
80670: LD_VAR 0 6
80674: PUSH
80675: LD_INT 1
80677: ARRAY
80678: PUSH
80679: LD_INT 1
80681: ARRAY
80682: PPUSH
80683: LD_VAR 0 6
80687: PUSH
80688: LD_INT 1
80690: ARRAY
80691: PUSH
80692: LD_INT 2
80694: ARRAY
80695: PPUSH
80696: CALL_OW 116
80700: GO 80942
// if path > tag then
80702: LD_VAR 0 2
80706: PUSH
80707: LD_VAR 0 8
80711: GREATER
80712: IFFALSE 80890
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
80714: LD_ADDR_VAR 0 5
80718: PUSH
80719: LD_INT 81
80721: PUSH
80722: LD_VAR 0 7
80726: PUSH
80727: EMPTY
80728: LIST
80729: LIST
80730: PUSH
80731: LD_INT 91
80733: PUSH
80734: LD_VAR 0 4
80738: PUSH
80739: LD_INT 12
80741: PUSH
80742: EMPTY
80743: LIST
80744: LIST
80745: LIST
80746: PUSH
80747: EMPTY
80748: LIST
80749: LIST
80750: PPUSH
80751: CALL_OW 69
80755: ST_TO_ADDR
// if enemy then
80756: LD_VAR 0 5
80760: IFFALSE 80788
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80762: LD_VAR 0 4
80766: PPUSH
80767: LD_VAR 0 5
80771: PPUSH
80772: LD_VAR 0 4
80776: PPUSH
80777: CALL_OW 74
80781: PPUSH
80782: CALL_OW 115
80786: GO 80888
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80788: LD_VAR 0 4
80792: PPUSH
80793: LD_VAR 0 2
80797: PUSH
80798: LD_VAR 0 8
80802: ARRAY
80803: PUSH
80804: LD_INT 1
80806: ARRAY
80807: PPUSH
80808: LD_VAR 0 2
80812: PUSH
80813: LD_VAR 0 8
80817: ARRAY
80818: PUSH
80819: LD_INT 2
80821: ARRAY
80822: PPUSH
80823: CALL_OW 297
80827: PUSH
80828: LD_INT 6
80830: GREATER
80831: IFFALSE 80874
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80833: LD_VAR 0 4
80837: PPUSH
80838: LD_VAR 0 2
80842: PUSH
80843: LD_VAR 0 8
80847: ARRAY
80848: PUSH
80849: LD_INT 1
80851: ARRAY
80852: PPUSH
80853: LD_VAR 0 2
80857: PUSH
80858: LD_VAR 0 8
80862: ARRAY
80863: PUSH
80864: LD_INT 2
80866: ARRAY
80867: PPUSH
80868: CALL_OW 114
80872: GO 80888
// SetTag ( i , tag ) ;
80874: LD_VAR 0 4
80878: PPUSH
80879: LD_VAR 0 8
80883: PPUSH
80884: CALL_OW 109
// end else
80888: GO 80942
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
80890: LD_ADDR_VAR 0 5
80894: PUSH
80895: LD_INT 81
80897: PUSH
80898: LD_VAR 0 7
80902: PUSH
80903: EMPTY
80904: LIST
80905: LIST
80906: PPUSH
80907: CALL_OW 69
80911: ST_TO_ADDR
// if enemy then
80912: LD_VAR 0 5
80916: IFFALSE 80942
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80918: LD_VAR 0 4
80922: PPUSH
80923: LD_VAR 0 5
80927: PPUSH
80928: LD_VAR 0 4
80932: PPUSH
80933: CALL_OW 74
80937: PPUSH
80938: CALL_OW 115
// end ; end ;
80942: GO 80604
80944: POP
80945: POP
// end ;
80946: LD_VAR 0 3
80950: RET
