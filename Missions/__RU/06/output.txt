// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export vehiclesFrom05 , resourcesFrom05 , fastBreakthrough , stevensStatus , apeTechsStatus ; export techMatPredStatus ; export vehsFrom06 , resourcesFrom06 ; export dial_SibTechsBlocker , dial_VsevolodContactBlocker , dial_TrapDialogBlocker , dial_ConvoyDialogBlocker , dial_NorthBlocker , dial_EndMissionDialogBlocker ; export claimOvsyenkoBase , claimTerminalBase , lostAgainBase ; export immortalVsevolodTeam , savedVsevolod , vsevolodWaitGorky ; export canGoNorth ; export enableVsevolodCounter ; export canSpawnReinforces ; export canEndMission ; export canRemoveUnits ; export timeToAttack ; export cratesSpawned ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 308 0 0
// vehiclesFrom05 = LoadVariable ( 05_Tanks_4 , [ ] ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 05_Tanks_4
  31: PPUSH
  32: EMPTY
  33: PPUSH
  34: CALL_OW 30
  38: ST_TO_ADDR
// resourcesFrom05 = LoadVariable ( 05_ResourcesInCargo_3 , [ ] ) ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: LD_STRING 05_ResourcesInCargo_3
  46: PPUSH
  47: EMPTY
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// fastBreakthrough = LoadVariable ( 05_FastBreakthrough_6 , false ) ;
  54: LD_ADDR_EXP 3
  58: PUSH
  59: LD_STRING 05_FastBreakthrough_6
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// stevensStatus = LoadVariable ( 05_StevensStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 4
  74: PUSH
  75: LD_STRING 05_StevensStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// apeTechsStatus = LoadVariable ( 05_ApeTechsStatus_7 , [ 0 , 0 , 0 ] ) ;
  86: LD_ADDR_EXP 5
  90: PUSH
  91: LD_STRING 05_ApeTechsStatus_7
  93: PPUSH
  94: LD_INT 0
  96: PUSH
  97: LD_INT 0
  99: PUSH
 100: LD_INT 0
 102: PUSH
 103: EMPTY
 104: LIST
 105: LIST
 106: LIST
 107: PPUSH
 108: CALL_OW 30
 112: ST_TO_ADDR
// techMatPredStatus = state_enabled ;
 113: LD_ADDR_EXP 6
 117: PUSH
 118: LD_INT 1
 120: ST_TO_ADDR
// vehsFrom06 = [ ] ;
 121: LD_ADDR_EXP 7
 125: PUSH
 126: EMPTY
 127: ST_TO_ADDR
// resourcesFrom06 = [ ] ;
 128: LD_ADDR_EXP 8
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// dial_SibTechsBlocker = false ;
 135: LD_ADDR_EXP 9
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// dial_VsevolodContactBlocker = false ;
 143: LD_ADDR_EXP 10
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// dial_TrapDialogBlocker = false ;
 151: LD_ADDR_EXP 11
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// dial_ConvoyDialogBlocker = false ;
 159: LD_ADDR_EXP 12
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// dial_NorthBlocker = false ;
 167: LD_ADDR_EXP 13
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// dial_EndMissionDialogBlocker = false ;
 175: LD_ADDR_EXP 14
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// claimOvsyenkoBase = false ;
 183: LD_ADDR_EXP 15
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// claimTerminalBase = false ;
 191: LD_ADDR_EXP 16
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// lostAgainBase = false ;
 199: LD_ADDR_EXP 17
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// immortalVsevolodTeam = true ;
 207: LD_ADDR_EXP 18
 211: PUSH
 212: LD_INT 1
 214: ST_TO_ADDR
// savedVsevolod = false ;
 215: LD_ADDR_EXP 19
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// vsevolodWaitGorky = false ;
 223: LD_ADDR_EXP 20
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// enableVsevolodCounter = false ;
 231: LD_ADDR_EXP 22
 235: PUSH
 236: LD_INT 0
 238: ST_TO_ADDR
// canGoNorth = false ;
 239: LD_ADDR_EXP 21
 243: PUSH
 244: LD_INT 0
 246: ST_TO_ADDR
// canSpawnReinforces = false ;
 247: LD_ADDR_EXP 23
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// canEndMission = false ;
 255: LD_ADDR_EXP 24
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// canRemoveUnits = false ;
 263: LD_ADDR_EXP 25
 267: PUSH
 268: LD_INT 0
 270: ST_TO_ADDR
// timeToAttack = 0 0$00 ;
 271: LD_ADDR_EXP 26
 275: PUSH
 276: LD_INT 0
 278: ST_TO_ADDR
// cratesSpawned = 0 ;
 279: LD_ADDR_EXP 27
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// PrepareRussians ;
 287: CALL 913 0 0
// PrepareAmericans ;
 291: CALL 3344 0 0
// Nef_PrepareNature ;
 295: CALL 4459 0 0
// MissionIntro ;
 299: CALL 16068 0 0
// end ; end_of_file
 303: LD_VAR 0 1
 307: RET
// export function InitMapConfig ; begin
 308: LD_INT 0
 310: PPUSH
// BaseMapConfig ;
 311: CALL 324 0 0
// MissionMapConfig ;
 315: CALL 414 0 0
// end ;
 319: LD_VAR 0 1
 323: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 324: LD_INT 0
 326: PPUSH
// animalsAmount = [ 3 , 3 , 1 , 3 , 0 ] ;
 327: LD_ADDR_EXP 28
 331: PUSH
 332: LD_INT 3
 334: PUSH
 335: LD_INT 3
 337: PUSH
 338: LD_INT 1
 340: PUSH
 341: LD_INT 3
 343: PUSH
 344: LD_INT 0
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 354: LD_ADDR_EXP 29
 358: PUSH
 359: LD_INT 2
 361: PUSH
 362: LD_INT 2
 364: PUSH
 365: LD_INT 2
 367: PUSH
 368: LD_INT 2
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: LIST
 375: LIST
 376: ST_TO_ADDR
// animalsAgression = 3 ;
 377: LD_ADDR_EXP 30
 381: PUSH
 382: LD_INT 3
 384: ST_TO_ADDR
// debugMode = 0 ;
 385: LD_ADDR_EXP 33
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// missionPrefix = 06_ ;
 393: LD_ADDR_EXP 31
 397: PUSH
 398: LD_STRING 06_
 400: ST_TO_ADDR
// previousMissionPrefix = 05_ ;
 401: LD_ADDR_EXP 32
 405: PUSH
 406: LD_STRING 05_
 408: ST_TO_ADDR
// end ;
 409: LD_VAR 0 1
 413: RET
// export enemySkillLevel ; export ovsyenkoStartCrates , terminalStartSiberite ; export trapAmount ; export vsevolodSaveTime ; function MissionMapConfig ; begin
 414: LD_INT 0
 416: PPUSH
// enemySkillLevel = [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 417: LD_ADDR_EXP 34
 421: PUSH
 422: LD_INT 3
 424: PUSH
 425: LD_INT 4
 427: PUSH
 428: LD_INT 5
 430: PUSH
 431: LD_INT 6
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: PUSH
 440: LD_OWVAR 67
 444: ARRAY
 445: ST_TO_ADDR
// ovsyenkoStartCrates = [ 150 , 100 , 50 , 30 ] [ Difficulty ] ;
 446: LD_ADDR_EXP 35
 450: PUSH
 451: LD_INT 150
 453: PUSH
 454: LD_INT 100
 456: PUSH
 457: LD_INT 50
 459: PUSH
 460: LD_INT 30
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_OWVAR 67
 473: ARRAY
 474: ST_TO_ADDR
// terminalStartSiberite = [ 100 , 70 , 50 , 30 ] [ Difficulty ] ;
 475: LD_ADDR_EXP 36
 479: PUSH
 480: LD_INT 100
 482: PUSH
 483: LD_INT 70
 485: PUSH
 486: LD_INT 50
 488: PUSH
 489: LD_INT 30
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: PUSH
 498: LD_OWVAR 67
 502: ARRAY
 503: ST_TO_ADDR
// trapAmount = [ rand ( 4 , 5 ) , rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] ;
 504: LD_ADDR_EXP 37
 508: PUSH
 509: LD_INT 4
 511: PPUSH
 512: LD_INT 5
 514: PPUSH
 515: CALL_OW 12
 519: PUSH
 520: LD_INT 5
 522: PPUSH
 523: LD_INT 6
 525: PPUSH
 526: CALL_OW 12
 530: PUSH
 531: LD_INT 6
 533: PPUSH
 534: LD_INT 7
 536: PPUSH
 537: CALL_OW 12
 541: PUSH
 542: LD_INT 7
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: PUSH
 551: LD_OWVAR 67
 555: ARRAY
 556: ST_TO_ADDR
// vsevolodSaveTime = [ 12 12$0 , 11 11$0 , 10 10$0 , 10 10$0 ] [ Difficulty ] ;
 557: LD_ADDR_EXP 38
 561: PUSH
 562: LD_INT 25200
 564: PUSH
 565: LD_INT 23100
 567: PUSH
 568: LD_INT 21000
 570: PUSH
 571: LD_INT 21000
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: LD_OWVAR 67
 584: ARRAY
 585: ST_TO_ADDR
// end ;
 586: LD_VAR 0 1
 590: RET
// every 0 0$1 trigger debugMode do var i ;
 591: LD_EXP 33
 595: IFFALSE 910
 597: GO 599
 599: DISABLE
 600: LD_INT 0
 602: PPUSH
// begin enable ;
 603: ENABLE
// FogOff ( your_side ) ;
 604: LD_OWVAR 2
 608: PPUSH
 609: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 613: LD_ADDR_VAR 0 1
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_OWVAR 2
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: LD_INT 2
 632: PUSH
 633: LD_INT 21
 635: PUSH
 636: LD_INT 1
 638: PUSH
 639: EMPTY
 640: LIST
 641: LIST
 642: PUSH
 643: LD_INT 21
 645: PUSH
 646: LD_INT 2
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: LIST
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PPUSH
 662: CALL_OW 69
 666: PUSH
 667: FOR_IN
 668: IFFALSE 684
// SetLives ( i , 1000 ) ;
 670: LD_VAR 0 1
 674: PPUSH
 675: LD_INT 1000
 677: PPUSH
 678: CALL_OW 234
 682: GO 667
 684: POP
 685: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 686: LD_ADDR_VAR 0 1
 690: PUSH
 691: LD_INT 22
 693: PUSH
 694: LD_OWVAR 2
 698: PUSH
 699: EMPTY
 700: LIST
 701: LIST
 702: PUSH
 703: LD_INT 21
 705: PUSH
 706: LD_INT 1
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: PPUSH
 717: CALL_OW 69
 721: PUSH
 722: FOR_IN
 723: IFFALSE 787
// begin SetSkill ( i , skill_combat , 10 ) ;
 725: LD_VAR 0 1
 729: PPUSH
 730: LD_INT 1
 732: PPUSH
 733: LD_INT 10
 735: PPUSH
 736: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 740: LD_VAR 0 1
 744: PPUSH
 745: LD_INT 2
 747: PPUSH
 748: LD_INT 10
 750: PPUSH
 751: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 755: LD_VAR 0 1
 759: PPUSH
 760: LD_INT 3
 762: PPUSH
 763: LD_INT 10
 765: PPUSH
 766: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 770: LD_VAR 0 1
 774: PPUSH
 775: LD_INT 4
 777: PPUSH
 778: LD_INT 10
 780: PPUSH
 781: CALL_OW 237
// end ;
 785: GO 722
 787: POP
 788: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 789: LD_ADDR_VAR 0 1
 793: PUSH
 794: LD_INT 22
 796: PUSH
 797: LD_OWVAR 2
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: PUSH
 806: LD_INT 2
 808: PUSH
 809: LD_INT 30
 811: PUSH
 812: LD_INT 0
 814: PUSH
 815: EMPTY
 816: LIST
 817: LIST
 818: PUSH
 819: LD_INT 30
 821: PUSH
 822: LD_INT 1
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: LIST
 833: PUSH
 834: EMPTY
 835: LIST
 836: LIST
 837: PPUSH
 838: CALL_OW 69
 842: PUSH
 843: FOR_IN
 844: IFFALSE 908
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 846: LD_VAR 0 1
 850: PPUSH
 851: CALL_OW 274
 855: PPUSH
 856: LD_INT 1
 858: PPUSH
 859: LD_INT 9999
 861: PPUSH
 862: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 866: LD_VAR 0 1
 870: PPUSH
 871: CALL_OW 274
 875: PPUSH
 876: LD_INT 2
 878: PPUSH
 879: LD_INT 9999
 881: PPUSH
 882: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 886: LD_VAR 0 1
 890: PPUSH
 891: CALL_OW 274
 895: PPUSH
 896: LD_INT 3
 898: PPUSH
 899: LD_INT 9999
 901: PPUSH
 902: CALL_OW 277
// end ;
 906: GO 843
 908: POP
 909: POP
// end ; end_of_file
 910: PPOPN 1
 912: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Platonov , Kirilenkova , Belkov , Belkov2 ; export Vsevolod , vsevolodTeam , Petr , Igor , Boris ; export ConvoyBoris , ConvoyIbrahim ; export function PrepareRussians ; begin
 913: LD_INT 0
 915: PPUSH
// PrepareHeroes ;
 916: CALL 925 0 0
// end ;
 920: LD_VAR 0 1
 924: RET
// function PrepareHeroes ; var i , j , car , tmp , cargoList , bigCargoList , point , areaPoints , nearPosition , burlakPosition , distance , index ; begin
 925: LD_INT 0
 927: PPUSH
 928: PPUSH
 929: PPUSH
 930: PPUSH
 931: PPUSH
 932: PPUSH
 933: PPUSH
 934: PPUSH
 935: PPUSH
 936: PPUSH
 937: PPUSH
 938: PPUSH
 939: PPUSH
// point = [ 170 , 208 ] ;
 940: LD_ADDR_VAR 0 8
 944: PUSH
 945: LD_INT 170
 947: PUSH
 948: LD_INT 208
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: ST_TO_ADDR
// areaPoints = AreaToList ( RussianSpawnArea1 , 0 ) ;
 955: LD_ADDR_VAR 0 9
 959: PUSH
 960: LD_INT 1
 962: PPUSH
 963: LD_INT 0
 965: PPUSH
 966: CALL_OW 517
 970: ST_TO_ADDR
// uc_side = 3 ;
 971: LD_ADDR_OWVAR 20
 975: PUSH
 976: LD_INT 3
 978: ST_TO_ADDR
// uc_nation = 3 ;
 979: LD_ADDR_OWVAR 21
 983: PUSH
 984: LD_INT 3
 986: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , 0 ) ;
 987: LD_ADDR_EXP 39
 991: PUSH
 992: LD_STRING Burlak
 994: PPUSH
 995: LD_INT 1
 997: PPUSH
 998: LD_INT 0
1000: PPUSH
1001: CALL 11785 0 3
1005: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , true , 0 ) ;
1006: LD_ADDR_EXP 44
1010: PUSH
1011: LD_STRING Titov
1013: PPUSH
1014: LD_INT 1
1016: PPUSH
1017: LD_INT 0
1019: PPUSH
1020: CALL 11785 0 3
1024: ST_TO_ADDR
// Dolgov := PrepareUnitExt ( Dolgov , true , 0 ) ;
1025: LD_ADDR_EXP 45
1029: PUSH
1030: LD_STRING Dolgov
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_INT 0
1038: PPUSH
1039: CALL 11785 0 3
1043: ST_TO_ADDR
// Lipshchin := PrepareUnitExt ( Lipshchin , true , 0 ) ;
1044: LD_ADDR_EXP 46
1048: PUSH
1049: LD_STRING Lipshchin
1051: PPUSH
1052: LD_INT 1
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL 11785 0 3
1062: ST_TO_ADDR
// Karamazov := PrepareUnitExt ( Karamazov , true , class_engineer ) ;
1063: LD_ADDR_EXP 40
1067: PUSH
1068: LD_STRING Karamazov
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: LD_INT 2
1076: PPUSH
1077: CALL 11785 0 3
1081: ST_TO_ADDR
// Petrovova := PrepareUnitExt ( Petrovova , true , 0 ) ;
1082: LD_ADDR_EXP 41
1086: PUSH
1087: LD_STRING Petrovova
1089: PPUSH
1090: LD_INT 1
1092: PPUSH
1093: LD_INT 0
1095: PPUSH
1096: CALL 11785 0 3
1100: ST_TO_ADDR
// Gleb := PrepareUnitExt ( Gleb , true , 0 ) ;
1101: LD_ADDR_EXP 42
1105: PUSH
1106: LD_STRING Gleb
1108: PPUSH
1109: LD_INT 1
1111: PPUSH
1112: LD_INT 0
1114: PPUSH
1115: CALL 11785 0 3
1119: ST_TO_ADDR
// Petrosyan := PrepareUnitExt ( Petrosyan , true , 0 ) ;
1120: LD_ADDR_EXP 43
1124: PUSH
1125: LD_STRING Petrosyan
1127: PPUSH
1128: LD_INT 1
1130: PPUSH
1131: LD_INT 0
1133: PPUSH
1134: CALL 11785 0 3
1138: ST_TO_ADDR
// Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
1139: LD_ADDR_EXP 47
1143: PUSH
1144: LD_STRING Platonov
1146: PPUSH
1147: LD_INT 0
1149: PPUSH
1150: LD_INT 0
1152: PPUSH
1153: CALL 11785 0 3
1157: ST_TO_ADDR
// if TestCharacters ( 04_Kirilenkova ) then
1158: LD_STRING 04_Kirilenkova
1160: PPUSH
1161: CALL_OW 28
1165: IFFALSE 1192
// begin Kirilenkova := CreateCharacter ( 04_Kirilenkova ) ;
1167: LD_ADDR_EXP 48
1171: PUSH
1172: LD_STRING 04_Kirilenkova
1174: PPUSH
1175: CALL_OW 34
1179: ST_TO_ADDR
// SetClass ( Kirilenkova , class_scientistic ) ;
1180: LD_EXP 48
1184: PPUSH
1185: LD_INT 4
1187: PPUSH
1188: CALL_OW 336
// end ; if TestCharacters ( 04_Belkov ) then
1192: LD_STRING 04_Belkov
1194: PPUSH
1195: CALL_OW 28
1199: IFFALSE 1226
// begin Belkov := CreateCharacter ( 04_Belkov ) ;
1201: LD_ADDR_EXP 49
1205: PUSH
1206: LD_STRING 04_Belkov
1208: PPUSH
1209: CALL_OW 34
1213: ST_TO_ADDR
// SetClass ( Belkov , class_soldier ) ;
1214: LD_EXP 49
1218: PPUSH
1219: LD_INT 1
1221: PPUSH
1222: CALL_OW 336
// end ; if TestCharacters ( 04_Belkov2 ) then
1226: LD_STRING 04_Belkov2
1228: PPUSH
1229: CALL_OW 28
1233: IFFALSE 1260
// begin Belkov2 := CreateCharacter ( 04_Belkov2 ) ;
1235: LD_ADDR_EXP 50
1239: PUSH
1240: LD_STRING 04_Belkov2
1242: PPUSH
1243: CALL_OW 34
1247: ST_TO_ADDR
// SetClass ( Belkov2 , class_soldier ) ;
1248: LD_EXP 50
1252: PPUSH
1253: LD_INT 1
1255: PPUSH
1256: CALL_OW 336
// end ; for i := 1 to vehiclesFrom05 do
1260: LD_ADDR_VAR 0 2
1264: PUSH
1265: DOUBLE
1266: LD_INT 1
1268: DEC
1269: ST_TO_ADDR
1270: LD_EXP 1
1274: PUSH
1275: FOR_TO
1276: IFFALSE 1938
// begin uc_nation = vehiclesFrom05 [ i ] [ 1 ] ;
1278: LD_ADDR_OWVAR 21
1282: PUSH
1283: LD_EXP 1
1287: PUSH
1288: LD_VAR 0 2
1292: ARRAY
1293: PUSH
1294: LD_INT 1
1296: ARRAY
1297: ST_TO_ADDR
// vc_chassis := vehiclesFrom05 [ i ] [ 2 ] ;
1298: LD_ADDR_OWVAR 37
1302: PUSH
1303: LD_EXP 1
1307: PUSH
1308: LD_VAR 0 2
1312: ARRAY
1313: PUSH
1314: LD_INT 2
1316: ARRAY
1317: ST_TO_ADDR
// vc_engine = vehiclesFrom05 [ i ] [ 3 ] ;
1318: LD_ADDR_OWVAR 39
1322: PUSH
1323: LD_EXP 1
1327: PUSH
1328: LD_VAR 0 2
1332: ARRAY
1333: PUSH
1334: LD_INT 3
1336: ARRAY
1337: ST_TO_ADDR
// vc_control = vehiclesFrom05 [ i ] [ 4 ] ;
1338: LD_ADDR_OWVAR 38
1342: PUSH
1343: LD_EXP 1
1347: PUSH
1348: LD_VAR 0 2
1352: ARRAY
1353: PUSH
1354: LD_INT 4
1356: ARRAY
1357: ST_TO_ADDR
// vc_weapon := vehiclesFrom05 [ i ] [ 5 ] ;
1358: LD_ADDR_OWVAR 40
1362: PUSH
1363: LD_EXP 1
1367: PUSH
1368: LD_VAR 0 2
1372: ARRAY
1373: PUSH
1374: LD_INT 5
1376: ARRAY
1377: ST_TO_ADDR
// uc_direction := 0 ;
1378: LD_ADDR_OWVAR 24
1382: PUSH
1383: LD_INT 0
1385: ST_TO_ADDR
// vc_fuel_battery := Rand ( 10 , 15 ) ;
1386: LD_ADDR_OWVAR 41
1390: PUSH
1391: LD_INT 10
1393: PPUSH
1394: LD_INT 15
1396: PPUSH
1397: CALL_OW 12
1401: ST_TO_ADDR
// car := CreateVehicle ;
1402: LD_ADDR_VAR 0 4
1406: PUSH
1407: CALL_OW 45
1411: ST_TO_ADDR
// distance = 999 ;
1412: LD_ADDR_VAR 0 12
1416: PUSH
1417: LD_INT 999
1419: ST_TO_ADDR
// index = 1 ;
1420: LD_ADDR_VAR 0 13
1424: PUSH
1425: LD_INT 1
1427: ST_TO_ADDR
// for j := 1 to areaPoints [ 1 ] do
1428: LD_ADDR_VAR 0 3
1432: PUSH
1433: DOUBLE
1434: LD_INT 1
1436: DEC
1437: ST_TO_ADDR
1438: LD_VAR 0 9
1442: PUSH
1443: LD_INT 1
1445: ARRAY
1446: PUSH
1447: FOR_TO
1448: IFFALSE 1619
// begin if GetDistXY ( point [ 1 ] , point [ 2 ] , areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ) < distance then
1450: LD_VAR 0 8
1454: PUSH
1455: LD_INT 1
1457: ARRAY
1458: PPUSH
1459: LD_VAR 0 8
1463: PUSH
1464: LD_INT 2
1466: ARRAY
1467: PPUSH
1468: LD_VAR 0 9
1472: PUSH
1473: LD_INT 1
1475: ARRAY
1476: PUSH
1477: LD_VAR 0 3
1481: ARRAY
1482: PPUSH
1483: LD_VAR 0 9
1487: PUSH
1488: LD_INT 2
1490: ARRAY
1491: PUSH
1492: LD_VAR 0 3
1496: ARRAY
1497: PPUSH
1498: CALL_OW 298
1502: PUSH
1503: LD_VAR 0 12
1507: LESS
1508: IFFALSE 1617
// begin distance = GetDistXY ( point [ 1 ] , point [ 2 ] , areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ) ;
1510: LD_ADDR_VAR 0 12
1514: PUSH
1515: LD_VAR 0 8
1519: PUSH
1520: LD_INT 1
1522: ARRAY
1523: PPUSH
1524: LD_VAR 0 8
1528: PUSH
1529: LD_INT 2
1531: ARRAY
1532: PPUSH
1533: LD_VAR 0 9
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PUSH
1542: LD_VAR 0 3
1546: ARRAY
1547: PPUSH
1548: LD_VAR 0 9
1552: PUSH
1553: LD_INT 2
1555: ARRAY
1556: PUSH
1557: LD_VAR 0 3
1561: ARRAY
1562: PPUSH
1563: CALL_OW 298
1567: ST_TO_ADDR
// nearPosition = [ areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ] ;
1568: LD_ADDR_VAR 0 10
1572: PUSH
1573: LD_VAR 0 9
1577: PUSH
1578: LD_INT 1
1580: ARRAY
1581: PUSH
1582: LD_VAR 0 3
1586: ARRAY
1587: PUSH
1588: LD_VAR 0 9
1592: PUSH
1593: LD_INT 2
1595: ARRAY
1596: PUSH
1597: LD_VAR 0 3
1601: ARRAY
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: ST_TO_ADDR
// index = j ;
1607: LD_ADDR_VAR 0 13
1611: PUSH
1612: LD_VAR 0 3
1616: ST_TO_ADDR
// end ; end ;
1617: GO 1447
1619: POP
1620: POP
// if not burlakPosition then
1621: LD_VAR 0 11
1625: NOT
1626: IFFALSE 1638
// burlakPosition = nearPosition ;
1628: LD_ADDR_VAR 0 11
1632: PUSH
1633: LD_VAR 0 10
1637: ST_TO_ADDR
// if areaPoints then
1638: LD_VAR 0 9
1642: IFFALSE 1690
// begin areaPoints = Delete2D ( areaPoints , 1 , index ) ;
1644: LD_ADDR_VAR 0 9
1648: PUSH
1649: LD_VAR 0 9
1653: PPUSH
1654: LD_INT 1
1656: PPUSH
1657: LD_VAR 0 13
1661: PPUSH
1662: CALL 12614 0 3
1666: ST_TO_ADDR
// areaPoints = Delete2D ( areaPoints , 2 , index ) ;
1667: LD_ADDR_VAR 0 9
1671: PUSH
1672: LD_VAR 0 9
1676: PPUSH
1677: LD_INT 2
1679: PPUSH
1680: LD_VAR 0 13
1684: PPUSH
1685: CALL 12614 0 3
1689: ST_TO_ADDR
// end ; PlaceUnitXY ( car , nearPosition [ 1 ] , nearPosition [ 2 ] , false ) ;
1690: LD_VAR 0 4
1694: PPUSH
1695: LD_VAR 0 10
1699: PUSH
1700: LD_INT 1
1702: ARRAY
1703: PPUSH
1704: LD_VAR 0 10
1708: PUSH
1709: LD_INT 2
1711: ARRAY
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 48
// case vehiclesFrom05 [ i ] [ 6 ] of Bur :
1720: LD_EXP 1
1724: PUSH
1725: LD_VAR 0 2
1729: ARRAY
1730: PUSH
1731: LD_INT 6
1733: ARRAY
1734: PUSH
1735: LD_STRING Bur
1737: DOUBLE
1738: EQUAL
1739: IFTRUE 1743
1741: GO 1760
1743: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
1744: LD_EXP 39
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL_OW 52
1758: GO 1936
1760: LD_STRING Kar
1762: DOUBLE
1763: EQUAL
1764: IFTRUE 1768
1766: GO 1785
1768: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
1769: LD_EXP 40
1773: PPUSH
1774: LD_VAR 0 4
1778: PPUSH
1779: CALL_OW 52
1783: GO 1936
1785: LD_STRING Ptr
1787: DOUBLE
1788: EQUAL
1789: IFTRUE 1793
1791: GO 1810
1793: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
1794: LD_EXP 41
1798: PPUSH
1799: LD_VAR 0 4
1803: PPUSH
1804: CALL_OW 52
1808: GO 1936
1810: LD_STRING Glb
1812: DOUBLE
1813: EQUAL
1814: IFTRUE 1818
1816: GO 1835
1818: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
1819: LD_EXP 42
1823: PPUSH
1824: LD_VAR 0 4
1828: PPUSH
1829: CALL_OW 52
1833: GO 1936
1835: LD_STRING Pet
1837: DOUBLE
1838: EQUAL
1839: IFTRUE 1843
1841: GO 1860
1843: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
1844: LD_EXP 43
1848: PPUSH
1849: LD_VAR 0 4
1853: PPUSH
1854: CALL_OW 52
1858: GO 1936
1860: LD_STRING Dol
1862: DOUBLE
1863: EQUAL
1864: IFTRUE 1868
1866: GO 1885
1868: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
1869: LD_EXP 45
1873: PPUSH
1874: LD_VAR 0 4
1878: PPUSH
1879: CALL_OW 52
1883: GO 1936
1885: LD_STRING Lip
1887: DOUBLE
1888: EQUAL
1889: IFTRUE 1893
1891: GO 1910
1893: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
1894: LD_EXP 46
1898: PPUSH
1899: LD_VAR 0 4
1903: PPUSH
1904: CALL_OW 52
1908: GO 1936
1910: LD_STRING Tit
1912: DOUBLE
1913: EQUAL
1914: IFTRUE 1918
1916: GO 1935
1918: POP
// PlaceHumanInUnit ( Titov , car ) ; end ;
1919: LD_EXP 44
1923: PPUSH
1924: LD_VAR 0 4
1928: PPUSH
1929: CALL_OW 52
1933: GO 1936
1935: POP
// end ;
1936: GO 1275
1938: POP
1939: POP
// cargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
1940: LD_ADDR_VAR 0 6
1944: PUSH
1945: LD_INT 22
1947: PUSH
1948: LD_INT 3
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: PUSH
1955: LD_INT 21
1957: PUSH
1958: LD_INT 2
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: LD_INT 34
1970: PUSH
1971: LD_INT 51
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 34
1980: PUSH
1981: LD_INT 32
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: PUSH
1988: LD_INT 34
1990: PUSH
1991: LD_INT 12
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: LIST
2008: PPUSH
2009: CALL_OW 69
2013: ST_TO_ADDR
// bigCargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 89 ] ] ) ;
2014: LD_ADDR_VAR 0 7
2018: PUSH
2019: LD_INT 22
2021: PUSH
2022: LD_INT 3
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PUSH
2029: LD_INT 21
2031: PUSH
2032: LD_INT 2
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: PUSH
2039: LD_INT 34
2041: PUSH
2042: LD_INT 89
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: PPUSH
2054: CALL_OW 69
2058: ST_TO_ADDR
// if cargoList then
2059: LD_VAR 0 6
2063: IFFALSE 2253
// for i = 1 to cargoList do
2065: LD_ADDR_VAR 0 2
2069: PUSH
2070: DOUBLE
2071: LD_INT 1
2073: DEC
2074: ST_TO_ADDR
2075: LD_VAR 0 6
2079: PUSH
2080: FOR_TO
2081: IFFALSE 2251
// if resourcesFrom05 then
2083: LD_EXP 2
2087: IFFALSE 2249
// begin if not resourcesFrom05 [ i ] [ 1 ] > 100 or resourcesFrom05 [ i ] [ 2 ] > 100 or resourcesFrom05 [ i ] [ 3 ] > 100 then
2089: LD_EXP 2
2093: PUSH
2094: LD_VAR 0 2
2098: ARRAY
2099: PUSH
2100: LD_INT 1
2102: ARRAY
2103: PUSH
2104: LD_INT 100
2106: GREATER
2107: NOT
2108: PUSH
2109: LD_EXP 2
2113: PUSH
2114: LD_VAR 0 2
2118: ARRAY
2119: PUSH
2120: LD_INT 2
2122: ARRAY
2123: PUSH
2124: LD_INT 100
2126: GREATER
2127: OR
2128: PUSH
2129: LD_EXP 2
2133: PUSH
2134: LD_VAR 0 2
2138: ARRAY
2139: PUSH
2140: LD_INT 3
2142: ARRAY
2143: PUSH
2144: LD_INT 100
2146: GREATER
2147: OR
2148: IFFALSE 2249
// begin AddCargo ( cargoList [ i ] , 1 , resourcesFrom05 [ i ] [ 1 ] ) ;
2150: LD_VAR 0 6
2154: PUSH
2155: LD_VAR 0 2
2159: ARRAY
2160: PPUSH
2161: LD_INT 1
2163: PPUSH
2164: LD_EXP 2
2168: PUSH
2169: LD_VAR 0 2
2173: ARRAY
2174: PUSH
2175: LD_INT 1
2177: ARRAY
2178: PPUSH
2179: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resourcesFrom05 [ i ] [ 2 ] ) ;
2183: LD_VAR 0 6
2187: PUSH
2188: LD_VAR 0 2
2192: ARRAY
2193: PPUSH
2194: LD_INT 2
2196: PPUSH
2197: LD_EXP 2
2201: PUSH
2202: LD_VAR 0 2
2206: ARRAY
2207: PUSH
2208: LD_INT 2
2210: ARRAY
2211: PPUSH
2212: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resourcesFrom05 [ i ] [ 3 ] ) ;
2216: LD_VAR 0 6
2220: PUSH
2221: LD_VAR 0 2
2225: ARRAY
2226: PPUSH
2227: LD_INT 3
2229: PPUSH
2230: LD_EXP 2
2234: PUSH
2235: LD_VAR 0 2
2239: ARRAY
2240: PUSH
2241: LD_INT 3
2243: ARRAY
2244: PPUSH
2245: CALL_OW 291
// end ; end ;
2249: GO 2080
2251: POP
2252: POP
// if bigCargoList then
2253: LD_VAR 0 7
2257: IFFALSE 2446
// for i = 1 to bigCargoList do
2259: LD_ADDR_VAR 0 2
2263: PUSH
2264: DOUBLE
2265: LD_INT 1
2267: DEC
2268: ST_TO_ADDR
2269: LD_VAR 0 7
2273: PUSH
2274: FOR_TO
2275: IFFALSE 2444
// if resourcesFrom05 then
2277: LD_EXP 2
2281: IFFALSE 2442
// begin if resourcesFrom05 [ i ] [ 1 ] > 100 or resourcesFrom05 [ i ] [ 2 ] > 100 or resourcesFrom05 [ i ] [ 3 ] > 100 then
2283: LD_EXP 2
2287: PUSH
2288: LD_VAR 0 2
2292: ARRAY
2293: PUSH
2294: LD_INT 1
2296: ARRAY
2297: PUSH
2298: LD_INT 100
2300: GREATER
2301: PUSH
2302: LD_EXP 2
2306: PUSH
2307: LD_VAR 0 2
2311: ARRAY
2312: PUSH
2313: LD_INT 2
2315: ARRAY
2316: PUSH
2317: LD_INT 100
2319: GREATER
2320: OR
2321: PUSH
2322: LD_EXP 2
2326: PUSH
2327: LD_VAR 0 2
2331: ARRAY
2332: PUSH
2333: LD_INT 3
2335: ARRAY
2336: PUSH
2337: LD_INT 100
2339: GREATER
2340: OR
2341: IFFALSE 2442
// begin AddCargo ( bigCargoList [ i ] , 1 , resourcesFrom05 [ i ] [ 1 ] ) ;
2343: LD_VAR 0 7
2347: PUSH
2348: LD_VAR 0 2
2352: ARRAY
2353: PPUSH
2354: LD_INT 1
2356: PPUSH
2357: LD_EXP 2
2361: PUSH
2362: LD_VAR 0 2
2366: ARRAY
2367: PUSH
2368: LD_INT 1
2370: ARRAY
2371: PPUSH
2372: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 2 , resourcesFrom05 [ i ] [ 2 ] ) ;
2376: LD_VAR 0 7
2380: PUSH
2381: LD_VAR 0 2
2385: ARRAY
2386: PPUSH
2387: LD_INT 2
2389: PPUSH
2390: LD_EXP 2
2394: PUSH
2395: LD_VAR 0 2
2399: ARRAY
2400: PUSH
2401: LD_INT 2
2403: ARRAY
2404: PPUSH
2405: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 3 , resourcesFrom05 [ i ] [ 3 ] ) ;
2409: LD_VAR 0 7
2413: PUSH
2414: LD_VAR 0 2
2418: ARRAY
2419: PPUSH
2420: LD_INT 3
2422: PPUSH
2423: LD_EXP 2
2427: PUSH
2428: LD_VAR 0 2
2432: ARRAY
2433: PUSH
2434: LD_INT 3
2436: ARRAY
2437: PPUSH
2438: CALL_OW 291
// end ; end ;
2442: GO 2274
2444: POP
2445: POP
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_class , class_engineer ] ] ) then
2446: LD_INT 22
2448: PUSH
2449: LD_INT 3
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PUSH
2456: LD_INT 21
2458: PUSH
2459: LD_INT 1
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PUSH
2466: LD_INT 23
2468: PUSH
2469: LD_INT 3
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: PUSH
2476: LD_INT 25
2478: PUSH
2479: LD_INT 2
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: EMPTY
2487: LIST
2488: LIST
2489: LIST
2490: LIST
2491: PPUSH
2492: CALL_OW 69
2496: NOT
2497: IFFALSE 2602
// begin if IsOk ( Lipshchin ) then
2499: LD_EXP 46
2503: PPUSH
2504: CALL_OW 302
2508: IFFALSE 2524
// SetClass ( Lipshchin , class_engineer ) else
2510: LD_EXP 46
2514: PPUSH
2515: LD_INT 2
2517: PPUSH
2518: CALL_OW 336
2522: GO 2602
// begin tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ;
2524: LD_ADDR_VAR 0 5
2528: PUSH
2529: LD_INT 22
2531: PUSH
2532: LD_INT 3
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: PUSH
2539: LD_INT 21
2541: PUSH
2542: LD_INT 1
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: PUSH
2549: LD_INT 23
2551: PUSH
2552: LD_INT 3
2554: PUSH
2555: EMPTY
2556: LIST
2557: LIST
2558: PUSH
2559: LD_INT 50
2561: PUSH
2562: EMPTY
2563: LIST
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: PPUSH
2571: CALL_OW 69
2575: ST_TO_ADDR
// SetClass ( tmp [ rand ( 0 , tmp ) ] , class_engineer ) ;
2576: LD_VAR 0 5
2580: PUSH
2581: LD_INT 0
2583: PPUSH
2584: LD_VAR 0 5
2588: PPUSH
2589: CALL_OW 12
2593: ARRAY
2594: PPUSH
2595: LD_INT 2
2597: PPUSH
2598: CALL_OW 336
// end ; end ; SetTech ( tech_ApeLang , 3 , apeTechsStatus [ 1 ] ) ;
2602: LD_INT 1
2604: PPUSH
2605: LD_INT 3
2607: PPUSH
2608: LD_EXP 5
2612: PUSH
2613: LD_INT 1
2615: ARRAY
2616: PPUSH
2617: CALL_OW 322
// SetTech ( tech_ApePsych , 3 , apeTechsStatus [ 2 ] ) ;
2621: LD_INT 2
2623: PPUSH
2624: LD_INT 3
2626: PPUSH
2627: LD_EXP 5
2631: PUSH
2632: LD_INT 2
2634: ARRAY
2635: PPUSH
2636: CALL_OW 322
// SetTech ( tech_ApeAgres , 3 , apeTechsStatus [ 3 ] ) ;
2640: LD_INT 11
2642: PPUSH
2643: LD_INT 3
2645: PPUSH
2646: LD_EXP 5
2650: PUSH
2651: LD_INT 3
2653: ARRAY
2654: PPUSH
2655: CALL_OW 322
// end ;
2659: LD_VAR 0 1
2663: RET
// export function PrepareVsevolod ; var i , un ; begin
2664: LD_INT 0
2666: PPUSH
2667: PPUSH
2668: PPUSH
// uc_side = 6 ;
2669: LD_ADDR_OWVAR 20
2673: PUSH
2674: LD_INT 6
2676: ST_TO_ADDR
// uc_nation = 3 ;
2677: LD_ADDR_OWVAR 21
2681: PUSH
2682: LD_INT 3
2684: ST_TO_ADDR
// vsevolodTeam = [ ] ;
2685: LD_ADDR_EXP 52
2689: PUSH
2690: EMPTY
2691: ST_TO_ADDR
// Vsevolod := PrepareUnitExt ( Vsevolod , false , class_soldier ) ;
2692: LD_ADDR_EXP 51
2696: PUSH
2697: LD_STRING Vsevolod
2699: PPUSH
2700: LD_INT 0
2702: PPUSH
2703: LD_INT 1
2705: PPUSH
2706: CALL 11785 0 3
2710: ST_TO_ADDR
// PlaceUnitArea ( Vsevolod , VsevolodSpawnArea , false ) ;
2711: LD_EXP 51
2715: PPUSH
2716: LD_INT 7
2718: PPUSH
2719: LD_INT 0
2721: PPUSH
2722: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Vsevolod ;
2726: LD_ADDR_EXP 52
2730: PUSH
2731: LD_EXP 52
2735: PUSH
2736: LD_EXP 51
2740: ADD
2741: ST_TO_ADDR
// Petr = PrepareUnitExt ( SPetr , false , class_engineer ) ;
2742: LD_ADDR_EXP 53
2746: PUSH
2747: LD_STRING SPetr
2749: PPUSH
2750: LD_INT 0
2752: PPUSH
2753: LD_INT 2
2755: PPUSH
2756: CALL 11785 0 3
2760: ST_TO_ADDR
// PlaceUnitArea ( Petr , VsevolodSpawnArea , false ) ;
2761: LD_EXP 53
2765: PPUSH
2766: LD_INT 7
2768: PPUSH
2769: LD_INT 0
2771: PPUSH
2772: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Petr ;
2776: LD_ADDR_EXP 52
2780: PUSH
2781: LD_EXP 52
2785: PUSH
2786: LD_EXP 53
2790: ADD
2791: ST_TO_ADDR
// Igor = PrepareUnitExt ( SIgor , false , class_soldier ) ;
2792: LD_ADDR_EXP 54
2796: PUSH
2797: LD_STRING SIgor
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: LD_INT 1
2805: PPUSH
2806: CALL 11785 0 3
2810: ST_TO_ADDR
// PlaceUnitArea ( Igor , VsevolodSpawnArea , false ) ;
2811: LD_EXP 54
2815: PPUSH
2816: LD_INT 7
2818: PPUSH
2819: LD_INT 0
2821: PPUSH
2822: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Igor ;
2826: LD_ADDR_EXP 52
2830: PUSH
2831: LD_EXP 52
2835: PUSH
2836: LD_EXP 54
2840: ADD
2841: ST_TO_ADDR
// Boris = PrepareUnitExt ( SBoris , false , class_soldier ) ;
2842: LD_ADDR_EXP 55
2846: PUSH
2847: LD_STRING SBoris
2849: PPUSH
2850: LD_INT 0
2852: PPUSH
2853: LD_INT 1
2855: PPUSH
2856: CALL 11785 0 3
2860: ST_TO_ADDR
// PlaceUnitArea ( Boris , VsevolodSpawnArea , false ) ;
2861: LD_EXP 55
2865: PPUSH
2866: LD_INT 7
2868: PPUSH
2869: LD_INT 0
2871: PPUSH
2872: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Boris ;
2876: LD_ADDR_EXP 52
2880: PUSH
2881: LD_EXP 52
2885: PUSH
2886: LD_EXP 55
2890: ADD
2891: ST_TO_ADDR
// end ;
2892: LD_VAR 0 1
2896: RET
// export function SpawnPlatonovReinforces ; var i , un , veh ; begin
2897: LD_INT 0
2899: PPUSH
2900: PPUSH
2901: PPUSH
2902: PPUSH
// uc_side = 3 ;
2903: LD_ADDR_OWVAR 20
2907: PUSH
2908: LD_INT 3
2910: ST_TO_ADDR
// uc_nation = 3 ;
2911: LD_ADDR_OWVAR 21
2915: PUSH
2916: LD_INT 3
2918: ST_TO_ADDR
// PrepareSoldier ( false , 4 ) ;
2919: LD_INT 0
2921: PPUSH
2922: LD_INT 4
2924: PPUSH
2925: CALL_OW 381
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] , rand ( 50 , 60 ) ) ;
2929: LD_INT 22
2931: PPUSH
2932: LD_INT 1
2934: PPUSH
2935: LD_INT 1
2937: PPUSH
2938: LD_INT 43
2940: PUSH
2941: LD_INT 44
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PUSH
2948: LD_INT 1
2950: PPUSH
2951: LD_INT 2
2953: PPUSH
2954: CALL_OW 12
2958: ARRAY
2959: PPUSH
2960: LD_INT 50
2962: PPUSH
2963: LD_INT 60
2965: PPUSH
2966: CALL_OW 12
2970: PPUSH
2971: CALL 48042 0 5
// veh = CreateVehicle ;
2975: LD_ADDR_VAR 0 4
2979: PUSH
2980: CALL_OW 45
2984: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
2985: LD_VAR 0 4
2989: PPUSH
2990: LD_INT 0
2992: PPUSH
2993: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 230 , false ) ;
2997: LD_VAR 0 4
3001: PPUSH
3002: LD_INT 134
3004: PPUSH
3005: LD_INT 230
3007: PPUSH
3008: LD_INT 0
3010: PPUSH
3011: CALL_OW 48
// if Belkov then
3015: LD_EXP 49
3019: IFFALSE 3037
// PlaceHumanInUnit ( Belkov , veh ) else
3021: LD_EXP 49
3025: PPUSH
3026: LD_VAR 0 4
3030: PPUSH
3031: CALL_OW 52
3035: GO 3090
// if Difficulty = 1 or Difficulty = 2 then
3037: LD_OWVAR 67
3041: PUSH
3042: LD_INT 1
3044: EQUAL
3045: PUSH
3046: LD_OWVAR 67
3050: PUSH
3051: LD_INT 2
3053: EQUAL
3054: OR
3055: IFFALSE 3090
// begin ConvoyBoris = PrepareUnitExt ( SCBoris , false , class_soldier ) ;
3057: LD_ADDR_EXP 56
3061: PUSH
3062: LD_STRING SCBoris
3064: PPUSH
3065: LD_INT 0
3067: PPUSH
3068: LD_INT 1
3070: PPUSH
3071: CALL 11785 0 3
3075: ST_TO_ADDR
// PlaceHumanInUnit ( ConvoyBoris , veh ) ;
3076: LD_EXP 56
3080: PPUSH
3081: LD_VAR 0 4
3085: PPUSH
3086: CALL_OW 52
// end ; PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3090: LD_INT 22
3092: PPUSH
3093: LD_INT 1
3095: PPUSH
3096: LD_INT 1
3098: PPUSH
3099: LD_INT 51
3101: PPUSH
3102: LD_INT 50
3104: PPUSH
3105: LD_INT 60
3107: PPUSH
3108: CALL_OW 12
3112: PPUSH
3113: CALL 48042 0 5
// veh = CreateVehicle ;
3117: LD_ADDR_VAR 0 4
3121: PUSH
3122: CALL_OW 45
3126: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3127: LD_VAR 0 4
3131: PPUSH
3132: LD_INT 0
3134: PPUSH
3135: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 233 , false ) ;
3139: LD_VAR 0 4
3143: PPUSH
3144: LD_INT 134
3146: PPUSH
3147: LD_INT 233
3149: PPUSH
3150: LD_INT 0
3152: PPUSH
3153: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
3157: LD_VAR 0 4
3161: PPUSH
3162: LD_INT 1
3164: PPUSH
3165: LD_INT 100
3167: PPUSH
3168: CALL_OW 290
// if Belkov2 then
3172: LD_EXP 50
3176: IFFALSE 3194
// PlaceHumanInUnit ( Belkov2 , veh ) else
3178: LD_EXP 50
3182: PPUSH
3183: LD_VAR 0 4
3187: PPUSH
3188: CALL_OW 52
3192: GO 3237
// if Difficulty = 1 then
3194: LD_OWVAR 67
3198: PUSH
3199: LD_INT 1
3201: EQUAL
3202: IFFALSE 3237
// begin ConvoyIbrahim = PrepareUnitExt ( SCIbrahim , false , class_soldier ) ;
3204: LD_ADDR_EXP 57
3208: PUSH
3209: LD_STRING SCIbrahim
3211: PPUSH
3212: LD_INT 0
3214: PPUSH
3215: LD_INT 1
3217: PPUSH
3218: CALL 11785 0 3
3222: ST_TO_ADDR
// PlaceHumanInUnit ( ConvoyIbrahim , veh ) ;
3223: LD_EXP 57
3227: PPUSH
3228: LD_VAR 0 4
3232: PPUSH
3233: CALL_OW 52
// end ; if Kirilenkova then
3237: LD_EXP 48
3241: IFFALSE 3339
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3243: LD_INT 22
3245: PPUSH
3246: LD_INT 1
3248: PPUSH
3249: LD_INT 1
3251: PPUSH
3252: LD_INT 51
3254: PPUSH
3255: LD_INT 50
3257: PPUSH
3258: LD_INT 60
3260: PPUSH
3261: CALL_OW 12
3265: PPUSH
3266: CALL 48042 0 5
// veh = CreateVehicle ;
3270: LD_ADDR_VAR 0 4
3274: PUSH
3275: CALL_OW 45
3279: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3280: LD_VAR 0 4
3284: PPUSH
3285: LD_INT 0
3287: PPUSH
3288: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 236 , false ) ;
3292: LD_VAR 0 4
3296: PPUSH
3297: LD_INT 134
3299: PPUSH
3300: LD_INT 236
3302: PPUSH
3303: LD_INT 0
3305: PPUSH
3306: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
3310: LD_VAR 0 4
3314: PPUSH
3315: LD_INT 1
3317: PPUSH
3318: LD_INT 100
3320: PPUSH
3321: CALL_OW 290
// PlaceHumanInUnit ( Kirilenkova , veh ) ;
3325: LD_EXP 48
3329: PPUSH
3330: LD_VAR 0 4
3334: PPUSH
3335: CALL_OW 52
// end ; end ; end_of_file
3339: LD_VAR 0 1
3343: RET
// export VanHouten ; export ovsyenkoBase , terminalBase , headAmBase ; export trapTeam , convoyTeam , attackTeam ; export function PrepareAmericans ; begin
3344: LD_INT 0
3346: PPUSH
// PrepareOvsyenko ;
3347: CALL 3364 0 0
// PrepareTerminal ;
3351: CALL 3565 0 0
// PrepareMainAmericanBase ;
3355: CALL 3648 0 0
// end ;
3359: LD_VAR 0 1
3363: RET
// function PrepareOvsyenko ; var soldiersAmount ; begin
3364: LD_INT 0
3366: PPUSH
3367: PPUSH
// uc_side = 1 ;
3368: LD_ADDR_OWVAR 20
3372: PUSH
3373: LD_INT 1
3375: ST_TO_ADDR
// uc_nation = nation_american ;
3376: LD_ADDR_OWVAR 21
3380: PUSH
3381: LD_INT 1
3383: ST_TO_ADDR
// soldiersAmount = 3 ;
3384: LD_ADDR_VAR 0 2
3388: PUSH
3389: LD_INT 3
3391: ST_TO_ADDR
// if fastBreakthrough then
3392: LD_EXP 3
3396: IFFALSE 3414
// begin RemoveUnit ( ovs_bun2 ) ;
3398: LD_INT 229
3400: PPUSH
3401: CALL_OW 64
// RemoveUnit ( ovs_bun3 ) ;
3405: LD_INT 258
3407: PPUSH
3408: CALL_OW 64
// end else
3412: GO 3422
// soldiersAmount = 4 ;
3414: LD_ADDR_VAR 0 2
3418: PUSH
3419: LD_INT 4
3421: ST_TO_ADDR
// ovsyenkoBase := Nef_PrepareBase ( ovsyenko , OvsyenkoBaseArea , ovsyenko , enemySkillLevel , [ ovsyenkoStartCrates , 50 , 0 ] , 1 , [ soldiersAmount , 1 , 0 , 1 ] ) ;
3422: LD_ADDR_EXP 59
3426: PUSH
3427: LD_INT 86
3429: PPUSH
3430: LD_INT 3
3432: PPUSH
3433: LD_STRING ovsyenko
3435: PPUSH
3436: LD_EXP 34
3440: PPUSH
3441: LD_EXP 35
3445: PUSH
3446: LD_INT 50
3448: PUSH
3449: LD_INT 0
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: LIST
3456: PPUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_VAR 0 2
3464: PUSH
3465: LD_INT 1
3467: PUSH
3468: LD_INT 0
3470: PUSH
3471: LD_INT 1
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: PPUSH
3480: CALL 12686 0 7
3484: ST_TO_ADDR
// case Difficulty of 1 :
3485: LD_OWVAR 67
3489: PUSH
3490: LD_INT 1
3492: DOUBLE
3493: EQUAL
3494: IFTRUE 3498
3496: GO 3511
3498: POP
// PlaceWeaponTurret ( ovs_bun1 , us_double_gun ) ; 2 :
3499: LD_INT 97
3501: PPUSH
3502: LD_INT 5
3504: PPUSH
3505: CALL_OW 431
3509: GO 3560
3511: LD_INT 2
3513: DOUBLE
3514: EQUAL
3515: IFTRUE 3519
3517: GO 3532
3519: POP
// PlaceWeaponTurret ( ovs_bun1 , us_light_gun ) ; 3 .. 4 :
3520: LD_INT 97
3522: PPUSH
3523: LD_INT 3
3525: PPUSH
3526: CALL_OW 431
3530: GO 3560
3532: LD_INT 3
3534: DOUBLE
3535: GREATEREQUAL
3536: IFFALSE 3544
3538: LD_INT 4
3540: DOUBLE
3541: LESSEQUAL
3542: IFTRUE 3546
3544: GO 3559
3546: POP
// PlaceWeaponTurret ( ovs_bun1 , us_gatling_gun ) ; end ;
3547: LD_INT 97
3549: PPUSH
3550: LD_INT 4
3552: PPUSH
3553: CALL_OW 431
3557: GO 3560
3559: POP
// end ;
3560: LD_VAR 0 1
3564: RET
// function PrepareTerminal ; begin
3565: LD_INT 0
3567: PPUSH
// uc_side = 1 ;
3568: LD_ADDR_OWVAR 20
3572: PUSH
3573: LD_INT 1
3575: ST_TO_ADDR
// uc_nation = nation_american ;
3576: LD_ADDR_OWVAR 21
3580: PUSH
3581: LD_INT 1
3583: ST_TO_ADDR
// terminalBase := Nef_PrepareBase ( terminal , terminalBaseArea , terminal , enemySkillLevel , [ 100 , 50 , 0 ] , 1 , [ 2 , 1 , 0 , 0 ] ) ;
3584: LD_ADDR_EXP 60
3588: PUSH
3589: LD_INT 168
3591: PPUSH
3592: LD_INT 4
3594: PPUSH
3595: LD_STRING terminal
3597: PPUSH
3598: LD_EXP 34
3602: PPUSH
3603: LD_INT 100
3605: PUSH
3606: LD_INT 50
3608: PUSH
3609: LD_INT 0
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: PPUSH
3617: LD_INT 1
3619: PPUSH
3620: LD_INT 2
3622: PUSH
3623: LD_INT 1
3625: PUSH
3626: LD_INT 0
3628: PUSH
3629: LD_INT 0
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL 12686 0 7
3642: ST_TO_ADDR
// end ;
3643: LD_VAR 0 1
3647: RET
// function PrepareMainAmericanBase ; begin
3648: LD_INT 0
3650: PPUSH
// uc_side = 1 ;
3651: LD_ADDR_OWVAR 20
3655: PUSH
3656: LD_INT 1
3658: ST_TO_ADDR
// uc_nation = nation_american ;
3659: LD_ADDR_OWVAR 21
3663: PUSH
3664: LD_INT 1
3666: ST_TO_ADDR
// if fastBreakthrough then
3667: LD_EXP 3
3671: IFFALSE 3680
// RemoveUnit ( ovs_bun2 ) ;
3673: LD_INT 229
3675: PPUSH
3676: CALL_OW 64
// headAmBase := Nef_PrepareBase ( headamdepot , HeadAmericanBaseArea ,  , enemySkillLevel , [ 3000 , 1000 , 0 ] , 1 , [ 9 , 3 , 6 , 2 ] ) ;
3680: LD_ADDR_EXP 61
3684: PUSH
3685: LD_INT 106
3687: PPUSH
3688: LD_INT 5
3690: PPUSH
3691: LD_STRING 
3693: PPUSH
3694: LD_EXP 34
3698: PPUSH
3699: LD_INT 3000
3701: PUSH
3702: LD_INT 1000
3704: PUSH
3705: LD_INT 0
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: LIST
3712: PPUSH
3713: LD_INT 1
3715: PPUSH
3716: LD_INT 9
3718: PUSH
3719: LD_INT 3
3721: PUSH
3722: LD_INT 6
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: PPUSH
3734: CALL 12686 0 7
3738: ST_TO_ADDR
// VanHouten = PrepareUnitExt ( VanHouten , false , class_soldier ) ;
3739: LD_ADDR_EXP 58
3743: PUSH
3744: LD_STRING VanHouten
3746: PPUSH
3747: LD_INT 0
3749: PPUSH
3750: LD_INT 1
3752: PPUSH
3753: CALL 11785 0 3
3757: ST_TO_ADDR
// headAmBase = headAmBase ^ VanHouten ;
3758: LD_ADDR_EXP 61
3762: PUSH
3763: LD_EXP 61
3767: PUSH
3768: LD_EXP 58
3772: ADD
3773: ST_TO_ADDR
// PlaceUnitXYR ( VanHouten , 35 , 57 , 3 , false ) ;
3774: LD_EXP 58
3778: PPUSH
3779: LD_INT 35
3781: PPUSH
3782: LD_INT 57
3784: PPUSH
3785: LD_INT 3
3787: PPUSH
3788: LD_INT 0
3790: PPUSH
3791: CALL_OW 50
// end ;
3795: LD_VAR 0 1
3799: RET
// export function PrepareTrap ; var i , un , nearEnemyUnit ; begin
3800: LD_INT 0
3802: PPUSH
3803: PPUSH
3804: PPUSH
3805: PPUSH
// uc_side = 1 ;
3806: LD_ADDR_OWVAR 20
3810: PUSH
3811: LD_INT 1
3813: ST_TO_ADDR
// uc_nation = nation_american ;
3814: LD_ADDR_OWVAR 21
3818: PUSH
3819: LD_INT 1
3821: ST_TO_ADDR
// for i := 1 to trapAmount do
3822: LD_ADDR_VAR 0 2
3826: PUSH
3827: DOUBLE
3828: LD_INT 1
3830: DEC
3831: ST_TO_ADDR
3832: LD_EXP 37
3836: PUSH
3837: FOR_TO
3838: IFFALSE 3972
// begin PrepareSoldier ( false , enemySkillLevel ) ;
3840: LD_INT 0
3842: PPUSH
3843: LD_EXP 34
3847: PPUSH
3848: CALL_OW 381
// un = CreateHuman ;
3852: LD_ADDR_VAR 0 3
3856: PUSH
3857: CALL_OW 44
3861: ST_TO_ADDR
// trapTeam = trapTeam ^ un ;
3862: LD_ADDR_EXP 62
3866: PUSH
3867: LD_EXP 62
3871: PUSH
3872: LD_VAR 0 3
3876: ADD
3877: ST_TO_ADDR
// PlaceUnitArea ( un , TrapSpawnArea , false ) ;
3878: LD_VAR 0 3
3882: PPUSH
3883: LD_INT 11
3885: PPUSH
3886: LD_INT 0
3888: PPUSH
3889: CALL_OW 49
// nearEnemyUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] ] ) , un ) ;
3893: LD_ADDR_VAR 0 4
3897: PUSH
3898: LD_INT 22
3900: PUSH
3901: LD_INT 3
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: PUSH
3908: EMPTY
3909: LIST
3910: PPUSH
3911: CALL_OW 69
3915: PPUSH
3916: LD_VAR 0 3
3920: PPUSH
3921: CALL_OW 74
3925: ST_TO_ADDR
// ComAgressiveMove ( un , GetX ( nearEnemyUnit ) , GetY ( nearEnemyUnit ) ) ;
3926: LD_VAR 0 3
3930: PPUSH
3931: LD_VAR 0 4
3935: PPUSH
3936: CALL_OW 250
3940: PPUSH
3941: LD_VAR 0 4
3945: PPUSH
3946: CALL_OW 251
3950: PPUSH
3951: CALL_OW 114
// AddComAgressiveMove ( un , 106 , 124 ) ;
3955: LD_VAR 0 3
3959: PPUSH
3960: LD_INT 106
3962: PPUSH
3963: LD_INT 124
3965: PPUSH
3966: CALL_OW 174
// end ;
3970: GO 3837
3972: POP
3973: POP
// end ;
3974: LD_VAR 0 1
3978: RET
// export function PrepareSoldiersInBunkers ; begin
3979: LD_INT 0
3981: PPUSH
// PrepareSolBun ( enemySkilLLevel , non_bun1 ) ;
3982: LD_EXP 34
3986: PPUSH
3987: LD_INT 236
3989: PPUSH
3990: CALL 15230 0 2
// PrepareSolBun ( enemySkilLLevel , non_bun2 ) ;
3994: LD_EXP 34
3998: PPUSH
3999: LD_INT 240
4001: PPUSH
4002: CALL 15230 0 2
// PrepareSolBun ( enemySkilLLevel , non_bun3 ) ;
4006: LD_EXP 34
4010: PPUSH
4011: LD_INT 243
4013: PPUSH
4014: CALL 15230 0 2
// end ;
4018: LD_VAR 0 1
4022: RET
// export function PrepareConvoy ; var i , un , veh ; begin
4023: LD_INT 0
4025: PPUSH
4026: PPUSH
4027: PPUSH
4028: PPUSH
// convoyTeam = [ ] ;
4029: LD_ADDR_EXP 63
4033: PUSH
4034: EMPTY
4035: ST_TO_ADDR
// uc_side = 1 ;
4036: LD_ADDR_OWVAR 20
4040: PUSH
4041: LD_INT 1
4043: ST_TO_ADDR
// uc_nation = nation_american ;
4044: LD_ADDR_OWVAR 21
4048: PUSH
4049: LD_INT 1
4051: ST_TO_ADDR
// for i := 1 to 2 do
4052: LD_ADDR_VAR 0 2
4056: PUSH
4057: DOUBLE
4058: LD_INT 1
4060: DEC
4061: ST_TO_ADDR
4062: LD_INT 2
4064: PUSH
4065: FOR_TO
4066: IFFALSE 4197
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
4068: LD_INT 3
4070: PPUSH
4071: LD_INT 1
4073: PPUSH
4074: LD_INT 1
4076: PPUSH
4077: LD_INT 12
4079: PPUSH
4080: LD_INT 80
4082: PPUSH
4083: CALL 48042 0 5
// veh = CreateVehicle ;
4087: LD_ADDR_VAR 0 4
4091: PUSH
4092: CALL_OW 45
4096: ST_TO_ADDR
// AddCargo ( veh , mat_cans , 100 ) ;
4097: LD_VAR 0 4
4101: PPUSH
4102: LD_INT 1
4104: PPUSH
4105: LD_INT 100
4107: PPUSH
4108: CALL_OW 291
// convoyTeam = convoyTeam ^ veh ;
4112: LD_ADDR_EXP 63
4116: PUSH
4117: LD_EXP 63
4121: PUSH
4122: LD_VAR 0 4
4126: ADD
4127: ST_TO_ADDR
// PlaceUnitArea ( veh , AmericanSpawnArea1 , false ) ;
4128: LD_VAR 0 4
4132: PPUSH
4133: LD_INT 8
4135: PPUSH
4136: LD_INT 0
4138: PPUSH
4139: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
4143: LD_INT 0
4145: PPUSH
4146: LD_EXP 34
4150: PPUSH
4151: CALL_OW 383
// un = CreateHuman ;
4155: LD_ADDR_VAR 0 3
4159: PUSH
4160: CALL_OW 44
4164: ST_TO_ADDR
// convoyTeam = convoyTeam ^ un ;
4165: LD_ADDR_EXP 63
4169: PUSH
4170: LD_EXP 63
4174: PUSH
4175: LD_VAR 0 3
4179: ADD
4180: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4181: LD_VAR 0 3
4185: PPUSH
4186: LD_VAR 0 4
4190: PPUSH
4191: CALL_OW 52
// end ;
4195: GO 4065
4197: POP
4198: POP
// end ;
4199: LD_VAR 0 1
4203: RET
// export function PrepareAttack ; var i , un , veh ; begin
4204: LD_INT 0
4206: PPUSH
4207: PPUSH
4208: PPUSH
4209: PPUSH
// uc_side = 1 ;
4210: LD_ADDR_OWVAR 20
4214: PUSH
4215: LD_INT 1
4217: ST_TO_ADDR
// uc_nation = nation_american ;
4218: LD_ADDR_OWVAR 21
4222: PUSH
4223: LD_INT 1
4225: ST_TO_ADDR
// for i := 1 to 4 do
4226: LD_ADDR_VAR 0 2
4230: PUSH
4231: DOUBLE
4232: LD_INT 1
4234: DEC
4235: ST_TO_ADDR
4236: LD_INT 4
4238: PUSH
4239: FOR_TO
4240: IFFALSE 4379
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_light_gun , us_double_gun , us_gatling_gun ] [ Rand ( 1 , 3 ) ] , 80 ) ;
4242: LD_INT 3
4244: PPUSH
4245: LD_INT 1
4247: PPUSH
4248: LD_INT 1
4250: PPUSH
4251: LD_INT 3
4253: PUSH
4254: LD_INT 5
4256: PUSH
4257: LD_INT 4
4259: PUSH
4260: EMPTY
4261: LIST
4262: LIST
4263: LIST
4264: PUSH
4265: LD_INT 1
4267: PPUSH
4268: LD_INT 3
4270: PPUSH
4271: CALL_OW 12
4275: ARRAY
4276: PPUSH
4277: LD_INT 80
4279: PPUSH
4280: CALL 48042 0 5
// veh = CreateVehicle ;
4284: LD_ADDR_VAR 0 4
4288: PUSH
4289: CALL_OW 45
4293: ST_TO_ADDR
// attackTeam = attackTeam ^ veh ;
4294: LD_ADDR_EXP 64
4298: PUSH
4299: LD_EXP 64
4303: PUSH
4304: LD_VAR 0 4
4308: ADD
4309: ST_TO_ADDR
// PlaceUnitArea ( veh , AmericanSpawnArea2 , false ) ;
4310: LD_VAR 0 4
4314: PPUSH
4315: LD_INT 17
4317: PPUSH
4318: LD_INT 0
4320: PPUSH
4321: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
4325: LD_INT 0
4327: PPUSH
4328: LD_EXP 34
4332: PPUSH
4333: CALL_OW 383
// un = CreateHuman ;
4337: LD_ADDR_VAR 0 3
4341: PUSH
4342: CALL_OW 44
4346: ST_TO_ADDR
// attackTeam = attackTeam ^ un ;
4347: LD_ADDR_EXP 64
4351: PUSH
4352: LD_EXP 64
4356: PUSH
4357: LD_VAR 0 3
4361: ADD
4362: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4363: LD_VAR 0 3
4367: PPUSH
4368: LD_VAR 0 4
4372: PPUSH
4373: CALL_OW 52
// end ;
4377: GO 4239
4379: POP
4380: POP
// for i := 1 to 3 do
4381: LD_ADDR_VAR 0 2
4385: PUSH
4386: DOUBLE
4387: LD_INT 1
4389: DEC
4390: ST_TO_ADDR
4391: LD_INT 3
4393: PUSH
4394: FOR_TO
4395: IFFALSE 4452
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4397: LD_INT 0
4399: PPUSH
4400: LD_EXP 34
4404: PPUSH
4405: CALL_OW 381
// un = CreateHuman ;
4409: LD_ADDR_VAR 0 3
4413: PUSH
4414: CALL_OW 44
4418: ST_TO_ADDR
// attackTeam = attackTeam ^ un ;
4419: LD_ADDR_EXP 64
4423: PUSH
4424: LD_EXP 64
4428: PUSH
4429: LD_VAR 0 3
4433: ADD
4434: ST_TO_ADDR
// PlaceUnitArea ( un , AmericanSpawnArea2 , false ) ;
4435: LD_VAR 0 3
4439: PPUSH
4440: LD_INT 17
4442: PPUSH
4443: LD_INT 0
4445: PPUSH
4446: CALL_OW 49
// end ;
4450: GO 4394
4452: POP
4453: POP
// end ; end_of_file
4454: LD_VAR 0 1
4458: RET
// export function Nef_PrepareNature ; var i , un ; begin
4459: LD_INT 0
4461: PPUSH
4462: PPUSH
4463: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
4464: LD_ADDR_VAR 0 2
4468: PUSH
4469: DOUBLE
4470: LD_INT 1
4472: DEC
4473: ST_TO_ADDR
4474: LD_EXP 28
4478: PUSH
4479: LD_INT 1
4481: ARRAY
4482: PUSH
4483: FOR_TO
4484: IFFALSE 4594
// begin uc_side = 0 ;
4486: LD_ADDR_OWVAR 20
4490: PUSH
4491: LD_INT 0
4493: ST_TO_ADDR
// uc_nation = nation_nature ;
4494: LD_ADDR_OWVAR 21
4498: PUSH
4499: LD_INT 0
4501: ST_TO_ADDR
// hc_class = class_apeman ;
4502: LD_ADDR_OWVAR 28
4506: PUSH
4507: LD_INT 12
4509: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4510: LD_ADDR_OWVAR 31
4514: PUSH
4515: LD_EXP 29
4519: PUSH
4520: LD_INT 1
4522: ARRAY
4523: PUSH
4524: LD_EXP 29
4528: PUSH
4529: LD_INT 2
4531: ARRAY
4532: PUSH
4533: LD_EXP 29
4537: PUSH
4538: LD_INT 3
4540: ARRAY
4541: PUSH
4542: LD_EXP 29
4546: PUSH
4547: LD_INT 4
4549: ARRAY
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4557: LD_ADDR_OWVAR 35
4561: PUSH
4562: LD_EXP 30
4566: ST_TO_ADDR
// un = CreateHuman ;
4567: LD_ADDR_VAR 0 3
4571: PUSH
4572: CALL_OW 44
4576: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4577: LD_VAR 0 3
4581: PPUSH
4582: LD_INT 2
4584: PPUSH
4585: LD_INT 0
4587: PPUSH
4588: CALL_OW 49
// end ;
4592: GO 4483
4594: POP
4595: POP
// for i := 1 to animalsAmount [ 2 ] do
4596: LD_ADDR_VAR 0 2
4600: PUSH
4601: DOUBLE
4602: LD_INT 1
4604: DEC
4605: ST_TO_ADDR
4606: LD_EXP 28
4610: PUSH
4611: LD_INT 2
4613: ARRAY
4614: PUSH
4615: FOR_TO
4616: IFFALSE 4726
// begin uc_side = 0 ;
4618: LD_ADDR_OWVAR 20
4622: PUSH
4623: LD_INT 0
4625: ST_TO_ADDR
// uc_nation = nation_nature ;
4626: LD_ADDR_OWVAR 21
4630: PUSH
4631: LD_INT 0
4633: ST_TO_ADDR
// hc_class = class_phororhacos ;
4634: LD_ADDR_OWVAR 28
4638: PUSH
4639: LD_INT 18
4641: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4642: LD_ADDR_OWVAR 31
4646: PUSH
4647: LD_EXP 29
4651: PUSH
4652: LD_INT 1
4654: ARRAY
4655: PUSH
4656: LD_EXP 29
4660: PUSH
4661: LD_INT 2
4663: ARRAY
4664: PUSH
4665: LD_EXP 29
4669: PUSH
4670: LD_INT 3
4672: ARRAY
4673: PUSH
4674: LD_EXP 29
4678: PUSH
4679: LD_INT 4
4681: ARRAY
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4689: LD_ADDR_OWVAR 35
4693: PUSH
4694: LD_EXP 30
4698: ST_TO_ADDR
// un = CreateHuman ;
4699: LD_ADDR_VAR 0 3
4703: PUSH
4704: CALL_OW 44
4708: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4709: LD_VAR 0 3
4713: PPUSH
4714: LD_INT 2
4716: PPUSH
4717: LD_INT 0
4719: PPUSH
4720: CALL_OW 49
// end ;
4724: GO 4615
4726: POP
4727: POP
// for i := 1 to animalsAmount [ 3 ] do
4728: LD_ADDR_VAR 0 2
4732: PUSH
4733: DOUBLE
4734: LD_INT 1
4736: DEC
4737: ST_TO_ADDR
4738: LD_EXP 28
4742: PUSH
4743: LD_INT 3
4745: ARRAY
4746: PUSH
4747: FOR_TO
4748: IFFALSE 4858
// begin uc_side = 0 ;
4750: LD_ADDR_OWVAR 20
4754: PUSH
4755: LD_INT 0
4757: ST_TO_ADDR
// uc_nation = nation_nature ;
4758: LD_ADDR_OWVAR 21
4762: PUSH
4763: LD_INT 0
4765: ST_TO_ADDR
// hc_class = class_tiger ;
4766: LD_ADDR_OWVAR 28
4770: PUSH
4771: LD_INT 14
4773: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4774: LD_ADDR_OWVAR 31
4778: PUSH
4779: LD_EXP 29
4783: PUSH
4784: LD_INT 1
4786: ARRAY
4787: PUSH
4788: LD_EXP 29
4792: PUSH
4793: LD_INT 2
4795: ARRAY
4796: PUSH
4797: LD_EXP 29
4801: PUSH
4802: LD_INT 3
4804: ARRAY
4805: PUSH
4806: LD_EXP 29
4810: PUSH
4811: LD_INT 4
4813: ARRAY
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4821: LD_ADDR_OWVAR 35
4825: PUSH
4826: LD_EXP 30
4830: ST_TO_ADDR
// un = CreateHuman ;
4831: LD_ADDR_VAR 0 3
4835: PUSH
4836: CALL_OW 44
4840: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4841: LD_VAR 0 3
4845: PPUSH
4846: LD_INT 2
4848: PPUSH
4849: LD_INT 0
4851: PPUSH
4852: CALL_OW 49
// end ;
4856: GO 4747
4858: POP
4859: POP
// for i := 1 to animalsAmount [ 4 ] do
4860: LD_ADDR_VAR 0 2
4864: PUSH
4865: DOUBLE
4866: LD_INT 1
4868: DEC
4869: ST_TO_ADDR
4870: LD_EXP 28
4874: PUSH
4875: LD_INT 4
4877: ARRAY
4878: PUSH
4879: FOR_TO
4880: IFFALSE 4990
// begin uc_side = 0 ;
4882: LD_ADDR_OWVAR 20
4886: PUSH
4887: LD_INT 0
4889: ST_TO_ADDR
// uc_nation = nation_nature ;
4890: LD_ADDR_OWVAR 21
4894: PUSH
4895: LD_INT 0
4897: ST_TO_ADDR
// hc_class = 21 ;
4898: LD_ADDR_OWVAR 28
4902: PUSH
4903: LD_INT 21
4905: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4906: LD_ADDR_OWVAR 31
4910: PUSH
4911: LD_EXP 29
4915: PUSH
4916: LD_INT 1
4918: ARRAY
4919: PUSH
4920: LD_EXP 29
4924: PUSH
4925: LD_INT 2
4927: ARRAY
4928: PUSH
4929: LD_EXP 29
4933: PUSH
4934: LD_INT 3
4936: ARRAY
4937: PUSH
4938: LD_EXP 29
4942: PUSH
4943: LD_INT 4
4945: ARRAY
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4953: LD_ADDR_OWVAR 35
4957: PUSH
4958: LD_EXP 30
4962: ST_TO_ADDR
// un = CreateHuman ;
4963: LD_ADDR_VAR 0 3
4967: PUSH
4968: CALL_OW 44
4972: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4973: LD_VAR 0 3
4977: PPUSH
4978: LD_INT 2
4980: PPUSH
4981: LD_INT 0
4983: PPUSH
4984: CALL_OW 49
// end ;
4988: GO 4879
4990: POP
4991: POP
// for i := 1 to animalsAmount [ 5 ] do
4992: LD_ADDR_VAR 0 2
4996: PUSH
4997: DOUBLE
4998: LD_INT 1
5000: DEC
5001: ST_TO_ADDR
5002: LD_EXP 28
5006: PUSH
5007: LD_INT 5
5009: ARRAY
5010: PUSH
5011: FOR_TO
5012: IFFALSE 5073
// begin uc_side = 0 ;
5014: LD_ADDR_OWVAR 20
5018: PUSH
5019: LD_INT 0
5021: ST_TO_ADDR
// uc_nation = nation_nature ;
5022: LD_ADDR_OWVAR 21
5026: PUSH
5027: LD_INT 0
5029: ST_TO_ADDR
// vc_chassis := 31 ;
5030: LD_ADDR_OWVAR 37
5034: PUSH
5035: LD_INT 31
5037: ST_TO_ADDR
// vc_control := control_rider ;
5038: LD_ADDR_OWVAR 38
5042: PUSH
5043: LD_INT 4
5045: ST_TO_ADDR
// un := CreateVehicle ;
5046: LD_ADDR_VAR 0 3
5050: PUSH
5051: CALL_OW 45
5055: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
5056: LD_VAR 0 3
5060: PPUSH
5061: LD_INT 2
5063: PPUSH
5064: LD_INT 0
5066: PPUSH
5067: CALL_OW 49
// end ;
5071: GO 5011
5073: POP
5074: POP
// end ; end_of_file
5075: LD_VAR 0 1
5079: RET
// every 0 0$1 do
5080: GO 5082
5082: DISABLE
// InitAIManager ( 1 , 2 , UnitFilter ( ovsyenkoBase , [ f_type , unit_human ] ) , OvsyenkoBaseArea , OvsyenkoHealArea , false , false , 0 , 0 , 0 , 0 , 0 ) ;
5083: LD_INT 1
5085: PPUSH
5086: LD_INT 2
5088: PPUSH
5089: LD_EXP 59
5093: PPUSH
5094: LD_INT 21
5096: PUSH
5097: LD_INT 1
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PPUSH
5104: CALL_OW 72
5108: PPUSH
5109: LD_INT 3
5111: PPUSH
5112: LD_INT 6
5114: PPUSH
5115: LD_INT 0
5117: PPUSH
5118: LD_INT 0
5120: PPUSH
5121: LD_INT 0
5123: PPUSH
5124: LD_INT 0
5126: PPUSH
5127: LD_INT 0
5129: PPUSH
5130: LD_INT 0
5132: PPUSH
5133: LD_INT 0
5135: PPUSH
5136: CALL 5248 0 12
5140: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_weapon , us_bulldozer ] ] ) do var unit ;
5141: LD_INT 22
5143: PUSH
5144: LD_INT 1
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: LD_INT 50
5153: PUSH
5154: EMPTY
5155: LIST
5156: PUSH
5157: LD_INT 34
5159: PUSH
5160: LD_INT 14
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: LIST
5171: PPUSH
5172: CALL_OW 69
5176: IFFALSE 5245
5178: GO 5180
5180: DISABLE
5181: LD_INT 0
5183: PPUSH
// begin enable ;
5184: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_weapon , us_bulldozer ] ] ) do
5185: LD_ADDR_VAR 0 1
5189: PUSH
5190: LD_INT 22
5192: PUSH
5193: LD_INT 1
5195: PUSH
5196: EMPTY
5197: LIST
5198: LIST
5199: PUSH
5200: LD_INT 50
5202: PUSH
5203: EMPTY
5204: LIST
5205: PUSH
5206: LD_INT 34
5208: PUSH
5209: LD_INT 14
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: LIST
5220: PPUSH
5221: CALL_OW 69
5225: PUSH
5226: FOR_IN
5227: IFFALSE 5243
// CutTreeInArea ( unit , TreeArea ) ;
5229: LD_VAR 0 1
5233: PPUSH
5234: LD_INT 18
5236: PPUSH
5237: CALL 15087 0 2
5241: GO 5226
5243: POP
5244: POP
// end ;
5245: PPOPN 1
5247: END
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , repairArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack , canRebuild ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , offensiveUnits , offensiveReadyCounter , target1 , target2 , defenceUnits , weapons , chassis , baseBuildings , destroyedBuildings , destroyedBuilding , constructedBuilding , constructedBuildings , depot , factory , lab , bunkers , barracks , controlTowers , attackBuildings , enemyBuildings , damageBuilding , damageUnit , emptyBunkers , enemyUnits ; begin
5248: LD_INT 0
5250: PPUSH
5251: PPUSH
5252: PPUSH
5253: PPUSH
5254: PPUSH
5255: PPUSH
5256: PPUSH
5257: PPUSH
5258: PPUSH
5259: PPUSH
5260: PPUSH
5261: PPUSH
5262: PPUSH
5263: PPUSH
5264: PPUSH
5265: PPUSH
5266: PPUSH
5267: PPUSH
5268: PPUSH
5269: PPUSH
5270: PPUSH
5271: PPUSH
5272: PPUSH
5273: PPUSH
5274: PPUSH
5275: PPUSH
5276: PPUSH
5277: PPUSH
5278: PPUSH
5279: PPUSH
5280: PPUSH
5281: PPUSH
5282: PPUSH
5283: PPUSH
5284: PPUSH
5285: PPUSH
5286: PPUSH
5287: PPUSH
// personel = [ ] ;
5288: LD_ADDR_VAR 0 19
5292: PUSH
5293: EMPTY
5294: ST_TO_ADDR
// vehicles = [ ] ;
5295: LD_ADDR_VAR 0 25
5299: PUSH
5300: EMPTY
5301: ST_TO_ADDR
// destroyedBuildings = [ ] ;
5302: LD_ADDR_VAR 0 35
5306: PUSH
5307: EMPTY
5308: ST_TO_ADDR
// for unit in basePersonel do
5309: LD_ADDR_VAR 0 18
5313: PUSH
5314: LD_VAR 0 3
5318: PUSH
5319: FOR_IN
5320: IFFALSE 5340
// personel = personel ^ unit ;
5322: LD_ADDR_VAR 0 19
5326: PUSH
5327: LD_VAR 0 19
5331: PUSH
5332: LD_VAR 0 18
5336: ADD
5337: ST_TO_ADDR
5338: GO 5319
5340: POP
5341: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ] ] ) do
5342: LD_ADDR_VAR 0 24
5346: PUSH
5347: LD_VAR 0 4
5351: PPUSH
5352: LD_INT 22
5354: PUSH
5355: LD_VAR 0 1
5359: PUSH
5360: EMPTY
5361: LIST
5362: LIST
5363: PUSH
5364: LD_INT 21
5366: PUSH
5367: LD_INT 2
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: PUSH
5374: LD_INT 50
5376: PUSH
5377: EMPTY
5378: LIST
5379: PUSH
5380: LD_INT 3
5382: PUSH
5383: LD_INT 2
5385: PUSH
5386: LD_INT 34
5388: PUSH
5389: LD_INT 12
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: PUSH
5396: LD_INT 34
5398: PUSH
5399: LD_INT 51
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PUSH
5406: LD_INT 34
5408: PUSH
5409: LD_INT 32
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: PUSH
5416: LD_INT 34
5418: PUSH
5419: LD_INT 31
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: PUSH
5426: EMPTY
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: PPUSH
5443: CALL_OW 70
5447: PUSH
5448: FOR_IN
5449: IFFALSE 5469
// vehicles = vehicles ^ vehicle ;
5451: LD_ADDR_VAR 0 25
5455: PUSH
5456: LD_VAR 0 25
5460: PUSH
5461: LD_VAR 0 24
5465: ADD
5466: ST_TO_ADDR
5467: GO 5448
5469: POP
5470: POP
// repeat soldiers = [ ] ;
5471: LD_ADDR_VAR 0 20
5475: PUSH
5476: EMPTY
5477: ST_TO_ADDR
// engineers = [ ] ;
5478: LD_ADDR_VAR 0 21
5482: PUSH
5483: EMPTY
5484: ST_TO_ADDR
// mechanics = [ ] ;
5485: LD_ADDR_VAR 0 22
5489: PUSH
5490: EMPTY
5491: ST_TO_ADDR
// scientists = [ ] ;
5492: LD_ADDR_VAR 0 23
5496: PUSH
5497: EMPTY
5498: ST_TO_ADDR
// baseBuildings = [ ] ;
5499: LD_ADDR_VAR 0 34
5503: PUSH
5504: EMPTY
5505: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5506: LD_ADDR_VAR 0 39
5510: PUSH
5511: LD_VAR 0 4
5515: PPUSH
5516: LD_INT 22
5518: PUSH
5519: LD_VAR 0 1
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: PUSH
5528: LD_INT 21
5530: PUSH
5531: LD_INT 3
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: PUSH
5538: LD_INT 50
5540: PUSH
5541: EMPTY
5542: LIST
5543: PUSH
5544: LD_INT 2
5546: PUSH
5547: LD_INT 30
5549: PUSH
5550: LD_INT 0
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: PUSH
5557: LD_INT 30
5559: PUSH
5560: LD_INT 1
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: LIST
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: PPUSH
5578: CALL_OW 70
5582: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
5583: LD_ADDR_VAR 0 40
5587: PUSH
5588: LD_VAR 0 4
5592: PPUSH
5593: LD_INT 22
5595: PUSH
5596: LD_VAR 0 1
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: LD_INT 21
5607: PUSH
5608: LD_INT 3
5610: PUSH
5611: EMPTY
5612: LIST
5613: LIST
5614: PUSH
5615: LD_INT 50
5617: PUSH
5618: EMPTY
5619: LIST
5620: PUSH
5621: LD_INT 2
5623: PUSH
5624: LD_INT 30
5626: PUSH
5627: LD_INT 2
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: PUSH
5634: LD_INT 30
5636: PUSH
5637: LD_INT 3
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: LIST
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: PPUSH
5655: CALL_OW 70
5659: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5660: LD_ADDR_VAR 0 41
5664: PUSH
5665: LD_VAR 0 4
5669: PPUSH
5670: LD_INT 22
5672: PUSH
5673: LD_VAR 0 1
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: LD_INT 21
5684: PUSH
5685: LD_INT 3
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: PUSH
5692: LD_INT 50
5694: PUSH
5695: EMPTY
5696: LIST
5697: PUSH
5698: LD_INT 2
5700: PUSH
5701: LD_INT 30
5703: PUSH
5704: LD_INT 6
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: PUSH
5711: LD_INT 30
5713: PUSH
5714: LD_INT 7
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: PUSH
5721: LD_INT 30
5723: PUSH
5724: LD_INT 8
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: PUSH
5737: EMPTY
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: PPUSH
5743: CALL_OW 70
5747: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
5748: LD_ADDR_VAR 0 42
5752: PUSH
5753: LD_VAR 0 4
5757: PPUSH
5758: LD_INT 22
5760: PUSH
5761: LD_VAR 0 1
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: LD_INT 21
5772: PUSH
5773: LD_INT 3
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PUSH
5780: LD_INT 50
5782: PUSH
5783: EMPTY
5784: LIST
5785: PUSH
5786: LD_INT 2
5788: PUSH
5789: LD_INT 30
5791: PUSH
5792: LD_INT 31
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: LD_INT 30
5801: PUSH
5802: LD_INT 32
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: LIST
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: LIST
5818: LIST
5819: PPUSH
5820: CALL_OW 70
5824: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
5825: LD_ADDR_VAR 0 43
5829: PUSH
5830: LD_VAR 0 4
5834: PPUSH
5835: LD_INT 22
5837: PUSH
5838: LD_VAR 0 1
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PUSH
5847: LD_INT 21
5849: PUSH
5850: LD_INT 3
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: PUSH
5857: LD_INT 50
5859: PUSH
5860: EMPTY
5861: LIST
5862: PUSH
5863: LD_INT 2
5865: PUSH
5866: LD_INT 30
5868: PUSH
5869: LD_INT 4
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: PUSH
5876: LD_INT 30
5878: PUSH
5879: LD_INT 5
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: LIST
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: PPUSH
5897: CALL_OW 70
5901: ST_TO_ADDR
// controlTowers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_vehicle ] ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5902: LD_ADDR_VAR 0 44
5906: PUSH
5907: LD_VAR 0 4
5911: PPUSH
5912: LD_INT 22
5914: PUSH
5915: LD_VAR 0 1
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: PUSH
5924: LD_INT 50
5926: PUSH
5927: EMPTY
5928: LIST
5929: PUSH
5930: LD_INT 2
5932: PUSH
5933: LD_INT 21
5935: PUSH
5936: LD_INT 3
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: PUSH
5943: LD_INT 21
5945: PUSH
5946: LD_INT 2
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: LIST
5957: PUSH
5958: LD_INT 2
5960: PUSH
5961: LD_INT 30
5963: PUSH
5964: LD_INT 36
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: PUSH
5971: LD_INT 34
5973: PUSH
5974: LD_INT 31
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: LIST
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: PPUSH
5992: CALL_OW 70
5996: ST_TO_ADDR
// constructedBuildings = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] ] ) ;
5997: LD_ADDR_VAR 0 38
6001: PUSH
6002: LD_VAR 0 4
6006: PPUSH
6007: LD_INT 22
6009: PUSH
6010: LD_VAR 0 1
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: PUSH
6019: LD_INT 21
6021: PUSH
6022: LD_INT 3
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: PUSH
6029: LD_INT 3
6031: PUSH
6032: LD_INT 57
6034: PUSH
6035: EMPTY
6036: LIST
6037: PUSH
6038: EMPTY
6039: LIST
6040: LIST
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: LIST
6046: PPUSH
6047: CALL_OW 70
6051: ST_TO_ADDR
// for i := 1 to personel do
6052: LD_ADDR_VAR 0 14
6056: PUSH
6057: DOUBLE
6058: LD_INT 1
6060: DEC
6061: ST_TO_ADDR
6062: LD_VAR 0 19
6066: PUSH
6067: FOR_TO
6068: IFFALSE 6236
// begin if GetLives ( personel [ i ] ) = 1000 then
6070: LD_VAR 0 19
6074: PUSH
6075: LD_VAR 0 14
6079: ARRAY
6080: PPUSH
6081: CALL_OW 256
6085: PUSH
6086: LD_INT 1000
6088: EQUAL
6089: IFFALSE 6111
// SetTag ( personel [ i ] , 1 ) else
6091: LD_VAR 0 19
6095: PUSH
6096: LD_VAR 0 14
6100: ARRAY
6101: PPUSH
6102: LD_INT 1
6104: PPUSH
6105: CALL_OW 109
6109: GO 6191
// if GetLives ( personel [ i ] ) <= 950 and GetLives ( personel [ i ] ) > 250 then
6111: LD_VAR 0 19
6115: PUSH
6116: LD_VAR 0 14
6120: ARRAY
6121: PPUSH
6122: CALL_OW 256
6126: PUSH
6127: LD_INT 950
6129: LESSEQUAL
6130: PUSH
6131: LD_VAR 0 19
6135: PUSH
6136: LD_VAR 0 14
6140: ARRAY
6141: PPUSH
6142: CALL_OW 256
6146: PUSH
6147: LD_INT 250
6149: GREATER
6150: AND
6151: IFFALSE 6191
// begin SetTag ( personel [ i ] , 0 ) ;
6153: LD_VAR 0 19
6157: PUSH
6158: LD_VAR 0 14
6162: ARRAY
6163: PPUSH
6164: LD_INT 0
6166: PPUSH
6167: CALL_OW 109
// ComMoveToArea ( personel [ i ] , healArea ) ;
6171: LD_VAR 0 19
6175: PUSH
6176: LD_VAR 0 14
6180: ARRAY
6181: PPUSH
6182: LD_VAR 0 5
6186: PPUSH
6187: CALL_OW 113
// end ; if GetLives ( personel [ i ] ) < 100 then
6191: LD_VAR 0 19
6195: PUSH
6196: LD_VAR 0 14
6200: ARRAY
6201: PPUSH
6202: CALL_OW 256
6206: PUSH
6207: LD_INT 100
6209: LESS
6210: IFFALSE 6234
// personel = personel diff personel [ i ] ;
6212: LD_ADDR_VAR 0 19
6216: PUSH
6217: LD_VAR 0 19
6221: PUSH
6222: LD_VAR 0 19
6226: PUSH
6227: LD_VAR 0 14
6231: ARRAY
6232: DIFF
6233: ST_TO_ADDR
// end ;
6234: GO 6067
6236: POP
6237: POP
// for i := 1 to vehicles do
6238: LD_ADDR_VAR 0 14
6242: PUSH
6243: DOUBLE
6244: LD_INT 1
6246: DEC
6247: ST_TO_ADDR
6248: LD_VAR 0 25
6252: PUSH
6253: FOR_TO
6254: IFFALSE 6616
// begin if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
6256: LD_VAR 0 25
6260: PUSH
6261: LD_VAR 0 14
6265: ARRAY
6266: PUSH
6267: LD_INT 1
6269: ARRAY
6270: PPUSH
6271: CALL_OW 256
6275: PUSH
6276: LD_INT 1000
6278: EQUAL
6279: IFFALSE 6443
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
6281: LD_VAR 0 25
6285: PUSH
6286: LD_VAR 0 14
6290: ARRAY
6291: PUSH
6292: LD_INT 1
6294: ARRAY
6295: PPUSH
6296: CALL_OW 263
6300: PUSH
6301: LD_INT 1
6303: EQUAL
6304: IFFALSE 6383
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) and IsOK ( vehicles [ i ] [ 2 ] ) then
6306: LD_VAR 0 25
6310: PUSH
6311: LD_VAR 0 14
6315: ARRAY
6316: PUSH
6317: LD_INT 2
6319: ARRAY
6320: PPUSH
6321: CALL_OW 310
6325: NOT
6326: PUSH
6327: LD_VAR 0 25
6331: PUSH
6332: LD_VAR 0 14
6336: ARRAY
6337: PUSH
6338: LD_INT 2
6340: ARRAY
6341: PPUSH
6342: CALL_OW 302
6346: AND
6347: IFFALSE 6383
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
6349: LD_VAR 0 25
6353: PUSH
6354: LD_VAR 0 14
6358: ARRAY
6359: PUSH
6360: LD_INT 2
6362: ARRAY
6363: PPUSH
6364: LD_VAR 0 25
6368: PUSH
6369: LD_VAR 0 14
6373: ARRAY
6374: PUSH
6375: LD_INT 1
6377: ARRAY
6378: PPUSH
6379: CALL_OW 120
// if offensiveUnits < vehiclesToAttackAmount then
6383: LD_VAR 0 27
6387: PUSH
6388: LD_VAR 0 10
6392: LESS
6393: IFFALSE 6419
// SetTag ( vehicles [ i ] [ 1 ] , 2 ) else
6395: LD_VAR 0 25
6399: PUSH
6400: LD_VAR 0 14
6404: ARRAY
6405: PUSH
6406: LD_INT 1
6408: ARRAY
6409: PPUSH
6410: LD_INT 2
6412: PPUSH
6413: CALL_OW 109
6417: GO 6441
// SetTag ( vehicles [ i ] [ 1 ] , 3 ) ;
6419: LD_VAR 0 25
6423: PUSH
6424: LD_VAR 0 14
6428: ARRAY
6429: PUSH
6430: LD_INT 1
6432: ARRAY
6433: PPUSH
6434: LD_INT 3
6436: PPUSH
6437: CALL_OW 109
// end else
6441: GO 6564
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 and GetLives ( vehicles [ i ] [ 1 ] ) > 250 and GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
6443: LD_VAR 0 25
6447: PUSH
6448: LD_VAR 0 14
6452: ARRAY
6453: PUSH
6454: LD_INT 1
6456: ARRAY
6457: PPUSH
6458: CALL_OW 256
6462: PUSH
6463: LD_INT 650
6465: LESSEQUAL
6466: PUSH
6467: LD_VAR 0 25
6471: PUSH
6472: LD_VAR 0 14
6476: ARRAY
6477: PUSH
6478: LD_INT 1
6480: ARRAY
6481: PPUSH
6482: CALL_OW 256
6486: PUSH
6487: LD_INT 250
6489: GREATER
6490: AND
6491: PUSH
6492: LD_VAR 0 25
6496: PUSH
6497: LD_VAR 0 14
6501: ARRAY
6502: PUSH
6503: LD_INT 1
6505: ARRAY
6506: PPUSH
6507: CALL_OW 263
6511: PUSH
6512: LD_INT 1
6514: EQUAL
6515: AND
6516: IFFALSE 6564
// begin SetTag ( vehicles [ i ] [ 1 ] , 0 ) ;
6518: LD_VAR 0 25
6522: PUSH
6523: LD_VAR 0 14
6527: ARRAY
6528: PUSH
6529: LD_INT 1
6531: ARRAY
6532: PPUSH
6533: LD_INT 0
6535: PPUSH
6536: CALL_OW 109
// ComMoveToArea ( vehicles [ i ] [ 1 ] , repairArea ) ;
6540: LD_VAR 0 25
6544: PUSH
6545: LD_VAR 0 14
6549: ARRAY
6550: PUSH
6551: LD_INT 1
6553: ARRAY
6554: PPUSH
6555: LD_VAR 0 6
6559: PPUSH
6560: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
6564: LD_VAR 0 25
6568: PUSH
6569: LD_VAR 0 14
6573: ARRAY
6574: PUSH
6575: LD_INT 1
6577: ARRAY
6578: PPUSH
6579: CALL_OW 256
6583: PUSH
6584: LD_INT 250
6586: LESS
6587: IFFALSE 6614
// begin vehicles = vehicles diff [ vehicles [ i ] ] ;
6589: LD_ADDR_VAR 0 25
6593: PUSH
6594: LD_VAR 0 25
6598: PUSH
6599: LD_VAR 0 25
6603: PUSH
6604: LD_VAR 0 14
6608: ARRAY
6609: PUSH
6610: EMPTY
6611: LIST
6612: DIFF
6613: ST_TO_ADDR
// end ; end ;
6614: GO 6253
6616: POP
6617: POP
// for i := 1 to personel do
6618: LD_ADDR_VAR 0 14
6622: PUSH
6623: DOUBLE
6624: LD_INT 1
6626: DEC
6627: ST_TO_ADDR
6628: LD_VAR 0 19
6632: PUSH
6633: FOR_TO
6634: IFFALSE 6685
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
6636: LD_ADDR_VAR 0 20
6640: PUSH
6641: LD_VAR 0 20
6645: PUSH
6646: LD_VAR 0 19
6650: PUSH
6651: LD_VAR 0 14
6655: ARRAY
6656: PPUSH
6657: LD_INT 25
6659: PUSH
6660: LD_INT 1
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: LD_INT 50
6669: PUSH
6670: EMPTY
6671: LIST
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PPUSH
6677: CALL_OW 72
6681: ADD
6682: ST_TO_ADDR
6683: GO 6633
6685: POP
6686: POP
// if soldiers and UnitFilter ( bunkers , [ f_empty ] ) then
6687: LD_VAR 0 20
6691: PUSH
6692: LD_VAR 0 42
6696: PPUSH
6697: LD_INT 58
6699: PUSH
6700: EMPTY
6701: LIST
6702: PPUSH
6703: CALL_OW 72
6707: AND
6708: IFFALSE 6966
// begin for i := 1 to soldiers do
6710: LD_ADDR_VAR 0 14
6714: PUSH
6715: DOUBLE
6716: LD_INT 1
6718: DEC
6719: ST_TO_ADDR
6720: LD_VAR 0 20
6724: PUSH
6725: FOR_TO
6726: IFFALSE 6962
// if GetTag ( soldiers [ i ] ) = 1 then
6728: LD_VAR 0 20
6732: PUSH
6733: LD_VAR 0 14
6737: ARRAY
6738: PPUSH
6739: CALL_OW 110
6743: PUSH
6744: LD_INT 1
6746: EQUAL
6747: IFFALSE 6960
// begin if GetTaskList ( soldiers [ i ] ) then
6749: LD_VAR 0 20
6753: PUSH
6754: LD_VAR 0 14
6758: ARRAY
6759: PPUSH
6760: CALL_OW 437
6764: IFFALSE 6853
// if GetTaskList ( soldiers [ i ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( soldiers [ i ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
6766: LD_VAR 0 20
6770: PUSH
6771: LD_VAR 0 14
6775: ARRAY
6776: PPUSH
6777: CALL_OW 437
6781: PUSH
6782: LD_INT 1
6784: ARRAY
6785: PUSH
6786: LD_INT 1
6788: ARRAY
6789: PUSH
6790: LD_STRING e
6792: EQUAL
6793: PUSH
6794: LD_VAR 0 20
6798: PUSH
6799: LD_VAR 0 14
6803: ARRAY
6804: PPUSH
6805: CALL_OW 437
6809: PUSH
6810: LD_INT 1
6812: ARRAY
6813: PUSH
6814: LD_INT 4
6816: ARRAY
6817: PPUSH
6818: CALL_OW 266
6822: PUSH
6823: LD_INT 4
6825: PUSH
6826: LD_INT 5
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: IN
6833: AND
6834: IFFALSE 6853
// SetTaskList ( soldiers [ i ] , [ ] ) ;
6836: LD_VAR 0 20
6840: PUSH
6841: LD_VAR 0 14
6845: ARRAY
6846: PPUSH
6847: EMPTY
6848: PPUSH
6849: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
6853: LD_ADDR_VAR 0 49
6857: PUSH
6858: LD_VAR 0 42
6862: PPUSH
6863: LD_INT 3
6865: PUSH
6866: LD_INT 59
6868: PUSH
6869: EMPTY
6870: LIST
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PPUSH
6876: CALL_OW 72
6880: PUSH
6881: FOR_IN
6882: IFFALSE 6958
// if not HasTask ( soldiers [ i ] ) and not GetBType ( IsInUnit ( soldiers [ i ] ) ) in [ b_breastwork , b_bunker ] then
6884: LD_VAR 0 20
6888: PUSH
6889: LD_VAR 0 14
6893: ARRAY
6894: PPUSH
6895: CALL_OW 314
6899: NOT
6900: PUSH
6901: LD_VAR 0 20
6905: PUSH
6906: LD_VAR 0 14
6910: ARRAY
6911: PPUSH
6912: CALL_OW 310
6916: PPUSH
6917: CALL_OW 266
6921: PUSH
6922: LD_INT 31
6924: PUSH
6925: LD_INT 32
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: IN
6932: NOT
6933: AND
6934: IFFALSE 6956
// ComEnterUnit ( soldiers [ i ] , emptyBunkers ) ;
6936: LD_VAR 0 20
6940: PUSH
6941: LD_VAR 0 14
6945: ARRAY
6946: PPUSH
6947: LD_VAR 0 49
6951: PPUSH
6952: CALL_OW 120
6956: GO 6881
6958: POP
6959: POP
// end ;
6960: GO 6725
6962: POP
6963: POP
// end else
6964: GO 7138
// if soldiers and barracks then
6966: LD_VAR 0 20
6970: PUSH
6971: LD_VAR 0 43
6975: AND
6976: IFFALSE 7098
// begin for i := 1 to soldiers do
6978: LD_ADDR_VAR 0 14
6982: PUSH
6983: DOUBLE
6984: LD_INT 1
6986: DEC
6987: ST_TO_ADDR
6988: LD_VAR 0 20
6992: PUSH
6993: FOR_TO
6994: IFFALSE 7094
// if GetTag ( soldiers [ i ] ) = 1 and UnitFilter ( soldiers [ i ] , [ f_outside ] ) and not HasTask ( soldiers [ i ] ) then
6996: LD_VAR 0 20
7000: PUSH
7001: LD_VAR 0 14
7005: ARRAY
7006: PPUSH
7007: CALL_OW 110
7011: PUSH
7012: LD_INT 1
7014: EQUAL
7015: PUSH
7016: LD_VAR 0 20
7020: PUSH
7021: LD_VAR 0 14
7025: ARRAY
7026: PPUSH
7027: LD_INT 56
7029: PUSH
7030: EMPTY
7031: LIST
7032: PPUSH
7033: CALL_OW 72
7037: AND
7038: PUSH
7039: LD_VAR 0 20
7043: PUSH
7044: LD_VAR 0 14
7048: ARRAY
7049: PPUSH
7050: CALL_OW 314
7054: NOT
7055: AND
7056: IFFALSE 7092
// ComEnterUnit ( soldiers [ i ] , barracks [ rand ( 1 , barracks ) ] ) ;
7058: LD_VAR 0 20
7062: PUSH
7063: LD_VAR 0 14
7067: ARRAY
7068: PPUSH
7069: LD_VAR 0 43
7073: PUSH
7074: LD_INT 1
7076: PPUSH
7077: LD_VAR 0 43
7081: PPUSH
7082: CALL_OW 12
7086: ARRAY
7087: PPUSH
7088: CALL_OW 120
7092: GO 6993
7094: POP
7095: POP
// end else
7096: GO 7138
// for i := 1 to soldiers do
7098: LD_ADDR_VAR 0 14
7102: PUSH
7103: DOUBLE
7104: LD_INT 1
7106: DEC
7107: ST_TO_ADDR
7108: LD_VAR 0 20
7112: PUSH
7113: FOR_TO
7114: IFFALSE 7136
// SetTag ( soldiers [ i ] , 3 ) ;
7116: LD_VAR 0 20
7120: PUSH
7121: LD_VAR 0 14
7125: ARRAY
7126: PPUSH
7127: LD_INT 3
7129: PPUSH
7130: CALL_OW 109
7134: GO 7113
7136: POP
7137: POP
// for i := 1 to personel do
7138: LD_ADDR_VAR 0 14
7142: PUSH
7143: DOUBLE
7144: LD_INT 1
7146: DEC
7147: ST_TO_ADDR
7148: LD_VAR 0 19
7152: PUSH
7153: FOR_TO
7154: IFFALSE 7195
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
7156: LD_ADDR_VAR 0 21
7160: PUSH
7161: LD_VAR 0 21
7165: PUSH
7166: LD_VAR 0 19
7170: PUSH
7171: LD_VAR 0 14
7175: ARRAY
7176: PPUSH
7177: LD_INT 25
7179: PUSH
7180: LD_INT 2
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PPUSH
7187: CALL_OW 72
7191: ADD
7192: ST_TO_ADDR
7193: GO 7153
7195: POP
7196: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
7197: LD_VAR 0 21
7201: PUSH
7202: LD_VAR 0 4
7206: PPUSH
7207: LD_INT 22
7209: PUSH
7210: LD_VAR 0 1
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PUSH
7219: LD_INT 21
7221: PUSH
7222: LD_INT 3
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: LD_INT 3
7231: PUSH
7232: LD_INT 24
7234: PUSH
7235: LD_INT 1000
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: LIST
7250: PPUSH
7251: CALL_OW 70
7255: AND
7256: IFFALSE 7484
// begin for i := 1 to engineers do
7258: LD_ADDR_VAR 0 14
7262: PUSH
7263: DOUBLE
7264: LD_INT 1
7266: DEC
7267: ST_TO_ADDR
7268: LD_VAR 0 21
7272: PUSH
7273: FOR_TO
7274: IFFALSE 7480
// if GetTag ( engineers [ i ] ) = 1 then
7276: LD_VAR 0 21
7280: PUSH
7281: LD_VAR 0 14
7285: ARRAY
7286: PPUSH
7287: CALL_OW 110
7291: PUSH
7292: LD_INT 1
7294: EQUAL
7295: IFFALSE 7478
// begin if GetTaskList ( engineers [ i ] ) then
7297: LD_VAR 0 21
7301: PUSH
7302: LD_VAR 0 14
7306: ARRAY
7307: PPUSH
7308: CALL_OW 437
7312: IFFALSE 7360
// if GetTaskList ( engineers [ i ] ) [ 1 ] [ 1 ] = e then
7314: LD_VAR 0 21
7318: PUSH
7319: LD_VAR 0 14
7323: ARRAY
7324: PPUSH
7325: CALL_OW 437
7329: PUSH
7330: LD_INT 1
7332: ARRAY
7333: PUSH
7334: LD_INT 1
7336: ARRAY
7337: PUSH
7338: LD_STRING e
7340: EQUAL
7341: IFFALSE 7360
// SetTaskList ( engineers [ i ] , [ ] ) ;
7343: LD_VAR 0 21
7347: PUSH
7348: LD_VAR 0 14
7352: ARRAY
7353: PPUSH
7354: EMPTY
7355: PPUSH
7356: CALL_OW 446
// if IsInUnit ( engineers [ i ] ) then
7360: LD_VAR 0 21
7364: PUSH
7365: LD_VAR 0 14
7369: ARRAY
7370: PPUSH
7371: CALL_OW 310
7375: IFFALSE 7392
// ComExitBuilding ( engineers [ i ] ) ;
7377: LD_VAR 0 21
7381: PUSH
7382: LD_VAR 0 14
7386: ARRAY
7387: PPUSH
7388: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7392: LD_ADDR_VAR 0 47
7396: PUSH
7397: LD_VAR 0 4
7401: PPUSH
7402: LD_INT 22
7404: PUSH
7405: LD_VAR 0 1
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: LD_INT 21
7416: PUSH
7417: LD_INT 3
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: PUSH
7424: LD_INT 3
7426: PUSH
7427: LD_INT 24
7429: PUSH
7430: LD_INT 1000
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: PPUSH
7446: CALL_OW 70
7450: PUSH
7451: FOR_IN
7452: IFFALSE 7476
// AddComRepairBuilding ( engineers [ i ] , damageBuilding ) ;
7454: LD_VAR 0 21
7458: PUSH
7459: LD_VAR 0 14
7463: ARRAY
7464: PPUSH
7465: LD_VAR 0 47
7469: PPUSH
7470: CALL_OW 190
7474: GO 7451
7476: POP
7477: POP
// end ;
7478: GO 7273
7480: POP
7481: POP
// end else
7482: GO 7791
// if engineers and destroyedBuildings then
7484: LD_VAR 0 21
7488: PUSH
7489: LD_VAR 0 35
7493: AND
7494: IFFALSE 7670
// begin for i := 1 to engineers do
7496: LD_ADDR_VAR 0 14
7500: PUSH
7501: DOUBLE
7502: LD_INT 1
7504: DEC
7505: ST_TO_ADDR
7506: LD_VAR 0 21
7510: PUSH
7511: FOR_TO
7512: IFFALSE 7666
// if GetTag ( engineers [ i ] ) = 1 then
7514: LD_VAR 0 21
7518: PUSH
7519: LD_VAR 0 14
7523: ARRAY
7524: PPUSH
7525: CALL_OW 110
7529: PUSH
7530: LD_INT 1
7532: EQUAL
7533: IFFALSE 7664
// begin if IsInUnit ( engineers [ i ] ) then
7535: LD_VAR 0 21
7539: PUSH
7540: LD_VAR 0 14
7544: ARRAY
7545: PPUSH
7546: CALL_OW 310
7550: IFFALSE 7567
// ComExitBuilding ( engineers [ i ] ) ;
7552: LD_VAR 0 21
7556: PUSH
7557: LD_VAR 0 14
7561: ARRAY
7562: PPUSH
7563: CALL_OW 122
// for j := 1 to destroyedBuildings / 4 do
7567: LD_ADDR_VAR 0 15
7571: PUSH
7572: DOUBLE
7573: LD_INT 1
7575: DEC
7576: ST_TO_ADDR
7577: LD_VAR 0 35
7581: PUSH
7582: LD_INT 4
7584: DIVREAL
7585: PUSH
7586: FOR_TO
7587: IFFALSE 7662
// AddComBuild ( engineers [ i ] , destroyedBuildings [ j ] , destroyedBuildings [ j + 1 ] , destroyedBuildings [ j + 2 ] , destroyedBuildings [ j + 3 ] ) ;
7589: LD_VAR 0 21
7593: PUSH
7594: LD_VAR 0 14
7598: ARRAY
7599: PPUSH
7600: LD_VAR 0 35
7604: PUSH
7605: LD_VAR 0 15
7609: ARRAY
7610: PPUSH
7611: LD_VAR 0 35
7615: PUSH
7616: LD_VAR 0 15
7620: PUSH
7621: LD_INT 1
7623: PLUS
7624: ARRAY
7625: PPUSH
7626: LD_VAR 0 35
7630: PUSH
7631: LD_VAR 0 15
7635: PUSH
7636: LD_INT 2
7638: PLUS
7639: ARRAY
7640: PPUSH
7641: LD_VAR 0 35
7645: PUSH
7646: LD_VAR 0 15
7650: PUSH
7651: LD_INT 3
7653: PLUS
7654: ARRAY
7655: PPUSH
7656: CALL_OW 205
7660: GO 7586
7662: POP
7663: POP
// end ;
7664: GO 7511
7666: POP
7667: POP
// end else
7668: GO 7791
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot and not destroyedBuildings then
7670: LD_VAR 0 21
7674: PUSH
7675: LD_VAR 0 21
7679: PPUSH
7680: LD_INT 56
7682: PUSH
7683: EMPTY
7684: LIST
7685: PPUSH
7686: CALL_OW 72
7690: AND
7691: PUSH
7692: LD_VAR 0 39
7696: AND
7697: PUSH
7698: LD_VAR 0 35
7702: NOT
7703: AND
7704: IFFALSE 7791
// for i := 1 to engineers do
7706: LD_ADDR_VAR 0 14
7710: PUSH
7711: DOUBLE
7712: LD_INT 1
7714: DEC
7715: ST_TO_ADDR
7716: LD_VAR 0 21
7720: PUSH
7721: FOR_TO
7722: IFFALSE 7789
// begin if GetTag ( engineers [ i ] ) = 1 and not HasTask ( engineers [ i ] ) then
7724: LD_VAR 0 21
7728: PUSH
7729: LD_VAR 0 14
7733: ARRAY
7734: PPUSH
7735: CALL_OW 110
7739: PUSH
7740: LD_INT 1
7742: EQUAL
7743: PUSH
7744: LD_VAR 0 21
7748: PUSH
7749: LD_VAR 0 14
7753: ARRAY
7754: PPUSH
7755: CALL_OW 314
7759: NOT
7760: AND
7761: IFFALSE 7787
// ComEnterUnit ( engineers [ i ] , depot [ 1 ] ) ;
7763: LD_VAR 0 21
7767: PUSH
7768: LD_VAR 0 14
7772: ARRAY
7773: PPUSH
7774: LD_VAR 0 39
7778: PUSH
7779: LD_INT 1
7781: ARRAY
7782: PPUSH
7783: CALL_OW 120
// end ;
7787: GO 7721
7789: POP
7790: POP
// for i := 1 to personel do
7791: LD_ADDR_VAR 0 14
7795: PUSH
7796: DOUBLE
7797: LD_INT 1
7799: DEC
7800: ST_TO_ADDR
7801: LD_VAR 0 19
7805: PUSH
7806: FOR_TO
7807: IFFALSE 7848
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
7809: LD_ADDR_VAR 0 22
7813: PUSH
7814: LD_VAR 0 22
7818: PUSH
7819: LD_VAR 0 19
7823: PUSH
7824: LD_VAR 0 14
7828: ARRAY
7829: PPUSH
7830: LD_INT 25
7832: PUSH
7833: LD_INT 3
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PPUSH
7840: CALL_OW 72
7844: ADD
7845: ST_TO_ADDR
7846: GO 7806
7848: POP
7849: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
7850: LD_VAR 0 22
7854: PUSH
7855: LD_VAR 0 4
7859: PPUSH
7860: LD_INT 22
7862: PUSH
7863: LD_VAR 0 1
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: LD_INT 21
7874: PUSH
7875: LD_INT 2
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: PUSH
7882: LD_INT 3
7884: PUSH
7885: LD_INT 24
7887: PUSH
7888: LD_INT 1000
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: LIST
7903: PPUSH
7904: CALL_OW 70
7908: AND
7909: IFFALSE 8489
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7911: LD_ADDR_VAR 0 48
7915: PUSH
7916: LD_VAR 0 4
7920: PPUSH
7921: LD_INT 22
7923: PUSH
7924: LD_VAR 0 1
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PUSH
7933: LD_INT 21
7935: PUSH
7936: LD_INT 2
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: PUSH
7943: LD_INT 3
7945: PUSH
7946: LD_INT 24
7948: PUSH
7949: LD_INT 1000
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: LIST
7964: PPUSH
7965: CALL_OW 70
7969: PUSH
7970: FOR_IN
7971: IFFALSE 8485
// begin if GetDistUnitArea ( damageUnit , repairArea ) <= 5 then
7973: LD_VAR 0 48
7977: PPUSH
7978: LD_VAR 0 6
7982: PPUSH
7983: CALL_OW 299
7987: PUSH
7988: LD_INT 5
7990: LESSEQUAL
7991: IFFALSE 8080
// for i := 1 to vehicles do
7993: LD_ADDR_VAR 0 14
7997: PUSH
7998: DOUBLE
7999: LD_INT 1
8001: DEC
8002: ST_TO_ADDR
8003: LD_VAR 0 25
8007: PUSH
8008: FOR_TO
8009: IFFALSE 8078
// if vehicles [ i ] [ 1 ] = damageUnit then
8011: LD_VAR 0 25
8015: PUSH
8016: LD_VAR 0 14
8020: ARRAY
8021: PUSH
8022: LD_INT 1
8024: ARRAY
8025: PUSH
8026: LD_VAR 0 48
8030: EQUAL
8031: IFFALSE 8076
// begin ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
8033: LD_VAR 0 25
8037: PUSH
8038: LD_VAR 0 14
8042: ARRAY
8043: PUSH
8044: LD_INT 2
8046: ARRAY
8047: PPUSH
8048: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
8052: LD_VAR 0 25
8056: PUSH
8057: LD_VAR 0 14
8061: ARRAY
8062: PUSH
8063: LD_INT 2
8065: ARRAY
8066: PPUSH
8067: LD_VAR 0 48
8071: PPUSH
8072: CALL_OW 189
// end ;
8076: GO 8008
8078: POP
8079: POP
// for i := 1 to mechanics do
8080: LD_ADDR_VAR 0 14
8084: PUSH
8085: DOUBLE
8086: LD_INT 1
8088: DEC
8089: ST_TO_ADDR
8090: LD_VAR 0 22
8094: PUSH
8095: FOR_TO
8096: IFFALSE 8264
// if GetTag ( mechanics [ i ] ) = 1 and IsInUnit ( mechanics [ i ] ) in [ b_workshop , b_factory ] then
8098: LD_VAR 0 22
8102: PUSH
8103: LD_VAR 0 14
8107: ARRAY
8108: PPUSH
8109: CALL_OW 110
8113: PUSH
8114: LD_INT 1
8116: EQUAL
8117: PUSH
8118: LD_VAR 0 22
8122: PUSH
8123: LD_VAR 0 14
8127: ARRAY
8128: PPUSH
8129: CALL_OW 310
8133: PUSH
8134: LD_INT 2
8136: PUSH
8137: LD_INT 3
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: IN
8144: AND
8145: IFFALSE 8262
// begin if GetTaskList ( mechanics [ i ] ) then
8147: LD_VAR 0 22
8151: PUSH
8152: LD_VAR 0 14
8156: ARRAY
8157: PPUSH
8158: CALL_OW 437
8162: IFFALSE 8210
// if GetTaskList ( mechanics [ i ] ) [ 1 ] [ 1 ] = e then
8164: LD_VAR 0 22
8168: PUSH
8169: LD_VAR 0 14
8173: ARRAY
8174: PPUSH
8175: CALL_OW 437
8179: PUSH
8180: LD_INT 1
8182: ARRAY
8183: PUSH
8184: LD_INT 1
8186: ARRAY
8187: PUSH
8188: LD_STRING e
8190: EQUAL
8191: IFFALSE 8210
// SetTaskList ( mechanics [ i ] , [ ] ) ;
8193: LD_VAR 0 22
8197: PUSH
8198: LD_VAR 0 14
8202: ARRAY
8203: PPUSH
8204: EMPTY
8205: PPUSH
8206: CALL_OW 446
// if IsInUnit ( mechanics [ i ] ) then
8210: LD_VAR 0 22
8214: PUSH
8215: LD_VAR 0 14
8219: ARRAY
8220: PPUSH
8221: CALL_OW 310
8225: IFFALSE 8242
// ComExitBuilding ( mechanics [ i ] ) ;
8227: LD_VAR 0 22
8231: PUSH
8232: LD_VAR 0 14
8236: ARRAY
8237: PPUSH
8238: CALL_OW 122
// AddComRepairVehicle ( mechanics [ i ] , damageUnit ) ;
8242: LD_VAR 0 22
8246: PUSH
8247: LD_VAR 0 14
8251: ARRAY
8252: PPUSH
8253: LD_VAR 0 48
8257: PPUSH
8258: CALL_OW 189
// end ;
8262: GO 8095
8264: POP
8265: POP
// if GetLives ( damageUnit ) < 250 and IsInArea ( damageUnit , baseArea ) then
8266: LD_VAR 0 48
8270: PPUSH
8271: CALL_OW 256
8275: PUSH
8276: LD_INT 250
8278: LESS
8279: PUSH
8280: LD_VAR 0 48
8284: PPUSH
8285: LD_VAR 0 4
8289: PPUSH
8290: CALL_OW 308
8294: AND
8295: IFFALSE 8483
// for i := 1 to personel do
8297: LD_ADDR_VAR 0 14
8301: PUSH
8302: DOUBLE
8303: LD_INT 1
8305: DEC
8306: ST_TO_ADDR
8307: LD_VAR 0 19
8311: PUSH
8312: FOR_TO
8313: IFFALSE 8481
// if GetTag ( mechanics [ i ] ) = 1 and IsInUnit ( mechanics [ i ] ) in [ b_workshop , b_factory ] then
8315: LD_VAR 0 22
8319: PUSH
8320: LD_VAR 0 14
8324: ARRAY
8325: PPUSH
8326: CALL_OW 110
8330: PUSH
8331: LD_INT 1
8333: EQUAL
8334: PUSH
8335: LD_VAR 0 22
8339: PUSH
8340: LD_VAR 0 14
8344: ARRAY
8345: PPUSH
8346: CALL_OW 310
8350: PUSH
8351: LD_INT 2
8353: PUSH
8354: LD_INT 3
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: IN
8361: AND
8362: IFFALSE 8479
// begin if GetTaskList ( mechanics [ i ] ) then
8364: LD_VAR 0 22
8368: PUSH
8369: LD_VAR 0 14
8373: ARRAY
8374: PPUSH
8375: CALL_OW 437
8379: IFFALSE 8427
// if GetTaskList ( mechanics [ i ] ) [ 1 ] [ 1 ] = e then
8381: LD_VAR 0 22
8385: PUSH
8386: LD_VAR 0 14
8390: ARRAY
8391: PPUSH
8392: CALL_OW 437
8396: PUSH
8397: LD_INT 1
8399: ARRAY
8400: PUSH
8401: LD_INT 1
8403: ARRAY
8404: PUSH
8405: LD_STRING e
8407: EQUAL
8408: IFFALSE 8427
// SetTaskList ( mechanics [ i ] , [ ] ) ;
8410: LD_VAR 0 22
8414: PUSH
8415: LD_VAR 0 14
8419: ARRAY
8420: PPUSH
8421: EMPTY
8422: PPUSH
8423: CALL_OW 446
// if IsInUnit ( mechanics [ i ] ) then
8427: LD_VAR 0 22
8431: PUSH
8432: LD_VAR 0 14
8436: ARRAY
8437: PPUSH
8438: CALL_OW 310
8442: IFFALSE 8459
// ComExitBuilding ( mechanics [ i ] ) ;
8444: LD_VAR 0 22
8448: PUSH
8449: LD_VAR 0 14
8453: ARRAY
8454: PPUSH
8455: CALL_OW 122
// AddComRepairVehicle ( mechanics [ i ] , damageUnit ) ;
8459: LD_VAR 0 22
8463: PUSH
8464: LD_VAR 0 14
8468: ARRAY
8469: PPUSH
8470: LD_VAR 0 48
8474: PPUSH
8475: CALL_OW 189
// end ;
8479: GO 8312
8481: POP
8482: POP
// end ;
8483: GO 7970
8485: POP
8486: POP
// end else
8487: GO 8786
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and UnitFilter ( controlTowers , [ f_empty ] ) then
8489: LD_VAR 0 22
8493: PUSH
8494: LD_VAR 0 22
8498: PPUSH
8499: LD_INT 56
8501: PUSH
8502: EMPTY
8503: LIST
8504: PPUSH
8505: CALL_OW 72
8509: AND
8510: PUSH
8511: LD_VAR 0 44
8515: PPUSH
8516: LD_INT 58
8518: PUSH
8519: EMPTY
8520: LIST
8521: PPUSH
8522: CALL_OW 72
8526: AND
8527: IFFALSE 8644
// begin for i := 1 to mechanics do
8529: LD_ADDR_VAR 0 14
8533: PUSH
8534: DOUBLE
8535: LD_INT 1
8537: DEC
8538: ST_TO_ADDR
8539: LD_VAR 0 22
8543: PUSH
8544: FOR_TO
8545: IFFALSE 8640
// if GetTag ( mechanics [ i ] ) = 1 and not HasTask ( mechanics [ i ] ) and not IsInUnit ( mechanics [ i ] ) then
8547: LD_VAR 0 22
8551: PUSH
8552: LD_VAR 0 14
8556: ARRAY
8557: PPUSH
8558: CALL_OW 110
8562: PUSH
8563: LD_INT 1
8565: EQUAL
8566: PUSH
8567: LD_VAR 0 22
8571: PUSH
8572: LD_VAR 0 14
8576: ARRAY
8577: PPUSH
8578: CALL_OW 314
8582: NOT
8583: AND
8584: PUSH
8585: LD_VAR 0 22
8589: PUSH
8590: LD_VAR 0 14
8594: ARRAY
8595: PPUSH
8596: CALL_OW 310
8600: NOT
8601: AND
8602: IFFALSE 8638
// ComEnterUnit ( mechanics [ i ] , controlTowers [ rand ( 1 , controlTowers ) ] ) ;
8604: LD_VAR 0 22
8608: PUSH
8609: LD_VAR 0 14
8613: ARRAY
8614: PPUSH
8615: LD_VAR 0 44
8619: PUSH
8620: LD_INT 1
8622: PPUSH
8623: LD_VAR 0 44
8627: PPUSH
8628: CALL_OW 12
8632: ARRAY
8633: PPUSH
8634: CALL_OW 120
8638: GO 8544
8640: POP
8641: POP
// end else
8642: GO 8786
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
8644: LD_VAR 0 22
8648: PUSH
8649: LD_VAR 0 22
8653: PPUSH
8654: LD_INT 56
8656: PUSH
8657: EMPTY
8658: LIST
8659: PPUSH
8660: CALL_OW 72
8664: AND
8665: PUSH
8666: LD_VAR 0 40
8670: AND
8671: IFFALSE 8786
// for i := 1 to mechanics do
8673: LD_ADDR_VAR 0 14
8677: PUSH
8678: DOUBLE
8679: LD_INT 1
8681: DEC
8682: ST_TO_ADDR
8683: LD_VAR 0 22
8687: PUSH
8688: FOR_TO
8689: IFFALSE 8784
// if GetTag ( mechanics [ i ] ) = 1 and not HasTask ( mechanics [ i ] ) and not IsInUnit ( mechanics [ i ] ) then
8691: LD_VAR 0 22
8695: PUSH
8696: LD_VAR 0 14
8700: ARRAY
8701: PPUSH
8702: CALL_OW 110
8706: PUSH
8707: LD_INT 1
8709: EQUAL
8710: PUSH
8711: LD_VAR 0 22
8715: PUSH
8716: LD_VAR 0 14
8720: ARRAY
8721: PPUSH
8722: CALL_OW 314
8726: NOT
8727: AND
8728: PUSH
8729: LD_VAR 0 22
8733: PUSH
8734: LD_VAR 0 14
8738: ARRAY
8739: PPUSH
8740: CALL_OW 310
8744: NOT
8745: AND
8746: IFFALSE 8782
// ComEnterUnit ( mechanics [ i ] , factory [ rand ( 1 , factory ) ] ) ;
8748: LD_VAR 0 22
8752: PUSH
8753: LD_VAR 0 14
8757: ARRAY
8758: PPUSH
8759: LD_VAR 0 40
8763: PUSH
8764: LD_INT 1
8766: PPUSH
8767: LD_VAR 0 40
8771: PPUSH
8772: CALL_OW 12
8776: ARRAY
8777: PPUSH
8778: CALL_OW 120
8782: GO 8688
8784: POP
8785: POP
// for i := 1 to personel do
8786: LD_ADDR_VAR 0 14
8790: PUSH
8791: DOUBLE
8792: LD_INT 1
8794: DEC
8795: ST_TO_ADDR
8796: LD_VAR 0 19
8800: PUSH
8801: FOR_TO
8802: IFFALSE 8843
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
8804: LD_ADDR_VAR 0 23
8808: PUSH
8809: LD_VAR 0 23
8813: PUSH
8814: LD_VAR 0 19
8818: PUSH
8819: LD_VAR 0 14
8823: ARRAY
8824: PPUSH
8825: LD_INT 25
8827: PUSH
8828: LD_INT 4
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PPUSH
8835: CALL_OW 72
8839: ADD
8840: ST_TO_ADDR
8841: GO 8801
8843: POP
8844: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
8845: LD_VAR 0 23
8849: PUSH
8850: LD_VAR 0 4
8854: PPUSH
8855: LD_INT 22
8857: PUSH
8858: LD_VAR 0 1
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PUSH
8867: LD_INT 21
8869: PUSH
8870: LD_INT 1
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PUSH
8877: LD_INT 3
8879: PUSH
8880: LD_INT 24
8882: PUSH
8883: LD_INT 1000
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: LIST
8898: PPUSH
8899: CALL_OW 70
8903: AND
8904: IFFALSE 9341
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
8906: LD_ADDR_VAR 0 48
8910: PUSH
8911: LD_VAR 0 4
8915: PPUSH
8916: LD_INT 22
8918: PUSH
8919: LD_VAR 0 1
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: PUSH
8928: LD_INT 21
8930: PUSH
8931: LD_INT 1
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: PUSH
8938: LD_INT 3
8940: PUSH
8941: LD_INT 24
8943: PUSH
8944: LD_INT 1000
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: LIST
8959: PPUSH
8960: CALL_OW 70
8964: PUSH
8965: FOR_IN
8966: IFFALSE 9337
// begin if GetDistUnitArea ( damageUnit , healArea ) <= 5 then
8968: LD_VAR 0 48
8972: PPUSH
8973: LD_VAR 0 5
8977: PPUSH
8978: CALL_OW 299
8982: PUSH
8983: LD_INT 5
8985: LESSEQUAL
8986: IFFALSE 9146
// for i := 1 to scientists do
8988: LD_ADDR_VAR 0 14
8992: PUSH
8993: DOUBLE
8994: LD_INT 1
8996: DEC
8997: ST_TO_ADDR
8998: LD_VAR 0 23
9002: PUSH
9003: FOR_TO
9004: IFFALSE 9144
// if GetTag ( scientists [ i ] ) = 1 then
9006: LD_VAR 0 23
9010: PUSH
9011: LD_VAR 0 14
9015: ARRAY
9016: PPUSH
9017: CALL_OW 110
9021: PUSH
9022: LD_INT 1
9024: EQUAL
9025: IFFALSE 9142
// begin if GetTaskList ( scientists [ i ] ) then
9027: LD_VAR 0 23
9031: PUSH
9032: LD_VAR 0 14
9036: ARRAY
9037: PPUSH
9038: CALL_OW 437
9042: IFFALSE 9090
// if GetTaskList ( scientists [ i ] ) [ 1 ] [ 1 ] = e then
9044: LD_VAR 0 23
9048: PUSH
9049: LD_VAR 0 14
9053: ARRAY
9054: PPUSH
9055: CALL_OW 437
9059: PUSH
9060: LD_INT 1
9062: ARRAY
9063: PUSH
9064: LD_INT 1
9066: ARRAY
9067: PUSH
9068: LD_STRING e
9070: EQUAL
9071: IFFALSE 9090
// SetTaskList ( scientists [ i ] , [ ] ) ;
9073: LD_VAR 0 23
9077: PUSH
9078: LD_VAR 0 14
9082: ARRAY
9083: PPUSH
9084: EMPTY
9085: PPUSH
9086: CALL_OW 446
// if IsInUnit ( scientists [ i ] ) then
9090: LD_VAR 0 23
9094: PUSH
9095: LD_VAR 0 14
9099: ARRAY
9100: PPUSH
9101: CALL_OW 310
9105: IFFALSE 9122
// ComExitBuilding ( scientists [ i ] ) ;
9107: LD_VAR 0 23
9111: PUSH
9112: LD_VAR 0 14
9116: ARRAY
9117: PPUSH
9118: CALL_OW 122
// AddComHeal ( scientists [ i ] , damageUnit ) ;
9122: LD_VAR 0 23
9126: PUSH
9127: LD_VAR 0 14
9131: ARRAY
9132: PPUSH
9133: LD_VAR 0 48
9137: PPUSH
9138: CALL_OW 188
// end ;
9142: GO 9003
9144: POP
9145: POP
// if GetLives ( damageUnit ) < 250 and IsInArea ( damageUnit , baseArea ) then
9146: LD_VAR 0 48
9150: PPUSH
9151: CALL_OW 256
9155: PUSH
9156: LD_INT 250
9158: LESS
9159: PUSH
9160: LD_VAR 0 48
9164: PPUSH
9165: LD_VAR 0 4
9169: PPUSH
9170: CALL_OW 308
9174: AND
9175: IFFALSE 9335
// for i := 1 to scientists do
9177: LD_ADDR_VAR 0 14
9181: PUSH
9182: DOUBLE
9183: LD_INT 1
9185: DEC
9186: ST_TO_ADDR
9187: LD_VAR 0 23
9191: PUSH
9192: FOR_TO
9193: IFFALSE 9333
// if GetTag ( scientists [ i ] ) = 1 then
9195: LD_VAR 0 23
9199: PUSH
9200: LD_VAR 0 14
9204: ARRAY
9205: PPUSH
9206: CALL_OW 110
9210: PUSH
9211: LD_INT 1
9213: EQUAL
9214: IFFALSE 9331
// begin if GetTaskList ( scientists [ i ] ) then
9216: LD_VAR 0 23
9220: PUSH
9221: LD_VAR 0 14
9225: ARRAY
9226: PPUSH
9227: CALL_OW 437
9231: IFFALSE 9279
// if GetTaskList ( scientists [ i ] ) [ 1 ] [ 1 ] = e then
9233: LD_VAR 0 23
9237: PUSH
9238: LD_VAR 0 14
9242: ARRAY
9243: PPUSH
9244: CALL_OW 437
9248: PUSH
9249: LD_INT 1
9251: ARRAY
9252: PUSH
9253: LD_INT 1
9255: ARRAY
9256: PUSH
9257: LD_STRING e
9259: EQUAL
9260: IFFALSE 9279
// SetTaskList ( scientists [ i ] , [ ] ) ;
9262: LD_VAR 0 23
9266: PUSH
9267: LD_VAR 0 14
9271: ARRAY
9272: PPUSH
9273: EMPTY
9274: PPUSH
9275: CALL_OW 446
// if IsInUnit ( scientists [ i ] ) then
9279: LD_VAR 0 23
9283: PUSH
9284: LD_VAR 0 14
9288: ARRAY
9289: PPUSH
9290: CALL_OW 310
9294: IFFALSE 9311
// ComExitBuilding ( scientists [ i ] ) ;
9296: LD_VAR 0 23
9300: PUSH
9301: LD_VAR 0 14
9305: ARRAY
9306: PPUSH
9307: CALL_OW 122
// AddComHeal ( scientists [ i ] , damageUnit ) ;
9311: LD_VAR 0 23
9315: PUSH
9316: LD_VAR 0 14
9320: ARRAY
9321: PPUSH
9322: LD_VAR 0 48
9326: PPUSH
9327: CALL_OW 188
// end ;
9331: GO 9192
9333: POP
9334: POP
// end ;
9335: GO 8965
9337: POP
9338: POP
// end else
9339: GO 9483
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
9341: LD_VAR 0 23
9345: PUSH
9346: LD_VAR 0 23
9350: PPUSH
9351: LD_INT 56
9353: PUSH
9354: EMPTY
9355: LIST
9356: PPUSH
9357: CALL_OW 72
9361: AND
9362: PUSH
9363: LD_VAR 0 41
9367: AND
9368: IFFALSE 9483
// for i := 1 to scientists do
9370: LD_ADDR_VAR 0 14
9374: PUSH
9375: DOUBLE
9376: LD_INT 1
9378: DEC
9379: ST_TO_ADDR
9380: LD_VAR 0 23
9384: PUSH
9385: FOR_TO
9386: IFFALSE 9481
// if GetTag ( scientists [ i ] ) = 1 and not HasTask ( scientists [ i ] ) and not IsInUnit ( scientists [ i ] ) then
9388: LD_VAR 0 23
9392: PUSH
9393: LD_VAR 0 14
9397: ARRAY
9398: PPUSH
9399: CALL_OW 110
9403: PUSH
9404: LD_INT 1
9406: EQUAL
9407: PUSH
9408: LD_VAR 0 23
9412: PUSH
9413: LD_VAR 0 14
9417: ARRAY
9418: PPUSH
9419: CALL_OW 314
9423: NOT
9424: AND
9425: PUSH
9426: LD_VAR 0 23
9430: PUSH
9431: LD_VAR 0 14
9435: ARRAY
9436: PPUSH
9437: CALL_OW 310
9441: NOT
9442: AND
9443: IFFALSE 9479
// ComEnterUnit ( scientists [ i ] , lab [ rand ( 1 , lab ) ] ) ;
9445: LD_VAR 0 23
9449: PUSH
9450: LD_VAR 0 14
9454: ARRAY
9455: PPUSH
9456: LD_VAR 0 41
9460: PUSH
9461: LD_INT 1
9463: PPUSH
9464: LD_VAR 0 41
9468: PPUSH
9469: CALL_OW 12
9473: ARRAY
9474: PPUSH
9475: CALL_OW 120
9479: GO 9385
9481: POP
9482: POP
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , us_bulldozer ] ] ) then
9483: LD_INT 22
9485: PUSH
9486: LD_VAR 0 1
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PUSH
9495: LD_INT 34
9497: PUSH
9498: LD_INT 14
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PPUSH
9509: CALL_OW 69
9513: NOT
9514: IFFALSE 9541
// AddComConstruct ( factory [ 1 ] , us_heavy_tracked , engine_combustion , control_remote , us_bulldozer ) ;
9516: LD_VAR 0 40
9520: PUSH
9521: LD_INT 1
9523: ARRAY
9524: PPUSH
9525: LD_INT 4
9527: PPUSH
9528: LD_INT 1
9530: PPUSH
9531: LD_INT 2
9533: PPUSH
9534: LD_INT 14
9536: PPUSH
9537: CALL_OW 185
// if vehicles < vehiclesAmount and factory then
9541: LD_VAR 0 25
9545: PUSH
9546: LD_VAR 0 8
9550: LESS
9551: PUSH
9552: LD_VAR 0 40
9556: AND
9557: IFFALSE 9805
// begin tmp = vehiclesAmount - vehicles ;
9559: LD_ADDR_VAR 0 16
9563: PUSH
9564: LD_VAR 0 8
9568: PUSH
9569: LD_VAR 0 25
9573: MINUS
9574: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
9575: LD_ADDR_VAR 0 32
9579: PUSH
9580: LD_VAR 0 1
9584: PPUSH
9585: LD_VAR 0 2
9589: PPUSH
9590: CALL 14415 0 2
9594: ST_TO_ADDR
// for i := 1 to tmp do
9595: LD_ADDR_VAR 0 14
9599: PUSH
9600: DOUBLE
9601: LD_INT 1
9603: DEC
9604: ST_TO_ADDR
9605: LD_VAR 0 16
9609: PUSH
9610: FOR_TO
9611: IFFALSE 9801
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
9613: LD_ADDR_VAR 0 16
9617: PUSH
9618: LD_VAR 0 32
9622: PUSH
9623: LD_INT 1
9625: PPUSH
9626: LD_VAR 0 32
9630: PPUSH
9631: CALL_OW 12
9635: ARRAY
9636: ST_TO_ADDR
// if tmp in [ 6 , 34 , 14 , 71 , 47 ] then
9637: LD_VAR 0 16
9641: PUSH
9642: LD_INT 6
9644: PUSH
9645: LD_INT 34
9647: PUSH
9648: LD_INT 14
9650: PUSH
9651: LD_INT 71
9653: PUSH
9654: LD_INT 47
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: IN
9664: IFFALSE 9702
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
9666: LD_ADDR_VAR 0 33
9670: PUSH
9671: LD_INT 4
9673: PUSH
9674: EMPTY
9675: LIST
9676: PUSH
9677: LD_INT 14
9679: PUSH
9680: EMPTY
9681: LIST
9682: PUSH
9683: LD_INT 24
9685: PUSH
9686: EMPTY
9687: LIST
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: LIST
9693: PUSH
9694: LD_VAR 0 2
9698: ARRAY
9699: ST_TO_ADDR
9700: GO 9756
// chassis = [ [ us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
9702: LD_ADDR_VAR 0 33
9706: PUSH
9707: LD_INT 3
9709: PUSH
9710: LD_INT 4
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: PUSH
9717: LD_INT 13
9719: PUSH
9720: LD_INT 14
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: PUSH
9727: LD_INT 21
9729: PUSH
9730: LD_INT 23
9732: PUSH
9733: LD_INT 24
9735: PUSH
9736: LD_INT 22
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: LIST
9749: PUSH
9750: LD_VAR 0 2
9754: ARRAY
9755: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_remote , tmp ) ;
9756: LD_VAR 0 40
9760: PUSH
9761: LD_INT 1
9763: ARRAY
9764: PPUSH
9765: LD_VAR 0 33
9769: PUSH
9770: LD_INT 1
9772: PPUSH
9773: LD_VAR 0 33
9777: PPUSH
9778: CALL_OW 12
9782: ARRAY
9783: PPUSH
9784: LD_INT 1
9786: PPUSH
9787: LD_INT 2
9789: PPUSH
9790: LD_VAR 0 16
9794: PPUSH
9795: CALL_OW 185
// end ;
9799: GO 9610
9801: POP
9802: POP
// end else
9803: GO 9818
// ComCancel ( factory [ 1 ] ) ;
9805: LD_VAR 0 40
9809: PUSH
9810: LD_INT 1
9812: ARRAY
9813: PPUSH
9814: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ] ] ) do
9818: LD_ADDR_VAR 0 24
9822: PUSH
9823: LD_VAR 0 4
9827: PPUSH
9828: LD_INT 22
9830: PUSH
9831: LD_VAR 0 1
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PUSH
9840: LD_INT 21
9842: PUSH
9843: LD_INT 2
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 50
9852: PUSH
9853: EMPTY
9854: LIST
9855: PUSH
9856: LD_INT 3
9858: PUSH
9859: LD_INT 2
9861: PUSH
9862: LD_INT 34
9864: PUSH
9865: LD_INT 12
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PUSH
9872: LD_INT 34
9874: PUSH
9875: LD_INT 51
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PUSH
9882: LD_INT 34
9884: PUSH
9885: LD_INT 32
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: PUSH
9892: LD_INT 34
9894: PUSH
9895: LD_INT 31
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: PPUSH
9919: CALL_OW 70
9923: PUSH
9924: FOR_IN
9925: IFFALSE 10080
// begin vehicleInList = false ;
9927: LD_ADDR_VAR 0 26
9931: PUSH
9932: LD_INT 0
9934: ST_TO_ADDR
// for i := 1 to vehicles do
9935: LD_ADDR_VAR 0 14
9939: PUSH
9940: DOUBLE
9941: LD_INT 1
9943: DEC
9944: ST_TO_ADDR
9945: LD_VAR 0 25
9949: PUSH
9950: FOR_TO
9951: IFFALSE 9981
// if vehicle in vehicles [ i ] then
9953: LD_VAR 0 24
9957: PUSH
9958: LD_VAR 0 25
9962: PUSH
9963: LD_VAR 0 14
9967: ARRAY
9968: IN
9969: IFFALSE 9979
// vehicleInList = true ;
9971: LD_ADDR_VAR 0 26
9975: PUSH
9976: LD_INT 1
9978: ST_TO_ADDR
9979: GO 9950
9981: POP
9982: POP
// if not vehicleInList then
9983: LD_VAR 0 26
9987: NOT
9988: IFFALSE 10078
// begin if vehicles < vehiclesToAttackAmount then
9990: LD_VAR 0 25
9994: PUSH
9995: LD_VAR 0 10
9999: LESS
10000: IFFALSE 10041
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] ] ] else
10002: LD_ADDR_VAR 0 25
10006: PUSH
10007: LD_VAR 0 25
10011: PUSH
10012: LD_VAR 0 24
10016: PUSH
10017: LD_VAR 0 24
10021: PPUSH
10022: CALL_OW 313
10026: PUSH
10027: LD_INT 1
10029: ARRAY
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PUSH
10035: EMPTY
10036: LIST
10037: ADD
10038: ST_TO_ADDR
10039: GO 10078
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] ] ] ;
10041: LD_ADDR_VAR 0 25
10045: PUSH
10046: LD_VAR 0 25
10050: PUSH
10051: LD_VAR 0 24
10055: PUSH
10056: LD_VAR 0 24
10060: PPUSH
10061: CALL_OW 313
10065: PUSH
10066: LD_INT 1
10068: ARRAY
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: PUSH
10074: EMPTY
10075: LIST
10076: ADD
10077: ST_TO_ADDR
// end ; end ;
10078: GO 9924
10080: POP
10081: POP
// for enemyUnits in FilterAllUnits ( [ f_enemy , side ] ) do
10082: LD_ADDR_VAR 0 50
10086: PUSH
10087: LD_INT 81
10089: PUSH
10090: LD_VAR 0 1
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PPUSH
10099: CALL_OW 69
10103: PUSH
10104: FOR_IN
10105: IFFALSE 10623
// begin offensiveUnits = [ ] ;
10107: LD_ADDR_VAR 0 27
10111: PUSH
10112: EMPTY
10113: ST_TO_ADDR
// offensiveReadyCounter = 0 ;
10114: LD_ADDR_VAR 0 28
10118: PUSH
10119: LD_INT 0
10121: ST_TO_ADDR
// for i := 1 to vehicles do
10122: LD_ADDR_VAR 0 14
10126: PUSH
10127: DOUBLE
10128: LD_INT 1
10130: DEC
10131: ST_TO_ADDR
10132: LD_VAR 0 25
10136: PUSH
10137: FOR_TO
10138: IFFALSE 10346
// if GetTag ( vehicles [ i ] [ 1 ] ) = 2 then
10140: LD_VAR 0 25
10144: PUSH
10145: LD_VAR 0 14
10149: ARRAY
10150: PUSH
10151: LD_INT 1
10153: ARRAY
10154: PPUSH
10155: CALL_OW 110
10159: PUSH
10160: LD_INT 2
10162: EQUAL
10163: IFFALSE 10344
// begin if GetLives ( vehicles [ i ] [ 1 ] ) > 650 then
10165: LD_VAR 0 25
10169: PUSH
10170: LD_VAR 0 14
10174: ARRAY
10175: PUSH
10176: LD_INT 1
10178: ARRAY
10179: PPUSH
10180: CALL_OW 256
10184: PUSH
10185: LD_INT 650
10187: GREATER
10188: IFFALSE 10204
// offensiveReadyCounter = offensiveReadyCounter + 1 ;
10190: LD_ADDR_VAR 0 28
10194: PUSH
10195: LD_VAR 0 28
10199: PUSH
10200: LD_INT 1
10202: PLUS
10203: ST_TO_ADDR
// if IsInArea ( vehicles [ i ] [ 1 ] , baseArea ) then
10204: LD_VAR 0 25
10208: PUSH
10209: LD_VAR 0 14
10213: ARRAY
10214: PUSH
10215: LD_INT 1
10217: ARRAY
10218: PPUSH
10219: LD_VAR 0 4
10223: PPUSH
10224: CALL_OW 308
10228: IFFALSE 10256
// offensiveUnits = offensiveUnits ^ vehicles [ i ] [ 1 ] ;
10230: LD_ADDR_VAR 0 27
10234: PUSH
10235: LD_VAR 0 27
10239: PUSH
10240: LD_VAR 0 25
10244: PUSH
10245: LD_VAR 0 14
10249: ARRAY
10250: PUSH
10251: LD_INT 1
10253: ARRAY
10254: ADD
10255: ST_TO_ADDR
// for j = 1 to personel do
10256: LD_ADDR_VAR 0 15
10260: PUSH
10261: DOUBLE
10262: LD_INT 1
10264: DEC
10265: ST_TO_ADDR
10266: LD_VAR 0 19
10270: PUSH
10271: FOR_TO
10272: IFFALSE 10342
// if personel [ j ] = vehicles [ i ] [ 2 ] then
10274: LD_VAR 0 19
10278: PUSH
10279: LD_VAR 0 15
10283: ARRAY
10284: PUSH
10285: LD_VAR 0 25
10289: PUSH
10290: LD_VAR 0 14
10294: ARRAY
10295: PUSH
10296: LD_INT 2
10298: ARRAY
10299: EQUAL
10300: IFFALSE 10340
// personel = ReplaceIn ( personel , [ j , personel [ j ] ] , 3 ) ;
10302: LD_ADDR_VAR 0 19
10306: PUSH
10307: LD_VAR 0 19
10311: PPUSH
10312: LD_VAR 0 15
10316: PUSH
10317: LD_VAR 0 19
10321: PUSH
10322: LD_VAR 0 15
10326: ARRAY
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PPUSH
10332: LD_INT 3
10334: PPUSH
10335: CALL 48164 0 3
10339: ST_TO_ADDR
10340: GO 10271
10342: POP
10343: POP
// end ;
10344: GO 10137
10346: POP
10347: POP
// if vehiclesToAttackAmount <= offensiveReadyCounter then
10348: LD_VAR 0 10
10352: PUSH
10353: LD_VAR 0 28
10357: LESSEQUAL
10358: IFFALSE 10621
// begin for i := 1 to offensiveUnits do
10360: LD_ADDR_VAR 0 14
10364: PUSH
10365: DOUBLE
10366: LD_INT 1
10368: DEC
10369: ST_TO_ADDR
10370: LD_VAR 0 27
10374: PUSH
10375: FOR_TO
10376: IFFALSE 10619
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , offensiveUnits [ i ] ) ;
10378: LD_ADDR_VAR 0 29
10382: PUSH
10383: LD_INT 81
10385: PUSH
10386: LD_INT 1
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL_OW 69
10397: PPUSH
10398: LD_VAR 0 27
10402: PUSH
10403: LD_VAR 0 14
10407: ARRAY
10408: PPUSH
10409: CALL_OW 74
10413: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , offensiveUnits [ i ] ) ;
10414: LD_ADDR_VAR 0 30
10418: PUSH
10419: LD_INT 81
10421: PUSH
10422: LD_INT 1
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: LD_INT 2
10431: PUSH
10432: LD_INT 59
10434: PUSH
10435: EMPTY
10436: LIST
10437: PUSH
10438: LD_INT 21
10440: PUSH
10441: LD_INT 1
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PUSH
10448: LD_INT 21
10450: PUSH
10451: LD_INT 2
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: EMPTY
10469: LIST
10470: PPUSH
10471: CALL_OW 69
10475: PPUSH
10476: LD_VAR 0 27
10480: PUSH
10481: LD_VAR 0 14
10485: ARRAY
10486: PPUSH
10487: CALL_OW 74
10491: ST_TO_ADDR
// if GetDistUnits ( offensiveUnits [ i ] , target1 ) + 9 < GetDistUnits ( offensiveUnits [ i ] , target2 ) then
10492: LD_VAR 0 27
10496: PUSH
10497: LD_VAR 0 14
10501: ARRAY
10502: PPUSH
10503: LD_VAR 0 29
10507: PPUSH
10508: CALL_OW 296
10512: PUSH
10513: LD_INT 9
10515: PLUS
10516: PUSH
10517: LD_VAR 0 27
10521: PUSH
10522: LD_VAR 0 14
10526: ARRAY
10527: PPUSH
10528: LD_VAR 0 30
10532: PPUSH
10533: CALL_OW 296
10537: LESS
10538: IFFALSE 10562
// ComAttackUnit ( offensiveUnits [ i ] , target1 ) else
10540: LD_VAR 0 27
10544: PUSH
10545: LD_VAR 0 14
10549: ARRAY
10550: PPUSH
10551: LD_VAR 0 29
10555: PPUSH
10556: CALL_OW 115
10560: GO 10582
// ComAttackUnit ( offensiveUnits [ i ] , target2 ) ;
10562: LD_VAR 0 27
10566: PUSH
10567: LD_VAR 0 14
10571: ARRAY
10572: PPUSH
10573: LD_VAR 0 30
10577: PPUSH
10578: CALL_OW 115
// AddComAgressiveMove ( offensiveUnits [ i ] , GetX ( enemyUnits ) , GetY ( enemyUnits ) ) ;
10582: LD_VAR 0 27
10586: PUSH
10587: LD_VAR 0 14
10591: ARRAY
10592: PPUSH
10593: LD_VAR 0 50
10597: PPUSH
10598: CALL_OW 250
10602: PPUSH
10603: LD_VAR 0 50
10607: PPUSH
10608: CALL_OW 251
10612: PPUSH
10613: CALL_OW 174
// end ;
10617: GO 10375
10619: POP
10620: POP
// end ; end ;
10621: GO 10104
10623: POP
10624: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
10625: LD_ADDR_VAR 0 50
10629: PUSH
10630: LD_VAR 0 7
10634: PPUSH
10635: LD_INT 81
10637: PUSH
10638: LD_VAR 0 1
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: PPUSH
10647: CALL_OW 70
10651: PUSH
10652: FOR_IN
10653: IFFALSE 10881
// begin defenceUnits = [ ] ;
10655: LD_ADDR_VAR 0 31
10659: PUSH
10660: EMPTY
10661: ST_TO_ADDR
// for i := 1 to personel do
10662: LD_ADDR_VAR 0 14
10666: PUSH
10667: DOUBLE
10668: LD_INT 1
10670: DEC
10671: ST_TO_ADDR
10672: LD_VAR 0 19
10676: PUSH
10677: FOR_TO
10678: IFFALSE 10725
// if GetTag ( personel [ i ] ) = 3 then
10680: LD_VAR 0 19
10684: PUSH
10685: LD_VAR 0 14
10689: ARRAY
10690: PPUSH
10691: CALL_OW 110
10695: PUSH
10696: LD_INT 3
10698: EQUAL
10699: IFFALSE 10723
// defenceUnits = defenceUnits ^ personel [ i ] ;
10701: LD_ADDR_VAR 0 31
10705: PUSH
10706: LD_VAR 0 31
10710: PUSH
10711: LD_VAR 0 19
10715: PUSH
10716: LD_VAR 0 14
10720: ARRAY
10721: ADD
10722: ST_TO_ADDR
10723: GO 10677
10725: POP
10726: POP
// for i := 1 to vehicles do
10727: LD_ADDR_VAR 0 14
10731: PUSH
10732: DOUBLE
10733: LD_INT 1
10735: DEC
10736: ST_TO_ADDR
10737: LD_VAR 0 25
10741: PUSH
10742: FOR_TO
10743: IFFALSE 10798
// if GetTag ( vehicles [ i ] [ 1 ] ) = 3 then
10745: LD_VAR 0 25
10749: PUSH
10750: LD_VAR 0 14
10754: ARRAY
10755: PUSH
10756: LD_INT 1
10758: ARRAY
10759: PPUSH
10760: CALL_OW 110
10764: PUSH
10765: LD_INT 3
10767: EQUAL
10768: IFFALSE 10796
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
10770: LD_ADDR_VAR 0 31
10774: PUSH
10775: LD_VAR 0 31
10779: PUSH
10780: LD_VAR 0 25
10784: PUSH
10785: LD_VAR 0 14
10789: ARRAY
10790: PUSH
10791: LD_INT 1
10793: ARRAY
10794: ADD
10795: ST_TO_ADDR
10796: GO 10742
10798: POP
10799: POP
// ComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
10800: LD_VAR 0 31
10804: PPUSH
10805: LD_INT 3
10807: PUSH
10808: LD_INT 60
10810: PUSH
10811: EMPTY
10812: LIST
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PPUSH
10818: CALL_OW 72
10822: PPUSH
10823: LD_VAR 0 50
10827: PPUSH
10828: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , GetX ( enemyUnits ) , GetY ( enemyUnits ) ) ;
10832: LD_VAR 0 31
10836: PPUSH
10837: LD_INT 3
10839: PUSH
10840: LD_INT 60
10842: PUSH
10843: EMPTY
10844: LIST
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PPUSH
10850: CALL_OW 72
10854: PPUSH
10855: LD_VAR 0 50
10859: PPUSH
10860: CALL_OW 250
10864: PPUSH
10865: LD_VAR 0 50
10869: PPUSH
10870: CALL_OW 251
10874: PPUSH
10875: CALL_OW 174
// end ;
10879: GO 10652
10881: POP
10882: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
10883: LD_ADDR_VAR 0 45
10887: PUSH
10888: LD_INT 22
10890: PUSH
10891: LD_VAR 0 1
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: PUSH
10900: LD_INT 2
10902: PUSH
10903: LD_INT 30
10905: PUSH
10906: LD_INT 31
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: LD_INT 30
10915: PUSH
10916: LD_INT 32
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: PUSH
10923: LD_INT 30
10925: PUSH
10926: LD_INT 33
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PUSH
10933: LD_INT 30
10935: PUSH
10936: LD_INT 4
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: LD_INT 30
10945: PUSH
10946: LD_INT 5
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: PPUSH
10965: CALL_OW 69
10969: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
10970: LD_ADDR_VAR 0 46
10974: PUSH
10975: LD_INT 81
10977: PUSH
10978: LD_VAR 0 1
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PUSH
10987: LD_INT 21
10989: PUSH
10990: LD_INT 3
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: PUSH
10997: LD_INT 58
10999: PUSH
11000: EMPTY
11001: LIST
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: PPUSH
11008: CALL_OW 69
11012: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
11013: LD_VAR 0 45
11017: PUSH
11018: LD_VAR 0 46
11022: AND
11023: IFFALSE 11093
// for i in attackBuildings do
11025: LD_ADDR_VAR 0 14
11029: PUSH
11030: LD_VAR 0 45
11034: PUSH
11035: FOR_IN
11036: IFFALSE 11091
// for j in enemyBuildings do
11038: LD_ADDR_VAR 0 15
11042: PUSH
11043: LD_VAR 0 46
11047: PUSH
11048: FOR_IN
11049: IFFALSE 11087
// if GetDistUnits ( i , j ) < 12 then
11051: LD_VAR 0 14
11055: PPUSH
11056: LD_VAR 0 15
11060: PPUSH
11061: CALL_OW 296
11065: PUSH
11066: LD_INT 12
11068: LESS
11069: IFFALSE 11085
// ComAttackUnit ( i , j ) ;
11071: LD_VAR 0 14
11075: PPUSH
11076: LD_VAR 0 15
11080: PPUSH
11081: CALL_OW 115
11085: GO 11048
11087: POP
11088: POP
11089: GO 11035
11091: POP
11092: POP
// if canRebuild then
11093: LD_VAR 0 12
11097: IFFALSE 11766
// begin tmp = false ;
11099: LD_ADDR_VAR 0 16
11103: PUSH
11104: LD_INT 0
11106: ST_TO_ADDR
// unit = false ;
11107: LD_ADDR_VAR 0 18
11111: PUSH
11112: LD_INT 0
11114: ST_TO_ADDR
// for destroyedBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 250 ] ] ] ) do
11115: LD_ADDR_VAR 0 36
11119: PUSH
11120: LD_VAR 0 4
11124: PPUSH
11125: LD_INT 22
11127: PUSH
11128: LD_VAR 0 1
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 21
11139: PUSH
11140: LD_INT 3
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: LD_INT 3
11149: PUSH
11150: LD_INT 24
11152: PUSH
11153: LD_INT 250
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: LIST
11168: PPUSH
11169: CALL_OW 70
11173: PUSH
11174: FOR_IN
11175: IFFALSE 11277
// begin unit = destroyedBuilding ;
11177: LD_ADDR_VAR 0 18
11181: PUSH
11182: LD_VAR 0 36
11186: ST_TO_ADDR
// for i := 1 to destroyedBuildings / 4 do
11187: LD_ADDR_VAR 0 14
11191: PUSH
11192: DOUBLE
11193: LD_INT 1
11195: DEC
11196: ST_TO_ADDR
11197: LD_VAR 0 35
11201: PUSH
11202: LD_INT 4
11204: DIVREAL
11205: PUSH
11206: FOR_TO
11207: IFFALSE 11273
// if destroyedBuildings [ i + 1 ] = GetX ( destroyedBuilding ) and destroyedBuildings [ i + 2 ] = GetY ( destroyedBuilding ) then
11209: LD_VAR 0 35
11213: PUSH
11214: LD_VAR 0 14
11218: PUSH
11219: LD_INT 1
11221: PLUS
11222: ARRAY
11223: PUSH
11224: LD_VAR 0 36
11228: PPUSH
11229: CALL_OW 250
11233: EQUAL
11234: PUSH
11235: LD_VAR 0 35
11239: PUSH
11240: LD_VAR 0 14
11244: PUSH
11245: LD_INT 2
11247: PLUS
11248: ARRAY
11249: PUSH
11250: LD_VAR 0 36
11254: PPUSH
11255: CALL_OW 251
11259: EQUAL
11260: AND
11261: IFFALSE 11271
// tmp = true ;
11263: LD_ADDR_VAR 0 16
11267: PUSH
11268: LD_INT 1
11270: ST_TO_ADDR
11271: GO 11206
11273: POP
11274: POP
// end ;
11275: GO 11174
11277: POP
11278: POP
// if not tmp and unit then
11279: LD_VAR 0 16
11283: NOT
11284: PUSH
11285: LD_VAR 0 18
11289: AND
11290: IFFALSE 11550
// begin if GetBType ( unit ) = 1 then
11292: LD_VAR 0 18
11296: PPUSH
11297: CALL_OW 266
11301: PUSH
11302: LD_INT 1
11304: EQUAL
11305: IFFALSE 11359
// destroyedBuildings = destroyedBuildings ^ [ 0 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11307: LD_ADDR_VAR 0 35
11311: PUSH
11312: LD_VAR 0 35
11316: PUSH
11317: LD_INT 0
11319: PUSH
11320: LD_VAR 0 18
11324: PPUSH
11325: CALL_OW 250
11329: PUSH
11330: LD_VAR 0 18
11334: PPUSH
11335: CALL_OW 251
11339: PUSH
11340: LD_VAR 0 18
11344: PPUSH
11345: CALL_OW 254
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: ADD
11356: ST_TO_ADDR
11357: GO 11550
// if GetBType ( unit ) = 3 then
11359: LD_VAR 0 18
11363: PPUSH
11364: CALL_OW 266
11368: PUSH
11369: LD_INT 3
11371: EQUAL
11372: IFFALSE 11426
// destroyedBuildings = destroyedBuildings ^ [ 2 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11374: LD_ADDR_VAR 0 35
11378: PUSH
11379: LD_VAR 0 35
11383: PUSH
11384: LD_INT 2
11386: PUSH
11387: LD_VAR 0 18
11391: PPUSH
11392: CALL_OW 250
11396: PUSH
11397: LD_VAR 0 18
11401: PPUSH
11402: CALL_OW 251
11406: PUSH
11407: LD_VAR 0 18
11411: PPUSH
11412: CALL_OW 254
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: ADD
11423: ST_TO_ADDR
11424: GO 11550
// if GetBType ( unit ) = 5 then
11426: LD_VAR 0 18
11430: PPUSH
11431: CALL_OW 266
11435: PUSH
11436: LD_INT 5
11438: EQUAL
11439: IFFALSE 11493
// destroyedBuildings = destroyedBuildings ^ [ 4 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11441: LD_ADDR_VAR 0 35
11445: PUSH
11446: LD_VAR 0 35
11450: PUSH
11451: LD_INT 4
11453: PUSH
11454: LD_VAR 0 18
11458: PPUSH
11459: CALL_OW 250
11463: PUSH
11464: LD_VAR 0 18
11468: PPUSH
11469: CALL_OW 251
11473: PUSH
11474: LD_VAR 0 18
11478: PPUSH
11479: CALL_OW 254
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: ADD
11490: ST_TO_ADDR
11491: GO 11550
// destroyedBuildings = destroyedBuildings ^ [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ;
11493: LD_ADDR_VAR 0 35
11497: PUSH
11498: LD_VAR 0 35
11502: PUSH
11503: LD_VAR 0 18
11507: PPUSH
11508: CALL_OW 266
11512: PUSH
11513: LD_VAR 0 18
11517: PPUSH
11518: CALL_OW 250
11522: PUSH
11523: LD_VAR 0 18
11527: PPUSH
11528: CALL_OW 251
11532: PUSH
11533: LD_VAR 0 18
11537: PPUSH
11538: CALL_OW 254
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: ADD
11549: ST_TO_ADDR
// end ; for constructedBuilding in constructedBuildings do
11550: LD_ADDR_VAR 0 37
11554: PUSH
11555: LD_VAR 0 38
11559: PUSH
11560: FOR_IN
11561: IFFALSE 11764
// for i := 1 to destroyedBuildings / 4 do
11563: LD_ADDR_VAR 0 14
11567: PUSH
11568: DOUBLE
11569: LD_INT 1
11571: DEC
11572: ST_TO_ADDR
11573: LD_VAR 0 35
11577: PUSH
11578: LD_INT 4
11580: DIVREAL
11581: PUSH
11582: FOR_TO
11583: IFFALSE 11760
// if destroyedBuildings [ i + 1 ] = GetX ( constructedBuilding ) and destroyedBuildings [ i + 2 ] = GetY ( constructedBuilding ) and IsOK ( constructedBuilding ) then
11585: LD_VAR 0 35
11589: PUSH
11590: LD_VAR 0 14
11594: PUSH
11595: LD_INT 1
11597: PLUS
11598: ARRAY
11599: PUSH
11600: LD_VAR 0 37
11604: PPUSH
11605: CALL_OW 250
11609: EQUAL
11610: PUSH
11611: LD_VAR 0 35
11615: PUSH
11616: LD_VAR 0 14
11620: PUSH
11621: LD_INT 2
11623: PLUS
11624: ARRAY
11625: PUSH
11626: LD_VAR 0 37
11630: PPUSH
11631: CALL_OW 251
11635: EQUAL
11636: AND
11637: PUSH
11638: LD_VAR 0 37
11642: PPUSH
11643: CALL_OW 302
11647: AND
11648: IFFALSE 11758
// begin destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11650: LD_ADDR_VAR 0 35
11654: PUSH
11655: LD_VAR 0 35
11659: PPUSH
11660: LD_INT 1
11662: PPUSH
11663: CALL_OW 3
11667: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11668: LD_ADDR_VAR 0 35
11672: PUSH
11673: LD_VAR 0 35
11677: PPUSH
11678: LD_INT 1
11680: PPUSH
11681: CALL_OW 3
11685: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11686: LD_ADDR_VAR 0 35
11690: PUSH
11691: LD_VAR 0 35
11695: PPUSH
11696: LD_INT 1
11698: PPUSH
11699: CALL_OW 3
11703: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11704: LD_ADDR_VAR 0 35
11708: PUSH
11709: LD_VAR 0 35
11713: PPUSH
11714: LD_INT 1
11716: PPUSH
11717: CALL_OW 3
11721: ST_TO_ADDR
// if GetType ( constructedBuilding ) in [ b_bunker , b_turret ] then
11722: LD_VAR 0 37
11726: PPUSH
11727: CALL_OW 247
11731: PUSH
11732: LD_INT 32
11734: PUSH
11735: LD_INT 33
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: IN
11742: IFFALSE 11758
// AddComPlaceWeapon ( constructedBuilding , weapons ) ;
11744: LD_VAR 0 37
11748: PPUSH
11749: LD_VAR 0 32
11753: PPUSH
11754: CALL_OW 208
// end ;
11758: GO 11582
11760: POP
11761: POP
11762: GO 11560
11764: POP
11765: POP
// end ; wait ( 0 0$01 ) ;
11766: LD_INT 35
11768: PPUSH
11769: CALL_OW 67
// until not personel ;
11773: LD_VAR 0 19
11777: NOT
11778: IFFALSE 5471
// end ; end_of_file
11780: LD_VAR 0 13
11784: RET
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
11785: LD_INT 0
11787: PPUSH
11788: PPUSH
// if debugMode then
11789: LD_EXP 33
11793: IFFALSE 11810
// unit := NewCharacter ( ident ) ;
11795: LD_ADDR_VAR 0 5
11799: PUSH
11800: LD_VAR 0 1
11804: PPUSH
11805: CALL_OW 25
11809: ST_TO_ADDR
// if exist_mode and not debugMode then
11810: LD_VAR 0 2
11814: PUSH
11815: LD_EXP 33
11819: NOT
11820: AND
11821: IFFALSE 11846
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
11823: LD_ADDR_VAR 0 5
11827: PUSH
11828: LD_EXP 32
11832: PUSH
11833: LD_VAR 0 1
11837: STR
11838: PPUSH
11839: CALL_OW 34
11843: ST_TO_ADDR
11844: GO 11868
// if not debugMode then
11846: LD_EXP 33
11850: NOT
11851: IFFALSE 11868
// unit := NewCharacter ( ident ) ;
11853: LD_ADDR_VAR 0 5
11857: PUSH
11858: LD_VAR 0 1
11862: PPUSH
11863: CALL_OW 25
11867: ST_TO_ADDR
// if class then
11868: LD_VAR 0 3
11872: IFFALSE 11888
// SetClass ( unit , class ) ;
11874: LD_VAR 0 5
11878: PPUSH
11879: LD_VAR 0 3
11883: PPUSH
11884: CALL_OW 336
// result := unit ;
11888: LD_ADDR_VAR 0 4
11892: PUSH
11893: LD_VAR 0 5
11897: ST_TO_ADDR
// end ;
11898: LD_VAR 0 4
11902: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
11903: LD_INT 0
11905: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
11906: LD_VAR 0 1
11910: PPUSH
11911: CALL_OW 255
11915: PUSH
11916: LD_VAR 0 3
11920: EQUAL
11921: PUSH
11922: LD_VAR 0 1
11926: PPUSH
11927: CALL_OW 302
11931: AND
11932: IFFALSE 11954
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
11934: LD_VAR 0 1
11938: PPUSH
11939: LD_EXP 31
11943: PUSH
11944: LD_VAR 0 2
11948: STR
11949: PPUSH
11950: CALL_OW 38
// end ;
11954: LD_VAR 0 4
11958: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
11959: LD_INT 0
11961: PPUSH
11962: PPUSH
11963: PPUSH
// resultCharactersToSave = [ ] ;
11964: LD_ADDR_VAR 0 6
11968: PUSH
11969: EMPTY
11970: ST_TO_ADDR
// for unit in characters do
11971: LD_ADDR_VAR 0 5
11975: PUSH
11976: LD_VAR 0 1
11980: PUSH
11981: FOR_IN
11982: IFFALSE 12030
// if GetSide ( unit ) = side and IsOK ( unit ) then
11984: LD_VAR 0 5
11988: PPUSH
11989: CALL_OW 255
11993: PUSH
11994: LD_VAR 0 3
11998: EQUAL
11999: PUSH
12000: LD_VAR 0 5
12004: PPUSH
12005: CALL_OW 302
12009: AND
12010: IFFALSE 12028
// resultCharactersToSave = resultCharactersToSave ^ unit ;
12012: LD_ADDR_VAR 0 6
12016: PUSH
12017: LD_VAR 0 6
12021: PUSH
12022: LD_VAR 0 5
12026: ADD
12027: ST_TO_ADDR
12028: GO 11981
12030: POP
12031: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
12032: LD_VAR 0 6
12036: PPUSH
12037: LD_EXP 31
12041: PUSH
12042: LD_VAR 0 2
12046: STR
12047: PPUSH
12048: CALL_OW 38
// end ;
12052: LD_VAR 0 4
12056: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
12057: LD_INT 0
12059: PPUSH
12060: PPUSH
// for unit in units do
12061: LD_ADDR_VAR 0 5
12065: PUSH
12066: LD_VAR 0 1
12070: PUSH
12071: FOR_IN
12072: IFFALSE 12095
// PlaceUnitArea ( unit , area , spawnMode ) ;
12074: LD_VAR 0 5
12078: PPUSH
12079: LD_VAR 0 2
12083: PPUSH
12084: LD_VAR 0 3
12088: PPUSH
12089: CALL_OW 49
12093: GO 12071
12095: POP
12096: POP
// end ;
12097: LD_VAR 0 4
12101: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
12102: LD_INT 0
12104: PPUSH
12105: PPUSH
12106: PPUSH
12107: PPUSH
// units = characters ;
12108: LD_ADDR_VAR 0 9
12112: PUSH
12113: LD_VAR 0 1
12117: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod , Kirilenkova ] ;
12118: LD_ADDR_VAR 0 9
12122: PUSH
12123: LD_VAR 0 9
12127: PUSH
12128: LD_EXP 39
12132: PUSH
12133: LD_EXP 40
12137: PUSH
12138: LD_EXP 41
12142: PUSH
12143: LD_EXP 42
12147: PUSH
12148: LD_EXP 43
12152: PUSH
12153: LD_EXP 44
12157: PUSH
12158: LD_EXP 45
12162: PUSH
12163: LD_EXP 46
12167: PUSH
12168: LD_EXP 51
12172: PUSH
12173: LD_EXP 48
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: DIFF
12190: ST_TO_ADDR
// if not units and not canTalkHero then
12191: LD_VAR 0 9
12195: NOT
12196: PUSH
12197: LD_VAR 0 5
12201: NOT
12202: AND
12203: IFFALSE 12207
// exit ;
12205: GO 12380
// if not units then
12207: LD_VAR 0 9
12211: NOT
12212: IFFALSE 12233
// units = characters diff [ Burlak ] ;
12214: LD_ADDR_VAR 0 9
12218: PUSH
12219: LD_VAR 0 1
12223: PUSH
12224: LD_EXP 39
12228: PUSH
12229: EMPTY
12230: LIST
12231: DIFF
12232: ST_TO_ADDR
// if not units and canTalkHero then
12233: LD_VAR 0 9
12237: NOT
12238: PUSH
12239: LD_VAR 0 5
12243: AND
12244: IFFALSE 12248
// exit ;
12246: GO 12380
// speaker := units [ rand ( 1 , units ) ] ;
12248: LD_ADDR_VAR 0 8
12252: PUSH
12253: LD_VAR 0 9
12257: PUSH
12258: LD_INT 1
12260: PPUSH
12261: LD_VAR 0 9
12265: PPUSH
12266: CALL_OW 12
12270: ARRAY
12271: ST_TO_ADDR
// if radio then
12272: LD_VAR 0 4
12276: IFFALSE 12325
// begin if GetSex ( speaker ) = sex_male then
12278: LD_VAR 0 8
12282: PPUSH
12283: CALL_OW 258
12287: PUSH
12288: LD_INT 1
12290: EQUAL
12291: IFFALSE 12309
// SayRadio ( speaker , dialogMID ) else
12293: LD_VAR 0 8
12297: PPUSH
12298: LD_VAR 0 2
12302: PPUSH
12303: CALL_OW 94
12307: GO 12323
// SayRadio ( speaker , dialogFID ) ;
12309: LD_VAR 0 8
12313: PPUSH
12314: LD_VAR 0 3
12318: PPUSH
12319: CALL_OW 94
// end else
12323: GO 12370
// begin if GetSex ( speaker ) = sex_male then
12325: LD_VAR 0 8
12329: PPUSH
12330: CALL_OW 258
12334: PUSH
12335: LD_INT 1
12337: EQUAL
12338: IFFALSE 12356
// Say ( speaker , dialogMID ) else
12340: LD_VAR 0 8
12344: PPUSH
12345: LD_VAR 0 2
12349: PPUSH
12350: CALL_OW 88
12354: GO 12370
// Say ( speaker , dialogFID ) ;
12356: LD_VAR 0 8
12360: PPUSH
12361: LD_VAR 0 3
12365: PPUSH
12366: CALL_OW 88
// end ; result := speaker ;
12370: LD_ADDR_VAR 0 6
12374: PUSH
12375: LD_VAR 0 8
12379: ST_TO_ADDR
// end ;
12380: LD_VAR 0 6
12384: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
12385: LD_INT 0
12387: PPUSH
12388: PPUSH
// dir := GetDir ( bunker ) - 3 ;
12389: LD_ADDR_VAR 0 4
12393: PUSH
12394: LD_VAR 0 2
12398: PPUSH
12399: CALL_OW 254
12403: PUSH
12404: LD_INT 3
12406: MINUS
12407: ST_TO_ADDR
// if dir < 0 then
12408: LD_VAR 0 4
12412: PUSH
12413: LD_INT 0
12415: LESS
12416: IFFALSE 12432
// dir := 6 + dir ;
12418: LD_ADDR_VAR 0 4
12422: PUSH
12423: LD_INT 6
12425: PUSH
12426: LD_VAR 0 4
12430: PLUS
12431: ST_TO_ADDR
// SetDir ( un , dir ) ;
12432: LD_VAR 0 1
12436: PPUSH
12437: LD_VAR 0 4
12441: PPUSH
12442: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
12446: LD_VAR 0 1
12450: PPUSH
12451: LD_VAR 0 2
12455: PPUSH
12456: CALL_OW 52
// result = un ;
12460: LD_ADDR_VAR 0 3
12464: PUSH
12465: LD_VAR 0 1
12469: ST_TO_ADDR
// end ;
12470: LD_VAR 0 3
12474: RET
// export function AddComCaptureBuilding ( engs , building ) ; var eng ; begin
12475: LD_INT 0
12477: PPUSH
12478: PPUSH
// for eng in engs do
12479: LD_ADDR_VAR 0 4
12483: PUSH
12484: LD_VAR 0 1
12488: PUSH
12489: FOR_IN
12490: IFFALSE 12607
// if GetClass ( eng ) = class_engineer and IsOK ( eng ) and building and not GetSide ( building ) = GetSide ( eng ) then
12492: LD_VAR 0 4
12496: PPUSH
12497: CALL_OW 257
12501: PUSH
12502: LD_INT 2
12504: EQUAL
12505: PUSH
12506: LD_VAR 0 4
12510: PPUSH
12511: CALL_OW 302
12515: AND
12516: PUSH
12517: LD_VAR 0 2
12521: AND
12522: PUSH
12523: LD_VAR 0 2
12527: PPUSH
12528: CALL_OW 255
12532: PUSH
12533: LD_VAR 0 4
12537: PPUSH
12538: CALL_OW 255
12542: EQUAL
12543: NOT
12544: AND
12545: IFFALSE 12605
// AddTaskList ( eng , [ [ e , GetX ( building ) , GetY ( building ) , building , 0 , 0 , 0 ] ] ) end ;
12547: LD_VAR 0 4
12551: PPUSH
12552: LD_STRING e
12554: PUSH
12555: LD_VAR 0 2
12559: PPUSH
12560: CALL_OW 250
12564: PUSH
12565: LD_VAR 0 2
12569: PPUSH
12570: CALL_OW 251
12574: PUSH
12575: LD_VAR 0 2
12579: PUSH
12580: LD_INT 0
12582: PUSH
12583: LD_INT 0
12585: PUSH
12586: LD_INT 0
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: PUSH
12598: EMPTY
12599: LIST
12600: PPUSH
12601: CALL_OW 447
12605: GO 12489
12607: POP
12608: POP
12609: LD_VAR 0 3
12613: RET
// export function Delete2D ( tab , firstIndex , secondIndex ) ; var i , list , tabPom ; begin
12614: LD_INT 0
12616: PPUSH
12617: PPUSH
12618: PPUSH
12619: PPUSH
// tabPom := Delete ( tab [ firstIndex ] , secondIndex ) ;
12620: LD_ADDR_VAR 0 7
12624: PUSH
12625: LD_VAR 0 1
12629: PUSH
12630: LD_VAR 0 2
12634: ARRAY
12635: PPUSH
12636: LD_VAR 0 3
12640: PPUSH
12641: CALL_OW 3
12645: ST_TO_ADDR
// tab := Replace ( tab , firstIndex , tabPom ) ;
12646: LD_ADDR_VAR 0 1
12650: PUSH
12651: LD_VAR 0 1
12655: PPUSH
12656: LD_VAR 0 2
12660: PPUSH
12661: LD_VAR 0 7
12665: PPUSH
12666: CALL_OW 1
12670: ST_TO_ADDR
// result := tab ;
12671: LD_ADDR_VAR 0 4
12675: PUSH
12676: LD_VAR 0 1
12680: ST_TO_ADDR
// end ;
12681: LD_VAR 0 4
12685: RET
// export function Nef_PrepareBase ( base_dep , area , name , skill , sources , nation , personel ) ; var i , j , d , b , f , x , un , base , side , buildings , tmp ; begin
12686: LD_INT 0
12688: PPUSH
12689: PPUSH
12690: PPUSH
12691: PPUSH
12692: PPUSH
12693: PPUSH
12694: PPUSH
12695: PPUSH
12696: PPUSH
12697: PPUSH
12698: PPUSH
12699: PPUSH
// result := [ ] ;
12700: LD_ADDR_VAR 0 8
12704: PUSH
12705: EMPTY
12706: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12707: LD_VAR 0 1
12711: PPUSH
12712: CALL_OW 266
12716: PUSH
12717: LD_INT 0
12719: PUSH
12720: LD_INT 1
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: IN
12727: NOT
12728: IFFALSE 12732
// exit ;
12730: GO 14410
// if name then
12732: LD_VAR 0 3
12736: IFFALSE 12752
// SetBName ( base_dep , name ) ;
12738: LD_VAR 0 1
12742: PPUSH
12743: LD_VAR 0 3
12747: PPUSH
12748: CALL_OW 500
// base := GetBase ( base_dep ) ;
12752: LD_ADDR_VAR 0 16
12756: PUSH
12757: LD_VAR 0 1
12761: PPUSH
12762: CALL_OW 274
12766: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12767: LD_ADDR_VAR 0 17
12771: PUSH
12772: LD_VAR 0 1
12776: PPUSH
12777: CALL_OW 255
12781: ST_TO_ADDR
// if sources then
12782: LD_VAR 0 5
12786: IFFALSE 12833
// for i = 1 to 3 do
12788: LD_ADDR_VAR 0 9
12792: PUSH
12793: DOUBLE
12794: LD_INT 1
12796: DEC
12797: ST_TO_ADDR
12798: LD_INT 3
12800: PUSH
12801: FOR_TO
12802: IFFALSE 12831
// AddResourceType ( base , i , sources [ i ] ) ;
12804: LD_VAR 0 16
12808: PPUSH
12809: LD_VAR 0 9
12813: PPUSH
12814: LD_VAR 0 5
12818: PUSH
12819: LD_VAR 0 9
12823: ARRAY
12824: PPUSH
12825: CALL_OW 276
12829: GO 12801
12831: POP
12832: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12833: LD_ADDR_VAR 0 18
12837: PUSH
12838: LD_VAR 0 16
12842: PPUSH
12843: LD_VAR 0 2
12847: PPUSH
12848: LD_INT 1
12850: PPUSH
12851: CALL 50912 0 3
12855: ST_TO_ADDR
// InitHc ;
12856: CALL_OW 19
// InitUc ;
12860: CALL_OW 18
// uc_side := side ;
12864: LD_ADDR_OWVAR 20
12868: PUSH
12869: LD_VAR 0 17
12873: ST_TO_ADDR
// uc_nation := nation ;
12874: LD_ADDR_OWVAR 21
12878: PUSH
12879: LD_VAR 0 6
12883: ST_TO_ADDR
// if buildings then
12884: LD_VAR 0 18
12888: IFFALSE 14269
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12890: LD_ADDR_VAR 0 19
12894: PUSH
12895: LD_VAR 0 18
12899: PPUSH
12900: LD_INT 2
12902: PUSH
12903: LD_INT 30
12905: PUSH
12906: LD_INT 29
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PUSH
12913: LD_INT 30
12915: PUSH
12916: LD_INT 30
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: LIST
12927: PPUSH
12928: CALL_OW 72
12932: ST_TO_ADDR
// if tmp then
12933: LD_VAR 0 19
12937: IFFALSE 12985
// for i in tmp do
12939: LD_ADDR_VAR 0 9
12943: PUSH
12944: LD_VAR 0 19
12948: PUSH
12949: FOR_IN
12950: IFFALSE 12983
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12952: LD_VAR 0 9
12956: PPUSH
12957: CALL_OW 250
12961: PPUSH
12962: LD_VAR 0 9
12966: PPUSH
12967: CALL_OW 251
12971: PPUSH
12972: LD_VAR 0 17
12976: PPUSH
12977: CALL_OW 441
12981: GO 12949
12983: POP
12984: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12985: LD_VAR 0 18
12989: PPUSH
12990: LD_INT 2
12992: PUSH
12993: LD_INT 30
12995: PUSH
12996: LD_INT 31
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: PUSH
13003: LD_INT 30
13005: PUSH
13006: LD_INT 32
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: PUSH
13013: LD_INT 30
13015: PUSH
13016: LD_INT 33
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: PPUSH
13029: CALL_OW 72
13033: IFFALSE 13132
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13035: LD_ADDR_VAR 0 9
13039: PUSH
13040: LD_VAR 0 18
13044: PPUSH
13045: LD_INT 2
13047: PUSH
13048: LD_INT 30
13050: PUSH
13051: LD_INT 31
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PUSH
13058: LD_INT 30
13060: PUSH
13061: LD_INT 32
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: LD_INT 30
13070: PUSH
13071: LD_INT 33
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: PPUSH
13084: CALL_OW 72
13088: PUSH
13089: FOR_IN
13090: IFFALSE 13130
// begin if not GetBWeapon ( i ) then
13092: LD_VAR 0 9
13096: PPUSH
13097: CALL_OW 269
13101: NOT
13102: IFFALSE 13128
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13104: LD_VAR 0 9
13108: PPUSH
13109: LD_VAR 0 9
13113: PPUSH
13114: LD_VAR 0 2
13118: PPUSH
13119: CALL 53174 0 2
13123: PPUSH
13124: CALL_OW 431
// end ;
13128: GO 13089
13130: POP
13131: POP
// end ; for i = 1 to personel do
13132: LD_ADDR_VAR 0 9
13136: PUSH
13137: DOUBLE
13138: LD_INT 1
13140: DEC
13141: ST_TO_ADDR
13142: LD_VAR 0 7
13146: PUSH
13147: FOR_TO
13148: IFFALSE 14249
// begin if i > 4 then
13150: LD_VAR 0 9
13154: PUSH
13155: LD_INT 4
13157: GREATER
13158: IFFALSE 13162
// break ;
13160: GO 14249
// case i of 1 :
13162: LD_VAR 0 9
13166: PUSH
13167: LD_INT 1
13169: DOUBLE
13170: EQUAL
13171: IFTRUE 13175
13173: GO 13266
13175: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13176: LD_ADDR_VAR 0 13
13180: PUSH
13181: LD_VAR 0 18
13185: PPUSH
13186: LD_INT 22
13188: PUSH
13189: LD_VAR 0 17
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 58
13200: PUSH
13201: EMPTY
13202: LIST
13203: PUSH
13204: LD_INT 2
13206: PUSH
13207: LD_INT 30
13209: PUSH
13210: LD_INT 31
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: PUSH
13217: LD_INT 30
13219: PUSH
13220: LD_INT 32
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: PUSH
13227: LD_INT 30
13229: PUSH
13230: LD_INT 4
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PUSH
13237: LD_INT 30
13239: PUSH
13240: LD_INT 5
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: LIST
13258: PPUSH
13259: CALL_OW 72
13263: ST_TO_ADDR
13264: GO 13499
13266: LD_INT 2
13268: DOUBLE
13269: EQUAL
13270: IFTRUE 13274
13272: GO 13336
13274: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13275: LD_ADDR_VAR 0 13
13279: PUSH
13280: LD_VAR 0 18
13284: PPUSH
13285: LD_INT 22
13287: PUSH
13288: LD_VAR 0 17
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: LD_INT 2
13299: PUSH
13300: LD_INT 30
13302: PUSH
13303: LD_INT 0
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PUSH
13310: LD_INT 30
13312: PUSH
13313: LD_INT 1
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: LIST
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: PPUSH
13329: CALL_OW 72
13333: ST_TO_ADDR
13334: GO 13499
13336: LD_INT 3
13338: DOUBLE
13339: EQUAL
13340: IFTRUE 13344
13342: GO 13417
13344: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_control_tower ] , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13345: LD_ADDR_VAR 0 13
13349: PUSH
13350: LD_VAR 0 18
13354: PPUSH
13355: LD_INT 22
13357: PUSH
13358: LD_VAR 0 17
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: LD_INT 2
13369: PUSH
13370: LD_INT 30
13372: PUSH
13373: LD_INT 36
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PUSH
13380: LD_INT 30
13382: PUSH
13383: LD_INT 2
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: PUSH
13390: LD_INT 30
13392: PUSH
13393: LD_INT 3
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 72
13414: ST_TO_ADDR
13415: GO 13499
13417: LD_INT 4
13419: DOUBLE
13420: EQUAL
13421: IFTRUE 13425
13423: GO 13498
13425: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13426: LD_ADDR_VAR 0 13
13430: PUSH
13431: LD_VAR 0 18
13435: PPUSH
13436: LD_INT 22
13438: PUSH
13439: LD_VAR 0 17
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 2
13450: PUSH
13451: LD_INT 30
13453: PUSH
13454: LD_INT 6
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: PUSH
13461: LD_INT 30
13463: PUSH
13464: LD_INT 7
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PUSH
13471: LD_INT 30
13473: PUSH
13474: LD_INT 8
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PPUSH
13491: CALL_OW 72
13495: ST_TO_ADDR
13496: GO 13499
13498: POP
// if i = 1 then
13499: LD_VAR 0 9
13503: PUSH
13504: LD_INT 1
13506: EQUAL
13507: IFFALSE 13625
// begin tmp := [ ] ;
13509: LD_ADDR_VAR 0 19
13513: PUSH
13514: EMPTY
13515: ST_TO_ADDR
// for j in f do
13516: LD_ADDR_VAR 0 10
13520: PUSH
13521: LD_VAR 0 13
13525: PUSH
13526: FOR_IN
13527: IFFALSE 13607
// if GetBType ( j ) in [ b_breastwork , b_bunker ] then
13529: LD_VAR 0 10
13533: PPUSH
13534: CALL_OW 266
13538: PUSH
13539: LD_INT 31
13541: PUSH
13542: LD_INT 32
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: IN
13549: IFFALSE 13576
// tmp := Insert ( tmp , 1 , j ) else
13551: LD_ADDR_VAR 0 19
13555: PUSH
13556: LD_VAR 0 19
13560: PPUSH
13561: LD_INT 1
13563: PPUSH
13564: LD_VAR 0 10
13568: PPUSH
13569: CALL_OW 2
13573: ST_TO_ADDR
13574: GO 13605
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13576: LD_ADDR_VAR 0 19
13580: PUSH
13581: LD_VAR 0 19
13585: PPUSH
13586: LD_VAR 0 19
13590: PUSH
13591: LD_INT 1
13593: PLUS
13594: PPUSH
13595: LD_VAR 0 10
13599: PPUSH
13600: CALL_OW 2
13604: ST_TO_ADDR
13605: GO 13526
13607: POP
13608: POP
// if tmp then
13609: LD_VAR 0 19
13613: IFFALSE 13625
// f := tmp ;
13615: LD_ADDR_VAR 0 13
13619: PUSH
13620: LD_VAR 0 19
13624: ST_TO_ADDR
// end ; x := personel [ i ] ;
13625: LD_ADDR_VAR 0 14
13629: PUSH
13630: LD_VAR 0 7
13634: PUSH
13635: LD_VAR 0 9
13639: ARRAY
13640: ST_TO_ADDR
// if x = - 1 then
13641: LD_VAR 0 14
13645: PUSH
13646: LD_INT 1
13648: NEG
13649: EQUAL
13650: IFFALSE 13844
// begin for j in f do
13652: LD_ADDR_VAR 0 10
13656: PUSH
13657: LD_VAR 0 13
13661: PUSH
13662: FOR_IN
13663: IFFALSE 13840
// repeat InitHc ;
13665: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13669: LD_VAR 0 10
13673: PPUSH
13674: CALL_OW 266
13678: PUSH
13679: LD_INT 5
13681: EQUAL
13682: IFFALSE 13737
// begin if UnitsInside ( j ) < 3 then
13684: LD_VAR 0 10
13688: PPUSH
13689: CALL_OW 313
13693: PUSH
13694: LD_INT 3
13696: LESS
13697: IFFALSE 13718
// PrepareHuman ( false , i , skill ) else
13699: LD_INT 0
13701: PPUSH
13702: LD_VAR 0 9
13706: PPUSH
13707: LD_VAR 0 4
13711: PPUSH
13712: CALL_OW 380
13716: GO 13735
// PrepareHuman ( false , i , skill ) ;
13718: LD_INT 0
13720: PPUSH
13721: LD_VAR 0 9
13725: PPUSH
13726: LD_VAR 0 4
13730: PPUSH
13731: CALL_OW 380
// end else
13735: GO 13754
// PrepareHuman ( false , i , skill ) ;
13737: LD_INT 0
13739: PPUSH
13740: LD_VAR 0 9
13744: PPUSH
13745: LD_VAR 0 4
13749: PPUSH
13750: CALL_OW 380
// un := CreateHuman ;
13754: LD_ADDR_VAR 0 15
13758: PUSH
13759: CALL_OW 44
13763: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13764: LD_ADDR_VAR 0 8
13768: PUSH
13769: LD_VAR 0 8
13773: PPUSH
13774: LD_INT 1
13776: PPUSH
13777: LD_VAR 0 15
13781: PPUSH
13782: CALL_OW 2
13786: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13787: LD_VAR 0 15
13791: PPUSH
13792: LD_VAR 0 10
13796: PPUSH
13797: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13801: LD_VAR 0 10
13805: PPUSH
13806: CALL_OW 313
13810: PUSH
13811: LD_INT 6
13813: EQUAL
13814: PUSH
13815: LD_VAR 0 10
13819: PPUSH
13820: CALL_OW 266
13824: PUSH
13825: LD_INT 32
13827: PUSH
13828: LD_INT 31
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: IN
13835: OR
13836: IFFALSE 13665
13838: GO 13662
13840: POP
13841: POP
// end else
13842: GO 14247
// for j = 1 to x do
13844: LD_ADDR_VAR 0 10
13848: PUSH
13849: DOUBLE
13850: LD_INT 1
13852: DEC
13853: ST_TO_ADDR
13854: LD_VAR 0 14
13858: PUSH
13859: FOR_TO
13860: IFFALSE 14245
// begin InitHc ;
13862: CALL_OW 19
// if not f then
13866: LD_VAR 0 13
13870: NOT
13871: IFFALSE 13960
// begin PrepareHuman ( false , i , skill ) ;
13873: LD_INT 0
13875: PPUSH
13876: LD_VAR 0 9
13880: PPUSH
13881: LD_VAR 0 4
13885: PPUSH
13886: CALL_OW 380
// un := CreateHuman ;
13890: LD_ADDR_VAR 0 15
13894: PUSH
13895: CALL_OW 44
13899: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13900: LD_ADDR_VAR 0 8
13904: PUSH
13905: LD_VAR 0 8
13909: PPUSH
13910: LD_INT 1
13912: PPUSH
13913: LD_VAR 0 15
13917: PPUSH
13918: CALL_OW 2
13922: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13923: LD_VAR 0 15
13927: PPUSH
13928: LD_VAR 0 1
13932: PPUSH
13933: CALL_OW 250
13937: PPUSH
13938: LD_VAR 0 1
13942: PPUSH
13943: CALL_OW 251
13947: PPUSH
13948: LD_INT 10
13950: PPUSH
13951: LD_INT 0
13953: PPUSH
13954: CALL_OW 50
// continue ;
13958: GO 13859
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 3 and GetBType ( f [ 1 ] ) = b_control_tower ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13960: LD_VAR 0 13
13964: PUSH
13965: LD_INT 1
13967: ARRAY
13968: PPUSH
13969: CALL_OW 313
13973: PUSH
13974: LD_VAR 0 13
13978: PUSH
13979: LD_INT 1
13981: ARRAY
13982: PPUSH
13983: CALL_OW 266
13987: PUSH
13988: LD_INT 32
13990: PUSH
13991: LD_INT 31
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: IN
13998: AND
13999: PUSH
14000: LD_VAR 0 13
14004: PUSH
14005: LD_INT 1
14007: ARRAY
14008: PPUSH
14009: CALL_OW 313
14013: PUSH
14014: LD_INT 3
14016: EQUAL
14017: PUSH
14018: LD_VAR 0 13
14022: PUSH
14023: LD_INT 1
14025: ARRAY
14026: PPUSH
14027: CALL_OW 266
14031: PUSH
14032: LD_INT 36
14034: EQUAL
14035: AND
14036: OR
14037: PUSH
14038: LD_VAR 0 13
14042: PUSH
14043: LD_INT 1
14045: ARRAY
14046: PPUSH
14047: CALL_OW 313
14051: PUSH
14052: LD_INT 6
14054: EQUAL
14055: OR
14056: IFFALSE 14076
// f := Delete ( f , 1 ) ;
14058: LD_ADDR_VAR 0 13
14062: PUSH
14063: LD_VAR 0 13
14067: PPUSH
14068: LD_INT 1
14070: PPUSH
14071: CALL_OW 3
14075: ST_TO_ADDR
// if not f then
14076: LD_VAR 0 13
14080: NOT
14081: IFFALSE 14099
// begin x := x + 2 ;
14083: LD_ADDR_VAR 0 14
14087: PUSH
14088: LD_VAR 0 14
14092: PUSH
14093: LD_INT 2
14095: PLUS
14096: ST_TO_ADDR
// continue ;
14097: GO 13859
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14099: LD_VAR 0 13
14103: PUSH
14104: LD_INT 1
14106: ARRAY
14107: PPUSH
14108: CALL_OW 266
14112: PUSH
14113: LD_INT 5
14115: EQUAL
14116: IFFALSE 14175
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14118: LD_VAR 0 13
14122: PUSH
14123: LD_INT 1
14125: ARRAY
14126: PPUSH
14127: CALL_OW 313
14131: PUSH
14132: LD_INT 3
14134: LESS
14135: IFFALSE 14156
// PrepareHuman ( false , i , skill ) else
14137: LD_INT 0
14139: PPUSH
14140: LD_VAR 0 9
14144: PPUSH
14145: LD_VAR 0 4
14149: PPUSH
14150: CALL_OW 380
14154: GO 14173
// PrepareHuman ( false , i , skill ) ;
14156: LD_INT 0
14158: PPUSH
14159: LD_VAR 0 9
14163: PPUSH
14164: LD_VAR 0 4
14168: PPUSH
14169: CALL_OW 380
// end else
14173: GO 14192
// PrepareHuman ( false , i , skill ) ;
14175: LD_INT 0
14177: PPUSH
14178: LD_VAR 0 9
14182: PPUSH
14183: LD_VAR 0 4
14187: PPUSH
14188: CALL_OW 380
// un := CreateHuman ;
14192: LD_ADDR_VAR 0 15
14196: PUSH
14197: CALL_OW 44
14201: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14202: LD_ADDR_VAR 0 8
14206: PUSH
14207: LD_VAR 0 8
14211: PPUSH
14212: LD_INT 1
14214: PPUSH
14215: LD_VAR 0 15
14219: PPUSH
14220: CALL_OW 2
14224: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14225: LD_VAR 0 15
14229: PPUSH
14230: LD_VAR 0 13
14234: PUSH
14235: LD_INT 1
14237: ARRAY
14238: PPUSH
14239: CALL_OW 52
// end ;
14243: GO 13859
14245: POP
14246: POP
// end ;
14247: GO 13147
14249: POP
14250: POP
// result := result ^ buildings ;
14251: LD_ADDR_VAR 0 8
14255: PUSH
14256: LD_VAR 0 8
14260: PUSH
14261: LD_VAR 0 18
14265: ADD
14266: ST_TO_ADDR
// end else
14267: GO 14410
// begin for i = 1 to personel do
14269: LD_ADDR_VAR 0 9
14273: PUSH
14274: DOUBLE
14275: LD_INT 1
14277: DEC
14278: ST_TO_ADDR
14279: LD_VAR 0 7
14283: PUSH
14284: FOR_TO
14285: IFFALSE 14408
// begin if i > 4 then
14287: LD_VAR 0 9
14291: PUSH
14292: LD_INT 4
14294: GREATER
14295: IFFALSE 14299
// break ;
14297: GO 14408
// x := personel [ i ] ;
14299: LD_ADDR_VAR 0 14
14303: PUSH
14304: LD_VAR 0 7
14308: PUSH
14309: LD_VAR 0 9
14313: ARRAY
14314: ST_TO_ADDR
// if x = - 1 then
14315: LD_VAR 0 14
14319: PUSH
14320: LD_INT 1
14322: NEG
14323: EQUAL
14324: IFFALSE 14328
// continue ;
14326: GO 14284
// PrepareHuman ( false , i , skill ) ;
14328: LD_INT 0
14330: PPUSH
14331: LD_VAR 0 9
14335: PPUSH
14336: LD_VAR 0 4
14340: PPUSH
14341: CALL_OW 380
// un := CreateHuman ;
14345: LD_ADDR_VAR 0 15
14349: PUSH
14350: CALL_OW 44
14354: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14355: LD_VAR 0 15
14359: PPUSH
14360: LD_VAR 0 1
14364: PPUSH
14365: CALL_OW 250
14369: PPUSH
14370: LD_VAR 0 1
14374: PPUSH
14375: CALL_OW 251
14379: PPUSH
14380: LD_INT 10
14382: PPUSH
14383: LD_INT 0
14385: PPUSH
14386: CALL_OW 50
// result := result ^ un ;
14390: LD_ADDR_VAR 0 8
14394: PUSH
14395: LD_VAR 0 8
14399: PUSH
14400: LD_VAR 0 15
14404: ADD
14405: ST_TO_ADDR
// end ;
14406: GO 14284
14408: POP
14409: POP
// end ; end ;
14410: LD_VAR 0 8
14414: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
14415: LD_INT 0
14417: PPUSH
14418: PPUSH
14419: PPUSH
14420: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
14421: LD_ADDR_VAR 0 6
14425: PUSH
14426: LD_INT 34
14428: PUSH
14429: LD_INT 71
14431: PUSH
14432: LD_INT 70
14434: PUSH
14435: LD_INT 69
14437: PUSH
14438: LD_INT 39
14440: PUSH
14441: LD_INT 31
14443: PUSH
14444: LD_INT 14
14446: PUSH
14447: LD_INT 10
14449: PUSH
14450: LD_INT 40
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: ST_TO_ADDR
// resultWeapons = [ ] ;
14464: LD_ADDR_VAR 0 5
14468: PUSH
14469: EMPTY
14470: ST_TO_ADDR
// for i := 1 to weaponTechs do
14471: LD_ADDR_VAR 0 4
14475: PUSH
14476: DOUBLE
14477: LD_INT 1
14479: DEC
14480: ST_TO_ADDR
14481: LD_VAR 0 6
14485: PUSH
14486: FOR_TO
14487: IFFALSE 14674
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
14489: LD_VAR 0 6
14493: PUSH
14494: LD_VAR 0 4
14498: ARRAY
14499: PPUSH
14500: LD_VAR 0 2
14504: PPUSH
14505: CALL_OW 482
14509: PUSH
14510: LD_VAR 0 6
14514: PUSH
14515: LD_VAR 0 4
14519: ARRAY
14520: PPUSH
14521: LD_VAR 0 1
14525: PPUSH
14526: CALL_OW 321
14530: PUSH
14531: LD_INT 2
14533: EQUAL
14534: AND
14535: IFFALSE 14672
// case nation of nation_american :
14537: LD_VAR 0 2
14541: PUSH
14542: LD_INT 1
14544: DOUBLE
14545: EQUAL
14546: IFTRUE 14550
14548: GO 14585
14550: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
14551: LD_ADDR_VAR 0 5
14555: PUSH
14556: LD_VAR 0 5
14560: PUSH
14561: LD_VAR 0 6
14565: PUSH
14566: LD_VAR 0 4
14570: ARRAY
14571: PPUSH
14572: LD_VAR 0 2
14576: PPUSH
14577: CALL 14691 0 2
14581: ADD
14582: ST_TO_ADDR
14583: GO 14672
14585: LD_INT 2
14587: DOUBLE
14588: EQUAL
14589: IFTRUE 14593
14591: GO 14628
14593: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
14594: LD_ADDR_VAR 0 5
14598: PUSH
14599: LD_VAR 0 5
14603: PUSH
14604: LD_VAR 0 6
14608: PUSH
14609: LD_VAR 0 4
14613: ARRAY
14614: PPUSH
14615: LD_VAR 0 2
14619: PPUSH
14620: CALL 14691 0 2
14624: ADD
14625: ST_TO_ADDR
14626: GO 14672
14628: LD_INT 3
14630: DOUBLE
14631: EQUAL
14632: IFTRUE 14636
14634: GO 14671
14636: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
14637: LD_ADDR_VAR 0 5
14641: PUSH
14642: LD_VAR 0 5
14646: PUSH
14647: LD_VAR 0 6
14651: PUSH
14652: LD_VAR 0 4
14656: ARRAY
14657: PPUSH
14658: LD_VAR 0 2
14662: PPUSH
14663: CALL 14691 0 2
14667: ADD
14668: ST_TO_ADDR
14669: GO 14672
14671: POP
// end ;
14672: GO 14486
14674: POP
14675: POP
// result = resultWeapons ;
14676: LD_ADDR_VAR 0 3
14680: PUSH
14681: LD_VAR 0 5
14685: ST_TO_ADDR
// end ;
14686: LD_VAR 0 3
14690: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
14691: LD_INT 0
14693: PPUSH
// case tech of tech_AdvMet :
14694: LD_VAR 0 1
14698: PUSH
14699: LD_INT 34
14701: DOUBLE
14702: EQUAL
14703: IFTRUE 14707
14705: GO 14735
14707: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
14708: LD_ADDR_VAR 0 3
14712: PUSH
14713: LD_INT 6
14715: PUSH
14716: LD_STRING 
14718: PUSH
14719: LD_INT 46
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: LIST
14726: PUSH
14727: LD_VAR 0 2
14731: ARRAY
14732: ST_TO_ADDR
14733: GO 15024
14735: LD_INT 71
14737: DOUBLE
14738: EQUAL
14739: IFTRUE 14743
14741: GO 14771
14743: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
14744: LD_ADDR_VAR 0 3
14748: PUSH
14749: LD_STRING 
14751: PUSH
14752: LD_STRING 
14754: PUSH
14755: LD_INT 47
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: LIST
14762: PUSH
14763: LD_VAR 0 2
14767: ARRAY
14768: ST_TO_ADDR
14769: GO 15024
14771: LD_INT 70
14773: DOUBLE
14774: EQUAL
14775: IFTRUE 14779
14777: GO 14807
14779: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
14780: LD_ADDR_VAR 0 3
14784: PUSH
14785: LD_STRING 
14787: PUSH
14788: LD_INT 26
14790: PUSH
14791: LD_STRING 
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: LIST
14798: PUSH
14799: LD_VAR 0 2
14803: ARRAY
14804: ST_TO_ADDR
14805: GO 15024
14807: LD_INT 69
14809: DOUBLE
14810: EQUAL
14811: IFTRUE 14815
14813: GO 14843
14815: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
14816: LD_ADDR_VAR 0 3
14820: PUSH
14821: LD_INT 4
14823: PUSH
14824: LD_INT 25
14826: PUSH
14827: LD_INT 43
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: LIST
14834: PUSH
14835: LD_VAR 0 2
14839: ARRAY
14840: ST_TO_ADDR
14841: GO 15024
14843: LD_INT 39
14845: DOUBLE
14846: EQUAL
14847: IFTRUE 14851
14849: GO 14879
14851: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
14852: LD_ADDR_VAR 0 3
14856: PUSH
14857: LD_INT 5
14859: PUSH
14860: LD_INT 27
14862: PUSH
14863: LD_INT 44
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: LIST
14870: PUSH
14871: LD_VAR 0 2
14875: ARRAY
14876: ST_TO_ADDR
14877: GO 15024
14879: LD_INT 31
14881: DOUBLE
14882: EQUAL
14883: IFTRUE 14887
14885: GO 14915
14887: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
14888: LD_ADDR_VAR 0 3
14892: PUSH
14893: LD_STRING 
14895: PUSH
14896: LD_STRING 
14898: PUSH
14899: LD_INT 49
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: LIST
14906: PUSH
14907: LD_VAR 0 2
14911: ARRAY
14912: ST_TO_ADDR
14913: GO 15024
14915: LD_INT 14
14917: DOUBLE
14918: EQUAL
14919: IFTRUE 14923
14921: GO 14951
14923: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
14924: LD_ADDR_VAR 0 3
14928: PUSH
14929: LD_INT 10
14931: PUSH
14932: LD_STRING 
14934: PUSH
14935: LD_STRING 
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: LIST
14942: PUSH
14943: LD_VAR 0 2
14947: ARRAY
14948: ST_TO_ADDR
14949: GO 15024
14951: LD_INT 10
14953: DOUBLE
14954: EQUAL
14955: IFTRUE 14959
14957: GO 14987
14959: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
14960: LD_ADDR_VAR 0 3
14964: PUSH
14965: LD_INT 9
14967: PUSH
14968: LD_STRING 
14970: PUSH
14971: LD_STRING 
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: LIST
14978: PUSH
14979: LD_VAR 0 2
14983: ARRAY
14984: ST_TO_ADDR
14985: GO 15024
14987: LD_INT 40
14989: DOUBLE
14990: EQUAL
14991: IFTRUE 14995
14993: GO 15023
14995: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
14996: LD_ADDR_VAR 0 3
15000: PUSH
15001: LD_INT 7
15003: PUSH
15004: LD_INT 28
15006: PUSH
15007: LD_INT 45
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: LIST
15014: PUSH
15015: LD_VAR 0 2
15019: ARRAY
15020: ST_TO_ADDR
15021: GO 15024
15023: POP
// end ;
15024: LD_VAR 0 3
15028: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
15029: LD_INT 0
15031: PPUSH
15032: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
15033: LD_ADDR_VAR 0 2
15037: PUSH
15038: LD_VAR 0 1
15042: PPUSH
15043: LD_INT 1
15045: PPUSH
15046: CALL_OW 289
15050: PUSH
15051: LD_VAR 0 1
15055: PPUSH
15056: LD_INT 2
15058: PPUSH
15059: CALL_OW 289
15063: PUSH
15064: LD_VAR 0 1
15068: PPUSH
15069: LD_INT 3
15071: PPUSH
15072: CALL_OW 289
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: LIST
15081: ST_TO_ADDR
// end ;
15082: LD_VAR 0 2
15086: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
15087: LD_INT 0
15089: PPUSH
15090: PPUSH
// area = ListEnvironmentArea ( area ) ;
15091: LD_ADDR_VAR 0 2
15095: PUSH
15096: LD_VAR 0 2
15100: PPUSH
15101: CALL_OW 353
15105: ST_TO_ADDR
// if bulldozer > 0 then
15106: LD_VAR 0 1
15110: PUSH
15111: LD_INT 0
15113: GREATER
15114: IFFALSE 15225
// for i = area downto 1 do
15116: LD_ADDR_VAR 0 4
15120: PUSH
15121: DOUBLE
15122: LD_VAR 0 2
15126: INC
15127: ST_TO_ADDR
15128: LD_INT 1
15130: PUSH
15131: FOR_DOWNTO
15132: IFFALSE 15223
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
15134: LD_VAR 0 2
15138: PUSH
15139: LD_VAR 0 4
15143: ARRAY
15144: PUSH
15145: LD_INT 1
15147: ARRAY
15148: PPUSH
15149: LD_VAR 0 2
15153: PUSH
15154: LD_VAR 0 4
15158: ARRAY
15159: PUSH
15160: LD_INT 2
15162: ARRAY
15163: PPUSH
15164: CALL_OW 351
15168: IFFALSE 15221
// if not HasTask ( bulldozer ) then
15170: LD_VAR 0 1
15174: PPUSH
15175: CALL_OW 314
15179: NOT
15180: IFFALSE 15221
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
15182: LD_VAR 0 1
15186: PPUSH
15187: LD_VAR 0 2
15191: PUSH
15192: LD_VAR 0 4
15196: ARRAY
15197: PUSH
15198: LD_INT 1
15200: ARRAY
15201: PPUSH
15202: LD_VAR 0 2
15206: PUSH
15207: LD_VAR 0 4
15211: ARRAY
15212: PUSH
15213: LD_INT 2
15215: ARRAY
15216: PPUSH
15217: CALL_OW 171
15221: GO 15131
15223: POP
15224: POP
// end ;
15225: LD_VAR 0 3
15229: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
15230: LD_INT 0
15232: PPUSH
15233: PPUSH
15234: PPUSH
// uc_side := GetSide ( b ) ;
15235: LD_ADDR_OWVAR 20
15239: PUSH
15240: LD_VAR 0 2
15244: PPUSH
15245: CALL_OW 255
15249: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
15250: LD_ADDR_OWVAR 21
15254: PUSH
15255: LD_VAR 0 2
15259: PPUSH
15260: CALL_OW 248
15264: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
15265: LD_INT 0
15267: PPUSH
15268: LD_INT 1
15270: PPUSH
15271: LD_VAR 0 1
15275: PPUSH
15276: CALL_OW 380
// un = CreateHuman ;
15280: LD_ADDR_VAR 0 4
15284: PUSH
15285: CALL_OW 44
15289: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
15290: LD_ADDR_VAR 0 5
15294: PUSH
15295: LD_VAR 0 2
15299: PPUSH
15300: CALL_OW 254
15304: PUSH
15305: LD_INT 3
15307: MINUS
15308: ST_TO_ADDR
// if dir < 0 then
15309: LD_VAR 0 5
15313: PUSH
15314: LD_INT 0
15316: LESS
15317: IFFALSE 15333
// dir := 6 + dir ;
15319: LD_ADDR_VAR 0 5
15323: PUSH
15324: LD_INT 6
15326: PUSH
15327: LD_VAR 0 5
15331: PLUS
15332: ST_TO_ADDR
// SetDir ( un , dir ) ;
15333: LD_VAR 0 4
15337: PPUSH
15338: LD_VAR 0 5
15342: PPUSH
15343: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
15347: LD_VAR 0 4
15351: PPUSH
15352: LD_VAR 0 2
15356: PPUSH
15357: CALL_OW 52
// result = un ;
15361: LD_ADDR_VAR 0 3
15365: PUSH
15366: LD_VAR 0 4
15370: ST_TO_ADDR
// end ;
15371: LD_VAR 0 3
15375: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others , max , test1 , test2 ; begin
15376: LD_INT 0
15378: PPUSH
15379: PPUSH
15380: PPUSH
15381: PPUSH
15382: PPUSH
15383: PPUSH
15384: PPUSH
15385: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Burlak , Vsevolod ] ;
15386: LD_ADDR_VAR 0 3
15390: PUSH
15391: LD_INT 22
15393: PUSH
15394: LD_INT 3
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 21
15403: PUSH
15404: LD_INT 1
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 23
15413: PUSH
15414: LD_INT 3
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: LIST
15425: PPUSH
15426: CALL_OW 69
15430: PUSH
15431: LD_EXP 39
15435: PUSH
15436: LD_EXP 51
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: DIFF
15445: ST_TO_ADDR
// charsToChoose = charsToChoose diff vsevolodTeam ;
15446: LD_ADDR_VAR 0 3
15450: PUSH
15451: LD_VAR 0 3
15455: PUSH
15456: LD_EXP 52
15460: DIFF
15461: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam diff Vsevolod ;
15462: LD_ADDR_EXP 52
15466: PUSH
15467: LD_EXP 52
15471: PUSH
15472: LD_EXP 51
15476: DIFF
15477: ST_TO_ADDR
// max = charsToChoose div 2 + charsToChoose mod 2 ;
15478: LD_ADDR_VAR 0 6
15482: PUSH
15483: LD_VAR 0 3
15487: PUSH
15488: LD_INT 2
15490: DIV
15491: PUSH
15492: LD_VAR 0 3
15496: PUSH
15497: LD_INT 2
15499: MOD
15500: PLUS
15501: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 0 , 3 , [ Burlak , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_not_hired ] ^ vsevolodTeam ^ [ sel_not_changeable , Vsevolod ] , [ class_soldier , class_mechanic , class_engineer , class_scientistic ] ) ;
15502: LD_ADDR_VAR 0 4
15506: PUSH
15507: LD_STRING text
15509: PPUSH
15510: LD_INT 0
15512: PPUSH
15513: LD_INT 3
15515: PPUSH
15516: LD_EXP 39
15520: PUSH
15521: LD_INT -3
15523: PUSH
15524: LD_INT -5
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: PUSH
15532: LD_VAR 0 3
15536: ADD
15537: PUSH
15538: LD_INT -2
15540: PUSH
15541: EMPTY
15542: LIST
15543: ADD
15544: PUSH
15545: LD_EXP 52
15549: ADD
15550: PUSH
15551: LD_INT -4
15553: PUSH
15554: LD_EXP 51
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: ADD
15563: PPUSH
15564: LD_INT 1
15566: PUSH
15567: LD_INT 3
15569: PUSH
15570: LD_INT 2
15572: PUSH
15573: LD_INT 4
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: PPUSH
15582: CALL_OW 42
15586: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) , 6 ) ;
15587: LD_INT 22
15589: PUSH
15590: LD_INT 3
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 21
15599: PUSH
15600: LD_INT 1
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: LD_INT 23
15609: PUSH
15610: LD_INT 3
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: LIST
15621: PPUSH
15622: CALL_OW 69
15626: PPUSH
15627: LD_INT 6
15629: PPUSH
15630: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
15634: LD_VAR 0 4
15638: PPUSH
15639: LD_INT 3
15641: PPUSH
15642: CALL_OW 235
// SetSide ( Burlak , 3 ) ;
15646: LD_EXP 39
15650: PPUSH
15651: LD_INT 3
15653: PPUSH
15654: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
15658: LD_ADDR_VAR 0 2
15662: PUSH
15663: LD_INT 22
15665: PUSH
15666: LD_INT 6
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: LD_INT 21
15675: PUSH
15676: LD_INT 1
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PPUSH
15687: CALL_OW 69
15691: PUSH
15692: FOR_IN
15693: IFFALSE 15726
// if IsInUnit ( i ) then
15695: LD_VAR 0 2
15699: PPUSH
15700: CALL_OW 310
15704: IFFALSE 15724
// begin ComExitVehicle ( i ) ;
15706: LD_VAR 0 2
15710: PPUSH
15711: CALL_OW 121
// ComExitBuilding ( i ) ;
15715: LD_VAR 0 2
15719: PPUSH
15720: CALL_OW 122
// end ;
15724: GO 15692
15726: POP
15727: POP
// if not Vsevolod in selectedPeople then
15728: LD_EXP 51
15732: PUSH
15733: LD_VAR 0 4
15737: IN
15738: NOT
15739: IFFALSE 15756
// ExtSaveCharacter ( Vsevolod , Vsevolod , 6 ) ;
15741: LD_EXP 51
15745: PPUSH
15746: LD_STRING Vsevolod
15748: PPUSH
15749: LD_INT 6
15751: PPUSH
15752: CALL 11903 0 3
// if not Karamazov in selectedPeople then
15756: LD_EXP 40
15760: PUSH
15761: LD_VAR 0 4
15765: IN
15766: NOT
15767: IFFALSE 15784
// ExtSaveCharacter ( Karamazov , VSKaramazov , 6 ) ;
15769: LD_EXP 40
15773: PPUSH
15774: LD_STRING VSKaramazov
15776: PPUSH
15777: LD_INT 6
15779: PPUSH
15780: CALL 11903 0 3
// if not Petrovova in selectedPeople then
15784: LD_EXP 41
15788: PUSH
15789: LD_VAR 0 4
15793: IN
15794: NOT
15795: IFFALSE 15812
// ExtSaveCharacter ( Petrovova , VSPetrovova , 6 ) ;
15797: LD_EXP 41
15801: PPUSH
15802: LD_STRING VSPetrovova
15804: PPUSH
15805: LD_INT 6
15807: PPUSH
15808: CALL 11903 0 3
// if not Gleb in selectedPeople then
15812: LD_EXP 42
15816: PUSH
15817: LD_VAR 0 4
15821: IN
15822: NOT
15823: IFFALSE 15840
// ExtSaveCharacter ( Gleb , VSGleb , 6 ) ;
15825: LD_EXP 42
15829: PPUSH
15830: LD_STRING VSGleb
15832: PPUSH
15833: LD_INT 6
15835: PPUSH
15836: CALL 11903 0 3
// if not Petrosyan in selectedPeople then
15840: LD_EXP 43
15844: PUSH
15845: LD_VAR 0 4
15849: IN
15850: NOT
15851: IFFALSE 15868
// ExtSaveCharacter ( Petrosyan , VSPetrosyan , 6 ) ;
15853: LD_EXP 43
15857: PPUSH
15858: LD_STRING VSPetrosyan
15860: PPUSH
15861: LD_INT 6
15863: PPUSH
15864: CALL 11903 0 3
// if not Titov in selectedPeople then
15868: LD_EXP 44
15872: PUSH
15873: LD_VAR 0 4
15877: IN
15878: NOT
15879: IFFALSE 15896
// ExtSaveCharacter ( Titov , VSTitov , 6 ) ;
15881: LD_EXP 44
15885: PPUSH
15886: LD_STRING VSTitov
15888: PPUSH
15889: LD_INT 6
15891: PPUSH
15892: CALL 11903 0 3
// if not Dolgov in selectedPeople then
15896: LD_EXP 45
15900: PUSH
15901: LD_VAR 0 4
15905: IN
15906: NOT
15907: IFFALSE 15924
// ExtSaveCharacter ( Dolgov , VSDolgov , 6 ) ;
15909: LD_EXP 45
15913: PPUSH
15914: LD_STRING VSDolgov
15916: PPUSH
15917: LD_INT 6
15919: PPUSH
15920: CALL 11903 0 3
// if not Lipshchin in selectedPeople then
15924: LD_EXP 46
15928: PUSH
15929: LD_VAR 0 4
15933: IN
15934: NOT
15935: IFFALSE 15952
// ExtSaveCharacter ( Lipshchin , VSLipshchin , 6 ) ;
15937: LD_EXP 46
15941: PPUSH
15942: LD_STRING VSLipshchin
15944: PPUSH
15945: LD_INT 6
15947: PPUSH
15948: CALL 11903 0 3
// others = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod ] ;
15952: LD_ADDR_VAR 0 5
15956: PUSH
15957: LD_INT 22
15959: PUSH
15960: LD_INT 6
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: LD_INT 21
15969: PUSH
15970: LD_INT 1
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: LD_INT 23
15979: PUSH
15980: LD_INT 3
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: LIST
15991: PPUSH
15992: CALL_OW 69
15996: PUSH
15997: LD_EXP 40
16001: PUSH
16002: LD_EXP 41
16006: PUSH
16007: LD_EXP 42
16011: PUSH
16012: LD_EXP 43
16016: PUSH
16017: LD_EXP 44
16021: PUSH
16022: LD_EXP 45
16026: PUSH
16027: LD_EXP 46
16031: PUSH
16032: LD_EXP 51
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: DIFF
16047: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_vsevolod , 6 ) ;
16048: LD_VAR 0 5
16052: PPUSH
16053: LD_STRING other_survivors_with_vsevolod
16055: PPUSH
16056: LD_INT 6
16058: PPUSH
16059: CALL 11959 0 3
// end ; end_of_file
16063: LD_VAR 0 1
16067: RET
// export function MissionIntro ; var i , ruEng , unit ; begin
16068: LD_INT 0
16070: PPUSH
16071: PPUSH
16072: PPUSH
16073: PPUSH
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) ;
16074: LD_EXP 39
16078: PPUSH
16079: CALL_OW 310
16083: PPUSH
16084: CALL_OW 87
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
16088: LD_ADDR_VAR 0 4
16092: PUSH
16093: LD_INT 22
16095: PUSH
16096: LD_INT 3
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: LD_INT 21
16105: PUSH
16106: LD_INT 2
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PPUSH
16117: CALL_OW 69
16121: PUSH
16122: FOR_IN
16123: IFFALSE 16187
// begin if ( i mod 2 ) = 0 then
16125: LD_VAR 0 2
16129: PUSH
16130: LD_INT 2
16132: MOD
16133: PUSH
16134: LD_INT 0
16136: EQUAL
16137: IFFALSE 16156
// ComMoveXY ( unit , 156 , 205 ) else
16139: LD_VAR 0 4
16143: PPUSH
16144: LD_INT 156
16146: PPUSH
16147: LD_INT 205
16149: PPUSH
16150: CALL_OW 111
16154: GO 16171
// ComMoveXY ( unit , 160 , 215 ) ;
16156: LD_VAR 0 4
16160: PPUSH
16161: LD_INT 160
16163: PPUSH
16164: LD_INT 215
16166: PPUSH
16167: CALL_OW 111
// i = i + 1 ;
16171: LD_ADDR_VAR 0 2
16175: PUSH
16176: LD_VAR 0 2
16180: PUSH
16181: LD_INT 1
16183: PLUS
16184: ST_TO_ADDR
// end ;
16185: GO 16122
16187: POP
16188: POP
// if IsOK ( Karamazov ) then
16189: LD_EXP 40
16193: PPUSH
16194: CALL_OW 302
16198: IFFALSE 16212
// ruEng = Karamazov else
16200: LD_ADDR_VAR 0 3
16204: PUSH
16205: LD_EXP 40
16209: ST_TO_ADDR
16210: GO 16295
// if IsOK ( Lipshchin ) then
16212: LD_EXP 46
16216: PPUSH
16217: CALL_OW 302
16221: IFFALSE 16235
// ruEng = Lipshchin else
16223: LD_ADDR_VAR 0 3
16227: PUSH
16228: LD_EXP 46
16232: ST_TO_ADDR
16233: GO 16295
// ruEng = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_class , class_engineer ] ] ) [ 1 ] ;
16235: LD_ADDR_VAR 0 3
16239: PUSH
16240: LD_INT 22
16242: PUSH
16243: LD_INT 3
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 21
16252: PUSH
16253: LD_INT 1
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 23
16262: PUSH
16263: LD_INT 3
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 25
16272: PUSH
16273: LD_INT 2
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: PPUSH
16286: CALL_OW 69
16290: PUSH
16291: LD_INT 1
16293: ARRAY
16294: ST_TO_ADDR
// wait ( 0 0$3 ) ;
16295: LD_INT 105
16297: PPUSH
16298: CALL_OW 67
// CenterOnXY ( 160 , 213 ) ;
16302: LD_INT 160
16304: PPUSH
16305: LD_INT 213
16307: PPUSH
16308: CALL_OW 84
// wait ( 0 0$3 ) ;
16312: LD_INT 105
16314: PPUSH
16315: CALL_OW 67
// CenterOnXY ( 149 , 211 ) ;
16319: LD_INT 149
16321: PPUSH
16322: LD_INT 211
16324: PPUSH
16325: CALL_OW 84
// repeat ComMoveXY ( IsInUnit ( ruEng ) , 149 , 212 ) ;
16329: LD_VAR 0 3
16333: PPUSH
16334: CALL_OW 310
16338: PPUSH
16339: LD_INT 149
16341: PPUSH
16342: LD_INT 212
16344: PPUSH
16345: CALL_OW 111
// wait ( 0 0$1 ) ;
16349: LD_INT 35
16351: PPUSH
16352: CALL_OW 67
// until GetDistUnitXY ( IsInUnit ( ruEng ) , 149 , 212 ) <= 2 ;
16356: LD_VAR 0 3
16360: PPUSH
16361: CALL_OW 310
16365: PPUSH
16366: LD_INT 149
16368: PPUSH
16369: LD_INT 212
16371: PPUSH
16372: CALL_OW 297
16376: PUSH
16377: LD_INT 2
16379: LESSEQUAL
16380: IFFALSE 16329
// ComExitVehicle ( ruEng ) ;
16382: LD_VAR 0 3
16386: PPUSH
16387: CALL_OW 121
// wait ( 0 0$1 ) ;
16391: LD_INT 35
16393: PPUSH
16394: CALL_OW 67
// AddComCaptureBuilding ( ruEng , rudepot ) ;
16398: LD_VAR 0 3
16402: PPUSH
16403: LD_INT 74
16405: PPUSH
16406: CALL 12475 0 2
// repeat wait ( 0 0$1 ) ;
16410: LD_INT 35
16412: PPUSH
16413: CALL_OW 67
// until GetSide ( rudepot ) = 3 ;
16417: LD_INT 74
16419: PPUSH
16420: CALL_OW 255
16424: PUSH
16425: LD_INT 3
16427: EQUAL
16428: IFFALSE 16410
// ComEnterUnit ( ruEng , rudepot ) ;
16430: LD_VAR 0 3
16434: PPUSH
16435: LD_INT 74
16437: PPUSH
16438: CALL_OW 120
// wait ( 0 0$2 ) ;
16442: LD_INT 70
16444: PPUSH
16445: CALL_OW 67
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
16449: LD_INT 22
16451: PUSH
16452: LD_INT 6
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PPUSH
16459: CALL_OW 69
16463: PPUSH
16464: LD_INT 3
16466: PPUSH
16467: CALL_OW 235
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
16471: LD_ADDR_VAR 0 4
16475: PUSH
16476: LD_INT 22
16478: PUSH
16479: LD_INT 3
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 21
16488: PUSH
16489: LD_INT 1
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PPUSH
16500: CALL_OW 69
16504: PUSH
16505: FOR_IN
16506: IFFALSE 16539
// if GetType ( IsInUnit ( unit ) ) = unit_vehicle then
16508: LD_VAR 0 4
16512: PPUSH
16513: CALL_OW 310
16517: PPUSH
16518: CALL_OW 247
16522: PUSH
16523: LD_INT 2
16525: EQUAL
16526: IFFALSE 16537
// ComExitVehicle ( unit ) ;
16528: LD_VAR 0 4
16532: PPUSH
16533: CALL_OW 121
16537: GO 16505
16539: POP
16540: POP
// if ruEng = Karamazov then
16541: LD_VAR 0 3
16545: PUSH
16546: LD_EXP 40
16550: EQUAL
16551: IFFALSE 16567
// Say ( Karamazov , DStart-Kar-1 ) else
16553: LD_EXP 40
16557: PPUSH
16558: LD_STRING DStart-Kar-1
16560: PPUSH
16561: CALL_OW 88
16565: GO 16591
// if ruEng = Lipshchin then
16567: LD_VAR 0 3
16571: PUSH
16572: LD_EXP 46
16576: EQUAL
16577: IFFALSE 16591
// Say ( Lipshchin , DStart-Lip-1 ) ;
16579: LD_EXP 46
16583: PPUSH
16584: LD_STRING DStart-Lip-1
16586: PPUSH
16587: CALL_OW 88
// ComExitBuilding ( ruEng ) ;
16591: LD_VAR 0 3
16595: PPUSH
16596: CALL_OW 122
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 250 ] ] ] ) do
16600: LD_ADDR_VAR 0 4
16604: PUSH
16605: LD_INT 22
16607: PUSH
16608: LD_INT 3
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: LD_INT 21
16617: PUSH
16618: LD_INT 3
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 3
16627: PUSH
16628: LD_INT 24
16630: PUSH
16631: LD_INT 250
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: LIST
16646: PPUSH
16647: CALL_OW 69
16651: PUSH
16652: FOR_IN
16653: IFFALSE 16706
// AddComRepairBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , unit ) ;
16655: LD_INT 22
16657: PUSH
16658: LD_INT 3
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PUSH
16665: LD_INT 21
16667: PUSH
16668: LD_INT 1
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: PUSH
16675: LD_INT 25
16677: PUSH
16678: LD_INT 2
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: LIST
16689: PPUSH
16690: CALL_OW 69
16694: PPUSH
16695: LD_VAR 0 4
16699: PPUSH
16700: CALL_OW 190
16704: GO 16652
16706: POP
16707: POP
// Say ( Burlak , DStart-Bur-1 ) ;
16708: LD_EXP 39
16712: PPUSH
16713: LD_STRING DStart-Bur-1
16715: PPUSH
16716: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-1 ) ;
16720: LD_EXP 47
16724: PPUSH
16725: LD_STRING DStart-Pla-1
16727: PPUSH
16728: CALL_OW 94
// Say ( Burlak , DStart-Bur-2 ) ;
16732: LD_EXP 39
16736: PPUSH
16737: LD_STRING DStart-Bur-2
16739: PPUSH
16740: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-2 ) ;
16744: LD_EXP 47
16748: PPUSH
16749: LD_STRING DStart-Pla-2
16751: PPUSH
16752: CALL_OW 94
// if IsOK ( Petrovova ) then
16756: LD_EXP 41
16760: PPUSH
16761: CALL_OW 302
16765: IFFALSE 16779
// Say ( Petrovova , DStart-Ptr-2 ) ;
16767: LD_EXP 41
16771: PPUSH
16772: LD_STRING DStart-Ptr-2
16774: PPUSH
16775: CALL_OW 88
// InGameOff ;
16779: CALL_OW 9
// ChangeMissionObjectives ( MStart ) ;
16783: LD_STRING MStart
16785: PPUSH
16786: CALL_OW 337
// SaveForQuickRestart ;
16790: CALL_OW 22
// wait ( 0 0$10 ) ;
16794: LD_INT 350
16796: PPUSH
16797: CALL_OW 67
// if IsOK ( Petrosyan ) then
16801: LD_EXP 43
16805: PPUSH
16806: CALL_OW 302
16810: IFFALSE 16826
// Say ( Petrosyan , DMatPrediction-Pty-1 ) else
16812: LD_EXP 43
16816: PPUSH
16817: LD_STRING DMatPrediction-Pty-1
16819: PPUSH
16820: CALL_OW 88
16824: GO 16849
// if IsOK ( Dolgov ) then
16826: LD_EXP 45
16830: PPUSH
16831: CALL_OW 302
16835: IFFALSE 16849
// Say ( Dolgov , DMatPrediction-Dol-1 ) ;
16837: LD_EXP 45
16841: PPUSH
16842: LD_STRING DMatPrediction-Dol-1
16844: PPUSH
16845: CALL_OW 88
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16849: LD_EXP 43
16853: PPUSH
16854: CALL_OW 302
16858: PUSH
16859: LD_EXP 45
16863: PPUSH
16864: CALL_OW 302
16868: OR
16869: IFFALSE 16883
// Say ( Burlak , DMatPrediction-Bur-1 ) ;
16871: LD_EXP 39
16875: PPUSH
16876: LD_STRING DMatPrediction-Bur-1
16878: PPUSH
16879: CALL_OW 88
// if IsOK ( Petrosyan ) then
16883: LD_EXP 43
16887: PPUSH
16888: CALL_OW 302
16892: IFFALSE 16908
// Say ( Petrosyan , DMatPrediction-Pty-2 ) else
16894: LD_EXP 43
16898: PPUSH
16899: LD_STRING DMatPrediction-Pty-2
16901: PPUSH
16902: CALL_OW 88
16906: GO 16931
// if IsOK ( Dolgov ) then
16908: LD_EXP 45
16912: PPUSH
16913: CALL_OW 302
16917: IFFALSE 16931
// Say ( Dolgov , DMatPrediction-Dol-2 ) ;
16919: LD_EXP 45
16923: PPUSH
16924: LD_STRING DMatPrediction-Dol-2
16926: PPUSH
16927: CALL_OW 88
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16931: LD_EXP 43
16935: PPUSH
16936: CALL_OW 302
16940: PUSH
16941: LD_EXP 45
16945: PPUSH
16946: CALL_OW 302
16950: OR
16951: IFFALSE 16965
// Say ( Burlak , DMatPrediction-Bur-2 ) ;
16953: LD_EXP 39
16957: PPUSH
16958: LD_STRING DMatPrediction-Bur-2
16960: PPUSH
16961: CALL_OW 88
// if IsOK ( Petrosyan ) then
16965: LD_EXP 43
16969: PPUSH
16970: CALL_OW 302
16974: IFFALSE 16990
// Say ( Petrosyan , DMatPrediction-Pty-3 ) else
16976: LD_EXP 43
16980: PPUSH
16981: LD_STRING DMatPrediction-Pty-3
16983: PPUSH
16984: CALL_OW 88
16988: GO 17013
// if IsOK ( Dolgov ) then
16990: LD_EXP 45
16994: PPUSH
16995: CALL_OW 302
16999: IFFALSE 17013
// Say ( Dolgov , DMatPrediction-Dol-3 ) ;
17001: LD_EXP 45
17005: PPUSH
17006: LD_STRING DMatPrediction-Dol-3
17008: PPUSH
17009: CALL_OW 88
// ChangeMissionObjectives ( MPred ) ;
17013: LD_STRING MPred
17015: PPUSH
17016: CALL_OW 337
// end ;
17020: LD_VAR 0 1
17024: RET
// every 0 0$1 trigger not UnitFilter ( ovsyenkoBase , [ f_type , unit_human ] ) do
17025: LD_EXP 59
17029: PPUSH
17030: LD_INT 21
17032: PUSH
17033: LD_INT 1
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PPUSH
17040: CALL_OW 72
17044: NOT
17045: IFFALSE 17267
17047: GO 17049
17049: DISABLE
// begin DialogueOn ;
17050: CALL_OW 6
// Say ( Burlak , DOvsyenkoTaken-Bur-1 ) ;
17054: LD_EXP 39
17058: PPUSH
17059: LD_STRING DOvsyenkoTaken-Bur-1
17061: PPUSH
17062: CALL_OW 88
// SayRadio ( Platonov , DOvsyenkoTaken-Pla-1 ) ;
17066: LD_EXP 47
17070: PPUSH
17071: LD_STRING DOvsyenkoTaken-Pla-1
17073: PPUSH
17074: CALL_OW 94
// if IsOK ( Karamazov ) then
17078: LD_EXP 40
17082: PPUSH
17083: CALL_OW 302
17087: IFFALSE 17101
// Say ( Karamazov , DOvsyenkoTaken-Kar-1 ) ;
17089: LD_EXP 40
17093: PPUSH
17094: LD_STRING DOvsyenkoTaken-Kar-1
17096: PPUSH
17097: CALL_OW 88
// if IsOK ( Titov ) then
17101: LD_EXP 44
17105: PPUSH
17106: CALL_OW 302
17110: IFFALSE 17124
// Say ( Titov , DOvsyenkoTaken-Tit-1 ) ;
17112: LD_EXP 44
17116: PPUSH
17117: LD_STRING DOvsyenkoTaken-Tit-1
17119: PPUSH
17120: CALL_OW 88
// if IsOK ( Lipshchin ) and ( IsOK ( Karamazov ) or IsOK ( Titov ) ) then
17124: LD_EXP 46
17128: PPUSH
17129: CALL_OW 302
17133: PUSH
17134: LD_EXP 40
17138: PPUSH
17139: CALL_OW 302
17143: PUSH
17144: LD_EXP 44
17148: PPUSH
17149: CALL_OW 302
17153: OR
17154: AND
17155: IFFALSE 17192
// begin Say ( Lipshchin , DOvsyenkoTaken-Lip-1 ) ;
17157: LD_EXP 46
17161: PPUSH
17162: LD_STRING DOvsyenkoTaken-Lip-1
17164: PPUSH
17165: CALL_OW 88
// if IsOK ( Gleb ) then
17169: LD_EXP 42
17173: PPUSH
17174: CALL_OW 302
17178: IFFALSE 17192
// Say ( Gleb , DOvsyenkoTaken-Glb-1 ) ;
17180: LD_EXP 42
17184: PPUSH
17185: LD_STRING DOvsyenkoTaken-Glb-1
17187: PPUSH
17188: CALL_OW 88
// end ; DialogueOff ;
17192: CALL_OW 7
// ChangeMissionObjectives ( MOutCapture ) ;
17196: LD_STRING MOutCapture
17198: PPUSH
17199: CALL_OW 337
// ChangeMissionObjectives ( MAddMine ) ;
17203: LD_STRING MAddMine
17205: PPUSH
17206: CALL_OW 337
// claimOvsyenkoBase = true ;
17210: LD_ADDR_EXP 15
17214: PUSH
17215: LD_INT 1
17217: ST_TO_ADDR
// wait ( 1 1$10 ) ;
17218: LD_INT 2450
17220: PPUSH
17221: CALL_OW 67
// InitAIManager ( 1 , 1 , headAmBase , HeadAmericanBaseArea , HeadAmericanHealArea , false , HeadAmericanBaseArea , 6 , 2 , 4 , true , true ) ;
17225: LD_INT 1
17227: PPUSH
17228: LD_INT 1
17230: PPUSH
17231: LD_EXP 61
17235: PPUSH
17236: LD_INT 5
17238: PPUSH
17239: LD_INT 9
17241: PPUSH
17242: LD_INT 0
17244: PPUSH
17245: LD_INT 5
17247: PPUSH
17248: LD_INT 6
17250: PPUSH
17251: LD_INT 2
17253: PPUSH
17254: LD_INT 4
17256: PPUSH
17257: LD_INT 1
17259: PPUSH
17260: LD_INT 1
17262: PPUSH
17263: CALL 5248 0 12
// end ;
17267: END
// export function Dial_SibTechs ; begin
17268: LD_INT 0
17270: PPUSH
// dial_SibTechsBlocker = true ;
17271: LD_ADDR_EXP 9
17275: PUSH
17276: LD_INT 1
17278: ST_TO_ADDR
// DialogueOn ;
17279: CALL_OW 6
// if IsOK ( Petrosyan ) then
17283: LD_EXP 43
17287: PPUSH
17288: CALL_OW 302
17292: IFFALSE 17308
// Say ( Petrosyan , DSibResearch-Pty-1 ) else
17294: LD_EXP 43
17298: PPUSH
17299: LD_STRING DSibResearch-Pty-1
17301: PPUSH
17302: CALL_OW 88
17306: GO 17331
// if IsOK ( Dolgov ) then
17308: LD_EXP 45
17312: PPUSH
17313: CALL_OW 302
17317: IFFALSE 17331
// Say ( Dolgov , DSibResearch-Dol-1 ) ;
17319: LD_EXP 45
17323: PPUSH
17324: LD_STRING DSibResearch-Dol-1
17326: PPUSH
17327: CALL_OW 88
// Say ( Burlak , DSibResearch-Bur-1 ) ;
17331: LD_EXP 39
17335: PPUSH
17336: LD_STRING DSibResearch-Bur-1
17338: PPUSH
17339: CALL_OW 88
// SayRadio ( Platonov , DSibResearch-Pla-1 ) ;
17343: LD_EXP 47
17347: PPUSH
17348: LD_STRING DSibResearch-Pla-1
17350: PPUSH
17351: CALL_OW 94
// DialogueOff ;
17355: CALL_OW 7
// ChangeMissionObjectives ( MResearch ) ;
17359: LD_STRING MResearch
17361: PPUSH
17362: CALL_OW 337
// SetRestrict ( b_ext_siberium , 3 , true ) ;
17366: LD_INT 21
17368: PPUSH
17369: LD_INT 3
17371: PPUSH
17372: LD_INT 1
17374: PPUSH
17375: CALL_OW 324
// SetRestrict ( b_siberite_power , 3 , true ) ;
17379: LD_INT 28
17381: PPUSH
17382: LD_INT 3
17384: PPUSH
17385: LD_INT 1
17387: PPUSH
17388: CALL_OW 324
// SetRestrict ( b_lab_siberium , 3 , true ) ;
17392: LD_INT 11
17394: PPUSH
17395: LD_INT 3
17397: PPUSH
17398: LD_INT 1
17400: PPUSH
17401: CALL_OW 324
// SetRestrict ( b_lab_spacetime , 3 , true ) ;
17405: LD_INT 14
17407: PPUSH
17408: LD_INT 3
17410: PPUSH
17411: LD_INT 1
17413: PPUSH
17414: CALL_OW 324
// end ;
17418: LD_VAR 0 1
17422: RET
// export function Dial_ResearchMatPredictions ; begin
17423: LD_INT 0
17425: PPUSH
// techMatPredStatus = state_researched ;
17426: LD_ADDR_EXP 6
17430: PUSH
17431: LD_INT 2
17433: ST_TO_ADDR
// ChangeMissionObjectives ( MOutPred ) ;
17434: LD_STRING MOutPred
17436: PPUSH
17437: CALL_OW 337
// DialogueOn ;
17441: CALL_OW 6
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
17445: LD_EXP 43
17449: PPUSH
17450: CALL_OW 302
17454: PUSH
17455: LD_EXP 45
17459: PPUSH
17460: CALL_OW 302
17464: OR
17465: IFFALSE 17587
// begin if IsOK ( Petrosyan ) then
17467: LD_EXP 43
17471: PPUSH
17472: CALL_OW 302
17476: IFFALSE 17492
// Say ( Petrosyan , DNoMaterial-Pty-1 ) else
17478: LD_EXP 43
17482: PPUSH
17483: LD_STRING DNoMaterial-Pty-1
17485: PPUSH
17486: CALL_OW 88
17490: GO 17515
// if IsOK ( Dolgov ) then
17492: LD_EXP 45
17496: PPUSH
17497: CALL_OW 302
17501: IFFALSE 17515
// Say ( Dolgov , DNoMaterial-Dol-1 ) ;
17503: LD_EXP 45
17507: PPUSH
17508: LD_STRING DNoMaterial-Dol-1
17510: PPUSH
17511: CALL_OW 88
// Say ( Burlak , DNoMaterial-Bur-1 ) ;
17515: LD_EXP 39
17519: PPUSH
17520: LD_STRING DNoMaterial-Bur-1
17522: PPUSH
17523: CALL_OW 88
// if IsOK ( Petrosyan ) then
17527: LD_EXP 43
17531: PPUSH
17532: CALL_OW 302
17536: IFFALSE 17552
// Say ( Petrosyan , DNoMaterial-Pty-2 ) else
17538: LD_EXP 43
17542: PPUSH
17543: LD_STRING DNoMaterial-Pty-2
17545: PPUSH
17546: CALL_OW 88
17550: GO 17575
// if IsOK ( Dolgov ) then
17552: LD_EXP 45
17556: PPUSH
17557: CALL_OW 302
17561: IFFALSE 17575
// Say ( Dolgov , DNoMaterial-Dol-2 ) ;
17563: LD_EXP 45
17567: PPUSH
17568: LD_STRING DNoMaterial-Dol-2
17570: PPUSH
17571: CALL_OW 88
// Say ( Burlak , DNoMaterial-Bur-2 ) ;
17575: LD_EXP 39
17579: PPUSH
17580: LD_STRING DNoMaterial-Bur-2
17582: PPUSH
17583: CALL_OW 88
// end ; DialogueOff ;
17587: CALL_OW 7
// end ;
17591: LD_VAR 0 1
17595: RET
// every 0 0$1 trigger not dial_SibTechsBlocker and ( GetResourceVisibility ( 116 , 123 , 3 ) or GetResourceVisibility ( 72 , 86 , 3 ) ) do
17596: LD_EXP 9
17600: NOT
17601: PUSH
17602: LD_INT 116
17604: PPUSH
17605: LD_INT 123
17607: PPUSH
17608: LD_INT 3
17610: PPUSH
17611: CALL_OW 440
17615: PUSH
17616: LD_INT 72
17618: PPUSH
17619: LD_INT 86
17621: PPUSH
17622: LD_INT 3
17624: PPUSH
17625: CALL_OW 440
17629: OR
17630: AND
17631: IFFALSE 17640
17633: GO 17635
17635: DISABLE
// Dial_SibTechs ;
17636: CALL 17268 0 0
17640: END
// every 5 5$0 trigger claimOvsyenkoBase do
17641: LD_EXP 15
17645: IFFALSE 17669
17647: GO 17649
17649: DISABLE
// begin PrepareVsevolod ;
17650: CALL 2664 0 0
// ComAgressiveMove ( vsevolodTeam , 61 , 45 ) ;
17654: LD_EXP 52
17658: PPUSH
17659: LD_INT 61
17661: PPUSH
17662: LD_INT 45
17664: PPUSH
17665: CALL_OW 114
// end ;
17669: END
// every 0 0$1 trigger immortalVsevolodTeam do var unit ;
17670: LD_EXP 18
17674: IFFALSE 17712
17676: GO 17678
17678: DISABLE
17679: LD_INT 0
17681: PPUSH
// begin enable ;
17682: ENABLE
// for unit in vsevolodTeam do
17683: LD_ADDR_VAR 0 1
17687: PUSH
17688: LD_EXP 52
17692: PUSH
17693: FOR_IN
17694: IFFALSE 17710
// SetLives ( unit , 1000 ) ;
17696: LD_VAR 0 1
17700: PPUSH
17701: LD_INT 1000
17703: PPUSH
17704: CALL_OW 234
17708: GO 17693
17710: POP
17711: POP
// end ;
17712: PPOPN 1
17714: END
// every 0 0$1 trigger GetLives ( ter_bun1 ) <= 650 or GetLives ( ter_arm1 ) <= 650 do var belkovSavedIn02 , tmp , speaker ;
17715: LD_INT 170
17717: PPUSH
17718: CALL_OW 256
17722: PUSH
17723: LD_INT 650
17725: LESSEQUAL
17726: PUSH
17727: LD_INT 174
17729: PPUSH
17730: CALL_OW 256
17734: PUSH
17735: LD_INT 650
17737: LESSEQUAL
17738: OR
17739: IFFALSE 18900
17741: GO 17743
17743: DISABLE
17744: LD_INT 0
17746: PPUSH
17747: PPUSH
17748: PPUSH
// begin ComMoveXY ( UnitFilter ( terminalBase , [ f_type , unit_human ] ) , 35 , 58 ) ;
17749: LD_EXP 60
17753: PPUSH
17754: LD_INT 21
17756: PUSH
17757: LD_INT 1
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PPUSH
17764: CALL_OW 72
17768: PPUSH
17769: LD_INT 35
17771: PPUSH
17772: LD_INT 58
17774: PPUSH
17775: CALL_OW 111
// SetSide ( UnitFilter ( terminalBase , [ f_type , unit_building ] ) , 6 ) ;
17779: LD_EXP 60
17783: PPUSH
17784: LD_INT 21
17786: PUSH
17787: LD_INT 3
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PPUSH
17794: CALL_OW 72
17798: PPUSH
17799: LD_INT 6
17801: PPUSH
17802: CALL_OW 235
// immortalVsevolodTeam = false ;
17806: LD_ADDR_EXP 18
17810: PUSH
17811: LD_INT 0
17813: ST_TO_ADDR
// ComEnterUnit ( [ Vsevolod , vsevolodTeam [ 3 ] ] , ter_arm1 ) ;
17814: LD_EXP 51
17818: PUSH
17819: LD_EXP 52
17823: PUSH
17824: LD_INT 3
17826: ARRAY
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PPUSH
17832: LD_INT 174
17834: PPUSH
17835: CALL_OW 120
// ComEnterUnit ( vsevolodTeam [ 4 ] , ter_bun1 ) ;
17839: LD_EXP 52
17843: PUSH
17844: LD_INT 4
17846: ARRAY
17847: PPUSH
17848: LD_INT 170
17850: PPUSH
17851: CALL_OW 120
// SetLives ( Petr , 500 ) ;
17855: LD_EXP 53
17859: PPUSH
17860: LD_INT 500
17862: PPUSH
17863: CALL_OW 234
// ComEnterUnit ( vsevolodTeam [ 2 ] , terminal ) ;
17867: LD_EXP 52
17871: PUSH
17872: LD_INT 2
17874: ARRAY
17875: PPUSH
17876: LD_INT 168
17878: PPUSH
17879: CALL_OW 120
// wait ( 0 0$5 ) ;
17883: LD_INT 175
17885: PPUSH
17886: CALL_OW 67
// DialogueOn ;
17890: CALL_OW 6
// if IsOK ( Dolgov ) then
17894: LD_EXP 45
17898: PPUSH
17899: CALL_OW 302
17903: IFFALSE 17917
// Say ( Dolgov , DVsevolod-Dol-1 ) ;
17905: LD_EXP 45
17909: PPUSH
17910: LD_STRING DVsevolod-Dol-1
17912: PPUSH
17913: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-1 ) ;
17917: LD_EXP 51
17921: PPUSH
17922: LD_STRING DVsevolod-Vse-1
17924: PPUSH
17925: CALL_OW 94
// if IsOK ( Gleb ) then
17929: LD_EXP 42
17933: PPUSH
17934: CALL_OW 302
17938: IFFALSE 17976
// begin Say ( Burlak , DVsevolod-Bur-1 ) ;
17940: LD_EXP 39
17944: PPUSH
17945: LD_STRING DVsevolod-Bur-1
17947: PPUSH
17948: CALL_OW 88
// Say ( Gleb , DVsevolod-Glb-1 ) ;
17952: LD_EXP 42
17956: PPUSH
17957: LD_STRING DVsevolod-Glb-1
17959: PPUSH
17960: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-2 ) ;
17964: LD_EXP 51
17968: PPUSH
17969: LD_STRING DVsevolod-Vse-2
17971: PPUSH
17972: CALL_OW 94
// end ; Say ( Burlak , DVsevolod-Bur-2 ) ;
17976: LD_EXP 39
17980: PPUSH
17981: LD_STRING DVsevolod-Bur-2
17983: PPUSH
17984: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-3 ) ;
17988: LD_EXP 51
17992: PPUSH
17993: LD_STRING DVsevolod-Vse-3
17995: PPUSH
17996: CALL_OW 94
// Say ( Burlak , DVsevolod-Bur-3 ) ;
18000: LD_EXP 39
18004: PPUSH
18005: LD_STRING DVsevolod-Bur-3
18007: PPUSH
18008: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-4 ) ;
18012: LD_EXP 51
18016: PPUSH
18017: LD_STRING DVsevolod-Vse-4
18019: PPUSH
18020: CALL_OW 94
// Say ( Burlak , DVsevolod-Bur-4 ) ;
18024: LD_EXP 39
18028: PPUSH
18029: LD_STRING DVsevolod-Bur-4
18031: PPUSH
18032: CALL_OW 88
// if IsOK ( Gleb ) then
18036: LD_EXP 42
18040: PPUSH
18041: CALL_OW 302
18045: IFFALSE 18073
// begin Say ( Gleb , DVsevolod-Glb-4 ) ;
18047: LD_EXP 42
18051: PPUSH
18052: LD_STRING DVsevolod-Glb-4
18054: PPUSH
18055: CALL_OW 88
// Say ( Burlak , DVsevolod-Bur-5 ) ;
18059: LD_EXP 39
18063: PPUSH
18064: LD_STRING DVsevolod-Bur-5
18066: PPUSH
18067: CALL_OW 88
// end else
18071: GO 18147
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-RSol1-5 ,  , false , true ) ;
18073: LD_INT 22
18075: PUSH
18076: LD_INT 3
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 21
18085: PUSH
18086: LD_INT 1
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 50
18095: PUSH
18096: EMPTY
18097: LIST
18098: PUSH
18099: LD_INT 26
18101: PUSH
18102: LD_INT 1
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 23
18111: PUSH
18112: LD_INT 3
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: PPUSH
18126: CALL_OW 69
18130: PPUSH
18131: LD_STRING DVsevolod-RSol1-5
18133: PPUSH
18134: LD_STRING 
18136: PPUSH
18137: LD_INT 0
18139: PPUSH
18140: LD_INT 1
18142: PPUSH
18143: CALL 12102 0 5
// Say ( Burlak , DVsevolod-Bur-6 ) ;
18147: LD_EXP 39
18151: PPUSH
18152: LD_STRING DVsevolod-Bur-6
18154: PPUSH
18155: CALL_OW 88
// CenterOnXY ( 59 , 40 ) ;
18159: LD_INT 59
18161: PPUSH
18162: LD_INT 40
18164: PPUSH
18165: CALL_OW 84
// RevealFogArea ( 3 , TerminalBaseArea ) ;
18169: LD_INT 3
18171: PPUSH
18172: LD_INT 4
18174: PPUSH
18175: CALL_OW 332
// if IsOK ( Dolgov ) then
18179: LD_EXP 45
18183: PPUSH
18184: CALL_OW 302
18188: IFFALSE 18204
// Say ( Dolgov , DVsevolod-Dol-6 ) else
18190: LD_EXP 45
18194: PPUSH
18195: LD_STRING DVsevolod-Dol-6
18197: PPUSH
18198: CALL_OW 88
18202: GO 18278
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-Dol-6 ,  , false , true ) ;
18204: LD_INT 22
18206: PUSH
18207: LD_INT 3
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 21
18216: PUSH
18217: LD_INT 1
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 50
18226: PUSH
18227: EMPTY
18228: LIST
18229: PUSH
18230: LD_INT 26
18232: PUSH
18233: LD_INT 1
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 23
18242: PUSH
18243: LD_INT 3
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: PPUSH
18257: CALL_OW 69
18261: PPUSH
18262: LD_STRING DVsevolod-Dol-6
18264: PPUSH
18265: LD_STRING 
18267: PPUSH
18268: LD_INT 0
18270: PPUSH
18271: LD_INT 1
18273: PPUSH
18274: CALL 12102 0 5
// Say ( Burlak , DVsevolod-Bur-7 ) ;
18278: LD_EXP 39
18282: PPUSH
18283: LD_STRING DVsevolod-Bur-7
18285: PPUSH
18286: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-7 ) ;
18290: LD_EXP 51
18294: PPUSH
18295: LD_STRING DVsevolod-Vse-7
18297: PPUSH
18298: CALL_OW 94
// DialogueOff ;
18302: CALL_OW 7
// ChangeMissionObjectives ( MVsevolod ) ;
18306: LD_STRING MVsevolod
18308: PPUSH
18309: CALL_OW 337
// enableVsevolodCounter = true ;
18313: LD_ADDR_EXP 22
18317: PUSH
18318: LD_INT 1
18320: ST_TO_ADDR
// canGoNorth = true ;
18321: LD_ADDR_EXP 21
18325: PUSH
18326: LD_INT 1
18328: ST_TO_ADDR
// PrepareSoldiersInBunkers ;
18329: CALL 3979 0 0
// wait ( 0 0$7 ) ;
18333: LD_INT 245
18335: PPUSH
18336: CALL_OW 67
// belkovSavedIn02 = TestCharacters ( 02_Belkov ) ;
18340: LD_ADDR_VAR 0 1
18344: PUSH
18345: LD_STRING 02_Belkov
18347: PPUSH
18348: CALL_OW 28
18352: ST_TO_ADDR
// DialogueOn ;
18353: CALL_OW 6
// if belkovSavedIn02 then
18357: LD_VAR 0 1
18361: IFFALSE 18562
// begin if IsOK ( Gleb ) then
18363: LD_EXP 42
18367: PPUSH
18368: CALL_OW 302
18372: IFFALSE 18386
// Say ( Gleb , DHelp1-Glb-1 ) ;
18374: LD_EXP 42
18378: PPUSH
18379: LD_STRING DHelp1-Glb-1
18381: PPUSH
18382: CALL_OW 88
// if IsOK ( Dolgov ) then
18386: LD_EXP 45
18390: PPUSH
18391: CALL_OW 302
18395: IFFALSE 18409
// Say ( Dolgov , DHelp1-Dol-1 ) ;
18397: LD_EXP 45
18401: PPUSH
18402: LD_STRING DHelp1-Dol-1
18404: PPUSH
18405: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Gleb , Dolgov , Titov ] ;
18409: LD_ADDR_VAR 0 2
18413: PUSH
18414: LD_INT 22
18416: PUSH
18417: LD_INT 3
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 21
18426: PUSH
18427: LD_INT 1
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 50
18436: PUSH
18437: EMPTY
18438: LIST
18439: PUSH
18440: LD_INT 26
18442: PUSH
18443: LD_INT 1
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 23
18452: PUSH
18453: LD_INT 3
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: PPUSH
18467: CALL_OW 69
18471: PUSH
18472: LD_EXP 42
18476: PUSH
18477: LD_EXP 45
18481: PUSH
18482: LD_EXP 44
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: LIST
18491: DIFF
18492: ST_TO_ADDR
// DialogRandom ( tmp , DHelp1-RSol1-1 ,  , false , true ) ;
18493: LD_VAR 0 2
18497: PPUSH
18498: LD_STRING DHelp1-RSol1-1
18500: PPUSH
18501: LD_STRING 
18503: PPUSH
18504: LD_INT 0
18506: PPUSH
18507: LD_INT 1
18509: PPUSH
18510: CALL 12102 0 5
// if IsOK ( Titov ) then
18514: LD_EXP 44
18518: PPUSH
18519: CALL_OW 302
18523: IFFALSE 18537
// Say ( Titov , DHelp1-Tit-1 ) ;
18525: LD_EXP 44
18529: PPUSH
18530: LD_STRING DHelp1-Tit-1
18532: PPUSH
18533: CALL_OW 88
// if IsOK ( Gleb ) then
18537: LD_EXP 42
18541: PPUSH
18542: CALL_OW 302
18546: IFFALSE 18560
// Say ( Gleb , DHelp1-Glb-2 ) ;
18548: LD_EXP 42
18552: PPUSH
18553: LD_STRING DHelp1-Glb-2
18555: PPUSH
18556: CALL_OW 88
// end else
18560: GO 18773
// begin if IsOK ( Titov ) then
18562: LD_EXP 44
18566: PPUSH
18567: CALL_OW 302
18571: IFFALSE 18585
// Say ( Titov , DHelp2-Tit-1 ) ;
18573: LD_EXP 44
18577: PPUSH
18578: LD_STRING DHelp2-Tit-1
18580: PPUSH
18581: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Gleb , Titov ] ;
18585: LD_ADDR_VAR 0 2
18589: PUSH
18590: LD_INT 22
18592: PUSH
18593: LD_INT 3
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 21
18602: PUSH
18603: LD_INT 1
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 50
18612: PUSH
18613: EMPTY
18614: LIST
18615: PUSH
18616: LD_INT 26
18618: PUSH
18619: LD_INT 1
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PUSH
18626: LD_INT 23
18628: PUSH
18629: LD_INT 3
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: PPUSH
18643: CALL_OW 69
18647: PUSH
18648: LD_EXP 42
18652: PUSH
18653: LD_EXP 44
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: DIFF
18662: ST_TO_ADDR
// speaker = DialogRandom ( tmp , DHelp2-RSol1-1 ,  , false , true ) ;
18663: LD_ADDR_VAR 0 3
18667: PUSH
18668: LD_VAR 0 2
18672: PPUSH
18673: LD_STRING DHelp2-RSol1-1
18675: PPUSH
18676: LD_STRING 
18678: PPUSH
18679: LD_INT 0
18681: PPUSH
18682: LD_INT 1
18684: PPUSH
18685: CALL 12102 0 5
18689: ST_TO_ADDR
// if IsOK ( Gleb ) then
18690: LD_EXP 42
18694: PPUSH
18695: CALL_OW 302
18699: IFFALSE 18713
// Say ( Gleb , DHelp2-Glb-1 ) ;
18701: LD_EXP 42
18705: PPUSH
18706: LD_STRING DHelp2-Glb-1
18708: PPUSH
18709: CALL_OW 88
// tmp = tmp diff speaker ;
18713: LD_ADDR_VAR 0 2
18717: PUSH
18718: LD_VAR 0 2
18722: PUSH
18723: LD_VAR 0 3
18727: DIFF
18728: ST_TO_ADDR
// DialogRandom ( tmp , DHelp2-RSol2-1 ,  , false , true ) ;
18729: LD_VAR 0 2
18733: PPUSH
18734: LD_STRING DHelp2-RSol2-1
18736: PPUSH
18737: LD_STRING 
18739: PPUSH
18740: LD_INT 0
18742: PPUSH
18743: LD_INT 1
18745: PPUSH
18746: CALL 12102 0 5
// if IsOK ( Titov ) then
18750: LD_EXP 44
18754: PPUSH
18755: CALL_OW 302
18759: IFFALSE 18773
// Say ( Titov , DHelp2-Tit-2 ) ;
18761: LD_EXP 44
18765: PPUSH
18766: LD_STRING DHelp2-Tit-2
18768: PPUSH
18769: CALL_OW 88
// end ; Say ( Burlak , DHelp3-Bur-1 ) ;
18773: LD_EXP 39
18777: PPUSH
18778: LD_STRING DHelp3-Bur-1
18780: PPUSH
18781: CALL_OW 88
// if IsOK ( Lipshchin ) then
18785: LD_EXP 46
18789: PPUSH
18790: CALL_OW 302
18794: IFFALSE 18810
// Say ( Lipshchin , DHelp3-Lip-1 ) else
18796: LD_EXP 46
18800: PPUSH
18801: LD_STRING DHelp3-Lip-1
18803: PPUSH
18804: CALL_OW 88
18808: GO 18884
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-Dol-6 ,  , false , true ) ;
18810: LD_INT 22
18812: PUSH
18813: LD_INT 3
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 21
18822: PUSH
18823: LD_INT 1
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 50
18832: PUSH
18833: EMPTY
18834: LIST
18835: PUSH
18836: LD_INT 26
18838: PUSH
18839: LD_INT 1
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 23
18848: PUSH
18849: LD_INT 3
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: PPUSH
18863: CALL_OW 69
18867: PPUSH
18868: LD_STRING DVsevolod-Dol-6
18870: PPUSH
18871: LD_STRING 
18873: PPUSH
18874: LD_INT 0
18876: PPUSH
18877: LD_INT 1
18879: PPUSH
18880: CALL 12102 0 5
// Say ( Burlak , DHelp3-Bur-2 ) ;
18884: LD_EXP 39
18888: PPUSH
18889: LD_STRING DHelp3-Bur-2
18891: PPUSH
18892: CALL_OW 88
// DialogueOff ;
18896: CALL_OW 7
// end ;
18900: PPOPN 3
18902: END
// every 0 0$1 trigger claimOvsyenkoBase and not FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] , [ f_type , unit_vehicle ] ] ] ) and FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
18903: LD_EXP 15
18907: PUSH
18908: LD_INT 3
18910: PPUSH
18911: LD_INT 22
18913: PUSH
18914: LD_INT 3
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 2
18923: PUSH
18924: LD_INT 21
18926: PUSH
18927: LD_INT 1
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 59
18936: PUSH
18937: EMPTY
18938: LIST
18939: PUSH
18940: LD_INT 21
18942: PUSH
18943: LD_INT 2
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PPUSH
18960: CALL_OW 70
18964: NOT
18965: AND
18966: PUSH
18967: LD_INT 3
18969: PPUSH
18970: LD_INT 22
18972: PUSH
18973: LD_INT 1
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 2
18982: PUSH
18983: LD_INT 21
18985: PUSH
18986: LD_INT 1
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 21
18995: PUSH
18996: LD_INT 2
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: LIST
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PPUSH
19012: CALL_OW 70
19016: AND
19017: IFFALSE 19184
19019: GO 19021
19021: DISABLE
// begin lostAgainBase = true ;
19022: LD_ADDR_EXP 17
19026: PUSH
19027: LD_INT 1
19029: ST_TO_ADDR
// SetSide ( FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , 1 ) ;
19030: LD_INT 3
19032: PPUSH
19033: LD_INT 22
19035: PUSH
19036: LD_INT 3
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 21
19045: PUSH
19046: LD_INT 3
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PPUSH
19057: CALL_OW 70
19061: PPUSH
19062: LD_INT 1
19064: PPUSH
19065: CALL_OW 235
// if IsOK ( Gleb ) then
19069: LD_EXP 42
19073: PPUSH
19074: CALL_OW 302
19078: IFFALSE 19104
// begin Say ( Gleb , DOvsyenkoCaptured-Glb-1 ) ;
19080: LD_EXP 42
19084: PPUSH
19085: LD_STRING DOvsyenkoCaptured-Glb-1
19087: PPUSH
19088: CALL_OW 88
// Say ( Burlak , DOvsyenkoCaptured-Bur-1 ) ;
19092: LD_EXP 39
19096: PPUSH
19097: LD_STRING DOvsyenkoCaptured-Bur-1
19099: PPUSH
19100: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Gleb , DOvsyenkoCaptured-RSol1-1 ,  , false , true ) ;
19104: LD_INT 22
19106: PUSH
19107: LD_INT 3
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 21
19116: PUSH
19117: LD_INT 1
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 50
19126: PUSH
19127: EMPTY
19128: LIST
19129: PUSH
19130: LD_INT 26
19132: PUSH
19133: LD_INT 1
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 23
19142: PUSH
19143: LD_INT 3
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: PPUSH
19157: CALL_OW 69
19161: PUSH
19162: LD_EXP 42
19166: DIFF
19167: PPUSH
19168: LD_STRING DOvsyenkoCaptured-RSol1-1
19170: PPUSH
19171: LD_STRING 
19173: PPUSH
19174: LD_INT 0
19176: PPUSH
19177: LD_INT 1
19179: PPUSH
19180: CALL 12102 0 5
// end ;
19184: END
// every 0 0$1 trigger FilterUnitsInArea ( TrapArea , [ [ f_side , 3 ] , [ f_ok ] ] ) do
19185: LD_INT 12
19187: PPUSH
19188: LD_INT 22
19190: PUSH
19191: LD_INT 3
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 50
19200: PUSH
19201: EMPTY
19202: LIST
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PPUSH
19208: CALL_OW 70
19212: IFFALSE 19221
19214: GO 19216
19216: DISABLE
// PrepareTrap ;
19217: CALL 3800 0 0
19221: END
// every 0 0$1 trigger not dial_TrapDialogBlocker do var tmp , speaker , unit ;
19222: LD_EXP 11
19226: NOT
19227: IFFALSE 19445
19229: GO 19231
19231: DISABLE
19232: LD_INT 0
19234: PPUSH
19235: PPUSH
19236: PPUSH
// begin enable ;
19237: ENABLE
// for unit in trapTeam do
19238: LD_ADDR_VAR 0 3
19242: PUSH
19243: LD_EXP 62
19247: PUSH
19248: FOR_IN
19249: IFFALSE 19443
// if See ( 3 , unit ) then
19251: LD_INT 3
19253: PPUSH
19254: LD_VAR 0 3
19258: PPUSH
19259: CALL_OW 292
19263: IFFALSE 19441
// begin dial_TrapDialogBlocker = true ;
19265: LD_ADDR_EXP 11
19269: PUSH
19270: LD_INT 1
19272: ST_TO_ADDR
// DialogueOn ;
19273: CALL_OW 6
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Gleb ;
19277: LD_ADDR_VAR 0 1
19281: PUSH
19282: LD_INT 22
19284: PUSH
19285: LD_INT 3
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 21
19294: PUSH
19295: LD_INT 1
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 50
19304: PUSH
19305: EMPTY
19306: LIST
19307: PUSH
19308: LD_INT 26
19310: PUSH
19311: LD_INT 1
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 23
19320: PUSH
19321: LD_INT 3
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: PPUSH
19335: CALL_OW 69
19339: PUSH
19340: LD_EXP 42
19344: DIFF
19345: ST_TO_ADDR
// speaker = DialogRandom ( tmp , DPartyAttacked-RSol1-1 ,  , false , true ) ;
19346: LD_ADDR_VAR 0 2
19350: PUSH
19351: LD_VAR 0 1
19355: PPUSH
19356: LD_STRING DPartyAttacked-RSol1-1
19358: PPUSH
19359: LD_STRING 
19361: PPUSH
19362: LD_INT 0
19364: PPUSH
19365: LD_INT 1
19367: PPUSH
19368: CALL 12102 0 5
19372: ST_TO_ADDR
// tmp = tmp diff speaker ;
19373: LD_ADDR_VAR 0 1
19377: PUSH
19378: LD_VAR 0 1
19382: PUSH
19383: LD_VAR 0 2
19387: DIFF
19388: ST_TO_ADDR
// if IsOK ( Gleb ) then
19389: LD_EXP 42
19393: PPUSH
19394: CALL_OW 302
19398: IFFALSE 19412
// Say ( Gleb , DPartyAttacked-Glb-1 ) ;
19400: LD_EXP 42
19404: PPUSH
19405: LD_STRING DPartyAttacked-Glb-1
19407: PPUSH
19408: CALL_OW 88
// DialogRandom ( tmp , DPartyAttacked-RSol1-2 ,  , false , true ) ;
19412: LD_VAR 0 1
19416: PPUSH
19417: LD_STRING DPartyAttacked-RSol1-2
19419: PPUSH
19420: LD_STRING 
19422: PPUSH
19423: LD_INT 0
19425: PPUSH
19426: LD_INT 1
19428: PPUSH
19429: CALL 12102 0 5
// DialogueOff ;
19433: CALL_OW 7
// exit ;
19437: POP
19438: POP
19439: GO 19445
// end ;
19441: GO 19248
19443: POP
19444: POP
// end ;
19445: PPOPN 3
19447: END
// every 0 0$1 trigger not savedVsevolod and IsOK ( Vsevolod ) and FilterUnitsInArea ( TerminalBaseArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ [ f_type , unit_human ] , [ f_nation , nation_russian ] ] , [ f_type , unit_vehicle ] ] ] ) do var nearUnit , unit , maleRandomUnits ;
19448: LD_EXP 19
19452: NOT
19453: PUSH
19454: LD_EXP 51
19458: PPUSH
19459: CALL_OW 302
19463: AND
19464: PUSH
19465: LD_INT 4
19467: PPUSH
19468: LD_INT 22
19470: PUSH
19471: LD_INT 3
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 50
19480: PUSH
19481: EMPTY
19482: LIST
19483: PUSH
19484: LD_INT 2
19486: PUSH
19487: LD_INT 21
19489: PUSH
19490: LD_INT 1
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 23
19499: PUSH
19500: LD_INT 3
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 21
19513: PUSH
19514: LD_INT 2
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: LIST
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: LIST
19530: PPUSH
19531: CALL_OW 70
19535: AND
19536: IFFALSE 20178
19538: GO 19540
19540: DISABLE
19541: LD_INT 0
19543: PPUSH
19544: PPUSH
19545: PPUSH
// begin savedVsevolod = true ;
19546: LD_ADDR_EXP 19
19550: PUSH
19551: LD_INT 1
19553: ST_TO_ADDR
// ChangeMissionObjectives ( MVsevolodOut ) ;
19554: LD_STRING MVsevolodOut
19556: PPUSH
19557: CALL_OW 337
// unit = FilterUnitsInArea ( TerminalBaseArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ [ f_type , unit_human ] , [ f_nation , nation_russian ] ] , [ f_type , unit_vehicle ] ] ] ) ;
19561: LD_ADDR_VAR 0 2
19565: PUSH
19566: LD_INT 4
19568: PPUSH
19569: LD_INT 22
19571: PUSH
19572: LD_INT 3
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 50
19581: PUSH
19582: EMPTY
19583: LIST
19584: PUSH
19585: LD_INT 2
19587: PUSH
19588: LD_INT 21
19590: PUSH
19591: LD_INT 1
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 23
19600: PUSH
19601: LD_INT 3
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 21
19614: PUSH
19615: LD_INT 2
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: LIST
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: LIST
19631: PPUSH
19632: CALL_OW 70
19636: ST_TO_ADDR
// unit = unit [ 1 ] ;
19637: LD_ADDR_VAR 0 2
19641: PUSH
19642: LD_VAR 0 2
19646: PUSH
19647: LD_INT 1
19649: ARRAY
19650: ST_TO_ADDR
// if GetType ( unit ) = unit_vehicle then
19651: LD_VAR 0 2
19655: PPUSH
19656: CALL_OW 247
19660: PUSH
19661: LD_INT 2
19663: EQUAL
19664: IFFALSE 19685
// unit = UnitsInside ( unit ) [ 1 ] ;
19666: LD_ADDR_VAR 0 2
19670: PUSH
19671: LD_VAR 0 2
19675: PPUSH
19676: CALL_OW 313
19680: PUSH
19681: LD_INT 1
19683: ARRAY
19684: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
19685: LD_INT 22
19687: PUSH
19688: LD_INT 6
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PPUSH
19695: CALL_OW 69
19699: PPUSH
19700: LD_INT 3
19702: PPUSH
19703: CALL_OW 235
// if not unit = Burlak then
19707: LD_VAR 0 2
19711: PUSH
19712: LD_EXP 39
19716: EQUAL
19717: NOT
19718: IFFALSE 19895
// begin vsevolodWaitGorky = true ;
19720: LD_ADDR_EXP 20
19724: PUSH
19725: LD_INT 1
19727: ST_TO_ADDR
// DialogueOn ;
19728: CALL_OW 6
// Say ( Vsevolod , DOtherMeetVsev-Vse-1 ) ;
19732: LD_EXP 51
19736: PPUSH
19737: LD_STRING DOtherMeetVsev-Vse-1
19739: PPUSH
19740: CALL_OW 88
// if GetSex ( unit ) = sex_female then
19744: LD_VAR 0 2
19748: PPUSH
19749: CALL_OW 258
19753: PUSH
19754: LD_INT 2
19756: EQUAL
19757: IFFALSE 19877
// begin maleRandomUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff vsevolodTeam ;
19759: LD_ADDR_VAR 0 3
19763: PUSH
19764: LD_INT 22
19766: PUSH
19767: LD_INT 3
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 21
19776: PUSH
19777: LD_INT 1
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 50
19786: PUSH
19787: EMPTY
19788: LIST
19789: PUSH
19790: LD_INT 26
19792: PUSH
19793: LD_INT 1
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 23
19802: PUSH
19803: LD_INT 3
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: PPUSH
19817: CALL_OW 69
19821: PUSH
19822: LD_EXP 52
19826: DIFF
19827: ST_TO_ADDR
// maleRandomUnits = maleRandomUnits diff Gleb ;
19828: LD_ADDR_VAR 0 3
19832: PUSH
19833: LD_VAR 0 3
19837: PUSH
19838: LD_EXP 42
19842: DIFF
19843: ST_TO_ADDR
// if maleRandomUnits then
19844: LD_VAR 0 3
19848: IFFALSE 19875
// DialogRandom ( maleRandomUnits [ 1 ] , DOtherMeetVsev-RSol1-1 ,  , false , true ) ;
19850: LD_VAR 0 3
19854: PUSH
19855: LD_INT 1
19857: ARRAY
19858: PPUSH
19859: LD_STRING DOtherMeetVsev-RSol1-1
19861: PPUSH
19862: LD_STRING 
19864: PPUSH
19865: LD_INT 0
19867: PPUSH
19868: LD_INT 1
19870: PPUSH
19871: CALL 12102 0 5
// end else
19875: GO 19889
// Say ( unit , DOtherMeetVsev-RSol1-1 ) ;
19877: LD_VAR 0 2
19881: PPUSH
19882: LD_STRING DOtherMeetVsev-RSol1-1
19884: PPUSH
19885: CALL_OW 88
// DialogueOff ;
19889: CALL_OW 7
// end else
19893: GO 20178
// begin DialogueOn ;
19895: CALL_OW 6
// Say ( Vsevolod , DMeetVsev-Vse-1 ) ;
19899: LD_EXP 51
19903: PPUSH
19904: LD_STRING DMeetVsev-Vse-1
19906: PPUSH
19907: CALL_OW 88
// Say ( Burlak , DMeetVsev-Bur-1 ) ;
19911: LD_EXP 39
19915: PPUSH
19916: LD_STRING DMeetVsev-Bur-1
19918: PPUSH
19919: CALL_OW 88
// if lostAgainBase then
19923: LD_EXP 17
19927: IFFALSE 19967
// begin Say ( Vsevolod , DMeetVsev2-Vse-1 ) ;
19929: LD_EXP 51
19933: PPUSH
19934: LD_STRING DMeetVsev2-Vse-1
19936: PPUSH
19937: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-1 ) ;
19941: LD_EXP 39
19945: PPUSH
19946: LD_STRING DMeetVsev2-Bur-1
19948: PPUSH
19949: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-2 ) ;
19953: LD_EXP 51
19957: PPUSH
19958: LD_STRING DMeetVsev2-Vse-2
19960: PPUSH
19961: CALL_OW 88
// end else
19965: GO 20003
// begin Say ( Vsevolod , DMeetVsev2-Vse-2a ) ;
19967: LD_EXP 51
19971: PPUSH
19972: LD_STRING DMeetVsev2-Vse-2a
19974: PPUSH
19975: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-2 ) ;
19979: LD_EXP 39
19983: PPUSH
19984: LD_STRING DMeetVsev2-Bur-2
19986: PPUSH
19987: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-3 ) ;
19991: LD_EXP 51
19995: PPUSH
19996: LD_STRING DMeetVsev2-Vse-3
19998: PPUSH
19999: CALL_OW 88
// end ; Say ( Burlak , DMeetVsev3-Bur-1 ) ;
20003: LD_EXP 39
20007: PPUSH
20008: LD_STRING DMeetVsev3-Bur-1
20010: PPUSH
20011: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-1 ) ;
20015: LD_EXP 51
20019: PPUSH
20020: LD_STRING DMeetVsev3-Vse-1
20022: PPUSH
20023: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-2 ) ;
20027: LD_EXP 39
20031: PPUSH
20032: LD_STRING DMeetVsev3-Bur-2
20034: PPUSH
20035: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-2 ) ;
20039: LD_EXP 51
20043: PPUSH
20044: LD_STRING DMeetVsev3-Vse-2
20046: PPUSH
20047: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-3 ) ;
20051: LD_EXP 39
20055: PPUSH
20056: LD_STRING DMeetVsev3-Bur-3
20058: PPUSH
20059: CALL_OW 88
// if stevensStatus = 0 then
20063: LD_EXP 4
20067: PUSH
20068: LD_INT 0
20070: EQUAL
20071: IFFALSE 20085
// Say ( Burlak , DMeetVsev4-Bur-1 ) ;
20073: LD_EXP 39
20077: PPUSH
20078: LD_STRING DMeetVsev4-Bur-1
20080: PPUSH
20081: CALL_OW 88
// Say ( Burlak , DMeetVsev5-Bur-1 ) ;
20085: LD_EXP 39
20089: PPUSH
20090: LD_STRING DMeetVsev5-Bur-1
20092: PPUSH
20093: CALL_OW 88
// Say ( Vsevolod , DMeetVsev5-Vse-1 ) ;
20097: LD_EXP 51
20101: PPUSH
20102: LD_STRING DMeetVsev5-Vse-1
20104: PPUSH
20105: CALL_OW 88
// Say ( Burlak , DMeetVsev6-Bur-1 ) ;
20109: LD_EXP 39
20113: PPUSH
20114: LD_STRING DMeetVsev6-Bur-1
20116: PPUSH
20117: CALL_OW 88
// Say ( Vsevolod , DMeetVsev6-Vse-1 ) ;
20121: LD_EXP 51
20125: PPUSH
20126: LD_STRING DMeetVsev6-Vse-1
20128: PPUSH
20129: CALL_OW 88
// DialogueOff ;
20133: CALL_OW 7
// wait ( 0 0$20 ) ;
20137: LD_INT 700
20139: PPUSH
20140: CALL_OW 67
// PrepareConvoy ;
20144: CALL 4023 0 0
// ComMoveXY ( convoyTeam , 57 , 40 ) ;
20148: LD_EXP 63
20152: PPUSH
20153: LD_INT 57
20155: PPUSH
20156: LD_INT 40
20158: PPUSH
20159: CALL_OW 111
// AddComMoveXY ( convoyTeam , 37 , 59 ) ;
20163: LD_EXP 63
20167: PPUSH
20168: LD_INT 37
20170: PPUSH
20171: LD_INT 59
20173: PPUSH
20174: CALL_OW 171
// end ; end ;
20178: PPOPN 3
20180: END
// every 0 0$1 trigger vsevolodWaitGorky and GetDistUnits ( Vsevolod , Burlak ) <= 7 do
20181: LD_EXP 20
20185: PUSH
20186: LD_EXP 51
20190: PPUSH
20191: LD_EXP 39
20195: PPUSH
20196: CALL_OW 296
20200: PUSH
20201: LD_INT 7
20203: LESSEQUAL
20204: AND
20205: IFFALSE 20501
20207: GO 20209
20209: DISABLE
// begin vsevolodWaitGorky = false ;
20210: LD_ADDR_EXP 20
20214: PUSH
20215: LD_INT 0
20217: ST_TO_ADDR
// DialogueOn ;
20218: CALL_OW 6
// Say ( Vsevolod , DMeetVsev-Vse-1 ) ;
20222: LD_EXP 51
20226: PPUSH
20227: LD_STRING DMeetVsev-Vse-1
20229: PPUSH
20230: CALL_OW 88
// Say ( Burlak , DMeetVsev-Bur-1 ) ;
20234: LD_EXP 39
20238: PPUSH
20239: LD_STRING DMeetVsev-Bur-1
20241: PPUSH
20242: CALL_OW 88
// if lostAgainBase then
20246: LD_EXP 17
20250: IFFALSE 20290
// begin Say ( Vsevolod , DMeetVsev2-Vse-1 ) ;
20252: LD_EXP 51
20256: PPUSH
20257: LD_STRING DMeetVsev2-Vse-1
20259: PPUSH
20260: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-1 ) ;
20264: LD_EXP 39
20268: PPUSH
20269: LD_STRING DMeetVsev2-Bur-1
20271: PPUSH
20272: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-2 ) ;
20276: LD_EXP 51
20280: PPUSH
20281: LD_STRING DMeetVsev2-Vse-2
20283: PPUSH
20284: CALL_OW 88
// end else
20288: GO 20326
// begin Say ( Vsevolod , DMeetVsev2-Vse-2a ) ;
20290: LD_EXP 51
20294: PPUSH
20295: LD_STRING DMeetVsev2-Vse-2a
20297: PPUSH
20298: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-2 ) ;
20302: LD_EXP 39
20306: PPUSH
20307: LD_STRING DMeetVsev2-Bur-2
20309: PPUSH
20310: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-3 ) ;
20314: LD_EXP 51
20318: PPUSH
20319: LD_STRING DMeetVsev2-Vse-3
20321: PPUSH
20322: CALL_OW 88
// end ; Say ( Burlak , DMeetVsev3-Bur-1 ) ;
20326: LD_EXP 39
20330: PPUSH
20331: LD_STRING DMeetVsev3-Bur-1
20333: PPUSH
20334: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-1 ) ;
20338: LD_EXP 51
20342: PPUSH
20343: LD_STRING DMeetVsev3-Vse-1
20345: PPUSH
20346: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-2 ) ;
20350: LD_EXP 39
20354: PPUSH
20355: LD_STRING DMeetVsev3-Bur-2
20357: PPUSH
20358: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-2 ) ;
20362: LD_EXP 51
20366: PPUSH
20367: LD_STRING DMeetVsev3-Vse-2
20369: PPUSH
20370: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-3 ) ;
20374: LD_EXP 39
20378: PPUSH
20379: LD_STRING DMeetVsev3-Bur-3
20381: PPUSH
20382: CALL_OW 88
// if stevensStatus = 0 then
20386: LD_EXP 4
20390: PUSH
20391: LD_INT 0
20393: EQUAL
20394: IFFALSE 20408
// Say ( Burlak , DMeetVsev4-Bur-1 ) ;
20396: LD_EXP 39
20400: PPUSH
20401: LD_STRING DMeetVsev4-Bur-1
20403: PPUSH
20404: CALL_OW 88
// Say ( Burlak , DMeetVsev5-Bur-1 ) ;
20408: LD_EXP 39
20412: PPUSH
20413: LD_STRING DMeetVsev5-Bur-1
20415: PPUSH
20416: CALL_OW 88
// Say ( Vsevolod , DMeetVsev5-Vse-1 ) ;
20420: LD_EXP 51
20424: PPUSH
20425: LD_STRING DMeetVsev5-Vse-1
20427: PPUSH
20428: CALL_OW 88
// Say ( Vsevolod , DMeetVsev6-Vse-1 ) ;
20432: LD_EXP 51
20436: PPUSH
20437: LD_STRING DMeetVsev6-Vse-1
20439: PPUSH
20440: CALL_OW 88
// Say ( Burlak , DMeetVsev6-Bur-1 ) ;
20444: LD_EXP 39
20448: PPUSH
20449: LD_STRING DMeetVsev6-Bur-1
20451: PPUSH
20452: CALL_OW 88
// DialogueOff ;
20456: CALL_OW 7
// wait ( 0 0$20 ) ;
20460: LD_INT 700
20462: PPUSH
20463: CALL_OW 67
// PrepareConvoy ;
20467: CALL 4023 0 0
// ComMoveXY ( convoyTeam , 57 , 40 ) ;
20471: LD_EXP 63
20475: PPUSH
20476: LD_INT 57
20478: PPUSH
20479: LD_INT 40
20481: PPUSH
20482: CALL_OW 111
// AddComMoveXY ( convoyTeam , 37 , 59 ) ;
20486: LD_EXP 63
20490: PPUSH
20491: LD_INT 37
20493: PPUSH
20494: LD_INT 59
20496: PPUSH
20497: CALL_OW 171
// end ;
20501: END
// every 0 0$1 trigger not dial_ConvoyDialogBlocker do var tmp , speaker , unit ;
20502: LD_EXP 12
20506: NOT
20507: IFFALSE 20637
20509: GO 20511
20511: DISABLE
20512: LD_INT 0
20514: PPUSH
20515: PPUSH
20516: PPUSH
// begin enable ;
20517: ENABLE
// for unit in convoyTeam do
20518: LD_ADDR_VAR 0 3
20522: PUSH
20523: LD_EXP 63
20527: PUSH
20528: FOR_IN
20529: IFFALSE 20635
// if See ( 3 , unit ) and not IsInArea ( unit , InsideBaseArea ) then
20531: LD_INT 3
20533: PPUSH
20534: LD_VAR 0 3
20538: PPUSH
20539: CALL_OW 292
20543: PUSH
20544: LD_VAR 0 3
20548: PPUSH
20549: LD_INT 19
20551: PPUSH
20552: CALL_OW 308
20556: NOT
20557: AND
20558: IFFALSE 20633
// begin dial_ConvoyDialogBlocker = true ;
20560: LD_ADDR_EXP 12
20564: PUSH
20565: LD_INT 1
20567: ST_TO_ADDR
// DialogueOn ;
20568: CALL_OW 6
// speaker = UnitFilter ( convoyTeam , [ f_type , unit_human ] ) [ 1 ] ;
20572: LD_ADDR_VAR 0 2
20576: PUSH
20577: LD_EXP 63
20581: PPUSH
20582: LD_INT 21
20584: PUSH
20585: LD_INT 1
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PPUSH
20592: CALL_OW 72
20596: PUSH
20597: LD_INT 1
20599: ARRAY
20600: ST_TO_ADDR
// Say ( speaker , DTruck-Sol1-1 ) ;
20601: LD_VAR 0 2
20605: PPUSH
20606: LD_STRING DTruck-Sol1-1
20608: PPUSH
20609: CALL_OW 88
// Say ( Burlak , DTruck-Bur-1 ) ;
20613: LD_EXP 39
20617: PPUSH
20618: LD_STRING DTruck-Bur-1
20620: PPUSH
20621: CALL_OW 88
// DialogueOff ;
20625: CALL_OW 7
// exit ;
20629: POP
20630: POP
20631: GO 20637
// end ;
20633: GO 20528
20635: POP
20636: POP
// end ;
20637: PPOPN 3
20639: END
// every 0 0$1 trigger timeToAttack >= vsevolodSaveTime do
20640: LD_EXP 26
20644: PUSH
20645: LD_EXP 38
20649: GREATEREQUAL
20650: IFFALSE 20689
20652: GO 20654
20654: DISABLE
// begin PrepareAttack ;
20655: CALL 4204 0 0
// ComAgressiveMove ( attackTeam , 60 , 41 ) ;
20659: LD_EXP 64
20663: PPUSH
20664: LD_INT 60
20666: PPUSH
20667: LD_INT 41
20669: PPUSH
20670: CALL_OW 114
// AddComAgressiveMove ( attackTeam , 107 , 125 ) ;
20674: LD_EXP 64
20678: PPUSH
20679: LD_INT 107
20681: PPUSH
20682: LD_INT 125
20684: PPUSH
20685: CALL_OW 174
// end ;
20689: END
// every 1 trigger not savedVsevolod and GetLives ( Vsevolod ) <= 500 do
20690: LD_EXP 19
20694: NOT
20695: PUSH
20696: LD_EXP 51
20700: PPUSH
20701: CALL_OW 256
20705: PUSH
20706: LD_INT 500
20708: LESSEQUAL
20709: AND
20710: IFFALSE 20735
20712: GO 20714
20714: DISABLE
// begin DialogueOn ;
20715: CALL_OW 6
// SayRadio ( Vsevolod , DDieVsev2-Vse-1 ) ;
20719: LD_EXP 51
20723: PPUSH
20724: LD_STRING DDieVsev2-Vse-1
20726: PPUSH
20727: CALL_OW 94
// DialogueOff ;
20731: CALL_OW 7
// end ;
20735: END
// export function Dial_ResearchTauField ; var speaker , sci , randomTalkDialog ; begin
20736: LD_INT 0
20738: PPUSH
20739: PPUSH
20740: PPUSH
20741: PPUSH
// DialogueOn ;
20742: CALL_OW 6
// if IsOK ( Petrosyan ) then
20746: LD_EXP 43
20750: PPUSH
20751: CALL_OW 302
20755: IFFALSE 20771
// Say ( Petrosyan , DStasis-Pty-1 ) else
20757: LD_EXP 43
20761: PPUSH
20762: LD_STRING DStasis-Pty-1
20764: PPUSH
20765: CALL_OW 88
20769: GO 20993
// if IsOK ( Dolgov ) then
20771: LD_EXP 45
20775: PPUSH
20776: CALL_OW 302
20780: IFFALSE 20796
// Say ( Dolgov , DStasis-Dol-1 ) else
20782: LD_EXP 45
20786: PPUSH
20787: LD_STRING DStasis-Dol-1
20789: PPUSH
20790: CALL_OW 88
20794: GO 20993
// begin sci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] , [ f_nation , nation_russian ] ] ) diff Burlak ;
20796: LD_ADDR_VAR 0 3
20800: PUSH
20801: LD_INT 22
20803: PUSH
20804: LD_INT 3
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 21
20813: PUSH
20814: LD_INT 1
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 50
20823: PUSH
20824: EMPTY
20825: LIST
20826: PUSH
20827: LD_INT 26
20829: PUSH
20830: LD_INT 1
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 25
20839: PUSH
20840: LD_INT 4
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 23
20849: PUSH
20850: LD_INT 3
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: PPUSH
20865: CALL_OW 69
20869: PUSH
20870: LD_EXP 39
20874: DIFF
20875: ST_TO_ADDR
// if not sci then
20876: LD_VAR 0 3
20880: NOT
20881: IFFALSE 20952
// sci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Burlak ;
20883: LD_ADDR_VAR 0 3
20887: PUSH
20888: LD_INT 22
20890: PUSH
20891: LD_INT 3
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 21
20900: PUSH
20901: LD_INT 1
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 50
20910: PUSH
20911: EMPTY
20912: LIST
20913: PUSH
20914: LD_INT 26
20916: PUSH
20917: LD_INT 1
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 23
20926: PUSH
20927: LD_INT 3
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: PPUSH
20941: CALL_OW 69
20945: PUSH
20946: LD_EXP 39
20950: DIFF
20951: ST_TO_ADDR
// if sci then
20952: LD_VAR 0 3
20956: IFFALSE 20993
// begin speaker = DialogRandom ( sci , DStasis-RSol1-1 ,  , false , true ) ;
20958: LD_ADDR_VAR 0 2
20962: PUSH
20963: LD_VAR 0 3
20967: PPUSH
20968: LD_STRING DStasis-RSol1-1
20970: PPUSH
20971: LD_STRING 
20973: PPUSH
20974: LD_INT 0
20976: PPUSH
20977: LD_INT 1
20979: PPUSH
20980: CALL 12102 0 5
20984: ST_TO_ADDR
// randomTalkDialog = true ;
20985: LD_ADDR_VAR 0 4
20989: PUSH
20990: LD_INT 1
20992: ST_TO_ADDR
// end ; end ; if IsOK ( Petrosyan ) or IsOK ( Dolgov ) or randomTalkDialog then
20993: LD_EXP 43
20997: PPUSH
20998: CALL_OW 302
21002: PUSH
21003: LD_EXP 45
21007: PPUSH
21008: CALL_OW 302
21012: OR
21013: PUSH
21014: LD_VAR 0 4
21018: OR
21019: IFFALSE 21116
// begin Say ( Burlak , DStasis-Bur-1 ) ;
21021: LD_EXP 39
21025: PPUSH
21026: LD_STRING DStasis-Bur-1
21028: PPUSH
21029: CALL_OW 88
// if IsOK ( Petrosyan ) then
21033: LD_EXP 43
21037: PPUSH
21038: CALL_OW 302
21042: IFFALSE 21058
// Say ( Petrosyan , DStasis-Pty-2 ) else
21044: LD_EXP 43
21048: PPUSH
21049: LD_STRING DStasis-Pty-2
21051: PPUSH
21052: CALL_OW 88
21056: GO 21104
// if IsOK ( Dolgov ) then
21058: LD_EXP 45
21062: PPUSH
21063: CALL_OW 302
21067: IFFALSE 21083
// Say ( Dolgov , DStasis-Dol-2 ) else
21069: LD_EXP 45
21073: PPUSH
21074: LD_STRING DStasis-Dol-2
21076: PPUSH
21077: CALL_OW 88
21081: GO 21104
// DialogRandom ( speaker , DStasis-RSol1-2 ,  , false , true ) ;
21083: LD_VAR 0 2
21087: PPUSH
21088: LD_STRING DStasis-RSol1-2
21090: PPUSH
21091: LD_STRING 
21093: PPUSH
21094: LD_INT 0
21096: PPUSH
21097: LD_INT 1
21099: PPUSH
21100: CALL 12102 0 5
// Say ( Burlak , DStasis-Bur-2 ) ;
21104: LD_EXP 39
21108: PPUSH
21109: LD_STRING DStasis-Bur-2
21111: PPUSH
21112: CALL_OW 88
// end ; DialogueOff ;
21116: CALL_OW 7
// if GetTech ( tech_SibEng , 3 ) = state_researched then
21120: LD_INT 22
21122: PPUSH
21123: LD_INT 3
21125: PPUSH
21126: CALL_OW 321
21130: PUSH
21131: LD_INT 2
21133: EQUAL
21134: IFFALSE 21143
// ChangeMissionObjectives ( MOutResearch ) ;
21136: LD_STRING MOutResearch
21138: PPUSH
21139: CALL_OW 337
// end ;
21143: LD_VAR 0 1
21147: RET
// every 0 0$01 trigger GetTech ( tech_SibEng , 3 ) = state_researched and GetTech ( tech_TauField , 3 ) = state_researched and not dial_EndMissionDialogBlocker do var depots , depot , sibCounter ;
21148: LD_INT 22
21150: PPUSH
21151: LD_INT 3
21153: PPUSH
21154: CALL_OW 321
21158: PUSH
21159: LD_INT 2
21161: EQUAL
21162: PUSH
21163: LD_INT 30
21165: PPUSH
21166: LD_INT 3
21168: PPUSH
21169: CALL_OW 321
21173: PUSH
21174: LD_INT 2
21176: EQUAL
21177: AND
21178: PUSH
21179: LD_EXP 14
21183: NOT
21184: AND
21185: IFFALSE 21528
21187: GO 21189
21189: DISABLE
21190: LD_INT 0
21192: PPUSH
21193: PPUSH
21194: PPUSH
// begin wait ( 0 0$15 ) ;
21195: LD_INT 525
21197: PPUSH
21198: CALL_OW 67
// depots = FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21202: LD_ADDR_VAR 0 1
21206: PUSH
21207: LD_INT 22
21209: PUSH
21210: LD_INT 3
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 50
21219: PUSH
21220: EMPTY
21221: LIST
21222: PUSH
21223: LD_INT 21
21225: PUSH
21226: LD_INT 3
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 2
21235: PUSH
21236: LD_INT 30
21238: PUSH
21239: LD_INT 0
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 30
21248: PUSH
21249: LD_INT 1
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: LIST
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: PPUSH
21267: CALL_OW 69
21271: ST_TO_ADDR
// sibCounter = 0 ;
21272: LD_ADDR_VAR 0 3
21276: PUSH
21277: LD_INT 0
21279: ST_TO_ADDR
// for depot in depots do
21280: LD_ADDR_VAR 0 2
21284: PUSH
21285: LD_VAR 0 1
21289: PUSH
21290: FOR_IN
21291: IFFALSE 21324
// sibCounter = sibCounter + GetResourceType ( GetBase ( depot ) , mat_siberit ) ;
21293: LD_ADDR_VAR 0 3
21297: PUSH
21298: LD_VAR 0 3
21302: PUSH
21303: LD_VAR 0 2
21307: PPUSH
21308: CALL_OW 274
21312: PPUSH
21313: LD_INT 3
21315: PPUSH
21316: CALL_OW 275
21320: PLUS
21321: ST_TO_ADDR
21322: GO 21290
21324: POP
21325: POP
// if sibCounter >= 100 then
21326: LD_VAR 0 3
21330: PUSH
21331: LD_INT 100
21333: GREATEREQUAL
21334: IFFALSE 21520
// begin ChangeMissionObjectives ( MOutMine ) ;
21336: LD_STRING MOutMine
21338: PPUSH
21339: CALL_OW 337
// dial_EndMissionDialogBlocker = true ;
21343: LD_ADDR_EXP 14
21347: PUSH
21348: LD_INT 1
21350: ST_TO_ADDR
// DialogueOn ;
21351: CALL_OW 6
// SayRadio ( Platonov , DNextMiss1-Pla-1 ) ;
21355: LD_EXP 47
21359: PPUSH
21360: LD_STRING DNextMiss1-Pla-1
21362: PPUSH
21363: CALL_OW 94
// if not savedVsevolod then
21367: LD_EXP 19
21371: NOT
21372: IFFALSE 21418
// begin SayRadio ( Platonov , DNextMiss2-Pla-1 ) ;
21374: LD_EXP 47
21378: PPUSH
21379: LD_STRING DNextMiss2-Pla-1
21381: PPUSH
21382: CALL_OW 94
// Say ( Burlak , DNextMiss4-Bur-1 ) ;
21386: LD_EXP 39
21390: PPUSH
21391: LD_STRING DNextMiss4-Bur-1
21393: PPUSH
21394: CALL_OW 88
// SayRadio ( Vsevolod , DDieVsev1-Vse-1 ) ;
21398: LD_EXP 51
21402: PPUSH
21403: LD_STRING DDieVsev1-Vse-1
21405: PPUSH
21406: CALL_OW 94
// ForceFinishGame ;
21410: CALL 22201 0 0
// exit ;
21414: GO 21528
// end else
21416: GO 21454
// begin SayRadio ( Platonov , DNextMiss3-Pla-1 ) ;
21418: LD_EXP 47
21422: PPUSH
21423: LD_STRING DNextMiss3-Pla-1
21425: PPUSH
21426: CALL_OW 94
// SayRadio ( Platonov , DNextMiss4-Pla-1 ) ;
21430: LD_EXP 47
21434: PPUSH
21435: LD_STRING DNextMiss4-Pla-1
21437: PPUSH
21438: CALL_OW 94
// Say ( Burlak , DNextMiss4-Bur-1 ) ;
21442: LD_EXP 39
21446: PPUSH
21447: LD_STRING DNextMiss4-Bur-1
21449: PPUSH
21450: CALL_OW 88
// end ; DialogueOff ;
21454: CALL_OW 7
// SelectCharacters ;
21458: CALL 15376 0 0
// canSpawnReinforces = true ;
21462: LD_ADDR_EXP 23
21466: PUSH
21467: LD_INT 1
21469: ST_TO_ADDR
// canRemoveUnits = true ;
21470: LD_ADDR_EXP 25
21474: PUSH
21475: LD_INT 1
21477: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_friend , true ) ;
21478: LD_INT 1
21480: PPUSH
21481: LD_INT 6
21483: PPUSH
21484: LD_INT 1
21486: PPUSH
21487: LD_INT 1
21489: PPUSH
21490: CALL_OW 80
// SetAreaMapShow ( ExitMapArea , 1 ) ;
21494: LD_INT 14
21496: PPUSH
21497: LD_INT 1
21499: PPUSH
21500: CALL_OW 424
// ChangeMissionObjectives ( MOutResearch ) ;
21504: LD_STRING MOutResearch
21506: PPUSH
21507: CALL_OW 337
// ChangeMissionObjectives ( MCars ) ;
21511: LD_STRING MCars
21513: PPUSH
21514: CALL_OW 337
// exit ;
21518: GO 21528
// end ; wait ( 0 0$10 ) ;
21520: LD_INT 350
21522: PPUSH
21523: CALL_OW 67
// enable ;
21527: ENABLE
// end ;
21528: PPOPN 3
21530: END
// every 0 0$1 trigger canRemoveUnits do var un ;
21531: LD_EXP 25
21535: IFFALSE 21645
21537: GO 21539
21539: DISABLE
21540: LD_INT 0
21542: PPUSH
// begin enable ;
21543: ENABLE
// SetLives ( Vsevolod , 1000 ) ;
21544: LD_EXP 51
21548: PPUSH
21549: LD_INT 1000
21551: PPUSH
21552: CALL_OW 234
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , ExitMapArea ) ;
21556: LD_INT 22
21558: PUSH
21559: LD_INT 6
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 21
21568: PUSH
21569: LD_INT 1
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PPUSH
21580: CALL_OW 69
21584: PPUSH
21585: LD_INT 14
21587: PPUSH
21588: CALL_OW 113
// for un in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
21592: LD_ADDR_VAR 0 1
21596: PUSH
21597: LD_INT 14
21599: PPUSH
21600: LD_INT 22
21602: PUSH
21603: LD_INT 6
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 21
21612: PUSH
21613: LD_INT 1
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PPUSH
21624: CALL_OW 70
21628: PUSH
21629: FOR_IN
21630: IFFALSE 21643
// RemoveUnit ( un ) ;
21632: LD_VAR 0 1
21636: PPUSH
21637: CALL_OW 64
21641: GO 21629
21643: POP
21644: POP
// end ;
21645: PPOPN 1
21647: END
// every 1 trigger not canGoNorth and FilterUnitsInArea ( NorthBlockerArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do var unit ;
21648: LD_EXP 21
21652: NOT
21653: PUSH
21654: LD_INT 15
21656: PPUSH
21657: LD_INT 22
21659: PUSH
21660: LD_INT 3
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: LD_INT 50
21669: PUSH
21670: EMPTY
21671: LIST
21672: PUSH
21673: LD_INT 2
21675: PUSH
21676: LD_INT 21
21678: PUSH
21679: LD_INT 1
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 21
21688: PUSH
21689: LD_INT 2
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: LIST
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: LIST
21705: PPUSH
21706: CALL_OW 70
21710: AND
21711: IFFALSE 21843
21713: GO 21715
21715: DISABLE
21716: LD_INT 0
21718: PPUSH
// begin enable ;
21719: ENABLE
// for unit in FilterUnitsInArea ( NorthBlockerArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
21720: LD_ADDR_VAR 0 1
21724: PUSH
21725: LD_INT 15
21727: PPUSH
21728: LD_INT 22
21730: PUSH
21731: LD_INT 3
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: LD_INT 50
21740: PUSH
21741: EMPTY
21742: LIST
21743: PUSH
21744: LD_INT 2
21746: PUSH
21747: LD_INT 21
21749: PUSH
21750: LD_INT 1
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 21
21759: PUSH
21760: LD_INT 2
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: LIST
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: LIST
21776: PPUSH
21777: CALL_OW 70
21781: PUSH
21782: FOR_IN
21783: IFFALSE 21799
// ComMoveToArea ( unit , NorthBlockerReturnArea ) ;
21785: LD_VAR 0 1
21789: PPUSH
21790: LD_INT 16
21792: PPUSH
21793: CALL_OW 113
21797: GO 21782
21799: POP
21800: POP
// if not dial_NorthBlocker then
21801: LD_EXP 13
21805: NOT
21806: IFFALSE 21843
// begin dial_NorthBlocker = true ;
21808: LD_ADDR_EXP 13
21812: PUSH
21813: LD_INT 1
21815: ST_TO_ADDR
// Say ( Burlak , DMoveNorth-Bur-1 ) ;
21816: LD_EXP 39
21820: PPUSH
21821: LD_STRING DMoveNorth-Bur-1
21823: PPUSH
21824: CALL_OW 88
// wait ( 0 0$5 ) ;
21828: LD_INT 175
21830: PPUSH
21831: CALL_OW 67
// dial_NorthBlocker = false ;
21835: LD_ADDR_EXP 13
21839: PUSH
21840: LD_INT 0
21842: ST_TO_ADDR
// end ; end ;
21843: PPOPN 1
21845: END
// every 2 2$30 trigger canSpawnReinforces do
21846: LD_EXP 23
21850: IFFALSE 21906
21852: GO 21854
21854: DISABLE
// begin SpawnPlatonovReinforces ;
21855: CALL 2897 0 0
// CenterOnXY ( 134 , 233 ) ;
21859: LD_INT 134
21861: PPUSH
21862: LD_INT 233
21864: PPUSH
21865: CALL_OW 84
// if Kirilenkova and IsPlaced ( Kirilenkova ) then
21869: LD_EXP 48
21873: PUSH
21874: LD_EXP 48
21878: PPUSH
21879: CALL_OW 305
21883: AND
21884: IFFALSE 21898
// Say ( Kirilenkova , DMeetKirilenkova-Kir-1 ) ;
21886: LD_EXP 48
21890: PPUSH
21891: LD_STRING DMeetKirilenkova-Kir-1
21893: PPUSH
21894: CALL_OW 88
// canEndMission = true ;
21898: LD_ADDR_EXP 24
21902: PUSH
21903: LD_INT 1
21905: ST_TO_ADDR
// end ; end_of_file
21906: END
// export function Lose_Burlak ; begin
21907: LD_INT 0
21909: PPUSH
// YouLost ( Burlak ) ;
21910: LD_STRING Burlak
21912: PPUSH
21913: CALL_OW 104
// end ;
21917: LD_VAR 0 1
21921: RET
// export function Lose_Gleb ; begin
21922: LD_INT 0
21924: PPUSH
// SayRadio ( Platonov , DKillGleb-Pla-1 ) ;
21925: LD_EXP 47
21929: PPUSH
21930: LD_STRING DKillGleb-Pla-1
21932: PPUSH
21933: CALL_OW 94
// YouLost ( Gleb ) ;
21937: LD_STRING Gleb
21939: PPUSH
21940: CALL_OW 104
// end ;
21944: LD_VAR 0 1
21948: RET
// every 0 0$1 trigger not canEndMission and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_engineer ] , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
21949: LD_EXP 24
21953: NOT
21954: PUSH
21955: LD_INT 22
21957: PUSH
21958: LD_INT 3
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 2
21967: PUSH
21968: LD_INT 25
21970: PUSH
21971: LD_INT 2
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 30
21980: PUSH
21981: LD_INT 1
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 30
21990: PUSH
21991: LD_INT 0
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 30
22000: PUSH
22001: LD_INT 6
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 30
22010: PUSH
22011: LD_INT 7
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 30
22020: PUSH
22021: LD_INT 8
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PPUSH
22041: CALL_OW 69
22045: NOT
22046: AND
22047: IFFALSE 22059
22049: GO 22051
22051: DISABLE
// YouLost ( NoDepotNoEngineerNoLab ) ;
22052: LD_STRING NoDepotNoEngineerNoLab
22054: PPUSH
22055: CALL_OW 104
22059: END
// export function Lose_NoDepotNoEngineerNoLab ; begin
22060: LD_INT 0
22062: PPUSH
// YouLost ( NoDepotNoEngineerNoLab ) ;
22063: LD_STRING NoDepotNoEngineerNoLab
22065: PPUSH
22066: CALL_OW 104
// end ; end_of_file
22070: LD_VAR 0 1
22074: RET
// every 0 0$5 trigger canEndMission and not FilterUnitsExceptArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_and , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ] ) do var units , qr ;
22075: LD_EXP 24
22079: PUSH
22080: LD_INT 14
22082: PPUSH
22083: LD_INT 22
22085: PUSH
22086: LD_INT 3
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 50
22095: PUSH
22096: EMPTY
22097: LIST
22098: PUSH
22099: LD_INT 2
22101: PUSH
22102: LD_INT 21
22104: PUSH
22105: LD_INT 1
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 1
22114: PUSH
22115: LD_INT 21
22117: PUSH
22118: LD_INT 2
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 59
22127: PUSH
22128: EMPTY
22129: LIST
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: LIST
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: LIST
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: LIST
22145: PPUSH
22146: CALL_OW 71
22150: NOT
22151: AND
22152: IFFALSE 22198
22154: GO 22156
22156: DISABLE
22157: LD_INT 0
22159: PPUSH
22160: PPUSH
// begin case Query ( QEndGame ) of 1 :
22161: LD_STRING QEndGame
22163: PPUSH
22164: CALL_OW 97
22168: PUSH
22169: LD_INT 1
22171: DOUBLE
22172: EQUAL
22173: IFTRUE 22177
22175: GO 22196
22177: POP
// begin SetRewards ;
22178: CALL 22225 0 0
// SavePlayerCharacters ;
22182: CALL 22389 0 0
// SaveGlobalVariables ;
22186: CALL 22778 0 0
// YouWin ;
22190: CALL_OW 103
// end ; end ;
22194: GO 22197
22196: POP
// enable ;
22197: ENABLE
// end ;
22198: PPOPN 2
22200: END
// export function ForceFinishGame ; begin
22201: LD_INT 0
22203: PPUSH
// SetRewards ;
22204: CALL 22225 0 0
// SavePlayerCharacters ;
22208: CALL 22389 0 0
// SaveGlobalVariables ;
22212: CALL 22778 0 0
// YouWin ;
22216: CALL_OW 103
// end ;
22220: LD_VAR 0 1
22224: RET
// function SetRewards ; begin
22225: LD_INT 0
22227: PPUSH
// if savedVsevolod then
22228: LD_EXP 19
22232: IFFALSE 22246
// AddMedal ( Vsevolod , 1 ) else
22234: LD_STRING Vsevolod
22236: PPUSH
22237: LD_INT 1
22239: PPUSH
22240: CALL_OW 101
22244: GO 22257
// AddMedal ( Vsevolod , - 1 ) ;
22246: LD_STRING Vsevolod
22248: PPUSH
22249: LD_INT 1
22251: NEG
22252: PPUSH
22253: CALL_OW 101
// if not lostAgainBase then
22257: LD_EXP 17
22261: NOT
22262: IFFALSE 22276
// AddMedal ( Ovsyenko , 1 ) else
22264: LD_STRING Ovsyenko
22266: PPUSH
22267: LD_INT 1
22269: PPUSH
22270: CALL_OW 101
22274: GO 22287
// AddMedal ( Ovsyenko , - 1 ) ;
22276: LD_STRING Ovsyenko
22278: PPUSH
22279: LD_INT 1
22281: NEG
22282: PPUSH
22283: CALL_OW 101
// if GetTech ( tech_MatPred , 3 ) = state_researched then
22287: LD_INT 9
22289: PPUSH
22290: LD_INT 3
22292: PPUSH
22293: CALL_OW 321
22297: PUSH
22298: LD_INT 2
22300: EQUAL
22301: IFFALSE 22315
// AddMedal ( Prediction , 1 ) else
22303: LD_STRING Prediction
22305: PPUSH
22306: LD_INT 1
22308: PPUSH
22309: CALL_OW 101
22313: GO 22326
// AddMedal ( Prediction , - 1 ) ;
22315: LD_STRING Prediction
22317: PPUSH
22318: LD_INT 1
22320: NEG
22321: PPUSH
22322: CALL_OW 101
// GiveMedals ( Main ) ;
22326: LD_STRING Main
22328: PPUSH
22329: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ) ;
22333: LD_INT 22
22335: PUSH
22336: LD_INT 3
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 21
22345: PUSH
22346: LD_INT 1
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: LD_INT 23
22355: PUSH
22356: LD_INT 3
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 50
22365: PUSH
22366: EMPTY
22367: LIST
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: PPUSH
22375: CALL_OW 69
22379: PPUSH
22380: CALL_OW 43
// end ;
22384: LD_VAR 0 1
22388: RET
// function SavePlayerCharacters ; var randomsToSave ; begin
22389: LD_INT 0
22391: PPUSH
22392: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
22393: LD_EXP 39
22397: PPUSH
22398: LD_STRING Burlak
22400: PPUSH
22401: LD_INT 3
22403: PPUSH
22404: CALL 11903 0 3
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
22408: LD_EXP 40
22412: PPUSH
22413: LD_STRING Karamazov
22415: PPUSH
22416: LD_INT 3
22418: PPUSH
22419: CALL 11903 0 3
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
22423: LD_EXP 41
22427: PPUSH
22428: LD_STRING Petrovova
22430: PPUSH
22431: LD_INT 3
22433: PPUSH
22434: CALL 11903 0 3
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
22438: LD_EXP 42
22442: PPUSH
22443: LD_STRING Gleb
22445: PPUSH
22446: LD_INT 3
22448: PPUSH
22449: CALL 11903 0 3
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
22453: LD_EXP 43
22457: PPUSH
22458: LD_STRING Petrosyan
22460: PPUSH
22461: LD_INT 3
22463: PPUSH
22464: CALL 11903 0 3
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
22468: LD_EXP 45
22472: PPUSH
22473: LD_STRING Dolgov
22475: PPUSH
22476: LD_INT 3
22478: PPUSH
22479: CALL 11903 0 3
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
22483: LD_EXP 46
22487: PPUSH
22488: LD_STRING Lipshchin
22490: PPUSH
22491: LD_INT 3
22493: PPUSH
22494: CALL 11903 0 3
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
22498: LD_EXP 44
22502: PPUSH
22503: LD_STRING Titov
22505: PPUSH
22506: LD_INT 3
22508: PPUSH
22509: CALL 11903 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
22513: LD_EXP 48
22517: PPUSH
22518: LD_STRING Kirilenkova
22520: PPUSH
22521: LD_INT 3
22523: PPUSH
22524: CALL 11903 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
22528: LD_EXP 49
22532: PPUSH
22533: LD_STRING Belkov
22535: PPUSH
22536: LD_INT 3
22538: PPUSH
22539: CALL 11903 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
22543: LD_EXP 50
22547: PPUSH
22548: LD_STRING Belkov2
22550: PPUSH
22551: LD_INT 3
22553: PPUSH
22554: CALL 11903 0 3
// ExtSaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
22558: LD_INT 22
22560: PUSH
22561: LD_INT 3
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 21
22570: PUSH
22571: LD_INT 1
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 2
22580: PUSH
22581: LD_INT 25
22583: PUSH
22584: LD_INT 12
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 25
22593: PUSH
22594: LD_INT 16
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 25
22603: PUSH
22604: LD_INT 15
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: LIST
22621: PPUSH
22622: CALL_OW 69
22626: PPUSH
22627: LD_STRING other_apemans
22629: PPUSH
22630: LD_INT 3
22632: PPUSH
22633: CALL 11959 0 3
// randomsToSave = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 ] ;
22637: LD_ADDR_VAR 0 2
22641: PUSH
22642: LD_INT 22
22644: PUSH
22645: LD_INT 3
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 21
22654: PUSH
22655: LD_INT 1
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 23
22664: PUSH
22665: LD_INT 3
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 50
22674: PUSH
22675: EMPTY
22676: LIST
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: PPUSH
22684: CALL_OW 69
22688: PUSH
22689: LD_EXP 39
22693: PUSH
22694: LD_EXP 40
22698: PUSH
22699: LD_EXP 41
22703: PUSH
22704: LD_EXP 42
22708: PUSH
22709: LD_EXP 43
22713: PUSH
22714: LD_EXP 44
22718: PUSH
22719: LD_EXP 45
22723: PUSH
22724: LD_EXP 46
22728: PUSH
22729: LD_EXP 48
22733: PUSH
22734: LD_EXP 49
22738: PUSH
22739: LD_EXP 50
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: DIFF
22757: ST_TO_ADDR
// ExtSaveCharacters ( randomsToSave , other_survivors , 3 ) ;
22758: LD_VAR 0 2
22762: PPUSH
22763: LD_STRING other_survivors
22765: PPUSH
22766: LD_INT 3
22768: PPUSH
22769: CALL 11959 0 3
// end ;
22773: LD_VAR 0 1
22777: RET
// function SaveGlobalVariables ; var i , driver , driverShortName ; begin
22778: LD_INT 0
22780: PPUSH
22781: PPUSH
22782: PPUSH
22783: PPUSH
// resourcesFrom06 = [ ] ;
22784: LD_ADDR_EXP 8
22788: PUSH
22789: EMPTY
22790: ST_TO_ADDR
// SaveVariable ( techMatPredStatus , 06_TechMatPredStatus_1 ) ;
22791: LD_EXP 6
22795: PPUSH
22796: LD_STRING 06_TechMatPredStatus_1
22798: PPUSH
22799: CALL_OW 39
// for i in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_occupied ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , 89 ] ] ] ) do
22803: LD_ADDR_VAR 0 2
22807: PUSH
22808: LD_INT 14
22810: PPUSH
22811: LD_INT 22
22813: PUSH
22814: LD_INT 3
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 59
22823: PUSH
22824: EMPTY
22825: LIST
22826: PUSH
22827: LD_INT 2
22829: PUSH
22830: LD_INT 34
22832: PUSH
22833: LD_INT 51
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 34
22842: PUSH
22843: LD_INT 32
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 34
22852: PUSH
22853: LD_INT 12
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 34
22862: PUSH
22863: LD_INT 89
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: LIST
22881: PPUSH
22882: CALL_OW 70
22886: PUSH
22887: FOR_IN
22888: IFFALSE 22916
// resourcesFrom06 = resourcesFrom06 ^ [ GetMultiCargo ( i ) ] ;
22890: LD_ADDR_EXP 8
22894: PUSH
22895: LD_EXP 8
22899: PUSH
22900: LD_VAR 0 2
22904: PPUSH
22905: CALL 15029 0 1
22909: PUSH
22910: EMPTY
22911: LIST
22912: ADD
22913: ST_TO_ADDR
22914: GO 22887
22916: POP
22917: POP
// SaveVariable ( resourcesFrom06 , 06_ResourcesInCargo_3 ) ;
22918: LD_EXP 8
22922: PPUSH
22923: LD_STRING 06_ResourcesInCargo_3
22925: PPUSH
22926: CALL_OW 39
// for i in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ) do
22930: LD_ADDR_VAR 0 2
22934: PUSH
22935: LD_INT 14
22937: PPUSH
22938: LD_INT 22
22940: PUSH
22941: LD_INT 3
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 21
22950: PUSH
22951: LD_INT 2
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 59
22960: PUSH
22961: EMPTY
22962: LIST
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: LIST
22968: PPUSH
22969: CALL_OW 70
22973: PUSH
22974: FOR_IN
22975: IFFALSE 23379
// begin driver = UnitsInside ( i ) [ 1 ] ;
22977: LD_ADDR_VAR 0 3
22981: PUSH
22982: LD_VAR 0 2
22986: PPUSH
22987: CALL_OW 313
22991: PUSH
22992: LD_INT 1
22994: ARRAY
22995: ST_TO_ADDR
// if driver = Burlak then
22996: LD_VAR 0 3
23000: PUSH
23001: LD_EXP 39
23005: EQUAL
23006: IFFALSE 23016
// driverShortName = Bur ;
23008: LD_ADDR_VAR 0 4
23012: PUSH
23013: LD_STRING Bur
23015: ST_TO_ADDR
// if driver = Karamazov then
23016: LD_VAR 0 3
23020: PUSH
23021: LD_EXP 40
23025: EQUAL
23026: IFFALSE 23036
// driverShortName = Kar ;
23028: LD_ADDR_VAR 0 4
23032: PUSH
23033: LD_STRING Kar
23035: ST_TO_ADDR
// if driver = Petrovova then
23036: LD_VAR 0 3
23040: PUSH
23041: LD_EXP 41
23045: EQUAL
23046: IFFALSE 23056
// driverShortName = Ptr ;
23048: LD_ADDR_VAR 0 4
23052: PUSH
23053: LD_STRING Ptr
23055: ST_TO_ADDR
// if driver = Gleb then
23056: LD_VAR 0 3
23060: PUSH
23061: LD_EXP 42
23065: EQUAL
23066: IFFALSE 23076
// driverShortName = Glb ;
23068: LD_ADDR_VAR 0 4
23072: PUSH
23073: LD_STRING Glb
23075: ST_TO_ADDR
// if driver = Petrosyan then
23076: LD_VAR 0 3
23080: PUSH
23081: LD_EXP 43
23085: EQUAL
23086: IFFALSE 23096
// driverShortName = Pet ;
23088: LD_ADDR_VAR 0 4
23092: PUSH
23093: LD_STRING Pet
23095: ST_TO_ADDR
// if driver = Dolgov then
23096: LD_VAR 0 3
23100: PUSH
23101: LD_EXP 45
23105: EQUAL
23106: IFFALSE 23116
// driverShortName = Dol ;
23108: LD_ADDR_VAR 0 4
23112: PUSH
23113: LD_STRING Dol
23115: ST_TO_ADDR
// if driver = Lipshchin then
23116: LD_VAR 0 3
23120: PUSH
23121: LD_EXP 46
23125: EQUAL
23126: IFFALSE 23136
// driverShortName = Lip ;
23128: LD_ADDR_VAR 0 4
23132: PUSH
23133: LD_STRING Lip
23135: ST_TO_ADDR
// if driver = Titov then
23136: LD_VAR 0 3
23140: PUSH
23141: LD_EXP 44
23145: EQUAL
23146: IFFALSE 23156
// driverShortName = Tit ;
23148: LD_ADDR_VAR 0 4
23152: PUSH
23153: LD_STRING Tit
23155: ST_TO_ADDR
// if driver = Kirilenkova then
23156: LD_VAR 0 3
23160: PUSH
23161: LD_EXP 48
23165: EQUAL
23166: IFFALSE 23176
// driverShortName = Kir ;
23168: LD_ADDR_VAR 0 4
23172: PUSH
23173: LD_STRING Kir
23175: ST_TO_ADDR
// if driver = Belkov then
23176: LD_VAR 0 3
23180: PUSH
23181: LD_EXP 49
23185: EQUAL
23186: IFFALSE 23196
// driverShortName = Bel ;
23188: LD_ADDR_VAR 0 4
23192: PUSH
23193: LD_STRING Bel
23195: ST_TO_ADDR
// if driver = Belkov2 then
23196: LD_VAR 0 3
23200: PUSH
23201: LD_EXP 50
23205: EQUAL
23206: IFFALSE 23216
// driverShortName = Bel2 ;
23208: LD_ADDR_VAR 0 4
23212: PUSH
23213: LD_STRING Bel2
23215: ST_TO_ADDR
// if not driver in [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 ] then
23216: LD_VAR 0 3
23220: PUSH
23221: LD_EXP 39
23225: PUSH
23226: LD_EXP 40
23230: PUSH
23231: LD_EXP 41
23235: PUSH
23236: LD_EXP 42
23240: PUSH
23241: LD_EXP 43
23245: PUSH
23246: LD_EXP 44
23250: PUSH
23251: LD_EXP 45
23255: PUSH
23256: LD_EXP 46
23260: PUSH
23261: LD_EXP 48
23265: PUSH
23266: LD_EXP 49
23270: PUSH
23271: LD_EXP 50
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: IN
23289: NOT
23290: IFFALSE 23300
// driverShortName = rand ;
23292: LD_ADDR_VAR 0 4
23296: PUSH
23297: LD_STRING rand
23299: ST_TO_ADDR
// vehsFrom06 = vehsFrom06 ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , driverShortName ] ] ;
23300: LD_ADDR_EXP 7
23304: PUSH
23305: LD_EXP 7
23309: PUSH
23310: LD_VAR 0 2
23314: PPUSH
23315: CALL_OW 248
23319: PUSH
23320: LD_VAR 0 2
23324: PPUSH
23325: CALL_OW 265
23329: PUSH
23330: LD_VAR 0 2
23334: PPUSH
23335: CALL_OW 262
23339: PUSH
23340: LD_VAR 0 2
23344: PPUSH
23345: CALL_OW 263
23349: PUSH
23350: LD_VAR 0 2
23354: PPUSH
23355: CALL_OW 264
23359: PUSH
23360: LD_VAR 0 4
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: PUSH
23373: EMPTY
23374: LIST
23375: ADD
23376: ST_TO_ADDR
// end ;
23377: GO 22974
23379: POP
23380: POP
// SaveVariable ( vehsFrom06 , 06_Vehicles_2 ) ;
23381: LD_EXP 7
23385: PPUSH
23386: LD_STRING 06_Vehicles_2
23388: PPUSH
23389: CALL_OW 39
// SaveVariable ( savedVsevolod , 06_VsevolodStatus_4 ) ;
23393: LD_EXP 19
23397: PPUSH
23398: LD_STRING 06_VsevolodStatus_4
23400: PPUSH
23401: CALL_OW 39
// end ; end_of_file
23405: LD_VAR 0 1
23409: RET
// on UnitDestroyed ( unit ) do begin if unit in ovsyenkoBase then
23410: LD_VAR 0 1
23414: PUSH
23415: LD_EXP 59
23419: IN
23420: IFFALSE 23438
// ovsyenkoBase = ovsyenkoBase diff unit ;
23422: LD_ADDR_EXP 59
23426: PUSH
23427: LD_EXP 59
23431: PUSH
23432: LD_VAR 0 1
23436: DIFF
23437: ST_TO_ADDR
// if unit = Burlak then
23438: LD_VAR 0 1
23442: PUSH
23443: LD_EXP 39
23447: EQUAL
23448: IFFALSE 23454
// Lose_Burlak ;
23450: CALL 21907 0 0
// if unit = Vsevolod and GetSide ( Vsevolod ) = 3 then
23454: LD_VAR 0 1
23458: PUSH
23459: LD_EXP 51
23463: EQUAL
23464: PUSH
23465: LD_EXP 51
23469: PPUSH
23470: CALL_OW 255
23474: PUSH
23475: LD_INT 3
23477: EQUAL
23478: AND
23479: IFFALSE 23489
// savedVsevolod = false ;
23481: LD_ADDR_EXP 19
23485: PUSH
23486: LD_INT 0
23488: ST_TO_ADDR
// if unit = ovsyenko and GetSide ( ovsyenko ) = 3 then
23489: LD_VAR 0 1
23493: PUSH
23494: LD_INT 86
23496: EQUAL
23497: PUSH
23498: LD_INT 86
23500: PPUSH
23501: CALL_OW 255
23505: PUSH
23506: LD_INT 3
23508: EQUAL
23509: AND
23510: IFFALSE 23520
// lostAgainBase = true ;
23512: LD_ADDR_EXP 17
23516: PUSH
23517: LD_INT 1
23519: ST_TO_ADDR
// end ;
23520: PPOPN 1
23522: END
// on UnitDestroyed_Extra ( unit , killer_side , killer_unit ) do begin if unit = Gleb and killer_side = 3 then
23523: LD_VAR 0 1
23527: PUSH
23528: LD_EXP 42
23532: EQUAL
23533: PUSH
23534: LD_VAR 0 2
23538: PUSH
23539: LD_INT 3
23541: EQUAL
23542: AND
23543: IFFALSE 23549
// Lose_Gleb ;
23545: CALL 21922 0 0
// if unit = Vsevolod then
23549: LD_VAR 0 1
23553: PUSH
23554: LD_EXP 51
23558: EQUAL
23559: IFFALSE 23569
// savedVsevolod = false ;
23561: LD_ADDR_EXP 19
23565: PUSH
23566: LD_INT 0
23568: ST_TO_ADDR
// end ;
23569: PPOPN 3
23571: END
// on BuildingComplete ( building ) do begin end ;
23572: PPOPN 1
23574: END
// on BuildingCaptured ( building , side , human ) do begin if GetSide ( human ) = 3 and GetBType ( building ) = b_siberite_mine and not dial_SibTechsBlocker then
23575: LD_VAR 0 3
23579: PPUSH
23580: CALL_OW 255
23584: PUSH
23585: LD_INT 3
23587: EQUAL
23588: PUSH
23589: LD_VAR 0 1
23593: PPUSH
23594: CALL_OW 266
23598: PUSH
23599: LD_INT 30
23601: EQUAL
23602: AND
23603: PUSH
23604: LD_EXP 9
23608: NOT
23609: AND
23610: IFFALSE 23616
// Dial_SibTechs ;
23612: CALL 17268 0 0
// if GetSide ( human ) = 3 and GetBType ( building ) in [ b_depot , b_warehouse ] and GetResourceType ( GetBase ( building ) , mat_siberit ) > 0 and not dial_SibTechsBlocker then
23616: LD_VAR 0 3
23620: PPUSH
23621: CALL_OW 255
23625: PUSH
23626: LD_INT 3
23628: EQUAL
23629: PUSH
23630: LD_VAR 0 1
23634: PPUSH
23635: CALL_OW 266
23639: PUSH
23640: LD_INT 0
23642: PUSH
23643: LD_INT 1
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: IN
23650: AND
23651: PUSH
23652: LD_VAR 0 1
23656: PPUSH
23657: CALL_OW 274
23661: PPUSH
23662: LD_INT 3
23664: PPUSH
23665: CALL_OW 275
23669: PUSH
23670: LD_INT 0
23672: GREATER
23673: AND
23674: PUSH
23675: LD_EXP 9
23679: NOT
23680: AND
23681: IFFALSE 23687
// Dial_SibTechs ;
23683: CALL 17268 0 0
// end ;
23687: PPOPN 3
23689: END
// on Contact ( side1 , side2 ) do begin end ;
23690: PPOPN 2
23692: END
// on VehicleConstructed ( vehicle , building ) do var side , controlTowers , tmp ;
23693: LD_INT 0
23695: PPUSH
23696: PPUSH
23697: PPUSH
// begin if GetSide ( vehicle ) = 1 then
23698: LD_VAR 0 1
23702: PPUSH
23703: CALL_OW 255
23707: PUSH
23708: LD_INT 1
23710: EQUAL
23711: IFFALSE 23878
// begin controlTowers = FilterUnitsInArea ( HeadAmericanBaseArea , [ [ f_side , 1 ] , [ f_ok ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_vehicle ] ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23713: LD_ADDR_VAR 0 4
23717: PUSH
23718: LD_INT 5
23720: PPUSH
23721: LD_INT 22
23723: PUSH
23724: LD_INT 1
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 50
23733: PUSH
23734: EMPTY
23735: LIST
23736: PUSH
23737: LD_INT 2
23739: PUSH
23740: LD_INT 21
23742: PUSH
23743: LD_INT 3
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 21
23752: PUSH
23753: LD_INT 2
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 2
23767: PUSH
23768: LD_INT 30
23770: PUSH
23771: LD_INT 36
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 34
23780: PUSH
23781: LD_INT 31
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: LIST
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: PPUSH
23799: CALL_OW 70
23803: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote and controlTowers then
23804: LD_VAR 0 1
23808: PPUSH
23809: CALL_OW 263
23813: PUSH
23814: LD_INT 2
23816: EQUAL
23817: PUSH
23818: LD_VAR 0 4
23822: AND
23823: IFFALSE 23878
// begin tmp = UnitsInside ( controlTowers [ 1 ] ) ;
23825: LD_ADDR_VAR 0 5
23829: PUSH
23830: LD_VAR 0 4
23834: PUSH
23835: LD_INT 1
23837: ARRAY
23838: PPUSH
23839: CALL_OW 313
23843: ST_TO_ADDR
// if tmp then
23844: LD_VAR 0 5
23848: IFFALSE 23878
// LinkVehicleToHuman ( vehicle , tmp [ rand ( 1 , tmp ) ] ) ;
23850: LD_VAR 0 1
23854: PPUSH
23855: LD_VAR 0 5
23859: PUSH
23860: LD_INT 1
23862: PPUSH
23863: LD_VAR 0 5
23867: PPUSH
23868: CALL_OW 12
23872: ARRAY
23873: PPUSH
23874: CALL_OW 53
// end ; end ; end ;
23878: PPOPN 5
23880: END
// on ResearchComplete ( research , building ) do begin if research = tech_TauField then
23881: LD_VAR 0 1
23885: PUSH
23886: LD_INT 30
23888: EQUAL
23889: IFFALSE 23895
// Dial_ResearchTauField ;
23891: CALL 20736 0 0
// if research = tech_SibEng and GetTech ( tech_TauField , 3 ) = state_researched then
23895: LD_VAR 0 1
23899: PUSH
23900: LD_INT 22
23902: EQUAL
23903: PUSH
23904: LD_INT 30
23906: PPUSH
23907: LD_INT 3
23909: PPUSH
23910: CALL_OW 321
23914: PUSH
23915: LD_INT 2
23917: EQUAL
23918: AND
23919: IFFALSE 23928
// ChangeMissionObjectives ( MOutResearch ) ;
23921: LD_STRING MOutResearch
23923: PPUSH
23924: CALL_OW 337
// if research = tech_MatPred then
23928: LD_VAR 0 1
23932: PUSH
23933: LD_INT 9
23935: EQUAL
23936: IFFALSE 23942
// Dial_ResearchMatPredictions ;
23938: CALL 17423 0 0
// end ; end_of_file
23942: PPOPN 2
23944: END
// every 0 0$1 trigger enableVsevolodCounter do
23945: LD_EXP 22
23949: IFFALSE 23969
23951: GO 23953
23953: DISABLE
// begin enable ;
23954: ENABLE
// timeToAttack = timeToAttack + 0 0$01 ;
23955: LD_ADDR_EXP 26
23959: PUSH
23960: LD_EXP 26
23964: PUSH
23965: LD_INT 35
23967: PLUS
23968: ST_TO_ADDR
// end ; end_of_file
23969: END
// every 0 0$01 do var timer ;
23970: GO 23972
23972: DISABLE
23973: LD_INT 0
23975: PPUSH
// begin timer := 5 5$30 ;
23976: LD_ADDR_VAR 0 1
23980: PUSH
23981: LD_INT 11550
23983: ST_TO_ADDR
// repeat wait ( timer ) ;
23984: LD_VAR 0 1
23988: PPUSH
23989: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
23993: LD_INT 3
23995: PPUSH
23996: LD_INT 5
23998: PPUSH
23999: CALL_OW 12
24003: PPUSH
24004: LD_INT 20
24006: PPUSH
24007: LD_INT 1
24009: PPUSH
24010: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
24014: LD_ADDR_EXP 27
24018: PUSH
24019: LD_EXP 27
24023: PUSH
24024: LD_INT 1
24026: PLUS
24027: ST_TO_ADDR
// until cratesSpawned = 3 ;
24028: LD_EXP 27
24032: PUSH
24033: LD_INT 3
24035: EQUAL
24036: IFFALSE 23984
// end ; end_of_file
24038: PPOPN 1
24040: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
24041: LD_INT 0
24043: PPUSH
// ar_miner := 81 ;
24044: LD_ADDR_EXP 72
24048: PUSH
24049: LD_INT 81
24051: ST_TO_ADDR
// ar_crane := 88 ;
24052: LD_ADDR_EXP 71
24056: PUSH
24057: LD_INT 88
24059: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24060: LD_ADDR_EXP 66
24064: PUSH
24065: LD_INT 89
24067: ST_TO_ADDR
// us_hack := 99 ;
24068: LD_ADDR_EXP 67
24072: PUSH
24073: LD_INT 99
24075: ST_TO_ADDR
// us_artillery := 97 ;
24076: LD_ADDR_EXP 68
24080: PUSH
24081: LD_INT 97
24083: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24084: LD_ADDR_EXP 69
24088: PUSH
24089: LD_INT 91
24091: ST_TO_ADDR
// ar_mortar := 92 ;
24092: LD_ADDR_EXP 70
24096: PUSH
24097: LD_INT 92
24099: ST_TO_ADDR
// ru_radar := 98 ;
24100: LD_ADDR_EXP 65
24104: PUSH
24105: LD_INT 98
24107: ST_TO_ADDR
// tech_Artillery := 80 ;
24108: LD_ADDR_EXP 73
24112: PUSH
24113: LD_INT 80
24115: ST_TO_ADDR
// tech_RadMat := 81 ;
24116: LD_ADDR_EXP 74
24120: PUSH
24121: LD_INT 81
24123: ST_TO_ADDR
// tech_BasicTools := 82 ;
24124: LD_ADDR_EXP 75
24128: PUSH
24129: LD_INT 82
24131: ST_TO_ADDR
// tech_Cargo := 83 ;
24132: LD_ADDR_EXP 76
24136: PUSH
24137: LD_INT 83
24139: ST_TO_ADDR
// tech_Track := 84 ;
24140: LD_ADDR_EXP 77
24144: PUSH
24145: LD_INT 84
24147: ST_TO_ADDR
// tech_Crane := 85 ;
24148: LD_ADDR_EXP 78
24152: PUSH
24153: LD_INT 85
24155: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24156: LD_ADDR_EXP 79
24160: PUSH
24161: LD_INT 86
24163: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24164: LD_ADDR_EXP 80
24168: PUSH
24169: LD_INT 87
24171: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
24172: LD_ADDR_EXP 81
24176: PUSH
24177: LD_INT 88
24179: ST_TO_ADDR
// class_mastodont := 31 ;
24180: LD_ADDR_EXP 82
24184: PUSH
24185: LD_INT 31
24187: ST_TO_ADDR
// class_horse := 21 ;
24188: LD_ADDR_EXP 83
24192: PUSH
24193: LD_INT 21
24195: ST_TO_ADDR
// end ;
24196: LD_VAR 0 1
24200: RET
// every 1 do
24201: GO 24203
24203: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
24204: CALL 24041 0 0
24208: END
// every 0 0$1 do
24209: GO 24211
24211: DISABLE
// begin enable ;
24212: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
24213: LD_STRING updateTimer(
24215: PUSH
24216: LD_OWVAR 1
24220: STR
24221: PUSH
24222: LD_STRING );
24224: STR
24225: PPUSH
24226: CALL_OW 559
// end ;
24230: END
// on MapStart ( p ) do begin if streamModeActive then
24231: LD_EXP 84
24235: IFFALSE 24244
// DefineStreamItems ( true ) ;
24237: LD_INT 1
24239: PPUSH
24240: CALL 25892 0 1
// UpdateFactoryWaypoints ( ) ;
24244: CALL 39476 0 0
// end ;
24248: PPOPN 1
24250: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24251: LD_INT 0
24253: PPUSH
// if p2 = 100 then
24254: LD_VAR 0 2
24258: PUSH
24259: LD_INT 100
24261: EQUAL
24262: IFFALSE 25265
// begin if not StreamModeActive then
24264: LD_EXP 84
24268: NOT
24269: IFFALSE 24279
// StreamModeActive := true ;
24271: LD_ADDR_EXP 84
24275: PUSH
24276: LD_INT 1
24278: ST_TO_ADDR
// if p3 = 0 then
24279: LD_VAR 0 3
24283: PUSH
24284: LD_INT 0
24286: EQUAL
24287: IFFALSE 24293
// InitStreamMode ;
24289: CALL 25428 0 0
// if p3 = 1 then
24293: LD_VAR 0 3
24297: PUSH
24298: LD_INT 1
24300: EQUAL
24301: IFFALSE 24311
// sRocket := true ;
24303: LD_ADDR_EXP 89
24307: PUSH
24308: LD_INT 1
24310: ST_TO_ADDR
// if p3 = 2 then
24311: LD_VAR 0 3
24315: PUSH
24316: LD_INT 2
24318: EQUAL
24319: IFFALSE 24329
// sSpeed := true ;
24321: LD_ADDR_EXP 88
24325: PUSH
24326: LD_INT 1
24328: ST_TO_ADDR
// if p3 = 3 then
24329: LD_VAR 0 3
24333: PUSH
24334: LD_INT 3
24336: EQUAL
24337: IFFALSE 24347
// sEngine := true ;
24339: LD_ADDR_EXP 90
24343: PUSH
24344: LD_INT 1
24346: ST_TO_ADDR
// if p3 = 4 then
24347: LD_VAR 0 3
24351: PUSH
24352: LD_INT 4
24354: EQUAL
24355: IFFALSE 24365
// sSpec := true ;
24357: LD_ADDR_EXP 87
24361: PUSH
24362: LD_INT 1
24364: ST_TO_ADDR
// if p3 = 5 then
24365: LD_VAR 0 3
24369: PUSH
24370: LD_INT 5
24372: EQUAL
24373: IFFALSE 24383
// sLevel := true ;
24375: LD_ADDR_EXP 91
24379: PUSH
24380: LD_INT 1
24382: ST_TO_ADDR
// if p3 = 6 then
24383: LD_VAR 0 3
24387: PUSH
24388: LD_INT 6
24390: EQUAL
24391: IFFALSE 24401
// sArmoury := true ;
24393: LD_ADDR_EXP 92
24397: PUSH
24398: LD_INT 1
24400: ST_TO_ADDR
// if p3 = 7 then
24401: LD_VAR 0 3
24405: PUSH
24406: LD_INT 7
24408: EQUAL
24409: IFFALSE 24419
// sRadar := true ;
24411: LD_ADDR_EXP 93
24415: PUSH
24416: LD_INT 1
24418: ST_TO_ADDR
// if p3 = 8 then
24419: LD_VAR 0 3
24423: PUSH
24424: LD_INT 8
24426: EQUAL
24427: IFFALSE 24437
// sBunker := true ;
24429: LD_ADDR_EXP 94
24433: PUSH
24434: LD_INT 1
24436: ST_TO_ADDR
// if p3 = 9 then
24437: LD_VAR 0 3
24441: PUSH
24442: LD_INT 9
24444: EQUAL
24445: IFFALSE 24455
// sHack := true ;
24447: LD_ADDR_EXP 95
24451: PUSH
24452: LD_INT 1
24454: ST_TO_ADDR
// if p3 = 10 then
24455: LD_VAR 0 3
24459: PUSH
24460: LD_INT 10
24462: EQUAL
24463: IFFALSE 24473
// sFire := true ;
24465: LD_ADDR_EXP 96
24469: PUSH
24470: LD_INT 1
24472: ST_TO_ADDR
// if p3 = 11 then
24473: LD_VAR 0 3
24477: PUSH
24478: LD_INT 11
24480: EQUAL
24481: IFFALSE 24491
// sRefresh := true ;
24483: LD_ADDR_EXP 97
24487: PUSH
24488: LD_INT 1
24490: ST_TO_ADDR
// if p3 = 12 then
24491: LD_VAR 0 3
24495: PUSH
24496: LD_INT 12
24498: EQUAL
24499: IFFALSE 24509
// sExp := true ;
24501: LD_ADDR_EXP 98
24505: PUSH
24506: LD_INT 1
24508: ST_TO_ADDR
// if p3 = 13 then
24509: LD_VAR 0 3
24513: PUSH
24514: LD_INT 13
24516: EQUAL
24517: IFFALSE 24527
// sDepot := true ;
24519: LD_ADDR_EXP 99
24523: PUSH
24524: LD_INT 1
24526: ST_TO_ADDR
// if p3 = 14 then
24527: LD_VAR 0 3
24531: PUSH
24532: LD_INT 14
24534: EQUAL
24535: IFFALSE 24545
// sFlag := true ;
24537: LD_ADDR_EXP 100
24541: PUSH
24542: LD_INT 1
24544: ST_TO_ADDR
// if p3 = 15 then
24545: LD_VAR 0 3
24549: PUSH
24550: LD_INT 15
24552: EQUAL
24553: IFFALSE 24563
// sKamikadze := true ;
24555: LD_ADDR_EXP 108
24559: PUSH
24560: LD_INT 1
24562: ST_TO_ADDR
// if p3 = 16 then
24563: LD_VAR 0 3
24567: PUSH
24568: LD_INT 16
24570: EQUAL
24571: IFFALSE 24581
// sTroll := true ;
24573: LD_ADDR_EXP 109
24577: PUSH
24578: LD_INT 1
24580: ST_TO_ADDR
// if p3 = 17 then
24581: LD_VAR 0 3
24585: PUSH
24586: LD_INT 17
24588: EQUAL
24589: IFFALSE 24599
// sSlow := true ;
24591: LD_ADDR_EXP 110
24595: PUSH
24596: LD_INT 1
24598: ST_TO_ADDR
// if p3 = 18 then
24599: LD_VAR 0 3
24603: PUSH
24604: LD_INT 18
24606: EQUAL
24607: IFFALSE 24617
// sLack := true ;
24609: LD_ADDR_EXP 111
24613: PUSH
24614: LD_INT 1
24616: ST_TO_ADDR
// if p3 = 19 then
24617: LD_VAR 0 3
24621: PUSH
24622: LD_INT 19
24624: EQUAL
24625: IFFALSE 24635
// sTank := true ;
24627: LD_ADDR_EXP 113
24631: PUSH
24632: LD_INT 1
24634: ST_TO_ADDR
// if p3 = 20 then
24635: LD_VAR 0 3
24639: PUSH
24640: LD_INT 20
24642: EQUAL
24643: IFFALSE 24653
// sRemote := true ;
24645: LD_ADDR_EXP 114
24649: PUSH
24650: LD_INT 1
24652: ST_TO_ADDR
// if p3 = 21 then
24653: LD_VAR 0 3
24657: PUSH
24658: LD_INT 21
24660: EQUAL
24661: IFFALSE 24671
// sPowell := true ;
24663: LD_ADDR_EXP 115
24667: PUSH
24668: LD_INT 1
24670: ST_TO_ADDR
// if p3 = 22 then
24671: LD_VAR 0 3
24675: PUSH
24676: LD_INT 22
24678: EQUAL
24679: IFFALSE 24689
// sTeleport := true ;
24681: LD_ADDR_EXP 118
24685: PUSH
24686: LD_INT 1
24688: ST_TO_ADDR
// if p3 = 23 then
24689: LD_VAR 0 3
24693: PUSH
24694: LD_INT 23
24696: EQUAL
24697: IFFALSE 24707
// sOilTower := true ;
24699: LD_ADDR_EXP 120
24703: PUSH
24704: LD_INT 1
24706: ST_TO_ADDR
// if p3 = 24 then
24707: LD_VAR 0 3
24711: PUSH
24712: LD_INT 24
24714: EQUAL
24715: IFFALSE 24725
// sShovel := true ;
24717: LD_ADDR_EXP 121
24721: PUSH
24722: LD_INT 1
24724: ST_TO_ADDR
// if p3 = 25 then
24725: LD_VAR 0 3
24729: PUSH
24730: LD_INT 25
24732: EQUAL
24733: IFFALSE 24743
// sSheik := true ;
24735: LD_ADDR_EXP 122
24739: PUSH
24740: LD_INT 1
24742: ST_TO_ADDR
// if p3 = 26 then
24743: LD_VAR 0 3
24747: PUSH
24748: LD_INT 26
24750: EQUAL
24751: IFFALSE 24761
// sEarthquake := true ;
24753: LD_ADDR_EXP 124
24757: PUSH
24758: LD_INT 1
24760: ST_TO_ADDR
// if p3 = 27 then
24761: LD_VAR 0 3
24765: PUSH
24766: LD_INT 27
24768: EQUAL
24769: IFFALSE 24779
// sAI := true ;
24771: LD_ADDR_EXP 125
24775: PUSH
24776: LD_INT 1
24778: ST_TO_ADDR
// if p3 = 28 then
24779: LD_VAR 0 3
24783: PUSH
24784: LD_INT 28
24786: EQUAL
24787: IFFALSE 24797
// sCargo := true ;
24789: LD_ADDR_EXP 128
24793: PUSH
24794: LD_INT 1
24796: ST_TO_ADDR
// if p3 = 29 then
24797: LD_VAR 0 3
24801: PUSH
24802: LD_INT 29
24804: EQUAL
24805: IFFALSE 24815
// sDLaser := true ;
24807: LD_ADDR_EXP 129
24811: PUSH
24812: LD_INT 1
24814: ST_TO_ADDR
// if p3 = 30 then
24815: LD_VAR 0 3
24819: PUSH
24820: LD_INT 30
24822: EQUAL
24823: IFFALSE 24833
// sExchange := true ;
24825: LD_ADDR_EXP 130
24829: PUSH
24830: LD_INT 1
24832: ST_TO_ADDR
// if p3 = 31 then
24833: LD_VAR 0 3
24837: PUSH
24838: LD_INT 31
24840: EQUAL
24841: IFFALSE 24851
// sFac := true ;
24843: LD_ADDR_EXP 131
24847: PUSH
24848: LD_INT 1
24850: ST_TO_ADDR
// if p3 = 32 then
24851: LD_VAR 0 3
24855: PUSH
24856: LD_INT 32
24858: EQUAL
24859: IFFALSE 24869
// sPower := true ;
24861: LD_ADDR_EXP 132
24865: PUSH
24866: LD_INT 1
24868: ST_TO_ADDR
// if p3 = 33 then
24869: LD_VAR 0 3
24873: PUSH
24874: LD_INT 33
24876: EQUAL
24877: IFFALSE 24887
// sRandom := true ;
24879: LD_ADDR_EXP 133
24883: PUSH
24884: LD_INT 1
24886: ST_TO_ADDR
// if p3 = 34 then
24887: LD_VAR 0 3
24891: PUSH
24892: LD_INT 34
24894: EQUAL
24895: IFFALSE 24905
// sShield := true ;
24897: LD_ADDR_EXP 134
24901: PUSH
24902: LD_INT 1
24904: ST_TO_ADDR
// if p3 = 35 then
24905: LD_VAR 0 3
24909: PUSH
24910: LD_INT 35
24912: EQUAL
24913: IFFALSE 24923
// sTime := true ;
24915: LD_ADDR_EXP 135
24919: PUSH
24920: LD_INT 1
24922: ST_TO_ADDR
// if p3 = 36 then
24923: LD_VAR 0 3
24927: PUSH
24928: LD_INT 36
24930: EQUAL
24931: IFFALSE 24941
// sTools := true ;
24933: LD_ADDR_EXP 136
24937: PUSH
24938: LD_INT 1
24940: ST_TO_ADDR
// if p3 = 101 then
24941: LD_VAR 0 3
24945: PUSH
24946: LD_INT 101
24948: EQUAL
24949: IFFALSE 24959
// sSold := true ;
24951: LD_ADDR_EXP 101
24955: PUSH
24956: LD_INT 1
24958: ST_TO_ADDR
// if p3 = 102 then
24959: LD_VAR 0 3
24963: PUSH
24964: LD_INT 102
24966: EQUAL
24967: IFFALSE 24977
// sDiff := true ;
24969: LD_ADDR_EXP 102
24973: PUSH
24974: LD_INT 1
24976: ST_TO_ADDR
// if p3 = 103 then
24977: LD_VAR 0 3
24981: PUSH
24982: LD_INT 103
24984: EQUAL
24985: IFFALSE 24995
// sFog := true ;
24987: LD_ADDR_EXP 105
24991: PUSH
24992: LD_INT 1
24994: ST_TO_ADDR
// if p3 = 104 then
24995: LD_VAR 0 3
24999: PUSH
25000: LD_INT 104
25002: EQUAL
25003: IFFALSE 25013
// sReset := true ;
25005: LD_ADDR_EXP 106
25009: PUSH
25010: LD_INT 1
25012: ST_TO_ADDR
// if p3 = 105 then
25013: LD_VAR 0 3
25017: PUSH
25018: LD_INT 105
25020: EQUAL
25021: IFFALSE 25031
// sSun := true ;
25023: LD_ADDR_EXP 107
25027: PUSH
25028: LD_INT 1
25030: ST_TO_ADDR
// if p3 = 106 then
25031: LD_VAR 0 3
25035: PUSH
25036: LD_INT 106
25038: EQUAL
25039: IFFALSE 25049
// sTiger := true ;
25041: LD_ADDR_EXP 103
25045: PUSH
25046: LD_INT 1
25048: ST_TO_ADDR
// if p3 = 107 then
25049: LD_VAR 0 3
25053: PUSH
25054: LD_INT 107
25056: EQUAL
25057: IFFALSE 25067
// sBomb := true ;
25059: LD_ADDR_EXP 104
25063: PUSH
25064: LD_INT 1
25066: ST_TO_ADDR
// if p3 = 108 then
25067: LD_VAR 0 3
25071: PUSH
25072: LD_INT 108
25074: EQUAL
25075: IFFALSE 25085
// sWound := true ;
25077: LD_ADDR_EXP 112
25081: PUSH
25082: LD_INT 1
25084: ST_TO_ADDR
// if p3 = 109 then
25085: LD_VAR 0 3
25089: PUSH
25090: LD_INT 109
25092: EQUAL
25093: IFFALSE 25103
// sBetray := true ;
25095: LD_ADDR_EXP 116
25099: PUSH
25100: LD_INT 1
25102: ST_TO_ADDR
// if p3 = 110 then
25103: LD_VAR 0 3
25107: PUSH
25108: LD_INT 110
25110: EQUAL
25111: IFFALSE 25121
// sContamin := true ;
25113: LD_ADDR_EXP 117
25117: PUSH
25118: LD_INT 1
25120: ST_TO_ADDR
// if p3 = 111 then
25121: LD_VAR 0 3
25125: PUSH
25126: LD_INT 111
25128: EQUAL
25129: IFFALSE 25139
// sOil := true ;
25131: LD_ADDR_EXP 119
25135: PUSH
25136: LD_INT 1
25138: ST_TO_ADDR
// if p3 = 112 then
25139: LD_VAR 0 3
25143: PUSH
25144: LD_INT 112
25146: EQUAL
25147: IFFALSE 25157
// sStu := true ;
25149: LD_ADDR_EXP 123
25153: PUSH
25154: LD_INT 1
25156: ST_TO_ADDR
// if p3 = 113 then
25157: LD_VAR 0 3
25161: PUSH
25162: LD_INT 113
25164: EQUAL
25165: IFFALSE 25175
// sBazooka := true ;
25167: LD_ADDR_EXP 126
25171: PUSH
25172: LD_INT 1
25174: ST_TO_ADDR
// if p3 = 114 then
25175: LD_VAR 0 3
25179: PUSH
25180: LD_INT 114
25182: EQUAL
25183: IFFALSE 25193
// sMortar := true ;
25185: LD_ADDR_EXP 127
25189: PUSH
25190: LD_INT 1
25192: ST_TO_ADDR
// if p3 = 115 then
25193: LD_VAR 0 3
25197: PUSH
25198: LD_INT 115
25200: EQUAL
25201: IFFALSE 25211
// sRanger := true ;
25203: LD_ADDR_EXP 137
25207: PUSH
25208: LD_INT 1
25210: ST_TO_ADDR
// if p3 = 116 then
25211: LD_VAR 0 3
25215: PUSH
25216: LD_INT 116
25218: EQUAL
25219: IFFALSE 25229
// sComputer := true ;
25221: LD_ADDR_EXP 138
25225: PUSH
25226: LD_INT 1
25228: ST_TO_ADDR
// if p3 = 117 then
25229: LD_VAR 0 3
25233: PUSH
25234: LD_INT 117
25236: EQUAL
25237: IFFALSE 25247
// s30 := true ;
25239: LD_ADDR_EXP 139
25243: PUSH
25244: LD_INT 1
25246: ST_TO_ADDR
// if p3 = 118 then
25247: LD_VAR 0 3
25251: PUSH
25252: LD_INT 118
25254: EQUAL
25255: IFFALSE 25265
// s60 := true ;
25257: LD_ADDR_EXP 140
25261: PUSH
25262: LD_INT 1
25264: ST_TO_ADDR
// end ; if p2 = 101 then
25265: LD_VAR 0 2
25269: PUSH
25270: LD_INT 101
25272: EQUAL
25273: IFFALSE 25401
// begin case p3 of 1 :
25275: LD_VAR 0 3
25279: PUSH
25280: LD_INT 1
25282: DOUBLE
25283: EQUAL
25284: IFTRUE 25288
25286: GO 25295
25288: POP
// hHackUnlimitedResources ; 2 :
25289: CALL 37499 0 0
25293: GO 25401
25295: LD_INT 2
25297: DOUBLE
25298: EQUAL
25299: IFTRUE 25303
25301: GO 25310
25303: POP
// hHackSetLevel10 ; 3 :
25304: CALL 37632 0 0
25308: GO 25401
25310: LD_INT 3
25312: DOUBLE
25313: EQUAL
25314: IFTRUE 25318
25316: GO 25325
25318: POP
// hHackSetLevel10YourUnits ; 4 :
25319: CALL 37717 0 0
25323: GO 25401
25325: LD_INT 4
25327: DOUBLE
25328: EQUAL
25329: IFTRUE 25333
25331: GO 25340
25333: POP
// hHackInvincible ; 5 :
25334: CALL 38165 0 0
25338: GO 25401
25340: LD_INT 5
25342: DOUBLE
25343: EQUAL
25344: IFTRUE 25348
25346: GO 25355
25348: POP
// hHackInvisible ; 6 :
25349: CALL 38276 0 0
25353: GO 25401
25355: LD_INT 6
25357: DOUBLE
25358: EQUAL
25359: IFTRUE 25363
25361: GO 25370
25363: POP
// hHackChangeYourSide ; 7 :
25364: CALL 38333 0 0
25368: GO 25401
25370: LD_INT 7
25372: DOUBLE
25373: EQUAL
25374: IFTRUE 25378
25376: GO 25385
25378: POP
// hHackChangeUnitSide ; 8 :
25379: CALL 38375 0 0
25383: GO 25401
25385: LD_INT 8
25387: DOUBLE
25388: EQUAL
25389: IFTRUE 25393
25391: GO 25400
25393: POP
// hHackFog ; end ;
25394: CALL 38476 0 0
25398: GO 25401
25400: POP
// end ; end ;
25401: LD_VAR 0 7
25405: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
25406: GO 25408
25408: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
25409: LD_STRING initStreamRollete();
25411: PPUSH
25412: CALL_OW 559
// InitStreamMode ;
25416: CALL 25428 0 0
// DefineStreamItems ( false ) ;
25420: LD_INT 0
25422: PPUSH
25423: CALL 25892 0 1
// end ;
25427: END
// function InitStreamMode ; begin
25428: LD_INT 0
25430: PPUSH
// streamModeActive := false ;
25431: LD_ADDR_EXP 84
25435: PUSH
25436: LD_INT 0
25438: ST_TO_ADDR
// normalCounter := 36 ;
25439: LD_ADDR_EXP 85
25443: PUSH
25444: LD_INT 36
25446: ST_TO_ADDR
// hardcoreCounter := 18 ;
25447: LD_ADDR_EXP 86
25451: PUSH
25452: LD_INT 18
25454: ST_TO_ADDR
// sRocket := false ;
25455: LD_ADDR_EXP 89
25459: PUSH
25460: LD_INT 0
25462: ST_TO_ADDR
// sSpeed := false ;
25463: LD_ADDR_EXP 88
25467: PUSH
25468: LD_INT 0
25470: ST_TO_ADDR
// sEngine := false ;
25471: LD_ADDR_EXP 90
25475: PUSH
25476: LD_INT 0
25478: ST_TO_ADDR
// sSpec := false ;
25479: LD_ADDR_EXP 87
25483: PUSH
25484: LD_INT 0
25486: ST_TO_ADDR
// sLevel := false ;
25487: LD_ADDR_EXP 91
25491: PUSH
25492: LD_INT 0
25494: ST_TO_ADDR
// sArmoury := false ;
25495: LD_ADDR_EXP 92
25499: PUSH
25500: LD_INT 0
25502: ST_TO_ADDR
// sRadar := false ;
25503: LD_ADDR_EXP 93
25507: PUSH
25508: LD_INT 0
25510: ST_TO_ADDR
// sBunker := false ;
25511: LD_ADDR_EXP 94
25515: PUSH
25516: LD_INT 0
25518: ST_TO_ADDR
// sHack := false ;
25519: LD_ADDR_EXP 95
25523: PUSH
25524: LD_INT 0
25526: ST_TO_ADDR
// sFire := false ;
25527: LD_ADDR_EXP 96
25531: PUSH
25532: LD_INT 0
25534: ST_TO_ADDR
// sRefresh := false ;
25535: LD_ADDR_EXP 97
25539: PUSH
25540: LD_INT 0
25542: ST_TO_ADDR
// sExp := false ;
25543: LD_ADDR_EXP 98
25547: PUSH
25548: LD_INT 0
25550: ST_TO_ADDR
// sDepot := false ;
25551: LD_ADDR_EXP 99
25555: PUSH
25556: LD_INT 0
25558: ST_TO_ADDR
// sFlag := false ;
25559: LD_ADDR_EXP 100
25563: PUSH
25564: LD_INT 0
25566: ST_TO_ADDR
// sKamikadze := false ;
25567: LD_ADDR_EXP 108
25571: PUSH
25572: LD_INT 0
25574: ST_TO_ADDR
// sTroll := false ;
25575: LD_ADDR_EXP 109
25579: PUSH
25580: LD_INT 0
25582: ST_TO_ADDR
// sSlow := false ;
25583: LD_ADDR_EXP 110
25587: PUSH
25588: LD_INT 0
25590: ST_TO_ADDR
// sLack := false ;
25591: LD_ADDR_EXP 111
25595: PUSH
25596: LD_INT 0
25598: ST_TO_ADDR
// sTank := false ;
25599: LD_ADDR_EXP 113
25603: PUSH
25604: LD_INT 0
25606: ST_TO_ADDR
// sRemote := false ;
25607: LD_ADDR_EXP 114
25611: PUSH
25612: LD_INT 0
25614: ST_TO_ADDR
// sPowell := false ;
25615: LD_ADDR_EXP 115
25619: PUSH
25620: LD_INT 0
25622: ST_TO_ADDR
// sTeleport := false ;
25623: LD_ADDR_EXP 118
25627: PUSH
25628: LD_INT 0
25630: ST_TO_ADDR
// sOilTower := false ;
25631: LD_ADDR_EXP 120
25635: PUSH
25636: LD_INT 0
25638: ST_TO_ADDR
// sShovel := false ;
25639: LD_ADDR_EXP 121
25643: PUSH
25644: LD_INT 0
25646: ST_TO_ADDR
// sSheik := false ;
25647: LD_ADDR_EXP 122
25651: PUSH
25652: LD_INT 0
25654: ST_TO_ADDR
// sEarthquake := false ;
25655: LD_ADDR_EXP 124
25659: PUSH
25660: LD_INT 0
25662: ST_TO_ADDR
// sAI := false ;
25663: LD_ADDR_EXP 125
25667: PUSH
25668: LD_INT 0
25670: ST_TO_ADDR
// sCargo := false ;
25671: LD_ADDR_EXP 128
25675: PUSH
25676: LD_INT 0
25678: ST_TO_ADDR
// sDLaser := false ;
25679: LD_ADDR_EXP 129
25683: PUSH
25684: LD_INT 0
25686: ST_TO_ADDR
// sExchange := false ;
25687: LD_ADDR_EXP 130
25691: PUSH
25692: LD_INT 0
25694: ST_TO_ADDR
// sFac := false ;
25695: LD_ADDR_EXP 131
25699: PUSH
25700: LD_INT 0
25702: ST_TO_ADDR
// sPower := false ;
25703: LD_ADDR_EXP 132
25707: PUSH
25708: LD_INT 0
25710: ST_TO_ADDR
// sRandom := false ;
25711: LD_ADDR_EXP 133
25715: PUSH
25716: LD_INT 0
25718: ST_TO_ADDR
// sShield := false ;
25719: LD_ADDR_EXP 134
25723: PUSH
25724: LD_INT 0
25726: ST_TO_ADDR
// sTime := false ;
25727: LD_ADDR_EXP 135
25731: PUSH
25732: LD_INT 0
25734: ST_TO_ADDR
// sTools := false ;
25735: LD_ADDR_EXP 136
25739: PUSH
25740: LD_INT 0
25742: ST_TO_ADDR
// sSold := false ;
25743: LD_ADDR_EXP 101
25747: PUSH
25748: LD_INT 0
25750: ST_TO_ADDR
// sDiff := false ;
25751: LD_ADDR_EXP 102
25755: PUSH
25756: LD_INT 0
25758: ST_TO_ADDR
// sFog := false ;
25759: LD_ADDR_EXP 105
25763: PUSH
25764: LD_INT 0
25766: ST_TO_ADDR
// sReset := false ;
25767: LD_ADDR_EXP 106
25771: PUSH
25772: LD_INT 0
25774: ST_TO_ADDR
// sSun := false ;
25775: LD_ADDR_EXP 107
25779: PUSH
25780: LD_INT 0
25782: ST_TO_ADDR
// sTiger := false ;
25783: LD_ADDR_EXP 103
25787: PUSH
25788: LD_INT 0
25790: ST_TO_ADDR
// sBomb := false ;
25791: LD_ADDR_EXP 104
25795: PUSH
25796: LD_INT 0
25798: ST_TO_ADDR
// sWound := false ;
25799: LD_ADDR_EXP 112
25803: PUSH
25804: LD_INT 0
25806: ST_TO_ADDR
// sBetray := false ;
25807: LD_ADDR_EXP 116
25811: PUSH
25812: LD_INT 0
25814: ST_TO_ADDR
// sContamin := false ;
25815: LD_ADDR_EXP 117
25819: PUSH
25820: LD_INT 0
25822: ST_TO_ADDR
// sOil := false ;
25823: LD_ADDR_EXP 119
25827: PUSH
25828: LD_INT 0
25830: ST_TO_ADDR
// sStu := false ;
25831: LD_ADDR_EXP 123
25835: PUSH
25836: LD_INT 0
25838: ST_TO_ADDR
// sBazooka := false ;
25839: LD_ADDR_EXP 126
25843: PUSH
25844: LD_INT 0
25846: ST_TO_ADDR
// sMortar := false ;
25847: LD_ADDR_EXP 127
25851: PUSH
25852: LD_INT 0
25854: ST_TO_ADDR
// sRanger := false ;
25855: LD_ADDR_EXP 137
25859: PUSH
25860: LD_INT 0
25862: ST_TO_ADDR
// sComputer := false ;
25863: LD_ADDR_EXP 138
25867: PUSH
25868: LD_INT 0
25870: ST_TO_ADDR
// s30 := false ;
25871: LD_ADDR_EXP 139
25875: PUSH
25876: LD_INT 0
25878: ST_TO_ADDR
// s60 := false ;
25879: LD_ADDR_EXP 140
25883: PUSH
25884: LD_INT 0
25886: ST_TO_ADDR
// end ;
25887: LD_VAR 0 1
25891: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
25892: LD_INT 0
25894: PPUSH
25895: PPUSH
25896: PPUSH
25897: PPUSH
25898: PPUSH
25899: PPUSH
25900: PPUSH
// result := [ ] ;
25901: LD_ADDR_VAR 0 2
25905: PUSH
25906: EMPTY
25907: ST_TO_ADDR
// if campaign_id = 1 then
25908: LD_OWVAR 69
25912: PUSH
25913: LD_INT 1
25915: EQUAL
25916: IFFALSE 29082
// begin case mission_number of 1 :
25918: LD_OWVAR 70
25922: PUSH
25923: LD_INT 1
25925: DOUBLE
25926: EQUAL
25927: IFTRUE 25931
25929: GO 26007
25931: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
25932: LD_ADDR_VAR 0 2
25936: PUSH
25937: LD_INT 2
25939: PUSH
25940: LD_INT 4
25942: PUSH
25943: LD_INT 11
25945: PUSH
25946: LD_INT 12
25948: PUSH
25949: LD_INT 15
25951: PUSH
25952: LD_INT 16
25954: PUSH
25955: LD_INT 22
25957: PUSH
25958: LD_INT 23
25960: PUSH
25961: LD_INT 26
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 101
25977: PUSH
25978: LD_INT 102
25980: PUSH
25981: LD_INT 106
25983: PUSH
25984: LD_INT 116
25986: PUSH
25987: LD_INT 117
25989: PUSH
25990: LD_INT 118
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: ST_TO_ADDR
26005: GO 29080
26007: LD_INT 2
26009: DOUBLE
26010: EQUAL
26011: IFTRUE 26015
26013: GO 26099
26015: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
26016: LD_ADDR_VAR 0 2
26020: PUSH
26021: LD_INT 2
26023: PUSH
26024: LD_INT 4
26026: PUSH
26027: LD_INT 11
26029: PUSH
26030: LD_INT 12
26032: PUSH
26033: LD_INT 15
26035: PUSH
26036: LD_INT 16
26038: PUSH
26039: LD_INT 22
26041: PUSH
26042: LD_INT 23
26044: PUSH
26045: LD_INT 26
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 101
26061: PUSH
26062: LD_INT 102
26064: PUSH
26065: LD_INT 105
26067: PUSH
26068: LD_INT 106
26070: PUSH
26071: LD_INT 108
26073: PUSH
26074: LD_INT 116
26076: PUSH
26077: LD_INT 117
26079: PUSH
26080: LD_INT 118
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: ST_TO_ADDR
26097: GO 29080
26099: LD_INT 3
26101: DOUBLE
26102: EQUAL
26103: IFTRUE 26107
26105: GO 26195
26107: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
26108: LD_ADDR_VAR 0 2
26112: PUSH
26113: LD_INT 2
26115: PUSH
26116: LD_INT 4
26118: PUSH
26119: LD_INT 5
26121: PUSH
26122: LD_INT 11
26124: PUSH
26125: LD_INT 12
26127: PUSH
26128: LD_INT 15
26130: PUSH
26131: LD_INT 16
26133: PUSH
26134: LD_INT 22
26136: PUSH
26137: LD_INT 26
26139: PUSH
26140: LD_INT 36
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 101
26157: PUSH
26158: LD_INT 102
26160: PUSH
26161: LD_INT 105
26163: PUSH
26164: LD_INT 106
26166: PUSH
26167: LD_INT 108
26169: PUSH
26170: LD_INT 116
26172: PUSH
26173: LD_INT 117
26175: PUSH
26176: LD_INT 118
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: ST_TO_ADDR
26193: GO 29080
26195: LD_INT 4
26197: DOUBLE
26198: EQUAL
26199: IFTRUE 26203
26201: GO 26299
26203: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
26204: LD_ADDR_VAR 0 2
26208: PUSH
26209: LD_INT 2
26211: PUSH
26212: LD_INT 4
26214: PUSH
26215: LD_INT 5
26217: PUSH
26218: LD_INT 8
26220: PUSH
26221: LD_INT 11
26223: PUSH
26224: LD_INT 12
26226: PUSH
26227: LD_INT 15
26229: PUSH
26230: LD_INT 16
26232: PUSH
26233: LD_INT 22
26235: PUSH
26236: LD_INT 23
26238: PUSH
26239: LD_INT 26
26241: PUSH
26242: LD_INT 36
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 101
26261: PUSH
26262: LD_INT 102
26264: PUSH
26265: LD_INT 105
26267: PUSH
26268: LD_INT 106
26270: PUSH
26271: LD_INT 108
26273: PUSH
26274: LD_INT 116
26276: PUSH
26277: LD_INT 117
26279: PUSH
26280: LD_INT 118
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: ST_TO_ADDR
26297: GO 29080
26299: LD_INT 5
26301: DOUBLE
26302: EQUAL
26303: IFTRUE 26307
26305: GO 26419
26307: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
26308: LD_ADDR_VAR 0 2
26312: PUSH
26313: LD_INT 2
26315: PUSH
26316: LD_INT 4
26318: PUSH
26319: LD_INT 5
26321: PUSH
26322: LD_INT 6
26324: PUSH
26325: LD_INT 8
26327: PUSH
26328: LD_INT 11
26330: PUSH
26331: LD_INT 12
26333: PUSH
26334: LD_INT 15
26336: PUSH
26337: LD_INT 16
26339: PUSH
26340: LD_INT 22
26342: PUSH
26343: LD_INT 23
26345: PUSH
26346: LD_INT 25
26348: PUSH
26349: LD_INT 26
26351: PUSH
26352: LD_INT 36
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 101
26373: PUSH
26374: LD_INT 102
26376: PUSH
26377: LD_INT 105
26379: PUSH
26380: LD_INT 106
26382: PUSH
26383: LD_INT 108
26385: PUSH
26386: LD_INT 109
26388: PUSH
26389: LD_INT 112
26391: PUSH
26392: LD_INT 116
26394: PUSH
26395: LD_INT 117
26397: PUSH
26398: LD_INT 118
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: ST_TO_ADDR
26417: GO 29080
26419: LD_INT 6
26421: DOUBLE
26422: EQUAL
26423: IFTRUE 26427
26425: GO 26559
26427: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
26428: LD_ADDR_VAR 0 2
26432: PUSH
26433: LD_INT 2
26435: PUSH
26436: LD_INT 4
26438: PUSH
26439: LD_INT 5
26441: PUSH
26442: LD_INT 6
26444: PUSH
26445: LD_INT 8
26447: PUSH
26448: LD_INT 11
26450: PUSH
26451: LD_INT 12
26453: PUSH
26454: LD_INT 15
26456: PUSH
26457: LD_INT 16
26459: PUSH
26460: LD_INT 20
26462: PUSH
26463: LD_INT 21
26465: PUSH
26466: LD_INT 22
26468: PUSH
26469: LD_INT 23
26471: PUSH
26472: LD_INT 25
26474: PUSH
26475: LD_INT 26
26477: PUSH
26478: LD_INT 30
26480: PUSH
26481: LD_INT 31
26483: PUSH
26484: LD_INT 32
26486: PUSH
26487: LD_INT 36
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 101
26513: PUSH
26514: LD_INT 102
26516: PUSH
26517: LD_INT 105
26519: PUSH
26520: LD_INT 106
26522: PUSH
26523: LD_INT 108
26525: PUSH
26526: LD_INT 109
26528: PUSH
26529: LD_INT 112
26531: PUSH
26532: LD_INT 116
26534: PUSH
26535: LD_INT 117
26537: PUSH
26538: LD_INT 118
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: ST_TO_ADDR
26557: GO 29080
26559: LD_INT 7
26561: DOUBLE
26562: EQUAL
26563: IFTRUE 26567
26565: GO 26679
26567: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
26568: LD_ADDR_VAR 0 2
26572: PUSH
26573: LD_INT 2
26575: PUSH
26576: LD_INT 4
26578: PUSH
26579: LD_INT 5
26581: PUSH
26582: LD_INT 7
26584: PUSH
26585: LD_INT 11
26587: PUSH
26588: LD_INT 12
26590: PUSH
26591: LD_INT 15
26593: PUSH
26594: LD_INT 16
26596: PUSH
26597: LD_INT 20
26599: PUSH
26600: LD_INT 21
26602: PUSH
26603: LD_INT 22
26605: PUSH
26606: LD_INT 23
26608: PUSH
26609: LD_INT 25
26611: PUSH
26612: LD_INT 26
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 101
26633: PUSH
26634: LD_INT 102
26636: PUSH
26637: LD_INT 103
26639: PUSH
26640: LD_INT 105
26642: PUSH
26643: LD_INT 106
26645: PUSH
26646: LD_INT 108
26648: PUSH
26649: LD_INT 112
26651: PUSH
26652: LD_INT 116
26654: PUSH
26655: LD_INT 117
26657: PUSH
26658: LD_INT 118
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: ST_TO_ADDR
26677: GO 29080
26679: LD_INT 8
26681: DOUBLE
26682: EQUAL
26683: IFTRUE 26687
26685: GO 26827
26687: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
26688: LD_ADDR_VAR 0 2
26692: PUSH
26693: LD_INT 2
26695: PUSH
26696: LD_INT 4
26698: PUSH
26699: LD_INT 5
26701: PUSH
26702: LD_INT 6
26704: PUSH
26705: LD_INT 7
26707: PUSH
26708: LD_INT 8
26710: PUSH
26711: LD_INT 11
26713: PUSH
26714: LD_INT 12
26716: PUSH
26717: LD_INT 15
26719: PUSH
26720: LD_INT 16
26722: PUSH
26723: LD_INT 20
26725: PUSH
26726: LD_INT 21
26728: PUSH
26729: LD_INT 22
26731: PUSH
26732: LD_INT 23
26734: PUSH
26735: LD_INT 25
26737: PUSH
26738: LD_INT 26
26740: PUSH
26741: LD_INT 30
26743: PUSH
26744: LD_INT 31
26746: PUSH
26747: LD_INT 32
26749: PUSH
26750: LD_INT 36
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 101
26777: PUSH
26778: LD_INT 102
26780: PUSH
26781: LD_INT 103
26783: PUSH
26784: LD_INT 105
26786: PUSH
26787: LD_INT 106
26789: PUSH
26790: LD_INT 108
26792: PUSH
26793: LD_INT 109
26795: PUSH
26796: LD_INT 112
26798: PUSH
26799: LD_INT 116
26801: PUSH
26802: LD_INT 117
26804: PUSH
26805: LD_INT 118
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: ST_TO_ADDR
26825: GO 29080
26827: LD_INT 9
26829: DOUBLE
26830: EQUAL
26831: IFTRUE 26835
26833: GO 26983
26835: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
26836: LD_ADDR_VAR 0 2
26840: PUSH
26841: LD_INT 2
26843: PUSH
26844: LD_INT 4
26846: PUSH
26847: LD_INT 5
26849: PUSH
26850: LD_INT 6
26852: PUSH
26853: LD_INT 7
26855: PUSH
26856: LD_INT 8
26858: PUSH
26859: LD_INT 11
26861: PUSH
26862: LD_INT 12
26864: PUSH
26865: LD_INT 15
26867: PUSH
26868: LD_INT 16
26870: PUSH
26871: LD_INT 20
26873: PUSH
26874: LD_INT 21
26876: PUSH
26877: LD_INT 22
26879: PUSH
26880: LD_INT 23
26882: PUSH
26883: LD_INT 25
26885: PUSH
26886: LD_INT 26
26888: PUSH
26889: LD_INT 28
26891: PUSH
26892: LD_INT 30
26894: PUSH
26895: LD_INT 31
26897: PUSH
26898: LD_INT 32
26900: PUSH
26901: LD_INT 36
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 101
26929: PUSH
26930: LD_INT 102
26932: PUSH
26933: LD_INT 103
26935: PUSH
26936: LD_INT 105
26938: PUSH
26939: LD_INT 106
26941: PUSH
26942: LD_INT 108
26944: PUSH
26945: LD_INT 109
26947: PUSH
26948: LD_INT 112
26950: PUSH
26951: LD_INT 114
26953: PUSH
26954: LD_INT 116
26956: PUSH
26957: LD_INT 117
26959: PUSH
26960: LD_INT 118
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: ST_TO_ADDR
26981: GO 29080
26983: LD_INT 10
26985: DOUBLE
26986: EQUAL
26987: IFTRUE 26991
26989: GO 27187
26991: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
26992: LD_ADDR_VAR 0 2
26996: PUSH
26997: LD_INT 2
26999: PUSH
27000: LD_INT 4
27002: PUSH
27003: LD_INT 5
27005: PUSH
27006: LD_INT 6
27008: PUSH
27009: LD_INT 7
27011: PUSH
27012: LD_INT 8
27014: PUSH
27015: LD_INT 9
27017: PUSH
27018: LD_INT 10
27020: PUSH
27021: LD_INT 11
27023: PUSH
27024: LD_INT 12
27026: PUSH
27027: LD_INT 13
27029: PUSH
27030: LD_INT 14
27032: PUSH
27033: LD_INT 15
27035: PUSH
27036: LD_INT 16
27038: PUSH
27039: LD_INT 17
27041: PUSH
27042: LD_INT 18
27044: PUSH
27045: LD_INT 19
27047: PUSH
27048: LD_INT 20
27050: PUSH
27051: LD_INT 21
27053: PUSH
27054: LD_INT 22
27056: PUSH
27057: LD_INT 23
27059: PUSH
27060: LD_INT 24
27062: PUSH
27063: LD_INT 25
27065: PUSH
27066: LD_INT 26
27068: PUSH
27069: LD_INT 28
27071: PUSH
27072: LD_INT 30
27074: PUSH
27075: LD_INT 31
27077: PUSH
27078: LD_INT 32
27080: PUSH
27081: LD_INT 36
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 101
27117: PUSH
27118: LD_INT 102
27120: PUSH
27121: LD_INT 103
27123: PUSH
27124: LD_INT 104
27126: PUSH
27127: LD_INT 105
27129: PUSH
27130: LD_INT 106
27132: PUSH
27133: LD_INT 107
27135: PUSH
27136: LD_INT 108
27138: PUSH
27139: LD_INT 109
27141: PUSH
27142: LD_INT 110
27144: PUSH
27145: LD_INT 111
27147: PUSH
27148: LD_INT 112
27150: PUSH
27151: LD_INT 114
27153: PUSH
27154: LD_INT 116
27156: PUSH
27157: LD_INT 117
27159: PUSH
27160: LD_INT 118
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: ST_TO_ADDR
27185: GO 29080
27187: LD_INT 11
27189: DOUBLE
27190: EQUAL
27191: IFTRUE 27195
27193: GO 27399
27195: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
27196: LD_ADDR_VAR 0 2
27200: PUSH
27201: LD_INT 2
27203: PUSH
27204: LD_INT 3
27206: PUSH
27207: LD_INT 4
27209: PUSH
27210: LD_INT 5
27212: PUSH
27213: LD_INT 6
27215: PUSH
27216: LD_INT 7
27218: PUSH
27219: LD_INT 8
27221: PUSH
27222: LD_INT 9
27224: PUSH
27225: LD_INT 10
27227: PUSH
27228: LD_INT 11
27230: PUSH
27231: LD_INT 12
27233: PUSH
27234: LD_INT 13
27236: PUSH
27237: LD_INT 14
27239: PUSH
27240: LD_INT 15
27242: PUSH
27243: LD_INT 16
27245: PUSH
27246: LD_INT 17
27248: PUSH
27249: LD_INT 18
27251: PUSH
27252: LD_INT 19
27254: PUSH
27255: LD_INT 20
27257: PUSH
27258: LD_INT 21
27260: PUSH
27261: LD_INT 22
27263: PUSH
27264: LD_INT 23
27266: PUSH
27267: LD_INT 24
27269: PUSH
27270: LD_INT 25
27272: PUSH
27273: LD_INT 26
27275: PUSH
27276: LD_INT 28
27278: PUSH
27279: LD_INT 30
27281: PUSH
27282: LD_INT 31
27284: PUSH
27285: LD_INT 32
27287: PUSH
27288: LD_INT 34
27290: PUSH
27291: LD_INT 36
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: PUSH
27327: LD_INT 101
27329: PUSH
27330: LD_INT 102
27332: PUSH
27333: LD_INT 103
27335: PUSH
27336: LD_INT 104
27338: PUSH
27339: LD_INT 105
27341: PUSH
27342: LD_INT 106
27344: PUSH
27345: LD_INT 107
27347: PUSH
27348: LD_INT 108
27350: PUSH
27351: LD_INT 109
27353: PUSH
27354: LD_INT 110
27356: PUSH
27357: LD_INT 111
27359: PUSH
27360: LD_INT 112
27362: PUSH
27363: LD_INT 114
27365: PUSH
27366: LD_INT 116
27368: PUSH
27369: LD_INT 117
27371: PUSH
27372: LD_INT 118
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: ST_TO_ADDR
27397: GO 29080
27399: LD_INT 12
27401: DOUBLE
27402: EQUAL
27403: IFTRUE 27407
27405: GO 27627
27407: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
27408: LD_ADDR_VAR 0 2
27412: PUSH
27413: LD_INT 1
27415: PUSH
27416: LD_INT 2
27418: PUSH
27419: LD_INT 3
27421: PUSH
27422: LD_INT 4
27424: PUSH
27425: LD_INT 5
27427: PUSH
27428: LD_INT 6
27430: PUSH
27431: LD_INT 7
27433: PUSH
27434: LD_INT 8
27436: PUSH
27437: LD_INT 9
27439: PUSH
27440: LD_INT 10
27442: PUSH
27443: LD_INT 11
27445: PUSH
27446: LD_INT 12
27448: PUSH
27449: LD_INT 13
27451: PUSH
27452: LD_INT 14
27454: PUSH
27455: LD_INT 15
27457: PUSH
27458: LD_INT 16
27460: PUSH
27461: LD_INT 17
27463: PUSH
27464: LD_INT 18
27466: PUSH
27467: LD_INT 19
27469: PUSH
27470: LD_INT 20
27472: PUSH
27473: LD_INT 21
27475: PUSH
27476: LD_INT 22
27478: PUSH
27479: LD_INT 23
27481: PUSH
27482: LD_INT 24
27484: PUSH
27485: LD_INT 25
27487: PUSH
27488: LD_INT 26
27490: PUSH
27491: LD_INT 27
27493: PUSH
27494: LD_INT 28
27496: PUSH
27497: LD_INT 30
27499: PUSH
27500: LD_INT 31
27502: PUSH
27503: LD_INT 32
27505: PUSH
27506: LD_INT 33
27508: PUSH
27509: LD_INT 34
27511: PUSH
27512: LD_INT 36
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 101
27553: PUSH
27554: LD_INT 102
27556: PUSH
27557: LD_INT 103
27559: PUSH
27560: LD_INT 104
27562: PUSH
27563: LD_INT 105
27565: PUSH
27566: LD_INT 106
27568: PUSH
27569: LD_INT 107
27571: PUSH
27572: LD_INT 108
27574: PUSH
27575: LD_INT 109
27577: PUSH
27578: LD_INT 110
27580: PUSH
27581: LD_INT 111
27583: PUSH
27584: LD_INT 112
27586: PUSH
27587: LD_INT 113
27589: PUSH
27590: LD_INT 114
27592: PUSH
27593: LD_INT 116
27595: PUSH
27596: LD_INT 117
27598: PUSH
27599: LD_INT 118
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: ST_TO_ADDR
27625: GO 29080
27627: LD_INT 13
27629: DOUBLE
27630: EQUAL
27631: IFTRUE 27635
27633: GO 27843
27635: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
27636: LD_ADDR_VAR 0 2
27640: PUSH
27641: LD_INT 1
27643: PUSH
27644: LD_INT 2
27646: PUSH
27647: LD_INT 3
27649: PUSH
27650: LD_INT 4
27652: PUSH
27653: LD_INT 5
27655: PUSH
27656: LD_INT 8
27658: PUSH
27659: LD_INT 9
27661: PUSH
27662: LD_INT 10
27664: PUSH
27665: LD_INT 11
27667: PUSH
27668: LD_INT 12
27670: PUSH
27671: LD_INT 14
27673: PUSH
27674: LD_INT 15
27676: PUSH
27677: LD_INT 16
27679: PUSH
27680: LD_INT 17
27682: PUSH
27683: LD_INT 18
27685: PUSH
27686: LD_INT 19
27688: PUSH
27689: LD_INT 20
27691: PUSH
27692: LD_INT 21
27694: PUSH
27695: LD_INT 22
27697: PUSH
27698: LD_INT 23
27700: PUSH
27701: LD_INT 24
27703: PUSH
27704: LD_INT 25
27706: PUSH
27707: LD_INT 26
27709: PUSH
27710: LD_INT 27
27712: PUSH
27713: LD_INT 28
27715: PUSH
27716: LD_INT 30
27718: PUSH
27719: LD_INT 31
27721: PUSH
27722: LD_INT 32
27724: PUSH
27725: LD_INT 33
27727: PUSH
27728: LD_INT 34
27730: PUSH
27731: LD_INT 36
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 101
27769: PUSH
27770: LD_INT 102
27772: PUSH
27773: LD_INT 103
27775: PUSH
27776: LD_INT 104
27778: PUSH
27779: LD_INT 105
27781: PUSH
27782: LD_INT 106
27784: PUSH
27785: LD_INT 107
27787: PUSH
27788: LD_INT 108
27790: PUSH
27791: LD_INT 109
27793: PUSH
27794: LD_INT 110
27796: PUSH
27797: LD_INT 111
27799: PUSH
27800: LD_INT 112
27802: PUSH
27803: LD_INT 113
27805: PUSH
27806: LD_INT 114
27808: PUSH
27809: LD_INT 116
27811: PUSH
27812: LD_INT 117
27814: PUSH
27815: LD_INT 118
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: ST_TO_ADDR
27841: GO 29080
27843: LD_INT 14
27845: DOUBLE
27846: EQUAL
27847: IFTRUE 27851
27849: GO 28075
27851: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
27852: LD_ADDR_VAR 0 2
27856: PUSH
27857: LD_INT 1
27859: PUSH
27860: LD_INT 2
27862: PUSH
27863: LD_INT 3
27865: PUSH
27866: LD_INT 4
27868: PUSH
27869: LD_INT 5
27871: PUSH
27872: LD_INT 6
27874: PUSH
27875: LD_INT 7
27877: PUSH
27878: LD_INT 8
27880: PUSH
27881: LD_INT 9
27883: PUSH
27884: LD_INT 10
27886: PUSH
27887: LD_INT 11
27889: PUSH
27890: LD_INT 12
27892: PUSH
27893: LD_INT 13
27895: PUSH
27896: LD_INT 14
27898: PUSH
27899: LD_INT 15
27901: PUSH
27902: LD_INT 16
27904: PUSH
27905: LD_INT 17
27907: PUSH
27908: LD_INT 18
27910: PUSH
27911: LD_INT 19
27913: PUSH
27914: LD_INT 20
27916: PUSH
27917: LD_INT 21
27919: PUSH
27920: LD_INT 22
27922: PUSH
27923: LD_INT 23
27925: PUSH
27926: LD_INT 24
27928: PUSH
27929: LD_INT 25
27931: PUSH
27932: LD_INT 26
27934: PUSH
27935: LD_INT 27
27937: PUSH
27938: LD_INT 28
27940: PUSH
27941: LD_INT 29
27943: PUSH
27944: LD_INT 30
27946: PUSH
27947: LD_INT 31
27949: PUSH
27950: LD_INT 32
27952: PUSH
27953: LD_INT 33
27955: PUSH
27956: LD_INT 34
27958: PUSH
27959: LD_INT 36
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 101
28001: PUSH
28002: LD_INT 102
28004: PUSH
28005: LD_INT 103
28007: PUSH
28008: LD_INT 104
28010: PUSH
28011: LD_INT 105
28013: PUSH
28014: LD_INT 106
28016: PUSH
28017: LD_INT 107
28019: PUSH
28020: LD_INT 108
28022: PUSH
28023: LD_INT 109
28025: PUSH
28026: LD_INT 110
28028: PUSH
28029: LD_INT 111
28031: PUSH
28032: LD_INT 112
28034: PUSH
28035: LD_INT 113
28037: PUSH
28038: LD_INT 114
28040: PUSH
28041: LD_INT 116
28043: PUSH
28044: LD_INT 117
28046: PUSH
28047: LD_INT 118
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: ST_TO_ADDR
28073: GO 29080
28075: LD_INT 15
28077: DOUBLE
28078: EQUAL
28079: IFTRUE 28083
28081: GO 28307
28083: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
28084: LD_ADDR_VAR 0 2
28088: PUSH
28089: LD_INT 1
28091: PUSH
28092: LD_INT 2
28094: PUSH
28095: LD_INT 3
28097: PUSH
28098: LD_INT 4
28100: PUSH
28101: LD_INT 5
28103: PUSH
28104: LD_INT 6
28106: PUSH
28107: LD_INT 7
28109: PUSH
28110: LD_INT 8
28112: PUSH
28113: LD_INT 9
28115: PUSH
28116: LD_INT 10
28118: PUSH
28119: LD_INT 11
28121: PUSH
28122: LD_INT 12
28124: PUSH
28125: LD_INT 13
28127: PUSH
28128: LD_INT 14
28130: PUSH
28131: LD_INT 15
28133: PUSH
28134: LD_INT 16
28136: PUSH
28137: LD_INT 17
28139: PUSH
28140: LD_INT 18
28142: PUSH
28143: LD_INT 19
28145: PUSH
28146: LD_INT 20
28148: PUSH
28149: LD_INT 21
28151: PUSH
28152: LD_INT 22
28154: PUSH
28155: LD_INT 23
28157: PUSH
28158: LD_INT 24
28160: PUSH
28161: LD_INT 25
28163: PUSH
28164: LD_INT 26
28166: PUSH
28167: LD_INT 27
28169: PUSH
28170: LD_INT 28
28172: PUSH
28173: LD_INT 29
28175: PUSH
28176: LD_INT 30
28178: PUSH
28179: LD_INT 31
28181: PUSH
28182: LD_INT 32
28184: PUSH
28185: LD_INT 33
28187: PUSH
28188: LD_INT 34
28190: PUSH
28191: LD_INT 36
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 101
28233: PUSH
28234: LD_INT 102
28236: PUSH
28237: LD_INT 103
28239: PUSH
28240: LD_INT 104
28242: PUSH
28243: LD_INT 105
28245: PUSH
28246: LD_INT 106
28248: PUSH
28249: LD_INT 107
28251: PUSH
28252: LD_INT 108
28254: PUSH
28255: LD_INT 109
28257: PUSH
28258: LD_INT 110
28260: PUSH
28261: LD_INT 111
28263: PUSH
28264: LD_INT 112
28266: PUSH
28267: LD_INT 113
28269: PUSH
28270: LD_INT 114
28272: PUSH
28273: LD_INT 116
28275: PUSH
28276: LD_INT 117
28278: PUSH
28279: LD_INT 118
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: ST_TO_ADDR
28305: GO 29080
28307: LD_INT 16
28309: DOUBLE
28310: EQUAL
28311: IFTRUE 28315
28313: GO 28451
28315: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
28316: LD_ADDR_VAR 0 2
28320: PUSH
28321: LD_INT 2
28323: PUSH
28324: LD_INT 4
28326: PUSH
28327: LD_INT 5
28329: PUSH
28330: LD_INT 7
28332: PUSH
28333: LD_INT 11
28335: PUSH
28336: LD_INT 12
28338: PUSH
28339: LD_INT 15
28341: PUSH
28342: LD_INT 16
28344: PUSH
28345: LD_INT 20
28347: PUSH
28348: LD_INT 21
28350: PUSH
28351: LD_INT 22
28353: PUSH
28354: LD_INT 23
28356: PUSH
28357: LD_INT 25
28359: PUSH
28360: LD_INT 26
28362: PUSH
28363: LD_INT 30
28365: PUSH
28366: LD_INT 31
28368: PUSH
28369: LD_INT 32
28371: PUSH
28372: LD_INT 33
28374: PUSH
28375: LD_INT 34
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 101
28401: PUSH
28402: LD_INT 102
28404: PUSH
28405: LD_INT 103
28407: PUSH
28408: LD_INT 106
28410: PUSH
28411: LD_INT 108
28413: PUSH
28414: LD_INT 112
28416: PUSH
28417: LD_INT 113
28419: PUSH
28420: LD_INT 114
28422: PUSH
28423: LD_INT 116
28425: PUSH
28426: LD_INT 117
28428: PUSH
28429: LD_INT 118
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: ST_TO_ADDR
28449: GO 29080
28451: LD_INT 17
28453: DOUBLE
28454: EQUAL
28455: IFTRUE 28459
28457: GO 28683
28459: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
28460: LD_ADDR_VAR 0 2
28464: PUSH
28465: LD_INT 1
28467: PUSH
28468: LD_INT 2
28470: PUSH
28471: LD_INT 3
28473: PUSH
28474: LD_INT 4
28476: PUSH
28477: LD_INT 5
28479: PUSH
28480: LD_INT 6
28482: PUSH
28483: LD_INT 7
28485: PUSH
28486: LD_INT 8
28488: PUSH
28489: LD_INT 9
28491: PUSH
28492: LD_INT 10
28494: PUSH
28495: LD_INT 11
28497: PUSH
28498: LD_INT 12
28500: PUSH
28501: LD_INT 13
28503: PUSH
28504: LD_INT 14
28506: PUSH
28507: LD_INT 15
28509: PUSH
28510: LD_INT 16
28512: PUSH
28513: LD_INT 17
28515: PUSH
28516: LD_INT 18
28518: PUSH
28519: LD_INT 19
28521: PUSH
28522: LD_INT 20
28524: PUSH
28525: LD_INT 21
28527: PUSH
28528: LD_INT 22
28530: PUSH
28531: LD_INT 23
28533: PUSH
28534: LD_INT 24
28536: PUSH
28537: LD_INT 25
28539: PUSH
28540: LD_INT 26
28542: PUSH
28543: LD_INT 27
28545: PUSH
28546: LD_INT 28
28548: PUSH
28549: LD_INT 29
28551: PUSH
28552: LD_INT 30
28554: PUSH
28555: LD_INT 31
28557: PUSH
28558: LD_INT 32
28560: PUSH
28561: LD_INT 33
28563: PUSH
28564: LD_INT 34
28566: PUSH
28567: LD_INT 36
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 101
28609: PUSH
28610: LD_INT 102
28612: PUSH
28613: LD_INT 103
28615: PUSH
28616: LD_INT 104
28618: PUSH
28619: LD_INT 105
28621: PUSH
28622: LD_INT 106
28624: PUSH
28625: LD_INT 107
28627: PUSH
28628: LD_INT 108
28630: PUSH
28631: LD_INT 109
28633: PUSH
28634: LD_INT 110
28636: PUSH
28637: LD_INT 111
28639: PUSH
28640: LD_INT 112
28642: PUSH
28643: LD_INT 113
28645: PUSH
28646: LD_INT 114
28648: PUSH
28649: LD_INT 116
28651: PUSH
28652: LD_INT 117
28654: PUSH
28655: LD_INT 118
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: ST_TO_ADDR
28681: GO 29080
28683: LD_INT 18
28685: DOUBLE
28686: EQUAL
28687: IFTRUE 28691
28689: GO 28839
28691: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
28692: LD_ADDR_VAR 0 2
28696: PUSH
28697: LD_INT 2
28699: PUSH
28700: LD_INT 4
28702: PUSH
28703: LD_INT 5
28705: PUSH
28706: LD_INT 7
28708: PUSH
28709: LD_INT 11
28711: PUSH
28712: LD_INT 12
28714: PUSH
28715: LD_INT 15
28717: PUSH
28718: LD_INT 16
28720: PUSH
28721: LD_INT 20
28723: PUSH
28724: LD_INT 21
28726: PUSH
28727: LD_INT 22
28729: PUSH
28730: LD_INT 23
28732: PUSH
28733: LD_INT 25
28735: PUSH
28736: LD_INT 26
28738: PUSH
28739: LD_INT 30
28741: PUSH
28742: LD_INT 31
28744: PUSH
28745: LD_INT 32
28747: PUSH
28748: LD_INT 33
28750: PUSH
28751: LD_INT 34
28753: PUSH
28754: LD_INT 35
28756: PUSH
28757: LD_INT 36
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 101
28785: PUSH
28786: LD_INT 102
28788: PUSH
28789: LD_INT 103
28791: PUSH
28792: LD_INT 106
28794: PUSH
28795: LD_INT 108
28797: PUSH
28798: LD_INT 112
28800: PUSH
28801: LD_INT 113
28803: PUSH
28804: LD_INT 114
28806: PUSH
28807: LD_INT 115
28809: PUSH
28810: LD_INT 116
28812: PUSH
28813: LD_INT 117
28815: PUSH
28816: LD_INT 118
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: ST_TO_ADDR
28837: GO 29080
28839: LD_INT 19
28841: DOUBLE
28842: EQUAL
28843: IFTRUE 28847
28845: GO 29079
28847: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
28848: LD_ADDR_VAR 0 2
28852: PUSH
28853: LD_INT 1
28855: PUSH
28856: LD_INT 2
28858: PUSH
28859: LD_INT 3
28861: PUSH
28862: LD_INT 4
28864: PUSH
28865: LD_INT 5
28867: PUSH
28868: LD_INT 6
28870: PUSH
28871: LD_INT 7
28873: PUSH
28874: LD_INT 8
28876: PUSH
28877: LD_INT 9
28879: PUSH
28880: LD_INT 10
28882: PUSH
28883: LD_INT 11
28885: PUSH
28886: LD_INT 12
28888: PUSH
28889: LD_INT 13
28891: PUSH
28892: LD_INT 14
28894: PUSH
28895: LD_INT 15
28897: PUSH
28898: LD_INT 16
28900: PUSH
28901: LD_INT 17
28903: PUSH
28904: LD_INT 18
28906: PUSH
28907: LD_INT 19
28909: PUSH
28910: LD_INT 20
28912: PUSH
28913: LD_INT 21
28915: PUSH
28916: LD_INT 22
28918: PUSH
28919: LD_INT 23
28921: PUSH
28922: LD_INT 24
28924: PUSH
28925: LD_INT 25
28927: PUSH
28928: LD_INT 26
28930: PUSH
28931: LD_INT 27
28933: PUSH
28934: LD_INT 28
28936: PUSH
28937: LD_INT 29
28939: PUSH
28940: LD_INT 30
28942: PUSH
28943: LD_INT 31
28945: PUSH
28946: LD_INT 32
28948: PUSH
28949: LD_INT 33
28951: PUSH
28952: LD_INT 34
28954: PUSH
28955: LD_INT 35
28957: PUSH
28958: LD_INT 36
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 101
29001: PUSH
29002: LD_INT 102
29004: PUSH
29005: LD_INT 103
29007: PUSH
29008: LD_INT 104
29010: PUSH
29011: LD_INT 105
29013: PUSH
29014: LD_INT 106
29016: PUSH
29017: LD_INT 107
29019: PUSH
29020: LD_INT 108
29022: PUSH
29023: LD_INT 109
29025: PUSH
29026: LD_INT 110
29028: PUSH
29029: LD_INT 111
29031: PUSH
29032: LD_INT 112
29034: PUSH
29035: LD_INT 113
29037: PUSH
29038: LD_INT 114
29040: PUSH
29041: LD_INT 115
29043: PUSH
29044: LD_INT 116
29046: PUSH
29047: LD_INT 117
29049: PUSH
29050: LD_INT 118
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: ST_TO_ADDR
29077: GO 29080
29079: POP
// end else
29080: GO 29311
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
29082: LD_ADDR_VAR 0 2
29086: PUSH
29087: LD_INT 1
29089: PUSH
29090: LD_INT 2
29092: PUSH
29093: LD_INT 3
29095: PUSH
29096: LD_INT 4
29098: PUSH
29099: LD_INT 5
29101: PUSH
29102: LD_INT 6
29104: PUSH
29105: LD_INT 7
29107: PUSH
29108: LD_INT 8
29110: PUSH
29111: LD_INT 9
29113: PUSH
29114: LD_INT 10
29116: PUSH
29117: LD_INT 11
29119: PUSH
29120: LD_INT 12
29122: PUSH
29123: LD_INT 13
29125: PUSH
29126: LD_INT 14
29128: PUSH
29129: LD_INT 15
29131: PUSH
29132: LD_INT 16
29134: PUSH
29135: LD_INT 17
29137: PUSH
29138: LD_INT 18
29140: PUSH
29141: LD_INT 19
29143: PUSH
29144: LD_INT 20
29146: PUSH
29147: LD_INT 21
29149: PUSH
29150: LD_INT 22
29152: PUSH
29153: LD_INT 23
29155: PUSH
29156: LD_INT 24
29158: PUSH
29159: LD_INT 25
29161: PUSH
29162: LD_INT 26
29164: PUSH
29165: LD_INT 27
29167: PUSH
29168: LD_INT 28
29170: PUSH
29171: LD_INT 29
29173: PUSH
29174: LD_INT 30
29176: PUSH
29177: LD_INT 31
29179: PUSH
29180: LD_INT 32
29182: PUSH
29183: LD_INT 33
29185: PUSH
29186: LD_INT 34
29188: PUSH
29189: LD_INT 35
29191: PUSH
29192: LD_INT 36
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 101
29235: PUSH
29236: LD_INT 102
29238: PUSH
29239: LD_INT 103
29241: PUSH
29242: LD_INT 104
29244: PUSH
29245: LD_INT 105
29247: PUSH
29248: LD_INT 106
29250: PUSH
29251: LD_INT 107
29253: PUSH
29254: LD_INT 108
29256: PUSH
29257: LD_INT 109
29259: PUSH
29260: LD_INT 110
29262: PUSH
29263: LD_INT 111
29265: PUSH
29266: LD_INT 112
29268: PUSH
29269: LD_INT 113
29271: PUSH
29272: LD_INT 114
29274: PUSH
29275: LD_INT 115
29277: PUSH
29278: LD_INT 116
29280: PUSH
29281: LD_INT 117
29283: PUSH
29284: LD_INT 118
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: ST_TO_ADDR
// if result then
29311: LD_VAR 0 2
29315: IFFALSE 30101
// begin normal :=  ;
29317: LD_ADDR_VAR 0 5
29321: PUSH
29322: LD_STRING 
29324: ST_TO_ADDR
// hardcore :=  ;
29325: LD_ADDR_VAR 0 6
29329: PUSH
29330: LD_STRING 
29332: ST_TO_ADDR
// active :=  ;
29333: LD_ADDR_VAR 0 7
29337: PUSH
29338: LD_STRING 
29340: ST_TO_ADDR
// for i = 1 to normalCounter do
29341: LD_ADDR_VAR 0 8
29345: PUSH
29346: DOUBLE
29347: LD_INT 1
29349: DEC
29350: ST_TO_ADDR
29351: LD_EXP 85
29355: PUSH
29356: FOR_TO
29357: IFFALSE 29458
// begin tmp := 0 ;
29359: LD_ADDR_VAR 0 3
29363: PUSH
29364: LD_STRING 0
29366: ST_TO_ADDR
// if result [ 1 ] then
29367: LD_VAR 0 2
29371: PUSH
29372: LD_INT 1
29374: ARRAY
29375: IFFALSE 29440
// if result [ 1 ] [ 1 ] = i then
29377: LD_VAR 0 2
29381: PUSH
29382: LD_INT 1
29384: ARRAY
29385: PUSH
29386: LD_INT 1
29388: ARRAY
29389: PUSH
29390: LD_VAR 0 8
29394: EQUAL
29395: IFFALSE 29440
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
29397: LD_ADDR_VAR 0 2
29401: PUSH
29402: LD_VAR 0 2
29406: PPUSH
29407: LD_INT 1
29409: PPUSH
29410: LD_VAR 0 2
29414: PUSH
29415: LD_INT 1
29417: ARRAY
29418: PPUSH
29419: LD_INT 1
29421: PPUSH
29422: CALL_OW 3
29426: PPUSH
29427: CALL_OW 1
29431: ST_TO_ADDR
// tmp := 1 ;
29432: LD_ADDR_VAR 0 3
29436: PUSH
29437: LD_STRING 1
29439: ST_TO_ADDR
// end ; normal := normal & tmp ;
29440: LD_ADDR_VAR 0 5
29444: PUSH
29445: LD_VAR 0 5
29449: PUSH
29450: LD_VAR 0 3
29454: STR
29455: ST_TO_ADDR
// end ;
29456: GO 29356
29458: POP
29459: POP
// for i = 1 to hardcoreCounter do
29460: LD_ADDR_VAR 0 8
29464: PUSH
29465: DOUBLE
29466: LD_INT 1
29468: DEC
29469: ST_TO_ADDR
29470: LD_EXP 86
29474: PUSH
29475: FOR_TO
29476: IFFALSE 29581
// begin tmp := 0 ;
29478: LD_ADDR_VAR 0 3
29482: PUSH
29483: LD_STRING 0
29485: ST_TO_ADDR
// if result [ 2 ] then
29486: LD_VAR 0 2
29490: PUSH
29491: LD_INT 2
29493: ARRAY
29494: IFFALSE 29563
// if result [ 2 ] [ 1 ] = 100 + i then
29496: LD_VAR 0 2
29500: PUSH
29501: LD_INT 2
29503: ARRAY
29504: PUSH
29505: LD_INT 1
29507: ARRAY
29508: PUSH
29509: LD_INT 100
29511: PUSH
29512: LD_VAR 0 8
29516: PLUS
29517: EQUAL
29518: IFFALSE 29563
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
29520: LD_ADDR_VAR 0 2
29524: PUSH
29525: LD_VAR 0 2
29529: PPUSH
29530: LD_INT 2
29532: PPUSH
29533: LD_VAR 0 2
29537: PUSH
29538: LD_INT 2
29540: ARRAY
29541: PPUSH
29542: LD_INT 1
29544: PPUSH
29545: CALL_OW 3
29549: PPUSH
29550: CALL_OW 1
29554: ST_TO_ADDR
// tmp := 1 ;
29555: LD_ADDR_VAR 0 3
29559: PUSH
29560: LD_STRING 1
29562: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
29563: LD_ADDR_VAR 0 6
29567: PUSH
29568: LD_VAR 0 6
29572: PUSH
29573: LD_VAR 0 3
29577: STR
29578: ST_TO_ADDR
// end ;
29579: GO 29475
29581: POP
29582: POP
// if isGameLoad then
29583: LD_VAR 0 1
29587: IFFALSE 30062
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
29589: LD_ADDR_VAR 0 4
29593: PUSH
29594: LD_EXP 89
29598: PUSH
29599: LD_EXP 88
29603: PUSH
29604: LD_EXP 90
29608: PUSH
29609: LD_EXP 87
29613: PUSH
29614: LD_EXP 91
29618: PUSH
29619: LD_EXP 92
29623: PUSH
29624: LD_EXP 93
29628: PUSH
29629: LD_EXP 94
29633: PUSH
29634: LD_EXP 95
29638: PUSH
29639: LD_EXP 96
29643: PUSH
29644: LD_EXP 97
29648: PUSH
29649: LD_EXP 98
29653: PUSH
29654: LD_EXP 99
29658: PUSH
29659: LD_EXP 100
29663: PUSH
29664: LD_EXP 108
29668: PUSH
29669: LD_EXP 109
29673: PUSH
29674: LD_EXP 110
29678: PUSH
29679: LD_EXP 111
29683: PUSH
29684: LD_EXP 113
29688: PUSH
29689: LD_EXP 114
29693: PUSH
29694: LD_EXP 115
29698: PUSH
29699: LD_EXP 118
29703: PUSH
29704: LD_EXP 120
29708: PUSH
29709: LD_EXP 121
29713: PUSH
29714: LD_EXP 122
29718: PUSH
29719: LD_EXP 124
29723: PUSH
29724: LD_EXP 125
29728: PUSH
29729: LD_EXP 128
29733: PUSH
29734: LD_EXP 129
29738: PUSH
29739: LD_EXP 130
29743: PUSH
29744: LD_EXP 131
29748: PUSH
29749: LD_EXP 132
29753: PUSH
29754: LD_EXP 133
29758: PUSH
29759: LD_EXP 134
29763: PUSH
29764: LD_EXP 135
29768: PUSH
29769: LD_EXP 136
29773: PUSH
29774: LD_EXP 101
29778: PUSH
29779: LD_EXP 102
29783: PUSH
29784: LD_EXP 105
29788: PUSH
29789: LD_EXP 106
29793: PUSH
29794: LD_EXP 107
29798: PUSH
29799: LD_EXP 103
29803: PUSH
29804: LD_EXP 104
29808: PUSH
29809: LD_EXP 112
29813: PUSH
29814: LD_EXP 116
29818: PUSH
29819: LD_EXP 117
29823: PUSH
29824: LD_EXP 119
29828: PUSH
29829: LD_EXP 123
29833: PUSH
29834: LD_EXP 126
29838: PUSH
29839: LD_EXP 127
29843: PUSH
29844: LD_EXP 137
29848: PUSH
29849: LD_EXP 138
29853: PUSH
29854: LD_EXP 139
29858: PUSH
29859: LD_EXP 140
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: ST_TO_ADDR
// tmp :=  ;
29920: LD_ADDR_VAR 0 3
29924: PUSH
29925: LD_STRING 
29927: ST_TO_ADDR
// for i = 1 to normalCounter do
29928: LD_ADDR_VAR 0 8
29932: PUSH
29933: DOUBLE
29934: LD_INT 1
29936: DEC
29937: ST_TO_ADDR
29938: LD_EXP 85
29942: PUSH
29943: FOR_TO
29944: IFFALSE 29980
// begin if flags [ i ] then
29946: LD_VAR 0 4
29950: PUSH
29951: LD_VAR 0 8
29955: ARRAY
29956: IFFALSE 29978
// tmp := tmp & i & ; ;
29958: LD_ADDR_VAR 0 3
29962: PUSH
29963: LD_VAR 0 3
29967: PUSH
29968: LD_VAR 0 8
29972: STR
29973: PUSH
29974: LD_STRING ;
29976: STR
29977: ST_TO_ADDR
// end ;
29978: GO 29943
29980: POP
29981: POP
// for i = 1 to hardcoreCounter do
29982: LD_ADDR_VAR 0 8
29986: PUSH
29987: DOUBLE
29988: LD_INT 1
29990: DEC
29991: ST_TO_ADDR
29992: LD_EXP 86
29996: PUSH
29997: FOR_TO
29998: IFFALSE 30044
// begin if flags [ normalCounter + i ] then
30000: LD_VAR 0 4
30004: PUSH
30005: LD_EXP 85
30009: PUSH
30010: LD_VAR 0 8
30014: PLUS
30015: ARRAY
30016: IFFALSE 30042
// tmp := tmp & ( 100 + i ) & ; ;
30018: LD_ADDR_VAR 0 3
30022: PUSH
30023: LD_VAR 0 3
30027: PUSH
30028: LD_INT 100
30030: PUSH
30031: LD_VAR 0 8
30035: PLUS
30036: STR
30037: PUSH
30038: LD_STRING ;
30040: STR
30041: ST_TO_ADDR
// end ;
30042: GO 29997
30044: POP
30045: POP
// if tmp then
30046: LD_VAR 0 3
30050: IFFALSE 30062
// active := tmp ;
30052: LD_ADDR_VAR 0 7
30056: PUSH
30057: LD_VAR 0 3
30061: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
30062: LD_STRING getStreamItemsFromMission("
30064: PUSH
30065: LD_VAR 0 5
30069: STR
30070: PUSH
30071: LD_STRING ","
30073: STR
30074: PUSH
30075: LD_VAR 0 6
30079: STR
30080: PUSH
30081: LD_STRING ","
30083: STR
30084: PUSH
30085: LD_VAR 0 7
30089: STR
30090: PUSH
30091: LD_STRING ")
30093: STR
30094: PPUSH
30095: CALL_OW 559
// end else
30099: GO 30108
// ToLua ( getStreamItemsFromMission("","","") ) ;
30101: LD_STRING getStreamItemsFromMission("","","")
30103: PPUSH
30104: CALL_OW 559
// end ;
30108: LD_VAR 0 2
30112: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
30113: LD_EXP 84
30117: PUSH
30118: LD_EXP 89
30122: AND
30123: IFFALSE 30247
30125: GO 30127
30127: DISABLE
30128: LD_INT 0
30130: PPUSH
30131: PPUSH
// begin enable ;
30132: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
30133: LD_ADDR_VAR 0 2
30137: PUSH
30138: LD_INT 22
30140: PUSH
30141: LD_OWVAR 2
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 2
30152: PUSH
30153: LD_INT 34
30155: PUSH
30156: LD_INT 7
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 34
30165: PUSH
30166: LD_INT 45
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 34
30175: PUSH
30176: LD_INT 28
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 34
30185: PUSH
30186: LD_INT 47
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PPUSH
30204: CALL_OW 69
30208: ST_TO_ADDR
// if not tmp then
30209: LD_VAR 0 2
30213: NOT
30214: IFFALSE 30218
// exit ;
30216: GO 30247
// for i in tmp do
30218: LD_ADDR_VAR 0 1
30222: PUSH
30223: LD_VAR 0 2
30227: PUSH
30228: FOR_IN
30229: IFFALSE 30245
// begin SetLives ( i , 0 ) ;
30231: LD_VAR 0 1
30235: PPUSH
30236: LD_INT 0
30238: PPUSH
30239: CALL_OW 234
// end ;
30243: GO 30228
30245: POP
30246: POP
// end ;
30247: PPOPN 2
30249: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
30250: LD_EXP 84
30254: PUSH
30255: LD_EXP 90
30259: AND
30260: IFFALSE 30344
30262: GO 30264
30264: DISABLE
30265: LD_INT 0
30267: PPUSH
30268: PPUSH
// begin enable ;
30269: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
30270: LD_ADDR_VAR 0 2
30274: PUSH
30275: LD_INT 22
30277: PUSH
30278: LD_OWVAR 2
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 32
30289: PUSH
30290: LD_INT 3
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PPUSH
30301: CALL_OW 69
30305: ST_TO_ADDR
// if not tmp then
30306: LD_VAR 0 2
30310: NOT
30311: IFFALSE 30315
// exit ;
30313: GO 30344
// for i in tmp do
30315: LD_ADDR_VAR 0 1
30319: PUSH
30320: LD_VAR 0 2
30324: PUSH
30325: FOR_IN
30326: IFFALSE 30342
// begin SetLives ( i , 0 ) ;
30328: LD_VAR 0 1
30332: PPUSH
30333: LD_INT 0
30335: PPUSH
30336: CALL_OW 234
// end ;
30340: GO 30325
30342: POP
30343: POP
// end ;
30344: PPOPN 2
30346: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
30347: LD_EXP 84
30351: PUSH
30352: LD_EXP 87
30356: AND
30357: IFFALSE 30450
30359: GO 30361
30361: DISABLE
30362: LD_INT 0
30364: PPUSH
// begin enable ;
30365: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
30366: LD_ADDR_VAR 0 1
30370: PUSH
30371: LD_INT 22
30373: PUSH
30374: LD_OWVAR 2
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 2
30385: PUSH
30386: LD_INT 25
30388: PUSH
30389: LD_INT 5
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 25
30398: PUSH
30399: LD_INT 9
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 25
30408: PUSH
30409: LD_INT 8
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PPUSH
30426: CALL_OW 69
30430: PUSH
30431: FOR_IN
30432: IFFALSE 30448
// begin SetClass ( i , 1 ) ;
30434: LD_VAR 0 1
30438: PPUSH
30439: LD_INT 1
30441: PPUSH
30442: CALL_OW 336
// end ;
30446: GO 30431
30448: POP
30449: POP
// end ;
30450: PPOPN 1
30452: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
30453: LD_EXP 84
30457: PUSH
30458: LD_EXP 88
30462: AND
30463: PUSH
30464: LD_OWVAR 65
30468: PUSH
30469: LD_INT 7
30471: LESS
30472: AND
30473: IFFALSE 30487
30475: GO 30477
30477: DISABLE
// begin enable ;
30478: ENABLE
// game_speed := 7 ;
30479: LD_ADDR_OWVAR 65
30483: PUSH
30484: LD_INT 7
30486: ST_TO_ADDR
// end ;
30487: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
30488: LD_EXP 84
30492: PUSH
30493: LD_EXP 91
30497: AND
30498: IFFALSE 30700
30500: GO 30502
30502: DISABLE
30503: LD_INT 0
30505: PPUSH
30506: PPUSH
30507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30508: LD_ADDR_VAR 0 3
30512: PUSH
30513: LD_INT 81
30515: PUSH
30516: LD_OWVAR 2
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 21
30527: PUSH
30528: LD_INT 1
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PPUSH
30539: CALL_OW 69
30543: ST_TO_ADDR
// if not tmp then
30544: LD_VAR 0 3
30548: NOT
30549: IFFALSE 30553
// exit ;
30551: GO 30700
// if tmp > 5 then
30553: LD_VAR 0 3
30557: PUSH
30558: LD_INT 5
30560: GREATER
30561: IFFALSE 30573
// k := 5 else
30563: LD_ADDR_VAR 0 2
30567: PUSH
30568: LD_INT 5
30570: ST_TO_ADDR
30571: GO 30583
// k := tmp ;
30573: LD_ADDR_VAR 0 2
30577: PUSH
30578: LD_VAR 0 3
30582: ST_TO_ADDR
// for i := 1 to k do
30583: LD_ADDR_VAR 0 1
30587: PUSH
30588: DOUBLE
30589: LD_INT 1
30591: DEC
30592: ST_TO_ADDR
30593: LD_VAR 0 2
30597: PUSH
30598: FOR_TO
30599: IFFALSE 30698
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
30601: LD_VAR 0 3
30605: PUSH
30606: LD_VAR 0 1
30610: ARRAY
30611: PPUSH
30612: LD_VAR 0 1
30616: PUSH
30617: LD_INT 4
30619: MOD
30620: PUSH
30621: LD_INT 1
30623: PLUS
30624: PPUSH
30625: CALL_OW 259
30629: PUSH
30630: LD_INT 10
30632: LESS
30633: IFFALSE 30696
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
30635: LD_VAR 0 3
30639: PUSH
30640: LD_VAR 0 1
30644: ARRAY
30645: PPUSH
30646: LD_VAR 0 1
30650: PUSH
30651: LD_INT 4
30653: MOD
30654: PUSH
30655: LD_INT 1
30657: PLUS
30658: PPUSH
30659: LD_VAR 0 3
30663: PUSH
30664: LD_VAR 0 1
30668: ARRAY
30669: PPUSH
30670: LD_VAR 0 1
30674: PUSH
30675: LD_INT 4
30677: MOD
30678: PUSH
30679: LD_INT 1
30681: PLUS
30682: PPUSH
30683: CALL_OW 259
30687: PUSH
30688: LD_INT 1
30690: PLUS
30691: PPUSH
30692: CALL_OW 237
30696: GO 30598
30698: POP
30699: POP
// end ;
30700: PPOPN 3
30702: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
30703: LD_EXP 84
30707: PUSH
30708: LD_EXP 92
30712: AND
30713: IFFALSE 30733
30715: GO 30717
30717: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
30718: LD_INT 4
30720: PPUSH
30721: LD_OWVAR 2
30725: PPUSH
30726: LD_INT 0
30728: PPUSH
30729: CALL_OW 324
30733: END
// every 0 0$1 trigger StreamModeActive and sShovel do
30734: LD_EXP 84
30738: PUSH
30739: LD_EXP 121
30743: AND
30744: IFFALSE 30764
30746: GO 30748
30748: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
30749: LD_INT 19
30751: PPUSH
30752: LD_OWVAR 2
30756: PPUSH
30757: LD_INT 0
30759: PPUSH
30760: CALL_OW 324
30764: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
30765: LD_EXP 84
30769: PUSH
30770: LD_EXP 93
30774: AND
30775: IFFALSE 30877
30777: GO 30779
30779: DISABLE
30780: LD_INT 0
30782: PPUSH
30783: PPUSH
// begin enable ;
30784: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
30785: LD_ADDR_VAR 0 2
30789: PUSH
30790: LD_INT 22
30792: PUSH
30793: LD_OWVAR 2
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 2
30804: PUSH
30805: LD_INT 34
30807: PUSH
30808: LD_INT 11
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 34
30817: PUSH
30818: LD_INT 30
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: LIST
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PPUSH
30834: CALL_OW 69
30838: ST_TO_ADDR
// if not tmp then
30839: LD_VAR 0 2
30843: NOT
30844: IFFALSE 30848
// exit ;
30846: GO 30877
// for i in tmp do
30848: LD_ADDR_VAR 0 1
30852: PUSH
30853: LD_VAR 0 2
30857: PUSH
30858: FOR_IN
30859: IFFALSE 30875
// begin SetLives ( i , 0 ) ;
30861: LD_VAR 0 1
30865: PPUSH
30866: LD_INT 0
30868: PPUSH
30869: CALL_OW 234
// end ;
30873: GO 30858
30875: POP
30876: POP
// end ;
30877: PPOPN 2
30879: END
// every 0 0$1 trigger StreamModeActive and sBunker do
30880: LD_EXP 84
30884: PUSH
30885: LD_EXP 94
30889: AND
30890: IFFALSE 30910
30892: GO 30894
30894: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
30895: LD_INT 32
30897: PPUSH
30898: LD_OWVAR 2
30902: PPUSH
30903: LD_INT 0
30905: PPUSH
30906: CALL_OW 324
30910: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
30911: LD_EXP 84
30915: PUSH
30916: LD_EXP 95
30920: AND
30921: IFFALSE 31102
30923: GO 30925
30925: DISABLE
30926: LD_INT 0
30928: PPUSH
30929: PPUSH
30930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
30931: LD_ADDR_VAR 0 2
30935: PUSH
30936: LD_INT 22
30938: PUSH
30939: LD_OWVAR 2
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 33
30950: PUSH
30951: LD_INT 3
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PPUSH
30962: CALL_OW 69
30966: ST_TO_ADDR
// if not tmp then
30967: LD_VAR 0 2
30971: NOT
30972: IFFALSE 30976
// exit ;
30974: GO 31102
// side := 0 ;
30976: LD_ADDR_VAR 0 3
30980: PUSH
30981: LD_INT 0
30983: ST_TO_ADDR
// for i := 1 to 8 do
30984: LD_ADDR_VAR 0 1
30988: PUSH
30989: DOUBLE
30990: LD_INT 1
30992: DEC
30993: ST_TO_ADDR
30994: LD_INT 8
30996: PUSH
30997: FOR_TO
30998: IFFALSE 31046
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
31000: LD_OWVAR 2
31004: PUSH
31005: LD_VAR 0 1
31009: NONEQUAL
31010: PUSH
31011: LD_OWVAR 2
31015: PPUSH
31016: LD_VAR 0 1
31020: PPUSH
31021: CALL_OW 81
31025: PUSH
31026: LD_INT 2
31028: EQUAL
31029: AND
31030: IFFALSE 31044
// begin side := i ;
31032: LD_ADDR_VAR 0 3
31036: PUSH
31037: LD_VAR 0 1
31041: ST_TO_ADDR
// break ;
31042: GO 31046
// end ;
31044: GO 30997
31046: POP
31047: POP
// if not side then
31048: LD_VAR 0 3
31052: NOT
31053: IFFALSE 31057
// exit ;
31055: GO 31102
// for i := 1 to tmp do
31057: LD_ADDR_VAR 0 1
31061: PUSH
31062: DOUBLE
31063: LD_INT 1
31065: DEC
31066: ST_TO_ADDR
31067: LD_VAR 0 2
31071: PUSH
31072: FOR_TO
31073: IFFALSE 31100
// if Prob ( 60 ) then
31075: LD_INT 60
31077: PPUSH
31078: CALL_OW 13
31082: IFFALSE 31098
// SetSide ( i , side ) ;
31084: LD_VAR 0 1
31088: PPUSH
31089: LD_VAR 0 3
31093: PPUSH
31094: CALL_OW 235
31098: GO 31072
31100: POP
31101: POP
// end ;
31102: PPOPN 3
31104: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
31105: LD_EXP 84
31109: PUSH
31110: LD_EXP 97
31114: AND
31115: IFFALSE 31234
31117: GO 31119
31119: DISABLE
31120: LD_INT 0
31122: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
31123: LD_ADDR_VAR 0 1
31127: PUSH
31128: LD_INT 22
31130: PUSH
31131: LD_OWVAR 2
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 21
31142: PUSH
31143: LD_INT 1
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: LD_INT 3
31152: PUSH
31153: LD_INT 23
31155: PUSH
31156: LD_INT 0
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: LIST
31171: PPUSH
31172: CALL_OW 69
31176: PUSH
31177: FOR_IN
31178: IFFALSE 31232
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
31180: LD_VAR 0 1
31184: PPUSH
31185: CALL_OW 257
31189: PUSH
31190: LD_INT 1
31192: PUSH
31193: LD_INT 2
31195: PUSH
31196: LD_INT 3
31198: PUSH
31199: LD_INT 4
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: IN
31208: IFFALSE 31230
// SetClass ( un , rand ( 1 , 4 ) ) ;
31210: LD_VAR 0 1
31214: PPUSH
31215: LD_INT 1
31217: PPUSH
31218: LD_INT 4
31220: PPUSH
31221: CALL_OW 12
31225: PPUSH
31226: CALL_OW 336
31230: GO 31177
31232: POP
31233: POP
// end ;
31234: PPOPN 1
31236: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
31237: LD_EXP 84
31241: PUSH
31242: LD_EXP 96
31246: AND
31247: IFFALSE 31326
31249: GO 31251
31251: DISABLE
31252: LD_INT 0
31254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
31255: LD_ADDR_VAR 0 1
31259: PUSH
31260: LD_INT 22
31262: PUSH
31263: LD_OWVAR 2
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 21
31274: PUSH
31275: LD_INT 3
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PPUSH
31286: CALL_OW 69
31290: ST_TO_ADDR
// if not tmp then
31291: LD_VAR 0 1
31295: NOT
31296: IFFALSE 31300
// exit ;
31298: GO 31326
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
31300: LD_VAR 0 1
31304: PUSH
31305: LD_INT 1
31307: PPUSH
31308: LD_VAR 0 1
31312: PPUSH
31313: CALL_OW 12
31317: ARRAY
31318: PPUSH
31319: LD_INT 100
31321: PPUSH
31322: CALL_OW 234
// end ;
31326: PPOPN 1
31328: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
31329: LD_EXP 84
31333: PUSH
31334: LD_EXP 98
31338: AND
31339: IFFALSE 31437
31341: GO 31343
31343: DISABLE
31344: LD_INT 0
31346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31347: LD_ADDR_VAR 0 1
31351: PUSH
31352: LD_INT 22
31354: PUSH
31355: LD_OWVAR 2
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 21
31366: PUSH
31367: LD_INT 1
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PPUSH
31378: CALL_OW 69
31382: ST_TO_ADDR
// if not tmp then
31383: LD_VAR 0 1
31387: NOT
31388: IFFALSE 31392
// exit ;
31390: GO 31437
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
31392: LD_VAR 0 1
31396: PUSH
31397: LD_INT 1
31399: PPUSH
31400: LD_VAR 0 1
31404: PPUSH
31405: CALL_OW 12
31409: ARRAY
31410: PPUSH
31411: LD_INT 1
31413: PPUSH
31414: LD_INT 4
31416: PPUSH
31417: CALL_OW 12
31421: PPUSH
31422: LD_INT 3000
31424: PPUSH
31425: LD_INT 9000
31427: PPUSH
31428: CALL_OW 12
31432: PPUSH
31433: CALL_OW 492
// end ;
31437: PPOPN 1
31439: END
// every 0 0$1 trigger StreamModeActive and sDepot do
31440: LD_EXP 84
31444: PUSH
31445: LD_EXP 99
31449: AND
31450: IFFALSE 31470
31452: GO 31454
31454: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
31455: LD_INT 1
31457: PPUSH
31458: LD_OWVAR 2
31462: PPUSH
31463: LD_INT 0
31465: PPUSH
31466: CALL_OW 324
31470: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
31471: LD_EXP 84
31475: PUSH
31476: LD_EXP 100
31480: AND
31481: IFFALSE 31564
31483: GO 31485
31485: DISABLE
31486: LD_INT 0
31488: PPUSH
31489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
31490: LD_ADDR_VAR 0 2
31494: PUSH
31495: LD_INT 22
31497: PUSH
31498: LD_OWVAR 2
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 21
31509: PUSH
31510: LD_INT 3
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PPUSH
31521: CALL_OW 69
31525: ST_TO_ADDR
// if not tmp then
31526: LD_VAR 0 2
31530: NOT
31531: IFFALSE 31535
// exit ;
31533: GO 31564
// for i in tmp do
31535: LD_ADDR_VAR 0 1
31539: PUSH
31540: LD_VAR 0 2
31544: PUSH
31545: FOR_IN
31546: IFFALSE 31562
// SetBLevel ( i , 10 ) ;
31548: LD_VAR 0 1
31552: PPUSH
31553: LD_INT 10
31555: PPUSH
31556: CALL_OW 241
31560: GO 31545
31562: POP
31563: POP
// end ;
31564: PPOPN 2
31566: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
31567: LD_EXP 84
31571: PUSH
31572: LD_EXP 101
31576: AND
31577: IFFALSE 31688
31579: GO 31581
31581: DISABLE
31582: LD_INT 0
31584: PPUSH
31585: PPUSH
31586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31587: LD_ADDR_VAR 0 3
31591: PUSH
31592: LD_INT 22
31594: PUSH
31595: LD_OWVAR 2
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 25
31606: PUSH
31607: LD_INT 1
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PPUSH
31618: CALL_OW 69
31622: ST_TO_ADDR
// if not tmp then
31623: LD_VAR 0 3
31627: NOT
31628: IFFALSE 31632
// exit ;
31630: GO 31688
// un := tmp [ rand ( 1 , tmp ) ] ;
31632: LD_ADDR_VAR 0 2
31636: PUSH
31637: LD_VAR 0 3
31641: PUSH
31642: LD_INT 1
31644: PPUSH
31645: LD_VAR 0 3
31649: PPUSH
31650: CALL_OW 12
31654: ARRAY
31655: ST_TO_ADDR
// if Crawls ( un ) then
31656: LD_VAR 0 2
31660: PPUSH
31661: CALL_OW 318
31665: IFFALSE 31676
// ComWalk ( un ) ;
31667: LD_VAR 0 2
31671: PPUSH
31672: CALL_OW 138
// SetClass ( un , class_sniper ) ;
31676: LD_VAR 0 2
31680: PPUSH
31681: LD_INT 5
31683: PPUSH
31684: CALL_OW 336
// end ;
31688: PPOPN 3
31690: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
31691: LD_EXP 84
31695: PUSH
31696: LD_EXP 102
31700: AND
31701: PUSH
31702: LD_OWVAR 67
31706: PUSH
31707: LD_INT 4
31709: LESS
31710: AND
31711: IFFALSE 31730
31713: GO 31715
31715: DISABLE
// begin Difficulty := Difficulty + 1 ;
31716: LD_ADDR_OWVAR 67
31720: PUSH
31721: LD_OWVAR 67
31725: PUSH
31726: LD_INT 1
31728: PLUS
31729: ST_TO_ADDR
// end ;
31730: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
31731: LD_EXP 84
31735: PUSH
31736: LD_EXP 103
31740: AND
31741: IFFALSE 31844
31743: GO 31745
31745: DISABLE
31746: LD_INT 0
31748: PPUSH
// begin for i := 1 to 5 do
31749: LD_ADDR_VAR 0 1
31753: PUSH
31754: DOUBLE
31755: LD_INT 1
31757: DEC
31758: ST_TO_ADDR
31759: LD_INT 5
31761: PUSH
31762: FOR_TO
31763: IFFALSE 31842
// begin uc_nation := nation_nature ;
31765: LD_ADDR_OWVAR 21
31769: PUSH
31770: LD_INT 0
31772: ST_TO_ADDR
// uc_side := 0 ;
31773: LD_ADDR_OWVAR 20
31777: PUSH
31778: LD_INT 0
31780: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
31781: LD_ADDR_OWVAR 29
31785: PUSH
31786: LD_INT 12
31788: PUSH
31789: LD_INT 12
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: ST_TO_ADDR
// hc_agressivity := 20 ;
31796: LD_ADDR_OWVAR 35
31800: PUSH
31801: LD_INT 20
31803: ST_TO_ADDR
// hc_class := class_tiger ;
31804: LD_ADDR_OWVAR 28
31808: PUSH
31809: LD_INT 14
31811: ST_TO_ADDR
// hc_gallery :=  ;
31812: LD_ADDR_OWVAR 33
31816: PUSH
31817: LD_STRING 
31819: ST_TO_ADDR
// hc_name :=  ;
31820: LD_ADDR_OWVAR 26
31824: PUSH
31825: LD_STRING 
31827: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
31828: CALL_OW 44
31832: PPUSH
31833: LD_INT 0
31835: PPUSH
31836: CALL_OW 51
// end ;
31840: GO 31762
31842: POP
31843: POP
// end ;
31844: PPOPN 1
31846: END
// every 0 0$1 trigger StreamModeActive and sBomb do
31847: LD_EXP 84
31851: PUSH
31852: LD_EXP 104
31856: AND
31857: IFFALSE 31866
31859: GO 31861
31861: DISABLE
// StreamSibBomb ;
31862: CALL 31867 0 0
31866: END
// export function StreamSibBomb ; var i , x , y ; begin
31867: LD_INT 0
31869: PPUSH
31870: PPUSH
31871: PPUSH
31872: PPUSH
// result := false ;
31873: LD_ADDR_VAR 0 1
31877: PUSH
31878: LD_INT 0
31880: ST_TO_ADDR
// for i := 1 to 16 do
31881: LD_ADDR_VAR 0 2
31885: PUSH
31886: DOUBLE
31887: LD_INT 1
31889: DEC
31890: ST_TO_ADDR
31891: LD_INT 16
31893: PUSH
31894: FOR_TO
31895: IFFALSE 32094
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31897: LD_ADDR_VAR 0 3
31901: PUSH
31902: LD_INT 10
31904: PUSH
31905: LD_INT 20
31907: PUSH
31908: LD_INT 30
31910: PUSH
31911: LD_INT 40
31913: PUSH
31914: LD_INT 50
31916: PUSH
31917: LD_INT 60
31919: PUSH
31920: LD_INT 70
31922: PUSH
31923: LD_INT 80
31925: PUSH
31926: LD_INT 90
31928: PUSH
31929: LD_INT 100
31931: PUSH
31932: LD_INT 110
31934: PUSH
31935: LD_INT 120
31937: PUSH
31938: LD_INT 130
31940: PUSH
31941: LD_INT 140
31943: PUSH
31944: LD_INT 150
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 1
31966: PPUSH
31967: LD_INT 15
31969: PPUSH
31970: CALL_OW 12
31974: ARRAY
31975: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31976: LD_ADDR_VAR 0 4
31980: PUSH
31981: LD_INT 10
31983: PUSH
31984: LD_INT 20
31986: PUSH
31987: LD_INT 30
31989: PUSH
31990: LD_INT 40
31992: PUSH
31993: LD_INT 50
31995: PUSH
31996: LD_INT 60
31998: PUSH
31999: LD_INT 70
32001: PUSH
32002: LD_INT 80
32004: PUSH
32005: LD_INT 90
32007: PUSH
32008: LD_INT 100
32010: PUSH
32011: LD_INT 110
32013: PUSH
32014: LD_INT 120
32016: PUSH
32017: LD_INT 130
32019: PUSH
32020: LD_INT 140
32022: PUSH
32023: LD_INT 150
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 1
32045: PPUSH
32046: LD_INT 15
32048: PPUSH
32049: CALL_OW 12
32053: ARRAY
32054: ST_TO_ADDR
// if ValidHex ( x , y ) then
32055: LD_VAR 0 3
32059: PPUSH
32060: LD_VAR 0 4
32064: PPUSH
32065: CALL_OW 488
32069: IFFALSE 32092
// begin result := [ x , y ] ;
32071: LD_ADDR_VAR 0 1
32075: PUSH
32076: LD_VAR 0 3
32080: PUSH
32081: LD_VAR 0 4
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: ST_TO_ADDR
// break ;
32090: GO 32094
// end ; end ;
32092: GO 31894
32094: POP
32095: POP
// if result then
32096: LD_VAR 0 1
32100: IFFALSE 32160
// begin ToLua ( playSibBomb() ) ;
32102: LD_STRING playSibBomb()
32104: PPUSH
32105: CALL_OW 559
// wait ( 0 0$14 ) ;
32109: LD_INT 490
32111: PPUSH
32112: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
32116: LD_VAR 0 1
32120: PUSH
32121: LD_INT 1
32123: ARRAY
32124: PPUSH
32125: LD_VAR 0 1
32129: PUSH
32130: LD_INT 2
32132: ARRAY
32133: PPUSH
32134: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
32138: LD_VAR 0 1
32142: PUSH
32143: LD_INT 1
32145: ARRAY
32146: PPUSH
32147: LD_VAR 0 1
32151: PUSH
32152: LD_INT 2
32154: ARRAY
32155: PPUSH
32156: CALL_OW 429
// end ; end ;
32160: LD_VAR 0 1
32164: RET
// every 0 0$1 trigger StreamModeActive and sReset do
32165: LD_EXP 84
32169: PUSH
32170: LD_EXP 106
32174: AND
32175: IFFALSE 32187
32177: GO 32179
32179: DISABLE
// YouLost (  ) ;
32180: LD_STRING 
32182: PPUSH
32183: CALL_OW 104
32187: END
// every 0 0$1 trigger StreamModeActive and sFog do
32188: LD_EXP 84
32192: PUSH
32193: LD_EXP 105
32197: AND
32198: IFFALSE 32212
32200: GO 32202
32202: DISABLE
// FogOff ( your_side ) ;
32203: LD_OWVAR 2
32207: PPUSH
32208: CALL_OW 344
32212: END
// every 0 0$1 trigger StreamModeActive and sSun do
32213: LD_EXP 84
32217: PUSH
32218: LD_EXP 107
32222: AND
32223: IFFALSE 32251
32225: GO 32227
32227: DISABLE
// begin solar_recharge_percent := 0 ;
32228: LD_ADDR_OWVAR 79
32232: PUSH
32233: LD_INT 0
32235: ST_TO_ADDR
// wait ( 5 5$00 ) ;
32236: LD_INT 10500
32238: PPUSH
32239: CALL_OW 67
// solar_recharge_percent := 100 ;
32243: LD_ADDR_OWVAR 79
32247: PUSH
32248: LD_INT 100
32250: ST_TO_ADDR
// end ;
32251: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
32252: LD_EXP 84
32256: PUSH
32257: LD_EXP 108
32261: AND
32262: IFFALSE 32501
32264: GO 32266
32266: DISABLE
32267: LD_INT 0
32269: PPUSH
32270: PPUSH
32271: PPUSH
// begin tmp := [ ] ;
32272: LD_ADDR_VAR 0 3
32276: PUSH
32277: EMPTY
32278: ST_TO_ADDR
// for i := 1 to 6 do
32279: LD_ADDR_VAR 0 1
32283: PUSH
32284: DOUBLE
32285: LD_INT 1
32287: DEC
32288: ST_TO_ADDR
32289: LD_INT 6
32291: PUSH
32292: FOR_TO
32293: IFFALSE 32398
// begin uc_nation := nation_nature ;
32295: LD_ADDR_OWVAR 21
32299: PUSH
32300: LD_INT 0
32302: ST_TO_ADDR
// uc_side := 0 ;
32303: LD_ADDR_OWVAR 20
32307: PUSH
32308: LD_INT 0
32310: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
32311: LD_ADDR_OWVAR 29
32315: PUSH
32316: LD_INT 12
32318: PUSH
32319: LD_INT 12
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: ST_TO_ADDR
// hc_agressivity := 20 ;
32326: LD_ADDR_OWVAR 35
32330: PUSH
32331: LD_INT 20
32333: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
32334: LD_ADDR_OWVAR 28
32338: PUSH
32339: LD_INT 17
32341: ST_TO_ADDR
// hc_gallery :=  ;
32342: LD_ADDR_OWVAR 33
32346: PUSH
32347: LD_STRING 
32349: ST_TO_ADDR
// hc_name :=  ;
32350: LD_ADDR_OWVAR 26
32354: PUSH
32355: LD_STRING 
32357: ST_TO_ADDR
// un := CreateHuman ;
32358: LD_ADDR_VAR 0 2
32362: PUSH
32363: CALL_OW 44
32367: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
32368: LD_VAR 0 2
32372: PPUSH
32373: LD_INT 1
32375: PPUSH
32376: CALL_OW 51
// tmp := tmp ^ un ;
32380: LD_ADDR_VAR 0 3
32384: PUSH
32385: LD_VAR 0 3
32389: PUSH
32390: LD_VAR 0 2
32394: ADD
32395: ST_TO_ADDR
// end ;
32396: GO 32292
32398: POP
32399: POP
// repeat wait ( 0 0$1 ) ;
32400: LD_INT 35
32402: PPUSH
32403: CALL_OW 67
// for un in tmp do
32407: LD_ADDR_VAR 0 2
32411: PUSH
32412: LD_VAR 0 3
32416: PUSH
32417: FOR_IN
32418: IFFALSE 32492
// begin if IsDead ( un ) then
32420: LD_VAR 0 2
32424: PPUSH
32425: CALL_OW 301
32429: IFFALSE 32449
// begin tmp := tmp diff un ;
32431: LD_ADDR_VAR 0 3
32435: PUSH
32436: LD_VAR 0 3
32440: PUSH
32441: LD_VAR 0 2
32445: DIFF
32446: ST_TO_ADDR
// continue ;
32447: GO 32417
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
32449: LD_VAR 0 2
32453: PPUSH
32454: LD_INT 3
32456: PUSH
32457: LD_INT 22
32459: PUSH
32460: LD_INT 0
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PPUSH
32471: CALL_OW 69
32475: PPUSH
32476: LD_VAR 0 2
32480: PPUSH
32481: CALL_OW 74
32485: PPUSH
32486: CALL_OW 115
// end ;
32490: GO 32417
32492: POP
32493: POP
// until not tmp ;
32494: LD_VAR 0 3
32498: NOT
32499: IFFALSE 32400
// end ;
32501: PPOPN 3
32503: END
// every 0 0$1 trigger StreamModeActive and sTroll do
32504: LD_EXP 84
32508: PUSH
32509: LD_EXP 109
32513: AND
32514: IFFALSE 32568
32516: GO 32518
32518: DISABLE
// begin ToLua ( displayTroll(); ) ;
32519: LD_STRING displayTroll();
32521: PPUSH
32522: CALL_OW 559
// wait ( 3 3$00 ) ;
32526: LD_INT 6300
32528: PPUSH
32529: CALL_OW 67
// ToLua ( hideTroll(); ) ;
32533: LD_STRING hideTroll();
32535: PPUSH
32536: CALL_OW 559
// wait ( 1 1$00 ) ;
32540: LD_INT 2100
32542: PPUSH
32543: CALL_OW 67
// ToLua ( displayTroll(); ) ;
32547: LD_STRING displayTroll();
32549: PPUSH
32550: CALL_OW 559
// wait ( 1 1$00 ) ;
32554: LD_INT 2100
32556: PPUSH
32557: CALL_OW 67
// ToLua ( hideTroll(); ) ;
32561: LD_STRING hideTroll();
32563: PPUSH
32564: CALL_OW 559
// end ;
32568: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
32569: LD_EXP 84
32573: PUSH
32574: LD_EXP 110
32578: AND
32579: IFFALSE 32642
32581: GO 32583
32583: DISABLE
32584: LD_INT 0
32586: PPUSH
// begin p := 0 ;
32587: LD_ADDR_VAR 0 1
32591: PUSH
32592: LD_INT 0
32594: ST_TO_ADDR
// repeat game_speed := 1 ;
32595: LD_ADDR_OWVAR 65
32599: PUSH
32600: LD_INT 1
32602: ST_TO_ADDR
// wait ( 0 0$1 ) ;
32603: LD_INT 35
32605: PPUSH
32606: CALL_OW 67
// p := p + 1 ;
32610: LD_ADDR_VAR 0 1
32614: PUSH
32615: LD_VAR 0 1
32619: PUSH
32620: LD_INT 1
32622: PLUS
32623: ST_TO_ADDR
// until p >= 60 ;
32624: LD_VAR 0 1
32628: PUSH
32629: LD_INT 60
32631: GREATEREQUAL
32632: IFFALSE 32595
// game_speed := 4 ;
32634: LD_ADDR_OWVAR 65
32638: PUSH
32639: LD_INT 4
32641: ST_TO_ADDR
// end ;
32642: PPOPN 1
32644: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
32645: LD_EXP 84
32649: PUSH
32650: LD_EXP 111
32654: AND
32655: IFFALSE 32801
32657: GO 32659
32659: DISABLE
32660: LD_INT 0
32662: PPUSH
32663: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32664: LD_ADDR_VAR 0 1
32668: PUSH
32669: LD_INT 22
32671: PUSH
32672: LD_OWVAR 2
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 2
32683: PUSH
32684: LD_INT 30
32686: PUSH
32687: LD_INT 0
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 30
32696: PUSH
32697: LD_INT 1
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: LIST
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PPUSH
32713: CALL_OW 69
32717: ST_TO_ADDR
// if not depot then
32718: LD_VAR 0 1
32722: NOT
32723: IFFALSE 32727
// exit ;
32725: GO 32801
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
32727: LD_ADDR_VAR 0 2
32731: PUSH
32732: LD_VAR 0 1
32736: PUSH
32737: LD_INT 1
32739: PPUSH
32740: LD_VAR 0 1
32744: PPUSH
32745: CALL_OW 12
32749: ARRAY
32750: PPUSH
32751: CALL_OW 274
32755: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
32756: LD_VAR 0 2
32760: PPUSH
32761: LD_INT 1
32763: PPUSH
32764: LD_INT 0
32766: PPUSH
32767: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
32771: LD_VAR 0 2
32775: PPUSH
32776: LD_INT 2
32778: PPUSH
32779: LD_INT 0
32781: PPUSH
32782: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
32786: LD_VAR 0 2
32790: PPUSH
32791: LD_INT 3
32793: PPUSH
32794: LD_INT 0
32796: PPUSH
32797: CALL_OW 277
// end ;
32801: PPOPN 2
32803: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
32804: LD_EXP 84
32808: PUSH
32809: LD_EXP 112
32813: AND
32814: IFFALSE 32911
32816: GO 32818
32818: DISABLE
32819: LD_INT 0
32821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32822: LD_ADDR_VAR 0 1
32826: PUSH
32827: LD_INT 22
32829: PUSH
32830: LD_OWVAR 2
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 21
32841: PUSH
32842: LD_INT 1
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 3
32851: PUSH
32852: LD_INT 23
32854: PUSH
32855: LD_INT 0
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: LIST
32870: PPUSH
32871: CALL_OW 69
32875: ST_TO_ADDR
// if not tmp then
32876: LD_VAR 0 1
32880: NOT
32881: IFFALSE 32885
// exit ;
32883: GO 32911
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
32885: LD_VAR 0 1
32889: PUSH
32890: LD_INT 1
32892: PPUSH
32893: LD_VAR 0 1
32897: PPUSH
32898: CALL_OW 12
32902: ARRAY
32903: PPUSH
32904: LD_INT 200
32906: PPUSH
32907: CALL_OW 234
// end ;
32911: PPOPN 1
32913: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
32914: LD_EXP 84
32918: PUSH
32919: LD_EXP 113
32923: AND
32924: IFFALSE 33003
32926: GO 32928
32928: DISABLE
32929: LD_INT 0
32931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
32932: LD_ADDR_VAR 0 1
32936: PUSH
32937: LD_INT 22
32939: PUSH
32940: LD_OWVAR 2
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 21
32951: PUSH
32952: LD_INT 2
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PPUSH
32963: CALL_OW 69
32967: ST_TO_ADDR
// if not tmp then
32968: LD_VAR 0 1
32972: NOT
32973: IFFALSE 32977
// exit ;
32975: GO 33003
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
32977: LD_VAR 0 1
32981: PUSH
32982: LD_INT 1
32984: PPUSH
32985: LD_VAR 0 1
32989: PPUSH
32990: CALL_OW 12
32994: ARRAY
32995: PPUSH
32996: LD_INT 60
32998: PPUSH
32999: CALL_OW 234
// end ;
33003: PPOPN 1
33005: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
33006: LD_EXP 84
33010: PUSH
33011: LD_EXP 114
33015: AND
33016: IFFALSE 33115
33018: GO 33020
33020: DISABLE
33021: LD_INT 0
33023: PPUSH
33024: PPUSH
// begin enable ;
33025: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
33026: LD_ADDR_VAR 0 1
33030: PUSH
33031: LD_INT 22
33033: PUSH
33034: LD_OWVAR 2
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 61
33045: PUSH
33046: EMPTY
33047: LIST
33048: PUSH
33049: LD_INT 33
33051: PUSH
33052: LD_INT 2
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: LIST
33063: PPUSH
33064: CALL_OW 69
33068: ST_TO_ADDR
// if not tmp then
33069: LD_VAR 0 1
33073: NOT
33074: IFFALSE 33078
// exit ;
33076: GO 33115
// for i in tmp do
33078: LD_ADDR_VAR 0 2
33082: PUSH
33083: LD_VAR 0 1
33087: PUSH
33088: FOR_IN
33089: IFFALSE 33113
// if IsControledBy ( i ) then
33091: LD_VAR 0 2
33095: PPUSH
33096: CALL_OW 312
33100: IFFALSE 33111
// ComUnlink ( i ) ;
33102: LD_VAR 0 2
33106: PPUSH
33107: CALL_OW 136
33111: GO 33088
33113: POP
33114: POP
// end ;
33115: PPOPN 2
33117: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
33118: LD_EXP 84
33122: PUSH
33123: LD_EXP 115
33127: AND
33128: IFFALSE 33268
33130: GO 33132
33132: DISABLE
33133: LD_INT 0
33135: PPUSH
33136: PPUSH
// begin ToLua ( displayPowell(); ) ;
33137: LD_STRING displayPowell();
33139: PPUSH
33140: CALL_OW 559
// uc_side := 0 ;
33144: LD_ADDR_OWVAR 20
33148: PUSH
33149: LD_INT 0
33151: ST_TO_ADDR
// uc_nation := 2 ;
33152: LD_ADDR_OWVAR 21
33156: PUSH
33157: LD_INT 2
33159: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
33160: LD_ADDR_OWVAR 37
33164: PUSH
33165: LD_INT 14
33167: ST_TO_ADDR
// vc_engine := engine_siberite ;
33168: LD_ADDR_OWVAR 39
33172: PUSH
33173: LD_INT 3
33175: ST_TO_ADDR
// vc_control := control_apeman ;
33176: LD_ADDR_OWVAR 38
33180: PUSH
33181: LD_INT 5
33183: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
33184: LD_ADDR_OWVAR 40
33188: PUSH
33189: LD_INT 29
33191: ST_TO_ADDR
// un := CreateVehicle ;
33192: LD_ADDR_VAR 0 2
33196: PUSH
33197: CALL_OW 45
33201: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33202: LD_VAR 0 2
33206: PPUSH
33207: LD_INT 1
33209: PPUSH
33210: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
33214: LD_INT 35
33216: PPUSH
33217: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
33221: LD_VAR 0 2
33225: PPUSH
33226: LD_INT 22
33228: PUSH
33229: LD_OWVAR 2
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PPUSH
33238: CALL_OW 69
33242: PPUSH
33243: LD_VAR 0 2
33247: PPUSH
33248: CALL_OW 74
33252: PPUSH
33253: CALL_OW 115
// until IsDead ( un ) ;
33257: LD_VAR 0 2
33261: PPUSH
33262: CALL_OW 301
33266: IFFALSE 33214
// end ;
33268: PPOPN 2
33270: END
// every 0 0$1 trigger StreamModeActive and sStu do
33271: LD_EXP 84
33275: PUSH
33276: LD_EXP 123
33280: AND
33281: IFFALSE 33297
33283: GO 33285
33285: DISABLE
// begin ToLua ( displayStucuk(); ) ;
33286: LD_STRING displayStucuk();
33288: PPUSH
33289: CALL_OW 559
// ResetFog ;
33293: CALL_OW 335
// end ;
33297: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
33298: LD_EXP 84
33302: PUSH
33303: LD_EXP 116
33307: AND
33308: IFFALSE 33449
33310: GO 33312
33312: DISABLE
33313: LD_INT 0
33315: PPUSH
33316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
33317: LD_ADDR_VAR 0 2
33321: PUSH
33322: LD_INT 22
33324: PUSH
33325: LD_OWVAR 2
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 21
33336: PUSH
33337: LD_INT 1
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PPUSH
33348: CALL_OW 69
33352: ST_TO_ADDR
// if not tmp then
33353: LD_VAR 0 2
33357: NOT
33358: IFFALSE 33362
// exit ;
33360: GO 33449
// un := tmp [ rand ( 1 , tmp ) ] ;
33362: LD_ADDR_VAR 0 1
33366: PUSH
33367: LD_VAR 0 2
33371: PUSH
33372: LD_INT 1
33374: PPUSH
33375: LD_VAR 0 2
33379: PPUSH
33380: CALL_OW 12
33384: ARRAY
33385: ST_TO_ADDR
// SetSide ( un , 0 ) ;
33386: LD_VAR 0 1
33390: PPUSH
33391: LD_INT 0
33393: PPUSH
33394: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
33398: LD_VAR 0 1
33402: PPUSH
33403: LD_OWVAR 3
33407: PUSH
33408: LD_VAR 0 1
33412: DIFF
33413: PPUSH
33414: LD_VAR 0 1
33418: PPUSH
33419: CALL_OW 74
33423: PPUSH
33424: CALL_OW 115
// wait ( 0 0$20 ) ;
33428: LD_INT 700
33430: PPUSH
33431: CALL_OW 67
// SetSide ( un , your_side ) ;
33435: LD_VAR 0 1
33439: PPUSH
33440: LD_OWVAR 2
33444: PPUSH
33445: CALL_OW 235
// end ;
33449: PPOPN 2
33451: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
33452: LD_EXP 84
33456: PUSH
33457: LD_EXP 117
33461: AND
33462: IFFALSE 33568
33464: GO 33466
33466: DISABLE
33467: LD_INT 0
33469: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33470: LD_ADDR_VAR 0 1
33474: PUSH
33475: LD_INT 22
33477: PUSH
33478: LD_OWVAR 2
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 2
33489: PUSH
33490: LD_INT 30
33492: PUSH
33493: LD_INT 0
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 30
33502: PUSH
33503: LD_INT 1
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: LIST
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PPUSH
33519: CALL_OW 69
33523: ST_TO_ADDR
// if not depot then
33524: LD_VAR 0 1
33528: NOT
33529: IFFALSE 33533
// exit ;
33531: GO 33568
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
33533: LD_VAR 0 1
33537: PUSH
33538: LD_INT 1
33540: ARRAY
33541: PPUSH
33542: CALL_OW 250
33546: PPUSH
33547: LD_VAR 0 1
33551: PUSH
33552: LD_INT 1
33554: ARRAY
33555: PPUSH
33556: CALL_OW 251
33560: PPUSH
33561: LD_INT 70
33563: PPUSH
33564: CALL_OW 495
// end ;
33568: PPOPN 1
33570: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
33571: LD_EXP 84
33575: PUSH
33576: LD_EXP 118
33580: AND
33581: IFFALSE 33792
33583: GO 33585
33585: DISABLE
33586: LD_INT 0
33588: PPUSH
33589: PPUSH
33590: PPUSH
33591: PPUSH
33592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
33593: LD_ADDR_VAR 0 5
33597: PUSH
33598: LD_INT 22
33600: PUSH
33601: LD_OWVAR 2
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 21
33612: PUSH
33613: LD_INT 1
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PPUSH
33624: CALL_OW 69
33628: ST_TO_ADDR
// if not tmp then
33629: LD_VAR 0 5
33633: NOT
33634: IFFALSE 33638
// exit ;
33636: GO 33792
// for i in tmp do
33638: LD_ADDR_VAR 0 1
33642: PUSH
33643: LD_VAR 0 5
33647: PUSH
33648: FOR_IN
33649: IFFALSE 33790
// begin d := rand ( 0 , 5 ) ;
33651: LD_ADDR_VAR 0 4
33655: PUSH
33656: LD_INT 0
33658: PPUSH
33659: LD_INT 5
33661: PPUSH
33662: CALL_OW 12
33666: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
33667: LD_ADDR_VAR 0 2
33671: PUSH
33672: LD_VAR 0 1
33676: PPUSH
33677: CALL_OW 250
33681: PPUSH
33682: LD_VAR 0 4
33686: PPUSH
33687: LD_INT 3
33689: PPUSH
33690: LD_INT 12
33692: PPUSH
33693: CALL_OW 12
33697: PPUSH
33698: CALL_OW 272
33702: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
33703: LD_ADDR_VAR 0 3
33707: PUSH
33708: LD_VAR 0 1
33712: PPUSH
33713: CALL_OW 251
33717: PPUSH
33718: LD_VAR 0 4
33722: PPUSH
33723: LD_INT 3
33725: PPUSH
33726: LD_INT 12
33728: PPUSH
33729: CALL_OW 12
33733: PPUSH
33734: CALL_OW 273
33738: ST_TO_ADDR
// if ValidHex ( x , y ) then
33739: LD_VAR 0 2
33743: PPUSH
33744: LD_VAR 0 3
33748: PPUSH
33749: CALL_OW 488
33753: IFFALSE 33788
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
33755: LD_VAR 0 1
33759: PPUSH
33760: LD_VAR 0 2
33764: PPUSH
33765: LD_VAR 0 3
33769: PPUSH
33770: LD_INT 3
33772: PPUSH
33773: LD_INT 6
33775: PPUSH
33776: CALL_OW 12
33780: PPUSH
33781: LD_INT 1
33783: PPUSH
33784: CALL_OW 483
// end ;
33788: GO 33648
33790: POP
33791: POP
// end ;
33792: PPOPN 5
33794: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
33795: LD_EXP 84
33799: PUSH
33800: LD_EXP 119
33804: AND
33805: IFFALSE 33899
33807: GO 33809
33809: DISABLE
33810: LD_INT 0
33812: PPUSH
33813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
33814: LD_ADDR_VAR 0 2
33818: PUSH
33819: LD_INT 22
33821: PUSH
33822: LD_OWVAR 2
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 32
33833: PUSH
33834: LD_INT 1
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 21
33843: PUSH
33844: LD_INT 2
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: LIST
33855: PPUSH
33856: CALL_OW 69
33860: ST_TO_ADDR
// if not tmp then
33861: LD_VAR 0 2
33865: NOT
33866: IFFALSE 33870
// exit ;
33868: GO 33899
// for i in tmp do
33870: LD_ADDR_VAR 0 1
33874: PUSH
33875: LD_VAR 0 2
33879: PUSH
33880: FOR_IN
33881: IFFALSE 33897
// SetFuel ( i , 0 ) ;
33883: LD_VAR 0 1
33887: PPUSH
33888: LD_INT 0
33890: PPUSH
33891: CALL_OW 240
33895: GO 33880
33897: POP
33898: POP
// end ;
33899: PPOPN 2
33901: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
33902: LD_EXP 84
33906: PUSH
33907: LD_EXP 120
33911: AND
33912: IFFALSE 33978
33914: GO 33916
33916: DISABLE
33917: LD_INT 0
33919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33920: LD_ADDR_VAR 0 1
33924: PUSH
33925: LD_INT 22
33927: PUSH
33928: LD_OWVAR 2
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 30
33939: PUSH
33940: LD_INT 29
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PPUSH
33951: CALL_OW 69
33955: ST_TO_ADDR
// if not tmp then
33956: LD_VAR 0 1
33960: NOT
33961: IFFALSE 33965
// exit ;
33963: GO 33978
// DestroyUnit ( tmp [ 1 ] ) ;
33965: LD_VAR 0 1
33969: PUSH
33970: LD_INT 1
33972: ARRAY
33973: PPUSH
33974: CALL_OW 65
// end ;
33978: PPOPN 1
33980: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
33981: LD_EXP 84
33985: PUSH
33986: LD_EXP 122
33990: AND
33991: IFFALSE 34120
33993: GO 33995
33995: DISABLE
33996: LD_INT 0
33998: PPUSH
// begin uc_side := 0 ;
33999: LD_ADDR_OWVAR 20
34003: PUSH
34004: LD_INT 0
34006: ST_TO_ADDR
// uc_nation := nation_arabian ;
34007: LD_ADDR_OWVAR 21
34011: PUSH
34012: LD_INT 2
34014: ST_TO_ADDR
// hc_gallery :=  ;
34015: LD_ADDR_OWVAR 33
34019: PUSH
34020: LD_STRING 
34022: ST_TO_ADDR
// hc_name :=  ;
34023: LD_ADDR_OWVAR 26
34027: PUSH
34028: LD_STRING 
34030: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
34031: LD_INT 1
34033: PPUSH
34034: LD_INT 11
34036: PPUSH
34037: LD_INT 10
34039: PPUSH
34040: CALL_OW 380
// un := CreateHuman ;
34044: LD_ADDR_VAR 0 1
34048: PUSH
34049: CALL_OW 44
34053: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
34054: LD_VAR 0 1
34058: PPUSH
34059: LD_INT 1
34061: PPUSH
34062: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
34066: LD_INT 35
34068: PPUSH
34069: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
34073: LD_VAR 0 1
34077: PPUSH
34078: LD_INT 22
34080: PUSH
34081: LD_OWVAR 2
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PPUSH
34090: CALL_OW 69
34094: PPUSH
34095: LD_VAR 0 1
34099: PPUSH
34100: CALL_OW 74
34104: PPUSH
34105: CALL_OW 115
// until IsDead ( un ) ;
34109: LD_VAR 0 1
34113: PPUSH
34114: CALL_OW 301
34118: IFFALSE 34066
// end ;
34120: PPOPN 1
34122: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
34123: LD_EXP 84
34127: PUSH
34128: LD_EXP 124
34132: AND
34133: IFFALSE 34145
34135: GO 34137
34137: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
34138: LD_STRING earthquake(getX(game), 0, 32)
34140: PPUSH
34141: CALL_OW 559
34145: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
34146: LD_EXP 84
34150: PUSH
34151: LD_EXP 125
34155: AND
34156: IFFALSE 34247
34158: GO 34160
34160: DISABLE
34161: LD_INT 0
34163: PPUSH
// begin enable ;
34164: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
34165: LD_ADDR_VAR 0 1
34169: PUSH
34170: LD_INT 22
34172: PUSH
34173: LD_OWVAR 2
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 21
34184: PUSH
34185: LD_INT 2
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 33
34194: PUSH
34195: LD_INT 3
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: LIST
34206: PPUSH
34207: CALL_OW 69
34211: ST_TO_ADDR
// if not tmp then
34212: LD_VAR 0 1
34216: NOT
34217: IFFALSE 34221
// exit ;
34219: GO 34247
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
34221: LD_VAR 0 1
34225: PUSH
34226: LD_INT 1
34228: PPUSH
34229: LD_VAR 0 1
34233: PPUSH
34234: CALL_OW 12
34238: ARRAY
34239: PPUSH
34240: LD_INT 1
34242: PPUSH
34243: CALL_OW 234
// end ;
34247: PPOPN 1
34249: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
34250: LD_EXP 84
34254: PUSH
34255: LD_EXP 126
34259: AND
34260: IFFALSE 34401
34262: GO 34264
34264: DISABLE
34265: LD_INT 0
34267: PPUSH
34268: PPUSH
34269: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34270: LD_ADDR_VAR 0 3
34274: PUSH
34275: LD_INT 22
34277: PUSH
34278: LD_OWVAR 2
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 25
34289: PUSH
34290: LD_INT 1
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PPUSH
34301: CALL_OW 69
34305: ST_TO_ADDR
// if not tmp then
34306: LD_VAR 0 3
34310: NOT
34311: IFFALSE 34315
// exit ;
34313: GO 34401
// un := tmp [ rand ( 1 , tmp ) ] ;
34315: LD_ADDR_VAR 0 2
34319: PUSH
34320: LD_VAR 0 3
34324: PUSH
34325: LD_INT 1
34327: PPUSH
34328: LD_VAR 0 3
34332: PPUSH
34333: CALL_OW 12
34337: ARRAY
34338: ST_TO_ADDR
// if Crawls ( un ) then
34339: LD_VAR 0 2
34343: PPUSH
34344: CALL_OW 318
34348: IFFALSE 34359
// ComWalk ( un ) ;
34350: LD_VAR 0 2
34354: PPUSH
34355: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
34359: LD_VAR 0 2
34363: PPUSH
34364: LD_INT 9
34366: PPUSH
34367: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
34371: LD_INT 28
34373: PPUSH
34374: LD_OWVAR 2
34378: PPUSH
34379: LD_INT 2
34381: PPUSH
34382: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
34386: LD_INT 29
34388: PPUSH
34389: LD_OWVAR 2
34393: PPUSH
34394: LD_INT 2
34396: PPUSH
34397: CALL_OW 322
// end ;
34401: PPOPN 3
34403: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
34404: LD_EXP 84
34408: PUSH
34409: LD_EXP 127
34413: AND
34414: IFFALSE 34525
34416: GO 34418
34418: DISABLE
34419: LD_INT 0
34421: PPUSH
34422: PPUSH
34423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34424: LD_ADDR_VAR 0 3
34428: PUSH
34429: LD_INT 22
34431: PUSH
34432: LD_OWVAR 2
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: LD_INT 25
34443: PUSH
34444: LD_INT 1
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PPUSH
34455: CALL_OW 69
34459: ST_TO_ADDR
// if not tmp then
34460: LD_VAR 0 3
34464: NOT
34465: IFFALSE 34469
// exit ;
34467: GO 34525
// un := tmp [ rand ( 1 , tmp ) ] ;
34469: LD_ADDR_VAR 0 2
34473: PUSH
34474: LD_VAR 0 3
34478: PUSH
34479: LD_INT 1
34481: PPUSH
34482: LD_VAR 0 3
34486: PPUSH
34487: CALL_OW 12
34491: ARRAY
34492: ST_TO_ADDR
// if Crawls ( un ) then
34493: LD_VAR 0 2
34497: PPUSH
34498: CALL_OW 318
34502: IFFALSE 34513
// ComWalk ( un ) ;
34504: LD_VAR 0 2
34508: PPUSH
34509: CALL_OW 138
// SetClass ( un , class_mortar ) ;
34513: LD_VAR 0 2
34517: PPUSH
34518: LD_INT 8
34520: PPUSH
34521: CALL_OW 336
// end ;
34525: PPOPN 3
34527: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
34528: LD_EXP 84
34532: PUSH
34533: LD_EXP 128
34537: AND
34538: IFFALSE 34682
34540: GO 34542
34542: DISABLE
34543: LD_INT 0
34545: PPUSH
34546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
34547: LD_ADDR_VAR 0 2
34551: PUSH
34552: LD_INT 22
34554: PUSH
34555: LD_OWVAR 2
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 21
34566: PUSH
34567: LD_INT 2
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 2
34576: PUSH
34577: LD_INT 34
34579: PUSH
34580: LD_INT 12
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 34
34589: PUSH
34590: LD_INT 51
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 34
34599: PUSH
34600: LD_INT 32
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: LIST
34617: PPUSH
34618: CALL_OW 69
34622: ST_TO_ADDR
// if not tmp then
34623: LD_VAR 0 2
34627: NOT
34628: IFFALSE 34632
// exit ;
34630: GO 34682
// for i in tmp do
34632: LD_ADDR_VAR 0 1
34636: PUSH
34637: LD_VAR 0 2
34641: PUSH
34642: FOR_IN
34643: IFFALSE 34680
// if GetCargo ( i , mat_artifact ) = 0 then
34645: LD_VAR 0 1
34649: PPUSH
34650: LD_INT 4
34652: PPUSH
34653: CALL_OW 289
34657: PUSH
34658: LD_INT 0
34660: EQUAL
34661: IFFALSE 34678
// SetCargo ( i , mat_siberit , 100 ) ;
34663: LD_VAR 0 1
34667: PPUSH
34668: LD_INT 3
34670: PPUSH
34671: LD_INT 100
34673: PPUSH
34674: CALL_OW 290
34678: GO 34642
34680: POP
34681: POP
// end ;
34682: PPOPN 2
34684: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
34685: LD_EXP 84
34689: PUSH
34690: LD_EXP 129
34694: AND
34695: IFFALSE 34878
34697: GO 34699
34699: DISABLE
34700: LD_INT 0
34702: PPUSH
34703: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34704: LD_ADDR_VAR 0 2
34708: PUSH
34709: LD_INT 22
34711: PUSH
34712: LD_OWVAR 2
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PPUSH
34721: CALL_OW 69
34725: ST_TO_ADDR
// if not tmp then
34726: LD_VAR 0 2
34730: NOT
34731: IFFALSE 34735
// exit ;
34733: GO 34878
// for i := 1 to 2 do
34735: LD_ADDR_VAR 0 1
34739: PUSH
34740: DOUBLE
34741: LD_INT 1
34743: DEC
34744: ST_TO_ADDR
34745: LD_INT 2
34747: PUSH
34748: FOR_TO
34749: IFFALSE 34876
// begin uc_side := your_side ;
34751: LD_ADDR_OWVAR 20
34755: PUSH
34756: LD_OWVAR 2
34760: ST_TO_ADDR
// uc_nation := nation_american ;
34761: LD_ADDR_OWVAR 21
34765: PUSH
34766: LD_INT 1
34768: ST_TO_ADDR
// vc_chassis := us_morphling ;
34769: LD_ADDR_OWVAR 37
34773: PUSH
34774: LD_INT 5
34776: ST_TO_ADDR
// vc_engine := engine_siberite ;
34777: LD_ADDR_OWVAR 39
34781: PUSH
34782: LD_INT 3
34784: ST_TO_ADDR
// vc_control := control_computer ;
34785: LD_ADDR_OWVAR 38
34789: PUSH
34790: LD_INT 3
34792: ST_TO_ADDR
// vc_weapon := us_double_laser ;
34793: LD_ADDR_OWVAR 40
34797: PUSH
34798: LD_INT 10
34800: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
34801: LD_VAR 0 2
34805: PUSH
34806: LD_INT 1
34808: ARRAY
34809: PPUSH
34810: CALL_OW 310
34814: NOT
34815: IFFALSE 34862
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
34817: CALL_OW 45
34821: PPUSH
34822: LD_VAR 0 2
34826: PUSH
34827: LD_INT 1
34829: ARRAY
34830: PPUSH
34831: CALL_OW 250
34835: PPUSH
34836: LD_VAR 0 2
34840: PUSH
34841: LD_INT 1
34843: ARRAY
34844: PPUSH
34845: CALL_OW 251
34849: PPUSH
34850: LD_INT 12
34852: PPUSH
34853: LD_INT 1
34855: PPUSH
34856: CALL_OW 50
34860: GO 34874
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
34862: CALL_OW 45
34866: PPUSH
34867: LD_INT 1
34869: PPUSH
34870: CALL_OW 51
// end ;
34874: GO 34748
34876: POP
34877: POP
// end ;
34878: PPOPN 2
34880: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
34881: LD_EXP 84
34885: PUSH
34886: LD_EXP 130
34890: AND
34891: IFFALSE 35113
34893: GO 34895
34895: DISABLE
34896: LD_INT 0
34898: PPUSH
34899: PPUSH
34900: PPUSH
34901: PPUSH
34902: PPUSH
34903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34904: LD_ADDR_VAR 0 6
34908: PUSH
34909: LD_INT 22
34911: PUSH
34912: LD_OWVAR 2
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 21
34923: PUSH
34924: LD_INT 1
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 3
34933: PUSH
34934: LD_INT 23
34936: PUSH
34937: LD_INT 0
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: LIST
34952: PPUSH
34953: CALL_OW 69
34957: ST_TO_ADDR
// if not tmp then
34958: LD_VAR 0 6
34962: NOT
34963: IFFALSE 34967
// exit ;
34965: GO 35113
// s1 := rand ( 1 , 4 ) ;
34967: LD_ADDR_VAR 0 2
34971: PUSH
34972: LD_INT 1
34974: PPUSH
34975: LD_INT 4
34977: PPUSH
34978: CALL_OW 12
34982: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
34983: LD_ADDR_VAR 0 4
34987: PUSH
34988: LD_VAR 0 6
34992: PUSH
34993: LD_INT 1
34995: ARRAY
34996: PPUSH
34997: LD_VAR 0 2
35001: PPUSH
35002: CALL_OW 259
35006: ST_TO_ADDR
// if s1 = 1 then
35007: LD_VAR 0 2
35011: PUSH
35012: LD_INT 1
35014: EQUAL
35015: IFFALSE 35035
// s2 := rand ( 2 , 4 ) else
35017: LD_ADDR_VAR 0 3
35021: PUSH
35022: LD_INT 2
35024: PPUSH
35025: LD_INT 4
35027: PPUSH
35028: CALL_OW 12
35032: ST_TO_ADDR
35033: GO 35043
// s2 := 1 ;
35035: LD_ADDR_VAR 0 3
35039: PUSH
35040: LD_INT 1
35042: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
35043: LD_ADDR_VAR 0 5
35047: PUSH
35048: LD_VAR 0 6
35052: PUSH
35053: LD_INT 1
35055: ARRAY
35056: PPUSH
35057: LD_VAR 0 3
35061: PPUSH
35062: CALL_OW 259
35066: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
35067: LD_VAR 0 6
35071: PUSH
35072: LD_INT 1
35074: ARRAY
35075: PPUSH
35076: LD_VAR 0 2
35080: PPUSH
35081: LD_VAR 0 5
35085: PPUSH
35086: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
35090: LD_VAR 0 6
35094: PUSH
35095: LD_INT 1
35097: ARRAY
35098: PPUSH
35099: LD_VAR 0 3
35103: PPUSH
35104: LD_VAR 0 4
35108: PPUSH
35109: CALL_OW 237
// end ;
35113: PPOPN 6
35115: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
35116: LD_EXP 84
35120: PUSH
35121: LD_EXP 131
35125: AND
35126: IFFALSE 35205
35128: GO 35130
35130: DISABLE
35131: LD_INT 0
35133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
35134: LD_ADDR_VAR 0 1
35138: PUSH
35139: LD_INT 22
35141: PUSH
35142: LD_OWVAR 2
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 30
35153: PUSH
35154: LD_INT 3
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PPUSH
35165: CALL_OW 69
35169: ST_TO_ADDR
// if not tmp then
35170: LD_VAR 0 1
35174: NOT
35175: IFFALSE 35179
// exit ;
35177: GO 35205
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
35179: LD_VAR 0 1
35183: PUSH
35184: LD_INT 1
35186: PPUSH
35187: LD_VAR 0 1
35191: PPUSH
35192: CALL_OW 12
35196: ARRAY
35197: PPUSH
35198: LD_INT 1
35200: PPUSH
35201: CALL_OW 234
// end ;
35205: PPOPN 1
35207: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
35208: LD_EXP 84
35212: PUSH
35213: LD_EXP 132
35217: AND
35218: IFFALSE 35330
35220: GO 35222
35222: DISABLE
35223: LD_INT 0
35225: PPUSH
35226: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
35227: LD_ADDR_VAR 0 2
35231: PUSH
35232: LD_INT 22
35234: PUSH
35235: LD_OWVAR 2
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 2
35246: PUSH
35247: LD_INT 30
35249: PUSH
35250: LD_INT 27
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 30
35259: PUSH
35260: LD_INT 26
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 30
35269: PUSH
35270: LD_INT 28
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PPUSH
35287: CALL_OW 69
35291: ST_TO_ADDR
// if not tmp then
35292: LD_VAR 0 2
35296: NOT
35297: IFFALSE 35301
// exit ;
35299: GO 35330
// for i in tmp do
35301: LD_ADDR_VAR 0 1
35305: PUSH
35306: LD_VAR 0 2
35310: PUSH
35311: FOR_IN
35312: IFFALSE 35328
// SetLives ( i , 1 ) ;
35314: LD_VAR 0 1
35318: PPUSH
35319: LD_INT 1
35321: PPUSH
35322: CALL_OW 234
35326: GO 35311
35328: POP
35329: POP
// end ;
35330: PPOPN 2
35332: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
35333: LD_EXP 84
35337: PUSH
35338: LD_EXP 133
35342: AND
35343: IFFALSE 35630
35345: GO 35347
35347: DISABLE
35348: LD_INT 0
35350: PPUSH
35351: PPUSH
35352: PPUSH
// begin i := rand ( 1 , 7 ) ;
35353: LD_ADDR_VAR 0 1
35357: PUSH
35358: LD_INT 1
35360: PPUSH
35361: LD_INT 7
35363: PPUSH
35364: CALL_OW 12
35368: ST_TO_ADDR
// case i of 1 :
35369: LD_VAR 0 1
35373: PUSH
35374: LD_INT 1
35376: DOUBLE
35377: EQUAL
35378: IFTRUE 35382
35380: GO 35392
35382: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
35383: LD_STRING earthquake(getX(game), 0, 32)
35385: PPUSH
35386: CALL_OW 559
35390: GO 35630
35392: LD_INT 2
35394: DOUBLE
35395: EQUAL
35396: IFTRUE 35400
35398: GO 35414
35400: POP
// begin ToLua ( displayStucuk(); ) ;
35401: LD_STRING displayStucuk();
35403: PPUSH
35404: CALL_OW 559
// ResetFog ;
35408: CALL_OW 335
// end ; 3 :
35412: GO 35630
35414: LD_INT 3
35416: DOUBLE
35417: EQUAL
35418: IFTRUE 35422
35420: GO 35526
35422: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
35423: LD_ADDR_VAR 0 2
35427: PUSH
35428: LD_INT 22
35430: PUSH
35431: LD_OWVAR 2
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 25
35442: PUSH
35443: LD_INT 1
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PPUSH
35454: CALL_OW 69
35458: ST_TO_ADDR
// if not tmp then
35459: LD_VAR 0 2
35463: NOT
35464: IFFALSE 35468
// exit ;
35466: GO 35630
// un := tmp [ rand ( 1 , tmp ) ] ;
35468: LD_ADDR_VAR 0 3
35472: PUSH
35473: LD_VAR 0 2
35477: PUSH
35478: LD_INT 1
35480: PPUSH
35481: LD_VAR 0 2
35485: PPUSH
35486: CALL_OW 12
35490: ARRAY
35491: ST_TO_ADDR
// if Crawls ( un ) then
35492: LD_VAR 0 3
35496: PPUSH
35497: CALL_OW 318
35501: IFFALSE 35512
// ComWalk ( un ) ;
35503: LD_VAR 0 3
35507: PPUSH
35508: CALL_OW 138
// SetClass ( un , class_mortar ) ;
35512: LD_VAR 0 3
35516: PPUSH
35517: LD_INT 8
35519: PPUSH
35520: CALL_OW 336
// end ; 4 :
35524: GO 35630
35526: LD_INT 4
35528: DOUBLE
35529: EQUAL
35530: IFTRUE 35534
35532: GO 35608
35534: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
35535: LD_ADDR_VAR 0 2
35539: PUSH
35540: LD_INT 22
35542: PUSH
35543: LD_OWVAR 2
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 30
35554: PUSH
35555: LD_INT 29
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PPUSH
35566: CALL_OW 69
35570: ST_TO_ADDR
// if not tmp then
35571: LD_VAR 0 2
35575: NOT
35576: IFFALSE 35580
// exit ;
35578: GO 35630
// CenterNowOnUnits ( tmp [ 1 ] ) ;
35580: LD_VAR 0 2
35584: PUSH
35585: LD_INT 1
35587: ARRAY
35588: PPUSH
35589: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
35593: LD_VAR 0 2
35597: PUSH
35598: LD_INT 1
35600: ARRAY
35601: PPUSH
35602: CALL_OW 65
// end ; 5 .. 7 :
35606: GO 35630
35608: LD_INT 5
35610: DOUBLE
35611: GREATEREQUAL
35612: IFFALSE 35620
35614: LD_INT 7
35616: DOUBLE
35617: LESSEQUAL
35618: IFTRUE 35622
35620: GO 35629
35622: POP
// StreamSibBomb ; end ;
35623: CALL 31867 0 0
35627: GO 35630
35629: POP
// end ;
35630: PPOPN 3
35632: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
35633: LD_EXP 84
35637: PUSH
35638: LD_EXP 134
35642: AND
35643: IFFALSE 35799
35645: GO 35647
35647: DISABLE
35648: LD_INT 0
35650: PPUSH
35651: PPUSH
35652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
35653: LD_ADDR_VAR 0 2
35657: PUSH
35658: LD_INT 81
35660: PUSH
35661: LD_OWVAR 2
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 2
35672: PUSH
35673: LD_INT 21
35675: PUSH
35676: LD_INT 1
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 21
35685: PUSH
35686: LD_INT 2
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: LIST
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PPUSH
35702: CALL_OW 69
35706: ST_TO_ADDR
// if not tmp then
35707: LD_VAR 0 2
35711: NOT
35712: IFFALSE 35716
// exit ;
35714: GO 35799
// p := 0 ;
35716: LD_ADDR_VAR 0 3
35720: PUSH
35721: LD_INT 0
35723: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35724: LD_INT 35
35726: PPUSH
35727: CALL_OW 67
// p := p + 1 ;
35731: LD_ADDR_VAR 0 3
35735: PUSH
35736: LD_VAR 0 3
35740: PUSH
35741: LD_INT 1
35743: PLUS
35744: ST_TO_ADDR
// for i in tmp do
35745: LD_ADDR_VAR 0 1
35749: PUSH
35750: LD_VAR 0 2
35754: PUSH
35755: FOR_IN
35756: IFFALSE 35787
// if GetLives ( i ) < 1000 then
35758: LD_VAR 0 1
35762: PPUSH
35763: CALL_OW 256
35767: PUSH
35768: LD_INT 1000
35770: LESS
35771: IFFALSE 35785
// SetLives ( i , 1000 ) ;
35773: LD_VAR 0 1
35777: PPUSH
35778: LD_INT 1000
35780: PPUSH
35781: CALL_OW 234
35785: GO 35755
35787: POP
35788: POP
// until p > 20 ;
35789: LD_VAR 0 3
35793: PUSH
35794: LD_INT 20
35796: GREATER
35797: IFFALSE 35724
// end ;
35799: PPOPN 3
35801: END
// every 0 0$1 trigger StreamModeActive and sTime do
35802: LD_EXP 84
35806: PUSH
35807: LD_EXP 135
35811: AND
35812: IFFALSE 35847
35814: GO 35816
35816: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
35817: LD_INT 28
35819: PPUSH
35820: LD_OWVAR 2
35824: PPUSH
35825: LD_INT 2
35827: PPUSH
35828: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
35832: LD_INT 30
35834: PPUSH
35835: LD_OWVAR 2
35839: PPUSH
35840: LD_INT 2
35842: PPUSH
35843: CALL_OW 322
// end ;
35847: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
35848: LD_EXP 84
35852: PUSH
35853: LD_EXP 136
35857: AND
35858: IFFALSE 35979
35860: GO 35862
35862: DISABLE
35863: LD_INT 0
35865: PPUSH
35866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
35867: LD_ADDR_VAR 0 2
35871: PUSH
35872: LD_INT 22
35874: PUSH
35875: LD_OWVAR 2
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 21
35886: PUSH
35887: LD_INT 1
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 3
35896: PUSH
35897: LD_INT 23
35899: PUSH
35900: LD_INT 0
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: LIST
35915: PPUSH
35916: CALL_OW 69
35920: ST_TO_ADDR
// if not tmp then
35921: LD_VAR 0 2
35925: NOT
35926: IFFALSE 35930
// exit ;
35928: GO 35979
// for i in tmp do
35930: LD_ADDR_VAR 0 1
35934: PUSH
35935: LD_VAR 0 2
35939: PUSH
35940: FOR_IN
35941: IFFALSE 35977
// begin if Crawls ( i ) then
35943: LD_VAR 0 1
35947: PPUSH
35948: CALL_OW 318
35952: IFFALSE 35963
// ComWalk ( i ) ;
35954: LD_VAR 0 1
35958: PPUSH
35959: CALL_OW 138
// SetClass ( i , 2 ) ;
35963: LD_VAR 0 1
35967: PPUSH
35968: LD_INT 2
35970: PPUSH
35971: CALL_OW 336
// end ;
35975: GO 35940
35977: POP
35978: POP
// end ;
35979: PPOPN 2
35981: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
35982: LD_EXP 84
35986: PUSH
35987: LD_EXP 137
35991: AND
35992: IFFALSE 36280
35994: GO 35996
35996: DISABLE
35997: LD_INT 0
35999: PPUSH
36000: PPUSH
36001: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
36002: LD_OWVAR 2
36006: PPUSH
36007: LD_INT 9
36009: PPUSH
36010: LD_INT 1
36012: PPUSH
36013: LD_INT 1
36015: PPUSH
36016: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
36020: LD_INT 9
36022: PPUSH
36023: LD_OWVAR 2
36027: PPUSH
36028: CALL_OW 343
// uc_side := 9 ;
36032: LD_ADDR_OWVAR 20
36036: PUSH
36037: LD_INT 9
36039: ST_TO_ADDR
// uc_nation := 2 ;
36040: LD_ADDR_OWVAR 21
36044: PUSH
36045: LD_INT 2
36047: ST_TO_ADDR
// hc_name := Dark Warrior ;
36048: LD_ADDR_OWVAR 26
36052: PUSH
36053: LD_STRING Dark Warrior
36055: ST_TO_ADDR
// hc_gallery :=  ;
36056: LD_ADDR_OWVAR 33
36060: PUSH
36061: LD_STRING 
36063: ST_TO_ADDR
// hc_noskilllimit := true ;
36064: LD_ADDR_OWVAR 76
36068: PUSH
36069: LD_INT 1
36071: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
36072: LD_ADDR_OWVAR 31
36076: PUSH
36077: LD_INT 30
36079: PUSH
36080: LD_INT 30
36082: PUSH
36083: LD_INT 30
36085: PUSH
36086: LD_INT 30
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: ST_TO_ADDR
// un := CreateHuman ;
36095: LD_ADDR_VAR 0 3
36099: PUSH
36100: CALL_OW 44
36104: ST_TO_ADDR
// hc_noskilllimit := false ;
36105: LD_ADDR_OWVAR 76
36109: PUSH
36110: LD_INT 0
36112: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
36113: LD_VAR 0 3
36117: PPUSH
36118: LD_INT 1
36120: PPUSH
36121: CALL_OW 51
// ToLua ( playRanger() ) ;
36125: LD_STRING playRanger()
36127: PPUSH
36128: CALL_OW 559
// p := 0 ;
36132: LD_ADDR_VAR 0 2
36136: PUSH
36137: LD_INT 0
36139: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
36140: LD_INT 35
36142: PPUSH
36143: CALL_OW 67
// p := p + 1 ;
36147: LD_ADDR_VAR 0 2
36151: PUSH
36152: LD_VAR 0 2
36156: PUSH
36157: LD_INT 1
36159: PLUS
36160: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
36161: LD_VAR 0 3
36165: PPUSH
36166: CALL_OW 256
36170: PUSH
36171: LD_INT 1000
36173: LESS
36174: IFFALSE 36188
// SetLives ( un , 1000 ) ;
36176: LD_VAR 0 3
36180: PPUSH
36181: LD_INT 1000
36183: PPUSH
36184: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
36188: LD_VAR 0 3
36192: PPUSH
36193: LD_INT 81
36195: PUSH
36196: LD_OWVAR 2
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 91
36207: PUSH
36208: LD_VAR 0 3
36212: PUSH
36213: LD_INT 30
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: LIST
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PPUSH
36225: CALL_OW 69
36229: PPUSH
36230: LD_VAR 0 3
36234: PPUSH
36235: CALL_OW 74
36239: PPUSH
36240: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
36244: LD_VAR 0 2
36248: PUSH
36249: LD_INT 80
36251: GREATER
36252: PUSH
36253: LD_VAR 0 3
36257: PPUSH
36258: CALL_OW 301
36262: OR
36263: IFFALSE 36140
// if un then
36265: LD_VAR 0 3
36269: IFFALSE 36280
// RemoveUnit ( un ) ;
36271: LD_VAR 0 3
36275: PPUSH
36276: CALL_OW 64
// end ;
36280: PPOPN 3
36282: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
36283: LD_EXP 138
36287: IFFALSE 36403
36289: GO 36291
36291: DISABLE
36292: LD_INT 0
36294: PPUSH
36295: PPUSH
36296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
36297: LD_ADDR_VAR 0 2
36301: PUSH
36302: LD_INT 81
36304: PUSH
36305: LD_OWVAR 2
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 21
36316: PUSH
36317: LD_INT 1
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PPUSH
36328: CALL_OW 69
36332: ST_TO_ADDR
// ToLua ( playComputer() ) ;
36333: LD_STRING playComputer()
36335: PPUSH
36336: CALL_OW 559
// if not tmp then
36340: LD_VAR 0 2
36344: NOT
36345: IFFALSE 36349
// exit ;
36347: GO 36403
// for i in tmp do
36349: LD_ADDR_VAR 0 1
36353: PUSH
36354: LD_VAR 0 2
36358: PUSH
36359: FOR_IN
36360: IFFALSE 36401
// for j := 1 to 4 do
36362: LD_ADDR_VAR 0 3
36366: PUSH
36367: DOUBLE
36368: LD_INT 1
36370: DEC
36371: ST_TO_ADDR
36372: LD_INT 4
36374: PUSH
36375: FOR_TO
36376: IFFALSE 36397
// SetSkill ( i , j , 10 ) ;
36378: LD_VAR 0 1
36382: PPUSH
36383: LD_VAR 0 3
36387: PPUSH
36388: LD_INT 10
36390: PPUSH
36391: CALL_OW 237
36395: GO 36375
36397: POP
36398: POP
36399: GO 36359
36401: POP
36402: POP
// end ;
36403: PPOPN 3
36405: END
// every 0 0$1 trigger s30 do var i , tmp ;
36406: LD_EXP 139
36410: IFFALSE 36479
36412: GO 36414
36414: DISABLE
36415: LD_INT 0
36417: PPUSH
36418: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
36419: LD_ADDR_VAR 0 2
36423: PUSH
36424: LD_INT 22
36426: PUSH
36427: LD_OWVAR 2
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PPUSH
36436: CALL_OW 69
36440: ST_TO_ADDR
// if not tmp then
36441: LD_VAR 0 2
36445: NOT
36446: IFFALSE 36450
// exit ;
36448: GO 36479
// for i in tmp do
36450: LD_ADDR_VAR 0 1
36454: PUSH
36455: LD_VAR 0 2
36459: PUSH
36460: FOR_IN
36461: IFFALSE 36477
// SetLives ( i , 300 ) ;
36463: LD_VAR 0 1
36467: PPUSH
36468: LD_INT 300
36470: PPUSH
36471: CALL_OW 234
36475: GO 36460
36477: POP
36478: POP
// end ;
36479: PPOPN 2
36481: END
// every 0 0$1 trigger s60 do var i , tmp ;
36482: LD_EXP 140
36486: IFFALSE 36555
36488: GO 36490
36490: DISABLE
36491: LD_INT 0
36493: PPUSH
36494: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
36495: LD_ADDR_VAR 0 2
36499: PUSH
36500: LD_INT 22
36502: PUSH
36503: LD_OWVAR 2
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PPUSH
36512: CALL_OW 69
36516: ST_TO_ADDR
// if not tmp then
36517: LD_VAR 0 2
36521: NOT
36522: IFFALSE 36526
// exit ;
36524: GO 36555
// for i in tmp do
36526: LD_ADDR_VAR 0 1
36530: PUSH
36531: LD_VAR 0 2
36535: PUSH
36536: FOR_IN
36537: IFFALSE 36553
// SetLives ( i , 600 ) ;
36539: LD_VAR 0 1
36543: PPUSH
36544: LD_INT 600
36546: PPUSH
36547: CALL_OW 234
36551: GO 36536
36553: POP
36554: POP
// end ;
36555: PPOPN 2
36557: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
36558: LD_INT 0
36560: PPUSH
// case cmd of 301 :
36561: LD_VAR 0 1
36565: PUSH
36566: LD_INT 301
36568: DOUBLE
36569: EQUAL
36570: IFTRUE 36574
36572: GO 36606
36574: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
36575: LD_VAR 0 6
36579: PPUSH
36580: LD_VAR 0 7
36584: PPUSH
36585: LD_VAR 0 8
36589: PPUSH
36590: LD_VAR 0 4
36594: PPUSH
36595: LD_VAR 0 5
36599: PPUSH
36600: CALL 37807 0 5
36604: GO 36727
36606: LD_INT 302
36608: DOUBLE
36609: EQUAL
36610: IFTRUE 36614
36612: GO 36651
36614: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
36615: LD_VAR 0 6
36619: PPUSH
36620: LD_VAR 0 7
36624: PPUSH
36625: LD_VAR 0 8
36629: PPUSH
36630: LD_VAR 0 9
36634: PPUSH
36635: LD_VAR 0 4
36639: PPUSH
36640: LD_VAR 0 5
36644: PPUSH
36645: CALL 37898 0 6
36649: GO 36727
36651: LD_INT 303
36653: DOUBLE
36654: EQUAL
36655: IFTRUE 36659
36657: GO 36696
36659: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
36660: LD_VAR 0 6
36664: PPUSH
36665: LD_VAR 0 7
36669: PPUSH
36670: LD_VAR 0 8
36674: PPUSH
36675: LD_VAR 0 9
36679: PPUSH
36680: LD_VAR 0 4
36684: PPUSH
36685: LD_VAR 0 5
36689: PPUSH
36690: CALL 36732 0 6
36694: GO 36727
36696: LD_INT 304
36698: DOUBLE
36699: EQUAL
36700: IFTRUE 36704
36702: GO 36726
36704: POP
// hHackTeleport ( unit , x , y ) ; end ;
36705: LD_VAR 0 2
36709: PPUSH
36710: LD_VAR 0 4
36714: PPUSH
36715: LD_VAR 0 5
36719: PPUSH
36720: CALL 38491 0 3
36724: GO 36727
36726: POP
// end ;
36727: LD_VAR 0 12
36731: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
36732: LD_INT 0
36734: PPUSH
36735: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
36736: LD_VAR 0 1
36740: PUSH
36741: LD_INT 1
36743: LESS
36744: PUSH
36745: LD_VAR 0 1
36749: PUSH
36750: LD_INT 3
36752: GREATER
36753: OR
36754: PUSH
36755: LD_VAR 0 5
36759: PPUSH
36760: LD_VAR 0 6
36764: PPUSH
36765: CALL_OW 428
36769: OR
36770: IFFALSE 36774
// exit ;
36772: GO 37494
// uc_side := your_side ;
36774: LD_ADDR_OWVAR 20
36778: PUSH
36779: LD_OWVAR 2
36783: ST_TO_ADDR
// uc_nation := nation ;
36784: LD_ADDR_OWVAR 21
36788: PUSH
36789: LD_VAR 0 1
36793: ST_TO_ADDR
// bc_level = 1 ;
36794: LD_ADDR_OWVAR 43
36798: PUSH
36799: LD_INT 1
36801: ST_TO_ADDR
// case btype of 1 :
36802: LD_VAR 0 2
36806: PUSH
36807: LD_INT 1
36809: DOUBLE
36810: EQUAL
36811: IFTRUE 36815
36813: GO 36826
36815: POP
// bc_type := b_depot ; 2 :
36816: LD_ADDR_OWVAR 42
36820: PUSH
36821: LD_INT 0
36823: ST_TO_ADDR
36824: GO 37438
36826: LD_INT 2
36828: DOUBLE
36829: EQUAL
36830: IFTRUE 36834
36832: GO 36845
36834: POP
// bc_type := b_warehouse ; 3 :
36835: LD_ADDR_OWVAR 42
36839: PUSH
36840: LD_INT 1
36842: ST_TO_ADDR
36843: GO 37438
36845: LD_INT 3
36847: DOUBLE
36848: EQUAL
36849: IFTRUE 36853
36851: GO 36864
36853: POP
// bc_type := b_lab ; 4 .. 9 :
36854: LD_ADDR_OWVAR 42
36858: PUSH
36859: LD_INT 6
36861: ST_TO_ADDR
36862: GO 37438
36864: LD_INT 4
36866: DOUBLE
36867: GREATEREQUAL
36868: IFFALSE 36876
36870: LD_INT 9
36872: DOUBLE
36873: LESSEQUAL
36874: IFTRUE 36878
36876: GO 36930
36878: POP
// begin bc_type := b_lab_half ;
36879: LD_ADDR_OWVAR 42
36883: PUSH
36884: LD_INT 7
36886: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
36887: LD_ADDR_OWVAR 44
36891: PUSH
36892: LD_INT 10
36894: PUSH
36895: LD_INT 11
36897: PUSH
36898: LD_INT 12
36900: PUSH
36901: LD_INT 15
36903: PUSH
36904: LD_INT 14
36906: PUSH
36907: LD_INT 13
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: PUSH
36918: LD_VAR 0 2
36922: PUSH
36923: LD_INT 3
36925: MINUS
36926: ARRAY
36927: ST_TO_ADDR
// end ; 10 .. 13 :
36928: GO 37438
36930: LD_INT 10
36932: DOUBLE
36933: GREATEREQUAL
36934: IFFALSE 36942
36936: LD_INT 13
36938: DOUBLE
36939: LESSEQUAL
36940: IFTRUE 36944
36942: GO 37021
36944: POP
// begin bc_type := b_lab_full ;
36945: LD_ADDR_OWVAR 42
36949: PUSH
36950: LD_INT 8
36952: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
36953: LD_ADDR_OWVAR 44
36957: PUSH
36958: LD_INT 10
36960: PUSH
36961: LD_INT 12
36963: PUSH
36964: LD_INT 14
36966: PUSH
36967: LD_INT 13
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: PUSH
36976: LD_VAR 0 2
36980: PUSH
36981: LD_INT 9
36983: MINUS
36984: ARRAY
36985: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
36986: LD_ADDR_OWVAR 45
36990: PUSH
36991: LD_INT 11
36993: PUSH
36994: LD_INT 15
36996: PUSH
36997: LD_INT 12
36999: PUSH
37000: LD_INT 15
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: PUSH
37009: LD_VAR 0 2
37013: PUSH
37014: LD_INT 9
37016: MINUS
37017: ARRAY
37018: ST_TO_ADDR
// end ; 14 :
37019: GO 37438
37021: LD_INT 14
37023: DOUBLE
37024: EQUAL
37025: IFTRUE 37029
37027: GO 37040
37029: POP
// bc_type := b_workshop ; 15 :
37030: LD_ADDR_OWVAR 42
37034: PUSH
37035: LD_INT 2
37037: ST_TO_ADDR
37038: GO 37438
37040: LD_INT 15
37042: DOUBLE
37043: EQUAL
37044: IFTRUE 37048
37046: GO 37059
37048: POP
// bc_type := b_factory ; 16 :
37049: LD_ADDR_OWVAR 42
37053: PUSH
37054: LD_INT 3
37056: ST_TO_ADDR
37057: GO 37438
37059: LD_INT 16
37061: DOUBLE
37062: EQUAL
37063: IFTRUE 37067
37065: GO 37078
37067: POP
// bc_type := b_ext_gun ; 17 :
37068: LD_ADDR_OWVAR 42
37072: PUSH
37073: LD_INT 17
37075: ST_TO_ADDR
37076: GO 37438
37078: LD_INT 17
37080: DOUBLE
37081: EQUAL
37082: IFTRUE 37086
37084: GO 37114
37086: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
37087: LD_ADDR_OWVAR 42
37091: PUSH
37092: LD_INT 19
37094: PUSH
37095: LD_INT 23
37097: PUSH
37098: LD_INT 19
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: LIST
37105: PUSH
37106: LD_VAR 0 1
37110: ARRAY
37111: ST_TO_ADDR
37112: GO 37438
37114: LD_INT 18
37116: DOUBLE
37117: EQUAL
37118: IFTRUE 37122
37120: GO 37133
37122: POP
// bc_type := b_ext_radar ; 19 :
37123: LD_ADDR_OWVAR 42
37127: PUSH
37128: LD_INT 20
37130: ST_TO_ADDR
37131: GO 37438
37133: LD_INT 19
37135: DOUBLE
37136: EQUAL
37137: IFTRUE 37141
37139: GO 37152
37141: POP
// bc_type := b_ext_radio ; 20 :
37142: LD_ADDR_OWVAR 42
37146: PUSH
37147: LD_INT 22
37149: ST_TO_ADDR
37150: GO 37438
37152: LD_INT 20
37154: DOUBLE
37155: EQUAL
37156: IFTRUE 37160
37158: GO 37171
37160: POP
// bc_type := b_ext_siberium ; 21 :
37161: LD_ADDR_OWVAR 42
37165: PUSH
37166: LD_INT 21
37168: ST_TO_ADDR
37169: GO 37438
37171: LD_INT 21
37173: DOUBLE
37174: EQUAL
37175: IFTRUE 37179
37177: GO 37190
37179: POP
// bc_type := b_ext_computer ; 22 :
37180: LD_ADDR_OWVAR 42
37184: PUSH
37185: LD_INT 24
37187: ST_TO_ADDR
37188: GO 37438
37190: LD_INT 22
37192: DOUBLE
37193: EQUAL
37194: IFTRUE 37198
37196: GO 37209
37198: POP
// bc_type := b_ext_track ; 23 :
37199: LD_ADDR_OWVAR 42
37203: PUSH
37204: LD_INT 16
37206: ST_TO_ADDR
37207: GO 37438
37209: LD_INT 23
37211: DOUBLE
37212: EQUAL
37213: IFTRUE 37217
37215: GO 37228
37217: POP
// bc_type := b_ext_laser ; 24 :
37218: LD_ADDR_OWVAR 42
37222: PUSH
37223: LD_INT 25
37225: ST_TO_ADDR
37226: GO 37438
37228: LD_INT 24
37230: DOUBLE
37231: EQUAL
37232: IFTRUE 37236
37234: GO 37247
37236: POP
// bc_type := b_control_tower ; 25 :
37237: LD_ADDR_OWVAR 42
37241: PUSH
37242: LD_INT 36
37244: ST_TO_ADDR
37245: GO 37438
37247: LD_INT 25
37249: DOUBLE
37250: EQUAL
37251: IFTRUE 37255
37253: GO 37266
37255: POP
// bc_type := b_breastwork ; 26 :
37256: LD_ADDR_OWVAR 42
37260: PUSH
37261: LD_INT 31
37263: ST_TO_ADDR
37264: GO 37438
37266: LD_INT 26
37268: DOUBLE
37269: EQUAL
37270: IFTRUE 37274
37272: GO 37285
37274: POP
// bc_type := b_bunker ; 27 :
37275: LD_ADDR_OWVAR 42
37279: PUSH
37280: LD_INT 32
37282: ST_TO_ADDR
37283: GO 37438
37285: LD_INT 27
37287: DOUBLE
37288: EQUAL
37289: IFTRUE 37293
37291: GO 37304
37293: POP
// bc_type := b_turret ; 28 :
37294: LD_ADDR_OWVAR 42
37298: PUSH
37299: LD_INT 33
37301: ST_TO_ADDR
37302: GO 37438
37304: LD_INT 28
37306: DOUBLE
37307: EQUAL
37308: IFTRUE 37312
37310: GO 37323
37312: POP
// bc_type := b_armoury ; 29 :
37313: LD_ADDR_OWVAR 42
37317: PUSH
37318: LD_INT 4
37320: ST_TO_ADDR
37321: GO 37438
37323: LD_INT 29
37325: DOUBLE
37326: EQUAL
37327: IFTRUE 37331
37329: GO 37342
37331: POP
// bc_type := b_barracks ; 30 :
37332: LD_ADDR_OWVAR 42
37336: PUSH
37337: LD_INT 5
37339: ST_TO_ADDR
37340: GO 37438
37342: LD_INT 30
37344: DOUBLE
37345: EQUAL
37346: IFTRUE 37350
37348: GO 37361
37350: POP
// bc_type := b_solar_power ; 31 :
37351: LD_ADDR_OWVAR 42
37355: PUSH
37356: LD_INT 27
37358: ST_TO_ADDR
37359: GO 37438
37361: LD_INT 31
37363: DOUBLE
37364: EQUAL
37365: IFTRUE 37369
37367: GO 37380
37369: POP
// bc_type := b_oil_power ; 32 :
37370: LD_ADDR_OWVAR 42
37374: PUSH
37375: LD_INT 26
37377: ST_TO_ADDR
37378: GO 37438
37380: LD_INT 32
37382: DOUBLE
37383: EQUAL
37384: IFTRUE 37388
37386: GO 37399
37388: POP
// bc_type := b_siberite_power ; 33 :
37389: LD_ADDR_OWVAR 42
37393: PUSH
37394: LD_INT 28
37396: ST_TO_ADDR
37397: GO 37438
37399: LD_INT 33
37401: DOUBLE
37402: EQUAL
37403: IFTRUE 37407
37405: GO 37418
37407: POP
// bc_type := b_oil_mine ; 34 :
37408: LD_ADDR_OWVAR 42
37412: PUSH
37413: LD_INT 29
37415: ST_TO_ADDR
37416: GO 37438
37418: LD_INT 34
37420: DOUBLE
37421: EQUAL
37422: IFTRUE 37426
37424: GO 37437
37426: POP
// bc_type := b_siberite_mine ; end ;
37427: LD_ADDR_OWVAR 42
37431: PUSH
37432: LD_INT 30
37434: ST_TO_ADDR
37435: GO 37438
37437: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
37438: LD_ADDR_VAR 0 8
37442: PUSH
37443: LD_VAR 0 5
37447: PPUSH
37448: LD_VAR 0 6
37452: PPUSH
37453: LD_VAR 0 3
37457: PPUSH
37458: CALL_OW 47
37462: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
37463: LD_OWVAR 42
37467: PUSH
37468: LD_INT 32
37470: PUSH
37471: LD_INT 33
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: IN
37478: IFFALSE 37494
// PlaceWeaponTurret ( b , weapon ) ;
37480: LD_VAR 0 8
37484: PPUSH
37485: LD_VAR 0 4
37489: PPUSH
37490: CALL_OW 431
// end ;
37494: LD_VAR 0 7
37498: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
37499: LD_INT 0
37501: PPUSH
37502: PPUSH
37503: PPUSH
37504: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37505: LD_ADDR_VAR 0 4
37509: PUSH
37510: LD_INT 22
37512: PUSH
37513: LD_OWVAR 2
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 2
37524: PUSH
37525: LD_INT 30
37527: PUSH
37528: LD_INT 0
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 30
37537: PUSH
37538: LD_INT 1
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: LIST
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PPUSH
37554: CALL_OW 69
37558: ST_TO_ADDR
// if not tmp then
37559: LD_VAR 0 4
37563: NOT
37564: IFFALSE 37568
// exit ;
37566: GO 37627
// for i in tmp do
37568: LD_ADDR_VAR 0 2
37572: PUSH
37573: LD_VAR 0 4
37577: PUSH
37578: FOR_IN
37579: IFFALSE 37625
// for j = 1 to 3 do
37581: LD_ADDR_VAR 0 3
37585: PUSH
37586: DOUBLE
37587: LD_INT 1
37589: DEC
37590: ST_TO_ADDR
37591: LD_INT 3
37593: PUSH
37594: FOR_TO
37595: IFFALSE 37621
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
37597: LD_VAR 0 2
37601: PPUSH
37602: CALL_OW 274
37606: PPUSH
37607: LD_VAR 0 3
37611: PPUSH
37612: LD_INT 99999
37614: PPUSH
37615: CALL_OW 277
37619: GO 37594
37621: POP
37622: POP
37623: GO 37578
37625: POP
37626: POP
// end ;
37627: LD_VAR 0 1
37631: RET
// export function hHackSetLevel10 ; var i , j ; begin
37632: LD_INT 0
37634: PPUSH
37635: PPUSH
37636: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
37637: LD_ADDR_VAR 0 2
37641: PUSH
37642: LD_INT 21
37644: PUSH
37645: LD_INT 1
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PPUSH
37652: CALL_OW 69
37656: PUSH
37657: FOR_IN
37658: IFFALSE 37710
// if IsSelected ( i ) then
37660: LD_VAR 0 2
37664: PPUSH
37665: CALL_OW 306
37669: IFFALSE 37708
// begin for j := 1 to 4 do
37671: LD_ADDR_VAR 0 3
37675: PUSH
37676: DOUBLE
37677: LD_INT 1
37679: DEC
37680: ST_TO_ADDR
37681: LD_INT 4
37683: PUSH
37684: FOR_TO
37685: IFFALSE 37706
// SetSkill ( i , j , 10 ) ;
37687: LD_VAR 0 2
37691: PPUSH
37692: LD_VAR 0 3
37696: PPUSH
37697: LD_INT 10
37699: PPUSH
37700: CALL_OW 237
37704: GO 37684
37706: POP
37707: POP
// end ;
37708: GO 37657
37710: POP
37711: POP
// end ;
37712: LD_VAR 0 1
37716: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
37717: LD_INT 0
37719: PPUSH
37720: PPUSH
37721: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
37722: LD_ADDR_VAR 0 2
37726: PUSH
37727: LD_INT 22
37729: PUSH
37730: LD_OWVAR 2
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 21
37741: PUSH
37742: LD_INT 1
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PPUSH
37753: CALL_OW 69
37757: PUSH
37758: FOR_IN
37759: IFFALSE 37800
// begin for j := 1 to 4 do
37761: LD_ADDR_VAR 0 3
37765: PUSH
37766: DOUBLE
37767: LD_INT 1
37769: DEC
37770: ST_TO_ADDR
37771: LD_INT 4
37773: PUSH
37774: FOR_TO
37775: IFFALSE 37796
// SetSkill ( i , j , 10 ) ;
37777: LD_VAR 0 2
37781: PPUSH
37782: LD_VAR 0 3
37786: PPUSH
37787: LD_INT 10
37789: PPUSH
37790: CALL_OW 237
37794: GO 37774
37796: POP
37797: POP
// end ;
37798: GO 37758
37800: POP
37801: POP
// end ;
37802: LD_VAR 0 1
37806: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
37807: LD_INT 0
37809: PPUSH
// uc_side := your_side ;
37810: LD_ADDR_OWVAR 20
37814: PUSH
37815: LD_OWVAR 2
37819: ST_TO_ADDR
// uc_nation := nation ;
37820: LD_ADDR_OWVAR 21
37824: PUSH
37825: LD_VAR 0 1
37829: ST_TO_ADDR
// InitHc ;
37830: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
37834: LD_INT 0
37836: PPUSH
37837: LD_VAR 0 2
37841: PPUSH
37842: LD_VAR 0 3
37846: PPUSH
37847: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
37851: LD_VAR 0 4
37855: PPUSH
37856: LD_VAR 0 5
37860: PPUSH
37861: CALL_OW 428
37865: PUSH
37866: LD_INT 0
37868: EQUAL
37869: IFFALSE 37893
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
37871: CALL_OW 44
37875: PPUSH
37876: LD_VAR 0 4
37880: PPUSH
37881: LD_VAR 0 5
37885: PPUSH
37886: LD_INT 1
37888: PPUSH
37889: CALL_OW 48
// end ;
37893: LD_VAR 0 6
37897: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
37898: LD_INT 0
37900: PPUSH
37901: PPUSH
// uc_side := your_side ;
37902: LD_ADDR_OWVAR 20
37906: PUSH
37907: LD_OWVAR 2
37911: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
37912: LD_VAR 0 1
37916: PUSH
37917: LD_INT 1
37919: PUSH
37920: LD_INT 2
37922: PUSH
37923: LD_INT 3
37925: PUSH
37926: LD_INT 4
37928: PUSH
37929: LD_INT 5
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: IN
37939: IFFALSE 37951
// uc_nation := nation_american else
37941: LD_ADDR_OWVAR 21
37945: PUSH
37946: LD_INT 1
37948: ST_TO_ADDR
37949: GO 37994
// if chassis in [ 11 , 12 , 13 , 14 ] then
37951: LD_VAR 0 1
37955: PUSH
37956: LD_INT 11
37958: PUSH
37959: LD_INT 12
37961: PUSH
37962: LD_INT 13
37964: PUSH
37965: LD_INT 14
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: IN
37974: IFFALSE 37986
// uc_nation := nation_arabian else
37976: LD_ADDR_OWVAR 21
37980: PUSH
37981: LD_INT 2
37983: ST_TO_ADDR
37984: GO 37994
// uc_nation := nation_russian ;
37986: LD_ADDR_OWVAR 21
37990: PUSH
37991: LD_INT 3
37993: ST_TO_ADDR
// vc_chassis := chassis ;
37994: LD_ADDR_OWVAR 37
37998: PUSH
37999: LD_VAR 0 1
38003: ST_TO_ADDR
// vc_engine := engine ;
38004: LD_ADDR_OWVAR 39
38008: PUSH
38009: LD_VAR 0 2
38013: ST_TO_ADDR
// vc_control := control ;
38014: LD_ADDR_OWVAR 38
38018: PUSH
38019: LD_VAR 0 3
38023: ST_TO_ADDR
// vc_weapon := weapon ;
38024: LD_ADDR_OWVAR 40
38028: PUSH
38029: LD_VAR 0 4
38033: ST_TO_ADDR
// un := CreateVehicle ;
38034: LD_ADDR_VAR 0 8
38038: PUSH
38039: CALL_OW 45
38043: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
38044: LD_VAR 0 8
38048: PPUSH
38049: LD_INT 0
38051: PPUSH
38052: LD_INT 5
38054: PPUSH
38055: CALL_OW 12
38059: PPUSH
38060: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
38064: LD_VAR 0 8
38068: PPUSH
38069: LD_VAR 0 5
38073: PPUSH
38074: LD_VAR 0 6
38078: PPUSH
38079: LD_INT 1
38081: PPUSH
38082: CALL_OW 48
// end ;
38086: LD_VAR 0 7
38090: RET
// export hInvincible ; every 1 do
38091: GO 38093
38093: DISABLE
// hInvincible := [ ] ;
38094: LD_ADDR_EXP 141
38098: PUSH
38099: EMPTY
38100: ST_TO_ADDR
38101: END
// every 10 do var i ;
38102: GO 38104
38104: DISABLE
38105: LD_INT 0
38107: PPUSH
// begin enable ;
38108: ENABLE
// if not hInvincible then
38109: LD_EXP 141
38113: NOT
38114: IFFALSE 38118
// exit ;
38116: GO 38162
// for i in hInvincible do
38118: LD_ADDR_VAR 0 1
38122: PUSH
38123: LD_EXP 141
38127: PUSH
38128: FOR_IN
38129: IFFALSE 38160
// if GetLives ( i ) < 1000 then
38131: LD_VAR 0 1
38135: PPUSH
38136: CALL_OW 256
38140: PUSH
38141: LD_INT 1000
38143: LESS
38144: IFFALSE 38158
// SetLives ( i , 1000 ) ;
38146: LD_VAR 0 1
38150: PPUSH
38151: LD_INT 1000
38153: PPUSH
38154: CALL_OW 234
38158: GO 38128
38160: POP
38161: POP
// end ;
38162: PPOPN 1
38164: END
// export function hHackInvincible ; var i ; begin
38165: LD_INT 0
38167: PPUSH
38168: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
38169: LD_ADDR_VAR 0 2
38173: PUSH
38174: LD_INT 2
38176: PUSH
38177: LD_INT 21
38179: PUSH
38180: LD_INT 1
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 21
38189: PUSH
38190: LD_INT 2
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: LIST
38201: PPUSH
38202: CALL_OW 69
38206: PUSH
38207: FOR_IN
38208: IFFALSE 38269
// if IsSelected ( i ) then
38210: LD_VAR 0 2
38214: PPUSH
38215: CALL_OW 306
38219: IFFALSE 38267
// begin if i in hInvincible then
38221: LD_VAR 0 2
38225: PUSH
38226: LD_EXP 141
38230: IN
38231: IFFALSE 38251
// hInvincible := hInvincible diff i else
38233: LD_ADDR_EXP 141
38237: PUSH
38238: LD_EXP 141
38242: PUSH
38243: LD_VAR 0 2
38247: DIFF
38248: ST_TO_ADDR
38249: GO 38267
// hInvincible := hInvincible union i ;
38251: LD_ADDR_EXP 141
38255: PUSH
38256: LD_EXP 141
38260: PUSH
38261: LD_VAR 0 2
38265: UNION
38266: ST_TO_ADDR
// end ;
38267: GO 38207
38269: POP
38270: POP
// end ;
38271: LD_VAR 0 1
38275: RET
// export function hHackInvisible ; var i , j ; begin
38276: LD_INT 0
38278: PPUSH
38279: PPUSH
38280: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
38281: LD_ADDR_VAR 0 2
38285: PUSH
38286: LD_INT 21
38288: PUSH
38289: LD_INT 1
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PPUSH
38296: CALL_OW 69
38300: PUSH
38301: FOR_IN
38302: IFFALSE 38326
// if IsSelected ( i ) then
38304: LD_VAR 0 2
38308: PPUSH
38309: CALL_OW 306
38313: IFFALSE 38324
// ComForceInvisible ( i ) ;
38315: LD_VAR 0 2
38319: PPUSH
38320: CALL_OW 496
38324: GO 38301
38326: POP
38327: POP
// end ;
38328: LD_VAR 0 1
38332: RET
// export function hHackChangeYourSide ; begin
38333: LD_INT 0
38335: PPUSH
// if your_side = 8 then
38336: LD_OWVAR 2
38340: PUSH
38341: LD_INT 8
38343: EQUAL
38344: IFFALSE 38356
// your_side := 0 else
38346: LD_ADDR_OWVAR 2
38350: PUSH
38351: LD_INT 0
38353: ST_TO_ADDR
38354: GO 38370
// your_side := your_side + 1 ;
38356: LD_ADDR_OWVAR 2
38360: PUSH
38361: LD_OWVAR 2
38365: PUSH
38366: LD_INT 1
38368: PLUS
38369: ST_TO_ADDR
// end ;
38370: LD_VAR 0 1
38374: RET
// export function hHackChangeUnitSide ; var i , j ; begin
38375: LD_INT 0
38377: PPUSH
38378: PPUSH
38379: PPUSH
// for i in all_units do
38380: LD_ADDR_VAR 0 2
38384: PUSH
38385: LD_OWVAR 3
38389: PUSH
38390: FOR_IN
38391: IFFALSE 38469
// if IsSelected ( i ) then
38393: LD_VAR 0 2
38397: PPUSH
38398: CALL_OW 306
38402: IFFALSE 38467
// begin j := GetSide ( i ) ;
38404: LD_ADDR_VAR 0 3
38408: PUSH
38409: LD_VAR 0 2
38413: PPUSH
38414: CALL_OW 255
38418: ST_TO_ADDR
// if j = 8 then
38419: LD_VAR 0 3
38423: PUSH
38424: LD_INT 8
38426: EQUAL
38427: IFFALSE 38439
// j := 0 else
38429: LD_ADDR_VAR 0 3
38433: PUSH
38434: LD_INT 0
38436: ST_TO_ADDR
38437: GO 38453
// j := j + 1 ;
38439: LD_ADDR_VAR 0 3
38443: PUSH
38444: LD_VAR 0 3
38448: PUSH
38449: LD_INT 1
38451: PLUS
38452: ST_TO_ADDR
// SetSide ( i , j ) ;
38453: LD_VAR 0 2
38457: PPUSH
38458: LD_VAR 0 3
38462: PPUSH
38463: CALL_OW 235
// end ;
38467: GO 38390
38469: POP
38470: POP
// end ;
38471: LD_VAR 0 1
38475: RET
// export function hHackFog ; begin
38476: LD_INT 0
38478: PPUSH
// FogOff ( true ) ;
38479: LD_INT 1
38481: PPUSH
38482: CALL_OW 344
// end ;
38486: LD_VAR 0 1
38490: RET
// export function hHackTeleport ( unit , x , y ) ; begin
38491: LD_INT 0
38493: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
38494: LD_VAR 0 1
38498: PPUSH
38499: LD_VAR 0 2
38503: PPUSH
38504: LD_VAR 0 3
38508: PPUSH
38509: LD_INT 1
38511: PPUSH
38512: LD_INT 1
38514: PPUSH
38515: CALL_OW 483
// CenterOnXY ( x , y ) ;
38519: LD_VAR 0 2
38523: PPUSH
38524: LD_VAR 0 3
38528: PPUSH
38529: CALL_OW 84
// end ; end_of_file
38533: LD_VAR 0 4
38537: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
38538: LD_INT 0
38540: PPUSH
38541: PPUSH
38542: PPUSH
38543: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
38544: LD_VAR 0 1
38548: PPUSH
38549: CALL_OW 264
38553: PUSH
38554: LD_EXP 69
38558: EQUAL
38559: IFFALSE 38631
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
38561: LD_INT 68
38563: PPUSH
38564: LD_VAR 0 1
38568: PPUSH
38569: CALL_OW 255
38573: PPUSH
38574: CALL_OW 321
38578: PUSH
38579: LD_INT 2
38581: EQUAL
38582: IFFALSE 38594
// eff := 70 else
38584: LD_ADDR_VAR 0 4
38588: PUSH
38589: LD_INT 70
38591: ST_TO_ADDR
38592: GO 38602
// eff := 30 ;
38594: LD_ADDR_VAR 0 4
38598: PUSH
38599: LD_INT 30
38601: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
38602: LD_VAR 0 1
38606: PPUSH
38607: CALL_OW 250
38611: PPUSH
38612: LD_VAR 0 1
38616: PPUSH
38617: CALL_OW 251
38621: PPUSH
38622: LD_VAR 0 4
38626: PPUSH
38627: CALL_OW 495
// end ; end ;
38631: LD_VAR 0 2
38635: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
38636: LD_INT 0
38638: PPUSH
// end ;
38639: LD_VAR 0 4
38643: RET
// export function SOS_Command ( cmd ) ; begin
38644: LD_INT 0
38646: PPUSH
// end ;
38647: LD_VAR 0 2
38651: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
38652: LD_INT 0
38654: PPUSH
// end ;
38655: LD_VAR 0 6
38659: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
38660: LD_INT 0
38662: PPUSH
38663: PPUSH
// if not vehicle or not factory then
38664: LD_VAR 0 1
38668: NOT
38669: PUSH
38670: LD_VAR 0 2
38674: NOT
38675: OR
38676: IFFALSE 38680
// exit ;
38678: GO 38911
// if factoryWaypoints >= factory then
38680: LD_EXP 142
38684: PUSH
38685: LD_VAR 0 2
38689: GREATEREQUAL
38690: IFFALSE 38911
// if factoryWaypoints [ factory ] then
38692: LD_EXP 142
38696: PUSH
38697: LD_VAR 0 2
38701: ARRAY
38702: IFFALSE 38911
// begin if GetControl ( vehicle ) = control_manual then
38704: LD_VAR 0 1
38708: PPUSH
38709: CALL_OW 263
38713: PUSH
38714: LD_INT 1
38716: EQUAL
38717: IFFALSE 38798
// begin driver := IsDrivenBy ( vehicle ) ;
38719: LD_ADDR_VAR 0 4
38723: PUSH
38724: LD_VAR 0 1
38728: PPUSH
38729: CALL_OW 311
38733: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
38734: LD_VAR 0 4
38738: PPUSH
38739: LD_EXP 142
38743: PUSH
38744: LD_VAR 0 2
38748: ARRAY
38749: PUSH
38750: LD_INT 1
38752: ARRAY
38753: PPUSH
38754: LD_EXP 142
38758: PUSH
38759: LD_VAR 0 2
38763: ARRAY
38764: PUSH
38765: LD_INT 2
38767: ARRAY
38768: PPUSH
38769: CALL_OW 171
// AddComExitVehicle ( driver ) ;
38773: LD_VAR 0 4
38777: PPUSH
38778: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
38782: LD_VAR 0 4
38786: PPUSH
38787: LD_VAR 0 2
38791: PPUSH
38792: CALL_OW 180
// end else
38796: GO 38911
// if GetControl ( vehicle ) = control_remote then
38798: LD_VAR 0 1
38802: PPUSH
38803: CALL_OW 263
38807: PUSH
38808: LD_INT 2
38810: EQUAL
38811: IFFALSE 38872
// begin wait ( 0 0$2 ) ;
38813: LD_INT 70
38815: PPUSH
38816: CALL_OW 67
// if Connect ( vehicle ) then
38820: LD_VAR 0 1
38824: PPUSH
38825: CALL 51135 0 1
38829: IFFALSE 38870
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
38831: LD_VAR 0 1
38835: PPUSH
38836: LD_EXP 142
38840: PUSH
38841: LD_VAR 0 2
38845: ARRAY
38846: PUSH
38847: LD_INT 1
38849: ARRAY
38850: PPUSH
38851: LD_EXP 142
38855: PUSH
38856: LD_VAR 0 2
38860: ARRAY
38861: PUSH
38862: LD_INT 2
38864: ARRAY
38865: PPUSH
38866: CALL_OW 171
// end else
38870: GO 38911
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
38872: LD_VAR 0 1
38876: PPUSH
38877: LD_EXP 142
38881: PUSH
38882: LD_VAR 0 2
38886: ARRAY
38887: PUSH
38888: LD_INT 1
38890: ARRAY
38891: PPUSH
38892: LD_EXP 142
38896: PUSH
38897: LD_VAR 0 2
38901: ARRAY
38902: PUSH
38903: LD_INT 2
38905: ARRAY
38906: PPUSH
38907: CALL_OW 171
// end ; end ;
38911: LD_VAR 0 3
38915: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
38916: LD_INT 0
38918: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
38919: LD_VAR 0 1
38923: PUSH
38924: LD_INT 250
38926: EQUAL
38927: PUSH
38928: LD_VAR 0 2
38932: PPUSH
38933: CALL_OW 264
38937: PUSH
38938: LD_EXP 72
38942: EQUAL
38943: AND
38944: IFFALSE 38965
// MinerPlaceMine ( unit , x , y ) ;
38946: LD_VAR 0 2
38950: PPUSH
38951: LD_VAR 0 4
38955: PPUSH
38956: LD_VAR 0 5
38960: PPUSH
38961: CALL 41693 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
38965: LD_VAR 0 1
38969: PUSH
38970: LD_INT 251
38972: EQUAL
38973: PUSH
38974: LD_VAR 0 2
38978: PPUSH
38979: CALL_OW 264
38983: PUSH
38984: LD_EXP 72
38988: EQUAL
38989: AND
38990: IFFALSE 39011
// MinerDetonateMine ( unit , x , y ) ;
38992: LD_VAR 0 2
38996: PPUSH
38997: LD_VAR 0 4
39001: PPUSH
39002: LD_VAR 0 5
39006: PPUSH
39007: CALL 41970 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
39011: LD_VAR 0 1
39015: PUSH
39016: LD_INT 252
39018: EQUAL
39019: PUSH
39020: LD_VAR 0 2
39024: PPUSH
39025: CALL_OW 264
39029: PUSH
39030: LD_EXP 72
39034: EQUAL
39035: AND
39036: IFFALSE 39057
// MinerCreateMinefield ( unit , x , y ) ;
39038: LD_VAR 0 2
39042: PPUSH
39043: LD_VAR 0 4
39047: PPUSH
39048: LD_VAR 0 5
39052: PPUSH
39053: CALL 42387 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
39057: LD_VAR 0 1
39061: PUSH
39062: LD_INT 253
39064: EQUAL
39065: PUSH
39066: LD_VAR 0 2
39070: PPUSH
39071: CALL_OW 257
39075: PUSH
39076: LD_INT 5
39078: EQUAL
39079: AND
39080: IFFALSE 39101
// ComBinocular ( unit , x , y ) ;
39082: LD_VAR 0 2
39086: PPUSH
39087: LD_VAR 0 4
39091: PPUSH
39092: LD_VAR 0 5
39096: PPUSH
39097: CALL 42758 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
39101: LD_VAR 0 1
39105: PUSH
39106: LD_INT 254
39108: EQUAL
39109: PUSH
39110: LD_VAR 0 2
39114: PPUSH
39115: CALL_OW 264
39119: PUSH
39120: LD_EXP 67
39124: EQUAL
39125: AND
39126: PUSH
39127: LD_VAR 0 3
39131: PPUSH
39132: CALL_OW 263
39136: PUSH
39137: LD_INT 3
39139: EQUAL
39140: AND
39141: IFFALSE 39157
// HackDestroyVehicle ( unit , selectedUnit ) ;
39143: LD_VAR 0 2
39147: PPUSH
39148: LD_VAR 0 3
39152: PPUSH
39153: CALL 41053 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
39157: LD_VAR 0 1
39161: PUSH
39162: LD_INT 255
39164: EQUAL
39165: PUSH
39166: LD_VAR 0 2
39170: PPUSH
39171: CALL_OW 264
39175: PUSH
39176: LD_INT 14
39178: PUSH
39179: LD_INT 53
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: IN
39186: AND
39187: PUSH
39188: LD_VAR 0 4
39192: PPUSH
39193: LD_VAR 0 5
39197: PPUSH
39198: CALL_OW 488
39202: AND
39203: IFFALSE 39227
// CutTreeXYR ( unit , x , y , 12 ) ;
39205: LD_VAR 0 2
39209: PPUSH
39210: LD_VAR 0 4
39214: PPUSH
39215: LD_VAR 0 5
39219: PPUSH
39220: LD_INT 12
39222: PPUSH
39223: CALL 39619 0 4
// if cmd = 256 then
39227: LD_VAR 0 1
39231: PUSH
39232: LD_INT 256
39234: EQUAL
39235: IFFALSE 39256
// SetFactoryWaypoint ( unit , x , y ) ;
39237: LD_VAR 0 2
39241: PPUSH
39242: LD_VAR 0 4
39246: PPUSH
39247: LD_VAR 0 5
39251: PPUSH
39252: CALL 39261 0 3
// end ;
39256: LD_VAR 0 6
39260: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
39261: LD_INT 0
39263: PPUSH
39264: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
39265: LD_VAR 0 1
39269: NOT
39270: PUSH
39271: LD_VAR 0 2
39275: PPUSH
39276: LD_VAR 0 3
39280: PPUSH
39281: CALL_OW 488
39285: NOT
39286: OR
39287: PUSH
39288: LD_VAR 0 1
39292: PPUSH
39293: CALL_OW 266
39297: PUSH
39298: LD_INT 3
39300: NONEQUAL
39301: PUSH
39302: LD_VAR 0 1
39306: PPUSH
39307: CALL_OW 247
39311: PUSH
39312: LD_INT 1
39314: EQUAL
39315: NOT
39316: AND
39317: OR
39318: IFFALSE 39322
// exit ;
39320: GO 39471
// if GetType ( factory ) = unit_human then
39322: LD_VAR 0 1
39326: PPUSH
39327: CALL_OW 247
39331: PUSH
39332: LD_INT 1
39334: EQUAL
39335: IFFALSE 39352
// factory := IsInUnit ( factory ) ;
39337: LD_ADDR_VAR 0 1
39341: PUSH
39342: LD_VAR 0 1
39346: PPUSH
39347: CALL_OW 310
39351: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
39352: LD_VAR 0 1
39356: PPUSH
39357: CALL_OW 266
39361: PUSH
39362: LD_INT 3
39364: NONEQUAL
39365: IFFALSE 39369
// exit ;
39367: GO 39471
// if HexInfo ( x , y ) = factory then
39369: LD_VAR 0 2
39373: PPUSH
39374: LD_VAR 0 3
39378: PPUSH
39379: CALL_OW 428
39383: PUSH
39384: LD_VAR 0 1
39388: EQUAL
39389: IFFALSE 39416
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
39391: LD_ADDR_EXP 142
39395: PUSH
39396: LD_EXP 142
39400: PPUSH
39401: LD_VAR 0 1
39405: PPUSH
39406: LD_INT 0
39408: PPUSH
39409: CALL_OW 1
39413: ST_TO_ADDR
39414: GO 39467
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
39416: LD_ADDR_EXP 142
39420: PUSH
39421: LD_EXP 142
39425: PPUSH
39426: LD_VAR 0 1
39430: PPUSH
39431: LD_VAR 0 1
39435: PPUSH
39436: CALL_OW 255
39440: PUSH
39441: LD_VAR 0 1
39445: PUSH
39446: LD_VAR 0 2
39450: PUSH
39451: LD_VAR 0 3
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: PPUSH
39462: CALL_OW 1
39466: ST_TO_ADDR
// UpdateFactoryWaypoints ;
39467: CALL 39476 0 0
// end ;
39471: LD_VAR 0 4
39475: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
39476: LD_INT 0
39478: PPUSH
39479: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
39480: LD_STRING resetFactoryWaypoint();
39482: PPUSH
39483: CALL_OW 559
// if factoryWaypoints then
39487: LD_EXP 142
39491: IFFALSE 39614
// begin for i := 1 to factoryWaypoints do
39493: LD_ADDR_VAR 0 2
39497: PUSH
39498: DOUBLE
39499: LD_INT 1
39501: DEC
39502: ST_TO_ADDR
39503: LD_EXP 142
39507: PUSH
39508: FOR_TO
39509: IFFALSE 39612
// if factoryWaypoints [ i ] then
39511: LD_EXP 142
39515: PUSH
39516: LD_VAR 0 2
39520: ARRAY
39521: IFFALSE 39610
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
39523: LD_STRING setFactoryWaypointXY(
39525: PUSH
39526: LD_EXP 142
39530: PUSH
39531: LD_VAR 0 2
39535: ARRAY
39536: PUSH
39537: LD_INT 1
39539: ARRAY
39540: STR
39541: PUSH
39542: LD_STRING ,
39544: STR
39545: PUSH
39546: LD_EXP 142
39550: PUSH
39551: LD_VAR 0 2
39555: ARRAY
39556: PUSH
39557: LD_INT 2
39559: ARRAY
39560: STR
39561: PUSH
39562: LD_STRING ,
39564: STR
39565: PUSH
39566: LD_EXP 142
39570: PUSH
39571: LD_VAR 0 2
39575: ARRAY
39576: PUSH
39577: LD_INT 3
39579: ARRAY
39580: STR
39581: PUSH
39582: LD_STRING ,
39584: STR
39585: PUSH
39586: LD_EXP 142
39590: PUSH
39591: LD_VAR 0 2
39595: ARRAY
39596: PUSH
39597: LD_INT 4
39599: ARRAY
39600: STR
39601: PUSH
39602: LD_STRING )
39604: STR
39605: PPUSH
39606: CALL_OW 559
39610: GO 39508
39612: POP
39613: POP
// end ; end ;
39614: LD_VAR 0 1
39618: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
39619: LD_INT 0
39621: PPUSH
39622: PPUSH
39623: PPUSH
39624: PPUSH
39625: PPUSH
39626: PPUSH
39627: PPUSH
39628: PPUSH
39629: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
39630: LD_VAR 0 1
39634: NOT
39635: PUSH
39636: LD_VAR 0 2
39640: PPUSH
39641: LD_VAR 0 3
39645: PPUSH
39646: CALL_OW 488
39650: NOT
39651: OR
39652: PUSH
39653: LD_VAR 0 4
39657: NOT
39658: OR
39659: IFFALSE 39663
// exit ;
39661: GO 40003
// list := [ ] ;
39663: LD_ADDR_VAR 0 13
39667: PUSH
39668: EMPTY
39669: ST_TO_ADDR
// if x - r < 0 then
39670: LD_VAR 0 2
39674: PUSH
39675: LD_VAR 0 4
39679: MINUS
39680: PUSH
39681: LD_INT 0
39683: LESS
39684: IFFALSE 39696
// min_x := 0 else
39686: LD_ADDR_VAR 0 7
39690: PUSH
39691: LD_INT 0
39693: ST_TO_ADDR
39694: GO 39712
// min_x := x - r ;
39696: LD_ADDR_VAR 0 7
39700: PUSH
39701: LD_VAR 0 2
39705: PUSH
39706: LD_VAR 0 4
39710: MINUS
39711: ST_TO_ADDR
// if y - r < 0 then
39712: LD_VAR 0 3
39716: PUSH
39717: LD_VAR 0 4
39721: MINUS
39722: PUSH
39723: LD_INT 0
39725: LESS
39726: IFFALSE 39738
// min_y := 0 else
39728: LD_ADDR_VAR 0 8
39732: PUSH
39733: LD_INT 0
39735: ST_TO_ADDR
39736: GO 39754
// min_y := y - r ;
39738: LD_ADDR_VAR 0 8
39742: PUSH
39743: LD_VAR 0 3
39747: PUSH
39748: LD_VAR 0 4
39752: MINUS
39753: ST_TO_ADDR
// max_x := x + r ;
39754: LD_ADDR_VAR 0 9
39758: PUSH
39759: LD_VAR 0 2
39763: PUSH
39764: LD_VAR 0 4
39768: PLUS
39769: ST_TO_ADDR
// max_y := y + r ;
39770: LD_ADDR_VAR 0 10
39774: PUSH
39775: LD_VAR 0 3
39779: PUSH
39780: LD_VAR 0 4
39784: PLUS
39785: ST_TO_ADDR
// for _x = min_x to max_x do
39786: LD_ADDR_VAR 0 11
39790: PUSH
39791: DOUBLE
39792: LD_VAR 0 7
39796: DEC
39797: ST_TO_ADDR
39798: LD_VAR 0 9
39802: PUSH
39803: FOR_TO
39804: IFFALSE 39921
// for _y = min_y to max_y do
39806: LD_ADDR_VAR 0 12
39810: PUSH
39811: DOUBLE
39812: LD_VAR 0 8
39816: DEC
39817: ST_TO_ADDR
39818: LD_VAR 0 10
39822: PUSH
39823: FOR_TO
39824: IFFALSE 39917
// begin if not ValidHex ( _x , _y ) then
39826: LD_VAR 0 11
39830: PPUSH
39831: LD_VAR 0 12
39835: PPUSH
39836: CALL_OW 488
39840: NOT
39841: IFFALSE 39845
// continue ;
39843: GO 39823
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
39845: LD_VAR 0 11
39849: PPUSH
39850: LD_VAR 0 12
39854: PPUSH
39855: CALL_OW 351
39859: PUSH
39860: LD_VAR 0 11
39864: PPUSH
39865: LD_VAR 0 12
39869: PPUSH
39870: CALL_OW 554
39874: AND
39875: IFFALSE 39915
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
39877: LD_ADDR_VAR 0 13
39881: PUSH
39882: LD_VAR 0 13
39886: PPUSH
39887: LD_VAR 0 13
39891: PUSH
39892: LD_INT 1
39894: PLUS
39895: PPUSH
39896: LD_VAR 0 11
39900: PUSH
39901: LD_VAR 0 12
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PPUSH
39910: CALL_OW 2
39914: ST_TO_ADDR
// end ;
39915: GO 39823
39917: POP
39918: POP
39919: GO 39803
39921: POP
39922: POP
// if not list then
39923: LD_VAR 0 13
39927: NOT
39928: IFFALSE 39932
// exit ;
39930: GO 40003
// for i in list do
39932: LD_ADDR_VAR 0 6
39936: PUSH
39937: LD_VAR 0 13
39941: PUSH
39942: FOR_IN
39943: IFFALSE 40001
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
39945: LD_VAR 0 1
39949: PPUSH
39950: LD_STRING M
39952: PUSH
39953: LD_VAR 0 6
39957: PUSH
39958: LD_INT 1
39960: ARRAY
39961: PUSH
39962: LD_VAR 0 6
39966: PUSH
39967: LD_INT 2
39969: ARRAY
39970: PUSH
39971: LD_INT 0
39973: PUSH
39974: LD_INT 0
39976: PUSH
39977: LD_INT 0
39979: PUSH
39980: LD_INT 0
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: PUSH
39992: EMPTY
39993: LIST
39994: PPUSH
39995: CALL_OW 447
39999: GO 39942
40001: POP
40002: POP
// end ;
40003: LD_VAR 0 5
40007: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
40008: LD_EXP 143
40012: NOT
40013: IFFALSE 40063
40015: GO 40017
40017: DISABLE
// begin initHack := true ;
40018: LD_ADDR_EXP 143
40022: PUSH
40023: LD_INT 1
40025: ST_TO_ADDR
// hackTanks := [ ] ;
40026: LD_ADDR_EXP 144
40030: PUSH
40031: EMPTY
40032: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
40033: LD_ADDR_EXP 145
40037: PUSH
40038: EMPTY
40039: ST_TO_ADDR
// hackLimit := 3 ;
40040: LD_ADDR_EXP 146
40044: PUSH
40045: LD_INT 3
40047: ST_TO_ADDR
// hackDist := 12 ;
40048: LD_ADDR_EXP 147
40052: PUSH
40053: LD_INT 12
40055: ST_TO_ADDR
// hackCounter := [ ] ;
40056: LD_ADDR_EXP 148
40060: PUSH
40061: EMPTY
40062: ST_TO_ADDR
// end ;
40063: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
40064: LD_EXP 143
40068: PUSH
40069: LD_INT 34
40071: PUSH
40072: LD_EXP 67
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PPUSH
40081: CALL_OW 69
40085: AND
40086: IFFALSE 40341
40088: GO 40090
40090: DISABLE
40091: LD_INT 0
40093: PPUSH
40094: PPUSH
// begin enable ;
40095: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
40096: LD_ADDR_VAR 0 1
40100: PUSH
40101: LD_INT 34
40103: PUSH
40104: LD_EXP 67
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PPUSH
40113: CALL_OW 69
40117: PUSH
40118: FOR_IN
40119: IFFALSE 40339
// begin if not i in hackTanks then
40121: LD_VAR 0 1
40125: PUSH
40126: LD_EXP 144
40130: IN
40131: NOT
40132: IFFALSE 40215
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
40134: LD_ADDR_EXP 144
40138: PUSH
40139: LD_EXP 144
40143: PPUSH
40144: LD_EXP 144
40148: PUSH
40149: LD_INT 1
40151: PLUS
40152: PPUSH
40153: LD_VAR 0 1
40157: PPUSH
40158: CALL_OW 1
40162: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
40163: LD_ADDR_EXP 145
40167: PUSH
40168: LD_EXP 145
40172: PPUSH
40173: LD_EXP 145
40177: PUSH
40178: LD_INT 1
40180: PLUS
40181: PPUSH
40182: EMPTY
40183: PPUSH
40184: CALL_OW 1
40188: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
40189: LD_ADDR_EXP 148
40193: PUSH
40194: LD_EXP 148
40198: PPUSH
40199: LD_EXP 148
40203: PUSH
40204: LD_INT 1
40206: PLUS
40207: PPUSH
40208: EMPTY
40209: PPUSH
40210: CALL_OW 1
40214: ST_TO_ADDR
// end ; if not IsOk ( i ) then
40215: LD_VAR 0 1
40219: PPUSH
40220: CALL_OW 302
40224: NOT
40225: IFFALSE 40238
// begin HackUnlinkAll ( i ) ;
40227: LD_VAR 0 1
40231: PPUSH
40232: CALL 40344 0 1
// continue ;
40236: GO 40118
// end ; HackCheckCapturedStatus ( i ) ;
40238: LD_VAR 0 1
40242: PPUSH
40243: CALL 40787 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
40247: LD_ADDR_VAR 0 2
40251: PUSH
40252: LD_INT 81
40254: PUSH
40255: LD_VAR 0 1
40259: PPUSH
40260: CALL_OW 255
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 33
40271: PUSH
40272: LD_INT 3
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 91
40281: PUSH
40282: LD_VAR 0 1
40286: PUSH
40287: LD_EXP 147
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 50
40299: PUSH
40300: EMPTY
40301: LIST
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: PPUSH
40309: CALL_OW 69
40313: ST_TO_ADDR
// if not tmp then
40314: LD_VAR 0 2
40318: NOT
40319: IFFALSE 40323
// continue ;
40321: GO 40118
// HackLink ( i , tmp ) ;
40323: LD_VAR 0 1
40327: PPUSH
40328: LD_VAR 0 2
40332: PPUSH
40333: CALL 40480 0 2
// end ;
40337: GO 40118
40339: POP
40340: POP
// end ;
40341: PPOPN 2
40343: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
40344: LD_INT 0
40346: PPUSH
40347: PPUSH
40348: PPUSH
// if not hack in hackTanks then
40349: LD_VAR 0 1
40353: PUSH
40354: LD_EXP 144
40358: IN
40359: NOT
40360: IFFALSE 40364
// exit ;
40362: GO 40475
// index := GetElementIndex ( hackTanks , hack ) ;
40364: LD_ADDR_VAR 0 4
40368: PUSH
40369: LD_EXP 144
40373: PPUSH
40374: LD_VAR 0 1
40378: PPUSH
40379: CALL 47949 0 2
40383: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
40384: LD_EXP 145
40388: PUSH
40389: LD_VAR 0 4
40393: ARRAY
40394: IFFALSE 40475
// begin for i in hackTanksCaptured [ index ] do
40396: LD_ADDR_VAR 0 3
40400: PUSH
40401: LD_EXP 145
40405: PUSH
40406: LD_VAR 0 4
40410: ARRAY
40411: PUSH
40412: FOR_IN
40413: IFFALSE 40439
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
40415: LD_VAR 0 3
40419: PUSH
40420: LD_INT 1
40422: ARRAY
40423: PPUSH
40424: LD_VAR 0 3
40428: PUSH
40429: LD_INT 2
40431: ARRAY
40432: PPUSH
40433: CALL_OW 235
40437: GO 40412
40439: POP
40440: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
40441: LD_ADDR_EXP 145
40445: PUSH
40446: LD_EXP 145
40450: PPUSH
40451: LD_VAR 0 4
40455: PPUSH
40456: EMPTY
40457: PPUSH
40458: CALL_OW 1
40462: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
40463: LD_VAR 0 1
40467: PPUSH
40468: LD_INT 0
40470: PPUSH
40471: CALL_OW 505
// end ; end ;
40475: LD_VAR 0 2
40479: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
40480: LD_INT 0
40482: PPUSH
40483: PPUSH
40484: PPUSH
// if not hack in hackTanks or not vehicles then
40485: LD_VAR 0 1
40489: PUSH
40490: LD_EXP 144
40494: IN
40495: NOT
40496: PUSH
40497: LD_VAR 0 2
40501: NOT
40502: OR
40503: IFFALSE 40507
// exit ;
40505: GO 40782
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
40507: LD_ADDR_VAR 0 2
40511: PUSH
40512: LD_VAR 0 1
40516: PPUSH
40517: LD_VAR 0 2
40521: PPUSH
40522: LD_INT 1
40524: PPUSH
40525: LD_INT 1
40527: PPUSH
40528: CALL 48599 0 4
40532: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
40533: LD_ADDR_VAR 0 5
40537: PUSH
40538: LD_EXP 144
40542: PPUSH
40543: LD_VAR 0 1
40547: PPUSH
40548: CALL 47949 0 2
40552: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
40553: LD_EXP 145
40557: PUSH
40558: LD_VAR 0 5
40562: ARRAY
40563: PUSH
40564: LD_EXP 146
40568: LESS
40569: IFFALSE 40758
// begin for i := 1 to vehicles do
40571: LD_ADDR_VAR 0 4
40575: PUSH
40576: DOUBLE
40577: LD_INT 1
40579: DEC
40580: ST_TO_ADDR
40581: LD_VAR 0 2
40585: PUSH
40586: FOR_TO
40587: IFFALSE 40756
// begin if hackTanksCaptured [ index ] = hackLimit then
40589: LD_EXP 145
40593: PUSH
40594: LD_VAR 0 5
40598: ARRAY
40599: PUSH
40600: LD_EXP 146
40604: EQUAL
40605: IFFALSE 40609
// break ;
40607: GO 40756
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
40609: LD_ADDR_EXP 148
40613: PUSH
40614: LD_EXP 148
40618: PPUSH
40619: LD_VAR 0 5
40623: PPUSH
40624: LD_EXP 148
40628: PUSH
40629: LD_VAR 0 5
40633: ARRAY
40634: PUSH
40635: LD_INT 1
40637: PLUS
40638: PPUSH
40639: CALL_OW 1
40643: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
40644: LD_ADDR_EXP 145
40648: PUSH
40649: LD_EXP 145
40653: PPUSH
40654: LD_VAR 0 5
40658: PUSH
40659: LD_EXP 145
40663: PUSH
40664: LD_VAR 0 5
40668: ARRAY
40669: PUSH
40670: LD_INT 1
40672: PLUS
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PPUSH
40678: LD_VAR 0 2
40682: PUSH
40683: LD_VAR 0 4
40687: ARRAY
40688: PUSH
40689: LD_VAR 0 2
40693: PUSH
40694: LD_VAR 0 4
40698: ARRAY
40699: PPUSH
40700: CALL_OW 255
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PPUSH
40709: CALL 48164 0 3
40713: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
40714: LD_VAR 0 2
40718: PUSH
40719: LD_VAR 0 4
40723: ARRAY
40724: PPUSH
40725: LD_VAR 0 1
40729: PPUSH
40730: CALL_OW 255
40734: PPUSH
40735: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
40739: LD_VAR 0 2
40743: PUSH
40744: LD_VAR 0 4
40748: ARRAY
40749: PPUSH
40750: CALL_OW 141
// end ;
40754: GO 40586
40756: POP
40757: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
40758: LD_VAR 0 1
40762: PPUSH
40763: LD_EXP 145
40767: PUSH
40768: LD_VAR 0 5
40772: ARRAY
40773: PUSH
40774: LD_INT 0
40776: PLUS
40777: PPUSH
40778: CALL_OW 505
// end ;
40782: LD_VAR 0 3
40786: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
40787: LD_INT 0
40789: PPUSH
40790: PPUSH
40791: PPUSH
40792: PPUSH
// if not hack in hackTanks then
40793: LD_VAR 0 1
40797: PUSH
40798: LD_EXP 144
40802: IN
40803: NOT
40804: IFFALSE 40808
// exit ;
40806: GO 41048
// index := GetElementIndex ( hackTanks , hack ) ;
40808: LD_ADDR_VAR 0 4
40812: PUSH
40813: LD_EXP 144
40817: PPUSH
40818: LD_VAR 0 1
40822: PPUSH
40823: CALL 47949 0 2
40827: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
40828: LD_ADDR_VAR 0 3
40832: PUSH
40833: DOUBLE
40834: LD_EXP 145
40838: PUSH
40839: LD_VAR 0 4
40843: ARRAY
40844: INC
40845: ST_TO_ADDR
40846: LD_INT 1
40848: PUSH
40849: FOR_DOWNTO
40850: IFFALSE 41022
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
40852: LD_ADDR_VAR 0 5
40856: PUSH
40857: LD_EXP 145
40861: PUSH
40862: LD_VAR 0 4
40866: ARRAY
40867: PUSH
40868: LD_VAR 0 3
40872: ARRAY
40873: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
40874: LD_VAR 0 5
40878: PUSH
40879: LD_INT 1
40881: ARRAY
40882: PPUSH
40883: CALL_OW 302
40887: NOT
40888: PUSH
40889: LD_VAR 0 5
40893: PUSH
40894: LD_INT 1
40896: ARRAY
40897: PPUSH
40898: CALL_OW 255
40902: PUSH
40903: LD_VAR 0 1
40907: PPUSH
40908: CALL_OW 255
40912: NONEQUAL
40913: OR
40914: IFFALSE 41020
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
40916: LD_VAR 0 5
40920: PUSH
40921: LD_INT 1
40923: ARRAY
40924: PPUSH
40925: CALL_OW 305
40929: PUSH
40930: LD_VAR 0 5
40934: PUSH
40935: LD_INT 1
40937: ARRAY
40938: PPUSH
40939: CALL_OW 255
40943: PUSH
40944: LD_VAR 0 1
40948: PPUSH
40949: CALL_OW 255
40953: EQUAL
40954: AND
40955: IFFALSE 40979
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
40957: LD_VAR 0 5
40961: PUSH
40962: LD_INT 1
40964: ARRAY
40965: PPUSH
40966: LD_VAR 0 5
40970: PUSH
40971: LD_INT 2
40973: ARRAY
40974: PPUSH
40975: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
40979: LD_ADDR_EXP 145
40983: PUSH
40984: LD_EXP 145
40988: PPUSH
40989: LD_VAR 0 4
40993: PPUSH
40994: LD_EXP 145
40998: PUSH
40999: LD_VAR 0 4
41003: ARRAY
41004: PPUSH
41005: LD_VAR 0 3
41009: PPUSH
41010: CALL_OW 3
41014: PPUSH
41015: CALL_OW 1
41019: ST_TO_ADDR
// end ; end ;
41020: GO 40849
41022: POP
41023: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
41024: LD_VAR 0 1
41028: PPUSH
41029: LD_EXP 145
41033: PUSH
41034: LD_VAR 0 4
41038: ARRAY
41039: PUSH
41040: LD_INT 0
41042: PLUS
41043: PPUSH
41044: CALL_OW 505
// end ;
41048: LD_VAR 0 2
41052: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
41053: LD_INT 0
41055: PPUSH
41056: PPUSH
41057: PPUSH
41058: PPUSH
// if not hack in hackTanks then
41059: LD_VAR 0 1
41063: PUSH
41064: LD_EXP 144
41068: IN
41069: NOT
41070: IFFALSE 41074
// exit ;
41072: GO 41159
// index := GetElementIndex ( hackTanks , hack ) ;
41074: LD_ADDR_VAR 0 5
41078: PUSH
41079: LD_EXP 144
41083: PPUSH
41084: LD_VAR 0 1
41088: PPUSH
41089: CALL 47949 0 2
41093: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
41094: LD_ADDR_VAR 0 4
41098: PUSH
41099: DOUBLE
41100: LD_INT 1
41102: DEC
41103: ST_TO_ADDR
41104: LD_EXP 145
41108: PUSH
41109: LD_VAR 0 5
41113: ARRAY
41114: PUSH
41115: FOR_TO
41116: IFFALSE 41157
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
41118: LD_EXP 145
41122: PUSH
41123: LD_VAR 0 5
41127: ARRAY
41128: PUSH
41129: LD_VAR 0 4
41133: ARRAY
41134: PUSH
41135: LD_INT 1
41137: ARRAY
41138: PUSH
41139: LD_VAR 0 2
41143: EQUAL
41144: IFFALSE 41155
// KillUnit ( vehicle ) ;
41146: LD_VAR 0 2
41150: PPUSH
41151: CALL_OW 66
41155: GO 41115
41157: POP
41158: POP
// end ;
41159: LD_VAR 0 3
41163: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
41164: LD_EXP 149
41168: NOT
41169: IFFALSE 41204
41171: GO 41173
41173: DISABLE
// begin initMiner := true ;
41174: LD_ADDR_EXP 149
41178: PUSH
41179: LD_INT 1
41181: ST_TO_ADDR
// minersList := [ ] ;
41182: LD_ADDR_EXP 150
41186: PUSH
41187: EMPTY
41188: ST_TO_ADDR
// minerMinesList := [ ] ;
41189: LD_ADDR_EXP 151
41193: PUSH
41194: EMPTY
41195: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
41196: LD_ADDR_EXP 152
41200: PUSH
41201: LD_INT 5
41203: ST_TO_ADDR
// end ;
41204: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
41205: LD_EXP 149
41209: PUSH
41210: LD_INT 34
41212: PUSH
41213: LD_EXP 72
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PPUSH
41222: CALL_OW 69
41226: AND
41227: IFFALSE 41690
41229: GO 41231
41231: DISABLE
41232: LD_INT 0
41234: PPUSH
41235: PPUSH
41236: PPUSH
41237: PPUSH
// begin enable ;
41238: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
41239: LD_ADDR_VAR 0 1
41243: PUSH
41244: LD_INT 34
41246: PUSH
41247: LD_EXP 72
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PPUSH
41256: CALL_OW 69
41260: PUSH
41261: FOR_IN
41262: IFFALSE 41334
// begin if not i in minersList then
41264: LD_VAR 0 1
41268: PUSH
41269: LD_EXP 150
41273: IN
41274: NOT
41275: IFFALSE 41332
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
41277: LD_ADDR_EXP 150
41281: PUSH
41282: LD_EXP 150
41286: PPUSH
41287: LD_EXP 150
41291: PUSH
41292: LD_INT 1
41294: PLUS
41295: PPUSH
41296: LD_VAR 0 1
41300: PPUSH
41301: CALL_OW 1
41305: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
41306: LD_ADDR_EXP 151
41310: PUSH
41311: LD_EXP 151
41315: PPUSH
41316: LD_EXP 151
41320: PUSH
41321: LD_INT 1
41323: PLUS
41324: PPUSH
41325: EMPTY
41326: PPUSH
41327: CALL_OW 1
41331: ST_TO_ADDR
// end end ;
41332: GO 41261
41334: POP
41335: POP
// for i := minerMinesList downto 1 do
41336: LD_ADDR_VAR 0 1
41340: PUSH
41341: DOUBLE
41342: LD_EXP 151
41346: INC
41347: ST_TO_ADDR
41348: LD_INT 1
41350: PUSH
41351: FOR_DOWNTO
41352: IFFALSE 41688
// begin if IsLive ( minersList [ i ] ) then
41354: LD_EXP 150
41358: PUSH
41359: LD_VAR 0 1
41363: ARRAY
41364: PPUSH
41365: CALL_OW 300
41369: IFFALSE 41397
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
41371: LD_EXP 150
41375: PUSH
41376: LD_VAR 0 1
41380: ARRAY
41381: PPUSH
41382: LD_EXP 151
41386: PUSH
41387: LD_VAR 0 1
41391: ARRAY
41392: PPUSH
41393: CALL_OW 505
// if not minerMinesList [ i ] then
41397: LD_EXP 151
41401: PUSH
41402: LD_VAR 0 1
41406: ARRAY
41407: NOT
41408: IFFALSE 41412
// continue ;
41410: GO 41351
// for j := minerMinesList [ i ] downto 1 do
41412: LD_ADDR_VAR 0 2
41416: PUSH
41417: DOUBLE
41418: LD_EXP 151
41422: PUSH
41423: LD_VAR 0 1
41427: ARRAY
41428: INC
41429: ST_TO_ADDR
41430: LD_INT 1
41432: PUSH
41433: FOR_DOWNTO
41434: IFFALSE 41684
// begin side := GetSide ( minersList [ i ] ) ;
41436: LD_ADDR_VAR 0 3
41440: PUSH
41441: LD_EXP 150
41445: PUSH
41446: LD_VAR 0 1
41450: ARRAY
41451: PPUSH
41452: CALL_OW 255
41456: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
41457: LD_ADDR_VAR 0 4
41461: PUSH
41462: LD_EXP 151
41466: PUSH
41467: LD_VAR 0 1
41471: ARRAY
41472: PUSH
41473: LD_VAR 0 2
41477: ARRAY
41478: PUSH
41479: LD_INT 1
41481: ARRAY
41482: PPUSH
41483: LD_EXP 151
41487: PUSH
41488: LD_VAR 0 1
41492: ARRAY
41493: PUSH
41494: LD_VAR 0 2
41498: ARRAY
41499: PUSH
41500: LD_INT 2
41502: ARRAY
41503: PPUSH
41504: CALL_OW 428
41508: ST_TO_ADDR
// if not tmp then
41509: LD_VAR 0 4
41513: NOT
41514: IFFALSE 41518
// continue ;
41516: GO 41433
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
41518: LD_VAR 0 4
41522: PUSH
41523: LD_INT 81
41525: PUSH
41526: LD_VAR 0 3
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PPUSH
41535: CALL_OW 69
41539: IN
41540: PUSH
41541: LD_EXP 151
41545: PUSH
41546: LD_VAR 0 1
41550: ARRAY
41551: PUSH
41552: LD_VAR 0 2
41556: ARRAY
41557: PUSH
41558: LD_INT 1
41560: ARRAY
41561: PPUSH
41562: LD_EXP 151
41566: PUSH
41567: LD_VAR 0 1
41571: ARRAY
41572: PUSH
41573: LD_VAR 0 2
41577: ARRAY
41578: PUSH
41579: LD_INT 2
41581: ARRAY
41582: PPUSH
41583: CALL_OW 458
41587: AND
41588: IFFALSE 41682
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
41590: LD_EXP 151
41594: PUSH
41595: LD_VAR 0 1
41599: ARRAY
41600: PUSH
41601: LD_VAR 0 2
41605: ARRAY
41606: PUSH
41607: LD_INT 1
41609: ARRAY
41610: PPUSH
41611: LD_EXP 151
41615: PUSH
41616: LD_VAR 0 1
41620: ARRAY
41621: PUSH
41622: LD_VAR 0 2
41626: ARRAY
41627: PUSH
41628: LD_INT 2
41630: ARRAY
41631: PPUSH
41632: LD_VAR 0 3
41636: PPUSH
41637: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
41641: LD_ADDR_EXP 151
41645: PUSH
41646: LD_EXP 151
41650: PPUSH
41651: LD_VAR 0 1
41655: PPUSH
41656: LD_EXP 151
41660: PUSH
41661: LD_VAR 0 1
41665: ARRAY
41666: PPUSH
41667: LD_VAR 0 2
41671: PPUSH
41672: CALL_OW 3
41676: PPUSH
41677: CALL_OW 1
41681: ST_TO_ADDR
// end ; end ;
41682: GO 41433
41684: POP
41685: POP
// end ;
41686: GO 41351
41688: POP
41689: POP
// end ;
41690: PPOPN 4
41692: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
41693: LD_INT 0
41695: PPUSH
41696: PPUSH
// result := false ;
41697: LD_ADDR_VAR 0 4
41701: PUSH
41702: LD_INT 0
41704: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
41705: LD_VAR 0 1
41709: PPUSH
41710: CALL_OW 264
41714: PUSH
41715: LD_EXP 72
41719: EQUAL
41720: NOT
41721: IFFALSE 41725
// exit ;
41723: GO 41965
// index := GetElementIndex ( minersList , unit ) ;
41725: LD_ADDR_VAR 0 5
41729: PUSH
41730: LD_EXP 150
41734: PPUSH
41735: LD_VAR 0 1
41739: PPUSH
41740: CALL 47949 0 2
41744: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
41745: LD_EXP 151
41749: PUSH
41750: LD_VAR 0 5
41754: ARRAY
41755: PUSH
41756: LD_EXP 152
41760: GREATEREQUAL
41761: IFFALSE 41765
// exit ;
41763: GO 41965
// ComMoveXY ( unit , x , y ) ;
41765: LD_VAR 0 1
41769: PPUSH
41770: LD_VAR 0 2
41774: PPUSH
41775: LD_VAR 0 3
41779: PPUSH
41780: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41784: LD_INT 35
41786: PPUSH
41787: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
41791: LD_VAR 0 1
41795: PPUSH
41796: LD_VAR 0 2
41800: PPUSH
41801: LD_VAR 0 3
41805: PPUSH
41806: CALL 78721 0 3
41810: NOT
41811: PUSH
41812: LD_VAR 0 1
41816: PPUSH
41817: CALL_OW 314
41821: AND
41822: IFFALSE 41826
// exit ;
41824: GO 41965
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
41826: LD_VAR 0 2
41830: PPUSH
41831: LD_VAR 0 3
41835: PPUSH
41836: CALL_OW 428
41840: PUSH
41841: LD_VAR 0 1
41845: EQUAL
41846: PUSH
41847: LD_VAR 0 1
41851: PPUSH
41852: CALL_OW 314
41856: NOT
41857: AND
41858: IFFALSE 41784
// PlaySoundXY ( x , y , PlantMine ) ;
41860: LD_VAR 0 2
41864: PPUSH
41865: LD_VAR 0 3
41869: PPUSH
41870: LD_STRING PlantMine
41872: PPUSH
41873: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
41877: LD_VAR 0 2
41881: PPUSH
41882: LD_VAR 0 3
41886: PPUSH
41887: LD_VAR 0 1
41891: PPUSH
41892: CALL_OW 255
41896: PPUSH
41897: LD_INT 0
41899: PPUSH
41900: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
41904: LD_ADDR_EXP 151
41908: PUSH
41909: LD_EXP 151
41913: PPUSH
41914: LD_VAR 0 5
41918: PUSH
41919: LD_EXP 151
41923: PUSH
41924: LD_VAR 0 5
41928: ARRAY
41929: PUSH
41930: LD_INT 1
41932: PLUS
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PPUSH
41938: LD_VAR 0 2
41942: PUSH
41943: LD_VAR 0 3
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PPUSH
41952: CALL 48164 0 3
41956: ST_TO_ADDR
// result := true ;
41957: LD_ADDR_VAR 0 4
41961: PUSH
41962: LD_INT 1
41964: ST_TO_ADDR
// end ;
41965: LD_VAR 0 4
41969: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
41970: LD_INT 0
41972: PPUSH
41973: PPUSH
41974: PPUSH
// if not unit in minersList then
41975: LD_VAR 0 1
41979: PUSH
41980: LD_EXP 150
41984: IN
41985: NOT
41986: IFFALSE 41990
// exit ;
41988: GO 42382
// index := GetElementIndex ( minersList , unit ) ;
41990: LD_ADDR_VAR 0 6
41994: PUSH
41995: LD_EXP 150
41999: PPUSH
42000: LD_VAR 0 1
42004: PPUSH
42005: CALL 47949 0 2
42009: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
42010: LD_ADDR_VAR 0 5
42014: PUSH
42015: DOUBLE
42016: LD_EXP 151
42020: PUSH
42021: LD_VAR 0 6
42025: ARRAY
42026: INC
42027: ST_TO_ADDR
42028: LD_INT 1
42030: PUSH
42031: FOR_DOWNTO
42032: IFFALSE 42193
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
42034: LD_EXP 151
42038: PUSH
42039: LD_VAR 0 6
42043: ARRAY
42044: PUSH
42045: LD_VAR 0 5
42049: ARRAY
42050: PUSH
42051: LD_INT 1
42053: ARRAY
42054: PUSH
42055: LD_VAR 0 2
42059: EQUAL
42060: PUSH
42061: LD_EXP 151
42065: PUSH
42066: LD_VAR 0 6
42070: ARRAY
42071: PUSH
42072: LD_VAR 0 5
42076: ARRAY
42077: PUSH
42078: LD_INT 2
42080: ARRAY
42081: PUSH
42082: LD_VAR 0 3
42086: EQUAL
42087: AND
42088: IFFALSE 42191
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
42090: LD_EXP 151
42094: PUSH
42095: LD_VAR 0 6
42099: ARRAY
42100: PUSH
42101: LD_VAR 0 5
42105: ARRAY
42106: PUSH
42107: LD_INT 1
42109: ARRAY
42110: PPUSH
42111: LD_EXP 151
42115: PUSH
42116: LD_VAR 0 6
42120: ARRAY
42121: PUSH
42122: LD_VAR 0 5
42126: ARRAY
42127: PUSH
42128: LD_INT 2
42130: ARRAY
42131: PPUSH
42132: LD_VAR 0 1
42136: PPUSH
42137: CALL_OW 255
42141: PPUSH
42142: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
42146: LD_ADDR_EXP 151
42150: PUSH
42151: LD_EXP 151
42155: PPUSH
42156: LD_VAR 0 6
42160: PPUSH
42161: LD_EXP 151
42165: PUSH
42166: LD_VAR 0 6
42170: ARRAY
42171: PPUSH
42172: LD_VAR 0 5
42176: PPUSH
42177: CALL_OW 3
42181: PPUSH
42182: CALL_OW 1
42186: ST_TO_ADDR
// exit ;
42187: POP
42188: POP
42189: GO 42382
// end ; end ;
42191: GO 42031
42193: POP
42194: POP
// for i := minerMinesList [ index ] downto 1 do
42195: LD_ADDR_VAR 0 5
42199: PUSH
42200: DOUBLE
42201: LD_EXP 151
42205: PUSH
42206: LD_VAR 0 6
42210: ARRAY
42211: INC
42212: ST_TO_ADDR
42213: LD_INT 1
42215: PUSH
42216: FOR_DOWNTO
42217: IFFALSE 42380
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
42219: LD_EXP 151
42223: PUSH
42224: LD_VAR 0 6
42228: ARRAY
42229: PUSH
42230: LD_VAR 0 5
42234: ARRAY
42235: PUSH
42236: LD_INT 1
42238: ARRAY
42239: PPUSH
42240: LD_EXP 151
42244: PUSH
42245: LD_VAR 0 6
42249: ARRAY
42250: PUSH
42251: LD_VAR 0 5
42255: ARRAY
42256: PUSH
42257: LD_INT 2
42259: ARRAY
42260: PPUSH
42261: LD_VAR 0 2
42265: PPUSH
42266: LD_VAR 0 3
42270: PPUSH
42271: CALL_OW 298
42275: PUSH
42276: LD_INT 6
42278: LESS
42279: IFFALSE 42378
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
42281: LD_EXP 151
42285: PUSH
42286: LD_VAR 0 6
42290: ARRAY
42291: PUSH
42292: LD_VAR 0 5
42296: ARRAY
42297: PUSH
42298: LD_INT 1
42300: ARRAY
42301: PPUSH
42302: LD_EXP 151
42306: PUSH
42307: LD_VAR 0 6
42311: ARRAY
42312: PUSH
42313: LD_VAR 0 5
42317: ARRAY
42318: PUSH
42319: LD_INT 2
42321: ARRAY
42322: PPUSH
42323: LD_VAR 0 1
42327: PPUSH
42328: CALL_OW 255
42332: PPUSH
42333: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
42337: LD_ADDR_EXP 151
42341: PUSH
42342: LD_EXP 151
42346: PPUSH
42347: LD_VAR 0 6
42351: PPUSH
42352: LD_EXP 151
42356: PUSH
42357: LD_VAR 0 6
42361: ARRAY
42362: PPUSH
42363: LD_VAR 0 5
42367: PPUSH
42368: CALL_OW 3
42372: PPUSH
42373: CALL_OW 1
42377: ST_TO_ADDR
// end ; end ;
42378: GO 42216
42380: POP
42381: POP
// end ;
42382: LD_VAR 0 4
42386: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
42387: LD_INT 0
42389: PPUSH
42390: PPUSH
42391: PPUSH
42392: PPUSH
42393: PPUSH
42394: PPUSH
42395: PPUSH
42396: PPUSH
42397: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
42398: LD_VAR 0 1
42402: PPUSH
42403: CALL_OW 264
42407: PUSH
42408: LD_EXP 72
42412: EQUAL
42413: NOT
42414: PUSH
42415: LD_VAR 0 1
42419: PUSH
42420: LD_EXP 150
42424: IN
42425: NOT
42426: OR
42427: IFFALSE 42431
// exit ;
42429: GO 42753
// index := GetElementIndex ( minersList , unit ) ;
42431: LD_ADDR_VAR 0 6
42435: PUSH
42436: LD_EXP 150
42440: PPUSH
42441: LD_VAR 0 1
42445: PPUSH
42446: CALL 47949 0 2
42450: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
42451: LD_ADDR_VAR 0 8
42455: PUSH
42456: LD_EXP 152
42460: PUSH
42461: LD_EXP 151
42465: PUSH
42466: LD_VAR 0 6
42470: ARRAY
42471: MINUS
42472: ST_TO_ADDR
// if not minesFreeAmount then
42473: LD_VAR 0 8
42477: NOT
42478: IFFALSE 42482
// exit ;
42480: GO 42753
// tmp := [ ] ;
42482: LD_ADDR_VAR 0 7
42486: PUSH
42487: EMPTY
42488: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
42489: LD_ADDR_VAR 0 5
42493: PUSH
42494: DOUBLE
42495: LD_INT 1
42497: DEC
42498: ST_TO_ADDR
42499: LD_VAR 0 8
42503: PUSH
42504: FOR_TO
42505: IFFALSE 42700
// begin _d := rand ( 0 , 5 ) ;
42507: LD_ADDR_VAR 0 11
42511: PUSH
42512: LD_INT 0
42514: PPUSH
42515: LD_INT 5
42517: PPUSH
42518: CALL_OW 12
42522: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
42523: LD_ADDR_VAR 0 12
42527: PUSH
42528: LD_INT 2
42530: PPUSH
42531: LD_INT 6
42533: PPUSH
42534: CALL_OW 12
42538: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
42539: LD_ADDR_VAR 0 9
42543: PUSH
42544: LD_VAR 0 2
42548: PPUSH
42549: LD_VAR 0 11
42553: PPUSH
42554: LD_VAR 0 12
42558: PPUSH
42559: CALL_OW 272
42563: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
42564: LD_ADDR_VAR 0 10
42568: PUSH
42569: LD_VAR 0 3
42573: PPUSH
42574: LD_VAR 0 11
42578: PPUSH
42579: LD_VAR 0 12
42583: PPUSH
42584: CALL_OW 273
42588: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
42589: LD_VAR 0 9
42593: PPUSH
42594: LD_VAR 0 10
42598: PPUSH
42599: CALL_OW 488
42603: PUSH
42604: LD_VAR 0 9
42608: PUSH
42609: LD_VAR 0 10
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_VAR 0 7
42622: IN
42623: NOT
42624: AND
42625: PUSH
42626: LD_VAR 0 9
42630: PPUSH
42631: LD_VAR 0 10
42635: PPUSH
42636: CALL_OW 458
42640: NOT
42641: AND
42642: IFFALSE 42684
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
42644: LD_ADDR_VAR 0 7
42648: PUSH
42649: LD_VAR 0 7
42653: PPUSH
42654: LD_VAR 0 7
42658: PUSH
42659: LD_INT 1
42661: PLUS
42662: PPUSH
42663: LD_VAR 0 9
42667: PUSH
42668: LD_VAR 0 10
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PPUSH
42677: CALL_OW 1
42681: ST_TO_ADDR
42682: GO 42698
// i := i - 1 ;
42684: LD_ADDR_VAR 0 5
42688: PUSH
42689: LD_VAR 0 5
42693: PUSH
42694: LD_INT 1
42696: MINUS
42697: ST_TO_ADDR
// end ;
42698: GO 42504
42700: POP
42701: POP
// for i in tmp do
42702: LD_ADDR_VAR 0 5
42706: PUSH
42707: LD_VAR 0 7
42711: PUSH
42712: FOR_IN
42713: IFFALSE 42751
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
42715: LD_VAR 0 1
42719: PPUSH
42720: LD_VAR 0 5
42724: PUSH
42725: LD_INT 1
42727: ARRAY
42728: PPUSH
42729: LD_VAR 0 5
42733: PUSH
42734: LD_INT 2
42736: ARRAY
42737: PPUSH
42738: CALL 41693 0 3
42742: NOT
42743: IFFALSE 42749
// exit ;
42745: POP
42746: POP
42747: GO 42753
42749: GO 42712
42751: POP
42752: POP
// end ;
42753: LD_VAR 0 4
42757: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
42758: LD_INT 0
42760: PPUSH
42761: PPUSH
42762: PPUSH
42763: PPUSH
42764: PPUSH
42765: PPUSH
42766: PPUSH
// if not GetClass ( unit ) = class_sniper then
42767: LD_VAR 0 1
42771: PPUSH
42772: CALL_OW 257
42776: PUSH
42777: LD_INT 5
42779: EQUAL
42780: NOT
42781: IFFALSE 42785
// exit ;
42783: GO 43173
// dist := 8 ;
42785: LD_ADDR_VAR 0 5
42789: PUSH
42790: LD_INT 8
42792: ST_TO_ADDR
// viewRange := 12 ;
42793: LD_ADDR_VAR 0 7
42797: PUSH
42798: LD_INT 12
42800: ST_TO_ADDR
// side := GetSide ( unit ) ;
42801: LD_ADDR_VAR 0 6
42805: PUSH
42806: LD_VAR 0 1
42810: PPUSH
42811: CALL_OW 255
42815: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
42816: LD_INT 61
42818: PPUSH
42819: LD_VAR 0 6
42823: PPUSH
42824: CALL_OW 321
42828: PUSH
42829: LD_INT 2
42831: EQUAL
42832: IFFALSE 42842
// viewRange := 16 ;
42834: LD_ADDR_VAR 0 7
42838: PUSH
42839: LD_INT 16
42841: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
42842: LD_VAR 0 1
42846: PPUSH
42847: LD_VAR 0 2
42851: PPUSH
42852: LD_VAR 0 3
42856: PPUSH
42857: CALL_OW 297
42861: PUSH
42862: LD_VAR 0 5
42866: GREATER
42867: IFFALSE 42946
// begin ComMoveXY ( unit , x , y ) ;
42869: LD_VAR 0 1
42873: PPUSH
42874: LD_VAR 0 2
42878: PPUSH
42879: LD_VAR 0 3
42883: PPUSH
42884: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
42888: LD_INT 35
42890: PPUSH
42891: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
42895: LD_VAR 0 1
42899: PPUSH
42900: LD_VAR 0 2
42904: PPUSH
42905: LD_VAR 0 3
42909: PPUSH
42910: CALL 78721 0 3
42914: NOT
42915: IFFALSE 42919
// exit ;
42917: GO 43173
// until GetDistUnitXY ( unit , x , y ) < dist ;
42919: LD_VAR 0 1
42923: PPUSH
42924: LD_VAR 0 2
42928: PPUSH
42929: LD_VAR 0 3
42933: PPUSH
42934: CALL_OW 297
42938: PUSH
42939: LD_VAR 0 5
42943: LESS
42944: IFFALSE 42888
// end ; ComTurnXY ( unit , x , y ) ;
42946: LD_VAR 0 1
42950: PPUSH
42951: LD_VAR 0 2
42955: PPUSH
42956: LD_VAR 0 3
42960: PPUSH
42961: CALL_OW 118
// wait ( 5 ) ;
42965: LD_INT 5
42967: PPUSH
42968: CALL_OW 67
// _d := GetDir ( unit ) ;
42972: LD_ADDR_VAR 0 10
42976: PUSH
42977: LD_VAR 0 1
42981: PPUSH
42982: CALL_OW 254
42986: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
42987: LD_ADDR_VAR 0 8
42991: PUSH
42992: LD_VAR 0 1
42996: PPUSH
42997: CALL_OW 250
43001: PPUSH
43002: LD_VAR 0 10
43006: PPUSH
43007: LD_VAR 0 5
43011: PPUSH
43012: CALL_OW 272
43016: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
43017: LD_ADDR_VAR 0 9
43021: PUSH
43022: LD_VAR 0 1
43026: PPUSH
43027: CALL_OW 251
43031: PPUSH
43032: LD_VAR 0 10
43036: PPUSH
43037: LD_VAR 0 5
43041: PPUSH
43042: CALL_OW 273
43046: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43047: LD_VAR 0 8
43051: PPUSH
43052: LD_VAR 0 9
43056: PPUSH
43057: CALL_OW 488
43061: NOT
43062: IFFALSE 43066
// exit ;
43064: GO 43173
// ComAnimCustom ( unit , 1 ) ;
43066: LD_VAR 0 1
43070: PPUSH
43071: LD_INT 1
43073: PPUSH
43074: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
43078: LD_VAR 0 8
43082: PPUSH
43083: LD_VAR 0 9
43087: PPUSH
43088: LD_VAR 0 6
43092: PPUSH
43093: LD_VAR 0 7
43097: PPUSH
43098: CALL_OW 330
// repeat wait ( 1 ) ;
43102: LD_INT 1
43104: PPUSH
43105: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
43109: LD_VAR 0 1
43113: PPUSH
43114: CALL_OW 316
43118: PUSH
43119: LD_VAR 0 1
43123: PPUSH
43124: CALL_OW 314
43128: OR
43129: PUSH
43130: LD_VAR 0 1
43134: PPUSH
43135: CALL_OW 302
43139: NOT
43140: OR
43141: PUSH
43142: LD_VAR 0 1
43146: PPUSH
43147: CALL_OW 301
43151: OR
43152: IFFALSE 43102
// RemoveSeeing ( _x , _y , side ) ;
43154: LD_VAR 0 8
43158: PPUSH
43159: LD_VAR 0 9
43163: PPUSH
43164: LD_VAR 0 6
43168: PPUSH
43169: CALL_OW 331
// end ; end_of_file
43173: LD_VAR 0 4
43177: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
43178: LD_INT 0
43180: PPUSH
43181: PPUSH
// if exist_mode then
43182: LD_VAR 0 2
43186: IFFALSE 43211
// unit := CreateCharacter ( prefix & ident ) else
43188: LD_ADDR_VAR 0 5
43192: PUSH
43193: LD_VAR 0 3
43197: PUSH
43198: LD_VAR 0 1
43202: STR
43203: PPUSH
43204: CALL_OW 34
43208: ST_TO_ADDR
43209: GO 43226
// unit := NewCharacter ( ident ) ;
43211: LD_ADDR_VAR 0 5
43215: PUSH
43216: LD_VAR 0 1
43220: PPUSH
43221: CALL_OW 25
43225: ST_TO_ADDR
// result := unit ;
43226: LD_ADDR_VAR 0 4
43230: PUSH
43231: LD_VAR 0 5
43235: ST_TO_ADDR
// end ;
43236: LD_VAR 0 4
43240: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
43241: LD_INT 0
43243: PPUSH
43244: PPUSH
// if not side or not nation then
43245: LD_VAR 0 1
43249: NOT
43250: PUSH
43251: LD_VAR 0 2
43255: NOT
43256: OR
43257: IFFALSE 43261
// exit ;
43259: GO 44029
// case nation of nation_american :
43261: LD_VAR 0 2
43265: PUSH
43266: LD_INT 1
43268: DOUBLE
43269: EQUAL
43270: IFTRUE 43274
43272: GO 43488
43274: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
43275: LD_ADDR_VAR 0 4
43279: PUSH
43280: LD_INT 35
43282: PUSH
43283: LD_INT 45
43285: PUSH
43286: LD_INT 46
43288: PUSH
43289: LD_INT 47
43291: PUSH
43292: LD_INT 82
43294: PUSH
43295: LD_INT 83
43297: PUSH
43298: LD_INT 84
43300: PUSH
43301: LD_INT 85
43303: PUSH
43304: LD_INT 86
43306: PUSH
43307: LD_INT 1
43309: PUSH
43310: LD_INT 2
43312: PUSH
43313: LD_INT 6
43315: PUSH
43316: LD_INT 15
43318: PUSH
43319: LD_INT 16
43321: PUSH
43322: LD_INT 7
43324: PUSH
43325: LD_INT 12
43327: PUSH
43328: LD_INT 13
43330: PUSH
43331: LD_INT 10
43333: PUSH
43334: LD_INT 14
43336: PUSH
43337: LD_INT 20
43339: PUSH
43340: LD_INT 21
43342: PUSH
43343: LD_INT 22
43345: PUSH
43346: LD_INT 25
43348: PUSH
43349: LD_INT 32
43351: PUSH
43352: LD_INT 27
43354: PUSH
43355: LD_INT 36
43357: PUSH
43358: LD_INT 69
43360: PUSH
43361: LD_INT 39
43363: PUSH
43364: LD_INT 34
43366: PUSH
43367: LD_INT 40
43369: PUSH
43370: LD_INT 48
43372: PUSH
43373: LD_INT 49
43375: PUSH
43376: LD_INT 50
43378: PUSH
43379: LD_INT 51
43381: PUSH
43382: LD_INT 52
43384: PUSH
43385: LD_INT 53
43387: PUSH
43388: LD_INT 54
43390: PUSH
43391: LD_INT 55
43393: PUSH
43394: LD_INT 56
43396: PUSH
43397: LD_INT 57
43399: PUSH
43400: LD_INT 58
43402: PUSH
43403: LD_INT 59
43405: PUSH
43406: LD_INT 60
43408: PUSH
43409: LD_INT 61
43411: PUSH
43412: LD_INT 62
43414: PUSH
43415: LD_INT 80
43417: PUSH
43418: LD_INT 82
43420: PUSH
43421: LD_INT 83
43423: PUSH
43424: LD_INT 84
43426: PUSH
43427: LD_INT 85
43429: PUSH
43430: LD_INT 86
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: ST_TO_ADDR
43486: GO 43953
43488: LD_INT 2
43490: DOUBLE
43491: EQUAL
43492: IFTRUE 43496
43494: GO 43722
43496: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
43497: LD_ADDR_VAR 0 4
43501: PUSH
43502: LD_INT 35
43504: PUSH
43505: LD_INT 45
43507: PUSH
43508: LD_INT 46
43510: PUSH
43511: LD_INT 47
43513: PUSH
43514: LD_INT 82
43516: PUSH
43517: LD_INT 83
43519: PUSH
43520: LD_INT 84
43522: PUSH
43523: LD_INT 85
43525: PUSH
43526: LD_INT 87
43528: PUSH
43529: LD_INT 70
43531: PUSH
43532: LD_INT 1
43534: PUSH
43535: LD_INT 11
43537: PUSH
43538: LD_INT 3
43540: PUSH
43541: LD_INT 4
43543: PUSH
43544: LD_INT 5
43546: PUSH
43547: LD_INT 6
43549: PUSH
43550: LD_INT 15
43552: PUSH
43553: LD_INT 18
43555: PUSH
43556: LD_INT 7
43558: PUSH
43559: LD_INT 17
43561: PUSH
43562: LD_INT 8
43564: PUSH
43565: LD_INT 20
43567: PUSH
43568: LD_INT 21
43570: PUSH
43571: LD_INT 22
43573: PUSH
43574: LD_INT 72
43576: PUSH
43577: LD_INT 26
43579: PUSH
43580: LD_INT 69
43582: PUSH
43583: LD_INT 39
43585: PUSH
43586: LD_INT 40
43588: PUSH
43589: LD_INT 41
43591: PUSH
43592: LD_INT 42
43594: PUSH
43595: LD_INT 43
43597: PUSH
43598: LD_INT 48
43600: PUSH
43601: LD_INT 49
43603: PUSH
43604: LD_INT 50
43606: PUSH
43607: LD_INT 51
43609: PUSH
43610: LD_INT 52
43612: PUSH
43613: LD_INT 53
43615: PUSH
43616: LD_INT 54
43618: PUSH
43619: LD_INT 55
43621: PUSH
43622: LD_INT 56
43624: PUSH
43625: LD_INT 60
43627: PUSH
43628: LD_INT 61
43630: PUSH
43631: LD_INT 62
43633: PUSH
43634: LD_INT 66
43636: PUSH
43637: LD_INT 67
43639: PUSH
43640: LD_INT 68
43642: PUSH
43643: LD_INT 81
43645: PUSH
43646: LD_INT 82
43648: PUSH
43649: LD_INT 83
43651: PUSH
43652: LD_INT 84
43654: PUSH
43655: LD_INT 85
43657: PUSH
43658: LD_INT 87
43660: PUSH
43661: LD_INT 88
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: ST_TO_ADDR
43720: GO 43953
43722: LD_INT 3
43724: DOUBLE
43725: EQUAL
43726: IFTRUE 43730
43728: GO 43952
43730: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
43731: LD_ADDR_VAR 0 4
43735: PUSH
43736: LD_INT 46
43738: PUSH
43739: LD_INT 47
43741: PUSH
43742: LD_INT 1
43744: PUSH
43745: LD_INT 2
43747: PUSH
43748: LD_INT 82
43750: PUSH
43751: LD_INT 83
43753: PUSH
43754: LD_INT 84
43756: PUSH
43757: LD_INT 85
43759: PUSH
43760: LD_INT 86
43762: PUSH
43763: LD_INT 11
43765: PUSH
43766: LD_INT 9
43768: PUSH
43769: LD_INT 20
43771: PUSH
43772: LD_INT 19
43774: PUSH
43775: LD_INT 21
43777: PUSH
43778: LD_INT 24
43780: PUSH
43781: LD_INT 22
43783: PUSH
43784: LD_INT 25
43786: PUSH
43787: LD_INT 28
43789: PUSH
43790: LD_INT 29
43792: PUSH
43793: LD_INT 30
43795: PUSH
43796: LD_INT 31
43798: PUSH
43799: LD_INT 37
43801: PUSH
43802: LD_INT 38
43804: PUSH
43805: LD_INT 32
43807: PUSH
43808: LD_INT 27
43810: PUSH
43811: LD_INT 33
43813: PUSH
43814: LD_INT 69
43816: PUSH
43817: LD_INT 39
43819: PUSH
43820: LD_INT 34
43822: PUSH
43823: LD_INT 40
43825: PUSH
43826: LD_INT 71
43828: PUSH
43829: LD_INT 23
43831: PUSH
43832: LD_INT 44
43834: PUSH
43835: LD_INT 48
43837: PUSH
43838: LD_INT 49
43840: PUSH
43841: LD_INT 50
43843: PUSH
43844: LD_INT 51
43846: PUSH
43847: LD_INT 52
43849: PUSH
43850: LD_INT 53
43852: PUSH
43853: LD_INT 54
43855: PUSH
43856: LD_INT 55
43858: PUSH
43859: LD_INT 56
43861: PUSH
43862: LD_INT 57
43864: PUSH
43865: LD_INT 58
43867: PUSH
43868: LD_INT 59
43870: PUSH
43871: LD_INT 63
43873: PUSH
43874: LD_INT 64
43876: PUSH
43877: LD_INT 65
43879: PUSH
43880: LD_INT 82
43882: PUSH
43883: LD_INT 83
43885: PUSH
43886: LD_INT 84
43888: PUSH
43889: LD_INT 85
43891: PUSH
43892: LD_INT 86
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: ST_TO_ADDR
43950: GO 43953
43952: POP
// if state > - 1 and state < 3 then
43953: LD_VAR 0 3
43957: PUSH
43958: LD_INT 1
43960: NEG
43961: GREATER
43962: PUSH
43963: LD_VAR 0 3
43967: PUSH
43968: LD_INT 3
43970: LESS
43971: AND
43972: IFFALSE 44029
// for i in result do
43974: LD_ADDR_VAR 0 5
43978: PUSH
43979: LD_VAR 0 4
43983: PUSH
43984: FOR_IN
43985: IFFALSE 44027
// if GetTech ( i , side ) <> state then
43987: LD_VAR 0 5
43991: PPUSH
43992: LD_VAR 0 1
43996: PPUSH
43997: CALL_OW 321
44001: PUSH
44002: LD_VAR 0 3
44006: NONEQUAL
44007: IFFALSE 44025
// result := result diff i ;
44009: LD_ADDR_VAR 0 4
44013: PUSH
44014: LD_VAR 0 4
44018: PUSH
44019: LD_VAR 0 5
44023: DIFF
44024: ST_TO_ADDR
44025: GO 43984
44027: POP
44028: POP
// end ;
44029: LD_VAR 0 4
44033: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
44034: LD_INT 0
44036: PPUSH
44037: PPUSH
44038: PPUSH
// result := true ;
44039: LD_ADDR_VAR 0 3
44043: PUSH
44044: LD_INT 1
44046: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
44047: LD_ADDR_VAR 0 5
44051: PUSH
44052: LD_VAR 0 2
44056: PPUSH
44057: CALL_OW 480
44061: ST_TO_ADDR
// if not tmp then
44062: LD_VAR 0 5
44066: NOT
44067: IFFALSE 44071
// exit ;
44069: GO 44120
// for i in tmp do
44071: LD_ADDR_VAR 0 4
44075: PUSH
44076: LD_VAR 0 5
44080: PUSH
44081: FOR_IN
44082: IFFALSE 44118
// if GetTech ( i , side ) <> state_researched then
44084: LD_VAR 0 4
44088: PPUSH
44089: LD_VAR 0 1
44093: PPUSH
44094: CALL_OW 321
44098: PUSH
44099: LD_INT 2
44101: NONEQUAL
44102: IFFALSE 44116
// begin result := false ;
44104: LD_ADDR_VAR 0 3
44108: PUSH
44109: LD_INT 0
44111: ST_TO_ADDR
// exit ;
44112: POP
44113: POP
44114: GO 44120
// end ;
44116: GO 44081
44118: POP
44119: POP
// end ;
44120: LD_VAR 0 3
44124: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
44125: LD_INT 0
44127: PPUSH
44128: PPUSH
44129: PPUSH
44130: PPUSH
44131: PPUSH
44132: PPUSH
44133: PPUSH
44134: PPUSH
44135: PPUSH
44136: PPUSH
44137: PPUSH
44138: PPUSH
44139: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
44140: LD_VAR 0 1
44144: NOT
44145: PUSH
44146: LD_VAR 0 1
44150: PPUSH
44151: CALL_OW 257
44155: PUSH
44156: LD_INT 9
44158: NONEQUAL
44159: OR
44160: IFFALSE 44164
// exit ;
44162: GO 44737
// side := GetSide ( unit ) ;
44164: LD_ADDR_VAR 0 9
44168: PUSH
44169: LD_VAR 0 1
44173: PPUSH
44174: CALL_OW 255
44178: ST_TO_ADDR
// tech_space := tech_spacanom ;
44179: LD_ADDR_VAR 0 12
44183: PUSH
44184: LD_INT 29
44186: ST_TO_ADDR
// tech_time := tech_taurad ;
44187: LD_ADDR_VAR 0 13
44191: PUSH
44192: LD_INT 28
44194: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
44195: LD_ADDR_VAR 0 11
44199: PUSH
44200: LD_VAR 0 1
44204: PPUSH
44205: CALL_OW 310
44209: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
44210: LD_VAR 0 11
44214: PPUSH
44215: CALL_OW 247
44219: PUSH
44220: LD_INT 2
44222: EQUAL
44223: IFFALSE 44227
// exit ;
44225: GO 44737
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44227: LD_ADDR_VAR 0 8
44231: PUSH
44232: LD_INT 81
44234: PUSH
44235: LD_VAR 0 9
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 3
44246: PUSH
44247: LD_INT 21
44249: PUSH
44250: LD_INT 3
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PPUSH
44265: CALL_OW 69
44269: ST_TO_ADDR
// if not tmp then
44270: LD_VAR 0 8
44274: NOT
44275: IFFALSE 44279
// exit ;
44277: GO 44737
// if in_unit then
44279: LD_VAR 0 11
44283: IFFALSE 44307
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
44285: LD_ADDR_VAR 0 10
44289: PUSH
44290: LD_VAR 0 8
44294: PPUSH
44295: LD_VAR 0 11
44299: PPUSH
44300: CALL_OW 74
44304: ST_TO_ADDR
44305: GO 44327
// enemy := NearestUnitToUnit ( tmp , unit ) ;
44307: LD_ADDR_VAR 0 10
44311: PUSH
44312: LD_VAR 0 8
44316: PPUSH
44317: LD_VAR 0 1
44321: PPUSH
44322: CALL_OW 74
44326: ST_TO_ADDR
// if not enemy then
44327: LD_VAR 0 10
44331: NOT
44332: IFFALSE 44336
// exit ;
44334: GO 44737
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
44336: LD_VAR 0 11
44340: PUSH
44341: LD_VAR 0 11
44345: PPUSH
44346: LD_VAR 0 10
44350: PPUSH
44351: CALL_OW 296
44355: PUSH
44356: LD_INT 13
44358: GREATER
44359: AND
44360: PUSH
44361: LD_VAR 0 1
44365: PPUSH
44366: LD_VAR 0 10
44370: PPUSH
44371: CALL_OW 296
44375: PUSH
44376: LD_INT 12
44378: GREATER
44379: OR
44380: IFFALSE 44384
// exit ;
44382: GO 44737
// missile := [ 1 ] ;
44384: LD_ADDR_VAR 0 14
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: EMPTY
44393: LIST
44394: ST_TO_ADDR
// if Researched ( side , tech_space ) then
44395: LD_VAR 0 9
44399: PPUSH
44400: LD_VAR 0 12
44404: PPUSH
44405: CALL_OW 325
44409: IFFALSE 44438
// missile := Insert ( missile , missile + 1 , 2 ) ;
44411: LD_ADDR_VAR 0 14
44415: PUSH
44416: LD_VAR 0 14
44420: PPUSH
44421: LD_VAR 0 14
44425: PUSH
44426: LD_INT 1
44428: PLUS
44429: PPUSH
44430: LD_INT 2
44432: PPUSH
44433: CALL_OW 2
44437: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
44438: LD_VAR 0 9
44442: PPUSH
44443: LD_VAR 0 13
44447: PPUSH
44448: CALL_OW 325
44452: PUSH
44453: LD_VAR 0 10
44457: PPUSH
44458: CALL_OW 255
44462: PPUSH
44463: LD_VAR 0 13
44467: PPUSH
44468: CALL_OW 325
44472: NOT
44473: AND
44474: IFFALSE 44503
// missile := Insert ( missile , missile + 1 , 3 ) ;
44476: LD_ADDR_VAR 0 14
44480: PUSH
44481: LD_VAR 0 14
44485: PPUSH
44486: LD_VAR 0 14
44490: PUSH
44491: LD_INT 1
44493: PLUS
44494: PPUSH
44495: LD_INT 3
44497: PPUSH
44498: CALL_OW 2
44502: ST_TO_ADDR
// if missile < 2 then
44503: LD_VAR 0 14
44507: PUSH
44508: LD_INT 2
44510: LESS
44511: IFFALSE 44515
// exit ;
44513: GO 44737
// x := GetX ( enemy ) ;
44515: LD_ADDR_VAR 0 4
44519: PUSH
44520: LD_VAR 0 10
44524: PPUSH
44525: CALL_OW 250
44529: ST_TO_ADDR
// y := GetY ( enemy ) ;
44530: LD_ADDR_VAR 0 5
44534: PUSH
44535: LD_VAR 0 10
44539: PPUSH
44540: CALL_OW 251
44544: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
44545: LD_ADDR_VAR 0 6
44549: PUSH
44550: LD_VAR 0 4
44554: PUSH
44555: LD_INT 1
44557: NEG
44558: PPUSH
44559: LD_INT 1
44561: PPUSH
44562: CALL_OW 12
44566: PLUS
44567: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
44568: LD_ADDR_VAR 0 7
44572: PUSH
44573: LD_VAR 0 5
44577: PUSH
44578: LD_INT 1
44580: NEG
44581: PPUSH
44582: LD_INT 1
44584: PPUSH
44585: CALL_OW 12
44589: PLUS
44590: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44591: LD_VAR 0 6
44595: PPUSH
44596: LD_VAR 0 7
44600: PPUSH
44601: CALL_OW 488
44605: NOT
44606: IFFALSE 44628
// begin _x := x ;
44608: LD_ADDR_VAR 0 6
44612: PUSH
44613: LD_VAR 0 4
44617: ST_TO_ADDR
// _y := y ;
44618: LD_ADDR_VAR 0 7
44622: PUSH
44623: LD_VAR 0 5
44627: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
44628: LD_ADDR_VAR 0 3
44632: PUSH
44633: LD_INT 1
44635: PPUSH
44636: LD_VAR 0 14
44640: PPUSH
44641: CALL_OW 12
44645: ST_TO_ADDR
// case i of 1 :
44646: LD_VAR 0 3
44650: PUSH
44651: LD_INT 1
44653: DOUBLE
44654: EQUAL
44655: IFTRUE 44659
44657: GO 44676
44659: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
44660: LD_VAR 0 1
44664: PPUSH
44665: LD_VAR 0 10
44669: PPUSH
44670: CALL_OW 115
44674: GO 44737
44676: LD_INT 2
44678: DOUBLE
44679: EQUAL
44680: IFTRUE 44684
44682: GO 44706
44684: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
44685: LD_VAR 0 1
44689: PPUSH
44690: LD_VAR 0 6
44694: PPUSH
44695: LD_VAR 0 7
44699: PPUSH
44700: CALL_OW 153
44704: GO 44737
44706: LD_INT 3
44708: DOUBLE
44709: EQUAL
44710: IFTRUE 44714
44712: GO 44736
44714: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
44715: LD_VAR 0 1
44719: PPUSH
44720: LD_VAR 0 6
44724: PPUSH
44725: LD_VAR 0 7
44729: PPUSH
44730: CALL_OW 154
44734: GO 44737
44736: POP
// end ;
44737: LD_VAR 0 2
44741: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
44742: LD_INT 0
44744: PPUSH
44745: PPUSH
44746: PPUSH
44747: PPUSH
44748: PPUSH
44749: PPUSH
// if not unit or not building then
44750: LD_VAR 0 1
44754: NOT
44755: PUSH
44756: LD_VAR 0 2
44760: NOT
44761: OR
44762: IFFALSE 44766
// exit ;
44764: GO 44924
// x := GetX ( building ) ;
44766: LD_ADDR_VAR 0 5
44770: PUSH
44771: LD_VAR 0 2
44775: PPUSH
44776: CALL_OW 250
44780: ST_TO_ADDR
// y := GetY ( building ) ;
44781: LD_ADDR_VAR 0 6
44785: PUSH
44786: LD_VAR 0 2
44790: PPUSH
44791: CALL_OW 251
44795: ST_TO_ADDR
// for i = 0 to 5 do
44796: LD_ADDR_VAR 0 4
44800: PUSH
44801: DOUBLE
44802: LD_INT 0
44804: DEC
44805: ST_TO_ADDR
44806: LD_INT 5
44808: PUSH
44809: FOR_TO
44810: IFFALSE 44922
// begin _x := ShiftX ( x , i , 3 ) ;
44812: LD_ADDR_VAR 0 7
44816: PUSH
44817: LD_VAR 0 5
44821: PPUSH
44822: LD_VAR 0 4
44826: PPUSH
44827: LD_INT 3
44829: PPUSH
44830: CALL_OW 272
44834: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
44835: LD_ADDR_VAR 0 8
44839: PUSH
44840: LD_VAR 0 6
44844: PPUSH
44845: LD_VAR 0 4
44849: PPUSH
44850: LD_INT 3
44852: PPUSH
44853: CALL_OW 273
44857: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44858: LD_VAR 0 7
44862: PPUSH
44863: LD_VAR 0 8
44867: PPUSH
44868: CALL_OW 488
44872: NOT
44873: IFFALSE 44877
// continue ;
44875: GO 44809
// if HexInfo ( _x , _y ) = 0 then
44877: LD_VAR 0 7
44881: PPUSH
44882: LD_VAR 0 8
44886: PPUSH
44887: CALL_OW 428
44891: PUSH
44892: LD_INT 0
44894: EQUAL
44895: IFFALSE 44920
// begin ComMoveXY ( unit , _x , _y ) ;
44897: LD_VAR 0 1
44901: PPUSH
44902: LD_VAR 0 7
44906: PPUSH
44907: LD_VAR 0 8
44911: PPUSH
44912: CALL_OW 111
// exit ;
44916: POP
44917: POP
44918: GO 44924
// end ; end ;
44920: GO 44809
44922: POP
44923: POP
// end ;
44924: LD_VAR 0 3
44928: RET
// export function ScanBase ( side , base_area ) ; begin
44929: LD_INT 0
44931: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
44932: LD_ADDR_VAR 0 3
44936: PUSH
44937: LD_VAR 0 2
44941: PPUSH
44942: LD_INT 81
44944: PUSH
44945: LD_VAR 0 1
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PPUSH
44954: CALL_OW 70
44958: ST_TO_ADDR
// end ;
44959: LD_VAR 0 3
44963: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
44964: LD_INT 0
44966: PPUSH
44967: PPUSH
44968: PPUSH
44969: PPUSH
// result := false ;
44970: LD_ADDR_VAR 0 2
44974: PUSH
44975: LD_INT 0
44977: ST_TO_ADDR
// side := GetSide ( unit ) ;
44978: LD_ADDR_VAR 0 3
44982: PUSH
44983: LD_VAR 0 1
44987: PPUSH
44988: CALL_OW 255
44992: ST_TO_ADDR
// nat := GetNation ( unit ) ;
44993: LD_ADDR_VAR 0 4
44997: PUSH
44998: LD_VAR 0 1
45002: PPUSH
45003: CALL_OW 248
45007: ST_TO_ADDR
// case nat of 1 :
45008: LD_VAR 0 4
45012: PUSH
45013: LD_INT 1
45015: DOUBLE
45016: EQUAL
45017: IFTRUE 45021
45019: GO 45032
45021: POP
// tech := tech_lassight ; 2 :
45022: LD_ADDR_VAR 0 5
45026: PUSH
45027: LD_INT 12
45029: ST_TO_ADDR
45030: GO 45071
45032: LD_INT 2
45034: DOUBLE
45035: EQUAL
45036: IFTRUE 45040
45038: GO 45051
45040: POP
// tech := tech_mortar ; 3 :
45041: LD_ADDR_VAR 0 5
45045: PUSH
45046: LD_INT 41
45048: ST_TO_ADDR
45049: GO 45071
45051: LD_INT 3
45053: DOUBLE
45054: EQUAL
45055: IFTRUE 45059
45057: GO 45070
45059: POP
// tech := tech_bazooka ; end ;
45060: LD_ADDR_VAR 0 5
45064: PUSH
45065: LD_INT 44
45067: ST_TO_ADDR
45068: GO 45071
45070: POP
// if Researched ( side , tech ) then
45071: LD_VAR 0 3
45075: PPUSH
45076: LD_VAR 0 5
45080: PPUSH
45081: CALL_OW 325
45085: IFFALSE 45112
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
45087: LD_ADDR_VAR 0 2
45091: PUSH
45092: LD_INT 5
45094: PUSH
45095: LD_INT 8
45097: PUSH
45098: LD_INT 9
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: LIST
45105: PUSH
45106: LD_VAR 0 4
45110: ARRAY
45111: ST_TO_ADDR
// end ;
45112: LD_VAR 0 2
45116: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
45117: LD_INT 0
45119: PPUSH
45120: PPUSH
45121: PPUSH
// if not mines then
45122: LD_VAR 0 2
45126: NOT
45127: IFFALSE 45131
// exit ;
45129: GO 45275
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45131: LD_ADDR_VAR 0 5
45135: PUSH
45136: LD_INT 81
45138: PUSH
45139: LD_VAR 0 1
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 3
45150: PUSH
45151: LD_INT 21
45153: PUSH
45154: LD_INT 3
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PPUSH
45169: CALL_OW 69
45173: ST_TO_ADDR
// for i in mines do
45174: LD_ADDR_VAR 0 4
45178: PUSH
45179: LD_VAR 0 2
45183: PUSH
45184: FOR_IN
45185: IFFALSE 45273
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
45187: LD_VAR 0 4
45191: PUSH
45192: LD_INT 1
45194: ARRAY
45195: PPUSH
45196: LD_VAR 0 4
45200: PUSH
45201: LD_INT 2
45203: ARRAY
45204: PPUSH
45205: CALL_OW 458
45209: NOT
45210: IFFALSE 45214
// continue ;
45212: GO 45184
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
45214: LD_VAR 0 4
45218: PUSH
45219: LD_INT 1
45221: ARRAY
45222: PPUSH
45223: LD_VAR 0 4
45227: PUSH
45228: LD_INT 2
45230: ARRAY
45231: PPUSH
45232: CALL_OW 428
45236: PUSH
45237: LD_VAR 0 5
45241: IN
45242: IFFALSE 45271
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
45244: LD_VAR 0 4
45248: PUSH
45249: LD_INT 1
45251: ARRAY
45252: PPUSH
45253: LD_VAR 0 4
45257: PUSH
45258: LD_INT 2
45260: ARRAY
45261: PPUSH
45262: LD_VAR 0 1
45266: PPUSH
45267: CALL_OW 456
// end ;
45271: GO 45184
45273: POP
45274: POP
// end ;
45275: LD_VAR 0 3
45279: RET
// export function Count ( array ) ; var i ; begin
45280: LD_INT 0
45282: PPUSH
45283: PPUSH
// result := 0 ;
45284: LD_ADDR_VAR 0 2
45288: PUSH
45289: LD_INT 0
45291: ST_TO_ADDR
// for i in array do
45292: LD_ADDR_VAR 0 3
45296: PUSH
45297: LD_VAR 0 1
45301: PUSH
45302: FOR_IN
45303: IFFALSE 45327
// if i then
45305: LD_VAR 0 3
45309: IFFALSE 45325
// result := result + 1 ;
45311: LD_ADDR_VAR 0 2
45315: PUSH
45316: LD_VAR 0 2
45320: PUSH
45321: LD_INT 1
45323: PLUS
45324: ST_TO_ADDR
45325: GO 45302
45327: POP
45328: POP
// end ;
45329: LD_VAR 0 2
45333: RET
// export function IsEmpty ( building ) ; begin
45334: LD_INT 0
45336: PPUSH
// if not building then
45337: LD_VAR 0 1
45341: NOT
45342: IFFALSE 45346
// exit ;
45344: GO 45389
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
45346: LD_ADDR_VAR 0 2
45350: PUSH
45351: LD_VAR 0 1
45355: PUSH
45356: LD_INT 22
45358: PUSH
45359: LD_VAR 0 1
45363: PPUSH
45364: CALL_OW 255
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 58
45375: PUSH
45376: EMPTY
45377: LIST
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PPUSH
45383: CALL_OW 69
45387: IN
45388: ST_TO_ADDR
// end ;
45389: LD_VAR 0 2
45393: RET
// export function IsNotFull ( building ) ; begin
45394: LD_INT 0
45396: PPUSH
// if not building then
45397: LD_VAR 0 1
45401: NOT
45402: IFFALSE 45406
// exit ;
45404: GO 45425
// result := UnitsInside ( building ) < 6 ;
45406: LD_ADDR_VAR 0 2
45410: PUSH
45411: LD_VAR 0 1
45415: PPUSH
45416: CALL_OW 313
45420: PUSH
45421: LD_INT 6
45423: LESS
45424: ST_TO_ADDR
// end ;
45425: LD_VAR 0 2
45429: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
45430: LD_INT 0
45432: PPUSH
45433: PPUSH
45434: PPUSH
45435: PPUSH
// tmp := [ ] ;
45436: LD_ADDR_VAR 0 3
45440: PUSH
45441: EMPTY
45442: ST_TO_ADDR
// list := [ ] ;
45443: LD_ADDR_VAR 0 5
45447: PUSH
45448: EMPTY
45449: ST_TO_ADDR
// for i = 16 to 25 do
45450: LD_ADDR_VAR 0 4
45454: PUSH
45455: DOUBLE
45456: LD_INT 16
45458: DEC
45459: ST_TO_ADDR
45460: LD_INT 25
45462: PUSH
45463: FOR_TO
45464: IFFALSE 45537
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
45466: LD_ADDR_VAR 0 3
45470: PUSH
45471: LD_VAR 0 3
45475: PUSH
45476: LD_INT 22
45478: PUSH
45479: LD_VAR 0 1
45483: PPUSH
45484: CALL_OW 255
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 91
45495: PUSH
45496: LD_VAR 0 1
45500: PUSH
45501: LD_INT 6
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 30
45511: PUSH
45512: LD_VAR 0 4
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: LIST
45525: PUSH
45526: EMPTY
45527: LIST
45528: PPUSH
45529: CALL_OW 69
45533: ADD
45534: ST_TO_ADDR
45535: GO 45463
45537: POP
45538: POP
// for i = 1 to tmp do
45539: LD_ADDR_VAR 0 4
45543: PUSH
45544: DOUBLE
45545: LD_INT 1
45547: DEC
45548: ST_TO_ADDR
45549: LD_VAR 0 3
45553: PUSH
45554: FOR_TO
45555: IFFALSE 45643
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
45557: LD_ADDR_VAR 0 5
45561: PUSH
45562: LD_VAR 0 5
45566: PUSH
45567: LD_VAR 0 3
45571: PUSH
45572: LD_VAR 0 4
45576: ARRAY
45577: PPUSH
45578: CALL_OW 266
45582: PUSH
45583: LD_VAR 0 3
45587: PUSH
45588: LD_VAR 0 4
45592: ARRAY
45593: PPUSH
45594: CALL_OW 250
45598: PUSH
45599: LD_VAR 0 3
45603: PUSH
45604: LD_VAR 0 4
45608: ARRAY
45609: PPUSH
45610: CALL_OW 251
45614: PUSH
45615: LD_VAR 0 3
45619: PUSH
45620: LD_VAR 0 4
45624: ARRAY
45625: PPUSH
45626: CALL_OW 254
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: PUSH
45637: EMPTY
45638: LIST
45639: ADD
45640: ST_TO_ADDR
45641: GO 45554
45643: POP
45644: POP
// result := list ;
45645: LD_ADDR_VAR 0 2
45649: PUSH
45650: LD_VAR 0 5
45654: ST_TO_ADDR
// end ;
45655: LD_VAR 0 2
45659: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
45660: LD_INT 0
45662: PPUSH
45663: PPUSH
45664: PPUSH
45665: PPUSH
45666: PPUSH
45667: PPUSH
45668: PPUSH
// if not factory then
45669: LD_VAR 0 1
45673: NOT
45674: IFFALSE 45678
// exit ;
45676: GO 46271
// if control = control_apeman then
45678: LD_VAR 0 4
45682: PUSH
45683: LD_INT 5
45685: EQUAL
45686: IFFALSE 45795
// begin tmp := UnitsInside ( factory ) ;
45688: LD_ADDR_VAR 0 8
45692: PUSH
45693: LD_VAR 0 1
45697: PPUSH
45698: CALL_OW 313
45702: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
45703: LD_VAR 0 8
45707: PPUSH
45708: LD_INT 25
45710: PUSH
45711: LD_INT 12
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PPUSH
45718: CALL_OW 72
45722: NOT
45723: IFFALSE 45733
// control := control_manual ;
45725: LD_ADDR_VAR 0 4
45729: PUSH
45730: LD_INT 1
45732: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
45733: LD_ADDR_VAR 0 8
45737: PUSH
45738: LD_VAR 0 1
45742: PPUSH
45743: CALL 45430 0 1
45747: ST_TO_ADDR
// if tmp then
45748: LD_VAR 0 8
45752: IFFALSE 45795
// begin for i in tmp do
45754: LD_ADDR_VAR 0 7
45758: PUSH
45759: LD_VAR 0 8
45763: PUSH
45764: FOR_IN
45765: IFFALSE 45793
// if i [ 1 ] = b_ext_radio then
45767: LD_VAR 0 7
45771: PUSH
45772: LD_INT 1
45774: ARRAY
45775: PUSH
45776: LD_INT 22
45778: EQUAL
45779: IFFALSE 45791
// begin control := control_remote ;
45781: LD_ADDR_VAR 0 4
45785: PUSH
45786: LD_INT 2
45788: ST_TO_ADDR
// break ;
45789: GO 45793
// end ;
45791: GO 45764
45793: POP
45794: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45795: LD_VAR 0 1
45799: PPUSH
45800: LD_VAR 0 2
45804: PPUSH
45805: LD_VAR 0 3
45809: PPUSH
45810: LD_VAR 0 4
45814: PPUSH
45815: LD_VAR 0 5
45819: PPUSH
45820: CALL_OW 448
45824: IFFALSE 45859
// begin result := [ chassis , engine , control , weapon ] ;
45826: LD_ADDR_VAR 0 6
45830: PUSH
45831: LD_VAR 0 2
45835: PUSH
45836: LD_VAR 0 3
45840: PUSH
45841: LD_VAR 0 4
45845: PUSH
45846: LD_VAR 0 5
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: ST_TO_ADDR
// exit ;
45857: GO 46271
// end ; _chassis := AvailableChassisList ( factory ) ;
45859: LD_ADDR_VAR 0 9
45863: PUSH
45864: LD_VAR 0 1
45868: PPUSH
45869: CALL_OW 475
45873: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
45874: LD_ADDR_VAR 0 11
45878: PUSH
45879: LD_VAR 0 1
45883: PPUSH
45884: CALL_OW 476
45888: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
45889: LD_ADDR_VAR 0 12
45893: PUSH
45894: LD_VAR 0 1
45898: PPUSH
45899: CALL_OW 477
45903: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
45904: LD_ADDR_VAR 0 10
45908: PUSH
45909: LD_VAR 0 1
45913: PPUSH
45914: CALL_OW 478
45918: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
45919: LD_VAR 0 9
45923: NOT
45924: PUSH
45925: LD_VAR 0 11
45929: NOT
45930: OR
45931: PUSH
45932: LD_VAR 0 12
45936: NOT
45937: OR
45938: PUSH
45939: LD_VAR 0 10
45943: NOT
45944: OR
45945: IFFALSE 45980
// begin result := [ chassis , engine , control , weapon ] ;
45947: LD_ADDR_VAR 0 6
45951: PUSH
45952: LD_VAR 0 2
45956: PUSH
45957: LD_VAR 0 3
45961: PUSH
45962: LD_VAR 0 4
45966: PUSH
45967: LD_VAR 0 5
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: ST_TO_ADDR
// exit ;
45978: GO 46271
// end ; if not chassis in _chassis then
45980: LD_VAR 0 2
45984: PUSH
45985: LD_VAR 0 9
45989: IN
45990: NOT
45991: IFFALSE 46017
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
45993: LD_ADDR_VAR 0 2
45997: PUSH
45998: LD_VAR 0 9
46002: PUSH
46003: LD_INT 1
46005: PPUSH
46006: LD_VAR 0 9
46010: PPUSH
46011: CALL_OW 12
46015: ARRAY
46016: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
46017: LD_VAR 0 2
46021: PPUSH
46022: LD_VAR 0 3
46026: PPUSH
46027: CALL 46276 0 2
46031: NOT
46032: IFFALSE 46091
// repeat engine := _engine [ 1 ] ;
46034: LD_ADDR_VAR 0 3
46038: PUSH
46039: LD_VAR 0 11
46043: PUSH
46044: LD_INT 1
46046: ARRAY
46047: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
46048: LD_ADDR_VAR 0 11
46052: PUSH
46053: LD_VAR 0 11
46057: PPUSH
46058: LD_INT 1
46060: PPUSH
46061: CALL_OW 3
46065: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
46066: LD_VAR 0 2
46070: PPUSH
46071: LD_VAR 0 3
46075: PPUSH
46076: CALL 46276 0 2
46080: PUSH
46081: LD_VAR 0 11
46085: PUSH
46086: EMPTY
46087: EQUAL
46088: OR
46089: IFFALSE 46034
// if not control in _control then
46091: LD_VAR 0 4
46095: PUSH
46096: LD_VAR 0 12
46100: IN
46101: NOT
46102: IFFALSE 46128
// control := _control [ rand ( 1 , _control ) ] ;
46104: LD_ADDR_VAR 0 4
46108: PUSH
46109: LD_VAR 0 12
46113: PUSH
46114: LD_INT 1
46116: PPUSH
46117: LD_VAR 0 12
46121: PPUSH
46122: CALL_OW 12
46126: ARRAY
46127: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
46128: LD_VAR 0 2
46132: PPUSH
46133: LD_VAR 0 5
46137: PPUSH
46138: CALL 46496 0 2
46142: NOT
46143: IFFALSE 46202
// repeat weapon := _weapon [ 1 ] ;
46145: LD_ADDR_VAR 0 5
46149: PUSH
46150: LD_VAR 0 10
46154: PUSH
46155: LD_INT 1
46157: ARRAY
46158: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
46159: LD_ADDR_VAR 0 10
46163: PUSH
46164: LD_VAR 0 10
46168: PPUSH
46169: LD_INT 1
46171: PPUSH
46172: CALL_OW 3
46176: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
46177: LD_VAR 0 2
46181: PPUSH
46182: LD_VAR 0 5
46186: PPUSH
46187: CALL 46496 0 2
46191: PUSH
46192: LD_VAR 0 10
46196: PUSH
46197: EMPTY
46198: EQUAL
46199: OR
46200: IFFALSE 46145
// result := [ ] ;
46202: LD_ADDR_VAR 0 6
46206: PUSH
46207: EMPTY
46208: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
46209: LD_VAR 0 1
46213: PPUSH
46214: LD_VAR 0 2
46218: PPUSH
46219: LD_VAR 0 3
46223: PPUSH
46224: LD_VAR 0 4
46228: PPUSH
46229: LD_VAR 0 5
46233: PPUSH
46234: CALL_OW 448
46238: IFFALSE 46271
// result := [ chassis , engine , control , weapon ] ;
46240: LD_ADDR_VAR 0 6
46244: PUSH
46245: LD_VAR 0 2
46249: PUSH
46250: LD_VAR 0 3
46254: PUSH
46255: LD_VAR 0 4
46259: PUSH
46260: LD_VAR 0 5
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: ST_TO_ADDR
// end ;
46271: LD_VAR 0 6
46275: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
46276: LD_INT 0
46278: PPUSH
// if not chassis or not engine then
46279: LD_VAR 0 1
46283: NOT
46284: PUSH
46285: LD_VAR 0 2
46289: NOT
46290: OR
46291: IFFALSE 46295
// exit ;
46293: GO 46491
// case engine of engine_solar :
46295: LD_VAR 0 2
46299: PUSH
46300: LD_INT 2
46302: DOUBLE
46303: EQUAL
46304: IFTRUE 46308
46306: GO 46346
46308: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
46309: LD_ADDR_VAR 0 3
46313: PUSH
46314: LD_INT 11
46316: PUSH
46317: LD_INT 12
46319: PUSH
46320: LD_INT 13
46322: PUSH
46323: LD_INT 14
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: LD_INT 2
46331: PUSH
46332: LD_INT 3
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: ST_TO_ADDR
46344: GO 46475
46346: LD_INT 1
46348: DOUBLE
46349: EQUAL
46350: IFTRUE 46354
46352: GO 46416
46354: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
46355: LD_ADDR_VAR 0 3
46359: PUSH
46360: LD_INT 11
46362: PUSH
46363: LD_INT 12
46365: PUSH
46366: LD_INT 13
46368: PUSH
46369: LD_INT 14
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: LD_INT 2
46377: PUSH
46378: LD_INT 3
46380: PUSH
46381: LD_INT 4
46383: PUSH
46384: LD_INT 5
46386: PUSH
46387: LD_INT 21
46389: PUSH
46390: LD_INT 23
46392: PUSH
46393: LD_INT 22
46395: PUSH
46396: LD_INT 24
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: ST_TO_ADDR
46414: GO 46475
46416: LD_INT 3
46418: DOUBLE
46419: EQUAL
46420: IFTRUE 46424
46422: GO 46474
46424: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46425: LD_ADDR_VAR 0 3
46429: PUSH
46430: LD_INT 13
46432: PUSH
46433: LD_INT 14
46435: PUSH
46436: LD_INT 2
46438: PUSH
46439: LD_INT 3
46441: PUSH
46442: LD_INT 4
46444: PUSH
46445: LD_INT 5
46447: PUSH
46448: LD_INT 21
46450: PUSH
46451: LD_INT 22
46453: PUSH
46454: LD_INT 23
46456: PUSH
46457: LD_INT 24
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: ST_TO_ADDR
46472: GO 46475
46474: POP
// result := ( chassis in result ) ;
46475: LD_ADDR_VAR 0 3
46479: PUSH
46480: LD_VAR 0 1
46484: PUSH
46485: LD_VAR 0 3
46489: IN
46490: ST_TO_ADDR
// end ;
46491: LD_VAR 0 3
46495: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
46496: LD_INT 0
46498: PPUSH
// if not chassis or not weapon then
46499: LD_VAR 0 1
46503: NOT
46504: PUSH
46505: LD_VAR 0 2
46509: NOT
46510: OR
46511: IFFALSE 46515
// exit ;
46513: GO 47577
// case weapon of us_machine_gun :
46515: LD_VAR 0 2
46519: PUSH
46520: LD_INT 2
46522: DOUBLE
46523: EQUAL
46524: IFTRUE 46528
46526: GO 46558
46528: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
46529: LD_ADDR_VAR 0 3
46533: PUSH
46534: LD_INT 1
46536: PUSH
46537: LD_INT 2
46539: PUSH
46540: LD_INT 3
46542: PUSH
46543: LD_INT 4
46545: PUSH
46546: LD_INT 5
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: ST_TO_ADDR
46556: GO 47561
46558: LD_INT 3
46560: DOUBLE
46561: EQUAL
46562: IFTRUE 46566
46564: GO 46596
46566: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
46567: LD_ADDR_VAR 0 3
46571: PUSH
46572: LD_INT 1
46574: PUSH
46575: LD_INT 2
46577: PUSH
46578: LD_INT 3
46580: PUSH
46581: LD_INT 4
46583: PUSH
46584: LD_INT 5
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: ST_TO_ADDR
46594: GO 47561
46596: LD_INT 11
46598: DOUBLE
46599: EQUAL
46600: IFTRUE 46604
46602: GO 46634
46604: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
46605: LD_ADDR_VAR 0 3
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: LD_INT 3
46618: PUSH
46619: LD_INT 4
46621: PUSH
46622: LD_INT 5
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: ST_TO_ADDR
46632: GO 47561
46634: LD_INT 4
46636: DOUBLE
46637: EQUAL
46638: IFTRUE 46642
46640: GO 46668
46642: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
46643: LD_ADDR_VAR 0 3
46647: PUSH
46648: LD_INT 2
46650: PUSH
46651: LD_INT 3
46653: PUSH
46654: LD_INT 4
46656: PUSH
46657: LD_INT 5
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: ST_TO_ADDR
46666: GO 47561
46668: LD_INT 5
46670: DOUBLE
46671: EQUAL
46672: IFTRUE 46676
46674: GO 46702
46676: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
46677: LD_ADDR_VAR 0 3
46681: PUSH
46682: LD_INT 2
46684: PUSH
46685: LD_INT 3
46687: PUSH
46688: LD_INT 4
46690: PUSH
46691: LD_INT 5
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: ST_TO_ADDR
46700: GO 47561
46702: LD_INT 9
46704: DOUBLE
46705: EQUAL
46706: IFTRUE 46710
46708: GO 46736
46710: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
46711: LD_ADDR_VAR 0 3
46715: PUSH
46716: LD_INT 2
46718: PUSH
46719: LD_INT 3
46721: PUSH
46722: LD_INT 4
46724: PUSH
46725: LD_INT 5
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: ST_TO_ADDR
46734: GO 47561
46736: LD_INT 7
46738: DOUBLE
46739: EQUAL
46740: IFTRUE 46744
46742: GO 46770
46744: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
46745: LD_ADDR_VAR 0 3
46749: PUSH
46750: LD_INT 2
46752: PUSH
46753: LD_INT 3
46755: PUSH
46756: LD_INT 4
46758: PUSH
46759: LD_INT 5
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: ST_TO_ADDR
46768: GO 47561
46770: LD_INT 12
46772: DOUBLE
46773: EQUAL
46774: IFTRUE 46778
46776: GO 46804
46778: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
46779: LD_ADDR_VAR 0 3
46783: PUSH
46784: LD_INT 2
46786: PUSH
46787: LD_INT 3
46789: PUSH
46790: LD_INT 4
46792: PUSH
46793: LD_INT 5
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: ST_TO_ADDR
46802: GO 47561
46804: LD_INT 13
46806: DOUBLE
46807: EQUAL
46808: IFTRUE 46812
46810: GO 46838
46812: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
46813: LD_ADDR_VAR 0 3
46817: PUSH
46818: LD_INT 2
46820: PUSH
46821: LD_INT 3
46823: PUSH
46824: LD_INT 4
46826: PUSH
46827: LD_INT 5
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: ST_TO_ADDR
46836: GO 47561
46838: LD_INT 14
46840: DOUBLE
46841: EQUAL
46842: IFTRUE 46846
46844: GO 46864
46846: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
46847: LD_ADDR_VAR 0 3
46851: PUSH
46852: LD_INT 4
46854: PUSH
46855: LD_INT 5
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: ST_TO_ADDR
46862: GO 47561
46864: LD_INT 6
46866: DOUBLE
46867: EQUAL
46868: IFTRUE 46872
46870: GO 46890
46872: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
46873: LD_ADDR_VAR 0 3
46877: PUSH
46878: LD_INT 4
46880: PUSH
46881: LD_INT 5
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: ST_TO_ADDR
46888: GO 47561
46890: LD_INT 10
46892: DOUBLE
46893: EQUAL
46894: IFTRUE 46898
46896: GO 46916
46898: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
46899: LD_ADDR_VAR 0 3
46903: PUSH
46904: LD_INT 4
46906: PUSH
46907: LD_INT 5
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: ST_TO_ADDR
46914: GO 47561
46916: LD_INT 22
46918: DOUBLE
46919: EQUAL
46920: IFTRUE 46924
46922: GO 46950
46924: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
46925: LD_ADDR_VAR 0 3
46929: PUSH
46930: LD_INT 11
46932: PUSH
46933: LD_INT 12
46935: PUSH
46936: LD_INT 13
46938: PUSH
46939: LD_INT 14
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: ST_TO_ADDR
46948: GO 47561
46950: LD_INT 23
46952: DOUBLE
46953: EQUAL
46954: IFTRUE 46958
46956: GO 46984
46958: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
46959: LD_ADDR_VAR 0 3
46963: PUSH
46964: LD_INT 11
46966: PUSH
46967: LD_INT 12
46969: PUSH
46970: LD_INT 13
46972: PUSH
46973: LD_INT 14
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: ST_TO_ADDR
46982: GO 47561
46984: LD_INT 24
46986: DOUBLE
46987: EQUAL
46988: IFTRUE 46992
46990: GO 47018
46992: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
46993: LD_ADDR_VAR 0 3
46997: PUSH
46998: LD_INT 11
47000: PUSH
47001: LD_INT 12
47003: PUSH
47004: LD_INT 13
47006: PUSH
47007: LD_INT 14
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: ST_TO_ADDR
47016: GO 47561
47018: LD_INT 30
47020: DOUBLE
47021: EQUAL
47022: IFTRUE 47026
47024: GO 47052
47026: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
47027: LD_ADDR_VAR 0 3
47031: PUSH
47032: LD_INT 11
47034: PUSH
47035: LD_INT 12
47037: PUSH
47038: LD_INT 13
47040: PUSH
47041: LD_INT 14
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: ST_TO_ADDR
47050: GO 47561
47052: LD_INT 25
47054: DOUBLE
47055: EQUAL
47056: IFTRUE 47060
47058: GO 47078
47060: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
47061: LD_ADDR_VAR 0 3
47065: PUSH
47066: LD_INT 13
47068: PUSH
47069: LD_INT 14
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: ST_TO_ADDR
47076: GO 47561
47078: LD_INT 27
47080: DOUBLE
47081: EQUAL
47082: IFTRUE 47086
47084: GO 47104
47086: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
47087: LD_ADDR_VAR 0 3
47091: PUSH
47092: LD_INT 13
47094: PUSH
47095: LD_INT 14
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: ST_TO_ADDR
47102: GO 47561
47104: LD_EXP 70
47108: DOUBLE
47109: EQUAL
47110: IFTRUE 47114
47112: GO 47140
47114: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
47115: LD_ADDR_VAR 0 3
47119: PUSH
47120: LD_INT 11
47122: PUSH
47123: LD_INT 12
47125: PUSH
47126: LD_INT 13
47128: PUSH
47129: LD_INT 14
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: ST_TO_ADDR
47138: GO 47561
47140: LD_INT 28
47142: DOUBLE
47143: EQUAL
47144: IFTRUE 47148
47146: GO 47166
47148: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
47149: LD_ADDR_VAR 0 3
47153: PUSH
47154: LD_INT 13
47156: PUSH
47157: LD_INT 14
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: ST_TO_ADDR
47164: GO 47561
47166: LD_INT 29
47168: DOUBLE
47169: EQUAL
47170: IFTRUE 47174
47172: GO 47192
47174: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
47175: LD_ADDR_VAR 0 3
47179: PUSH
47180: LD_INT 13
47182: PUSH
47183: LD_INT 14
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: ST_TO_ADDR
47190: GO 47561
47192: LD_INT 31
47194: DOUBLE
47195: EQUAL
47196: IFTRUE 47200
47198: GO 47218
47200: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
47201: LD_ADDR_VAR 0 3
47205: PUSH
47206: LD_INT 13
47208: PUSH
47209: LD_INT 14
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: ST_TO_ADDR
47216: GO 47561
47218: LD_INT 26
47220: DOUBLE
47221: EQUAL
47222: IFTRUE 47226
47224: GO 47244
47226: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
47227: LD_ADDR_VAR 0 3
47231: PUSH
47232: LD_INT 13
47234: PUSH
47235: LD_INT 14
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: ST_TO_ADDR
47242: GO 47561
47244: LD_INT 42
47246: DOUBLE
47247: EQUAL
47248: IFTRUE 47252
47250: GO 47278
47252: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
47253: LD_ADDR_VAR 0 3
47257: PUSH
47258: LD_INT 21
47260: PUSH
47261: LD_INT 22
47263: PUSH
47264: LD_INT 23
47266: PUSH
47267: LD_INT 24
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: ST_TO_ADDR
47276: GO 47561
47278: LD_INT 43
47280: DOUBLE
47281: EQUAL
47282: IFTRUE 47286
47284: GO 47312
47286: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
47287: LD_ADDR_VAR 0 3
47291: PUSH
47292: LD_INT 21
47294: PUSH
47295: LD_INT 22
47297: PUSH
47298: LD_INT 23
47300: PUSH
47301: LD_INT 24
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: ST_TO_ADDR
47310: GO 47561
47312: LD_INT 44
47314: DOUBLE
47315: EQUAL
47316: IFTRUE 47320
47318: GO 47346
47320: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
47321: LD_ADDR_VAR 0 3
47325: PUSH
47326: LD_INT 21
47328: PUSH
47329: LD_INT 22
47331: PUSH
47332: LD_INT 23
47334: PUSH
47335: LD_INT 24
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: ST_TO_ADDR
47344: GO 47561
47346: LD_INT 45
47348: DOUBLE
47349: EQUAL
47350: IFTRUE 47354
47352: GO 47380
47354: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
47355: LD_ADDR_VAR 0 3
47359: PUSH
47360: LD_INT 21
47362: PUSH
47363: LD_INT 22
47365: PUSH
47366: LD_INT 23
47368: PUSH
47369: LD_INT 24
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: ST_TO_ADDR
47378: GO 47561
47380: LD_INT 49
47382: DOUBLE
47383: EQUAL
47384: IFTRUE 47388
47386: GO 47414
47388: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
47389: LD_ADDR_VAR 0 3
47393: PUSH
47394: LD_INT 21
47396: PUSH
47397: LD_INT 22
47399: PUSH
47400: LD_INT 23
47402: PUSH
47403: LD_INT 24
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: ST_TO_ADDR
47412: GO 47561
47414: LD_INT 51
47416: DOUBLE
47417: EQUAL
47418: IFTRUE 47422
47420: GO 47448
47422: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
47423: LD_ADDR_VAR 0 3
47427: PUSH
47428: LD_INT 21
47430: PUSH
47431: LD_INT 22
47433: PUSH
47434: LD_INT 23
47436: PUSH
47437: LD_INT 24
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: ST_TO_ADDR
47446: GO 47561
47448: LD_INT 52
47450: DOUBLE
47451: EQUAL
47452: IFTRUE 47456
47454: GO 47482
47456: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
47457: LD_ADDR_VAR 0 3
47461: PUSH
47462: LD_INT 21
47464: PUSH
47465: LD_INT 22
47467: PUSH
47468: LD_INT 23
47470: PUSH
47471: LD_INT 24
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: ST_TO_ADDR
47480: GO 47561
47482: LD_INT 53
47484: DOUBLE
47485: EQUAL
47486: IFTRUE 47490
47488: GO 47508
47490: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
47491: LD_ADDR_VAR 0 3
47495: PUSH
47496: LD_INT 23
47498: PUSH
47499: LD_INT 24
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: ST_TO_ADDR
47506: GO 47561
47508: LD_INT 46
47510: DOUBLE
47511: EQUAL
47512: IFTRUE 47516
47514: GO 47534
47516: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
47517: LD_ADDR_VAR 0 3
47521: PUSH
47522: LD_INT 23
47524: PUSH
47525: LD_INT 24
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: ST_TO_ADDR
47532: GO 47561
47534: LD_INT 47
47536: DOUBLE
47537: EQUAL
47538: IFTRUE 47542
47540: GO 47560
47542: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
47543: LD_ADDR_VAR 0 3
47547: PUSH
47548: LD_INT 23
47550: PUSH
47551: LD_INT 24
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: ST_TO_ADDR
47558: GO 47561
47560: POP
// result := ( chassis in result ) ;
47561: LD_ADDR_VAR 0 3
47565: PUSH
47566: LD_VAR 0 1
47570: PUSH
47571: LD_VAR 0 3
47575: IN
47576: ST_TO_ADDR
// end ;
47577: LD_VAR 0 3
47581: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
47582: LD_INT 0
47584: PPUSH
47585: PPUSH
47586: PPUSH
47587: PPUSH
47588: PPUSH
47589: PPUSH
47590: PPUSH
// result := array ;
47591: LD_ADDR_VAR 0 5
47595: PUSH
47596: LD_VAR 0 1
47600: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
47601: LD_VAR 0 1
47605: NOT
47606: PUSH
47607: LD_VAR 0 2
47611: NOT
47612: OR
47613: PUSH
47614: LD_VAR 0 3
47618: NOT
47619: OR
47620: PUSH
47621: LD_VAR 0 2
47625: PUSH
47626: LD_VAR 0 1
47630: GREATER
47631: OR
47632: PUSH
47633: LD_VAR 0 3
47637: PUSH
47638: LD_VAR 0 1
47642: GREATER
47643: OR
47644: IFFALSE 47648
// exit ;
47646: GO 47944
// if direction then
47648: LD_VAR 0 4
47652: IFFALSE 47716
// begin d := 1 ;
47654: LD_ADDR_VAR 0 9
47658: PUSH
47659: LD_INT 1
47661: ST_TO_ADDR
// if i_from > i_to then
47662: LD_VAR 0 2
47666: PUSH
47667: LD_VAR 0 3
47671: GREATER
47672: IFFALSE 47698
// length := ( array - i_from ) + i_to else
47674: LD_ADDR_VAR 0 11
47678: PUSH
47679: LD_VAR 0 1
47683: PUSH
47684: LD_VAR 0 2
47688: MINUS
47689: PUSH
47690: LD_VAR 0 3
47694: PLUS
47695: ST_TO_ADDR
47696: GO 47714
// length := i_to - i_from ;
47698: LD_ADDR_VAR 0 11
47702: PUSH
47703: LD_VAR 0 3
47707: PUSH
47708: LD_VAR 0 2
47712: MINUS
47713: ST_TO_ADDR
// end else
47714: GO 47777
// begin d := - 1 ;
47716: LD_ADDR_VAR 0 9
47720: PUSH
47721: LD_INT 1
47723: NEG
47724: ST_TO_ADDR
// if i_from > i_to then
47725: LD_VAR 0 2
47729: PUSH
47730: LD_VAR 0 3
47734: GREATER
47735: IFFALSE 47755
// length := i_from - i_to else
47737: LD_ADDR_VAR 0 11
47741: PUSH
47742: LD_VAR 0 2
47746: PUSH
47747: LD_VAR 0 3
47751: MINUS
47752: ST_TO_ADDR
47753: GO 47777
// length := ( array - i_to ) + i_from ;
47755: LD_ADDR_VAR 0 11
47759: PUSH
47760: LD_VAR 0 1
47764: PUSH
47765: LD_VAR 0 3
47769: MINUS
47770: PUSH
47771: LD_VAR 0 2
47775: PLUS
47776: ST_TO_ADDR
// end ; if not length then
47777: LD_VAR 0 11
47781: NOT
47782: IFFALSE 47786
// exit ;
47784: GO 47944
// tmp := array ;
47786: LD_ADDR_VAR 0 10
47790: PUSH
47791: LD_VAR 0 1
47795: ST_TO_ADDR
// for i = 1 to length do
47796: LD_ADDR_VAR 0 6
47800: PUSH
47801: DOUBLE
47802: LD_INT 1
47804: DEC
47805: ST_TO_ADDR
47806: LD_VAR 0 11
47810: PUSH
47811: FOR_TO
47812: IFFALSE 47932
// begin for j = 1 to array do
47814: LD_ADDR_VAR 0 7
47818: PUSH
47819: DOUBLE
47820: LD_INT 1
47822: DEC
47823: ST_TO_ADDR
47824: LD_VAR 0 1
47828: PUSH
47829: FOR_TO
47830: IFFALSE 47918
// begin k := j + d ;
47832: LD_ADDR_VAR 0 8
47836: PUSH
47837: LD_VAR 0 7
47841: PUSH
47842: LD_VAR 0 9
47846: PLUS
47847: ST_TO_ADDR
// if k > array then
47848: LD_VAR 0 8
47852: PUSH
47853: LD_VAR 0 1
47857: GREATER
47858: IFFALSE 47868
// k := 1 ;
47860: LD_ADDR_VAR 0 8
47864: PUSH
47865: LD_INT 1
47867: ST_TO_ADDR
// if not k then
47868: LD_VAR 0 8
47872: NOT
47873: IFFALSE 47885
// k := array ;
47875: LD_ADDR_VAR 0 8
47879: PUSH
47880: LD_VAR 0 1
47884: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
47885: LD_ADDR_VAR 0 10
47889: PUSH
47890: LD_VAR 0 10
47894: PPUSH
47895: LD_VAR 0 8
47899: PPUSH
47900: LD_VAR 0 1
47904: PUSH
47905: LD_VAR 0 7
47909: ARRAY
47910: PPUSH
47911: CALL_OW 1
47915: ST_TO_ADDR
// end ;
47916: GO 47829
47918: POP
47919: POP
// array := tmp ;
47920: LD_ADDR_VAR 0 1
47924: PUSH
47925: LD_VAR 0 10
47929: ST_TO_ADDR
// end ;
47930: GO 47811
47932: POP
47933: POP
// result := array ;
47934: LD_ADDR_VAR 0 5
47938: PUSH
47939: LD_VAR 0 1
47943: ST_TO_ADDR
// end ;
47944: LD_VAR 0 5
47948: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
47949: LD_INT 0
47951: PPUSH
47952: PPUSH
// result := 0 ;
47953: LD_ADDR_VAR 0 3
47957: PUSH
47958: LD_INT 0
47960: ST_TO_ADDR
// if not array or not value in array then
47961: LD_VAR 0 1
47965: NOT
47966: PUSH
47967: LD_VAR 0 2
47971: PUSH
47972: LD_VAR 0 1
47976: IN
47977: NOT
47978: OR
47979: IFFALSE 47983
// exit ;
47981: GO 48037
// for i = 1 to array do
47983: LD_ADDR_VAR 0 4
47987: PUSH
47988: DOUBLE
47989: LD_INT 1
47991: DEC
47992: ST_TO_ADDR
47993: LD_VAR 0 1
47997: PUSH
47998: FOR_TO
47999: IFFALSE 48035
// if value = array [ i ] then
48001: LD_VAR 0 2
48005: PUSH
48006: LD_VAR 0 1
48010: PUSH
48011: LD_VAR 0 4
48015: ARRAY
48016: EQUAL
48017: IFFALSE 48033
// begin result := i ;
48019: LD_ADDR_VAR 0 3
48023: PUSH
48024: LD_VAR 0 4
48028: ST_TO_ADDR
// exit ;
48029: POP
48030: POP
48031: GO 48037
// end ;
48033: GO 47998
48035: POP
48036: POP
// end ;
48037: LD_VAR 0 3
48041: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
48042: LD_INT 0
48044: PPUSH
// vc_chassis := chassis ;
48045: LD_ADDR_OWVAR 37
48049: PUSH
48050: LD_VAR 0 1
48054: ST_TO_ADDR
// vc_engine := engine ;
48055: LD_ADDR_OWVAR 39
48059: PUSH
48060: LD_VAR 0 2
48064: ST_TO_ADDR
// vc_control := control ;
48065: LD_ADDR_OWVAR 38
48069: PUSH
48070: LD_VAR 0 3
48074: ST_TO_ADDR
// vc_weapon := weapon ;
48075: LD_ADDR_OWVAR 40
48079: PUSH
48080: LD_VAR 0 4
48084: ST_TO_ADDR
// vc_fuel_battery := fuel ;
48085: LD_ADDR_OWVAR 41
48089: PUSH
48090: LD_VAR 0 5
48094: ST_TO_ADDR
// end ;
48095: LD_VAR 0 6
48099: RET
// export function WantPlant ( unit ) ; var task ; begin
48100: LD_INT 0
48102: PPUSH
48103: PPUSH
// result := false ;
48104: LD_ADDR_VAR 0 2
48108: PUSH
48109: LD_INT 0
48111: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
48112: LD_ADDR_VAR 0 3
48116: PUSH
48117: LD_VAR 0 1
48121: PPUSH
48122: CALL_OW 437
48126: ST_TO_ADDR
// if task then
48127: LD_VAR 0 3
48131: IFFALSE 48159
// if task [ 1 ] [ 1 ] = p then
48133: LD_VAR 0 3
48137: PUSH
48138: LD_INT 1
48140: ARRAY
48141: PUSH
48142: LD_INT 1
48144: ARRAY
48145: PUSH
48146: LD_STRING p
48148: EQUAL
48149: IFFALSE 48159
// result := true ;
48151: LD_ADDR_VAR 0 2
48155: PUSH
48156: LD_INT 1
48158: ST_TO_ADDR
// end ;
48159: LD_VAR 0 2
48163: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
48164: LD_INT 0
48166: PPUSH
48167: PPUSH
48168: PPUSH
48169: PPUSH
// if pos < 1 then
48170: LD_VAR 0 2
48174: PUSH
48175: LD_INT 1
48177: LESS
48178: IFFALSE 48182
// exit ;
48180: GO 48485
// if pos = 1 then
48182: LD_VAR 0 2
48186: PUSH
48187: LD_INT 1
48189: EQUAL
48190: IFFALSE 48223
// result := Replace ( arr , pos [ 1 ] , value ) else
48192: LD_ADDR_VAR 0 4
48196: PUSH
48197: LD_VAR 0 1
48201: PPUSH
48202: LD_VAR 0 2
48206: PUSH
48207: LD_INT 1
48209: ARRAY
48210: PPUSH
48211: LD_VAR 0 3
48215: PPUSH
48216: CALL_OW 1
48220: ST_TO_ADDR
48221: GO 48485
// begin tmp := arr ;
48223: LD_ADDR_VAR 0 6
48227: PUSH
48228: LD_VAR 0 1
48232: ST_TO_ADDR
// s_arr := [ tmp ] ;
48233: LD_ADDR_VAR 0 7
48237: PUSH
48238: LD_VAR 0 6
48242: PUSH
48243: EMPTY
48244: LIST
48245: ST_TO_ADDR
// for i = 1 to pos - 1 do
48246: LD_ADDR_VAR 0 5
48250: PUSH
48251: DOUBLE
48252: LD_INT 1
48254: DEC
48255: ST_TO_ADDR
48256: LD_VAR 0 2
48260: PUSH
48261: LD_INT 1
48263: MINUS
48264: PUSH
48265: FOR_TO
48266: IFFALSE 48311
// begin tmp := tmp [ pos [ i ] ] ;
48268: LD_ADDR_VAR 0 6
48272: PUSH
48273: LD_VAR 0 6
48277: PUSH
48278: LD_VAR 0 2
48282: PUSH
48283: LD_VAR 0 5
48287: ARRAY
48288: ARRAY
48289: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
48290: LD_ADDR_VAR 0 7
48294: PUSH
48295: LD_VAR 0 7
48299: PUSH
48300: LD_VAR 0 6
48304: PUSH
48305: EMPTY
48306: LIST
48307: ADD
48308: ST_TO_ADDR
// end ;
48309: GO 48265
48311: POP
48312: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
48313: LD_ADDR_VAR 0 6
48317: PUSH
48318: LD_VAR 0 6
48322: PPUSH
48323: LD_VAR 0 2
48327: PUSH
48328: LD_VAR 0 2
48332: ARRAY
48333: PPUSH
48334: LD_VAR 0 3
48338: PPUSH
48339: CALL_OW 1
48343: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
48344: LD_ADDR_VAR 0 7
48348: PUSH
48349: LD_VAR 0 7
48353: PPUSH
48354: LD_VAR 0 7
48358: PPUSH
48359: LD_VAR 0 6
48363: PPUSH
48364: CALL_OW 1
48368: ST_TO_ADDR
// for i = s_arr downto 2 do
48369: LD_ADDR_VAR 0 5
48373: PUSH
48374: DOUBLE
48375: LD_VAR 0 7
48379: INC
48380: ST_TO_ADDR
48381: LD_INT 2
48383: PUSH
48384: FOR_DOWNTO
48385: IFFALSE 48469
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
48387: LD_ADDR_VAR 0 6
48391: PUSH
48392: LD_VAR 0 7
48396: PUSH
48397: LD_VAR 0 5
48401: PUSH
48402: LD_INT 1
48404: MINUS
48405: ARRAY
48406: PPUSH
48407: LD_VAR 0 2
48411: PUSH
48412: LD_VAR 0 5
48416: PUSH
48417: LD_INT 1
48419: MINUS
48420: ARRAY
48421: PPUSH
48422: LD_VAR 0 7
48426: PUSH
48427: LD_VAR 0 5
48431: ARRAY
48432: PPUSH
48433: CALL_OW 1
48437: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
48438: LD_ADDR_VAR 0 7
48442: PUSH
48443: LD_VAR 0 7
48447: PPUSH
48448: LD_VAR 0 5
48452: PUSH
48453: LD_INT 1
48455: MINUS
48456: PPUSH
48457: LD_VAR 0 6
48461: PPUSH
48462: CALL_OW 1
48466: ST_TO_ADDR
// end ;
48467: GO 48384
48469: POP
48470: POP
// result := s_arr [ 1 ] ;
48471: LD_ADDR_VAR 0 4
48475: PUSH
48476: LD_VAR 0 7
48480: PUSH
48481: LD_INT 1
48483: ARRAY
48484: ST_TO_ADDR
// end ; end ;
48485: LD_VAR 0 4
48489: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
48490: LD_INT 0
48492: PPUSH
48493: PPUSH
// if not list then
48494: LD_VAR 0 1
48498: NOT
48499: IFFALSE 48503
// exit ;
48501: GO 48594
// i := list [ pos1 ] ;
48503: LD_ADDR_VAR 0 5
48507: PUSH
48508: LD_VAR 0 1
48512: PUSH
48513: LD_VAR 0 2
48517: ARRAY
48518: ST_TO_ADDR
// if not i then
48519: LD_VAR 0 5
48523: NOT
48524: IFFALSE 48528
// exit ;
48526: GO 48594
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
48528: LD_ADDR_VAR 0 1
48532: PUSH
48533: LD_VAR 0 1
48537: PPUSH
48538: LD_VAR 0 2
48542: PPUSH
48543: LD_VAR 0 1
48547: PUSH
48548: LD_VAR 0 3
48552: ARRAY
48553: PPUSH
48554: CALL_OW 1
48558: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
48559: LD_ADDR_VAR 0 1
48563: PUSH
48564: LD_VAR 0 1
48568: PPUSH
48569: LD_VAR 0 3
48573: PPUSH
48574: LD_VAR 0 5
48578: PPUSH
48579: CALL_OW 1
48583: ST_TO_ADDR
// result := list ;
48584: LD_ADDR_VAR 0 4
48588: PUSH
48589: LD_VAR 0 1
48593: ST_TO_ADDR
// end ;
48594: LD_VAR 0 4
48598: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
48599: LD_INT 0
48601: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
48602: LD_ADDR_VAR 0 5
48606: PUSH
48607: LD_VAR 0 1
48611: PPUSH
48612: CALL_OW 250
48616: PPUSH
48617: LD_VAR 0 1
48621: PPUSH
48622: CALL_OW 251
48626: PPUSH
48627: LD_VAR 0 2
48631: PPUSH
48632: LD_VAR 0 3
48636: PPUSH
48637: LD_VAR 0 4
48641: PPUSH
48642: CALL 48652 0 5
48646: ST_TO_ADDR
// end ;
48647: LD_VAR 0 5
48651: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
48652: LD_INT 0
48654: PPUSH
48655: PPUSH
48656: PPUSH
48657: PPUSH
// if not list then
48658: LD_VAR 0 3
48662: NOT
48663: IFFALSE 48667
// exit ;
48665: GO 49055
// result := [ ] ;
48667: LD_ADDR_VAR 0 6
48671: PUSH
48672: EMPTY
48673: ST_TO_ADDR
// for i in list do
48674: LD_ADDR_VAR 0 7
48678: PUSH
48679: LD_VAR 0 3
48683: PUSH
48684: FOR_IN
48685: IFFALSE 48887
// begin tmp := GetDistUnitXY ( i , x , y ) ;
48687: LD_ADDR_VAR 0 9
48691: PUSH
48692: LD_VAR 0 7
48696: PPUSH
48697: LD_VAR 0 1
48701: PPUSH
48702: LD_VAR 0 2
48706: PPUSH
48707: CALL_OW 297
48711: ST_TO_ADDR
// if not result then
48712: LD_VAR 0 6
48716: NOT
48717: IFFALSE 48743
// result := [ [ i , tmp ] ] else
48719: LD_ADDR_VAR 0 6
48723: PUSH
48724: LD_VAR 0 7
48728: PUSH
48729: LD_VAR 0 9
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: EMPTY
48739: LIST
48740: ST_TO_ADDR
48741: GO 48885
// begin if result [ result ] [ 2 ] < tmp then
48743: LD_VAR 0 6
48747: PUSH
48748: LD_VAR 0 6
48752: ARRAY
48753: PUSH
48754: LD_INT 2
48756: ARRAY
48757: PUSH
48758: LD_VAR 0 9
48762: LESS
48763: IFFALSE 48805
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
48765: LD_ADDR_VAR 0 6
48769: PUSH
48770: LD_VAR 0 6
48774: PPUSH
48775: LD_VAR 0 6
48779: PUSH
48780: LD_INT 1
48782: PLUS
48783: PPUSH
48784: LD_VAR 0 7
48788: PUSH
48789: LD_VAR 0 9
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PPUSH
48798: CALL_OW 2
48802: ST_TO_ADDR
48803: GO 48885
// for j = 1 to result do
48805: LD_ADDR_VAR 0 8
48809: PUSH
48810: DOUBLE
48811: LD_INT 1
48813: DEC
48814: ST_TO_ADDR
48815: LD_VAR 0 6
48819: PUSH
48820: FOR_TO
48821: IFFALSE 48883
// begin if tmp < result [ j ] [ 2 ] then
48823: LD_VAR 0 9
48827: PUSH
48828: LD_VAR 0 6
48832: PUSH
48833: LD_VAR 0 8
48837: ARRAY
48838: PUSH
48839: LD_INT 2
48841: ARRAY
48842: LESS
48843: IFFALSE 48881
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48845: LD_ADDR_VAR 0 6
48849: PUSH
48850: LD_VAR 0 6
48854: PPUSH
48855: LD_VAR 0 8
48859: PPUSH
48860: LD_VAR 0 7
48864: PUSH
48865: LD_VAR 0 9
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PPUSH
48874: CALL_OW 2
48878: ST_TO_ADDR
// break ;
48879: GO 48883
// end ; end ;
48881: GO 48820
48883: POP
48884: POP
// end ; end ;
48885: GO 48684
48887: POP
48888: POP
// if result and not asc then
48889: LD_VAR 0 6
48893: PUSH
48894: LD_VAR 0 4
48898: NOT
48899: AND
48900: IFFALSE 48975
// begin tmp := result ;
48902: LD_ADDR_VAR 0 9
48906: PUSH
48907: LD_VAR 0 6
48911: ST_TO_ADDR
// for i = tmp downto 1 do
48912: LD_ADDR_VAR 0 7
48916: PUSH
48917: DOUBLE
48918: LD_VAR 0 9
48922: INC
48923: ST_TO_ADDR
48924: LD_INT 1
48926: PUSH
48927: FOR_DOWNTO
48928: IFFALSE 48973
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
48930: LD_ADDR_VAR 0 6
48934: PUSH
48935: LD_VAR 0 6
48939: PPUSH
48940: LD_VAR 0 9
48944: PUSH
48945: LD_VAR 0 7
48949: MINUS
48950: PUSH
48951: LD_INT 1
48953: PLUS
48954: PPUSH
48955: LD_VAR 0 9
48959: PUSH
48960: LD_VAR 0 7
48964: ARRAY
48965: PPUSH
48966: CALL_OW 1
48970: ST_TO_ADDR
48971: GO 48927
48973: POP
48974: POP
// end ; tmp := [ ] ;
48975: LD_ADDR_VAR 0 9
48979: PUSH
48980: EMPTY
48981: ST_TO_ADDR
// if mode then
48982: LD_VAR 0 5
48986: IFFALSE 49055
// begin for i = 1 to result do
48988: LD_ADDR_VAR 0 7
48992: PUSH
48993: DOUBLE
48994: LD_INT 1
48996: DEC
48997: ST_TO_ADDR
48998: LD_VAR 0 6
49002: PUSH
49003: FOR_TO
49004: IFFALSE 49043
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
49006: LD_ADDR_VAR 0 9
49010: PUSH
49011: LD_VAR 0 9
49015: PPUSH
49016: LD_VAR 0 7
49020: PPUSH
49021: LD_VAR 0 6
49025: PUSH
49026: LD_VAR 0 7
49030: ARRAY
49031: PUSH
49032: LD_INT 1
49034: ARRAY
49035: PPUSH
49036: CALL_OW 1
49040: ST_TO_ADDR
49041: GO 49003
49043: POP
49044: POP
// result := tmp ;
49045: LD_ADDR_VAR 0 6
49049: PUSH
49050: LD_VAR 0 9
49054: ST_TO_ADDR
// end ; end ;
49055: LD_VAR 0 6
49059: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
49060: LD_INT 0
49062: PPUSH
49063: PPUSH
49064: PPUSH
49065: PPUSH
49066: PPUSH
49067: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
49068: LD_ADDR_VAR 0 5
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: EMPTY
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: ST_TO_ADDR
// if not x or not y then
49090: LD_VAR 0 2
49094: NOT
49095: PUSH
49096: LD_VAR 0 3
49100: NOT
49101: OR
49102: IFFALSE 49106
// exit ;
49104: GO 50758
// if not range then
49106: LD_VAR 0 4
49110: NOT
49111: IFFALSE 49121
// range := 10 ;
49113: LD_ADDR_VAR 0 4
49117: PUSH
49118: LD_INT 10
49120: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
49121: LD_ADDR_VAR 0 8
49125: PUSH
49126: LD_INT 81
49128: PUSH
49129: LD_VAR 0 1
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 92
49140: PUSH
49141: LD_VAR 0 2
49145: PUSH
49146: LD_VAR 0 3
49150: PUSH
49151: LD_VAR 0 4
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 3
49164: PUSH
49165: LD_INT 21
49167: PUSH
49168: LD_INT 3
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: LIST
49183: PPUSH
49184: CALL_OW 69
49188: ST_TO_ADDR
// if not tmp then
49189: LD_VAR 0 8
49193: NOT
49194: IFFALSE 49198
// exit ;
49196: GO 50758
// for i in tmp do
49198: LD_ADDR_VAR 0 6
49202: PUSH
49203: LD_VAR 0 8
49207: PUSH
49208: FOR_IN
49209: IFFALSE 50733
// begin points := [ 0 , 0 , 0 ] ;
49211: LD_ADDR_VAR 0 9
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: LIST
49229: ST_TO_ADDR
// bpoints := 1 ;
49230: LD_ADDR_VAR 0 10
49234: PUSH
49235: LD_INT 1
49237: ST_TO_ADDR
// case GetType ( i ) of unit_human :
49238: LD_VAR 0 6
49242: PPUSH
49243: CALL_OW 247
49247: PUSH
49248: LD_INT 1
49250: DOUBLE
49251: EQUAL
49252: IFTRUE 49256
49254: GO 49834
49256: POP
// begin if GetClass ( i ) = 1 then
49257: LD_VAR 0 6
49261: PPUSH
49262: CALL_OW 257
49266: PUSH
49267: LD_INT 1
49269: EQUAL
49270: IFFALSE 49291
// points := [ 10 , 5 , 3 ] ;
49272: LD_ADDR_VAR 0 9
49276: PUSH
49277: LD_INT 10
49279: PUSH
49280: LD_INT 5
49282: PUSH
49283: LD_INT 3
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: LIST
49290: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
49291: LD_VAR 0 6
49295: PPUSH
49296: CALL_OW 257
49300: PUSH
49301: LD_INT 2
49303: PUSH
49304: LD_INT 3
49306: PUSH
49307: LD_INT 4
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: LIST
49314: IN
49315: IFFALSE 49336
// points := [ 3 , 2 , 1 ] ;
49317: LD_ADDR_VAR 0 9
49321: PUSH
49322: LD_INT 3
49324: PUSH
49325: LD_INT 2
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: LIST
49335: ST_TO_ADDR
// if GetClass ( i ) = 5 then
49336: LD_VAR 0 6
49340: PPUSH
49341: CALL_OW 257
49345: PUSH
49346: LD_INT 5
49348: EQUAL
49349: IFFALSE 49370
// points := [ 130 , 5 , 2 ] ;
49351: LD_ADDR_VAR 0 9
49355: PUSH
49356: LD_INT 130
49358: PUSH
49359: LD_INT 5
49361: PUSH
49362: LD_INT 2
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: LIST
49369: ST_TO_ADDR
// if GetClass ( i ) = 8 then
49370: LD_VAR 0 6
49374: PPUSH
49375: CALL_OW 257
49379: PUSH
49380: LD_INT 8
49382: EQUAL
49383: IFFALSE 49404
// points := [ 35 , 35 , 30 ] ;
49385: LD_ADDR_VAR 0 9
49389: PUSH
49390: LD_INT 35
49392: PUSH
49393: LD_INT 35
49395: PUSH
49396: LD_INT 30
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: LIST
49403: ST_TO_ADDR
// if GetClass ( i ) = 9 then
49404: LD_VAR 0 6
49408: PPUSH
49409: CALL_OW 257
49413: PUSH
49414: LD_INT 9
49416: EQUAL
49417: IFFALSE 49438
// points := [ 20 , 55 , 40 ] ;
49419: LD_ADDR_VAR 0 9
49423: PUSH
49424: LD_INT 20
49426: PUSH
49427: LD_INT 55
49429: PUSH
49430: LD_INT 40
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: LIST
49437: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
49438: LD_VAR 0 6
49442: PPUSH
49443: CALL_OW 257
49447: PUSH
49448: LD_INT 12
49450: PUSH
49451: LD_INT 16
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: IN
49458: IFFALSE 49479
// points := [ 5 , 3 , 2 ] ;
49460: LD_ADDR_VAR 0 9
49464: PUSH
49465: LD_INT 5
49467: PUSH
49468: LD_INT 3
49470: PUSH
49471: LD_INT 2
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: LIST
49478: ST_TO_ADDR
// if GetClass ( i ) = 17 then
49479: LD_VAR 0 6
49483: PPUSH
49484: CALL_OW 257
49488: PUSH
49489: LD_INT 17
49491: EQUAL
49492: IFFALSE 49513
// points := [ 100 , 50 , 75 ] ;
49494: LD_ADDR_VAR 0 9
49498: PUSH
49499: LD_INT 100
49501: PUSH
49502: LD_INT 50
49504: PUSH
49505: LD_INT 75
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: LIST
49512: ST_TO_ADDR
// if GetClass ( i ) = 15 then
49513: LD_VAR 0 6
49517: PPUSH
49518: CALL_OW 257
49522: PUSH
49523: LD_INT 15
49525: EQUAL
49526: IFFALSE 49547
// points := [ 10 , 5 , 3 ] ;
49528: LD_ADDR_VAR 0 9
49532: PUSH
49533: LD_INT 10
49535: PUSH
49536: LD_INT 5
49538: PUSH
49539: LD_INT 3
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: LIST
49546: ST_TO_ADDR
// if GetClass ( i ) = 14 then
49547: LD_VAR 0 6
49551: PPUSH
49552: CALL_OW 257
49556: PUSH
49557: LD_INT 14
49559: EQUAL
49560: IFFALSE 49581
// points := [ 10 , 0 , 0 ] ;
49562: LD_ADDR_VAR 0 9
49566: PUSH
49567: LD_INT 10
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: LIST
49580: ST_TO_ADDR
// if GetClass ( i ) = 11 then
49581: LD_VAR 0 6
49585: PPUSH
49586: CALL_OW 257
49590: PUSH
49591: LD_INT 11
49593: EQUAL
49594: IFFALSE 49615
// points := [ 30 , 10 , 5 ] ;
49596: LD_ADDR_VAR 0 9
49600: PUSH
49601: LD_INT 30
49603: PUSH
49604: LD_INT 10
49606: PUSH
49607: LD_INT 5
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: LIST
49614: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
49615: LD_VAR 0 1
49619: PPUSH
49620: LD_INT 5
49622: PPUSH
49623: CALL_OW 321
49627: PUSH
49628: LD_INT 2
49630: EQUAL
49631: IFFALSE 49648
// bpoints := bpoints * 1.8 ;
49633: LD_ADDR_VAR 0 10
49637: PUSH
49638: LD_VAR 0 10
49642: PUSH
49643: LD_REAL  1.80000000000000E+0000
49646: MUL
49647: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
49648: LD_VAR 0 6
49652: PPUSH
49653: CALL_OW 257
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: LD_INT 2
49663: PUSH
49664: LD_INT 3
49666: PUSH
49667: LD_INT 4
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: IN
49676: PUSH
49677: LD_VAR 0 1
49681: PPUSH
49682: LD_INT 51
49684: PPUSH
49685: CALL_OW 321
49689: PUSH
49690: LD_INT 2
49692: EQUAL
49693: AND
49694: IFFALSE 49711
// bpoints := bpoints * 1.2 ;
49696: LD_ADDR_VAR 0 10
49700: PUSH
49701: LD_VAR 0 10
49705: PUSH
49706: LD_REAL  1.20000000000000E+0000
49709: MUL
49710: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
49711: LD_VAR 0 6
49715: PPUSH
49716: CALL_OW 257
49720: PUSH
49721: LD_INT 5
49723: PUSH
49724: LD_INT 7
49726: PUSH
49727: LD_INT 9
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: LIST
49734: IN
49735: PUSH
49736: LD_VAR 0 1
49740: PPUSH
49741: LD_INT 52
49743: PPUSH
49744: CALL_OW 321
49748: PUSH
49749: LD_INT 2
49751: EQUAL
49752: AND
49753: IFFALSE 49770
// bpoints := bpoints * 1.5 ;
49755: LD_ADDR_VAR 0 10
49759: PUSH
49760: LD_VAR 0 10
49764: PUSH
49765: LD_REAL  1.50000000000000E+0000
49768: MUL
49769: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
49770: LD_VAR 0 1
49774: PPUSH
49775: LD_INT 66
49777: PPUSH
49778: CALL_OW 321
49782: PUSH
49783: LD_INT 2
49785: EQUAL
49786: IFFALSE 49803
// bpoints := bpoints * 1.1 ;
49788: LD_ADDR_VAR 0 10
49792: PUSH
49793: LD_VAR 0 10
49797: PUSH
49798: LD_REAL  1.10000000000000E+0000
49801: MUL
49802: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
49803: LD_ADDR_VAR 0 10
49807: PUSH
49808: LD_VAR 0 10
49812: PUSH
49813: LD_VAR 0 6
49817: PPUSH
49818: LD_INT 1
49820: PPUSH
49821: CALL_OW 259
49825: PUSH
49826: LD_REAL  1.15000000000000E+0000
49829: MUL
49830: MUL
49831: ST_TO_ADDR
// end ; unit_vehicle :
49832: GO 50662
49834: LD_INT 2
49836: DOUBLE
49837: EQUAL
49838: IFTRUE 49842
49840: GO 50650
49842: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
49843: LD_VAR 0 6
49847: PPUSH
49848: CALL_OW 264
49852: PUSH
49853: LD_INT 2
49855: PUSH
49856: LD_INT 42
49858: PUSH
49859: LD_INT 24
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: LIST
49866: IN
49867: IFFALSE 49888
// points := [ 25 , 5 , 3 ] ;
49869: LD_ADDR_VAR 0 9
49873: PUSH
49874: LD_INT 25
49876: PUSH
49877: LD_INT 5
49879: PUSH
49880: LD_INT 3
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: LIST
49887: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
49888: LD_VAR 0 6
49892: PPUSH
49893: CALL_OW 264
49897: PUSH
49898: LD_INT 4
49900: PUSH
49901: LD_INT 43
49903: PUSH
49904: LD_INT 25
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: LIST
49911: IN
49912: IFFALSE 49933
// points := [ 40 , 15 , 5 ] ;
49914: LD_ADDR_VAR 0 9
49918: PUSH
49919: LD_INT 40
49921: PUSH
49922: LD_INT 15
49924: PUSH
49925: LD_INT 5
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: LIST
49932: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
49933: LD_VAR 0 6
49937: PPUSH
49938: CALL_OW 264
49942: PUSH
49943: LD_INT 3
49945: PUSH
49946: LD_INT 23
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: IN
49953: IFFALSE 49974
// points := [ 7 , 25 , 8 ] ;
49955: LD_ADDR_VAR 0 9
49959: PUSH
49960: LD_INT 7
49962: PUSH
49963: LD_INT 25
49965: PUSH
49966: LD_INT 8
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: LIST
49973: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
49974: LD_VAR 0 6
49978: PPUSH
49979: CALL_OW 264
49983: PUSH
49984: LD_INT 5
49986: PUSH
49987: LD_INT 27
49989: PUSH
49990: LD_INT 44
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: LIST
49997: IN
49998: IFFALSE 50019
// points := [ 14 , 50 , 16 ] ;
50000: LD_ADDR_VAR 0 9
50004: PUSH
50005: LD_INT 14
50007: PUSH
50008: LD_INT 50
50010: PUSH
50011: LD_INT 16
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: LIST
50018: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
50019: LD_VAR 0 6
50023: PPUSH
50024: CALL_OW 264
50028: PUSH
50029: LD_INT 6
50031: PUSH
50032: LD_INT 46
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: IN
50039: IFFALSE 50060
// points := [ 32 , 120 , 70 ] ;
50041: LD_ADDR_VAR 0 9
50045: PUSH
50046: LD_INT 32
50048: PUSH
50049: LD_INT 120
50051: PUSH
50052: LD_INT 70
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: LIST
50059: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
50060: LD_VAR 0 6
50064: PPUSH
50065: CALL_OW 264
50069: PUSH
50070: LD_INT 7
50072: PUSH
50073: LD_INT 28
50075: PUSH
50076: LD_INT 45
50078: PUSH
50079: LD_EXP 70
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: IN
50090: IFFALSE 50111
// points := [ 35 , 20 , 45 ] ;
50092: LD_ADDR_VAR 0 9
50096: PUSH
50097: LD_INT 35
50099: PUSH
50100: LD_INT 20
50102: PUSH
50103: LD_INT 45
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: LIST
50110: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
50111: LD_VAR 0 6
50115: PPUSH
50116: CALL_OW 264
50120: PUSH
50121: LD_INT 47
50123: PUSH
50124: EMPTY
50125: LIST
50126: IN
50127: IFFALSE 50148
// points := [ 67 , 45 , 75 ] ;
50129: LD_ADDR_VAR 0 9
50133: PUSH
50134: LD_INT 67
50136: PUSH
50137: LD_INT 45
50139: PUSH
50140: LD_INT 75
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: LIST
50147: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
50148: LD_VAR 0 6
50152: PPUSH
50153: CALL_OW 264
50157: PUSH
50158: LD_INT 26
50160: PUSH
50161: EMPTY
50162: LIST
50163: IN
50164: IFFALSE 50185
// points := [ 120 , 30 , 80 ] ;
50166: LD_ADDR_VAR 0 9
50170: PUSH
50171: LD_INT 120
50173: PUSH
50174: LD_INT 30
50176: PUSH
50177: LD_INT 80
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: LIST
50184: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
50185: LD_VAR 0 6
50189: PPUSH
50190: CALL_OW 264
50194: PUSH
50195: LD_INT 22
50197: PUSH
50198: EMPTY
50199: LIST
50200: IN
50201: IFFALSE 50222
// points := [ 40 , 1 , 1 ] ;
50203: LD_ADDR_VAR 0 9
50207: PUSH
50208: LD_INT 40
50210: PUSH
50211: LD_INT 1
50213: PUSH
50214: LD_INT 1
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: LIST
50221: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
50222: LD_VAR 0 6
50226: PPUSH
50227: CALL_OW 264
50231: PUSH
50232: LD_INT 29
50234: PUSH
50235: EMPTY
50236: LIST
50237: IN
50238: IFFALSE 50259
// points := [ 70 , 200 , 400 ] ;
50240: LD_ADDR_VAR 0 9
50244: PUSH
50245: LD_INT 70
50247: PUSH
50248: LD_INT 200
50250: PUSH
50251: LD_INT 400
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: LIST
50258: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
50259: LD_VAR 0 6
50263: PPUSH
50264: CALL_OW 264
50268: PUSH
50269: LD_INT 14
50271: PUSH
50272: LD_INT 53
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: IN
50279: IFFALSE 50300
// points := [ 40 , 10 , 20 ] ;
50281: LD_ADDR_VAR 0 9
50285: PUSH
50286: LD_INT 40
50288: PUSH
50289: LD_INT 10
50291: PUSH
50292: LD_INT 20
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: LIST
50299: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
50300: LD_VAR 0 6
50304: PPUSH
50305: CALL_OW 264
50309: PUSH
50310: LD_INT 9
50312: PUSH
50313: EMPTY
50314: LIST
50315: IN
50316: IFFALSE 50337
// points := [ 5 , 70 , 20 ] ;
50318: LD_ADDR_VAR 0 9
50322: PUSH
50323: LD_INT 5
50325: PUSH
50326: LD_INT 70
50328: PUSH
50329: LD_INT 20
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: LIST
50336: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
50337: LD_VAR 0 6
50341: PPUSH
50342: CALL_OW 264
50346: PUSH
50347: LD_INT 10
50349: PUSH
50350: EMPTY
50351: LIST
50352: IN
50353: IFFALSE 50374
// points := [ 35 , 110 , 70 ] ;
50355: LD_ADDR_VAR 0 9
50359: PUSH
50360: LD_INT 35
50362: PUSH
50363: LD_INT 110
50365: PUSH
50366: LD_INT 70
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: LIST
50373: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
50374: LD_VAR 0 6
50378: PPUSH
50379: CALL_OW 265
50383: PUSH
50384: LD_INT 25
50386: EQUAL
50387: IFFALSE 50408
// points := [ 80 , 65 , 100 ] ;
50389: LD_ADDR_VAR 0 9
50393: PUSH
50394: LD_INT 80
50396: PUSH
50397: LD_INT 65
50399: PUSH
50400: LD_INT 100
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: LIST
50407: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
50408: LD_VAR 0 6
50412: PPUSH
50413: CALL_OW 263
50417: PUSH
50418: LD_INT 1
50420: EQUAL
50421: IFFALSE 50456
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
50423: LD_ADDR_VAR 0 10
50427: PUSH
50428: LD_VAR 0 10
50432: PUSH
50433: LD_VAR 0 6
50437: PPUSH
50438: CALL_OW 311
50442: PPUSH
50443: LD_INT 3
50445: PPUSH
50446: CALL_OW 259
50450: PUSH
50451: LD_INT 4
50453: MUL
50454: MUL
50455: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
50456: LD_VAR 0 6
50460: PPUSH
50461: CALL_OW 263
50465: PUSH
50466: LD_INT 2
50468: EQUAL
50469: IFFALSE 50520
// begin j := IsControledBy ( i ) ;
50471: LD_ADDR_VAR 0 7
50475: PUSH
50476: LD_VAR 0 6
50480: PPUSH
50481: CALL_OW 312
50485: ST_TO_ADDR
// if j then
50486: LD_VAR 0 7
50490: IFFALSE 50520
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
50492: LD_ADDR_VAR 0 10
50496: PUSH
50497: LD_VAR 0 10
50501: PUSH
50502: LD_VAR 0 7
50506: PPUSH
50507: LD_INT 3
50509: PPUSH
50510: CALL_OW 259
50514: PUSH
50515: LD_INT 3
50517: MUL
50518: MUL
50519: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
50520: LD_VAR 0 6
50524: PPUSH
50525: CALL_OW 264
50529: PUSH
50530: LD_INT 5
50532: PUSH
50533: LD_INT 6
50535: PUSH
50536: LD_INT 46
50538: PUSH
50539: LD_INT 44
50541: PUSH
50542: LD_INT 47
50544: PUSH
50545: LD_INT 45
50547: PUSH
50548: LD_INT 28
50550: PUSH
50551: LD_INT 7
50553: PUSH
50554: LD_INT 27
50556: PUSH
50557: LD_INT 29
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: IN
50572: PUSH
50573: LD_VAR 0 1
50577: PPUSH
50578: LD_INT 52
50580: PPUSH
50581: CALL_OW 321
50585: PUSH
50586: LD_INT 2
50588: EQUAL
50589: AND
50590: IFFALSE 50607
// bpoints := bpoints * 1.2 ;
50592: LD_ADDR_VAR 0 10
50596: PUSH
50597: LD_VAR 0 10
50601: PUSH
50602: LD_REAL  1.20000000000000E+0000
50605: MUL
50606: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
50607: LD_VAR 0 6
50611: PPUSH
50612: CALL_OW 264
50616: PUSH
50617: LD_INT 6
50619: PUSH
50620: LD_INT 46
50622: PUSH
50623: LD_INT 47
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: LIST
50630: IN
50631: IFFALSE 50648
// bpoints := bpoints * 1.2 ;
50633: LD_ADDR_VAR 0 10
50637: PUSH
50638: LD_VAR 0 10
50642: PUSH
50643: LD_REAL  1.20000000000000E+0000
50646: MUL
50647: ST_TO_ADDR
// end ; unit_building :
50648: GO 50662
50650: LD_INT 3
50652: DOUBLE
50653: EQUAL
50654: IFTRUE 50658
50656: GO 50661
50658: POP
// ; end ;
50659: GO 50662
50661: POP
// for j = 1 to 3 do
50662: LD_ADDR_VAR 0 7
50666: PUSH
50667: DOUBLE
50668: LD_INT 1
50670: DEC
50671: ST_TO_ADDR
50672: LD_INT 3
50674: PUSH
50675: FOR_TO
50676: IFFALSE 50729
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
50678: LD_ADDR_VAR 0 5
50682: PUSH
50683: LD_VAR 0 5
50687: PPUSH
50688: LD_VAR 0 7
50692: PPUSH
50693: LD_VAR 0 5
50697: PUSH
50698: LD_VAR 0 7
50702: ARRAY
50703: PUSH
50704: LD_VAR 0 9
50708: PUSH
50709: LD_VAR 0 7
50713: ARRAY
50714: PUSH
50715: LD_VAR 0 10
50719: MUL
50720: PLUS
50721: PPUSH
50722: CALL_OW 1
50726: ST_TO_ADDR
50727: GO 50675
50729: POP
50730: POP
// end ;
50731: GO 49208
50733: POP
50734: POP
// result := Replace ( result , 4 , tmp ) ;
50735: LD_ADDR_VAR 0 5
50739: PUSH
50740: LD_VAR 0 5
50744: PPUSH
50745: LD_INT 4
50747: PPUSH
50748: LD_VAR 0 8
50752: PPUSH
50753: CALL_OW 1
50757: ST_TO_ADDR
// end ;
50758: LD_VAR 0 5
50762: RET
// export function DangerAtRange ( unit , range ) ; begin
50763: LD_INT 0
50765: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
50766: LD_ADDR_VAR 0 3
50770: PUSH
50771: LD_VAR 0 1
50775: PPUSH
50776: CALL_OW 255
50780: PPUSH
50781: LD_VAR 0 1
50785: PPUSH
50786: CALL_OW 250
50790: PPUSH
50791: LD_VAR 0 1
50795: PPUSH
50796: CALL_OW 251
50800: PPUSH
50801: LD_VAR 0 2
50805: PPUSH
50806: CALL 49060 0 4
50810: ST_TO_ADDR
// end ;
50811: LD_VAR 0 3
50815: RET
// export function DangerInArea ( side , area ) ; begin
50816: LD_INT 0
50818: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
50819: LD_ADDR_VAR 0 3
50823: PUSH
50824: LD_VAR 0 2
50828: PPUSH
50829: LD_INT 81
50831: PUSH
50832: LD_VAR 0 1
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PPUSH
50841: CALL_OW 70
50845: ST_TO_ADDR
// end ;
50846: LD_VAR 0 3
50850: RET
// export function IsExtension ( b ) ; begin
50851: LD_INT 0
50853: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
50854: LD_ADDR_VAR 0 2
50858: PUSH
50859: LD_VAR 0 1
50863: PUSH
50864: LD_INT 23
50866: PUSH
50867: LD_INT 20
50869: PUSH
50870: LD_INT 22
50872: PUSH
50873: LD_INT 17
50875: PUSH
50876: LD_INT 24
50878: PUSH
50879: LD_INT 21
50881: PUSH
50882: LD_INT 19
50884: PUSH
50885: LD_INT 16
50887: PUSH
50888: LD_INT 25
50890: PUSH
50891: LD_INT 18
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: IN
50906: ST_TO_ADDR
// end ;
50907: LD_VAR 0 2
50911: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
50912: LD_INT 0
50914: PPUSH
50915: PPUSH
50916: PPUSH
// result := [ ] ;
50917: LD_ADDR_VAR 0 4
50921: PUSH
50922: EMPTY
50923: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
50924: LD_ADDR_VAR 0 5
50928: PUSH
50929: LD_VAR 0 2
50933: PPUSH
50934: LD_INT 21
50936: PUSH
50937: LD_INT 3
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PPUSH
50944: CALL_OW 70
50948: ST_TO_ADDR
// if not tmp then
50949: LD_VAR 0 5
50953: NOT
50954: IFFALSE 50958
// exit ;
50956: GO 51022
// if checkLink then
50958: LD_VAR 0 3
50962: IFFALSE 51012
// begin for i in tmp do
50964: LD_ADDR_VAR 0 6
50968: PUSH
50969: LD_VAR 0 5
50973: PUSH
50974: FOR_IN
50975: IFFALSE 51010
// if GetBase ( i ) <> base then
50977: LD_VAR 0 6
50981: PPUSH
50982: CALL_OW 274
50986: PUSH
50987: LD_VAR 0 1
50991: NONEQUAL
50992: IFFALSE 51008
// ComLinkToBase ( base , i ) ;
50994: LD_VAR 0 1
50998: PPUSH
50999: LD_VAR 0 6
51003: PPUSH
51004: CALL_OW 169
51008: GO 50974
51010: POP
51011: POP
// end ; result := tmp ;
51012: LD_ADDR_VAR 0 4
51016: PUSH
51017: LD_VAR 0 5
51021: ST_TO_ADDR
// end ;
51022: LD_VAR 0 4
51026: RET
// export function ComComplete ( units , b ) ; var i ; begin
51027: LD_INT 0
51029: PPUSH
51030: PPUSH
// if not units then
51031: LD_VAR 0 1
51035: NOT
51036: IFFALSE 51040
// exit ;
51038: GO 51130
// for i in units do
51040: LD_ADDR_VAR 0 4
51044: PUSH
51045: LD_VAR 0 1
51049: PUSH
51050: FOR_IN
51051: IFFALSE 51128
// if BuildingStatus ( b ) = bs_build then
51053: LD_VAR 0 2
51057: PPUSH
51058: CALL_OW 461
51062: PUSH
51063: LD_INT 1
51065: EQUAL
51066: IFFALSE 51126
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
51068: LD_VAR 0 4
51072: PPUSH
51073: LD_STRING h
51075: PUSH
51076: LD_VAR 0 2
51080: PPUSH
51081: CALL_OW 250
51085: PUSH
51086: LD_VAR 0 2
51090: PPUSH
51091: CALL_OW 251
51095: PUSH
51096: LD_VAR 0 2
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: LD_INT 0
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: PUSH
51119: EMPTY
51120: LIST
51121: PPUSH
51122: CALL_OW 446
51126: GO 51050
51128: POP
51129: POP
// end ;
51130: LD_VAR 0 3
51134: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
51135: LD_INT 0
51137: PPUSH
51138: PPUSH
51139: PPUSH
51140: PPUSH
51141: PPUSH
51142: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
51143: LD_VAR 0 1
51147: NOT
51148: PUSH
51149: LD_VAR 0 1
51153: PPUSH
51154: CALL_OW 263
51158: PUSH
51159: LD_INT 2
51161: NONEQUAL
51162: OR
51163: IFFALSE 51167
// exit ;
51165: GO 51483
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
51167: LD_ADDR_VAR 0 6
51171: PUSH
51172: LD_INT 22
51174: PUSH
51175: LD_VAR 0 1
51179: PPUSH
51180: CALL_OW 255
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 2
51191: PUSH
51192: LD_INT 30
51194: PUSH
51195: LD_INT 36
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 34
51204: PUSH
51205: LD_INT 31
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: LIST
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PPUSH
51221: CALL_OW 69
51225: ST_TO_ADDR
// if not tmp then
51226: LD_VAR 0 6
51230: NOT
51231: IFFALSE 51235
// exit ;
51233: GO 51483
// result := [ ] ;
51235: LD_ADDR_VAR 0 2
51239: PUSH
51240: EMPTY
51241: ST_TO_ADDR
// for i in tmp do
51242: LD_ADDR_VAR 0 3
51246: PUSH
51247: LD_VAR 0 6
51251: PUSH
51252: FOR_IN
51253: IFFALSE 51324
// begin t := UnitsInside ( i ) ;
51255: LD_ADDR_VAR 0 4
51259: PUSH
51260: LD_VAR 0 3
51264: PPUSH
51265: CALL_OW 313
51269: ST_TO_ADDR
// if t then
51270: LD_VAR 0 4
51274: IFFALSE 51322
// for j in t do
51276: LD_ADDR_VAR 0 7
51280: PUSH
51281: LD_VAR 0 4
51285: PUSH
51286: FOR_IN
51287: IFFALSE 51320
// result := Replace ( result , result + 1 , j ) ;
51289: LD_ADDR_VAR 0 2
51293: PUSH
51294: LD_VAR 0 2
51298: PPUSH
51299: LD_VAR 0 2
51303: PUSH
51304: LD_INT 1
51306: PLUS
51307: PPUSH
51308: LD_VAR 0 7
51312: PPUSH
51313: CALL_OW 1
51317: ST_TO_ADDR
51318: GO 51286
51320: POP
51321: POP
// end ;
51322: GO 51252
51324: POP
51325: POP
// if not result then
51326: LD_VAR 0 2
51330: NOT
51331: IFFALSE 51335
// exit ;
51333: GO 51483
// mech := result [ 1 ] ;
51335: LD_ADDR_VAR 0 5
51339: PUSH
51340: LD_VAR 0 2
51344: PUSH
51345: LD_INT 1
51347: ARRAY
51348: ST_TO_ADDR
// if result > 1 then
51349: LD_VAR 0 2
51353: PUSH
51354: LD_INT 1
51356: GREATER
51357: IFFALSE 51469
// begin for i = 2 to result do
51359: LD_ADDR_VAR 0 3
51363: PUSH
51364: DOUBLE
51365: LD_INT 2
51367: DEC
51368: ST_TO_ADDR
51369: LD_VAR 0 2
51373: PUSH
51374: FOR_TO
51375: IFFALSE 51467
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
51377: LD_ADDR_VAR 0 4
51381: PUSH
51382: LD_VAR 0 2
51386: PUSH
51387: LD_VAR 0 3
51391: ARRAY
51392: PPUSH
51393: LD_INT 3
51395: PPUSH
51396: CALL_OW 259
51400: PUSH
51401: LD_VAR 0 2
51405: PUSH
51406: LD_VAR 0 3
51410: ARRAY
51411: PPUSH
51412: CALL_OW 432
51416: MINUS
51417: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
51418: LD_VAR 0 4
51422: PUSH
51423: LD_VAR 0 5
51427: PPUSH
51428: LD_INT 3
51430: PPUSH
51431: CALL_OW 259
51435: PUSH
51436: LD_VAR 0 5
51440: PPUSH
51441: CALL_OW 432
51445: MINUS
51446: GREATEREQUAL
51447: IFFALSE 51465
// mech := result [ i ] ;
51449: LD_ADDR_VAR 0 5
51453: PUSH
51454: LD_VAR 0 2
51458: PUSH
51459: LD_VAR 0 3
51463: ARRAY
51464: ST_TO_ADDR
// end ;
51465: GO 51374
51467: POP
51468: POP
// end ; ComLinkTo ( vehicle , mech ) ;
51469: LD_VAR 0 1
51473: PPUSH
51474: LD_VAR 0 5
51478: PPUSH
51479: CALL_OW 135
// end ;
51483: LD_VAR 0 2
51487: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
51488: LD_INT 0
51490: PPUSH
51491: PPUSH
51492: PPUSH
51493: PPUSH
51494: PPUSH
51495: PPUSH
51496: PPUSH
51497: PPUSH
51498: PPUSH
51499: PPUSH
51500: PPUSH
51501: PPUSH
51502: PPUSH
// result := [ ] ;
51503: LD_ADDR_VAR 0 7
51507: PUSH
51508: EMPTY
51509: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
51510: LD_VAR 0 1
51514: PPUSH
51515: CALL_OW 266
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: IN
51530: NOT
51531: IFFALSE 51535
// exit ;
51533: GO 53169
// if name then
51535: LD_VAR 0 3
51539: IFFALSE 51555
// SetBName ( base_dep , name ) ;
51541: LD_VAR 0 1
51545: PPUSH
51546: LD_VAR 0 3
51550: PPUSH
51551: CALL_OW 500
// base := GetBase ( base_dep ) ;
51555: LD_ADDR_VAR 0 15
51559: PUSH
51560: LD_VAR 0 1
51564: PPUSH
51565: CALL_OW 274
51569: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
51570: LD_ADDR_VAR 0 16
51574: PUSH
51575: LD_VAR 0 1
51579: PPUSH
51580: CALL_OW 255
51584: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
51585: LD_ADDR_VAR 0 17
51589: PUSH
51590: LD_VAR 0 1
51594: PPUSH
51595: CALL_OW 248
51599: ST_TO_ADDR
// if sources then
51600: LD_VAR 0 5
51604: IFFALSE 51651
// for i = 1 to 3 do
51606: LD_ADDR_VAR 0 8
51610: PUSH
51611: DOUBLE
51612: LD_INT 1
51614: DEC
51615: ST_TO_ADDR
51616: LD_INT 3
51618: PUSH
51619: FOR_TO
51620: IFFALSE 51649
// AddResourceType ( base , i , sources [ i ] ) ;
51622: LD_VAR 0 15
51626: PPUSH
51627: LD_VAR 0 8
51631: PPUSH
51632: LD_VAR 0 5
51636: PUSH
51637: LD_VAR 0 8
51641: ARRAY
51642: PPUSH
51643: CALL_OW 276
51647: GO 51619
51649: POP
51650: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
51651: LD_ADDR_VAR 0 18
51655: PUSH
51656: LD_VAR 0 15
51660: PPUSH
51661: LD_VAR 0 2
51665: PPUSH
51666: LD_INT 1
51668: PPUSH
51669: CALL 50912 0 3
51673: ST_TO_ADDR
// InitHc ;
51674: CALL_OW 19
// InitUc ;
51678: CALL_OW 18
// uc_side := side ;
51682: LD_ADDR_OWVAR 20
51686: PUSH
51687: LD_VAR 0 16
51691: ST_TO_ADDR
// uc_nation := nation ;
51692: LD_ADDR_OWVAR 21
51696: PUSH
51697: LD_VAR 0 17
51701: ST_TO_ADDR
// if buildings then
51702: LD_VAR 0 18
51706: IFFALSE 53028
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
51708: LD_ADDR_VAR 0 19
51712: PUSH
51713: LD_VAR 0 18
51717: PPUSH
51718: LD_INT 2
51720: PUSH
51721: LD_INT 30
51723: PUSH
51724: LD_INT 29
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 30
51733: PUSH
51734: LD_INT 30
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: LIST
51745: PPUSH
51746: CALL_OW 72
51750: ST_TO_ADDR
// if tmp then
51751: LD_VAR 0 19
51755: IFFALSE 51803
// for i in tmp do
51757: LD_ADDR_VAR 0 8
51761: PUSH
51762: LD_VAR 0 19
51766: PUSH
51767: FOR_IN
51768: IFFALSE 51801
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
51770: LD_VAR 0 8
51774: PPUSH
51775: CALL_OW 250
51779: PPUSH
51780: LD_VAR 0 8
51784: PPUSH
51785: CALL_OW 251
51789: PPUSH
51790: LD_VAR 0 16
51794: PPUSH
51795: CALL_OW 441
51799: GO 51767
51801: POP
51802: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
51803: LD_VAR 0 18
51807: PPUSH
51808: LD_INT 2
51810: PUSH
51811: LD_INT 30
51813: PUSH
51814: LD_INT 32
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 30
51823: PUSH
51824: LD_INT 33
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: LIST
51835: PPUSH
51836: CALL_OW 72
51840: IFFALSE 51928
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
51842: LD_ADDR_VAR 0 8
51846: PUSH
51847: LD_VAR 0 18
51851: PPUSH
51852: LD_INT 2
51854: PUSH
51855: LD_INT 30
51857: PUSH
51858: LD_INT 32
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 30
51867: PUSH
51868: LD_INT 33
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: LIST
51879: PPUSH
51880: CALL_OW 72
51884: PUSH
51885: FOR_IN
51886: IFFALSE 51926
// begin if not GetBWeapon ( i ) then
51888: LD_VAR 0 8
51892: PPUSH
51893: CALL_OW 269
51897: NOT
51898: IFFALSE 51924
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
51900: LD_VAR 0 8
51904: PPUSH
51905: LD_VAR 0 8
51909: PPUSH
51910: LD_VAR 0 2
51914: PPUSH
51915: CALL 53174 0 2
51919: PPUSH
51920: CALL_OW 431
// end ;
51924: GO 51885
51926: POP
51927: POP
// end ; for i = 1 to personel do
51928: LD_ADDR_VAR 0 8
51932: PUSH
51933: DOUBLE
51934: LD_INT 1
51936: DEC
51937: ST_TO_ADDR
51938: LD_VAR 0 6
51942: PUSH
51943: FOR_TO
51944: IFFALSE 53008
// begin if i > 4 then
51946: LD_VAR 0 8
51950: PUSH
51951: LD_INT 4
51953: GREATER
51954: IFFALSE 51958
// break ;
51956: GO 53008
// case i of 1 :
51958: LD_VAR 0 8
51962: PUSH
51963: LD_INT 1
51965: DOUBLE
51966: EQUAL
51967: IFTRUE 51971
51969: GO 52051
51971: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
51972: LD_ADDR_VAR 0 12
51976: PUSH
51977: LD_VAR 0 18
51981: PPUSH
51982: LD_INT 22
51984: PUSH
51985: LD_VAR 0 16
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 58
51996: PUSH
51997: EMPTY
51998: LIST
51999: PUSH
52000: LD_INT 2
52002: PUSH
52003: LD_INT 30
52005: PUSH
52006: LD_INT 32
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 30
52015: PUSH
52016: LD_INT 4
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 30
52025: PUSH
52026: LD_INT 5
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: LIST
52043: PPUSH
52044: CALL_OW 72
52048: ST_TO_ADDR
52049: GO 52273
52051: LD_INT 2
52053: DOUBLE
52054: EQUAL
52055: IFTRUE 52059
52057: GO 52121
52059: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
52060: LD_ADDR_VAR 0 12
52064: PUSH
52065: LD_VAR 0 18
52069: PPUSH
52070: LD_INT 22
52072: PUSH
52073: LD_VAR 0 16
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 2
52084: PUSH
52085: LD_INT 30
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 30
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: LIST
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PPUSH
52114: CALL_OW 72
52118: ST_TO_ADDR
52119: GO 52273
52121: LD_INT 3
52123: DOUBLE
52124: EQUAL
52125: IFTRUE 52129
52127: GO 52191
52129: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
52130: LD_ADDR_VAR 0 12
52134: PUSH
52135: LD_VAR 0 18
52139: PPUSH
52140: LD_INT 22
52142: PUSH
52143: LD_VAR 0 16
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 2
52154: PUSH
52155: LD_INT 30
52157: PUSH
52158: LD_INT 2
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 30
52167: PUSH
52168: LD_INT 3
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: LIST
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PPUSH
52184: CALL_OW 72
52188: ST_TO_ADDR
52189: GO 52273
52191: LD_INT 4
52193: DOUBLE
52194: EQUAL
52195: IFTRUE 52199
52197: GO 52272
52199: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
52200: LD_ADDR_VAR 0 12
52204: PUSH
52205: LD_VAR 0 18
52209: PPUSH
52210: LD_INT 22
52212: PUSH
52213: LD_VAR 0 16
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 2
52224: PUSH
52225: LD_INT 30
52227: PUSH
52228: LD_INT 6
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 30
52237: PUSH
52238: LD_INT 7
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 30
52247: PUSH
52248: LD_INT 8
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PPUSH
52265: CALL_OW 72
52269: ST_TO_ADDR
52270: GO 52273
52272: POP
// if i = 1 then
52273: LD_VAR 0 8
52277: PUSH
52278: LD_INT 1
52280: EQUAL
52281: IFFALSE 52392
// begin tmp := [ ] ;
52283: LD_ADDR_VAR 0 19
52287: PUSH
52288: EMPTY
52289: ST_TO_ADDR
// for j in f do
52290: LD_ADDR_VAR 0 9
52294: PUSH
52295: LD_VAR 0 12
52299: PUSH
52300: FOR_IN
52301: IFFALSE 52374
// if GetBType ( j ) = b_bunker then
52303: LD_VAR 0 9
52307: PPUSH
52308: CALL_OW 266
52312: PUSH
52313: LD_INT 32
52315: EQUAL
52316: IFFALSE 52343
// tmp := Insert ( tmp , 1 , j ) else
52318: LD_ADDR_VAR 0 19
52322: PUSH
52323: LD_VAR 0 19
52327: PPUSH
52328: LD_INT 1
52330: PPUSH
52331: LD_VAR 0 9
52335: PPUSH
52336: CALL_OW 2
52340: ST_TO_ADDR
52341: GO 52372
// tmp := Insert ( tmp , tmp + 1 , j ) ;
52343: LD_ADDR_VAR 0 19
52347: PUSH
52348: LD_VAR 0 19
52352: PPUSH
52353: LD_VAR 0 19
52357: PUSH
52358: LD_INT 1
52360: PLUS
52361: PPUSH
52362: LD_VAR 0 9
52366: PPUSH
52367: CALL_OW 2
52371: ST_TO_ADDR
52372: GO 52300
52374: POP
52375: POP
// if tmp then
52376: LD_VAR 0 19
52380: IFFALSE 52392
// f := tmp ;
52382: LD_ADDR_VAR 0 12
52386: PUSH
52387: LD_VAR 0 19
52391: ST_TO_ADDR
// end ; x := personel [ i ] ;
52392: LD_ADDR_VAR 0 13
52396: PUSH
52397: LD_VAR 0 6
52401: PUSH
52402: LD_VAR 0 8
52406: ARRAY
52407: ST_TO_ADDR
// if x = - 1 then
52408: LD_VAR 0 13
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: EQUAL
52417: IFFALSE 52626
// begin for j in f do
52419: LD_ADDR_VAR 0 9
52423: PUSH
52424: LD_VAR 0 12
52428: PUSH
52429: FOR_IN
52430: IFFALSE 52622
// repeat InitHc ;
52432: CALL_OW 19
// if GetBType ( j ) = b_barracks then
52436: LD_VAR 0 9
52440: PPUSH
52441: CALL_OW 266
52445: PUSH
52446: LD_INT 5
52448: EQUAL
52449: IFFALSE 52519
// begin if UnitsInside ( j ) < 3 then
52451: LD_VAR 0 9
52455: PPUSH
52456: CALL_OW 313
52460: PUSH
52461: LD_INT 3
52463: LESS
52464: IFFALSE 52500
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52466: LD_INT 0
52468: PPUSH
52469: LD_INT 5
52471: PUSH
52472: LD_INT 8
52474: PUSH
52475: LD_INT 9
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: LIST
52482: PUSH
52483: LD_VAR 0 17
52487: ARRAY
52488: PPUSH
52489: LD_VAR 0 4
52493: PPUSH
52494: CALL_OW 380
52498: GO 52517
// PrepareHuman ( false , i , skill ) ;
52500: LD_INT 0
52502: PPUSH
52503: LD_VAR 0 8
52507: PPUSH
52508: LD_VAR 0 4
52512: PPUSH
52513: CALL_OW 380
// end else
52517: GO 52536
// PrepareHuman ( false , i , skill ) ;
52519: LD_INT 0
52521: PPUSH
52522: LD_VAR 0 8
52526: PPUSH
52527: LD_VAR 0 4
52531: PPUSH
52532: CALL_OW 380
// un := CreateHuman ;
52536: LD_ADDR_VAR 0 14
52540: PUSH
52541: CALL_OW 44
52545: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52546: LD_ADDR_VAR 0 7
52550: PUSH
52551: LD_VAR 0 7
52555: PPUSH
52556: LD_INT 1
52558: PPUSH
52559: LD_VAR 0 14
52563: PPUSH
52564: CALL_OW 2
52568: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
52569: LD_VAR 0 14
52573: PPUSH
52574: LD_VAR 0 9
52578: PPUSH
52579: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
52583: LD_VAR 0 9
52587: PPUSH
52588: CALL_OW 313
52592: PUSH
52593: LD_INT 6
52595: EQUAL
52596: PUSH
52597: LD_VAR 0 9
52601: PPUSH
52602: CALL_OW 266
52606: PUSH
52607: LD_INT 32
52609: PUSH
52610: LD_INT 31
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: IN
52617: OR
52618: IFFALSE 52432
52620: GO 52429
52622: POP
52623: POP
// end else
52624: GO 53006
// for j = 1 to x do
52626: LD_ADDR_VAR 0 9
52630: PUSH
52631: DOUBLE
52632: LD_INT 1
52634: DEC
52635: ST_TO_ADDR
52636: LD_VAR 0 13
52640: PUSH
52641: FOR_TO
52642: IFFALSE 53004
// begin InitHc ;
52644: CALL_OW 19
// if not f then
52648: LD_VAR 0 12
52652: NOT
52653: IFFALSE 52742
// begin PrepareHuman ( false , i , skill ) ;
52655: LD_INT 0
52657: PPUSH
52658: LD_VAR 0 8
52662: PPUSH
52663: LD_VAR 0 4
52667: PPUSH
52668: CALL_OW 380
// un := CreateHuman ;
52672: LD_ADDR_VAR 0 14
52676: PUSH
52677: CALL_OW 44
52681: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52682: LD_ADDR_VAR 0 7
52686: PUSH
52687: LD_VAR 0 7
52691: PPUSH
52692: LD_INT 1
52694: PPUSH
52695: LD_VAR 0 14
52699: PPUSH
52700: CALL_OW 2
52704: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52705: LD_VAR 0 14
52709: PPUSH
52710: LD_VAR 0 1
52714: PPUSH
52715: CALL_OW 250
52719: PPUSH
52720: LD_VAR 0 1
52724: PPUSH
52725: CALL_OW 251
52729: PPUSH
52730: LD_INT 10
52732: PPUSH
52733: LD_INT 0
52735: PPUSH
52736: CALL_OW 50
// continue ;
52740: GO 52641
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
52742: LD_VAR 0 12
52746: PUSH
52747: LD_INT 1
52749: ARRAY
52750: PPUSH
52751: CALL_OW 313
52755: PUSH
52756: LD_VAR 0 12
52760: PUSH
52761: LD_INT 1
52763: ARRAY
52764: PPUSH
52765: CALL_OW 266
52769: PUSH
52770: LD_INT 32
52772: PUSH
52773: LD_INT 31
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: IN
52780: AND
52781: PUSH
52782: LD_VAR 0 12
52786: PUSH
52787: LD_INT 1
52789: ARRAY
52790: PPUSH
52791: CALL_OW 313
52795: PUSH
52796: LD_INT 6
52798: EQUAL
52799: OR
52800: IFFALSE 52820
// f := Delete ( f , 1 ) ;
52802: LD_ADDR_VAR 0 12
52806: PUSH
52807: LD_VAR 0 12
52811: PPUSH
52812: LD_INT 1
52814: PPUSH
52815: CALL_OW 3
52819: ST_TO_ADDR
// if not f then
52820: LD_VAR 0 12
52824: NOT
52825: IFFALSE 52843
// begin x := x + 2 ;
52827: LD_ADDR_VAR 0 13
52831: PUSH
52832: LD_VAR 0 13
52836: PUSH
52837: LD_INT 2
52839: PLUS
52840: ST_TO_ADDR
// continue ;
52841: GO 52641
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
52843: LD_VAR 0 12
52847: PUSH
52848: LD_INT 1
52850: ARRAY
52851: PPUSH
52852: CALL_OW 266
52856: PUSH
52857: LD_INT 5
52859: EQUAL
52860: IFFALSE 52934
// begin if UnitsInside ( f [ 1 ] ) < 3 then
52862: LD_VAR 0 12
52866: PUSH
52867: LD_INT 1
52869: ARRAY
52870: PPUSH
52871: CALL_OW 313
52875: PUSH
52876: LD_INT 3
52878: LESS
52879: IFFALSE 52915
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52881: LD_INT 0
52883: PPUSH
52884: LD_INT 5
52886: PUSH
52887: LD_INT 8
52889: PUSH
52890: LD_INT 9
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: LIST
52897: PUSH
52898: LD_VAR 0 17
52902: ARRAY
52903: PPUSH
52904: LD_VAR 0 4
52908: PPUSH
52909: CALL_OW 380
52913: GO 52932
// PrepareHuman ( false , i , skill ) ;
52915: LD_INT 0
52917: PPUSH
52918: LD_VAR 0 8
52922: PPUSH
52923: LD_VAR 0 4
52927: PPUSH
52928: CALL_OW 380
// end else
52932: GO 52951
// PrepareHuman ( false , i , skill ) ;
52934: LD_INT 0
52936: PPUSH
52937: LD_VAR 0 8
52941: PPUSH
52942: LD_VAR 0 4
52946: PPUSH
52947: CALL_OW 380
// un := CreateHuman ;
52951: LD_ADDR_VAR 0 14
52955: PUSH
52956: CALL_OW 44
52960: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52961: LD_ADDR_VAR 0 7
52965: PUSH
52966: LD_VAR 0 7
52970: PPUSH
52971: LD_INT 1
52973: PPUSH
52974: LD_VAR 0 14
52978: PPUSH
52979: CALL_OW 2
52983: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
52984: LD_VAR 0 14
52988: PPUSH
52989: LD_VAR 0 12
52993: PUSH
52994: LD_INT 1
52996: ARRAY
52997: PPUSH
52998: CALL_OW 52
// end ;
53002: GO 52641
53004: POP
53005: POP
// end ;
53006: GO 51943
53008: POP
53009: POP
// result := result ^ buildings ;
53010: LD_ADDR_VAR 0 7
53014: PUSH
53015: LD_VAR 0 7
53019: PUSH
53020: LD_VAR 0 18
53024: ADD
53025: ST_TO_ADDR
// end else
53026: GO 53169
// begin for i = 1 to personel do
53028: LD_ADDR_VAR 0 8
53032: PUSH
53033: DOUBLE
53034: LD_INT 1
53036: DEC
53037: ST_TO_ADDR
53038: LD_VAR 0 6
53042: PUSH
53043: FOR_TO
53044: IFFALSE 53167
// begin if i > 4 then
53046: LD_VAR 0 8
53050: PUSH
53051: LD_INT 4
53053: GREATER
53054: IFFALSE 53058
// break ;
53056: GO 53167
// x := personel [ i ] ;
53058: LD_ADDR_VAR 0 13
53062: PUSH
53063: LD_VAR 0 6
53067: PUSH
53068: LD_VAR 0 8
53072: ARRAY
53073: ST_TO_ADDR
// if x = - 1 then
53074: LD_VAR 0 13
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: EQUAL
53083: IFFALSE 53087
// continue ;
53085: GO 53043
// PrepareHuman ( false , i , skill ) ;
53087: LD_INT 0
53089: PPUSH
53090: LD_VAR 0 8
53094: PPUSH
53095: LD_VAR 0 4
53099: PPUSH
53100: CALL_OW 380
// un := CreateHuman ;
53104: LD_ADDR_VAR 0 14
53108: PUSH
53109: CALL_OW 44
53113: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53114: LD_VAR 0 14
53118: PPUSH
53119: LD_VAR 0 1
53123: PPUSH
53124: CALL_OW 250
53128: PPUSH
53129: LD_VAR 0 1
53133: PPUSH
53134: CALL_OW 251
53138: PPUSH
53139: LD_INT 10
53141: PPUSH
53142: LD_INT 0
53144: PPUSH
53145: CALL_OW 50
// result := result ^ un ;
53149: LD_ADDR_VAR 0 7
53153: PUSH
53154: LD_VAR 0 7
53158: PUSH
53159: LD_VAR 0 14
53163: ADD
53164: ST_TO_ADDR
// end ;
53165: GO 53043
53167: POP
53168: POP
// end ; end ;
53169: LD_VAR 0 7
53173: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
53174: LD_INT 0
53176: PPUSH
53177: PPUSH
53178: PPUSH
53179: PPUSH
53180: PPUSH
53181: PPUSH
53182: PPUSH
53183: PPUSH
53184: PPUSH
53185: PPUSH
53186: PPUSH
53187: PPUSH
53188: PPUSH
53189: PPUSH
53190: PPUSH
53191: PPUSH
// result := false ;
53192: LD_ADDR_VAR 0 3
53196: PUSH
53197: LD_INT 0
53199: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
53200: LD_VAR 0 1
53204: NOT
53205: PUSH
53206: LD_VAR 0 1
53210: PPUSH
53211: CALL_OW 266
53215: PUSH
53216: LD_INT 32
53218: PUSH
53219: LD_INT 33
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: IN
53226: NOT
53227: OR
53228: IFFALSE 53232
// exit ;
53230: GO 54341
// nat := GetNation ( tower ) ;
53232: LD_ADDR_VAR 0 12
53236: PUSH
53237: LD_VAR 0 1
53241: PPUSH
53242: CALL_OW 248
53246: ST_TO_ADDR
// side := GetSide ( tower ) ;
53247: LD_ADDR_VAR 0 16
53251: PUSH
53252: LD_VAR 0 1
53256: PPUSH
53257: CALL_OW 255
53261: ST_TO_ADDR
// x := GetX ( tower ) ;
53262: LD_ADDR_VAR 0 10
53266: PUSH
53267: LD_VAR 0 1
53271: PPUSH
53272: CALL_OW 250
53276: ST_TO_ADDR
// y := GetY ( tower ) ;
53277: LD_ADDR_VAR 0 11
53281: PUSH
53282: LD_VAR 0 1
53286: PPUSH
53287: CALL_OW 251
53291: ST_TO_ADDR
// if not x or not y then
53292: LD_VAR 0 10
53296: NOT
53297: PUSH
53298: LD_VAR 0 11
53302: NOT
53303: OR
53304: IFFALSE 53308
// exit ;
53306: GO 54341
// weapon := 0 ;
53308: LD_ADDR_VAR 0 18
53312: PUSH
53313: LD_INT 0
53315: ST_TO_ADDR
// fac_list := [ ] ;
53316: LD_ADDR_VAR 0 17
53320: PUSH
53321: EMPTY
53322: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
53323: LD_ADDR_VAR 0 6
53327: PUSH
53328: LD_VAR 0 1
53332: PPUSH
53333: CALL_OW 274
53337: PPUSH
53338: LD_VAR 0 2
53342: PPUSH
53343: LD_INT 0
53345: PPUSH
53346: CALL 50912 0 3
53350: PPUSH
53351: LD_INT 30
53353: PUSH
53354: LD_INT 3
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PPUSH
53361: CALL_OW 72
53365: ST_TO_ADDR
// if not factories then
53366: LD_VAR 0 6
53370: NOT
53371: IFFALSE 53375
// exit ;
53373: GO 54341
// for i in factories do
53375: LD_ADDR_VAR 0 8
53379: PUSH
53380: LD_VAR 0 6
53384: PUSH
53385: FOR_IN
53386: IFFALSE 53411
// fac_list := fac_list union AvailableWeaponList ( i ) ;
53388: LD_ADDR_VAR 0 17
53392: PUSH
53393: LD_VAR 0 17
53397: PUSH
53398: LD_VAR 0 8
53402: PPUSH
53403: CALL_OW 478
53407: UNION
53408: ST_TO_ADDR
53409: GO 53385
53411: POP
53412: POP
// if not fac_list then
53413: LD_VAR 0 17
53417: NOT
53418: IFFALSE 53422
// exit ;
53420: GO 54341
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
53422: LD_ADDR_VAR 0 5
53426: PUSH
53427: LD_INT 4
53429: PUSH
53430: LD_INT 5
53432: PUSH
53433: LD_INT 9
53435: PUSH
53436: LD_INT 10
53438: PUSH
53439: LD_INT 6
53441: PUSH
53442: LD_INT 7
53444: PUSH
53445: LD_INT 11
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 27
53459: PUSH
53460: LD_INT 28
53462: PUSH
53463: LD_INT 26
53465: PUSH
53466: LD_INT 30
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 43
53477: PUSH
53478: LD_INT 44
53480: PUSH
53481: LD_INT 46
53483: PUSH
53484: LD_INT 45
53486: PUSH
53487: LD_INT 47
53489: PUSH
53490: LD_INT 49
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: LIST
53505: PUSH
53506: LD_VAR 0 12
53510: ARRAY
53511: ST_TO_ADDR
// list := list isect fac_list ;
53512: LD_ADDR_VAR 0 5
53516: PUSH
53517: LD_VAR 0 5
53521: PUSH
53522: LD_VAR 0 17
53526: ISECT
53527: ST_TO_ADDR
// if not list then
53528: LD_VAR 0 5
53532: NOT
53533: IFFALSE 53537
// exit ;
53535: GO 54341
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
53537: LD_VAR 0 12
53541: PUSH
53542: LD_INT 3
53544: EQUAL
53545: PUSH
53546: LD_INT 49
53548: PUSH
53549: LD_VAR 0 5
53553: IN
53554: AND
53555: PUSH
53556: LD_INT 31
53558: PPUSH
53559: LD_VAR 0 16
53563: PPUSH
53564: CALL_OW 321
53568: PUSH
53569: LD_INT 2
53571: EQUAL
53572: AND
53573: IFFALSE 53633
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
53575: LD_INT 22
53577: PUSH
53578: LD_VAR 0 16
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 35
53589: PUSH
53590: LD_INT 49
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 91
53599: PUSH
53600: LD_VAR 0 1
53604: PUSH
53605: LD_INT 10
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: LIST
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: LIST
53617: PPUSH
53618: CALL_OW 69
53622: NOT
53623: IFFALSE 53633
// weapon := ru_time_lapser ;
53625: LD_ADDR_VAR 0 18
53629: PUSH
53630: LD_INT 49
53632: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
53633: LD_VAR 0 12
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: LD_INT 2
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: IN
53648: PUSH
53649: LD_INT 11
53651: PUSH
53652: LD_VAR 0 5
53656: IN
53657: PUSH
53658: LD_INT 30
53660: PUSH
53661: LD_VAR 0 5
53665: IN
53666: OR
53667: AND
53668: PUSH
53669: LD_INT 6
53671: PPUSH
53672: LD_VAR 0 16
53676: PPUSH
53677: CALL_OW 321
53681: PUSH
53682: LD_INT 2
53684: EQUAL
53685: AND
53686: IFFALSE 53851
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
53688: LD_INT 22
53690: PUSH
53691: LD_VAR 0 16
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 2
53702: PUSH
53703: LD_INT 35
53705: PUSH
53706: LD_INT 11
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 35
53715: PUSH
53716: LD_INT 30
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 91
53730: PUSH
53731: LD_VAR 0 1
53735: PUSH
53736: LD_INT 18
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: LIST
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: LIST
53748: PPUSH
53749: CALL_OW 69
53753: NOT
53754: PUSH
53755: LD_INT 22
53757: PUSH
53758: LD_VAR 0 16
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 2
53769: PUSH
53770: LD_INT 30
53772: PUSH
53773: LD_INT 32
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 30
53782: PUSH
53783: LD_INT 33
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 91
53797: PUSH
53798: LD_VAR 0 1
53802: PUSH
53803: LD_INT 12
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: LIST
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: LIST
53815: PUSH
53816: EMPTY
53817: LIST
53818: PPUSH
53819: CALL_OW 69
53823: PUSH
53824: LD_INT 2
53826: GREATER
53827: AND
53828: IFFALSE 53851
// weapon := [ us_radar , ar_radar ] [ nat ] ;
53830: LD_ADDR_VAR 0 18
53834: PUSH
53835: LD_INT 11
53837: PUSH
53838: LD_INT 30
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_VAR 0 12
53849: ARRAY
53850: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
53851: LD_VAR 0 18
53855: NOT
53856: PUSH
53857: LD_INT 40
53859: PPUSH
53860: LD_VAR 0 16
53864: PPUSH
53865: CALL_OW 321
53869: PUSH
53870: LD_INT 2
53872: EQUAL
53873: AND
53874: PUSH
53875: LD_INT 7
53877: PUSH
53878: LD_VAR 0 5
53882: IN
53883: PUSH
53884: LD_INT 28
53886: PUSH
53887: LD_VAR 0 5
53891: IN
53892: OR
53893: PUSH
53894: LD_INT 45
53896: PUSH
53897: LD_VAR 0 5
53901: IN
53902: OR
53903: AND
53904: IFFALSE 54158
// begin hex := GetHexInfo ( x , y ) ;
53906: LD_ADDR_VAR 0 4
53910: PUSH
53911: LD_VAR 0 10
53915: PPUSH
53916: LD_VAR 0 11
53920: PPUSH
53921: CALL_OW 546
53925: ST_TO_ADDR
// if hex [ 1 ] then
53926: LD_VAR 0 4
53930: PUSH
53931: LD_INT 1
53933: ARRAY
53934: IFFALSE 53938
// exit ;
53936: GO 54341
// height := hex [ 2 ] ;
53938: LD_ADDR_VAR 0 15
53942: PUSH
53943: LD_VAR 0 4
53947: PUSH
53948: LD_INT 2
53950: ARRAY
53951: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
53952: LD_ADDR_VAR 0 14
53956: PUSH
53957: LD_INT 0
53959: PUSH
53960: LD_INT 2
53962: PUSH
53963: LD_INT 3
53965: PUSH
53966: LD_INT 5
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: ST_TO_ADDR
// for i in tmp do
53975: LD_ADDR_VAR 0 8
53979: PUSH
53980: LD_VAR 0 14
53984: PUSH
53985: FOR_IN
53986: IFFALSE 54156
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
53988: LD_ADDR_VAR 0 9
53992: PUSH
53993: LD_VAR 0 10
53997: PPUSH
53998: LD_VAR 0 8
54002: PPUSH
54003: LD_INT 5
54005: PPUSH
54006: CALL_OW 272
54010: PUSH
54011: LD_VAR 0 11
54015: PPUSH
54016: LD_VAR 0 8
54020: PPUSH
54021: LD_INT 5
54023: PPUSH
54024: CALL_OW 273
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
54033: LD_VAR 0 9
54037: PUSH
54038: LD_INT 1
54040: ARRAY
54041: PPUSH
54042: LD_VAR 0 9
54046: PUSH
54047: LD_INT 2
54049: ARRAY
54050: PPUSH
54051: CALL_OW 488
54055: IFFALSE 54154
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
54057: LD_ADDR_VAR 0 4
54061: PUSH
54062: LD_VAR 0 9
54066: PUSH
54067: LD_INT 1
54069: ARRAY
54070: PPUSH
54071: LD_VAR 0 9
54075: PUSH
54076: LD_INT 2
54078: ARRAY
54079: PPUSH
54080: CALL_OW 546
54084: ST_TO_ADDR
// if hex [ 1 ] then
54085: LD_VAR 0 4
54089: PUSH
54090: LD_INT 1
54092: ARRAY
54093: IFFALSE 54097
// continue ;
54095: GO 53985
// h := hex [ 2 ] ;
54097: LD_ADDR_VAR 0 13
54101: PUSH
54102: LD_VAR 0 4
54106: PUSH
54107: LD_INT 2
54109: ARRAY
54110: ST_TO_ADDR
// if h + 7 < height then
54111: LD_VAR 0 13
54115: PUSH
54116: LD_INT 7
54118: PLUS
54119: PUSH
54120: LD_VAR 0 15
54124: LESS
54125: IFFALSE 54154
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
54127: LD_ADDR_VAR 0 18
54131: PUSH
54132: LD_INT 7
54134: PUSH
54135: LD_INT 28
54137: PUSH
54138: LD_INT 45
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: LIST
54145: PUSH
54146: LD_VAR 0 12
54150: ARRAY
54151: ST_TO_ADDR
// break ;
54152: GO 54156
// end ; end ; end ;
54154: GO 53985
54156: POP
54157: POP
// end ; if not weapon then
54158: LD_VAR 0 18
54162: NOT
54163: IFFALSE 54223
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
54165: LD_ADDR_VAR 0 5
54169: PUSH
54170: LD_VAR 0 5
54174: PUSH
54175: LD_INT 11
54177: PUSH
54178: LD_INT 30
54180: PUSH
54181: LD_INT 49
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: LIST
54188: DIFF
54189: ST_TO_ADDR
// if not list then
54190: LD_VAR 0 5
54194: NOT
54195: IFFALSE 54199
// exit ;
54197: GO 54341
// weapon := list [ rand ( 1 , list ) ] ;
54199: LD_ADDR_VAR 0 18
54203: PUSH
54204: LD_VAR 0 5
54208: PUSH
54209: LD_INT 1
54211: PPUSH
54212: LD_VAR 0 5
54216: PPUSH
54217: CALL_OW 12
54221: ARRAY
54222: ST_TO_ADDR
// end ; if weapon then
54223: LD_VAR 0 18
54227: IFFALSE 54341
// begin tmp := CostOfWeapon ( weapon ) ;
54229: LD_ADDR_VAR 0 14
54233: PUSH
54234: LD_VAR 0 18
54238: PPUSH
54239: CALL_OW 451
54243: ST_TO_ADDR
// j := GetBase ( tower ) ;
54244: LD_ADDR_VAR 0 9
54248: PUSH
54249: LD_VAR 0 1
54253: PPUSH
54254: CALL_OW 274
54258: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
54259: LD_VAR 0 9
54263: PPUSH
54264: LD_INT 1
54266: PPUSH
54267: CALL_OW 275
54271: PUSH
54272: LD_VAR 0 14
54276: PUSH
54277: LD_INT 1
54279: ARRAY
54280: GREATEREQUAL
54281: PUSH
54282: LD_VAR 0 9
54286: PPUSH
54287: LD_INT 2
54289: PPUSH
54290: CALL_OW 275
54294: PUSH
54295: LD_VAR 0 14
54299: PUSH
54300: LD_INT 2
54302: ARRAY
54303: GREATEREQUAL
54304: AND
54305: PUSH
54306: LD_VAR 0 9
54310: PPUSH
54311: LD_INT 3
54313: PPUSH
54314: CALL_OW 275
54318: PUSH
54319: LD_VAR 0 14
54323: PUSH
54324: LD_INT 3
54326: ARRAY
54327: GREATEREQUAL
54328: AND
54329: IFFALSE 54341
// result := weapon ;
54331: LD_ADDR_VAR 0 3
54335: PUSH
54336: LD_VAR 0 18
54340: ST_TO_ADDR
// end ; end ;
54341: LD_VAR 0 3
54345: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
54346: LD_INT 0
54348: PPUSH
54349: PPUSH
// result := true ;
54350: LD_ADDR_VAR 0 3
54354: PUSH
54355: LD_INT 1
54357: ST_TO_ADDR
// if array1 = array2 then
54358: LD_VAR 0 1
54362: PUSH
54363: LD_VAR 0 2
54367: EQUAL
54368: IFFALSE 54428
// begin for i = 1 to array1 do
54370: LD_ADDR_VAR 0 4
54374: PUSH
54375: DOUBLE
54376: LD_INT 1
54378: DEC
54379: ST_TO_ADDR
54380: LD_VAR 0 1
54384: PUSH
54385: FOR_TO
54386: IFFALSE 54424
// if array1 [ i ] <> array2 [ i ] then
54388: LD_VAR 0 1
54392: PUSH
54393: LD_VAR 0 4
54397: ARRAY
54398: PUSH
54399: LD_VAR 0 2
54403: PUSH
54404: LD_VAR 0 4
54408: ARRAY
54409: NONEQUAL
54410: IFFALSE 54422
// begin result := false ;
54412: LD_ADDR_VAR 0 3
54416: PUSH
54417: LD_INT 0
54419: ST_TO_ADDR
// break ;
54420: GO 54424
// end ;
54422: GO 54385
54424: POP
54425: POP
// end else
54426: GO 54436
// result := false ;
54428: LD_ADDR_VAR 0 3
54432: PUSH
54433: LD_INT 0
54435: ST_TO_ADDR
// end ;
54436: LD_VAR 0 3
54440: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
54441: LD_INT 0
54443: PPUSH
54444: PPUSH
// if not array1 or not array2 then
54445: LD_VAR 0 1
54449: NOT
54450: PUSH
54451: LD_VAR 0 2
54455: NOT
54456: OR
54457: IFFALSE 54461
// exit ;
54459: GO 54525
// result := true ;
54461: LD_ADDR_VAR 0 3
54465: PUSH
54466: LD_INT 1
54468: ST_TO_ADDR
// for i = 1 to array1 do
54469: LD_ADDR_VAR 0 4
54473: PUSH
54474: DOUBLE
54475: LD_INT 1
54477: DEC
54478: ST_TO_ADDR
54479: LD_VAR 0 1
54483: PUSH
54484: FOR_TO
54485: IFFALSE 54523
// if array1 [ i ] <> array2 [ i ] then
54487: LD_VAR 0 1
54491: PUSH
54492: LD_VAR 0 4
54496: ARRAY
54497: PUSH
54498: LD_VAR 0 2
54502: PUSH
54503: LD_VAR 0 4
54507: ARRAY
54508: NONEQUAL
54509: IFFALSE 54521
// begin result := false ;
54511: LD_ADDR_VAR 0 3
54515: PUSH
54516: LD_INT 0
54518: ST_TO_ADDR
// break ;
54519: GO 54523
// end ;
54521: GO 54484
54523: POP
54524: POP
// end ;
54525: LD_VAR 0 3
54529: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
54530: LD_INT 0
54532: PPUSH
54533: PPUSH
54534: PPUSH
// pom := GetBase ( fac ) ;
54535: LD_ADDR_VAR 0 5
54539: PUSH
54540: LD_VAR 0 1
54544: PPUSH
54545: CALL_OW 274
54549: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
54550: LD_ADDR_VAR 0 4
54554: PUSH
54555: LD_VAR 0 2
54559: PUSH
54560: LD_INT 1
54562: ARRAY
54563: PPUSH
54564: LD_VAR 0 2
54568: PUSH
54569: LD_INT 2
54571: ARRAY
54572: PPUSH
54573: LD_VAR 0 2
54577: PUSH
54578: LD_INT 3
54580: ARRAY
54581: PPUSH
54582: LD_VAR 0 2
54586: PUSH
54587: LD_INT 4
54589: ARRAY
54590: PPUSH
54591: CALL_OW 449
54595: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54596: LD_ADDR_VAR 0 3
54600: PUSH
54601: LD_VAR 0 5
54605: PPUSH
54606: LD_INT 1
54608: PPUSH
54609: CALL_OW 275
54613: PUSH
54614: LD_VAR 0 4
54618: PUSH
54619: LD_INT 1
54621: ARRAY
54622: GREATEREQUAL
54623: PUSH
54624: LD_VAR 0 5
54628: PPUSH
54629: LD_INT 2
54631: PPUSH
54632: CALL_OW 275
54636: PUSH
54637: LD_VAR 0 4
54641: PUSH
54642: LD_INT 2
54644: ARRAY
54645: GREATEREQUAL
54646: AND
54647: PUSH
54648: LD_VAR 0 5
54652: PPUSH
54653: LD_INT 3
54655: PPUSH
54656: CALL_OW 275
54660: PUSH
54661: LD_VAR 0 4
54665: PUSH
54666: LD_INT 3
54668: ARRAY
54669: GREATEREQUAL
54670: AND
54671: ST_TO_ADDR
// end ;
54672: LD_VAR 0 3
54676: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
54677: LD_INT 0
54679: PPUSH
54680: PPUSH
54681: PPUSH
54682: PPUSH
// pom := GetBase ( building ) ;
54683: LD_ADDR_VAR 0 3
54687: PUSH
54688: LD_VAR 0 1
54692: PPUSH
54693: CALL_OW 274
54697: ST_TO_ADDR
// if not pom then
54698: LD_VAR 0 3
54702: NOT
54703: IFFALSE 54707
// exit ;
54705: GO 54877
// btype := GetBType ( building ) ;
54707: LD_ADDR_VAR 0 5
54711: PUSH
54712: LD_VAR 0 1
54716: PPUSH
54717: CALL_OW 266
54721: ST_TO_ADDR
// if btype = b_armoury then
54722: LD_VAR 0 5
54726: PUSH
54727: LD_INT 4
54729: EQUAL
54730: IFFALSE 54740
// btype := b_barracks ;
54732: LD_ADDR_VAR 0 5
54736: PUSH
54737: LD_INT 5
54739: ST_TO_ADDR
// if btype = b_depot then
54740: LD_VAR 0 5
54744: PUSH
54745: LD_INT 0
54747: EQUAL
54748: IFFALSE 54758
// btype := b_warehouse ;
54750: LD_ADDR_VAR 0 5
54754: PUSH
54755: LD_INT 1
54757: ST_TO_ADDR
// if btype = b_workshop then
54758: LD_VAR 0 5
54762: PUSH
54763: LD_INT 2
54765: EQUAL
54766: IFFALSE 54776
// btype := b_factory ;
54768: LD_ADDR_VAR 0 5
54772: PUSH
54773: LD_INT 3
54775: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54776: LD_ADDR_VAR 0 4
54780: PUSH
54781: LD_VAR 0 5
54785: PPUSH
54786: LD_VAR 0 1
54790: PPUSH
54791: CALL_OW 248
54795: PPUSH
54796: CALL_OW 450
54800: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54801: LD_ADDR_VAR 0 2
54805: PUSH
54806: LD_VAR 0 3
54810: PPUSH
54811: LD_INT 1
54813: PPUSH
54814: CALL_OW 275
54818: PUSH
54819: LD_VAR 0 4
54823: PUSH
54824: LD_INT 1
54826: ARRAY
54827: GREATEREQUAL
54828: PUSH
54829: LD_VAR 0 3
54833: PPUSH
54834: LD_INT 2
54836: PPUSH
54837: CALL_OW 275
54841: PUSH
54842: LD_VAR 0 4
54846: PUSH
54847: LD_INT 2
54849: ARRAY
54850: GREATEREQUAL
54851: AND
54852: PUSH
54853: LD_VAR 0 3
54857: PPUSH
54858: LD_INT 3
54860: PPUSH
54861: CALL_OW 275
54865: PUSH
54866: LD_VAR 0 4
54870: PUSH
54871: LD_INT 3
54873: ARRAY
54874: GREATEREQUAL
54875: AND
54876: ST_TO_ADDR
// end ;
54877: LD_VAR 0 2
54881: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
54882: LD_INT 0
54884: PPUSH
54885: PPUSH
54886: PPUSH
// pom := GetBase ( building ) ;
54887: LD_ADDR_VAR 0 4
54891: PUSH
54892: LD_VAR 0 1
54896: PPUSH
54897: CALL_OW 274
54901: ST_TO_ADDR
// if not pom then
54902: LD_VAR 0 4
54906: NOT
54907: IFFALSE 54911
// exit ;
54909: GO 55012
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54911: LD_ADDR_VAR 0 5
54915: PUSH
54916: LD_VAR 0 2
54920: PPUSH
54921: LD_VAR 0 1
54925: PPUSH
54926: CALL_OW 248
54930: PPUSH
54931: CALL_OW 450
54935: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54936: LD_ADDR_VAR 0 3
54940: PUSH
54941: LD_VAR 0 4
54945: PPUSH
54946: LD_INT 1
54948: PPUSH
54949: CALL_OW 275
54953: PUSH
54954: LD_VAR 0 5
54958: PUSH
54959: LD_INT 1
54961: ARRAY
54962: GREATEREQUAL
54963: PUSH
54964: LD_VAR 0 4
54968: PPUSH
54969: LD_INT 2
54971: PPUSH
54972: CALL_OW 275
54976: PUSH
54977: LD_VAR 0 5
54981: PUSH
54982: LD_INT 2
54984: ARRAY
54985: GREATEREQUAL
54986: AND
54987: PUSH
54988: LD_VAR 0 4
54992: PPUSH
54993: LD_INT 3
54995: PPUSH
54996: CALL_OW 275
55000: PUSH
55001: LD_VAR 0 5
55005: PUSH
55006: LD_INT 3
55008: ARRAY
55009: GREATEREQUAL
55010: AND
55011: ST_TO_ADDR
// end ;
55012: LD_VAR 0 3
55016: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
55017: LD_INT 0
55019: PPUSH
55020: PPUSH
55021: PPUSH
55022: PPUSH
55023: PPUSH
55024: PPUSH
55025: PPUSH
55026: PPUSH
55027: PPUSH
55028: PPUSH
55029: PPUSH
// result := false ;
55030: LD_ADDR_VAR 0 8
55034: PUSH
55035: LD_INT 0
55037: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
55038: LD_VAR 0 5
55042: NOT
55043: PUSH
55044: LD_VAR 0 1
55048: NOT
55049: OR
55050: PUSH
55051: LD_VAR 0 2
55055: NOT
55056: OR
55057: PUSH
55058: LD_VAR 0 3
55062: NOT
55063: OR
55064: IFFALSE 55068
// exit ;
55066: GO 55882
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
55068: LD_ADDR_VAR 0 14
55072: PUSH
55073: LD_VAR 0 1
55077: PPUSH
55078: LD_VAR 0 2
55082: PPUSH
55083: LD_VAR 0 3
55087: PPUSH
55088: LD_VAR 0 4
55092: PPUSH
55093: LD_VAR 0 5
55097: PUSH
55098: LD_INT 1
55100: ARRAY
55101: PPUSH
55102: CALL_OW 248
55106: PPUSH
55107: LD_INT 0
55109: PPUSH
55110: CALL 57119 0 6
55114: ST_TO_ADDR
// if not hexes then
55115: LD_VAR 0 14
55119: NOT
55120: IFFALSE 55124
// exit ;
55122: GO 55882
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55124: LD_ADDR_VAR 0 17
55128: PUSH
55129: LD_VAR 0 5
55133: PPUSH
55134: LD_INT 22
55136: PUSH
55137: LD_VAR 0 13
55141: PPUSH
55142: CALL_OW 255
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 2
55153: PUSH
55154: LD_INT 30
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 30
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: LIST
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PPUSH
55183: CALL_OW 72
55187: ST_TO_ADDR
// for i = 1 to hexes do
55188: LD_ADDR_VAR 0 9
55192: PUSH
55193: DOUBLE
55194: LD_INT 1
55196: DEC
55197: ST_TO_ADDR
55198: LD_VAR 0 14
55202: PUSH
55203: FOR_TO
55204: IFFALSE 55880
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55206: LD_ADDR_VAR 0 13
55210: PUSH
55211: LD_VAR 0 14
55215: PUSH
55216: LD_VAR 0 9
55220: ARRAY
55221: PUSH
55222: LD_INT 1
55224: ARRAY
55225: PPUSH
55226: LD_VAR 0 14
55230: PUSH
55231: LD_VAR 0 9
55235: ARRAY
55236: PUSH
55237: LD_INT 2
55239: ARRAY
55240: PPUSH
55241: CALL_OW 428
55245: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
55246: LD_VAR 0 14
55250: PUSH
55251: LD_VAR 0 9
55255: ARRAY
55256: PUSH
55257: LD_INT 1
55259: ARRAY
55260: PPUSH
55261: LD_VAR 0 14
55265: PUSH
55266: LD_VAR 0 9
55270: ARRAY
55271: PUSH
55272: LD_INT 2
55274: ARRAY
55275: PPUSH
55276: CALL_OW 351
55280: PUSH
55281: LD_VAR 0 14
55285: PUSH
55286: LD_VAR 0 9
55290: ARRAY
55291: PUSH
55292: LD_INT 1
55294: ARRAY
55295: PPUSH
55296: LD_VAR 0 14
55300: PUSH
55301: LD_VAR 0 9
55305: ARRAY
55306: PUSH
55307: LD_INT 2
55309: ARRAY
55310: PPUSH
55311: CALL_OW 488
55315: NOT
55316: OR
55317: PUSH
55318: LD_VAR 0 13
55322: PPUSH
55323: CALL_OW 247
55327: PUSH
55328: LD_INT 3
55330: EQUAL
55331: OR
55332: IFFALSE 55338
// exit ;
55334: POP
55335: POP
55336: GO 55882
// if not tmp then
55338: LD_VAR 0 13
55342: NOT
55343: IFFALSE 55347
// continue ;
55345: GO 55203
// result := true ;
55347: LD_ADDR_VAR 0 8
55351: PUSH
55352: LD_INT 1
55354: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
55355: LD_VAR 0 6
55359: PUSH
55360: LD_VAR 0 13
55364: PPUSH
55365: CALL_OW 247
55369: PUSH
55370: LD_INT 2
55372: EQUAL
55373: AND
55374: PUSH
55375: LD_VAR 0 13
55379: PPUSH
55380: CALL_OW 263
55384: PUSH
55385: LD_INT 1
55387: EQUAL
55388: AND
55389: IFFALSE 55553
// begin if IsDrivenBy ( tmp ) then
55391: LD_VAR 0 13
55395: PPUSH
55396: CALL_OW 311
55400: IFFALSE 55404
// continue ;
55402: GO 55203
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
55404: LD_VAR 0 6
55408: PPUSH
55409: LD_INT 3
55411: PUSH
55412: LD_INT 60
55414: PUSH
55415: EMPTY
55416: LIST
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 3
55424: PUSH
55425: LD_INT 55
55427: PUSH
55428: EMPTY
55429: LIST
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PPUSH
55439: CALL_OW 72
55443: IFFALSE 55551
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
55445: LD_ADDR_VAR 0 18
55449: PUSH
55450: LD_VAR 0 6
55454: PPUSH
55455: LD_INT 3
55457: PUSH
55458: LD_INT 60
55460: PUSH
55461: EMPTY
55462: LIST
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 3
55470: PUSH
55471: LD_INT 55
55473: PUSH
55474: EMPTY
55475: LIST
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PPUSH
55485: CALL_OW 72
55489: PUSH
55490: LD_INT 1
55492: ARRAY
55493: ST_TO_ADDR
// if IsInUnit ( driver ) then
55494: LD_VAR 0 18
55498: PPUSH
55499: CALL_OW 310
55503: IFFALSE 55514
// ComExit ( driver ) ;
55505: LD_VAR 0 18
55509: PPUSH
55510: CALL 80303 0 1
// AddComEnterUnit ( driver , tmp ) ;
55514: LD_VAR 0 18
55518: PPUSH
55519: LD_VAR 0 13
55523: PPUSH
55524: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
55528: LD_VAR 0 18
55532: PPUSH
55533: LD_VAR 0 7
55537: PPUSH
55538: CALL_OW 173
// AddComExitVehicle ( driver ) ;
55542: LD_VAR 0 18
55546: PPUSH
55547: CALL_OW 181
// end ; continue ;
55551: GO 55203
// end ; if not cleaners or not tmp in cleaners then
55553: LD_VAR 0 6
55557: NOT
55558: PUSH
55559: LD_VAR 0 13
55563: PUSH
55564: LD_VAR 0 6
55568: IN
55569: NOT
55570: OR
55571: IFFALSE 55878
// begin if dep then
55573: LD_VAR 0 17
55577: IFFALSE 55713
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
55579: LD_ADDR_VAR 0 16
55583: PUSH
55584: LD_VAR 0 17
55588: PUSH
55589: LD_INT 1
55591: ARRAY
55592: PPUSH
55593: CALL_OW 250
55597: PPUSH
55598: LD_VAR 0 17
55602: PUSH
55603: LD_INT 1
55605: ARRAY
55606: PPUSH
55607: CALL_OW 254
55611: PPUSH
55612: LD_INT 5
55614: PPUSH
55615: CALL_OW 272
55619: PUSH
55620: LD_VAR 0 17
55624: PUSH
55625: LD_INT 1
55627: ARRAY
55628: PPUSH
55629: CALL_OW 251
55633: PPUSH
55634: LD_VAR 0 17
55638: PUSH
55639: LD_INT 1
55641: ARRAY
55642: PPUSH
55643: CALL_OW 254
55647: PPUSH
55648: LD_INT 5
55650: PPUSH
55651: CALL_OW 273
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
55660: LD_VAR 0 16
55664: PUSH
55665: LD_INT 1
55667: ARRAY
55668: PPUSH
55669: LD_VAR 0 16
55673: PUSH
55674: LD_INT 2
55676: ARRAY
55677: PPUSH
55678: CALL_OW 488
55682: IFFALSE 55713
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
55684: LD_VAR 0 13
55688: PPUSH
55689: LD_VAR 0 16
55693: PUSH
55694: LD_INT 1
55696: ARRAY
55697: PPUSH
55698: LD_VAR 0 16
55702: PUSH
55703: LD_INT 2
55705: ARRAY
55706: PPUSH
55707: CALL_OW 111
// continue ;
55711: GO 55203
// end ; end ; r := GetDir ( tmp ) ;
55713: LD_ADDR_VAR 0 15
55717: PUSH
55718: LD_VAR 0 13
55722: PPUSH
55723: CALL_OW 254
55727: ST_TO_ADDR
// if r = 5 then
55728: LD_VAR 0 15
55732: PUSH
55733: LD_INT 5
55735: EQUAL
55736: IFFALSE 55746
// r := 0 ;
55738: LD_ADDR_VAR 0 15
55742: PUSH
55743: LD_INT 0
55745: ST_TO_ADDR
// for j = r to 5 do
55746: LD_ADDR_VAR 0 10
55750: PUSH
55751: DOUBLE
55752: LD_VAR 0 15
55756: DEC
55757: ST_TO_ADDR
55758: LD_INT 5
55760: PUSH
55761: FOR_TO
55762: IFFALSE 55876
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
55764: LD_ADDR_VAR 0 11
55768: PUSH
55769: LD_VAR 0 13
55773: PPUSH
55774: CALL_OW 250
55778: PPUSH
55779: LD_VAR 0 10
55783: PPUSH
55784: LD_INT 2
55786: PPUSH
55787: CALL_OW 272
55791: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
55792: LD_ADDR_VAR 0 12
55796: PUSH
55797: LD_VAR 0 13
55801: PPUSH
55802: CALL_OW 251
55806: PPUSH
55807: LD_VAR 0 10
55811: PPUSH
55812: LD_INT 2
55814: PPUSH
55815: CALL_OW 273
55819: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
55820: LD_VAR 0 11
55824: PPUSH
55825: LD_VAR 0 12
55829: PPUSH
55830: CALL_OW 488
55834: PUSH
55835: LD_VAR 0 11
55839: PPUSH
55840: LD_VAR 0 12
55844: PPUSH
55845: CALL_OW 428
55849: NOT
55850: AND
55851: IFFALSE 55874
// begin ComMoveXY ( tmp , _x , _y ) ;
55853: LD_VAR 0 13
55857: PPUSH
55858: LD_VAR 0 11
55862: PPUSH
55863: LD_VAR 0 12
55867: PPUSH
55868: CALL_OW 111
// break ;
55872: GO 55876
// end ; end ;
55874: GO 55761
55876: POP
55877: POP
// end ; end ;
55878: GO 55203
55880: POP
55881: POP
// end ;
55882: LD_VAR 0 8
55886: RET
// export function BuildingTechInvented ( side , btype ) ; begin
55887: LD_INT 0
55889: PPUSH
// result := true ;
55890: LD_ADDR_VAR 0 3
55894: PUSH
55895: LD_INT 1
55897: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
55898: LD_VAR 0 2
55902: PUSH
55903: LD_INT 24
55905: DOUBLE
55906: EQUAL
55907: IFTRUE 55917
55909: LD_INT 33
55911: DOUBLE
55912: EQUAL
55913: IFTRUE 55917
55915: GO 55942
55917: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
55918: LD_ADDR_VAR 0 3
55922: PUSH
55923: LD_INT 32
55925: PPUSH
55926: LD_VAR 0 1
55930: PPUSH
55931: CALL_OW 321
55935: PUSH
55936: LD_INT 2
55938: EQUAL
55939: ST_TO_ADDR
55940: GO 56262
55942: LD_INT 20
55944: DOUBLE
55945: EQUAL
55946: IFTRUE 55950
55948: GO 55975
55950: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
55951: LD_ADDR_VAR 0 3
55955: PUSH
55956: LD_INT 6
55958: PPUSH
55959: LD_VAR 0 1
55963: PPUSH
55964: CALL_OW 321
55968: PUSH
55969: LD_INT 2
55971: EQUAL
55972: ST_TO_ADDR
55973: GO 56262
55975: LD_INT 22
55977: DOUBLE
55978: EQUAL
55979: IFTRUE 55989
55981: LD_INT 36
55983: DOUBLE
55984: EQUAL
55985: IFTRUE 55989
55987: GO 56014
55989: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
55990: LD_ADDR_VAR 0 3
55994: PUSH
55995: LD_INT 15
55997: PPUSH
55998: LD_VAR 0 1
56002: PPUSH
56003: CALL_OW 321
56007: PUSH
56008: LD_INT 2
56010: EQUAL
56011: ST_TO_ADDR
56012: GO 56262
56014: LD_INT 30
56016: DOUBLE
56017: EQUAL
56018: IFTRUE 56022
56020: GO 56047
56022: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
56023: LD_ADDR_VAR 0 3
56027: PUSH
56028: LD_INT 20
56030: PPUSH
56031: LD_VAR 0 1
56035: PPUSH
56036: CALL_OW 321
56040: PUSH
56041: LD_INT 2
56043: EQUAL
56044: ST_TO_ADDR
56045: GO 56262
56047: LD_INT 28
56049: DOUBLE
56050: EQUAL
56051: IFTRUE 56061
56053: LD_INT 21
56055: DOUBLE
56056: EQUAL
56057: IFTRUE 56061
56059: GO 56086
56061: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
56062: LD_ADDR_VAR 0 3
56066: PUSH
56067: LD_INT 21
56069: PPUSH
56070: LD_VAR 0 1
56074: PPUSH
56075: CALL_OW 321
56079: PUSH
56080: LD_INT 2
56082: EQUAL
56083: ST_TO_ADDR
56084: GO 56262
56086: LD_INT 16
56088: DOUBLE
56089: EQUAL
56090: IFTRUE 56094
56092: GO 56121
56094: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
56095: LD_ADDR_VAR 0 3
56099: PUSH
56100: LD_EXP 77
56104: PPUSH
56105: LD_VAR 0 1
56109: PPUSH
56110: CALL_OW 321
56114: PUSH
56115: LD_INT 2
56117: EQUAL
56118: ST_TO_ADDR
56119: GO 56262
56121: LD_INT 19
56123: DOUBLE
56124: EQUAL
56125: IFTRUE 56135
56127: LD_INT 23
56129: DOUBLE
56130: EQUAL
56131: IFTRUE 56135
56133: GO 56162
56135: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
56136: LD_ADDR_VAR 0 3
56140: PUSH
56141: LD_EXP 76
56145: PPUSH
56146: LD_VAR 0 1
56150: PPUSH
56151: CALL_OW 321
56155: PUSH
56156: LD_INT 2
56158: EQUAL
56159: ST_TO_ADDR
56160: GO 56262
56162: LD_INT 17
56164: DOUBLE
56165: EQUAL
56166: IFTRUE 56170
56168: GO 56195
56170: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
56171: LD_ADDR_VAR 0 3
56175: PUSH
56176: LD_INT 39
56178: PPUSH
56179: LD_VAR 0 1
56183: PPUSH
56184: CALL_OW 321
56188: PUSH
56189: LD_INT 2
56191: EQUAL
56192: ST_TO_ADDR
56193: GO 56262
56195: LD_INT 18
56197: DOUBLE
56198: EQUAL
56199: IFTRUE 56203
56201: GO 56228
56203: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
56204: LD_ADDR_VAR 0 3
56208: PUSH
56209: LD_INT 40
56211: PPUSH
56212: LD_VAR 0 1
56216: PPUSH
56217: CALL_OW 321
56221: PUSH
56222: LD_INT 2
56224: EQUAL
56225: ST_TO_ADDR
56226: GO 56262
56228: LD_INT 27
56230: DOUBLE
56231: EQUAL
56232: IFTRUE 56236
56234: GO 56261
56236: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
56237: LD_ADDR_VAR 0 3
56241: PUSH
56242: LD_INT 35
56244: PPUSH
56245: LD_VAR 0 1
56249: PPUSH
56250: CALL_OW 321
56254: PUSH
56255: LD_INT 2
56257: EQUAL
56258: ST_TO_ADDR
56259: GO 56262
56261: POP
// end ;
56262: LD_VAR 0 3
56266: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
56267: LD_INT 0
56269: PPUSH
56270: PPUSH
56271: PPUSH
56272: PPUSH
56273: PPUSH
56274: PPUSH
56275: PPUSH
56276: PPUSH
56277: PPUSH
56278: PPUSH
56279: PPUSH
// result := false ;
56280: LD_ADDR_VAR 0 6
56284: PUSH
56285: LD_INT 0
56287: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
56288: LD_VAR 0 1
56292: NOT
56293: PUSH
56294: LD_VAR 0 1
56298: PPUSH
56299: CALL_OW 266
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: LD_INT 1
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: IN
56314: NOT
56315: OR
56316: PUSH
56317: LD_VAR 0 2
56321: NOT
56322: OR
56323: PUSH
56324: LD_VAR 0 5
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: LD_INT 2
56337: PUSH
56338: LD_INT 3
56340: PUSH
56341: LD_INT 4
56343: PUSH
56344: LD_INT 5
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: IN
56355: NOT
56356: OR
56357: PUSH
56358: LD_VAR 0 3
56362: PPUSH
56363: LD_VAR 0 4
56367: PPUSH
56368: CALL_OW 488
56372: NOT
56373: OR
56374: IFFALSE 56378
// exit ;
56376: GO 57114
// side := GetSide ( depot ) ;
56378: LD_ADDR_VAR 0 9
56382: PUSH
56383: LD_VAR 0 1
56387: PPUSH
56388: CALL_OW 255
56392: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
56393: LD_VAR 0 9
56397: PPUSH
56398: LD_VAR 0 2
56402: PPUSH
56403: CALL 55887 0 2
56407: NOT
56408: IFFALSE 56412
// exit ;
56410: GO 57114
// pom := GetBase ( depot ) ;
56412: LD_ADDR_VAR 0 10
56416: PUSH
56417: LD_VAR 0 1
56421: PPUSH
56422: CALL_OW 274
56426: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
56427: LD_ADDR_VAR 0 11
56431: PUSH
56432: LD_VAR 0 2
56436: PPUSH
56437: LD_VAR 0 1
56441: PPUSH
56442: CALL_OW 248
56446: PPUSH
56447: CALL_OW 450
56451: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
56452: LD_VAR 0 10
56456: PPUSH
56457: LD_INT 1
56459: PPUSH
56460: CALL_OW 275
56464: PUSH
56465: LD_VAR 0 11
56469: PUSH
56470: LD_INT 1
56472: ARRAY
56473: GREATEREQUAL
56474: PUSH
56475: LD_VAR 0 10
56479: PPUSH
56480: LD_INT 2
56482: PPUSH
56483: CALL_OW 275
56487: PUSH
56488: LD_VAR 0 11
56492: PUSH
56493: LD_INT 2
56495: ARRAY
56496: GREATEREQUAL
56497: AND
56498: PUSH
56499: LD_VAR 0 10
56503: PPUSH
56504: LD_INT 3
56506: PPUSH
56507: CALL_OW 275
56511: PUSH
56512: LD_VAR 0 11
56516: PUSH
56517: LD_INT 3
56519: ARRAY
56520: GREATEREQUAL
56521: AND
56522: NOT
56523: IFFALSE 56527
// exit ;
56525: GO 57114
// if GetBType ( depot ) = b_depot then
56527: LD_VAR 0 1
56531: PPUSH
56532: CALL_OW 266
56536: PUSH
56537: LD_INT 0
56539: EQUAL
56540: IFFALSE 56552
// dist := 28 else
56542: LD_ADDR_VAR 0 14
56546: PUSH
56547: LD_INT 28
56549: ST_TO_ADDR
56550: GO 56560
// dist := 36 ;
56552: LD_ADDR_VAR 0 14
56556: PUSH
56557: LD_INT 36
56559: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
56560: LD_VAR 0 1
56564: PPUSH
56565: LD_VAR 0 3
56569: PPUSH
56570: LD_VAR 0 4
56574: PPUSH
56575: CALL_OW 297
56579: PUSH
56580: LD_VAR 0 14
56584: GREATER
56585: IFFALSE 56589
// exit ;
56587: GO 57114
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
56589: LD_ADDR_VAR 0 12
56593: PUSH
56594: LD_VAR 0 2
56598: PPUSH
56599: LD_VAR 0 3
56603: PPUSH
56604: LD_VAR 0 4
56608: PPUSH
56609: LD_VAR 0 5
56613: PPUSH
56614: LD_VAR 0 1
56618: PPUSH
56619: CALL_OW 248
56623: PPUSH
56624: LD_INT 0
56626: PPUSH
56627: CALL 57119 0 6
56631: ST_TO_ADDR
// if not hexes then
56632: LD_VAR 0 12
56636: NOT
56637: IFFALSE 56641
// exit ;
56639: GO 57114
// hex := GetHexInfo ( x , y ) ;
56641: LD_ADDR_VAR 0 15
56645: PUSH
56646: LD_VAR 0 3
56650: PPUSH
56651: LD_VAR 0 4
56655: PPUSH
56656: CALL_OW 546
56660: ST_TO_ADDR
// if hex [ 1 ] then
56661: LD_VAR 0 15
56665: PUSH
56666: LD_INT 1
56668: ARRAY
56669: IFFALSE 56673
// exit ;
56671: GO 57114
// height := hex [ 2 ] ;
56673: LD_ADDR_VAR 0 13
56677: PUSH
56678: LD_VAR 0 15
56682: PUSH
56683: LD_INT 2
56685: ARRAY
56686: ST_TO_ADDR
// for i = 1 to hexes do
56687: LD_ADDR_VAR 0 7
56691: PUSH
56692: DOUBLE
56693: LD_INT 1
56695: DEC
56696: ST_TO_ADDR
56697: LD_VAR 0 12
56701: PUSH
56702: FOR_TO
56703: IFFALSE 57033
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
56705: LD_VAR 0 12
56709: PUSH
56710: LD_VAR 0 7
56714: ARRAY
56715: PUSH
56716: LD_INT 1
56718: ARRAY
56719: PPUSH
56720: LD_VAR 0 12
56724: PUSH
56725: LD_VAR 0 7
56729: ARRAY
56730: PUSH
56731: LD_INT 2
56733: ARRAY
56734: PPUSH
56735: CALL_OW 488
56739: NOT
56740: PUSH
56741: LD_VAR 0 12
56745: PUSH
56746: LD_VAR 0 7
56750: ARRAY
56751: PUSH
56752: LD_INT 1
56754: ARRAY
56755: PPUSH
56756: LD_VAR 0 12
56760: PUSH
56761: LD_VAR 0 7
56765: ARRAY
56766: PUSH
56767: LD_INT 2
56769: ARRAY
56770: PPUSH
56771: CALL_OW 428
56775: PUSH
56776: LD_INT 0
56778: GREATER
56779: OR
56780: PUSH
56781: LD_VAR 0 12
56785: PUSH
56786: LD_VAR 0 7
56790: ARRAY
56791: PUSH
56792: LD_INT 1
56794: ARRAY
56795: PPUSH
56796: LD_VAR 0 12
56800: PUSH
56801: LD_VAR 0 7
56805: ARRAY
56806: PUSH
56807: LD_INT 2
56809: ARRAY
56810: PPUSH
56811: CALL_OW 351
56815: OR
56816: IFFALSE 56822
// exit ;
56818: POP
56819: POP
56820: GO 57114
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56822: LD_ADDR_VAR 0 8
56826: PUSH
56827: LD_VAR 0 12
56831: PUSH
56832: LD_VAR 0 7
56836: ARRAY
56837: PUSH
56838: LD_INT 1
56840: ARRAY
56841: PPUSH
56842: LD_VAR 0 12
56846: PUSH
56847: LD_VAR 0 7
56851: ARRAY
56852: PUSH
56853: LD_INT 2
56855: ARRAY
56856: PPUSH
56857: CALL_OW 546
56861: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
56862: LD_VAR 0 8
56866: PUSH
56867: LD_INT 1
56869: ARRAY
56870: PUSH
56871: LD_VAR 0 8
56875: PUSH
56876: LD_INT 2
56878: ARRAY
56879: PUSH
56880: LD_VAR 0 13
56884: PUSH
56885: LD_INT 2
56887: PLUS
56888: GREATER
56889: OR
56890: PUSH
56891: LD_VAR 0 8
56895: PUSH
56896: LD_INT 2
56898: ARRAY
56899: PUSH
56900: LD_VAR 0 13
56904: PUSH
56905: LD_INT 2
56907: MINUS
56908: LESS
56909: OR
56910: PUSH
56911: LD_VAR 0 8
56915: PUSH
56916: LD_INT 3
56918: ARRAY
56919: PUSH
56920: LD_INT 0
56922: PUSH
56923: LD_INT 8
56925: PUSH
56926: LD_INT 9
56928: PUSH
56929: LD_INT 10
56931: PUSH
56932: LD_INT 11
56934: PUSH
56935: LD_INT 12
56937: PUSH
56938: LD_INT 13
56940: PUSH
56941: LD_INT 16
56943: PUSH
56944: LD_INT 17
56946: PUSH
56947: LD_INT 18
56949: PUSH
56950: LD_INT 19
56952: PUSH
56953: LD_INT 20
56955: PUSH
56956: LD_INT 21
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: IN
56974: NOT
56975: OR
56976: PUSH
56977: LD_VAR 0 8
56981: PUSH
56982: LD_INT 5
56984: ARRAY
56985: NOT
56986: OR
56987: PUSH
56988: LD_VAR 0 8
56992: PUSH
56993: LD_INT 6
56995: ARRAY
56996: PUSH
56997: LD_INT 1
56999: PUSH
57000: LD_INT 2
57002: PUSH
57003: LD_INT 7
57005: PUSH
57006: LD_INT 9
57008: PUSH
57009: LD_INT 10
57011: PUSH
57012: LD_INT 11
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: IN
57023: NOT
57024: OR
57025: IFFALSE 57031
// exit ;
57027: POP
57028: POP
57029: GO 57114
// end ;
57031: GO 56702
57033: POP
57034: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
57035: LD_VAR 0 9
57039: PPUSH
57040: LD_VAR 0 3
57044: PPUSH
57045: LD_VAR 0 4
57049: PPUSH
57050: LD_INT 20
57052: PPUSH
57053: CALL 49060 0 4
57057: PUSH
57058: LD_INT 4
57060: ARRAY
57061: IFFALSE 57065
// exit ;
57063: GO 57114
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
57065: LD_VAR 0 2
57069: PUSH
57070: LD_INT 29
57072: PUSH
57073: LD_INT 30
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: IN
57080: PUSH
57081: LD_VAR 0 3
57085: PPUSH
57086: LD_VAR 0 4
57090: PPUSH
57091: LD_VAR 0 9
57095: PPUSH
57096: CALL_OW 440
57100: NOT
57101: AND
57102: IFFALSE 57106
// exit ;
57104: GO 57114
// result := true ;
57106: LD_ADDR_VAR 0 6
57110: PUSH
57111: LD_INT 1
57113: ST_TO_ADDR
// end ;
57114: LD_VAR 0 6
57118: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
57119: LD_INT 0
57121: PPUSH
57122: PPUSH
57123: PPUSH
57124: PPUSH
57125: PPUSH
57126: PPUSH
57127: PPUSH
57128: PPUSH
57129: PPUSH
57130: PPUSH
57131: PPUSH
57132: PPUSH
57133: PPUSH
57134: PPUSH
57135: PPUSH
57136: PPUSH
57137: PPUSH
57138: PPUSH
57139: PPUSH
57140: PPUSH
57141: PPUSH
57142: PPUSH
57143: PPUSH
57144: PPUSH
57145: PPUSH
57146: PPUSH
57147: PPUSH
57148: PPUSH
57149: PPUSH
57150: PPUSH
57151: PPUSH
57152: PPUSH
57153: PPUSH
57154: PPUSH
57155: PPUSH
57156: PPUSH
57157: PPUSH
57158: PPUSH
57159: PPUSH
57160: PPUSH
57161: PPUSH
57162: PPUSH
57163: PPUSH
57164: PPUSH
57165: PPUSH
57166: PPUSH
57167: PPUSH
57168: PPUSH
57169: PPUSH
57170: PPUSH
57171: PPUSH
57172: PPUSH
57173: PPUSH
57174: PPUSH
57175: PPUSH
57176: PPUSH
57177: PPUSH
57178: PPUSH
// result = [ ] ;
57179: LD_ADDR_VAR 0 7
57183: PUSH
57184: EMPTY
57185: ST_TO_ADDR
// temp_list = [ ] ;
57186: LD_ADDR_VAR 0 9
57190: PUSH
57191: EMPTY
57192: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
57193: LD_VAR 0 4
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: LD_INT 1
57203: PUSH
57204: LD_INT 2
57206: PUSH
57207: LD_INT 3
57209: PUSH
57210: LD_INT 4
57212: PUSH
57213: LD_INT 5
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: IN
57224: NOT
57225: PUSH
57226: LD_VAR 0 1
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: LD_INT 1
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: IN
57241: PUSH
57242: LD_VAR 0 5
57246: PUSH
57247: LD_INT 1
57249: PUSH
57250: LD_INT 2
57252: PUSH
57253: LD_INT 3
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: LIST
57260: IN
57261: NOT
57262: AND
57263: OR
57264: IFFALSE 57268
// exit ;
57266: GO 75659
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
57268: LD_VAR 0 1
57272: PUSH
57273: LD_INT 6
57275: PUSH
57276: LD_INT 7
57278: PUSH
57279: LD_INT 8
57281: PUSH
57282: LD_INT 13
57284: PUSH
57285: LD_INT 12
57287: PUSH
57288: LD_INT 15
57290: PUSH
57291: LD_INT 11
57293: PUSH
57294: LD_INT 14
57296: PUSH
57297: LD_INT 10
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: IN
57311: IFFALSE 57321
// btype = b_lab ;
57313: LD_ADDR_VAR 0 1
57317: PUSH
57318: LD_INT 6
57320: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
57321: LD_VAR 0 6
57325: PUSH
57326: LD_INT 0
57328: PUSH
57329: LD_INT 1
57331: PUSH
57332: LD_INT 2
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: LIST
57339: IN
57340: NOT
57341: PUSH
57342: LD_VAR 0 1
57346: PUSH
57347: LD_INT 0
57349: PUSH
57350: LD_INT 1
57352: PUSH
57353: LD_INT 2
57355: PUSH
57356: LD_INT 3
57358: PUSH
57359: LD_INT 6
57361: PUSH
57362: LD_INT 36
57364: PUSH
57365: LD_INT 4
57367: PUSH
57368: LD_INT 5
57370: PUSH
57371: LD_INT 31
57373: PUSH
57374: LD_INT 32
57376: PUSH
57377: LD_INT 33
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: IN
57393: NOT
57394: PUSH
57395: LD_VAR 0 6
57399: PUSH
57400: LD_INT 1
57402: EQUAL
57403: AND
57404: OR
57405: PUSH
57406: LD_VAR 0 1
57410: PUSH
57411: LD_INT 2
57413: PUSH
57414: LD_INT 3
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: IN
57421: NOT
57422: PUSH
57423: LD_VAR 0 6
57427: PUSH
57428: LD_INT 2
57430: EQUAL
57431: AND
57432: OR
57433: IFFALSE 57443
// mode = 0 ;
57435: LD_ADDR_VAR 0 6
57439: PUSH
57440: LD_INT 0
57442: ST_TO_ADDR
// case mode of 0 :
57443: LD_VAR 0 6
57447: PUSH
57448: LD_INT 0
57450: DOUBLE
57451: EQUAL
57452: IFTRUE 57456
57454: GO 68909
57456: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57457: LD_ADDR_VAR 0 11
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 0
57474: PUSH
57475: LD_INT 1
57477: NEG
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 1
57485: PUSH
57486: LD_INT 0
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: LD_INT 1
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 1
57515: NEG
57516: PUSH
57517: LD_INT 0
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 1
57526: NEG
57527: PUSH
57528: LD_INT 1
57530: NEG
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 1
57538: NEG
57539: PUSH
57540: LD_INT 2
57542: NEG
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 0
57550: PUSH
57551: LD_INT 2
57553: NEG
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: LD_INT 1
57564: NEG
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 1
57572: PUSH
57573: LD_INT 2
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 0
57582: PUSH
57583: LD_INT 2
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 1
57592: NEG
57593: PUSH
57594: LD_INT 1
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: LD_INT 3
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 0
57613: PUSH
57614: LD_INT 3
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 1
57623: NEG
57624: PUSH
57625: LD_INT 2
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57650: LD_ADDR_VAR 0 12
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 0
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: PUSH
57679: LD_INT 0
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 1
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: LD_INT 1
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 1
57708: NEG
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 1
57719: NEG
57720: PUSH
57721: LD_INT 1
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 1
57731: PUSH
57732: LD_INT 1
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 2
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 2
57752: PUSH
57753: LD_INT 1
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: NEG
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 2
57773: NEG
57774: PUSH
57775: LD_INT 0
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 2
57784: NEG
57785: PUSH
57786: LD_INT 1
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 2
57796: NEG
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 3
57807: NEG
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 3
57818: NEG
57819: PUSH
57820: LD_INT 1
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57846: LD_ADDR_VAR 0 13
57850: PUSH
57851: LD_INT 0
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 0
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 1
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 1
57884: PUSH
57885: LD_INT 1
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 0
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 1
57904: NEG
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 1
57915: NEG
57916: PUSH
57917: LD_INT 1
57919: NEG
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: LD_INT 2
57931: NEG
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 2
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 2
57949: PUSH
57950: LD_INT 2
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: LD_INT 2
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 2
57969: NEG
57970: PUSH
57971: LD_INT 1
57973: NEG
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 2
57981: NEG
57982: PUSH
57983: LD_INT 2
57985: NEG
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 2
57993: NEG
57994: PUSH
57995: LD_INT 3
57997: NEG
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 3
58005: NEG
58006: PUSH
58007: LD_INT 2
58009: NEG
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 3
58017: NEG
58018: PUSH
58019: LD_INT 3
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58045: LD_ADDR_VAR 0 14
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: LD_INT 0
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 0
58062: PUSH
58063: LD_INT 1
58065: NEG
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 1
58073: PUSH
58074: LD_INT 0
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 1
58083: PUSH
58084: LD_INT 1
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 0
58093: PUSH
58094: LD_INT 1
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 1
58103: NEG
58104: PUSH
58105: LD_INT 0
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 1
58114: NEG
58115: PUSH
58116: LD_INT 1
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 1
58126: NEG
58127: PUSH
58128: LD_INT 2
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: LD_INT 2
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 1
58160: PUSH
58161: LD_INT 2
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: LD_INT 2
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 1
58180: NEG
58181: PUSH
58182: LD_INT 1
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: LD_INT 3
58195: NEG
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 0
58203: PUSH
58204: LD_INT 3
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 1
58214: PUSH
58215: LD_INT 2
58217: NEG
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58241: LD_ADDR_VAR 0 15
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: LD_INT 1
58261: NEG
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 1
58269: PUSH
58270: LD_INT 0
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 1
58279: PUSH
58280: LD_INT 1
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: LD_INT 1
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 1
58299: NEG
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 1
58310: NEG
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 1
58322: PUSH
58323: LD_INT 1
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 2
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 2
58343: PUSH
58344: LD_INT 1
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: NEG
58354: PUSH
58355: LD_INT 1
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 2
58364: NEG
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 2
58375: NEG
58376: PUSH
58377: LD_INT 1
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 2
58387: PUSH
58388: LD_INT 1
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 3
58398: PUSH
58399: LD_INT 0
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 3
58408: PUSH
58409: LD_INT 1
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58434: LD_ADDR_VAR 0 16
58438: PUSH
58439: LD_INT 0
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 0
58451: PUSH
58452: LD_INT 1
58454: NEG
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 1
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 1
58472: PUSH
58473: LD_INT 1
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: LD_INT 1
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 1
58492: NEG
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 1
58503: NEG
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 1
58515: NEG
58516: PUSH
58517: LD_INT 2
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 2
58527: PUSH
58528: LD_INT 1
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 2
58537: PUSH
58538: LD_INT 2
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 1
58547: PUSH
58548: LD_INT 2
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 2
58557: NEG
58558: PUSH
58559: LD_INT 1
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 2
58569: NEG
58570: PUSH
58571: LD_INT 2
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 3
58581: PUSH
58582: LD_INT 2
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 3
58591: PUSH
58592: LD_INT 3
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 2
58601: PUSH
58602: LD_INT 3
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58627: LD_ADDR_VAR 0 17
58631: PUSH
58632: LD_INT 0
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 0
58644: PUSH
58645: LD_INT 1
58647: NEG
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 1
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 1
58665: PUSH
58666: LD_INT 1
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: LD_INT 1
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: LD_INT 1
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 1
58708: NEG
58709: PUSH
58710: LD_INT 2
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: LD_INT 2
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 1
58731: PUSH
58732: LD_INT 1
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 2
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 2
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 2
58762: PUSH
58763: LD_INT 2
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 1
58772: PUSH
58773: LD_INT 2
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 0
58782: PUSH
58783: LD_INT 2
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 1
58792: NEG
58793: PUSH
58794: LD_INT 1
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 2
58803: NEG
58804: PUSH
58805: LD_INT 0
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 2
58814: NEG
58815: PUSH
58816: LD_INT 1
58818: NEG
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 2
58826: NEG
58827: PUSH
58828: LD_INT 2
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58857: LD_ADDR_VAR 0 18
58861: PUSH
58862: LD_INT 0
58864: PUSH
58865: LD_INT 0
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: LD_INT 1
58877: NEG
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 1
58885: PUSH
58886: LD_INT 0
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 1
58895: PUSH
58896: LD_INT 1
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: LD_INT 1
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 1
58915: NEG
58916: PUSH
58917: LD_INT 0
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 1
58926: NEG
58927: PUSH
58928: LD_INT 1
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 1
58938: NEG
58939: PUSH
58940: LD_INT 2
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: LD_INT 2
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 1
58961: PUSH
58962: LD_INT 1
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 2
58972: PUSH
58973: LD_INT 0
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 2
58982: PUSH
58983: LD_INT 1
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 2
58992: PUSH
58993: LD_INT 2
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 1
59002: PUSH
59003: LD_INT 2
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 0
59012: PUSH
59013: LD_INT 2
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 1
59022: NEG
59023: PUSH
59024: LD_INT 1
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 2
59033: NEG
59034: PUSH
59035: LD_INT 0
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 2
59044: NEG
59045: PUSH
59046: LD_INT 1
59048: NEG
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 2
59056: NEG
59057: PUSH
59058: LD_INT 2
59060: NEG
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59087: LD_ADDR_VAR 0 19
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: LD_INT 1
59107: NEG
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 1
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 1
59125: PUSH
59126: LD_INT 1
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 0
59135: PUSH
59136: LD_INT 1
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 1
59145: NEG
59146: PUSH
59147: LD_INT 0
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 1
59156: NEG
59157: PUSH
59158: LD_INT 1
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 1
59168: NEG
59169: PUSH
59170: LD_INT 2
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 0
59180: PUSH
59181: LD_INT 2
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 1
59191: PUSH
59192: LD_INT 1
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 2
59202: PUSH
59203: LD_INT 0
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 2
59212: PUSH
59213: LD_INT 1
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 2
59222: PUSH
59223: LD_INT 2
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: LD_INT 2
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 0
59242: PUSH
59243: LD_INT 2
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: LD_INT 1
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 2
59263: NEG
59264: PUSH
59265: LD_INT 0
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 2
59274: NEG
59275: PUSH
59276: LD_INT 1
59278: NEG
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 2
59286: NEG
59287: PUSH
59288: LD_INT 2
59290: NEG
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59317: LD_ADDR_VAR 0 20
59321: PUSH
59322: LD_INT 0
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 0
59334: PUSH
59335: LD_INT 1
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 1
59345: PUSH
59346: LD_INT 0
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 1
59355: PUSH
59356: LD_INT 1
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 0
59365: PUSH
59366: LD_INT 1
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 1
59375: NEG
59376: PUSH
59377: LD_INT 0
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 1
59386: NEG
59387: PUSH
59388: LD_INT 1
59390: NEG
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 1
59398: NEG
59399: PUSH
59400: LD_INT 2
59402: NEG
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 0
59410: PUSH
59411: LD_INT 2
59413: NEG
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 1
59421: PUSH
59422: LD_INT 1
59424: NEG
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 2
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 2
59442: PUSH
59443: LD_INT 1
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 2
59452: PUSH
59453: LD_INT 2
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 1
59462: PUSH
59463: LD_INT 2
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 0
59472: PUSH
59473: LD_INT 2
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: LD_INT 1
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 2
59493: NEG
59494: PUSH
59495: LD_INT 0
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 2
59504: NEG
59505: PUSH
59506: LD_INT 1
59508: NEG
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 2
59516: NEG
59517: PUSH
59518: LD_INT 2
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59547: LD_ADDR_VAR 0 21
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 0
59564: PUSH
59565: LD_INT 1
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 1
59575: PUSH
59576: LD_INT 0
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 1
59585: PUSH
59586: LD_INT 1
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 1
59605: NEG
59606: PUSH
59607: LD_INT 0
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 1
59616: NEG
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 1
59628: NEG
59629: PUSH
59630: LD_INT 2
59632: NEG
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 0
59640: PUSH
59641: LD_INT 2
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: LD_INT 1
59654: NEG
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 2
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 2
59672: PUSH
59673: LD_INT 1
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 2
59682: PUSH
59683: LD_INT 2
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 1
59692: PUSH
59693: LD_INT 2
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: LD_INT 2
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 1
59712: NEG
59713: PUSH
59714: LD_INT 1
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 2
59723: NEG
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 2
59734: NEG
59735: PUSH
59736: LD_INT 1
59738: NEG
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 2
59746: NEG
59747: PUSH
59748: LD_INT 2
59750: NEG
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59777: LD_ADDR_VAR 0 22
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: LD_INT 0
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 0
59794: PUSH
59795: LD_INT 1
59797: NEG
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 1
59805: PUSH
59806: LD_INT 0
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 1
59815: PUSH
59816: LD_INT 1
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 0
59825: PUSH
59826: LD_INT 1
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 1
59835: NEG
59836: PUSH
59837: LD_INT 0
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 1
59846: NEG
59847: PUSH
59848: LD_INT 1
59850: NEG
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 1
59858: NEG
59859: PUSH
59860: LD_INT 2
59862: NEG
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: LD_INT 2
59873: NEG
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 1
59881: PUSH
59882: LD_INT 1
59884: NEG
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 2
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 2
59902: PUSH
59903: LD_INT 1
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 2
59912: PUSH
59913: LD_INT 2
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 1
59922: PUSH
59923: LD_INT 2
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 0
59932: PUSH
59933: LD_INT 2
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 1
59942: NEG
59943: PUSH
59944: LD_INT 1
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 2
59953: NEG
59954: PUSH
59955: LD_INT 0
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 2
59964: NEG
59965: PUSH
59966: LD_INT 1
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 2
59976: NEG
59977: PUSH
59978: LD_INT 2
59980: NEG
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60007: LD_ADDR_VAR 0 23
60011: PUSH
60012: LD_INT 0
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 0
60024: PUSH
60025: LD_INT 1
60027: NEG
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 1
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 1
60045: PUSH
60046: LD_INT 1
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: LD_INT 1
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 1
60065: NEG
60066: PUSH
60067: LD_INT 0
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 1
60076: NEG
60077: PUSH
60078: LD_INT 1
60080: NEG
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 1
60088: NEG
60089: PUSH
60090: LD_INT 2
60092: NEG
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 0
60100: PUSH
60101: LD_INT 2
60103: NEG
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 1
60111: PUSH
60112: LD_INT 1
60114: NEG
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 2
60122: PUSH
60123: LD_INT 0
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 2
60132: PUSH
60133: LD_INT 1
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 2
60142: PUSH
60143: LD_INT 2
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 1
60152: PUSH
60153: LD_INT 2
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 0
60162: PUSH
60163: LD_INT 2
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 1
60172: NEG
60173: PUSH
60174: LD_INT 1
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 2
60183: NEG
60184: PUSH
60185: LD_INT 0
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 2
60194: NEG
60195: PUSH
60196: LD_INT 1
60198: NEG
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 2
60206: NEG
60207: PUSH
60208: LD_INT 2
60210: NEG
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 2
60218: NEG
60219: PUSH
60220: LD_INT 3
60222: NEG
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 1
60230: NEG
60231: PUSH
60232: LD_INT 3
60234: NEG
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 1
60242: PUSH
60243: LD_INT 2
60245: NEG
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 2
60253: PUSH
60254: LD_INT 1
60256: NEG
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
60287: LD_ADDR_VAR 0 24
60291: PUSH
60292: LD_INT 0
60294: PUSH
60295: LD_INT 0
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 0
60304: PUSH
60305: LD_INT 1
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 1
60315: PUSH
60316: LD_INT 0
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 1
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 0
60335: PUSH
60336: LD_INT 1
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 1
60345: NEG
60346: PUSH
60347: LD_INT 0
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 1
60356: NEG
60357: PUSH
60358: LD_INT 1
60360: NEG
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 1
60368: NEG
60369: PUSH
60370: LD_INT 2
60372: NEG
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 0
60380: PUSH
60381: LD_INT 2
60383: NEG
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 1
60391: PUSH
60392: LD_INT 1
60394: NEG
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 2
60402: PUSH
60403: LD_INT 0
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 2
60412: PUSH
60413: LD_INT 1
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 2
60422: PUSH
60423: LD_INT 2
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 1
60432: PUSH
60433: LD_INT 2
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 0
60442: PUSH
60443: LD_INT 2
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 1
60452: NEG
60453: PUSH
60454: LD_INT 1
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 2
60463: NEG
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 2
60474: NEG
60475: PUSH
60476: LD_INT 1
60478: NEG
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 2
60486: NEG
60487: PUSH
60488: LD_INT 2
60490: NEG
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 1
60498: PUSH
60499: LD_INT 2
60501: NEG
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 2
60509: PUSH
60510: LD_INT 1
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 3
60520: PUSH
60521: LD_INT 1
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 3
60530: PUSH
60531: LD_INT 2
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
60563: LD_ADDR_VAR 0 25
60567: PUSH
60568: LD_INT 0
60570: PUSH
60571: LD_INT 0
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 0
60580: PUSH
60581: LD_INT 1
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 1
60591: PUSH
60592: LD_INT 0
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 1
60601: PUSH
60602: LD_INT 1
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 0
60611: PUSH
60612: LD_INT 1
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 1
60621: NEG
60622: PUSH
60623: LD_INT 0
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 1
60632: NEG
60633: PUSH
60634: LD_INT 1
60636: NEG
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 1
60644: NEG
60645: PUSH
60646: LD_INT 2
60648: NEG
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 0
60656: PUSH
60657: LD_INT 2
60659: NEG
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 1
60667: PUSH
60668: LD_INT 1
60670: NEG
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 2
60678: PUSH
60679: LD_INT 0
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 2
60688: PUSH
60689: LD_INT 1
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 2
60698: PUSH
60699: LD_INT 2
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 1
60708: PUSH
60709: LD_INT 2
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 0
60718: PUSH
60719: LD_INT 2
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 1
60728: NEG
60729: PUSH
60730: LD_INT 1
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 2
60739: NEG
60740: PUSH
60741: LD_INT 0
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 2
60750: NEG
60751: PUSH
60752: LD_INT 1
60754: NEG
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 2
60762: NEG
60763: PUSH
60764: LD_INT 2
60766: NEG
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 3
60774: PUSH
60775: LD_INT 1
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 3
60784: PUSH
60785: LD_INT 2
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 2
60794: PUSH
60795: LD_INT 3
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 1
60804: PUSH
60805: LD_INT 3
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60837: LD_ADDR_VAR 0 26
60841: PUSH
60842: LD_INT 0
60844: PUSH
60845: LD_INT 0
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 0
60854: PUSH
60855: LD_INT 1
60857: NEG
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 1
60865: PUSH
60866: LD_INT 0
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 1
60875: PUSH
60876: LD_INT 1
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 0
60885: PUSH
60886: LD_INT 1
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 1
60895: NEG
60896: PUSH
60897: LD_INT 0
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 1
60906: NEG
60907: PUSH
60908: LD_INT 1
60910: NEG
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 1
60918: NEG
60919: PUSH
60920: LD_INT 2
60922: NEG
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 0
60930: PUSH
60931: LD_INT 2
60933: NEG
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 1
60941: PUSH
60942: LD_INT 1
60944: NEG
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 2
60952: PUSH
60953: LD_INT 0
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 2
60962: PUSH
60963: LD_INT 1
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 2
60972: PUSH
60973: LD_INT 2
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 1
60982: PUSH
60983: LD_INT 2
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 0
60992: PUSH
60993: LD_INT 2
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 1
61002: NEG
61003: PUSH
61004: LD_INT 1
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 2
61013: NEG
61014: PUSH
61015: LD_INT 0
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 2
61024: NEG
61025: PUSH
61026: LD_INT 1
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 2
61036: NEG
61037: PUSH
61038: LD_INT 2
61040: NEG
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 2
61048: PUSH
61049: LD_INT 3
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 1
61058: PUSH
61059: LD_INT 3
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 1
61068: NEG
61069: PUSH
61070: LD_INT 2
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 2
61079: NEG
61080: PUSH
61081: LD_INT 1
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61113: LD_ADDR_VAR 0 27
61117: PUSH
61118: LD_INT 0
61120: PUSH
61121: LD_INT 0
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 0
61130: PUSH
61131: LD_INT 1
61133: NEG
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 1
61141: PUSH
61142: LD_INT 0
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 1
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 0
61161: PUSH
61162: LD_INT 1
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 1
61171: NEG
61172: PUSH
61173: LD_INT 0
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 1
61182: NEG
61183: PUSH
61184: LD_INT 1
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 1
61194: NEG
61195: PUSH
61196: LD_INT 2
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 0
61206: PUSH
61207: LD_INT 2
61209: NEG
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 1
61217: PUSH
61218: LD_INT 1
61220: NEG
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 2
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 2
61238: PUSH
61239: LD_INT 1
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 2
61248: PUSH
61249: LD_INT 2
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 1
61258: PUSH
61259: LD_INT 2
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 0
61268: PUSH
61269: LD_INT 2
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 1
61278: NEG
61279: PUSH
61280: LD_INT 1
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 2
61289: NEG
61290: PUSH
61291: LD_INT 0
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 2
61300: NEG
61301: PUSH
61302: LD_INT 1
61304: NEG
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 2
61312: NEG
61313: PUSH
61314: LD_INT 2
61316: NEG
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 1
61324: NEG
61325: PUSH
61326: LD_INT 2
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 2
61335: NEG
61336: PUSH
61337: LD_INT 1
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 3
61346: NEG
61347: PUSH
61348: LD_INT 1
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 3
61358: NEG
61359: PUSH
61360: LD_INT 2
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61393: LD_ADDR_VAR 0 28
61397: PUSH
61398: LD_INT 0
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 0
61410: PUSH
61411: LD_INT 1
61413: NEG
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 1
61421: PUSH
61422: LD_INT 0
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 1
61431: PUSH
61432: LD_INT 1
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: LD_INT 1
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 1
61451: NEG
61452: PUSH
61453: LD_INT 0
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 1
61462: NEG
61463: PUSH
61464: LD_INT 1
61466: NEG
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 1
61474: NEG
61475: PUSH
61476: LD_INT 2
61478: NEG
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 0
61486: PUSH
61487: LD_INT 2
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 1
61497: PUSH
61498: LD_INT 1
61500: NEG
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 2
61508: PUSH
61509: LD_INT 0
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 2
61518: PUSH
61519: LD_INT 1
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 2
61528: PUSH
61529: LD_INT 2
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 1
61538: PUSH
61539: LD_INT 2
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 0
61548: PUSH
61549: LD_INT 2
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 1
61558: NEG
61559: PUSH
61560: LD_INT 1
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 2
61569: NEG
61570: PUSH
61571: LD_INT 0
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 2
61580: NEG
61581: PUSH
61582: LD_INT 1
61584: NEG
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 2
61592: NEG
61593: PUSH
61594: LD_INT 2
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 2
61604: NEG
61605: PUSH
61606: LD_INT 3
61608: NEG
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 1
61616: NEG
61617: PUSH
61618: LD_INT 3
61620: NEG
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 3
61628: NEG
61629: PUSH
61630: LD_INT 1
61632: NEG
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 3
61640: NEG
61641: PUSH
61642: LD_INT 2
61644: NEG
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61675: LD_ADDR_VAR 0 29
61679: PUSH
61680: LD_INT 0
61682: PUSH
61683: LD_INT 0
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 0
61692: PUSH
61693: LD_INT 1
61695: NEG
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 1
61703: PUSH
61704: LD_INT 0
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 1
61713: PUSH
61714: LD_INT 1
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 0
61723: PUSH
61724: LD_INT 1
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 1
61733: NEG
61734: PUSH
61735: LD_INT 0
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 1
61744: NEG
61745: PUSH
61746: LD_INT 1
61748: NEG
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 1
61756: NEG
61757: PUSH
61758: LD_INT 2
61760: NEG
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 0
61768: PUSH
61769: LD_INT 2
61771: NEG
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 1
61779: PUSH
61780: LD_INT 1
61782: NEG
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 2
61790: PUSH
61791: LD_INT 0
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 2
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 1
61810: PUSH
61811: LD_INT 2
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: LD_INT 2
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 1
61830: NEG
61831: PUSH
61832: LD_INT 1
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 2
61841: NEG
61842: PUSH
61843: LD_INT 1
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 2
61853: NEG
61854: PUSH
61855: LD_INT 2
61857: NEG
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 2
61865: NEG
61866: PUSH
61867: LD_INT 3
61869: NEG
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 2
61877: PUSH
61878: LD_INT 1
61880: NEG
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 3
61888: PUSH
61889: LD_INT 1
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 1
61898: PUSH
61899: LD_INT 3
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 1
61908: NEG
61909: PUSH
61910: LD_INT 2
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 3
61919: NEG
61920: PUSH
61921: LD_INT 2
61923: NEG
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61954: LD_ADDR_VAR 0 30
61958: PUSH
61959: LD_INT 0
61961: PUSH
61962: LD_INT 0
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 0
61971: PUSH
61972: LD_INT 1
61974: NEG
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 1
61982: PUSH
61983: LD_INT 0
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 1
61992: PUSH
61993: LD_INT 1
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 0
62002: PUSH
62003: LD_INT 1
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 1
62012: NEG
62013: PUSH
62014: LD_INT 0
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 1
62023: NEG
62024: PUSH
62025: LD_INT 1
62027: NEG
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 1
62035: NEG
62036: PUSH
62037: LD_INT 2
62039: NEG
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 0
62047: PUSH
62048: LD_INT 2
62050: NEG
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 1
62058: PUSH
62059: LD_INT 1
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 2
62069: PUSH
62070: LD_INT 0
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 2
62079: PUSH
62080: LD_INT 1
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 2
62089: PUSH
62090: LD_INT 2
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 1
62099: PUSH
62100: LD_INT 2
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 1
62109: NEG
62110: PUSH
62111: LD_INT 1
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 2
62120: NEG
62121: PUSH
62122: LD_INT 0
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 2
62131: NEG
62132: PUSH
62133: LD_INT 1
62135: NEG
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 1
62143: NEG
62144: PUSH
62145: LD_INT 3
62147: NEG
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 1
62155: PUSH
62156: LD_INT 2
62158: NEG
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 3
62166: PUSH
62167: LD_INT 2
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 2
62176: PUSH
62177: LD_INT 3
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 2
62186: NEG
62187: PUSH
62188: LD_INT 1
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 3
62197: NEG
62198: PUSH
62199: LD_INT 1
62201: NEG
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62232: LD_ADDR_VAR 0 31
62236: PUSH
62237: LD_INT 0
62239: PUSH
62240: LD_INT 0
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 0
62249: PUSH
62250: LD_INT 1
62252: NEG
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 1
62260: PUSH
62261: LD_INT 0
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 1
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 0
62280: PUSH
62281: LD_INT 1
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 1
62290: NEG
62291: PUSH
62292: LD_INT 0
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 1
62301: NEG
62302: PUSH
62303: LD_INT 1
62305: NEG
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 1
62313: NEG
62314: PUSH
62315: LD_INT 2
62317: NEG
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 1
62325: PUSH
62326: LD_INT 1
62328: NEG
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 2
62336: PUSH
62337: LD_INT 0
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 2
62346: PUSH
62347: LD_INT 1
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 2
62356: PUSH
62357: LD_INT 2
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 1
62366: PUSH
62367: LD_INT 2
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 0
62376: PUSH
62377: LD_INT 2
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 1
62386: NEG
62387: PUSH
62388: LD_INT 1
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 2
62397: NEG
62398: PUSH
62399: LD_INT 1
62401: NEG
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 2
62409: NEG
62410: PUSH
62411: LD_INT 2
62413: NEG
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 2
62421: NEG
62422: PUSH
62423: LD_INT 3
62425: NEG
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 2
62433: PUSH
62434: LD_INT 1
62436: NEG
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 3
62444: PUSH
62445: LD_INT 1
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 1
62454: PUSH
62455: LD_INT 3
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 1
62464: NEG
62465: PUSH
62466: LD_INT 2
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 3
62475: NEG
62476: PUSH
62477: LD_INT 2
62479: NEG
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62510: LD_ADDR_VAR 0 32
62514: PUSH
62515: LD_INT 0
62517: PUSH
62518: LD_INT 0
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 0
62527: PUSH
62528: LD_INT 1
62530: NEG
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 1
62538: PUSH
62539: LD_INT 0
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 1
62548: PUSH
62549: LD_INT 1
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 0
62558: PUSH
62559: LD_INT 1
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 1
62568: NEG
62569: PUSH
62570: LD_INT 0
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 1
62579: NEG
62580: PUSH
62581: LD_INT 1
62583: NEG
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 1
62591: NEG
62592: PUSH
62593: LD_INT 2
62595: NEG
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 0
62603: PUSH
62604: LD_INT 2
62606: NEG
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 1
62614: PUSH
62615: LD_INT 1
62617: NEG
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 2
62625: PUSH
62626: LD_INT 1
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 2
62635: PUSH
62636: LD_INT 2
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 1
62645: PUSH
62646: LD_INT 2
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 0
62655: PUSH
62656: LD_INT 2
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 1
62665: NEG
62666: PUSH
62667: LD_INT 1
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 2
62676: NEG
62677: PUSH
62678: LD_INT 0
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 2
62687: NEG
62688: PUSH
62689: LD_INT 1
62691: NEG
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 1
62699: NEG
62700: PUSH
62701: LD_INT 3
62703: NEG
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 1
62711: PUSH
62712: LD_INT 2
62714: NEG
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 3
62722: PUSH
62723: LD_INT 2
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 2
62732: PUSH
62733: LD_INT 3
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 2
62742: NEG
62743: PUSH
62744: LD_INT 1
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 3
62753: NEG
62754: PUSH
62755: LD_INT 1
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62788: LD_ADDR_VAR 0 33
62792: PUSH
62793: LD_INT 0
62795: PUSH
62796: LD_INT 0
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 0
62805: PUSH
62806: LD_INT 1
62808: NEG
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 1
62816: PUSH
62817: LD_INT 0
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 1
62826: PUSH
62827: LD_INT 1
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 0
62836: PUSH
62837: LD_INT 1
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 1
62846: NEG
62847: PUSH
62848: LD_INT 0
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 1
62857: NEG
62858: PUSH
62859: LD_INT 1
62861: NEG
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 1
62869: NEG
62870: PUSH
62871: LD_INT 2
62873: NEG
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 1
62881: PUSH
62882: LD_INT 1
62884: NEG
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 2
62892: PUSH
62893: LD_INT 0
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PUSH
62900: LD_INT 2
62902: PUSH
62903: LD_INT 1
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 1
62912: PUSH
62913: LD_INT 2
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 0
62922: PUSH
62923: LD_INT 2
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 1
62932: NEG
62933: PUSH
62934: LD_INT 1
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 2
62943: NEG
62944: PUSH
62945: LD_INT 0
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 2
62954: NEG
62955: PUSH
62956: LD_INT 1
62958: NEG
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 2
62966: NEG
62967: PUSH
62968: LD_INT 2
62970: NEG
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 2
62978: NEG
62979: PUSH
62980: LD_INT 3
62982: NEG
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 2
62990: PUSH
62991: LD_INT 1
62993: NEG
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 3
63001: PUSH
63002: LD_INT 1
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 1
63011: PUSH
63012: LD_INT 3
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 1
63021: NEG
63022: PUSH
63023: LD_INT 2
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 3
63032: NEG
63033: PUSH
63034: LD_INT 2
63036: NEG
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63067: LD_ADDR_VAR 0 34
63071: PUSH
63072: LD_INT 0
63074: PUSH
63075: LD_INT 0
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 0
63084: PUSH
63085: LD_INT 1
63087: NEG
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 1
63095: PUSH
63096: LD_INT 0
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 1
63105: PUSH
63106: LD_INT 1
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 0
63115: PUSH
63116: LD_INT 1
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 1
63125: NEG
63126: PUSH
63127: LD_INT 0
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 1
63136: NEG
63137: PUSH
63138: LD_INT 1
63140: NEG
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 1
63148: NEG
63149: PUSH
63150: LD_INT 2
63152: NEG
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 0
63160: PUSH
63161: LD_INT 2
63163: NEG
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 1
63171: PUSH
63172: LD_INT 1
63174: NEG
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 2
63182: PUSH
63183: LD_INT 1
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 2
63192: PUSH
63193: LD_INT 2
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 1
63202: PUSH
63203: LD_INT 2
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 1
63212: NEG
63213: PUSH
63214: LD_INT 1
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 2
63223: NEG
63224: PUSH
63225: LD_INT 0
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 2
63234: NEG
63235: PUSH
63236: LD_INT 1
63238: NEG
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 2
63246: NEG
63247: PUSH
63248: LD_INT 2
63250: NEG
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 1
63258: NEG
63259: PUSH
63260: LD_INT 3
63262: NEG
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 1
63270: PUSH
63271: LD_INT 2
63273: NEG
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 3
63281: PUSH
63282: LD_INT 2
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 2
63291: PUSH
63292: LD_INT 3
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 2
63301: NEG
63302: PUSH
63303: LD_INT 1
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 3
63312: NEG
63313: PUSH
63314: LD_INT 1
63316: NEG
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63347: LD_ADDR_VAR 0 35
63351: PUSH
63352: LD_INT 0
63354: PUSH
63355: LD_INT 0
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 0
63364: PUSH
63365: LD_INT 1
63367: NEG
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: PUSH
63373: LD_INT 1
63375: PUSH
63376: LD_INT 0
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 1
63385: PUSH
63386: LD_INT 1
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 0
63395: PUSH
63396: LD_INT 1
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 1
63405: NEG
63406: PUSH
63407: LD_INT 0
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 1
63416: NEG
63417: PUSH
63418: LD_INT 1
63420: NEG
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 2
63428: PUSH
63429: LD_INT 1
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 2
63438: NEG
63439: PUSH
63440: LD_INT 1
63442: NEG
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63459: LD_ADDR_VAR 0 36
63463: PUSH
63464: LD_INT 0
63466: PUSH
63467: LD_INT 0
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 0
63476: PUSH
63477: LD_INT 1
63479: NEG
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 1
63487: PUSH
63488: LD_INT 0
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 1
63497: PUSH
63498: LD_INT 1
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 0
63507: PUSH
63508: LD_INT 1
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 1
63517: NEG
63518: PUSH
63519: LD_INT 0
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 1
63528: NEG
63529: PUSH
63530: LD_INT 1
63532: NEG
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 1
63540: NEG
63541: PUSH
63542: LD_INT 2
63544: NEG
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 1
63552: PUSH
63553: LD_INT 2
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63571: LD_ADDR_VAR 0 37
63575: PUSH
63576: LD_INT 0
63578: PUSH
63579: LD_INT 0
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 0
63588: PUSH
63589: LD_INT 1
63591: NEG
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 1
63599: PUSH
63600: LD_INT 0
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 1
63609: PUSH
63610: LD_INT 1
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 0
63619: PUSH
63620: LD_INT 1
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 1
63629: NEG
63630: PUSH
63631: LD_INT 0
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 1
63640: NEG
63641: PUSH
63642: LD_INT 1
63644: NEG
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 1
63652: PUSH
63653: LD_INT 1
63655: NEG
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 1
63663: NEG
63664: PUSH
63665: LD_INT 1
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63683: LD_ADDR_VAR 0 38
63687: PUSH
63688: LD_INT 0
63690: PUSH
63691: LD_INT 0
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 0
63700: PUSH
63701: LD_INT 1
63703: NEG
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 1
63711: PUSH
63712: LD_INT 0
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 1
63721: PUSH
63722: LD_INT 1
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 0
63731: PUSH
63732: LD_INT 1
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 1
63741: NEG
63742: PUSH
63743: LD_INT 0
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 1
63752: NEG
63753: PUSH
63754: LD_INT 1
63756: NEG
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 2
63764: PUSH
63765: LD_INT 1
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 2
63774: NEG
63775: PUSH
63776: LD_INT 1
63778: NEG
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63795: LD_ADDR_VAR 0 39
63799: PUSH
63800: LD_INT 0
63802: PUSH
63803: LD_INT 0
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 0
63812: PUSH
63813: LD_INT 1
63815: NEG
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 1
63823: PUSH
63824: LD_INT 0
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 1
63833: PUSH
63834: LD_INT 1
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 0
63843: PUSH
63844: LD_INT 1
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 1
63853: NEG
63854: PUSH
63855: LD_INT 0
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 1
63864: NEG
63865: PUSH
63866: LD_INT 1
63868: NEG
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 1
63876: NEG
63877: PUSH
63878: LD_INT 2
63880: NEG
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 1
63888: PUSH
63889: LD_INT 2
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63907: LD_ADDR_VAR 0 40
63911: PUSH
63912: LD_INT 0
63914: PUSH
63915: LD_INT 0
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 0
63924: PUSH
63925: LD_INT 1
63927: NEG
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 1
63935: PUSH
63936: LD_INT 0
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 1
63945: PUSH
63946: LD_INT 1
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 0
63955: PUSH
63956: LD_INT 1
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 1
63965: NEG
63966: PUSH
63967: LD_INT 0
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 1
63976: NEG
63977: PUSH
63978: LD_INT 1
63980: NEG
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 1
63988: PUSH
63989: LD_INT 1
63991: NEG
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 1
63999: NEG
64000: PUSH
64001: LD_INT 1
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64019: LD_ADDR_VAR 0 41
64023: PUSH
64024: LD_INT 0
64026: PUSH
64027: LD_INT 0
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 0
64036: PUSH
64037: LD_INT 1
64039: NEG
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 1
64047: PUSH
64048: LD_INT 0
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 1
64057: PUSH
64058: LD_INT 1
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 0
64067: PUSH
64068: LD_INT 1
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 1
64077: NEG
64078: PUSH
64079: LD_INT 0
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 1
64088: NEG
64089: PUSH
64090: LD_INT 1
64092: NEG
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 1
64100: NEG
64101: PUSH
64102: LD_INT 2
64104: NEG
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 1
64112: PUSH
64113: LD_INT 1
64115: NEG
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 2
64123: PUSH
64124: LD_INT 0
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 2
64133: PUSH
64134: LD_INT 1
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 2
64143: PUSH
64144: LD_INT 2
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_INT 1
64153: PUSH
64154: LD_INT 2
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 1
64163: NEG
64164: PUSH
64165: LD_INT 1
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 2
64174: NEG
64175: PUSH
64176: LD_INT 0
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 2
64185: NEG
64186: PUSH
64187: LD_INT 1
64189: NEG
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 2
64197: NEG
64198: PUSH
64199: LD_INT 2
64201: NEG
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 2
64209: NEG
64210: PUSH
64211: LD_INT 3
64213: NEG
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 2
64221: PUSH
64222: LD_INT 1
64224: NEG
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 3
64232: PUSH
64233: LD_INT 0
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 3
64242: PUSH
64243: LD_INT 1
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 3
64252: PUSH
64253: LD_INT 2
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 3
64262: PUSH
64263: LD_INT 3
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 2
64272: PUSH
64273: LD_INT 3
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 2
64282: NEG
64283: PUSH
64284: LD_INT 1
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 3
64293: NEG
64294: PUSH
64295: LD_INT 0
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 3
64304: NEG
64305: PUSH
64306: LD_INT 1
64308: NEG
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 3
64316: NEG
64317: PUSH
64318: LD_INT 2
64320: NEG
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 3
64328: NEG
64329: PUSH
64330: LD_INT 3
64332: NEG
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64369: LD_ADDR_VAR 0 42
64373: PUSH
64374: LD_INT 0
64376: PUSH
64377: LD_INT 0
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 0
64386: PUSH
64387: LD_INT 1
64389: NEG
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: LD_INT 1
64397: PUSH
64398: LD_INT 0
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 1
64407: PUSH
64408: LD_INT 1
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 0
64417: PUSH
64418: LD_INT 1
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 1
64427: NEG
64428: PUSH
64429: LD_INT 0
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 1
64438: NEG
64439: PUSH
64440: LD_INT 1
64442: NEG
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 1
64450: NEG
64451: PUSH
64452: LD_INT 2
64454: NEG
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 0
64462: PUSH
64463: LD_INT 2
64465: NEG
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 1
64473: PUSH
64474: LD_INT 1
64476: NEG
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 2
64484: PUSH
64485: LD_INT 1
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 2
64494: PUSH
64495: LD_INT 2
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 1
64504: PUSH
64505: LD_INT 2
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 0
64514: PUSH
64515: LD_INT 2
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 1
64524: NEG
64525: PUSH
64526: LD_INT 1
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 2
64535: NEG
64536: PUSH
64537: LD_INT 1
64539: NEG
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 2
64547: NEG
64548: PUSH
64549: LD_INT 2
64551: NEG
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 2
64559: NEG
64560: PUSH
64561: LD_INT 3
64563: NEG
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 1
64571: NEG
64572: PUSH
64573: LD_INT 3
64575: NEG
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 0
64583: PUSH
64584: LD_INT 3
64586: NEG
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 1
64594: PUSH
64595: LD_INT 2
64597: NEG
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 3
64605: PUSH
64606: LD_INT 2
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 3
64615: PUSH
64616: LD_INT 3
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 2
64625: PUSH
64626: LD_INT 3
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 1
64635: PUSH
64636: LD_INT 3
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 0
64645: PUSH
64646: LD_INT 3
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 1
64655: NEG
64656: PUSH
64657: LD_INT 2
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 3
64666: NEG
64667: PUSH
64668: LD_INT 2
64670: NEG
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 3
64678: NEG
64679: PUSH
64680: LD_INT 3
64682: NEG
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64719: LD_ADDR_VAR 0 43
64723: PUSH
64724: LD_INT 0
64726: PUSH
64727: LD_INT 0
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 0
64736: PUSH
64737: LD_INT 1
64739: NEG
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 1
64747: PUSH
64748: LD_INT 0
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 1
64757: PUSH
64758: LD_INT 1
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 0
64767: PUSH
64768: LD_INT 1
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 1
64777: NEG
64778: PUSH
64779: LD_INT 0
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 1
64788: NEG
64789: PUSH
64790: LD_INT 1
64792: NEG
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 1
64800: NEG
64801: PUSH
64802: LD_INT 2
64804: NEG
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 0
64812: PUSH
64813: LD_INT 2
64815: NEG
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 1
64823: PUSH
64824: LD_INT 1
64826: NEG
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 2
64834: PUSH
64835: LD_INT 0
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 2
64844: PUSH
64845: LD_INT 1
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 1
64854: PUSH
64855: LD_INT 2
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 0
64864: PUSH
64865: LD_INT 2
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 1
64874: NEG
64875: PUSH
64876: LD_INT 1
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 2
64885: NEG
64886: PUSH
64887: LD_INT 0
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 2
64896: NEG
64897: PUSH
64898: LD_INT 1
64900: NEG
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 1
64908: NEG
64909: PUSH
64910: LD_INT 3
64912: NEG
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 0
64920: PUSH
64921: LD_INT 3
64923: NEG
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 1
64931: PUSH
64932: LD_INT 2
64934: NEG
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 2
64942: PUSH
64943: LD_INT 1
64945: NEG
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 3
64953: PUSH
64954: LD_INT 0
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 3
64963: PUSH
64964: LD_INT 1
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 1
64973: PUSH
64974: LD_INT 3
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 0
64983: PUSH
64984: LD_INT 3
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 1
64993: NEG
64994: PUSH
64995: LD_INT 2
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 2
65004: NEG
65005: PUSH
65006: LD_INT 1
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 3
65015: NEG
65016: PUSH
65017: LD_INT 0
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 3
65026: NEG
65027: PUSH
65028: LD_INT 1
65030: NEG
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65067: LD_ADDR_VAR 0 44
65071: PUSH
65072: LD_INT 0
65074: PUSH
65075: LD_INT 0
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 0
65084: PUSH
65085: LD_INT 1
65087: NEG
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 1
65095: PUSH
65096: LD_INT 0
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 1
65105: PUSH
65106: LD_INT 1
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 0
65115: PUSH
65116: LD_INT 1
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 1
65125: NEG
65126: PUSH
65127: LD_INT 0
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: LD_INT 1
65136: NEG
65137: PUSH
65138: LD_INT 1
65140: NEG
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 1
65148: NEG
65149: PUSH
65150: LD_INT 2
65152: NEG
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PUSH
65158: LD_INT 1
65160: PUSH
65161: LD_INT 1
65163: NEG
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 2
65171: PUSH
65172: LD_INT 0
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 2
65181: PUSH
65182: LD_INT 1
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 2
65191: PUSH
65192: LD_INT 2
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 1
65201: PUSH
65202: LD_INT 2
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 1
65211: NEG
65212: PUSH
65213: LD_INT 1
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 2
65222: NEG
65223: PUSH
65224: LD_INT 0
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 2
65233: NEG
65234: PUSH
65235: LD_INT 1
65237: NEG
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 2
65245: NEG
65246: PUSH
65247: LD_INT 2
65249: NEG
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 2
65257: NEG
65258: PUSH
65259: LD_INT 3
65261: NEG
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 2
65269: PUSH
65270: LD_INT 1
65272: NEG
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 3
65280: PUSH
65281: LD_INT 0
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 3
65290: PUSH
65291: LD_INT 1
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 3
65300: PUSH
65301: LD_INT 2
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 3
65310: PUSH
65311: LD_INT 3
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 2
65320: PUSH
65321: LD_INT 3
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 2
65330: NEG
65331: PUSH
65332: LD_INT 1
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 3
65341: NEG
65342: PUSH
65343: LD_INT 0
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 3
65352: NEG
65353: PUSH
65354: LD_INT 1
65356: NEG
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 3
65364: NEG
65365: PUSH
65366: LD_INT 2
65368: NEG
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 3
65376: NEG
65377: PUSH
65378: LD_INT 3
65380: NEG
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: LIST
65390: LIST
65391: LIST
65392: LIST
65393: LIST
65394: LIST
65395: LIST
65396: LIST
65397: LIST
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: LIST
65403: LIST
65404: LIST
65405: LIST
65406: LIST
65407: LIST
65408: LIST
65409: LIST
65410: LIST
65411: LIST
65412: LIST
65413: LIST
65414: LIST
65415: LIST
65416: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65417: LD_ADDR_VAR 0 45
65421: PUSH
65422: LD_INT 0
65424: PUSH
65425: LD_INT 0
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 0
65434: PUSH
65435: LD_INT 1
65437: NEG
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 1
65445: PUSH
65446: LD_INT 0
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 1
65455: PUSH
65456: LD_INT 1
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 0
65465: PUSH
65466: LD_INT 1
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 1
65475: NEG
65476: PUSH
65477: LD_INT 0
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 1
65486: NEG
65487: PUSH
65488: LD_INT 1
65490: NEG
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 1
65498: NEG
65499: PUSH
65500: LD_INT 2
65502: NEG
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 0
65510: PUSH
65511: LD_INT 2
65513: NEG
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 1
65521: PUSH
65522: LD_INT 1
65524: NEG
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 2
65532: PUSH
65533: LD_INT 1
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 2
65542: PUSH
65543: LD_INT 2
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 1
65552: PUSH
65553: LD_INT 2
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 0
65562: PUSH
65563: LD_INT 2
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 1
65572: NEG
65573: PUSH
65574: LD_INT 1
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 2
65583: NEG
65584: PUSH
65585: LD_INT 1
65587: NEG
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 2
65595: NEG
65596: PUSH
65597: LD_INT 2
65599: NEG
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 2
65607: NEG
65608: PUSH
65609: LD_INT 3
65611: NEG
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 1
65619: NEG
65620: PUSH
65621: LD_INT 3
65623: NEG
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 0
65631: PUSH
65632: LD_INT 3
65634: NEG
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 1
65642: PUSH
65643: LD_INT 2
65645: NEG
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 3
65653: PUSH
65654: LD_INT 2
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: PUSH
65661: LD_INT 3
65663: PUSH
65664: LD_INT 3
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: LD_INT 2
65673: PUSH
65674: LD_INT 3
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: LD_INT 1
65683: PUSH
65684: LD_INT 3
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 0
65693: PUSH
65694: LD_INT 3
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 1
65703: NEG
65704: PUSH
65705: LD_INT 2
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 3
65714: NEG
65715: PUSH
65716: LD_INT 2
65718: NEG
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 3
65726: NEG
65727: PUSH
65728: LD_INT 3
65730: NEG
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65767: LD_ADDR_VAR 0 46
65771: PUSH
65772: LD_INT 0
65774: PUSH
65775: LD_INT 0
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 0
65784: PUSH
65785: LD_INT 1
65787: NEG
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 1
65795: PUSH
65796: LD_INT 0
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 1
65805: PUSH
65806: LD_INT 1
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 0
65815: PUSH
65816: LD_INT 1
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: PUSH
65823: LD_INT 1
65825: NEG
65826: PUSH
65827: LD_INT 0
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: LD_INT 1
65836: NEG
65837: PUSH
65838: LD_INT 1
65840: NEG
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: LD_INT 1
65848: NEG
65849: PUSH
65850: LD_INT 2
65852: NEG
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PUSH
65858: LD_INT 0
65860: PUSH
65861: LD_INT 2
65863: NEG
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 1
65871: PUSH
65872: LD_INT 1
65874: NEG
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 2
65882: PUSH
65883: LD_INT 0
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 2
65892: PUSH
65893: LD_INT 1
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 1
65902: PUSH
65903: LD_INT 2
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 0
65912: PUSH
65913: LD_INT 2
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 1
65922: NEG
65923: PUSH
65924: LD_INT 1
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: LD_INT 2
65933: NEG
65934: PUSH
65935: LD_INT 0
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 2
65944: NEG
65945: PUSH
65946: LD_INT 1
65948: NEG
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 1
65956: NEG
65957: PUSH
65958: LD_INT 3
65960: NEG
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: LD_INT 0
65968: PUSH
65969: LD_INT 3
65971: NEG
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: LD_INT 1
65979: PUSH
65980: LD_INT 2
65982: NEG
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 2
65990: PUSH
65991: LD_INT 1
65993: NEG
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 3
66001: PUSH
66002: LD_INT 0
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 3
66011: PUSH
66012: LD_INT 1
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 1
66021: PUSH
66022: LD_INT 3
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 0
66031: PUSH
66032: LD_INT 3
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 1
66041: NEG
66042: PUSH
66043: LD_INT 2
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 2
66052: NEG
66053: PUSH
66054: LD_INT 1
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 3
66063: NEG
66064: PUSH
66065: LD_INT 0
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 3
66074: NEG
66075: PUSH
66076: LD_INT 1
66078: NEG
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66115: LD_ADDR_VAR 0 47
66119: PUSH
66120: LD_INT 0
66122: PUSH
66123: LD_INT 0
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 0
66132: PUSH
66133: LD_INT 1
66135: NEG
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_INT 1
66143: PUSH
66144: LD_INT 0
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 1
66153: PUSH
66154: LD_INT 1
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: LD_INT 0
66163: PUSH
66164: LD_INT 1
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 1
66173: NEG
66174: PUSH
66175: LD_INT 0
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: PUSH
66182: LD_INT 1
66184: NEG
66185: PUSH
66186: LD_INT 1
66188: NEG
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 1
66196: NEG
66197: PUSH
66198: LD_INT 2
66200: NEG
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 0
66208: PUSH
66209: LD_INT 2
66211: NEG
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 1
66219: PUSH
66220: LD_INT 1
66222: NEG
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 2
66230: NEG
66231: PUSH
66232: LD_INT 1
66234: NEG
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 2
66242: NEG
66243: PUSH
66244: LD_INT 2
66246: NEG
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66266: LD_ADDR_VAR 0 48
66270: PUSH
66271: LD_INT 0
66273: PUSH
66274: LD_INT 0
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 0
66283: PUSH
66284: LD_INT 1
66286: NEG
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 1
66294: PUSH
66295: LD_INT 0
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 1
66304: PUSH
66305: LD_INT 1
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 0
66314: PUSH
66315: LD_INT 1
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 1
66324: NEG
66325: PUSH
66326: LD_INT 0
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 1
66335: NEG
66336: PUSH
66337: LD_INT 1
66339: NEG
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 1
66347: NEG
66348: PUSH
66349: LD_INT 2
66351: NEG
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 0
66359: PUSH
66360: LD_INT 2
66362: NEG
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: LD_INT 1
66370: PUSH
66371: LD_INT 1
66373: NEG
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: LD_INT 2
66381: PUSH
66382: LD_INT 0
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 2
66391: PUSH
66392: LD_INT 1
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66413: LD_ADDR_VAR 0 49
66417: PUSH
66418: LD_INT 0
66420: PUSH
66421: LD_INT 0
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 0
66430: PUSH
66431: LD_INT 1
66433: NEG
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: LD_INT 1
66441: PUSH
66442: LD_INT 0
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 1
66451: PUSH
66452: LD_INT 1
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 0
66461: PUSH
66462: LD_INT 1
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 1
66471: NEG
66472: PUSH
66473: LD_INT 0
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 1
66482: NEG
66483: PUSH
66484: LD_INT 1
66486: NEG
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 1
66494: PUSH
66495: LD_INT 1
66497: NEG
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 2
66505: PUSH
66506: LD_INT 0
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 2
66515: PUSH
66516: LD_INT 1
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 2
66525: PUSH
66526: LD_INT 2
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 1
66535: PUSH
66536: LD_INT 2
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: LIST
66555: LIST
66556: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66557: LD_ADDR_VAR 0 50
66561: PUSH
66562: LD_INT 0
66564: PUSH
66565: LD_INT 0
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: LD_INT 0
66574: PUSH
66575: LD_INT 1
66577: NEG
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: PUSH
66583: LD_INT 1
66585: PUSH
66586: LD_INT 0
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 1
66595: PUSH
66596: LD_INT 1
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 0
66605: PUSH
66606: LD_INT 1
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 1
66615: NEG
66616: PUSH
66617: LD_INT 0
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 1
66626: NEG
66627: PUSH
66628: LD_INT 1
66630: NEG
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 2
66638: PUSH
66639: LD_INT 1
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 2
66648: PUSH
66649: LD_INT 2
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 1
66658: PUSH
66659: LD_INT 2
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 0
66668: PUSH
66669: LD_INT 2
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: LD_INT 1
66678: NEG
66679: PUSH
66680: LD_INT 1
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66701: LD_ADDR_VAR 0 51
66705: PUSH
66706: LD_INT 0
66708: PUSH
66709: LD_INT 0
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: PUSH
66716: LD_INT 0
66718: PUSH
66719: LD_INT 1
66721: NEG
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: LD_INT 1
66729: PUSH
66730: LD_INT 0
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PUSH
66737: LD_INT 1
66739: PUSH
66740: LD_INT 1
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 0
66749: PUSH
66750: LD_INT 1
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 1
66759: NEG
66760: PUSH
66761: LD_INT 0
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 1
66770: NEG
66771: PUSH
66772: LD_INT 1
66774: NEG
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: LD_INT 1
66782: PUSH
66783: LD_INT 2
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: LD_INT 0
66792: PUSH
66793: LD_INT 2
66795: PUSH
66796: EMPTY
66797: LIST
66798: LIST
66799: PUSH
66800: LD_INT 1
66802: NEG
66803: PUSH
66804: LD_INT 1
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PUSH
66811: LD_INT 2
66813: NEG
66814: PUSH
66815: LD_INT 0
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: LD_INT 2
66824: NEG
66825: PUSH
66826: LD_INT 1
66828: NEG
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66848: LD_ADDR_VAR 0 52
66852: PUSH
66853: LD_INT 0
66855: PUSH
66856: LD_INT 0
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 0
66865: PUSH
66866: LD_INT 1
66868: NEG
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 1
66876: PUSH
66877: LD_INT 0
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: LD_INT 1
66886: PUSH
66887: LD_INT 1
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 0
66896: PUSH
66897: LD_INT 1
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: LD_INT 1
66906: NEG
66907: PUSH
66908: LD_INT 0
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 1
66917: NEG
66918: PUSH
66919: LD_INT 1
66921: NEG
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: LD_INT 1
66929: NEG
66930: PUSH
66931: LD_INT 2
66933: NEG
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 1
66941: NEG
66942: PUSH
66943: LD_INT 1
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 2
66952: NEG
66953: PUSH
66954: LD_INT 0
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: LD_INT 2
66963: NEG
66964: PUSH
66965: LD_INT 1
66967: NEG
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: PUSH
66973: LD_INT 2
66975: NEG
66976: PUSH
66977: LD_INT 2
66979: NEG
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: LIST
66994: LIST
66995: LIST
66996: LIST
66997: LIST
66998: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66999: LD_ADDR_VAR 0 53
67003: PUSH
67004: LD_INT 0
67006: PUSH
67007: LD_INT 0
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: PUSH
67014: LD_INT 0
67016: PUSH
67017: LD_INT 1
67019: NEG
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: LD_INT 1
67027: PUSH
67028: LD_INT 0
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 1
67037: PUSH
67038: LD_INT 1
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: PUSH
67045: LD_INT 0
67047: PUSH
67048: LD_INT 1
67050: PUSH
67051: EMPTY
67052: LIST
67053: LIST
67054: PUSH
67055: LD_INT 1
67057: NEG
67058: PUSH
67059: LD_INT 0
67061: PUSH
67062: EMPTY
67063: LIST
67064: LIST
67065: PUSH
67066: LD_INT 1
67068: NEG
67069: PUSH
67070: LD_INT 1
67072: NEG
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 1
67080: NEG
67081: PUSH
67082: LD_INT 2
67084: NEG
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: LD_INT 0
67092: PUSH
67093: LD_INT 2
67095: NEG
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 1
67103: PUSH
67104: LD_INT 1
67106: NEG
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: PUSH
67112: LD_INT 2
67114: PUSH
67115: LD_INT 0
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 2
67124: PUSH
67125: LD_INT 1
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 2
67134: PUSH
67135: LD_INT 2
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: LD_INT 1
67144: PUSH
67145: LD_INT 2
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 0
67154: PUSH
67155: LD_INT 2
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: LD_INT 1
67164: NEG
67165: PUSH
67166: LD_INT 1
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: LD_INT 2
67175: NEG
67176: PUSH
67177: LD_INT 0
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PUSH
67184: LD_INT 2
67186: NEG
67187: PUSH
67188: LD_INT 1
67190: NEG
67191: PUSH
67192: EMPTY
67193: LIST
67194: LIST
67195: PUSH
67196: LD_INT 2
67198: NEG
67199: PUSH
67200: LD_INT 2
67202: NEG
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: LIST
67218: LIST
67219: LIST
67220: LIST
67221: LIST
67222: LIST
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67229: LD_ADDR_VAR 0 54
67233: PUSH
67234: LD_INT 0
67236: PUSH
67237: LD_INT 0
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: LD_INT 0
67246: PUSH
67247: LD_INT 1
67249: NEG
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: LD_INT 1
67257: PUSH
67258: LD_INT 0
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 1
67267: PUSH
67268: LD_INT 1
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: LD_INT 0
67277: PUSH
67278: LD_INT 1
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: LD_INT 1
67287: NEG
67288: PUSH
67289: LD_INT 0
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: LD_INT 1
67298: NEG
67299: PUSH
67300: LD_INT 1
67302: NEG
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 1
67310: NEG
67311: PUSH
67312: LD_INT 2
67314: NEG
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 0
67322: PUSH
67323: LD_INT 2
67325: NEG
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 1
67333: PUSH
67334: LD_INT 1
67336: NEG
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: LD_INT 2
67344: PUSH
67345: LD_INT 0
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: LD_INT 2
67354: PUSH
67355: LD_INT 1
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 2
67364: PUSH
67365: LD_INT 2
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 1
67374: PUSH
67375: LD_INT 2
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 0
67384: PUSH
67385: LD_INT 2
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: LD_INT 1
67394: NEG
67395: PUSH
67396: LD_INT 1
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 2
67405: NEG
67406: PUSH
67407: LD_INT 0
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: LD_INT 2
67416: NEG
67417: PUSH
67418: LD_INT 1
67420: NEG
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PUSH
67426: LD_INT 2
67428: NEG
67429: PUSH
67430: LD_INT 2
67432: NEG
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: LIST
67442: LIST
67443: LIST
67444: LIST
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67459: LD_ADDR_VAR 0 55
67463: PUSH
67464: LD_INT 0
67466: PUSH
67467: LD_INT 0
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: LD_INT 0
67476: PUSH
67477: LD_INT 1
67479: NEG
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: LD_INT 1
67487: PUSH
67488: LD_INT 0
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 1
67497: PUSH
67498: LD_INT 1
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 0
67507: PUSH
67508: LD_INT 1
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PUSH
67515: LD_INT 1
67517: NEG
67518: PUSH
67519: LD_INT 0
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: PUSH
67526: LD_INT 1
67528: NEG
67529: PUSH
67530: LD_INT 1
67532: NEG
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: LD_INT 1
67540: NEG
67541: PUSH
67542: LD_INT 2
67544: NEG
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 0
67552: PUSH
67553: LD_INT 2
67555: NEG
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 1
67563: PUSH
67564: LD_INT 1
67566: NEG
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: LD_INT 2
67574: PUSH
67575: LD_INT 0
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: LD_INT 2
67584: PUSH
67585: LD_INT 1
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 2
67594: PUSH
67595: LD_INT 2
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 1
67604: PUSH
67605: LD_INT 2
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: LD_INT 0
67614: PUSH
67615: LD_INT 2
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 1
67624: NEG
67625: PUSH
67626: LD_INT 1
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 2
67635: NEG
67636: PUSH
67637: LD_INT 0
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 2
67646: NEG
67647: PUSH
67648: LD_INT 1
67650: NEG
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 2
67658: NEG
67659: PUSH
67660: LD_INT 2
67662: NEG
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: LIST
67678: LIST
67679: LIST
67680: LIST
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67689: LD_ADDR_VAR 0 56
67693: PUSH
67694: LD_INT 0
67696: PUSH
67697: LD_INT 0
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: LD_INT 0
67706: PUSH
67707: LD_INT 1
67709: NEG
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 1
67717: PUSH
67718: LD_INT 0
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 1
67727: PUSH
67728: LD_INT 1
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: PUSH
67735: LD_INT 0
67737: PUSH
67738: LD_INT 1
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: LD_INT 1
67747: NEG
67748: PUSH
67749: LD_INT 0
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: LD_INT 1
67758: NEG
67759: PUSH
67760: LD_INT 1
67762: NEG
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: LD_INT 1
67770: NEG
67771: PUSH
67772: LD_INT 2
67774: NEG
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: LD_INT 0
67782: PUSH
67783: LD_INT 2
67785: NEG
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 1
67793: PUSH
67794: LD_INT 1
67796: NEG
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 2
67804: PUSH
67805: LD_INT 0
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 2
67814: PUSH
67815: LD_INT 1
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PUSH
67822: LD_INT 2
67824: PUSH
67825: LD_INT 2
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: PUSH
67832: LD_INT 1
67834: PUSH
67835: LD_INT 2
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: LD_INT 0
67844: PUSH
67845: LD_INT 2
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 1
67854: NEG
67855: PUSH
67856: LD_INT 1
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_INT 2
67865: NEG
67866: PUSH
67867: LD_INT 0
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 2
67876: NEG
67877: PUSH
67878: LD_INT 1
67880: NEG
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 2
67888: NEG
67889: PUSH
67890: LD_INT 2
67892: NEG
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67919: LD_ADDR_VAR 0 57
67923: PUSH
67924: LD_INT 0
67926: PUSH
67927: LD_INT 0
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: PUSH
67934: LD_INT 0
67936: PUSH
67937: LD_INT 1
67939: NEG
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 1
67947: PUSH
67948: LD_INT 0
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 1
67957: PUSH
67958: LD_INT 1
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 0
67967: PUSH
67968: LD_INT 1
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 1
67977: NEG
67978: PUSH
67979: LD_INT 0
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 1
67988: NEG
67989: PUSH
67990: LD_INT 1
67992: NEG
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 1
68000: NEG
68001: PUSH
68002: LD_INT 2
68004: NEG
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 0
68012: PUSH
68013: LD_INT 2
68015: NEG
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PUSH
68021: LD_INT 1
68023: PUSH
68024: LD_INT 1
68026: NEG
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: LD_INT 2
68034: PUSH
68035: LD_INT 0
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: LD_INT 2
68044: PUSH
68045: LD_INT 1
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 2
68054: PUSH
68055: LD_INT 2
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: LD_INT 1
68064: PUSH
68065: LD_INT 2
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 0
68074: PUSH
68075: LD_INT 2
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 1
68084: NEG
68085: PUSH
68086: LD_INT 1
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: PUSH
68093: LD_INT 2
68095: NEG
68096: PUSH
68097: LD_INT 0
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: LD_INT 2
68106: NEG
68107: PUSH
68108: LD_INT 1
68110: NEG
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 2
68118: NEG
68119: PUSH
68120: LD_INT 2
68122: NEG
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68149: LD_ADDR_VAR 0 58
68153: PUSH
68154: LD_INT 0
68156: PUSH
68157: LD_INT 0
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 0
68166: PUSH
68167: LD_INT 1
68169: NEG
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 1
68177: PUSH
68178: LD_INT 0
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 1
68187: PUSH
68188: LD_INT 1
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PUSH
68195: LD_INT 0
68197: PUSH
68198: LD_INT 1
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: LD_INT 1
68207: NEG
68208: PUSH
68209: LD_INT 0
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: PUSH
68216: LD_INT 1
68218: NEG
68219: PUSH
68220: LD_INT 1
68222: NEG
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: LD_INT 1
68230: NEG
68231: PUSH
68232: LD_INT 2
68234: NEG
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 0
68242: PUSH
68243: LD_INT 2
68245: NEG
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 1
68253: PUSH
68254: LD_INT 1
68256: NEG
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 2
68264: PUSH
68265: LD_INT 0
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 2
68274: PUSH
68275: LD_INT 1
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 2
68284: PUSH
68285: LD_INT 2
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 1
68294: PUSH
68295: LD_INT 2
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 0
68304: PUSH
68305: LD_INT 2
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_INT 1
68314: NEG
68315: PUSH
68316: LD_INT 1
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: PUSH
68323: LD_INT 2
68325: NEG
68326: PUSH
68327: LD_INT 0
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: PUSH
68334: LD_INT 2
68336: NEG
68337: PUSH
68338: LD_INT 1
68340: NEG
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: LD_INT 2
68348: NEG
68349: PUSH
68350: LD_INT 2
68352: NEG
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68379: LD_ADDR_VAR 0 59
68383: PUSH
68384: LD_INT 0
68386: PUSH
68387: LD_INT 0
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: LD_INT 0
68396: PUSH
68397: LD_INT 1
68399: NEG
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PUSH
68405: LD_INT 1
68407: PUSH
68408: LD_INT 0
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: LD_INT 1
68417: PUSH
68418: LD_INT 1
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 0
68427: PUSH
68428: LD_INT 1
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: PUSH
68435: LD_INT 1
68437: NEG
68438: PUSH
68439: LD_INT 0
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: LD_INT 1
68448: NEG
68449: PUSH
68450: LD_INT 1
68452: NEG
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68467: LD_ADDR_VAR 0 60
68471: PUSH
68472: LD_INT 0
68474: PUSH
68475: LD_INT 0
68477: PUSH
68478: EMPTY
68479: LIST
68480: LIST
68481: PUSH
68482: LD_INT 0
68484: PUSH
68485: LD_INT 1
68487: NEG
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: PUSH
68493: LD_INT 1
68495: PUSH
68496: LD_INT 0
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PUSH
68503: LD_INT 1
68505: PUSH
68506: LD_INT 1
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PUSH
68513: LD_INT 0
68515: PUSH
68516: LD_INT 1
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PUSH
68523: LD_INT 1
68525: NEG
68526: PUSH
68527: LD_INT 0
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: LD_INT 1
68536: NEG
68537: PUSH
68538: LD_INT 1
68540: NEG
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68555: LD_ADDR_VAR 0 61
68559: PUSH
68560: LD_INT 0
68562: PUSH
68563: LD_INT 0
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: LD_INT 0
68572: PUSH
68573: LD_INT 1
68575: NEG
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 1
68583: PUSH
68584: LD_INT 0
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 1
68593: PUSH
68594: LD_INT 1
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 0
68603: PUSH
68604: LD_INT 1
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: PUSH
68611: LD_INT 1
68613: NEG
68614: PUSH
68615: LD_INT 0
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: PUSH
68622: LD_INT 1
68624: NEG
68625: PUSH
68626: LD_INT 1
68628: NEG
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: LIST
68638: LIST
68639: LIST
68640: LIST
68641: LIST
68642: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68643: LD_ADDR_VAR 0 62
68647: PUSH
68648: LD_INT 0
68650: PUSH
68651: LD_INT 0
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PUSH
68658: LD_INT 0
68660: PUSH
68661: LD_INT 1
68663: NEG
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PUSH
68669: LD_INT 1
68671: PUSH
68672: LD_INT 0
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: PUSH
68679: LD_INT 1
68681: PUSH
68682: LD_INT 1
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 0
68691: PUSH
68692: LD_INT 1
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: LD_INT 1
68701: NEG
68702: PUSH
68703: LD_INT 0
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: LD_INT 1
68712: NEG
68713: PUSH
68714: LD_INT 1
68716: NEG
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: EMPTY
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68731: LD_ADDR_VAR 0 63
68735: PUSH
68736: LD_INT 0
68738: PUSH
68739: LD_INT 0
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PUSH
68746: LD_INT 0
68748: PUSH
68749: LD_INT 1
68751: NEG
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: LD_INT 1
68759: PUSH
68760: LD_INT 0
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: PUSH
68767: LD_INT 1
68769: PUSH
68770: LD_INT 1
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: LD_INT 0
68779: PUSH
68780: LD_INT 1
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 1
68789: NEG
68790: PUSH
68791: LD_INT 0
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 1
68800: NEG
68801: PUSH
68802: LD_INT 1
68804: NEG
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68819: LD_ADDR_VAR 0 64
68823: PUSH
68824: LD_INT 0
68826: PUSH
68827: LD_INT 0
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: LD_INT 0
68836: PUSH
68837: LD_INT 1
68839: NEG
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: PUSH
68845: LD_INT 1
68847: PUSH
68848: LD_INT 0
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: LD_INT 1
68857: PUSH
68858: LD_INT 1
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 0
68867: PUSH
68868: LD_INT 1
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 1
68877: NEG
68878: PUSH
68879: LD_INT 0
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PUSH
68886: LD_INT 1
68888: NEG
68889: PUSH
68890: LD_INT 1
68892: NEG
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: LIST
68902: LIST
68903: LIST
68904: LIST
68905: LIST
68906: ST_TO_ADDR
// end ; 1 :
68907: GO 74804
68909: LD_INT 1
68911: DOUBLE
68912: EQUAL
68913: IFTRUE 68917
68915: GO 71540
68917: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68918: LD_ADDR_VAR 0 11
68922: PUSH
68923: LD_INT 1
68925: NEG
68926: PUSH
68927: LD_INT 3
68929: NEG
68930: PUSH
68931: EMPTY
68932: LIST
68933: LIST
68934: PUSH
68935: LD_INT 0
68937: PUSH
68938: LD_INT 3
68940: NEG
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PUSH
68946: LD_INT 1
68948: PUSH
68949: LD_INT 2
68951: NEG
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: LIST
68961: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68962: LD_ADDR_VAR 0 12
68966: PUSH
68967: LD_INT 2
68969: PUSH
68970: LD_INT 1
68972: NEG
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: LD_INT 3
68980: PUSH
68981: LD_INT 0
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: LD_INT 3
68990: PUSH
68991: LD_INT 1
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: LIST
69002: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69003: LD_ADDR_VAR 0 13
69007: PUSH
69008: LD_INT 3
69010: PUSH
69011: LD_INT 2
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 3
69020: PUSH
69021: LD_INT 3
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 2
69030: PUSH
69031: LD_INT 3
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: LIST
69042: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69043: LD_ADDR_VAR 0 14
69047: PUSH
69048: LD_INT 1
69050: PUSH
69051: LD_INT 3
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: LD_INT 0
69060: PUSH
69061: LD_INT 3
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: PUSH
69068: LD_INT 1
69070: NEG
69071: PUSH
69072: LD_INT 2
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: LIST
69083: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69084: LD_ADDR_VAR 0 15
69088: PUSH
69089: LD_INT 2
69091: NEG
69092: PUSH
69093: LD_INT 1
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 3
69102: NEG
69103: PUSH
69104: LD_INT 0
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: LD_INT 3
69113: NEG
69114: PUSH
69115: LD_INT 1
69117: NEG
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: LIST
69127: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69128: LD_ADDR_VAR 0 16
69132: PUSH
69133: LD_INT 2
69135: NEG
69136: PUSH
69137: LD_INT 3
69139: NEG
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 3
69147: NEG
69148: PUSH
69149: LD_INT 2
69151: NEG
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_INT 3
69159: NEG
69160: PUSH
69161: LD_INT 3
69163: NEG
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: LIST
69173: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69174: LD_ADDR_VAR 0 17
69178: PUSH
69179: LD_INT 1
69181: NEG
69182: PUSH
69183: LD_INT 3
69185: NEG
69186: PUSH
69187: EMPTY
69188: LIST
69189: LIST
69190: PUSH
69191: LD_INT 0
69193: PUSH
69194: LD_INT 3
69196: NEG
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: PUSH
69202: LD_INT 1
69204: PUSH
69205: LD_INT 2
69207: NEG
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: LIST
69217: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69218: LD_ADDR_VAR 0 18
69222: PUSH
69223: LD_INT 2
69225: PUSH
69226: LD_INT 1
69228: NEG
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: LD_INT 3
69236: PUSH
69237: LD_INT 0
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: PUSH
69244: LD_INT 3
69246: PUSH
69247: LD_INT 1
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: LIST
69258: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69259: LD_ADDR_VAR 0 19
69263: PUSH
69264: LD_INT 3
69266: PUSH
69267: LD_INT 2
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 3
69276: PUSH
69277: LD_INT 3
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: LD_INT 2
69286: PUSH
69287: LD_INT 3
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: LIST
69298: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69299: LD_ADDR_VAR 0 20
69303: PUSH
69304: LD_INT 1
69306: PUSH
69307: LD_INT 3
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 0
69316: PUSH
69317: LD_INT 3
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: LD_INT 1
69326: NEG
69327: PUSH
69328: LD_INT 2
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: LIST
69339: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69340: LD_ADDR_VAR 0 21
69344: PUSH
69345: LD_INT 2
69347: NEG
69348: PUSH
69349: LD_INT 1
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 3
69358: NEG
69359: PUSH
69360: LD_INT 0
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: LD_INT 3
69369: NEG
69370: PUSH
69371: LD_INT 1
69373: NEG
69374: PUSH
69375: EMPTY
69376: LIST
69377: LIST
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: LIST
69383: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69384: LD_ADDR_VAR 0 22
69388: PUSH
69389: LD_INT 2
69391: NEG
69392: PUSH
69393: LD_INT 3
69395: NEG
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 3
69403: NEG
69404: PUSH
69405: LD_INT 2
69407: NEG
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: LD_INT 3
69415: NEG
69416: PUSH
69417: LD_INT 3
69419: NEG
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: LIST
69429: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
69430: LD_ADDR_VAR 0 23
69434: PUSH
69435: LD_INT 0
69437: PUSH
69438: LD_INT 3
69440: NEG
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 1
69448: NEG
69449: PUSH
69450: LD_INT 4
69452: NEG
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 1
69460: PUSH
69461: LD_INT 3
69463: NEG
69464: PUSH
69465: EMPTY
69466: LIST
69467: LIST
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: LIST
69473: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
69474: LD_ADDR_VAR 0 24
69478: PUSH
69479: LD_INT 3
69481: PUSH
69482: LD_INT 0
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 3
69491: PUSH
69492: LD_INT 1
69494: NEG
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: PUSH
69500: LD_INT 4
69502: PUSH
69503: LD_INT 1
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: PUSH
69510: EMPTY
69511: LIST
69512: LIST
69513: LIST
69514: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
69515: LD_ADDR_VAR 0 25
69519: PUSH
69520: LD_INT 3
69522: PUSH
69523: LD_INT 3
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: PUSH
69530: LD_INT 4
69532: PUSH
69533: LD_INT 3
69535: PUSH
69536: EMPTY
69537: LIST
69538: LIST
69539: PUSH
69540: LD_INT 3
69542: PUSH
69543: LD_INT 4
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: LIST
69554: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
69555: LD_ADDR_VAR 0 26
69559: PUSH
69560: LD_INT 0
69562: PUSH
69563: LD_INT 3
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PUSH
69570: LD_INT 1
69572: PUSH
69573: LD_INT 4
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 1
69582: NEG
69583: PUSH
69584: LD_INT 3
69586: PUSH
69587: EMPTY
69588: LIST
69589: LIST
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: LIST
69595: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
69596: LD_ADDR_VAR 0 27
69600: PUSH
69601: LD_INT 3
69603: NEG
69604: PUSH
69605: LD_INT 0
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: PUSH
69612: LD_INT 3
69614: NEG
69615: PUSH
69616: LD_INT 1
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: PUSH
69623: LD_INT 4
69625: NEG
69626: PUSH
69627: LD_INT 1
69629: NEG
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: LIST
69639: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
69640: LD_ADDR_VAR 0 28
69644: PUSH
69645: LD_INT 3
69647: NEG
69648: PUSH
69649: LD_INT 3
69651: NEG
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PUSH
69657: LD_INT 3
69659: NEG
69660: PUSH
69661: LD_INT 4
69663: NEG
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: PUSH
69669: LD_INT 4
69671: NEG
69672: PUSH
69673: LD_INT 3
69675: NEG
69676: PUSH
69677: EMPTY
69678: LIST
69679: LIST
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: LIST
69685: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
69686: LD_ADDR_VAR 0 29
69690: PUSH
69691: LD_INT 1
69693: NEG
69694: PUSH
69695: LD_INT 3
69697: NEG
69698: PUSH
69699: EMPTY
69700: LIST
69701: LIST
69702: PUSH
69703: LD_INT 0
69705: PUSH
69706: LD_INT 3
69708: NEG
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: PUSH
69714: LD_INT 1
69716: PUSH
69717: LD_INT 2
69719: NEG
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: PUSH
69725: LD_INT 1
69727: NEG
69728: PUSH
69729: LD_INT 4
69731: NEG
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: PUSH
69737: LD_INT 0
69739: PUSH
69740: LD_INT 4
69742: NEG
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: PUSH
69748: LD_INT 1
69750: PUSH
69751: LD_INT 3
69753: NEG
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: LD_INT 1
69761: NEG
69762: PUSH
69763: LD_INT 5
69765: NEG
69766: PUSH
69767: EMPTY
69768: LIST
69769: LIST
69770: PUSH
69771: LD_INT 0
69773: PUSH
69774: LD_INT 5
69776: NEG
69777: PUSH
69778: EMPTY
69779: LIST
69780: LIST
69781: PUSH
69782: LD_INT 1
69784: PUSH
69785: LD_INT 4
69787: NEG
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: PUSH
69793: LD_INT 1
69795: NEG
69796: PUSH
69797: LD_INT 6
69799: NEG
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PUSH
69805: LD_INT 0
69807: PUSH
69808: LD_INT 6
69810: NEG
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: PUSH
69816: LD_INT 1
69818: PUSH
69819: LD_INT 5
69821: NEG
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: LIST
69831: LIST
69832: LIST
69833: LIST
69834: LIST
69835: LIST
69836: LIST
69837: LIST
69838: LIST
69839: LIST
69840: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
69841: LD_ADDR_VAR 0 30
69845: PUSH
69846: LD_INT 2
69848: PUSH
69849: LD_INT 1
69851: NEG
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: PUSH
69857: LD_INT 3
69859: PUSH
69860: LD_INT 0
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: PUSH
69867: LD_INT 3
69869: PUSH
69870: LD_INT 1
69872: PUSH
69873: EMPTY
69874: LIST
69875: LIST
69876: PUSH
69877: LD_INT 3
69879: PUSH
69880: LD_INT 1
69882: NEG
69883: PUSH
69884: EMPTY
69885: LIST
69886: LIST
69887: PUSH
69888: LD_INT 4
69890: PUSH
69891: LD_INT 0
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PUSH
69898: LD_INT 4
69900: PUSH
69901: LD_INT 1
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: PUSH
69908: LD_INT 4
69910: PUSH
69911: LD_INT 1
69913: NEG
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: PUSH
69919: LD_INT 5
69921: PUSH
69922: LD_INT 0
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: PUSH
69929: LD_INT 5
69931: PUSH
69932: LD_INT 1
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: PUSH
69939: LD_INT 5
69941: PUSH
69942: LD_INT 1
69944: NEG
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: PUSH
69950: LD_INT 6
69952: PUSH
69953: LD_INT 0
69955: PUSH
69956: EMPTY
69957: LIST
69958: LIST
69959: PUSH
69960: LD_INT 6
69962: PUSH
69963: LD_INT 1
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: LIST
69974: LIST
69975: LIST
69976: LIST
69977: LIST
69978: LIST
69979: LIST
69980: LIST
69981: LIST
69982: LIST
69983: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
69984: LD_ADDR_VAR 0 31
69988: PUSH
69989: LD_INT 3
69991: PUSH
69992: LD_INT 2
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: PUSH
69999: LD_INT 3
70001: PUSH
70002: LD_INT 3
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: PUSH
70009: LD_INT 2
70011: PUSH
70012: LD_INT 3
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: PUSH
70019: LD_INT 4
70021: PUSH
70022: LD_INT 3
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: PUSH
70029: LD_INT 4
70031: PUSH
70032: LD_INT 4
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: PUSH
70039: LD_INT 3
70041: PUSH
70042: LD_INT 4
70044: PUSH
70045: EMPTY
70046: LIST
70047: LIST
70048: PUSH
70049: LD_INT 5
70051: PUSH
70052: LD_INT 4
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: PUSH
70059: LD_INT 5
70061: PUSH
70062: LD_INT 5
70064: PUSH
70065: EMPTY
70066: LIST
70067: LIST
70068: PUSH
70069: LD_INT 4
70071: PUSH
70072: LD_INT 5
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: LD_INT 6
70081: PUSH
70082: LD_INT 5
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PUSH
70089: LD_INT 6
70091: PUSH
70092: LD_INT 6
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: LD_INT 5
70101: PUSH
70102: LD_INT 6
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: LIST
70113: LIST
70114: LIST
70115: LIST
70116: LIST
70117: LIST
70118: LIST
70119: LIST
70120: LIST
70121: LIST
70122: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
70123: LD_ADDR_VAR 0 32
70127: PUSH
70128: LD_INT 1
70130: PUSH
70131: LD_INT 3
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: PUSH
70138: LD_INT 0
70140: PUSH
70141: LD_INT 3
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: PUSH
70148: LD_INT 1
70150: NEG
70151: PUSH
70152: LD_INT 2
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: PUSH
70159: LD_INT 1
70161: PUSH
70162: LD_INT 4
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: PUSH
70169: LD_INT 0
70171: PUSH
70172: LD_INT 4
70174: PUSH
70175: EMPTY
70176: LIST
70177: LIST
70178: PUSH
70179: LD_INT 1
70181: NEG
70182: PUSH
70183: LD_INT 3
70185: PUSH
70186: EMPTY
70187: LIST
70188: LIST
70189: PUSH
70190: LD_INT 1
70192: PUSH
70193: LD_INT 5
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: LD_INT 0
70202: PUSH
70203: LD_INT 5
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: LD_INT 1
70212: NEG
70213: PUSH
70214: LD_INT 4
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: LD_INT 1
70223: PUSH
70224: LD_INT 6
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: PUSH
70231: LD_INT 0
70233: PUSH
70234: LD_INT 6
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: LD_INT 1
70243: NEG
70244: PUSH
70245: LD_INT 5
70247: PUSH
70248: EMPTY
70249: LIST
70250: LIST
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: LIST
70256: LIST
70257: LIST
70258: LIST
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: LIST
70265: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
70266: LD_ADDR_VAR 0 33
70270: PUSH
70271: LD_INT 2
70273: NEG
70274: PUSH
70275: LD_INT 1
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: PUSH
70282: LD_INT 3
70284: NEG
70285: PUSH
70286: LD_INT 0
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: PUSH
70293: LD_INT 3
70295: NEG
70296: PUSH
70297: LD_INT 1
70299: NEG
70300: PUSH
70301: EMPTY
70302: LIST
70303: LIST
70304: PUSH
70305: LD_INT 3
70307: NEG
70308: PUSH
70309: LD_INT 1
70311: PUSH
70312: EMPTY
70313: LIST
70314: LIST
70315: PUSH
70316: LD_INT 4
70318: NEG
70319: PUSH
70320: LD_INT 0
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: PUSH
70327: LD_INT 4
70329: NEG
70330: PUSH
70331: LD_INT 1
70333: NEG
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: LD_INT 4
70341: NEG
70342: PUSH
70343: LD_INT 1
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: LD_INT 5
70352: NEG
70353: PUSH
70354: LD_INT 0
70356: PUSH
70357: EMPTY
70358: LIST
70359: LIST
70360: PUSH
70361: LD_INT 5
70363: NEG
70364: PUSH
70365: LD_INT 1
70367: NEG
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: PUSH
70373: LD_INT 5
70375: NEG
70376: PUSH
70377: LD_INT 1
70379: PUSH
70380: EMPTY
70381: LIST
70382: LIST
70383: PUSH
70384: LD_INT 6
70386: NEG
70387: PUSH
70388: LD_INT 0
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: PUSH
70395: LD_INT 6
70397: NEG
70398: PUSH
70399: LD_INT 1
70401: NEG
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: LIST
70411: LIST
70412: LIST
70413: LIST
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: LIST
70420: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
70421: LD_ADDR_VAR 0 34
70425: PUSH
70426: LD_INT 2
70428: NEG
70429: PUSH
70430: LD_INT 3
70432: NEG
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: LD_INT 3
70440: NEG
70441: PUSH
70442: LD_INT 2
70444: NEG
70445: PUSH
70446: EMPTY
70447: LIST
70448: LIST
70449: PUSH
70450: LD_INT 3
70452: NEG
70453: PUSH
70454: LD_INT 3
70456: NEG
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: PUSH
70462: LD_INT 3
70464: NEG
70465: PUSH
70466: LD_INT 4
70468: NEG
70469: PUSH
70470: EMPTY
70471: LIST
70472: LIST
70473: PUSH
70474: LD_INT 4
70476: NEG
70477: PUSH
70478: LD_INT 3
70480: NEG
70481: PUSH
70482: EMPTY
70483: LIST
70484: LIST
70485: PUSH
70486: LD_INT 4
70488: NEG
70489: PUSH
70490: LD_INT 4
70492: NEG
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 4
70500: NEG
70501: PUSH
70502: LD_INT 5
70504: NEG
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_INT 5
70512: NEG
70513: PUSH
70514: LD_INT 4
70516: NEG
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: LD_INT 5
70524: NEG
70525: PUSH
70526: LD_INT 5
70528: NEG
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: PUSH
70534: LD_INT 5
70536: NEG
70537: PUSH
70538: LD_INT 6
70540: NEG
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: PUSH
70546: LD_INT 6
70548: NEG
70549: PUSH
70550: LD_INT 5
70552: NEG
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: PUSH
70558: LD_INT 6
70560: NEG
70561: PUSH
70562: LD_INT 6
70564: NEG
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: LIST
70574: LIST
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: LIST
70581: LIST
70582: LIST
70583: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
70584: LD_ADDR_VAR 0 41
70588: PUSH
70589: LD_INT 0
70591: PUSH
70592: LD_INT 2
70594: NEG
70595: PUSH
70596: EMPTY
70597: LIST
70598: LIST
70599: PUSH
70600: LD_INT 1
70602: NEG
70603: PUSH
70604: LD_INT 3
70606: NEG
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: PUSH
70612: LD_INT 1
70614: PUSH
70615: LD_INT 2
70617: NEG
70618: PUSH
70619: EMPTY
70620: LIST
70621: LIST
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: LIST
70627: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
70628: LD_ADDR_VAR 0 42
70632: PUSH
70633: LD_INT 2
70635: PUSH
70636: LD_INT 0
70638: PUSH
70639: EMPTY
70640: LIST
70641: LIST
70642: PUSH
70643: LD_INT 2
70645: PUSH
70646: LD_INT 1
70648: NEG
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: PUSH
70654: LD_INT 3
70656: PUSH
70657: LD_INT 1
70659: PUSH
70660: EMPTY
70661: LIST
70662: LIST
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: LIST
70668: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
70669: LD_ADDR_VAR 0 43
70673: PUSH
70674: LD_INT 2
70676: PUSH
70677: LD_INT 2
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: PUSH
70684: LD_INT 3
70686: PUSH
70687: LD_INT 2
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: PUSH
70694: LD_INT 2
70696: PUSH
70697: LD_INT 3
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: LIST
70708: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
70709: LD_ADDR_VAR 0 44
70713: PUSH
70714: LD_INT 0
70716: PUSH
70717: LD_INT 2
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: PUSH
70724: LD_INT 1
70726: PUSH
70727: LD_INT 3
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PUSH
70734: LD_INT 1
70736: NEG
70737: PUSH
70738: LD_INT 2
70740: PUSH
70741: EMPTY
70742: LIST
70743: LIST
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: LIST
70749: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70750: LD_ADDR_VAR 0 45
70754: PUSH
70755: LD_INT 2
70757: NEG
70758: PUSH
70759: LD_INT 0
70761: PUSH
70762: EMPTY
70763: LIST
70764: LIST
70765: PUSH
70766: LD_INT 2
70768: NEG
70769: PUSH
70770: LD_INT 1
70772: PUSH
70773: EMPTY
70774: LIST
70775: LIST
70776: PUSH
70777: LD_INT 3
70779: NEG
70780: PUSH
70781: LD_INT 1
70783: NEG
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: PUSH
70789: EMPTY
70790: LIST
70791: LIST
70792: LIST
70793: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
70794: LD_ADDR_VAR 0 46
70798: PUSH
70799: LD_INT 2
70801: NEG
70802: PUSH
70803: LD_INT 2
70805: NEG
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: LD_INT 2
70813: NEG
70814: PUSH
70815: LD_INT 3
70817: NEG
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: PUSH
70823: LD_INT 3
70825: NEG
70826: PUSH
70827: LD_INT 2
70829: NEG
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: LIST
70839: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
70840: LD_ADDR_VAR 0 47
70844: PUSH
70845: LD_INT 2
70847: NEG
70848: PUSH
70849: LD_INT 3
70851: NEG
70852: PUSH
70853: EMPTY
70854: LIST
70855: LIST
70856: PUSH
70857: LD_INT 1
70859: NEG
70860: PUSH
70861: LD_INT 3
70863: NEG
70864: PUSH
70865: EMPTY
70866: LIST
70867: LIST
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
70873: LD_ADDR_VAR 0 48
70877: PUSH
70878: LD_INT 1
70880: PUSH
70881: LD_INT 2
70883: NEG
70884: PUSH
70885: EMPTY
70886: LIST
70887: LIST
70888: PUSH
70889: LD_INT 2
70891: PUSH
70892: LD_INT 1
70894: NEG
70895: PUSH
70896: EMPTY
70897: LIST
70898: LIST
70899: PUSH
70900: EMPTY
70901: LIST
70902: LIST
70903: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
70904: LD_ADDR_VAR 0 49
70908: PUSH
70909: LD_INT 3
70911: PUSH
70912: LD_INT 1
70914: PUSH
70915: EMPTY
70916: LIST
70917: LIST
70918: PUSH
70919: LD_INT 3
70921: PUSH
70922: LD_INT 2
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
70933: LD_ADDR_VAR 0 50
70937: PUSH
70938: LD_INT 2
70940: PUSH
70941: LD_INT 3
70943: PUSH
70944: EMPTY
70945: LIST
70946: LIST
70947: PUSH
70948: LD_INT 1
70950: PUSH
70951: LD_INT 3
70953: PUSH
70954: EMPTY
70955: LIST
70956: LIST
70957: PUSH
70958: EMPTY
70959: LIST
70960: LIST
70961: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
70962: LD_ADDR_VAR 0 51
70966: PUSH
70967: LD_INT 1
70969: NEG
70970: PUSH
70971: LD_INT 2
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: PUSH
70978: LD_INT 2
70980: NEG
70981: PUSH
70982: LD_INT 1
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
70993: LD_ADDR_VAR 0 52
70997: PUSH
70998: LD_INT 3
71000: NEG
71001: PUSH
71002: LD_INT 1
71004: NEG
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: LD_INT 3
71012: NEG
71013: PUSH
71014: LD_INT 2
71016: NEG
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: EMPTY
71023: LIST
71024: LIST
71025: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71026: LD_ADDR_VAR 0 53
71030: PUSH
71031: LD_INT 1
71033: NEG
71034: PUSH
71035: LD_INT 3
71037: NEG
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: PUSH
71043: LD_INT 0
71045: PUSH
71046: LD_INT 3
71048: NEG
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: LD_INT 1
71056: PUSH
71057: LD_INT 2
71059: NEG
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: LIST
71069: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71070: LD_ADDR_VAR 0 54
71074: PUSH
71075: LD_INT 2
71077: PUSH
71078: LD_INT 1
71080: NEG
71081: PUSH
71082: EMPTY
71083: LIST
71084: LIST
71085: PUSH
71086: LD_INT 3
71088: PUSH
71089: LD_INT 0
71091: PUSH
71092: EMPTY
71093: LIST
71094: LIST
71095: PUSH
71096: LD_INT 3
71098: PUSH
71099: LD_INT 1
71101: PUSH
71102: EMPTY
71103: LIST
71104: LIST
71105: PUSH
71106: EMPTY
71107: LIST
71108: LIST
71109: LIST
71110: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71111: LD_ADDR_VAR 0 55
71115: PUSH
71116: LD_INT 3
71118: PUSH
71119: LD_INT 2
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PUSH
71126: LD_INT 3
71128: PUSH
71129: LD_INT 3
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: PUSH
71136: LD_INT 2
71138: PUSH
71139: LD_INT 3
71141: PUSH
71142: EMPTY
71143: LIST
71144: LIST
71145: PUSH
71146: EMPTY
71147: LIST
71148: LIST
71149: LIST
71150: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71151: LD_ADDR_VAR 0 56
71155: PUSH
71156: LD_INT 1
71158: PUSH
71159: LD_INT 3
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: PUSH
71166: LD_INT 0
71168: PUSH
71169: LD_INT 3
71171: PUSH
71172: EMPTY
71173: LIST
71174: LIST
71175: PUSH
71176: LD_INT 1
71178: NEG
71179: PUSH
71180: LD_INT 2
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: LIST
71191: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71192: LD_ADDR_VAR 0 57
71196: PUSH
71197: LD_INT 2
71199: NEG
71200: PUSH
71201: LD_INT 1
71203: PUSH
71204: EMPTY
71205: LIST
71206: LIST
71207: PUSH
71208: LD_INT 3
71210: NEG
71211: PUSH
71212: LD_INT 0
71214: PUSH
71215: EMPTY
71216: LIST
71217: LIST
71218: PUSH
71219: LD_INT 3
71221: NEG
71222: PUSH
71223: LD_INT 1
71225: NEG
71226: PUSH
71227: EMPTY
71228: LIST
71229: LIST
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: LIST
71235: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71236: LD_ADDR_VAR 0 58
71240: PUSH
71241: LD_INT 2
71243: NEG
71244: PUSH
71245: LD_INT 3
71247: NEG
71248: PUSH
71249: EMPTY
71250: LIST
71251: LIST
71252: PUSH
71253: LD_INT 3
71255: NEG
71256: PUSH
71257: LD_INT 2
71259: NEG
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: PUSH
71265: LD_INT 3
71267: NEG
71268: PUSH
71269: LD_INT 3
71271: NEG
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PUSH
71277: EMPTY
71278: LIST
71279: LIST
71280: LIST
71281: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
71282: LD_ADDR_VAR 0 59
71286: PUSH
71287: LD_INT 1
71289: NEG
71290: PUSH
71291: LD_INT 2
71293: NEG
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PUSH
71299: LD_INT 0
71301: PUSH
71302: LD_INT 2
71304: NEG
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: PUSH
71310: LD_INT 1
71312: PUSH
71313: LD_INT 1
71315: NEG
71316: PUSH
71317: EMPTY
71318: LIST
71319: LIST
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: LIST
71325: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
71326: LD_ADDR_VAR 0 60
71330: PUSH
71331: LD_INT 1
71333: PUSH
71334: LD_INT 1
71336: NEG
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PUSH
71342: LD_INT 2
71344: PUSH
71345: LD_INT 0
71347: PUSH
71348: EMPTY
71349: LIST
71350: LIST
71351: PUSH
71352: LD_INT 2
71354: PUSH
71355: LD_INT 1
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: LIST
71366: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
71367: LD_ADDR_VAR 0 61
71371: PUSH
71372: LD_INT 2
71374: PUSH
71375: LD_INT 1
71377: PUSH
71378: EMPTY
71379: LIST
71380: LIST
71381: PUSH
71382: LD_INT 2
71384: PUSH
71385: LD_INT 2
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: PUSH
71392: LD_INT 1
71394: PUSH
71395: LD_INT 2
71397: PUSH
71398: EMPTY
71399: LIST
71400: LIST
71401: PUSH
71402: EMPTY
71403: LIST
71404: LIST
71405: LIST
71406: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
71407: LD_ADDR_VAR 0 62
71411: PUSH
71412: LD_INT 1
71414: PUSH
71415: LD_INT 2
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: PUSH
71422: LD_INT 0
71424: PUSH
71425: LD_INT 2
71427: PUSH
71428: EMPTY
71429: LIST
71430: LIST
71431: PUSH
71432: LD_INT 1
71434: NEG
71435: PUSH
71436: LD_INT 1
71438: PUSH
71439: EMPTY
71440: LIST
71441: LIST
71442: PUSH
71443: EMPTY
71444: LIST
71445: LIST
71446: LIST
71447: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
71448: LD_ADDR_VAR 0 63
71452: PUSH
71453: LD_INT 1
71455: NEG
71456: PUSH
71457: LD_INT 1
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: PUSH
71464: LD_INT 2
71466: NEG
71467: PUSH
71468: LD_INT 0
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: LD_INT 2
71477: NEG
71478: PUSH
71479: LD_INT 1
71481: NEG
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: LIST
71491: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71492: LD_ADDR_VAR 0 64
71496: PUSH
71497: LD_INT 1
71499: NEG
71500: PUSH
71501: LD_INT 2
71503: NEG
71504: PUSH
71505: EMPTY
71506: LIST
71507: LIST
71508: PUSH
71509: LD_INT 2
71511: NEG
71512: PUSH
71513: LD_INT 1
71515: NEG
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: PUSH
71521: LD_INT 2
71523: NEG
71524: PUSH
71525: LD_INT 2
71527: NEG
71528: PUSH
71529: EMPTY
71530: LIST
71531: LIST
71532: PUSH
71533: EMPTY
71534: LIST
71535: LIST
71536: LIST
71537: ST_TO_ADDR
// end ; 2 :
71538: GO 74804
71540: LD_INT 2
71542: DOUBLE
71543: EQUAL
71544: IFTRUE 71548
71546: GO 74803
71548: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
71549: LD_ADDR_VAR 0 29
71553: PUSH
71554: LD_INT 4
71556: PUSH
71557: LD_INT 0
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: PUSH
71564: LD_INT 4
71566: PUSH
71567: LD_INT 1
71569: NEG
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: PUSH
71575: LD_INT 5
71577: PUSH
71578: LD_INT 0
71580: PUSH
71581: EMPTY
71582: LIST
71583: LIST
71584: PUSH
71585: LD_INT 5
71587: PUSH
71588: LD_INT 1
71590: PUSH
71591: EMPTY
71592: LIST
71593: LIST
71594: PUSH
71595: LD_INT 4
71597: PUSH
71598: LD_INT 1
71600: PUSH
71601: EMPTY
71602: LIST
71603: LIST
71604: PUSH
71605: LD_INT 3
71607: PUSH
71608: LD_INT 0
71610: PUSH
71611: EMPTY
71612: LIST
71613: LIST
71614: PUSH
71615: LD_INT 3
71617: PUSH
71618: LD_INT 1
71620: NEG
71621: PUSH
71622: EMPTY
71623: LIST
71624: LIST
71625: PUSH
71626: LD_INT 3
71628: PUSH
71629: LD_INT 2
71631: NEG
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: PUSH
71637: LD_INT 5
71639: PUSH
71640: LD_INT 2
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: PUSH
71647: LD_INT 3
71649: PUSH
71650: LD_INT 3
71652: PUSH
71653: EMPTY
71654: LIST
71655: LIST
71656: PUSH
71657: LD_INT 3
71659: PUSH
71660: LD_INT 2
71662: PUSH
71663: EMPTY
71664: LIST
71665: LIST
71666: PUSH
71667: LD_INT 4
71669: PUSH
71670: LD_INT 3
71672: PUSH
71673: EMPTY
71674: LIST
71675: LIST
71676: PUSH
71677: LD_INT 4
71679: PUSH
71680: LD_INT 4
71682: PUSH
71683: EMPTY
71684: LIST
71685: LIST
71686: PUSH
71687: LD_INT 3
71689: PUSH
71690: LD_INT 4
71692: PUSH
71693: EMPTY
71694: LIST
71695: LIST
71696: PUSH
71697: LD_INT 2
71699: PUSH
71700: LD_INT 3
71702: PUSH
71703: EMPTY
71704: LIST
71705: LIST
71706: PUSH
71707: LD_INT 2
71709: PUSH
71710: LD_INT 2
71712: PUSH
71713: EMPTY
71714: LIST
71715: LIST
71716: PUSH
71717: LD_INT 4
71719: PUSH
71720: LD_INT 2
71722: PUSH
71723: EMPTY
71724: LIST
71725: LIST
71726: PUSH
71727: LD_INT 2
71729: PUSH
71730: LD_INT 4
71732: PUSH
71733: EMPTY
71734: LIST
71735: LIST
71736: PUSH
71737: LD_INT 0
71739: PUSH
71740: LD_INT 4
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: PUSH
71747: LD_INT 0
71749: PUSH
71750: LD_INT 3
71752: PUSH
71753: EMPTY
71754: LIST
71755: LIST
71756: PUSH
71757: LD_INT 1
71759: PUSH
71760: LD_INT 4
71762: PUSH
71763: EMPTY
71764: LIST
71765: LIST
71766: PUSH
71767: LD_INT 1
71769: PUSH
71770: LD_INT 5
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: PUSH
71777: LD_INT 0
71779: PUSH
71780: LD_INT 5
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: PUSH
71787: LD_INT 1
71789: NEG
71790: PUSH
71791: LD_INT 4
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: PUSH
71798: LD_INT 1
71800: NEG
71801: PUSH
71802: LD_INT 3
71804: PUSH
71805: EMPTY
71806: LIST
71807: LIST
71808: PUSH
71809: LD_INT 2
71811: PUSH
71812: LD_INT 5
71814: PUSH
71815: EMPTY
71816: LIST
71817: LIST
71818: PUSH
71819: LD_INT 2
71821: NEG
71822: PUSH
71823: LD_INT 3
71825: PUSH
71826: EMPTY
71827: LIST
71828: LIST
71829: PUSH
71830: LD_INT 3
71832: NEG
71833: PUSH
71834: LD_INT 0
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: PUSH
71841: LD_INT 3
71843: NEG
71844: PUSH
71845: LD_INT 1
71847: NEG
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: PUSH
71853: LD_INT 2
71855: NEG
71856: PUSH
71857: LD_INT 0
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: PUSH
71864: LD_INT 2
71866: NEG
71867: PUSH
71868: LD_INT 1
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: PUSH
71875: LD_INT 3
71877: NEG
71878: PUSH
71879: LD_INT 1
71881: PUSH
71882: EMPTY
71883: LIST
71884: LIST
71885: PUSH
71886: LD_INT 4
71888: NEG
71889: PUSH
71890: LD_INT 0
71892: PUSH
71893: EMPTY
71894: LIST
71895: LIST
71896: PUSH
71897: LD_INT 4
71899: NEG
71900: PUSH
71901: LD_INT 1
71903: NEG
71904: PUSH
71905: EMPTY
71906: LIST
71907: LIST
71908: PUSH
71909: LD_INT 4
71911: NEG
71912: PUSH
71913: LD_INT 2
71915: NEG
71916: PUSH
71917: EMPTY
71918: LIST
71919: LIST
71920: PUSH
71921: LD_INT 2
71923: NEG
71924: PUSH
71925: LD_INT 2
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: PUSH
71932: LD_INT 4
71934: NEG
71935: PUSH
71936: LD_INT 4
71938: NEG
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: PUSH
71944: LD_INT 4
71946: NEG
71947: PUSH
71948: LD_INT 5
71950: NEG
71951: PUSH
71952: EMPTY
71953: LIST
71954: LIST
71955: PUSH
71956: LD_INT 3
71958: NEG
71959: PUSH
71960: LD_INT 4
71962: NEG
71963: PUSH
71964: EMPTY
71965: LIST
71966: LIST
71967: PUSH
71968: LD_INT 3
71970: NEG
71971: PUSH
71972: LD_INT 3
71974: NEG
71975: PUSH
71976: EMPTY
71977: LIST
71978: LIST
71979: PUSH
71980: LD_INT 4
71982: NEG
71983: PUSH
71984: LD_INT 3
71986: NEG
71987: PUSH
71988: EMPTY
71989: LIST
71990: LIST
71991: PUSH
71992: LD_INT 5
71994: NEG
71995: PUSH
71996: LD_INT 4
71998: NEG
71999: PUSH
72000: EMPTY
72001: LIST
72002: LIST
72003: PUSH
72004: LD_INT 5
72006: NEG
72007: PUSH
72008: LD_INT 5
72010: NEG
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: PUSH
72016: LD_INT 3
72018: NEG
72019: PUSH
72020: LD_INT 5
72022: NEG
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: PUSH
72028: LD_INT 5
72030: NEG
72031: PUSH
72032: LD_INT 3
72034: NEG
72035: PUSH
72036: EMPTY
72037: LIST
72038: LIST
72039: PUSH
72040: EMPTY
72041: LIST
72042: LIST
72043: LIST
72044: LIST
72045: LIST
72046: LIST
72047: LIST
72048: LIST
72049: LIST
72050: LIST
72051: LIST
72052: LIST
72053: LIST
72054: LIST
72055: LIST
72056: LIST
72057: LIST
72058: LIST
72059: LIST
72060: LIST
72061: LIST
72062: LIST
72063: LIST
72064: LIST
72065: LIST
72066: LIST
72067: LIST
72068: LIST
72069: LIST
72070: LIST
72071: LIST
72072: LIST
72073: LIST
72074: LIST
72075: LIST
72076: LIST
72077: LIST
72078: LIST
72079: LIST
72080: LIST
72081: LIST
72082: LIST
72083: LIST
72084: LIST
72085: LIST
72086: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
72087: LD_ADDR_VAR 0 30
72091: PUSH
72092: LD_INT 4
72094: PUSH
72095: LD_INT 4
72097: PUSH
72098: EMPTY
72099: LIST
72100: LIST
72101: PUSH
72102: LD_INT 4
72104: PUSH
72105: LD_INT 3
72107: PUSH
72108: EMPTY
72109: LIST
72110: LIST
72111: PUSH
72112: LD_INT 5
72114: PUSH
72115: LD_INT 4
72117: PUSH
72118: EMPTY
72119: LIST
72120: LIST
72121: PUSH
72122: LD_INT 5
72124: PUSH
72125: LD_INT 5
72127: PUSH
72128: EMPTY
72129: LIST
72130: LIST
72131: PUSH
72132: LD_INT 4
72134: PUSH
72135: LD_INT 5
72137: PUSH
72138: EMPTY
72139: LIST
72140: LIST
72141: PUSH
72142: LD_INT 3
72144: PUSH
72145: LD_INT 4
72147: PUSH
72148: EMPTY
72149: LIST
72150: LIST
72151: PUSH
72152: LD_INT 3
72154: PUSH
72155: LD_INT 3
72157: PUSH
72158: EMPTY
72159: LIST
72160: LIST
72161: PUSH
72162: LD_INT 5
72164: PUSH
72165: LD_INT 3
72167: PUSH
72168: EMPTY
72169: LIST
72170: LIST
72171: PUSH
72172: LD_INT 3
72174: PUSH
72175: LD_INT 5
72177: PUSH
72178: EMPTY
72179: LIST
72180: LIST
72181: PUSH
72182: LD_INT 0
72184: PUSH
72185: LD_INT 3
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: PUSH
72192: LD_INT 0
72194: PUSH
72195: LD_INT 2
72197: PUSH
72198: EMPTY
72199: LIST
72200: LIST
72201: PUSH
72202: LD_INT 1
72204: PUSH
72205: LD_INT 3
72207: PUSH
72208: EMPTY
72209: LIST
72210: LIST
72211: PUSH
72212: LD_INT 1
72214: PUSH
72215: LD_INT 4
72217: PUSH
72218: EMPTY
72219: LIST
72220: LIST
72221: PUSH
72222: LD_INT 0
72224: PUSH
72225: LD_INT 4
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: PUSH
72232: LD_INT 1
72234: NEG
72235: PUSH
72236: LD_INT 3
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: PUSH
72243: LD_INT 1
72245: NEG
72246: PUSH
72247: LD_INT 2
72249: PUSH
72250: EMPTY
72251: LIST
72252: LIST
72253: PUSH
72254: LD_INT 2
72256: PUSH
72257: LD_INT 4
72259: PUSH
72260: EMPTY
72261: LIST
72262: LIST
72263: PUSH
72264: LD_INT 2
72266: NEG
72267: PUSH
72268: LD_INT 2
72270: PUSH
72271: EMPTY
72272: LIST
72273: LIST
72274: PUSH
72275: LD_INT 4
72277: NEG
72278: PUSH
72279: LD_INT 0
72281: PUSH
72282: EMPTY
72283: LIST
72284: LIST
72285: PUSH
72286: LD_INT 4
72288: NEG
72289: PUSH
72290: LD_INT 1
72292: NEG
72293: PUSH
72294: EMPTY
72295: LIST
72296: LIST
72297: PUSH
72298: LD_INT 3
72300: NEG
72301: PUSH
72302: LD_INT 0
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: PUSH
72309: LD_INT 3
72311: NEG
72312: PUSH
72313: LD_INT 1
72315: PUSH
72316: EMPTY
72317: LIST
72318: LIST
72319: PUSH
72320: LD_INT 4
72322: NEG
72323: PUSH
72324: LD_INT 1
72326: PUSH
72327: EMPTY
72328: LIST
72329: LIST
72330: PUSH
72331: LD_INT 5
72333: NEG
72334: PUSH
72335: LD_INT 0
72337: PUSH
72338: EMPTY
72339: LIST
72340: LIST
72341: PUSH
72342: LD_INT 5
72344: NEG
72345: PUSH
72346: LD_INT 1
72348: NEG
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: PUSH
72354: LD_INT 5
72356: NEG
72357: PUSH
72358: LD_INT 2
72360: NEG
72361: PUSH
72362: EMPTY
72363: LIST
72364: LIST
72365: PUSH
72366: LD_INT 3
72368: NEG
72369: PUSH
72370: LD_INT 2
72372: PUSH
72373: EMPTY
72374: LIST
72375: LIST
72376: PUSH
72377: LD_INT 3
72379: NEG
72380: PUSH
72381: LD_INT 3
72383: NEG
72384: PUSH
72385: EMPTY
72386: LIST
72387: LIST
72388: PUSH
72389: LD_INT 3
72391: NEG
72392: PUSH
72393: LD_INT 4
72395: NEG
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: PUSH
72401: LD_INT 2
72403: NEG
72404: PUSH
72405: LD_INT 3
72407: NEG
72408: PUSH
72409: EMPTY
72410: LIST
72411: LIST
72412: PUSH
72413: LD_INT 2
72415: NEG
72416: PUSH
72417: LD_INT 2
72419: NEG
72420: PUSH
72421: EMPTY
72422: LIST
72423: LIST
72424: PUSH
72425: LD_INT 3
72427: NEG
72428: PUSH
72429: LD_INT 2
72431: NEG
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: PUSH
72437: LD_INT 4
72439: NEG
72440: PUSH
72441: LD_INT 3
72443: NEG
72444: PUSH
72445: EMPTY
72446: LIST
72447: LIST
72448: PUSH
72449: LD_INT 4
72451: NEG
72452: PUSH
72453: LD_INT 4
72455: NEG
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: PUSH
72461: LD_INT 2
72463: NEG
72464: PUSH
72465: LD_INT 4
72467: NEG
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: PUSH
72473: LD_INT 4
72475: NEG
72476: PUSH
72477: LD_INT 2
72479: NEG
72480: PUSH
72481: EMPTY
72482: LIST
72483: LIST
72484: PUSH
72485: LD_INT 0
72487: PUSH
72488: LD_INT 4
72490: NEG
72491: PUSH
72492: EMPTY
72493: LIST
72494: LIST
72495: PUSH
72496: LD_INT 0
72498: PUSH
72499: LD_INT 5
72501: NEG
72502: PUSH
72503: EMPTY
72504: LIST
72505: LIST
72506: PUSH
72507: LD_INT 1
72509: PUSH
72510: LD_INT 4
72512: NEG
72513: PUSH
72514: EMPTY
72515: LIST
72516: LIST
72517: PUSH
72518: LD_INT 1
72520: PUSH
72521: LD_INT 3
72523: NEG
72524: PUSH
72525: EMPTY
72526: LIST
72527: LIST
72528: PUSH
72529: LD_INT 0
72531: PUSH
72532: LD_INT 3
72534: NEG
72535: PUSH
72536: EMPTY
72537: LIST
72538: LIST
72539: PUSH
72540: LD_INT 1
72542: NEG
72543: PUSH
72544: LD_INT 4
72546: NEG
72547: PUSH
72548: EMPTY
72549: LIST
72550: LIST
72551: PUSH
72552: LD_INT 1
72554: NEG
72555: PUSH
72556: LD_INT 5
72558: NEG
72559: PUSH
72560: EMPTY
72561: LIST
72562: LIST
72563: PUSH
72564: LD_INT 2
72566: PUSH
72567: LD_INT 3
72569: NEG
72570: PUSH
72571: EMPTY
72572: LIST
72573: LIST
72574: PUSH
72575: LD_INT 2
72577: NEG
72578: PUSH
72579: LD_INT 5
72581: NEG
72582: PUSH
72583: EMPTY
72584: LIST
72585: LIST
72586: PUSH
72587: EMPTY
72588: LIST
72589: LIST
72590: LIST
72591: LIST
72592: LIST
72593: LIST
72594: LIST
72595: LIST
72596: LIST
72597: LIST
72598: LIST
72599: LIST
72600: LIST
72601: LIST
72602: LIST
72603: LIST
72604: LIST
72605: LIST
72606: LIST
72607: LIST
72608: LIST
72609: LIST
72610: LIST
72611: LIST
72612: LIST
72613: LIST
72614: LIST
72615: LIST
72616: LIST
72617: LIST
72618: LIST
72619: LIST
72620: LIST
72621: LIST
72622: LIST
72623: LIST
72624: LIST
72625: LIST
72626: LIST
72627: LIST
72628: LIST
72629: LIST
72630: LIST
72631: LIST
72632: LIST
72633: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
72634: LD_ADDR_VAR 0 31
72638: PUSH
72639: LD_INT 0
72641: PUSH
72642: LD_INT 4
72644: PUSH
72645: EMPTY
72646: LIST
72647: LIST
72648: PUSH
72649: LD_INT 0
72651: PUSH
72652: LD_INT 3
72654: PUSH
72655: EMPTY
72656: LIST
72657: LIST
72658: PUSH
72659: LD_INT 1
72661: PUSH
72662: LD_INT 4
72664: PUSH
72665: EMPTY
72666: LIST
72667: LIST
72668: PUSH
72669: LD_INT 1
72671: PUSH
72672: LD_INT 5
72674: PUSH
72675: EMPTY
72676: LIST
72677: LIST
72678: PUSH
72679: LD_INT 0
72681: PUSH
72682: LD_INT 5
72684: PUSH
72685: EMPTY
72686: LIST
72687: LIST
72688: PUSH
72689: LD_INT 1
72691: NEG
72692: PUSH
72693: LD_INT 4
72695: PUSH
72696: EMPTY
72697: LIST
72698: LIST
72699: PUSH
72700: LD_INT 1
72702: NEG
72703: PUSH
72704: LD_INT 3
72706: PUSH
72707: EMPTY
72708: LIST
72709: LIST
72710: PUSH
72711: LD_INT 2
72713: PUSH
72714: LD_INT 5
72716: PUSH
72717: EMPTY
72718: LIST
72719: LIST
72720: PUSH
72721: LD_INT 2
72723: NEG
72724: PUSH
72725: LD_INT 3
72727: PUSH
72728: EMPTY
72729: LIST
72730: LIST
72731: PUSH
72732: LD_INT 3
72734: NEG
72735: PUSH
72736: LD_INT 0
72738: PUSH
72739: EMPTY
72740: LIST
72741: LIST
72742: PUSH
72743: LD_INT 3
72745: NEG
72746: PUSH
72747: LD_INT 1
72749: NEG
72750: PUSH
72751: EMPTY
72752: LIST
72753: LIST
72754: PUSH
72755: LD_INT 2
72757: NEG
72758: PUSH
72759: LD_INT 0
72761: PUSH
72762: EMPTY
72763: LIST
72764: LIST
72765: PUSH
72766: LD_INT 2
72768: NEG
72769: PUSH
72770: LD_INT 1
72772: PUSH
72773: EMPTY
72774: LIST
72775: LIST
72776: PUSH
72777: LD_INT 3
72779: NEG
72780: PUSH
72781: LD_INT 1
72783: PUSH
72784: EMPTY
72785: LIST
72786: LIST
72787: PUSH
72788: LD_INT 4
72790: NEG
72791: PUSH
72792: LD_INT 0
72794: PUSH
72795: EMPTY
72796: LIST
72797: LIST
72798: PUSH
72799: LD_INT 4
72801: NEG
72802: PUSH
72803: LD_INT 1
72805: NEG
72806: PUSH
72807: EMPTY
72808: LIST
72809: LIST
72810: PUSH
72811: LD_INT 4
72813: NEG
72814: PUSH
72815: LD_INT 2
72817: NEG
72818: PUSH
72819: EMPTY
72820: LIST
72821: LIST
72822: PUSH
72823: LD_INT 2
72825: NEG
72826: PUSH
72827: LD_INT 2
72829: PUSH
72830: EMPTY
72831: LIST
72832: LIST
72833: PUSH
72834: LD_INT 4
72836: NEG
72837: PUSH
72838: LD_INT 4
72840: NEG
72841: PUSH
72842: EMPTY
72843: LIST
72844: LIST
72845: PUSH
72846: LD_INT 4
72848: NEG
72849: PUSH
72850: LD_INT 5
72852: NEG
72853: PUSH
72854: EMPTY
72855: LIST
72856: LIST
72857: PUSH
72858: LD_INT 3
72860: NEG
72861: PUSH
72862: LD_INT 4
72864: NEG
72865: PUSH
72866: EMPTY
72867: LIST
72868: LIST
72869: PUSH
72870: LD_INT 3
72872: NEG
72873: PUSH
72874: LD_INT 3
72876: NEG
72877: PUSH
72878: EMPTY
72879: LIST
72880: LIST
72881: PUSH
72882: LD_INT 4
72884: NEG
72885: PUSH
72886: LD_INT 3
72888: NEG
72889: PUSH
72890: EMPTY
72891: LIST
72892: LIST
72893: PUSH
72894: LD_INT 5
72896: NEG
72897: PUSH
72898: LD_INT 4
72900: NEG
72901: PUSH
72902: EMPTY
72903: LIST
72904: LIST
72905: PUSH
72906: LD_INT 5
72908: NEG
72909: PUSH
72910: LD_INT 5
72912: NEG
72913: PUSH
72914: EMPTY
72915: LIST
72916: LIST
72917: PUSH
72918: LD_INT 3
72920: NEG
72921: PUSH
72922: LD_INT 5
72924: NEG
72925: PUSH
72926: EMPTY
72927: LIST
72928: LIST
72929: PUSH
72930: LD_INT 5
72932: NEG
72933: PUSH
72934: LD_INT 3
72936: NEG
72937: PUSH
72938: EMPTY
72939: LIST
72940: LIST
72941: PUSH
72942: LD_INT 0
72944: PUSH
72945: LD_INT 3
72947: NEG
72948: PUSH
72949: EMPTY
72950: LIST
72951: LIST
72952: PUSH
72953: LD_INT 0
72955: PUSH
72956: LD_INT 4
72958: NEG
72959: PUSH
72960: EMPTY
72961: LIST
72962: LIST
72963: PUSH
72964: LD_INT 1
72966: PUSH
72967: LD_INT 3
72969: NEG
72970: PUSH
72971: EMPTY
72972: LIST
72973: LIST
72974: PUSH
72975: LD_INT 1
72977: PUSH
72978: LD_INT 2
72980: NEG
72981: PUSH
72982: EMPTY
72983: LIST
72984: LIST
72985: PUSH
72986: LD_INT 0
72988: PUSH
72989: LD_INT 2
72991: NEG
72992: PUSH
72993: EMPTY
72994: LIST
72995: LIST
72996: PUSH
72997: LD_INT 1
72999: NEG
73000: PUSH
73001: LD_INT 3
73003: NEG
73004: PUSH
73005: EMPTY
73006: LIST
73007: LIST
73008: PUSH
73009: LD_INT 1
73011: NEG
73012: PUSH
73013: LD_INT 4
73015: NEG
73016: PUSH
73017: EMPTY
73018: LIST
73019: LIST
73020: PUSH
73021: LD_INT 2
73023: PUSH
73024: LD_INT 2
73026: NEG
73027: PUSH
73028: EMPTY
73029: LIST
73030: LIST
73031: PUSH
73032: LD_INT 2
73034: NEG
73035: PUSH
73036: LD_INT 4
73038: NEG
73039: PUSH
73040: EMPTY
73041: LIST
73042: LIST
73043: PUSH
73044: LD_INT 4
73046: PUSH
73047: LD_INT 0
73049: PUSH
73050: EMPTY
73051: LIST
73052: LIST
73053: PUSH
73054: LD_INT 4
73056: PUSH
73057: LD_INT 1
73059: NEG
73060: PUSH
73061: EMPTY
73062: LIST
73063: LIST
73064: PUSH
73065: LD_INT 5
73067: PUSH
73068: LD_INT 0
73070: PUSH
73071: EMPTY
73072: LIST
73073: LIST
73074: PUSH
73075: LD_INT 5
73077: PUSH
73078: LD_INT 1
73080: PUSH
73081: EMPTY
73082: LIST
73083: LIST
73084: PUSH
73085: LD_INT 4
73087: PUSH
73088: LD_INT 1
73090: PUSH
73091: EMPTY
73092: LIST
73093: LIST
73094: PUSH
73095: LD_INT 3
73097: PUSH
73098: LD_INT 0
73100: PUSH
73101: EMPTY
73102: LIST
73103: LIST
73104: PUSH
73105: LD_INT 3
73107: PUSH
73108: LD_INT 1
73110: NEG
73111: PUSH
73112: EMPTY
73113: LIST
73114: LIST
73115: PUSH
73116: LD_INT 3
73118: PUSH
73119: LD_INT 2
73121: NEG
73122: PUSH
73123: EMPTY
73124: LIST
73125: LIST
73126: PUSH
73127: LD_INT 5
73129: PUSH
73130: LD_INT 2
73132: PUSH
73133: EMPTY
73134: LIST
73135: LIST
73136: PUSH
73137: EMPTY
73138: LIST
73139: LIST
73140: LIST
73141: LIST
73142: LIST
73143: LIST
73144: LIST
73145: LIST
73146: LIST
73147: LIST
73148: LIST
73149: LIST
73150: LIST
73151: LIST
73152: LIST
73153: LIST
73154: LIST
73155: LIST
73156: LIST
73157: LIST
73158: LIST
73159: LIST
73160: LIST
73161: LIST
73162: LIST
73163: LIST
73164: LIST
73165: LIST
73166: LIST
73167: LIST
73168: LIST
73169: LIST
73170: LIST
73171: LIST
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: LIST
73179: LIST
73180: LIST
73181: LIST
73182: LIST
73183: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
73184: LD_ADDR_VAR 0 32
73188: PUSH
73189: LD_INT 4
73191: NEG
73192: PUSH
73193: LD_INT 0
73195: PUSH
73196: EMPTY
73197: LIST
73198: LIST
73199: PUSH
73200: LD_INT 4
73202: NEG
73203: PUSH
73204: LD_INT 1
73206: NEG
73207: PUSH
73208: EMPTY
73209: LIST
73210: LIST
73211: PUSH
73212: LD_INT 3
73214: NEG
73215: PUSH
73216: LD_INT 0
73218: PUSH
73219: EMPTY
73220: LIST
73221: LIST
73222: PUSH
73223: LD_INT 3
73225: NEG
73226: PUSH
73227: LD_INT 1
73229: PUSH
73230: EMPTY
73231: LIST
73232: LIST
73233: PUSH
73234: LD_INT 4
73236: NEG
73237: PUSH
73238: LD_INT 1
73240: PUSH
73241: EMPTY
73242: LIST
73243: LIST
73244: PUSH
73245: LD_INT 5
73247: NEG
73248: PUSH
73249: LD_INT 0
73251: PUSH
73252: EMPTY
73253: LIST
73254: LIST
73255: PUSH
73256: LD_INT 5
73258: NEG
73259: PUSH
73260: LD_INT 1
73262: NEG
73263: PUSH
73264: EMPTY
73265: LIST
73266: LIST
73267: PUSH
73268: LD_INT 5
73270: NEG
73271: PUSH
73272: LD_INT 2
73274: NEG
73275: PUSH
73276: EMPTY
73277: LIST
73278: LIST
73279: PUSH
73280: LD_INT 3
73282: NEG
73283: PUSH
73284: LD_INT 2
73286: PUSH
73287: EMPTY
73288: LIST
73289: LIST
73290: PUSH
73291: LD_INT 3
73293: NEG
73294: PUSH
73295: LD_INT 3
73297: NEG
73298: PUSH
73299: EMPTY
73300: LIST
73301: LIST
73302: PUSH
73303: LD_INT 3
73305: NEG
73306: PUSH
73307: LD_INT 4
73309: NEG
73310: PUSH
73311: EMPTY
73312: LIST
73313: LIST
73314: PUSH
73315: LD_INT 2
73317: NEG
73318: PUSH
73319: LD_INT 3
73321: NEG
73322: PUSH
73323: EMPTY
73324: LIST
73325: LIST
73326: PUSH
73327: LD_INT 2
73329: NEG
73330: PUSH
73331: LD_INT 2
73333: NEG
73334: PUSH
73335: EMPTY
73336: LIST
73337: LIST
73338: PUSH
73339: LD_INT 3
73341: NEG
73342: PUSH
73343: LD_INT 2
73345: NEG
73346: PUSH
73347: EMPTY
73348: LIST
73349: LIST
73350: PUSH
73351: LD_INT 4
73353: NEG
73354: PUSH
73355: LD_INT 3
73357: NEG
73358: PUSH
73359: EMPTY
73360: LIST
73361: LIST
73362: PUSH
73363: LD_INT 4
73365: NEG
73366: PUSH
73367: LD_INT 4
73369: NEG
73370: PUSH
73371: EMPTY
73372: LIST
73373: LIST
73374: PUSH
73375: LD_INT 2
73377: NEG
73378: PUSH
73379: LD_INT 4
73381: NEG
73382: PUSH
73383: EMPTY
73384: LIST
73385: LIST
73386: PUSH
73387: LD_INT 4
73389: NEG
73390: PUSH
73391: LD_INT 2
73393: NEG
73394: PUSH
73395: EMPTY
73396: LIST
73397: LIST
73398: PUSH
73399: LD_INT 0
73401: PUSH
73402: LD_INT 4
73404: NEG
73405: PUSH
73406: EMPTY
73407: LIST
73408: LIST
73409: PUSH
73410: LD_INT 0
73412: PUSH
73413: LD_INT 5
73415: NEG
73416: PUSH
73417: EMPTY
73418: LIST
73419: LIST
73420: PUSH
73421: LD_INT 1
73423: PUSH
73424: LD_INT 4
73426: NEG
73427: PUSH
73428: EMPTY
73429: LIST
73430: LIST
73431: PUSH
73432: LD_INT 1
73434: PUSH
73435: LD_INT 3
73437: NEG
73438: PUSH
73439: EMPTY
73440: LIST
73441: LIST
73442: PUSH
73443: LD_INT 0
73445: PUSH
73446: LD_INT 3
73448: NEG
73449: PUSH
73450: EMPTY
73451: LIST
73452: LIST
73453: PUSH
73454: LD_INT 1
73456: NEG
73457: PUSH
73458: LD_INT 4
73460: NEG
73461: PUSH
73462: EMPTY
73463: LIST
73464: LIST
73465: PUSH
73466: LD_INT 1
73468: NEG
73469: PUSH
73470: LD_INT 5
73472: NEG
73473: PUSH
73474: EMPTY
73475: LIST
73476: LIST
73477: PUSH
73478: LD_INT 2
73480: PUSH
73481: LD_INT 3
73483: NEG
73484: PUSH
73485: EMPTY
73486: LIST
73487: LIST
73488: PUSH
73489: LD_INT 2
73491: NEG
73492: PUSH
73493: LD_INT 5
73495: NEG
73496: PUSH
73497: EMPTY
73498: LIST
73499: LIST
73500: PUSH
73501: LD_INT 3
73503: PUSH
73504: LD_INT 0
73506: PUSH
73507: EMPTY
73508: LIST
73509: LIST
73510: PUSH
73511: LD_INT 3
73513: PUSH
73514: LD_INT 1
73516: NEG
73517: PUSH
73518: EMPTY
73519: LIST
73520: LIST
73521: PUSH
73522: LD_INT 4
73524: PUSH
73525: LD_INT 0
73527: PUSH
73528: EMPTY
73529: LIST
73530: LIST
73531: PUSH
73532: LD_INT 4
73534: PUSH
73535: LD_INT 1
73537: PUSH
73538: EMPTY
73539: LIST
73540: LIST
73541: PUSH
73542: LD_INT 3
73544: PUSH
73545: LD_INT 1
73547: PUSH
73548: EMPTY
73549: LIST
73550: LIST
73551: PUSH
73552: LD_INT 2
73554: PUSH
73555: LD_INT 0
73557: PUSH
73558: EMPTY
73559: LIST
73560: LIST
73561: PUSH
73562: LD_INT 2
73564: PUSH
73565: LD_INT 1
73567: NEG
73568: PUSH
73569: EMPTY
73570: LIST
73571: LIST
73572: PUSH
73573: LD_INT 2
73575: PUSH
73576: LD_INT 2
73578: NEG
73579: PUSH
73580: EMPTY
73581: LIST
73582: LIST
73583: PUSH
73584: LD_INT 4
73586: PUSH
73587: LD_INT 2
73589: PUSH
73590: EMPTY
73591: LIST
73592: LIST
73593: PUSH
73594: LD_INT 4
73596: PUSH
73597: LD_INT 4
73599: PUSH
73600: EMPTY
73601: LIST
73602: LIST
73603: PUSH
73604: LD_INT 4
73606: PUSH
73607: LD_INT 3
73609: PUSH
73610: EMPTY
73611: LIST
73612: LIST
73613: PUSH
73614: LD_INT 5
73616: PUSH
73617: LD_INT 4
73619: PUSH
73620: EMPTY
73621: LIST
73622: LIST
73623: PUSH
73624: LD_INT 5
73626: PUSH
73627: LD_INT 5
73629: PUSH
73630: EMPTY
73631: LIST
73632: LIST
73633: PUSH
73634: LD_INT 4
73636: PUSH
73637: LD_INT 5
73639: PUSH
73640: EMPTY
73641: LIST
73642: LIST
73643: PUSH
73644: LD_INT 3
73646: PUSH
73647: LD_INT 4
73649: PUSH
73650: EMPTY
73651: LIST
73652: LIST
73653: PUSH
73654: LD_INT 3
73656: PUSH
73657: LD_INT 3
73659: PUSH
73660: EMPTY
73661: LIST
73662: LIST
73663: PUSH
73664: LD_INT 5
73666: PUSH
73667: LD_INT 3
73669: PUSH
73670: EMPTY
73671: LIST
73672: LIST
73673: PUSH
73674: LD_INT 3
73676: PUSH
73677: LD_INT 5
73679: PUSH
73680: EMPTY
73681: LIST
73682: LIST
73683: PUSH
73684: EMPTY
73685: LIST
73686: LIST
73687: LIST
73688: LIST
73689: LIST
73690: LIST
73691: LIST
73692: LIST
73693: LIST
73694: LIST
73695: LIST
73696: LIST
73697: LIST
73698: LIST
73699: LIST
73700: LIST
73701: LIST
73702: LIST
73703: LIST
73704: LIST
73705: LIST
73706: LIST
73707: LIST
73708: LIST
73709: LIST
73710: LIST
73711: LIST
73712: LIST
73713: LIST
73714: LIST
73715: LIST
73716: LIST
73717: LIST
73718: LIST
73719: LIST
73720: LIST
73721: LIST
73722: LIST
73723: LIST
73724: LIST
73725: LIST
73726: LIST
73727: LIST
73728: LIST
73729: LIST
73730: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
73731: LD_ADDR_VAR 0 33
73735: PUSH
73736: LD_INT 4
73738: NEG
73739: PUSH
73740: LD_INT 4
73742: NEG
73743: PUSH
73744: EMPTY
73745: LIST
73746: LIST
73747: PUSH
73748: LD_INT 4
73750: NEG
73751: PUSH
73752: LD_INT 5
73754: NEG
73755: PUSH
73756: EMPTY
73757: LIST
73758: LIST
73759: PUSH
73760: LD_INT 3
73762: NEG
73763: PUSH
73764: LD_INT 4
73766: NEG
73767: PUSH
73768: EMPTY
73769: LIST
73770: LIST
73771: PUSH
73772: LD_INT 3
73774: NEG
73775: PUSH
73776: LD_INT 3
73778: NEG
73779: PUSH
73780: EMPTY
73781: LIST
73782: LIST
73783: PUSH
73784: LD_INT 4
73786: NEG
73787: PUSH
73788: LD_INT 3
73790: NEG
73791: PUSH
73792: EMPTY
73793: LIST
73794: LIST
73795: PUSH
73796: LD_INT 5
73798: NEG
73799: PUSH
73800: LD_INT 4
73802: NEG
73803: PUSH
73804: EMPTY
73805: LIST
73806: LIST
73807: PUSH
73808: LD_INT 5
73810: NEG
73811: PUSH
73812: LD_INT 5
73814: NEG
73815: PUSH
73816: EMPTY
73817: LIST
73818: LIST
73819: PUSH
73820: LD_INT 3
73822: NEG
73823: PUSH
73824: LD_INT 5
73826: NEG
73827: PUSH
73828: EMPTY
73829: LIST
73830: LIST
73831: PUSH
73832: LD_INT 5
73834: NEG
73835: PUSH
73836: LD_INT 3
73838: NEG
73839: PUSH
73840: EMPTY
73841: LIST
73842: LIST
73843: PUSH
73844: LD_INT 0
73846: PUSH
73847: LD_INT 3
73849: NEG
73850: PUSH
73851: EMPTY
73852: LIST
73853: LIST
73854: PUSH
73855: LD_INT 0
73857: PUSH
73858: LD_INT 4
73860: NEG
73861: PUSH
73862: EMPTY
73863: LIST
73864: LIST
73865: PUSH
73866: LD_INT 1
73868: PUSH
73869: LD_INT 3
73871: NEG
73872: PUSH
73873: EMPTY
73874: LIST
73875: LIST
73876: PUSH
73877: LD_INT 1
73879: PUSH
73880: LD_INT 2
73882: NEG
73883: PUSH
73884: EMPTY
73885: LIST
73886: LIST
73887: PUSH
73888: LD_INT 0
73890: PUSH
73891: LD_INT 2
73893: NEG
73894: PUSH
73895: EMPTY
73896: LIST
73897: LIST
73898: PUSH
73899: LD_INT 1
73901: NEG
73902: PUSH
73903: LD_INT 3
73905: NEG
73906: PUSH
73907: EMPTY
73908: LIST
73909: LIST
73910: PUSH
73911: LD_INT 1
73913: NEG
73914: PUSH
73915: LD_INT 4
73917: NEG
73918: PUSH
73919: EMPTY
73920: LIST
73921: LIST
73922: PUSH
73923: LD_INT 2
73925: PUSH
73926: LD_INT 2
73928: NEG
73929: PUSH
73930: EMPTY
73931: LIST
73932: LIST
73933: PUSH
73934: LD_INT 2
73936: NEG
73937: PUSH
73938: LD_INT 4
73940: NEG
73941: PUSH
73942: EMPTY
73943: LIST
73944: LIST
73945: PUSH
73946: LD_INT 4
73948: PUSH
73949: LD_INT 0
73951: PUSH
73952: EMPTY
73953: LIST
73954: LIST
73955: PUSH
73956: LD_INT 4
73958: PUSH
73959: LD_INT 1
73961: NEG
73962: PUSH
73963: EMPTY
73964: LIST
73965: LIST
73966: PUSH
73967: LD_INT 5
73969: PUSH
73970: LD_INT 0
73972: PUSH
73973: EMPTY
73974: LIST
73975: LIST
73976: PUSH
73977: LD_INT 5
73979: PUSH
73980: LD_INT 1
73982: PUSH
73983: EMPTY
73984: LIST
73985: LIST
73986: PUSH
73987: LD_INT 4
73989: PUSH
73990: LD_INT 1
73992: PUSH
73993: EMPTY
73994: LIST
73995: LIST
73996: PUSH
73997: LD_INT 3
73999: PUSH
74000: LD_INT 0
74002: PUSH
74003: EMPTY
74004: LIST
74005: LIST
74006: PUSH
74007: LD_INT 3
74009: PUSH
74010: LD_INT 1
74012: NEG
74013: PUSH
74014: EMPTY
74015: LIST
74016: LIST
74017: PUSH
74018: LD_INT 3
74020: PUSH
74021: LD_INT 2
74023: NEG
74024: PUSH
74025: EMPTY
74026: LIST
74027: LIST
74028: PUSH
74029: LD_INT 5
74031: PUSH
74032: LD_INT 2
74034: PUSH
74035: EMPTY
74036: LIST
74037: LIST
74038: PUSH
74039: LD_INT 3
74041: PUSH
74042: LD_INT 3
74044: PUSH
74045: EMPTY
74046: LIST
74047: LIST
74048: PUSH
74049: LD_INT 3
74051: PUSH
74052: LD_INT 2
74054: PUSH
74055: EMPTY
74056: LIST
74057: LIST
74058: PUSH
74059: LD_INT 4
74061: PUSH
74062: LD_INT 3
74064: PUSH
74065: EMPTY
74066: LIST
74067: LIST
74068: PUSH
74069: LD_INT 4
74071: PUSH
74072: LD_INT 4
74074: PUSH
74075: EMPTY
74076: LIST
74077: LIST
74078: PUSH
74079: LD_INT 3
74081: PUSH
74082: LD_INT 4
74084: PUSH
74085: EMPTY
74086: LIST
74087: LIST
74088: PUSH
74089: LD_INT 2
74091: PUSH
74092: LD_INT 3
74094: PUSH
74095: EMPTY
74096: LIST
74097: LIST
74098: PUSH
74099: LD_INT 2
74101: PUSH
74102: LD_INT 2
74104: PUSH
74105: EMPTY
74106: LIST
74107: LIST
74108: PUSH
74109: LD_INT 4
74111: PUSH
74112: LD_INT 2
74114: PUSH
74115: EMPTY
74116: LIST
74117: LIST
74118: PUSH
74119: LD_INT 2
74121: PUSH
74122: LD_INT 4
74124: PUSH
74125: EMPTY
74126: LIST
74127: LIST
74128: PUSH
74129: LD_INT 0
74131: PUSH
74132: LD_INT 4
74134: PUSH
74135: EMPTY
74136: LIST
74137: LIST
74138: PUSH
74139: LD_INT 0
74141: PUSH
74142: LD_INT 3
74144: PUSH
74145: EMPTY
74146: LIST
74147: LIST
74148: PUSH
74149: LD_INT 1
74151: PUSH
74152: LD_INT 4
74154: PUSH
74155: EMPTY
74156: LIST
74157: LIST
74158: PUSH
74159: LD_INT 1
74161: PUSH
74162: LD_INT 5
74164: PUSH
74165: EMPTY
74166: LIST
74167: LIST
74168: PUSH
74169: LD_INT 0
74171: PUSH
74172: LD_INT 5
74174: PUSH
74175: EMPTY
74176: LIST
74177: LIST
74178: PUSH
74179: LD_INT 1
74181: NEG
74182: PUSH
74183: LD_INT 4
74185: PUSH
74186: EMPTY
74187: LIST
74188: LIST
74189: PUSH
74190: LD_INT 1
74192: NEG
74193: PUSH
74194: LD_INT 3
74196: PUSH
74197: EMPTY
74198: LIST
74199: LIST
74200: PUSH
74201: LD_INT 2
74203: PUSH
74204: LD_INT 5
74206: PUSH
74207: EMPTY
74208: LIST
74209: LIST
74210: PUSH
74211: LD_INT 2
74213: NEG
74214: PUSH
74215: LD_INT 3
74217: PUSH
74218: EMPTY
74219: LIST
74220: LIST
74221: PUSH
74222: EMPTY
74223: LIST
74224: LIST
74225: LIST
74226: LIST
74227: LIST
74228: LIST
74229: LIST
74230: LIST
74231: LIST
74232: LIST
74233: LIST
74234: LIST
74235: LIST
74236: LIST
74237: LIST
74238: LIST
74239: LIST
74240: LIST
74241: LIST
74242: LIST
74243: LIST
74244: LIST
74245: LIST
74246: LIST
74247: LIST
74248: LIST
74249: LIST
74250: LIST
74251: LIST
74252: LIST
74253: LIST
74254: LIST
74255: LIST
74256: LIST
74257: LIST
74258: LIST
74259: LIST
74260: LIST
74261: LIST
74262: LIST
74263: LIST
74264: LIST
74265: LIST
74266: LIST
74267: LIST
74268: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
74269: LD_ADDR_VAR 0 34
74273: PUSH
74274: LD_INT 0
74276: PUSH
74277: LD_INT 4
74279: NEG
74280: PUSH
74281: EMPTY
74282: LIST
74283: LIST
74284: PUSH
74285: LD_INT 0
74287: PUSH
74288: LD_INT 5
74290: NEG
74291: PUSH
74292: EMPTY
74293: LIST
74294: LIST
74295: PUSH
74296: LD_INT 1
74298: PUSH
74299: LD_INT 4
74301: NEG
74302: PUSH
74303: EMPTY
74304: LIST
74305: LIST
74306: PUSH
74307: LD_INT 1
74309: PUSH
74310: LD_INT 3
74312: NEG
74313: PUSH
74314: EMPTY
74315: LIST
74316: LIST
74317: PUSH
74318: LD_INT 0
74320: PUSH
74321: LD_INT 3
74323: NEG
74324: PUSH
74325: EMPTY
74326: LIST
74327: LIST
74328: PUSH
74329: LD_INT 1
74331: NEG
74332: PUSH
74333: LD_INT 4
74335: NEG
74336: PUSH
74337: EMPTY
74338: LIST
74339: LIST
74340: PUSH
74341: LD_INT 1
74343: NEG
74344: PUSH
74345: LD_INT 5
74347: NEG
74348: PUSH
74349: EMPTY
74350: LIST
74351: LIST
74352: PUSH
74353: LD_INT 2
74355: PUSH
74356: LD_INT 3
74358: NEG
74359: PUSH
74360: EMPTY
74361: LIST
74362: LIST
74363: PUSH
74364: LD_INT 2
74366: NEG
74367: PUSH
74368: LD_INT 5
74370: NEG
74371: PUSH
74372: EMPTY
74373: LIST
74374: LIST
74375: PUSH
74376: LD_INT 3
74378: PUSH
74379: LD_INT 0
74381: PUSH
74382: EMPTY
74383: LIST
74384: LIST
74385: PUSH
74386: LD_INT 3
74388: PUSH
74389: LD_INT 1
74391: NEG
74392: PUSH
74393: EMPTY
74394: LIST
74395: LIST
74396: PUSH
74397: LD_INT 4
74399: PUSH
74400: LD_INT 0
74402: PUSH
74403: EMPTY
74404: LIST
74405: LIST
74406: PUSH
74407: LD_INT 4
74409: PUSH
74410: LD_INT 1
74412: PUSH
74413: EMPTY
74414: LIST
74415: LIST
74416: PUSH
74417: LD_INT 3
74419: PUSH
74420: LD_INT 1
74422: PUSH
74423: EMPTY
74424: LIST
74425: LIST
74426: PUSH
74427: LD_INT 2
74429: PUSH
74430: LD_INT 0
74432: PUSH
74433: EMPTY
74434: LIST
74435: LIST
74436: PUSH
74437: LD_INT 2
74439: PUSH
74440: LD_INT 1
74442: NEG
74443: PUSH
74444: EMPTY
74445: LIST
74446: LIST
74447: PUSH
74448: LD_INT 2
74450: PUSH
74451: LD_INT 2
74453: NEG
74454: PUSH
74455: EMPTY
74456: LIST
74457: LIST
74458: PUSH
74459: LD_INT 4
74461: PUSH
74462: LD_INT 2
74464: PUSH
74465: EMPTY
74466: LIST
74467: LIST
74468: PUSH
74469: LD_INT 4
74471: PUSH
74472: LD_INT 4
74474: PUSH
74475: EMPTY
74476: LIST
74477: LIST
74478: PUSH
74479: LD_INT 4
74481: PUSH
74482: LD_INT 3
74484: PUSH
74485: EMPTY
74486: LIST
74487: LIST
74488: PUSH
74489: LD_INT 5
74491: PUSH
74492: LD_INT 4
74494: PUSH
74495: EMPTY
74496: LIST
74497: LIST
74498: PUSH
74499: LD_INT 5
74501: PUSH
74502: LD_INT 5
74504: PUSH
74505: EMPTY
74506: LIST
74507: LIST
74508: PUSH
74509: LD_INT 4
74511: PUSH
74512: LD_INT 5
74514: PUSH
74515: EMPTY
74516: LIST
74517: LIST
74518: PUSH
74519: LD_INT 3
74521: PUSH
74522: LD_INT 4
74524: PUSH
74525: EMPTY
74526: LIST
74527: LIST
74528: PUSH
74529: LD_INT 3
74531: PUSH
74532: LD_INT 3
74534: PUSH
74535: EMPTY
74536: LIST
74537: LIST
74538: PUSH
74539: LD_INT 5
74541: PUSH
74542: LD_INT 3
74544: PUSH
74545: EMPTY
74546: LIST
74547: LIST
74548: PUSH
74549: LD_INT 3
74551: PUSH
74552: LD_INT 5
74554: PUSH
74555: EMPTY
74556: LIST
74557: LIST
74558: PUSH
74559: LD_INT 0
74561: PUSH
74562: LD_INT 3
74564: PUSH
74565: EMPTY
74566: LIST
74567: LIST
74568: PUSH
74569: LD_INT 0
74571: PUSH
74572: LD_INT 2
74574: PUSH
74575: EMPTY
74576: LIST
74577: LIST
74578: PUSH
74579: LD_INT 1
74581: PUSH
74582: LD_INT 3
74584: PUSH
74585: EMPTY
74586: LIST
74587: LIST
74588: PUSH
74589: LD_INT 1
74591: PUSH
74592: LD_INT 4
74594: PUSH
74595: EMPTY
74596: LIST
74597: LIST
74598: PUSH
74599: LD_INT 0
74601: PUSH
74602: LD_INT 4
74604: PUSH
74605: EMPTY
74606: LIST
74607: LIST
74608: PUSH
74609: LD_INT 1
74611: NEG
74612: PUSH
74613: LD_INT 3
74615: PUSH
74616: EMPTY
74617: LIST
74618: LIST
74619: PUSH
74620: LD_INT 1
74622: NEG
74623: PUSH
74624: LD_INT 2
74626: PUSH
74627: EMPTY
74628: LIST
74629: LIST
74630: PUSH
74631: LD_INT 2
74633: PUSH
74634: LD_INT 4
74636: PUSH
74637: EMPTY
74638: LIST
74639: LIST
74640: PUSH
74641: LD_INT 2
74643: NEG
74644: PUSH
74645: LD_INT 2
74647: PUSH
74648: EMPTY
74649: LIST
74650: LIST
74651: PUSH
74652: LD_INT 4
74654: NEG
74655: PUSH
74656: LD_INT 0
74658: PUSH
74659: EMPTY
74660: LIST
74661: LIST
74662: PUSH
74663: LD_INT 4
74665: NEG
74666: PUSH
74667: LD_INT 1
74669: NEG
74670: PUSH
74671: EMPTY
74672: LIST
74673: LIST
74674: PUSH
74675: LD_INT 3
74677: NEG
74678: PUSH
74679: LD_INT 0
74681: PUSH
74682: EMPTY
74683: LIST
74684: LIST
74685: PUSH
74686: LD_INT 3
74688: NEG
74689: PUSH
74690: LD_INT 1
74692: PUSH
74693: EMPTY
74694: LIST
74695: LIST
74696: PUSH
74697: LD_INT 4
74699: NEG
74700: PUSH
74701: LD_INT 1
74703: PUSH
74704: EMPTY
74705: LIST
74706: LIST
74707: PUSH
74708: LD_INT 5
74710: NEG
74711: PUSH
74712: LD_INT 0
74714: PUSH
74715: EMPTY
74716: LIST
74717: LIST
74718: PUSH
74719: LD_INT 5
74721: NEG
74722: PUSH
74723: LD_INT 1
74725: NEG
74726: PUSH
74727: EMPTY
74728: LIST
74729: LIST
74730: PUSH
74731: LD_INT 5
74733: NEG
74734: PUSH
74735: LD_INT 2
74737: NEG
74738: PUSH
74739: EMPTY
74740: LIST
74741: LIST
74742: PUSH
74743: LD_INT 3
74745: NEG
74746: PUSH
74747: LD_INT 2
74749: PUSH
74750: EMPTY
74751: LIST
74752: LIST
74753: PUSH
74754: EMPTY
74755: LIST
74756: LIST
74757: LIST
74758: LIST
74759: LIST
74760: LIST
74761: LIST
74762: LIST
74763: LIST
74764: LIST
74765: LIST
74766: LIST
74767: LIST
74768: LIST
74769: LIST
74770: LIST
74771: LIST
74772: LIST
74773: LIST
74774: LIST
74775: LIST
74776: LIST
74777: LIST
74778: LIST
74779: LIST
74780: LIST
74781: LIST
74782: LIST
74783: LIST
74784: LIST
74785: LIST
74786: LIST
74787: LIST
74788: LIST
74789: LIST
74790: LIST
74791: LIST
74792: LIST
74793: LIST
74794: LIST
74795: LIST
74796: LIST
74797: LIST
74798: LIST
74799: LIST
74800: ST_TO_ADDR
// end ; end ;
74801: GO 74804
74803: POP
// case btype of b_depot , b_warehouse :
74804: LD_VAR 0 1
74808: PUSH
74809: LD_INT 0
74811: DOUBLE
74812: EQUAL
74813: IFTRUE 74823
74815: LD_INT 1
74817: DOUBLE
74818: EQUAL
74819: IFTRUE 74823
74821: GO 75024
74823: POP
// case nation of nation_american :
74824: LD_VAR 0 5
74828: PUSH
74829: LD_INT 1
74831: DOUBLE
74832: EQUAL
74833: IFTRUE 74837
74835: GO 74893
74837: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
74838: LD_ADDR_VAR 0 9
74842: PUSH
74843: LD_VAR 0 11
74847: PUSH
74848: LD_VAR 0 12
74852: PUSH
74853: LD_VAR 0 13
74857: PUSH
74858: LD_VAR 0 14
74862: PUSH
74863: LD_VAR 0 15
74867: PUSH
74868: LD_VAR 0 16
74872: PUSH
74873: EMPTY
74874: LIST
74875: LIST
74876: LIST
74877: LIST
74878: LIST
74879: LIST
74880: PUSH
74881: LD_VAR 0 4
74885: PUSH
74886: LD_INT 1
74888: PLUS
74889: ARRAY
74890: ST_TO_ADDR
74891: GO 75022
74893: LD_INT 2
74895: DOUBLE
74896: EQUAL
74897: IFTRUE 74901
74899: GO 74957
74901: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
74902: LD_ADDR_VAR 0 9
74906: PUSH
74907: LD_VAR 0 17
74911: PUSH
74912: LD_VAR 0 18
74916: PUSH
74917: LD_VAR 0 19
74921: PUSH
74922: LD_VAR 0 20
74926: PUSH
74927: LD_VAR 0 21
74931: PUSH
74932: LD_VAR 0 22
74936: PUSH
74937: EMPTY
74938: LIST
74939: LIST
74940: LIST
74941: LIST
74942: LIST
74943: LIST
74944: PUSH
74945: LD_VAR 0 4
74949: PUSH
74950: LD_INT 1
74952: PLUS
74953: ARRAY
74954: ST_TO_ADDR
74955: GO 75022
74957: LD_INT 3
74959: DOUBLE
74960: EQUAL
74961: IFTRUE 74965
74963: GO 75021
74965: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
74966: LD_ADDR_VAR 0 9
74970: PUSH
74971: LD_VAR 0 23
74975: PUSH
74976: LD_VAR 0 24
74980: PUSH
74981: LD_VAR 0 25
74985: PUSH
74986: LD_VAR 0 26
74990: PUSH
74991: LD_VAR 0 27
74995: PUSH
74996: LD_VAR 0 28
75000: PUSH
75001: EMPTY
75002: LIST
75003: LIST
75004: LIST
75005: LIST
75006: LIST
75007: LIST
75008: PUSH
75009: LD_VAR 0 4
75013: PUSH
75014: LD_INT 1
75016: PLUS
75017: ARRAY
75018: ST_TO_ADDR
75019: GO 75022
75021: POP
75022: GO 75577
75024: LD_INT 2
75026: DOUBLE
75027: EQUAL
75028: IFTRUE 75038
75030: LD_INT 3
75032: DOUBLE
75033: EQUAL
75034: IFTRUE 75038
75036: GO 75094
75038: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
75039: LD_ADDR_VAR 0 9
75043: PUSH
75044: LD_VAR 0 29
75048: PUSH
75049: LD_VAR 0 30
75053: PUSH
75054: LD_VAR 0 31
75058: PUSH
75059: LD_VAR 0 32
75063: PUSH
75064: LD_VAR 0 33
75068: PUSH
75069: LD_VAR 0 34
75073: PUSH
75074: EMPTY
75075: LIST
75076: LIST
75077: LIST
75078: LIST
75079: LIST
75080: LIST
75081: PUSH
75082: LD_VAR 0 4
75086: PUSH
75087: LD_INT 1
75089: PLUS
75090: ARRAY
75091: ST_TO_ADDR
75092: GO 75577
75094: LD_INT 16
75096: DOUBLE
75097: EQUAL
75098: IFTRUE 75156
75100: LD_INT 17
75102: DOUBLE
75103: EQUAL
75104: IFTRUE 75156
75106: LD_INT 18
75108: DOUBLE
75109: EQUAL
75110: IFTRUE 75156
75112: LD_INT 19
75114: DOUBLE
75115: EQUAL
75116: IFTRUE 75156
75118: LD_INT 22
75120: DOUBLE
75121: EQUAL
75122: IFTRUE 75156
75124: LD_INT 20
75126: DOUBLE
75127: EQUAL
75128: IFTRUE 75156
75130: LD_INT 21
75132: DOUBLE
75133: EQUAL
75134: IFTRUE 75156
75136: LD_INT 23
75138: DOUBLE
75139: EQUAL
75140: IFTRUE 75156
75142: LD_INT 24
75144: DOUBLE
75145: EQUAL
75146: IFTRUE 75156
75148: LD_INT 25
75150: DOUBLE
75151: EQUAL
75152: IFTRUE 75156
75154: GO 75212
75156: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
75157: LD_ADDR_VAR 0 9
75161: PUSH
75162: LD_VAR 0 35
75166: PUSH
75167: LD_VAR 0 36
75171: PUSH
75172: LD_VAR 0 37
75176: PUSH
75177: LD_VAR 0 38
75181: PUSH
75182: LD_VAR 0 39
75186: PUSH
75187: LD_VAR 0 40
75191: PUSH
75192: EMPTY
75193: LIST
75194: LIST
75195: LIST
75196: LIST
75197: LIST
75198: LIST
75199: PUSH
75200: LD_VAR 0 4
75204: PUSH
75205: LD_INT 1
75207: PLUS
75208: ARRAY
75209: ST_TO_ADDR
75210: GO 75577
75212: LD_INT 6
75214: DOUBLE
75215: EQUAL
75216: IFTRUE 75268
75218: LD_INT 7
75220: DOUBLE
75221: EQUAL
75222: IFTRUE 75268
75224: LD_INT 8
75226: DOUBLE
75227: EQUAL
75228: IFTRUE 75268
75230: LD_INT 13
75232: DOUBLE
75233: EQUAL
75234: IFTRUE 75268
75236: LD_INT 12
75238: DOUBLE
75239: EQUAL
75240: IFTRUE 75268
75242: LD_INT 15
75244: DOUBLE
75245: EQUAL
75246: IFTRUE 75268
75248: LD_INT 11
75250: DOUBLE
75251: EQUAL
75252: IFTRUE 75268
75254: LD_INT 14
75256: DOUBLE
75257: EQUAL
75258: IFTRUE 75268
75260: LD_INT 10
75262: DOUBLE
75263: EQUAL
75264: IFTRUE 75268
75266: GO 75324
75268: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
75269: LD_ADDR_VAR 0 9
75273: PUSH
75274: LD_VAR 0 41
75278: PUSH
75279: LD_VAR 0 42
75283: PUSH
75284: LD_VAR 0 43
75288: PUSH
75289: LD_VAR 0 44
75293: PUSH
75294: LD_VAR 0 45
75298: PUSH
75299: LD_VAR 0 46
75303: PUSH
75304: EMPTY
75305: LIST
75306: LIST
75307: LIST
75308: LIST
75309: LIST
75310: LIST
75311: PUSH
75312: LD_VAR 0 4
75316: PUSH
75317: LD_INT 1
75319: PLUS
75320: ARRAY
75321: ST_TO_ADDR
75322: GO 75577
75324: LD_INT 36
75326: DOUBLE
75327: EQUAL
75328: IFTRUE 75332
75330: GO 75388
75332: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
75333: LD_ADDR_VAR 0 9
75337: PUSH
75338: LD_VAR 0 47
75342: PUSH
75343: LD_VAR 0 48
75347: PUSH
75348: LD_VAR 0 49
75352: PUSH
75353: LD_VAR 0 50
75357: PUSH
75358: LD_VAR 0 51
75362: PUSH
75363: LD_VAR 0 52
75367: PUSH
75368: EMPTY
75369: LIST
75370: LIST
75371: LIST
75372: LIST
75373: LIST
75374: LIST
75375: PUSH
75376: LD_VAR 0 4
75380: PUSH
75381: LD_INT 1
75383: PLUS
75384: ARRAY
75385: ST_TO_ADDR
75386: GO 75577
75388: LD_INT 4
75390: DOUBLE
75391: EQUAL
75392: IFTRUE 75414
75394: LD_INT 5
75396: DOUBLE
75397: EQUAL
75398: IFTRUE 75414
75400: LD_INT 34
75402: DOUBLE
75403: EQUAL
75404: IFTRUE 75414
75406: LD_INT 37
75408: DOUBLE
75409: EQUAL
75410: IFTRUE 75414
75412: GO 75470
75414: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
75415: LD_ADDR_VAR 0 9
75419: PUSH
75420: LD_VAR 0 53
75424: PUSH
75425: LD_VAR 0 54
75429: PUSH
75430: LD_VAR 0 55
75434: PUSH
75435: LD_VAR 0 56
75439: PUSH
75440: LD_VAR 0 57
75444: PUSH
75445: LD_VAR 0 58
75449: PUSH
75450: EMPTY
75451: LIST
75452: LIST
75453: LIST
75454: LIST
75455: LIST
75456: LIST
75457: PUSH
75458: LD_VAR 0 4
75462: PUSH
75463: LD_INT 1
75465: PLUS
75466: ARRAY
75467: ST_TO_ADDR
75468: GO 75577
75470: LD_INT 31
75472: DOUBLE
75473: EQUAL
75474: IFTRUE 75520
75476: LD_INT 32
75478: DOUBLE
75479: EQUAL
75480: IFTRUE 75520
75482: LD_INT 33
75484: DOUBLE
75485: EQUAL
75486: IFTRUE 75520
75488: LD_INT 27
75490: DOUBLE
75491: EQUAL
75492: IFTRUE 75520
75494: LD_INT 26
75496: DOUBLE
75497: EQUAL
75498: IFTRUE 75520
75500: LD_INT 28
75502: DOUBLE
75503: EQUAL
75504: IFTRUE 75520
75506: LD_INT 29
75508: DOUBLE
75509: EQUAL
75510: IFTRUE 75520
75512: LD_INT 30
75514: DOUBLE
75515: EQUAL
75516: IFTRUE 75520
75518: GO 75576
75520: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
75521: LD_ADDR_VAR 0 9
75525: PUSH
75526: LD_VAR 0 59
75530: PUSH
75531: LD_VAR 0 60
75535: PUSH
75536: LD_VAR 0 61
75540: PUSH
75541: LD_VAR 0 62
75545: PUSH
75546: LD_VAR 0 63
75550: PUSH
75551: LD_VAR 0 64
75555: PUSH
75556: EMPTY
75557: LIST
75558: LIST
75559: LIST
75560: LIST
75561: LIST
75562: LIST
75563: PUSH
75564: LD_VAR 0 4
75568: PUSH
75569: LD_INT 1
75571: PLUS
75572: ARRAY
75573: ST_TO_ADDR
75574: GO 75577
75576: POP
// temp_list2 = [ ] ;
75577: LD_ADDR_VAR 0 10
75581: PUSH
75582: EMPTY
75583: ST_TO_ADDR
// for i in temp_list do
75584: LD_ADDR_VAR 0 8
75588: PUSH
75589: LD_VAR 0 9
75593: PUSH
75594: FOR_IN
75595: IFFALSE 75647
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
75597: LD_ADDR_VAR 0 10
75601: PUSH
75602: LD_VAR 0 10
75606: PUSH
75607: LD_VAR 0 8
75611: PUSH
75612: LD_INT 1
75614: ARRAY
75615: PUSH
75616: LD_VAR 0 2
75620: PLUS
75621: PUSH
75622: LD_VAR 0 8
75626: PUSH
75627: LD_INT 2
75629: ARRAY
75630: PUSH
75631: LD_VAR 0 3
75635: PLUS
75636: PUSH
75637: EMPTY
75638: LIST
75639: LIST
75640: PUSH
75641: EMPTY
75642: LIST
75643: ADD
75644: ST_TO_ADDR
75645: GO 75594
75647: POP
75648: POP
// result = temp_list2 ;
75649: LD_ADDR_VAR 0 7
75653: PUSH
75654: LD_VAR 0 10
75658: ST_TO_ADDR
// end ;
75659: LD_VAR 0 7
75663: RET
// export function EnemyInRange ( unit , dist ) ; begin
75664: LD_INT 0
75666: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
75667: LD_ADDR_VAR 0 3
75671: PUSH
75672: LD_VAR 0 1
75676: PPUSH
75677: CALL_OW 255
75681: PPUSH
75682: LD_VAR 0 1
75686: PPUSH
75687: CALL_OW 250
75691: PPUSH
75692: LD_VAR 0 1
75696: PPUSH
75697: CALL_OW 251
75701: PPUSH
75702: LD_VAR 0 2
75706: PPUSH
75707: CALL 49060 0 4
75711: PUSH
75712: LD_INT 4
75714: ARRAY
75715: ST_TO_ADDR
// end ;
75716: LD_VAR 0 3
75720: RET
// export function PlayerSeeMe ( unit ) ; begin
75721: LD_INT 0
75723: PPUSH
// result := See ( your_side , unit ) ;
75724: LD_ADDR_VAR 0 2
75728: PUSH
75729: LD_OWVAR 2
75733: PPUSH
75734: LD_VAR 0 1
75738: PPUSH
75739: CALL_OW 292
75743: ST_TO_ADDR
// end ;
75744: LD_VAR 0 2
75748: RET
// export function ReverseDir ( unit ) ; begin
75749: LD_INT 0
75751: PPUSH
// if not unit then
75752: LD_VAR 0 1
75756: NOT
75757: IFFALSE 75761
// exit ;
75759: GO 75784
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
75761: LD_ADDR_VAR 0 2
75765: PUSH
75766: LD_VAR 0 1
75770: PPUSH
75771: CALL_OW 254
75775: PUSH
75776: LD_INT 3
75778: PLUS
75779: PUSH
75780: LD_INT 6
75782: MOD
75783: ST_TO_ADDR
// end ;
75784: LD_VAR 0 2
75788: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
75789: LD_INT 0
75791: PPUSH
75792: PPUSH
75793: PPUSH
75794: PPUSH
75795: PPUSH
// if not hexes then
75796: LD_VAR 0 2
75800: NOT
75801: IFFALSE 75805
// exit ;
75803: GO 75953
// dist := 9999 ;
75805: LD_ADDR_VAR 0 5
75809: PUSH
75810: LD_INT 9999
75812: ST_TO_ADDR
// for i = 1 to hexes do
75813: LD_ADDR_VAR 0 4
75817: PUSH
75818: DOUBLE
75819: LD_INT 1
75821: DEC
75822: ST_TO_ADDR
75823: LD_VAR 0 2
75827: PUSH
75828: FOR_TO
75829: IFFALSE 75941
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
75831: LD_VAR 0 1
75835: PPUSH
75836: LD_VAR 0 2
75840: PUSH
75841: LD_VAR 0 4
75845: ARRAY
75846: PUSH
75847: LD_INT 1
75849: ARRAY
75850: PPUSH
75851: LD_VAR 0 2
75855: PUSH
75856: LD_VAR 0 4
75860: ARRAY
75861: PUSH
75862: LD_INT 2
75864: ARRAY
75865: PPUSH
75866: CALL_OW 297
75870: PUSH
75871: LD_VAR 0 5
75875: LESS
75876: IFFALSE 75939
// begin hex := hexes [ i ] ;
75878: LD_ADDR_VAR 0 7
75882: PUSH
75883: LD_VAR 0 2
75887: PUSH
75888: LD_VAR 0 4
75892: ARRAY
75893: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
75894: LD_ADDR_VAR 0 5
75898: PUSH
75899: LD_VAR 0 1
75903: PPUSH
75904: LD_VAR 0 2
75908: PUSH
75909: LD_VAR 0 4
75913: ARRAY
75914: PUSH
75915: LD_INT 1
75917: ARRAY
75918: PPUSH
75919: LD_VAR 0 2
75923: PUSH
75924: LD_VAR 0 4
75928: ARRAY
75929: PUSH
75930: LD_INT 2
75932: ARRAY
75933: PPUSH
75934: CALL_OW 297
75938: ST_TO_ADDR
// end ; end ;
75939: GO 75828
75941: POP
75942: POP
// result := hex ;
75943: LD_ADDR_VAR 0 3
75947: PUSH
75948: LD_VAR 0 7
75952: ST_TO_ADDR
// end ;
75953: LD_VAR 0 3
75957: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
75958: LD_INT 0
75960: PPUSH
75961: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
75962: LD_VAR 0 1
75966: NOT
75967: PUSH
75968: LD_VAR 0 1
75972: PUSH
75973: LD_INT 21
75975: PUSH
75976: LD_INT 2
75978: PUSH
75979: EMPTY
75980: LIST
75981: LIST
75982: PUSH
75983: LD_INT 23
75985: PUSH
75986: LD_INT 2
75988: PUSH
75989: EMPTY
75990: LIST
75991: LIST
75992: PUSH
75993: EMPTY
75994: LIST
75995: LIST
75996: PPUSH
75997: CALL_OW 69
76001: IN
76002: NOT
76003: OR
76004: IFFALSE 76008
// exit ;
76006: GO 76055
// for i = 1 to 3 do
76008: LD_ADDR_VAR 0 3
76012: PUSH
76013: DOUBLE
76014: LD_INT 1
76016: DEC
76017: ST_TO_ADDR
76018: LD_INT 3
76020: PUSH
76021: FOR_TO
76022: IFFALSE 76053
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
76024: LD_VAR 0 1
76028: PPUSH
76029: CALL_OW 250
76033: PPUSH
76034: LD_VAR 0 1
76038: PPUSH
76039: CALL_OW 251
76043: PPUSH
76044: LD_INT 1
76046: PPUSH
76047: CALL_OW 453
76051: GO 76021
76053: POP
76054: POP
// end ;
76055: LD_VAR 0 2
76059: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
76060: LD_INT 0
76062: PPUSH
76063: PPUSH
76064: PPUSH
76065: PPUSH
76066: PPUSH
76067: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
76068: LD_VAR 0 1
76072: NOT
76073: PUSH
76074: LD_VAR 0 2
76078: NOT
76079: OR
76080: PUSH
76081: LD_VAR 0 1
76085: PPUSH
76086: CALL_OW 314
76090: OR
76091: IFFALSE 76095
// exit ;
76093: GO 76536
// x := GetX ( enemy_unit ) ;
76095: LD_ADDR_VAR 0 7
76099: PUSH
76100: LD_VAR 0 2
76104: PPUSH
76105: CALL_OW 250
76109: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
76110: LD_ADDR_VAR 0 8
76114: PUSH
76115: LD_VAR 0 2
76119: PPUSH
76120: CALL_OW 251
76124: ST_TO_ADDR
// if not x or not y then
76125: LD_VAR 0 7
76129: NOT
76130: PUSH
76131: LD_VAR 0 8
76135: NOT
76136: OR
76137: IFFALSE 76141
// exit ;
76139: GO 76536
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
76141: LD_ADDR_VAR 0 6
76145: PUSH
76146: LD_VAR 0 7
76150: PPUSH
76151: LD_INT 0
76153: PPUSH
76154: LD_INT 4
76156: PPUSH
76157: CALL_OW 272
76161: PUSH
76162: LD_VAR 0 8
76166: PPUSH
76167: LD_INT 0
76169: PPUSH
76170: LD_INT 4
76172: PPUSH
76173: CALL_OW 273
76177: PUSH
76178: EMPTY
76179: LIST
76180: LIST
76181: PUSH
76182: LD_VAR 0 7
76186: PPUSH
76187: LD_INT 1
76189: PPUSH
76190: LD_INT 4
76192: PPUSH
76193: CALL_OW 272
76197: PUSH
76198: LD_VAR 0 8
76202: PPUSH
76203: LD_INT 1
76205: PPUSH
76206: LD_INT 4
76208: PPUSH
76209: CALL_OW 273
76213: PUSH
76214: EMPTY
76215: LIST
76216: LIST
76217: PUSH
76218: LD_VAR 0 7
76222: PPUSH
76223: LD_INT 2
76225: PPUSH
76226: LD_INT 4
76228: PPUSH
76229: CALL_OW 272
76233: PUSH
76234: LD_VAR 0 8
76238: PPUSH
76239: LD_INT 2
76241: PPUSH
76242: LD_INT 4
76244: PPUSH
76245: CALL_OW 273
76249: PUSH
76250: EMPTY
76251: LIST
76252: LIST
76253: PUSH
76254: LD_VAR 0 7
76258: PPUSH
76259: LD_INT 3
76261: PPUSH
76262: LD_INT 4
76264: PPUSH
76265: CALL_OW 272
76269: PUSH
76270: LD_VAR 0 8
76274: PPUSH
76275: LD_INT 3
76277: PPUSH
76278: LD_INT 4
76280: PPUSH
76281: CALL_OW 273
76285: PUSH
76286: EMPTY
76287: LIST
76288: LIST
76289: PUSH
76290: LD_VAR 0 7
76294: PPUSH
76295: LD_INT 4
76297: PPUSH
76298: LD_INT 4
76300: PPUSH
76301: CALL_OW 272
76305: PUSH
76306: LD_VAR 0 8
76310: PPUSH
76311: LD_INT 4
76313: PPUSH
76314: LD_INT 4
76316: PPUSH
76317: CALL_OW 273
76321: PUSH
76322: EMPTY
76323: LIST
76324: LIST
76325: PUSH
76326: LD_VAR 0 7
76330: PPUSH
76331: LD_INT 5
76333: PPUSH
76334: LD_INT 4
76336: PPUSH
76337: CALL_OW 272
76341: PUSH
76342: LD_VAR 0 8
76346: PPUSH
76347: LD_INT 5
76349: PPUSH
76350: LD_INT 4
76352: PPUSH
76353: CALL_OW 273
76357: PUSH
76358: EMPTY
76359: LIST
76360: LIST
76361: PUSH
76362: EMPTY
76363: LIST
76364: LIST
76365: LIST
76366: LIST
76367: LIST
76368: LIST
76369: ST_TO_ADDR
// for i = tmp downto 1 do
76370: LD_ADDR_VAR 0 4
76374: PUSH
76375: DOUBLE
76376: LD_VAR 0 6
76380: INC
76381: ST_TO_ADDR
76382: LD_INT 1
76384: PUSH
76385: FOR_DOWNTO
76386: IFFALSE 76487
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
76388: LD_VAR 0 6
76392: PUSH
76393: LD_VAR 0 4
76397: ARRAY
76398: PUSH
76399: LD_INT 1
76401: ARRAY
76402: PPUSH
76403: LD_VAR 0 6
76407: PUSH
76408: LD_VAR 0 4
76412: ARRAY
76413: PUSH
76414: LD_INT 2
76416: ARRAY
76417: PPUSH
76418: CALL_OW 488
76422: NOT
76423: PUSH
76424: LD_VAR 0 6
76428: PUSH
76429: LD_VAR 0 4
76433: ARRAY
76434: PUSH
76435: LD_INT 1
76437: ARRAY
76438: PPUSH
76439: LD_VAR 0 6
76443: PUSH
76444: LD_VAR 0 4
76448: ARRAY
76449: PUSH
76450: LD_INT 2
76452: ARRAY
76453: PPUSH
76454: CALL_OW 428
76458: PUSH
76459: LD_INT 0
76461: NONEQUAL
76462: OR
76463: IFFALSE 76485
// tmp := Delete ( tmp , i ) ;
76465: LD_ADDR_VAR 0 6
76469: PUSH
76470: LD_VAR 0 6
76474: PPUSH
76475: LD_VAR 0 4
76479: PPUSH
76480: CALL_OW 3
76484: ST_TO_ADDR
76485: GO 76385
76487: POP
76488: POP
// j := GetClosestHex ( unit , tmp ) ;
76489: LD_ADDR_VAR 0 5
76493: PUSH
76494: LD_VAR 0 1
76498: PPUSH
76499: LD_VAR 0 6
76503: PPUSH
76504: CALL 75789 0 2
76508: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
76509: LD_VAR 0 1
76513: PPUSH
76514: LD_VAR 0 5
76518: PUSH
76519: LD_INT 1
76521: ARRAY
76522: PPUSH
76523: LD_VAR 0 5
76527: PUSH
76528: LD_INT 2
76530: ARRAY
76531: PPUSH
76532: CALL_OW 111
// end ;
76536: LD_VAR 0 3
76540: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
76541: LD_INT 0
76543: PPUSH
76544: PPUSH
76545: PPUSH
// uc_side = 0 ;
76546: LD_ADDR_OWVAR 20
76550: PUSH
76551: LD_INT 0
76553: ST_TO_ADDR
// uc_nation = 0 ;
76554: LD_ADDR_OWVAR 21
76558: PUSH
76559: LD_INT 0
76561: ST_TO_ADDR
// InitHc_All ( ) ;
76562: CALL_OW 584
// InitVc ;
76566: CALL_OW 20
// if mastodonts then
76570: LD_VAR 0 6
76574: IFFALSE 76641
// for i = 1 to mastodonts do
76576: LD_ADDR_VAR 0 11
76580: PUSH
76581: DOUBLE
76582: LD_INT 1
76584: DEC
76585: ST_TO_ADDR
76586: LD_VAR 0 6
76590: PUSH
76591: FOR_TO
76592: IFFALSE 76639
// begin vc_chassis := 31 ;
76594: LD_ADDR_OWVAR 37
76598: PUSH
76599: LD_INT 31
76601: ST_TO_ADDR
// vc_control := control_rider ;
76602: LD_ADDR_OWVAR 38
76606: PUSH
76607: LD_INT 4
76609: ST_TO_ADDR
// animal := CreateVehicle ;
76610: LD_ADDR_VAR 0 12
76614: PUSH
76615: CALL_OW 45
76619: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76620: LD_VAR 0 12
76624: PPUSH
76625: LD_VAR 0 8
76629: PPUSH
76630: LD_INT 0
76632: PPUSH
76633: CALL 78829 0 3
// end ;
76637: GO 76591
76639: POP
76640: POP
// if horses then
76641: LD_VAR 0 5
76645: IFFALSE 76712
// for i = 1 to horses do
76647: LD_ADDR_VAR 0 11
76651: PUSH
76652: DOUBLE
76653: LD_INT 1
76655: DEC
76656: ST_TO_ADDR
76657: LD_VAR 0 5
76661: PUSH
76662: FOR_TO
76663: IFFALSE 76710
// begin hc_class := 21 ;
76665: LD_ADDR_OWVAR 28
76669: PUSH
76670: LD_INT 21
76672: ST_TO_ADDR
// hc_gallery :=  ;
76673: LD_ADDR_OWVAR 33
76677: PUSH
76678: LD_STRING 
76680: ST_TO_ADDR
// animal := CreateHuman ;
76681: LD_ADDR_VAR 0 12
76685: PUSH
76686: CALL_OW 44
76690: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76691: LD_VAR 0 12
76695: PPUSH
76696: LD_VAR 0 8
76700: PPUSH
76701: LD_INT 0
76703: PPUSH
76704: CALL 78829 0 3
// end ;
76708: GO 76662
76710: POP
76711: POP
// if birds then
76712: LD_VAR 0 1
76716: IFFALSE 76783
// for i = 1 to birds do
76718: LD_ADDR_VAR 0 11
76722: PUSH
76723: DOUBLE
76724: LD_INT 1
76726: DEC
76727: ST_TO_ADDR
76728: LD_VAR 0 1
76732: PUSH
76733: FOR_TO
76734: IFFALSE 76781
// begin hc_class = 18 ;
76736: LD_ADDR_OWVAR 28
76740: PUSH
76741: LD_INT 18
76743: ST_TO_ADDR
// hc_gallery =  ;
76744: LD_ADDR_OWVAR 33
76748: PUSH
76749: LD_STRING 
76751: ST_TO_ADDR
// animal := CreateHuman ;
76752: LD_ADDR_VAR 0 12
76756: PUSH
76757: CALL_OW 44
76761: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76762: LD_VAR 0 12
76766: PPUSH
76767: LD_VAR 0 8
76771: PPUSH
76772: LD_INT 0
76774: PPUSH
76775: CALL 78829 0 3
// end ;
76779: GO 76733
76781: POP
76782: POP
// if tigers then
76783: LD_VAR 0 2
76787: IFFALSE 76871
// for i = 1 to tigers do
76789: LD_ADDR_VAR 0 11
76793: PUSH
76794: DOUBLE
76795: LD_INT 1
76797: DEC
76798: ST_TO_ADDR
76799: LD_VAR 0 2
76803: PUSH
76804: FOR_TO
76805: IFFALSE 76869
// begin hc_class = class_tiger ;
76807: LD_ADDR_OWVAR 28
76811: PUSH
76812: LD_INT 14
76814: ST_TO_ADDR
// hc_gallery =  ;
76815: LD_ADDR_OWVAR 33
76819: PUSH
76820: LD_STRING 
76822: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
76823: LD_ADDR_OWVAR 35
76827: PUSH
76828: LD_INT 7
76830: NEG
76831: PPUSH
76832: LD_INT 7
76834: PPUSH
76835: CALL_OW 12
76839: ST_TO_ADDR
// animal := CreateHuman ;
76840: LD_ADDR_VAR 0 12
76844: PUSH
76845: CALL_OW 44
76849: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76850: LD_VAR 0 12
76854: PPUSH
76855: LD_VAR 0 8
76859: PPUSH
76860: LD_INT 0
76862: PPUSH
76863: CALL 78829 0 3
// end ;
76867: GO 76804
76869: POP
76870: POP
// if apemans then
76871: LD_VAR 0 3
76875: IFFALSE 76998
// for i = 1 to apemans do
76877: LD_ADDR_VAR 0 11
76881: PUSH
76882: DOUBLE
76883: LD_INT 1
76885: DEC
76886: ST_TO_ADDR
76887: LD_VAR 0 3
76891: PUSH
76892: FOR_TO
76893: IFFALSE 76996
// begin hc_class = class_apeman ;
76895: LD_ADDR_OWVAR 28
76899: PUSH
76900: LD_INT 12
76902: ST_TO_ADDR
// hc_gallery =  ;
76903: LD_ADDR_OWVAR 33
76907: PUSH
76908: LD_STRING 
76910: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
76911: LD_ADDR_OWVAR 35
76915: PUSH
76916: LD_INT 2
76918: NEG
76919: PPUSH
76920: LD_INT 2
76922: PPUSH
76923: CALL_OW 12
76927: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
76928: LD_ADDR_OWVAR 31
76932: PUSH
76933: LD_INT 1
76935: PPUSH
76936: LD_INT 3
76938: PPUSH
76939: CALL_OW 12
76943: PUSH
76944: LD_INT 1
76946: PPUSH
76947: LD_INT 3
76949: PPUSH
76950: CALL_OW 12
76954: PUSH
76955: LD_INT 0
76957: PUSH
76958: LD_INT 0
76960: PUSH
76961: EMPTY
76962: LIST
76963: LIST
76964: LIST
76965: LIST
76966: ST_TO_ADDR
// animal := CreateHuman ;
76967: LD_ADDR_VAR 0 12
76971: PUSH
76972: CALL_OW 44
76976: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76977: LD_VAR 0 12
76981: PPUSH
76982: LD_VAR 0 8
76986: PPUSH
76987: LD_INT 0
76989: PPUSH
76990: CALL 78829 0 3
// end ;
76994: GO 76892
76996: POP
76997: POP
// if enchidnas then
76998: LD_VAR 0 4
77002: IFFALSE 77069
// for i = 1 to enchidnas do
77004: LD_ADDR_VAR 0 11
77008: PUSH
77009: DOUBLE
77010: LD_INT 1
77012: DEC
77013: ST_TO_ADDR
77014: LD_VAR 0 4
77018: PUSH
77019: FOR_TO
77020: IFFALSE 77067
// begin hc_class = 13 ;
77022: LD_ADDR_OWVAR 28
77026: PUSH
77027: LD_INT 13
77029: ST_TO_ADDR
// hc_gallery =  ;
77030: LD_ADDR_OWVAR 33
77034: PUSH
77035: LD_STRING 
77037: ST_TO_ADDR
// animal := CreateHuman ;
77038: LD_ADDR_VAR 0 12
77042: PUSH
77043: CALL_OW 44
77047: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77048: LD_VAR 0 12
77052: PPUSH
77053: LD_VAR 0 8
77057: PPUSH
77058: LD_INT 0
77060: PPUSH
77061: CALL 78829 0 3
// end ;
77065: GO 77019
77067: POP
77068: POP
// if fishes then
77069: LD_VAR 0 7
77073: IFFALSE 77140
// for i = 1 to fishes do
77075: LD_ADDR_VAR 0 11
77079: PUSH
77080: DOUBLE
77081: LD_INT 1
77083: DEC
77084: ST_TO_ADDR
77085: LD_VAR 0 7
77089: PUSH
77090: FOR_TO
77091: IFFALSE 77138
// begin hc_class = 20 ;
77093: LD_ADDR_OWVAR 28
77097: PUSH
77098: LD_INT 20
77100: ST_TO_ADDR
// hc_gallery =  ;
77101: LD_ADDR_OWVAR 33
77105: PUSH
77106: LD_STRING 
77108: ST_TO_ADDR
// animal := CreateHuman ;
77109: LD_ADDR_VAR 0 12
77113: PUSH
77114: CALL_OW 44
77118: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
77119: LD_VAR 0 12
77123: PPUSH
77124: LD_VAR 0 9
77128: PPUSH
77129: LD_INT 0
77131: PPUSH
77132: CALL 78829 0 3
// end ;
77136: GO 77090
77138: POP
77139: POP
// end ;
77140: LD_VAR 0 10
77144: RET
// export function WantHeal ( sci , unit ) ; begin
77145: LD_INT 0
77147: PPUSH
// if GetTaskList ( sci ) > 0 then
77148: LD_VAR 0 1
77152: PPUSH
77153: CALL_OW 437
77157: PUSH
77158: LD_INT 0
77160: GREATER
77161: IFFALSE 77231
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
77163: LD_VAR 0 1
77167: PPUSH
77168: CALL_OW 437
77172: PUSH
77173: LD_INT 1
77175: ARRAY
77176: PUSH
77177: LD_INT 1
77179: ARRAY
77180: PUSH
77181: LD_STRING l
77183: EQUAL
77184: PUSH
77185: LD_VAR 0 1
77189: PPUSH
77190: CALL_OW 437
77194: PUSH
77195: LD_INT 1
77197: ARRAY
77198: PUSH
77199: LD_INT 4
77201: ARRAY
77202: PUSH
77203: LD_VAR 0 2
77207: EQUAL
77208: AND
77209: IFFALSE 77221
// result := true else
77211: LD_ADDR_VAR 0 3
77215: PUSH
77216: LD_INT 1
77218: ST_TO_ADDR
77219: GO 77229
// result := false ;
77221: LD_ADDR_VAR 0 3
77225: PUSH
77226: LD_INT 0
77228: ST_TO_ADDR
// end else
77229: GO 77239
// result := false ;
77231: LD_ADDR_VAR 0 3
77235: PUSH
77236: LD_INT 0
77238: ST_TO_ADDR
// end ;
77239: LD_VAR 0 3
77243: RET
// export function HealTarget ( sci ) ; begin
77244: LD_INT 0
77246: PPUSH
// if not sci then
77247: LD_VAR 0 1
77251: NOT
77252: IFFALSE 77256
// exit ;
77254: GO 77321
// result := 0 ;
77256: LD_ADDR_VAR 0 2
77260: PUSH
77261: LD_INT 0
77263: ST_TO_ADDR
// if GetTaskList ( sci ) then
77264: LD_VAR 0 1
77268: PPUSH
77269: CALL_OW 437
77273: IFFALSE 77321
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
77275: LD_VAR 0 1
77279: PPUSH
77280: CALL_OW 437
77284: PUSH
77285: LD_INT 1
77287: ARRAY
77288: PUSH
77289: LD_INT 1
77291: ARRAY
77292: PUSH
77293: LD_STRING l
77295: EQUAL
77296: IFFALSE 77321
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
77298: LD_ADDR_VAR 0 2
77302: PUSH
77303: LD_VAR 0 1
77307: PPUSH
77308: CALL_OW 437
77312: PUSH
77313: LD_INT 1
77315: ARRAY
77316: PUSH
77317: LD_INT 4
77319: ARRAY
77320: ST_TO_ADDR
// end ;
77321: LD_VAR 0 2
77325: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
77326: LD_INT 0
77328: PPUSH
77329: PPUSH
77330: PPUSH
77331: PPUSH
// if not base_units then
77332: LD_VAR 0 1
77336: NOT
77337: IFFALSE 77341
// exit ;
77339: GO 77428
// result := false ;
77341: LD_ADDR_VAR 0 2
77345: PUSH
77346: LD_INT 0
77348: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
77349: LD_ADDR_VAR 0 5
77353: PUSH
77354: LD_VAR 0 1
77358: PPUSH
77359: LD_INT 21
77361: PUSH
77362: LD_INT 3
77364: PUSH
77365: EMPTY
77366: LIST
77367: LIST
77368: PPUSH
77369: CALL_OW 72
77373: ST_TO_ADDR
// if not tmp then
77374: LD_VAR 0 5
77378: NOT
77379: IFFALSE 77383
// exit ;
77381: GO 77428
// for i in tmp do
77383: LD_ADDR_VAR 0 3
77387: PUSH
77388: LD_VAR 0 5
77392: PUSH
77393: FOR_IN
77394: IFFALSE 77426
// begin result := EnemyInRange ( i , 22 ) ;
77396: LD_ADDR_VAR 0 2
77400: PUSH
77401: LD_VAR 0 3
77405: PPUSH
77406: LD_INT 22
77408: PPUSH
77409: CALL 75664 0 2
77413: ST_TO_ADDR
// if result then
77414: LD_VAR 0 2
77418: IFFALSE 77424
// exit ;
77420: POP
77421: POP
77422: GO 77428
// end ;
77424: GO 77393
77426: POP
77427: POP
// end ;
77428: LD_VAR 0 2
77432: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
77433: LD_INT 0
77435: PPUSH
77436: PPUSH
// if not units then
77437: LD_VAR 0 1
77441: NOT
77442: IFFALSE 77446
// exit ;
77444: GO 77516
// result := [ ] ;
77446: LD_ADDR_VAR 0 3
77450: PUSH
77451: EMPTY
77452: ST_TO_ADDR
// for i in units do
77453: LD_ADDR_VAR 0 4
77457: PUSH
77458: LD_VAR 0 1
77462: PUSH
77463: FOR_IN
77464: IFFALSE 77514
// if GetTag ( i ) = tag then
77466: LD_VAR 0 4
77470: PPUSH
77471: CALL_OW 110
77475: PUSH
77476: LD_VAR 0 2
77480: EQUAL
77481: IFFALSE 77512
// result := Replace ( result , result + 1 , i ) ;
77483: LD_ADDR_VAR 0 3
77487: PUSH
77488: LD_VAR 0 3
77492: PPUSH
77493: LD_VAR 0 3
77497: PUSH
77498: LD_INT 1
77500: PLUS
77501: PPUSH
77502: LD_VAR 0 4
77506: PPUSH
77507: CALL_OW 1
77511: ST_TO_ADDR
77512: GO 77463
77514: POP
77515: POP
// end ;
77516: LD_VAR 0 3
77520: RET
// export function IsDriver ( un ) ; begin
77521: LD_INT 0
77523: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77524: LD_ADDR_VAR 0 2
77528: PUSH
77529: LD_VAR 0 1
77533: PUSH
77534: LD_INT 55
77536: PUSH
77537: EMPTY
77538: LIST
77539: PPUSH
77540: CALL_OW 69
77544: IN
77545: ST_TO_ADDR
// end ;
77546: LD_VAR 0 2
77550: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
77551: LD_INT 0
77553: PPUSH
77554: PPUSH
// list := [ ] ;
77555: LD_ADDR_VAR 0 5
77559: PUSH
77560: EMPTY
77561: ST_TO_ADDR
// case d of 0 :
77562: LD_VAR 0 3
77566: PUSH
77567: LD_INT 0
77569: DOUBLE
77570: EQUAL
77571: IFTRUE 77575
77573: GO 77708
77575: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
77576: LD_ADDR_VAR 0 5
77580: PUSH
77581: LD_VAR 0 1
77585: PUSH
77586: LD_INT 4
77588: MINUS
77589: PUSH
77590: LD_VAR 0 2
77594: PUSH
77595: LD_INT 4
77597: MINUS
77598: PUSH
77599: LD_INT 2
77601: PUSH
77602: EMPTY
77603: LIST
77604: LIST
77605: LIST
77606: PUSH
77607: LD_VAR 0 1
77611: PUSH
77612: LD_INT 3
77614: MINUS
77615: PUSH
77616: LD_VAR 0 2
77620: PUSH
77621: LD_INT 1
77623: PUSH
77624: EMPTY
77625: LIST
77626: LIST
77627: LIST
77628: PUSH
77629: LD_VAR 0 1
77633: PUSH
77634: LD_INT 4
77636: PLUS
77637: PUSH
77638: LD_VAR 0 2
77642: PUSH
77643: LD_INT 4
77645: PUSH
77646: EMPTY
77647: LIST
77648: LIST
77649: LIST
77650: PUSH
77651: LD_VAR 0 1
77655: PUSH
77656: LD_INT 3
77658: PLUS
77659: PUSH
77660: LD_VAR 0 2
77664: PUSH
77665: LD_INT 3
77667: PLUS
77668: PUSH
77669: LD_INT 5
77671: PUSH
77672: EMPTY
77673: LIST
77674: LIST
77675: LIST
77676: PUSH
77677: LD_VAR 0 1
77681: PUSH
77682: LD_VAR 0 2
77686: PUSH
77687: LD_INT 4
77689: PLUS
77690: PUSH
77691: LD_INT 0
77693: PUSH
77694: EMPTY
77695: LIST
77696: LIST
77697: LIST
77698: PUSH
77699: EMPTY
77700: LIST
77701: LIST
77702: LIST
77703: LIST
77704: LIST
77705: ST_TO_ADDR
// end ; 1 :
77706: GO 78406
77708: LD_INT 1
77710: DOUBLE
77711: EQUAL
77712: IFTRUE 77716
77714: GO 77849
77716: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
77717: LD_ADDR_VAR 0 5
77721: PUSH
77722: LD_VAR 0 1
77726: PUSH
77727: LD_VAR 0 2
77731: PUSH
77732: LD_INT 4
77734: MINUS
77735: PUSH
77736: LD_INT 3
77738: PUSH
77739: EMPTY
77740: LIST
77741: LIST
77742: LIST
77743: PUSH
77744: LD_VAR 0 1
77748: PUSH
77749: LD_INT 3
77751: MINUS
77752: PUSH
77753: LD_VAR 0 2
77757: PUSH
77758: LD_INT 3
77760: MINUS
77761: PUSH
77762: LD_INT 2
77764: PUSH
77765: EMPTY
77766: LIST
77767: LIST
77768: LIST
77769: PUSH
77770: LD_VAR 0 1
77774: PUSH
77775: LD_INT 4
77777: MINUS
77778: PUSH
77779: LD_VAR 0 2
77783: PUSH
77784: LD_INT 1
77786: PUSH
77787: EMPTY
77788: LIST
77789: LIST
77790: LIST
77791: PUSH
77792: LD_VAR 0 1
77796: PUSH
77797: LD_VAR 0 2
77801: PUSH
77802: LD_INT 3
77804: PLUS
77805: PUSH
77806: LD_INT 0
77808: PUSH
77809: EMPTY
77810: LIST
77811: LIST
77812: LIST
77813: PUSH
77814: LD_VAR 0 1
77818: PUSH
77819: LD_INT 4
77821: PLUS
77822: PUSH
77823: LD_VAR 0 2
77827: PUSH
77828: LD_INT 4
77830: PLUS
77831: PUSH
77832: LD_INT 5
77834: PUSH
77835: EMPTY
77836: LIST
77837: LIST
77838: LIST
77839: PUSH
77840: EMPTY
77841: LIST
77842: LIST
77843: LIST
77844: LIST
77845: LIST
77846: ST_TO_ADDR
// end ; 2 :
77847: GO 78406
77849: LD_INT 2
77851: DOUBLE
77852: EQUAL
77853: IFTRUE 77857
77855: GO 77986
77857: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
77858: LD_ADDR_VAR 0 5
77862: PUSH
77863: LD_VAR 0 1
77867: PUSH
77868: LD_VAR 0 2
77872: PUSH
77873: LD_INT 3
77875: MINUS
77876: PUSH
77877: LD_INT 3
77879: PUSH
77880: EMPTY
77881: LIST
77882: LIST
77883: LIST
77884: PUSH
77885: LD_VAR 0 1
77889: PUSH
77890: LD_INT 4
77892: PLUS
77893: PUSH
77894: LD_VAR 0 2
77898: PUSH
77899: LD_INT 4
77901: PUSH
77902: EMPTY
77903: LIST
77904: LIST
77905: LIST
77906: PUSH
77907: LD_VAR 0 1
77911: PUSH
77912: LD_VAR 0 2
77916: PUSH
77917: LD_INT 4
77919: PLUS
77920: PUSH
77921: LD_INT 0
77923: PUSH
77924: EMPTY
77925: LIST
77926: LIST
77927: LIST
77928: PUSH
77929: LD_VAR 0 1
77933: PUSH
77934: LD_INT 3
77936: MINUS
77937: PUSH
77938: LD_VAR 0 2
77942: PUSH
77943: LD_INT 1
77945: PUSH
77946: EMPTY
77947: LIST
77948: LIST
77949: LIST
77950: PUSH
77951: LD_VAR 0 1
77955: PUSH
77956: LD_INT 4
77958: MINUS
77959: PUSH
77960: LD_VAR 0 2
77964: PUSH
77965: LD_INT 4
77967: MINUS
77968: PUSH
77969: LD_INT 2
77971: PUSH
77972: EMPTY
77973: LIST
77974: LIST
77975: LIST
77976: PUSH
77977: EMPTY
77978: LIST
77979: LIST
77980: LIST
77981: LIST
77982: LIST
77983: ST_TO_ADDR
// end ; 3 :
77984: GO 78406
77986: LD_INT 3
77988: DOUBLE
77989: EQUAL
77990: IFTRUE 77994
77992: GO 78127
77994: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
77995: LD_ADDR_VAR 0 5
77999: PUSH
78000: LD_VAR 0 1
78004: PUSH
78005: LD_INT 3
78007: PLUS
78008: PUSH
78009: LD_VAR 0 2
78013: PUSH
78014: LD_INT 4
78016: PUSH
78017: EMPTY
78018: LIST
78019: LIST
78020: LIST
78021: PUSH
78022: LD_VAR 0 1
78026: PUSH
78027: LD_INT 4
78029: PLUS
78030: PUSH
78031: LD_VAR 0 2
78035: PUSH
78036: LD_INT 4
78038: PLUS
78039: PUSH
78040: LD_INT 5
78042: PUSH
78043: EMPTY
78044: LIST
78045: LIST
78046: LIST
78047: PUSH
78048: LD_VAR 0 1
78052: PUSH
78053: LD_INT 4
78055: MINUS
78056: PUSH
78057: LD_VAR 0 2
78061: PUSH
78062: LD_INT 1
78064: PUSH
78065: EMPTY
78066: LIST
78067: LIST
78068: LIST
78069: PUSH
78070: LD_VAR 0 1
78074: PUSH
78075: LD_VAR 0 2
78079: PUSH
78080: LD_INT 4
78082: MINUS
78083: PUSH
78084: LD_INT 3
78086: PUSH
78087: EMPTY
78088: LIST
78089: LIST
78090: LIST
78091: PUSH
78092: LD_VAR 0 1
78096: PUSH
78097: LD_INT 3
78099: MINUS
78100: PUSH
78101: LD_VAR 0 2
78105: PUSH
78106: LD_INT 3
78108: MINUS
78109: PUSH
78110: LD_INT 2
78112: PUSH
78113: EMPTY
78114: LIST
78115: LIST
78116: LIST
78117: PUSH
78118: EMPTY
78119: LIST
78120: LIST
78121: LIST
78122: LIST
78123: LIST
78124: ST_TO_ADDR
// end ; 4 :
78125: GO 78406
78127: LD_INT 4
78129: DOUBLE
78130: EQUAL
78131: IFTRUE 78135
78133: GO 78268
78135: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
78136: LD_ADDR_VAR 0 5
78140: PUSH
78141: LD_VAR 0 1
78145: PUSH
78146: LD_VAR 0 2
78150: PUSH
78151: LD_INT 4
78153: PLUS
78154: PUSH
78155: LD_INT 0
78157: PUSH
78158: EMPTY
78159: LIST
78160: LIST
78161: LIST
78162: PUSH
78163: LD_VAR 0 1
78167: PUSH
78168: LD_INT 3
78170: PLUS
78171: PUSH
78172: LD_VAR 0 2
78176: PUSH
78177: LD_INT 3
78179: PLUS
78180: PUSH
78181: LD_INT 5
78183: PUSH
78184: EMPTY
78185: LIST
78186: LIST
78187: LIST
78188: PUSH
78189: LD_VAR 0 1
78193: PUSH
78194: LD_INT 4
78196: PLUS
78197: PUSH
78198: LD_VAR 0 2
78202: PUSH
78203: LD_INT 4
78205: PUSH
78206: EMPTY
78207: LIST
78208: LIST
78209: LIST
78210: PUSH
78211: LD_VAR 0 1
78215: PUSH
78216: LD_VAR 0 2
78220: PUSH
78221: LD_INT 3
78223: MINUS
78224: PUSH
78225: LD_INT 3
78227: PUSH
78228: EMPTY
78229: LIST
78230: LIST
78231: LIST
78232: PUSH
78233: LD_VAR 0 1
78237: PUSH
78238: LD_INT 4
78240: MINUS
78241: PUSH
78242: LD_VAR 0 2
78246: PUSH
78247: LD_INT 4
78249: MINUS
78250: PUSH
78251: LD_INT 2
78253: PUSH
78254: EMPTY
78255: LIST
78256: LIST
78257: LIST
78258: PUSH
78259: EMPTY
78260: LIST
78261: LIST
78262: LIST
78263: LIST
78264: LIST
78265: ST_TO_ADDR
// end ; 5 :
78266: GO 78406
78268: LD_INT 5
78270: DOUBLE
78271: EQUAL
78272: IFTRUE 78276
78274: GO 78405
78276: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
78277: LD_ADDR_VAR 0 5
78281: PUSH
78282: LD_VAR 0 1
78286: PUSH
78287: LD_INT 4
78289: MINUS
78290: PUSH
78291: LD_VAR 0 2
78295: PUSH
78296: LD_INT 1
78298: PUSH
78299: EMPTY
78300: LIST
78301: LIST
78302: LIST
78303: PUSH
78304: LD_VAR 0 1
78308: PUSH
78309: LD_VAR 0 2
78313: PUSH
78314: LD_INT 4
78316: MINUS
78317: PUSH
78318: LD_INT 3
78320: PUSH
78321: EMPTY
78322: LIST
78323: LIST
78324: LIST
78325: PUSH
78326: LD_VAR 0 1
78330: PUSH
78331: LD_INT 4
78333: PLUS
78334: PUSH
78335: LD_VAR 0 2
78339: PUSH
78340: LD_INT 4
78342: PLUS
78343: PUSH
78344: LD_INT 5
78346: PUSH
78347: EMPTY
78348: LIST
78349: LIST
78350: LIST
78351: PUSH
78352: LD_VAR 0 1
78356: PUSH
78357: LD_INT 3
78359: PLUS
78360: PUSH
78361: LD_VAR 0 2
78365: PUSH
78366: LD_INT 4
78368: PUSH
78369: EMPTY
78370: LIST
78371: LIST
78372: LIST
78373: PUSH
78374: LD_VAR 0 1
78378: PUSH
78379: LD_VAR 0 2
78383: PUSH
78384: LD_INT 3
78386: PLUS
78387: PUSH
78388: LD_INT 0
78390: PUSH
78391: EMPTY
78392: LIST
78393: LIST
78394: LIST
78395: PUSH
78396: EMPTY
78397: LIST
78398: LIST
78399: LIST
78400: LIST
78401: LIST
78402: ST_TO_ADDR
// end ; end ;
78403: GO 78406
78405: POP
// result := list ;
78406: LD_ADDR_VAR 0 4
78410: PUSH
78411: LD_VAR 0 5
78415: ST_TO_ADDR
// end ;
78416: LD_VAR 0 4
78420: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
78421: LD_INT 0
78423: PPUSH
78424: PPUSH
78425: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
78426: LD_VAR 0 1
78430: NOT
78431: PUSH
78432: LD_VAR 0 2
78436: PUSH
78437: LD_INT 1
78439: PUSH
78440: LD_INT 2
78442: PUSH
78443: LD_INT 3
78445: PUSH
78446: LD_INT 4
78448: PUSH
78449: EMPTY
78450: LIST
78451: LIST
78452: LIST
78453: LIST
78454: IN
78455: NOT
78456: OR
78457: IFFALSE 78461
// exit ;
78459: GO 78553
// tmp := [ ] ;
78461: LD_ADDR_VAR 0 5
78465: PUSH
78466: EMPTY
78467: ST_TO_ADDR
// for i in units do
78468: LD_ADDR_VAR 0 4
78472: PUSH
78473: LD_VAR 0 1
78477: PUSH
78478: FOR_IN
78479: IFFALSE 78522
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
78481: LD_ADDR_VAR 0 5
78485: PUSH
78486: LD_VAR 0 5
78490: PPUSH
78491: LD_VAR 0 5
78495: PUSH
78496: LD_INT 1
78498: PLUS
78499: PPUSH
78500: LD_VAR 0 4
78504: PPUSH
78505: LD_VAR 0 2
78509: PPUSH
78510: CALL_OW 259
78514: PPUSH
78515: CALL_OW 2
78519: ST_TO_ADDR
78520: GO 78478
78522: POP
78523: POP
// if not tmp then
78524: LD_VAR 0 5
78528: NOT
78529: IFFALSE 78533
// exit ;
78531: GO 78553
// result := SortListByListDesc ( units , tmp ) ;
78533: LD_ADDR_VAR 0 3
78537: PUSH
78538: LD_VAR 0 1
78542: PPUSH
78543: LD_VAR 0 5
78547: PPUSH
78548: CALL_OW 77
78552: ST_TO_ADDR
// end ;
78553: LD_VAR 0 3
78557: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
78558: LD_INT 0
78560: PPUSH
78561: PPUSH
78562: PPUSH
// result := false ;
78563: LD_ADDR_VAR 0 3
78567: PUSH
78568: LD_INT 0
78570: ST_TO_ADDR
// x := GetX ( building ) ;
78571: LD_ADDR_VAR 0 4
78575: PUSH
78576: LD_VAR 0 2
78580: PPUSH
78581: CALL_OW 250
78585: ST_TO_ADDR
// y := GetY ( building ) ;
78586: LD_ADDR_VAR 0 5
78590: PUSH
78591: LD_VAR 0 2
78595: PPUSH
78596: CALL_OW 251
78600: ST_TO_ADDR
// if not building or not x or not y then
78601: LD_VAR 0 2
78605: NOT
78606: PUSH
78607: LD_VAR 0 4
78611: NOT
78612: OR
78613: PUSH
78614: LD_VAR 0 5
78618: NOT
78619: OR
78620: IFFALSE 78624
// exit ;
78622: GO 78716
// if GetTaskList ( unit ) then
78624: LD_VAR 0 1
78628: PPUSH
78629: CALL_OW 437
78633: IFFALSE 78716
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78635: LD_STRING e
78637: PUSH
78638: LD_VAR 0 1
78642: PPUSH
78643: CALL_OW 437
78647: PUSH
78648: LD_INT 1
78650: ARRAY
78651: PUSH
78652: LD_INT 1
78654: ARRAY
78655: EQUAL
78656: PUSH
78657: LD_VAR 0 4
78661: PUSH
78662: LD_VAR 0 1
78666: PPUSH
78667: CALL_OW 437
78671: PUSH
78672: LD_INT 1
78674: ARRAY
78675: PUSH
78676: LD_INT 2
78678: ARRAY
78679: EQUAL
78680: AND
78681: PUSH
78682: LD_VAR 0 5
78686: PUSH
78687: LD_VAR 0 1
78691: PPUSH
78692: CALL_OW 437
78696: PUSH
78697: LD_INT 1
78699: ARRAY
78700: PUSH
78701: LD_INT 3
78703: ARRAY
78704: EQUAL
78705: AND
78706: IFFALSE 78716
// result := true end ;
78708: LD_ADDR_VAR 0 3
78712: PUSH
78713: LD_INT 1
78715: ST_TO_ADDR
// end ;
78716: LD_VAR 0 3
78720: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
78721: LD_INT 0
78723: PPUSH
// result := false ;
78724: LD_ADDR_VAR 0 4
78728: PUSH
78729: LD_INT 0
78731: ST_TO_ADDR
// if GetTaskList ( unit ) then
78732: LD_VAR 0 1
78736: PPUSH
78737: CALL_OW 437
78741: IFFALSE 78824
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78743: LD_STRING M
78745: PUSH
78746: LD_VAR 0 1
78750: PPUSH
78751: CALL_OW 437
78755: PUSH
78756: LD_INT 1
78758: ARRAY
78759: PUSH
78760: LD_INT 1
78762: ARRAY
78763: EQUAL
78764: PUSH
78765: LD_VAR 0 2
78769: PUSH
78770: LD_VAR 0 1
78774: PPUSH
78775: CALL_OW 437
78779: PUSH
78780: LD_INT 1
78782: ARRAY
78783: PUSH
78784: LD_INT 2
78786: ARRAY
78787: EQUAL
78788: AND
78789: PUSH
78790: LD_VAR 0 3
78794: PUSH
78795: LD_VAR 0 1
78799: PPUSH
78800: CALL_OW 437
78804: PUSH
78805: LD_INT 1
78807: ARRAY
78808: PUSH
78809: LD_INT 3
78811: ARRAY
78812: EQUAL
78813: AND
78814: IFFALSE 78824
// result := true ;
78816: LD_ADDR_VAR 0 4
78820: PUSH
78821: LD_INT 1
78823: ST_TO_ADDR
// end ; end ;
78824: LD_VAR 0 4
78828: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
78829: LD_INT 0
78831: PPUSH
78832: PPUSH
78833: PPUSH
78834: PPUSH
// if not unit or not area then
78835: LD_VAR 0 1
78839: NOT
78840: PUSH
78841: LD_VAR 0 2
78845: NOT
78846: OR
78847: IFFALSE 78851
// exit ;
78849: GO 79015
// tmp := AreaToList ( area , i ) ;
78851: LD_ADDR_VAR 0 6
78855: PUSH
78856: LD_VAR 0 2
78860: PPUSH
78861: LD_VAR 0 5
78865: PPUSH
78866: CALL_OW 517
78870: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
78871: LD_ADDR_VAR 0 5
78875: PUSH
78876: DOUBLE
78877: LD_INT 1
78879: DEC
78880: ST_TO_ADDR
78881: LD_VAR 0 6
78885: PUSH
78886: LD_INT 1
78888: ARRAY
78889: PUSH
78890: FOR_TO
78891: IFFALSE 79013
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
78893: LD_ADDR_VAR 0 7
78897: PUSH
78898: LD_VAR 0 6
78902: PUSH
78903: LD_INT 1
78905: ARRAY
78906: PUSH
78907: LD_VAR 0 5
78911: ARRAY
78912: PUSH
78913: LD_VAR 0 6
78917: PUSH
78918: LD_INT 2
78920: ARRAY
78921: PUSH
78922: LD_VAR 0 5
78926: ARRAY
78927: PUSH
78928: EMPTY
78929: LIST
78930: LIST
78931: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
78932: LD_VAR 0 7
78936: PUSH
78937: LD_INT 1
78939: ARRAY
78940: PPUSH
78941: LD_VAR 0 7
78945: PUSH
78946: LD_INT 2
78948: ARRAY
78949: PPUSH
78950: CALL_OW 428
78954: PUSH
78955: LD_INT 0
78957: EQUAL
78958: IFFALSE 79011
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
78960: LD_VAR 0 1
78964: PPUSH
78965: LD_VAR 0 7
78969: PUSH
78970: LD_INT 1
78972: ARRAY
78973: PPUSH
78974: LD_VAR 0 7
78978: PUSH
78979: LD_INT 2
78981: ARRAY
78982: PPUSH
78983: LD_VAR 0 3
78987: PPUSH
78988: CALL_OW 48
// result := IsPlaced ( unit ) ;
78992: LD_ADDR_VAR 0 4
78996: PUSH
78997: LD_VAR 0 1
79001: PPUSH
79002: CALL_OW 305
79006: ST_TO_ADDR
// exit ;
79007: POP
79008: POP
79009: GO 79015
// end ; end ;
79011: GO 78890
79013: POP
79014: POP
// end ;
79015: LD_VAR 0 4
79019: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
79020: LD_INT 0
79022: PPUSH
79023: PPUSH
79024: PPUSH
// if not side or side > 8 then
79025: LD_VAR 0 1
79029: NOT
79030: PUSH
79031: LD_VAR 0 1
79035: PUSH
79036: LD_INT 8
79038: GREATER
79039: OR
79040: IFFALSE 79044
// exit ;
79042: GO 79231
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
79044: LD_ADDR_VAR 0 4
79048: PUSH
79049: LD_INT 22
79051: PUSH
79052: LD_VAR 0 1
79056: PUSH
79057: EMPTY
79058: LIST
79059: LIST
79060: PUSH
79061: LD_INT 21
79063: PUSH
79064: LD_INT 3
79066: PUSH
79067: EMPTY
79068: LIST
79069: LIST
79070: PUSH
79071: EMPTY
79072: LIST
79073: LIST
79074: PPUSH
79075: CALL_OW 69
79079: ST_TO_ADDR
// if not tmp then
79080: LD_VAR 0 4
79084: NOT
79085: IFFALSE 79089
// exit ;
79087: GO 79231
// enable_addtolog := true ;
79089: LD_ADDR_OWVAR 81
79093: PUSH
79094: LD_INT 1
79096: ST_TO_ADDR
// AddToLog ( [ ) ;
79097: LD_STRING [
79099: PPUSH
79100: CALL_OW 561
// for i in tmp do
79104: LD_ADDR_VAR 0 3
79108: PUSH
79109: LD_VAR 0 4
79113: PUSH
79114: FOR_IN
79115: IFFALSE 79222
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
79117: LD_STRING [
79119: PUSH
79120: LD_VAR 0 3
79124: PPUSH
79125: CALL_OW 266
79129: STR
79130: PUSH
79131: LD_STRING , 
79133: STR
79134: PUSH
79135: LD_VAR 0 3
79139: PPUSH
79140: CALL_OW 250
79144: STR
79145: PUSH
79146: LD_STRING , 
79148: STR
79149: PUSH
79150: LD_VAR 0 3
79154: PPUSH
79155: CALL_OW 251
79159: STR
79160: PUSH
79161: LD_STRING , 
79163: STR
79164: PUSH
79165: LD_VAR 0 3
79169: PPUSH
79170: CALL_OW 254
79174: STR
79175: PUSH
79176: LD_STRING , 
79178: STR
79179: PUSH
79180: LD_VAR 0 3
79184: PPUSH
79185: LD_INT 1
79187: PPUSH
79188: CALL_OW 268
79192: STR
79193: PUSH
79194: LD_STRING , 
79196: STR
79197: PUSH
79198: LD_VAR 0 3
79202: PPUSH
79203: LD_INT 2
79205: PPUSH
79206: CALL_OW 268
79210: STR
79211: PUSH
79212: LD_STRING ],
79214: STR
79215: PPUSH
79216: CALL_OW 561
// end ;
79220: GO 79114
79222: POP
79223: POP
// AddToLog ( ]; ) ;
79224: LD_STRING ];
79226: PPUSH
79227: CALL_OW 561
// end ;
79231: LD_VAR 0 2
79235: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
79236: LD_INT 0
79238: PPUSH
79239: PPUSH
79240: PPUSH
79241: PPUSH
79242: PPUSH
// if not area or not rate or not max then
79243: LD_VAR 0 1
79247: NOT
79248: PUSH
79249: LD_VAR 0 2
79253: NOT
79254: OR
79255: PUSH
79256: LD_VAR 0 4
79260: NOT
79261: OR
79262: IFFALSE 79266
// exit ;
79264: GO 79458
// while 1 do
79266: LD_INT 1
79268: IFFALSE 79458
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
79270: LD_ADDR_VAR 0 9
79274: PUSH
79275: LD_VAR 0 1
79279: PPUSH
79280: LD_INT 1
79282: PPUSH
79283: CALL_OW 287
79287: PUSH
79288: LD_INT 10
79290: MUL
79291: ST_TO_ADDR
// r := rate / 10 ;
79292: LD_ADDR_VAR 0 7
79296: PUSH
79297: LD_VAR 0 2
79301: PUSH
79302: LD_INT 10
79304: DIVREAL
79305: ST_TO_ADDR
// time := 1 1$00 ;
79306: LD_ADDR_VAR 0 8
79310: PUSH
79311: LD_INT 2100
79313: ST_TO_ADDR
// if amount < min then
79314: LD_VAR 0 9
79318: PUSH
79319: LD_VAR 0 3
79323: LESS
79324: IFFALSE 79342
// r := r * 2 else
79326: LD_ADDR_VAR 0 7
79330: PUSH
79331: LD_VAR 0 7
79335: PUSH
79336: LD_INT 2
79338: MUL
79339: ST_TO_ADDR
79340: GO 79368
// if amount > max then
79342: LD_VAR 0 9
79346: PUSH
79347: LD_VAR 0 4
79351: GREATER
79352: IFFALSE 79368
// r := r / 2 ;
79354: LD_ADDR_VAR 0 7
79358: PUSH
79359: LD_VAR 0 7
79363: PUSH
79364: LD_INT 2
79366: DIVREAL
79367: ST_TO_ADDR
// time := time / r ;
79368: LD_ADDR_VAR 0 8
79372: PUSH
79373: LD_VAR 0 8
79377: PUSH
79378: LD_VAR 0 7
79382: DIVREAL
79383: ST_TO_ADDR
// if time < 0 then
79384: LD_VAR 0 8
79388: PUSH
79389: LD_INT 0
79391: LESS
79392: IFFALSE 79409
// time := time * - 1 ;
79394: LD_ADDR_VAR 0 8
79398: PUSH
79399: LD_VAR 0 8
79403: PUSH
79404: LD_INT 1
79406: NEG
79407: MUL
79408: ST_TO_ADDR
// wait ( time ) ;
79409: LD_VAR 0 8
79413: PPUSH
79414: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
79418: LD_INT 35
79420: PPUSH
79421: LD_INT 875
79423: PPUSH
79424: CALL_OW 12
79428: PPUSH
79429: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
79433: LD_INT 1
79435: PPUSH
79436: LD_INT 5
79438: PPUSH
79439: CALL_OW 12
79443: PPUSH
79444: LD_VAR 0 1
79448: PPUSH
79449: LD_INT 1
79451: PPUSH
79452: CALL_OW 55
// end ;
79456: GO 79266
// end ;
79458: LD_VAR 0 5
79462: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79463: LD_INT 0
79465: PPUSH
79466: PPUSH
79467: PPUSH
79468: PPUSH
79469: PPUSH
79470: PPUSH
79471: PPUSH
79472: PPUSH
// if not turrets or not factories then
79473: LD_VAR 0 1
79477: NOT
79478: PUSH
79479: LD_VAR 0 2
79483: NOT
79484: OR
79485: IFFALSE 79489
// exit ;
79487: GO 79796
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
79489: LD_ADDR_VAR 0 10
79493: PUSH
79494: LD_INT 5
79496: PUSH
79497: LD_INT 6
79499: PUSH
79500: EMPTY
79501: LIST
79502: LIST
79503: PUSH
79504: LD_INT 2
79506: PUSH
79507: LD_INT 4
79509: PUSH
79510: EMPTY
79511: LIST
79512: LIST
79513: PUSH
79514: LD_INT 3
79516: PUSH
79517: LD_INT 5
79519: PUSH
79520: EMPTY
79521: LIST
79522: LIST
79523: PUSH
79524: EMPTY
79525: LIST
79526: LIST
79527: LIST
79528: PUSH
79529: LD_INT 24
79531: PUSH
79532: LD_INT 25
79534: PUSH
79535: EMPTY
79536: LIST
79537: LIST
79538: PUSH
79539: LD_INT 23
79541: PUSH
79542: LD_INT 27
79544: PUSH
79545: EMPTY
79546: LIST
79547: LIST
79548: PUSH
79549: EMPTY
79550: LIST
79551: LIST
79552: PUSH
79553: LD_INT 42
79555: PUSH
79556: LD_INT 43
79558: PUSH
79559: EMPTY
79560: LIST
79561: LIST
79562: PUSH
79563: LD_INT 44
79565: PUSH
79566: LD_INT 46
79568: PUSH
79569: EMPTY
79570: LIST
79571: LIST
79572: PUSH
79573: LD_INT 45
79575: PUSH
79576: LD_INT 47
79578: PUSH
79579: EMPTY
79580: LIST
79581: LIST
79582: PUSH
79583: EMPTY
79584: LIST
79585: LIST
79586: LIST
79587: PUSH
79588: EMPTY
79589: LIST
79590: LIST
79591: LIST
79592: ST_TO_ADDR
// result := [ ] ;
79593: LD_ADDR_VAR 0 3
79597: PUSH
79598: EMPTY
79599: ST_TO_ADDR
// for i in turrets do
79600: LD_ADDR_VAR 0 4
79604: PUSH
79605: LD_VAR 0 1
79609: PUSH
79610: FOR_IN
79611: IFFALSE 79794
// begin nat := GetNation ( i ) ;
79613: LD_ADDR_VAR 0 7
79617: PUSH
79618: LD_VAR 0 4
79622: PPUSH
79623: CALL_OW 248
79627: ST_TO_ADDR
// weapon := 0 ;
79628: LD_ADDR_VAR 0 8
79632: PUSH
79633: LD_INT 0
79635: ST_TO_ADDR
// if not nat then
79636: LD_VAR 0 7
79640: NOT
79641: IFFALSE 79645
// continue ;
79643: GO 79610
// for j in list [ nat ] do
79645: LD_ADDR_VAR 0 5
79649: PUSH
79650: LD_VAR 0 10
79654: PUSH
79655: LD_VAR 0 7
79659: ARRAY
79660: PUSH
79661: FOR_IN
79662: IFFALSE 79703
// if GetBWeapon ( i ) = j [ 1 ] then
79664: LD_VAR 0 4
79668: PPUSH
79669: CALL_OW 269
79673: PUSH
79674: LD_VAR 0 5
79678: PUSH
79679: LD_INT 1
79681: ARRAY
79682: EQUAL
79683: IFFALSE 79701
// begin weapon := j [ 2 ] ;
79685: LD_ADDR_VAR 0 8
79689: PUSH
79690: LD_VAR 0 5
79694: PUSH
79695: LD_INT 2
79697: ARRAY
79698: ST_TO_ADDR
// break ;
79699: GO 79703
// end ;
79701: GO 79661
79703: POP
79704: POP
// if not weapon then
79705: LD_VAR 0 8
79709: NOT
79710: IFFALSE 79714
// continue ;
79712: GO 79610
// for k in factories do
79714: LD_ADDR_VAR 0 6
79718: PUSH
79719: LD_VAR 0 2
79723: PUSH
79724: FOR_IN
79725: IFFALSE 79790
// begin weapons := AvailableWeaponList ( k ) ;
79727: LD_ADDR_VAR 0 9
79731: PUSH
79732: LD_VAR 0 6
79736: PPUSH
79737: CALL_OW 478
79741: ST_TO_ADDR
// if not weapons then
79742: LD_VAR 0 9
79746: NOT
79747: IFFALSE 79751
// continue ;
79749: GO 79724
// if weapon in weapons then
79751: LD_VAR 0 8
79755: PUSH
79756: LD_VAR 0 9
79760: IN
79761: IFFALSE 79788
// begin result := [ i , weapon ] ;
79763: LD_ADDR_VAR 0 3
79767: PUSH
79768: LD_VAR 0 4
79772: PUSH
79773: LD_VAR 0 8
79777: PUSH
79778: EMPTY
79779: LIST
79780: LIST
79781: ST_TO_ADDR
// exit ;
79782: POP
79783: POP
79784: POP
79785: POP
79786: GO 79796
// end ; end ;
79788: GO 79724
79790: POP
79791: POP
// end ;
79792: GO 79610
79794: POP
79795: POP
// end ;
79796: LD_VAR 0 3
79800: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
79801: LD_INT 0
79803: PPUSH
// if not side or side > 8 then
79804: LD_VAR 0 3
79808: NOT
79809: PUSH
79810: LD_VAR 0 3
79814: PUSH
79815: LD_INT 8
79817: GREATER
79818: OR
79819: IFFALSE 79823
// exit ;
79821: GO 79882
// if not range then
79823: LD_VAR 0 4
79827: NOT
79828: IFFALSE 79839
// range := - 12 ;
79830: LD_ADDR_VAR 0 4
79834: PUSH
79835: LD_INT 12
79837: NEG
79838: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
79839: LD_VAR 0 1
79843: PPUSH
79844: LD_VAR 0 2
79848: PPUSH
79849: LD_VAR 0 3
79853: PPUSH
79854: LD_VAR 0 4
79858: PPUSH
79859: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
79863: LD_VAR 0 1
79867: PPUSH
79868: LD_VAR 0 2
79872: PPUSH
79873: LD_VAR 0 3
79877: PPUSH
79878: CALL_OW 331
// end ;
79882: LD_VAR 0 5
79886: RET
// export function Video ( mode ) ; begin
79887: LD_INT 0
79889: PPUSH
// ingame_video = mode ;
79890: LD_ADDR_OWVAR 52
79894: PUSH
79895: LD_VAR 0 1
79899: ST_TO_ADDR
// interface_hidden = mode ;
79900: LD_ADDR_OWVAR 54
79904: PUSH
79905: LD_VAR 0 1
79909: ST_TO_ADDR
// end ;
79910: LD_VAR 0 2
79914: RET
// export function Join ( array , element ) ; begin
79915: LD_INT 0
79917: PPUSH
// result := Replace ( array , array + 1 , element ) ;
79918: LD_ADDR_VAR 0 3
79922: PUSH
79923: LD_VAR 0 1
79927: PPUSH
79928: LD_VAR 0 1
79932: PUSH
79933: LD_INT 1
79935: PLUS
79936: PPUSH
79937: LD_VAR 0 2
79941: PPUSH
79942: CALL_OW 1
79946: ST_TO_ADDR
// end ;
79947: LD_VAR 0 3
79951: RET
// export function JoinUnion ( array , element ) ; begin
79952: LD_INT 0
79954: PPUSH
// result := array union element ;
79955: LD_ADDR_VAR 0 3
79959: PUSH
79960: LD_VAR 0 1
79964: PUSH
79965: LD_VAR 0 2
79969: UNION
79970: ST_TO_ADDR
// end ;
79971: LD_VAR 0 3
79975: RET
// export function GetBehemoths ( side ) ; begin
79976: LD_INT 0
79978: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
79979: LD_ADDR_VAR 0 2
79983: PUSH
79984: LD_INT 22
79986: PUSH
79987: LD_VAR 0 1
79991: PUSH
79992: EMPTY
79993: LIST
79994: LIST
79995: PUSH
79996: LD_INT 31
79998: PUSH
79999: LD_INT 25
80001: PUSH
80002: EMPTY
80003: LIST
80004: LIST
80005: PUSH
80006: EMPTY
80007: LIST
80008: LIST
80009: PPUSH
80010: CALL_OW 69
80014: ST_TO_ADDR
// end ;
80015: LD_VAR 0 2
80019: RET
// export function Shuffle ( array ) ; var i , index ; begin
80020: LD_INT 0
80022: PPUSH
80023: PPUSH
80024: PPUSH
// result := [ ] ;
80025: LD_ADDR_VAR 0 2
80029: PUSH
80030: EMPTY
80031: ST_TO_ADDR
// if not array then
80032: LD_VAR 0 1
80036: NOT
80037: IFFALSE 80041
// exit ;
80039: GO 80140
// Randomize ;
80041: CALL_OW 10
// for i = array downto 1 do
80045: LD_ADDR_VAR 0 3
80049: PUSH
80050: DOUBLE
80051: LD_VAR 0 1
80055: INC
80056: ST_TO_ADDR
80057: LD_INT 1
80059: PUSH
80060: FOR_DOWNTO
80061: IFFALSE 80138
// begin index := rand ( 1 , array ) ;
80063: LD_ADDR_VAR 0 4
80067: PUSH
80068: LD_INT 1
80070: PPUSH
80071: LD_VAR 0 1
80075: PPUSH
80076: CALL_OW 12
80080: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
80081: LD_ADDR_VAR 0 2
80085: PUSH
80086: LD_VAR 0 2
80090: PPUSH
80091: LD_VAR 0 2
80095: PUSH
80096: LD_INT 1
80098: PLUS
80099: PPUSH
80100: LD_VAR 0 1
80104: PUSH
80105: LD_VAR 0 4
80109: ARRAY
80110: PPUSH
80111: CALL_OW 2
80115: ST_TO_ADDR
// array := Delete ( array , index ) ;
80116: LD_ADDR_VAR 0 1
80120: PUSH
80121: LD_VAR 0 1
80125: PPUSH
80126: LD_VAR 0 4
80130: PPUSH
80131: CALL_OW 3
80135: ST_TO_ADDR
// end ;
80136: GO 80060
80138: POP
80139: POP
// end ;
80140: LD_VAR 0 2
80144: RET
// export function GetBaseMaterials ( base ) ; begin
80145: LD_INT 0
80147: PPUSH
// result := [ 0 , 0 , 0 ] ;
80148: LD_ADDR_VAR 0 2
80152: PUSH
80153: LD_INT 0
80155: PUSH
80156: LD_INT 0
80158: PUSH
80159: LD_INT 0
80161: PUSH
80162: EMPTY
80163: LIST
80164: LIST
80165: LIST
80166: ST_TO_ADDR
// if not base then
80167: LD_VAR 0 1
80171: NOT
80172: IFFALSE 80176
// exit ;
80174: GO 80225
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
80176: LD_ADDR_VAR 0 2
80180: PUSH
80181: LD_VAR 0 1
80185: PPUSH
80186: LD_INT 1
80188: PPUSH
80189: CALL_OW 275
80193: PUSH
80194: LD_VAR 0 1
80198: PPUSH
80199: LD_INT 2
80201: PPUSH
80202: CALL_OW 275
80206: PUSH
80207: LD_VAR 0 1
80211: PPUSH
80212: LD_INT 3
80214: PPUSH
80215: CALL_OW 275
80219: PUSH
80220: EMPTY
80221: LIST
80222: LIST
80223: LIST
80224: ST_TO_ADDR
// end ;
80225: LD_VAR 0 2
80229: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
80230: LD_INT 0
80232: PPUSH
80233: PPUSH
// result := array ;
80234: LD_ADDR_VAR 0 3
80238: PUSH
80239: LD_VAR 0 1
80243: ST_TO_ADDR
// if size > 0 then
80244: LD_VAR 0 2
80248: PUSH
80249: LD_INT 0
80251: GREATER
80252: IFFALSE 80298
// for i := array downto size do
80254: LD_ADDR_VAR 0 4
80258: PUSH
80259: DOUBLE
80260: LD_VAR 0 1
80264: INC
80265: ST_TO_ADDR
80266: LD_VAR 0 2
80270: PUSH
80271: FOR_DOWNTO
80272: IFFALSE 80296
// result := Delete ( result , result ) ;
80274: LD_ADDR_VAR 0 3
80278: PUSH
80279: LD_VAR 0 3
80283: PPUSH
80284: LD_VAR 0 3
80288: PPUSH
80289: CALL_OW 3
80293: ST_TO_ADDR
80294: GO 80271
80296: POP
80297: POP
// end ;
80298: LD_VAR 0 3
80302: RET
// export function ComExit ( unit ) ; var tmp ; begin
80303: LD_INT 0
80305: PPUSH
80306: PPUSH
// if not IsInUnit ( unit ) then
80307: LD_VAR 0 1
80311: PPUSH
80312: CALL_OW 310
80316: NOT
80317: IFFALSE 80321
// exit ;
80319: GO 80381
// tmp := IsInUnit ( unit ) ;
80321: LD_ADDR_VAR 0 3
80325: PUSH
80326: LD_VAR 0 1
80330: PPUSH
80331: CALL_OW 310
80335: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
80336: LD_VAR 0 3
80340: PPUSH
80341: CALL_OW 247
80345: PUSH
80346: LD_INT 2
80348: EQUAL
80349: IFFALSE 80362
// ComExitVehicle ( unit ) else
80351: LD_VAR 0 1
80355: PPUSH
80356: CALL_OW 121
80360: GO 80371
// ComExitBuilding ( unit ) ;
80362: LD_VAR 0 1
80366: PPUSH
80367: CALL_OW 122
// result := tmp ;
80371: LD_ADDR_VAR 0 2
80375: PUSH
80376: LD_VAR 0 3
80380: ST_TO_ADDR
// end ;
80381: LD_VAR 0 2
80385: RET
// export function ComExitAll ( units ) ; var i ; begin
80386: LD_INT 0
80388: PPUSH
80389: PPUSH
// if not units then
80390: LD_VAR 0 1
80394: NOT
80395: IFFALSE 80399
// exit ;
80397: GO 80425
// for i in units do
80399: LD_ADDR_VAR 0 3
80403: PUSH
80404: LD_VAR 0 1
80408: PUSH
80409: FOR_IN
80410: IFFALSE 80423
// ComExit ( i ) ;
80412: LD_VAR 0 3
80416: PPUSH
80417: CALL 80303 0 1
80421: GO 80409
80423: POP
80424: POP
// end ;
80425: LD_VAR 0 2
80429: RET
// export function ResetHc ; begin
80430: LD_INT 0
80432: PPUSH
// InitHc ;
80433: CALL_OW 19
// hc_importance := 0 ;
80437: LD_ADDR_OWVAR 32
80441: PUSH
80442: LD_INT 0
80444: ST_TO_ADDR
// end ;
80445: LD_VAR 0 1
80449: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
80450: LD_INT 0
80452: PPUSH
80453: PPUSH
80454: PPUSH
// _x := ( x1 + x2 ) div 2 ;
80455: LD_ADDR_VAR 0 6
80459: PUSH
80460: LD_VAR 0 1
80464: PUSH
80465: LD_VAR 0 3
80469: PLUS
80470: PUSH
80471: LD_INT 2
80473: DIV
80474: ST_TO_ADDR
// if _x < 0 then
80475: LD_VAR 0 6
80479: PUSH
80480: LD_INT 0
80482: LESS
80483: IFFALSE 80500
// _x := _x * - 1 ;
80485: LD_ADDR_VAR 0 6
80489: PUSH
80490: LD_VAR 0 6
80494: PUSH
80495: LD_INT 1
80497: NEG
80498: MUL
80499: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
80500: LD_ADDR_VAR 0 7
80504: PUSH
80505: LD_VAR 0 2
80509: PUSH
80510: LD_VAR 0 4
80514: PLUS
80515: PUSH
80516: LD_INT 2
80518: DIV
80519: ST_TO_ADDR
// if _y < 0 then
80520: LD_VAR 0 7
80524: PUSH
80525: LD_INT 0
80527: LESS
80528: IFFALSE 80545
// _y := _y * - 1 ;
80530: LD_ADDR_VAR 0 7
80534: PUSH
80535: LD_VAR 0 7
80539: PUSH
80540: LD_INT 1
80542: NEG
80543: MUL
80544: ST_TO_ADDR
// result := [ _x , _y ] ;
80545: LD_ADDR_VAR 0 5
80549: PUSH
80550: LD_VAR 0 6
80554: PUSH
80555: LD_VAR 0 7
80559: PUSH
80560: EMPTY
80561: LIST
80562: LIST
80563: ST_TO_ADDR
// end ;
80564: LD_VAR 0 5
80568: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
80569: LD_INT 0
80571: PPUSH
80572: PPUSH
80573: PPUSH
80574: PPUSH
// task := GetTaskList ( unit ) ;
80575: LD_ADDR_VAR 0 7
80579: PUSH
80580: LD_VAR 0 1
80584: PPUSH
80585: CALL_OW 437
80589: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
80590: LD_VAR 0 7
80594: NOT
80595: PUSH
80596: LD_VAR 0 1
80600: PPUSH
80601: LD_VAR 0 2
80605: PPUSH
80606: CALL_OW 308
80610: NOT
80611: AND
80612: IFFALSE 80616
// exit ;
80614: GO 80734
// if IsInArea ( unit , area ) then
80616: LD_VAR 0 1
80620: PPUSH
80621: LD_VAR 0 2
80625: PPUSH
80626: CALL_OW 308
80630: IFFALSE 80648
// begin ComMoveToArea ( unit , goAway ) ;
80632: LD_VAR 0 1
80636: PPUSH
80637: LD_VAR 0 3
80641: PPUSH
80642: CALL_OW 113
// exit ;
80646: GO 80734
// end ; if task [ 1 ] [ 1 ] <> M then
80648: LD_VAR 0 7
80652: PUSH
80653: LD_INT 1
80655: ARRAY
80656: PUSH
80657: LD_INT 1
80659: ARRAY
80660: PUSH
80661: LD_STRING M
80663: NONEQUAL
80664: IFFALSE 80668
// exit ;
80666: GO 80734
// x := task [ 1 ] [ 2 ] ;
80668: LD_ADDR_VAR 0 5
80672: PUSH
80673: LD_VAR 0 7
80677: PUSH
80678: LD_INT 1
80680: ARRAY
80681: PUSH
80682: LD_INT 2
80684: ARRAY
80685: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
80686: LD_ADDR_VAR 0 6
80690: PUSH
80691: LD_VAR 0 7
80695: PUSH
80696: LD_INT 1
80698: ARRAY
80699: PUSH
80700: LD_INT 3
80702: ARRAY
80703: ST_TO_ADDR
// if InArea ( x , y , area ) then
80704: LD_VAR 0 5
80708: PPUSH
80709: LD_VAR 0 6
80713: PPUSH
80714: LD_VAR 0 2
80718: PPUSH
80719: CALL_OW 309
80723: IFFALSE 80734
// ComStop ( unit ) ;
80725: LD_VAR 0 1
80729: PPUSH
80730: CALL_OW 141
// end ;
80734: LD_VAR 0 4
80738: RET
// export function Abs ( value ) ; begin
80739: LD_INT 0
80741: PPUSH
// result := value ;
80742: LD_ADDR_VAR 0 2
80746: PUSH
80747: LD_VAR 0 1
80751: ST_TO_ADDR
// if value < 0 then
80752: LD_VAR 0 1
80756: PUSH
80757: LD_INT 0
80759: LESS
80760: IFFALSE 80777
// result := value * - 1 ;
80762: LD_ADDR_VAR 0 2
80766: PUSH
80767: LD_VAR 0 1
80771: PUSH
80772: LD_INT 1
80774: NEG
80775: MUL
80776: ST_TO_ADDR
// end ;
80777: LD_VAR 0 2
80781: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
80782: LD_INT 0
80784: PPUSH
80785: PPUSH
80786: PPUSH
80787: PPUSH
80788: PPUSH
80789: PPUSH
80790: PPUSH
80791: PPUSH
// if not unit or not building then
80792: LD_VAR 0 1
80796: NOT
80797: PUSH
80798: LD_VAR 0 2
80802: NOT
80803: OR
80804: IFFALSE 80808
// exit ;
80806: GO 81034
// x := GetX ( building ) ;
80808: LD_ADDR_VAR 0 4
80812: PUSH
80813: LD_VAR 0 2
80817: PPUSH
80818: CALL_OW 250
80822: ST_TO_ADDR
// y := GetY ( building ) ;
80823: LD_ADDR_VAR 0 6
80827: PUSH
80828: LD_VAR 0 2
80832: PPUSH
80833: CALL_OW 251
80837: ST_TO_ADDR
// d := GetDir ( building ) ;
80838: LD_ADDR_VAR 0 8
80842: PUSH
80843: LD_VAR 0 2
80847: PPUSH
80848: CALL_OW 254
80852: ST_TO_ADDR
// r := 4 ;
80853: LD_ADDR_VAR 0 9
80857: PUSH
80858: LD_INT 4
80860: ST_TO_ADDR
// for i := 1 to 5 do
80861: LD_ADDR_VAR 0 10
80865: PUSH
80866: DOUBLE
80867: LD_INT 1
80869: DEC
80870: ST_TO_ADDR
80871: LD_INT 5
80873: PUSH
80874: FOR_TO
80875: IFFALSE 81032
// begin _x := ShiftX ( x , d , r + i ) ;
80877: LD_ADDR_VAR 0 5
80881: PUSH
80882: LD_VAR 0 4
80886: PPUSH
80887: LD_VAR 0 8
80891: PPUSH
80892: LD_VAR 0 9
80896: PUSH
80897: LD_VAR 0 10
80901: PLUS
80902: PPUSH
80903: CALL_OW 272
80907: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
80908: LD_ADDR_VAR 0 7
80912: PUSH
80913: LD_VAR 0 6
80917: PPUSH
80918: LD_VAR 0 8
80922: PPUSH
80923: LD_VAR 0 9
80927: PUSH
80928: LD_VAR 0 10
80932: PLUS
80933: PPUSH
80934: CALL_OW 273
80938: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
80939: LD_VAR 0 5
80943: PPUSH
80944: LD_VAR 0 7
80948: PPUSH
80949: CALL_OW 488
80953: PUSH
80954: LD_VAR 0 5
80958: PPUSH
80959: LD_VAR 0 7
80963: PPUSH
80964: CALL_OW 428
80968: PPUSH
80969: CALL_OW 247
80973: PUSH
80974: LD_INT 3
80976: PUSH
80977: LD_INT 2
80979: PUSH
80980: EMPTY
80981: LIST
80982: LIST
80983: IN
80984: NOT
80985: AND
80986: IFFALSE 81030
// begin ComMoveXY ( unit , _x , _y ) ;
80988: LD_VAR 0 1
80992: PPUSH
80993: LD_VAR 0 5
80997: PPUSH
80998: LD_VAR 0 7
81002: PPUSH
81003: CALL_OW 111
// result := [ _x , _y ] ;
81007: LD_ADDR_VAR 0 3
81011: PUSH
81012: LD_VAR 0 5
81016: PUSH
81017: LD_VAR 0 7
81021: PUSH
81022: EMPTY
81023: LIST
81024: LIST
81025: ST_TO_ADDR
// exit ;
81026: POP
81027: POP
81028: GO 81034
// end ; end ;
81030: GO 80874
81032: POP
81033: POP
// end ;
81034: LD_VAR 0 3
81038: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
81039: LD_INT 0
81041: PPUSH
81042: PPUSH
81043: PPUSH
// result := 0 ;
81044: LD_ADDR_VAR 0 3
81048: PUSH
81049: LD_INT 0
81051: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
81052: LD_VAR 0 1
81056: PUSH
81057: LD_INT 0
81059: LESS
81060: PUSH
81061: LD_VAR 0 1
81065: PUSH
81066: LD_INT 8
81068: GREATER
81069: OR
81070: PUSH
81071: LD_VAR 0 2
81075: PUSH
81076: LD_INT 0
81078: LESS
81079: OR
81080: PUSH
81081: LD_VAR 0 2
81085: PUSH
81086: LD_INT 8
81088: GREATER
81089: OR
81090: IFFALSE 81094
// exit ;
81092: GO 81169
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
81094: LD_ADDR_VAR 0 4
81098: PUSH
81099: LD_INT 22
81101: PUSH
81102: LD_VAR 0 2
81106: PUSH
81107: EMPTY
81108: LIST
81109: LIST
81110: PPUSH
81111: CALL_OW 69
81115: PUSH
81116: FOR_IN
81117: IFFALSE 81167
// begin un := UnitShoot ( i ) ;
81119: LD_ADDR_VAR 0 5
81123: PUSH
81124: LD_VAR 0 4
81128: PPUSH
81129: CALL_OW 504
81133: ST_TO_ADDR
// if GetSide ( un ) = side1 then
81134: LD_VAR 0 5
81138: PPUSH
81139: CALL_OW 255
81143: PUSH
81144: LD_VAR 0 1
81148: EQUAL
81149: IFFALSE 81165
// begin result := un ;
81151: LD_ADDR_VAR 0 3
81155: PUSH
81156: LD_VAR 0 5
81160: ST_TO_ADDR
// exit ;
81161: POP
81162: POP
81163: GO 81169
// end ; end ;
81165: GO 81116
81167: POP
81168: POP
// end ;
81169: LD_VAR 0 3
81173: RET
// export function GetCargoBay ( units ) ; begin
81174: LD_INT 0
81176: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
81177: LD_ADDR_VAR 0 2
81181: PUSH
81182: LD_VAR 0 1
81186: PPUSH
81187: LD_INT 2
81189: PUSH
81190: LD_INT 34
81192: PUSH
81193: LD_INT 12
81195: PUSH
81196: EMPTY
81197: LIST
81198: LIST
81199: PUSH
81200: LD_INT 34
81202: PUSH
81203: LD_INT 51
81205: PUSH
81206: EMPTY
81207: LIST
81208: LIST
81209: PUSH
81210: LD_INT 34
81212: PUSH
81213: LD_INT 32
81215: PUSH
81216: EMPTY
81217: LIST
81218: LIST
81219: PUSH
81220: LD_INT 34
81222: PUSH
81223: LD_EXP 66
81227: PUSH
81228: EMPTY
81229: LIST
81230: LIST
81231: PUSH
81232: EMPTY
81233: LIST
81234: LIST
81235: LIST
81236: LIST
81237: LIST
81238: PPUSH
81239: CALL_OW 72
81243: ST_TO_ADDR
// end ;
81244: LD_VAR 0 2
81248: RET
// export function Negate ( value ) ; begin
81249: LD_INT 0
81251: PPUSH
// result := not value ;
81252: LD_ADDR_VAR 0 2
81256: PUSH
81257: LD_VAR 0 1
81261: NOT
81262: ST_TO_ADDR
// end ;
81263: LD_VAR 0 2
81267: RET
// export function Inc ( value ) ; begin
81268: LD_INT 0
81270: PPUSH
// result := value + 1 ;
81271: LD_ADDR_VAR 0 2
81275: PUSH
81276: LD_VAR 0 1
81280: PUSH
81281: LD_INT 1
81283: PLUS
81284: ST_TO_ADDR
// end ;
81285: LD_VAR 0 2
81289: RET
// export function Dec ( value ) ; begin
81290: LD_INT 0
81292: PPUSH
// result := value - 1 ;
81293: LD_ADDR_VAR 0 2
81297: PUSH
81298: LD_VAR 0 1
81302: PUSH
81303: LD_INT 1
81305: MINUS
81306: ST_TO_ADDR
// end ;
81307: LD_VAR 0 2
81311: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
81312: LD_INT 0
81314: PPUSH
81315: PPUSH
81316: PPUSH
81317: PPUSH
81318: PPUSH
81319: PPUSH
81320: PPUSH
81321: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
81322: LD_VAR 0 1
81326: PPUSH
81327: LD_VAR 0 2
81331: PPUSH
81332: CALL_OW 488
81336: NOT
81337: PUSH
81338: LD_VAR 0 3
81342: PPUSH
81343: LD_VAR 0 4
81347: PPUSH
81348: CALL_OW 488
81352: NOT
81353: OR
81354: IFFALSE 81367
// begin result := - 1 ;
81356: LD_ADDR_VAR 0 5
81360: PUSH
81361: LD_INT 1
81363: NEG
81364: ST_TO_ADDR
// exit ;
81365: GO 81602
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
81367: LD_ADDR_VAR 0 12
81371: PUSH
81372: LD_VAR 0 1
81376: PPUSH
81377: LD_VAR 0 2
81381: PPUSH
81382: LD_VAR 0 3
81386: PPUSH
81387: LD_VAR 0 4
81391: PPUSH
81392: CALL 80450 0 4
81396: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
81397: LD_ADDR_VAR 0 11
81401: PUSH
81402: LD_VAR 0 1
81406: PPUSH
81407: LD_VAR 0 2
81411: PPUSH
81412: LD_VAR 0 12
81416: PUSH
81417: LD_INT 1
81419: ARRAY
81420: PPUSH
81421: LD_VAR 0 12
81425: PUSH
81426: LD_INT 2
81428: ARRAY
81429: PPUSH
81430: CALL_OW 298
81434: ST_TO_ADDR
// distance := 9999 ;
81435: LD_ADDR_VAR 0 10
81439: PUSH
81440: LD_INT 9999
81442: ST_TO_ADDR
// for i := 0 to 5 do
81443: LD_ADDR_VAR 0 6
81447: PUSH
81448: DOUBLE
81449: LD_INT 0
81451: DEC
81452: ST_TO_ADDR
81453: LD_INT 5
81455: PUSH
81456: FOR_TO
81457: IFFALSE 81600
// begin _x := ShiftX ( x1 , i , centerDist ) ;
81459: LD_ADDR_VAR 0 7
81463: PUSH
81464: LD_VAR 0 1
81468: PPUSH
81469: LD_VAR 0 6
81473: PPUSH
81474: LD_VAR 0 11
81478: PPUSH
81479: CALL_OW 272
81483: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
81484: LD_ADDR_VAR 0 8
81488: PUSH
81489: LD_VAR 0 2
81493: PPUSH
81494: LD_VAR 0 6
81498: PPUSH
81499: LD_VAR 0 11
81503: PPUSH
81504: CALL_OW 273
81508: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81509: LD_VAR 0 7
81513: PPUSH
81514: LD_VAR 0 8
81518: PPUSH
81519: CALL_OW 488
81523: NOT
81524: IFFALSE 81528
// continue ;
81526: GO 81456
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
81528: LD_ADDR_VAR 0 9
81532: PUSH
81533: LD_VAR 0 12
81537: PUSH
81538: LD_INT 1
81540: ARRAY
81541: PPUSH
81542: LD_VAR 0 12
81546: PUSH
81547: LD_INT 2
81549: ARRAY
81550: PPUSH
81551: LD_VAR 0 7
81555: PPUSH
81556: LD_VAR 0 8
81560: PPUSH
81561: CALL_OW 298
81565: ST_TO_ADDR
// if tmp < distance then
81566: LD_VAR 0 9
81570: PUSH
81571: LD_VAR 0 10
81575: LESS
81576: IFFALSE 81598
// begin result := i ;
81578: LD_ADDR_VAR 0 5
81582: PUSH
81583: LD_VAR 0 6
81587: ST_TO_ADDR
// distance := tmp ;
81588: LD_ADDR_VAR 0 10
81592: PUSH
81593: LD_VAR 0 9
81597: ST_TO_ADDR
// end ; end ;
81598: GO 81456
81600: POP
81601: POP
// end ;
81602: LD_VAR 0 5
81606: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81607: LD_INT 0
81609: PPUSH
81610: PPUSH
// if not driver or not IsInUnit ( driver ) then
81611: LD_VAR 0 1
81615: NOT
81616: PUSH
81617: LD_VAR 0 1
81621: PPUSH
81622: CALL_OW 310
81626: NOT
81627: OR
81628: IFFALSE 81632
// exit ;
81630: GO 81722
// vehicle := IsInUnit ( driver ) ;
81632: LD_ADDR_VAR 0 3
81636: PUSH
81637: LD_VAR 0 1
81641: PPUSH
81642: CALL_OW 310
81646: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81647: LD_VAR 0 1
81651: PPUSH
81652: LD_STRING \
81654: PUSH
81655: LD_INT 0
81657: PUSH
81658: LD_INT 0
81660: PUSH
81661: LD_INT 0
81663: PUSH
81664: LD_INT 0
81666: PUSH
81667: LD_INT 0
81669: PUSH
81670: LD_INT 0
81672: PUSH
81673: EMPTY
81674: LIST
81675: LIST
81676: LIST
81677: LIST
81678: LIST
81679: LIST
81680: LIST
81681: PUSH
81682: LD_STRING E
81684: PUSH
81685: LD_INT 0
81687: PUSH
81688: LD_INT 0
81690: PUSH
81691: LD_VAR 0 3
81695: PUSH
81696: LD_INT 0
81698: PUSH
81699: LD_INT 0
81701: PUSH
81702: LD_INT 0
81704: PUSH
81705: EMPTY
81706: LIST
81707: LIST
81708: LIST
81709: LIST
81710: LIST
81711: LIST
81712: LIST
81713: PUSH
81714: EMPTY
81715: LIST
81716: LIST
81717: PPUSH
81718: CALL_OW 446
// end ;
81722: LD_VAR 0 2
81726: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81727: LD_INT 0
81729: PPUSH
81730: PPUSH
// if not driver or not IsInUnit ( driver ) then
81731: LD_VAR 0 1
81735: NOT
81736: PUSH
81737: LD_VAR 0 1
81741: PPUSH
81742: CALL_OW 310
81746: NOT
81747: OR
81748: IFFALSE 81752
// exit ;
81750: GO 81842
// vehicle := IsInUnit ( driver ) ;
81752: LD_ADDR_VAR 0 3
81756: PUSH
81757: LD_VAR 0 1
81761: PPUSH
81762: CALL_OW 310
81766: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81767: LD_VAR 0 1
81771: PPUSH
81772: LD_STRING \
81774: PUSH
81775: LD_INT 0
81777: PUSH
81778: LD_INT 0
81780: PUSH
81781: LD_INT 0
81783: PUSH
81784: LD_INT 0
81786: PUSH
81787: LD_INT 0
81789: PUSH
81790: LD_INT 0
81792: PUSH
81793: EMPTY
81794: LIST
81795: LIST
81796: LIST
81797: LIST
81798: LIST
81799: LIST
81800: LIST
81801: PUSH
81802: LD_STRING E
81804: PUSH
81805: LD_INT 0
81807: PUSH
81808: LD_INT 0
81810: PUSH
81811: LD_VAR 0 3
81815: PUSH
81816: LD_INT 0
81818: PUSH
81819: LD_INT 0
81821: PUSH
81822: LD_INT 0
81824: PUSH
81825: EMPTY
81826: LIST
81827: LIST
81828: LIST
81829: LIST
81830: LIST
81831: LIST
81832: LIST
81833: PUSH
81834: EMPTY
81835: LIST
81836: LIST
81837: PPUSH
81838: CALL_OW 447
// end ;
81842: LD_VAR 0 2
81846: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
81847: LD_INT 0
81849: PPUSH
81850: PPUSH
81851: PPUSH
// tmp := [ ] ;
81852: LD_ADDR_VAR 0 5
81856: PUSH
81857: EMPTY
81858: ST_TO_ADDR
// for i in units do
81859: LD_ADDR_VAR 0 4
81863: PUSH
81864: LD_VAR 0 1
81868: PUSH
81869: FOR_IN
81870: IFFALSE 81908
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
81872: LD_ADDR_VAR 0 5
81876: PUSH
81877: LD_VAR 0 5
81881: PPUSH
81882: LD_VAR 0 5
81886: PUSH
81887: LD_INT 1
81889: PLUS
81890: PPUSH
81891: LD_VAR 0 4
81895: PPUSH
81896: CALL_OW 256
81900: PPUSH
81901: CALL_OW 2
81905: ST_TO_ADDR
81906: GO 81869
81908: POP
81909: POP
// if not tmp then
81910: LD_VAR 0 5
81914: NOT
81915: IFFALSE 81919
// exit ;
81917: GO 81967
// if asc then
81919: LD_VAR 0 2
81923: IFFALSE 81947
// result := SortListByListAsc ( units , tmp ) else
81925: LD_ADDR_VAR 0 3
81929: PUSH
81930: LD_VAR 0 1
81934: PPUSH
81935: LD_VAR 0 5
81939: PPUSH
81940: CALL_OW 76
81944: ST_TO_ADDR
81945: GO 81967
// result := SortListByListDesc ( units , tmp ) ;
81947: LD_ADDR_VAR 0 3
81951: PUSH
81952: LD_VAR 0 1
81956: PPUSH
81957: LD_VAR 0 5
81961: PPUSH
81962: CALL_OW 77
81966: ST_TO_ADDR
// end ;
81967: LD_VAR 0 3
81971: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
81972: LD_INT 0
81974: PPUSH
81975: PPUSH
// task := GetTaskList ( mech ) ;
81976: LD_ADDR_VAR 0 4
81980: PUSH
81981: LD_VAR 0 1
81985: PPUSH
81986: CALL_OW 437
81990: ST_TO_ADDR
// if not task then
81991: LD_VAR 0 4
81995: NOT
81996: IFFALSE 82000
// exit ;
81998: GO 82042
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
82000: LD_ADDR_VAR 0 3
82004: PUSH
82005: LD_VAR 0 4
82009: PUSH
82010: LD_INT 1
82012: ARRAY
82013: PUSH
82014: LD_INT 1
82016: ARRAY
82017: PUSH
82018: LD_STRING r
82020: EQUAL
82021: PUSH
82022: LD_VAR 0 4
82026: PUSH
82027: LD_INT 1
82029: ARRAY
82030: PUSH
82031: LD_INT 4
82033: ARRAY
82034: PUSH
82035: LD_VAR 0 2
82039: EQUAL
82040: AND
82041: ST_TO_ADDR
// end ;
82042: LD_VAR 0 3
82046: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
82047: LD_INT 0
82049: PPUSH
// SetDir ( unit , d ) ;
82050: LD_VAR 0 1
82054: PPUSH
82055: LD_VAR 0 4
82059: PPUSH
82060: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
82064: LD_VAR 0 1
82068: PPUSH
82069: LD_VAR 0 2
82073: PPUSH
82074: LD_VAR 0 3
82078: PPUSH
82079: LD_VAR 0 5
82083: PPUSH
82084: CALL_OW 48
// end ;
82088: LD_VAR 0 6
82092: RET
// export function ToNaturalNumber ( number ) ; begin
82093: LD_INT 0
82095: PPUSH
// result := number div 1 ;
82096: LD_ADDR_VAR 0 2
82100: PUSH
82101: LD_VAR 0 1
82105: PUSH
82106: LD_INT 1
82108: DIV
82109: ST_TO_ADDR
// if number < 0 then
82110: LD_VAR 0 1
82114: PUSH
82115: LD_INT 0
82117: LESS
82118: IFFALSE 82128
// result := 0 ;
82120: LD_ADDR_VAR 0 2
82124: PUSH
82125: LD_INT 0
82127: ST_TO_ADDR
// end ;
82128: LD_VAR 0 2
82132: RET
// export function SortByClass ( units , class ) ; var un ; begin
82133: LD_INT 0
82135: PPUSH
82136: PPUSH
// if not units or not class then
82137: LD_VAR 0 1
82141: NOT
82142: PUSH
82143: LD_VAR 0 2
82147: NOT
82148: OR
82149: IFFALSE 82153
// exit ;
82151: GO 82248
// result := [ ] ;
82153: LD_ADDR_VAR 0 3
82157: PUSH
82158: EMPTY
82159: ST_TO_ADDR
// for un in units do
82160: LD_ADDR_VAR 0 4
82164: PUSH
82165: LD_VAR 0 1
82169: PUSH
82170: FOR_IN
82171: IFFALSE 82246
// if GetClass ( un ) = class then
82173: LD_VAR 0 4
82177: PPUSH
82178: CALL_OW 257
82182: PUSH
82183: LD_VAR 0 2
82187: EQUAL
82188: IFFALSE 82215
// result := Insert ( result , 1 , un ) else
82190: LD_ADDR_VAR 0 3
82194: PUSH
82195: LD_VAR 0 3
82199: PPUSH
82200: LD_INT 1
82202: PPUSH
82203: LD_VAR 0 4
82207: PPUSH
82208: CALL_OW 2
82212: ST_TO_ADDR
82213: GO 82244
// result := Replace ( result , result + 1 , un ) ;
82215: LD_ADDR_VAR 0 3
82219: PUSH
82220: LD_VAR 0 3
82224: PPUSH
82225: LD_VAR 0 3
82229: PUSH
82230: LD_INT 1
82232: PLUS
82233: PPUSH
82234: LD_VAR 0 4
82238: PPUSH
82239: CALL_OW 1
82243: ST_TO_ADDR
82244: GO 82170
82246: POP
82247: POP
// end ;
82248: LD_VAR 0 3
82252: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
82253: LD_INT 0
82255: PPUSH
82256: PPUSH
82257: PPUSH
82258: PPUSH
82259: PPUSH
82260: PPUSH
82261: PPUSH
// result := [ ] ;
82262: LD_ADDR_VAR 0 4
82266: PUSH
82267: EMPTY
82268: ST_TO_ADDR
// if x - r < 0 then
82269: LD_VAR 0 1
82273: PUSH
82274: LD_VAR 0 3
82278: MINUS
82279: PUSH
82280: LD_INT 0
82282: LESS
82283: IFFALSE 82295
// min_x := 0 else
82285: LD_ADDR_VAR 0 8
82289: PUSH
82290: LD_INT 0
82292: ST_TO_ADDR
82293: GO 82311
// min_x := x - r ;
82295: LD_ADDR_VAR 0 8
82299: PUSH
82300: LD_VAR 0 1
82304: PUSH
82305: LD_VAR 0 3
82309: MINUS
82310: ST_TO_ADDR
// if y - r < 0 then
82311: LD_VAR 0 2
82315: PUSH
82316: LD_VAR 0 3
82320: MINUS
82321: PUSH
82322: LD_INT 0
82324: LESS
82325: IFFALSE 82337
// min_y := 0 else
82327: LD_ADDR_VAR 0 7
82331: PUSH
82332: LD_INT 0
82334: ST_TO_ADDR
82335: GO 82353
// min_y := y - r ;
82337: LD_ADDR_VAR 0 7
82341: PUSH
82342: LD_VAR 0 2
82346: PUSH
82347: LD_VAR 0 3
82351: MINUS
82352: ST_TO_ADDR
// max_x := x + r ;
82353: LD_ADDR_VAR 0 9
82357: PUSH
82358: LD_VAR 0 1
82362: PUSH
82363: LD_VAR 0 3
82367: PLUS
82368: ST_TO_ADDR
// max_y := y + r ;
82369: LD_ADDR_VAR 0 10
82373: PUSH
82374: LD_VAR 0 2
82378: PUSH
82379: LD_VAR 0 3
82383: PLUS
82384: ST_TO_ADDR
// for _x = min_x to max_x do
82385: LD_ADDR_VAR 0 5
82389: PUSH
82390: DOUBLE
82391: LD_VAR 0 8
82395: DEC
82396: ST_TO_ADDR
82397: LD_VAR 0 9
82401: PUSH
82402: FOR_TO
82403: IFFALSE 82504
// for _y = min_y to max_y do
82405: LD_ADDR_VAR 0 6
82409: PUSH
82410: DOUBLE
82411: LD_VAR 0 7
82415: DEC
82416: ST_TO_ADDR
82417: LD_VAR 0 10
82421: PUSH
82422: FOR_TO
82423: IFFALSE 82500
// begin if not ValidHex ( _x , _y ) then
82425: LD_VAR 0 5
82429: PPUSH
82430: LD_VAR 0 6
82434: PPUSH
82435: CALL_OW 488
82439: NOT
82440: IFFALSE 82444
// continue ;
82442: GO 82422
// if GetResourceTypeXY ( _x , _y ) then
82444: LD_VAR 0 5
82448: PPUSH
82449: LD_VAR 0 6
82453: PPUSH
82454: CALL_OW 283
82458: IFFALSE 82498
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
82460: LD_ADDR_VAR 0 4
82464: PUSH
82465: LD_VAR 0 4
82469: PPUSH
82470: LD_VAR 0 4
82474: PUSH
82475: LD_INT 1
82477: PLUS
82478: PPUSH
82479: LD_VAR 0 5
82483: PUSH
82484: LD_VAR 0 6
82488: PUSH
82489: EMPTY
82490: LIST
82491: LIST
82492: PPUSH
82493: CALL_OW 1
82497: ST_TO_ADDR
// end ;
82498: GO 82422
82500: POP
82501: POP
82502: GO 82402
82504: POP
82505: POP
// end ;
82506: LD_VAR 0 4
82510: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
82511: LD_INT 0
82513: PPUSH
82514: PPUSH
82515: PPUSH
82516: PPUSH
82517: PPUSH
82518: PPUSH
82519: PPUSH
82520: PPUSH
// if not units then
82521: LD_VAR 0 1
82525: NOT
82526: IFFALSE 82530
// exit ;
82528: GO 82955
// result := UnitFilter ( units , [ f_ok ] ) ;
82530: LD_ADDR_VAR 0 3
82534: PUSH
82535: LD_VAR 0 1
82539: PPUSH
82540: LD_INT 50
82542: PUSH
82543: EMPTY
82544: LIST
82545: PPUSH
82546: CALL_OW 72
82550: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
82551: LD_ADDR_VAR 0 8
82555: PUSH
82556: LD_VAR 0 1
82560: PUSH
82561: LD_INT 1
82563: ARRAY
82564: PPUSH
82565: CALL_OW 255
82569: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
82570: LD_ADDR_VAR 0 10
82574: PUSH
82575: LD_INT 29
82577: PUSH
82578: LD_EXP 69
82582: PUSH
82583: EMPTY
82584: LIST
82585: LIST
82586: ST_TO_ADDR
// if not result then
82587: LD_VAR 0 3
82591: NOT
82592: IFFALSE 82596
// exit ;
82594: GO 82955
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
82596: LD_ADDR_VAR 0 5
82600: PUSH
82601: LD_INT 81
82603: PUSH
82604: LD_VAR 0 8
82608: PUSH
82609: EMPTY
82610: LIST
82611: LIST
82612: PPUSH
82613: CALL_OW 69
82617: ST_TO_ADDR
// for i in result do
82618: LD_ADDR_VAR 0 4
82622: PUSH
82623: LD_VAR 0 3
82627: PUSH
82628: FOR_IN
82629: IFFALSE 82953
// begin tag := GetTag ( i ) + 1 ;
82631: LD_ADDR_VAR 0 9
82635: PUSH
82636: LD_VAR 0 4
82640: PPUSH
82641: CALL_OW 110
82645: PUSH
82646: LD_INT 1
82648: PLUS
82649: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
82650: LD_ADDR_VAR 0 7
82654: PUSH
82655: LD_VAR 0 4
82659: PPUSH
82660: CALL_OW 250
82664: PPUSH
82665: LD_VAR 0 4
82669: PPUSH
82670: CALL_OW 251
82674: PPUSH
82675: LD_INT 6
82677: PPUSH
82678: CALL 82253 0 3
82682: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
82683: LD_VAR 0 7
82687: PUSH
82688: LD_VAR 0 4
82692: PPUSH
82693: CALL_OW 264
82697: PUSH
82698: LD_VAR 0 10
82702: IN
82703: NOT
82704: AND
82705: IFFALSE 82744
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
82707: LD_VAR 0 4
82711: PPUSH
82712: LD_VAR 0 7
82716: PUSH
82717: LD_INT 1
82719: ARRAY
82720: PUSH
82721: LD_INT 1
82723: ARRAY
82724: PPUSH
82725: LD_VAR 0 7
82729: PUSH
82730: LD_INT 1
82732: ARRAY
82733: PUSH
82734: LD_INT 2
82736: ARRAY
82737: PPUSH
82738: CALL_OW 116
82742: GO 82951
// if path > tag then
82744: LD_VAR 0 2
82748: PUSH
82749: LD_VAR 0 9
82753: GREATER
82754: IFFALSE 82921
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
82756: LD_ADDR_VAR 0 6
82760: PUSH
82761: LD_VAR 0 5
82765: PPUSH
82766: LD_INT 91
82768: PUSH
82769: LD_VAR 0 4
82773: PUSH
82774: LD_INT 12
82776: PUSH
82777: EMPTY
82778: LIST
82779: LIST
82780: LIST
82781: PPUSH
82782: CALL_OW 72
82786: ST_TO_ADDR
// if nearEnemy then
82787: LD_VAR 0 6
82791: IFFALSE 82819
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
82793: LD_VAR 0 4
82797: PPUSH
82798: LD_VAR 0 6
82802: PPUSH
82803: LD_VAR 0 4
82807: PPUSH
82808: CALL_OW 74
82812: PPUSH
82813: CALL_OW 115
82817: GO 82919
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
82819: LD_VAR 0 4
82823: PPUSH
82824: LD_VAR 0 2
82828: PUSH
82829: LD_VAR 0 9
82833: ARRAY
82834: PUSH
82835: LD_INT 1
82837: ARRAY
82838: PPUSH
82839: LD_VAR 0 2
82843: PUSH
82844: LD_VAR 0 9
82848: ARRAY
82849: PUSH
82850: LD_INT 2
82852: ARRAY
82853: PPUSH
82854: CALL_OW 297
82858: PUSH
82859: LD_INT 6
82861: GREATER
82862: IFFALSE 82905
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
82864: LD_VAR 0 4
82868: PPUSH
82869: LD_VAR 0 2
82873: PUSH
82874: LD_VAR 0 9
82878: ARRAY
82879: PUSH
82880: LD_INT 1
82882: ARRAY
82883: PPUSH
82884: LD_VAR 0 2
82888: PUSH
82889: LD_VAR 0 9
82893: ARRAY
82894: PUSH
82895: LD_INT 2
82897: ARRAY
82898: PPUSH
82899: CALL_OW 114
82903: GO 82919
// SetTag ( i , tag ) ;
82905: LD_VAR 0 4
82909: PPUSH
82910: LD_VAR 0 9
82914: PPUSH
82915: CALL_OW 109
// end else
82919: GO 82951
// if enemy then
82921: LD_VAR 0 5
82925: IFFALSE 82951
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
82927: LD_VAR 0 4
82931: PPUSH
82932: LD_VAR 0 5
82936: PPUSH
82937: LD_VAR 0 4
82941: PPUSH
82942: CALL_OW 74
82946: PPUSH
82947: CALL_OW 115
// end ;
82951: GO 82628
82953: POP
82954: POP
// end ;
82955: LD_VAR 0 3
82959: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
82960: LD_INT 0
82962: PPUSH
82963: PPUSH
82964: PPUSH
// if not unit or IsInUnit ( unit ) then
82965: LD_VAR 0 1
82969: NOT
82970: PUSH
82971: LD_VAR 0 1
82975: PPUSH
82976: CALL_OW 310
82980: OR
82981: IFFALSE 82985
// exit ;
82983: GO 83076
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
82985: LD_ADDR_VAR 0 4
82989: PUSH
82990: LD_VAR 0 1
82994: PPUSH
82995: CALL_OW 250
82999: PPUSH
83000: LD_VAR 0 2
83004: PPUSH
83005: LD_INT 1
83007: PPUSH
83008: CALL_OW 272
83012: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
83013: LD_ADDR_VAR 0 5
83017: PUSH
83018: LD_VAR 0 1
83022: PPUSH
83023: CALL_OW 251
83027: PPUSH
83028: LD_VAR 0 2
83032: PPUSH
83033: LD_INT 1
83035: PPUSH
83036: CALL_OW 273
83040: ST_TO_ADDR
// if ValidHex ( x , y ) then
83041: LD_VAR 0 4
83045: PPUSH
83046: LD_VAR 0 5
83050: PPUSH
83051: CALL_OW 488
83055: IFFALSE 83076
// ComTurnXY ( unit , x , y ) ;
83057: LD_VAR 0 1
83061: PPUSH
83062: LD_VAR 0 4
83066: PPUSH
83067: LD_VAR 0 5
83071: PPUSH
83072: CALL_OW 118
// end ;
83076: LD_VAR 0 3
83080: RET
// export function SeeUnits ( side , units ) ; var i ; begin
83081: LD_INT 0
83083: PPUSH
83084: PPUSH
// result := false ;
83085: LD_ADDR_VAR 0 3
83089: PUSH
83090: LD_INT 0
83092: ST_TO_ADDR
// if not units then
83093: LD_VAR 0 2
83097: NOT
83098: IFFALSE 83102
// exit ;
83100: GO 83147
// for i in units do
83102: LD_ADDR_VAR 0 4
83106: PUSH
83107: LD_VAR 0 2
83111: PUSH
83112: FOR_IN
83113: IFFALSE 83145
// if See ( side , i ) then
83115: LD_VAR 0 1
83119: PPUSH
83120: LD_VAR 0 4
83124: PPUSH
83125: CALL_OW 292
83129: IFFALSE 83143
// begin result := true ;
83131: LD_ADDR_VAR 0 3
83135: PUSH
83136: LD_INT 1
83138: ST_TO_ADDR
// exit ;
83139: POP
83140: POP
83141: GO 83147
// end ;
83143: GO 83112
83145: POP
83146: POP
// end ;
83147: LD_VAR 0 3
83151: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
83152: LD_INT 0
83154: PPUSH
83155: PPUSH
83156: PPUSH
83157: PPUSH
// if not unit or not points then
83158: LD_VAR 0 1
83162: NOT
83163: PUSH
83164: LD_VAR 0 2
83168: NOT
83169: OR
83170: IFFALSE 83174
// exit ;
83172: GO 83264
// dist := 99999 ;
83174: LD_ADDR_VAR 0 5
83178: PUSH
83179: LD_INT 99999
83181: ST_TO_ADDR
// for i in points do
83182: LD_ADDR_VAR 0 4
83186: PUSH
83187: LD_VAR 0 2
83191: PUSH
83192: FOR_IN
83193: IFFALSE 83262
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
83195: LD_ADDR_VAR 0 6
83199: PUSH
83200: LD_VAR 0 1
83204: PPUSH
83205: LD_VAR 0 4
83209: PUSH
83210: LD_INT 1
83212: ARRAY
83213: PPUSH
83214: LD_VAR 0 4
83218: PUSH
83219: LD_INT 2
83221: ARRAY
83222: PPUSH
83223: CALL_OW 297
83227: ST_TO_ADDR
// if tmpDist < dist then
83228: LD_VAR 0 6
83232: PUSH
83233: LD_VAR 0 5
83237: LESS
83238: IFFALSE 83260
// begin result := i ;
83240: LD_ADDR_VAR 0 3
83244: PUSH
83245: LD_VAR 0 4
83249: ST_TO_ADDR
// dist := tmpDist ;
83250: LD_ADDR_VAR 0 5
83254: PUSH
83255: LD_VAR 0 6
83259: ST_TO_ADDR
// end ; end ;
83260: GO 83192
83262: POP
83263: POP
// end ;
83264: LD_VAR 0 3
83268: RET
