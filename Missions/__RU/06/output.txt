// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export vehiclesFrom05 , resourcesFrom05 , fastBreakthrough , stevensStatus , apeTechsStatus ; export techMatPredStatus ; export vehsFrom06 , resourcesFrom06 ; export dial_SibTechsBlocker , dial_VsevolodContactBlocker , dial_TrapDialogBlocker , dial_ConvoyDialogBlocker , dial_NorthBlocker , dial_EndMissionDialogBlocker ; export claimOvsyenkoBase , claimTerminalBase , lostAgainBase ; export immortalVsevolodTeam , savedVsevolod , vsevolodWaitGorky ; export canGoNorth ; export enableVsevolodCounter ; export canSpawnReinforces ; export canEndMission ; export canRemoveUnits ; export timeToAttack ; export cratesSpawned ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 308 0 0
// vehiclesFrom05 = LoadVariable ( 05_Tanks_4 , [ ] ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 05_Tanks_4
  31: PPUSH
  32: EMPTY
  33: PPUSH
  34: CALL_OW 30
  38: ST_TO_ADDR
// resourcesFrom05 = LoadVariable ( 05_ResourcesInCargo_3 , [ ] ) ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: LD_STRING 05_ResourcesInCargo_3
  46: PPUSH
  47: EMPTY
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// fastBreakthrough = LoadVariable ( 05_FastBreakthrough_6 , false ) ;
  54: LD_ADDR_EXP 3
  58: PUSH
  59: LD_STRING 05_FastBreakthrough_6
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// stevensStatus = LoadVariable ( 05_StevensStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 4
  74: PUSH
  75: LD_STRING 05_StevensStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// apeTechsStatus = LoadVariable ( 05_ApeTechsStatus_7 , [ 0 , 0 , 0 ] ) ;
  86: LD_ADDR_EXP 5
  90: PUSH
  91: LD_STRING 05_ApeTechsStatus_7
  93: PPUSH
  94: LD_INT 0
  96: PUSH
  97: LD_INT 0
  99: PUSH
 100: LD_INT 0
 102: PUSH
 103: EMPTY
 104: LIST
 105: LIST
 106: LIST
 107: PPUSH
 108: CALL_OW 30
 112: ST_TO_ADDR
// techMatPredStatus = state_enabled ;
 113: LD_ADDR_EXP 6
 117: PUSH
 118: LD_INT 1
 120: ST_TO_ADDR
// vehsFrom06 = [ ] ;
 121: LD_ADDR_EXP 7
 125: PUSH
 126: EMPTY
 127: ST_TO_ADDR
// resourcesFrom06 = [ ] ;
 128: LD_ADDR_EXP 8
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// dial_SibTechsBlocker = false ;
 135: LD_ADDR_EXP 9
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// dial_VsevolodContactBlocker = false ;
 143: LD_ADDR_EXP 10
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// dial_TrapDialogBlocker = false ;
 151: LD_ADDR_EXP 11
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// dial_ConvoyDialogBlocker = false ;
 159: LD_ADDR_EXP 12
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// dial_NorthBlocker = false ;
 167: LD_ADDR_EXP 13
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// dial_EndMissionDialogBlocker = false ;
 175: LD_ADDR_EXP 14
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// claimOvsyenkoBase = false ;
 183: LD_ADDR_EXP 15
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// claimTerminalBase = false ;
 191: LD_ADDR_EXP 16
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// lostAgainBase = false ;
 199: LD_ADDR_EXP 17
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// immortalVsevolodTeam = true ;
 207: LD_ADDR_EXP 18
 211: PUSH
 212: LD_INT 1
 214: ST_TO_ADDR
// savedVsevolod = false ;
 215: LD_ADDR_EXP 19
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// vsevolodWaitGorky = false ;
 223: LD_ADDR_EXP 20
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// enableVsevolodCounter = false ;
 231: LD_ADDR_EXP 22
 235: PUSH
 236: LD_INT 0
 238: ST_TO_ADDR
// canGoNorth = false ;
 239: LD_ADDR_EXP 21
 243: PUSH
 244: LD_INT 0
 246: ST_TO_ADDR
// canSpawnReinforces = false ;
 247: LD_ADDR_EXP 23
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// canEndMission = false ;
 255: LD_ADDR_EXP 24
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// canRemoveUnits = false ;
 263: LD_ADDR_EXP 25
 267: PUSH
 268: LD_INT 0
 270: ST_TO_ADDR
// timeToAttack = 0 0$00 ;
 271: LD_ADDR_EXP 26
 275: PUSH
 276: LD_INT 0
 278: ST_TO_ADDR
// cratesSpawned = 0 ;
 279: LD_ADDR_EXP 27
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// PrepareRussians ;
 287: CALL 869 0 0
// PrepareAmericans ;
 291: CALL 2750 0 0
// Nef_PrepareNature ;
 295: CALL 3844 0 0
// MissionIntro ;
 299: CALL 15401 0 0
// end ; end_of_file
 303: LD_VAR 0 1
 307: RET
// export function InitMapConfig ; begin
 308: LD_INT 0
 310: PPUSH
// BaseMapConfig ;
 311: CALL 324 0 0
// MissionMapConfig ;
 315: CALL 414 0 0
// end ;
 319: LD_VAR 0 1
 323: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 324: LD_INT 0
 326: PPUSH
// animalsAmount = [ 3 , 3 , 1 , 3 , 0 ] ;
 327: LD_ADDR_EXP 28
 331: PUSH
 332: LD_INT 3
 334: PUSH
 335: LD_INT 3
 337: PUSH
 338: LD_INT 1
 340: PUSH
 341: LD_INT 3
 343: PUSH
 344: LD_INT 0
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 354: LD_ADDR_EXP 29
 358: PUSH
 359: LD_INT 2
 361: PUSH
 362: LD_INT 2
 364: PUSH
 365: LD_INT 2
 367: PUSH
 368: LD_INT 2
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: LIST
 375: LIST
 376: ST_TO_ADDR
// animalsAgression = 3 ;
 377: LD_ADDR_EXP 30
 381: PUSH
 382: LD_INT 3
 384: ST_TO_ADDR
// debugMode = 0 ;
 385: LD_ADDR_EXP 33
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// missionPrefix = 06_ ;
 393: LD_ADDR_EXP 31
 397: PUSH
 398: LD_STRING 06_
 400: ST_TO_ADDR
// previousMissionPrefix = 05_ ;
 401: LD_ADDR_EXP 32
 405: PUSH
 406: LD_STRING 05_
 408: ST_TO_ADDR
// end ;
 409: LD_VAR 0 1
 413: RET
// export enemySkillLevel ; export ovsyenkoStartCrates , terminalStartSiberite ; export trapAmount ; export vsevolodSaveTime ; function MissionMapConfig ; begin
 414: LD_INT 0
 416: PPUSH
// enemySkillLevel = [ 3 , 4 , 5 ] [ Difficulty ] ;
 417: LD_ADDR_EXP 34
 421: PUSH
 422: LD_INT 3
 424: PUSH
 425: LD_INT 4
 427: PUSH
 428: LD_INT 5
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: LIST
 435: PUSH
 436: LD_OWVAR 67
 440: ARRAY
 441: ST_TO_ADDR
// ovsyenkoStartCrates = [ 150 , 100 , 50 ] [ Difficulty ] ;
 442: LD_ADDR_EXP 35
 446: PUSH
 447: LD_INT 150
 449: PUSH
 450: LD_INT 100
 452: PUSH
 453: LD_INT 50
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: LIST
 460: PUSH
 461: LD_OWVAR 67
 465: ARRAY
 466: ST_TO_ADDR
// terminalStartSiberite = [ 100 , 70 , 50 ] [ Difficulty ] ;
 467: LD_ADDR_EXP 36
 471: PUSH
 472: LD_INT 100
 474: PUSH
 475: LD_INT 70
 477: PUSH
 478: LD_INT 50
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: PUSH
 486: LD_OWVAR 67
 490: ARRAY
 491: ST_TO_ADDR
// trapAmount = [ 3 , 4 , 4 ] [ Difficulty ] ;
 492: LD_ADDR_EXP 37
 496: PUSH
 497: LD_INT 3
 499: PUSH
 500: LD_INT 4
 502: PUSH
 503: LD_INT 4
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: LIST
 510: PUSH
 511: LD_OWVAR 67
 515: ARRAY
 516: ST_TO_ADDR
// vsevolodSaveTime = [ 12 12$0 , 11 11$0 , 10 10$0 ] [ Difficulty ] ;
 517: LD_ADDR_EXP 38
 521: PUSH
 522: LD_INT 25200
 524: PUSH
 525: LD_INT 23100
 527: PUSH
 528: LD_INT 21000
 530: PUSH
 531: EMPTY
 532: LIST
 533: LIST
 534: LIST
 535: PUSH
 536: LD_OWVAR 67
 540: ARRAY
 541: ST_TO_ADDR
// end ;
 542: LD_VAR 0 1
 546: RET
// every 0 0$1 trigger debugMode do var i ;
 547: LD_EXP 33
 551: IFFALSE 866
 553: GO 555
 555: DISABLE
 556: LD_INT 0
 558: PPUSH
// begin enable ;
 559: ENABLE
// FogOff ( your_side ) ;
 560: LD_OWVAR 2
 564: PPUSH
 565: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 569: LD_ADDR_VAR 0 1
 573: PUSH
 574: LD_INT 22
 576: PUSH
 577: LD_OWVAR 2
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: PUSH
 586: LD_INT 2
 588: PUSH
 589: LD_INT 21
 591: PUSH
 592: LD_INT 1
 594: PUSH
 595: EMPTY
 596: LIST
 597: LIST
 598: PUSH
 599: LD_INT 21
 601: PUSH
 602: LD_INT 2
 604: PUSH
 605: EMPTY
 606: LIST
 607: LIST
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: LIST
 613: PUSH
 614: EMPTY
 615: LIST
 616: LIST
 617: PPUSH
 618: CALL_OW 69
 622: PUSH
 623: FOR_IN
 624: IFFALSE 640
// SetLives ( i , 1000 ) ;
 626: LD_VAR 0 1
 630: PPUSH
 631: LD_INT 1000
 633: PPUSH
 634: CALL_OW 234
 638: GO 623
 640: POP
 641: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 642: LD_ADDR_VAR 0 1
 646: PUSH
 647: LD_INT 22
 649: PUSH
 650: LD_OWVAR 2
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: PUSH
 659: LD_INT 21
 661: PUSH
 662: LD_INT 1
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: PPUSH
 673: CALL_OW 69
 677: PUSH
 678: FOR_IN
 679: IFFALSE 743
// begin SetSkill ( i , skill_combat , 10 ) ;
 681: LD_VAR 0 1
 685: PPUSH
 686: LD_INT 1
 688: PPUSH
 689: LD_INT 10
 691: PPUSH
 692: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 696: LD_VAR 0 1
 700: PPUSH
 701: LD_INT 2
 703: PPUSH
 704: LD_INT 10
 706: PPUSH
 707: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 711: LD_VAR 0 1
 715: PPUSH
 716: LD_INT 3
 718: PPUSH
 719: LD_INT 10
 721: PPUSH
 722: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 726: LD_VAR 0 1
 730: PPUSH
 731: LD_INT 4
 733: PPUSH
 734: LD_INT 10
 736: PPUSH
 737: CALL_OW 237
// end ;
 741: GO 678
 743: POP
 744: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 745: LD_ADDR_VAR 0 1
 749: PUSH
 750: LD_INT 22
 752: PUSH
 753: LD_OWVAR 2
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: PUSH
 762: LD_INT 2
 764: PUSH
 765: LD_INT 30
 767: PUSH
 768: LD_INT 0
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: PUSH
 775: LD_INT 30
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: EMPTY
 782: LIST
 783: LIST
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PPUSH
 794: CALL_OW 69
 798: PUSH
 799: FOR_IN
 800: IFFALSE 864
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 802: LD_VAR 0 1
 806: PPUSH
 807: CALL_OW 274
 811: PPUSH
 812: LD_INT 1
 814: PPUSH
 815: LD_INT 9999
 817: PPUSH
 818: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 822: LD_VAR 0 1
 826: PPUSH
 827: CALL_OW 274
 831: PPUSH
 832: LD_INT 2
 834: PPUSH
 835: LD_INT 9999
 837: PPUSH
 838: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 842: LD_VAR 0 1
 846: PPUSH
 847: CALL_OW 274
 851: PPUSH
 852: LD_INT 3
 854: PPUSH
 855: LD_INT 9999
 857: PPUSH
 858: CALL_OW 277
// end ;
 862: GO 799
 864: POP
 865: POP
// end ; end_of_file
 866: PPOPN 1
 868: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Platonov , Kirilenkova ; export Vsevolod , vsevolodTeam ; export function PrepareRussians ; begin
 869: LD_INT 0
 871: PPUSH
// PrepareHeroes ;
 872: CALL 881 0 0
// end ;
 876: LD_VAR 0 1
 880: RET
// function PrepareHeroes ; var i , j , car , tmp , cargoList , point , areaPoints , nearPosition , burlakPosition , distance , index ; begin
 881: LD_INT 0
 883: PPUSH
 884: PPUSH
 885: PPUSH
 886: PPUSH
 887: PPUSH
 888: PPUSH
 889: PPUSH
 890: PPUSH
 891: PPUSH
 892: PPUSH
 893: PPUSH
 894: PPUSH
// point = [ 170 , 208 ] ;
 895: LD_ADDR_VAR 0 7
 899: PUSH
 900: LD_INT 170
 902: PUSH
 903: LD_INT 208
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: ST_TO_ADDR
// areaPoints = AreaToList ( RussianSpawnArea1 , 0 ) ;
 910: LD_ADDR_VAR 0 8
 914: PUSH
 915: LD_INT 1
 917: PPUSH
 918: LD_INT 0
 920: PPUSH
 921: CALL_OW 517
 925: ST_TO_ADDR
// uc_side = 3 ;
 926: LD_ADDR_OWVAR 20
 930: PUSH
 931: LD_INT 3
 933: ST_TO_ADDR
// uc_nation = 3 ;
 934: LD_ADDR_OWVAR 21
 938: PUSH
 939: LD_INT 3
 941: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , 0 ) ;
 942: LD_ADDR_EXP 39
 946: PUSH
 947: LD_STRING Burlak
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: CALL 11170 0 3
 960: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , true , 0 ) ;
 961: LD_ADDR_EXP 44
 965: PUSH
 966: LD_STRING Titov
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: LD_INT 0
 974: PPUSH
 975: CALL 11170 0 3
 979: ST_TO_ADDR
// Dolgov := PrepareUnitExt ( Dolgov , true , 0 ) ;
 980: LD_ADDR_EXP 45
 984: PUSH
 985: LD_STRING Dolgov
 987: PPUSH
 988: LD_INT 1
 990: PPUSH
 991: LD_INT 0
 993: PPUSH
 994: CALL 11170 0 3
 998: ST_TO_ADDR
// Lipshchin := PrepareUnitExt ( Lipshchin , true , 0 ) ;
 999: LD_ADDR_EXP 46
1003: PUSH
1004: LD_STRING Lipshchin
1006: PPUSH
1007: LD_INT 1
1009: PPUSH
1010: LD_INT 0
1012: PPUSH
1013: CALL 11170 0 3
1017: ST_TO_ADDR
// Karamazov := PrepareUnitExt ( Karamazov , true , class_engineer ) ;
1018: LD_ADDR_EXP 40
1022: PUSH
1023: LD_STRING Karamazov
1025: PPUSH
1026: LD_INT 1
1028: PPUSH
1029: LD_INT 2
1031: PPUSH
1032: CALL 11170 0 3
1036: ST_TO_ADDR
// Petrovova := PrepareUnitExt ( Petrovova , true , 0 ) ;
1037: LD_ADDR_EXP 41
1041: PUSH
1042: LD_STRING Petrovova
1044: PPUSH
1045: LD_INT 1
1047: PPUSH
1048: LD_INT 0
1050: PPUSH
1051: CALL 11170 0 3
1055: ST_TO_ADDR
// Gleb := PrepareUnitExt ( Gleb , true , 0 ) ;
1056: LD_ADDR_EXP 42
1060: PUSH
1061: LD_STRING Gleb
1063: PPUSH
1064: LD_INT 1
1066: PPUSH
1067: LD_INT 0
1069: PPUSH
1070: CALL 11170 0 3
1074: ST_TO_ADDR
// Petrosyan := PrepareUnitExt ( Petrosyan , true , 0 ) ;
1075: LD_ADDR_EXP 43
1079: PUSH
1080: LD_STRING Petrosyan
1082: PPUSH
1083: LD_INT 1
1085: PPUSH
1086: LD_INT 0
1088: PPUSH
1089: CALL 11170 0 3
1093: ST_TO_ADDR
// Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
1094: LD_ADDR_EXP 47
1098: PUSH
1099: LD_STRING Platonov
1101: PPUSH
1102: LD_INT 0
1104: PPUSH
1105: LD_INT 0
1107: PPUSH
1108: CALL 11170 0 3
1112: ST_TO_ADDR
// if TestCharacters ( 04_Kirilenkova ) then
1113: LD_STRING 04_Kirilenkova
1115: PPUSH
1116: CALL_OW 28
1120: IFFALSE 1147
// begin Kirilenkova := CreateCharacter ( 04_Kirilenkova ) ;
1122: LD_ADDR_EXP 48
1126: PUSH
1127: LD_STRING 04_Kirilenkova
1129: PPUSH
1130: CALL_OW 34
1134: ST_TO_ADDR
// SetClass ( Kirilenkova , class_scientistic ) ;
1135: LD_EXP 48
1139: PPUSH
1140: LD_INT 4
1142: PPUSH
1143: CALL_OW 336
// end ; for i := 1 to vehiclesFrom05 do
1147: LD_ADDR_VAR 0 2
1151: PUSH
1152: DOUBLE
1153: LD_INT 1
1155: DEC
1156: ST_TO_ADDR
1157: LD_EXP 1
1161: PUSH
1162: FOR_TO
1163: IFFALSE 1825
// begin uc_nation = vehiclesFrom05 [ i ] [ 1 ] ;
1165: LD_ADDR_OWVAR 21
1169: PUSH
1170: LD_EXP 1
1174: PUSH
1175: LD_VAR 0 2
1179: ARRAY
1180: PUSH
1181: LD_INT 1
1183: ARRAY
1184: ST_TO_ADDR
// vc_chassis := vehiclesFrom05 [ i ] [ 2 ] ;
1185: LD_ADDR_OWVAR 37
1189: PUSH
1190: LD_EXP 1
1194: PUSH
1195: LD_VAR 0 2
1199: ARRAY
1200: PUSH
1201: LD_INT 2
1203: ARRAY
1204: ST_TO_ADDR
// vc_engine = vehiclesFrom05 [ i ] [ 3 ] ;
1205: LD_ADDR_OWVAR 39
1209: PUSH
1210: LD_EXP 1
1214: PUSH
1215: LD_VAR 0 2
1219: ARRAY
1220: PUSH
1221: LD_INT 3
1223: ARRAY
1224: ST_TO_ADDR
// vc_control = vehiclesFrom05 [ i ] [ 4 ] ;
1225: LD_ADDR_OWVAR 38
1229: PUSH
1230: LD_EXP 1
1234: PUSH
1235: LD_VAR 0 2
1239: ARRAY
1240: PUSH
1241: LD_INT 4
1243: ARRAY
1244: ST_TO_ADDR
// vc_weapon := vehiclesFrom05 [ i ] [ 5 ] ;
1245: LD_ADDR_OWVAR 40
1249: PUSH
1250: LD_EXP 1
1254: PUSH
1255: LD_VAR 0 2
1259: ARRAY
1260: PUSH
1261: LD_INT 5
1263: ARRAY
1264: ST_TO_ADDR
// uc_direction := 0 ;
1265: LD_ADDR_OWVAR 24
1269: PUSH
1270: LD_INT 0
1272: ST_TO_ADDR
// vc_fuel_battery := Rand ( 10 , 15 ) ;
1273: LD_ADDR_OWVAR 41
1277: PUSH
1278: LD_INT 10
1280: PPUSH
1281: LD_INT 15
1283: PPUSH
1284: CALL_OW 12
1288: ST_TO_ADDR
// car := CreateVehicle ;
1289: LD_ADDR_VAR 0 4
1293: PUSH
1294: CALL_OW 45
1298: ST_TO_ADDR
// distance = 999 ;
1299: LD_ADDR_VAR 0 11
1303: PUSH
1304: LD_INT 999
1306: ST_TO_ADDR
// index = 1 ;
1307: LD_ADDR_VAR 0 12
1311: PUSH
1312: LD_INT 1
1314: ST_TO_ADDR
// for j := 1 to areaPoints [ 1 ] do
1315: LD_ADDR_VAR 0 3
1319: PUSH
1320: DOUBLE
1321: LD_INT 1
1323: DEC
1324: ST_TO_ADDR
1325: LD_VAR 0 8
1329: PUSH
1330: LD_INT 1
1332: ARRAY
1333: PUSH
1334: FOR_TO
1335: IFFALSE 1506
// begin if GetDistXY ( point [ 1 ] , point [ 2 ] , areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ) < distance then
1337: LD_VAR 0 7
1341: PUSH
1342: LD_INT 1
1344: ARRAY
1345: PPUSH
1346: LD_VAR 0 7
1350: PUSH
1351: LD_INT 2
1353: ARRAY
1354: PPUSH
1355: LD_VAR 0 8
1359: PUSH
1360: LD_INT 1
1362: ARRAY
1363: PUSH
1364: LD_VAR 0 3
1368: ARRAY
1369: PPUSH
1370: LD_VAR 0 8
1374: PUSH
1375: LD_INT 2
1377: ARRAY
1378: PUSH
1379: LD_VAR 0 3
1383: ARRAY
1384: PPUSH
1385: CALL_OW 298
1389: PUSH
1390: LD_VAR 0 11
1394: LESS
1395: IFFALSE 1504
// begin distance = GetDistXY ( point [ 1 ] , point [ 2 ] , areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ) ;
1397: LD_ADDR_VAR 0 11
1401: PUSH
1402: LD_VAR 0 7
1406: PUSH
1407: LD_INT 1
1409: ARRAY
1410: PPUSH
1411: LD_VAR 0 7
1415: PUSH
1416: LD_INT 2
1418: ARRAY
1419: PPUSH
1420: LD_VAR 0 8
1424: PUSH
1425: LD_INT 1
1427: ARRAY
1428: PUSH
1429: LD_VAR 0 3
1433: ARRAY
1434: PPUSH
1435: LD_VAR 0 8
1439: PUSH
1440: LD_INT 2
1442: ARRAY
1443: PUSH
1444: LD_VAR 0 3
1448: ARRAY
1449: PPUSH
1450: CALL_OW 298
1454: ST_TO_ADDR
// nearPosition = [ areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ] ;
1455: LD_ADDR_VAR 0 9
1459: PUSH
1460: LD_VAR 0 8
1464: PUSH
1465: LD_INT 1
1467: ARRAY
1468: PUSH
1469: LD_VAR 0 3
1473: ARRAY
1474: PUSH
1475: LD_VAR 0 8
1479: PUSH
1480: LD_INT 2
1482: ARRAY
1483: PUSH
1484: LD_VAR 0 3
1488: ARRAY
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: ST_TO_ADDR
// index = j ;
1494: LD_ADDR_VAR 0 12
1498: PUSH
1499: LD_VAR 0 3
1503: ST_TO_ADDR
// end ; end ;
1504: GO 1334
1506: POP
1507: POP
// if not burlakPosition then
1508: LD_VAR 0 10
1512: NOT
1513: IFFALSE 1525
// burlakPosition = nearPosition ;
1515: LD_ADDR_VAR 0 10
1519: PUSH
1520: LD_VAR 0 9
1524: ST_TO_ADDR
// if areaPoints then
1525: LD_VAR 0 8
1529: IFFALSE 1577
// begin areaPoints = Delete2D ( areaPoints , 1 , index ) ;
1531: LD_ADDR_VAR 0 8
1535: PUSH
1536: LD_VAR 0 8
1540: PPUSH
1541: LD_INT 1
1543: PPUSH
1544: LD_VAR 0 12
1548: PPUSH
1549: CALL 11999 0 3
1553: ST_TO_ADDR
// areaPoints = Delete2D ( areaPoints , 2 , index ) ;
1554: LD_ADDR_VAR 0 8
1558: PUSH
1559: LD_VAR 0 8
1563: PPUSH
1564: LD_INT 2
1566: PPUSH
1567: LD_VAR 0 12
1571: PPUSH
1572: CALL 11999 0 3
1576: ST_TO_ADDR
// end ; PlaceUnitXY ( car , nearPosition [ 1 ] , nearPosition [ 2 ] , false ) ;
1577: LD_VAR 0 4
1581: PPUSH
1582: LD_VAR 0 9
1586: PUSH
1587: LD_INT 1
1589: ARRAY
1590: PPUSH
1591: LD_VAR 0 9
1595: PUSH
1596: LD_INT 2
1598: ARRAY
1599: PPUSH
1600: LD_INT 0
1602: PPUSH
1603: CALL_OW 48
// case vehiclesFrom05 [ i ] [ 6 ] of Bur :
1607: LD_EXP 1
1611: PUSH
1612: LD_VAR 0 2
1616: ARRAY
1617: PUSH
1618: LD_INT 6
1620: ARRAY
1621: PUSH
1622: LD_STRING Bur
1624: DOUBLE
1625: EQUAL
1626: IFTRUE 1630
1628: GO 1647
1630: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
1631: LD_EXP 39
1635: PPUSH
1636: LD_VAR 0 4
1640: PPUSH
1641: CALL_OW 52
1645: GO 1823
1647: LD_STRING Kar
1649: DOUBLE
1650: EQUAL
1651: IFTRUE 1655
1653: GO 1672
1655: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
1656: LD_EXP 40
1660: PPUSH
1661: LD_VAR 0 4
1665: PPUSH
1666: CALL_OW 52
1670: GO 1823
1672: LD_STRING Ptr
1674: DOUBLE
1675: EQUAL
1676: IFTRUE 1680
1678: GO 1697
1680: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
1681: LD_EXP 41
1685: PPUSH
1686: LD_VAR 0 4
1690: PPUSH
1691: CALL_OW 52
1695: GO 1823
1697: LD_STRING Glb
1699: DOUBLE
1700: EQUAL
1701: IFTRUE 1705
1703: GO 1722
1705: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
1706: LD_EXP 42
1710: PPUSH
1711: LD_VAR 0 4
1715: PPUSH
1716: CALL_OW 52
1720: GO 1823
1722: LD_STRING Pet
1724: DOUBLE
1725: EQUAL
1726: IFTRUE 1730
1728: GO 1747
1730: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
1731: LD_EXP 43
1735: PPUSH
1736: LD_VAR 0 4
1740: PPUSH
1741: CALL_OW 52
1745: GO 1823
1747: LD_STRING Dol
1749: DOUBLE
1750: EQUAL
1751: IFTRUE 1755
1753: GO 1772
1755: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
1756: LD_EXP 45
1760: PPUSH
1761: LD_VAR 0 4
1765: PPUSH
1766: CALL_OW 52
1770: GO 1823
1772: LD_STRING Lip
1774: DOUBLE
1775: EQUAL
1776: IFTRUE 1780
1778: GO 1797
1780: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
1781: LD_EXP 46
1785: PPUSH
1786: LD_VAR 0 4
1790: PPUSH
1791: CALL_OW 52
1795: GO 1823
1797: LD_STRING Tit
1799: DOUBLE
1800: EQUAL
1801: IFTRUE 1805
1803: GO 1822
1805: POP
// PlaceHumanInUnit ( Titov , car ) ; end ;
1806: LD_EXP 44
1810: PPUSH
1811: LD_VAR 0 4
1815: PPUSH
1816: CALL_OW 52
1820: GO 1823
1822: POP
// end ;
1823: GO 1162
1825: POP
1826: POP
// cargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
1827: LD_ADDR_VAR 0 6
1831: PUSH
1832: LD_INT 22
1834: PUSH
1835: LD_INT 3
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PUSH
1842: LD_INT 21
1844: PUSH
1845: LD_INT 2
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 2
1854: PUSH
1855: LD_INT 34
1857: PUSH
1858: LD_INT 51
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: PUSH
1865: LD_INT 34
1867: PUSH
1868: LD_INT 32
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: LIST
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: LIST
1884: PPUSH
1885: CALL_OW 69
1889: ST_TO_ADDR
// if cargoList then
1890: LD_VAR 0 6
1894: IFFALSE 2023
// for i = 1 to cargoList do
1896: LD_ADDR_VAR 0 2
1900: PUSH
1901: DOUBLE
1902: LD_INT 1
1904: DEC
1905: ST_TO_ADDR
1906: LD_VAR 0 6
1910: PUSH
1911: FOR_TO
1912: IFFALSE 2021
// if resourcesFrom05 then
1914: LD_EXP 2
1918: IFFALSE 2019
// begin AddCargo ( cargoList [ i ] , 1 , resourcesFrom05 [ i ] [ 1 ] ) ;
1920: LD_VAR 0 6
1924: PUSH
1925: LD_VAR 0 2
1929: ARRAY
1930: PPUSH
1931: LD_INT 1
1933: PPUSH
1934: LD_EXP 2
1938: PUSH
1939: LD_VAR 0 2
1943: ARRAY
1944: PUSH
1945: LD_INT 1
1947: ARRAY
1948: PPUSH
1949: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resourcesFrom05 [ i ] [ 2 ] ) ;
1953: LD_VAR 0 6
1957: PUSH
1958: LD_VAR 0 2
1962: ARRAY
1963: PPUSH
1964: LD_INT 2
1966: PPUSH
1967: LD_EXP 2
1971: PUSH
1972: LD_VAR 0 2
1976: ARRAY
1977: PUSH
1978: LD_INT 2
1980: ARRAY
1981: PPUSH
1982: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resourcesFrom05 [ i ] [ 3 ] ) ;
1986: LD_VAR 0 6
1990: PUSH
1991: LD_VAR 0 2
1995: ARRAY
1996: PPUSH
1997: LD_INT 3
1999: PPUSH
2000: LD_EXP 2
2004: PUSH
2005: LD_VAR 0 2
2009: ARRAY
2010: PUSH
2011: LD_INT 3
2013: ARRAY
2014: PPUSH
2015: CALL_OW 291
// end ;
2019: GO 1911
2021: POP
2022: POP
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_class , class_engineer ] ] ) then
2023: LD_INT 22
2025: PUSH
2026: LD_INT 3
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: PUSH
2033: LD_INT 21
2035: PUSH
2036: LD_INT 1
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PUSH
2043: LD_INT 23
2045: PUSH
2046: LD_INT 3
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: PUSH
2053: LD_INT 25
2055: PUSH
2056: LD_INT 2
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: PPUSH
2069: CALL_OW 69
2073: NOT
2074: IFFALSE 2179
// begin if IsOk ( Lipshchin ) then
2076: LD_EXP 46
2080: PPUSH
2081: CALL_OW 302
2085: IFFALSE 2101
// SetClass ( Lipshchin , class_engineer ) else
2087: LD_EXP 46
2091: PPUSH
2092: LD_INT 2
2094: PPUSH
2095: CALL_OW 336
2099: GO 2179
// begin tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ;
2101: LD_ADDR_VAR 0 5
2105: PUSH
2106: LD_INT 22
2108: PUSH
2109: LD_INT 3
2111: PUSH
2112: EMPTY
2113: LIST
2114: LIST
2115: PUSH
2116: LD_INT 21
2118: PUSH
2119: LD_INT 1
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: PUSH
2126: LD_INT 23
2128: PUSH
2129: LD_INT 3
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: PUSH
2136: LD_INT 50
2138: PUSH
2139: EMPTY
2140: LIST
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: PPUSH
2148: CALL_OW 69
2152: ST_TO_ADDR
// SetClass ( tmp [ rand ( 0 , tmp ) ] , class_engineer ) ;
2153: LD_VAR 0 5
2157: PUSH
2158: LD_INT 0
2160: PPUSH
2161: LD_VAR 0 5
2165: PPUSH
2166: CALL_OW 12
2170: ARRAY
2171: PPUSH
2172: LD_INT 2
2174: PPUSH
2175: CALL_OW 336
// end ; end ; SetTech ( tech_ApeLang , 3 , apeTechsStatus [ 1 ] ) ;
2179: LD_INT 1
2181: PPUSH
2182: LD_INT 3
2184: PPUSH
2185: LD_EXP 5
2189: PUSH
2190: LD_INT 1
2192: ARRAY
2193: PPUSH
2194: CALL_OW 322
// SetTech ( tech_ApePsych , 3 , apeTechsStatus [ 2 ] ) ;
2198: LD_INT 2
2200: PPUSH
2201: LD_INT 3
2203: PPUSH
2204: LD_EXP 5
2208: PUSH
2209: LD_INT 2
2211: ARRAY
2212: PPUSH
2213: CALL_OW 322
// SetTech ( tech_ApeAgres , 3 , apeTechsStatus [ 3 ] ) ;
2217: LD_INT 11
2219: PPUSH
2220: LD_INT 3
2222: PPUSH
2223: LD_EXP 5
2227: PUSH
2228: LD_INT 3
2230: ARRAY
2231: PPUSH
2232: CALL_OW 322
// end ;
2236: LD_VAR 0 1
2240: RET
// export function PrepareVsevolod ; var i , un ; begin
2241: LD_INT 0
2243: PPUSH
2244: PPUSH
2245: PPUSH
// uc_side = 6 ;
2246: LD_ADDR_OWVAR 20
2250: PUSH
2251: LD_INT 6
2253: ST_TO_ADDR
// uc_nation = 3 ;
2254: LD_ADDR_OWVAR 21
2258: PUSH
2259: LD_INT 3
2261: ST_TO_ADDR
// vsevolodTeam = [ ] ;
2262: LD_ADDR_EXP 50
2266: PUSH
2267: EMPTY
2268: ST_TO_ADDR
// Vsevolod := PrepareUnitExt ( Vsevolod , false , class_soldier ) ;
2269: LD_ADDR_EXP 49
2273: PUSH
2274: LD_STRING Vsevolod
2276: PPUSH
2277: LD_INT 0
2279: PPUSH
2280: LD_INT 1
2282: PPUSH
2283: CALL 11170 0 3
2287: ST_TO_ADDR
// PlaceUnitArea ( Vsevolod , VsevolodSpawnArea , false ) ;
2288: LD_EXP 49
2292: PPUSH
2293: LD_INT 7
2295: PPUSH
2296: LD_INT 0
2298: PPUSH
2299: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Vsevolod ;
2303: LD_ADDR_EXP 50
2307: PUSH
2308: LD_EXP 50
2312: PUSH
2313: LD_EXP 49
2317: ADD
2318: ST_TO_ADDR
// for i := 1 to 2 do
2319: LD_ADDR_VAR 0 2
2323: PUSH
2324: DOUBLE
2325: LD_INT 1
2327: DEC
2328: ST_TO_ADDR
2329: LD_INT 2
2331: PUSH
2332: FOR_TO
2333: IFFALSE 2388
// begin PrepareSoldier ( sex_male , 4 ) ;
2335: LD_INT 1
2337: PPUSH
2338: LD_INT 4
2340: PPUSH
2341: CALL_OW 381
// un = CreateHuman ;
2345: LD_ADDR_VAR 0 3
2349: PUSH
2350: CALL_OW 44
2354: ST_TO_ADDR
// PlaceUnitArea ( un , VsevolodSpawnArea , false ) ;
2355: LD_VAR 0 3
2359: PPUSH
2360: LD_INT 7
2362: PPUSH
2363: LD_INT 0
2365: PPUSH
2366: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ un ;
2370: LD_ADDR_EXP 50
2374: PUSH
2375: LD_EXP 50
2379: PUSH
2380: LD_VAR 0 3
2384: ADD
2385: ST_TO_ADDR
// end ;
2386: GO 2332
2388: POP
2389: POP
// end ;
2390: LD_VAR 0 1
2394: RET
// export function SpawnPlatonovReinforces ; var i , un , veh ; begin
2395: LD_INT 0
2397: PPUSH
2398: PPUSH
2399: PPUSH
2400: PPUSH
// uc_side = 3 ;
2401: LD_ADDR_OWVAR 20
2405: PUSH
2406: LD_INT 3
2408: ST_TO_ADDR
// uc_nation = 3 ;
2409: LD_ADDR_OWVAR 21
2413: PUSH
2414: LD_INT 3
2416: ST_TO_ADDR
// PrepareSoldier ( false , 4 ) ;
2417: LD_INT 0
2419: PPUSH
2420: LD_INT 4
2422: PPUSH
2423: CALL_OW 381
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] , rand ( 50 , 60 ) ) ;
2427: LD_INT 22
2429: PPUSH
2430: LD_INT 1
2432: PPUSH
2433: LD_INT 1
2435: PPUSH
2436: LD_INT 43
2438: PUSH
2439: LD_INT 44
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: PUSH
2446: LD_INT 1
2448: PPUSH
2449: LD_INT 2
2451: PPUSH
2452: CALL_OW 12
2456: ARRAY
2457: PPUSH
2458: LD_INT 50
2460: PPUSH
2461: LD_INT 60
2463: PPUSH
2464: CALL_OW 12
2468: PPUSH
2469: CALL 42577 0 5
// veh = CreateVehicle ;
2473: LD_ADDR_VAR 0 4
2477: PUSH
2478: CALL_OW 45
2482: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
2483: LD_VAR 0 4
2487: PPUSH
2488: LD_INT 0
2490: PPUSH
2491: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 230 , false ) ;
2495: LD_VAR 0 4
2499: PPUSH
2500: LD_INT 134
2502: PPUSH
2503: LD_INT 230
2505: PPUSH
2506: LD_INT 0
2508: PPUSH
2509: CALL_OW 48
// un = CreateHuman ;
2513: LD_ADDR_VAR 0 3
2517: PUSH
2518: CALL_OW 44
2522: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2523: LD_VAR 0 3
2527: PPUSH
2528: LD_VAR 0 4
2532: PPUSH
2533: CALL_OW 52
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
2537: LD_INT 22
2539: PPUSH
2540: LD_INT 1
2542: PPUSH
2543: LD_INT 1
2545: PPUSH
2546: LD_INT 51
2548: PPUSH
2549: LD_INT 50
2551: PPUSH
2552: LD_INT 60
2554: PPUSH
2555: CALL_OW 12
2559: PPUSH
2560: CALL 42577 0 5
// veh = CreateVehicle ;
2564: LD_ADDR_VAR 0 4
2568: PUSH
2569: CALL_OW 45
2573: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
2574: LD_VAR 0 4
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 233 , false ) ;
2586: LD_VAR 0 4
2590: PPUSH
2591: LD_INT 134
2593: PPUSH
2594: LD_INT 233
2596: PPUSH
2597: LD_INT 0
2599: PPUSH
2600: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
2604: LD_VAR 0 4
2608: PPUSH
2609: LD_INT 1
2611: PPUSH
2612: LD_INT 100
2614: PPUSH
2615: CALL_OW 290
// un = CreateHuman ;
2619: LD_ADDR_VAR 0 3
2623: PUSH
2624: CALL_OW 44
2628: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2629: LD_VAR 0 3
2633: PPUSH
2634: LD_VAR 0 4
2638: PPUSH
2639: CALL_OW 52
// if Kirilenkova then
2643: LD_EXP 48
2647: IFFALSE 2745
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
2649: LD_INT 22
2651: PPUSH
2652: LD_INT 1
2654: PPUSH
2655: LD_INT 1
2657: PPUSH
2658: LD_INT 51
2660: PPUSH
2661: LD_INT 50
2663: PPUSH
2664: LD_INT 60
2666: PPUSH
2667: CALL_OW 12
2671: PPUSH
2672: CALL 42577 0 5
// veh = CreateVehicle ;
2676: LD_ADDR_VAR 0 4
2680: PUSH
2681: CALL_OW 45
2685: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
2686: LD_VAR 0 4
2690: PPUSH
2691: LD_INT 0
2693: PPUSH
2694: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 236 , false ) ;
2698: LD_VAR 0 4
2702: PPUSH
2703: LD_INT 134
2705: PPUSH
2706: LD_INT 236
2708: PPUSH
2709: LD_INT 0
2711: PPUSH
2712: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
2716: LD_VAR 0 4
2720: PPUSH
2721: LD_INT 1
2723: PPUSH
2724: LD_INT 100
2726: PPUSH
2727: CALL_OW 290
// PlaceHumanInUnit ( Kirilenkova , veh ) ;
2731: LD_EXP 48
2735: PPUSH
2736: LD_VAR 0 4
2740: PPUSH
2741: CALL_OW 52
// end ; end ; end_of_file
2745: LD_VAR 0 1
2749: RET
// export VanHouten ; export ovsyenkoBase , terminalBase , headAmBase ; export trapTeam , convoyTeam , attackTeam ; export function PrepareAmericans ; begin
2750: LD_INT 0
2752: PPUSH
// PrepareOvsyenko ;
2753: CALL 2770 0 0
// PrepareTerminal ;
2757: CALL 2965 0 0
// PrepareMainAmericanBase ;
2761: CALL 3048 0 0
// end ;
2765: LD_VAR 0 1
2769: RET
// function PrepareOvsyenko ; var soldiersAmount ; begin
2770: LD_INT 0
2772: PPUSH
2773: PPUSH
// uc_side = 1 ;
2774: LD_ADDR_OWVAR 20
2778: PUSH
2779: LD_INT 1
2781: ST_TO_ADDR
// uc_nation = nation_american ;
2782: LD_ADDR_OWVAR 21
2786: PUSH
2787: LD_INT 1
2789: ST_TO_ADDR
// soldiersAmount = 3 ;
2790: LD_ADDR_VAR 0 2
2794: PUSH
2795: LD_INT 3
2797: ST_TO_ADDR
// if fastBreakthrough then
2798: LD_EXP 3
2802: IFFALSE 2820
// begin RemoveUnit ( ovs_bun2 ) ;
2804: LD_INT 229
2806: PPUSH
2807: CALL_OW 64
// RemoveUnit ( ovs_bun3 ) ;
2811: LD_INT 258
2813: PPUSH
2814: CALL_OW 64
// end else
2818: GO 2828
// soldiersAmount = 4 ;
2820: LD_ADDR_VAR 0 2
2824: PUSH
2825: LD_INT 4
2827: ST_TO_ADDR
// ovsyenkoBase := Nef_PrepareBase ( ovsyenko , OvsyenkoBaseArea , ovsyenko , enemySkillLevel , [ ovsyenkoStartCrates , 50 , 0 ] , 1 , [ soldiersAmount , 1 , 0 , 1 ] ) ;
2828: LD_ADDR_EXP 52
2832: PUSH
2833: LD_INT 86
2835: PPUSH
2836: LD_INT 3
2838: PPUSH
2839: LD_STRING ovsyenko
2841: PPUSH
2842: LD_EXP 34
2846: PPUSH
2847: LD_EXP 35
2851: PUSH
2852: LD_INT 50
2854: PUSH
2855: LD_INT 0
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: PPUSH
2863: LD_INT 1
2865: PPUSH
2866: LD_VAR 0 2
2870: PUSH
2871: LD_INT 1
2873: PUSH
2874: LD_INT 0
2876: PUSH
2877: LD_INT 1
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: LIST
2884: LIST
2885: PPUSH
2886: CALL 12071 0 7
2890: ST_TO_ADDR
// case Difficulty of 1 :
2891: LD_OWVAR 67
2895: PUSH
2896: LD_INT 1
2898: DOUBLE
2899: EQUAL
2900: IFTRUE 2904
2902: GO 2917
2904: POP
// PlaceWeaponTurret ( ovs_bun1 , us_double_gun ) ; 2 :
2905: LD_INT 97
2907: PPUSH
2908: LD_INT 5
2910: PPUSH
2911: CALL_OW 431
2915: GO 2960
2917: LD_INT 2
2919: DOUBLE
2920: EQUAL
2921: IFTRUE 2925
2923: GO 2938
2925: POP
// PlaceWeaponTurret ( ovs_bun1 , us_light_gun ) ; 3 :
2926: LD_INT 97
2928: PPUSH
2929: LD_INT 3
2931: PPUSH
2932: CALL_OW 431
2936: GO 2960
2938: LD_INT 3
2940: DOUBLE
2941: EQUAL
2942: IFTRUE 2946
2944: GO 2959
2946: POP
// PlaceWeaponTurret ( ovs_bun1 , us_gatling_gun ) ; end ;
2947: LD_INT 97
2949: PPUSH
2950: LD_INT 4
2952: PPUSH
2953: CALL_OW 431
2957: GO 2960
2959: POP
// end ;
2960: LD_VAR 0 1
2964: RET
// function PrepareTerminal ; begin
2965: LD_INT 0
2967: PPUSH
// uc_side = 1 ;
2968: LD_ADDR_OWVAR 20
2972: PUSH
2973: LD_INT 1
2975: ST_TO_ADDR
// uc_nation = nation_american ;
2976: LD_ADDR_OWVAR 21
2980: PUSH
2981: LD_INT 1
2983: ST_TO_ADDR
// terminalBase := Nef_PrepareBase ( terminal , terminalBaseArea , terminal , enemySkillLevel , [ 100 , 50 , 0 ] , 1 , [ 2 , 1 , 0 , 0 ] ) ;
2984: LD_ADDR_EXP 53
2988: PUSH
2989: LD_INT 168
2991: PPUSH
2992: LD_INT 4
2994: PPUSH
2995: LD_STRING terminal
2997: PPUSH
2998: LD_EXP 34
3002: PPUSH
3003: LD_INT 100
3005: PUSH
3006: LD_INT 50
3008: PUSH
3009: LD_INT 0
3011: PUSH
3012: EMPTY
3013: LIST
3014: LIST
3015: LIST
3016: PPUSH
3017: LD_INT 1
3019: PPUSH
3020: LD_INT 2
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: LD_INT 0
3028: PUSH
3029: LD_INT 0
3031: PUSH
3032: EMPTY
3033: LIST
3034: LIST
3035: LIST
3036: LIST
3037: PPUSH
3038: CALL 12071 0 7
3042: ST_TO_ADDR
// end ;
3043: LD_VAR 0 1
3047: RET
// function PrepareMainAmericanBase ; begin
3048: LD_INT 0
3050: PPUSH
// uc_side = 1 ;
3051: LD_ADDR_OWVAR 20
3055: PUSH
3056: LD_INT 1
3058: ST_TO_ADDR
// uc_nation = nation_american ;
3059: LD_ADDR_OWVAR 21
3063: PUSH
3064: LD_INT 1
3066: ST_TO_ADDR
// if fastBreakthrough then
3067: LD_EXP 3
3071: IFFALSE 3080
// RemoveUnit ( ovs_bun2 ) ;
3073: LD_INT 229
3075: PPUSH
3076: CALL_OW 64
// headAmBase := Nef_PrepareBase ( headamdepot , HeadAmericanBaseArea ,  , enemySkillLevel , [ 3000 , 1000 , 0 ] , 1 , [ 9 , 3 , 9 , 2 ] ) ;
3080: LD_ADDR_EXP 54
3084: PUSH
3085: LD_INT 106
3087: PPUSH
3088: LD_INT 5
3090: PPUSH
3091: LD_STRING 
3093: PPUSH
3094: LD_EXP 34
3098: PPUSH
3099: LD_INT 3000
3101: PUSH
3102: LD_INT 1000
3104: PUSH
3105: LD_INT 0
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: LIST
3112: PPUSH
3113: LD_INT 1
3115: PPUSH
3116: LD_INT 9
3118: PUSH
3119: LD_INT 3
3121: PUSH
3122: LD_INT 9
3124: PUSH
3125: LD_INT 2
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: PPUSH
3134: CALL 12071 0 7
3138: ST_TO_ADDR
// VanHouten = PrepareUnitExt ( VanHouten , true , class_soldier ) ;
3139: LD_ADDR_EXP 51
3143: PUSH
3144: LD_STRING VanHouten
3146: PPUSH
3147: LD_INT 1
3149: PPUSH
3150: LD_INT 1
3152: PPUSH
3153: CALL 11170 0 3
3157: ST_TO_ADDR
// headAmBase = headAmBase ^ VanHouten ;
3158: LD_ADDR_EXP 54
3162: PUSH
3163: LD_EXP 54
3167: PUSH
3168: LD_EXP 51
3172: ADD
3173: ST_TO_ADDR
// PlaceUnitXYR ( VanHouten , 35 , 57 , 3 , false ) ;
3174: LD_EXP 51
3178: PPUSH
3179: LD_INT 35
3181: PPUSH
3182: LD_INT 57
3184: PPUSH
3185: LD_INT 3
3187: PPUSH
3188: LD_INT 0
3190: PPUSH
3191: CALL_OW 50
// end ;
3195: LD_VAR 0 1
3199: RET
// export function PrepareTrap ; var i , un , nearEnemyUnit ; begin
3200: LD_INT 0
3202: PPUSH
3203: PPUSH
3204: PPUSH
3205: PPUSH
// uc_side = 1 ;
3206: LD_ADDR_OWVAR 20
3210: PUSH
3211: LD_INT 1
3213: ST_TO_ADDR
// uc_nation = nation_american ;
3214: LD_ADDR_OWVAR 21
3218: PUSH
3219: LD_INT 1
3221: ST_TO_ADDR
// for i := 1 to trapAmount do
3222: LD_ADDR_VAR 0 2
3226: PUSH
3227: DOUBLE
3228: LD_INT 1
3230: DEC
3231: ST_TO_ADDR
3232: LD_EXP 37
3236: PUSH
3237: FOR_TO
3238: IFFALSE 3357
// begin PrepareSoldier ( false , enemySkillLevel ) ;
3240: LD_INT 0
3242: PPUSH
3243: LD_EXP 34
3247: PPUSH
3248: CALL_OW 381
// un = CreateHuman ;
3252: LD_ADDR_VAR 0 3
3256: PUSH
3257: CALL_OW 44
3261: ST_TO_ADDR
// trapTeam = trapTeam ^ un ;
3262: LD_ADDR_EXP 55
3266: PUSH
3267: LD_EXP 55
3271: PUSH
3272: LD_VAR 0 3
3276: ADD
3277: ST_TO_ADDR
// PlaceUnitArea ( un , TrapSpawnArea , false ) ;
3278: LD_VAR 0 3
3282: PPUSH
3283: LD_INT 11
3285: PPUSH
3286: LD_INT 0
3288: PPUSH
3289: CALL_OW 49
// nearEnemyUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] ] ) , un ) ;
3293: LD_ADDR_VAR 0 4
3297: PUSH
3298: LD_INT 22
3300: PUSH
3301: LD_INT 3
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: PUSH
3308: EMPTY
3309: LIST
3310: PPUSH
3311: CALL_OW 69
3315: PPUSH
3316: LD_VAR 0 3
3320: PPUSH
3321: CALL_OW 74
3325: ST_TO_ADDR
// ComAgressiveMove ( un , GetX ( nearEnemyUnit ) , GetY ( nearEnemyUnit ) ) ;
3326: LD_VAR 0 3
3330: PPUSH
3331: LD_VAR 0 4
3335: PPUSH
3336: CALL_OW 250
3340: PPUSH
3341: LD_VAR 0 4
3345: PPUSH
3346: CALL_OW 251
3350: PPUSH
3351: CALL_OW 114
// end ;
3355: GO 3237
3357: POP
3358: POP
// end ;
3359: LD_VAR 0 1
3363: RET
// export function PrepareSoldiersInBunkers ; begin
3364: LD_INT 0
3366: PPUSH
// PrepareSolBun ( enemySkilLLevel , non_bun1 ) ;
3367: LD_EXP 34
3371: PPUSH
3372: LD_INT 236
3374: PPUSH
3375: CALL 14563 0 2
// PrepareSolBun ( enemySkilLLevel , non_bun2 ) ;
3379: LD_EXP 34
3383: PPUSH
3384: LD_INT 240
3386: PPUSH
3387: CALL 14563 0 2
// PrepareSolBun ( enemySkilLLevel , non_bun3 ) ;
3391: LD_EXP 34
3395: PPUSH
3396: LD_INT 243
3398: PPUSH
3399: CALL 14563 0 2
// end ;
3403: LD_VAR 0 1
3407: RET
// export function PrepareConvoy ; var i , un , veh ; begin
3408: LD_INT 0
3410: PPUSH
3411: PPUSH
3412: PPUSH
3413: PPUSH
// convoyTeam = [ ] ;
3414: LD_ADDR_EXP 56
3418: PUSH
3419: EMPTY
3420: ST_TO_ADDR
// uc_side = 1 ;
3421: LD_ADDR_OWVAR 20
3425: PUSH
3426: LD_INT 1
3428: ST_TO_ADDR
// uc_nation = nation_american ;
3429: LD_ADDR_OWVAR 21
3433: PUSH
3434: LD_INT 1
3436: ST_TO_ADDR
// for i := 1 to 2 do
3437: LD_ADDR_VAR 0 2
3441: PUSH
3442: DOUBLE
3443: LD_INT 1
3445: DEC
3446: ST_TO_ADDR
3447: LD_INT 2
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3582
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
3453: LD_INT 3
3455: PPUSH
3456: LD_INT 1
3458: PPUSH
3459: LD_INT 1
3461: PPUSH
3462: LD_INT 12
3464: PPUSH
3465: LD_INT 80
3467: PPUSH
3468: CALL 42577 0 5
// veh = CreateVehicle ;
3472: LD_ADDR_VAR 0 4
3476: PUSH
3477: CALL_OW 45
3481: ST_TO_ADDR
// AddCargo ( veh , mat_cans , 100 ) ;
3482: LD_VAR 0 4
3486: PPUSH
3487: LD_INT 1
3489: PPUSH
3490: LD_INT 100
3492: PPUSH
3493: CALL_OW 291
// convoyTeam = convoyTeam ^ veh ;
3497: LD_ADDR_EXP 56
3501: PUSH
3502: LD_EXP 56
3506: PUSH
3507: LD_VAR 0 4
3511: ADD
3512: ST_TO_ADDR
// PlaceUnitArea ( veh , AmericanSpawnArea1 , false ) ;
3513: LD_VAR 0 4
3517: PPUSH
3518: LD_INT 8
3520: PPUSH
3521: LD_INT 0
3523: PPUSH
3524: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
3528: LD_INT 0
3530: PPUSH
3531: LD_EXP 34
3535: PPUSH
3536: CALL_OW 383
// un = CreateHuman ;
3540: LD_ADDR_VAR 0 3
3544: PUSH
3545: CALL_OW 44
3549: ST_TO_ADDR
// convoyTeam = convoyTeam ^ un ;
3550: LD_ADDR_EXP 56
3554: PUSH
3555: LD_EXP 56
3559: PUSH
3560: LD_VAR 0 3
3564: ADD
3565: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3566: LD_VAR 0 3
3570: PPUSH
3571: LD_VAR 0 4
3575: PPUSH
3576: CALL_OW 52
// end ;
3580: GO 3450
3582: POP
3583: POP
// end ;
3584: LD_VAR 0 1
3588: RET
// export function PrepareAttack ; var i , un , veh ; begin
3589: LD_INT 0
3591: PPUSH
3592: PPUSH
3593: PPUSH
3594: PPUSH
// uc_side = 1 ;
3595: LD_ADDR_OWVAR 20
3599: PUSH
3600: LD_INT 1
3602: ST_TO_ADDR
// uc_nation = nation_american ;
3603: LD_ADDR_OWVAR 21
3607: PUSH
3608: LD_INT 1
3610: ST_TO_ADDR
// for i := 1 to 4 do
3611: LD_ADDR_VAR 0 2
3615: PUSH
3616: DOUBLE
3617: LD_INT 1
3619: DEC
3620: ST_TO_ADDR
3621: LD_INT 4
3623: PUSH
3624: FOR_TO
3625: IFFALSE 3764
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_light_gun , us_double_gun , us_gatling_gun ] [ Rand ( 1 , 3 ) ] , 80 ) ;
3627: LD_INT 3
3629: PPUSH
3630: LD_INT 1
3632: PPUSH
3633: LD_INT 1
3635: PPUSH
3636: LD_INT 3
3638: PUSH
3639: LD_INT 5
3641: PUSH
3642: LD_INT 4
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: LIST
3649: PUSH
3650: LD_INT 1
3652: PPUSH
3653: LD_INT 3
3655: PPUSH
3656: CALL_OW 12
3660: ARRAY
3661: PPUSH
3662: LD_INT 80
3664: PPUSH
3665: CALL 42577 0 5
// veh = CreateVehicle ;
3669: LD_ADDR_VAR 0 4
3673: PUSH
3674: CALL_OW 45
3678: ST_TO_ADDR
// attackTeam = attackTeam ^ veh ;
3679: LD_ADDR_EXP 57
3683: PUSH
3684: LD_EXP 57
3688: PUSH
3689: LD_VAR 0 4
3693: ADD
3694: ST_TO_ADDR
// PlaceUnitArea ( veh , AmericanSpawnArea2 , false ) ;
3695: LD_VAR 0 4
3699: PPUSH
3700: LD_INT 17
3702: PPUSH
3703: LD_INT 0
3705: PPUSH
3706: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
3710: LD_INT 0
3712: PPUSH
3713: LD_EXP 34
3717: PPUSH
3718: CALL_OW 383
// un = CreateHuman ;
3722: LD_ADDR_VAR 0 3
3726: PUSH
3727: CALL_OW 44
3731: ST_TO_ADDR
// attackTeam = attackTeam ^ un ;
3732: LD_ADDR_EXP 57
3736: PUSH
3737: LD_EXP 57
3741: PUSH
3742: LD_VAR 0 3
3746: ADD
3747: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3748: LD_VAR 0 3
3752: PPUSH
3753: LD_VAR 0 4
3757: PPUSH
3758: CALL_OW 52
// end ;
3762: GO 3624
3764: POP
3765: POP
// for i := 1 to 3 do
3766: LD_ADDR_VAR 0 2
3770: PUSH
3771: DOUBLE
3772: LD_INT 1
3774: DEC
3775: ST_TO_ADDR
3776: LD_INT 3
3778: PUSH
3779: FOR_TO
3780: IFFALSE 3837
// begin PrepareSoldier ( false , enemySkillLevel ) ;
3782: LD_INT 0
3784: PPUSH
3785: LD_EXP 34
3789: PPUSH
3790: CALL_OW 381
// un = CreateHuman ;
3794: LD_ADDR_VAR 0 3
3798: PUSH
3799: CALL_OW 44
3803: ST_TO_ADDR
// attackTeam = attackTeam ^ un ;
3804: LD_ADDR_EXP 57
3808: PUSH
3809: LD_EXP 57
3813: PUSH
3814: LD_VAR 0 3
3818: ADD
3819: ST_TO_ADDR
// PlaceUnitArea ( un , AmericanSpawnArea2 , false ) ;
3820: LD_VAR 0 3
3824: PPUSH
3825: LD_INT 17
3827: PPUSH
3828: LD_INT 0
3830: PPUSH
3831: CALL_OW 49
// end ;
3835: GO 3779
3837: POP
3838: POP
// end ; end_of_file
3839: LD_VAR 0 1
3843: RET
// export function Nef_PrepareNature ; var i , un ; begin
3844: LD_INT 0
3846: PPUSH
3847: PPUSH
3848: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
3849: LD_ADDR_VAR 0 2
3853: PUSH
3854: DOUBLE
3855: LD_INT 1
3857: DEC
3858: ST_TO_ADDR
3859: LD_EXP 28
3863: PUSH
3864: LD_INT 1
3866: ARRAY
3867: PUSH
3868: FOR_TO
3869: IFFALSE 3979
// begin uc_side = 0 ;
3871: LD_ADDR_OWVAR 20
3875: PUSH
3876: LD_INT 0
3878: ST_TO_ADDR
// uc_nation = nation_nature ;
3879: LD_ADDR_OWVAR 21
3883: PUSH
3884: LD_INT 0
3886: ST_TO_ADDR
// hc_class = class_apeman ;
3887: LD_ADDR_OWVAR 28
3891: PUSH
3892: LD_INT 12
3894: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
3895: LD_ADDR_OWVAR 31
3899: PUSH
3900: LD_EXP 29
3904: PUSH
3905: LD_INT 1
3907: ARRAY
3908: PUSH
3909: LD_EXP 29
3913: PUSH
3914: LD_INT 2
3916: ARRAY
3917: PUSH
3918: LD_EXP 29
3922: PUSH
3923: LD_INT 3
3925: ARRAY
3926: PUSH
3927: LD_EXP 29
3931: PUSH
3932: LD_INT 4
3934: ARRAY
3935: PUSH
3936: EMPTY
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
3942: LD_ADDR_OWVAR 35
3946: PUSH
3947: LD_EXP 30
3951: ST_TO_ADDR
// un = CreateHuman ;
3952: LD_ADDR_VAR 0 3
3956: PUSH
3957: CALL_OW 44
3961: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
3962: LD_VAR 0 3
3966: PPUSH
3967: LD_INT 2
3969: PPUSH
3970: LD_INT 0
3972: PPUSH
3973: CALL_OW 49
// end ;
3977: GO 3868
3979: POP
3980: POP
// for i := 1 to animalsAmount [ 2 ] do
3981: LD_ADDR_VAR 0 2
3985: PUSH
3986: DOUBLE
3987: LD_INT 1
3989: DEC
3990: ST_TO_ADDR
3991: LD_EXP 28
3995: PUSH
3996: LD_INT 2
3998: ARRAY
3999: PUSH
4000: FOR_TO
4001: IFFALSE 4111
// begin uc_side = 0 ;
4003: LD_ADDR_OWVAR 20
4007: PUSH
4008: LD_INT 0
4010: ST_TO_ADDR
// uc_nation = nation_nature ;
4011: LD_ADDR_OWVAR 21
4015: PUSH
4016: LD_INT 0
4018: ST_TO_ADDR
// hc_class = class_phororhacos ;
4019: LD_ADDR_OWVAR 28
4023: PUSH
4024: LD_INT 18
4026: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4027: LD_ADDR_OWVAR 31
4031: PUSH
4032: LD_EXP 29
4036: PUSH
4037: LD_INT 1
4039: ARRAY
4040: PUSH
4041: LD_EXP 29
4045: PUSH
4046: LD_INT 2
4048: ARRAY
4049: PUSH
4050: LD_EXP 29
4054: PUSH
4055: LD_INT 3
4057: ARRAY
4058: PUSH
4059: LD_EXP 29
4063: PUSH
4064: LD_INT 4
4066: ARRAY
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4074: LD_ADDR_OWVAR 35
4078: PUSH
4079: LD_EXP 30
4083: ST_TO_ADDR
// un = CreateHuman ;
4084: LD_ADDR_VAR 0 3
4088: PUSH
4089: CALL_OW 44
4093: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4094: LD_VAR 0 3
4098: PPUSH
4099: LD_INT 2
4101: PPUSH
4102: LD_INT 0
4104: PPUSH
4105: CALL_OW 49
// end ;
4109: GO 4000
4111: POP
4112: POP
// for i := 1 to animalsAmount [ 3 ] do
4113: LD_ADDR_VAR 0 2
4117: PUSH
4118: DOUBLE
4119: LD_INT 1
4121: DEC
4122: ST_TO_ADDR
4123: LD_EXP 28
4127: PUSH
4128: LD_INT 3
4130: ARRAY
4131: PUSH
4132: FOR_TO
4133: IFFALSE 4243
// begin uc_side = 0 ;
4135: LD_ADDR_OWVAR 20
4139: PUSH
4140: LD_INT 0
4142: ST_TO_ADDR
// uc_nation = nation_nature ;
4143: LD_ADDR_OWVAR 21
4147: PUSH
4148: LD_INT 0
4150: ST_TO_ADDR
// hc_class = class_tiger ;
4151: LD_ADDR_OWVAR 28
4155: PUSH
4156: LD_INT 14
4158: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4159: LD_ADDR_OWVAR 31
4163: PUSH
4164: LD_EXP 29
4168: PUSH
4169: LD_INT 1
4171: ARRAY
4172: PUSH
4173: LD_EXP 29
4177: PUSH
4178: LD_INT 2
4180: ARRAY
4181: PUSH
4182: LD_EXP 29
4186: PUSH
4187: LD_INT 3
4189: ARRAY
4190: PUSH
4191: LD_EXP 29
4195: PUSH
4196: LD_INT 4
4198: ARRAY
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4206: LD_ADDR_OWVAR 35
4210: PUSH
4211: LD_EXP 30
4215: ST_TO_ADDR
// un = CreateHuman ;
4216: LD_ADDR_VAR 0 3
4220: PUSH
4221: CALL_OW 44
4225: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4226: LD_VAR 0 3
4230: PPUSH
4231: LD_INT 2
4233: PPUSH
4234: LD_INT 0
4236: PPUSH
4237: CALL_OW 49
// end ;
4241: GO 4132
4243: POP
4244: POP
// for i := 1 to animalsAmount [ 4 ] do
4245: LD_ADDR_VAR 0 2
4249: PUSH
4250: DOUBLE
4251: LD_INT 1
4253: DEC
4254: ST_TO_ADDR
4255: LD_EXP 28
4259: PUSH
4260: LD_INT 4
4262: ARRAY
4263: PUSH
4264: FOR_TO
4265: IFFALSE 4375
// begin uc_side = 0 ;
4267: LD_ADDR_OWVAR 20
4271: PUSH
4272: LD_INT 0
4274: ST_TO_ADDR
// uc_nation = nation_nature ;
4275: LD_ADDR_OWVAR 21
4279: PUSH
4280: LD_INT 0
4282: ST_TO_ADDR
// hc_class = 21 ;
4283: LD_ADDR_OWVAR 28
4287: PUSH
4288: LD_INT 21
4290: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4291: LD_ADDR_OWVAR 31
4295: PUSH
4296: LD_EXP 29
4300: PUSH
4301: LD_INT 1
4303: ARRAY
4304: PUSH
4305: LD_EXP 29
4309: PUSH
4310: LD_INT 2
4312: ARRAY
4313: PUSH
4314: LD_EXP 29
4318: PUSH
4319: LD_INT 3
4321: ARRAY
4322: PUSH
4323: LD_EXP 29
4327: PUSH
4328: LD_INT 4
4330: ARRAY
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4338: LD_ADDR_OWVAR 35
4342: PUSH
4343: LD_EXP 30
4347: ST_TO_ADDR
// un = CreateHuman ;
4348: LD_ADDR_VAR 0 3
4352: PUSH
4353: CALL_OW 44
4357: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4358: LD_VAR 0 3
4362: PPUSH
4363: LD_INT 2
4365: PPUSH
4366: LD_INT 0
4368: PPUSH
4369: CALL_OW 49
// end ;
4373: GO 4264
4375: POP
4376: POP
// for i := 1 to animalsAmount [ 5 ] do
4377: LD_ADDR_VAR 0 2
4381: PUSH
4382: DOUBLE
4383: LD_INT 1
4385: DEC
4386: ST_TO_ADDR
4387: LD_EXP 28
4391: PUSH
4392: LD_INT 5
4394: ARRAY
4395: PUSH
4396: FOR_TO
4397: IFFALSE 4458
// begin uc_side = 0 ;
4399: LD_ADDR_OWVAR 20
4403: PUSH
4404: LD_INT 0
4406: ST_TO_ADDR
// uc_nation = nation_nature ;
4407: LD_ADDR_OWVAR 21
4411: PUSH
4412: LD_INT 0
4414: ST_TO_ADDR
// vc_chassis := 31 ;
4415: LD_ADDR_OWVAR 37
4419: PUSH
4420: LD_INT 31
4422: ST_TO_ADDR
// vc_control := control_rider ;
4423: LD_ADDR_OWVAR 38
4427: PUSH
4428: LD_INT 4
4430: ST_TO_ADDR
// un := CreateVehicle ;
4431: LD_ADDR_VAR 0 3
4435: PUSH
4436: CALL_OW 45
4440: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4441: LD_VAR 0 3
4445: PPUSH
4446: LD_INT 2
4448: PPUSH
4449: LD_INT 0
4451: PPUSH
4452: CALL_OW 49
// end ;
4456: GO 4396
4458: POP
4459: POP
// end ; end_of_file
4460: LD_VAR 0 1
4464: RET
// every 0 0$1 do
4465: GO 4467
4467: DISABLE
// InitAIManager ( 1 , 2 , UnitFilter ( ovsyenkoBase , [ f_type , unit_human ] ) , OvsyenkoBaseArea , OvsyenkoHealArea , false , false , 0 , 0 , 0 , 0 , 0 ) ;
4468: LD_INT 1
4470: PPUSH
4471: LD_INT 2
4473: PPUSH
4474: LD_EXP 52
4478: PPUSH
4479: LD_INT 21
4481: PUSH
4482: LD_INT 1
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: PPUSH
4489: CALL_OW 72
4493: PPUSH
4494: LD_INT 3
4496: PPUSH
4497: LD_INT 6
4499: PPUSH
4500: LD_INT 0
4502: PPUSH
4503: LD_INT 0
4505: PPUSH
4506: LD_INT 0
4508: PPUSH
4509: LD_INT 0
4511: PPUSH
4512: LD_INT 0
4514: PPUSH
4515: LD_INT 0
4517: PPUSH
4518: LD_INT 0
4520: PPUSH
4521: CALL 4633 0 12
4525: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_weapon , us_bulldozer ] ] ) do var unit ;
4526: LD_INT 22
4528: PUSH
4529: LD_INT 1
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: PUSH
4536: LD_INT 50
4538: PUSH
4539: EMPTY
4540: LIST
4541: PUSH
4542: LD_INT 34
4544: PUSH
4545: LD_INT 14
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: LIST
4556: PPUSH
4557: CALL_OW 69
4561: IFFALSE 4630
4563: GO 4565
4565: DISABLE
4566: LD_INT 0
4568: PPUSH
// begin enable ;
4569: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_weapon , us_bulldozer ] ] ) do
4570: LD_ADDR_VAR 0 1
4574: PUSH
4575: LD_INT 22
4577: PUSH
4578: LD_INT 1
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: PUSH
4585: LD_INT 50
4587: PUSH
4588: EMPTY
4589: LIST
4590: PUSH
4591: LD_INT 34
4593: PUSH
4594: LD_INT 14
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: LIST
4605: PPUSH
4606: CALL_OW 69
4610: PUSH
4611: FOR_IN
4612: IFFALSE 4628
// CutTreeInArea ( unit , TreeArea ) ;
4614: LD_VAR 0 1
4618: PPUSH
4619: LD_INT 18
4621: PPUSH
4622: CALL 14420 0 2
4626: GO 4611
4628: POP
4629: POP
// end ;
4630: PPOPN 1
4632: END
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , repairArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack , canRebuild ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , offensiveUnits , offensiveReadyCounter , target1 , target2 , defenceUnits , weapons , chassis , baseBuildings , destroyedBuildings , destroyedBuilding , constructedBuilding , constructedBuildings , depot , factory , lab , bunkers , barracks , controlTowers , attackBuildings , enemyBuildings , damageBuilding , damageUnit , emptyBunkers , enemyUnits ; begin
4633: LD_INT 0
4635: PPUSH
4636: PPUSH
4637: PPUSH
4638: PPUSH
4639: PPUSH
4640: PPUSH
4641: PPUSH
4642: PPUSH
4643: PPUSH
4644: PPUSH
4645: PPUSH
4646: PPUSH
4647: PPUSH
4648: PPUSH
4649: PPUSH
4650: PPUSH
4651: PPUSH
4652: PPUSH
4653: PPUSH
4654: PPUSH
4655: PPUSH
4656: PPUSH
4657: PPUSH
4658: PPUSH
4659: PPUSH
4660: PPUSH
4661: PPUSH
4662: PPUSH
4663: PPUSH
4664: PPUSH
4665: PPUSH
4666: PPUSH
4667: PPUSH
4668: PPUSH
4669: PPUSH
4670: PPUSH
4671: PPUSH
4672: PPUSH
// personel = [ ] ;
4673: LD_ADDR_VAR 0 19
4677: PUSH
4678: EMPTY
4679: ST_TO_ADDR
// vehicles = [ ] ;
4680: LD_ADDR_VAR 0 25
4684: PUSH
4685: EMPTY
4686: ST_TO_ADDR
// destroyedBuildings = [ ] ;
4687: LD_ADDR_VAR 0 35
4691: PUSH
4692: EMPTY
4693: ST_TO_ADDR
// for unit in basePersonel do
4694: LD_ADDR_VAR 0 18
4698: PUSH
4699: LD_VAR 0 3
4703: PUSH
4704: FOR_IN
4705: IFFALSE 4725
// personel = personel ^ unit ;
4707: LD_ADDR_VAR 0 19
4711: PUSH
4712: LD_VAR 0 19
4716: PUSH
4717: LD_VAR 0 18
4721: ADD
4722: ST_TO_ADDR
4723: GO 4704
4725: POP
4726: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ] ] ) do
4727: LD_ADDR_VAR 0 24
4731: PUSH
4732: LD_VAR 0 4
4736: PPUSH
4737: LD_INT 22
4739: PUSH
4740: LD_VAR 0 1
4744: PUSH
4745: EMPTY
4746: LIST
4747: LIST
4748: PUSH
4749: LD_INT 21
4751: PUSH
4752: LD_INT 2
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: PUSH
4759: LD_INT 50
4761: PUSH
4762: EMPTY
4763: LIST
4764: PUSH
4765: LD_INT 3
4767: PUSH
4768: LD_INT 2
4770: PUSH
4771: LD_INT 34
4773: PUSH
4774: LD_INT 12
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: PUSH
4781: LD_INT 34
4783: PUSH
4784: LD_INT 51
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: PUSH
4791: LD_INT 34
4793: PUSH
4794: LD_INT 32
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PUSH
4801: LD_INT 34
4803: PUSH
4804: LD_INT 31
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: PPUSH
4828: CALL_OW 70
4832: PUSH
4833: FOR_IN
4834: IFFALSE 4854
// vehicles = vehicles ^ vehicle ;
4836: LD_ADDR_VAR 0 25
4840: PUSH
4841: LD_VAR 0 25
4845: PUSH
4846: LD_VAR 0 24
4850: ADD
4851: ST_TO_ADDR
4852: GO 4833
4854: POP
4855: POP
// repeat soldiers = [ ] ;
4856: LD_ADDR_VAR 0 20
4860: PUSH
4861: EMPTY
4862: ST_TO_ADDR
// engineers = [ ] ;
4863: LD_ADDR_VAR 0 21
4867: PUSH
4868: EMPTY
4869: ST_TO_ADDR
// mechanics = [ ] ;
4870: LD_ADDR_VAR 0 22
4874: PUSH
4875: EMPTY
4876: ST_TO_ADDR
// scientists = [ ] ;
4877: LD_ADDR_VAR 0 23
4881: PUSH
4882: EMPTY
4883: ST_TO_ADDR
// baseBuildings = [ ] ;
4884: LD_ADDR_VAR 0 34
4888: PUSH
4889: EMPTY
4890: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4891: LD_ADDR_VAR 0 39
4895: PUSH
4896: LD_VAR 0 4
4900: PPUSH
4901: LD_INT 22
4903: PUSH
4904: LD_VAR 0 1
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: PUSH
4913: LD_INT 21
4915: PUSH
4916: LD_INT 3
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: PUSH
4923: LD_INT 50
4925: PUSH
4926: EMPTY
4927: LIST
4928: PUSH
4929: LD_INT 2
4931: PUSH
4932: LD_INT 30
4934: PUSH
4935: LD_INT 0
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: PUSH
4942: LD_INT 30
4944: PUSH
4945: LD_INT 1
4947: PUSH
4948: EMPTY
4949: LIST
4950: LIST
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: LIST
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: LIST
4961: LIST
4962: PPUSH
4963: CALL_OW 70
4967: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
4968: LD_ADDR_VAR 0 40
4972: PUSH
4973: LD_VAR 0 4
4977: PPUSH
4978: LD_INT 22
4980: PUSH
4981: LD_VAR 0 1
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: PUSH
4990: LD_INT 21
4992: PUSH
4993: LD_INT 3
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: PUSH
5000: LD_INT 50
5002: PUSH
5003: EMPTY
5004: LIST
5005: PUSH
5006: LD_INT 2
5008: PUSH
5009: LD_INT 30
5011: PUSH
5012: LD_INT 2
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: PUSH
5019: LD_INT 30
5021: PUSH
5022: LD_INT 3
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: PUSH
5029: EMPTY
5030: LIST
5031: LIST
5032: LIST
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: PPUSH
5040: CALL_OW 70
5044: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5045: LD_ADDR_VAR 0 41
5049: PUSH
5050: LD_VAR 0 4
5054: PPUSH
5055: LD_INT 22
5057: PUSH
5058: LD_VAR 0 1
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PUSH
5067: LD_INT 21
5069: PUSH
5070: LD_INT 3
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: PUSH
5077: LD_INT 50
5079: PUSH
5080: EMPTY
5081: LIST
5082: PUSH
5083: LD_INT 2
5085: PUSH
5086: LD_INT 30
5088: PUSH
5089: LD_INT 6
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 30
5098: PUSH
5099: LD_INT 7
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: PUSH
5106: LD_INT 30
5108: PUSH
5109: LD_INT 8
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: LIST
5120: LIST
5121: PUSH
5122: EMPTY
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: PPUSH
5128: CALL_OW 70
5132: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
5133: LD_ADDR_VAR 0 42
5137: PUSH
5138: LD_VAR 0 4
5142: PPUSH
5143: LD_INT 22
5145: PUSH
5146: LD_VAR 0 1
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: PUSH
5155: LD_INT 21
5157: PUSH
5158: LD_INT 3
5160: PUSH
5161: EMPTY
5162: LIST
5163: LIST
5164: PUSH
5165: LD_INT 50
5167: PUSH
5168: EMPTY
5169: LIST
5170: PUSH
5171: LD_INT 2
5173: PUSH
5174: LD_INT 30
5176: PUSH
5177: LD_INT 31
5179: PUSH
5180: EMPTY
5181: LIST
5182: LIST
5183: PUSH
5184: LD_INT 30
5186: PUSH
5187: LD_INT 32
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: LIST
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: PPUSH
5205: CALL_OW 70
5209: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
5210: LD_ADDR_VAR 0 43
5214: PUSH
5215: LD_VAR 0 4
5219: PPUSH
5220: LD_INT 22
5222: PUSH
5223: LD_VAR 0 1
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: LD_INT 21
5234: PUSH
5235: LD_INT 3
5237: PUSH
5238: EMPTY
5239: LIST
5240: LIST
5241: PUSH
5242: LD_INT 50
5244: PUSH
5245: EMPTY
5246: LIST
5247: PUSH
5248: LD_INT 2
5250: PUSH
5251: LD_INT 30
5253: PUSH
5254: LD_INT 4
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: LD_INT 30
5263: PUSH
5264: LD_INT 5
5266: PUSH
5267: EMPTY
5268: LIST
5269: LIST
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: LIST
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: PPUSH
5282: CALL_OW 70
5286: ST_TO_ADDR
// controlTowers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_vehicle ] ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5287: LD_ADDR_VAR 0 44
5291: PUSH
5292: LD_VAR 0 4
5296: PPUSH
5297: LD_INT 22
5299: PUSH
5300: LD_VAR 0 1
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: PUSH
5309: LD_INT 50
5311: PUSH
5312: EMPTY
5313: LIST
5314: PUSH
5315: LD_INT 2
5317: PUSH
5318: LD_INT 21
5320: PUSH
5321: LD_INT 3
5323: PUSH
5324: EMPTY
5325: LIST
5326: LIST
5327: PUSH
5328: LD_INT 21
5330: PUSH
5331: LD_INT 2
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: LIST
5342: PUSH
5343: LD_INT 2
5345: PUSH
5346: LD_INT 30
5348: PUSH
5349: LD_INT 36
5351: PUSH
5352: EMPTY
5353: LIST
5354: LIST
5355: PUSH
5356: LD_INT 34
5358: PUSH
5359: LD_INT 31
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: PPUSH
5377: CALL_OW 70
5381: ST_TO_ADDR
// constructedBuildings = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] ] ) ;
5382: LD_ADDR_VAR 0 38
5386: PUSH
5387: LD_VAR 0 4
5391: PPUSH
5392: LD_INT 22
5394: PUSH
5395: LD_VAR 0 1
5399: PUSH
5400: EMPTY
5401: LIST
5402: LIST
5403: PUSH
5404: LD_INT 21
5406: PUSH
5407: LD_INT 3
5409: PUSH
5410: EMPTY
5411: LIST
5412: LIST
5413: PUSH
5414: LD_INT 3
5416: PUSH
5417: LD_INT 57
5419: PUSH
5420: EMPTY
5421: LIST
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: LIST
5431: PPUSH
5432: CALL_OW 70
5436: ST_TO_ADDR
// for i := 1 to personel do
5437: LD_ADDR_VAR 0 14
5441: PUSH
5442: DOUBLE
5443: LD_INT 1
5445: DEC
5446: ST_TO_ADDR
5447: LD_VAR 0 19
5451: PUSH
5452: FOR_TO
5453: IFFALSE 5621
// begin if GetLives ( personel [ i ] ) = 1000 then
5455: LD_VAR 0 19
5459: PUSH
5460: LD_VAR 0 14
5464: ARRAY
5465: PPUSH
5466: CALL_OW 256
5470: PUSH
5471: LD_INT 1000
5473: EQUAL
5474: IFFALSE 5496
// SetTag ( personel [ i ] , 1 ) else
5476: LD_VAR 0 19
5480: PUSH
5481: LD_VAR 0 14
5485: ARRAY
5486: PPUSH
5487: LD_INT 1
5489: PPUSH
5490: CALL_OW 109
5494: GO 5576
// if GetLives ( personel [ i ] ) <= 950 and GetLives ( personel [ i ] ) > 250 then
5496: LD_VAR 0 19
5500: PUSH
5501: LD_VAR 0 14
5505: ARRAY
5506: PPUSH
5507: CALL_OW 256
5511: PUSH
5512: LD_INT 950
5514: LESSEQUAL
5515: PUSH
5516: LD_VAR 0 19
5520: PUSH
5521: LD_VAR 0 14
5525: ARRAY
5526: PPUSH
5527: CALL_OW 256
5531: PUSH
5532: LD_INT 250
5534: GREATER
5535: AND
5536: IFFALSE 5576
// begin SetTag ( personel [ i ] , 0 ) ;
5538: LD_VAR 0 19
5542: PUSH
5543: LD_VAR 0 14
5547: ARRAY
5548: PPUSH
5549: LD_INT 0
5551: PPUSH
5552: CALL_OW 109
// ComMoveToArea ( personel [ i ] , healArea ) ;
5556: LD_VAR 0 19
5560: PUSH
5561: LD_VAR 0 14
5565: ARRAY
5566: PPUSH
5567: LD_VAR 0 5
5571: PPUSH
5572: CALL_OW 113
// end ; if GetLives ( personel [ i ] ) < 100 then
5576: LD_VAR 0 19
5580: PUSH
5581: LD_VAR 0 14
5585: ARRAY
5586: PPUSH
5587: CALL_OW 256
5591: PUSH
5592: LD_INT 100
5594: LESS
5595: IFFALSE 5619
// personel = personel diff personel [ i ] ;
5597: LD_ADDR_VAR 0 19
5601: PUSH
5602: LD_VAR 0 19
5606: PUSH
5607: LD_VAR 0 19
5611: PUSH
5612: LD_VAR 0 14
5616: ARRAY
5617: DIFF
5618: ST_TO_ADDR
// end ;
5619: GO 5452
5621: POP
5622: POP
// for i := 1 to vehicles do
5623: LD_ADDR_VAR 0 14
5627: PUSH
5628: DOUBLE
5629: LD_INT 1
5631: DEC
5632: ST_TO_ADDR
5633: LD_VAR 0 25
5637: PUSH
5638: FOR_TO
5639: IFFALSE 6001
// begin if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
5641: LD_VAR 0 25
5645: PUSH
5646: LD_VAR 0 14
5650: ARRAY
5651: PUSH
5652: LD_INT 1
5654: ARRAY
5655: PPUSH
5656: CALL_OW 256
5660: PUSH
5661: LD_INT 1000
5663: EQUAL
5664: IFFALSE 5828
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
5666: LD_VAR 0 25
5670: PUSH
5671: LD_VAR 0 14
5675: ARRAY
5676: PUSH
5677: LD_INT 1
5679: ARRAY
5680: PPUSH
5681: CALL_OW 263
5685: PUSH
5686: LD_INT 1
5688: EQUAL
5689: IFFALSE 5768
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) and IsOK ( vehicles [ i ] [ 2 ] ) then
5691: LD_VAR 0 25
5695: PUSH
5696: LD_VAR 0 14
5700: ARRAY
5701: PUSH
5702: LD_INT 2
5704: ARRAY
5705: PPUSH
5706: CALL_OW 310
5710: NOT
5711: PUSH
5712: LD_VAR 0 25
5716: PUSH
5717: LD_VAR 0 14
5721: ARRAY
5722: PUSH
5723: LD_INT 2
5725: ARRAY
5726: PPUSH
5727: CALL_OW 302
5731: AND
5732: IFFALSE 5768
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
5734: LD_VAR 0 25
5738: PUSH
5739: LD_VAR 0 14
5743: ARRAY
5744: PUSH
5745: LD_INT 2
5747: ARRAY
5748: PPUSH
5749: LD_VAR 0 25
5753: PUSH
5754: LD_VAR 0 14
5758: ARRAY
5759: PUSH
5760: LD_INT 1
5762: ARRAY
5763: PPUSH
5764: CALL_OW 120
// if offensiveUnits < vehiclesToAttackAmount then
5768: LD_VAR 0 27
5772: PUSH
5773: LD_VAR 0 10
5777: LESS
5778: IFFALSE 5804
// SetTag ( vehicles [ i ] [ 1 ] , 2 ) else
5780: LD_VAR 0 25
5784: PUSH
5785: LD_VAR 0 14
5789: ARRAY
5790: PUSH
5791: LD_INT 1
5793: ARRAY
5794: PPUSH
5795: LD_INT 2
5797: PPUSH
5798: CALL_OW 109
5802: GO 5826
// SetTag ( vehicles [ i ] [ 1 ] , 3 ) ;
5804: LD_VAR 0 25
5808: PUSH
5809: LD_VAR 0 14
5813: ARRAY
5814: PUSH
5815: LD_INT 1
5817: ARRAY
5818: PPUSH
5819: LD_INT 3
5821: PPUSH
5822: CALL_OW 109
// end else
5826: GO 5949
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 and GetLives ( vehicles [ i ] [ 1 ] ) > 250 and GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
5828: LD_VAR 0 25
5832: PUSH
5833: LD_VAR 0 14
5837: ARRAY
5838: PUSH
5839: LD_INT 1
5841: ARRAY
5842: PPUSH
5843: CALL_OW 256
5847: PUSH
5848: LD_INT 650
5850: LESSEQUAL
5851: PUSH
5852: LD_VAR 0 25
5856: PUSH
5857: LD_VAR 0 14
5861: ARRAY
5862: PUSH
5863: LD_INT 1
5865: ARRAY
5866: PPUSH
5867: CALL_OW 256
5871: PUSH
5872: LD_INT 250
5874: GREATER
5875: AND
5876: PUSH
5877: LD_VAR 0 25
5881: PUSH
5882: LD_VAR 0 14
5886: ARRAY
5887: PUSH
5888: LD_INT 1
5890: ARRAY
5891: PPUSH
5892: CALL_OW 263
5896: PUSH
5897: LD_INT 1
5899: EQUAL
5900: AND
5901: IFFALSE 5949
// begin SetTag ( vehicles [ i ] [ 1 ] , 0 ) ;
5903: LD_VAR 0 25
5907: PUSH
5908: LD_VAR 0 14
5912: ARRAY
5913: PUSH
5914: LD_INT 1
5916: ARRAY
5917: PPUSH
5918: LD_INT 0
5920: PPUSH
5921: CALL_OW 109
// ComMoveToArea ( vehicles [ i ] [ 1 ] , repairArea ) ;
5925: LD_VAR 0 25
5929: PUSH
5930: LD_VAR 0 14
5934: ARRAY
5935: PUSH
5936: LD_INT 1
5938: ARRAY
5939: PPUSH
5940: LD_VAR 0 6
5944: PPUSH
5945: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
5949: LD_VAR 0 25
5953: PUSH
5954: LD_VAR 0 14
5958: ARRAY
5959: PUSH
5960: LD_INT 1
5962: ARRAY
5963: PPUSH
5964: CALL_OW 256
5968: PUSH
5969: LD_INT 250
5971: LESS
5972: IFFALSE 5999
// begin vehicles = vehicles diff [ vehicles [ i ] ] ;
5974: LD_ADDR_VAR 0 25
5978: PUSH
5979: LD_VAR 0 25
5983: PUSH
5984: LD_VAR 0 25
5988: PUSH
5989: LD_VAR 0 14
5993: ARRAY
5994: PUSH
5995: EMPTY
5996: LIST
5997: DIFF
5998: ST_TO_ADDR
// end ; end ;
5999: GO 5638
6001: POP
6002: POP
// for i := 1 to personel do
6003: LD_ADDR_VAR 0 14
6007: PUSH
6008: DOUBLE
6009: LD_INT 1
6011: DEC
6012: ST_TO_ADDR
6013: LD_VAR 0 19
6017: PUSH
6018: FOR_TO
6019: IFFALSE 6070
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
6021: LD_ADDR_VAR 0 20
6025: PUSH
6026: LD_VAR 0 20
6030: PUSH
6031: LD_VAR 0 19
6035: PUSH
6036: LD_VAR 0 14
6040: ARRAY
6041: PPUSH
6042: LD_INT 25
6044: PUSH
6045: LD_INT 1
6047: PUSH
6048: EMPTY
6049: LIST
6050: LIST
6051: PUSH
6052: LD_INT 50
6054: PUSH
6055: EMPTY
6056: LIST
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: PPUSH
6062: CALL_OW 72
6066: ADD
6067: ST_TO_ADDR
6068: GO 6018
6070: POP
6071: POP
// if soldiers and UnitFilter ( bunkers , [ f_empty ] ) then
6072: LD_VAR 0 20
6076: PUSH
6077: LD_VAR 0 42
6081: PPUSH
6082: LD_INT 58
6084: PUSH
6085: EMPTY
6086: LIST
6087: PPUSH
6088: CALL_OW 72
6092: AND
6093: IFFALSE 6351
// begin for i := 1 to soldiers do
6095: LD_ADDR_VAR 0 14
6099: PUSH
6100: DOUBLE
6101: LD_INT 1
6103: DEC
6104: ST_TO_ADDR
6105: LD_VAR 0 20
6109: PUSH
6110: FOR_TO
6111: IFFALSE 6347
// if GetTag ( soldiers [ i ] ) = 1 then
6113: LD_VAR 0 20
6117: PUSH
6118: LD_VAR 0 14
6122: ARRAY
6123: PPUSH
6124: CALL_OW 110
6128: PUSH
6129: LD_INT 1
6131: EQUAL
6132: IFFALSE 6345
// begin if GetTaskList ( soldiers [ i ] ) then
6134: LD_VAR 0 20
6138: PUSH
6139: LD_VAR 0 14
6143: ARRAY
6144: PPUSH
6145: CALL_OW 437
6149: IFFALSE 6238
// if GetTaskList ( soldiers [ i ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( soldiers [ i ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
6151: LD_VAR 0 20
6155: PUSH
6156: LD_VAR 0 14
6160: ARRAY
6161: PPUSH
6162: CALL_OW 437
6166: PUSH
6167: LD_INT 1
6169: ARRAY
6170: PUSH
6171: LD_INT 1
6173: ARRAY
6174: PUSH
6175: LD_STRING e
6177: EQUAL
6178: PUSH
6179: LD_VAR 0 20
6183: PUSH
6184: LD_VAR 0 14
6188: ARRAY
6189: PPUSH
6190: CALL_OW 437
6194: PUSH
6195: LD_INT 1
6197: ARRAY
6198: PUSH
6199: LD_INT 4
6201: ARRAY
6202: PPUSH
6203: CALL_OW 266
6207: PUSH
6208: LD_INT 4
6210: PUSH
6211: LD_INT 5
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: IN
6218: AND
6219: IFFALSE 6238
// SetTaskList ( soldiers [ i ] , [ ] ) ;
6221: LD_VAR 0 20
6225: PUSH
6226: LD_VAR 0 14
6230: ARRAY
6231: PPUSH
6232: EMPTY
6233: PPUSH
6234: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
6238: LD_ADDR_VAR 0 49
6242: PUSH
6243: LD_VAR 0 42
6247: PPUSH
6248: LD_INT 3
6250: PUSH
6251: LD_INT 59
6253: PUSH
6254: EMPTY
6255: LIST
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PPUSH
6261: CALL_OW 72
6265: PUSH
6266: FOR_IN
6267: IFFALSE 6343
// if not HasTask ( soldiers [ i ] ) and not GetBType ( IsInUnit ( soldiers [ i ] ) ) in [ b_breastwork , b_bunker ] then
6269: LD_VAR 0 20
6273: PUSH
6274: LD_VAR 0 14
6278: ARRAY
6279: PPUSH
6280: CALL_OW 314
6284: NOT
6285: PUSH
6286: LD_VAR 0 20
6290: PUSH
6291: LD_VAR 0 14
6295: ARRAY
6296: PPUSH
6297: CALL_OW 310
6301: PPUSH
6302: CALL_OW 266
6306: PUSH
6307: LD_INT 31
6309: PUSH
6310: LD_INT 32
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: IN
6317: NOT
6318: AND
6319: IFFALSE 6341
// ComEnterUnit ( soldiers [ i ] , emptyBunkers ) ;
6321: LD_VAR 0 20
6325: PUSH
6326: LD_VAR 0 14
6330: ARRAY
6331: PPUSH
6332: LD_VAR 0 49
6336: PPUSH
6337: CALL_OW 120
6341: GO 6266
6343: POP
6344: POP
// end ;
6345: GO 6110
6347: POP
6348: POP
// end else
6349: GO 6523
// if soldiers and barracks then
6351: LD_VAR 0 20
6355: PUSH
6356: LD_VAR 0 43
6360: AND
6361: IFFALSE 6483
// begin for i := 1 to soldiers do
6363: LD_ADDR_VAR 0 14
6367: PUSH
6368: DOUBLE
6369: LD_INT 1
6371: DEC
6372: ST_TO_ADDR
6373: LD_VAR 0 20
6377: PUSH
6378: FOR_TO
6379: IFFALSE 6479
// if GetTag ( soldiers [ i ] ) = 1 and UnitFilter ( soldiers [ i ] , [ f_outside ] ) and not HasTask ( soldiers [ i ] ) then
6381: LD_VAR 0 20
6385: PUSH
6386: LD_VAR 0 14
6390: ARRAY
6391: PPUSH
6392: CALL_OW 110
6396: PUSH
6397: LD_INT 1
6399: EQUAL
6400: PUSH
6401: LD_VAR 0 20
6405: PUSH
6406: LD_VAR 0 14
6410: ARRAY
6411: PPUSH
6412: LD_INT 56
6414: PUSH
6415: EMPTY
6416: LIST
6417: PPUSH
6418: CALL_OW 72
6422: AND
6423: PUSH
6424: LD_VAR 0 20
6428: PUSH
6429: LD_VAR 0 14
6433: ARRAY
6434: PPUSH
6435: CALL_OW 314
6439: NOT
6440: AND
6441: IFFALSE 6477
// ComEnterUnit ( soldiers [ i ] , barracks [ rand ( 1 , barracks ) ] ) ;
6443: LD_VAR 0 20
6447: PUSH
6448: LD_VAR 0 14
6452: ARRAY
6453: PPUSH
6454: LD_VAR 0 43
6458: PUSH
6459: LD_INT 1
6461: PPUSH
6462: LD_VAR 0 43
6466: PPUSH
6467: CALL_OW 12
6471: ARRAY
6472: PPUSH
6473: CALL_OW 120
6477: GO 6378
6479: POP
6480: POP
// end else
6481: GO 6523
// for i := 1 to soldiers do
6483: LD_ADDR_VAR 0 14
6487: PUSH
6488: DOUBLE
6489: LD_INT 1
6491: DEC
6492: ST_TO_ADDR
6493: LD_VAR 0 20
6497: PUSH
6498: FOR_TO
6499: IFFALSE 6521
// SetTag ( soldiers [ i ] , 3 ) ;
6501: LD_VAR 0 20
6505: PUSH
6506: LD_VAR 0 14
6510: ARRAY
6511: PPUSH
6512: LD_INT 3
6514: PPUSH
6515: CALL_OW 109
6519: GO 6498
6521: POP
6522: POP
// for i := 1 to personel do
6523: LD_ADDR_VAR 0 14
6527: PUSH
6528: DOUBLE
6529: LD_INT 1
6531: DEC
6532: ST_TO_ADDR
6533: LD_VAR 0 19
6537: PUSH
6538: FOR_TO
6539: IFFALSE 6580
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
6541: LD_ADDR_VAR 0 21
6545: PUSH
6546: LD_VAR 0 21
6550: PUSH
6551: LD_VAR 0 19
6555: PUSH
6556: LD_VAR 0 14
6560: ARRAY
6561: PPUSH
6562: LD_INT 25
6564: PUSH
6565: LD_INT 2
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PPUSH
6572: CALL_OW 72
6576: ADD
6577: ST_TO_ADDR
6578: GO 6538
6580: POP
6581: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6582: LD_VAR 0 21
6586: PUSH
6587: LD_VAR 0 4
6591: PPUSH
6592: LD_INT 22
6594: PUSH
6595: LD_VAR 0 1
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 21
6606: PUSH
6607: LD_INT 3
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PUSH
6614: LD_INT 3
6616: PUSH
6617: LD_INT 24
6619: PUSH
6620: LD_INT 1000
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: PUSH
6627: EMPTY
6628: LIST
6629: LIST
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: LIST
6635: PPUSH
6636: CALL_OW 70
6640: AND
6641: IFFALSE 6869
// begin for i := 1 to engineers do
6643: LD_ADDR_VAR 0 14
6647: PUSH
6648: DOUBLE
6649: LD_INT 1
6651: DEC
6652: ST_TO_ADDR
6653: LD_VAR 0 21
6657: PUSH
6658: FOR_TO
6659: IFFALSE 6865
// if GetTag ( engineers [ i ] ) = 1 then
6661: LD_VAR 0 21
6665: PUSH
6666: LD_VAR 0 14
6670: ARRAY
6671: PPUSH
6672: CALL_OW 110
6676: PUSH
6677: LD_INT 1
6679: EQUAL
6680: IFFALSE 6863
// begin if GetTaskList ( engineers [ i ] ) then
6682: LD_VAR 0 21
6686: PUSH
6687: LD_VAR 0 14
6691: ARRAY
6692: PPUSH
6693: CALL_OW 437
6697: IFFALSE 6745
// if GetTaskList ( engineers [ i ] ) [ 1 ] [ 1 ] = e then
6699: LD_VAR 0 21
6703: PUSH
6704: LD_VAR 0 14
6708: ARRAY
6709: PPUSH
6710: CALL_OW 437
6714: PUSH
6715: LD_INT 1
6717: ARRAY
6718: PUSH
6719: LD_INT 1
6721: ARRAY
6722: PUSH
6723: LD_STRING e
6725: EQUAL
6726: IFFALSE 6745
// SetTaskList ( engineers [ i ] , [ ] ) ;
6728: LD_VAR 0 21
6732: PUSH
6733: LD_VAR 0 14
6737: ARRAY
6738: PPUSH
6739: EMPTY
6740: PPUSH
6741: CALL_OW 446
// if IsInUnit ( engineers [ i ] ) then
6745: LD_VAR 0 21
6749: PUSH
6750: LD_VAR 0 14
6754: ARRAY
6755: PPUSH
6756: CALL_OW 310
6760: IFFALSE 6777
// ComExitBuilding ( engineers [ i ] ) ;
6762: LD_VAR 0 21
6766: PUSH
6767: LD_VAR 0 14
6771: ARRAY
6772: PPUSH
6773: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
6777: LD_ADDR_VAR 0 47
6781: PUSH
6782: LD_VAR 0 4
6786: PPUSH
6787: LD_INT 22
6789: PUSH
6790: LD_VAR 0 1
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: PUSH
6799: LD_INT 21
6801: PUSH
6802: LD_INT 3
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PUSH
6809: LD_INT 3
6811: PUSH
6812: LD_INT 24
6814: PUSH
6815: LD_INT 1000
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: LIST
6830: PPUSH
6831: CALL_OW 70
6835: PUSH
6836: FOR_IN
6837: IFFALSE 6861
// AddComRepairBuilding ( engineers [ i ] , damageBuilding ) ;
6839: LD_VAR 0 21
6843: PUSH
6844: LD_VAR 0 14
6848: ARRAY
6849: PPUSH
6850: LD_VAR 0 47
6854: PPUSH
6855: CALL_OW 190
6859: GO 6836
6861: POP
6862: POP
// end ;
6863: GO 6658
6865: POP
6866: POP
// end else
6867: GO 7176
// if engineers and destroyedBuildings then
6869: LD_VAR 0 21
6873: PUSH
6874: LD_VAR 0 35
6878: AND
6879: IFFALSE 7055
// begin for i := 1 to engineers do
6881: LD_ADDR_VAR 0 14
6885: PUSH
6886: DOUBLE
6887: LD_INT 1
6889: DEC
6890: ST_TO_ADDR
6891: LD_VAR 0 21
6895: PUSH
6896: FOR_TO
6897: IFFALSE 7051
// if GetTag ( engineers [ i ] ) = 1 then
6899: LD_VAR 0 21
6903: PUSH
6904: LD_VAR 0 14
6908: ARRAY
6909: PPUSH
6910: CALL_OW 110
6914: PUSH
6915: LD_INT 1
6917: EQUAL
6918: IFFALSE 7049
// begin if IsInUnit ( engineers [ i ] ) then
6920: LD_VAR 0 21
6924: PUSH
6925: LD_VAR 0 14
6929: ARRAY
6930: PPUSH
6931: CALL_OW 310
6935: IFFALSE 6952
// ComExitBuilding ( engineers [ i ] ) ;
6937: LD_VAR 0 21
6941: PUSH
6942: LD_VAR 0 14
6946: ARRAY
6947: PPUSH
6948: CALL_OW 122
// for j := 1 to destroyedBuildings / 4 do
6952: LD_ADDR_VAR 0 15
6956: PUSH
6957: DOUBLE
6958: LD_INT 1
6960: DEC
6961: ST_TO_ADDR
6962: LD_VAR 0 35
6966: PUSH
6967: LD_INT 4
6969: DIVREAL
6970: PUSH
6971: FOR_TO
6972: IFFALSE 7047
// AddComBuild ( engineers [ i ] , destroyedBuildings [ j ] , destroyedBuildings [ j + 1 ] , destroyedBuildings [ j + 2 ] , destroyedBuildings [ j + 3 ] ) ;
6974: LD_VAR 0 21
6978: PUSH
6979: LD_VAR 0 14
6983: ARRAY
6984: PPUSH
6985: LD_VAR 0 35
6989: PUSH
6990: LD_VAR 0 15
6994: ARRAY
6995: PPUSH
6996: LD_VAR 0 35
7000: PUSH
7001: LD_VAR 0 15
7005: PUSH
7006: LD_INT 1
7008: PLUS
7009: ARRAY
7010: PPUSH
7011: LD_VAR 0 35
7015: PUSH
7016: LD_VAR 0 15
7020: PUSH
7021: LD_INT 2
7023: PLUS
7024: ARRAY
7025: PPUSH
7026: LD_VAR 0 35
7030: PUSH
7031: LD_VAR 0 15
7035: PUSH
7036: LD_INT 3
7038: PLUS
7039: ARRAY
7040: PPUSH
7041: CALL_OW 205
7045: GO 6971
7047: POP
7048: POP
// end ;
7049: GO 6896
7051: POP
7052: POP
// end else
7053: GO 7176
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot and not destroyedBuildings then
7055: LD_VAR 0 21
7059: PUSH
7060: LD_VAR 0 21
7064: PPUSH
7065: LD_INT 56
7067: PUSH
7068: EMPTY
7069: LIST
7070: PPUSH
7071: CALL_OW 72
7075: AND
7076: PUSH
7077: LD_VAR 0 39
7081: AND
7082: PUSH
7083: LD_VAR 0 35
7087: NOT
7088: AND
7089: IFFALSE 7176
// for i := 1 to engineers do
7091: LD_ADDR_VAR 0 14
7095: PUSH
7096: DOUBLE
7097: LD_INT 1
7099: DEC
7100: ST_TO_ADDR
7101: LD_VAR 0 21
7105: PUSH
7106: FOR_TO
7107: IFFALSE 7174
// begin if GetTag ( engineers [ i ] ) = 1 and not HasTask ( engineers [ i ] ) then
7109: LD_VAR 0 21
7113: PUSH
7114: LD_VAR 0 14
7118: ARRAY
7119: PPUSH
7120: CALL_OW 110
7124: PUSH
7125: LD_INT 1
7127: EQUAL
7128: PUSH
7129: LD_VAR 0 21
7133: PUSH
7134: LD_VAR 0 14
7138: ARRAY
7139: PPUSH
7140: CALL_OW 314
7144: NOT
7145: AND
7146: IFFALSE 7172
// ComEnterUnit ( engineers [ i ] , depot [ 1 ] ) ;
7148: LD_VAR 0 21
7152: PUSH
7153: LD_VAR 0 14
7157: ARRAY
7158: PPUSH
7159: LD_VAR 0 39
7163: PUSH
7164: LD_INT 1
7166: ARRAY
7167: PPUSH
7168: CALL_OW 120
// end ;
7172: GO 7106
7174: POP
7175: POP
// for i := 1 to personel do
7176: LD_ADDR_VAR 0 14
7180: PUSH
7181: DOUBLE
7182: LD_INT 1
7184: DEC
7185: ST_TO_ADDR
7186: LD_VAR 0 19
7190: PUSH
7191: FOR_TO
7192: IFFALSE 7233
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
7194: LD_ADDR_VAR 0 22
7198: PUSH
7199: LD_VAR 0 22
7203: PUSH
7204: LD_VAR 0 19
7208: PUSH
7209: LD_VAR 0 14
7213: ARRAY
7214: PPUSH
7215: LD_INT 25
7217: PUSH
7218: LD_INT 3
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PPUSH
7225: CALL_OW 72
7229: ADD
7230: ST_TO_ADDR
7231: GO 7191
7233: POP
7234: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
7235: LD_VAR 0 22
7239: PUSH
7240: LD_VAR 0 4
7244: PPUSH
7245: LD_INT 22
7247: PUSH
7248: LD_VAR 0 1
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PUSH
7257: LD_INT 21
7259: PUSH
7260: LD_INT 2
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: LD_INT 3
7269: PUSH
7270: LD_INT 24
7272: PUSH
7273: LD_INT 1000
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: LIST
7288: PPUSH
7289: CALL_OW 70
7293: AND
7294: IFFALSE 7874
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7296: LD_ADDR_VAR 0 48
7300: PUSH
7301: LD_VAR 0 4
7305: PPUSH
7306: LD_INT 22
7308: PUSH
7309: LD_VAR 0 1
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PUSH
7318: LD_INT 21
7320: PUSH
7321: LD_INT 2
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PUSH
7328: LD_INT 3
7330: PUSH
7331: LD_INT 24
7333: PUSH
7334: LD_INT 1000
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: LIST
7349: PPUSH
7350: CALL_OW 70
7354: PUSH
7355: FOR_IN
7356: IFFALSE 7870
// begin if GetDistUnitArea ( damageUnit , repairArea ) <= 5 then
7358: LD_VAR 0 48
7362: PPUSH
7363: LD_VAR 0 6
7367: PPUSH
7368: CALL_OW 299
7372: PUSH
7373: LD_INT 5
7375: LESSEQUAL
7376: IFFALSE 7465
// for i := 1 to vehicles do
7378: LD_ADDR_VAR 0 14
7382: PUSH
7383: DOUBLE
7384: LD_INT 1
7386: DEC
7387: ST_TO_ADDR
7388: LD_VAR 0 25
7392: PUSH
7393: FOR_TO
7394: IFFALSE 7463
// if vehicles [ i ] [ 1 ] = damageUnit then
7396: LD_VAR 0 25
7400: PUSH
7401: LD_VAR 0 14
7405: ARRAY
7406: PUSH
7407: LD_INT 1
7409: ARRAY
7410: PUSH
7411: LD_VAR 0 48
7415: EQUAL
7416: IFFALSE 7461
// begin ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
7418: LD_VAR 0 25
7422: PUSH
7423: LD_VAR 0 14
7427: ARRAY
7428: PUSH
7429: LD_INT 2
7431: ARRAY
7432: PPUSH
7433: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
7437: LD_VAR 0 25
7441: PUSH
7442: LD_VAR 0 14
7446: ARRAY
7447: PUSH
7448: LD_INT 2
7450: ARRAY
7451: PPUSH
7452: LD_VAR 0 48
7456: PPUSH
7457: CALL_OW 189
// end ;
7461: GO 7393
7463: POP
7464: POP
// for i := 1 to mechanics do
7465: LD_ADDR_VAR 0 14
7469: PUSH
7470: DOUBLE
7471: LD_INT 1
7473: DEC
7474: ST_TO_ADDR
7475: LD_VAR 0 22
7479: PUSH
7480: FOR_TO
7481: IFFALSE 7649
// if GetTag ( mechanics [ i ] ) = 1 and IsInUnit ( mechanics [ i ] ) in [ b_workshop , b_factory ] then
7483: LD_VAR 0 22
7487: PUSH
7488: LD_VAR 0 14
7492: ARRAY
7493: PPUSH
7494: CALL_OW 110
7498: PUSH
7499: LD_INT 1
7501: EQUAL
7502: PUSH
7503: LD_VAR 0 22
7507: PUSH
7508: LD_VAR 0 14
7512: ARRAY
7513: PPUSH
7514: CALL_OW 310
7518: PUSH
7519: LD_INT 2
7521: PUSH
7522: LD_INT 3
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: IN
7529: AND
7530: IFFALSE 7647
// begin if GetTaskList ( mechanics [ i ] ) then
7532: LD_VAR 0 22
7536: PUSH
7537: LD_VAR 0 14
7541: ARRAY
7542: PPUSH
7543: CALL_OW 437
7547: IFFALSE 7595
// if GetTaskList ( mechanics [ i ] ) [ 1 ] [ 1 ] = e then
7549: LD_VAR 0 22
7553: PUSH
7554: LD_VAR 0 14
7558: ARRAY
7559: PPUSH
7560: CALL_OW 437
7564: PUSH
7565: LD_INT 1
7567: ARRAY
7568: PUSH
7569: LD_INT 1
7571: ARRAY
7572: PUSH
7573: LD_STRING e
7575: EQUAL
7576: IFFALSE 7595
// SetTaskList ( mechanics [ i ] , [ ] ) ;
7578: LD_VAR 0 22
7582: PUSH
7583: LD_VAR 0 14
7587: ARRAY
7588: PPUSH
7589: EMPTY
7590: PPUSH
7591: CALL_OW 446
// if IsInUnit ( mechanics [ i ] ) then
7595: LD_VAR 0 22
7599: PUSH
7600: LD_VAR 0 14
7604: ARRAY
7605: PPUSH
7606: CALL_OW 310
7610: IFFALSE 7627
// ComExitBuilding ( mechanics [ i ] ) ;
7612: LD_VAR 0 22
7616: PUSH
7617: LD_VAR 0 14
7621: ARRAY
7622: PPUSH
7623: CALL_OW 122
// AddComRepairVehicle ( mechanics [ i ] , damageUnit ) ;
7627: LD_VAR 0 22
7631: PUSH
7632: LD_VAR 0 14
7636: ARRAY
7637: PPUSH
7638: LD_VAR 0 48
7642: PPUSH
7643: CALL_OW 189
// end ;
7647: GO 7480
7649: POP
7650: POP
// if GetLives ( damageUnit ) < 250 and IsInArea ( damageUnit , baseArea ) then
7651: LD_VAR 0 48
7655: PPUSH
7656: CALL_OW 256
7660: PUSH
7661: LD_INT 250
7663: LESS
7664: PUSH
7665: LD_VAR 0 48
7669: PPUSH
7670: LD_VAR 0 4
7674: PPUSH
7675: CALL_OW 308
7679: AND
7680: IFFALSE 7868
// for i := 1 to personel do
7682: LD_ADDR_VAR 0 14
7686: PUSH
7687: DOUBLE
7688: LD_INT 1
7690: DEC
7691: ST_TO_ADDR
7692: LD_VAR 0 19
7696: PUSH
7697: FOR_TO
7698: IFFALSE 7866
// if GetTag ( mechanics [ i ] ) = 1 and IsInUnit ( mechanics [ i ] ) in [ b_workshop , b_factory ] then
7700: LD_VAR 0 22
7704: PUSH
7705: LD_VAR 0 14
7709: ARRAY
7710: PPUSH
7711: CALL_OW 110
7715: PUSH
7716: LD_INT 1
7718: EQUAL
7719: PUSH
7720: LD_VAR 0 22
7724: PUSH
7725: LD_VAR 0 14
7729: ARRAY
7730: PPUSH
7731: CALL_OW 310
7735: PUSH
7736: LD_INT 2
7738: PUSH
7739: LD_INT 3
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: IN
7746: AND
7747: IFFALSE 7864
// begin if GetTaskList ( mechanics [ i ] ) then
7749: LD_VAR 0 22
7753: PUSH
7754: LD_VAR 0 14
7758: ARRAY
7759: PPUSH
7760: CALL_OW 437
7764: IFFALSE 7812
// if GetTaskList ( mechanics [ i ] ) [ 1 ] [ 1 ] = e then
7766: LD_VAR 0 22
7770: PUSH
7771: LD_VAR 0 14
7775: ARRAY
7776: PPUSH
7777: CALL_OW 437
7781: PUSH
7782: LD_INT 1
7784: ARRAY
7785: PUSH
7786: LD_INT 1
7788: ARRAY
7789: PUSH
7790: LD_STRING e
7792: EQUAL
7793: IFFALSE 7812
// SetTaskList ( mechanics [ i ] , [ ] ) ;
7795: LD_VAR 0 22
7799: PUSH
7800: LD_VAR 0 14
7804: ARRAY
7805: PPUSH
7806: EMPTY
7807: PPUSH
7808: CALL_OW 446
// if IsInUnit ( mechanics [ i ] ) then
7812: LD_VAR 0 22
7816: PUSH
7817: LD_VAR 0 14
7821: ARRAY
7822: PPUSH
7823: CALL_OW 310
7827: IFFALSE 7844
// ComExitBuilding ( mechanics [ i ] ) ;
7829: LD_VAR 0 22
7833: PUSH
7834: LD_VAR 0 14
7838: ARRAY
7839: PPUSH
7840: CALL_OW 122
// AddComRepairVehicle ( mechanics [ i ] , damageUnit ) ;
7844: LD_VAR 0 22
7848: PUSH
7849: LD_VAR 0 14
7853: ARRAY
7854: PPUSH
7855: LD_VAR 0 48
7859: PPUSH
7860: CALL_OW 189
// end ;
7864: GO 7697
7866: POP
7867: POP
// end ;
7868: GO 7355
7870: POP
7871: POP
// end else
7872: GO 8171
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and UnitFilter ( controlTowers , [ f_empty ] ) then
7874: LD_VAR 0 22
7878: PUSH
7879: LD_VAR 0 22
7883: PPUSH
7884: LD_INT 56
7886: PUSH
7887: EMPTY
7888: LIST
7889: PPUSH
7890: CALL_OW 72
7894: AND
7895: PUSH
7896: LD_VAR 0 44
7900: PPUSH
7901: LD_INT 58
7903: PUSH
7904: EMPTY
7905: LIST
7906: PPUSH
7907: CALL_OW 72
7911: AND
7912: IFFALSE 8029
// begin for i := 1 to mechanics do
7914: LD_ADDR_VAR 0 14
7918: PUSH
7919: DOUBLE
7920: LD_INT 1
7922: DEC
7923: ST_TO_ADDR
7924: LD_VAR 0 22
7928: PUSH
7929: FOR_TO
7930: IFFALSE 8025
// if GetTag ( mechanics [ i ] ) = 1 and not HasTask ( mechanics [ i ] ) and not IsInUnit ( mechanics [ i ] ) then
7932: LD_VAR 0 22
7936: PUSH
7937: LD_VAR 0 14
7941: ARRAY
7942: PPUSH
7943: CALL_OW 110
7947: PUSH
7948: LD_INT 1
7950: EQUAL
7951: PUSH
7952: LD_VAR 0 22
7956: PUSH
7957: LD_VAR 0 14
7961: ARRAY
7962: PPUSH
7963: CALL_OW 314
7967: NOT
7968: AND
7969: PUSH
7970: LD_VAR 0 22
7974: PUSH
7975: LD_VAR 0 14
7979: ARRAY
7980: PPUSH
7981: CALL_OW 310
7985: NOT
7986: AND
7987: IFFALSE 8023
// ComEnterUnit ( mechanics [ i ] , controlTowers [ rand ( 1 , controlTowers ) ] ) ;
7989: LD_VAR 0 22
7993: PUSH
7994: LD_VAR 0 14
7998: ARRAY
7999: PPUSH
8000: LD_VAR 0 44
8004: PUSH
8005: LD_INT 1
8007: PPUSH
8008: LD_VAR 0 44
8012: PPUSH
8013: CALL_OW 12
8017: ARRAY
8018: PPUSH
8019: CALL_OW 120
8023: GO 7929
8025: POP
8026: POP
// end else
8027: GO 8171
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
8029: LD_VAR 0 22
8033: PUSH
8034: LD_VAR 0 22
8038: PPUSH
8039: LD_INT 56
8041: PUSH
8042: EMPTY
8043: LIST
8044: PPUSH
8045: CALL_OW 72
8049: AND
8050: PUSH
8051: LD_VAR 0 40
8055: AND
8056: IFFALSE 8171
// for i := 1 to mechanics do
8058: LD_ADDR_VAR 0 14
8062: PUSH
8063: DOUBLE
8064: LD_INT 1
8066: DEC
8067: ST_TO_ADDR
8068: LD_VAR 0 22
8072: PUSH
8073: FOR_TO
8074: IFFALSE 8169
// if GetTag ( mechanics [ i ] ) = 1 and not HasTask ( mechanics [ i ] ) and not IsInUnit ( mechanics [ i ] ) then
8076: LD_VAR 0 22
8080: PUSH
8081: LD_VAR 0 14
8085: ARRAY
8086: PPUSH
8087: CALL_OW 110
8091: PUSH
8092: LD_INT 1
8094: EQUAL
8095: PUSH
8096: LD_VAR 0 22
8100: PUSH
8101: LD_VAR 0 14
8105: ARRAY
8106: PPUSH
8107: CALL_OW 314
8111: NOT
8112: AND
8113: PUSH
8114: LD_VAR 0 22
8118: PUSH
8119: LD_VAR 0 14
8123: ARRAY
8124: PPUSH
8125: CALL_OW 310
8129: NOT
8130: AND
8131: IFFALSE 8167
// ComEnterUnit ( mechanics [ i ] , factory [ rand ( 1 , factory ) ] ) ;
8133: LD_VAR 0 22
8137: PUSH
8138: LD_VAR 0 14
8142: ARRAY
8143: PPUSH
8144: LD_VAR 0 40
8148: PUSH
8149: LD_INT 1
8151: PPUSH
8152: LD_VAR 0 40
8156: PPUSH
8157: CALL_OW 12
8161: ARRAY
8162: PPUSH
8163: CALL_OW 120
8167: GO 8073
8169: POP
8170: POP
// for i := 1 to personel do
8171: LD_ADDR_VAR 0 14
8175: PUSH
8176: DOUBLE
8177: LD_INT 1
8179: DEC
8180: ST_TO_ADDR
8181: LD_VAR 0 19
8185: PUSH
8186: FOR_TO
8187: IFFALSE 8228
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
8189: LD_ADDR_VAR 0 23
8193: PUSH
8194: LD_VAR 0 23
8198: PUSH
8199: LD_VAR 0 19
8203: PUSH
8204: LD_VAR 0 14
8208: ARRAY
8209: PPUSH
8210: LD_INT 25
8212: PUSH
8213: LD_INT 4
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: PPUSH
8220: CALL_OW 72
8224: ADD
8225: ST_TO_ADDR
8226: GO 8186
8228: POP
8229: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
8230: LD_VAR 0 23
8234: PUSH
8235: LD_VAR 0 4
8239: PPUSH
8240: LD_INT 22
8242: PUSH
8243: LD_VAR 0 1
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: PUSH
8252: LD_INT 21
8254: PUSH
8255: LD_INT 1
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PUSH
8262: LD_INT 3
8264: PUSH
8265: LD_INT 24
8267: PUSH
8268: LD_INT 1000
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: LIST
8283: PPUSH
8284: CALL_OW 70
8288: AND
8289: IFFALSE 8726
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
8291: LD_ADDR_VAR 0 48
8295: PUSH
8296: LD_VAR 0 4
8300: PPUSH
8301: LD_INT 22
8303: PUSH
8304: LD_VAR 0 1
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: PUSH
8313: LD_INT 21
8315: PUSH
8316: LD_INT 1
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: PUSH
8323: LD_INT 3
8325: PUSH
8326: LD_INT 24
8328: PUSH
8329: LD_INT 1000
8331: PUSH
8332: EMPTY
8333: LIST
8334: LIST
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: LIST
8344: PPUSH
8345: CALL_OW 70
8349: PUSH
8350: FOR_IN
8351: IFFALSE 8722
// begin if GetDistUnitArea ( damageUnit , healArea ) <= 5 then
8353: LD_VAR 0 48
8357: PPUSH
8358: LD_VAR 0 5
8362: PPUSH
8363: CALL_OW 299
8367: PUSH
8368: LD_INT 5
8370: LESSEQUAL
8371: IFFALSE 8531
// for i := 1 to scientists do
8373: LD_ADDR_VAR 0 14
8377: PUSH
8378: DOUBLE
8379: LD_INT 1
8381: DEC
8382: ST_TO_ADDR
8383: LD_VAR 0 23
8387: PUSH
8388: FOR_TO
8389: IFFALSE 8529
// if GetTag ( scientists [ i ] ) = 1 then
8391: LD_VAR 0 23
8395: PUSH
8396: LD_VAR 0 14
8400: ARRAY
8401: PPUSH
8402: CALL_OW 110
8406: PUSH
8407: LD_INT 1
8409: EQUAL
8410: IFFALSE 8527
// begin if GetTaskList ( scientists [ i ] ) then
8412: LD_VAR 0 23
8416: PUSH
8417: LD_VAR 0 14
8421: ARRAY
8422: PPUSH
8423: CALL_OW 437
8427: IFFALSE 8475
// if GetTaskList ( scientists [ i ] ) [ 1 ] [ 1 ] = e then
8429: LD_VAR 0 23
8433: PUSH
8434: LD_VAR 0 14
8438: ARRAY
8439: PPUSH
8440: CALL_OW 437
8444: PUSH
8445: LD_INT 1
8447: ARRAY
8448: PUSH
8449: LD_INT 1
8451: ARRAY
8452: PUSH
8453: LD_STRING e
8455: EQUAL
8456: IFFALSE 8475
// SetTaskList ( scientists [ i ] , [ ] ) ;
8458: LD_VAR 0 23
8462: PUSH
8463: LD_VAR 0 14
8467: ARRAY
8468: PPUSH
8469: EMPTY
8470: PPUSH
8471: CALL_OW 446
// if IsInUnit ( scientists [ i ] ) then
8475: LD_VAR 0 23
8479: PUSH
8480: LD_VAR 0 14
8484: ARRAY
8485: PPUSH
8486: CALL_OW 310
8490: IFFALSE 8507
// ComExitBuilding ( scientists [ i ] ) ;
8492: LD_VAR 0 23
8496: PUSH
8497: LD_VAR 0 14
8501: ARRAY
8502: PPUSH
8503: CALL_OW 122
// AddComHeal ( scientists [ i ] , damageUnit ) ;
8507: LD_VAR 0 23
8511: PUSH
8512: LD_VAR 0 14
8516: ARRAY
8517: PPUSH
8518: LD_VAR 0 48
8522: PPUSH
8523: CALL_OW 188
// end ;
8527: GO 8388
8529: POP
8530: POP
// if GetLives ( damageUnit ) < 250 and IsInArea ( damageUnit , baseArea ) then
8531: LD_VAR 0 48
8535: PPUSH
8536: CALL_OW 256
8540: PUSH
8541: LD_INT 250
8543: LESS
8544: PUSH
8545: LD_VAR 0 48
8549: PPUSH
8550: LD_VAR 0 4
8554: PPUSH
8555: CALL_OW 308
8559: AND
8560: IFFALSE 8720
// for i := 1 to scientists do
8562: LD_ADDR_VAR 0 14
8566: PUSH
8567: DOUBLE
8568: LD_INT 1
8570: DEC
8571: ST_TO_ADDR
8572: LD_VAR 0 23
8576: PUSH
8577: FOR_TO
8578: IFFALSE 8718
// if GetTag ( scientists [ i ] ) = 1 then
8580: LD_VAR 0 23
8584: PUSH
8585: LD_VAR 0 14
8589: ARRAY
8590: PPUSH
8591: CALL_OW 110
8595: PUSH
8596: LD_INT 1
8598: EQUAL
8599: IFFALSE 8716
// begin if GetTaskList ( scientists [ i ] ) then
8601: LD_VAR 0 23
8605: PUSH
8606: LD_VAR 0 14
8610: ARRAY
8611: PPUSH
8612: CALL_OW 437
8616: IFFALSE 8664
// if GetTaskList ( scientists [ i ] ) [ 1 ] [ 1 ] = e then
8618: LD_VAR 0 23
8622: PUSH
8623: LD_VAR 0 14
8627: ARRAY
8628: PPUSH
8629: CALL_OW 437
8633: PUSH
8634: LD_INT 1
8636: ARRAY
8637: PUSH
8638: LD_INT 1
8640: ARRAY
8641: PUSH
8642: LD_STRING e
8644: EQUAL
8645: IFFALSE 8664
// SetTaskList ( scientists [ i ] , [ ] ) ;
8647: LD_VAR 0 23
8651: PUSH
8652: LD_VAR 0 14
8656: ARRAY
8657: PPUSH
8658: EMPTY
8659: PPUSH
8660: CALL_OW 446
// if IsInUnit ( scientists [ i ] ) then
8664: LD_VAR 0 23
8668: PUSH
8669: LD_VAR 0 14
8673: ARRAY
8674: PPUSH
8675: CALL_OW 310
8679: IFFALSE 8696
// ComExitBuilding ( scientists [ i ] ) ;
8681: LD_VAR 0 23
8685: PUSH
8686: LD_VAR 0 14
8690: ARRAY
8691: PPUSH
8692: CALL_OW 122
// AddComHeal ( scientists [ i ] , damageUnit ) ;
8696: LD_VAR 0 23
8700: PUSH
8701: LD_VAR 0 14
8705: ARRAY
8706: PPUSH
8707: LD_VAR 0 48
8711: PPUSH
8712: CALL_OW 188
// end ;
8716: GO 8577
8718: POP
8719: POP
// end ;
8720: GO 8350
8722: POP
8723: POP
// end else
8724: GO 8868
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
8726: LD_VAR 0 23
8730: PUSH
8731: LD_VAR 0 23
8735: PPUSH
8736: LD_INT 56
8738: PUSH
8739: EMPTY
8740: LIST
8741: PPUSH
8742: CALL_OW 72
8746: AND
8747: PUSH
8748: LD_VAR 0 41
8752: AND
8753: IFFALSE 8868
// for i := 1 to scientists do
8755: LD_ADDR_VAR 0 14
8759: PUSH
8760: DOUBLE
8761: LD_INT 1
8763: DEC
8764: ST_TO_ADDR
8765: LD_VAR 0 23
8769: PUSH
8770: FOR_TO
8771: IFFALSE 8866
// if GetTag ( scientists [ i ] ) = 1 and not HasTask ( scientists [ i ] ) and not IsInUnit ( scientists [ i ] ) then
8773: LD_VAR 0 23
8777: PUSH
8778: LD_VAR 0 14
8782: ARRAY
8783: PPUSH
8784: CALL_OW 110
8788: PUSH
8789: LD_INT 1
8791: EQUAL
8792: PUSH
8793: LD_VAR 0 23
8797: PUSH
8798: LD_VAR 0 14
8802: ARRAY
8803: PPUSH
8804: CALL_OW 314
8808: NOT
8809: AND
8810: PUSH
8811: LD_VAR 0 23
8815: PUSH
8816: LD_VAR 0 14
8820: ARRAY
8821: PPUSH
8822: CALL_OW 310
8826: NOT
8827: AND
8828: IFFALSE 8864
// ComEnterUnit ( scientists [ i ] , lab [ rand ( 1 , lab ) ] ) ;
8830: LD_VAR 0 23
8834: PUSH
8835: LD_VAR 0 14
8839: ARRAY
8840: PPUSH
8841: LD_VAR 0 41
8845: PUSH
8846: LD_INT 1
8848: PPUSH
8849: LD_VAR 0 41
8853: PPUSH
8854: CALL_OW 12
8858: ARRAY
8859: PPUSH
8860: CALL_OW 120
8864: GO 8770
8866: POP
8867: POP
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , us_bulldozer ] ] ) then
8868: LD_INT 22
8870: PUSH
8871: LD_VAR 0 1
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: LD_INT 34
8882: PUSH
8883: LD_INT 14
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PPUSH
8894: CALL_OW 69
8898: NOT
8899: IFFALSE 8926
// AddComConstruct ( factory [ 1 ] , us_heavy_tracked , engine_combustion , control_remote , us_bulldozer ) ;
8901: LD_VAR 0 40
8905: PUSH
8906: LD_INT 1
8908: ARRAY
8909: PPUSH
8910: LD_INT 4
8912: PPUSH
8913: LD_INT 1
8915: PPUSH
8916: LD_INT 2
8918: PPUSH
8919: LD_INT 14
8921: PPUSH
8922: CALL_OW 185
// if vehicles < vehiclesAmount and factory then
8926: LD_VAR 0 25
8930: PUSH
8931: LD_VAR 0 8
8935: LESS
8936: PUSH
8937: LD_VAR 0 40
8941: AND
8942: IFFALSE 9190
// begin tmp = vehiclesAmount - vehicles ;
8944: LD_ADDR_VAR 0 16
8948: PUSH
8949: LD_VAR 0 8
8953: PUSH
8954: LD_VAR 0 25
8958: MINUS
8959: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
8960: LD_ADDR_VAR 0 32
8964: PUSH
8965: LD_VAR 0 1
8969: PPUSH
8970: LD_VAR 0 2
8974: PPUSH
8975: CALL 13748 0 2
8979: ST_TO_ADDR
// for i := 1 to tmp do
8980: LD_ADDR_VAR 0 14
8984: PUSH
8985: DOUBLE
8986: LD_INT 1
8988: DEC
8989: ST_TO_ADDR
8990: LD_VAR 0 16
8994: PUSH
8995: FOR_TO
8996: IFFALSE 9186
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
8998: LD_ADDR_VAR 0 16
9002: PUSH
9003: LD_VAR 0 32
9007: PUSH
9008: LD_INT 1
9010: PPUSH
9011: LD_VAR 0 32
9015: PPUSH
9016: CALL_OW 12
9020: ARRAY
9021: ST_TO_ADDR
// if tmp in [ 6 , 34 , 14 , 71 , 47 ] then
9022: LD_VAR 0 16
9026: PUSH
9027: LD_INT 6
9029: PUSH
9030: LD_INT 34
9032: PUSH
9033: LD_INT 14
9035: PUSH
9036: LD_INT 71
9038: PUSH
9039: LD_INT 47
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: IN
9049: IFFALSE 9087
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
9051: LD_ADDR_VAR 0 33
9055: PUSH
9056: LD_INT 4
9058: PUSH
9059: EMPTY
9060: LIST
9061: PUSH
9062: LD_INT 14
9064: PUSH
9065: EMPTY
9066: LIST
9067: PUSH
9068: LD_INT 24
9070: PUSH
9071: EMPTY
9072: LIST
9073: PUSH
9074: EMPTY
9075: LIST
9076: LIST
9077: LIST
9078: PUSH
9079: LD_VAR 0 2
9083: ARRAY
9084: ST_TO_ADDR
9085: GO 9141
// chassis = [ [ us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
9087: LD_ADDR_VAR 0 33
9091: PUSH
9092: LD_INT 3
9094: PUSH
9095: LD_INT 4
9097: PUSH
9098: EMPTY
9099: LIST
9100: LIST
9101: PUSH
9102: LD_INT 13
9104: PUSH
9105: LD_INT 14
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: PUSH
9112: LD_INT 21
9114: PUSH
9115: LD_INT 23
9117: PUSH
9118: LD_INT 24
9120: PUSH
9121: LD_INT 22
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: LIST
9134: PUSH
9135: LD_VAR 0 2
9139: ARRAY
9140: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_remote , tmp ) ;
9141: LD_VAR 0 40
9145: PUSH
9146: LD_INT 1
9148: ARRAY
9149: PPUSH
9150: LD_VAR 0 33
9154: PUSH
9155: LD_INT 1
9157: PPUSH
9158: LD_VAR 0 33
9162: PPUSH
9163: CALL_OW 12
9167: ARRAY
9168: PPUSH
9169: LD_INT 1
9171: PPUSH
9172: LD_INT 2
9174: PPUSH
9175: LD_VAR 0 16
9179: PPUSH
9180: CALL_OW 185
// end ;
9184: GO 8995
9186: POP
9187: POP
// end else
9188: GO 9203
// ComCancel ( factory [ 1 ] ) ;
9190: LD_VAR 0 40
9194: PUSH
9195: LD_INT 1
9197: ARRAY
9198: PPUSH
9199: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ] ] ) do
9203: LD_ADDR_VAR 0 24
9207: PUSH
9208: LD_VAR 0 4
9212: PPUSH
9213: LD_INT 22
9215: PUSH
9216: LD_VAR 0 1
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: PUSH
9225: LD_INT 21
9227: PUSH
9228: LD_INT 2
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: PUSH
9235: LD_INT 50
9237: PUSH
9238: EMPTY
9239: LIST
9240: PUSH
9241: LD_INT 3
9243: PUSH
9244: LD_INT 2
9246: PUSH
9247: LD_INT 34
9249: PUSH
9250: LD_INT 12
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PUSH
9257: LD_INT 34
9259: PUSH
9260: LD_INT 51
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: LD_INT 34
9269: PUSH
9270: LD_INT 32
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PUSH
9277: LD_INT 34
9279: PUSH
9280: LD_INT 31
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: PPUSH
9304: CALL_OW 70
9308: PUSH
9309: FOR_IN
9310: IFFALSE 9465
// begin vehicleInList = false ;
9312: LD_ADDR_VAR 0 26
9316: PUSH
9317: LD_INT 0
9319: ST_TO_ADDR
// for i := 1 to vehicles do
9320: LD_ADDR_VAR 0 14
9324: PUSH
9325: DOUBLE
9326: LD_INT 1
9328: DEC
9329: ST_TO_ADDR
9330: LD_VAR 0 25
9334: PUSH
9335: FOR_TO
9336: IFFALSE 9366
// if vehicle in vehicles [ i ] then
9338: LD_VAR 0 24
9342: PUSH
9343: LD_VAR 0 25
9347: PUSH
9348: LD_VAR 0 14
9352: ARRAY
9353: IN
9354: IFFALSE 9364
// vehicleInList = true ;
9356: LD_ADDR_VAR 0 26
9360: PUSH
9361: LD_INT 1
9363: ST_TO_ADDR
9364: GO 9335
9366: POP
9367: POP
// if not vehicleInList then
9368: LD_VAR 0 26
9372: NOT
9373: IFFALSE 9463
// begin if vehicles < vehiclesToAttackAmount then
9375: LD_VAR 0 25
9379: PUSH
9380: LD_VAR 0 10
9384: LESS
9385: IFFALSE 9426
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] ] ] else
9387: LD_ADDR_VAR 0 25
9391: PUSH
9392: LD_VAR 0 25
9396: PUSH
9397: LD_VAR 0 24
9401: PUSH
9402: LD_VAR 0 24
9406: PPUSH
9407: CALL_OW 313
9411: PUSH
9412: LD_INT 1
9414: ARRAY
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: PUSH
9420: EMPTY
9421: LIST
9422: ADD
9423: ST_TO_ADDR
9424: GO 9463
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] ] ] ;
9426: LD_ADDR_VAR 0 25
9430: PUSH
9431: LD_VAR 0 25
9435: PUSH
9436: LD_VAR 0 24
9440: PUSH
9441: LD_VAR 0 24
9445: PPUSH
9446: CALL_OW 313
9450: PUSH
9451: LD_INT 1
9453: ARRAY
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: EMPTY
9460: LIST
9461: ADD
9462: ST_TO_ADDR
// end ; end ;
9463: GO 9309
9465: POP
9466: POP
// for enemyUnits in FilterAllUnits ( [ f_enemy , side ] ) do
9467: LD_ADDR_VAR 0 50
9471: PUSH
9472: LD_INT 81
9474: PUSH
9475: LD_VAR 0 1
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PPUSH
9484: CALL_OW 69
9488: PUSH
9489: FOR_IN
9490: IFFALSE 10008
// begin offensiveUnits = [ ] ;
9492: LD_ADDR_VAR 0 27
9496: PUSH
9497: EMPTY
9498: ST_TO_ADDR
// offensiveReadyCounter = 0 ;
9499: LD_ADDR_VAR 0 28
9503: PUSH
9504: LD_INT 0
9506: ST_TO_ADDR
// for i := 1 to vehicles do
9507: LD_ADDR_VAR 0 14
9511: PUSH
9512: DOUBLE
9513: LD_INT 1
9515: DEC
9516: ST_TO_ADDR
9517: LD_VAR 0 25
9521: PUSH
9522: FOR_TO
9523: IFFALSE 9731
// if GetTag ( vehicles [ i ] [ 1 ] ) = 2 then
9525: LD_VAR 0 25
9529: PUSH
9530: LD_VAR 0 14
9534: ARRAY
9535: PUSH
9536: LD_INT 1
9538: ARRAY
9539: PPUSH
9540: CALL_OW 110
9544: PUSH
9545: LD_INT 2
9547: EQUAL
9548: IFFALSE 9729
// begin if GetLives ( vehicles [ i ] [ 1 ] ) > 650 then
9550: LD_VAR 0 25
9554: PUSH
9555: LD_VAR 0 14
9559: ARRAY
9560: PUSH
9561: LD_INT 1
9563: ARRAY
9564: PPUSH
9565: CALL_OW 256
9569: PUSH
9570: LD_INT 650
9572: GREATER
9573: IFFALSE 9589
// offensiveReadyCounter = offensiveReadyCounter + 1 ;
9575: LD_ADDR_VAR 0 28
9579: PUSH
9580: LD_VAR 0 28
9584: PUSH
9585: LD_INT 1
9587: PLUS
9588: ST_TO_ADDR
// if IsInArea ( vehicles [ i ] [ 1 ] , baseArea ) then
9589: LD_VAR 0 25
9593: PUSH
9594: LD_VAR 0 14
9598: ARRAY
9599: PUSH
9600: LD_INT 1
9602: ARRAY
9603: PPUSH
9604: LD_VAR 0 4
9608: PPUSH
9609: CALL_OW 308
9613: IFFALSE 9641
// offensiveUnits = offensiveUnits ^ vehicles [ i ] [ 1 ] ;
9615: LD_ADDR_VAR 0 27
9619: PUSH
9620: LD_VAR 0 27
9624: PUSH
9625: LD_VAR 0 25
9629: PUSH
9630: LD_VAR 0 14
9634: ARRAY
9635: PUSH
9636: LD_INT 1
9638: ARRAY
9639: ADD
9640: ST_TO_ADDR
// for j = 1 to personel do
9641: LD_ADDR_VAR 0 15
9645: PUSH
9646: DOUBLE
9647: LD_INT 1
9649: DEC
9650: ST_TO_ADDR
9651: LD_VAR 0 19
9655: PUSH
9656: FOR_TO
9657: IFFALSE 9727
// if personel [ j ] = vehicles [ i ] [ 2 ] then
9659: LD_VAR 0 19
9663: PUSH
9664: LD_VAR 0 15
9668: ARRAY
9669: PUSH
9670: LD_VAR 0 25
9674: PUSH
9675: LD_VAR 0 14
9679: ARRAY
9680: PUSH
9681: LD_INT 2
9683: ARRAY
9684: EQUAL
9685: IFFALSE 9725
// personel = ReplaceIn ( personel , [ j , personel [ j ] ] , 3 ) ;
9687: LD_ADDR_VAR 0 19
9691: PUSH
9692: LD_VAR 0 19
9696: PPUSH
9697: LD_VAR 0 15
9701: PUSH
9702: LD_VAR 0 19
9706: PUSH
9707: LD_VAR 0 15
9711: ARRAY
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: PPUSH
9717: LD_INT 3
9719: PPUSH
9720: CALL 42699 0 3
9724: ST_TO_ADDR
9725: GO 9656
9727: POP
9728: POP
// end ;
9729: GO 9522
9731: POP
9732: POP
// if vehiclesToAttackAmount <= offensiveReadyCounter then
9733: LD_VAR 0 10
9737: PUSH
9738: LD_VAR 0 28
9742: LESSEQUAL
9743: IFFALSE 10006
// begin for i := 1 to offensiveUnits do
9745: LD_ADDR_VAR 0 14
9749: PUSH
9750: DOUBLE
9751: LD_INT 1
9753: DEC
9754: ST_TO_ADDR
9755: LD_VAR 0 27
9759: PUSH
9760: FOR_TO
9761: IFFALSE 10004
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , offensiveUnits [ i ] ) ;
9763: LD_ADDR_VAR 0 29
9767: PUSH
9768: LD_INT 81
9770: PUSH
9771: LD_INT 1
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: PPUSH
9778: CALL_OW 69
9782: PPUSH
9783: LD_VAR 0 27
9787: PUSH
9788: LD_VAR 0 14
9792: ARRAY
9793: PPUSH
9794: CALL_OW 74
9798: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , offensiveUnits [ i ] ) ;
9799: LD_ADDR_VAR 0 30
9803: PUSH
9804: LD_INT 81
9806: PUSH
9807: LD_INT 1
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: LD_INT 2
9816: PUSH
9817: LD_INT 59
9819: PUSH
9820: EMPTY
9821: LIST
9822: PUSH
9823: LD_INT 21
9825: PUSH
9826: LD_INT 1
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 21
9835: PUSH
9836: LD_INT 2
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: PUSH
9849: EMPTY
9850: LIST
9851: LIST
9852: PUSH
9853: EMPTY
9854: LIST
9855: PPUSH
9856: CALL_OW 69
9860: PPUSH
9861: LD_VAR 0 27
9865: PUSH
9866: LD_VAR 0 14
9870: ARRAY
9871: PPUSH
9872: CALL_OW 74
9876: ST_TO_ADDR
// if GetDistUnits ( offensiveUnits [ i ] , target1 ) + 9 < GetDistUnits ( offensiveUnits [ i ] , target2 ) then
9877: LD_VAR 0 27
9881: PUSH
9882: LD_VAR 0 14
9886: ARRAY
9887: PPUSH
9888: LD_VAR 0 29
9892: PPUSH
9893: CALL_OW 296
9897: PUSH
9898: LD_INT 9
9900: PLUS
9901: PUSH
9902: LD_VAR 0 27
9906: PUSH
9907: LD_VAR 0 14
9911: ARRAY
9912: PPUSH
9913: LD_VAR 0 30
9917: PPUSH
9918: CALL_OW 296
9922: LESS
9923: IFFALSE 9947
// ComAttackUnit ( offensiveUnits [ i ] , target1 ) else
9925: LD_VAR 0 27
9929: PUSH
9930: LD_VAR 0 14
9934: ARRAY
9935: PPUSH
9936: LD_VAR 0 29
9940: PPUSH
9941: CALL_OW 115
9945: GO 9967
// ComAttackUnit ( offensiveUnits [ i ] , target2 ) ;
9947: LD_VAR 0 27
9951: PUSH
9952: LD_VAR 0 14
9956: ARRAY
9957: PPUSH
9958: LD_VAR 0 30
9962: PPUSH
9963: CALL_OW 115
// AddComAgressiveMove ( offensiveUnits [ i ] , GetX ( enemyUnits ) , GetY ( enemyUnits ) ) ;
9967: LD_VAR 0 27
9971: PUSH
9972: LD_VAR 0 14
9976: ARRAY
9977: PPUSH
9978: LD_VAR 0 50
9982: PPUSH
9983: CALL_OW 250
9987: PPUSH
9988: LD_VAR 0 50
9992: PPUSH
9993: CALL_OW 251
9997: PPUSH
9998: CALL_OW 174
// end ;
10002: GO 9760
10004: POP
10005: POP
// end ; end ;
10006: GO 9489
10008: POP
10009: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
10010: LD_ADDR_VAR 0 50
10014: PUSH
10015: LD_VAR 0 7
10019: PPUSH
10020: LD_INT 81
10022: PUSH
10023: LD_VAR 0 1
10027: PUSH
10028: EMPTY
10029: LIST
10030: LIST
10031: PPUSH
10032: CALL_OW 70
10036: PUSH
10037: FOR_IN
10038: IFFALSE 10266
// begin defenceUnits = [ ] ;
10040: LD_ADDR_VAR 0 31
10044: PUSH
10045: EMPTY
10046: ST_TO_ADDR
// for i := 1 to personel do
10047: LD_ADDR_VAR 0 14
10051: PUSH
10052: DOUBLE
10053: LD_INT 1
10055: DEC
10056: ST_TO_ADDR
10057: LD_VAR 0 19
10061: PUSH
10062: FOR_TO
10063: IFFALSE 10110
// if GetTag ( personel [ i ] ) = 3 then
10065: LD_VAR 0 19
10069: PUSH
10070: LD_VAR 0 14
10074: ARRAY
10075: PPUSH
10076: CALL_OW 110
10080: PUSH
10081: LD_INT 3
10083: EQUAL
10084: IFFALSE 10108
// defenceUnits = defenceUnits ^ personel [ i ] ;
10086: LD_ADDR_VAR 0 31
10090: PUSH
10091: LD_VAR 0 31
10095: PUSH
10096: LD_VAR 0 19
10100: PUSH
10101: LD_VAR 0 14
10105: ARRAY
10106: ADD
10107: ST_TO_ADDR
10108: GO 10062
10110: POP
10111: POP
// for i := 1 to vehicles do
10112: LD_ADDR_VAR 0 14
10116: PUSH
10117: DOUBLE
10118: LD_INT 1
10120: DEC
10121: ST_TO_ADDR
10122: LD_VAR 0 25
10126: PUSH
10127: FOR_TO
10128: IFFALSE 10183
// if GetTag ( vehicles [ i ] [ 1 ] ) = 3 then
10130: LD_VAR 0 25
10134: PUSH
10135: LD_VAR 0 14
10139: ARRAY
10140: PUSH
10141: LD_INT 1
10143: ARRAY
10144: PPUSH
10145: CALL_OW 110
10149: PUSH
10150: LD_INT 3
10152: EQUAL
10153: IFFALSE 10181
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
10155: LD_ADDR_VAR 0 31
10159: PUSH
10160: LD_VAR 0 31
10164: PUSH
10165: LD_VAR 0 25
10169: PUSH
10170: LD_VAR 0 14
10174: ARRAY
10175: PUSH
10176: LD_INT 1
10178: ARRAY
10179: ADD
10180: ST_TO_ADDR
10181: GO 10127
10183: POP
10184: POP
// ComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
10185: LD_VAR 0 31
10189: PPUSH
10190: LD_INT 3
10192: PUSH
10193: LD_INT 60
10195: PUSH
10196: EMPTY
10197: LIST
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: PPUSH
10203: CALL_OW 72
10207: PPUSH
10208: LD_VAR 0 50
10212: PPUSH
10213: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , GetX ( enemyUnits ) , GetY ( enemyUnits ) ) ;
10217: LD_VAR 0 31
10221: PPUSH
10222: LD_INT 3
10224: PUSH
10225: LD_INT 60
10227: PUSH
10228: EMPTY
10229: LIST
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: PPUSH
10235: CALL_OW 72
10239: PPUSH
10240: LD_VAR 0 50
10244: PPUSH
10245: CALL_OW 250
10249: PPUSH
10250: LD_VAR 0 50
10254: PPUSH
10255: CALL_OW 251
10259: PPUSH
10260: CALL_OW 174
// end ;
10264: GO 10037
10266: POP
10267: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
10268: LD_ADDR_VAR 0 45
10272: PUSH
10273: LD_INT 22
10275: PUSH
10276: LD_VAR 0 1
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: PUSH
10285: LD_INT 2
10287: PUSH
10288: LD_INT 30
10290: PUSH
10291: LD_INT 31
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: LD_INT 30
10300: PUSH
10301: LD_INT 32
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: PUSH
10308: LD_INT 30
10310: PUSH
10311: LD_INT 33
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: LD_INT 30
10320: PUSH
10321: LD_INT 4
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: LD_INT 30
10330: PUSH
10331: LD_INT 5
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: PPUSH
10350: CALL_OW 69
10354: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
10355: LD_ADDR_VAR 0 46
10359: PUSH
10360: LD_INT 81
10362: PUSH
10363: LD_VAR 0 1
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: PUSH
10372: LD_INT 21
10374: PUSH
10375: LD_INT 3
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PUSH
10382: LD_INT 58
10384: PUSH
10385: EMPTY
10386: LIST
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL_OW 69
10397: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
10398: LD_VAR 0 45
10402: PUSH
10403: LD_VAR 0 46
10407: AND
10408: IFFALSE 10478
// for i in attackBuildings do
10410: LD_ADDR_VAR 0 14
10414: PUSH
10415: LD_VAR 0 45
10419: PUSH
10420: FOR_IN
10421: IFFALSE 10476
// for j in enemyBuildings do
10423: LD_ADDR_VAR 0 15
10427: PUSH
10428: LD_VAR 0 46
10432: PUSH
10433: FOR_IN
10434: IFFALSE 10472
// if GetDistUnits ( i , j ) < 12 then
10436: LD_VAR 0 14
10440: PPUSH
10441: LD_VAR 0 15
10445: PPUSH
10446: CALL_OW 296
10450: PUSH
10451: LD_INT 12
10453: LESS
10454: IFFALSE 10470
// ComAttackUnit ( i , j ) ;
10456: LD_VAR 0 14
10460: PPUSH
10461: LD_VAR 0 15
10465: PPUSH
10466: CALL_OW 115
10470: GO 10433
10472: POP
10473: POP
10474: GO 10420
10476: POP
10477: POP
// if canRebuild then
10478: LD_VAR 0 12
10482: IFFALSE 11151
// begin tmp = false ;
10484: LD_ADDR_VAR 0 16
10488: PUSH
10489: LD_INT 0
10491: ST_TO_ADDR
// unit = false ;
10492: LD_ADDR_VAR 0 18
10496: PUSH
10497: LD_INT 0
10499: ST_TO_ADDR
// for destroyedBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 250 ] ] ] ) do
10500: LD_ADDR_VAR 0 36
10504: PUSH
10505: LD_VAR 0 4
10509: PPUSH
10510: LD_INT 22
10512: PUSH
10513: LD_VAR 0 1
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: LD_INT 21
10524: PUSH
10525: LD_INT 3
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PUSH
10532: LD_INT 3
10534: PUSH
10535: LD_INT 24
10537: PUSH
10538: LD_INT 250
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: LIST
10553: PPUSH
10554: CALL_OW 70
10558: PUSH
10559: FOR_IN
10560: IFFALSE 10662
// begin unit = destroyedBuilding ;
10562: LD_ADDR_VAR 0 18
10566: PUSH
10567: LD_VAR 0 36
10571: ST_TO_ADDR
// for i := 1 to destroyedBuildings / 4 do
10572: LD_ADDR_VAR 0 14
10576: PUSH
10577: DOUBLE
10578: LD_INT 1
10580: DEC
10581: ST_TO_ADDR
10582: LD_VAR 0 35
10586: PUSH
10587: LD_INT 4
10589: DIVREAL
10590: PUSH
10591: FOR_TO
10592: IFFALSE 10658
// if destroyedBuildings [ i + 1 ] = GetX ( destroyedBuilding ) and destroyedBuildings [ i + 2 ] = GetY ( destroyedBuilding ) then
10594: LD_VAR 0 35
10598: PUSH
10599: LD_VAR 0 14
10603: PUSH
10604: LD_INT 1
10606: PLUS
10607: ARRAY
10608: PUSH
10609: LD_VAR 0 36
10613: PPUSH
10614: CALL_OW 250
10618: EQUAL
10619: PUSH
10620: LD_VAR 0 35
10624: PUSH
10625: LD_VAR 0 14
10629: PUSH
10630: LD_INT 2
10632: PLUS
10633: ARRAY
10634: PUSH
10635: LD_VAR 0 36
10639: PPUSH
10640: CALL_OW 251
10644: EQUAL
10645: AND
10646: IFFALSE 10656
// tmp = true ;
10648: LD_ADDR_VAR 0 16
10652: PUSH
10653: LD_INT 1
10655: ST_TO_ADDR
10656: GO 10591
10658: POP
10659: POP
// end ;
10660: GO 10559
10662: POP
10663: POP
// if not tmp and unit then
10664: LD_VAR 0 16
10668: NOT
10669: PUSH
10670: LD_VAR 0 18
10674: AND
10675: IFFALSE 10935
// begin if GetBType ( unit ) = 1 then
10677: LD_VAR 0 18
10681: PPUSH
10682: CALL_OW 266
10686: PUSH
10687: LD_INT 1
10689: EQUAL
10690: IFFALSE 10744
// destroyedBuildings = destroyedBuildings ^ [ 0 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
10692: LD_ADDR_VAR 0 35
10696: PUSH
10697: LD_VAR 0 35
10701: PUSH
10702: LD_INT 0
10704: PUSH
10705: LD_VAR 0 18
10709: PPUSH
10710: CALL_OW 250
10714: PUSH
10715: LD_VAR 0 18
10719: PPUSH
10720: CALL_OW 251
10724: PUSH
10725: LD_VAR 0 18
10729: PPUSH
10730: CALL_OW 254
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: ADD
10741: ST_TO_ADDR
10742: GO 10935
// if GetBType ( unit ) = 3 then
10744: LD_VAR 0 18
10748: PPUSH
10749: CALL_OW 266
10753: PUSH
10754: LD_INT 3
10756: EQUAL
10757: IFFALSE 10811
// destroyedBuildings = destroyedBuildings ^ [ 2 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
10759: LD_ADDR_VAR 0 35
10763: PUSH
10764: LD_VAR 0 35
10768: PUSH
10769: LD_INT 2
10771: PUSH
10772: LD_VAR 0 18
10776: PPUSH
10777: CALL_OW 250
10781: PUSH
10782: LD_VAR 0 18
10786: PPUSH
10787: CALL_OW 251
10791: PUSH
10792: LD_VAR 0 18
10796: PPUSH
10797: CALL_OW 254
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: ADD
10808: ST_TO_ADDR
10809: GO 10935
// if GetBType ( unit ) = 5 then
10811: LD_VAR 0 18
10815: PPUSH
10816: CALL_OW 266
10820: PUSH
10821: LD_INT 5
10823: EQUAL
10824: IFFALSE 10878
// destroyedBuildings = destroyedBuildings ^ [ 4 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
10826: LD_ADDR_VAR 0 35
10830: PUSH
10831: LD_VAR 0 35
10835: PUSH
10836: LD_INT 4
10838: PUSH
10839: LD_VAR 0 18
10843: PPUSH
10844: CALL_OW 250
10848: PUSH
10849: LD_VAR 0 18
10853: PPUSH
10854: CALL_OW 251
10858: PUSH
10859: LD_VAR 0 18
10863: PPUSH
10864: CALL_OW 254
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: ADD
10875: ST_TO_ADDR
10876: GO 10935
// destroyedBuildings = destroyedBuildings ^ [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ;
10878: LD_ADDR_VAR 0 35
10882: PUSH
10883: LD_VAR 0 35
10887: PUSH
10888: LD_VAR 0 18
10892: PPUSH
10893: CALL_OW 266
10897: PUSH
10898: LD_VAR 0 18
10902: PPUSH
10903: CALL_OW 250
10907: PUSH
10908: LD_VAR 0 18
10912: PPUSH
10913: CALL_OW 251
10917: PUSH
10918: LD_VAR 0 18
10922: PPUSH
10923: CALL_OW 254
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: ADD
10934: ST_TO_ADDR
// end ; for constructedBuilding in constructedBuildings do
10935: LD_ADDR_VAR 0 37
10939: PUSH
10940: LD_VAR 0 38
10944: PUSH
10945: FOR_IN
10946: IFFALSE 11149
// for i := 1 to destroyedBuildings / 4 do
10948: LD_ADDR_VAR 0 14
10952: PUSH
10953: DOUBLE
10954: LD_INT 1
10956: DEC
10957: ST_TO_ADDR
10958: LD_VAR 0 35
10962: PUSH
10963: LD_INT 4
10965: DIVREAL
10966: PUSH
10967: FOR_TO
10968: IFFALSE 11145
// if destroyedBuildings [ i + 1 ] = GetX ( constructedBuilding ) and destroyedBuildings [ i + 2 ] = GetY ( constructedBuilding ) and IsOK ( constructedBuilding ) then
10970: LD_VAR 0 35
10974: PUSH
10975: LD_VAR 0 14
10979: PUSH
10980: LD_INT 1
10982: PLUS
10983: ARRAY
10984: PUSH
10985: LD_VAR 0 37
10989: PPUSH
10990: CALL_OW 250
10994: EQUAL
10995: PUSH
10996: LD_VAR 0 35
11000: PUSH
11001: LD_VAR 0 14
11005: PUSH
11006: LD_INT 2
11008: PLUS
11009: ARRAY
11010: PUSH
11011: LD_VAR 0 37
11015: PPUSH
11016: CALL_OW 251
11020: EQUAL
11021: AND
11022: PUSH
11023: LD_VAR 0 37
11027: PPUSH
11028: CALL_OW 302
11032: AND
11033: IFFALSE 11143
// begin destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11035: LD_ADDR_VAR 0 35
11039: PUSH
11040: LD_VAR 0 35
11044: PPUSH
11045: LD_INT 1
11047: PPUSH
11048: CALL_OW 3
11052: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11053: LD_ADDR_VAR 0 35
11057: PUSH
11058: LD_VAR 0 35
11062: PPUSH
11063: LD_INT 1
11065: PPUSH
11066: CALL_OW 3
11070: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11071: LD_ADDR_VAR 0 35
11075: PUSH
11076: LD_VAR 0 35
11080: PPUSH
11081: LD_INT 1
11083: PPUSH
11084: CALL_OW 3
11088: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11089: LD_ADDR_VAR 0 35
11093: PUSH
11094: LD_VAR 0 35
11098: PPUSH
11099: LD_INT 1
11101: PPUSH
11102: CALL_OW 3
11106: ST_TO_ADDR
// if GetType ( constructedBuilding ) in [ b_bunker , b_turret ] then
11107: LD_VAR 0 37
11111: PPUSH
11112: CALL_OW 247
11116: PUSH
11117: LD_INT 32
11119: PUSH
11120: LD_INT 33
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: IN
11127: IFFALSE 11143
// AddComPlaceWeapon ( constructedBuilding , weapons ) ;
11129: LD_VAR 0 37
11133: PPUSH
11134: LD_VAR 0 32
11138: PPUSH
11139: CALL_OW 208
// end ;
11143: GO 10967
11145: POP
11146: POP
11147: GO 10945
11149: POP
11150: POP
// end ; wait ( 0 0$01 ) ;
11151: LD_INT 35
11153: PPUSH
11154: CALL_OW 67
// until not personel ;
11158: LD_VAR 0 19
11162: NOT
11163: IFFALSE 4856
// end ; end_of_file
11165: LD_VAR 0 13
11169: RET
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
11170: LD_INT 0
11172: PPUSH
11173: PPUSH
// if debugMode then
11174: LD_EXP 33
11178: IFFALSE 11195
// unit := NewCharacter ( ident ) ;
11180: LD_ADDR_VAR 0 5
11184: PUSH
11185: LD_VAR 0 1
11189: PPUSH
11190: CALL_OW 25
11194: ST_TO_ADDR
// if exist_mode and not debugMode then
11195: LD_VAR 0 2
11199: PUSH
11200: LD_EXP 33
11204: NOT
11205: AND
11206: IFFALSE 11231
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
11208: LD_ADDR_VAR 0 5
11212: PUSH
11213: LD_EXP 32
11217: PUSH
11218: LD_VAR 0 1
11222: STR
11223: PPUSH
11224: CALL_OW 34
11228: ST_TO_ADDR
11229: GO 11253
// if not debugMode then
11231: LD_EXP 33
11235: NOT
11236: IFFALSE 11253
// unit := NewCharacter ( ident ) ;
11238: LD_ADDR_VAR 0 5
11242: PUSH
11243: LD_VAR 0 1
11247: PPUSH
11248: CALL_OW 25
11252: ST_TO_ADDR
// if class then
11253: LD_VAR 0 3
11257: IFFALSE 11273
// SetClass ( unit , class ) ;
11259: LD_VAR 0 5
11263: PPUSH
11264: LD_VAR 0 3
11268: PPUSH
11269: CALL_OW 336
// result := unit ;
11273: LD_ADDR_VAR 0 4
11277: PUSH
11278: LD_VAR 0 5
11282: ST_TO_ADDR
// end ;
11283: LD_VAR 0 4
11287: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
11288: LD_INT 0
11290: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
11291: LD_VAR 0 1
11295: PPUSH
11296: CALL_OW 255
11300: PUSH
11301: LD_VAR 0 3
11305: EQUAL
11306: PUSH
11307: LD_VAR 0 1
11311: PPUSH
11312: CALL_OW 302
11316: AND
11317: IFFALSE 11339
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
11319: LD_VAR 0 1
11323: PPUSH
11324: LD_EXP 31
11328: PUSH
11329: LD_VAR 0 2
11333: STR
11334: PPUSH
11335: CALL_OW 38
// end ;
11339: LD_VAR 0 4
11343: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
11344: LD_INT 0
11346: PPUSH
11347: PPUSH
11348: PPUSH
// resultCharactersToSave = [ ] ;
11349: LD_ADDR_VAR 0 6
11353: PUSH
11354: EMPTY
11355: ST_TO_ADDR
// for unit in characters do
11356: LD_ADDR_VAR 0 5
11360: PUSH
11361: LD_VAR 0 1
11365: PUSH
11366: FOR_IN
11367: IFFALSE 11415
// if GetSide ( unit ) = side and IsOK ( unit ) then
11369: LD_VAR 0 5
11373: PPUSH
11374: CALL_OW 255
11378: PUSH
11379: LD_VAR 0 3
11383: EQUAL
11384: PUSH
11385: LD_VAR 0 5
11389: PPUSH
11390: CALL_OW 302
11394: AND
11395: IFFALSE 11413
// resultCharactersToSave = resultCharactersToSave ^ unit ;
11397: LD_ADDR_VAR 0 6
11401: PUSH
11402: LD_VAR 0 6
11406: PUSH
11407: LD_VAR 0 5
11411: ADD
11412: ST_TO_ADDR
11413: GO 11366
11415: POP
11416: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
11417: LD_VAR 0 6
11421: PPUSH
11422: LD_EXP 31
11426: PUSH
11427: LD_VAR 0 2
11431: STR
11432: PPUSH
11433: CALL_OW 38
// end ;
11437: LD_VAR 0 4
11441: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
11442: LD_INT 0
11444: PPUSH
11445: PPUSH
// for unit in units do
11446: LD_ADDR_VAR 0 5
11450: PUSH
11451: LD_VAR 0 1
11455: PUSH
11456: FOR_IN
11457: IFFALSE 11480
// PlaceUnitArea ( unit , area , spawnMode ) ;
11459: LD_VAR 0 5
11463: PPUSH
11464: LD_VAR 0 2
11468: PPUSH
11469: LD_VAR 0 3
11473: PPUSH
11474: CALL_OW 49
11478: GO 11456
11480: POP
11481: POP
// end ;
11482: LD_VAR 0 4
11486: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
11487: LD_INT 0
11489: PPUSH
11490: PPUSH
11491: PPUSH
11492: PPUSH
// units = characters ;
11493: LD_ADDR_VAR 0 9
11497: PUSH
11498: LD_VAR 0 1
11502: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod , Kirilenkova ] ;
11503: LD_ADDR_VAR 0 9
11507: PUSH
11508: LD_VAR 0 9
11512: PUSH
11513: LD_EXP 39
11517: PUSH
11518: LD_EXP 40
11522: PUSH
11523: LD_EXP 41
11527: PUSH
11528: LD_EXP 42
11532: PUSH
11533: LD_EXP 43
11537: PUSH
11538: LD_EXP 44
11542: PUSH
11543: LD_EXP 45
11547: PUSH
11548: LD_EXP 46
11552: PUSH
11553: LD_EXP 49
11557: PUSH
11558: LD_EXP 48
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: DIFF
11575: ST_TO_ADDR
// if not units and not canTalkHero then
11576: LD_VAR 0 9
11580: NOT
11581: PUSH
11582: LD_VAR 0 5
11586: NOT
11587: AND
11588: IFFALSE 11592
// exit ;
11590: GO 11765
// if not units then
11592: LD_VAR 0 9
11596: NOT
11597: IFFALSE 11618
// units = characters diff [ Burlak ] ;
11599: LD_ADDR_VAR 0 9
11603: PUSH
11604: LD_VAR 0 1
11608: PUSH
11609: LD_EXP 39
11613: PUSH
11614: EMPTY
11615: LIST
11616: DIFF
11617: ST_TO_ADDR
// if not units and canTalkHero then
11618: LD_VAR 0 9
11622: NOT
11623: PUSH
11624: LD_VAR 0 5
11628: AND
11629: IFFALSE 11633
// exit ;
11631: GO 11765
// speaker := units [ rand ( 1 , units ) ] ;
11633: LD_ADDR_VAR 0 8
11637: PUSH
11638: LD_VAR 0 9
11642: PUSH
11643: LD_INT 1
11645: PPUSH
11646: LD_VAR 0 9
11650: PPUSH
11651: CALL_OW 12
11655: ARRAY
11656: ST_TO_ADDR
// if radio then
11657: LD_VAR 0 4
11661: IFFALSE 11710
// begin if GetSex ( speaker ) = sex_male then
11663: LD_VAR 0 8
11667: PPUSH
11668: CALL_OW 258
11672: PUSH
11673: LD_INT 1
11675: EQUAL
11676: IFFALSE 11694
// SayRadio ( speaker , dialogMID ) else
11678: LD_VAR 0 8
11682: PPUSH
11683: LD_VAR 0 2
11687: PPUSH
11688: CALL_OW 94
11692: GO 11708
// SayRadio ( speaker , dialogFID ) ;
11694: LD_VAR 0 8
11698: PPUSH
11699: LD_VAR 0 3
11703: PPUSH
11704: CALL_OW 94
// end else
11708: GO 11755
// begin if GetSex ( speaker ) = sex_male then
11710: LD_VAR 0 8
11714: PPUSH
11715: CALL_OW 258
11719: PUSH
11720: LD_INT 1
11722: EQUAL
11723: IFFALSE 11741
// Say ( speaker , dialogMID ) else
11725: LD_VAR 0 8
11729: PPUSH
11730: LD_VAR 0 2
11734: PPUSH
11735: CALL_OW 88
11739: GO 11755
// Say ( speaker , dialogFID ) ;
11741: LD_VAR 0 8
11745: PPUSH
11746: LD_VAR 0 3
11750: PPUSH
11751: CALL_OW 88
// end ; result := speaker ;
11755: LD_ADDR_VAR 0 6
11759: PUSH
11760: LD_VAR 0 8
11764: ST_TO_ADDR
// end ;
11765: LD_VAR 0 6
11769: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
11770: LD_INT 0
11772: PPUSH
11773: PPUSH
// dir := GetDir ( bunker ) - 3 ;
11774: LD_ADDR_VAR 0 4
11778: PUSH
11779: LD_VAR 0 2
11783: PPUSH
11784: CALL_OW 254
11788: PUSH
11789: LD_INT 3
11791: MINUS
11792: ST_TO_ADDR
// if dir < 0 then
11793: LD_VAR 0 4
11797: PUSH
11798: LD_INT 0
11800: LESS
11801: IFFALSE 11817
// dir := 6 + dir ;
11803: LD_ADDR_VAR 0 4
11807: PUSH
11808: LD_INT 6
11810: PUSH
11811: LD_VAR 0 4
11815: PLUS
11816: ST_TO_ADDR
// SetDir ( un , dir ) ;
11817: LD_VAR 0 1
11821: PPUSH
11822: LD_VAR 0 4
11826: PPUSH
11827: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
11831: LD_VAR 0 1
11835: PPUSH
11836: LD_VAR 0 2
11840: PPUSH
11841: CALL_OW 52
// result = un ;
11845: LD_ADDR_VAR 0 3
11849: PUSH
11850: LD_VAR 0 1
11854: ST_TO_ADDR
// end ;
11855: LD_VAR 0 3
11859: RET
// export function AddComCaptureBuilding ( engs , building ) ; var eng ; begin
11860: LD_INT 0
11862: PPUSH
11863: PPUSH
// for eng in engs do
11864: LD_ADDR_VAR 0 4
11868: PUSH
11869: LD_VAR 0 1
11873: PUSH
11874: FOR_IN
11875: IFFALSE 11992
// if GetClass ( eng ) = class_engineer and IsOK ( eng ) and building and not GetSide ( building ) = GetSide ( eng ) then
11877: LD_VAR 0 4
11881: PPUSH
11882: CALL_OW 257
11886: PUSH
11887: LD_INT 2
11889: EQUAL
11890: PUSH
11891: LD_VAR 0 4
11895: PPUSH
11896: CALL_OW 302
11900: AND
11901: PUSH
11902: LD_VAR 0 2
11906: AND
11907: PUSH
11908: LD_VAR 0 2
11912: PPUSH
11913: CALL_OW 255
11917: PUSH
11918: LD_VAR 0 4
11922: PPUSH
11923: CALL_OW 255
11927: EQUAL
11928: NOT
11929: AND
11930: IFFALSE 11990
// AddTaskList ( eng , [ [ e , GetX ( building ) , GetY ( building ) , building , 0 , 0 , 0 ] ] ) end ;
11932: LD_VAR 0 4
11936: PPUSH
11937: LD_STRING e
11939: PUSH
11940: LD_VAR 0 2
11944: PPUSH
11945: CALL_OW 250
11949: PUSH
11950: LD_VAR 0 2
11954: PPUSH
11955: CALL_OW 251
11959: PUSH
11960: LD_VAR 0 2
11964: PUSH
11965: LD_INT 0
11967: PUSH
11968: LD_INT 0
11970: PUSH
11971: LD_INT 0
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: PUSH
11983: EMPTY
11984: LIST
11985: PPUSH
11986: CALL_OW 447
11990: GO 11874
11992: POP
11993: POP
11994: LD_VAR 0 3
11998: RET
// export function Delete2D ( tab , firstIndex , secondIndex ) ; var i , list , tabPom ; begin
11999: LD_INT 0
12001: PPUSH
12002: PPUSH
12003: PPUSH
12004: PPUSH
// tabPom := Delete ( tab [ firstIndex ] , secondIndex ) ;
12005: LD_ADDR_VAR 0 7
12009: PUSH
12010: LD_VAR 0 1
12014: PUSH
12015: LD_VAR 0 2
12019: ARRAY
12020: PPUSH
12021: LD_VAR 0 3
12025: PPUSH
12026: CALL_OW 3
12030: ST_TO_ADDR
// tab := Replace ( tab , firstIndex , tabPom ) ;
12031: LD_ADDR_VAR 0 1
12035: PUSH
12036: LD_VAR 0 1
12040: PPUSH
12041: LD_VAR 0 2
12045: PPUSH
12046: LD_VAR 0 7
12050: PPUSH
12051: CALL_OW 1
12055: ST_TO_ADDR
// result := tab ;
12056: LD_ADDR_VAR 0 4
12060: PUSH
12061: LD_VAR 0 1
12065: ST_TO_ADDR
// end ;
12066: LD_VAR 0 4
12070: RET
// export function Nef_PrepareBase ( base_dep , area , name , skill , sources , nation , personel ) ; var i , j , d , b , f , x , un , base , side , buildings , tmp ; begin
12071: LD_INT 0
12073: PPUSH
12074: PPUSH
12075: PPUSH
12076: PPUSH
12077: PPUSH
12078: PPUSH
12079: PPUSH
12080: PPUSH
12081: PPUSH
12082: PPUSH
12083: PPUSH
12084: PPUSH
// result := [ ] ;
12085: LD_ADDR_VAR 0 8
12089: PUSH
12090: EMPTY
12091: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12092: LD_VAR 0 1
12096: PPUSH
12097: CALL_OW 266
12101: PUSH
12102: LD_INT 0
12104: PUSH
12105: LD_INT 1
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: IN
12112: NOT
12113: IFFALSE 12117
// exit ;
12115: GO 13743
// if name then
12117: LD_VAR 0 3
12121: IFFALSE 12137
// SetBName ( base_dep , name ) ;
12123: LD_VAR 0 1
12127: PPUSH
12128: LD_VAR 0 3
12132: PPUSH
12133: CALL_OW 500
// base := GetBase ( base_dep ) ;
12137: LD_ADDR_VAR 0 16
12141: PUSH
12142: LD_VAR 0 1
12146: PPUSH
12147: CALL_OW 274
12151: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12152: LD_ADDR_VAR 0 17
12156: PUSH
12157: LD_VAR 0 1
12161: PPUSH
12162: CALL_OW 255
12166: ST_TO_ADDR
// if sources then
12167: LD_VAR 0 5
12171: IFFALSE 12218
// for i = 1 to 3 do
12173: LD_ADDR_VAR 0 9
12177: PUSH
12178: DOUBLE
12179: LD_INT 1
12181: DEC
12182: ST_TO_ADDR
12183: LD_INT 3
12185: PUSH
12186: FOR_TO
12187: IFFALSE 12216
// AddResourceType ( base , i , sources [ i ] ) ;
12189: LD_VAR 0 16
12193: PPUSH
12194: LD_VAR 0 9
12198: PPUSH
12199: LD_VAR 0 5
12203: PUSH
12204: LD_VAR 0 9
12208: ARRAY
12209: PPUSH
12210: CALL_OW 276
12214: GO 12186
12216: POP
12217: POP
// buildings := GetBaseBuildings ( base , area ) ;
12218: LD_ADDR_VAR 0 18
12222: PUSH
12223: LD_VAR 0 16
12227: PPUSH
12228: LD_VAR 0 2
12232: PPUSH
12233: CALL 45441 0 2
12237: ST_TO_ADDR
// InitHc ;
12238: CALL_OW 19
// InitUc ;
12242: CALL_OW 18
// uc_side := side ;
12246: LD_ADDR_OWVAR 20
12250: PUSH
12251: LD_VAR 0 17
12255: ST_TO_ADDR
// uc_nation := nation ;
12256: LD_ADDR_OWVAR 21
12260: PUSH
12261: LD_VAR 0 6
12265: ST_TO_ADDR
// if buildings then
12266: LD_VAR 0 18
12270: IFFALSE 13602
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12272: LD_ADDR_VAR 0 19
12276: PUSH
12277: LD_VAR 0 18
12281: PPUSH
12282: LD_INT 2
12284: PUSH
12285: LD_INT 30
12287: PUSH
12288: LD_INT 29
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PUSH
12295: LD_INT 30
12297: PUSH
12298: LD_INT 30
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: PUSH
12305: EMPTY
12306: LIST
12307: LIST
12308: LIST
12309: PPUSH
12310: CALL_OW 72
12314: ST_TO_ADDR
// if tmp then
12315: LD_VAR 0 19
12319: IFFALSE 12367
// for i in tmp do
12321: LD_ADDR_VAR 0 9
12325: PUSH
12326: LD_VAR 0 19
12330: PUSH
12331: FOR_IN
12332: IFFALSE 12365
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12334: LD_VAR 0 9
12338: PPUSH
12339: CALL_OW 250
12343: PPUSH
12344: LD_VAR 0 9
12348: PPUSH
12349: CALL_OW 251
12353: PPUSH
12354: LD_VAR 0 17
12358: PPUSH
12359: CALL_OW 441
12363: GO 12331
12365: POP
12366: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12367: LD_VAR 0 18
12371: PPUSH
12372: LD_INT 2
12374: PUSH
12375: LD_INT 30
12377: PUSH
12378: LD_INT 31
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: PUSH
12385: LD_INT 30
12387: PUSH
12388: LD_INT 32
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: PUSH
12395: LD_INT 30
12397: PUSH
12398: LD_INT 33
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: PPUSH
12411: CALL_OW 72
12415: IFFALSE 12514
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12417: LD_ADDR_VAR 0 9
12421: PUSH
12422: LD_VAR 0 18
12426: PPUSH
12427: LD_INT 2
12429: PUSH
12430: LD_INT 30
12432: PUSH
12433: LD_INT 31
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PUSH
12440: LD_INT 30
12442: PUSH
12443: LD_INT 32
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PUSH
12450: LD_INT 30
12452: PUSH
12453: LD_INT 33
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: PPUSH
12466: CALL_OW 72
12470: PUSH
12471: FOR_IN
12472: IFFALSE 12512
// begin if not GetBWeapon ( i ) then
12474: LD_VAR 0 9
12478: PPUSH
12479: CALL_OW 269
12483: NOT
12484: IFFALSE 12510
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12486: LD_VAR 0 9
12490: PPUSH
12491: LD_VAR 0 9
12495: PPUSH
12496: LD_VAR 0 2
12500: PPUSH
12501: CALL 47669 0 2
12505: PPUSH
12506: CALL_OW 431
// end ;
12510: GO 12471
12512: POP
12513: POP
// end ; for i = 1 to personel do
12514: LD_ADDR_VAR 0 9
12518: PUSH
12519: DOUBLE
12520: LD_INT 1
12522: DEC
12523: ST_TO_ADDR
12524: LD_VAR 0 7
12528: PUSH
12529: FOR_TO
12530: IFFALSE 13582
// begin if i > 4 then
12532: LD_VAR 0 9
12536: PUSH
12537: LD_INT 4
12539: GREATER
12540: IFFALSE 12544
// break ;
12542: GO 13582
// case i of 1 :
12544: LD_VAR 0 9
12548: PUSH
12549: LD_INT 1
12551: DOUBLE
12552: EQUAL
12553: IFTRUE 12557
12555: GO 12648
12557: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12558: LD_ADDR_VAR 0 13
12562: PUSH
12563: LD_VAR 0 18
12567: PPUSH
12568: LD_INT 22
12570: PUSH
12571: LD_VAR 0 17
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PUSH
12580: LD_INT 58
12582: PUSH
12583: EMPTY
12584: LIST
12585: PUSH
12586: LD_INT 2
12588: PUSH
12589: LD_INT 30
12591: PUSH
12592: LD_INT 31
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PUSH
12599: LD_INT 30
12601: PUSH
12602: LD_INT 32
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: LD_INT 30
12611: PUSH
12612: LD_INT 4
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: PUSH
12619: LD_INT 30
12621: PUSH
12622: LD_INT 5
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: LIST
12640: PPUSH
12641: CALL_OW 72
12645: ST_TO_ADDR
12646: GO 12870
12648: LD_INT 2
12650: DOUBLE
12651: EQUAL
12652: IFTRUE 12656
12654: GO 12718
12656: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12657: LD_ADDR_VAR 0 13
12661: PUSH
12662: LD_VAR 0 18
12666: PPUSH
12667: LD_INT 22
12669: PUSH
12670: LD_VAR 0 17
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PUSH
12679: LD_INT 2
12681: PUSH
12682: LD_INT 30
12684: PUSH
12685: LD_INT 0
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: PUSH
12692: LD_INT 30
12694: PUSH
12695: LD_INT 1
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: LIST
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: PPUSH
12711: CALL_OW 72
12715: ST_TO_ADDR
12716: GO 12870
12718: LD_INT 3
12720: DOUBLE
12721: EQUAL
12722: IFTRUE 12726
12724: GO 12788
12726: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12727: LD_ADDR_VAR 0 13
12731: PUSH
12732: LD_VAR 0 18
12736: PPUSH
12737: LD_INT 22
12739: PUSH
12740: LD_VAR 0 17
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: PUSH
12749: LD_INT 2
12751: PUSH
12752: LD_INT 30
12754: PUSH
12755: LD_INT 2
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: PUSH
12762: LD_INT 30
12764: PUSH
12765: LD_INT 3
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: LIST
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PPUSH
12781: CALL_OW 72
12785: ST_TO_ADDR
12786: GO 12870
12788: LD_INT 4
12790: DOUBLE
12791: EQUAL
12792: IFTRUE 12796
12794: GO 12869
12796: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12797: LD_ADDR_VAR 0 13
12801: PUSH
12802: LD_VAR 0 18
12806: PPUSH
12807: LD_INT 22
12809: PUSH
12810: LD_VAR 0 17
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PUSH
12819: LD_INT 2
12821: PUSH
12822: LD_INT 30
12824: PUSH
12825: LD_INT 6
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: PUSH
12832: LD_INT 30
12834: PUSH
12835: LD_INT 7
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PUSH
12842: LD_INT 30
12844: PUSH
12845: LD_INT 8
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: PPUSH
12862: CALL_OW 72
12866: ST_TO_ADDR
12867: GO 12870
12869: POP
// if i = 1 then
12870: LD_VAR 0 9
12874: PUSH
12875: LD_INT 1
12877: EQUAL
12878: IFFALSE 12996
// begin tmp := [ ] ;
12880: LD_ADDR_VAR 0 19
12884: PUSH
12885: EMPTY
12886: ST_TO_ADDR
// for j in f do
12887: LD_ADDR_VAR 0 10
12891: PUSH
12892: LD_VAR 0 13
12896: PUSH
12897: FOR_IN
12898: IFFALSE 12978
// if GetBType ( j ) in [ b_breastwork , b_bunker ] then
12900: LD_VAR 0 10
12904: PPUSH
12905: CALL_OW 266
12909: PUSH
12910: LD_INT 31
12912: PUSH
12913: LD_INT 32
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: IN
12920: IFFALSE 12947
// tmp := Insert ( tmp , 1 , j ) else
12922: LD_ADDR_VAR 0 19
12926: PUSH
12927: LD_VAR 0 19
12931: PPUSH
12932: LD_INT 1
12934: PPUSH
12935: LD_VAR 0 10
12939: PPUSH
12940: CALL_OW 2
12944: ST_TO_ADDR
12945: GO 12976
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12947: LD_ADDR_VAR 0 19
12951: PUSH
12952: LD_VAR 0 19
12956: PPUSH
12957: LD_VAR 0 19
12961: PUSH
12962: LD_INT 1
12964: PLUS
12965: PPUSH
12966: LD_VAR 0 10
12970: PPUSH
12971: CALL_OW 2
12975: ST_TO_ADDR
12976: GO 12897
12978: POP
12979: POP
// if tmp then
12980: LD_VAR 0 19
12984: IFFALSE 12996
// f := tmp ;
12986: LD_ADDR_VAR 0 13
12990: PUSH
12991: LD_VAR 0 19
12995: ST_TO_ADDR
// end ; x := personel [ i ] ;
12996: LD_ADDR_VAR 0 14
13000: PUSH
13001: LD_VAR 0 7
13005: PUSH
13006: LD_VAR 0 9
13010: ARRAY
13011: ST_TO_ADDR
// if x = - 1 then
13012: LD_VAR 0 14
13016: PUSH
13017: LD_INT 1
13019: NEG
13020: EQUAL
13021: IFFALSE 13215
// begin for j in f do
13023: LD_ADDR_VAR 0 10
13027: PUSH
13028: LD_VAR 0 13
13032: PUSH
13033: FOR_IN
13034: IFFALSE 13211
// repeat InitHc ;
13036: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13040: LD_VAR 0 10
13044: PPUSH
13045: CALL_OW 266
13049: PUSH
13050: LD_INT 5
13052: EQUAL
13053: IFFALSE 13108
// begin if UnitsInside ( j ) < 3 then
13055: LD_VAR 0 10
13059: PPUSH
13060: CALL_OW 313
13064: PUSH
13065: LD_INT 3
13067: LESS
13068: IFFALSE 13089
// PrepareHuman ( false , i , skill ) else
13070: LD_INT 0
13072: PPUSH
13073: LD_VAR 0 9
13077: PPUSH
13078: LD_VAR 0 4
13082: PPUSH
13083: CALL_OW 380
13087: GO 13106
// PrepareHuman ( false , i , skill ) ;
13089: LD_INT 0
13091: PPUSH
13092: LD_VAR 0 9
13096: PPUSH
13097: LD_VAR 0 4
13101: PPUSH
13102: CALL_OW 380
// end else
13106: GO 13125
// PrepareHuman ( false , i , skill ) ;
13108: LD_INT 0
13110: PPUSH
13111: LD_VAR 0 9
13115: PPUSH
13116: LD_VAR 0 4
13120: PPUSH
13121: CALL_OW 380
// un := CreateHuman ;
13125: LD_ADDR_VAR 0 15
13129: PUSH
13130: CALL_OW 44
13134: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13135: LD_ADDR_VAR 0 8
13139: PUSH
13140: LD_VAR 0 8
13144: PPUSH
13145: LD_INT 1
13147: PPUSH
13148: LD_VAR 0 15
13152: PPUSH
13153: CALL_OW 2
13157: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13158: LD_VAR 0 15
13162: PPUSH
13163: LD_VAR 0 10
13167: PPUSH
13168: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13172: LD_VAR 0 10
13176: PPUSH
13177: CALL_OW 313
13181: PUSH
13182: LD_INT 6
13184: EQUAL
13185: PUSH
13186: LD_VAR 0 10
13190: PPUSH
13191: CALL_OW 266
13195: PUSH
13196: LD_INT 32
13198: PUSH
13199: LD_INT 31
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: IN
13206: OR
13207: IFFALSE 13036
13209: GO 13033
13211: POP
13212: POP
// end else
13213: GO 13580
// for j = 1 to x do
13215: LD_ADDR_VAR 0 10
13219: PUSH
13220: DOUBLE
13221: LD_INT 1
13223: DEC
13224: ST_TO_ADDR
13225: LD_VAR 0 14
13229: PUSH
13230: FOR_TO
13231: IFFALSE 13578
// begin InitHc ;
13233: CALL_OW 19
// if not f then
13237: LD_VAR 0 13
13241: NOT
13242: IFFALSE 13331
// begin PrepareHuman ( false , i , skill ) ;
13244: LD_INT 0
13246: PPUSH
13247: LD_VAR 0 9
13251: PPUSH
13252: LD_VAR 0 4
13256: PPUSH
13257: CALL_OW 380
// un := CreateHuman ;
13261: LD_ADDR_VAR 0 15
13265: PUSH
13266: CALL_OW 44
13270: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13271: LD_ADDR_VAR 0 8
13275: PUSH
13276: LD_VAR 0 8
13280: PPUSH
13281: LD_INT 1
13283: PPUSH
13284: LD_VAR 0 15
13288: PPUSH
13289: CALL_OW 2
13293: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13294: LD_VAR 0 15
13298: PPUSH
13299: LD_VAR 0 1
13303: PPUSH
13304: CALL_OW 250
13308: PPUSH
13309: LD_VAR 0 1
13313: PPUSH
13314: CALL_OW 251
13318: PPUSH
13319: LD_INT 10
13321: PPUSH
13322: LD_INT 0
13324: PPUSH
13325: CALL_OW 50
// continue ;
13329: GO 13230
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13331: LD_VAR 0 13
13335: PUSH
13336: LD_INT 1
13338: ARRAY
13339: PPUSH
13340: CALL_OW 313
13344: PUSH
13345: LD_VAR 0 13
13349: PUSH
13350: LD_INT 1
13352: ARRAY
13353: PPUSH
13354: CALL_OW 266
13358: PUSH
13359: LD_INT 32
13361: PUSH
13362: LD_INT 31
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: IN
13369: AND
13370: PUSH
13371: LD_VAR 0 13
13375: PUSH
13376: LD_INT 1
13378: ARRAY
13379: PPUSH
13380: CALL_OW 313
13384: PUSH
13385: LD_INT 6
13387: EQUAL
13388: OR
13389: IFFALSE 13409
// f := Delete ( f , 1 ) ;
13391: LD_ADDR_VAR 0 13
13395: PUSH
13396: LD_VAR 0 13
13400: PPUSH
13401: LD_INT 1
13403: PPUSH
13404: CALL_OW 3
13408: ST_TO_ADDR
// if not f then
13409: LD_VAR 0 13
13413: NOT
13414: IFFALSE 13432
// begin x := x + 2 ;
13416: LD_ADDR_VAR 0 14
13420: PUSH
13421: LD_VAR 0 14
13425: PUSH
13426: LD_INT 2
13428: PLUS
13429: ST_TO_ADDR
// continue ;
13430: GO 13230
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13432: LD_VAR 0 13
13436: PUSH
13437: LD_INT 1
13439: ARRAY
13440: PPUSH
13441: CALL_OW 266
13445: PUSH
13446: LD_INT 5
13448: EQUAL
13449: IFFALSE 13508
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13451: LD_VAR 0 13
13455: PUSH
13456: LD_INT 1
13458: ARRAY
13459: PPUSH
13460: CALL_OW 313
13464: PUSH
13465: LD_INT 3
13467: LESS
13468: IFFALSE 13489
// PrepareHuman ( false , i , skill ) else
13470: LD_INT 0
13472: PPUSH
13473: LD_VAR 0 9
13477: PPUSH
13478: LD_VAR 0 4
13482: PPUSH
13483: CALL_OW 380
13487: GO 13506
// PrepareHuman ( false , i , skill ) ;
13489: LD_INT 0
13491: PPUSH
13492: LD_VAR 0 9
13496: PPUSH
13497: LD_VAR 0 4
13501: PPUSH
13502: CALL_OW 380
// end else
13506: GO 13525
// PrepareHuman ( false , i , skill ) ;
13508: LD_INT 0
13510: PPUSH
13511: LD_VAR 0 9
13515: PPUSH
13516: LD_VAR 0 4
13520: PPUSH
13521: CALL_OW 380
// un := CreateHuman ;
13525: LD_ADDR_VAR 0 15
13529: PUSH
13530: CALL_OW 44
13534: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13535: LD_ADDR_VAR 0 8
13539: PUSH
13540: LD_VAR 0 8
13544: PPUSH
13545: LD_INT 1
13547: PPUSH
13548: LD_VAR 0 15
13552: PPUSH
13553: CALL_OW 2
13557: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13558: LD_VAR 0 15
13562: PPUSH
13563: LD_VAR 0 13
13567: PUSH
13568: LD_INT 1
13570: ARRAY
13571: PPUSH
13572: CALL_OW 52
// end ;
13576: GO 13230
13578: POP
13579: POP
// end ;
13580: GO 12529
13582: POP
13583: POP
// result := result ^ buildings ;
13584: LD_ADDR_VAR 0 8
13588: PUSH
13589: LD_VAR 0 8
13593: PUSH
13594: LD_VAR 0 18
13598: ADD
13599: ST_TO_ADDR
// end else
13600: GO 13743
// begin for i = 1 to personel do
13602: LD_ADDR_VAR 0 9
13606: PUSH
13607: DOUBLE
13608: LD_INT 1
13610: DEC
13611: ST_TO_ADDR
13612: LD_VAR 0 7
13616: PUSH
13617: FOR_TO
13618: IFFALSE 13741
// begin if i > 4 then
13620: LD_VAR 0 9
13624: PUSH
13625: LD_INT 4
13627: GREATER
13628: IFFALSE 13632
// break ;
13630: GO 13741
// x := personel [ i ] ;
13632: LD_ADDR_VAR 0 14
13636: PUSH
13637: LD_VAR 0 7
13641: PUSH
13642: LD_VAR 0 9
13646: ARRAY
13647: ST_TO_ADDR
// if x = - 1 then
13648: LD_VAR 0 14
13652: PUSH
13653: LD_INT 1
13655: NEG
13656: EQUAL
13657: IFFALSE 13661
// continue ;
13659: GO 13617
// PrepareHuman ( false , i , skill ) ;
13661: LD_INT 0
13663: PPUSH
13664: LD_VAR 0 9
13668: PPUSH
13669: LD_VAR 0 4
13673: PPUSH
13674: CALL_OW 380
// un := CreateHuman ;
13678: LD_ADDR_VAR 0 15
13682: PUSH
13683: CALL_OW 44
13687: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13688: LD_VAR 0 15
13692: PPUSH
13693: LD_VAR 0 1
13697: PPUSH
13698: CALL_OW 250
13702: PPUSH
13703: LD_VAR 0 1
13707: PPUSH
13708: CALL_OW 251
13712: PPUSH
13713: LD_INT 10
13715: PPUSH
13716: LD_INT 0
13718: PPUSH
13719: CALL_OW 50
// result := result ^ un ;
13723: LD_ADDR_VAR 0 8
13727: PUSH
13728: LD_VAR 0 8
13732: PUSH
13733: LD_VAR 0 15
13737: ADD
13738: ST_TO_ADDR
// end ;
13739: GO 13617
13741: POP
13742: POP
// end ; end ;
13743: LD_VAR 0 8
13747: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
13748: LD_INT 0
13750: PPUSH
13751: PPUSH
13752: PPUSH
13753: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
13754: LD_ADDR_VAR 0 6
13758: PUSH
13759: LD_INT 34
13761: PUSH
13762: LD_INT 71
13764: PUSH
13765: LD_INT 70
13767: PUSH
13768: LD_INT 69
13770: PUSH
13771: LD_INT 39
13773: PUSH
13774: LD_INT 31
13776: PUSH
13777: LD_INT 14
13779: PUSH
13780: LD_INT 10
13782: PUSH
13783: LD_INT 40
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: ST_TO_ADDR
// resultWeapons = [ ] ;
13797: LD_ADDR_VAR 0 5
13801: PUSH
13802: EMPTY
13803: ST_TO_ADDR
// for i := 1 to weaponTechs do
13804: LD_ADDR_VAR 0 4
13808: PUSH
13809: DOUBLE
13810: LD_INT 1
13812: DEC
13813: ST_TO_ADDR
13814: LD_VAR 0 6
13818: PUSH
13819: FOR_TO
13820: IFFALSE 14007
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
13822: LD_VAR 0 6
13826: PUSH
13827: LD_VAR 0 4
13831: ARRAY
13832: PPUSH
13833: LD_VAR 0 2
13837: PPUSH
13838: CALL_OW 482
13842: PUSH
13843: LD_VAR 0 6
13847: PUSH
13848: LD_VAR 0 4
13852: ARRAY
13853: PPUSH
13854: LD_VAR 0 1
13858: PPUSH
13859: CALL_OW 321
13863: PUSH
13864: LD_INT 2
13866: EQUAL
13867: AND
13868: IFFALSE 14005
// case nation of nation_american :
13870: LD_VAR 0 2
13874: PUSH
13875: LD_INT 1
13877: DOUBLE
13878: EQUAL
13879: IFTRUE 13883
13881: GO 13918
13883: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
13884: LD_ADDR_VAR 0 5
13888: PUSH
13889: LD_VAR 0 5
13893: PUSH
13894: LD_VAR 0 6
13898: PUSH
13899: LD_VAR 0 4
13903: ARRAY
13904: PPUSH
13905: LD_VAR 0 2
13909: PPUSH
13910: CALL 14024 0 2
13914: ADD
13915: ST_TO_ADDR
13916: GO 14005
13918: LD_INT 2
13920: DOUBLE
13921: EQUAL
13922: IFTRUE 13926
13924: GO 13961
13926: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
13927: LD_ADDR_VAR 0 5
13931: PUSH
13932: LD_VAR 0 5
13936: PUSH
13937: LD_VAR 0 6
13941: PUSH
13942: LD_VAR 0 4
13946: ARRAY
13947: PPUSH
13948: LD_VAR 0 2
13952: PPUSH
13953: CALL 14024 0 2
13957: ADD
13958: ST_TO_ADDR
13959: GO 14005
13961: LD_INT 3
13963: DOUBLE
13964: EQUAL
13965: IFTRUE 13969
13967: GO 14004
13969: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
13970: LD_ADDR_VAR 0 5
13974: PUSH
13975: LD_VAR 0 5
13979: PUSH
13980: LD_VAR 0 6
13984: PUSH
13985: LD_VAR 0 4
13989: ARRAY
13990: PPUSH
13991: LD_VAR 0 2
13995: PPUSH
13996: CALL 14024 0 2
14000: ADD
14001: ST_TO_ADDR
14002: GO 14005
14004: POP
// end ;
14005: GO 13819
14007: POP
14008: POP
// result = resultWeapons ;
14009: LD_ADDR_VAR 0 3
14013: PUSH
14014: LD_VAR 0 5
14018: ST_TO_ADDR
// end ;
14019: LD_VAR 0 3
14023: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
14024: LD_INT 0
14026: PPUSH
// case tech of tech_AdvMet :
14027: LD_VAR 0 1
14031: PUSH
14032: LD_INT 34
14034: DOUBLE
14035: EQUAL
14036: IFTRUE 14040
14038: GO 14068
14040: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
14041: LD_ADDR_VAR 0 3
14045: PUSH
14046: LD_INT 6
14048: PUSH
14049: LD_STRING 
14051: PUSH
14052: LD_INT 46
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: LIST
14059: PUSH
14060: LD_VAR 0 2
14064: ARRAY
14065: ST_TO_ADDR
14066: GO 14357
14068: LD_INT 71
14070: DOUBLE
14071: EQUAL
14072: IFTRUE 14076
14074: GO 14104
14076: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
14077: LD_ADDR_VAR 0 3
14081: PUSH
14082: LD_STRING 
14084: PUSH
14085: LD_STRING 
14087: PUSH
14088: LD_INT 47
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: LIST
14095: PUSH
14096: LD_VAR 0 2
14100: ARRAY
14101: ST_TO_ADDR
14102: GO 14357
14104: LD_INT 70
14106: DOUBLE
14107: EQUAL
14108: IFTRUE 14112
14110: GO 14140
14112: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
14113: LD_ADDR_VAR 0 3
14117: PUSH
14118: LD_STRING 
14120: PUSH
14121: LD_INT 26
14123: PUSH
14124: LD_STRING 
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: LIST
14131: PUSH
14132: LD_VAR 0 2
14136: ARRAY
14137: ST_TO_ADDR
14138: GO 14357
14140: LD_INT 69
14142: DOUBLE
14143: EQUAL
14144: IFTRUE 14148
14146: GO 14176
14148: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
14149: LD_ADDR_VAR 0 3
14153: PUSH
14154: LD_INT 4
14156: PUSH
14157: LD_INT 25
14159: PUSH
14160: LD_INT 43
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: LIST
14167: PUSH
14168: LD_VAR 0 2
14172: ARRAY
14173: ST_TO_ADDR
14174: GO 14357
14176: LD_INT 39
14178: DOUBLE
14179: EQUAL
14180: IFTRUE 14184
14182: GO 14212
14184: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
14185: LD_ADDR_VAR 0 3
14189: PUSH
14190: LD_INT 5
14192: PUSH
14193: LD_INT 27
14195: PUSH
14196: LD_INT 44
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: LIST
14203: PUSH
14204: LD_VAR 0 2
14208: ARRAY
14209: ST_TO_ADDR
14210: GO 14357
14212: LD_INT 31
14214: DOUBLE
14215: EQUAL
14216: IFTRUE 14220
14218: GO 14248
14220: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
14221: LD_ADDR_VAR 0 3
14225: PUSH
14226: LD_STRING 
14228: PUSH
14229: LD_STRING 
14231: PUSH
14232: LD_INT 49
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: LIST
14239: PUSH
14240: LD_VAR 0 2
14244: ARRAY
14245: ST_TO_ADDR
14246: GO 14357
14248: LD_INT 14
14250: DOUBLE
14251: EQUAL
14252: IFTRUE 14256
14254: GO 14284
14256: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
14257: LD_ADDR_VAR 0 3
14261: PUSH
14262: LD_INT 10
14264: PUSH
14265: LD_STRING 
14267: PUSH
14268: LD_STRING 
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: LIST
14275: PUSH
14276: LD_VAR 0 2
14280: ARRAY
14281: ST_TO_ADDR
14282: GO 14357
14284: LD_INT 10
14286: DOUBLE
14287: EQUAL
14288: IFTRUE 14292
14290: GO 14320
14292: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
14293: LD_ADDR_VAR 0 3
14297: PUSH
14298: LD_INT 9
14300: PUSH
14301: LD_STRING 
14303: PUSH
14304: LD_STRING 
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: LIST
14311: PUSH
14312: LD_VAR 0 2
14316: ARRAY
14317: ST_TO_ADDR
14318: GO 14357
14320: LD_INT 40
14322: DOUBLE
14323: EQUAL
14324: IFTRUE 14328
14326: GO 14356
14328: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
14329: LD_ADDR_VAR 0 3
14333: PUSH
14334: LD_INT 7
14336: PUSH
14337: LD_INT 28
14339: PUSH
14340: LD_INT 45
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: LIST
14347: PUSH
14348: LD_VAR 0 2
14352: ARRAY
14353: ST_TO_ADDR
14354: GO 14357
14356: POP
// end ;
14357: LD_VAR 0 3
14361: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
14362: LD_INT 0
14364: PPUSH
14365: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
14366: LD_ADDR_VAR 0 2
14370: PUSH
14371: LD_VAR 0 1
14375: PPUSH
14376: LD_INT 1
14378: PPUSH
14379: CALL_OW 289
14383: PUSH
14384: LD_VAR 0 1
14388: PPUSH
14389: LD_INT 2
14391: PPUSH
14392: CALL_OW 289
14396: PUSH
14397: LD_VAR 0 1
14401: PPUSH
14402: LD_INT 3
14404: PPUSH
14405: CALL_OW 289
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: LIST
14414: ST_TO_ADDR
// end ;
14415: LD_VAR 0 2
14419: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
14420: LD_INT 0
14422: PPUSH
14423: PPUSH
// area = ListEnvironmentArea ( area ) ;
14424: LD_ADDR_VAR 0 2
14428: PUSH
14429: LD_VAR 0 2
14433: PPUSH
14434: CALL_OW 353
14438: ST_TO_ADDR
// if bulldozer > 0 then
14439: LD_VAR 0 1
14443: PUSH
14444: LD_INT 0
14446: GREATER
14447: IFFALSE 14558
// for i = area downto 1 do
14449: LD_ADDR_VAR 0 4
14453: PUSH
14454: DOUBLE
14455: LD_VAR 0 2
14459: INC
14460: ST_TO_ADDR
14461: LD_INT 1
14463: PUSH
14464: FOR_DOWNTO
14465: IFFALSE 14556
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
14467: LD_VAR 0 2
14471: PUSH
14472: LD_VAR 0 4
14476: ARRAY
14477: PUSH
14478: LD_INT 1
14480: ARRAY
14481: PPUSH
14482: LD_VAR 0 2
14486: PUSH
14487: LD_VAR 0 4
14491: ARRAY
14492: PUSH
14493: LD_INT 2
14495: ARRAY
14496: PPUSH
14497: CALL_OW 351
14501: IFFALSE 14554
// if not HasTask ( bulldozer ) then
14503: LD_VAR 0 1
14507: PPUSH
14508: CALL_OW 314
14512: NOT
14513: IFFALSE 14554
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
14515: LD_VAR 0 1
14519: PPUSH
14520: LD_VAR 0 2
14524: PUSH
14525: LD_VAR 0 4
14529: ARRAY
14530: PUSH
14531: LD_INT 1
14533: ARRAY
14534: PPUSH
14535: LD_VAR 0 2
14539: PUSH
14540: LD_VAR 0 4
14544: ARRAY
14545: PUSH
14546: LD_INT 2
14548: ARRAY
14549: PPUSH
14550: CALL_OW 171
14554: GO 14464
14556: POP
14557: POP
// end ;
14558: LD_VAR 0 3
14562: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
14563: LD_INT 0
14565: PPUSH
14566: PPUSH
14567: PPUSH
// uc_side := GetSide ( b ) ;
14568: LD_ADDR_OWVAR 20
14572: PUSH
14573: LD_VAR 0 2
14577: PPUSH
14578: CALL_OW 255
14582: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
14583: LD_ADDR_OWVAR 21
14587: PUSH
14588: LD_VAR 0 2
14592: PPUSH
14593: CALL_OW 248
14597: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
14598: LD_INT 0
14600: PPUSH
14601: LD_INT 1
14603: PPUSH
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 380
// un = CreateHuman ;
14613: LD_ADDR_VAR 0 4
14617: PUSH
14618: CALL_OW 44
14622: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
14623: LD_ADDR_VAR 0 5
14627: PUSH
14628: LD_VAR 0 2
14632: PPUSH
14633: CALL_OW 254
14637: PUSH
14638: LD_INT 3
14640: MINUS
14641: ST_TO_ADDR
// if dir < 0 then
14642: LD_VAR 0 5
14646: PUSH
14647: LD_INT 0
14649: LESS
14650: IFFALSE 14666
// dir := 6 + dir ;
14652: LD_ADDR_VAR 0 5
14656: PUSH
14657: LD_INT 6
14659: PUSH
14660: LD_VAR 0 5
14664: PLUS
14665: ST_TO_ADDR
// SetDir ( un , dir ) ;
14666: LD_VAR 0 4
14670: PPUSH
14671: LD_VAR 0 5
14675: PPUSH
14676: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
14680: LD_VAR 0 4
14684: PPUSH
14685: LD_VAR 0 2
14689: PPUSH
14690: CALL_OW 52
// result = un ;
14694: LD_ADDR_VAR 0 3
14698: PUSH
14699: LD_VAR 0 4
14703: ST_TO_ADDR
// end ;
14704: LD_VAR 0 3
14708: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others , max , test1 , test2 ; begin
14709: LD_INT 0
14711: PPUSH
14712: PPUSH
14713: PPUSH
14714: PPUSH
14715: PPUSH
14716: PPUSH
14717: PPUSH
14718: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Burlak , Vsevolod ] ;
14719: LD_ADDR_VAR 0 3
14723: PUSH
14724: LD_INT 22
14726: PUSH
14727: LD_INT 3
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: PUSH
14734: LD_INT 21
14736: PUSH
14737: LD_INT 1
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: PUSH
14744: LD_INT 23
14746: PUSH
14747: LD_INT 3
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: LIST
14758: PPUSH
14759: CALL_OW 69
14763: PUSH
14764: LD_EXP 39
14768: PUSH
14769: LD_EXP 49
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: DIFF
14778: ST_TO_ADDR
// charsToChoose = charsToChoose diff vsevolodTeam ;
14779: LD_ADDR_VAR 0 3
14783: PUSH
14784: LD_VAR 0 3
14788: PUSH
14789: LD_EXP 50
14793: DIFF
14794: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam diff Vsevolod ;
14795: LD_ADDR_EXP 50
14799: PUSH
14800: LD_EXP 50
14804: PUSH
14805: LD_EXP 49
14809: DIFF
14810: ST_TO_ADDR
// max = charsToChoose div 2 + charsToChoose mod 2 ;
14811: LD_ADDR_VAR 0 6
14815: PUSH
14816: LD_VAR 0 3
14820: PUSH
14821: LD_INT 2
14823: DIV
14824: PUSH
14825: LD_VAR 0 3
14829: PUSH
14830: LD_INT 2
14832: MOD
14833: PLUS
14834: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 0 , 3 , [ Burlak , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_not_hired ] ^ vsevolodTeam ^ [ sel_not_changeable , Vsevolod ] , [ class_soldier , class_mechanic , class_engineer , class_scientistic ] ) ;
14835: LD_ADDR_VAR 0 4
14839: PUSH
14840: LD_STRING text
14842: PPUSH
14843: LD_INT 0
14845: PPUSH
14846: LD_INT 3
14848: PPUSH
14849: LD_EXP 39
14853: PUSH
14854: LD_INT -3
14856: PUSH
14857: LD_INT -5
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: LIST
14864: PUSH
14865: LD_VAR 0 3
14869: ADD
14870: PUSH
14871: LD_INT -2
14873: PUSH
14874: EMPTY
14875: LIST
14876: ADD
14877: PUSH
14878: LD_EXP 50
14882: ADD
14883: PUSH
14884: LD_INT -4
14886: PUSH
14887: LD_EXP 49
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: ADD
14896: PPUSH
14897: LD_INT 1
14899: PUSH
14900: LD_INT 3
14902: PUSH
14903: LD_INT 2
14905: PUSH
14906: LD_INT 4
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: PPUSH
14915: CALL_OW 42
14919: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) , 6 ) ;
14920: LD_INT 22
14922: PUSH
14923: LD_INT 3
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PUSH
14930: LD_INT 21
14932: PUSH
14933: LD_INT 1
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: PUSH
14940: LD_INT 23
14942: PUSH
14943: LD_INT 3
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: LIST
14954: PPUSH
14955: CALL_OW 69
14959: PPUSH
14960: LD_INT 6
14962: PPUSH
14963: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
14967: LD_VAR 0 4
14971: PPUSH
14972: LD_INT 3
14974: PPUSH
14975: CALL_OW 235
// SetSide ( Burlak , 3 ) ;
14979: LD_EXP 39
14983: PPUSH
14984: LD_INT 3
14986: PPUSH
14987: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
14991: LD_ADDR_VAR 0 2
14995: PUSH
14996: LD_INT 22
14998: PUSH
14999: LD_INT 6
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PUSH
15006: LD_INT 21
15008: PUSH
15009: LD_INT 1
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: PPUSH
15020: CALL_OW 69
15024: PUSH
15025: FOR_IN
15026: IFFALSE 15059
// if IsInUnit ( i ) then
15028: LD_VAR 0 2
15032: PPUSH
15033: CALL_OW 310
15037: IFFALSE 15057
// begin ComExitVehicle ( i ) ;
15039: LD_VAR 0 2
15043: PPUSH
15044: CALL_OW 121
// ComExitBuilding ( i ) ;
15048: LD_VAR 0 2
15052: PPUSH
15053: CALL_OW 122
// end ;
15057: GO 15025
15059: POP
15060: POP
// if not Vsevolod in selectedPeople then
15061: LD_EXP 49
15065: PUSH
15066: LD_VAR 0 4
15070: IN
15071: NOT
15072: IFFALSE 15089
// ExtSaveCharacter ( Vsevolod , Vsevolod , 6 ) ;
15074: LD_EXP 49
15078: PPUSH
15079: LD_STRING Vsevolod
15081: PPUSH
15082: LD_INT 6
15084: PPUSH
15085: CALL 11288 0 3
// if not Karamazov in selectedPeople then
15089: LD_EXP 40
15093: PUSH
15094: LD_VAR 0 4
15098: IN
15099: NOT
15100: IFFALSE 15117
// ExtSaveCharacter ( Karamazov , Karamazov , 6 ) ;
15102: LD_EXP 40
15106: PPUSH
15107: LD_STRING Karamazov
15109: PPUSH
15110: LD_INT 6
15112: PPUSH
15113: CALL 11288 0 3
// if not Petrovova in selectedPeople then
15117: LD_EXP 41
15121: PUSH
15122: LD_VAR 0 4
15126: IN
15127: NOT
15128: IFFALSE 15145
// ExtSaveCharacter ( Petrovova , Petrovova , 6 ) ;
15130: LD_EXP 41
15134: PPUSH
15135: LD_STRING Petrovova
15137: PPUSH
15138: LD_INT 6
15140: PPUSH
15141: CALL 11288 0 3
// if not Gleb in selectedPeople then
15145: LD_EXP 42
15149: PUSH
15150: LD_VAR 0 4
15154: IN
15155: NOT
15156: IFFALSE 15173
// ExtSaveCharacter ( Gleb , Gleb , 6 ) ;
15158: LD_EXP 42
15162: PPUSH
15163: LD_STRING Gleb
15165: PPUSH
15166: LD_INT 6
15168: PPUSH
15169: CALL 11288 0 3
// if not Petrosyan in selectedPeople then
15173: LD_EXP 43
15177: PUSH
15178: LD_VAR 0 4
15182: IN
15183: NOT
15184: IFFALSE 15201
// ExtSaveCharacter ( Petrosyan , Petrosyan , 6 ) ;
15186: LD_EXP 43
15190: PPUSH
15191: LD_STRING Petrosyan
15193: PPUSH
15194: LD_INT 6
15196: PPUSH
15197: CALL 11288 0 3
// if not Titov in selectedPeople then
15201: LD_EXP 44
15205: PUSH
15206: LD_VAR 0 4
15210: IN
15211: NOT
15212: IFFALSE 15229
// ExtSaveCharacter ( Titov , Titov , 6 ) ;
15214: LD_EXP 44
15218: PPUSH
15219: LD_STRING Titov
15221: PPUSH
15222: LD_INT 6
15224: PPUSH
15225: CALL 11288 0 3
// if not Dolgov in selectedPeople then
15229: LD_EXP 45
15233: PUSH
15234: LD_VAR 0 4
15238: IN
15239: NOT
15240: IFFALSE 15257
// ExtSaveCharacter ( Dolgov , Dolgov , 6 ) ;
15242: LD_EXP 45
15246: PPUSH
15247: LD_STRING Dolgov
15249: PPUSH
15250: LD_INT 6
15252: PPUSH
15253: CALL 11288 0 3
// if not Lipshchin in selectedPeople then
15257: LD_EXP 46
15261: PUSH
15262: LD_VAR 0 4
15266: IN
15267: NOT
15268: IFFALSE 15285
// ExtSaveCharacter ( Lipshchin , Lipshchin , 6 ) ;
15270: LD_EXP 46
15274: PPUSH
15275: LD_STRING Lipshchin
15277: PPUSH
15278: LD_INT 6
15280: PPUSH
15281: CALL 11288 0 3
// others = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod ] ;
15285: LD_ADDR_VAR 0 5
15289: PUSH
15290: LD_INT 22
15292: PUSH
15293: LD_INT 6
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: PUSH
15300: LD_INT 21
15302: PUSH
15303: LD_INT 1
15305: PUSH
15306: EMPTY
15307: LIST
15308: LIST
15309: PUSH
15310: LD_INT 23
15312: PUSH
15313: LD_INT 3
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: LIST
15324: PPUSH
15325: CALL_OW 69
15329: PUSH
15330: LD_EXP 40
15334: PUSH
15335: LD_EXP 41
15339: PUSH
15340: LD_EXP 42
15344: PUSH
15345: LD_EXP 43
15349: PUSH
15350: LD_EXP 44
15354: PUSH
15355: LD_EXP 45
15359: PUSH
15360: LD_EXP 46
15364: PUSH
15365: LD_EXP 49
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: DIFF
15380: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_vsevolod , 6 ) ;
15381: LD_VAR 0 5
15385: PPUSH
15386: LD_STRING other_survivors_with_vsevolod
15388: PPUSH
15389: LD_INT 6
15391: PPUSH
15392: CALL 11344 0 3
// end ; end_of_file
15396: LD_VAR 0 1
15400: RET
// export function MissionIntro ; var i , ruEng , unit ; begin
15401: LD_INT 0
15403: PPUSH
15404: PPUSH
15405: PPUSH
15406: PPUSH
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) ;
15407: LD_EXP 39
15411: PPUSH
15412: CALL_OW 310
15416: PPUSH
15417: CALL_OW 87
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
15421: LD_ADDR_VAR 0 4
15425: PUSH
15426: LD_INT 22
15428: PUSH
15429: LD_INT 3
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: PUSH
15436: LD_INT 21
15438: PUSH
15439: LD_INT 2
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: PPUSH
15450: CALL_OW 69
15454: PUSH
15455: FOR_IN
15456: IFFALSE 15520
// begin if ( i mod 2 ) = 0 then
15458: LD_VAR 0 2
15462: PUSH
15463: LD_INT 2
15465: MOD
15466: PUSH
15467: LD_INT 0
15469: EQUAL
15470: IFFALSE 15489
// ComMoveXY ( unit , 150 , 212 ) else
15472: LD_VAR 0 4
15476: PPUSH
15477: LD_INT 150
15479: PPUSH
15480: LD_INT 212
15482: PPUSH
15483: CALL_OW 111
15487: GO 15504
// ComMoveXY ( unit , 157 , 205 ) ;
15489: LD_VAR 0 4
15493: PPUSH
15494: LD_INT 157
15496: PPUSH
15497: LD_INT 205
15499: PPUSH
15500: CALL_OW 111
// i = i + 1 ;
15504: LD_ADDR_VAR 0 2
15508: PUSH
15509: LD_VAR 0 2
15513: PUSH
15514: LD_INT 1
15516: PLUS
15517: ST_TO_ADDR
// end ;
15518: GO 15455
15520: POP
15521: POP
// if IsOK ( Karamazov ) then
15522: LD_EXP 40
15526: PPUSH
15527: CALL_OW 302
15531: IFFALSE 15545
// ruEng = Karamazov else
15533: LD_ADDR_VAR 0 3
15537: PUSH
15538: LD_EXP 40
15542: ST_TO_ADDR
15543: GO 15628
// if IsOK ( Lipshchin ) then
15545: LD_EXP 46
15549: PPUSH
15550: CALL_OW 302
15554: IFFALSE 15568
// ruEng = Lipshchin else
15556: LD_ADDR_VAR 0 3
15560: PUSH
15561: LD_EXP 46
15565: ST_TO_ADDR
15566: GO 15628
// ruEng = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_class , class_engineer ] ] ) [ 1 ] ;
15568: LD_ADDR_VAR 0 3
15572: PUSH
15573: LD_INT 22
15575: PUSH
15576: LD_INT 3
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PUSH
15583: LD_INT 21
15585: PUSH
15586: LD_INT 1
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: LD_INT 23
15595: PUSH
15596: LD_INT 3
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: PUSH
15603: LD_INT 25
15605: PUSH
15606: LD_INT 2
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: PPUSH
15619: CALL_OW 69
15623: PUSH
15624: LD_INT 1
15626: ARRAY
15627: ST_TO_ADDR
// repeat ComMoveXY ( IsInUnit ( ruEng ) , 148 , 214 ) ;
15628: LD_VAR 0 3
15632: PPUSH
15633: CALL_OW 310
15637: PPUSH
15638: LD_INT 148
15640: PPUSH
15641: LD_INT 214
15643: PPUSH
15644: CALL_OW 111
// wait ( 0 0$1 ) ;
15648: LD_INT 35
15650: PPUSH
15651: CALL_OW 67
// until GetDistUnitXY ( IsInUnit ( ruEng ) , 148 , 214 ) <= 2 ;
15655: LD_VAR 0 3
15659: PPUSH
15660: CALL_OW 310
15664: PPUSH
15665: LD_INT 148
15667: PPUSH
15668: LD_INT 214
15670: PPUSH
15671: CALL_OW 297
15675: PUSH
15676: LD_INT 2
15678: LESSEQUAL
15679: IFFALSE 15628
// ComExitVehicle ( ruEng ) ;
15681: LD_VAR 0 3
15685: PPUSH
15686: CALL_OW 121
// wait ( 0 0$1 ) ;
15690: LD_INT 35
15692: PPUSH
15693: CALL_OW 67
// AddComCaptureBuilding ( ruEng , rudepot ) ;
15697: LD_VAR 0 3
15701: PPUSH
15702: LD_INT 74
15704: PPUSH
15705: CALL 11860 0 2
// repeat wait ( 0 0$1 ) ;
15709: LD_INT 35
15711: PPUSH
15712: CALL_OW 67
// until GetSide ( rudepot ) = 3 ;
15716: LD_INT 74
15718: PPUSH
15719: CALL_OW 255
15723: PUSH
15724: LD_INT 3
15726: EQUAL
15727: IFFALSE 15709
// ComEnterUnit ( ruEng , rudepot ) ;
15729: LD_VAR 0 3
15733: PPUSH
15734: LD_INT 74
15736: PPUSH
15737: CALL_OW 120
// wait ( 0 0$2 ) ;
15741: LD_INT 70
15743: PPUSH
15744: CALL_OW 67
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
15748: LD_INT 22
15750: PUSH
15751: LD_INT 6
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: PPUSH
15758: CALL_OW 69
15762: PPUSH
15763: LD_INT 3
15765: PPUSH
15766: CALL_OW 235
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
15770: LD_ADDR_VAR 0 4
15774: PUSH
15775: LD_INT 22
15777: PUSH
15778: LD_INT 3
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: LD_INT 21
15787: PUSH
15788: LD_INT 1
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PPUSH
15799: CALL_OW 69
15803: PUSH
15804: FOR_IN
15805: IFFALSE 15838
// if GetType ( IsInUnit ( unit ) ) = unit_vehicle then
15807: LD_VAR 0 4
15811: PPUSH
15812: CALL_OW 310
15816: PPUSH
15817: CALL_OW 247
15821: PUSH
15822: LD_INT 2
15824: EQUAL
15825: IFFALSE 15836
// ComExitVehicle ( unit ) ;
15827: LD_VAR 0 4
15831: PPUSH
15832: CALL_OW 121
15836: GO 15804
15838: POP
15839: POP
// if ruEng = Karamazov then
15840: LD_VAR 0 3
15844: PUSH
15845: LD_EXP 40
15849: EQUAL
15850: IFFALSE 15866
// Say ( Karamazov , DStart-Kar-1 ) else
15852: LD_EXP 40
15856: PPUSH
15857: LD_STRING DStart-Kar-1
15859: PPUSH
15860: CALL_OW 88
15864: GO 15890
// if ruEng = Lipshchin then
15866: LD_VAR 0 3
15870: PUSH
15871: LD_EXP 46
15875: EQUAL
15876: IFFALSE 15890
// Say ( Lipshchin , DStart-Lip-1 ) ;
15878: LD_EXP 46
15882: PPUSH
15883: LD_STRING DStart-Lip-1
15885: PPUSH
15886: CALL_OW 88
// ComExitBuilding ( ruEng ) ;
15890: LD_VAR 0 3
15894: PPUSH
15895: CALL_OW 122
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 250 ] ] ] ) do
15899: LD_ADDR_VAR 0 4
15903: PUSH
15904: LD_INT 22
15906: PUSH
15907: LD_INT 3
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 21
15916: PUSH
15917: LD_INT 3
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: LD_INT 3
15926: PUSH
15927: LD_INT 24
15929: PUSH
15930: LD_INT 250
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: LIST
15945: PPUSH
15946: CALL_OW 69
15950: PUSH
15951: FOR_IN
15952: IFFALSE 16005
// AddComRepairBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , unit ) ;
15954: LD_INT 22
15956: PUSH
15957: LD_INT 3
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 21
15966: PUSH
15967: LD_INT 1
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 25
15976: PUSH
15977: LD_INT 2
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: LIST
15988: PPUSH
15989: CALL_OW 69
15993: PPUSH
15994: LD_VAR 0 4
15998: PPUSH
15999: CALL_OW 190
16003: GO 15951
16005: POP
16006: POP
// Say ( Burlak , DStart-Bur-1 ) ;
16007: LD_EXP 39
16011: PPUSH
16012: LD_STRING DStart-Bur-1
16014: PPUSH
16015: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-1 ) ;
16019: LD_EXP 47
16023: PPUSH
16024: LD_STRING DStart-Pla-1
16026: PPUSH
16027: CALL_OW 94
// Say ( Burlak , DStart-Bur-2 ) ;
16031: LD_EXP 39
16035: PPUSH
16036: LD_STRING DStart-Bur-2
16038: PPUSH
16039: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-2 ) ;
16043: LD_EXP 47
16047: PPUSH
16048: LD_STRING DStart-Pla-2
16050: PPUSH
16051: CALL_OW 94
// if IsOK ( Petrovova ) then
16055: LD_EXP 41
16059: PPUSH
16060: CALL_OW 302
16064: IFFALSE 16078
// Say ( Petrovova , DStart-Ptr-2 ) ;
16066: LD_EXP 41
16070: PPUSH
16071: LD_STRING DStart-Ptr-2
16073: PPUSH
16074: CALL_OW 88
// InGameOff ;
16078: CALL_OW 9
// ChangeMissionObjectives ( MStart ) ;
16082: LD_STRING MStart
16084: PPUSH
16085: CALL_OW 337
// SaveForQuickRestart ;
16089: CALL_OW 22
// wait ( 0 0$10 ) ;
16093: LD_INT 350
16095: PPUSH
16096: CALL_OW 67
// if IsOK ( Petrosyan ) then
16100: LD_EXP 43
16104: PPUSH
16105: CALL_OW 302
16109: IFFALSE 16125
// Say ( Petrosyan , DMatPrediction-Pty-1 ) else
16111: LD_EXP 43
16115: PPUSH
16116: LD_STRING DMatPrediction-Pty-1
16118: PPUSH
16119: CALL_OW 88
16123: GO 16148
// if IsOK ( Dolgov ) then
16125: LD_EXP 45
16129: PPUSH
16130: CALL_OW 302
16134: IFFALSE 16148
// Say ( Dolgov , DMatPrediction-Dol-1 ) ;
16136: LD_EXP 45
16140: PPUSH
16141: LD_STRING DMatPrediction-Dol-1
16143: PPUSH
16144: CALL_OW 88
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16148: LD_EXP 43
16152: PPUSH
16153: CALL_OW 302
16157: PUSH
16158: LD_EXP 45
16162: PPUSH
16163: CALL_OW 302
16167: OR
16168: IFFALSE 16182
// Say ( Burlak , DMatPrediction-Bur-1 ) ;
16170: LD_EXP 39
16174: PPUSH
16175: LD_STRING DMatPrediction-Bur-1
16177: PPUSH
16178: CALL_OW 88
// if IsOK ( Petrosyan ) then
16182: LD_EXP 43
16186: PPUSH
16187: CALL_OW 302
16191: IFFALSE 16207
// Say ( Petrosyan , DMatPrediction-Pty-2 ) else
16193: LD_EXP 43
16197: PPUSH
16198: LD_STRING DMatPrediction-Pty-2
16200: PPUSH
16201: CALL_OW 88
16205: GO 16230
// if IsOK ( Dolgov ) then
16207: LD_EXP 45
16211: PPUSH
16212: CALL_OW 302
16216: IFFALSE 16230
// Say ( Dolgov , DMatPrediction-Dol-2 ) ;
16218: LD_EXP 45
16222: PPUSH
16223: LD_STRING DMatPrediction-Dol-2
16225: PPUSH
16226: CALL_OW 88
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16230: LD_EXP 43
16234: PPUSH
16235: CALL_OW 302
16239: PUSH
16240: LD_EXP 45
16244: PPUSH
16245: CALL_OW 302
16249: OR
16250: IFFALSE 16264
// Say ( Burlak , DMatPrediction-Bur-2 ) ;
16252: LD_EXP 39
16256: PPUSH
16257: LD_STRING DMatPrediction-Bur-2
16259: PPUSH
16260: CALL_OW 88
// if IsOK ( Petrosyan ) then
16264: LD_EXP 43
16268: PPUSH
16269: CALL_OW 302
16273: IFFALSE 16289
// Say ( Petrosyan , DMatPrediction-Pty-3 ) else
16275: LD_EXP 43
16279: PPUSH
16280: LD_STRING DMatPrediction-Pty-3
16282: PPUSH
16283: CALL_OW 88
16287: GO 16312
// if IsOK ( Dolgov ) then
16289: LD_EXP 45
16293: PPUSH
16294: CALL_OW 302
16298: IFFALSE 16312
// Say ( Dolgov , DMatPrediction-Dol-3 ) ;
16300: LD_EXP 45
16304: PPUSH
16305: LD_STRING DMatPrediction-Dol-3
16307: PPUSH
16308: CALL_OW 88
// ChangeMissionObjectives ( MPred ) ;
16312: LD_STRING MPred
16314: PPUSH
16315: CALL_OW 337
// end ;
16319: LD_VAR 0 1
16323: RET
// every 0 0$1 trigger not UnitFilter ( ovsyenkoBase , [ f_type , unit_human ] ) do
16324: LD_EXP 52
16328: PPUSH
16329: LD_INT 21
16331: PUSH
16332: LD_INT 1
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PPUSH
16339: CALL_OW 72
16343: NOT
16344: IFFALSE 16566
16346: GO 16348
16348: DISABLE
// begin DialogueOn ;
16349: CALL_OW 6
// Say ( Burlak , DOvsyenkoTaken-Bur-1 ) ;
16353: LD_EXP 39
16357: PPUSH
16358: LD_STRING DOvsyenkoTaken-Bur-1
16360: PPUSH
16361: CALL_OW 88
// SayRadio ( Platonov , DOvsyenkoTaken-Pla-1 ) ;
16365: LD_EXP 47
16369: PPUSH
16370: LD_STRING DOvsyenkoTaken-Pla-1
16372: PPUSH
16373: CALL_OW 94
// if IsOK ( Karamazov ) then
16377: LD_EXP 40
16381: PPUSH
16382: CALL_OW 302
16386: IFFALSE 16400
// Say ( Karamazov , DOvsyenkoTaken-Kar-1 ) ;
16388: LD_EXP 40
16392: PPUSH
16393: LD_STRING DOvsyenkoTaken-Kar-1
16395: PPUSH
16396: CALL_OW 88
// if IsOK ( Titov ) then
16400: LD_EXP 44
16404: PPUSH
16405: CALL_OW 302
16409: IFFALSE 16423
// Say ( Titov , DOvsyenkoTaken-Tit-1 ) ;
16411: LD_EXP 44
16415: PPUSH
16416: LD_STRING DOvsyenkoTaken-Tit-1
16418: PPUSH
16419: CALL_OW 88
// if IsOK ( Lipshchin ) and ( IsOK ( Karamazov ) or IsOK ( Titov ) ) then
16423: LD_EXP 46
16427: PPUSH
16428: CALL_OW 302
16432: PUSH
16433: LD_EXP 40
16437: PPUSH
16438: CALL_OW 302
16442: PUSH
16443: LD_EXP 44
16447: PPUSH
16448: CALL_OW 302
16452: OR
16453: AND
16454: IFFALSE 16491
// begin Say ( Lipshchin , DOvsyenkoTaken-Lip-1 ) ;
16456: LD_EXP 46
16460: PPUSH
16461: LD_STRING DOvsyenkoTaken-Lip-1
16463: PPUSH
16464: CALL_OW 88
// if IsOK ( Gleb ) then
16468: LD_EXP 42
16472: PPUSH
16473: CALL_OW 302
16477: IFFALSE 16491
// Say ( Gleb , DOvsyenkoTaken-Glb-1 ) ;
16479: LD_EXP 42
16483: PPUSH
16484: LD_STRING DOvsyenkoTaken-Glb-1
16486: PPUSH
16487: CALL_OW 88
// end ; DialogueOff ;
16491: CALL_OW 7
// ChangeMissionObjectives ( MOutCapture ) ;
16495: LD_STRING MOutCapture
16497: PPUSH
16498: CALL_OW 337
// ChangeMissionObjectives ( MAddMine ) ;
16502: LD_STRING MAddMine
16504: PPUSH
16505: CALL_OW 337
// claimOvsyenkoBase = true ;
16509: LD_ADDR_EXP 15
16513: PUSH
16514: LD_INT 1
16516: ST_TO_ADDR
// wait ( 1 1$10 ) ;
16517: LD_INT 2450
16519: PPUSH
16520: CALL_OW 67
// InitAIManager ( 1 , 1 , headAmBase , HeadAmericanBaseArea , HeadAmericanHealArea , false , HeadAmericanBaseArea , 6 , 2 , 4 , true , true ) ;
16524: LD_INT 1
16526: PPUSH
16527: LD_INT 1
16529: PPUSH
16530: LD_EXP 54
16534: PPUSH
16535: LD_INT 5
16537: PPUSH
16538: LD_INT 9
16540: PPUSH
16541: LD_INT 0
16543: PPUSH
16544: LD_INT 5
16546: PPUSH
16547: LD_INT 6
16549: PPUSH
16550: LD_INT 2
16552: PPUSH
16553: LD_INT 4
16555: PPUSH
16556: LD_INT 1
16558: PPUSH
16559: LD_INT 1
16561: PPUSH
16562: CALL 4633 0 12
// end ;
16566: END
// export function Dial_SibTechs ; begin
16567: LD_INT 0
16569: PPUSH
// dial_SibTechsBlocker = true ;
16570: LD_ADDR_EXP 9
16574: PUSH
16575: LD_INT 1
16577: ST_TO_ADDR
// DialogueOn ;
16578: CALL_OW 6
// if IsOK ( Petrosyan ) then
16582: LD_EXP 43
16586: PPUSH
16587: CALL_OW 302
16591: IFFALSE 16607
// Say ( Petrosyan , DSibResearch-Pty-1 ) else
16593: LD_EXP 43
16597: PPUSH
16598: LD_STRING DSibResearch-Pty-1
16600: PPUSH
16601: CALL_OW 88
16605: GO 16630
// if IsOK ( Dolgov ) then
16607: LD_EXP 45
16611: PPUSH
16612: CALL_OW 302
16616: IFFALSE 16630
// Say ( Dolgov , DSibResearch-Dol-1 ) ;
16618: LD_EXP 45
16622: PPUSH
16623: LD_STRING DSibResearch-Dol-1
16625: PPUSH
16626: CALL_OW 88
// Say ( Burlak , DSibResearch-Bur-1 ) ;
16630: LD_EXP 39
16634: PPUSH
16635: LD_STRING DSibResearch-Bur-1
16637: PPUSH
16638: CALL_OW 88
// SayRadio ( Platonov , DSibResearch-Pla-1 ) ;
16642: LD_EXP 47
16646: PPUSH
16647: LD_STRING DSibResearch-Pla-1
16649: PPUSH
16650: CALL_OW 94
// DialogueOff ;
16654: CALL_OW 7
// ChangeMissionObjectives ( MResearch ) ;
16658: LD_STRING MResearch
16660: PPUSH
16661: CALL_OW 337
// SetRestrict ( b_ext_siberium , 3 , true ) ;
16665: LD_INT 21
16667: PPUSH
16668: LD_INT 3
16670: PPUSH
16671: LD_INT 1
16673: PPUSH
16674: CALL_OW 324
// SetRestrict ( b_siberite_power , 3 , true ) ;
16678: LD_INT 28
16680: PPUSH
16681: LD_INT 3
16683: PPUSH
16684: LD_INT 1
16686: PPUSH
16687: CALL_OW 324
// SetRestrict ( b_lab_siberium , 3 , true ) ;
16691: LD_INT 11
16693: PPUSH
16694: LD_INT 3
16696: PPUSH
16697: LD_INT 1
16699: PPUSH
16700: CALL_OW 324
// SetRestrict ( b_lab_spacetime , 3 , true ) ;
16704: LD_INT 14
16706: PPUSH
16707: LD_INT 3
16709: PPUSH
16710: LD_INT 1
16712: PPUSH
16713: CALL_OW 324
// end ;
16717: LD_VAR 0 1
16721: RET
// export function Dial_ResearchMatPredictions ; begin
16722: LD_INT 0
16724: PPUSH
// ChangeMissionObjectives ( MOutResearch ) ;
16725: LD_STRING MOutResearch
16727: PPUSH
16728: CALL_OW 337
// DialogueOn ;
16732: CALL_OW 6
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16736: LD_EXP 43
16740: PPUSH
16741: CALL_OW 302
16745: PUSH
16746: LD_EXP 45
16750: PPUSH
16751: CALL_OW 302
16755: OR
16756: IFFALSE 16878
// begin if IsOK ( Petrosyan ) then
16758: LD_EXP 43
16762: PPUSH
16763: CALL_OW 302
16767: IFFALSE 16783
// Say ( Petrosyan , DNoMaterial-Pty-1 ) else
16769: LD_EXP 43
16773: PPUSH
16774: LD_STRING DNoMaterial-Pty-1
16776: PPUSH
16777: CALL_OW 88
16781: GO 16806
// if IsOK ( Dolgov ) then
16783: LD_EXP 45
16787: PPUSH
16788: CALL_OW 302
16792: IFFALSE 16806
// Say ( Dolgov , DNoMaterial-Dol-1 ) ;
16794: LD_EXP 45
16798: PPUSH
16799: LD_STRING DNoMaterial-Dol-1
16801: PPUSH
16802: CALL_OW 88
// Say ( Burlak , DNoMaterial-Bur-1 ) ;
16806: LD_EXP 39
16810: PPUSH
16811: LD_STRING DNoMaterial-Bur-1
16813: PPUSH
16814: CALL_OW 88
// if IsOK ( Petrosyan ) then
16818: LD_EXP 43
16822: PPUSH
16823: CALL_OW 302
16827: IFFALSE 16843
// Say ( Petrosyan , DNoMaterial-Pty-2 ) else
16829: LD_EXP 43
16833: PPUSH
16834: LD_STRING DNoMaterial-Pty-2
16836: PPUSH
16837: CALL_OW 88
16841: GO 16866
// if IsOK ( Dolgov ) then
16843: LD_EXP 45
16847: PPUSH
16848: CALL_OW 302
16852: IFFALSE 16866
// Say ( Dolgov , DNoMaterial-Dol-2 ) ;
16854: LD_EXP 45
16858: PPUSH
16859: LD_STRING DNoMaterial-Dol-2
16861: PPUSH
16862: CALL_OW 88
// Say ( Burlak , DNoMaterial-Bur-2 ) ;
16866: LD_EXP 39
16870: PPUSH
16871: LD_STRING DNoMaterial-Bur-2
16873: PPUSH
16874: CALL_OW 88
// end ; DialogueOff ;
16878: CALL_OW 7
// end ;
16882: LD_VAR 0 1
16886: RET
// every 0 0$1 trigger not dial_SibTechsBlocker and ( GetResourceVisibility ( 116 , 123 , 3 ) or GetResourceVisibility ( 72 , 86 , 3 ) ) do
16887: LD_EXP 9
16891: NOT
16892: PUSH
16893: LD_INT 116
16895: PPUSH
16896: LD_INT 123
16898: PPUSH
16899: LD_INT 3
16901: PPUSH
16902: CALL_OW 440
16906: PUSH
16907: LD_INT 72
16909: PPUSH
16910: LD_INT 86
16912: PPUSH
16913: LD_INT 3
16915: PPUSH
16916: CALL_OW 440
16920: OR
16921: AND
16922: IFFALSE 16931
16924: GO 16926
16926: DISABLE
// Dial_SibTechs ;
16927: CALL 16567 0 0
16931: END
// every 5 5$0 trigger claimOvsyenkoBase do
16932: LD_EXP 15
16936: IFFALSE 16960
16938: GO 16940
16940: DISABLE
// begin PrepareVsevolod ;
16941: CALL 2241 0 0
// ComAgressiveMove ( vsevolodTeam , 61 , 45 ) ;
16945: LD_EXP 50
16949: PPUSH
16950: LD_INT 61
16952: PPUSH
16953: LD_INT 45
16955: PPUSH
16956: CALL_OW 114
// end ;
16960: END
// every 0 0$1 trigger immortalVsevolodTeam do var unit ;
16961: LD_EXP 18
16965: IFFALSE 17003
16967: GO 16969
16969: DISABLE
16970: LD_INT 0
16972: PPUSH
// begin enable ;
16973: ENABLE
// for unit in vsevolodTeam do
16974: LD_ADDR_VAR 0 1
16978: PUSH
16979: LD_EXP 50
16983: PUSH
16984: FOR_IN
16985: IFFALSE 17001
// SetLives ( unit , 1000 ) ;
16987: LD_VAR 0 1
16991: PPUSH
16992: LD_INT 1000
16994: PPUSH
16995: CALL_OW 234
16999: GO 16984
17001: POP
17002: POP
// end ;
17003: PPOPN 1
17005: END
// every 0 0$1 trigger GetLives ( ter_bun1 ) <= 650 or GetLives ( ter_arm1 ) <= 650 do var belkovSavedIn02 , tmp , speaker ;
17006: LD_INT 170
17008: PPUSH
17009: CALL_OW 256
17013: PUSH
17014: LD_INT 650
17016: LESSEQUAL
17017: PUSH
17018: LD_INT 174
17020: PPUSH
17021: CALL_OW 256
17025: PUSH
17026: LD_INT 650
17028: LESSEQUAL
17029: OR
17030: IFFALSE 18163
17032: GO 17034
17034: DISABLE
17035: LD_INT 0
17037: PPUSH
17038: PPUSH
17039: PPUSH
// begin ComMoveXY ( UnitFilter ( terminalBase , [ f_type , unit_human ] ) , 35 , 58 ) ;
17040: LD_EXP 53
17044: PPUSH
17045: LD_INT 21
17047: PUSH
17048: LD_INT 1
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: PPUSH
17055: CALL_OW 72
17059: PPUSH
17060: LD_INT 35
17062: PPUSH
17063: LD_INT 58
17065: PPUSH
17066: CALL_OW 111
// SetSide ( UnitFilter ( terminalBase , [ f_type , unit_building ] ) , 6 ) ;
17070: LD_EXP 53
17074: PPUSH
17075: LD_INT 21
17077: PUSH
17078: LD_INT 3
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PPUSH
17085: CALL_OW 72
17089: PPUSH
17090: LD_INT 6
17092: PPUSH
17093: CALL_OW 235
// immortalVsevolodTeam = false ;
17097: LD_ADDR_EXP 18
17101: PUSH
17102: LD_INT 0
17104: ST_TO_ADDR
// ComEnterUnit ( [ Vsevolod , vsevolodTeam [ 2 ] ] , ter_arm1 ) ;
17105: LD_EXP 49
17109: PUSH
17110: LD_EXP 50
17114: PUSH
17115: LD_INT 2
17117: ARRAY
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PPUSH
17123: LD_INT 174
17125: PPUSH
17126: CALL_OW 120
// ComEnterUnit ( vsevolodTeam [ 3 ] , ter_bun1 ) ;
17130: LD_EXP 50
17134: PUSH
17135: LD_INT 3
17137: ARRAY
17138: PPUSH
17139: LD_INT 170
17141: PPUSH
17142: CALL_OW 120
// wait ( 0 0$5 ) ;
17146: LD_INT 175
17148: PPUSH
17149: CALL_OW 67
// DialogueOn ;
17153: CALL_OW 6
// if IsOK ( Dolgov ) then
17157: LD_EXP 45
17161: PPUSH
17162: CALL_OW 302
17166: IFFALSE 17180
// Say ( Dolgov , DVsevolod-Dol-1 ) ;
17168: LD_EXP 45
17172: PPUSH
17173: LD_STRING DVsevolod-Dol-1
17175: PPUSH
17176: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-1 ) ;
17180: LD_EXP 49
17184: PPUSH
17185: LD_STRING DVsevolod-Vse-1
17187: PPUSH
17188: CALL_OW 94
// if IsOK ( Gleb ) then
17192: LD_EXP 42
17196: PPUSH
17197: CALL_OW 302
17201: IFFALSE 17239
// begin Say ( Burlak , DVsevolod-Bur-1 ) ;
17203: LD_EXP 39
17207: PPUSH
17208: LD_STRING DVsevolod-Bur-1
17210: PPUSH
17211: CALL_OW 88
// Say ( Gleb , DVsevolod-Glb-1 ) ;
17215: LD_EXP 42
17219: PPUSH
17220: LD_STRING DVsevolod-Glb-1
17222: PPUSH
17223: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-2 ) ;
17227: LD_EXP 49
17231: PPUSH
17232: LD_STRING DVsevolod-Vse-2
17234: PPUSH
17235: CALL_OW 94
// end ; Say ( Burlak , DVsevolod-Bur-2 ) ;
17239: LD_EXP 39
17243: PPUSH
17244: LD_STRING DVsevolod-Bur-2
17246: PPUSH
17247: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-3 ) ;
17251: LD_EXP 49
17255: PPUSH
17256: LD_STRING DVsevolod-Vse-3
17258: PPUSH
17259: CALL_OW 94
// Say ( Burlak , DVsevolod-Bur-3 ) ;
17263: LD_EXP 39
17267: PPUSH
17268: LD_STRING DVsevolod-Bur-3
17270: PPUSH
17271: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-4 ) ;
17275: LD_EXP 49
17279: PPUSH
17280: LD_STRING DVsevolod-Vse-4
17282: PPUSH
17283: CALL_OW 94
// Say ( Burlak , DVsevolod-Bur-4 ) ;
17287: LD_EXP 39
17291: PPUSH
17292: LD_STRING DVsevolod-Bur-4
17294: PPUSH
17295: CALL_OW 88
// if IsOK ( Gleb ) then
17299: LD_EXP 42
17303: PPUSH
17304: CALL_OW 302
17308: IFFALSE 17336
// begin Say ( Gleb , DVsevolod-Glb-4 ) ;
17310: LD_EXP 42
17314: PPUSH
17315: LD_STRING DVsevolod-Glb-4
17317: PPUSH
17318: CALL_OW 88
// Say ( Burlak , DVsevolod-Bur-5 ) ;
17322: LD_EXP 39
17326: PPUSH
17327: LD_STRING DVsevolod-Bur-5
17329: PPUSH
17330: CALL_OW 88
// end else
17334: GO 17410
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-RSol1-5 ,  , false , true ) ;
17336: LD_INT 22
17338: PUSH
17339: LD_INT 3
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PUSH
17346: LD_INT 21
17348: PUSH
17349: LD_INT 1
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: PUSH
17356: LD_INT 50
17358: PUSH
17359: EMPTY
17360: LIST
17361: PUSH
17362: LD_INT 26
17364: PUSH
17365: LD_INT 1
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: PUSH
17372: LD_INT 23
17374: PUSH
17375: LD_INT 3
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: PPUSH
17389: CALL_OW 69
17393: PPUSH
17394: LD_STRING DVsevolod-RSol1-5
17396: PPUSH
17397: LD_STRING 
17399: PPUSH
17400: LD_INT 0
17402: PPUSH
17403: LD_INT 1
17405: PPUSH
17406: CALL 11487 0 5
// Say ( Burlak , DVsevolod-Bur-6 ) ;
17410: LD_EXP 39
17414: PPUSH
17415: LD_STRING DVsevolod-Bur-6
17417: PPUSH
17418: CALL_OW 88
// CenterOnXY ( 59 , 40 ) ;
17422: LD_INT 59
17424: PPUSH
17425: LD_INT 40
17427: PPUSH
17428: CALL_OW 84
// RevealFogArea ( 3 , TerminalBaseArea ) ;
17432: LD_INT 3
17434: PPUSH
17435: LD_INT 4
17437: PPUSH
17438: CALL_OW 332
// if IsOK ( Dolgov ) then
17442: LD_EXP 45
17446: PPUSH
17447: CALL_OW 302
17451: IFFALSE 17467
// Say ( Dolgov , DVsevolod-Dol-6 ) else
17453: LD_EXP 45
17457: PPUSH
17458: LD_STRING DVsevolod-Dol-6
17460: PPUSH
17461: CALL_OW 88
17465: GO 17541
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-Dol-6 ,  , false , true ) ;
17467: LD_INT 22
17469: PUSH
17470: LD_INT 3
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PUSH
17477: LD_INT 21
17479: PUSH
17480: LD_INT 1
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 50
17489: PUSH
17490: EMPTY
17491: LIST
17492: PUSH
17493: LD_INT 26
17495: PUSH
17496: LD_INT 1
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 23
17505: PUSH
17506: LD_INT 3
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: PPUSH
17520: CALL_OW 69
17524: PPUSH
17525: LD_STRING DVsevolod-Dol-6
17527: PPUSH
17528: LD_STRING 
17530: PPUSH
17531: LD_INT 0
17533: PPUSH
17534: LD_INT 1
17536: PPUSH
17537: CALL 11487 0 5
// Say ( Burlak , DVsevolod-Bur-7 ) ;
17541: LD_EXP 39
17545: PPUSH
17546: LD_STRING DVsevolod-Bur-7
17548: PPUSH
17549: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-7 ) ;
17553: LD_EXP 49
17557: PPUSH
17558: LD_STRING DVsevolod-Vse-7
17560: PPUSH
17561: CALL_OW 94
// DialogueOff ;
17565: CALL_OW 7
// ChangeMissionObjectives ( MVsevolod ) ;
17569: LD_STRING MVsevolod
17571: PPUSH
17572: CALL_OW 337
// enableVsevolodCounter = true ;
17576: LD_ADDR_EXP 22
17580: PUSH
17581: LD_INT 1
17583: ST_TO_ADDR
// canGoNorth = true ;
17584: LD_ADDR_EXP 21
17588: PUSH
17589: LD_INT 1
17591: ST_TO_ADDR
// PrepareSoldiersInBunkers ;
17592: CALL 3364 0 0
// wait ( 0 0$7 ) ;
17596: LD_INT 245
17598: PPUSH
17599: CALL_OW 67
// belkovSavedIn02 = TestCharacters ( 02_Belkov ) ;
17603: LD_ADDR_VAR 0 1
17607: PUSH
17608: LD_STRING 02_Belkov
17610: PPUSH
17611: CALL_OW 28
17615: ST_TO_ADDR
// DialogueOn ;
17616: CALL_OW 6
// if belkovSavedIn02 then
17620: LD_VAR 0 1
17624: IFFALSE 17825
// begin if IsOK ( Gleb ) then
17626: LD_EXP 42
17630: PPUSH
17631: CALL_OW 302
17635: IFFALSE 17649
// Say ( Gleb , DHelp1-Glb-1 ) ;
17637: LD_EXP 42
17641: PPUSH
17642: LD_STRING DHelp1-Glb-1
17644: PPUSH
17645: CALL_OW 88
// if IsOK ( Dolgov ) then
17649: LD_EXP 45
17653: PPUSH
17654: CALL_OW 302
17658: IFFALSE 17672
// Say ( Dolgov , DHelp1-Dol-1 ) ;
17660: LD_EXP 45
17664: PPUSH
17665: LD_STRING DHelp1-Dol-1
17667: PPUSH
17668: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Gleb , Dolgov , Titov ] ;
17672: LD_ADDR_VAR 0 2
17676: PUSH
17677: LD_INT 22
17679: PUSH
17680: LD_INT 3
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PUSH
17687: LD_INT 21
17689: PUSH
17690: LD_INT 1
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: LD_INT 50
17699: PUSH
17700: EMPTY
17701: LIST
17702: PUSH
17703: LD_INT 26
17705: PUSH
17706: LD_INT 1
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: LD_INT 23
17715: PUSH
17716: LD_INT 3
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: PPUSH
17730: CALL_OW 69
17734: PUSH
17735: LD_EXP 42
17739: PUSH
17740: LD_EXP 45
17744: PUSH
17745: LD_EXP 44
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: LIST
17754: DIFF
17755: ST_TO_ADDR
// DialogRandom ( tmp , DHelp1-RSol1-1 ,  , false , true ) ;
17756: LD_VAR 0 2
17760: PPUSH
17761: LD_STRING DHelp1-RSol1-1
17763: PPUSH
17764: LD_STRING 
17766: PPUSH
17767: LD_INT 0
17769: PPUSH
17770: LD_INT 1
17772: PPUSH
17773: CALL 11487 0 5
// if IsOK ( Titov ) then
17777: LD_EXP 44
17781: PPUSH
17782: CALL_OW 302
17786: IFFALSE 17800
// Say ( Titov , DHelp1-Tit-1 ) ;
17788: LD_EXP 44
17792: PPUSH
17793: LD_STRING DHelp1-Tit-1
17795: PPUSH
17796: CALL_OW 88
// if IsOK ( Gleb ) then
17800: LD_EXP 42
17804: PPUSH
17805: CALL_OW 302
17809: IFFALSE 17823
// Say ( Gleb , DHelp1-Glb-2 ) ;
17811: LD_EXP 42
17815: PPUSH
17816: LD_STRING DHelp1-Glb-2
17818: PPUSH
17819: CALL_OW 88
// end else
17823: GO 18036
// begin if IsOK ( Titov ) then
17825: LD_EXP 44
17829: PPUSH
17830: CALL_OW 302
17834: IFFALSE 17848
// Say ( Titov , DHelp2-Tit-1 ) ;
17836: LD_EXP 44
17840: PPUSH
17841: LD_STRING DHelp2-Tit-1
17843: PPUSH
17844: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Gleb , Titov ] ;
17848: LD_ADDR_VAR 0 2
17852: PUSH
17853: LD_INT 22
17855: PUSH
17856: LD_INT 3
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PUSH
17863: LD_INT 21
17865: PUSH
17866: LD_INT 1
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PUSH
17873: LD_INT 50
17875: PUSH
17876: EMPTY
17877: LIST
17878: PUSH
17879: LD_INT 26
17881: PUSH
17882: LD_INT 1
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: PUSH
17889: LD_INT 23
17891: PUSH
17892: LD_INT 3
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: PPUSH
17906: CALL_OW 69
17910: PUSH
17911: LD_EXP 42
17915: PUSH
17916: LD_EXP 44
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: DIFF
17925: ST_TO_ADDR
// speaker = DialogRandom ( tmp , DHelp2-RSol1-1 ,  , false , true ) ;
17926: LD_ADDR_VAR 0 3
17930: PUSH
17931: LD_VAR 0 2
17935: PPUSH
17936: LD_STRING DHelp2-RSol1-1
17938: PPUSH
17939: LD_STRING 
17941: PPUSH
17942: LD_INT 0
17944: PPUSH
17945: LD_INT 1
17947: PPUSH
17948: CALL 11487 0 5
17952: ST_TO_ADDR
// if IsOK ( Gleb ) then
17953: LD_EXP 42
17957: PPUSH
17958: CALL_OW 302
17962: IFFALSE 17976
// Say ( Gleb , DHelp2-Glb-1 ) ;
17964: LD_EXP 42
17968: PPUSH
17969: LD_STRING DHelp2-Glb-1
17971: PPUSH
17972: CALL_OW 88
// tmp = tmp diff speaker ;
17976: LD_ADDR_VAR 0 2
17980: PUSH
17981: LD_VAR 0 2
17985: PUSH
17986: LD_VAR 0 3
17990: DIFF
17991: ST_TO_ADDR
// DialogRandom ( tmp , DHelp2-RSol2-1 ,  , false , true ) ;
17992: LD_VAR 0 2
17996: PPUSH
17997: LD_STRING DHelp2-RSol2-1
17999: PPUSH
18000: LD_STRING 
18002: PPUSH
18003: LD_INT 0
18005: PPUSH
18006: LD_INT 1
18008: PPUSH
18009: CALL 11487 0 5
// if IsOK ( Titov ) then
18013: LD_EXP 44
18017: PPUSH
18018: CALL_OW 302
18022: IFFALSE 18036
// Say ( Titov , DHelp2-Tit-2 ) ;
18024: LD_EXP 44
18028: PPUSH
18029: LD_STRING DHelp2-Tit-2
18031: PPUSH
18032: CALL_OW 88
// end ; Say ( Burlak , DHelp3-Bur-1 ) ;
18036: LD_EXP 39
18040: PPUSH
18041: LD_STRING DHelp3-Bur-1
18043: PPUSH
18044: CALL_OW 88
// if IsOK ( Lipshchin ) then
18048: LD_EXP 46
18052: PPUSH
18053: CALL_OW 302
18057: IFFALSE 18073
// Say ( Lipshchin , DHelp3-Lip-1 ) else
18059: LD_EXP 46
18063: PPUSH
18064: LD_STRING DHelp3-Lip-1
18066: PPUSH
18067: CALL_OW 88
18071: GO 18147
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-Dol-6 ,  , false , true ) ;
18073: LD_INT 22
18075: PUSH
18076: LD_INT 3
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 21
18085: PUSH
18086: LD_INT 1
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 50
18095: PUSH
18096: EMPTY
18097: LIST
18098: PUSH
18099: LD_INT 26
18101: PUSH
18102: LD_INT 1
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 23
18111: PUSH
18112: LD_INT 3
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: PPUSH
18126: CALL_OW 69
18130: PPUSH
18131: LD_STRING DVsevolod-Dol-6
18133: PPUSH
18134: LD_STRING 
18136: PPUSH
18137: LD_INT 0
18139: PPUSH
18140: LD_INT 1
18142: PPUSH
18143: CALL 11487 0 5
// Say ( Burlak , DHelp3-Bur-2 ) ;
18147: LD_EXP 39
18151: PPUSH
18152: LD_STRING DHelp3-Bur-2
18154: PPUSH
18155: CALL_OW 88
// DialogueOff ;
18159: CALL_OW 7
// end ;
18163: PPOPN 3
18165: END
// every 0 0$1 trigger claimOvsyenkoBase and not FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] , [ f_type , unit_vehicle ] ] ] ) and FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
18166: LD_EXP 15
18170: PUSH
18171: LD_INT 3
18173: PPUSH
18174: LD_INT 22
18176: PUSH
18177: LD_INT 3
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: LD_INT 2
18186: PUSH
18187: LD_INT 21
18189: PUSH
18190: LD_INT 1
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 59
18199: PUSH
18200: EMPTY
18201: LIST
18202: PUSH
18203: LD_INT 21
18205: PUSH
18206: LD_INT 2
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PPUSH
18223: CALL_OW 70
18227: NOT
18228: AND
18229: PUSH
18230: LD_INT 3
18232: PPUSH
18233: LD_INT 22
18235: PUSH
18236: LD_INT 1
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 2
18245: PUSH
18246: LD_INT 21
18248: PUSH
18249: LD_INT 1
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: LD_INT 21
18258: PUSH
18259: LD_INT 2
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: LIST
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PPUSH
18275: CALL_OW 70
18279: AND
18280: IFFALSE 18447
18282: GO 18284
18284: DISABLE
// begin lostAgainBase = true ;
18285: LD_ADDR_EXP 17
18289: PUSH
18290: LD_INT 1
18292: ST_TO_ADDR
// SetSide ( FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , 1 ) ;
18293: LD_INT 3
18295: PPUSH
18296: LD_INT 22
18298: PUSH
18299: LD_INT 3
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: LD_INT 21
18308: PUSH
18309: LD_INT 3
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PPUSH
18320: CALL_OW 70
18324: PPUSH
18325: LD_INT 1
18327: PPUSH
18328: CALL_OW 235
// if IsOK ( Gleb ) then
18332: LD_EXP 42
18336: PPUSH
18337: CALL_OW 302
18341: IFFALSE 18367
// begin Say ( Gleb , DOvsyenkoCaptured-Glb-1 ) ;
18343: LD_EXP 42
18347: PPUSH
18348: LD_STRING DOvsyenkoCaptured-Glb-1
18350: PPUSH
18351: CALL_OW 88
// Say ( Burlak , DOvsyenkoCaptured-Bur-1 ) ;
18355: LD_EXP 39
18359: PPUSH
18360: LD_STRING DOvsyenkoCaptured-Bur-1
18362: PPUSH
18363: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Gleb , DOvsyenkoCaptured-RSol1-1 ,  , false , true ) ;
18367: LD_INT 22
18369: PUSH
18370: LD_INT 3
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: LD_INT 21
18379: PUSH
18380: LD_INT 1
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PUSH
18387: LD_INT 50
18389: PUSH
18390: EMPTY
18391: LIST
18392: PUSH
18393: LD_INT 26
18395: PUSH
18396: LD_INT 1
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: LD_INT 23
18405: PUSH
18406: LD_INT 3
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: PPUSH
18420: CALL_OW 69
18424: PUSH
18425: LD_EXP 42
18429: DIFF
18430: PPUSH
18431: LD_STRING DOvsyenkoCaptured-RSol1-1
18433: PPUSH
18434: LD_STRING 
18436: PPUSH
18437: LD_INT 0
18439: PPUSH
18440: LD_INT 1
18442: PPUSH
18443: CALL 11487 0 5
// end ;
18447: END
// every 0 0$1 trigger FilterUnitsInArea ( TrapArea , [ [ f_side , 3 ] , [ f_ok ] ] ) do
18448: LD_INT 12
18450: PPUSH
18451: LD_INT 22
18453: PUSH
18454: LD_INT 3
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 50
18463: PUSH
18464: EMPTY
18465: LIST
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PPUSH
18471: CALL_OW 70
18475: IFFALSE 18484
18477: GO 18479
18479: DISABLE
// PrepareTrap ;
18480: CALL 3200 0 0
18484: END
// every 0 0$1 trigger not dial_TrapDialogBlocker do var tmp , speaker , unit ;
18485: LD_EXP 11
18489: NOT
18490: IFFALSE 18708
18492: GO 18494
18494: DISABLE
18495: LD_INT 0
18497: PPUSH
18498: PPUSH
18499: PPUSH
// begin enable ;
18500: ENABLE
// for unit in trapTeam do
18501: LD_ADDR_VAR 0 3
18505: PUSH
18506: LD_EXP 55
18510: PUSH
18511: FOR_IN
18512: IFFALSE 18706
// if See ( 3 , unit ) then
18514: LD_INT 3
18516: PPUSH
18517: LD_VAR 0 3
18521: PPUSH
18522: CALL_OW 292
18526: IFFALSE 18704
// begin dial_TrapDialogBlocker = true ;
18528: LD_ADDR_EXP 11
18532: PUSH
18533: LD_INT 1
18535: ST_TO_ADDR
// DialogueOn ;
18536: CALL_OW 6
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Gleb ;
18540: LD_ADDR_VAR 0 1
18544: PUSH
18545: LD_INT 22
18547: PUSH
18548: LD_INT 3
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: LD_INT 21
18557: PUSH
18558: LD_INT 1
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PUSH
18565: LD_INT 50
18567: PUSH
18568: EMPTY
18569: LIST
18570: PUSH
18571: LD_INT 26
18573: PUSH
18574: LD_INT 1
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PUSH
18581: LD_INT 23
18583: PUSH
18584: LD_INT 3
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: PPUSH
18598: CALL_OW 69
18602: PUSH
18603: LD_EXP 42
18607: DIFF
18608: ST_TO_ADDR
// speaker = DialogRandom ( tmp , DPartyAttacked-RSol1-1 ,  , false , true ) ;
18609: LD_ADDR_VAR 0 2
18613: PUSH
18614: LD_VAR 0 1
18618: PPUSH
18619: LD_STRING DPartyAttacked-RSol1-1
18621: PPUSH
18622: LD_STRING 
18624: PPUSH
18625: LD_INT 0
18627: PPUSH
18628: LD_INT 1
18630: PPUSH
18631: CALL 11487 0 5
18635: ST_TO_ADDR
// tmp = tmp diff speaker ;
18636: LD_ADDR_VAR 0 1
18640: PUSH
18641: LD_VAR 0 1
18645: PUSH
18646: LD_VAR 0 2
18650: DIFF
18651: ST_TO_ADDR
// if IsOK ( Gleb ) then
18652: LD_EXP 42
18656: PPUSH
18657: CALL_OW 302
18661: IFFALSE 18675
// Say ( Gleb , DPartyAttacked-Glb-1 ) ;
18663: LD_EXP 42
18667: PPUSH
18668: LD_STRING DPartyAttacked-Glb-1
18670: PPUSH
18671: CALL_OW 88
// DialogRandom ( tmp , DPartyAttacked-RSol1-2 ,  , false , true ) ;
18675: LD_VAR 0 1
18679: PPUSH
18680: LD_STRING DPartyAttacked-RSol1-2
18682: PPUSH
18683: LD_STRING 
18685: PPUSH
18686: LD_INT 0
18688: PPUSH
18689: LD_INT 1
18691: PPUSH
18692: CALL 11487 0 5
// DialogueOff ;
18696: CALL_OW 7
// exit ;
18700: POP
18701: POP
18702: GO 18708
// end ;
18704: GO 18511
18706: POP
18707: POP
// end ;
18708: PPOPN 3
18710: END
// every 0 0$1 trigger not savedVsevolod and IsOK ( Vsevolod ) and FilterUnitsInArea ( TerminalBaseArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ [ f_type , unit_human ] , [ f_nation , nation_russian ] ] , [ f_type , unit_vehicle ] ] ] ) do var nearUnit , unit ;
18711: LD_EXP 19
18715: NOT
18716: PUSH
18717: LD_EXP 49
18721: PPUSH
18722: CALL_OW 302
18726: AND
18727: PUSH
18728: LD_INT 4
18730: PPUSH
18731: LD_INT 22
18733: PUSH
18734: LD_INT 3
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: LD_INT 50
18743: PUSH
18744: EMPTY
18745: LIST
18746: PUSH
18747: LD_INT 2
18749: PUSH
18750: LD_INT 21
18752: PUSH
18753: LD_INT 1
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 23
18762: PUSH
18763: LD_INT 3
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: LD_INT 21
18776: PUSH
18777: LD_INT 2
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: LIST
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: LIST
18793: PPUSH
18794: CALL_OW 70
18798: AND
18799: IFFALSE 19394
18801: GO 18803
18803: DISABLE
18804: LD_INT 0
18806: PPUSH
18807: PPUSH
// begin savedVsevolod = true ;
18808: LD_ADDR_EXP 19
18812: PUSH
18813: LD_INT 1
18815: ST_TO_ADDR
// ChangeMissionObjectives ( MVsevolodOut ) ;
18816: LD_STRING MVsevolodOut
18818: PPUSH
18819: CALL_OW 337
// unit = FilterUnitsInArea ( TerminalBaseArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ [ f_type , unit_human ] , [ f_nation , nation_russian ] ] , [ f_type , unit_vehicle ] ] ] ) [ 1 ] ;
18823: LD_ADDR_VAR 0 2
18827: PUSH
18828: LD_INT 4
18830: PPUSH
18831: LD_INT 22
18833: PUSH
18834: LD_INT 3
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 50
18843: PUSH
18844: EMPTY
18845: LIST
18846: PUSH
18847: LD_INT 2
18849: PUSH
18850: LD_INT 21
18852: PUSH
18853: LD_INT 1
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: LD_INT 23
18862: PUSH
18863: LD_INT 3
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: LD_INT 21
18876: PUSH
18877: LD_INT 2
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: LIST
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: LIST
18893: PPUSH
18894: CALL_OW 70
18898: PUSH
18899: LD_INT 1
18901: ARRAY
18902: ST_TO_ADDR
// if GetType ( unit ) = unit_vehicle then
18903: LD_VAR 0 2
18907: PPUSH
18908: CALL_OW 247
18912: PUSH
18913: LD_INT 2
18915: EQUAL
18916: IFFALSE 18937
// unit = UnitsInside ( unit ) [ 1 ] ;
18918: LD_ADDR_VAR 0 2
18922: PUSH
18923: LD_VAR 0 2
18927: PPUSH
18928: CALL_OW 313
18932: PUSH
18933: LD_INT 1
18935: ARRAY
18936: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
18937: LD_INT 22
18939: PUSH
18940: LD_INT 6
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PPUSH
18947: CALL_OW 69
18951: PPUSH
18952: LD_INT 3
18954: PPUSH
18955: CALL_OW 235
// if not unit = Burlak then
18959: LD_VAR 0 2
18963: PUSH
18964: LD_EXP 39
18968: EQUAL
18969: NOT
18970: IFFALSE 19111
// begin vsevolodWaitGorky = true ;
18972: LD_ADDR_EXP 20
18976: PUSH
18977: LD_INT 1
18979: ST_TO_ADDR
// DialogueOn ;
18980: CALL_OW 6
// Say ( Vsevolod , DOtherMeetVsev-Vse-1 ) ;
18984: LD_EXP 49
18988: PPUSH
18989: LD_STRING DOtherMeetVsev-Vse-1
18991: PPUSH
18992: CALL_OW 88
// if GetSex ( unit ) = sex_female then
18996: LD_VAR 0 2
19000: PPUSH
19001: CALL_OW 258
19005: PUSH
19006: LD_INT 2
19008: EQUAL
19009: IFFALSE 19093
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Gleb , DOtherMeetVsev-RSol1-1 ,  , false , true ) else
19011: LD_INT 22
19013: PUSH
19014: LD_INT 3
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 21
19023: PUSH
19024: LD_INT 1
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 50
19033: PUSH
19034: EMPTY
19035: LIST
19036: PUSH
19037: LD_INT 26
19039: PUSH
19040: LD_INT 1
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: LD_INT 23
19049: PUSH
19050: LD_INT 3
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: PPUSH
19064: CALL_OW 69
19068: PUSH
19069: LD_EXP 42
19073: DIFF
19074: PPUSH
19075: LD_STRING DOtherMeetVsev-RSol1-1
19077: PPUSH
19078: LD_STRING 
19080: PPUSH
19081: LD_INT 0
19083: PPUSH
19084: LD_INT 1
19086: PPUSH
19087: CALL 11487 0 5
19091: GO 19105
// Say ( unit , DOtherMeetVsev-RSol1-1 ) ;
19093: LD_VAR 0 2
19097: PPUSH
19098: LD_STRING DOtherMeetVsev-RSol1-1
19100: PPUSH
19101: CALL_OW 88
// DialogueOff ;
19105: CALL_OW 7
// end else
19109: GO 19394
// begin DialogueOn ;
19111: CALL_OW 6
// Say ( Vsevolod , DMeetVsev-Vse-1 ) ;
19115: LD_EXP 49
19119: PPUSH
19120: LD_STRING DMeetVsev-Vse-1
19122: PPUSH
19123: CALL_OW 88
// Say ( Burlak , DMeetVsev-Bur-1 ) ;
19127: LD_EXP 39
19131: PPUSH
19132: LD_STRING DMeetVsev-Bur-1
19134: PPUSH
19135: CALL_OW 88
// if lostAgainBase then
19139: LD_EXP 17
19143: IFFALSE 19183
// begin Say ( Vsevolod , DMeetVsev2-Vse-1 ) ;
19145: LD_EXP 49
19149: PPUSH
19150: LD_STRING DMeetVsev2-Vse-1
19152: PPUSH
19153: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-1 ) ;
19157: LD_EXP 39
19161: PPUSH
19162: LD_STRING DMeetVsev2-Bur-1
19164: PPUSH
19165: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-2 ) ;
19169: LD_EXP 49
19173: PPUSH
19174: LD_STRING DMeetVsev2-Vse-2
19176: PPUSH
19177: CALL_OW 88
// end else
19181: GO 19219
// begin Say ( Vsevolod , DMeetVsev2-Vse-2a ) ;
19183: LD_EXP 49
19187: PPUSH
19188: LD_STRING DMeetVsev2-Vse-2a
19190: PPUSH
19191: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-2 ) ;
19195: LD_EXP 39
19199: PPUSH
19200: LD_STRING DMeetVsev2-Bur-2
19202: PPUSH
19203: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-3 ) ;
19207: LD_EXP 49
19211: PPUSH
19212: LD_STRING DMeetVsev2-Vse-3
19214: PPUSH
19215: CALL_OW 88
// end ; Say ( Burlak , DMeetVsev3-Bur-1 ) ;
19219: LD_EXP 39
19223: PPUSH
19224: LD_STRING DMeetVsev3-Bur-1
19226: PPUSH
19227: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-1 ) ;
19231: LD_EXP 49
19235: PPUSH
19236: LD_STRING DMeetVsev3-Vse-1
19238: PPUSH
19239: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-2 ) ;
19243: LD_EXP 39
19247: PPUSH
19248: LD_STRING DMeetVsev3-Bur-2
19250: PPUSH
19251: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-2 ) ;
19255: LD_EXP 49
19259: PPUSH
19260: LD_STRING DMeetVsev3-Vse-2
19262: PPUSH
19263: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-3 ) ;
19267: LD_EXP 39
19271: PPUSH
19272: LD_STRING DMeetVsev3-Bur-3
19274: PPUSH
19275: CALL_OW 88
// if stevensStatus = 0 then
19279: LD_EXP 4
19283: PUSH
19284: LD_INT 0
19286: EQUAL
19287: IFFALSE 19301
// Say ( Burlak , DMeetVsev4-Bur-1 ) ;
19289: LD_EXP 39
19293: PPUSH
19294: LD_STRING DMeetVsev4-Bur-1
19296: PPUSH
19297: CALL_OW 88
// Say ( Burlak , DMeetVsev5-Bur-1 ) ;
19301: LD_EXP 39
19305: PPUSH
19306: LD_STRING DMeetVsev5-Bur-1
19308: PPUSH
19309: CALL_OW 88
// Say ( Vsevolod , DMeetVsev5-Vse-1 ) ;
19313: LD_EXP 49
19317: PPUSH
19318: LD_STRING DMeetVsev5-Vse-1
19320: PPUSH
19321: CALL_OW 88
// Say ( Burlak , DMeetVsev6-Bur-1 ) ;
19325: LD_EXP 39
19329: PPUSH
19330: LD_STRING DMeetVsev6-Bur-1
19332: PPUSH
19333: CALL_OW 88
// Say ( Vsevolod , DMeetVsev6-Vse-1 ) ;
19337: LD_EXP 49
19341: PPUSH
19342: LD_STRING DMeetVsev6-Vse-1
19344: PPUSH
19345: CALL_OW 88
// DialogueOff ;
19349: CALL_OW 7
// wait ( 0 0$20 ) ;
19353: LD_INT 700
19355: PPUSH
19356: CALL_OW 67
// PrepareConvoy ;
19360: CALL 3408 0 0
// ComMoveXY ( convoyTeam , 57 , 40 ) ;
19364: LD_EXP 56
19368: PPUSH
19369: LD_INT 57
19371: PPUSH
19372: LD_INT 40
19374: PPUSH
19375: CALL_OW 111
// AddComMoveXY ( convoyTeam , 37 , 59 ) ;
19379: LD_EXP 56
19383: PPUSH
19384: LD_INT 37
19386: PPUSH
19387: LD_INT 59
19389: PPUSH
19390: CALL_OW 171
// end ; end ;
19394: PPOPN 2
19396: END
// every 0 0$1 trigger vsevolodWaitGorky and GetDistUnits ( Vsevolod , Burlak ) <= 7 do
19397: LD_EXP 20
19401: PUSH
19402: LD_EXP 49
19406: PPUSH
19407: LD_EXP 39
19411: PPUSH
19412: CALL_OW 296
19416: PUSH
19417: LD_INT 7
19419: LESSEQUAL
19420: AND
19421: IFFALSE 19717
19423: GO 19425
19425: DISABLE
// begin vsevolodWaitGorky = false ;
19426: LD_ADDR_EXP 20
19430: PUSH
19431: LD_INT 0
19433: ST_TO_ADDR
// DialogueOn ;
19434: CALL_OW 6
// Say ( Vsevolod , DMeetVsev-Vse-1 ) ;
19438: LD_EXP 49
19442: PPUSH
19443: LD_STRING DMeetVsev-Vse-1
19445: PPUSH
19446: CALL_OW 88
// Say ( Burlak , DMeetVsev-Bur-1 ) ;
19450: LD_EXP 39
19454: PPUSH
19455: LD_STRING DMeetVsev-Bur-1
19457: PPUSH
19458: CALL_OW 88
// if lostAgainBase then
19462: LD_EXP 17
19466: IFFALSE 19506
// begin Say ( Vsevolod , DMeetVsev2-Vse-1 ) ;
19468: LD_EXP 49
19472: PPUSH
19473: LD_STRING DMeetVsev2-Vse-1
19475: PPUSH
19476: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-1 ) ;
19480: LD_EXP 39
19484: PPUSH
19485: LD_STRING DMeetVsev2-Bur-1
19487: PPUSH
19488: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-2 ) ;
19492: LD_EXP 49
19496: PPUSH
19497: LD_STRING DMeetVsev2-Vse-2
19499: PPUSH
19500: CALL_OW 88
// end else
19504: GO 19542
// begin Say ( Vsevolod , DMeetVsev2-Vse-2a ) ;
19506: LD_EXP 49
19510: PPUSH
19511: LD_STRING DMeetVsev2-Vse-2a
19513: PPUSH
19514: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-2 ) ;
19518: LD_EXP 39
19522: PPUSH
19523: LD_STRING DMeetVsev2-Bur-2
19525: PPUSH
19526: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-3 ) ;
19530: LD_EXP 49
19534: PPUSH
19535: LD_STRING DMeetVsev2-Vse-3
19537: PPUSH
19538: CALL_OW 88
// end ; Say ( Burlak , DMeetVsev3-Bur-1 ) ;
19542: LD_EXP 39
19546: PPUSH
19547: LD_STRING DMeetVsev3-Bur-1
19549: PPUSH
19550: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-1 ) ;
19554: LD_EXP 49
19558: PPUSH
19559: LD_STRING DMeetVsev3-Vse-1
19561: PPUSH
19562: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-2 ) ;
19566: LD_EXP 39
19570: PPUSH
19571: LD_STRING DMeetVsev3-Bur-2
19573: PPUSH
19574: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-2 ) ;
19578: LD_EXP 49
19582: PPUSH
19583: LD_STRING DMeetVsev3-Vse-2
19585: PPUSH
19586: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-3 ) ;
19590: LD_EXP 39
19594: PPUSH
19595: LD_STRING DMeetVsev3-Bur-3
19597: PPUSH
19598: CALL_OW 88
// if stevensStatus = 0 then
19602: LD_EXP 4
19606: PUSH
19607: LD_INT 0
19609: EQUAL
19610: IFFALSE 19624
// Say ( Burlak , DMeetVsev4-Bur-1 ) ;
19612: LD_EXP 39
19616: PPUSH
19617: LD_STRING DMeetVsev4-Bur-1
19619: PPUSH
19620: CALL_OW 88
// Say ( Burlak , DMeetVsev5-Bur-1 ) ;
19624: LD_EXP 39
19628: PPUSH
19629: LD_STRING DMeetVsev5-Bur-1
19631: PPUSH
19632: CALL_OW 88
// Say ( Vsevolod , DMeetVsev5-Vse-1 ) ;
19636: LD_EXP 49
19640: PPUSH
19641: LD_STRING DMeetVsev5-Vse-1
19643: PPUSH
19644: CALL_OW 88
// Say ( Vsevolod , DMeetVsev6-Vse-1 ) ;
19648: LD_EXP 49
19652: PPUSH
19653: LD_STRING DMeetVsev6-Vse-1
19655: PPUSH
19656: CALL_OW 88
// Say ( Burlak , DMeetVsev6-Bur-1 ) ;
19660: LD_EXP 39
19664: PPUSH
19665: LD_STRING DMeetVsev6-Bur-1
19667: PPUSH
19668: CALL_OW 88
// DialogueOff ;
19672: CALL_OW 7
// wait ( 0 0$20 ) ;
19676: LD_INT 700
19678: PPUSH
19679: CALL_OW 67
// PrepareConvoy ;
19683: CALL 3408 0 0
// ComMoveXY ( convoyTeam , 57 , 40 ) ;
19687: LD_EXP 56
19691: PPUSH
19692: LD_INT 57
19694: PPUSH
19695: LD_INT 40
19697: PPUSH
19698: CALL_OW 111
// AddComMoveXY ( convoyTeam , 37 , 59 ) ;
19702: LD_EXP 56
19706: PPUSH
19707: LD_INT 37
19709: PPUSH
19710: LD_INT 59
19712: PPUSH
19713: CALL_OW 171
// end ;
19717: END
// every 0 0$1 trigger not dial_ConvoyDialogBlocker do var tmp , speaker , unit ;
19718: LD_EXP 12
19722: NOT
19723: IFFALSE 19853
19725: GO 19727
19727: DISABLE
19728: LD_INT 0
19730: PPUSH
19731: PPUSH
19732: PPUSH
// begin enable ;
19733: ENABLE
// for unit in convoyTeam do
19734: LD_ADDR_VAR 0 3
19738: PUSH
19739: LD_EXP 56
19743: PUSH
19744: FOR_IN
19745: IFFALSE 19851
// if See ( 3 , unit ) and not IsInArea ( unit , InsideBaseArea ) then
19747: LD_INT 3
19749: PPUSH
19750: LD_VAR 0 3
19754: PPUSH
19755: CALL_OW 292
19759: PUSH
19760: LD_VAR 0 3
19764: PPUSH
19765: LD_INT 19
19767: PPUSH
19768: CALL_OW 308
19772: NOT
19773: AND
19774: IFFALSE 19849
// begin dial_ConvoyDialogBlocker = true ;
19776: LD_ADDR_EXP 12
19780: PUSH
19781: LD_INT 1
19783: ST_TO_ADDR
// DialogueOn ;
19784: CALL_OW 6
// speaker = UnitFilter ( convoyTeam , [ f_type , unit_human ] ) [ 1 ] ;
19788: LD_ADDR_VAR 0 2
19792: PUSH
19793: LD_EXP 56
19797: PPUSH
19798: LD_INT 21
19800: PUSH
19801: LD_INT 1
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PPUSH
19808: CALL_OW 72
19812: PUSH
19813: LD_INT 1
19815: ARRAY
19816: ST_TO_ADDR
// Say ( speaker , DTruck-Sol1-1 ) ;
19817: LD_VAR 0 2
19821: PPUSH
19822: LD_STRING DTruck-Sol1-1
19824: PPUSH
19825: CALL_OW 88
// Say ( Burlak , DTruck-Bur-1 ) ;
19829: LD_EXP 39
19833: PPUSH
19834: LD_STRING DTruck-Bur-1
19836: PPUSH
19837: CALL_OW 88
// DialogueOff ;
19841: CALL_OW 7
// exit ;
19845: POP
19846: POP
19847: GO 19853
// end ;
19849: GO 19744
19851: POP
19852: POP
// end ;
19853: PPOPN 3
19855: END
// every 0 0$1 trigger timeToAttack >= vsevolodSaveTime do
19856: LD_EXP 26
19860: PUSH
19861: LD_EXP 38
19865: GREATEREQUAL
19866: IFFALSE 19905
19868: GO 19870
19870: DISABLE
// begin PrepareAttack ;
19871: CALL 3589 0 0
// ComAgressiveMove ( attackTeam , 60 , 41 ) ;
19875: LD_EXP 57
19879: PPUSH
19880: LD_INT 60
19882: PPUSH
19883: LD_INT 41
19885: PPUSH
19886: CALL_OW 114
// AddComAgressiveMove ( attackTeam , 107 , 125 ) ;
19890: LD_EXP 57
19894: PPUSH
19895: LD_INT 107
19897: PPUSH
19898: LD_INT 125
19900: PPUSH
19901: CALL_OW 174
// end ;
19905: END
// every 1 trigger not savedVsevolod and GetLives ( Vsevolod ) <= 500 do
19906: LD_EXP 19
19910: NOT
19911: PUSH
19912: LD_EXP 49
19916: PPUSH
19917: CALL_OW 256
19921: PUSH
19922: LD_INT 500
19924: LESSEQUAL
19925: AND
19926: IFFALSE 19951
19928: GO 19930
19930: DISABLE
// begin DialogueOn ;
19931: CALL_OW 6
// SayRadio ( Vsevolod , DDieVsev2-Vse-1 ) ;
19935: LD_EXP 49
19939: PPUSH
19940: LD_STRING DDieVsev2-Vse-1
19942: PPUSH
19943: CALL_OW 94
// DialogueOff ;
19947: CALL_OW 7
// end ;
19951: END
// export function Dial_ResearchTauField ; var speaker , sci , randomTalkDialog ; begin
19952: LD_INT 0
19954: PPUSH
19955: PPUSH
19956: PPUSH
19957: PPUSH
// if IsOK ( Petrosyan ) then
19958: LD_EXP 43
19962: PPUSH
19963: CALL_OW 302
19967: IFFALSE 19983
// Say ( Petrosyan , DStasis-Pty-1 ) else
19969: LD_EXP 43
19973: PPUSH
19974: LD_STRING DStasis-Pty-1
19976: PPUSH
19977: CALL_OW 88
19981: GO 20205
// if IsOK ( Dolgov ) then
19983: LD_EXP 45
19987: PPUSH
19988: CALL_OW 302
19992: IFFALSE 20008
// Say ( Dolgov , DStasis-Dol-1 ) else
19994: LD_EXP 45
19998: PPUSH
19999: LD_STRING DStasis-Dol-1
20001: PPUSH
20002: CALL_OW 88
20006: GO 20205
// begin sci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] , [ f_nation , nation_russian ] ] ) diff Burlak ;
20008: LD_ADDR_VAR 0 3
20012: PUSH
20013: LD_INT 22
20015: PUSH
20016: LD_INT 3
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 21
20025: PUSH
20026: LD_INT 1
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 50
20035: PUSH
20036: EMPTY
20037: LIST
20038: PUSH
20039: LD_INT 26
20041: PUSH
20042: LD_INT 1
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 25
20051: PUSH
20052: LD_INT 4
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 23
20061: PUSH
20062: LD_INT 3
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: PPUSH
20077: CALL_OW 69
20081: PUSH
20082: LD_EXP 39
20086: DIFF
20087: ST_TO_ADDR
// if not sci then
20088: LD_VAR 0 3
20092: NOT
20093: IFFALSE 20164
// sci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Burlak ;
20095: LD_ADDR_VAR 0 3
20099: PUSH
20100: LD_INT 22
20102: PUSH
20103: LD_INT 3
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: LD_INT 21
20112: PUSH
20113: LD_INT 1
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 50
20122: PUSH
20123: EMPTY
20124: LIST
20125: PUSH
20126: LD_INT 26
20128: PUSH
20129: LD_INT 1
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 23
20138: PUSH
20139: LD_INT 3
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: PPUSH
20153: CALL_OW 69
20157: PUSH
20158: LD_EXP 39
20162: DIFF
20163: ST_TO_ADDR
// if sci then
20164: LD_VAR 0 3
20168: IFFALSE 20205
// begin speaker = DialogRandom ( sci , DStasis-RSol1-1 ,  , false , true ) ;
20170: LD_ADDR_VAR 0 2
20174: PUSH
20175: LD_VAR 0 3
20179: PPUSH
20180: LD_STRING DStasis-RSol1-1
20182: PPUSH
20183: LD_STRING 
20185: PPUSH
20186: LD_INT 0
20188: PPUSH
20189: LD_INT 1
20191: PPUSH
20192: CALL 11487 0 5
20196: ST_TO_ADDR
// randomTalkDialog = true ;
20197: LD_ADDR_VAR 0 4
20201: PUSH
20202: LD_INT 1
20204: ST_TO_ADDR
// end ; end ; if IsOK ( Petrosyan ) or IsOK ( Dolgov ) or randomTalkDialog then
20205: LD_EXP 43
20209: PPUSH
20210: CALL_OW 302
20214: PUSH
20215: LD_EXP 45
20219: PPUSH
20220: CALL_OW 302
20224: OR
20225: PUSH
20226: LD_VAR 0 4
20230: OR
20231: IFFALSE 20328
// begin Say ( Burlak , DStasis-Bur-1 ) ;
20233: LD_EXP 39
20237: PPUSH
20238: LD_STRING DStasis-Bur-1
20240: PPUSH
20241: CALL_OW 88
// if IsOK ( Petrosyan ) then
20245: LD_EXP 43
20249: PPUSH
20250: CALL_OW 302
20254: IFFALSE 20270
// Say ( Petrosyan , DStasis-Pty-2 ) else
20256: LD_EXP 43
20260: PPUSH
20261: LD_STRING DStasis-Pty-2
20263: PPUSH
20264: CALL_OW 88
20268: GO 20316
// if IsOK ( Dolgov ) then
20270: LD_EXP 45
20274: PPUSH
20275: CALL_OW 302
20279: IFFALSE 20295
// Say ( Dolgov , DStasis-Dol-2 ) else
20281: LD_EXP 45
20285: PPUSH
20286: LD_STRING DStasis-Dol-2
20288: PPUSH
20289: CALL_OW 88
20293: GO 20316
// DialogRandom ( speaker , DStasis-RSol1-2 ,  , false , true ) ;
20295: LD_VAR 0 2
20299: PPUSH
20300: LD_STRING DStasis-RSol1-2
20302: PPUSH
20303: LD_STRING 
20305: PPUSH
20306: LD_INT 0
20308: PPUSH
20309: LD_INT 1
20311: PPUSH
20312: CALL 11487 0 5
// Say ( Burlak , DStasis-Bur-2 ) ;
20316: LD_EXP 39
20320: PPUSH
20321: LD_STRING DStasis-Bur-2
20323: PPUSH
20324: CALL_OW 88
// end ; if GetTech ( tech_SibEng , 3 ) = state_researched then
20328: LD_INT 22
20330: PPUSH
20331: LD_INT 3
20333: PPUSH
20334: CALL_OW 321
20338: PUSH
20339: LD_INT 2
20341: EQUAL
20342: IFFALSE 20351
// ChangeMissionObjectives ( MOutResearch ) ;
20344: LD_STRING MOutResearch
20346: PPUSH
20347: CALL_OW 337
// end ;
20351: LD_VAR 0 1
20355: RET
// every 0 0$20 trigger GetTech ( tech_SibEng , 3 ) = state_researched and GetTech ( tech_TauField , 3 ) = state_researched and not dial_EndMissionDialogBlocker do var depots , depot , sibCounter ;
20356: LD_INT 22
20358: PPUSH
20359: LD_INT 3
20361: PPUSH
20362: CALL_OW 321
20366: PUSH
20367: LD_INT 2
20369: EQUAL
20370: PUSH
20371: LD_INT 30
20373: PPUSH
20374: LD_INT 3
20376: PPUSH
20377: CALL_OW 321
20381: PUSH
20382: LD_INT 2
20384: EQUAL
20385: AND
20386: PUSH
20387: LD_EXP 14
20391: NOT
20392: AND
20393: IFFALSE 20722
20395: GO 20397
20397: DISABLE
20398: LD_INT 0
20400: PPUSH
20401: PPUSH
20402: PPUSH
// begin enable ;
20403: ENABLE
// depots = FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20404: LD_ADDR_VAR 0 1
20408: PUSH
20409: LD_INT 22
20411: PUSH
20412: LD_INT 3
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 50
20421: PUSH
20422: EMPTY
20423: LIST
20424: PUSH
20425: LD_INT 21
20427: PUSH
20428: LD_INT 3
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 2
20437: PUSH
20438: LD_INT 30
20440: PUSH
20441: LD_INT 0
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 30
20450: PUSH
20451: LD_INT 1
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: LIST
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: PPUSH
20469: CALL_OW 69
20473: ST_TO_ADDR
// sibCounter = 0 ;
20474: LD_ADDR_VAR 0 3
20478: PUSH
20479: LD_INT 0
20481: ST_TO_ADDR
// for depot in depots do
20482: LD_ADDR_VAR 0 2
20486: PUSH
20487: LD_VAR 0 1
20491: PUSH
20492: FOR_IN
20493: IFFALSE 20526
// sibCounter = sibCounter + GetResourceType ( GetBase ( depot ) , mat_siberit ) ;
20495: LD_ADDR_VAR 0 3
20499: PUSH
20500: LD_VAR 0 3
20504: PUSH
20505: LD_VAR 0 2
20509: PPUSH
20510: CALL_OW 274
20514: PPUSH
20515: LD_INT 3
20517: PPUSH
20518: CALL_OW 275
20522: PLUS
20523: ST_TO_ADDR
20524: GO 20492
20526: POP
20527: POP
// if sibCounter >= 100 then
20528: LD_VAR 0 3
20532: PUSH
20533: LD_INT 100
20535: GREATEREQUAL
20536: IFFALSE 20722
// begin ChangeMissionObjectives ( MOutMine ) ;
20538: LD_STRING MOutMine
20540: PPUSH
20541: CALL_OW 337
// dial_EndMissionDialogBlocker = true ;
20545: LD_ADDR_EXP 14
20549: PUSH
20550: LD_INT 1
20552: ST_TO_ADDR
// DialogueOn ;
20553: CALL_OW 6
// SayRadio ( Platonov , DNextMiss1-Pla-1 ) ;
20557: LD_EXP 47
20561: PPUSH
20562: LD_STRING DNextMiss1-Pla-1
20564: PPUSH
20565: CALL_OW 94
// if not savedVsevolod then
20569: LD_EXP 19
20573: NOT
20574: IFFALSE 20620
// begin SayRadio ( Platonov , DNextMiss2-Pla-1 ) ;
20576: LD_EXP 47
20580: PPUSH
20581: LD_STRING DNextMiss2-Pla-1
20583: PPUSH
20584: CALL_OW 94
// Say ( Burlak , DNextMiss4-Bur-1 ) ;
20588: LD_EXP 39
20592: PPUSH
20593: LD_STRING DNextMiss4-Bur-1
20595: PPUSH
20596: CALL_OW 88
// SayRadio ( Vsevolod , DDieVsev1-Vse-1 ) ;
20600: LD_EXP 49
20604: PPUSH
20605: LD_STRING DDieVsev1-Vse-1
20607: PPUSH
20608: CALL_OW 94
// ForceFinishGame ;
20612: CALL 21395 0 0
// exit ;
20616: GO 20722
// end else
20618: GO 20656
// begin SayRadio ( Platonov , DNextMiss3-Pla-1 ) ;
20620: LD_EXP 47
20624: PPUSH
20625: LD_STRING DNextMiss3-Pla-1
20627: PPUSH
20628: CALL_OW 94
// SayRadio ( Platonov , DNextMiss4-Pla-1 ) ;
20632: LD_EXP 47
20636: PPUSH
20637: LD_STRING DNextMiss4-Pla-1
20639: PPUSH
20640: CALL_OW 94
// Say ( Burlak , DNextMiss4-Bur-1 ) ;
20644: LD_EXP 39
20648: PPUSH
20649: LD_STRING DNextMiss4-Bur-1
20651: PPUSH
20652: CALL_OW 88
// end ; DialogueOff ;
20656: CALL_OW 7
// SelectCharacters ;
20660: CALL 14709 0 0
// canSpawnReinforces = true ;
20664: LD_ADDR_EXP 23
20668: PUSH
20669: LD_INT 1
20671: ST_TO_ADDR
// canRemoveUnits = true ;
20672: LD_ADDR_EXP 25
20676: PUSH
20677: LD_INT 1
20679: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_friend , true ) ;
20680: LD_INT 1
20682: PPUSH
20683: LD_INT 6
20685: PPUSH
20686: LD_INT 1
20688: PPUSH
20689: LD_INT 1
20691: PPUSH
20692: CALL_OW 80
// SetAreaMapShow ( ExitMapArea , 1 ) ;
20696: LD_INT 14
20698: PPUSH
20699: LD_INT 1
20701: PPUSH
20702: CALL_OW 424
// ChangeMissionObjectives ( MOutResearch ) ;
20706: LD_STRING MOutResearch
20708: PPUSH
20709: CALL_OW 337
// ChangeMissionObjectives ( MCars ) ;
20713: LD_STRING MCars
20715: PPUSH
20716: CALL_OW 337
// exit ;
20720: GO 20722
// end ; end ;
20722: PPOPN 3
20724: END
// every 0 0$1 trigger canRemoveUnits do var un ;
20725: LD_EXP 25
20729: IFFALSE 20839
20731: GO 20733
20733: DISABLE
20734: LD_INT 0
20736: PPUSH
// begin enable ;
20737: ENABLE
// SetLives ( Vsevolod , 1000 ) ;
20738: LD_EXP 49
20742: PPUSH
20743: LD_INT 1000
20745: PPUSH
20746: CALL_OW 234
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , ExitMapArea ) ;
20750: LD_INT 22
20752: PUSH
20753: LD_INT 6
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 21
20762: PUSH
20763: LD_INT 1
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PPUSH
20774: CALL_OW 69
20778: PPUSH
20779: LD_INT 14
20781: PPUSH
20782: CALL_OW 113
// for un in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
20786: LD_ADDR_VAR 0 1
20790: PUSH
20791: LD_INT 14
20793: PPUSH
20794: LD_INT 22
20796: PUSH
20797: LD_INT 6
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 21
20806: PUSH
20807: LD_INT 1
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PPUSH
20818: CALL_OW 70
20822: PUSH
20823: FOR_IN
20824: IFFALSE 20837
// RemoveUnit ( un ) ;
20826: LD_VAR 0 1
20830: PPUSH
20831: CALL_OW 64
20835: GO 20823
20837: POP
20838: POP
// end ;
20839: PPOPN 1
20841: END
// every 1 trigger not canGoNorth and FilterUnitsInArea ( NorthBlockerArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do var unit ;
20842: LD_EXP 21
20846: NOT
20847: PUSH
20848: LD_INT 15
20850: PPUSH
20851: LD_INT 22
20853: PUSH
20854: LD_INT 3
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 50
20863: PUSH
20864: EMPTY
20865: LIST
20866: PUSH
20867: LD_INT 2
20869: PUSH
20870: LD_INT 21
20872: PUSH
20873: LD_INT 1
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 21
20882: PUSH
20883: LD_INT 2
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: LIST
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: LIST
20899: PPUSH
20900: CALL_OW 70
20904: AND
20905: IFFALSE 21037
20907: GO 20909
20909: DISABLE
20910: LD_INT 0
20912: PPUSH
// begin enable ;
20913: ENABLE
// for unit in FilterUnitsInArea ( NorthBlockerArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
20914: LD_ADDR_VAR 0 1
20918: PUSH
20919: LD_INT 15
20921: PPUSH
20922: LD_INT 22
20924: PUSH
20925: LD_INT 3
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: LD_INT 50
20934: PUSH
20935: EMPTY
20936: LIST
20937: PUSH
20938: LD_INT 2
20940: PUSH
20941: LD_INT 21
20943: PUSH
20944: LD_INT 1
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 21
20953: PUSH
20954: LD_INT 2
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: LIST
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: LIST
20970: PPUSH
20971: CALL_OW 70
20975: PUSH
20976: FOR_IN
20977: IFFALSE 20993
// ComMoveToArea ( unit , NorthBlockerReturnArea ) ;
20979: LD_VAR 0 1
20983: PPUSH
20984: LD_INT 16
20986: PPUSH
20987: CALL_OW 113
20991: GO 20976
20993: POP
20994: POP
// if not dial_NorthBlocker then
20995: LD_EXP 13
20999: NOT
21000: IFFALSE 21037
// begin dial_NorthBlocker = true ;
21002: LD_ADDR_EXP 13
21006: PUSH
21007: LD_INT 1
21009: ST_TO_ADDR
// Say ( Burlak , DMoveNorth-Bur-1 ) ;
21010: LD_EXP 39
21014: PPUSH
21015: LD_STRING DMoveNorth-Bur-1
21017: PPUSH
21018: CALL_OW 88
// wait ( 0 0$5 ) ;
21022: LD_INT 175
21024: PPUSH
21025: CALL_OW 67
// dial_NorthBlocker = false ;
21029: LD_ADDR_EXP 13
21033: PUSH
21034: LD_INT 0
21036: ST_TO_ADDR
// end ; end ;
21037: PPOPN 1
21039: END
// every 2 2$30 trigger canSpawnReinforces do
21040: LD_EXP 23
21044: IFFALSE 21100
21046: GO 21048
21048: DISABLE
// begin SpawnPlatonovReinforces ;
21049: CALL 2395 0 0
// CenterOnXY ( 134 , 233 ) ;
21053: LD_INT 134
21055: PPUSH
21056: LD_INT 233
21058: PPUSH
21059: CALL_OW 84
// if Kirilenkova and IsPlaced ( Kirilenkova ) then
21063: LD_EXP 48
21067: PUSH
21068: LD_EXP 48
21072: PPUSH
21073: CALL_OW 305
21077: AND
21078: IFFALSE 21092
// Say ( Kirilenkova , DMeetKirilenkova-Kir-1 ) ;
21080: LD_EXP 48
21084: PPUSH
21085: LD_STRING DMeetKirilenkova-Kir-1
21087: PPUSH
21088: CALL_OW 88
// canEndMission = true ;
21092: LD_ADDR_EXP 24
21096: PUSH
21097: LD_INT 1
21099: ST_TO_ADDR
// end ; end_of_file
21100: END
// export function Lose_Burlak ; begin
21101: LD_INT 0
21103: PPUSH
// YouLost ( Burlak ) ;
21104: LD_STRING Burlak
21106: PPUSH
21107: CALL_OW 104
// end ;
21111: LD_VAR 0 1
21115: RET
// export function Lose_Gleb ; begin
21116: LD_INT 0
21118: PPUSH
// SayRadio ( Platonov , DKillGleb-Pla-1 ) ;
21119: LD_EXP 47
21123: PPUSH
21124: LD_STRING DKillGleb-Pla-1
21126: PPUSH
21127: CALL_OW 94
// YouLost ( Gleb ) ;
21131: LD_STRING Gleb
21133: PPUSH
21134: CALL_OW 104
// end ;
21138: LD_VAR 0 1
21142: RET
// every 0 0$1 trigger not canEndMission and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_engineer ] , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
21143: LD_EXP 24
21147: NOT
21148: PUSH
21149: LD_INT 22
21151: PUSH
21152: LD_INT 3
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: PUSH
21159: LD_INT 2
21161: PUSH
21162: LD_INT 25
21164: PUSH
21165: LD_INT 2
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PUSH
21172: LD_INT 30
21174: PUSH
21175: LD_INT 1
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: LD_INT 30
21184: PUSH
21185: LD_INT 0
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 30
21194: PUSH
21195: LD_INT 6
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 30
21204: PUSH
21205: LD_INT 7
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PUSH
21212: LD_INT 30
21214: PUSH
21215: LD_INT 8
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PPUSH
21235: CALL_OW 69
21239: NOT
21240: AND
21241: IFFALSE 21253
21243: GO 21245
21245: DISABLE
// YouLost ( NoDepotNoEngineerNoLab ) ;
21246: LD_STRING NoDepotNoEngineerNoLab
21248: PPUSH
21249: CALL_OW 104
21253: END
// export function Lose_NoDepotNoEngineerNoLab ; begin
21254: LD_INT 0
21256: PPUSH
// YouLost ( NoDepotNoEngineerNoLab ) ;
21257: LD_STRING NoDepotNoEngineerNoLab
21259: PPUSH
21260: CALL_OW 104
// end ; end_of_file
21264: LD_VAR 0 1
21268: RET
// every 0 0$5 trigger canEndMission and not FilterUnitsExceptArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_and , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ] ) do var units , qr ;
21269: LD_EXP 24
21273: PUSH
21274: LD_INT 14
21276: PPUSH
21277: LD_INT 22
21279: PUSH
21280: LD_INT 3
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: LD_INT 50
21289: PUSH
21290: EMPTY
21291: LIST
21292: PUSH
21293: LD_INT 2
21295: PUSH
21296: LD_INT 21
21298: PUSH
21299: LD_INT 1
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 1
21308: PUSH
21309: LD_INT 21
21311: PUSH
21312: LD_INT 2
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 59
21321: PUSH
21322: EMPTY
21323: LIST
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: LIST
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: LIST
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: LIST
21339: PPUSH
21340: CALL_OW 71
21344: NOT
21345: AND
21346: IFFALSE 21392
21348: GO 21350
21350: DISABLE
21351: LD_INT 0
21353: PPUSH
21354: PPUSH
// begin case Query ( QEndGame ) of 1 :
21355: LD_STRING QEndGame
21357: PPUSH
21358: CALL_OW 97
21362: PUSH
21363: LD_INT 1
21365: DOUBLE
21366: EQUAL
21367: IFTRUE 21371
21369: GO 21390
21371: POP
// begin SetRewards ;
21372: CALL 21419 0 0
// SavePlayerCharacters ;
21376: CALL 21583 0 0
// SaveGlobalVariables ;
21380: CALL 21930 0 0
// YouWin ;
21384: CALL_OW 103
// end ; end ;
21388: GO 21391
21390: POP
// enable ;
21391: ENABLE
// end ;
21392: PPOPN 2
21394: END
// export function ForceFinishGame ; begin
21395: LD_INT 0
21397: PPUSH
// SetRewards ;
21398: CALL 21419 0 0
// SavePlayerCharacters ;
21402: CALL 21583 0 0
// SaveGlobalVariables ;
21406: CALL 21930 0 0
// YouWin ;
21410: CALL_OW 103
// end ;
21414: LD_VAR 0 1
21418: RET
// function SetRewards ; begin
21419: LD_INT 0
21421: PPUSH
// if savedVsevolod then
21422: LD_EXP 19
21426: IFFALSE 21440
// AddMedal ( Vsevolod , 1 ) else
21428: LD_STRING Vsevolod
21430: PPUSH
21431: LD_INT 1
21433: PPUSH
21434: CALL_OW 101
21438: GO 21451
// AddMedal ( Vsevolod , - 1 ) ;
21440: LD_STRING Vsevolod
21442: PPUSH
21443: LD_INT 1
21445: NEG
21446: PPUSH
21447: CALL_OW 101
// if not lostAgainBase then
21451: LD_EXP 17
21455: NOT
21456: IFFALSE 21470
// AddMedal ( Ovsyenko , 1 ) else
21458: LD_STRING Ovsyenko
21460: PPUSH
21461: LD_INT 1
21463: PPUSH
21464: CALL_OW 101
21468: GO 21481
// AddMedal ( Ovsyenko , - 1 ) ;
21470: LD_STRING Ovsyenko
21472: PPUSH
21473: LD_INT 1
21475: NEG
21476: PPUSH
21477: CALL_OW 101
// if GetTech ( tech_MatPred , 3 ) = state_researched then
21481: LD_INT 9
21483: PPUSH
21484: LD_INT 3
21486: PPUSH
21487: CALL_OW 321
21491: PUSH
21492: LD_INT 2
21494: EQUAL
21495: IFFALSE 21509
// AddMedal ( Prediction , 1 ) else
21497: LD_STRING Prediction
21499: PPUSH
21500: LD_INT 1
21502: PPUSH
21503: CALL_OW 101
21507: GO 21520
// AddMedal ( Prediction , - 1 ) ;
21509: LD_STRING Prediction
21511: PPUSH
21512: LD_INT 1
21514: NEG
21515: PPUSH
21516: CALL_OW 101
// GiveMedals ( Main ) ;
21520: LD_STRING Main
21522: PPUSH
21523: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ) ;
21527: LD_INT 22
21529: PUSH
21530: LD_INT 3
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 21
21539: PUSH
21540: LD_INT 1
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PUSH
21547: LD_INT 23
21549: PUSH
21550: LD_INT 3
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PUSH
21557: LD_INT 50
21559: PUSH
21560: EMPTY
21561: LIST
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: PPUSH
21569: CALL_OW 69
21573: PPUSH
21574: CALL_OW 43
// end ;
21578: LD_VAR 0 1
21582: RET
// function SavePlayerCharacters ; var randomsToSave ; begin
21583: LD_INT 0
21585: PPUSH
21586: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
21587: LD_EXP 39
21591: PPUSH
21592: LD_STRING Burlak
21594: PPUSH
21595: LD_INT 3
21597: PPUSH
21598: CALL 11288 0 3
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
21602: LD_EXP 40
21606: PPUSH
21607: LD_STRING Karamazov
21609: PPUSH
21610: LD_INT 3
21612: PPUSH
21613: CALL 11288 0 3
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
21617: LD_EXP 41
21621: PPUSH
21622: LD_STRING Petrovova
21624: PPUSH
21625: LD_INT 3
21627: PPUSH
21628: CALL 11288 0 3
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
21632: LD_EXP 42
21636: PPUSH
21637: LD_STRING Gleb
21639: PPUSH
21640: LD_INT 3
21642: PPUSH
21643: CALL 11288 0 3
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
21647: LD_EXP 43
21651: PPUSH
21652: LD_STRING Petrosyan
21654: PPUSH
21655: LD_INT 3
21657: PPUSH
21658: CALL 11288 0 3
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
21662: LD_EXP 45
21666: PPUSH
21667: LD_STRING Dolgov
21669: PPUSH
21670: LD_INT 3
21672: PPUSH
21673: CALL 11288 0 3
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
21677: LD_EXP 46
21681: PPUSH
21682: LD_STRING Lipshchin
21684: PPUSH
21685: LD_INT 3
21687: PPUSH
21688: CALL 11288 0 3
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
21692: LD_EXP 44
21696: PPUSH
21697: LD_STRING Titov
21699: PPUSH
21700: LD_INT 3
21702: PPUSH
21703: CALL 11288 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
21707: LD_EXP 48
21711: PPUSH
21712: LD_STRING Kirilenkova
21714: PPUSH
21715: LD_INT 3
21717: PPUSH
21718: CALL 11288 0 3
// ExtSaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
21722: LD_INT 22
21724: PUSH
21725: LD_INT 3
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 21
21734: PUSH
21735: LD_INT 1
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 2
21744: PUSH
21745: LD_INT 25
21747: PUSH
21748: LD_INT 12
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 25
21757: PUSH
21758: LD_INT 16
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: LD_INT 25
21767: PUSH
21768: LD_INT 15
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: LIST
21785: PPUSH
21786: CALL_OW 69
21790: PPUSH
21791: LD_STRING other_apemans
21793: PPUSH
21794: LD_INT 3
21796: PPUSH
21797: CALL 11344 0 3
// randomsToSave = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova ] ;
21801: LD_ADDR_VAR 0 2
21805: PUSH
21806: LD_INT 22
21808: PUSH
21809: LD_INT 3
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PUSH
21816: LD_INT 21
21818: PUSH
21819: LD_INT 1
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 23
21828: PUSH
21829: LD_INT 3
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 50
21838: PUSH
21839: EMPTY
21840: LIST
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: PPUSH
21848: CALL_OW 69
21852: PUSH
21853: LD_EXP 39
21857: PUSH
21858: LD_EXP 40
21862: PUSH
21863: LD_EXP 41
21867: PUSH
21868: LD_EXP 42
21872: PUSH
21873: LD_EXP 43
21877: PUSH
21878: LD_EXP 44
21882: PUSH
21883: LD_EXP 45
21887: PUSH
21888: LD_EXP 46
21892: PUSH
21893: LD_EXP 48
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: DIFF
21909: ST_TO_ADDR
// ExtSaveCharacters ( randomsToSave , other_survivors , 3 ) ;
21910: LD_VAR 0 2
21914: PPUSH
21915: LD_STRING other_survivors
21917: PPUSH
21918: LD_INT 3
21920: PPUSH
21921: CALL 11344 0 3
// end ;
21925: LD_VAR 0 1
21929: RET
// function SaveGlobalVariables ; var i , driver , driverShortName ; begin
21930: LD_INT 0
21932: PPUSH
21933: PPUSH
21934: PPUSH
21935: PPUSH
// resourcesFrom06 = [ ] ;
21936: LD_ADDR_EXP 8
21940: PUSH
21941: EMPTY
21942: ST_TO_ADDR
// SaveVariable ( techMatPredStatus , 06_TechMatPredStatus_1 ) ;
21943: LD_EXP 6
21947: PPUSH
21948: LD_STRING 06_TechMatPredStatus_1
21950: PPUSH
21951: CALL_OW 39
// for i in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_occupied ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , 89 ] ] ] ) do
21955: LD_ADDR_VAR 0 2
21959: PUSH
21960: LD_INT 14
21962: PPUSH
21963: LD_INT 22
21965: PUSH
21966: LD_INT 3
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 59
21975: PUSH
21976: EMPTY
21977: LIST
21978: PUSH
21979: LD_INT 2
21981: PUSH
21982: LD_INT 34
21984: PUSH
21985: LD_INT 51
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: PUSH
21992: LD_INT 34
21994: PUSH
21995: LD_INT 32
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PUSH
22002: LD_INT 34
22004: PUSH
22005: LD_INT 12
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: PUSH
22012: LD_INT 34
22014: PUSH
22015: LD_INT 89
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: LIST
22033: PPUSH
22034: CALL_OW 70
22038: PUSH
22039: FOR_IN
22040: IFFALSE 22068
// resourcesFrom06 = resourcesFrom06 ^ [ GetMultiCargo ( i ) ] ;
22042: LD_ADDR_EXP 8
22046: PUSH
22047: LD_EXP 8
22051: PUSH
22052: LD_VAR 0 2
22056: PPUSH
22057: CALL 14362 0 1
22061: PUSH
22062: EMPTY
22063: LIST
22064: ADD
22065: ST_TO_ADDR
22066: GO 22039
22068: POP
22069: POP
// SaveVariable ( resourcesFrom06 , 06_ResourcesInCargo_3 ) ;
22070: LD_EXP 8
22074: PPUSH
22075: LD_STRING 06_ResourcesInCargo_3
22077: PPUSH
22078: CALL_OW 39
// for i in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ) do
22082: LD_ADDR_VAR 0 2
22086: PUSH
22087: LD_INT 14
22089: PPUSH
22090: LD_INT 22
22092: PUSH
22093: LD_INT 3
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 21
22102: PUSH
22103: LD_INT 2
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 59
22112: PUSH
22113: EMPTY
22114: LIST
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: LIST
22120: PPUSH
22121: CALL_OW 70
22125: PUSH
22126: FOR_IN
22127: IFFALSE 22479
// begin driver = UnitsInside ( i ) [ 1 ] ;
22129: LD_ADDR_VAR 0 3
22133: PUSH
22134: LD_VAR 0 2
22138: PPUSH
22139: CALL_OW 313
22143: PUSH
22144: LD_INT 1
22146: ARRAY
22147: ST_TO_ADDR
// if driver = Burlak then
22148: LD_VAR 0 3
22152: PUSH
22153: LD_EXP 39
22157: EQUAL
22158: IFFALSE 22168
// driverShortName = Bur ;
22160: LD_ADDR_VAR 0 4
22164: PUSH
22165: LD_STRING Bur
22167: ST_TO_ADDR
// if driver = Karamazov then
22168: LD_VAR 0 3
22172: PUSH
22173: LD_EXP 40
22177: EQUAL
22178: IFFALSE 22188
// driverShortName = Kar ;
22180: LD_ADDR_VAR 0 4
22184: PUSH
22185: LD_STRING Kar
22187: ST_TO_ADDR
// if driver = Petrovova then
22188: LD_VAR 0 3
22192: PUSH
22193: LD_EXP 41
22197: EQUAL
22198: IFFALSE 22208
// driverShortName = Ptr ;
22200: LD_ADDR_VAR 0 4
22204: PUSH
22205: LD_STRING Ptr
22207: ST_TO_ADDR
// if driver = Gleb then
22208: LD_VAR 0 3
22212: PUSH
22213: LD_EXP 42
22217: EQUAL
22218: IFFALSE 22228
// driverShortName = Glb ;
22220: LD_ADDR_VAR 0 4
22224: PUSH
22225: LD_STRING Glb
22227: ST_TO_ADDR
// if driver = Petrosyan then
22228: LD_VAR 0 3
22232: PUSH
22233: LD_EXP 43
22237: EQUAL
22238: IFFALSE 22248
// driverShortName = Pet ;
22240: LD_ADDR_VAR 0 4
22244: PUSH
22245: LD_STRING Pet
22247: ST_TO_ADDR
// if driver = Dolgov then
22248: LD_VAR 0 3
22252: PUSH
22253: LD_EXP 45
22257: EQUAL
22258: IFFALSE 22268
// driverShortName = Dol ;
22260: LD_ADDR_VAR 0 4
22264: PUSH
22265: LD_STRING Dol
22267: ST_TO_ADDR
// if driver = Lipshchin then
22268: LD_VAR 0 3
22272: PUSH
22273: LD_EXP 46
22277: EQUAL
22278: IFFALSE 22288
// driverShortName = Lip ;
22280: LD_ADDR_VAR 0 4
22284: PUSH
22285: LD_STRING Lip
22287: ST_TO_ADDR
// if driver = Titov then
22288: LD_VAR 0 3
22292: PUSH
22293: LD_EXP 44
22297: EQUAL
22298: IFFALSE 22308
// driverShortName = Tit ;
22300: LD_ADDR_VAR 0 4
22304: PUSH
22305: LD_STRING Tit
22307: ST_TO_ADDR
// if driver = Kirilenkova then
22308: LD_VAR 0 3
22312: PUSH
22313: LD_EXP 48
22317: EQUAL
22318: IFFALSE 22328
// driverShortName = Kir ;
22320: LD_ADDR_VAR 0 4
22324: PUSH
22325: LD_STRING Kir
22327: ST_TO_ADDR
// if not driver in [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova ] then
22328: LD_VAR 0 3
22332: PUSH
22333: LD_EXP 39
22337: PUSH
22338: LD_EXP 40
22342: PUSH
22343: LD_EXP 41
22347: PUSH
22348: LD_EXP 42
22352: PUSH
22353: LD_EXP 43
22357: PUSH
22358: LD_EXP 44
22362: PUSH
22363: LD_EXP 45
22367: PUSH
22368: LD_EXP 46
22372: PUSH
22373: LD_EXP 48
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: IN
22389: NOT
22390: IFFALSE 22400
// driverShortName = rand ;
22392: LD_ADDR_VAR 0 4
22396: PUSH
22397: LD_STRING rand
22399: ST_TO_ADDR
// vehsFrom06 = vehsFrom06 ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , driverShortName ] ] ;
22400: LD_ADDR_EXP 7
22404: PUSH
22405: LD_EXP 7
22409: PUSH
22410: LD_VAR 0 2
22414: PPUSH
22415: CALL_OW 248
22419: PUSH
22420: LD_VAR 0 2
22424: PPUSH
22425: CALL_OW 265
22429: PUSH
22430: LD_VAR 0 2
22434: PPUSH
22435: CALL_OW 262
22439: PUSH
22440: LD_VAR 0 2
22444: PPUSH
22445: CALL_OW 263
22449: PUSH
22450: LD_VAR 0 2
22454: PPUSH
22455: CALL_OW 264
22459: PUSH
22460: LD_VAR 0 4
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: PUSH
22473: EMPTY
22474: LIST
22475: ADD
22476: ST_TO_ADDR
// end ;
22477: GO 22126
22479: POP
22480: POP
// SaveVariable ( vehsFrom06 , 06_Vehicles_2 ) ;
22481: LD_EXP 7
22485: PPUSH
22486: LD_STRING 06_Vehicles_2
22488: PPUSH
22489: CALL_OW 39
// SaveVariable ( savedVsevolod , 06_VsevolodStatus_4 ) ;
22493: LD_EXP 19
22497: PPUSH
22498: LD_STRING 06_VsevolodStatus_4
22500: PPUSH
22501: CALL_OW 39
// end ; end_of_file
22505: LD_VAR 0 1
22509: RET
// on UnitDestroyed ( unit ) do begin if unit in ovsyenkoBase then
22510: LD_VAR 0 1
22514: PUSH
22515: LD_EXP 52
22519: IN
22520: IFFALSE 22538
// ovsyenkoBase = ovsyenkoBase diff unit ;
22522: LD_ADDR_EXP 52
22526: PUSH
22527: LD_EXP 52
22531: PUSH
22532: LD_VAR 0 1
22536: DIFF
22537: ST_TO_ADDR
// if unit = Burlak then
22538: LD_VAR 0 1
22542: PUSH
22543: LD_EXP 39
22547: EQUAL
22548: IFFALSE 22554
// Lose_Burlak ;
22550: CALL 21101 0 0
// if unit = Vsevolod and GetSide ( Vsevolod ) = 3 then
22554: LD_VAR 0 1
22558: PUSH
22559: LD_EXP 49
22563: EQUAL
22564: PUSH
22565: LD_EXP 49
22569: PPUSH
22570: CALL_OW 255
22574: PUSH
22575: LD_INT 3
22577: EQUAL
22578: AND
22579: IFFALSE 22589
// savedVsevolod = false ;
22581: LD_ADDR_EXP 19
22585: PUSH
22586: LD_INT 0
22588: ST_TO_ADDR
// if unit = ovsyenko and GetSide ( ovsyenko ) = 3 then
22589: LD_VAR 0 1
22593: PUSH
22594: LD_INT 86
22596: EQUAL
22597: PUSH
22598: LD_INT 86
22600: PPUSH
22601: CALL_OW 255
22605: PUSH
22606: LD_INT 3
22608: EQUAL
22609: AND
22610: IFFALSE 22620
// lostAgainBase = true ;
22612: LD_ADDR_EXP 17
22616: PUSH
22617: LD_INT 1
22619: ST_TO_ADDR
// end ;
22620: PPOPN 1
22622: END
// on UnitDestroyed_Extra ( unit , killer_side , killer_unit ) do begin if unit = Gleb and killer_side = 3 then
22623: LD_VAR 0 1
22627: PUSH
22628: LD_EXP 42
22632: EQUAL
22633: PUSH
22634: LD_VAR 0 2
22638: PUSH
22639: LD_INT 3
22641: EQUAL
22642: AND
22643: IFFALSE 22649
// Lose_Gleb ;
22645: CALL 21116 0 0
// if unit = Vsevolod then
22649: LD_VAR 0 1
22653: PUSH
22654: LD_EXP 49
22658: EQUAL
22659: IFFALSE 22669
// savedVsevolod = false ;
22661: LD_ADDR_EXP 19
22665: PUSH
22666: LD_INT 0
22668: ST_TO_ADDR
// end ;
22669: PPOPN 3
22671: END
// on BuildingComplete ( building ) do begin end ;
22672: PPOPN 1
22674: END
// on BuildingCaptured ( building , side , human ) do begin if GetSide ( human ) = 3 and GetBType ( building ) = b_siberite_mine and not dial_SibTechsBlocker then
22675: LD_VAR 0 3
22679: PPUSH
22680: CALL_OW 255
22684: PUSH
22685: LD_INT 3
22687: EQUAL
22688: PUSH
22689: LD_VAR 0 1
22693: PPUSH
22694: CALL_OW 266
22698: PUSH
22699: LD_INT 30
22701: EQUAL
22702: AND
22703: PUSH
22704: LD_EXP 9
22708: NOT
22709: AND
22710: IFFALSE 22716
// Dial_SibTechs ;
22712: CALL 16567 0 0
// if GetSide ( human ) = 3 and GetBType ( building ) in [ b_depot , b_warehouse ] and GetResourceType ( GetBase ( building ) , mat_siberit ) > 0 and not dial_SibTechsBlocker then
22716: LD_VAR 0 3
22720: PPUSH
22721: CALL_OW 255
22725: PUSH
22726: LD_INT 3
22728: EQUAL
22729: PUSH
22730: LD_VAR 0 1
22734: PPUSH
22735: CALL_OW 266
22739: PUSH
22740: LD_INT 0
22742: PUSH
22743: LD_INT 1
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: IN
22750: AND
22751: PUSH
22752: LD_VAR 0 1
22756: PPUSH
22757: CALL_OW 274
22761: PPUSH
22762: LD_INT 3
22764: PPUSH
22765: CALL_OW 275
22769: PUSH
22770: LD_INT 0
22772: GREATER
22773: AND
22774: PUSH
22775: LD_EXP 9
22779: NOT
22780: AND
22781: IFFALSE 22787
// Dial_SibTechs ;
22783: CALL 16567 0 0
// end ;
22787: PPOPN 3
22789: END
// on Contact ( side1 , side2 ) do begin end ;
22790: PPOPN 2
22792: END
// on VehicleConstructed ( vehicle , building ) do var side , controlTowers , tmp ;
22793: LD_INT 0
22795: PPUSH
22796: PPUSH
22797: PPUSH
// begin if GetSide ( vehicle ) = 1 then
22798: LD_VAR 0 1
22802: PPUSH
22803: CALL_OW 255
22807: PUSH
22808: LD_INT 1
22810: EQUAL
22811: IFFALSE 22978
// begin controlTowers = FilterUnitsInArea ( HeadAmericanBaseArea , [ [ f_side , 1 ] , [ f_ok ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_vehicle ] ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
22813: LD_ADDR_VAR 0 4
22817: PUSH
22818: LD_INT 5
22820: PPUSH
22821: LD_INT 22
22823: PUSH
22824: LD_INT 1
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 50
22833: PUSH
22834: EMPTY
22835: LIST
22836: PUSH
22837: LD_INT 2
22839: PUSH
22840: LD_INT 21
22842: PUSH
22843: LD_INT 3
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 21
22852: PUSH
22853: LD_INT 2
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: LIST
22864: PUSH
22865: LD_INT 2
22867: PUSH
22868: LD_INT 30
22870: PUSH
22871: LD_INT 36
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 34
22880: PUSH
22881: LD_INT 31
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: LIST
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: PPUSH
22899: CALL_OW 70
22903: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote and controlTowers then
22904: LD_VAR 0 1
22908: PPUSH
22909: CALL_OW 263
22913: PUSH
22914: LD_INT 2
22916: EQUAL
22917: PUSH
22918: LD_VAR 0 4
22922: AND
22923: IFFALSE 22978
// begin tmp = UnitsInside ( controlTowers [ 1 ] ) ;
22925: LD_ADDR_VAR 0 5
22929: PUSH
22930: LD_VAR 0 4
22934: PUSH
22935: LD_INT 1
22937: ARRAY
22938: PPUSH
22939: CALL_OW 313
22943: ST_TO_ADDR
// if tmp then
22944: LD_VAR 0 5
22948: IFFALSE 22978
// LinkVehicleToHuman ( vehicle , tmp [ rand ( 1 , tmp ) ] ) ;
22950: LD_VAR 0 1
22954: PPUSH
22955: LD_VAR 0 5
22959: PUSH
22960: LD_INT 1
22962: PPUSH
22963: LD_VAR 0 5
22967: PPUSH
22968: CALL_OW 12
22972: ARRAY
22973: PPUSH
22974: CALL_OW 53
// end ; end ; end ;
22978: PPOPN 5
22980: END
// on ResearchComplete ( research , building ) do begin if research = tech_TauField then
22981: LD_VAR 0 1
22985: PUSH
22986: LD_INT 30
22988: EQUAL
22989: IFFALSE 22995
// Dial_ResearchTauField ;
22991: CALL 19952 0 0
// if research = tech_SibEng and GetTech ( tech_TauField , 3 ) = state_researched then
22995: LD_VAR 0 1
22999: PUSH
23000: LD_INT 22
23002: EQUAL
23003: PUSH
23004: LD_INT 30
23006: PPUSH
23007: LD_INT 3
23009: PPUSH
23010: CALL_OW 321
23014: PUSH
23015: LD_INT 2
23017: EQUAL
23018: AND
23019: IFFALSE 23028
// ChangeMissionObjectives ( MOutResearch ) ;
23021: LD_STRING MOutResearch
23023: PPUSH
23024: CALL_OW 337
// if research = tech_MatPred then
23028: LD_VAR 0 1
23032: PUSH
23033: LD_INT 9
23035: EQUAL
23036: IFFALSE 23042
// Dial_ResearchMatPredictions ;
23038: CALL 16722 0 0
// end ; end_of_file
23042: PPOPN 2
23044: END
// every 0 0$1 trigger enableVsevolodCounter do
23045: LD_EXP 22
23049: IFFALSE 23069
23051: GO 23053
23053: DISABLE
// begin enable ;
23054: ENABLE
// timeToAttack = timeToAttack + 0 0$01 ;
23055: LD_ADDR_EXP 26
23059: PUSH
23060: LD_EXP 26
23064: PUSH
23065: LD_INT 35
23067: PLUS
23068: ST_TO_ADDR
// end ; end_of_file
23069: END
// every 0 0$01 do var timer ;
23070: GO 23072
23072: DISABLE
23073: LD_INT 0
23075: PPUSH
// begin timer := 5 5$30 ;
23076: LD_ADDR_VAR 0 1
23080: PUSH
23081: LD_INT 11550
23083: ST_TO_ADDR
// repeat wait ( timer ) ;
23084: LD_VAR 0 1
23088: PPUSH
23089: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
23093: LD_INT 3
23095: PPUSH
23096: LD_INT 5
23098: PPUSH
23099: CALL_OW 12
23103: PPUSH
23104: LD_INT 20
23106: PPUSH
23107: LD_INT 1
23109: PPUSH
23110: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
23114: LD_ADDR_EXP 27
23118: PUSH
23119: LD_EXP 27
23123: PUSH
23124: LD_INT 1
23126: PLUS
23127: ST_TO_ADDR
// until cratesSpawned = 3 ;
23128: LD_EXP 27
23132: PUSH
23133: LD_INT 3
23135: EQUAL
23136: IFFALSE 23084
// end ; end_of_file
23138: PPOPN 1
23140: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
23141: LD_INT 0
23143: PPUSH
// ar_crane := 88 ;
23144: LD_ADDR_EXP 64
23148: PUSH
23149: LD_INT 88
23151: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
23152: LD_ADDR_EXP 59
23156: PUSH
23157: LD_INT 89
23159: ST_TO_ADDR
// us_hack := 99 ;
23160: LD_ADDR_EXP 60
23164: PUSH
23165: LD_INT 99
23167: ST_TO_ADDR
// us_artillery := 97 ;
23168: LD_ADDR_EXP 61
23172: PUSH
23173: LD_INT 97
23175: ST_TO_ADDR
// ar_bio_bomb := 91 ;
23176: LD_ADDR_EXP 62
23180: PUSH
23181: LD_INT 91
23183: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
23184: LD_ADDR_EXP 63
23188: PUSH
23189: LD_INT 92
23191: ST_TO_ADDR
// ru_radar := 98 ;
23192: LD_ADDR_EXP 58
23196: PUSH
23197: LD_INT 98
23199: ST_TO_ADDR
// tech_Artillery := 80 ;
23200: LD_ADDR_EXP 65
23204: PUSH
23205: LD_INT 80
23207: ST_TO_ADDR
// tech_RadMat := 81 ;
23208: LD_ADDR_EXP 66
23212: PUSH
23213: LD_INT 81
23215: ST_TO_ADDR
// tech_BasicTools := 82 ;
23216: LD_ADDR_EXP 67
23220: PUSH
23221: LD_INT 82
23223: ST_TO_ADDR
// tech_Cargo := 83 ;
23224: LD_ADDR_EXP 68
23228: PUSH
23229: LD_INT 83
23231: ST_TO_ADDR
// tech_Track := 84 ;
23232: LD_ADDR_EXP 69
23236: PUSH
23237: LD_INT 84
23239: ST_TO_ADDR
// tech_Crane := 85 ;
23240: LD_ADDR_EXP 70
23244: PUSH
23245: LD_INT 85
23247: ST_TO_ADDR
// tech_Bulldozer := 86 ;
23248: LD_ADDR_EXP 71
23252: PUSH
23253: LD_INT 86
23255: ST_TO_ADDR
// tech_Hovercraft := 87 ;
23256: LD_ADDR_EXP 72
23260: PUSH
23261: LD_INT 87
23263: ST_TO_ADDR
// end ;
23264: LD_VAR 0 1
23268: RET
// every 1 do
23269: GO 23271
23271: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
23272: CALL 23141 0 0
23276: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
23277: LD_VAR 0 2
23281: PUSH
23282: LD_INT 100
23284: EQUAL
23285: IFFALSE 24234
// begin if not StreamModeActive then
23287: LD_EXP 73
23291: NOT
23292: IFFALSE 23302
// StreamModeActive := true ;
23294: LD_ADDR_EXP 73
23298: PUSH
23299: LD_INT 1
23301: ST_TO_ADDR
// if p3 = 0 then
23302: LD_VAR 0 3
23306: PUSH
23307: LD_INT 0
23309: EQUAL
23310: IFFALSE 23316
// InitStreamMode ;
23312: CALL 24467 0 0
// if p3 = 1 then
23316: LD_VAR 0 3
23320: PUSH
23321: LD_INT 1
23323: EQUAL
23324: IFFALSE 23334
// sRocket := true ;
23326: LD_ADDR_EXP 78
23330: PUSH
23331: LD_INT 1
23333: ST_TO_ADDR
// if p3 = 2 then
23334: LD_VAR 0 3
23338: PUSH
23339: LD_INT 2
23341: EQUAL
23342: IFFALSE 23352
// sSpeed := true ;
23344: LD_ADDR_EXP 77
23348: PUSH
23349: LD_INT 1
23351: ST_TO_ADDR
// if p3 = 3 then
23352: LD_VAR 0 3
23356: PUSH
23357: LD_INT 3
23359: EQUAL
23360: IFFALSE 23370
// sEngine := true ;
23362: LD_ADDR_EXP 79
23366: PUSH
23367: LD_INT 1
23369: ST_TO_ADDR
// if p3 = 4 then
23370: LD_VAR 0 3
23374: PUSH
23375: LD_INT 4
23377: EQUAL
23378: IFFALSE 23388
// sSpec := true ;
23380: LD_ADDR_EXP 76
23384: PUSH
23385: LD_INT 1
23387: ST_TO_ADDR
// if p3 = 5 then
23388: LD_VAR 0 3
23392: PUSH
23393: LD_INT 5
23395: EQUAL
23396: IFFALSE 23406
// sLevel := true ;
23398: LD_ADDR_EXP 80
23402: PUSH
23403: LD_INT 1
23405: ST_TO_ADDR
// if p3 = 6 then
23406: LD_VAR 0 3
23410: PUSH
23411: LD_INT 6
23413: EQUAL
23414: IFFALSE 23424
// sArmoury := true ;
23416: LD_ADDR_EXP 81
23420: PUSH
23421: LD_INT 1
23423: ST_TO_ADDR
// if p3 = 7 then
23424: LD_VAR 0 3
23428: PUSH
23429: LD_INT 7
23431: EQUAL
23432: IFFALSE 23442
// sRadar := true ;
23434: LD_ADDR_EXP 82
23438: PUSH
23439: LD_INT 1
23441: ST_TO_ADDR
// if p3 = 8 then
23442: LD_VAR 0 3
23446: PUSH
23447: LD_INT 8
23449: EQUAL
23450: IFFALSE 23460
// sBunker := true ;
23452: LD_ADDR_EXP 83
23456: PUSH
23457: LD_INT 1
23459: ST_TO_ADDR
// if p3 = 9 then
23460: LD_VAR 0 3
23464: PUSH
23465: LD_INT 9
23467: EQUAL
23468: IFFALSE 23478
// sHack := true ;
23470: LD_ADDR_EXP 84
23474: PUSH
23475: LD_INT 1
23477: ST_TO_ADDR
// if p3 = 10 then
23478: LD_VAR 0 3
23482: PUSH
23483: LD_INT 10
23485: EQUAL
23486: IFFALSE 23496
// sFire := true ;
23488: LD_ADDR_EXP 85
23492: PUSH
23493: LD_INT 1
23495: ST_TO_ADDR
// if p3 = 11 then
23496: LD_VAR 0 3
23500: PUSH
23501: LD_INT 11
23503: EQUAL
23504: IFFALSE 23514
// sRefresh := true ;
23506: LD_ADDR_EXP 86
23510: PUSH
23511: LD_INT 1
23513: ST_TO_ADDR
// if p3 = 12 then
23514: LD_VAR 0 3
23518: PUSH
23519: LD_INT 12
23521: EQUAL
23522: IFFALSE 23532
// sExp := true ;
23524: LD_ADDR_EXP 87
23528: PUSH
23529: LD_INT 1
23531: ST_TO_ADDR
// if p3 = 13 then
23532: LD_VAR 0 3
23536: PUSH
23537: LD_INT 13
23539: EQUAL
23540: IFFALSE 23550
// sDepot := true ;
23542: LD_ADDR_EXP 88
23546: PUSH
23547: LD_INT 1
23549: ST_TO_ADDR
// if p3 = 14 then
23550: LD_VAR 0 3
23554: PUSH
23555: LD_INT 14
23557: EQUAL
23558: IFFALSE 23568
// sFlag := true ;
23560: LD_ADDR_EXP 89
23564: PUSH
23565: LD_INT 1
23567: ST_TO_ADDR
// if p3 = 15 then
23568: LD_VAR 0 3
23572: PUSH
23573: LD_INT 15
23575: EQUAL
23576: IFFALSE 23586
// sKamikadze := true ;
23578: LD_ADDR_EXP 97
23582: PUSH
23583: LD_INT 1
23585: ST_TO_ADDR
// if p3 = 16 then
23586: LD_VAR 0 3
23590: PUSH
23591: LD_INT 16
23593: EQUAL
23594: IFFALSE 23604
// sTroll := true ;
23596: LD_ADDR_EXP 98
23600: PUSH
23601: LD_INT 1
23603: ST_TO_ADDR
// if p3 = 17 then
23604: LD_VAR 0 3
23608: PUSH
23609: LD_INT 17
23611: EQUAL
23612: IFFALSE 23622
// sSlow := true ;
23614: LD_ADDR_EXP 99
23618: PUSH
23619: LD_INT 1
23621: ST_TO_ADDR
// if p3 = 18 then
23622: LD_VAR 0 3
23626: PUSH
23627: LD_INT 18
23629: EQUAL
23630: IFFALSE 23640
// sLack := true ;
23632: LD_ADDR_EXP 100
23636: PUSH
23637: LD_INT 1
23639: ST_TO_ADDR
// if p3 = 19 then
23640: LD_VAR 0 3
23644: PUSH
23645: LD_INT 19
23647: EQUAL
23648: IFFALSE 23658
// sTank := true ;
23650: LD_ADDR_EXP 102
23654: PUSH
23655: LD_INT 1
23657: ST_TO_ADDR
// if p3 = 20 then
23658: LD_VAR 0 3
23662: PUSH
23663: LD_INT 20
23665: EQUAL
23666: IFFALSE 23676
// sRemote := true ;
23668: LD_ADDR_EXP 103
23672: PUSH
23673: LD_INT 1
23675: ST_TO_ADDR
// if p3 = 21 then
23676: LD_VAR 0 3
23680: PUSH
23681: LD_INT 21
23683: EQUAL
23684: IFFALSE 23694
// sPowell := true ;
23686: LD_ADDR_EXP 104
23690: PUSH
23691: LD_INT 1
23693: ST_TO_ADDR
// if p3 = 22 then
23694: LD_VAR 0 3
23698: PUSH
23699: LD_INT 22
23701: EQUAL
23702: IFFALSE 23712
// sTeleport := true ;
23704: LD_ADDR_EXP 107
23708: PUSH
23709: LD_INT 1
23711: ST_TO_ADDR
// if p3 = 23 then
23712: LD_VAR 0 3
23716: PUSH
23717: LD_INT 23
23719: EQUAL
23720: IFFALSE 23730
// sOilTower := true ;
23722: LD_ADDR_EXP 109
23726: PUSH
23727: LD_INT 1
23729: ST_TO_ADDR
// if p3 = 24 then
23730: LD_VAR 0 3
23734: PUSH
23735: LD_INT 24
23737: EQUAL
23738: IFFALSE 23748
// sShovel := true ;
23740: LD_ADDR_EXP 110
23744: PUSH
23745: LD_INT 1
23747: ST_TO_ADDR
// if p3 = 25 then
23748: LD_VAR 0 3
23752: PUSH
23753: LD_INT 25
23755: EQUAL
23756: IFFALSE 23766
// sSheik := true ;
23758: LD_ADDR_EXP 111
23762: PUSH
23763: LD_INT 1
23765: ST_TO_ADDR
// if p3 = 26 then
23766: LD_VAR 0 3
23770: PUSH
23771: LD_INT 26
23773: EQUAL
23774: IFFALSE 23784
// sEarthquake := true ;
23776: LD_ADDR_EXP 113
23780: PUSH
23781: LD_INT 1
23783: ST_TO_ADDR
// if p3 = 27 then
23784: LD_VAR 0 3
23788: PUSH
23789: LD_INT 27
23791: EQUAL
23792: IFFALSE 23802
// sAI := true ;
23794: LD_ADDR_EXP 114
23798: PUSH
23799: LD_INT 1
23801: ST_TO_ADDR
// if p3 = 28 then
23802: LD_VAR 0 3
23806: PUSH
23807: LD_INT 28
23809: EQUAL
23810: IFFALSE 23820
// sCargo := true ;
23812: LD_ADDR_EXP 117
23816: PUSH
23817: LD_INT 1
23819: ST_TO_ADDR
// if p3 = 29 then
23820: LD_VAR 0 3
23824: PUSH
23825: LD_INT 29
23827: EQUAL
23828: IFFALSE 23838
// sDLaser := true ;
23830: LD_ADDR_EXP 118
23834: PUSH
23835: LD_INT 1
23837: ST_TO_ADDR
// if p3 = 30 then
23838: LD_VAR 0 3
23842: PUSH
23843: LD_INT 30
23845: EQUAL
23846: IFFALSE 23856
// sExchange := true ;
23848: LD_ADDR_EXP 119
23852: PUSH
23853: LD_INT 1
23855: ST_TO_ADDR
// if p3 = 31 then
23856: LD_VAR 0 3
23860: PUSH
23861: LD_INT 31
23863: EQUAL
23864: IFFALSE 23874
// sFac := true ;
23866: LD_ADDR_EXP 120
23870: PUSH
23871: LD_INT 1
23873: ST_TO_ADDR
// if p3 = 32 then
23874: LD_VAR 0 3
23878: PUSH
23879: LD_INT 32
23881: EQUAL
23882: IFFALSE 23892
// sPower := true ;
23884: LD_ADDR_EXP 121
23888: PUSH
23889: LD_INT 1
23891: ST_TO_ADDR
// if p3 = 33 then
23892: LD_VAR 0 3
23896: PUSH
23897: LD_INT 33
23899: EQUAL
23900: IFFALSE 23910
// sRandom := true ;
23902: LD_ADDR_EXP 122
23906: PUSH
23907: LD_INT 1
23909: ST_TO_ADDR
// if p3 = 34 then
23910: LD_VAR 0 3
23914: PUSH
23915: LD_INT 34
23917: EQUAL
23918: IFFALSE 23928
// sShield := true ;
23920: LD_ADDR_EXP 123
23924: PUSH
23925: LD_INT 1
23927: ST_TO_ADDR
// if p3 = 35 then
23928: LD_VAR 0 3
23932: PUSH
23933: LD_INT 35
23935: EQUAL
23936: IFFALSE 23946
// sTime := true ;
23938: LD_ADDR_EXP 124
23942: PUSH
23943: LD_INT 1
23945: ST_TO_ADDR
// if p3 = 36 then
23946: LD_VAR 0 3
23950: PUSH
23951: LD_INT 36
23953: EQUAL
23954: IFFALSE 23964
// sTools := true ;
23956: LD_ADDR_EXP 125
23960: PUSH
23961: LD_INT 1
23963: ST_TO_ADDR
// if p3 = 101 then
23964: LD_VAR 0 3
23968: PUSH
23969: LD_INT 101
23971: EQUAL
23972: IFFALSE 23982
// sSold := true ;
23974: LD_ADDR_EXP 90
23978: PUSH
23979: LD_INT 1
23981: ST_TO_ADDR
// if p3 = 102 then
23982: LD_VAR 0 3
23986: PUSH
23987: LD_INT 102
23989: EQUAL
23990: IFFALSE 24000
// sDiff := true ;
23992: LD_ADDR_EXP 91
23996: PUSH
23997: LD_INT 1
23999: ST_TO_ADDR
// if p3 = 103 then
24000: LD_VAR 0 3
24004: PUSH
24005: LD_INT 103
24007: EQUAL
24008: IFFALSE 24018
// sFog := true ;
24010: LD_ADDR_EXP 94
24014: PUSH
24015: LD_INT 1
24017: ST_TO_ADDR
// if p3 = 104 then
24018: LD_VAR 0 3
24022: PUSH
24023: LD_INT 104
24025: EQUAL
24026: IFFALSE 24036
// sReset := true ;
24028: LD_ADDR_EXP 95
24032: PUSH
24033: LD_INT 1
24035: ST_TO_ADDR
// if p3 = 105 then
24036: LD_VAR 0 3
24040: PUSH
24041: LD_INT 105
24043: EQUAL
24044: IFFALSE 24054
// sSun := true ;
24046: LD_ADDR_EXP 96
24050: PUSH
24051: LD_INT 1
24053: ST_TO_ADDR
// if p3 = 106 then
24054: LD_VAR 0 3
24058: PUSH
24059: LD_INT 106
24061: EQUAL
24062: IFFALSE 24072
// sTiger := true ;
24064: LD_ADDR_EXP 92
24068: PUSH
24069: LD_INT 1
24071: ST_TO_ADDR
// if p3 = 107 then
24072: LD_VAR 0 3
24076: PUSH
24077: LD_INT 107
24079: EQUAL
24080: IFFALSE 24090
// sBomb := true ;
24082: LD_ADDR_EXP 93
24086: PUSH
24087: LD_INT 1
24089: ST_TO_ADDR
// if p3 = 108 then
24090: LD_VAR 0 3
24094: PUSH
24095: LD_INT 108
24097: EQUAL
24098: IFFALSE 24108
// sWound := true ;
24100: LD_ADDR_EXP 101
24104: PUSH
24105: LD_INT 1
24107: ST_TO_ADDR
// if p3 = 109 then
24108: LD_VAR 0 3
24112: PUSH
24113: LD_INT 109
24115: EQUAL
24116: IFFALSE 24126
// sBetray := true ;
24118: LD_ADDR_EXP 105
24122: PUSH
24123: LD_INT 1
24125: ST_TO_ADDR
// if p3 = 110 then
24126: LD_VAR 0 3
24130: PUSH
24131: LD_INT 110
24133: EQUAL
24134: IFFALSE 24144
// sContamin := true ;
24136: LD_ADDR_EXP 106
24140: PUSH
24141: LD_INT 1
24143: ST_TO_ADDR
// if p3 = 111 then
24144: LD_VAR 0 3
24148: PUSH
24149: LD_INT 111
24151: EQUAL
24152: IFFALSE 24162
// sOil := true ;
24154: LD_ADDR_EXP 108
24158: PUSH
24159: LD_INT 1
24161: ST_TO_ADDR
// if p3 = 112 then
24162: LD_VAR 0 3
24166: PUSH
24167: LD_INT 112
24169: EQUAL
24170: IFFALSE 24180
// sStu := true ;
24172: LD_ADDR_EXP 112
24176: PUSH
24177: LD_INT 1
24179: ST_TO_ADDR
// if p3 = 113 then
24180: LD_VAR 0 3
24184: PUSH
24185: LD_INT 113
24187: EQUAL
24188: IFFALSE 24198
// sBazooka := true ;
24190: LD_ADDR_EXP 115
24194: PUSH
24195: LD_INT 1
24197: ST_TO_ADDR
// if p3 = 114 then
24198: LD_VAR 0 3
24202: PUSH
24203: LD_INT 114
24205: EQUAL
24206: IFFALSE 24216
// sMortar := true ;
24208: LD_ADDR_EXP 116
24212: PUSH
24213: LD_INT 1
24215: ST_TO_ADDR
// if p3 = 115 then
24216: LD_VAR 0 3
24220: PUSH
24221: LD_INT 115
24223: EQUAL
24224: IFFALSE 24234
// sRanger := true ;
24226: LD_ADDR_EXP 126
24230: PUSH
24231: LD_INT 1
24233: ST_TO_ADDR
// end ; if p2 = 101 then
24234: LD_VAR 0 2
24238: PUSH
24239: LD_INT 101
24241: EQUAL
24242: IFFALSE 24445
// begin case p3 of 1 :
24244: LD_VAR 0 3
24248: PUSH
24249: LD_INT 1
24251: DOUBLE
24252: EQUAL
24253: IFTRUE 24257
24255: GO 24264
24257: POP
// hHackUnlimitedResources ; 2 :
24258: CALL 34564 0 0
24262: GO 24445
24264: LD_INT 2
24266: DOUBLE
24267: EQUAL
24268: IFTRUE 24272
24270: GO 24279
24272: POP
// hHackSetLevel10 ; 3 :
24273: CALL 34697 0 0
24277: GO 24445
24279: LD_INT 3
24281: DOUBLE
24282: EQUAL
24283: IFTRUE 24287
24285: GO 24294
24287: POP
// hHackSetLevel10YourUnits ; 4 :
24288: CALL 34782 0 0
24292: GO 24445
24294: LD_INT 4
24296: DOUBLE
24297: EQUAL
24298: IFTRUE 24302
24300: GO 24324
24302: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
24303: LD_VAR 0 4
24307: PPUSH
24308: LD_VAR 0 5
24312: PPUSH
24313: LD_VAR 0 6
24317: PPUSH
24318: CALL 34872 0 3
24322: GO 24445
24324: LD_INT 5
24326: DOUBLE
24327: EQUAL
24328: IFTRUE 24332
24330: GO 24339
24332: POP
// hHackSpawnVehicle ; 6 :
24333: CALL 34933 0 0
24337: GO 24445
24339: LD_INT 6
24341: DOUBLE
24342: EQUAL
24343: IFTRUE 24347
24345: GO 24354
24347: POP
// hHackInvincible ; 7 :
24348: CALL 35479 0 0
24352: GO 24445
24354: LD_INT 7
24356: DOUBLE
24357: EQUAL
24358: IFTRUE 24362
24360: GO 24369
24362: POP
// hHackInvisible ; 8 :
24363: CALL 35590 0 0
24367: GO 24445
24369: LD_INT 8
24371: DOUBLE
24372: EQUAL
24373: IFTRUE 24377
24375: GO 24384
24377: POP
// hHackChangeYourSide ; 9 :
24378: CALL 35647 0 0
24382: GO 24445
24384: LD_INT 9
24386: DOUBLE
24387: EQUAL
24388: IFTRUE 24392
24390: GO 24399
24392: POP
// hHackChangeUnitSide ; 10 :
24393: CALL 35689 0 0
24397: GO 24445
24399: LD_INT 10
24401: DOUBLE
24402: EQUAL
24403: IFTRUE 24407
24405: GO 24414
24407: POP
// hHackFog ; 11 :
24408: CALL 35790 0 0
24412: GO 24445
24414: LD_INT 11
24416: DOUBLE
24417: EQUAL
24418: IFTRUE 24422
24420: GO 24429
24422: POP
// hHackApeman ; 12 :
24423: CALL 35805 0 0
24427: GO 24445
24429: LD_INT 12
24431: DOUBLE
24432: EQUAL
24433: IFTRUE 24437
24435: GO 24444
24437: POP
// hHackBoom ; end ;
24438: CALL 35890 0 0
24442: GO 24445
24444: POP
// end ; end ;
24445: PPOPN 6
24447: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
24448: GO 24450
24450: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
24451: LD_STRING initStreamRollete();
24453: PPUSH
24454: CALL_OW 559
// InitStreamMode ;
24458: CALL 24467 0 0
// DefineStreamItems ( ) ;
24462: CALL 24907 0 0
// end ;
24466: END
// function InitStreamMode ; begin
24467: LD_INT 0
24469: PPUSH
// streamModeActive := false ;
24470: LD_ADDR_EXP 73
24474: PUSH
24475: LD_INT 0
24477: ST_TO_ADDR
// normalCounter := 36 ;
24478: LD_ADDR_EXP 74
24482: PUSH
24483: LD_INT 36
24485: ST_TO_ADDR
// hardcoreCounter := 16 ;
24486: LD_ADDR_EXP 75
24490: PUSH
24491: LD_INT 16
24493: ST_TO_ADDR
// sRocket := false ;
24494: LD_ADDR_EXP 78
24498: PUSH
24499: LD_INT 0
24501: ST_TO_ADDR
// sSpeed := false ;
24502: LD_ADDR_EXP 77
24506: PUSH
24507: LD_INT 0
24509: ST_TO_ADDR
// sEngine := false ;
24510: LD_ADDR_EXP 79
24514: PUSH
24515: LD_INT 0
24517: ST_TO_ADDR
// sSpec := false ;
24518: LD_ADDR_EXP 76
24522: PUSH
24523: LD_INT 0
24525: ST_TO_ADDR
// sLevel := false ;
24526: LD_ADDR_EXP 80
24530: PUSH
24531: LD_INT 0
24533: ST_TO_ADDR
// sArmoury := false ;
24534: LD_ADDR_EXP 81
24538: PUSH
24539: LD_INT 0
24541: ST_TO_ADDR
// sRadar := false ;
24542: LD_ADDR_EXP 82
24546: PUSH
24547: LD_INT 0
24549: ST_TO_ADDR
// sBunker := false ;
24550: LD_ADDR_EXP 83
24554: PUSH
24555: LD_INT 0
24557: ST_TO_ADDR
// sHack := false ;
24558: LD_ADDR_EXP 84
24562: PUSH
24563: LD_INT 0
24565: ST_TO_ADDR
// sFire := false ;
24566: LD_ADDR_EXP 85
24570: PUSH
24571: LD_INT 0
24573: ST_TO_ADDR
// sRefresh := false ;
24574: LD_ADDR_EXP 86
24578: PUSH
24579: LD_INT 0
24581: ST_TO_ADDR
// sExp := false ;
24582: LD_ADDR_EXP 87
24586: PUSH
24587: LD_INT 0
24589: ST_TO_ADDR
// sDepot := false ;
24590: LD_ADDR_EXP 88
24594: PUSH
24595: LD_INT 0
24597: ST_TO_ADDR
// sFlag := false ;
24598: LD_ADDR_EXP 89
24602: PUSH
24603: LD_INT 0
24605: ST_TO_ADDR
// sKamikadze := false ;
24606: LD_ADDR_EXP 97
24610: PUSH
24611: LD_INT 0
24613: ST_TO_ADDR
// sTroll := false ;
24614: LD_ADDR_EXP 98
24618: PUSH
24619: LD_INT 0
24621: ST_TO_ADDR
// sSlow := false ;
24622: LD_ADDR_EXP 99
24626: PUSH
24627: LD_INT 0
24629: ST_TO_ADDR
// sLack := false ;
24630: LD_ADDR_EXP 100
24634: PUSH
24635: LD_INT 0
24637: ST_TO_ADDR
// sTank := false ;
24638: LD_ADDR_EXP 102
24642: PUSH
24643: LD_INT 0
24645: ST_TO_ADDR
// sRemote := false ;
24646: LD_ADDR_EXP 103
24650: PUSH
24651: LD_INT 0
24653: ST_TO_ADDR
// sPowell := false ;
24654: LD_ADDR_EXP 104
24658: PUSH
24659: LD_INT 0
24661: ST_TO_ADDR
// sTeleport := false ;
24662: LD_ADDR_EXP 107
24666: PUSH
24667: LD_INT 0
24669: ST_TO_ADDR
// sOilTower := false ;
24670: LD_ADDR_EXP 109
24674: PUSH
24675: LD_INT 0
24677: ST_TO_ADDR
// sShovel := false ;
24678: LD_ADDR_EXP 110
24682: PUSH
24683: LD_INT 0
24685: ST_TO_ADDR
// sSheik := false ;
24686: LD_ADDR_EXP 111
24690: PUSH
24691: LD_INT 0
24693: ST_TO_ADDR
// sEarthquake := false ;
24694: LD_ADDR_EXP 113
24698: PUSH
24699: LD_INT 0
24701: ST_TO_ADDR
// sAI := false ;
24702: LD_ADDR_EXP 114
24706: PUSH
24707: LD_INT 0
24709: ST_TO_ADDR
// sCargo := false ;
24710: LD_ADDR_EXP 117
24714: PUSH
24715: LD_INT 0
24717: ST_TO_ADDR
// sDLaser := false ;
24718: LD_ADDR_EXP 118
24722: PUSH
24723: LD_INT 0
24725: ST_TO_ADDR
// sExchange := false ;
24726: LD_ADDR_EXP 119
24730: PUSH
24731: LD_INT 0
24733: ST_TO_ADDR
// sFac := false ;
24734: LD_ADDR_EXP 120
24738: PUSH
24739: LD_INT 0
24741: ST_TO_ADDR
// sPower := false ;
24742: LD_ADDR_EXP 121
24746: PUSH
24747: LD_INT 0
24749: ST_TO_ADDR
// sRandom := false ;
24750: LD_ADDR_EXP 122
24754: PUSH
24755: LD_INT 0
24757: ST_TO_ADDR
// sShield := false ;
24758: LD_ADDR_EXP 123
24762: PUSH
24763: LD_INT 0
24765: ST_TO_ADDR
// sTime := false ;
24766: LD_ADDR_EXP 124
24770: PUSH
24771: LD_INT 0
24773: ST_TO_ADDR
// sTools := false ;
24774: LD_ADDR_EXP 125
24778: PUSH
24779: LD_INT 0
24781: ST_TO_ADDR
// sSold := false ;
24782: LD_ADDR_EXP 90
24786: PUSH
24787: LD_INT 0
24789: ST_TO_ADDR
// sDiff := false ;
24790: LD_ADDR_EXP 91
24794: PUSH
24795: LD_INT 0
24797: ST_TO_ADDR
// sFog := false ;
24798: LD_ADDR_EXP 94
24802: PUSH
24803: LD_INT 0
24805: ST_TO_ADDR
// sReset := false ;
24806: LD_ADDR_EXP 95
24810: PUSH
24811: LD_INT 0
24813: ST_TO_ADDR
// sSun := false ;
24814: LD_ADDR_EXP 96
24818: PUSH
24819: LD_INT 0
24821: ST_TO_ADDR
// sTiger := false ;
24822: LD_ADDR_EXP 92
24826: PUSH
24827: LD_INT 0
24829: ST_TO_ADDR
// sBomb := false ;
24830: LD_ADDR_EXP 93
24834: PUSH
24835: LD_INT 0
24837: ST_TO_ADDR
// sWound := false ;
24838: LD_ADDR_EXP 101
24842: PUSH
24843: LD_INT 0
24845: ST_TO_ADDR
// sBetray := false ;
24846: LD_ADDR_EXP 105
24850: PUSH
24851: LD_INT 0
24853: ST_TO_ADDR
// sContamin := false ;
24854: LD_ADDR_EXP 106
24858: PUSH
24859: LD_INT 0
24861: ST_TO_ADDR
// sOil := false ;
24862: LD_ADDR_EXP 108
24866: PUSH
24867: LD_INT 0
24869: ST_TO_ADDR
// sStu := false ;
24870: LD_ADDR_EXP 112
24874: PUSH
24875: LD_INT 0
24877: ST_TO_ADDR
// sBazooka := false ;
24878: LD_ADDR_EXP 115
24882: PUSH
24883: LD_INT 0
24885: ST_TO_ADDR
// sMortar := false ;
24886: LD_ADDR_EXP 116
24890: PUSH
24891: LD_INT 0
24893: ST_TO_ADDR
// sRanger := false ;
24894: LD_ADDR_EXP 126
24898: PUSH
24899: LD_INT 0
24901: ST_TO_ADDR
// end ;
24902: LD_VAR 0 1
24906: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
24907: LD_INT 0
24909: PPUSH
24910: PPUSH
24911: PPUSH
24912: PPUSH
24913: PPUSH
// result := [ ] ;
24914: LD_ADDR_VAR 0 1
24918: PUSH
24919: EMPTY
24920: ST_TO_ADDR
// if campaign_id = 1 then
24921: LD_OWVAR 69
24925: PUSH
24926: LD_INT 1
24928: EQUAL
24929: IFFALSE 27867
// begin case mission_number of 1 :
24931: LD_OWVAR 70
24935: PUSH
24936: LD_INT 1
24938: DOUBLE
24939: EQUAL
24940: IFTRUE 24944
24942: GO 25008
24944: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
24945: LD_ADDR_VAR 0 1
24949: PUSH
24950: LD_INT 2
24952: PUSH
24953: LD_INT 4
24955: PUSH
24956: LD_INT 11
24958: PUSH
24959: LD_INT 12
24961: PUSH
24962: LD_INT 15
24964: PUSH
24965: LD_INT 16
24967: PUSH
24968: LD_INT 22
24970: PUSH
24971: LD_INT 23
24973: PUSH
24974: LD_INT 26
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 101
24990: PUSH
24991: LD_INT 102
24993: PUSH
24994: LD_INT 106
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: LIST
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: ST_TO_ADDR
25006: GO 27865
25008: LD_INT 2
25010: DOUBLE
25011: EQUAL
25012: IFTRUE 25016
25014: GO 25088
25016: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
25017: LD_ADDR_VAR 0 1
25021: PUSH
25022: LD_INT 2
25024: PUSH
25025: LD_INT 4
25027: PUSH
25028: LD_INT 11
25030: PUSH
25031: LD_INT 12
25033: PUSH
25034: LD_INT 15
25036: PUSH
25037: LD_INT 16
25039: PUSH
25040: LD_INT 22
25042: PUSH
25043: LD_INT 23
25045: PUSH
25046: LD_INT 26
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: PUSH
25060: LD_INT 101
25062: PUSH
25063: LD_INT 102
25065: PUSH
25066: LD_INT 105
25068: PUSH
25069: LD_INT 106
25071: PUSH
25072: LD_INT 108
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: ST_TO_ADDR
25086: GO 27865
25088: LD_INT 3
25090: DOUBLE
25091: EQUAL
25092: IFTRUE 25096
25094: GO 25172
25096: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
25097: LD_ADDR_VAR 0 1
25101: PUSH
25102: LD_INT 2
25104: PUSH
25105: LD_INT 4
25107: PUSH
25108: LD_INT 5
25110: PUSH
25111: LD_INT 11
25113: PUSH
25114: LD_INT 12
25116: PUSH
25117: LD_INT 15
25119: PUSH
25120: LD_INT 16
25122: PUSH
25123: LD_INT 22
25125: PUSH
25126: LD_INT 26
25128: PUSH
25129: LD_INT 36
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 101
25146: PUSH
25147: LD_INT 102
25149: PUSH
25150: LD_INT 105
25152: PUSH
25153: LD_INT 106
25155: PUSH
25156: LD_INT 108
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: ST_TO_ADDR
25170: GO 27865
25172: LD_INT 4
25174: DOUBLE
25175: EQUAL
25176: IFTRUE 25180
25178: GO 25264
25180: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
25181: LD_ADDR_VAR 0 1
25185: PUSH
25186: LD_INT 2
25188: PUSH
25189: LD_INT 4
25191: PUSH
25192: LD_INT 5
25194: PUSH
25195: LD_INT 8
25197: PUSH
25198: LD_INT 11
25200: PUSH
25201: LD_INT 12
25203: PUSH
25204: LD_INT 15
25206: PUSH
25207: LD_INT 16
25209: PUSH
25210: LD_INT 22
25212: PUSH
25213: LD_INT 23
25215: PUSH
25216: LD_INT 26
25218: PUSH
25219: LD_INT 36
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 101
25238: PUSH
25239: LD_INT 102
25241: PUSH
25242: LD_INT 105
25244: PUSH
25245: LD_INT 106
25247: PUSH
25248: LD_INT 108
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: ST_TO_ADDR
25262: GO 27865
25264: LD_INT 5
25266: DOUBLE
25267: EQUAL
25268: IFTRUE 25272
25270: GO 25372
25272: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
25273: LD_ADDR_VAR 0 1
25277: PUSH
25278: LD_INT 2
25280: PUSH
25281: LD_INT 4
25283: PUSH
25284: LD_INT 5
25286: PUSH
25287: LD_INT 6
25289: PUSH
25290: LD_INT 8
25292: PUSH
25293: LD_INT 11
25295: PUSH
25296: LD_INT 12
25298: PUSH
25299: LD_INT 15
25301: PUSH
25302: LD_INT 16
25304: PUSH
25305: LD_INT 22
25307: PUSH
25308: LD_INT 23
25310: PUSH
25311: LD_INT 25
25313: PUSH
25314: LD_INT 26
25316: PUSH
25317: LD_INT 36
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 101
25338: PUSH
25339: LD_INT 102
25341: PUSH
25342: LD_INT 105
25344: PUSH
25345: LD_INT 106
25347: PUSH
25348: LD_INT 108
25350: PUSH
25351: LD_INT 109
25353: PUSH
25354: LD_INT 112
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: ST_TO_ADDR
25370: GO 27865
25372: LD_INT 6
25374: DOUBLE
25375: EQUAL
25376: IFTRUE 25380
25378: GO 25500
25380: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
25381: LD_ADDR_VAR 0 1
25385: PUSH
25386: LD_INT 2
25388: PUSH
25389: LD_INT 4
25391: PUSH
25392: LD_INT 5
25394: PUSH
25395: LD_INT 6
25397: PUSH
25398: LD_INT 8
25400: PUSH
25401: LD_INT 11
25403: PUSH
25404: LD_INT 12
25406: PUSH
25407: LD_INT 15
25409: PUSH
25410: LD_INT 16
25412: PUSH
25413: LD_INT 20
25415: PUSH
25416: LD_INT 21
25418: PUSH
25419: LD_INT 22
25421: PUSH
25422: LD_INT 23
25424: PUSH
25425: LD_INT 25
25427: PUSH
25428: LD_INT 26
25430: PUSH
25431: LD_INT 30
25433: PUSH
25434: LD_INT 31
25436: PUSH
25437: LD_INT 32
25439: PUSH
25440: LD_INT 36
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: PUSH
25464: LD_INT 101
25466: PUSH
25467: LD_INT 102
25469: PUSH
25470: LD_INT 105
25472: PUSH
25473: LD_INT 106
25475: PUSH
25476: LD_INT 108
25478: PUSH
25479: LD_INT 109
25481: PUSH
25482: LD_INT 112
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: ST_TO_ADDR
25498: GO 27865
25500: LD_INT 7
25502: DOUBLE
25503: EQUAL
25504: IFTRUE 25508
25506: GO 25608
25508: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
25509: LD_ADDR_VAR 0 1
25513: PUSH
25514: LD_INT 2
25516: PUSH
25517: LD_INT 4
25519: PUSH
25520: LD_INT 5
25522: PUSH
25523: LD_INT 7
25525: PUSH
25526: LD_INT 11
25528: PUSH
25529: LD_INT 12
25531: PUSH
25532: LD_INT 15
25534: PUSH
25535: LD_INT 16
25537: PUSH
25538: LD_INT 20
25540: PUSH
25541: LD_INT 21
25543: PUSH
25544: LD_INT 22
25546: PUSH
25547: LD_INT 23
25549: PUSH
25550: LD_INT 25
25552: PUSH
25553: LD_INT 26
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 101
25574: PUSH
25575: LD_INT 102
25577: PUSH
25578: LD_INT 103
25580: PUSH
25581: LD_INT 105
25583: PUSH
25584: LD_INT 106
25586: PUSH
25587: LD_INT 108
25589: PUSH
25590: LD_INT 112
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: ST_TO_ADDR
25606: GO 27865
25608: LD_INT 8
25610: DOUBLE
25611: EQUAL
25612: IFTRUE 25616
25614: GO 25744
25616: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
25617: LD_ADDR_VAR 0 1
25621: PUSH
25622: LD_INT 2
25624: PUSH
25625: LD_INT 4
25627: PUSH
25628: LD_INT 5
25630: PUSH
25631: LD_INT 6
25633: PUSH
25634: LD_INT 7
25636: PUSH
25637: LD_INT 8
25639: PUSH
25640: LD_INT 11
25642: PUSH
25643: LD_INT 12
25645: PUSH
25646: LD_INT 15
25648: PUSH
25649: LD_INT 16
25651: PUSH
25652: LD_INT 20
25654: PUSH
25655: LD_INT 21
25657: PUSH
25658: LD_INT 22
25660: PUSH
25661: LD_INT 23
25663: PUSH
25664: LD_INT 25
25666: PUSH
25667: LD_INT 26
25669: PUSH
25670: LD_INT 30
25672: PUSH
25673: LD_INT 31
25675: PUSH
25676: LD_INT 32
25678: PUSH
25679: LD_INT 36
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 101
25706: PUSH
25707: LD_INT 102
25709: PUSH
25710: LD_INT 103
25712: PUSH
25713: LD_INT 105
25715: PUSH
25716: LD_INT 106
25718: PUSH
25719: LD_INT 108
25721: PUSH
25722: LD_INT 109
25724: PUSH
25725: LD_INT 112
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: ST_TO_ADDR
25742: GO 27865
25744: LD_INT 9
25746: DOUBLE
25747: EQUAL
25748: IFTRUE 25752
25750: GO 25888
25752: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
25753: LD_ADDR_VAR 0 1
25757: PUSH
25758: LD_INT 2
25760: PUSH
25761: LD_INT 4
25763: PUSH
25764: LD_INT 5
25766: PUSH
25767: LD_INT 6
25769: PUSH
25770: LD_INT 7
25772: PUSH
25773: LD_INT 8
25775: PUSH
25776: LD_INT 11
25778: PUSH
25779: LD_INT 12
25781: PUSH
25782: LD_INT 15
25784: PUSH
25785: LD_INT 16
25787: PUSH
25788: LD_INT 20
25790: PUSH
25791: LD_INT 21
25793: PUSH
25794: LD_INT 22
25796: PUSH
25797: LD_INT 23
25799: PUSH
25800: LD_INT 25
25802: PUSH
25803: LD_INT 26
25805: PUSH
25806: LD_INT 28
25808: PUSH
25809: LD_INT 30
25811: PUSH
25812: LD_INT 31
25814: PUSH
25815: LD_INT 32
25817: PUSH
25818: LD_INT 36
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 101
25846: PUSH
25847: LD_INT 102
25849: PUSH
25850: LD_INT 103
25852: PUSH
25853: LD_INT 105
25855: PUSH
25856: LD_INT 106
25858: PUSH
25859: LD_INT 108
25861: PUSH
25862: LD_INT 109
25864: PUSH
25865: LD_INT 112
25867: PUSH
25868: LD_INT 114
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: ST_TO_ADDR
25886: GO 27865
25888: LD_INT 10
25890: DOUBLE
25891: EQUAL
25892: IFTRUE 25896
25894: GO 26080
25896: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
25897: LD_ADDR_VAR 0 1
25901: PUSH
25902: LD_INT 2
25904: PUSH
25905: LD_INT 4
25907: PUSH
25908: LD_INT 5
25910: PUSH
25911: LD_INT 6
25913: PUSH
25914: LD_INT 7
25916: PUSH
25917: LD_INT 8
25919: PUSH
25920: LD_INT 9
25922: PUSH
25923: LD_INT 10
25925: PUSH
25926: LD_INT 11
25928: PUSH
25929: LD_INT 12
25931: PUSH
25932: LD_INT 13
25934: PUSH
25935: LD_INT 14
25937: PUSH
25938: LD_INT 15
25940: PUSH
25941: LD_INT 16
25943: PUSH
25944: LD_INT 17
25946: PUSH
25947: LD_INT 18
25949: PUSH
25950: LD_INT 19
25952: PUSH
25953: LD_INT 20
25955: PUSH
25956: LD_INT 21
25958: PUSH
25959: LD_INT 22
25961: PUSH
25962: LD_INT 23
25964: PUSH
25965: LD_INT 24
25967: PUSH
25968: LD_INT 25
25970: PUSH
25971: LD_INT 26
25973: PUSH
25974: LD_INT 28
25976: PUSH
25977: LD_INT 30
25979: PUSH
25980: LD_INT 31
25982: PUSH
25983: LD_INT 32
25985: PUSH
25986: LD_INT 36
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 101
26022: PUSH
26023: LD_INT 102
26025: PUSH
26026: LD_INT 103
26028: PUSH
26029: LD_INT 104
26031: PUSH
26032: LD_INT 105
26034: PUSH
26035: LD_INT 106
26037: PUSH
26038: LD_INT 107
26040: PUSH
26041: LD_INT 108
26043: PUSH
26044: LD_INT 109
26046: PUSH
26047: LD_INT 110
26049: PUSH
26050: LD_INT 111
26052: PUSH
26053: LD_INT 112
26055: PUSH
26056: LD_INT 114
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: ST_TO_ADDR
26078: GO 27865
26080: LD_INT 11
26082: DOUBLE
26083: EQUAL
26084: IFTRUE 26088
26086: GO 26280
26088: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
26089: LD_ADDR_VAR 0 1
26093: PUSH
26094: LD_INT 2
26096: PUSH
26097: LD_INT 3
26099: PUSH
26100: LD_INT 4
26102: PUSH
26103: LD_INT 5
26105: PUSH
26106: LD_INT 6
26108: PUSH
26109: LD_INT 7
26111: PUSH
26112: LD_INT 8
26114: PUSH
26115: LD_INT 9
26117: PUSH
26118: LD_INT 10
26120: PUSH
26121: LD_INT 11
26123: PUSH
26124: LD_INT 12
26126: PUSH
26127: LD_INT 13
26129: PUSH
26130: LD_INT 14
26132: PUSH
26133: LD_INT 15
26135: PUSH
26136: LD_INT 16
26138: PUSH
26139: LD_INT 17
26141: PUSH
26142: LD_INT 18
26144: PUSH
26145: LD_INT 19
26147: PUSH
26148: LD_INT 20
26150: PUSH
26151: LD_INT 21
26153: PUSH
26154: LD_INT 22
26156: PUSH
26157: LD_INT 23
26159: PUSH
26160: LD_INT 24
26162: PUSH
26163: LD_INT 25
26165: PUSH
26166: LD_INT 26
26168: PUSH
26169: LD_INT 28
26171: PUSH
26172: LD_INT 30
26174: PUSH
26175: LD_INT 31
26177: PUSH
26178: LD_INT 32
26180: PUSH
26181: LD_INT 34
26183: PUSH
26184: LD_INT 36
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 101
26222: PUSH
26223: LD_INT 102
26225: PUSH
26226: LD_INT 103
26228: PUSH
26229: LD_INT 104
26231: PUSH
26232: LD_INT 105
26234: PUSH
26235: LD_INT 106
26237: PUSH
26238: LD_INT 107
26240: PUSH
26241: LD_INT 108
26243: PUSH
26244: LD_INT 109
26246: PUSH
26247: LD_INT 110
26249: PUSH
26250: LD_INT 111
26252: PUSH
26253: LD_INT 112
26255: PUSH
26256: LD_INT 114
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: ST_TO_ADDR
26278: GO 27865
26280: LD_INT 12
26282: DOUBLE
26283: EQUAL
26284: IFTRUE 26288
26286: GO 26496
26288: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
26289: LD_ADDR_VAR 0 1
26293: PUSH
26294: LD_INT 1
26296: PUSH
26297: LD_INT 2
26299: PUSH
26300: LD_INT 3
26302: PUSH
26303: LD_INT 4
26305: PUSH
26306: LD_INT 5
26308: PUSH
26309: LD_INT 6
26311: PUSH
26312: LD_INT 7
26314: PUSH
26315: LD_INT 8
26317: PUSH
26318: LD_INT 9
26320: PUSH
26321: LD_INT 10
26323: PUSH
26324: LD_INT 11
26326: PUSH
26327: LD_INT 12
26329: PUSH
26330: LD_INT 13
26332: PUSH
26333: LD_INT 14
26335: PUSH
26336: LD_INT 15
26338: PUSH
26339: LD_INT 16
26341: PUSH
26342: LD_INT 17
26344: PUSH
26345: LD_INT 18
26347: PUSH
26348: LD_INT 19
26350: PUSH
26351: LD_INT 20
26353: PUSH
26354: LD_INT 21
26356: PUSH
26357: LD_INT 22
26359: PUSH
26360: LD_INT 23
26362: PUSH
26363: LD_INT 24
26365: PUSH
26366: LD_INT 25
26368: PUSH
26369: LD_INT 26
26371: PUSH
26372: LD_INT 27
26374: PUSH
26375: LD_INT 28
26377: PUSH
26378: LD_INT 30
26380: PUSH
26381: LD_INT 31
26383: PUSH
26384: LD_INT 32
26386: PUSH
26387: LD_INT 33
26389: PUSH
26390: LD_INT 34
26392: PUSH
26393: LD_INT 36
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: PUSH
26432: LD_INT 101
26434: PUSH
26435: LD_INT 102
26437: PUSH
26438: LD_INT 103
26440: PUSH
26441: LD_INT 104
26443: PUSH
26444: LD_INT 105
26446: PUSH
26447: LD_INT 106
26449: PUSH
26450: LD_INT 107
26452: PUSH
26453: LD_INT 108
26455: PUSH
26456: LD_INT 109
26458: PUSH
26459: LD_INT 110
26461: PUSH
26462: LD_INT 111
26464: PUSH
26465: LD_INT 112
26467: PUSH
26468: LD_INT 113
26470: PUSH
26471: LD_INT 114
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: ST_TO_ADDR
26494: GO 27865
26496: LD_INT 13
26498: DOUBLE
26499: EQUAL
26500: IFTRUE 26504
26502: GO 26700
26504: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
26505: LD_ADDR_VAR 0 1
26509: PUSH
26510: LD_INT 1
26512: PUSH
26513: LD_INT 2
26515: PUSH
26516: LD_INT 3
26518: PUSH
26519: LD_INT 4
26521: PUSH
26522: LD_INT 5
26524: PUSH
26525: LD_INT 8
26527: PUSH
26528: LD_INT 9
26530: PUSH
26531: LD_INT 10
26533: PUSH
26534: LD_INT 11
26536: PUSH
26537: LD_INT 12
26539: PUSH
26540: LD_INT 14
26542: PUSH
26543: LD_INT 15
26545: PUSH
26546: LD_INT 16
26548: PUSH
26549: LD_INT 17
26551: PUSH
26552: LD_INT 18
26554: PUSH
26555: LD_INT 19
26557: PUSH
26558: LD_INT 20
26560: PUSH
26561: LD_INT 21
26563: PUSH
26564: LD_INT 22
26566: PUSH
26567: LD_INT 23
26569: PUSH
26570: LD_INT 24
26572: PUSH
26573: LD_INT 25
26575: PUSH
26576: LD_INT 26
26578: PUSH
26579: LD_INT 27
26581: PUSH
26582: LD_INT 28
26584: PUSH
26585: LD_INT 30
26587: PUSH
26588: LD_INT 31
26590: PUSH
26591: LD_INT 32
26593: PUSH
26594: LD_INT 33
26596: PUSH
26597: LD_INT 34
26599: PUSH
26600: LD_INT 36
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 101
26638: PUSH
26639: LD_INT 102
26641: PUSH
26642: LD_INT 103
26644: PUSH
26645: LD_INT 104
26647: PUSH
26648: LD_INT 105
26650: PUSH
26651: LD_INT 106
26653: PUSH
26654: LD_INT 107
26656: PUSH
26657: LD_INT 108
26659: PUSH
26660: LD_INT 109
26662: PUSH
26663: LD_INT 110
26665: PUSH
26666: LD_INT 111
26668: PUSH
26669: LD_INT 112
26671: PUSH
26672: LD_INT 113
26674: PUSH
26675: LD_INT 114
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: ST_TO_ADDR
26698: GO 27865
26700: LD_INT 14
26702: DOUBLE
26703: EQUAL
26704: IFTRUE 26708
26706: GO 26920
26708: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
26709: LD_ADDR_VAR 0 1
26713: PUSH
26714: LD_INT 1
26716: PUSH
26717: LD_INT 2
26719: PUSH
26720: LD_INT 3
26722: PUSH
26723: LD_INT 4
26725: PUSH
26726: LD_INT 5
26728: PUSH
26729: LD_INT 6
26731: PUSH
26732: LD_INT 7
26734: PUSH
26735: LD_INT 8
26737: PUSH
26738: LD_INT 9
26740: PUSH
26741: LD_INT 10
26743: PUSH
26744: LD_INT 11
26746: PUSH
26747: LD_INT 12
26749: PUSH
26750: LD_INT 13
26752: PUSH
26753: LD_INT 14
26755: PUSH
26756: LD_INT 15
26758: PUSH
26759: LD_INT 16
26761: PUSH
26762: LD_INT 17
26764: PUSH
26765: LD_INT 18
26767: PUSH
26768: LD_INT 19
26770: PUSH
26771: LD_INT 20
26773: PUSH
26774: LD_INT 21
26776: PUSH
26777: LD_INT 22
26779: PUSH
26780: LD_INT 23
26782: PUSH
26783: LD_INT 24
26785: PUSH
26786: LD_INT 25
26788: PUSH
26789: LD_INT 26
26791: PUSH
26792: LD_INT 27
26794: PUSH
26795: LD_INT 28
26797: PUSH
26798: LD_INT 29
26800: PUSH
26801: LD_INT 30
26803: PUSH
26804: LD_INT 31
26806: PUSH
26807: LD_INT 32
26809: PUSH
26810: LD_INT 33
26812: PUSH
26813: LD_INT 34
26815: PUSH
26816: LD_INT 36
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 101
26858: PUSH
26859: LD_INT 102
26861: PUSH
26862: LD_INT 103
26864: PUSH
26865: LD_INT 104
26867: PUSH
26868: LD_INT 105
26870: PUSH
26871: LD_INT 106
26873: PUSH
26874: LD_INT 107
26876: PUSH
26877: LD_INT 108
26879: PUSH
26880: LD_INT 109
26882: PUSH
26883: LD_INT 110
26885: PUSH
26886: LD_INT 111
26888: PUSH
26889: LD_INT 112
26891: PUSH
26892: LD_INT 113
26894: PUSH
26895: LD_INT 114
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: ST_TO_ADDR
26918: GO 27865
26920: LD_INT 15
26922: DOUBLE
26923: EQUAL
26924: IFTRUE 26928
26926: GO 27140
26928: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
26929: LD_ADDR_VAR 0 1
26933: PUSH
26934: LD_INT 1
26936: PUSH
26937: LD_INT 2
26939: PUSH
26940: LD_INT 3
26942: PUSH
26943: LD_INT 4
26945: PUSH
26946: LD_INT 5
26948: PUSH
26949: LD_INT 6
26951: PUSH
26952: LD_INT 7
26954: PUSH
26955: LD_INT 8
26957: PUSH
26958: LD_INT 9
26960: PUSH
26961: LD_INT 10
26963: PUSH
26964: LD_INT 11
26966: PUSH
26967: LD_INT 12
26969: PUSH
26970: LD_INT 13
26972: PUSH
26973: LD_INT 14
26975: PUSH
26976: LD_INT 15
26978: PUSH
26979: LD_INT 16
26981: PUSH
26982: LD_INT 17
26984: PUSH
26985: LD_INT 18
26987: PUSH
26988: LD_INT 19
26990: PUSH
26991: LD_INT 20
26993: PUSH
26994: LD_INT 21
26996: PUSH
26997: LD_INT 22
26999: PUSH
27000: LD_INT 23
27002: PUSH
27003: LD_INT 24
27005: PUSH
27006: LD_INT 25
27008: PUSH
27009: LD_INT 26
27011: PUSH
27012: LD_INT 27
27014: PUSH
27015: LD_INT 28
27017: PUSH
27018: LD_INT 29
27020: PUSH
27021: LD_INT 30
27023: PUSH
27024: LD_INT 31
27026: PUSH
27027: LD_INT 32
27029: PUSH
27030: LD_INT 33
27032: PUSH
27033: LD_INT 34
27035: PUSH
27036: LD_INT 36
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 101
27078: PUSH
27079: LD_INT 102
27081: PUSH
27082: LD_INT 103
27084: PUSH
27085: LD_INT 104
27087: PUSH
27088: LD_INT 105
27090: PUSH
27091: LD_INT 106
27093: PUSH
27094: LD_INT 107
27096: PUSH
27097: LD_INT 108
27099: PUSH
27100: LD_INT 109
27102: PUSH
27103: LD_INT 110
27105: PUSH
27106: LD_INT 111
27108: PUSH
27109: LD_INT 112
27111: PUSH
27112: LD_INT 113
27114: PUSH
27115: LD_INT 114
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: ST_TO_ADDR
27138: GO 27865
27140: LD_INT 16
27142: DOUBLE
27143: EQUAL
27144: IFTRUE 27148
27146: GO 27272
27148: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
27149: LD_ADDR_VAR 0 1
27153: PUSH
27154: LD_INT 2
27156: PUSH
27157: LD_INT 4
27159: PUSH
27160: LD_INT 5
27162: PUSH
27163: LD_INT 7
27165: PUSH
27166: LD_INT 11
27168: PUSH
27169: LD_INT 12
27171: PUSH
27172: LD_INT 15
27174: PUSH
27175: LD_INT 16
27177: PUSH
27178: LD_INT 20
27180: PUSH
27181: LD_INT 21
27183: PUSH
27184: LD_INT 22
27186: PUSH
27187: LD_INT 23
27189: PUSH
27190: LD_INT 25
27192: PUSH
27193: LD_INT 26
27195: PUSH
27196: LD_INT 30
27198: PUSH
27199: LD_INT 31
27201: PUSH
27202: LD_INT 32
27204: PUSH
27205: LD_INT 33
27207: PUSH
27208: LD_INT 34
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 101
27234: PUSH
27235: LD_INT 102
27237: PUSH
27238: LD_INT 103
27240: PUSH
27241: LD_INT 106
27243: PUSH
27244: LD_INT 108
27246: PUSH
27247: LD_INT 112
27249: PUSH
27250: LD_INT 113
27252: PUSH
27253: LD_INT 114
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: ST_TO_ADDR
27270: GO 27865
27272: LD_INT 17
27274: DOUBLE
27275: EQUAL
27276: IFTRUE 27280
27278: GO 27492
27280: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
27281: LD_ADDR_VAR 0 1
27285: PUSH
27286: LD_INT 1
27288: PUSH
27289: LD_INT 2
27291: PUSH
27292: LD_INT 3
27294: PUSH
27295: LD_INT 4
27297: PUSH
27298: LD_INT 5
27300: PUSH
27301: LD_INT 6
27303: PUSH
27304: LD_INT 7
27306: PUSH
27307: LD_INT 8
27309: PUSH
27310: LD_INT 9
27312: PUSH
27313: LD_INT 10
27315: PUSH
27316: LD_INT 11
27318: PUSH
27319: LD_INT 12
27321: PUSH
27322: LD_INT 13
27324: PUSH
27325: LD_INT 14
27327: PUSH
27328: LD_INT 15
27330: PUSH
27331: LD_INT 16
27333: PUSH
27334: LD_INT 17
27336: PUSH
27337: LD_INT 18
27339: PUSH
27340: LD_INT 19
27342: PUSH
27343: LD_INT 20
27345: PUSH
27346: LD_INT 21
27348: PUSH
27349: LD_INT 22
27351: PUSH
27352: LD_INT 23
27354: PUSH
27355: LD_INT 24
27357: PUSH
27358: LD_INT 25
27360: PUSH
27361: LD_INT 26
27363: PUSH
27364: LD_INT 27
27366: PUSH
27367: LD_INT 28
27369: PUSH
27370: LD_INT 29
27372: PUSH
27373: LD_INT 30
27375: PUSH
27376: LD_INT 31
27378: PUSH
27379: LD_INT 32
27381: PUSH
27382: LD_INT 33
27384: PUSH
27385: LD_INT 34
27387: PUSH
27388: LD_INT 36
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 101
27430: PUSH
27431: LD_INT 102
27433: PUSH
27434: LD_INT 103
27436: PUSH
27437: LD_INT 104
27439: PUSH
27440: LD_INT 105
27442: PUSH
27443: LD_INT 106
27445: PUSH
27446: LD_INT 107
27448: PUSH
27449: LD_INT 108
27451: PUSH
27452: LD_INT 109
27454: PUSH
27455: LD_INT 110
27457: PUSH
27458: LD_INT 111
27460: PUSH
27461: LD_INT 112
27463: PUSH
27464: LD_INT 113
27466: PUSH
27467: LD_INT 114
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: ST_TO_ADDR
27490: GO 27865
27492: LD_INT 18
27494: DOUBLE
27495: EQUAL
27496: IFTRUE 27500
27498: GO 27636
27500: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
27501: LD_ADDR_VAR 0 1
27505: PUSH
27506: LD_INT 2
27508: PUSH
27509: LD_INT 4
27511: PUSH
27512: LD_INT 5
27514: PUSH
27515: LD_INT 7
27517: PUSH
27518: LD_INT 11
27520: PUSH
27521: LD_INT 12
27523: PUSH
27524: LD_INT 15
27526: PUSH
27527: LD_INT 16
27529: PUSH
27530: LD_INT 20
27532: PUSH
27533: LD_INT 21
27535: PUSH
27536: LD_INT 22
27538: PUSH
27539: LD_INT 23
27541: PUSH
27542: LD_INT 25
27544: PUSH
27545: LD_INT 26
27547: PUSH
27548: LD_INT 30
27550: PUSH
27551: LD_INT 31
27553: PUSH
27554: LD_INT 32
27556: PUSH
27557: LD_INT 33
27559: PUSH
27560: LD_INT 34
27562: PUSH
27563: LD_INT 35
27565: PUSH
27566: LD_INT 36
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 101
27594: PUSH
27595: LD_INT 102
27597: PUSH
27598: LD_INT 103
27600: PUSH
27601: LD_INT 106
27603: PUSH
27604: LD_INT 108
27606: PUSH
27607: LD_INT 112
27609: PUSH
27610: LD_INT 113
27612: PUSH
27613: LD_INT 114
27615: PUSH
27616: LD_INT 115
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: ST_TO_ADDR
27634: GO 27865
27636: LD_INT 19
27638: DOUBLE
27639: EQUAL
27640: IFTRUE 27644
27642: GO 27864
27644: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
27645: LD_ADDR_VAR 0 1
27649: PUSH
27650: LD_INT 1
27652: PUSH
27653: LD_INT 2
27655: PUSH
27656: LD_INT 3
27658: PUSH
27659: LD_INT 4
27661: PUSH
27662: LD_INT 5
27664: PUSH
27665: LD_INT 6
27667: PUSH
27668: LD_INT 7
27670: PUSH
27671: LD_INT 8
27673: PUSH
27674: LD_INT 9
27676: PUSH
27677: LD_INT 10
27679: PUSH
27680: LD_INT 11
27682: PUSH
27683: LD_INT 12
27685: PUSH
27686: LD_INT 13
27688: PUSH
27689: LD_INT 14
27691: PUSH
27692: LD_INT 15
27694: PUSH
27695: LD_INT 16
27697: PUSH
27698: LD_INT 17
27700: PUSH
27701: LD_INT 18
27703: PUSH
27704: LD_INT 19
27706: PUSH
27707: LD_INT 20
27709: PUSH
27710: LD_INT 21
27712: PUSH
27713: LD_INT 22
27715: PUSH
27716: LD_INT 23
27718: PUSH
27719: LD_INT 24
27721: PUSH
27722: LD_INT 25
27724: PUSH
27725: LD_INT 26
27727: PUSH
27728: LD_INT 27
27730: PUSH
27731: LD_INT 28
27733: PUSH
27734: LD_INT 29
27736: PUSH
27737: LD_INT 30
27739: PUSH
27740: LD_INT 31
27742: PUSH
27743: LD_INT 32
27745: PUSH
27746: LD_INT 33
27748: PUSH
27749: LD_INT 34
27751: PUSH
27752: LD_INT 35
27754: PUSH
27755: LD_INT 36
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 101
27798: PUSH
27799: LD_INT 102
27801: PUSH
27802: LD_INT 103
27804: PUSH
27805: LD_INT 104
27807: PUSH
27808: LD_INT 105
27810: PUSH
27811: LD_INT 106
27813: PUSH
27814: LD_INT 107
27816: PUSH
27817: LD_INT 108
27819: PUSH
27820: LD_INT 109
27822: PUSH
27823: LD_INT 110
27825: PUSH
27826: LD_INT 111
27828: PUSH
27829: LD_INT 112
27831: PUSH
27832: LD_INT 113
27834: PUSH
27835: LD_INT 114
27837: PUSH
27838: LD_INT 115
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: ST_TO_ADDR
27862: GO 27865
27864: POP
// end else
27865: GO 28084
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
27867: LD_ADDR_VAR 0 1
27871: PUSH
27872: LD_INT 1
27874: PUSH
27875: LD_INT 2
27877: PUSH
27878: LD_INT 3
27880: PUSH
27881: LD_INT 4
27883: PUSH
27884: LD_INT 5
27886: PUSH
27887: LD_INT 6
27889: PUSH
27890: LD_INT 7
27892: PUSH
27893: LD_INT 8
27895: PUSH
27896: LD_INT 9
27898: PUSH
27899: LD_INT 10
27901: PUSH
27902: LD_INT 11
27904: PUSH
27905: LD_INT 12
27907: PUSH
27908: LD_INT 13
27910: PUSH
27911: LD_INT 14
27913: PUSH
27914: LD_INT 15
27916: PUSH
27917: LD_INT 16
27919: PUSH
27920: LD_INT 17
27922: PUSH
27923: LD_INT 18
27925: PUSH
27926: LD_INT 19
27928: PUSH
27929: LD_INT 20
27931: PUSH
27932: LD_INT 21
27934: PUSH
27935: LD_INT 22
27937: PUSH
27938: LD_INT 23
27940: PUSH
27941: LD_INT 24
27943: PUSH
27944: LD_INT 25
27946: PUSH
27947: LD_INT 26
27949: PUSH
27950: LD_INT 27
27952: PUSH
27953: LD_INT 28
27955: PUSH
27956: LD_INT 29
27958: PUSH
27959: LD_INT 30
27961: PUSH
27962: LD_INT 31
27964: PUSH
27965: LD_INT 32
27967: PUSH
27968: LD_INT 33
27970: PUSH
27971: LD_INT 34
27973: PUSH
27974: LD_INT 35
27976: PUSH
27977: LD_INT 36
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 101
28020: PUSH
28021: LD_INT 102
28023: PUSH
28024: LD_INT 103
28026: PUSH
28027: LD_INT 104
28029: PUSH
28030: LD_INT 105
28032: PUSH
28033: LD_INT 106
28035: PUSH
28036: LD_INT 107
28038: PUSH
28039: LD_INT 108
28041: PUSH
28042: LD_INT 109
28044: PUSH
28045: LD_INT 110
28047: PUSH
28048: LD_INT 111
28050: PUSH
28051: LD_INT 112
28053: PUSH
28054: LD_INT 113
28056: PUSH
28057: LD_INT 114
28059: PUSH
28060: LD_INT 115
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: ST_TO_ADDR
// if result then
28084: LD_VAR 0 1
28088: IFFALSE 28377
// begin normal :=  ;
28090: LD_ADDR_VAR 0 3
28094: PUSH
28095: LD_STRING 
28097: ST_TO_ADDR
// hardcore :=  ;
28098: LD_ADDR_VAR 0 4
28102: PUSH
28103: LD_STRING 
28105: ST_TO_ADDR
// for i = 1 to normalCounter do
28106: LD_ADDR_VAR 0 5
28110: PUSH
28111: DOUBLE
28112: LD_INT 1
28114: DEC
28115: ST_TO_ADDR
28116: LD_EXP 74
28120: PUSH
28121: FOR_TO
28122: IFFALSE 28223
// begin tmp := 0 ;
28124: LD_ADDR_VAR 0 2
28128: PUSH
28129: LD_STRING 0
28131: ST_TO_ADDR
// if result [ 1 ] then
28132: LD_VAR 0 1
28136: PUSH
28137: LD_INT 1
28139: ARRAY
28140: IFFALSE 28205
// if result [ 1 ] [ 1 ] = i then
28142: LD_VAR 0 1
28146: PUSH
28147: LD_INT 1
28149: ARRAY
28150: PUSH
28151: LD_INT 1
28153: ARRAY
28154: PUSH
28155: LD_VAR 0 5
28159: EQUAL
28160: IFFALSE 28205
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
28162: LD_ADDR_VAR 0 1
28166: PUSH
28167: LD_VAR 0 1
28171: PPUSH
28172: LD_INT 1
28174: PPUSH
28175: LD_VAR 0 1
28179: PUSH
28180: LD_INT 1
28182: ARRAY
28183: PPUSH
28184: LD_INT 1
28186: PPUSH
28187: CALL_OW 3
28191: PPUSH
28192: CALL_OW 1
28196: ST_TO_ADDR
// tmp := 1 ;
28197: LD_ADDR_VAR 0 2
28201: PUSH
28202: LD_STRING 1
28204: ST_TO_ADDR
// end ; normal := normal & tmp ;
28205: LD_ADDR_VAR 0 3
28209: PUSH
28210: LD_VAR 0 3
28214: PUSH
28215: LD_VAR 0 2
28219: STR
28220: ST_TO_ADDR
// end ;
28221: GO 28121
28223: POP
28224: POP
// for i = 1 to hardcoreCounter do
28225: LD_ADDR_VAR 0 5
28229: PUSH
28230: DOUBLE
28231: LD_INT 1
28233: DEC
28234: ST_TO_ADDR
28235: LD_EXP 75
28239: PUSH
28240: FOR_TO
28241: IFFALSE 28346
// begin tmp := 0 ;
28243: LD_ADDR_VAR 0 2
28247: PUSH
28248: LD_STRING 0
28250: ST_TO_ADDR
// if result [ 2 ] then
28251: LD_VAR 0 1
28255: PUSH
28256: LD_INT 2
28258: ARRAY
28259: IFFALSE 28328
// if result [ 2 ] [ 1 ] = 100 + i then
28261: LD_VAR 0 1
28265: PUSH
28266: LD_INT 2
28268: ARRAY
28269: PUSH
28270: LD_INT 1
28272: ARRAY
28273: PUSH
28274: LD_INT 100
28276: PUSH
28277: LD_VAR 0 5
28281: PLUS
28282: EQUAL
28283: IFFALSE 28328
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
28285: LD_ADDR_VAR 0 1
28289: PUSH
28290: LD_VAR 0 1
28294: PPUSH
28295: LD_INT 2
28297: PPUSH
28298: LD_VAR 0 1
28302: PUSH
28303: LD_INT 2
28305: ARRAY
28306: PPUSH
28307: LD_INT 1
28309: PPUSH
28310: CALL_OW 3
28314: PPUSH
28315: CALL_OW 1
28319: ST_TO_ADDR
// tmp := 1 ;
28320: LD_ADDR_VAR 0 2
28324: PUSH
28325: LD_STRING 1
28327: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
28328: LD_ADDR_VAR 0 4
28332: PUSH
28333: LD_VAR 0 4
28337: PUSH
28338: LD_VAR 0 2
28342: STR
28343: ST_TO_ADDR
// end ;
28344: GO 28240
28346: POP
28347: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
28348: LD_STRING getStreamItemsFromMission("
28350: PUSH
28351: LD_VAR 0 3
28355: STR
28356: PUSH
28357: LD_STRING ","
28359: STR
28360: PUSH
28361: LD_VAR 0 4
28365: STR
28366: PUSH
28367: LD_STRING ")
28369: STR
28370: PPUSH
28371: CALL_OW 559
// end else
28375: GO 28384
// ToLua ( getStreamItemsFromMission("","") ) ;
28377: LD_STRING getStreamItemsFromMission("","")
28379: PPUSH
28380: CALL_OW 559
// end ;
28384: LD_VAR 0 1
28388: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
28389: LD_EXP 73
28393: PUSH
28394: LD_EXP 78
28398: AND
28399: IFFALSE 28523
28401: GO 28403
28403: DISABLE
28404: LD_INT 0
28406: PPUSH
28407: PPUSH
// begin enable ;
28408: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
28409: LD_ADDR_VAR 0 2
28413: PUSH
28414: LD_INT 22
28416: PUSH
28417: LD_OWVAR 2
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 2
28428: PUSH
28429: LD_INT 34
28431: PUSH
28432: LD_INT 7
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: LD_INT 34
28441: PUSH
28442: LD_INT 45
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 34
28451: PUSH
28452: LD_INT 28
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 34
28461: PUSH
28462: LD_INT 47
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PPUSH
28480: CALL_OW 69
28484: ST_TO_ADDR
// if not tmp then
28485: LD_VAR 0 2
28489: NOT
28490: IFFALSE 28494
// exit ;
28492: GO 28523
// for i in tmp do
28494: LD_ADDR_VAR 0 1
28498: PUSH
28499: LD_VAR 0 2
28503: PUSH
28504: FOR_IN
28505: IFFALSE 28521
// begin SetLives ( i , 0 ) ;
28507: LD_VAR 0 1
28511: PPUSH
28512: LD_INT 0
28514: PPUSH
28515: CALL_OW 234
// end ;
28519: GO 28504
28521: POP
28522: POP
// end ;
28523: PPOPN 2
28525: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
28526: LD_EXP 73
28530: PUSH
28531: LD_EXP 79
28535: AND
28536: IFFALSE 28620
28538: GO 28540
28540: DISABLE
28541: LD_INT 0
28543: PPUSH
28544: PPUSH
// begin enable ;
28545: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
28546: LD_ADDR_VAR 0 2
28550: PUSH
28551: LD_INT 22
28553: PUSH
28554: LD_OWVAR 2
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 32
28565: PUSH
28566: LD_INT 3
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PPUSH
28577: CALL_OW 69
28581: ST_TO_ADDR
// if not tmp then
28582: LD_VAR 0 2
28586: NOT
28587: IFFALSE 28591
// exit ;
28589: GO 28620
// for i in tmp do
28591: LD_ADDR_VAR 0 1
28595: PUSH
28596: LD_VAR 0 2
28600: PUSH
28601: FOR_IN
28602: IFFALSE 28618
// begin SetLives ( i , 0 ) ;
28604: LD_VAR 0 1
28608: PPUSH
28609: LD_INT 0
28611: PPUSH
28612: CALL_OW 234
// end ;
28616: GO 28601
28618: POP
28619: POP
// end ;
28620: PPOPN 2
28622: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
28623: LD_EXP 73
28627: PUSH
28628: LD_EXP 76
28632: AND
28633: IFFALSE 28726
28635: GO 28637
28637: DISABLE
28638: LD_INT 0
28640: PPUSH
// begin enable ;
28641: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
28642: LD_ADDR_VAR 0 1
28646: PUSH
28647: LD_INT 22
28649: PUSH
28650: LD_OWVAR 2
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 2
28661: PUSH
28662: LD_INT 25
28664: PUSH
28665: LD_INT 5
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 25
28674: PUSH
28675: LD_INT 9
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 25
28684: PUSH
28685: LD_INT 8
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PPUSH
28702: CALL_OW 69
28706: PUSH
28707: FOR_IN
28708: IFFALSE 28724
// begin SetClass ( i , 1 ) ;
28710: LD_VAR 0 1
28714: PPUSH
28715: LD_INT 1
28717: PPUSH
28718: CALL_OW 336
// end ;
28722: GO 28707
28724: POP
28725: POP
// end ;
28726: PPOPN 1
28728: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
28729: LD_EXP 73
28733: PUSH
28734: LD_EXP 77
28738: AND
28739: PUSH
28740: LD_OWVAR 65
28744: PUSH
28745: LD_INT 7
28747: LESS
28748: AND
28749: IFFALSE 28763
28751: GO 28753
28753: DISABLE
// begin enable ;
28754: ENABLE
// game_speed := 7 ;
28755: LD_ADDR_OWVAR 65
28759: PUSH
28760: LD_INT 7
28762: ST_TO_ADDR
// end ;
28763: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
28764: LD_EXP 73
28768: PUSH
28769: LD_EXP 80
28773: AND
28774: IFFALSE 28976
28776: GO 28778
28778: DISABLE
28779: LD_INT 0
28781: PPUSH
28782: PPUSH
28783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28784: LD_ADDR_VAR 0 3
28788: PUSH
28789: LD_INT 81
28791: PUSH
28792: LD_OWVAR 2
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 21
28803: PUSH
28804: LD_INT 1
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PPUSH
28815: CALL_OW 69
28819: ST_TO_ADDR
// if not tmp then
28820: LD_VAR 0 3
28824: NOT
28825: IFFALSE 28829
// exit ;
28827: GO 28976
// if tmp > 5 then
28829: LD_VAR 0 3
28833: PUSH
28834: LD_INT 5
28836: GREATER
28837: IFFALSE 28849
// k := 5 else
28839: LD_ADDR_VAR 0 2
28843: PUSH
28844: LD_INT 5
28846: ST_TO_ADDR
28847: GO 28859
// k := tmp ;
28849: LD_ADDR_VAR 0 2
28853: PUSH
28854: LD_VAR 0 3
28858: ST_TO_ADDR
// for i := 1 to k do
28859: LD_ADDR_VAR 0 1
28863: PUSH
28864: DOUBLE
28865: LD_INT 1
28867: DEC
28868: ST_TO_ADDR
28869: LD_VAR 0 2
28873: PUSH
28874: FOR_TO
28875: IFFALSE 28974
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
28877: LD_VAR 0 3
28881: PUSH
28882: LD_VAR 0 1
28886: ARRAY
28887: PPUSH
28888: LD_VAR 0 1
28892: PUSH
28893: LD_INT 4
28895: MOD
28896: PUSH
28897: LD_INT 1
28899: PLUS
28900: PPUSH
28901: CALL_OW 259
28905: PUSH
28906: LD_INT 10
28908: LESS
28909: IFFALSE 28972
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
28911: LD_VAR 0 3
28915: PUSH
28916: LD_VAR 0 1
28920: ARRAY
28921: PPUSH
28922: LD_VAR 0 1
28926: PUSH
28927: LD_INT 4
28929: MOD
28930: PUSH
28931: LD_INT 1
28933: PLUS
28934: PPUSH
28935: LD_VAR 0 3
28939: PUSH
28940: LD_VAR 0 1
28944: ARRAY
28945: PPUSH
28946: LD_VAR 0 1
28950: PUSH
28951: LD_INT 4
28953: MOD
28954: PUSH
28955: LD_INT 1
28957: PLUS
28958: PPUSH
28959: CALL_OW 259
28963: PUSH
28964: LD_INT 1
28966: PLUS
28967: PPUSH
28968: CALL_OW 237
28972: GO 28874
28974: POP
28975: POP
// end ;
28976: PPOPN 3
28978: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
28979: LD_EXP 73
28983: PUSH
28984: LD_EXP 81
28988: AND
28989: IFFALSE 29009
28991: GO 28993
28993: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
28994: LD_INT 4
28996: PPUSH
28997: LD_OWVAR 2
29001: PPUSH
29002: LD_INT 0
29004: PPUSH
29005: CALL_OW 324
29009: END
// every 0 0$1 trigger StreamModeActive and sShovel do
29010: LD_EXP 73
29014: PUSH
29015: LD_EXP 110
29019: AND
29020: IFFALSE 29040
29022: GO 29024
29024: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
29025: LD_INT 19
29027: PPUSH
29028: LD_OWVAR 2
29032: PPUSH
29033: LD_INT 0
29035: PPUSH
29036: CALL_OW 324
29040: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
29041: LD_EXP 73
29045: PUSH
29046: LD_EXP 82
29050: AND
29051: IFFALSE 29153
29053: GO 29055
29055: DISABLE
29056: LD_INT 0
29058: PPUSH
29059: PPUSH
// begin enable ;
29060: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
29061: LD_ADDR_VAR 0 2
29065: PUSH
29066: LD_INT 22
29068: PUSH
29069: LD_OWVAR 2
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: LD_INT 2
29080: PUSH
29081: LD_INT 34
29083: PUSH
29084: LD_INT 11
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 34
29093: PUSH
29094: LD_INT 30
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: LIST
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PPUSH
29110: CALL_OW 69
29114: ST_TO_ADDR
// if not tmp then
29115: LD_VAR 0 2
29119: NOT
29120: IFFALSE 29124
// exit ;
29122: GO 29153
// for i in tmp do
29124: LD_ADDR_VAR 0 1
29128: PUSH
29129: LD_VAR 0 2
29133: PUSH
29134: FOR_IN
29135: IFFALSE 29151
// begin SetLives ( i , 0 ) ;
29137: LD_VAR 0 1
29141: PPUSH
29142: LD_INT 0
29144: PPUSH
29145: CALL_OW 234
// end ;
29149: GO 29134
29151: POP
29152: POP
// end ;
29153: PPOPN 2
29155: END
// every 0 0$1 trigger StreamModeActive and sBunker do
29156: LD_EXP 73
29160: PUSH
29161: LD_EXP 83
29165: AND
29166: IFFALSE 29186
29168: GO 29170
29170: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
29171: LD_INT 32
29173: PPUSH
29174: LD_OWVAR 2
29178: PPUSH
29179: LD_INT 0
29181: PPUSH
29182: CALL_OW 324
29186: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
29187: LD_EXP 73
29191: PUSH
29192: LD_EXP 84
29196: AND
29197: IFFALSE 29378
29199: GO 29201
29201: DISABLE
29202: LD_INT 0
29204: PPUSH
29205: PPUSH
29206: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
29207: LD_ADDR_VAR 0 2
29211: PUSH
29212: LD_INT 22
29214: PUSH
29215: LD_OWVAR 2
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 33
29226: PUSH
29227: LD_INT 3
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PPUSH
29238: CALL_OW 69
29242: ST_TO_ADDR
// if not tmp then
29243: LD_VAR 0 2
29247: NOT
29248: IFFALSE 29252
// exit ;
29250: GO 29378
// side := 0 ;
29252: LD_ADDR_VAR 0 3
29256: PUSH
29257: LD_INT 0
29259: ST_TO_ADDR
// for i := 1 to 8 do
29260: LD_ADDR_VAR 0 1
29264: PUSH
29265: DOUBLE
29266: LD_INT 1
29268: DEC
29269: ST_TO_ADDR
29270: LD_INT 8
29272: PUSH
29273: FOR_TO
29274: IFFALSE 29322
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
29276: LD_OWVAR 2
29280: PUSH
29281: LD_VAR 0 1
29285: NONEQUAL
29286: PUSH
29287: LD_OWVAR 2
29291: PPUSH
29292: LD_VAR 0 1
29296: PPUSH
29297: CALL_OW 81
29301: PUSH
29302: LD_INT 2
29304: EQUAL
29305: AND
29306: IFFALSE 29320
// begin side := i ;
29308: LD_ADDR_VAR 0 3
29312: PUSH
29313: LD_VAR 0 1
29317: ST_TO_ADDR
// break ;
29318: GO 29322
// end ;
29320: GO 29273
29322: POP
29323: POP
// if not side then
29324: LD_VAR 0 3
29328: NOT
29329: IFFALSE 29333
// exit ;
29331: GO 29378
// for i := 1 to tmp do
29333: LD_ADDR_VAR 0 1
29337: PUSH
29338: DOUBLE
29339: LD_INT 1
29341: DEC
29342: ST_TO_ADDR
29343: LD_VAR 0 2
29347: PUSH
29348: FOR_TO
29349: IFFALSE 29376
// if Prob ( 60 ) then
29351: LD_INT 60
29353: PPUSH
29354: CALL_OW 13
29358: IFFALSE 29374
// SetSide ( i , side ) ;
29360: LD_VAR 0 1
29364: PPUSH
29365: LD_VAR 0 3
29369: PPUSH
29370: CALL_OW 235
29374: GO 29348
29376: POP
29377: POP
// end ;
29378: PPOPN 3
29380: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
29381: LD_EXP 73
29385: PUSH
29386: LD_EXP 86
29390: AND
29391: IFFALSE 29510
29393: GO 29395
29395: DISABLE
29396: LD_INT 0
29398: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
29399: LD_ADDR_VAR 0 1
29403: PUSH
29404: LD_INT 22
29406: PUSH
29407: LD_OWVAR 2
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 21
29418: PUSH
29419: LD_INT 1
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 3
29428: PUSH
29429: LD_INT 23
29431: PUSH
29432: LD_INT 0
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: LIST
29447: PPUSH
29448: CALL_OW 69
29452: PUSH
29453: FOR_IN
29454: IFFALSE 29508
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
29456: LD_VAR 0 1
29460: PPUSH
29461: CALL_OW 257
29465: PUSH
29466: LD_INT 1
29468: PUSH
29469: LD_INT 2
29471: PUSH
29472: LD_INT 3
29474: PUSH
29475: LD_INT 4
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: IN
29484: IFFALSE 29506
// SetClass ( un , rand ( 1 , 4 ) ) ;
29486: LD_VAR 0 1
29490: PPUSH
29491: LD_INT 1
29493: PPUSH
29494: LD_INT 4
29496: PPUSH
29497: CALL_OW 12
29501: PPUSH
29502: CALL_OW 336
29506: GO 29453
29508: POP
29509: POP
// end ;
29510: PPOPN 1
29512: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
29513: LD_EXP 73
29517: PUSH
29518: LD_EXP 85
29522: AND
29523: IFFALSE 29602
29525: GO 29527
29527: DISABLE
29528: LD_INT 0
29530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29531: LD_ADDR_VAR 0 1
29535: PUSH
29536: LD_INT 22
29538: PUSH
29539: LD_OWVAR 2
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 21
29550: PUSH
29551: LD_INT 3
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PPUSH
29562: CALL_OW 69
29566: ST_TO_ADDR
// if not tmp then
29567: LD_VAR 0 1
29571: NOT
29572: IFFALSE 29576
// exit ;
29574: GO 29602
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
29576: LD_VAR 0 1
29580: PUSH
29581: LD_INT 1
29583: PPUSH
29584: LD_VAR 0 1
29588: PPUSH
29589: CALL_OW 12
29593: ARRAY
29594: PPUSH
29595: LD_INT 100
29597: PPUSH
29598: CALL_OW 234
// end ;
29602: PPOPN 1
29604: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
29605: LD_EXP 73
29609: PUSH
29610: LD_EXP 87
29614: AND
29615: IFFALSE 29713
29617: GO 29619
29619: DISABLE
29620: LD_INT 0
29622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29623: LD_ADDR_VAR 0 1
29627: PUSH
29628: LD_INT 22
29630: PUSH
29631: LD_OWVAR 2
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 21
29642: PUSH
29643: LD_INT 1
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PPUSH
29654: CALL_OW 69
29658: ST_TO_ADDR
// if not tmp then
29659: LD_VAR 0 1
29663: NOT
29664: IFFALSE 29668
// exit ;
29666: GO 29713
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
29668: LD_VAR 0 1
29672: PUSH
29673: LD_INT 1
29675: PPUSH
29676: LD_VAR 0 1
29680: PPUSH
29681: CALL_OW 12
29685: ARRAY
29686: PPUSH
29687: LD_INT 1
29689: PPUSH
29690: LD_INT 4
29692: PPUSH
29693: CALL_OW 12
29697: PPUSH
29698: LD_INT 3000
29700: PPUSH
29701: LD_INT 9000
29703: PPUSH
29704: CALL_OW 12
29708: PPUSH
29709: CALL_OW 492
// end ;
29713: PPOPN 1
29715: END
// every 0 0$1 trigger StreamModeActive and sDepot do
29716: LD_EXP 73
29720: PUSH
29721: LD_EXP 88
29725: AND
29726: IFFALSE 29746
29728: GO 29730
29730: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
29731: LD_INT 1
29733: PPUSH
29734: LD_OWVAR 2
29738: PPUSH
29739: LD_INT 0
29741: PPUSH
29742: CALL_OW 324
29746: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
29747: LD_EXP 73
29751: PUSH
29752: LD_EXP 89
29756: AND
29757: IFFALSE 29840
29759: GO 29761
29761: DISABLE
29762: LD_INT 0
29764: PPUSH
29765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29766: LD_ADDR_VAR 0 2
29770: PUSH
29771: LD_INT 22
29773: PUSH
29774: LD_OWVAR 2
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 21
29785: PUSH
29786: LD_INT 3
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PPUSH
29797: CALL_OW 69
29801: ST_TO_ADDR
// if not tmp then
29802: LD_VAR 0 2
29806: NOT
29807: IFFALSE 29811
// exit ;
29809: GO 29840
// for i in tmp do
29811: LD_ADDR_VAR 0 1
29815: PUSH
29816: LD_VAR 0 2
29820: PUSH
29821: FOR_IN
29822: IFFALSE 29838
// SetBLevel ( i , 10 ) ;
29824: LD_VAR 0 1
29828: PPUSH
29829: LD_INT 10
29831: PPUSH
29832: CALL_OW 241
29836: GO 29821
29838: POP
29839: POP
// end ;
29840: PPOPN 2
29842: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
29843: LD_EXP 73
29847: PUSH
29848: LD_EXP 90
29852: AND
29853: IFFALSE 29964
29855: GO 29857
29857: DISABLE
29858: LD_INT 0
29860: PPUSH
29861: PPUSH
29862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29863: LD_ADDR_VAR 0 3
29867: PUSH
29868: LD_INT 22
29870: PUSH
29871: LD_OWVAR 2
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 25
29882: PUSH
29883: LD_INT 1
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PPUSH
29894: CALL_OW 69
29898: ST_TO_ADDR
// if not tmp then
29899: LD_VAR 0 3
29903: NOT
29904: IFFALSE 29908
// exit ;
29906: GO 29964
// un := tmp [ rand ( 1 , tmp ) ] ;
29908: LD_ADDR_VAR 0 2
29912: PUSH
29913: LD_VAR 0 3
29917: PUSH
29918: LD_INT 1
29920: PPUSH
29921: LD_VAR 0 3
29925: PPUSH
29926: CALL_OW 12
29930: ARRAY
29931: ST_TO_ADDR
// if Crawls ( un ) then
29932: LD_VAR 0 2
29936: PPUSH
29937: CALL_OW 318
29941: IFFALSE 29952
// ComWalk ( un ) ;
29943: LD_VAR 0 2
29947: PPUSH
29948: CALL_OW 138
// SetClass ( un , class_sniper ) ;
29952: LD_VAR 0 2
29956: PPUSH
29957: LD_INT 5
29959: PPUSH
29960: CALL_OW 336
// end ;
29964: PPOPN 3
29966: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
29967: LD_EXP 73
29971: PUSH
29972: LD_EXP 91
29976: AND
29977: PUSH
29978: LD_OWVAR 67
29982: PUSH
29983: LD_INT 3
29985: LESS
29986: AND
29987: IFFALSE 30006
29989: GO 29991
29991: DISABLE
// Difficulty := Difficulty + 1 ;
29992: LD_ADDR_OWVAR 67
29996: PUSH
29997: LD_OWVAR 67
30001: PUSH
30002: LD_INT 1
30004: PLUS
30005: ST_TO_ADDR
30006: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
30007: LD_EXP 73
30011: PUSH
30012: LD_EXP 92
30016: AND
30017: IFFALSE 30120
30019: GO 30021
30021: DISABLE
30022: LD_INT 0
30024: PPUSH
// begin for i := 1 to 5 do
30025: LD_ADDR_VAR 0 1
30029: PUSH
30030: DOUBLE
30031: LD_INT 1
30033: DEC
30034: ST_TO_ADDR
30035: LD_INT 5
30037: PUSH
30038: FOR_TO
30039: IFFALSE 30118
// begin uc_nation := nation_nature ;
30041: LD_ADDR_OWVAR 21
30045: PUSH
30046: LD_INT 0
30048: ST_TO_ADDR
// uc_side := 0 ;
30049: LD_ADDR_OWVAR 20
30053: PUSH
30054: LD_INT 0
30056: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
30057: LD_ADDR_OWVAR 29
30061: PUSH
30062: LD_INT 12
30064: PUSH
30065: LD_INT 12
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: ST_TO_ADDR
// hc_agressivity := 20 ;
30072: LD_ADDR_OWVAR 35
30076: PUSH
30077: LD_INT 20
30079: ST_TO_ADDR
// hc_class := class_tiger ;
30080: LD_ADDR_OWVAR 28
30084: PUSH
30085: LD_INT 14
30087: ST_TO_ADDR
// hc_gallery :=  ;
30088: LD_ADDR_OWVAR 33
30092: PUSH
30093: LD_STRING 
30095: ST_TO_ADDR
// hc_name :=  ;
30096: LD_ADDR_OWVAR 26
30100: PUSH
30101: LD_STRING 
30103: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
30104: CALL_OW 44
30108: PPUSH
30109: LD_INT 0
30111: PPUSH
30112: CALL_OW 51
// end ;
30116: GO 30038
30118: POP
30119: POP
// end ;
30120: PPOPN 1
30122: END
// every 0 0$1 trigger StreamModeActive and sBomb do
30123: LD_EXP 73
30127: PUSH
30128: LD_EXP 93
30132: AND
30133: IFFALSE 30142
30135: GO 30137
30137: DISABLE
// StreamSibBomb ;
30138: CALL 30143 0 0
30142: END
// export function StreamSibBomb ; var i , x , y ; begin
30143: LD_INT 0
30145: PPUSH
30146: PPUSH
30147: PPUSH
30148: PPUSH
// result := false ;
30149: LD_ADDR_VAR 0 1
30153: PUSH
30154: LD_INT 0
30156: ST_TO_ADDR
// for i := 1 to 16 do
30157: LD_ADDR_VAR 0 2
30161: PUSH
30162: DOUBLE
30163: LD_INT 1
30165: DEC
30166: ST_TO_ADDR
30167: LD_INT 16
30169: PUSH
30170: FOR_TO
30171: IFFALSE 30370
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
30173: LD_ADDR_VAR 0 3
30177: PUSH
30178: LD_INT 10
30180: PUSH
30181: LD_INT 20
30183: PUSH
30184: LD_INT 30
30186: PUSH
30187: LD_INT 40
30189: PUSH
30190: LD_INT 50
30192: PUSH
30193: LD_INT 60
30195: PUSH
30196: LD_INT 70
30198: PUSH
30199: LD_INT 80
30201: PUSH
30202: LD_INT 90
30204: PUSH
30205: LD_INT 100
30207: PUSH
30208: LD_INT 110
30210: PUSH
30211: LD_INT 120
30213: PUSH
30214: LD_INT 130
30216: PUSH
30217: LD_INT 140
30219: PUSH
30220: LD_INT 150
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 1
30242: PPUSH
30243: LD_INT 15
30245: PPUSH
30246: CALL_OW 12
30250: ARRAY
30251: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
30252: LD_ADDR_VAR 0 4
30256: PUSH
30257: LD_INT 10
30259: PUSH
30260: LD_INT 20
30262: PUSH
30263: LD_INT 30
30265: PUSH
30266: LD_INT 40
30268: PUSH
30269: LD_INT 50
30271: PUSH
30272: LD_INT 60
30274: PUSH
30275: LD_INT 70
30277: PUSH
30278: LD_INT 80
30280: PUSH
30281: LD_INT 90
30283: PUSH
30284: LD_INT 100
30286: PUSH
30287: LD_INT 110
30289: PUSH
30290: LD_INT 120
30292: PUSH
30293: LD_INT 130
30295: PUSH
30296: LD_INT 140
30298: PUSH
30299: LD_INT 150
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 1
30321: PPUSH
30322: LD_INT 15
30324: PPUSH
30325: CALL_OW 12
30329: ARRAY
30330: ST_TO_ADDR
// if ValidHex ( x , y ) then
30331: LD_VAR 0 3
30335: PPUSH
30336: LD_VAR 0 4
30340: PPUSH
30341: CALL_OW 488
30345: IFFALSE 30368
// begin result := [ x , y ] ;
30347: LD_ADDR_VAR 0 1
30351: PUSH
30352: LD_VAR 0 3
30356: PUSH
30357: LD_VAR 0 4
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: ST_TO_ADDR
// break ;
30366: GO 30370
// end ; end ;
30368: GO 30170
30370: POP
30371: POP
// if result then
30372: LD_VAR 0 1
30376: IFFALSE 30436
// begin ToLua ( playSibBomb() ) ;
30378: LD_STRING playSibBomb()
30380: PPUSH
30381: CALL_OW 559
// wait ( 0 0$14 ) ;
30385: LD_INT 490
30387: PPUSH
30388: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
30392: LD_VAR 0 1
30396: PUSH
30397: LD_INT 1
30399: ARRAY
30400: PPUSH
30401: LD_VAR 0 1
30405: PUSH
30406: LD_INT 2
30408: ARRAY
30409: PPUSH
30410: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
30414: LD_VAR 0 1
30418: PUSH
30419: LD_INT 1
30421: ARRAY
30422: PPUSH
30423: LD_VAR 0 1
30427: PUSH
30428: LD_INT 2
30430: ARRAY
30431: PPUSH
30432: CALL_OW 429
// end ; end ;
30436: LD_VAR 0 1
30440: RET
// every 0 0$1 trigger StreamModeActive and sReset do
30441: LD_EXP 73
30445: PUSH
30446: LD_EXP 95
30450: AND
30451: IFFALSE 30463
30453: GO 30455
30455: DISABLE
// YouLost (  ) ;
30456: LD_STRING 
30458: PPUSH
30459: CALL_OW 104
30463: END
// every 0 0$1 trigger StreamModeActive and sFog do
30464: LD_EXP 73
30468: PUSH
30469: LD_EXP 94
30473: AND
30474: IFFALSE 30488
30476: GO 30478
30478: DISABLE
// FogOff ( your_side ) ;
30479: LD_OWVAR 2
30483: PPUSH
30484: CALL_OW 344
30488: END
// every 0 0$1 trigger StreamModeActive and sSun do
30489: LD_EXP 73
30493: PUSH
30494: LD_EXP 96
30498: AND
30499: IFFALSE 30527
30501: GO 30503
30503: DISABLE
// begin solar_recharge_percent := 0 ;
30504: LD_ADDR_OWVAR 79
30508: PUSH
30509: LD_INT 0
30511: ST_TO_ADDR
// wait ( 5 5$00 ) ;
30512: LD_INT 10500
30514: PPUSH
30515: CALL_OW 67
// solar_recharge_percent := 100 ;
30519: LD_ADDR_OWVAR 79
30523: PUSH
30524: LD_INT 100
30526: ST_TO_ADDR
// end ;
30527: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
30528: LD_EXP 73
30532: PUSH
30533: LD_EXP 97
30537: AND
30538: IFFALSE 30777
30540: GO 30542
30542: DISABLE
30543: LD_INT 0
30545: PPUSH
30546: PPUSH
30547: PPUSH
// begin tmp := [ ] ;
30548: LD_ADDR_VAR 0 3
30552: PUSH
30553: EMPTY
30554: ST_TO_ADDR
// for i := 1 to 6 do
30555: LD_ADDR_VAR 0 1
30559: PUSH
30560: DOUBLE
30561: LD_INT 1
30563: DEC
30564: ST_TO_ADDR
30565: LD_INT 6
30567: PUSH
30568: FOR_TO
30569: IFFALSE 30674
// begin uc_nation := nation_nature ;
30571: LD_ADDR_OWVAR 21
30575: PUSH
30576: LD_INT 0
30578: ST_TO_ADDR
// uc_side := 0 ;
30579: LD_ADDR_OWVAR 20
30583: PUSH
30584: LD_INT 0
30586: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
30587: LD_ADDR_OWVAR 29
30591: PUSH
30592: LD_INT 12
30594: PUSH
30595: LD_INT 12
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: ST_TO_ADDR
// hc_agressivity := 20 ;
30602: LD_ADDR_OWVAR 35
30606: PUSH
30607: LD_INT 20
30609: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
30610: LD_ADDR_OWVAR 28
30614: PUSH
30615: LD_INT 17
30617: ST_TO_ADDR
// hc_gallery :=  ;
30618: LD_ADDR_OWVAR 33
30622: PUSH
30623: LD_STRING 
30625: ST_TO_ADDR
// hc_name :=  ;
30626: LD_ADDR_OWVAR 26
30630: PUSH
30631: LD_STRING 
30633: ST_TO_ADDR
// un := CreateHuman ;
30634: LD_ADDR_VAR 0 2
30638: PUSH
30639: CALL_OW 44
30643: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
30644: LD_VAR 0 2
30648: PPUSH
30649: LD_INT 1
30651: PPUSH
30652: CALL_OW 51
// tmp := tmp ^ un ;
30656: LD_ADDR_VAR 0 3
30660: PUSH
30661: LD_VAR 0 3
30665: PUSH
30666: LD_VAR 0 2
30670: ADD
30671: ST_TO_ADDR
// end ;
30672: GO 30568
30674: POP
30675: POP
// repeat wait ( 0 0$1 ) ;
30676: LD_INT 35
30678: PPUSH
30679: CALL_OW 67
// for un in tmp do
30683: LD_ADDR_VAR 0 2
30687: PUSH
30688: LD_VAR 0 3
30692: PUSH
30693: FOR_IN
30694: IFFALSE 30768
// begin if IsDead ( un ) then
30696: LD_VAR 0 2
30700: PPUSH
30701: CALL_OW 301
30705: IFFALSE 30725
// begin tmp := tmp diff un ;
30707: LD_ADDR_VAR 0 3
30711: PUSH
30712: LD_VAR 0 3
30716: PUSH
30717: LD_VAR 0 2
30721: DIFF
30722: ST_TO_ADDR
// continue ;
30723: GO 30693
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
30725: LD_VAR 0 2
30729: PPUSH
30730: LD_INT 3
30732: PUSH
30733: LD_INT 22
30735: PUSH
30736: LD_INT 0
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PPUSH
30747: CALL_OW 69
30751: PPUSH
30752: LD_VAR 0 2
30756: PPUSH
30757: CALL_OW 74
30761: PPUSH
30762: CALL_OW 115
// end ;
30766: GO 30693
30768: POP
30769: POP
// until not tmp ;
30770: LD_VAR 0 3
30774: NOT
30775: IFFALSE 30676
// end ;
30777: PPOPN 3
30779: END
// every 0 0$1 trigger StreamModeActive and sTroll do
30780: LD_EXP 73
30784: PUSH
30785: LD_EXP 98
30789: AND
30790: IFFALSE 30844
30792: GO 30794
30794: DISABLE
// begin ToLua ( displayTroll(); ) ;
30795: LD_STRING displayTroll();
30797: PPUSH
30798: CALL_OW 559
// wait ( 3 3$00 ) ;
30802: LD_INT 6300
30804: PPUSH
30805: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30809: LD_STRING hideTroll();
30811: PPUSH
30812: CALL_OW 559
// wait ( 1 1$00 ) ;
30816: LD_INT 2100
30818: PPUSH
30819: CALL_OW 67
// ToLua ( displayTroll(); ) ;
30823: LD_STRING displayTroll();
30825: PPUSH
30826: CALL_OW 559
// wait ( 1 1$00 ) ;
30830: LD_INT 2100
30832: PPUSH
30833: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30837: LD_STRING hideTroll();
30839: PPUSH
30840: CALL_OW 559
// end ;
30844: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
30845: LD_EXP 73
30849: PUSH
30850: LD_EXP 99
30854: AND
30855: IFFALSE 30918
30857: GO 30859
30859: DISABLE
30860: LD_INT 0
30862: PPUSH
// begin p := 0 ;
30863: LD_ADDR_VAR 0 1
30867: PUSH
30868: LD_INT 0
30870: ST_TO_ADDR
// repeat game_speed := 1 ;
30871: LD_ADDR_OWVAR 65
30875: PUSH
30876: LD_INT 1
30878: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30879: LD_INT 35
30881: PPUSH
30882: CALL_OW 67
// p := p + 1 ;
30886: LD_ADDR_VAR 0 1
30890: PUSH
30891: LD_VAR 0 1
30895: PUSH
30896: LD_INT 1
30898: PLUS
30899: ST_TO_ADDR
// until p >= 60 ;
30900: LD_VAR 0 1
30904: PUSH
30905: LD_INT 60
30907: GREATEREQUAL
30908: IFFALSE 30871
// game_speed := 4 ;
30910: LD_ADDR_OWVAR 65
30914: PUSH
30915: LD_INT 4
30917: ST_TO_ADDR
// end ;
30918: PPOPN 1
30920: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
30921: LD_EXP 73
30925: PUSH
30926: LD_EXP 100
30930: AND
30931: IFFALSE 31077
30933: GO 30935
30935: DISABLE
30936: LD_INT 0
30938: PPUSH
30939: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30940: LD_ADDR_VAR 0 1
30944: PUSH
30945: LD_INT 22
30947: PUSH
30948: LD_OWVAR 2
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 2
30959: PUSH
30960: LD_INT 30
30962: PUSH
30963: LD_INT 0
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 30
30972: PUSH
30973: LD_INT 1
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: LIST
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PPUSH
30989: CALL_OW 69
30993: ST_TO_ADDR
// if not depot then
30994: LD_VAR 0 1
30998: NOT
30999: IFFALSE 31003
// exit ;
31001: GO 31077
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
31003: LD_ADDR_VAR 0 2
31007: PUSH
31008: LD_VAR 0 1
31012: PUSH
31013: LD_INT 1
31015: PPUSH
31016: LD_VAR 0 1
31020: PPUSH
31021: CALL_OW 12
31025: ARRAY
31026: PPUSH
31027: CALL_OW 274
31031: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
31032: LD_VAR 0 2
31036: PPUSH
31037: LD_INT 1
31039: PPUSH
31040: LD_INT 0
31042: PPUSH
31043: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
31047: LD_VAR 0 2
31051: PPUSH
31052: LD_INT 2
31054: PPUSH
31055: LD_INT 0
31057: PPUSH
31058: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
31062: LD_VAR 0 2
31066: PPUSH
31067: LD_INT 3
31069: PPUSH
31070: LD_INT 0
31072: PPUSH
31073: CALL_OW 277
// end ;
31077: PPOPN 2
31079: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
31080: LD_EXP 73
31084: PUSH
31085: LD_EXP 101
31089: AND
31090: IFFALSE 31187
31092: GO 31094
31094: DISABLE
31095: LD_INT 0
31097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31098: LD_ADDR_VAR 0 1
31102: PUSH
31103: LD_INT 22
31105: PUSH
31106: LD_OWVAR 2
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 21
31117: PUSH
31118: LD_INT 1
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 3
31127: PUSH
31128: LD_INT 23
31130: PUSH
31131: LD_INT 0
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: LIST
31146: PPUSH
31147: CALL_OW 69
31151: ST_TO_ADDR
// if not tmp then
31152: LD_VAR 0 1
31156: NOT
31157: IFFALSE 31161
// exit ;
31159: GO 31187
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
31161: LD_VAR 0 1
31165: PUSH
31166: LD_INT 1
31168: PPUSH
31169: LD_VAR 0 1
31173: PPUSH
31174: CALL_OW 12
31178: ARRAY
31179: PPUSH
31180: LD_INT 200
31182: PPUSH
31183: CALL_OW 234
// end ;
31187: PPOPN 1
31189: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
31190: LD_EXP 73
31194: PUSH
31195: LD_EXP 102
31199: AND
31200: IFFALSE 31279
31202: GO 31204
31204: DISABLE
31205: LD_INT 0
31207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
31208: LD_ADDR_VAR 0 1
31212: PUSH
31213: LD_INT 22
31215: PUSH
31216: LD_OWVAR 2
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 21
31227: PUSH
31228: LD_INT 2
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PPUSH
31239: CALL_OW 69
31243: ST_TO_ADDR
// if not tmp then
31244: LD_VAR 0 1
31248: NOT
31249: IFFALSE 31253
// exit ;
31251: GO 31279
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
31253: LD_VAR 0 1
31257: PUSH
31258: LD_INT 1
31260: PPUSH
31261: LD_VAR 0 1
31265: PPUSH
31266: CALL_OW 12
31270: ARRAY
31271: PPUSH
31272: LD_INT 60
31274: PPUSH
31275: CALL_OW 234
// end ;
31279: PPOPN 1
31281: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
31282: LD_EXP 73
31286: PUSH
31287: LD_EXP 103
31291: AND
31292: IFFALSE 31391
31294: GO 31296
31296: DISABLE
31297: LD_INT 0
31299: PPUSH
31300: PPUSH
// begin enable ;
31301: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
31302: LD_ADDR_VAR 0 1
31306: PUSH
31307: LD_INT 22
31309: PUSH
31310: LD_OWVAR 2
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 61
31321: PUSH
31322: EMPTY
31323: LIST
31324: PUSH
31325: LD_INT 33
31327: PUSH
31328: LD_INT 2
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: LIST
31339: PPUSH
31340: CALL_OW 69
31344: ST_TO_ADDR
// if not tmp then
31345: LD_VAR 0 1
31349: NOT
31350: IFFALSE 31354
// exit ;
31352: GO 31391
// for i in tmp do
31354: LD_ADDR_VAR 0 2
31358: PUSH
31359: LD_VAR 0 1
31363: PUSH
31364: FOR_IN
31365: IFFALSE 31389
// if IsControledBy ( i ) then
31367: LD_VAR 0 2
31371: PPUSH
31372: CALL_OW 312
31376: IFFALSE 31387
// ComUnlink ( i ) ;
31378: LD_VAR 0 2
31382: PPUSH
31383: CALL_OW 136
31387: GO 31364
31389: POP
31390: POP
// end ;
31391: PPOPN 2
31393: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
31394: LD_EXP 73
31398: PUSH
31399: LD_EXP 104
31403: AND
31404: IFFALSE 31544
31406: GO 31408
31408: DISABLE
31409: LD_INT 0
31411: PPUSH
31412: PPUSH
// begin ToLua ( displayPowell(); ) ;
31413: LD_STRING displayPowell();
31415: PPUSH
31416: CALL_OW 559
// uc_side := 0 ;
31420: LD_ADDR_OWVAR 20
31424: PUSH
31425: LD_INT 0
31427: ST_TO_ADDR
// uc_nation := 2 ;
31428: LD_ADDR_OWVAR 21
31432: PUSH
31433: LD_INT 2
31435: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
31436: LD_ADDR_OWVAR 37
31440: PUSH
31441: LD_INT 14
31443: ST_TO_ADDR
// vc_engine := engine_siberite ;
31444: LD_ADDR_OWVAR 39
31448: PUSH
31449: LD_INT 3
31451: ST_TO_ADDR
// vc_control := control_apeman ;
31452: LD_ADDR_OWVAR 38
31456: PUSH
31457: LD_INT 5
31459: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
31460: LD_ADDR_OWVAR 40
31464: PUSH
31465: LD_INT 29
31467: ST_TO_ADDR
// un := CreateVehicle ;
31468: LD_ADDR_VAR 0 2
31472: PUSH
31473: CALL_OW 45
31477: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31478: LD_VAR 0 2
31482: PPUSH
31483: LD_INT 1
31485: PPUSH
31486: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31490: LD_INT 35
31492: PPUSH
31493: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31497: LD_VAR 0 2
31501: PPUSH
31502: LD_INT 22
31504: PUSH
31505: LD_OWVAR 2
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PPUSH
31514: CALL_OW 69
31518: PPUSH
31519: LD_VAR 0 2
31523: PPUSH
31524: CALL_OW 74
31528: PPUSH
31529: CALL_OW 115
// until IsDead ( un ) ;
31533: LD_VAR 0 2
31537: PPUSH
31538: CALL_OW 301
31542: IFFALSE 31490
// end ;
31544: PPOPN 2
31546: END
// every 0 0$1 trigger StreamModeActive and sStu do
31547: LD_EXP 73
31551: PUSH
31552: LD_EXP 112
31556: AND
31557: IFFALSE 31573
31559: GO 31561
31561: DISABLE
// begin ToLua ( displayStucuk(); ) ;
31562: LD_STRING displayStucuk();
31564: PPUSH
31565: CALL_OW 559
// ResetFog ;
31569: CALL_OW 335
// end ;
31573: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
31574: LD_EXP 73
31578: PUSH
31579: LD_EXP 105
31583: AND
31584: IFFALSE 31725
31586: GO 31588
31588: DISABLE
31589: LD_INT 0
31591: PPUSH
31592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31593: LD_ADDR_VAR 0 2
31597: PUSH
31598: LD_INT 22
31600: PUSH
31601: LD_OWVAR 2
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 21
31612: PUSH
31613: LD_INT 1
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PPUSH
31624: CALL_OW 69
31628: ST_TO_ADDR
// if not tmp then
31629: LD_VAR 0 2
31633: NOT
31634: IFFALSE 31638
// exit ;
31636: GO 31725
// un := tmp [ rand ( 1 , tmp ) ] ;
31638: LD_ADDR_VAR 0 1
31642: PUSH
31643: LD_VAR 0 2
31647: PUSH
31648: LD_INT 1
31650: PPUSH
31651: LD_VAR 0 2
31655: PPUSH
31656: CALL_OW 12
31660: ARRAY
31661: ST_TO_ADDR
// SetSide ( un , 0 ) ;
31662: LD_VAR 0 1
31666: PPUSH
31667: LD_INT 0
31669: PPUSH
31670: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
31674: LD_VAR 0 1
31678: PPUSH
31679: LD_OWVAR 3
31683: PUSH
31684: LD_VAR 0 1
31688: DIFF
31689: PPUSH
31690: LD_VAR 0 1
31694: PPUSH
31695: CALL_OW 74
31699: PPUSH
31700: CALL_OW 115
// wait ( 0 0$20 ) ;
31704: LD_INT 700
31706: PPUSH
31707: CALL_OW 67
// SetSide ( un , your_side ) ;
31711: LD_VAR 0 1
31715: PPUSH
31716: LD_OWVAR 2
31720: PPUSH
31721: CALL_OW 235
// end ;
31725: PPOPN 2
31727: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
31728: LD_EXP 73
31732: PUSH
31733: LD_EXP 106
31737: AND
31738: IFFALSE 31844
31740: GO 31742
31742: DISABLE
31743: LD_INT 0
31745: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31746: LD_ADDR_VAR 0 1
31750: PUSH
31751: LD_INT 22
31753: PUSH
31754: LD_OWVAR 2
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 2
31765: PUSH
31766: LD_INT 30
31768: PUSH
31769: LD_INT 0
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 30
31778: PUSH
31779: LD_INT 1
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: LIST
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PPUSH
31795: CALL_OW 69
31799: ST_TO_ADDR
// if not depot then
31800: LD_VAR 0 1
31804: NOT
31805: IFFALSE 31809
// exit ;
31807: GO 31844
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
31809: LD_VAR 0 1
31813: PUSH
31814: LD_INT 1
31816: ARRAY
31817: PPUSH
31818: CALL_OW 250
31822: PPUSH
31823: LD_VAR 0 1
31827: PUSH
31828: LD_INT 1
31830: ARRAY
31831: PPUSH
31832: CALL_OW 251
31836: PPUSH
31837: LD_INT 70
31839: PPUSH
31840: CALL_OW 495
// end ;
31844: PPOPN 1
31846: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
31847: LD_EXP 73
31851: PUSH
31852: LD_EXP 107
31856: AND
31857: IFFALSE 32068
31859: GO 31861
31861: DISABLE
31862: LD_INT 0
31864: PPUSH
31865: PPUSH
31866: PPUSH
31867: PPUSH
31868: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31869: LD_ADDR_VAR 0 5
31873: PUSH
31874: LD_INT 22
31876: PUSH
31877: LD_OWVAR 2
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 21
31888: PUSH
31889: LD_INT 1
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PPUSH
31900: CALL_OW 69
31904: ST_TO_ADDR
// if not tmp then
31905: LD_VAR 0 5
31909: NOT
31910: IFFALSE 31914
// exit ;
31912: GO 32068
// for i in tmp do
31914: LD_ADDR_VAR 0 1
31918: PUSH
31919: LD_VAR 0 5
31923: PUSH
31924: FOR_IN
31925: IFFALSE 32066
// begin d := rand ( 0 , 5 ) ;
31927: LD_ADDR_VAR 0 4
31931: PUSH
31932: LD_INT 0
31934: PPUSH
31935: LD_INT 5
31937: PPUSH
31938: CALL_OW 12
31942: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
31943: LD_ADDR_VAR 0 2
31947: PUSH
31948: LD_VAR 0 1
31952: PPUSH
31953: CALL_OW 250
31957: PPUSH
31958: LD_VAR 0 4
31962: PPUSH
31963: LD_INT 3
31965: PPUSH
31966: LD_INT 12
31968: PPUSH
31969: CALL_OW 12
31973: PPUSH
31974: CALL_OW 272
31978: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
31979: LD_ADDR_VAR 0 3
31983: PUSH
31984: LD_VAR 0 1
31988: PPUSH
31989: CALL_OW 251
31993: PPUSH
31994: LD_VAR 0 4
31998: PPUSH
31999: LD_INT 3
32001: PPUSH
32002: LD_INT 12
32004: PPUSH
32005: CALL_OW 12
32009: PPUSH
32010: CALL_OW 273
32014: ST_TO_ADDR
// if ValidHex ( x , y ) then
32015: LD_VAR 0 2
32019: PPUSH
32020: LD_VAR 0 3
32024: PPUSH
32025: CALL_OW 488
32029: IFFALSE 32064
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
32031: LD_VAR 0 1
32035: PPUSH
32036: LD_VAR 0 2
32040: PPUSH
32041: LD_VAR 0 3
32045: PPUSH
32046: LD_INT 3
32048: PPUSH
32049: LD_INT 6
32051: PPUSH
32052: CALL_OW 12
32056: PPUSH
32057: LD_INT 1
32059: PPUSH
32060: CALL_OW 483
// end ;
32064: GO 31924
32066: POP
32067: POP
// end ;
32068: PPOPN 5
32070: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
32071: LD_EXP 73
32075: PUSH
32076: LD_EXP 108
32080: AND
32081: IFFALSE 32175
32083: GO 32085
32085: DISABLE
32086: LD_INT 0
32088: PPUSH
32089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
32090: LD_ADDR_VAR 0 2
32094: PUSH
32095: LD_INT 22
32097: PUSH
32098: LD_OWVAR 2
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 32
32109: PUSH
32110: LD_INT 1
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 21
32119: PUSH
32120: LD_INT 2
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: LIST
32131: PPUSH
32132: CALL_OW 69
32136: ST_TO_ADDR
// if not tmp then
32137: LD_VAR 0 2
32141: NOT
32142: IFFALSE 32146
// exit ;
32144: GO 32175
// for i in tmp do
32146: LD_ADDR_VAR 0 1
32150: PUSH
32151: LD_VAR 0 2
32155: PUSH
32156: FOR_IN
32157: IFFALSE 32173
// SetFuel ( i , 0 ) ;
32159: LD_VAR 0 1
32163: PPUSH
32164: LD_INT 0
32166: PPUSH
32167: CALL_OW 240
32171: GO 32156
32173: POP
32174: POP
// end ;
32175: PPOPN 2
32177: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
32178: LD_EXP 73
32182: PUSH
32183: LD_EXP 109
32187: AND
32188: IFFALSE 32254
32190: GO 32192
32192: DISABLE
32193: LD_INT 0
32195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
32196: LD_ADDR_VAR 0 1
32200: PUSH
32201: LD_INT 22
32203: PUSH
32204: LD_OWVAR 2
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 30
32215: PUSH
32216: LD_INT 29
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PPUSH
32227: CALL_OW 69
32231: ST_TO_ADDR
// if not tmp then
32232: LD_VAR 0 1
32236: NOT
32237: IFFALSE 32241
// exit ;
32239: GO 32254
// DestroyUnit ( tmp [ 1 ] ) ;
32241: LD_VAR 0 1
32245: PUSH
32246: LD_INT 1
32248: ARRAY
32249: PPUSH
32250: CALL_OW 65
// end ;
32254: PPOPN 1
32256: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
32257: LD_EXP 73
32261: PUSH
32262: LD_EXP 111
32266: AND
32267: IFFALSE 32396
32269: GO 32271
32271: DISABLE
32272: LD_INT 0
32274: PPUSH
// begin uc_side := 0 ;
32275: LD_ADDR_OWVAR 20
32279: PUSH
32280: LD_INT 0
32282: ST_TO_ADDR
// uc_nation := nation_arabian ;
32283: LD_ADDR_OWVAR 21
32287: PUSH
32288: LD_INT 2
32290: ST_TO_ADDR
// hc_gallery :=  ;
32291: LD_ADDR_OWVAR 33
32295: PUSH
32296: LD_STRING 
32298: ST_TO_ADDR
// hc_name :=  ;
32299: LD_ADDR_OWVAR 26
32303: PUSH
32304: LD_STRING 
32306: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
32307: LD_INT 1
32309: PPUSH
32310: LD_INT 11
32312: PPUSH
32313: LD_INT 10
32315: PPUSH
32316: CALL_OW 380
// un := CreateHuman ;
32320: LD_ADDR_VAR 0 1
32324: PUSH
32325: CALL_OW 44
32329: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32330: LD_VAR 0 1
32334: PPUSH
32335: LD_INT 1
32337: PPUSH
32338: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
32342: LD_INT 35
32344: PPUSH
32345: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
32349: LD_VAR 0 1
32353: PPUSH
32354: LD_INT 22
32356: PUSH
32357: LD_OWVAR 2
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PPUSH
32366: CALL_OW 69
32370: PPUSH
32371: LD_VAR 0 1
32375: PPUSH
32376: CALL_OW 74
32380: PPUSH
32381: CALL_OW 115
// until IsDead ( un ) ;
32385: LD_VAR 0 1
32389: PPUSH
32390: CALL_OW 301
32394: IFFALSE 32342
// end ;
32396: PPOPN 1
32398: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
32399: LD_EXP 73
32403: PUSH
32404: LD_EXP 113
32408: AND
32409: IFFALSE 32421
32411: GO 32413
32413: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
32414: LD_STRING earthquake(getX(game), 0, 32)
32416: PPUSH
32417: CALL_OW 559
32421: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
32422: LD_EXP 73
32426: PUSH
32427: LD_EXP 114
32431: AND
32432: IFFALSE 32523
32434: GO 32436
32436: DISABLE
32437: LD_INT 0
32439: PPUSH
// begin enable ;
32440: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
32441: LD_ADDR_VAR 0 1
32445: PUSH
32446: LD_INT 22
32448: PUSH
32449: LD_OWVAR 2
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 21
32460: PUSH
32461: LD_INT 2
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 33
32470: PUSH
32471: LD_INT 3
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: LIST
32482: PPUSH
32483: CALL_OW 69
32487: ST_TO_ADDR
// if not tmp then
32488: LD_VAR 0 1
32492: NOT
32493: IFFALSE 32497
// exit ;
32495: GO 32523
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32497: LD_VAR 0 1
32501: PUSH
32502: LD_INT 1
32504: PPUSH
32505: LD_VAR 0 1
32509: PPUSH
32510: CALL_OW 12
32514: ARRAY
32515: PPUSH
32516: LD_INT 1
32518: PPUSH
32519: CALL_OW 234
// end ;
32523: PPOPN 1
32525: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
32526: LD_EXP 73
32530: PUSH
32531: LD_EXP 115
32535: AND
32536: IFFALSE 32677
32538: GO 32540
32540: DISABLE
32541: LD_INT 0
32543: PPUSH
32544: PPUSH
32545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32546: LD_ADDR_VAR 0 3
32550: PUSH
32551: LD_INT 22
32553: PUSH
32554: LD_OWVAR 2
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 25
32565: PUSH
32566: LD_INT 1
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PPUSH
32577: CALL_OW 69
32581: ST_TO_ADDR
// if not tmp then
32582: LD_VAR 0 3
32586: NOT
32587: IFFALSE 32591
// exit ;
32589: GO 32677
// un := tmp [ rand ( 1 , tmp ) ] ;
32591: LD_ADDR_VAR 0 2
32595: PUSH
32596: LD_VAR 0 3
32600: PUSH
32601: LD_INT 1
32603: PPUSH
32604: LD_VAR 0 3
32608: PPUSH
32609: CALL_OW 12
32613: ARRAY
32614: ST_TO_ADDR
// if Crawls ( un ) then
32615: LD_VAR 0 2
32619: PPUSH
32620: CALL_OW 318
32624: IFFALSE 32635
// ComWalk ( un ) ;
32626: LD_VAR 0 2
32630: PPUSH
32631: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
32635: LD_VAR 0 2
32639: PPUSH
32640: LD_INT 9
32642: PPUSH
32643: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
32647: LD_INT 28
32649: PPUSH
32650: LD_OWVAR 2
32654: PPUSH
32655: LD_INT 2
32657: PPUSH
32658: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
32662: LD_INT 29
32664: PPUSH
32665: LD_OWVAR 2
32669: PPUSH
32670: LD_INT 2
32672: PPUSH
32673: CALL_OW 322
// end ;
32677: PPOPN 3
32679: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
32680: LD_EXP 73
32684: PUSH
32685: LD_EXP 116
32689: AND
32690: IFFALSE 32801
32692: GO 32694
32694: DISABLE
32695: LD_INT 0
32697: PPUSH
32698: PPUSH
32699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32700: LD_ADDR_VAR 0 3
32704: PUSH
32705: LD_INT 22
32707: PUSH
32708: LD_OWVAR 2
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 25
32719: PUSH
32720: LD_INT 1
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PPUSH
32731: CALL_OW 69
32735: ST_TO_ADDR
// if not tmp then
32736: LD_VAR 0 3
32740: NOT
32741: IFFALSE 32745
// exit ;
32743: GO 32801
// un := tmp [ rand ( 1 , tmp ) ] ;
32745: LD_ADDR_VAR 0 2
32749: PUSH
32750: LD_VAR 0 3
32754: PUSH
32755: LD_INT 1
32757: PPUSH
32758: LD_VAR 0 3
32762: PPUSH
32763: CALL_OW 12
32767: ARRAY
32768: ST_TO_ADDR
// if Crawls ( un ) then
32769: LD_VAR 0 2
32773: PPUSH
32774: CALL_OW 318
32778: IFFALSE 32789
// ComWalk ( un ) ;
32780: LD_VAR 0 2
32784: PPUSH
32785: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32789: LD_VAR 0 2
32793: PPUSH
32794: LD_INT 8
32796: PPUSH
32797: CALL_OW 336
// end ;
32801: PPOPN 3
32803: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
32804: LD_EXP 73
32808: PUSH
32809: LD_EXP 117
32813: AND
32814: IFFALSE 32958
32816: GO 32818
32818: DISABLE
32819: LD_INT 0
32821: PPUSH
32822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
32823: LD_ADDR_VAR 0 2
32827: PUSH
32828: LD_INT 22
32830: PUSH
32831: LD_OWVAR 2
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 21
32842: PUSH
32843: LD_INT 2
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 2
32852: PUSH
32853: LD_INT 34
32855: PUSH
32856: LD_INT 12
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 34
32865: PUSH
32866: LD_INT 51
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 34
32875: PUSH
32876: LD_INT 32
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: LIST
32893: PPUSH
32894: CALL_OW 69
32898: ST_TO_ADDR
// if not tmp then
32899: LD_VAR 0 2
32903: NOT
32904: IFFALSE 32908
// exit ;
32906: GO 32958
// for i in tmp do
32908: LD_ADDR_VAR 0 1
32912: PUSH
32913: LD_VAR 0 2
32917: PUSH
32918: FOR_IN
32919: IFFALSE 32956
// if GetCargo ( i , mat_artifact ) = 0 then
32921: LD_VAR 0 1
32925: PPUSH
32926: LD_INT 4
32928: PPUSH
32929: CALL_OW 289
32933: PUSH
32934: LD_INT 0
32936: EQUAL
32937: IFFALSE 32954
// SetCargo ( i , mat_siberit , 100 ) ;
32939: LD_VAR 0 1
32943: PPUSH
32944: LD_INT 3
32946: PPUSH
32947: LD_INT 100
32949: PPUSH
32950: CALL_OW 290
32954: GO 32918
32956: POP
32957: POP
// end ;
32958: PPOPN 2
32960: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
32961: LD_EXP 73
32965: PUSH
32966: LD_EXP 118
32970: AND
32971: IFFALSE 33154
32973: GO 32975
32975: DISABLE
32976: LD_INT 0
32978: PPUSH
32979: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32980: LD_ADDR_VAR 0 2
32984: PUSH
32985: LD_INT 22
32987: PUSH
32988: LD_OWVAR 2
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PPUSH
32997: CALL_OW 69
33001: ST_TO_ADDR
// if not tmp then
33002: LD_VAR 0 2
33006: NOT
33007: IFFALSE 33011
// exit ;
33009: GO 33154
// for i := 1 to 2 do
33011: LD_ADDR_VAR 0 1
33015: PUSH
33016: DOUBLE
33017: LD_INT 1
33019: DEC
33020: ST_TO_ADDR
33021: LD_INT 2
33023: PUSH
33024: FOR_TO
33025: IFFALSE 33152
// begin uc_side := your_side ;
33027: LD_ADDR_OWVAR 20
33031: PUSH
33032: LD_OWVAR 2
33036: ST_TO_ADDR
// uc_nation := nation_american ;
33037: LD_ADDR_OWVAR 21
33041: PUSH
33042: LD_INT 1
33044: ST_TO_ADDR
// vc_chassis := us_morphling ;
33045: LD_ADDR_OWVAR 37
33049: PUSH
33050: LD_INT 5
33052: ST_TO_ADDR
// vc_engine := engine_siberite ;
33053: LD_ADDR_OWVAR 39
33057: PUSH
33058: LD_INT 3
33060: ST_TO_ADDR
// vc_control := control_computer ;
33061: LD_ADDR_OWVAR 38
33065: PUSH
33066: LD_INT 3
33068: ST_TO_ADDR
// vc_weapon := us_double_laser ;
33069: LD_ADDR_OWVAR 40
33073: PUSH
33074: LD_INT 10
33076: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
33077: LD_VAR 0 2
33081: PUSH
33082: LD_INT 1
33084: ARRAY
33085: PPUSH
33086: CALL_OW 310
33090: NOT
33091: IFFALSE 33138
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
33093: CALL_OW 45
33097: PPUSH
33098: LD_VAR 0 2
33102: PUSH
33103: LD_INT 1
33105: ARRAY
33106: PPUSH
33107: CALL_OW 250
33111: PPUSH
33112: LD_VAR 0 2
33116: PUSH
33117: LD_INT 1
33119: ARRAY
33120: PPUSH
33121: CALL_OW 251
33125: PPUSH
33126: LD_INT 12
33128: PPUSH
33129: LD_INT 1
33131: PPUSH
33132: CALL_OW 50
33136: GO 33150
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
33138: CALL_OW 45
33142: PPUSH
33143: LD_INT 1
33145: PPUSH
33146: CALL_OW 51
// end ;
33150: GO 33024
33152: POP
33153: POP
// end ;
33154: PPOPN 2
33156: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
33157: LD_EXP 73
33161: PUSH
33162: LD_EXP 119
33166: AND
33167: IFFALSE 33389
33169: GO 33171
33171: DISABLE
33172: LD_INT 0
33174: PPUSH
33175: PPUSH
33176: PPUSH
33177: PPUSH
33178: PPUSH
33179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33180: LD_ADDR_VAR 0 6
33184: PUSH
33185: LD_INT 22
33187: PUSH
33188: LD_OWVAR 2
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 21
33199: PUSH
33200: LD_INT 1
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 3
33209: PUSH
33210: LD_INT 23
33212: PUSH
33213: LD_INT 0
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: LIST
33228: PPUSH
33229: CALL_OW 69
33233: ST_TO_ADDR
// if not tmp then
33234: LD_VAR 0 6
33238: NOT
33239: IFFALSE 33243
// exit ;
33241: GO 33389
// s1 := rand ( 1 , 4 ) ;
33243: LD_ADDR_VAR 0 2
33247: PUSH
33248: LD_INT 1
33250: PPUSH
33251: LD_INT 4
33253: PPUSH
33254: CALL_OW 12
33258: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
33259: LD_ADDR_VAR 0 4
33263: PUSH
33264: LD_VAR 0 6
33268: PUSH
33269: LD_INT 1
33271: ARRAY
33272: PPUSH
33273: LD_VAR 0 2
33277: PPUSH
33278: CALL_OW 259
33282: ST_TO_ADDR
// if s1 = 1 then
33283: LD_VAR 0 2
33287: PUSH
33288: LD_INT 1
33290: EQUAL
33291: IFFALSE 33311
// s2 := rand ( 2 , 4 ) else
33293: LD_ADDR_VAR 0 3
33297: PUSH
33298: LD_INT 2
33300: PPUSH
33301: LD_INT 4
33303: PPUSH
33304: CALL_OW 12
33308: ST_TO_ADDR
33309: GO 33319
// s2 := 1 ;
33311: LD_ADDR_VAR 0 3
33315: PUSH
33316: LD_INT 1
33318: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
33319: LD_ADDR_VAR 0 5
33323: PUSH
33324: LD_VAR 0 6
33328: PUSH
33329: LD_INT 1
33331: ARRAY
33332: PPUSH
33333: LD_VAR 0 3
33337: PPUSH
33338: CALL_OW 259
33342: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
33343: LD_VAR 0 6
33347: PUSH
33348: LD_INT 1
33350: ARRAY
33351: PPUSH
33352: LD_VAR 0 2
33356: PPUSH
33357: LD_VAR 0 5
33361: PPUSH
33362: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
33366: LD_VAR 0 6
33370: PUSH
33371: LD_INT 1
33373: ARRAY
33374: PPUSH
33375: LD_VAR 0 3
33379: PPUSH
33380: LD_VAR 0 4
33384: PPUSH
33385: CALL_OW 237
// end ;
33389: PPOPN 6
33391: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
33392: LD_EXP 73
33396: PUSH
33397: LD_EXP 120
33401: AND
33402: IFFALSE 33481
33404: GO 33406
33406: DISABLE
33407: LD_INT 0
33409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
33410: LD_ADDR_VAR 0 1
33414: PUSH
33415: LD_INT 22
33417: PUSH
33418: LD_OWVAR 2
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 30
33429: PUSH
33430: LD_INT 3
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PPUSH
33441: CALL_OW 69
33445: ST_TO_ADDR
// if not tmp then
33446: LD_VAR 0 1
33450: NOT
33451: IFFALSE 33455
// exit ;
33453: GO 33481
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
33455: LD_VAR 0 1
33459: PUSH
33460: LD_INT 1
33462: PPUSH
33463: LD_VAR 0 1
33467: PPUSH
33468: CALL_OW 12
33472: ARRAY
33473: PPUSH
33474: LD_INT 1
33476: PPUSH
33477: CALL_OW 234
// end ;
33481: PPOPN 1
33483: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
33484: LD_EXP 73
33488: PUSH
33489: LD_EXP 121
33493: AND
33494: IFFALSE 33606
33496: GO 33498
33498: DISABLE
33499: LD_INT 0
33501: PPUSH
33502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
33503: LD_ADDR_VAR 0 2
33507: PUSH
33508: LD_INT 22
33510: PUSH
33511: LD_OWVAR 2
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 2
33522: PUSH
33523: LD_INT 30
33525: PUSH
33526: LD_INT 27
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 30
33535: PUSH
33536: LD_INT 26
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 30
33545: PUSH
33546: LD_INT 28
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PPUSH
33563: CALL_OW 69
33567: ST_TO_ADDR
// if not tmp then
33568: LD_VAR 0 2
33572: NOT
33573: IFFALSE 33577
// exit ;
33575: GO 33606
// for i in tmp do
33577: LD_ADDR_VAR 0 1
33581: PUSH
33582: LD_VAR 0 2
33586: PUSH
33587: FOR_IN
33588: IFFALSE 33604
// SetLives ( i , 1 ) ;
33590: LD_VAR 0 1
33594: PPUSH
33595: LD_INT 1
33597: PPUSH
33598: CALL_OW 234
33602: GO 33587
33604: POP
33605: POP
// end ;
33606: PPOPN 2
33608: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
33609: LD_EXP 73
33613: PUSH
33614: LD_EXP 122
33618: AND
33619: IFFALSE 33893
33621: GO 33623
33623: DISABLE
33624: LD_INT 0
33626: PPUSH
33627: PPUSH
33628: PPUSH
// begin i := rand ( 1 , 7 ) ;
33629: LD_ADDR_VAR 0 1
33633: PUSH
33634: LD_INT 1
33636: PPUSH
33637: LD_INT 7
33639: PPUSH
33640: CALL_OW 12
33644: ST_TO_ADDR
// case i of 1 :
33645: LD_VAR 0 1
33649: PUSH
33650: LD_INT 1
33652: DOUBLE
33653: EQUAL
33654: IFTRUE 33658
33656: GO 33668
33658: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
33659: LD_STRING earthquake(getX(game), 0, 32)
33661: PPUSH
33662: CALL_OW 559
33666: GO 33893
33668: LD_INT 2
33670: DOUBLE
33671: EQUAL
33672: IFTRUE 33676
33674: GO 33690
33676: POP
// begin ToLua ( displayStucuk(); ) ;
33677: LD_STRING displayStucuk();
33679: PPUSH
33680: CALL_OW 559
// ResetFog ;
33684: CALL_OW 335
// end ; 3 :
33688: GO 33893
33690: LD_INT 3
33692: DOUBLE
33693: EQUAL
33694: IFTRUE 33698
33696: GO 33802
33698: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33699: LD_ADDR_VAR 0 2
33703: PUSH
33704: LD_INT 22
33706: PUSH
33707: LD_OWVAR 2
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 25
33718: PUSH
33719: LD_INT 1
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PPUSH
33730: CALL_OW 69
33734: ST_TO_ADDR
// if not tmp then
33735: LD_VAR 0 2
33739: NOT
33740: IFFALSE 33744
// exit ;
33742: GO 33893
// un := tmp [ rand ( 1 , tmp ) ] ;
33744: LD_ADDR_VAR 0 3
33748: PUSH
33749: LD_VAR 0 2
33753: PUSH
33754: LD_INT 1
33756: PPUSH
33757: LD_VAR 0 2
33761: PPUSH
33762: CALL_OW 12
33766: ARRAY
33767: ST_TO_ADDR
// if Crawls ( un ) then
33768: LD_VAR 0 3
33772: PPUSH
33773: CALL_OW 318
33777: IFFALSE 33788
// ComWalk ( un ) ;
33779: LD_VAR 0 3
33783: PPUSH
33784: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33788: LD_VAR 0 3
33792: PPUSH
33793: LD_INT 8
33795: PPUSH
33796: CALL_OW 336
// end ; 4 :
33800: GO 33893
33802: LD_INT 4
33804: DOUBLE
33805: EQUAL
33806: IFTRUE 33810
33808: GO 33871
33810: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33811: LD_ADDR_VAR 0 2
33815: PUSH
33816: LD_INT 22
33818: PUSH
33819: LD_OWVAR 2
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 30
33830: PUSH
33831: LD_INT 29
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PPUSH
33842: CALL_OW 69
33846: ST_TO_ADDR
// if not tmp then
33847: LD_VAR 0 2
33851: NOT
33852: IFFALSE 33856
// exit ;
33854: GO 33893
// DestroyUnit ( tmp [ 1 ] ) ;
33856: LD_VAR 0 2
33860: PUSH
33861: LD_INT 1
33863: ARRAY
33864: PPUSH
33865: CALL_OW 65
// end ; 5 .. 7 :
33869: GO 33893
33871: LD_INT 5
33873: DOUBLE
33874: GREATEREQUAL
33875: IFFALSE 33883
33877: LD_INT 7
33879: DOUBLE
33880: LESSEQUAL
33881: IFTRUE 33885
33883: GO 33892
33885: POP
// StreamSibBomb ; end ;
33886: CALL 30143 0 0
33890: GO 33893
33892: POP
// end ;
33893: PPOPN 3
33895: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
33896: LD_EXP 73
33900: PUSH
33901: LD_EXP 123
33905: AND
33906: IFFALSE 34062
33908: GO 33910
33910: DISABLE
33911: LD_INT 0
33913: PPUSH
33914: PPUSH
33915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
33916: LD_ADDR_VAR 0 2
33920: PUSH
33921: LD_INT 81
33923: PUSH
33924: LD_OWVAR 2
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 2
33935: PUSH
33936: LD_INT 21
33938: PUSH
33939: LD_INT 1
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 21
33948: PUSH
33949: LD_INT 2
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: LIST
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PPUSH
33965: CALL_OW 69
33969: ST_TO_ADDR
// if not tmp then
33970: LD_VAR 0 2
33974: NOT
33975: IFFALSE 33979
// exit ;
33977: GO 34062
// p := 0 ;
33979: LD_ADDR_VAR 0 3
33983: PUSH
33984: LD_INT 0
33986: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33987: LD_INT 35
33989: PPUSH
33990: CALL_OW 67
// p := p + 1 ;
33994: LD_ADDR_VAR 0 3
33998: PUSH
33999: LD_VAR 0 3
34003: PUSH
34004: LD_INT 1
34006: PLUS
34007: ST_TO_ADDR
// for i in tmp do
34008: LD_ADDR_VAR 0 1
34012: PUSH
34013: LD_VAR 0 2
34017: PUSH
34018: FOR_IN
34019: IFFALSE 34050
// if GetLives ( i ) < 1000 then
34021: LD_VAR 0 1
34025: PPUSH
34026: CALL_OW 256
34030: PUSH
34031: LD_INT 1000
34033: LESS
34034: IFFALSE 34048
// SetLives ( i , 1000 ) ;
34036: LD_VAR 0 1
34040: PPUSH
34041: LD_INT 1000
34043: PPUSH
34044: CALL_OW 234
34048: GO 34018
34050: POP
34051: POP
// until p > 20 ;
34052: LD_VAR 0 3
34056: PUSH
34057: LD_INT 20
34059: GREATER
34060: IFFALSE 33987
// end ;
34062: PPOPN 3
34064: END
// every 0 0$1 trigger StreamModeActive and sTime do
34065: LD_EXP 73
34069: PUSH
34070: LD_EXP 124
34074: AND
34075: IFFALSE 34110
34077: GO 34079
34079: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
34080: LD_INT 28
34082: PPUSH
34083: LD_OWVAR 2
34087: PPUSH
34088: LD_INT 2
34090: PPUSH
34091: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
34095: LD_INT 30
34097: PPUSH
34098: LD_OWVAR 2
34102: PPUSH
34103: LD_INT 2
34105: PPUSH
34106: CALL_OW 322
// end ;
34110: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
34111: LD_EXP 73
34115: PUSH
34116: LD_EXP 125
34120: AND
34121: IFFALSE 34242
34123: GO 34125
34125: DISABLE
34126: LD_INT 0
34128: PPUSH
34129: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34130: LD_ADDR_VAR 0 2
34134: PUSH
34135: LD_INT 22
34137: PUSH
34138: LD_OWVAR 2
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 21
34149: PUSH
34150: LD_INT 1
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 3
34159: PUSH
34160: LD_INT 23
34162: PUSH
34163: LD_INT 0
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: LIST
34178: PPUSH
34179: CALL_OW 69
34183: ST_TO_ADDR
// if not tmp then
34184: LD_VAR 0 2
34188: NOT
34189: IFFALSE 34193
// exit ;
34191: GO 34242
// for i in tmp do
34193: LD_ADDR_VAR 0 1
34197: PUSH
34198: LD_VAR 0 2
34202: PUSH
34203: FOR_IN
34204: IFFALSE 34240
// begin if Crawls ( i ) then
34206: LD_VAR 0 1
34210: PPUSH
34211: CALL_OW 318
34215: IFFALSE 34226
// ComWalk ( i ) ;
34217: LD_VAR 0 1
34221: PPUSH
34222: CALL_OW 138
// SetClass ( i , 2 ) ;
34226: LD_VAR 0 1
34230: PPUSH
34231: LD_INT 2
34233: PPUSH
34234: CALL_OW 336
// end ;
34238: GO 34203
34240: POP
34241: POP
// end ;
34242: PPOPN 2
34244: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
34245: LD_EXP 73
34249: PUSH
34250: LD_EXP 126
34254: AND
34255: IFFALSE 34536
34257: GO 34259
34259: DISABLE
34260: LD_INT 0
34262: PPUSH
34263: PPUSH
34264: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
34265: LD_OWVAR 2
34269: PPUSH
34270: LD_INT 9
34272: PPUSH
34273: LD_INT 1
34275: PPUSH
34276: LD_INT 1
34278: PPUSH
34279: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
34283: LD_INT 9
34285: PPUSH
34286: LD_OWVAR 2
34290: PPUSH
34291: CALL_OW 343
// uc_side := 9 ;
34295: LD_ADDR_OWVAR 20
34299: PUSH
34300: LD_INT 9
34302: ST_TO_ADDR
// uc_nation := 2 ;
34303: LD_ADDR_OWVAR 21
34307: PUSH
34308: LD_INT 2
34310: ST_TO_ADDR
// hc_name := Dark Warrior ;
34311: LD_ADDR_OWVAR 26
34315: PUSH
34316: LD_STRING Dark Warrior
34318: ST_TO_ADDR
// hc_gallery :=  ;
34319: LD_ADDR_OWVAR 33
34323: PUSH
34324: LD_STRING 
34326: ST_TO_ADDR
// hc_noskilllimit := true ;
34327: LD_ADDR_OWVAR 76
34331: PUSH
34332: LD_INT 1
34334: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
34335: LD_ADDR_OWVAR 31
34339: PUSH
34340: LD_INT 30
34342: PUSH
34343: LD_INT 30
34345: PUSH
34346: LD_INT 30
34348: PUSH
34349: LD_INT 30
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: ST_TO_ADDR
// un := CreateHuman ;
34358: LD_ADDR_VAR 0 3
34362: PUSH
34363: CALL_OW 44
34367: ST_TO_ADDR
// hc_noskilllimit := false ;
34368: LD_ADDR_OWVAR 76
34372: PUSH
34373: LD_INT 0
34375: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
34376: LD_VAR 0 3
34380: PPUSH
34381: LD_INT 1
34383: PPUSH
34384: CALL_OW 51
// p := 0 ;
34388: LD_ADDR_VAR 0 2
34392: PUSH
34393: LD_INT 0
34395: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
34396: LD_INT 35
34398: PPUSH
34399: CALL_OW 67
// p := p + 1 ;
34403: LD_ADDR_VAR 0 2
34407: PUSH
34408: LD_VAR 0 2
34412: PUSH
34413: LD_INT 1
34415: PLUS
34416: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
34417: LD_VAR 0 3
34421: PPUSH
34422: CALL_OW 256
34426: PUSH
34427: LD_INT 1000
34429: LESS
34430: IFFALSE 34444
// SetLives ( un , 1000 ) ;
34432: LD_VAR 0 3
34436: PPUSH
34437: LD_INT 1000
34439: PPUSH
34440: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
34444: LD_VAR 0 3
34448: PPUSH
34449: LD_INT 81
34451: PUSH
34452: LD_OWVAR 2
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 91
34463: PUSH
34464: LD_VAR 0 3
34468: PUSH
34469: LD_INT 30
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: LIST
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PPUSH
34481: CALL_OW 69
34485: PPUSH
34486: LD_VAR 0 3
34490: PPUSH
34491: CALL_OW 74
34495: PPUSH
34496: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
34500: LD_VAR 0 2
34504: PUSH
34505: LD_INT 60
34507: GREATER
34508: PUSH
34509: LD_VAR 0 3
34513: PPUSH
34514: CALL_OW 301
34518: OR
34519: IFFALSE 34396
// if un then
34521: LD_VAR 0 3
34525: IFFALSE 34536
// RemoveUnit ( un ) ;
34527: LD_VAR 0 3
34531: PPUSH
34532: CALL_OW 64
// end ;
34536: PPOPN 3
34538: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y ) ; begin
34539: LD_INT 0
34541: PPUSH
// case cmd of 301 :
34542: LD_VAR 0 1
34546: PUSH
34547: LD_INT 301
34549: DOUBLE
34550: EQUAL
34551: IFTRUE 34555
34553: GO 34558
34555: POP
// ; end ;
34556: GO 34559
34558: POP
// end ;
34559: LD_VAR 0 6
34563: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34564: LD_INT 0
34566: PPUSH
34567: PPUSH
34568: PPUSH
34569: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34570: LD_ADDR_VAR 0 4
34574: PUSH
34575: LD_INT 22
34577: PUSH
34578: LD_OWVAR 2
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 2
34589: PUSH
34590: LD_INT 30
34592: PUSH
34593: LD_INT 0
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 30
34602: PUSH
34603: LD_INT 1
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: LIST
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PPUSH
34619: CALL_OW 69
34623: ST_TO_ADDR
// if not tmp then
34624: LD_VAR 0 4
34628: NOT
34629: IFFALSE 34633
// exit ;
34631: GO 34692
// for i in tmp do
34633: LD_ADDR_VAR 0 2
34637: PUSH
34638: LD_VAR 0 4
34642: PUSH
34643: FOR_IN
34644: IFFALSE 34690
// for j = 1 to 3 do
34646: LD_ADDR_VAR 0 3
34650: PUSH
34651: DOUBLE
34652: LD_INT 1
34654: DEC
34655: ST_TO_ADDR
34656: LD_INT 3
34658: PUSH
34659: FOR_TO
34660: IFFALSE 34686
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34662: LD_VAR 0 2
34666: PPUSH
34667: CALL_OW 274
34671: PPUSH
34672: LD_VAR 0 3
34676: PPUSH
34677: LD_INT 99999
34679: PPUSH
34680: CALL_OW 277
34684: GO 34659
34686: POP
34687: POP
34688: GO 34643
34690: POP
34691: POP
// end ;
34692: LD_VAR 0 1
34696: RET
// export function hHackSetLevel10 ; var i , j ; begin
34697: LD_INT 0
34699: PPUSH
34700: PPUSH
34701: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34702: LD_ADDR_VAR 0 2
34706: PUSH
34707: LD_INT 21
34709: PUSH
34710: LD_INT 1
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PPUSH
34717: CALL_OW 69
34721: PUSH
34722: FOR_IN
34723: IFFALSE 34775
// if IsSelected ( i ) then
34725: LD_VAR 0 2
34729: PPUSH
34730: CALL_OW 306
34734: IFFALSE 34773
// begin for j := 1 to 4 do
34736: LD_ADDR_VAR 0 3
34740: PUSH
34741: DOUBLE
34742: LD_INT 1
34744: DEC
34745: ST_TO_ADDR
34746: LD_INT 4
34748: PUSH
34749: FOR_TO
34750: IFFALSE 34771
// SetSkill ( i , j , 10 ) ;
34752: LD_VAR 0 2
34756: PPUSH
34757: LD_VAR 0 3
34761: PPUSH
34762: LD_INT 10
34764: PPUSH
34765: CALL_OW 237
34769: GO 34749
34771: POP
34772: POP
// end ;
34773: GO 34722
34775: POP
34776: POP
// end ;
34777: LD_VAR 0 1
34781: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34782: LD_INT 0
34784: PPUSH
34785: PPUSH
34786: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34787: LD_ADDR_VAR 0 2
34791: PUSH
34792: LD_INT 22
34794: PUSH
34795: LD_OWVAR 2
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 21
34806: PUSH
34807: LD_INT 1
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PPUSH
34818: CALL_OW 69
34822: PUSH
34823: FOR_IN
34824: IFFALSE 34865
// begin for j := 1 to 4 do
34826: LD_ADDR_VAR 0 3
34830: PUSH
34831: DOUBLE
34832: LD_INT 1
34834: DEC
34835: ST_TO_ADDR
34836: LD_INT 4
34838: PUSH
34839: FOR_TO
34840: IFFALSE 34861
// SetSkill ( i , j , 10 ) ;
34842: LD_VAR 0 2
34846: PPUSH
34847: LD_VAR 0 3
34851: PPUSH
34852: LD_INT 10
34854: PPUSH
34855: CALL_OW 237
34859: GO 34839
34861: POP
34862: POP
// end ;
34863: GO 34823
34865: POP
34866: POP
// end ;
34867: LD_VAR 0 1
34871: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
34872: LD_INT 0
34874: PPUSH
// uc_side := your_side ;
34875: LD_ADDR_OWVAR 20
34879: PUSH
34880: LD_OWVAR 2
34884: ST_TO_ADDR
// uc_nation := nation ;
34885: LD_ADDR_OWVAR 21
34889: PUSH
34890: LD_VAR 0 1
34894: ST_TO_ADDR
// InitHc ;
34895: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34899: LD_INT 0
34901: PPUSH
34902: LD_VAR 0 2
34906: PPUSH
34907: LD_VAR 0 3
34911: PPUSH
34912: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
34916: CALL_OW 44
34920: PPUSH
34921: LD_INT 1
34923: PPUSH
34924: CALL_OW 51
// end ;
34928: LD_VAR 0 4
34932: RET
// export function hHackSpawnVehicle ; begin
34933: LD_INT 0
34935: PPUSH
// uc_side := your_side ;
34936: LD_ADDR_OWVAR 20
34940: PUSH
34941: LD_OWVAR 2
34945: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
34946: LD_ADDR_OWVAR 21
34950: PUSH
34951: LD_INT 1
34953: PPUSH
34954: LD_INT 3
34956: PPUSH
34957: CALL_OW 12
34961: ST_TO_ADDR
// InitVc ;
34962: CALL_OW 20
// case uc_nation of 1 :
34966: LD_OWVAR 21
34970: PUSH
34971: LD_INT 1
34973: DOUBLE
34974: EQUAL
34975: IFTRUE 34979
34977: GO 35123
34979: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
34980: LD_ADDR_OWVAR 37
34984: PUSH
34985: LD_INT 1
34987: PUSH
34988: LD_INT 2
34990: PUSH
34991: LD_INT 3
34993: PUSH
34994: LD_INT 4
34996: PUSH
34997: LD_INT 5
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 1
35009: PPUSH
35010: LD_INT 5
35012: PPUSH
35013: CALL_OW 12
35017: ARRAY
35018: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
35019: LD_ADDR_OWVAR 39
35023: PUSH
35024: LD_INT 1
35026: PPUSH
35027: LD_INT 3
35029: PPUSH
35030: CALL_OW 12
35034: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
35035: LD_ADDR_OWVAR 38
35039: PUSH
35040: LD_INT 1
35042: PUSH
35043: LD_INT 2
35045: PUSH
35046: LD_INT 3
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 1
35056: PPUSH
35057: LD_INT 3
35059: PPUSH
35060: CALL_OW 12
35064: ARRAY
35065: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
35066: LD_ADDR_OWVAR 40
35070: PUSH
35071: LD_INT 2
35073: PUSH
35074: LD_INT 4
35076: PUSH
35077: LD_INT 5
35079: PUSH
35080: LD_INT 3
35082: PUSH
35083: LD_INT 7
35085: PUSH
35086: LD_INT 8
35088: PUSH
35089: LD_INT 9
35091: PUSH
35092: LD_INT 10
35094: PUSH
35095: LD_INT 6
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 1
35111: PPUSH
35112: LD_INT 9
35114: PPUSH
35115: CALL_OW 12
35119: ARRAY
35120: ST_TO_ADDR
// end ; 2 :
35121: GO 35388
35123: LD_INT 2
35125: DOUBLE
35126: EQUAL
35127: IFTRUE 35131
35129: GO 35255
35131: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
35132: LD_ADDR_OWVAR 37
35136: PUSH
35137: LD_INT 11
35139: PUSH
35140: LD_INT 12
35142: PUSH
35143: LD_INT 13
35145: PUSH
35146: LD_INT 14
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 1
35157: PPUSH
35158: LD_INT 4
35160: PPUSH
35161: CALL_OW 12
35165: ARRAY
35166: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
35167: LD_ADDR_OWVAR 39
35171: PUSH
35172: LD_INT 1
35174: PPUSH
35175: LD_INT 3
35177: PPUSH
35178: CALL_OW 12
35182: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
35183: LD_ADDR_OWVAR 38
35187: PUSH
35188: LD_INT 1
35190: PUSH
35191: LD_INT 2
35193: PUSH
35194: LD_INT 5
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 1
35204: PPUSH
35205: LD_INT 3
35207: PPUSH
35208: CALL_OW 12
35212: ARRAY
35213: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
35214: LD_ADDR_OWVAR 40
35218: PUSH
35219: LD_INT 24
35221: PUSH
35222: LD_INT 26
35224: PUSH
35225: LD_INT 27
35227: PUSH
35228: LD_INT 28
35230: PUSH
35231: LD_INT 29
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 1
35243: PPUSH
35244: LD_INT 5
35246: PPUSH
35247: CALL_OW 12
35251: ARRAY
35252: ST_TO_ADDR
// end ; 3 :
35253: GO 35388
35255: LD_INT 3
35257: DOUBLE
35258: EQUAL
35259: IFTRUE 35263
35261: GO 35387
35263: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
35264: LD_ADDR_OWVAR 37
35268: PUSH
35269: LD_INT 21
35271: PUSH
35272: LD_INT 23
35274: PUSH
35275: LD_INT 22
35277: PUSH
35278: LD_INT 24
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 1
35289: PPUSH
35290: LD_INT 4
35292: PPUSH
35293: CALL_OW 12
35297: ARRAY
35298: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
35299: LD_ADDR_OWVAR 39
35303: PUSH
35304: LD_INT 1
35306: PPUSH
35307: LD_INT 3
35309: PPUSH
35310: CALL_OW 12
35314: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
35315: LD_ADDR_OWVAR 38
35319: PUSH
35320: LD_INT 1
35322: PUSH
35323: LD_INT 3
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 1
35332: PPUSH
35333: LD_INT 2
35335: PPUSH
35336: CALL_OW 12
35340: ARRAY
35341: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
35342: LD_ADDR_OWVAR 40
35346: PUSH
35347: LD_INT 42
35349: PUSH
35350: LD_INT 43
35352: PUSH
35353: LD_INT 44
35355: PUSH
35356: LD_INT 46
35358: PUSH
35359: LD_INT 48
35361: PUSH
35362: LD_INT 47
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 1
35375: PPUSH
35376: LD_INT 6
35378: PPUSH
35379: CALL_OW 12
35383: ARRAY
35384: ST_TO_ADDR
// end ; end ;
35385: GO 35388
35387: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
35388: CALL_OW 45
35392: PPUSH
35393: LD_INT 1
35395: PPUSH
35396: CALL_OW 51
// end ;
35400: LD_VAR 0 1
35404: RET
// export hInvincible ; every 1 do
35405: GO 35407
35407: DISABLE
// hInvincible := [ ] ;
35408: LD_ADDR_EXP 127
35412: PUSH
35413: EMPTY
35414: ST_TO_ADDR
35415: END
// every 10 do var i ;
35416: GO 35418
35418: DISABLE
35419: LD_INT 0
35421: PPUSH
// begin enable ;
35422: ENABLE
// if not hInvincible then
35423: LD_EXP 127
35427: NOT
35428: IFFALSE 35432
// exit ;
35430: GO 35476
// for i in hInvincible do
35432: LD_ADDR_VAR 0 1
35436: PUSH
35437: LD_EXP 127
35441: PUSH
35442: FOR_IN
35443: IFFALSE 35474
// if GetLives ( i ) < 1000 then
35445: LD_VAR 0 1
35449: PPUSH
35450: CALL_OW 256
35454: PUSH
35455: LD_INT 1000
35457: LESS
35458: IFFALSE 35472
// SetLives ( i , 1000 ) ;
35460: LD_VAR 0 1
35464: PPUSH
35465: LD_INT 1000
35467: PPUSH
35468: CALL_OW 234
35472: GO 35442
35474: POP
35475: POP
// end ;
35476: PPOPN 1
35478: END
// export function hHackInvincible ; var i ; begin
35479: LD_INT 0
35481: PPUSH
35482: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
35483: LD_ADDR_VAR 0 2
35487: PUSH
35488: LD_INT 2
35490: PUSH
35491: LD_INT 21
35493: PUSH
35494: LD_INT 1
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 21
35503: PUSH
35504: LD_INT 2
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: LIST
35515: PPUSH
35516: CALL_OW 69
35520: PUSH
35521: FOR_IN
35522: IFFALSE 35583
// if IsSelected ( i ) then
35524: LD_VAR 0 2
35528: PPUSH
35529: CALL_OW 306
35533: IFFALSE 35581
// begin if i in hInvincible then
35535: LD_VAR 0 2
35539: PUSH
35540: LD_EXP 127
35544: IN
35545: IFFALSE 35565
// hInvincible := hInvincible diff i else
35547: LD_ADDR_EXP 127
35551: PUSH
35552: LD_EXP 127
35556: PUSH
35557: LD_VAR 0 2
35561: DIFF
35562: ST_TO_ADDR
35563: GO 35581
// hInvincible := hInvincible union i ;
35565: LD_ADDR_EXP 127
35569: PUSH
35570: LD_EXP 127
35574: PUSH
35575: LD_VAR 0 2
35579: UNION
35580: ST_TO_ADDR
// end ;
35581: GO 35521
35583: POP
35584: POP
// end ;
35585: LD_VAR 0 1
35589: RET
// export function hHackInvisible ; var i , j ; begin
35590: LD_INT 0
35592: PPUSH
35593: PPUSH
35594: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35595: LD_ADDR_VAR 0 2
35599: PUSH
35600: LD_INT 21
35602: PUSH
35603: LD_INT 1
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PPUSH
35610: CALL_OW 69
35614: PUSH
35615: FOR_IN
35616: IFFALSE 35640
// if IsSelected ( i ) then
35618: LD_VAR 0 2
35622: PPUSH
35623: CALL_OW 306
35627: IFFALSE 35638
// ComForceInvisible ( i ) ;
35629: LD_VAR 0 2
35633: PPUSH
35634: CALL_OW 496
35638: GO 35615
35640: POP
35641: POP
// end ;
35642: LD_VAR 0 1
35646: RET
// export function hHackChangeYourSide ; begin
35647: LD_INT 0
35649: PPUSH
// if your_side = 8 then
35650: LD_OWVAR 2
35654: PUSH
35655: LD_INT 8
35657: EQUAL
35658: IFFALSE 35670
// your_side := 0 else
35660: LD_ADDR_OWVAR 2
35664: PUSH
35665: LD_INT 0
35667: ST_TO_ADDR
35668: GO 35684
// your_side := your_side + 1 ;
35670: LD_ADDR_OWVAR 2
35674: PUSH
35675: LD_OWVAR 2
35679: PUSH
35680: LD_INT 1
35682: PLUS
35683: ST_TO_ADDR
// end ;
35684: LD_VAR 0 1
35688: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35689: LD_INT 0
35691: PPUSH
35692: PPUSH
35693: PPUSH
// for i in all_units do
35694: LD_ADDR_VAR 0 2
35698: PUSH
35699: LD_OWVAR 3
35703: PUSH
35704: FOR_IN
35705: IFFALSE 35783
// if IsSelected ( i ) then
35707: LD_VAR 0 2
35711: PPUSH
35712: CALL_OW 306
35716: IFFALSE 35781
// begin j := GetSide ( i ) ;
35718: LD_ADDR_VAR 0 3
35722: PUSH
35723: LD_VAR 0 2
35727: PPUSH
35728: CALL_OW 255
35732: ST_TO_ADDR
// if j = 8 then
35733: LD_VAR 0 3
35737: PUSH
35738: LD_INT 8
35740: EQUAL
35741: IFFALSE 35753
// j := 0 else
35743: LD_ADDR_VAR 0 3
35747: PUSH
35748: LD_INT 0
35750: ST_TO_ADDR
35751: GO 35767
// j := j + 1 ;
35753: LD_ADDR_VAR 0 3
35757: PUSH
35758: LD_VAR 0 3
35762: PUSH
35763: LD_INT 1
35765: PLUS
35766: ST_TO_ADDR
// SetSide ( i , j ) ;
35767: LD_VAR 0 2
35771: PPUSH
35772: LD_VAR 0 3
35776: PPUSH
35777: CALL_OW 235
// end ;
35781: GO 35704
35783: POP
35784: POP
// end ;
35785: LD_VAR 0 1
35789: RET
// export function hHackFog ; begin
35790: LD_INT 0
35792: PPUSH
// FogOff ( true ) ;
35793: LD_INT 1
35795: PPUSH
35796: CALL_OW 344
// end ;
35800: LD_VAR 0 1
35804: RET
// export function hHackApeman ; begin
35805: LD_INT 0
35807: PPUSH
// uc_side := your_side ;
35808: LD_ADDR_OWVAR 20
35812: PUSH
35813: LD_OWVAR 2
35817: ST_TO_ADDR
// uc_nation := 0 ;
35818: LD_ADDR_OWVAR 21
35822: PUSH
35823: LD_INT 0
35825: ST_TO_ADDR
// hc_name :=  ;
35826: LD_ADDR_OWVAR 26
35830: PUSH
35831: LD_STRING 
35833: ST_TO_ADDR
// hc_gallery :=  ;
35834: LD_ADDR_OWVAR 33
35838: PUSH
35839: LD_STRING 
35841: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
35842: LD_ADDR_OWVAR 31
35846: PUSH
35847: LD_INT 0
35849: PUSH
35850: LD_INT 0
35852: PUSH
35853: LD_INT 0
35855: PUSH
35856: LD_INT 0
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: ST_TO_ADDR
// hc_class := class_apeman ;
35865: LD_ADDR_OWVAR 28
35869: PUSH
35870: LD_INT 12
35872: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
35873: CALL_OW 44
35877: PPUSH
35878: LD_INT 1
35880: PPUSH
35881: CALL_OW 51
// end ;
35885: LD_VAR 0 1
35889: RET
// export function hHackBoom ; begin
35890: LD_INT 0
35892: PPUSH
// uc_side := your_side ;
35893: LD_ADDR_OWVAR 20
35897: PUSH
35898: LD_OWVAR 2
35902: ST_TO_ADDR
// uc_nation := 1 ;
35903: LD_ADDR_OWVAR 21
35907: PUSH
35908: LD_INT 1
35910: ST_TO_ADDR
// vc_chassis := us_morphling ;
35911: LD_ADDR_OWVAR 37
35915: PUSH
35916: LD_INT 5
35918: ST_TO_ADDR
// vc_engine := engine_siberite ;
35919: LD_ADDR_OWVAR 39
35923: PUSH
35924: LD_INT 3
35926: ST_TO_ADDR
// vc_control := control_computer ;
35927: LD_ADDR_OWVAR 38
35931: PUSH
35932: LD_INT 3
35934: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
35935: LD_ADDR_OWVAR 40
35939: PUSH
35940: LD_INT 8
35942: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
35943: CALL_OW 45
35947: PPUSH
35948: LD_INT 1
35950: PPUSH
35951: CALL_OW 51
// end ; end_of_file
35955: LD_VAR 0 1
35959: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35960: LD_INT 0
35962: PPUSH
35963: PPUSH
35964: PPUSH
35965: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35966: LD_VAR 0 1
35970: PPUSH
35971: CALL_OW 264
35975: PUSH
35976: LD_EXP 62
35980: EQUAL
35981: IFFALSE 36053
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35983: LD_INT 68
35985: PPUSH
35986: LD_VAR 0 1
35990: PPUSH
35991: CALL_OW 255
35995: PPUSH
35996: CALL_OW 321
36000: PUSH
36001: LD_INT 2
36003: EQUAL
36004: IFFALSE 36016
// eff := 70 else
36006: LD_ADDR_VAR 0 4
36010: PUSH
36011: LD_INT 70
36013: ST_TO_ADDR
36014: GO 36024
// eff := 30 ;
36016: LD_ADDR_VAR 0 4
36020: PUSH
36021: LD_INT 30
36023: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36024: LD_VAR 0 1
36028: PPUSH
36029: CALL_OW 250
36033: PPUSH
36034: LD_VAR 0 1
36038: PPUSH
36039: CALL_OW 251
36043: PPUSH
36044: LD_VAR 0 4
36048: PPUSH
36049: CALL_OW 495
// end ; end ;
36053: LD_VAR 0 2
36057: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36058: LD_INT 0
36060: PPUSH
// end ;
36061: LD_VAR 0 4
36065: RET
// export function SOS_Command ( cmd ) ; begin
36066: LD_INT 0
36068: PPUSH
// end ;
36069: LD_VAR 0 2
36073: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36074: LD_INT 0
36076: PPUSH
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36077: LD_VAR 0 1
36081: PUSH
36082: LD_INT 254
36084: EQUAL
36085: PUSH
36086: LD_VAR 0 2
36090: PPUSH
36091: CALL_OW 264
36095: PUSH
36096: LD_EXP 60
36100: EQUAL
36101: AND
36102: PUSH
36103: LD_VAR 0 3
36107: PPUSH
36108: CALL_OW 263
36112: PUSH
36113: LD_INT 3
36115: EQUAL
36116: AND
36117: IFFALSE 36133
// HackDestroyVehicle ( unit , selectedUnit ) ;
36119: LD_VAR 0 2
36123: PPUSH
36124: LD_VAR 0 3
36128: PPUSH
36129: CALL 37642 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36133: LD_VAR 0 1
36137: PUSH
36138: LD_INT 255
36140: EQUAL
36141: PUSH
36142: LD_VAR 0 2
36146: PPUSH
36147: CALL_OW 264
36151: PUSH
36152: LD_INT 14
36154: PUSH
36155: LD_INT 53
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: IN
36162: AND
36163: PUSH
36164: LD_VAR 0 4
36168: PPUSH
36169: LD_VAR 0 5
36173: PPUSH
36174: CALL_OW 488
36178: AND
36179: IFFALSE 36203
// CutTreeXYR ( unit , x , y , 12 ) ;
36181: LD_VAR 0 2
36185: PPUSH
36186: LD_VAR 0 4
36190: PPUSH
36191: LD_VAR 0 5
36195: PPUSH
36196: LD_INT 12
36198: PPUSH
36199: CALL 36208 0 4
// end ;
36203: LD_VAR 0 6
36207: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36208: LD_INT 0
36210: PPUSH
36211: PPUSH
36212: PPUSH
36213: PPUSH
36214: PPUSH
36215: PPUSH
36216: PPUSH
36217: PPUSH
36218: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36219: LD_VAR 0 1
36223: NOT
36224: PUSH
36225: LD_VAR 0 2
36229: PPUSH
36230: LD_VAR 0 3
36234: PPUSH
36235: CALL_OW 488
36239: NOT
36240: OR
36241: PUSH
36242: LD_VAR 0 4
36246: NOT
36247: OR
36248: IFFALSE 36252
// exit ;
36250: GO 36592
// list := [ ] ;
36252: LD_ADDR_VAR 0 13
36256: PUSH
36257: EMPTY
36258: ST_TO_ADDR
// if x - r < 0 then
36259: LD_VAR 0 2
36263: PUSH
36264: LD_VAR 0 4
36268: MINUS
36269: PUSH
36270: LD_INT 0
36272: LESS
36273: IFFALSE 36285
// min_x := 0 else
36275: LD_ADDR_VAR 0 7
36279: PUSH
36280: LD_INT 0
36282: ST_TO_ADDR
36283: GO 36301
// min_x := x - r ;
36285: LD_ADDR_VAR 0 7
36289: PUSH
36290: LD_VAR 0 2
36294: PUSH
36295: LD_VAR 0 4
36299: MINUS
36300: ST_TO_ADDR
// if y - r < 0 then
36301: LD_VAR 0 3
36305: PUSH
36306: LD_VAR 0 4
36310: MINUS
36311: PUSH
36312: LD_INT 0
36314: LESS
36315: IFFALSE 36327
// min_y := 0 else
36317: LD_ADDR_VAR 0 8
36321: PUSH
36322: LD_INT 0
36324: ST_TO_ADDR
36325: GO 36343
// min_y := y - r ;
36327: LD_ADDR_VAR 0 8
36331: PUSH
36332: LD_VAR 0 3
36336: PUSH
36337: LD_VAR 0 4
36341: MINUS
36342: ST_TO_ADDR
// max_x := x + r ;
36343: LD_ADDR_VAR 0 9
36347: PUSH
36348: LD_VAR 0 2
36352: PUSH
36353: LD_VAR 0 4
36357: PLUS
36358: ST_TO_ADDR
// max_y := y + r ;
36359: LD_ADDR_VAR 0 10
36363: PUSH
36364: LD_VAR 0 3
36368: PUSH
36369: LD_VAR 0 4
36373: PLUS
36374: ST_TO_ADDR
// for _x = min_x to max_x do
36375: LD_ADDR_VAR 0 11
36379: PUSH
36380: DOUBLE
36381: LD_VAR 0 7
36385: DEC
36386: ST_TO_ADDR
36387: LD_VAR 0 9
36391: PUSH
36392: FOR_TO
36393: IFFALSE 36510
// for _y = min_y to max_y do
36395: LD_ADDR_VAR 0 12
36399: PUSH
36400: DOUBLE
36401: LD_VAR 0 8
36405: DEC
36406: ST_TO_ADDR
36407: LD_VAR 0 10
36411: PUSH
36412: FOR_TO
36413: IFFALSE 36506
// begin if not ValidHex ( _x , _y ) then
36415: LD_VAR 0 11
36419: PPUSH
36420: LD_VAR 0 12
36424: PPUSH
36425: CALL_OW 488
36429: NOT
36430: IFFALSE 36434
// continue ;
36432: GO 36412
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36434: LD_VAR 0 11
36438: PPUSH
36439: LD_VAR 0 12
36443: PPUSH
36444: CALL_OW 351
36448: PUSH
36449: LD_VAR 0 11
36453: PPUSH
36454: LD_VAR 0 12
36458: PPUSH
36459: CALL_OW 554
36463: AND
36464: IFFALSE 36504
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36466: LD_ADDR_VAR 0 13
36470: PUSH
36471: LD_VAR 0 13
36475: PPUSH
36476: LD_VAR 0 13
36480: PUSH
36481: LD_INT 1
36483: PLUS
36484: PPUSH
36485: LD_VAR 0 11
36489: PUSH
36490: LD_VAR 0 12
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PPUSH
36499: CALL_OW 2
36503: ST_TO_ADDR
// end ;
36504: GO 36412
36506: POP
36507: POP
36508: GO 36392
36510: POP
36511: POP
// if not list then
36512: LD_VAR 0 13
36516: NOT
36517: IFFALSE 36521
// exit ;
36519: GO 36592
// for i in list do
36521: LD_ADDR_VAR 0 6
36525: PUSH
36526: LD_VAR 0 13
36530: PUSH
36531: FOR_IN
36532: IFFALSE 36590
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36534: LD_VAR 0 1
36538: PPUSH
36539: LD_STRING M
36541: PUSH
36542: LD_VAR 0 6
36546: PUSH
36547: LD_INT 1
36549: ARRAY
36550: PUSH
36551: LD_VAR 0 6
36555: PUSH
36556: LD_INT 2
36558: ARRAY
36559: PUSH
36560: LD_INT 0
36562: PUSH
36563: LD_INT 0
36565: PUSH
36566: LD_INT 0
36568: PUSH
36569: LD_INT 0
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: PUSH
36581: EMPTY
36582: LIST
36583: PPUSH
36584: CALL_OW 447
36588: GO 36531
36590: POP
36591: POP
// end ;
36592: LD_VAR 0 5
36596: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36597: LD_EXP 128
36601: NOT
36602: IFFALSE 36652
36604: GO 36606
36606: DISABLE
// begin initHack := true ;
36607: LD_ADDR_EXP 128
36611: PUSH
36612: LD_INT 1
36614: ST_TO_ADDR
// hackTanks := [ ] ;
36615: LD_ADDR_EXP 129
36619: PUSH
36620: EMPTY
36621: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36622: LD_ADDR_EXP 130
36626: PUSH
36627: EMPTY
36628: ST_TO_ADDR
// hackLimit := 3 ;
36629: LD_ADDR_EXP 131
36633: PUSH
36634: LD_INT 3
36636: ST_TO_ADDR
// hackDist := 12 ;
36637: LD_ADDR_EXP 132
36641: PUSH
36642: LD_INT 12
36644: ST_TO_ADDR
// hackCounter := [ ] ;
36645: LD_ADDR_EXP 133
36649: PUSH
36650: EMPTY
36651: ST_TO_ADDR
// end ;
36652: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36653: LD_EXP 128
36657: PUSH
36658: LD_INT 34
36660: PUSH
36661: LD_EXP 60
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PPUSH
36670: CALL_OW 69
36674: AND
36675: IFFALSE 36930
36677: GO 36679
36679: DISABLE
36680: LD_INT 0
36682: PPUSH
36683: PPUSH
// begin enable ;
36684: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36685: LD_ADDR_VAR 0 1
36689: PUSH
36690: LD_INT 34
36692: PUSH
36693: LD_EXP 60
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PPUSH
36702: CALL_OW 69
36706: PUSH
36707: FOR_IN
36708: IFFALSE 36928
// begin if not i in hackTanks then
36710: LD_VAR 0 1
36714: PUSH
36715: LD_EXP 129
36719: IN
36720: NOT
36721: IFFALSE 36804
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36723: LD_ADDR_EXP 129
36727: PUSH
36728: LD_EXP 129
36732: PPUSH
36733: LD_EXP 129
36737: PUSH
36738: LD_INT 1
36740: PLUS
36741: PPUSH
36742: LD_VAR 0 1
36746: PPUSH
36747: CALL_OW 1
36751: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36752: LD_ADDR_EXP 130
36756: PUSH
36757: LD_EXP 130
36761: PPUSH
36762: LD_EXP 130
36766: PUSH
36767: LD_INT 1
36769: PLUS
36770: PPUSH
36771: EMPTY
36772: PPUSH
36773: CALL_OW 1
36777: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36778: LD_ADDR_EXP 133
36782: PUSH
36783: LD_EXP 133
36787: PPUSH
36788: LD_EXP 133
36792: PUSH
36793: LD_INT 1
36795: PLUS
36796: PPUSH
36797: EMPTY
36798: PPUSH
36799: CALL_OW 1
36803: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36804: LD_VAR 0 1
36808: PPUSH
36809: CALL_OW 302
36813: NOT
36814: IFFALSE 36827
// begin HackUnlinkAll ( i ) ;
36816: LD_VAR 0 1
36820: PPUSH
36821: CALL 36933 0 1
// continue ;
36825: GO 36707
// end ; HackCheckCapturedStatus ( i ) ;
36827: LD_VAR 0 1
36831: PPUSH
36832: CALL 37376 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36836: LD_ADDR_VAR 0 2
36840: PUSH
36841: LD_INT 81
36843: PUSH
36844: LD_VAR 0 1
36848: PPUSH
36849: CALL_OW 255
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 33
36860: PUSH
36861: LD_INT 3
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 91
36870: PUSH
36871: LD_VAR 0 1
36875: PUSH
36876: LD_EXP 132
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 50
36888: PUSH
36889: EMPTY
36890: LIST
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: PPUSH
36898: CALL_OW 69
36902: ST_TO_ADDR
// if not tmp then
36903: LD_VAR 0 2
36907: NOT
36908: IFFALSE 36912
// continue ;
36910: GO 36707
// HackLink ( i , tmp ) ;
36912: LD_VAR 0 1
36916: PPUSH
36917: LD_VAR 0 2
36921: PPUSH
36922: CALL 37069 0 2
// end ;
36926: GO 36707
36928: POP
36929: POP
// end ;
36930: PPOPN 2
36932: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36933: LD_INT 0
36935: PPUSH
36936: PPUSH
36937: PPUSH
// if not hack in hackTanks then
36938: LD_VAR 0 1
36942: PUSH
36943: LD_EXP 129
36947: IN
36948: NOT
36949: IFFALSE 36953
// exit ;
36951: GO 37064
// index := GetElementIndex ( hackTanks , hack ) ;
36953: LD_ADDR_VAR 0 4
36957: PUSH
36958: LD_EXP 129
36962: PPUSH
36963: LD_VAR 0 1
36967: PPUSH
36968: CALL 42484 0 2
36972: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36973: LD_EXP 130
36977: PUSH
36978: LD_VAR 0 4
36982: ARRAY
36983: IFFALSE 37064
// begin for i in hackTanksCaptured [ index ] do
36985: LD_ADDR_VAR 0 3
36989: PUSH
36990: LD_EXP 130
36994: PUSH
36995: LD_VAR 0 4
36999: ARRAY
37000: PUSH
37001: FOR_IN
37002: IFFALSE 37028
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37004: LD_VAR 0 3
37008: PUSH
37009: LD_INT 1
37011: ARRAY
37012: PPUSH
37013: LD_VAR 0 3
37017: PUSH
37018: LD_INT 2
37020: ARRAY
37021: PPUSH
37022: CALL_OW 235
37026: GO 37001
37028: POP
37029: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37030: LD_ADDR_EXP 130
37034: PUSH
37035: LD_EXP 130
37039: PPUSH
37040: LD_VAR 0 4
37044: PPUSH
37045: EMPTY
37046: PPUSH
37047: CALL_OW 1
37051: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37052: LD_VAR 0 1
37056: PPUSH
37057: LD_INT 0
37059: PPUSH
37060: CALL_OW 505
// end ; end ;
37064: LD_VAR 0 2
37068: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37069: LD_INT 0
37071: PPUSH
37072: PPUSH
37073: PPUSH
// if not hack in hackTanks or not vehicles then
37074: LD_VAR 0 1
37078: PUSH
37079: LD_EXP 129
37083: IN
37084: NOT
37085: PUSH
37086: LD_VAR 0 2
37090: NOT
37091: OR
37092: IFFALSE 37096
// exit ;
37094: GO 37371
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37096: LD_ADDR_VAR 0 2
37100: PUSH
37101: LD_VAR 0 1
37105: PPUSH
37106: LD_VAR 0 2
37110: PPUSH
37111: LD_INT 1
37113: PPUSH
37114: LD_INT 1
37116: PPUSH
37117: CALL 43134 0 4
37121: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37122: LD_ADDR_VAR 0 5
37126: PUSH
37127: LD_EXP 129
37131: PPUSH
37132: LD_VAR 0 1
37136: PPUSH
37137: CALL 42484 0 2
37141: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37142: LD_EXP 130
37146: PUSH
37147: LD_VAR 0 5
37151: ARRAY
37152: PUSH
37153: LD_EXP 131
37157: LESS
37158: IFFALSE 37347
// begin for i := 1 to vehicles do
37160: LD_ADDR_VAR 0 4
37164: PUSH
37165: DOUBLE
37166: LD_INT 1
37168: DEC
37169: ST_TO_ADDR
37170: LD_VAR 0 2
37174: PUSH
37175: FOR_TO
37176: IFFALSE 37345
// begin if hackTanksCaptured [ index ] = hackLimit then
37178: LD_EXP 130
37182: PUSH
37183: LD_VAR 0 5
37187: ARRAY
37188: PUSH
37189: LD_EXP 131
37193: EQUAL
37194: IFFALSE 37198
// break ;
37196: GO 37345
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37198: LD_ADDR_EXP 133
37202: PUSH
37203: LD_EXP 133
37207: PPUSH
37208: LD_VAR 0 5
37212: PPUSH
37213: LD_EXP 133
37217: PUSH
37218: LD_VAR 0 5
37222: ARRAY
37223: PUSH
37224: LD_INT 1
37226: PLUS
37227: PPUSH
37228: CALL_OW 1
37232: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37233: LD_ADDR_EXP 130
37237: PUSH
37238: LD_EXP 130
37242: PPUSH
37243: LD_VAR 0 5
37247: PUSH
37248: LD_EXP 130
37252: PUSH
37253: LD_VAR 0 5
37257: ARRAY
37258: PUSH
37259: LD_INT 1
37261: PLUS
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PPUSH
37267: LD_VAR 0 2
37271: PUSH
37272: LD_VAR 0 4
37276: ARRAY
37277: PUSH
37278: LD_VAR 0 2
37282: PUSH
37283: LD_VAR 0 4
37287: ARRAY
37288: PPUSH
37289: CALL_OW 255
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PPUSH
37298: CALL 42699 0 3
37302: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37303: LD_VAR 0 2
37307: PUSH
37308: LD_VAR 0 4
37312: ARRAY
37313: PPUSH
37314: LD_VAR 0 1
37318: PPUSH
37319: CALL_OW 255
37323: PPUSH
37324: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37328: LD_VAR 0 2
37332: PUSH
37333: LD_VAR 0 4
37337: ARRAY
37338: PPUSH
37339: CALL_OW 141
// end ;
37343: GO 37175
37345: POP
37346: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37347: LD_VAR 0 1
37351: PPUSH
37352: LD_EXP 130
37356: PUSH
37357: LD_VAR 0 5
37361: ARRAY
37362: PUSH
37363: LD_INT 0
37365: PLUS
37366: PPUSH
37367: CALL_OW 505
// end ;
37371: LD_VAR 0 3
37375: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37376: LD_INT 0
37378: PPUSH
37379: PPUSH
37380: PPUSH
37381: PPUSH
// if not hack in hackTanks then
37382: LD_VAR 0 1
37386: PUSH
37387: LD_EXP 129
37391: IN
37392: NOT
37393: IFFALSE 37397
// exit ;
37395: GO 37637
// index := GetElementIndex ( hackTanks , hack ) ;
37397: LD_ADDR_VAR 0 4
37401: PUSH
37402: LD_EXP 129
37406: PPUSH
37407: LD_VAR 0 1
37411: PPUSH
37412: CALL 42484 0 2
37416: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37417: LD_ADDR_VAR 0 3
37421: PUSH
37422: DOUBLE
37423: LD_EXP 130
37427: PUSH
37428: LD_VAR 0 4
37432: ARRAY
37433: INC
37434: ST_TO_ADDR
37435: LD_INT 1
37437: PUSH
37438: FOR_DOWNTO
37439: IFFALSE 37611
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37441: LD_ADDR_VAR 0 5
37445: PUSH
37446: LD_EXP 130
37450: PUSH
37451: LD_VAR 0 4
37455: ARRAY
37456: PUSH
37457: LD_VAR 0 3
37461: ARRAY
37462: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37463: LD_VAR 0 5
37467: PUSH
37468: LD_INT 1
37470: ARRAY
37471: PPUSH
37472: CALL_OW 302
37476: NOT
37477: PUSH
37478: LD_VAR 0 5
37482: PUSH
37483: LD_INT 1
37485: ARRAY
37486: PPUSH
37487: CALL_OW 255
37491: PUSH
37492: LD_VAR 0 1
37496: PPUSH
37497: CALL_OW 255
37501: NONEQUAL
37502: OR
37503: IFFALSE 37609
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37505: LD_VAR 0 5
37509: PUSH
37510: LD_INT 1
37512: ARRAY
37513: PPUSH
37514: CALL_OW 305
37518: PUSH
37519: LD_VAR 0 5
37523: PUSH
37524: LD_INT 1
37526: ARRAY
37527: PPUSH
37528: CALL_OW 255
37532: PUSH
37533: LD_VAR 0 1
37537: PPUSH
37538: CALL_OW 255
37542: EQUAL
37543: AND
37544: IFFALSE 37568
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37546: LD_VAR 0 5
37550: PUSH
37551: LD_INT 1
37553: ARRAY
37554: PPUSH
37555: LD_VAR 0 5
37559: PUSH
37560: LD_INT 2
37562: ARRAY
37563: PPUSH
37564: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37568: LD_ADDR_EXP 130
37572: PUSH
37573: LD_EXP 130
37577: PPUSH
37578: LD_VAR 0 4
37582: PPUSH
37583: LD_EXP 130
37587: PUSH
37588: LD_VAR 0 4
37592: ARRAY
37593: PPUSH
37594: LD_VAR 0 3
37598: PPUSH
37599: CALL_OW 3
37603: PPUSH
37604: CALL_OW 1
37608: ST_TO_ADDR
// end ; end ;
37609: GO 37438
37611: POP
37612: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37613: LD_VAR 0 1
37617: PPUSH
37618: LD_EXP 130
37622: PUSH
37623: LD_VAR 0 4
37627: ARRAY
37628: PUSH
37629: LD_INT 0
37631: PLUS
37632: PPUSH
37633: CALL_OW 505
// end ;
37637: LD_VAR 0 2
37641: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37642: LD_INT 0
37644: PPUSH
37645: PPUSH
37646: PPUSH
37647: PPUSH
// if not hack in hackTanks then
37648: LD_VAR 0 1
37652: PUSH
37653: LD_EXP 129
37657: IN
37658: NOT
37659: IFFALSE 37663
// exit ;
37661: GO 37748
// index := GetElementIndex ( hackTanks , hack ) ;
37663: LD_ADDR_VAR 0 5
37667: PUSH
37668: LD_EXP 129
37672: PPUSH
37673: LD_VAR 0 1
37677: PPUSH
37678: CALL 42484 0 2
37682: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37683: LD_ADDR_VAR 0 4
37687: PUSH
37688: DOUBLE
37689: LD_INT 1
37691: DEC
37692: ST_TO_ADDR
37693: LD_EXP 130
37697: PUSH
37698: LD_VAR 0 5
37702: ARRAY
37703: PUSH
37704: FOR_TO
37705: IFFALSE 37746
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37707: LD_EXP 130
37711: PUSH
37712: LD_VAR 0 5
37716: ARRAY
37717: PUSH
37718: LD_VAR 0 4
37722: ARRAY
37723: PUSH
37724: LD_INT 1
37726: ARRAY
37727: PUSH
37728: LD_VAR 0 2
37732: EQUAL
37733: IFFALSE 37744
// KillUnit ( vehicle ) ;
37735: LD_VAR 0 2
37739: PPUSH
37740: CALL_OW 66
37744: GO 37704
37746: POP
37747: POP
// end ; end_of_file
37748: LD_VAR 0 3
37752: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37753: LD_INT 0
37755: PPUSH
37756: PPUSH
// if exist_mode then
37757: LD_VAR 0 2
37761: IFFALSE 37786
// unit := CreateCharacter ( prefix & ident ) else
37763: LD_ADDR_VAR 0 5
37767: PUSH
37768: LD_VAR 0 3
37772: PUSH
37773: LD_VAR 0 1
37777: STR
37778: PPUSH
37779: CALL_OW 34
37783: ST_TO_ADDR
37784: GO 37801
// unit := NewCharacter ( ident ) ;
37786: LD_ADDR_VAR 0 5
37790: PUSH
37791: LD_VAR 0 1
37795: PPUSH
37796: CALL_OW 25
37800: ST_TO_ADDR
// result := unit ;
37801: LD_ADDR_VAR 0 4
37805: PUSH
37806: LD_VAR 0 5
37810: ST_TO_ADDR
// end ;
37811: LD_VAR 0 4
37815: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37816: LD_INT 0
37818: PPUSH
37819: PPUSH
// if not side or not nation then
37820: LD_VAR 0 1
37824: NOT
37825: PUSH
37826: LD_VAR 0 2
37830: NOT
37831: OR
37832: IFFALSE 37836
// exit ;
37834: GO 38600
// case nation of nation_american :
37836: LD_VAR 0 2
37840: PUSH
37841: LD_INT 1
37843: DOUBLE
37844: EQUAL
37845: IFTRUE 37849
37847: GO 38063
37849: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37850: LD_ADDR_VAR 0 4
37854: PUSH
37855: LD_INT 35
37857: PUSH
37858: LD_INT 45
37860: PUSH
37861: LD_INT 46
37863: PUSH
37864: LD_INT 47
37866: PUSH
37867: LD_INT 82
37869: PUSH
37870: LD_INT 83
37872: PUSH
37873: LD_INT 84
37875: PUSH
37876: LD_INT 85
37878: PUSH
37879: LD_INT 86
37881: PUSH
37882: LD_INT 1
37884: PUSH
37885: LD_INT 2
37887: PUSH
37888: LD_INT 6
37890: PUSH
37891: LD_INT 15
37893: PUSH
37894: LD_INT 16
37896: PUSH
37897: LD_INT 7
37899: PUSH
37900: LD_INT 12
37902: PUSH
37903: LD_INT 13
37905: PUSH
37906: LD_INT 10
37908: PUSH
37909: LD_INT 14
37911: PUSH
37912: LD_INT 20
37914: PUSH
37915: LD_INT 21
37917: PUSH
37918: LD_INT 22
37920: PUSH
37921: LD_INT 25
37923: PUSH
37924: LD_INT 32
37926: PUSH
37927: LD_INT 27
37929: PUSH
37930: LD_INT 36
37932: PUSH
37933: LD_INT 69
37935: PUSH
37936: LD_INT 39
37938: PUSH
37939: LD_INT 34
37941: PUSH
37942: LD_INT 40
37944: PUSH
37945: LD_INT 48
37947: PUSH
37948: LD_INT 49
37950: PUSH
37951: LD_INT 50
37953: PUSH
37954: LD_INT 51
37956: PUSH
37957: LD_INT 52
37959: PUSH
37960: LD_INT 53
37962: PUSH
37963: LD_INT 54
37965: PUSH
37966: LD_INT 55
37968: PUSH
37969: LD_INT 56
37971: PUSH
37972: LD_INT 57
37974: PUSH
37975: LD_INT 58
37977: PUSH
37978: LD_INT 59
37980: PUSH
37981: LD_INT 60
37983: PUSH
37984: LD_INT 61
37986: PUSH
37987: LD_INT 62
37989: PUSH
37990: LD_INT 80
37992: PUSH
37993: LD_INT 82
37995: PUSH
37996: LD_INT 83
37998: PUSH
37999: LD_INT 84
38001: PUSH
38002: LD_INT 85
38004: PUSH
38005: LD_INT 86
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: ST_TO_ADDR
38061: GO 38524
38063: LD_INT 2
38065: DOUBLE
38066: EQUAL
38067: IFTRUE 38071
38069: GO 38293
38071: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
38072: LD_ADDR_VAR 0 4
38076: PUSH
38077: LD_INT 35
38079: PUSH
38080: LD_INT 45
38082: PUSH
38083: LD_INT 46
38085: PUSH
38086: LD_INT 47
38088: PUSH
38089: LD_INT 82
38091: PUSH
38092: LD_INT 83
38094: PUSH
38095: LD_INT 84
38097: PUSH
38098: LD_INT 85
38100: PUSH
38101: LD_INT 87
38103: PUSH
38104: LD_INT 70
38106: PUSH
38107: LD_INT 1
38109: PUSH
38110: LD_INT 11
38112: PUSH
38113: LD_INT 3
38115: PUSH
38116: LD_INT 4
38118: PUSH
38119: LD_INT 5
38121: PUSH
38122: LD_INT 6
38124: PUSH
38125: LD_INT 15
38127: PUSH
38128: LD_INT 18
38130: PUSH
38131: LD_INT 7
38133: PUSH
38134: LD_INT 17
38136: PUSH
38137: LD_INT 8
38139: PUSH
38140: LD_INT 20
38142: PUSH
38143: LD_INT 21
38145: PUSH
38146: LD_INT 22
38148: PUSH
38149: LD_INT 72
38151: PUSH
38152: LD_INT 26
38154: PUSH
38155: LD_INT 69
38157: PUSH
38158: LD_INT 39
38160: PUSH
38161: LD_INT 40
38163: PUSH
38164: LD_INT 41
38166: PUSH
38167: LD_INT 42
38169: PUSH
38170: LD_INT 43
38172: PUSH
38173: LD_INT 48
38175: PUSH
38176: LD_INT 49
38178: PUSH
38179: LD_INT 50
38181: PUSH
38182: LD_INT 51
38184: PUSH
38185: LD_INT 52
38187: PUSH
38188: LD_INT 53
38190: PUSH
38191: LD_INT 54
38193: PUSH
38194: LD_INT 55
38196: PUSH
38197: LD_INT 56
38199: PUSH
38200: LD_INT 60
38202: PUSH
38203: LD_INT 61
38205: PUSH
38206: LD_INT 62
38208: PUSH
38209: LD_INT 66
38211: PUSH
38212: LD_INT 67
38214: PUSH
38215: LD_INT 68
38217: PUSH
38218: LD_INT 81
38220: PUSH
38221: LD_INT 82
38223: PUSH
38224: LD_INT 83
38226: PUSH
38227: LD_INT 84
38229: PUSH
38230: LD_INT 85
38232: PUSH
38233: LD_INT 87
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: ST_TO_ADDR
38291: GO 38524
38293: LD_INT 3
38295: DOUBLE
38296: EQUAL
38297: IFTRUE 38301
38299: GO 38523
38301: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38302: LD_ADDR_VAR 0 4
38306: PUSH
38307: LD_INT 46
38309: PUSH
38310: LD_INT 47
38312: PUSH
38313: LD_INT 1
38315: PUSH
38316: LD_INT 2
38318: PUSH
38319: LD_INT 82
38321: PUSH
38322: LD_INT 83
38324: PUSH
38325: LD_INT 84
38327: PUSH
38328: LD_INT 85
38330: PUSH
38331: LD_INT 86
38333: PUSH
38334: LD_INT 11
38336: PUSH
38337: LD_INT 9
38339: PUSH
38340: LD_INT 20
38342: PUSH
38343: LD_INT 19
38345: PUSH
38346: LD_INT 21
38348: PUSH
38349: LD_INT 24
38351: PUSH
38352: LD_INT 22
38354: PUSH
38355: LD_INT 25
38357: PUSH
38358: LD_INT 28
38360: PUSH
38361: LD_INT 29
38363: PUSH
38364: LD_INT 30
38366: PUSH
38367: LD_INT 31
38369: PUSH
38370: LD_INT 37
38372: PUSH
38373: LD_INT 38
38375: PUSH
38376: LD_INT 32
38378: PUSH
38379: LD_INT 27
38381: PUSH
38382: LD_INT 33
38384: PUSH
38385: LD_INT 69
38387: PUSH
38388: LD_INT 39
38390: PUSH
38391: LD_INT 34
38393: PUSH
38394: LD_INT 40
38396: PUSH
38397: LD_INT 71
38399: PUSH
38400: LD_INT 23
38402: PUSH
38403: LD_INT 44
38405: PUSH
38406: LD_INT 48
38408: PUSH
38409: LD_INT 49
38411: PUSH
38412: LD_INT 50
38414: PUSH
38415: LD_INT 51
38417: PUSH
38418: LD_INT 52
38420: PUSH
38421: LD_INT 53
38423: PUSH
38424: LD_INT 54
38426: PUSH
38427: LD_INT 55
38429: PUSH
38430: LD_INT 56
38432: PUSH
38433: LD_INT 57
38435: PUSH
38436: LD_INT 58
38438: PUSH
38439: LD_INT 59
38441: PUSH
38442: LD_INT 63
38444: PUSH
38445: LD_INT 64
38447: PUSH
38448: LD_INT 65
38450: PUSH
38451: LD_INT 82
38453: PUSH
38454: LD_INT 83
38456: PUSH
38457: LD_INT 84
38459: PUSH
38460: LD_INT 85
38462: PUSH
38463: LD_INT 86
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: ST_TO_ADDR
38521: GO 38524
38523: POP
// if state > - 1 and state < 3 then
38524: LD_VAR 0 3
38528: PUSH
38529: LD_INT 1
38531: NEG
38532: GREATER
38533: PUSH
38534: LD_VAR 0 3
38538: PUSH
38539: LD_INT 3
38541: LESS
38542: AND
38543: IFFALSE 38600
// for i in result do
38545: LD_ADDR_VAR 0 5
38549: PUSH
38550: LD_VAR 0 4
38554: PUSH
38555: FOR_IN
38556: IFFALSE 38598
// if GetTech ( i , side ) <> state then
38558: LD_VAR 0 5
38562: PPUSH
38563: LD_VAR 0 1
38567: PPUSH
38568: CALL_OW 321
38572: PUSH
38573: LD_VAR 0 3
38577: NONEQUAL
38578: IFFALSE 38596
// result := result diff i ;
38580: LD_ADDR_VAR 0 4
38584: PUSH
38585: LD_VAR 0 4
38589: PUSH
38590: LD_VAR 0 5
38594: DIFF
38595: ST_TO_ADDR
38596: GO 38555
38598: POP
38599: POP
// end ;
38600: LD_VAR 0 4
38604: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38605: LD_INT 0
38607: PPUSH
38608: PPUSH
38609: PPUSH
// result := true ;
38610: LD_ADDR_VAR 0 3
38614: PUSH
38615: LD_INT 1
38617: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38618: LD_ADDR_VAR 0 5
38622: PUSH
38623: LD_VAR 0 2
38627: PPUSH
38628: CALL_OW 480
38632: ST_TO_ADDR
// if not tmp then
38633: LD_VAR 0 5
38637: NOT
38638: IFFALSE 38642
// exit ;
38640: GO 38691
// for i in tmp do
38642: LD_ADDR_VAR 0 4
38646: PUSH
38647: LD_VAR 0 5
38651: PUSH
38652: FOR_IN
38653: IFFALSE 38689
// if GetTech ( i , side ) <> state_researched then
38655: LD_VAR 0 4
38659: PPUSH
38660: LD_VAR 0 1
38664: PPUSH
38665: CALL_OW 321
38669: PUSH
38670: LD_INT 2
38672: NONEQUAL
38673: IFFALSE 38687
// begin result := false ;
38675: LD_ADDR_VAR 0 3
38679: PUSH
38680: LD_INT 0
38682: ST_TO_ADDR
// exit ;
38683: POP
38684: POP
38685: GO 38691
// end ;
38687: GO 38652
38689: POP
38690: POP
// end ;
38691: LD_VAR 0 3
38695: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38696: LD_INT 0
38698: PPUSH
38699: PPUSH
38700: PPUSH
38701: PPUSH
38702: PPUSH
38703: PPUSH
38704: PPUSH
38705: PPUSH
38706: PPUSH
38707: PPUSH
38708: PPUSH
38709: PPUSH
38710: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38711: LD_VAR 0 1
38715: NOT
38716: PUSH
38717: LD_VAR 0 1
38721: PPUSH
38722: CALL_OW 257
38726: PUSH
38727: LD_INT 9
38729: NONEQUAL
38730: OR
38731: IFFALSE 38735
// exit ;
38733: GO 39308
// side := GetSide ( unit ) ;
38735: LD_ADDR_VAR 0 9
38739: PUSH
38740: LD_VAR 0 1
38744: PPUSH
38745: CALL_OW 255
38749: ST_TO_ADDR
// tech_space := tech_spacanom ;
38750: LD_ADDR_VAR 0 12
38754: PUSH
38755: LD_INT 29
38757: ST_TO_ADDR
// tech_time := tech_taurad ;
38758: LD_ADDR_VAR 0 13
38762: PUSH
38763: LD_INT 28
38765: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38766: LD_ADDR_VAR 0 11
38770: PUSH
38771: LD_VAR 0 1
38775: PPUSH
38776: CALL_OW 310
38780: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38781: LD_VAR 0 11
38785: PPUSH
38786: CALL_OW 247
38790: PUSH
38791: LD_INT 2
38793: EQUAL
38794: IFFALSE 38798
// exit ;
38796: GO 39308
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38798: LD_ADDR_VAR 0 8
38802: PUSH
38803: LD_INT 81
38805: PUSH
38806: LD_VAR 0 9
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 3
38817: PUSH
38818: LD_INT 21
38820: PUSH
38821: LD_INT 3
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PPUSH
38836: CALL_OW 69
38840: ST_TO_ADDR
// if not tmp then
38841: LD_VAR 0 8
38845: NOT
38846: IFFALSE 38850
// exit ;
38848: GO 39308
// if in_unit then
38850: LD_VAR 0 11
38854: IFFALSE 38878
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38856: LD_ADDR_VAR 0 10
38860: PUSH
38861: LD_VAR 0 8
38865: PPUSH
38866: LD_VAR 0 11
38870: PPUSH
38871: CALL_OW 74
38875: ST_TO_ADDR
38876: GO 38898
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38878: LD_ADDR_VAR 0 10
38882: PUSH
38883: LD_VAR 0 8
38887: PPUSH
38888: LD_VAR 0 1
38892: PPUSH
38893: CALL_OW 74
38897: ST_TO_ADDR
// if not enemy then
38898: LD_VAR 0 10
38902: NOT
38903: IFFALSE 38907
// exit ;
38905: GO 39308
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38907: LD_VAR 0 11
38911: PUSH
38912: LD_VAR 0 11
38916: PPUSH
38917: LD_VAR 0 10
38921: PPUSH
38922: CALL_OW 296
38926: PUSH
38927: LD_INT 13
38929: GREATER
38930: AND
38931: PUSH
38932: LD_VAR 0 1
38936: PPUSH
38937: LD_VAR 0 10
38941: PPUSH
38942: CALL_OW 296
38946: PUSH
38947: LD_INT 12
38949: GREATER
38950: OR
38951: IFFALSE 38955
// exit ;
38953: GO 39308
// missile := [ 1 ] ;
38955: LD_ADDR_VAR 0 14
38959: PUSH
38960: LD_INT 1
38962: PUSH
38963: EMPTY
38964: LIST
38965: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38966: LD_VAR 0 9
38970: PPUSH
38971: LD_VAR 0 12
38975: PPUSH
38976: CALL_OW 325
38980: IFFALSE 39009
// missile := Insert ( missile , missile + 1 , 2 ) ;
38982: LD_ADDR_VAR 0 14
38986: PUSH
38987: LD_VAR 0 14
38991: PPUSH
38992: LD_VAR 0 14
38996: PUSH
38997: LD_INT 1
38999: PLUS
39000: PPUSH
39001: LD_INT 2
39003: PPUSH
39004: CALL_OW 2
39008: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39009: LD_VAR 0 9
39013: PPUSH
39014: LD_VAR 0 13
39018: PPUSH
39019: CALL_OW 325
39023: PUSH
39024: LD_VAR 0 10
39028: PPUSH
39029: CALL_OW 255
39033: PPUSH
39034: LD_VAR 0 13
39038: PPUSH
39039: CALL_OW 325
39043: NOT
39044: AND
39045: IFFALSE 39074
// missile := Insert ( missile , missile + 1 , 3 ) ;
39047: LD_ADDR_VAR 0 14
39051: PUSH
39052: LD_VAR 0 14
39056: PPUSH
39057: LD_VAR 0 14
39061: PUSH
39062: LD_INT 1
39064: PLUS
39065: PPUSH
39066: LD_INT 3
39068: PPUSH
39069: CALL_OW 2
39073: ST_TO_ADDR
// if missile < 2 then
39074: LD_VAR 0 14
39078: PUSH
39079: LD_INT 2
39081: LESS
39082: IFFALSE 39086
// exit ;
39084: GO 39308
// x := GetX ( enemy ) ;
39086: LD_ADDR_VAR 0 4
39090: PUSH
39091: LD_VAR 0 10
39095: PPUSH
39096: CALL_OW 250
39100: ST_TO_ADDR
// y := GetY ( enemy ) ;
39101: LD_ADDR_VAR 0 5
39105: PUSH
39106: LD_VAR 0 10
39110: PPUSH
39111: CALL_OW 251
39115: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39116: LD_ADDR_VAR 0 6
39120: PUSH
39121: LD_VAR 0 4
39125: PUSH
39126: LD_INT 1
39128: NEG
39129: PPUSH
39130: LD_INT 1
39132: PPUSH
39133: CALL_OW 12
39137: PLUS
39138: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39139: LD_ADDR_VAR 0 7
39143: PUSH
39144: LD_VAR 0 5
39148: PUSH
39149: LD_INT 1
39151: NEG
39152: PPUSH
39153: LD_INT 1
39155: PPUSH
39156: CALL_OW 12
39160: PLUS
39161: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39162: LD_VAR 0 6
39166: PPUSH
39167: LD_VAR 0 7
39171: PPUSH
39172: CALL_OW 488
39176: NOT
39177: IFFALSE 39199
// begin _x := x ;
39179: LD_ADDR_VAR 0 6
39183: PUSH
39184: LD_VAR 0 4
39188: ST_TO_ADDR
// _y := y ;
39189: LD_ADDR_VAR 0 7
39193: PUSH
39194: LD_VAR 0 5
39198: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39199: LD_ADDR_VAR 0 3
39203: PUSH
39204: LD_INT 1
39206: PPUSH
39207: LD_VAR 0 14
39211: PPUSH
39212: CALL_OW 12
39216: ST_TO_ADDR
// case i of 1 :
39217: LD_VAR 0 3
39221: PUSH
39222: LD_INT 1
39224: DOUBLE
39225: EQUAL
39226: IFTRUE 39230
39228: GO 39247
39230: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39231: LD_VAR 0 1
39235: PPUSH
39236: LD_VAR 0 10
39240: PPUSH
39241: CALL_OW 115
39245: GO 39308
39247: LD_INT 2
39249: DOUBLE
39250: EQUAL
39251: IFTRUE 39255
39253: GO 39277
39255: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39256: LD_VAR 0 1
39260: PPUSH
39261: LD_VAR 0 6
39265: PPUSH
39266: LD_VAR 0 7
39270: PPUSH
39271: CALL_OW 153
39275: GO 39308
39277: LD_INT 3
39279: DOUBLE
39280: EQUAL
39281: IFTRUE 39285
39283: GO 39307
39285: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39286: LD_VAR 0 1
39290: PPUSH
39291: LD_VAR 0 6
39295: PPUSH
39296: LD_VAR 0 7
39300: PPUSH
39301: CALL_OW 154
39305: GO 39308
39307: POP
// end ;
39308: LD_VAR 0 2
39312: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39313: LD_INT 0
39315: PPUSH
39316: PPUSH
39317: PPUSH
39318: PPUSH
39319: PPUSH
39320: PPUSH
// if not unit or not building then
39321: LD_VAR 0 1
39325: NOT
39326: PUSH
39327: LD_VAR 0 2
39331: NOT
39332: OR
39333: IFFALSE 39337
// exit ;
39335: GO 39495
// x := GetX ( building ) ;
39337: LD_ADDR_VAR 0 5
39341: PUSH
39342: LD_VAR 0 2
39346: PPUSH
39347: CALL_OW 250
39351: ST_TO_ADDR
// y := GetY ( building ) ;
39352: LD_ADDR_VAR 0 6
39356: PUSH
39357: LD_VAR 0 2
39361: PPUSH
39362: CALL_OW 251
39366: ST_TO_ADDR
// for i = 0 to 5 do
39367: LD_ADDR_VAR 0 4
39371: PUSH
39372: DOUBLE
39373: LD_INT 0
39375: DEC
39376: ST_TO_ADDR
39377: LD_INT 5
39379: PUSH
39380: FOR_TO
39381: IFFALSE 39493
// begin _x := ShiftX ( x , i , 3 ) ;
39383: LD_ADDR_VAR 0 7
39387: PUSH
39388: LD_VAR 0 5
39392: PPUSH
39393: LD_VAR 0 4
39397: PPUSH
39398: LD_INT 3
39400: PPUSH
39401: CALL_OW 272
39405: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39406: LD_ADDR_VAR 0 8
39410: PUSH
39411: LD_VAR 0 6
39415: PPUSH
39416: LD_VAR 0 4
39420: PPUSH
39421: LD_INT 3
39423: PPUSH
39424: CALL_OW 273
39428: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39429: LD_VAR 0 7
39433: PPUSH
39434: LD_VAR 0 8
39438: PPUSH
39439: CALL_OW 488
39443: NOT
39444: IFFALSE 39448
// continue ;
39446: GO 39380
// if HexInfo ( _x , _y ) = 0 then
39448: LD_VAR 0 7
39452: PPUSH
39453: LD_VAR 0 8
39457: PPUSH
39458: CALL_OW 428
39462: PUSH
39463: LD_INT 0
39465: EQUAL
39466: IFFALSE 39491
// begin ComMoveXY ( unit , _x , _y ) ;
39468: LD_VAR 0 1
39472: PPUSH
39473: LD_VAR 0 7
39477: PPUSH
39478: LD_VAR 0 8
39482: PPUSH
39483: CALL_OW 111
// exit ;
39487: POP
39488: POP
39489: GO 39495
// end ; end ;
39491: GO 39380
39493: POP
39494: POP
// end ;
39495: LD_VAR 0 3
39499: RET
// export function ScanBase ( side , base_area ) ; begin
39500: LD_INT 0
39502: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39503: LD_ADDR_VAR 0 3
39507: PUSH
39508: LD_VAR 0 2
39512: PPUSH
39513: LD_INT 81
39515: PUSH
39516: LD_VAR 0 1
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PPUSH
39525: CALL_OW 70
39529: ST_TO_ADDR
// end ;
39530: LD_VAR 0 3
39534: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39535: LD_INT 0
39537: PPUSH
39538: PPUSH
39539: PPUSH
39540: PPUSH
// result := false ;
39541: LD_ADDR_VAR 0 2
39545: PUSH
39546: LD_INT 0
39548: ST_TO_ADDR
// side := GetSide ( unit ) ;
39549: LD_ADDR_VAR 0 3
39553: PUSH
39554: LD_VAR 0 1
39558: PPUSH
39559: CALL_OW 255
39563: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39564: LD_ADDR_VAR 0 4
39568: PUSH
39569: LD_VAR 0 1
39573: PPUSH
39574: CALL_OW 248
39578: ST_TO_ADDR
// case nat of 1 :
39579: LD_VAR 0 4
39583: PUSH
39584: LD_INT 1
39586: DOUBLE
39587: EQUAL
39588: IFTRUE 39592
39590: GO 39603
39592: POP
// tech := tech_lassight ; 2 :
39593: LD_ADDR_VAR 0 5
39597: PUSH
39598: LD_INT 12
39600: ST_TO_ADDR
39601: GO 39642
39603: LD_INT 2
39605: DOUBLE
39606: EQUAL
39607: IFTRUE 39611
39609: GO 39622
39611: POP
// tech := tech_mortar ; 3 :
39612: LD_ADDR_VAR 0 5
39616: PUSH
39617: LD_INT 41
39619: ST_TO_ADDR
39620: GO 39642
39622: LD_INT 3
39624: DOUBLE
39625: EQUAL
39626: IFTRUE 39630
39628: GO 39641
39630: POP
// tech := tech_bazooka ; end ;
39631: LD_ADDR_VAR 0 5
39635: PUSH
39636: LD_INT 44
39638: ST_TO_ADDR
39639: GO 39642
39641: POP
// if Researched ( side , tech ) then
39642: LD_VAR 0 3
39646: PPUSH
39647: LD_VAR 0 5
39651: PPUSH
39652: CALL_OW 325
39656: IFFALSE 39683
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39658: LD_ADDR_VAR 0 2
39662: PUSH
39663: LD_INT 5
39665: PUSH
39666: LD_INT 8
39668: PUSH
39669: LD_INT 9
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: LIST
39676: PUSH
39677: LD_VAR 0 4
39681: ARRAY
39682: ST_TO_ADDR
// end ;
39683: LD_VAR 0 2
39687: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39688: LD_INT 0
39690: PPUSH
39691: PPUSH
39692: PPUSH
// if not mines then
39693: LD_VAR 0 2
39697: NOT
39698: IFFALSE 39702
// exit ;
39700: GO 39846
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39702: LD_ADDR_VAR 0 5
39706: PUSH
39707: LD_INT 81
39709: PUSH
39710: LD_VAR 0 1
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 3
39721: PUSH
39722: LD_INT 21
39724: PUSH
39725: LD_INT 3
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PPUSH
39740: CALL_OW 69
39744: ST_TO_ADDR
// for i in mines do
39745: LD_ADDR_VAR 0 4
39749: PUSH
39750: LD_VAR 0 2
39754: PUSH
39755: FOR_IN
39756: IFFALSE 39844
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39758: LD_VAR 0 4
39762: PUSH
39763: LD_INT 1
39765: ARRAY
39766: PPUSH
39767: LD_VAR 0 4
39771: PUSH
39772: LD_INT 2
39774: ARRAY
39775: PPUSH
39776: CALL_OW 458
39780: NOT
39781: IFFALSE 39785
// continue ;
39783: GO 39755
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39785: LD_VAR 0 4
39789: PUSH
39790: LD_INT 1
39792: ARRAY
39793: PPUSH
39794: LD_VAR 0 4
39798: PUSH
39799: LD_INT 2
39801: ARRAY
39802: PPUSH
39803: CALL_OW 428
39807: PUSH
39808: LD_VAR 0 5
39812: IN
39813: IFFALSE 39842
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39815: LD_VAR 0 4
39819: PUSH
39820: LD_INT 1
39822: ARRAY
39823: PPUSH
39824: LD_VAR 0 4
39828: PUSH
39829: LD_INT 2
39831: ARRAY
39832: PPUSH
39833: LD_VAR 0 1
39837: PPUSH
39838: CALL_OW 456
// end ;
39842: GO 39755
39844: POP
39845: POP
// end ;
39846: LD_VAR 0 3
39850: RET
// export function Count ( array ) ; var i ; begin
39851: LD_INT 0
39853: PPUSH
39854: PPUSH
// result := 0 ;
39855: LD_ADDR_VAR 0 2
39859: PUSH
39860: LD_INT 0
39862: ST_TO_ADDR
// for i in array do
39863: LD_ADDR_VAR 0 3
39867: PUSH
39868: LD_VAR 0 1
39872: PUSH
39873: FOR_IN
39874: IFFALSE 39898
// if i then
39876: LD_VAR 0 3
39880: IFFALSE 39896
// result := result + 1 ;
39882: LD_ADDR_VAR 0 2
39886: PUSH
39887: LD_VAR 0 2
39891: PUSH
39892: LD_INT 1
39894: PLUS
39895: ST_TO_ADDR
39896: GO 39873
39898: POP
39899: POP
// end ;
39900: LD_VAR 0 2
39904: RET
// export function IsEmpty ( building ) ; begin
39905: LD_INT 0
39907: PPUSH
// if not building then
39908: LD_VAR 0 1
39912: NOT
39913: IFFALSE 39917
// exit ;
39915: GO 39960
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39917: LD_ADDR_VAR 0 2
39921: PUSH
39922: LD_VAR 0 1
39926: PUSH
39927: LD_INT 22
39929: PUSH
39930: LD_VAR 0 1
39934: PPUSH
39935: CALL_OW 255
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 58
39946: PUSH
39947: EMPTY
39948: LIST
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PPUSH
39954: CALL_OW 69
39958: IN
39959: ST_TO_ADDR
// end ;
39960: LD_VAR 0 2
39964: RET
// export function IsNotFull ( building ) ; begin
39965: LD_INT 0
39967: PPUSH
// if not building then
39968: LD_VAR 0 1
39972: NOT
39973: IFFALSE 39977
// exit ;
39975: GO 39996
// result := UnitsInside ( building ) < 6 ;
39977: LD_ADDR_VAR 0 2
39981: PUSH
39982: LD_VAR 0 1
39986: PPUSH
39987: CALL_OW 313
39991: PUSH
39992: LD_INT 6
39994: LESS
39995: ST_TO_ADDR
// end ;
39996: LD_VAR 0 2
40000: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40001: LD_INT 0
40003: PPUSH
40004: PPUSH
40005: PPUSH
40006: PPUSH
// tmp := [ ] ;
40007: LD_ADDR_VAR 0 3
40011: PUSH
40012: EMPTY
40013: ST_TO_ADDR
// list := [ ] ;
40014: LD_ADDR_VAR 0 5
40018: PUSH
40019: EMPTY
40020: ST_TO_ADDR
// for i = 16 to 25 do
40021: LD_ADDR_VAR 0 4
40025: PUSH
40026: DOUBLE
40027: LD_INT 16
40029: DEC
40030: ST_TO_ADDR
40031: LD_INT 25
40033: PUSH
40034: FOR_TO
40035: IFFALSE 40108
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40037: LD_ADDR_VAR 0 3
40041: PUSH
40042: LD_VAR 0 3
40046: PUSH
40047: LD_INT 22
40049: PUSH
40050: LD_VAR 0 1
40054: PPUSH
40055: CALL_OW 255
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 91
40066: PUSH
40067: LD_VAR 0 1
40071: PUSH
40072: LD_INT 6
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 30
40082: PUSH
40083: LD_VAR 0 4
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: LIST
40096: PUSH
40097: EMPTY
40098: LIST
40099: PPUSH
40100: CALL_OW 69
40104: ADD
40105: ST_TO_ADDR
40106: GO 40034
40108: POP
40109: POP
// for i = 1 to tmp do
40110: LD_ADDR_VAR 0 4
40114: PUSH
40115: DOUBLE
40116: LD_INT 1
40118: DEC
40119: ST_TO_ADDR
40120: LD_VAR 0 3
40124: PUSH
40125: FOR_TO
40126: IFFALSE 40214
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40128: LD_ADDR_VAR 0 5
40132: PUSH
40133: LD_VAR 0 5
40137: PUSH
40138: LD_VAR 0 3
40142: PUSH
40143: LD_VAR 0 4
40147: ARRAY
40148: PPUSH
40149: CALL_OW 266
40153: PUSH
40154: LD_VAR 0 3
40158: PUSH
40159: LD_VAR 0 4
40163: ARRAY
40164: PPUSH
40165: CALL_OW 250
40169: PUSH
40170: LD_VAR 0 3
40174: PUSH
40175: LD_VAR 0 4
40179: ARRAY
40180: PPUSH
40181: CALL_OW 251
40185: PUSH
40186: LD_VAR 0 3
40190: PUSH
40191: LD_VAR 0 4
40195: ARRAY
40196: PPUSH
40197: CALL_OW 254
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: PUSH
40208: EMPTY
40209: LIST
40210: ADD
40211: ST_TO_ADDR
40212: GO 40125
40214: POP
40215: POP
// result := list ;
40216: LD_ADDR_VAR 0 2
40220: PUSH
40221: LD_VAR 0 5
40225: ST_TO_ADDR
// end ;
40226: LD_VAR 0 2
40230: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40231: LD_INT 0
40233: PPUSH
40234: PPUSH
40235: PPUSH
40236: PPUSH
40237: PPUSH
40238: PPUSH
40239: PPUSH
// if not factory then
40240: LD_VAR 0 1
40244: NOT
40245: IFFALSE 40249
// exit ;
40247: GO 40842
// if control = control_apeman then
40249: LD_VAR 0 4
40253: PUSH
40254: LD_INT 5
40256: EQUAL
40257: IFFALSE 40366
// begin tmp := UnitsInside ( factory ) ;
40259: LD_ADDR_VAR 0 8
40263: PUSH
40264: LD_VAR 0 1
40268: PPUSH
40269: CALL_OW 313
40273: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40274: LD_VAR 0 8
40278: PPUSH
40279: LD_INT 25
40281: PUSH
40282: LD_INT 12
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PPUSH
40289: CALL_OW 72
40293: NOT
40294: IFFALSE 40304
// control := control_manual ;
40296: LD_ADDR_VAR 0 4
40300: PUSH
40301: LD_INT 1
40303: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40304: LD_ADDR_VAR 0 8
40308: PUSH
40309: LD_VAR 0 1
40313: PPUSH
40314: CALL 40001 0 1
40318: ST_TO_ADDR
// if tmp then
40319: LD_VAR 0 8
40323: IFFALSE 40366
// begin for i in tmp do
40325: LD_ADDR_VAR 0 7
40329: PUSH
40330: LD_VAR 0 8
40334: PUSH
40335: FOR_IN
40336: IFFALSE 40364
// if i [ 1 ] = b_ext_radio then
40338: LD_VAR 0 7
40342: PUSH
40343: LD_INT 1
40345: ARRAY
40346: PUSH
40347: LD_INT 22
40349: EQUAL
40350: IFFALSE 40362
// begin control := control_remote ;
40352: LD_ADDR_VAR 0 4
40356: PUSH
40357: LD_INT 2
40359: ST_TO_ADDR
// break ;
40360: GO 40364
// end ;
40362: GO 40335
40364: POP
40365: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40366: LD_VAR 0 1
40370: PPUSH
40371: LD_VAR 0 2
40375: PPUSH
40376: LD_VAR 0 3
40380: PPUSH
40381: LD_VAR 0 4
40385: PPUSH
40386: LD_VAR 0 5
40390: PPUSH
40391: CALL_OW 448
40395: IFFALSE 40430
// begin result := [ chassis , engine , control , weapon ] ;
40397: LD_ADDR_VAR 0 6
40401: PUSH
40402: LD_VAR 0 2
40406: PUSH
40407: LD_VAR 0 3
40411: PUSH
40412: LD_VAR 0 4
40416: PUSH
40417: LD_VAR 0 5
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: ST_TO_ADDR
// exit ;
40428: GO 40842
// end ; _chassis := AvailableChassisList ( factory ) ;
40430: LD_ADDR_VAR 0 9
40434: PUSH
40435: LD_VAR 0 1
40439: PPUSH
40440: CALL_OW 475
40444: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40445: LD_ADDR_VAR 0 11
40449: PUSH
40450: LD_VAR 0 1
40454: PPUSH
40455: CALL_OW 476
40459: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40460: LD_ADDR_VAR 0 12
40464: PUSH
40465: LD_VAR 0 1
40469: PPUSH
40470: CALL_OW 477
40474: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40475: LD_ADDR_VAR 0 10
40479: PUSH
40480: LD_VAR 0 1
40484: PPUSH
40485: CALL_OW 478
40489: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40490: LD_VAR 0 9
40494: NOT
40495: PUSH
40496: LD_VAR 0 11
40500: NOT
40501: OR
40502: PUSH
40503: LD_VAR 0 12
40507: NOT
40508: OR
40509: PUSH
40510: LD_VAR 0 10
40514: NOT
40515: OR
40516: IFFALSE 40551
// begin result := [ chassis , engine , control , weapon ] ;
40518: LD_ADDR_VAR 0 6
40522: PUSH
40523: LD_VAR 0 2
40527: PUSH
40528: LD_VAR 0 3
40532: PUSH
40533: LD_VAR 0 4
40537: PUSH
40538: LD_VAR 0 5
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: ST_TO_ADDR
// exit ;
40549: GO 40842
// end ; if not chassis in _chassis then
40551: LD_VAR 0 2
40555: PUSH
40556: LD_VAR 0 9
40560: IN
40561: NOT
40562: IFFALSE 40588
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40564: LD_ADDR_VAR 0 2
40568: PUSH
40569: LD_VAR 0 9
40573: PUSH
40574: LD_INT 1
40576: PPUSH
40577: LD_VAR 0 9
40581: PPUSH
40582: CALL_OW 12
40586: ARRAY
40587: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40588: LD_VAR 0 2
40592: PPUSH
40593: LD_VAR 0 3
40597: PPUSH
40598: CALL 40847 0 2
40602: NOT
40603: IFFALSE 40662
// repeat engine := _engine [ 1 ] ;
40605: LD_ADDR_VAR 0 3
40609: PUSH
40610: LD_VAR 0 11
40614: PUSH
40615: LD_INT 1
40617: ARRAY
40618: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40619: LD_ADDR_VAR 0 11
40623: PUSH
40624: LD_VAR 0 11
40628: PPUSH
40629: LD_INT 1
40631: PPUSH
40632: CALL_OW 3
40636: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40637: LD_VAR 0 2
40641: PPUSH
40642: LD_VAR 0 3
40646: PPUSH
40647: CALL 40847 0 2
40651: PUSH
40652: LD_VAR 0 11
40656: PUSH
40657: EMPTY
40658: EQUAL
40659: OR
40660: IFFALSE 40605
// if not control in _control then
40662: LD_VAR 0 4
40666: PUSH
40667: LD_VAR 0 12
40671: IN
40672: NOT
40673: IFFALSE 40699
// control := _control [ rand ( 1 , _control ) ] ;
40675: LD_ADDR_VAR 0 4
40679: PUSH
40680: LD_VAR 0 12
40684: PUSH
40685: LD_INT 1
40687: PPUSH
40688: LD_VAR 0 12
40692: PPUSH
40693: CALL_OW 12
40697: ARRAY
40698: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40699: LD_VAR 0 2
40703: PPUSH
40704: LD_VAR 0 5
40708: PPUSH
40709: CALL 41067 0 2
40713: NOT
40714: IFFALSE 40773
// repeat weapon := _weapon [ 1 ] ;
40716: LD_ADDR_VAR 0 5
40720: PUSH
40721: LD_VAR 0 10
40725: PUSH
40726: LD_INT 1
40728: ARRAY
40729: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40730: LD_ADDR_VAR 0 10
40734: PUSH
40735: LD_VAR 0 10
40739: PPUSH
40740: LD_INT 1
40742: PPUSH
40743: CALL_OW 3
40747: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40748: LD_VAR 0 2
40752: PPUSH
40753: LD_VAR 0 5
40757: PPUSH
40758: CALL 41067 0 2
40762: PUSH
40763: LD_VAR 0 10
40767: PUSH
40768: EMPTY
40769: EQUAL
40770: OR
40771: IFFALSE 40716
// result := [ ] ;
40773: LD_ADDR_VAR 0 6
40777: PUSH
40778: EMPTY
40779: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40780: LD_VAR 0 1
40784: PPUSH
40785: LD_VAR 0 2
40789: PPUSH
40790: LD_VAR 0 3
40794: PPUSH
40795: LD_VAR 0 4
40799: PPUSH
40800: LD_VAR 0 5
40804: PPUSH
40805: CALL_OW 448
40809: IFFALSE 40842
// result := [ chassis , engine , control , weapon ] ;
40811: LD_ADDR_VAR 0 6
40815: PUSH
40816: LD_VAR 0 2
40820: PUSH
40821: LD_VAR 0 3
40825: PUSH
40826: LD_VAR 0 4
40830: PUSH
40831: LD_VAR 0 5
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: ST_TO_ADDR
// end ;
40842: LD_VAR 0 6
40846: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40847: LD_INT 0
40849: PPUSH
// if not chassis or not engine then
40850: LD_VAR 0 1
40854: NOT
40855: PUSH
40856: LD_VAR 0 2
40860: NOT
40861: OR
40862: IFFALSE 40866
// exit ;
40864: GO 41062
// case engine of engine_solar :
40866: LD_VAR 0 2
40870: PUSH
40871: LD_INT 2
40873: DOUBLE
40874: EQUAL
40875: IFTRUE 40879
40877: GO 40917
40879: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40880: LD_ADDR_VAR 0 3
40884: PUSH
40885: LD_INT 11
40887: PUSH
40888: LD_INT 12
40890: PUSH
40891: LD_INT 13
40893: PUSH
40894: LD_INT 14
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: LD_INT 2
40902: PUSH
40903: LD_INT 3
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: ST_TO_ADDR
40915: GO 41046
40917: LD_INT 1
40919: DOUBLE
40920: EQUAL
40921: IFTRUE 40925
40923: GO 40987
40925: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40926: LD_ADDR_VAR 0 3
40930: PUSH
40931: LD_INT 11
40933: PUSH
40934: LD_INT 12
40936: PUSH
40937: LD_INT 13
40939: PUSH
40940: LD_INT 14
40942: PUSH
40943: LD_INT 1
40945: PUSH
40946: LD_INT 2
40948: PUSH
40949: LD_INT 3
40951: PUSH
40952: LD_INT 4
40954: PUSH
40955: LD_INT 5
40957: PUSH
40958: LD_INT 21
40960: PUSH
40961: LD_INT 23
40963: PUSH
40964: LD_INT 22
40966: PUSH
40967: LD_INT 24
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: ST_TO_ADDR
40985: GO 41046
40987: LD_INT 3
40989: DOUBLE
40990: EQUAL
40991: IFTRUE 40995
40993: GO 41045
40995: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40996: LD_ADDR_VAR 0 3
41000: PUSH
41001: LD_INT 13
41003: PUSH
41004: LD_INT 14
41006: PUSH
41007: LD_INT 2
41009: PUSH
41010: LD_INT 3
41012: PUSH
41013: LD_INT 4
41015: PUSH
41016: LD_INT 5
41018: PUSH
41019: LD_INT 21
41021: PUSH
41022: LD_INT 22
41024: PUSH
41025: LD_INT 23
41027: PUSH
41028: LD_INT 24
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: ST_TO_ADDR
41043: GO 41046
41045: POP
// result := ( chassis in result ) ;
41046: LD_ADDR_VAR 0 3
41050: PUSH
41051: LD_VAR 0 1
41055: PUSH
41056: LD_VAR 0 3
41060: IN
41061: ST_TO_ADDR
// end ;
41062: LD_VAR 0 3
41066: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41067: LD_INT 0
41069: PPUSH
// if not chassis or not weapon then
41070: LD_VAR 0 1
41074: NOT
41075: PUSH
41076: LD_VAR 0 2
41080: NOT
41081: OR
41082: IFFALSE 41086
// exit ;
41084: GO 42112
// case weapon of us_machine_gun :
41086: LD_VAR 0 2
41090: PUSH
41091: LD_INT 2
41093: DOUBLE
41094: EQUAL
41095: IFTRUE 41099
41097: GO 41129
41099: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41100: LD_ADDR_VAR 0 3
41104: PUSH
41105: LD_INT 1
41107: PUSH
41108: LD_INT 2
41110: PUSH
41111: LD_INT 3
41113: PUSH
41114: LD_INT 4
41116: PUSH
41117: LD_INT 5
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: ST_TO_ADDR
41127: GO 42096
41129: LD_INT 3
41131: DOUBLE
41132: EQUAL
41133: IFTRUE 41137
41135: GO 41167
41137: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41138: LD_ADDR_VAR 0 3
41142: PUSH
41143: LD_INT 1
41145: PUSH
41146: LD_INT 2
41148: PUSH
41149: LD_INT 3
41151: PUSH
41152: LD_INT 4
41154: PUSH
41155: LD_INT 5
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: ST_TO_ADDR
41165: GO 42096
41167: LD_INT 11
41169: DOUBLE
41170: EQUAL
41171: IFTRUE 41175
41173: GO 41205
41175: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41176: LD_ADDR_VAR 0 3
41180: PUSH
41181: LD_INT 1
41183: PUSH
41184: LD_INT 2
41186: PUSH
41187: LD_INT 3
41189: PUSH
41190: LD_INT 4
41192: PUSH
41193: LD_INT 5
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: ST_TO_ADDR
41203: GO 42096
41205: LD_INT 4
41207: DOUBLE
41208: EQUAL
41209: IFTRUE 41213
41211: GO 41239
41213: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41214: LD_ADDR_VAR 0 3
41218: PUSH
41219: LD_INT 2
41221: PUSH
41222: LD_INT 3
41224: PUSH
41225: LD_INT 4
41227: PUSH
41228: LD_INT 5
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: ST_TO_ADDR
41237: GO 42096
41239: LD_INT 5
41241: DOUBLE
41242: EQUAL
41243: IFTRUE 41247
41245: GO 41273
41247: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41248: LD_ADDR_VAR 0 3
41252: PUSH
41253: LD_INT 2
41255: PUSH
41256: LD_INT 3
41258: PUSH
41259: LD_INT 4
41261: PUSH
41262: LD_INT 5
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: ST_TO_ADDR
41271: GO 42096
41273: LD_INT 9
41275: DOUBLE
41276: EQUAL
41277: IFTRUE 41281
41279: GO 41307
41281: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41282: LD_ADDR_VAR 0 3
41286: PUSH
41287: LD_INT 2
41289: PUSH
41290: LD_INT 3
41292: PUSH
41293: LD_INT 4
41295: PUSH
41296: LD_INT 5
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: ST_TO_ADDR
41305: GO 42096
41307: LD_INT 7
41309: DOUBLE
41310: EQUAL
41311: IFTRUE 41315
41313: GO 41341
41315: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41316: LD_ADDR_VAR 0 3
41320: PUSH
41321: LD_INT 2
41323: PUSH
41324: LD_INT 3
41326: PUSH
41327: LD_INT 4
41329: PUSH
41330: LD_INT 5
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: ST_TO_ADDR
41339: GO 42096
41341: LD_INT 12
41343: DOUBLE
41344: EQUAL
41345: IFTRUE 41349
41347: GO 41375
41349: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41350: LD_ADDR_VAR 0 3
41354: PUSH
41355: LD_INT 2
41357: PUSH
41358: LD_INT 3
41360: PUSH
41361: LD_INT 4
41363: PUSH
41364: LD_INT 5
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: ST_TO_ADDR
41373: GO 42096
41375: LD_INT 13
41377: DOUBLE
41378: EQUAL
41379: IFTRUE 41383
41381: GO 41409
41383: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41384: LD_ADDR_VAR 0 3
41388: PUSH
41389: LD_INT 2
41391: PUSH
41392: LD_INT 3
41394: PUSH
41395: LD_INT 4
41397: PUSH
41398: LD_INT 5
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: ST_TO_ADDR
41407: GO 42096
41409: LD_INT 14
41411: DOUBLE
41412: EQUAL
41413: IFTRUE 41417
41415: GO 41435
41417: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41418: LD_ADDR_VAR 0 3
41422: PUSH
41423: LD_INT 4
41425: PUSH
41426: LD_INT 5
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: ST_TO_ADDR
41433: GO 42096
41435: LD_INT 6
41437: DOUBLE
41438: EQUAL
41439: IFTRUE 41443
41441: GO 41461
41443: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41444: LD_ADDR_VAR 0 3
41448: PUSH
41449: LD_INT 4
41451: PUSH
41452: LD_INT 5
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: ST_TO_ADDR
41459: GO 42096
41461: LD_INT 10
41463: DOUBLE
41464: EQUAL
41465: IFTRUE 41469
41467: GO 41487
41469: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41470: LD_ADDR_VAR 0 3
41474: PUSH
41475: LD_INT 4
41477: PUSH
41478: LD_INT 5
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: ST_TO_ADDR
41485: GO 42096
41487: LD_INT 22
41489: DOUBLE
41490: EQUAL
41491: IFTRUE 41495
41493: GO 41521
41495: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41496: LD_ADDR_VAR 0 3
41500: PUSH
41501: LD_INT 11
41503: PUSH
41504: LD_INT 12
41506: PUSH
41507: LD_INT 13
41509: PUSH
41510: LD_INT 14
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: ST_TO_ADDR
41519: GO 42096
41521: LD_INT 23
41523: DOUBLE
41524: EQUAL
41525: IFTRUE 41529
41527: GO 41555
41529: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41530: LD_ADDR_VAR 0 3
41534: PUSH
41535: LD_INT 11
41537: PUSH
41538: LD_INT 12
41540: PUSH
41541: LD_INT 13
41543: PUSH
41544: LD_INT 14
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: ST_TO_ADDR
41553: GO 42096
41555: LD_INT 24
41557: DOUBLE
41558: EQUAL
41559: IFTRUE 41563
41561: GO 41589
41563: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41564: LD_ADDR_VAR 0 3
41568: PUSH
41569: LD_INT 11
41571: PUSH
41572: LD_INT 12
41574: PUSH
41575: LD_INT 13
41577: PUSH
41578: LD_INT 14
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: ST_TO_ADDR
41587: GO 42096
41589: LD_INT 30
41591: DOUBLE
41592: EQUAL
41593: IFTRUE 41597
41595: GO 41623
41597: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41598: LD_ADDR_VAR 0 3
41602: PUSH
41603: LD_INT 11
41605: PUSH
41606: LD_INT 12
41608: PUSH
41609: LD_INT 13
41611: PUSH
41612: LD_INT 14
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: ST_TO_ADDR
41621: GO 42096
41623: LD_INT 25
41625: DOUBLE
41626: EQUAL
41627: IFTRUE 41631
41629: GO 41649
41631: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41632: LD_ADDR_VAR 0 3
41636: PUSH
41637: LD_INT 13
41639: PUSH
41640: LD_INT 14
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: ST_TO_ADDR
41647: GO 42096
41649: LD_INT 27
41651: DOUBLE
41652: EQUAL
41653: IFTRUE 41657
41655: GO 41675
41657: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41658: LD_ADDR_VAR 0 3
41662: PUSH
41663: LD_INT 13
41665: PUSH
41666: LD_INT 14
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: ST_TO_ADDR
41673: GO 42096
41675: LD_INT 28
41677: DOUBLE
41678: EQUAL
41679: IFTRUE 41683
41681: GO 41701
41683: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41684: LD_ADDR_VAR 0 3
41688: PUSH
41689: LD_INT 13
41691: PUSH
41692: LD_INT 14
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: ST_TO_ADDR
41699: GO 42096
41701: LD_INT 29
41703: DOUBLE
41704: EQUAL
41705: IFTRUE 41709
41707: GO 41727
41709: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41710: LD_ADDR_VAR 0 3
41714: PUSH
41715: LD_INT 13
41717: PUSH
41718: LD_INT 14
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: ST_TO_ADDR
41725: GO 42096
41727: LD_INT 31
41729: DOUBLE
41730: EQUAL
41731: IFTRUE 41735
41733: GO 41753
41735: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41736: LD_ADDR_VAR 0 3
41740: PUSH
41741: LD_INT 13
41743: PUSH
41744: LD_INT 14
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: ST_TO_ADDR
41751: GO 42096
41753: LD_INT 26
41755: DOUBLE
41756: EQUAL
41757: IFTRUE 41761
41759: GO 41779
41761: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41762: LD_ADDR_VAR 0 3
41766: PUSH
41767: LD_INT 13
41769: PUSH
41770: LD_INT 14
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: ST_TO_ADDR
41777: GO 42096
41779: LD_INT 42
41781: DOUBLE
41782: EQUAL
41783: IFTRUE 41787
41785: GO 41813
41787: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41788: LD_ADDR_VAR 0 3
41792: PUSH
41793: LD_INT 21
41795: PUSH
41796: LD_INT 22
41798: PUSH
41799: LD_INT 23
41801: PUSH
41802: LD_INT 24
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: ST_TO_ADDR
41811: GO 42096
41813: LD_INT 43
41815: DOUBLE
41816: EQUAL
41817: IFTRUE 41821
41819: GO 41847
41821: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41822: LD_ADDR_VAR 0 3
41826: PUSH
41827: LD_INT 21
41829: PUSH
41830: LD_INT 22
41832: PUSH
41833: LD_INT 23
41835: PUSH
41836: LD_INT 24
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: ST_TO_ADDR
41845: GO 42096
41847: LD_INT 44
41849: DOUBLE
41850: EQUAL
41851: IFTRUE 41855
41853: GO 41881
41855: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41856: LD_ADDR_VAR 0 3
41860: PUSH
41861: LD_INT 21
41863: PUSH
41864: LD_INT 22
41866: PUSH
41867: LD_INT 23
41869: PUSH
41870: LD_INT 24
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: ST_TO_ADDR
41879: GO 42096
41881: LD_INT 45
41883: DOUBLE
41884: EQUAL
41885: IFTRUE 41889
41887: GO 41915
41889: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41890: LD_ADDR_VAR 0 3
41894: PUSH
41895: LD_INT 21
41897: PUSH
41898: LD_INT 22
41900: PUSH
41901: LD_INT 23
41903: PUSH
41904: LD_INT 24
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: ST_TO_ADDR
41913: GO 42096
41915: LD_INT 49
41917: DOUBLE
41918: EQUAL
41919: IFTRUE 41923
41921: GO 41949
41923: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41924: LD_ADDR_VAR 0 3
41928: PUSH
41929: LD_INT 21
41931: PUSH
41932: LD_INT 22
41934: PUSH
41935: LD_INT 23
41937: PUSH
41938: LD_INT 24
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: ST_TO_ADDR
41947: GO 42096
41949: LD_INT 51
41951: DOUBLE
41952: EQUAL
41953: IFTRUE 41957
41955: GO 41983
41957: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41958: LD_ADDR_VAR 0 3
41962: PUSH
41963: LD_INT 21
41965: PUSH
41966: LD_INT 22
41968: PUSH
41969: LD_INT 23
41971: PUSH
41972: LD_INT 24
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: ST_TO_ADDR
41981: GO 42096
41983: LD_INT 52
41985: DOUBLE
41986: EQUAL
41987: IFTRUE 41991
41989: GO 42017
41991: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41992: LD_ADDR_VAR 0 3
41996: PUSH
41997: LD_INT 21
41999: PUSH
42000: LD_INT 22
42002: PUSH
42003: LD_INT 23
42005: PUSH
42006: LD_INT 24
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: ST_TO_ADDR
42015: GO 42096
42017: LD_INT 53
42019: DOUBLE
42020: EQUAL
42021: IFTRUE 42025
42023: GO 42043
42025: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42026: LD_ADDR_VAR 0 3
42030: PUSH
42031: LD_INT 23
42033: PUSH
42034: LD_INT 24
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: ST_TO_ADDR
42041: GO 42096
42043: LD_INT 46
42045: DOUBLE
42046: EQUAL
42047: IFTRUE 42051
42049: GO 42069
42051: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42052: LD_ADDR_VAR 0 3
42056: PUSH
42057: LD_INT 23
42059: PUSH
42060: LD_INT 24
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: ST_TO_ADDR
42067: GO 42096
42069: LD_INT 47
42071: DOUBLE
42072: EQUAL
42073: IFTRUE 42077
42075: GO 42095
42077: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42078: LD_ADDR_VAR 0 3
42082: PUSH
42083: LD_INT 23
42085: PUSH
42086: LD_INT 24
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: ST_TO_ADDR
42093: GO 42096
42095: POP
// result := ( chassis in result ) ;
42096: LD_ADDR_VAR 0 3
42100: PUSH
42101: LD_VAR 0 1
42105: PUSH
42106: LD_VAR 0 3
42110: IN
42111: ST_TO_ADDR
// end ;
42112: LD_VAR 0 3
42116: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42117: LD_INT 0
42119: PPUSH
42120: PPUSH
42121: PPUSH
42122: PPUSH
42123: PPUSH
42124: PPUSH
42125: PPUSH
// result := array ;
42126: LD_ADDR_VAR 0 5
42130: PUSH
42131: LD_VAR 0 1
42135: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42136: LD_VAR 0 1
42140: NOT
42141: PUSH
42142: LD_VAR 0 2
42146: NOT
42147: OR
42148: PUSH
42149: LD_VAR 0 3
42153: NOT
42154: OR
42155: PUSH
42156: LD_VAR 0 2
42160: PUSH
42161: LD_VAR 0 1
42165: GREATER
42166: OR
42167: PUSH
42168: LD_VAR 0 3
42172: PUSH
42173: LD_VAR 0 1
42177: GREATER
42178: OR
42179: IFFALSE 42183
// exit ;
42181: GO 42479
// if direction then
42183: LD_VAR 0 4
42187: IFFALSE 42251
// begin d := 1 ;
42189: LD_ADDR_VAR 0 9
42193: PUSH
42194: LD_INT 1
42196: ST_TO_ADDR
// if i_from > i_to then
42197: LD_VAR 0 2
42201: PUSH
42202: LD_VAR 0 3
42206: GREATER
42207: IFFALSE 42233
// length := ( array - i_from ) + i_to else
42209: LD_ADDR_VAR 0 11
42213: PUSH
42214: LD_VAR 0 1
42218: PUSH
42219: LD_VAR 0 2
42223: MINUS
42224: PUSH
42225: LD_VAR 0 3
42229: PLUS
42230: ST_TO_ADDR
42231: GO 42249
// length := i_to - i_from ;
42233: LD_ADDR_VAR 0 11
42237: PUSH
42238: LD_VAR 0 3
42242: PUSH
42243: LD_VAR 0 2
42247: MINUS
42248: ST_TO_ADDR
// end else
42249: GO 42312
// begin d := - 1 ;
42251: LD_ADDR_VAR 0 9
42255: PUSH
42256: LD_INT 1
42258: NEG
42259: ST_TO_ADDR
// if i_from > i_to then
42260: LD_VAR 0 2
42264: PUSH
42265: LD_VAR 0 3
42269: GREATER
42270: IFFALSE 42290
// length := i_from - i_to else
42272: LD_ADDR_VAR 0 11
42276: PUSH
42277: LD_VAR 0 2
42281: PUSH
42282: LD_VAR 0 3
42286: MINUS
42287: ST_TO_ADDR
42288: GO 42312
// length := ( array - i_to ) + i_from ;
42290: LD_ADDR_VAR 0 11
42294: PUSH
42295: LD_VAR 0 1
42299: PUSH
42300: LD_VAR 0 3
42304: MINUS
42305: PUSH
42306: LD_VAR 0 2
42310: PLUS
42311: ST_TO_ADDR
// end ; if not length then
42312: LD_VAR 0 11
42316: NOT
42317: IFFALSE 42321
// exit ;
42319: GO 42479
// tmp := array ;
42321: LD_ADDR_VAR 0 10
42325: PUSH
42326: LD_VAR 0 1
42330: ST_TO_ADDR
// for i = 1 to length do
42331: LD_ADDR_VAR 0 6
42335: PUSH
42336: DOUBLE
42337: LD_INT 1
42339: DEC
42340: ST_TO_ADDR
42341: LD_VAR 0 11
42345: PUSH
42346: FOR_TO
42347: IFFALSE 42467
// begin for j = 1 to array do
42349: LD_ADDR_VAR 0 7
42353: PUSH
42354: DOUBLE
42355: LD_INT 1
42357: DEC
42358: ST_TO_ADDR
42359: LD_VAR 0 1
42363: PUSH
42364: FOR_TO
42365: IFFALSE 42453
// begin k := j + d ;
42367: LD_ADDR_VAR 0 8
42371: PUSH
42372: LD_VAR 0 7
42376: PUSH
42377: LD_VAR 0 9
42381: PLUS
42382: ST_TO_ADDR
// if k > array then
42383: LD_VAR 0 8
42387: PUSH
42388: LD_VAR 0 1
42392: GREATER
42393: IFFALSE 42403
// k := 1 ;
42395: LD_ADDR_VAR 0 8
42399: PUSH
42400: LD_INT 1
42402: ST_TO_ADDR
// if not k then
42403: LD_VAR 0 8
42407: NOT
42408: IFFALSE 42420
// k := array ;
42410: LD_ADDR_VAR 0 8
42414: PUSH
42415: LD_VAR 0 1
42419: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42420: LD_ADDR_VAR 0 10
42424: PUSH
42425: LD_VAR 0 10
42429: PPUSH
42430: LD_VAR 0 8
42434: PPUSH
42435: LD_VAR 0 1
42439: PUSH
42440: LD_VAR 0 7
42444: ARRAY
42445: PPUSH
42446: CALL_OW 1
42450: ST_TO_ADDR
// end ;
42451: GO 42364
42453: POP
42454: POP
// array := tmp ;
42455: LD_ADDR_VAR 0 1
42459: PUSH
42460: LD_VAR 0 10
42464: ST_TO_ADDR
// end ;
42465: GO 42346
42467: POP
42468: POP
// result := array ;
42469: LD_ADDR_VAR 0 5
42473: PUSH
42474: LD_VAR 0 1
42478: ST_TO_ADDR
// end ;
42479: LD_VAR 0 5
42483: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42484: LD_INT 0
42486: PPUSH
42487: PPUSH
// result := 0 ;
42488: LD_ADDR_VAR 0 3
42492: PUSH
42493: LD_INT 0
42495: ST_TO_ADDR
// if not array or not value in array then
42496: LD_VAR 0 1
42500: NOT
42501: PUSH
42502: LD_VAR 0 2
42506: PUSH
42507: LD_VAR 0 1
42511: IN
42512: NOT
42513: OR
42514: IFFALSE 42518
// exit ;
42516: GO 42572
// for i = 1 to array do
42518: LD_ADDR_VAR 0 4
42522: PUSH
42523: DOUBLE
42524: LD_INT 1
42526: DEC
42527: ST_TO_ADDR
42528: LD_VAR 0 1
42532: PUSH
42533: FOR_TO
42534: IFFALSE 42570
// if value = array [ i ] then
42536: LD_VAR 0 2
42540: PUSH
42541: LD_VAR 0 1
42545: PUSH
42546: LD_VAR 0 4
42550: ARRAY
42551: EQUAL
42552: IFFALSE 42568
// begin result := i ;
42554: LD_ADDR_VAR 0 3
42558: PUSH
42559: LD_VAR 0 4
42563: ST_TO_ADDR
// exit ;
42564: POP
42565: POP
42566: GO 42572
// end ;
42568: GO 42533
42570: POP
42571: POP
// end ;
42572: LD_VAR 0 3
42576: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42577: LD_INT 0
42579: PPUSH
// vc_chassis := chassis ;
42580: LD_ADDR_OWVAR 37
42584: PUSH
42585: LD_VAR 0 1
42589: ST_TO_ADDR
// vc_engine := engine ;
42590: LD_ADDR_OWVAR 39
42594: PUSH
42595: LD_VAR 0 2
42599: ST_TO_ADDR
// vc_control := control ;
42600: LD_ADDR_OWVAR 38
42604: PUSH
42605: LD_VAR 0 3
42609: ST_TO_ADDR
// vc_weapon := weapon ;
42610: LD_ADDR_OWVAR 40
42614: PUSH
42615: LD_VAR 0 4
42619: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42620: LD_ADDR_OWVAR 41
42624: PUSH
42625: LD_VAR 0 5
42629: ST_TO_ADDR
// end ;
42630: LD_VAR 0 6
42634: RET
// export function WantPlant ( unit ) ; var task ; begin
42635: LD_INT 0
42637: PPUSH
42638: PPUSH
// result := false ;
42639: LD_ADDR_VAR 0 2
42643: PUSH
42644: LD_INT 0
42646: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42647: LD_ADDR_VAR 0 3
42651: PUSH
42652: LD_VAR 0 1
42656: PPUSH
42657: CALL_OW 437
42661: ST_TO_ADDR
// if task then
42662: LD_VAR 0 3
42666: IFFALSE 42694
// if task [ 1 ] [ 1 ] = p then
42668: LD_VAR 0 3
42672: PUSH
42673: LD_INT 1
42675: ARRAY
42676: PUSH
42677: LD_INT 1
42679: ARRAY
42680: PUSH
42681: LD_STRING p
42683: EQUAL
42684: IFFALSE 42694
// result := true ;
42686: LD_ADDR_VAR 0 2
42690: PUSH
42691: LD_INT 1
42693: ST_TO_ADDR
// end ;
42694: LD_VAR 0 2
42698: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42699: LD_INT 0
42701: PPUSH
42702: PPUSH
42703: PPUSH
42704: PPUSH
// if pos < 1 then
42705: LD_VAR 0 2
42709: PUSH
42710: LD_INT 1
42712: LESS
42713: IFFALSE 42717
// exit ;
42715: GO 43020
// if pos = 1 then
42717: LD_VAR 0 2
42721: PUSH
42722: LD_INT 1
42724: EQUAL
42725: IFFALSE 42758
// result := Replace ( arr , pos [ 1 ] , value ) else
42727: LD_ADDR_VAR 0 4
42731: PUSH
42732: LD_VAR 0 1
42736: PPUSH
42737: LD_VAR 0 2
42741: PUSH
42742: LD_INT 1
42744: ARRAY
42745: PPUSH
42746: LD_VAR 0 3
42750: PPUSH
42751: CALL_OW 1
42755: ST_TO_ADDR
42756: GO 43020
// begin tmp := arr ;
42758: LD_ADDR_VAR 0 6
42762: PUSH
42763: LD_VAR 0 1
42767: ST_TO_ADDR
// s_arr := [ tmp ] ;
42768: LD_ADDR_VAR 0 7
42772: PUSH
42773: LD_VAR 0 6
42777: PUSH
42778: EMPTY
42779: LIST
42780: ST_TO_ADDR
// for i = 1 to pos - 1 do
42781: LD_ADDR_VAR 0 5
42785: PUSH
42786: DOUBLE
42787: LD_INT 1
42789: DEC
42790: ST_TO_ADDR
42791: LD_VAR 0 2
42795: PUSH
42796: LD_INT 1
42798: MINUS
42799: PUSH
42800: FOR_TO
42801: IFFALSE 42846
// begin tmp := tmp [ pos [ i ] ] ;
42803: LD_ADDR_VAR 0 6
42807: PUSH
42808: LD_VAR 0 6
42812: PUSH
42813: LD_VAR 0 2
42817: PUSH
42818: LD_VAR 0 5
42822: ARRAY
42823: ARRAY
42824: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42825: LD_ADDR_VAR 0 7
42829: PUSH
42830: LD_VAR 0 7
42834: PUSH
42835: LD_VAR 0 6
42839: PUSH
42840: EMPTY
42841: LIST
42842: ADD
42843: ST_TO_ADDR
// end ;
42844: GO 42800
42846: POP
42847: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42848: LD_ADDR_VAR 0 6
42852: PUSH
42853: LD_VAR 0 6
42857: PPUSH
42858: LD_VAR 0 2
42862: PUSH
42863: LD_VAR 0 2
42867: ARRAY
42868: PPUSH
42869: LD_VAR 0 3
42873: PPUSH
42874: CALL_OW 1
42878: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42879: LD_ADDR_VAR 0 7
42883: PUSH
42884: LD_VAR 0 7
42888: PPUSH
42889: LD_VAR 0 7
42893: PPUSH
42894: LD_VAR 0 6
42898: PPUSH
42899: CALL_OW 1
42903: ST_TO_ADDR
// for i = s_arr downto 2 do
42904: LD_ADDR_VAR 0 5
42908: PUSH
42909: DOUBLE
42910: LD_VAR 0 7
42914: INC
42915: ST_TO_ADDR
42916: LD_INT 2
42918: PUSH
42919: FOR_DOWNTO
42920: IFFALSE 43004
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42922: LD_ADDR_VAR 0 6
42926: PUSH
42927: LD_VAR 0 7
42931: PUSH
42932: LD_VAR 0 5
42936: PUSH
42937: LD_INT 1
42939: MINUS
42940: ARRAY
42941: PPUSH
42942: LD_VAR 0 2
42946: PUSH
42947: LD_VAR 0 5
42951: PUSH
42952: LD_INT 1
42954: MINUS
42955: ARRAY
42956: PPUSH
42957: LD_VAR 0 7
42961: PUSH
42962: LD_VAR 0 5
42966: ARRAY
42967: PPUSH
42968: CALL_OW 1
42972: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42973: LD_ADDR_VAR 0 7
42977: PUSH
42978: LD_VAR 0 7
42982: PPUSH
42983: LD_VAR 0 5
42987: PUSH
42988: LD_INT 1
42990: MINUS
42991: PPUSH
42992: LD_VAR 0 6
42996: PPUSH
42997: CALL_OW 1
43001: ST_TO_ADDR
// end ;
43002: GO 42919
43004: POP
43005: POP
// result := s_arr [ 1 ] ;
43006: LD_ADDR_VAR 0 4
43010: PUSH
43011: LD_VAR 0 7
43015: PUSH
43016: LD_INT 1
43018: ARRAY
43019: ST_TO_ADDR
// end ; end ;
43020: LD_VAR 0 4
43024: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43025: LD_INT 0
43027: PPUSH
43028: PPUSH
// if not list then
43029: LD_VAR 0 1
43033: NOT
43034: IFFALSE 43038
// exit ;
43036: GO 43129
// i := list [ pos1 ] ;
43038: LD_ADDR_VAR 0 5
43042: PUSH
43043: LD_VAR 0 1
43047: PUSH
43048: LD_VAR 0 2
43052: ARRAY
43053: ST_TO_ADDR
// if not i then
43054: LD_VAR 0 5
43058: NOT
43059: IFFALSE 43063
// exit ;
43061: GO 43129
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43063: LD_ADDR_VAR 0 1
43067: PUSH
43068: LD_VAR 0 1
43072: PPUSH
43073: LD_VAR 0 2
43077: PPUSH
43078: LD_VAR 0 1
43082: PUSH
43083: LD_VAR 0 3
43087: ARRAY
43088: PPUSH
43089: CALL_OW 1
43093: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43094: LD_ADDR_VAR 0 1
43098: PUSH
43099: LD_VAR 0 1
43103: PPUSH
43104: LD_VAR 0 3
43108: PPUSH
43109: LD_VAR 0 5
43113: PPUSH
43114: CALL_OW 1
43118: ST_TO_ADDR
// result := list ;
43119: LD_ADDR_VAR 0 4
43123: PUSH
43124: LD_VAR 0 1
43128: ST_TO_ADDR
// end ;
43129: LD_VAR 0 4
43133: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43134: LD_INT 0
43136: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43137: LD_ADDR_VAR 0 5
43141: PUSH
43142: LD_VAR 0 1
43146: PPUSH
43147: CALL_OW 250
43151: PPUSH
43152: LD_VAR 0 1
43156: PPUSH
43157: CALL_OW 251
43161: PPUSH
43162: LD_VAR 0 2
43166: PPUSH
43167: LD_VAR 0 3
43171: PPUSH
43172: LD_VAR 0 4
43176: PPUSH
43177: CALL 43187 0 5
43181: ST_TO_ADDR
// end ;
43182: LD_VAR 0 5
43186: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43187: LD_INT 0
43189: PPUSH
43190: PPUSH
43191: PPUSH
43192: PPUSH
// if not list then
43193: LD_VAR 0 3
43197: NOT
43198: IFFALSE 43202
// exit ;
43200: GO 43590
// result := [ ] ;
43202: LD_ADDR_VAR 0 6
43206: PUSH
43207: EMPTY
43208: ST_TO_ADDR
// for i in list do
43209: LD_ADDR_VAR 0 7
43213: PUSH
43214: LD_VAR 0 3
43218: PUSH
43219: FOR_IN
43220: IFFALSE 43422
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43222: LD_ADDR_VAR 0 9
43226: PUSH
43227: LD_VAR 0 7
43231: PPUSH
43232: LD_VAR 0 1
43236: PPUSH
43237: LD_VAR 0 2
43241: PPUSH
43242: CALL_OW 297
43246: ST_TO_ADDR
// if not result then
43247: LD_VAR 0 6
43251: NOT
43252: IFFALSE 43278
// result := [ [ i , tmp ] ] else
43254: LD_ADDR_VAR 0 6
43258: PUSH
43259: LD_VAR 0 7
43263: PUSH
43264: LD_VAR 0 9
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: EMPTY
43274: LIST
43275: ST_TO_ADDR
43276: GO 43420
// begin if result [ result ] [ 2 ] < tmp then
43278: LD_VAR 0 6
43282: PUSH
43283: LD_VAR 0 6
43287: ARRAY
43288: PUSH
43289: LD_INT 2
43291: ARRAY
43292: PUSH
43293: LD_VAR 0 9
43297: LESS
43298: IFFALSE 43340
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43300: LD_ADDR_VAR 0 6
43304: PUSH
43305: LD_VAR 0 6
43309: PPUSH
43310: LD_VAR 0 6
43314: PUSH
43315: LD_INT 1
43317: PLUS
43318: PPUSH
43319: LD_VAR 0 7
43323: PUSH
43324: LD_VAR 0 9
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PPUSH
43333: CALL_OW 2
43337: ST_TO_ADDR
43338: GO 43420
// for j = 1 to result do
43340: LD_ADDR_VAR 0 8
43344: PUSH
43345: DOUBLE
43346: LD_INT 1
43348: DEC
43349: ST_TO_ADDR
43350: LD_VAR 0 6
43354: PUSH
43355: FOR_TO
43356: IFFALSE 43418
// begin if tmp < result [ j ] [ 2 ] then
43358: LD_VAR 0 9
43362: PUSH
43363: LD_VAR 0 6
43367: PUSH
43368: LD_VAR 0 8
43372: ARRAY
43373: PUSH
43374: LD_INT 2
43376: ARRAY
43377: LESS
43378: IFFALSE 43416
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43380: LD_ADDR_VAR 0 6
43384: PUSH
43385: LD_VAR 0 6
43389: PPUSH
43390: LD_VAR 0 8
43394: PPUSH
43395: LD_VAR 0 7
43399: PUSH
43400: LD_VAR 0 9
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PPUSH
43409: CALL_OW 2
43413: ST_TO_ADDR
// break ;
43414: GO 43418
// end ; end ;
43416: GO 43355
43418: POP
43419: POP
// end ; end ;
43420: GO 43219
43422: POP
43423: POP
// if result and not asc then
43424: LD_VAR 0 6
43428: PUSH
43429: LD_VAR 0 4
43433: NOT
43434: AND
43435: IFFALSE 43510
// begin tmp := result ;
43437: LD_ADDR_VAR 0 9
43441: PUSH
43442: LD_VAR 0 6
43446: ST_TO_ADDR
// for i = tmp downto 1 do
43447: LD_ADDR_VAR 0 7
43451: PUSH
43452: DOUBLE
43453: LD_VAR 0 9
43457: INC
43458: ST_TO_ADDR
43459: LD_INT 1
43461: PUSH
43462: FOR_DOWNTO
43463: IFFALSE 43508
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43465: LD_ADDR_VAR 0 6
43469: PUSH
43470: LD_VAR 0 6
43474: PPUSH
43475: LD_VAR 0 9
43479: PUSH
43480: LD_VAR 0 7
43484: MINUS
43485: PUSH
43486: LD_INT 1
43488: PLUS
43489: PPUSH
43490: LD_VAR 0 9
43494: PUSH
43495: LD_VAR 0 7
43499: ARRAY
43500: PPUSH
43501: CALL_OW 1
43505: ST_TO_ADDR
43506: GO 43462
43508: POP
43509: POP
// end ; tmp := [ ] ;
43510: LD_ADDR_VAR 0 9
43514: PUSH
43515: EMPTY
43516: ST_TO_ADDR
// if mode then
43517: LD_VAR 0 5
43521: IFFALSE 43590
// begin for i = 1 to result do
43523: LD_ADDR_VAR 0 7
43527: PUSH
43528: DOUBLE
43529: LD_INT 1
43531: DEC
43532: ST_TO_ADDR
43533: LD_VAR 0 6
43537: PUSH
43538: FOR_TO
43539: IFFALSE 43578
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43541: LD_ADDR_VAR 0 9
43545: PUSH
43546: LD_VAR 0 9
43550: PPUSH
43551: LD_VAR 0 7
43555: PPUSH
43556: LD_VAR 0 6
43560: PUSH
43561: LD_VAR 0 7
43565: ARRAY
43566: PUSH
43567: LD_INT 1
43569: ARRAY
43570: PPUSH
43571: CALL_OW 1
43575: ST_TO_ADDR
43576: GO 43538
43578: POP
43579: POP
// result := tmp ;
43580: LD_ADDR_VAR 0 6
43584: PUSH
43585: LD_VAR 0 9
43589: ST_TO_ADDR
// end ; end ;
43590: LD_VAR 0 6
43594: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43595: LD_INT 0
43597: PPUSH
43598: PPUSH
43599: PPUSH
43600: PPUSH
43601: PPUSH
43602: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43603: LD_ADDR_VAR 0 5
43607: PUSH
43608: LD_INT 0
43610: PUSH
43611: LD_INT 0
43613: PUSH
43614: LD_INT 0
43616: PUSH
43617: EMPTY
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: ST_TO_ADDR
// if not x or not y then
43625: LD_VAR 0 2
43629: NOT
43630: PUSH
43631: LD_VAR 0 3
43635: NOT
43636: OR
43637: IFFALSE 43641
// exit ;
43639: GO 45287
// if not range then
43641: LD_VAR 0 4
43645: NOT
43646: IFFALSE 43656
// range := 10 ;
43648: LD_ADDR_VAR 0 4
43652: PUSH
43653: LD_INT 10
43655: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43656: LD_ADDR_VAR 0 8
43660: PUSH
43661: LD_INT 81
43663: PUSH
43664: LD_VAR 0 1
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 92
43675: PUSH
43676: LD_VAR 0 2
43680: PUSH
43681: LD_VAR 0 3
43685: PUSH
43686: LD_VAR 0 4
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 3
43699: PUSH
43700: LD_INT 21
43702: PUSH
43703: LD_INT 3
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: LIST
43718: PPUSH
43719: CALL_OW 69
43723: ST_TO_ADDR
// if not tmp then
43724: LD_VAR 0 8
43728: NOT
43729: IFFALSE 43733
// exit ;
43731: GO 45287
// for i in tmp do
43733: LD_ADDR_VAR 0 6
43737: PUSH
43738: LD_VAR 0 8
43742: PUSH
43743: FOR_IN
43744: IFFALSE 45262
// begin points := [ 0 , 0 , 0 ] ;
43746: LD_ADDR_VAR 0 9
43750: PUSH
43751: LD_INT 0
43753: PUSH
43754: LD_INT 0
43756: PUSH
43757: LD_INT 0
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: LIST
43764: ST_TO_ADDR
// bpoints := 1 ;
43765: LD_ADDR_VAR 0 10
43769: PUSH
43770: LD_INT 1
43772: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43773: LD_VAR 0 6
43777: PPUSH
43778: CALL_OW 247
43782: PUSH
43783: LD_INT 1
43785: DOUBLE
43786: EQUAL
43787: IFTRUE 43791
43789: GO 44369
43791: POP
// begin if GetClass ( i ) = 1 then
43792: LD_VAR 0 6
43796: PPUSH
43797: CALL_OW 257
43801: PUSH
43802: LD_INT 1
43804: EQUAL
43805: IFFALSE 43826
// points := [ 10 , 5 , 3 ] ;
43807: LD_ADDR_VAR 0 9
43811: PUSH
43812: LD_INT 10
43814: PUSH
43815: LD_INT 5
43817: PUSH
43818: LD_INT 3
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: LIST
43825: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43826: LD_VAR 0 6
43830: PPUSH
43831: CALL_OW 257
43835: PUSH
43836: LD_INT 2
43838: PUSH
43839: LD_INT 3
43841: PUSH
43842: LD_INT 4
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: LIST
43849: IN
43850: IFFALSE 43871
// points := [ 3 , 2 , 1 ] ;
43852: LD_ADDR_VAR 0 9
43856: PUSH
43857: LD_INT 3
43859: PUSH
43860: LD_INT 2
43862: PUSH
43863: LD_INT 1
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: LIST
43870: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43871: LD_VAR 0 6
43875: PPUSH
43876: CALL_OW 257
43880: PUSH
43881: LD_INT 5
43883: EQUAL
43884: IFFALSE 43905
// points := [ 130 , 5 , 2 ] ;
43886: LD_ADDR_VAR 0 9
43890: PUSH
43891: LD_INT 130
43893: PUSH
43894: LD_INT 5
43896: PUSH
43897: LD_INT 2
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: LIST
43904: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43905: LD_VAR 0 6
43909: PPUSH
43910: CALL_OW 257
43914: PUSH
43915: LD_INT 8
43917: EQUAL
43918: IFFALSE 43939
// points := [ 35 , 35 , 30 ] ;
43920: LD_ADDR_VAR 0 9
43924: PUSH
43925: LD_INT 35
43927: PUSH
43928: LD_INT 35
43930: PUSH
43931: LD_INT 30
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: LIST
43938: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43939: LD_VAR 0 6
43943: PPUSH
43944: CALL_OW 257
43948: PUSH
43949: LD_INT 9
43951: EQUAL
43952: IFFALSE 43973
// points := [ 20 , 55 , 40 ] ;
43954: LD_ADDR_VAR 0 9
43958: PUSH
43959: LD_INT 20
43961: PUSH
43962: LD_INT 55
43964: PUSH
43965: LD_INT 40
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: LIST
43972: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43973: LD_VAR 0 6
43977: PPUSH
43978: CALL_OW 257
43982: PUSH
43983: LD_INT 12
43985: PUSH
43986: LD_INT 16
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: IN
43993: IFFALSE 44014
// points := [ 5 , 3 , 2 ] ;
43995: LD_ADDR_VAR 0 9
43999: PUSH
44000: LD_INT 5
44002: PUSH
44003: LD_INT 3
44005: PUSH
44006: LD_INT 2
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: LIST
44013: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44014: LD_VAR 0 6
44018: PPUSH
44019: CALL_OW 257
44023: PUSH
44024: LD_INT 17
44026: EQUAL
44027: IFFALSE 44048
// points := [ 100 , 50 , 75 ] ;
44029: LD_ADDR_VAR 0 9
44033: PUSH
44034: LD_INT 100
44036: PUSH
44037: LD_INT 50
44039: PUSH
44040: LD_INT 75
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: LIST
44047: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44048: LD_VAR 0 6
44052: PPUSH
44053: CALL_OW 257
44057: PUSH
44058: LD_INT 15
44060: EQUAL
44061: IFFALSE 44082
// points := [ 10 , 5 , 3 ] ;
44063: LD_ADDR_VAR 0 9
44067: PUSH
44068: LD_INT 10
44070: PUSH
44071: LD_INT 5
44073: PUSH
44074: LD_INT 3
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: LIST
44081: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44082: LD_VAR 0 6
44086: PPUSH
44087: CALL_OW 257
44091: PUSH
44092: LD_INT 14
44094: EQUAL
44095: IFFALSE 44116
// points := [ 10 , 0 , 0 ] ;
44097: LD_ADDR_VAR 0 9
44101: PUSH
44102: LD_INT 10
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: LIST
44115: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44116: LD_VAR 0 6
44120: PPUSH
44121: CALL_OW 257
44125: PUSH
44126: LD_INT 11
44128: EQUAL
44129: IFFALSE 44150
// points := [ 30 , 10 , 5 ] ;
44131: LD_ADDR_VAR 0 9
44135: PUSH
44136: LD_INT 30
44138: PUSH
44139: LD_INT 10
44141: PUSH
44142: LD_INT 5
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: LIST
44149: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44150: LD_VAR 0 1
44154: PPUSH
44155: LD_INT 5
44157: PPUSH
44158: CALL_OW 321
44162: PUSH
44163: LD_INT 2
44165: EQUAL
44166: IFFALSE 44183
// bpoints := bpoints * 1.8 ;
44168: LD_ADDR_VAR 0 10
44172: PUSH
44173: LD_VAR 0 10
44177: PUSH
44178: LD_REAL  1.80000000000000E+0000
44181: MUL
44182: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44183: LD_VAR 0 6
44187: PPUSH
44188: CALL_OW 257
44192: PUSH
44193: LD_INT 1
44195: PUSH
44196: LD_INT 2
44198: PUSH
44199: LD_INT 3
44201: PUSH
44202: LD_INT 4
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: IN
44211: PUSH
44212: LD_VAR 0 1
44216: PPUSH
44217: LD_INT 51
44219: PPUSH
44220: CALL_OW 321
44224: PUSH
44225: LD_INT 2
44227: EQUAL
44228: AND
44229: IFFALSE 44246
// bpoints := bpoints * 1.2 ;
44231: LD_ADDR_VAR 0 10
44235: PUSH
44236: LD_VAR 0 10
44240: PUSH
44241: LD_REAL  1.20000000000000E+0000
44244: MUL
44245: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44246: LD_VAR 0 6
44250: PPUSH
44251: CALL_OW 257
44255: PUSH
44256: LD_INT 5
44258: PUSH
44259: LD_INT 7
44261: PUSH
44262: LD_INT 9
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: LIST
44269: IN
44270: PUSH
44271: LD_VAR 0 1
44275: PPUSH
44276: LD_INT 52
44278: PPUSH
44279: CALL_OW 321
44283: PUSH
44284: LD_INT 2
44286: EQUAL
44287: AND
44288: IFFALSE 44305
// bpoints := bpoints * 1.5 ;
44290: LD_ADDR_VAR 0 10
44294: PUSH
44295: LD_VAR 0 10
44299: PUSH
44300: LD_REAL  1.50000000000000E+0000
44303: MUL
44304: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44305: LD_VAR 0 1
44309: PPUSH
44310: LD_INT 66
44312: PPUSH
44313: CALL_OW 321
44317: PUSH
44318: LD_INT 2
44320: EQUAL
44321: IFFALSE 44338
// bpoints := bpoints * 1.1 ;
44323: LD_ADDR_VAR 0 10
44327: PUSH
44328: LD_VAR 0 10
44332: PUSH
44333: LD_REAL  1.10000000000000E+0000
44336: MUL
44337: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44338: LD_ADDR_VAR 0 10
44342: PUSH
44343: LD_VAR 0 10
44347: PUSH
44348: LD_VAR 0 6
44352: PPUSH
44353: LD_INT 1
44355: PPUSH
44356: CALL_OW 259
44360: PUSH
44361: LD_REAL  1.15000000000000E+0000
44364: MUL
44365: MUL
44366: ST_TO_ADDR
// end ; unit_vehicle :
44367: GO 45191
44369: LD_INT 2
44371: DOUBLE
44372: EQUAL
44373: IFTRUE 44377
44375: GO 45179
44377: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44378: LD_VAR 0 6
44382: PPUSH
44383: CALL_OW 264
44387: PUSH
44388: LD_INT 2
44390: PUSH
44391: LD_INT 42
44393: PUSH
44394: LD_INT 24
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: LIST
44401: IN
44402: IFFALSE 44423
// points := [ 25 , 5 , 3 ] ;
44404: LD_ADDR_VAR 0 9
44408: PUSH
44409: LD_INT 25
44411: PUSH
44412: LD_INT 5
44414: PUSH
44415: LD_INT 3
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: LIST
44422: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44423: LD_VAR 0 6
44427: PPUSH
44428: CALL_OW 264
44432: PUSH
44433: LD_INT 4
44435: PUSH
44436: LD_INT 43
44438: PUSH
44439: LD_INT 25
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: LIST
44446: IN
44447: IFFALSE 44468
// points := [ 40 , 15 , 5 ] ;
44449: LD_ADDR_VAR 0 9
44453: PUSH
44454: LD_INT 40
44456: PUSH
44457: LD_INT 15
44459: PUSH
44460: LD_INT 5
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: LIST
44467: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44468: LD_VAR 0 6
44472: PPUSH
44473: CALL_OW 264
44477: PUSH
44478: LD_INT 3
44480: PUSH
44481: LD_INT 23
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: IN
44488: IFFALSE 44509
// points := [ 7 , 25 , 8 ] ;
44490: LD_ADDR_VAR 0 9
44494: PUSH
44495: LD_INT 7
44497: PUSH
44498: LD_INT 25
44500: PUSH
44501: LD_INT 8
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: LIST
44508: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44509: LD_VAR 0 6
44513: PPUSH
44514: CALL_OW 264
44518: PUSH
44519: LD_INT 5
44521: PUSH
44522: LD_INT 27
44524: PUSH
44525: LD_INT 44
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: LIST
44532: IN
44533: IFFALSE 44554
// points := [ 14 , 50 , 16 ] ;
44535: LD_ADDR_VAR 0 9
44539: PUSH
44540: LD_INT 14
44542: PUSH
44543: LD_INT 50
44545: PUSH
44546: LD_INT 16
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: LIST
44553: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44554: LD_VAR 0 6
44558: PPUSH
44559: CALL_OW 264
44563: PUSH
44564: LD_INT 6
44566: PUSH
44567: LD_INT 46
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: IN
44574: IFFALSE 44595
// points := [ 32 , 120 , 70 ] ;
44576: LD_ADDR_VAR 0 9
44580: PUSH
44581: LD_INT 32
44583: PUSH
44584: LD_INT 120
44586: PUSH
44587: LD_INT 70
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: LIST
44594: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
44595: LD_VAR 0 6
44599: PPUSH
44600: CALL_OW 264
44604: PUSH
44605: LD_INT 7
44607: PUSH
44608: LD_INT 28
44610: PUSH
44611: LD_INT 45
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: LIST
44618: IN
44619: IFFALSE 44640
// points := [ 35 , 20 , 45 ] ;
44621: LD_ADDR_VAR 0 9
44625: PUSH
44626: LD_INT 35
44628: PUSH
44629: LD_INT 20
44631: PUSH
44632: LD_INT 45
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: LIST
44639: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44640: LD_VAR 0 6
44644: PPUSH
44645: CALL_OW 264
44649: PUSH
44650: LD_INT 47
44652: PUSH
44653: EMPTY
44654: LIST
44655: IN
44656: IFFALSE 44677
// points := [ 67 , 45 , 75 ] ;
44658: LD_ADDR_VAR 0 9
44662: PUSH
44663: LD_INT 67
44665: PUSH
44666: LD_INT 45
44668: PUSH
44669: LD_INT 75
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: LIST
44676: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44677: LD_VAR 0 6
44681: PPUSH
44682: CALL_OW 264
44686: PUSH
44687: LD_INT 26
44689: PUSH
44690: EMPTY
44691: LIST
44692: IN
44693: IFFALSE 44714
// points := [ 120 , 30 , 80 ] ;
44695: LD_ADDR_VAR 0 9
44699: PUSH
44700: LD_INT 120
44702: PUSH
44703: LD_INT 30
44705: PUSH
44706: LD_INT 80
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: LIST
44713: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44714: LD_VAR 0 6
44718: PPUSH
44719: CALL_OW 264
44723: PUSH
44724: LD_INT 22
44726: PUSH
44727: EMPTY
44728: LIST
44729: IN
44730: IFFALSE 44751
// points := [ 40 , 1 , 1 ] ;
44732: LD_ADDR_VAR 0 9
44736: PUSH
44737: LD_INT 40
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: LIST
44750: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44751: LD_VAR 0 6
44755: PPUSH
44756: CALL_OW 264
44760: PUSH
44761: LD_INT 29
44763: PUSH
44764: EMPTY
44765: LIST
44766: IN
44767: IFFALSE 44788
// points := [ 70 , 200 , 400 ] ;
44769: LD_ADDR_VAR 0 9
44773: PUSH
44774: LD_INT 70
44776: PUSH
44777: LD_INT 200
44779: PUSH
44780: LD_INT 400
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: LIST
44787: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44788: LD_VAR 0 6
44792: PPUSH
44793: CALL_OW 264
44797: PUSH
44798: LD_INT 14
44800: PUSH
44801: LD_INT 53
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: IN
44808: IFFALSE 44829
// points := [ 40 , 10 , 20 ] ;
44810: LD_ADDR_VAR 0 9
44814: PUSH
44815: LD_INT 40
44817: PUSH
44818: LD_INT 10
44820: PUSH
44821: LD_INT 20
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: LIST
44828: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44829: LD_VAR 0 6
44833: PPUSH
44834: CALL_OW 264
44838: PUSH
44839: LD_INT 9
44841: PUSH
44842: EMPTY
44843: LIST
44844: IN
44845: IFFALSE 44866
// points := [ 5 , 70 , 20 ] ;
44847: LD_ADDR_VAR 0 9
44851: PUSH
44852: LD_INT 5
44854: PUSH
44855: LD_INT 70
44857: PUSH
44858: LD_INT 20
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: LIST
44865: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44866: LD_VAR 0 6
44870: PPUSH
44871: CALL_OW 264
44875: PUSH
44876: LD_INT 10
44878: PUSH
44879: EMPTY
44880: LIST
44881: IN
44882: IFFALSE 44903
// points := [ 35 , 110 , 70 ] ;
44884: LD_ADDR_VAR 0 9
44888: PUSH
44889: LD_INT 35
44891: PUSH
44892: LD_INT 110
44894: PUSH
44895: LD_INT 70
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: LIST
44902: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44903: LD_VAR 0 6
44907: PPUSH
44908: CALL_OW 265
44912: PUSH
44913: LD_INT 25
44915: EQUAL
44916: IFFALSE 44937
// points := [ 80 , 65 , 100 ] ;
44918: LD_ADDR_VAR 0 9
44922: PUSH
44923: LD_INT 80
44925: PUSH
44926: LD_INT 65
44928: PUSH
44929: LD_INT 100
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: LIST
44936: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44937: LD_VAR 0 6
44941: PPUSH
44942: CALL_OW 263
44946: PUSH
44947: LD_INT 1
44949: EQUAL
44950: IFFALSE 44985
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44952: LD_ADDR_VAR 0 10
44956: PUSH
44957: LD_VAR 0 10
44961: PUSH
44962: LD_VAR 0 6
44966: PPUSH
44967: CALL_OW 311
44971: PPUSH
44972: LD_INT 3
44974: PPUSH
44975: CALL_OW 259
44979: PUSH
44980: LD_INT 4
44982: MUL
44983: MUL
44984: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44985: LD_VAR 0 6
44989: PPUSH
44990: CALL_OW 263
44994: PUSH
44995: LD_INT 2
44997: EQUAL
44998: IFFALSE 45049
// begin j := IsControledBy ( i ) ;
45000: LD_ADDR_VAR 0 7
45004: PUSH
45005: LD_VAR 0 6
45009: PPUSH
45010: CALL_OW 312
45014: ST_TO_ADDR
// if j then
45015: LD_VAR 0 7
45019: IFFALSE 45049
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45021: LD_ADDR_VAR 0 10
45025: PUSH
45026: LD_VAR 0 10
45030: PUSH
45031: LD_VAR 0 7
45035: PPUSH
45036: LD_INT 3
45038: PPUSH
45039: CALL_OW 259
45043: PUSH
45044: LD_INT 3
45046: MUL
45047: MUL
45048: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45049: LD_VAR 0 6
45053: PPUSH
45054: CALL_OW 264
45058: PUSH
45059: LD_INT 5
45061: PUSH
45062: LD_INT 6
45064: PUSH
45065: LD_INT 46
45067: PUSH
45068: LD_INT 44
45070: PUSH
45071: LD_INT 47
45073: PUSH
45074: LD_INT 45
45076: PUSH
45077: LD_INT 28
45079: PUSH
45080: LD_INT 7
45082: PUSH
45083: LD_INT 27
45085: PUSH
45086: LD_INT 29
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: IN
45101: PUSH
45102: LD_VAR 0 1
45106: PPUSH
45107: LD_INT 52
45109: PPUSH
45110: CALL_OW 321
45114: PUSH
45115: LD_INT 2
45117: EQUAL
45118: AND
45119: IFFALSE 45136
// bpoints := bpoints * 1.2 ;
45121: LD_ADDR_VAR 0 10
45125: PUSH
45126: LD_VAR 0 10
45130: PUSH
45131: LD_REAL  1.20000000000000E+0000
45134: MUL
45135: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45136: LD_VAR 0 6
45140: PPUSH
45141: CALL_OW 264
45145: PUSH
45146: LD_INT 6
45148: PUSH
45149: LD_INT 46
45151: PUSH
45152: LD_INT 47
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: LIST
45159: IN
45160: IFFALSE 45177
// bpoints := bpoints * 1.2 ;
45162: LD_ADDR_VAR 0 10
45166: PUSH
45167: LD_VAR 0 10
45171: PUSH
45172: LD_REAL  1.20000000000000E+0000
45175: MUL
45176: ST_TO_ADDR
// end ; unit_building :
45177: GO 45191
45179: LD_INT 3
45181: DOUBLE
45182: EQUAL
45183: IFTRUE 45187
45185: GO 45190
45187: POP
// ; end ;
45188: GO 45191
45190: POP
// for j = 1 to 3 do
45191: LD_ADDR_VAR 0 7
45195: PUSH
45196: DOUBLE
45197: LD_INT 1
45199: DEC
45200: ST_TO_ADDR
45201: LD_INT 3
45203: PUSH
45204: FOR_TO
45205: IFFALSE 45258
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45207: LD_ADDR_VAR 0 5
45211: PUSH
45212: LD_VAR 0 5
45216: PPUSH
45217: LD_VAR 0 7
45221: PPUSH
45222: LD_VAR 0 5
45226: PUSH
45227: LD_VAR 0 7
45231: ARRAY
45232: PUSH
45233: LD_VAR 0 9
45237: PUSH
45238: LD_VAR 0 7
45242: ARRAY
45243: PUSH
45244: LD_VAR 0 10
45248: MUL
45249: PLUS
45250: PPUSH
45251: CALL_OW 1
45255: ST_TO_ADDR
45256: GO 45204
45258: POP
45259: POP
// end ;
45260: GO 43743
45262: POP
45263: POP
// result := Replace ( result , 4 , tmp ) ;
45264: LD_ADDR_VAR 0 5
45268: PUSH
45269: LD_VAR 0 5
45273: PPUSH
45274: LD_INT 4
45276: PPUSH
45277: LD_VAR 0 8
45281: PPUSH
45282: CALL_OW 1
45286: ST_TO_ADDR
// end ;
45287: LD_VAR 0 5
45291: RET
// export function DangerAtRange ( unit , range ) ; begin
45292: LD_INT 0
45294: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45295: LD_ADDR_VAR 0 3
45299: PUSH
45300: LD_VAR 0 1
45304: PPUSH
45305: CALL_OW 255
45309: PPUSH
45310: LD_VAR 0 1
45314: PPUSH
45315: CALL_OW 250
45319: PPUSH
45320: LD_VAR 0 1
45324: PPUSH
45325: CALL_OW 251
45329: PPUSH
45330: LD_VAR 0 2
45334: PPUSH
45335: CALL 43595 0 4
45339: ST_TO_ADDR
// end ;
45340: LD_VAR 0 3
45344: RET
// export function DangerInArea ( side , area ) ; begin
45345: LD_INT 0
45347: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45348: LD_ADDR_VAR 0 3
45352: PUSH
45353: LD_VAR 0 2
45357: PPUSH
45358: LD_INT 81
45360: PUSH
45361: LD_VAR 0 1
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PPUSH
45370: CALL_OW 70
45374: ST_TO_ADDR
// end ;
45375: LD_VAR 0 3
45379: RET
// export function IsExtension ( b ) ; begin
45380: LD_INT 0
45382: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45383: LD_ADDR_VAR 0 2
45387: PUSH
45388: LD_VAR 0 1
45392: PUSH
45393: LD_INT 23
45395: PUSH
45396: LD_INT 20
45398: PUSH
45399: LD_INT 22
45401: PUSH
45402: LD_INT 17
45404: PUSH
45405: LD_INT 24
45407: PUSH
45408: LD_INT 21
45410: PUSH
45411: LD_INT 19
45413: PUSH
45414: LD_INT 16
45416: PUSH
45417: LD_INT 25
45419: PUSH
45420: LD_INT 18
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: IN
45435: ST_TO_ADDR
// end ;
45436: LD_VAR 0 2
45440: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
45441: LD_INT 0
45443: PPUSH
45444: PPUSH
45445: PPUSH
// result := [ ] ;
45446: LD_ADDR_VAR 0 3
45450: PUSH
45451: EMPTY
45452: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45453: LD_ADDR_VAR 0 4
45457: PUSH
45458: LD_VAR 0 2
45462: PPUSH
45463: LD_INT 21
45465: PUSH
45466: LD_INT 3
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PPUSH
45473: CALL_OW 70
45477: ST_TO_ADDR
// if not tmp then
45478: LD_VAR 0 4
45482: NOT
45483: IFFALSE 45487
// exit ;
45485: GO 45545
// for i in tmp do
45487: LD_ADDR_VAR 0 5
45491: PUSH
45492: LD_VAR 0 4
45496: PUSH
45497: FOR_IN
45498: IFFALSE 45533
// if GetBase ( i ) <> base then
45500: LD_VAR 0 5
45504: PPUSH
45505: CALL_OW 274
45509: PUSH
45510: LD_VAR 0 1
45514: NONEQUAL
45515: IFFALSE 45531
// ComLinkToBase ( base , i ) ;
45517: LD_VAR 0 1
45521: PPUSH
45522: LD_VAR 0 5
45526: PPUSH
45527: CALL_OW 169
45531: GO 45497
45533: POP
45534: POP
// result := tmp ;
45535: LD_ADDR_VAR 0 3
45539: PUSH
45540: LD_VAR 0 4
45544: ST_TO_ADDR
// end ;
45545: LD_VAR 0 3
45549: RET
// export function ComComplete ( unit , b ) ; var i ; begin
45550: LD_INT 0
45552: PPUSH
45553: PPUSH
// if BuildingStatus ( b ) = bs_build then
45554: LD_VAR 0 2
45558: PPUSH
45559: CALL_OW 461
45563: PUSH
45564: LD_INT 1
45566: EQUAL
45567: IFFALSE 45627
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45569: LD_VAR 0 1
45573: PPUSH
45574: LD_STRING h
45576: PUSH
45577: LD_VAR 0 2
45581: PPUSH
45582: CALL_OW 250
45586: PUSH
45587: LD_VAR 0 2
45591: PPUSH
45592: CALL_OW 251
45596: PUSH
45597: LD_VAR 0 2
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: LD_INT 0
45607: PUSH
45608: LD_INT 0
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: PUSH
45620: EMPTY
45621: LIST
45622: PPUSH
45623: CALL_OW 446
// end ;
45627: LD_VAR 0 3
45631: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45632: LD_INT 0
45634: PPUSH
45635: PPUSH
45636: PPUSH
45637: PPUSH
45638: PPUSH
45639: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
45640: LD_VAR 0 1
45644: NOT
45645: PUSH
45646: LD_VAR 0 1
45650: PPUSH
45651: CALL_OW 263
45655: PUSH
45656: LD_INT 2
45658: EQUAL
45659: NOT
45660: OR
45661: IFFALSE 45665
// exit ;
45663: GO 45981
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45665: LD_ADDR_VAR 0 6
45669: PUSH
45670: LD_INT 22
45672: PUSH
45673: LD_VAR 0 1
45677: PPUSH
45678: CALL_OW 255
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 2
45689: PUSH
45690: LD_INT 30
45692: PUSH
45693: LD_INT 36
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 34
45702: PUSH
45703: LD_INT 31
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: LIST
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PPUSH
45719: CALL_OW 69
45723: ST_TO_ADDR
// if not tmp then
45724: LD_VAR 0 6
45728: NOT
45729: IFFALSE 45733
// exit ;
45731: GO 45981
// result := [ ] ;
45733: LD_ADDR_VAR 0 2
45737: PUSH
45738: EMPTY
45739: ST_TO_ADDR
// for i in tmp do
45740: LD_ADDR_VAR 0 3
45744: PUSH
45745: LD_VAR 0 6
45749: PUSH
45750: FOR_IN
45751: IFFALSE 45822
// begin t := UnitsInside ( i ) ;
45753: LD_ADDR_VAR 0 4
45757: PUSH
45758: LD_VAR 0 3
45762: PPUSH
45763: CALL_OW 313
45767: ST_TO_ADDR
// if t then
45768: LD_VAR 0 4
45772: IFFALSE 45820
// for j in t do
45774: LD_ADDR_VAR 0 7
45778: PUSH
45779: LD_VAR 0 4
45783: PUSH
45784: FOR_IN
45785: IFFALSE 45818
// result := Insert ( result , result + 1 , j ) ;
45787: LD_ADDR_VAR 0 2
45791: PUSH
45792: LD_VAR 0 2
45796: PPUSH
45797: LD_VAR 0 2
45801: PUSH
45802: LD_INT 1
45804: PLUS
45805: PPUSH
45806: LD_VAR 0 7
45810: PPUSH
45811: CALL_OW 2
45815: ST_TO_ADDR
45816: GO 45784
45818: POP
45819: POP
// end ;
45820: GO 45750
45822: POP
45823: POP
// if not result then
45824: LD_VAR 0 2
45828: NOT
45829: IFFALSE 45833
// exit ;
45831: GO 45981
// mech := result [ 1 ] ;
45833: LD_ADDR_VAR 0 5
45837: PUSH
45838: LD_VAR 0 2
45842: PUSH
45843: LD_INT 1
45845: ARRAY
45846: ST_TO_ADDR
// if result > 1 then
45847: LD_VAR 0 2
45851: PUSH
45852: LD_INT 1
45854: GREATER
45855: IFFALSE 45967
// for i = 2 to result do
45857: LD_ADDR_VAR 0 3
45861: PUSH
45862: DOUBLE
45863: LD_INT 2
45865: DEC
45866: ST_TO_ADDR
45867: LD_VAR 0 2
45871: PUSH
45872: FOR_TO
45873: IFFALSE 45965
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45875: LD_ADDR_VAR 0 4
45879: PUSH
45880: LD_VAR 0 2
45884: PUSH
45885: LD_VAR 0 3
45889: ARRAY
45890: PPUSH
45891: LD_INT 3
45893: PPUSH
45894: CALL_OW 259
45898: PUSH
45899: LD_VAR 0 2
45903: PUSH
45904: LD_VAR 0 3
45908: ARRAY
45909: PPUSH
45910: CALL_OW 432
45914: MINUS
45915: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45916: LD_VAR 0 4
45920: PUSH
45921: LD_VAR 0 5
45925: PPUSH
45926: LD_INT 3
45928: PPUSH
45929: CALL_OW 259
45933: PUSH
45934: LD_VAR 0 5
45938: PPUSH
45939: CALL_OW 432
45943: MINUS
45944: GREATEREQUAL
45945: IFFALSE 45963
// mech := result [ i ] ;
45947: LD_ADDR_VAR 0 5
45951: PUSH
45952: LD_VAR 0 2
45956: PUSH
45957: LD_VAR 0 3
45961: ARRAY
45962: ST_TO_ADDR
// end ;
45963: GO 45872
45965: POP
45966: POP
// ComLinkTo ( vehicle , mech ) ;
45967: LD_VAR 0 1
45971: PPUSH
45972: LD_VAR 0 5
45976: PPUSH
45977: CALL_OW 135
// end ;
45981: LD_VAR 0 2
45985: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45986: LD_INT 0
45988: PPUSH
45989: PPUSH
45990: PPUSH
45991: PPUSH
45992: PPUSH
45993: PPUSH
45994: PPUSH
45995: PPUSH
45996: PPUSH
45997: PPUSH
45998: PPUSH
45999: PPUSH
46000: PPUSH
// result := [ ] ;
46001: LD_ADDR_VAR 0 7
46005: PUSH
46006: EMPTY
46007: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46008: LD_VAR 0 1
46012: PPUSH
46013: CALL_OW 266
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: IN
46028: NOT
46029: IFFALSE 46033
// exit ;
46031: GO 47664
// if name then
46033: LD_VAR 0 3
46037: IFFALSE 46053
// SetBName ( base_dep , name ) ;
46039: LD_VAR 0 1
46043: PPUSH
46044: LD_VAR 0 3
46048: PPUSH
46049: CALL_OW 500
// base := GetBase ( base_dep ) ;
46053: LD_ADDR_VAR 0 15
46057: PUSH
46058: LD_VAR 0 1
46062: PPUSH
46063: CALL_OW 274
46067: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46068: LD_ADDR_VAR 0 16
46072: PUSH
46073: LD_VAR 0 1
46077: PPUSH
46078: CALL_OW 255
46082: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46083: LD_ADDR_VAR 0 17
46087: PUSH
46088: LD_VAR 0 1
46092: PPUSH
46093: CALL_OW 248
46097: ST_TO_ADDR
// if sources then
46098: LD_VAR 0 5
46102: IFFALSE 46149
// for i = 1 to 3 do
46104: LD_ADDR_VAR 0 8
46108: PUSH
46109: DOUBLE
46110: LD_INT 1
46112: DEC
46113: ST_TO_ADDR
46114: LD_INT 3
46116: PUSH
46117: FOR_TO
46118: IFFALSE 46147
// AddResourceType ( base , i , sources [ i ] ) ;
46120: LD_VAR 0 15
46124: PPUSH
46125: LD_VAR 0 8
46129: PPUSH
46130: LD_VAR 0 5
46134: PUSH
46135: LD_VAR 0 8
46139: ARRAY
46140: PPUSH
46141: CALL_OW 276
46145: GO 46117
46147: POP
46148: POP
// buildings := GetBaseBuildings ( base , area ) ;
46149: LD_ADDR_VAR 0 18
46153: PUSH
46154: LD_VAR 0 15
46158: PPUSH
46159: LD_VAR 0 2
46163: PPUSH
46164: CALL 45441 0 2
46168: ST_TO_ADDR
// InitHc ;
46169: CALL_OW 19
// InitUc ;
46173: CALL_OW 18
// uc_side := side ;
46177: LD_ADDR_OWVAR 20
46181: PUSH
46182: LD_VAR 0 16
46186: ST_TO_ADDR
// uc_nation := nation ;
46187: LD_ADDR_OWVAR 21
46191: PUSH
46192: LD_VAR 0 17
46196: ST_TO_ADDR
// if buildings then
46197: LD_VAR 0 18
46201: IFFALSE 47523
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46203: LD_ADDR_VAR 0 19
46207: PUSH
46208: LD_VAR 0 18
46212: PPUSH
46213: LD_INT 2
46215: PUSH
46216: LD_INT 30
46218: PUSH
46219: LD_INT 29
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 30
46228: PUSH
46229: LD_INT 30
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: LIST
46240: PPUSH
46241: CALL_OW 72
46245: ST_TO_ADDR
// if tmp then
46246: LD_VAR 0 19
46250: IFFALSE 46298
// for i in tmp do
46252: LD_ADDR_VAR 0 8
46256: PUSH
46257: LD_VAR 0 19
46261: PUSH
46262: FOR_IN
46263: IFFALSE 46296
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46265: LD_VAR 0 8
46269: PPUSH
46270: CALL_OW 250
46274: PPUSH
46275: LD_VAR 0 8
46279: PPUSH
46280: CALL_OW 251
46284: PPUSH
46285: LD_VAR 0 16
46289: PPUSH
46290: CALL_OW 441
46294: GO 46262
46296: POP
46297: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46298: LD_VAR 0 18
46302: PPUSH
46303: LD_INT 2
46305: PUSH
46306: LD_INT 30
46308: PUSH
46309: LD_INT 32
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 30
46318: PUSH
46319: LD_INT 33
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: LIST
46330: PPUSH
46331: CALL_OW 72
46335: IFFALSE 46423
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46337: LD_ADDR_VAR 0 8
46341: PUSH
46342: LD_VAR 0 18
46346: PPUSH
46347: LD_INT 2
46349: PUSH
46350: LD_INT 30
46352: PUSH
46353: LD_INT 32
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 30
46362: PUSH
46363: LD_INT 33
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: LIST
46374: PPUSH
46375: CALL_OW 72
46379: PUSH
46380: FOR_IN
46381: IFFALSE 46421
// begin if not GetBWeapon ( i ) then
46383: LD_VAR 0 8
46387: PPUSH
46388: CALL_OW 269
46392: NOT
46393: IFFALSE 46419
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46395: LD_VAR 0 8
46399: PPUSH
46400: LD_VAR 0 8
46404: PPUSH
46405: LD_VAR 0 2
46409: PPUSH
46410: CALL 47669 0 2
46414: PPUSH
46415: CALL_OW 431
// end ;
46419: GO 46380
46421: POP
46422: POP
// end ; for i = 1 to personel do
46423: LD_ADDR_VAR 0 8
46427: PUSH
46428: DOUBLE
46429: LD_INT 1
46431: DEC
46432: ST_TO_ADDR
46433: LD_VAR 0 6
46437: PUSH
46438: FOR_TO
46439: IFFALSE 47503
// begin if i > 4 then
46441: LD_VAR 0 8
46445: PUSH
46446: LD_INT 4
46448: GREATER
46449: IFFALSE 46453
// break ;
46451: GO 47503
// case i of 1 :
46453: LD_VAR 0 8
46457: PUSH
46458: LD_INT 1
46460: DOUBLE
46461: EQUAL
46462: IFTRUE 46466
46464: GO 46546
46466: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46467: LD_ADDR_VAR 0 12
46471: PUSH
46472: LD_VAR 0 18
46476: PPUSH
46477: LD_INT 22
46479: PUSH
46480: LD_VAR 0 16
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 58
46491: PUSH
46492: EMPTY
46493: LIST
46494: PUSH
46495: LD_INT 2
46497: PUSH
46498: LD_INT 30
46500: PUSH
46501: LD_INT 32
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 30
46510: PUSH
46511: LD_INT 4
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 30
46520: PUSH
46521: LD_INT 5
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: LIST
46538: PPUSH
46539: CALL_OW 72
46543: ST_TO_ADDR
46544: GO 46768
46546: LD_INT 2
46548: DOUBLE
46549: EQUAL
46550: IFTRUE 46554
46552: GO 46616
46554: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46555: LD_ADDR_VAR 0 12
46559: PUSH
46560: LD_VAR 0 18
46564: PPUSH
46565: LD_INT 22
46567: PUSH
46568: LD_VAR 0 16
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: LD_INT 30
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 30
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: LIST
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PPUSH
46609: CALL_OW 72
46613: ST_TO_ADDR
46614: GO 46768
46616: LD_INT 3
46618: DOUBLE
46619: EQUAL
46620: IFTRUE 46624
46622: GO 46686
46624: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46625: LD_ADDR_VAR 0 12
46629: PUSH
46630: LD_VAR 0 18
46634: PPUSH
46635: LD_INT 22
46637: PUSH
46638: LD_VAR 0 16
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 2
46649: PUSH
46650: LD_INT 30
46652: PUSH
46653: LD_INT 2
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 30
46662: PUSH
46663: LD_INT 3
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: LIST
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PPUSH
46679: CALL_OW 72
46683: ST_TO_ADDR
46684: GO 46768
46686: LD_INT 4
46688: DOUBLE
46689: EQUAL
46690: IFTRUE 46694
46692: GO 46767
46694: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46695: LD_ADDR_VAR 0 12
46699: PUSH
46700: LD_VAR 0 18
46704: PPUSH
46705: LD_INT 22
46707: PUSH
46708: LD_VAR 0 16
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 2
46719: PUSH
46720: LD_INT 30
46722: PUSH
46723: LD_INT 6
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 30
46732: PUSH
46733: LD_INT 7
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 30
46742: PUSH
46743: LD_INT 8
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PPUSH
46760: CALL_OW 72
46764: ST_TO_ADDR
46765: GO 46768
46767: POP
// if i = 1 then
46768: LD_VAR 0 8
46772: PUSH
46773: LD_INT 1
46775: EQUAL
46776: IFFALSE 46887
// begin tmp := [ ] ;
46778: LD_ADDR_VAR 0 19
46782: PUSH
46783: EMPTY
46784: ST_TO_ADDR
// for j in f do
46785: LD_ADDR_VAR 0 9
46789: PUSH
46790: LD_VAR 0 12
46794: PUSH
46795: FOR_IN
46796: IFFALSE 46869
// if GetBType ( j ) = b_bunker then
46798: LD_VAR 0 9
46802: PPUSH
46803: CALL_OW 266
46807: PUSH
46808: LD_INT 32
46810: EQUAL
46811: IFFALSE 46838
// tmp := Insert ( tmp , 1 , j ) else
46813: LD_ADDR_VAR 0 19
46817: PUSH
46818: LD_VAR 0 19
46822: PPUSH
46823: LD_INT 1
46825: PPUSH
46826: LD_VAR 0 9
46830: PPUSH
46831: CALL_OW 2
46835: ST_TO_ADDR
46836: GO 46867
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46838: LD_ADDR_VAR 0 19
46842: PUSH
46843: LD_VAR 0 19
46847: PPUSH
46848: LD_VAR 0 19
46852: PUSH
46853: LD_INT 1
46855: PLUS
46856: PPUSH
46857: LD_VAR 0 9
46861: PPUSH
46862: CALL_OW 2
46866: ST_TO_ADDR
46867: GO 46795
46869: POP
46870: POP
// if tmp then
46871: LD_VAR 0 19
46875: IFFALSE 46887
// f := tmp ;
46877: LD_ADDR_VAR 0 12
46881: PUSH
46882: LD_VAR 0 19
46886: ST_TO_ADDR
// end ; x := personel [ i ] ;
46887: LD_ADDR_VAR 0 13
46891: PUSH
46892: LD_VAR 0 6
46896: PUSH
46897: LD_VAR 0 8
46901: ARRAY
46902: ST_TO_ADDR
// if x = - 1 then
46903: LD_VAR 0 13
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: EQUAL
46912: IFFALSE 47121
// begin for j in f do
46914: LD_ADDR_VAR 0 9
46918: PUSH
46919: LD_VAR 0 12
46923: PUSH
46924: FOR_IN
46925: IFFALSE 47117
// repeat InitHc ;
46927: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46931: LD_VAR 0 9
46935: PPUSH
46936: CALL_OW 266
46940: PUSH
46941: LD_INT 5
46943: EQUAL
46944: IFFALSE 47014
// begin if UnitsInside ( j ) < 3 then
46946: LD_VAR 0 9
46950: PPUSH
46951: CALL_OW 313
46955: PUSH
46956: LD_INT 3
46958: LESS
46959: IFFALSE 46995
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46961: LD_INT 0
46963: PPUSH
46964: LD_INT 5
46966: PUSH
46967: LD_INT 8
46969: PUSH
46970: LD_INT 9
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: LIST
46977: PUSH
46978: LD_VAR 0 17
46982: ARRAY
46983: PPUSH
46984: LD_VAR 0 4
46988: PPUSH
46989: CALL_OW 380
46993: GO 47012
// PrepareHuman ( false , i , skill ) ;
46995: LD_INT 0
46997: PPUSH
46998: LD_VAR 0 8
47002: PPUSH
47003: LD_VAR 0 4
47007: PPUSH
47008: CALL_OW 380
// end else
47012: GO 47031
// PrepareHuman ( false , i , skill ) ;
47014: LD_INT 0
47016: PPUSH
47017: LD_VAR 0 8
47021: PPUSH
47022: LD_VAR 0 4
47026: PPUSH
47027: CALL_OW 380
// un := CreateHuman ;
47031: LD_ADDR_VAR 0 14
47035: PUSH
47036: CALL_OW 44
47040: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47041: LD_ADDR_VAR 0 7
47045: PUSH
47046: LD_VAR 0 7
47050: PPUSH
47051: LD_INT 1
47053: PPUSH
47054: LD_VAR 0 14
47058: PPUSH
47059: CALL_OW 2
47063: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47064: LD_VAR 0 14
47068: PPUSH
47069: LD_VAR 0 9
47073: PPUSH
47074: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47078: LD_VAR 0 9
47082: PPUSH
47083: CALL_OW 313
47087: PUSH
47088: LD_INT 6
47090: EQUAL
47091: PUSH
47092: LD_VAR 0 9
47096: PPUSH
47097: CALL_OW 266
47101: PUSH
47102: LD_INT 32
47104: PUSH
47105: LD_INT 31
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: IN
47112: OR
47113: IFFALSE 46927
47115: GO 46924
47117: POP
47118: POP
// end else
47119: GO 47501
// for j = 1 to x do
47121: LD_ADDR_VAR 0 9
47125: PUSH
47126: DOUBLE
47127: LD_INT 1
47129: DEC
47130: ST_TO_ADDR
47131: LD_VAR 0 13
47135: PUSH
47136: FOR_TO
47137: IFFALSE 47499
// begin InitHc ;
47139: CALL_OW 19
// if not f then
47143: LD_VAR 0 12
47147: NOT
47148: IFFALSE 47237
// begin PrepareHuman ( false , i , skill ) ;
47150: LD_INT 0
47152: PPUSH
47153: LD_VAR 0 8
47157: PPUSH
47158: LD_VAR 0 4
47162: PPUSH
47163: CALL_OW 380
// un := CreateHuman ;
47167: LD_ADDR_VAR 0 14
47171: PUSH
47172: CALL_OW 44
47176: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47177: LD_ADDR_VAR 0 7
47181: PUSH
47182: LD_VAR 0 7
47186: PPUSH
47187: LD_INT 1
47189: PPUSH
47190: LD_VAR 0 14
47194: PPUSH
47195: CALL_OW 2
47199: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47200: LD_VAR 0 14
47204: PPUSH
47205: LD_VAR 0 1
47209: PPUSH
47210: CALL_OW 250
47214: PPUSH
47215: LD_VAR 0 1
47219: PPUSH
47220: CALL_OW 251
47224: PPUSH
47225: LD_INT 10
47227: PPUSH
47228: LD_INT 0
47230: PPUSH
47231: CALL_OW 50
// continue ;
47235: GO 47136
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47237: LD_VAR 0 12
47241: PUSH
47242: LD_INT 1
47244: ARRAY
47245: PPUSH
47246: CALL_OW 313
47250: PUSH
47251: LD_VAR 0 12
47255: PUSH
47256: LD_INT 1
47258: ARRAY
47259: PPUSH
47260: CALL_OW 266
47264: PUSH
47265: LD_INT 32
47267: PUSH
47268: LD_INT 31
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: IN
47275: AND
47276: PUSH
47277: LD_VAR 0 12
47281: PUSH
47282: LD_INT 1
47284: ARRAY
47285: PPUSH
47286: CALL_OW 313
47290: PUSH
47291: LD_INT 6
47293: EQUAL
47294: OR
47295: IFFALSE 47315
// f := Delete ( f , 1 ) ;
47297: LD_ADDR_VAR 0 12
47301: PUSH
47302: LD_VAR 0 12
47306: PPUSH
47307: LD_INT 1
47309: PPUSH
47310: CALL_OW 3
47314: ST_TO_ADDR
// if not f then
47315: LD_VAR 0 12
47319: NOT
47320: IFFALSE 47338
// begin x := x + 2 ;
47322: LD_ADDR_VAR 0 13
47326: PUSH
47327: LD_VAR 0 13
47331: PUSH
47332: LD_INT 2
47334: PLUS
47335: ST_TO_ADDR
// continue ;
47336: GO 47136
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47338: LD_VAR 0 12
47342: PUSH
47343: LD_INT 1
47345: ARRAY
47346: PPUSH
47347: CALL_OW 266
47351: PUSH
47352: LD_INT 5
47354: EQUAL
47355: IFFALSE 47429
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47357: LD_VAR 0 12
47361: PUSH
47362: LD_INT 1
47364: ARRAY
47365: PPUSH
47366: CALL_OW 313
47370: PUSH
47371: LD_INT 3
47373: LESS
47374: IFFALSE 47410
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47376: LD_INT 0
47378: PPUSH
47379: LD_INT 5
47381: PUSH
47382: LD_INT 8
47384: PUSH
47385: LD_INT 9
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: LIST
47392: PUSH
47393: LD_VAR 0 17
47397: ARRAY
47398: PPUSH
47399: LD_VAR 0 4
47403: PPUSH
47404: CALL_OW 380
47408: GO 47427
// PrepareHuman ( false , i , skill ) ;
47410: LD_INT 0
47412: PPUSH
47413: LD_VAR 0 8
47417: PPUSH
47418: LD_VAR 0 4
47422: PPUSH
47423: CALL_OW 380
// end else
47427: GO 47446
// PrepareHuman ( false , i , skill ) ;
47429: LD_INT 0
47431: PPUSH
47432: LD_VAR 0 8
47436: PPUSH
47437: LD_VAR 0 4
47441: PPUSH
47442: CALL_OW 380
// un := CreateHuman ;
47446: LD_ADDR_VAR 0 14
47450: PUSH
47451: CALL_OW 44
47455: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47456: LD_ADDR_VAR 0 7
47460: PUSH
47461: LD_VAR 0 7
47465: PPUSH
47466: LD_INT 1
47468: PPUSH
47469: LD_VAR 0 14
47473: PPUSH
47474: CALL_OW 2
47478: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47479: LD_VAR 0 14
47483: PPUSH
47484: LD_VAR 0 12
47488: PUSH
47489: LD_INT 1
47491: ARRAY
47492: PPUSH
47493: CALL_OW 52
// end ;
47497: GO 47136
47499: POP
47500: POP
// end ;
47501: GO 46438
47503: POP
47504: POP
// result := result ^ buildings ;
47505: LD_ADDR_VAR 0 7
47509: PUSH
47510: LD_VAR 0 7
47514: PUSH
47515: LD_VAR 0 18
47519: ADD
47520: ST_TO_ADDR
// end else
47521: GO 47664
// begin for i = 1 to personel do
47523: LD_ADDR_VAR 0 8
47527: PUSH
47528: DOUBLE
47529: LD_INT 1
47531: DEC
47532: ST_TO_ADDR
47533: LD_VAR 0 6
47537: PUSH
47538: FOR_TO
47539: IFFALSE 47662
// begin if i > 4 then
47541: LD_VAR 0 8
47545: PUSH
47546: LD_INT 4
47548: GREATER
47549: IFFALSE 47553
// break ;
47551: GO 47662
// x := personel [ i ] ;
47553: LD_ADDR_VAR 0 13
47557: PUSH
47558: LD_VAR 0 6
47562: PUSH
47563: LD_VAR 0 8
47567: ARRAY
47568: ST_TO_ADDR
// if x = - 1 then
47569: LD_VAR 0 13
47573: PUSH
47574: LD_INT 1
47576: NEG
47577: EQUAL
47578: IFFALSE 47582
// continue ;
47580: GO 47538
// PrepareHuman ( false , i , skill ) ;
47582: LD_INT 0
47584: PPUSH
47585: LD_VAR 0 8
47589: PPUSH
47590: LD_VAR 0 4
47594: PPUSH
47595: CALL_OW 380
// un := CreateHuman ;
47599: LD_ADDR_VAR 0 14
47603: PUSH
47604: CALL_OW 44
47608: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47609: LD_VAR 0 14
47613: PPUSH
47614: LD_VAR 0 1
47618: PPUSH
47619: CALL_OW 250
47623: PPUSH
47624: LD_VAR 0 1
47628: PPUSH
47629: CALL_OW 251
47633: PPUSH
47634: LD_INT 10
47636: PPUSH
47637: LD_INT 0
47639: PPUSH
47640: CALL_OW 50
// result := result ^ un ;
47644: LD_ADDR_VAR 0 7
47648: PUSH
47649: LD_VAR 0 7
47653: PUSH
47654: LD_VAR 0 14
47658: ADD
47659: ST_TO_ADDR
// end ;
47660: GO 47538
47662: POP
47663: POP
// end ; end ;
47664: LD_VAR 0 7
47668: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47669: LD_INT 0
47671: PPUSH
47672: PPUSH
47673: PPUSH
47674: PPUSH
47675: PPUSH
47676: PPUSH
47677: PPUSH
47678: PPUSH
47679: PPUSH
47680: PPUSH
47681: PPUSH
47682: PPUSH
47683: PPUSH
47684: PPUSH
47685: PPUSH
47686: PPUSH
// result := false ;
47687: LD_ADDR_VAR 0 3
47691: PUSH
47692: LD_INT 0
47694: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47695: LD_VAR 0 1
47699: NOT
47700: PUSH
47701: LD_VAR 0 1
47705: PPUSH
47706: CALL_OW 266
47710: PUSH
47711: LD_INT 32
47713: PUSH
47714: LD_INT 33
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: IN
47721: NOT
47722: OR
47723: IFFALSE 47727
// exit ;
47725: GO 48863
// nat := GetNation ( tower ) ;
47727: LD_ADDR_VAR 0 12
47731: PUSH
47732: LD_VAR 0 1
47736: PPUSH
47737: CALL_OW 248
47741: ST_TO_ADDR
// side := GetSide ( tower ) ;
47742: LD_ADDR_VAR 0 16
47746: PUSH
47747: LD_VAR 0 1
47751: PPUSH
47752: CALL_OW 255
47756: ST_TO_ADDR
// x := GetX ( tower ) ;
47757: LD_ADDR_VAR 0 10
47761: PUSH
47762: LD_VAR 0 1
47766: PPUSH
47767: CALL_OW 250
47771: ST_TO_ADDR
// y := GetY ( tower ) ;
47772: LD_ADDR_VAR 0 11
47776: PUSH
47777: LD_VAR 0 1
47781: PPUSH
47782: CALL_OW 251
47786: ST_TO_ADDR
// if not x or not y then
47787: LD_VAR 0 10
47791: NOT
47792: PUSH
47793: LD_VAR 0 11
47797: NOT
47798: OR
47799: IFFALSE 47803
// exit ;
47801: GO 48863
// weapon := 0 ;
47803: LD_ADDR_VAR 0 18
47807: PUSH
47808: LD_INT 0
47810: ST_TO_ADDR
// fac_list := [ ] ;
47811: LD_ADDR_VAR 0 17
47815: PUSH
47816: EMPTY
47817: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
47818: LD_ADDR_VAR 0 6
47822: PUSH
47823: LD_VAR 0 1
47827: PPUSH
47828: CALL_OW 274
47832: PPUSH
47833: LD_VAR 0 2
47837: PPUSH
47838: CALL 45441 0 2
47842: PPUSH
47843: LD_INT 30
47845: PUSH
47846: LD_INT 3
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PPUSH
47853: CALL_OW 72
47857: ST_TO_ADDR
// if not factories then
47858: LD_VAR 0 6
47862: NOT
47863: IFFALSE 47867
// exit ;
47865: GO 48863
// for i in factories do
47867: LD_ADDR_VAR 0 8
47871: PUSH
47872: LD_VAR 0 6
47876: PUSH
47877: FOR_IN
47878: IFFALSE 47903
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47880: LD_ADDR_VAR 0 17
47884: PUSH
47885: LD_VAR 0 17
47889: PUSH
47890: LD_VAR 0 8
47894: PPUSH
47895: CALL_OW 478
47899: UNION
47900: ST_TO_ADDR
47901: GO 47877
47903: POP
47904: POP
// if not fac_list then
47905: LD_VAR 0 17
47909: NOT
47910: IFFALSE 47914
// exit ;
47912: GO 48863
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47914: LD_ADDR_VAR 0 5
47918: PUSH
47919: LD_INT 4
47921: PUSH
47922: LD_INT 5
47924: PUSH
47925: LD_INT 9
47927: PUSH
47928: LD_INT 10
47930: PUSH
47931: LD_INT 6
47933: PUSH
47934: LD_INT 7
47936: PUSH
47937: LD_INT 11
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 27
47951: PUSH
47952: LD_INT 28
47954: PUSH
47955: LD_INT 26
47957: PUSH
47958: LD_INT 30
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 43
47969: PUSH
47970: LD_INT 44
47972: PUSH
47973: LD_INT 46
47975: PUSH
47976: LD_INT 45
47978: PUSH
47979: LD_INT 47
47981: PUSH
47982: LD_INT 49
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: LIST
47997: PUSH
47998: LD_VAR 0 12
48002: ARRAY
48003: ST_TO_ADDR
// for i in list do
48004: LD_ADDR_VAR 0 8
48008: PUSH
48009: LD_VAR 0 5
48013: PUSH
48014: FOR_IN
48015: IFFALSE 48048
// if not i in fac_list then
48017: LD_VAR 0 8
48021: PUSH
48022: LD_VAR 0 17
48026: IN
48027: NOT
48028: IFFALSE 48046
// list := list diff i ;
48030: LD_ADDR_VAR 0 5
48034: PUSH
48035: LD_VAR 0 5
48039: PUSH
48040: LD_VAR 0 8
48044: DIFF
48045: ST_TO_ADDR
48046: GO 48014
48048: POP
48049: POP
// if not list then
48050: LD_VAR 0 5
48054: NOT
48055: IFFALSE 48059
// exit ;
48057: GO 48863
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48059: LD_VAR 0 12
48063: PUSH
48064: LD_INT 3
48066: EQUAL
48067: PUSH
48068: LD_INT 49
48070: PUSH
48071: LD_VAR 0 5
48075: IN
48076: AND
48077: PUSH
48078: LD_INT 31
48080: PPUSH
48081: LD_VAR 0 16
48085: PPUSH
48086: CALL_OW 321
48090: PUSH
48091: LD_INT 2
48093: EQUAL
48094: AND
48095: IFFALSE 48155
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48097: LD_INT 22
48099: PUSH
48100: LD_VAR 0 16
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 35
48111: PUSH
48112: LD_INT 49
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 91
48121: PUSH
48122: LD_VAR 0 1
48126: PUSH
48127: LD_INT 10
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: LIST
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: LIST
48139: PPUSH
48140: CALL_OW 69
48144: NOT
48145: IFFALSE 48155
// weapon := ru_time_lapser ;
48147: LD_ADDR_VAR 0 18
48151: PUSH
48152: LD_INT 49
48154: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48155: LD_VAR 0 12
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: LD_INT 2
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: IN
48170: PUSH
48171: LD_INT 11
48173: PUSH
48174: LD_VAR 0 5
48178: IN
48179: PUSH
48180: LD_INT 30
48182: PUSH
48183: LD_VAR 0 5
48187: IN
48188: OR
48189: AND
48190: PUSH
48191: LD_INT 6
48193: PPUSH
48194: LD_VAR 0 16
48198: PPUSH
48199: CALL_OW 321
48203: PUSH
48204: LD_INT 2
48206: EQUAL
48207: AND
48208: IFFALSE 48373
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48210: LD_INT 22
48212: PUSH
48213: LD_VAR 0 16
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 2
48224: PUSH
48225: LD_INT 35
48227: PUSH
48228: LD_INT 11
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 35
48237: PUSH
48238: LD_INT 30
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 91
48252: PUSH
48253: LD_VAR 0 1
48257: PUSH
48258: LD_INT 18
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: LIST
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: LIST
48270: PPUSH
48271: CALL_OW 69
48275: NOT
48276: PUSH
48277: LD_INT 22
48279: PUSH
48280: LD_VAR 0 16
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 2
48291: PUSH
48292: LD_INT 30
48294: PUSH
48295: LD_INT 32
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 30
48304: PUSH
48305: LD_INT 33
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 91
48319: PUSH
48320: LD_VAR 0 1
48324: PUSH
48325: LD_INT 12
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: LIST
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: LIST
48337: PUSH
48338: EMPTY
48339: LIST
48340: PPUSH
48341: CALL_OW 69
48345: PUSH
48346: LD_INT 2
48348: GREATER
48349: AND
48350: IFFALSE 48373
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48352: LD_ADDR_VAR 0 18
48356: PUSH
48357: LD_INT 11
48359: PUSH
48360: LD_INT 30
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_VAR 0 12
48371: ARRAY
48372: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48373: LD_VAR 0 18
48377: NOT
48378: PUSH
48379: LD_INT 40
48381: PPUSH
48382: LD_VAR 0 16
48386: PPUSH
48387: CALL_OW 321
48391: PUSH
48392: LD_INT 2
48394: EQUAL
48395: AND
48396: PUSH
48397: LD_INT 7
48399: PUSH
48400: LD_VAR 0 5
48404: IN
48405: PUSH
48406: LD_INT 28
48408: PUSH
48409: LD_VAR 0 5
48413: IN
48414: OR
48415: PUSH
48416: LD_INT 45
48418: PUSH
48419: LD_VAR 0 5
48423: IN
48424: OR
48425: AND
48426: IFFALSE 48680
// begin hex := GetHexInfo ( x , y ) ;
48428: LD_ADDR_VAR 0 4
48432: PUSH
48433: LD_VAR 0 10
48437: PPUSH
48438: LD_VAR 0 11
48442: PPUSH
48443: CALL_OW 546
48447: ST_TO_ADDR
// if hex [ 1 ] then
48448: LD_VAR 0 4
48452: PUSH
48453: LD_INT 1
48455: ARRAY
48456: IFFALSE 48460
// exit ;
48458: GO 48863
// height := hex [ 2 ] ;
48460: LD_ADDR_VAR 0 15
48464: PUSH
48465: LD_VAR 0 4
48469: PUSH
48470: LD_INT 2
48472: ARRAY
48473: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48474: LD_ADDR_VAR 0 14
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: LD_INT 2
48484: PUSH
48485: LD_INT 3
48487: PUSH
48488: LD_INT 5
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: ST_TO_ADDR
// for i in tmp do
48497: LD_ADDR_VAR 0 8
48501: PUSH
48502: LD_VAR 0 14
48506: PUSH
48507: FOR_IN
48508: IFFALSE 48678
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48510: LD_ADDR_VAR 0 9
48514: PUSH
48515: LD_VAR 0 10
48519: PPUSH
48520: LD_VAR 0 8
48524: PPUSH
48525: LD_INT 5
48527: PPUSH
48528: CALL_OW 272
48532: PUSH
48533: LD_VAR 0 11
48537: PPUSH
48538: LD_VAR 0 8
48542: PPUSH
48543: LD_INT 5
48545: PPUSH
48546: CALL_OW 273
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48555: LD_VAR 0 9
48559: PUSH
48560: LD_INT 1
48562: ARRAY
48563: PPUSH
48564: LD_VAR 0 9
48568: PUSH
48569: LD_INT 2
48571: ARRAY
48572: PPUSH
48573: CALL_OW 488
48577: IFFALSE 48676
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48579: LD_ADDR_VAR 0 4
48583: PUSH
48584: LD_VAR 0 9
48588: PUSH
48589: LD_INT 1
48591: ARRAY
48592: PPUSH
48593: LD_VAR 0 9
48597: PUSH
48598: LD_INT 2
48600: ARRAY
48601: PPUSH
48602: CALL_OW 546
48606: ST_TO_ADDR
// if hex [ 1 ] then
48607: LD_VAR 0 4
48611: PUSH
48612: LD_INT 1
48614: ARRAY
48615: IFFALSE 48619
// continue ;
48617: GO 48507
// h := hex [ 2 ] ;
48619: LD_ADDR_VAR 0 13
48623: PUSH
48624: LD_VAR 0 4
48628: PUSH
48629: LD_INT 2
48631: ARRAY
48632: ST_TO_ADDR
// if h + 7 < height then
48633: LD_VAR 0 13
48637: PUSH
48638: LD_INT 7
48640: PLUS
48641: PUSH
48642: LD_VAR 0 15
48646: LESS
48647: IFFALSE 48676
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48649: LD_ADDR_VAR 0 18
48653: PUSH
48654: LD_INT 7
48656: PUSH
48657: LD_INT 28
48659: PUSH
48660: LD_INT 45
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: LIST
48667: PUSH
48668: LD_VAR 0 12
48672: ARRAY
48673: ST_TO_ADDR
// break ;
48674: GO 48678
// end ; end ; end ;
48676: GO 48507
48678: POP
48679: POP
// end ; if not weapon then
48680: LD_VAR 0 18
48684: NOT
48685: IFFALSE 48745
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48687: LD_ADDR_VAR 0 5
48691: PUSH
48692: LD_VAR 0 5
48696: PUSH
48697: LD_INT 11
48699: PUSH
48700: LD_INT 30
48702: PUSH
48703: LD_INT 49
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: LIST
48710: DIFF
48711: ST_TO_ADDR
// if not list then
48712: LD_VAR 0 5
48716: NOT
48717: IFFALSE 48721
// exit ;
48719: GO 48863
// weapon := list [ rand ( 1 , list ) ] ;
48721: LD_ADDR_VAR 0 18
48725: PUSH
48726: LD_VAR 0 5
48730: PUSH
48731: LD_INT 1
48733: PPUSH
48734: LD_VAR 0 5
48738: PPUSH
48739: CALL_OW 12
48743: ARRAY
48744: ST_TO_ADDR
// end ; if weapon then
48745: LD_VAR 0 18
48749: IFFALSE 48863
// begin tmp := CostOfWeapon ( weapon ) ;
48751: LD_ADDR_VAR 0 14
48755: PUSH
48756: LD_VAR 0 18
48760: PPUSH
48761: CALL_OW 451
48765: ST_TO_ADDR
// j := GetBase ( tower ) ;
48766: LD_ADDR_VAR 0 9
48770: PUSH
48771: LD_VAR 0 1
48775: PPUSH
48776: CALL_OW 274
48780: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48781: LD_VAR 0 9
48785: PPUSH
48786: LD_INT 1
48788: PPUSH
48789: CALL_OW 275
48793: PUSH
48794: LD_VAR 0 14
48798: PUSH
48799: LD_INT 1
48801: ARRAY
48802: GREATEREQUAL
48803: PUSH
48804: LD_VAR 0 9
48808: PPUSH
48809: LD_INT 2
48811: PPUSH
48812: CALL_OW 275
48816: PUSH
48817: LD_VAR 0 14
48821: PUSH
48822: LD_INT 2
48824: ARRAY
48825: GREATEREQUAL
48826: AND
48827: PUSH
48828: LD_VAR 0 9
48832: PPUSH
48833: LD_INT 3
48835: PPUSH
48836: CALL_OW 275
48840: PUSH
48841: LD_VAR 0 14
48845: PUSH
48846: LD_INT 3
48848: ARRAY
48849: GREATEREQUAL
48850: AND
48851: IFFALSE 48863
// result := weapon ;
48853: LD_ADDR_VAR 0 3
48857: PUSH
48858: LD_VAR 0 18
48862: ST_TO_ADDR
// end ; end ;
48863: LD_VAR 0 3
48867: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48868: LD_INT 0
48870: PPUSH
48871: PPUSH
// result := true ;
48872: LD_ADDR_VAR 0 3
48876: PUSH
48877: LD_INT 1
48879: ST_TO_ADDR
// if array1 = array2 then
48880: LD_VAR 0 1
48884: PUSH
48885: LD_VAR 0 2
48889: EQUAL
48890: IFFALSE 48950
// begin for i = 1 to array1 do
48892: LD_ADDR_VAR 0 4
48896: PUSH
48897: DOUBLE
48898: LD_INT 1
48900: DEC
48901: ST_TO_ADDR
48902: LD_VAR 0 1
48906: PUSH
48907: FOR_TO
48908: IFFALSE 48946
// if array1 [ i ] <> array2 [ i ] then
48910: LD_VAR 0 1
48914: PUSH
48915: LD_VAR 0 4
48919: ARRAY
48920: PUSH
48921: LD_VAR 0 2
48925: PUSH
48926: LD_VAR 0 4
48930: ARRAY
48931: NONEQUAL
48932: IFFALSE 48944
// begin result := false ;
48934: LD_ADDR_VAR 0 3
48938: PUSH
48939: LD_INT 0
48941: ST_TO_ADDR
// break ;
48942: GO 48946
// end ;
48944: GO 48907
48946: POP
48947: POP
// end else
48948: GO 48958
// result := false ;
48950: LD_ADDR_VAR 0 3
48954: PUSH
48955: LD_INT 0
48957: ST_TO_ADDR
// end ;
48958: LD_VAR 0 3
48962: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48963: LD_INT 0
48965: PPUSH
48966: PPUSH
48967: PPUSH
// pom := GetBase ( fac ) ;
48968: LD_ADDR_VAR 0 5
48972: PUSH
48973: LD_VAR 0 1
48977: PPUSH
48978: CALL_OW 274
48982: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48983: LD_ADDR_VAR 0 4
48987: PUSH
48988: LD_VAR 0 2
48992: PUSH
48993: LD_INT 1
48995: ARRAY
48996: PPUSH
48997: LD_VAR 0 2
49001: PUSH
49002: LD_INT 2
49004: ARRAY
49005: PPUSH
49006: LD_VAR 0 2
49010: PUSH
49011: LD_INT 3
49013: ARRAY
49014: PPUSH
49015: LD_VAR 0 2
49019: PUSH
49020: LD_INT 4
49022: ARRAY
49023: PPUSH
49024: CALL_OW 449
49028: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49029: LD_ADDR_VAR 0 3
49033: PUSH
49034: LD_VAR 0 5
49038: PPUSH
49039: LD_INT 1
49041: PPUSH
49042: CALL_OW 275
49046: PUSH
49047: LD_VAR 0 4
49051: PUSH
49052: LD_INT 1
49054: ARRAY
49055: GREATEREQUAL
49056: PUSH
49057: LD_VAR 0 5
49061: PPUSH
49062: LD_INT 2
49064: PPUSH
49065: CALL_OW 275
49069: PUSH
49070: LD_VAR 0 4
49074: PUSH
49075: LD_INT 2
49077: ARRAY
49078: GREATEREQUAL
49079: AND
49080: PUSH
49081: LD_VAR 0 5
49085: PPUSH
49086: LD_INT 3
49088: PPUSH
49089: CALL_OW 275
49093: PUSH
49094: LD_VAR 0 4
49098: PUSH
49099: LD_INT 3
49101: ARRAY
49102: GREATEREQUAL
49103: AND
49104: ST_TO_ADDR
// end ;
49105: LD_VAR 0 3
49109: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49110: LD_INT 0
49112: PPUSH
49113: PPUSH
49114: PPUSH
49115: PPUSH
// pom := GetBase ( building ) ;
49116: LD_ADDR_VAR 0 3
49120: PUSH
49121: LD_VAR 0 1
49125: PPUSH
49126: CALL_OW 274
49130: ST_TO_ADDR
// if not pom then
49131: LD_VAR 0 3
49135: NOT
49136: IFFALSE 49140
// exit ;
49138: GO 49310
// btype := GetBType ( building ) ;
49140: LD_ADDR_VAR 0 5
49144: PUSH
49145: LD_VAR 0 1
49149: PPUSH
49150: CALL_OW 266
49154: ST_TO_ADDR
// if btype = b_armoury then
49155: LD_VAR 0 5
49159: PUSH
49160: LD_INT 4
49162: EQUAL
49163: IFFALSE 49173
// btype := b_barracks ;
49165: LD_ADDR_VAR 0 5
49169: PUSH
49170: LD_INT 5
49172: ST_TO_ADDR
// if btype = b_depot then
49173: LD_VAR 0 5
49177: PUSH
49178: LD_INT 0
49180: EQUAL
49181: IFFALSE 49191
// btype := b_warehouse ;
49183: LD_ADDR_VAR 0 5
49187: PUSH
49188: LD_INT 1
49190: ST_TO_ADDR
// if btype = b_workshop then
49191: LD_VAR 0 5
49195: PUSH
49196: LD_INT 2
49198: EQUAL
49199: IFFALSE 49209
// btype := b_factory ;
49201: LD_ADDR_VAR 0 5
49205: PUSH
49206: LD_INT 3
49208: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49209: LD_ADDR_VAR 0 4
49213: PUSH
49214: LD_VAR 0 5
49218: PPUSH
49219: LD_VAR 0 1
49223: PPUSH
49224: CALL_OW 248
49228: PPUSH
49229: CALL_OW 450
49233: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49234: LD_ADDR_VAR 0 2
49238: PUSH
49239: LD_VAR 0 3
49243: PPUSH
49244: LD_INT 1
49246: PPUSH
49247: CALL_OW 275
49251: PUSH
49252: LD_VAR 0 4
49256: PUSH
49257: LD_INT 1
49259: ARRAY
49260: GREATEREQUAL
49261: PUSH
49262: LD_VAR 0 3
49266: PPUSH
49267: LD_INT 2
49269: PPUSH
49270: CALL_OW 275
49274: PUSH
49275: LD_VAR 0 4
49279: PUSH
49280: LD_INT 2
49282: ARRAY
49283: GREATEREQUAL
49284: AND
49285: PUSH
49286: LD_VAR 0 3
49290: PPUSH
49291: LD_INT 3
49293: PPUSH
49294: CALL_OW 275
49298: PUSH
49299: LD_VAR 0 4
49303: PUSH
49304: LD_INT 3
49306: ARRAY
49307: GREATEREQUAL
49308: AND
49309: ST_TO_ADDR
// end ;
49310: LD_VAR 0 2
49314: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49315: LD_INT 0
49317: PPUSH
49318: PPUSH
49319: PPUSH
// pom := GetBase ( building ) ;
49320: LD_ADDR_VAR 0 4
49324: PUSH
49325: LD_VAR 0 1
49329: PPUSH
49330: CALL_OW 274
49334: ST_TO_ADDR
// if not pom then
49335: LD_VAR 0 4
49339: NOT
49340: IFFALSE 49344
// exit ;
49342: GO 49445
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49344: LD_ADDR_VAR 0 5
49348: PUSH
49349: LD_VAR 0 2
49353: PPUSH
49354: LD_VAR 0 1
49358: PPUSH
49359: CALL_OW 248
49363: PPUSH
49364: CALL_OW 450
49368: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49369: LD_ADDR_VAR 0 3
49373: PUSH
49374: LD_VAR 0 4
49378: PPUSH
49379: LD_INT 1
49381: PPUSH
49382: CALL_OW 275
49386: PUSH
49387: LD_VAR 0 5
49391: PUSH
49392: LD_INT 1
49394: ARRAY
49395: GREATEREQUAL
49396: PUSH
49397: LD_VAR 0 4
49401: PPUSH
49402: LD_INT 2
49404: PPUSH
49405: CALL_OW 275
49409: PUSH
49410: LD_VAR 0 5
49414: PUSH
49415: LD_INT 2
49417: ARRAY
49418: GREATEREQUAL
49419: AND
49420: PUSH
49421: LD_VAR 0 4
49425: PPUSH
49426: LD_INT 3
49428: PPUSH
49429: CALL_OW 275
49433: PUSH
49434: LD_VAR 0 5
49438: PUSH
49439: LD_INT 3
49441: ARRAY
49442: GREATEREQUAL
49443: AND
49444: ST_TO_ADDR
// end ;
49445: LD_VAR 0 3
49449: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
49450: LD_INT 0
49452: PPUSH
49453: PPUSH
49454: PPUSH
49455: PPUSH
49456: PPUSH
49457: PPUSH
49458: PPUSH
49459: PPUSH
49460: PPUSH
49461: PPUSH
// result := false ;
49462: LD_ADDR_VAR 0 6
49466: PUSH
49467: LD_INT 0
49469: ST_TO_ADDR
// if not base or not btype or not x or not y then
49470: LD_VAR 0 1
49474: NOT
49475: PUSH
49476: LD_VAR 0 2
49480: NOT
49481: OR
49482: PUSH
49483: LD_VAR 0 3
49487: NOT
49488: OR
49489: PUSH
49490: LD_VAR 0 4
49494: NOT
49495: OR
49496: IFFALSE 49500
// exit ;
49498: GO 50109
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
49500: LD_ADDR_VAR 0 12
49504: PUSH
49505: LD_VAR 0 2
49509: PPUSH
49510: LD_VAR 0 3
49514: PPUSH
49515: LD_VAR 0 4
49519: PPUSH
49520: LD_VAR 0 5
49524: PPUSH
49525: LD_VAR 0 1
49529: PUSH
49530: LD_INT 1
49532: ARRAY
49533: PPUSH
49534: CALL_OW 248
49538: PPUSH
49539: LD_INT 0
49541: PPUSH
49542: CALL 50946 0 6
49546: ST_TO_ADDR
// if not hexes then
49547: LD_VAR 0 12
49551: NOT
49552: IFFALSE 49556
// exit ;
49554: GO 50109
// for i = 1 to hexes do
49556: LD_ADDR_VAR 0 7
49560: PUSH
49561: DOUBLE
49562: LD_INT 1
49564: DEC
49565: ST_TO_ADDR
49566: LD_VAR 0 12
49570: PUSH
49571: FOR_TO
49572: IFFALSE 50107
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49574: LD_ADDR_VAR 0 11
49578: PUSH
49579: LD_VAR 0 12
49583: PUSH
49584: LD_VAR 0 7
49588: ARRAY
49589: PUSH
49590: LD_INT 1
49592: ARRAY
49593: PPUSH
49594: LD_VAR 0 12
49598: PUSH
49599: LD_VAR 0 7
49603: ARRAY
49604: PUSH
49605: LD_INT 2
49607: ARRAY
49608: PPUSH
49609: CALL_OW 428
49613: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49614: LD_VAR 0 12
49618: PUSH
49619: LD_VAR 0 7
49623: ARRAY
49624: PUSH
49625: LD_INT 1
49627: ARRAY
49628: PPUSH
49629: LD_VAR 0 12
49633: PUSH
49634: LD_VAR 0 7
49638: ARRAY
49639: PUSH
49640: LD_INT 2
49642: ARRAY
49643: PPUSH
49644: CALL_OW 351
49648: PUSH
49649: LD_VAR 0 12
49653: PUSH
49654: LD_VAR 0 7
49658: ARRAY
49659: PUSH
49660: LD_INT 1
49662: ARRAY
49663: PPUSH
49664: LD_VAR 0 12
49668: PUSH
49669: LD_VAR 0 7
49673: ARRAY
49674: PUSH
49675: LD_INT 2
49677: ARRAY
49678: PPUSH
49679: CALL_OW 488
49683: NOT
49684: OR
49685: PUSH
49686: LD_VAR 0 11
49690: PPUSH
49691: CALL_OW 247
49695: PUSH
49696: LD_INT 3
49698: EQUAL
49699: OR
49700: IFFALSE 49706
// exit ;
49702: POP
49703: POP
49704: GO 50109
// if not tmp or not tmp in base then
49706: LD_VAR 0 11
49710: NOT
49711: PUSH
49712: LD_VAR 0 11
49716: PUSH
49717: LD_VAR 0 1
49721: IN
49722: NOT
49723: OR
49724: IFFALSE 49728
// continue ;
49726: GO 49571
// result := true ;
49728: LD_ADDR_VAR 0 6
49732: PUSH
49733: LD_INT 1
49735: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49736: LD_ADDR_VAR 0 15
49740: PUSH
49741: LD_VAR 0 1
49745: PPUSH
49746: LD_INT 22
49748: PUSH
49749: LD_VAR 0 11
49753: PPUSH
49754: CALL_OW 255
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 2
49765: PUSH
49766: LD_INT 30
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 30
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: LIST
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PPUSH
49795: CALL_OW 72
49799: ST_TO_ADDR
// if dep then
49800: LD_VAR 0 15
49804: IFFALSE 49940
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49806: LD_ADDR_VAR 0 14
49810: PUSH
49811: LD_VAR 0 15
49815: PUSH
49816: LD_INT 1
49818: ARRAY
49819: PPUSH
49820: CALL_OW 250
49824: PPUSH
49825: LD_VAR 0 15
49829: PUSH
49830: LD_INT 1
49832: ARRAY
49833: PPUSH
49834: CALL_OW 254
49838: PPUSH
49839: LD_INT 5
49841: PPUSH
49842: CALL_OW 272
49846: PUSH
49847: LD_VAR 0 15
49851: PUSH
49852: LD_INT 1
49854: ARRAY
49855: PPUSH
49856: CALL_OW 251
49860: PPUSH
49861: LD_VAR 0 15
49865: PUSH
49866: LD_INT 1
49868: ARRAY
49869: PPUSH
49870: CALL_OW 254
49874: PPUSH
49875: LD_INT 5
49877: PPUSH
49878: CALL_OW 273
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49887: LD_VAR 0 14
49891: PUSH
49892: LD_INT 1
49894: ARRAY
49895: PPUSH
49896: LD_VAR 0 14
49900: PUSH
49901: LD_INT 2
49903: ARRAY
49904: PPUSH
49905: CALL_OW 488
49909: IFFALSE 49940
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49911: LD_VAR 0 11
49915: PPUSH
49916: LD_VAR 0 14
49920: PUSH
49921: LD_INT 1
49923: ARRAY
49924: PPUSH
49925: LD_VAR 0 14
49929: PUSH
49930: LD_INT 2
49932: ARRAY
49933: PPUSH
49934: CALL_OW 111
// continue ;
49938: GO 49571
// end ; end ; r := GetDir ( tmp ) ;
49940: LD_ADDR_VAR 0 13
49944: PUSH
49945: LD_VAR 0 11
49949: PPUSH
49950: CALL_OW 254
49954: ST_TO_ADDR
// if r = 5 then
49955: LD_VAR 0 13
49959: PUSH
49960: LD_INT 5
49962: EQUAL
49963: IFFALSE 49973
// r := 0 ;
49965: LD_ADDR_VAR 0 13
49969: PUSH
49970: LD_INT 0
49972: ST_TO_ADDR
// for j = r to 5 do
49973: LD_ADDR_VAR 0 8
49977: PUSH
49978: DOUBLE
49979: LD_VAR 0 13
49983: DEC
49984: ST_TO_ADDR
49985: LD_INT 5
49987: PUSH
49988: FOR_TO
49989: IFFALSE 50103
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49991: LD_ADDR_VAR 0 9
49995: PUSH
49996: LD_VAR 0 11
50000: PPUSH
50001: CALL_OW 250
50005: PPUSH
50006: LD_VAR 0 8
50010: PPUSH
50011: LD_INT 2
50013: PPUSH
50014: CALL_OW 272
50018: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50019: LD_ADDR_VAR 0 10
50023: PUSH
50024: LD_VAR 0 11
50028: PPUSH
50029: CALL_OW 251
50033: PPUSH
50034: LD_VAR 0 8
50038: PPUSH
50039: LD_INT 2
50041: PPUSH
50042: CALL_OW 273
50046: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50047: LD_VAR 0 9
50051: PPUSH
50052: LD_VAR 0 10
50056: PPUSH
50057: CALL_OW 488
50061: PUSH
50062: LD_VAR 0 9
50066: PPUSH
50067: LD_VAR 0 10
50071: PPUSH
50072: CALL_OW 428
50076: NOT
50077: AND
50078: IFFALSE 50101
// begin ComMoveXY ( tmp , _x , _y ) ;
50080: LD_VAR 0 11
50084: PPUSH
50085: LD_VAR 0 9
50089: PPUSH
50090: LD_VAR 0 10
50094: PPUSH
50095: CALL_OW 111
// break ;
50099: GO 50103
// end ; end ;
50101: GO 49988
50103: POP
50104: POP
// end ;
50105: GO 49571
50107: POP
50108: POP
// end ;
50109: LD_VAR 0 6
50113: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
50114: LD_INT 0
50116: PPUSH
50117: PPUSH
50118: PPUSH
50119: PPUSH
50120: PPUSH
50121: PPUSH
50122: PPUSH
50123: PPUSH
50124: PPUSH
50125: PPUSH
// result := false ;
50126: LD_ADDR_VAR 0 6
50130: PUSH
50131: LD_INT 0
50133: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50134: LD_VAR 0 1
50138: NOT
50139: PUSH
50140: LD_VAR 0 1
50144: PPUSH
50145: CALL_OW 266
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: LD_INT 1
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: IN
50160: NOT
50161: OR
50162: PUSH
50163: LD_VAR 0 2
50167: NOT
50168: OR
50169: PUSH
50170: LD_VAR 0 5
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: LD_INT 1
50180: PUSH
50181: LD_INT 2
50183: PUSH
50184: LD_INT 3
50186: PUSH
50187: LD_INT 4
50189: PUSH
50190: LD_INT 5
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: IN
50201: NOT
50202: OR
50203: PUSH
50204: LD_VAR 0 3
50208: PPUSH
50209: LD_VAR 0 4
50213: PPUSH
50214: CALL_OW 488
50218: NOT
50219: OR
50220: IFFALSE 50224
// exit ;
50222: GO 50941
// pom := GetBase ( depot ) ;
50224: LD_ADDR_VAR 0 10
50228: PUSH
50229: LD_VAR 0 1
50233: PPUSH
50234: CALL_OW 274
50238: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50239: LD_ADDR_VAR 0 11
50243: PUSH
50244: LD_VAR 0 2
50248: PPUSH
50249: LD_VAR 0 1
50253: PPUSH
50254: CALL_OW 248
50258: PPUSH
50259: CALL_OW 450
50263: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50264: LD_VAR 0 10
50268: PPUSH
50269: LD_INT 1
50271: PPUSH
50272: CALL_OW 275
50276: PUSH
50277: LD_VAR 0 11
50281: PUSH
50282: LD_INT 1
50284: ARRAY
50285: GREATEREQUAL
50286: PUSH
50287: LD_VAR 0 10
50291: PPUSH
50292: LD_INT 2
50294: PPUSH
50295: CALL_OW 275
50299: PUSH
50300: LD_VAR 0 11
50304: PUSH
50305: LD_INT 2
50307: ARRAY
50308: GREATEREQUAL
50309: AND
50310: PUSH
50311: LD_VAR 0 10
50315: PPUSH
50316: LD_INT 3
50318: PPUSH
50319: CALL_OW 275
50323: PUSH
50324: LD_VAR 0 11
50328: PUSH
50329: LD_INT 3
50331: ARRAY
50332: GREATEREQUAL
50333: AND
50334: NOT
50335: IFFALSE 50339
// exit ;
50337: GO 50941
// if GetBType ( depot ) = b_depot then
50339: LD_VAR 0 1
50343: PPUSH
50344: CALL_OW 266
50348: PUSH
50349: LD_INT 0
50351: EQUAL
50352: IFFALSE 50364
// dist := 28 else
50354: LD_ADDR_VAR 0 14
50358: PUSH
50359: LD_INT 28
50361: ST_TO_ADDR
50362: GO 50372
// dist := 36 ;
50364: LD_ADDR_VAR 0 14
50368: PUSH
50369: LD_INT 36
50371: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50372: LD_VAR 0 1
50376: PPUSH
50377: LD_VAR 0 3
50381: PPUSH
50382: LD_VAR 0 4
50386: PPUSH
50387: CALL_OW 297
50391: PUSH
50392: LD_VAR 0 14
50396: GREATER
50397: IFFALSE 50401
// exit ;
50399: GO 50941
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50401: LD_ADDR_VAR 0 12
50405: PUSH
50406: LD_VAR 0 2
50410: PPUSH
50411: LD_VAR 0 3
50415: PPUSH
50416: LD_VAR 0 4
50420: PPUSH
50421: LD_VAR 0 5
50425: PPUSH
50426: LD_VAR 0 1
50430: PPUSH
50431: CALL_OW 248
50435: PPUSH
50436: LD_INT 0
50438: PPUSH
50439: CALL 50946 0 6
50443: ST_TO_ADDR
// if not hexes then
50444: LD_VAR 0 12
50448: NOT
50449: IFFALSE 50453
// exit ;
50451: GO 50941
// hex := GetHexInfo ( x , y ) ;
50453: LD_ADDR_VAR 0 15
50457: PUSH
50458: LD_VAR 0 3
50462: PPUSH
50463: LD_VAR 0 4
50467: PPUSH
50468: CALL_OW 546
50472: ST_TO_ADDR
// if hex [ 1 ] then
50473: LD_VAR 0 15
50477: PUSH
50478: LD_INT 1
50480: ARRAY
50481: IFFALSE 50485
// exit ;
50483: GO 50941
// height := hex [ 2 ] ;
50485: LD_ADDR_VAR 0 13
50489: PUSH
50490: LD_VAR 0 15
50494: PUSH
50495: LD_INT 2
50497: ARRAY
50498: ST_TO_ADDR
// for i = 1 to hexes do
50499: LD_ADDR_VAR 0 7
50503: PUSH
50504: DOUBLE
50505: LD_INT 1
50507: DEC
50508: ST_TO_ADDR
50509: LD_VAR 0 12
50513: PUSH
50514: FOR_TO
50515: IFFALSE 50845
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50517: LD_VAR 0 12
50521: PUSH
50522: LD_VAR 0 7
50526: ARRAY
50527: PUSH
50528: LD_INT 1
50530: ARRAY
50531: PPUSH
50532: LD_VAR 0 12
50536: PUSH
50537: LD_VAR 0 7
50541: ARRAY
50542: PUSH
50543: LD_INT 2
50545: ARRAY
50546: PPUSH
50547: CALL_OW 488
50551: NOT
50552: PUSH
50553: LD_VAR 0 12
50557: PUSH
50558: LD_VAR 0 7
50562: ARRAY
50563: PUSH
50564: LD_INT 1
50566: ARRAY
50567: PPUSH
50568: LD_VAR 0 12
50572: PUSH
50573: LD_VAR 0 7
50577: ARRAY
50578: PUSH
50579: LD_INT 2
50581: ARRAY
50582: PPUSH
50583: CALL_OW 428
50587: PUSH
50588: LD_INT 0
50590: GREATER
50591: OR
50592: PUSH
50593: LD_VAR 0 12
50597: PUSH
50598: LD_VAR 0 7
50602: ARRAY
50603: PUSH
50604: LD_INT 1
50606: ARRAY
50607: PPUSH
50608: LD_VAR 0 12
50612: PUSH
50613: LD_VAR 0 7
50617: ARRAY
50618: PUSH
50619: LD_INT 2
50621: ARRAY
50622: PPUSH
50623: CALL_OW 351
50627: OR
50628: IFFALSE 50634
// exit ;
50630: POP
50631: POP
50632: GO 50941
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50634: LD_ADDR_VAR 0 8
50638: PUSH
50639: LD_VAR 0 12
50643: PUSH
50644: LD_VAR 0 7
50648: ARRAY
50649: PUSH
50650: LD_INT 1
50652: ARRAY
50653: PPUSH
50654: LD_VAR 0 12
50658: PUSH
50659: LD_VAR 0 7
50663: ARRAY
50664: PUSH
50665: LD_INT 2
50667: ARRAY
50668: PPUSH
50669: CALL_OW 546
50673: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50674: LD_VAR 0 8
50678: PUSH
50679: LD_INT 1
50681: ARRAY
50682: PUSH
50683: LD_VAR 0 8
50687: PUSH
50688: LD_INT 2
50690: ARRAY
50691: PUSH
50692: LD_VAR 0 13
50696: PUSH
50697: LD_INT 2
50699: PLUS
50700: GREATER
50701: OR
50702: PUSH
50703: LD_VAR 0 8
50707: PUSH
50708: LD_INT 2
50710: ARRAY
50711: PUSH
50712: LD_VAR 0 13
50716: PUSH
50717: LD_INT 2
50719: MINUS
50720: LESS
50721: OR
50722: PUSH
50723: LD_VAR 0 8
50727: PUSH
50728: LD_INT 3
50730: ARRAY
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: LD_INT 8
50737: PUSH
50738: LD_INT 9
50740: PUSH
50741: LD_INT 10
50743: PUSH
50744: LD_INT 11
50746: PUSH
50747: LD_INT 12
50749: PUSH
50750: LD_INT 13
50752: PUSH
50753: LD_INT 16
50755: PUSH
50756: LD_INT 17
50758: PUSH
50759: LD_INT 18
50761: PUSH
50762: LD_INT 19
50764: PUSH
50765: LD_INT 20
50767: PUSH
50768: LD_INT 21
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: IN
50786: NOT
50787: OR
50788: PUSH
50789: LD_VAR 0 8
50793: PUSH
50794: LD_INT 5
50796: ARRAY
50797: NOT
50798: OR
50799: PUSH
50800: LD_VAR 0 8
50804: PUSH
50805: LD_INT 6
50807: ARRAY
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: LD_INT 2
50814: PUSH
50815: LD_INT 7
50817: PUSH
50818: LD_INT 9
50820: PUSH
50821: LD_INT 10
50823: PUSH
50824: LD_INT 11
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: IN
50835: NOT
50836: OR
50837: IFFALSE 50843
// exit ;
50839: POP
50840: POP
50841: GO 50941
// end ;
50843: GO 50514
50845: POP
50846: POP
// side := GetSide ( depot ) ;
50847: LD_ADDR_VAR 0 9
50851: PUSH
50852: LD_VAR 0 1
50856: PPUSH
50857: CALL_OW 255
50861: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50862: LD_VAR 0 9
50866: PPUSH
50867: LD_VAR 0 3
50871: PPUSH
50872: LD_VAR 0 4
50876: PPUSH
50877: LD_INT 20
50879: PPUSH
50880: CALL 43595 0 4
50884: PUSH
50885: LD_INT 4
50887: ARRAY
50888: IFFALSE 50892
// exit ;
50890: GO 50941
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50892: LD_VAR 0 2
50896: PUSH
50897: LD_INT 29
50899: PUSH
50900: LD_INT 30
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: IN
50907: PUSH
50908: LD_VAR 0 3
50912: PPUSH
50913: LD_VAR 0 4
50917: PPUSH
50918: LD_VAR 0 9
50922: PPUSH
50923: CALL_OW 440
50927: NOT
50928: AND
50929: IFFALSE 50933
// exit ;
50931: GO 50941
// result := true ;
50933: LD_ADDR_VAR 0 6
50937: PUSH
50938: LD_INT 1
50940: ST_TO_ADDR
// end ;
50941: LD_VAR 0 6
50945: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50946: LD_INT 0
50948: PPUSH
50949: PPUSH
50950: PPUSH
50951: PPUSH
50952: PPUSH
50953: PPUSH
50954: PPUSH
50955: PPUSH
50956: PPUSH
50957: PPUSH
50958: PPUSH
50959: PPUSH
50960: PPUSH
50961: PPUSH
50962: PPUSH
50963: PPUSH
50964: PPUSH
50965: PPUSH
50966: PPUSH
50967: PPUSH
50968: PPUSH
50969: PPUSH
50970: PPUSH
50971: PPUSH
50972: PPUSH
50973: PPUSH
50974: PPUSH
50975: PPUSH
50976: PPUSH
50977: PPUSH
50978: PPUSH
50979: PPUSH
50980: PPUSH
50981: PPUSH
50982: PPUSH
50983: PPUSH
50984: PPUSH
50985: PPUSH
50986: PPUSH
50987: PPUSH
50988: PPUSH
50989: PPUSH
50990: PPUSH
50991: PPUSH
50992: PPUSH
50993: PPUSH
50994: PPUSH
50995: PPUSH
50996: PPUSH
50997: PPUSH
50998: PPUSH
50999: PPUSH
51000: PPUSH
51001: PPUSH
51002: PPUSH
51003: PPUSH
51004: PPUSH
51005: PPUSH
// result = [ ] ;
51006: LD_ADDR_VAR 0 7
51010: PUSH
51011: EMPTY
51012: ST_TO_ADDR
// temp_list = [ ] ;
51013: LD_ADDR_VAR 0 9
51017: PUSH
51018: EMPTY
51019: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51020: LD_VAR 0 4
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: LD_INT 1
51030: PUSH
51031: LD_INT 2
51033: PUSH
51034: LD_INT 3
51036: PUSH
51037: LD_INT 4
51039: PUSH
51040: LD_INT 5
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: IN
51051: NOT
51052: PUSH
51053: LD_VAR 0 1
51057: PUSH
51058: LD_INT 0
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: IN
51068: PUSH
51069: LD_VAR 0 5
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: LD_INT 2
51079: PUSH
51080: LD_INT 3
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: LIST
51087: IN
51088: NOT
51089: AND
51090: OR
51091: IFFALSE 51095
// exit ;
51093: GO 69486
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51095: LD_VAR 0 1
51099: PUSH
51100: LD_INT 6
51102: PUSH
51103: LD_INT 7
51105: PUSH
51106: LD_INT 8
51108: PUSH
51109: LD_INT 13
51111: PUSH
51112: LD_INT 12
51114: PUSH
51115: LD_INT 15
51117: PUSH
51118: LD_INT 11
51120: PUSH
51121: LD_INT 14
51123: PUSH
51124: LD_INT 10
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: IN
51138: IFFALSE 51148
// btype = b_lab ;
51140: LD_ADDR_VAR 0 1
51144: PUSH
51145: LD_INT 6
51147: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51148: LD_VAR 0 6
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: LD_INT 2
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: LIST
51166: IN
51167: NOT
51168: PUSH
51169: LD_VAR 0 1
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: LD_INT 2
51182: PUSH
51183: LD_INT 3
51185: PUSH
51186: LD_INT 6
51188: PUSH
51189: LD_INT 36
51191: PUSH
51192: LD_INT 4
51194: PUSH
51195: LD_INT 5
51197: PUSH
51198: LD_INT 31
51200: PUSH
51201: LD_INT 32
51203: PUSH
51204: LD_INT 33
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: IN
51220: NOT
51221: PUSH
51222: LD_VAR 0 6
51226: PUSH
51227: LD_INT 1
51229: EQUAL
51230: AND
51231: OR
51232: PUSH
51233: LD_VAR 0 1
51237: PUSH
51238: LD_INT 2
51240: PUSH
51241: LD_INT 3
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: IN
51248: NOT
51249: PUSH
51250: LD_VAR 0 6
51254: PUSH
51255: LD_INT 2
51257: EQUAL
51258: AND
51259: OR
51260: IFFALSE 51270
// mode = 0 ;
51262: LD_ADDR_VAR 0 6
51266: PUSH
51267: LD_INT 0
51269: ST_TO_ADDR
// case mode of 0 :
51270: LD_VAR 0 6
51274: PUSH
51275: LD_INT 0
51277: DOUBLE
51278: EQUAL
51279: IFTRUE 51283
51281: GO 62736
51283: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51284: LD_ADDR_VAR 0 11
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 1
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 0
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: NEG
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 1
51353: NEG
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: LD_INT 2
51369: NEG
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: LD_INT 2
51380: NEG
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: LD_INT 1
51391: NEG
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: LD_INT 2
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: LD_INT 2
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: LD_INT 3
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 0
51440: PUSH
51441: LD_INT 3
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: LD_INT 2
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51477: LD_ADDR_VAR 0 12
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: LD_INT 1
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 0
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: LD_INT 1
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: LD_INT 1
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 2
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 2
51579: PUSH
51580: LD_INT 1
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: LD_INT 1
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 2
51600: NEG
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 2
51611: NEG
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 2
51623: NEG
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 3
51634: NEG
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 3
51645: NEG
51646: PUSH
51647: LD_INT 1
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51673: LD_ADDR_VAR 0 13
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: LD_INT 1
51693: NEG
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 1
51701: PUSH
51702: LD_INT 0
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: LD_INT 1
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 1
51742: NEG
51743: PUSH
51744: LD_INT 1
51746: NEG
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 1
51754: NEG
51755: PUSH
51756: LD_INT 2
51758: NEG
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 2
51766: PUSH
51767: LD_INT 1
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 2
51776: PUSH
51777: LD_INT 2
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: PUSH
51787: LD_INT 2
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 2
51796: NEG
51797: PUSH
51798: LD_INT 1
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 2
51808: NEG
51809: PUSH
51810: LD_INT 2
51812: NEG
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 2
51820: NEG
51821: PUSH
51822: LD_INT 3
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 3
51832: NEG
51833: PUSH
51834: LD_INT 2
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 3
51844: NEG
51845: PUSH
51846: LD_INT 3
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51872: LD_ADDR_VAR 0 14
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 1
51900: PUSH
51901: LD_INT 0
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 1
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: LD_INT 1
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 1
51930: NEG
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 1
51953: NEG
51954: PUSH
51955: LD_INT 2
51957: NEG
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: LD_INT 2
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: LD_INT 1
51979: NEG
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: LD_INT 2
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: LD_INT 2
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: NEG
52008: PUSH
52009: LD_INT 1
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: NEG
52019: PUSH
52020: LD_INT 3
52022: NEG
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: LD_INT 3
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: LD_INT 2
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52068: LD_ADDR_VAR 0 15
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: LD_INT 1
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: LD_INT 1
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 2
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 2
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: NEG
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 2
52191: NEG
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 2
52202: NEG
52203: PUSH
52204: LD_INT 1
52206: NEG
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 2
52214: PUSH
52215: LD_INT 1
52217: NEG
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 3
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 3
52235: PUSH
52236: LD_INT 1
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52261: LD_ADDR_VAR 0 16
52265: PUSH
52266: LD_INT 0
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 0
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 1
52289: PUSH
52290: LD_INT 0
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 1
52299: PUSH
52300: LD_INT 1
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: LD_INT 1
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: LD_INT 0
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 1
52330: NEG
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 1
52342: NEG
52343: PUSH
52344: LD_INT 2
52346: NEG
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 2
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 2
52364: PUSH
52365: LD_INT 2
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: LD_INT 2
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 2
52384: NEG
52385: PUSH
52386: LD_INT 1
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 2
52396: NEG
52397: PUSH
52398: LD_INT 2
52400: NEG
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 3
52408: PUSH
52409: LD_INT 2
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 3
52418: PUSH
52419: LD_INT 3
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 2
52428: PUSH
52429: LD_INT 3
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52454: LD_ADDR_VAR 0 17
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: LD_INT 1
52474: NEG
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 1
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: LD_INT 1
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: NEG
52513: PUSH
52514: LD_INT 0
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 1
52523: NEG
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 1
52535: NEG
52536: PUSH
52537: LD_INT 2
52539: NEG
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: LD_INT 2
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: PUSH
52559: LD_INT 1
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 2
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 2
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 2
52589: PUSH
52590: LD_INT 2
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 1
52599: PUSH
52600: LD_INT 2
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: LD_INT 2
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: LD_INT 1
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 2
52630: NEG
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 2
52641: NEG
52642: PUSH
52643: LD_INT 1
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 2
52653: NEG
52654: PUSH
52655: LD_INT 2
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52684: LD_ADDR_VAR 0 18
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: LD_INT 1
52704: NEG
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 1
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 1
52722: PUSH
52723: LD_INT 1
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: LD_INT 1
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 1
52742: NEG
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 1
52753: NEG
52754: PUSH
52755: LD_INT 1
52757: NEG
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: NEG
52766: PUSH
52767: LD_INT 2
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: LD_INT 2
52780: NEG
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: LD_INT 1
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 2
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 2
52809: PUSH
52810: LD_INT 1
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 2
52819: PUSH
52820: LD_INT 2
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: LD_INT 2
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: LD_INT 2
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 1
52849: NEG
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 2
52860: NEG
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 2
52871: NEG
52872: PUSH
52873: LD_INT 1
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 2
52883: NEG
52884: PUSH
52885: LD_INT 2
52887: NEG
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52914: LD_ADDR_VAR 0 19
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: LD_INT 1
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: LD_INT 0
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: NEG
52996: PUSH
52997: LD_INT 2
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: LD_INT 2
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: LD_INT 1
53021: NEG
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 2
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 2
53039: PUSH
53040: LD_INT 1
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 2
53049: PUSH
53050: LD_INT 2
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: LD_INT 2
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: LD_INT 2
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 1
53079: NEG
53080: PUSH
53081: LD_INT 1
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 2
53090: NEG
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 2
53101: NEG
53102: PUSH
53103: LD_INT 1
53105: NEG
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 2
53113: NEG
53114: PUSH
53115: LD_INT 2
53117: NEG
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53144: LD_ADDR_VAR 0 20
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 0
53161: PUSH
53162: LD_INT 1
53164: NEG
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 1
53182: PUSH
53183: LD_INT 1
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: LD_INT 1
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 1
53213: NEG
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 1
53225: NEG
53226: PUSH
53227: LD_INT 2
53229: NEG
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: LD_INT 2
53240: NEG
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: LD_INT 1
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 2
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 2
53269: PUSH
53270: LD_INT 1
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 2
53279: PUSH
53280: LD_INT 2
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: LD_INT 2
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: LD_INT 2
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 1
53309: NEG
53310: PUSH
53311: LD_INT 1
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 2
53320: NEG
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 2
53331: NEG
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 2
53343: NEG
53344: PUSH
53345: LD_INT 2
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53374: LD_ADDR_VAR 0 21
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: LD_INT 0
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: LD_INT 1
53394: NEG
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 0
53422: PUSH
53423: LD_INT 1
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 1
53432: NEG
53433: PUSH
53434: LD_INT 0
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 1
53443: NEG
53444: PUSH
53445: LD_INT 1
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 1
53455: NEG
53456: PUSH
53457: LD_INT 2
53459: NEG
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: LD_INT 2
53470: NEG
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: LD_INT 1
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 2
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 2
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 2
53509: PUSH
53510: LD_INT 2
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 1
53519: PUSH
53520: LD_INT 2
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 0
53529: PUSH
53530: LD_INT 2
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 1
53539: NEG
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 2
53550: NEG
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 2
53561: NEG
53562: PUSH
53563: LD_INT 1
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 2
53573: NEG
53574: PUSH
53575: LD_INT 2
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53604: LD_ADDR_VAR 0 22
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: LD_INT 0
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: LD_INT 1
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 1
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 0
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 1
53662: NEG
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 1
53673: NEG
53674: PUSH
53675: LD_INT 1
53677: NEG
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 1
53685: NEG
53686: PUSH
53687: LD_INT 2
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: LD_INT 2
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: LD_INT 1
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 2
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 2
53729: PUSH
53730: LD_INT 1
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 2
53739: PUSH
53740: LD_INT 2
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: LD_INT 2
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 0
53759: PUSH
53760: LD_INT 2
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 1
53769: NEG
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 2
53780: NEG
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 2
53791: NEG
53792: PUSH
53793: LD_INT 1
53795: NEG
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 2
53803: NEG
53804: PUSH
53805: LD_INT 2
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53834: LD_ADDR_VAR 0 23
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: LD_INT 0
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: LD_INT 1
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 1
53872: PUSH
53873: LD_INT 1
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 0
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: NEG
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 1
53903: NEG
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: NEG
53916: PUSH
53917: LD_INT 2
53919: NEG
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: LD_INT 2
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: LD_INT 1
53941: NEG
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 2
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 2
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 2
53969: PUSH
53970: LD_INT 2
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: LD_INT 2
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: LD_INT 2
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 1
53999: NEG
54000: PUSH
54001: LD_INT 1
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 2
54010: NEG
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 2
54021: NEG
54022: PUSH
54023: LD_INT 1
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 2
54033: NEG
54034: PUSH
54035: LD_INT 2
54037: NEG
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: LD_INT 3
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: LD_INT 3
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: LD_INT 2
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 2
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54114: LD_ADDR_VAR 0 24
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: LD_INT 0
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: LD_INT 1
54134: NEG
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 1
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 0
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: NEG
54184: PUSH
54185: LD_INT 1
54187: NEG
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: LD_INT 2
54199: NEG
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: LD_INT 2
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: LD_INT 1
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 2
54229: PUSH
54230: LD_INT 0
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 2
54239: PUSH
54240: LD_INT 1
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 2
54249: PUSH
54250: LD_INT 2
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: LD_INT 2
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: LD_INT 2
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: LD_INT 1
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 2
54290: NEG
54291: PUSH
54292: LD_INT 0
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 2
54301: NEG
54302: PUSH
54303: LD_INT 1
54305: NEG
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 2
54313: NEG
54314: PUSH
54315: LD_INT 2
54317: NEG
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 1
54325: PUSH
54326: LD_INT 2
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 2
54336: PUSH
54337: LD_INT 1
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 3
54347: PUSH
54348: LD_INT 1
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 3
54357: PUSH
54358: LD_INT 2
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54390: LD_ADDR_VAR 0 25
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: LD_INT 1
54410: NEG
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 1
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: LD_INT 1
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: NEG
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 1
54459: NEG
54460: PUSH
54461: LD_INT 1
54463: NEG
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: PUSH
54473: LD_INT 2
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: LD_INT 2
54486: NEG
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 2
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 2
54515: PUSH
54516: LD_INT 1
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 2
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 1
54535: PUSH
54536: LD_INT 2
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: LD_INT 2
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: NEG
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 2
54566: NEG
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 2
54577: NEG
54578: PUSH
54579: LD_INT 1
54581: NEG
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 2
54589: NEG
54590: PUSH
54591: LD_INT 2
54593: NEG
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 3
54601: PUSH
54602: LD_INT 1
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 3
54611: PUSH
54612: LD_INT 2
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 2
54621: PUSH
54622: LD_INT 3
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: LD_INT 3
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54664: LD_ADDR_VAR 0 26
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: LD_INT 0
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: PUSH
54703: LD_INT 1
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 1
54722: NEG
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: LD_INT 1
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: LD_INT 2
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: LD_INT 2
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 2
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 2
54789: PUSH
54790: LD_INT 1
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 2
54799: PUSH
54800: LD_INT 2
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 0
54819: PUSH
54820: LD_INT 2
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 1
54829: NEG
54830: PUSH
54831: LD_INT 1
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 2
54840: NEG
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 2
54851: NEG
54852: PUSH
54853: LD_INT 1
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 2
54863: NEG
54864: PUSH
54865: LD_INT 2
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 2
54875: PUSH
54876: LD_INT 3
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: LD_INT 3
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 1
54895: NEG
54896: PUSH
54897: LD_INT 2
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 2
54906: NEG
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54940: LD_ADDR_VAR 0 27
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: LD_INT 1
54960: NEG
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: LD_INT 1
55013: NEG
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: LD_INT 2
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: LD_INT 2
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 1
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 2
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 2
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 2
55075: PUSH
55076: LD_INT 2
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: LD_INT 2
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: LD_INT 2
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: LD_INT 1
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 2
55116: NEG
55117: PUSH
55118: LD_INT 0
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 2
55127: NEG
55128: PUSH
55129: LD_INT 1
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 2
55139: NEG
55140: PUSH
55141: LD_INT 2
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: LD_INT 2
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 2
55162: NEG
55163: PUSH
55164: LD_INT 1
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 3
55173: NEG
55174: PUSH
55175: LD_INT 1
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 3
55185: NEG
55186: PUSH
55187: LD_INT 2
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55220: LD_ADDR_VAR 0 28
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: LD_INT 0
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 0
55237: PUSH
55238: LD_INT 1
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 1
55248: PUSH
55249: LD_INT 0
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: LD_INT 1
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: NEG
55290: PUSH
55291: LD_INT 1
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: NEG
55302: PUSH
55303: LD_INT 2
55305: NEG
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: LD_INT 2
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 1
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 2
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 2
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 2
55355: PUSH
55356: LD_INT 2
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: LD_INT 2
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 0
55375: PUSH
55376: LD_INT 2
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 1
55385: NEG
55386: PUSH
55387: LD_INT 1
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 2
55396: NEG
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 2
55407: NEG
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 2
55419: NEG
55420: PUSH
55421: LD_INT 2
55423: NEG
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 2
55431: NEG
55432: PUSH
55433: LD_INT 3
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: LD_INT 3
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 3
55455: NEG
55456: PUSH
55457: LD_INT 1
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 3
55467: NEG
55468: PUSH
55469: LD_INT 2
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55502: LD_ADDR_VAR 0 29
55506: PUSH
55507: LD_INT 0
55509: PUSH
55510: LD_INT 0
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 0
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 1
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 1
55540: PUSH
55541: LD_INT 1
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 0
55550: PUSH
55551: LD_INT 1
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 1
55560: NEG
55561: PUSH
55562: LD_INT 0
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 1
55571: NEG
55572: PUSH
55573: LD_INT 1
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 1
55583: NEG
55584: PUSH
55585: LD_INT 2
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: LD_INT 2
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 1
55606: PUSH
55607: LD_INT 1
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 2
55617: PUSH
55618: LD_INT 0
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 2
55627: PUSH
55628: LD_INT 1
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 1
55637: PUSH
55638: LD_INT 2
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: LD_INT 2
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 1
55657: NEG
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 2
55668: NEG
55669: PUSH
55670: LD_INT 1
55672: NEG
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 2
55680: NEG
55681: PUSH
55682: LD_INT 2
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 2
55692: NEG
55693: PUSH
55694: LD_INT 3
55696: NEG
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 2
55704: PUSH
55705: LD_INT 1
55707: NEG
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 3
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: LD_INT 3
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 1
55735: NEG
55736: PUSH
55737: LD_INT 2
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 3
55746: NEG
55747: PUSH
55748: LD_INT 2
55750: NEG
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55781: LD_ADDR_VAR 0 30
55785: PUSH
55786: LD_INT 0
55788: PUSH
55789: LD_INT 0
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: LD_INT 1
55801: NEG
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 1
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 1
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 1
55839: NEG
55840: PUSH
55841: LD_INT 0
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 1
55850: NEG
55851: PUSH
55852: LD_INT 1
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 1
55862: NEG
55863: PUSH
55864: LD_INT 2
55866: NEG
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 0
55874: PUSH
55875: LD_INT 2
55877: NEG
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 1
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 2
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 2
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 2
55916: PUSH
55917: LD_INT 2
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 1
55926: PUSH
55927: LD_INT 2
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 2
55947: NEG
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 2
55958: NEG
55959: PUSH
55960: LD_INT 1
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 1
55970: NEG
55971: PUSH
55972: LD_INT 3
55974: NEG
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: LD_INT 2
55985: NEG
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 3
55993: PUSH
55994: LD_INT 2
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 2
56003: PUSH
56004: LD_INT 3
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 2
56013: NEG
56014: PUSH
56015: LD_INT 1
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 3
56024: NEG
56025: PUSH
56026: LD_INT 1
56028: NEG
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56059: LD_ADDR_VAR 0 31
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 1
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: LD_INT 1
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 1
56117: NEG
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: NEG
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 1
56140: NEG
56141: PUSH
56142: LD_INT 2
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 2
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 2
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 2
56183: PUSH
56184: LD_INT 2
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 1
56193: PUSH
56194: LD_INT 2
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: LD_INT 2
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 1
56213: NEG
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 2
56224: NEG
56225: PUSH
56226: LD_INT 1
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 2
56236: NEG
56237: PUSH
56238: LD_INT 2
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 2
56248: NEG
56249: PUSH
56250: LD_INT 3
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 2
56260: PUSH
56261: LD_INT 1
56263: NEG
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 3
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 1
56281: PUSH
56282: LD_INT 3
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: LD_INT 2
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 3
56302: NEG
56303: PUSH
56304: LD_INT 2
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56337: LD_ADDR_VAR 0 32
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: LD_INT 1
56357: NEG
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 1
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: LD_INT 1
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: LD_INT 0
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: NEG
56407: PUSH
56408: LD_INT 1
56410: NEG
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 1
56418: NEG
56419: PUSH
56420: LD_INT 2
56422: NEG
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 0
56430: PUSH
56431: LD_INT 2
56433: NEG
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 1
56441: PUSH
56442: LD_INT 1
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 2
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 2
56462: PUSH
56463: LD_INT 2
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 1
56472: PUSH
56473: LD_INT 2
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: LD_INT 2
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 1
56492: NEG
56493: PUSH
56494: LD_INT 1
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 2
56503: NEG
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 2
56514: NEG
56515: PUSH
56516: LD_INT 1
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 1
56526: NEG
56527: PUSH
56528: LD_INT 3
56530: NEG
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: PUSH
56539: LD_INT 2
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 3
56549: PUSH
56550: LD_INT 2
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 2
56559: PUSH
56560: LD_INT 3
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 2
56569: NEG
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 3
56580: NEG
56581: PUSH
56582: LD_INT 1
56584: NEG
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56615: LD_ADDR_VAR 0 33
56619: PUSH
56620: LD_INT 0
56622: PUSH
56623: LD_INT 0
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: LD_INT 1
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 1
56653: PUSH
56654: LD_INT 1
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 1
56673: NEG
56674: PUSH
56675: LD_INT 0
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: NEG
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 1
56696: NEG
56697: PUSH
56698: LD_INT 2
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 1
56708: PUSH
56709: LD_INT 1
56711: NEG
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 2
56719: PUSH
56720: LD_INT 0
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 2
56729: PUSH
56730: LD_INT 1
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 1
56739: PUSH
56740: LD_INT 2
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 0
56749: PUSH
56750: LD_INT 2
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 1
56759: NEG
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 2
56770: NEG
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 2
56781: NEG
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 2
56793: NEG
56794: PUSH
56795: LD_INT 2
56797: NEG
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 2
56805: NEG
56806: PUSH
56807: LD_INT 3
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 2
56817: PUSH
56818: LD_INT 1
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 3
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 1
56838: PUSH
56839: LD_INT 3
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: LD_INT 2
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 3
56859: NEG
56860: PUSH
56861: LD_INT 2
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56894: LD_ADDR_VAR 0 34
56898: PUSH
56899: LD_INT 0
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 0
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: LD_INT 1
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 1
56952: NEG
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: LD_INT 1
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: LD_INT 2
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: LD_INT 2
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 2
57009: PUSH
57010: LD_INT 1
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 2
57019: PUSH
57020: LD_INT 2
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 1
57029: PUSH
57030: LD_INT 2
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 1
57039: NEG
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 2
57050: NEG
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 2
57061: NEG
57062: PUSH
57063: LD_INT 1
57065: NEG
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 2
57073: NEG
57074: PUSH
57075: LD_INT 2
57077: NEG
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: LD_INT 3
57089: NEG
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 1
57097: PUSH
57098: LD_INT 2
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 3
57108: PUSH
57109: LD_INT 2
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 2
57118: PUSH
57119: LD_INT 3
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 2
57128: NEG
57129: PUSH
57130: LD_INT 1
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 3
57139: NEG
57140: PUSH
57141: LD_INT 1
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57174: LD_ADDR_VAR 0 35
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: LD_INT 0
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 0
57191: PUSH
57192: LD_INT 1
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: LD_INT 1
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 0
57222: PUSH
57223: LD_INT 1
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 1
57243: NEG
57244: PUSH
57245: LD_INT 1
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 2
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 2
57265: NEG
57266: PUSH
57267: LD_INT 1
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57286: LD_ADDR_VAR 0 36
57290: PUSH
57291: LD_INT 0
57293: PUSH
57294: LD_INT 0
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 0
57303: PUSH
57304: LD_INT 1
57306: NEG
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 1
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 1
57324: PUSH
57325: LD_INT 1
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 0
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 1
57344: NEG
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 1
57355: NEG
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 1
57367: NEG
57368: PUSH
57369: LD_INT 2
57371: NEG
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 1
57379: PUSH
57380: LD_INT 2
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57398: LD_ADDR_VAR 0 37
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 0
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: LD_INT 0
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: LD_INT 1
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 1
57467: NEG
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 1
57479: PUSH
57480: LD_INT 1
57482: NEG
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: LD_INT 1
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57510: LD_ADDR_VAR 0 38
57514: PUSH
57515: LD_INT 0
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 0
57527: PUSH
57528: LD_INT 1
57530: NEG
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: LD_INT 0
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: NEG
57580: PUSH
57581: LD_INT 1
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 2
57591: PUSH
57592: LD_INT 1
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57622: LD_ADDR_VAR 0 39
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: LD_INT 1
57642: NEG
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: LD_INT 0
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 1
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 0
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: NEG
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 1
57691: NEG
57692: PUSH
57693: LD_INT 1
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 1
57703: NEG
57704: PUSH
57705: LD_INT 2
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 1
57715: PUSH
57716: LD_INT 2
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57734: LD_ADDR_VAR 0 40
57738: PUSH
57739: LD_INT 0
57741: PUSH
57742: LD_INT 0
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 0
57751: PUSH
57752: LD_INT 1
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: PUSH
57763: LD_INT 0
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: LD_INT 1
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 1
57792: NEG
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 1
57803: NEG
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: PUSH
57816: LD_INT 1
57818: NEG
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 1
57826: NEG
57827: PUSH
57828: LD_INT 1
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57846: LD_ADDR_VAR 0 41
57850: PUSH
57851: LD_INT 0
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 0
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 1
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 1
57884: PUSH
57885: LD_INT 1
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 0
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 1
57904: NEG
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 1
57915: NEG
57916: PUSH
57917: LD_INT 1
57919: NEG
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: LD_INT 2
57931: NEG
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 1
57939: PUSH
57940: LD_INT 1
57942: NEG
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 2
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 2
57960: PUSH
57961: LD_INT 1
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 2
57970: PUSH
57971: LD_INT 2
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 1
57980: PUSH
57981: LD_INT 2
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 1
57990: NEG
57991: PUSH
57992: LD_INT 1
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 2
58001: NEG
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 2
58012: NEG
58013: PUSH
58014: LD_INT 1
58016: NEG
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 2
58024: NEG
58025: PUSH
58026: LD_INT 2
58028: NEG
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 2
58036: NEG
58037: PUSH
58038: LD_INT 3
58040: NEG
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 2
58048: PUSH
58049: LD_INT 1
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 3
58059: PUSH
58060: LD_INT 0
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 3
58069: PUSH
58070: LD_INT 1
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 3
58079: PUSH
58080: LD_INT 2
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 3
58089: PUSH
58090: LD_INT 3
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 2
58099: PUSH
58100: LD_INT 3
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 2
58109: NEG
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 3
58120: NEG
58121: PUSH
58122: LD_INT 0
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 3
58131: NEG
58132: PUSH
58133: LD_INT 1
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 3
58143: NEG
58144: PUSH
58145: LD_INT 2
58147: NEG
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 3
58155: NEG
58156: PUSH
58157: LD_INT 3
58159: NEG
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58196: LD_ADDR_VAR 0 42
58200: PUSH
58201: LD_INT 0
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 0
58213: PUSH
58214: LD_INT 1
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 1
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 1
58234: PUSH
58235: LD_INT 1
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: LD_INT 1
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 1
58254: NEG
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 1
58265: NEG
58266: PUSH
58267: LD_INT 1
58269: NEG
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: PUSH
58279: LD_INT 2
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: LD_INT 2
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: LD_INT 1
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 2
58311: PUSH
58312: LD_INT 1
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 2
58321: PUSH
58322: LD_INT 2
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 1
58331: PUSH
58332: LD_INT 2
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: LD_INT 2
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 1
58351: NEG
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 2
58362: NEG
58363: PUSH
58364: LD_INT 1
58366: NEG
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 2
58374: NEG
58375: PUSH
58376: LD_INT 2
58378: NEG
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 2
58386: NEG
58387: PUSH
58388: LD_INT 3
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 1
58398: NEG
58399: PUSH
58400: LD_INT 3
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 0
58410: PUSH
58411: LD_INT 3
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: PUSH
58422: LD_INT 2
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 3
58432: PUSH
58433: LD_INT 2
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 3
58442: PUSH
58443: LD_INT 3
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 2
58452: PUSH
58453: LD_INT 3
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 1
58462: PUSH
58463: LD_INT 3
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 0
58472: PUSH
58473: LD_INT 3
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 1
58482: NEG
58483: PUSH
58484: LD_INT 2
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 3
58493: NEG
58494: PUSH
58495: LD_INT 2
58497: NEG
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 3
58505: NEG
58506: PUSH
58507: LD_INT 3
58509: NEG
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58546: LD_ADDR_VAR 0 43
58550: PUSH
58551: LD_INT 0
58553: PUSH
58554: LD_INT 0
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 0
58563: PUSH
58564: LD_INT 1
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 1
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 1
58584: PUSH
58585: LD_INT 1
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 0
58594: PUSH
58595: LD_INT 1
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 1
58604: NEG
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 1
58615: NEG
58616: PUSH
58617: LD_INT 1
58619: NEG
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 1
58627: NEG
58628: PUSH
58629: LD_INT 2
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 0
58639: PUSH
58640: LD_INT 2
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 1
58650: PUSH
58651: LD_INT 1
58653: NEG
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 2
58661: PUSH
58662: LD_INT 0
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 2
58671: PUSH
58672: LD_INT 1
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 1
58681: PUSH
58682: LD_INT 2
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: LD_INT 2
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: NEG
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 2
58712: NEG
58713: PUSH
58714: LD_INT 0
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 2
58723: NEG
58724: PUSH
58725: LD_INT 1
58727: NEG
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: LD_INT 3
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 0
58747: PUSH
58748: LD_INT 3
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 1
58758: PUSH
58759: LD_INT 2
58761: NEG
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 2
58769: PUSH
58770: LD_INT 1
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 3
58780: PUSH
58781: LD_INT 0
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 3
58790: PUSH
58791: LD_INT 1
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 1
58800: PUSH
58801: LD_INT 3
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 0
58810: PUSH
58811: LD_INT 3
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: NEG
58821: PUSH
58822: LD_INT 2
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 2
58831: NEG
58832: PUSH
58833: LD_INT 1
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 3
58842: NEG
58843: PUSH
58844: LD_INT 0
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 3
58853: NEG
58854: PUSH
58855: LD_INT 1
58857: NEG
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58894: LD_ADDR_VAR 0 44
58898: PUSH
58899: LD_INT 0
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 0
58911: PUSH
58912: LD_INT 1
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 1
58922: PUSH
58923: LD_INT 0
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 1
58932: PUSH
58933: LD_INT 1
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 0
58942: PUSH
58943: LD_INT 1
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 1
58952: NEG
58953: PUSH
58954: LD_INT 0
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 1
58963: NEG
58964: PUSH
58965: LD_INT 1
58967: NEG
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 1
58975: NEG
58976: PUSH
58977: LD_INT 2
58979: NEG
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 1
58987: PUSH
58988: LD_INT 1
58990: NEG
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 2
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 2
59008: PUSH
59009: LD_INT 1
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 2
59018: PUSH
59019: LD_INT 2
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 1
59028: PUSH
59029: LD_INT 2
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 1
59038: NEG
59039: PUSH
59040: LD_INT 1
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 2
59049: NEG
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 2
59060: NEG
59061: PUSH
59062: LD_INT 1
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 2
59072: NEG
59073: PUSH
59074: LD_INT 2
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 2
59084: NEG
59085: PUSH
59086: LD_INT 3
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 2
59096: PUSH
59097: LD_INT 1
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 3
59107: PUSH
59108: LD_INT 0
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 3
59117: PUSH
59118: LD_INT 1
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 3
59127: PUSH
59128: LD_INT 2
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 3
59137: PUSH
59138: LD_INT 3
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 2
59147: PUSH
59148: LD_INT 3
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 2
59157: NEG
59158: PUSH
59159: LD_INT 1
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 3
59168: NEG
59169: PUSH
59170: LD_INT 0
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 3
59179: NEG
59180: PUSH
59181: LD_INT 1
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 3
59191: NEG
59192: PUSH
59193: LD_INT 2
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 3
59203: NEG
59204: PUSH
59205: LD_INT 3
59207: NEG
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59244: LD_ADDR_VAR 0 45
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: LD_INT 0
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: LD_INT 1
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 1
59272: PUSH
59273: LD_INT 0
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 1
59282: PUSH
59283: LD_INT 1
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 0
59292: PUSH
59293: LD_INT 1
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 1
59302: NEG
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 1
59313: NEG
59314: PUSH
59315: LD_INT 1
59317: NEG
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 1
59325: NEG
59326: PUSH
59327: LD_INT 2
59329: NEG
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: LD_INT 2
59340: NEG
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: LD_INT 1
59351: NEG
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 2
59359: PUSH
59360: LD_INT 1
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 2
59369: PUSH
59370: LD_INT 2
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 1
59379: PUSH
59380: LD_INT 2
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 0
59389: PUSH
59390: LD_INT 2
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 1
59399: NEG
59400: PUSH
59401: LD_INT 1
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 2
59410: NEG
59411: PUSH
59412: LD_INT 1
59414: NEG
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 2
59422: NEG
59423: PUSH
59424: LD_INT 2
59426: NEG
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 2
59434: NEG
59435: PUSH
59436: LD_INT 3
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 1
59446: NEG
59447: PUSH
59448: LD_INT 3
59450: NEG
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 0
59458: PUSH
59459: LD_INT 3
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 1
59469: PUSH
59470: LD_INT 2
59472: NEG
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 3
59480: PUSH
59481: LD_INT 2
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 3
59490: PUSH
59491: LD_INT 3
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 2
59500: PUSH
59501: LD_INT 3
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 1
59510: PUSH
59511: LD_INT 3
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: LD_INT 3
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 1
59530: NEG
59531: PUSH
59532: LD_INT 2
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 3
59541: NEG
59542: PUSH
59543: LD_INT 2
59545: NEG
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 3
59553: NEG
59554: PUSH
59555: LD_INT 3
59557: NEG
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59594: LD_ADDR_VAR 0 46
59598: PUSH
59599: LD_INT 0
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 0
59611: PUSH
59612: LD_INT 1
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 1
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 1
59632: PUSH
59633: LD_INT 1
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: LD_INT 1
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 1
59652: NEG
59653: PUSH
59654: LD_INT 0
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 1
59663: NEG
59664: PUSH
59665: LD_INT 1
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 1
59675: NEG
59676: PUSH
59677: LD_INT 2
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: LD_INT 2
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 1
59698: PUSH
59699: LD_INT 1
59701: NEG
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 2
59709: PUSH
59710: LD_INT 0
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 2
59719: PUSH
59720: LD_INT 1
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 1
59729: PUSH
59730: LD_INT 2
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 0
59739: PUSH
59740: LD_INT 2
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 1
59749: NEG
59750: PUSH
59751: LD_INT 1
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 2
59760: NEG
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 2
59771: NEG
59772: PUSH
59773: LD_INT 1
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: LD_INT 3
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: LD_INT 3
59798: NEG
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 1
59806: PUSH
59807: LD_INT 2
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 2
59817: PUSH
59818: LD_INT 1
59820: NEG
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 3
59828: PUSH
59829: LD_INT 0
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 3
59838: PUSH
59839: LD_INT 1
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 1
59848: PUSH
59849: LD_INT 3
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 0
59858: PUSH
59859: LD_INT 3
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 1
59868: NEG
59869: PUSH
59870: LD_INT 2
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 2
59879: NEG
59880: PUSH
59881: LD_INT 1
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 3
59890: NEG
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 3
59901: NEG
59902: PUSH
59903: LD_INT 1
59905: NEG
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59942: LD_ADDR_VAR 0 47
59946: PUSH
59947: LD_INT 0
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 0
59959: PUSH
59960: LD_INT 1
59962: NEG
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 1
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 1
59980: PUSH
59981: LD_INT 1
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: LD_INT 1
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: NEG
60001: PUSH
60002: LD_INT 0
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 1
60011: NEG
60012: PUSH
60013: LD_INT 1
60015: NEG
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 1
60023: NEG
60024: PUSH
60025: LD_INT 2
60027: NEG
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 0
60035: PUSH
60036: LD_INT 2
60038: NEG
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 1
60046: PUSH
60047: LD_INT 1
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 2
60057: NEG
60058: PUSH
60059: LD_INT 1
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 2
60069: NEG
60070: PUSH
60071: LD_INT 2
60073: NEG
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60093: LD_ADDR_VAR 0 48
60097: PUSH
60098: LD_INT 0
60100: PUSH
60101: LD_INT 0
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 0
60110: PUSH
60111: LD_INT 1
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 1
60121: PUSH
60122: LD_INT 0
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 1
60131: PUSH
60132: LD_INT 1
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 0
60141: PUSH
60142: LD_INT 1
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 1
60151: NEG
60152: PUSH
60153: LD_INT 0
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 1
60162: NEG
60163: PUSH
60164: LD_INT 1
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 1
60174: NEG
60175: PUSH
60176: LD_INT 2
60178: NEG
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 0
60186: PUSH
60187: LD_INT 2
60189: NEG
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 1
60197: PUSH
60198: LD_INT 1
60200: NEG
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 2
60208: PUSH
60209: LD_INT 0
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 2
60218: PUSH
60219: LD_INT 1
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60240: LD_ADDR_VAR 0 49
60244: PUSH
60245: LD_INT 0
60247: PUSH
60248: LD_INT 0
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 0
60257: PUSH
60258: LD_INT 1
60260: NEG
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 1
60268: PUSH
60269: LD_INT 0
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 1
60278: PUSH
60279: LD_INT 1
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 0
60288: PUSH
60289: LD_INT 1
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 1
60298: NEG
60299: PUSH
60300: LD_INT 0
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 1
60309: NEG
60310: PUSH
60311: LD_INT 1
60313: NEG
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 1
60321: PUSH
60322: LD_INT 1
60324: NEG
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 2
60332: PUSH
60333: LD_INT 0
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 2
60342: PUSH
60343: LD_INT 1
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 2
60352: PUSH
60353: LD_INT 2
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 1
60362: PUSH
60363: LD_INT 2
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60384: LD_ADDR_VAR 0 50
60388: PUSH
60389: LD_INT 0
60391: PUSH
60392: LD_INT 0
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 0
60401: PUSH
60402: LD_INT 1
60404: NEG
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 1
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 1
60422: PUSH
60423: LD_INT 1
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 0
60432: PUSH
60433: LD_INT 1
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 1
60442: NEG
60443: PUSH
60444: LD_INT 0
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 1
60453: NEG
60454: PUSH
60455: LD_INT 1
60457: NEG
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 2
60465: PUSH
60466: LD_INT 1
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 2
60475: PUSH
60476: LD_INT 2
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 1
60485: PUSH
60486: LD_INT 2
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 0
60495: PUSH
60496: LD_INT 2
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 1
60505: NEG
60506: PUSH
60507: LD_INT 1
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60528: LD_ADDR_VAR 0 51
60532: PUSH
60533: LD_INT 0
60535: PUSH
60536: LD_INT 0
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: LD_INT 1
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 1
60556: PUSH
60557: LD_INT 0
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 1
60566: PUSH
60567: LD_INT 1
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 0
60576: PUSH
60577: LD_INT 1
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 1
60586: NEG
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 1
60597: NEG
60598: PUSH
60599: LD_INT 1
60601: NEG
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 1
60609: PUSH
60610: LD_INT 2
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: LD_INT 2
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 1
60629: NEG
60630: PUSH
60631: LD_INT 1
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 2
60640: NEG
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 2
60651: NEG
60652: PUSH
60653: LD_INT 1
60655: NEG
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60675: LD_ADDR_VAR 0 52
60679: PUSH
60680: LD_INT 0
60682: PUSH
60683: LD_INT 0
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 0
60692: PUSH
60693: LD_INT 1
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 1
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 1
60713: PUSH
60714: LD_INT 1
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 0
60723: PUSH
60724: LD_INT 1
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 1
60733: NEG
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 1
60744: NEG
60745: PUSH
60746: LD_INT 1
60748: NEG
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 1
60756: NEG
60757: PUSH
60758: LD_INT 2
60760: NEG
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 1
60768: NEG
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 2
60779: NEG
60780: PUSH
60781: LD_INT 0
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 2
60790: NEG
60791: PUSH
60792: LD_INT 1
60794: NEG
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 2
60802: NEG
60803: PUSH
60804: LD_INT 2
60806: NEG
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60826: LD_ADDR_VAR 0 53
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: LD_INT 0
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 0
60843: PUSH
60844: LD_INT 1
60846: NEG
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 1
60854: PUSH
60855: LD_INT 0
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 1
60864: PUSH
60865: LD_INT 1
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 0
60874: PUSH
60875: LD_INT 1
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 1
60884: NEG
60885: PUSH
60886: LD_INT 0
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 1
60895: NEG
60896: PUSH
60897: LD_INT 1
60899: NEG
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 1
60907: NEG
60908: PUSH
60909: LD_INT 2
60911: NEG
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 0
60919: PUSH
60920: LD_INT 2
60922: NEG
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 1
60930: PUSH
60931: LD_INT 1
60933: NEG
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 2
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 2
60951: PUSH
60952: LD_INT 1
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 2
60961: PUSH
60962: LD_INT 2
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 1
60971: PUSH
60972: LD_INT 2
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 0
60981: PUSH
60982: LD_INT 2
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 1
60991: NEG
60992: PUSH
60993: LD_INT 1
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 2
61002: NEG
61003: PUSH
61004: LD_INT 0
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 2
61013: NEG
61014: PUSH
61015: LD_INT 1
61017: NEG
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 2
61025: NEG
61026: PUSH
61027: LD_INT 2
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61056: LD_ADDR_VAR 0 54
61060: PUSH
61061: LD_INT 0
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 0
61073: PUSH
61074: LD_INT 1
61076: NEG
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 1
61084: PUSH
61085: LD_INT 0
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 1
61094: PUSH
61095: LD_INT 1
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 0
61104: PUSH
61105: LD_INT 1
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 1
61114: NEG
61115: PUSH
61116: LD_INT 0
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 1
61125: NEG
61126: PUSH
61127: LD_INT 1
61129: NEG
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 1
61137: NEG
61138: PUSH
61139: LD_INT 2
61141: NEG
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 0
61149: PUSH
61150: LD_INT 2
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 1
61160: PUSH
61161: LD_INT 1
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 2
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 2
61181: PUSH
61182: LD_INT 1
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 2
61191: PUSH
61192: LD_INT 2
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 1
61201: PUSH
61202: LD_INT 2
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: LD_INT 2
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 1
61221: NEG
61222: PUSH
61223: LD_INT 1
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 2
61232: NEG
61233: PUSH
61234: LD_INT 0
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 2
61243: NEG
61244: PUSH
61245: LD_INT 1
61247: NEG
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 2
61255: NEG
61256: PUSH
61257: LD_INT 2
61259: NEG
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61286: LD_ADDR_VAR 0 55
61290: PUSH
61291: LD_INT 0
61293: PUSH
61294: LD_INT 0
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 0
61303: PUSH
61304: LD_INT 1
61306: NEG
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 1
61314: PUSH
61315: LD_INT 0
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 1
61324: PUSH
61325: LD_INT 1
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: LD_INT 1
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 1
61344: NEG
61345: PUSH
61346: LD_INT 0
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 1
61355: NEG
61356: PUSH
61357: LD_INT 1
61359: NEG
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 1
61367: NEG
61368: PUSH
61369: LD_INT 2
61371: NEG
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: LD_INT 2
61382: NEG
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 1
61390: PUSH
61391: LD_INT 1
61393: NEG
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 2
61401: PUSH
61402: LD_INT 0
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 2
61411: PUSH
61412: LD_INT 1
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 2
61421: PUSH
61422: LD_INT 2
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 1
61431: PUSH
61432: LD_INT 2
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: LD_INT 2
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 1
61451: NEG
61452: PUSH
61453: LD_INT 1
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 2
61462: NEG
61463: PUSH
61464: LD_INT 0
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 2
61473: NEG
61474: PUSH
61475: LD_INT 1
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 2
61485: NEG
61486: PUSH
61487: LD_INT 2
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61516: LD_ADDR_VAR 0 56
61520: PUSH
61521: LD_INT 0
61523: PUSH
61524: LD_INT 0
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 0
61533: PUSH
61534: LD_INT 1
61536: NEG
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 1
61544: PUSH
61545: LD_INT 0
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 1
61554: PUSH
61555: LD_INT 1
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 0
61564: PUSH
61565: LD_INT 1
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 1
61574: NEG
61575: PUSH
61576: LD_INT 0
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 1
61585: NEG
61586: PUSH
61587: LD_INT 1
61589: NEG
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 1
61597: NEG
61598: PUSH
61599: LD_INT 2
61601: NEG
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 0
61609: PUSH
61610: LD_INT 2
61612: NEG
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 1
61620: PUSH
61621: LD_INT 1
61623: NEG
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 2
61631: PUSH
61632: LD_INT 0
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 2
61641: PUSH
61642: LD_INT 1
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 2
61651: PUSH
61652: LD_INT 2
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 1
61661: PUSH
61662: LD_INT 2
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 0
61671: PUSH
61672: LD_INT 2
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 1
61681: NEG
61682: PUSH
61683: LD_INT 1
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 2
61692: NEG
61693: PUSH
61694: LD_INT 0
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 2
61703: NEG
61704: PUSH
61705: LD_INT 1
61707: NEG
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 2
61715: NEG
61716: PUSH
61717: LD_INT 2
61719: NEG
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61746: LD_ADDR_VAR 0 57
61750: PUSH
61751: LD_INT 0
61753: PUSH
61754: LD_INT 0
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 0
61763: PUSH
61764: LD_INT 1
61766: NEG
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 1
61774: PUSH
61775: LD_INT 0
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 1
61784: PUSH
61785: LD_INT 1
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 0
61794: PUSH
61795: LD_INT 1
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 1
61804: NEG
61805: PUSH
61806: LD_INT 0
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 1
61815: NEG
61816: PUSH
61817: LD_INT 1
61819: NEG
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 1
61827: NEG
61828: PUSH
61829: LD_INT 2
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 0
61839: PUSH
61840: LD_INT 2
61842: NEG
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 1
61850: PUSH
61851: LD_INT 1
61853: NEG
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 2
61861: PUSH
61862: LD_INT 0
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 2
61871: PUSH
61872: LD_INT 1
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 2
61881: PUSH
61882: LD_INT 2
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 1
61891: PUSH
61892: LD_INT 2
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 0
61901: PUSH
61902: LD_INT 2
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 1
61911: NEG
61912: PUSH
61913: LD_INT 1
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 2
61922: NEG
61923: PUSH
61924: LD_INT 0
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 2
61933: NEG
61934: PUSH
61935: LD_INT 1
61937: NEG
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 2
61945: NEG
61946: PUSH
61947: LD_INT 2
61949: NEG
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61976: LD_ADDR_VAR 0 58
61980: PUSH
61981: LD_INT 0
61983: PUSH
61984: LD_INT 0
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 0
61993: PUSH
61994: LD_INT 1
61996: NEG
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 1
62004: PUSH
62005: LD_INT 0
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 1
62014: PUSH
62015: LD_INT 1
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 0
62024: PUSH
62025: LD_INT 1
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 1
62034: NEG
62035: PUSH
62036: LD_INT 0
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 1
62045: NEG
62046: PUSH
62047: LD_INT 1
62049: NEG
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 1
62057: NEG
62058: PUSH
62059: LD_INT 2
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 0
62069: PUSH
62070: LD_INT 2
62072: NEG
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 1
62080: PUSH
62081: LD_INT 1
62083: NEG
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 2
62091: PUSH
62092: LD_INT 0
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 2
62101: PUSH
62102: LD_INT 1
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 2
62111: PUSH
62112: LD_INT 2
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 1
62121: PUSH
62122: LD_INT 2
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 0
62131: PUSH
62132: LD_INT 2
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 1
62141: NEG
62142: PUSH
62143: LD_INT 1
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 2
62152: NEG
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 2
62163: NEG
62164: PUSH
62165: LD_INT 1
62167: NEG
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 2
62175: NEG
62176: PUSH
62177: LD_INT 2
62179: NEG
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62206: LD_ADDR_VAR 0 59
62210: PUSH
62211: LD_INT 0
62213: PUSH
62214: LD_INT 0
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 0
62223: PUSH
62224: LD_INT 1
62226: NEG
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 1
62234: PUSH
62235: LD_INT 0
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 1
62244: PUSH
62245: LD_INT 1
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 0
62254: PUSH
62255: LD_INT 1
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 1
62264: NEG
62265: PUSH
62266: LD_INT 0
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 1
62275: NEG
62276: PUSH
62277: LD_INT 1
62279: NEG
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62294: LD_ADDR_VAR 0 60
62298: PUSH
62299: LD_INT 0
62301: PUSH
62302: LD_INT 0
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 0
62311: PUSH
62312: LD_INT 1
62314: NEG
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 1
62322: PUSH
62323: LD_INT 0
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 1
62332: PUSH
62333: LD_INT 1
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 0
62342: PUSH
62343: LD_INT 1
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 1
62352: NEG
62353: PUSH
62354: LD_INT 0
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 1
62363: NEG
62364: PUSH
62365: LD_INT 1
62367: NEG
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62382: LD_ADDR_VAR 0 61
62386: PUSH
62387: LD_INT 0
62389: PUSH
62390: LD_INT 0
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 0
62399: PUSH
62400: LD_INT 1
62402: NEG
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 1
62410: PUSH
62411: LD_INT 0
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 1
62420: PUSH
62421: LD_INT 1
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 0
62430: PUSH
62431: LD_INT 1
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 1
62440: NEG
62441: PUSH
62442: LD_INT 0
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 1
62451: NEG
62452: PUSH
62453: LD_INT 1
62455: NEG
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62470: LD_ADDR_VAR 0 62
62474: PUSH
62475: LD_INT 0
62477: PUSH
62478: LD_INT 0
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 0
62487: PUSH
62488: LD_INT 1
62490: NEG
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 1
62498: PUSH
62499: LD_INT 0
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 1
62508: PUSH
62509: LD_INT 1
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 0
62518: PUSH
62519: LD_INT 1
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 1
62528: NEG
62529: PUSH
62530: LD_INT 0
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 1
62539: NEG
62540: PUSH
62541: LD_INT 1
62543: NEG
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62558: LD_ADDR_VAR 0 63
62562: PUSH
62563: LD_INT 0
62565: PUSH
62566: LD_INT 0
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 0
62575: PUSH
62576: LD_INT 1
62578: NEG
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 1
62586: PUSH
62587: LD_INT 0
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 1
62596: PUSH
62597: LD_INT 1
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 0
62606: PUSH
62607: LD_INT 1
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 1
62616: NEG
62617: PUSH
62618: LD_INT 0
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 1
62627: NEG
62628: PUSH
62629: LD_INT 1
62631: NEG
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62646: LD_ADDR_VAR 0 64
62650: PUSH
62651: LD_INT 0
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 0
62663: PUSH
62664: LD_INT 1
62666: NEG
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 1
62674: PUSH
62675: LD_INT 0
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 1
62684: PUSH
62685: LD_INT 1
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 0
62694: PUSH
62695: LD_INT 1
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 1
62704: NEG
62705: PUSH
62706: LD_INT 0
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 1
62715: NEG
62716: PUSH
62717: LD_INT 1
62719: NEG
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: ST_TO_ADDR
// end ; 1 :
62734: GO 68631
62736: LD_INT 1
62738: DOUBLE
62739: EQUAL
62740: IFTRUE 62744
62742: GO 65367
62744: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62745: LD_ADDR_VAR 0 11
62749: PUSH
62750: LD_INT 1
62752: NEG
62753: PUSH
62754: LD_INT 3
62756: NEG
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 0
62764: PUSH
62765: LD_INT 3
62767: NEG
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 1
62775: PUSH
62776: LD_INT 2
62778: NEG
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: LIST
62788: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62789: LD_ADDR_VAR 0 12
62793: PUSH
62794: LD_INT 2
62796: PUSH
62797: LD_INT 1
62799: NEG
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 3
62807: PUSH
62808: LD_INT 0
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 3
62817: PUSH
62818: LD_INT 1
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: LIST
62829: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62830: LD_ADDR_VAR 0 13
62834: PUSH
62835: LD_INT 3
62837: PUSH
62838: LD_INT 2
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 3
62847: PUSH
62848: LD_INT 3
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 2
62857: PUSH
62858: LD_INT 3
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: LIST
62869: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62870: LD_ADDR_VAR 0 14
62874: PUSH
62875: LD_INT 1
62877: PUSH
62878: LD_INT 3
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 0
62887: PUSH
62888: LD_INT 3
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 1
62897: NEG
62898: PUSH
62899: LD_INT 2
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: LIST
62910: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62911: LD_ADDR_VAR 0 15
62915: PUSH
62916: LD_INT 2
62918: NEG
62919: PUSH
62920: LD_INT 1
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 3
62929: NEG
62930: PUSH
62931: LD_INT 0
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 3
62940: NEG
62941: PUSH
62942: LD_INT 1
62944: NEG
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: LIST
62954: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62955: LD_ADDR_VAR 0 16
62959: PUSH
62960: LD_INT 2
62962: NEG
62963: PUSH
62964: LD_INT 3
62966: NEG
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 3
62974: NEG
62975: PUSH
62976: LD_INT 2
62978: NEG
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 3
62986: NEG
62987: PUSH
62988: LD_INT 3
62990: NEG
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: LIST
63000: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63001: LD_ADDR_VAR 0 17
63005: PUSH
63006: LD_INT 1
63008: NEG
63009: PUSH
63010: LD_INT 3
63012: NEG
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 0
63020: PUSH
63021: LD_INT 3
63023: NEG
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 1
63031: PUSH
63032: LD_INT 2
63034: NEG
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: LIST
63044: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63045: LD_ADDR_VAR 0 18
63049: PUSH
63050: LD_INT 2
63052: PUSH
63053: LD_INT 1
63055: NEG
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 3
63063: PUSH
63064: LD_INT 0
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 3
63073: PUSH
63074: LD_INT 1
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: LIST
63085: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63086: LD_ADDR_VAR 0 19
63090: PUSH
63091: LD_INT 3
63093: PUSH
63094: LD_INT 2
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 3
63103: PUSH
63104: LD_INT 3
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 2
63113: PUSH
63114: LD_INT 3
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: LIST
63125: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63126: LD_ADDR_VAR 0 20
63130: PUSH
63131: LD_INT 1
63133: PUSH
63134: LD_INT 3
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 0
63143: PUSH
63144: LD_INT 3
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 1
63153: NEG
63154: PUSH
63155: LD_INT 2
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: LIST
63166: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63167: LD_ADDR_VAR 0 21
63171: PUSH
63172: LD_INT 2
63174: NEG
63175: PUSH
63176: LD_INT 1
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 3
63185: NEG
63186: PUSH
63187: LD_INT 0
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 3
63196: NEG
63197: PUSH
63198: LD_INT 1
63200: NEG
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: LIST
63210: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63211: LD_ADDR_VAR 0 22
63215: PUSH
63216: LD_INT 2
63218: NEG
63219: PUSH
63220: LD_INT 3
63222: NEG
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 3
63230: NEG
63231: PUSH
63232: LD_INT 2
63234: NEG
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 3
63242: NEG
63243: PUSH
63244: LD_INT 3
63246: NEG
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: LIST
63256: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63257: LD_ADDR_VAR 0 23
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: LD_INT 3
63267: NEG
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 1
63275: NEG
63276: PUSH
63277: LD_INT 4
63279: NEG
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 1
63287: PUSH
63288: LD_INT 3
63290: NEG
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: LIST
63300: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63301: LD_ADDR_VAR 0 24
63305: PUSH
63306: LD_INT 3
63308: PUSH
63309: LD_INT 0
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 3
63318: PUSH
63319: LD_INT 1
63321: NEG
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 4
63329: PUSH
63330: LD_INT 1
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: LIST
63341: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63342: LD_ADDR_VAR 0 25
63346: PUSH
63347: LD_INT 3
63349: PUSH
63350: LD_INT 3
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 4
63359: PUSH
63360: LD_INT 3
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 3
63369: PUSH
63370: LD_INT 4
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: LIST
63381: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63382: LD_ADDR_VAR 0 26
63386: PUSH
63387: LD_INT 0
63389: PUSH
63390: LD_INT 3
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 1
63399: PUSH
63400: LD_INT 4
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 1
63409: NEG
63410: PUSH
63411: LD_INT 3
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: LIST
63422: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63423: LD_ADDR_VAR 0 27
63427: PUSH
63428: LD_INT 3
63430: NEG
63431: PUSH
63432: LD_INT 0
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 3
63441: NEG
63442: PUSH
63443: LD_INT 1
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 4
63452: NEG
63453: PUSH
63454: LD_INT 1
63456: NEG
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: LIST
63466: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63467: LD_ADDR_VAR 0 28
63471: PUSH
63472: LD_INT 3
63474: NEG
63475: PUSH
63476: LD_INT 3
63478: NEG
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 3
63486: NEG
63487: PUSH
63488: LD_INT 4
63490: NEG
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 4
63498: NEG
63499: PUSH
63500: LD_INT 3
63502: NEG
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: LIST
63512: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63513: LD_ADDR_VAR 0 29
63517: PUSH
63518: LD_INT 1
63520: NEG
63521: PUSH
63522: LD_INT 3
63524: NEG
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 0
63532: PUSH
63533: LD_INT 3
63535: NEG
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 1
63543: PUSH
63544: LD_INT 2
63546: NEG
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 1
63554: NEG
63555: PUSH
63556: LD_INT 4
63558: NEG
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 0
63566: PUSH
63567: LD_INT 4
63569: NEG
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 1
63577: PUSH
63578: LD_INT 3
63580: NEG
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 1
63588: NEG
63589: PUSH
63590: LD_INT 5
63592: NEG
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 0
63600: PUSH
63601: LD_INT 5
63603: NEG
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 1
63611: PUSH
63612: LD_INT 4
63614: NEG
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 1
63622: NEG
63623: PUSH
63624: LD_INT 6
63626: NEG
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 0
63634: PUSH
63635: LD_INT 6
63637: NEG
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 1
63645: PUSH
63646: LD_INT 5
63648: NEG
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63668: LD_ADDR_VAR 0 30
63672: PUSH
63673: LD_INT 2
63675: PUSH
63676: LD_INT 1
63678: NEG
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 3
63686: PUSH
63687: LD_INT 0
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 3
63696: PUSH
63697: LD_INT 1
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 3
63706: PUSH
63707: LD_INT 1
63709: NEG
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 4
63717: PUSH
63718: LD_INT 0
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 4
63727: PUSH
63728: LD_INT 1
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 4
63737: PUSH
63738: LD_INT 1
63740: NEG
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 5
63748: PUSH
63749: LD_INT 0
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 5
63758: PUSH
63759: LD_INT 1
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 5
63768: PUSH
63769: LD_INT 1
63771: NEG
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 6
63779: PUSH
63780: LD_INT 0
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 6
63789: PUSH
63790: LD_INT 1
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: LIST
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63811: LD_ADDR_VAR 0 31
63815: PUSH
63816: LD_INT 3
63818: PUSH
63819: LD_INT 2
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 3
63828: PUSH
63829: LD_INT 3
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 2
63838: PUSH
63839: LD_INT 3
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 4
63848: PUSH
63849: LD_INT 3
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 4
63858: PUSH
63859: LD_INT 4
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 3
63868: PUSH
63869: LD_INT 4
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 5
63878: PUSH
63879: LD_INT 4
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 5
63888: PUSH
63889: LD_INT 5
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 4
63898: PUSH
63899: LD_INT 5
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 6
63908: PUSH
63909: LD_INT 5
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 6
63918: PUSH
63919: LD_INT 6
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 5
63928: PUSH
63929: LD_INT 6
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63950: LD_ADDR_VAR 0 32
63954: PUSH
63955: LD_INT 1
63957: PUSH
63958: LD_INT 3
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 0
63967: PUSH
63968: LD_INT 3
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 1
63977: NEG
63978: PUSH
63979: LD_INT 2
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 1
63988: PUSH
63989: LD_INT 4
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 0
63998: PUSH
63999: LD_INT 4
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 1
64008: NEG
64009: PUSH
64010: LD_INT 3
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 1
64019: PUSH
64020: LD_INT 5
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 0
64029: PUSH
64030: LD_INT 5
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 1
64039: NEG
64040: PUSH
64041: LD_INT 4
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 1
64050: PUSH
64051: LD_INT 6
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 0
64060: PUSH
64061: LD_INT 6
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 1
64070: NEG
64071: PUSH
64072: LD_INT 5
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64093: LD_ADDR_VAR 0 33
64097: PUSH
64098: LD_INT 2
64100: NEG
64101: PUSH
64102: LD_INT 1
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 3
64111: NEG
64112: PUSH
64113: LD_INT 0
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 3
64122: NEG
64123: PUSH
64124: LD_INT 1
64126: NEG
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 3
64134: NEG
64135: PUSH
64136: LD_INT 1
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 4
64145: NEG
64146: PUSH
64147: LD_INT 0
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 4
64156: NEG
64157: PUSH
64158: LD_INT 1
64160: NEG
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 4
64168: NEG
64169: PUSH
64170: LD_INT 1
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 5
64179: NEG
64180: PUSH
64181: LD_INT 0
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 5
64190: NEG
64191: PUSH
64192: LD_INT 1
64194: NEG
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 5
64202: NEG
64203: PUSH
64204: LD_INT 1
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 6
64213: NEG
64214: PUSH
64215: LD_INT 0
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 6
64224: NEG
64225: PUSH
64226: LD_INT 1
64228: NEG
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64248: LD_ADDR_VAR 0 34
64252: PUSH
64253: LD_INT 2
64255: NEG
64256: PUSH
64257: LD_INT 3
64259: NEG
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 3
64267: NEG
64268: PUSH
64269: LD_INT 2
64271: NEG
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 3
64279: NEG
64280: PUSH
64281: LD_INT 3
64283: NEG
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 3
64291: NEG
64292: PUSH
64293: LD_INT 4
64295: NEG
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 4
64303: NEG
64304: PUSH
64305: LD_INT 3
64307: NEG
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 4
64315: NEG
64316: PUSH
64317: LD_INT 4
64319: NEG
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 4
64327: NEG
64328: PUSH
64329: LD_INT 5
64331: NEG
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 5
64339: NEG
64340: PUSH
64341: LD_INT 4
64343: NEG
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 5
64351: NEG
64352: PUSH
64353: LD_INT 5
64355: NEG
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 5
64363: NEG
64364: PUSH
64365: LD_INT 6
64367: NEG
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 6
64375: NEG
64376: PUSH
64377: LD_INT 5
64379: NEG
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 6
64387: NEG
64388: PUSH
64389: LD_INT 6
64391: NEG
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64411: LD_ADDR_VAR 0 41
64415: PUSH
64416: LD_INT 0
64418: PUSH
64419: LD_INT 2
64421: NEG
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 1
64429: NEG
64430: PUSH
64431: LD_INT 3
64433: NEG
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 1
64441: PUSH
64442: LD_INT 2
64444: NEG
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: LIST
64454: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64455: LD_ADDR_VAR 0 42
64459: PUSH
64460: LD_INT 2
64462: PUSH
64463: LD_INT 0
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 2
64472: PUSH
64473: LD_INT 1
64475: NEG
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 3
64483: PUSH
64484: LD_INT 1
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: LIST
64495: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64496: LD_ADDR_VAR 0 43
64500: PUSH
64501: LD_INT 2
64503: PUSH
64504: LD_INT 2
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 3
64513: PUSH
64514: LD_INT 2
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 2
64523: PUSH
64524: LD_INT 3
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: LIST
64535: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64536: LD_ADDR_VAR 0 44
64540: PUSH
64541: LD_INT 0
64543: PUSH
64544: LD_INT 2
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 1
64553: PUSH
64554: LD_INT 3
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 1
64563: NEG
64564: PUSH
64565: LD_INT 2
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: LIST
64576: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64577: LD_ADDR_VAR 0 45
64581: PUSH
64582: LD_INT 2
64584: NEG
64585: PUSH
64586: LD_INT 0
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 2
64595: NEG
64596: PUSH
64597: LD_INT 1
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 3
64606: NEG
64607: PUSH
64608: LD_INT 1
64610: NEG
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: LIST
64620: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64621: LD_ADDR_VAR 0 46
64625: PUSH
64626: LD_INT 2
64628: NEG
64629: PUSH
64630: LD_INT 2
64632: NEG
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 2
64640: NEG
64641: PUSH
64642: LD_INT 3
64644: NEG
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 3
64652: NEG
64653: PUSH
64654: LD_INT 2
64656: NEG
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: LIST
64666: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64667: LD_ADDR_VAR 0 47
64671: PUSH
64672: LD_INT 2
64674: NEG
64675: PUSH
64676: LD_INT 3
64678: NEG
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 1
64686: NEG
64687: PUSH
64688: LD_INT 3
64690: NEG
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64700: LD_ADDR_VAR 0 48
64704: PUSH
64705: LD_INT 1
64707: PUSH
64708: LD_INT 2
64710: NEG
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: LD_INT 2
64718: PUSH
64719: LD_INT 1
64721: NEG
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64731: LD_ADDR_VAR 0 49
64735: PUSH
64736: LD_INT 3
64738: PUSH
64739: LD_INT 1
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 3
64748: PUSH
64749: LD_INT 2
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64760: LD_ADDR_VAR 0 50
64764: PUSH
64765: LD_INT 2
64767: PUSH
64768: LD_INT 3
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 1
64777: PUSH
64778: LD_INT 3
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64789: LD_ADDR_VAR 0 51
64793: PUSH
64794: LD_INT 1
64796: NEG
64797: PUSH
64798: LD_INT 2
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 2
64807: NEG
64808: PUSH
64809: LD_INT 1
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64820: LD_ADDR_VAR 0 52
64824: PUSH
64825: LD_INT 3
64827: NEG
64828: PUSH
64829: LD_INT 1
64831: NEG
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 3
64839: NEG
64840: PUSH
64841: LD_INT 2
64843: NEG
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64853: LD_ADDR_VAR 0 53
64857: PUSH
64858: LD_INT 1
64860: NEG
64861: PUSH
64862: LD_INT 3
64864: NEG
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 0
64872: PUSH
64873: LD_INT 3
64875: NEG
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 1
64883: PUSH
64884: LD_INT 2
64886: NEG
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: LIST
64896: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64897: LD_ADDR_VAR 0 54
64901: PUSH
64902: LD_INT 2
64904: PUSH
64905: LD_INT 1
64907: NEG
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 3
64915: PUSH
64916: LD_INT 0
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 3
64925: PUSH
64926: LD_INT 1
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: LIST
64937: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64938: LD_ADDR_VAR 0 55
64942: PUSH
64943: LD_INT 3
64945: PUSH
64946: LD_INT 2
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 3
64955: PUSH
64956: LD_INT 3
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 2
64965: PUSH
64966: LD_INT 3
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: LIST
64977: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64978: LD_ADDR_VAR 0 56
64982: PUSH
64983: LD_INT 1
64985: PUSH
64986: LD_INT 3
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 0
64995: PUSH
64996: LD_INT 3
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 1
65005: NEG
65006: PUSH
65007: LD_INT 2
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: LIST
65018: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65019: LD_ADDR_VAR 0 57
65023: PUSH
65024: LD_INT 2
65026: NEG
65027: PUSH
65028: LD_INT 1
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 3
65037: NEG
65038: PUSH
65039: LD_INT 0
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: LD_INT 3
65048: NEG
65049: PUSH
65050: LD_INT 1
65052: NEG
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: LIST
65062: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65063: LD_ADDR_VAR 0 58
65067: PUSH
65068: LD_INT 2
65070: NEG
65071: PUSH
65072: LD_INT 3
65074: NEG
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 3
65082: NEG
65083: PUSH
65084: LD_INT 2
65086: NEG
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 3
65094: NEG
65095: PUSH
65096: LD_INT 3
65098: NEG
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: LIST
65108: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65109: LD_ADDR_VAR 0 59
65113: PUSH
65114: LD_INT 1
65116: NEG
65117: PUSH
65118: LD_INT 2
65120: NEG
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 0
65128: PUSH
65129: LD_INT 2
65131: NEG
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 1
65139: PUSH
65140: LD_INT 1
65142: NEG
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: LIST
65152: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65153: LD_ADDR_VAR 0 60
65157: PUSH
65158: LD_INT 1
65160: PUSH
65161: LD_INT 1
65163: NEG
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 2
65171: PUSH
65172: LD_INT 0
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 2
65181: PUSH
65182: LD_INT 1
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: LIST
65193: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65194: LD_ADDR_VAR 0 61
65198: PUSH
65199: LD_INT 2
65201: PUSH
65202: LD_INT 1
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 2
65211: PUSH
65212: LD_INT 2
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 1
65221: PUSH
65222: LD_INT 2
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: LIST
65233: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65234: LD_ADDR_VAR 0 62
65238: PUSH
65239: LD_INT 1
65241: PUSH
65242: LD_INT 2
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 0
65251: PUSH
65252: LD_INT 2
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 1
65261: NEG
65262: PUSH
65263: LD_INT 1
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: LIST
65274: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65275: LD_ADDR_VAR 0 63
65279: PUSH
65280: LD_INT 1
65282: NEG
65283: PUSH
65284: LD_INT 1
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: LD_INT 2
65293: NEG
65294: PUSH
65295: LD_INT 0
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 2
65304: NEG
65305: PUSH
65306: LD_INT 1
65308: NEG
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: LIST
65318: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65319: LD_ADDR_VAR 0 64
65323: PUSH
65324: LD_INT 1
65326: NEG
65327: PUSH
65328: LD_INT 2
65330: NEG
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 2
65338: NEG
65339: PUSH
65340: LD_INT 1
65342: NEG
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 2
65350: NEG
65351: PUSH
65352: LD_INT 2
65354: NEG
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: LIST
65364: ST_TO_ADDR
// end ; 2 :
65365: GO 68631
65367: LD_INT 2
65369: DOUBLE
65370: EQUAL
65371: IFTRUE 65375
65373: GO 68630
65375: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65376: LD_ADDR_VAR 0 29
65380: PUSH
65381: LD_INT 4
65383: PUSH
65384: LD_INT 0
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 4
65393: PUSH
65394: LD_INT 1
65396: NEG
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 5
65404: PUSH
65405: LD_INT 0
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 5
65414: PUSH
65415: LD_INT 1
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 4
65424: PUSH
65425: LD_INT 1
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 3
65434: PUSH
65435: LD_INT 0
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 3
65444: PUSH
65445: LD_INT 1
65447: NEG
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 3
65455: PUSH
65456: LD_INT 2
65458: NEG
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 5
65466: PUSH
65467: LD_INT 2
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 3
65476: PUSH
65477: LD_INT 3
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 3
65486: PUSH
65487: LD_INT 2
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 4
65496: PUSH
65497: LD_INT 3
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 4
65506: PUSH
65507: LD_INT 4
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 3
65516: PUSH
65517: LD_INT 4
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 2
65526: PUSH
65527: LD_INT 3
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 2
65536: PUSH
65537: LD_INT 2
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 4
65546: PUSH
65547: LD_INT 2
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 2
65556: PUSH
65557: LD_INT 4
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 0
65566: PUSH
65567: LD_INT 4
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 0
65576: PUSH
65577: LD_INT 3
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 1
65586: PUSH
65587: LD_INT 4
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 1
65596: PUSH
65597: LD_INT 5
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: LD_INT 0
65606: PUSH
65607: LD_INT 5
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 1
65616: NEG
65617: PUSH
65618: LD_INT 4
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 1
65627: NEG
65628: PUSH
65629: LD_INT 3
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 2
65638: PUSH
65639: LD_INT 5
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 2
65648: NEG
65649: PUSH
65650: LD_INT 3
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 3
65659: NEG
65660: PUSH
65661: LD_INT 0
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 3
65670: NEG
65671: PUSH
65672: LD_INT 1
65674: NEG
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 2
65682: NEG
65683: PUSH
65684: LD_INT 0
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 2
65693: NEG
65694: PUSH
65695: LD_INT 1
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 3
65704: NEG
65705: PUSH
65706: LD_INT 1
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 4
65715: NEG
65716: PUSH
65717: LD_INT 0
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 4
65726: NEG
65727: PUSH
65728: LD_INT 1
65730: NEG
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 4
65738: NEG
65739: PUSH
65740: LD_INT 2
65742: NEG
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 2
65750: NEG
65751: PUSH
65752: LD_INT 2
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: LD_INT 4
65761: NEG
65762: PUSH
65763: LD_INT 4
65765: NEG
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 4
65773: NEG
65774: PUSH
65775: LD_INT 5
65777: NEG
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 3
65785: NEG
65786: PUSH
65787: LD_INT 4
65789: NEG
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 3
65797: NEG
65798: PUSH
65799: LD_INT 3
65801: NEG
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 4
65809: NEG
65810: PUSH
65811: LD_INT 3
65813: NEG
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 5
65821: NEG
65822: PUSH
65823: LD_INT 4
65825: NEG
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 5
65833: NEG
65834: PUSH
65835: LD_INT 5
65837: NEG
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 3
65845: NEG
65846: PUSH
65847: LD_INT 5
65849: NEG
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 5
65857: NEG
65858: PUSH
65859: LD_INT 3
65861: NEG
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65914: LD_ADDR_VAR 0 30
65918: PUSH
65919: LD_INT 4
65921: PUSH
65922: LD_INT 4
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 4
65931: PUSH
65932: LD_INT 3
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 5
65941: PUSH
65942: LD_INT 4
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 5
65951: PUSH
65952: LD_INT 5
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 4
65961: PUSH
65962: LD_INT 5
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 3
65971: PUSH
65972: LD_INT 4
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 3
65981: PUSH
65982: LD_INT 3
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 5
65991: PUSH
65992: LD_INT 3
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 3
66001: PUSH
66002: LD_INT 5
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 0
66011: PUSH
66012: LD_INT 3
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 0
66021: PUSH
66022: LD_INT 2
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 1
66031: PUSH
66032: LD_INT 3
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 1
66041: PUSH
66042: LD_INT 4
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 0
66051: PUSH
66052: LD_INT 4
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: LD_INT 1
66061: NEG
66062: PUSH
66063: LD_INT 3
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 1
66072: NEG
66073: PUSH
66074: LD_INT 2
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 2
66083: PUSH
66084: LD_INT 4
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 2
66093: NEG
66094: PUSH
66095: LD_INT 2
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 4
66104: NEG
66105: PUSH
66106: LD_INT 0
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 4
66115: NEG
66116: PUSH
66117: LD_INT 1
66119: NEG
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 3
66127: NEG
66128: PUSH
66129: LD_INT 0
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 3
66138: NEG
66139: PUSH
66140: LD_INT 1
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 4
66149: NEG
66150: PUSH
66151: LD_INT 1
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 5
66160: NEG
66161: PUSH
66162: LD_INT 0
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 5
66171: NEG
66172: PUSH
66173: LD_INT 1
66175: NEG
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 5
66183: NEG
66184: PUSH
66185: LD_INT 2
66187: NEG
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: PUSH
66193: LD_INT 3
66195: NEG
66196: PUSH
66197: LD_INT 2
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 3
66206: NEG
66207: PUSH
66208: LD_INT 3
66210: NEG
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 3
66218: NEG
66219: PUSH
66220: LD_INT 4
66222: NEG
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 2
66230: NEG
66231: PUSH
66232: LD_INT 3
66234: NEG
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 2
66242: NEG
66243: PUSH
66244: LD_INT 2
66246: NEG
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 3
66254: NEG
66255: PUSH
66256: LD_INT 2
66258: NEG
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: LD_INT 4
66266: NEG
66267: PUSH
66268: LD_INT 3
66270: NEG
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: LD_INT 4
66278: NEG
66279: PUSH
66280: LD_INT 4
66282: NEG
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 2
66290: NEG
66291: PUSH
66292: LD_INT 4
66294: NEG
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 4
66302: NEG
66303: PUSH
66304: LD_INT 2
66306: NEG
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 0
66314: PUSH
66315: LD_INT 4
66317: NEG
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 0
66325: PUSH
66326: LD_INT 5
66328: NEG
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 1
66336: PUSH
66337: LD_INT 4
66339: NEG
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 1
66347: PUSH
66348: LD_INT 3
66350: NEG
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 0
66358: PUSH
66359: LD_INT 3
66361: NEG
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 1
66369: NEG
66370: PUSH
66371: LD_INT 4
66373: NEG
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: LD_INT 1
66381: NEG
66382: PUSH
66383: LD_INT 5
66385: NEG
66386: PUSH
66387: EMPTY
66388: LIST
66389: LIST
66390: PUSH
66391: LD_INT 2
66393: PUSH
66394: LD_INT 3
66396: NEG
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 2
66404: NEG
66405: PUSH
66406: LD_INT 5
66408: NEG
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: LIST
66430: LIST
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66461: LD_ADDR_VAR 0 31
66465: PUSH
66466: LD_INT 0
66468: PUSH
66469: LD_INT 4
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 0
66478: PUSH
66479: LD_INT 3
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 1
66488: PUSH
66489: LD_INT 4
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 1
66498: PUSH
66499: LD_INT 5
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: LD_INT 0
66508: PUSH
66509: LD_INT 5
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: LD_INT 1
66518: NEG
66519: PUSH
66520: LD_INT 4
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 1
66529: NEG
66530: PUSH
66531: LD_INT 3
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 2
66540: PUSH
66541: LD_INT 5
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: LD_INT 2
66550: NEG
66551: PUSH
66552: LD_INT 3
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 3
66561: NEG
66562: PUSH
66563: LD_INT 0
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 3
66572: NEG
66573: PUSH
66574: LD_INT 1
66576: NEG
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 2
66584: NEG
66585: PUSH
66586: LD_INT 0
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 2
66595: NEG
66596: PUSH
66597: LD_INT 1
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 3
66606: NEG
66607: PUSH
66608: LD_INT 1
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: LD_INT 4
66617: NEG
66618: PUSH
66619: LD_INT 0
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 4
66628: NEG
66629: PUSH
66630: LD_INT 1
66632: NEG
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 4
66640: NEG
66641: PUSH
66642: LD_INT 2
66644: NEG
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 2
66652: NEG
66653: PUSH
66654: LD_INT 2
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 4
66663: NEG
66664: PUSH
66665: LD_INT 4
66667: NEG
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 4
66675: NEG
66676: PUSH
66677: LD_INT 5
66679: NEG
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: LD_INT 3
66687: NEG
66688: PUSH
66689: LD_INT 4
66691: NEG
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: LD_INT 3
66699: NEG
66700: PUSH
66701: LD_INT 3
66703: NEG
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 4
66711: NEG
66712: PUSH
66713: LD_INT 3
66715: NEG
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 5
66723: NEG
66724: PUSH
66725: LD_INT 4
66727: NEG
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 5
66735: NEG
66736: PUSH
66737: LD_INT 5
66739: NEG
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 3
66747: NEG
66748: PUSH
66749: LD_INT 5
66751: NEG
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 5
66759: NEG
66760: PUSH
66761: LD_INT 3
66763: NEG
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 0
66771: PUSH
66772: LD_INT 3
66774: NEG
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: LD_INT 0
66782: PUSH
66783: LD_INT 4
66785: NEG
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: LD_INT 1
66793: PUSH
66794: LD_INT 3
66796: NEG
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 1
66804: PUSH
66805: LD_INT 2
66807: NEG
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 0
66815: PUSH
66816: LD_INT 2
66818: NEG
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_INT 1
66826: NEG
66827: PUSH
66828: LD_INT 3
66830: NEG
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: LD_INT 1
66838: NEG
66839: PUSH
66840: LD_INT 4
66842: NEG
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 2
66850: PUSH
66851: LD_INT 2
66853: NEG
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 2
66861: NEG
66862: PUSH
66863: LD_INT 4
66865: NEG
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: LD_INT 4
66873: PUSH
66874: LD_INT 0
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: PUSH
66881: LD_INT 4
66883: PUSH
66884: LD_INT 1
66886: NEG
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 5
66894: PUSH
66895: LD_INT 0
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: PUSH
66902: LD_INT 5
66904: PUSH
66905: LD_INT 1
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 4
66914: PUSH
66915: LD_INT 1
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 3
66924: PUSH
66925: LD_INT 0
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: LD_INT 3
66934: PUSH
66935: LD_INT 1
66937: NEG
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PUSH
66943: LD_INT 3
66945: PUSH
66946: LD_INT 2
66948: NEG
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: LD_INT 5
66956: PUSH
66957: LD_INT 2
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: LIST
66975: LIST
66976: LIST
66977: LIST
66978: LIST
66979: LIST
66980: LIST
66981: LIST
66982: LIST
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: LIST
66994: LIST
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67011: LD_ADDR_VAR 0 32
67015: PUSH
67016: LD_INT 4
67018: NEG
67019: PUSH
67020: LD_INT 0
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 4
67029: NEG
67030: PUSH
67031: LD_INT 1
67033: NEG
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 3
67041: NEG
67042: PUSH
67043: LD_INT 0
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 3
67052: NEG
67053: PUSH
67054: LD_INT 1
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 4
67063: NEG
67064: PUSH
67065: LD_INT 1
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 5
67074: NEG
67075: PUSH
67076: LD_INT 0
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 5
67085: NEG
67086: PUSH
67087: LD_INT 1
67089: NEG
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 5
67097: NEG
67098: PUSH
67099: LD_INT 2
67101: NEG
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 3
67109: NEG
67110: PUSH
67111: LD_INT 2
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 3
67120: NEG
67121: PUSH
67122: LD_INT 3
67124: NEG
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 3
67132: NEG
67133: PUSH
67134: LD_INT 4
67136: NEG
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: LD_INT 2
67144: NEG
67145: PUSH
67146: LD_INT 3
67148: NEG
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 2
67156: NEG
67157: PUSH
67158: LD_INT 2
67160: NEG
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 3
67168: NEG
67169: PUSH
67170: LD_INT 2
67172: NEG
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PUSH
67178: LD_INT 4
67180: NEG
67181: PUSH
67182: LD_INT 3
67184: NEG
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 4
67192: NEG
67193: PUSH
67194: LD_INT 4
67196: NEG
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 2
67204: NEG
67205: PUSH
67206: LD_INT 4
67208: NEG
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 4
67216: NEG
67217: PUSH
67218: LD_INT 2
67220: NEG
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 0
67228: PUSH
67229: LD_INT 4
67231: NEG
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 0
67239: PUSH
67240: LD_INT 5
67242: NEG
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 1
67250: PUSH
67251: LD_INT 4
67253: NEG
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 1
67261: PUSH
67262: LD_INT 3
67264: NEG
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: LD_INT 0
67272: PUSH
67273: LD_INT 3
67275: NEG
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: LD_INT 1
67283: NEG
67284: PUSH
67285: LD_INT 4
67287: NEG
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 1
67295: NEG
67296: PUSH
67297: LD_INT 5
67299: NEG
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: PUSH
67305: LD_INT 2
67307: PUSH
67308: LD_INT 3
67310: NEG
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_INT 2
67318: NEG
67319: PUSH
67320: LD_INT 5
67322: NEG
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 3
67330: PUSH
67331: LD_INT 0
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 3
67340: PUSH
67341: LD_INT 1
67343: NEG
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 4
67351: PUSH
67352: LD_INT 0
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: LD_INT 4
67361: PUSH
67362: LD_INT 1
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 3
67371: PUSH
67372: LD_INT 1
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 2
67381: PUSH
67382: LD_INT 0
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: LD_INT 2
67391: PUSH
67392: LD_INT 1
67394: NEG
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 2
67402: PUSH
67403: LD_INT 2
67405: NEG
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 4
67413: PUSH
67414: LD_INT 2
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 4
67423: PUSH
67424: LD_INT 4
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 4
67433: PUSH
67434: LD_INT 3
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 5
67443: PUSH
67444: LD_INT 4
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 5
67453: PUSH
67454: LD_INT 5
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 4
67463: PUSH
67464: LD_INT 5
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: LD_INT 3
67473: PUSH
67474: LD_INT 4
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 3
67483: PUSH
67484: LD_INT 3
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 5
67493: PUSH
67494: LD_INT 3
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 3
67503: PUSH
67504: LD_INT 5
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: LIST
67520: LIST
67521: LIST
67522: LIST
67523: LIST
67524: LIST
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: LIST
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: LIST
67556: LIST
67557: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67558: LD_ADDR_VAR 0 33
67562: PUSH
67563: LD_INT 4
67565: NEG
67566: PUSH
67567: LD_INT 4
67569: NEG
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 4
67577: NEG
67578: PUSH
67579: LD_INT 5
67581: NEG
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: LD_INT 3
67589: NEG
67590: PUSH
67591: LD_INT 4
67593: NEG
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 3
67601: NEG
67602: PUSH
67603: LD_INT 3
67605: NEG
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 4
67613: NEG
67614: PUSH
67615: LD_INT 3
67617: NEG
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: LD_INT 5
67625: NEG
67626: PUSH
67627: LD_INT 4
67629: NEG
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: PUSH
67635: LD_INT 5
67637: NEG
67638: PUSH
67639: LD_INT 5
67641: NEG
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 3
67649: NEG
67650: PUSH
67651: LD_INT 5
67653: NEG
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 5
67661: NEG
67662: PUSH
67663: LD_INT 3
67665: NEG
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_INT 0
67673: PUSH
67674: LD_INT 3
67676: NEG
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 0
67684: PUSH
67685: LD_INT 4
67687: NEG
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 1
67695: PUSH
67696: LD_INT 3
67698: NEG
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: LD_INT 1
67706: PUSH
67707: LD_INT 2
67709: NEG
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 0
67717: PUSH
67718: LD_INT 2
67720: NEG
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: LD_INT 1
67728: NEG
67729: PUSH
67730: LD_INT 3
67732: NEG
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: PUSH
67738: LD_INT 1
67740: NEG
67741: PUSH
67742: LD_INT 4
67744: NEG
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 2
67752: PUSH
67753: LD_INT 2
67755: NEG
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 2
67763: NEG
67764: PUSH
67765: LD_INT 4
67767: NEG
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 4
67775: PUSH
67776: LD_INT 0
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 4
67785: PUSH
67786: LD_INT 1
67788: NEG
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 5
67796: PUSH
67797: LD_INT 0
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 5
67806: PUSH
67807: LD_INT 1
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 4
67816: PUSH
67817: LD_INT 1
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 3
67826: PUSH
67827: LD_INT 0
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 3
67836: PUSH
67837: LD_INT 1
67839: NEG
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 3
67847: PUSH
67848: LD_INT 2
67850: NEG
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 5
67858: PUSH
67859: LD_INT 2
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 3
67868: PUSH
67869: LD_INT 3
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: LD_INT 3
67878: PUSH
67879: LD_INT 2
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 4
67888: PUSH
67889: LD_INT 3
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 4
67898: PUSH
67899: LD_INT 4
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: PUSH
67906: LD_INT 3
67908: PUSH
67909: LD_INT 4
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 2
67918: PUSH
67919: LD_INT 3
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 2
67928: PUSH
67929: LD_INT 2
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 4
67938: PUSH
67939: LD_INT 2
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 2
67948: PUSH
67949: LD_INT 4
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 0
67958: PUSH
67959: LD_INT 4
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 0
67968: PUSH
67969: LD_INT 3
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 1
67978: PUSH
67979: LD_INT 4
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 1
67988: PUSH
67989: LD_INT 5
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_INT 0
67998: PUSH
67999: LD_INT 5
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PUSH
68006: LD_INT 1
68008: NEG
68009: PUSH
68010: LD_INT 4
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 1
68019: NEG
68020: PUSH
68021: LD_INT 3
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 2
68030: PUSH
68031: LD_INT 5
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: LD_INT 2
68040: NEG
68041: PUSH
68042: LD_INT 3
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: LIST
68066: LIST
68067: LIST
68068: LIST
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: LIST
68074: LIST
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: LIST
68082: LIST
68083: LIST
68084: LIST
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68096: LD_ADDR_VAR 0 34
68100: PUSH
68101: LD_INT 0
68103: PUSH
68104: LD_INT 4
68106: NEG
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 0
68114: PUSH
68115: LD_INT 5
68117: NEG
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: LD_INT 1
68125: PUSH
68126: LD_INT 4
68128: NEG
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: PUSH
68134: LD_INT 1
68136: PUSH
68137: LD_INT 3
68139: NEG
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: LD_INT 0
68147: PUSH
68148: LD_INT 3
68150: NEG
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 1
68158: NEG
68159: PUSH
68160: LD_INT 4
68162: NEG
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 1
68170: NEG
68171: PUSH
68172: LD_INT 5
68174: NEG
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: LD_INT 2
68182: PUSH
68183: LD_INT 3
68185: NEG
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: PUSH
68191: LD_INT 2
68193: NEG
68194: PUSH
68195: LD_INT 5
68197: NEG
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: LD_INT 3
68205: PUSH
68206: LD_INT 0
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: LD_INT 3
68215: PUSH
68216: LD_INT 1
68218: NEG
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: PUSH
68224: LD_INT 4
68226: PUSH
68227: LD_INT 0
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: LD_INT 4
68236: PUSH
68237: LD_INT 1
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 3
68246: PUSH
68247: LD_INT 1
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 2
68256: PUSH
68257: LD_INT 0
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 2
68266: PUSH
68267: LD_INT 1
68269: NEG
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 2
68277: PUSH
68278: LD_INT 2
68280: NEG
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PUSH
68286: LD_INT 4
68288: PUSH
68289: LD_INT 2
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: PUSH
68296: LD_INT 4
68298: PUSH
68299: LD_INT 4
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 4
68308: PUSH
68309: LD_INT 3
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: LD_INT 5
68318: PUSH
68319: LD_INT 4
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 5
68328: PUSH
68329: LD_INT 5
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: LD_INT 4
68338: PUSH
68339: LD_INT 5
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: LD_INT 3
68348: PUSH
68349: LD_INT 4
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 3
68358: PUSH
68359: LD_INT 3
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: PUSH
68366: LD_INT 5
68368: PUSH
68369: LD_INT 3
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 3
68378: PUSH
68379: LD_INT 5
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: LD_INT 0
68388: PUSH
68389: LD_INT 3
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: PUSH
68396: LD_INT 0
68398: PUSH
68399: LD_INT 2
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: LD_INT 1
68408: PUSH
68409: LD_INT 3
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: LD_INT 1
68418: PUSH
68419: LD_INT 4
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: LD_INT 0
68428: PUSH
68429: LD_INT 4
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 1
68438: NEG
68439: PUSH
68440: LD_INT 3
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: PUSH
68447: LD_INT 1
68449: NEG
68450: PUSH
68451: LD_INT 2
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PUSH
68458: LD_INT 2
68460: PUSH
68461: LD_INT 4
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 2
68470: NEG
68471: PUSH
68472: LD_INT 2
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 4
68481: NEG
68482: PUSH
68483: LD_INT 0
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: LD_INT 4
68492: NEG
68493: PUSH
68494: LD_INT 1
68496: NEG
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 3
68504: NEG
68505: PUSH
68506: LD_INT 0
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PUSH
68513: LD_INT 3
68515: NEG
68516: PUSH
68517: LD_INT 1
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: LD_INT 4
68526: NEG
68527: PUSH
68528: LD_INT 1
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 5
68537: NEG
68538: PUSH
68539: LD_INT 0
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: LD_INT 5
68548: NEG
68549: PUSH
68550: LD_INT 1
68552: NEG
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: LD_INT 5
68560: NEG
68561: PUSH
68562: LD_INT 2
68564: NEG
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: LD_INT 3
68572: NEG
68573: PUSH
68574: LD_INT 2
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: LIST
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: LIST
68608: LIST
68609: LIST
68610: LIST
68611: LIST
68612: LIST
68613: LIST
68614: LIST
68615: LIST
68616: LIST
68617: LIST
68618: LIST
68619: LIST
68620: LIST
68621: LIST
68622: LIST
68623: LIST
68624: LIST
68625: LIST
68626: LIST
68627: ST_TO_ADDR
// end ; end ;
68628: GO 68631
68630: POP
// case btype of b_depot , b_warehouse :
68631: LD_VAR 0 1
68635: PUSH
68636: LD_INT 0
68638: DOUBLE
68639: EQUAL
68640: IFTRUE 68650
68642: LD_INT 1
68644: DOUBLE
68645: EQUAL
68646: IFTRUE 68650
68648: GO 68851
68650: POP
// case nation of nation_american :
68651: LD_VAR 0 5
68655: PUSH
68656: LD_INT 1
68658: DOUBLE
68659: EQUAL
68660: IFTRUE 68664
68662: GO 68720
68664: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68665: LD_ADDR_VAR 0 9
68669: PUSH
68670: LD_VAR 0 11
68674: PUSH
68675: LD_VAR 0 12
68679: PUSH
68680: LD_VAR 0 13
68684: PUSH
68685: LD_VAR 0 14
68689: PUSH
68690: LD_VAR 0 15
68694: PUSH
68695: LD_VAR 0 16
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: PUSH
68708: LD_VAR 0 4
68712: PUSH
68713: LD_INT 1
68715: PLUS
68716: ARRAY
68717: ST_TO_ADDR
68718: GO 68849
68720: LD_INT 2
68722: DOUBLE
68723: EQUAL
68724: IFTRUE 68728
68726: GO 68784
68728: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68729: LD_ADDR_VAR 0 9
68733: PUSH
68734: LD_VAR 0 17
68738: PUSH
68739: LD_VAR 0 18
68743: PUSH
68744: LD_VAR 0 19
68748: PUSH
68749: LD_VAR 0 20
68753: PUSH
68754: LD_VAR 0 21
68758: PUSH
68759: LD_VAR 0 22
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: PUSH
68772: LD_VAR 0 4
68776: PUSH
68777: LD_INT 1
68779: PLUS
68780: ARRAY
68781: ST_TO_ADDR
68782: GO 68849
68784: LD_INT 3
68786: DOUBLE
68787: EQUAL
68788: IFTRUE 68792
68790: GO 68848
68792: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68793: LD_ADDR_VAR 0 9
68797: PUSH
68798: LD_VAR 0 23
68802: PUSH
68803: LD_VAR 0 24
68807: PUSH
68808: LD_VAR 0 25
68812: PUSH
68813: LD_VAR 0 26
68817: PUSH
68818: LD_VAR 0 27
68822: PUSH
68823: LD_VAR 0 28
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: PUSH
68836: LD_VAR 0 4
68840: PUSH
68841: LD_INT 1
68843: PLUS
68844: ARRAY
68845: ST_TO_ADDR
68846: GO 68849
68848: POP
68849: GO 69404
68851: LD_INT 2
68853: DOUBLE
68854: EQUAL
68855: IFTRUE 68865
68857: LD_INT 3
68859: DOUBLE
68860: EQUAL
68861: IFTRUE 68865
68863: GO 68921
68865: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68866: LD_ADDR_VAR 0 9
68870: PUSH
68871: LD_VAR 0 29
68875: PUSH
68876: LD_VAR 0 30
68880: PUSH
68881: LD_VAR 0 31
68885: PUSH
68886: LD_VAR 0 32
68890: PUSH
68891: LD_VAR 0 33
68895: PUSH
68896: LD_VAR 0 34
68900: PUSH
68901: EMPTY
68902: LIST
68903: LIST
68904: LIST
68905: LIST
68906: LIST
68907: LIST
68908: PUSH
68909: LD_VAR 0 4
68913: PUSH
68914: LD_INT 1
68916: PLUS
68917: ARRAY
68918: ST_TO_ADDR
68919: GO 69404
68921: LD_INT 16
68923: DOUBLE
68924: EQUAL
68925: IFTRUE 68983
68927: LD_INT 17
68929: DOUBLE
68930: EQUAL
68931: IFTRUE 68983
68933: LD_INT 18
68935: DOUBLE
68936: EQUAL
68937: IFTRUE 68983
68939: LD_INT 19
68941: DOUBLE
68942: EQUAL
68943: IFTRUE 68983
68945: LD_INT 22
68947: DOUBLE
68948: EQUAL
68949: IFTRUE 68983
68951: LD_INT 20
68953: DOUBLE
68954: EQUAL
68955: IFTRUE 68983
68957: LD_INT 21
68959: DOUBLE
68960: EQUAL
68961: IFTRUE 68983
68963: LD_INT 23
68965: DOUBLE
68966: EQUAL
68967: IFTRUE 68983
68969: LD_INT 24
68971: DOUBLE
68972: EQUAL
68973: IFTRUE 68983
68975: LD_INT 25
68977: DOUBLE
68978: EQUAL
68979: IFTRUE 68983
68981: GO 69039
68983: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68984: LD_ADDR_VAR 0 9
68988: PUSH
68989: LD_VAR 0 35
68993: PUSH
68994: LD_VAR 0 36
68998: PUSH
68999: LD_VAR 0 37
69003: PUSH
69004: LD_VAR 0 38
69008: PUSH
69009: LD_VAR 0 39
69013: PUSH
69014: LD_VAR 0 40
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: PUSH
69027: LD_VAR 0 4
69031: PUSH
69032: LD_INT 1
69034: PLUS
69035: ARRAY
69036: ST_TO_ADDR
69037: GO 69404
69039: LD_INT 6
69041: DOUBLE
69042: EQUAL
69043: IFTRUE 69095
69045: LD_INT 7
69047: DOUBLE
69048: EQUAL
69049: IFTRUE 69095
69051: LD_INT 8
69053: DOUBLE
69054: EQUAL
69055: IFTRUE 69095
69057: LD_INT 13
69059: DOUBLE
69060: EQUAL
69061: IFTRUE 69095
69063: LD_INT 12
69065: DOUBLE
69066: EQUAL
69067: IFTRUE 69095
69069: LD_INT 15
69071: DOUBLE
69072: EQUAL
69073: IFTRUE 69095
69075: LD_INT 11
69077: DOUBLE
69078: EQUAL
69079: IFTRUE 69095
69081: LD_INT 14
69083: DOUBLE
69084: EQUAL
69085: IFTRUE 69095
69087: LD_INT 10
69089: DOUBLE
69090: EQUAL
69091: IFTRUE 69095
69093: GO 69151
69095: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69096: LD_ADDR_VAR 0 9
69100: PUSH
69101: LD_VAR 0 41
69105: PUSH
69106: LD_VAR 0 42
69110: PUSH
69111: LD_VAR 0 43
69115: PUSH
69116: LD_VAR 0 44
69120: PUSH
69121: LD_VAR 0 45
69125: PUSH
69126: LD_VAR 0 46
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: PUSH
69139: LD_VAR 0 4
69143: PUSH
69144: LD_INT 1
69146: PLUS
69147: ARRAY
69148: ST_TO_ADDR
69149: GO 69404
69151: LD_INT 36
69153: DOUBLE
69154: EQUAL
69155: IFTRUE 69159
69157: GO 69215
69159: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69160: LD_ADDR_VAR 0 9
69164: PUSH
69165: LD_VAR 0 47
69169: PUSH
69170: LD_VAR 0 48
69174: PUSH
69175: LD_VAR 0 49
69179: PUSH
69180: LD_VAR 0 50
69184: PUSH
69185: LD_VAR 0 51
69189: PUSH
69190: LD_VAR 0 52
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: LIST
69202: PUSH
69203: LD_VAR 0 4
69207: PUSH
69208: LD_INT 1
69210: PLUS
69211: ARRAY
69212: ST_TO_ADDR
69213: GO 69404
69215: LD_INT 4
69217: DOUBLE
69218: EQUAL
69219: IFTRUE 69241
69221: LD_INT 5
69223: DOUBLE
69224: EQUAL
69225: IFTRUE 69241
69227: LD_INT 34
69229: DOUBLE
69230: EQUAL
69231: IFTRUE 69241
69233: LD_INT 37
69235: DOUBLE
69236: EQUAL
69237: IFTRUE 69241
69239: GO 69297
69241: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69242: LD_ADDR_VAR 0 9
69246: PUSH
69247: LD_VAR 0 53
69251: PUSH
69252: LD_VAR 0 54
69256: PUSH
69257: LD_VAR 0 55
69261: PUSH
69262: LD_VAR 0 56
69266: PUSH
69267: LD_VAR 0 57
69271: PUSH
69272: LD_VAR 0 58
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: LIST
69283: LIST
69284: PUSH
69285: LD_VAR 0 4
69289: PUSH
69290: LD_INT 1
69292: PLUS
69293: ARRAY
69294: ST_TO_ADDR
69295: GO 69404
69297: LD_INT 31
69299: DOUBLE
69300: EQUAL
69301: IFTRUE 69347
69303: LD_INT 32
69305: DOUBLE
69306: EQUAL
69307: IFTRUE 69347
69309: LD_INT 33
69311: DOUBLE
69312: EQUAL
69313: IFTRUE 69347
69315: LD_INT 27
69317: DOUBLE
69318: EQUAL
69319: IFTRUE 69347
69321: LD_INT 26
69323: DOUBLE
69324: EQUAL
69325: IFTRUE 69347
69327: LD_INT 28
69329: DOUBLE
69330: EQUAL
69331: IFTRUE 69347
69333: LD_INT 29
69335: DOUBLE
69336: EQUAL
69337: IFTRUE 69347
69339: LD_INT 30
69341: DOUBLE
69342: EQUAL
69343: IFTRUE 69347
69345: GO 69403
69347: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69348: LD_ADDR_VAR 0 9
69352: PUSH
69353: LD_VAR 0 59
69357: PUSH
69358: LD_VAR 0 60
69362: PUSH
69363: LD_VAR 0 61
69367: PUSH
69368: LD_VAR 0 62
69372: PUSH
69373: LD_VAR 0 63
69377: PUSH
69378: LD_VAR 0 64
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: PUSH
69391: LD_VAR 0 4
69395: PUSH
69396: LD_INT 1
69398: PLUS
69399: ARRAY
69400: ST_TO_ADDR
69401: GO 69404
69403: POP
// temp_list2 = [ ] ;
69404: LD_ADDR_VAR 0 10
69408: PUSH
69409: EMPTY
69410: ST_TO_ADDR
// for i in temp_list do
69411: LD_ADDR_VAR 0 8
69415: PUSH
69416: LD_VAR 0 9
69420: PUSH
69421: FOR_IN
69422: IFFALSE 69474
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69424: LD_ADDR_VAR 0 10
69428: PUSH
69429: LD_VAR 0 10
69433: PUSH
69434: LD_VAR 0 8
69438: PUSH
69439: LD_INT 1
69441: ARRAY
69442: PUSH
69443: LD_VAR 0 2
69447: PLUS
69448: PUSH
69449: LD_VAR 0 8
69453: PUSH
69454: LD_INT 2
69456: ARRAY
69457: PUSH
69458: LD_VAR 0 3
69462: PLUS
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: EMPTY
69469: LIST
69470: ADD
69471: ST_TO_ADDR
69472: GO 69421
69474: POP
69475: POP
// result = temp_list2 ;
69476: LD_ADDR_VAR 0 7
69480: PUSH
69481: LD_VAR 0 10
69485: ST_TO_ADDR
// end ;
69486: LD_VAR 0 7
69490: RET
// export function EnemyInRange ( unit , dist ) ; begin
69491: LD_INT 0
69493: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69494: LD_ADDR_VAR 0 3
69498: PUSH
69499: LD_VAR 0 1
69503: PPUSH
69504: CALL_OW 255
69508: PPUSH
69509: LD_VAR 0 1
69513: PPUSH
69514: CALL_OW 250
69518: PPUSH
69519: LD_VAR 0 1
69523: PPUSH
69524: CALL_OW 251
69528: PPUSH
69529: LD_VAR 0 2
69533: PPUSH
69534: CALL 43595 0 4
69538: PUSH
69539: LD_INT 4
69541: ARRAY
69542: ST_TO_ADDR
// end ;
69543: LD_VAR 0 3
69547: RET
// export function PlayerSeeMe ( unit ) ; begin
69548: LD_INT 0
69550: PPUSH
// result := See ( your_side , unit ) ;
69551: LD_ADDR_VAR 0 2
69555: PUSH
69556: LD_OWVAR 2
69560: PPUSH
69561: LD_VAR 0 1
69565: PPUSH
69566: CALL_OW 292
69570: ST_TO_ADDR
// end ;
69571: LD_VAR 0 2
69575: RET
// export function ReverseDir ( unit ) ; begin
69576: LD_INT 0
69578: PPUSH
// if not unit then
69579: LD_VAR 0 1
69583: NOT
69584: IFFALSE 69588
// exit ;
69586: GO 69611
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69588: LD_ADDR_VAR 0 2
69592: PUSH
69593: LD_VAR 0 1
69597: PPUSH
69598: CALL_OW 254
69602: PUSH
69603: LD_INT 3
69605: PLUS
69606: PUSH
69607: LD_INT 6
69609: MOD
69610: ST_TO_ADDR
// end ;
69611: LD_VAR 0 2
69615: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
69616: LD_INT 0
69618: PPUSH
69619: PPUSH
69620: PPUSH
69621: PPUSH
69622: PPUSH
// if not hexes then
69623: LD_VAR 0 2
69627: NOT
69628: IFFALSE 69632
// exit ;
69630: GO 69780
// dist := 9999 ;
69632: LD_ADDR_VAR 0 5
69636: PUSH
69637: LD_INT 9999
69639: ST_TO_ADDR
// for i = 1 to hexes do
69640: LD_ADDR_VAR 0 4
69644: PUSH
69645: DOUBLE
69646: LD_INT 1
69648: DEC
69649: ST_TO_ADDR
69650: LD_VAR 0 2
69654: PUSH
69655: FOR_TO
69656: IFFALSE 69768
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
69658: LD_VAR 0 1
69662: PPUSH
69663: LD_VAR 0 2
69667: PUSH
69668: LD_VAR 0 4
69672: ARRAY
69673: PUSH
69674: LD_INT 1
69676: ARRAY
69677: PPUSH
69678: LD_VAR 0 2
69682: PUSH
69683: LD_VAR 0 4
69687: ARRAY
69688: PUSH
69689: LD_INT 2
69691: ARRAY
69692: PPUSH
69693: CALL_OW 297
69697: PUSH
69698: LD_VAR 0 5
69702: LESS
69703: IFFALSE 69766
// begin hex := hexes [ i ] ;
69705: LD_ADDR_VAR 0 7
69709: PUSH
69710: LD_VAR 0 2
69714: PUSH
69715: LD_VAR 0 4
69719: ARRAY
69720: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69721: LD_ADDR_VAR 0 5
69725: PUSH
69726: LD_VAR 0 1
69730: PPUSH
69731: LD_VAR 0 2
69735: PUSH
69736: LD_VAR 0 4
69740: ARRAY
69741: PUSH
69742: LD_INT 1
69744: ARRAY
69745: PPUSH
69746: LD_VAR 0 2
69750: PUSH
69751: LD_VAR 0 4
69755: ARRAY
69756: PUSH
69757: LD_INT 2
69759: ARRAY
69760: PPUSH
69761: CALL_OW 297
69765: ST_TO_ADDR
// end ; end ;
69766: GO 69655
69768: POP
69769: POP
// result := hex ;
69770: LD_ADDR_VAR 0 3
69774: PUSH
69775: LD_VAR 0 7
69779: ST_TO_ADDR
// end ;
69780: LD_VAR 0 3
69784: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69785: LD_INT 0
69787: PPUSH
69788: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69789: LD_VAR 0 1
69793: NOT
69794: PUSH
69795: LD_VAR 0 1
69799: PUSH
69800: LD_INT 21
69802: PUSH
69803: LD_INT 2
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: LD_INT 23
69812: PUSH
69813: LD_INT 2
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PPUSH
69824: CALL_OW 69
69828: IN
69829: NOT
69830: OR
69831: IFFALSE 69835
// exit ;
69833: GO 69882
// for i = 1 to 3 do
69835: LD_ADDR_VAR 0 3
69839: PUSH
69840: DOUBLE
69841: LD_INT 1
69843: DEC
69844: ST_TO_ADDR
69845: LD_INT 3
69847: PUSH
69848: FOR_TO
69849: IFFALSE 69880
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69851: LD_VAR 0 1
69855: PPUSH
69856: CALL_OW 250
69860: PPUSH
69861: LD_VAR 0 1
69865: PPUSH
69866: CALL_OW 251
69870: PPUSH
69871: LD_INT 1
69873: PPUSH
69874: CALL_OW 453
69878: GO 69848
69880: POP
69881: POP
// end ;
69882: LD_VAR 0 2
69886: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69887: LD_INT 0
69889: PPUSH
69890: PPUSH
69891: PPUSH
69892: PPUSH
69893: PPUSH
69894: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69895: LD_VAR 0 1
69899: NOT
69900: PUSH
69901: LD_VAR 0 2
69905: NOT
69906: OR
69907: PUSH
69908: LD_VAR 0 1
69912: PPUSH
69913: CALL_OW 314
69917: OR
69918: IFFALSE 69922
// exit ;
69920: GO 70363
// x := GetX ( enemy_unit ) ;
69922: LD_ADDR_VAR 0 7
69926: PUSH
69927: LD_VAR 0 2
69931: PPUSH
69932: CALL_OW 250
69936: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69937: LD_ADDR_VAR 0 8
69941: PUSH
69942: LD_VAR 0 2
69946: PPUSH
69947: CALL_OW 251
69951: ST_TO_ADDR
// if not x or not y then
69952: LD_VAR 0 7
69956: NOT
69957: PUSH
69958: LD_VAR 0 8
69962: NOT
69963: OR
69964: IFFALSE 69968
// exit ;
69966: GO 70363
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69968: LD_ADDR_VAR 0 6
69972: PUSH
69973: LD_VAR 0 7
69977: PPUSH
69978: LD_INT 0
69980: PPUSH
69981: LD_INT 4
69983: PPUSH
69984: CALL_OW 272
69988: PUSH
69989: LD_VAR 0 8
69993: PPUSH
69994: LD_INT 0
69996: PPUSH
69997: LD_INT 4
69999: PPUSH
70000: CALL_OW 273
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: PUSH
70009: LD_VAR 0 7
70013: PPUSH
70014: LD_INT 1
70016: PPUSH
70017: LD_INT 4
70019: PPUSH
70020: CALL_OW 272
70024: PUSH
70025: LD_VAR 0 8
70029: PPUSH
70030: LD_INT 1
70032: PPUSH
70033: LD_INT 4
70035: PPUSH
70036: CALL_OW 273
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: PUSH
70045: LD_VAR 0 7
70049: PPUSH
70050: LD_INT 2
70052: PPUSH
70053: LD_INT 4
70055: PPUSH
70056: CALL_OW 272
70060: PUSH
70061: LD_VAR 0 8
70065: PPUSH
70066: LD_INT 2
70068: PPUSH
70069: LD_INT 4
70071: PPUSH
70072: CALL_OW 273
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: PUSH
70081: LD_VAR 0 7
70085: PPUSH
70086: LD_INT 3
70088: PPUSH
70089: LD_INT 4
70091: PPUSH
70092: CALL_OW 272
70096: PUSH
70097: LD_VAR 0 8
70101: PPUSH
70102: LD_INT 3
70104: PPUSH
70105: LD_INT 4
70107: PPUSH
70108: CALL_OW 273
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: PUSH
70117: LD_VAR 0 7
70121: PPUSH
70122: LD_INT 4
70124: PPUSH
70125: LD_INT 4
70127: PPUSH
70128: CALL_OW 272
70132: PUSH
70133: LD_VAR 0 8
70137: PPUSH
70138: LD_INT 4
70140: PPUSH
70141: LD_INT 4
70143: PPUSH
70144: CALL_OW 273
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_VAR 0 7
70157: PPUSH
70158: LD_INT 5
70160: PPUSH
70161: LD_INT 4
70163: PPUSH
70164: CALL_OW 272
70168: PUSH
70169: LD_VAR 0 8
70173: PPUSH
70174: LD_INT 5
70176: PPUSH
70177: LD_INT 4
70179: PPUSH
70180: CALL_OW 273
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: EMPTY
70190: LIST
70191: LIST
70192: LIST
70193: LIST
70194: LIST
70195: LIST
70196: ST_TO_ADDR
// for i = tmp downto 1 do
70197: LD_ADDR_VAR 0 4
70201: PUSH
70202: DOUBLE
70203: LD_VAR 0 6
70207: INC
70208: ST_TO_ADDR
70209: LD_INT 1
70211: PUSH
70212: FOR_DOWNTO
70213: IFFALSE 70314
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70215: LD_VAR 0 6
70219: PUSH
70220: LD_VAR 0 4
70224: ARRAY
70225: PUSH
70226: LD_INT 1
70228: ARRAY
70229: PPUSH
70230: LD_VAR 0 6
70234: PUSH
70235: LD_VAR 0 4
70239: ARRAY
70240: PUSH
70241: LD_INT 2
70243: ARRAY
70244: PPUSH
70245: CALL_OW 488
70249: NOT
70250: PUSH
70251: LD_VAR 0 6
70255: PUSH
70256: LD_VAR 0 4
70260: ARRAY
70261: PUSH
70262: LD_INT 1
70264: ARRAY
70265: PPUSH
70266: LD_VAR 0 6
70270: PUSH
70271: LD_VAR 0 4
70275: ARRAY
70276: PUSH
70277: LD_INT 2
70279: ARRAY
70280: PPUSH
70281: CALL_OW 428
70285: PUSH
70286: LD_INT 0
70288: NONEQUAL
70289: OR
70290: IFFALSE 70312
// tmp := Delete ( tmp , i ) ;
70292: LD_ADDR_VAR 0 6
70296: PUSH
70297: LD_VAR 0 6
70301: PPUSH
70302: LD_VAR 0 4
70306: PPUSH
70307: CALL_OW 3
70311: ST_TO_ADDR
70312: GO 70212
70314: POP
70315: POP
// j := GetClosestHex ( unit , tmp ) ;
70316: LD_ADDR_VAR 0 5
70320: PUSH
70321: LD_VAR 0 1
70325: PPUSH
70326: LD_VAR 0 6
70330: PPUSH
70331: CALL 69616 0 2
70335: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70336: LD_VAR 0 1
70340: PPUSH
70341: LD_VAR 0 5
70345: PUSH
70346: LD_INT 1
70348: ARRAY
70349: PPUSH
70350: LD_VAR 0 5
70354: PUSH
70355: LD_INT 2
70357: ARRAY
70358: PPUSH
70359: CALL_OW 111
// end ;
70363: LD_VAR 0 3
70367: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70368: LD_INT 0
70370: PPUSH
70371: PPUSH
70372: PPUSH
// uc_side = 0 ;
70373: LD_ADDR_OWVAR 20
70377: PUSH
70378: LD_INT 0
70380: ST_TO_ADDR
// uc_nation = 0 ;
70381: LD_ADDR_OWVAR 21
70385: PUSH
70386: LD_INT 0
70388: ST_TO_ADDR
// InitHc ;
70389: CALL_OW 19
// InitVc ;
70393: CALL_OW 20
// if mastodonts then
70397: LD_VAR 0 6
70401: IFFALSE 70468
// for i = 1 to mastodonts do
70403: LD_ADDR_VAR 0 11
70407: PUSH
70408: DOUBLE
70409: LD_INT 1
70411: DEC
70412: ST_TO_ADDR
70413: LD_VAR 0 6
70417: PUSH
70418: FOR_TO
70419: IFFALSE 70466
// begin vc_chassis := 31 ;
70421: LD_ADDR_OWVAR 37
70425: PUSH
70426: LD_INT 31
70428: ST_TO_ADDR
// vc_control := control_rider ;
70429: LD_ADDR_OWVAR 38
70433: PUSH
70434: LD_INT 4
70436: ST_TO_ADDR
// animal := CreateVehicle ;
70437: LD_ADDR_VAR 0 12
70441: PUSH
70442: CALL_OW 45
70446: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70447: LD_VAR 0 12
70451: PPUSH
70452: LD_VAR 0 8
70456: PPUSH
70457: LD_INT 0
70459: PPUSH
70460: CALL 72537 0 3
// end ;
70464: GO 70418
70466: POP
70467: POP
// if horses then
70468: LD_VAR 0 5
70472: IFFALSE 70539
// for i = 1 to horses do
70474: LD_ADDR_VAR 0 11
70478: PUSH
70479: DOUBLE
70480: LD_INT 1
70482: DEC
70483: ST_TO_ADDR
70484: LD_VAR 0 5
70488: PUSH
70489: FOR_TO
70490: IFFALSE 70537
// begin hc_class := 21 ;
70492: LD_ADDR_OWVAR 28
70496: PUSH
70497: LD_INT 21
70499: ST_TO_ADDR
// hc_gallery :=  ;
70500: LD_ADDR_OWVAR 33
70504: PUSH
70505: LD_STRING 
70507: ST_TO_ADDR
// animal := CreateHuman ;
70508: LD_ADDR_VAR 0 12
70512: PUSH
70513: CALL_OW 44
70517: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70518: LD_VAR 0 12
70522: PPUSH
70523: LD_VAR 0 8
70527: PPUSH
70528: LD_INT 0
70530: PPUSH
70531: CALL 72537 0 3
// end ;
70535: GO 70489
70537: POP
70538: POP
// if birds then
70539: LD_VAR 0 1
70543: IFFALSE 70610
// for i = 1 to birds do
70545: LD_ADDR_VAR 0 11
70549: PUSH
70550: DOUBLE
70551: LD_INT 1
70553: DEC
70554: ST_TO_ADDR
70555: LD_VAR 0 1
70559: PUSH
70560: FOR_TO
70561: IFFALSE 70608
// begin hc_class = 18 ;
70563: LD_ADDR_OWVAR 28
70567: PUSH
70568: LD_INT 18
70570: ST_TO_ADDR
// hc_gallery =  ;
70571: LD_ADDR_OWVAR 33
70575: PUSH
70576: LD_STRING 
70578: ST_TO_ADDR
// animal := CreateHuman ;
70579: LD_ADDR_VAR 0 12
70583: PUSH
70584: CALL_OW 44
70588: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70589: LD_VAR 0 12
70593: PPUSH
70594: LD_VAR 0 8
70598: PPUSH
70599: LD_INT 0
70601: PPUSH
70602: CALL 72537 0 3
// end ;
70606: GO 70560
70608: POP
70609: POP
// if tigers then
70610: LD_VAR 0 2
70614: IFFALSE 70698
// for i = 1 to tigers do
70616: LD_ADDR_VAR 0 11
70620: PUSH
70621: DOUBLE
70622: LD_INT 1
70624: DEC
70625: ST_TO_ADDR
70626: LD_VAR 0 2
70630: PUSH
70631: FOR_TO
70632: IFFALSE 70696
// begin hc_class = class_tiger ;
70634: LD_ADDR_OWVAR 28
70638: PUSH
70639: LD_INT 14
70641: ST_TO_ADDR
// hc_gallery =  ;
70642: LD_ADDR_OWVAR 33
70646: PUSH
70647: LD_STRING 
70649: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70650: LD_ADDR_OWVAR 35
70654: PUSH
70655: LD_INT 7
70657: NEG
70658: PPUSH
70659: LD_INT 7
70661: PPUSH
70662: CALL_OW 12
70666: ST_TO_ADDR
// animal := CreateHuman ;
70667: LD_ADDR_VAR 0 12
70671: PUSH
70672: CALL_OW 44
70676: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70677: LD_VAR 0 12
70681: PPUSH
70682: LD_VAR 0 8
70686: PPUSH
70687: LD_INT 0
70689: PPUSH
70690: CALL 72537 0 3
// end ;
70694: GO 70631
70696: POP
70697: POP
// if apemans then
70698: LD_VAR 0 3
70702: IFFALSE 70825
// for i = 1 to apemans do
70704: LD_ADDR_VAR 0 11
70708: PUSH
70709: DOUBLE
70710: LD_INT 1
70712: DEC
70713: ST_TO_ADDR
70714: LD_VAR 0 3
70718: PUSH
70719: FOR_TO
70720: IFFALSE 70823
// begin hc_class = class_apeman ;
70722: LD_ADDR_OWVAR 28
70726: PUSH
70727: LD_INT 12
70729: ST_TO_ADDR
// hc_gallery =  ;
70730: LD_ADDR_OWVAR 33
70734: PUSH
70735: LD_STRING 
70737: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
70738: LD_ADDR_OWVAR 35
70742: PUSH
70743: LD_INT 5
70745: NEG
70746: PPUSH
70747: LD_INT 5
70749: PPUSH
70750: CALL_OW 12
70754: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70755: LD_ADDR_OWVAR 31
70759: PUSH
70760: LD_INT 1
70762: PPUSH
70763: LD_INT 3
70765: PPUSH
70766: CALL_OW 12
70770: PUSH
70771: LD_INT 1
70773: PPUSH
70774: LD_INT 3
70776: PPUSH
70777: CALL_OW 12
70781: PUSH
70782: LD_INT 0
70784: PUSH
70785: LD_INT 0
70787: PUSH
70788: EMPTY
70789: LIST
70790: LIST
70791: LIST
70792: LIST
70793: ST_TO_ADDR
// animal := CreateHuman ;
70794: LD_ADDR_VAR 0 12
70798: PUSH
70799: CALL_OW 44
70803: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70804: LD_VAR 0 12
70808: PPUSH
70809: LD_VAR 0 8
70813: PPUSH
70814: LD_INT 0
70816: PPUSH
70817: CALL 72537 0 3
// end ;
70821: GO 70719
70823: POP
70824: POP
// if enchidnas then
70825: LD_VAR 0 4
70829: IFFALSE 70896
// for i = 1 to enchidnas do
70831: LD_ADDR_VAR 0 11
70835: PUSH
70836: DOUBLE
70837: LD_INT 1
70839: DEC
70840: ST_TO_ADDR
70841: LD_VAR 0 4
70845: PUSH
70846: FOR_TO
70847: IFFALSE 70894
// begin hc_class = 13 ;
70849: LD_ADDR_OWVAR 28
70853: PUSH
70854: LD_INT 13
70856: ST_TO_ADDR
// hc_gallery =  ;
70857: LD_ADDR_OWVAR 33
70861: PUSH
70862: LD_STRING 
70864: ST_TO_ADDR
// animal := CreateHuman ;
70865: LD_ADDR_VAR 0 12
70869: PUSH
70870: CALL_OW 44
70874: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70875: LD_VAR 0 12
70879: PPUSH
70880: LD_VAR 0 8
70884: PPUSH
70885: LD_INT 0
70887: PPUSH
70888: CALL 72537 0 3
// end ;
70892: GO 70846
70894: POP
70895: POP
// if fishes then
70896: LD_VAR 0 7
70900: IFFALSE 70967
// for i = 1 to fishes do
70902: LD_ADDR_VAR 0 11
70906: PUSH
70907: DOUBLE
70908: LD_INT 1
70910: DEC
70911: ST_TO_ADDR
70912: LD_VAR 0 7
70916: PUSH
70917: FOR_TO
70918: IFFALSE 70965
// begin hc_class = 20 ;
70920: LD_ADDR_OWVAR 28
70924: PUSH
70925: LD_INT 20
70927: ST_TO_ADDR
// hc_gallery =  ;
70928: LD_ADDR_OWVAR 33
70932: PUSH
70933: LD_STRING 
70935: ST_TO_ADDR
// animal := CreateHuman ;
70936: LD_ADDR_VAR 0 12
70940: PUSH
70941: CALL_OW 44
70945: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70946: LD_VAR 0 12
70950: PPUSH
70951: LD_VAR 0 9
70955: PPUSH
70956: LD_INT 0
70958: PPUSH
70959: CALL 72537 0 3
// end ;
70963: GO 70917
70965: POP
70966: POP
// end ;
70967: LD_VAR 0 10
70971: RET
// export function WantHeal ( sci , unit ) ; begin
70972: LD_INT 0
70974: PPUSH
// if GetTaskList ( sci ) > 0 then
70975: LD_VAR 0 1
70979: PPUSH
70980: CALL_OW 437
70984: PUSH
70985: LD_INT 0
70987: GREATER
70988: IFFALSE 71058
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70990: LD_VAR 0 1
70994: PPUSH
70995: CALL_OW 437
70999: PUSH
71000: LD_INT 1
71002: ARRAY
71003: PUSH
71004: LD_INT 1
71006: ARRAY
71007: PUSH
71008: LD_STRING l
71010: EQUAL
71011: PUSH
71012: LD_VAR 0 1
71016: PPUSH
71017: CALL_OW 437
71021: PUSH
71022: LD_INT 1
71024: ARRAY
71025: PUSH
71026: LD_INT 4
71028: ARRAY
71029: PUSH
71030: LD_VAR 0 2
71034: EQUAL
71035: AND
71036: IFFALSE 71048
// result := true else
71038: LD_ADDR_VAR 0 3
71042: PUSH
71043: LD_INT 1
71045: ST_TO_ADDR
71046: GO 71056
// result := false ;
71048: LD_ADDR_VAR 0 3
71052: PUSH
71053: LD_INT 0
71055: ST_TO_ADDR
// end else
71056: GO 71066
// result := false ;
71058: LD_ADDR_VAR 0 3
71062: PUSH
71063: LD_INT 0
71065: ST_TO_ADDR
// end ;
71066: LD_VAR 0 3
71070: RET
// export function HealTarget ( sci ) ; begin
71071: LD_INT 0
71073: PPUSH
// if not sci then
71074: LD_VAR 0 1
71078: NOT
71079: IFFALSE 71083
// exit ;
71081: GO 71148
// result := 0 ;
71083: LD_ADDR_VAR 0 2
71087: PUSH
71088: LD_INT 0
71090: ST_TO_ADDR
// if GetTaskList ( sci ) then
71091: LD_VAR 0 1
71095: PPUSH
71096: CALL_OW 437
71100: IFFALSE 71148
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71102: LD_VAR 0 1
71106: PPUSH
71107: CALL_OW 437
71111: PUSH
71112: LD_INT 1
71114: ARRAY
71115: PUSH
71116: LD_INT 1
71118: ARRAY
71119: PUSH
71120: LD_STRING l
71122: EQUAL
71123: IFFALSE 71148
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71125: LD_ADDR_VAR 0 2
71129: PUSH
71130: LD_VAR 0 1
71134: PPUSH
71135: CALL_OW 437
71139: PUSH
71140: LD_INT 1
71142: ARRAY
71143: PUSH
71144: LD_INT 4
71146: ARRAY
71147: ST_TO_ADDR
// end ;
71148: LD_VAR 0 2
71152: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71153: LD_INT 0
71155: PPUSH
71156: PPUSH
71157: PPUSH
71158: PPUSH
// if not base_units then
71159: LD_VAR 0 1
71163: NOT
71164: IFFALSE 71168
// exit ;
71166: GO 71255
// result := false ;
71168: LD_ADDR_VAR 0 2
71172: PUSH
71173: LD_INT 0
71175: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71176: LD_ADDR_VAR 0 5
71180: PUSH
71181: LD_VAR 0 1
71185: PPUSH
71186: LD_INT 21
71188: PUSH
71189: LD_INT 3
71191: PUSH
71192: EMPTY
71193: LIST
71194: LIST
71195: PPUSH
71196: CALL_OW 72
71200: ST_TO_ADDR
// if not tmp then
71201: LD_VAR 0 5
71205: NOT
71206: IFFALSE 71210
// exit ;
71208: GO 71255
// for i in tmp do
71210: LD_ADDR_VAR 0 3
71214: PUSH
71215: LD_VAR 0 5
71219: PUSH
71220: FOR_IN
71221: IFFALSE 71253
// begin result := EnemyInRange ( i , 22 ) ;
71223: LD_ADDR_VAR 0 2
71227: PUSH
71228: LD_VAR 0 3
71232: PPUSH
71233: LD_INT 22
71235: PPUSH
71236: CALL 69491 0 2
71240: ST_TO_ADDR
// if result then
71241: LD_VAR 0 2
71245: IFFALSE 71251
// exit ;
71247: POP
71248: POP
71249: GO 71255
// end ;
71251: GO 71220
71253: POP
71254: POP
// end ;
71255: LD_VAR 0 2
71259: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
71260: LD_INT 0
71262: PPUSH
71263: PPUSH
// if not units then
71264: LD_VAR 0 1
71268: NOT
71269: IFFALSE 71273
// exit ;
71271: GO 71343
// result := [ ] ;
71273: LD_ADDR_VAR 0 3
71277: PUSH
71278: EMPTY
71279: ST_TO_ADDR
// for i in units do
71280: LD_ADDR_VAR 0 4
71284: PUSH
71285: LD_VAR 0 1
71289: PUSH
71290: FOR_IN
71291: IFFALSE 71341
// if GetTag ( i ) = tag then
71293: LD_VAR 0 4
71297: PPUSH
71298: CALL_OW 110
71302: PUSH
71303: LD_VAR 0 2
71307: EQUAL
71308: IFFALSE 71339
// result := Insert ( result , result + 1 , i ) ;
71310: LD_ADDR_VAR 0 3
71314: PUSH
71315: LD_VAR 0 3
71319: PPUSH
71320: LD_VAR 0 3
71324: PUSH
71325: LD_INT 1
71327: PLUS
71328: PPUSH
71329: LD_VAR 0 4
71333: PPUSH
71334: CALL_OW 2
71338: ST_TO_ADDR
71339: GO 71290
71341: POP
71342: POP
// end ;
71343: LD_VAR 0 3
71347: RET
// export function IsDriver ( un ) ; begin
71348: LD_INT 0
71350: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71351: LD_ADDR_VAR 0 2
71355: PUSH
71356: LD_VAR 0 1
71360: PUSH
71361: LD_INT 55
71363: PUSH
71364: EMPTY
71365: LIST
71366: PPUSH
71367: CALL_OW 69
71371: IN
71372: ST_TO_ADDR
// end ;
71373: LD_VAR 0 2
71377: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71378: LD_INT 0
71380: PPUSH
71381: PPUSH
// list := [ ] ;
71382: LD_ADDR_VAR 0 5
71386: PUSH
71387: EMPTY
71388: ST_TO_ADDR
// case d of 0 :
71389: LD_VAR 0 3
71393: PUSH
71394: LD_INT 0
71396: DOUBLE
71397: EQUAL
71398: IFTRUE 71402
71400: GO 71535
71402: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71403: LD_ADDR_VAR 0 5
71407: PUSH
71408: LD_VAR 0 1
71412: PUSH
71413: LD_INT 4
71415: MINUS
71416: PUSH
71417: LD_VAR 0 2
71421: PUSH
71422: LD_INT 4
71424: MINUS
71425: PUSH
71426: LD_INT 2
71428: PUSH
71429: EMPTY
71430: LIST
71431: LIST
71432: LIST
71433: PUSH
71434: LD_VAR 0 1
71438: PUSH
71439: LD_INT 3
71441: MINUS
71442: PUSH
71443: LD_VAR 0 2
71447: PUSH
71448: LD_INT 1
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: LIST
71455: PUSH
71456: LD_VAR 0 1
71460: PUSH
71461: LD_INT 4
71463: PLUS
71464: PUSH
71465: LD_VAR 0 2
71469: PUSH
71470: LD_INT 4
71472: PUSH
71473: EMPTY
71474: LIST
71475: LIST
71476: LIST
71477: PUSH
71478: LD_VAR 0 1
71482: PUSH
71483: LD_INT 3
71485: PLUS
71486: PUSH
71487: LD_VAR 0 2
71491: PUSH
71492: LD_INT 3
71494: PLUS
71495: PUSH
71496: LD_INT 5
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: LIST
71503: PUSH
71504: LD_VAR 0 1
71508: PUSH
71509: LD_VAR 0 2
71513: PUSH
71514: LD_INT 4
71516: PLUS
71517: PUSH
71518: LD_INT 0
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: LIST
71525: PUSH
71526: EMPTY
71527: LIST
71528: LIST
71529: LIST
71530: LIST
71531: LIST
71532: ST_TO_ADDR
// end ; 1 :
71533: GO 72233
71535: LD_INT 1
71537: DOUBLE
71538: EQUAL
71539: IFTRUE 71543
71541: GO 71676
71543: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71544: LD_ADDR_VAR 0 5
71548: PUSH
71549: LD_VAR 0 1
71553: PUSH
71554: LD_VAR 0 2
71558: PUSH
71559: LD_INT 4
71561: MINUS
71562: PUSH
71563: LD_INT 3
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: LIST
71570: PUSH
71571: LD_VAR 0 1
71575: PUSH
71576: LD_INT 3
71578: MINUS
71579: PUSH
71580: LD_VAR 0 2
71584: PUSH
71585: LD_INT 3
71587: MINUS
71588: PUSH
71589: LD_INT 2
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: LIST
71596: PUSH
71597: LD_VAR 0 1
71601: PUSH
71602: LD_INT 4
71604: MINUS
71605: PUSH
71606: LD_VAR 0 2
71610: PUSH
71611: LD_INT 1
71613: PUSH
71614: EMPTY
71615: LIST
71616: LIST
71617: LIST
71618: PUSH
71619: LD_VAR 0 1
71623: PUSH
71624: LD_VAR 0 2
71628: PUSH
71629: LD_INT 3
71631: PLUS
71632: PUSH
71633: LD_INT 0
71635: PUSH
71636: EMPTY
71637: LIST
71638: LIST
71639: LIST
71640: PUSH
71641: LD_VAR 0 1
71645: PUSH
71646: LD_INT 4
71648: PLUS
71649: PUSH
71650: LD_VAR 0 2
71654: PUSH
71655: LD_INT 4
71657: PLUS
71658: PUSH
71659: LD_INT 5
71661: PUSH
71662: EMPTY
71663: LIST
71664: LIST
71665: LIST
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: LIST
71673: ST_TO_ADDR
// end ; 2 :
71674: GO 72233
71676: LD_INT 2
71678: DOUBLE
71679: EQUAL
71680: IFTRUE 71684
71682: GO 71813
71684: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71685: LD_ADDR_VAR 0 5
71689: PUSH
71690: LD_VAR 0 1
71694: PUSH
71695: LD_VAR 0 2
71699: PUSH
71700: LD_INT 3
71702: MINUS
71703: PUSH
71704: LD_INT 3
71706: PUSH
71707: EMPTY
71708: LIST
71709: LIST
71710: LIST
71711: PUSH
71712: LD_VAR 0 1
71716: PUSH
71717: LD_INT 4
71719: PLUS
71720: PUSH
71721: LD_VAR 0 2
71725: PUSH
71726: LD_INT 4
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: LIST
71733: PUSH
71734: LD_VAR 0 1
71738: PUSH
71739: LD_VAR 0 2
71743: PUSH
71744: LD_INT 4
71746: PLUS
71747: PUSH
71748: LD_INT 0
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: LIST
71755: PUSH
71756: LD_VAR 0 1
71760: PUSH
71761: LD_INT 3
71763: MINUS
71764: PUSH
71765: LD_VAR 0 2
71769: PUSH
71770: LD_INT 1
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: LIST
71777: PUSH
71778: LD_VAR 0 1
71782: PUSH
71783: LD_INT 4
71785: MINUS
71786: PUSH
71787: LD_VAR 0 2
71791: PUSH
71792: LD_INT 4
71794: MINUS
71795: PUSH
71796: LD_INT 2
71798: PUSH
71799: EMPTY
71800: LIST
71801: LIST
71802: LIST
71803: PUSH
71804: EMPTY
71805: LIST
71806: LIST
71807: LIST
71808: LIST
71809: LIST
71810: ST_TO_ADDR
// end ; 3 :
71811: GO 72233
71813: LD_INT 3
71815: DOUBLE
71816: EQUAL
71817: IFTRUE 71821
71819: GO 71954
71821: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71822: LD_ADDR_VAR 0 5
71826: PUSH
71827: LD_VAR 0 1
71831: PUSH
71832: LD_INT 3
71834: PLUS
71835: PUSH
71836: LD_VAR 0 2
71840: PUSH
71841: LD_INT 4
71843: PUSH
71844: EMPTY
71845: LIST
71846: LIST
71847: LIST
71848: PUSH
71849: LD_VAR 0 1
71853: PUSH
71854: LD_INT 4
71856: PLUS
71857: PUSH
71858: LD_VAR 0 2
71862: PUSH
71863: LD_INT 4
71865: PLUS
71866: PUSH
71867: LD_INT 5
71869: PUSH
71870: EMPTY
71871: LIST
71872: LIST
71873: LIST
71874: PUSH
71875: LD_VAR 0 1
71879: PUSH
71880: LD_INT 4
71882: MINUS
71883: PUSH
71884: LD_VAR 0 2
71888: PUSH
71889: LD_INT 1
71891: PUSH
71892: EMPTY
71893: LIST
71894: LIST
71895: LIST
71896: PUSH
71897: LD_VAR 0 1
71901: PUSH
71902: LD_VAR 0 2
71906: PUSH
71907: LD_INT 4
71909: MINUS
71910: PUSH
71911: LD_INT 3
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: LIST
71918: PUSH
71919: LD_VAR 0 1
71923: PUSH
71924: LD_INT 3
71926: MINUS
71927: PUSH
71928: LD_VAR 0 2
71932: PUSH
71933: LD_INT 3
71935: MINUS
71936: PUSH
71937: LD_INT 2
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: LIST
71944: PUSH
71945: EMPTY
71946: LIST
71947: LIST
71948: LIST
71949: LIST
71950: LIST
71951: ST_TO_ADDR
// end ; 4 :
71952: GO 72233
71954: LD_INT 4
71956: DOUBLE
71957: EQUAL
71958: IFTRUE 71962
71960: GO 72095
71962: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71963: LD_ADDR_VAR 0 5
71967: PUSH
71968: LD_VAR 0 1
71972: PUSH
71973: LD_VAR 0 2
71977: PUSH
71978: LD_INT 4
71980: PLUS
71981: PUSH
71982: LD_INT 0
71984: PUSH
71985: EMPTY
71986: LIST
71987: LIST
71988: LIST
71989: PUSH
71990: LD_VAR 0 1
71994: PUSH
71995: LD_INT 3
71997: PLUS
71998: PUSH
71999: LD_VAR 0 2
72003: PUSH
72004: LD_INT 3
72006: PLUS
72007: PUSH
72008: LD_INT 5
72010: PUSH
72011: EMPTY
72012: LIST
72013: LIST
72014: LIST
72015: PUSH
72016: LD_VAR 0 1
72020: PUSH
72021: LD_INT 4
72023: PLUS
72024: PUSH
72025: LD_VAR 0 2
72029: PUSH
72030: LD_INT 4
72032: PUSH
72033: EMPTY
72034: LIST
72035: LIST
72036: LIST
72037: PUSH
72038: LD_VAR 0 1
72042: PUSH
72043: LD_VAR 0 2
72047: PUSH
72048: LD_INT 3
72050: MINUS
72051: PUSH
72052: LD_INT 3
72054: PUSH
72055: EMPTY
72056: LIST
72057: LIST
72058: LIST
72059: PUSH
72060: LD_VAR 0 1
72064: PUSH
72065: LD_INT 4
72067: MINUS
72068: PUSH
72069: LD_VAR 0 2
72073: PUSH
72074: LD_INT 4
72076: MINUS
72077: PUSH
72078: LD_INT 2
72080: PUSH
72081: EMPTY
72082: LIST
72083: LIST
72084: LIST
72085: PUSH
72086: EMPTY
72087: LIST
72088: LIST
72089: LIST
72090: LIST
72091: LIST
72092: ST_TO_ADDR
// end ; 5 :
72093: GO 72233
72095: LD_INT 5
72097: DOUBLE
72098: EQUAL
72099: IFTRUE 72103
72101: GO 72232
72103: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72104: LD_ADDR_VAR 0 5
72108: PUSH
72109: LD_VAR 0 1
72113: PUSH
72114: LD_INT 4
72116: MINUS
72117: PUSH
72118: LD_VAR 0 2
72122: PUSH
72123: LD_INT 1
72125: PUSH
72126: EMPTY
72127: LIST
72128: LIST
72129: LIST
72130: PUSH
72131: LD_VAR 0 1
72135: PUSH
72136: LD_VAR 0 2
72140: PUSH
72141: LD_INT 4
72143: MINUS
72144: PUSH
72145: LD_INT 3
72147: PUSH
72148: EMPTY
72149: LIST
72150: LIST
72151: LIST
72152: PUSH
72153: LD_VAR 0 1
72157: PUSH
72158: LD_INT 4
72160: PLUS
72161: PUSH
72162: LD_VAR 0 2
72166: PUSH
72167: LD_INT 4
72169: PLUS
72170: PUSH
72171: LD_INT 5
72173: PUSH
72174: EMPTY
72175: LIST
72176: LIST
72177: LIST
72178: PUSH
72179: LD_VAR 0 1
72183: PUSH
72184: LD_INT 3
72186: PLUS
72187: PUSH
72188: LD_VAR 0 2
72192: PUSH
72193: LD_INT 4
72195: PUSH
72196: EMPTY
72197: LIST
72198: LIST
72199: LIST
72200: PUSH
72201: LD_VAR 0 1
72205: PUSH
72206: LD_VAR 0 2
72210: PUSH
72211: LD_INT 3
72213: PLUS
72214: PUSH
72215: LD_INT 0
72217: PUSH
72218: EMPTY
72219: LIST
72220: LIST
72221: LIST
72222: PUSH
72223: EMPTY
72224: LIST
72225: LIST
72226: LIST
72227: LIST
72228: LIST
72229: ST_TO_ADDR
// end ; end ;
72230: GO 72233
72232: POP
// result := list ;
72233: LD_ADDR_VAR 0 4
72237: PUSH
72238: LD_VAR 0 5
72242: ST_TO_ADDR
// end ;
72243: LD_VAR 0 4
72247: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72248: LD_INT 0
72250: PPUSH
72251: PPUSH
72252: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72253: LD_VAR 0 1
72257: NOT
72258: PUSH
72259: LD_VAR 0 2
72263: PUSH
72264: LD_INT 1
72266: PUSH
72267: LD_INT 2
72269: PUSH
72270: LD_INT 3
72272: PUSH
72273: LD_INT 4
72275: PUSH
72276: EMPTY
72277: LIST
72278: LIST
72279: LIST
72280: LIST
72281: IN
72282: NOT
72283: OR
72284: IFFALSE 72288
// exit ;
72286: GO 72380
// tmp := [ ] ;
72288: LD_ADDR_VAR 0 5
72292: PUSH
72293: EMPTY
72294: ST_TO_ADDR
// for i in units do
72295: LD_ADDR_VAR 0 4
72299: PUSH
72300: LD_VAR 0 1
72304: PUSH
72305: FOR_IN
72306: IFFALSE 72349
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
72308: LD_ADDR_VAR 0 5
72312: PUSH
72313: LD_VAR 0 5
72317: PPUSH
72318: LD_VAR 0 5
72322: PUSH
72323: LD_INT 1
72325: PLUS
72326: PPUSH
72327: LD_VAR 0 4
72331: PPUSH
72332: LD_VAR 0 2
72336: PPUSH
72337: CALL_OW 259
72341: PPUSH
72342: CALL_OW 2
72346: ST_TO_ADDR
72347: GO 72305
72349: POP
72350: POP
// if not tmp then
72351: LD_VAR 0 5
72355: NOT
72356: IFFALSE 72360
// exit ;
72358: GO 72380
// result := SortListByListDesc ( units , tmp ) ;
72360: LD_ADDR_VAR 0 3
72364: PUSH
72365: LD_VAR 0 1
72369: PPUSH
72370: LD_VAR 0 5
72374: PPUSH
72375: CALL_OW 77
72379: ST_TO_ADDR
// end ;
72380: LD_VAR 0 3
72384: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72385: LD_INT 0
72387: PPUSH
72388: PPUSH
72389: PPUSH
// x := GetX ( building ) ;
72390: LD_ADDR_VAR 0 4
72394: PUSH
72395: LD_VAR 0 2
72399: PPUSH
72400: CALL_OW 250
72404: ST_TO_ADDR
// y := GetY ( building ) ;
72405: LD_ADDR_VAR 0 5
72409: PUSH
72410: LD_VAR 0 2
72414: PPUSH
72415: CALL_OW 251
72419: ST_TO_ADDR
// if GetTaskList ( unit ) then
72420: LD_VAR 0 1
72424: PPUSH
72425: CALL_OW 437
72429: IFFALSE 72524
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72431: LD_STRING e
72433: PUSH
72434: LD_VAR 0 1
72438: PPUSH
72439: CALL_OW 437
72443: PUSH
72444: LD_INT 1
72446: ARRAY
72447: PUSH
72448: LD_INT 1
72450: ARRAY
72451: EQUAL
72452: PUSH
72453: LD_VAR 0 4
72457: PUSH
72458: LD_VAR 0 1
72462: PPUSH
72463: CALL_OW 437
72467: PUSH
72468: LD_INT 1
72470: ARRAY
72471: PUSH
72472: LD_INT 2
72474: ARRAY
72475: EQUAL
72476: AND
72477: PUSH
72478: LD_VAR 0 5
72482: PUSH
72483: LD_VAR 0 1
72487: PPUSH
72488: CALL_OW 437
72492: PUSH
72493: LD_INT 1
72495: ARRAY
72496: PUSH
72497: LD_INT 3
72499: ARRAY
72500: EQUAL
72501: AND
72502: IFFALSE 72514
// result := true else
72504: LD_ADDR_VAR 0 3
72508: PUSH
72509: LD_INT 1
72511: ST_TO_ADDR
72512: GO 72522
// result := false ;
72514: LD_ADDR_VAR 0 3
72518: PUSH
72519: LD_INT 0
72521: ST_TO_ADDR
// end else
72522: GO 72532
// result := false ;
72524: LD_ADDR_VAR 0 3
72528: PUSH
72529: LD_INT 0
72531: ST_TO_ADDR
// end ;
72532: LD_VAR 0 3
72536: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72537: LD_INT 0
72539: PPUSH
72540: PPUSH
72541: PPUSH
72542: PPUSH
// if not unit or not area then
72543: LD_VAR 0 1
72547: NOT
72548: PUSH
72549: LD_VAR 0 2
72553: NOT
72554: OR
72555: IFFALSE 72559
// exit ;
72557: GO 72723
// tmp := AreaToList ( area , i ) ;
72559: LD_ADDR_VAR 0 6
72563: PUSH
72564: LD_VAR 0 2
72568: PPUSH
72569: LD_VAR 0 5
72573: PPUSH
72574: CALL_OW 517
72578: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72579: LD_ADDR_VAR 0 5
72583: PUSH
72584: DOUBLE
72585: LD_INT 1
72587: DEC
72588: ST_TO_ADDR
72589: LD_VAR 0 6
72593: PUSH
72594: LD_INT 1
72596: ARRAY
72597: PUSH
72598: FOR_TO
72599: IFFALSE 72721
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72601: LD_ADDR_VAR 0 7
72605: PUSH
72606: LD_VAR 0 6
72610: PUSH
72611: LD_INT 1
72613: ARRAY
72614: PUSH
72615: LD_VAR 0 5
72619: ARRAY
72620: PUSH
72621: LD_VAR 0 6
72625: PUSH
72626: LD_INT 2
72628: ARRAY
72629: PUSH
72630: LD_VAR 0 5
72634: ARRAY
72635: PUSH
72636: EMPTY
72637: LIST
72638: LIST
72639: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72640: LD_VAR 0 7
72644: PUSH
72645: LD_INT 1
72647: ARRAY
72648: PPUSH
72649: LD_VAR 0 7
72653: PUSH
72654: LD_INT 2
72656: ARRAY
72657: PPUSH
72658: CALL_OW 428
72662: PUSH
72663: LD_INT 0
72665: EQUAL
72666: IFFALSE 72719
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72668: LD_VAR 0 1
72672: PPUSH
72673: LD_VAR 0 7
72677: PUSH
72678: LD_INT 1
72680: ARRAY
72681: PPUSH
72682: LD_VAR 0 7
72686: PUSH
72687: LD_INT 2
72689: ARRAY
72690: PPUSH
72691: LD_VAR 0 3
72695: PPUSH
72696: CALL_OW 48
// result := IsPlaced ( unit ) ;
72700: LD_ADDR_VAR 0 4
72704: PUSH
72705: LD_VAR 0 1
72709: PPUSH
72710: CALL_OW 305
72714: ST_TO_ADDR
// exit ;
72715: POP
72716: POP
72717: GO 72723
// end ; end ;
72719: GO 72598
72721: POP
72722: POP
// end ;
72723: LD_VAR 0 4
72727: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72728: LD_INT 0
72730: PPUSH
72731: PPUSH
72732: PPUSH
// if not side or side > 8 then
72733: LD_VAR 0 1
72737: NOT
72738: PUSH
72739: LD_VAR 0 1
72743: PUSH
72744: LD_INT 8
72746: GREATER
72747: OR
72748: IFFALSE 72752
// exit ;
72750: GO 72939
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72752: LD_ADDR_VAR 0 4
72756: PUSH
72757: LD_INT 22
72759: PUSH
72760: LD_VAR 0 1
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: PUSH
72769: LD_INT 21
72771: PUSH
72772: LD_INT 3
72774: PUSH
72775: EMPTY
72776: LIST
72777: LIST
72778: PUSH
72779: EMPTY
72780: LIST
72781: LIST
72782: PPUSH
72783: CALL_OW 69
72787: ST_TO_ADDR
// if not tmp then
72788: LD_VAR 0 4
72792: NOT
72793: IFFALSE 72797
// exit ;
72795: GO 72939
// enable_addtolog := true ;
72797: LD_ADDR_OWVAR 81
72801: PUSH
72802: LD_INT 1
72804: ST_TO_ADDR
// AddToLog ( [ ) ;
72805: LD_STRING [
72807: PPUSH
72808: CALL_OW 561
// for i in tmp do
72812: LD_ADDR_VAR 0 3
72816: PUSH
72817: LD_VAR 0 4
72821: PUSH
72822: FOR_IN
72823: IFFALSE 72930
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72825: LD_STRING [
72827: PUSH
72828: LD_VAR 0 3
72832: PPUSH
72833: CALL_OW 266
72837: STR
72838: PUSH
72839: LD_STRING , 
72841: STR
72842: PUSH
72843: LD_VAR 0 3
72847: PPUSH
72848: CALL_OW 250
72852: STR
72853: PUSH
72854: LD_STRING , 
72856: STR
72857: PUSH
72858: LD_VAR 0 3
72862: PPUSH
72863: CALL_OW 251
72867: STR
72868: PUSH
72869: LD_STRING , 
72871: STR
72872: PUSH
72873: LD_VAR 0 3
72877: PPUSH
72878: CALL_OW 254
72882: STR
72883: PUSH
72884: LD_STRING , 
72886: STR
72887: PUSH
72888: LD_VAR 0 3
72892: PPUSH
72893: LD_INT 1
72895: PPUSH
72896: CALL_OW 268
72900: STR
72901: PUSH
72902: LD_STRING , 
72904: STR
72905: PUSH
72906: LD_VAR 0 3
72910: PPUSH
72911: LD_INT 2
72913: PPUSH
72914: CALL_OW 268
72918: STR
72919: PUSH
72920: LD_STRING ],
72922: STR
72923: PPUSH
72924: CALL_OW 561
// end ;
72928: GO 72822
72930: POP
72931: POP
// AddToLog ( ]; ) ;
72932: LD_STRING ];
72934: PPUSH
72935: CALL_OW 561
// end ;
72939: LD_VAR 0 2
72943: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72944: LD_INT 0
72946: PPUSH
72947: PPUSH
72948: PPUSH
72949: PPUSH
72950: PPUSH
// if not area or not rate or not max then
72951: LD_VAR 0 1
72955: NOT
72956: PUSH
72957: LD_VAR 0 2
72961: NOT
72962: OR
72963: PUSH
72964: LD_VAR 0 4
72968: NOT
72969: OR
72970: IFFALSE 72974
// exit ;
72972: GO 73166
// while 1 do
72974: LD_INT 1
72976: IFFALSE 73166
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72978: LD_ADDR_VAR 0 9
72982: PUSH
72983: LD_VAR 0 1
72987: PPUSH
72988: LD_INT 1
72990: PPUSH
72991: CALL_OW 287
72995: PUSH
72996: LD_INT 10
72998: MUL
72999: ST_TO_ADDR
// r := rate / 10 ;
73000: LD_ADDR_VAR 0 7
73004: PUSH
73005: LD_VAR 0 2
73009: PUSH
73010: LD_INT 10
73012: DIVREAL
73013: ST_TO_ADDR
// time := 1 1$00 ;
73014: LD_ADDR_VAR 0 8
73018: PUSH
73019: LD_INT 2100
73021: ST_TO_ADDR
// if amount < min then
73022: LD_VAR 0 9
73026: PUSH
73027: LD_VAR 0 3
73031: LESS
73032: IFFALSE 73050
// r := r * 2 else
73034: LD_ADDR_VAR 0 7
73038: PUSH
73039: LD_VAR 0 7
73043: PUSH
73044: LD_INT 2
73046: MUL
73047: ST_TO_ADDR
73048: GO 73076
// if amount > max then
73050: LD_VAR 0 9
73054: PUSH
73055: LD_VAR 0 4
73059: GREATER
73060: IFFALSE 73076
// r := r / 2 ;
73062: LD_ADDR_VAR 0 7
73066: PUSH
73067: LD_VAR 0 7
73071: PUSH
73072: LD_INT 2
73074: DIVREAL
73075: ST_TO_ADDR
// time := time / r ;
73076: LD_ADDR_VAR 0 8
73080: PUSH
73081: LD_VAR 0 8
73085: PUSH
73086: LD_VAR 0 7
73090: DIVREAL
73091: ST_TO_ADDR
// if time < 0 then
73092: LD_VAR 0 8
73096: PUSH
73097: LD_INT 0
73099: LESS
73100: IFFALSE 73117
// time := time * - 1 ;
73102: LD_ADDR_VAR 0 8
73106: PUSH
73107: LD_VAR 0 8
73111: PUSH
73112: LD_INT 1
73114: NEG
73115: MUL
73116: ST_TO_ADDR
// wait ( time ) ;
73117: LD_VAR 0 8
73121: PPUSH
73122: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
73126: LD_INT 35
73128: PPUSH
73129: LD_INT 875
73131: PPUSH
73132: CALL_OW 12
73136: PPUSH
73137: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73141: LD_INT 1
73143: PPUSH
73144: LD_INT 5
73146: PPUSH
73147: CALL_OW 12
73151: PPUSH
73152: LD_VAR 0 1
73156: PPUSH
73157: LD_INT 1
73159: PPUSH
73160: CALL_OW 55
// end ;
73164: GO 72974
// end ;
73166: LD_VAR 0 5
73170: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73171: LD_INT 0
73173: PPUSH
73174: PPUSH
73175: PPUSH
73176: PPUSH
73177: PPUSH
73178: PPUSH
73179: PPUSH
73180: PPUSH
// if not turrets or not factories then
73181: LD_VAR 0 1
73185: NOT
73186: PUSH
73187: LD_VAR 0 2
73191: NOT
73192: OR
73193: IFFALSE 73197
// exit ;
73195: GO 73504
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73197: LD_ADDR_VAR 0 10
73201: PUSH
73202: LD_INT 5
73204: PUSH
73205: LD_INT 6
73207: PUSH
73208: EMPTY
73209: LIST
73210: LIST
73211: PUSH
73212: LD_INT 2
73214: PUSH
73215: LD_INT 4
73217: PUSH
73218: EMPTY
73219: LIST
73220: LIST
73221: PUSH
73222: LD_INT 3
73224: PUSH
73225: LD_INT 5
73227: PUSH
73228: EMPTY
73229: LIST
73230: LIST
73231: PUSH
73232: EMPTY
73233: LIST
73234: LIST
73235: LIST
73236: PUSH
73237: LD_INT 24
73239: PUSH
73240: LD_INT 25
73242: PUSH
73243: EMPTY
73244: LIST
73245: LIST
73246: PUSH
73247: LD_INT 23
73249: PUSH
73250: LD_INT 27
73252: PUSH
73253: EMPTY
73254: LIST
73255: LIST
73256: PUSH
73257: EMPTY
73258: LIST
73259: LIST
73260: PUSH
73261: LD_INT 42
73263: PUSH
73264: LD_INT 43
73266: PUSH
73267: EMPTY
73268: LIST
73269: LIST
73270: PUSH
73271: LD_INT 44
73273: PUSH
73274: LD_INT 46
73276: PUSH
73277: EMPTY
73278: LIST
73279: LIST
73280: PUSH
73281: LD_INT 45
73283: PUSH
73284: LD_INT 47
73286: PUSH
73287: EMPTY
73288: LIST
73289: LIST
73290: PUSH
73291: EMPTY
73292: LIST
73293: LIST
73294: LIST
73295: PUSH
73296: EMPTY
73297: LIST
73298: LIST
73299: LIST
73300: ST_TO_ADDR
// result := [ ] ;
73301: LD_ADDR_VAR 0 3
73305: PUSH
73306: EMPTY
73307: ST_TO_ADDR
// for i in turrets do
73308: LD_ADDR_VAR 0 4
73312: PUSH
73313: LD_VAR 0 1
73317: PUSH
73318: FOR_IN
73319: IFFALSE 73502
// begin nat := GetNation ( i ) ;
73321: LD_ADDR_VAR 0 7
73325: PUSH
73326: LD_VAR 0 4
73330: PPUSH
73331: CALL_OW 248
73335: ST_TO_ADDR
// weapon := 0 ;
73336: LD_ADDR_VAR 0 8
73340: PUSH
73341: LD_INT 0
73343: ST_TO_ADDR
// if not nat then
73344: LD_VAR 0 7
73348: NOT
73349: IFFALSE 73353
// continue ;
73351: GO 73318
// for j in list [ nat ] do
73353: LD_ADDR_VAR 0 5
73357: PUSH
73358: LD_VAR 0 10
73362: PUSH
73363: LD_VAR 0 7
73367: ARRAY
73368: PUSH
73369: FOR_IN
73370: IFFALSE 73411
// if GetBWeapon ( i ) = j [ 1 ] then
73372: LD_VAR 0 4
73376: PPUSH
73377: CALL_OW 269
73381: PUSH
73382: LD_VAR 0 5
73386: PUSH
73387: LD_INT 1
73389: ARRAY
73390: EQUAL
73391: IFFALSE 73409
// begin weapon := j [ 2 ] ;
73393: LD_ADDR_VAR 0 8
73397: PUSH
73398: LD_VAR 0 5
73402: PUSH
73403: LD_INT 2
73405: ARRAY
73406: ST_TO_ADDR
// break ;
73407: GO 73411
// end ;
73409: GO 73369
73411: POP
73412: POP
// if not weapon then
73413: LD_VAR 0 8
73417: NOT
73418: IFFALSE 73422
// continue ;
73420: GO 73318
// for k in factories do
73422: LD_ADDR_VAR 0 6
73426: PUSH
73427: LD_VAR 0 2
73431: PUSH
73432: FOR_IN
73433: IFFALSE 73498
// begin weapons := AvailableWeaponList ( k ) ;
73435: LD_ADDR_VAR 0 9
73439: PUSH
73440: LD_VAR 0 6
73444: PPUSH
73445: CALL_OW 478
73449: ST_TO_ADDR
// if not weapons then
73450: LD_VAR 0 9
73454: NOT
73455: IFFALSE 73459
// continue ;
73457: GO 73432
// if weapon in weapons then
73459: LD_VAR 0 8
73463: PUSH
73464: LD_VAR 0 9
73468: IN
73469: IFFALSE 73496
// begin result := [ i , weapon ] ;
73471: LD_ADDR_VAR 0 3
73475: PUSH
73476: LD_VAR 0 4
73480: PUSH
73481: LD_VAR 0 8
73485: PUSH
73486: EMPTY
73487: LIST
73488: LIST
73489: ST_TO_ADDR
// exit ;
73490: POP
73491: POP
73492: POP
73493: POP
73494: GO 73504
// end ; end ;
73496: GO 73432
73498: POP
73499: POP
// end ;
73500: GO 73318
73502: POP
73503: POP
// end ;
73504: LD_VAR 0 3
73508: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73509: LD_INT 0
73511: PPUSH
// if not side or side > 8 then
73512: LD_VAR 0 3
73516: NOT
73517: PUSH
73518: LD_VAR 0 3
73522: PUSH
73523: LD_INT 8
73525: GREATER
73526: OR
73527: IFFALSE 73531
// exit ;
73529: GO 73590
// if not range then
73531: LD_VAR 0 4
73535: NOT
73536: IFFALSE 73547
// range := - 12 ;
73538: LD_ADDR_VAR 0 4
73542: PUSH
73543: LD_INT 12
73545: NEG
73546: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73547: LD_VAR 0 1
73551: PPUSH
73552: LD_VAR 0 2
73556: PPUSH
73557: LD_VAR 0 3
73561: PPUSH
73562: LD_VAR 0 4
73566: PPUSH
73567: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73571: LD_VAR 0 1
73575: PPUSH
73576: LD_VAR 0 2
73580: PPUSH
73581: LD_VAR 0 3
73585: PPUSH
73586: CALL_OW 331
// end ;
73590: LD_VAR 0 5
73594: RET
// export function Video ( mode ) ; begin
73595: LD_INT 0
73597: PPUSH
// ingame_video = mode ;
73598: LD_ADDR_OWVAR 52
73602: PUSH
73603: LD_VAR 0 1
73607: ST_TO_ADDR
// interface_hidden = mode ;
73608: LD_ADDR_OWVAR 54
73612: PUSH
73613: LD_VAR 0 1
73617: ST_TO_ADDR
// end ;
73618: LD_VAR 0 2
73622: RET
// export function Join ( array , element ) ; begin
73623: LD_INT 0
73625: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73626: LD_ADDR_VAR 0 3
73630: PUSH
73631: LD_VAR 0 1
73635: PPUSH
73636: LD_VAR 0 1
73640: PUSH
73641: LD_INT 1
73643: PLUS
73644: PPUSH
73645: LD_VAR 0 2
73649: PPUSH
73650: CALL_OW 1
73654: ST_TO_ADDR
// end ;
73655: LD_VAR 0 3
73659: RET
// export function JoinUnion ( array , element ) ; begin
73660: LD_INT 0
73662: PPUSH
// result := array union element ;
73663: LD_ADDR_VAR 0 3
73667: PUSH
73668: LD_VAR 0 1
73672: PUSH
73673: LD_VAR 0 2
73677: UNION
73678: ST_TO_ADDR
// end ;
73679: LD_VAR 0 3
73683: RET
// export function GetBehemoths ( side ) ; begin
73684: LD_INT 0
73686: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
73687: LD_ADDR_VAR 0 2
73691: PUSH
73692: LD_INT 22
73694: PUSH
73695: LD_VAR 0 1
73699: PUSH
73700: EMPTY
73701: LIST
73702: LIST
73703: PUSH
73704: LD_INT 31
73706: PUSH
73707: LD_INT 25
73709: PUSH
73710: EMPTY
73711: LIST
73712: LIST
73713: PUSH
73714: EMPTY
73715: LIST
73716: LIST
73717: PPUSH
73718: CALL_OW 69
73722: ST_TO_ADDR
// end ;
73723: LD_VAR 0 2
73727: RET
// export function Shuffle ( array ) ; var i , index ; begin
73728: LD_INT 0
73730: PPUSH
73731: PPUSH
73732: PPUSH
// result := [ ] ;
73733: LD_ADDR_VAR 0 2
73737: PUSH
73738: EMPTY
73739: ST_TO_ADDR
// if not array then
73740: LD_VAR 0 1
73744: NOT
73745: IFFALSE 73749
// exit ;
73747: GO 73848
// Randomize ;
73749: CALL_OW 10
// for i = array downto 1 do
73753: LD_ADDR_VAR 0 3
73757: PUSH
73758: DOUBLE
73759: LD_VAR 0 1
73763: INC
73764: ST_TO_ADDR
73765: LD_INT 1
73767: PUSH
73768: FOR_DOWNTO
73769: IFFALSE 73846
// begin index := rand ( 1 , array ) ;
73771: LD_ADDR_VAR 0 4
73775: PUSH
73776: LD_INT 1
73778: PPUSH
73779: LD_VAR 0 1
73783: PPUSH
73784: CALL_OW 12
73788: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73789: LD_ADDR_VAR 0 2
73793: PUSH
73794: LD_VAR 0 2
73798: PPUSH
73799: LD_VAR 0 2
73803: PUSH
73804: LD_INT 1
73806: PLUS
73807: PPUSH
73808: LD_VAR 0 1
73812: PUSH
73813: LD_VAR 0 4
73817: ARRAY
73818: PPUSH
73819: CALL_OW 2
73823: ST_TO_ADDR
// array := Delete ( array , index ) ;
73824: LD_ADDR_VAR 0 1
73828: PUSH
73829: LD_VAR 0 1
73833: PPUSH
73834: LD_VAR 0 4
73838: PPUSH
73839: CALL_OW 3
73843: ST_TO_ADDR
// end ;
73844: GO 73768
73846: POP
73847: POP
// end ;
73848: LD_VAR 0 2
73852: RET
// export function GetBaseMaterials ( base ) ; begin
73853: LD_INT 0
73855: PPUSH
// result := [ 0 , 0 , 0 ] ;
73856: LD_ADDR_VAR 0 2
73860: PUSH
73861: LD_INT 0
73863: PUSH
73864: LD_INT 0
73866: PUSH
73867: LD_INT 0
73869: PUSH
73870: EMPTY
73871: LIST
73872: LIST
73873: LIST
73874: ST_TO_ADDR
// if not base then
73875: LD_VAR 0 1
73879: NOT
73880: IFFALSE 73884
// exit ;
73882: GO 73933
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73884: LD_ADDR_VAR 0 2
73888: PUSH
73889: LD_VAR 0 1
73893: PPUSH
73894: LD_INT 1
73896: PPUSH
73897: CALL_OW 275
73901: PUSH
73902: LD_VAR 0 1
73906: PPUSH
73907: LD_INT 2
73909: PPUSH
73910: CALL_OW 275
73914: PUSH
73915: LD_VAR 0 1
73919: PPUSH
73920: LD_INT 3
73922: PPUSH
73923: CALL_OW 275
73927: PUSH
73928: EMPTY
73929: LIST
73930: LIST
73931: LIST
73932: ST_TO_ADDR
// end ;
73933: LD_VAR 0 2
73937: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73938: LD_INT 0
73940: PPUSH
73941: PPUSH
// result := array ;
73942: LD_ADDR_VAR 0 3
73946: PUSH
73947: LD_VAR 0 1
73951: ST_TO_ADDR
// if size > 0 then
73952: LD_VAR 0 2
73956: PUSH
73957: LD_INT 0
73959: GREATER
73960: IFFALSE 74006
// for i := array downto size do
73962: LD_ADDR_VAR 0 4
73966: PUSH
73967: DOUBLE
73968: LD_VAR 0 1
73972: INC
73973: ST_TO_ADDR
73974: LD_VAR 0 2
73978: PUSH
73979: FOR_DOWNTO
73980: IFFALSE 74004
// result := Delete ( result , result ) ;
73982: LD_ADDR_VAR 0 3
73986: PUSH
73987: LD_VAR 0 3
73991: PPUSH
73992: LD_VAR 0 3
73996: PPUSH
73997: CALL_OW 3
74001: ST_TO_ADDR
74002: GO 73979
74004: POP
74005: POP
// end ;
74006: LD_VAR 0 3
74010: RET
// export function ComExit ( unit ) ; var tmp ; begin
74011: LD_INT 0
74013: PPUSH
74014: PPUSH
// if not IsInUnit ( unit ) then
74015: LD_VAR 0 1
74019: PPUSH
74020: CALL_OW 310
74024: NOT
74025: IFFALSE 74029
// exit ;
74027: GO 74089
// tmp := IsInUnit ( unit ) ;
74029: LD_ADDR_VAR 0 3
74033: PUSH
74034: LD_VAR 0 1
74038: PPUSH
74039: CALL_OW 310
74043: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74044: LD_VAR 0 3
74048: PPUSH
74049: CALL_OW 247
74053: PUSH
74054: LD_INT 2
74056: EQUAL
74057: IFFALSE 74070
// ComExitVehicle ( unit ) else
74059: LD_VAR 0 1
74063: PPUSH
74064: CALL_OW 121
74068: GO 74079
// ComExitBuilding ( unit ) ;
74070: LD_VAR 0 1
74074: PPUSH
74075: CALL_OW 122
// result := tmp ;
74079: LD_ADDR_VAR 0 2
74083: PUSH
74084: LD_VAR 0 3
74088: ST_TO_ADDR
// end ;
74089: LD_VAR 0 2
74093: RET
// export function ResetHc ; begin
74094: LD_INT 0
74096: PPUSH
// InitHc ;
74097: CALL_OW 19
// hc_importance := 0 ;
74101: LD_ADDR_OWVAR 32
74105: PUSH
74106: LD_INT 0
74108: ST_TO_ADDR
// end ;
74109: LD_VAR 0 1
74113: RET
