// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export vehiclesFrom05 , resourcesFrom05 , fastBreakthrough , stevensStatus , apeTechsStatus ; export techMatPredStatus ; export vehsFrom06 , resourcesFrom06 ; export dial_SibTechsBlocker , dial_VsevolodContactBlocker , dial_TrapDialogBlocker , dial_ConvoyDialogBlocker , dial_NorthBlocker , dial_EndMissionDialogBlocker ; export claimOvsyenkoBase , claimTerminalBase , lostAgainBase ; export immortalVsevolodTeam , savedVsevolod , vsevolodWaitGorky ; export canGoNorth ; export enableVsevolodCounter ; export canSpawnReinforces ; export canEndMission ; export canRemoveUnits ; export timeToAttack ; export cratesSpawned ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 308 0 0
// vehiclesFrom05 = LoadVariable ( 05_Tanks_4 , [ ] ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 05_Tanks_4
  31: PPUSH
  32: EMPTY
  33: PPUSH
  34: CALL_OW 30
  38: ST_TO_ADDR
// resourcesFrom05 = LoadVariable ( 05_ResourcesInCargo_3 , [ ] ) ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: LD_STRING 05_ResourcesInCargo_3
  46: PPUSH
  47: EMPTY
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// fastBreakthrough = LoadVariable ( 05_FastBreakthrough_6 , false ) ;
  54: LD_ADDR_EXP 3
  58: PUSH
  59: LD_STRING 05_FastBreakthrough_6
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// stevensStatus = LoadVariable ( 05_StevensStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 4
  74: PUSH
  75: LD_STRING 05_StevensStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// apeTechsStatus = LoadVariable ( 05_ApeTechsStatus_7 , [ 0 , 0 , 0 ] ) ;
  86: LD_ADDR_EXP 5
  90: PUSH
  91: LD_STRING 05_ApeTechsStatus_7
  93: PPUSH
  94: LD_INT 0
  96: PUSH
  97: LD_INT 0
  99: PUSH
 100: LD_INT 0
 102: PUSH
 103: EMPTY
 104: LIST
 105: LIST
 106: LIST
 107: PPUSH
 108: CALL_OW 30
 112: ST_TO_ADDR
// techMatPredStatus = state_enabled ;
 113: LD_ADDR_EXP 6
 117: PUSH
 118: LD_INT 1
 120: ST_TO_ADDR
// vehsFrom06 = [ ] ;
 121: LD_ADDR_EXP 7
 125: PUSH
 126: EMPTY
 127: ST_TO_ADDR
// resourcesFrom06 = [ ] ;
 128: LD_ADDR_EXP 8
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// dial_SibTechsBlocker = false ;
 135: LD_ADDR_EXP 9
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// dial_VsevolodContactBlocker = false ;
 143: LD_ADDR_EXP 10
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// dial_TrapDialogBlocker = false ;
 151: LD_ADDR_EXP 11
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// dial_ConvoyDialogBlocker = false ;
 159: LD_ADDR_EXP 12
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// dial_NorthBlocker = false ;
 167: LD_ADDR_EXP 13
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// dial_EndMissionDialogBlocker = false ;
 175: LD_ADDR_EXP 14
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// claimOvsyenkoBase = false ;
 183: LD_ADDR_EXP 15
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// claimTerminalBase = false ;
 191: LD_ADDR_EXP 16
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// lostAgainBase = false ;
 199: LD_ADDR_EXP 17
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// immortalVsevolodTeam = true ;
 207: LD_ADDR_EXP 18
 211: PUSH
 212: LD_INT 1
 214: ST_TO_ADDR
// savedVsevolod = false ;
 215: LD_ADDR_EXP 19
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// vsevolodWaitGorky = false ;
 223: LD_ADDR_EXP 20
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// enableVsevolodCounter = false ;
 231: LD_ADDR_EXP 22
 235: PUSH
 236: LD_INT 0
 238: ST_TO_ADDR
// canGoNorth = false ;
 239: LD_ADDR_EXP 21
 243: PUSH
 244: LD_INT 0
 246: ST_TO_ADDR
// canSpawnReinforces = false ;
 247: LD_ADDR_EXP 23
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// canEndMission = false ;
 255: LD_ADDR_EXP 24
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// canRemoveUnits = false ;
 263: LD_ADDR_EXP 25
 267: PUSH
 268: LD_INT 0
 270: ST_TO_ADDR
// timeToAttack = 0 0$00 ;
 271: LD_ADDR_EXP 26
 275: PUSH
 276: LD_INT 0
 278: ST_TO_ADDR
// cratesSpawned = 0 ;
 279: LD_ADDR_EXP 27
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// PrepareRussians ;
 287: CALL 893 0 0
// PrepareAmericans ;
 291: CALL 3324 0 0
// Nef_PrepareNature ;
 295: CALL 4433 0 0
// MissionIntro ;
 299: CALL 16039 0 0
// end ; end_of_file
 303: LD_VAR 0 1
 307: RET
// export function InitMapConfig ; begin
 308: LD_INT 0
 310: PPUSH
// BaseMapConfig ;
 311: CALL 324 0 0
// MissionMapConfig ;
 315: CALL 414 0 0
// end ;
 319: LD_VAR 0 1
 323: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 324: LD_INT 0
 326: PPUSH
// animalsAmount = [ 3 , 3 , 1 , 3 , 0 ] ;
 327: LD_ADDR_EXP 28
 331: PUSH
 332: LD_INT 3
 334: PUSH
 335: LD_INT 3
 337: PUSH
 338: LD_INT 1
 340: PUSH
 341: LD_INT 3
 343: PUSH
 344: LD_INT 0
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 354: LD_ADDR_EXP 29
 358: PUSH
 359: LD_INT 2
 361: PUSH
 362: LD_INT 2
 364: PUSH
 365: LD_INT 2
 367: PUSH
 368: LD_INT 2
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: LIST
 375: LIST
 376: ST_TO_ADDR
// animalsAgression = 3 ;
 377: LD_ADDR_EXP 30
 381: PUSH
 382: LD_INT 3
 384: ST_TO_ADDR
// debugMode = 0 ;
 385: LD_ADDR_EXP 33
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// missionPrefix = 06_ ;
 393: LD_ADDR_EXP 31
 397: PUSH
 398: LD_STRING 06_
 400: ST_TO_ADDR
// previousMissionPrefix = 05_ ;
 401: LD_ADDR_EXP 32
 405: PUSH
 406: LD_STRING 05_
 408: ST_TO_ADDR
// end ;
 409: LD_VAR 0 1
 413: RET
// export enemySkillLevel ; export ovsyenkoStartCrates , terminalStartSiberite ; export trapAmount ; export vsevolodSaveTime ; function MissionMapConfig ; begin
 414: LD_INT 0
 416: PPUSH
// enemySkillLevel = [ 3 , 4 , 5 ] [ Difficulty ] ;
 417: LD_ADDR_EXP 34
 421: PUSH
 422: LD_INT 3
 424: PUSH
 425: LD_INT 4
 427: PUSH
 428: LD_INT 5
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: LIST
 435: PUSH
 436: LD_OWVAR 67
 440: ARRAY
 441: ST_TO_ADDR
// ovsyenkoStartCrates = [ 150 , 100 , 50 ] [ Difficulty ] ;
 442: LD_ADDR_EXP 35
 446: PUSH
 447: LD_INT 150
 449: PUSH
 450: LD_INT 100
 452: PUSH
 453: LD_INT 50
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: LIST
 460: PUSH
 461: LD_OWVAR 67
 465: ARRAY
 466: ST_TO_ADDR
// terminalStartSiberite = [ 100 , 70 , 50 ] [ Difficulty ] ;
 467: LD_ADDR_EXP 36
 471: PUSH
 472: LD_INT 100
 474: PUSH
 475: LD_INT 70
 477: PUSH
 478: LD_INT 50
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: PUSH
 486: LD_OWVAR 67
 490: ARRAY
 491: ST_TO_ADDR
// trapAmount = [ rand ( 4 , 5 ) , rand ( 5 , 6 ) , rand ( 6 , 7 ) ] [ Difficulty ] ;
 492: LD_ADDR_EXP 37
 496: PUSH
 497: LD_INT 4
 499: PPUSH
 500: LD_INT 5
 502: PPUSH
 503: CALL_OW 12
 507: PUSH
 508: LD_INT 5
 510: PPUSH
 511: LD_INT 6
 513: PPUSH
 514: CALL_OW 12
 518: PUSH
 519: LD_INT 6
 521: PPUSH
 522: LD_INT 7
 524: PPUSH
 525: CALL_OW 12
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: LIST
 534: PUSH
 535: LD_OWVAR 67
 539: ARRAY
 540: ST_TO_ADDR
// vsevolodSaveTime = [ 12 12$0 , 11 11$0 , 10 10$0 ] [ Difficulty ] ;
 541: LD_ADDR_EXP 38
 545: PUSH
 546: LD_INT 25200
 548: PUSH
 549: LD_INT 23100
 551: PUSH
 552: LD_INT 21000
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: PUSH
 560: LD_OWVAR 67
 564: ARRAY
 565: ST_TO_ADDR
// end ;
 566: LD_VAR 0 1
 570: RET
// every 0 0$1 trigger debugMode do var i ;
 571: LD_EXP 33
 575: IFFALSE 890
 577: GO 579
 579: DISABLE
 580: LD_INT 0
 582: PPUSH
// begin enable ;
 583: ENABLE
// FogOff ( your_side ) ;
 584: LD_OWVAR 2
 588: PPUSH
 589: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 593: LD_ADDR_VAR 0 1
 597: PUSH
 598: LD_INT 22
 600: PUSH
 601: LD_OWVAR 2
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 2
 612: PUSH
 613: LD_INT 21
 615: PUSH
 616: LD_INT 1
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: PUSH
 623: LD_INT 21
 625: PUSH
 626: LD_INT 2
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: LIST
 637: PUSH
 638: EMPTY
 639: LIST
 640: LIST
 641: PPUSH
 642: CALL_OW 69
 646: PUSH
 647: FOR_IN
 648: IFFALSE 664
// SetLives ( i , 1000 ) ;
 650: LD_VAR 0 1
 654: PPUSH
 655: LD_INT 1000
 657: PPUSH
 658: CALL_OW 234
 662: GO 647
 664: POP
 665: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 666: LD_ADDR_VAR 0 1
 670: PUSH
 671: LD_INT 22
 673: PUSH
 674: LD_OWVAR 2
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: PUSH
 683: LD_INT 21
 685: PUSH
 686: LD_INT 1
 688: PUSH
 689: EMPTY
 690: LIST
 691: LIST
 692: PUSH
 693: EMPTY
 694: LIST
 695: LIST
 696: PPUSH
 697: CALL_OW 69
 701: PUSH
 702: FOR_IN
 703: IFFALSE 767
// begin SetSkill ( i , skill_combat , 10 ) ;
 705: LD_VAR 0 1
 709: PPUSH
 710: LD_INT 1
 712: PPUSH
 713: LD_INT 10
 715: PPUSH
 716: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 720: LD_VAR 0 1
 724: PPUSH
 725: LD_INT 2
 727: PPUSH
 728: LD_INT 10
 730: PPUSH
 731: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 735: LD_VAR 0 1
 739: PPUSH
 740: LD_INT 3
 742: PPUSH
 743: LD_INT 10
 745: PPUSH
 746: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 750: LD_VAR 0 1
 754: PPUSH
 755: LD_INT 4
 757: PPUSH
 758: LD_INT 10
 760: PPUSH
 761: CALL_OW 237
// end ;
 765: GO 702
 767: POP
 768: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 769: LD_ADDR_VAR 0 1
 773: PUSH
 774: LD_INT 22
 776: PUSH
 777: LD_OWVAR 2
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: PUSH
 786: LD_INT 2
 788: PUSH
 789: LD_INT 30
 791: PUSH
 792: LD_INT 0
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PUSH
 799: LD_INT 30
 801: PUSH
 802: LD_INT 1
 804: PUSH
 805: EMPTY
 806: LIST
 807: LIST
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: LIST
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: PPUSH
 818: CALL_OW 69
 822: PUSH
 823: FOR_IN
 824: IFFALSE 888
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 826: LD_VAR 0 1
 830: PPUSH
 831: CALL_OW 274
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: LD_INT 9999
 841: PPUSH
 842: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 846: LD_VAR 0 1
 850: PPUSH
 851: CALL_OW 274
 855: PPUSH
 856: LD_INT 2
 858: PPUSH
 859: LD_INT 9999
 861: PPUSH
 862: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 866: LD_VAR 0 1
 870: PPUSH
 871: CALL_OW 274
 875: PPUSH
 876: LD_INT 3
 878: PPUSH
 879: LD_INT 9999
 881: PPUSH
 882: CALL_OW 277
// end ;
 886: GO 823
 888: POP
 889: POP
// end ; end_of_file
 890: PPOPN 1
 892: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Platonov , Kirilenkova , Belkov , Belkov2 ; export Vsevolod , vsevolodTeam , Petr , Igor , Boris ; export ConvoyBoris , ConvoyIbrahim ; export function PrepareRussians ; begin
 893: LD_INT 0
 895: PPUSH
// PrepareHeroes ;
 896: CALL 905 0 0
// end ;
 900: LD_VAR 0 1
 904: RET
// function PrepareHeroes ; var i , j , car , tmp , cargoList , bigCargoList , point , areaPoints , nearPosition , burlakPosition , distance , index ; begin
 905: LD_INT 0
 907: PPUSH
 908: PPUSH
 909: PPUSH
 910: PPUSH
 911: PPUSH
 912: PPUSH
 913: PPUSH
 914: PPUSH
 915: PPUSH
 916: PPUSH
 917: PPUSH
 918: PPUSH
 919: PPUSH
// point = [ 170 , 208 ] ;
 920: LD_ADDR_VAR 0 8
 924: PUSH
 925: LD_INT 170
 927: PUSH
 928: LD_INT 208
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: ST_TO_ADDR
// areaPoints = AreaToList ( RussianSpawnArea1 , 0 ) ;
 935: LD_ADDR_VAR 0 9
 939: PUSH
 940: LD_INT 1
 942: PPUSH
 943: LD_INT 0
 945: PPUSH
 946: CALL_OW 517
 950: ST_TO_ADDR
// uc_side = 3 ;
 951: LD_ADDR_OWVAR 20
 955: PUSH
 956: LD_INT 3
 958: ST_TO_ADDR
// uc_nation = 3 ;
 959: LD_ADDR_OWVAR 21
 963: PUSH
 964: LD_INT 3
 966: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , 0 ) ;
 967: LD_ADDR_EXP 39
 971: PUSH
 972: LD_STRING Burlak
 974: PPUSH
 975: LD_INT 1
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL 11759 0 3
 985: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , true , 0 ) ;
 986: LD_ADDR_EXP 44
 990: PUSH
 991: LD_STRING Titov
 993: PPUSH
 994: LD_INT 1
 996: PPUSH
 997: LD_INT 0
 999: PPUSH
1000: CALL 11759 0 3
1004: ST_TO_ADDR
// Dolgov := PrepareUnitExt ( Dolgov , true , 0 ) ;
1005: LD_ADDR_EXP 45
1009: PUSH
1010: LD_STRING Dolgov
1012: PPUSH
1013: LD_INT 1
1015: PPUSH
1016: LD_INT 0
1018: PPUSH
1019: CALL 11759 0 3
1023: ST_TO_ADDR
// Lipshchin := PrepareUnitExt ( Lipshchin , true , 0 ) ;
1024: LD_ADDR_EXP 46
1028: PUSH
1029: LD_STRING Lipshchin
1031: PPUSH
1032: LD_INT 1
1034: PPUSH
1035: LD_INT 0
1037: PPUSH
1038: CALL 11759 0 3
1042: ST_TO_ADDR
// Karamazov := PrepareUnitExt ( Karamazov , true , class_engineer ) ;
1043: LD_ADDR_EXP 40
1047: PUSH
1048: LD_STRING Karamazov
1050: PPUSH
1051: LD_INT 1
1053: PPUSH
1054: LD_INT 2
1056: PPUSH
1057: CALL 11759 0 3
1061: ST_TO_ADDR
// Petrovova := PrepareUnitExt ( Petrovova , true , 0 ) ;
1062: LD_ADDR_EXP 41
1066: PUSH
1067: LD_STRING Petrovova
1069: PPUSH
1070: LD_INT 1
1072: PPUSH
1073: LD_INT 0
1075: PPUSH
1076: CALL 11759 0 3
1080: ST_TO_ADDR
// Gleb := PrepareUnitExt ( Gleb , true , 0 ) ;
1081: LD_ADDR_EXP 42
1085: PUSH
1086: LD_STRING Gleb
1088: PPUSH
1089: LD_INT 1
1091: PPUSH
1092: LD_INT 0
1094: PPUSH
1095: CALL 11759 0 3
1099: ST_TO_ADDR
// Petrosyan := PrepareUnitExt ( Petrosyan , true , 0 ) ;
1100: LD_ADDR_EXP 43
1104: PUSH
1105: LD_STRING Petrosyan
1107: PPUSH
1108: LD_INT 1
1110: PPUSH
1111: LD_INT 0
1113: PPUSH
1114: CALL 11759 0 3
1118: ST_TO_ADDR
// Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
1119: LD_ADDR_EXP 47
1123: PUSH
1124: LD_STRING Platonov
1126: PPUSH
1127: LD_INT 0
1129: PPUSH
1130: LD_INT 0
1132: PPUSH
1133: CALL 11759 0 3
1137: ST_TO_ADDR
// if TestCharacters ( 04_Kirilenkova ) then
1138: LD_STRING 04_Kirilenkova
1140: PPUSH
1141: CALL_OW 28
1145: IFFALSE 1172
// begin Kirilenkova := CreateCharacter ( 04_Kirilenkova ) ;
1147: LD_ADDR_EXP 48
1151: PUSH
1152: LD_STRING 04_Kirilenkova
1154: PPUSH
1155: CALL_OW 34
1159: ST_TO_ADDR
// SetClass ( Kirilenkova , class_scientistic ) ;
1160: LD_EXP 48
1164: PPUSH
1165: LD_INT 4
1167: PPUSH
1168: CALL_OW 336
// end ; if TestCharacters ( 04_Belkov ) then
1172: LD_STRING 04_Belkov
1174: PPUSH
1175: CALL_OW 28
1179: IFFALSE 1206
// begin Belkov := CreateCharacter ( 04_Belkov ) ;
1181: LD_ADDR_EXP 49
1185: PUSH
1186: LD_STRING 04_Belkov
1188: PPUSH
1189: CALL_OW 34
1193: ST_TO_ADDR
// SetClass ( Belkov , class_soldier ) ;
1194: LD_EXP 49
1198: PPUSH
1199: LD_INT 1
1201: PPUSH
1202: CALL_OW 336
// end ; if TestCharacters ( 04_Belkov2 ) then
1206: LD_STRING 04_Belkov2
1208: PPUSH
1209: CALL_OW 28
1213: IFFALSE 1240
// begin Belkov2 := CreateCharacter ( 04_Belkov2 ) ;
1215: LD_ADDR_EXP 50
1219: PUSH
1220: LD_STRING 04_Belkov2
1222: PPUSH
1223: CALL_OW 34
1227: ST_TO_ADDR
// SetClass ( Belkov2 , class_soldier ) ;
1228: LD_EXP 50
1232: PPUSH
1233: LD_INT 1
1235: PPUSH
1236: CALL_OW 336
// end ; for i := 1 to vehiclesFrom05 do
1240: LD_ADDR_VAR 0 2
1244: PUSH
1245: DOUBLE
1246: LD_INT 1
1248: DEC
1249: ST_TO_ADDR
1250: LD_EXP 1
1254: PUSH
1255: FOR_TO
1256: IFFALSE 1918
// begin uc_nation = vehiclesFrom05 [ i ] [ 1 ] ;
1258: LD_ADDR_OWVAR 21
1262: PUSH
1263: LD_EXP 1
1267: PUSH
1268: LD_VAR 0 2
1272: ARRAY
1273: PUSH
1274: LD_INT 1
1276: ARRAY
1277: ST_TO_ADDR
// vc_chassis := vehiclesFrom05 [ i ] [ 2 ] ;
1278: LD_ADDR_OWVAR 37
1282: PUSH
1283: LD_EXP 1
1287: PUSH
1288: LD_VAR 0 2
1292: ARRAY
1293: PUSH
1294: LD_INT 2
1296: ARRAY
1297: ST_TO_ADDR
// vc_engine = vehiclesFrom05 [ i ] [ 3 ] ;
1298: LD_ADDR_OWVAR 39
1302: PUSH
1303: LD_EXP 1
1307: PUSH
1308: LD_VAR 0 2
1312: ARRAY
1313: PUSH
1314: LD_INT 3
1316: ARRAY
1317: ST_TO_ADDR
// vc_control = vehiclesFrom05 [ i ] [ 4 ] ;
1318: LD_ADDR_OWVAR 38
1322: PUSH
1323: LD_EXP 1
1327: PUSH
1328: LD_VAR 0 2
1332: ARRAY
1333: PUSH
1334: LD_INT 4
1336: ARRAY
1337: ST_TO_ADDR
// vc_weapon := vehiclesFrom05 [ i ] [ 5 ] ;
1338: LD_ADDR_OWVAR 40
1342: PUSH
1343: LD_EXP 1
1347: PUSH
1348: LD_VAR 0 2
1352: ARRAY
1353: PUSH
1354: LD_INT 5
1356: ARRAY
1357: ST_TO_ADDR
// uc_direction := 0 ;
1358: LD_ADDR_OWVAR 24
1362: PUSH
1363: LD_INT 0
1365: ST_TO_ADDR
// vc_fuel_battery := Rand ( 10 , 15 ) ;
1366: LD_ADDR_OWVAR 41
1370: PUSH
1371: LD_INT 10
1373: PPUSH
1374: LD_INT 15
1376: PPUSH
1377: CALL_OW 12
1381: ST_TO_ADDR
// car := CreateVehicle ;
1382: LD_ADDR_VAR 0 4
1386: PUSH
1387: CALL_OW 45
1391: ST_TO_ADDR
// distance = 999 ;
1392: LD_ADDR_VAR 0 12
1396: PUSH
1397: LD_INT 999
1399: ST_TO_ADDR
// index = 1 ;
1400: LD_ADDR_VAR 0 13
1404: PUSH
1405: LD_INT 1
1407: ST_TO_ADDR
// for j := 1 to areaPoints [ 1 ] do
1408: LD_ADDR_VAR 0 3
1412: PUSH
1413: DOUBLE
1414: LD_INT 1
1416: DEC
1417: ST_TO_ADDR
1418: LD_VAR 0 9
1422: PUSH
1423: LD_INT 1
1425: ARRAY
1426: PUSH
1427: FOR_TO
1428: IFFALSE 1599
// begin if GetDistXY ( point [ 1 ] , point [ 2 ] , areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ) < distance then
1430: LD_VAR 0 8
1434: PUSH
1435: LD_INT 1
1437: ARRAY
1438: PPUSH
1439: LD_VAR 0 8
1443: PUSH
1444: LD_INT 2
1446: ARRAY
1447: PPUSH
1448: LD_VAR 0 9
1452: PUSH
1453: LD_INT 1
1455: ARRAY
1456: PUSH
1457: LD_VAR 0 3
1461: ARRAY
1462: PPUSH
1463: LD_VAR 0 9
1467: PUSH
1468: LD_INT 2
1470: ARRAY
1471: PUSH
1472: LD_VAR 0 3
1476: ARRAY
1477: PPUSH
1478: CALL_OW 298
1482: PUSH
1483: LD_VAR 0 12
1487: LESS
1488: IFFALSE 1597
// begin distance = GetDistXY ( point [ 1 ] , point [ 2 ] , areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ) ;
1490: LD_ADDR_VAR 0 12
1494: PUSH
1495: LD_VAR 0 8
1499: PUSH
1500: LD_INT 1
1502: ARRAY
1503: PPUSH
1504: LD_VAR 0 8
1508: PUSH
1509: LD_INT 2
1511: ARRAY
1512: PPUSH
1513: LD_VAR 0 9
1517: PUSH
1518: LD_INT 1
1520: ARRAY
1521: PUSH
1522: LD_VAR 0 3
1526: ARRAY
1527: PPUSH
1528: LD_VAR 0 9
1532: PUSH
1533: LD_INT 2
1535: ARRAY
1536: PUSH
1537: LD_VAR 0 3
1541: ARRAY
1542: PPUSH
1543: CALL_OW 298
1547: ST_TO_ADDR
// nearPosition = [ areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ] ;
1548: LD_ADDR_VAR 0 10
1552: PUSH
1553: LD_VAR 0 9
1557: PUSH
1558: LD_INT 1
1560: ARRAY
1561: PUSH
1562: LD_VAR 0 3
1566: ARRAY
1567: PUSH
1568: LD_VAR 0 9
1572: PUSH
1573: LD_INT 2
1575: ARRAY
1576: PUSH
1577: LD_VAR 0 3
1581: ARRAY
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: ST_TO_ADDR
// index = j ;
1587: LD_ADDR_VAR 0 13
1591: PUSH
1592: LD_VAR 0 3
1596: ST_TO_ADDR
// end ; end ;
1597: GO 1427
1599: POP
1600: POP
// if not burlakPosition then
1601: LD_VAR 0 11
1605: NOT
1606: IFFALSE 1618
// burlakPosition = nearPosition ;
1608: LD_ADDR_VAR 0 11
1612: PUSH
1613: LD_VAR 0 10
1617: ST_TO_ADDR
// if areaPoints then
1618: LD_VAR 0 9
1622: IFFALSE 1670
// begin areaPoints = Delete2D ( areaPoints , 1 , index ) ;
1624: LD_ADDR_VAR 0 9
1628: PUSH
1629: LD_VAR 0 9
1633: PPUSH
1634: LD_INT 1
1636: PPUSH
1637: LD_VAR 0 13
1641: PPUSH
1642: CALL 12588 0 3
1646: ST_TO_ADDR
// areaPoints = Delete2D ( areaPoints , 2 , index ) ;
1647: LD_ADDR_VAR 0 9
1651: PUSH
1652: LD_VAR 0 9
1656: PPUSH
1657: LD_INT 2
1659: PPUSH
1660: LD_VAR 0 13
1664: PPUSH
1665: CALL 12588 0 3
1669: ST_TO_ADDR
// end ; PlaceUnitXY ( car , nearPosition [ 1 ] , nearPosition [ 2 ] , false ) ;
1670: LD_VAR 0 4
1674: PPUSH
1675: LD_VAR 0 10
1679: PUSH
1680: LD_INT 1
1682: ARRAY
1683: PPUSH
1684: LD_VAR 0 10
1688: PUSH
1689: LD_INT 2
1691: ARRAY
1692: PPUSH
1693: LD_INT 0
1695: PPUSH
1696: CALL_OW 48
// case vehiclesFrom05 [ i ] [ 6 ] of Bur :
1700: LD_EXP 1
1704: PUSH
1705: LD_VAR 0 2
1709: ARRAY
1710: PUSH
1711: LD_INT 6
1713: ARRAY
1714: PUSH
1715: LD_STRING Bur
1717: DOUBLE
1718: EQUAL
1719: IFTRUE 1723
1721: GO 1740
1723: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
1724: LD_EXP 39
1728: PPUSH
1729: LD_VAR 0 4
1733: PPUSH
1734: CALL_OW 52
1738: GO 1916
1740: LD_STRING Kar
1742: DOUBLE
1743: EQUAL
1744: IFTRUE 1748
1746: GO 1765
1748: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
1749: LD_EXP 40
1753: PPUSH
1754: LD_VAR 0 4
1758: PPUSH
1759: CALL_OW 52
1763: GO 1916
1765: LD_STRING Ptr
1767: DOUBLE
1768: EQUAL
1769: IFTRUE 1773
1771: GO 1790
1773: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
1774: LD_EXP 41
1778: PPUSH
1779: LD_VAR 0 4
1783: PPUSH
1784: CALL_OW 52
1788: GO 1916
1790: LD_STRING Glb
1792: DOUBLE
1793: EQUAL
1794: IFTRUE 1798
1796: GO 1815
1798: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
1799: LD_EXP 42
1803: PPUSH
1804: LD_VAR 0 4
1808: PPUSH
1809: CALL_OW 52
1813: GO 1916
1815: LD_STRING Pet
1817: DOUBLE
1818: EQUAL
1819: IFTRUE 1823
1821: GO 1840
1823: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
1824: LD_EXP 43
1828: PPUSH
1829: LD_VAR 0 4
1833: PPUSH
1834: CALL_OW 52
1838: GO 1916
1840: LD_STRING Dol
1842: DOUBLE
1843: EQUAL
1844: IFTRUE 1848
1846: GO 1865
1848: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
1849: LD_EXP 45
1853: PPUSH
1854: LD_VAR 0 4
1858: PPUSH
1859: CALL_OW 52
1863: GO 1916
1865: LD_STRING Lip
1867: DOUBLE
1868: EQUAL
1869: IFTRUE 1873
1871: GO 1890
1873: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
1874: LD_EXP 46
1878: PPUSH
1879: LD_VAR 0 4
1883: PPUSH
1884: CALL_OW 52
1888: GO 1916
1890: LD_STRING Tit
1892: DOUBLE
1893: EQUAL
1894: IFTRUE 1898
1896: GO 1915
1898: POP
// PlaceHumanInUnit ( Titov , car ) ; end ;
1899: LD_EXP 44
1903: PPUSH
1904: LD_VAR 0 4
1908: PPUSH
1909: CALL_OW 52
1913: GO 1916
1915: POP
// end ;
1916: GO 1255
1918: POP
1919: POP
// cargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
1920: LD_ADDR_VAR 0 6
1924: PUSH
1925: LD_INT 22
1927: PUSH
1928: LD_INT 3
1930: PUSH
1931: EMPTY
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 21
1937: PUSH
1938: LD_INT 2
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: LD_INT 2
1947: PUSH
1948: LD_INT 34
1950: PUSH
1951: LD_INT 51
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: PUSH
1958: LD_INT 34
1960: PUSH
1961: LD_INT 32
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: PUSH
1968: LD_INT 34
1970: PUSH
1971: LD_INT 12
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: PPUSH
1989: CALL_OW 69
1993: ST_TO_ADDR
// bigCargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 89 ] ] ) ;
1994: LD_ADDR_VAR 0 7
1998: PUSH
1999: LD_INT 22
2001: PUSH
2002: LD_INT 3
2004: PUSH
2005: EMPTY
2006: LIST
2007: LIST
2008: PUSH
2009: LD_INT 21
2011: PUSH
2012: LD_INT 2
2014: PUSH
2015: EMPTY
2016: LIST
2017: LIST
2018: PUSH
2019: LD_INT 34
2021: PUSH
2022: LD_INT 89
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: LIST
2033: PPUSH
2034: CALL_OW 69
2038: ST_TO_ADDR
// if cargoList then
2039: LD_VAR 0 6
2043: IFFALSE 2233
// for i = 1 to cargoList do
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: DOUBLE
2051: LD_INT 1
2053: DEC
2054: ST_TO_ADDR
2055: LD_VAR 0 6
2059: PUSH
2060: FOR_TO
2061: IFFALSE 2231
// if resourcesFrom05 then
2063: LD_EXP 2
2067: IFFALSE 2229
// begin if not resourcesFrom05 [ i ] [ 1 ] > 100 or resourcesFrom05 [ i ] [ 2 ] > 100 or resourcesFrom05 [ i ] [ 3 ] > 100 then
2069: LD_EXP 2
2073: PUSH
2074: LD_VAR 0 2
2078: ARRAY
2079: PUSH
2080: LD_INT 1
2082: ARRAY
2083: PUSH
2084: LD_INT 100
2086: GREATER
2087: NOT
2088: PUSH
2089: LD_EXP 2
2093: PUSH
2094: LD_VAR 0 2
2098: ARRAY
2099: PUSH
2100: LD_INT 2
2102: ARRAY
2103: PUSH
2104: LD_INT 100
2106: GREATER
2107: OR
2108: PUSH
2109: LD_EXP 2
2113: PUSH
2114: LD_VAR 0 2
2118: ARRAY
2119: PUSH
2120: LD_INT 3
2122: ARRAY
2123: PUSH
2124: LD_INT 100
2126: GREATER
2127: OR
2128: IFFALSE 2229
// begin AddCargo ( cargoList [ i ] , 1 , resourcesFrom05 [ i ] [ 1 ] ) ;
2130: LD_VAR 0 6
2134: PUSH
2135: LD_VAR 0 2
2139: ARRAY
2140: PPUSH
2141: LD_INT 1
2143: PPUSH
2144: LD_EXP 2
2148: PUSH
2149: LD_VAR 0 2
2153: ARRAY
2154: PUSH
2155: LD_INT 1
2157: ARRAY
2158: PPUSH
2159: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resourcesFrom05 [ i ] [ 2 ] ) ;
2163: LD_VAR 0 6
2167: PUSH
2168: LD_VAR 0 2
2172: ARRAY
2173: PPUSH
2174: LD_INT 2
2176: PPUSH
2177: LD_EXP 2
2181: PUSH
2182: LD_VAR 0 2
2186: ARRAY
2187: PUSH
2188: LD_INT 2
2190: ARRAY
2191: PPUSH
2192: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resourcesFrom05 [ i ] [ 3 ] ) ;
2196: LD_VAR 0 6
2200: PUSH
2201: LD_VAR 0 2
2205: ARRAY
2206: PPUSH
2207: LD_INT 3
2209: PPUSH
2210: LD_EXP 2
2214: PUSH
2215: LD_VAR 0 2
2219: ARRAY
2220: PUSH
2221: LD_INT 3
2223: ARRAY
2224: PPUSH
2225: CALL_OW 291
// end ; end ;
2229: GO 2060
2231: POP
2232: POP
// if bigCargoList then
2233: LD_VAR 0 7
2237: IFFALSE 2426
// for i = 1 to bigCargoList do
2239: LD_ADDR_VAR 0 2
2243: PUSH
2244: DOUBLE
2245: LD_INT 1
2247: DEC
2248: ST_TO_ADDR
2249: LD_VAR 0 7
2253: PUSH
2254: FOR_TO
2255: IFFALSE 2424
// if resourcesFrom05 then
2257: LD_EXP 2
2261: IFFALSE 2422
// begin if resourcesFrom05 [ i ] [ 1 ] > 100 or resourcesFrom05 [ i ] [ 2 ] > 100 or resourcesFrom05 [ i ] [ 3 ] > 100 then
2263: LD_EXP 2
2267: PUSH
2268: LD_VAR 0 2
2272: ARRAY
2273: PUSH
2274: LD_INT 1
2276: ARRAY
2277: PUSH
2278: LD_INT 100
2280: GREATER
2281: PUSH
2282: LD_EXP 2
2286: PUSH
2287: LD_VAR 0 2
2291: ARRAY
2292: PUSH
2293: LD_INT 2
2295: ARRAY
2296: PUSH
2297: LD_INT 100
2299: GREATER
2300: OR
2301: PUSH
2302: LD_EXP 2
2306: PUSH
2307: LD_VAR 0 2
2311: ARRAY
2312: PUSH
2313: LD_INT 3
2315: ARRAY
2316: PUSH
2317: LD_INT 100
2319: GREATER
2320: OR
2321: IFFALSE 2422
// begin AddCargo ( bigCargoList [ i ] , 1 , resourcesFrom05 [ i ] [ 1 ] ) ;
2323: LD_VAR 0 7
2327: PUSH
2328: LD_VAR 0 2
2332: ARRAY
2333: PPUSH
2334: LD_INT 1
2336: PPUSH
2337: LD_EXP 2
2341: PUSH
2342: LD_VAR 0 2
2346: ARRAY
2347: PUSH
2348: LD_INT 1
2350: ARRAY
2351: PPUSH
2352: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 2 , resourcesFrom05 [ i ] [ 2 ] ) ;
2356: LD_VAR 0 7
2360: PUSH
2361: LD_VAR 0 2
2365: ARRAY
2366: PPUSH
2367: LD_INT 2
2369: PPUSH
2370: LD_EXP 2
2374: PUSH
2375: LD_VAR 0 2
2379: ARRAY
2380: PUSH
2381: LD_INT 2
2383: ARRAY
2384: PPUSH
2385: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 3 , resourcesFrom05 [ i ] [ 3 ] ) ;
2389: LD_VAR 0 7
2393: PUSH
2394: LD_VAR 0 2
2398: ARRAY
2399: PPUSH
2400: LD_INT 3
2402: PPUSH
2403: LD_EXP 2
2407: PUSH
2408: LD_VAR 0 2
2412: ARRAY
2413: PUSH
2414: LD_INT 3
2416: ARRAY
2417: PPUSH
2418: CALL_OW 291
// end ; end ;
2422: GO 2254
2424: POP
2425: POP
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_class , class_engineer ] ] ) then
2426: LD_INT 22
2428: PUSH
2429: LD_INT 3
2431: PUSH
2432: EMPTY
2433: LIST
2434: LIST
2435: PUSH
2436: LD_INT 21
2438: PUSH
2439: LD_INT 1
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: PUSH
2446: LD_INT 23
2448: PUSH
2449: LD_INT 3
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PUSH
2456: LD_INT 25
2458: PUSH
2459: LD_INT 2
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL_OW 69
2476: NOT
2477: IFFALSE 2582
// begin if IsOk ( Lipshchin ) then
2479: LD_EXP 46
2483: PPUSH
2484: CALL_OW 302
2488: IFFALSE 2504
// SetClass ( Lipshchin , class_engineer ) else
2490: LD_EXP 46
2494: PPUSH
2495: LD_INT 2
2497: PPUSH
2498: CALL_OW 336
2502: GO 2582
// begin tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ;
2504: LD_ADDR_VAR 0 5
2508: PUSH
2509: LD_INT 22
2511: PUSH
2512: LD_INT 3
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: PUSH
2519: LD_INT 21
2521: PUSH
2522: LD_INT 1
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PUSH
2529: LD_INT 23
2531: PUSH
2532: LD_INT 3
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: PUSH
2539: LD_INT 50
2541: PUSH
2542: EMPTY
2543: LIST
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: LIST
2549: LIST
2550: PPUSH
2551: CALL_OW 69
2555: ST_TO_ADDR
// SetClass ( tmp [ rand ( 0 , tmp ) ] , class_engineer ) ;
2556: LD_VAR 0 5
2560: PUSH
2561: LD_INT 0
2563: PPUSH
2564: LD_VAR 0 5
2568: PPUSH
2569: CALL_OW 12
2573: ARRAY
2574: PPUSH
2575: LD_INT 2
2577: PPUSH
2578: CALL_OW 336
// end ; end ; SetTech ( tech_ApeLang , 3 , apeTechsStatus [ 1 ] ) ;
2582: LD_INT 1
2584: PPUSH
2585: LD_INT 3
2587: PPUSH
2588: LD_EXP 5
2592: PUSH
2593: LD_INT 1
2595: ARRAY
2596: PPUSH
2597: CALL_OW 322
// SetTech ( tech_ApePsych , 3 , apeTechsStatus [ 2 ] ) ;
2601: LD_INT 2
2603: PPUSH
2604: LD_INT 3
2606: PPUSH
2607: LD_EXP 5
2611: PUSH
2612: LD_INT 2
2614: ARRAY
2615: PPUSH
2616: CALL_OW 322
// SetTech ( tech_ApeAgres , 3 , apeTechsStatus [ 3 ] ) ;
2620: LD_INT 11
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: LD_EXP 5
2630: PUSH
2631: LD_INT 3
2633: ARRAY
2634: PPUSH
2635: CALL_OW 322
// end ;
2639: LD_VAR 0 1
2643: RET
// export function PrepareVsevolod ; var i , un ; begin
2644: LD_INT 0
2646: PPUSH
2647: PPUSH
2648: PPUSH
// uc_side = 6 ;
2649: LD_ADDR_OWVAR 20
2653: PUSH
2654: LD_INT 6
2656: ST_TO_ADDR
// uc_nation = 3 ;
2657: LD_ADDR_OWVAR 21
2661: PUSH
2662: LD_INT 3
2664: ST_TO_ADDR
// vsevolodTeam = [ ] ;
2665: LD_ADDR_EXP 52
2669: PUSH
2670: EMPTY
2671: ST_TO_ADDR
// Vsevolod := PrepareUnitExt ( Vsevolod , false , class_soldier ) ;
2672: LD_ADDR_EXP 51
2676: PUSH
2677: LD_STRING Vsevolod
2679: PPUSH
2680: LD_INT 0
2682: PPUSH
2683: LD_INT 1
2685: PPUSH
2686: CALL 11759 0 3
2690: ST_TO_ADDR
// PlaceUnitArea ( Vsevolod , VsevolodSpawnArea , false ) ;
2691: LD_EXP 51
2695: PPUSH
2696: LD_INT 7
2698: PPUSH
2699: LD_INT 0
2701: PPUSH
2702: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Vsevolod ;
2706: LD_ADDR_EXP 52
2710: PUSH
2711: LD_EXP 52
2715: PUSH
2716: LD_EXP 51
2720: ADD
2721: ST_TO_ADDR
// Petr = PrepareUnitExt ( SPetr , false , class_engineer ) ;
2722: LD_ADDR_EXP 53
2726: PUSH
2727: LD_STRING SPetr
2729: PPUSH
2730: LD_INT 0
2732: PPUSH
2733: LD_INT 2
2735: PPUSH
2736: CALL 11759 0 3
2740: ST_TO_ADDR
// PlaceUnitArea ( Petr , VsevolodSpawnArea , false ) ;
2741: LD_EXP 53
2745: PPUSH
2746: LD_INT 7
2748: PPUSH
2749: LD_INT 0
2751: PPUSH
2752: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Petr ;
2756: LD_ADDR_EXP 52
2760: PUSH
2761: LD_EXP 52
2765: PUSH
2766: LD_EXP 53
2770: ADD
2771: ST_TO_ADDR
// Igor = PrepareUnitExt ( SIgor , false , class_soldier ) ;
2772: LD_ADDR_EXP 54
2776: PUSH
2777: LD_STRING SIgor
2779: PPUSH
2780: LD_INT 0
2782: PPUSH
2783: LD_INT 1
2785: PPUSH
2786: CALL 11759 0 3
2790: ST_TO_ADDR
// PlaceUnitArea ( Igor , VsevolodSpawnArea , false ) ;
2791: LD_EXP 54
2795: PPUSH
2796: LD_INT 7
2798: PPUSH
2799: LD_INT 0
2801: PPUSH
2802: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Igor ;
2806: LD_ADDR_EXP 52
2810: PUSH
2811: LD_EXP 52
2815: PUSH
2816: LD_EXP 54
2820: ADD
2821: ST_TO_ADDR
// Boris = PrepareUnitExt ( SBoris , false , class_soldier ) ;
2822: LD_ADDR_EXP 55
2826: PUSH
2827: LD_STRING SBoris
2829: PPUSH
2830: LD_INT 0
2832: PPUSH
2833: LD_INT 1
2835: PPUSH
2836: CALL 11759 0 3
2840: ST_TO_ADDR
// PlaceUnitArea ( Boris , VsevolodSpawnArea , false ) ;
2841: LD_EXP 55
2845: PPUSH
2846: LD_INT 7
2848: PPUSH
2849: LD_INT 0
2851: PPUSH
2852: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Boris ;
2856: LD_ADDR_EXP 52
2860: PUSH
2861: LD_EXP 52
2865: PUSH
2866: LD_EXP 55
2870: ADD
2871: ST_TO_ADDR
// end ;
2872: LD_VAR 0 1
2876: RET
// export function SpawnPlatonovReinforces ; var i , un , veh ; begin
2877: LD_INT 0
2879: PPUSH
2880: PPUSH
2881: PPUSH
2882: PPUSH
// uc_side = 3 ;
2883: LD_ADDR_OWVAR 20
2887: PUSH
2888: LD_INT 3
2890: ST_TO_ADDR
// uc_nation = 3 ;
2891: LD_ADDR_OWVAR 21
2895: PUSH
2896: LD_INT 3
2898: ST_TO_ADDR
// PrepareSoldier ( false , 4 ) ;
2899: LD_INT 0
2901: PPUSH
2902: LD_INT 4
2904: PPUSH
2905: CALL_OW 381
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] , rand ( 50 , 60 ) ) ;
2909: LD_INT 22
2911: PPUSH
2912: LD_INT 1
2914: PPUSH
2915: LD_INT 1
2917: PPUSH
2918: LD_INT 43
2920: PUSH
2921: LD_INT 44
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: PUSH
2928: LD_INT 1
2930: PPUSH
2931: LD_INT 2
2933: PPUSH
2934: CALL_OW 12
2938: ARRAY
2939: PPUSH
2940: LD_INT 50
2942: PPUSH
2943: LD_INT 60
2945: PPUSH
2946: CALL_OW 12
2950: PPUSH
2951: CALL 46162 0 5
// veh = CreateVehicle ;
2955: LD_ADDR_VAR 0 4
2959: PUSH
2960: CALL_OW 45
2964: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
2965: LD_VAR 0 4
2969: PPUSH
2970: LD_INT 0
2972: PPUSH
2973: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 230 , false ) ;
2977: LD_VAR 0 4
2981: PPUSH
2982: LD_INT 134
2984: PPUSH
2985: LD_INT 230
2987: PPUSH
2988: LD_INT 0
2990: PPUSH
2991: CALL_OW 48
// if Belkov then
2995: LD_EXP 49
2999: IFFALSE 3017
// PlaceHumanInUnit ( Belkov , veh ) else
3001: LD_EXP 49
3005: PPUSH
3006: LD_VAR 0 4
3010: PPUSH
3011: CALL_OW 52
3015: GO 3070
// if Difficulty = 1 or Difficulty = 2 then
3017: LD_OWVAR 67
3021: PUSH
3022: LD_INT 1
3024: EQUAL
3025: PUSH
3026: LD_OWVAR 67
3030: PUSH
3031: LD_INT 2
3033: EQUAL
3034: OR
3035: IFFALSE 3070
// begin ConvoyBoris = PrepareUnitExt ( SCBoris , false , class_soldier ) ;
3037: LD_ADDR_EXP 56
3041: PUSH
3042: LD_STRING SCBoris
3044: PPUSH
3045: LD_INT 0
3047: PPUSH
3048: LD_INT 1
3050: PPUSH
3051: CALL 11759 0 3
3055: ST_TO_ADDR
// PlaceHumanInUnit ( ConvoyBoris , veh ) ;
3056: LD_EXP 56
3060: PPUSH
3061: LD_VAR 0 4
3065: PPUSH
3066: CALL_OW 52
// end ; PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3070: LD_INT 22
3072: PPUSH
3073: LD_INT 1
3075: PPUSH
3076: LD_INT 1
3078: PPUSH
3079: LD_INT 51
3081: PPUSH
3082: LD_INT 50
3084: PPUSH
3085: LD_INT 60
3087: PPUSH
3088: CALL_OW 12
3092: PPUSH
3093: CALL 46162 0 5
// veh = CreateVehicle ;
3097: LD_ADDR_VAR 0 4
3101: PUSH
3102: CALL_OW 45
3106: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3107: LD_VAR 0 4
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 233 , false ) ;
3119: LD_VAR 0 4
3123: PPUSH
3124: LD_INT 134
3126: PPUSH
3127: LD_INT 233
3129: PPUSH
3130: LD_INT 0
3132: PPUSH
3133: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
3137: LD_VAR 0 4
3141: PPUSH
3142: LD_INT 1
3144: PPUSH
3145: LD_INT 100
3147: PPUSH
3148: CALL_OW 290
// if Belkov2 then
3152: LD_EXP 50
3156: IFFALSE 3174
// PlaceHumanInUnit ( Belkov2 , veh ) else
3158: LD_EXP 50
3162: PPUSH
3163: LD_VAR 0 4
3167: PPUSH
3168: CALL_OW 52
3172: GO 3217
// if Difficulty = 1 then
3174: LD_OWVAR 67
3178: PUSH
3179: LD_INT 1
3181: EQUAL
3182: IFFALSE 3217
// begin ConvoyIbrahim = PrepareUnitExt ( SCIbrahim , false , class_soldier ) ;
3184: LD_ADDR_EXP 57
3188: PUSH
3189: LD_STRING SCIbrahim
3191: PPUSH
3192: LD_INT 0
3194: PPUSH
3195: LD_INT 1
3197: PPUSH
3198: CALL 11759 0 3
3202: ST_TO_ADDR
// PlaceHumanInUnit ( ConvoyIbrahim , veh ) ;
3203: LD_EXP 57
3207: PPUSH
3208: LD_VAR 0 4
3212: PPUSH
3213: CALL_OW 52
// end ; if Kirilenkova then
3217: LD_EXP 48
3221: IFFALSE 3319
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3223: LD_INT 22
3225: PPUSH
3226: LD_INT 1
3228: PPUSH
3229: LD_INT 1
3231: PPUSH
3232: LD_INT 51
3234: PPUSH
3235: LD_INT 50
3237: PPUSH
3238: LD_INT 60
3240: PPUSH
3241: CALL_OW 12
3245: PPUSH
3246: CALL 46162 0 5
// veh = CreateVehicle ;
3250: LD_ADDR_VAR 0 4
3254: PUSH
3255: CALL_OW 45
3259: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3260: LD_VAR 0 4
3264: PPUSH
3265: LD_INT 0
3267: PPUSH
3268: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 236 , false ) ;
3272: LD_VAR 0 4
3276: PPUSH
3277: LD_INT 134
3279: PPUSH
3280: LD_INT 236
3282: PPUSH
3283: LD_INT 0
3285: PPUSH
3286: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
3290: LD_VAR 0 4
3294: PPUSH
3295: LD_INT 1
3297: PPUSH
3298: LD_INT 100
3300: PPUSH
3301: CALL_OW 290
// PlaceHumanInUnit ( Kirilenkova , veh ) ;
3305: LD_EXP 48
3309: PPUSH
3310: LD_VAR 0 4
3314: PPUSH
3315: CALL_OW 52
// end ; end ; end_of_file
3319: LD_VAR 0 1
3323: RET
// export VanHouten ; export ovsyenkoBase , terminalBase , headAmBase ; export trapTeam , convoyTeam , attackTeam ; export function PrepareAmericans ; begin
3324: LD_INT 0
3326: PPUSH
// PrepareOvsyenko ;
3327: CALL 3344 0 0
// PrepareTerminal ;
3331: CALL 3539 0 0
// PrepareMainAmericanBase ;
3335: CALL 3622 0 0
// end ;
3339: LD_VAR 0 1
3343: RET
// function PrepareOvsyenko ; var soldiersAmount ; begin
3344: LD_INT 0
3346: PPUSH
3347: PPUSH
// uc_side = 1 ;
3348: LD_ADDR_OWVAR 20
3352: PUSH
3353: LD_INT 1
3355: ST_TO_ADDR
// uc_nation = nation_american ;
3356: LD_ADDR_OWVAR 21
3360: PUSH
3361: LD_INT 1
3363: ST_TO_ADDR
// soldiersAmount = 3 ;
3364: LD_ADDR_VAR 0 2
3368: PUSH
3369: LD_INT 3
3371: ST_TO_ADDR
// if fastBreakthrough then
3372: LD_EXP 3
3376: IFFALSE 3394
// begin RemoveUnit ( ovs_bun2 ) ;
3378: LD_INT 229
3380: PPUSH
3381: CALL_OW 64
// RemoveUnit ( ovs_bun3 ) ;
3385: LD_INT 258
3387: PPUSH
3388: CALL_OW 64
// end else
3392: GO 3402
// soldiersAmount = 4 ;
3394: LD_ADDR_VAR 0 2
3398: PUSH
3399: LD_INT 4
3401: ST_TO_ADDR
// ovsyenkoBase := Nef_PrepareBase ( ovsyenko , OvsyenkoBaseArea , ovsyenko , enemySkillLevel , [ ovsyenkoStartCrates , 50 , 0 ] , 1 , [ soldiersAmount , 1 , 0 , 1 ] ) ;
3402: LD_ADDR_EXP 59
3406: PUSH
3407: LD_INT 86
3409: PPUSH
3410: LD_INT 3
3412: PPUSH
3413: LD_STRING ovsyenko
3415: PPUSH
3416: LD_EXP 34
3420: PPUSH
3421: LD_EXP 35
3425: PUSH
3426: LD_INT 50
3428: PUSH
3429: LD_INT 0
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: LIST
3436: PPUSH
3437: LD_INT 1
3439: PPUSH
3440: LD_VAR 0 2
3444: PUSH
3445: LD_INT 1
3447: PUSH
3448: LD_INT 0
3450: PUSH
3451: LD_INT 1
3453: PUSH
3454: EMPTY
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: PPUSH
3460: CALL 12660 0 7
3464: ST_TO_ADDR
// case Difficulty of 1 :
3465: LD_OWVAR 67
3469: PUSH
3470: LD_INT 1
3472: DOUBLE
3473: EQUAL
3474: IFTRUE 3478
3476: GO 3491
3478: POP
// PlaceWeaponTurret ( ovs_bun1 , us_double_gun ) ; 2 :
3479: LD_INT 97
3481: PPUSH
3482: LD_INT 5
3484: PPUSH
3485: CALL_OW 431
3489: GO 3534
3491: LD_INT 2
3493: DOUBLE
3494: EQUAL
3495: IFTRUE 3499
3497: GO 3512
3499: POP
// PlaceWeaponTurret ( ovs_bun1 , us_light_gun ) ; 3 :
3500: LD_INT 97
3502: PPUSH
3503: LD_INT 3
3505: PPUSH
3506: CALL_OW 431
3510: GO 3534
3512: LD_INT 3
3514: DOUBLE
3515: EQUAL
3516: IFTRUE 3520
3518: GO 3533
3520: POP
// PlaceWeaponTurret ( ovs_bun1 , us_gatling_gun ) ; end ;
3521: LD_INT 97
3523: PPUSH
3524: LD_INT 4
3526: PPUSH
3527: CALL_OW 431
3531: GO 3534
3533: POP
// end ;
3534: LD_VAR 0 1
3538: RET
// function PrepareTerminal ; begin
3539: LD_INT 0
3541: PPUSH
// uc_side = 1 ;
3542: LD_ADDR_OWVAR 20
3546: PUSH
3547: LD_INT 1
3549: ST_TO_ADDR
// uc_nation = nation_american ;
3550: LD_ADDR_OWVAR 21
3554: PUSH
3555: LD_INT 1
3557: ST_TO_ADDR
// terminalBase := Nef_PrepareBase ( terminal , terminalBaseArea , terminal , enemySkillLevel , [ 100 , 50 , 0 ] , 1 , [ 2 , 1 , 0 , 0 ] ) ;
3558: LD_ADDR_EXP 60
3562: PUSH
3563: LD_INT 168
3565: PPUSH
3566: LD_INT 4
3568: PPUSH
3569: LD_STRING terminal
3571: PPUSH
3572: LD_EXP 34
3576: PPUSH
3577: LD_INT 100
3579: PUSH
3580: LD_INT 50
3582: PUSH
3583: LD_INT 0
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: LIST
3590: PPUSH
3591: LD_INT 1
3593: PPUSH
3594: LD_INT 2
3596: PUSH
3597: LD_INT 1
3599: PUSH
3600: LD_INT 0
3602: PUSH
3603: LD_INT 0
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: PPUSH
3612: CALL 12660 0 7
3616: ST_TO_ADDR
// end ;
3617: LD_VAR 0 1
3621: RET
// function PrepareMainAmericanBase ; begin
3622: LD_INT 0
3624: PPUSH
// uc_side = 1 ;
3625: LD_ADDR_OWVAR 20
3629: PUSH
3630: LD_INT 1
3632: ST_TO_ADDR
// uc_nation = nation_american ;
3633: LD_ADDR_OWVAR 21
3637: PUSH
3638: LD_INT 1
3640: ST_TO_ADDR
// if fastBreakthrough then
3641: LD_EXP 3
3645: IFFALSE 3654
// RemoveUnit ( ovs_bun2 ) ;
3647: LD_INT 229
3649: PPUSH
3650: CALL_OW 64
// headAmBase := Nef_PrepareBase ( headamdepot , HeadAmericanBaseArea ,  , enemySkillLevel , [ 3000 , 1000 , 0 ] , 1 , [ 9 , 3 , 6 , 2 ] ) ;
3654: LD_ADDR_EXP 61
3658: PUSH
3659: LD_INT 106
3661: PPUSH
3662: LD_INT 5
3664: PPUSH
3665: LD_STRING 
3667: PPUSH
3668: LD_EXP 34
3672: PPUSH
3673: LD_INT 3000
3675: PUSH
3676: LD_INT 1000
3678: PUSH
3679: LD_INT 0
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: LIST
3686: PPUSH
3687: LD_INT 1
3689: PPUSH
3690: LD_INT 9
3692: PUSH
3693: LD_INT 3
3695: PUSH
3696: LD_INT 6
3698: PUSH
3699: LD_INT 2
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: PPUSH
3708: CALL 12660 0 7
3712: ST_TO_ADDR
// VanHouten = PrepareUnitExt ( VanHouten , false , class_soldier ) ;
3713: LD_ADDR_EXP 58
3717: PUSH
3718: LD_STRING VanHouten
3720: PPUSH
3721: LD_INT 0
3723: PPUSH
3724: LD_INT 1
3726: PPUSH
3727: CALL 11759 0 3
3731: ST_TO_ADDR
// headAmBase = headAmBase ^ VanHouten ;
3732: LD_ADDR_EXP 61
3736: PUSH
3737: LD_EXP 61
3741: PUSH
3742: LD_EXP 58
3746: ADD
3747: ST_TO_ADDR
// PlaceUnitXYR ( VanHouten , 35 , 57 , 3 , false ) ;
3748: LD_EXP 58
3752: PPUSH
3753: LD_INT 35
3755: PPUSH
3756: LD_INT 57
3758: PPUSH
3759: LD_INT 3
3761: PPUSH
3762: LD_INT 0
3764: PPUSH
3765: CALL_OW 50
// end ;
3769: LD_VAR 0 1
3773: RET
// export function PrepareTrap ; var i , un , nearEnemyUnit ; begin
3774: LD_INT 0
3776: PPUSH
3777: PPUSH
3778: PPUSH
3779: PPUSH
// uc_side = 1 ;
3780: LD_ADDR_OWVAR 20
3784: PUSH
3785: LD_INT 1
3787: ST_TO_ADDR
// uc_nation = nation_american ;
3788: LD_ADDR_OWVAR 21
3792: PUSH
3793: LD_INT 1
3795: ST_TO_ADDR
// for i := 1 to trapAmount do
3796: LD_ADDR_VAR 0 2
3800: PUSH
3801: DOUBLE
3802: LD_INT 1
3804: DEC
3805: ST_TO_ADDR
3806: LD_EXP 37
3810: PUSH
3811: FOR_TO
3812: IFFALSE 3946
// begin PrepareSoldier ( false , enemySkillLevel ) ;
3814: LD_INT 0
3816: PPUSH
3817: LD_EXP 34
3821: PPUSH
3822: CALL_OW 381
// un = CreateHuman ;
3826: LD_ADDR_VAR 0 3
3830: PUSH
3831: CALL_OW 44
3835: ST_TO_ADDR
// trapTeam = trapTeam ^ un ;
3836: LD_ADDR_EXP 62
3840: PUSH
3841: LD_EXP 62
3845: PUSH
3846: LD_VAR 0 3
3850: ADD
3851: ST_TO_ADDR
// PlaceUnitArea ( un , TrapSpawnArea , false ) ;
3852: LD_VAR 0 3
3856: PPUSH
3857: LD_INT 11
3859: PPUSH
3860: LD_INT 0
3862: PPUSH
3863: CALL_OW 49
// nearEnemyUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] ] ) , un ) ;
3867: LD_ADDR_VAR 0 4
3871: PUSH
3872: LD_INT 22
3874: PUSH
3875: LD_INT 3
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PUSH
3882: EMPTY
3883: LIST
3884: PPUSH
3885: CALL_OW 69
3889: PPUSH
3890: LD_VAR 0 3
3894: PPUSH
3895: CALL_OW 74
3899: ST_TO_ADDR
// ComAgressiveMove ( un , GetX ( nearEnemyUnit ) , GetY ( nearEnemyUnit ) ) ;
3900: LD_VAR 0 3
3904: PPUSH
3905: LD_VAR 0 4
3909: PPUSH
3910: CALL_OW 250
3914: PPUSH
3915: LD_VAR 0 4
3919: PPUSH
3920: CALL_OW 251
3924: PPUSH
3925: CALL_OW 114
// AddComAgressiveMove ( un , 106 , 124 ) ;
3929: LD_VAR 0 3
3933: PPUSH
3934: LD_INT 106
3936: PPUSH
3937: LD_INT 124
3939: PPUSH
3940: CALL_OW 174
// end ;
3944: GO 3811
3946: POP
3947: POP
// end ;
3948: LD_VAR 0 1
3952: RET
// export function PrepareSoldiersInBunkers ; begin
3953: LD_INT 0
3955: PPUSH
// PrepareSolBun ( enemySkilLLevel , non_bun1 ) ;
3956: LD_EXP 34
3960: PPUSH
3961: LD_INT 236
3963: PPUSH
3964: CALL 15201 0 2
// PrepareSolBun ( enemySkilLLevel , non_bun2 ) ;
3968: LD_EXP 34
3972: PPUSH
3973: LD_INT 240
3975: PPUSH
3976: CALL 15201 0 2
// PrepareSolBun ( enemySkilLLevel , non_bun3 ) ;
3980: LD_EXP 34
3984: PPUSH
3985: LD_INT 243
3987: PPUSH
3988: CALL 15201 0 2
// end ;
3992: LD_VAR 0 1
3996: RET
// export function PrepareConvoy ; var i , un , veh ; begin
3997: LD_INT 0
3999: PPUSH
4000: PPUSH
4001: PPUSH
4002: PPUSH
// convoyTeam = [ ] ;
4003: LD_ADDR_EXP 63
4007: PUSH
4008: EMPTY
4009: ST_TO_ADDR
// uc_side = 1 ;
4010: LD_ADDR_OWVAR 20
4014: PUSH
4015: LD_INT 1
4017: ST_TO_ADDR
// uc_nation = nation_american ;
4018: LD_ADDR_OWVAR 21
4022: PUSH
4023: LD_INT 1
4025: ST_TO_ADDR
// for i := 1 to 2 do
4026: LD_ADDR_VAR 0 2
4030: PUSH
4031: DOUBLE
4032: LD_INT 1
4034: DEC
4035: ST_TO_ADDR
4036: LD_INT 2
4038: PUSH
4039: FOR_TO
4040: IFFALSE 4171
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
4042: LD_INT 3
4044: PPUSH
4045: LD_INT 1
4047: PPUSH
4048: LD_INT 1
4050: PPUSH
4051: LD_INT 12
4053: PPUSH
4054: LD_INT 80
4056: PPUSH
4057: CALL 46162 0 5
// veh = CreateVehicle ;
4061: LD_ADDR_VAR 0 4
4065: PUSH
4066: CALL_OW 45
4070: ST_TO_ADDR
// AddCargo ( veh , mat_cans , 100 ) ;
4071: LD_VAR 0 4
4075: PPUSH
4076: LD_INT 1
4078: PPUSH
4079: LD_INT 100
4081: PPUSH
4082: CALL_OW 291
// convoyTeam = convoyTeam ^ veh ;
4086: LD_ADDR_EXP 63
4090: PUSH
4091: LD_EXP 63
4095: PUSH
4096: LD_VAR 0 4
4100: ADD
4101: ST_TO_ADDR
// PlaceUnitArea ( veh , AmericanSpawnArea1 , false ) ;
4102: LD_VAR 0 4
4106: PPUSH
4107: LD_INT 8
4109: PPUSH
4110: LD_INT 0
4112: PPUSH
4113: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
4117: LD_INT 0
4119: PPUSH
4120: LD_EXP 34
4124: PPUSH
4125: CALL_OW 383
// un = CreateHuman ;
4129: LD_ADDR_VAR 0 3
4133: PUSH
4134: CALL_OW 44
4138: ST_TO_ADDR
// convoyTeam = convoyTeam ^ un ;
4139: LD_ADDR_EXP 63
4143: PUSH
4144: LD_EXP 63
4148: PUSH
4149: LD_VAR 0 3
4153: ADD
4154: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4155: LD_VAR 0 3
4159: PPUSH
4160: LD_VAR 0 4
4164: PPUSH
4165: CALL_OW 52
// end ;
4169: GO 4039
4171: POP
4172: POP
// end ;
4173: LD_VAR 0 1
4177: RET
// export function PrepareAttack ; var i , un , veh ; begin
4178: LD_INT 0
4180: PPUSH
4181: PPUSH
4182: PPUSH
4183: PPUSH
// uc_side = 1 ;
4184: LD_ADDR_OWVAR 20
4188: PUSH
4189: LD_INT 1
4191: ST_TO_ADDR
// uc_nation = nation_american ;
4192: LD_ADDR_OWVAR 21
4196: PUSH
4197: LD_INT 1
4199: ST_TO_ADDR
// for i := 1 to 4 do
4200: LD_ADDR_VAR 0 2
4204: PUSH
4205: DOUBLE
4206: LD_INT 1
4208: DEC
4209: ST_TO_ADDR
4210: LD_INT 4
4212: PUSH
4213: FOR_TO
4214: IFFALSE 4353
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_light_gun , us_double_gun , us_gatling_gun ] [ Rand ( 1 , 3 ) ] , 80 ) ;
4216: LD_INT 3
4218: PPUSH
4219: LD_INT 1
4221: PPUSH
4222: LD_INT 1
4224: PPUSH
4225: LD_INT 3
4227: PUSH
4228: LD_INT 5
4230: PUSH
4231: LD_INT 4
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: LIST
4238: PUSH
4239: LD_INT 1
4241: PPUSH
4242: LD_INT 3
4244: PPUSH
4245: CALL_OW 12
4249: ARRAY
4250: PPUSH
4251: LD_INT 80
4253: PPUSH
4254: CALL 46162 0 5
// veh = CreateVehicle ;
4258: LD_ADDR_VAR 0 4
4262: PUSH
4263: CALL_OW 45
4267: ST_TO_ADDR
// attackTeam = attackTeam ^ veh ;
4268: LD_ADDR_EXP 64
4272: PUSH
4273: LD_EXP 64
4277: PUSH
4278: LD_VAR 0 4
4282: ADD
4283: ST_TO_ADDR
// PlaceUnitArea ( veh , AmericanSpawnArea2 , false ) ;
4284: LD_VAR 0 4
4288: PPUSH
4289: LD_INT 17
4291: PPUSH
4292: LD_INT 0
4294: PPUSH
4295: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
4299: LD_INT 0
4301: PPUSH
4302: LD_EXP 34
4306: PPUSH
4307: CALL_OW 383
// un = CreateHuman ;
4311: LD_ADDR_VAR 0 3
4315: PUSH
4316: CALL_OW 44
4320: ST_TO_ADDR
// attackTeam = attackTeam ^ un ;
4321: LD_ADDR_EXP 64
4325: PUSH
4326: LD_EXP 64
4330: PUSH
4331: LD_VAR 0 3
4335: ADD
4336: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4337: LD_VAR 0 3
4341: PPUSH
4342: LD_VAR 0 4
4346: PPUSH
4347: CALL_OW 52
// end ;
4351: GO 4213
4353: POP
4354: POP
// for i := 1 to 3 do
4355: LD_ADDR_VAR 0 2
4359: PUSH
4360: DOUBLE
4361: LD_INT 1
4363: DEC
4364: ST_TO_ADDR
4365: LD_INT 3
4367: PUSH
4368: FOR_TO
4369: IFFALSE 4426
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4371: LD_INT 0
4373: PPUSH
4374: LD_EXP 34
4378: PPUSH
4379: CALL_OW 381
// un = CreateHuman ;
4383: LD_ADDR_VAR 0 3
4387: PUSH
4388: CALL_OW 44
4392: ST_TO_ADDR
// attackTeam = attackTeam ^ un ;
4393: LD_ADDR_EXP 64
4397: PUSH
4398: LD_EXP 64
4402: PUSH
4403: LD_VAR 0 3
4407: ADD
4408: ST_TO_ADDR
// PlaceUnitArea ( un , AmericanSpawnArea2 , false ) ;
4409: LD_VAR 0 3
4413: PPUSH
4414: LD_INT 17
4416: PPUSH
4417: LD_INT 0
4419: PPUSH
4420: CALL_OW 49
// end ;
4424: GO 4368
4426: POP
4427: POP
// end ; end_of_file
4428: LD_VAR 0 1
4432: RET
// export function Nef_PrepareNature ; var i , un ; begin
4433: LD_INT 0
4435: PPUSH
4436: PPUSH
4437: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
4438: LD_ADDR_VAR 0 2
4442: PUSH
4443: DOUBLE
4444: LD_INT 1
4446: DEC
4447: ST_TO_ADDR
4448: LD_EXP 28
4452: PUSH
4453: LD_INT 1
4455: ARRAY
4456: PUSH
4457: FOR_TO
4458: IFFALSE 4568
// begin uc_side = 0 ;
4460: LD_ADDR_OWVAR 20
4464: PUSH
4465: LD_INT 0
4467: ST_TO_ADDR
// uc_nation = nation_nature ;
4468: LD_ADDR_OWVAR 21
4472: PUSH
4473: LD_INT 0
4475: ST_TO_ADDR
// hc_class = class_apeman ;
4476: LD_ADDR_OWVAR 28
4480: PUSH
4481: LD_INT 12
4483: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4484: LD_ADDR_OWVAR 31
4488: PUSH
4489: LD_EXP 29
4493: PUSH
4494: LD_INT 1
4496: ARRAY
4497: PUSH
4498: LD_EXP 29
4502: PUSH
4503: LD_INT 2
4505: ARRAY
4506: PUSH
4507: LD_EXP 29
4511: PUSH
4512: LD_INT 3
4514: ARRAY
4515: PUSH
4516: LD_EXP 29
4520: PUSH
4521: LD_INT 4
4523: ARRAY
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4531: LD_ADDR_OWVAR 35
4535: PUSH
4536: LD_EXP 30
4540: ST_TO_ADDR
// un = CreateHuman ;
4541: LD_ADDR_VAR 0 3
4545: PUSH
4546: CALL_OW 44
4550: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4551: LD_VAR 0 3
4555: PPUSH
4556: LD_INT 2
4558: PPUSH
4559: LD_INT 0
4561: PPUSH
4562: CALL_OW 49
// end ;
4566: GO 4457
4568: POP
4569: POP
// for i := 1 to animalsAmount [ 2 ] do
4570: LD_ADDR_VAR 0 2
4574: PUSH
4575: DOUBLE
4576: LD_INT 1
4578: DEC
4579: ST_TO_ADDR
4580: LD_EXP 28
4584: PUSH
4585: LD_INT 2
4587: ARRAY
4588: PUSH
4589: FOR_TO
4590: IFFALSE 4700
// begin uc_side = 0 ;
4592: LD_ADDR_OWVAR 20
4596: PUSH
4597: LD_INT 0
4599: ST_TO_ADDR
// uc_nation = nation_nature ;
4600: LD_ADDR_OWVAR 21
4604: PUSH
4605: LD_INT 0
4607: ST_TO_ADDR
// hc_class = class_phororhacos ;
4608: LD_ADDR_OWVAR 28
4612: PUSH
4613: LD_INT 18
4615: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4616: LD_ADDR_OWVAR 31
4620: PUSH
4621: LD_EXP 29
4625: PUSH
4626: LD_INT 1
4628: ARRAY
4629: PUSH
4630: LD_EXP 29
4634: PUSH
4635: LD_INT 2
4637: ARRAY
4638: PUSH
4639: LD_EXP 29
4643: PUSH
4644: LD_INT 3
4646: ARRAY
4647: PUSH
4648: LD_EXP 29
4652: PUSH
4653: LD_INT 4
4655: ARRAY
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: LIST
4661: LIST
4662: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4663: LD_ADDR_OWVAR 35
4667: PUSH
4668: LD_EXP 30
4672: ST_TO_ADDR
// un = CreateHuman ;
4673: LD_ADDR_VAR 0 3
4677: PUSH
4678: CALL_OW 44
4682: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4683: LD_VAR 0 3
4687: PPUSH
4688: LD_INT 2
4690: PPUSH
4691: LD_INT 0
4693: PPUSH
4694: CALL_OW 49
// end ;
4698: GO 4589
4700: POP
4701: POP
// for i := 1 to animalsAmount [ 3 ] do
4702: LD_ADDR_VAR 0 2
4706: PUSH
4707: DOUBLE
4708: LD_INT 1
4710: DEC
4711: ST_TO_ADDR
4712: LD_EXP 28
4716: PUSH
4717: LD_INT 3
4719: ARRAY
4720: PUSH
4721: FOR_TO
4722: IFFALSE 4832
// begin uc_side = 0 ;
4724: LD_ADDR_OWVAR 20
4728: PUSH
4729: LD_INT 0
4731: ST_TO_ADDR
// uc_nation = nation_nature ;
4732: LD_ADDR_OWVAR 21
4736: PUSH
4737: LD_INT 0
4739: ST_TO_ADDR
// hc_class = class_tiger ;
4740: LD_ADDR_OWVAR 28
4744: PUSH
4745: LD_INT 14
4747: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4748: LD_ADDR_OWVAR 31
4752: PUSH
4753: LD_EXP 29
4757: PUSH
4758: LD_INT 1
4760: ARRAY
4761: PUSH
4762: LD_EXP 29
4766: PUSH
4767: LD_INT 2
4769: ARRAY
4770: PUSH
4771: LD_EXP 29
4775: PUSH
4776: LD_INT 3
4778: ARRAY
4779: PUSH
4780: LD_EXP 29
4784: PUSH
4785: LD_INT 4
4787: ARRAY
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4795: LD_ADDR_OWVAR 35
4799: PUSH
4800: LD_EXP 30
4804: ST_TO_ADDR
// un = CreateHuman ;
4805: LD_ADDR_VAR 0 3
4809: PUSH
4810: CALL_OW 44
4814: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4815: LD_VAR 0 3
4819: PPUSH
4820: LD_INT 2
4822: PPUSH
4823: LD_INT 0
4825: PPUSH
4826: CALL_OW 49
// end ;
4830: GO 4721
4832: POP
4833: POP
// for i := 1 to animalsAmount [ 4 ] do
4834: LD_ADDR_VAR 0 2
4838: PUSH
4839: DOUBLE
4840: LD_INT 1
4842: DEC
4843: ST_TO_ADDR
4844: LD_EXP 28
4848: PUSH
4849: LD_INT 4
4851: ARRAY
4852: PUSH
4853: FOR_TO
4854: IFFALSE 4964
// begin uc_side = 0 ;
4856: LD_ADDR_OWVAR 20
4860: PUSH
4861: LD_INT 0
4863: ST_TO_ADDR
// uc_nation = nation_nature ;
4864: LD_ADDR_OWVAR 21
4868: PUSH
4869: LD_INT 0
4871: ST_TO_ADDR
// hc_class = 21 ;
4872: LD_ADDR_OWVAR 28
4876: PUSH
4877: LD_INT 21
4879: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4880: LD_ADDR_OWVAR 31
4884: PUSH
4885: LD_EXP 29
4889: PUSH
4890: LD_INT 1
4892: ARRAY
4893: PUSH
4894: LD_EXP 29
4898: PUSH
4899: LD_INT 2
4901: ARRAY
4902: PUSH
4903: LD_EXP 29
4907: PUSH
4908: LD_INT 3
4910: ARRAY
4911: PUSH
4912: LD_EXP 29
4916: PUSH
4917: LD_INT 4
4919: ARRAY
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4927: LD_ADDR_OWVAR 35
4931: PUSH
4932: LD_EXP 30
4936: ST_TO_ADDR
// un = CreateHuman ;
4937: LD_ADDR_VAR 0 3
4941: PUSH
4942: CALL_OW 44
4946: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4947: LD_VAR 0 3
4951: PPUSH
4952: LD_INT 2
4954: PPUSH
4955: LD_INT 0
4957: PPUSH
4958: CALL_OW 49
// end ;
4962: GO 4853
4964: POP
4965: POP
// for i := 1 to animalsAmount [ 5 ] do
4966: LD_ADDR_VAR 0 2
4970: PUSH
4971: DOUBLE
4972: LD_INT 1
4974: DEC
4975: ST_TO_ADDR
4976: LD_EXP 28
4980: PUSH
4981: LD_INT 5
4983: ARRAY
4984: PUSH
4985: FOR_TO
4986: IFFALSE 5047
// begin uc_side = 0 ;
4988: LD_ADDR_OWVAR 20
4992: PUSH
4993: LD_INT 0
4995: ST_TO_ADDR
// uc_nation = nation_nature ;
4996: LD_ADDR_OWVAR 21
5000: PUSH
5001: LD_INT 0
5003: ST_TO_ADDR
// vc_chassis := 31 ;
5004: LD_ADDR_OWVAR 37
5008: PUSH
5009: LD_INT 31
5011: ST_TO_ADDR
// vc_control := control_rider ;
5012: LD_ADDR_OWVAR 38
5016: PUSH
5017: LD_INT 4
5019: ST_TO_ADDR
// un := CreateVehicle ;
5020: LD_ADDR_VAR 0 3
5024: PUSH
5025: CALL_OW 45
5029: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
5030: LD_VAR 0 3
5034: PPUSH
5035: LD_INT 2
5037: PPUSH
5038: LD_INT 0
5040: PPUSH
5041: CALL_OW 49
// end ;
5045: GO 4985
5047: POP
5048: POP
// end ; end_of_file
5049: LD_VAR 0 1
5053: RET
// every 0 0$1 do
5054: GO 5056
5056: DISABLE
// InitAIManager ( 1 , 2 , UnitFilter ( ovsyenkoBase , [ f_type , unit_human ] ) , OvsyenkoBaseArea , OvsyenkoHealArea , false , false , 0 , 0 , 0 , 0 , 0 ) ;
5057: LD_INT 1
5059: PPUSH
5060: LD_INT 2
5062: PPUSH
5063: LD_EXP 59
5067: PPUSH
5068: LD_INT 21
5070: PUSH
5071: LD_INT 1
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: PPUSH
5078: CALL_OW 72
5082: PPUSH
5083: LD_INT 3
5085: PPUSH
5086: LD_INT 6
5088: PPUSH
5089: LD_INT 0
5091: PPUSH
5092: LD_INT 0
5094: PPUSH
5095: LD_INT 0
5097: PPUSH
5098: LD_INT 0
5100: PPUSH
5101: LD_INT 0
5103: PPUSH
5104: LD_INT 0
5106: PPUSH
5107: LD_INT 0
5109: PPUSH
5110: CALL 5222 0 12
5114: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_weapon , us_bulldozer ] ] ) do var unit ;
5115: LD_INT 22
5117: PUSH
5118: LD_INT 1
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: PUSH
5125: LD_INT 50
5127: PUSH
5128: EMPTY
5129: LIST
5130: PUSH
5131: LD_INT 34
5133: PUSH
5134: LD_INT 14
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: LIST
5145: PPUSH
5146: CALL_OW 69
5150: IFFALSE 5219
5152: GO 5154
5154: DISABLE
5155: LD_INT 0
5157: PPUSH
// begin enable ;
5158: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_weapon , us_bulldozer ] ] ) do
5159: LD_ADDR_VAR 0 1
5163: PUSH
5164: LD_INT 22
5166: PUSH
5167: LD_INT 1
5169: PUSH
5170: EMPTY
5171: LIST
5172: LIST
5173: PUSH
5174: LD_INT 50
5176: PUSH
5177: EMPTY
5178: LIST
5179: PUSH
5180: LD_INT 34
5182: PUSH
5183: LD_INT 14
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: LIST
5194: PPUSH
5195: CALL_OW 69
5199: PUSH
5200: FOR_IN
5201: IFFALSE 5217
// CutTreeInArea ( unit , TreeArea ) ;
5203: LD_VAR 0 1
5207: PPUSH
5208: LD_INT 18
5210: PPUSH
5211: CALL 15058 0 2
5215: GO 5200
5217: POP
5218: POP
// end ;
5219: PPOPN 1
5221: END
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , repairArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack , canRebuild ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , offensiveUnits , offensiveReadyCounter , target1 , target2 , defenceUnits , weapons , chassis , baseBuildings , destroyedBuildings , destroyedBuilding , constructedBuilding , constructedBuildings , depot , factory , lab , bunkers , barracks , controlTowers , attackBuildings , enemyBuildings , damageBuilding , damageUnit , emptyBunkers , enemyUnits ; begin
5222: LD_INT 0
5224: PPUSH
5225: PPUSH
5226: PPUSH
5227: PPUSH
5228: PPUSH
5229: PPUSH
5230: PPUSH
5231: PPUSH
5232: PPUSH
5233: PPUSH
5234: PPUSH
5235: PPUSH
5236: PPUSH
5237: PPUSH
5238: PPUSH
5239: PPUSH
5240: PPUSH
5241: PPUSH
5242: PPUSH
5243: PPUSH
5244: PPUSH
5245: PPUSH
5246: PPUSH
5247: PPUSH
5248: PPUSH
5249: PPUSH
5250: PPUSH
5251: PPUSH
5252: PPUSH
5253: PPUSH
5254: PPUSH
5255: PPUSH
5256: PPUSH
5257: PPUSH
5258: PPUSH
5259: PPUSH
5260: PPUSH
5261: PPUSH
// personel = [ ] ;
5262: LD_ADDR_VAR 0 19
5266: PUSH
5267: EMPTY
5268: ST_TO_ADDR
// vehicles = [ ] ;
5269: LD_ADDR_VAR 0 25
5273: PUSH
5274: EMPTY
5275: ST_TO_ADDR
// destroyedBuildings = [ ] ;
5276: LD_ADDR_VAR 0 35
5280: PUSH
5281: EMPTY
5282: ST_TO_ADDR
// for unit in basePersonel do
5283: LD_ADDR_VAR 0 18
5287: PUSH
5288: LD_VAR 0 3
5292: PUSH
5293: FOR_IN
5294: IFFALSE 5314
// personel = personel ^ unit ;
5296: LD_ADDR_VAR 0 19
5300: PUSH
5301: LD_VAR 0 19
5305: PUSH
5306: LD_VAR 0 18
5310: ADD
5311: ST_TO_ADDR
5312: GO 5293
5314: POP
5315: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ] ] ) do
5316: LD_ADDR_VAR 0 24
5320: PUSH
5321: LD_VAR 0 4
5325: PPUSH
5326: LD_INT 22
5328: PUSH
5329: LD_VAR 0 1
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: PUSH
5338: LD_INT 21
5340: PUSH
5341: LD_INT 2
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: PUSH
5348: LD_INT 50
5350: PUSH
5351: EMPTY
5352: LIST
5353: PUSH
5354: LD_INT 3
5356: PUSH
5357: LD_INT 2
5359: PUSH
5360: LD_INT 34
5362: PUSH
5363: LD_INT 12
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: PUSH
5370: LD_INT 34
5372: PUSH
5373: LD_INT 51
5375: PUSH
5376: EMPTY
5377: LIST
5378: LIST
5379: PUSH
5380: LD_INT 34
5382: PUSH
5383: LD_INT 32
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: PUSH
5390: LD_INT 34
5392: PUSH
5393: LD_INT 31
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PUSH
5400: EMPTY
5401: LIST
5402: LIST
5403: LIST
5404: LIST
5405: LIST
5406: PUSH
5407: EMPTY
5408: LIST
5409: LIST
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: PPUSH
5417: CALL_OW 70
5421: PUSH
5422: FOR_IN
5423: IFFALSE 5443
// vehicles = vehicles ^ vehicle ;
5425: LD_ADDR_VAR 0 25
5429: PUSH
5430: LD_VAR 0 25
5434: PUSH
5435: LD_VAR 0 24
5439: ADD
5440: ST_TO_ADDR
5441: GO 5422
5443: POP
5444: POP
// repeat soldiers = [ ] ;
5445: LD_ADDR_VAR 0 20
5449: PUSH
5450: EMPTY
5451: ST_TO_ADDR
// engineers = [ ] ;
5452: LD_ADDR_VAR 0 21
5456: PUSH
5457: EMPTY
5458: ST_TO_ADDR
// mechanics = [ ] ;
5459: LD_ADDR_VAR 0 22
5463: PUSH
5464: EMPTY
5465: ST_TO_ADDR
// scientists = [ ] ;
5466: LD_ADDR_VAR 0 23
5470: PUSH
5471: EMPTY
5472: ST_TO_ADDR
// baseBuildings = [ ] ;
5473: LD_ADDR_VAR 0 34
5477: PUSH
5478: EMPTY
5479: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5480: LD_ADDR_VAR 0 39
5484: PUSH
5485: LD_VAR 0 4
5489: PPUSH
5490: LD_INT 22
5492: PUSH
5493: LD_VAR 0 1
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: LD_INT 21
5504: PUSH
5505: LD_INT 3
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PUSH
5512: LD_INT 50
5514: PUSH
5515: EMPTY
5516: LIST
5517: PUSH
5518: LD_INT 2
5520: PUSH
5521: LD_INT 30
5523: PUSH
5524: LD_INT 0
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: PUSH
5531: LD_INT 30
5533: PUSH
5534: LD_INT 1
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: LIST
5545: PUSH
5546: EMPTY
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: PPUSH
5552: CALL_OW 70
5556: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
5557: LD_ADDR_VAR 0 40
5561: PUSH
5562: LD_VAR 0 4
5566: PPUSH
5567: LD_INT 22
5569: PUSH
5570: LD_VAR 0 1
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: PUSH
5579: LD_INT 21
5581: PUSH
5582: LD_INT 3
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: PUSH
5589: LD_INT 50
5591: PUSH
5592: EMPTY
5593: LIST
5594: PUSH
5595: LD_INT 2
5597: PUSH
5598: LD_INT 30
5600: PUSH
5601: LD_INT 2
5603: PUSH
5604: EMPTY
5605: LIST
5606: LIST
5607: PUSH
5608: LD_INT 30
5610: PUSH
5611: LD_INT 3
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: PUSH
5618: EMPTY
5619: LIST
5620: LIST
5621: LIST
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: PPUSH
5629: CALL_OW 70
5633: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5634: LD_ADDR_VAR 0 41
5638: PUSH
5639: LD_VAR 0 4
5643: PPUSH
5644: LD_INT 22
5646: PUSH
5647: LD_VAR 0 1
5651: PUSH
5652: EMPTY
5653: LIST
5654: LIST
5655: PUSH
5656: LD_INT 21
5658: PUSH
5659: LD_INT 3
5661: PUSH
5662: EMPTY
5663: LIST
5664: LIST
5665: PUSH
5666: LD_INT 50
5668: PUSH
5669: EMPTY
5670: LIST
5671: PUSH
5672: LD_INT 2
5674: PUSH
5675: LD_INT 30
5677: PUSH
5678: LD_INT 6
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: PUSH
5685: LD_INT 30
5687: PUSH
5688: LD_INT 7
5690: PUSH
5691: EMPTY
5692: LIST
5693: LIST
5694: PUSH
5695: LD_INT 30
5697: PUSH
5698: LD_INT 8
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: PUSH
5711: EMPTY
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: PPUSH
5717: CALL_OW 70
5721: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
5722: LD_ADDR_VAR 0 42
5726: PUSH
5727: LD_VAR 0 4
5731: PPUSH
5732: LD_INT 22
5734: PUSH
5735: LD_VAR 0 1
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: PUSH
5744: LD_INT 21
5746: PUSH
5747: LD_INT 3
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: PUSH
5754: LD_INT 50
5756: PUSH
5757: EMPTY
5758: LIST
5759: PUSH
5760: LD_INT 2
5762: PUSH
5763: LD_INT 30
5765: PUSH
5766: LD_INT 31
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: PUSH
5773: LD_INT 30
5775: PUSH
5776: LD_INT 32
5778: PUSH
5779: EMPTY
5780: LIST
5781: LIST
5782: PUSH
5783: EMPTY
5784: LIST
5785: LIST
5786: LIST
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: PPUSH
5794: CALL_OW 70
5798: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
5799: LD_ADDR_VAR 0 43
5803: PUSH
5804: LD_VAR 0 4
5808: PPUSH
5809: LD_INT 22
5811: PUSH
5812: LD_VAR 0 1
5816: PUSH
5817: EMPTY
5818: LIST
5819: LIST
5820: PUSH
5821: LD_INT 21
5823: PUSH
5824: LD_INT 3
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: PUSH
5831: LD_INT 50
5833: PUSH
5834: EMPTY
5835: LIST
5836: PUSH
5837: LD_INT 2
5839: PUSH
5840: LD_INT 30
5842: PUSH
5843: LD_INT 4
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: PUSH
5850: LD_INT 30
5852: PUSH
5853: LD_INT 5
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: LIST
5864: PUSH
5865: EMPTY
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: PPUSH
5871: CALL_OW 70
5875: ST_TO_ADDR
// controlTowers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_vehicle ] ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5876: LD_ADDR_VAR 0 44
5880: PUSH
5881: LD_VAR 0 4
5885: PPUSH
5886: LD_INT 22
5888: PUSH
5889: LD_VAR 0 1
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: PUSH
5898: LD_INT 50
5900: PUSH
5901: EMPTY
5902: LIST
5903: PUSH
5904: LD_INT 2
5906: PUSH
5907: LD_INT 21
5909: PUSH
5910: LD_INT 3
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: PUSH
5917: LD_INT 21
5919: PUSH
5920: LD_INT 2
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PUSH
5927: EMPTY
5928: LIST
5929: LIST
5930: LIST
5931: PUSH
5932: LD_INT 2
5934: PUSH
5935: LD_INT 30
5937: PUSH
5938: LD_INT 36
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: PUSH
5945: LD_INT 34
5947: PUSH
5948: LD_INT 31
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: PUSH
5955: EMPTY
5956: LIST
5957: LIST
5958: LIST
5959: PUSH
5960: EMPTY
5961: LIST
5962: LIST
5963: LIST
5964: LIST
5965: PPUSH
5966: CALL_OW 70
5970: ST_TO_ADDR
// constructedBuildings = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] ] ) ;
5971: LD_ADDR_VAR 0 38
5975: PUSH
5976: LD_VAR 0 4
5980: PPUSH
5981: LD_INT 22
5983: PUSH
5984: LD_VAR 0 1
5988: PUSH
5989: EMPTY
5990: LIST
5991: LIST
5992: PUSH
5993: LD_INT 21
5995: PUSH
5996: LD_INT 3
5998: PUSH
5999: EMPTY
6000: LIST
6001: LIST
6002: PUSH
6003: LD_INT 3
6005: PUSH
6006: LD_INT 57
6008: PUSH
6009: EMPTY
6010: LIST
6011: PUSH
6012: EMPTY
6013: LIST
6014: LIST
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: LIST
6020: PPUSH
6021: CALL_OW 70
6025: ST_TO_ADDR
// for i := 1 to personel do
6026: LD_ADDR_VAR 0 14
6030: PUSH
6031: DOUBLE
6032: LD_INT 1
6034: DEC
6035: ST_TO_ADDR
6036: LD_VAR 0 19
6040: PUSH
6041: FOR_TO
6042: IFFALSE 6210
// begin if GetLives ( personel [ i ] ) = 1000 then
6044: LD_VAR 0 19
6048: PUSH
6049: LD_VAR 0 14
6053: ARRAY
6054: PPUSH
6055: CALL_OW 256
6059: PUSH
6060: LD_INT 1000
6062: EQUAL
6063: IFFALSE 6085
// SetTag ( personel [ i ] , 1 ) else
6065: LD_VAR 0 19
6069: PUSH
6070: LD_VAR 0 14
6074: ARRAY
6075: PPUSH
6076: LD_INT 1
6078: PPUSH
6079: CALL_OW 109
6083: GO 6165
// if GetLives ( personel [ i ] ) <= 950 and GetLives ( personel [ i ] ) > 250 then
6085: LD_VAR 0 19
6089: PUSH
6090: LD_VAR 0 14
6094: ARRAY
6095: PPUSH
6096: CALL_OW 256
6100: PUSH
6101: LD_INT 950
6103: LESSEQUAL
6104: PUSH
6105: LD_VAR 0 19
6109: PUSH
6110: LD_VAR 0 14
6114: ARRAY
6115: PPUSH
6116: CALL_OW 256
6120: PUSH
6121: LD_INT 250
6123: GREATER
6124: AND
6125: IFFALSE 6165
// begin SetTag ( personel [ i ] , 0 ) ;
6127: LD_VAR 0 19
6131: PUSH
6132: LD_VAR 0 14
6136: ARRAY
6137: PPUSH
6138: LD_INT 0
6140: PPUSH
6141: CALL_OW 109
// ComMoveToArea ( personel [ i ] , healArea ) ;
6145: LD_VAR 0 19
6149: PUSH
6150: LD_VAR 0 14
6154: ARRAY
6155: PPUSH
6156: LD_VAR 0 5
6160: PPUSH
6161: CALL_OW 113
// end ; if GetLives ( personel [ i ] ) < 100 then
6165: LD_VAR 0 19
6169: PUSH
6170: LD_VAR 0 14
6174: ARRAY
6175: PPUSH
6176: CALL_OW 256
6180: PUSH
6181: LD_INT 100
6183: LESS
6184: IFFALSE 6208
// personel = personel diff personel [ i ] ;
6186: LD_ADDR_VAR 0 19
6190: PUSH
6191: LD_VAR 0 19
6195: PUSH
6196: LD_VAR 0 19
6200: PUSH
6201: LD_VAR 0 14
6205: ARRAY
6206: DIFF
6207: ST_TO_ADDR
// end ;
6208: GO 6041
6210: POP
6211: POP
// for i := 1 to vehicles do
6212: LD_ADDR_VAR 0 14
6216: PUSH
6217: DOUBLE
6218: LD_INT 1
6220: DEC
6221: ST_TO_ADDR
6222: LD_VAR 0 25
6226: PUSH
6227: FOR_TO
6228: IFFALSE 6590
// begin if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
6230: LD_VAR 0 25
6234: PUSH
6235: LD_VAR 0 14
6239: ARRAY
6240: PUSH
6241: LD_INT 1
6243: ARRAY
6244: PPUSH
6245: CALL_OW 256
6249: PUSH
6250: LD_INT 1000
6252: EQUAL
6253: IFFALSE 6417
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
6255: LD_VAR 0 25
6259: PUSH
6260: LD_VAR 0 14
6264: ARRAY
6265: PUSH
6266: LD_INT 1
6268: ARRAY
6269: PPUSH
6270: CALL_OW 263
6274: PUSH
6275: LD_INT 1
6277: EQUAL
6278: IFFALSE 6357
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) and IsOK ( vehicles [ i ] [ 2 ] ) then
6280: LD_VAR 0 25
6284: PUSH
6285: LD_VAR 0 14
6289: ARRAY
6290: PUSH
6291: LD_INT 2
6293: ARRAY
6294: PPUSH
6295: CALL_OW 310
6299: NOT
6300: PUSH
6301: LD_VAR 0 25
6305: PUSH
6306: LD_VAR 0 14
6310: ARRAY
6311: PUSH
6312: LD_INT 2
6314: ARRAY
6315: PPUSH
6316: CALL_OW 302
6320: AND
6321: IFFALSE 6357
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
6323: LD_VAR 0 25
6327: PUSH
6328: LD_VAR 0 14
6332: ARRAY
6333: PUSH
6334: LD_INT 2
6336: ARRAY
6337: PPUSH
6338: LD_VAR 0 25
6342: PUSH
6343: LD_VAR 0 14
6347: ARRAY
6348: PUSH
6349: LD_INT 1
6351: ARRAY
6352: PPUSH
6353: CALL_OW 120
// if offensiveUnits < vehiclesToAttackAmount then
6357: LD_VAR 0 27
6361: PUSH
6362: LD_VAR 0 10
6366: LESS
6367: IFFALSE 6393
// SetTag ( vehicles [ i ] [ 1 ] , 2 ) else
6369: LD_VAR 0 25
6373: PUSH
6374: LD_VAR 0 14
6378: ARRAY
6379: PUSH
6380: LD_INT 1
6382: ARRAY
6383: PPUSH
6384: LD_INT 2
6386: PPUSH
6387: CALL_OW 109
6391: GO 6415
// SetTag ( vehicles [ i ] [ 1 ] , 3 ) ;
6393: LD_VAR 0 25
6397: PUSH
6398: LD_VAR 0 14
6402: ARRAY
6403: PUSH
6404: LD_INT 1
6406: ARRAY
6407: PPUSH
6408: LD_INT 3
6410: PPUSH
6411: CALL_OW 109
// end else
6415: GO 6538
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 and GetLives ( vehicles [ i ] [ 1 ] ) > 250 and GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
6417: LD_VAR 0 25
6421: PUSH
6422: LD_VAR 0 14
6426: ARRAY
6427: PUSH
6428: LD_INT 1
6430: ARRAY
6431: PPUSH
6432: CALL_OW 256
6436: PUSH
6437: LD_INT 650
6439: LESSEQUAL
6440: PUSH
6441: LD_VAR 0 25
6445: PUSH
6446: LD_VAR 0 14
6450: ARRAY
6451: PUSH
6452: LD_INT 1
6454: ARRAY
6455: PPUSH
6456: CALL_OW 256
6460: PUSH
6461: LD_INT 250
6463: GREATER
6464: AND
6465: PUSH
6466: LD_VAR 0 25
6470: PUSH
6471: LD_VAR 0 14
6475: ARRAY
6476: PUSH
6477: LD_INT 1
6479: ARRAY
6480: PPUSH
6481: CALL_OW 263
6485: PUSH
6486: LD_INT 1
6488: EQUAL
6489: AND
6490: IFFALSE 6538
// begin SetTag ( vehicles [ i ] [ 1 ] , 0 ) ;
6492: LD_VAR 0 25
6496: PUSH
6497: LD_VAR 0 14
6501: ARRAY
6502: PUSH
6503: LD_INT 1
6505: ARRAY
6506: PPUSH
6507: LD_INT 0
6509: PPUSH
6510: CALL_OW 109
// ComMoveToArea ( vehicles [ i ] [ 1 ] , repairArea ) ;
6514: LD_VAR 0 25
6518: PUSH
6519: LD_VAR 0 14
6523: ARRAY
6524: PUSH
6525: LD_INT 1
6527: ARRAY
6528: PPUSH
6529: LD_VAR 0 6
6533: PPUSH
6534: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
6538: LD_VAR 0 25
6542: PUSH
6543: LD_VAR 0 14
6547: ARRAY
6548: PUSH
6549: LD_INT 1
6551: ARRAY
6552: PPUSH
6553: CALL_OW 256
6557: PUSH
6558: LD_INT 250
6560: LESS
6561: IFFALSE 6588
// begin vehicles = vehicles diff [ vehicles [ i ] ] ;
6563: LD_ADDR_VAR 0 25
6567: PUSH
6568: LD_VAR 0 25
6572: PUSH
6573: LD_VAR 0 25
6577: PUSH
6578: LD_VAR 0 14
6582: ARRAY
6583: PUSH
6584: EMPTY
6585: LIST
6586: DIFF
6587: ST_TO_ADDR
// end ; end ;
6588: GO 6227
6590: POP
6591: POP
// for i := 1 to personel do
6592: LD_ADDR_VAR 0 14
6596: PUSH
6597: DOUBLE
6598: LD_INT 1
6600: DEC
6601: ST_TO_ADDR
6602: LD_VAR 0 19
6606: PUSH
6607: FOR_TO
6608: IFFALSE 6659
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
6610: LD_ADDR_VAR 0 20
6614: PUSH
6615: LD_VAR 0 20
6619: PUSH
6620: LD_VAR 0 19
6624: PUSH
6625: LD_VAR 0 14
6629: ARRAY
6630: PPUSH
6631: LD_INT 25
6633: PUSH
6634: LD_INT 1
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: PUSH
6641: LD_INT 50
6643: PUSH
6644: EMPTY
6645: LIST
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PPUSH
6651: CALL_OW 72
6655: ADD
6656: ST_TO_ADDR
6657: GO 6607
6659: POP
6660: POP
// if soldiers and UnitFilter ( bunkers , [ f_empty ] ) then
6661: LD_VAR 0 20
6665: PUSH
6666: LD_VAR 0 42
6670: PPUSH
6671: LD_INT 58
6673: PUSH
6674: EMPTY
6675: LIST
6676: PPUSH
6677: CALL_OW 72
6681: AND
6682: IFFALSE 6940
// begin for i := 1 to soldiers do
6684: LD_ADDR_VAR 0 14
6688: PUSH
6689: DOUBLE
6690: LD_INT 1
6692: DEC
6693: ST_TO_ADDR
6694: LD_VAR 0 20
6698: PUSH
6699: FOR_TO
6700: IFFALSE 6936
// if GetTag ( soldiers [ i ] ) = 1 then
6702: LD_VAR 0 20
6706: PUSH
6707: LD_VAR 0 14
6711: ARRAY
6712: PPUSH
6713: CALL_OW 110
6717: PUSH
6718: LD_INT 1
6720: EQUAL
6721: IFFALSE 6934
// begin if GetTaskList ( soldiers [ i ] ) then
6723: LD_VAR 0 20
6727: PUSH
6728: LD_VAR 0 14
6732: ARRAY
6733: PPUSH
6734: CALL_OW 437
6738: IFFALSE 6827
// if GetTaskList ( soldiers [ i ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( soldiers [ i ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
6740: LD_VAR 0 20
6744: PUSH
6745: LD_VAR 0 14
6749: ARRAY
6750: PPUSH
6751: CALL_OW 437
6755: PUSH
6756: LD_INT 1
6758: ARRAY
6759: PUSH
6760: LD_INT 1
6762: ARRAY
6763: PUSH
6764: LD_STRING e
6766: EQUAL
6767: PUSH
6768: LD_VAR 0 20
6772: PUSH
6773: LD_VAR 0 14
6777: ARRAY
6778: PPUSH
6779: CALL_OW 437
6783: PUSH
6784: LD_INT 1
6786: ARRAY
6787: PUSH
6788: LD_INT 4
6790: ARRAY
6791: PPUSH
6792: CALL_OW 266
6796: PUSH
6797: LD_INT 4
6799: PUSH
6800: LD_INT 5
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: IN
6807: AND
6808: IFFALSE 6827
// SetTaskList ( soldiers [ i ] , [ ] ) ;
6810: LD_VAR 0 20
6814: PUSH
6815: LD_VAR 0 14
6819: ARRAY
6820: PPUSH
6821: EMPTY
6822: PPUSH
6823: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
6827: LD_ADDR_VAR 0 49
6831: PUSH
6832: LD_VAR 0 42
6836: PPUSH
6837: LD_INT 3
6839: PUSH
6840: LD_INT 59
6842: PUSH
6843: EMPTY
6844: LIST
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PPUSH
6850: CALL_OW 72
6854: PUSH
6855: FOR_IN
6856: IFFALSE 6932
// if not HasTask ( soldiers [ i ] ) and not GetBType ( IsInUnit ( soldiers [ i ] ) ) in [ b_breastwork , b_bunker ] then
6858: LD_VAR 0 20
6862: PUSH
6863: LD_VAR 0 14
6867: ARRAY
6868: PPUSH
6869: CALL_OW 314
6873: NOT
6874: PUSH
6875: LD_VAR 0 20
6879: PUSH
6880: LD_VAR 0 14
6884: ARRAY
6885: PPUSH
6886: CALL_OW 310
6890: PPUSH
6891: CALL_OW 266
6895: PUSH
6896: LD_INT 31
6898: PUSH
6899: LD_INT 32
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: IN
6906: NOT
6907: AND
6908: IFFALSE 6930
// ComEnterUnit ( soldiers [ i ] , emptyBunkers ) ;
6910: LD_VAR 0 20
6914: PUSH
6915: LD_VAR 0 14
6919: ARRAY
6920: PPUSH
6921: LD_VAR 0 49
6925: PPUSH
6926: CALL_OW 120
6930: GO 6855
6932: POP
6933: POP
// end ;
6934: GO 6699
6936: POP
6937: POP
// end else
6938: GO 7112
// if soldiers and barracks then
6940: LD_VAR 0 20
6944: PUSH
6945: LD_VAR 0 43
6949: AND
6950: IFFALSE 7072
// begin for i := 1 to soldiers do
6952: LD_ADDR_VAR 0 14
6956: PUSH
6957: DOUBLE
6958: LD_INT 1
6960: DEC
6961: ST_TO_ADDR
6962: LD_VAR 0 20
6966: PUSH
6967: FOR_TO
6968: IFFALSE 7068
// if GetTag ( soldiers [ i ] ) = 1 and UnitFilter ( soldiers [ i ] , [ f_outside ] ) and not HasTask ( soldiers [ i ] ) then
6970: LD_VAR 0 20
6974: PUSH
6975: LD_VAR 0 14
6979: ARRAY
6980: PPUSH
6981: CALL_OW 110
6985: PUSH
6986: LD_INT 1
6988: EQUAL
6989: PUSH
6990: LD_VAR 0 20
6994: PUSH
6995: LD_VAR 0 14
6999: ARRAY
7000: PPUSH
7001: LD_INT 56
7003: PUSH
7004: EMPTY
7005: LIST
7006: PPUSH
7007: CALL_OW 72
7011: AND
7012: PUSH
7013: LD_VAR 0 20
7017: PUSH
7018: LD_VAR 0 14
7022: ARRAY
7023: PPUSH
7024: CALL_OW 314
7028: NOT
7029: AND
7030: IFFALSE 7066
// ComEnterUnit ( soldiers [ i ] , barracks [ rand ( 1 , barracks ) ] ) ;
7032: LD_VAR 0 20
7036: PUSH
7037: LD_VAR 0 14
7041: ARRAY
7042: PPUSH
7043: LD_VAR 0 43
7047: PUSH
7048: LD_INT 1
7050: PPUSH
7051: LD_VAR 0 43
7055: PPUSH
7056: CALL_OW 12
7060: ARRAY
7061: PPUSH
7062: CALL_OW 120
7066: GO 6967
7068: POP
7069: POP
// end else
7070: GO 7112
// for i := 1 to soldiers do
7072: LD_ADDR_VAR 0 14
7076: PUSH
7077: DOUBLE
7078: LD_INT 1
7080: DEC
7081: ST_TO_ADDR
7082: LD_VAR 0 20
7086: PUSH
7087: FOR_TO
7088: IFFALSE 7110
// SetTag ( soldiers [ i ] , 3 ) ;
7090: LD_VAR 0 20
7094: PUSH
7095: LD_VAR 0 14
7099: ARRAY
7100: PPUSH
7101: LD_INT 3
7103: PPUSH
7104: CALL_OW 109
7108: GO 7087
7110: POP
7111: POP
// for i := 1 to personel do
7112: LD_ADDR_VAR 0 14
7116: PUSH
7117: DOUBLE
7118: LD_INT 1
7120: DEC
7121: ST_TO_ADDR
7122: LD_VAR 0 19
7126: PUSH
7127: FOR_TO
7128: IFFALSE 7169
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
7130: LD_ADDR_VAR 0 21
7134: PUSH
7135: LD_VAR 0 21
7139: PUSH
7140: LD_VAR 0 19
7144: PUSH
7145: LD_VAR 0 14
7149: ARRAY
7150: PPUSH
7151: LD_INT 25
7153: PUSH
7154: LD_INT 2
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PPUSH
7161: CALL_OW 72
7165: ADD
7166: ST_TO_ADDR
7167: GO 7127
7169: POP
7170: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
7171: LD_VAR 0 21
7175: PUSH
7176: LD_VAR 0 4
7180: PPUSH
7181: LD_INT 22
7183: PUSH
7184: LD_VAR 0 1
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 21
7195: PUSH
7196: LD_INT 3
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PUSH
7203: LD_INT 3
7205: PUSH
7206: LD_INT 24
7208: PUSH
7209: LD_INT 1000
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: LIST
7224: PPUSH
7225: CALL_OW 70
7229: AND
7230: IFFALSE 7458
// begin for i := 1 to engineers do
7232: LD_ADDR_VAR 0 14
7236: PUSH
7237: DOUBLE
7238: LD_INT 1
7240: DEC
7241: ST_TO_ADDR
7242: LD_VAR 0 21
7246: PUSH
7247: FOR_TO
7248: IFFALSE 7454
// if GetTag ( engineers [ i ] ) = 1 then
7250: LD_VAR 0 21
7254: PUSH
7255: LD_VAR 0 14
7259: ARRAY
7260: PPUSH
7261: CALL_OW 110
7265: PUSH
7266: LD_INT 1
7268: EQUAL
7269: IFFALSE 7452
// begin if GetTaskList ( engineers [ i ] ) then
7271: LD_VAR 0 21
7275: PUSH
7276: LD_VAR 0 14
7280: ARRAY
7281: PPUSH
7282: CALL_OW 437
7286: IFFALSE 7334
// if GetTaskList ( engineers [ i ] ) [ 1 ] [ 1 ] = e then
7288: LD_VAR 0 21
7292: PUSH
7293: LD_VAR 0 14
7297: ARRAY
7298: PPUSH
7299: CALL_OW 437
7303: PUSH
7304: LD_INT 1
7306: ARRAY
7307: PUSH
7308: LD_INT 1
7310: ARRAY
7311: PUSH
7312: LD_STRING e
7314: EQUAL
7315: IFFALSE 7334
// SetTaskList ( engineers [ i ] , [ ] ) ;
7317: LD_VAR 0 21
7321: PUSH
7322: LD_VAR 0 14
7326: ARRAY
7327: PPUSH
7328: EMPTY
7329: PPUSH
7330: CALL_OW 446
// if IsInUnit ( engineers [ i ] ) then
7334: LD_VAR 0 21
7338: PUSH
7339: LD_VAR 0 14
7343: ARRAY
7344: PPUSH
7345: CALL_OW 310
7349: IFFALSE 7366
// ComExitBuilding ( engineers [ i ] ) ;
7351: LD_VAR 0 21
7355: PUSH
7356: LD_VAR 0 14
7360: ARRAY
7361: PPUSH
7362: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7366: LD_ADDR_VAR 0 47
7370: PUSH
7371: LD_VAR 0 4
7375: PPUSH
7376: LD_INT 22
7378: PUSH
7379: LD_VAR 0 1
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: PUSH
7388: LD_INT 21
7390: PUSH
7391: LD_INT 3
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: PUSH
7398: LD_INT 3
7400: PUSH
7401: LD_INT 24
7403: PUSH
7404: LD_INT 1000
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: LIST
7419: PPUSH
7420: CALL_OW 70
7424: PUSH
7425: FOR_IN
7426: IFFALSE 7450
// AddComRepairBuilding ( engineers [ i ] , damageBuilding ) ;
7428: LD_VAR 0 21
7432: PUSH
7433: LD_VAR 0 14
7437: ARRAY
7438: PPUSH
7439: LD_VAR 0 47
7443: PPUSH
7444: CALL_OW 190
7448: GO 7425
7450: POP
7451: POP
// end ;
7452: GO 7247
7454: POP
7455: POP
// end else
7456: GO 7765
// if engineers and destroyedBuildings then
7458: LD_VAR 0 21
7462: PUSH
7463: LD_VAR 0 35
7467: AND
7468: IFFALSE 7644
// begin for i := 1 to engineers do
7470: LD_ADDR_VAR 0 14
7474: PUSH
7475: DOUBLE
7476: LD_INT 1
7478: DEC
7479: ST_TO_ADDR
7480: LD_VAR 0 21
7484: PUSH
7485: FOR_TO
7486: IFFALSE 7640
// if GetTag ( engineers [ i ] ) = 1 then
7488: LD_VAR 0 21
7492: PUSH
7493: LD_VAR 0 14
7497: ARRAY
7498: PPUSH
7499: CALL_OW 110
7503: PUSH
7504: LD_INT 1
7506: EQUAL
7507: IFFALSE 7638
// begin if IsInUnit ( engineers [ i ] ) then
7509: LD_VAR 0 21
7513: PUSH
7514: LD_VAR 0 14
7518: ARRAY
7519: PPUSH
7520: CALL_OW 310
7524: IFFALSE 7541
// ComExitBuilding ( engineers [ i ] ) ;
7526: LD_VAR 0 21
7530: PUSH
7531: LD_VAR 0 14
7535: ARRAY
7536: PPUSH
7537: CALL_OW 122
// for j := 1 to destroyedBuildings / 4 do
7541: LD_ADDR_VAR 0 15
7545: PUSH
7546: DOUBLE
7547: LD_INT 1
7549: DEC
7550: ST_TO_ADDR
7551: LD_VAR 0 35
7555: PUSH
7556: LD_INT 4
7558: DIVREAL
7559: PUSH
7560: FOR_TO
7561: IFFALSE 7636
// AddComBuild ( engineers [ i ] , destroyedBuildings [ j ] , destroyedBuildings [ j + 1 ] , destroyedBuildings [ j + 2 ] , destroyedBuildings [ j + 3 ] ) ;
7563: LD_VAR 0 21
7567: PUSH
7568: LD_VAR 0 14
7572: ARRAY
7573: PPUSH
7574: LD_VAR 0 35
7578: PUSH
7579: LD_VAR 0 15
7583: ARRAY
7584: PPUSH
7585: LD_VAR 0 35
7589: PUSH
7590: LD_VAR 0 15
7594: PUSH
7595: LD_INT 1
7597: PLUS
7598: ARRAY
7599: PPUSH
7600: LD_VAR 0 35
7604: PUSH
7605: LD_VAR 0 15
7609: PUSH
7610: LD_INT 2
7612: PLUS
7613: ARRAY
7614: PPUSH
7615: LD_VAR 0 35
7619: PUSH
7620: LD_VAR 0 15
7624: PUSH
7625: LD_INT 3
7627: PLUS
7628: ARRAY
7629: PPUSH
7630: CALL_OW 205
7634: GO 7560
7636: POP
7637: POP
// end ;
7638: GO 7485
7640: POP
7641: POP
// end else
7642: GO 7765
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot and not destroyedBuildings then
7644: LD_VAR 0 21
7648: PUSH
7649: LD_VAR 0 21
7653: PPUSH
7654: LD_INT 56
7656: PUSH
7657: EMPTY
7658: LIST
7659: PPUSH
7660: CALL_OW 72
7664: AND
7665: PUSH
7666: LD_VAR 0 39
7670: AND
7671: PUSH
7672: LD_VAR 0 35
7676: NOT
7677: AND
7678: IFFALSE 7765
// for i := 1 to engineers do
7680: LD_ADDR_VAR 0 14
7684: PUSH
7685: DOUBLE
7686: LD_INT 1
7688: DEC
7689: ST_TO_ADDR
7690: LD_VAR 0 21
7694: PUSH
7695: FOR_TO
7696: IFFALSE 7763
// begin if GetTag ( engineers [ i ] ) = 1 and not HasTask ( engineers [ i ] ) then
7698: LD_VAR 0 21
7702: PUSH
7703: LD_VAR 0 14
7707: ARRAY
7708: PPUSH
7709: CALL_OW 110
7713: PUSH
7714: LD_INT 1
7716: EQUAL
7717: PUSH
7718: LD_VAR 0 21
7722: PUSH
7723: LD_VAR 0 14
7727: ARRAY
7728: PPUSH
7729: CALL_OW 314
7733: NOT
7734: AND
7735: IFFALSE 7761
// ComEnterUnit ( engineers [ i ] , depot [ 1 ] ) ;
7737: LD_VAR 0 21
7741: PUSH
7742: LD_VAR 0 14
7746: ARRAY
7747: PPUSH
7748: LD_VAR 0 39
7752: PUSH
7753: LD_INT 1
7755: ARRAY
7756: PPUSH
7757: CALL_OW 120
// end ;
7761: GO 7695
7763: POP
7764: POP
// for i := 1 to personel do
7765: LD_ADDR_VAR 0 14
7769: PUSH
7770: DOUBLE
7771: LD_INT 1
7773: DEC
7774: ST_TO_ADDR
7775: LD_VAR 0 19
7779: PUSH
7780: FOR_TO
7781: IFFALSE 7822
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
7783: LD_ADDR_VAR 0 22
7787: PUSH
7788: LD_VAR 0 22
7792: PUSH
7793: LD_VAR 0 19
7797: PUSH
7798: LD_VAR 0 14
7802: ARRAY
7803: PPUSH
7804: LD_INT 25
7806: PUSH
7807: LD_INT 3
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PPUSH
7814: CALL_OW 72
7818: ADD
7819: ST_TO_ADDR
7820: GO 7780
7822: POP
7823: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
7824: LD_VAR 0 22
7828: PUSH
7829: LD_VAR 0 4
7833: PPUSH
7834: LD_INT 22
7836: PUSH
7837: LD_VAR 0 1
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: PUSH
7846: LD_INT 21
7848: PUSH
7849: LD_INT 2
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: PUSH
7856: LD_INT 3
7858: PUSH
7859: LD_INT 24
7861: PUSH
7862: LD_INT 1000
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: LIST
7877: PPUSH
7878: CALL_OW 70
7882: AND
7883: IFFALSE 8463
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7885: LD_ADDR_VAR 0 48
7889: PUSH
7890: LD_VAR 0 4
7894: PPUSH
7895: LD_INT 22
7897: PUSH
7898: LD_VAR 0 1
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PUSH
7907: LD_INT 21
7909: PUSH
7910: LD_INT 2
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PUSH
7917: LD_INT 3
7919: PUSH
7920: LD_INT 24
7922: PUSH
7923: LD_INT 1000
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: LIST
7938: PPUSH
7939: CALL_OW 70
7943: PUSH
7944: FOR_IN
7945: IFFALSE 8459
// begin if GetDistUnitArea ( damageUnit , repairArea ) <= 5 then
7947: LD_VAR 0 48
7951: PPUSH
7952: LD_VAR 0 6
7956: PPUSH
7957: CALL_OW 299
7961: PUSH
7962: LD_INT 5
7964: LESSEQUAL
7965: IFFALSE 8054
// for i := 1 to vehicles do
7967: LD_ADDR_VAR 0 14
7971: PUSH
7972: DOUBLE
7973: LD_INT 1
7975: DEC
7976: ST_TO_ADDR
7977: LD_VAR 0 25
7981: PUSH
7982: FOR_TO
7983: IFFALSE 8052
// if vehicles [ i ] [ 1 ] = damageUnit then
7985: LD_VAR 0 25
7989: PUSH
7990: LD_VAR 0 14
7994: ARRAY
7995: PUSH
7996: LD_INT 1
7998: ARRAY
7999: PUSH
8000: LD_VAR 0 48
8004: EQUAL
8005: IFFALSE 8050
// begin ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
8007: LD_VAR 0 25
8011: PUSH
8012: LD_VAR 0 14
8016: ARRAY
8017: PUSH
8018: LD_INT 2
8020: ARRAY
8021: PPUSH
8022: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
8026: LD_VAR 0 25
8030: PUSH
8031: LD_VAR 0 14
8035: ARRAY
8036: PUSH
8037: LD_INT 2
8039: ARRAY
8040: PPUSH
8041: LD_VAR 0 48
8045: PPUSH
8046: CALL_OW 189
// end ;
8050: GO 7982
8052: POP
8053: POP
// for i := 1 to mechanics do
8054: LD_ADDR_VAR 0 14
8058: PUSH
8059: DOUBLE
8060: LD_INT 1
8062: DEC
8063: ST_TO_ADDR
8064: LD_VAR 0 22
8068: PUSH
8069: FOR_TO
8070: IFFALSE 8238
// if GetTag ( mechanics [ i ] ) = 1 and IsInUnit ( mechanics [ i ] ) in [ b_workshop , b_factory ] then
8072: LD_VAR 0 22
8076: PUSH
8077: LD_VAR 0 14
8081: ARRAY
8082: PPUSH
8083: CALL_OW 110
8087: PUSH
8088: LD_INT 1
8090: EQUAL
8091: PUSH
8092: LD_VAR 0 22
8096: PUSH
8097: LD_VAR 0 14
8101: ARRAY
8102: PPUSH
8103: CALL_OW 310
8107: PUSH
8108: LD_INT 2
8110: PUSH
8111: LD_INT 3
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: IN
8118: AND
8119: IFFALSE 8236
// begin if GetTaskList ( mechanics [ i ] ) then
8121: LD_VAR 0 22
8125: PUSH
8126: LD_VAR 0 14
8130: ARRAY
8131: PPUSH
8132: CALL_OW 437
8136: IFFALSE 8184
// if GetTaskList ( mechanics [ i ] ) [ 1 ] [ 1 ] = e then
8138: LD_VAR 0 22
8142: PUSH
8143: LD_VAR 0 14
8147: ARRAY
8148: PPUSH
8149: CALL_OW 437
8153: PUSH
8154: LD_INT 1
8156: ARRAY
8157: PUSH
8158: LD_INT 1
8160: ARRAY
8161: PUSH
8162: LD_STRING e
8164: EQUAL
8165: IFFALSE 8184
// SetTaskList ( mechanics [ i ] , [ ] ) ;
8167: LD_VAR 0 22
8171: PUSH
8172: LD_VAR 0 14
8176: ARRAY
8177: PPUSH
8178: EMPTY
8179: PPUSH
8180: CALL_OW 446
// if IsInUnit ( mechanics [ i ] ) then
8184: LD_VAR 0 22
8188: PUSH
8189: LD_VAR 0 14
8193: ARRAY
8194: PPUSH
8195: CALL_OW 310
8199: IFFALSE 8216
// ComExitBuilding ( mechanics [ i ] ) ;
8201: LD_VAR 0 22
8205: PUSH
8206: LD_VAR 0 14
8210: ARRAY
8211: PPUSH
8212: CALL_OW 122
// AddComRepairVehicle ( mechanics [ i ] , damageUnit ) ;
8216: LD_VAR 0 22
8220: PUSH
8221: LD_VAR 0 14
8225: ARRAY
8226: PPUSH
8227: LD_VAR 0 48
8231: PPUSH
8232: CALL_OW 189
// end ;
8236: GO 8069
8238: POP
8239: POP
// if GetLives ( damageUnit ) < 250 and IsInArea ( damageUnit , baseArea ) then
8240: LD_VAR 0 48
8244: PPUSH
8245: CALL_OW 256
8249: PUSH
8250: LD_INT 250
8252: LESS
8253: PUSH
8254: LD_VAR 0 48
8258: PPUSH
8259: LD_VAR 0 4
8263: PPUSH
8264: CALL_OW 308
8268: AND
8269: IFFALSE 8457
// for i := 1 to personel do
8271: LD_ADDR_VAR 0 14
8275: PUSH
8276: DOUBLE
8277: LD_INT 1
8279: DEC
8280: ST_TO_ADDR
8281: LD_VAR 0 19
8285: PUSH
8286: FOR_TO
8287: IFFALSE 8455
// if GetTag ( mechanics [ i ] ) = 1 and IsInUnit ( mechanics [ i ] ) in [ b_workshop , b_factory ] then
8289: LD_VAR 0 22
8293: PUSH
8294: LD_VAR 0 14
8298: ARRAY
8299: PPUSH
8300: CALL_OW 110
8304: PUSH
8305: LD_INT 1
8307: EQUAL
8308: PUSH
8309: LD_VAR 0 22
8313: PUSH
8314: LD_VAR 0 14
8318: ARRAY
8319: PPUSH
8320: CALL_OW 310
8324: PUSH
8325: LD_INT 2
8327: PUSH
8328: LD_INT 3
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: IN
8335: AND
8336: IFFALSE 8453
// begin if GetTaskList ( mechanics [ i ] ) then
8338: LD_VAR 0 22
8342: PUSH
8343: LD_VAR 0 14
8347: ARRAY
8348: PPUSH
8349: CALL_OW 437
8353: IFFALSE 8401
// if GetTaskList ( mechanics [ i ] ) [ 1 ] [ 1 ] = e then
8355: LD_VAR 0 22
8359: PUSH
8360: LD_VAR 0 14
8364: ARRAY
8365: PPUSH
8366: CALL_OW 437
8370: PUSH
8371: LD_INT 1
8373: ARRAY
8374: PUSH
8375: LD_INT 1
8377: ARRAY
8378: PUSH
8379: LD_STRING e
8381: EQUAL
8382: IFFALSE 8401
// SetTaskList ( mechanics [ i ] , [ ] ) ;
8384: LD_VAR 0 22
8388: PUSH
8389: LD_VAR 0 14
8393: ARRAY
8394: PPUSH
8395: EMPTY
8396: PPUSH
8397: CALL_OW 446
// if IsInUnit ( mechanics [ i ] ) then
8401: LD_VAR 0 22
8405: PUSH
8406: LD_VAR 0 14
8410: ARRAY
8411: PPUSH
8412: CALL_OW 310
8416: IFFALSE 8433
// ComExitBuilding ( mechanics [ i ] ) ;
8418: LD_VAR 0 22
8422: PUSH
8423: LD_VAR 0 14
8427: ARRAY
8428: PPUSH
8429: CALL_OW 122
// AddComRepairVehicle ( mechanics [ i ] , damageUnit ) ;
8433: LD_VAR 0 22
8437: PUSH
8438: LD_VAR 0 14
8442: ARRAY
8443: PPUSH
8444: LD_VAR 0 48
8448: PPUSH
8449: CALL_OW 189
// end ;
8453: GO 8286
8455: POP
8456: POP
// end ;
8457: GO 7944
8459: POP
8460: POP
// end else
8461: GO 8760
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and UnitFilter ( controlTowers , [ f_empty ] ) then
8463: LD_VAR 0 22
8467: PUSH
8468: LD_VAR 0 22
8472: PPUSH
8473: LD_INT 56
8475: PUSH
8476: EMPTY
8477: LIST
8478: PPUSH
8479: CALL_OW 72
8483: AND
8484: PUSH
8485: LD_VAR 0 44
8489: PPUSH
8490: LD_INT 58
8492: PUSH
8493: EMPTY
8494: LIST
8495: PPUSH
8496: CALL_OW 72
8500: AND
8501: IFFALSE 8618
// begin for i := 1 to mechanics do
8503: LD_ADDR_VAR 0 14
8507: PUSH
8508: DOUBLE
8509: LD_INT 1
8511: DEC
8512: ST_TO_ADDR
8513: LD_VAR 0 22
8517: PUSH
8518: FOR_TO
8519: IFFALSE 8614
// if GetTag ( mechanics [ i ] ) = 1 and not HasTask ( mechanics [ i ] ) and not IsInUnit ( mechanics [ i ] ) then
8521: LD_VAR 0 22
8525: PUSH
8526: LD_VAR 0 14
8530: ARRAY
8531: PPUSH
8532: CALL_OW 110
8536: PUSH
8537: LD_INT 1
8539: EQUAL
8540: PUSH
8541: LD_VAR 0 22
8545: PUSH
8546: LD_VAR 0 14
8550: ARRAY
8551: PPUSH
8552: CALL_OW 314
8556: NOT
8557: AND
8558: PUSH
8559: LD_VAR 0 22
8563: PUSH
8564: LD_VAR 0 14
8568: ARRAY
8569: PPUSH
8570: CALL_OW 310
8574: NOT
8575: AND
8576: IFFALSE 8612
// ComEnterUnit ( mechanics [ i ] , controlTowers [ rand ( 1 , controlTowers ) ] ) ;
8578: LD_VAR 0 22
8582: PUSH
8583: LD_VAR 0 14
8587: ARRAY
8588: PPUSH
8589: LD_VAR 0 44
8593: PUSH
8594: LD_INT 1
8596: PPUSH
8597: LD_VAR 0 44
8601: PPUSH
8602: CALL_OW 12
8606: ARRAY
8607: PPUSH
8608: CALL_OW 120
8612: GO 8518
8614: POP
8615: POP
// end else
8616: GO 8760
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
8618: LD_VAR 0 22
8622: PUSH
8623: LD_VAR 0 22
8627: PPUSH
8628: LD_INT 56
8630: PUSH
8631: EMPTY
8632: LIST
8633: PPUSH
8634: CALL_OW 72
8638: AND
8639: PUSH
8640: LD_VAR 0 40
8644: AND
8645: IFFALSE 8760
// for i := 1 to mechanics do
8647: LD_ADDR_VAR 0 14
8651: PUSH
8652: DOUBLE
8653: LD_INT 1
8655: DEC
8656: ST_TO_ADDR
8657: LD_VAR 0 22
8661: PUSH
8662: FOR_TO
8663: IFFALSE 8758
// if GetTag ( mechanics [ i ] ) = 1 and not HasTask ( mechanics [ i ] ) and not IsInUnit ( mechanics [ i ] ) then
8665: LD_VAR 0 22
8669: PUSH
8670: LD_VAR 0 14
8674: ARRAY
8675: PPUSH
8676: CALL_OW 110
8680: PUSH
8681: LD_INT 1
8683: EQUAL
8684: PUSH
8685: LD_VAR 0 22
8689: PUSH
8690: LD_VAR 0 14
8694: ARRAY
8695: PPUSH
8696: CALL_OW 314
8700: NOT
8701: AND
8702: PUSH
8703: LD_VAR 0 22
8707: PUSH
8708: LD_VAR 0 14
8712: ARRAY
8713: PPUSH
8714: CALL_OW 310
8718: NOT
8719: AND
8720: IFFALSE 8756
// ComEnterUnit ( mechanics [ i ] , factory [ rand ( 1 , factory ) ] ) ;
8722: LD_VAR 0 22
8726: PUSH
8727: LD_VAR 0 14
8731: ARRAY
8732: PPUSH
8733: LD_VAR 0 40
8737: PUSH
8738: LD_INT 1
8740: PPUSH
8741: LD_VAR 0 40
8745: PPUSH
8746: CALL_OW 12
8750: ARRAY
8751: PPUSH
8752: CALL_OW 120
8756: GO 8662
8758: POP
8759: POP
// for i := 1 to personel do
8760: LD_ADDR_VAR 0 14
8764: PUSH
8765: DOUBLE
8766: LD_INT 1
8768: DEC
8769: ST_TO_ADDR
8770: LD_VAR 0 19
8774: PUSH
8775: FOR_TO
8776: IFFALSE 8817
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
8778: LD_ADDR_VAR 0 23
8782: PUSH
8783: LD_VAR 0 23
8787: PUSH
8788: LD_VAR 0 19
8792: PUSH
8793: LD_VAR 0 14
8797: ARRAY
8798: PPUSH
8799: LD_INT 25
8801: PUSH
8802: LD_INT 4
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PPUSH
8809: CALL_OW 72
8813: ADD
8814: ST_TO_ADDR
8815: GO 8775
8817: POP
8818: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
8819: LD_VAR 0 23
8823: PUSH
8824: LD_VAR 0 4
8828: PPUSH
8829: LD_INT 22
8831: PUSH
8832: LD_VAR 0 1
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: PUSH
8841: LD_INT 21
8843: PUSH
8844: LD_INT 1
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: PUSH
8851: LD_INT 3
8853: PUSH
8854: LD_INT 24
8856: PUSH
8857: LD_INT 1000
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: LIST
8872: PPUSH
8873: CALL_OW 70
8877: AND
8878: IFFALSE 9315
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
8880: LD_ADDR_VAR 0 48
8884: PUSH
8885: LD_VAR 0 4
8889: PPUSH
8890: LD_INT 22
8892: PUSH
8893: LD_VAR 0 1
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: PUSH
8902: LD_INT 21
8904: PUSH
8905: LD_INT 1
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PUSH
8912: LD_INT 3
8914: PUSH
8915: LD_INT 24
8917: PUSH
8918: LD_INT 1000
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: LIST
8933: PPUSH
8934: CALL_OW 70
8938: PUSH
8939: FOR_IN
8940: IFFALSE 9311
// begin if GetDistUnitArea ( damageUnit , healArea ) <= 5 then
8942: LD_VAR 0 48
8946: PPUSH
8947: LD_VAR 0 5
8951: PPUSH
8952: CALL_OW 299
8956: PUSH
8957: LD_INT 5
8959: LESSEQUAL
8960: IFFALSE 9120
// for i := 1 to scientists do
8962: LD_ADDR_VAR 0 14
8966: PUSH
8967: DOUBLE
8968: LD_INT 1
8970: DEC
8971: ST_TO_ADDR
8972: LD_VAR 0 23
8976: PUSH
8977: FOR_TO
8978: IFFALSE 9118
// if GetTag ( scientists [ i ] ) = 1 then
8980: LD_VAR 0 23
8984: PUSH
8985: LD_VAR 0 14
8989: ARRAY
8990: PPUSH
8991: CALL_OW 110
8995: PUSH
8996: LD_INT 1
8998: EQUAL
8999: IFFALSE 9116
// begin if GetTaskList ( scientists [ i ] ) then
9001: LD_VAR 0 23
9005: PUSH
9006: LD_VAR 0 14
9010: ARRAY
9011: PPUSH
9012: CALL_OW 437
9016: IFFALSE 9064
// if GetTaskList ( scientists [ i ] ) [ 1 ] [ 1 ] = e then
9018: LD_VAR 0 23
9022: PUSH
9023: LD_VAR 0 14
9027: ARRAY
9028: PPUSH
9029: CALL_OW 437
9033: PUSH
9034: LD_INT 1
9036: ARRAY
9037: PUSH
9038: LD_INT 1
9040: ARRAY
9041: PUSH
9042: LD_STRING e
9044: EQUAL
9045: IFFALSE 9064
// SetTaskList ( scientists [ i ] , [ ] ) ;
9047: LD_VAR 0 23
9051: PUSH
9052: LD_VAR 0 14
9056: ARRAY
9057: PPUSH
9058: EMPTY
9059: PPUSH
9060: CALL_OW 446
// if IsInUnit ( scientists [ i ] ) then
9064: LD_VAR 0 23
9068: PUSH
9069: LD_VAR 0 14
9073: ARRAY
9074: PPUSH
9075: CALL_OW 310
9079: IFFALSE 9096
// ComExitBuilding ( scientists [ i ] ) ;
9081: LD_VAR 0 23
9085: PUSH
9086: LD_VAR 0 14
9090: ARRAY
9091: PPUSH
9092: CALL_OW 122
// AddComHeal ( scientists [ i ] , damageUnit ) ;
9096: LD_VAR 0 23
9100: PUSH
9101: LD_VAR 0 14
9105: ARRAY
9106: PPUSH
9107: LD_VAR 0 48
9111: PPUSH
9112: CALL_OW 188
// end ;
9116: GO 8977
9118: POP
9119: POP
// if GetLives ( damageUnit ) < 250 and IsInArea ( damageUnit , baseArea ) then
9120: LD_VAR 0 48
9124: PPUSH
9125: CALL_OW 256
9129: PUSH
9130: LD_INT 250
9132: LESS
9133: PUSH
9134: LD_VAR 0 48
9138: PPUSH
9139: LD_VAR 0 4
9143: PPUSH
9144: CALL_OW 308
9148: AND
9149: IFFALSE 9309
// for i := 1 to scientists do
9151: LD_ADDR_VAR 0 14
9155: PUSH
9156: DOUBLE
9157: LD_INT 1
9159: DEC
9160: ST_TO_ADDR
9161: LD_VAR 0 23
9165: PUSH
9166: FOR_TO
9167: IFFALSE 9307
// if GetTag ( scientists [ i ] ) = 1 then
9169: LD_VAR 0 23
9173: PUSH
9174: LD_VAR 0 14
9178: ARRAY
9179: PPUSH
9180: CALL_OW 110
9184: PUSH
9185: LD_INT 1
9187: EQUAL
9188: IFFALSE 9305
// begin if GetTaskList ( scientists [ i ] ) then
9190: LD_VAR 0 23
9194: PUSH
9195: LD_VAR 0 14
9199: ARRAY
9200: PPUSH
9201: CALL_OW 437
9205: IFFALSE 9253
// if GetTaskList ( scientists [ i ] ) [ 1 ] [ 1 ] = e then
9207: LD_VAR 0 23
9211: PUSH
9212: LD_VAR 0 14
9216: ARRAY
9217: PPUSH
9218: CALL_OW 437
9222: PUSH
9223: LD_INT 1
9225: ARRAY
9226: PUSH
9227: LD_INT 1
9229: ARRAY
9230: PUSH
9231: LD_STRING e
9233: EQUAL
9234: IFFALSE 9253
// SetTaskList ( scientists [ i ] , [ ] ) ;
9236: LD_VAR 0 23
9240: PUSH
9241: LD_VAR 0 14
9245: ARRAY
9246: PPUSH
9247: EMPTY
9248: PPUSH
9249: CALL_OW 446
// if IsInUnit ( scientists [ i ] ) then
9253: LD_VAR 0 23
9257: PUSH
9258: LD_VAR 0 14
9262: ARRAY
9263: PPUSH
9264: CALL_OW 310
9268: IFFALSE 9285
// ComExitBuilding ( scientists [ i ] ) ;
9270: LD_VAR 0 23
9274: PUSH
9275: LD_VAR 0 14
9279: ARRAY
9280: PPUSH
9281: CALL_OW 122
// AddComHeal ( scientists [ i ] , damageUnit ) ;
9285: LD_VAR 0 23
9289: PUSH
9290: LD_VAR 0 14
9294: ARRAY
9295: PPUSH
9296: LD_VAR 0 48
9300: PPUSH
9301: CALL_OW 188
// end ;
9305: GO 9166
9307: POP
9308: POP
// end ;
9309: GO 8939
9311: POP
9312: POP
// end else
9313: GO 9457
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
9315: LD_VAR 0 23
9319: PUSH
9320: LD_VAR 0 23
9324: PPUSH
9325: LD_INT 56
9327: PUSH
9328: EMPTY
9329: LIST
9330: PPUSH
9331: CALL_OW 72
9335: AND
9336: PUSH
9337: LD_VAR 0 41
9341: AND
9342: IFFALSE 9457
// for i := 1 to scientists do
9344: LD_ADDR_VAR 0 14
9348: PUSH
9349: DOUBLE
9350: LD_INT 1
9352: DEC
9353: ST_TO_ADDR
9354: LD_VAR 0 23
9358: PUSH
9359: FOR_TO
9360: IFFALSE 9455
// if GetTag ( scientists [ i ] ) = 1 and not HasTask ( scientists [ i ] ) and not IsInUnit ( scientists [ i ] ) then
9362: LD_VAR 0 23
9366: PUSH
9367: LD_VAR 0 14
9371: ARRAY
9372: PPUSH
9373: CALL_OW 110
9377: PUSH
9378: LD_INT 1
9380: EQUAL
9381: PUSH
9382: LD_VAR 0 23
9386: PUSH
9387: LD_VAR 0 14
9391: ARRAY
9392: PPUSH
9393: CALL_OW 314
9397: NOT
9398: AND
9399: PUSH
9400: LD_VAR 0 23
9404: PUSH
9405: LD_VAR 0 14
9409: ARRAY
9410: PPUSH
9411: CALL_OW 310
9415: NOT
9416: AND
9417: IFFALSE 9453
// ComEnterUnit ( scientists [ i ] , lab [ rand ( 1 , lab ) ] ) ;
9419: LD_VAR 0 23
9423: PUSH
9424: LD_VAR 0 14
9428: ARRAY
9429: PPUSH
9430: LD_VAR 0 41
9434: PUSH
9435: LD_INT 1
9437: PPUSH
9438: LD_VAR 0 41
9442: PPUSH
9443: CALL_OW 12
9447: ARRAY
9448: PPUSH
9449: CALL_OW 120
9453: GO 9359
9455: POP
9456: POP
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , us_bulldozer ] ] ) then
9457: LD_INT 22
9459: PUSH
9460: LD_VAR 0 1
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: LD_INT 34
9471: PUSH
9472: LD_INT 14
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: PPUSH
9483: CALL_OW 69
9487: NOT
9488: IFFALSE 9515
// AddComConstruct ( factory [ 1 ] , us_heavy_tracked , engine_combustion , control_remote , us_bulldozer ) ;
9490: LD_VAR 0 40
9494: PUSH
9495: LD_INT 1
9497: ARRAY
9498: PPUSH
9499: LD_INT 4
9501: PPUSH
9502: LD_INT 1
9504: PPUSH
9505: LD_INT 2
9507: PPUSH
9508: LD_INT 14
9510: PPUSH
9511: CALL_OW 185
// if vehicles < vehiclesAmount and factory then
9515: LD_VAR 0 25
9519: PUSH
9520: LD_VAR 0 8
9524: LESS
9525: PUSH
9526: LD_VAR 0 40
9530: AND
9531: IFFALSE 9779
// begin tmp = vehiclesAmount - vehicles ;
9533: LD_ADDR_VAR 0 16
9537: PUSH
9538: LD_VAR 0 8
9542: PUSH
9543: LD_VAR 0 25
9547: MINUS
9548: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
9549: LD_ADDR_VAR 0 32
9553: PUSH
9554: LD_VAR 0 1
9558: PPUSH
9559: LD_VAR 0 2
9563: PPUSH
9564: CALL 14386 0 2
9568: ST_TO_ADDR
// for i := 1 to tmp do
9569: LD_ADDR_VAR 0 14
9573: PUSH
9574: DOUBLE
9575: LD_INT 1
9577: DEC
9578: ST_TO_ADDR
9579: LD_VAR 0 16
9583: PUSH
9584: FOR_TO
9585: IFFALSE 9775
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
9587: LD_ADDR_VAR 0 16
9591: PUSH
9592: LD_VAR 0 32
9596: PUSH
9597: LD_INT 1
9599: PPUSH
9600: LD_VAR 0 32
9604: PPUSH
9605: CALL_OW 12
9609: ARRAY
9610: ST_TO_ADDR
// if tmp in [ 6 , 34 , 14 , 71 , 47 ] then
9611: LD_VAR 0 16
9615: PUSH
9616: LD_INT 6
9618: PUSH
9619: LD_INT 34
9621: PUSH
9622: LD_INT 14
9624: PUSH
9625: LD_INT 71
9627: PUSH
9628: LD_INT 47
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: IN
9638: IFFALSE 9676
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
9640: LD_ADDR_VAR 0 33
9644: PUSH
9645: LD_INT 4
9647: PUSH
9648: EMPTY
9649: LIST
9650: PUSH
9651: LD_INT 14
9653: PUSH
9654: EMPTY
9655: LIST
9656: PUSH
9657: LD_INT 24
9659: PUSH
9660: EMPTY
9661: LIST
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: LIST
9667: PUSH
9668: LD_VAR 0 2
9672: ARRAY
9673: ST_TO_ADDR
9674: GO 9730
// chassis = [ [ us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
9676: LD_ADDR_VAR 0 33
9680: PUSH
9681: LD_INT 3
9683: PUSH
9684: LD_INT 4
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: LD_INT 13
9693: PUSH
9694: LD_INT 14
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: PUSH
9701: LD_INT 21
9703: PUSH
9704: LD_INT 23
9706: PUSH
9707: LD_INT 24
9709: PUSH
9710: LD_INT 22
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: LIST
9723: PUSH
9724: LD_VAR 0 2
9728: ARRAY
9729: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_remote , tmp ) ;
9730: LD_VAR 0 40
9734: PUSH
9735: LD_INT 1
9737: ARRAY
9738: PPUSH
9739: LD_VAR 0 33
9743: PUSH
9744: LD_INT 1
9746: PPUSH
9747: LD_VAR 0 33
9751: PPUSH
9752: CALL_OW 12
9756: ARRAY
9757: PPUSH
9758: LD_INT 1
9760: PPUSH
9761: LD_INT 2
9763: PPUSH
9764: LD_VAR 0 16
9768: PPUSH
9769: CALL_OW 185
// end ;
9773: GO 9584
9775: POP
9776: POP
// end else
9777: GO 9792
// ComCancel ( factory [ 1 ] ) ;
9779: LD_VAR 0 40
9783: PUSH
9784: LD_INT 1
9786: ARRAY
9787: PPUSH
9788: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ] ] ) do
9792: LD_ADDR_VAR 0 24
9796: PUSH
9797: LD_VAR 0 4
9801: PPUSH
9802: LD_INT 22
9804: PUSH
9805: LD_VAR 0 1
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: LD_INT 21
9816: PUSH
9817: LD_INT 2
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: PUSH
9824: LD_INT 50
9826: PUSH
9827: EMPTY
9828: LIST
9829: PUSH
9830: LD_INT 3
9832: PUSH
9833: LD_INT 2
9835: PUSH
9836: LD_INT 34
9838: PUSH
9839: LD_INT 12
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PUSH
9846: LD_INT 34
9848: PUSH
9849: LD_INT 51
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: PUSH
9856: LD_INT 34
9858: PUSH
9859: LD_INT 32
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: PUSH
9866: LD_INT 34
9868: PUSH
9869: LD_INT 31
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: PUSH
9887: EMPTY
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: PPUSH
9893: CALL_OW 70
9897: PUSH
9898: FOR_IN
9899: IFFALSE 10054
// begin vehicleInList = false ;
9901: LD_ADDR_VAR 0 26
9905: PUSH
9906: LD_INT 0
9908: ST_TO_ADDR
// for i := 1 to vehicles do
9909: LD_ADDR_VAR 0 14
9913: PUSH
9914: DOUBLE
9915: LD_INT 1
9917: DEC
9918: ST_TO_ADDR
9919: LD_VAR 0 25
9923: PUSH
9924: FOR_TO
9925: IFFALSE 9955
// if vehicle in vehicles [ i ] then
9927: LD_VAR 0 24
9931: PUSH
9932: LD_VAR 0 25
9936: PUSH
9937: LD_VAR 0 14
9941: ARRAY
9942: IN
9943: IFFALSE 9953
// vehicleInList = true ;
9945: LD_ADDR_VAR 0 26
9949: PUSH
9950: LD_INT 1
9952: ST_TO_ADDR
9953: GO 9924
9955: POP
9956: POP
// if not vehicleInList then
9957: LD_VAR 0 26
9961: NOT
9962: IFFALSE 10052
// begin if vehicles < vehiclesToAttackAmount then
9964: LD_VAR 0 25
9968: PUSH
9969: LD_VAR 0 10
9973: LESS
9974: IFFALSE 10015
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] ] ] else
9976: LD_ADDR_VAR 0 25
9980: PUSH
9981: LD_VAR 0 25
9985: PUSH
9986: LD_VAR 0 24
9990: PUSH
9991: LD_VAR 0 24
9995: PPUSH
9996: CALL_OW 313
10000: PUSH
10001: LD_INT 1
10003: ARRAY
10004: PUSH
10005: EMPTY
10006: LIST
10007: LIST
10008: PUSH
10009: EMPTY
10010: LIST
10011: ADD
10012: ST_TO_ADDR
10013: GO 10052
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] ] ] ;
10015: LD_ADDR_VAR 0 25
10019: PUSH
10020: LD_VAR 0 25
10024: PUSH
10025: LD_VAR 0 24
10029: PUSH
10030: LD_VAR 0 24
10034: PPUSH
10035: CALL_OW 313
10039: PUSH
10040: LD_INT 1
10042: ARRAY
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: EMPTY
10049: LIST
10050: ADD
10051: ST_TO_ADDR
// end ; end ;
10052: GO 9898
10054: POP
10055: POP
// for enemyUnits in FilterAllUnits ( [ f_enemy , side ] ) do
10056: LD_ADDR_VAR 0 50
10060: PUSH
10061: LD_INT 81
10063: PUSH
10064: LD_VAR 0 1
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: PPUSH
10073: CALL_OW 69
10077: PUSH
10078: FOR_IN
10079: IFFALSE 10597
// begin offensiveUnits = [ ] ;
10081: LD_ADDR_VAR 0 27
10085: PUSH
10086: EMPTY
10087: ST_TO_ADDR
// offensiveReadyCounter = 0 ;
10088: LD_ADDR_VAR 0 28
10092: PUSH
10093: LD_INT 0
10095: ST_TO_ADDR
// for i := 1 to vehicles do
10096: LD_ADDR_VAR 0 14
10100: PUSH
10101: DOUBLE
10102: LD_INT 1
10104: DEC
10105: ST_TO_ADDR
10106: LD_VAR 0 25
10110: PUSH
10111: FOR_TO
10112: IFFALSE 10320
// if GetTag ( vehicles [ i ] [ 1 ] ) = 2 then
10114: LD_VAR 0 25
10118: PUSH
10119: LD_VAR 0 14
10123: ARRAY
10124: PUSH
10125: LD_INT 1
10127: ARRAY
10128: PPUSH
10129: CALL_OW 110
10133: PUSH
10134: LD_INT 2
10136: EQUAL
10137: IFFALSE 10318
// begin if GetLives ( vehicles [ i ] [ 1 ] ) > 650 then
10139: LD_VAR 0 25
10143: PUSH
10144: LD_VAR 0 14
10148: ARRAY
10149: PUSH
10150: LD_INT 1
10152: ARRAY
10153: PPUSH
10154: CALL_OW 256
10158: PUSH
10159: LD_INT 650
10161: GREATER
10162: IFFALSE 10178
// offensiveReadyCounter = offensiveReadyCounter + 1 ;
10164: LD_ADDR_VAR 0 28
10168: PUSH
10169: LD_VAR 0 28
10173: PUSH
10174: LD_INT 1
10176: PLUS
10177: ST_TO_ADDR
// if IsInArea ( vehicles [ i ] [ 1 ] , baseArea ) then
10178: LD_VAR 0 25
10182: PUSH
10183: LD_VAR 0 14
10187: ARRAY
10188: PUSH
10189: LD_INT 1
10191: ARRAY
10192: PPUSH
10193: LD_VAR 0 4
10197: PPUSH
10198: CALL_OW 308
10202: IFFALSE 10230
// offensiveUnits = offensiveUnits ^ vehicles [ i ] [ 1 ] ;
10204: LD_ADDR_VAR 0 27
10208: PUSH
10209: LD_VAR 0 27
10213: PUSH
10214: LD_VAR 0 25
10218: PUSH
10219: LD_VAR 0 14
10223: ARRAY
10224: PUSH
10225: LD_INT 1
10227: ARRAY
10228: ADD
10229: ST_TO_ADDR
// for j = 1 to personel do
10230: LD_ADDR_VAR 0 15
10234: PUSH
10235: DOUBLE
10236: LD_INT 1
10238: DEC
10239: ST_TO_ADDR
10240: LD_VAR 0 19
10244: PUSH
10245: FOR_TO
10246: IFFALSE 10316
// if personel [ j ] = vehicles [ i ] [ 2 ] then
10248: LD_VAR 0 19
10252: PUSH
10253: LD_VAR 0 15
10257: ARRAY
10258: PUSH
10259: LD_VAR 0 25
10263: PUSH
10264: LD_VAR 0 14
10268: ARRAY
10269: PUSH
10270: LD_INT 2
10272: ARRAY
10273: EQUAL
10274: IFFALSE 10314
// personel = ReplaceIn ( personel , [ j , personel [ j ] ] , 3 ) ;
10276: LD_ADDR_VAR 0 19
10280: PUSH
10281: LD_VAR 0 19
10285: PPUSH
10286: LD_VAR 0 15
10290: PUSH
10291: LD_VAR 0 19
10295: PUSH
10296: LD_VAR 0 15
10300: ARRAY
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: PPUSH
10306: LD_INT 3
10308: PPUSH
10309: CALL 46284 0 3
10313: ST_TO_ADDR
10314: GO 10245
10316: POP
10317: POP
// end ;
10318: GO 10111
10320: POP
10321: POP
// if vehiclesToAttackAmount <= offensiveReadyCounter then
10322: LD_VAR 0 10
10326: PUSH
10327: LD_VAR 0 28
10331: LESSEQUAL
10332: IFFALSE 10595
// begin for i := 1 to offensiveUnits do
10334: LD_ADDR_VAR 0 14
10338: PUSH
10339: DOUBLE
10340: LD_INT 1
10342: DEC
10343: ST_TO_ADDR
10344: LD_VAR 0 27
10348: PUSH
10349: FOR_TO
10350: IFFALSE 10593
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , offensiveUnits [ i ] ) ;
10352: LD_ADDR_VAR 0 29
10356: PUSH
10357: LD_INT 81
10359: PUSH
10360: LD_INT 1
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PPUSH
10367: CALL_OW 69
10371: PPUSH
10372: LD_VAR 0 27
10376: PUSH
10377: LD_VAR 0 14
10381: ARRAY
10382: PPUSH
10383: CALL_OW 74
10387: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , offensiveUnits [ i ] ) ;
10388: LD_ADDR_VAR 0 30
10392: PUSH
10393: LD_INT 81
10395: PUSH
10396: LD_INT 1
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: PUSH
10403: LD_INT 2
10405: PUSH
10406: LD_INT 59
10408: PUSH
10409: EMPTY
10410: LIST
10411: PUSH
10412: LD_INT 21
10414: PUSH
10415: LD_INT 1
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: LD_INT 21
10424: PUSH
10425: LD_INT 2
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PUSH
10442: EMPTY
10443: LIST
10444: PPUSH
10445: CALL_OW 69
10449: PPUSH
10450: LD_VAR 0 27
10454: PUSH
10455: LD_VAR 0 14
10459: ARRAY
10460: PPUSH
10461: CALL_OW 74
10465: ST_TO_ADDR
// if GetDistUnits ( offensiveUnits [ i ] , target1 ) + 9 < GetDistUnits ( offensiveUnits [ i ] , target2 ) then
10466: LD_VAR 0 27
10470: PUSH
10471: LD_VAR 0 14
10475: ARRAY
10476: PPUSH
10477: LD_VAR 0 29
10481: PPUSH
10482: CALL_OW 296
10486: PUSH
10487: LD_INT 9
10489: PLUS
10490: PUSH
10491: LD_VAR 0 27
10495: PUSH
10496: LD_VAR 0 14
10500: ARRAY
10501: PPUSH
10502: LD_VAR 0 30
10506: PPUSH
10507: CALL_OW 296
10511: LESS
10512: IFFALSE 10536
// ComAttackUnit ( offensiveUnits [ i ] , target1 ) else
10514: LD_VAR 0 27
10518: PUSH
10519: LD_VAR 0 14
10523: ARRAY
10524: PPUSH
10525: LD_VAR 0 29
10529: PPUSH
10530: CALL_OW 115
10534: GO 10556
// ComAttackUnit ( offensiveUnits [ i ] , target2 ) ;
10536: LD_VAR 0 27
10540: PUSH
10541: LD_VAR 0 14
10545: ARRAY
10546: PPUSH
10547: LD_VAR 0 30
10551: PPUSH
10552: CALL_OW 115
// AddComAgressiveMove ( offensiveUnits [ i ] , GetX ( enemyUnits ) , GetY ( enemyUnits ) ) ;
10556: LD_VAR 0 27
10560: PUSH
10561: LD_VAR 0 14
10565: ARRAY
10566: PPUSH
10567: LD_VAR 0 50
10571: PPUSH
10572: CALL_OW 250
10576: PPUSH
10577: LD_VAR 0 50
10581: PPUSH
10582: CALL_OW 251
10586: PPUSH
10587: CALL_OW 174
// end ;
10591: GO 10349
10593: POP
10594: POP
// end ; end ;
10595: GO 10078
10597: POP
10598: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
10599: LD_ADDR_VAR 0 50
10603: PUSH
10604: LD_VAR 0 7
10608: PPUSH
10609: LD_INT 81
10611: PUSH
10612: LD_VAR 0 1
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PPUSH
10621: CALL_OW 70
10625: PUSH
10626: FOR_IN
10627: IFFALSE 10855
// begin defenceUnits = [ ] ;
10629: LD_ADDR_VAR 0 31
10633: PUSH
10634: EMPTY
10635: ST_TO_ADDR
// for i := 1 to personel do
10636: LD_ADDR_VAR 0 14
10640: PUSH
10641: DOUBLE
10642: LD_INT 1
10644: DEC
10645: ST_TO_ADDR
10646: LD_VAR 0 19
10650: PUSH
10651: FOR_TO
10652: IFFALSE 10699
// if GetTag ( personel [ i ] ) = 3 then
10654: LD_VAR 0 19
10658: PUSH
10659: LD_VAR 0 14
10663: ARRAY
10664: PPUSH
10665: CALL_OW 110
10669: PUSH
10670: LD_INT 3
10672: EQUAL
10673: IFFALSE 10697
// defenceUnits = defenceUnits ^ personel [ i ] ;
10675: LD_ADDR_VAR 0 31
10679: PUSH
10680: LD_VAR 0 31
10684: PUSH
10685: LD_VAR 0 19
10689: PUSH
10690: LD_VAR 0 14
10694: ARRAY
10695: ADD
10696: ST_TO_ADDR
10697: GO 10651
10699: POP
10700: POP
// for i := 1 to vehicles do
10701: LD_ADDR_VAR 0 14
10705: PUSH
10706: DOUBLE
10707: LD_INT 1
10709: DEC
10710: ST_TO_ADDR
10711: LD_VAR 0 25
10715: PUSH
10716: FOR_TO
10717: IFFALSE 10772
// if GetTag ( vehicles [ i ] [ 1 ] ) = 3 then
10719: LD_VAR 0 25
10723: PUSH
10724: LD_VAR 0 14
10728: ARRAY
10729: PUSH
10730: LD_INT 1
10732: ARRAY
10733: PPUSH
10734: CALL_OW 110
10738: PUSH
10739: LD_INT 3
10741: EQUAL
10742: IFFALSE 10770
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
10744: LD_ADDR_VAR 0 31
10748: PUSH
10749: LD_VAR 0 31
10753: PUSH
10754: LD_VAR 0 25
10758: PUSH
10759: LD_VAR 0 14
10763: ARRAY
10764: PUSH
10765: LD_INT 1
10767: ARRAY
10768: ADD
10769: ST_TO_ADDR
10770: GO 10716
10772: POP
10773: POP
// ComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
10774: LD_VAR 0 31
10778: PPUSH
10779: LD_INT 3
10781: PUSH
10782: LD_INT 60
10784: PUSH
10785: EMPTY
10786: LIST
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PPUSH
10792: CALL_OW 72
10796: PPUSH
10797: LD_VAR 0 50
10801: PPUSH
10802: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , GetX ( enemyUnits ) , GetY ( enemyUnits ) ) ;
10806: LD_VAR 0 31
10810: PPUSH
10811: LD_INT 3
10813: PUSH
10814: LD_INT 60
10816: PUSH
10817: EMPTY
10818: LIST
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: PPUSH
10824: CALL_OW 72
10828: PPUSH
10829: LD_VAR 0 50
10833: PPUSH
10834: CALL_OW 250
10838: PPUSH
10839: LD_VAR 0 50
10843: PPUSH
10844: CALL_OW 251
10848: PPUSH
10849: CALL_OW 174
// end ;
10853: GO 10626
10855: POP
10856: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
10857: LD_ADDR_VAR 0 45
10861: PUSH
10862: LD_INT 22
10864: PUSH
10865: LD_VAR 0 1
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: PUSH
10874: LD_INT 2
10876: PUSH
10877: LD_INT 30
10879: PUSH
10880: LD_INT 31
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PUSH
10887: LD_INT 30
10889: PUSH
10890: LD_INT 32
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: PUSH
10897: LD_INT 30
10899: PUSH
10900: LD_INT 33
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: PUSH
10907: LD_INT 30
10909: PUSH
10910: LD_INT 4
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 30
10919: PUSH
10920: LD_INT 5
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: PPUSH
10939: CALL_OW 69
10943: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
10944: LD_ADDR_VAR 0 46
10948: PUSH
10949: LD_INT 81
10951: PUSH
10952: LD_VAR 0 1
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: PUSH
10961: LD_INT 21
10963: PUSH
10964: LD_INT 3
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 58
10973: PUSH
10974: EMPTY
10975: LIST
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: LIST
10981: PPUSH
10982: CALL_OW 69
10986: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
10987: LD_VAR 0 45
10991: PUSH
10992: LD_VAR 0 46
10996: AND
10997: IFFALSE 11067
// for i in attackBuildings do
10999: LD_ADDR_VAR 0 14
11003: PUSH
11004: LD_VAR 0 45
11008: PUSH
11009: FOR_IN
11010: IFFALSE 11065
// for j in enemyBuildings do
11012: LD_ADDR_VAR 0 15
11016: PUSH
11017: LD_VAR 0 46
11021: PUSH
11022: FOR_IN
11023: IFFALSE 11061
// if GetDistUnits ( i , j ) < 12 then
11025: LD_VAR 0 14
11029: PPUSH
11030: LD_VAR 0 15
11034: PPUSH
11035: CALL_OW 296
11039: PUSH
11040: LD_INT 12
11042: LESS
11043: IFFALSE 11059
// ComAttackUnit ( i , j ) ;
11045: LD_VAR 0 14
11049: PPUSH
11050: LD_VAR 0 15
11054: PPUSH
11055: CALL_OW 115
11059: GO 11022
11061: POP
11062: POP
11063: GO 11009
11065: POP
11066: POP
// if canRebuild then
11067: LD_VAR 0 12
11071: IFFALSE 11740
// begin tmp = false ;
11073: LD_ADDR_VAR 0 16
11077: PUSH
11078: LD_INT 0
11080: ST_TO_ADDR
// unit = false ;
11081: LD_ADDR_VAR 0 18
11085: PUSH
11086: LD_INT 0
11088: ST_TO_ADDR
// for destroyedBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 250 ] ] ] ) do
11089: LD_ADDR_VAR 0 36
11093: PUSH
11094: LD_VAR 0 4
11098: PPUSH
11099: LD_INT 22
11101: PUSH
11102: LD_VAR 0 1
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: PUSH
11111: LD_INT 21
11113: PUSH
11114: LD_INT 3
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PUSH
11121: LD_INT 3
11123: PUSH
11124: LD_INT 24
11126: PUSH
11127: LD_INT 250
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: LIST
11142: PPUSH
11143: CALL_OW 70
11147: PUSH
11148: FOR_IN
11149: IFFALSE 11251
// begin unit = destroyedBuilding ;
11151: LD_ADDR_VAR 0 18
11155: PUSH
11156: LD_VAR 0 36
11160: ST_TO_ADDR
// for i := 1 to destroyedBuildings / 4 do
11161: LD_ADDR_VAR 0 14
11165: PUSH
11166: DOUBLE
11167: LD_INT 1
11169: DEC
11170: ST_TO_ADDR
11171: LD_VAR 0 35
11175: PUSH
11176: LD_INT 4
11178: DIVREAL
11179: PUSH
11180: FOR_TO
11181: IFFALSE 11247
// if destroyedBuildings [ i + 1 ] = GetX ( destroyedBuilding ) and destroyedBuildings [ i + 2 ] = GetY ( destroyedBuilding ) then
11183: LD_VAR 0 35
11187: PUSH
11188: LD_VAR 0 14
11192: PUSH
11193: LD_INT 1
11195: PLUS
11196: ARRAY
11197: PUSH
11198: LD_VAR 0 36
11202: PPUSH
11203: CALL_OW 250
11207: EQUAL
11208: PUSH
11209: LD_VAR 0 35
11213: PUSH
11214: LD_VAR 0 14
11218: PUSH
11219: LD_INT 2
11221: PLUS
11222: ARRAY
11223: PUSH
11224: LD_VAR 0 36
11228: PPUSH
11229: CALL_OW 251
11233: EQUAL
11234: AND
11235: IFFALSE 11245
// tmp = true ;
11237: LD_ADDR_VAR 0 16
11241: PUSH
11242: LD_INT 1
11244: ST_TO_ADDR
11245: GO 11180
11247: POP
11248: POP
// end ;
11249: GO 11148
11251: POP
11252: POP
// if not tmp and unit then
11253: LD_VAR 0 16
11257: NOT
11258: PUSH
11259: LD_VAR 0 18
11263: AND
11264: IFFALSE 11524
// begin if GetBType ( unit ) = 1 then
11266: LD_VAR 0 18
11270: PPUSH
11271: CALL_OW 266
11275: PUSH
11276: LD_INT 1
11278: EQUAL
11279: IFFALSE 11333
// destroyedBuildings = destroyedBuildings ^ [ 0 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11281: LD_ADDR_VAR 0 35
11285: PUSH
11286: LD_VAR 0 35
11290: PUSH
11291: LD_INT 0
11293: PUSH
11294: LD_VAR 0 18
11298: PPUSH
11299: CALL_OW 250
11303: PUSH
11304: LD_VAR 0 18
11308: PPUSH
11309: CALL_OW 251
11313: PUSH
11314: LD_VAR 0 18
11318: PPUSH
11319: CALL_OW 254
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: ADD
11330: ST_TO_ADDR
11331: GO 11524
// if GetBType ( unit ) = 3 then
11333: LD_VAR 0 18
11337: PPUSH
11338: CALL_OW 266
11342: PUSH
11343: LD_INT 3
11345: EQUAL
11346: IFFALSE 11400
// destroyedBuildings = destroyedBuildings ^ [ 2 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11348: LD_ADDR_VAR 0 35
11352: PUSH
11353: LD_VAR 0 35
11357: PUSH
11358: LD_INT 2
11360: PUSH
11361: LD_VAR 0 18
11365: PPUSH
11366: CALL_OW 250
11370: PUSH
11371: LD_VAR 0 18
11375: PPUSH
11376: CALL_OW 251
11380: PUSH
11381: LD_VAR 0 18
11385: PPUSH
11386: CALL_OW 254
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: ADD
11397: ST_TO_ADDR
11398: GO 11524
// if GetBType ( unit ) = 5 then
11400: LD_VAR 0 18
11404: PPUSH
11405: CALL_OW 266
11409: PUSH
11410: LD_INT 5
11412: EQUAL
11413: IFFALSE 11467
// destroyedBuildings = destroyedBuildings ^ [ 4 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11415: LD_ADDR_VAR 0 35
11419: PUSH
11420: LD_VAR 0 35
11424: PUSH
11425: LD_INT 4
11427: PUSH
11428: LD_VAR 0 18
11432: PPUSH
11433: CALL_OW 250
11437: PUSH
11438: LD_VAR 0 18
11442: PPUSH
11443: CALL_OW 251
11447: PUSH
11448: LD_VAR 0 18
11452: PPUSH
11453: CALL_OW 254
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: ADD
11464: ST_TO_ADDR
11465: GO 11524
// destroyedBuildings = destroyedBuildings ^ [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ;
11467: LD_ADDR_VAR 0 35
11471: PUSH
11472: LD_VAR 0 35
11476: PUSH
11477: LD_VAR 0 18
11481: PPUSH
11482: CALL_OW 266
11486: PUSH
11487: LD_VAR 0 18
11491: PPUSH
11492: CALL_OW 250
11496: PUSH
11497: LD_VAR 0 18
11501: PPUSH
11502: CALL_OW 251
11506: PUSH
11507: LD_VAR 0 18
11511: PPUSH
11512: CALL_OW 254
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: ADD
11523: ST_TO_ADDR
// end ; for constructedBuilding in constructedBuildings do
11524: LD_ADDR_VAR 0 37
11528: PUSH
11529: LD_VAR 0 38
11533: PUSH
11534: FOR_IN
11535: IFFALSE 11738
// for i := 1 to destroyedBuildings / 4 do
11537: LD_ADDR_VAR 0 14
11541: PUSH
11542: DOUBLE
11543: LD_INT 1
11545: DEC
11546: ST_TO_ADDR
11547: LD_VAR 0 35
11551: PUSH
11552: LD_INT 4
11554: DIVREAL
11555: PUSH
11556: FOR_TO
11557: IFFALSE 11734
// if destroyedBuildings [ i + 1 ] = GetX ( constructedBuilding ) and destroyedBuildings [ i + 2 ] = GetY ( constructedBuilding ) and IsOK ( constructedBuilding ) then
11559: LD_VAR 0 35
11563: PUSH
11564: LD_VAR 0 14
11568: PUSH
11569: LD_INT 1
11571: PLUS
11572: ARRAY
11573: PUSH
11574: LD_VAR 0 37
11578: PPUSH
11579: CALL_OW 250
11583: EQUAL
11584: PUSH
11585: LD_VAR 0 35
11589: PUSH
11590: LD_VAR 0 14
11594: PUSH
11595: LD_INT 2
11597: PLUS
11598: ARRAY
11599: PUSH
11600: LD_VAR 0 37
11604: PPUSH
11605: CALL_OW 251
11609: EQUAL
11610: AND
11611: PUSH
11612: LD_VAR 0 37
11616: PPUSH
11617: CALL_OW 302
11621: AND
11622: IFFALSE 11732
// begin destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11624: LD_ADDR_VAR 0 35
11628: PUSH
11629: LD_VAR 0 35
11633: PPUSH
11634: LD_INT 1
11636: PPUSH
11637: CALL_OW 3
11641: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11642: LD_ADDR_VAR 0 35
11646: PUSH
11647: LD_VAR 0 35
11651: PPUSH
11652: LD_INT 1
11654: PPUSH
11655: CALL_OW 3
11659: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11660: LD_ADDR_VAR 0 35
11664: PUSH
11665: LD_VAR 0 35
11669: PPUSH
11670: LD_INT 1
11672: PPUSH
11673: CALL_OW 3
11677: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11678: LD_ADDR_VAR 0 35
11682: PUSH
11683: LD_VAR 0 35
11687: PPUSH
11688: LD_INT 1
11690: PPUSH
11691: CALL_OW 3
11695: ST_TO_ADDR
// if GetType ( constructedBuilding ) in [ b_bunker , b_turret ] then
11696: LD_VAR 0 37
11700: PPUSH
11701: CALL_OW 247
11705: PUSH
11706: LD_INT 32
11708: PUSH
11709: LD_INT 33
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: IN
11716: IFFALSE 11732
// AddComPlaceWeapon ( constructedBuilding , weapons ) ;
11718: LD_VAR 0 37
11722: PPUSH
11723: LD_VAR 0 32
11727: PPUSH
11728: CALL_OW 208
// end ;
11732: GO 11556
11734: POP
11735: POP
11736: GO 11534
11738: POP
11739: POP
// end ; wait ( 0 0$01 ) ;
11740: LD_INT 35
11742: PPUSH
11743: CALL_OW 67
// until not personel ;
11747: LD_VAR 0 19
11751: NOT
11752: IFFALSE 5445
// end ; end_of_file
11754: LD_VAR 0 13
11758: RET
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
11759: LD_INT 0
11761: PPUSH
11762: PPUSH
// if debugMode then
11763: LD_EXP 33
11767: IFFALSE 11784
// unit := NewCharacter ( ident ) ;
11769: LD_ADDR_VAR 0 5
11773: PUSH
11774: LD_VAR 0 1
11778: PPUSH
11779: CALL_OW 25
11783: ST_TO_ADDR
// if exist_mode and not debugMode then
11784: LD_VAR 0 2
11788: PUSH
11789: LD_EXP 33
11793: NOT
11794: AND
11795: IFFALSE 11820
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
11797: LD_ADDR_VAR 0 5
11801: PUSH
11802: LD_EXP 32
11806: PUSH
11807: LD_VAR 0 1
11811: STR
11812: PPUSH
11813: CALL_OW 34
11817: ST_TO_ADDR
11818: GO 11842
// if not debugMode then
11820: LD_EXP 33
11824: NOT
11825: IFFALSE 11842
// unit := NewCharacter ( ident ) ;
11827: LD_ADDR_VAR 0 5
11831: PUSH
11832: LD_VAR 0 1
11836: PPUSH
11837: CALL_OW 25
11841: ST_TO_ADDR
// if class then
11842: LD_VAR 0 3
11846: IFFALSE 11862
// SetClass ( unit , class ) ;
11848: LD_VAR 0 5
11852: PPUSH
11853: LD_VAR 0 3
11857: PPUSH
11858: CALL_OW 336
// result := unit ;
11862: LD_ADDR_VAR 0 4
11866: PUSH
11867: LD_VAR 0 5
11871: ST_TO_ADDR
// end ;
11872: LD_VAR 0 4
11876: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
11877: LD_INT 0
11879: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
11880: LD_VAR 0 1
11884: PPUSH
11885: CALL_OW 255
11889: PUSH
11890: LD_VAR 0 3
11894: EQUAL
11895: PUSH
11896: LD_VAR 0 1
11900: PPUSH
11901: CALL_OW 302
11905: AND
11906: IFFALSE 11928
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
11908: LD_VAR 0 1
11912: PPUSH
11913: LD_EXP 31
11917: PUSH
11918: LD_VAR 0 2
11922: STR
11923: PPUSH
11924: CALL_OW 38
// end ;
11928: LD_VAR 0 4
11932: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
11933: LD_INT 0
11935: PPUSH
11936: PPUSH
11937: PPUSH
// resultCharactersToSave = [ ] ;
11938: LD_ADDR_VAR 0 6
11942: PUSH
11943: EMPTY
11944: ST_TO_ADDR
// for unit in characters do
11945: LD_ADDR_VAR 0 5
11949: PUSH
11950: LD_VAR 0 1
11954: PUSH
11955: FOR_IN
11956: IFFALSE 12004
// if GetSide ( unit ) = side and IsOK ( unit ) then
11958: LD_VAR 0 5
11962: PPUSH
11963: CALL_OW 255
11967: PUSH
11968: LD_VAR 0 3
11972: EQUAL
11973: PUSH
11974: LD_VAR 0 5
11978: PPUSH
11979: CALL_OW 302
11983: AND
11984: IFFALSE 12002
// resultCharactersToSave = resultCharactersToSave ^ unit ;
11986: LD_ADDR_VAR 0 6
11990: PUSH
11991: LD_VAR 0 6
11995: PUSH
11996: LD_VAR 0 5
12000: ADD
12001: ST_TO_ADDR
12002: GO 11955
12004: POP
12005: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
12006: LD_VAR 0 6
12010: PPUSH
12011: LD_EXP 31
12015: PUSH
12016: LD_VAR 0 2
12020: STR
12021: PPUSH
12022: CALL_OW 38
// end ;
12026: LD_VAR 0 4
12030: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
12031: LD_INT 0
12033: PPUSH
12034: PPUSH
// for unit in units do
12035: LD_ADDR_VAR 0 5
12039: PUSH
12040: LD_VAR 0 1
12044: PUSH
12045: FOR_IN
12046: IFFALSE 12069
// PlaceUnitArea ( unit , area , spawnMode ) ;
12048: LD_VAR 0 5
12052: PPUSH
12053: LD_VAR 0 2
12057: PPUSH
12058: LD_VAR 0 3
12062: PPUSH
12063: CALL_OW 49
12067: GO 12045
12069: POP
12070: POP
// end ;
12071: LD_VAR 0 4
12075: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
12076: LD_INT 0
12078: PPUSH
12079: PPUSH
12080: PPUSH
12081: PPUSH
// units = characters ;
12082: LD_ADDR_VAR 0 9
12086: PUSH
12087: LD_VAR 0 1
12091: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod , Kirilenkova ] ;
12092: LD_ADDR_VAR 0 9
12096: PUSH
12097: LD_VAR 0 9
12101: PUSH
12102: LD_EXP 39
12106: PUSH
12107: LD_EXP 40
12111: PUSH
12112: LD_EXP 41
12116: PUSH
12117: LD_EXP 42
12121: PUSH
12122: LD_EXP 43
12126: PUSH
12127: LD_EXP 44
12131: PUSH
12132: LD_EXP 45
12136: PUSH
12137: LD_EXP 46
12141: PUSH
12142: LD_EXP 51
12146: PUSH
12147: LD_EXP 48
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: DIFF
12164: ST_TO_ADDR
// if not units and not canTalkHero then
12165: LD_VAR 0 9
12169: NOT
12170: PUSH
12171: LD_VAR 0 5
12175: NOT
12176: AND
12177: IFFALSE 12181
// exit ;
12179: GO 12354
// if not units then
12181: LD_VAR 0 9
12185: NOT
12186: IFFALSE 12207
// units = characters diff [ Burlak ] ;
12188: LD_ADDR_VAR 0 9
12192: PUSH
12193: LD_VAR 0 1
12197: PUSH
12198: LD_EXP 39
12202: PUSH
12203: EMPTY
12204: LIST
12205: DIFF
12206: ST_TO_ADDR
// if not units and canTalkHero then
12207: LD_VAR 0 9
12211: NOT
12212: PUSH
12213: LD_VAR 0 5
12217: AND
12218: IFFALSE 12222
// exit ;
12220: GO 12354
// speaker := units [ rand ( 1 , units ) ] ;
12222: LD_ADDR_VAR 0 8
12226: PUSH
12227: LD_VAR 0 9
12231: PUSH
12232: LD_INT 1
12234: PPUSH
12235: LD_VAR 0 9
12239: PPUSH
12240: CALL_OW 12
12244: ARRAY
12245: ST_TO_ADDR
// if radio then
12246: LD_VAR 0 4
12250: IFFALSE 12299
// begin if GetSex ( speaker ) = sex_male then
12252: LD_VAR 0 8
12256: PPUSH
12257: CALL_OW 258
12261: PUSH
12262: LD_INT 1
12264: EQUAL
12265: IFFALSE 12283
// SayRadio ( speaker , dialogMID ) else
12267: LD_VAR 0 8
12271: PPUSH
12272: LD_VAR 0 2
12276: PPUSH
12277: CALL_OW 94
12281: GO 12297
// SayRadio ( speaker , dialogFID ) ;
12283: LD_VAR 0 8
12287: PPUSH
12288: LD_VAR 0 3
12292: PPUSH
12293: CALL_OW 94
// end else
12297: GO 12344
// begin if GetSex ( speaker ) = sex_male then
12299: LD_VAR 0 8
12303: PPUSH
12304: CALL_OW 258
12308: PUSH
12309: LD_INT 1
12311: EQUAL
12312: IFFALSE 12330
// Say ( speaker , dialogMID ) else
12314: LD_VAR 0 8
12318: PPUSH
12319: LD_VAR 0 2
12323: PPUSH
12324: CALL_OW 88
12328: GO 12344
// Say ( speaker , dialogFID ) ;
12330: LD_VAR 0 8
12334: PPUSH
12335: LD_VAR 0 3
12339: PPUSH
12340: CALL_OW 88
// end ; result := speaker ;
12344: LD_ADDR_VAR 0 6
12348: PUSH
12349: LD_VAR 0 8
12353: ST_TO_ADDR
// end ;
12354: LD_VAR 0 6
12358: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
12359: LD_INT 0
12361: PPUSH
12362: PPUSH
// dir := GetDir ( bunker ) - 3 ;
12363: LD_ADDR_VAR 0 4
12367: PUSH
12368: LD_VAR 0 2
12372: PPUSH
12373: CALL_OW 254
12377: PUSH
12378: LD_INT 3
12380: MINUS
12381: ST_TO_ADDR
// if dir < 0 then
12382: LD_VAR 0 4
12386: PUSH
12387: LD_INT 0
12389: LESS
12390: IFFALSE 12406
// dir := 6 + dir ;
12392: LD_ADDR_VAR 0 4
12396: PUSH
12397: LD_INT 6
12399: PUSH
12400: LD_VAR 0 4
12404: PLUS
12405: ST_TO_ADDR
// SetDir ( un , dir ) ;
12406: LD_VAR 0 1
12410: PPUSH
12411: LD_VAR 0 4
12415: PPUSH
12416: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
12420: LD_VAR 0 1
12424: PPUSH
12425: LD_VAR 0 2
12429: PPUSH
12430: CALL_OW 52
// result = un ;
12434: LD_ADDR_VAR 0 3
12438: PUSH
12439: LD_VAR 0 1
12443: ST_TO_ADDR
// end ;
12444: LD_VAR 0 3
12448: RET
// export function AddComCaptureBuilding ( engs , building ) ; var eng ; begin
12449: LD_INT 0
12451: PPUSH
12452: PPUSH
// for eng in engs do
12453: LD_ADDR_VAR 0 4
12457: PUSH
12458: LD_VAR 0 1
12462: PUSH
12463: FOR_IN
12464: IFFALSE 12581
// if GetClass ( eng ) = class_engineer and IsOK ( eng ) and building and not GetSide ( building ) = GetSide ( eng ) then
12466: LD_VAR 0 4
12470: PPUSH
12471: CALL_OW 257
12475: PUSH
12476: LD_INT 2
12478: EQUAL
12479: PUSH
12480: LD_VAR 0 4
12484: PPUSH
12485: CALL_OW 302
12489: AND
12490: PUSH
12491: LD_VAR 0 2
12495: AND
12496: PUSH
12497: LD_VAR 0 2
12501: PPUSH
12502: CALL_OW 255
12506: PUSH
12507: LD_VAR 0 4
12511: PPUSH
12512: CALL_OW 255
12516: EQUAL
12517: NOT
12518: AND
12519: IFFALSE 12579
// AddTaskList ( eng , [ [ e , GetX ( building ) , GetY ( building ) , building , 0 , 0 , 0 ] ] ) end ;
12521: LD_VAR 0 4
12525: PPUSH
12526: LD_STRING e
12528: PUSH
12529: LD_VAR 0 2
12533: PPUSH
12534: CALL_OW 250
12538: PUSH
12539: LD_VAR 0 2
12543: PPUSH
12544: CALL_OW 251
12548: PUSH
12549: LD_VAR 0 2
12553: PUSH
12554: LD_INT 0
12556: PUSH
12557: LD_INT 0
12559: PUSH
12560: LD_INT 0
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: PUSH
12572: EMPTY
12573: LIST
12574: PPUSH
12575: CALL_OW 447
12579: GO 12463
12581: POP
12582: POP
12583: LD_VAR 0 3
12587: RET
// export function Delete2D ( tab , firstIndex , secondIndex ) ; var i , list , tabPom ; begin
12588: LD_INT 0
12590: PPUSH
12591: PPUSH
12592: PPUSH
12593: PPUSH
// tabPom := Delete ( tab [ firstIndex ] , secondIndex ) ;
12594: LD_ADDR_VAR 0 7
12598: PUSH
12599: LD_VAR 0 1
12603: PUSH
12604: LD_VAR 0 2
12608: ARRAY
12609: PPUSH
12610: LD_VAR 0 3
12614: PPUSH
12615: CALL_OW 3
12619: ST_TO_ADDR
// tab := Replace ( tab , firstIndex , tabPom ) ;
12620: LD_ADDR_VAR 0 1
12624: PUSH
12625: LD_VAR 0 1
12629: PPUSH
12630: LD_VAR 0 2
12634: PPUSH
12635: LD_VAR 0 7
12639: PPUSH
12640: CALL_OW 1
12644: ST_TO_ADDR
// result := tab ;
12645: LD_ADDR_VAR 0 4
12649: PUSH
12650: LD_VAR 0 1
12654: ST_TO_ADDR
// end ;
12655: LD_VAR 0 4
12659: RET
// export function Nef_PrepareBase ( base_dep , area , name , skill , sources , nation , personel ) ; var i , j , d , b , f , x , un , base , side , buildings , tmp ; begin
12660: LD_INT 0
12662: PPUSH
12663: PPUSH
12664: PPUSH
12665: PPUSH
12666: PPUSH
12667: PPUSH
12668: PPUSH
12669: PPUSH
12670: PPUSH
12671: PPUSH
12672: PPUSH
12673: PPUSH
// result := [ ] ;
12674: LD_ADDR_VAR 0 8
12678: PUSH
12679: EMPTY
12680: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12681: LD_VAR 0 1
12685: PPUSH
12686: CALL_OW 266
12690: PUSH
12691: LD_INT 0
12693: PUSH
12694: LD_INT 1
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: IN
12701: NOT
12702: IFFALSE 12706
// exit ;
12704: GO 14381
// if name then
12706: LD_VAR 0 3
12710: IFFALSE 12726
// SetBName ( base_dep , name ) ;
12712: LD_VAR 0 1
12716: PPUSH
12717: LD_VAR 0 3
12721: PPUSH
12722: CALL_OW 500
// base := GetBase ( base_dep ) ;
12726: LD_ADDR_VAR 0 16
12730: PUSH
12731: LD_VAR 0 1
12735: PPUSH
12736: CALL_OW 274
12740: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12741: LD_ADDR_VAR 0 17
12745: PUSH
12746: LD_VAR 0 1
12750: PPUSH
12751: CALL_OW 255
12755: ST_TO_ADDR
// if sources then
12756: LD_VAR 0 5
12760: IFFALSE 12807
// for i = 1 to 3 do
12762: LD_ADDR_VAR 0 9
12766: PUSH
12767: DOUBLE
12768: LD_INT 1
12770: DEC
12771: ST_TO_ADDR
12772: LD_INT 3
12774: PUSH
12775: FOR_TO
12776: IFFALSE 12805
// AddResourceType ( base , i , sources [ i ] ) ;
12778: LD_VAR 0 16
12782: PPUSH
12783: LD_VAR 0 9
12787: PPUSH
12788: LD_VAR 0 5
12792: PUSH
12793: LD_VAR 0 9
12797: ARRAY
12798: PPUSH
12799: CALL_OW 276
12803: GO 12775
12805: POP
12806: POP
// buildings := GetBaseBuildings ( base , area ) ;
12807: LD_ADDR_VAR 0 18
12811: PUSH
12812: NOP4
12816: PPUSH
12817: NOP4
12821: PPUSH
12822: NOP4
12826: ST_TO_ADDR
// InitHc ;
12827: NOP4
// InitUc ;
12831: NOP4
// uc_side := side ;
12835: LD_ADDR_OWVAR 20
12839: PUSH
12840: NOP4
12844: ST_TO_ADDR
// uc_nation := nation ;
12845: LD_ADDR_OWVAR 21
12849: PUSH
12850: NOP4
12854: ST_TO_ADDR
// if buildings then
12855: NOP4
12859: IFFALSE 14240
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12861: NOP4
12865: PUSH
12866: NOP4
12870: PPUSH
12871: LD_INT 2
12873: PUSH
12874: LD_INT 30
12876: PUSH
12877: LD_INT 29
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: PUSH
12884: LD_INT 30
12886: PUSH
12887: LD_INT 30
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: LIST
12898: PPUSH
12899: NOP4
12903: ST_TO_ADDR
// if tmp then
12904: NOP4
12908: IFFALSE 12956
// for i in tmp do
12910: NOP4
12914: PUSH
12915: NOP4
12919: PUSH
12920: FOR_IN
12921: IFFALSE 12954
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12923: NOP4
12927: PPUSH
12928: NOP4
12932: PPUSH
12933: NOP4
12937: PPUSH
12938: NOP4
12942: PPUSH
12943: NOP4
12947: PPUSH
12948: NOP4
12952: GO 12920
12954: POP
12955: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12956: NOP4
12960: PPUSH
12961: LD_INT 2
12963: PUSH
12964: LD_INT 30
12966: PUSH
12967: LD_INT 31
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: PUSH
12974: LD_INT 30
12976: PUSH
12977: LD_INT 32
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: PUSH
12984: LD_INT 30
12986: PUSH
12987: LD_INT 33
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: PPUSH
13000: NOP4
13004: IFFALSE 13103
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13006: NOP4
13010: PUSH
13011: NOP4
13015: PPUSH
13016: LD_INT 2
13018: PUSH
13019: LD_INT 30
13021: PUSH
13022: LD_INT 31
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: PUSH
13029: LD_INT 30
13031: PUSH
13032: LD_INT 32
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: PUSH
13039: LD_INT 30
13041: PUSH
13042: LD_INT 33
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: PPUSH
13055: NOP4
13059: PUSH
13060: FOR_IN
13061: IFFALSE 13101
// begin if not GetBWeapon ( i ) then
13063: NOP4
13067: PPUSH
13068: NOP4
13072: NOT
13073: IFFALSE 13099
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13075: NOP4
13079: PPUSH
13080: NOP4
13084: PPUSH
13085: NOP4
13089: PPUSH
13090: NOP4
13094: PPUSH
13095: NOP4
// end ;
13099: GO 13060
13101: POP
13102: POP
// end ; for i = 1 to personel do
13103: NOP4
13107: PUSH
13108: DOUBLE
13109: LD_INT 1
13111: DEC
13112: ST_TO_ADDR
13113: NOP4
13117: PUSH
13118: FOR_TO
13119: IFFALSE 14220
// begin if i > 4 then
13121: NOP4
13125: PUSH
13126: LD_INT 4
13128: GREATER
13129: IFFALSE 13133
// break ;
13131: GO 14220
// case i of 1 :
13133: NOP4
13137: PUSH
13138: LD_INT 1
13140: DOUBLE
13141: EQUAL
13142: IFTRUE 13146
13144: GO 13237
13146: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13147: NOP4
13151: PUSH
13152: NOP4
13156: PPUSH
13157: LD_INT 22
13159: PUSH
13160: NOP4
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: LD_INT 58
13171: PUSH
13172: EMPTY
13173: LIST
13174: PUSH
13175: LD_INT 2
13177: PUSH
13178: LD_INT 30
13180: PUSH
13181: LD_INT 31
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 30
13190: PUSH
13191: LD_INT 32
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 30
13200: PUSH
13201: LD_INT 4
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PUSH
13208: LD_INT 30
13210: PUSH
13211: LD_INT 5
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: LIST
13229: PPUSH
13230: NOP4
13234: ST_TO_ADDR
13235: GO 13470
13237: LD_INT 2
13239: DOUBLE
13240: EQUAL
13241: IFTRUE 13245
13243: GO 13307
13245: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13246: NOP4
13250: PUSH
13251: NOP4
13255: PPUSH
13256: LD_INT 22
13258: PUSH
13259: NOP4
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 2
13270: PUSH
13271: LD_INT 30
13273: PUSH
13274: LD_INT 0
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: PUSH
13281: LD_INT 30
13283: PUSH
13284: LD_INT 1
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: LIST
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: PPUSH
13300: NOP4
13304: ST_TO_ADDR
13305: GO 13470
13307: LD_INT 3
13309: DOUBLE
13310: EQUAL
13311: IFTRUE 13315
13313: GO 13388
13315: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_control_tower ] , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13316: NOP4
13320: PUSH
13321: NOP4
13325: PPUSH
13326: LD_INT 22
13328: PUSH
13329: NOP4
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PUSH
13338: LD_INT 2
13340: PUSH
13341: LD_INT 30
13343: PUSH
13344: LD_INT 36
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: PUSH
13351: LD_INT 30
13353: PUSH
13354: LD_INT 2
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PUSH
13361: LD_INT 30
13363: PUSH
13364: LD_INT 3
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: PPUSH
13381: NOP4
13385: ST_TO_ADDR
13386: GO 13470
13388: LD_INT 4
13390: DOUBLE
13391: EQUAL
13392: IFTRUE 13396
13394: GO 13469
13396: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13397: NOP4
13401: PUSH
13402: NOP4
13406: PPUSH
13407: LD_INT 22
13409: PUSH
13410: NOP4
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PUSH
13419: LD_INT 2
13421: PUSH
13422: LD_INT 30
13424: PUSH
13425: LD_INT 6
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: LD_INT 30
13434: PUSH
13435: LD_INT 7
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PUSH
13442: LD_INT 30
13444: PUSH
13445: LD_INT 8
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PPUSH
13462: NOP4
13466: ST_TO_ADDR
13467: GO 13470
13469: POP
// if i = 1 then
13470: NOP4
13474: PUSH
13475: LD_INT 1
13477: EQUAL
13478: IFFALSE 13596
// begin tmp := [ ] ;
13480: NOP4
13484: PUSH
13485: EMPTY
13486: ST_TO_ADDR
// for j in f do
13487: NOP4
13491: PUSH
13492: NOP4
13496: PUSH
13497: FOR_IN
13498: IFFALSE 13578
// if GetBType ( j ) in [ b_breastwork , b_bunker ] then
13500: NOP4
13504: PPUSH
13505: NOP4
13509: PUSH
13510: LD_INT 31
13512: PUSH
13513: LD_INT 32
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: IN
13520: IFFALSE 13547
// tmp := Insert ( tmp , 1 , j ) else
13522: NOP4
13526: PUSH
13527: NOP4
13531: PPUSH
13532: LD_INT 1
13534: PPUSH
13535: NOP4
13539: PPUSH
13540: NOP4
13544: ST_TO_ADDR
13545: GO 13576
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13547: NOP4
13551: PUSH
13552: NOP4
13556: PPUSH
13557: NOP4
13561: PUSH
13562: LD_INT 1
13564: PLUS
13565: PPUSH
13566: NOP4
13570: PPUSH
13571: NOP4
13575: ST_TO_ADDR
13576: GO 13497
13578: POP
13579: POP
// if tmp then
13580: NOP4
13584: IFFALSE 13596
// f := tmp ;
13586: NOP4
13590: PUSH
13591: NOP4
13595: ST_TO_ADDR
// end ; x := personel [ i ] ;
13596: NOP4
13600: PUSH
13601: NOP4
13605: PUSH
13606: NOP4
13610: ARRAY
13611: ST_TO_ADDR
// if x = - 1 then
13612: NOP4
13616: PUSH
13617: LD_INT 1
13619: NEG
13620: EQUAL
13621: IFFALSE 13815
// begin for j in f do
13623: NOP4
13627: PUSH
13628: NOP4
13632: PUSH
13633: FOR_IN
13634: IFFALSE 13811
// repeat InitHc ;
13636: NOP4
// if GetBType ( j ) = b_barracks then
13640: NOP4
13644: PPUSH
13645: NOP4
13649: PUSH
13650: LD_INT 5
13652: EQUAL
13653: IFFALSE 13708
// begin if UnitsInside ( j ) < 3 then
13655: NOP4
13659: PPUSH
13660: NOP4
13664: PUSH
13665: LD_INT 3
13667: LESS
13668: IFFALSE 13689
// PrepareHuman ( false , i , skill ) else
13670: LD_INT 0
13672: PPUSH
13673: NOP4
13677: PPUSH
13678: NOP4
13682: PPUSH
13683: NOP4
13687: GO 13706
// PrepareHuman ( false , i , skill ) ;
13689: LD_INT 0
13691: PPUSH
13692: NOP4
13696: PPUSH
13697: NOP4
13701: PPUSH
13702: NOP4
// end else
13706: GO 13725
// PrepareHuman ( false , i , skill ) ;
13708: LD_INT 0
13710: PPUSH
13711: NOP4
13715: PPUSH
13716: NOP4
13720: PPUSH
13721: NOP4
// un := CreateHuman ;
13725: NOP4
13729: PUSH
13730: NOP4
13734: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13735: NOP4
13739: PUSH
13740: NOP4
13744: PPUSH
13745: LD_INT 1
13747: PPUSH
13748: NOP4
13752: PPUSH
13753: NOP4
13757: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13758: NOP4
13762: PPUSH
13763: NOP4
13767: PPUSH
13768: NOP4
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13772: NOP4
13776: PPUSH
13777: NOP4
13781: PUSH
13782: LD_INT 6
13784: EQUAL
13785: PUSH
13786: NOP4
13790: PPUSH
13791: NOP4
13795: PUSH
13796: LD_INT 32
13798: PUSH
13799: LD_INT 31
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: IN
13806: OR
13807: IFFALSE 13636
13809: GO 13633
13811: POP
13812: POP
// end else
13813: GO 14218
// for j = 1 to x do
13815: NOP4
13819: PUSH
13820: DOUBLE
13821: LD_INT 1
13823: DEC
13824: ST_TO_ADDR
13825: NOP4
13829: PUSH
13830: FOR_TO
13831: IFFALSE 14216
// begin InitHc ;
13833: NOP4
// if not f then
13837: NOP4
13841: NOT
13842: IFFALSE 13931
// begin PrepareHuman ( false , i , skill ) ;
13844: LD_INT 0
13846: PPUSH
13847: NOP4
13851: PPUSH
13852: NOP4
13856: PPUSH
13857: NOP4
// un := CreateHuman ;
13861: NOP4
13865: PUSH
13866: NOP4
13870: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13871: NOP4
13875: PUSH
13876: NOP4
13880: PPUSH
13881: LD_INT 1
13883: PPUSH
13884: NOP4
13888: PPUSH
13889: NOP4
13893: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13894: NOP4
13898: PPUSH
13899: NOP4
13903: PPUSH
13904: NOP4
13908: PPUSH
13909: NOP4
13913: PPUSH
13914: NOP4
13918: PPUSH
13919: LD_INT 10
13921: PPUSH
13922: LD_INT 0
13924: PPUSH
13925: NOP4
// continue ;
13929: GO 13830
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 3 and GetBType ( f [ 1 ] ) = b_control_tower ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13931: NOP4
13935: PUSH
13936: LD_INT 1
13938: ARRAY
13939: PPUSH
13940: NOP4
13944: PUSH
13945: NOP4
13949: PUSH
13950: LD_INT 1
13952: ARRAY
13953: PPUSH
13954: NOP4
13958: PUSH
13959: LD_INT 32
13961: PUSH
13962: LD_INT 31
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: IN
13969: AND
13970: PUSH
13971: NOP4
13975: PUSH
13976: LD_INT 1
13978: ARRAY
13979: PPUSH
13980: NOP4
13984: PUSH
13985: LD_INT 3
13987: EQUAL
13988: PUSH
13989: NOP4
13993: PUSH
13994: LD_INT 1
13996: ARRAY
13997: PPUSH
13998: NOP4
14002: PUSH
14003: LD_INT 36
14005: EQUAL
14006: AND
14007: OR
14008: PUSH
14009: NOP4
14013: PUSH
14014: LD_INT 1
14016: ARRAY
14017: PPUSH
14018: NOP4
14022: PUSH
14023: LD_INT 6
14025: EQUAL
14026: OR
14027: IFFALSE 14047
// f := Delete ( f , 1 ) ;
14029: NOP4
14033: PUSH
14034: NOP4
14038: PPUSH
14039: LD_INT 1
14041: PPUSH
14042: NOP4
14046: ST_TO_ADDR
// if not f then
14047: NOP4
14051: NOT
14052: IFFALSE 14070
// begin x := x + 2 ;
14054: NOP4
14058: PUSH
14059: NOP4
14063: PUSH
14064: LD_INT 2
14066: PLUS
14067: ST_TO_ADDR
// continue ;
14068: GO 13830
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14070: NOP4
14074: PUSH
14075: LD_INT 1
14077: ARRAY
14078: PPUSH
14079: NOP4
14083: PUSH
14084: LD_INT 5
14086: EQUAL
14087: IFFALSE 14146
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14089: NOP4
14093: PUSH
14094: LD_INT 1
14096: ARRAY
14097: PPUSH
14098: NOP4
14102: PUSH
14103: LD_INT 3
14105: LESS
14106: IFFALSE 14127
// PrepareHuman ( false , i , skill ) else
14108: LD_INT 0
14110: PPUSH
14111: NOP4
14115: PPUSH
14116: NOP4
14120: PPUSH
14121: NOP4
14125: GO 14144
// PrepareHuman ( false , i , skill ) ;
14127: LD_INT 0
14129: PPUSH
14130: NOP4
14134: PPUSH
14135: NOP4
14139: PPUSH
14140: NOP4
// end else
14144: GO 14163
// PrepareHuman ( false , i , skill ) ;
14146: LD_INT 0
14148: PPUSH
14149: NOP4
14153: PPUSH
14154: NOP4
14158: PPUSH
14159: NOP4
// un := CreateHuman ;
14163: NOP4
14167: PUSH
14168: NOP4
14172: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14173: NOP4
14177: PUSH
14178: NOP4
14182: PPUSH
14183: LD_INT 1
14185: PPUSH
14186: NOP4
14190: PPUSH
14191: NOP4
14195: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14196: NOP4
14200: PPUSH
14201: NOP4
14205: PUSH
14206: LD_INT 1
14208: ARRAY
14209: PPUSH
14210: NOP4
// end ;
14214: GO 13830
14216: POP
14217: POP
// end ;
14218: GO 13118
14220: POP
14221: POP
// result := result ^ buildings ;
14222: NOP4
14226: PUSH
14227: NOP4
14231: PUSH
14232: NOP4
14236: ADD
14237: ST_TO_ADDR
// end else
14238: GO 14381
// begin for i = 1 to personel do
14240: NOP4
14244: PUSH
14245: DOUBLE
14246: LD_INT 1
14248: DEC
14249: ST_TO_ADDR
14250: NOP4
14254: PUSH
14255: FOR_TO
14256: IFFALSE 14379
// begin if i > 4 then
14258: NOP4
14262: PUSH
14263: LD_INT 4
14265: GREATER
14266: IFFALSE 14270
// break ;
14268: GO 14379
// x := personel [ i ] ;
14270: NOP4
14274: PUSH
14275: NOP4
14279: PUSH
14280: NOP4
14284: ARRAY
14285: ST_TO_ADDR
// if x = - 1 then
14286: NOP4
14290: PUSH
14291: LD_INT 1
14293: NEG
14294: EQUAL
14295: IFFALSE 14299
// continue ;
14297: GO 14255
// PrepareHuman ( false , i , skill ) ;
14299: LD_INT 0
14301: PPUSH
14302: NOP4
14306: PPUSH
14307: NOP4
14311: PPUSH
14312: NOP4
// un := CreateHuman ;
14316: NOP4
14320: PUSH
14321: NOP4
14325: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14326: NOP4
14330: PPUSH
14331: NOP4
14335: PPUSH
14336: NOP4
14340: PPUSH
14341: NOP4
14345: PPUSH
14346: NOP4
14350: PPUSH
14351: LD_INT 10
14353: PPUSH
14354: LD_INT 0
14356: PPUSH
14357: NOP4
// result := result ^ un ;
14361: NOP4
14365: PUSH
14366: NOP4
14370: PUSH
14371: NOP4
14375: ADD
14376: ST_TO_ADDR
// end ;
14377: GO 14255
14379: POP
14380: POP
// end ; end ;
14381: LD_VAR 0 8
14385: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
14386: LD_INT 0
14388: PPUSH
14389: PPUSH
14390: PPUSH
14391: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
14392: NOP4
14396: PUSH
14397: LD_INT 34
14399: PUSH
14400: LD_INT 71
14402: PUSH
14403: LD_INT 70
14405: PUSH
14406: LD_INT 69
14408: PUSH
14409: LD_INT 39
14411: PUSH
14412: LD_INT 31
14414: PUSH
14415: LD_INT 14
14417: PUSH
14418: LD_INT 10
14420: PUSH
14421: LD_INT 40
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: ST_TO_ADDR
// resultWeapons = [ ] ;
14435: NOP4
14439: PUSH
14440: EMPTY
14441: ST_TO_ADDR
// for i := 1 to weaponTechs do
14442: NOP4
14446: PUSH
14447: DOUBLE
14448: LD_INT 1
14450: DEC
14451: ST_TO_ADDR
14452: NOP4
14456: PUSH
14457: FOR_TO
14458: IFFALSE 14645
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
14460: NOP4
14464: PUSH
14465: NOP4
14469: ARRAY
14470: PPUSH
14471: NOP4
14475: PPUSH
14476: NOP4
14480: PUSH
14481: NOP4
14485: PUSH
14486: NOP4
14490: ARRAY
14491: PPUSH
14492: NOP4
14496: PPUSH
14497: NOP4
14501: PUSH
14502: LD_INT 2
14504: EQUAL
14505: AND
14506: IFFALSE 14643
// case nation of nation_american :
14508: NOP4
14512: PUSH
14513: LD_INT 1
14515: DOUBLE
14516: EQUAL
14517: IFTRUE 14521
14519: GO 14556
14521: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
14522: NOP4
14526: PUSH
14527: NOP4
14531: PUSH
14532: NOP4
14536: PUSH
14537: NOP4
14541: ARRAY
14542: PPUSH
14543: NOP4
14547: PPUSH
14548: NOP4
14552: ADD
14553: ST_TO_ADDR
14554: GO 14643
14556: LD_INT 2
14558: DOUBLE
14559: EQUAL
14560: IFTRUE 14564
14562: GO 14599
14564: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
14565: NOP4
14569: PUSH
14570: NOP4
14574: PUSH
14575: NOP4
14579: PUSH
14580: NOP4
14584: ARRAY
14585: PPUSH
14586: NOP4
14590: PPUSH
14591: NOP4
14595: ADD
14596: ST_TO_ADDR
14597: GO 14643
14599: LD_INT 3
14601: DOUBLE
14602: EQUAL
14603: IFTRUE 14607
14605: GO 14642
14607: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
14608: NOP4
14612: PUSH
14613: NOP4
14617: PUSH
14618: NOP4
14622: PUSH
14623: NOP4
14627: ARRAY
14628: PPUSH
14629: NOP4
14633: PPUSH
14634: NOP4
14638: ADD
14639: ST_TO_ADDR
14640: GO 14643
14642: POP
// end ;
14643: GO 14457
14645: POP
14646: POP
// result = resultWeapons ;
14647: NOP4
14651: PUSH
14652: NOP4
14656: ST_TO_ADDR
// end ;
14657: LD_VAR 0 3
14661: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
14662: LD_INT 0
14664: PPUSH
// case tech of tech_AdvMet :
14665: NOP4
14669: PUSH
14670: LD_INT 34
14672: DOUBLE
14673: EQUAL
14674: IFTRUE 14678
14676: GO 14706
14678: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
14679: NOP4
14683: PUSH
14684: LD_INT 6
14686: PUSH
14687: LD_STRING 
14689: PUSH
14690: LD_INT 46
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: LIST
14697: PUSH
14698: NOP4
14702: ARRAY
14703: ST_TO_ADDR
14704: GO 14995
14706: LD_INT 71
14708: DOUBLE
14709: EQUAL
14710: IFTRUE 14714
14712: GO 14742
14714: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
14715: NOP4
14719: PUSH
14720: LD_STRING 
14722: PUSH
14723: LD_STRING 
14725: PUSH
14726: LD_INT 47
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: LIST
14733: PUSH
14734: NOP4
14738: ARRAY
14739: ST_TO_ADDR
14740: GO 14995
14742: LD_INT 70
14744: DOUBLE
14745: EQUAL
14746: IFTRUE 14750
14748: GO 14778
14750: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
14751: NOP4
14755: PUSH
14756: LD_STRING 
14758: PUSH
14759: LD_INT 26
14761: PUSH
14762: LD_STRING 
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: LIST
14769: PUSH
14770: NOP4
14774: ARRAY
14775: ST_TO_ADDR
14776: GO 14995
14778: LD_INT 69
14780: DOUBLE
14781: EQUAL
14782: IFTRUE 14786
14784: GO 14814
14786: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
14787: NOP4
14791: PUSH
14792: LD_INT 4
14794: PUSH
14795: LD_INT 25
14797: PUSH
14798: LD_INT 43
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: LIST
14805: PUSH
14806: NOP4
14810: ARRAY
14811: ST_TO_ADDR
14812: GO 14995
14814: LD_INT 39
14816: DOUBLE
14817: EQUAL
14818: IFTRUE 14822
14820: GO 14850
14822: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
14823: NOP4
14827: PUSH
14828: LD_INT 5
14830: PUSH
14831: LD_INT 27
14833: PUSH
14834: LD_INT 44
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: LIST
14841: PUSH
14842: NOP4
14846: ARRAY
14847: ST_TO_ADDR
14848: GO 14995
14850: LD_INT 31
14852: DOUBLE
14853: EQUAL
14854: IFTRUE 14858
14856: GO 14886
14858: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
14859: NOP4
14863: PUSH
14864: LD_STRING 
14866: PUSH
14867: LD_STRING 
14869: PUSH
14870: LD_INT 49
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: LIST
14877: PUSH
14878: NOP4
14882: ARRAY
14883: ST_TO_ADDR
14884: GO 14995
14886: LD_INT 14
14888: DOUBLE
14889: EQUAL
14890: IFTRUE 14894
14892: GO 14922
14894: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
14895: NOP4
14899: PUSH
14900: LD_INT 10
14902: PUSH
14903: LD_STRING 
14905: PUSH
14906: LD_STRING 
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: LIST
14913: PUSH
14914: NOP4
14918: ARRAY
14919: ST_TO_ADDR
14920: GO 14995
14922: LD_INT 10
14924: DOUBLE
14925: EQUAL
14926: IFTRUE 14930
14928: GO 14958
14930: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
14931: NOP4
14935: PUSH
14936: LD_INT 9
14938: PUSH
14939: LD_STRING 
14941: PUSH
14942: LD_STRING 
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: LIST
14949: PUSH
14950: NOP4
14954: ARRAY
14955: ST_TO_ADDR
14956: GO 14995
14958: LD_INT 40
14960: DOUBLE
14961: EQUAL
14962: IFTRUE 14966
14964: GO 14994
14966: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
14967: NOP4
14971: PUSH
14972: LD_INT 7
14974: PUSH
14975: LD_INT 28
14977: PUSH
14978: LD_INT 45
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: LIST
14985: PUSH
14986: NOP4
14990: ARRAY
14991: ST_TO_ADDR
14992: GO 14995
14994: POP
// end ;
14995: LD_VAR 0 3
14999: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
15000: LD_INT 0
15002: PPUSH
15003: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
15004: NOP4
15008: PUSH
15009: NOP4
15013: PPUSH
15014: LD_INT 1
15016: PPUSH
15017: NOP4
15021: PUSH
15022: NOP4
15026: PPUSH
15027: LD_INT 2
15029: PPUSH
15030: NOP4
15034: PUSH
15035: NOP4
15039: PPUSH
15040: LD_INT 3
15042: PPUSH
15043: NOP4
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: LIST
15052: ST_TO_ADDR
// end ;
15053: LD_VAR 0 2
15057: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
15058: LD_INT 0
15060: PPUSH
15061: PPUSH
// area = ListEnvironmentArea ( area ) ;
15062: NOP4
15066: PUSH
15067: NOP4
15071: PPUSH
15072: NOP4
15076: ST_TO_ADDR
// if bulldozer > 0 then
15077: NOP4
15081: PUSH
15082: LD_INT 0
15084: GREATER
15085: IFFALSE 15196
// for i = area downto 1 do
15087: NOP4
15091: PUSH
15092: DOUBLE
15093: NOP4
15097: INC
15098: ST_TO_ADDR
15099: LD_INT 1
15101: PUSH
15102: FOR_DOWNTO
15103: IFFALSE 15194
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
15105: NOP4
15109: PUSH
15110: NOP4
15114: ARRAY
15115: PUSH
15116: LD_INT 1
15118: ARRAY
15119: PPUSH
15120: NOP4
15124: PUSH
15125: NOP4
15129: ARRAY
15130: PUSH
15131: LD_INT 2
15133: ARRAY
15134: PPUSH
15135: NOP4
15139: IFFALSE 15192
// if not HasTask ( bulldozer ) then
15141: NOP4
15145: PPUSH
15146: NOP4
15150: NOT
15151: IFFALSE 15192
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
15153: NOP4
15157: PPUSH
15158: NOP4
15162: PUSH
15163: NOP4
15167: ARRAY
15168: PUSH
15169: LD_INT 1
15171: ARRAY
15172: PPUSH
15173: NOP4
15177: PUSH
15178: NOP4
15182: ARRAY
15183: PUSH
15184: LD_INT 2
15186: ARRAY
15187: PPUSH
15188: NOP4
15192: GO 15102
15194: POP
15195: POP
// end ;
15196: LD_VAR 0 3
15200: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
15201: LD_INT 0
15203: PPUSH
15204: PPUSH
15205: PPUSH
// uc_side := GetSide ( b ) ;
15206: LD_ADDR_OWVAR 20
15210: PUSH
15211: NOP4
15215: PPUSH
15216: NOP4
15220: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
15221: LD_ADDR_OWVAR 21
15225: PUSH
15226: NOP4
15230: PPUSH
15231: NOP4
15235: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
15236: LD_INT 0
15238: PPUSH
15239: LD_INT 1
15241: PPUSH
15242: NOP4
15246: PPUSH
15247: NOP4
// un = CreateHuman ;
15251: NOP4
15255: PUSH
15256: NOP4
15260: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
15261: NOP4
15265: PUSH
15266: NOP4
15270: PPUSH
15271: NOP4
15275: PUSH
15276: LD_INT 3
15278: MINUS
15279: ST_TO_ADDR
// if dir < 0 then
15280: NOP4
15284: PUSH
15285: LD_INT 0
15287: LESS
15288: IFFALSE 15304
// dir := 6 + dir ;
15290: NOP4
15294: PUSH
15295: LD_INT 6
15297: PUSH
15298: NOP4
15302: PLUS
15303: ST_TO_ADDR
// SetDir ( un , dir ) ;
15304: NOP4
15308: PPUSH
15309: NOP4
15313: PPUSH
15314: NOP4
// PlaceHumanInUnit ( un , b ) ;
15318: NOP4
15322: PPUSH
15323: NOP4
15327: PPUSH
15328: NOP4
// result = un ;
15332: NOP4
15336: PUSH
15337: NOP4
15341: ST_TO_ADDR
// end ;
15342: LD_VAR 0 3
15346: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others , max , test1 , test2 ; begin
15347: LD_INT 0
15349: PPUSH
15350: PPUSH
15351: PPUSH
15352: PPUSH
15353: PPUSH
15354: PPUSH
15355: PPUSH
15356: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Burlak , Vsevolod ] ;
15357: NOP4
15361: PUSH
15362: LD_INT 22
15364: PUSH
15365: LD_INT 3
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PUSH
15372: LD_INT 21
15374: PUSH
15375: LD_INT 1
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PUSH
15382: LD_INT 23
15384: PUSH
15385: LD_INT 3
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: LIST
15396: PPUSH
15397: NOP4
15401: PUSH
15402: NOP4
15406: PUSH
15407: NOP4
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: DIFF
15416: ST_TO_ADDR
// charsToChoose = charsToChoose diff vsevolodTeam ;
15417: NOP4
15421: PUSH
15422: NOP4
15426: PUSH
15427: NOP4
15431: DIFF
15432: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam diff Vsevolod ;
15433: NOP4
15437: PUSH
15438: NOP4
15442: PUSH
15443: NOP4
15447: DIFF
15448: ST_TO_ADDR
// max = charsToChoose div 2 + charsToChoose mod 2 ;
15449: NOP4
15453: PUSH
15454: NOP4
15458: PUSH
15459: LD_INT 2
15461: DIV
15462: PUSH
15463: NOP4
15467: PUSH
15468: LD_INT 2
15470: MOD
15471: PLUS
15472: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 0 , 3 , [ Burlak , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_not_hired ] ^ vsevolodTeam ^ [ sel_not_changeable , Vsevolod ] , [ class_soldier , class_mechanic , class_engineer , class_scientistic ] ) ;
15473: NOP4
15477: PUSH
15478: LD_STRING text
15480: PPUSH
15481: LD_INT 0
15483: PPUSH
15484: LD_INT 3
15486: PPUSH
15487: NOP4
15491: PUSH
15492: LD_INT -3
15494: PUSH
15495: LD_INT -5
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: LIST
15502: PUSH
15503: NOP4
15507: ADD
15508: PUSH
15509: LD_INT -2
15511: PUSH
15512: EMPTY
15513: LIST
15514: ADD
15515: PUSH
15516: NOP4
15520: ADD
15521: PUSH
15522: LD_INT -4
15524: PUSH
15525: NOP4
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: ADD
15534: PPUSH
15535: LD_INT 1
15537: PUSH
15538: LD_INT 3
15540: PUSH
15541: LD_INT 2
15543: PUSH
15544: LD_INT 4
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: PPUSH
15553: NOP4
15557: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) , 6 ) ;
15558: LD_INT 22
15560: PUSH
15561: LD_INT 3
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PUSH
15568: LD_INT 21
15570: PUSH
15571: LD_INT 1
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PUSH
15578: LD_INT 23
15580: PUSH
15581: LD_INT 3
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: LIST
15592: PPUSH
15593: NOP4
15597: PPUSH
15598: LD_INT 6
15600: PPUSH
15601: NOP4
// SetSide ( selectedPeople , 3 ) ;
15605: NOP4
15609: PPUSH
15610: LD_INT 3
15612: PPUSH
15613: NOP4
// SetSide ( Burlak , 3 ) ;
15617: NOP4
15621: PPUSH
15622: LD_INT 3
15624: PPUSH
15625: NOP4
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
15629: NOP4
15633: PUSH
15634: LD_INT 22
15636: PUSH
15637: LD_INT 6
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: PUSH
15644: LD_INT 21
15646: PUSH
15647: LD_INT 1
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PPUSH
15658: NOP4
15662: PUSH
15663: FOR_IN
15664: IFFALSE 15697
// if IsInUnit ( i ) then
15666: NOP4
15670: PPUSH
15671: NOP4
15675: IFFALSE 15695
// begin ComExitVehicle ( i ) ;
15677: NOP4
15681: PPUSH
15682: NOP4
// ComExitBuilding ( i ) ;
15686: NOP4
15690: PPUSH
15691: NOP4
// end ;
15695: GO 15663
15697: POP
15698: POP
// if not Vsevolod in selectedPeople then
15699: NOP4
15703: PUSH
15704: NOP4
15708: IN
15709: NOT
15710: IFFALSE 15727
// ExtSaveCharacter ( Vsevolod , Vsevolod , 6 ) ;
15712: NOP4
15716: PPUSH
15717: LD_STRING Vsevolod
15719: PPUSH
15720: LD_INT 6
15722: PPUSH
15723: NOP4
// if not Karamazov in selectedPeople then
15727: NOP4
15731: PUSH
15732: NOP4
15736: IN
15737: NOT
15738: IFFALSE 15755
// ExtSaveCharacter ( Karamazov , VSKaramazov , 6 ) ;
15740: NOP4
15744: PPUSH
15745: LD_STRING VSKaramazov
15747: PPUSH
15748: LD_INT 6
15750: PPUSH
15751: NOP4
// if not Petrovova in selectedPeople then
15755: NOP4
15759: PUSH
15760: NOP4
15764: IN
15765: NOT
15766: IFFALSE 15783
// ExtSaveCharacter ( Petrovova , VSPetrovova , 6 ) ;
15768: NOP4
15772: PPUSH
15773: LD_STRING VSPetrovova
15775: PPUSH
15776: LD_INT 6
15778: PPUSH
15779: NOP4
// if not Gleb in selectedPeople then
15783: NOP4
15787: PUSH
15788: NOP4
15792: IN
15793: NOT
15794: IFFALSE 15811
// ExtSaveCharacter ( Gleb , VSGleb , 6 ) ;
15796: NOP4
15800: PPUSH
15801: LD_STRING VSGleb
15803: PPUSH
15804: LD_INT 6
15806: PPUSH
15807: NOP4
// if not Petrosyan in selectedPeople then
15811: NOP4
15815: PUSH
15816: NOP4
15820: IN
15821: NOT
15822: IFFALSE 15839
// ExtSaveCharacter ( Petrosyan , VSPetrosyan , 6 ) ;
15824: NOP4
15828: PPUSH
15829: LD_STRING VSPetrosyan
15831: PPUSH
15832: LD_INT 6
15834: PPUSH
15835: NOP4
// if not Titov in selectedPeople then
15839: NOP4
15843: PUSH
15844: NOP4
15848: IN
15849: NOT
15850: IFFALSE 15867
// ExtSaveCharacter ( Titov , VSTitov , 6 ) ;
15852: NOP4
15856: PPUSH
15857: LD_STRING VSTitov
15859: PPUSH
15860: LD_INT 6
15862: PPUSH
15863: NOP4
// if not Dolgov in selectedPeople then
15867: NOP4
15871: PUSH
15872: NOP4
15876: IN
15877: NOT
15878: IFFALSE 15895
// ExtSaveCharacter ( Dolgov , VSDolgov , 6 ) ;
15880: NOP4
15884: PPUSH
15885: LD_STRING VSDolgov
15887: PPUSH
15888: LD_INT 6
15890: PPUSH
15891: NOP4
// if not Lipshchin in selectedPeople then
15895: NOP4
15899: PUSH
15900: NOP4
15904: IN
15905: NOT
15906: IFFALSE 15923
// ExtSaveCharacter ( Lipshchin , VSLipshchin , 6 ) ;
15908: NOP4
15912: PPUSH
15913: LD_STRING VSLipshchin
15915: PPUSH
15916: LD_INT 6
15918: PPUSH
15919: NOP4
// others = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod ] ;
15923: NOP4
15927: PUSH
15928: LD_INT 22
15930: PUSH
15931: LD_INT 6
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: LD_INT 21
15940: PUSH
15941: LD_INT 1
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: PUSH
15948: LD_INT 23
15950: PUSH
15951: LD_INT 3
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: LIST
15962: PPUSH
15963: NOP4
15967: PUSH
15968: NOP4
15972: PUSH
15973: NOP4
15977: PUSH
15978: NOP4
15982: PUSH
15983: NOP4
15987: PUSH
15988: NOP4
15992: PUSH
15993: NOP4
15997: PUSH
15998: NOP4
16002: PUSH
16003: NOP4
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: DIFF
16018: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_vsevolod , 6 ) ;
16019: NOP4
16023: PPUSH
16024: LD_STRING other_survivors_with_vsevolod
16026: PPUSH
16027: LD_INT 6
16029: PPUSH
16030: NOP4
// end ; end_of_file
16034: LD_VAR 0 1
16038: RET
// export function MissionIntro ; var i , ruEng , unit ; begin
16039: LD_INT 0
16041: PPUSH
16042: PPUSH
16043: PPUSH
16044: PPUSH
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) ;
16045: NOP4
16049: PPUSH
16050: NOP4
16054: PPUSH
16055: NOP4
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
16059: NOP4
16063: PUSH
16064: LD_INT 22
16066: PUSH
16067: LD_INT 3
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: PUSH
16074: LD_INT 21
16076: PUSH
16077: LD_INT 2
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: PPUSH
16088: NOP4
16092: PUSH
16093: FOR_IN
16094: IFFALSE 16158
// begin if ( i mod 2 ) = 0 then
16096: NOP4
16100: PUSH
16101: LD_INT 2
16103: MOD
16104: PUSH
16105: LD_INT 0
16107: EQUAL
16108: IFFALSE 16127
// ComMoveXY ( unit , 156 , 205 ) else
16110: NOP4
16114: PPUSH
16115: LD_INT 156
16117: PPUSH
16118: LD_INT 205
16120: PPUSH
16121: NOP4
16125: GO 16142
// ComMoveXY ( unit , 160 , 215 ) ;
16127: NOP4
16131: PPUSH
16132: LD_INT 160
16134: PPUSH
16135: LD_INT 215
16137: PPUSH
16138: NOP4
// i = i + 1 ;
16142: NOP4
16146: PUSH
16147: NOP4
16151: PUSH
16152: LD_INT 1
16154: PLUS
16155: ST_TO_ADDR
// end ;
16156: GO 16093
16158: POP
16159: POP
// if IsOK ( Karamazov ) then
16160: NOP4
16164: PPUSH
16165: NOP4
16169: IFFALSE 16183
// ruEng = Karamazov else
16171: NOP4
16175: PUSH
16176: NOP4
16180: ST_TO_ADDR
16181: GO 16266
// if IsOK ( Lipshchin ) then
16183: NOP4
16187: PPUSH
16188: NOP4
16192: IFFALSE 16206
// ruEng = Lipshchin else
16194: NOP4
16198: PUSH
16199: NOP4
16203: ST_TO_ADDR
16204: GO 16266
// ruEng = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_class , class_engineer ] ] ) [ 1 ] ;
16206: NOP4
16210: PUSH
16211: LD_INT 22
16213: PUSH
16214: LD_INT 3
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PUSH
16221: LD_INT 21
16223: PUSH
16224: LD_INT 1
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PUSH
16231: LD_INT 23
16233: PUSH
16234: LD_INT 3
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: PUSH
16241: LD_INT 25
16243: PUSH
16244: LD_INT 2
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: PPUSH
16257: NOP4
16261: PUSH
16262: LD_INT 1
16264: ARRAY
16265: ST_TO_ADDR
// wait ( 0 0$3 ) ;
16266: LD_INT 105
16268: PPUSH
16269: NOP4
// CenterOnXY ( 160 , 213 ) ;
16273: LD_INT 160
16275: PPUSH
16276: LD_INT 213
16278: PPUSH
16279: NOP4
// wait ( 0 0$3 ) ;
16283: LD_INT 105
16285: PPUSH
16286: NOP4
// CenterOnXY ( 149 , 211 ) ;
16290: LD_INT 149
16292: PPUSH
16293: LD_INT 211
16295: PPUSH
16296: NOP4
// repeat ComMoveXY ( IsInUnit ( ruEng ) , 149 , 212 ) ;
16300: NOP4
16304: PPUSH
16305: NOP4
16309: PPUSH
16310: LD_INT 149
16312: PPUSH
16313: LD_INT 212
16315: PPUSH
16316: NOP4
// wait ( 0 0$1 ) ;
16320: LD_INT 35
16322: PPUSH
16323: NOP4
// until GetDistUnitXY ( IsInUnit ( ruEng ) , 149 , 212 ) <= 2 ;
16327: NOP4
16331: PPUSH
16332: NOP4
16336: PPUSH
16337: LD_INT 149
16339: PPUSH
16340: LD_INT 212
16342: PPUSH
16343: NOP4
16347: PUSH
16348: LD_INT 2
16350: LESSEQUAL
16351: IFFALSE 16300
// ComExitVehicle ( ruEng ) ;
16353: NOP4
16357: PPUSH
16358: NOP4
// wait ( 0 0$1 ) ;
16362: LD_INT 35
16364: PPUSH
16365: NOP4
// AddComCaptureBuilding ( ruEng , rudepot ) ;
16369: NOP4
16373: PPUSH
16374: LD_INT 74
16376: PPUSH
16377: NOP4
// repeat wait ( 0 0$1 ) ;
16381: LD_INT 35
16383: PPUSH
16384: NOP4
// until GetSide ( rudepot ) = 3 ;
16388: LD_INT 74
16390: PPUSH
16391: NOP4
16395: PUSH
16396: LD_INT 3
16398: EQUAL
16399: IFFALSE 16381
// ComEnterUnit ( ruEng , rudepot ) ;
16401: NOP4
16405: PPUSH
16406: LD_INT 74
16408: PPUSH
16409: NOP4
// wait ( 0 0$2 ) ;
16413: LD_INT 70
16415: PPUSH
16416: NOP4
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
16420: LD_INT 22
16422: PUSH
16423: LD_INT 6
16425: PUSH
16426: EMPTY
16427: LIST
16428: LIST
16429: PPUSH
16430: NOP4
16434: PPUSH
16435: LD_INT 3
16437: PPUSH
16438: NOP4
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
16442: NOP4
16446: PUSH
16447: LD_INT 22
16449: PUSH
16450: LD_INT 3
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: PUSH
16457: LD_INT 21
16459: PUSH
16460: LD_INT 1
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PPUSH
16471: NOP4
16475: PUSH
16476: FOR_IN
16477: IFFALSE 16510
// if GetType ( IsInUnit ( unit ) ) = unit_vehicle then
16479: NOP4
16483: PPUSH
16484: NOP4
16488: PPUSH
16489: NOP4
16493: PUSH
16494: LD_INT 2
16496: EQUAL
16497: IFFALSE 16508
// ComExitVehicle ( unit ) ;
16499: NOP4
16503: PPUSH
16504: NOP4
16508: GO 16476
16510: POP
16511: POP
// if ruEng = Karamazov then
16512: NOP4
16516: PUSH
16517: NOP4
16521: EQUAL
16522: IFFALSE 16538
// Say ( Karamazov , DStart-Kar-1 ) else
16524: NOP4
16528: PPUSH
16529: LD_STRING DStart-Kar-1
16531: PPUSH
16532: NOP4
16536: GO 16562
// if ruEng = Lipshchin then
16538: NOP4
16542: PUSH
16543: NOP4
16547: EQUAL
16548: IFFALSE 16562
// Say ( Lipshchin , DStart-Lip-1 ) ;
16550: NOP4
16554: PPUSH
16555: LD_STRING DStart-Lip-1
16557: PPUSH
16558: NOP4
// ComExitBuilding ( ruEng ) ;
16562: NOP4
16566: PPUSH
16567: NOP4
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 250 ] ] ] ) do
16571: NOP4
16575: PUSH
16576: LD_INT 22
16578: PUSH
16579: LD_INT 3
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: PUSH
16586: LD_INT 21
16588: PUSH
16589: LD_INT 3
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: LD_INT 3
16598: PUSH
16599: LD_INT 24
16601: PUSH
16602: LD_INT 250
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: LIST
16617: PPUSH
16618: NOP4
16622: PUSH
16623: FOR_IN
16624: IFFALSE 16677
// AddComRepairBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , unit ) ;
16626: LD_INT 22
16628: PUSH
16629: LD_INT 3
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PUSH
16636: LD_INT 21
16638: PUSH
16639: LD_INT 1
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PUSH
16646: LD_INT 25
16648: PUSH
16649: LD_INT 2
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: LIST
16660: PPUSH
16661: NOP4
16665: PPUSH
16666: NOP4
16670: PPUSH
16671: NOP4
16675: GO 16623
16677: POP
16678: POP
// Say ( Burlak , DStart-Bur-1 ) ;
16679: NOP4
16683: PPUSH
16684: LD_STRING DStart-Bur-1
16686: PPUSH
16687: NOP4
// SayRadio ( Platonov , DStart-Pla-1 ) ;
16691: NOP4
16695: PPUSH
16696: LD_STRING DStart-Pla-1
16698: PPUSH
16699: NOP4
// Say ( Burlak , DStart-Bur-2 ) ;
16703: NOP4
16707: PPUSH
16708: LD_STRING DStart-Bur-2
16710: PPUSH
16711: NOP4
// SayRadio ( Platonov , DStart-Pla-2 ) ;
16715: NOP4
16719: PPUSH
16720: LD_STRING DStart-Pla-2
16722: PPUSH
16723: NOP4
// if IsOK ( Petrovova ) then
16727: NOP4
16731: PPUSH
16732: NOP4
16736: IFFALSE 16750
// Say ( Petrovova , DStart-Ptr-2 ) ;
16738: NOP4
16742: PPUSH
16743: LD_STRING DStart-Ptr-2
16745: PPUSH
16746: NOP4
// InGameOff ;
16750: NOP4
// ChangeMissionObjectives ( MStart ) ;
16754: LD_STRING MStart
16756: PPUSH
16757: NOP4
// SaveForQuickRestart ;
16761: NOP4
// wait ( 0 0$10 ) ;
16765: LD_INT 350
16767: PPUSH
16768: NOP4
// if IsOK ( Petrosyan ) then
16772: NOP4
16776: PPUSH
16777: NOP4
16781: IFFALSE 16797
// Say ( Petrosyan , DMatPrediction-Pty-1 ) else
16783: NOP4
16787: PPUSH
16788: LD_STRING DMatPrediction-Pty-1
16790: PPUSH
16791: NOP4
16795: GO 16820
// if IsOK ( Dolgov ) then
16797: NOP4
16801: PPUSH
16802: NOP4
16806: IFFALSE 16820
// Say ( Dolgov , DMatPrediction-Dol-1 ) ;
16808: NOP4
16812: PPUSH
16813: LD_STRING DMatPrediction-Dol-1
16815: PPUSH
16816: NOP4
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16820: NOP4
16824: PPUSH
16825: NOP4
16829: PUSH
16830: NOP4
16834: PPUSH
16835: NOP4
16839: OR
16840: IFFALSE 16854
// Say ( Burlak , DMatPrediction-Bur-1 ) ;
16842: NOP4
16846: PPUSH
16847: LD_STRING DMatPrediction-Bur-1
16849: PPUSH
16850: NOP4
// if IsOK ( Petrosyan ) then
16854: NOP4
16858: PPUSH
16859: NOP4
16863: IFFALSE 16879
// Say ( Petrosyan , DMatPrediction-Pty-2 ) else
16865: NOP4
16869: PPUSH
16870: LD_STRING DMatPrediction-Pty-2
16872: PPUSH
16873: NOP4
16877: GO 16902
// if IsOK ( Dolgov ) then
16879: NOP4
16883: PPUSH
16884: NOP4
16888: IFFALSE 16902
// Say ( Dolgov , DMatPrediction-Dol-2 ) ;
16890: NOP4
16894: PPUSH
16895: LD_STRING DMatPrediction-Dol-2
16897: PPUSH
16898: NOP4
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16902: NOP4
16906: PPUSH
16907: NOP4
16911: PUSH
16912: NOP4
16916: PPUSH
16917: NOP4
16921: OR
16922: IFFALSE 16936
// Say ( Burlak , DMatPrediction-Bur-2 ) ;
16924: NOP4
16928: PPUSH
16929: LD_STRING DMatPrediction-Bur-2
16931: PPUSH
16932: NOP4
// if IsOK ( Petrosyan ) then
16936: NOP4
16940: PPUSH
16941: NOP4
16945: IFFALSE 16961
// Say ( Petrosyan , DMatPrediction-Pty-3 ) else
16947: NOP4
16951: PPUSH
16952: LD_STRING DMatPrediction-Pty-3
16954: PPUSH
16955: NOP4
16959: GO 16984
// if IsOK ( Dolgov ) then
16961: NOP4
16965: PPUSH
16966: NOP4
16970: IFFALSE 16984
// Say ( Dolgov , DMatPrediction-Dol-3 ) ;
16972: NOP4
16976: PPUSH
16977: LD_STRING DMatPrediction-Dol-3
16979: PPUSH
16980: NOP4
// ChangeMissionObjectives ( MPred ) ;
16984: LD_STRING MPred
16986: PPUSH
16987: NOP4
// end ;
16991: LD_VAR 0 1
16995: RET
// every 0 0$1 trigger not UnitFilter ( ovsyenkoBase , [ f_type , unit_human ] ) do
16996: NOP4
17000: PPUSH
17001: LD_INT 21
17003: PUSH
17004: LD_INT 1
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: PPUSH
17011: NOP4
17015: NOT
17016: IFFALSE 17238
17018: GO 17020
17020: DISABLE
// begin DialogueOn ;
17021: NOP4
// Say ( Burlak , DOvsyenkoTaken-Bur-1 ) ;
17025: NOP4
17029: PPUSH
17030: LD_STRING DOvsyenkoTaken-Bur-1
17032: PPUSH
17033: NOP4
// SayRadio ( Platonov , DOvsyenkoTaken-Pla-1 ) ;
17037: NOP4
17041: PPUSH
17042: LD_STRING DOvsyenkoTaken-Pla-1
17044: PPUSH
17045: NOP4
// if IsOK ( Karamazov ) then
17049: NOP4
17053: PPUSH
17054: NOP4
17058: IFFALSE 17072
// Say ( Karamazov , DOvsyenkoTaken-Kar-1 ) ;
17060: NOP4
17064: PPUSH
17065: LD_STRING DOvsyenkoTaken-Kar-1
17067: PPUSH
17068: NOP4
// if IsOK ( Titov ) then
17072: NOP4
17076: PPUSH
17077: NOP4
17081: IFFALSE 17095
// Say ( Titov , DOvsyenkoTaken-Tit-1 ) ;
17083: NOP4
17087: PPUSH
17088: LD_STRING DOvsyenkoTaken-Tit-1
17090: PPUSH
17091: NOP4
// if IsOK ( Lipshchin ) and ( IsOK ( Karamazov ) or IsOK ( Titov ) ) then
17095: NOP4
17099: PPUSH
17100: NOP4
17104: PUSH
17105: NOP4
17109: PPUSH
17110: NOP4
17114: PUSH
17115: NOP4
17119: PPUSH
17120: NOP4
17124: OR
17125: AND
17126: IFFALSE 17163
// begin Say ( Lipshchin , DOvsyenkoTaken-Lip-1 ) ;
17128: NOP4
17132: PPUSH
17133: LD_STRING DOvsyenkoTaken-Lip-1
17135: PPUSH
17136: NOP4
// if IsOK ( Gleb ) then
17140: NOP4
17144: PPUSH
17145: NOP4
17149: IFFALSE 17163
// Say ( Gleb , DOvsyenkoTaken-Glb-1 ) ;
17151: NOP4
17155: PPUSH
17156: LD_STRING DOvsyenkoTaken-Glb-1
17158: PPUSH
17159: NOP4
// end ; DialogueOff ;
17163: NOP4
// ChangeMissionObjectives ( MOutCapture ) ;
17167: LD_STRING MOutCapture
17169: PPUSH
17170: NOP4
// ChangeMissionObjectives ( MAddMine ) ;
17174: LD_STRING MAddMine
17176: PPUSH
17177: NOP4
// claimOvsyenkoBase = true ;
17181: NOP4
17185: PUSH
17186: LD_INT 1
17188: ST_TO_ADDR
// wait ( 1 1$10 ) ;
17189: LD_INT 2450
17191: PPUSH
17192: NOP4
// InitAIManager ( 1 , 1 , headAmBase , HeadAmericanBaseArea , HeadAmericanHealArea , false , HeadAmericanBaseArea , 6 , 2 , 4 , true , true ) ;
17196: LD_INT 1
17198: PPUSH
17199: LD_INT 1
17201: PPUSH
17202: NOP4
17206: PPUSH
17207: LD_INT 5
17209: PPUSH
17210: LD_INT 9
17212: PPUSH
17213: LD_INT 0
17215: PPUSH
17216: LD_INT 5
17218: PPUSH
17219: LD_INT 6
17221: PPUSH
17222: LD_INT 2
17224: PPUSH
17225: LD_INT 4
17227: PPUSH
17228: LD_INT 1
17230: PPUSH
17231: LD_INT 1
17233: PPUSH
17234: NOP4
// end ;
17238: END
// export function Dial_SibTechs ; begin
17239: LD_INT 0
17241: PPUSH
// dial_SibTechsBlocker = true ;
17242: NOP4
17246: PUSH
17247: LD_INT 1
17249: ST_TO_ADDR
// DialogueOn ;
17250: NOP4
// if IsOK ( Petrosyan ) then
17254: NOP4
17258: PPUSH
17259: NOP4
17263: IFFALSE 17279
// Say ( Petrosyan , DSibResearch-Pty-1 ) else
17265: NOP4
17269: PPUSH
17270: LD_STRING DSibResearch-Pty-1
17272: PPUSH
17273: NOP4
17277: GO 17302
// if IsOK ( Dolgov ) then
17279: NOP4
17283: PPUSH
17284: NOP4
17288: IFFALSE 17302
// Say ( Dolgov , DSibResearch-Dol-1 ) ;
17290: NOP4
17294: PPUSH
17295: LD_STRING DSibResearch-Dol-1
17297: PPUSH
17298: NOP4
// Say ( Burlak , DSibResearch-Bur-1 ) ;
17302: NOP4
17306: PPUSH
17307: LD_STRING DSibResearch-Bur-1
17309: PPUSH
17310: NOP4
// SayRadio ( Platonov , DSibResearch-Pla-1 ) ;
17314: NOP4
17318: PPUSH
17319: LD_STRING DSibResearch-Pla-1
17321: PPUSH
17322: NOP4
// DialogueOff ;
17326: NOP4
// ChangeMissionObjectives ( MResearch ) ;
17330: LD_STRING MResearch
17332: PPUSH
17333: NOP4
// SetRestrict ( b_ext_siberium , 3 , true ) ;
17337: LD_INT 21
17339: PPUSH
17340: LD_INT 3
17342: PPUSH
17343: LD_INT 1
17345: PPUSH
17346: NOP4
// SetRestrict ( b_siberite_power , 3 , true ) ;
17350: LD_INT 28
17352: PPUSH
17353: LD_INT 3
17355: PPUSH
17356: LD_INT 1
17358: PPUSH
17359: NOP4
// SetRestrict ( b_lab_siberium , 3 , true ) ;
17363: LD_INT 11
17365: PPUSH
17366: LD_INT 3
17368: PPUSH
17369: LD_INT 1
17371: PPUSH
17372: NOP4
// SetRestrict ( b_lab_spacetime , 3 , true ) ;
17376: LD_INT 14
17378: PPUSH
17379: LD_INT 3
17381: PPUSH
17382: LD_INT 1
17384: PPUSH
17385: NOP4
// end ;
17389: LD_VAR 0 1
17393: RET
// export function Dial_ResearchMatPredictions ; begin
17394: LD_INT 0
17396: PPUSH
// techMatPredStatus = state_researched ;
17397: NOP4
17401: PUSH
17402: LD_INT 2
17404: ST_TO_ADDR
// ChangeMissionObjectives ( MOutPred ) ;
17405: LD_STRING MOutPred
17407: PPUSH
17408: NOP4
// DialogueOn ;
17412: NOP4
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
17416: NOP4
17420: PPUSH
17421: NOP4
17425: PUSH
17426: NOP4
17430: PPUSH
17431: NOP4
17435: OR
17436: IFFALSE 17558
// begin if IsOK ( Petrosyan ) then
17438: NOP4
17442: PPUSH
17443: NOP4
17447: IFFALSE 17463
// Say ( Petrosyan , DNoMaterial-Pty-1 ) else
17449: NOP4
17453: PPUSH
17454: LD_STRING DNoMaterial-Pty-1
17456: PPUSH
17457: NOP4
17461: GO 17486
// if IsOK ( Dolgov ) then
17463: NOP4
17467: PPUSH
17468: NOP4
17472: IFFALSE 17486
// Say ( Dolgov , DNoMaterial-Dol-1 ) ;
17474: NOP4
17478: PPUSH
17479: LD_STRING DNoMaterial-Dol-1
17481: PPUSH
17482: NOP4
// Say ( Burlak , DNoMaterial-Bur-1 ) ;
17486: NOP4
17490: PPUSH
17491: LD_STRING DNoMaterial-Bur-1
17493: PPUSH
17494: NOP4
// if IsOK ( Petrosyan ) then
17498: NOP4
17502: PPUSH
17503: NOP4
17507: IFFALSE 17523
// Say ( Petrosyan , DNoMaterial-Pty-2 ) else
17509: NOP4
17513: PPUSH
17514: LD_STRING DNoMaterial-Pty-2
17516: PPUSH
17517: NOP4
17521: GO 17546
// if IsOK ( Dolgov ) then
17523: NOP4
17527: PPUSH
17528: NOP4
17532: IFFALSE 17546
// Say ( Dolgov , DNoMaterial-Dol-2 ) ;
17534: NOP4
17538: PPUSH
17539: LD_STRING DNoMaterial-Dol-2
17541: PPUSH
17542: NOP4
// Say ( Burlak , DNoMaterial-Bur-2 ) ;
17546: NOP4
17550: PPUSH
17551: LD_STRING DNoMaterial-Bur-2
17553: PPUSH
17554: NOP4
// end ; DialogueOff ;
17558: NOP4
// end ;
17562: LD_VAR 0 1
17566: RET
// every 0 0$1 trigger not dial_SibTechsBlocker and ( GetResourceVisibility ( 116 , 123 , 3 ) or GetResourceVisibility ( 72 , 86 , 3 ) ) do
17567: NOP4
17571: NOT
17572: PUSH
17573: LD_INT 116
17575: PPUSH
17576: LD_INT 123
17578: PPUSH
17579: LD_INT 3
17581: PPUSH
17582: NOP4
17586: PUSH
17587: LD_INT 72
17589: PPUSH
17590: LD_INT 86
17592: PPUSH
17593: LD_INT 3
17595: PPUSH
17596: NOP4
17600: OR
17601: AND
17602: IFFALSE 17611
17604: GO 17606
17606: DISABLE
// Dial_SibTechs ;
17607: NOP4
17611: END
// every 5 5$0 trigger claimOvsyenkoBase do
17612: NOP4
17616: IFFALSE 17640
17618: GO 17620
17620: DISABLE
// begin PrepareVsevolod ;
17621: NOP4
// ComAgressiveMove ( vsevolodTeam , 61 , 45 ) ;
17625: NOP4
17629: PPUSH
17630: LD_INT 61
17632: PPUSH
17633: LD_INT 45
17635: PPUSH
17636: NOP4
// end ;
17640: END
// every 0 0$1 trigger immortalVsevolodTeam do var unit ;
17641: NOP4
17645: IFFALSE 17683
17647: GO 17649
17649: DISABLE
17650: LD_INT 0
17652: PPUSH
// begin enable ;
17653: ENABLE
// for unit in vsevolodTeam do
17654: NOP4
17658: PUSH
17659: NOP4
17663: PUSH
17664: FOR_IN
17665: IFFALSE 17681
// SetLives ( unit , 1000 ) ;
17667: NOP4
17671: PPUSH
17672: LD_INT 1000
17674: PPUSH
17675: NOP4
17679: GO 17664
17681: POP
17682: POP
// end ;
17683: PPOPN 1
17685: END
// every 0 0$1 trigger GetLives ( ter_bun1 ) <= 650 or GetLives ( ter_arm1 ) <= 650 do var belkovSavedIn02 , tmp , speaker ;
17686: LD_INT 170
17688: PPUSH
17689: NOP4
17693: PUSH
17694: LD_INT 650
17696: LESSEQUAL
17697: PUSH
17698: LD_INT 174
17700: PPUSH
17701: NOP4
17705: PUSH
17706: LD_INT 650
17708: LESSEQUAL
17709: OR
17710: IFFALSE 18871
17712: GO 17714
17714: DISABLE
17715: LD_INT 0
17717: PPUSH
17718: PPUSH
17719: PPUSH
// begin ComMoveXY ( UnitFilter ( terminalBase , [ f_type , unit_human ] ) , 35 , 58 ) ;
17720: NOP4
17724: PPUSH
17725: LD_INT 21
17727: PUSH
17728: LD_INT 1
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PPUSH
17735: NOP4
17739: PPUSH
17740: LD_INT 35
17742: PPUSH
17743: LD_INT 58
17745: PPUSH
17746: NOP4
// SetSide ( UnitFilter ( terminalBase , [ f_type , unit_building ] ) , 6 ) ;
17750: NOP4
17754: PPUSH
17755: LD_INT 21
17757: PUSH
17758: LD_INT 3
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PPUSH
17765: NOP4
17769: PPUSH
17770: LD_INT 6
17772: PPUSH
17773: NOP4
// immortalVsevolodTeam = false ;
17777: NOP4
17781: PUSH
17782: LD_INT 0
17784: ST_TO_ADDR
// ComEnterUnit ( [ Vsevolod , vsevolodTeam [ 3 ] ] , ter_arm1 ) ;
17785: NOP4
17789: PUSH
17790: NOP4
17794: PUSH
17795: LD_INT 3
17797: ARRAY
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PPUSH
17803: LD_INT 174
17805: PPUSH
17806: NOP4
// ComEnterUnit ( vsevolodTeam [ 4 ] , ter_bun1 ) ;
17810: NOP4
17814: PUSH
17815: LD_INT 4
17817: ARRAY
17818: PPUSH
17819: LD_INT 170
17821: PPUSH
17822: NOP4
// SetLives ( Petr , 500 ) ;
17826: NOP4
17830: PPUSH
17831: LD_INT 500
17833: PPUSH
17834: NOP4
// ComEnterUnit ( vsevolodTeam [ 2 ] , terminal ) ;
17838: NOP4
17842: PUSH
17843: LD_INT 2
17845: ARRAY
17846: PPUSH
17847: LD_INT 168
17849: PPUSH
17850: NOP4
// wait ( 0 0$5 ) ;
17854: LD_INT 175
17856: PPUSH
17857: NOP4
// DialogueOn ;
17861: NOP4
// if IsOK ( Dolgov ) then
17865: NOP4
17869: PPUSH
17870: NOP4
17874: IFFALSE 17888
// Say ( Dolgov , DVsevolod-Dol-1 ) ;
17876: NOP4
17880: PPUSH
17881: LD_STRING DVsevolod-Dol-1
17883: PPUSH
17884: NOP4
// SayRadio ( Vsevolod , DVsevolod-Vse-1 ) ;
17888: NOP4
17892: PPUSH
17893: LD_STRING DVsevolod-Vse-1
17895: PPUSH
17896: NOP4
// if IsOK ( Gleb ) then
17900: NOP4
17904: PPUSH
17905: NOP4
17909: IFFALSE 17947
// begin Say ( Burlak , DVsevolod-Bur-1 ) ;
17911: NOP4
17915: PPUSH
17916: LD_STRING DVsevolod-Bur-1
17918: PPUSH
17919: NOP4
// Say ( Gleb , DVsevolod-Glb-1 ) ;
17923: NOP4
17927: PPUSH
17928: LD_STRING DVsevolod-Glb-1
17930: PPUSH
17931: NOP4
// SayRadio ( Vsevolod , DVsevolod-Vse-2 ) ;
17935: NOP4
17939: PPUSH
17940: LD_STRING DVsevolod-Vse-2
17942: PPUSH
17943: NOP4
// end ; Say ( Burlak , DVsevolod-Bur-2 ) ;
17947: NOP4
17951: PPUSH
17952: LD_STRING DVsevolod-Bur-2
17954: PPUSH
17955: NOP4
// SayRadio ( Vsevolod , DVsevolod-Vse-3 ) ;
17959: NOP4
17963: PPUSH
17964: LD_STRING DVsevolod-Vse-3
17966: PPUSH
17967: NOP4
// Say ( Burlak , DVsevolod-Bur-3 ) ;
17971: NOP4
17975: PPUSH
17976: LD_STRING DVsevolod-Bur-3
17978: PPUSH
17979: NOP4
// SayRadio ( Vsevolod , DVsevolod-Vse-4 ) ;
17983: NOP4
17987: PPUSH
17988: LD_STRING DVsevolod-Vse-4
17990: PPUSH
17991: NOP4
// Say ( Burlak , DVsevolod-Bur-4 ) ;
17995: NOP4
17999: PPUSH
18000: LD_STRING DVsevolod-Bur-4
18002: PPUSH
18003: NOP4
// if IsOK ( Gleb ) then
18007: NOP4
18011: PPUSH
18012: NOP4
18016: IFFALSE 18044
// begin Say ( Gleb , DVsevolod-Glb-4 ) ;
18018: NOP4
18022: PPUSH
18023: LD_STRING DVsevolod-Glb-4
18025: PPUSH
18026: NOP4
// Say ( Burlak , DVsevolod-Bur-5 ) ;
18030: NOP4
18034: PPUSH
18035: LD_STRING DVsevolod-Bur-5
18037: PPUSH
18038: NOP4
// end else
18042: GO 18118
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-RSol1-5 ,  , false , true ) ;
18044: LD_INT 22
18046: PUSH
18047: LD_INT 3
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: LD_INT 21
18056: PUSH
18057: LD_INT 1
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: LD_INT 50
18066: PUSH
18067: EMPTY
18068: LIST
18069: PUSH
18070: LD_INT 26
18072: PUSH
18073: LD_INT 1
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: LD_INT 23
18082: PUSH
18083: LD_INT 3
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: PPUSH
18097: NOP4
18101: PPUSH
18102: LD_STRING DVsevolod-RSol1-5
18104: PPUSH
18105: LD_STRING 
18107: PPUSH
18108: LD_INT 0
18110: PPUSH
18111: LD_INT 1
18113: PPUSH
18114: NOP4
// Say ( Burlak , DVsevolod-Bur-6 ) ;
18118: NOP4
18122: PPUSH
18123: LD_STRING DVsevolod-Bur-6
18125: PPUSH
18126: NOP4
// CenterOnXY ( 59 , 40 ) ;
18130: LD_INT 59
18132: PPUSH
18133: LD_INT 40
18135: PPUSH
18136: NOP4
// RevealFogArea ( 3 , TerminalBaseArea ) ;
18140: LD_INT 3
18142: PPUSH
18143: LD_INT 4
18145: PPUSH
18146: NOP4
// if IsOK ( Dolgov ) then
18150: NOP4
18154: PPUSH
18155: NOP4
18159: IFFALSE 18175
// Say ( Dolgov , DVsevolod-Dol-6 ) else
18161: NOP4
18165: PPUSH
18166: LD_STRING DVsevolod-Dol-6
18168: PPUSH
18169: NOP4
18173: GO 18249
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-Dol-6 ,  , false , true ) ;
18175: LD_INT 22
18177: PUSH
18178: LD_INT 3
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: LD_INT 21
18187: PUSH
18188: LD_INT 1
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 50
18197: PUSH
18198: EMPTY
18199: LIST
18200: PUSH
18201: LD_INT 26
18203: PUSH
18204: LD_INT 1
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 23
18213: PUSH
18214: LD_INT 3
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: PPUSH
18228: NOP4
18232: PPUSH
18233: LD_STRING DVsevolod-Dol-6
18235: PPUSH
18236: LD_STRING 
18238: PPUSH
18239: LD_INT 0
18241: PPUSH
18242: LD_INT 1
18244: PPUSH
18245: NOP4
// Say ( Burlak , DVsevolod-Bur-7 ) ;
18249: NOP4
18253: PPUSH
18254: LD_STRING DVsevolod-Bur-7
18256: PPUSH
18257: NOP4
// SayRadio ( Vsevolod , DVsevolod-Vse-7 ) ;
18261: NOP4
18265: PPUSH
18266: LD_STRING DVsevolod-Vse-7
18268: PPUSH
18269: NOP4
// DialogueOff ;
18273: NOP4
// ChangeMissionObjectives ( MVsevolod ) ;
18277: LD_STRING MVsevolod
18279: PPUSH
18280: NOP4
// enableVsevolodCounter = true ;
18284: NOP4
18288: PUSH
18289: LD_INT 1
18291: ST_TO_ADDR
// canGoNorth = true ;
18292: NOP4
18296: PUSH
18297: LD_INT 1
18299: ST_TO_ADDR
// PrepareSoldiersInBunkers ;
18300: NOP4
// wait ( 0 0$7 ) ;
18304: LD_INT 245
18306: PPUSH
18307: NOP4
// belkovSavedIn02 = TestCharacters ( 02_Belkov ) ;
18311: NOP4
18315: PUSH
18316: LD_STRING 02_Belkov
18318: PPUSH
18319: NOP4
18323: ST_TO_ADDR
// DialogueOn ;
18324: NOP4
// if belkovSavedIn02 then
18328: NOP4
18332: IFFALSE 18533
// begin if IsOK ( Gleb ) then
18334: NOP4
18338: PPUSH
18339: NOP4
18343: IFFALSE 18357
// Say ( Gleb , DHelp1-Glb-1 ) ;
18345: NOP4
18349: PPUSH
18350: LD_STRING DHelp1-Glb-1
18352: PPUSH
18353: NOP4
// if IsOK ( Dolgov ) then
18357: NOP4
18361: PPUSH
18362: NOP4
18366: IFFALSE 18380
// Say ( Dolgov , DHelp1-Dol-1 ) ;
18368: NOP4
18372: PPUSH
18373: LD_STRING DHelp1-Dol-1
18375: PPUSH
18376: NOP4
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Gleb , Dolgov , Titov ] ;
18380: NOP4
18384: PUSH
18385: LD_INT 22
18387: PUSH
18388: LD_INT 3
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 21
18397: PUSH
18398: LD_INT 1
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: LD_INT 50
18407: PUSH
18408: EMPTY
18409: LIST
18410: PUSH
18411: LD_INT 26
18413: PUSH
18414: LD_INT 1
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 23
18423: PUSH
18424: LD_INT 3
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: PPUSH
18438: NOP4
18442: PUSH
18443: NOP4
18447: PUSH
18448: NOP4
18452: PUSH
18453: NOP4
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: LIST
18462: DIFF
18463: ST_TO_ADDR
// DialogRandom ( tmp , DHelp1-RSol1-1 ,  , false , true ) ;
18464: NOP4
18468: PPUSH
18469: LD_STRING DHelp1-RSol1-1
18471: PPUSH
18472: LD_STRING 
18474: PPUSH
18475: LD_INT 0
18477: PPUSH
18478: LD_INT 1
18480: PPUSH
18481: NOP4
// if IsOK ( Titov ) then
18485: NOP4
18489: PPUSH
18490: NOP4
18494: IFFALSE 18508
// Say ( Titov , DHelp1-Tit-1 ) ;
18496: NOP4
18500: PPUSH
18501: LD_STRING DHelp1-Tit-1
18503: PPUSH
18504: NOP4
// if IsOK ( Gleb ) then
18508: NOP4
18512: PPUSH
18513: NOP4
18517: IFFALSE 18531
// Say ( Gleb , DHelp1-Glb-2 ) ;
18519: NOP4
18523: PPUSH
18524: LD_STRING DHelp1-Glb-2
18526: PPUSH
18527: NOP4
// end else
18531: GO 18744
// begin if IsOK ( Titov ) then
18533: NOP4
18537: PPUSH
18538: NOP4
18542: IFFALSE 18556
// Say ( Titov , DHelp2-Tit-1 ) ;
18544: NOP4
18548: PPUSH
18549: LD_STRING DHelp2-Tit-1
18551: PPUSH
18552: NOP4
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Gleb , Titov ] ;
18556: NOP4
18560: PUSH
18561: LD_INT 22
18563: PUSH
18564: LD_INT 3
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: LD_INT 21
18573: PUSH
18574: LD_INT 1
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PUSH
18581: LD_INT 50
18583: PUSH
18584: EMPTY
18585: LIST
18586: PUSH
18587: LD_INT 26
18589: PUSH
18590: LD_INT 1
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 23
18599: PUSH
18600: LD_INT 3
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: PPUSH
18614: NOP4
18618: PUSH
18619: NOP4
18623: PUSH
18624: NOP4
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: DIFF
18633: ST_TO_ADDR
// speaker = DialogRandom ( tmp , DHelp2-RSol1-1 ,  , false , true ) ;
18634: NOP4
18638: PUSH
18639: NOP4
18643: PPUSH
18644: LD_STRING DHelp2-RSol1-1
18646: PPUSH
18647: LD_STRING 
18649: PPUSH
18650: LD_INT 0
18652: PPUSH
18653: LD_INT 1
18655: PPUSH
18656: NOP4
18660: ST_TO_ADDR
// if IsOK ( Gleb ) then
18661: NOP4
18665: PPUSH
18666: NOP4
18670: IFFALSE 18684
// Say ( Gleb , DHelp2-Glb-1 ) ;
18672: NOP4
18676: PPUSH
18677: LD_STRING DHelp2-Glb-1
18679: PPUSH
18680: NOP4
// tmp = tmp diff speaker ;
18684: NOP4
18688: PUSH
18689: NOP4
18693: PUSH
18694: NOP4
18698: DIFF
18699: ST_TO_ADDR
// DialogRandom ( tmp , DHelp2-RSol2-1 ,  , false , true ) ;
18700: NOP4
18704: PPUSH
18705: LD_STRING DHelp2-RSol2-1
18707: PPUSH
18708: LD_STRING 
18710: PPUSH
18711: LD_INT 0
18713: PPUSH
18714: LD_INT 1
18716: PPUSH
18717: NOP4
// if IsOK ( Titov ) then
18721: NOP4
18725: PPUSH
18726: NOP4
18730: IFFALSE 18744
// Say ( Titov , DHelp2-Tit-2 ) ;
18732: NOP4
18736: PPUSH
18737: LD_STRING DHelp2-Tit-2
18739: PPUSH
18740: NOP4
// end ; Say ( Burlak , DHelp3-Bur-1 ) ;
18744: NOP4
18748: PPUSH
18749: LD_STRING DHelp3-Bur-1
18751: PPUSH
18752: NOP4
// if IsOK ( Lipshchin ) then
18756: NOP4
18760: PPUSH
18761: NOP4
18765: IFFALSE 18781
// Say ( Lipshchin , DHelp3-Lip-1 ) else
18767: NOP4
18771: PPUSH
18772: LD_STRING DHelp3-Lip-1
18774: PPUSH
18775: NOP4
18779: GO 18855
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-Dol-6 ,  , false , true ) ;
18781: LD_INT 22
18783: PUSH
18784: LD_INT 3
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 21
18793: PUSH
18794: LD_INT 1
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: LD_INT 50
18803: PUSH
18804: EMPTY
18805: LIST
18806: PUSH
18807: LD_INT 26
18809: PUSH
18810: LD_INT 1
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 23
18819: PUSH
18820: LD_INT 3
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: PPUSH
18834: NOP4
18838: PPUSH
18839: LD_STRING DVsevolod-Dol-6
18841: PPUSH
18842: LD_STRING 
18844: PPUSH
18845: LD_INT 0
18847: PPUSH
18848: LD_INT 1
18850: PPUSH
18851: NOP4
// Say ( Burlak , DHelp3-Bur-2 ) ;
18855: NOP4
18859: PPUSH
18860: LD_STRING DHelp3-Bur-2
18862: PPUSH
18863: NOP4
// DialogueOff ;
18867: NOP4
// end ;
18871: PPOPN 3
18873: END
// every 0 0$1 trigger claimOvsyenkoBase and not FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] , [ f_type , unit_vehicle ] ] ] ) and FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
18874: NOP4
18878: PUSH
18879: LD_INT 3
18881: PPUSH
18882: LD_INT 22
18884: PUSH
18885: LD_INT 3
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PUSH
18892: LD_INT 2
18894: PUSH
18895: LD_INT 21
18897: PUSH
18898: LD_INT 1
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 59
18907: PUSH
18908: EMPTY
18909: LIST
18910: PUSH
18911: LD_INT 21
18913: PUSH
18914: LD_INT 2
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PPUSH
18931: NOP4
18935: NOT
18936: AND
18937: PUSH
18938: LD_INT 3
18940: PPUSH
18941: LD_INT 22
18943: PUSH
18944: LD_INT 1
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 2
18953: PUSH
18954: LD_INT 21
18956: PUSH
18957: LD_INT 1
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 21
18966: PUSH
18967: LD_INT 2
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: LIST
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PPUSH
18983: NOP4
18987: AND
18988: IFFALSE 19155
18990: GO 18992
18992: DISABLE
// begin lostAgainBase = true ;
18993: NOP4
18997: PUSH
18998: LD_INT 1
19000: ST_TO_ADDR
// SetSide ( FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , 1 ) ;
19001: LD_INT 3
19003: PPUSH
19004: LD_INT 22
19006: PUSH
19007: LD_INT 3
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 21
19016: PUSH
19017: LD_INT 3
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PPUSH
19028: NOP4
19032: PPUSH
19033: LD_INT 1
19035: PPUSH
19036: NOP4
// if IsOK ( Gleb ) then
19040: NOP4
19044: PPUSH
19045: NOP4
19049: IFFALSE 19075
// begin Say ( Gleb , DOvsyenkoCaptured-Glb-1 ) ;
19051: NOP4
19055: PPUSH
19056: LD_STRING DOvsyenkoCaptured-Glb-1
19058: PPUSH
19059: NOP4
// Say ( Burlak , DOvsyenkoCaptured-Bur-1 ) ;
19063: NOP4
19067: PPUSH
19068: LD_STRING DOvsyenkoCaptured-Bur-1
19070: PPUSH
19071: NOP4
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Gleb , DOvsyenkoCaptured-RSol1-1 ,  , false , true ) ;
19075: LD_INT 22
19077: PUSH
19078: LD_INT 3
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 21
19087: PUSH
19088: LD_INT 1
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 50
19097: PUSH
19098: EMPTY
19099: LIST
19100: PUSH
19101: LD_INT 26
19103: PUSH
19104: LD_INT 1
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 23
19113: PUSH
19114: LD_INT 3
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: PPUSH
19128: NOP4
19132: PUSH
19133: NOP4
19137: DIFF
19138: PPUSH
19139: LD_STRING DOvsyenkoCaptured-RSol1-1
19141: PPUSH
19142: LD_STRING 
19144: PPUSH
19145: LD_INT 0
19147: PPUSH
19148: LD_INT 1
19150: PPUSH
19151: NOP4
// end ;
19155: END
// every 0 0$1 trigger FilterUnitsInArea ( TrapArea , [ [ f_side , 3 ] , [ f_ok ] ] ) do
19156: LD_INT 12
19158: PPUSH
19159: LD_INT 22
19161: PUSH
19162: LD_INT 3
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 50
19171: PUSH
19172: EMPTY
19173: LIST
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PPUSH
19179: NOP4
19183: IFFALSE 19192
19185: GO 19187
19187: DISABLE
// PrepareTrap ;
19188: NOP4
19192: END
// every 0 0$1 trigger not dial_TrapDialogBlocker do var tmp , speaker , unit ;
19193: NOP4
19197: NOT
19198: IFFALSE 19416
19200: GO 19202
19202: DISABLE
19203: LD_INT 0
19205: PPUSH
19206: PPUSH
19207: PPUSH
// begin enable ;
19208: ENABLE
// for unit in trapTeam do
19209: NOP4
19213: PUSH
19214: NOP4
19218: PUSH
19219: FOR_IN
19220: IFFALSE 19414
// if See ( 3 , unit ) then
19222: LD_INT 3
19224: PPUSH
19225: NOP4
19229: PPUSH
19230: NOP4
19234: IFFALSE 19412
// begin dial_TrapDialogBlocker = true ;
19236: NOP4
19240: PUSH
19241: LD_INT 1
19243: ST_TO_ADDR
// DialogueOn ;
19244: NOP4
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Gleb ;
19248: NOP4
19252: PUSH
19253: LD_INT 22
19255: PUSH
19256: LD_INT 3
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: LD_INT 21
19265: PUSH
19266: LD_INT 1
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 50
19275: PUSH
19276: EMPTY
19277: LIST
19278: PUSH
19279: LD_INT 26
19281: PUSH
19282: LD_INT 1
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 23
19291: PUSH
19292: LD_INT 3
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: PPUSH
19306: NOP4
19310: PUSH
19311: NOP4
19315: DIFF
19316: ST_TO_ADDR
// speaker = DialogRandom ( tmp , DPartyAttacked-RSol1-1 ,  , false , true ) ;
19317: NOP4
19321: PUSH
19322: NOP4
19326: PPUSH
19327: LD_STRING DPartyAttacked-RSol1-1
19329: PPUSH
19330: LD_STRING 
19332: PPUSH
19333: LD_INT 0
19335: PPUSH
19336: LD_INT 1
19338: PPUSH
19339: NOP4
19343: ST_TO_ADDR
// tmp = tmp diff speaker ;
19344: NOP4
19348: PUSH
19349: NOP4
19353: PUSH
19354: NOP4
19358: DIFF
19359: ST_TO_ADDR
// if IsOK ( Gleb ) then
19360: NOP4
19364: PPUSH
19365: NOP4
19369: IFFALSE 19383
// Say ( Gleb , DPartyAttacked-Glb-1 ) ;
19371: NOP4
19375: PPUSH
19376: LD_STRING DPartyAttacked-Glb-1
19378: PPUSH
19379: NOP4
// DialogRandom ( tmp , DPartyAttacked-RSol1-2 ,  , false , true ) ;
19383: NOP4
19387: PPUSH
19388: LD_STRING DPartyAttacked-RSol1-2
19390: PPUSH
19391: LD_STRING 
19393: PPUSH
19394: LD_INT 0
19396: PPUSH
19397: LD_INT 1
19399: PPUSH
19400: NOP4
// DialogueOff ;
19404: NOP4
// exit ;
19408: POP
19409: POP
19410: GO 19416
// end ;
19412: GO 19219
19414: POP
19415: POP
// end ;
19416: PPOPN 3
19418: END
// every 0 0$1 trigger not savedVsevolod and IsOK ( Vsevolod ) and FilterUnitsInArea ( TerminalBaseArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ [ f_type , unit_human ] , [ f_nation , nation_russian ] ] , [ f_type , unit_vehicle ] ] ] ) do var nearUnit , unit , maleRandomUnits ;
19419: NOP4
19423: NOT
19424: PUSH
19425: NOP4
19429: PPUSH
19430: NOP4
19434: AND
19435: PUSH
19436: LD_INT 4
19438: PPUSH
19439: LD_INT 22
19441: PUSH
19442: LD_INT 3
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PUSH
19449: LD_INT 50
19451: PUSH
19452: EMPTY
19453: LIST
19454: PUSH
19455: LD_INT 2
19457: PUSH
19458: LD_INT 21
19460: PUSH
19461: LD_INT 1
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 23
19470: PUSH
19471: LD_INT 3
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 21
19484: PUSH
19485: LD_INT 2
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: LIST
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: LIST
19501: PPUSH
19502: NOP4
19506: AND
19507: IFFALSE 20149
19509: GO 19511
19511: DISABLE
19512: LD_INT 0
19514: PPUSH
19515: PPUSH
19516: PPUSH
// begin savedVsevolod = true ;
19517: NOP4
19521: PUSH
19522: LD_INT 1
19524: ST_TO_ADDR
// ChangeMissionObjectives ( MVsevolodOut ) ;
19525: LD_STRING MVsevolodOut
19527: PPUSH
19528: NOP4
// unit = FilterUnitsInArea ( TerminalBaseArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ [ f_type , unit_human ] , [ f_nation , nation_russian ] ] , [ f_type , unit_vehicle ] ] ] ) ;
19532: NOP4
19536: PUSH
19537: LD_INT 4
19539: PPUSH
19540: LD_INT 22
19542: PUSH
19543: LD_INT 3
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: LD_INT 50
19552: PUSH
19553: EMPTY
19554: LIST
19555: PUSH
19556: LD_INT 2
19558: PUSH
19559: LD_INT 21
19561: PUSH
19562: LD_INT 1
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 23
19571: PUSH
19572: LD_INT 3
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 21
19585: PUSH
19586: LD_INT 2
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: LIST
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: LIST
19602: PPUSH
19603: NOP4
19607: ST_TO_ADDR
// unit = unit [ 1 ] ;
19608: NOP4
19612: PUSH
19613: NOP4
19617: PUSH
19618: LD_INT 1
19620: ARRAY
19621: ST_TO_ADDR
// if GetType ( unit ) = unit_vehicle then
19622: NOP4
19626: PPUSH
19627: NOP4
19631: PUSH
19632: LD_INT 2
19634: EQUAL
19635: IFFALSE 19656
// unit = UnitsInside ( unit ) [ 1 ] ;
19637: NOP4
19641: PUSH
19642: NOP4
19646: PPUSH
19647: NOP4
19651: PUSH
19652: LD_INT 1
19654: ARRAY
19655: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
19656: LD_INT 22
19658: PUSH
19659: LD_INT 6
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PPUSH
19666: NOP4
19670: PPUSH
19671: LD_INT 3
19673: PPUSH
19674: NOP4
// if not unit = Burlak then
19678: NOP4
19682: PUSH
19683: NOP4
19687: EQUAL
19688: NOT
19689: IFFALSE 19866
// begin vsevolodWaitGorky = true ;
19691: NOP4
19695: PUSH
19696: LD_INT 1
19698: ST_TO_ADDR
// DialogueOn ;
19699: NOP4
// Say ( Vsevolod , DOtherMeetVsev-Vse-1 ) ;
19703: NOP4
19707: PPUSH
19708: LD_STRING DOtherMeetVsev-Vse-1
19710: PPUSH
19711: NOP4
// if GetSex ( unit ) = sex_female then
19715: NOP4
19719: PPUSH
19720: NOP4
19724: PUSH
19725: LD_INT 2
19727: EQUAL
19728: IFFALSE 19848
// begin maleRandomUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff vsevolodTeam ;
19730: NOP4
19734: PUSH
19735: LD_INT 22
19737: PUSH
19738: LD_INT 3
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: LD_INT 21
19747: PUSH
19748: LD_INT 1
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 50
19757: PUSH
19758: EMPTY
19759: LIST
19760: PUSH
19761: LD_INT 26
19763: PUSH
19764: LD_INT 1
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 23
19773: PUSH
19774: LD_INT 3
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: PPUSH
19788: NOP4
19792: PUSH
19793: NOP4
19797: DIFF
19798: ST_TO_ADDR
// maleRandomUnits = maleRandomUnits diff Gleb ;
19799: NOP4
19803: PUSH
19804: NOP4
19808: PUSH
19809: NOP4
19813: DIFF
19814: ST_TO_ADDR
// if maleRandomUnits then
19815: NOP4
19819: IFFALSE 19846
// DialogRandom ( maleRandomUnits [ 1 ] , DOtherMeetVsev-RSol1-1 ,  , false , true ) ;
19821: NOP4
19825: PUSH
19826: LD_INT 1
19828: ARRAY
19829: PPUSH
19830: LD_STRING DOtherMeetVsev-RSol1-1
19832: PPUSH
19833: LD_STRING 
19835: PPUSH
19836: LD_INT 0
19838: PPUSH
19839: LD_INT 1
19841: PPUSH
19842: NOP4
// end else
19846: GO 19860
// Say ( unit , DOtherMeetVsev-RSol1-1 ) ;
19848: NOP4
19852: PPUSH
19853: LD_STRING DOtherMeetVsev-RSol1-1
19855: PPUSH
19856: NOP4
// DialogueOff ;
19860: NOP4
// end else
19864: GO 20149
// begin DialogueOn ;
19866: NOP4
// Say ( Vsevolod , DMeetVsev-Vse-1 ) ;
19870: NOP4
19874: PPUSH
19875: LD_STRING DMeetVsev-Vse-1
19877: PPUSH
19878: NOP4
// Say ( Burlak , DMeetVsev-Bur-1 ) ;
19882: NOP4
19886: PPUSH
19887: LD_STRING DMeetVsev-Bur-1
19889: PPUSH
19890: NOP4
// if lostAgainBase then
19894: NOP4
19898: IFFALSE 19938
// begin Say ( Vsevolod , DMeetVsev2-Vse-1 ) ;
19900: NOP4
19904: PPUSH
19905: LD_STRING DMeetVsev2-Vse-1
19907: PPUSH
19908: NOP4
// Say ( Burlak , DMeetVsev2-Bur-1 ) ;
19912: NOP4
19916: PPUSH
19917: LD_STRING DMeetVsev2-Bur-1
19919: PPUSH
19920: NOP4
// Say ( Vsevolod , DMeetVsev2-Vse-2 ) ;
19924: NOP4
19928: PPUSH
19929: LD_STRING DMeetVsev2-Vse-2
19931: PPUSH
19932: NOP4
// end else
19936: GO 19974
// begin Say ( Vsevolod , DMeetVsev2-Vse-2a ) ;
19938: NOP4
19942: PPUSH
19943: LD_STRING DMeetVsev2-Vse-2a
19945: PPUSH
19946: NOP4
// Say ( Burlak , DMeetVsev2-Bur-2 ) ;
19950: NOP4
19954: PPUSH
19955: LD_STRING DMeetVsev2-Bur-2
19957: PPUSH
19958: NOP4
// Say ( Vsevolod , DMeetVsev2-Vse-3 ) ;
19962: NOP4
19966: PPUSH
19967: LD_STRING DMeetVsev2-Vse-3
19969: PPUSH
19970: NOP4
// end ; Say ( Burlak , DMeetVsev3-Bur-1 ) ;
19974: NOP4
19978: PPUSH
19979: LD_STRING DMeetVsev3-Bur-1
19981: PPUSH
19982: NOP4
// Say ( Vsevolod , DMeetVsev3-Vse-1 ) ;
19986: NOP4
19990: PPUSH
19991: LD_STRING DMeetVsev3-Vse-1
19993: PPUSH
19994: NOP4
// Say ( Burlak , DMeetVsev3-Bur-2 ) ;
19998: NOP4
20002: PPUSH
20003: LD_STRING DMeetVsev3-Bur-2
20005: PPUSH
20006: NOP4
// Say ( Vsevolod , DMeetVsev3-Vse-2 ) ;
20010: NOP4
20014: PPUSH
20015: LD_STRING DMeetVsev3-Vse-2
20017: PPUSH
20018: NOP4
// Say ( Burlak , DMeetVsev3-Bur-3 ) ;
20022: NOP4
20026: PPUSH
20027: LD_STRING DMeetVsev3-Bur-3
20029: PPUSH
20030: NOP4
// if stevensStatus = 0 then
20034: NOP4
20038: PUSH
20039: LD_INT 0
20041: EQUAL
20042: IFFALSE 20056
// Say ( Burlak , DMeetVsev4-Bur-1 ) ;
20044: NOP4
20048: PPUSH
20049: LD_STRING DMeetVsev4-Bur-1
20051: PPUSH
20052: NOP4
// Say ( Burlak , DMeetVsev5-Bur-1 ) ;
20056: NOP4
20060: PPUSH
20061: LD_STRING DMeetVsev5-Bur-1
20063: PPUSH
20064: NOP4
// Say ( Vsevolod , DMeetVsev5-Vse-1 ) ;
20068: NOP4
20072: PPUSH
20073: LD_STRING DMeetVsev5-Vse-1
20075: PPUSH
20076: NOP4
// Say ( Burlak , DMeetVsev6-Bur-1 ) ;
20080: NOP4
20084: PPUSH
20085: LD_STRING DMeetVsev6-Bur-1
20087: PPUSH
20088: NOP4
// Say ( Vsevolod , DMeetVsev6-Vse-1 ) ;
20092: NOP4
20096: PPUSH
20097: LD_STRING DMeetVsev6-Vse-1
20099: PPUSH
20100: NOP4
// DialogueOff ;
20104: NOP4
// wait ( 0 0$20 ) ;
20108: LD_INT 700
20110: PPUSH
20111: NOP4
// PrepareConvoy ;
20115: NOP4
// ComMoveXY ( convoyTeam , 57 , 40 ) ;
20119: NOP4
20123: PPUSH
20124: LD_INT 57
20126: PPUSH
20127: LD_INT 40
20129: PPUSH
20130: NOP4
// AddComMoveXY ( convoyTeam , 37 , 59 ) ;
20134: NOP4
20138: PPUSH
20139: LD_INT 37
20141: PPUSH
20142: LD_INT 59
20144: PPUSH
20145: NOP4
// end ; end ;
20149: PPOPN 3
20151: END
// every 0 0$1 trigger vsevolodWaitGorky and GetDistUnits ( Vsevolod , Burlak ) <= 7 do
20152: NOP4
20156: PUSH
20157: NOP4
20161: PPUSH
20162: NOP4
20166: PPUSH
20167: NOP4
20171: PUSH
20172: LD_INT 7
20174: LESSEQUAL
20175: AND
20176: IFFALSE 20472
20178: GO 20180
20180: DISABLE
// begin vsevolodWaitGorky = false ;
20181: NOP4
20185: PUSH
20186: LD_INT 0
20188: ST_TO_ADDR
// DialogueOn ;
20189: NOP4
// Say ( Vsevolod , DMeetVsev-Vse-1 ) ;
20193: NOP4
20197: PPUSH
20198: LD_STRING DMeetVsev-Vse-1
20200: PPUSH
20201: NOP4
// Say ( Burlak , DMeetVsev-Bur-1 ) ;
20205: NOP4
20209: PPUSH
20210: LD_STRING DMeetVsev-Bur-1
20212: PPUSH
20213: NOP4
// if lostAgainBase then
20217: NOP4
20221: IFFALSE 20261
// begin Say ( Vsevolod , DMeetVsev2-Vse-1 ) ;
20223: NOP4
20227: PPUSH
20228: LD_STRING DMeetVsev2-Vse-1
20230: PPUSH
20231: NOP4
// Say ( Burlak , DMeetVsev2-Bur-1 ) ;
20235: NOP4
20239: PPUSH
20240: LD_STRING DMeetVsev2-Bur-1
20242: PPUSH
20243: NOP4
// Say ( Vsevolod , DMeetVsev2-Vse-2 ) ;
20247: NOP4
20251: PPUSH
20252: LD_STRING DMeetVsev2-Vse-2
20254: PPUSH
20255: NOP4
// end else
20259: GO 20297
// begin Say ( Vsevolod , DMeetVsev2-Vse-2a ) ;
20261: NOP4
20265: PPUSH
20266: LD_STRING DMeetVsev2-Vse-2a
20268: PPUSH
20269: NOP4
// Say ( Burlak , DMeetVsev2-Bur-2 ) ;
20273: NOP4
20277: PPUSH
20278: LD_STRING DMeetVsev2-Bur-2
20280: PPUSH
20281: NOP4
// Say ( Vsevolod , DMeetVsev2-Vse-3 ) ;
20285: NOP4
20289: PPUSH
20290: LD_STRING DMeetVsev2-Vse-3
20292: PPUSH
20293: NOP4
// end ; Say ( Burlak , DMeetVsev3-Bur-1 ) ;
20297: NOP4
20301: PPUSH
20302: LD_STRING DMeetVsev3-Bur-1
20304: PPUSH
20305: NOP4
// Say ( Vsevolod , DMeetVsev3-Vse-1 ) ;
20309: NOP4
20313: PPUSH
20314: LD_STRING DMeetVsev3-Vse-1
20316: PPUSH
20317: NOP4
// Say ( Burlak , DMeetVsev3-Bur-2 ) ;
20321: NOP4
20325: PPUSH
20326: LD_STRING DMeetVsev3-Bur-2
20328: PPUSH
20329: NOP4
// Say ( Vsevolod , DMeetVsev3-Vse-2 ) ;
20333: NOP4
20337: PPUSH
20338: LD_STRING DMeetVsev3-Vse-2
20340: PPUSH
20341: NOP4
// Say ( Burlak , DMeetVsev3-Bur-3 ) ;
20345: NOP4
20349: PPUSH
20350: LD_STRING DMeetVsev3-Bur-3
20352: PPUSH
20353: NOP4
// if stevensStatus = 0 then
20357: NOP4
20361: PUSH
20362: LD_INT 0
20364: EQUAL
20365: IFFALSE 20379
// Say ( Burlak , DMeetVsev4-Bur-1 ) ;
20367: NOP4
20371: PPUSH
20372: LD_STRING DMeetVsev4-Bur-1
20374: PPUSH
20375: NOP4
// Say ( Burlak , DMeetVsev5-Bur-1 ) ;
20379: NOP4
20383: PPUSH
20384: LD_STRING DMeetVsev5-Bur-1
20386: PPUSH
20387: NOP4
// Say ( Vsevolod , DMeetVsev5-Vse-1 ) ;
20391: NOP4
20395: PPUSH
20396: LD_STRING DMeetVsev5-Vse-1
20398: PPUSH
20399: NOP4
// Say ( Vsevolod , DMeetVsev6-Vse-1 ) ;
20403: NOP4
20407: PPUSH
20408: LD_STRING DMeetVsev6-Vse-1
20410: PPUSH
20411: NOP4
// Say ( Burlak , DMeetVsev6-Bur-1 ) ;
20415: NOP4
20419: PPUSH
20420: LD_STRING DMeetVsev6-Bur-1
20422: PPUSH
20423: NOP4
// DialogueOff ;
20427: NOP4
// wait ( 0 0$20 ) ;
20431: LD_INT 700
20433: PPUSH
20434: NOP4
// PrepareConvoy ;
20438: NOP4
// ComMoveXY ( convoyTeam , 57 , 40 ) ;
20442: NOP4
20446: PPUSH
20447: LD_INT 57
20449: PPUSH
20450: LD_INT 40
20452: PPUSH
20453: NOP4
// AddComMoveXY ( convoyTeam , 37 , 59 ) ;
20457: NOP4
20461: PPUSH
20462: LD_INT 37
20464: PPUSH
20465: LD_INT 59
20467: PPUSH
20468: NOP4
// end ;
20472: END
// every 0 0$1 trigger not dial_ConvoyDialogBlocker do var tmp , speaker , unit ;
20473: NOP4
20477: NOT
20478: IFFALSE 20608
20480: GO 20482
20482: DISABLE
20483: LD_INT 0
20485: PPUSH
20486: PPUSH
20487: PPUSH
// begin enable ;
20488: ENABLE
// for unit in convoyTeam do
20489: NOP4
20493: PUSH
20494: NOP4
20498: PUSH
20499: FOR_IN
20500: IFFALSE 20606
// if See ( 3 , unit ) and not IsInArea ( unit , InsideBaseArea ) then
20502: LD_INT 3
20504: PPUSH
20505: NOP4
20509: PPUSH
20510: NOP4
20514: PUSH
20515: NOP4
20519: PPUSH
20520: LD_INT 19
20522: PPUSH
20523: NOP4
20527: NOT
20528: AND
20529: IFFALSE 20604
// begin dial_ConvoyDialogBlocker = true ;
20531: NOP4
20535: PUSH
20536: LD_INT 1
20538: ST_TO_ADDR
// DialogueOn ;
20539: NOP4
// speaker = UnitFilter ( convoyTeam , [ f_type , unit_human ] ) [ 1 ] ;
20543: NOP4
20547: PUSH
20548: NOP4
20552: PPUSH
20553: LD_INT 21
20555: PUSH
20556: LD_INT 1
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PPUSH
20563: NOP4
20567: PUSH
20568: LD_INT 1
20570: ARRAY
20571: ST_TO_ADDR
// Say ( speaker , DTruck-Sol1-1 ) ;
20572: NOP4
20576: PPUSH
20577: LD_STRING DTruck-Sol1-1
20579: PPUSH
20580: NOP4
// Say ( Burlak , DTruck-Bur-1 ) ;
20584: NOP4
20588: PPUSH
20589: LD_STRING DTruck-Bur-1
20591: PPUSH
20592: NOP4
// DialogueOff ;
20596: NOP4
// exit ;
20600: POP
20601: POP
20602: GO 20608
// end ;
20604: GO 20499
20606: POP
20607: POP
// end ;
20608: PPOPN 3
20610: END
// every 0 0$1 trigger timeToAttack >= vsevolodSaveTime do
20611: NOP4
20615: PUSH
20616: NOP4
20620: GREATEREQUAL
20621: IFFALSE 20660
20623: GO 20625
20625: DISABLE
// begin PrepareAttack ;
20626: NOP4
// ComAgressiveMove ( attackTeam , 60 , 41 ) ;
20630: NOP4
20634: PPUSH
20635: LD_INT 60
20637: PPUSH
20638: LD_INT 41
20640: PPUSH
20641: NOP4
// AddComAgressiveMove ( attackTeam , 107 , 125 ) ;
20645: NOP4
20649: PPUSH
20650: LD_INT 107
20652: PPUSH
20653: LD_INT 125
20655: PPUSH
20656: NOP4
// end ;
20660: END
// every 1 trigger not savedVsevolod and GetLives ( Vsevolod ) <= 500 do
20661: NOP4
20665: NOT
20666: PUSH
20667: NOP4
20671: PPUSH
20672: NOP4
20676: PUSH
20677: LD_INT 500
20679: LESSEQUAL
20680: AND
20681: IFFALSE 20706
20683: GO 20685
20685: DISABLE
// begin DialogueOn ;
20686: NOP4
// SayRadio ( Vsevolod , DDieVsev2-Vse-1 ) ;
20690: NOP4
20694: PPUSH
20695: LD_STRING DDieVsev2-Vse-1
20697: PPUSH
20698: NOP4
// DialogueOff ;
20702: NOP4
// end ;
20706: END
// export function Dial_ResearchTauField ; var speaker , sci , randomTalkDialog ; begin
20707: LD_INT 0
20709: PPUSH
20710: PPUSH
20711: PPUSH
20712: PPUSH
// DialogueOn ;
20713: NOP4
// if IsOK ( Petrosyan ) then
20717: NOP4
20721: PPUSH
20722: NOP4
20726: IFFALSE 20742
// Say ( Petrosyan , DStasis-Pty-1 ) else
20728: NOP4
20732: PPUSH
20733: LD_STRING DStasis-Pty-1
20735: PPUSH
20736: NOP4
20740: GO 20964
// if IsOK ( Dolgov ) then
20742: NOP4
20746: PPUSH
20747: NOP4
20751: IFFALSE 20767
// Say ( Dolgov , DStasis-Dol-1 ) else
20753: NOP4
20757: PPUSH
20758: LD_STRING DStasis-Dol-1
20760: PPUSH
20761: NOP4
20765: GO 20964
// begin sci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] , [ f_nation , nation_russian ] ] ) diff Burlak ;
20767: NOP4
20771: PUSH
20772: LD_INT 22
20774: PUSH
20775: LD_INT 3
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 21
20784: PUSH
20785: LD_INT 1
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: LD_INT 50
20794: PUSH
20795: EMPTY
20796: LIST
20797: PUSH
20798: LD_INT 26
20800: PUSH
20801: LD_INT 1
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 25
20810: PUSH
20811: LD_INT 4
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 23
20820: PUSH
20821: LD_INT 3
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: PPUSH
20836: NOP4
20840: PUSH
20841: NOP4
20845: DIFF
20846: ST_TO_ADDR
// if not sci then
20847: NOP4
20851: NOT
20852: IFFALSE 20923
// sci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Burlak ;
20854: NOP4
20858: PUSH
20859: LD_INT 22
20861: PUSH
20862: LD_INT 3
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 21
20871: PUSH
20872: LD_INT 1
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 50
20881: PUSH
20882: EMPTY
20883: LIST
20884: PUSH
20885: LD_INT 26
20887: PUSH
20888: LD_INT 1
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 23
20897: PUSH
20898: LD_INT 3
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: PPUSH
20912: NOP4
20916: PUSH
20917: NOP4
20921: DIFF
20922: ST_TO_ADDR
// if sci then
20923: NOP4
20927: IFFALSE 20964
// begin speaker = DialogRandom ( sci , DStasis-RSol1-1 ,  , false , true ) ;
20929: NOP4
20933: PUSH
20934: NOP4
20938: PPUSH
20939: LD_STRING DStasis-RSol1-1
20941: PPUSH
20942: LD_STRING 
20944: PPUSH
20945: LD_INT 0
20947: PPUSH
20948: LD_INT 1
20950: PPUSH
20951: NOP4
20955: ST_TO_ADDR
// randomTalkDialog = true ;
20956: NOP4
20960: PUSH
20961: LD_INT 1
20963: ST_TO_ADDR
// end ; end ; if IsOK ( Petrosyan ) or IsOK ( Dolgov ) or randomTalkDialog then
20964: NOP4
20968: PPUSH
20969: NOP4
20973: PUSH
20974: NOP4
20978: PPUSH
20979: NOP4
20983: OR
20984: PUSH
20985: NOP4
20989: OR
20990: IFFALSE 21087
// begin Say ( Burlak , DStasis-Bur-1 ) ;
20992: NOP4
20996: PPUSH
20997: LD_STRING DStasis-Bur-1
20999: PPUSH
21000: NOP4
// if IsOK ( Petrosyan ) then
21004: NOP4
21008: PPUSH
21009: NOP4
21013: IFFALSE 21029
// Say ( Petrosyan , DStasis-Pty-2 ) else
21015: NOP4
21019: PPUSH
21020: LD_STRING DStasis-Pty-2
21022: PPUSH
21023: NOP4
21027: GO 21075
// if IsOK ( Dolgov ) then
21029: NOP4
21033: PPUSH
21034: NOP4
21038: IFFALSE 21054
// Say ( Dolgov , DStasis-Dol-2 ) else
21040: NOP4
21044: PPUSH
21045: LD_STRING DStasis-Dol-2
21047: PPUSH
21048: NOP4
21052: GO 21075
// DialogRandom ( speaker , DStasis-RSol1-2 ,  , false , true ) ;
21054: NOP4
21058: PPUSH
21059: LD_STRING DStasis-RSol1-2
21061: PPUSH
21062: LD_STRING 
21064: PPUSH
21065: LD_INT 0
21067: PPUSH
21068: LD_INT 1
21070: PPUSH
21071: NOP4
// Say ( Burlak , DStasis-Bur-2 ) ;
21075: NOP4
21079: PPUSH
21080: LD_STRING DStasis-Bur-2
21082: PPUSH
21083: NOP4
// end ; DialogueOff ;
21087: NOP4
// if GetTech ( tech_SibEng , 3 ) = state_researched then
21091: LD_INT 22
21093: PPUSH
21094: LD_INT 3
21096: PPUSH
21097: NOP4
21101: PUSH
21102: LD_INT 2
21104: EQUAL
21105: IFFALSE 21114
// ChangeMissionObjectives ( MOutResearch ) ;
21107: LD_STRING MOutResearch
21109: PPUSH
21110: NOP4
// end ;
21114: LD_VAR 0 1
21118: RET
// every 0 0$01 trigger GetTech ( tech_SibEng , 3 ) = state_researched and GetTech ( tech_TauField , 3 ) = state_researched and not dial_EndMissionDialogBlocker do var depots , depot , sibCounter ;
21119: LD_INT 22
21121: PPUSH
21122: LD_INT 3
21124: PPUSH
21125: NOP4
21129: PUSH
21130: LD_INT 2
21132: EQUAL
21133: PUSH
21134: LD_INT 30
21136: PPUSH
21137: LD_INT 3
21139: PPUSH
21140: NOP4
21144: PUSH
21145: LD_INT 2
21147: EQUAL
21148: AND
21149: PUSH
21150: NOP4
21154: NOT
21155: AND
21156: IFFALSE 21499
21158: GO 21160
21160: DISABLE
21161: LD_INT 0
21163: PPUSH
21164: PPUSH
21165: PPUSH
// begin wait ( 0 0$15 ) ;
21166: LD_INT 525
21168: PPUSH
21169: NOP4
// depots = FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21173: NOP4
21177: PUSH
21178: LD_INT 22
21180: PUSH
21181: LD_INT 3
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: PUSH
21188: LD_INT 50
21190: PUSH
21191: EMPTY
21192: LIST
21193: PUSH
21194: LD_INT 21
21196: PUSH
21197: LD_INT 3
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PUSH
21204: LD_INT 2
21206: PUSH
21207: LD_INT 30
21209: PUSH
21210: LD_INT 0
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 30
21219: PUSH
21220: LD_INT 1
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: LIST
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: PPUSH
21238: NOP4
21242: ST_TO_ADDR
// sibCounter = 0 ;
21243: NOP4
21247: PUSH
21248: LD_INT 0
21250: ST_TO_ADDR
// for depot in depots do
21251: NOP4
21255: PUSH
21256: NOP4
21260: PUSH
21261: FOR_IN
21262: IFFALSE 21295
// sibCounter = sibCounter + GetResourceType ( GetBase ( depot ) , mat_siberit ) ;
21264: NOP4
21268: PUSH
21269: NOP4
21273: PUSH
21274: NOP4
21278: PPUSH
21279: NOP4
21283: PPUSH
21284: LD_INT 3
21286: PPUSH
21287: NOP4
21291: PLUS
21292: ST_TO_ADDR
21293: GO 21261
21295: POP
21296: POP
// if sibCounter >= 100 then
21297: NOP4
21301: PUSH
21302: LD_INT 100
21304: GREATEREQUAL
21305: IFFALSE 21491
// begin ChangeMissionObjectives ( MOutMine ) ;
21307: LD_STRING MOutMine
21309: PPUSH
21310: NOP4
// dial_EndMissionDialogBlocker = true ;
21314: NOP4
21318: PUSH
21319: LD_INT 1
21321: ST_TO_ADDR
// DialogueOn ;
21322: NOP4
// SayRadio ( Platonov , DNextMiss1-Pla-1 ) ;
21326: NOP4
21330: PPUSH
21331: LD_STRING DNextMiss1-Pla-1
21333: PPUSH
21334: NOP4
// if not savedVsevolod then
21338: NOP4
21342: NOT
21343: IFFALSE 21389
// begin SayRadio ( Platonov , DNextMiss2-Pla-1 ) ;
21345: NOP4
21349: PPUSH
21350: LD_STRING DNextMiss2-Pla-1
21352: PPUSH
21353: NOP4
// Say ( Burlak , DNextMiss4-Bur-1 ) ;
21357: NOP4
21361: PPUSH
21362: LD_STRING DNextMiss4-Bur-1
21364: PPUSH
21365: NOP4
// SayRadio ( Vsevolod , DDieVsev1-Vse-1 ) ;
21369: NOP4
21373: PPUSH
21374: LD_STRING DDieVsev1-Vse-1
21376: PPUSH
21377: NOP4
// ForceFinishGame ;
21381: NOP4
// exit ;
21385: GO 21499
// end else
21387: GO 21425
// begin SayRadio ( Platonov , DNextMiss3-Pla-1 ) ;
21389: NOP4
21393: PPUSH
21394: LD_STRING DNextMiss3-Pla-1
21396: PPUSH
21397: NOP4
// SayRadio ( Platonov , DNextMiss4-Pla-1 ) ;
21401: NOP4
21405: PPUSH
21406: LD_STRING DNextMiss4-Pla-1
21408: PPUSH
21409: NOP4
// Say ( Burlak , DNextMiss4-Bur-1 ) ;
21413: NOP4
21417: PPUSH
21418: LD_STRING DNextMiss4-Bur-1
21420: PPUSH
21421: NOP4
// end ; DialogueOff ;
21425: NOP4
// SelectCharacters ;
21429: NOP4
// canSpawnReinforces = true ;
21433: NOP4
21437: PUSH
21438: LD_INT 1
21440: ST_TO_ADDR
// canRemoveUnits = true ;
21441: NOP4
21445: PUSH
21446: LD_INT 1
21448: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_friend , true ) ;
21449: LD_INT 1
21451: PPUSH
21452: LD_INT 6
21454: PPUSH
21455: LD_INT 1
21457: PPUSH
21458: LD_INT 1
21460: PPUSH
21461: NOP4
// SetAreaMapShow ( ExitMapArea , 1 ) ;
21465: LD_INT 14
21467: PPUSH
21468: LD_INT 1
21470: PPUSH
21471: NOP4
// ChangeMissionObjectives ( MOutResearch ) ;
21475: LD_STRING MOutResearch
21477: PPUSH
21478: NOP4
// ChangeMissionObjectives ( MCars ) ;
21482: LD_STRING MCars
21484: PPUSH
21485: NOP4
// exit ;
21489: GO 21499
// end ; wait ( 0 0$10 ) ;
21491: LD_INT 350
21493: PPUSH
21494: NOP4
// enable ;
21498: ENABLE
// end ;
21499: PPOPN 3
21501: END
// every 0 0$1 trigger canRemoveUnits do var un ;
21502: NOP4
21506: IFFALSE 21616
21508: GO 21510
21510: DISABLE
21511: LD_INT 0
21513: PPUSH
// begin enable ;
21514: ENABLE
// SetLives ( Vsevolod , 1000 ) ;
21515: NOP4
21519: PPUSH
21520: LD_INT 1000
21522: PPUSH
21523: NOP4
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , ExitMapArea ) ;
21527: LD_INT 22
21529: PUSH
21530: LD_INT 6
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 21
21539: PUSH
21540: LD_INT 1
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PPUSH
21551: NOP4
21555: PPUSH
21556: LD_INT 14
21558: PPUSH
21559: NOP4
// for un in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
21563: NOP4
21567: PUSH
21568: LD_INT 14
21570: PPUSH
21571: LD_INT 22
21573: PUSH
21574: LD_INT 6
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 21
21583: PUSH
21584: LD_INT 1
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: PPUSH
21595: NOP4
21599: PUSH
21600: FOR_IN
21601: IFFALSE 21614
// RemoveUnit ( un ) ;
21603: NOP4
21607: PPUSH
21608: NOP4
21612: GO 21600
21614: POP
21615: POP
// end ;
21616: PPOPN 1
21618: END
// every 1 trigger not canGoNorth and FilterUnitsInArea ( NorthBlockerArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do var unit ;
21619: NOP4
21623: NOT
21624: PUSH
21625: LD_INT 15
21627: PPUSH
21628: LD_INT 22
21630: PUSH
21631: LD_INT 3
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: PUSH
21638: LD_INT 50
21640: PUSH
21641: EMPTY
21642: LIST
21643: PUSH
21644: LD_INT 2
21646: PUSH
21647: LD_INT 21
21649: PUSH
21650: LD_INT 1
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: LD_INT 21
21659: PUSH
21660: LD_INT 2
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: LIST
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: LIST
21676: PPUSH
21677: NOP4
21681: AND
21682: IFFALSE 21814
21684: GO 21686
21686: DISABLE
21687: LD_INT 0
21689: PPUSH
// begin enable ;
21690: ENABLE
// for unit in FilterUnitsInArea ( NorthBlockerArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
21691: NOP4
21695: PUSH
21696: LD_INT 15
21698: PPUSH
21699: LD_INT 22
21701: PUSH
21702: LD_INT 3
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 50
21711: PUSH
21712: EMPTY
21713: LIST
21714: PUSH
21715: LD_INT 2
21717: PUSH
21718: LD_INT 21
21720: PUSH
21721: LD_INT 1
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 21
21730: PUSH
21731: LD_INT 2
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: LIST
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: LIST
21747: PPUSH
21748: NOP4
21752: PUSH
21753: FOR_IN
21754: IFFALSE 21770
// ComMoveToArea ( unit , NorthBlockerReturnArea ) ;
21756: NOP4
21760: PPUSH
21761: LD_INT 16
21763: PPUSH
21764: NOP4
21768: GO 21753
21770: POP
21771: POP
// if not dial_NorthBlocker then
21772: NOP4
21776: NOT
21777: IFFALSE 21814
// begin dial_NorthBlocker = true ;
21779: NOP4
21783: PUSH
21784: LD_INT 1
21786: ST_TO_ADDR
// Say ( Burlak , DMoveNorth-Bur-1 ) ;
21787: NOP4
21791: PPUSH
21792: LD_STRING DMoveNorth-Bur-1
21794: PPUSH
21795: NOP4
// wait ( 0 0$5 ) ;
21799: LD_INT 175
21801: PPUSH
21802: NOP4
// dial_NorthBlocker = false ;
21806: NOP4
21810: PUSH
21811: LD_INT 0
21813: ST_TO_ADDR
// end ; end ;
21814: PPOPN 1
21816: END
// every 2 2$30 trigger canSpawnReinforces do
21817: NOP4
21821: IFFALSE 21877
21823: GO 21825
21825: DISABLE
// begin SpawnPlatonovReinforces ;
21826: NOP4
// CenterOnXY ( 134 , 233 ) ;
21830: LD_INT 134
21832: PPUSH
21833: LD_INT 233
21835: PPUSH
21836: NOP4
// if Kirilenkova and IsPlaced ( Kirilenkova ) then
21840: NOP4
21844: PUSH
21845: NOP4
21849: PPUSH
21850: NOP4
21854: AND
21855: IFFALSE 21869
// Say ( Kirilenkova , DMeetKirilenkova-Kir-1 ) ;
21857: NOP4
21861: PPUSH
21862: LD_STRING DMeetKirilenkova-Kir-1
21864: PPUSH
21865: NOP4
// canEndMission = true ;
21869: NOP4
21873: PUSH
21874: LD_INT 1
21876: ST_TO_ADDR
// end ; end_of_file
21877: END
// export function Lose_Burlak ; begin
21878: LD_INT 0
21880: PPUSH
// YouLost ( Burlak ) ;
21881: LD_STRING Burlak
21883: PPUSH
21884: NOP4
// end ;
21888: LD_VAR 0 1
21892: RET
// export function Lose_Gleb ; begin
21893: LD_INT 0
21895: PPUSH
// SayRadio ( Platonov , DKillGleb-Pla-1 ) ;
21896: NOP4
21900: PPUSH
21901: LD_STRING DKillGleb-Pla-1
21903: PPUSH
21904: NOP4
// YouLost ( Gleb ) ;
21908: LD_STRING Gleb
21910: PPUSH
21911: NOP4
// end ;
21915: LD_VAR 0 1
21919: RET
// every 0 0$1 trigger not canEndMission and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_engineer ] , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
21920: NOP4
21924: NOT
21925: PUSH
21926: LD_INT 22
21928: PUSH
21929: LD_INT 3
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 2
21938: PUSH
21939: LD_INT 25
21941: PUSH
21942: LD_INT 2
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 30
21951: PUSH
21952: LD_INT 1
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 30
21961: PUSH
21962: LD_INT 0
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 30
21971: PUSH
21972: LD_INT 6
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 30
21981: PUSH
21982: LD_INT 7
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 30
21991: PUSH
21992: LD_INT 8
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: PPUSH
22012: NOP4
22016: NOT
22017: AND
22018: IFFALSE 22030
22020: GO 22022
22022: DISABLE
// YouLost ( NoDepotNoEngineerNoLab ) ;
22023: LD_STRING NoDepotNoEngineerNoLab
22025: PPUSH
22026: NOP4
22030: END
// export function Lose_NoDepotNoEngineerNoLab ; begin
22031: LD_INT 0
22033: PPUSH
// YouLost ( NoDepotNoEngineerNoLab ) ;
22034: LD_STRING NoDepotNoEngineerNoLab
22036: PPUSH
22037: NOP4
// end ; end_of_file
22041: LD_VAR 0 1
22045: RET
// every 0 0$5 trigger canEndMission and not FilterUnitsExceptArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_and , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ] ) do var units , qr ;
22046: NOP4
22050: PUSH
22051: LD_INT 14
22053: PPUSH
22054: LD_INT 22
22056: PUSH
22057: LD_INT 3
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 50
22066: PUSH
22067: EMPTY
22068: LIST
22069: PUSH
22070: LD_INT 2
22072: PUSH
22073: LD_INT 21
22075: PUSH
22076: LD_INT 1
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 1
22085: PUSH
22086: LD_INT 21
22088: PUSH
22089: LD_INT 2
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 59
22098: PUSH
22099: EMPTY
22100: LIST
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: LIST
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: LIST
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: LIST
22116: PPUSH
22117: NOP4
22121: NOT
22122: AND
22123: IFFALSE 22169
22125: GO 22127
22127: DISABLE
22128: LD_INT 0
22130: PPUSH
22131: PPUSH
// begin case Query ( QEndGame ) of 1 :
22132: LD_STRING QEndGame
22134: PPUSH
22135: NOP4
22139: PUSH
22140: LD_INT 1
22142: DOUBLE
22143: EQUAL
22144: IFTRUE 22148
22146: GO 22167
22148: POP
// begin SetRewards ;
22149: NOP4
// SavePlayerCharacters ;
22153: NOP4
// SaveGlobalVariables ;
22157: NOP4
// YouWin ;
22161: NOP4
// end ; end ;
22165: GO 22168
22167: POP
// enable ;
22168: ENABLE
// end ;
22169: PPOPN 2
22171: END
// export function ForceFinishGame ; begin
22172: LD_INT 0
22174: PPUSH
// SetRewards ;
22175: NOP4
// SavePlayerCharacters ;
22179: NOP4
// SaveGlobalVariables ;
22183: NOP4
// YouWin ;
22187: NOP4
// end ;
22191: LD_VAR 0 1
22195: RET
// function SetRewards ; begin
22196: LD_INT 0
22198: PPUSH
// if savedVsevolod then
22199: NOP4
22203: IFFALSE 22217
// AddMedal ( Vsevolod , 1 ) else
22205: LD_STRING Vsevolod
22207: PPUSH
22208: LD_INT 1
22210: PPUSH
22211: NOP4
22215: GO 22228
// AddMedal ( Vsevolod , - 1 ) ;
22217: LD_STRING Vsevolod
22219: PPUSH
22220: LD_INT 1
22222: NEG
22223: PPUSH
22224: NOP4
// if not lostAgainBase then
22228: NOP4
22232: NOT
22233: IFFALSE 22247
// AddMedal ( Ovsyenko , 1 ) else
22235: LD_STRING Ovsyenko
22237: PPUSH
22238: LD_INT 1
22240: PPUSH
22241: NOP4
22245: GO 22258
// AddMedal ( Ovsyenko , - 1 ) ;
22247: LD_STRING Ovsyenko
22249: PPUSH
22250: LD_INT 1
22252: NEG
22253: PPUSH
22254: NOP4
// if GetTech ( tech_MatPred , 3 ) = state_researched then
22258: LD_INT 9
22260: PPUSH
22261: LD_INT 3
22263: PPUSH
22264: NOP4
22268: PUSH
22269: LD_INT 2
22271: EQUAL
22272: IFFALSE 22286
// AddMedal ( Prediction , 1 ) else
22274: LD_STRING Prediction
22276: PPUSH
22277: LD_INT 1
22279: PPUSH
22280: NOP4
22284: GO 22297
// AddMedal ( Prediction , - 1 ) ;
22286: LD_STRING Prediction
22288: PPUSH
22289: LD_INT 1
22291: NEG
22292: PPUSH
22293: NOP4
// GiveMedals ( Main ) ;
22297: LD_STRING Main
22299: PPUSH
22300: NOP4
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ) ;
22304: LD_INT 22
22306: PUSH
22307: LD_INT 3
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 21
22316: PUSH
22317: LD_INT 1
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PUSH
22324: LD_INT 23
22326: PUSH
22327: LD_INT 3
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: LD_INT 50
22336: PUSH
22337: EMPTY
22338: LIST
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: PPUSH
22346: NOP4
22350: PPUSH
22351: NOP4
// end ;
22355: LD_VAR 0 1
22359: RET
// function SavePlayerCharacters ; var randomsToSave ; begin
22360: LD_INT 0
22362: PPUSH
22363: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
22364: NOP4
22368: PPUSH
22369: LD_STRING Burlak
22371: PPUSH
22372: LD_INT 3
22374: PPUSH
22375: NOP4
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
22379: NOP4
22383: PPUSH
22384: LD_STRING Karamazov
22386: PPUSH
22387: LD_INT 3
22389: PPUSH
22390: NOP4
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
22394: NOP4
22398: PPUSH
22399: LD_STRING Petrovova
22401: PPUSH
22402: LD_INT 3
22404: PPUSH
22405: NOP4
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
22409: NOP4
22413: PPUSH
22414: LD_STRING Gleb
22416: PPUSH
22417: LD_INT 3
22419: PPUSH
22420: NOP4
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
22424: NOP4
22428: PPUSH
22429: LD_STRING Petrosyan
22431: PPUSH
22432: LD_INT 3
22434: PPUSH
22435: NOP4
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
22439: NOP4
22443: PPUSH
22444: LD_STRING Dolgov
22446: PPUSH
22447: LD_INT 3
22449: PPUSH
22450: NOP4
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
22454: NOP4
22458: PPUSH
22459: LD_STRING Lipshchin
22461: PPUSH
22462: LD_INT 3
22464: PPUSH
22465: NOP4
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
22469: NOP4
22473: PPUSH
22474: LD_STRING Titov
22476: PPUSH
22477: LD_INT 3
22479: PPUSH
22480: NOP4
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
22484: NOP4
22488: PPUSH
22489: LD_STRING Kirilenkova
22491: PPUSH
22492: LD_INT 3
22494: PPUSH
22495: NOP4
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
22499: NOP4
22503: PPUSH
22504: LD_STRING Belkov
22506: PPUSH
22507: LD_INT 3
22509: PPUSH
22510: NOP4
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
22514: NOP4
22518: PPUSH
22519: LD_STRING Belkov2
22521: PPUSH
22522: LD_INT 3
22524: PPUSH
22525: NOP4
// ExtSaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
22529: LD_INT 22
22531: PUSH
22532: LD_INT 3
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 21
22541: PUSH
22542: LD_INT 1
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 2
22551: PUSH
22552: LD_INT 25
22554: PUSH
22555: LD_INT 12
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 25
22564: PUSH
22565: LD_INT 16
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 25
22574: PUSH
22575: LD_INT 15
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: LIST
22592: PPUSH
22593: NOP4
22597: PPUSH
22598: LD_STRING other_apemans
22600: PPUSH
22601: LD_INT 3
22603: PPUSH
22604: NOP4
// randomsToSave = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 ] ;
22608: NOP4
22612: PUSH
22613: LD_INT 22
22615: PUSH
22616: LD_INT 3
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 21
22625: PUSH
22626: LD_INT 1
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 23
22635: PUSH
22636: LD_INT 3
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 50
22645: PUSH
22646: EMPTY
22647: LIST
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: PPUSH
22655: NOP4
22659: PUSH
22660: NOP4
22664: PUSH
22665: NOP4
22669: PUSH
22670: NOP4
22674: PUSH
22675: NOP4
22679: PUSH
22680: NOP4
22684: PUSH
22685: NOP4
22689: PUSH
22690: NOP4
22694: PUSH
22695: NOP4
22699: PUSH
22700: NOP4
22704: PUSH
22705: NOP4
22709: PUSH
22710: NOP4
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: DIFF
22728: ST_TO_ADDR
// ExtSaveCharacters ( randomsToSave , other_survivors , 3 ) ;
22729: NOP4
22733: PPUSH
22734: LD_STRING other_survivors
22736: PPUSH
22737: LD_INT 3
22739: PPUSH
22740: NOP4
// end ;
22744: LD_VAR 0 1
22748: RET
// function SaveGlobalVariables ; var i , driver , driverShortName ; begin
22749: LD_INT 0
22751: PPUSH
22752: PPUSH
22753: PPUSH
22754: PPUSH
// resourcesFrom06 = [ ] ;
22755: NOP4
22759: PUSH
22760: EMPTY
22761: ST_TO_ADDR
// SaveVariable ( techMatPredStatus , 06_TechMatPredStatus_1 ) ;
22762: NOP4
22766: PPUSH
22767: LD_STRING 06_TechMatPredStatus_1
22769: PPUSH
22770: NOP4
// for i in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_occupied ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , 89 ] ] ] ) do
22774: NOP4
22778: PUSH
22779: LD_INT 14
22781: PPUSH
22782: LD_INT 22
22784: PUSH
22785: LD_INT 3
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 59
22794: PUSH
22795: EMPTY
22796: LIST
22797: PUSH
22798: LD_INT 2
22800: PUSH
22801: LD_INT 34
22803: PUSH
22804: LD_INT 51
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 34
22813: PUSH
22814: LD_INT 32
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 34
22823: PUSH
22824: LD_INT 12
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 34
22833: PUSH
22834: LD_INT 89
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: LIST
22852: PPUSH
22853: NOP4
22857: PUSH
22858: FOR_IN
22859: IFFALSE 22887
// resourcesFrom06 = resourcesFrom06 ^ [ GetMultiCargo ( i ) ] ;
22861: NOP4
22865: PUSH
22866: NOP4
22870: PUSH
22871: NOP4
22875: PPUSH
22876: NOP4
22880: PUSH
22881: EMPTY
22882: LIST
22883: ADD
22884: ST_TO_ADDR
22885: GO 22858
22887: POP
22888: POP
// SaveVariable ( resourcesFrom06 , 06_ResourcesInCargo_3 ) ;
22889: NOP4
22893: PPUSH
22894: LD_STRING 06_ResourcesInCargo_3
22896: PPUSH
22897: NOP4
// for i in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ) do
22901: NOP4
22905: PUSH
22906: LD_INT 14
22908: PPUSH
22909: LD_INT 22
22911: PUSH
22912: LD_INT 3
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PUSH
22919: LD_INT 21
22921: PUSH
22922: LD_INT 2
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: PUSH
22929: LD_INT 59
22931: PUSH
22932: EMPTY
22933: LIST
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: LIST
22939: PPUSH
22940: NOP4
22944: PUSH
22945: FOR_IN
22946: IFFALSE 23350
// begin driver = UnitsInside ( i ) [ 1 ] ;
22948: NOP4
22952: PUSH
22953: NOP4
22957: PPUSH
22958: NOP4
22962: PUSH
22963: LD_INT 1
22965: ARRAY
22966: ST_TO_ADDR
// if driver = Burlak then
22967: NOP4
22971: PUSH
22972: NOP4
22976: EQUAL
22977: IFFALSE 22987
// driverShortName = Bur ;
22979: NOP4
22983: PUSH
22984: LD_STRING Bur
22986: ST_TO_ADDR
// if driver = Karamazov then
22987: NOP4
22991: PUSH
22992: NOP4
22996: EQUAL
22997: IFFALSE 23007
// driverShortName = Kar ;
22999: NOP4
23003: PUSH
23004: LD_STRING Kar
23006: ST_TO_ADDR
// if driver = Petrovova then
23007: NOP4
23011: PUSH
23012: NOP4
23016: EQUAL
23017: IFFALSE 23027
// driverShortName = Ptr ;
23019: NOP4
23023: PUSH
23024: LD_STRING Ptr
23026: ST_TO_ADDR
// if driver = Gleb then
23027: NOP4
23031: PUSH
23032: NOP4
23036: EQUAL
23037: IFFALSE 23047
// driverShortName = Glb ;
23039: NOP4
23043: PUSH
23044: LD_STRING Glb
23046: ST_TO_ADDR
// if driver = Petrosyan then
23047: NOP4
23051: PUSH
23052: NOP4
23056: EQUAL
23057: IFFALSE 23067
// driverShortName = Pet ;
23059: NOP4
23063: PUSH
23064: LD_STRING Pet
23066: ST_TO_ADDR
// if driver = Dolgov then
23067: NOP4
23071: PUSH
23072: NOP4
23076: EQUAL
23077: IFFALSE 23087
// driverShortName = Dol ;
23079: NOP4
23083: PUSH
23084: LD_STRING Dol
23086: ST_TO_ADDR
// if driver = Lipshchin then
23087: NOP4
23091: PUSH
23092: NOP4
23096: EQUAL
23097: IFFALSE 23107
// driverShortName = Lip ;
23099: NOP4
23103: PUSH
23104: LD_STRING Lip
23106: ST_TO_ADDR
// if driver = Titov then
23107: NOP4
23111: PUSH
23112: NOP4
23116: EQUAL
23117: IFFALSE 23127
// driverShortName = Tit ;
23119: NOP4
23123: PUSH
23124: LD_STRING Tit
23126: ST_TO_ADDR
// if driver = Kirilenkova then
23127: NOP4
23131: PUSH
23132: NOP4
23136: EQUAL
23137: IFFALSE 23147
// driverShortName = Kir ;
23139: NOP4
23143: PUSH
23144: LD_STRING Kir
23146: ST_TO_ADDR
// if driver = Belkov then
23147: NOP4
23151: PUSH
23152: NOP4
23156: EQUAL
23157: IFFALSE 23167
// driverShortName = Bel ;
23159: NOP4
23163: PUSH
23164: LD_STRING Bel
23166: ST_TO_ADDR
// if driver = Belkov2 then
23167: NOP4
23171: PUSH
23172: NOP4
23176: EQUAL
23177: IFFALSE 23187
// driverShortName = Bel2 ;
23179: NOP4
23183: PUSH
23184: LD_STRING Bel2
23186: ST_TO_ADDR
// if not driver in [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 ] then
23187: NOP4
23191: PUSH
23192: NOP4
23196: PUSH
23197: NOP4
23201: PUSH
23202: NOP4
23206: PUSH
23207: NOP4
23211: PUSH
23212: NOP4
23216: PUSH
23217: NOP4
23221: PUSH
23222: NOP4
23226: PUSH
23227: NOP4
23231: PUSH
23232: NOP4
23236: PUSH
23237: NOP4
23241: PUSH
23242: NOP4
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: IN
23260: NOT
23261: IFFALSE 23271
// driverShortName = rand ;
23263: NOP4
23267: PUSH
23268: LD_STRING rand
23270: ST_TO_ADDR
// vehsFrom06 = vehsFrom06 ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , driverShortName ] ] ;
23271: NOP4
23275: PUSH
23276: NOP4
23280: PUSH
23281: NOP4
23285: PPUSH
23286: NOP4
23290: PUSH
23291: NOP4
23295: PPUSH
23296: NOP4
23300: PUSH
23301: NOP4
23305: PPUSH
23306: NOP4
23310: PUSH
23311: NOP4
23315: PPUSH
23316: NOP4
23320: PUSH
23321: NOP4
23325: PPUSH
23326: NOP4
23330: PUSH
23331: NOP4
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: PUSH
23344: EMPTY
23345: LIST
23346: ADD
23347: ST_TO_ADDR
// end ;
23348: GO 22945
23350: POP
23351: POP
// SaveVariable ( vehsFrom06 , 06_Vehicles_2 ) ;
23352: NOP4
23356: PPUSH
23357: LD_STRING 06_Vehicles_2
23359: PPUSH
23360: NOP4
// SaveVariable ( savedVsevolod , 06_VsevolodStatus_4 ) ;
23364: NOP4
23368: PPUSH
23369: LD_STRING 06_VsevolodStatus_4
23371: PPUSH
23372: NOP4
// end ; end_of_file
23376: LD_VAR 0 1
23380: RET
// on UnitDestroyed ( unit ) do begin if unit in ovsyenkoBase then
23381: NOP4
23385: PUSH
23386: NOP4
23390: IN
23391: IFFALSE 23409
// ovsyenkoBase = ovsyenkoBase diff unit ;
23393: NOP4
23397: PUSH
23398: NOP4
23402: PUSH
23403: NOP4
23407: DIFF
23408: ST_TO_ADDR
// if unit = Burlak then
23409: NOP4
23413: PUSH
23414: NOP4
23418: EQUAL
23419: IFFALSE 23425
// Lose_Burlak ;
23421: NOP4
// if unit = Vsevolod and GetSide ( Vsevolod ) = 3 then
23425: NOP4
23429: PUSH
23430: NOP4
23434: EQUAL
23435: PUSH
23436: NOP4
23440: PPUSH
23441: NOP4
23445: PUSH
23446: LD_INT 3
23448: EQUAL
23449: AND
23450: IFFALSE 23460
// savedVsevolod = false ;
23452: NOP4
23456: PUSH
23457: LD_INT 0
23459: ST_TO_ADDR
// if unit = ovsyenko and GetSide ( ovsyenko ) = 3 then
23460: NOP4
23464: PUSH
23465: LD_INT 86
23467: EQUAL
23468: PUSH
23469: LD_INT 86
23471: PPUSH
23472: NOP4
23476: PUSH
23477: LD_INT 3
23479: EQUAL
23480: AND
23481: IFFALSE 23491
// lostAgainBase = true ;
23483: NOP4
23487: PUSH
23488: LD_INT 1
23490: ST_TO_ADDR
// end ;
23491: PPOPN 1
23493: END
// on UnitDestroyed_Extra ( unit , killer_side , killer_unit ) do begin if unit = Gleb and killer_side = 3 then
23494: NOP4
23498: PUSH
23499: NOP4
23503: EQUAL
23504: PUSH
23505: NOP4
23509: PUSH
23510: LD_INT 3
23512: EQUAL
23513: AND
23514: IFFALSE 23520
// Lose_Gleb ;
23516: NOP4
// if unit = Vsevolod then
23520: NOP4
23524: PUSH
23525: NOP4
23529: EQUAL
23530: IFFALSE 23540
// savedVsevolod = false ;
23532: NOP4
23536: PUSH
23537: LD_INT 0
23539: ST_TO_ADDR
// end ;
23540: PPOPN 3
23542: END
// on BuildingComplete ( building ) do begin end ;
23543: PPOPN 1
23545: END
// on BuildingCaptured ( building , side , human ) do begin if GetSide ( human ) = 3 and GetBType ( building ) = b_siberite_mine and not dial_SibTechsBlocker then
23546: NOP4
23550: PPUSH
23551: NOP4
23555: PUSH
23556: LD_INT 3
23558: EQUAL
23559: PUSH
23560: NOP4
23564: PPUSH
23565: NOP4
23569: PUSH
23570: LD_INT 30
23572: EQUAL
23573: AND
23574: PUSH
23575: NOP4
23579: NOT
23580: AND
23581: IFFALSE 23587
// Dial_SibTechs ;
23583: NOP4
// if GetSide ( human ) = 3 and GetBType ( building ) in [ b_depot , b_warehouse ] and GetResourceType ( GetBase ( building ) , mat_siberit ) > 0 and not dial_SibTechsBlocker then
23587: NOP4
23591: PPUSH
23592: NOP4
23596: PUSH
23597: LD_INT 3
23599: EQUAL
23600: PUSH
23601: NOP4
23605: PPUSH
23606: NOP4
23610: PUSH
23611: LD_INT 0
23613: PUSH
23614: LD_INT 1
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: IN
23621: AND
23622: PUSH
23623: NOP4
23627: PPUSH
23628: NOP4
23632: PPUSH
23633: LD_INT 3
23635: PPUSH
23636: NOP4
23640: PUSH
23641: LD_INT 0
23643: GREATER
23644: AND
23645: PUSH
23646: NOP4
23650: NOT
23651: AND
23652: IFFALSE 23658
// Dial_SibTechs ;
23654: NOP4
// end ;
23658: PPOPN 3
23660: END
// on Contact ( side1 , side2 ) do begin end ;
23661: PPOPN 2
23663: END
// on VehicleConstructed ( vehicle , building ) do var side , controlTowers , tmp ;
23664: LD_INT 0
23666: PPUSH
23667: PPUSH
23668: PPUSH
// begin if GetSide ( vehicle ) = 1 then
23669: NOP4
23673: PPUSH
23674: NOP4
23678: PUSH
23679: LD_INT 1
23681: EQUAL
23682: IFFALSE 23849
// begin controlTowers = FilterUnitsInArea ( HeadAmericanBaseArea , [ [ f_side , 1 ] , [ f_ok ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_vehicle ] ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23684: NOP4
23688: PUSH
23689: LD_INT 5
23691: PPUSH
23692: LD_INT 22
23694: PUSH
23695: LD_INT 1
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PUSH
23702: LD_INT 50
23704: PUSH
23705: EMPTY
23706: LIST
23707: PUSH
23708: LD_INT 2
23710: PUSH
23711: LD_INT 21
23713: PUSH
23714: LD_INT 3
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 21
23723: PUSH
23724: LD_INT 2
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 2
23738: PUSH
23739: LD_INT 30
23741: PUSH
23742: LD_INT 36
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PUSH
23749: LD_INT 34
23751: PUSH
23752: LD_INT 31
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: LIST
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: PPUSH
23770: NOP4
23774: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote and controlTowers then
23775: NOP4
23779: PPUSH
23780: NOP4
23784: PUSH
23785: LD_INT 2
23787: EQUAL
23788: PUSH
23789: NOP4
23793: AND
23794: IFFALSE 23849
// begin tmp = UnitsInside ( controlTowers [ 1 ] ) ;
23796: NOP4
23800: PUSH
23801: NOP4
23805: PUSH
23806: LD_INT 1
23808: ARRAY
23809: PPUSH
23810: NOP4
23814: ST_TO_ADDR
// if tmp then
23815: NOP4
23819: IFFALSE 23849
// LinkVehicleToHuman ( vehicle , tmp [ rand ( 1 , tmp ) ] ) ;
23821: NOP4
23825: PPUSH
23826: NOP4
23830: PUSH
23831: LD_INT 1
23833: PPUSH
23834: NOP4
23838: PPUSH
23839: NOP4
23843: ARRAY
23844: PPUSH
23845: NOP4
// end ; end ; end ;
23849: PPOPN 5
23851: END
// on ResearchComplete ( research , building ) do begin if research = tech_TauField then
23852: NOP4
23856: PUSH
23857: LD_INT 30
23859: EQUAL
23860: IFFALSE 23866
// Dial_ResearchTauField ;
23862: NOP4
// if research = tech_SibEng and GetTech ( tech_TauField , 3 ) = state_researched then
23866: NOP4
23870: PUSH
23871: LD_INT 22
23873: EQUAL
23874: PUSH
23875: LD_INT 30
23877: PPUSH
23878: LD_INT 3
23880: PPUSH
23881: NOP4
23885: PUSH
23886: LD_INT 2
23888: EQUAL
23889: AND
23890: IFFALSE 23899
// ChangeMissionObjectives ( MOutResearch ) ;
23892: LD_STRING MOutResearch
23894: PPUSH
23895: NOP4
// if research = tech_MatPred then
23899: NOP4
23903: PUSH
23904: LD_INT 9
23906: EQUAL
23907: IFFALSE 23913
// Dial_ResearchMatPredictions ;
23909: NOP4
// end ; end_of_file
23913: PPOPN 2
23915: END
// every 0 0$1 trigger enableVsevolodCounter do
23916: NOP4
23920: IFFALSE 23940
23922: GO 23924
23924: DISABLE
// begin enable ;
23925: ENABLE
// timeToAttack = timeToAttack + 0 0$01 ;
23926: NOP4
23930: PUSH
23931: NOP4
23935: PUSH
23936: LD_INT 35
23938: PLUS
23939: ST_TO_ADDR
// end ; end_of_file
23940: END
// every 0 0$01 do var timer ;
23941: GO 23943
23943: DISABLE
23944: LD_INT 0
23946: PPUSH
// begin timer := 5 5$30 ;
23947: NOP4
23951: PUSH
23952: LD_INT 11550
23954: ST_TO_ADDR
// repeat wait ( timer ) ;
23955: NOP4
23959: PPUSH
23960: NOP4
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
23964: LD_INT 3
23966: PPUSH
23967: LD_INT 5
23969: PPUSH
23970: NOP4
23974: PPUSH
23975: LD_INT 20
23977: PPUSH
23978: LD_INT 1
23980: PPUSH
23981: NOP4
// cratesSpawned = cratesSpawned + 1 ;
23985: NOP4
23989: PUSH
23990: NOP4
23994: PUSH
23995: LD_INT 1
23997: PLUS
23998: ST_TO_ADDR
// until cratesSpawned = 3 ;
23999: NOP4
24003: PUSH
24004: LD_INT 3
24006: EQUAL
24007: IFFALSE 23955
// end ; end_of_file
24009: PPOPN 1
24011: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
24012: LD_INT 0
24014: PPUSH
// ar_miner := 81 ;
24015: NOP4
24019: PUSH
24020: LD_INT 81
24022: ST_TO_ADDR
// ar_crane := 88 ;
24023: NOP4
24027: PUSH
24028: LD_INT 88
24030: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24031: NOP4
24035: PUSH
24036: LD_INT 89
24038: ST_TO_ADDR
// us_hack := 99 ;
24039: NOP4
24043: PUSH
24044: LD_INT 99
24046: ST_TO_ADDR
// us_artillery := 97 ;
24047: NOP4
24051: PUSH
24052: LD_INT 97
24054: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24055: NOP4
24059: PUSH
24060: LD_INT 91
24062: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
24063: NOP4
24067: PUSH
24068: LD_INT 92
24070: ST_TO_ADDR
// ru_radar := 98 ;
24071: NOP4
24075: PUSH
24076: LD_INT 98
24078: ST_TO_ADDR
// tech_Artillery := 80 ;
24079: NOP4
24083: PUSH
24084: LD_INT 80
24086: ST_TO_ADDR
// tech_RadMat := 81 ;
24087: NOP4
24091: PUSH
24092: LD_INT 81
24094: ST_TO_ADDR
// tech_BasicTools := 82 ;
24095: NOP4
24099: PUSH
24100: LD_INT 82
24102: ST_TO_ADDR
// tech_Cargo := 83 ;
24103: NOP4
24107: PUSH
24108: LD_INT 83
24110: ST_TO_ADDR
// tech_Track := 84 ;
24111: NOP4
24115: PUSH
24116: LD_INT 84
24118: ST_TO_ADDR
// tech_Crane := 85 ;
24119: NOP4
24123: PUSH
24124: LD_INT 85
24126: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24127: NOP4
24131: PUSH
24132: LD_INT 86
24134: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24135: NOP4
24139: PUSH
24140: LD_INT 87
24142: ST_TO_ADDR
// end ;
24143: LD_VAR 0 1
24147: RET
// every 1 do
24148: GO 24150
24150: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
24151: NOP4
24155: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
24156: NOP4
24160: PUSH
24161: LD_INT 100
24163: EQUAL
24164: IFFALSE 25113
// begin if not StreamModeActive then
24166: NOP4
24170: NOT
24171: IFFALSE 24181
// StreamModeActive := true ;
24173: NOP4
24177: PUSH
24178: LD_INT 1
24180: ST_TO_ADDR
// if p3 = 0 then
24181: NOP4
24185: PUSH
24186: LD_INT 0
24188: EQUAL
24189: IFFALSE 24195
// InitStreamMode ;
24191: NOP4
// if p3 = 1 then
24195: NOP4
24199: PUSH
24200: LD_INT 1
24202: EQUAL
24203: IFFALSE 24213
// sRocket := true ;
24205: NOP4
24209: PUSH
24210: LD_INT 1
24212: ST_TO_ADDR
// if p3 = 2 then
24213: NOP4
24217: PUSH
24218: LD_INT 2
24220: EQUAL
24221: IFFALSE 24231
// sSpeed := true ;
24223: NOP4
24227: PUSH
24228: LD_INT 1
24230: ST_TO_ADDR
// if p3 = 3 then
24231: NOP4
24235: PUSH
24236: LD_INT 3
24238: EQUAL
24239: IFFALSE 24249
// sEngine := true ;
24241: NOP4
24245: PUSH
24246: LD_INT 1
24248: ST_TO_ADDR
// if p3 = 4 then
24249: NOP4
24253: PUSH
24254: LD_INT 4
24256: EQUAL
24257: IFFALSE 24267
// sSpec := true ;
24259: NOP4
24263: PUSH
24264: LD_INT 1
24266: ST_TO_ADDR
// if p3 = 5 then
24267: NOP4
24271: PUSH
24272: LD_INT 5
24274: EQUAL
24275: IFFALSE 24285
// sLevel := true ;
24277: NOP4
24281: PUSH
24282: LD_INT 1
24284: ST_TO_ADDR
// if p3 = 6 then
24285: NOP4
24289: PUSH
24290: LD_INT 6
24292: EQUAL
24293: IFFALSE 24303
// sArmoury := true ;
24295: NOP4
24299: PUSH
24300: LD_INT 1
24302: ST_TO_ADDR
// if p3 = 7 then
24303: NOP4
24307: PUSH
24308: LD_INT 7
24310: EQUAL
24311: IFFALSE 24321
// sRadar := true ;
24313: NOP4
24317: PUSH
24318: LD_INT 1
24320: ST_TO_ADDR
// if p3 = 8 then
24321: NOP4
24325: PUSH
24326: LD_INT 8
24328: EQUAL
24329: IFFALSE 24339
// sBunker := true ;
24331: NOP4
24335: PUSH
24336: LD_INT 1
24338: ST_TO_ADDR
// if p3 = 9 then
24339: NOP4
24343: PUSH
24344: LD_INT 9
24346: EQUAL
24347: IFFALSE 24357
// sHack := true ;
24349: NOP4
24353: PUSH
24354: LD_INT 1
24356: ST_TO_ADDR
// if p3 = 10 then
24357: NOP4
24361: PUSH
24362: LD_INT 10
24364: EQUAL
24365: IFFALSE 24375
// sFire := true ;
24367: NOP4
24371: PUSH
24372: LD_INT 1
24374: ST_TO_ADDR
// if p3 = 11 then
24375: NOP4
24379: PUSH
24380: LD_INT 11
24382: EQUAL
24383: IFFALSE 24393
// sRefresh := true ;
24385: NOP4
24389: PUSH
24390: LD_INT 1
24392: ST_TO_ADDR
// if p3 = 12 then
24393: NOP4
24397: PUSH
24398: LD_INT 12
24400: EQUAL
24401: IFFALSE 24411
// sExp := true ;
24403: NOP4
24407: PUSH
24408: LD_INT 1
24410: ST_TO_ADDR
// if p3 = 13 then
24411: NOP4
24415: PUSH
24416: LD_INT 13
24418: EQUAL
24419: IFFALSE 24429
// sDepot := true ;
24421: NOP4
24425: PUSH
24426: LD_INT 1
24428: ST_TO_ADDR
// if p3 = 14 then
24429: NOP4
24433: PUSH
24434: LD_INT 14
24436: EQUAL
24437: IFFALSE 24447
// sFlag := true ;
24439: NOP4
24443: PUSH
24444: LD_INT 1
24446: ST_TO_ADDR
// if p3 = 15 then
24447: NOP4
24451: PUSH
24452: LD_INT 15
24454: EQUAL
24455: IFFALSE 24465
// sKamikadze := true ;
24457: NOP4
24461: PUSH
24462: LD_INT 1
24464: ST_TO_ADDR
// if p3 = 16 then
24465: NOP4
24469: PUSH
24470: LD_INT 16
24472: EQUAL
24473: IFFALSE 24483
// sTroll := true ;
24475: NOP4
24479: PUSH
24480: LD_INT 1
24482: ST_TO_ADDR
// if p3 = 17 then
24483: NOP4
24487: PUSH
24488: LD_INT 17
24490: EQUAL
24491: IFFALSE 24501
// sSlow := true ;
24493: NOP4
24497: PUSH
24498: LD_INT 1
24500: ST_TO_ADDR
// if p3 = 18 then
24501: NOP4
24505: PUSH
24506: LD_INT 18
24508: EQUAL
24509: IFFALSE 24519
// sLack := true ;
24511: NOP4
24515: PUSH
24516: LD_INT 1
24518: ST_TO_ADDR
// if p3 = 19 then
24519: NOP4
24523: PUSH
24524: LD_INT 19
24526: EQUAL
24527: IFFALSE 24537
// sTank := true ;
24529: NOP4
24533: PUSH
24534: LD_INT 1
24536: ST_TO_ADDR
// if p3 = 20 then
24537: NOP4
24541: PUSH
24542: LD_INT 20
24544: EQUAL
24545: IFFALSE 24555
// sRemote := true ;
24547: NOP4
24551: PUSH
24552: LD_INT 1
24554: ST_TO_ADDR
// if p3 = 21 then
24555: NOP4
24559: PUSH
24560: LD_INT 21
24562: EQUAL
24563: IFFALSE 24573
// sPowell := true ;
24565: NOP4
24569: PUSH
24570: LD_INT 1
24572: ST_TO_ADDR
// if p3 = 22 then
24573: NOP4
24577: PUSH
24578: LD_INT 22
24580: EQUAL
24581: IFFALSE 24591
// sTeleport := true ;
24583: NOP4
24587: PUSH
24588: LD_INT 1
24590: ST_TO_ADDR
// if p3 = 23 then
24591: NOP4
24595: PUSH
24596: LD_INT 23
24598: EQUAL
24599: IFFALSE 24609
// sOilTower := true ;
24601: NOP4
24605: PUSH
24606: LD_INT 1
24608: ST_TO_ADDR
// if p3 = 24 then
24609: NOP4
24613: PUSH
24614: LD_INT 24
24616: EQUAL
24617: IFFALSE 24627
// sShovel := true ;
24619: NOP4
24623: PUSH
24624: LD_INT 1
24626: ST_TO_ADDR
// if p3 = 25 then
24627: NOP4
24631: PUSH
24632: LD_INT 25
24634: EQUAL
24635: IFFALSE 24645
// sSheik := true ;
24637: NOP4
24641: PUSH
24642: LD_INT 1
24644: ST_TO_ADDR
// if p3 = 26 then
24645: NOP4
24649: PUSH
24650: LD_INT 26
24652: EQUAL
24653: IFFALSE 24663
// sEarthquake := true ;
24655: NOP4
24659: PUSH
24660: LD_INT 1
24662: ST_TO_ADDR
// if p3 = 27 then
24663: NOP4
24667: PUSH
24668: LD_INT 27
24670: EQUAL
24671: IFFALSE 24681
// sAI := true ;
24673: NOP4
24677: PUSH
24678: LD_INT 1
24680: ST_TO_ADDR
// if p3 = 28 then
24681: NOP4
24685: PUSH
24686: LD_INT 28
24688: EQUAL
24689: IFFALSE 24699
// sCargo := true ;
24691: NOP4
24695: PUSH
24696: LD_INT 1
24698: ST_TO_ADDR
// if p3 = 29 then
24699: NOP4
24703: PUSH
24704: LD_INT 29
24706: EQUAL
24707: IFFALSE 24717
// sDLaser := true ;
24709: NOP4
24713: PUSH
24714: LD_INT 1
24716: ST_TO_ADDR
// if p3 = 30 then
24717: NOP4
24721: PUSH
24722: LD_INT 30
24724: EQUAL
24725: IFFALSE 24735
// sExchange := true ;
24727: NOP4
24731: PUSH
24732: LD_INT 1
24734: ST_TO_ADDR
// if p3 = 31 then
24735: NOP4
24739: PUSH
24740: LD_INT 31
24742: EQUAL
24743: IFFALSE 24753
// sFac := true ;
24745: NOP4
24749: PUSH
24750: LD_INT 1
24752: ST_TO_ADDR
// if p3 = 32 then
24753: NOP4
24757: PUSH
24758: LD_INT 32
24760: EQUAL
24761: IFFALSE 24771
// sPower := true ;
24763: NOP4
24767: PUSH
24768: LD_INT 1
24770: ST_TO_ADDR
// if p3 = 33 then
24771: NOP4
24775: PUSH
24776: LD_INT 33
24778: EQUAL
24779: IFFALSE 24789
// sRandom := true ;
24781: NOP4
24785: PUSH
24786: LD_INT 1
24788: ST_TO_ADDR
// if p3 = 34 then
24789: NOP4
24793: PUSH
24794: LD_INT 34
24796: EQUAL
24797: IFFALSE 24807
// sShield := true ;
24799: NOP4
24803: PUSH
24804: LD_INT 1
24806: ST_TO_ADDR
// if p3 = 35 then
24807: NOP4
24811: PUSH
24812: LD_INT 35
24814: EQUAL
24815: IFFALSE 24825
// sTime := true ;
24817: NOP4
24821: PUSH
24822: LD_INT 1
24824: ST_TO_ADDR
// if p3 = 36 then
24825: NOP4
24829: PUSH
24830: LD_INT 36
24832: EQUAL
24833: IFFALSE 24843
// sTools := true ;
24835: NOP4
24839: PUSH
24840: LD_INT 1
24842: ST_TO_ADDR
// if p3 = 101 then
24843: NOP4
24847: PUSH
24848: LD_INT 101
24850: EQUAL
24851: IFFALSE 24861
// sSold := true ;
24853: NOP4
24857: PUSH
24858: LD_INT 1
24860: ST_TO_ADDR
// if p3 = 102 then
24861: NOP4
24865: PUSH
24866: LD_INT 102
24868: EQUAL
24869: IFFALSE 24879
// sDiff := true ;
24871: NOP4
24875: PUSH
24876: LD_INT 1
24878: ST_TO_ADDR
// if p3 = 103 then
24879: NOP4
24883: PUSH
24884: LD_INT 103
24886: EQUAL
24887: IFFALSE 24897
// sFog := true ;
24889: NOP4
24893: PUSH
24894: LD_INT 1
24896: ST_TO_ADDR
// if p3 = 104 then
24897: NOP4
24901: PUSH
24902: LD_INT 104
24904: EQUAL
24905: IFFALSE 24915
// sReset := true ;
24907: NOP4
24911: PUSH
24912: LD_INT 1
24914: ST_TO_ADDR
// if p3 = 105 then
24915: NOP4
24919: PUSH
24920: LD_INT 105
24922: EQUAL
24923: IFFALSE 24933
// sSun := true ;
24925: NOP4
24929: PUSH
24930: LD_INT 1
24932: ST_TO_ADDR
// if p3 = 106 then
24933: NOP4
24937: PUSH
24938: LD_INT 106
24940: EQUAL
24941: IFFALSE 24951
// sTiger := true ;
24943: NOP4
24947: PUSH
24948: LD_INT 1
24950: ST_TO_ADDR
// if p3 = 107 then
24951: NOP4
24955: PUSH
24956: LD_INT 107
24958: EQUAL
24959: IFFALSE 24969
// sBomb := true ;
24961: NOP4
24965: PUSH
24966: LD_INT 1
24968: ST_TO_ADDR
// if p3 = 108 then
24969: NOP4
24973: PUSH
24974: LD_INT 108
24976: EQUAL
24977: IFFALSE 24987
// sWound := true ;
24979: NOP4
24983: PUSH
24984: LD_INT 1
24986: ST_TO_ADDR
// if p3 = 109 then
24987: NOP4
24991: PUSH
24992: LD_INT 109
24994: EQUAL
24995: IFFALSE 25005
// sBetray := true ;
24997: NOP4
25001: PUSH
25002: LD_INT 1
25004: ST_TO_ADDR
// if p3 = 110 then
25005: NOP4
25009: PUSH
25010: LD_INT 110
25012: EQUAL
25013: IFFALSE 25023
// sContamin := true ;
25015: NOP4
25019: PUSH
25020: LD_INT 1
25022: ST_TO_ADDR
// if p3 = 111 then
25023: NOP4
25027: PUSH
25028: LD_INT 111
25030: EQUAL
25031: IFFALSE 25041
// sOil := true ;
25033: NOP4
25037: PUSH
25038: LD_INT 1
25040: ST_TO_ADDR
// if p3 = 112 then
25041: NOP4
25045: PUSH
25046: LD_INT 112
25048: EQUAL
25049: IFFALSE 25059
// sStu := true ;
25051: NOP4
25055: PUSH
25056: LD_INT 1
25058: ST_TO_ADDR
// if p3 = 113 then
25059: NOP4
25063: PUSH
25064: LD_INT 113
25066: EQUAL
25067: IFFALSE 25077
// sBazooka := true ;
25069: NOP4
25073: PUSH
25074: LD_INT 1
25076: ST_TO_ADDR
// if p3 = 114 then
25077: NOP4
25081: PUSH
25082: LD_INT 114
25084: EQUAL
25085: IFFALSE 25095
// sMortar := true ;
25087: NOP4
25091: PUSH
25092: LD_INT 1
25094: ST_TO_ADDR
// if p3 = 115 then
25095: NOP4
25099: PUSH
25100: LD_INT 115
25102: EQUAL
25103: IFFALSE 25113
// sRanger := true ;
25105: NOP4
25109: PUSH
25110: LD_INT 1
25112: ST_TO_ADDR
// end ; if p2 = 101 then
25113: NOP4
25117: PUSH
25118: LD_INT 101
25120: EQUAL
25121: IFFALSE 25249
// begin case p3 of 1 :
25123: NOP4
25127: PUSH
25128: LD_INT 1
25130: DOUBLE
25131: EQUAL
25132: IFTRUE 25136
25134: GO 25143
25136: POP
// hHackUnlimitedResources ; 2 :
25137: NOP4
25141: GO 25249
25143: LD_INT 2
25145: DOUBLE
25146: EQUAL
25147: IFTRUE 25151
25149: GO 25158
25151: POP
// hHackSetLevel10 ; 3 :
25152: NOP4
25156: GO 25249
25158: LD_INT 3
25160: DOUBLE
25161: EQUAL
25162: IFTRUE 25166
25164: GO 25173
25166: POP
// hHackSetLevel10YourUnits ; 4 :
25167: NOP4
25171: GO 25249
25173: LD_INT 4
25175: DOUBLE
25176: EQUAL
25177: IFTRUE 25181
25179: GO 25188
25181: POP
// hHackInvincible ; 5 :
25182: NOP4
25186: GO 25249
25188: LD_INT 5
25190: DOUBLE
25191: EQUAL
25192: IFTRUE 25196
25194: GO 25203
25196: POP
// hHackInvisible ; 6 :
25197: NOP4
25201: GO 25249
25203: LD_INT 6
25205: DOUBLE
25206: EQUAL
25207: IFTRUE 25211
25209: GO 25218
25211: POP
// hHackChangeYourSide ; 7 :
25212: NOP4
25216: GO 25249
25218: LD_INT 7
25220: DOUBLE
25221: EQUAL
25222: IFTRUE 25226
25224: GO 25233
25226: POP
// hHackChangeUnitSide ; 8 :
25227: NOP4
25231: GO 25249
25233: LD_INT 8
25235: DOUBLE
25236: EQUAL
25237: IFTRUE 25241
25239: GO 25248
25241: POP
// hHackFog ; end ;
25242: NOP4
25246: GO 25249
25248: POP
// end ; end ;
25249: PPOPN 6
25251: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
25252: GO 25254
25254: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
25255: LD_STRING initStreamRollete();
25257: PPUSH
25258: NOP4
// InitStreamMode ;
25262: NOP4
// DefineStreamItems ( ) ;
25266: NOP4
// end ;
25270: END
// function InitStreamMode ; begin
25271: LD_INT 0
25273: PPUSH
// streamModeActive := false ;
25274: NOP4
25278: PUSH
25279: LD_INT 0
25281: ST_TO_ADDR
// normalCounter := 36 ;
25282: NOP4
25286: PUSH
25287: LD_INT 36
25289: ST_TO_ADDR
// hardcoreCounter := 16 ;
25290: NOP4
25294: PUSH
25295: LD_INT 16
25297: ST_TO_ADDR
// sRocket := false ;
25298: NOP4
25302: PUSH
25303: LD_INT 0
25305: ST_TO_ADDR
// sSpeed := false ;
25306: NOP4
25310: PUSH
25311: LD_INT 0
25313: ST_TO_ADDR
// sEngine := false ;
25314: NOP4
25318: PUSH
25319: LD_INT 0
25321: ST_TO_ADDR
// sSpec := false ;
25322: NOP4
25326: PUSH
25327: LD_INT 0
25329: ST_TO_ADDR
// sLevel := false ;
25330: NOP4
25334: PUSH
25335: LD_INT 0
25337: ST_TO_ADDR
// sArmoury := false ;
25338: NOP4
25342: PUSH
25343: LD_INT 0
25345: ST_TO_ADDR
// sRadar := false ;
25346: NOP4
25350: PUSH
25351: LD_INT 0
25353: ST_TO_ADDR
// sBunker := false ;
25354: NOP4
25358: PUSH
25359: LD_INT 0
25361: ST_TO_ADDR
// sHack := false ;
25362: NOP4
25366: PUSH
25367: LD_INT 0
25369: ST_TO_ADDR
// sFire := false ;
25370: NOP4
25374: PUSH
25375: LD_INT 0
25377: ST_TO_ADDR
// sRefresh := false ;
25378: NOP4
25382: PUSH
25383: LD_INT 0
25385: ST_TO_ADDR
// sExp := false ;
25386: NOP4
25390: PUSH
25391: LD_INT 0
25393: ST_TO_ADDR
// sDepot := false ;
25394: NOP4
25398: PUSH
25399: LD_INT 0
25401: ST_TO_ADDR
// sFlag := false ;
25402: NOP4
25406: PUSH
25407: LD_INT 0
25409: ST_TO_ADDR
// sKamikadze := false ;
25410: NOP4
25414: PUSH
25415: LD_INT 0
25417: ST_TO_ADDR
// sTroll := false ;
25418: NOP4
25422: PUSH
25423: LD_INT 0
25425: ST_TO_ADDR
// sSlow := false ;
25426: NOP4
25430: PUSH
25431: LD_INT 0
25433: ST_TO_ADDR
// sLack := false ;
25434: NOP4
25438: PUSH
25439: LD_INT 0
25441: ST_TO_ADDR
// sTank := false ;
25442: NOP4
25446: PUSH
25447: LD_INT 0
25449: ST_TO_ADDR
// sRemote := false ;
25450: NOP4
25454: PUSH
25455: LD_INT 0
25457: ST_TO_ADDR
// sPowell := false ;
25458: NOP4
25462: PUSH
25463: LD_INT 0
25465: ST_TO_ADDR
// sTeleport := false ;
25466: NOP4
25470: PUSH
25471: LD_INT 0
25473: ST_TO_ADDR
// sOilTower := false ;
25474: NOP4
25478: PUSH
25479: LD_INT 0
25481: ST_TO_ADDR
// sShovel := false ;
25482: NOP4
25486: PUSH
25487: LD_INT 0
25489: ST_TO_ADDR
// sSheik := false ;
25490: NOP4
25494: PUSH
25495: LD_INT 0
25497: ST_TO_ADDR
// sEarthquake := false ;
25498: NOP4
25502: PUSH
25503: LD_INT 0
25505: ST_TO_ADDR
// sAI := false ;
25506: NOP4
25510: PUSH
25511: LD_INT 0
25513: ST_TO_ADDR
// sCargo := false ;
25514: NOP4
25518: PUSH
25519: LD_INT 0
25521: ST_TO_ADDR
// sDLaser := false ;
25522: NOP4
25526: PUSH
25527: LD_INT 0
25529: ST_TO_ADDR
// sExchange := false ;
25530: NOP4
25534: PUSH
25535: LD_INT 0
25537: ST_TO_ADDR
// sFac := false ;
25538: NOP4
25542: PUSH
25543: LD_INT 0
25545: ST_TO_ADDR
// sPower := false ;
25546: NOP4
25550: PUSH
25551: LD_INT 0
25553: ST_TO_ADDR
// sRandom := false ;
25554: NOP4
25558: PUSH
25559: LD_INT 0
25561: ST_TO_ADDR
// sShield := false ;
25562: NOP4
25566: PUSH
25567: LD_INT 0
25569: ST_TO_ADDR
// sTime := false ;
25570: NOP4
25574: PUSH
25575: LD_INT 0
25577: ST_TO_ADDR
// sTools := false ;
25578: NOP4
25582: PUSH
25583: LD_INT 0
25585: ST_TO_ADDR
// sSold := false ;
25586: NOP4
25590: PUSH
25591: LD_INT 0
25593: ST_TO_ADDR
// sDiff := false ;
25594: NOP4
25598: PUSH
25599: LD_INT 0
25601: ST_TO_ADDR
// sFog := false ;
25602: NOP4
25606: PUSH
25607: LD_INT 0
25609: ST_TO_ADDR
// sReset := false ;
25610: NOP4
25614: PUSH
25615: LD_INT 0
25617: ST_TO_ADDR
// sSun := false ;
25618: NOP4
25622: PUSH
25623: LD_INT 0
25625: ST_TO_ADDR
// sTiger := false ;
25626: NOP4
25630: PUSH
25631: LD_INT 0
25633: ST_TO_ADDR
// sBomb := false ;
25634: NOP4
25638: PUSH
25639: LD_INT 0
25641: ST_TO_ADDR
// sWound := false ;
25642: NOP4
25646: PUSH
25647: LD_INT 0
25649: ST_TO_ADDR
// sBetray := false ;
25650: NOP4
25654: PUSH
25655: LD_INT 0
25657: ST_TO_ADDR
// sContamin := false ;
25658: NOP4
25662: PUSH
25663: LD_INT 0
25665: ST_TO_ADDR
// sOil := false ;
25666: NOP4
25670: PUSH
25671: LD_INT 0
25673: ST_TO_ADDR
// sStu := false ;
25674: NOP4
25678: PUSH
25679: LD_INT 0
25681: ST_TO_ADDR
// sBazooka := false ;
25682: NOP4
25686: PUSH
25687: LD_INT 0
25689: ST_TO_ADDR
// sMortar := false ;
25690: NOP4
25694: PUSH
25695: LD_INT 0
25697: ST_TO_ADDR
// sRanger := false ;
25698: NOP4
25702: PUSH
25703: LD_INT 0
25705: ST_TO_ADDR
// end ;
25706: LD_VAR 0 1
25710: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
25711: LD_INT 0
25713: PPUSH
25714: PPUSH
25715: PPUSH
25716: PPUSH
25717: PPUSH
// result := [ ] ;
25718: NOP4
25722: PUSH
25723: EMPTY
25724: ST_TO_ADDR
// if campaign_id = 1 then
25725: NOP4
25729: PUSH
25730: LD_INT 1
25732: EQUAL
25733: IFFALSE 28671
// begin case mission_number of 1 :
25735: NOP4
25739: PUSH
25740: LD_INT 1
25742: DOUBLE
25743: EQUAL
25744: IFTRUE 25748
25746: GO 25812
25748: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
25749: NOP4
25753: PUSH
25754: LD_INT 2
25756: PUSH
25757: LD_INT 4
25759: PUSH
25760: LD_INT 11
25762: PUSH
25763: LD_INT 12
25765: PUSH
25766: LD_INT 15
25768: PUSH
25769: LD_INT 16
25771: PUSH
25772: LD_INT 22
25774: PUSH
25775: LD_INT 23
25777: PUSH
25778: LD_INT 26
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 101
25794: PUSH
25795: LD_INT 102
25797: PUSH
25798: LD_INT 106
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: LIST
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: ST_TO_ADDR
25810: GO 28669
25812: LD_INT 2
25814: DOUBLE
25815: EQUAL
25816: IFTRUE 25820
25818: GO 25892
25820: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
25821: NOP4
25825: PUSH
25826: LD_INT 2
25828: PUSH
25829: LD_INT 4
25831: PUSH
25832: LD_INT 11
25834: PUSH
25835: LD_INT 12
25837: PUSH
25838: LD_INT 15
25840: PUSH
25841: LD_INT 16
25843: PUSH
25844: LD_INT 22
25846: PUSH
25847: LD_INT 23
25849: PUSH
25850: LD_INT 26
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: PUSH
25864: LD_INT 101
25866: PUSH
25867: LD_INT 102
25869: PUSH
25870: LD_INT 105
25872: PUSH
25873: LD_INT 106
25875: PUSH
25876: LD_INT 108
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: ST_TO_ADDR
25890: GO 28669
25892: LD_INT 3
25894: DOUBLE
25895: EQUAL
25896: IFTRUE 25900
25898: GO 25976
25900: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
25901: NOP4
25905: PUSH
25906: LD_INT 2
25908: PUSH
25909: LD_INT 4
25911: PUSH
25912: LD_INT 5
25914: PUSH
25915: LD_INT 11
25917: PUSH
25918: LD_INT 12
25920: PUSH
25921: LD_INT 15
25923: PUSH
25924: LD_INT 16
25926: PUSH
25927: LD_INT 22
25929: PUSH
25930: LD_INT 26
25932: PUSH
25933: LD_INT 36
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 101
25950: PUSH
25951: LD_INT 102
25953: PUSH
25954: LD_INT 105
25956: PUSH
25957: LD_INT 106
25959: PUSH
25960: LD_INT 108
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: ST_TO_ADDR
25974: GO 28669
25976: LD_INT 4
25978: DOUBLE
25979: EQUAL
25980: IFTRUE 25984
25982: GO 26068
25984: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
25985: NOP4
25989: PUSH
25990: LD_INT 2
25992: PUSH
25993: LD_INT 4
25995: PUSH
25996: LD_INT 5
25998: PUSH
25999: LD_INT 8
26001: PUSH
26002: LD_INT 11
26004: PUSH
26005: LD_INT 12
26007: PUSH
26008: LD_INT 15
26010: PUSH
26011: LD_INT 16
26013: PUSH
26014: LD_INT 22
26016: PUSH
26017: LD_INT 23
26019: PUSH
26020: LD_INT 26
26022: PUSH
26023: LD_INT 36
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 101
26042: PUSH
26043: LD_INT 102
26045: PUSH
26046: LD_INT 105
26048: PUSH
26049: LD_INT 106
26051: PUSH
26052: LD_INT 108
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: ST_TO_ADDR
26066: GO 28669
26068: LD_INT 5
26070: DOUBLE
26071: EQUAL
26072: IFTRUE 26076
26074: GO 26176
26076: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
26077: NOP4
26081: PUSH
26082: LD_INT 2
26084: PUSH
26085: LD_INT 4
26087: PUSH
26088: LD_INT 5
26090: PUSH
26091: LD_INT 6
26093: PUSH
26094: LD_INT 8
26096: PUSH
26097: LD_INT 11
26099: PUSH
26100: LD_INT 12
26102: PUSH
26103: LD_INT 15
26105: PUSH
26106: LD_INT 16
26108: PUSH
26109: LD_INT 22
26111: PUSH
26112: LD_INT 23
26114: PUSH
26115: LD_INT 25
26117: PUSH
26118: LD_INT 26
26120: PUSH
26121: LD_INT 36
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 101
26142: PUSH
26143: LD_INT 102
26145: PUSH
26146: LD_INT 105
26148: PUSH
26149: LD_INT 106
26151: PUSH
26152: LD_INT 108
26154: PUSH
26155: LD_INT 109
26157: PUSH
26158: LD_INT 112
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: ST_TO_ADDR
26174: GO 28669
26176: LD_INT 6
26178: DOUBLE
26179: EQUAL
26180: IFTRUE 26184
26182: GO 26304
26184: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
26185: NOP4
26189: PUSH
26190: LD_INT 2
26192: PUSH
26193: LD_INT 4
26195: PUSH
26196: LD_INT 5
26198: PUSH
26199: LD_INT 6
26201: PUSH
26202: LD_INT 8
26204: PUSH
26205: LD_INT 11
26207: PUSH
26208: LD_INT 12
26210: PUSH
26211: LD_INT 15
26213: PUSH
26214: LD_INT 16
26216: PUSH
26217: LD_INT 20
26219: PUSH
26220: LD_INT 21
26222: PUSH
26223: LD_INT 22
26225: PUSH
26226: LD_INT 23
26228: PUSH
26229: LD_INT 25
26231: PUSH
26232: LD_INT 26
26234: PUSH
26235: LD_INT 30
26237: PUSH
26238: LD_INT 31
26240: PUSH
26241: LD_INT 32
26243: PUSH
26244: LD_INT 36
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 101
26270: PUSH
26271: LD_INT 102
26273: PUSH
26274: LD_INT 105
26276: PUSH
26277: LD_INT 106
26279: PUSH
26280: LD_INT 108
26282: PUSH
26283: LD_INT 109
26285: PUSH
26286: LD_INT 112
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: ST_TO_ADDR
26302: GO 28669
26304: LD_INT 7
26306: DOUBLE
26307: EQUAL
26308: IFTRUE 26312
26310: GO 26412
26312: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
26313: NOP4
26317: PUSH
26318: LD_INT 2
26320: PUSH
26321: LD_INT 4
26323: PUSH
26324: LD_INT 5
26326: PUSH
26327: LD_INT 7
26329: PUSH
26330: LD_INT 11
26332: PUSH
26333: LD_INT 12
26335: PUSH
26336: LD_INT 15
26338: PUSH
26339: LD_INT 16
26341: PUSH
26342: LD_INT 20
26344: PUSH
26345: LD_INT 21
26347: PUSH
26348: LD_INT 22
26350: PUSH
26351: LD_INT 23
26353: PUSH
26354: LD_INT 25
26356: PUSH
26357: LD_INT 26
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 101
26378: PUSH
26379: LD_INT 102
26381: PUSH
26382: LD_INT 103
26384: PUSH
26385: LD_INT 105
26387: PUSH
26388: LD_INT 106
26390: PUSH
26391: LD_INT 108
26393: PUSH
26394: LD_INT 112
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: ST_TO_ADDR
26410: GO 28669
26412: LD_INT 8
26414: DOUBLE
26415: EQUAL
26416: IFTRUE 26420
26418: GO 26548
26420: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
26421: NOP4
26425: PUSH
26426: LD_INT 2
26428: PUSH
26429: LD_INT 4
26431: PUSH
26432: LD_INT 5
26434: PUSH
26435: LD_INT 6
26437: PUSH
26438: LD_INT 7
26440: PUSH
26441: LD_INT 8
26443: PUSH
26444: LD_INT 11
26446: PUSH
26447: LD_INT 12
26449: PUSH
26450: LD_INT 15
26452: PUSH
26453: LD_INT 16
26455: PUSH
26456: LD_INT 20
26458: PUSH
26459: LD_INT 21
26461: PUSH
26462: LD_INT 22
26464: PUSH
26465: LD_INT 23
26467: PUSH
26468: LD_INT 25
26470: PUSH
26471: LD_INT 26
26473: PUSH
26474: LD_INT 30
26476: PUSH
26477: LD_INT 31
26479: PUSH
26480: LD_INT 32
26482: PUSH
26483: LD_INT 36
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 101
26510: PUSH
26511: LD_INT 102
26513: PUSH
26514: LD_INT 103
26516: PUSH
26517: LD_INT 105
26519: PUSH
26520: LD_INT 106
26522: PUSH
26523: LD_INT 108
26525: PUSH
26526: LD_INT 109
26528: PUSH
26529: LD_INT 112
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: ST_TO_ADDR
26546: GO 28669
26548: LD_INT 9
26550: DOUBLE
26551: EQUAL
26552: IFTRUE 26556
26554: GO 26692
26556: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
26557: NOP4
26561: PUSH
26562: LD_INT 2
26564: PUSH
26565: LD_INT 4
26567: PUSH
26568: LD_INT 5
26570: PUSH
26571: LD_INT 6
26573: PUSH
26574: LD_INT 7
26576: PUSH
26577: LD_INT 8
26579: PUSH
26580: LD_INT 11
26582: PUSH
26583: LD_INT 12
26585: PUSH
26586: LD_INT 15
26588: PUSH
26589: LD_INT 16
26591: PUSH
26592: LD_INT 20
26594: PUSH
26595: LD_INT 21
26597: PUSH
26598: LD_INT 22
26600: PUSH
26601: LD_INT 23
26603: PUSH
26604: LD_INT 25
26606: PUSH
26607: LD_INT 26
26609: PUSH
26610: LD_INT 28
26612: PUSH
26613: LD_INT 30
26615: PUSH
26616: LD_INT 31
26618: PUSH
26619: LD_INT 32
26621: PUSH
26622: LD_INT 36
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 101
26650: PUSH
26651: LD_INT 102
26653: PUSH
26654: LD_INT 103
26656: PUSH
26657: LD_INT 105
26659: PUSH
26660: LD_INT 106
26662: PUSH
26663: LD_INT 108
26665: PUSH
26666: LD_INT 109
26668: PUSH
26669: LD_INT 112
26671: PUSH
26672: LD_INT 114
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: ST_TO_ADDR
26690: GO 28669
26692: LD_INT 10
26694: DOUBLE
26695: EQUAL
26696: IFTRUE 26700
26698: GO 26884
26700: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
26701: NOP4
26705: PUSH
26706: LD_INT 2
26708: PUSH
26709: LD_INT 4
26711: PUSH
26712: LD_INT 5
26714: PUSH
26715: LD_INT 6
26717: PUSH
26718: LD_INT 7
26720: PUSH
26721: LD_INT 8
26723: PUSH
26724: LD_INT 9
26726: PUSH
26727: LD_INT 10
26729: PUSH
26730: LD_INT 11
26732: PUSH
26733: LD_INT 12
26735: PUSH
26736: LD_INT 13
26738: PUSH
26739: LD_INT 14
26741: PUSH
26742: LD_INT 15
26744: PUSH
26745: LD_INT 16
26747: PUSH
26748: LD_INT 17
26750: PUSH
26751: LD_INT 18
26753: PUSH
26754: LD_INT 19
26756: PUSH
26757: LD_INT 20
26759: PUSH
26760: LD_INT 21
26762: PUSH
26763: LD_INT 22
26765: PUSH
26766: LD_INT 23
26768: PUSH
26769: LD_INT 24
26771: PUSH
26772: LD_INT 25
26774: PUSH
26775: LD_INT 26
26777: PUSH
26778: LD_INT 28
26780: PUSH
26781: LD_INT 30
26783: PUSH
26784: LD_INT 31
26786: PUSH
26787: LD_INT 32
26789: PUSH
26790: LD_INT 36
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 101
26826: PUSH
26827: LD_INT 102
26829: PUSH
26830: LD_INT 103
26832: PUSH
26833: LD_INT 104
26835: PUSH
26836: LD_INT 105
26838: PUSH
26839: LD_INT 106
26841: PUSH
26842: LD_INT 107
26844: PUSH
26845: LD_INT 108
26847: PUSH
26848: LD_INT 109
26850: PUSH
26851: LD_INT 110
26853: PUSH
26854: LD_INT 111
26856: PUSH
26857: LD_INT 112
26859: PUSH
26860: LD_INT 114
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: ST_TO_ADDR
26882: GO 28669
26884: LD_INT 11
26886: DOUBLE
26887: EQUAL
26888: IFTRUE 26892
26890: GO 27084
26892: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
26893: NOP4
26897: PUSH
26898: LD_INT 2
26900: PUSH
26901: LD_INT 3
26903: PUSH
26904: LD_INT 4
26906: PUSH
26907: LD_INT 5
26909: PUSH
26910: LD_INT 6
26912: PUSH
26913: LD_INT 7
26915: PUSH
26916: LD_INT 8
26918: PUSH
26919: LD_INT 9
26921: PUSH
26922: LD_INT 10
26924: PUSH
26925: LD_INT 11
26927: PUSH
26928: LD_INT 12
26930: PUSH
26931: LD_INT 13
26933: PUSH
26934: LD_INT 14
26936: PUSH
26937: LD_INT 15
26939: PUSH
26940: LD_INT 16
26942: PUSH
26943: LD_INT 17
26945: PUSH
26946: LD_INT 18
26948: PUSH
26949: LD_INT 19
26951: PUSH
26952: LD_INT 20
26954: PUSH
26955: LD_INT 21
26957: PUSH
26958: LD_INT 22
26960: PUSH
26961: LD_INT 23
26963: PUSH
26964: LD_INT 24
26966: PUSH
26967: LD_INT 25
26969: PUSH
26970: LD_INT 26
26972: PUSH
26973: LD_INT 28
26975: PUSH
26976: LD_INT 30
26978: PUSH
26979: LD_INT 31
26981: PUSH
26982: LD_INT 32
26984: PUSH
26985: LD_INT 34
26987: PUSH
26988: LD_INT 36
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 101
27026: PUSH
27027: LD_INT 102
27029: PUSH
27030: LD_INT 103
27032: PUSH
27033: LD_INT 104
27035: PUSH
27036: LD_INT 105
27038: PUSH
27039: LD_INT 106
27041: PUSH
27042: LD_INT 107
27044: PUSH
27045: LD_INT 108
27047: PUSH
27048: LD_INT 109
27050: PUSH
27051: LD_INT 110
27053: PUSH
27054: LD_INT 111
27056: PUSH
27057: LD_INT 112
27059: PUSH
27060: LD_INT 114
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: ST_TO_ADDR
27082: GO 28669
27084: LD_INT 12
27086: DOUBLE
27087: EQUAL
27088: IFTRUE 27092
27090: GO 27300
27092: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
27093: NOP4
27097: PUSH
27098: LD_INT 1
27100: PUSH
27101: LD_INT 2
27103: PUSH
27104: LD_INT 3
27106: PUSH
27107: LD_INT 4
27109: PUSH
27110: LD_INT 5
27112: PUSH
27113: LD_INT 6
27115: PUSH
27116: LD_INT 7
27118: PUSH
27119: LD_INT 8
27121: PUSH
27122: LD_INT 9
27124: PUSH
27125: LD_INT 10
27127: PUSH
27128: LD_INT 11
27130: PUSH
27131: LD_INT 12
27133: PUSH
27134: LD_INT 13
27136: PUSH
27137: LD_INT 14
27139: PUSH
27140: LD_INT 15
27142: PUSH
27143: LD_INT 16
27145: PUSH
27146: LD_INT 17
27148: PUSH
27149: LD_INT 18
27151: PUSH
27152: LD_INT 19
27154: PUSH
27155: LD_INT 20
27157: PUSH
27158: LD_INT 21
27160: PUSH
27161: LD_INT 22
27163: PUSH
27164: LD_INT 23
27166: PUSH
27167: LD_INT 24
27169: PUSH
27170: LD_INT 25
27172: PUSH
27173: LD_INT 26
27175: PUSH
27176: LD_INT 27
27178: PUSH
27179: LD_INT 28
27181: PUSH
27182: LD_INT 30
27184: PUSH
27185: LD_INT 31
27187: PUSH
27188: LD_INT 32
27190: PUSH
27191: LD_INT 33
27193: PUSH
27194: LD_INT 34
27196: PUSH
27197: LD_INT 36
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 101
27238: PUSH
27239: LD_INT 102
27241: PUSH
27242: LD_INT 103
27244: PUSH
27245: LD_INT 104
27247: PUSH
27248: LD_INT 105
27250: PUSH
27251: LD_INT 106
27253: PUSH
27254: LD_INT 107
27256: PUSH
27257: LD_INT 108
27259: PUSH
27260: LD_INT 109
27262: PUSH
27263: LD_INT 110
27265: PUSH
27266: LD_INT 111
27268: PUSH
27269: LD_INT 112
27271: PUSH
27272: LD_INT 113
27274: PUSH
27275: LD_INT 114
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: ST_TO_ADDR
27298: GO 28669
27300: LD_INT 13
27302: DOUBLE
27303: EQUAL
27304: IFTRUE 27308
27306: GO 27504
27308: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
27309: NOP4
27313: PUSH
27314: LD_INT 1
27316: PUSH
27317: LD_INT 2
27319: PUSH
27320: LD_INT 3
27322: PUSH
27323: LD_INT 4
27325: PUSH
27326: LD_INT 5
27328: PUSH
27329: LD_INT 8
27331: PUSH
27332: LD_INT 9
27334: PUSH
27335: LD_INT 10
27337: PUSH
27338: LD_INT 11
27340: PUSH
27341: LD_INT 12
27343: PUSH
27344: LD_INT 14
27346: PUSH
27347: LD_INT 15
27349: PUSH
27350: LD_INT 16
27352: PUSH
27353: LD_INT 17
27355: PUSH
27356: LD_INT 18
27358: PUSH
27359: LD_INT 19
27361: PUSH
27362: LD_INT 20
27364: PUSH
27365: LD_INT 21
27367: PUSH
27368: LD_INT 22
27370: PUSH
27371: LD_INT 23
27373: PUSH
27374: LD_INT 24
27376: PUSH
27377: LD_INT 25
27379: PUSH
27380: LD_INT 26
27382: PUSH
27383: LD_INT 27
27385: PUSH
27386: LD_INT 28
27388: PUSH
27389: LD_INT 30
27391: PUSH
27392: LD_INT 31
27394: PUSH
27395: LD_INT 32
27397: PUSH
27398: LD_INT 33
27400: PUSH
27401: LD_INT 34
27403: PUSH
27404: LD_INT 36
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 101
27442: PUSH
27443: LD_INT 102
27445: PUSH
27446: LD_INT 103
27448: PUSH
27449: LD_INT 104
27451: PUSH
27452: LD_INT 105
27454: PUSH
27455: LD_INT 106
27457: PUSH
27458: LD_INT 107
27460: PUSH
27461: LD_INT 108
27463: PUSH
27464: LD_INT 109
27466: PUSH
27467: LD_INT 110
27469: PUSH
27470: LD_INT 111
27472: PUSH
27473: LD_INT 112
27475: PUSH
27476: LD_INT 113
27478: PUSH
27479: LD_INT 114
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: ST_TO_ADDR
27502: GO 28669
27504: LD_INT 14
27506: DOUBLE
27507: EQUAL
27508: IFTRUE 27512
27510: GO 27724
27512: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
27513: NOP4
27517: PUSH
27518: LD_INT 1
27520: PUSH
27521: LD_INT 2
27523: PUSH
27524: LD_INT 3
27526: PUSH
27527: LD_INT 4
27529: PUSH
27530: LD_INT 5
27532: PUSH
27533: LD_INT 6
27535: PUSH
27536: LD_INT 7
27538: PUSH
27539: LD_INT 8
27541: PUSH
27542: LD_INT 9
27544: PUSH
27545: LD_INT 10
27547: PUSH
27548: LD_INT 11
27550: PUSH
27551: LD_INT 12
27553: PUSH
27554: LD_INT 13
27556: PUSH
27557: LD_INT 14
27559: PUSH
27560: LD_INT 15
27562: PUSH
27563: LD_INT 16
27565: PUSH
27566: LD_INT 17
27568: PUSH
27569: LD_INT 18
27571: PUSH
27572: LD_INT 19
27574: PUSH
27575: LD_INT 20
27577: PUSH
27578: LD_INT 21
27580: PUSH
27581: LD_INT 22
27583: PUSH
27584: LD_INT 23
27586: PUSH
27587: LD_INT 24
27589: PUSH
27590: LD_INT 25
27592: PUSH
27593: LD_INT 26
27595: PUSH
27596: LD_INT 27
27598: PUSH
27599: LD_INT 28
27601: PUSH
27602: LD_INT 29
27604: PUSH
27605: LD_INT 30
27607: PUSH
27608: LD_INT 31
27610: PUSH
27611: LD_INT 32
27613: PUSH
27614: LD_INT 33
27616: PUSH
27617: LD_INT 34
27619: PUSH
27620: LD_INT 36
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 101
27662: PUSH
27663: LD_INT 102
27665: PUSH
27666: LD_INT 103
27668: PUSH
27669: LD_INT 104
27671: PUSH
27672: LD_INT 105
27674: PUSH
27675: LD_INT 106
27677: PUSH
27678: LD_INT 107
27680: PUSH
27681: LD_INT 108
27683: PUSH
27684: LD_INT 109
27686: PUSH
27687: LD_INT 110
27689: PUSH
27690: LD_INT 111
27692: PUSH
27693: LD_INT 112
27695: PUSH
27696: LD_INT 113
27698: PUSH
27699: LD_INT 114
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: ST_TO_ADDR
27722: GO 28669
27724: LD_INT 15
27726: DOUBLE
27727: EQUAL
27728: IFTRUE 27732
27730: GO 27944
27732: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
27733: NOP4
27737: PUSH
27738: LD_INT 1
27740: PUSH
27741: LD_INT 2
27743: PUSH
27744: LD_INT 3
27746: PUSH
27747: LD_INT 4
27749: PUSH
27750: LD_INT 5
27752: PUSH
27753: LD_INT 6
27755: PUSH
27756: LD_INT 7
27758: PUSH
27759: LD_INT 8
27761: PUSH
27762: LD_INT 9
27764: PUSH
27765: LD_INT 10
27767: PUSH
27768: LD_INT 11
27770: PUSH
27771: LD_INT 12
27773: PUSH
27774: LD_INT 13
27776: PUSH
27777: LD_INT 14
27779: PUSH
27780: LD_INT 15
27782: PUSH
27783: LD_INT 16
27785: PUSH
27786: LD_INT 17
27788: PUSH
27789: LD_INT 18
27791: PUSH
27792: LD_INT 19
27794: PUSH
27795: LD_INT 20
27797: PUSH
27798: LD_INT 21
27800: PUSH
27801: LD_INT 22
27803: PUSH
27804: LD_INT 23
27806: PUSH
27807: LD_INT 24
27809: PUSH
27810: LD_INT 25
27812: PUSH
27813: LD_INT 26
27815: PUSH
27816: LD_INT 27
27818: PUSH
27819: LD_INT 28
27821: PUSH
27822: LD_INT 29
27824: PUSH
27825: LD_INT 30
27827: PUSH
27828: LD_INT 31
27830: PUSH
27831: LD_INT 32
27833: PUSH
27834: LD_INT 33
27836: PUSH
27837: LD_INT 34
27839: PUSH
27840: LD_INT 36
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 101
27882: PUSH
27883: LD_INT 102
27885: PUSH
27886: LD_INT 103
27888: PUSH
27889: LD_INT 104
27891: PUSH
27892: LD_INT 105
27894: PUSH
27895: LD_INT 106
27897: PUSH
27898: LD_INT 107
27900: PUSH
27901: LD_INT 108
27903: PUSH
27904: LD_INT 109
27906: PUSH
27907: LD_INT 110
27909: PUSH
27910: LD_INT 111
27912: PUSH
27913: LD_INT 112
27915: PUSH
27916: LD_INT 113
27918: PUSH
27919: LD_INT 114
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: ST_TO_ADDR
27942: GO 28669
27944: LD_INT 16
27946: DOUBLE
27947: EQUAL
27948: IFTRUE 27952
27950: GO 28076
27952: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
27953: NOP4
27957: PUSH
27958: LD_INT 2
27960: PUSH
27961: LD_INT 4
27963: PUSH
27964: LD_INT 5
27966: PUSH
27967: LD_INT 7
27969: PUSH
27970: LD_INT 11
27972: PUSH
27973: LD_INT 12
27975: PUSH
27976: LD_INT 15
27978: PUSH
27979: LD_INT 16
27981: PUSH
27982: LD_INT 20
27984: PUSH
27985: LD_INT 21
27987: PUSH
27988: LD_INT 22
27990: PUSH
27991: LD_INT 23
27993: PUSH
27994: LD_INT 25
27996: PUSH
27997: LD_INT 26
27999: PUSH
28000: LD_INT 30
28002: PUSH
28003: LD_INT 31
28005: PUSH
28006: LD_INT 32
28008: PUSH
28009: LD_INT 33
28011: PUSH
28012: LD_INT 34
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 101
28038: PUSH
28039: LD_INT 102
28041: PUSH
28042: LD_INT 103
28044: PUSH
28045: LD_INT 106
28047: PUSH
28048: LD_INT 108
28050: PUSH
28051: LD_INT 112
28053: PUSH
28054: LD_INT 113
28056: PUSH
28057: LD_INT 114
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: ST_TO_ADDR
28074: GO 28669
28076: LD_INT 17
28078: DOUBLE
28079: EQUAL
28080: IFTRUE 28084
28082: GO 28296
28084: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
28085: NOP4
28089: PUSH
28090: LD_INT 1
28092: PUSH
28093: LD_INT 2
28095: PUSH
28096: LD_INT 3
28098: PUSH
28099: LD_INT 4
28101: PUSH
28102: LD_INT 5
28104: PUSH
28105: LD_INT 6
28107: PUSH
28108: LD_INT 7
28110: PUSH
28111: LD_INT 8
28113: PUSH
28114: LD_INT 9
28116: PUSH
28117: LD_INT 10
28119: PUSH
28120: LD_INT 11
28122: PUSH
28123: LD_INT 12
28125: PUSH
28126: LD_INT 13
28128: PUSH
28129: LD_INT 14
28131: PUSH
28132: LD_INT 15
28134: PUSH
28135: LD_INT 16
28137: PUSH
28138: LD_INT 17
28140: PUSH
28141: LD_INT 18
28143: PUSH
28144: LD_INT 19
28146: PUSH
28147: LD_INT 20
28149: PUSH
28150: LD_INT 21
28152: PUSH
28153: LD_INT 22
28155: PUSH
28156: LD_INT 23
28158: PUSH
28159: LD_INT 24
28161: PUSH
28162: LD_INT 25
28164: PUSH
28165: LD_INT 26
28167: PUSH
28168: LD_INT 27
28170: PUSH
28171: LD_INT 28
28173: PUSH
28174: LD_INT 29
28176: PUSH
28177: LD_INT 30
28179: PUSH
28180: LD_INT 31
28182: PUSH
28183: LD_INT 32
28185: PUSH
28186: LD_INT 33
28188: PUSH
28189: LD_INT 34
28191: PUSH
28192: LD_INT 36
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 101
28234: PUSH
28235: LD_INT 102
28237: PUSH
28238: LD_INT 103
28240: PUSH
28241: LD_INT 104
28243: PUSH
28244: LD_INT 105
28246: PUSH
28247: LD_INT 106
28249: PUSH
28250: LD_INT 107
28252: PUSH
28253: LD_INT 108
28255: PUSH
28256: LD_INT 109
28258: PUSH
28259: LD_INT 110
28261: PUSH
28262: LD_INT 111
28264: PUSH
28265: LD_INT 112
28267: PUSH
28268: LD_INT 113
28270: PUSH
28271: LD_INT 114
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: ST_TO_ADDR
28294: GO 28669
28296: LD_INT 18
28298: DOUBLE
28299: EQUAL
28300: IFTRUE 28304
28302: GO 28440
28304: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
28305: NOP4
28309: PUSH
28310: LD_INT 2
28312: PUSH
28313: LD_INT 4
28315: PUSH
28316: LD_INT 5
28318: PUSH
28319: LD_INT 7
28321: PUSH
28322: LD_INT 11
28324: PUSH
28325: LD_INT 12
28327: PUSH
28328: LD_INT 15
28330: PUSH
28331: LD_INT 16
28333: PUSH
28334: LD_INT 20
28336: PUSH
28337: LD_INT 21
28339: PUSH
28340: LD_INT 22
28342: PUSH
28343: LD_INT 23
28345: PUSH
28346: LD_INT 25
28348: PUSH
28349: LD_INT 26
28351: PUSH
28352: LD_INT 30
28354: PUSH
28355: LD_INT 31
28357: PUSH
28358: LD_INT 32
28360: PUSH
28361: LD_INT 33
28363: PUSH
28364: LD_INT 34
28366: PUSH
28367: LD_INT 35
28369: PUSH
28370: LD_INT 36
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 101
28398: PUSH
28399: LD_INT 102
28401: PUSH
28402: LD_INT 103
28404: PUSH
28405: LD_INT 106
28407: PUSH
28408: LD_INT 108
28410: PUSH
28411: LD_INT 112
28413: PUSH
28414: LD_INT 113
28416: PUSH
28417: LD_INT 114
28419: PUSH
28420: LD_INT 115
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: LIST
28431: LIST
28432: LIST
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: ST_TO_ADDR
28438: GO 28669
28440: LD_INT 19
28442: DOUBLE
28443: EQUAL
28444: IFTRUE 28448
28446: GO 28668
28448: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
28449: NOP4
28453: PUSH
28454: LD_INT 1
28456: PUSH
28457: LD_INT 2
28459: PUSH
28460: LD_INT 3
28462: PUSH
28463: LD_INT 4
28465: PUSH
28466: LD_INT 5
28468: PUSH
28469: LD_INT 6
28471: PUSH
28472: LD_INT 7
28474: PUSH
28475: LD_INT 8
28477: PUSH
28478: LD_INT 9
28480: PUSH
28481: LD_INT 10
28483: PUSH
28484: LD_INT 11
28486: PUSH
28487: LD_INT 12
28489: PUSH
28490: LD_INT 13
28492: PUSH
28493: LD_INT 14
28495: PUSH
28496: LD_INT 15
28498: PUSH
28499: LD_INT 16
28501: PUSH
28502: LD_INT 17
28504: PUSH
28505: LD_INT 18
28507: PUSH
28508: LD_INT 19
28510: PUSH
28511: LD_INT 20
28513: PUSH
28514: LD_INT 21
28516: PUSH
28517: LD_INT 22
28519: PUSH
28520: LD_INT 23
28522: PUSH
28523: LD_INT 24
28525: PUSH
28526: LD_INT 25
28528: PUSH
28529: LD_INT 26
28531: PUSH
28532: LD_INT 27
28534: PUSH
28535: LD_INT 28
28537: PUSH
28538: LD_INT 29
28540: PUSH
28541: LD_INT 30
28543: PUSH
28544: LD_INT 31
28546: PUSH
28547: LD_INT 32
28549: PUSH
28550: LD_INT 33
28552: PUSH
28553: LD_INT 34
28555: PUSH
28556: LD_INT 35
28558: PUSH
28559: LD_INT 36
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 101
28602: PUSH
28603: LD_INT 102
28605: PUSH
28606: LD_INT 103
28608: PUSH
28609: LD_INT 104
28611: PUSH
28612: LD_INT 105
28614: PUSH
28615: LD_INT 106
28617: PUSH
28618: LD_INT 107
28620: PUSH
28621: LD_INT 108
28623: PUSH
28624: LD_INT 109
28626: PUSH
28627: LD_INT 110
28629: PUSH
28630: LD_INT 111
28632: PUSH
28633: LD_INT 112
28635: PUSH
28636: LD_INT 113
28638: PUSH
28639: LD_INT 114
28641: PUSH
28642: LD_INT 115
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: ST_TO_ADDR
28666: GO 28669
28668: POP
// end else
28669: GO 28888
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
28671: NOP4
28675: PUSH
28676: LD_INT 1
28678: PUSH
28679: LD_INT 2
28681: PUSH
28682: LD_INT 3
28684: PUSH
28685: LD_INT 4
28687: PUSH
28688: LD_INT 5
28690: PUSH
28691: LD_INT 6
28693: PUSH
28694: LD_INT 7
28696: PUSH
28697: LD_INT 8
28699: PUSH
28700: LD_INT 9
28702: PUSH
28703: LD_INT 10
28705: PUSH
28706: LD_INT 11
28708: PUSH
28709: LD_INT 12
28711: PUSH
28712: LD_INT 13
28714: PUSH
28715: LD_INT 14
28717: PUSH
28718: LD_INT 15
28720: PUSH
28721: LD_INT 16
28723: PUSH
28724: LD_INT 17
28726: PUSH
28727: LD_INT 18
28729: PUSH
28730: LD_INT 19
28732: PUSH
28733: LD_INT 20
28735: PUSH
28736: LD_INT 21
28738: PUSH
28739: LD_INT 22
28741: PUSH
28742: LD_INT 23
28744: PUSH
28745: LD_INT 24
28747: PUSH
28748: LD_INT 25
28750: PUSH
28751: LD_INT 26
28753: PUSH
28754: LD_INT 27
28756: PUSH
28757: LD_INT 28
28759: PUSH
28760: LD_INT 29
28762: PUSH
28763: LD_INT 30
28765: PUSH
28766: LD_INT 31
28768: PUSH
28769: LD_INT 32
28771: PUSH
28772: LD_INT 33
28774: PUSH
28775: LD_INT 34
28777: PUSH
28778: LD_INT 35
28780: PUSH
28781: LD_INT 36
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 101
28824: PUSH
28825: LD_INT 102
28827: PUSH
28828: LD_INT 103
28830: PUSH
28831: LD_INT 104
28833: PUSH
28834: LD_INT 105
28836: PUSH
28837: LD_INT 106
28839: PUSH
28840: LD_INT 107
28842: PUSH
28843: LD_INT 108
28845: PUSH
28846: LD_INT 109
28848: PUSH
28849: LD_INT 110
28851: PUSH
28852: LD_INT 111
28854: PUSH
28855: LD_INT 112
28857: PUSH
28858: LD_INT 113
28860: PUSH
28861: LD_INT 114
28863: PUSH
28864: LD_INT 115
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: ST_TO_ADDR
// if result then
28888: NOP4
28892: IFFALSE 29181
// begin normal :=  ;
28894: NOP4
28898: PUSH
28899: LD_STRING 
28901: ST_TO_ADDR
// hardcore :=  ;
28902: NOP4
28906: PUSH
28907: LD_STRING 
28909: ST_TO_ADDR
// for i = 1 to normalCounter do
28910: NOP4
28914: PUSH
28915: DOUBLE
28916: LD_INT 1
28918: DEC
28919: ST_TO_ADDR
28920: NOP4
28924: PUSH
28925: FOR_TO
28926: IFFALSE 29027
// begin tmp := 0 ;
28928: NOP4
28932: PUSH
28933: LD_STRING 0
28935: ST_TO_ADDR
// if result [ 1 ] then
28936: NOP4
28940: PUSH
28941: LD_INT 1
28943: ARRAY
28944: IFFALSE 29009
// if result [ 1 ] [ 1 ] = i then
28946: NOP4
28950: PUSH
28951: LD_INT 1
28953: ARRAY
28954: PUSH
28955: LD_INT 1
28957: ARRAY
28958: PUSH
28959: NOP4
28963: EQUAL
28964: IFFALSE 29009
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
28966: NOP4
28970: PUSH
28971: NOP4
28975: PPUSH
28976: LD_INT 1
28978: PPUSH
28979: NOP4
28983: PUSH
28984: LD_INT 1
28986: ARRAY
28987: PPUSH
28988: LD_INT 1
28990: PPUSH
28991: NOP4
28995: PPUSH
28996: NOP4
29000: ST_TO_ADDR
// tmp := 1 ;
29001: NOP4
29005: PUSH
29006: LD_STRING 1
29008: ST_TO_ADDR
// end ; normal := normal & tmp ;
29009: NOP4
29013: PUSH
29014: NOP4
29018: PUSH
29019: NOP4
29023: STR
29024: ST_TO_ADDR
// end ;
29025: GO 28925
29027: POP
29028: POP
// for i = 1 to hardcoreCounter do
29029: NOP4
29033: PUSH
29034: DOUBLE
29035: LD_INT 1
29037: DEC
29038: ST_TO_ADDR
29039: NOP4
29043: PUSH
29044: FOR_TO
29045: IFFALSE 29150
// begin tmp := 0 ;
29047: NOP4
29051: PUSH
29052: LD_STRING 0
29054: ST_TO_ADDR
// if result [ 2 ] then
29055: NOP4
29059: PUSH
29060: LD_INT 2
29062: ARRAY
29063: IFFALSE 29132
// if result [ 2 ] [ 1 ] = 100 + i then
29065: NOP4
29069: PUSH
29070: LD_INT 2
29072: ARRAY
29073: PUSH
29074: LD_INT 1
29076: ARRAY
29077: PUSH
29078: LD_INT 100
29080: PUSH
29081: NOP4
29085: PLUS
29086: EQUAL
29087: IFFALSE 29132
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
29089: NOP4
29093: PUSH
29094: NOP4
29098: PPUSH
29099: LD_INT 2
29101: PPUSH
29102: NOP4
29106: PUSH
29107: LD_INT 2
29109: ARRAY
29110: PPUSH
29111: LD_INT 1
29113: PPUSH
29114: NOP4
29118: PPUSH
29119: NOP4
29123: ST_TO_ADDR
// tmp := 1 ;
29124: NOP4
29128: PUSH
29129: LD_STRING 1
29131: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
29132: NOP4
29136: PUSH
29137: NOP4
29141: PUSH
29142: NOP4
29146: STR
29147: ST_TO_ADDR
// end ;
29148: GO 29044
29150: POP
29151: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
29152: LD_STRING getStreamItemsFromMission("
29154: PUSH
29155: NOP4
29159: STR
29160: PUSH
29161: LD_STRING ","
29163: STR
29164: PUSH
29165: NOP4
29169: STR
29170: PUSH
29171: LD_STRING ")
29173: STR
29174: PPUSH
29175: NOP4
// end else
29179: GO 29188
// ToLua ( getStreamItemsFromMission("","") ) ;
29181: LD_STRING getStreamItemsFromMission("","")
29183: PPUSH
29184: NOP4
// end ;
29188: LD_VAR 0 1
29192: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
29193: NOP4
29197: PUSH
29198: NOP4
29202: AND
29203: IFFALSE 29327
29205: GO 29207
29207: DISABLE
29208: LD_INT 0
29210: PPUSH
29211: PPUSH
// begin enable ;
29212: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
29213: NOP4
29217: PUSH
29218: LD_INT 22
29220: PUSH
29221: NOP4
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 2
29232: PUSH
29233: LD_INT 34
29235: PUSH
29236: LD_INT 7
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 34
29245: PUSH
29246: LD_INT 45
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 34
29255: PUSH
29256: LD_INT 28
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 34
29265: PUSH
29266: LD_INT 47
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PPUSH
29284: NOP4
29288: ST_TO_ADDR
// if not tmp then
29289: NOP4
29293: NOT
29294: IFFALSE 29298
// exit ;
29296: GO 29327
// for i in tmp do
29298: NOP4
29302: PUSH
29303: NOP4
29307: PUSH
29308: FOR_IN
29309: IFFALSE 29325
// begin SetLives ( i , 0 ) ;
29311: NOP4
29315: PPUSH
29316: LD_INT 0
29318: PPUSH
29319: NOP4
// end ;
29323: GO 29308
29325: POP
29326: POP
// end ;
29327: PPOPN 2
29329: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
29330: NOP4
29334: PUSH
29335: NOP4
29339: AND
29340: IFFALSE 29424
29342: GO 29344
29344: DISABLE
29345: LD_INT 0
29347: PPUSH
29348: PPUSH
// begin enable ;
29349: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
29350: NOP4
29354: PUSH
29355: LD_INT 22
29357: PUSH
29358: NOP4
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: LD_INT 32
29369: PUSH
29370: LD_INT 3
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PPUSH
29381: NOP4
29385: ST_TO_ADDR
// if not tmp then
29386: NOP4
29390: NOT
29391: IFFALSE 29395
// exit ;
29393: GO 29424
// for i in tmp do
29395: NOP4
29399: PUSH
29400: NOP4
29404: PUSH
29405: FOR_IN
29406: IFFALSE 29422
// begin SetLives ( i , 0 ) ;
29408: NOP4
29412: PPUSH
29413: LD_INT 0
29415: PPUSH
29416: NOP4
// end ;
29420: GO 29405
29422: POP
29423: POP
// end ;
29424: PPOPN 2
29426: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
29427: NOP4
29431: PUSH
29432: NOP4
29436: AND
29437: IFFALSE 29530
29439: GO 29441
29441: DISABLE
29442: LD_INT 0
29444: PPUSH
// begin enable ;
29445: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
29446: NOP4
29450: PUSH
29451: LD_INT 22
29453: PUSH
29454: NOP4
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 2
29465: PUSH
29466: LD_INT 25
29468: PUSH
29469: LD_INT 5
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 25
29478: PUSH
29479: LD_INT 9
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 25
29488: PUSH
29489: LD_INT 8
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PPUSH
29506: NOP4
29510: PUSH
29511: FOR_IN
29512: IFFALSE 29528
// begin SetClass ( i , 1 ) ;
29514: NOP4
29518: PPUSH
29519: LD_INT 1
29521: PPUSH
29522: NOP4
// end ;
29526: GO 29511
29528: POP
29529: POP
// end ;
29530: PPOPN 1
29532: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
29533: NOP4
29537: PUSH
29538: NOP4
29542: AND
29543: PUSH
29544: NOP4
29548: PUSH
29549: LD_INT 7
29551: LESS
29552: AND
29553: IFFALSE 29567
29555: GO 29557
29557: DISABLE
// begin enable ;
29558: ENABLE
// game_speed := 7 ;
29559: LD_ADDR_OWVAR 65
29563: PUSH
29564: LD_INT 7
29566: ST_TO_ADDR
// end ;
29567: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
29568: NOP4
29572: PUSH
29573: NOP4
29577: AND
29578: IFFALSE 29780
29580: GO 29582
29582: DISABLE
29583: LD_INT 0
29585: PPUSH
29586: PPUSH
29587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29588: NOP4
29592: PUSH
29593: LD_INT 81
29595: PUSH
29596: NOP4
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: LD_INT 21
29607: PUSH
29608: LD_INT 1
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PPUSH
29619: NOP4
29623: ST_TO_ADDR
// if not tmp then
29624: NOP4
29628: NOT
29629: IFFALSE 29633
// exit ;
29631: GO 29780
// if tmp > 5 then
29633: NOP4
29637: PUSH
29638: LD_INT 5
29640: GREATER
29641: IFFALSE 29653
// k := 5 else
29643: NOP4
29647: PUSH
29648: LD_INT 5
29650: ST_TO_ADDR
29651: GO 29663
// k := tmp ;
29653: NOP4
29657: PUSH
29658: NOP4
29662: ST_TO_ADDR
// for i := 1 to k do
29663: NOP4
29667: PUSH
29668: DOUBLE
29669: LD_INT 1
29671: DEC
29672: ST_TO_ADDR
29673: NOP4
29677: PUSH
29678: FOR_TO
29679: IFFALSE 29778
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
29681: NOP4
29685: PUSH
29686: NOP4
29690: ARRAY
29691: PPUSH
29692: NOP4
29696: PUSH
29697: LD_INT 4
29699: MOD
29700: PUSH
29701: LD_INT 1
29703: PLUS
29704: PPUSH
29705: NOP4
29709: PUSH
29710: LD_INT 10
29712: LESS
29713: IFFALSE 29776
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
29715: NOP4
29719: PUSH
29720: NOP4
29724: ARRAY
29725: PPUSH
29726: NOP4
29730: PUSH
29731: LD_INT 4
29733: MOD
29734: PUSH
29735: LD_INT 1
29737: PLUS
29738: PPUSH
29739: NOP4
29743: PUSH
29744: NOP4
29748: ARRAY
29749: PPUSH
29750: NOP4
29754: PUSH
29755: LD_INT 4
29757: MOD
29758: PUSH
29759: LD_INT 1
29761: PLUS
29762: PPUSH
29763: NOP4
29767: PUSH
29768: LD_INT 1
29770: PLUS
29771: PPUSH
29772: NOP4
29776: GO 29678
29778: POP
29779: POP
// end ;
29780: PPOPN 3
29782: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
29783: NOP4
29787: PUSH
29788: NOP4
29792: AND
29793: IFFALSE 29813
29795: GO 29797
29797: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
29798: LD_INT 4
29800: PPUSH
29801: NOP4
29805: PPUSH
29806: LD_INT 0
29808: PPUSH
29809: NOP4
29813: END
// every 0 0$1 trigger StreamModeActive and sShovel do
29814: NOP4
29818: PUSH
29819: NOP4
29823: AND
29824: IFFALSE 29844
29826: GO 29828
29828: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
29829: LD_INT 19
29831: PPUSH
29832: NOP4
29836: PPUSH
29837: LD_INT 0
29839: PPUSH
29840: NOP4
29844: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
29845: NOP4
29849: PUSH
29850: NOP4
29854: AND
29855: IFFALSE 29957
29857: GO 29859
29859: DISABLE
29860: LD_INT 0
29862: PPUSH
29863: PPUSH
// begin enable ;
29864: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
29865: NOP4
29869: PUSH
29870: LD_INT 22
29872: PUSH
29873: NOP4
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 2
29884: PUSH
29885: LD_INT 34
29887: PUSH
29888: LD_INT 11
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 34
29897: PUSH
29898: LD_INT 30
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: LIST
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PPUSH
29914: NOP4
29918: ST_TO_ADDR
// if not tmp then
29919: NOP4
29923: NOT
29924: IFFALSE 29928
// exit ;
29926: GO 29957
// for i in tmp do
29928: NOP4
29932: PUSH
29933: NOP4
29937: PUSH
29938: FOR_IN
29939: IFFALSE 29955
// begin SetLives ( i , 0 ) ;
29941: NOP4
29945: PPUSH
29946: LD_INT 0
29948: PPUSH
29949: NOP4
// end ;
29953: GO 29938
29955: POP
29956: POP
// end ;
29957: PPOPN 2
29959: END
// every 0 0$1 trigger StreamModeActive and sBunker do
29960: NOP4
29964: PUSH
29965: NOP4
29969: AND
29970: IFFALSE 29990
29972: GO 29974
29974: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
29975: LD_INT 32
29977: PPUSH
29978: NOP4
29982: PPUSH
29983: LD_INT 0
29985: PPUSH
29986: NOP4
29990: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
29991: NOP4
29995: PUSH
29996: NOP4
30000: AND
30001: IFFALSE 30182
30003: GO 30005
30005: DISABLE
30006: LD_INT 0
30008: PPUSH
30009: PPUSH
30010: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
30011: NOP4
30015: PUSH
30016: LD_INT 22
30018: PUSH
30019: NOP4
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 33
30030: PUSH
30031: LD_INT 3
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PPUSH
30042: NOP4
30046: ST_TO_ADDR
// if not tmp then
30047: NOP4
30051: NOT
30052: IFFALSE 30056
// exit ;
30054: GO 30182
// side := 0 ;
30056: NOP4
30060: PUSH
30061: LD_INT 0
30063: ST_TO_ADDR
// for i := 1 to 8 do
30064: NOP4
30068: PUSH
30069: DOUBLE
30070: LD_INT 1
30072: DEC
30073: ST_TO_ADDR
30074: LD_INT 8
30076: PUSH
30077: FOR_TO
30078: IFFALSE 30126
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
30080: NOP4
30084: PUSH
30085: NOP4
30089: NONEQUAL
30090: PUSH
30091: NOP4
30095: PPUSH
30096: NOP4
30100: PPUSH
30101: NOP4
30105: PUSH
30106: LD_INT 2
30108: EQUAL
30109: AND
30110: IFFALSE 30124
// begin side := i ;
30112: NOP4
30116: PUSH
30117: NOP4
30121: ST_TO_ADDR
// break ;
30122: GO 30126
// end ;
30124: GO 30077
30126: POP
30127: POP
// if not side then
30128: NOP4
30132: NOT
30133: IFFALSE 30137
// exit ;
30135: GO 30182
// for i := 1 to tmp do
30137: NOP4
30141: PUSH
30142: DOUBLE
30143: LD_INT 1
30145: DEC
30146: ST_TO_ADDR
30147: NOP4
30151: PUSH
30152: FOR_TO
30153: IFFALSE 30180
// if Prob ( 60 ) then
30155: LD_INT 60
30157: PPUSH
30158: NOP4
30162: IFFALSE 30178
// SetSide ( i , side ) ;
30164: NOP4
30168: PPUSH
30169: NOP4
30173: PPUSH
30174: NOP4
30178: GO 30152
30180: POP
30181: POP
// end ;
30182: PPOPN 3
30184: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
30185: NOP4
30189: PUSH
30190: NOP4
30194: AND
30195: IFFALSE 30314
30197: GO 30199
30199: DISABLE
30200: LD_INT 0
30202: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
30203: NOP4
30207: PUSH
30208: LD_INT 22
30210: PUSH
30211: NOP4
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 21
30222: PUSH
30223: LD_INT 1
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 3
30232: PUSH
30233: LD_INT 23
30235: PUSH
30236: LD_INT 0
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: LIST
30251: PPUSH
30252: NOP4
30256: PUSH
30257: FOR_IN
30258: IFFALSE 30312
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
30260: NOP4
30264: PPUSH
30265: NOP4
30269: PUSH
30270: LD_INT 1
30272: PUSH
30273: LD_INT 2
30275: PUSH
30276: LD_INT 3
30278: PUSH
30279: LD_INT 4
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: IN
30288: IFFALSE 30310
// SetClass ( un , rand ( 1 , 4 ) ) ;
30290: NOP4
30294: PPUSH
30295: LD_INT 1
30297: PPUSH
30298: LD_INT 4
30300: PPUSH
30301: NOP4
30305: PPUSH
30306: NOP4
30310: GO 30257
30312: POP
30313: POP
// end ;
30314: PPOPN 1
30316: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
30317: NOP4
30321: PUSH
30322: NOP4
30326: AND
30327: IFFALSE 30406
30329: GO 30331
30331: DISABLE
30332: LD_INT 0
30334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
30335: NOP4
30339: PUSH
30340: LD_INT 22
30342: PUSH
30343: NOP4
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 21
30354: PUSH
30355: LD_INT 3
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PPUSH
30366: NOP4
30370: ST_TO_ADDR
// if not tmp then
30371: NOP4
30375: NOT
30376: IFFALSE 30380
// exit ;
30378: GO 30406
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
30380: NOP4
30384: PUSH
30385: LD_INT 1
30387: PPUSH
30388: NOP4
30392: PPUSH
30393: NOP4
30397: ARRAY
30398: PPUSH
30399: LD_INT 100
30401: PPUSH
30402: NOP4
// end ;
30406: PPOPN 1
30408: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
30409: NOP4
30413: PUSH
30414: NOP4
30418: AND
30419: IFFALSE 30517
30421: GO 30423
30423: DISABLE
30424: LD_INT 0
30426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30427: NOP4
30431: PUSH
30432: LD_INT 22
30434: PUSH
30435: NOP4
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 21
30446: PUSH
30447: LD_INT 1
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PPUSH
30458: NOP4
30462: ST_TO_ADDR
// if not tmp then
30463: NOP4
30467: NOT
30468: IFFALSE 30472
// exit ;
30470: GO 30517
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
30472: NOP4
30476: PUSH
30477: LD_INT 1
30479: PPUSH
30480: NOP4
30484: PPUSH
30485: NOP4
30489: ARRAY
30490: PPUSH
30491: LD_INT 1
30493: PPUSH
30494: LD_INT 4
30496: PPUSH
30497: NOP4
30501: PPUSH
30502: LD_INT 3000
30504: PPUSH
30505: LD_INT 9000
30507: PPUSH
30508: NOP4
30512: PPUSH
30513: NOP4
// end ;
30517: PPOPN 1
30519: END
// every 0 0$1 trigger StreamModeActive and sDepot do
30520: NOP4
30524: PUSH
30525: NOP4
30529: AND
30530: IFFALSE 30550
30532: GO 30534
30534: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
30535: LD_INT 1
30537: PPUSH
30538: NOP4
30542: PPUSH
30543: LD_INT 0
30545: PPUSH
30546: NOP4
30550: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
30551: NOP4
30555: PUSH
30556: NOP4
30560: AND
30561: IFFALSE 30644
30563: GO 30565
30565: DISABLE
30566: LD_INT 0
30568: PPUSH
30569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
30570: NOP4
30574: PUSH
30575: LD_INT 22
30577: PUSH
30578: NOP4
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 21
30589: PUSH
30590: LD_INT 3
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PPUSH
30601: NOP4
30605: ST_TO_ADDR
// if not tmp then
30606: NOP4
30610: NOT
30611: IFFALSE 30615
// exit ;
30613: GO 30644
// for i in tmp do
30615: NOP4
30619: PUSH
30620: NOP4
30624: PUSH
30625: FOR_IN
30626: IFFALSE 30642
// SetBLevel ( i , 10 ) ;
30628: NOP4
30632: PPUSH
30633: LD_INT 10
30635: PPUSH
30636: NOP4
30640: GO 30625
30642: POP
30643: POP
// end ;
30644: PPOPN 2
30646: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
30647: NOP4
30651: PUSH
30652: NOP4
30656: AND
30657: IFFALSE 30768
30659: GO 30661
30661: DISABLE
30662: LD_INT 0
30664: PPUSH
30665: PPUSH
30666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30667: NOP4
30671: PUSH
30672: LD_INT 22
30674: PUSH
30675: NOP4
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 25
30686: PUSH
30687: LD_INT 1
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PPUSH
30698: NOP4
30702: ST_TO_ADDR
// if not tmp then
30703: NOP4
30707: NOT
30708: IFFALSE 30712
// exit ;
30710: GO 30768
// un := tmp [ rand ( 1 , tmp ) ] ;
30712: NOP4
30716: PUSH
30717: NOP4
30721: PUSH
30722: LD_INT 1
30724: PPUSH
30725: NOP4
30729: PPUSH
30730: NOP4
30734: ARRAY
30735: ST_TO_ADDR
// if Crawls ( un ) then
30736: NOP4
30740: PPUSH
30741: NOP4
30745: IFFALSE 30756
// ComWalk ( un ) ;
30747: NOP4
30751: PPUSH
30752: NOP4
// SetClass ( un , class_sniper ) ;
30756: NOP4
30760: PPUSH
30761: LD_INT 5
30763: PPUSH
30764: NOP4
// end ;
30768: PPOPN 3
30770: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
30771: NOP4
30775: PUSH
30776: NOP4
30780: AND
30781: PUSH
30782: NOP4
30786: PUSH
30787: LD_INT 3
30789: LESS
30790: AND
30791: IFFALSE 30810
30793: GO 30795
30795: DISABLE
// Difficulty := Difficulty + 1 ;
30796: LD_ADDR_OWVAR 67
30800: PUSH
30801: NOP4
30805: PUSH
30806: LD_INT 1
30808: PLUS
30809: ST_TO_ADDR
30810: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
30811: NOP4
30815: PUSH
30816: NOP4
30820: AND
30821: IFFALSE 30924
30823: GO 30825
30825: DISABLE
30826: LD_INT 0
30828: PPUSH
// begin for i := 1 to 5 do
30829: NOP4
30833: PUSH
30834: DOUBLE
30835: LD_INT 1
30837: DEC
30838: ST_TO_ADDR
30839: LD_INT 5
30841: PUSH
30842: FOR_TO
30843: IFFALSE 30922
// begin uc_nation := nation_nature ;
30845: LD_ADDR_OWVAR 21
30849: PUSH
30850: LD_INT 0
30852: ST_TO_ADDR
// uc_side := 0 ;
30853: LD_ADDR_OWVAR 20
30857: PUSH
30858: LD_INT 0
30860: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
30861: LD_ADDR_OWVAR 29
30865: PUSH
30866: LD_INT 12
30868: PUSH
30869: LD_INT 12
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: ST_TO_ADDR
// hc_agressivity := 20 ;
30876: LD_ADDR_OWVAR 35
30880: PUSH
30881: LD_INT 20
30883: ST_TO_ADDR
// hc_class := class_tiger ;
30884: LD_ADDR_OWVAR 28
30888: PUSH
30889: LD_INT 14
30891: ST_TO_ADDR
// hc_gallery :=  ;
30892: LD_ADDR_OWVAR 33
30896: PUSH
30897: LD_STRING 
30899: ST_TO_ADDR
// hc_name :=  ;
30900: LD_ADDR_OWVAR 26
30904: PUSH
30905: LD_STRING 
30907: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
30908: NOP4
30912: PPUSH
30913: LD_INT 0
30915: PPUSH
30916: NOP4
// end ;
30920: GO 30842
30922: POP
30923: POP
// end ;
30924: PPOPN 1
30926: END
// every 0 0$1 trigger StreamModeActive and sBomb do
30927: NOP4
30931: PUSH
30932: NOP4
30936: AND
30937: IFFALSE 30946
30939: GO 30941
30941: DISABLE
// StreamSibBomb ;
30942: NOP4
30946: END
// export function StreamSibBomb ; var i , x , y ; begin
30947: LD_INT 0
30949: PPUSH
30950: PPUSH
30951: PPUSH
30952: PPUSH
// result := false ;
30953: NOP4
30957: PUSH
30958: LD_INT 0
30960: ST_TO_ADDR
// for i := 1 to 16 do
30961: NOP4
30965: PUSH
30966: DOUBLE
30967: LD_INT 1
30969: DEC
30970: ST_TO_ADDR
30971: LD_INT 16
30973: PUSH
30974: FOR_TO
30975: IFFALSE 31174
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
30977: NOP4
30981: PUSH
30982: LD_INT 10
30984: PUSH
30985: LD_INT 20
30987: PUSH
30988: LD_INT 30
30990: PUSH
30991: LD_INT 40
30993: PUSH
30994: LD_INT 50
30996: PUSH
30997: LD_INT 60
30999: PUSH
31000: LD_INT 70
31002: PUSH
31003: LD_INT 80
31005: PUSH
31006: LD_INT 90
31008: PUSH
31009: LD_INT 100
31011: PUSH
31012: LD_INT 110
31014: PUSH
31015: LD_INT 120
31017: PUSH
31018: LD_INT 130
31020: PUSH
31021: LD_INT 140
31023: PUSH
31024: LD_INT 150
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 1
31046: PPUSH
31047: LD_INT 15
31049: PPUSH
31050: NOP4
31054: ARRAY
31055: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31056: NOP4
31060: PUSH
31061: LD_INT 10
31063: PUSH
31064: LD_INT 20
31066: PUSH
31067: LD_INT 30
31069: PUSH
31070: LD_INT 40
31072: PUSH
31073: LD_INT 50
31075: PUSH
31076: LD_INT 60
31078: PUSH
31079: LD_INT 70
31081: PUSH
31082: LD_INT 80
31084: PUSH
31085: LD_INT 90
31087: PUSH
31088: LD_INT 100
31090: PUSH
31091: LD_INT 110
31093: PUSH
31094: LD_INT 120
31096: PUSH
31097: LD_INT 130
31099: PUSH
31100: LD_INT 140
31102: PUSH
31103: LD_INT 150
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 1
31125: PPUSH
31126: LD_INT 15
31128: PPUSH
31129: NOP4
31133: ARRAY
31134: ST_TO_ADDR
// if ValidHex ( x , y ) then
31135: NOP4
31139: PPUSH
31140: NOP4
31144: PPUSH
31145: NOP4
31149: IFFALSE 31172
// begin result := [ x , y ] ;
31151: NOP4
31155: PUSH
31156: NOP4
31160: PUSH
31161: NOP4
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: ST_TO_ADDR
// break ;
31170: GO 31174
// end ; end ;
31172: GO 30974
31174: POP
31175: POP
// if result then
31176: NOP4
31180: IFFALSE 31240
// begin ToLua ( playSibBomb() ) ;
31182: LD_STRING playSibBomb()
31184: PPUSH
31185: NOP4
// wait ( 0 0$14 ) ;
31189: LD_INT 490
31191: PPUSH
31192: NOP4
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
31196: NOP4
31200: PUSH
31201: LD_INT 1
31203: ARRAY
31204: PPUSH
31205: NOP4
31209: PUSH
31210: LD_INT 2
31212: ARRAY
31213: PPUSH
31214: NOP4
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
31218: NOP4
31222: PUSH
31223: LD_INT 1
31225: ARRAY
31226: PPUSH
31227: NOP4
31231: PUSH
31232: LD_INT 2
31234: ARRAY
31235: PPUSH
31236: NOP4
// end ; end ;
31240: LD_VAR 0 1
31244: RET
// every 0 0$1 trigger StreamModeActive and sReset do
31245: NOP4
31249: PUSH
31250: NOP4
31254: AND
31255: IFFALSE 31267
31257: GO 31259
31259: DISABLE
// YouLost (  ) ;
31260: LD_STRING 
31262: PPUSH
31263: NOP4
31267: END
// every 0 0$1 trigger StreamModeActive and sFog do
31268: NOP4
31272: PUSH
31273: NOP4
31277: AND
31278: IFFALSE 31292
31280: GO 31282
31282: DISABLE
// FogOff ( your_side ) ;
31283: NOP4
31287: PPUSH
31288: NOP4
31292: END
// every 0 0$1 trigger StreamModeActive and sSun do
31293: NOP4
31297: PUSH
31298: NOP4
31302: AND
31303: IFFALSE 31331
31305: GO 31307
31307: DISABLE
// begin solar_recharge_percent := 0 ;
31308: LD_ADDR_OWVAR 79
31312: PUSH
31313: LD_INT 0
31315: ST_TO_ADDR
// wait ( 5 5$00 ) ;
31316: LD_INT 10500
31318: PPUSH
31319: NOP4
// solar_recharge_percent := 100 ;
31323: LD_ADDR_OWVAR 79
31327: PUSH
31328: LD_INT 100
31330: ST_TO_ADDR
// end ;
31331: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
31332: NOP4
31336: PUSH
31337: NOP4
31341: AND
31342: IFFALSE 31581
31344: GO 31346
31346: DISABLE
31347: LD_INT 0
31349: PPUSH
31350: PPUSH
31351: PPUSH
// begin tmp := [ ] ;
31352: NOP4
31356: PUSH
31357: EMPTY
31358: ST_TO_ADDR
// for i := 1 to 6 do
31359: NOP4
31363: PUSH
31364: DOUBLE
31365: LD_INT 1
31367: DEC
31368: ST_TO_ADDR
31369: LD_INT 6
31371: PUSH
31372: FOR_TO
31373: IFFALSE 31478
// begin uc_nation := nation_nature ;
31375: LD_ADDR_OWVAR 21
31379: PUSH
31380: LD_INT 0
31382: ST_TO_ADDR
// uc_side := 0 ;
31383: LD_ADDR_OWVAR 20
31387: PUSH
31388: LD_INT 0
31390: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
31391: LD_ADDR_OWVAR 29
31395: PUSH
31396: LD_INT 12
31398: PUSH
31399: LD_INT 12
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: ST_TO_ADDR
// hc_agressivity := 20 ;
31406: LD_ADDR_OWVAR 35
31410: PUSH
31411: LD_INT 20
31413: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
31414: LD_ADDR_OWVAR 28
31418: PUSH
31419: LD_INT 17
31421: ST_TO_ADDR
// hc_gallery :=  ;
31422: LD_ADDR_OWVAR 33
31426: PUSH
31427: LD_STRING 
31429: ST_TO_ADDR
// hc_name :=  ;
31430: LD_ADDR_OWVAR 26
31434: PUSH
31435: LD_STRING 
31437: ST_TO_ADDR
// un := CreateHuman ;
31438: NOP4
31442: PUSH
31443: NOP4
31447: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
31448: NOP4
31452: PPUSH
31453: LD_INT 1
31455: PPUSH
31456: NOP4
// tmp := tmp ^ un ;
31460: NOP4
31464: PUSH
31465: NOP4
31469: PUSH
31470: NOP4
31474: ADD
31475: ST_TO_ADDR
// end ;
31476: GO 31372
31478: POP
31479: POP
// repeat wait ( 0 0$1 ) ;
31480: LD_INT 35
31482: PPUSH
31483: NOP4
// for un in tmp do
31487: NOP4
31491: PUSH
31492: NOP4
31496: PUSH
31497: FOR_IN
31498: IFFALSE 31572
// begin if IsDead ( un ) then
31500: NOP4
31504: PPUSH
31505: NOP4
31509: IFFALSE 31529
// begin tmp := tmp diff un ;
31511: NOP4
31515: PUSH
31516: NOP4
31520: PUSH
31521: NOP4
31525: DIFF
31526: ST_TO_ADDR
// continue ;
31527: GO 31497
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
31529: NOP4
31533: PPUSH
31534: LD_INT 3
31536: PUSH
31537: LD_INT 22
31539: PUSH
31540: LD_INT 0
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PPUSH
31551: NOP4
31555: PPUSH
31556: NOP4
31560: PPUSH
31561: NOP4
31565: PPUSH
31566: NOP4
// end ;
31570: GO 31497
31572: POP
31573: POP
// until not tmp ;
31574: NOP4
31578: NOT
31579: IFFALSE 31480
// end ;
31581: PPOPN 3
31583: END
// every 0 0$1 trigger StreamModeActive and sTroll do
31584: NOP4
31588: PUSH
31589: NOP4
31593: AND
31594: IFFALSE 31648
31596: GO 31598
31598: DISABLE
// begin ToLua ( displayTroll(); ) ;
31599: LD_STRING displayTroll();
31601: PPUSH
31602: NOP4
// wait ( 3 3$00 ) ;
31606: LD_INT 6300
31608: PPUSH
31609: NOP4
// ToLua ( hideTroll(); ) ;
31613: LD_STRING hideTroll();
31615: PPUSH
31616: NOP4
// wait ( 1 1$00 ) ;
31620: LD_INT 2100
31622: PPUSH
31623: NOP4
// ToLua ( displayTroll(); ) ;
31627: LD_STRING displayTroll();
31629: PPUSH
31630: NOP4
// wait ( 1 1$00 ) ;
31634: LD_INT 2100
31636: PPUSH
31637: NOP4
// ToLua ( hideTroll(); ) ;
31641: LD_STRING hideTroll();
31643: PPUSH
31644: NOP4
// end ;
31648: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
31649: NOP4
31653: PUSH
31654: NOP4
31658: AND
31659: IFFALSE 31722
31661: GO 31663
31663: DISABLE
31664: LD_INT 0
31666: PPUSH
// begin p := 0 ;
31667: NOP4
31671: PUSH
31672: LD_INT 0
31674: ST_TO_ADDR
// repeat game_speed := 1 ;
31675: LD_ADDR_OWVAR 65
31679: PUSH
31680: LD_INT 1
31682: ST_TO_ADDR
// wait ( 0 0$1 ) ;
31683: LD_INT 35
31685: PPUSH
31686: NOP4
// p := p + 1 ;
31690: NOP4
31694: PUSH
31695: NOP4
31699: PUSH
31700: LD_INT 1
31702: PLUS
31703: ST_TO_ADDR
// until p >= 60 ;
31704: NOP4
31708: PUSH
31709: LD_INT 60
31711: GREATEREQUAL
31712: IFFALSE 31675
// game_speed := 4 ;
31714: LD_ADDR_OWVAR 65
31718: PUSH
31719: LD_INT 4
31721: ST_TO_ADDR
// end ;
31722: PPOPN 1
31724: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
31725: NOP4
31729: PUSH
31730: NOP4
31734: AND
31735: IFFALSE 31881
31737: GO 31739
31739: DISABLE
31740: LD_INT 0
31742: PPUSH
31743: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31744: NOP4
31748: PUSH
31749: LD_INT 22
31751: PUSH
31752: NOP4
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 2
31763: PUSH
31764: LD_INT 30
31766: PUSH
31767: LD_INT 0
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 30
31776: PUSH
31777: LD_INT 1
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: LIST
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PPUSH
31793: NOP4
31797: ST_TO_ADDR
// if not depot then
31798: NOP4
31802: NOT
31803: IFFALSE 31807
// exit ;
31805: GO 31881
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
31807: NOP4
31811: PUSH
31812: NOP4
31816: PUSH
31817: LD_INT 1
31819: PPUSH
31820: NOP4
31824: PPUSH
31825: NOP4
31829: ARRAY
31830: PPUSH
31831: NOP4
31835: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
31836: NOP4
31840: PPUSH
31841: LD_INT 1
31843: PPUSH
31844: LD_INT 0
31846: PPUSH
31847: NOP4
// SetResourceType ( base , mat_oil , 0 ) ;
31851: NOP4
31855: PPUSH
31856: LD_INT 2
31858: PPUSH
31859: LD_INT 0
31861: PPUSH
31862: NOP4
// SetResourceType ( base , mat_siberit , 0 ) ;
31866: NOP4
31870: PPUSH
31871: LD_INT 3
31873: PPUSH
31874: LD_INT 0
31876: PPUSH
31877: NOP4
// end ;
31881: PPOPN 2
31883: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
31884: NOP4
31888: PUSH
31889: NOP4
31893: AND
31894: IFFALSE 31991
31896: GO 31898
31898: DISABLE
31899: LD_INT 0
31901: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31902: NOP4
31906: PUSH
31907: LD_INT 22
31909: PUSH
31910: NOP4
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 21
31921: PUSH
31922: LD_INT 1
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 3
31931: PUSH
31932: LD_INT 23
31934: PUSH
31935: LD_INT 0
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: LIST
31950: PPUSH
31951: NOP4
31955: ST_TO_ADDR
// if not tmp then
31956: NOP4
31960: NOT
31961: IFFALSE 31965
// exit ;
31963: GO 31991
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
31965: NOP4
31969: PUSH
31970: LD_INT 1
31972: PPUSH
31973: NOP4
31977: PPUSH
31978: NOP4
31982: ARRAY
31983: PPUSH
31984: LD_INT 200
31986: PPUSH
31987: NOP4
// end ;
31991: PPOPN 1
31993: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
31994: NOP4
31998: PUSH
31999: NOP4
32003: AND
32004: IFFALSE 32083
32006: GO 32008
32008: DISABLE
32009: LD_INT 0
32011: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
32012: NOP4
32016: PUSH
32017: LD_INT 22
32019: PUSH
32020: NOP4
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 21
32031: PUSH
32032: LD_INT 2
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PPUSH
32043: NOP4
32047: ST_TO_ADDR
// if not tmp then
32048: NOP4
32052: NOT
32053: IFFALSE 32057
// exit ;
32055: GO 32083
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
32057: NOP4
32061: PUSH
32062: LD_INT 1
32064: PPUSH
32065: NOP4
32069: PPUSH
32070: NOP4
32074: ARRAY
32075: PPUSH
32076: LD_INT 60
32078: PPUSH
32079: NOP4
// end ;
32083: PPOPN 1
32085: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
32086: NOP4
32090: PUSH
32091: NOP4
32095: AND
32096: IFFALSE 32195
32098: GO 32100
32100: DISABLE
32101: LD_INT 0
32103: PPUSH
32104: PPUSH
// begin enable ;
32105: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
32106: NOP4
32110: PUSH
32111: LD_INT 22
32113: PUSH
32114: NOP4
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 61
32125: PUSH
32126: EMPTY
32127: LIST
32128: PUSH
32129: LD_INT 33
32131: PUSH
32132: LD_INT 2
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: LIST
32143: PPUSH
32144: NOP4
32148: ST_TO_ADDR
// if not tmp then
32149: NOP4
32153: NOT
32154: IFFALSE 32158
// exit ;
32156: GO 32195
// for i in tmp do
32158: NOP4
32162: PUSH
32163: NOP4
32167: PUSH
32168: FOR_IN
32169: IFFALSE 32193
// if IsControledBy ( i ) then
32171: NOP4
32175: PPUSH
32176: NOP4
32180: IFFALSE 32191
// ComUnlink ( i ) ;
32182: NOP4
32186: PPUSH
32187: NOP4
32191: GO 32168
32193: POP
32194: POP
// end ;
32195: PPOPN 2
32197: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
32198: NOP4
32202: PUSH
32203: NOP4
32207: AND
32208: IFFALSE 32348
32210: GO 32212
32212: DISABLE
32213: LD_INT 0
32215: PPUSH
32216: PPUSH
// begin ToLua ( displayPowell(); ) ;
32217: LD_STRING displayPowell();
32219: PPUSH
32220: NOP4
// uc_side := 0 ;
32224: LD_ADDR_OWVAR 20
32228: PUSH
32229: LD_INT 0
32231: ST_TO_ADDR
// uc_nation := 2 ;
32232: LD_ADDR_OWVAR 21
32236: PUSH
32237: LD_INT 2
32239: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
32240: LD_ADDR_OWVAR 37
32244: PUSH
32245: LD_INT 14
32247: ST_TO_ADDR
// vc_engine := engine_siberite ;
32248: LD_ADDR_OWVAR 39
32252: PUSH
32253: LD_INT 3
32255: ST_TO_ADDR
// vc_control := control_apeman ;
32256: LD_ADDR_OWVAR 38
32260: PUSH
32261: LD_INT 5
32263: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
32264: LD_ADDR_OWVAR 40
32268: PUSH
32269: LD_INT 29
32271: ST_TO_ADDR
// un := CreateVehicle ;
32272: NOP4
32276: PUSH
32277: NOP4
32281: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32282: NOP4
32286: PPUSH
32287: LD_INT 1
32289: PPUSH
32290: NOP4
// repeat wait ( 0 0$1 ) ;
32294: LD_INT 35
32296: PPUSH
32297: NOP4
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
32301: NOP4
32305: PPUSH
32306: LD_INT 22
32308: PUSH
32309: NOP4
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PPUSH
32318: NOP4
32322: PPUSH
32323: NOP4
32327: PPUSH
32328: NOP4
32332: PPUSH
32333: NOP4
// until IsDead ( un ) ;
32337: NOP4
32341: PPUSH
32342: NOP4
32346: IFFALSE 32294
// end ;
32348: PPOPN 2
32350: END
// every 0 0$1 trigger StreamModeActive and sStu do
32351: NOP4
32355: PUSH
32356: NOP4
32360: AND
32361: IFFALSE 32377
32363: GO 32365
32365: DISABLE
// begin ToLua ( displayStucuk(); ) ;
32366: LD_STRING displayStucuk();
32368: PPUSH
32369: NOP4
// ResetFog ;
32373: NOP4
// end ;
32377: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
32378: NOP4
32382: PUSH
32383: NOP4
32387: AND
32388: IFFALSE 32529
32390: GO 32392
32392: DISABLE
32393: LD_INT 0
32395: PPUSH
32396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
32397: NOP4
32401: PUSH
32402: LD_INT 22
32404: PUSH
32405: NOP4
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 21
32416: PUSH
32417: LD_INT 1
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PPUSH
32428: NOP4
32432: ST_TO_ADDR
// if not tmp then
32433: NOP4
32437: NOT
32438: IFFALSE 32442
// exit ;
32440: GO 32529
// un := tmp [ rand ( 1 , tmp ) ] ;
32442: NOP4
32446: PUSH
32447: NOP4
32451: PUSH
32452: LD_INT 1
32454: PPUSH
32455: NOP4
32459: PPUSH
32460: NOP4
32464: ARRAY
32465: ST_TO_ADDR
// SetSide ( un , 0 ) ;
32466: NOP4
32470: PPUSH
32471: LD_INT 0
32473: PPUSH
32474: NOP4
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
32478: NOP4
32482: PPUSH
32483: NOP4
32487: PUSH
32488: NOP4
32492: DIFF
32493: PPUSH
32494: NOP4
32498: PPUSH
32499: NOP4
32503: PPUSH
32504: NOP4
// wait ( 0 0$20 ) ;
32508: LD_INT 700
32510: PPUSH
32511: NOP4
// SetSide ( un , your_side ) ;
32515: NOP4
32519: PPUSH
32520: NOP4
32524: PPUSH
32525: NOP4
// end ;
32529: PPOPN 2
32531: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
32532: NOP4
32536: PUSH
32537: NOP4
32541: AND
32542: IFFALSE 32648
32544: GO 32546
32546: DISABLE
32547: LD_INT 0
32549: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32550: NOP4
32554: PUSH
32555: LD_INT 22
32557: PUSH
32558: NOP4
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 2
32569: PUSH
32570: LD_INT 30
32572: PUSH
32573: LD_INT 0
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 30
32582: PUSH
32583: LD_INT 1
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: LIST
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PPUSH
32599: NOP4
32603: ST_TO_ADDR
// if not depot then
32604: NOP4
32608: NOT
32609: IFFALSE 32613
// exit ;
32611: GO 32648
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
32613: NOP4
32617: PUSH
32618: LD_INT 1
32620: ARRAY
32621: PPUSH
32622: NOP4
32626: PPUSH
32627: NOP4
32631: PUSH
32632: LD_INT 1
32634: ARRAY
32635: PPUSH
32636: NOP4
32640: PPUSH
32641: LD_INT 70
32643: PPUSH
32644: NOP4
// end ;
32648: PPOPN 1
32650: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
32651: NOP4
32655: PUSH
32656: NOP4
32660: AND
32661: IFFALSE 32872
32663: GO 32665
32665: DISABLE
32666: LD_INT 0
32668: PPUSH
32669: PPUSH
32670: PPUSH
32671: PPUSH
32672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
32673: NOP4
32677: PUSH
32678: LD_INT 22
32680: PUSH
32681: NOP4
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 21
32692: PUSH
32693: LD_INT 1
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PPUSH
32704: NOP4
32708: ST_TO_ADDR
// if not tmp then
32709: NOP4
32713: NOT
32714: IFFALSE 32718
// exit ;
32716: GO 32872
// for i in tmp do
32718: NOP4
32722: PUSH
32723: NOP4
32727: PUSH
32728: FOR_IN
32729: IFFALSE 32870
// begin d := rand ( 0 , 5 ) ;
32731: NOP4
32735: PUSH
32736: LD_INT 0
32738: PPUSH
32739: LD_INT 5
32741: PPUSH
32742: NOP4
32746: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
32747: NOP4
32751: PUSH
32752: NOP4
32756: PPUSH
32757: NOP4
32761: PPUSH
32762: NOP4
32766: PPUSH
32767: LD_INT 3
32769: PPUSH
32770: LD_INT 12
32772: PPUSH
32773: NOP4
32777: PPUSH
32778: NOP4
32782: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
32783: NOP4
32787: PUSH
32788: NOP4
32792: PPUSH
32793: NOP4
32797: PPUSH
32798: NOP4
32802: PPUSH
32803: LD_INT 3
32805: PPUSH
32806: LD_INT 12
32808: PPUSH
32809: NOP4
32813: PPUSH
32814: NOP4
32818: ST_TO_ADDR
// if ValidHex ( x , y ) then
32819: NOP4
32823: PPUSH
32824: NOP4
32828: PPUSH
32829: NOP4
32833: IFFALSE 32868
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
32835: NOP4
32839: PPUSH
32840: NOP4
32844: PPUSH
32845: NOP4
32849: PPUSH
32850: LD_INT 3
32852: PPUSH
32853: LD_INT 6
32855: PPUSH
32856: NOP4
32860: PPUSH
32861: LD_INT 1
32863: PPUSH
32864: NOP4
// end ;
32868: GO 32728
32870: POP
32871: POP
// end ;
32872: PPOPN 5
32874: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
32875: NOP4
32879: PUSH
32880: NOP4
32884: AND
32885: IFFALSE 32979
32887: GO 32889
32889: DISABLE
32890: LD_INT 0
32892: PPUSH
32893: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
32894: NOP4
32898: PUSH
32899: LD_INT 22
32901: PUSH
32902: NOP4
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 32
32913: PUSH
32914: LD_INT 1
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 21
32923: PUSH
32924: LD_INT 2
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: LIST
32935: PPUSH
32936: NOP4
32940: ST_TO_ADDR
// if not tmp then
32941: NOP4
32945: NOT
32946: IFFALSE 32950
// exit ;
32948: GO 32979
// for i in tmp do
32950: NOP4
32954: PUSH
32955: NOP4
32959: PUSH
32960: FOR_IN
32961: IFFALSE 32977
// SetFuel ( i , 0 ) ;
32963: NOP4
32967: PPUSH
32968: LD_INT 0
32970: PPUSH
32971: NOP4
32975: GO 32960
32977: POP
32978: POP
// end ;
32979: PPOPN 2
32981: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
32982: NOP4
32986: PUSH
32987: NOP4
32991: AND
32992: IFFALSE 33058
32994: GO 32996
32996: DISABLE
32997: LD_INT 0
32999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33000: NOP4
33004: PUSH
33005: LD_INT 22
33007: PUSH
33008: NOP4
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 30
33019: PUSH
33020: LD_INT 29
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PPUSH
33031: NOP4
33035: ST_TO_ADDR
// if not tmp then
33036: NOP4
33040: NOT
33041: IFFALSE 33045
// exit ;
33043: GO 33058
// DestroyUnit ( tmp [ 1 ] ) ;
33045: NOP4
33049: PUSH
33050: LD_INT 1
33052: ARRAY
33053: PPUSH
33054: NOP4
// end ;
33058: PPOPN 1
33060: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
33061: NOP4
33065: PUSH
33066: NOP4
33070: AND
33071: IFFALSE 33200
33073: GO 33075
33075: DISABLE
33076: LD_INT 0
33078: PPUSH
// begin uc_side := 0 ;
33079: LD_ADDR_OWVAR 20
33083: PUSH
33084: LD_INT 0
33086: ST_TO_ADDR
// uc_nation := nation_arabian ;
33087: LD_ADDR_OWVAR 21
33091: PUSH
33092: LD_INT 2
33094: ST_TO_ADDR
// hc_gallery :=  ;
33095: LD_ADDR_OWVAR 33
33099: PUSH
33100: LD_STRING 
33102: ST_TO_ADDR
// hc_name :=  ;
33103: LD_ADDR_OWVAR 26
33107: PUSH
33108: LD_STRING 
33110: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
33111: LD_INT 1
33113: PPUSH
33114: LD_INT 11
33116: PPUSH
33117: LD_INT 10
33119: PPUSH
33120: NOP4
// un := CreateHuman ;
33124: NOP4
33128: PUSH
33129: NOP4
33133: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33134: NOP4
33138: PPUSH
33139: LD_INT 1
33141: PPUSH
33142: NOP4
// repeat wait ( 0 0$1 ) ;
33146: LD_INT 35
33148: PPUSH
33149: NOP4
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
33153: NOP4
33157: PPUSH
33158: LD_INT 22
33160: PUSH
33161: NOP4
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PPUSH
33170: NOP4
33174: PPUSH
33175: NOP4
33179: PPUSH
33180: NOP4
33184: PPUSH
33185: NOP4
// until IsDead ( un ) ;
33189: NOP4
33193: PPUSH
33194: NOP4
33198: IFFALSE 33146
// end ;
33200: PPOPN 1
33202: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
33203: NOP4
33207: PUSH
33208: NOP4
33212: AND
33213: IFFALSE 33225
33215: GO 33217
33217: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
33218: LD_STRING earthquake(getX(game), 0, 32)
33220: PPUSH
33221: NOP4
33225: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
33226: NOP4
33230: PUSH
33231: NOP4
33235: AND
33236: IFFALSE 33327
33238: GO 33240
33240: DISABLE
33241: LD_INT 0
33243: PPUSH
// begin enable ;
33244: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
33245: NOP4
33249: PUSH
33250: LD_INT 22
33252: PUSH
33253: NOP4
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 21
33264: PUSH
33265: LD_INT 2
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 33
33274: PUSH
33275: LD_INT 3
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: LIST
33286: PPUSH
33287: NOP4
33291: ST_TO_ADDR
// if not tmp then
33292: NOP4
33296: NOT
33297: IFFALSE 33301
// exit ;
33299: GO 33327
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
33301: NOP4
33305: PUSH
33306: LD_INT 1
33308: PPUSH
33309: NOP4
33313: PPUSH
33314: NOP4
33318: ARRAY
33319: PPUSH
33320: LD_INT 1
33322: PPUSH
33323: NOP4
// end ;
33327: PPOPN 1
33329: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
33330: NOP4
33334: PUSH
33335: NOP4
33339: AND
33340: IFFALSE 33481
33342: GO 33344
33344: DISABLE
33345: LD_INT 0
33347: PPUSH
33348: PPUSH
33349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33350: NOP4
33354: PUSH
33355: LD_INT 22
33357: PUSH
33358: NOP4
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 25
33369: PUSH
33370: LD_INT 1
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PPUSH
33381: NOP4
33385: ST_TO_ADDR
// if not tmp then
33386: NOP4
33390: NOT
33391: IFFALSE 33395
// exit ;
33393: GO 33481
// un := tmp [ rand ( 1 , tmp ) ] ;
33395: NOP4
33399: PUSH
33400: NOP4
33404: PUSH
33405: LD_INT 1
33407: PPUSH
33408: NOP4
33412: PPUSH
33413: NOP4
33417: ARRAY
33418: ST_TO_ADDR
// if Crawls ( un ) then
33419: NOP4
33423: PPUSH
33424: NOP4
33428: IFFALSE 33439
// ComWalk ( un ) ;
33430: NOP4
33434: PPUSH
33435: NOP4
// SetClass ( un , class_bazooker ) ;
33439: NOP4
33443: PPUSH
33444: LD_INT 9
33446: PPUSH
33447: NOP4
// SetTech ( tech_tauRad , your_side , state_researched ) ;
33451: LD_INT 28
33453: PPUSH
33454: NOP4
33458: PPUSH
33459: LD_INT 2
33461: PPUSH
33462: NOP4
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
33466: LD_INT 29
33468: PPUSH
33469: NOP4
33473: PPUSH
33474: LD_INT 2
33476: PPUSH
33477: NOP4
// end ;
33481: PPOPN 3
33483: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
33484: NOP4
33488: PUSH
33489: NOP4
33493: AND
33494: IFFALSE 33605
33496: GO 33498
33498: DISABLE
33499: LD_INT 0
33501: PPUSH
33502: PPUSH
33503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33504: NOP4
33508: PUSH
33509: LD_INT 22
33511: PUSH
33512: NOP4
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 25
33523: PUSH
33524: LD_INT 1
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PPUSH
33535: NOP4
33539: ST_TO_ADDR
// if not tmp then
33540: NOP4
33544: NOT
33545: IFFALSE 33549
// exit ;
33547: GO 33605
// un := tmp [ rand ( 1 , tmp ) ] ;
33549: NOP4
33553: PUSH
33554: NOP4
33558: PUSH
33559: LD_INT 1
33561: PPUSH
33562: NOP4
33566: PPUSH
33567: NOP4
33571: ARRAY
33572: ST_TO_ADDR
// if Crawls ( un ) then
33573: NOP4
33577: PPUSH
33578: NOP4
33582: IFFALSE 33593
// ComWalk ( un ) ;
33584: NOP4
33588: PPUSH
33589: NOP4
// SetClass ( un , class_mortar ) ;
33593: NOP4
33597: PPUSH
33598: LD_INT 8
33600: PPUSH
33601: NOP4
// end ;
33605: PPOPN 3
33607: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
33608: NOP4
33612: PUSH
33613: NOP4
33617: AND
33618: IFFALSE 33762
33620: GO 33622
33622: DISABLE
33623: LD_INT 0
33625: PPUSH
33626: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
33627: NOP4
33631: PUSH
33632: LD_INT 22
33634: PUSH
33635: NOP4
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 21
33646: PUSH
33647: LD_INT 2
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 2
33656: PUSH
33657: LD_INT 34
33659: PUSH
33660: LD_INT 12
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 34
33669: PUSH
33670: LD_INT 51
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 34
33679: PUSH
33680: LD_INT 32
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: LIST
33697: PPUSH
33698: NOP4
33702: ST_TO_ADDR
// if not tmp then
33703: NOP4
33707: NOT
33708: IFFALSE 33712
// exit ;
33710: GO 33762
// for i in tmp do
33712: NOP4
33716: PUSH
33717: NOP4
33721: PUSH
33722: FOR_IN
33723: IFFALSE 33760
// if GetCargo ( i , mat_artifact ) = 0 then
33725: NOP4
33729: PPUSH
33730: LD_INT 4
33732: PPUSH
33733: NOP4
33737: PUSH
33738: LD_INT 0
33740: EQUAL
33741: IFFALSE 33758
// SetCargo ( i , mat_siberit , 100 ) ;
33743: NOP4
33747: PPUSH
33748: LD_INT 3
33750: PPUSH
33751: LD_INT 100
33753: PPUSH
33754: NOP4
33758: GO 33722
33760: POP
33761: POP
// end ;
33762: PPOPN 2
33764: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
33765: NOP4
33769: PUSH
33770: NOP4
33774: AND
33775: IFFALSE 33958
33777: GO 33779
33779: DISABLE
33780: LD_INT 0
33782: PPUSH
33783: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33784: NOP4
33788: PUSH
33789: LD_INT 22
33791: PUSH
33792: NOP4
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PPUSH
33801: NOP4
33805: ST_TO_ADDR
// if not tmp then
33806: NOP4
33810: NOT
33811: IFFALSE 33815
// exit ;
33813: GO 33958
// for i := 1 to 2 do
33815: NOP4
33819: PUSH
33820: DOUBLE
33821: LD_INT 1
33823: DEC
33824: ST_TO_ADDR
33825: LD_INT 2
33827: PUSH
33828: FOR_TO
33829: IFFALSE 33956
// begin uc_side := your_side ;
33831: LD_ADDR_OWVAR 20
33835: PUSH
33836: NOP4
33840: ST_TO_ADDR
// uc_nation := nation_american ;
33841: LD_ADDR_OWVAR 21
33845: PUSH
33846: LD_INT 1
33848: ST_TO_ADDR
// vc_chassis := us_morphling ;
33849: LD_ADDR_OWVAR 37
33853: PUSH
33854: LD_INT 5
33856: ST_TO_ADDR
// vc_engine := engine_siberite ;
33857: LD_ADDR_OWVAR 39
33861: PUSH
33862: LD_INT 3
33864: ST_TO_ADDR
// vc_control := control_computer ;
33865: LD_ADDR_OWVAR 38
33869: PUSH
33870: LD_INT 3
33872: ST_TO_ADDR
// vc_weapon := us_double_laser ;
33873: LD_ADDR_OWVAR 40
33877: PUSH
33878: LD_INT 10
33880: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
33881: NOP4
33885: PUSH
33886: LD_INT 1
33888: ARRAY
33889: PPUSH
33890: NOP4
33894: NOT
33895: IFFALSE 33942
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
33897: NOP4
33901: PPUSH
33902: NOP4
33906: PUSH
33907: LD_INT 1
33909: ARRAY
33910: PPUSH
33911: NOP4
33915: PPUSH
33916: NOP4
33920: PUSH
33921: LD_INT 1
33923: ARRAY
33924: PPUSH
33925: NOP4
33929: PPUSH
33930: LD_INT 12
33932: PPUSH
33933: LD_INT 1
33935: PPUSH
33936: NOP4
33940: GO 33954
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
33942: NOP4
33946: PPUSH
33947: LD_INT 1
33949: PPUSH
33950: NOP4
// end ;
33954: GO 33828
33956: POP
33957: POP
// end ;
33958: PPOPN 2
33960: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
33961: NOP4
33965: PUSH
33966: NOP4
33970: AND
33971: IFFALSE 34193
33973: GO 33975
33975: DISABLE
33976: LD_INT 0
33978: PPUSH
33979: PPUSH
33980: PPUSH
33981: PPUSH
33982: PPUSH
33983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33984: NOP4
33988: PUSH
33989: LD_INT 22
33991: PUSH
33992: NOP4
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 21
34003: PUSH
34004: LD_INT 1
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 3
34013: PUSH
34014: LD_INT 23
34016: PUSH
34017: LD_INT 0
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: LIST
34032: PPUSH
34033: NOP4
34037: ST_TO_ADDR
// if not tmp then
34038: NOP4
34042: NOT
34043: IFFALSE 34047
// exit ;
34045: GO 34193
// s1 := rand ( 1 , 4 ) ;
34047: NOP4
34051: PUSH
34052: LD_INT 1
34054: PPUSH
34055: LD_INT 4
34057: PPUSH
34058: NOP4
34062: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
34063: NOP4
34067: PUSH
34068: NOP4
34072: PUSH
34073: LD_INT 1
34075: ARRAY
34076: PPUSH
34077: NOP4
34081: PPUSH
34082: NOP4
34086: ST_TO_ADDR
// if s1 = 1 then
34087: NOP4
34091: PUSH
34092: LD_INT 1
34094: EQUAL
34095: IFFALSE 34115
// s2 := rand ( 2 , 4 ) else
34097: NOP4
34101: PUSH
34102: LD_INT 2
34104: PPUSH
34105: LD_INT 4
34107: PPUSH
34108: NOP4
34112: ST_TO_ADDR
34113: GO 34123
// s2 := 1 ;
34115: NOP4
34119: PUSH
34120: LD_INT 1
34122: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
34123: NOP4
34127: PUSH
34128: NOP4
34132: PUSH
34133: LD_INT 1
34135: ARRAY
34136: PPUSH
34137: NOP4
34141: PPUSH
34142: NOP4
34146: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
34147: NOP4
34151: PUSH
34152: LD_INT 1
34154: ARRAY
34155: PPUSH
34156: NOP4
34160: PPUSH
34161: NOP4
34165: PPUSH
34166: NOP4
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
34170: NOP4
34174: PUSH
34175: LD_INT 1
34177: ARRAY
34178: PPUSH
34179: NOP4
34183: PPUSH
34184: NOP4
34188: PPUSH
34189: NOP4
// end ;
34193: PPOPN 6
34195: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
34196: NOP4
34200: PUSH
34201: NOP4
34205: AND
34206: IFFALSE 34285
34208: GO 34210
34210: DISABLE
34211: LD_INT 0
34213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
34214: NOP4
34218: PUSH
34219: LD_INT 22
34221: PUSH
34222: NOP4
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 30
34233: PUSH
34234: LD_INT 3
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PPUSH
34245: NOP4
34249: ST_TO_ADDR
// if not tmp then
34250: NOP4
34254: NOT
34255: IFFALSE 34259
// exit ;
34257: GO 34285
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
34259: NOP4
34263: PUSH
34264: LD_INT 1
34266: PPUSH
34267: NOP4
34271: PPUSH
34272: NOP4
34276: ARRAY
34277: PPUSH
34278: LD_INT 1
34280: PPUSH
34281: NOP4
// end ;
34285: PPOPN 1
34287: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
34288: NOP4
34292: PUSH
34293: NOP4
34297: AND
34298: IFFALSE 34410
34300: GO 34302
34302: DISABLE
34303: LD_INT 0
34305: PPUSH
34306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
34307: NOP4
34311: PUSH
34312: LD_INT 22
34314: PUSH
34315: NOP4
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 2
34326: PUSH
34327: LD_INT 30
34329: PUSH
34330: LD_INT 27
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 30
34339: PUSH
34340: LD_INT 26
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 30
34349: PUSH
34350: LD_INT 28
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PPUSH
34367: NOP4
34371: ST_TO_ADDR
// if not tmp then
34372: NOP4
34376: NOT
34377: IFFALSE 34381
// exit ;
34379: GO 34410
// for i in tmp do
34381: NOP4
34385: PUSH
34386: NOP4
34390: PUSH
34391: FOR_IN
34392: IFFALSE 34408
// SetLives ( i , 1 ) ;
34394: NOP4
34398: PPUSH
34399: LD_INT 1
34401: PPUSH
34402: NOP4
34406: GO 34391
34408: POP
34409: POP
// end ;
34410: PPOPN 2
34412: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
34413: NOP4
34417: PUSH
34418: NOP4
34422: AND
34423: IFFALSE 34697
34425: GO 34427
34427: DISABLE
34428: LD_INT 0
34430: PPUSH
34431: PPUSH
34432: PPUSH
// begin i := rand ( 1 , 7 ) ;
34433: NOP4
34437: PUSH
34438: LD_INT 1
34440: PPUSH
34441: LD_INT 7
34443: PPUSH
34444: NOP4
34448: ST_TO_ADDR
// case i of 1 :
34449: NOP4
34453: PUSH
34454: LD_INT 1
34456: DOUBLE
34457: EQUAL
34458: IFTRUE 34462
34460: GO 34472
34462: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
34463: LD_STRING earthquake(getX(game), 0, 32)
34465: PPUSH
34466: NOP4
34470: GO 34697
34472: LD_INT 2
34474: DOUBLE
34475: EQUAL
34476: IFTRUE 34480
34478: GO 34494
34480: POP
// begin ToLua ( displayStucuk(); ) ;
34481: LD_STRING displayStucuk();
34483: PPUSH
34484: NOP4
// ResetFog ;
34488: NOP4
// end ; 3 :
34492: GO 34697
34494: LD_INT 3
34496: DOUBLE
34497: EQUAL
34498: IFTRUE 34502
34500: GO 34606
34502: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34503: NOP4
34507: PUSH
34508: LD_INT 22
34510: PUSH
34511: NOP4
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 25
34522: PUSH
34523: LD_INT 1
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PPUSH
34534: NOP4
34538: ST_TO_ADDR
// if not tmp then
34539: NOP4
34543: NOT
34544: IFFALSE 34548
// exit ;
34546: GO 34697
// un := tmp [ rand ( 1 , tmp ) ] ;
34548: NOP4
34552: PUSH
34553: NOP4
34557: PUSH
34558: LD_INT 1
34560: PPUSH
34561: NOP4
34565: PPUSH
34566: NOP4
34570: ARRAY
34571: ST_TO_ADDR
// if Crawls ( un ) then
34572: NOP4
34576: PPUSH
34577: NOP4
34581: IFFALSE 34592
// ComWalk ( un ) ;
34583: NOP4
34587: PPUSH
34588: NOP4
// SetClass ( un , class_mortar ) ;
34592: NOP4
34596: PPUSH
34597: LD_INT 8
34599: PPUSH
34600: NOP4
// end ; 4 :
34604: GO 34697
34606: LD_INT 4
34608: DOUBLE
34609: EQUAL
34610: IFTRUE 34614
34612: GO 34675
34614: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
34615: NOP4
34619: PUSH
34620: LD_INT 22
34622: PUSH
34623: NOP4
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 30
34634: PUSH
34635: LD_INT 29
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PPUSH
34646: NOP4
34650: ST_TO_ADDR
// if not tmp then
34651: NOP4
34655: NOT
34656: IFFALSE 34660
// exit ;
34658: GO 34697
// DestroyUnit ( tmp [ 1 ] ) ;
34660: NOP4
34664: PUSH
34665: LD_INT 1
34667: ARRAY
34668: PPUSH
34669: NOP4
// end ; 5 .. 7 :
34673: GO 34697
34675: LD_INT 5
34677: DOUBLE
34678: GREATEREQUAL
34679: IFFALSE 34687
34681: LD_INT 7
34683: DOUBLE
34684: LESSEQUAL
34685: IFTRUE 34689
34687: GO 34696
34689: POP
// StreamSibBomb ; end ;
34690: NOP4
34694: GO 34697
34696: POP
// end ;
34697: PPOPN 3
34699: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
34700: NOP4
34704: PUSH
34705: NOP4
34709: AND
34710: IFFALSE 34866
34712: GO 34714
34714: DISABLE
34715: LD_INT 0
34717: PPUSH
34718: PPUSH
34719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
34720: NOP4
34724: PUSH
34725: LD_INT 81
34727: PUSH
34728: NOP4
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 2
34739: PUSH
34740: LD_INT 21
34742: PUSH
34743: LD_INT 1
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 21
34752: PUSH
34753: LD_INT 2
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: LIST
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PPUSH
34769: NOP4
34773: ST_TO_ADDR
// if not tmp then
34774: NOP4
34778: NOT
34779: IFFALSE 34783
// exit ;
34781: GO 34866
// p := 0 ;
34783: NOP4
34787: PUSH
34788: LD_INT 0
34790: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
34791: LD_INT 35
34793: PPUSH
34794: NOP4
// p := p + 1 ;
34798: NOP4
34802: PUSH
34803: NOP4
34807: PUSH
34808: LD_INT 1
34810: PLUS
34811: ST_TO_ADDR
// for i in tmp do
34812: NOP4
34816: PUSH
34817: NOP4
34821: PUSH
34822: FOR_IN
34823: IFFALSE 34854
// if GetLives ( i ) < 1000 then
34825: NOP4
34829: PPUSH
34830: NOP4
34834: PUSH
34835: LD_INT 1000
34837: LESS
34838: IFFALSE 34852
// SetLives ( i , 1000 ) ;
34840: NOP4
34844: PPUSH
34845: LD_INT 1000
34847: PPUSH
34848: NOP4
34852: GO 34822
34854: POP
34855: POP
// until p > 20 ;
34856: NOP4
34860: PUSH
34861: LD_INT 20
34863: GREATER
34864: IFFALSE 34791
// end ;
34866: PPOPN 3
34868: END
// every 0 0$1 trigger StreamModeActive and sTime do
34869: NOP4
34873: PUSH
34874: NOP4
34878: AND
34879: IFFALSE 34914
34881: GO 34883
34883: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
34884: LD_INT 28
34886: PPUSH
34887: NOP4
34891: PPUSH
34892: LD_INT 2
34894: PPUSH
34895: NOP4
// SetTech ( tech_tauField , your_side , state_researched ) ;
34899: LD_INT 30
34901: PPUSH
34902: NOP4
34906: PPUSH
34907: LD_INT 2
34909: PPUSH
34910: NOP4
// end ;
34914: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
34915: NOP4
34919: PUSH
34920: NOP4
34924: AND
34925: IFFALSE 35046
34927: GO 34929
34929: DISABLE
34930: LD_INT 0
34932: PPUSH
34933: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34934: NOP4
34938: PUSH
34939: LD_INT 22
34941: PUSH
34942: NOP4
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 21
34953: PUSH
34954: LD_INT 1
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 3
34963: PUSH
34964: LD_INT 23
34966: PUSH
34967: LD_INT 0
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: LIST
34982: PPUSH
34983: NOP4
34987: ST_TO_ADDR
// if not tmp then
34988: NOP4
34992: NOT
34993: IFFALSE 34997
// exit ;
34995: GO 35046
// for i in tmp do
34997: NOP4
35001: PUSH
35002: NOP4
35006: PUSH
35007: FOR_IN
35008: IFFALSE 35044
// begin if Crawls ( i ) then
35010: NOP4
35014: PPUSH
35015: NOP4
35019: IFFALSE 35030
// ComWalk ( i ) ;
35021: NOP4
35025: PPUSH
35026: NOP4
// SetClass ( i , 2 ) ;
35030: NOP4
35034: PPUSH
35035: LD_INT 2
35037: PPUSH
35038: NOP4
// end ;
35042: GO 35007
35044: POP
35045: POP
// end ;
35046: PPOPN 2
35048: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
35049: NOP4
35053: PUSH
35054: NOP4
35058: AND
35059: IFFALSE 35340
35061: GO 35063
35063: DISABLE
35064: LD_INT 0
35066: PPUSH
35067: PPUSH
35068: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
35069: NOP4
35073: PPUSH
35074: LD_INT 9
35076: PPUSH
35077: LD_INT 1
35079: PPUSH
35080: LD_INT 1
35082: PPUSH
35083: NOP4
// ChangeSideFog ( 9 , your_side ) ;
35087: LD_INT 9
35089: PPUSH
35090: NOP4
35094: PPUSH
35095: NOP4
// uc_side := 9 ;
35099: LD_ADDR_OWVAR 20
35103: PUSH
35104: LD_INT 9
35106: ST_TO_ADDR
// uc_nation := 2 ;
35107: LD_ADDR_OWVAR 21
35111: PUSH
35112: LD_INT 2
35114: ST_TO_ADDR
// hc_name := Dark Warrior ;
35115: LD_ADDR_OWVAR 26
35119: PUSH
35120: LD_STRING Dark Warrior
35122: ST_TO_ADDR
// hc_gallery :=  ;
35123: LD_ADDR_OWVAR 33
35127: PUSH
35128: LD_STRING 
35130: ST_TO_ADDR
// hc_noskilllimit := true ;
35131: LD_ADDR_OWVAR 76
35135: PUSH
35136: LD_INT 1
35138: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
35139: LD_ADDR_OWVAR 31
35143: PUSH
35144: LD_INT 30
35146: PUSH
35147: LD_INT 30
35149: PUSH
35150: LD_INT 30
35152: PUSH
35153: LD_INT 30
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: ST_TO_ADDR
// un := CreateHuman ;
35162: NOP4
35166: PUSH
35167: NOP4
35171: ST_TO_ADDR
// hc_noskilllimit := false ;
35172: LD_ADDR_OWVAR 76
35176: PUSH
35177: LD_INT 0
35179: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
35180: NOP4
35184: PPUSH
35185: LD_INT 1
35187: PPUSH
35188: NOP4
// p := 0 ;
35192: NOP4
35196: PUSH
35197: LD_INT 0
35199: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35200: LD_INT 35
35202: PPUSH
35203: NOP4
// p := p + 1 ;
35207: NOP4
35211: PUSH
35212: NOP4
35216: PUSH
35217: LD_INT 1
35219: PLUS
35220: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
35221: NOP4
35225: PPUSH
35226: NOP4
35230: PUSH
35231: LD_INT 1000
35233: LESS
35234: IFFALSE 35248
// SetLives ( un , 1000 ) ;
35236: NOP4
35240: PPUSH
35241: LD_INT 1000
35243: PPUSH
35244: NOP4
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
35248: NOP4
35252: PPUSH
35253: LD_INT 81
35255: PUSH
35256: NOP4
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 91
35267: PUSH
35268: NOP4
35272: PUSH
35273: LD_INT 30
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: LIST
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PPUSH
35285: NOP4
35289: PPUSH
35290: NOP4
35294: PPUSH
35295: NOP4
35299: PPUSH
35300: NOP4
// until p > 60 or IsDead ( un ) ;
35304: NOP4
35308: PUSH
35309: LD_INT 60
35311: GREATER
35312: PUSH
35313: NOP4
35317: PPUSH
35318: NOP4
35322: OR
35323: IFFALSE 35200
// if un then
35325: NOP4
35329: IFFALSE 35340
// RemoveUnit ( un ) ;
35331: NOP4
35335: PPUSH
35336: NOP4
// end ;
35340: PPOPN 3
35342: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
35343: LD_INT 0
35345: PPUSH
// case cmd of 301 :
35346: NOP4
35350: PUSH
35351: LD_INT 301
35353: DOUBLE
35354: EQUAL
35355: IFTRUE 35359
35357: GO 35391
35359: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
35360: NOP4
35364: PPUSH
35365: NOP4
35369: PPUSH
35370: NOP4
35374: PPUSH
35375: NOP4
35379: PPUSH
35380: NOP4
35384: PPUSH
35385: NOP4
35389: GO 35512
35391: LD_INT 302
35393: DOUBLE
35394: EQUAL
35395: IFTRUE 35399
35397: GO 35436
35399: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
35400: NOP4
35404: PPUSH
35405: NOP4
35409: PPUSH
35410: NOP4
35414: PPUSH
35415: NOP4
35419: PPUSH
35420: NOP4
35424: PPUSH
35425: NOP4
35429: PPUSH
35430: NOP4
35434: GO 35512
35436: LD_INT 303
35438: DOUBLE
35439: EQUAL
35440: IFTRUE 35444
35442: GO 35481
35444: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
35445: NOP4
35449: PPUSH
35450: NOP4
35454: PPUSH
35455: NOP4
35459: PPUSH
35460: NOP4
35464: PPUSH
35465: NOP4
35469: PPUSH
35470: NOP4
35474: PPUSH
35475: NOP4
35479: GO 35512
35481: LD_INT 304
35483: DOUBLE
35484: EQUAL
35485: IFTRUE 35489
35487: GO 35511
35489: POP
// hHackTeleport ( unit , x , y ) ; end ;
35490: NOP4
35494: PPUSH
35495: NOP4
35499: PPUSH
35500: NOP4
35504: PPUSH
35505: NOP4
35509: GO 35512
35511: POP
// end ;
35512: LD_VAR 0 12
35516: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
35517: LD_INT 0
35519: PPUSH
35520: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
35521: NOP4
35525: PUSH
35526: LD_INT 1
35528: LESS
35529: PUSH
35530: NOP4
35534: PUSH
35535: LD_INT 3
35537: GREATER
35538: OR
35539: PUSH
35540: NOP4
35544: PPUSH
35545: NOP4
35549: PPUSH
35550: NOP4
35554: OR
35555: IFFALSE 35559
// exit ;
35557: GO 36279
// uc_side := your_side ;
35559: LD_ADDR_OWVAR 20
35563: PUSH
35564: NOP4
35568: ST_TO_ADDR
// uc_nation := nation ;
35569: LD_ADDR_OWVAR 21
35573: PUSH
35574: NOP4
35578: ST_TO_ADDR
// bc_level = 1 ;
35579: LD_ADDR_OWVAR 43
35583: PUSH
35584: LD_INT 1
35586: ST_TO_ADDR
// case btype of 1 :
35587: NOP4
35591: PUSH
35592: LD_INT 1
35594: DOUBLE
35595: EQUAL
35596: IFTRUE 35600
35598: GO 35611
35600: POP
// bc_type := b_depot ; 2 :
35601: LD_ADDR_OWVAR 42
35605: PUSH
35606: LD_INT 0
35608: ST_TO_ADDR
35609: GO 36223
35611: LD_INT 2
35613: DOUBLE
35614: EQUAL
35615: IFTRUE 35619
35617: GO 35630
35619: POP
// bc_type := b_warehouse ; 3 :
35620: LD_ADDR_OWVAR 42
35624: PUSH
35625: LD_INT 1
35627: ST_TO_ADDR
35628: GO 36223
35630: LD_INT 3
35632: DOUBLE
35633: EQUAL
35634: IFTRUE 35638
35636: GO 35649
35638: POP
// bc_type := b_lab ; 4 .. 9 :
35639: LD_ADDR_OWVAR 42
35643: PUSH
35644: LD_INT 6
35646: ST_TO_ADDR
35647: GO 36223
35649: LD_INT 4
35651: DOUBLE
35652: GREATEREQUAL
35653: IFFALSE 35661
35655: LD_INT 9
35657: DOUBLE
35658: LESSEQUAL
35659: IFTRUE 35663
35661: GO 35715
35663: POP
// begin bc_type := b_lab_half ;
35664: LD_ADDR_OWVAR 42
35668: PUSH
35669: LD_INT 7
35671: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
35672: LD_ADDR_OWVAR 44
35676: PUSH
35677: LD_INT 10
35679: PUSH
35680: LD_INT 11
35682: PUSH
35683: LD_INT 12
35685: PUSH
35686: LD_INT 15
35688: PUSH
35689: LD_INT 14
35691: PUSH
35692: LD_INT 13
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: PUSH
35703: NOP4
35707: PUSH
35708: LD_INT 3
35710: MINUS
35711: ARRAY
35712: ST_TO_ADDR
// end ; 10 .. 13 :
35713: GO 36223
35715: LD_INT 10
35717: DOUBLE
35718: GREATEREQUAL
35719: IFFALSE 35727
35721: LD_INT 13
35723: DOUBLE
35724: LESSEQUAL
35725: IFTRUE 35729
35727: GO 35806
35729: POP
// begin bc_type := b_lab_full ;
35730: LD_ADDR_OWVAR 42
35734: PUSH
35735: LD_INT 8
35737: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
35738: LD_ADDR_OWVAR 44
35742: PUSH
35743: LD_INT 10
35745: PUSH
35746: LD_INT 12
35748: PUSH
35749: LD_INT 14
35751: PUSH
35752: LD_INT 13
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: PUSH
35761: NOP4
35765: PUSH
35766: LD_INT 9
35768: MINUS
35769: ARRAY
35770: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
35771: LD_ADDR_OWVAR 45
35775: PUSH
35776: LD_INT 11
35778: PUSH
35779: LD_INT 15
35781: PUSH
35782: LD_INT 12
35784: PUSH
35785: LD_INT 15
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: PUSH
35794: NOP4
35798: PUSH
35799: LD_INT 9
35801: MINUS
35802: ARRAY
35803: ST_TO_ADDR
// end ; 14 :
35804: GO 36223
35806: LD_INT 14
35808: DOUBLE
35809: EQUAL
35810: IFTRUE 35814
35812: GO 35825
35814: POP
// bc_type := b_workshop ; 15 :
35815: LD_ADDR_OWVAR 42
35819: PUSH
35820: LD_INT 2
35822: ST_TO_ADDR
35823: GO 36223
35825: LD_INT 15
35827: DOUBLE
35828: EQUAL
35829: IFTRUE 35833
35831: GO 35844
35833: POP
// bc_type := b_factory ; 16 :
35834: LD_ADDR_OWVAR 42
35838: PUSH
35839: LD_INT 3
35841: ST_TO_ADDR
35842: GO 36223
35844: LD_INT 16
35846: DOUBLE
35847: EQUAL
35848: IFTRUE 35852
35850: GO 35863
35852: POP
// bc_type := b_ext_gun ; 17 :
35853: LD_ADDR_OWVAR 42
35857: PUSH
35858: LD_INT 17
35860: ST_TO_ADDR
35861: GO 36223
35863: LD_INT 17
35865: DOUBLE
35866: EQUAL
35867: IFTRUE 35871
35869: GO 35899
35871: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
35872: LD_ADDR_OWVAR 42
35876: PUSH
35877: LD_INT 19
35879: PUSH
35880: LD_INT 23
35882: PUSH
35883: LD_INT 19
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: LIST
35890: PUSH
35891: NOP4
35895: ARRAY
35896: ST_TO_ADDR
35897: GO 36223
35899: LD_INT 18
35901: DOUBLE
35902: EQUAL
35903: IFTRUE 35907
35905: GO 35918
35907: POP
// bc_type := b_ext_radar ; 19 :
35908: LD_ADDR_OWVAR 42
35912: PUSH
35913: LD_INT 20
35915: ST_TO_ADDR
35916: GO 36223
35918: LD_INT 19
35920: DOUBLE
35921: EQUAL
35922: IFTRUE 35926
35924: GO 35937
35926: POP
// bc_type := b_ext_radio ; 20 :
35927: LD_ADDR_OWVAR 42
35931: PUSH
35932: LD_INT 22
35934: ST_TO_ADDR
35935: GO 36223
35937: LD_INT 20
35939: DOUBLE
35940: EQUAL
35941: IFTRUE 35945
35943: GO 35956
35945: POP
// bc_type := b_ext_siberium ; 21 :
35946: LD_ADDR_OWVAR 42
35950: PUSH
35951: LD_INT 21
35953: ST_TO_ADDR
35954: GO 36223
35956: LD_INT 21
35958: DOUBLE
35959: EQUAL
35960: IFTRUE 35964
35962: GO 35975
35964: POP
// bc_type := b_ext_computer ; 22 :
35965: LD_ADDR_OWVAR 42
35969: PUSH
35970: LD_INT 24
35972: ST_TO_ADDR
35973: GO 36223
35975: LD_INT 22
35977: DOUBLE
35978: EQUAL
35979: IFTRUE 35983
35981: GO 35994
35983: POP
// bc_type := b_ext_track ; 23 :
35984: LD_ADDR_OWVAR 42
35988: PUSH
35989: LD_INT 16
35991: ST_TO_ADDR
35992: GO 36223
35994: LD_INT 23
35996: DOUBLE
35997: EQUAL
35998: IFTRUE 36002
36000: GO 36013
36002: POP
// bc_type := b_ext_laser ; 24 :
36003: LD_ADDR_OWVAR 42
36007: PUSH
36008: LD_INT 25
36010: ST_TO_ADDR
36011: GO 36223
36013: LD_INT 24
36015: DOUBLE
36016: EQUAL
36017: IFTRUE 36021
36019: GO 36032
36021: POP
// bc_type := b_control_tower ; 25 :
36022: LD_ADDR_OWVAR 42
36026: PUSH
36027: LD_INT 36
36029: ST_TO_ADDR
36030: GO 36223
36032: LD_INT 25
36034: DOUBLE
36035: EQUAL
36036: IFTRUE 36040
36038: GO 36051
36040: POP
// bc_type := b_breastwork ; 26 :
36041: LD_ADDR_OWVAR 42
36045: PUSH
36046: LD_INT 31
36048: ST_TO_ADDR
36049: GO 36223
36051: LD_INT 26
36053: DOUBLE
36054: EQUAL
36055: IFTRUE 36059
36057: GO 36070
36059: POP
// bc_type := b_bunker ; 27 :
36060: LD_ADDR_OWVAR 42
36064: PUSH
36065: LD_INT 32
36067: ST_TO_ADDR
36068: GO 36223
36070: LD_INT 27
36072: DOUBLE
36073: EQUAL
36074: IFTRUE 36078
36076: GO 36089
36078: POP
// bc_type := b_turret ; 28 :
36079: LD_ADDR_OWVAR 42
36083: PUSH
36084: LD_INT 33
36086: ST_TO_ADDR
36087: GO 36223
36089: LD_INT 28
36091: DOUBLE
36092: EQUAL
36093: IFTRUE 36097
36095: GO 36108
36097: POP
// bc_type := b_armoury ; 29 :
36098: LD_ADDR_OWVAR 42
36102: PUSH
36103: LD_INT 4
36105: ST_TO_ADDR
36106: GO 36223
36108: LD_INT 29
36110: DOUBLE
36111: EQUAL
36112: IFTRUE 36116
36114: GO 36127
36116: POP
// bc_type := b_barracks ; 30 :
36117: LD_ADDR_OWVAR 42
36121: PUSH
36122: LD_INT 5
36124: ST_TO_ADDR
36125: GO 36223
36127: LD_INT 30
36129: DOUBLE
36130: EQUAL
36131: IFTRUE 36135
36133: GO 36146
36135: POP
// bc_type := b_solar_power ; 31 :
36136: LD_ADDR_OWVAR 42
36140: PUSH
36141: LD_INT 27
36143: ST_TO_ADDR
36144: GO 36223
36146: LD_INT 31
36148: DOUBLE
36149: EQUAL
36150: IFTRUE 36154
36152: GO 36165
36154: POP
// bc_type := b_oil_power ; 32 :
36155: LD_ADDR_OWVAR 42
36159: PUSH
36160: LD_INT 26
36162: ST_TO_ADDR
36163: GO 36223
36165: LD_INT 32
36167: DOUBLE
36168: EQUAL
36169: IFTRUE 36173
36171: GO 36184
36173: POP
// bc_type := b_siberite_power ; 33 :
36174: LD_ADDR_OWVAR 42
36178: PUSH
36179: LD_INT 28
36181: ST_TO_ADDR
36182: GO 36223
36184: LD_INT 33
36186: DOUBLE
36187: EQUAL
36188: IFTRUE 36192
36190: GO 36203
36192: POP
// bc_type := b_oil_mine ; 34 :
36193: LD_ADDR_OWVAR 42
36197: PUSH
36198: LD_INT 29
36200: ST_TO_ADDR
36201: GO 36223
36203: LD_INT 34
36205: DOUBLE
36206: EQUAL
36207: IFTRUE 36211
36209: GO 36222
36211: POP
// bc_type := b_siberite_mine ; end ;
36212: LD_ADDR_OWVAR 42
36216: PUSH
36217: LD_INT 30
36219: ST_TO_ADDR
36220: GO 36223
36222: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
36223: NOP4
36227: PUSH
36228: NOP4
36232: PPUSH
36233: NOP4
36237: PPUSH
36238: NOP4
36242: PPUSH
36243: NOP4
36247: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
36248: NOP4
36252: PUSH
36253: LD_INT 32
36255: PUSH
36256: LD_INT 33
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: IN
36263: IFFALSE 36279
// PlaceWeaponTurret ( b , weapon ) ;
36265: NOP4
36269: PPUSH
36270: NOP4
36274: PPUSH
36275: NOP4
// end ;
36279: LD_VAR 0 7
36283: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
36284: LD_INT 0
36286: PPUSH
36287: PPUSH
36288: PPUSH
36289: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36290: NOP4
36294: PUSH
36295: LD_INT 22
36297: PUSH
36298: NOP4
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: LD_INT 2
36309: PUSH
36310: LD_INT 30
36312: PUSH
36313: LD_INT 0
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 30
36322: PUSH
36323: LD_INT 1
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: LIST
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PPUSH
36339: NOP4
36343: ST_TO_ADDR
// if not tmp then
36344: NOP4
36348: NOT
36349: IFFALSE 36353
// exit ;
36351: GO 36412
// for i in tmp do
36353: NOP4
36357: PUSH
36358: NOP4
36362: PUSH
36363: FOR_IN
36364: IFFALSE 36410
// for j = 1 to 3 do
36366: NOP4
36370: PUSH
36371: DOUBLE
36372: LD_INT 1
36374: DEC
36375: ST_TO_ADDR
36376: LD_INT 3
36378: PUSH
36379: FOR_TO
36380: IFFALSE 36406
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
36382: NOP4
36386: PPUSH
36387: NOP4
36391: PPUSH
36392: NOP4
36396: PPUSH
36397: LD_INT 99999
36399: PPUSH
36400: NOP4
36404: GO 36379
36406: POP
36407: POP
36408: GO 36363
36410: POP
36411: POP
// end ;
36412: LD_VAR 0 1
36416: RET
// export function hHackSetLevel10 ; var i , j ; begin
36417: LD_INT 0
36419: PPUSH
36420: PPUSH
36421: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
36422: NOP4
36426: PUSH
36427: LD_INT 21
36429: PUSH
36430: LD_INT 1
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PPUSH
36437: NOP4
36441: PUSH
36442: FOR_IN
36443: IFFALSE 36495
// if IsSelected ( i ) then
36445: NOP4
36449: PPUSH
36450: NOP4
36454: IFFALSE 36493
// begin for j := 1 to 4 do
36456: NOP4
36460: PUSH
36461: DOUBLE
36462: LD_INT 1
36464: DEC
36465: ST_TO_ADDR
36466: LD_INT 4
36468: PUSH
36469: FOR_TO
36470: IFFALSE 36491
// SetSkill ( i , j , 10 ) ;
36472: NOP4
36476: PPUSH
36477: NOP4
36481: PPUSH
36482: LD_INT 10
36484: PPUSH
36485: NOP4
36489: GO 36469
36491: POP
36492: POP
// end ;
36493: GO 36442
36495: POP
36496: POP
// end ;
36497: LD_VAR 0 1
36501: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
36502: LD_INT 0
36504: PPUSH
36505: PPUSH
36506: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
36507: NOP4
36511: PUSH
36512: LD_INT 22
36514: PUSH
36515: NOP4
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_INT 21
36526: PUSH
36527: LD_INT 1
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PPUSH
36538: NOP4
36542: PUSH
36543: FOR_IN
36544: IFFALSE 36585
// begin for j := 1 to 4 do
36546: NOP4
36550: PUSH
36551: DOUBLE
36552: LD_INT 1
36554: DEC
36555: ST_TO_ADDR
36556: LD_INT 4
36558: PUSH
36559: FOR_TO
36560: IFFALSE 36581
// SetSkill ( i , j , 10 ) ;
36562: NOP4
36566: PPUSH
36567: NOP4
36571: PPUSH
36572: LD_INT 10
36574: PPUSH
36575: NOP4
36579: GO 36559
36581: POP
36582: POP
// end ;
36583: GO 36543
36585: POP
36586: POP
// end ;
36587: LD_VAR 0 1
36591: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
36592: LD_INT 0
36594: PPUSH
// uc_side := your_side ;
36595: LD_ADDR_OWVAR 20
36599: PUSH
36600: NOP4
36604: ST_TO_ADDR
// uc_nation := nation ;
36605: LD_ADDR_OWVAR 21
36609: PUSH
36610: NOP4
36614: ST_TO_ADDR
// InitHc ;
36615: NOP4
// PrepareHuman ( false , class , skill ) ;
36619: LD_INT 0
36621: PPUSH
36622: NOP4
36626: PPUSH
36627: NOP4
36631: PPUSH
36632: NOP4
// if HexInfo ( x , y ) = 0 then
36636: NOP4
36640: PPUSH
36641: NOP4
36645: PPUSH
36646: NOP4
36650: PUSH
36651: LD_INT 0
36653: EQUAL
36654: IFFALSE 36678
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
36656: NOP4
36660: PPUSH
36661: NOP4
36665: PPUSH
36666: NOP4
36670: PPUSH
36671: LD_INT 1
36673: PPUSH
36674: NOP4
// end ;
36678: LD_VAR 0 6
36682: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
36683: LD_INT 0
36685: PPUSH
36686: PPUSH
// uc_side := your_side ;
36687: LD_ADDR_OWVAR 20
36691: PUSH
36692: NOP4
36696: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
36697: NOP4
36701: PUSH
36702: LD_INT 1
36704: PUSH
36705: LD_INT 2
36707: PUSH
36708: LD_INT 3
36710: PUSH
36711: LD_INT 4
36713: PUSH
36714: LD_INT 5
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: IN
36724: IFFALSE 36736
// uc_nation := nation_american else
36726: LD_ADDR_OWVAR 21
36730: PUSH
36731: LD_INT 1
36733: ST_TO_ADDR
36734: GO 36779
// if chassis in [ 11 , 12 , 13 , 14 ] then
36736: NOP4
36740: PUSH
36741: LD_INT 11
36743: PUSH
36744: LD_INT 12
36746: PUSH
36747: LD_INT 13
36749: PUSH
36750: LD_INT 14
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: IN
36759: IFFALSE 36771
// uc_nation := nation_arabian else
36761: LD_ADDR_OWVAR 21
36765: PUSH
36766: LD_INT 2
36768: ST_TO_ADDR
36769: GO 36779
// uc_nation := nation_russian ;
36771: LD_ADDR_OWVAR 21
36775: PUSH
36776: LD_INT 3
36778: ST_TO_ADDR
// vc_chassis := chassis ;
36779: LD_ADDR_OWVAR 37
36783: PUSH
36784: NOP4
36788: ST_TO_ADDR
// vc_engine := engine ;
36789: LD_ADDR_OWVAR 39
36793: PUSH
36794: NOP4
36798: ST_TO_ADDR
// vc_control := control ;
36799: LD_ADDR_OWVAR 38
36803: PUSH
36804: NOP4
36808: ST_TO_ADDR
// vc_weapon := weapon ;
36809: LD_ADDR_OWVAR 40
36813: PUSH
36814: NOP4
36818: ST_TO_ADDR
// un := CreateVehicle ;
36819: NOP4
36823: PUSH
36824: NOP4
36828: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
36829: NOP4
36833: PPUSH
36834: LD_INT 0
36836: PPUSH
36837: LD_INT 5
36839: PPUSH
36840: NOP4
36844: PPUSH
36845: NOP4
// PlaceUnitXY ( un , x , y , true ) ;
36849: NOP4
36853: PPUSH
36854: NOP4
36858: PPUSH
36859: NOP4
36863: PPUSH
36864: LD_INT 1
36866: PPUSH
36867: NOP4
// end ;
36871: LD_VAR 0 7
36875: RET
// export hInvincible ; every 1 do
36876: GO 36878
36878: DISABLE
// hInvincible := [ ] ;
36879: NOP4
36883: PUSH
36884: EMPTY
36885: ST_TO_ADDR
36886: END
// every 10 do var i ;
36887: GO 36889
36889: DISABLE
36890: LD_INT 0
36892: PPUSH
// begin enable ;
36893: ENABLE
// if not hInvincible then
36894: NOP4
36898: NOT
36899: IFFALSE 36903
// exit ;
36901: GO 36947
// for i in hInvincible do
36903: NOP4
36907: PUSH
36908: NOP4
36912: PUSH
36913: FOR_IN
36914: IFFALSE 36945
// if GetLives ( i ) < 1000 then
36916: NOP4
36920: PPUSH
36921: NOP4
36925: PUSH
36926: LD_INT 1000
36928: LESS
36929: IFFALSE 36943
// SetLives ( i , 1000 ) ;
36931: NOP4
36935: PPUSH
36936: LD_INT 1000
36938: PPUSH
36939: NOP4
36943: GO 36913
36945: POP
36946: POP
// end ;
36947: PPOPN 1
36949: END
// export function hHackInvincible ; var i ; begin
36950: LD_INT 0
36952: PPUSH
36953: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
36954: NOP4
36958: PUSH
36959: LD_INT 2
36961: PUSH
36962: LD_INT 21
36964: PUSH
36965: LD_INT 1
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 21
36974: PUSH
36975: LD_INT 2
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: LIST
36986: PPUSH
36987: NOP4
36991: PUSH
36992: FOR_IN
36993: IFFALSE 37054
// if IsSelected ( i ) then
36995: NOP4
36999: PPUSH
37000: NOP4
37004: IFFALSE 37052
// begin if i in hInvincible then
37006: NOP4
37010: PUSH
37011: NOP4
37015: IN
37016: IFFALSE 37036
// hInvincible := hInvincible diff i else
37018: NOP4
37022: PUSH
37023: NOP4
37027: PUSH
37028: NOP4
37032: DIFF
37033: ST_TO_ADDR
37034: GO 37052
// hInvincible := hInvincible union i ;
37036: NOP4
37040: PUSH
37041: NOP4
37045: PUSH
37046: NOP4
37050: UNION
37051: ST_TO_ADDR
// end ;
37052: GO 36992
37054: POP
37055: POP
// end ;
37056: LD_VAR 0 1
37060: RET
// export function hHackInvisible ; var i , j ; begin
37061: LD_INT 0
37063: PPUSH
37064: PPUSH
37065: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
37066: NOP4
37070: PUSH
37071: LD_INT 21
37073: PUSH
37074: LD_INT 1
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PPUSH
37081: NOP4
37085: PUSH
37086: FOR_IN
37087: IFFALSE 37111
// if IsSelected ( i ) then
37089: NOP4
37093: PPUSH
37094: NOP4
37098: IFFALSE 37109
// ComForceInvisible ( i ) ;
37100: NOP4
37104: PPUSH
37105: NOP4
37109: GO 37086
37111: POP
37112: POP
// end ;
37113: LD_VAR 0 1
37117: RET
// export function hHackChangeYourSide ; begin
37118: LD_INT 0
37120: PPUSH
// if your_side = 8 then
37121: NOP4
37125: PUSH
37126: LD_INT 8
37128: EQUAL
37129: IFFALSE 37141
// your_side := 0 else
37131: LD_ADDR_OWVAR 2
37135: PUSH
37136: LD_INT 0
37138: ST_TO_ADDR
37139: GO 37155
// your_side := your_side + 1 ;
37141: LD_ADDR_OWVAR 2
37145: PUSH
37146: NOP4
37150: PUSH
37151: LD_INT 1
37153: PLUS
37154: ST_TO_ADDR
// end ;
37155: LD_VAR 0 1
37159: RET
// export function hHackChangeUnitSide ; var i , j ; begin
37160: LD_INT 0
37162: PPUSH
37163: PPUSH
37164: PPUSH
// for i in all_units do
37165: NOP4
37169: PUSH
37170: NOP4
37174: PUSH
37175: FOR_IN
37176: IFFALSE 37254
// if IsSelected ( i ) then
37178: NOP4
37182: PPUSH
37183: NOP4
37187: IFFALSE 37252
// begin j := GetSide ( i ) ;
37189: NOP4
37193: PUSH
37194: NOP4
37198: PPUSH
37199: NOP4
37203: ST_TO_ADDR
// if j = 8 then
37204: NOP4
37208: PUSH
37209: LD_INT 8
37211: EQUAL
37212: IFFALSE 37224
// j := 0 else
37214: NOP4
37218: PUSH
37219: LD_INT 0
37221: ST_TO_ADDR
37222: GO 37238
// j := j + 1 ;
37224: NOP4
37228: PUSH
37229: NOP4
37233: PUSH
37234: LD_INT 1
37236: PLUS
37237: ST_TO_ADDR
// SetSide ( i , j ) ;
37238: NOP4
37242: PPUSH
37243: NOP4
37247: PPUSH
37248: NOP4
// end ;
37252: GO 37175
37254: POP
37255: POP
// end ;
37256: LD_VAR 0 1
37260: RET
// export function hHackFog ; begin
37261: LD_INT 0
37263: PPUSH
// FogOff ( true ) ;
37264: LD_INT 1
37266: PPUSH
37267: NOP4
// end ;
37271: LD_VAR 0 1
37275: RET
// export function hHackTeleport ( unit , x , y ) ; begin
37276: LD_INT 0
37278: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
37279: NOP4
37283: PPUSH
37284: NOP4
37288: PPUSH
37289: NOP4
37293: PPUSH
37294: LD_INT 1
37296: PPUSH
37297: LD_INT 1
37299: PPUSH
37300: NOP4
// CenterOnXY ( x , y ) ;
37304: NOP4
37308: PPUSH
37309: NOP4
37313: PPUSH
37314: NOP4
// end ; end_of_file
37318: LD_VAR 0 4
37322: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
37323: LD_INT 0
37325: PPUSH
37326: PPUSH
37327: PPUSH
37328: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
37329: NOP4
37333: PPUSH
37334: NOP4
37338: PUSH
37339: NOP4
37343: EQUAL
37344: IFFALSE 37416
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37346: LD_INT 68
37348: PPUSH
37349: NOP4
37353: PPUSH
37354: NOP4
37358: PPUSH
37359: NOP4
37363: PUSH
37364: LD_INT 2
37366: EQUAL
37367: IFFALSE 37379
// eff := 70 else
37369: NOP4
37373: PUSH
37374: LD_INT 70
37376: ST_TO_ADDR
37377: GO 37387
// eff := 30 ;
37379: NOP4
37383: PUSH
37384: LD_INT 30
37386: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37387: NOP4
37391: PPUSH
37392: NOP4
37396: PPUSH
37397: NOP4
37401: PPUSH
37402: NOP4
37406: PPUSH
37407: NOP4
37411: PPUSH
37412: NOP4
// end ; end ;
37416: LD_VAR 0 2
37420: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
37421: LD_INT 0
37423: PPUSH
// end ;
37424: LD_VAR 0 4
37428: RET
// export function SOS_Command ( cmd ) ; begin
37429: LD_INT 0
37431: PPUSH
// end ;
37432: LD_VAR 0 2
37436: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
37437: LD_INT 0
37439: PPUSH
// if cmd = 121 then
37440: NOP4
37444: PUSH
37445: LD_INT 121
37447: EQUAL
37448: IFFALSE 37450
// end ;
37450: LD_VAR 0 6
37454: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37455: LD_INT 0
37457: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37458: NOP4
37462: PUSH
37463: LD_INT 250
37465: EQUAL
37466: PUSH
37467: NOP4
37471: PPUSH
37472: NOP4
37476: PUSH
37477: NOP4
37481: EQUAL
37482: AND
37483: IFFALSE 37504
// MinerPlaceMine ( unit , x , y ) ;
37485: NOP4
37489: PPUSH
37490: NOP4
37494: PPUSH
37495: NOP4
37499: PPUSH
37500: NOP4
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37504: NOP4
37508: PUSH
37509: LD_INT 251
37511: EQUAL
37512: PUSH
37513: NOP4
37517: PPUSH
37518: NOP4
37522: PUSH
37523: NOP4
37527: EQUAL
37528: AND
37529: IFFALSE 37550
// MinerDetonateMine ( unit , x , y ) ;
37531: NOP4
37535: PPUSH
37536: NOP4
37540: PPUSH
37541: NOP4
37545: PPUSH
37546: NOP4
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37550: NOP4
37554: PUSH
37555: LD_INT 252
37557: EQUAL
37558: PUSH
37559: NOP4
37563: PPUSH
37564: NOP4
37568: PUSH
37569: NOP4
37573: EQUAL
37574: AND
37575: IFFALSE 37596
// MinerCreateMinefield ( unit , x , y ) ;
37577: NOP4
37581: PPUSH
37582: NOP4
37586: PPUSH
37587: NOP4
37591: PPUSH
37592: NOP4
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37596: NOP4
37600: PUSH
37601: LD_INT 253
37603: EQUAL
37604: PUSH
37605: NOP4
37609: PPUSH
37610: NOP4
37614: PUSH
37615: LD_INT 5
37617: EQUAL
37618: AND
37619: IFFALSE 37640
// ComBinocular ( unit , x , y ) ;
37621: NOP4
37625: PPUSH
37626: NOP4
37630: PPUSH
37631: NOP4
37635: PPUSH
37636: NOP4
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37640: NOP4
37644: PUSH
37645: LD_INT 254
37647: EQUAL
37648: PUSH
37649: NOP4
37653: PPUSH
37654: NOP4
37658: PUSH
37659: NOP4
37663: EQUAL
37664: AND
37665: PUSH
37666: NOP4
37670: PPUSH
37671: NOP4
37675: PUSH
37676: LD_INT 3
37678: EQUAL
37679: AND
37680: IFFALSE 37696
// HackDestroyVehicle ( unit , selectedUnit ) ;
37682: NOP4
37686: PPUSH
37687: NOP4
37691: PPUSH
37692: NOP4
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37696: NOP4
37700: PUSH
37701: LD_INT 255
37703: EQUAL
37704: PUSH
37705: NOP4
37709: PPUSH
37710: NOP4
37714: PUSH
37715: LD_INT 14
37717: PUSH
37718: LD_INT 53
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: IN
37725: AND
37726: PUSH
37727: NOP4
37731: PPUSH
37732: NOP4
37736: PPUSH
37737: NOP4
37741: AND
37742: IFFALSE 37766
// CutTreeXYR ( unit , x , y , 12 ) ;
37744: NOP4
37748: PPUSH
37749: NOP4
37753: PPUSH
37754: NOP4
37758: PPUSH
37759: LD_INT 12
37761: PPUSH
37762: NOP4
// end ;
37766: LD_VAR 0 6
37770: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
37771: LD_INT 0
37773: PPUSH
// end ;
37774: LD_VAR 0 4
37778: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37779: LD_INT 0
37781: PPUSH
37782: PPUSH
37783: PPUSH
37784: PPUSH
37785: PPUSH
37786: PPUSH
37787: PPUSH
37788: PPUSH
37789: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
37790: NOP4
37794: NOT
37795: PUSH
37796: NOP4
37800: PPUSH
37801: NOP4
37805: PPUSH
37806: NOP4
37810: NOT
37811: OR
37812: PUSH
37813: NOP4
37817: NOT
37818: OR
37819: IFFALSE 37823
// exit ;
37821: GO 38163
// list := [ ] ;
37823: NOP4
37827: PUSH
37828: EMPTY
37829: ST_TO_ADDR
// if x - r < 0 then
37830: NOP4
37834: PUSH
37835: NOP4
37839: MINUS
37840: PUSH
37841: LD_INT 0
37843: LESS
37844: IFFALSE 37856
// min_x := 0 else
37846: NOP4
37850: PUSH
37851: LD_INT 0
37853: ST_TO_ADDR
37854: GO 37872
// min_x := x - r ;
37856: NOP4
37860: PUSH
37861: NOP4
37865: PUSH
37866: NOP4
37870: MINUS
37871: ST_TO_ADDR
// if y - r < 0 then
37872: NOP4
37876: PUSH
37877: NOP4
37881: MINUS
37882: PUSH
37883: LD_INT 0
37885: LESS
37886: IFFALSE 37898
// min_y := 0 else
37888: NOP4
37892: PUSH
37893: LD_INT 0
37895: ST_TO_ADDR
37896: GO 37914
// min_y := y - r ;
37898: NOP4
37902: PUSH
37903: NOP4
37907: PUSH
37908: NOP4
37912: MINUS
37913: ST_TO_ADDR
// max_x := x + r ;
37914: NOP4
37918: PUSH
37919: NOP4
37923: PUSH
37924: NOP4
37928: PLUS
37929: ST_TO_ADDR
// max_y := y + r ;
37930: NOP4
37934: PUSH
37935: NOP4
37939: PUSH
37940: NOP4
37944: PLUS
37945: ST_TO_ADDR
// for _x = min_x to max_x do
37946: NOP4
37950: PUSH
37951: DOUBLE
37952: NOP4
37956: DEC
37957: ST_TO_ADDR
37958: NOP4
37962: PUSH
37963: FOR_TO
37964: IFFALSE 38081
// for _y = min_y to max_y do
37966: NOP4
37970: PUSH
37971: DOUBLE
37972: NOP4
37976: DEC
37977: ST_TO_ADDR
37978: NOP4
37982: PUSH
37983: FOR_TO
37984: IFFALSE 38077
// begin if not ValidHex ( _x , _y ) then
37986: NOP4
37990: PPUSH
37991: NOP4
37995: PPUSH
37996: NOP4
38000: NOT
38001: IFFALSE 38005
// continue ;
38003: GO 37983
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38005: NOP4
38009: PPUSH
38010: NOP4
38014: PPUSH
38015: NOP4
38019: PUSH
38020: NOP4
38024: PPUSH
38025: NOP4
38029: PPUSH
38030: NOP4
38034: AND
38035: IFFALSE 38075
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38037: NOP4
38041: PUSH
38042: NOP4
38046: PPUSH
38047: NOP4
38051: PUSH
38052: LD_INT 1
38054: PLUS
38055: PPUSH
38056: NOP4
38060: PUSH
38061: NOP4
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PPUSH
38070: NOP4
38074: ST_TO_ADDR
// end ;
38075: GO 37983
38077: POP
38078: POP
38079: GO 37963
38081: POP
38082: POP
// if not list then
38083: NOP4
38087: NOT
38088: IFFALSE 38092
// exit ;
38090: GO 38163
// for i in list do
38092: NOP4
38096: PUSH
38097: NOP4
38101: PUSH
38102: FOR_IN
38103: IFFALSE 38161
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
38105: NOP4
38109: PPUSH
38110: LD_STRING M
38112: PUSH
38113: NOP4
38117: PUSH
38118: LD_INT 1
38120: ARRAY
38121: PUSH
38122: NOP4
38126: PUSH
38127: LD_INT 2
38129: ARRAY
38130: PUSH
38131: LD_INT 0
38133: PUSH
38134: LD_INT 0
38136: PUSH
38137: LD_INT 0
38139: PUSH
38140: LD_INT 0
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: PUSH
38152: EMPTY
38153: LIST
38154: PPUSH
38155: NOP4
38159: GO 38102
38161: POP
38162: POP
// end ;
38163: LD_VAR 0 5
38167: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38168: NOP4
38172: NOT
38173: IFFALSE 38223
38175: GO 38177
38177: DISABLE
// begin initHack := true ;
38178: NOP4
38182: PUSH
38183: LD_INT 1
38185: ST_TO_ADDR
// hackTanks := [ ] ;
38186: NOP4
38190: PUSH
38191: EMPTY
38192: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38193: NOP4
38197: PUSH
38198: EMPTY
38199: ST_TO_ADDR
// hackLimit := 3 ;
38200: NOP4
38204: PUSH
38205: LD_INT 3
38207: ST_TO_ADDR
// hackDist := 12 ;
38208: NOP4
38212: PUSH
38213: LD_INT 12
38215: ST_TO_ADDR
// hackCounter := [ ] ;
38216: NOP4
38220: PUSH
38221: EMPTY
38222: ST_TO_ADDR
// end ;
38223: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38224: NOP4
38228: PUSH
38229: LD_INT 34
38231: PUSH
38232: NOP4
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PPUSH
38241: NOP4
38245: AND
38246: IFFALSE 38501
38248: GO 38250
38250: DISABLE
38251: LD_INT 0
38253: PPUSH
38254: PPUSH
// begin enable ;
38255: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38256: NOP4
38260: PUSH
38261: LD_INT 34
38263: PUSH
38264: NOP4
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PPUSH
38273: NOP4
38277: PUSH
38278: FOR_IN
38279: IFFALSE 38499
// begin if not i in hackTanks then
38281: NOP4
38285: PUSH
38286: NOP4
38290: IN
38291: NOT
38292: IFFALSE 38375
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38294: NOP4
38298: PUSH
38299: NOP4
38303: PPUSH
38304: NOP4
38308: PUSH
38309: LD_INT 1
38311: PLUS
38312: PPUSH
38313: NOP4
38317: PPUSH
38318: NOP4
38322: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38323: NOP4
38327: PUSH
38328: NOP4
38332: PPUSH
38333: NOP4
38337: PUSH
38338: LD_INT 1
38340: PLUS
38341: PPUSH
38342: EMPTY
38343: PPUSH
38344: NOP4
38348: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38349: NOP4
38353: PUSH
38354: NOP4
38358: PPUSH
38359: NOP4
38363: PUSH
38364: LD_INT 1
38366: PLUS
38367: PPUSH
38368: EMPTY
38369: PPUSH
38370: NOP4
38374: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38375: NOP4
38379: PPUSH
38380: NOP4
38384: NOT
38385: IFFALSE 38398
// begin HackUnlinkAll ( i ) ;
38387: NOP4
38391: PPUSH
38392: NOP4
// continue ;
38396: GO 38278
// end ; HackCheckCapturedStatus ( i ) ;
38398: NOP4
38402: PPUSH
38403: NOP4
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38407: NOP4
38411: PUSH
38412: LD_INT 81
38414: PUSH
38415: NOP4
38419: PPUSH
38420: NOP4
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 33
38431: PUSH
38432: LD_INT 3
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 91
38441: PUSH
38442: NOP4
38446: PUSH
38447: NOP4
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 50
38459: PUSH
38460: EMPTY
38461: LIST
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: PPUSH
38469: NOP4
38473: ST_TO_ADDR
// if not tmp then
38474: NOP4
38478: NOT
38479: IFFALSE 38483
// continue ;
38481: GO 38278
// HackLink ( i , tmp ) ;
38483: NOP4
38487: PPUSH
38488: NOP4
38492: PPUSH
38493: NOP4
// end ;
38497: GO 38278
38499: POP
38500: POP
// end ;
38501: PPOPN 2
38503: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38504: LD_INT 0
38506: PPUSH
38507: PPUSH
38508: PPUSH
// if not hack in hackTanks then
38509: NOP4
38513: PUSH
38514: NOP4
38518: IN
38519: NOT
38520: IFFALSE 38524
// exit ;
38522: GO 38635
// index := GetElementIndex ( hackTanks , hack ) ;
38524: NOP4
38528: PUSH
38529: NOP4
38533: PPUSH
38534: NOP4
38538: PPUSH
38539: NOP4
38543: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38544: NOP4
38548: PUSH
38549: NOP4
38553: ARRAY
38554: IFFALSE 38635
// begin for i in hackTanksCaptured [ index ] do
38556: NOP4
38560: PUSH
38561: NOP4
38565: PUSH
38566: NOP4
38570: ARRAY
38571: PUSH
38572: FOR_IN
38573: IFFALSE 38599
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38575: NOP4
38579: PUSH
38580: LD_INT 1
38582: ARRAY
38583: PPUSH
38584: NOP4
38588: PUSH
38589: LD_INT 2
38591: ARRAY
38592: PPUSH
38593: NOP4
38597: GO 38572
38599: POP
38600: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38601: NOP4
38605: PUSH
38606: NOP4
38610: PPUSH
38611: NOP4
38615: PPUSH
38616: EMPTY
38617: PPUSH
38618: NOP4
38622: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38623: NOP4
38627: PPUSH
38628: LD_INT 0
38630: PPUSH
38631: NOP4
// end ; end ;
38635: LD_VAR 0 2
38639: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38640: LD_INT 0
38642: PPUSH
38643: PPUSH
38644: PPUSH
// if not hack in hackTanks or not vehicles then
38645: NOP4
38649: PUSH
38650: NOP4
38654: IN
38655: NOT
38656: PUSH
38657: NOP4
38661: NOT
38662: OR
38663: IFFALSE 38667
// exit ;
38665: GO 38942
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38667: NOP4
38671: PUSH
38672: NOP4
38676: PPUSH
38677: NOP4
38681: PPUSH
38682: LD_INT 1
38684: PPUSH
38685: LD_INT 1
38687: PPUSH
38688: NOP4
38692: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38693: NOP4
38697: PUSH
38698: NOP4
38702: PPUSH
38703: NOP4
38707: PPUSH
38708: NOP4
38712: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38713: NOP4
38717: PUSH
38718: NOP4
38722: ARRAY
38723: PUSH
38724: NOP4
38728: LESS
38729: IFFALSE 38918
// begin for i := 1 to vehicles do
38731: NOP4
38735: PUSH
38736: DOUBLE
38737: LD_INT 1
38739: DEC
38740: ST_TO_ADDR
38741: NOP4
38745: PUSH
38746: FOR_TO
38747: IFFALSE 38916
// begin if hackTanksCaptured [ index ] = hackLimit then
38749: NOP4
38753: PUSH
38754: NOP4
38758: ARRAY
38759: PUSH
38760: NOP4
38764: EQUAL
38765: IFFALSE 38769
// break ;
38767: GO 38916
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38769: NOP4
38773: PUSH
38774: NOP4
38778: PPUSH
38779: NOP4
38783: PPUSH
38784: NOP4
38788: PUSH
38789: NOP4
38793: ARRAY
38794: PUSH
38795: LD_INT 1
38797: PLUS
38798: PPUSH
38799: NOP4
38803: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38804: NOP4
38808: PUSH
38809: NOP4
38813: PPUSH
38814: NOP4
38818: PUSH
38819: NOP4
38823: PUSH
38824: NOP4
38828: ARRAY
38829: PUSH
38830: LD_INT 1
38832: PLUS
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PPUSH
38838: NOP4
38842: PUSH
38843: NOP4
38847: ARRAY
38848: PUSH
38849: NOP4
38853: PUSH
38854: NOP4
38858: ARRAY
38859: PPUSH
38860: NOP4
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PPUSH
38869: NOP4
38873: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38874: NOP4
38878: PUSH
38879: NOP4
38883: ARRAY
38884: PPUSH
38885: NOP4
38889: PPUSH
38890: NOP4
38894: PPUSH
38895: NOP4
// ComStop ( vehicles [ i ] ) ;
38899: NOP4
38903: PUSH
38904: NOP4
38908: ARRAY
38909: PPUSH
38910: NOP4
// end ;
38914: GO 38746
38916: POP
38917: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38918: NOP4
38922: PPUSH
38923: NOP4
38927: PUSH
38928: NOP4
38932: ARRAY
38933: PUSH
38934: LD_INT 0
38936: PLUS
38937: PPUSH
38938: NOP4
// end ;
38942: LD_VAR 0 3
38946: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38947: LD_INT 0
38949: PPUSH
38950: PPUSH
38951: PPUSH
38952: PPUSH
// if not hack in hackTanks then
38953: NOP4
38957: PUSH
38958: NOP4
38962: IN
38963: NOT
38964: IFFALSE 38968
// exit ;
38966: GO 39208
// index := GetElementIndex ( hackTanks , hack ) ;
38968: NOP4
38972: PUSH
38973: NOP4
38977: PPUSH
38978: NOP4
38982: PPUSH
38983: NOP4
38987: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38988: NOP4
38992: PUSH
38993: DOUBLE
38994: NOP4
38998: PUSH
38999: NOP4
39003: ARRAY
39004: INC
39005: ST_TO_ADDR
39006: LD_INT 1
39008: PUSH
39009: FOR_DOWNTO
39010: IFFALSE 39182
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39012: NOP4
39016: PUSH
39017: NOP4
39021: PUSH
39022: NOP4
39026: ARRAY
39027: PUSH
39028: NOP4
39032: ARRAY
39033: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39034: NOP4
39038: PUSH
39039: LD_INT 1
39041: ARRAY
39042: PPUSH
39043: NOP4
39047: NOT
39048: PUSH
39049: NOP4
39053: PUSH
39054: LD_INT 1
39056: ARRAY
39057: PPUSH
39058: NOP4
39062: PUSH
39063: NOP4
39067: PPUSH
39068: NOP4
39072: NONEQUAL
39073: OR
39074: IFFALSE 39180
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39076: NOP4
39080: PUSH
39081: LD_INT 1
39083: ARRAY
39084: PPUSH
39085: NOP4
39089: PUSH
39090: NOP4
39094: PUSH
39095: LD_INT 1
39097: ARRAY
39098: PPUSH
39099: NOP4
39103: PUSH
39104: NOP4
39108: PPUSH
39109: NOP4
39113: EQUAL
39114: AND
39115: IFFALSE 39139
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39117: NOP4
39121: PUSH
39122: LD_INT 1
39124: ARRAY
39125: PPUSH
39126: NOP4
39130: PUSH
39131: LD_INT 2
39133: ARRAY
39134: PPUSH
39135: NOP4
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39139: NOP4
39143: PUSH
39144: NOP4
39148: PPUSH
39149: NOP4
39153: PPUSH
39154: NOP4
39158: PUSH
39159: NOP4
39163: ARRAY
39164: PPUSH
39165: NOP4
39169: PPUSH
39170: NOP4
39174: PPUSH
39175: NOP4
39179: ST_TO_ADDR
// end ; end ;
39180: GO 39009
39182: POP
39183: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39184: NOP4
39188: PPUSH
39189: NOP4
39193: PUSH
39194: NOP4
39198: ARRAY
39199: PUSH
39200: LD_INT 0
39202: PLUS
39203: PPUSH
39204: NOP4
// end ;
39208: LD_VAR 0 2
39212: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39213: LD_INT 0
39215: PPUSH
39216: PPUSH
39217: PPUSH
39218: PPUSH
// if not hack in hackTanks then
39219: NOP4
39223: PUSH
39224: NOP4
39228: IN
39229: NOT
39230: IFFALSE 39234
// exit ;
39232: GO 39319
// index := GetElementIndex ( hackTanks , hack ) ;
39234: NOP4
39238: PUSH
39239: NOP4
39243: PPUSH
39244: NOP4
39248: PPUSH
39249: NOP4
39253: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39254: NOP4
39258: PUSH
39259: DOUBLE
39260: LD_INT 1
39262: DEC
39263: ST_TO_ADDR
39264: NOP4
39268: PUSH
39269: NOP4
39273: ARRAY
39274: PUSH
39275: FOR_TO
39276: IFFALSE 39317
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39278: NOP4
39282: PUSH
39283: NOP4
39287: ARRAY
39288: PUSH
39289: NOP4
39293: ARRAY
39294: PUSH
39295: LD_INT 1
39297: ARRAY
39298: PUSH
39299: NOP4
39303: EQUAL
39304: IFFALSE 39315
// KillUnit ( vehicle ) ;
39306: NOP4
39310: PPUSH
39311: NOP4
39315: GO 39275
39317: POP
39318: POP
// end ;
39319: LD_VAR 0 3
39323: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39324: NOP4
39328: NOT
39329: IFFALSE 39364
39331: GO 39333
39333: DISABLE
// begin initMiner := true ;
39334: NOP4
39338: PUSH
39339: LD_INT 1
39341: ST_TO_ADDR
// minersList := [ ] ;
39342: NOP4
39346: PUSH
39347: EMPTY
39348: ST_TO_ADDR
// minerMinesList := [ ] ;
39349: NOP4
39353: PUSH
39354: EMPTY
39355: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39356: NOP4
39360: PUSH
39361: LD_INT 5
39363: ST_TO_ADDR
// end ;
39364: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39365: NOP4
39369: PUSH
39370: LD_INT 34
39372: PUSH
39373: NOP4
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PPUSH
39382: NOP4
39386: AND
39387: IFFALSE 39850
39389: GO 39391
39391: DISABLE
39392: LD_INT 0
39394: PPUSH
39395: PPUSH
39396: PPUSH
39397: PPUSH
// begin enable ;
39398: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39399: NOP4
39403: PUSH
39404: LD_INT 34
39406: PUSH
39407: NOP4
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PPUSH
39416: NOP4
39420: PUSH
39421: FOR_IN
39422: IFFALSE 39494
// begin if not i in minersList then
39424: NOP4
39428: PUSH
39429: NOP4
39433: IN
39434: NOT
39435: IFFALSE 39492
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39437: NOP4
39441: PUSH
39442: NOP4
39446: PPUSH
39447: NOP4
39451: PUSH
39452: LD_INT 1
39454: PLUS
39455: PPUSH
39456: NOP4
39460: PPUSH
39461: NOP4
39465: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39466: NOP4
39470: PUSH
39471: NOP4
39475: PPUSH
39476: NOP4
39480: PUSH
39481: LD_INT 1
39483: PLUS
39484: PPUSH
39485: EMPTY
39486: PPUSH
39487: NOP4
39491: ST_TO_ADDR
// end end ;
39492: GO 39421
39494: POP
39495: POP
// for i := minerMinesList downto 1 do
39496: NOP4
39500: PUSH
39501: DOUBLE
39502: NOP4
39506: INC
39507: ST_TO_ADDR
39508: LD_INT 1
39510: PUSH
39511: FOR_DOWNTO
39512: IFFALSE 39848
// begin if IsLive ( minersList [ i ] ) then
39514: NOP4
39518: PUSH
39519: NOP4
39523: ARRAY
39524: PPUSH
39525: NOP4
39529: IFFALSE 39557
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39531: NOP4
39535: PUSH
39536: NOP4
39540: ARRAY
39541: PPUSH
39542: NOP4
39546: PUSH
39547: NOP4
39551: ARRAY
39552: PPUSH
39553: NOP4
// if not minerMinesList [ i ] then
39557: NOP4
39561: PUSH
39562: NOP4
39566: ARRAY
39567: NOT
39568: IFFALSE 39572
// continue ;
39570: GO 39511
// for j := minerMinesList [ i ] downto 1 do
39572: NOP4
39576: PUSH
39577: DOUBLE
39578: NOP4
39582: PUSH
39583: NOP4
39587: ARRAY
39588: INC
39589: ST_TO_ADDR
39590: LD_INT 1
39592: PUSH
39593: FOR_DOWNTO
39594: IFFALSE 39844
// begin side := GetSide ( minersList [ i ] ) ;
39596: NOP4
39600: PUSH
39601: NOP4
39605: PUSH
39606: NOP4
39610: ARRAY
39611: PPUSH
39612: NOP4
39616: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39617: NOP4
39621: PUSH
39622: NOP4
39626: PUSH
39627: NOP4
39631: ARRAY
39632: PUSH
39633: NOP4
39637: ARRAY
39638: PUSH
39639: LD_INT 1
39641: ARRAY
39642: PPUSH
39643: NOP4
39647: PUSH
39648: NOP4
39652: ARRAY
39653: PUSH
39654: NOP4
39658: ARRAY
39659: PUSH
39660: LD_INT 2
39662: ARRAY
39663: PPUSH
39664: NOP4
39668: ST_TO_ADDR
// if not tmp then
39669: NOP4
39673: NOT
39674: IFFALSE 39678
// continue ;
39676: GO 39593
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39678: NOP4
39682: PUSH
39683: LD_INT 81
39685: PUSH
39686: NOP4
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PPUSH
39695: NOP4
39699: IN
39700: PUSH
39701: NOP4
39705: PUSH
39706: NOP4
39710: ARRAY
39711: PUSH
39712: NOP4
39716: ARRAY
39717: PUSH
39718: LD_INT 1
39720: ARRAY
39721: PPUSH
39722: NOP4
39726: PUSH
39727: NOP4
39731: ARRAY
39732: PUSH
39733: NOP4
39737: ARRAY
39738: PUSH
39739: LD_INT 2
39741: ARRAY
39742: PPUSH
39743: NOP4
39747: AND
39748: IFFALSE 39842
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39750: NOP4
39754: PUSH
39755: NOP4
39759: ARRAY
39760: PUSH
39761: NOP4
39765: ARRAY
39766: PUSH
39767: LD_INT 1
39769: ARRAY
39770: PPUSH
39771: NOP4
39775: PUSH
39776: NOP4
39780: ARRAY
39781: PUSH
39782: NOP4
39786: ARRAY
39787: PUSH
39788: LD_INT 2
39790: ARRAY
39791: PPUSH
39792: NOP4
39796: PPUSH
39797: NOP4
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39801: NOP4
39805: PUSH
39806: NOP4
39810: PPUSH
39811: NOP4
39815: PPUSH
39816: NOP4
39820: PUSH
39821: NOP4
39825: ARRAY
39826: PPUSH
39827: NOP4
39831: PPUSH
39832: NOP4
39836: PPUSH
39837: NOP4
39841: ST_TO_ADDR
// end ; end ;
39842: GO 39593
39844: POP
39845: POP
// end ;
39846: GO 39511
39848: POP
39849: POP
// end ;
39850: PPOPN 4
39852: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39853: LD_INT 0
39855: PPUSH
39856: PPUSH
// result := false ;
39857: NOP4
39861: PUSH
39862: LD_INT 0
39864: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39865: NOP4
39869: PPUSH
39870: NOP4
39874: PUSH
39875: NOP4
39879: EQUAL
39880: NOT
39881: IFFALSE 39885
// exit ;
39883: GO 40125
// index := GetElementIndex ( minersList , unit ) ;
39885: NOP4
39889: PUSH
39890: NOP4
39894: PPUSH
39895: NOP4
39899: PPUSH
39900: NOP4
39904: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39905: NOP4
39909: PUSH
39910: NOP4
39914: ARRAY
39915: PUSH
39916: NOP4
39920: GREATEREQUAL
39921: IFFALSE 39925
// exit ;
39923: GO 40125
// ComMoveXY ( unit , x , y ) ;
39925: NOP4
39929: PPUSH
39930: NOP4
39934: PPUSH
39935: NOP4
39939: PPUSH
39940: NOP4
// repeat wait ( 0 0$1 ) ;
39944: LD_INT 35
39946: PPUSH
39947: NOP4
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39951: NOP4
39955: PPUSH
39956: NOP4
39960: PPUSH
39961: NOP4
39965: PPUSH
39966: NOP4
39970: NOT
39971: PUSH
39972: NOP4
39976: PPUSH
39977: NOP4
39981: AND
39982: IFFALSE 39986
// exit ;
39984: GO 40125
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39986: NOP4
39990: PPUSH
39991: NOP4
39995: PPUSH
39996: NOP4
40000: PUSH
40001: NOP4
40005: EQUAL
40006: PUSH
40007: NOP4
40011: PPUSH
40012: NOP4
40016: NOT
40017: AND
40018: IFFALSE 39944
// PlaySoundXY ( x , y , PlantMine ) ;
40020: NOP4
40024: PPUSH
40025: NOP4
40029: PPUSH
40030: LD_STRING PlantMine
40032: PPUSH
40033: NOP4
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
40037: NOP4
40041: PPUSH
40042: NOP4
40046: PPUSH
40047: NOP4
40051: PPUSH
40052: NOP4
40056: PPUSH
40057: LD_INT 0
40059: PPUSH
40060: NOP4
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40064: NOP4
40068: PUSH
40069: NOP4
40073: PPUSH
40074: NOP4
40078: PUSH
40079: NOP4
40083: PUSH
40084: NOP4
40088: ARRAY
40089: PUSH
40090: LD_INT 1
40092: PLUS
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PPUSH
40098: NOP4
40102: PUSH
40103: NOP4
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PPUSH
40112: NOP4
40116: ST_TO_ADDR
// result := true ;
40117: NOP4
40121: PUSH
40122: LD_INT 1
40124: ST_TO_ADDR
// end ;
40125: LD_VAR 0 4
40129: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40130: LD_INT 0
40132: PPUSH
40133: PPUSH
40134: PPUSH
// if not unit in minersList then
40135: NOP4
40139: PUSH
40140: NOP4
40144: IN
40145: NOT
40146: IFFALSE 40150
// exit ;
40148: GO 40542
// index := GetElementIndex ( minersList , unit ) ;
40150: NOP4
40154: PUSH
40155: NOP4
40159: PPUSH
40160: NOP4
40164: PPUSH
40165: NOP4
40169: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40170: NOP4
40174: PUSH
40175: DOUBLE
40176: NOP4
40180: PUSH
40181: NOP4
40185: ARRAY
40186: INC
40187: ST_TO_ADDR
40188: LD_INT 1
40190: PUSH
40191: FOR_DOWNTO
40192: IFFALSE 40353
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40194: NOP4
40198: PUSH
40199: NOP4
40203: ARRAY
40204: PUSH
40205: NOP4
40209: ARRAY
40210: PUSH
40211: LD_INT 1
40213: ARRAY
40214: PUSH
40215: NOP4
40219: EQUAL
40220: PUSH
40221: NOP4
40225: PUSH
40226: NOP4
40230: ARRAY
40231: PUSH
40232: NOP4
40236: ARRAY
40237: PUSH
40238: LD_INT 2
40240: ARRAY
40241: PUSH
40242: NOP4
40246: EQUAL
40247: AND
40248: IFFALSE 40351
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40250: NOP4
40254: PUSH
40255: NOP4
40259: ARRAY
40260: PUSH
40261: NOP4
40265: ARRAY
40266: PUSH
40267: LD_INT 1
40269: ARRAY
40270: PPUSH
40271: NOP4
40275: PUSH
40276: NOP4
40280: ARRAY
40281: PUSH
40282: NOP4
40286: ARRAY
40287: PUSH
40288: LD_INT 2
40290: ARRAY
40291: PPUSH
40292: NOP4
40296: PPUSH
40297: NOP4
40301: PPUSH
40302: NOP4
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40306: NOP4
40310: PUSH
40311: NOP4
40315: PPUSH
40316: NOP4
40320: PPUSH
40321: NOP4
40325: PUSH
40326: NOP4
40330: ARRAY
40331: PPUSH
40332: NOP4
40336: PPUSH
40337: NOP4
40341: PPUSH
40342: NOP4
40346: ST_TO_ADDR
// exit ;
40347: POP
40348: POP
40349: GO 40542
// end ; end ;
40351: GO 40191
40353: POP
40354: POP
// for i := minerMinesList [ index ] downto 1 do
40355: NOP4
40359: PUSH
40360: DOUBLE
40361: NOP4
40365: PUSH
40366: NOP4
40370: ARRAY
40371: INC
40372: ST_TO_ADDR
40373: LD_INT 1
40375: PUSH
40376: FOR_DOWNTO
40377: IFFALSE 40540
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40379: NOP4
40383: PUSH
40384: NOP4
40388: ARRAY
40389: PUSH
40390: NOP4
40394: ARRAY
40395: PUSH
40396: LD_INT 1
40398: ARRAY
40399: PPUSH
40400: NOP4
40404: PUSH
40405: NOP4
40409: ARRAY
40410: PUSH
40411: NOP4
40415: ARRAY
40416: PUSH
40417: LD_INT 2
40419: ARRAY
40420: PPUSH
40421: NOP4
40425: PPUSH
40426: NOP4
40430: PPUSH
40431: NOP4
40435: PUSH
40436: LD_INT 6
40438: LESS
40439: IFFALSE 40538
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40441: NOP4
40445: PUSH
40446: NOP4
40450: ARRAY
40451: PUSH
40452: NOP4
40456: ARRAY
40457: PUSH
40458: LD_INT 1
40460: ARRAY
40461: PPUSH
40462: NOP4
40466: PUSH
40467: NOP4
40471: ARRAY
40472: PUSH
40473: NOP4
40477: ARRAY
40478: PUSH
40479: LD_INT 2
40481: ARRAY
40482: PPUSH
40483: NOP4
40487: PPUSH
40488: NOP4
40492: PPUSH
40493: NOP4
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40497: NOP4
40501: PUSH
40502: NOP4
40506: PPUSH
40507: NOP4
40511: PPUSH
40512: NOP4
40516: PUSH
40517: NOP4
40521: ARRAY
40522: PPUSH
40523: NOP4
40527: PPUSH
40528: NOP4
40532: PPUSH
40533: NOP4
40537: ST_TO_ADDR
// end ; end ;
40538: GO 40376
40540: POP
40541: POP
// end ;
40542: LD_VAR 0 4
40546: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40547: LD_INT 0
40549: PPUSH
40550: PPUSH
40551: PPUSH
40552: PPUSH
40553: PPUSH
40554: PPUSH
40555: PPUSH
40556: PPUSH
40557: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40558: NOP4
40562: PPUSH
40563: NOP4
40567: PUSH
40568: NOP4
40572: EQUAL
40573: NOT
40574: PUSH
40575: NOP4
40579: PUSH
40580: NOP4
40584: IN
40585: NOT
40586: OR
40587: IFFALSE 40591
// exit ;
40589: GO 40913
// index := GetElementIndex ( minersList , unit ) ;
40591: NOP4
40595: PUSH
40596: NOP4
40600: PPUSH
40601: NOP4
40605: PPUSH
40606: NOP4
40610: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40611: NOP4
40615: PUSH
40616: NOP4
40620: PUSH
40621: NOP4
40625: PUSH
40626: NOP4
40630: ARRAY
40631: MINUS
40632: ST_TO_ADDR
// if not minesFreeAmount then
40633: NOP4
40637: NOT
40638: IFFALSE 40642
// exit ;
40640: GO 40913
// tmp := [ ] ;
40642: NOP4
40646: PUSH
40647: EMPTY
40648: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40649: NOP4
40653: PUSH
40654: DOUBLE
40655: LD_INT 1
40657: DEC
40658: ST_TO_ADDR
40659: NOP4
40663: PUSH
40664: FOR_TO
40665: IFFALSE 40860
// begin _d := rand ( 0 , 5 ) ;
40667: NOP4
40671: PUSH
40672: LD_INT 0
40674: PPUSH
40675: LD_INT 5
40677: PPUSH
40678: NOP4
40682: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40683: NOP4
40687: PUSH
40688: LD_INT 2
40690: PPUSH
40691: LD_INT 6
40693: PPUSH
40694: NOP4
40698: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40699: NOP4
40703: PUSH
40704: NOP4
40708: PPUSH
40709: NOP4
40713: PPUSH
40714: NOP4
40718: PPUSH
40719: NOP4
40723: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40724: NOP4
40728: PUSH
40729: NOP4
40733: PPUSH
40734: NOP4
40738: PPUSH
40739: NOP4
40743: PPUSH
40744: NOP4
40748: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40749: NOP4
40753: PPUSH
40754: NOP4
40758: PPUSH
40759: NOP4
40763: PUSH
40764: NOP4
40768: PUSH
40769: NOP4
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: NOP4
40782: IN
40783: NOT
40784: AND
40785: PUSH
40786: NOP4
40790: PPUSH
40791: NOP4
40795: PPUSH
40796: NOP4
40800: NOT
40801: AND
40802: IFFALSE 40844
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40804: NOP4
40808: PUSH
40809: NOP4
40813: PPUSH
40814: NOP4
40818: PUSH
40819: LD_INT 1
40821: PLUS
40822: PPUSH
40823: NOP4
40827: PUSH
40828: NOP4
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PPUSH
40837: NOP4
40841: ST_TO_ADDR
40842: GO 40858
// i := i - 1 ;
40844: NOP4
40848: PUSH
40849: NOP4
40853: PUSH
40854: LD_INT 1
40856: MINUS
40857: ST_TO_ADDR
// end ;
40858: GO 40664
40860: POP
40861: POP
// for i in tmp do
40862: NOP4
40866: PUSH
40867: NOP4
40871: PUSH
40872: FOR_IN
40873: IFFALSE 40911
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40875: NOP4
40879: PPUSH
40880: NOP4
40884: PUSH
40885: LD_INT 1
40887: ARRAY
40888: PPUSH
40889: NOP4
40893: PUSH
40894: LD_INT 2
40896: ARRAY
40897: PPUSH
40898: NOP4
40902: NOT
40903: IFFALSE 40909
// exit ;
40905: POP
40906: POP
40907: GO 40913
40909: GO 40872
40911: POP
40912: POP
// end ;
40913: LD_VAR 0 4
40917: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
40918: LD_INT 0
40920: PPUSH
40921: PPUSH
40922: PPUSH
40923: PPUSH
40924: PPUSH
40925: PPUSH
40926: PPUSH
// if not GetClass ( unit ) = class_sniper then
40927: NOP4
40931: PPUSH
40932: NOP4
40936: PUSH
40937: LD_INT 5
40939: EQUAL
40940: NOT
40941: IFFALSE 40945
// exit ;
40943: GO 41333
// dist := 8 ;
40945: NOP4
40949: PUSH
40950: LD_INT 8
40952: ST_TO_ADDR
// viewRange := 12 ;
40953: NOP4
40957: PUSH
40958: LD_INT 12
40960: ST_TO_ADDR
// side := GetSide ( unit ) ;
40961: NOP4
40965: PUSH
40966: NOP4
40970: PPUSH
40971: NOP4
40975: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40976: LD_INT 61
40978: PPUSH
40979: NOP4
40983: PPUSH
40984: NOP4
40988: PUSH
40989: LD_INT 2
40991: EQUAL
40992: IFFALSE 41002
// viewRange := 16 ;
40994: NOP4
40998: PUSH
40999: LD_INT 16
41001: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41002: NOP4
41006: PPUSH
41007: NOP4
41011: PPUSH
41012: NOP4
41016: PPUSH
41017: NOP4
41021: PUSH
41022: NOP4
41026: GREATER
41027: IFFALSE 41106
// begin ComMoveXY ( unit , x , y ) ;
41029: NOP4
41033: PPUSH
41034: NOP4
41038: PPUSH
41039: NOP4
41043: PPUSH
41044: NOP4
// repeat wait ( 0 0$1 ) ;
41048: LD_INT 35
41050: PPUSH
41051: NOP4
// if not UnitGoingToXY ( unit , x , y ) then
41055: NOP4
41059: PPUSH
41060: NOP4
41064: PPUSH
41065: NOP4
41069: PPUSH
41070: NOP4
41074: NOT
41075: IFFALSE 41079
// exit ;
41077: GO 41333
// until GetDistUnitXY ( unit , x , y ) < dist ;
41079: NOP4
41083: PPUSH
41084: NOP4
41088: PPUSH
41089: NOP4
41093: PPUSH
41094: NOP4
41098: PUSH
41099: NOP4
41103: LESS
41104: IFFALSE 41048
// end ; ComTurnXY ( unit , x , y ) ;
41106: NOP4
41110: PPUSH
41111: NOP4
41115: PPUSH
41116: NOP4
41120: PPUSH
41121: NOP4
// wait ( 5 ) ;
41125: LD_INT 5
41127: PPUSH
41128: NOP4
// _d := GetDir ( unit ) ;
41132: NOP4
41136: PUSH
41137: NOP4
41141: PPUSH
41142: NOP4
41146: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
41147: NOP4
41151: PUSH
41152: NOP4
41156: PPUSH
41157: NOP4
41161: PPUSH
41162: NOP4
41166: PPUSH
41167: NOP4
41171: PPUSH
41172: NOP4
41176: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
41177: NOP4
41181: PUSH
41182: NOP4
41186: PPUSH
41187: NOP4
41191: PPUSH
41192: NOP4
41196: PPUSH
41197: NOP4
41201: PPUSH
41202: NOP4
41206: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41207: NOP4
41211: PPUSH
41212: NOP4
41216: PPUSH
41217: NOP4
41221: NOT
41222: IFFALSE 41226
// exit ;
41224: GO 41333
// ComAnimCustom ( unit , 1 ) ;
41226: NOP4
41230: PPUSH
41231: LD_INT 1
41233: PPUSH
41234: NOP4
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41238: NOP4
41242: PPUSH
41243: NOP4
41247: PPUSH
41248: NOP4
41252: PPUSH
41253: NOP4
41257: PPUSH
41258: NOP4
// repeat wait ( 1 ) ;
41262: LD_INT 1
41264: PPUSH
41265: NOP4
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
41269: NOP4
41273: PPUSH
41274: NOP4
41278: PUSH
41279: NOP4
41283: PPUSH
41284: NOP4
41288: OR
41289: PUSH
41290: NOP4
41294: PPUSH
41295: NOP4
41299: NOT
41300: OR
41301: PUSH
41302: NOP4
41306: PPUSH
41307: NOP4
41311: OR
41312: IFFALSE 41262
// RemoveSeeing ( _x , _y , side ) ;
41314: NOP4
41318: PPUSH
41319: NOP4
41323: PPUSH
41324: NOP4
41328: PPUSH
41329: NOP4
// end ; end_of_file
41333: LD_VAR 0 4
41337: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41338: LD_INT 0
41340: PPUSH
41341: PPUSH
// if exist_mode then
41342: NOP4
41346: IFFALSE 41371
// unit := CreateCharacter ( prefix & ident ) else
41348: NOP4
41352: PUSH
41353: NOP4
41357: PUSH
41358: NOP4
41362: STR
41363: PPUSH
41364: NOP4
41368: ST_TO_ADDR
41369: GO 41386
// unit := NewCharacter ( ident ) ;
41371: NOP4
41375: PUSH
41376: NOP4
41380: PPUSH
41381: NOP4
41385: ST_TO_ADDR
// result := unit ;
41386: NOP4
41390: PUSH
41391: NOP4
41395: ST_TO_ADDR
// end ;
41396: LD_VAR 0 4
41400: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41401: LD_INT 0
41403: PPUSH
41404: PPUSH
// if not side or not nation then
41405: NOP4
41409: NOT
41410: PUSH
41411: NOP4
41415: NOT
41416: OR
41417: IFFALSE 41421
// exit ;
41419: GO 42185
// case nation of nation_american :
41421: NOP4
41425: PUSH
41426: LD_INT 1
41428: DOUBLE
41429: EQUAL
41430: IFTRUE 41434
41432: GO 41648
41434: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41435: NOP4
41439: PUSH
41440: LD_INT 35
41442: PUSH
41443: LD_INT 45
41445: PUSH
41446: LD_INT 46
41448: PUSH
41449: LD_INT 47
41451: PUSH
41452: LD_INT 82
41454: PUSH
41455: LD_INT 83
41457: PUSH
41458: LD_INT 84
41460: PUSH
41461: LD_INT 85
41463: PUSH
41464: LD_INT 86
41466: PUSH
41467: LD_INT 1
41469: PUSH
41470: LD_INT 2
41472: PUSH
41473: LD_INT 6
41475: PUSH
41476: LD_INT 15
41478: PUSH
41479: LD_INT 16
41481: PUSH
41482: LD_INT 7
41484: PUSH
41485: LD_INT 12
41487: PUSH
41488: LD_INT 13
41490: PUSH
41491: LD_INT 10
41493: PUSH
41494: LD_INT 14
41496: PUSH
41497: LD_INT 20
41499: PUSH
41500: LD_INT 21
41502: PUSH
41503: LD_INT 22
41505: PUSH
41506: LD_INT 25
41508: PUSH
41509: LD_INT 32
41511: PUSH
41512: LD_INT 27
41514: PUSH
41515: LD_INT 36
41517: PUSH
41518: LD_INT 69
41520: PUSH
41521: LD_INT 39
41523: PUSH
41524: LD_INT 34
41526: PUSH
41527: LD_INT 40
41529: PUSH
41530: LD_INT 48
41532: PUSH
41533: LD_INT 49
41535: PUSH
41536: LD_INT 50
41538: PUSH
41539: LD_INT 51
41541: PUSH
41542: LD_INT 52
41544: PUSH
41545: LD_INT 53
41547: PUSH
41548: LD_INT 54
41550: PUSH
41551: LD_INT 55
41553: PUSH
41554: LD_INT 56
41556: PUSH
41557: LD_INT 57
41559: PUSH
41560: LD_INT 58
41562: PUSH
41563: LD_INT 59
41565: PUSH
41566: LD_INT 60
41568: PUSH
41569: LD_INT 61
41571: PUSH
41572: LD_INT 62
41574: PUSH
41575: LD_INT 80
41577: PUSH
41578: LD_INT 82
41580: PUSH
41581: LD_INT 83
41583: PUSH
41584: LD_INT 84
41586: PUSH
41587: LD_INT 85
41589: PUSH
41590: LD_INT 86
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: ST_TO_ADDR
41646: GO 42109
41648: LD_INT 2
41650: DOUBLE
41651: EQUAL
41652: IFTRUE 41656
41654: GO 41878
41656: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
41657: NOP4
41661: PUSH
41662: LD_INT 35
41664: PUSH
41665: LD_INT 45
41667: PUSH
41668: LD_INT 46
41670: PUSH
41671: LD_INT 47
41673: PUSH
41674: LD_INT 82
41676: PUSH
41677: LD_INT 83
41679: PUSH
41680: LD_INT 84
41682: PUSH
41683: LD_INT 85
41685: PUSH
41686: LD_INT 87
41688: PUSH
41689: LD_INT 70
41691: PUSH
41692: LD_INT 1
41694: PUSH
41695: LD_INT 11
41697: PUSH
41698: LD_INT 3
41700: PUSH
41701: LD_INT 4
41703: PUSH
41704: LD_INT 5
41706: PUSH
41707: LD_INT 6
41709: PUSH
41710: LD_INT 15
41712: PUSH
41713: LD_INT 18
41715: PUSH
41716: LD_INT 7
41718: PUSH
41719: LD_INT 17
41721: PUSH
41722: LD_INT 8
41724: PUSH
41725: LD_INT 20
41727: PUSH
41728: LD_INT 21
41730: PUSH
41731: LD_INT 22
41733: PUSH
41734: LD_INT 72
41736: PUSH
41737: LD_INT 26
41739: PUSH
41740: LD_INT 69
41742: PUSH
41743: LD_INT 39
41745: PUSH
41746: LD_INT 40
41748: PUSH
41749: LD_INT 41
41751: PUSH
41752: LD_INT 42
41754: PUSH
41755: LD_INT 43
41757: PUSH
41758: LD_INT 48
41760: PUSH
41761: LD_INT 49
41763: PUSH
41764: LD_INT 50
41766: PUSH
41767: LD_INT 51
41769: PUSH
41770: LD_INT 52
41772: PUSH
41773: LD_INT 53
41775: PUSH
41776: LD_INT 54
41778: PUSH
41779: LD_INT 55
41781: PUSH
41782: LD_INT 56
41784: PUSH
41785: LD_INT 60
41787: PUSH
41788: LD_INT 61
41790: PUSH
41791: LD_INT 62
41793: PUSH
41794: LD_INT 66
41796: PUSH
41797: LD_INT 67
41799: PUSH
41800: LD_INT 68
41802: PUSH
41803: LD_INT 81
41805: PUSH
41806: LD_INT 82
41808: PUSH
41809: LD_INT 83
41811: PUSH
41812: LD_INT 84
41814: PUSH
41815: LD_INT 85
41817: PUSH
41818: LD_INT 87
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: ST_TO_ADDR
41876: GO 42109
41878: LD_INT 3
41880: DOUBLE
41881: EQUAL
41882: IFTRUE 41886
41884: GO 42108
41886: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41887: NOP4
41891: PUSH
41892: LD_INT 46
41894: PUSH
41895: LD_INT 47
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: LD_INT 2
41903: PUSH
41904: LD_INT 82
41906: PUSH
41907: LD_INT 83
41909: PUSH
41910: LD_INT 84
41912: PUSH
41913: LD_INT 85
41915: PUSH
41916: LD_INT 86
41918: PUSH
41919: LD_INT 11
41921: PUSH
41922: LD_INT 9
41924: PUSH
41925: LD_INT 20
41927: PUSH
41928: LD_INT 19
41930: PUSH
41931: LD_INT 21
41933: PUSH
41934: LD_INT 24
41936: PUSH
41937: LD_INT 22
41939: PUSH
41940: LD_INT 25
41942: PUSH
41943: LD_INT 28
41945: PUSH
41946: LD_INT 29
41948: PUSH
41949: LD_INT 30
41951: PUSH
41952: LD_INT 31
41954: PUSH
41955: LD_INT 37
41957: PUSH
41958: LD_INT 38
41960: PUSH
41961: LD_INT 32
41963: PUSH
41964: LD_INT 27
41966: PUSH
41967: LD_INT 33
41969: PUSH
41970: LD_INT 69
41972: PUSH
41973: LD_INT 39
41975: PUSH
41976: LD_INT 34
41978: PUSH
41979: LD_INT 40
41981: PUSH
41982: LD_INT 71
41984: PUSH
41985: LD_INT 23
41987: PUSH
41988: LD_INT 44
41990: PUSH
41991: LD_INT 48
41993: PUSH
41994: LD_INT 49
41996: PUSH
41997: LD_INT 50
41999: PUSH
42000: LD_INT 51
42002: PUSH
42003: LD_INT 52
42005: PUSH
42006: LD_INT 53
42008: PUSH
42009: LD_INT 54
42011: PUSH
42012: LD_INT 55
42014: PUSH
42015: LD_INT 56
42017: PUSH
42018: LD_INT 57
42020: PUSH
42021: LD_INT 58
42023: PUSH
42024: LD_INT 59
42026: PUSH
42027: LD_INT 63
42029: PUSH
42030: LD_INT 64
42032: PUSH
42033: LD_INT 65
42035: PUSH
42036: LD_INT 82
42038: PUSH
42039: LD_INT 83
42041: PUSH
42042: LD_INT 84
42044: PUSH
42045: LD_INT 85
42047: PUSH
42048: LD_INT 86
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: ST_TO_ADDR
42106: GO 42109
42108: POP
// if state > - 1 and state < 3 then
42109: NOP4
42113: PUSH
42114: LD_INT 1
42116: NEG
42117: GREATER
42118: PUSH
42119: NOP4
42123: PUSH
42124: LD_INT 3
42126: LESS
42127: AND
42128: IFFALSE 42185
// for i in result do
42130: NOP4
42134: PUSH
42135: NOP4
42139: PUSH
42140: FOR_IN
42141: IFFALSE 42183
// if GetTech ( i , side ) <> state then
42143: NOP4
42147: PPUSH
42148: NOP4
42152: PPUSH
42153: NOP4
42157: PUSH
42158: NOP4
42162: NONEQUAL
42163: IFFALSE 42181
// result := result diff i ;
42165: NOP4
42169: PUSH
42170: NOP4
42174: PUSH
42175: NOP4
42179: DIFF
42180: ST_TO_ADDR
42181: GO 42140
42183: POP
42184: POP
// end ;
42185: LD_VAR 0 4
42189: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42190: LD_INT 0
42192: PPUSH
42193: PPUSH
42194: PPUSH
// result := true ;
42195: NOP4
42199: PUSH
42200: LD_INT 1
42202: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42203: NOP4
42207: PUSH
42208: NOP4
42212: PPUSH
42213: NOP4
42217: ST_TO_ADDR
// if not tmp then
42218: NOP4
42222: NOT
42223: IFFALSE 42227
// exit ;
42225: GO 42276
// for i in tmp do
42227: NOP4
42231: PUSH
42232: NOP4
42236: PUSH
42237: FOR_IN
42238: IFFALSE 42274
// if GetTech ( i , side ) <> state_researched then
42240: NOP4
42244: PPUSH
42245: NOP4
42249: PPUSH
42250: NOP4
42254: PUSH
42255: LD_INT 2
42257: NONEQUAL
42258: IFFALSE 42272
// begin result := false ;
42260: NOP4
42264: PUSH
42265: LD_INT 0
42267: ST_TO_ADDR
// exit ;
42268: POP
42269: POP
42270: GO 42276
// end ;
42272: GO 42237
42274: POP
42275: POP
// end ;
42276: LD_VAR 0 3
42280: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42281: LD_INT 0
42283: PPUSH
42284: PPUSH
42285: PPUSH
42286: PPUSH
42287: PPUSH
42288: PPUSH
42289: PPUSH
42290: PPUSH
42291: PPUSH
42292: PPUSH
42293: PPUSH
42294: PPUSH
42295: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42296: NOP4
42300: NOT
42301: PUSH
42302: NOP4
42306: PPUSH
42307: NOP4
42311: PUSH
42312: LD_INT 9
42314: NONEQUAL
42315: OR
42316: IFFALSE 42320
// exit ;
42318: GO 42893
// side := GetSide ( unit ) ;
42320: NOP4
42324: PUSH
42325: NOP4
42329: PPUSH
42330: NOP4
42334: ST_TO_ADDR
// tech_space := tech_spacanom ;
42335: NOP4
42339: PUSH
42340: LD_INT 29
42342: ST_TO_ADDR
// tech_time := tech_taurad ;
42343: NOP4
42347: PUSH
42348: LD_INT 28
42350: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42351: NOP4
42355: PUSH
42356: NOP4
42360: PPUSH
42361: NOP4
42365: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42366: NOP4
42370: PPUSH
42371: NOP4
42375: PUSH
42376: LD_INT 2
42378: EQUAL
42379: IFFALSE 42383
// exit ;
42381: GO 42893
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42383: NOP4
42387: PUSH
42388: LD_INT 81
42390: PUSH
42391: NOP4
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 3
42402: PUSH
42403: LD_INT 21
42405: PUSH
42406: LD_INT 3
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PPUSH
42421: NOP4
42425: ST_TO_ADDR
// if not tmp then
42426: NOP4
42430: NOT
42431: IFFALSE 42435
// exit ;
42433: GO 42893
// if in_unit then
42435: NOP4
42439: IFFALSE 42463
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42441: NOP4
42445: PUSH
42446: NOP4
42450: PPUSH
42451: NOP4
42455: PPUSH
42456: NOP4
42460: ST_TO_ADDR
42461: GO 42483
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42463: NOP4
42467: PUSH
42468: NOP4
42472: PPUSH
42473: NOP4
42477: PPUSH
42478: NOP4
42482: ST_TO_ADDR
// if not enemy then
42483: NOP4
42487: NOT
42488: IFFALSE 42492
// exit ;
42490: GO 42893
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42492: NOP4
42496: PUSH
42497: NOP4
42501: PPUSH
42502: NOP4
42506: PPUSH
42507: NOP4
42511: PUSH
42512: LD_INT 13
42514: GREATER
42515: AND
42516: PUSH
42517: NOP4
42521: PPUSH
42522: NOP4
42526: PPUSH
42527: NOP4
42531: PUSH
42532: LD_INT 12
42534: GREATER
42535: OR
42536: IFFALSE 42540
// exit ;
42538: GO 42893
// missile := [ 1 ] ;
42540: NOP4
42544: PUSH
42545: LD_INT 1
42547: PUSH
42548: EMPTY
42549: LIST
42550: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42551: NOP4
42555: PPUSH
42556: NOP4
42560: PPUSH
42561: NOP4
42565: IFFALSE 42594
// missile := Insert ( missile , missile + 1 , 2 ) ;
42567: NOP4
42571: PUSH
42572: NOP4
42576: PPUSH
42577: NOP4
42581: PUSH
42582: LD_INT 1
42584: PLUS
42585: PPUSH
42586: LD_INT 2
42588: PPUSH
42589: NOP4
42593: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42594: NOP4
42598: PPUSH
42599: NOP4
42603: PPUSH
42604: NOP4
42608: PUSH
42609: NOP4
42613: PPUSH
42614: NOP4
42618: PPUSH
42619: NOP4
42623: PPUSH
42624: NOP4
42628: NOT
42629: AND
42630: IFFALSE 42659
// missile := Insert ( missile , missile + 1 , 3 ) ;
42632: NOP4
42636: PUSH
42637: NOP4
42641: PPUSH
42642: NOP4
42646: PUSH
42647: LD_INT 1
42649: PLUS
42650: PPUSH
42651: LD_INT 3
42653: PPUSH
42654: NOP4
42658: ST_TO_ADDR
// if missile < 2 then
42659: NOP4
42663: PUSH
42664: LD_INT 2
42666: LESS
42667: IFFALSE 42671
// exit ;
42669: GO 42893
// x := GetX ( enemy ) ;
42671: NOP4
42675: PUSH
42676: NOP4
42680: PPUSH
42681: NOP4
42685: ST_TO_ADDR
// y := GetY ( enemy ) ;
42686: NOP4
42690: PUSH
42691: NOP4
42695: PPUSH
42696: NOP4
42700: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42701: NOP4
42705: PUSH
42706: NOP4
42710: PUSH
42711: LD_INT 1
42713: NEG
42714: PPUSH
42715: LD_INT 1
42717: PPUSH
42718: NOP4
42722: PLUS
42723: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42724: NOP4
42728: PUSH
42729: NOP4
42733: PUSH
42734: LD_INT 1
42736: NEG
42737: PPUSH
42738: LD_INT 1
42740: PPUSH
42741: NOP4
42745: PLUS
42746: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42747: NOP4
42751: PPUSH
42752: NOP4
42756: PPUSH
42757: NOP4
42761: NOT
42762: IFFALSE 42784
// begin _x := x ;
42764: NOP4
42768: PUSH
42769: NOP4
42773: ST_TO_ADDR
// _y := y ;
42774: NOP4
42778: PUSH
42779: NOP4
42783: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42784: NOP4
42788: PUSH
42789: LD_INT 1
42791: PPUSH
42792: NOP4
42796: PPUSH
42797: NOP4
42801: ST_TO_ADDR
// case i of 1 :
42802: NOP4
42806: PUSH
42807: LD_INT 1
42809: DOUBLE
42810: EQUAL
42811: IFTRUE 42815
42813: GO 42832
42815: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42816: NOP4
42820: PPUSH
42821: NOP4
42825: PPUSH
42826: NOP4
42830: GO 42893
42832: LD_INT 2
42834: DOUBLE
42835: EQUAL
42836: IFTRUE 42840
42838: GO 42862
42840: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42841: NOP4
42845: PPUSH
42846: NOP4
42850: PPUSH
42851: NOP4
42855: PPUSH
42856: NOP4
42860: GO 42893
42862: LD_INT 3
42864: DOUBLE
42865: EQUAL
42866: IFTRUE 42870
42868: GO 42892
42870: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42871: NOP4
42875: PPUSH
42876: NOP4
42880: PPUSH
42881: NOP4
42885: PPUSH
42886: NOP4
42890: GO 42893
42892: POP
// end ;
42893: LD_VAR 0 2
42897: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42898: LD_INT 0
42900: PPUSH
42901: PPUSH
42902: PPUSH
42903: PPUSH
42904: PPUSH
42905: PPUSH
// if not unit or not building then
42906: NOP4
42910: NOT
42911: PUSH
42912: NOP4
42916: NOT
42917: OR
42918: IFFALSE 42922
// exit ;
42920: GO 43080
// x := GetX ( building ) ;
42922: NOP4
42926: PUSH
42927: NOP4
42931: PPUSH
42932: NOP4
42936: ST_TO_ADDR
// y := GetY ( building ) ;
42937: NOP4
42941: PUSH
42942: NOP4
42946: PPUSH
42947: NOP4
42951: ST_TO_ADDR
// for i = 0 to 5 do
42952: NOP4
42956: PUSH
42957: DOUBLE
42958: LD_INT 0
42960: DEC
42961: ST_TO_ADDR
42962: LD_INT 5
42964: PUSH
42965: FOR_TO
42966: IFFALSE 43078
// begin _x := ShiftX ( x , i , 3 ) ;
42968: NOP4
42972: PUSH
42973: NOP4
42977: PPUSH
42978: NOP4
42982: PPUSH
42983: LD_INT 3
42985: PPUSH
42986: NOP4
42990: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42991: NOP4
42995: PUSH
42996: NOP4
43000: PPUSH
43001: NOP4
43005: PPUSH
43006: LD_INT 3
43008: PPUSH
43009: NOP4
43013: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43014: NOP4
43018: PPUSH
43019: NOP4
43023: PPUSH
43024: NOP4
43028: NOT
43029: IFFALSE 43033
// continue ;
43031: GO 42965
// if HexInfo ( _x , _y ) = 0 then
43033: NOP4
43037: PPUSH
43038: NOP4
43042: PPUSH
43043: NOP4
43047: PUSH
43048: LD_INT 0
43050: EQUAL
43051: IFFALSE 43076
// begin ComMoveXY ( unit , _x , _y ) ;
43053: NOP4
43057: PPUSH
43058: NOP4
43062: PPUSH
43063: NOP4
43067: PPUSH
43068: NOP4
// exit ;
43072: POP
43073: POP
43074: GO 43080
// end ; end ;
43076: GO 42965
43078: POP
43079: POP
// end ;
43080: LD_VAR 0 3
43084: RET
// export function ScanBase ( side , base_area ) ; begin
43085: LD_INT 0
43087: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43088: NOP4
43092: PUSH
43093: NOP4
43097: PPUSH
43098: LD_INT 81
43100: PUSH
43101: NOP4
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PPUSH
43110: NOP4
43114: ST_TO_ADDR
// end ;
43115: LD_VAR 0 3
43119: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43120: LD_INT 0
43122: PPUSH
43123: PPUSH
43124: PPUSH
43125: PPUSH
// result := false ;
43126: NOP4
43130: PUSH
43131: LD_INT 0
43133: ST_TO_ADDR
// side := GetSide ( unit ) ;
43134: NOP4
43138: PUSH
43139: NOP4
43143: PPUSH
43144: NOP4
43148: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43149: NOP4
43153: PUSH
43154: NOP4
43158: PPUSH
43159: NOP4
43163: ST_TO_ADDR
// case nat of 1 :
43164: NOP4
43168: PUSH
43169: LD_INT 1
43171: DOUBLE
43172: EQUAL
43173: IFTRUE 43177
43175: GO 43188
43177: POP
// tech := tech_lassight ; 2 :
43178: NOP4
43182: PUSH
43183: LD_INT 12
43185: ST_TO_ADDR
43186: GO 43227
43188: LD_INT 2
43190: DOUBLE
43191: EQUAL
43192: IFTRUE 43196
43194: GO 43207
43196: POP
// tech := tech_mortar ; 3 :
43197: NOP4
43201: PUSH
43202: LD_INT 41
43204: ST_TO_ADDR
43205: GO 43227
43207: LD_INT 3
43209: DOUBLE
43210: EQUAL
43211: IFTRUE 43215
43213: GO 43226
43215: POP
// tech := tech_bazooka ; end ;
43216: NOP4
43220: PUSH
43221: LD_INT 44
43223: ST_TO_ADDR
43224: GO 43227
43226: POP
// if Researched ( side , tech ) then
43227: NOP4
43231: PPUSH
43232: NOP4
43236: PPUSH
43237: NOP4
43241: IFFALSE 43268
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43243: NOP4
43247: PUSH
43248: LD_INT 5
43250: PUSH
43251: LD_INT 8
43253: PUSH
43254: LD_INT 9
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: LIST
43261: PUSH
43262: NOP4
43266: ARRAY
43267: ST_TO_ADDR
// end ;
43268: LD_VAR 0 2
43272: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43273: LD_INT 0
43275: PPUSH
43276: PPUSH
43277: PPUSH
// if not mines then
43278: NOP4
43282: NOT
43283: IFFALSE 43287
// exit ;
43285: GO 43431
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43287: NOP4
43291: PUSH
43292: LD_INT 81
43294: PUSH
43295: NOP4
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 3
43306: PUSH
43307: LD_INT 21
43309: PUSH
43310: LD_INT 3
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PPUSH
43325: NOP4
43329: ST_TO_ADDR
// for i in mines do
43330: NOP4
43334: PUSH
43335: NOP4
43339: PUSH
43340: FOR_IN
43341: IFFALSE 43429
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43343: NOP4
43347: PUSH
43348: LD_INT 1
43350: ARRAY
43351: PPUSH
43352: NOP4
43356: PUSH
43357: LD_INT 2
43359: ARRAY
43360: PPUSH
43361: NOP4
43365: NOT
43366: IFFALSE 43370
// continue ;
43368: GO 43340
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43370: NOP4
43374: PUSH
43375: LD_INT 1
43377: ARRAY
43378: PPUSH
43379: NOP4
43383: PUSH
43384: LD_INT 2
43386: ARRAY
43387: PPUSH
43388: NOP4
43392: PUSH
43393: NOP4
43397: IN
43398: IFFALSE 43427
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43400: NOP4
43404: PUSH
43405: LD_INT 1
43407: ARRAY
43408: PPUSH
43409: NOP4
43413: PUSH
43414: LD_INT 2
43416: ARRAY
43417: PPUSH
43418: NOP4
43422: PPUSH
43423: NOP4
// end ;
43427: GO 43340
43429: POP
43430: POP
// end ;
43431: LD_VAR 0 3
43435: RET
// export function Count ( array ) ; var i ; begin
43436: LD_INT 0
43438: PPUSH
43439: PPUSH
// result := 0 ;
43440: NOP4
43444: PUSH
43445: LD_INT 0
43447: ST_TO_ADDR
// for i in array do
43448: NOP4
43452: PUSH
43453: NOP4
43457: PUSH
43458: FOR_IN
43459: IFFALSE 43483
// if i then
43461: NOP4
43465: IFFALSE 43481
// result := result + 1 ;
43467: NOP4
43471: PUSH
43472: NOP4
43476: PUSH
43477: LD_INT 1
43479: PLUS
43480: ST_TO_ADDR
43481: GO 43458
43483: POP
43484: POP
// end ;
43485: LD_VAR 0 2
43489: RET
// export function IsEmpty ( building ) ; begin
43490: LD_INT 0
43492: PPUSH
// if not building then
43493: NOP4
43497: NOT
43498: IFFALSE 43502
// exit ;
43500: GO 43545
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43502: NOP4
43506: PUSH
43507: NOP4
43511: PUSH
43512: LD_INT 22
43514: PUSH
43515: NOP4
43519: PPUSH
43520: NOP4
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 58
43531: PUSH
43532: EMPTY
43533: LIST
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PPUSH
43539: NOP4
43543: IN
43544: ST_TO_ADDR
// end ;
43545: LD_VAR 0 2
43549: RET
// export function IsNotFull ( building ) ; begin
43550: LD_INT 0
43552: PPUSH
// if not building then
43553: NOP4
43557: NOT
43558: IFFALSE 43562
// exit ;
43560: GO 43581
// result := UnitsInside ( building ) < 6 ;
43562: NOP4
43566: PUSH
43567: NOP4
43571: PPUSH
43572: NOP4
43576: PUSH
43577: LD_INT 6
43579: LESS
43580: ST_TO_ADDR
// end ;
43581: LD_VAR 0 2
43585: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43586: LD_INT 0
43588: PPUSH
43589: PPUSH
43590: PPUSH
43591: PPUSH
// tmp := [ ] ;
43592: NOP4
43596: PUSH
43597: EMPTY
43598: ST_TO_ADDR
// list := [ ] ;
43599: NOP4
43603: PUSH
43604: EMPTY
43605: ST_TO_ADDR
// for i = 16 to 25 do
43606: NOP4
43610: PUSH
43611: DOUBLE
43612: LD_INT 16
43614: DEC
43615: ST_TO_ADDR
43616: LD_INT 25
43618: PUSH
43619: FOR_TO
43620: IFFALSE 43693
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43622: NOP4
43626: PUSH
43627: NOP4
43631: PUSH
43632: LD_INT 22
43634: PUSH
43635: NOP4
43639: PPUSH
43640: NOP4
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 91
43651: PUSH
43652: NOP4
43656: PUSH
43657: LD_INT 6
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 30
43667: PUSH
43668: NOP4
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: LIST
43681: PUSH
43682: EMPTY
43683: LIST
43684: PPUSH
43685: NOP4
43689: ADD
43690: ST_TO_ADDR
43691: GO 43619
43693: POP
43694: POP
// for i = 1 to tmp do
43695: NOP4
43699: PUSH
43700: DOUBLE
43701: LD_INT 1
43703: DEC
43704: ST_TO_ADDR
43705: NOP4
43709: PUSH
43710: FOR_TO
43711: IFFALSE 43799
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43713: NOP4
43717: PUSH
43718: NOP4
43722: PUSH
43723: NOP4
43727: PUSH
43728: NOP4
43732: ARRAY
43733: PPUSH
43734: NOP4
43738: PUSH
43739: NOP4
43743: PUSH
43744: NOP4
43748: ARRAY
43749: PPUSH
43750: NOP4
43754: PUSH
43755: NOP4
43759: PUSH
43760: NOP4
43764: ARRAY
43765: PPUSH
43766: NOP4
43770: PUSH
43771: NOP4
43775: PUSH
43776: NOP4
43780: ARRAY
43781: PPUSH
43782: NOP4
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: PUSH
43793: EMPTY
43794: LIST
43795: ADD
43796: ST_TO_ADDR
43797: GO 43710
43799: POP
43800: POP
// result := list ;
43801: NOP4
43805: PUSH
43806: NOP4
43810: ST_TO_ADDR
// end ;
43811: LD_VAR 0 2
43815: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43816: LD_INT 0
43818: PPUSH
43819: PPUSH
43820: PPUSH
43821: PPUSH
43822: PPUSH
43823: PPUSH
43824: PPUSH
// if not factory then
43825: NOP4
43829: NOT
43830: IFFALSE 43834
// exit ;
43832: GO 44427
// if control = control_apeman then
43834: NOP4
43838: PUSH
43839: LD_INT 5
43841: EQUAL
43842: IFFALSE 43951
// begin tmp := UnitsInside ( factory ) ;
43844: NOP4
43848: PUSH
43849: NOP4
43853: PPUSH
43854: NOP4
43858: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43859: NOP4
43863: PPUSH
43864: LD_INT 25
43866: PUSH
43867: LD_INT 12
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PPUSH
43874: NOP4
43878: NOT
43879: IFFALSE 43889
// control := control_manual ;
43881: NOP4
43885: PUSH
43886: LD_INT 1
43888: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43889: NOP4
43893: PUSH
43894: NOP4
43898: PPUSH
43899: NOP4
43903: ST_TO_ADDR
// if tmp then
43904: NOP4
43908: IFFALSE 43951
// begin for i in tmp do
43910: NOP4
43914: PUSH
43915: NOP4
43919: PUSH
43920: FOR_IN
43921: IFFALSE 43949
// if i [ 1 ] = b_ext_radio then
43923: NOP4
43927: PUSH
43928: LD_INT 1
43930: ARRAY
43931: PUSH
43932: LD_INT 22
43934: EQUAL
43935: IFFALSE 43947
// begin control := control_remote ;
43937: NOP4
43941: PUSH
43942: LD_INT 2
43944: ST_TO_ADDR
// break ;
43945: GO 43949
// end ;
43947: GO 43920
43949: POP
43950: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43951: NOP4
43955: PPUSH
43956: NOP4
43960: PPUSH
43961: NOP4
43965: PPUSH
43966: NOP4
43970: PPUSH
43971: NOP4
43975: PPUSH
43976: NOP4
43980: IFFALSE 44015
// begin result := [ chassis , engine , control , weapon ] ;
43982: NOP4
43986: PUSH
43987: NOP4
43991: PUSH
43992: NOP4
43996: PUSH
43997: NOP4
44001: PUSH
44002: NOP4
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: ST_TO_ADDR
// exit ;
44013: GO 44427
// end ; _chassis := AvailableChassisList ( factory ) ;
44015: NOP4
44019: PUSH
44020: NOP4
44024: PPUSH
44025: NOP4
44029: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44030: NOP4
44034: PUSH
44035: NOP4
44039: PPUSH
44040: NOP4
44044: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44045: NOP4
44049: PUSH
44050: NOP4
44054: PPUSH
44055: NOP4
44059: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44060: NOP4
44064: PUSH
44065: NOP4
44069: PPUSH
44070: NOP4
44074: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44075: NOP4
44079: NOT
44080: PUSH
44081: NOP4
44085: NOT
44086: OR
44087: PUSH
44088: NOP4
44092: NOT
44093: OR
44094: PUSH
44095: NOP4
44099: NOT
44100: OR
44101: IFFALSE 44136
// begin result := [ chassis , engine , control , weapon ] ;
44103: NOP4
44107: PUSH
44108: NOP4
44112: PUSH
44113: NOP4
44117: PUSH
44118: NOP4
44122: PUSH
44123: NOP4
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: ST_TO_ADDR
// exit ;
44134: GO 44427
// end ; if not chassis in _chassis then
44136: NOP4
44140: PUSH
44141: NOP4
44145: IN
44146: NOT
44147: IFFALSE 44173
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44149: NOP4
44153: PUSH
44154: NOP4
44158: PUSH
44159: LD_INT 1
44161: PPUSH
44162: NOP4
44166: PPUSH
44167: NOP4
44171: ARRAY
44172: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44173: NOP4
44177: PPUSH
44178: NOP4
44182: PPUSH
44183: NOP4
44187: NOT
44188: IFFALSE 44247
// repeat engine := _engine [ 1 ] ;
44190: NOP4
44194: PUSH
44195: NOP4
44199: PUSH
44200: LD_INT 1
44202: ARRAY
44203: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44204: NOP4
44208: PUSH
44209: NOP4
44213: PPUSH
44214: LD_INT 1
44216: PPUSH
44217: NOP4
44221: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44222: NOP4
44226: PPUSH
44227: NOP4
44231: PPUSH
44232: NOP4
44236: PUSH
44237: NOP4
44241: PUSH
44242: EMPTY
44243: EQUAL
44244: OR
44245: IFFALSE 44190
// if not control in _control then
44247: NOP4
44251: PUSH
44252: NOP4
44256: IN
44257: NOT
44258: IFFALSE 44284
// control := _control [ rand ( 1 , _control ) ] ;
44260: NOP4
44264: PUSH
44265: NOP4
44269: PUSH
44270: LD_INT 1
44272: PPUSH
44273: NOP4
44277: PPUSH
44278: NOP4
44282: ARRAY
44283: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44284: NOP4
44288: PPUSH
44289: NOP4
44293: PPUSH
44294: NOP4
44298: NOT
44299: IFFALSE 44358
// repeat weapon := _weapon [ 1 ] ;
44301: NOP4
44305: PUSH
44306: NOP4
44310: PUSH
44311: LD_INT 1
44313: ARRAY
44314: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44315: NOP4
44319: PUSH
44320: NOP4
44324: PPUSH
44325: LD_INT 1
44327: PPUSH
44328: NOP4
44332: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44333: NOP4
44337: PPUSH
44338: NOP4
44342: PPUSH
44343: NOP4
44347: PUSH
44348: NOP4
44352: PUSH
44353: EMPTY
44354: EQUAL
44355: OR
44356: IFFALSE 44301
// result := [ ] ;
44358: NOP4
44362: PUSH
44363: EMPTY
44364: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44365: NOP4
44369: PPUSH
44370: NOP4
44374: PPUSH
44375: NOP4
44379: PPUSH
44380: NOP4
44384: PPUSH
44385: NOP4
44389: PPUSH
44390: NOP4
44394: IFFALSE 44427
// result := [ chassis , engine , control , weapon ] ;
44396: NOP4
44400: PUSH
44401: NOP4
44405: PUSH
44406: NOP4
44410: PUSH
44411: NOP4
44415: PUSH
44416: NOP4
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: ST_TO_ADDR
// end ;
44427: LD_VAR 0 6
44431: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44432: LD_INT 0
44434: PPUSH
// if not chassis or not engine then
44435: NOP4
44439: NOT
44440: PUSH
44441: NOP4
44445: NOT
44446: OR
44447: IFFALSE 44451
// exit ;
44449: GO 44647
// case engine of engine_solar :
44451: NOP4
44455: PUSH
44456: LD_INT 2
44458: DOUBLE
44459: EQUAL
44460: IFTRUE 44464
44462: GO 44502
44464: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44465: NOP4
44469: PUSH
44470: LD_INT 11
44472: PUSH
44473: LD_INT 12
44475: PUSH
44476: LD_INT 13
44478: PUSH
44479: LD_INT 14
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: LD_INT 2
44487: PUSH
44488: LD_INT 3
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: ST_TO_ADDR
44500: GO 44631
44502: LD_INT 1
44504: DOUBLE
44505: EQUAL
44506: IFTRUE 44510
44508: GO 44572
44510: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44511: NOP4
44515: PUSH
44516: LD_INT 11
44518: PUSH
44519: LD_INT 12
44521: PUSH
44522: LD_INT 13
44524: PUSH
44525: LD_INT 14
44527: PUSH
44528: LD_INT 1
44530: PUSH
44531: LD_INT 2
44533: PUSH
44534: LD_INT 3
44536: PUSH
44537: LD_INT 4
44539: PUSH
44540: LD_INT 5
44542: PUSH
44543: LD_INT 21
44545: PUSH
44546: LD_INT 23
44548: PUSH
44549: LD_INT 22
44551: PUSH
44552: LD_INT 24
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: ST_TO_ADDR
44570: GO 44631
44572: LD_INT 3
44574: DOUBLE
44575: EQUAL
44576: IFTRUE 44580
44578: GO 44630
44580: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44581: NOP4
44585: PUSH
44586: LD_INT 13
44588: PUSH
44589: LD_INT 14
44591: PUSH
44592: LD_INT 2
44594: PUSH
44595: LD_INT 3
44597: PUSH
44598: LD_INT 4
44600: PUSH
44601: LD_INT 5
44603: PUSH
44604: LD_INT 21
44606: PUSH
44607: LD_INT 22
44609: PUSH
44610: LD_INT 23
44612: PUSH
44613: LD_INT 24
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: ST_TO_ADDR
44628: GO 44631
44630: POP
// result := ( chassis in result ) ;
44631: NOP4
44635: PUSH
44636: NOP4
44640: PUSH
44641: NOP4
44645: IN
44646: ST_TO_ADDR
// end ;
44647: LD_VAR 0 3
44651: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44652: LD_INT 0
44654: PPUSH
// if not chassis or not weapon then
44655: NOP4
44659: NOT
44660: PUSH
44661: NOP4
44665: NOT
44666: OR
44667: IFFALSE 44671
// exit ;
44669: GO 45697
// case weapon of us_machine_gun :
44671: NOP4
44675: PUSH
44676: LD_INT 2
44678: DOUBLE
44679: EQUAL
44680: IFTRUE 44684
44682: GO 44714
44684: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44685: NOP4
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: LD_INT 2
44695: PUSH
44696: LD_INT 3
44698: PUSH
44699: LD_INT 4
44701: PUSH
44702: LD_INT 5
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: ST_TO_ADDR
44712: GO 45681
44714: LD_INT 3
44716: DOUBLE
44717: EQUAL
44718: IFTRUE 44722
44720: GO 44752
44722: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44723: NOP4
44727: PUSH
44728: LD_INT 1
44730: PUSH
44731: LD_INT 2
44733: PUSH
44734: LD_INT 3
44736: PUSH
44737: LD_INT 4
44739: PUSH
44740: LD_INT 5
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: ST_TO_ADDR
44750: GO 45681
44752: LD_INT 11
44754: DOUBLE
44755: EQUAL
44756: IFTRUE 44760
44758: GO 44790
44760: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44761: NOP4
44765: PUSH
44766: LD_INT 1
44768: PUSH
44769: LD_INT 2
44771: PUSH
44772: LD_INT 3
44774: PUSH
44775: LD_INT 4
44777: PUSH
44778: LD_INT 5
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: ST_TO_ADDR
44788: GO 45681
44790: LD_INT 4
44792: DOUBLE
44793: EQUAL
44794: IFTRUE 44798
44796: GO 44824
44798: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44799: NOP4
44803: PUSH
44804: LD_INT 2
44806: PUSH
44807: LD_INT 3
44809: PUSH
44810: LD_INT 4
44812: PUSH
44813: LD_INT 5
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: ST_TO_ADDR
44822: GO 45681
44824: LD_INT 5
44826: DOUBLE
44827: EQUAL
44828: IFTRUE 44832
44830: GO 44858
44832: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44833: NOP4
44837: PUSH
44838: LD_INT 2
44840: PUSH
44841: LD_INT 3
44843: PUSH
44844: LD_INT 4
44846: PUSH
44847: LD_INT 5
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: ST_TO_ADDR
44856: GO 45681
44858: LD_INT 9
44860: DOUBLE
44861: EQUAL
44862: IFTRUE 44866
44864: GO 44892
44866: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44867: NOP4
44871: PUSH
44872: LD_INT 2
44874: PUSH
44875: LD_INT 3
44877: PUSH
44878: LD_INT 4
44880: PUSH
44881: LD_INT 5
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: ST_TO_ADDR
44890: GO 45681
44892: LD_INT 7
44894: DOUBLE
44895: EQUAL
44896: IFTRUE 44900
44898: GO 44926
44900: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44901: NOP4
44905: PUSH
44906: LD_INT 2
44908: PUSH
44909: LD_INT 3
44911: PUSH
44912: LD_INT 4
44914: PUSH
44915: LD_INT 5
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: ST_TO_ADDR
44924: GO 45681
44926: LD_INT 12
44928: DOUBLE
44929: EQUAL
44930: IFTRUE 44934
44932: GO 44960
44934: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44935: NOP4
44939: PUSH
44940: LD_INT 2
44942: PUSH
44943: LD_INT 3
44945: PUSH
44946: LD_INT 4
44948: PUSH
44949: LD_INT 5
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: ST_TO_ADDR
44958: GO 45681
44960: LD_INT 13
44962: DOUBLE
44963: EQUAL
44964: IFTRUE 44968
44966: GO 44994
44968: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44969: NOP4
44973: PUSH
44974: LD_INT 2
44976: PUSH
44977: LD_INT 3
44979: PUSH
44980: LD_INT 4
44982: PUSH
44983: LD_INT 5
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: ST_TO_ADDR
44992: GO 45681
44994: LD_INT 14
44996: DOUBLE
44997: EQUAL
44998: IFTRUE 45002
45000: GO 45020
45002: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45003: NOP4
45007: PUSH
45008: LD_INT 4
45010: PUSH
45011: LD_INT 5
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: ST_TO_ADDR
45018: GO 45681
45020: LD_INT 6
45022: DOUBLE
45023: EQUAL
45024: IFTRUE 45028
45026: GO 45046
45028: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45029: NOP4
45033: PUSH
45034: LD_INT 4
45036: PUSH
45037: LD_INT 5
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: ST_TO_ADDR
45044: GO 45681
45046: LD_INT 10
45048: DOUBLE
45049: EQUAL
45050: IFTRUE 45054
45052: GO 45072
45054: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45055: NOP4
45059: PUSH
45060: LD_INT 4
45062: PUSH
45063: LD_INT 5
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: ST_TO_ADDR
45070: GO 45681
45072: LD_INT 22
45074: DOUBLE
45075: EQUAL
45076: IFTRUE 45080
45078: GO 45106
45080: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45081: NOP4
45085: PUSH
45086: LD_INT 11
45088: PUSH
45089: LD_INT 12
45091: PUSH
45092: LD_INT 13
45094: PUSH
45095: LD_INT 14
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: ST_TO_ADDR
45104: GO 45681
45106: LD_INT 23
45108: DOUBLE
45109: EQUAL
45110: IFTRUE 45114
45112: GO 45140
45114: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45115: NOP4
45119: PUSH
45120: LD_INT 11
45122: PUSH
45123: LD_INT 12
45125: PUSH
45126: LD_INT 13
45128: PUSH
45129: LD_INT 14
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: ST_TO_ADDR
45138: GO 45681
45140: LD_INT 24
45142: DOUBLE
45143: EQUAL
45144: IFTRUE 45148
45146: GO 45174
45148: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45149: NOP4
45153: PUSH
45154: LD_INT 11
45156: PUSH
45157: LD_INT 12
45159: PUSH
45160: LD_INT 13
45162: PUSH
45163: LD_INT 14
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: ST_TO_ADDR
45172: GO 45681
45174: LD_INT 30
45176: DOUBLE
45177: EQUAL
45178: IFTRUE 45182
45180: GO 45208
45182: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45183: NOP4
45187: PUSH
45188: LD_INT 11
45190: PUSH
45191: LD_INT 12
45193: PUSH
45194: LD_INT 13
45196: PUSH
45197: LD_INT 14
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: ST_TO_ADDR
45206: GO 45681
45208: LD_INT 25
45210: DOUBLE
45211: EQUAL
45212: IFTRUE 45216
45214: GO 45234
45216: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45217: NOP4
45221: PUSH
45222: LD_INT 13
45224: PUSH
45225: LD_INT 14
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: ST_TO_ADDR
45232: GO 45681
45234: LD_INT 27
45236: DOUBLE
45237: EQUAL
45238: IFTRUE 45242
45240: GO 45260
45242: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45243: NOP4
45247: PUSH
45248: LD_INT 13
45250: PUSH
45251: LD_INT 14
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: ST_TO_ADDR
45258: GO 45681
45260: LD_INT 28
45262: DOUBLE
45263: EQUAL
45264: IFTRUE 45268
45266: GO 45286
45268: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45269: NOP4
45273: PUSH
45274: LD_INT 13
45276: PUSH
45277: LD_INT 14
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: ST_TO_ADDR
45284: GO 45681
45286: LD_INT 29
45288: DOUBLE
45289: EQUAL
45290: IFTRUE 45294
45292: GO 45312
45294: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45295: NOP4
45299: PUSH
45300: LD_INT 13
45302: PUSH
45303: LD_INT 14
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: ST_TO_ADDR
45310: GO 45681
45312: LD_INT 31
45314: DOUBLE
45315: EQUAL
45316: IFTRUE 45320
45318: GO 45338
45320: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45321: NOP4
45325: PUSH
45326: LD_INT 13
45328: PUSH
45329: LD_INT 14
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: ST_TO_ADDR
45336: GO 45681
45338: LD_INT 26
45340: DOUBLE
45341: EQUAL
45342: IFTRUE 45346
45344: GO 45364
45346: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45347: NOP4
45351: PUSH
45352: LD_INT 13
45354: PUSH
45355: LD_INT 14
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: ST_TO_ADDR
45362: GO 45681
45364: LD_INT 42
45366: DOUBLE
45367: EQUAL
45368: IFTRUE 45372
45370: GO 45398
45372: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45373: NOP4
45377: PUSH
45378: LD_INT 21
45380: PUSH
45381: LD_INT 22
45383: PUSH
45384: LD_INT 23
45386: PUSH
45387: LD_INT 24
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: ST_TO_ADDR
45396: GO 45681
45398: LD_INT 43
45400: DOUBLE
45401: EQUAL
45402: IFTRUE 45406
45404: GO 45432
45406: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45407: NOP4
45411: PUSH
45412: LD_INT 21
45414: PUSH
45415: LD_INT 22
45417: PUSH
45418: LD_INT 23
45420: PUSH
45421: LD_INT 24
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: ST_TO_ADDR
45430: GO 45681
45432: LD_INT 44
45434: DOUBLE
45435: EQUAL
45436: IFTRUE 45440
45438: GO 45466
45440: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45441: NOP4
45445: PUSH
45446: LD_INT 21
45448: PUSH
45449: LD_INT 22
45451: PUSH
45452: LD_INT 23
45454: PUSH
45455: LD_INT 24
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: ST_TO_ADDR
45464: GO 45681
45466: LD_INT 45
45468: DOUBLE
45469: EQUAL
45470: IFTRUE 45474
45472: GO 45500
45474: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45475: NOP4
45479: PUSH
45480: LD_INT 21
45482: PUSH
45483: LD_INT 22
45485: PUSH
45486: LD_INT 23
45488: PUSH
45489: LD_INT 24
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: ST_TO_ADDR
45498: GO 45681
45500: LD_INT 49
45502: DOUBLE
45503: EQUAL
45504: IFTRUE 45508
45506: GO 45534
45508: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45509: NOP4
45513: PUSH
45514: LD_INT 21
45516: PUSH
45517: LD_INT 22
45519: PUSH
45520: LD_INT 23
45522: PUSH
45523: LD_INT 24
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: ST_TO_ADDR
45532: GO 45681
45534: LD_INT 51
45536: DOUBLE
45537: EQUAL
45538: IFTRUE 45542
45540: GO 45568
45542: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45543: NOP4
45547: PUSH
45548: LD_INT 21
45550: PUSH
45551: LD_INT 22
45553: PUSH
45554: LD_INT 23
45556: PUSH
45557: LD_INT 24
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: ST_TO_ADDR
45566: GO 45681
45568: LD_INT 52
45570: DOUBLE
45571: EQUAL
45572: IFTRUE 45576
45574: GO 45602
45576: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45577: NOP4
45581: PUSH
45582: LD_INT 21
45584: PUSH
45585: LD_INT 22
45587: PUSH
45588: LD_INT 23
45590: PUSH
45591: LD_INT 24
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: ST_TO_ADDR
45600: GO 45681
45602: LD_INT 53
45604: DOUBLE
45605: EQUAL
45606: IFTRUE 45610
45608: GO 45628
45610: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45611: NOP4
45615: PUSH
45616: LD_INT 23
45618: PUSH
45619: LD_INT 24
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: ST_TO_ADDR
45626: GO 45681
45628: LD_INT 46
45630: DOUBLE
45631: EQUAL
45632: IFTRUE 45636
45634: GO 45654
45636: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45637: NOP4
45641: PUSH
45642: LD_INT 23
45644: PUSH
45645: LD_INT 24
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: ST_TO_ADDR
45652: GO 45681
45654: LD_INT 47
45656: DOUBLE
45657: EQUAL
45658: IFTRUE 45662
45660: GO 45680
45662: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45663: NOP4
45667: PUSH
45668: LD_INT 23
45670: PUSH
45671: LD_INT 24
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: ST_TO_ADDR
45678: GO 45681
45680: POP
// result := ( chassis in result ) ;
45681: NOP4
45685: PUSH
45686: NOP4
45690: PUSH
45691: NOP4
45695: IN
45696: ST_TO_ADDR
// end ;
45697: LD_VAR 0 3
45701: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45702: LD_INT 0
45704: PPUSH
45705: PPUSH
45706: PPUSH
45707: PPUSH
45708: PPUSH
45709: PPUSH
45710: PPUSH
// result := array ;
45711: NOP4
45715: PUSH
45716: NOP4
45720: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45721: NOP4
45725: NOT
45726: PUSH
45727: NOP4
45731: NOT
45732: OR
45733: PUSH
45734: NOP4
45738: NOT
45739: OR
45740: PUSH
45741: NOP4
45745: PUSH
45746: NOP4
45750: GREATER
45751: OR
45752: PUSH
45753: NOP4
45757: PUSH
45758: NOP4
45762: GREATER
45763: OR
45764: IFFALSE 45768
// exit ;
45766: GO 46064
// if direction then
45768: NOP4
45772: IFFALSE 45836
// begin d := 1 ;
45774: NOP4
45778: PUSH
45779: LD_INT 1
45781: ST_TO_ADDR
// if i_from > i_to then
45782: NOP4
45786: PUSH
45787: NOP4
45791: GREATER
45792: IFFALSE 45818
// length := ( array - i_from ) + i_to else
45794: NOP4
45798: PUSH
45799: NOP4
45803: PUSH
45804: NOP4
45808: MINUS
45809: PUSH
45810: NOP4
45814: PLUS
45815: ST_TO_ADDR
45816: GO 45834
// length := i_to - i_from ;
45818: NOP4
45822: PUSH
45823: NOP4
45827: PUSH
45828: NOP4
45832: MINUS
45833: ST_TO_ADDR
// end else
45834: GO 45897
// begin d := - 1 ;
45836: NOP4
45840: PUSH
45841: LD_INT 1
45843: NEG
45844: ST_TO_ADDR
// if i_from > i_to then
45845: NOP4
45849: PUSH
45850: NOP4
45854: GREATER
45855: IFFALSE 45875
// length := i_from - i_to else
45857: NOP4
45861: PUSH
45862: NOP4
45866: PUSH
45867: NOP4
45871: MINUS
45872: ST_TO_ADDR
45873: GO 45897
// length := ( array - i_to ) + i_from ;
45875: NOP4
45879: PUSH
45880: NOP4
45884: PUSH
45885: NOP4
45889: MINUS
45890: PUSH
45891: NOP4
45895: PLUS
45896: ST_TO_ADDR
// end ; if not length then
45897: NOP4
45901: NOT
45902: IFFALSE 45906
// exit ;
45904: GO 46064
// tmp := array ;
45906: NOP4
45910: PUSH
45911: NOP4
45915: ST_TO_ADDR
// for i = 1 to length do
45916: NOP4
45920: PUSH
45921: DOUBLE
45922: LD_INT 1
45924: DEC
45925: ST_TO_ADDR
45926: NOP4
45930: PUSH
45931: FOR_TO
45932: IFFALSE 46052
// begin for j = 1 to array do
45934: NOP4
45938: PUSH
45939: DOUBLE
45940: LD_INT 1
45942: DEC
45943: ST_TO_ADDR
45944: NOP4
45948: PUSH
45949: FOR_TO
45950: IFFALSE 46038
// begin k := j + d ;
45952: NOP4
45956: PUSH
45957: NOP4
45961: PUSH
45962: NOP4
45966: PLUS
45967: ST_TO_ADDR
// if k > array then
45968: NOP4
45972: PUSH
45973: NOP4
45977: GREATER
45978: IFFALSE 45988
// k := 1 ;
45980: NOP4
45984: PUSH
45985: LD_INT 1
45987: ST_TO_ADDR
// if not k then
45988: NOP4
45992: NOT
45993: IFFALSE 46005
// k := array ;
45995: NOP4
45999: PUSH
46000: NOP4
46004: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46005: NOP4
46009: PUSH
46010: NOP4
46014: PPUSH
46015: NOP4
46019: PPUSH
46020: NOP4
46024: PUSH
46025: NOP4
46029: ARRAY
46030: PPUSH
46031: NOP4
46035: ST_TO_ADDR
// end ;
46036: GO 45949
46038: POP
46039: POP
// array := tmp ;
46040: NOP4
46044: PUSH
46045: NOP4
46049: ST_TO_ADDR
// end ;
46050: GO 45931
46052: POP
46053: POP
// result := array ;
46054: NOP4
46058: PUSH
46059: NOP4
46063: ST_TO_ADDR
// end ;
46064: LD_VAR 0 5
46068: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46069: LD_INT 0
46071: PPUSH
46072: PPUSH
// result := 0 ;
46073: NOP4
46077: PUSH
46078: LD_INT 0
46080: ST_TO_ADDR
// if not array or not value in array then
46081: NOP4
46085: NOT
46086: PUSH
46087: NOP4
46091: PUSH
46092: NOP4
46096: IN
46097: NOT
46098: OR
46099: IFFALSE 46103
// exit ;
46101: GO 46157
// for i = 1 to array do
46103: NOP4
46107: PUSH
46108: DOUBLE
46109: LD_INT 1
46111: DEC
46112: ST_TO_ADDR
46113: NOP4
46117: PUSH
46118: FOR_TO
46119: IFFALSE 46155
// if value = array [ i ] then
46121: NOP4
46125: PUSH
46126: NOP4
46130: PUSH
46131: NOP4
46135: ARRAY
46136: EQUAL
46137: IFFALSE 46153
// begin result := i ;
46139: NOP4
46143: PUSH
46144: NOP4
46148: ST_TO_ADDR
// exit ;
46149: POP
46150: POP
46151: GO 46157
// end ;
46153: GO 46118
46155: POP
46156: POP
// end ;
46157: LD_VAR 0 3
46161: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46162: LD_INT 0
46164: PPUSH
// vc_chassis := chassis ;
46165: LD_ADDR_OWVAR 37
46169: PUSH
46170: NOP4
46174: ST_TO_ADDR
// vc_engine := engine ;
46175: LD_ADDR_OWVAR 39
46179: PUSH
46180: NOP4
46184: ST_TO_ADDR
// vc_control := control ;
46185: LD_ADDR_OWVAR 38
46189: PUSH
46190: NOP4
46194: ST_TO_ADDR
// vc_weapon := weapon ;
46195: LD_ADDR_OWVAR 40
46199: PUSH
46200: NOP4
46204: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46205: LD_ADDR_OWVAR 41
46209: PUSH
46210: NOP4
46214: ST_TO_ADDR
// end ;
46215: LD_VAR 0 6
46219: RET
// export function WantPlant ( unit ) ; var task ; begin
46220: LD_INT 0
46222: PPUSH
46223: PPUSH
// result := false ;
46224: NOP4
46228: PUSH
46229: LD_INT 0
46231: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46232: NOP4
46236: PUSH
46237: NOP4
46241: PPUSH
46242: NOP4
46246: ST_TO_ADDR
// if task then
46247: NOP4
46251: IFFALSE 46279
// if task [ 1 ] [ 1 ] = p then
46253: NOP4
46257: PUSH
46258: LD_INT 1
46260: ARRAY
46261: PUSH
46262: LD_INT 1
46264: ARRAY
46265: PUSH
46266: LD_STRING p
46268: EQUAL
46269: IFFALSE 46279
// result := true ;
46271: NOP4
46275: PUSH
46276: LD_INT 1
46278: ST_TO_ADDR
// end ;
46279: LD_VAR 0 2
46283: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46284: LD_INT 0
46286: PPUSH
46287: PPUSH
46288: PPUSH
46289: PPUSH
// if pos < 1 then
46290: NOP4
46294: PUSH
46295: LD_INT 1
46297: LESS
46298: IFFALSE 46302
// exit ;
46300: GO 46605
// if pos = 1 then
46302: NOP4
46306: PUSH
46307: LD_INT 1
46309: EQUAL
46310: IFFALSE 46343
// result := Replace ( arr , pos [ 1 ] , value ) else
46312: NOP4
46316: PUSH
46317: NOP4
46321: PPUSH
46322: NOP4
46326: PUSH
46327: LD_INT 1
46329: ARRAY
46330: PPUSH
46331: NOP4
46335: PPUSH
46336: NOP4
46340: ST_TO_ADDR
46341: GO 46605
// begin tmp := arr ;
46343: NOP4
46347: PUSH
46348: NOP4
46352: ST_TO_ADDR
// s_arr := [ tmp ] ;
46353: NOP4
46357: PUSH
46358: NOP4
46362: PUSH
46363: EMPTY
46364: LIST
46365: ST_TO_ADDR
// for i = 1 to pos - 1 do
46366: NOP4
46370: PUSH
46371: DOUBLE
46372: LD_INT 1
46374: DEC
46375: ST_TO_ADDR
46376: NOP4
46380: PUSH
46381: LD_INT 1
46383: MINUS
46384: PUSH
46385: FOR_TO
46386: IFFALSE 46431
// begin tmp := tmp [ pos [ i ] ] ;
46388: NOP4
46392: PUSH
46393: NOP4
46397: PUSH
46398: NOP4
46402: PUSH
46403: NOP4
46407: ARRAY
46408: ARRAY
46409: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46410: NOP4
46414: PUSH
46415: NOP4
46419: PUSH
46420: NOP4
46424: PUSH
46425: EMPTY
46426: LIST
46427: ADD
46428: ST_TO_ADDR
// end ;
46429: GO 46385
46431: POP
46432: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46433: NOP4
46437: PUSH
46438: NOP4
46442: PPUSH
46443: NOP4
46447: PUSH
46448: NOP4
46452: ARRAY
46453: PPUSH
46454: NOP4
46458: PPUSH
46459: NOP4
46463: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46464: NOP4
46468: PUSH
46469: NOP4
46473: PPUSH
46474: NOP4
46478: PPUSH
46479: NOP4
46483: PPUSH
46484: NOP4
46488: ST_TO_ADDR
// for i = s_arr downto 2 do
46489: NOP4
46493: PUSH
46494: DOUBLE
46495: NOP4
46499: INC
46500: ST_TO_ADDR
46501: LD_INT 2
46503: PUSH
46504: FOR_DOWNTO
46505: IFFALSE 46589
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46507: NOP4
46511: PUSH
46512: NOP4
46516: PUSH
46517: NOP4
46521: PUSH
46522: LD_INT 1
46524: MINUS
46525: ARRAY
46526: PPUSH
46527: NOP4
46531: PUSH
46532: NOP4
46536: PUSH
46537: LD_INT 1
46539: MINUS
46540: ARRAY
46541: PPUSH
46542: NOP4
46546: PUSH
46547: NOP4
46551: ARRAY
46552: PPUSH
46553: NOP4
46557: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46558: NOP4
46562: PUSH
46563: NOP4
46567: PPUSH
46568: NOP4
46572: PUSH
46573: LD_INT 1
46575: MINUS
46576: PPUSH
46577: NOP4
46581: PPUSH
46582: NOP4
46586: ST_TO_ADDR
// end ;
46587: GO 46504
46589: POP
46590: POP
// result := s_arr [ 1 ] ;
46591: NOP4
46595: PUSH
46596: NOP4
46600: PUSH
46601: LD_INT 1
46603: ARRAY
46604: ST_TO_ADDR
// end ; end ;
46605: LD_VAR 0 4
46609: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46610: LD_INT 0
46612: PPUSH
46613: PPUSH
// if not list then
46614: NOP4
46618: NOT
46619: IFFALSE 46623
// exit ;
46621: GO 46714
// i := list [ pos1 ] ;
46623: NOP4
46627: PUSH
46628: NOP4
46632: PUSH
46633: NOP4
46637: ARRAY
46638: ST_TO_ADDR
// if not i then
46639: NOP4
46643: NOT
46644: IFFALSE 46648
// exit ;
46646: GO 46714
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46648: NOP4
46652: PUSH
46653: NOP4
46657: PPUSH
46658: NOP4
46662: PPUSH
46663: NOP4
46667: PUSH
46668: NOP4
46672: ARRAY
46673: PPUSH
46674: NOP4
46678: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46679: NOP4
46683: PUSH
46684: NOP4
46688: PPUSH
46689: NOP4
46693: PPUSH
46694: NOP4
46698: PPUSH
46699: NOP4
46703: ST_TO_ADDR
// result := list ;
46704: NOP4
46708: PUSH
46709: NOP4
46713: ST_TO_ADDR
// end ;
46714: LD_VAR 0 4
46718: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46719: LD_INT 0
46721: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46722: NOP4
46726: PUSH
46727: NOP4
46731: PPUSH
46732: NOP4
46736: PPUSH
46737: NOP4
46741: PPUSH
46742: NOP4
46746: PPUSH
46747: NOP4
46751: PPUSH
46752: NOP4
46756: PPUSH
46757: NOP4
46761: PPUSH
46762: NOP4
46766: ST_TO_ADDR
// end ;
46767: LD_VAR 0 5
46771: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46772: LD_INT 0
46774: PPUSH
46775: PPUSH
46776: PPUSH
46777: PPUSH
// if not list then
46778: NOP4
46782: NOT
46783: IFFALSE 46787
// exit ;
46785: GO 47175
// result := [ ] ;
46787: NOP4
46791: PUSH
46792: EMPTY
46793: ST_TO_ADDR
// for i in list do
46794: NOP4
46798: PUSH
46799: NOP4
46803: PUSH
46804: FOR_IN
46805: IFFALSE 47007
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46807: NOP4
46811: PUSH
46812: NOP4
46816: PPUSH
46817: NOP4
46821: PPUSH
46822: NOP4
46826: PPUSH
46827: NOP4
46831: ST_TO_ADDR
// if not result then
46832: NOP4
46836: NOT
46837: IFFALSE 46863
// result := [ [ i , tmp ] ] else
46839: NOP4
46843: PUSH
46844: NOP4
46848: PUSH
46849: NOP4
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: EMPTY
46859: LIST
46860: ST_TO_ADDR
46861: GO 47005
// begin if result [ result ] [ 2 ] < tmp then
46863: NOP4
46867: PUSH
46868: NOP4
46872: ARRAY
46873: PUSH
46874: LD_INT 2
46876: ARRAY
46877: PUSH
46878: NOP4
46882: LESS
46883: IFFALSE 46925
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46885: NOP4
46889: PUSH
46890: NOP4
46894: PPUSH
46895: NOP4
46899: PUSH
46900: LD_INT 1
46902: PLUS
46903: PPUSH
46904: NOP4
46908: PUSH
46909: NOP4
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PPUSH
46918: NOP4
46922: ST_TO_ADDR
46923: GO 47005
// for j = 1 to result do
46925: NOP4
46929: PUSH
46930: DOUBLE
46931: LD_INT 1
46933: DEC
46934: ST_TO_ADDR
46935: NOP4
46939: PUSH
46940: FOR_TO
46941: IFFALSE 47003
// begin if tmp < result [ j ] [ 2 ] then
46943: NOP4
46947: PUSH
46948: NOP4
46952: PUSH
46953: NOP4
46957: ARRAY
46958: PUSH
46959: LD_INT 2
46961: ARRAY
46962: LESS
46963: IFFALSE 47001
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46965: NOP4
46969: PUSH
46970: NOP4
46974: PPUSH
46975: NOP4
46979: PPUSH
46980: NOP4
46984: PUSH
46985: NOP4
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PPUSH
46994: NOP4
46998: ST_TO_ADDR
// break ;
46999: GO 47003
// end ; end ;
47001: GO 46940
47003: POP
47004: POP
// end ; end ;
47005: GO 46804
47007: POP
47008: POP
// if result and not asc then
47009: NOP4
47013: PUSH
47014: NOP4
47018: NOT
47019: AND
47020: IFFALSE 47095
// begin tmp := result ;
47022: NOP4
47026: PUSH
47027: NOP4
47031: ST_TO_ADDR
// for i = tmp downto 1 do
47032: NOP4
47036: PUSH
47037: DOUBLE
47038: NOP4
47042: INC
47043: ST_TO_ADDR
47044: LD_INT 1
47046: PUSH
47047: FOR_DOWNTO
47048: IFFALSE 47093
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47050: NOP4
47054: PUSH
47055: NOP4
47059: PPUSH
47060: NOP4
47064: PUSH
47065: NOP4
47069: MINUS
47070: PUSH
47071: LD_INT 1
47073: PLUS
47074: PPUSH
47075: NOP4
47079: PUSH
47080: NOP4
47084: ARRAY
47085: PPUSH
47086: NOP4
47090: ST_TO_ADDR
47091: GO 47047
47093: POP
47094: POP
// end ; tmp := [ ] ;
47095: NOP4
47099: PUSH
47100: EMPTY
47101: ST_TO_ADDR
// if mode then
47102: NOP4
47106: IFFALSE 47175
// begin for i = 1 to result do
47108: NOP4
47112: PUSH
47113: DOUBLE
47114: LD_INT 1
47116: DEC
47117: ST_TO_ADDR
47118: NOP4
47122: PUSH
47123: FOR_TO
47124: IFFALSE 47163
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47126: NOP4
47130: PUSH
47131: NOP4
47135: PPUSH
47136: NOP4
47140: PPUSH
47141: NOP4
47145: PUSH
47146: NOP4
47150: ARRAY
47151: PUSH
47152: LD_INT 1
47154: ARRAY
47155: PPUSH
47156: NOP4
47160: ST_TO_ADDR
47161: GO 47123
47163: POP
47164: POP
// result := tmp ;
47165: NOP4
47169: PUSH
47170: NOP4
47174: ST_TO_ADDR
// end ; end ;
47175: LD_VAR 0 6
47179: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47180: LD_INT 0
47182: PPUSH
47183: PPUSH
47184: PPUSH
47185: PPUSH
47186: PPUSH
47187: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47188: NOP4
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: EMPTY
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: ST_TO_ADDR
// if not x or not y then
47210: NOP4
47214: NOT
47215: PUSH
47216: NOP4
47220: NOT
47221: OR
47222: IFFALSE 47226
// exit ;
47224: GO 48872
// if not range then
47226: NOP4
47230: NOT
47231: IFFALSE 47241
// range := 10 ;
47233: NOP4
47237: PUSH
47238: LD_INT 10
47240: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47241: NOP4
47245: PUSH
47246: LD_INT 81
47248: PUSH
47249: NOP4
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 92
47260: PUSH
47261: NOP4
47265: PUSH
47266: NOP4
47270: PUSH
47271: NOP4
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 3
47284: PUSH
47285: LD_INT 21
47287: PUSH
47288: LD_INT 3
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: LIST
47303: PPUSH
47304: NOP4
47308: ST_TO_ADDR
// if not tmp then
47309: NOP4
47313: NOT
47314: IFFALSE 47318
// exit ;
47316: GO 48872
// for i in tmp do
47318: NOP4
47322: PUSH
47323: NOP4
47327: PUSH
47328: FOR_IN
47329: IFFALSE 48847
// begin points := [ 0 , 0 , 0 ] ;
47331: NOP4
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: LD_INT 0
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: LIST
47349: ST_TO_ADDR
// bpoints := 1 ;
47350: NOP4
47354: PUSH
47355: LD_INT 1
47357: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47358: NOP4
47362: PPUSH
47363: NOP4
47367: PUSH
47368: LD_INT 1
47370: DOUBLE
47371: EQUAL
47372: IFTRUE 47376
47374: GO 47954
47376: POP
// begin if GetClass ( i ) = 1 then
47377: NOP4
47381: PPUSH
47382: NOP4
47386: PUSH
47387: LD_INT 1
47389: EQUAL
47390: IFFALSE 47411
// points := [ 10 , 5 , 3 ] ;
47392: NOP4
47396: PUSH
47397: LD_INT 10
47399: PUSH
47400: LD_INT 5
47402: PUSH
47403: LD_INT 3
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: LIST
47410: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47411: NOP4
47415: PPUSH
47416: NOP4
47420: PUSH
47421: LD_INT 2
47423: PUSH
47424: LD_INT 3
47426: PUSH
47427: LD_INT 4
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: LIST
47434: IN
47435: IFFALSE 47456
// points := [ 3 , 2 , 1 ] ;
47437: NOP4
47441: PUSH
47442: LD_INT 3
47444: PUSH
47445: LD_INT 2
47447: PUSH
47448: LD_INT 1
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: LIST
47455: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47456: NOP4
47460: PPUSH
47461: NOP4
47465: PUSH
47466: LD_INT 5
47468: EQUAL
47469: IFFALSE 47490
// points := [ 130 , 5 , 2 ] ;
47471: NOP4
47475: PUSH
47476: LD_INT 130
47478: PUSH
47479: LD_INT 5
47481: PUSH
47482: LD_INT 2
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: LIST
47489: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47490: NOP4
47494: PPUSH
47495: NOP4
47499: PUSH
47500: LD_INT 8
47502: EQUAL
47503: IFFALSE 47524
// points := [ 35 , 35 , 30 ] ;
47505: NOP4
47509: PUSH
47510: LD_INT 35
47512: PUSH
47513: LD_INT 35
47515: PUSH
47516: LD_INT 30
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: LIST
47523: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47524: NOP4
47528: PPUSH
47529: NOP4
47533: PUSH
47534: LD_INT 9
47536: EQUAL
47537: IFFALSE 47558
// points := [ 20 , 55 , 40 ] ;
47539: NOP4
47543: PUSH
47544: LD_INT 20
47546: PUSH
47547: LD_INT 55
47549: PUSH
47550: LD_INT 40
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: LIST
47557: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47558: NOP4
47562: PPUSH
47563: NOP4
47567: PUSH
47568: LD_INT 12
47570: PUSH
47571: LD_INT 16
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: IN
47578: IFFALSE 47599
// points := [ 5 , 3 , 2 ] ;
47580: NOP4
47584: PUSH
47585: LD_INT 5
47587: PUSH
47588: LD_INT 3
47590: PUSH
47591: LD_INT 2
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: LIST
47598: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47599: NOP4
47603: PPUSH
47604: NOP4
47608: PUSH
47609: LD_INT 17
47611: EQUAL
47612: IFFALSE 47633
// points := [ 100 , 50 , 75 ] ;
47614: NOP4
47618: PUSH
47619: LD_INT 100
47621: PUSH
47622: LD_INT 50
47624: PUSH
47625: LD_INT 75
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: LIST
47632: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47633: NOP4
47637: PPUSH
47638: NOP4
47642: PUSH
47643: LD_INT 15
47645: EQUAL
47646: IFFALSE 47667
// points := [ 10 , 5 , 3 ] ;
47648: NOP4
47652: PUSH
47653: LD_INT 10
47655: PUSH
47656: LD_INT 5
47658: PUSH
47659: LD_INT 3
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: LIST
47666: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47667: NOP4
47671: PPUSH
47672: NOP4
47676: PUSH
47677: LD_INT 14
47679: EQUAL
47680: IFFALSE 47701
// points := [ 10 , 0 , 0 ] ;
47682: NOP4
47686: PUSH
47687: LD_INT 10
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: LIST
47700: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47701: NOP4
47705: PPUSH
47706: NOP4
47710: PUSH
47711: LD_INT 11
47713: EQUAL
47714: IFFALSE 47735
// points := [ 30 , 10 , 5 ] ;
47716: NOP4
47720: PUSH
47721: LD_INT 30
47723: PUSH
47724: LD_INT 10
47726: PUSH
47727: LD_INT 5
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: LIST
47734: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47735: NOP4
47739: PPUSH
47740: LD_INT 5
47742: PPUSH
47743: NOP4
47747: PUSH
47748: LD_INT 2
47750: EQUAL
47751: IFFALSE 47768
// bpoints := bpoints * 1.8 ;
47753: NOP4
47757: PUSH
47758: NOP4
47762: PUSH
47763: LD_REAL  1.80000000000000E+0000
47766: MUL
47767: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47768: NOP4
47772: PPUSH
47773: NOP4
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: LD_INT 2
47783: PUSH
47784: LD_INT 3
47786: PUSH
47787: LD_INT 4
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: IN
47796: PUSH
47797: NOP4
47801: PPUSH
47802: LD_INT 51
47804: PPUSH
47805: NOP4
47809: PUSH
47810: LD_INT 2
47812: EQUAL
47813: AND
47814: IFFALSE 47831
// bpoints := bpoints * 1.2 ;
47816: NOP4
47820: PUSH
47821: NOP4
47825: PUSH
47826: LD_REAL  1.20000000000000E+0000
47829: MUL
47830: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47831: NOP4
47835: PPUSH
47836: NOP4
47840: PUSH
47841: LD_INT 5
47843: PUSH
47844: LD_INT 7
47846: PUSH
47847: LD_INT 9
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: LIST
47854: IN
47855: PUSH
47856: NOP4
47860: PPUSH
47861: LD_INT 52
47863: PPUSH
47864: NOP4
47868: PUSH
47869: LD_INT 2
47871: EQUAL
47872: AND
47873: IFFALSE 47890
// bpoints := bpoints * 1.5 ;
47875: NOP4
47879: PUSH
47880: NOP4
47884: PUSH
47885: LD_REAL  1.50000000000000E+0000
47888: MUL
47889: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47890: NOP4
47894: PPUSH
47895: LD_INT 66
47897: PPUSH
47898: NOP4
47902: PUSH
47903: LD_INT 2
47905: EQUAL
47906: IFFALSE 47923
// bpoints := bpoints * 1.1 ;
47908: NOP4
47912: PUSH
47913: NOP4
47917: PUSH
47918: LD_REAL  1.10000000000000E+0000
47921: MUL
47922: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47923: NOP4
47927: PUSH
47928: NOP4
47932: PUSH
47933: NOP4
47937: PPUSH
47938: LD_INT 1
47940: PPUSH
47941: NOP4
47945: PUSH
47946: LD_REAL  1.15000000000000E+0000
47949: MUL
47950: MUL
47951: ST_TO_ADDR
// end ; unit_vehicle :
47952: GO 48776
47954: LD_INT 2
47956: DOUBLE
47957: EQUAL
47958: IFTRUE 47962
47960: GO 48764
47962: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47963: NOP4
47967: PPUSH
47968: NOP4
47972: PUSH
47973: LD_INT 2
47975: PUSH
47976: LD_INT 42
47978: PUSH
47979: LD_INT 24
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: LIST
47986: IN
47987: IFFALSE 48008
// points := [ 25 , 5 , 3 ] ;
47989: NOP4
47993: PUSH
47994: LD_INT 25
47996: PUSH
47997: LD_INT 5
47999: PUSH
48000: LD_INT 3
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: LIST
48007: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48008: NOP4
48012: PPUSH
48013: NOP4
48017: PUSH
48018: LD_INT 4
48020: PUSH
48021: LD_INT 43
48023: PUSH
48024: LD_INT 25
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: LIST
48031: IN
48032: IFFALSE 48053
// points := [ 40 , 15 , 5 ] ;
48034: NOP4
48038: PUSH
48039: LD_INT 40
48041: PUSH
48042: LD_INT 15
48044: PUSH
48045: LD_INT 5
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: LIST
48052: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48053: NOP4
48057: PPUSH
48058: NOP4
48062: PUSH
48063: LD_INT 3
48065: PUSH
48066: LD_INT 23
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: IN
48073: IFFALSE 48094
// points := [ 7 , 25 , 8 ] ;
48075: NOP4
48079: PUSH
48080: LD_INT 7
48082: PUSH
48083: LD_INT 25
48085: PUSH
48086: LD_INT 8
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: LIST
48093: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48094: NOP4
48098: PPUSH
48099: NOP4
48103: PUSH
48104: LD_INT 5
48106: PUSH
48107: LD_INT 27
48109: PUSH
48110: LD_INT 44
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: LIST
48117: IN
48118: IFFALSE 48139
// points := [ 14 , 50 , 16 ] ;
48120: NOP4
48124: PUSH
48125: LD_INT 14
48127: PUSH
48128: LD_INT 50
48130: PUSH
48131: LD_INT 16
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: LIST
48138: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48139: NOP4
48143: PPUSH
48144: NOP4
48148: PUSH
48149: LD_INT 6
48151: PUSH
48152: LD_INT 46
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: IN
48159: IFFALSE 48180
// points := [ 32 , 120 , 70 ] ;
48161: NOP4
48165: PUSH
48166: LD_INT 32
48168: PUSH
48169: LD_INT 120
48171: PUSH
48172: LD_INT 70
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: LIST
48179: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
48180: NOP4
48184: PPUSH
48185: NOP4
48189: PUSH
48190: LD_INT 7
48192: PUSH
48193: LD_INT 28
48195: PUSH
48196: LD_INT 45
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: LIST
48203: IN
48204: IFFALSE 48225
// points := [ 35 , 20 , 45 ] ;
48206: NOP4
48210: PUSH
48211: LD_INT 35
48213: PUSH
48214: LD_INT 20
48216: PUSH
48217: LD_INT 45
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: LIST
48224: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48225: NOP4
48229: PPUSH
48230: NOP4
48234: PUSH
48235: LD_INT 47
48237: PUSH
48238: EMPTY
48239: LIST
48240: IN
48241: IFFALSE 48262
// points := [ 67 , 45 , 75 ] ;
48243: NOP4
48247: PUSH
48248: LD_INT 67
48250: PUSH
48251: LD_INT 45
48253: PUSH
48254: LD_INT 75
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: LIST
48261: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48262: NOP4
48266: PPUSH
48267: NOP4
48271: PUSH
48272: LD_INT 26
48274: PUSH
48275: EMPTY
48276: LIST
48277: IN
48278: IFFALSE 48299
// points := [ 120 , 30 , 80 ] ;
48280: NOP4
48284: PUSH
48285: LD_INT 120
48287: PUSH
48288: LD_INT 30
48290: PUSH
48291: LD_INT 80
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: LIST
48298: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48299: NOP4
48303: PPUSH
48304: NOP4
48308: PUSH
48309: LD_INT 22
48311: PUSH
48312: EMPTY
48313: LIST
48314: IN
48315: IFFALSE 48336
// points := [ 40 , 1 , 1 ] ;
48317: NOP4
48321: PUSH
48322: LD_INT 40
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: LIST
48335: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48336: NOP4
48340: PPUSH
48341: NOP4
48345: PUSH
48346: LD_INT 29
48348: PUSH
48349: EMPTY
48350: LIST
48351: IN
48352: IFFALSE 48373
// points := [ 70 , 200 , 400 ] ;
48354: NOP4
48358: PUSH
48359: LD_INT 70
48361: PUSH
48362: LD_INT 200
48364: PUSH
48365: LD_INT 400
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: LIST
48372: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48373: NOP4
48377: PPUSH
48378: NOP4
48382: PUSH
48383: LD_INT 14
48385: PUSH
48386: LD_INT 53
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: IN
48393: IFFALSE 48414
// points := [ 40 , 10 , 20 ] ;
48395: NOP4
48399: PUSH
48400: LD_INT 40
48402: PUSH
48403: LD_INT 10
48405: PUSH
48406: LD_INT 20
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: LIST
48413: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48414: NOP4
48418: PPUSH
48419: NOP4
48423: PUSH
48424: LD_INT 9
48426: PUSH
48427: EMPTY
48428: LIST
48429: IN
48430: IFFALSE 48451
// points := [ 5 , 70 , 20 ] ;
48432: NOP4
48436: PUSH
48437: LD_INT 5
48439: PUSH
48440: LD_INT 70
48442: PUSH
48443: LD_INT 20
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: LIST
48450: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48451: NOP4
48455: PPUSH
48456: NOP4
48460: PUSH
48461: LD_INT 10
48463: PUSH
48464: EMPTY
48465: LIST
48466: IN
48467: IFFALSE 48488
// points := [ 35 , 110 , 70 ] ;
48469: NOP4
48473: PUSH
48474: LD_INT 35
48476: PUSH
48477: LD_INT 110
48479: PUSH
48480: LD_INT 70
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: LIST
48487: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48488: NOP4
48492: PPUSH
48493: NOP4
48497: PUSH
48498: LD_INT 25
48500: EQUAL
48501: IFFALSE 48522
// points := [ 80 , 65 , 100 ] ;
48503: NOP4
48507: PUSH
48508: LD_INT 80
48510: PUSH
48511: LD_INT 65
48513: PUSH
48514: LD_INT 100
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: LIST
48521: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48522: NOP4
48526: PPUSH
48527: NOP4
48531: PUSH
48532: LD_INT 1
48534: EQUAL
48535: IFFALSE 48570
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48537: NOP4
48541: PUSH
48542: NOP4
48546: PUSH
48547: NOP4
48551: PPUSH
48552: NOP4
48556: PPUSH
48557: LD_INT 3
48559: PPUSH
48560: NOP4
48564: PUSH
48565: LD_INT 4
48567: MUL
48568: MUL
48569: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48570: NOP4
48574: PPUSH
48575: NOP4
48579: PUSH
48580: LD_INT 2
48582: EQUAL
48583: IFFALSE 48634
// begin j := IsControledBy ( i ) ;
48585: NOP4
48589: PUSH
48590: NOP4
48594: PPUSH
48595: NOP4
48599: ST_TO_ADDR
// if j then
48600: NOP4
48604: IFFALSE 48634
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48606: NOP4
48610: PUSH
48611: NOP4
48615: PUSH
48616: NOP4
48620: PPUSH
48621: LD_INT 3
48623: PPUSH
48624: NOP4
48628: PUSH
48629: LD_INT 3
48631: MUL
48632: MUL
48633: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48634: NOP4
48638: PPUSH
48639: NOP4
48643: PUSH
48644: LD_INT 5
48646: PUSH
48647: LD_INT 6
48649: PUSH
48650: LD_INT 46
48652: PUSH
48653: LD_INT 44
48655: PUSH
48656: LD_INT 47
48658: PUSH
48659: LD_INT 45
48661: PUSH
48662: LD_INT 28
48664: PUSH
48665: LD_INT 7
48667: PUSH
48668: LD_INT 27
48670: PUSH
48671: LD_INT 29
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: IN
48686: PUSH
48687: NOP4
48691: PPUSH
48692: LD_INT 52
48694: PPUSH
48695: NOP4
48699: PUSH
48700: LD_INT 2
48702: EQUAL
48703: AND
48704: IFFALSE 48721
// bpoints := bpoints * 1.2 ;
48706: NOP4
48710: PUSH
48711: NOP4
48715: PUSH
48716: LD_REAL  1.20000000000000E+0000
48719: MUL
48720: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48721: NOP4
48725: PPUSH
48726: NOP4
48730: PUSH
48731: LD_INT 6
48733: PUSH
48734: LD_INT 46
48736: PUSH
48737: LD_INT 47
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: LIST
48744: IN
48745: IFFALSE 48762
// bpoints := bpoints * 1.2 ;
48747: NOP4
48751: PUSH
48752: NOP4
48756: PUSH
48757: LD_REAL  1.20000000000000E+0000
48760: MUL
48761: ST_TO_ADDR
// end ; unit_building :
48762: GO 48776
48764: LD_INT 3
48766: DOUBLE
48767: EQUAL
48768: IFTRUE 48772
48770: GO 48775
48772: POP
// ; end ;
48773: GO 48776
48775: POP
// for j = 1 to 3 do
48776: NOP4
48780: PUSH
48781: DOUBLE
48782: LD_INT 1
48784: DEC
48785: ST_TO_ADDR
48786: LD_INT 3
48788: PUSH
48789: FOR_TO
48790: IFFALSE 48843
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48792: NOP4
48796: PUSH
48797: NOP4
48801: PPUSH
48802: NOP4
48806: PPUSH
48807: NOP4
48811: PUSH
48812: NOP4
48816: ARRAY
48817: PUSH
48818: NOP4
48822: PUSH
48823: NOP4
48827: ARRAY
48828: PUSH
48829: NOP4
48833: MUL
48834: PLUS
48835: PPUSH
48836: NOP4
48840: ST_TO_ADDR
48841: GO 48789
48843: POP
48844: POP
// end ;
48845: GO 47328
48847: POP
48848: POP
// result := Replace ( result , 4 , tmp ) ;
48849: NOP4
48853: PUSH
48854: NOP4
48858: PPUSH
48859: LD_INT 4
48861: PPUSH
48862: NOP4
48866: PPUSH
48867: NOP4
48871: ST_TO_ADDR
// end ;
48872: LD_VAR 0 5
48876: RET
// export function DangerAtRange ( unit , range ) ; begin
48877: LD_INT 0
48879: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48880: NOP4
48884: PUSH
48885: NOP4
48889: PPUSH
48890: NOP4
48894: PPUSH
48895: NOP4
48899: PPUSH
48900: NOP4
48904: PPUSH
48905: NOP4
48909: PPUSH
48910: NOP4
48914: PPUSH
48915: NOP4
48919: PPUSH
48920: NOP4
48924: ST_TO_ADDR
// end ;
48925: LD_VAR 0 3
48929: RET
// export function DangerInArea ( side , area ) ; begin
48930: LD_INT 0
48932: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48933: NOP4
48937: PUSH
48938: NOP4
48942: PPUSH
48943: LD_INT 81
48945: PUSH
48946: NOP4
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PPUSH
48955: NOP4
48959: ST_TO_ADDR
// end ;
48960: LD_VAR 0 3
48964: RET
// export function IsExtension ( b ) ; begin
48965: LD_INT 0
48967: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48968: NOP4
48972: PUSH
48973: NOP4
48977: PUSH
48978: LD_INT 23
48980: PUSH
48981: LD_INT 20
48983: PUSH
48984: LD_INT 22
48986: PUSH
48987: LD_INT 17
48989: PUSH
48990: LD_INT 24
48992: PUSH
48993: LD_INT 21
48995: PUSH
48996: LD_INT 19
48998: PUSH
48999: LD_INT 16
49001: PUSH
49002: LD_INT 25
49004: PUSH
49005: LD_INT 18
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: IN
49020: ST_TO_ADDR
// end ;
49021: LD_VAR 0 2
49025: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49026: LD_INT 0
49028: PPUSH
49029: PPUSH
49030: PPUSH
// result := [ ] ;
49031: NOP4
49035: PUSH
49036: EMPTY
49037: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49038: NOP4
49042: PUSH
49043: NOP4
49047: PPUSH
49048: LD_INT 21
49050: PUSH
49051: LD_INT 3
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PPUSH
49058: NOP4
49062: ST_TO_ADDR
// if not tmp then
49063: NOP4
49067: NOT
49068: IFFALSE 49072
// exit ;
49070: GO 49136
// if checkLink then
49072: NOP4
49076: IFFALSE 49126
// begin for i in tmp do
49078: NOP4
49082: PUSH
49083: NOP4
49087: PUSH
49088: FOR_IN
49089: IFFALSE 49124
// if GetBase ( i ) <> base then
49091: NOP4
49095: PPUSH
49096: NOP4
49100: PUSH
49101: NOP4
49105: NONEQUAL
49106: IFFALSE 49122
// ComLinkToBase ( base , i ) ;
49108: NOP4
49112: PPUSH
49113: NOP4
49117: PPUSH
49118: NOP4
49122: GO 49088
49124: POP
49125: POP
// end ; result := tmp ;
49126: NOP4
49130: PUSH
49131: NOP4
49135: ST_TO_ADDR
// end ;
49136: LD_VAR 0 4
49140: RET
// export function ComComplete ( units , b ) ; var i ; begin
49141: LD_INT 0
49143: PPUSH
49144: PPUSH
// if not units then
49145: NOP4
49149: NOT
49150: IFFALSE 49154
// exit ;
49152: GO 49244
// for i in units do
49154: NOP4
49158: PUSH
49159: NOP4
49163: PUSH
49164: FOR_IN
49165: IFFALSE 49242
// if BuildingStatus ( b ) = bs_build then
49167: NOP4
49171: PPUSH
49172: NOP4
49176: PUSH
49177: LD_INT 1
49179: EQUAL
49180: IFFALSE 49240
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49182: NOP4
49186: PPUSH
49187: LD_STRING h
49189: PUSH
49190: NOP4
49194: PPUSH
49195: NOP4
49199: PUSH
49200: NOP4
49204: PPUSH
49205: NOP4
49209: PUSH
49210: NOP4
49214: PUSH
49215: LD_INT 0
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: PUSH
49233: EMPTY
49234: LIST
49235: PPUSH
49236: NOP4
49240: GO 49164
49242: POP
49243: POP
// end ;
49244: LD_VAR 0 3
49248: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49249: LD_INT 0
49251: PPUSH
49252: PPUSH
49253: PPUSH
49254: PPUSH
49255: PPUSH
49256: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
49257: NOP4
49261: NOT
49262: PUSH
49263: NOP4
49267: PPUSH
49268: NOP4
49272: PUSH
49273: LD_INT 2
49275: EQUAL
49276: NOT
49277: OR
49278: IFFALSE 49282
// exit ;
49280: GO 49598
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49282: NOP4
49286: PUSH
49287: LD_INT 22
49289: PUSH
49290: NOP4
49294: PPUSH
49295: NOP4
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 2
49306: PUSH
49307: LD_INT 30
49309: PUSH
49310: LD_INT 36
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 34
49319: PUSH
49320: LD_INT 31
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: LIST
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PPUSH
49336: NOP4
49340: ST_TO_ADDR
// if not tmp then
49341: NOP4
49345: NOT
49346: IFFALSE 49350
// exit ;
49348: GO 49598
// result := [ ] ;
49350: NOP4
49354: PUSH
49355: EMPTY
49356: ST_TO_ADDR
// for i in tmp do
49357: NOP4
49361: PUSH
49362: NOP4
49366: PUSH
49367: FOR_IN
49368: IFFALSE 49439
// begin t := UnitsInside ( i ) ;
49370: NOP4
49374: PUSH
49375: NOP4
49379: PPUSH
49380: NOP4
49384: ST_TO_ADDR
// if t then
49385: NOP4
49389: IFFALSE 49437
// for j in t do
49391: NOP4
49395: PUSH
49396: NOP4
49400: PUSH
49401: FOR_IN
49402: IFFALSE 49435
// result := Insert ( result , result + 1 , j ) ;
49404: NOP4
49408: PUSH
49409: NOP4
49413: PPUSH
49414: NOP4
49418: PUSH
49419: LD_INT 1
49421: PLUS
49422: PPUSH
49423: NOP4
49427: PPUSH
49428: NOP4
49432: ST_TO_ADDR
49433: GO 49401
49435: POP
49436: POP
// end ;
49437: GO 49367
49439: POP
49440: POP
// if not result then
49441: NOP4
49445: NOT
49446: IFFALSE 49450
// exit ;
49448: GO 49598
// mech := result [ 1 ] ;
49450: NOP4
49454: PUSH
49455: NOP4
49459: PUSH
49460: LD_INT 1
49462: ARRAY
49463: ST_TO_ADDR
// if result > 1 then
49464: NOP4
49468: PUSH
49469: LD_INT 1
49471: GREATER
49472: IFFALSE 49584
// for i = 2 to result do
49474: NOP4
49478: PUSH
49479: DOUBLE
49480: LD_INT 2
49482: DEC
49483: ST_TO_ADDR
49484: NOP4
49488: PUSH
49489: FOR_TO
49490: IFFALSE 49582
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49492: NOP4
49496: PUSH
49497: NOP4
49501: PUSH
49502: NOP4
49506: ARRAY
49507: PPUSH
49508: LD_INT 3
49510: PPUSH
49511: NOP4
49515: PUSH
49516: NOP4
49520: PUSH
49521: NOP4
49525: ARRAY
49526: PPUSH
49527: NOP4
49531: MINUS
49532: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49533: NOP4
49537: PUSH
49538: NOP4
49542: PPUSH
49543: LD_INT 3
49545: PPUSH
49546: NOP4
49550: PUSH
49551: NOP4
49555: PPUSH
49556: NOP4
49560: MINUS
49561: GREATEREQUAL
49562: IFFALSE 49580
// mech := result [ i ] ;
49564: NOP4
49568: PUSH
49569: NOP4
49573: PUSH
49574: NOP4
49578: ARRAY
49579: ST_TO_ADDR
// end ;
49580: GO 49489
49582: POP
49583: POP
// ComLinkTo ( vehicle , mech ) ;
49584: NOP4
49588: PPUSH
49589: NOP4
49593: PPUSH
49594: NOP4
// end ;
49598: LD_VAR 0 2
49602: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49603: LD_INT 0
49605: PPUSH
49606: PPUSH
49607: PPUSH
49608: PPUSH
49609: PPUSH
49610: PPUSH
49611: PPUSH
49612: PPUSH
49613: PPUSH
49614: PPUSH
49615: PPUSH
49616: PPUSH
49617: PPUSH
// result := [ ] ;
49618: NOP4
49622: PUSH
49623: EMPTY
49624: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49625: NOP4
49629: PPUSH
49630: NOP4
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: IN
49645: NOT
49646: IFFALSE 49650
// exit ;
49648: GO 51284
// if name then
49650: NOP4
49654: IFFALSE 49670
// SetBName ( base_dep , name ) ;
49656: NOP4
49660: PPUSH
49661: NOP4
49665: PPUSH
49666: NOP4
// base := GetBase ( base_dep ) ;
49670: NOP4
49674: PUSH
49675: NOP4
49679: PPUSH
49680: NOP4
49684: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49685: NOP4
49689: PUSH
49690: NOP4
49694: PPUSH
49695: NOP4
49699: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49700: NOP4
49704: PUSH
49705: NOP4
49709: PPUSH
49710: NOP4
49714: ST_TO_ADDR
// if sources then
49715: NOP4
49719: IFFALSE 49766
// for i = 1 to 3 do
49721: NOP4
49725: PUSH
49726: DOUBLE
49727: LD_INT 1
49729: DEC
49730: ST_TO_ADDR
49731: LD_INT 3
49733: PUSH
49734: FOR_TO
49735: IFFALSE 49764
// AddResourceType ( base , i , sources [ i ] ) ;
49737: NOP4
49741: PPUSH
49742: NOP4
49746: PPUSH
49747: NOP4
49751: PUSH
49752: NOP4
49756: ARRAY
49757: PPUSH
49758: NOP4
49762: GO 49734
49764: POP
49765: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49766: NOP4
49770: PUSH
49771: NOP4
49775: PPUSH
49776: NOP4
49780: PPUSH
49781: LD_INT 1
49783: PPUSH
49784: NOP4
49788: ST_TO_ADDR
// InitHc ;
49789: NOP4
// InitUc ;
49793: NOP4
// uc_side := side ;
49797: LD_ADDR_OWVAR 20
49801: PUSH
49802: NOP4
49806: ST_TO_ADDR
// uc_nation := nation ;
49807: LD_ADDR_OWVAR 21
49811: PUSH
49812: NOP4
49816: ST_TO_ADDR
// if buildings then
49817: NOP4
49821: IFFALSE 51143
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49823: NOP4
49827: PUSH
49828: NOP4
49832: PPUSH
49833: LD_INT 2
49835: PUSH
49836: LD_INT 30
49838: PUSH
49839: LD_INT 29
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 30
49848: PUSH
49849: LD_INT 30
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: LIST
49860: PPUSH
49861: NOP4
49865: ST_TO_ADDR
// if tmp then
49866: NOP4
49870: IFFALSE 49918
// for i in tmp do
49872: NOP4
49876: PUSH
49877: NOP4
49881: PUSH
49882: FOR_IN
49883: IFFALSE 49916
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49885: NOP4
49889: PPUSH
49890: NOP4
49894: PPUSH
49895: NOP4
49899: PPUSH
49900: NOP4
49904: PPUSH
49905: NOP4
49909: PPUSH
49910: NOP4
49914: GO 49882
49916: POP
49917: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49918: NOP4
49922: PPUSH
49923: LD_INT 2
49925: PUSH
49926: LD_INT 30
49928: PUSH
49929: LD_INT 32
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 30
49938: PUSH
49939: LD_INT 33
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: LIST
49950: PPUSH
49951: NOP4
49955: IFFALSE 50043
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49957: NOP4
49961: PUSH
49962: NOP4
49966: PPUSH
49967: LD_INT 2
49969: PUSH
49970: LD_INT 30
49972: PUSH
49973: LD_INT 32
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 30
49982: PUSH
49983: LD_INT 33
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: LIST
49994: PPUSH
49995: NOP4
49999: PUSH
50000: FOR_IN
50001: IFFALSE 50041
// begin if not GetBWeapon ( i ) then
50003: NOP4
50007: PPUSH
50008: NOP4
50012: NOT
50013: IFFALSE 50039
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50015: NOP4
50019: PPUSH
50020: NOP4
50024: PPUSH
50025: NOP4
50029: PPUSH
50030: NOP4
50034: PPUSH
50035: NOP4
// end ;
50039: GO 50000
50041: POP
50042: POP
// end ; for i = 1 to personel do
50043: NOP4
50047: PUSH
50048: DOUBLE
50049: LD_INT 1
50051: DEC
50052: ST_TO_ADDR
50053: NOP4
50057: PUSH
50058: FOR_TO
50059: IFFALSE 51123
// begin if i > 4 then
50061: NOP4
50065: PUSH
50066: LD_INT 4
50068: GREATER
50069: IFFALSE 50073
// break ;
50071: GO 51123
// case i of 1 :
50073: NOP4
50077: PUSH
50078: LD_INT 1
50080: DOUBLE
50081: EQUAL
50082: IFTRUE 50086
50084: GO 50166
50086: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50087: NOP4
50091: PUSH
50092: NOP4
50096: PPUSH
50097: LD_INT 22
50099: PUSH
50100: NOP4
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 58
50111: PUSH
50112: EMPTY
50113: LIST
50114: PUSH
50115: LD_INT 2
50117: PUSH
50118: LD_INT 30
50120: PUSH
50121: LD_INT 32
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 30
50130: PUSH
50131: LD_INT 4
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 30
50140: PUSH
50141: LD_INT 5
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: LIST
50158: PPUSH
50159: NOP4
50163: ST_TO_ADDR
50164: GO 50388
50166: LD_INT 2
50168: DOUBLE
50169: EQUAL
50170: IFTRUE 50174
50172: GO 50236
50174: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50175: NOP4
50179: PUSH
50180: NOP4
50184: PPUSH
50185: LD_INT 22
50187: PUSH
50188: NOP4
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 2
50199: PUSH
50200: LD_INT 30
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 30
50212: PUSH
50213: LD_INT 1
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: LIST
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PPUSH
50229: NOP4
50233: ST_TO_ADDR
50234: GO 50388
50236: LD_INT 3
50238: DOUBLE
50239: EQUAL
50240: IFTRUE 50244
50242: GO 50306
50244: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50245: NOP4
50249: PUSH
50250: NOP4
50254: PPUSH
50255: LD_INT 22
50257: PUSH
50258: NOP4
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 2
50269: PUSH
50270: LD_INT 30
50272: PUSH
50273: LD_INT 2
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 30
50282: PUSH
50283: LD_INT 3
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: LIST
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PPUSH
50299: NOP4
50303: ST_TO_ADDR
50304: GO 50388
50306: LD_INT 4
50308: DOUBLE
50309: EQUAL
50310: IFTRUE 50314
50312: GO 50387
50314: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50315: NOP4
50319: PUSH
50320: NOP4
50324: PPUSH
50325: LD_INT 22
50327: PUSH
50328: NOP4
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 2
50339: PUSH
50340: LD_INT 30
50342: PUSH
50343: LD_INT 6
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 30
50352: PUSH
50353: LD_INT 7
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 30
50362: PUSH
50363: LD_INT 8
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PPUSH
50380: NOP4
50384: ST_TO_ADDR
50385: GO 50388
50387: POP
// if i = 1 then
50388: NOP4
50392: PUSH
50393: LD_INT 1
50395: EQUAL
50396: IFFALSE 50507
// begin tmp := [ ] ;
50398: NOP4
50402: PUSH
50403: EMPTY
50404: ST_TO_ADDR
// for j in f do
50405: NOP4
50409: PUSH
50410: NOP4
50414: PUSH
50415: FOR_IN
50416: IFFALSE 50489
// if GetBType ( j ) = b_bunker then
50418: NOP4
50422: PPUSH
50423: NOP4
50427: PUSH
50428: LD_INT 32
50430: EQUAL
50431: IFFALSE 50458
// tmp := Insert ( tmp , 1 , j ) else
50433: NOP4
50437: PUSH
50438: NOP4
50442: PPUSH
50443: LD_INT 1
50445: PPUSH
50446: NOP4
50450: PPUSH
50451: NOP4
50455: ST_TO_ADDR
50456: GO 50487
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50458: NOP4
50462: PUSH
50463: NOP4
50467: PPUSH
50468: NOP4
50472: PUSH
50473: LD_INT 1
50475: PLUS
50476: PPUSH
50477: NOP4
50481: PPUSH
50482: NOP4
50486: ST_TO_ADDR
50487: GO 50415
50489: POP
50490: POP
// if tmp then
50491: NOP4
50495: IFFALSE 50507
// f := tmp ;
50497: NOP4
50501: PUSH
50502: NOP4
50506: ST_TO_ADDR
// end ; x := personel [ i ] ;
50507: NOP4
50511: PUSH
50512: NOP4
50516: PUSH
50517: NOP4
50521: ARRAY
50522: ST_TO_ADDR
// if x = - 1 then
50523: NOP4
50527: PUSH
50528: LD_INT 1
50530: NEG
50531: EQUAL
50532: IFFALSE 50741
// begin for j in f do
50534: NOP4
50538: PUSH
50539: NOP4
50543: PUSH
50544: FOR_IN
50545: IFFALSE 50737
// repeat InitHc ;
50547: NOP4
// if GetBType ( j ) = b_barracks then
50551: NOP4
50555: PPUSH
50556: NOP4
50560: PUSH
50561: LD_INT 5
50563: EQUAL
50564: IFFALSE 50634
// begin if UnitsInside ( j ) < 3 then
50566: NOP4
50570: PPUSH
50571: NOP4
50575: PUSH
50576: LD_INT 3
50578: LESS
50579: IFFALSE 50615
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50581: LD_INT 0
50583: PPUSH
50584: LD_INT 5
50586: PUSH
50587: LD_INT 8
50589: PUSH
50590: LD_INT 9
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: LIST
50597: PUSH
50598: NOP4
50602: ARRAY
50603: PPUSH
50604: NOP4
50608: PPUSH
50609: NOP4
50613: GO 50632
// PrepareHuman ( false , i , skill ) ;
50615: LD_INT 0
50617: PPUSH
50618: NOP4
50622: PPUSH
50623: NOP4
50627: PPUSH
50628: NOP4
// end else
50632: GO 50651
// PrepareHuman ( false , i , skill ) ;
50634: LD_INT 0
50636: PPUSH
50637: NOP4
50641: PPUSH
50642: NOP4
50646: PPUSH
50647: NOP4
// un := CreateHuman ;
50651: NOP4
50655: PUSH
50656: NOP4
50660: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50661: NOP4
50665: PUSH
50666: NOP4
50670: PPUSH
50671: LD_INT 1
50673: PPUSH
50674: NOP4
50678: PPUSH
50679: NOP4
50683: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50684: NOP4
50688: PPUSH
50689: NOP4
50693: PPUSH
50694: NOP4
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50698: NOP4
50702: PPUSH
50703: NOP4
50707: PUSH
50708: LD_INT 6
50710: EQUAL
50711: PUSH
50712: NOP4
50716: PPUSH
50717: NOP4
50721: PUSH
50722: LD_INT 32
50724: PUSH
50725: LD_INT 31
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: IN
50732: OR
50733: IFFALSE 50547
50735: GO 50544
50737: POP
50738: POP
// end else
50739: GO 51121
// for j = 1 to x do
50741: NOP4
50745: PUSH
50746: DOUBLE
50747: LD_INT 1
50749: DEC
50750: ST_TO_ADDR
50751: NOP4
50755: PUSH
50756: FOR_TO
50757: IFFALSE 51119
// begin InitHc ;
50759: NOP4
// if not f then
50763: NOP4
50767: NOT
50768: IFFALSE 50857
// begin PrepareHuman ( false , i , skill ) ;
50770: LD_INT 0
50772: PPUSH
50773: NOP4
50777: PPUSH
50778: NOP4
50782: PPUSH
50783: NOP4
// un := CreateHuman ;
50787: NOP4
50791: PUSH
50792: NOP4
50796: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50797: NOP4
50801: PUSH
50802: NOP4
50806: PPUSH
50807: LD_INT 1
50809: PPUSH
50810: NOP4
50814: PPUSH
50815: NOP4
50819: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50820: NOP4
50824: PPUSH
50825: NOP4
50829: PPUSH
50830: NOP4
50834: PPUSH
50835: NOP4
50839: PPUSH
50840: NOP4
50844: PPUSH
50845: LD_INT 10
50847: PPUSH
50848: LD_INT 0
50850: PPUSH
50851: NOP4
// continue ;
50855: GO 50756
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50857: NOP4
50861: PUSH
50862: LD_INT 1
50864: ARRAY
50865: PPUSH
50866: NOP4
50870: PUSH
50871: NOP4
50875: PUSH
50876: LD_INT 1
50878: ARRAY
50879: PPUSH
50880: NOP4
50884: PUSH
50885: LD_INT 32
50887: PUSH
50888: LD_INT 31
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: IN
50895: AND
50896: PUSH
50897: NOP4
50901: PUSH
50902: LD_INT 1
50904: ARRAY
50905: PPUSH
50906: NOP4
50910: PUSH
50911: LD_INT 6
50913: EQUAL
50914: OR
50915: IFFALSE 50935
// f := Delete ( f , 1 ) ;
50917: NOP4
50921: PUSH
50922: NOP4
50926: PPUSH
50927: LD_INT 1
50929: PPUSH
50930: NOP4
50934: ST_TO_ADDR
// if not f then
50935: NOP4
50939: NOT
50940: IFFALSE 50958
// begin x := x + 2 ;
50942: NOP4
50946: PUSH
50947: NOP4
50951: PUSH
50952: LD_INT 2
50954: PLUS
50955: ST_TO_ADDR
// continue ;
50956: GO 50756
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50958: NOP4
50962: PUSH
50963: LD_INT 1
50965: ARRAY
50966: PPUSH
50967: NOP4
50971: PUSH
50972: LD_INT 5
50974: EQUAL
50975: IFFALSE 51049
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50977: NOP4
50981: PUSH
50982: LD_INT 1
50984: ARRAY
50985: PPUSH
50986: NOP4
50990: PUSH
50991: LD_INT 3
50993: LESS
50994: IFFALSE 51030
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50996: LD_INT 0
50998: PPUSH
50999: LD_INT 5
51001: PUSH
51002: LD_INT 8
51004: PUSH
51005: LD_INT 9
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: LIST
51012: PUSH
51013: NOP4
51017: ARRAY
51018: PPUSH
51019: NOP4
51023: PPUSH
51024: NOP4
51028: GO 51047
// PrepareHuman ( false , i , skill ) ;
51030: LD_INT 0
51032: PPUSH
51033: NOP4
51037: PPUSH
51038: NOP4
51042: PPUSH
51043: NOP4
// end else
51047: GO 51066
// PrepareHuman ( false , i , skill ) ;
51049: LD_INT 0
51051: PPUSH
51052: NOP4
51056: PPUSH
51057: NOP4
51061: PPUSH
51062: NOP4
// un := CreateHuman ;
51066: NOP4
51070: PUSH
51071: NOP4
51075: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51076: NOP4
51080: PUSH
51081: NOP4
51085: PPUSH
51086: LD_INT 1
51088: PPUSH
51089: NOP4
51093: PPUSH
51094: NOP4
51098: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51099: NOP4
51103: PPUSH
51104: NOP4
51108: PUSH
51109: LD_INT 1
51111: ARRAY
51112: PPUSH
51113: NOP4
// end ;
51117: GO 50756
51119: POP
51120: POP
// end ;
51121: GO 50058
51123: POP
51124: POP
// result := result ^ buildings ;
51125: NOP4
51129: PUSH
51130: NOP4
51134: PUSH
51135: NOP4
51139: ADD
51140: ST_TO_ADDR
// end else
51141: GO 51284
// begin for i = 1 to personel do
51143: NOP4
51147: PUSH
51148: DOUBLE
51149: LD_INT 1
51151: DEC
51152: ST_TO_ADDR
51153: NOP4
51157: PUSH
51158: FOR_TO
51159: IFFALSE 51282
// begin if i > 4 then
51161: NOP4
51165: PUSH
51166: LD_INT 4
51168: GREATER
51169: IFFALSE 51173
// break ;
51171: GO 51282
// x := personel [ i ] ;
51173: NOP4
51177: PUSH
51178: NOP4
51182: PUSH
51183: NOP4
51187: ARRAY
51188: ST_TO_ADDR
// if x = - 1 then
51189: NOP4
51193: PUSH
51194: LD_INT 1
51196: NEG
51197: EQUAL
51198: IFFALSE 51202
// continue ;
51200: GO 51158
// PrepareHuman ( false , i , skill ) ;
51202: LD_INT 0
51204: PPUSH
51205: NOP4
51209: PPUSH
51210: NOP4
51214: PPUSH
51215: NOP4
// un := CreateHuman ;
51219: NOP4
51223: PUSH
51224: NOP4
51228: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51229: NOP4
51233: PPUSH
51234: NOP4
51238: PPUSH
51239: NOP4
51243: PPUSH
51244: NOP4
51248: PPUSH
51249: NOP4
51253: PPUSH
51254: LD_INT 10
51256: PPUSH
51257: LD_INT 0
51259: PPUSH
51260: NOP4
// result := result ^ un ;
51264: NOP4
51268: PUSH
51269: NOP4
51273: PUSH
51274: NOP4
51278: ADD
51279: ST_TO_ADDR
// end ;
51280: GO 51158
51282: POP
51283: POP
// end ; end ;
51284: LD_VAR 0 7
51288: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51289: LD_INT 0
51291: PPUSH
51292: PPUSH
51293: PPUSH
51294: PPUSH
51295: PPUSH
51296: PPUSH
51297: PPUSH
51298: PPUSH
51299: PPUSH
51300: PPUSH
51301: PPUSH
51302: PPUSH
51303: PPUSH
51304: PPUSH
51305: PPUSH
51306: PPUSH
// result := false ;
51307: NOP4
51311: PUSH
51312: LD_INT 0
51314: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51315: NOP4
51319: NOT
51320: PUSH
51321: NOP4
51325: PPUSH
51326: NOP4
51330: PUSH
51331: LD_INT 32
51333: PUSH
51334: LD_INT 33
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: IN
51341: NOT
51342: OR
51343: IFFALSE 51347
// exit ;
51345: GO 52486
// nat := GetNation ( tower ) ;
51347: NOP4
51351: PUSH
51352: NOP4
51356: PPUSH
51357: NOP4
51361: ST_TO_ADDR
// side := GetSide ( tower ) ;
51362: NOP4
51366: PUSH
51367: NOP4
51371: PPUSH
51372: NOP4
51376: ST_TO_ADDR
// x := GetX ( tower ) ;
51377: NOP4
51381: PUSH
51382: NOP4
51386: PPUSH
51387: NOP4
51391: ST_TO_ADDR
// y := GetY ( tower ) ;
51392: NOP4
51396: PUSH
51397: NOP4
51401: PPUSH
51402: NOP4
51406: ST_TO_ADDR
// if not x or not y then
51407: NOP4
51411: NOT
51412: PUSH
51413: NOP4
51417: NOT
51418: OR
51419: IFFALSE 51423
// exit ;
51421: GO 52486
// weapon := 0 ;
51423: NOP4
51427: PUSH
51428: LD_INT 0
51430: ST_TO_ADDR
// fac_list := [ ] ;
51431: NOP4
51435: PUSH
51436: EMPTY
51437: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51438: NOP4
51442: PUSH
51443: NOP4
51447: PPUSH
51448: NOP4
51452: PPUSH
51453: NOP4
51457: PPUSH
51458: LD_INT 0
51460: PPUSH
51461: NOP4
51465: PPUSH
51466: LD_INT 30
51468: PUSH
51469: LD_INT 3
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PPUSH
51476: NOP4
51480: ST_TO_ADDR
// if not factories then
51481: NOP4
51485: NOT
51486: IFFALSE 51490
// exit ;
51488: GO 52486
// for i in factories do
51490: NOP4
51494: PUSH
51495: NOP4
51499: PUSH
51500: FOR_IN
51501: IFFALSE 51526
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51503: NOP4
51507: PUSH
51508: NOP4
51512: PUSH
51513: NOP4
51517: PPUSH
51518: NOP4
51522: UNION
51523: ST_TO_ADDR
51524: GO 51500
51526: POP
51527: POP
// if not fac_list then
51528: NOP4
51532: NOT
51533: IFFALSE 51537
// exit ;
51535: GO 52486
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51537: NOP4
51541: PUSH
51542: LD_INT 4
51544: PUSH
51545: LD_INT 5
51547: PUSH
51548: LD_INT 9
51550: PUSH
51551: LD_INT 10
51553: PUSH
51554: LD_INT 6
51556: PUSH
51557: LD_INT 7
51559: PUSH
51560: LD_INT 11
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 27
51574: PUSH
51575: LD_INT 28
51577: PUSH
51578: LD_INT 26
51580: PUSH
51581: LD_INT 30
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 43
51592: PUSH
51593: LD_INT 44
51595: PUSH
51596: LD_INT 46
51598: PUSH
51599: LD_INT 45
51601: PUSH
51602: LD_INT 47
51604: PUSH
51605: LD_INT 49
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: LIST
51620: PUSH
51621: NOP4
51625: ARRAY
51626: ST_TO_ADDR
// for i in list do
51627: NOP4
51631: PUSH
51632: NOP4
51636: PUSH
51637: FOR_IN
51638: IFFALSE 51671
// if not i in fac_list then
51640: NOP4
51644: PUSH
51645: NOP4
51649: IN
51650: NOT
51651: IFFALSE 51669
// list := list diff i ;
51653: NOP4
51657: PUSH
51658: NOP4
51662: PUSH
51663: NOP4
51667: DIFF
51668: ST_TO_ADDR
51669: GO 51637
51671: POP
51672: POP
// if not list then
51673: NOP4
51677: NOT
51678: IFFALSE 51682
// exit ;
51680: GO 52486
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51682: NOP4
51686: PUSH
51687: LD_INT 3
51689: EQUAL
51690: PUSH
51691: LD_INT 49
51693: PUSH
51694: NOP4
51698: IN
51699: AND
51700: PUSH
51701: LD_INT 31
51703: PPUSH
51704: NOP4
51708: PPUSH
51709: NOP4
51713: PUSH
51714: LD_INT 2
51716: EQUAL
51717: AND
51718: IFFALSE 51778
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51720: LD_INT 22
51722: PUSH
51723: NOP4
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 35
51734: PUSH
51735: LD_INT 49
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 91
51744: PUSH
51745: NOP4
51749: PUSH
51750: LD_INT 10
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: LIST
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: LIST
51762: PPUSH
51763: NOP4
51767: NOT
51768: IFFALSE 51778
// weapon := ru_time_lapser ;
51770: NOP4
51774: PUSH
51775: LD_INT 49
51777: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51778: NOP4
51782: PUSH
51783: LD_INT 1
51785: PUSH
51786: LD_INT 2
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: IN
51793: PUSH
51794: LD_INT 11
51796: PUSH
51797: NOP4
51801: IN
51802: PUSH
51803: LD_INT 30
51805: PUSH
51806: NOP4
51810: IN
51811: OR
51812: AND
51813: PUSH
51814: LD_INT 6
51816: PPUSH
51817: NOP4
51821: PPUSH
51822: NOP4
51826: PUSH
51827: LD_INT 2
51829: EQUAL
51830: AND
51831: IFFALSE 51996
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51833: LD_INT 22
51835: PUSH
51836: NOP4
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 2
51847: PUSH
51848: LD_INT 35
51850: PUSH
51851: LD_INT 11
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 35
51860: PUSH
51861: LD_INT 30
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 91
51875: PUSH
51876: NOP4
51880: PUSH
51881: LD_INT 18
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: LIST
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: LIST
51893: PPUSH
51894: NOP4
51898: NOT
51899: PUSH
51900: LD_INT 22
51902: PUSH
51903: NOP4
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: LD_INT 30
51917: PUSH
51918: LD_INT 32
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 30
51927: PUSH
51928: LD_INT 33
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 91
51942: PUSH
51943: NOP4
51947: PUSH
51948: LD_INT 12
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: LIST
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: LIST
51960: PUSH
51961: EMPTY
51962: LIST
51963: PPUSH
51964: NOP4
51968: PUSH
51969: LD_INT 2
51971: GREATER
51972: AND
51973: IFFALSE 51996
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51975: NOP4
51979: PUSH
51980: LD_INT 11
51982: PUSH
51983: LD_INT 30
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: NOP4
51994: ARRAY
51995: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51996: NOP4
52000: NOT
52001: PUSH
52002: LD_INT 40
52004: PPUSH
52005: NOP4
52009: PPUSH
52010: NOP4
52014: PUSH
52015: LD_INT 2
52017: EQUAL
52018: AND
52019: PUSH
52020: LD_INT 7
52022: PUSH
52023: NOP4
52027: IN
52028: PUSH
52029: LD_INT 28
52031: PUSH
52032: NOP4
52036: IN
52037: OR
52038: PUSH
52039: LD_INT 45
52041: PUSH
52042: NOP4
52046: IN
52047: OR
52048: AND
52049: IFFALSE 52303
// begin hex := GetHexInfo ( x , y ) ;
52051: NOP4
52055: PUSH
52056: NOP4
52060: PPUSH
52061: NOP4
52065: PPUSH
52066: NOP4
52070: ST_TO_ADDR
// if hex [ 1 ] then
52071: NOP4
52075: PUSH
52076: LD_INT 1
52078: ARRAY
52079: IFFALSE 52083
// exit ;
52081: GO 52486
// height := hex [ 2 ] ;
52083: NOP4
52087: PUSH
52088: NOP4
52092: PUSH
52093: LD_INT 2
52095: ARRAY
52096: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52097: NOP4
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: LD_INT 2
52107: PUSH
52108: LD_INT 3
52110: PUSH
52111: LD_INT 5
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: ST_TO_ADDR
// for i in tmp do
52120: NOP4
52124: PUSH
52125: NOP4
52129: PUSH
52130: FOR_IN
52131: IFFALSE 52301
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52133: NOP4
52137: PUSH
52138: NOP4
52142: PPUSH
52143: NOP4
52147: PPUSH
52148: LD_INT 5
52150: PPUSH
52151: NOP4
52155: PUSH
52156: NOP4
52160: PPUSH
52161: NOP4
52165: PPUSH
52166: LD_INT 5
52168: PPUSH
52169: NOP4
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52178: NOP4
52182: PUSH
52183: LD_INT 1
52185: ARRAY
52186: PPUSH
52187: NOP4
52191: PUSH
52192: LD_INT 2
52194: ARRAY
52195: PPUSH
52196: NOP4
52200: IFFALSE 52299
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52202: NOP4
52206: PUSH
52207: NOP4
52211: PUSH
52212: LD_INT 1
52214: ARRAY
52215: PPUSH
52216: NOP4
52220: PUSH
52221: LD_INT 2
52223: ARRAY
52224: PPUSH
52225: NOP4
52229: ST_TO_ADDR
// if hex [ 1 ] then
52230: NOP4
52234: PUSH
52235: LD_INT 1
52237: ARRAY
52238: IFFALSE 52242
// continue ;
52240: GO 52130
// h := hex [ 2 ] ;
52242: NOP4
52246: PUSH
52247: NOP4
52251: PUSH
52252: LD_INT 2
52254: ARRAY
52255: ST_TO_ADDR
// if h + 7 < height then
52256: NOP4
52260: PUSH
52261: LD_INT 7
52263: PLUS
52264: PUSH
52265: NOP4
52269: LESS
52270: IFFALSE 52299
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52272: NOP4
52276: PUSH
52277: LD_INT 7
52279: PUSH
52280: LD_INT 28
52282: PUSH
52283: LD_INT 45
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: LIST
52290: PUSH
52291: NOP4
52295: ARRAY
52296: ST_TO_ADDR
// break ;
52297: GO 52301
// end ; end ; end ;
52299: GO 52130
52301: POP
52302: POP
// end ; if not weapon then
52303: NOP4
52307: NOT
52308: IFFALSE 52368
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52310: NOP4
52314: PUSH
52315: NOP4
52319: PUSH
52320: LD_INT 11
52322: PUSH
52323: LD_INT 30
52325: PUSH
52326: LD_INT 49
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: LIST
52333: DIFF
52334: ST_TO_ADDR
// if not list then
52335: NOP4
52339: NOT
52340: IFFALSE 52344
// exit ;
52342: GO 52486
// weapon := list [ rand ( 1 , list ) ] ;
52344: NOP4
52348: PUSH
52349: NOP4
52353: PUSH
52354: LD_INT 1
52356: PPUSH
52357: NOP4
52361: PPUSH
52362: NOP4
52366: ARRAY
52367: ST_TO_ADDR
// end ; if weapon then
52368: NOP4
52372: IFFALSE 52486
// begin tmp := CostOfWeapon ( weapon ) ;
52374: NOP4
52378: PUSH
52379: NOP4
52383: PPUSH
52384: NOP4
52388: ST_TO_ADDR
// j := GetBase ( tower ) ;
52389: NOP4
52393: PUSH
52394: NOP4
52398: PPUSH
52399: NOP4
52403: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52404: NOP4
52408: PPUSH
52409: LD_INT 1
52411: PPUSH
52412: NOP4
52416: PUSH
52417: NOP4
52421: PUSH
52422: LD_INT 1
52424: ARRAY
52425: GREATEREQUAL
52426: PUSH
52427: NOP4
52431: PPUSH
52432: LD_INT 2
52434: PPUSH
52435: NOP4
52439: PUSH
52440: NOP4
52444: PUSH
52445: LD_INT 2
52447: ARRAY
52448: GREATEREQUAL
52449: AND
52450: PUSH
52451: NOP4
52455: PPUSH
52456: LD_INT 3
52458: PPUSH
52459: NOP4
52463: PUSH
52464: NOP4
52468: PUSH
52469: LD_INT 3
52471: ARRAY
52472: GREATEREQUAL
52473: AND
52474: IFFALSE 52486
// result := weapon ;
52476: NOP4
52480: PUSH
52481: NOP4
52485: ST_TO_ADDR
// end ; end ;
52486: LD_VAR 0 3
52490: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52491: LD_INT 0
52493: PPUSH
52494: PPUSH
// result := true ;
52495: NOP4
52499: PUSH
52500: LD_INT 1
52502: ST_TO_ADDR
// if array1 = array2 then
52503: NOP4
52507: PUSH
52508: NOP4
52512: EQUAL
52513: IFFALSE 52573
// begin for i = 1 to array1 do
52515: NOP4
52519: PUSH
52520: DOUBLE
52521: LD_INT 1
52523: DEC
52524: ST_TO_ADDR
52525: NOP4
52529: PUSH
52530: FOR_TO
52531: IFFALSE 52569
// if array1 [ i ] <> array2 [ i ] then
52533: NOP4
52537: PUSH
52538: NOP4
52542: ARRAY
52543: PUSH
52544: NOP4
52548: PUSH
52549: NOP4
52553: ARRAY
52554: NONEQUAL
52555: IFFALSE 52567
// begin result := false ;
52557: NOP4
52561: PUSH
52562: LD_INT 0
52564: ST_TO_ADDR
// break ;
52565: GO 52569
// end ;
52567: GO 52530
52569: POP
52570: POP
// end else
52571: GO 52581
// result := false ;
52573: NOP4
52577: PUSH
52578: LD_INT 0
52580: ST_TO_ADDR
// end ;
52581: LD_VAR 0 3
52585: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52586: LD_INT 0
52588: PPUSH
52589: PPUSH
// if not array1 or not array2 then
52590: NOP4
52594: NOT
52595: PUSH
52596: NOP4
52600: NOT
52601: OR
52602: IFFALSE 52606
// exit ;
52604: GO 52670
// result := true ;
52606: NOP4
52610: PUSH
52611: LD_INT 1
52613: ST_TO_ADDR
// for i = 1 to array1 do
52614: NOP4
52618: PUSH
52619: DOUBLE
52620: LD_INT 1
52622: DEC
52623: ST_TO_ADDR
52624: NOP4
52628: PUSH
52629: FOR_TO
52630: IFFALSE 52668
// if array1 [ i ] <> array2 [ i ] then
52632: NOP4
52636: PUSH
52637: NOP4
52641: ARRAY
52642: PUSH
52643: NOP4
52647: PUSH
52648: NOP4
52652: ARRAY
52653: NONEQUAL
52654: IFFALSE 52666
// begin result := false ;
52656: NOP4
52660: PUSH
52661: LD_INT 0
52663: ST_TO_ADDR
// break ;
52664: GO 52668
// end ;
52666: GO 52629
52668: POP
52669: POP
// end ;
52670: LD_VAR 0 3
52674: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52675: LD_INT 0
52677: PPUSH
52678: PPUSH
52679: PPUSH
// pom := GetBase ( fac ) ;
52680: NOP4
52684: PUSH
52685: NOP4
52689: PPUSH
52690: NOP4
52694: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52695: NOP4
52699: PUSH
52700: NOP4
52704: PUSH
52705: LD_INT 1
52707: ARRAY
52708: PPUSH
52709: NOP4
52713: PUSH
52714: LD_INT 2
52716: ARRAY
52717: PPUSH
52718: NOP4
52722: PUSH
52723: LD_INT 3
52725: ARRAY
52726: PPUSH
52727: NOP4
52731: PUSH
52732: LD_INT 4
52734: ARRAY
52735: PPUSH
52736: NOP4
52740: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52741: NOP4
52745: PUSH
52746: NOP4
52750: PPUSH
52751: LD_INT 1
52753: PPUSH
52754: NOP4
52758: PUSH
52759: NOP4
52763: PUSH
52764: LD_INT 1
52766: ARRAY
52767: GREATEREQUAL
52768: PUSH
52769: NOP4
52773: PPUSH
52774: LD_INT 2
52776: PPUSH
52777: NOP4
52781: PUSH
52782: NOP4
52786: PUSH
52787: LD_INT 2
52789: ARRAY
52790: GREATEREQUAL
52791: AND
52792: PUSH
52793: NOP4
52797: PPUSH
52798: LD_INT 3
52800: PPUSH
52801: NOP4
52805: PUSH
52806: NOP4
52810: PUSH
52811: LD_INT 3
52813: ARRAY
52814: GREATEREQUAL
52815: AND
52816: ST_TO_ADDR
// end ;
52817: LD_VAR 0 3
52821: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52822: LD_INT 0
52824: PPUSH
52825: PPUSH
52826: PPUSH
52827: PPUSH
// pom := GetBase ( building ) ;
52828: NOP4
52832: PUSH
52833: NOP4
52837: PPUSH
52838: NOP4
52842: ST_TO_ADDR
// if not pom then
52843: NOP4
52847: NOT
52848: IFFALSE 52852
// exit ;
52850: GO 53022
// btype := GetBType ( building ) ;
52852: NOP4
52856: PUSH
52857: NOP4
52861: PPUSH
52862: NOP4
52866: ST_TO_ADDR
// if btype = b_armoury then
52867: NOP4
52871: PUSH
52872: LD_INT 4
52874: EQUAL
52875: IFFALSE 52885
// btype := b_barracks ;
52877: NOP4
52881: PUSH
52882: LD_INT 5
52884: ST_TO_ADDR
// if btype = b_depot then
52885: NOP4
52889: PUSH
52890: LD_INT 0
52892: EQUAL
52893: IFFALSE 52903
// btype := b_warehouse ;
52895: NOP4
52899: PUSH
52900: LD_INT 1
52902: ST_TO_ADDR
// if btype = b_workshop then
52903: NOP4
52907: PUSH
52908: LD_INT 2
52910: EQUAL
52911: IFFALSE 52921
// btype := b_factory ;
52913: NOP4
52917: PUSH
52918: LD_INT 3
52920: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52921: NOP4
52925: PUSH
52926: NOP4
52930: PPUSH
52931: NOP4
52935: PPUSH
52936: NOP4
52940: PPUSH
52941: NOP4
52945: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52946: NOP4
52950: PUSH
52951: NOP4
52955: PPUSH
52956: LD_INT 1
52958: PPUSH
52959: NOP4
52963: PUSH
52964: NOP4
52968: PUSH
52969: LD_INT 1
52971: ARRAY
52972: GREATEREQUAL
52973: PUSH
52974: NOP4
52978: PPUSH
52979: LD_INT 2
52981: PPUSH
52982: NOP4
52986: PUSH
52987: NOP4
52991: PUSH
52992: LD_INT 2
52994: ARRAY
52995: GREATEREQUAL
52996: AND
52997: PUSH
52998: NOP4
53002: PPUSH
53003: LD_INT 3
53005: PPUSH
53006: NOP4
53010: PUSH
53011: NOP4
53015: PUSH
53016: LD_INT 3
53018: ARRAY
53019: GREATEREQUAL
53020: AND
53021: ST_TO_ADDR
// end ;
53022: LD_VAR 0 2
53026: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53027: LD_INT 0
53029: PPUSH
53030: PPUSH
53031: PPUSH
// pom := GetBase ( building ) ;
53032: NOP4
53036: PUSH
53037: NOP4
53041: PPUSH
53042: NOP4
53046: ST_TO_ADDR
// if not pom then
53047: NOP4
53051: NOT
53052: IFFALSE 53056
// exit ;
53054: GO 53157
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53056: NOP4
53060: PUSH
53061: NOP4
53065: PPUSH
53066: NOP4
53070: PPUSH
53071: NOP4
53075: PPUSH
53076: NOP4
53080: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53081: NOP4
53085: PUSH
53086: NOP4
53090: PPUSH
53091: LD_INT 1
53093: PPUSH
53094: NOP4
53098: PUSH
53099: NOP4
53103: PUSH
53104: LD_INT 1
53106: ARRAY
53107: GREATEREQUAL
53108: PUSH
53109: NOP4
53113: PPUSH
53114: LD_INT 2
53116: PPUSH
53117: NOP4
53121: PUSH
53122: NOP4
53126: PUSH
53127: LD_INT 2
53129: ARRAY
53130: GREATEREQUAL
53131: AND
53132: PUSH
53133: NOP4
53137: PPUSH
53138: LD_INT 3
53140: PPUSH
53141: NOP4
53145: PUSH
53146: NOP4
53150: PUSH
53151: LD_INT 3
53153: ARRAY
53154: GREATEREQUAL
53155: AND
53156: ST_TO_ADDR
// end ;
53157: LD_VAR 0 3
53161: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53162: LD_INT 0
53164: PPUSH
53165: PPUSH
53166: PPUSH
53167: PPUSH
53168: PPUSH
53169: PPUSH
53170: PPUSH
53171: PPUSH
53172: PPUSH
53173: PPUSH
53174: PPUSH
// result := false ;
53175: NOP4
53179: PUSH
53180: LD_INT 0
53182: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53183: NOP4
53187: NOT
53188: PUSH
53189: NOP4
53193: NOT
53194: OR
53195: PUSH
53196: NOP4
53200: NOT
53201: OR
53202: PUSH
53203: NOP4
53207: NOT
53208: OR
53209: IFFALSE 53213
// exit ;
53211: GO 54027
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53213: NOP4
53217: PUSH
53218: NOP4
53222: PPUSH
53223: NOP4
53227: PPUSH
53228: NOP4
53232: PPUSH
53233: NOP4
53237: PPUSH
53238: NOP4
53242: PUSH
53243: LD_INT 1
53245: ARRAY
53246: PPUSH
53247: NOP4
53251: PPUSH
53252: LD_INT 0
53254: PPUSH
53255: NOP4
53259: ST_TO_ADDR
// if not hexes then
53260: NOP4
53264: NOT
53265: IFFALSE 53269
// exit ;
53267: GO 54027
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53269: NOP4
53273: PUSH
53274: NOP4
53278: PPUSH
53279: LD_INT 22
53281: PUSH
53282: NOP4
53286: PPUSH
53287: NOP4
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 2
53298: PUSH
53299: LD_INT 30
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 30
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: LIST
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PPUSH
53328: NOP4
53332: ST_TO_ADDR
// for i = 1 to hexes do
53333: NOP4
53337: PUSH
53338: DOUBLE
53339: LD_INT 1
53341: DEC
53342: ST_TO_ADDR
53343: NOP4
53347: PUSH
53348: FOR_TO
53349: IFFALSE 54025
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53351: NOP4
53355: PUSH
53356: NOP4
53360: PUSH
53361: NOP4
53365: ARRAY
53366: PUSH
53367: LD_INT 1
53369: ARRAY
53370: PPUSH
53371: NOP4
53375: PUSH
53376: NOP4
53380: ARRAY
53381: PUSH
53382: LD_INT 2
53384: ARRAY
53385: PPUSH
53386: NOP4
53390: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53391: NOP4
53395: PUSH
53396: NOP4
53400: ARRAY
53401: PUSH
53402: LD_INT 1
53404: ARRAY
53405: PPUSH
53406: NOP4
53410: PUSH
53411: NOP4
53415: ARRAY
53416: PUSH
53417: LD_INT 2
53419: ARRAY
53420: PPUSH
53421: NOP4
53425: PUSH
53426: NOP4
53430: PUSH
53431: NOP4
53435: ARRAY
53436: PUSH
53437: LD_INT 1
53439: ARRAY
53440: PPUSH
53441: NOP4
53445: PUSH
53446: NOP4
53450: ARRAY
53451: PUSH
53452: LD_INT 2
53454: ARRAY
53455: PPUSH
53456: NOP4
53460: NOT
53461: OR
53462: PUSH
53463: NOP4
53467: PPUSH
53468: NOP4
53472: PUSH
53473: LD_INT 3
53475: EQUAL
53476: OR
53477: IFFALSE 53483
// exit ;
53479: POP
53480: POP
53481: GO 54027
// if not tmp then
53483: NOP4
53487: NOT
53488: IFFALSE 53492
// continue ;
53490: GO 53348
// result := true ;
53492: NOP4
53496: PUSH
53497: LD_INT 1
53499: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53500: NOP4
53504: PUSH
53505: NOP4
53509: PPUSH
53510: NOP4
53514: PUSH
53515: LD_INT 2
53517: EQUAL
53518: AND
53519: PUSH
53520: NOP4
53524: PPUSH
53525: NOP4
53529: PUSH
53530: LD_INT 1
53532: EQUAL
53533: AND
53534: IFFALSE 53698
// begin if IsDrivenBy ( tmp ) then
53536: NOP4
53540: PPUSH
53541: NOP4
53545: IFFALSE 53549
// continue ;
53547: GO 53348
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53549: NOP4
53553: PPUSH
53554: LD_INT 3
53556: PUSH
53557: LD_INT 60
53559: PUSH
53560: EMPTY
53561: LIST
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 3
53569: PUSH
53570: LD_INT 55
53572: PUSH
53573: EMPTY
53574: LIST
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PPUSH
53584: NOP4
53588: IFFALSE 53696
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53590: NOP4
53594: PUSH
53595: NOP4
53599: PPUSH
53600: LD_INT 3
53602: PUSH
53603: LD_INT 60
53605: PUSH
53606: EMPTY
53607: LIST
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 3
53615: PUSH
53616: LD_INT 55
53618: PUSH
53619: EMPTY
53620: LIST
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PPUSH
53630: NOP4
53634: PUSH
53635: LD_INT 1
53637: ARRAY
53638: ST_TO_ADDR
// if IsInUnit ( driver ) then
53639: NOP4
53643: PPUSH
53644: NOP4
53648: IFFALSE 53659
// ComExit ( driver ) ;
53650: NOP4
53654: PPUSH
53655: NOP4
// AddComEnterUnit ( driver , tmp ) ;
53659: NOP4
53663: PPUSH
53664: NOP4
53668: PPUSH
53669: NOP4
// AddComMoveToArea ( driver , parking ) ;
53673: NOP4
53677: PPUSH
53678: NOP4
53682: PPUSH
53683: NOP4
// AddComExitVehicle ( driver ) ;
53687: NOP4
53691: PPUSH
53692: NOP4
// end ; continue ;
53696: GO 53348
// end ; if not cleaners or not tmp in cleaners then
53698: NOP4
53702: NOT
53703: PUSH
53704: NOP4
53708: PUSH
53709: NOP4
53713: IN
53714: NOT
53715: OR
53716: IFFALSE 54023
// begin if dep then
53718: NOP4
53722: IFFALSE 53858
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53724: NOP4
53728: PUSH
53729: NOP4
53733: PUSH
53734: LD_INT 1
53736: ARRAY
53737: PPUSH
53738: NOP4
53742: PPUSH
53743: NOP4
53747: PUSH
53748: LD_INT 1
53750: ARRAY
53751: PPUSH
53752: NOP4
53756: PPUSH
53757: LD_INT 5
53759: PPUSH
53760: NOP4
53764: PUSH
53765: NOP4
53769: PUSH
53770: LD_INT 1
53772: ARRAY
53773: PPUSH
53774: NOP4
53778: PPUSH
53779: NOP4
53783: PUSH
53784: LD_INT 1
53786: ARRAY
53787: PPUSH
53788: NOP4
53792: PPUSH
53793: LD_INT 5
53795: PPUSH
53796: NOP4
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53805: NOP4
53809: PUSH
53810: LD_INT 1
53812: ARRAY
53813: PPUSH
53814: NOP4
53818: PUSH
53819: LD_INT 2
53821: ARRAY
53822: PPUSH
53823: NOP4
53827: IFFALSE 53858
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53829: NOP4
53833: PPUSH
53834: NOP4
53838: PUSH
53839: LD_INT 1
53841: ARRAY
53842: PPUSH
53843: NOP4
53847: PUSH
53848: LD_INT 2
53850: ARRAY
53851: PPUSH
53852: NOP4
// continue ;
53856: GO 53348
// end ; end ; r := GetDir ( tmp ) ;
53858: NOP4
53862: PUSH
53863: NOP4
53867: PPUSH
53868: NOP4
53872: ST_TO_ADDR
// if r = 5 then
53873: NOP4
53877: PUSH
53878: LD_INT 5
53880: EQUAL
53881: IFFALSE 53891
// r := 0 ;
53883: NOP4
53887: PUSH
53888: LD_INT 0
53890: ST_TO_ADDR
// for j = r to 5 do
53891: NOP4
53895: PUSH
53896: DOUBLE
53897: NOP4
53901: DEC
53902: ST_TO_ADDR
53903: LD_INT 5
53905: PUSH
53906: FOR_TO
53907: IFFALSE 54021
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53909: NOP4
53913: PUSH
53914: NOP4
53918: PPUSH
53919: NOP4
53923: PPUSH
53924: NOP4
53928: PPUSH
53929: LD_INT 2
53931: PPUSH
53932: NOP4
53936: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53937: NOP4
53941: PUSH
53942: NOP4
53946: PPUSH
53947: NOP4
53951: PPUSH
53952: NOP4
53956: PPUSH
53957: LD_INT 2
53959: PPUSH
53960: NOP4
53964: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53965: NOP4
53969: PPUSH
53970: NOP4
53974: PPUSH
53975: NOP4
53979: PUSH
53980: NOP4
53984: PPUSH
53985: NOP4
53989: PPUSH
53990: NOP4
53994: NOT
53995: AND
53996: IFFALSE 54019
// begin ComMoveXY ( tmp , _x , _y ) ;
53998: NOP4
54002: PPUSH
54003: NOP4
54007: PPUSH
54008: NOP4
54012: PPUSH
54013: NOP4
// break ;
54017: GO 54021
// end ; end ;
54019: GO 53906
54021: POP
54022: POP
// end ; end ;
54023: GO 53348
54025: POP
54026: POP
// end ;
54027: LD_VAR 0 8
54031: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
54032: LD_INT 0
54034: PPUSH
54035: PPUSH
54036: PPUSH
54037: PPUSH
54038: PPUSH
54039: PPUSH
54040: PPUSH
54041: PPUSH
54042: PPUSH
54043: PPUSH
// result := false ;
54044: NOP4
54048: PUSH
54049: LD_INT 0
54051: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54052: NOP4
54056: NOT
54057: PUSH
54058: NOP4
54062: PPUSH
54063: NOP4
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: IN
54078: NOT
54079: OR
54080: PUSH
54081: NOP4
54085: NOT
54086: OR
54087: PUSH
54088: NOP4
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: LD_INT 1
54098: PUSH
54099: LD_INT 2
54101: PUSH
54102: LD_INT 3
54104: PUSH
54105: LD_INT 4
54107: PUSH
54108: LD_INT 5
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: IN
54119: NOT
54120: OR
54121: PUSH
54122: NOP4
54126: PPUSH
54127: NOP4
54131: PPUSH
54132: NOP4
54136: NOT
54137: OR
54138: IFFALSE 54142
// exit ;
54140: GO 54859
// pom := GetBase ( depot ) ;
54142: NOP4
54146: PUSH
54147: NOP4
54151: PPUSH
54152: NOP4
54156: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54157: NOP4
54161: PUSH
54162: NOP4
54166: PPUSH
54167: NOP4
54171: PPUSH
54172: NOP4
54176: PPUSH
54177: NOP4
54181: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54182: NOP4
54186: PPUSH
54187: LD_INT 1
54189: PPUSH
54190: NOP4
54194: PUSH
54195: NOP4
54199: PUSH
54200: LD_INT 1
54202: ARRAY
54203: GREATEREQUAL
54204: PUSH
54205: NOP4
54209: PPUSH
54210: LD_INT 2
54212: PPUSH
54213: NOP4
54217: PUSH
54218: NOP4
54222: PUSH
54223: LD_INT 2
54225: ARRAY
54226: GREATEREQUAL
54227: AND
54228: PUSH
54229: NOP4
54233: PPUSH
54234: LD_INT 3
54236: PPUSH
54237: NOP4
54241: PUSH
54242: NOP4
54246: PUSH
54247: LD_INT 3
54249: ARRAY
54250: GREATEREQUAL
54251: AND
54252: NOT
54253: IFFALSE 54257
// exit ;
54255: GO 54859
// if GetBType ( depot ) = b_depot then
54257: NOP4
54261: PPUSH
54262: NOP4
54266: PUSH
54267: LD_INT 0
54269: EQUAL
54270: IFFALSE 54282
// dist := 28 else
54272: NOP4
54276: PUSH
54277: LD_INT 28
54279: ST_TO_ADDR
54280: GO 54290
// dist := 36 ;
54282: NOP4
54286: PUSH
54287: LD_INT 36
54289: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54290: NOP4
54294: PPUSH
54295: NOP4
54299: PPUSH
54300: NOP4
54304: PPUSH
54305: NOP4
54309: PUSH
54310: NOP4
54314: GREATER
54315: IFFALSE 54319
// exit ;
54317: GO 54859
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54319: NOP4
54323: PUSH
54324: NOP4
54328: PPUSH
54329: NOP4
54333: PPUSH
54334: NOP4
54338: PPUSH
54339: NOP4
54343: PPUSH
54344: NOP4
54348: PPUSH
54349: NOP4
54353: PPUSH
54354: LD_INT 0
54356: PPUSH
54357: NOP4
54361: ST_TO_ADDR
// if not hexes then
54362: NOP4
54366: NOT
54367: IFFALSE 54371
// exit ;
54369: GO 54859
// hex := GetHexInfo ( x , y ) ;
54371: NOP4
54375: PUSH
54376: NOP4
54380: PPUSH
54381: NOP4
54385: PPUSH
54386: NOP4
54390: ST_TO_ADDR
// if hex [ 1 ] then
54391: NOP4
54395: PUSH
54396: LD_INT 1
54398: ARRAY
54399: IFFALSE 54403
// exit ;
54401: GO 54859
// height := hex [ 2 ] ;
54403: NOP4
54407: PUSH
54408: NOP4
54412: PUSH
54413: LD_INT 2
54415: ARRAY
54416: ST_TO_ADDR
// for i = 1 to hexes do
54417: NOP4
54421: PUSH
54422: DOUBLE
54423: LD_INT 1
54425: DEC
54426: ST_TO_ADDR
54427: NOP4
54431: PUSH
54432: FOR_TO
54433: IFFALSE 54763
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54435: NOP4
54439: PUSH
54440: NOP4
54444: ARRAY
54445: PUSH
54446: LD_INT 1
54448: ARRAY
54449: PPUSH
54450: NOP4
54454: PUSH
54455: NOP4
54459: ARRAY
54460: PUSH
54461: LD_INT 2
54463: ARRAY
54464: PPUSH
54465: NOP4
54469: NOT
54470: PUSH
54471: NOP4
54475: PUSH
54476: NOP4
54480: ARRAY
54481: PUSH
54482: LD_INT 1
54484: ARRAY
54485: PPUSH
54486: NOP4
54490: PUSH
54491: NOP4
54495: ARRAY
54496: PUSH
54497: LD_INT 2
54499: ARRAY
54500: PPUSH
54501: NOP4
54505: PUSH
54506: LD_INT 0
54508: GREATER
54509: OR
54510: PUSH
54511: NOP4
54515: PUSH
54516: NOP4
54520: ARRAY
54521: PUSH
54522: LD_INT 1
54524: ARRAY
54525: PPUSH
54526: NOP4
54530: PUSH
54531: NOP4
54535: ARRAY
54536: PUSH
54537: LD_INT 2
54539: ARRAY
54540: PPUSH
54541: NOP4
54545: OR
54546: IFFALSE 54552
// exit ;
54548: POP
54549: POP
54550: GO 54859
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54552: NOP4
54556: PUSH
54557: NOP4
54561: PUSH
54562: NOP4
54566: ARRAY
54567: PUSH
54568: LD_INT 1
54570: ARRAY
54571: PPUSH
54572: NOP4
54576: PUSH
54577: NOP4
54581: ARRAY
54582: PUSH
54583: LD_INT 2
54585: ARRAY
54586: PPUSH
54587: NOP4
54591: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54592: NOP4
54596: PUSH
54597: LD_INT 1
54599: ARRAY
54600: PUSH
54601: NOP4
54605: PUSH
54606: LD_INT 2
54608: ARRAY
54609: PUSH
54610: NOP4
54614: PUSH
54615: LD_INT 2
54617: PLUS
54618: GREATER
54619: OR
54620: PUSH
54621: NOP4
54625: PUSH
54626: LD_INT 2
54628: ARRAY
54629: PUSH
54630: NOP4
54634: PUSH
54635: LD_INT 2
54637: MINUS
54638: LESS
54639: OR
54640: PUSH
54641: NOP4
54645: PUSH
54646: LD_INT 3
54648: ARRAY
54649: PUSH
54650: LD_INT 0
54652: PUSH
54653: LD_INT 8
54655: PUSH
54656: LD_INT 9
54658: PUSH
54659: LD_INT 10
54661: PUSH
54662: LD_INT 11
54664: PUSH
54665: LD_INT 12
54667: PUSH
54668: LD_INT 13
54670: PUSH
54671: LD_INT 16
54673: PUSH
54674: LD_INT 17
54676: PUSH
54677: LD_INT 18
54679: PUSH
54680: LD_INT 19
54682: PUSH
54683: LD_INT 20
54685: PUSH
54686: LD_INT 21
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: IN
54704: NOT
54705: OR
54706: PUSH
54707: NOP4
54711: PUSH
54712: LD_INT 5
54714: ARRAY
54715: NOT
54716: OR
54717: PUSH
54718: NOP4
54722: PUSH
54723: LD_INT 6
54725: ARRAY
54726: PUSH
54727: LD_INT 1
54729: PUSH
54730: LD_INT 2
54732: PUSH
54733: LD_INT 7
54735: PUSH
54736: LD_INT 9
54738: PUSH
54739: LD_INT 10
54741: PUSH
54742: LD_INT 11
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: IN
54753: NOT
54754: OR
54755: IFFALSE 54761
// exit ;
54757: POP
54758: POP
54759: GO 54859
// end ;
54761: GO 54432
54763: POP
54764: POP
// side := GetSide ( depot ) ;
54765: NOP4
54769: PUSH
54770: NOP4
54774: PPUSH
54775: NOP4
54779: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54780: NOP4
54784: PPUSH
54785: NOP4
54789: PPUSH
54790: NOP4
54794: PPUSH
54795: LD_INT 20
54797: PPUSH
54798: NOP4
54802: PUSH
54803: LD_INT 4
54805: ARRAY
54806: IFFALSE 54810
// exit ;
54808: GO 54859
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54810: NOP4
54814: PUSH
54815: LD_INT 29
54817: PUSH
54818: LD_INT 30
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: IN
54825: PUSH
54826: NOP4
54830: PPUSH
54831: NOP4
54835: PPUSH
54836: NOP4
54840: PPUSH
54841: NOP4
54845: NOT
54846: AND
54847: IFFALSE 54851
// exit ;
54849: GO 54859
// result := true ;
54851: NOP4
54855: PUSH
54856: LD_INT 1
54858: ST_TO_ADDR
// end ;
54859: LD_VAR 0 6
54863: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54864: LD_INT 0
54866: PPUSH
54867: PPUSH
54868: PPUSH
54869: PPUSH
54870: PPUSH
54871: PPUSH
54872: PPUSH
54873: PPUSH
54874: PPUSH
54875: PPUSH
54876: PPUSH
54877: PPUSH
54878: PPUSH
54879: PPUSH
54880: PPUSH
54881: PPUSH
54882: PPUSH
54883: PPUSH
54884: PPUSH
54885: PPUSH
54886: PPUSH
54887: PPUSH
54888: PPUSH
54889: PPUSH
54890: PPUSH
54891: PPUSH
54892: PPUSH
54893: PPUSH
54894: PPUSH
54895: PPUSH
54896: PPUSH
54897: PPUSH
54898: PPUSH
54899: PPUSH
54900: PPUSH
54901: PPUSH
54902: PPUSH
54903: PPUSH
54904: PPUSH
54905: PPUSH
54906: PPUSH
54907: PPUSH
54908: PPUSH
54909: PPUSH
54910: PPUSH
54911: PPUSH
54912: PPUSH
54913: PPUSH
54914: PPUSH
54915: PPUSH
54916: PPUSH
54917: PPUSH
54918: PPUSH
54919: PPUSH
54920: PPUSH
54921: PPUSH
54922: PPUSH
54923: PPUSH
// result = [ ] ;
54924: NOP4
54928: PUSH
54929: EMPTY
54930: ST_TO_ADDR
// temp_list = [ ] ;
54931: NOP4
54935: PUSH
54936: EMPTY
54937: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54938: NOP4
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: LD_INT 1
54948: PUSH
54949: LD_INT 2
54951: PUSH
54952: LD_INT 3
54954: PUSH
54955: LD_INT 4
54957: PUSH
54958: LD_INT 5
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: IN
54969: NOT
54970: PUSH
54971: NOP4
54975: PUSH
54976: LD_INT 0
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: IN
54986: PUSH
54987: NOP4
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: LD_INT 2
54997: PUSH
54998: LD_INT 3
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: LIST
55005: IN
55006: NOT
55007: AND
55008: OR
55009: IFFALSE 55013
// exit ;
55011: GO 73404
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55013: NOP4
55017: PUSH
55018: LD_INT 6
55020: PUSH
55021: LD_INT 7
55023: PUSH
55024: LD_INT 8
55026: PUSH
55027: LD_INT 13
55029: PUSH
55030: LD_INT 12
55032: PUSH
55033: LD_INT 15
55035: PUSH
55036: LD_INT 11
55038: PUSH
55039: LD_INT 14
55041: PUSH
55042: LD_INT 10
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: IN
55056: IFFALSE 55066
// btype = b_lab ;
55058: NOP4
55062: PUSH
55063: LD_INT 6
55065: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55066: NOP4
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: LD_INT 2
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: LIST
55084: IN
55085: NOT
55086: PUSH
55087: NOP4
55091: PUSH
55092: LD_INT 0
55094: PUSH
55095: LD_INT 1
55097: PUSH
55098: LD_INT 2
55100: PUSH
55101: LD_INT 3
55103: PUSH
55104: LD_INT 6
55106: PUSH
55107: LD_INT 36
55109: PUSH
55110: LD_INT 4
55112: PUSH
55113: LD_INT 5
55115: PUSH
55116: LD_INT 31
55118: PUSH
55119: LD_INT 32
55121: PUSH
55122: LD_INT 33
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: IN
55138: NOT
55139: PUSH
55140: NOP4
55144: PUSH
55145: LD_INT 1
55147: EQUAL
55148: AND
55149: OR
55150: PUSH
55151: NOP4
55155: PUSH
55156: LD_INT 2
55158: PUSH
55159: LD_INT 3
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: IN
55166: NOT
55167: PUSH
55168: NOP4
55172: PUSH
55173: LD_INT 2
55175: EQUAL
55176: AND
55177: OR
55178: IFFALSE 55188
// mode = 0 ;
55180: NOP4
55184: PUSH
55185: LD_INT 0
55187: ST_TO_ADDR
// case mode of 0 :
55188: NOP4
55192: PUSH
55193: LD_INT 0
55195: DOUBLE
55196: EQUAL
55197: IFTRUE 55201
55199: GO 66654
55201: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55202: NOP4
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 1
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 1
55240: PUSH
55241: LD_INT 1
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 0
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: NEG
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 1
55271: NEG
55272: PUSH
55273: LD_INT 1
55275: NEG
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 1
55283: NEG
55284: PUSH
55285: LD_INT 2
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 0
55295: PUSH
55296: LD_INT 2
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: PUSH
55307: LD_INT 1
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 1
55317: PUSH
55318: LD_INT 2
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: LD_INT 2
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: NEG
55338: PUSH
55339: LD_INT 1
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: LD_INT 3
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: LD_INT 3
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: LD_INT 2
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55395: NOP4
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: LD_INT 1
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 1
55453: NEG
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 1
55464: NEG
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 2
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 2
55497: PUSH
55498: LD_INT 1
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: LD_INT 1
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 2
55518: NEG
55519: PUSH
55520: LD_INT 0
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 2
55529: NEG
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 2
55541: NEG
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 3
55552: NEG
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 3
55563: NEG
55564: PUSH
55565: LD_INT 1
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55591: NOP4
55595: PUSH
55596: LD_INT 0
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 1
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: LD_INT 1
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: LD_INT 1
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 1
55660: NEG
55661: PUSH
55662: LD_INT 1
55664: NEG
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 1
55672: NEG
55673: PUSH
55674: LD_INT 2
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 2
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 2
55694: PUSH
55695: LD_INT 2
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 1
55704: PUSH
55705: LD_INT 2
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 2
55714: NEG
55715: PUSH
55716: LD_INT 1
55718: NEG
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 2
55726: NEG
55727: PUSH
55728: LD_INT 2
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 2
55738: NEG
55739: PUSH
55740: LD_INT 3
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 3
55750: NEG
55751: PUSH
55752: LD_INT 2
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 3
55762: NEG
55763: PUSH
55764: LD_INT 3
55766: NEG
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55790: NOP4
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: LD_INT 0
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 1
55828: PUSH
55829: LD_INT 1
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: LD_INT 1
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: NEG
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: LD_INT 1
55863: NEG
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 1
55871: NEG
55872: PUSH
55873: LD_INT 2
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: LD_INT 2
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: LD_INT 2
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: LD_INT 2
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: LD_INT 1
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: PUSH
55938: LD_INT 3
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: LD_INT 3
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: LD_INT 2
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55986: NOP4
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: LD_INT 1
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: LD_INT 1
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: LD_INT 1
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: LD_INT 0
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 1
56055: NEG
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: LD_INT 1
56070: NEG
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 2
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 2
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: LD_INT 1
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 2
56109: NEG
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 2
56120: NEG
56121: PUSH
56122: LD_INT 1
56124: NEG
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 2
56132: PUSH
56133: LD_INT 1
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 3
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 3
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56179: NOP4
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: LD_INT 1
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 1
56237: NEG
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 1
56260: NEG
56261: PUSH
56262: LD_INT 2
56264: NEG
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 2
56272: PUSH
56273: LD_INT 1
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 2
56282: PUSH
56283: LD_INT 2
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 1
56292: PUSH
56293: LD_INT 2
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 2
56302: NEG
56303: PUSH
56304: LD_INT 1
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 2
56314: NEG
56315: PUSH
56316: LD_INT 2
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 3
56326: PUSH
56327: LD_INT 2
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 3
56336: PUSH
56337: LD_INT 3
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 2
56346: PUSH
56347: LD_INT 3
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56372: NOP4
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: LD_INT 1
56392: NEG
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 1
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: LD_INT 1
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: LD_INT 1
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 1
56441: NEG
56442: PUSH
56443: LD_INT 1
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: LD_INT 2
56457: NEG
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: LD_INT 2
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 2
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 2
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 2
56507: PUSH
56508: LD_INT 2
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 1
56517: PUSH
56518: LD_INT 2
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: LD_INT 2
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 1
56537: NEG
56538: PUSH
56539: LD_INT 1
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 2
56548: NEG
56549: PUSH
56550: LD_INT 0
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 2
56559: NEG
56560: PUSH
56561: LD_INT 1
56563: NEG
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 2
56571: NEG
56572: PUSH
56573: LD_INT 2
56575: NEG
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56602: NOP4
56606: PUSH
56607: LD_INT 0
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: LD_INT 1
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 1
56630: PUSH
56631: LD_INT 0
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 1
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: LD_INT 1
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 1
56660: NEG
56661: PUSH
56662: LD_INT 0
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 1
56671: NEG
56672: PUSH
56673: LD_INT 1
56675: NEG
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 1
56683: NEG
56684: PUSH
56685: LD_INT 2
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: LD_INT 2
56698: NEG
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 2
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 2
56727: PUSH
56728: LD_INT 1
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 2
56737: PUSH
56738: LD_INT 2
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 1
56747: PUSH
56748: LD_INT 2
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 0
56757: PUSH
56758: LD_INT 2
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 1
56767: NEG
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 2
56778: NEG
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 2
56789: NEG
56790: PUSH
56791: LD_INT 1
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 2
56801: NEG
56802: PUSH
56803: LD_INT 2
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56832: NOP4
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 1
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: LD_INT 0
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 1
56901: NEG
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 1
56913: NEG
56914: PUSH
56915: LD_INT 2
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: LD_INT 2
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: PUSH
56937: LD_INT 1
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 2
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 2
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 2
56967: PUSH
56968: LD_INT 2
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 1
56977: PUSH
56978: LD_INT 2
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: LD_INT 2
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 1
56997: NEG
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 2
57008: NEG
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 2
57019: NEG
57020: PUSH
57021: LD_INT 1
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 2
57031: NEG
57032: PUSH
57033: LD_INT 2
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57062: NOP4
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 0
57079: PUSH
57080: LD_INT 1
57082: NEG
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: LD_INT 0
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: LD_INT 1
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: LD_INT 1
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: NEG
57144: PUSH
57145: LD_INT 2
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: LD_INT 2
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: LD_INT 1
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 2
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 2
57187: PUSH
57188: LD_INT 1
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 2
57197: PUSH
57198: LD_INT 2
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: LD_INT 2
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 0
57217: PUSH
57218: LD_INT 2
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 1
57227: NEG
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 2
57238: NEG
57239: PUSH
57240: LD_INT 0
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 2
57249: NEG
57250: PUSH
57251: LD_INT 1
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 2
57261: NEG
57262: PUSH
57263: LD_INT 2
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57292: NOP4
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: LD_INT 1
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 1
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 1
57361: NEG
57362: PUSH
57363: LD_INT 1
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: NEG
57374: PUSH
57375: LD_INT 2
57377: NEG
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: LD_INT 2
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 1
57396: PUSH
57397: LD_INT 1
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 2
57407: PUSH
57408: LD_INT 0
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 2
57417: PUSH
57418: LD_INT 1
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 2
57427: PUSH
57428: LD_INT 2
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 1
57437: PUSH
57438: LD_INT 2
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 0
57447: PUSH
57448: LD_INT 2
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 1
57457: NEG
57458: PUSH
57459: LD_INT 1
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 2
57468: NEG
57469: PUSH
57470: LD_INT 0
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 2
57479: NEG
57480: PUSH
57481: LD_INT 1
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 2
57491: NEG
57492: PUSH
57493: LD_INT 2
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57522: NOP4
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: LD_INT 1
57542: NEG
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: LD_INT 1
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: LD_INT 1
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 1
57580: NEG
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 1
57591: NEG
57592: PUSH
57593: LD_INT 1
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 1
57603: NEG
57604: PUSH
57605: LD_INT 2
57607: NEG
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: LD_INT 2
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: PUSH
57627: LD_INT 1
57629: NEG
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 2
57637: PUSH
57638: LD_INT 0
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 2
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 2
57657: PUSH
57658: LD_INT 2
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 1
57667: PUSH
57668: LD_INT 2
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 0
57677: PUSH
57678: LD_INT 2
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 1
57687: NEG
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 2
57698: NEG
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 2
57709: NEG
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 2
57721: NEG
57722: PUSH
57723: LD_INT 2
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57752: NOP4
57756: PUSH
57757: LD_INT 0
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: LD_INT 1
57772: NEG
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 1
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 1
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: LD_INT 1
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: NEG
57811: PUSH
57812: LD_INT 0
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: LD_INT 1
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: NEG
57834: PUSH
57835: LD_INT 2
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: LD_INT 2
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 1
57856: PUSH
57857: LD_INT 1
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 2
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 2
57877: PUSH
57878: LD_INT 1
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 2
57887: PUSH
57888: LD_INT 2
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: LD_INT 2
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 0
57907: PUSH
57908: LD_INT 2
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 1
57917: NEG
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 2
57928: NEG
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 2
57939: NEG
57940: PUSH
57941: LD_INT 1
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 2
57951: NEG
57952: PUSH
57953: LD_INT 2
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 2
57963: NEG
57964: PUSH
57965: LD_INT 3
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 1
57975: NEG
57976: PUSH
57977: LD_INT 3
57979: NEG
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 1
57987: PUSH
57988: LD_INT 2
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 2
57998: PUSH
57999: LD_INT 1
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58032: NOP4
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 0
58049: PUSH
58050: LD_INT 1
58052: NEG
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: LD_INT 1
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 0
58080: PUSH
58081: LD_INT 1
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 1
58090: NEG
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: LD_INT 1
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: NEG
58114: PUSH
58115: LD_INT 2
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: LD_INT 2
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 1
58136: PUSH
58137: LD_INT 1
58139: NEG
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 2
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 2
58157: PUSH
58158: LD_INT 1
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 2
58167: PUSH
58168: LD_INT 2
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 1
58177: PUSH
58178: LD_INT 2
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 0
58187: PUSH
58188: LD_INT 2
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 1
58197: NEG
58198: PUSH
58199: LD_INT 1
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 2
58208: NEG
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 2
58219: NEG
58220: PUSH
58221: LD_INT 1
58223: NEG
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 2
58231: NEG
58232: PUSH
58233: LD_INT 2
58235: NEG
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 1
58243: PUSH
58244: LD_INT 2
58246: NEG
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 2
58254: PUSH
58255: LD_INT 1
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 3
58265: PUSH
58266: LD_INT 1
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 3
58275: PUSH
58276: LD_INT 2
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58308: NOP4
58312: PUSH
58313: LD_INT 0
58315: PUSH
58316: LD_INT 0
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: LD_INT 1
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 1
58336: PUSH
58337: LD_INT 0
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 1
58346: PUSH
58347: LD_INT 1
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 1
58366: NEG
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 1
58377: NEG
58378: PUSH
58379: LD_INT 1
58381: NEG
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 1
58389: NEG
58390: PUSH
58391: LD_INT 2
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 0
58401: PUSH
58402: LD_INT 2
58404: NEG
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 1
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 2
58423: PUSH
58424: LD_INT 0
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 2
58433: PUSH
58434: LD_INT 1
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 2
58443: PUSH
58444: LD_INT 2
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: PUSH
58454: LD_INT 2
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: LD_INT 2
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: NEG
58474: PUSH
58475: LD_INT 1
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 2
58484: NEG
58485: PUSH
58486: LD_INT 0
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 2
58495: NEG
58496: PUSH
58497: LD_INT 1
58499: NEG
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 2
58507: NEG
58508: PUSH
58509: LD_INT 2
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 3
58519: PUSH
58520: LD_INT 1
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 3
58529: PUSH
58530: LD_INT 2
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 2
58539: PUSH
58540: LD_INT 3
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: PUSH
58550: LD_INT 3
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58582: NOP4
58586: PUSH
58587: LD_INT 0
58589: PUSH
58590: LD_INT 0
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 0
58599: PUSH
58600: LD_INT 1
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 1
58610: PUSH
58611: LD_INT 0
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 1
58620: PUSH
58621: LD_INT 1
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 0
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 1
58640: NEG
58641: PUSH
58642: LD_INT 0
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 1
58651: NEG
58652: PUSH
58653: LD_INT 1
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 1
58663: NEG
58664: PUSH
58665: LD_INT 2
58667: NEG
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: LD_INT 2
58678: NEG
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 1
58686: PUSH
58687: LD_INT 1
58689: NEG
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 2
58697: PUSH
58698: LD_INT 0
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 2
58707: PUSH
58708: LD_INT 1
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 2
58717: PUSH
58718: LD_INT 2
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 1
58727: PUSH
58728: LD_INT 2
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: LD_INT 2
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 1
58747: NEG
58748: PUSH
58749: LD_INT 1
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 2
58758: NEG
58759: PUSH
58760: LD_INT 0
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 2
58769: NEG
58770: PUSH
58771: LD_INT 1
58773: NEG
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 2
58781: NEG
58782: PUSH
58783: LD_INT 2
58785: NEG
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 2
58793: PUSH
58794: LD_INT 3
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: LD_INT 3
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 1
58813: NEG
58814: PUSH
58815: LD_INT 2
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 2
58824: NEG
58825: PUSH
58826: LD_INT 1
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58858: NOP4
58862: PUSH
58863: LD_INT 0
58865: PUSH
58866: LD_INT 0
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 0
58875: PUSH
58876: LD_INT 1
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 1
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 1
58896: PUSH
58897: LD_INT 1
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 0
58906: PUSH
58907: LD_INT 1
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 1
58916: NEG
58917: PUSH
58918: LD_INT 0
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 1
58927: NEG
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 1
58939: NEG
58940: PUSH
58941: LD_INT 2
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 0
58951: PUSH
58952: LD_INT 2
58954: NEG
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 1
58962: PUSH
58963: LD_INT 1
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 2
58973: PUSH
58974: LD_INT 0
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 2
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 2
58993: PUSH
58994: LD_INT 2
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 1
59003: PUSH
59004: LD_INT 2
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: LD_INT 2
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 1
59023: NEG
59024: PUSH
59025: LD_INT 1
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 2
59034: NEG
59035: PUSH
59036: LD_INT 0
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 2
59045: NEG
59046: PUSH
59047: LD_INT 1
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 2
59057: NEG
59058: PUSH
59059: LD_INT 2
59061: NEG
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 1
59069: NEG
59070: PUSH
59071: LD_INT 2
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 2
59080: NEG
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 3
59091: NEG
59092: PUSH
59093: LD_INT 1
59095: NEG
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 3
59103: NEG
59104: PUSH
59105: LD_INT 2
59107: NEG
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59138: NOP4
59142: PUSH
59143: LD_INT 0
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 0
59155: PUSH
59156: LD_INT 1
59158: NEG
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 1
59166: PUSH
59167: LD_INT 0
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 1
59176: PUSH
59177: LD_INT 1
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 0
59186: PUSH
59187: LD_INT 1
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 1
59196: NEG
59197: PUSH
59198: LD_INT 0
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 1
59207: NEG
59208: PUSH
59209: LD_INT 1
59211: NEG
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 1
59219: NEG
59220: PUSH
59221: LD_INT 2
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 0
59231: PUSH
59232: LD_INT 2
59234: NEG
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 1
59242: PUSH
59243: LD_INT 1
59245: NEG
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 2
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 2
59263: PUSH
59264: LD_INT 1
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 2
59273: PUSH
59274: LD_INT 2
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 1
59283: PUSH
59284: LD_INT 2
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: LD_INT 2
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 1
59303: NEG
59304: PUSH
59305: LD_INT 1
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 2
59314: NEG
59315: PUSH
59316: LD_INT 0
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 2
59325: NEG
59326: PUSH
59327: LD_INT 1
59329: NEG
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 2
59337: NEG
59338: PUSH
59339: LD_INT 2
59341: NEG
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 2
59349: NEG
59350: PUSH
59351: LD_INT 3
59353: NEG
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 1
59361: NEG
59362: PUSH
59363: LD_INT 3
59365: NEG
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 3
59373: NEG
59374: PUSH
59375: LD_INT 1
59377: NEG
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 3
59385: NEG
59386: PUSH
59387: LD_INT 2
59389: NEG
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59420: NOP4
59424: PUSH
59425: LD_INT 0
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: LD_INT 1
59440: NEG
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 1
59448: PUSH
59449: LD_INT 0
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 1
59458: PUSH
59459: LD_INT 1
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 0
59468: PUSH
59469: LD_INT 1
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 1
59478: NEG
59479: PUSH
59480: LD_INT 0
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 1
59489: NEG
59490: PUSH
59491: LD_INT 1
59493: NEG
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 1
59501: NEG
59502: PUSH
59503: LD_INT 2
59505: NEG
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 0
59513: PUSH
59514: LD_INT 2
59516: NEG
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 1
59524: PUSH
59525: LD_INT 1
59527: NEG
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 2
59535: PUSH
59536: LD_INT 0
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 2
59545: PUSH
59546: LD_INT 1
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 1
59555: PUSH
59556: LD_INT 2
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 0
59565: PUSH
59566: LD_INT 2
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 1
59575: NEG
59576: PUSH
59577: LD_INT 1
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 2
59586: NEG
59587: PUSH
59588: LD_INT 1
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 2
59598: NEG
59599: PUSH
59600: LD_INT 2
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 2
59610: NEG
59611: PUSH
59612: LD_INT 3
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 2
59622: PUSH
59623: LD_INT 1
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 3
59633: PUSH
59634: LD_INT 1
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 1
59643: PUSH
59644: LD_INT 3
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 1
59653: NEG
59654: PUSH
59655: LD_INT 2
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 3
59664: NEG
59665: PUSH
59666: LD_INT 2
59668: NEG
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59699: NOP4
59703: PUSH
59704: LD_INT 0
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 0
59716: PUSH
59717: LD_INT 1
59719: NEG
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 1
59727: PUSH
59728: LD_INT 0
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 1
59737: PUSH
59738: LD_INT 1
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: LD_INT 1
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 1
59757: NEG
59758: PUSH
59759: LD_INT 0
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 1
59768: NEG
59769: PUSH
59770: LD_INT 1
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 1
59780: NEG
59781: PUSH
59782: LD_INT 2
59784: NEG
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 0
59792: PUSH
59793: LD_INT 2
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 1
59803: PUSH
59804: LD_INT 1
59806: NEG
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 2
59814: PUSH
59815: LD_INT 0
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 2
59824: PUSH
59825: LD_INT 1
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 2
59834: PUSH
59835: LD_INT 2
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 1
59844: PUSH
59845: LD_INT 2
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 1
59854: NEG
59855: PUSH
59856: LD_INT 1
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 2
59865: NEG
59866: PUSH
59867: LD_INT 0
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 2
59876: NEG
59877: PUSH
59878: LD_INT 1
59880: NEG
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 1
59888: NEG
59889: PUSH
59890: LD_INT 3
59892: NEG
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 1
59900: PUSH
59901: LD_INT 2
59903: NEG
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 3
59911: PUSH
59912: LD_INT 2
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 2
59921: PUSH
59922: LD_INT 3
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 2
59931: NEG
59932: PUSH
59933: LD_INT 1
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 3
59942: NEG
59943: PUSH
59944: LD_INT 1
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59977: NOP4
59981: PUSH
59982: LD_INT 0
59984: PUSH
59985: LD_INT 0
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 0
59994: PUSH
59995: LD_INT 1
59997: NEG
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 1
60005: PUSH
60006: LD_INT 0
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 1
60015: PUSH
60016: LD_INT 1
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 0
60025: PUSH
60026: LD_INT 1
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 1
60035: NEG
60036: PUSH
60037: LD_INT 0
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 1
60046: NEG
60047: PUSH
60048: LD_INT 1
60050: NEG
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 1
60058: NEG
60059: PUSH
60060: LD_INT 2
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 1
60070: PUSH
60071: LD_INT 1
60073: NEG
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 2
60081: PUSH
60082: LD_INT 0
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 2
60091: PUSH
60092: LD_INT 1
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 2
60101: PUSH
60102: LD_INT 2
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 1
60111: PUSH
60112: LD_INT 2
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 0
60121: PUSH
60122: LD_INT 2
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 1
60131: NEG
60132: PUSH
60133: LD_INT 1
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 2
60142: NEG
60143: PUSH
60144: LD_INT 1
60146: NEG
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 2
60154: NEG
60155: PUSH
60156: LD_INT 2
60158: NEG
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 2
60166: NEG
60167: PUSH
60168: LD_INT 3
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 2
60178: PUSH
60179: LD_INT 1
60181: NEG
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 3
60189: PUSH
60190: LD_INT 1
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 1
60199: PUSH
60200: LD_INT 3
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 1
60209: NEG
60210: PUSH
60211: LD_INT 2
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 3
60220: NEG
60221: PUSH
60222: LD_INT 2
60224: NEG
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60255: NOP4
60259: PUSH
60260: LD_INT 0
60262: PUSH
60263: LD_INT 0
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 0
60272: PUSH
60273: LD_INT 1
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 1
60283: PUSH
60284: LD_INT 0
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 1
60293: PUSH
60294: LD_INT 1
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 0
60303: PUSH
60304: LD_INT 1
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 1
60313: NEG
60314: PUSH
60315: LD_INT 0
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 1
60324: NEG
60325: PUSH
60326: LD_INT 1
60328: NEG
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 1
60336: NEG
60337: PUSH
60338: LD_INT 2
60340: NEG
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: LD_INT 2
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 1
60359: PUSH
60360: LD_INT 1
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 2
60370: PUSH
60371: LD_INT 1
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 2
60380: PUSH
60381: LD_INT 2
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 1
60390: PUSH
60391: LD_INT 2
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 0
60400: PUSH
60401: LD_INT 2
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 1
60410: NEG
60411: PUSH
60412: LD_INT 1
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 2
60421: NEG
60422: PUSH
60423: LD_INT 0
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 2
60432: NEG
60433: PUSH
60434: LD_INT 1
60436: NEG
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 1
60444: NEG
60445: PUSH
60446: LD_INT 3
60448: NEG
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 1
60456: PUSH
60457: LD_INT 2
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 3
60467: PUSH
60468: LD_INT 2
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 2
60477: PUSH
60478: LD_INT 3
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 2
60487: NEG
60488: PUSH
60489: LD_INT 1
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 3
60498: NEG
60499: PUSH
60500: LD_INT 1
60502: NEG
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60533: NOP4
60537: PUSH
60538: LD_INT 0
60540: PUSH
60541: LD_INT 0
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 0
60550: PUSH
60551: LD_INT 1
60553: NEG
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 1
60561: PUSH
60562: LD_INT 0
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 1
60571: PUSH
60572: LD_INT 1
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 0
60581: PUSH
60582: LD_INT 1
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 1
60591: NEG
60592: PUSH
60593: LD_INT 0
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 1
60602: NEG
60603: PUSH
60604: LD_INT 1
60606: NEG
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 1
60614: NEG
60615: PUSH
60616: LD_INT 2
60618: NEG
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 1
60626: PUSH
60627: LD_INT 1
60629: NEG
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 2
60637: PUSH
60638: LD_INT 0
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 2
60647: PUSH
60648: LD_INT 1
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 1
60657: PUSH
60658: LD_INT 2
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 0
60667: PUSH
60668: LD_INT 2
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 1
60677: NEG
60678: PUSH
60679: LD_INT 1
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 2
60688: NEG
60689: PUSH
60690: LD_INT 0
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 2
60699: NEG
60700: PUSH
60701: LD_INT 1
60703: NEG
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 2
60711: NEG
60712: PUSH
60713: LD_INT 2
60715: NEG
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 2
60723: NEG
60724: PUSH
60725: LD_INT 3
60727: NEG
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 2
60735: PUSH
60736: LD_INT 1
60738: NEG
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 3
60746: PUSH
60747: LD_INT 1
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 1
60756: PUSH
60757: LD_INT 3
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 1
60766: NEG
60767: PUSH
60768: LD_INT 2
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 3
60777: NEG
60778: PUSH
60779: LD_INT 2
60781: NEG
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60812: NOP4
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: LD_INT 0
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: LD_INT 1
60832: NEG
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 1
60840: PUSH
60841: LD_INT 0
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 1
60850: PUSH
60851: LD_INT 1
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: LD_INT 1
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 1
60870: NEG
60871: PUSH
60872: LD_INT 0
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 1
60881: NEG
60882: PUSH
60883: LD_INT 1
60885: NEG
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 1
60893: NEG
60894: PUSH
60895: LD_INT 2
60897: NEG
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: LD_INT 2
60908: NEG
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 1
60916: PUSH
60917: LD_INT 1
60919: NEG
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 2
60927: PUSH
60928: LD_INT 1
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 2
60937: PUSH
60938: LD_INT 2
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 1
60947: PUSH
60948: LD_INT 2
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 1
60957: NEG
60958: PUSH
60959: LD_INT 1
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 2
60968: NEG
60969: PUSH
60970: LD_INT 0
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 2
60979: NEG
60980: PUSH
60981: LD_INT 1
60983: NEG
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 2
60991: NEG
60992: PUSH
60993: LD_INT 2
60995: NEG
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 1
61003: NEG
61004: PUSH
61005: LD_INT 3
61007: NEG
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 1
61015: PUSH
61016: LD_INT 2
61018: NEG
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 3
61026: PUSH
61027: LD_INT 2
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 2
61036: PUSH
61037: LD_INT 3
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 2
61046: NEG
61047: PUSH
61048: LD_INT 1
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 3
61057: NEG
61058: PUSH
61059: LD_INT 1
61061: NEG
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61092: NOP4
61096: PUSH
61097: LD_INT 0
61099: PUSH
61100: LD_INT 0
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 0
61109: PUSH
61110: LD_INT 1
61112: NEG
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 1
61120: PUSH
61121: LD_INT 0
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 1
61130: PUSH
61131: LD_INT 1
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 0
61140: PUSH
61141: LD_INT 1
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 1
61150: NEG
61151: PUSH
61152: LD_INT 0
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 1
61161: NEG
61162: PUSH
61163: LD_INT 1
61165: NEG
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 2
61173: PUSH
61174: LD_INT 1
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 2
61183: NEG
61184: PUSH
61185: LD_INT 1
61187: NEG
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61204: NOP4
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 0
61221: PUSH
61222: LD_INT 1
61224: NEG
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 1
61232: PUSH
61233: LD_INT 0
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 1
61242: PUSH
61243: LD_INT 1
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 0
61252: PUSH
61253: LD_INT 1
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 1
61262: NEG
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 1
61273: NEG
61274: PUSH
61275: LD_INT 1
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 1
61285: NEG
61286: PUSH
61287: LD_INT 2
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 1
61297: PUSH
61298: LD_INT 2
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61316: NOP4
61320: PUSH
61321: LD_INT 0
61323: PUSH
61324: LD_INT 0
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: LD_INT 1
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 1
61344: PUSH
61345: LD_INT 0
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 1
61354: PUSH
61355: LD_INT 1
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 0
61364: PUSH
61365: LD_INT 1
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 1
61374: NEG
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 1
61385: NEG
61386: PUSH
61387: LD_INT 1
61389: NEG
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 1
61397: PUSH
61398: LD_INT 1
61400: NEG
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 1
61408: NEG
61409: PUSH
61410: LD_INT 1
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61428: NOP4
61432: PUSH
61433: LD_INT 0
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 0
61445: PUSH
61446: LD_INT 1
61448: NEG
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 1
61456: PUSH
61457: LD_INT 0
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 1
61466: PUSH
61467: LD_INT 1
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 0
61476: PUSH
61477: LD_INT 1
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 1
61486: NEG
61487: PUSH
61488: LD_INT 0
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 1
61497: NEG
61498: PUSH
61499: LD_INT 1
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 2
61509: PUSH
61510: LD_INT 1
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 2
61519: NEG
61520: PUSH
61521: LD_INT 1
61523: NEG
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61540: NOP4
61544: PUSH
61545: LD_INT 0
61547: PUSH
61548: LD_INT 0
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 0
61557: PUSH
61558: LD_INT 1
61560: NEG
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 1
61568: PUSH
61569: LD_INT 0
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 1
61578: PUSH
61579: LD_INT 1
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 0
61588: PUSH
61589: LD_INT 1
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 1
61598: NEG
61599: PUSH
61600: LD_INT 0
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 1
61609: NEG
61610: PUSH
61611: LD_INT 1
61613: NEG
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 1
61621: NEG
61622: PUSH
61623: LD_INT 2
61625: NEG
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 1
61633: PUSH
61634: LD_INT 2
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61652: NOP4
61656: PUSH
61657: LD_INT 0
61659: PUSH
61660: LD_INT 0
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 0
61669: PUSH
61670: LD_INT 1
61672: NEG
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 1
61680: PUSH
61681: LD_INT 0
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 1
61690: PUSH
61691: LD_INT 1
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 0
61700: PUSH
61701: LD_INT 1
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 1
61710: NEG
61711: PUSH
61712: LD_INT 0
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 1
61721: NEG
61722: PUSH
61723: LD_INT 1
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 1
61733: PUSH
61734: LD_INT 1
61736: NEG
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 1
61744: NEG
61745: PUSH
61746: LD_INT 1
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61764: NOP4
61768: PUSH
61769: LD_INT 0
61771: PUSH
61772: LD_INT 0
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 0
61781: PUSH
61782: LD_INT 1
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 1
61792: PUSH
61793: LD_INT 0
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 1
61802: PUSH
61803: LD_INT 1
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 0
61812: PUSH
61813: LD_INT 1
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 1
61822: NEG
61823: PUSH
61824: LD_INT 0
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 1
61833: NEG
61834: PUSH
61835: LD_INT 1
61837: NEG
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 1
61845: NEG
61846: PUSH
61847: LD_INT 2
61849: NEG
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 1
61857: PUSH
61858: LD_INT 1
61860: NEG
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 2
61868: PUSH
61869: LD_INT 0
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 2
61878: PUSH
61879: LD_INT 1
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 2
61888: PUSH
61889: LD_INT 2
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 1
61898: PUSH
61899: LD_INT 2
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 1
61908: NEG
61909: PUSH
61910: LD_INT 1
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 2
61919: NEG
61920: PUSH
61921: LD_INT 0
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 2
61930: NEG
61931: PUSH
61932: LD_INT 1
61934: NEG
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 2
61942: NEG
61943: PUSH
61944: LD_INT 2
61946: NEG
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 2
61954: NEG
61955: PUSH
61956: LD_INT 3
61958: NEG
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 2
61966: PUSH
61967: LD_INT 1
61969: NEG
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 3
61977: PUSH
61978: LD_INT 0
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 3
61987: PUSH
61988: LD_INT 1
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 3
61997: PUSH
61998: LD_INT 2
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 3
62007: PUSH
62008: LD_INT 3
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 2
62017: PUSH
62018: LD_INT 3
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 2
62027: NEG
62028: PUSH
62029: LD_INT 1
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 3
62038: NEG
62039: PUSH
62040: LD_INT 0
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 3
62049: NEG
62050: PUSH
62051: LD_INT 1
62053: NEG
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 3
62061: NEG
62062: PUSH
62063: LD_INT 2
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 3
62073: NEG
62074: PUSH
62075: LD_INT 3
62077: NEG
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62114: NOP4
62118: PUSH
62119: LD_INT 0
62121: PUSH
62122: LD_INT 0
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 0
62131: PUSH
62132: LD_INT 1
62134: NEG
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 1
62142: PUSH
62143: LD_INT 0
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 1
62152: PUSH
62153: LD_INT 1
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 0
62162: PUSH
62163: LD_INT 1
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 1
62172: NEG
62173: PUSH
62174: LD_INT 0
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 1
62183: NEG
62184: PUSH
62185: LD_INT 1
62187: NEG
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 1
62195: NEG
62196: PUSH
62197: LD_INT 2
62199: NEG
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 0
62207: PUSH
62208: LD_INT 2
62210: NEG
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 1
62218: PUSH
62219: LD_INT 1
62221: NEG
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 2
62229: PUSH
62230: LD_INT 1
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 2
62239: PUSH
62240: LD_INT 2
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 1
62249: PUSH
62250: LD_INT 2
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 0
62259: PUSH
62260: LD_INT 2
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 1
62269: NEG
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 2
62280: NEG
62281: PUSH
62282: LD_INT 1
62284: NEG
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 2
62292: NEG
62293: PUSH
62294: LD_INT 2
62296: NEG
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 2
62304: NEG
62305: PUSH
62306: LD_INT 3
62308: NEG
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 1
62316: NEG
62317: PUSH
62318: LD_INT 3
62320: NEG
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: LD_INT 3
62331: NEG
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 1
62339: PUSH
62340: LD_INT 2
62342: NEG
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 3
62350: PUSH
62351: LD_INT 2
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 3
62360: PUSH
62361: LD_INT 3
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 2
62370: PUSH
62371: LD_INT 3
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 1
62380: PUSH
62381: LD_INT 3
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 0
62390: PUSH
62391: LD_INT 3
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 1
62400: NEG
62401: PUSH
62402: LD_INT 2
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 3
62411: NEG
62412: PUSH
62413: LD_INT 2
62415: NEG
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 3
62423: NEG
62424: PUSH
62425: LD_INT 3
62427: NEG
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62464: NOP4
62468: PUSH
62469: LD_INT 0
62471: PUSH
62472: LD_INT 0
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 0
62481: PUSH
62482: LD_INT 1
62484: NEG
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 1
62492: PUSH
62493: LD_INT 0
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 1
62502: PUSH
62503: LD_INT 1
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 0
62512: PUSH
62513: LD_INT 1
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 1
62522: NEG
62523: PUSH
62524: LD_INT 0
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 1
62533: NEG
62534: PUSH
62535: LD_INT 1
62537: NEG
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 1
62545: NEG
62546: PUSH
62547: LD_INT 2
62549: NEG
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 0
62557: PUSH
62558: LD_INT 2
62560: NEG
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 1
62568: PUSH
62569: LD_INT 1
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 2
62579: PUSH
62580: LD_INT 0
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 2
62589: PUSH
62590: LD_INT 1
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 1
62599: PUSH
62600: LD_INT 2
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 0
62609: PUSH
62610: LD_INT 2
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 1
62619: NEG
62620: PUSH
62621: LD_INT 1
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 2
62630: NEG
62631: PUSH
62632: LD_INT 0
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 2
62641: NEG
62642: PUSH
62643: LD_INT 1
62645: NEG
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 1
62653: NEG
62654: PUSH
62655: LD_INT 3
62657: NEG
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 0
62665: PUSH
62666: LD_INT 3
62668: NEG
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 1
62676: PUSH
62677: LD_INT 2
62679: NEG
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 2
62687: PUSH
62688: LD_INT 1
62690: NEG
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 3
62698: PUSH
62699: LD_INT 0
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 3
62708: PUSH
62709: LD_INT 1
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 1
62718: PUSH
62719: LD_INT 3
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 0
62728: PUSH
62729: LD_INT 3
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 1
62738: NEG
62739: PUSH
62740: LD_INT 2
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 2
62749: NEG
62750: PUSH
62751: LD_INT 1
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 3
62760: NEG
62761: PUSH
62762: LD_INT 0
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 3
62771: NEG
62772: PUSH
62773: LD_INT 1
62775: NEG
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62812: NOP4
62816: PUSH
62817: LD_INT 0
62819: PUSH
62820: LD_INT 0
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 0
62829: PUSH
62830: LD_INT 1
62832: NEG
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 1
62840: PUSH
62841: LD_INT 0
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 1
62850: PUSH
62851: LD_INT 1
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: LD_INT 1
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 1
62870: NEG
62871: PUSH
62872: LD_INT 0
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 1
62881: NEG
62882: PUSH
62883: LD_INT 1
62885: NEG
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 1
62893: NEG
62894: PUSH
62895: LD_INT 2
62897: NEG
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 1
62905: PUSH
62906: LD_INT 1
62908: NEG
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 2
62916: PUSH
62917: LD_INT 0
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 2
62926: PUSH
62927: LD_INT 1
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 2
62936: PUSH
62937: LD_INT 2
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 1
62946: PUSH
62947: LD_INT 2
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 1
62956: NEG
62957: PUSH
62958: LD_INT 1
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 2
62967: NEG
62968: PUSH
62969: LD_INT 0
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 2
62978: NEG
62979: PUSH
62980: LD_INT 1
62982: NEG
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 2
62990: NEG
62991: PUSH
62992: LD_INT 2
62994: NEG
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 2
63002: NEG
63003: PUSH
63004: LD_INT 3
63006: NEG
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 2
63014: PUSH
63015: LD_INT 1
63017: NEG
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 3
63025: PUSH
63026: LD_INT 0
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 3
63035: PUSH
63036: LD_INT 1
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 3
63045: PUSH
63046: LD_INT 2
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 3
63055: PUSH
63056: LD_INT 3
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 2
63065: PUSH
63066: LD_INT 3
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 2
63075: NEG
63076: PUSH
63077: LD_INT 1
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 3
63086: NEG
63087: PUSH
63088: LD_INT 0
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 3
63097: NEG
63098: PUSH
63099: LD_INT 1
63101: NEG
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 3
63109: NEG
63110: PUSH
63111: LD_INT 2
63113: NEG
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 3
63121: NEG
63122: PUSH
63123: LD_INT 3
63125: NEG
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63162: NOP4
63166: PUSH
63167: LD_INT 0
63169: PUSH
63170: LD_INT 0
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 0
63179: PUSH
63180: LD_INT 1
63182: NEG
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 1
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 1
63200: PUSH
63201: LD_INT 1
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 0
63210: PUSH
63211: LD_INT 1
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 1
63220: NEG
63221: PUSH
63222: LD_INT 0
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 1
63231: NEG
63232: PUSH
63233: LD_INT 1
63235: NEG
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 1
63243: NEG
63244: PUSH
63245: LD_INT 2
63247: NEG
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 0
63255: PUSH
63256: LD_INT 2
63258: NEG
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 1
63266: PUSH
63267: LD_INT 1
63269: NEG
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 2
63277: PUSH
63278: LD_INT 1
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 2
63287: PUSH
63288: LD_INT 2
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 1
63297: PUSH
63298: LD_INT 2
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 0
63307: PUSH
63308: LD_INT 2
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 1
63317: NEG
63318: PUSH
63319: LD_INT 1
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 2
63328: NEG
63329: PUSH
63330: LD_INT 1
63332: NEG
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 2
63340: NEG
63341: PUSH
63342: LD_INT 2
63344: NEG
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 2
63352: NEG
63353: PUSH
63354: LD_INT 3
63356: NEG
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 1
63364: NEG
63365: PUSH
63366: LD_INT 3
63368: NEG
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 0
63376: PUSH
63377: LD_INT 3
63379: NEG
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 1
63387: PUSH
63388: LD_INT 2
63390: NEG
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 3
63398: PUSH
63399: LD_INT 2
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 3
63408: PUSH
63409: LD_INT 3
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 2
63418: PUSH
63419: LD_INT 3
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 1
63428: PUSH
63429: LD_INT 3
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 0
63438: PUSH
63439: LD_INT 3
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 1
63448: NEG
63449: PUSH
63450: LD_INT 2
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 3
63459: NEG
63460: PUSH
63461: LD_INT 2
63463: NEG
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 3
63471: NEG
63472: PUSH
63473: LD_INT 3
63475: NEG
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63512: NOP4
63516: PUSH
63517: LD_INT 0
63519: PUSH
63520: LD_INT 0
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 0
63529: PUSH
63530: LD_INT 1
63532: NEG
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 1
63540: PUSH
63541: LD_INT 0
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 1
63550: PUSH
63551: LD_INT 1
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 0
63560: PUSH
63561: LD_INT 1
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 1
63570: NEG
63571: PUSH
63572: LD_INT 0
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 1
63581: NEG
63582: PUSH
63583: LD_INT 1
63585: NEG
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 1
63593: NEG
63594: PUSH
63595: LD_INT 2
63597: NEG
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 0
63605: PUSH
63606: LD_INT 2
63608: NEG
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 1
63616: PUSH
63617: LD_INT 1
63619: NEG
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 2
63627: PUSH
63628: LD_INT 0
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 2
63637: PUSH
63638: LD_INT 1
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 1
63647: PUSH
63648: LD_INT 2
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 0
63657: PUSH
63658: LD_INT 2
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 1
63667: NEG
63668: PUSH
63669: LD_INT 1
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 2
63678: NEG
63679: PUSH
63680: LD_INT 0
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 2
63689: NEG
63690: PUSH
63691: LD_INT 1
63693: NEG
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 1
63701: NEG
63702: PUSH
63703: LD_INT 3
63705: NEG
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 0
63713: PUSH
63714: LD_INT 3
63716: NEG
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 1
63724: PUSH
63725: LD_INT 2
63727: NEG
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 2
63735: PUSH
63736: LD_INT 1
63738: NEG
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 3
63746: PUSH
63747: LD_INT 0
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 3
63756: PUSH
63757: LD_INT 1
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 1
63766: PUSH
63767: LD_INT 3
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 0
63776: PUSH
63777: LD_INT 3
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 1
63786: NEG
63787: PUSH
63788: LD_INT 2
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 2
63797: NEG
63798: PUSH
63799: LD_INT 1
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 3
63808: NEG
63809: PUSH
63810: LD_INT 0
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 3
63819: NEG
63820: PUSH
63821: LD_INT 1
63823: NEG
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63860: NOP4
63864: PUSH
63865: LD_INT 0
63867: PUSH
63868: LD_INT 0
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 0
63877: PUSH
63878: LD_INT 1
63880: NEG
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 1
63888: PUSH
63889: LD_INT 0
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 1
63898: PUSH
63899: LD_INT 1
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 0
63908: PUSH
63909: LD_INT 1
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 1
63918: NEG
63919: PUSH
63920: LD_INT 0
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 1
63929: NEG
63930: PUSH
63931: LD_INT 1
63933: NEG
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 1
63941: NEG
63942: PUSH
63943: LD_INT 2
63945: NEG
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 0
63953: PUSH
63954: LD_INT 2
63956: NEG
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 1
63964: PUSH
63965: LD_INT 1
63967: NEG
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 2
63975: NEG
63976: PUSH
63977: LD_INT 1
63979: NEG
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 2
63987: NEG
63988: PUSH
63989: LD_INT 2
63991: NEG
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64011: NOP4
64015: PUSH
64016: LD_INT 0
64018: PUSH
64019: LD_INT 0
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 0
64028: PUSH
64029: LD_INT 1
64031: NEG
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 1
64039: PUSH
64040: LD_INT 0
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 1
64049: PUSH
64050: LD_INT 1
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 0
64059: PUSH
64060: LD_INT 1
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 1
64069: NEG
64070: PUSH
64071: LD_INT 0
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 1
64080: NEG
64081: PUSH
64082: LD_INT 1
64084: NEG
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 1
64092: NEG
64093: PUSH
64094: LD_INT 2
64096: NEG
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 0
64104: PUSH
64105: LD_INT 2
64107: NEG
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 1
64115: PUSH
64116: LD_INT 1
64118: NEG
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 2
64126: PUSH
64127: LD_INT 0
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 2
64136: PUSH
64137: LD_INT 1
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64158: NOP4
64162: PUSH
64163: LD_INT 0
64165: PUSH
64166: LD_INT 0
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 0
64175: PUSH
64176: LD_INT 1
64178: NEG
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 1
64186: PUSH
64187: LD_INT 0
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 1
64196: PUSH
64197: LD_INT 1
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 0
64206: PUSH
64207: LD_INT 1
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 1
64216: NEG
64217: PUSH
64218: LD_INT 0
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 1
64227: NEG
64228: PUSH
64229: LD_INT 1
64231: NEG
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 1
64239: PUSH
64240: LD_INT 1
64242: NEG
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 2
64250: PUSH
64251: LD_INT 0
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 2
64260: PUSH
64261: LD_INT 1
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 2
64270: PUSH
64271: LD_INT 2
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 1
64280: PUSH
64281: LD_INT 2
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64302: NOP4
64306: PUSH
64307: LD_INT 0
64309: PUSH
64310: LD_INT 0
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 0
64319: PUSH
64320: LD_INT 1
64322: NEG
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 1
64330: PUSH
64331: LD_INT 0
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 1
64340: PUSH
64341: LD_INT 1
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 0
64350: PUSH
64351: LD_INT 1
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 1
64360: NEG
64361: PUSH
64362: LD_INT 0
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 1
64371: NEG
64372: PUSH
64373: LD_INT 1
64375: NEG
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 2
64383: PUSH
64384: LD_INT 1
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 2
64393: PUSH
64394: LD_INT 2
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 1
64403: PUSH
64404: LD_INT 2
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_INT 0
64413: PUSH
64414: LD_INT 2
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 1
64423: NEG
64424: PUSH
64425: LD_INT 1
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64446: NOP4
64450: PUSH
64451: LD_INT 0
64453: PUSH
64454: LD_INT 0
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 0
64463: PUSH
64464: LD_INT 1
64466: NEG
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 1
64474: PUSH
64475: LD_INT 0
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 1
64484: PUSH
64485: LD_INT 1
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 0
64494: PUSH
64495: LD_INT 1
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 1
64504: NEG
64505: PUSH
64506: LD_INT 0
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 1
64515: NEG
64516: PUSH
64517: LD_INT 1
64519: NEG
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 1
64527: PUSH
64528: LD_INT 2
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 0
64537: PUSH
64538: LD_INT 2
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 1
64547: NEG
64548: PUSH
64549: LD_INT 1
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 2
64558: NEG
64559: PUSH
64560: LD_INT 0
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 2
64569: NEG
64570: PUSH
64571: LD_INT 1
64573: NEG
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64593: NOP4
64597: PUSH
64598: LD_INT 0
64600: PUSH
64601: LD_INT 0
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 0
64610: PUSH
64611: LD_INT 1
64613: NEG
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 1
64621: PUSH
64622: LD_INT 0
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 1
64631: PUSH
64632: LD_INT 1
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 0
64641: PUSH
64642: LD_INT 1
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 1
64651: NEG
64652: PUSH
64653: LD_INT 0
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 1
64662: NEG
64663: PUSH
64664: LD_INT 1
64666: NEG
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 1
64674: NEG
64675: PUSH
64676: LD_INT 2
64678: NEG
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 1
64686: NEG
64687: PUSH
64688: LD_INT 1
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 2
64697: NEG
64698: PUSH
64699: LD_INT 0
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 2
64708: NEG
64709: PUSH
64710: LD_INT 1
64712: NEG
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 2
64720: NEG
64721: PUSH
64722: LD_INT 2
64724: NEG
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64744: NOP4
64748: PUSH
64749: LD_INT 0
64751: PUSH
64752: LD_INT 0
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 0
64761: PUSH
64762: LD_INT 1
64764: NEG
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 1
64772: PUSH
64773: LD_INT 0
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 1
64782: PUSH
64783: LD_INT 1
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 0
64792: PUSH
64793: LD_INT 1
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 1
64802: NEG
64803: PUSH
64804: LD_INT 0
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 1
64813: NEG
64814: PUSH
64815: LD_INT 1
64817: NEG
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 1
64825: NEG
64826: PUSH
64827: LD_INT 2
64829: NEG
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 0
64837: PUSH
64838: LD_INT 2
64840: NEG
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 1
64848: PUSH
64849: LD_INT 1
64851: NEG
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: LD_INT 2
64859: PUSH
64860: LD_INT 0
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 2
64869: PUSH
64870: LD_INT 1
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 2
64879: PUSH
64880: LD_INT 2
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 1
64889: PUSH
64890: LD_INT 2
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 0
64899: PUSH
64900: LD_INT 2
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 1
64909: NEG
64910: PUSH
64911: LD_INT 1
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 2
64920: NEG
64921: PUSH
64922: LD_INT 0
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 2
64931: NEG
64932: PUSH
64933: LD_INT 1
64935: NEG
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 2
64943: NEG
64944: PUSH
64945: LD_INT 2
64947: NEG
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64974: NOP4
64978: PUSH
64979: LD_INT 0
64981: PUSH
64982: LD_INT 0
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 0
64991: PUSH
64992: LD_INT 1
64994: NEG
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 1
65002: PUSH
65003: LD_INT 0
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 1
65012: PUSH
65013: LD_INT 1
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 0
65022: PUSH
65023: LD_INT 1
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 1
65032: NEG
65033: PUSH
65034: LD_INT 0
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 1
65043: NEG
65044: PUSH
65045: LD_INT 1
65047: NEG
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 1
65055: NEG
65056: PUSH
65057: LD_INT 2
65059: NEG
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 0
65067: PUSH
65068: LD_INT 2
65070: NEG
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 1
65078: PUSH
65079: LD_INT 1
65081: NEG
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 2
65089: PUSH
65090: LD_INT 0
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 2
65099: PUSH
65100: LD_INT 1
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 2
65109: PUSH
65110: LD_INT 2
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 1
65119: PUSH
65120: LD_INT 2
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 0
65129: PUSH
65130: LD_INT 2
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 1
65139: NEG
65140: PUSH
65141: LD_INT 1
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 2
65150: NEG
65151: PUSH
65152: LD_INT 0
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 2
65161: NEG
65162: PUSH
65163: LD_INT 1
65165: NEG
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 2
65173: NEG
65174: PUSH
65175: LD_INT 2
65177: NEG
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65204: NOP4
65208: PUSH
65209: LD_INT 0
65211: PUSH
65212: LD_INT 0
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 0
65221: PUSH
65222: LD_INT 1
65224: NEG
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 1
65232: PUSH
65233: LD_INT 0
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PUSH
65240: LD_INT 1
65242: PUSH
65243: LD_INT 1
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: LD_INT 0
65252: PUSH
65253: LD_INT 1
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: LD_INT 1
65262: NEG
65263: PUSH
65264: LD_INT 0
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 1
65273: NEG
65274: PUSH
65275: LD_INT 1
65277: NEG
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 1
65285: NEG
65286: PUSH
65287: LD_INT 2
65289: NEG
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 0
65297: PUSH
65298: LD_INT 2
65300: NEG
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 1
65308: PUSH
65309: LD_INT 1
65311: NEG
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 2
65319: PUSH
65320: LD_INT 0
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 2
65329: PUSH
65330: LD_INT 1
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 2
65339: PUSH
65340: LD_INT 2
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 1
65349: PUSH
65350: LD_INT 2
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 0
65359: PUSH
65360: LD_INT 2
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 1
65369: NEG
65370: PUSH
65371: LD_INT 1
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 2
65380: NEG
65381: PUSH
65382: LD_INT 0
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 2
65391: NEG
65392: PUSH
65393: LD_INT 1
65395: NEG
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 2
65403: NEG
65404: PUSH
65405: LD_INT 2
65407: NEG
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: LIST
65423: LIST
65424: LIST
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65434: NOP4
65438: PUSH
65439: LD_INT 0
65441: PUSH
65442: LD_INT 0
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 0
65451: PUSH
65452: LD_INT 1
65454: NEG
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 1
65462: PUSH
65463: LD_INT 0
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 1
65472: PUSH
65473: LD_INT 1
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 0
65482: PUSH
65483: LD_INT 1
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 1
65492: NEG
65493: PUSH
65494: LD_INT 0
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 1
65503: NEG
65504: PUSH
65505: LD_INT 1
65507: NEG
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 1
65515: NEG
65516: PUSH
65517: LD_INT 2
65519: NEG
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 0
65527: PUSH
65528: LD_INT 2
65530: NEG
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 1
65538: PUSH
65539: LD_INT 1
65541: NEG
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 2
65549: PUSH
65550: LD_INT 0
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: LD_INT 2
65559: PUSH
65560: LD_INT 1
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 2
65569: PUSH
65570: LD_INT 2
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 1
65579: PUSH
65580: LD_INT 2
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 0
65589: PUSH
65590: LD_INT 2
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 1
65599: NEG
65600: PUSH
65601: LD_INT 1
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 2
65610: NEG
65611: PUSH
65612: LD_INT 0
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: PUSH
65619: LD_INT 2
65621: NEG
65622: PUSH
65623: LD_INT 1
65625: NEG
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 2
65633: NEG
65634: PUSH
65635: LD_INT 2
65637: NEG
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65664: NOP4
65668: PUSH
65669: LD_INT 0
65671: PUSH
65672: LD_INT 0
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 0
65681: PUSH
65682: LD_INT 1
65684: NEG
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: LD_INT 1
65692: PUSH
65693: LD_INT 0
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 1
65702: PUSH
65703: LD_INT 1
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 0
65712: PUSH
65713: LD_INT 1
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 1
65722: NEG
65723: PUSH
65724: LD_INT 0
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 1
65733: NEG
65734: PUSH
65735: LD_INT 1
65737: NEG
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 1
65745: NEG
65746: PUSH
65747: LD_INT 2
65749: NEG
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 0
65757: PUSH
65758: LD_INT 2
65760: NEG
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 1
65768: PUSH
65769: LD_INT 1
65771: NEG
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 2
65779: PUSH
65780: LD_INT 0
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 2
65789: PUSH
65790: LD_INT 1
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 2
65799: PUSH
65800: LD_INT 2
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 1
65809: PUSH
65810: LD_INT 2
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 0
65819: PUSH
65820: LD_INT 2
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 1
65829: NEG
65830: PUSH
65831: LD_INT 1
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 2
65840: NEG
65841: PUSH
65842: LD_INT 0
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 2
65851: NEG
65852: PUSH
65853: LD_INT 1
65855: NEG
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 2
65863: NEG
65864: PUSH
65865: LD_INT 2
65867: NEG
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65894: NOP4
65898: PUSH
65899: LD_INT 0
65901: PUSH
65902: LD_INT 0
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 0
65911: PUSH
65912: LD_INT 1
65914: NEG
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 1
65922: PUSH
65923: LD_INT 0
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: LD_INT 1
65932: PUSH
65933: LD_INT 1
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 0
65942: PUSH
65943: LD_INT 1
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 1
65952: NEG
65953: PUSH
65954: LD_INT 0
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 1
65963: NEG
65964: PUSH
65965: LD_INT 1
65967: NEG
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 1
65975: NEG
65976: PUSH
65977: LD_INT 2
65979: NEG
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 0
65987: PUSH
65988: LD_INT 2
65990: NEG
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 1
65998: PUSH
65999: LD_INT 1
66001: NEG
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 2
66009: PUSH
66010: LD_INT 0
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 2
66019: PUSH
66020: LD_INT 1
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 2
66029: PUSH
66030: LD_INT 2
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 1
66039: PUSH
66040: LD_INT 2
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 0
66049: PUSH
66050: LD_INT 2
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 1
66059: NEG
66060: PUSH
66061: LD_INT 1
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: LD_INT 2
66070: NEG
66071: PUSH
66072: LD_INT 0
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: PUSH
66079: LD_INT 2
66081: NEG
66082: PUSH
66083: LD_INT 1
66085: NEG
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 2
66093: NEG
66094: PUSH
66095: LD_INT 2
66097: NEG
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66124: NOP4
66128: PUSH
66129: LD_INT 0
66131: PUSH
66132: LD_INT 0
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 0
66141: PUSH
66142: LD_INT 1
66144: NEG
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 1
66152: PUSH
66153: LD_INT 0
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 1
66162: PUSH
66163: LD_INT 1
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 0
66172: PUSH
66173: LD_INT 1
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 1
66182: NEG
66183: PUSH
66184: LD_INT 0
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 1
66193: NEG
66194: PUSH
66195: LD_INT 1
66197: NEG
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66212: NOP4
66216: PUSH
66217: LD_INT 0
66219: PUSH
66220: LD_INT 0
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 0
66229: PUSH
66230: LD_INT 1
66232: NEG
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 1
66240: PUSH
66241: LD_INT 0
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 1
66250: PUSH
66251: LD_INT 1
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 0
66260: PUSH
66261: LD_INT 1
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: PUSH
66268: LD_INT 1
66270: NEG
66271: PUSH
66272: LD_INT 0
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: LD_INT 1
66281: NEG
66282: PUSH
66283: LD_INT 1
66285: NEG
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: LIST
66295: LIST
66296: LIST
66297: LIST
66298: LIST
66299: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66300: NOP4
66304: PUSH
66305: LD_INT 0
66307: PUSH
66308: LD_INT 0
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 0
66317: PUSH
66318: LD_INT 1
66320: NEG
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 1
66328: PUSH
66329: LD_INT 0
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 1
66338: PUSH
66339: LD_INT 1
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 0
66348: PUSH
66349: LD_INT 1
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 1
66358: NEG
66359: PUSH
66360: LD_INT 0
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 1
66369: NEG
66370: PUSH
66371: LD_INT 1
66373: NEG
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66388: NOP4
66392: PUSH
66393: LD_INT 0
66395: PUSH
66396: LD_INT 0
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 0
66405: PUSH
66406: LD_INT 1
66408: NEG
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 1
66416: PUSH
66417: LD_INT 0
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 1
66426: PUSH
66427: LD_INT 1
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 0
66436: PUSH
66437: LD_INT 1
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 1
66446: NEG
66447: PUSH
66448: LD_INT 0
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 1
66457: NEG
66458: PUSH
66459: LD_INT 1
66461: NEG
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66476: NOP4
66480: PUSH
66481: LD_INT 0
66483: PUSH
66484: LD_INT 0
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 0
66493: PUSH
66494: LD_INT 1
66496: NEG
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 1
66504: PUSH
66505: LD_INT 0
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 1
66514: PUSH
66515: LD_INT 1
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 0
66524: PUSH
66525: LD_INT 1
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 1
66534: NEG
66535: PUSH
66536: LD_INT 0
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 1
66545: NEG
66546: PUSH
66547: LD_INT 1
66549: NEG
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66564: NOP4
66568: PUSH
66569: LD_INT 0
66571: PUSH
66572: LD_INT 0
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 0
66581: PUSH
66582: LD_INT 1
66584: NEG
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 1
66592: PUSH
66593: LD_INT 0
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 1
66602: PUSH
66603: LD_INT 1
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 0
66612: PUSH
66613: LD_INT 1
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 1
66622: NEG
66623: PUSH
66624: LD_INT 0
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: LD_INT 1
66633: NEG
66634: PUSH
66635: LD_INT 1
66637: NEG
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: ST_TO_ADDR
// end ; 1 :
66652: GO 72549
66654: LD_INT 1
66656: DOUBLE
66657: EQUAL
66658: IFTRUE 66662
66660: GO 69285
66662: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66663: NOP4
66667: PUSH
66668: LD_INT 1
66670: NEG
66671: PUSH
66672: LD_INT 3
66674: NEG
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 0
66682: PUSH
66683: LD_INT 3
66685: NEG
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 1
66693: PUSH
66694: LD_INT 2
66696: NEG
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: LIST
66706: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66707: NOP4
66711: PUSH
66712: LD_INT 2
66714: PUSH
66715: LD_INT 1
66717: NEG
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 3
66725: PUSH
66726: LD_INT 0
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 3
66735: PUSH
66736: LD_INT 1
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: LIST
66747: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66748: NOP4
66752: PUSH
66753: LD_INT 3
66755: PUSH
66756: LD_INT 2
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: LD_INT 3
66765: PUSH
66766: LD_INT 3
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 2
66775: PUSH
66776: LD_INT 3
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: LIST
66787: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66788: NOP4
66792: PUSH
66793: LD_INT 1
66795: PUSH
66796: LD_INT 3
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 0
66805: PUSH
66806: LD_INT 3
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 1
66815: NEG
66816: PUSH
66817: LD_INT 2
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: LIST
66828: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66829: NOP4
66833: PUSH
66834: LD_INT 2
66836: NEG
66837: PUSH
66838: LD_INT 1
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: PUSH
66845: LD_INT 3
66847: NEG
66848: PUSH
66849: LD_INT 0
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 3
66858: NEG
66859: PUSH
66860: LD_INT 1
66862: NEG
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: LIST
66872: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66873: NOP4
66877: PUSH
66878: LD_INT 2
66880: NEG
66881: PUSH
66882: LD_INT 3
66884: NEG
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: LD_INT 3
66892: NEG
66893: PUSH
66894: LD_INT 2
66896: NEG
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: PUSH
66902: LD_INT 3
66904: NEG
66905: PUSH
66906: LD_INT 3
66908: NEG
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: LIST
66918: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66919: NOP4
66923: PUSH
66924: LD_INT 1
66926: NEG
66927: PUSH
66928: LD_INT 3
66930: NEG
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 0
66938: PUSH
66939: LD_INT 3
66941: NEG
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 1
66949: PUSH
66950: LD_INT 2
66952: NEG
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: LIST
66962: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66963: NOP4
66967: PUSH
66968: LD_INT 2
66970: PUSH
66971: LD_INT 1
66973: NEG
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 3
66981: PUSH
66982: LD_INT 0
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 3
66991: PUSH
66992: LD_INT 1
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: LIST
67003: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67004: NOP4
67008: PUSH
67009: LD_INT 3
67011: PUSH
67012: LD_INT 2
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 3
67021: PUSH
67022: LD_INT 3
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 2
67031: PUSH
67032: LD_INT 3
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: LIST
67043: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67044: NOP4
67048: PUSH
67049: LD_INT 1
67051: PUSH
67052: LD_INT 3
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 0
67061: PUSH
67062: LD_INT 3
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_INT 1
67071: NEG
67072: PUSH
67073: LD_INT 2
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: LIST
67084: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67085: NOP4
67089: PUSH
67090: LD_INT 2
67092: NEG
67093: PUSH
67094: LD_INT 1
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 3
67103: NEG
67104: PUSH
67105: LD_INT 0
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: PUSH
67112: LD_INT 3
67114: NEG
67115: PUSH
67116: LD_INT 1
67118: NEG
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: LIST
67128: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67129: NOP4
67133: PUSH
67134: LD_INT 2
67136: NEG
67137: PUSH
67138: LD_INT 3
67140: NEG
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 3
67148: NEG
67149: PUSH
67150: LD_INT 2
67152: NEG
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 3
67160: NEG
67161: PUSH
67162: LD_INT 3
67164: NEG
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: LIST
67174: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67175: NOP4
67179: PUSH
67180: LD_INT 0
67182: PUSH
67183: LD_INT 3
67185: NEG
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 1
67193: NEG
67194: PUSH
67195: LD_INT 4
67197: NEG
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 1
67205: PUSH
67206: LD_INT 3
67208: NEG
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: LIST
67218: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67219: NOP4
67223: PUSH
67224: LD_INT 3
67226: PUSH
67227: LD_INT 0
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 3
67236: PUSH
67237: LD_INT 1
67239: NEG
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 4
67247: PUSH
67248: LD_INT 1
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: LIST
67259: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67260: NOP4
67264: PUSH
67265: LD_INT 3
67267: PUSH
67268: LD_INT 3
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: LD_INT 4
67277: PUSH
67278: LD_INT 3
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: LD_INT 3
67287: PUSH
67288: LD_INT 4
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: LIST
67299: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67300: NOP4
67304: PUSH
67305: LD_INT 0
67307: PUSH
67308: LD_INT 3
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: LD_INT 1
67317: PUSH
67318: LD_INT 4
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 1
67327: NEG
67328: PUSH
67329: LD_INT 3
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: LIST
67340: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67341: NOP4
67345: PUSH
67346: LD_INT 3
67348: NEG
67349: PUSH
67350: LD_INT 0
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 3
67359: NEG
67360: PUSH
67361: LD_INT 1
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 4
67370: NEG
67371: PUSH
67372: LD_INT 1
67374: NEG
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: LIST
67384: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67385: NOP4
67389: PUSH
67390: LD_INT 3
67392: NEG
67393: PUSH
67394: LD_INT 3
67396: NEG
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 3
67404: NEG
67405: PUSH
67406: LD_INT 4
67408: NEG
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: LD_INT 4
67416: NEG
67417: PUSH
67418: LD_INT 3
67420: NEG
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: LIST
67430: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67431: NOP4
67435: PUSH
67436: LD_INT 1
67438: NEG
67439: PUSH
67440: LD_INT 3
67442: NEG
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 0
67450: PUSH
67451: LD_INT 3
67453: NEG
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: PUSH
67459: LD_INT 1
67461: PUSH
67462: LD_INT 2
67464: NEG
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 1
67472: NEG
67473: PUSH
67474: LD_INT 4
67476: NEG
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 0
67484: PUSH
67485: LD_INT 4
67487: NEG
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: LD_INT 1
67495: PUSH
67496: LD_INT 3
67498: NEG
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: PUSH
67504: LD_INT 1
67506: NEG
67507: PUSH
67508: LD_INT 5
67510: NEG
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: LD_INT 0
67518: PUSH
67519: LD_INT 5
67521: NEG
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: LD_INT 1
67529: PUSH
67530: LD_INT 4
67532: NEG
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: LD_INT 1
67540: NEG
67541: PUSH
67542: LD_INT 6
67544: NEG
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 0
67552: PUSH
67553: LD_INT 6
67555: NEG
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 1
67563: PUSH
67564: LD_INT 5
67566: NEG
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: LIST
67576: LIST
67577: LIST
67578: LIST
67579: LIST
67580: LIST
67581: LIST
67582: LIST
67583: LIST
67584: LIST
67585: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67586: NOP4
67590: PUSH
67591: LD_INT 2
67593: PUSH
67594: LD_INT 1
67596: NEG
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 3
67604: PUSH
67605: LD_INT 0
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: LD_INT 3
67614: PUSH
67615: LD_INT 1
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 3
67624: PUSH
67625: LD_INT 1
67627: NEG
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 4
67635: PUSH
67636: LD_INT 0
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 4
67645: PUSH
67646: LD_INT 1
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 4
67655: PUSH
67656: LD_INT 1
67658: NEG
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 5
67666: PUSH
67667: LD_INT 0
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 5
67676: PUSH
67677: LD_INT 1
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: LD_INT 5
67686: PUSH
67687: LD_INT 1
67689: NEG
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 6
67697: PUSH
67698: LD_INT 0
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: LD_INT 6
67707: PUSH
67708: LD_INT 1
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67729: NOP4
67733: PUSH
67734: LD_INT 3
67736: PUSH
67737: LD_INT 2
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PUSH
67744: LD_INT 3
67746: PUSH
67747: LD_INT 3
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: LD_INT 2
67756: PUSH
67757: LD_INT 3
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PUSH
67764: LD_INT 4
67766: PUSH
67767: LD_INT 3
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 4
67776: PUSH
67777: LD_INT 4
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: LD_INT 3
67786: PUSH
67787: LD_INT 4
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 5
67796: PUSH
67797: LD_INT 4
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 5
67806: PUSH
67807: LD_INT 5
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 4
67816: PUSH
67817: LD_INT 5
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 6
67826: PUSH
67827: LD_INT 5
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 6
67836: PUSH
67837: LD_INT 6
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: LD_INT 5
67846: PUSH
67847: LD_INT 6
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67868: NOP4
67872: PUSH
67873: LD_INT 1
67875: PUSH
67876: LD_INT 3
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 0
67885: PUSH
67886: LD_INT 3
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 1
67895: NEG
67896: PUSH
67897: LD_INT 2
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 1
67906: PUSH
67907: LD_INT 4
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 0
67916: PUSH
67917: LD_INT 4
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 1
67926: NEG
67927: PUSH
67928: LD_INT 3
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 1
67937: PUSH
67938: LD_INT 5
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 0
67947: PUSH
67948: LD_INT 5
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 1
67957: NEG
67958: PUSH
67959: LD_INT 4
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 1
67968: PUSH
67969: LD_INT 6
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 0
67978: PUSH
67979: LD_INT 6
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 1
67988: NEG
67989: PUSH
67990: LD_INT 5
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68011: NOP4
68015: PUSH
68016: LD_INT 2
68018: NEG
68019: PUSH
68020: LD_INT 1
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 3
68029: NEG
68030: PUSH
68031: LD_INT 0
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: LD_INT 3
68040: NEG
68041: PUSH
68042: LD_INT 1
68044: NEG
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: LD_INT 3
68052: NEG
68053: PUSH
68054: LD_INT 1
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 4
68063: NEG
68064: PUSH
68065: LD_INT 0
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 4
68074: NEG
68075: PUSH
68076: LD_INT 1
68078: NEG
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: LD_INT 4
68086: NEG
68087: PUSH
68088: LD_INT 1
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 5
68097: NEG
68098: PUSH
68099: LD_INT 0
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 5
68108: NEG
68109: PUSH
68110: LD_INT 1
68112: NEG
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 5
68120: NEG
68121: PUSH
68122: LD_INT 1
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: PUSH
68129: LD_INT 6
68131: NEG
68132: PUSH
68133: LD_INT 0
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 6
68142: NEG
68143: PUSH
68144: LD_INT 1
68146: NEG
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68166: NOP4
68170: PUSH
68171: LD_INT 2
68173: NEG
68174: PUSH
68175: LD_INT 3
68177: NEG
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 3
68185: NEG
68186: PUSH
68187: LD_INT 2
68189: NEG
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PUSH
68195: LD_INT 3
68197: NEG
68198: PUSH
68199: LD_INT 3
68201: NEG
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: LD_INT 3
68209: NEG
68210: PUSH
68211: LD_INT 4
68213: NEG
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 4
68221: NEG
68222: PUSH
68223: LD_INT 3
68225: NEG
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 4
68233: NEG
68234: PUSH
68235: LD_INT 4
68237: NEG
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 4
68245: NEG
68246: PUSH
68247: LD_INT 5
68249: NEG
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 5
68257: NEG
68258: PUSH
68259: LD_INT 4
68261: NEG
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: LD_INT 5
68269: NEG
68270: PUSH
68271: LD_INT 5
68273: NEG
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 5
68281: NEG
68282: PUSH
68283: LD_INT 6
68285: NEG
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: LD_INT 6
68293: NEG
68294: PUSH
68295: LD_INT 5
68297: NEG
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 6
68305: NEG
68306: PUSH
68307: LD_INT 6
68309: NEG
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: LIST
68322: LIST
68323: LIST
68324: LIST
68325: LIST
68326: LIST
68327: LIST
68328: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68329: NOP4
68333: PUSH
68334: LD_INT 0
68336: PUSH
68337: LD_INT 2
68339: NEG
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 1
68347: NEG
68348: PUSH
68349: LD_INT 3
68351: NEG
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: LD_INT 1
68359: PUSH
68360: LD_INT 2
68362: NEG
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: LIST
68372: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68373: NOP4
68377: PUSH
68378: LD_INT 2
68380: PUSH
68381: LD_INT 0
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 2
68390: PUSH
68391: LD_INT 1
68393: NEG
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 3
68401: PUSH
68402: LD_INT 1
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: LIST
68413: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68414: NOP4
68418: PUSH
68419: LD_INT 2
68421: PUSH
68422: LD_INT 2
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: PUSH
68429: LD_INT 3
68431: PUSH
68432: LD_INT 2
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: PUSH
68439: LD_INT 2
68441: PUSH
68442: LD_INT 3
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: LIST
68453: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68454: NOP4
68458: PUSH
68459: LD_INT 0
68461: PUSH
68462: LD_INT 2
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 1
68471: PUSH
68472: LD_INT 3
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 1
68481: NEG
68482: PUSH
68483: LD_INT 2
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: LIST
68494: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68495: NOP4
68499: PUSH
68500: LD_INT 2
68502: NEG
68503: PUSH
68504: LD_INT 0
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 2
68513: NEG
68514: PUSH
68515: LD_INT 1
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: LD_INT 3
68524: NEG
68525: PUSH
68526: LD_INT 1
68528: NEG
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: LIST
68538: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68539: NOP4
68543: PUSH
68544: LD_INT 2
68546: NEG
68547: PUSH
68548: LD_INT 2
68550: NEG
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 2
68558: NEG
68559: PUSH
68560: LD_INT 3
68562: NEG
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 3
68570: NEG
68571: PUSH
68572: LD_INT 2
68574: NEG
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: LIST
68584: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68585: NOP4
68589: PUSH
68590: LD_INT 2
68592: NEG
68593: PUSH
68594: LD_INT 3
68596: NEG
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 1
68604: NEG
68605: PUSH
68606: LD_INT 3
68608: NEG
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68618: NOP4
68622: PUSH
68623: LD_INT 1
68625: PUSH
68626: LD_INT 2
68628: NEG
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 2
68636: PUSH
68637: LD_INT 1
68639: NEG
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68649: NOP4
68653: PUSH
68654: LD_INT 3
68656: PUSH
68657: LD_INT 1
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 3
68666: PUSH
68667: LD_INT 2
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68678: NOP4
68682: PUSH
68683: LD_INT 2
68685: PUSH
68686: LD_INT 3
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PUSH
68693: LD_INT 1
68695: PUSH
68696: LD_INT 3
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68707: NOP4
68711: PUSH
68712: LD_INT 1
68714: NEG
68715: PUSH
68716: LD_INT 2
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: PUSH
68723: LD_INT 2
68725: NEG
68726: PUSH
68727: LD_INT 1
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68738: NOP4
68742: PUSH
68743: LD_INT 3
68745: NEG
68746: PUSH
68747: LD_INT 1
68749: NEG
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 3
68757: NEG
68758: PUSH
68759: LD_INT 2
68761: NEG
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68771: NOP4
68775: PUSH
68776: LD_INT 1
68778: NEG
68779: PUSH
68780: LD_INT 3
68782: NEG
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PUSH
68788: LD_INT 0
68790: PUSH
68791: LD_INT 3
68793: NEG
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 1
68801: PUSH
68802: LD_INT 2
68804: NEG
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: LIST
68814: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68815: NOP4
68819: PUSH
68820: LD_INT 2
68822: PUSH
68823: LD_INT 1
68825: NEG
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 3
68833: PUSH
68834: LD_INT 0
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PUSH
68841: LD_INT 3
68843: PUSH
68844: LD_INT 1
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: LIST
68855: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68856: NOP4
68860: PUSH
68861: LD_INT 3
68863: PUSH
68864: LD_INT 2
68866: PUSH
68867: EMPTY
68868: LIST
68869: LIST
68870: PUSH
68871: LD_INT 3
68873: PUSH
68874: LD_INT 3
68876: PUSH
68877: EMPTY
68878: LIST
68879: LIST
68880: PUSH
68881: LD_INT 2
68883: PUSH
68884: LD_INT 3
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: LIST
68895: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68896: NOP4
68900: PUSH
68901: LD_INT 1
68903: PUSH
68904: LD_INT 3
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 0
68913: PUSH
68914: LD_INT 3
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: LD_INT 1
68923: NEG
68924: PUSH
68925: LD_INT 2
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: LIST
68936: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68937: NOP4
68941: PUSH
68942: LD_INT 2
68944: NEG
68945: PUSH
68946: LD_INT 1
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: LD_INT 3
68955: NEG
68956: PUSH
68957: LD_INT 0
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 3
68966: NEG
68967: PUSH
68968: LD_INT 1
68970: NEG
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: LIST
68980: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68981: NOP4
68985: PUSH
68986: LD_INT 2
68988: NEG
68989: PUSH
68990: LD_INT 3
68992: NEG
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: LD_INT 3
69000: NEG
69001: PUSH
69002: LD_INT 2
69004: NEG
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: LD_INT 3
69012: NEG
69013: PUSH
69014: LD_INT 3
69016: NEG
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: LIST
69026: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69027: NOP4
69031: PUSH
69032: LD_INT 1
69034: NEG
69035: PUSH
69036: LD_INT 2
69038: NEG
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: PUSH
69044: LD_INT 0
69046: PUSH
69047: LD_INT 2
69049: NEG
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: PUSH
69055: LD_INT 1
69057: PUSH
69058: LD_INT 1
69060: NEG
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: LIST
69070: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69071: NOP4
69075: PUSH
69076: LD_INT 1
69078: PUSH
69079: LD_INT 1
69081: NEG
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PUSH
69087: LD_INT 2
69089: PUSH
69090: LD_INT 0
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: LD_INT 2
69099: PUSH
69100: LD_INT 1
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: LIST
69111: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69112: NOP4
69116: PUSH
69117: LD_INT 2
69119: PUSH
69120: LD_INT 1
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 2
69129: PUSH
69130: LD_INT 2
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 1
69139: PUSH
69140: LD_INT 2
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: LIST
69151: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69152: NOP4
69156: PUSH
69157: LD_INT 1
69159: PUSH
69160: LD_INT 2
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: PUSH
69167: LD_INT 0
69169: PUSH
69170: LD_INT 2
69172: PUSH
69173: EMPTY
69174: LIST
69175: LIST
69176: PUSH
69177: LD_INT 1
69179: NEG
69180: PUSH
69181: LD_INT 1
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: LIST
69192: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69193: NOP4
69197: PUSH
69198: LD_INT 1
69200: NEG
69201: PUSH
69202: LD_INT 1
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: PUSH
69209: LD_INT 2
69211: NEG
69212: PUSH
69213: LD_INT 0
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: PUSH
69220: LD_INT 2
69222: NEG
69223: PUSH
69224: LD_INT 1
69226: NEG
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: LIST
69236: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69237: NOP4
69241: PUSH
69242: LD_INT 1
69244: NEG
69245: PUSH
69246: LD_INT 2
69248: NEG
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: PUSH
69254: LD_INT 2
69256: NEG
69257: PUSH
69258: LD_INT 1
69260: NEG
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PUSH
69266: LD_INT 2
69268: NEG
69269: PUSH
69270: LD_INT 2
69272: NEG
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: LIST
69282: ST_TO_ADDR
// end ; 2 :
69283: GO 72549
69285: LD_INT 2
69287: DOUBLE
69288: EQUAL
69289: IFTRUE 69293
69291: GO 72548
69293: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69294: NOP4
69298: PUSH
69299: LD_INT 4
69301: PUSH
69302: LD_INT 0
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 4
69311: PUSH
69312: LD_INT 1
69314: NEG
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 5
69322: PUSH
69323: LD_INT 0
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: LD_INT 5
69332: PUSH
69333: LD_INT 1
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: PUSH
69340: LD_INT 4
69342: PUSH
69343: LD_INT 1
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: LD_INT 3
69352: PUSH
69353: LD_INT 0
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 3
69362: PUSH
69363: LD_INT 1
69365: NEG
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 3
69373: PUSH
69374: LD_INT 2
69376: NEG
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 5
69384: PUSH
69385: LD_INT 2
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: PUSH
69392: LD_INT 3
69394: PUSH
69395: LD_INT 3
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: PUSH
69402: LD_INT 3
69404: PUSH
69405: LD_INT 2
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: PUSH
69412: LD_INT 4
69414: PUSH
69415: LD_INT 3
69417: PUSH
69418: EMPTY
69419: LIST
69420: LIST
69421: PUSH
69422: LD_INT 4
69424: PUSH
69425: LD_INT 4
69427: PUSH
69428: EMPTY
69429: LIST
69430: LIST
69431: PUSH
69432: LD_INT 3
69434: PUSH
69435: LD_INT 4
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: PUSH
69442: LD_INT 2
69444: PUSH
69445: LD_INT 3
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: PUSH
69452: LD_INT 2
69454: PUSH
69455: LD_INT 2
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: LD_INT 4
69464: PUSH
69465: LD_INT 2
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: LD_INT 2
69474: PUSH
69475: LD_INT 4
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: PUSH
69482: LD_INT 0
69484: PUSH
69485: LD_INT 4
69487: PUSH
69488: EMPTY
69489: LIST
69490: LIST
69491: PUSH
69492: LD_INT 0
69494: PUSH
69495: LD_INT 3
69497: PUSH
69498: EMPTY
69499: LIST
69500: LIST
69501: PUSH
69502: LD_INT 1
69504: PUSH
69505: LD_INT 4
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PUSH
69512: LD_INT 1
69514: PUSH
69515: LD_INT 5
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: PUSH
69522: LD_INT 0
69524: PUSH
69525: LD_INT 5
69527: PUSH
69528: EMPTY
69529: LIST
69530: LIST
69531: PUSH
69532: LD_INT 1
69534: NEG
69535: PUSH
69536: LD_INT 4
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 1
69545: NEG
69546: PUSH
69547: LD_INT 3
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 2
69556: PUSH
69557: LD_INT 5
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PUSH
69564: LD_INT 2
69566: NEG
69567: PUSH
69568: LD_INT 3
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: PUSH
69575: LD_INT 3
69577: NEG
69578: PUSH
69579: LD_INT 0
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PUSH
69586: LD_INT 3
69588: NEG
69589: PUSH
69590: LD_INT 1
69592: NEG
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_INT 2
69600: NEG
69601: PUSH
69602: LD_INT 0
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 2
69611: NEG
69612: PUSH
69613: LD_INT 1
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 3
69622: NEG
69623: PUSH
69624: LD_INT 1
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: PUSH
69631: LD_INT 4
69633: NEG
69634: PUSH
69635: LD_INT 0
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 4
69644: NEG
69645: PUSH
69646: LD_INT 1
69648: NEG
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PUSH
69654: LD_INT 4
69656: NEG
69657: PUSH
69658: LD_INT 2
69660: NEG
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: PUSH
69666: LD_INT 2
69668: NEG
69669: PUSH
69670: LD_INT 2
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 4
69679: NEG
69680: PUSH
69681: LD_INT 4
69683: NEG
69684: PUSH
69685: EMPTY
69686: LIST
69687: LIST
69688: PUSH
69689: LD_INT 4
69691: NEG
69692: PUSH
69693: LD_INT 5
69695: NEG
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: PUSH
69701: LD_INT 3
69703: NEG
69704: PUSH
69705: LD_INT 4
69707: NEG
69708: PUSH
69709: EMPTY
69710: LIST
69711: LIST
69712: PUSH
69713: LD_INT 3
69715: NEG
69716: PUSH
69717: LD_INT 3
69719: NEG
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: PUSH
69725: LD_INT 4
69727: NEG
69728: PUSH
69729: LD_INT 3
69731: NEG
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: PUSH
69737: LD_INT 5
69739: NEG
69740: PUSH
69741: LD_INT 4
69743: NEG
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: LD_INT 5
69751: NEG
69752: PUSH
69753: LD_INT 5
69755: NEG
69756: PUSH
69757: EMPTY
69758: LIST
69759: LIST
69760: PUSH
69761: LD_INT 3
69763: NEG
69764: PUSH
69765: LD_INT 5
69767: NEG
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: PUSH
69773: LD_INT 5
69775: NEG
69776: PUSH
69777: LD_INT 3
69779: NEG
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: LIST
69810: LIST
69811: LIST
69812: LIST
69813: LIST
69814: LIST
69815: LIST
69816: LIST
69817: LIST
69818: LIST
69819: LIST
69820: LIST
69821: LIST
69822: LIST
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: LIST
69831: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69832: NOP4
69836: PUSH
69837: LD_INT 4
69839: PUSH
69840: LD_INT 4
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PUSH
69847: LD_INT 4
69849: PUSH
69850: LD_INT 3
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: PUSH
69857: LD_INT 5
69859: PUSH
69860: LD_INT 4
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: PUSH
69867: LD_INT 5
69869: PUSH
69870: LD_INT 5
69872: PUSH
69873: EMPTY
69874: LIST
69875: LIST
69876: PUSH
69877: LD_INT 4
69879: PUSH
69880: LD_INT 5
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: LD_INT 3
69889: PUSH
69890: LD_INT 4
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: LD_INT 3
69899: PUSH
69900: LD_INT 3
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: LD_INT 5
69909: PUSH
69910: LD_INT 3
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 3
69919: PUSH
69920: LD_INT 5
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: LD_INT 0
69929: PUSH
69930: LD_INT 3
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: PUSH
69937: LD_INT 0
69939: PUSH
69940: LD_INT 2
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: LD_INT 1
69949: PUSH
69950: LD_INT 3
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PUSH
69957: LD_INT 1
69959: PUSH
69960: LD_INT 4
69962: PUSH
69963: EMPTY
69964: LIST
69965: LIST
69966: PUSH
69967: LD_INT 0
69969: PUSH
69970: LD_INT 4
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: PUSH
69977: LD_INT 1
69979: NEG
69980: PUSH
69981: LD_INT 3
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 1
69990: NEG
69991: PUSH
69992: LD_INT 2
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: PUSH
69999: LD_INT 2
70001: PUSH
70002: LD_INT 4
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: PUSH
70009: LD_INT 2
70011: NEG
70012: PUSH
70013: LD_INT 2
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PUSH
70020: LD_INT 4
70022: NEG
70023: PUSH
70024: LD_INT 0
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: PUSH
70031: LD_INT 4
70033: NEG
70034: PUSH
70035: LD_INT 1
70037: NEG
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: PUSH
70043: LD_INT 3
70045: NEG
70046: PUSH
70047: LD_INT 0
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: PUSH
70054: LD_INT 3
70056: NEG
70057: PUSH
70058: LD_INT 1
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: PUSH
70065: LD_INT 4
70067: NEG
70068: PUSH
70069: LD_INT 1
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: PUSH
70076: LD_INT 5
70078: NEG
70079: PUSH
70080: LD_INT 0
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: LD_INT 5
70089: NEG
70090: PUSH
70091: LD_INT 1
70093: NEG
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: LD_INT 5
70101: NEG
70102: PUSH
70103: LD_INT 2
70105: NEG
70106: PUSH
70107: EMPTY
70108: LIST
70109: LIST
70110: PUSH
70111: LD_INT 3
70113: NEG
70114: PUSH
70115: LD_INT 2
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PUSH
70122: LD_INT 3
70124: NEG
70125: PUSH
70126: LD_INT 3
70128: NEG
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: PUSH
70134: LD_INT 3
70136: NEG
70137: PUSH
70138: LD_INT 4
70140: NEG
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: LD_INT 2
70148: NEG
70149: PUSH
70150: LD_INT 3
70152: NEG
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: PUSH
70158: LD_INT 2
70160: NEG
70161: PUSH
70162: LD_INT 2
70164: NEG
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PUSH
70170: LD_INT 3
70172: NEG
70173: PUSH
70174: LD_INT 2
70176: NEG
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: PUSH
70182: LD_INT 4
70184: NEG
70185: PUSH
70186: LD_INT 3
70188: NEG
70189: PUSH
70190: EMPTY
70191: LIST
70192: LIST
70193: PUSH
70194: LD_INT 4
70196: NEG
70197: PUSH
70198: LD_INT 4
70200: NEG
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: PUSH
70206: LD_INT 2
70208: NEG
70209: PUSH
70210: LD_INT 4
70212: NEG
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: PUSH
70218: LD_INT 4
70220: NEG
70221: PUSH
70222: LD_INT 2
70224: NEG
70225: PUSH
70226: EMPTY
70227: LIST
70228: LIST
70229: PUSH
70230: LD_INT 0
70232: PUSH
70233: LD_INT 4
70235: NEG
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: LD_INT 0
70243: PUSH
70244: LD_INT 5
70246: NEG
70247: PUSH
70248: EMPTY
70249: LIST
70250: LIST
70251: PUSH
70252: LD_INT 1
70254: PUSH
70255: LD_INT 4
70257: NEG
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: LD_INT 1
70265: PUSH
70266: LD_INT 3
70268: NEG
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: PUSH
70274: LD_INT 0
70276: PUSH
70277: LD_INT 3
70279: NEG
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: PUSH
70285: LD_INT 1
70287: NEG
70288: PUSH
70289: LD_INT 4
70291: NEG
70292: PUSH
70293: EMPTY
70294: LIST
70295: LIST
70296: PUSH
70297: LD_INT 1
70299: NEG
70300: PUSH
70301: LD_INT 5
70303: NEG
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: LD_INT 2
70311: PUSH
70312: LD_INT 3
70314: NEG
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: LD_INT 2
70322: NEG
70323: PUSH
70324: LD_INT 5
70326: NEG
70327: PUSH
70328: EMPTY
70329: LIST
70330: LIST
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: LIST
70359: LIST
70360: LIST
70361: LIST
70362: LIST
70363: LIST
70364: LIST
70365: LIST
70366: LIST
70367: LIST
70368: LIST
70369: LIST
70370: LIST
70371: LIST
70372: LIST
70373: LIST
70374: LIST
70375: LIST
70376: LIST
70377: LIST
70378: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70379: NOP4
70383: PUSH
70384: LD_INT 0
70386: PUSH
70387: LD_INT 4
70389: PUSH
70390: EMPTY
70391: LIST
70392: LIST
70393: PUSH
70394: LD_INT 0
70396: PUSH
70397: LD_INT 3
70399: PUSH
70400: EMPTY
70401: LIST
70402: LIST
70403: PUSH
70404: LD_INT 1
70406: PUSH
70407: LD_INT 4
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PUSH
70414: LD_INT 1
70416: PUSH
70417: LD_INT 5
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: PUSH
70424: LD_INT 0
70426: PUSH
70427: LD_INT 5
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: PUSH
70434: LD_INT 1
70436: NEG
70437: PUSH
70438: LD_INT 4
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: PUSH
70445: LD_INT 1
70447: NEG
70448: PUSH
70449: LD_INT 3
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: PUSH
70456: LD_INT 2
70458: PUSH
70459: LD_INT 5
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: PUSH
70466: LD_INT 2
70468: NEG
70469: PUSH
70470: LD_INT 3
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PUSH
70477: LD_INT 3
70479: NEG
70480: PUSH
70481: LD_INT 0
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: PUSH
70488: LD_INT 3
70490: NEG
70491: PUSH
70492: LD_INT 1
70494: NEG
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 2
70502: NEG
70503: PUSH
70504: LD_INT 0
70506: PUSH
70507: EMPTY
70508: LIST
70509: LIST
70510: PUSH
70511: LD_INT 2
70513: NEG
70514: PUSH
70515: LD_INT 1
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: LD_INT 3
70524: NEG
70525: PUSH
70526: LD_INT 1
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 4
70535: NEG
70536: PUSH
70537: LD_INT 0
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: LD_INT 4
70546: NEG
70547: PUSH
70548: LD_INT 1
70550: NEG
70551: PUSH
70552: EMPTY
70553: LIST
70554: LIST
70555: PUSH
70556: LD_INT 4
70558: NEG
70559: PUSH
70560: LD_INT 2
70562: NEG
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: PUSH
70568: LD_INT 2
70570: NEG
70571: PUSH
70572: LD_INT 2
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: PUSH
70579: LD_INT 4
70581: NEG
70582: PUSH
70583: LD_INT 4
70585: NEG
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 4
70593: NEG
70594: PUSH
70595: LD_INT 5
70597: NEG
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: LD_INT 3
70605: NEG
70606: PUSH
70607: LD_INT 4
70609: NEG
70610: PUSH
70611: EMPTY
70612: LIST
70613: LIST
70614: PUSH
70615: LD_INT 3
70617: NEG
70618: PUSH
70619: LD_INT 3
70621: NEG
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: PUSH
70627: LD_INT 4
70629: NEG
70630: PUSH
70631: LD_INT 3
70633: NEG
70634: PUSH
70635: EMPTY
70636: LIST
70637: LIST
70638: PUSH
70639: LD_INT 5
70641: NEG
70642: PUSH
70643: LD_INT 4
70645: NEG
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 5
70653: NEG
70654: PUSH
70655: LD_INT 5
70657: NEG
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: PUSH
70663: LD_INT 3
70665: NEG
70666: PUSH
70667: LD_INT 5
70669: NEG
70670: PUSH
70671: EMPTY
70672: LIST
70673: LIST
70674: PUSH
70675: LD_INT 5
70677: NEG
70678: PUSH
70679: LD_INT 3
70681: NEG
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: PUSH
70687: LD_INT 0
70689: PUSH
70690: LD_INT 3
70692: NEG
70693: PUSH
70694: EMPTY
70695: LIST
70696: LIST
70697: PUSH
70698: LD_INT 0
70700: PUSH
70701: LD_INT 4
70703: NEG
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PUSH
70709: LD_INT 1
70711: PUSH
70712: LD_INT 3
70714: NEG
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: PUSH
70720: LD_INT 1
70722: PUSH
70723: LD_INT 2
70725: NEG
70726: PUSH
70727: EMPTY
70728: LIST
70729: LIST
70730: PUSH
70731: LD_INT 0
70733: PUSH
70734: LD_INT 2
70736: NEG
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 1
70744: NEG
70745: PUSH
70746: LD_INT 3
70748: NEG
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: PUSH
70754: LD_INT 1
70756: NEG
70757: PUSH
70758: LD_INT 4
70760: NEG
70761: PUSH
70762: EMPTY
70763: LIST
70764: LIST
70765: PUSH
70766: LD_INT 2
70768: PUSH
70769: LD_INT 2
70771: NEG
70772: PUSH
70773: EMPTY
70774: LIST
70775: LIST
70776: PUSH
70777: LD_INT 2
70779: NEG
70780: PUSH
70781: LD_INT 4
70783: NEG
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: PUSH
70789: LD_INT 4
70791: PUSH
70792: LD_INT 0
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 4
70801: PUSH
70802: LD_INT 1
70804: NEG
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: PUSH
70810: LD_INT 5
70812: PUSH
70813: LD_INT 0
70815: PUSH
70816: EMPTY
70817: LIST
70818: LIST
70819: PUSH
70820: LD_INT 5
70822: PUSH
70823: LD_INT 1
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: PUSH
70830: LD_INT 4
70832: PUSH
70833: LD_INT 1
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: PUSH
70840: LD_INT 3
70842: PUSH
70843: LD_INT 0
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PUSH
70850: LD_INT 3
70852: PUSH
70853: LD_INT 1
70855: NEG
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: LD_INT 3
70863: PUSH
70864: LD_INT 2
70866: NEG
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PUSH
70872: LD_INT 5
70874: PUSH
70875: LD_INT 2
70877: PUSH
70878: EMPTY
70879: LIST
70880: LIST
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: LIST
70886: LIST
70887: LIST
70888: LIST
70889: LIST
70890: LIST
70891: LIST
70892: LIST
70893: LIST
70894: LIST
70895: LIST
70896: LIST
70897: LIST
70898: LIST
70899: LIST
70900: LIST
70901: LIST
70902: LIST
70903: LIST
70904: LIST
70905: LIST
70906: LIST
70907: LIST
70908: LIST
70909: LIST
70910: LIST
70911: LIST
70912: LIST
70913: LIST
70914: LIST
70915: LIST
70916: LIST
70917: LIST
70918: LIST
70919: LIST
70920: LIST
70921: LIST
70922: LIST
70923: LIST
70924: LIST
70925: LIST
70926: LIST
70927: LIST
70928: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70929: NOP4
70933: PUSH
70934: LD_INT 4
70936: NEG
70937: PUSH
70938: LD_INT 0
70940: PUSH
70941: EMPTY
70942: LIST
70943: LIST
70944: PUSH
70945: LD_INT 4
70947: NEG
70948: PUSH
70949: LD_INT 1
70951: NEG
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: PUSH
70957: LD_INT 3
70959: NEG
70960: PUSH
70961: LD_INT 0
70963: PUSH
70964: EMPTY
70965: LIST
70966: LIST
70967: PUSH
70968: LD_INT 3
70970: NEG
70971: PUSH
70972: LD_INT 1
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: PUSH
70979: LD_INT 4
70981: NEG
70982: PUSH
70983: LD_INT 1
70985: PUSH
70986: EMPTY
70987: LIST
70988: LIST
70989: PUSH
70990: LD_INT 5
70992: NEG
70993: PUSH
70994: LD_INT 0
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: LD_INT 5
71003: NEG
71004: PUSH
71005: LD_INT 1
71007: NEG
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: PUSH
71013: LD_INT 5
71015: NEG
71016: PUSH
71017: LD_INT 2
71019: NEG
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: PUSH
71025: LD_INT 3
71027: NEG
71028: PUSH
71029: LD_INT 2
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: PUSH
71036: LD_INT 3
71038: NEG
71039: PUSH
71040: LD_INT 3
71042: NEG
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: PUSH
71048: LD_INT 3
71050: NEG
71051: PUSH
71052: LD_INT 4
71054: NEG
71055: PUSH
71056: EMPTY
71057: LIST
71058: LIST
71059: PUSH
71060: LD_INT 2
71062: NEG
71063: PUSH
71064: LD_INT 3
71066: NEG
71067: PUSH
71068: EMPTY
71069: LIST
71070: LIST
71071: PUSH
71072: LD_INT 2
71074: NEG
71075: PUSH
71076: LD_INT 2
71078: NEG
71079: PUSH
71080: EMPTY
71081: LIST
71082: LIST
71083: PUSH
71084: LD_INT 3
71086: NEG
71087: PUSH
71088: LD_INT 2
71090: NEG
71091: PUSH
71092: EMPTY
71093: LIST
71094: LIST
71095: PUSH
71096: LD_INT 4
71098: NEG
71099: PUSH
71100: LD_INT 3
71102: NEG
71103: PUSH
71104: EMPTY
71105: LIST
71106: LIST
71107: PUSH
71108: LD_INT 4
71110: NEG
71111: PUSH
71112: LD_INT 4
71114: NEG
71115: PUSH
71116: EMPTY
71117: LIST
71118: LIST
71119: PUSH
71120: LD_INT 2
71122: NEG
71123: PUSH
71124: LD_INT 4
71126: NEG
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: PUSH
71132: LD_INT 4
71134: NEG
71135: PUSH
71136: LD_INT 2
71138: NEG
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PUSH
71144: LD_INT 0
71146: PUSH
71147: LD_INT 4
71149: NEG
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: PUSH
71155: LD_INT 0
71157: PUSH
71158: LD_INT 5
71160: NEG
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: PUSH
71166: LD_INT 1
71168: PUSH
71169: LD_INT 4
71171: NEG
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: PUSH
71177: LD_INT 1
71179: PUSH
71180: LD_INT 3
71182: NEG
71183: PUSH
71184: EMPTY
71185: LIST
71186: LIST
71187: PUSH
71188: LD_INT 0
71190: PUSH
71191: LD_INT 3
71193: NEG
71194: PUSH
71195: EMPTY
71196: LIST
71197: LIST
71198: PUSH
71199: LD_INT 1
71201: NEG
71202: PUSH
71203: LD_INT 4
71205: NEG
71206: PUSH
71207: EMPTY
71208: LIST
71209: LIST
71210: PUSH
71211: LD_INT 1
71213: NEG
71214: PUSH
71215: LD_INT 5
71217: NEG
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: PUSH
71223: LD_INT 2
71225: PUSH
71226: LD_INT 3
71228: NEG
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PUSH
71234: LD_INT 2
71236: NEG
71237: PUSH
71238: LD_INT 5
71240: NEG
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: PUSH
71246: LD_INT 3
71248: PUSH
71249: LD_INT 0
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: LD_INT 3
71258: PUSH
71259: LD_INT 1
71261: NEG
71262: PUSH
71263: EMPTY
71264: LIST
71265: LIST
71266: PUSH
71267: LD_INT 4
71269: PUSH
71270: LD_INT 0
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PUSH
71277: LD_INT 4
71279: PUSH
71280: LD_INT 1
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: LD_INT 3
71289: PUSH
71290: LD_INT 1
71292: PUSH
71293: EMPTY
71294: LIST
71295: LIST
71296: PUSH
71297: LD_INT 2
71299: PUSH
71300: LD_INT 0
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: PUSH
71307: LD_INT 2
71309: PUSH
71310: LD_INT 1
71312: NEG
71313: PUSH
71314: EMPTY
71315: LIST
71316: LIST
71317: PUSH
71318: LD_INT 2
71320: PUSH
71321: LD_INT 2
71323: NEG
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: PUSH
71329: LD_INT 4
71331: PUSH
71332: LD_INT 2
71334: PUSH
71335: EMPTY
71336: LIST
71337: LIST
71338: PUSH
71339: LD_INT 4
71341: PUSH
71342: LD_INT 4
71344: PUSH
71345: EMPTY
71346: LIST
71347: LIST
71348: PUSH
71349: LD_INT 4
71351: PUSH
71352: LD_INT 3
71354: PUSH
71355: EMPTY
71356: LIST
71357: LIST
71358: PUSH
71359: LD_INT 5
71361: PUSH
71362: LD_INT 4
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: PUSH
71369: LD_INT 5
71371: PUSH
71372: LD_INT 5
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: PUSH
71379: LD_INT 4
71381: PUSH
71382: LD_INT 5
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: LD_INT 3
71391: PUSH
71392: LD_INT 4
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PUSH
71399: LD_INT 3
71401: PUSH
71402: LD_INT 3
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PUSH
71409: LD_INT 5
71411: PUSH
71412: LD_INT 3
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: PUSH
71419: LD_INT 3
71421: PUSH
71422: LD_INT 5
71424: PUSH
71425: EMPTY
71426: LIST
71427: LIST
71428: PUSH
71429: EMPTY
71430: LIST
71431: LIST
71432: LIST
71433: LIST
71434: LIST
71435: LIST
71436: LIST
71437: LIST
71438: LIST
71439: LIST
71440: LIST
71441: LIST
71442: LIST
71443: LIST
71444: LIST
71445: LIST
71446: LIST
71447: LIST
71448: LIST
71449: LIST
71450: LIST
71451: LIST
71452: LIST
71453: LIST
71454: LIST
71455: LIST
71456: LIST
71457: LIST
71458: LIST
71459: LIST
71460: LIST
71461: LIST
71462: LIST
71463: LIST
71464: LIST
71465: LIST
71466: LIST
71467: LIST
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: LIST
71474: LIST
71475: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71476: NOP4
71480: PUSH
71481: LD_INT 4
71483: NEG
71484: PUSH
71485: LD_INT 4
71487: NEG
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: PUSH
71493: LD_INT 4
71495: NEG
71496: PUSH
71497: LD_INT 5
71499: NEG
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: PUSH
71505: LD_INT 3
71507: NEG
71508: PUSH
71509: LD_INT 4
71511: NEG
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: PUSH
71517: LD_INT 3
71519: NEG
71520: PUSH
71521: LD_INT 3
71523: NEG
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: PUSH
71529: LD_INT 4
71531: NEG
71532: PUSH
71533: LD_INT 3
71535: NEG
71536: PUSH
71537: EMPTY
71538: LIST
71539: LIST
71540: PUSH
71541: LD_INT 5
71543: NEG
71544: PUSH
71545: LD_INT 4
71547: NEG
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: PUSH
71553: LD_INT 5
71555: NEG
71556: PUSH
71557: LD_INT 5
71559: NEG
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PUSH
71565: LD_INT 3
71567: NEG
71568: PUSH
71569: LD_INT 5
71571: NEG
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: PUSH
71577: LD_INT 5
71579: NEG
71580: PUSH
71581: LD_INT 3
71583: NEG
71584: PUSH
71585: EMPTY
71586: LIST
71587: LIST
71588: PUSH
71589: LD_INT 0
71591: PUSH
71592: LD_INT 3
71594: NEG
71595: PUSH
71596: EMPTY
71597: LIST
71598: LIST
71599: PUSH
71600: LD_INT 0
71602: PUSH
71603: LD_INT 4
71605: NEG
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 1
71613: PUSH
71614: LD_INT 3
71616: NEG
71617: PUSH
71618: EMPTY
71619: LIST
71620: LIST
71621: PUSH
71622: LD_INT 1
71624: PUSH
71625: LD_INT 2
71627: NEG
71628: PUSH
71629: EMPTY
71630: LIST
71631: LIST
71632: PUSH
71633: LD_INT 0
71635: PUSH
71636: LD_INT 2
71638: NEG
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: PUSH
71644: LD_INT 1
71646: NEG
71647: PUSH
71648: LD_INT 3
71650: NEG
71651: PUSH
71652: EMPTY
71653: LIST
71654: LIST
71655: PUSH
71656: LD_INT 1
71658: NEG
71659: PUSH
71660: LD_INT 4
71662: NEG
71663: PUSH
71664: EMPTY
71665: LIST
71666: LIST
71667: PUSH
71668: LD_INT 2
71670: PUSH
71671: LD_INT 2
71673: NEG
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: PUSH
71679: LD_INT 2
71681: NEG
71682: PUSH
71683: LD_INT 4
71685: NEG
71686: PUSH
71687: EMPTY
71688: LIST
71689: LIST
71690: PUSH
71691: LD_INT 4
71693: PUSH
71694: LD_INT 0
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: PUSH
71701: LD_INT 4
71703: PUSH
71704: LD_INT 1
71706: NEG
71707: PUSH
71708: EMPTY
71709: LIST
71710: LIST
71711: PUSH
71712: LD_INT 5
71714: PUSH
71715: LD_INT 0
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: PUSH
71722: LD_INT 5
71724: PUSH
71725: LD_INT 1
71727: PUSH
71728: EMPTY
71729: LIST
71730: LIST
71731: PUSH
71732: LD_INT 4
71734: PUSH
71735: LD_INT 1
71737: PUSH
71738: EMPTY
71739: LIST
71740: LIST
71741: PUSH
71742: LD_INT 3
71744: PUSH
71745: LD_INT 0
71747: PUSH
71748: EMPTY
71749: LIST
71750: LIST
71751: PUSH
71752: LD_INT 3
71754: PUSH
71755: LD_INT 1
71757: NEG
71758: PUSH
71759: EMPTY
71760: LIST
71761: LIST
71762: PUSH
71763: LD_INT 3
71765: PUSH
71766: LD_INT 2
71768: NEG
71769: PUSH
71770: EMPTY
71771: LIST
71772: LIST
71773: PUSH
71774: LD_INT 5
71776: PUSH
71777: LD_INT 2
71779: PUSH
71780: EMPTY
71781: LIST
71782: LIST
71783: PUSH
71784: LD_INT 3
71786: PUSH
71787: LD_INT 3
71789: PUSH
71790: EMPTY
71791: LIST
71792: LIST
71793: PUSH
71794: LD_INT 3
71796: PUSH
71797: LD_INT 2
71799: PUSH
71800: EMPTY
71801: LIST
71802: LIST
71803: PUSH
71804: LD_INT 4
71806: PUSH
71807: LD_INT 3
71809: PUSH
71810: EMPTY
71811: LIST
71812: LIST
71813: PUSH
71814: LD_INT 4
71816: PUSH
71817: LD_INT 4
71819: PUSH
71820: EMPTY
71821: LIST
71822: LIST
71823: PUSH
71824: LD_INT 3
71826: PUSH
71827: LD_INT 4
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: PUSH
71834: LD_INT 2
71836: PUSH
71837: LD_INT 3
71839: PUSH
71840: EMPTY
71841: LIST
71842: LIST
71843: PUSH
71844: LD_INT 2
71846: PUSH
71847: LD_INT 2
71849: PUSH
71850: EMPTY
71851: LIST
71852: LIST
71853: PUSH
71854: LD_INT 4
71856: PUSH
71857: LD_INT 2
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: PUSH
71864: LD_INT 2
71866: PUSH
71867: LD_INT 4
71869: PUSH
71870: EMPTY
71871: LIST
71872: LIST
71873: PUSH
71874: LD_INT 0
71876: PUSH
71877: LD_INT 4
71879: PUSH
71880: EMPTY
71881: LIST
71882: LIST
71883: PUSH
71884: LD_INT 0
71886: PUSH
71887: LD_INT 3
71889: PUSH
71890: EMPTY
71891: LIST
71892: LIST
71893: PUSH
71894: LD_INT 1
71896: PUSH
71897: LD_INT 4
71899: PUSH
71900: EMPTY
71901: LIST
71902: LIST
71903: PUSH
71904: LD_INT 1
71906: PUSH
71907: LD_INT 5
71909: PUSH
71910: EMPTY
71911: LIST
71912: LIST
71913: PUSH
71914: LD_INT 0
71916: PUSH
71917: LD_INT 5
71919: PUSH
71920: EMPTY
71921: LIST
71922: LIST
71923: PUSH
71924: LD_INT 1
71926: NEG
71927: PUSH
71928: LD_INT 4
71930: PUSH
71931: EMPTY
71932: LIST
71933: LIST
71934: PUSH
71935: LD_INT 1
71937: NEG
71938: PUSH
71939: LD_INT 3
71941: PUSH
71942: EMPTY
71943: LIST
71944: LIST
71945: PUSH
71946: LD_INT 2
71948: PUSH
71949: LD_INT 5
71951: PUSH
71952: EMPTY
71953: LIST
71954: LIST
71955: PUSH
71956: LD_INT 2
71958: NEG
71959: PUSH
71960: LD_INT 3
71962: PUSH
71963: EMPTY
71964: LIST
71965: LIST
71966: PUSH
71967: EMPTY
71968: LIST
71969: LIST
71970: LIST
71971: LIST
71972: LIST
71973: LIST
71974: LIST
71975: LIST
71976: LIST
71977: LIST
71978: LIST
71979: LIST
71980: LIST
71981: LIST
71982: LIST
71983: LIST
71984: LIST
71985: LIST
71986: LIST
71987: LIST
71988: LIST
71989: LIST
71990: LIST
71991: LIST
71992: LIST
71993: LIST
71994: LIST
71995: LIST
71996: LIST
71997: LIST
71998: LIST
71999: LIST
72000: LIST
72001: LIST
72002: LIST
72003: LIST
72004: LIST
72005: LIST
72006: LIST
72007: LIST
72008: LIST
72009: LIST
72010: LIST
72011: LIST
72012: LIST
72013: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72014: NOP4
72018: PUSH
72019: LD_INT 0
72021: PUSH
72022: LD_INT 4
72024: NEG
72025: PUSH
72026: EMPTY
72027: LIST
72028: LIST
72029: PUSH
72030: LD_INT 0
72032: PUSH
72033: LD_INT 5
72035: NEG
72036: PUSH
72037: EMPTY
72038: LIST
72039: LIST
72040: PUSH
72041: LD_INT 1
72043: PUSH
72044: LD_INT 4
72046: NEG
72047: PUSH
72048: EMPTY
72049: LIST
72050: LIST
72051: PUSH
72052: LD_INT 1
72054: PUSH
72055: LD_INT 3
72057: NEG
72058: PUSH
72059: EMPTY
72060: LIST
72061: LIST
72062: PUSH
72063: LD_INT 0
72065: PUSH
72066: LD_INT 3
72068: NEG
72069: PUSH
72070: EMPTY
72071: LIST
72072: LIST
72073: PUSH
72074: LD_INT 1
72076: NEG
72077: PUSH
72078: LD_INT 4
72080: NEG
72081: PUSH
72082: EMPTY
72083: LIST
72084: LIST
72085: PUSH
72086: LD_INT 1
72088: NEG
72089: PUSH
72090: LD_INT 5
72092: NEG
72093: PUSH
72094: EMPTY
72095: LIST
72096: LIST
72097: PUSH
72098: LD_INT 2
72100: PUSH
72101: LD_INT 3
72103: NEG
72104: PUSH
72105: EMPTY
72106: LIST
72107: LIST
72108: PUSH
72109: LD_INT 2
72111: NEG
72112: PUSH
72113: LD_INT 5
72115: NEG
72116: PUSH
72117: EMPTY
72118: LIST
72119: LIST
72120: PUSH
72121: LD_INT 3
72123: PUSH
72124: LD_INT 0
72126: PUSH
72127: EMPTY
72128: LIST
72129: LIST
72130: PUSH
72131: LD_INT 3
72133: PUSH
72134: LD_INT 1
72136: NEG
72137: PUSH
72138: EMPTY
72139: LIST
72140: LIST
72141: PUSH
72142: LD_INT 4
72144: PUSH
72145: LD_INT 0
72147: PUSH
72148: EMPTY
72149: LIST
72150: LIST
72151: PUSH
72152: LD_INT 4
72154: PUSH
72155: LD_INT 1
72157: PUSH
72158: EMPTY
72159: LIST
72160: LIST
72161: PUSH
72162: LD_INT 3
72164: PUSH
72165: LD_INT 1
72167: PUSH
72168: EMPTY
72169: LIST
72170: LIST
72171: PUSH
72172: LD_INT 2
72174: PUSH
72175: LD_INT 0
72177: PUSH
72178: EMPTY
72179: LIST
72180: LIST
72181: PUSH
72182: LD_INT 2
72184: PUSH
72185: LD_INT 1
72187: NEG
72188: PUSH
72189: EMPTY
72190: LIST
72191: LIST
72192: PUSH
72193: LD_INT 2
72195: PUSH
72196: LD_INT 2
72198: NEG
72199: PUSH
72200: EMPTY
72201: LIST
72202: LIST
72203: PUSH
72204: LD_INT 4
72206: PUSH
72207: LD_INT 2
72209: PUSH
72210: EMPTY
72211: LIST
72212: LIST
72213: PUSH
72214: LD_INT 4
72216: PUSH
72217: LD_INT 4
72219: PUSH
72220: EMPTY
72221: LIST
72222: LIST
72223: PUSH
72224: LD_INT 4
72226: PUSH
72227: LD_INT 3
72229: PUSH
72230: EMPTY
72231: LIST
72232: LIST
72233: PUSH
72234: LD_INT 5
72236: PUSH
72237: LD_INT 4
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: PUSH
72244: LD_INT 5
72246: PUSH
72247: LD_INT 5
72249: PUSH
72250: EMPTY
72251: LIST
72252: LIST
72253: PUSH
72254: LD_INT 4
72256: PUSH
72257: LD_INT 5
72259: PUSH
72260: EMPTY
72261: LIST
72262: LIST
72263: PUSH
72264: LD_INT 3
72266: PUSH
72267: LD_INT 4
72269: PUSH
72270: EMPTY
72271: LIST
72272: LIST
72273: PUSH
72274: LD_INT 3
72276: PUSH
72277: LD_INT 3
72279: PUSH
72280: EMPTY
72281: LIST
72282: LIST
72283: PUSH
72284: LD_INT 5
72286: PUSH
72287: LD_INT 3
72289: PUSH
72290: EMPTY
72291: LIST
72292: LIST
72293: PUSH
72294: LD_INT 3
72296: PUSH
72297: LD_INT 5
72299: PUSH
72300: EMPTY
72301: LIST
72302: LIST
72303: PUSH
72304: LD_INT 0
72306: PUSH
72307: LD_INT 3
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: PUSH
72314: LD_INT 0
72316: PUSH
72317: LD_INT 2
72319: PUSH
72320: EMPTY
72321: LIST
72322: LIST
72323: PUSH
72324: LD_INT 1
72326: PUSH
72327: LD_INT 3
72329: PUSH
72330: EMPTY
72331: LIST
72332: LIST
72333: PUSH
72334: LD_INT 1
72336: PUSH
72337: LD_INT 4
72339: PUSH
72340: EMPTY
72341: LIST
72342: LIST
72343: PUSH
72344: LD_INT 0
72346: PUSH
72347: LD_INT 4
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: PUSH
72354: LD_INT 1
72356: NEG
72357: PUSH
72358: LD_INT 3
72360: PUSH
72361: EMPTY
72362: LIST
72363: LIST
72364: PUSH
72365: LD_INT 1
72367: NEG
72368: PUSH
72369: LD_INT 2
72371: PUSH
72372: EMPTY
72373: LIST
72374: LIST
72375: PUSH
72376: LD_INT 2
72378: PUSH
72379: LD_INT 4
72381: PUSH
72382: EMPTY
72383: LIST
72384: LIST
72385: PUSH
72386: LD_INT 2
72388: NEG
72389: PUSH
72390: LD_INT 2
72392: PUSH
72393: EMPTY
72394: LIST
72395: LIST
72396: PUSH
72397: LD_INT 4
72399: NEG
72400: PUSH
72401: LD_INT 0
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PUSH
72408: LD_INT 4
72410: NEG
72411: PUSH
72412: LD_INT 1
72414: NEG
72415: PUSH
72416: EMPTY
72417: LIST
72418: LIST
72419: PUSH
72420: LD_INT 3
72422: NEG
72423: PUSH
72424: LD_INT 0
72426: PUSH
72427: EMPTY
72428: LIST
72429: LIST
72430: PUSH
72431: LD_INT 3
72433: NEG
72434: PUSH
72435: LD_INT 1
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: PUSH
72442: LD_INT 4
72444: NEG
72445: PUSH
72446: LD_INT 1
72448: PUSH
72449: EMPTY
72450: LIST
72451: LIST
72452: PUSH
72453: LD_INT 5
72455: NEG
72456: PUSH
72457: LD_INT 0
72459: PUSH
72460: EMPTY
72461: LIST
72462: LIST
72463: PUSH
72464: LD_INT 5
72466: NEG
72467: PUSH
72468: LD_INT 1
72470: NEG
72471: PUSH
72472: EMPTY
72473: LIST
72474: LIST
72475: PUSH
72476: LD_INT 5
72478: NEG
72479: PUSH
72480: LD_INT 2
72482: NEG
72483: PUSH
72484: EMPTY
72485: LIST
72486: LIST
72487: PUSH
72488: LD_INT 3
72490: NEG
72491: PUSH
72492: LD_INT 2
72494: PUSH
72495: EMPTY
72496: LIST
72497: LIST
72498: PUSH
72499: EMPTY
72500: LIST
72501: LIST
72502: LIST
72503: LIST
72504: LIST
72505: LIST
72506: LIST
72507: LIST
72508: LIST
72509: LIST
72510: LIST
72511: LIST
72512: LIST
72513: LIST
72514: LIST
72515: LIST
72516: LIST
72517: LIST
72518: LIST
72519: LIST
72520: LIST
72521: LIST
72522: LIST
72523: LIST
72524: LIST
72525: LIST
72526: LIST
72527: LIST
72528: LIST
72529: LIST
72530: LIST
72531: LIST
72532: LIST
72533: LIST
72534: LIST
72535: LIST
72536: LIST
72537: LIST
72538: LIST
72539: LIST
72540: LIST
72541: LIST
72542: LIST
72543: LIST
72544: LIST
72545: ST_TO_ADDR
// end ; end ;
72546: GO 72549
72548: POP
// case btype of b_depot , b_warehouse :
72549: NOP4
72553: PUSH
72554: LD_INT 0
72556: DOUBLE
72557: EQUAL
72558: IFTRUE 72568
72560: LD_INT 1
72562: DOUBLE
72563: EQUAL
72564: IFTRUE 72568
72566: GO 72769
72568: POP
// case nation of nation_american :
72569: NOP4
72573: PUSH
72574: LD_INT 1
72576: DOUBLE
72577: EQUAL
72578: IFTRUE 72582
72580: GO 72638
72582: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72583: NOP4
72587: PUSH
72588: NOP4
72592: PUSH
72593: NOP4
72597: PUSH
72598: NOP4
72602: PUSH
72603: NOP4
72607: PUSH
72608: NOP4
72612: PUSH
72613: NOP4
72617: PUSH
72618: EMPTY
72619: LIST
72620: LIST
72621: LIST
72622: LIST
72623: LIST
72624: LIST
72625: PUSH
72626: NOP4
72630: PUSH
72631: LD_INT 1
72633: PLUS
72634: ARRAY
72635: ST_TO_ADDR
72636: GO 72767
72638: LD_INT 2
72640: DOUBLE
72641: EQUAL
72642: IFTRUE 72646
72644: GO 72702
72646: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72647: NOP4
72651: PUSH
72652: NOP4
72656: PUSH
72657: NOP4
72661: PUSH
72662: NOP4
72666: PUSH
72667: NOP4
72671: PUSH
72672: NOP4
72676: PUSH
72677: NOP4
72681: PUSH
72682: EMPTY
72683: LIST
72684: LIST
72685: LIST
72686: LIST
72687: LIST
72688: LIST
72689: PUSH
72690: NOP4
72694: PUSH
72695: LD_INT 1
72697: PLUS
72698: ARRAY
72699: ST_TO_ADDR
72700: GO 72767
72702: LD_INT 3
72704: DOUBLE
72705: EQUAL
72706: IFTRUE 72710
72708: GO 72766
72710: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72711: NOP4
72715: PUSH
72716: NOP4
72720: PUSH
72721: NOP4
72725: PUSH
72726: NOP4
72730: PUSH
72731: NOP4
72735: PUSH
72736: NOP4
72740: PUSH
72741: NOP4
72745: PUSH
72746: EMPTY
72747: LIST
72748: LIST
72749: LIST
72750: LIST
72751: LIST
72752: LIST
72753: PUSH
72754: NOP4
72758: PUSH
72759: LD_INT 1
72761: PLUS
72762: ARRAY
72763: ST_TO_ADDR
72764: GO 72767
72766: POP
72767: GO 73322
72769: LD_INT 2
72771: DOUBLE
72772: EQUAL
72773: IFTRUE 72783
72775: LD_INT 3
72777: DOUBLE
72778: EQUAL
72779: IFTRUE 72783
72781: GO 72839
72783: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72784: NOP4
72788: PUSH
72789: NOP4
72793: PUSH
72794: NOP4
72798: PUSH
72799: NOP4
72803: PUSH
72804: NOP4
72808: PUSH
72809: NOP4
72813: PUSH
72814: NOP4
72818: PUSH
72819: EMPTY
72820: LIST
72821: LIST
72822: LIST
72823: LIST
72824: LIST
72825: LIST
72826: PUSH
72827: NOP4
72831: PUSH
72832: LD_INT 1
72834: PLUS
72835: ARRAY
72836: ST_TO_ADDR
72837: GO 73322
72839: LD_INT 16
72841: DOUBLE
72842: EQUAL
72843: IFTRUE 72901
72845: LD_INT 17
72847: DOUBLE
72848: EQUAL
72849: IFTRUE 72901
72851: LD_INT 18
72853: DOUBLE
72854: EQUAL
72855: IFTRUE 72901
72857: LD_INT 19
72859: DOUBLE
72860: EQUAL
72861: IFTRUE 72901
72863: LD_INT 22
72865: DOUBLE
72866: EQUAL
72867: IFTRUE 72901
72869: LD_INT 20
72871: DOUBLE
72872: EQUAL
72873: IFTRUE 72901
72875: LD_INT 21
72877: DOUBLE
72878: EQUAL
72879: IFTRUE 72901
72881: LD_INT 23
72883: DOUBLE
72884: EQUAL
72885: IFTRUE 72901
72887: LD_INT 24
72889: DOUBLE
72890: EQUAL
72891: IFTRUE 72901
72893: LD_INT 25
72895: DOUBLE
72896: EQUAL
72897: IFTRUE 72901
72899: GO 72957
72901: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72902: NOP4
72906: PUSH
72907: NOP4
72911: PUSH
72912: NOP4
72916: PUSH
72917: NOP4
72921: PUSH
72922: NOP4
72926: PUSH
72927: NOP4
72931: PUSH
72932: NOP4
72936: PUSH
72937: EMPTY
72938: LIST
72939: LIST
72940: LIST
72941: LIST
72942: LIST
72943: LIST
72944: PUSH
72945: NOP4
72949: PUSH
72950: LD_INT 1
72952: PLUS
72953: ARRAY
72954: ST_TO_ADDR
72955: GO 73322
72957: LD_INT 6
72959: DOUBLE
72960: EQUAL
72961: IFTRUE 73013
72963: LD_INT 7
72965: DOUBLE
72966: EQUAL
72967: IFTRUE 73013
72969: LD_INT 8
72971: DOUBLE
72972: EQUAL
72973: IFTRUE 73013
72975: LD_INT 13
72977: DOUBLE
72978: EQUAL
72979: IFTRUE 73013
72981: LD_INT 12
72983: DOUBLE
72984: EQUAL
72985: IFTRUE 73013
72987: LD_INT 15
72989: DOUBLE
72990: EQUAL
72991: IFTRUE 73013
72993: LD_INT 11
72995: DOUBLE
72996: EQUAL
72997: IFTRUE 73013
72999: LD_INT 14
73001: DOUBLE
73002: EQUAL
73003: IFTRUE 73013
73005: LD_INT 10
73007: DOUBLE
73008: EQUAL
73009: IFTRUE 73013
73011: GO 73069
73013: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73014: NOP4
73018: PUSH
73019: NOP4
73023: PUSH
73024: NOP4
73028: PUSH
73029: NOP4
73033: PUSH
73034: NOP4
73038: PUSH
73039: NOP4
73043: PUSH
73044: NOP4
73048: PUSH
73049: EMPTY
73050: LIST
73051: LIST
73052: LIST
73053: LIST
73054: LIST
73055: LIST
73056: PUSH
73057: NOP4
73061: PUSH
73062: LD_INT 1
73064: PLUS
73065: ARRAY
73066: ST_TO_ADDR
73067: GO 73322
73069: LD_INT 36
73071: DOUBLE
73072: EQUAL
73073: IFTRUE 73077
73075: GO 73133
73077: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73078: NOP4
73082: PUSH
73083: NOP4
73087: PUSH
73088: NOP4
73092: PUSH
73093: NOP4
73097: PUSH
73098: NOP4
73102: PUSH
73103: NOP4
73107: PUSH
73108: NOP4
73112: PUSH
73113: EMPTY
73114: LIST
73115: LIST
73116: LIST
73117: LIST
73118: LIST
73119: LIST
73120: PUSH
73121: NOP4
73125: PUSH
73126: LD_INT 1
73128: PLUS
73129: ARRAY
73130: ST_TO_ADDR
73131: GO 73322
73133: LD_INT 4
73135: DOUBLE
73136: EQUAL
73137: IFTRUE 73159
73139: LD_INT 5
73141: DOUBLE
73142: EQUAL
73143: IFTRUE 73159
73145: LD_INT 34
73147: DOUBLE
73148: EQUAL
73149: IFTRUE 73159
73151: LD_INT 37
73153: DOUBLE
73154: EQUAL
73155: IFTRUE 73159
73157: GO 73215
73159: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73160: NOP4
73164: PUSH
73165: NOP4
73169: PUSH
73170: NOP4
73174: PUSH
73175: NOP4
73179: PUSH
73180: NOP4
73184: PUSH
73185: NOP4
73189: PUSH
73190: NOP4
73194: PUSH
73195: EMPTY
73196: LIST
73197: LIST
73198: LIST
73199: LIST
73200: LIST
73201: LIST
73202: PUSH
73203: NOP4
73207: PUSH
73208: LD_INT 1
73210: PLUS
73211: ARRAY
73212: ST_TO_ADDR
73213: GO 73322
73215: LD_INT 31
73217: DOUBLE
73218: EQUAL
73219: IFTRUE 73265
73221: LD_INT 32
73223: DOUBLE
73224: EQUAL
73225: IFTRUE 73265
73227: LD_INT 33
73229: DOUBLE
73230: EQUAL
73231: IFTRUE 73265
73233: LD_INT 27
73235: DOUBLE
73236: EQUAL
73237: IFTRUE 73265
73239: LD_INT 26
73241: DOUBLE
73242: EQUAL
73243: IFTRUE 73265
73245: LD_INT 28
73247: DOUBLE
73248: EQUAL
73249: IFTRUE 73265
73251: LD_INT 29
73253: DOUBLE
73254: EQUAL
73255: IFTRUE 73265
73257: LD_INT 30
73259: DOUBLE
73260: EQUAL
73261: IFTRUE 73265
73263: GO 73321
73265: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73266: NOP4
73270: PUSH
73271: NOP4
73275: PUSH
73276: NOP4
73280: PUSH
73281: NOP4
73285: PUSH
73286: NOP4
73290: PUSH
73291: NOP4
73295: PUSH
73296: NOP4
73300: PUSH
73301: EMPTY
73302: LIST
73303: LIST
73304: LIST
73305: LIST
73306: LIST
73307: LIST
73308: PUSH
73309: NOP4
73313: PUSH
73314: LD_INT 1
73316: PLUS
73317: ARRAY
73318: ST_TO_ADDR
73319: GO 73322
73321: POP
// temp_list2 = [ ] ;
73322: NOP4
73326: PUSH
73327: EMPTY
73328: ST_TO_ADDR
// for i in temp_list do
73329: NOP4
73333: PUSH
73334: NOP4
73338: PUSH
73339: FOR_IN
73340: IFFALSE 73392
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73342: NOP4
73346: PUSH
73347: NOP4
73351: PUSH
73352: NOP4
73356: PUSH
73357: LD_INT 1
73359: ARRAY
73360: PUSH
73361: NOP4
73365: PLUS
73366: PUSH
73367: NOP4
73371: PUSH
73372: LD_INT 2
73374: ARRAY
73375: PUSH
73376: NOP4
73380: PLUS
73381: PUSH
73382: EMPTY
73383: LIST
73384: LIST
73385: PUSH
73386: EMPTY
73387: LIST
73388: ADD
73389: ST_TO_ADDR
73390: GO 73339
73392: POP
73393: POP
// result = temp_list2 ;
73394: NOP4
73398: PUSH
73399: NOP4
73403: ST_TO_ADDR
// end ;
73404: LD_VAR 0 7
73408: RET
// export function EnemyInRange ( unit , dist ) ; begin
73409: LD_INT 0
73411: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73412: NOP4
73416: PUSH
73417: NOP4
73421: PPUSH
73422: NOP4
73426: PPUSH
73427: NOP4
73431: PPUSH
73432: NOP4
73436: PPUSH
73437: NOP4
73441: PPUSH
73442: NOP4
73446: PPUSH
73447: NOP4
73451: PPUSH
73452: NOP4
73456: PUSH
73457: LD_INT 4
73459: ARRAY
73460: ST_TO_ADDR
// end ;
73461: LD_VAR 0 3
73465: RET
// export function PlayerSeeMe ( unit ) ; begin
73466: LD_INT 0
73468: PPUSH
// result := See ( your_side , unit ) ;
73469: NOP4
73473: PUSH
73474: NOP4
73478: PPUSH
73479: NOP4
73483: PPUSH
73484: NOP4
73488: ST_TO_ADDR
// end ;
73489: LD_VAR 0 2
73493: RET
// export function ReverseDir ( unit ) ; begin
73494: LD_INT 0
73496: PPUSH
// if not unit then
73497: NOP4
73501: NOT
73502: IFFALSE 73506
// exit ;
73504: GO 73529
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73506: NOP4
73510: PUSH
73511: NOP4
73515: PPUSH
73516: NOP4
73520: PUSH
73521: LD_INT 3
73523: PLUS
73524: PUSH
73525: LD_INT 6
73527: MOD
73528: ST_TO_ADDR
// end ;
73529: LD_VAR 0 2
73533: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
73534: LD_INT 0
73536: PPUSH
73537: PPUSH
73538: PPUSH
73539: PPUSH
73540: PPUSH
// if not hexes then
73541: NOP4
73545: NOT
73546: IFFALSE 73550
// exit ;
73548: GO 73698
// dist := 9999 ;
73550: NOP4
73554: PUSH
73555: LD_INT 9999
73557: ST_TO_ADDR
// for i = 1 to hexes do
73558: NOP4
73562: PUSH
73563: DOUBLE
73564: LD_INT 1
73566: DEC
73567: ST_TO_ADDR
73568: NOP4
73572: PUSH
73573: FOR_TO
73574: IFFALSE 73686
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
73576: NOP4
73580: PPUSH
73581: NOP4
73585: PUSH
73586: NOP4
73590: ARRAY
73591: PUSH
73592: LD_INT 1
73594: ARRAY
73595: PPUSH
73596: NOP4
73600: PUSH
73601: NOP4
73605: ARRAY
73606: PUSH
73607: LD_INT 2
73609: ARRAY
73610: PPUSH
73611: NOP4
73615: PUSH
73616: NOP4
73620: LESS
73621: IFFALSE 73684
// begin hex := hexes [ i ] ;
73623: NOP4
73627: PUSH
73628: NOP4
73632: PUSH
73633: NOP4
73637: ARRAY
73638: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73639: NOP4
73643: PUSH
73644: NOP4
73648: PPUSH
73649: NOP4
73653: PUSH
73654: NOP4
73658: ARRAY
73659: PUSH
73660: LD_INT 1
73662: ARRAY
73663: PPUSH
73664: NOP4
73668: PUSH
73669: NOP4
73673: ARRAY
73674: PUSH
73675: LD_INT 2
73677: ARRAY
73678: PPUSH
73679: NOP4
73683: ST_TO_ADDR
// end ; end ;
73684: GO 73573
73686: POP
73687: POP
// result := hex ;
73688: NOP4
73692: PUSH
73693: NOP4
73697: ST_TO_ADDR
// end ;
73698: LD_VAR 0 3
73702: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73703: LD_INT 0
73705: PPUSH
73706: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73707: NOP4
73711: NOT
73712: PUSH
73713: NOP4
73717: PUSH
73718: LD_INT 21
73720: PUSH
73721: LD_INT 2
73723: PUSH
73724: EMPTY
73725: LIST
73726: LIST
73727: PUSH
73728: LD_INT 23
73730: PUSH
73731: LD_INT 2
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: PUSH
73738: EMPTY
73739: LIST
73740: LIST
73741: PPUSH
73742: NOP4
73746: IN
73747: NOT
73748: OR
73749: IFFALSE 73753
// exit ;
73751: GO 73800
// for i = 1 to 3 do
73753: NOP4
73757: PUSH
73758: DOUBLE
73759: LD_INT 1
73761: DEC
73762: ST_TO_ADDR
73763: LD_INT 3
73765: PUSH
73766: FOR_TO
73767: IFFALSE 73798
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73769: NOP4
73773: PPUSH
73774: NOP4
73778: PPUSH
73779: NOP4
73783: PPUSH
73784: NOP4
73788: PPUSH
73789: LD_INT 1
73791: PPUSH
73792: NOP4
73796: GO 73766
73798: POP
73799: POP
// end ;
73800: LD_VAR 0 2
73804: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73805: LD_INT 0
73807: PPUSH
73808: PPUSH
73809: PPUSH
73810: PPUSH
73811: PPUSH
73812: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
73813: NOP4
73817: NOT
73818: PUSH
73819: NOP4
73823: NOT
73824: OR
73825: PUSH
73826: NOP4
73830: PPUSH
73831: NOP4
73835: OR
73836: IFFALSE 73840
// exit ;
73838: GO 74281
// x := GetX ( enemy_unit ) ;
73840: NOP4
73844: PUSH
73845: NOP4
73849: PPUSH
73850: NOP4
73854: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73855: NOP4
73859: PUSH
73860: NOP4
73864: PPUSH
73865: NOP4
73869: ST_TO_ADDR
// if not x or not y then
73870: NOP4
73874: NOT
73875: PUSH
73876: NOP4
73880: NOT
73881: OR
73882: IFFALSE 73886
// exit ;
73884: GO 74281
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73886: NOP4
73890: PUSH
73891: NOP4
73895: PPUSH
73896: LD_INT 0
73898: PPUSH
73899: LD_INT 4
73901: PPUSH
73902: NOP4
73906: PUSH
73907: NOP4
73911: PPUSH
73912: LD_INT 0
73914: PPUSH
73915: LD_INT 4
73917: PPUSH
73918: NOP4
73922: PUSH
73923: EMPTY
73924: LIST
73925: LIST
73926: PUSH
73927: NOP4
73931: PPUSH
73932: LD_INT 1
73934: PPUSH
73935: LD_INT 4
73937: PPUSH
73938: NOP4
73942: PUSH
73943: NOP4
73947: PPUSH
73948: LD_INT 1
73950: PPUSH
73951: LD_INT 4
73953: PPUSH
73954: NOP4
73958: PUSH
73959: EMPTY
73960: LIST
73961: LIST
73962: PUSH
73963: NOP4
73967: PPUSH
73968: LD_INT 2
73970: PPUSH
73971: LD_INT 4
73973: PPUSH
73974: NOP4
73978: PUSH
73979: NOP4
73983: PPUSH
73984: LD_INT 2
73986: PPUSH
73987: LD_INT 4
73989: PPUSH
73990: NOP4
73994: PUSH
73995: EMPTY
73996: LIST
73997: LIST
73998: PUSH
73999: NOP4
74003: PPUSH
74004: LD_INT 3
74006: PPUSH
74007: LD_INT 4
74009: PPUSH
74010: NOP4
74014: PUSH
74015: NOP4
74019: PPUSH
74020: LD_INT 3
74022: PPUSH
74023: LD_INT 4
74025: PPUSH
74026: NOP4
74030: PUSH
74031: EMPTY
74032: LIST
74033: LIST
74034: PUSH
74035: NOP4
74039: PPUSH
74040: LD_INT 4
74042: PPUSH
74043: LD_INT 4
74045: PPUSH
74046: NOP4
74050: PUSH
74051: NOP4
74055: PPUSH
74056: LD_INT 4
74058: PPUSH
74059: LD_INT 4
74061: PPUSH
74062: NOP4
74066: PUSH
74067: EMPTY
74068: LIST
74069: LIST
74070: PUSH
74071: NOP4
74075: PPUSH
74076: LD_INT 5
74078: PPUSH
74079: LD_INT 4
74081: PPUSH
74082: NOP4
74086: PUSH
74087: NOP4
74091: PPUSH
74092: LD_INT 5
74094: PPUSH
74095: LD_INT 4
74097: PPUSH
74098: NOP4
74102: PUSH
74103: EMPTY
74104: LIST
74105: LIST
74106: PUSH
74107: EMPTY
74108: LIST
74109: LIST
74110: LIST
74111: LIST
74112: LIST
74113: LIST
74114: ST_TO_ADDR
// for i = tmp downto 1 do
74115: NOP4
74119: PUSH
74120: DOUBLE
74121: NOP4
74125: INC
74126: ST_TO_ADDR
74127: LD_INT 1
74129: PUSH
74130: FOR_DOWNTO
74131: IFFALSE 74232
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74133: NOP4
74137: PUSH
74138: NOP4
74142: ARRAY
74143: PUSH
74144: LD_INT 1
74146: ARRAY
74147: PPUSH
74148: NOP4
74152: PUSH
74153: NOP4
74157: ARRAY
74158: PUSH
74159: LD_INT 2
74161: ARRAY
74162: PPUSH
74163: NOP4
74167: NOT
74168: PUSH
74169: NOP4
74173: PUSH
74174: NOP4
74178: ARRAY
74179: PUSH
74180: LD_INT 1
74182: ARRAY
74183: PPUSH
74184: NOP4
74188: PUSH
74189: NOP4
74193: ARRAY
74194: PUSH
74195: LD_INT 2
74197: ARRAY
74198: PPUSH
74199: NOP4
74203: PUSH
74204: LD_INT 0
74206: NONEQUAL
74207: OR
74208: IFFALSE 74230
// tmp := Delete ( tmp , i ) ;
74210: NOP4
74214: PUSH
74215: NOP4
74219: PPUSH
74220: NOP4
74224: PPUSH
74225: NOP4
74229: ST_TO_ADDR
74230: GO 74130
74232: POP
74233: POP
// j := GetClosestHex ( unit , tmp ) ;
74234: NOP4
74238: PUSH
74239: NOP4
74243: PPUSH
74244: NOP4
74248: PPUSH
74249: NOP4
74253: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74254: NOP4
74258: PPUSH
74259: NOP4
74263: PUSH
74264: LD_INT 1
74266: ARRAY
74267: PPUSH
74268: NOP4
74272: PUSH
74273: LD_INT 2
74275: ARRAY
74276: PPUSH
74277: NOP4
// end ;
74281: LD_VAR 0 3
74285: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74286: LD_INT 0
74288: PPUSH
74289: PPUSH
74290: PPUSH
// uc_side = 0 ;
74291: LD_ADDR_OWVAR 20
74295: PUSH
74296: LD_INT 0
74298: ST_TO_ADDR
// uc_nation = 0 ;
74299: LD_ADDR_OWVAR 21
74303: PUSH
74304: LD_INT 0
74306: ST_TO_ADDR
// InitHc_All ( ) ;
74307: NOP4
// InitVc ;
74311: NOP4
// if mastodonts then
74315: NOP4
74319: IFFALSE 74386
// for i = 1 to mastodonts do
74321: NOP4
74325: PUSH
74326: DOUBLE
74327: LD_INT 1
74329: DEC
74330: ST_TO_ADDR
74331: NOP4
74335: PUSH
74336: FOR_TO
74337: IFFALSE 74384
// begin vc_chassis := 31 ;
74339: LD_ADDR_OWVAR 37
74343: PUSH
74344: LD_INT 31
74346: ST_TO_ADDR
// vc_control := control_rider ;
74347: LD_ADDR_OWVAR 38
74351: PUSH
74352: LD_INT 4
74354: ST_TO_ADDR
// animal := CreateVehicle ;
74355: NOP4
74359: PUSH
74360: NOP4
74364: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74365: NOP4
74369: PPUSH
74370: NOP4
74374: PPUSH
74375: LD_INT 0
74377: PPUSH
74378: NOP4
// end ;
74382: GO 74336
74384: POP
74385: POP
// if horses then
74386: NOP4
74390: IFFALSE 74457
// for i = 1 to horses do
74392: NOP4
74396: PUSH
74397: DOUBLE
74398: LD_INT 1
74400: DEC
74401: ST_TO_ADDR
74402: NOP4
74406: PUSH
74407: FOR_TO
74408: IFFALSE 74455
// begin hc_class := 21 ;
74410: LD_ADDR_OWVAR 28
74414: PUSH
74415: LD_INT 21
74417: ST_TO_ADDR
// hc_gallery :=  ;
74418: LD_ADDR_OWVAR 33
74422: PUSH
74423: LD_STRING 
74425: ST_TO_ADDR
// animal := CreateHuman ;
74426: NOP4
74430: PUSH
74431: NOP4
74435: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74436: NOP4
74440: PPUSH
74441: NOP4
74445: PPUSH
74446: LD_INT 0
74448: PPUSH
74449: NOP4
// end ;
74453: GO 74407
74455: POP
74456: POP
// if birds then
74457: NOP4
74461: IFFALSE 74528
// for i = 1 to birds do
74463: NOP4
74467: PUSH
74468: DOUBLE
74469: LD_INT 1
74471: DEC
74472: ST_TO_ADDR
74473: NOP4
74477: PUSH
74478: FOR_TO
74479: IFFALSE 74526
// begin hc_class = 18 ;
74481: LD_ADDR_OWVAR 28
74485: PUSH
74486: LD_INT 18
74488: ST_TO_ADDR
// hc_gallery =  ;
74489: LD_ADDR_OWVAR 33
74493: PUSH
74494: LD_STRING 
74496: ST_TO_ADDR
// animal := CreateHuman ;
74497: NOP4
74501: PUSH
74502: NOP4
74506: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74507: NOP4
74511: PPUSH
74512: NOP4
74516: PPUSH
74517: LD_INT 0
74519: PPUSH
74520: NOP4
// end ;
74524: GO 74478
74526: POP
74527: POP
// if tigers then
74528: NOP4
74532: IFFALSE 74616
// for i = 1 to tigers do
74534: NOP4
74538: PUSH
74539: DOUBLE
74540: LD_INT 1
74542: DEC
74543: ST_TO_ADDR
74544: NOP4
74548: PUSH
74549: FOR_TO
74550: IFFALSE 74614
// begin hc_class = class_tiger ;
74552: LD_ADDR_OWVAR 28
74556: PUSH
74557: LD_INT 14
74559: ST_TO_ADDR
// hc_gallery =  ;
74560: LD_ADDR_OWVAR 33
74564: PUSH
74565: LD_STRING 
74567: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74568: LD_ADDR_OWVAR 35
74572: PUSH
74573: LD_INT 7
74575: NEG
74576: PPUSH
74577: LD_INT 7
74579: PPUSH
74580: NOP4
74584: ST_TO_ADDR
// animal := CreateHuman ;
74585: NOP4
74589: PUSH
74590: NOP4
74594: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74595: NOP4
74599: PPUSH
74600: NOP4
74604: PPUSH
74605: LD_INT 0
74607: PPUSH
74608: NOP4
// end ;
74612: GO 74549
74614: POP
74615: POP
// if apemans then
74616: NOP4
74620: IFFALSE 74743
// for i = 1 to apemans do
74622: NOP4
74626: PUSH
74627: DOUBLE
74628: LD_INT 1
74630: DEC
74631: ST_TO_ADDR
74632: NOP4
74636: PUSH
74637: FOR_TO
74638: IFFALSE 74741
// begin hc_class = class_apeman ;
74640: LD_ADDR_OWVAR 28
74644: PUSH
74645: LD_INT 12
74647: ST_TO_ADDR
// hc_gallery =  ;
74648: LD_ADDR_OWVAR 33
74652: PUSH
74653: LD_STRING 
74655: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
74656: LD_ADDR_OWVAR 35
74660: PUSH
74661: LD_INT 5
74663: NEG
74664: PPUSH
74665: LD_INT 5
74667: PPUSH
74668: NOP4
74672: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74673: LD_ADDR_OWVAR 31
74677: PUSH
74678: LD_INT 1
74680: PPUSH
74681: LD_INT 3
74683: PPUSH
74684: NOP4
74688: PUSH
74689: LD_INT 1
74691: PPUSH
74692: LD_INT 3
74694: PPUSH
74695: NOP4
74699: PUSH
74700: LD_INT 0
74702: PUSH
74703: LD_INT 0
74705: PUSH
74706: EMPTY
74707: LIST
74708: LIST
74709: LIST
74710: LIST
74711: ST_TO_ADDR
// animal := CreateHuman ;
74712: NOP4
74716: PUSH
74717: NOP4
74721: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74722: NOP4
74726: PPUSH
74727: NOP4
74731: PPUSH
74732: LD_INT 0
74734: PPUSH
74735: NOP4
// end ;
74739: GO 74637
74741: POP
74742: POP
// if enchidnas then
74743: NOP4
74747: IFFALSE 74814
// for i = 1 to enchidnas do
74749: NOP4
74753: PUSH
74754: DOUBLE
74755: LD_INT 1
74757: DEC
74758: ST_TO_ADDR
74759: NOP4
74763: PUSH
74764: FOR_TO
74765: IFFALSE 74812
// begin hc_class = 13 ;
74767: LD_ADDR_OWVAR 28
74771: PUSH
74772: LD_INT 13
74774: ST_TO_ADDR
// hc_gallery =  ;
74775: LD_ADDR_OWVAR 33
74779: PUSH
74780: LD_STRING 
74782: ST_TO_ADDR
// animal := CreateHuman ;
74783: NOP4
74787: PUSH
74788: NOP4
74792: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74793: NOP4
74797: PPUSH
74798: NOP4
74802: PPUSH
74803: LD_INT 0
74805: PPUSH
74806: NOP4
// end ;
74810: GO 74764
74812: POP
74813: POP
// if fishes then
74814: NOP4
74818: IFFALSE 74885
// for i = 1 to fishes do
74820: NOP4
74824: PUSH
74825: DOUBLE
74826: LD_INT 1
74828: DEC
74829: ST_TO_ADDR
74830: NOP4
74834: PUSH
74835: FOR_TO
74836: IFFALSE 74883
// begin hc_class = 20 ;
74838: LD_ADDR_OWVAR 28
74842: PUSH
74843: LD_INT 20
74845: ST_TO_ADDR
// hc_gallery =  ;
74846: LD_ADDR_OWVAR 33
74850: PUSH
74851: LD_STRING 
74853: ST_TO_ADDR
// animal := CreateHuman ;
74854: NOP4
74858: PUSH
74859: NOP4
74863: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74864: NOP4
74868: PPUSH
74869: NOP4
74873: PPUSH
74874: LD_INT 0
74876: PPUSH
74877: NOP4
// end ;
74881: GO 74835
74883: POP
74884: POP
// end ;
74885: LD_VAR 0 10
74889: RET
// export function WantHeal ( sci , unit ) ; begin
74890: LD_INT 0
74892: PPUSH
// if GetTaskList ( sci ) > 0 then
74893: NOP4
74897: PPUSH
74898: NOP4
74902: PUSH
74903: LD_INT 0
74905: GREATER
74906: IFFALSE 74976
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74908: NOP4
74912: PPUSH
74913: NOP4
74917: PUSH
74918: LD_INT 1
74920: ARRAY
74921: PUSH
74922: LD_INT 1
74924: ARRAY
74925: PUSH
74926: LD_STRING l
74928: EQUAL
74929: PUSH
74930: NOP4
74934: PPUSH
74935: NOP4
74939: PUSH
74940: LD_INT 1
74942: ARRAY
74943: PUSH
74944: LD_INT 4
74946: ARRAY
74947: PUSH
74948: NOP4
74952: EQUAL
74953: AND
74954: IFFALSE 74966
// result := true else
74956: NOP4
74960: PUSH
74961: LD_INT 1
74963: ST_TO_ADDR
74964: GO 74974
// result := false ;
74966: NOP4
74970: PUSH
74971: LD_INT 0
74973: ST_TO_ADDR
// end else
74974: GO 74984
// result := false ;
74976: NOP4
74980: PUSH
74981: LD_INT 0
74983: ST_TO_ADDR
// end ;
74984: LD_VAR 0 3
74988: RET
// export function HealTarget ( sci ) ; begin
74989: LD_INT 0
74991: PPUSH
// if not sci then
74992: NOP4
74996: NOT
74997: IFFALSE 75001
// exit ;
74999: GO 75066
// result := 0 ;
75001: NOP4
75005: PUSH
75006: LD_INT 0
75008: ST_TO_ADDR
// if GetTaskList ( sci ) then
75009: NOP4
75013: PPUSH
75014: NOP4
75018: IFFALSE 75066
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75020: NOP4
75024: PPUSH
75025: NOP4
75029: PUSH
75030: LD_INT 1
75032: ARRAY
75033: PUSH
75034: LD_INT 1
75036: ARRAY
75037: PUSH
75038: LD_STRING l
75040: EQUAL
75041: IFFALSE 75066
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75043: NOP4
75047: PUSH
75048: NOP4
75052: PPUSH
75053: NOP4
75057: PUSH
75058: LD_INT 1
75060: ARRAY
75061: PUSH
75062: LD_INT 4
75064: ARRAY
75065: ST_TO_ADDR
// end ;
75066: LD_VAR 0 2
75070: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75071: LD_INT 0
75073: PPUSH
75074: PPUSH
75075: PPUSH
75076: PPUSH
// if not base_units then
75077: NOP4
75081: NOT
75082: IFFALSE 75086
// exit ;
75084: GO 75173
// result := false ;
75086: NOP4
75090: PUSH
75091: LD_INT 0
75093: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75094: NOP4
75098: PUSH
75099: NOP4
75103: PPUSH
75104: LD_INT 21
75106: PUSH
75107: LD_INT 3
75109: PUSH
75110: EMPTY
75111: LIST
75112: LIST
75113: PPUSH
75114: NOP4
75118: ST_TO_ADDR
// if not tmp then
75119: NOP4
75123: NOT
75124: IFFALSE 75128
// exit ;
75126: GO 75173
// for i in tmp do
75128: NOP4
75132: PUSH
75133: NOP4
75137: PUSH
75138: FOR_IN
75139: IFFALSE 75171
// begin result := EnemyInRange ( i , 22 ) ;
75141: NOP4
75145: PUSH
75146: NOP4
75150: PPUSH
75151: LD_INT 22
75153: PPUSH
75154: NOP4
75158: ST_TO_ADDR
// if result then
75159: NOP4
75163: IFFALSE 75169
// exit ;
75165: POP
75166: POP
75167: GO 75173
// end ;
75169: GO 75138
75171: POP
75172: POP
// end ;
75173: LD_VAR 0 2
75177: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
75178: LD_INT 0
75180: PPUSH
75181: PPUSH
// if not units then
75182: NOP4
75186: NOT
75187: IFFALSE 75191
// exit ;
75189: GO 75261
// result := [ ] ;
75191: NOP4
75195: PUSH
75196: EMPTY
75197: ST_TO_ADDR
// for i in units do
75198: NOP4
75202: PUSH
75203: NOP4
75207: PUSH
75208: FOR_IN
75209: IFFALSE 75259
// if GetTag ( i ) = tag then
75211: NOP4
75215: PPUSH
75216: NOP4
75220: PUSH
75221: NOP4
75225: EQUAL
75226: IFFALSE 75257
// result := Insert ( result , result + 1 , i ) ;
75228: NOP4
75232: PUSH
75233: NOP4
75237: PPUSH
75238: NOP4
75242: PUSH
75243: LD_INT 1
75245: PLUS
75246: PPUSH
75247: NOP4
75251: PPUSH
75252: NOP4
75256: ST_TO_ADDR
75257: GO 75208
75259: POP
75260: POP
// end ;
75261: LD_VAR 0 3
75265: RET
// export function IsDriver ( un ) ; begin
75266: LD_INT 0
75268: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75269: NOP4
75273: PUSH
75274: NOP4
75278: PUSH
75279: LD_INT 55
75281: PUSH
75282: EMPTY
75283: LIST
75284: PPUSH
75285: NOP4
75289: IN
75290: ST_TO_ADDR
// end ;
75291: LD_VAR 0 2
75295: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75296: LD_INT 0
75298: PPUSH
75299: PPUSH
// list := [ ] ;
75300: NOP4
75304: PUSH
75305: EMPTY
75306: ST_TO_ADDR
// case d of 0 :
75307: NOP4
75311: PUSH
75312: LD_INT 0
75314: DOUBLE
75315: EQUAL
75316: IFTRUE 75320
75318: GO 75453
75320: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75321: NOP4
75325: PUSH
75326: NOP4
75330: PUSH
75331: LD_INT 4
75333: MINUS
75334: PUSH
75335: NOP4
75339: PUSH
75340: LD_INT 4
75342: MINUS
75343: PUSH
75344: LD_INT 2
75346: PUSH
75347: EMPTY
75348: LIST
75349: LIST
75350: LIST
75351: PUSH
75352: NOP4
75356: PUSH
75357: LD_INT 3
75359: MINUS
75360: PUSH
75361: NOP4
75365: PUSH
75366: LD_INT 1
75368: PUSH
75369: EMPTY
75370: LIST
75371: LIST
75372: LIST
75373: PUSH
75374: NOP4
75378: PUSH
75379: LD_INT 4
75381: PLUS
75382: PUSH
75383: NOP4
75387: PUSH
75388: LD_INT 4
75390: PUSH
75391: EMPTY
75392: LIST
75393: LIST
75394: LIST
75395: PUSH
75396: NOP4
75400: PUSH
75401: LD_INT 3
75403: PLUS
75404: PUSH
75405: NOP4
75409: PUSH
75410: LD_INT 3
75412: PLUS
75413: PUSH
75414: LD_INT 5
75416: PUSH
75417: EMPTY
75418: LIST
75419: LIST
75420: LIST
75421: PUSH
75422: NOP4
75426: PUSH
75427: NOP4
75431: PUSH
75432: LD_INT 4
75434: PLUS
75435: PUSH
75436: LD_INT 0
75438: PUSH
75439: EMPTY
75440: LIST
75441: LIST
75442: LIST
75443: PUSH
75444: EMPTY
75445: LIST
75446: LIST
75447: LIST
75448: LIST
75449: LIST
75450: ST_TO_ADDR
// end ; 1 :
75451: GO 76151
75453: LD_INT 1
75455: DOUBLE
75456: EQUAL
75457: IFTRUE 75461
75459: GO 75594
75461: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75462: NOP4
75466: PUSH
75467: NOP4
75471: PUSH
75472: NOP4
75476: PUSH
75477: LD_INT 4
75479: MINUS
75480: PUSH
75481: LD_INT 3
75483: PUSH
75484: EMPTY
75485: LIST
75486: LIST
75487: LIST
75488: PUSH
75489: NOP4
75493: PUSH
75494: LD_INT 3
75496: MINUS
75497: PUSH
75498: NOP4
75502: PUSH
75503: LD_INT 3
75505: MINUS
75506: PUSH
75507: LD_INT 2
75509: PUSH
75510: EMPTY
75511: LIST
75512: LIST
75513: LIST
75514: PUSH
75515: NOP4
75519: PUSH
75520: LD_INT 4
75522: MINUS
75523: PUSH
75524: NOP4
75528: PUSH
75529: LD_INT 1
75531: PUSH
75532: EMPTY
75533: LIST
75534: LIST
75535: LIST
75536: PUSH
75537: NOP4
75541: PUSH
75542: NOP4
75546: PUSH
75547: LD_INT 3
75549: PLUS
75550: PUSH
75551: LD_INT 0
75553: PUSH
75554: EMPTY
75555: LIST
75556: LIST
75557: LIST
75558: PUSH
75559: NOP4
75563: PUSH
75564: LD_INT 4
75566: PLUS
75567: PUSH
75568: NOP4
75572: PUSH
75573: LD_INT 4
75575: PLUS
75576: PUSH
75577: LD_INT 5
75579: PUSH
75580: EMPTY
75581: LIST
75582: LIST
75583: LIST
75584: PUSH
75585: EMPTY
75586: LIST
75587: LIST
75588: LIST
75589: LIST
75590: LIST
75591: ST_TO_ADDR
// end ; 2 :
75592: GO 76151
75594: LD_INT 2
75596: DOUBLE
75597: EQUAL
75598: IFTRUE 75602
75600: GO 75731
75602: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75603: NOP4
75607: PUSH
75608: NOP4
75612: PUSH
75613: NOP4
75617: PUSH
75618: LD_INT 3
75620: MINUS
75621: PUSH
75622: LD_INT 3
75624: PUSH
75625: EMPTY
75626: LIST
75627: LIST
75628: LIST
75629: PUSH
75630: NOP4
75634: PUSH
75635: LD_INT 4
75637: PLUS
75638: PUSH
75639: NOP4
75643: PUSH
75644: LD_INT 4
75646: PUSH
75647: EMPTY
75648: LIST
75649: LIST
75650: LIST
75651: PUSH
75652: NOP4
75656: PUSH
75657: NOP4
75661: PUSH
75662: LD_INT 4
75664: PLUS
75665: PUSH
75666: LD_INT 0
75668: PUSH
75669: EMPTY
75670: LIST
75671: LIST
75672: LIST
75673: PUSH
75674: NOP4
75678: PUSH
75679: LD_INT 3
75681: MINUS
75682: PUSH
75683: NOP4
75687: PUSH
75688: LD_INT 1
75690: PUSH
75691: EMPTY
75692: LIST
75693: LIST
75694: LIST
75695: PUSH
75696: NOP4
75700: PUSH
75701: LD_INT 4
75703: MINUS
75704: PUSH
75705: NOP4
75709: PUSH
75710: LD_INT 4
75712: MINUS
75713: PUSH
75714: LD_INT 2
75716: PUSH
75717: EMPTY
75718: LIST
75719: LIST
75720: LIST
75721: PUSH
75722: EMPTY
75723: LIST
75724: LIST
75725: LIST
75726: LIST
75727: LIST
75728: ST_TO_ADDR
// end ; 3 :
75729: GO 76151
75731: LD_INT 3
75733: DOUBLE
75734: EQUAL
75735: IFTRUE 75739
75737: GO 75872
75739: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75740: NOP4
75744: PUSH
75745: NOP4
75749: PUSH
75750: LD_INT 3
75752: PLUS
75753: PUSH
75754: NOP4
75758: PUSH
75759: LD_INT 4
75761: PUSH
75762: EMPTY
75763: LIST
75764: LIST
75765: LIST
75766: PUSH
75767: NOP4
75771: PUSH
75772: LD_INT 4
75774: PLUS
75775: PUSH
75776: NOP4
75780: PUSH
75781: LD_INT 4
75783: PLUS
75784: PUSH
75785: LD_INT 5
75787: PUSH
75788: EMPTY
75789: LIST
75790: LIST
75791: LIST
75792: PUSH
75793: NOP4
75797: PUSH
75798: LD_INT 4
75800: MINUS
75801: PUSH
75802: NOP4
75806: PUSH
75807: LD_INT 1
75809: PUSH
75810: EMPTY
75811: LIST
75812: LIST
75813: LIST
75814: PUSH
75815: NOP4
75819: PUSH
75820: NOP4
75824: PUSH
75825: LD_INT 4
75827: MINUS
75828: PUSH
75829: LD_INT 3
75831: PUSH
75832: EMPTY
75833: LIST
75834: LIST
75835: LIST
75836: PUSH
75837: NOP4
75841: PUSH
75842: LD_INT 3
75844: MINUS
75845: PUSH
75846: NOP4
75850: PUSH
75851: LD_INT 3
75853: MINUS
75854: PUSH
75855: LD_INT 2
75857: PUSH
75858: EMPTY
75859: LIST
75860: LIST
75861: LIST
75862: PUSH
75863: EMPTY
75864: LIST
75865: LIST
75866: LIST
75867: LIST
75868: LIST
75869: ST_TO_ADDR
// end ; 4 :
75870: GO 76151
75872: LD_INT 4
75874: DOUBLE
75875: EQUAL
75876: IFTRUE 75880
75878: GO 76013
75880: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75881: NOP4
75885: PUSH
75886: NOP4
75890: PUSH
75891: NOP4
75895: PUSH
75896: LD_INT 4
75898: PLUS
75899: PUSH
75900: LD_INT 0
75902: PUSH
75903: EMPTY
75904: LIST
75905: LIST
75906: LIST
75907: PUSH
75908: NOP4
75912: PUSH
75913: LD_INT 3
75915: PLUS
75916: PUSH
75917: NOP4
75921: PUSH
75922: LD_INT 3
75924: PLUS
75925: PUSH
75926: LD_INT 5
75928: PUSH
75929: EMPTY
75930: LIST
75931: LIST
75932: LIST
75933: PUSH
75934: NOP4
75938: PUSH
75939: LD_INT 4
75941: PLUS
75942: PUSH
75943: NOP4
75947: PUSH
75948: LD_INT 4
75950: PUSH
75951: EMPTY
75952: LIST
75953: LIST
75954: LIST
75955: PUSH
75956: NOP4
75960: PUSH
75961: NOP4
75965: PUSH
75966: LD_INT 3
75968: MINUS
75969: PUSH
75970: LD_INT 3
75972: PUSH
75973: EMPTY
75974: LIST
75975: LIST
75976: LIST
75977: PUSH
75978: NOP4
75982: PUSH
75983: LD_INT 4
75985: MINUS
75986: PUSH
75987: NOP4
75991: PUSH
75992: LD_INT 4
75994: MINUS
75995: PUSH
75996: LD_INT 2
75998: PUSH
75999: EMPTY
76000: LIST
76001: LIST
76002: LIST
76003: PUSH
76004: EMPTY
76005: LIST
76006: LIST
76007: LIST
76008: LIST
76009: LIST
76010: ST_TO_ADDR
// end ; 5 :
76011: GO 76151
76013: LD_INT 5
76015: DOUBLE
76016: EQUAL
76017: IFTRUE 76021
76019: GO 76150
76021: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76022: NOP4
76026: PUSH
76027: NOP4
76031: PUSH
76032: LD_INT 4
76034: MINUS
76035: PUSH
76036: NOP4
76040: PUSH
76041: LD_INT 1
76043: PUSH
76044: EMPTY
76045: LIST
76046: LIST
76047: LIST
76048: PUSH
76049: NOP4
76053: PUSH
76054: NOP4
76058: PUSH
76059: LD_INT 4
76061: MINUS
76062: PUSH
76063: LD_INT 3
76065: PUSH
76066: EMPTY
76067: LIST
76068: LIST
76069: LIST
76070: PUSH
76071: NOP4
76075: PUSH
76076: LD_INT 4
76078: PLUS
76079: PUSH
76080: NOP4
76084: PUSH
76085: LD_INT 4
76087: PLUS
76088: PUSH
76089: LD_INT 5
76091: PUSH
76092: EMPTY
76093: LIST
76094: LIST
76095: LIST
76096: PUSH
76097: NOP4
76101: PUSH
76102: LD_INT 3
76104: PLUS
76105: PUSH
76106: NOP4
76110: PUSH
76111: LD_INT 4
76113: PUSH
76114: EMPTY
76115: LIST
76116: LIST
76117: LIST
76118: PUSH
76119: NOP4
76123: PUSH
76124: NOP4
76128: PUSH
76129: LD_INT 3
76131: PLUS
76132: PUSH
76133: LD_INT 0
76135: PUSH
76136: EMPTY
76137: LIST
76138: LIST
76139: LIST
76140: PUSH
76141: EMPTY
76142: LIST
76143: LIST
76144: LIST
76145: LIST
76146: LIST
76147: ST_TO_ADDR
// end ; end ;
76148: GO 76151
76150: POP
// result := list ;
76151: NOP4
76155: PUSH
76156: NOP4
76160: ST_TO_ADDR
// end ;
76161: LD_VAR 0 4
76165: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76166: LD_INT 0
76168: PPUSH
76169: PPUSH
76170: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76171: NOP4
76175: NOT
76176: PUSH
76177: NOP4
76181: PUSH
76182: LD_INT 1
76184: PUSH
76185: LD_INT 2
76187: PUSH
76188: LD_INT 3
76190: PUSH
76191: LD_INT 4
76193: PUSH
76194: EMPTY
76195: LIST
76196: LIST
76197: LIST
76198: LIST
76199: IN
76200: NOT
76201: OR
76202: IFFALSE 76206
// exit ;
76204: GO 76298
// tmp := [ ] ;
76206: NOP4
76210: PUSH
76211: EMPTY
76212: ST_TO_ADDR
// for i in units do
76213: NOP4
76217: PUSH
76218: NOP4
76222: PUSH
76223: FOR_IN
76224: IFFALSE 76267
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
76226: NOP4
76230: PUSH
76231: NOP4
76235: PPUSH
76236: NOP4
76240: PUSH
76241: LD_INT 1
76243: PLUS
76244: PPUSH
76245: NOP4
76249: PPUSH
76250: NOP4
76254: PPUSH
76255: NOP4
76259: PPUSH
76260: NOP4
76264: ST_TO_ADDR
76265: GO 76223
76267: POP
76268: POP
// if not tmp then
76269: NOP4
76273: NOT
76274: IFFALSE 76278
// exit ;
76276: GO 76298
// result := SortListByListDesc ( units , tmp ) ;
76278: NOP4
76282: PUSH
76283: NOP4
76287: PPUSH
76288: NOP4
76292: PPUSH
76293: NOP4
76297: ST_TO_ADDR
// end ;
76298: LD_VAR 0 3
76302: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76303: LD_INT 0
76305: PPUSH
76306: PPUSH
76307: PPUSH
// result := false ;
76308: NOP4
76312: PUSH
76313: LD_INT 0
76315: ST_TO_ADDR
// x := GetX ( building ) ;
76316: NOP4
76320: PUSH
76321: NOP4
76325: PPUSH
76326: NOP4
76330: ST_TO_ADDR
// y := GetY ( building ) ;
76331: NOP4
76335: PUSH
76336: NOP4
76340: PPUSH
76341: NOP4
76345: ST_TO_ADDR
// if not building or not x or not y then
76346: NOP4
76350: NOT
76351: PUSH
76352: NOP4
76356: NOT
76357: OR
76358: PUSH
76359: NOP4
76363: NOT
76364: OR
76365: IFFALSE 76369
// exit ;
76367: GO 76461
// if GetTaskList ( unit ) then
76369: NOP4
76373: PPUSH
76374: NOP4
76378: IFFALSE 76461
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76380: LD_STRING e
76382: PUSH
76383: NOP4
76387: PPUSH
76388: NOP4
76392: PUSH
76393: LD_INT 1
76395: ARRAY
76396: PUSH
76397: LD_INT 1
76399: ARRAY
76400: EQUAL
76401: PUSH
76402: NOP4
76406: PUSH
76407: NOP4
76411: PPUSH
76412: NOP4
76416: PUSH
76417: LD_INT 1
76419: ARRAY
76420: PUSH
76421: LD_INT 2
76423: ARRAY
76424: EQUAL
76425: AND
76426: PUSH
76427: NOP4
76431: PUSH
76432: NOP4
76436: PPUSH
76437: NOP4
76441: PUSH
76442: LD_INT 1
76444: ARRAY
76445: PUSH
76446: LD_INT 3
76448: ARRAY
76449: EQUAL
76450: AND
76451: IFFALSE 76461
// result := true end ;
76453: NOP4
76457: PUSH
76458: LD_INT 1
76460: ST_TO_ADDR
// end ;
76461: LD_VAR 0 3
76465: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76466: LD_INT 0
76468: PPUSH
// result := false ;
76469: NOP4
76473: PUSH
76474: LD_INT 0
76476: ST_TO_ADDR
// if GetTaskList ( unit ) then
76477: NOP4
76481: PPUSH
76482: NOP4
76486: IFFALSE 76569
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76488: LD_STRING M
76490: PUSH
76491: NOP4
76495: PPUSH
76496: NOP4
76500: PUSH
76501: LD_INT 1
76503: ARRAY
76504: PUSH
76505: LD_INT 1
76507: ARRAY
76508: EQUAL
76509: PUSH
76510: NOP4
76514: PUSH
76515: NOP4
76519: PPUSH
76520: NOP4
76524: PUSH
76525: LD_INT 1
76527: ARRAY
76528: PUSH
76529: LD_INT 2
76531: ARRAY
76532: EQUAL
76533: AND
76534: PUSH
76535: NOP4
76539: PUSH
76540: NOP4
76544: PPUSH
76545: NOP4
76549: PUSH
76550: LD_INT 1
76552: ARRAY
76553: PUSH
76554: LD_INT 3
76556: ARRAY
76557: EQUAL
76558: AND
76559: IFFALSE 76569
// result := true ;
76561: NOP4
76565: PUSH
76566: LD_INT 1
76568: ST_TO_ADDR
// end ; end ;
76569: LD_VAR 0 4
76573: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76574: LD_INT 0
76576: PPUSH
76577: PPUSH
76578: PPUSH
76579: PPUSH
// if not unit or not area then
76580: NOP4
76584: NOT
76585: PUSH
76586: NOP4
76590: NOT
76591: OR
76592: IFFALSE 76596
// exit ;
76594: GO 76760
// tmp := AreaToList ( area , i ) ;
76596: NOP4
76600: PUSH
76601: NOP4
76605: PPUSH
76606: NOP4
76610: PPUSH
76611: NOP4
76615: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76616: NOP4
76620: PUSH
76621: DOUBLE
76622: LD_INT 1
76624: DEC
76625: ST_TO_ADDR
76626: NOP4
76630: PUSH
76631: LD_INT 1
76633: ARRAY
76634: PUSH
76635: FOR_TO
76636: IFFALSE 76758
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76638: NOP4
76642: PUSH
76643: NOP4
76647: PUSH
76648: LD_INT 1
76650: ARRAY
76651: PUSH
76652: NOP4
76656: ARRAY
76657: PUSH
76658: NOP4
76662: PUSH
76663: LD_INT 2
76665: ARRAY
76666: PUSH
76667: NOP4
76671: ARRAY
76672: PUSH
76673: EMPTY
76674: LIST
76675: LIST
76676: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
76677: NOP4
76681: PUSH
76682: LD_INT 1
76684: ARRAY
76685: PPUSH
76686: NOP4
76690: PUSH
76691: LD_INT 2
76693: ARRAY
76694: PPUSH
76695: NOP4
76699: PUSH
76700: LD_INT 0
76702: EQUAL
76703: IFFALSE 76756
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76705: NOP4
76709: PPUSH
76710: NOP4
76714: PUSH
76715: LD_INT 1
76717: ARRAY
76718: PPUSH
76719: NOP4
76723: PUSH
76724: LD_INT 2
76726: ARRAY
76727: PPUSH
76728: NOP4
76732: PPUSH
76733: NOP4
// result := IsPlaced ( unit ) ;
76737: NOP4
76741: PUSH
76742: NOP4
76746: PPUSH
76747: NOP4
76751: ST_TO_ADDR
// exit ;
76752: POP
76753: POP
76754: GO 76760
// end ; end ;
76756: GO 76635
76758: POP
76759: POP
// end ;
76760: LD_VAR 0 4
76764: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76765: LD_INT 0
76767: PPUSH
76768: PPUSH
76769: PPUSH
// if not side or side > 8 then
76770: NOP4
76774: NOT
76775: PUSH
76776: NOP4
76780: PUSH
76781: LD_INT 8
76783: GREATER
76784: OR
76785: IFFALSE 76789
// exit ;
76787: GO 76976
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76789: NOP4
76793: PUSH
76794: LD_INT 22
76796: PUSH
76797: NOP4
76801: PUSH
76802: EMPTY
76803: LIST
76804: LIST
76805: PUSH
76806: LD_INT 21
76808: PUSH
76809: LD_INT 3
76811: PUSH
76812: EMPTY
76813: LIST
76814: LIST
76815: PUSH
76816: EMPTY
76817: LIST
76818: LIST
76819: PPUSH
76820: NOP4
76824: ST_TO_ADDR
// if not tmp then
76825: NOP4
76829: NOT
76830: IFFALSE 76834
// exit ;
76832: GO 76976
// enable_addtolog := true ;
76834: LD_ADDR_OWVAR 81
76838: PUSH
76839: LD_INT 1
76841: ST_TO_ADDR
// AddToLog ( [ ) ;
76842: LD_STRING [
76844: PPUSH
76845: NOP4
// for i in tmp do
76849: NOP4
76853: PUSH
76854: NOP4
76858: PUSH
76859: FOR_IN
76860: IFFALSE 76967
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76862: LD_STRING [
76864: PUSH
76865: NOP4
76869: PPUSH
76870: NOP4
76874: STR
76875: PUSH
76876: LD_STRING , 
76878: STR
76879: PUSH
76880: NOP4
76884: PPUSH
76885: NOP4
76889: STR
76890: PUSH
76891: LD_STRING , 
76893: STR
76894: PUSH
76895: NOP4
76899: PPUSH
76900: NOP4
76904: STR
76905: PUSH
76906: LD_STRING , 
76908: STR
76909: PUSH
76910: NOP4
76914: PPUSH
76915: NOP4
76919: STR
76920: PUSH
76921: LD_STRING , 
76923: STR
76924: PUSH
76925: NOP4
76929: PPUSH
76930: LD_INT 1
76932: PPUSH
76933: NOP4
76937: STR
76938: PUSH
76939: LD_STRING , 
76941: STR
76942: PUSH
76943: NOP4
76947: PPUSH
76948: LD_INT 2
76950: PPUSH
76951: NOP4
76955: STR
76956: PUSH
76957: LD_STRING ],
76959: STR
76960: PPUSH
76961: NOP4
// end ;
76965: GO 76859
76967: POP
76968: POP
// AddToLog ( ]; ) ;
76969: LD_STRING ];
76971: PPUSH
76972: NOP4
// end ;
76976: LD_VAR 0 2
76980: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76981: LD_INT 0
76983: PPUSH
76984: PPUSH
76985: PPUSH
76986: PPUSH
76987: PPUSH
// if not area or not rate or not max then
76988: NOP4
76992: NOT
76993: PUSH
76994: NOP4
76998: NOT
76999: OR
77000: PUSH
77001: NOP4
77005: NOT
77006: OR
77007: IFFALSE 77011
// exit ;
77009: GO 77203
// while 1 do
77011: LD_INT 1
77013: IFFALSE 77203
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77015: NOP4
77019: PUSH
77020: NOP4
77024: PPUSH
77025: LD_INT 1
77027: PPUSH
77028: NOP4
77032: PUSH
77033: LD_INT 10
77035: MUL
77036: ST_TO_ADDR
// r := rate / 10 ;
77037: NOP4
77041: PUSH
77042: NOP4
77046: PUSH
77047: LD_INT 10
77049: DIVREAL
77050: ST_TO_ADDR
// time := 1 1$00 ;
77051: NOP4
77055: PUSH
77056: LD_INT 2100
77058: ST_TO_ADDR
// if amount < min then
77059: NOP4
77063: PUSH
77064: NOP4
77068: LESS
77069: IFFALSE 77087
// r := r * 2 else
77071: NOP4
77075: PUSH
77076: NOP4
77080: PUSH
77081: LD_INT 2
77083: MUL
77084: ST_TO_ADDR
77085: GO 77113
// if amount > max then
77087: NOP4
77091: PUSH
77092: NOP4
77096: GREATER
77097: IFFALSE 77113
// r := r / 2 ;
77099: NOP4
77103: PUSH
77104: NOP4
77108: PUSH
77109: LD_INT 2
77111: DIVREAL
77112: ST_TO_ADDR
// time := time / r ;
77113: NOP4
77117: PUSH
77118: NOP4
77122: PUSH
77123: NOP4
77127: DIVREAL
77128: ST_TO_ADDR
// if time < 0 then
77129: NOP4
77133: PUSH
77134: LD_INT 0
77136: LESS
77137: IFFALSE 77154
// time := time * - 1 ;
77139: NOP4
77143: PUSH
77144: NOP4
77148: PUSH
77149: LD_INT 1
77151: NEG
77152: MUL
77153: ST_TO_ADDR
// wait ( time ) ;
77154: NOP4
77158: PPUSH
77159: NOP4
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
77163: LD_INT 35
77165: PPUSH
77166: LD_INT 875
77168: PPUSH
77169: NOP4
77173: PPUSH
77174: NOP4
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77178: LD_INT 1
77180: PPUSH
77181: LD_INT 5
77183: PPUSH
77184: NOP4
77188: PPUSH
77189: NOP4
77193: PPUSH
77194: LD_INT 1
77196: PPUSH
77197: NOP4
// end ;
77201: GO 77011
// end ;
77203: LD_VAR 0 5
77207: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77208: LD_INT 0
77210: PPUSH
77211: PPUSH
77212: PPUSH
77213: PPUSH
77214: PPUSH
77215: PPUSH
77216: PPUSH
77217: PPUSH
// if not turrets or not factories then
77218: NOP4
77222: NOT
77223: PUSH
77224: NOP4
77228: NOT
77229: OR
77230: IFFALSE 77234
// exit ;
77232: GO 77541
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77234: NOP4
77238: PUSH
77239: LD_INT 5
77241: PUSH
77242: LD_INT 6
77244: PUSH
77245: EMPTY
77246: LIST
77247: LIST
77248: PUSH
77249: LD_INT 2
77251: PUSH
77252: LD_INT 4
77254: PUSH
77255: EMPTY
77256: LIST
77257: LIST
77258: PUSH
77259: LD_INT 3
77261: PUSH
77262: LD_INT 5
77264: PUSH
77265: EMPTY
77266: LIST
77267: LIST
77268: PUSH
77269: EMPTY
77270: LIST
77271: LIST
77272: LIST
77273: PUSH
77274: LD_INT 24
77276: PUSH
77277: LD_INT 25
77279: PUSH
77280: EMPTY
77281: LIST
77282: LIST
77283: PUSH
77284: LD_INT 23
77286: PUSH
77287: LD_INT 27
77289: PUSH
77290: EMPTY
77291: LIST
77292: LIST
77293: PUSH
77294: EMPTY
77295: LIST
77296: LIST
77297: PUSH
77298: LD_INT 42
77300: PUSH
77301: LD_INT 43
77303: PUSH
77304: EMPTY
77305: LIST
77306: LIST
77307: PUSH
77308: LD_INT 44
77310: PUSH
77311: LD_INT 46
77313: PUSH
77314: EMPTY
77315: LIST
77316: LIST
77317: PUSH
77318: LD_INT 45
77320: PUSH
77321: LD_INT 47
77323: PUSH
77324: EMPTY
77325: LIST
77326: LIST
77327: PUSH
77328: EMPTY
77329: LIST
77330: LIST
77331: LIST
77332: PUSH
77333: EMPTY
77334: LIST
77335: LIST
77336: LIST
77337: ST_TO_ADDR
// result := [ ] ;
77338: NOP4
77342: PUSH
77343: EMPTY
77344: ST_TO_ADDR
// for i in turrets do
77345: NOP4
77349: PUSH
77350: NOP4
77354: PUSH
77355: FOR_IN
77356: IFFALSE 77539
// begin nat := GetNation ( i ) ;
77358: NOP4
77362: PUSH
77363: NOP4
77367: PPUSH
77368: NOP4
77372: ST_TO_ADDR
// weapon := 0 ;
77373: NOP4
77377: PUSH
77378: LD_INT 0
77380: ST_TO_ADDR
// if not nat then
77381: NOP4
77385: NOT
77386: IFFALSE 77390
// continue ;
77388: GO 77355
// for j in list [ nat ] do
77390: NOP4
77394: PUSH
77395: NOP4
77399: PUSH
77400: NOP4
77404: ARRAY
77405: PUSH
77406: FOR_IN
77407: IFFALSE 77448
// if GetBWeapon ( i ) = j [ 1 ] then
77409: NOP4
77413: PPUSH
77414: NOP4
77418: PUSH
77419: NOP4
77423: PUSH
77424: LD_INT 1
77426: ARRAY
77427: EQUAL
77428: IFFALSE 77446
// begin weapon := j [ 2 ] ;
77430: NOP4
77434: PUSH
77435: NOP4
77439: PUSH
77440: LD_INT 2
77442: ARRAY
77443: ST_TO_ADDR
// break ;
77444: GO 77448
// end ;
77446: GO 77406
77448: POP
77449: POP
// if not weapon then
77450: NOP4
77454: NOT
77455: IFFALSE 77459
// continue ;
77457: GO 77355
// for k in factories do
77459: NOP4
77463: PUSH
77464: NOP4
77468: PUSH
77469: FOR_IN
77470: IFFALSE 77535
// begin weapons := AvailableWeaponList ( k ) ;
77472: NOP4
77476: PUSH
77477: NOP4
77481: PPUSH
77482: NOP4
77486: ST_TO_ADDR
// if not weapons then
77487: NOP4
77491: NOT
77492: IFFALSE 77496
// continue ;
77494: GO 77469
// if weapon in weapons then
77496: NOP4
77500: PUSH
77501: NOP4
77505: IN
77506: IFFALSE 77533
// begin result := [ i , weapon ] ;
77508: NOP4
77512: PUSH
77513: NOP4
77517: PUSH
77518: NOP4
77522: PUSH
77523: EMPTY
77524: LIST
77525: LIST
77526: ST_TO_ADDR
// exit ;
77527: POP
77528: POP
77529: POP
77530: POP
77531: GO 77541
// end ; end ;
77533: GO 77469
77535: POP
77536: POP
// end ;
77537: GO 77355
77539: POP
77540: POP
// end ;
77541: LD_VAR 0 3
77545: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77546: LD_INT 0
77548: PPUSH
// if not side or side > 8 then
77549: NOP4
77553: NOT
77554: PUSH
77555: NOP4
77559: PUSH
77560: LD_INT 8
77562: GREATER
77563: OR
77564: IFFALSE 77568
// exit ;
77566: GO 77627
// if not range then
77568: NOP4
77572: NOT
77573: IFFALSE 77584
// range := - 12 ;
77575: NOP4
77579: PUSH
77580: LD_INT 12
77582: NEG
77583: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77584: NOP4
77588: PPUSH
77589: NOP4
77593: PPUSH
77594: NOP4
77598: PPUSH
77599: NOP4
77603: PPUSH
77604: NOP4
// RemoveSeeing ( x , y , side ) ;
77608: NOP4
77612: PPUSH
77613: NOP4
77617: PPUSH
77618: NOP4
77622: PPUSH
77623: NOP4
// end ;
77627: LD_VAR 0 5
77631: RET
// export function Video ( mode ) ; begin
77632: LD_INT 0
77634: PPUSH
// ingame_video = mode ;
77635: LD_ADDR_OWVAR 52
77639: PUSH
77640: NOP4
77644: ST_TO_ADDR
// interface_hidden = mode ;
77645: LD_ADDR_OWVAR 54
77649: PUSH
77650: NOP4
77654: ST_TO_ADDR
// end ;
77655: LD_VAR 0 2
77659: RET
// export function Join ( array , element ) ; begin
77660: LD_INT 0
77662: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77663: NOP4
77667: PUSH
77668: NOP4
77672: PPUSH
77673: NOP4
77677: PUSH
77678: LD_INT 1
77680: PLUS
77681: PPUSH
77682: NOP4
77686: PPUSH
77687: NOP4
77691: ST_TO_ADDR
// end ;
77692: LD_VAR 0 3
77696: RET
// export function JoinUnion ( array , element ) ; begin
77697: LD_INT 0
77699: PPUSH
// result := array union element ;
77700: NOP4
77704: PUSH
77705: NOP4
77709: PUSH
77710: NOP4
77714: UNION
77715: ST_TO_ADDR
// end ;
77716: LD_VAR 0 3
77720: RET
// export function GetBehemoths ( side ) ; begin
77721: LD_INT 0
77723: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
77724: NOP4
77728: PUSH
77729: LD_INT 22
77731: PUSH
77732: NOP4
77736: PUSH
77737: EMPTY
77738: LIST
77739: LIST
77740: PUSH
77741: LD_INT 31
77743: PUSH
77744: LD_INT 25
77746: PUSH
77747: EMPTY
77748: LIST
77749: LIST
77750: PUSH
77751: EMPTY
77752: LIST
77753: LIST
77754: PPUSH
77755: NOP4
77759: ST_TO_ADDR
// end ;
77760: LD_VAR 0 2
77764: RET
// export function Shuffle ( array ) ; var i , index ; begin
77765: LD_INT 0
77767: PPUSH
77768: PPUSH
77769: PPUSH
// result := [ ] ;
77770: NOP4
77774: PUSH
77775: EMPTY
77776: ST_TO_ADDR
// if not array then
77777: NOP4
77781: NOT
77782: IFFALSE 77786
// exit ;
77784: GO 77885
// Randomize ;
77786: NOP4
// for i = array downto 1 do
77790: NOP4
77794: PUSH
77795: DOUBLE
77796: NOP4
77800: INC
77801: ST_TO_ADDR
77802: LD_INT 1
77804: PUSH
77805: FOR_DOWNTO
77806: IFFALSE 77883
// begin index := rand ( 1 , array ) ;
77808: NOP4
77812: PUSH
77813: LD_INT 1
77815: PPUSH
77816: NOP4
77820: PPUSH
77821: NOP4
77825: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77826: NOP4
77830: PUSH
77831: NOP4
77835: PPUSH
77836: NOP4
77840: PUSH
77841: LD_INT 1
77843: PLUS
77844: PPUSH
77845: NOP4
77849: PUSH
77850: NOP4
77854: ARRAY
77855: PPUSH
77856: NOP4
77860: ST_TO_ADDR
// array := Delete ( array , index ) ;
77861: NOP4
77865: PUSH
77866: NOP4
77870: PPUSH
77871: NOP4
77875: PPUSH
77876: NOP4
77880: ST_TO_ADDR
// end ;
77881: GO 77805
77883: POP
77884: POP
// end ;
77885: LD_VAR 0 2
77889: RET
// export function GetBaseMaterials ( base ) ; begin
77890: LD_INT 0
77892: PPUSH
// result := [ 0 , 0 , 0 ] ;
77893: NOP4
77897: PUSH
77898: LD_INT 0
77900: PUSH
77901: LD_INT 0
77903: PUSH
77904: LD_INT 0
77906: PUSH
77907: EMPTY
77908: LIST
77909: LIST
77910: LIST
77911: ST_TO_ADDR
// if not base then
77912: NOP4
77916: NOT
77917: IFFALSE 77921
// exit ;
77919: GO 77970
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77921: NOP4
77925: PUSH
77926: NOP4
77930: PPUSH
77931: LD_INT 1
77933: PPUSH
77934: NOP4
77938: PUSH
77939: NOP4
77943: PPUSH
77944: LD_INT 2
77946: PPUSH
77947: NOP4
77951: PUSH
77952: NOP4
77956: PPUSH
77957: LD_INT 3
77959: PPUSH
77960: NOP4
77964: PUSH
77965: EMPTY
77966: LIST
77967: LIST
77968: LIST
77969: ST_TO_ADDR
// end ;
77970: LD_VAR 0 2
77974: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77975: LD_INT 0
77977: PPUSH
77978: PPUSH
// result := array ;
77979: NOP4
77983: PUSH
77984: NOP4
77988: ST_TO_ADDR
// if size > 0 then
77989: NOP4
77993: PUSH
77994: LD_INT 0
77996: GREATER
77997: IFFALSE 78043
// for i := array downto size do
77999: NOP4
78003: PUSH
78004: DOUBLE
78005: NOP4
78009: INC
78010: ST_TO_ADDR
78011: NOP4
78015: PUSH
78016: FOR_DOWNTO
78017: IFFALSE 78041
// result := Delete ( result , result ) ;
78019: NOP4
78023: PUSH
78024: NOP4
78028: PPUSH
78029: NOP4
78033: PPUSH
78034: NOP4
78038: ST_TO_ADDR
78039: GO 78016
78041: POP
78042: POP
// end ;
78043: LD_VAR 0 3
78047: RET
// export function ComExit ( unit ) ; var tmp ; begin
78048: LD_INT 0
78050: PPUSH
78051: PPUSH
// if not IsInUnit ( unit ) then
78052: NOP4
78056: PPUSH
78057: NOP4
78061: NOT
78062: IFFALSE 78066
// exit ;
78064: GO 78126
// tmp := IsInUnit ( unit ) ;
78066: NOP4
78070: PUSH
78071: NOP4
78075: PPUSH
78076: NOP4
78080: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78081: NOP4
78085: PPUSH
78086: NOP4
78090: PUSH
78091: LD_INT 2
78093: EQUAL
78094: IFFALSE 78107
// ComExitVehicle ( unit ) else
78096: NOP4
78100: PPUSH
78101: NOP4
78105: GO 78116
// ComExitBuilding ( unit ) ;
78107: NOP4
78111: PPUSH
78112: NOP4
// result := tmp ;
78116: NOP4
78120: PUSH
78121: NOP4
78125: ST_TO_ADDR
// end ;
78126: LD_VAR 0 2
78130: RET
// export function ComExitAll ( units ) ; var i ; begin
78131: LD_INT 0
78133: PPUSH
78134: PPUSH
// if not units then
78135: NOP4
78139: NOT
78140: IFFALSE 78144
// exit ;
78142: GO 78170
// for i in units do
78144: NOP4
78148: PUSH
78149: NOP4
78153: PUSH
78154: FOR_IN
78155: IFFALSE 78168
// ComExit ( i ) ;
78157: NOP4
78161: PPUSH
78162: NOP4
78166: GO 78154
78168: POP
78169: POP
// end ;
78170: LD_VAR 0 2
78174: RET
// export function ResetHc ; begin
78175: LD_INT 0
78177: PPUSH
// InitHc ;
78178: NOP4
// hc_importance := 0 ;
78182: LD_ADDR_OWVAR 32
78186: PUSH
78187: LD_INT 0
78189: ST_TO_ADDR
// end ;
78190: LD_VAR 0 1
78194: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78195: LD_INT 0
78197: PPUSH
78198: PPUSH
78199: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78200: NOP4
78204: PUSH
78205: NOP4
78209: PUSH
78210: NOP4
78214: PLUS
78215: PUSH
78216: LD_INT 2
78218: DIV
78219: ST_TO_ADDR
// if _x < 0 then
78220: NOP4
78224: PUSH
78225: LD_INT 0
78227: LESS
78228: IFFALSE 78245
// _x := _x * - 1 ;
78230: NOP4
78234: PUSH
78235: NOP4
78239: PUSH
78240: LD_INT 1
78242: NEG
78243: MUL
78244: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78245: NOP4
78249: PUSH
78250: NOP4
78254: PUSH
78255: NOP4
78259: PLUS
78260: PUSH
78261: LD_INT 2
78263: DIV
78264: ST_TO_ADDR
// if _y < 0 then
78265: NOP4
78269: PUSH
78270: LD_INT 0
78272: LESS
78273: IFFALSE 78290
// _y := _y * - 1 ;
78275: NOP4
78279: PUSH
78280: NOP4
78284: PUSH
78285: LD_INT 1
78287: NEG
78288: MUL
78289: ST_TO_ADDR
// result := [ _x , _y ] ;
78290: NOP4
78294: PUSH
78295: NOP4
78299: PUSH
78300: NOP4
78304: PUSH
78305: EMPTY
78306: LIST
78307: LIST
78308: ST_TO_ADDR
// end ;
78309: LD_VAR 0 5
78313: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78314: LD_INT 0
78316: PPUSH
78317: PPUSH
78318: PPUSH
78319: PPUSH
// task := GetTaskList ( unit ) ;
78320: NOP4
78324: PUSH
78325: NOP4
78329: PPUSH
78330: NOP4
78334: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78335: NOP4
78339: NOT
78340: PUSH
78341: NOP4
78345: PPUSH
78346: NOP4
78350: PPUSH
78351: NOP4
78355: NOT
78356: AND
78357: IFFALSE 78361
// exit ;
78359: GO 78479
// if IsInArea ( unit , area ) then
78361: NOP4
78365: PPUSH
78366: NOP4
78370: PPUSH
78371: NOP4
78375: IFFALSE 78393
// begin ComMoveToArea ( unit , goAway ) ;
78377: NOP4
78381: PPUSH
78382: NOP4
78386: PPUSH
78387: NOP4
// exit ;
78391: GO 78479
// end ; if task [ 1 ] [ 1 ] <> M then
78393: NOP4
78397: PUSH
78398: LD_INT 1
78400: ARRAY
78401: PUSH
78402: LD_INT 1
78404: ARRAY
78405: PUSH
78406: LD_STRING M
78408: NONEQUAL
78409: IFFALSE 78413
// exit ;
78411: GO 78479
// x := task [ 1 ] [ 2 ] ;
78413: NOP4
78417: PUSH
78418: NOP4
78422: PUSH
78423: LD_INT 1
78425: ARRAY
78426: PUSH
78427: LD_INT 2
78429: ARRAY
78430: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78431: NOP4
78435: PUSH
78436: NOP4
78440: PUSH
78441: LD_INT 1
78443: ARRAY
78444: PUSH
78445: LD_INT 3
78447: ARRAY
78448: ST_TO_ADDR
// if InArea ( x , y , area ) then
78449: NOP4
78453: PPUSH
78454: NOP4
78458: PPUSH
78459: NOP4
78463: PPUSH
78464: NOP4
78468: IFFALSE 78479
// ComStop ( unit ) ;
78470: NOP4
78474: PPUSH
78475: NOP4
// end ;
78479: LD_VAR 0 4
78483: RET
// export function Abs ( value ) ; begin
78484: LD_INT 0
78486: PPUSH
// result := value ;
78487: NOP4
78491: PUSH
78492: NOP4
78496: ST_TO_ADDR
// if value < 0 then
78497: NOP4
78501: PUSH
78502: LD_INT 0
78504: LESS
78505: IFFALSE 78522
// result := value * - 1 ;
78507: NOP4
78511: PUSH
78512: NOP4
78516: PUSH
78517: LD_INT 1
78519: NEG
78520: MUL
78521: ST_TO_ADDR
// end ;
78522: LD_VAR 0 2
78526: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78527: LD_INT 0
78529: PPUSH
78530: PPUSH
78531: PPUSH
78532: PPUSH
78533: PPUSH
78534: PPUSH
78535: PPUSH
78536: PPUSH
// if not unit or not building then
78537: NOP4
78541: NOT
78542: PUSH
78543: NOP4
78547: NOT
78548: OR
78549: IFFALSE 78553
// exit ;
78551: GO 78779
// x := GetX ( building ) ;
78553: NOP4
78557: PUSH
78558: NOP4
78562: PPUSH
78563: NOP4
78567: ST_TO_ADDR
// y := GetY ( building ) ;
78568: NOP4
78572: PUSH
78573: NOP4
78577: PPUSH
78578: NOP4
78582: ST_TO_ADDR
// d := GetDir ( building ) ;
78583: NOP4
78587: PUSH
78588: NOP4
78592: PPUSH
78593: NOP4
78597: ST_TO_ADDR
// r := 4 ;
78598: NOP4
78602: PUSH
78603: LD_INT 4
78605: ST_TO_ADDR
// for i := 1 to 5 do
78606: NOP4
78610: PUSH
78611: DOUBLE
78612: LD_INT 1
78614: DEC
78615: ST_TO_ADDR
78616: LD_INT 5
78618: PUSH
78619: FOR_TO
78620: IFFALSE 78777
// begin _x := ShiftX ( x , d , r + i ) ;
78622: NOP4
78626: PUSH
78627: NOP4
78631: PPUSH
78632: NOP4
78636: PPUSH
78637: NOP4
78641: PUSH
78642: NOP4
78646: PLUS
78647: PPUSH
78648: NOP4
78652: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78653: NOP4
78657: PUSH
78658: NOP4
78662: PPUSH
78663: NOP4
78667: PPUSH
78668: NOP4
78672: PUSH
78673: NOP4
78677: PLUS
78678: PPUSH
78679: NOP4
78683: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78684: NOP4
78688: PPUSH
78689: NOP4
78693: PPUSH
78694: NOP4
78698: PUSH
78699: NOP4
78703: PPUSH
78704: NOP4
78708: PPUSH
78709: NOP4
78713: PPUSH
78714: NOP4
78718: PUSH
78719: LD_INT 3
78721: PUSH
78722: LD_INT 2
78724: PUSH
78725: EMPTY
78726: LIST
78727: LIST
78728: IN
78729: NOT
78730: AND
78731: IFFALSE 78775
// begin ComMoveXY ( unit , _x , _y ) ;
78733: NOP4
78737: PPUSH
78738: NOP4
78742: PPUSH
78743: NOP4
78747: PPUSH
78748: NOP4
// result := [ _x , _y ] ;
78752: NOP4
78756: PUSH
78757: NOP4
78761: PUSH
78762: NOP4
78766: PUSH
78767: EMPTY
78768: LIST
78769: LIST
78770: ST_TO_ADDR
// exit ;
78771: POP
78772: POP
78773: GO 78779
// end ; end ;
78775: GO 78619
78777: POP
78778: POP
// end ;
78779: LD_VAR 0 3
78783: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78784: LD_INT 0
78786: PPUSH
78787: PPUSH
78788: PPUSH
// result := 0 ;
78789: NOP4
78793: PUSH
78794: LD_INT 0
78796: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78797: NOP4
78801: PUSH
78802: LD_INT 0
78804: LESS
78805: PUSH
78806: NOP4
78810: PUSH
78811: LD_INT 8
78813: GREATER
78814: OR
78815: PUSH
78816: NOP4
78820: PUSH
78821: LD_INT 0
78823: LESS
78824: OR
78825: PUSH
78826: NOP4
78830: PUSH
78831: LD_INT 8
78833: GREATER
78834: OR
78835: IFFALSE 78839
// exit ;
78837: GO 78914
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78839: NOP4
78843: PUSH
78844: LD_INT 22
78846: PUSH
78847: NOP4
78851: PUSH
78852: EMPTY
78853: LIST
78854: LIST
78855: PPUSH
78856: NOP4
78860: PUSH
78861: FOR_IN
78862: IFFALSE 78912
// begin un := UnitShoot ( i ) ;
78864: NOP4
78868: PUSH
78869: NOP4
78873: PPUSH
78874: NOP4
78878: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78879: NOP4
78883: PPUSH
78884: NOP4
78888: PUSH
78889: NOP4
78893: EQUAL
78894: IFFALSE 78910
// begin result := un ;
78896: NOP4
78900: PUSH
78901: NOP4
78905: ST_TO_ADDR
// exit ;
78906: POP
78907: POP
78908: GO 78914
// end ; end ;
78910: GO 78861
78912: POP
78913: POP
// end ;
78914: LD_VAR 0 3
78918: RET
// export function GetCargoBay ( units ) ; begin
78919: LD_INT 0
78921: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78922: NOP4
78926: PUSH
78927: NOP4
78931: PPUSH
78932: LD_INT 2
78934: PUSH
78935: LD_INT 34
78937: PUSH
78938: LD_INT 12
78940: PUSH
78941: EMPTY
78942: LIST
78943: LIST
78944: PUSH
78945: LD_INT 34
78947: PUSH
78948: LD_INT 51
78950: PUSH
78951: EMPTY
78952: LIST
78953: LIST
78954: PUSH
78955: LD_INT 34
78957: PUSH
78958: LD_INT 32
78960: PUSH
78961: EMPTY
78962: LIST
78963: LIST
78964: PUSH
78965: LD_INT 34
78967: PUSH
78968: NOP4
78972: PUSH
78973: EMPTY
78974: LIST
78975: LIST
78976: PUSH
78977: EMPTY
78978: LIST
78979: LIST
78980: LIST
78981: LIST
78982: LIST
78983: PPUSH
78984: NOP4
78988: ST_TO_ADDR
// end ;
78989: LD_VAR 0 2
78993: RET
