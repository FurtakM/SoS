// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export vehiclesFrom05 , resourcesFrom05 , fastBreakthrough , stevensStatus , apeTechsStatus ; export techMatPredStatus ; export vehsFrom06 , resourcesFrom06 ; export dial_SibTechsBlocker , dial_VsevolodContactBlocker , dial_TrapDialogBlocker , dial_ConvoyDialogBlocker , dial_NorthBlocker , dial_EndMissionDialogBlocker ; export claimOvsyenkoBase , claimTerminalBase , lostAgainBase ; export immortalVsevolodTeam , savedVsevolod , vsevolodWaitGorky ; export canGoNorth ; export enableVsevolodCounter ; export canSpawnReinforces ; export canEndMission ; export canRemoveUnits ; export timeToAttack ; export cratesSpawned ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 308 0 0
// vehiclesFrom05 = LoadVariable ( 05_Tanks_4 , [ ] ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 05_Tanks_4
  31: PPUSH
  32: EMPTY
  33: PPUSH
  34: CALL_OW 30
  38: ST_TO_ADDR
// resourcesFrom05 = LoadVariable ( 05_ResourcesInCargo_3 , [ ] ) ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: LD_STRING 05_ResourcesInCargo_3
  46: PPUSH
  47: EMPTY
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// fastBreakthrough = LoadVariable ( 05_FastBreakthrough_6 , false ) ;
  54: LD_ADDR_EXP 3
  58: PUSH
  59: LD_STRING 05_FastBreakthrough_6
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// stevensStatus = LoadVariable ( 05_StevensStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 4
  74: PUSH
  75: LD_STRING 05_StevensStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// apeTechsStatus = LoadVariable ( 05_ApeTechsStatus_7 , [ 0 , 0 , 0 ] ) ;
  86: LD_ADDR_EXP 5
  90: PUSH
  91: LD_STRING 05_ApeTechsStatus_7
  93: PPUSH
  94: LD_INT 0
  96: PUSH
  97: LD_INT 0
  99: PUSH
 100: LD_INT 0
 102: PUSH
 103: EMPTY
 104: LIST
 105: LIST
 106: LIST
 107: PPUSH
 108: CALL_OW 30
 112: ST_TO_ADDR
// techMatPredStatus = state_enabled ;
 113: LD_ADDR_EXP 6
 117: PUSH
 118: LD_INT 1
 120: ST_TO_ADDR
// vehsFrom06 = [ ] ;
 121: LD_ADDR_EXP 7
 125: PUSH
 126: EMPTY
 127: ST_TO_ADDR
// resourcesFrom06 = [ ] ;
 128: LD_ADDR_EXP 8
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// dial_SibTechsBlocker = false ;
 135: LD_ADDR_EXP 9
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// dial_VsevolodContactBlocker = false ;
 143: LD_ADDR_EXP 10
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// dial_TrapDialogBlocker = false ;
 151: LD_ADDR_EXP 11
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// dial_ConvoyDialogBlocker = false ;
 159: LD_ADDR_EXP 12
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// dial_NorthBlocker = false ;
 167: LD_ADDR_EXP 13
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// dial_EndMissionDialogBlocker = false ;
 175: LD_ADDR_EXP 14
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// claimOvsyenkoBase = false ;
 183: LD_ADDR_EXP 15
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// claimTerminalBase = false ;
 191: LD_ADDR_EXP 16
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// lostAgainBase = false ;
 199: LD_ADDR_EXP 17
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// immortalVsevolodTeam = true ;
 207: LD_ADDR_EXP 18
 211: PUSH
 212: LD_INT 1
 214: ST_TO_ADDR
// savedVsevolod = false ;
 215: LD_ADDR_EXP 19
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// vsevolodWaitGorky = false ;
 223: LD_ADDR_EXP 20
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// enableVsevolodCounter = false ;
 231: LD_ADDR_EXP 22
 235: PUSH
 236: LD_INT 0
 238: ST_TO_ADDR
// canGoNorth = false ;
 239: LD_ADDR_EXP 21
 243: PUSH
 244: LD_INT 0
 246: ST_TO_ADDR
// canSpawnReinforces = false ;
 247: LD_ADDR_EXP 23
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// canEndMission = false ;
 255: LD_ADDR_EXP 24
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// canRemoveUnits = false ;
 263: LD_ADDR_EXP 25
 267: PUSH
 268: LD_INT 0
 270: ST_TO_ADDR
// timeToAttack = 0 0$00 ;
 271: LD_ADDR_EXP 26
 275: PUSH
 276: LD_INT 0
 278: ST_TO_ADDR
// cratesSpawned = 0 ;
 279: LD_ADDR_EXP 27
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// PrepareRussians ;
 287: CALL 893 0 0
// PrepareAmericans ;
 291: CALL 3324 0 0
// Nef_PrepareNature ;
 295: CALL 4433 0 0
// MissionIntro ;
 299: CALL 16039 0 0
// end ; end_of_file
 303: LD_VAR 0 1
 307: RET
// export function InitMapConfig ; begin
 308: LD_INT 0
 310: PPUSH
// BaseMapConfig ;
 311: CALL 324 0 0
// MissionMapConfig ;
 315: CALL 414 0 0
// end ;
 319: LD_VAR 0 1
 323: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 324: LD_INT 0
 326: PPUSH
// animalsAmount = [ 3 , 3 , 1 , 3 , 0 ] ;
 327: LD_ADDR_EXP 28
 331: PUSH
 332: LD_INT 3
 334: PUSH
 335: LD_INT 3
 337: PUSH
 338: LD_INT 1
 340: PUSH
 341: LD_INT 3
 343: PUSH
 344: LD_INT 0
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 354: LD_ADDR_EXP 29
 358: PUSH
 359: LD_INT 2
 361: PUSH
 362: LD_INT 2
 364: PUSH
 365: LD_INT 2
 367: PUSH
 368: LD_INT 2
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: LIST
 375: LIST
 376: ST_TO_ADDR
// animalsAgression = 3 ;
 377: LD_ADDR_EXP 30
 381: PUSH
 382: LD_INT 3
 384: ST_TO_ADDR
// debugMode = 0 ;
 385: LD_ADDR_EXP 33
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// missionPrefix = 06_ ;
 393: LD_ADDR_EXP 31
 397: PUSH
 398: LD_STRING 06_
 400: ST_TO_ADDR
// previousMissionPrefix = 05_ ;
 401: LD_ADDR_EXP 32
 405: PUSH
 406: LD_STRING 05_
 408: ST_TO_ADDR
// end ;
 409: LD_VAR 0 1
 413: RET
// export enemySkillLevel ; export ovsyenkoStartCrates , terminalStartSiberite ; export trapAmount ; export vsevolodSaveTime ; function MissionMapConfig ; begin
 414: LD_INT 0
 416: PPUSH
// enemySkillLevel = [ 3 , 4 , 5 ] [ Difficulty ] ;
 417: LD_ADDR_EXP 34
 421: PUSH
 422: LD_INT 3
 424: PUSH
 425: LD_INT 4
 427: PUSH
 428: LD_INT 5
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: LIST
 435: PUSH
 436: LD_OWVAR 67
 440: ARRAY
 441: ST_TO_ADDR
// ovsyenkoStartCrates = [ 150 , 100 , 50 ] [ Difficulty ] ;
 442: LD_ADDR_EXP 35
 446: PUSH
 447: LD_INT 150
 449: PUSH
 450: LD_INT 100
 452: PUSH
 453: LD_INT 50
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: LIST
 460: PUSH
 461: LD_OWVAR 67
 465: ARRAY
 466: ST_TO_ADDR
// terminalStartSiberite = [ 100 , 70 , 50 ] [ Difficulty ] ;
 467: LD_ADDR_EXP 36
 471: PUSH
 472: LD_INT 100
 474: PUSH
 475: LD_INT 70
 477: PUSH
 478: LD_INT 50
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: PUSH
 486: LD_OWVAR 67
 490: ARRAY
 491: ST_TO_ADDR
// trapAmount = [ rand ( 4 , 5 ) , rand ( 5 , 6 ) , rand ( 6 , 7 ) ] [ Difficulty ] ;
 492: LD_ADDR_EXP 37
 496: PUSH
 497: LD_INT 4
 499: PPUSH
 500: LD_INT 5
 502: PPUSH
 503: CALL_OW 12
 507: PUSH
 508: LD_INT 5
 510: PPUSH
 511: LD_INT 6
 513: PPUSH
 514: CALL_OW 12
 518: PUSH
 519: LD_INT 6
 521: PPUSH
 522: LD_INT 7
 524: PPUSH
 525: CALL_OW 12
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: LIST
 534: PUSH
 535: LD_OWVAR 67
 539: ARRAY
 540: ST_TO_ADDR
// vsevolodSaveTime = [ 12 12$0 , 11 11$0 , 10 10$0 ] [ Difficulty ] ;
 541: LD_ADDR_EXP 38
 545: PUSH
 546: LD_INT 25200
 548: PUSH
 549: LD_INT 23100
 551: PUSH
 552: LD_INT 21000
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: PUSH
 560: LD_OWVAR 67
 564: ARRAY
 565: ST_TO_ADDR
// end ;
 566: LD_VAR 0 1
 570: RET
// every 0 0$1 trigger debugMode do var i ;
 571: LD_EXP 33
 575: IFFALSE 890
 577: GO 579
 579: DISABLE
 580: LD_INT 0
 582: PPUSH
// begin enable ;
 583: ENABLE
// FogOff ( your_side ) ;
 584: LD_OWVAR 2
 588: PPUSH
 589: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 593: LD_ADDR_VAR 0 1
 597: PUSH
 598: LD_INT 22
 600: PUSH
 601: LD_OWVAR 2
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 2
 612: PUSH
 613: LD_INT 21
 615: PUSH
 616: LD_INT 1
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: PUSH
 623: LD_INT 21
 625: PUSH
 626: LD_INT 2
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: LIST
 637: PUSH
 638: EMPTY
 639: LIST
 640: LIST
 641: PPUSH
 642: CALL_OW 69
 646: PUSH
 647: FOR_IN
 648: IFFALSE 664
// SetLives ( i , 1000 ) ;
 650: LD_VAR 0 1
 654: PPUSH
 655: LD_INT 1000
 657: PPUSH
 658: CALL_OW 234
 662: GO 647
 664: POP
 665: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 666: LD_ADDR_VAR 0 1
 670: PUSH
 671: LD_INT 22
 673: PUSH
 674: LD_OWVAR 2
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: PUSH
 683: LD_INT 21
 685: PUSH
 686: LD_INT 1
 688: PUSH
 689: EMPTY
 690: LIST
 691: LIST
 692: PUSH
 693: EMPTY
 694: LIST
 695: LIST
 696: PPUSH
 697: CALL_OW 69
 701: PUSH
 702: FOR_IN
 703: IFFALSE 767
// begin SetSkill ( i , skill_combat , 10 ) ;
 705: LD_VAR 0 1
 709: PPUSH
 710: LD_INT 1
 712: PPUSH
 713: LD_INT 10
 715: PPUSH
 716: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 720: LD_VAR 0 1
 724: PPUSH
 725: LD_INT 2
 727: PPUSH
 728: LD_INT 10
 730: PPUSH
 731: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 735: LD_VAR 0 1
 739: PPUSH
 740: LD_INT 3
 742: PPUSH
 743: LD_INT 10
 745: PPUSH
 746: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 750: LD_VAR 0 1
 754: PPUSH
 755: LD_INT 4
 757: PPUSH
 758: LD_INT 10
 760: PPUSH
 761: CALL_OW 237
// end ;
 765: GO 702
 767: POP
 768: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 769: LD_ADDR_VAR 0 1
 773: PUSH
 774: LD_INT 22
 776: PUSH
 777: LD_OWVAR 2
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: PUSH
 786: LD_INT 2
 788: PUSH
 789: LD_INT 30
 791: PUSH
 792: LD_INT 0
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PUSH
 799: LD_INT 30
 801: PUSH
 802: LD_INT 1
 804: PUSH
 805: EMPTY
 806: LIST
 807: LIST
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: LIST
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: PPUSH
 818: CALL_OW 69
 822: PUSH
 823: FOR_IN
 824: IFFALSE 888
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 826: LD_VAR 0 1
 830: PPUSH
 831: CALL_OW 274
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: LD_INT 9999
 841: PPUSH
 842: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 846: LD_VAR 0 1
 850: PPUSH
 851: CALL_OW 274
 855: PPUSH
 856: LD_INT 2
 858: PPUSH
 859: LD_INT 9999
 861: PPUSH
 862: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 866: LD_VAR 0 1
 870: PPUSH
 871: CALL_OW 274
 875: PPUSH
 876: LD_INT 3
 878: PPUSH
 879: LD_INT 9999
 881: PPUSH
 882: CALL_OW 277
// end ;
 886: GO 823
 888: POP
 889: POP
// end ; end_of_file
 890: PPOPN 1
 892: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Platonov , Kirilenkova , Belkov , Belkov2 ; export Vsevolod , vsevolodTeam , Petr , Igor , Boris ; export ConvoyBoris , ConvoyIbrahim ; export function PrepareRussians ; begin
 893: LD_INT 0
 895: PPUSH
// PrepareHeroes ;
 896: CALL 905 0 0
// end ;
 900: LD_VAR 0 1
 904: RET
// function PrepareHeroes ; var i , j , car , tmp , cargoList , bigCargoList , point , areaPoints , nearPosition , burlakPosition , distance , index ; begin
 905: LD_INT 0
 907: PPUSH
 908: PPUSH
 909: PPUSH
 910: PPUSH
 911: PPUSH
 912: PPUSH
 913: PPUSH
 914: PPUSH
 915: PPUSH
 916: PPUSH
 917: PPUSH
 918: PPUSH
 919: PPUSH
// point = [ 170 , 208 ] ;
 920: LD_ADDR_VAR 0 8
 924: PUSH
 925: LD_INT 170
 927: PUSH
 928: LD_INT 208
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: ST_TO_ADDR
// areaPoints = AreaToList ( RussianSpawnArea1 , 0 ) ;
 935: LD_ADDR_VAR 0 9
 939: PUSH
 940: LD_INT 1
 942: PPUSH
 943: LD_INT 0
 945: PPUSH
 946: CALL_OW 517
 950: ST_TO_ADDR
// uc_side = 3 ;
 951: LD_ADDR_OWVAR 20
 955: PUSH
 956: LD_INT 3
 958: ST_TO_ADDR
// uc_nation = 3 ;
 959: LD_ADDR_OWVAR 21
 963: PUSH
 964: LD_INT 3
 966: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , 0 ) ;
 967: LD_ADDR_EXP 39
 971: PUSH
 972: LD_STRING Burlak
 974: PPUSH
 975: LD_INT 1
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL 11759 0 3
 985: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , true , 0 ) ;
 986: LD_ADDR_EXP 44
 990: PUSH
 991: LD_STRING Titov
 993: PPUSH
 994: LD_INT 1
 996: PPUSH
 997: LD_INT 0
 999: PPUSH
1000: CALL 11759 0 3
1004: ST_TO_ADDR
// Dolgov := PrepareUnitExt ( Dolgov , true , 0 ) ;
1005: LD_ADDR_EXP 45
1009: PUSH
1010: LD_STRING Dolgov
1012: PPUSH
1013: LD_INT 1
1015: PPUSH
1016: LD_INT 0
1018: PPUSH
1019: CALL 11759 0 3
1023: ST_TO_ADDR
// Lipshchin := PrepareUnitExt ( Lipshchin , true , 0 ) ;
1024: LD_ADDR_EXP 46
1028: PUSH
1029: LD_STRING Lipshchin
1031: PPUSH
1032: LD_INT 1
1034: PPUSH
1035: LD_INT 0
1037: PPUSH
1038: CALL 11759 0 3
1042: ST_TO_ADDR
// Karamazov := PrepareUnitExt ( Karamazov , true , class_engineer ) ;
1043: LD_ADDR_EXP 40
1047: PUSH
1048: LD_STRING Karamazov
1050: PPUSH
1051: LD_INT 1
1053: PPUSH
1054: LD_INT 2
1056: PPUSH
1057: CALL 11759 0 3
1061: ST_TO_ADDR
// Petrovova := PrepareUnitExt ( Petrovova , true , 0 ) ;
1062: LD_ADDR_EXP 41
1066: PUSH
1067: LD_STRING Petrovova
1069: PPUSH
1070: LD_INT 1
1072: PPUSH
1073: LD_INT 0
1075: PPUSH
1076: CALL 11759 0 3
1080: ST_TO_ADDR
// Gleb := PrepareUnitExt ( Gleb , true , 0 ) ;
1081: LD_ADDR_EXP 42
1085: PUSH
1086: LD_STRING Gleb
1088: PPUSH
1089: LD_INT 1
1091: PPUSH
1092: LD_INT 0
1094: PPUSH
1095: CALL 11759 0 3
1099: ST_TO_ADDR
// Petrosyan := PrepareUnitExt ( Petrosyan , true , 0 ) ;
1100: LD_ADDR_EXP 43
1104: PUSH
1105: LD_STRING Petrosyan
1107: PPUSH
1108: LD_INT 1
1110: PPUSH
1111: LD_INT 0
1113: PPUSH
1114: CALL 11759 0 3
1118: ST_TO_ADDR
// Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
1119: LD_ADDR_EXP 47
1123: PUSH
1124: LD_STRING Platonov
1126: PPUSH
1127: LD_INT 0
1129: PPUSH
1130: LD_INT 0
1132: PPUSH
1133: CALL 11759 0 3
1137: ST_TO_ADDR
// if TestCharacters ( 04_Kirilenkova ) then
1138: LD_STRING 04_Kirilenkova
1140: PPUSH
1141: CALL_OW 28
1145: IFFALSE 1172
// begin Kirilenkova := CreateCharacter ( 04_Kirilenkova ) ;
1147: LD_ADDR_EXP 48
1151: PUSH
1152: LD_STRING 04_Kirilenkova
1154: PPUSH
1155: CALL_OW 34
1159: ST_TO_ADDR
// SetClass ( Kirilenkova , class_scientistic ) ;
1160: LD_EXP 48
1164: PPUSH
1165: LD_INT 4
1167: PPUSH
1168: CALL_OW 336
// end ; if TestCharacters ( 04_Belkov ) then
1172: LD_STRING 04_Belkov
1174: PPUSH
1175: CALL_OW 28
1179: IFFALSE 1206
// begin Belkov := CreateCharacter ( 04_Belkov ) ;
1181: LD_ADDR_EXP 49
1185: PUSH
1186: LD_STRING 04_Belkov
1188: PPUSH
1189: CALL_OW 34
1193: ST_TO_ADDR
// SetClass ( Belkov , class_soldier ) ;
1194: LD_EXP 49
1198: PPUSH
1199: LD_INT 1
1201: PPUSH
1202: CALL_OW 336
// end ; if TestCharacters ( 04_Belkov2 ) then
1206: LD_STRING 04_Belkov2
1208: PPUSH
1209: CALL_OW 28
1213: IFFALSE 1240
// begin Belkov2 := CreateCharacter ( 04_Belkov2 ) ;
1215: LD_ADDR_EXP 50
1219: PUSH
1220: LD_STRING 04_Belkov2
1222: PPUSH
1223: CALL_OW 34
1227: ST_TO_ADDR
// SetClass ( Belkov2 , class_soldier ) ;
1228: LD_EXP 50
1232: PPUSH
1233: LD_INT 1
1235: PPUSH
1236: CALL_OW 336
// end ; for i := 1 to vehiclesFrom05 do
1240: LD_ADDR_VAR 0 2
1244: PUSH
1245: DOUBLE
1246: LD_INT 1
1248: DEC
1249: ST_TO_ADDR
1250: LD_EXP 1
1254: PUSH
1255: FOR_TO
1256: IFFALSE 1918
// begin uc_nation = vehiclesFrom05 [ i ] [ 1 ] ;
1258: LD_ADDR_OWVAR 21
1262: PUSH
1263: LD_EXP 1
1267: PUSH
1268: LD_VAR 0 2
1272: ARRAY
1273: PUSH
1274: LD_INT 1
1276: ARRAY
1277: ST_TO_ADDR
// vc_chassis := vehiclesFrom05 [ i ] [ 2 ] ;
1278: LD_ADDR_OWVAR 37
1282: PUSH
1283: LD_EXP 1
1287: PUSH
1288: LD_VAR 0 2
1292: ARRAY
1293: PUSH
1294: LD_INT 2
1296: ARRAY
1297: ST_TO_ADDR
// vc_engine = vehiclesFrom05 [ i ] [ 3 ] ;
1298: LD_ADDR_OWVAR 39
1302: PUSH
1303: LD_EXP 1
1307: PUSH
1308: LD_VAR 0 2
1312: ARRAY
1313: PUSH
1314: LD_INT 3
1316: ARRAY
1317: ST_TO_ADDR
// vc_control = vehiclesFrom05 [ i ] [ 4 ] ;
1318: LD_ADDR_OWVAR 38
1322: PUSH
1323: LD_EXP 1
1327: PUSH
1328: LD_VAR 0 2
1332: ARRAY
1333: PUSH
1334: LD_INT 4
1336: ARRAY
1337: ST_TO_ADDR
// vc_weapon := vehiclesFrom05 [ i ] [ 5 ] ;
1338: LD_ADDR_OWVAR 40
1342: PUSH
1343: LD_EXP 1
1347: PUSH
1348: LD_VAR 0 2
1352: ARRAY
1353: PUSH
1354: LD_INT 5
1356: ARRAY
1357: ST_TO_ADDR
// uc_direction := 0 ;
1358: LD_ADDR_OWVAR 24
1362: PUSH
1363: LD_INT 0
1365: ST_TO_ADDR
// vc_fuel_battery := Rand ( 10 , 15 ) ;
1366: LD_ADDR_OWVAR 41
1370: PUSH
1371: LD_INT 10
1373: PPUSH
1374: LD_INT 15
1376: PPUSH
1377: CALL_OW 12
1381: ST_TO_ADDR
// car := CreateVehicle ;
1382: LD_ADDR_VAR 0 4
1386: PUSH
1387: CALL_OW 45
1391: ST_TO_ADDR
// distance = 999 ;
1392: LD_ADDR_VAR 0 12
1396: PUSH
1397: LD_INT 999
1399: ST_TO_ADDR
// index = 1 ;
1400: LD_ADDR_VAR 0 13
1404: PUSH
1405: LD_INT 1
1407: ST_TO_ADDR
// for j := 1 to areaPoints [ 1 ] do
1408: LD_ADDR_VAR 0 3
1412: PUSH
1413: DOUBLE
1414: LD_INT 1
1416: DEC
1417: ST_TO_ADDR
1418: LD_VAR 0 9
1422: PUSH
1423: LD_INT 1
1425: ARRAY
1426: PUSH
1427: FOR_TO
1428: IFFALSE 1599
// begin if GetDistXY ( point [ 1 ] , point [ 2 ] , areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ) < distance then
1430: LD_VAR 0 8
1434: PUSH
1435: LD_INT 1
1437: ARRAY
1438: PPUSH
1439: LD_VAR 0 8
1443: PUSH
1444: LD_INT 2
1446: ARRAY
1447: PPUSH
1448: LD_VAR 0 9
1452: PUSH
1453: LD_INT 1
1455: ARRAY
1456: PUSH
1457: LD_VAR 0 3
1461: ARRAY
1462: PPUSH
1463: LD_VAR 0 9
1467: PUSH
1468: LD_INT 2
1470: ARRAY
1471: PUSH
1472: LD_VAR 0 3
1476: ARRAY
1477: PPUSH
1478: CALL_OW 298
1482: PUSH
1483: LD_VAR 0 12
1487: LESS
1488: IFFALSE 1597
// begin distance = GetDistXY ( point [ 1 ] , point [ 2 ] , areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ) ;
1490: LD_ADDR_VAR 0 12
1494: PUSH
1495: LD_VAR 0 8
1499: PUSH
1500: LD_INT 1
1502: ARRAY
1503: PPUSH
1504: LD_VAR 0 8
1508: PUSH
1509: LD_INT 2
1511: ARRAY
1512: PPUSH
1513: LD_VAR 0 9
1517: PUSH
1518: LD_INT 1
1520: ARRAY
1521: PUSH
1522: LD_VAR 0 3
1526: ARRAY
1527: PPUSH
1528: LD_VAR 0 9
1532: PUSH
1533: LD_INT 2
1535: ARRAY
1536: PUSH
1537: LD_VAR 0 3
1541: ARRAY
1542: PPUSH
1543: CALL_OW 298
1547: ST_TO_ADDR
// nearPosition = [ areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ] ;
1548: LD_ADDR_VAR 0 10
1552: PUSH
1553: LD_VAR 0 9
1557: PUSH
1558: LD_INT 1
1560: ARRAY
1561: PUSH
1562: LD_VAR 0 3
1566: ARRAY
1567: PUSH
1568: LD_VAR 0 9
1572: PUSH
1573: LD_INT 2
1575: ARRAY
1576: PUSH
1577: LD_VAR 0 3
1581: ARRAY
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: ST_TO_ADDR
// index = j ;
1587: LD_ADDR_VAR 0 13
1591: PUSH
1592: LD_VAR 0 3
1596: ST_TO_ADDR
// end ; end ;
1597: GO 1427
1599: POP
1600: POP
// if not burlakPosition then
1601: LD_VAR 0 11
1605: NOT
1606: IFFALSE 1618
// burlakPosition = nearPosition ;
1608: LD_ADDR_VAR 0 11
1612: PUSH
1613: LD_VAR 0 10
1617: ST_TO_ADDR
// if areaPoints then
1618: LD_VAR 0 9
1622: IFFALSE 1670
// begin areaPoints = Delete2D ( areaPoints , 1 , index ) ;
1624: LD_ADDR_VAR 0 9
1628: PUSH
1629: LD_VAR 0 9
1633: PPUSH
1634: LD_INT 1
1636: PPUSH
1637: LD_VAR 0 13
1641: PPUSH
1642: CALL 12588 0 3
1646: ST_TO_ADDR
// areaPoints = Delete2D ( areaPoints , 2 , index ) ;
1647: LD_ADDR_VAR 0 9
1651: PUSH
1652: LD_VAR 0 9
1656: PPUSH
1657: LD_INT 2
1659: PPUSH
1660: LD_VAR 0 13
1664: PPUSH
1665: CALL 12588 0 3
1669: ST_TO_ADDR
// end ; PlaceUnitXY ( car , nearPosition [ 1 ] , nearPosition [ 2 ] , false ) ;
1670: LD_VAR 0 4
1674: PPUSH
1675: LD_VAR 0 10
1679: PUSH
1680: LD_INT 1
1682: ARRAY
1683: PPUSH
1684: LD_VAR 0 10
1688: PUSH
1689: LD_INT 2
1691: ARRAY
1692: PPUSH
1693: LD_INT 0
1695: PPUSH
1696: CALL_OW 48
// case vehiclesFrom05 [ i ] [ 6 ] of Bur :
1700: LD_EXP 1
1704: PUSH
1705: LD_VAR 0 2
1709: ARRAY
1710: PUSH
1711: LD_INT 6
1713: ARRAY
1714: PUSH
1715: LD_STRING Bur
1717: DOUBLE
1718: EQUAL
1719: IFTRUE 1723
1721: GO 1740
1723: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
1724: LD_EXP 39
1728: PPUSH
1729: LD_VAR 0 4
1733: PPUSH
1734: CALL_OW 52
1738: GO 1916
1740: LD_STRING Kar
1742: DOUBLE
1743: EQUAL
1744: IFTRUE 1748
1746: GO 1765
1748: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
1749: LD_EXP 40
1753: PPUSH
1754: LD_VAR 0 4
1758: PPUSH
1759: CALL_OW 52
1763: GO 1916
1765: LD_STRING Ptr
1767: DOUBLE
1768: EQUAL
1769: IFTRUE 1773
1771: GO 1790
1773: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
1774: LD_EXP 41
1778: PPUSH
1779: LD_VAR 0 4
1783: PPUSH
1784: CALL_OW 52
1788: GO 1916
1790: LD_STRING Glb
1792: DOUBLE
1793: EQUAL
1794: IFTRUE 1798
1796: GO 1815
1798: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
1799: LD_EXP 42
1803: PPUSH
1804: LD_VAR 0 4
1808: PPUSH
1809: CALL_OW 52
1813: GO 1916
1815: LD_STRING Pet
1817: DOUBLE
1818: EQUAL
1819: IFTRUE 1823
1821: GO 1840
1823: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
1824: LD_EXP 43
1828: PPUSH
1829: LD_VAR 0 4
1833: PPUSH
1834: CALL_OW 52
1838: GO 1916
1840: LD_STRING Dol
1842: DOUBLE
1843: EQUAL
1844: IFTRUE 1848
1846: GO 1865
1848: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
1849: LD_EXP 45
1853: PPUSH
1854: LD_VAR 0 4
1858: PPUSH
1859: CALL_OW 52
1863: GO 1916
1865: LD_STRING Lip
1867: DOUBLE
1868: EQUAL
1869: IFTRUE 1873
1871: GO 1890
1873: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
1874: LD_EXP 46
1878: PPUSH
1879: LD_VAR 0 4
1883: PPUSH
1884: CALL_OW 52
1888: GO 1916
1890: LD_STRING Tit
1892: DOUBLE
1893: EQUAL
1894: IFTRUE 1898
1896: GO 1915
1898: POP
// PlaceHumanInUnit ( Titov , car ) ; end ;
1899: LD_EXP 44
1903: PPUSH
1904: LD_VAR 0 4
1908: PPUSH
1909: CALL_OW 52
1913: GO 1916
1915: POP
// end ;
1916: GO 1255
1918: POP
1919: POP
// cargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
1920: LD_ADDR_VAR 0 6
1924: PUSH
1925: LD_INT 22
1927: PUSH
1928: LD_INT 3
1930: PUSH
1931: EMPTY
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 21
1937: PUSH
1938: LD_INT 2
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: LD_INT 2
1947: PUSH
1948: LD_INT 34
1950: PUSH
1951: LD_INT 51
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: PUSH
1958: LD_INT 34
1960: PUSH
1961: LD_INT 32
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: PUSH
1968: LD_INT 34
1970: PUSH
1971: LD_INT 12
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: PPUSH
1989: CALL_OW 69
1993: ST_TO_ADDR
// bigCargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 89 ] ] ) ;
1994: LD_ADDR_VAR 0 7
1998: PUSH
1999: LD_INT 22
2001: PUSH
2002: LD_INT 3
2004: PUSH
2005: EMPTY
2006: LIST
2007: LIST
2008: PUSH
2009: LD_INT 21
2011: PUSH
2012: LD_INT 2
2014: PUSH
2015: EMPTY
2016: LIST
2017: LIST
2018: PUSH
2019: LD_INT 34
2021: PUSH
2022: LD_INT 89
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: LIST
2033: PPUSH
2034: CALL_OW 69
2038: ST_TO_ADDR
// if cargoList then
2039: LD_VAR 0 6
2043: IFFALSE 2233
// for i = 1 to cargoList do
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: DOUBLE
2051: LD_INT 1
2053: DEC
2054: ST_TO_ADDR
2055: LD_VAR 0 6
2059: PUSH
2060: FOR_TO
2061: IFFALSE 2231
// if resourcesFrom05 then
2063: LD_EXP 2
2067: IFFALSE 2229
// begin if not resourcesFrom05 [ i ] [ 1 ] > 100 or resourcesFrom05 [ i ] [ 2 ] > 100 or resourcesFrom05 [ i ] [ 3 ] > 100 then
2069: LD_EXP 2
2073: PUSH
2074: LD_VAR 0 2
2078: ARRAY
2079: PUSH
2080: LD_INT 1
2082: ARRAY
2083: PUSH
2084: LD_INT 100
2086: GREATER
2087: NOT
2088: PUSH
2089: LD_EXP 2
2093: PUSH
2094: LD_VAR 0 2
2098: ARRAY
2099: PUSH
2100: LD_INT 2
2102: ARRAY
2103: PUSH
2104: LD_INT 100
2106: GREATER
2107: OR
2108: PUSH
2109: LD_EXP 2
2113: PUSH
2114: LD_VAR 0 2
2118: ARRAY
2119: PUSH
2120: LD_INT 3
2122: ARRAY
2123: PUSH
2124: LD_INT 100
2126: GREATER
2127: OR
2128: IFFALSE 2229
// begin AddCargo ( cargoList [ i ] , 1 , resourcesFrom05 [ i ] [ 1 ] ) ;
2130: LD_VAR 0 6
2134: PUSH
2135: LD_VAR 0 2
2139: ARRAY
2140: PPUSH
2141: LD_INT 1
2143: PPUSH
2144: LD_EXP 2
2148: PUSH
2149: LD_VAR 0 2
2153: ARRAY
2154: PUSH
2155: LD_INT 1
2157: ARRAY
2158: PPUSH
2159: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resourcesFrom05 [ i ] [ 2 ] ) ;
2163: LD_VAR 0 6
2167: PUSH
2168: LD_VAR 0 2
2172: ARRAY
2173: PPUSH
2174: LD_INT 2
2176: PPUSH
2177: LD_EXP 2
2181: PUSH
2182: LD_VAR 0 2
2186: ARRAY
2187: PUSH
2188: LD_INT 2
2190: ARRAY
2191: PPUSH
2192: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resourcesFrom05 [ i ] [ 3 ] ) ;
2196: LD_VAR 0 6
2200: PUSH
2201: LD_VAR 0 2
2205: ARRAY
2206: PPUSH
2207: LD_INT 3
2209: PPUSH
2210: LD_EXP 2
2214: PUSH
2215: LD_VAR 0 2
2219: ARRAY
2220: PUSH
2221: LD_INT 3
2223: ARRAY
2224: PPUSH
2225: CALL_OW 291
// end ; end ;
2229: GO 2060
2231: POP
2232: POP
// if bigCargoList then
2233: LD_VAR 0 7
2237: IFFALSE 2426
// for i = 1 to bigCargoList do
2239: LD_ADDR_VAR 0 2
2243: PUSH
2244: DOUBLE
2245: LD_INT 1
2247: DEC
2248: ST_TO_ADDR
2249: LD_VAR 0 7
2253: PUSH
2254: FOR_TO
2255: IFFALSE 2424
// if resourcesFrom05 then
2257: LD_EXP 2
2261: IFFALSE 2422
// begin if resourcesFrom05 [ i ] [ 1 ] > 100 or resourcesFrom05 [ i ] [ 2 ] > 100 or resourcesFrom05 [ i ] [ 3 ] > 100 then
2263: LD_EXP 2
2267: PUSH
2268: LD_VAR 0 2
2272: ARRAY
2273: PUSH
2274: LD_INT 1
2276: ARRAY
2277: PUSH
2278: LD_INT 100
2280: GREATER
2281: PUSH
2282: LD_EXP 2
2286: PUSH
2287: LD_VAR 0 2
2291: ARRAY
2292: PUSH
2293: LD_INT 2
2295: ARRAY
2296: PUSH
2297: LD_INT 100
2299: GREATER
2300: OR
2301: PUSH
2302: LD_EXP 2
2306: PUSH
2307: LD_VAR 0 2
2311: ARRAY
2312: PUSH
2313: LD_INT 3
2315: ARRAY
2316: PUSH
2317: LD_INT 100
2319: GREATER
2320: OR
2321: IFFALSE 2422
// begin AddCargo ( bigCargoList [ i ] , 1 , resourcesFrom05 [ i ] [ 1 ] ) ;
2323: LD_VAR 0 7
2327: PUSH
2328: LD_VAR 0 2
2332: ARRAY
2333: PPUSH
2334: LD_INT 1
2336: PPUSH
2337: LD_EXP 2
2341: PUSH
2342: LD_VAR 0 2
2346: ARRAY
2347: PUSH
2348: LD_INT 1
2350: ARRAY
2351: PPUSH
2352: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 2 , resourcesFrom05 [ i ] [ 2 ] ) ;
2356: LD_VAR 0 7
2360: PUSH
2361: LD_VAR 0 2
2365: ARRAY
2366: PPUSH
2367: LD_INT 2
2369: PPUSH
2370: LD_EXP 2
2374: PUSH
2375: LD_VAR 0 2
2379: ARRAY
2380: PUSH
2381: LD_INT 2
2383: ARRAY
2384: PPUSH
2385: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 3 , resourcesFrom05 [ i ] [ 3 ] ) ;
2389: LD_VAR 0 7
2393: PUSH
2394: LD_VAR 0 2
2398: ARRAY
2399: PPUSH
2400: LD_INT 3
2402: PPUSH
2403: LD_EXP 2
2407: PUSH
2408: LD_VAR 0 2
2412: ARRAY
2413: PUSH
2414: LD_INT 3
2416: ARRAY
2417: PPUSH
2418: CALL_OW 291
// end ; end ;
2422: GO 2254
2424: POP
2425: POP
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_class , class_engineer ] ] ) then
2426: LD_INT 22
2428: PUSH
2429: LD_INT 3
2431: PUSH
2432: EMPTY
2433: LIST
2434: LIST
2435: PUSH
2436: LD_INT 21
2438: PUSH
2439: LD_INT 1
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: PUSH
2446: LD_INT 23
2448: PUSH
2449: LD_INT 3
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PUSH
2456: LD_INT 25
2458: PUSH
2459: LD_INT 2
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL_OW 69
2476: NOT
2477: IFFALSE 2582
// begin if IsOk ( Lipshchin ) then
2479: LD_EXP 46
2483: PPUSH
2484: CALL_OW 302
2488: IFFALSE 2504
// SetClass ( Lipshchin , class_engineer ) else
2490: LD_EXP 46
2494: PPUSH
2495: LD_INT 2
2497: PPUSH
2498: CALL_OW 336
2502: GO 2582
// begin tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ;
2504: LD_ADDR_VAR 0 5
2508: PUSH
2509: LD_INT 22
2511: PUSH
2512: LD_INT 3
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: PUSH
2519: LD_INT 21
2521: PUSH
2522: LD_INT 1
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PUSH
2529: LD_INT 23
2531: PUSH
2532: LD_INT 3
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: PUSH
2539: LD_INT 50
2541: PUSH
2542: EMPTY
2543: LIST
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: LIST
2549: LIST
2550: PPUSH
2551: CALL_OW 69
2555: ST_TO_ADDR
// SetClass ( tmp [ rand ( 0 , tmp ) ] , class_engineer ) ;
2556: LD_VAR 0 5
2560: PUSH
2561: LD_INT 0
2563: PPUSH
2564: LD_VAR 0 5
2568: PPUSH
2569: CALL_OW 12
2573: ARRAY
2574: PPUSH
2575: LD_INT 2
2577: PPUSH
2578: CALL_OW 336
// end ; end ; SetTech ( tech_ApeLang , 3 , apeTechsStatus [ 1 ] ) ;
2582: LD_INT 1
2584: PPUSH
2585: LD_INT 3
2587: PPUSH
2588: LD_EXP 5
2592: PUSH
2593: LD_INT 1
2595: ARRAY
2596: PPUSH
2597: CALL_OW 322
// SetTech ( tech_ApePsych , 3 , apeTechsStatus [ 2 ] ) ;
2601: LD_INT 2
2603: PPUSH
2604: LD_INT 3
2606: PPUSH
2607: LD_EXP 5
2611: PUSH
2612: LD_INT 2
2614: ARRAY
2615: PPUSH
2616: CALL_OW 322
// SetTech ( tech_ApeAgres , 3 , apeTechsStatus [ 3 ] ) ;
2620: LD_INT 11
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: LD_EXP 5
2630: PUSH
2631: LD_INT 3
2633: ARRAY
2634: PPUSH
2635: CALL_OW 322
// end ;
2639: LD_VAR 0 1
2643: RET
// export function PrepareVsevolod ; var i , un ; begin
2644: LD_INT 0
2646: PPUSH
2647: PPUSH
2648: PPUSH
// uc_side = 6 ;
2649: LD_ADDR_OWVAR 20
2653: PUSH
2654: LD_INT 6
2656: ST_TO_ADDR
// uc_nation = 3 ;
2657: LD_ADDR_OWVAR 21
2661: PUSH
2662: LD_INT 3
2664: ST_TO_ADDR
// vsevolodTeam = [ ] ;
2665: LD_ADDR_EXP 52
2669: PUSH
2670: EMPTY
2671: ST_TO_ADDR
// Vsevolod := PrepareUnitExt ( Vsevolod , false , class_soldier ) ;
2672: LD_ADDR_EXP 51
2676: PUSH
2677: LD_STRING Vsevolod
2679: PPUSH
2680: LD_INT 0
2682: PPUSH
2683: LD_INT 1
2685: PPUSH
2686: CALL 11759 0 3
2690: ST_TO_ADDR
// PlaceUnitArea ( Vsevolod , VsevolodSpawnArea , false ) ;
2691: LD_EXP 51
2695: PPUSH
2696: LD_INT 7
2698: PPUSH
2699: LD_INT 0
2701: PPUSH
2702: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Vsevolod ;
2706: LD_ADDR_EXP 52
2710: PUSH
2711: LD_EXP 52
2715: PUSH
2716: LD_EXP 51
2720: ADD
2721: ST_TO_ADDR
// Petr = PrepareUnitExt ( SPetr , false , class_engineer ) ;
2722: LD_ADDR_EXP 53
2726: PUSH
2727: LD_STRING SPetr
2729: PPUSH
2730: LD_INT 0
2732: PPUSH
2733: LD_INT 2
2735: PPUSH
2736: CALL 11759 0 3
2740: ST_TO_ADDR
// PlaceUnitArea ( Petr , VsevolodSpawnArea , false ) ;
2741: LD_EXP 53
2745: PPUSH
2746: LD_INT 7
2748: PPUSH
2749: LD_INT 0
2751: PPUSH
2752: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Petr ;
2756: LD_ADDR_EXP 52
2760: PUSH
2761: LD_EXP 52
2765: PUSH
2766: LD_EXP 53
2770: ADD
2771: ST_TO_ADDR
// Igor = PrepareUnitExt ( SIgor , false , class_soldier ) ;
2772: LD_ADDR_EXP 54
2776: PUSH
2777: LD_STRING SIgor
2779: PPUSH
2780: LD_INT 0
2782: PPUSH
2783: LD_INT 1
2785: PPUSH
2786: CALL 11759 0 3
2790: ST_TO_ADDR
// PlaceUnitArea ( Igor , VsevolodSpawnArea , false ) ;
2791: LD_EXP 54
2795: PPUSH
2796: LD_INT 7
2798: PPUSH
2799: LD_INT 0
2801: PPUSH
2802: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Igor ;
2806: LD_ADDR_EXP 52
2810: PUSH
2811: LD_EXP 52
2815: PUSH
2816: LD_EXP 54
2820: ADD
2821: ST_TO_ADDR
// Boris = PrepareUnitExt ( SBoris , false , class_soldier ) ;
2822: LD_ADDR_EXP 55
2826: PUSH
2827: LD_STRING SBoris
2829: PPUSH
2830: LD_INT 0
2832: PPUSH
2833: LD_INT 1
2835: PPUSH
2836: CALL 11759 0 3
2840: ST_TO_ADDR
// PlaceUnitArea ( Boris , VsevolodSpawnArea , false ) ;
2841: LD_EXP 55
2845: PPUSH
2846: LD_INT 7
2848: PPUSH
2849: LD_INT 0
2851: PPUSH
2852: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Boris ;
2856: LD_ADDR_EXP 52
2860: PUSH
2861: LD_EXP 52
2865: PUSH
2866: LD_EXP 55
2870: ADD
2871: ST_TO_ADDR
// end ;
2872: LD_VAR 0 1
2876: RET
// export function SpawnPlatonovReinforces ; var i , un , veh ; begin
2877: LD_INT 0
2879: PPUSH
2880: PPUSH
2881: PPUSH
2882: PPUSH
// uc_side = 3 ;
2883: LD_ADDR_OWVAR 20
2887: PUSH
2888: LD_INT 3
2890: ST_TO_ADDR
// uc_nation = 3 ;
2891: LD_ADDR_OWVAR 21
2895: PUSH
2896: LD_INT 3
2898: ST_TO_ADDR
// PrepareSoldier ( false , 4 ) ;
2899: LD_INT 0
2901: PPUSH
2902: LD_INT 4
2904: PPUSH
2905: CALL_OW 381
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] , rand ( 50 , 60 ) ) ;
2909: LD_INT 22
2911: PPUSH
2912: LD_INT 1
2914: PPUSH
2915: LD_INT 1
2917: PPUSH
2918: LD_INT 43
2920: PUSH
2921: LD_INT 44
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: PUSH
2928: LD_INT 1
2930: PPUSH
2931: LD_INT 2
2933: PPUSH
2934: CALL_OW 12
2938: ARRAY
2939: PPUSH
2940: LD_INT 50
2942: PPUSH
2943: LD_INT 60
2945: PPUSH
2946: CALL_OW 12
2950: PPUSH
2951: CALL 46162 0 5
// veh = CreateVehicle ;
2955: LD_ADDR_VAR 0 4
2959: PUSH
2960: CALL_OW 45
2964: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
2965: LD_VAR 0 4
2969: PPUSH
2970: LD_INT 0
2972: PPUSH
2973: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 230 , false ) ;
2977: LD_VAR 0 4
2981: PPUSH
2982: LD_INT 134
2984: PPUSH
2985: LD_INT 230
2987: PPUSH
2988: LD_INT 0
2990: PPUSH
2991: CALL_OW 48
// if Belkov then
2995: LD_EXP 49
2999: IFFALSE 3017
// PlaceHumanInUnit ( Belkov , veh ) else
3001: LD_EXP 49
3005: PPUSH
3006: LD_VAR 0 4
3010: PPUSH
3011: CALL_OW 52
3015: GO 3070
// if Difficulty = 1 or Difficulty = 2 then
3017: LD_OWVAR 67
3021: PUSH
3022: LD_INT 1
3024: EQUAL
3025: PUSH
3026: LD_OWVAR 67
3030: PUSH
3031: LD_INT 2
3033: EQUAL
3034: OR
3035: IFFALSE 3070
// begin ConvoyBoris = PrepareUnitExt ( SCBoris , false , class_soldier ) ;
3037: LD_ADDR_EXP 56
3041: PUSH
3042: LD_STRING SCBoris
3044: PPUSH
3045: LD_INT 0
3047: PPUSH
3048: LD_INT 1
3050: PPUSH
3051: CALL 11759 0 3
3055: ST_TO_ADDR
// PlaceHumanInUnit ( ConvoyBoris , veh ) ;
3056: LD_EXP 56
3060: PPUSH
3061: LD_VAR 0 4
3065: PPUSH
3066: CALL_OW 52
// end ; PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3070: LD_INT 22
3072: PPUSH
3073: LD_INT 1
3075: PPUSH
3076: LD_INT 1
3078: PPUSH
3079: LD_INT 51
3081: PPUSH
3082: LD_INT 50
3084: PPUSH
3085: LD_INT 60
3087: PPUSH
3088: CALL_OW 12
3092: PPUSH
3093: CALL 46162 0 5
// veh = CreateVehicle ;
3097: LD_ADDR_VAR 0 4
3101: PUSH
3102: CALL_OW 45
3106: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3107: LD_VAR 0 4
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 233 , false ) ;
3119: LD_VAR 0 4
3123: PPUSH
3124: LD_INT 134
3126: PPUSH
3127: LD_INT 233
3129: PPUSH
3130: LD_INT 0
3132: PPUSH
3133: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
3137: LD_VAR 0 4
3141: PPUSH
3142: LD_INT 1
3144: PPUSH
3145: LD_INT 100
3147: PPUSH
3148: CALL_OW 290
// if Belkov2 then
3152: LD_EXP 50
3156: IFFALSE 3174
// PlaceHumanInUnit ( Belkov2 , veh ) else
3158: LD_EXP 50
3162: PPUSH
3163: LD_VAR 0 4
3167: PPUSH
3168: CALL_OW 52
3172: GO 3217
// if Difficulty = 1 then
3174: LD_OWVAR 67
3178: PUSH
3179: LD_INT 1
3181: EQUAL
3182: IFFALSE 3217
// begin ConvoyIbrahim = PrepareUnitExt ( SCIbrahim , false , class_soldier ) ;
3184: LD_ADDR_EXP 57
3188: PUSH
3189: LD_STRING SCIbrahim
3191: PPUSH
3192: LD_INT 0
3194: PPUSH
3195: LD_INT 1
3197: PPUSH
3198: CALL 11759 0 3
3202: ST_TO_ADDR
// PlaceHumanInUnit ( ConvoyIbrahim , veh ) ;
3203: LD_EXP 57
3207: PPUSH
3208: LD_VAR 0 4
3212: PPUSH
3213: CALL_OW 52
// end ; if Kirilenkova then
3217: LD_EXP 48
3221: IFFALSE 3319
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3223: LD_INT 22
3225: PPUSH
3226: LD_INT 1
3228: PPUSH
3229: LD_INT 1
3231: PPUSH
3232: LD_INT 51
3234: PPUSH
3235: LD_INT 50
3237: PPUSH
3238: LD_INT 60
3240: PPUSH
3241: CALL_OW 12
3245: PPUSH
3246: CALL 46162 0 5
// veh = CreateVehicle ;
3250: LD_ADDR_VAR 0 4
3254: PUSH
3255: CALL_OW 45
3259: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3260: LD_VAR 0 4
3264: PPUSH
3265: LD_INT 0
3267: PPUSH
3268: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 236 , false ) ;
3272: LD_VAR 0 4
3276: PPUSH
3277: LD_INT 134
3279: PPUSH
3280: LD_INT 236
3282: PPUSH
3283: LD_INT 0
3285: PPUSH
3286: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
3290: LD_VAR 0 4
3294: PPUSH
3295: LD_INT 1
3297: PPUSH
3298: LD_INT 100
3300: PPUSH
3301: CALL_OW 290
// PlaceHumanInUnit ( Kirilenkova , veh ) ;
3305: LD_EXP 48
3309: PPUSH
3310: LD_VAR 0 4
3314: PPUSH
3315: CALL_OW 52
// end ; end ; end_of_file
3319: LD_VAR 0 1
3323: RET
// export VanHouten ; export ovsyenkoBase , terminalBase , headAmBase ; export trapTeam , convoyTeam , attackTeam ; export function PrepareAmericans ; begin
3324: LD_INT 0
3326: PPUSH
// PrepareOvsyenko ;
3327: CALL 3344 0 0
// PrepareTerminal ;
3331: CALL 3539 0 0
// PrepareMainAmericanBase ;
3335: CALL 3622 0 0
// end ;
3339: LD_VAR 0 1
3343: RET
// function PrepareOvsyenko ; var soldiersAmount ; begin
3344: LD_INT 0
3346: PPUSH
3347: PPUSH
// uc_side = 1 ;
3348: LD_ADDR_OWVAR 20
3352: PUSH
3353: LD_INT 1
3355: ST_TO_ADDR
// uc_nation = nation_american ;
3356: LD_ADDR_OWVAR 21
3360: PUSH
3361: LD_INT 1
3363: ST_TO_ADDR
// soldiersAmount = 3 ;
3364: LD_ADDR_VAR 0 2
3368: PUSH
3369: LD_INT 3
3371: ST_TO_ADDR
// if fastBreakthrough then
3372: LD_EXP 3
3376: IFFALSE 3394
// begin RemoveUnit ( ovs_bun2 ) ;
3378: LD_INT 229
3380: PPUSH
3381: CALL_OW 64
// RemoveUnit ( ovs_bun3 ) ;
3385: LD_INT 258
3387: PPUSH
3388: CALL_OW 64
// end else
3392: GO 3402
// soldiersAmount = 4 ;
3394: LD_ADDR_VAR 0 2
3398: PUSH
3399: LD_INT 4
3401: ST_TO_ADDR
// ovsyenkoBase := Nef_PrepareBase ( ovsyenko , OvsyenkoBaseArea , ovsyenko , enemySkillLevel , [ ovsyenkoStartCrates , 50 , 0 ] , 1 , [ soldiersAmount , 1 , 0 , 1 ] ) ;
3402: LD_ADDR_EXP 59
3406: PUSH
3407: LD_INT 86
3409: PPUSH
3410: LD_INT 3
3412: PPUSH
3413: LD_STRING ovsyenko
3415: PPUSH
3416: LD_EXP 34
3420: PPUSH
3421: LD_EXP 35
3425: PUSH
3426: LD_INT 50
3428: PUSH
3429: LD_INT 0
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: LIST
3436: PPUSH
3437: LD_INT 1
3439: PPUSH
3440: LD_VAR 0 2
3444: PUSH
3445: LD_INT 1
3447: PUSH
3448: LD_INT 0
3450: PUSH
3451: LD_INT 1
3453: PUSH
3454: EMPTY
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: PPUSH
3460: CALL 12660 0 7
3464: ST_TO_ADDR
// case Difficulty of 1 :
3465: LD_OWVAR 67
3469: PUSH
3470: LD_INT 1
3472: DOUBLE
3473: EQUAL
3474: IFTRUE 3478
3476: GO 3491
3478: POP
// PlaceWeaponTurret ( ovs_bun1 , us_double_gun ) ; 2 :
3479: LD_INT 97
3481: PPUSH
3482: LD_INT 5
3484: PPUSH
3485: CALL_OW 431
3489: GO 3534
3491: LD_INT 2
3493: DOUBLE
3494: EQUAL
3495: IFTRUE 3499
3497: GO 3512
3499: POP
// PlaceWeaponTurret ( ovs_bun1 , us_light_gun ) ; 3 :
3500: LD_INT 97
3502: PPUSH
3503: LD_INT 3
3505: PPUSH
3506: CALL_OW 431
3510: GO 3534
3512: LD_INT 3
3514: DOUBLE
3515: EQUAL
3516: IFTRUE 3520
3518: GO 3533
3520: POP
// PlaceWeaponTurret ( ovs_bun1 , us_gatling_gun ) ; end ;
3521: LD_INT 97
3523: PPUSH
3524: LD_INT 4
3526: PPUSH
3527: CALL_OW 431
3531: GO 3534
3533: POP
// end ;
3534: LD_VAR 0 1
3538: RET
// function PrepareTerminal ; begin
3539: LD_INT 0
3541: PPUSH
// uc_side = 1 ;
3542: LD_ADDR_OWVAR 20
3546: PUSH
3547: LD_INT 1
3549: ST_TO_ADDR
// uc_nation = nation_american ;
3550: LD_ADDR_OWVAR 21
3554: PUSH
3555: LD_INT 1
3557: ST_TO_ADDR
// terminalBase := Nef_PrepareBase ( terminal , terminalBaseArea , terminal , enemySkillLevel , [ 100 , 50 , 0 ] , 1 , [ 2 , 1 , 0 , 0 ] ) ;
3558: LD_ADDR_EXP 60
3562: PUSH
3563: LD_INT 168
3565: PPUSH
3566: LD_INT 4
3568: PPUSH
3569: LD_STRING terminal
3571: PPUSH
3572: LD_EXP 34
3576: PPUSH
3577: LD_INT 100
3579: PUSH
3580: LD_INT 50
3582: PUSH
3583: LD_INT 0
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: LIST
3590: PPUSH
3591: LD_INT 1
3593: PPUSH
3594: LD_INT 2
3596: PUSH
3597: LD_INT 1
3599: PUSH
3600: LD_INT 0
3602: PUSH
3603: LD_INT 0
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: PPUSH
3612: CALL 12660 0 7
3616: ST_TO_ADDR
// end ;
3617: LD_VAR 0 1
3621: RET
// function PrepareMainAmericanBase ; begin
3622: LD_INT 0
3624: PPUSH
// uc_side = 1 ;
3625: LD_ADDR_OWVAR 20
3629: PUSH
3630: LD_INT 1
3632: ST_TO_ADDR
// uc_nation = nation_american ;
3633: LD_ADDR_OWVAR 21
3637: PUSH
3638: LD_INT 1
3640: ST_TO_ADDR
// if fastBreakthrough then
3641: LD_EXP 3
3645: IFFALSE 3654
// RemoveUnit ( ovs_bun2 ) ;
3647: LD_INT 229
3649: PPUSH
3650: CALL_OW 64
// headAmBase := Nef_PrepareBase ( headamdepot , HeadAmericanBaseArea ,  , enemySkillLevel , [ 3000 , 1000 , 0 ] , 1 , [ 9 , 3 , 6 , 2 ] ) ;
3654: LD_ADDR_EXP 61
3658: PUSH
3659: LD_INT 106
3661: PPUSH
3662: LD_INT 5
3664: PPUSH
3665: LD_STRING 
3667: PPUSH
3668: LD_EXP 34
3672: PPUSH
3673: LD_INT 3000
3675: PUSH
3676: LD_INT 1000
3678: PUSH
3679: LD_INT 0
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: LIST
3686: PPUSH
3687: LD_INT 1
3689: PPUSH
3690: LD_INT 9
3692: PUSH
3693: LD_INT 3
3695: PUSH
3696: LD_INT 6
3698: PUSH
3699: LD_INT 2
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: PPUSH
3708: CALL 12660 0 7
3712: ST_TO_ADDR
// VanHouten = PrepareUnitExt ( VanHouten , false , class_soldier ) ;
3713: LD_ADDR_EXP 58
3717: PUSH
3718: LD_STRING VanHouten
3720: PPUSH
3721: LD_INT 0
3723: PPUSH
3724: LD_INT 1
3726: PPUSH
3727: CALL 11759 0 3
3731: ST_TO_ADDR
// headAmBase = headAmBase ^ VanHouten ;
3732: LD_ADDR_EXP 61
3736: PUSH
3737: LD_EXP 61
3741: PUSH
3742: LD_EXP 58
3746: ADD
3747: ST_TO_ADDR
// PlaceUnitXYR ( VanHouten , 35 , 57 , 3 , false ) ;
3748: LD_EXP 58
3752: PPUSH
3753: LD_INT 35
3755: PPUSH
3756: LD_INT 57
3758: PPUSH
3759: LD_INT 3
3761: PPUSH
3762: LD_INT 0
3764: PPUSH
3765: CALL_OW 50
// end ;
3769: LD_VAR 0 1
3773: RET
// export function PrepareTrap ; var i , un , nearEnemyUnit ; begin
3774: LD_INT 0
3776: PPUSH
3777: PPUSH
3778: PPUSH
3779: PPUSH
// uc_side = 1 ;
3780: LD_ADDR_OWVAR 20
3784: PUSH
3785: LD_INT 1
3787: ST_TO_ADDR
// uc_nation = nation_american ;
3788: LD_ADDR_OWVAR 21
3792: PUSH
3793: LD_INT 1
3795: ST_TO_ADDR
// for i := 1 to trapAmount do
3796: LD_ADDR_VAR 0 2
3800: PUSH
3801: DOUBLE
3802: LD_INT 1
3804: DEC
3805: ST_TO_ADDR
3806: LD_EXP 37
3810: PUSH
3811: FOR_TO
3812: IFFALSE 3946
// begin PrepareSoldier ( false , enemySkillLevel ) ;
3814: LD_INT 0
3816: PPUSH
3817: LD_EXP 34
3821: PPUSH
3822: CALL_OW 381
// un = CreateHuman ;
3826: LD_ADDR_VAR 0 3
3830: PUSH
3831: CALL_OW 44
3835: ST_TO_ADDR
// trapTeam = trapTeam ^ un ;
3836: LD_ADDR_EXP 62
3840: PUSH
3841: LD_EXP 62
3845: PUSH
3846: LD_VAR 0 3
3850: ADD
3851: ST_TO_ADDR
// PlaceUnitArea ( un , TrapSpawnArea , false ) ;
3852: LD_VAR 0 3
3856: PPUSH
3857: LD_INT 11
3859: PPUSH
3860: LD_INT 0
3862: PPUSH
3863: CALL_OW 49
// nearEnemyUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] ] ) , un ) ;
3867: LD_ADDR_VAR 0 4
3871: PUSH
3872: LD_INT 22
3874: PUSH
3875: LD_INT 3
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PUSH
3882: EMPTY
3883: LIST
3884: PPUSH
3885: CALL_OW 69
3889: PPUSH
3890: LD_VAR 0 3
3894: PPUSH
3895: CALL_OW 74
3899: ST_TO_ADDR
// ComAgressiveMove ( un , GetX ( nearEnemyUnit ) , GetY ( nearEnemyUnit ) ) ;
3900: LD_VAR 0 3
3904: PPUSH
3905: LD_VAR 0 4
3909: PPUSH
3910: CALL_OW 250
3914: PPUSH
3915: LD_VAR 0 4
3919: PPUSH
3920: CALL_OW 251
3924: PPUSH
3925: CALL_OW 114
// AddComAgressiveMove ( un , 106 , 124 ) ;
3929: LD_VAR 0 3
3933: PPUSH
3934: LD_INT 106
3936: PPUSH
3937: LD_INT 124
3939: PPUSH
3940: CALL_OW 174
// end ;
3944: GO 3811
3946: POP
3947: POP
// end ;
3948: LD_VAR 0 1
3952: RET
// export function PrepareSoldiersInBunkers ; begin
3953: LD_INT 0
3955: PPUSH
// PrepareSolBun ( enemySkilLLevel , non_bun1 ) ;
3956: LD_EXP 34
3960: PPUSH
3961: LD_INT 236
3963: PPUSH
3964: CALL 15201 0 2
// PrepareSolBun ( enemySkilLLevel , non_bun2 ) ;
3968: LD_EXP 34
3972: PPUSH
3973: LD_INT 240
3975: PPUSH
3976: CALL 15201 0 2
// PrepareSolBun ( enemySkilLLevel , non_bun3 ) ;
3980: LD_EXP 34
3984: PPUSH
3985: LD_INT 243
3987: PPUSH
3988: CALL 15201 0 2
// end ;
3992: LD_VAR 0 1
3996: RET
// export function PrepareConvoy ; var i , un , veh ; begin
3997: LD_INT 0
3999: PPUSH
4000: PPUSH
4001: PPUSH
4002: PPUSH
// convoyTeam = [ ] ;
4003: LD_ADDR_EXP 63
4007: PUSH
4008: EMPTY
4009: ST_TO_ADDR
// uc_side = 1 ;
4010: LD_ADDR_OWVAR 20
4014: PUSH
4015: LD_INT 1
4017: ST_TO_ADDR
// uc_nation = nation_american ;
4018: LD_ADDR_OWVAR 21
4022: PUSH
4023: LD_INT 1
4025: ST_TO_ADDR
// for i := 1 to 2 do
4026: LD_ADDR_VAR 0 2
4030: PUSH
4031: DOUBLE
4032: LD_INT 1
4034: DEC
4035: ST_TO_ADDR
4036: LD_INT 2
4038: PUSH
4039: FOR_TO
4040: IFFALSE 4171
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
4042: LD_INT 3
4044: PPUSH
4045: LD_INT 1
4047: PPUSH
4048: LD_INT 1
4050: PPUSH
4051: LD_INT 12
4053: PPUSH
4054: LD_INT 80
4056: PPUSH
4057: CALL 46162 0 5
// veh = CreateVehicle ;
4061: LD_ADDR_VAR 0 4
4065: PUSH
4066: CALL_OW 45
4070: ST_TO_ADDR
// AddCargo ( veh , mat_cans , 100 ) ;
4071: LD_VAR 0 4
4075: PPUSH
4076: LD_INT 1
4078: PPUSH
4079: LD_INT 100
4081: PPUSH
4082: CALL_OW 291
// convoyTeam = convoyTeam ^ veh ;
4086: LD_ADDR_EXP 63
4090: PUSH
4091: LD_EXP 63
4095: PUSH
4096: LD_VAR 0 4
4100: ADD
4101: ST_TO_ADDR
// PlaceUnitArea ( veh , AmericanSpawnArea1 , false ) ;
4102: LD_VAR 0 4
4106: PPUSH
4107: LD_INT 8
4109: PPUSH
4110: LD_INT 0
4112: PPUSH
4113: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
4117: LD_INT 0
4119: PPUSH
4120: LD_EXP 34
4124: PPUSH
4125: CALL_OW 383
// un = CreateHuman ;
4129: LD_ADDR_VAR 0 3
4133: PUSH
4134: CALL_OW 44
4138: ST_TO_ADDR
// convoyTeam = convoyTeam ^ un ;
4139: LD_ADDR_EXP 63
4143: PUSH
4144: LD_EXP 63
4148: PUSH
4149: LD_VAR 0 3
4153: ADD
4154: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4155: LD_VAR 0 3
4159: PPUSH
4160: LD_VAR 0 4
4164: PPUSH
4165: CALL_OW 52
// end ;
4169: GO 4039
4171: POP
4172: POP
// end ;
4173: LD_VAR 0 1
4177: RET
// export function PrepareAttack ; var i , un , veh ; begin
4178: LD_INT 0
4180: PPUSH
4181: PPUSH
4182: PPUSH
4183: PPUSH
// uc_side = 1 ;
4184: LD_ADDR_OWVAR 20
4188: PUSH
4189: LD_INT 1
4191: ST_TO_ADDR
// uc_nation = nation_american ;
4192: LD_ADDR_OWVAR 21
4196: PUSH
4197: LD_INT 1
4199: ST_TO_ADDR
// for i := 1 to 4 do
4200: LD_ADDR_VAR 0 2
4204: PUSH
4205: DOUBLE
4206: LD_INT 1
4208: DEC
4209: ST_TO_ADDR
4210: LD_INT 4
4212: PUSH
4213: FOR_TO
4214: IFFALSE 4353
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_light_gun , us_double_gun , us_gatling_gun ] [ Rand ( 1 , 3 ) ] , 80 ) ;
4216: LD_INT 3
4218: PPUSH
4219: LD_INT 1
4221: PPUSH
4222: LD_INT 1
4224: PPUSH
4225: LD_INT 3
4227: PUSH
4228: LD_INT 5
4230: PUSH
4231: LD_INT 4
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: LIST
4238: PUSH
4239: LD_INT 1
4241: PPUSH
4242: LD_INT 3
4244: PPUSH
4245: CALL_OW 12
4249: ARRAY
4250: PPUSH
4251: LD_INT 80
4253: PPUSH
4254: CALL 46162 0 5
// veh = CreateVehicle ;
4258: LD_ADDR_VAR 0 4
4262: PUSH
4263: CALL_OW 45
4267: ST_TO_ADDR
// attackTeam = attackTeam ^ veh ;
4268: LD_ADDR_EXP 64
4272: PUSH
4273: LD_EXP 64
4277: PUSH
4278: LD_VAR 0 4
4282: ADD
4283: ST_TO_ADDR
// PlaceUnitArea ( veh , AmericanSpawnArea2 , false ) ;
4284: LD_VAR 0 4
4288: PPUSH
4289: LD_INT 17
4291: PPUSH
4292: LD_INT 0
4294: PPUSH
4295: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
4299: LD_INT 0
4301: PPUSH
4302: LD_EXP 34
4306: PPUSH
4307: CALL_OW 383
// un = CreateHuman ;
4311: LD_ADDR_VAR 0 3
4315: PUSH
4316: CALL_OW 44
4320: ST_TO_ADDR
// attackTeam = attackTeam ^ un ;
4321: LD_ADDR_EXP 64
4325: PUSH
4326: LD_EXP 64
4330: PUSH
4331: LD_VAR 0 3
4335: ADD
4336: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4337: LD_VAR 0 3
4341: PPUSH
4342: LD_VAR 0 4
4346: PPUSH
4347: CALL_OW 52
// end ;
4351: GO 4213
4353: POP
4354: POP
// for i := 1 to 3 do
4355: LD_ADDR_VAR 0 2
4359: PUSH
4360: DOUBLE
4361: LD_INT 1
4363: DEC
4364: ST_TO_ADDR
4365: LD_INT 3
4367: PUSH
4368: FOR_TO
4369: IFFALSE 4426
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4371: LD_INT 0
4373: PPUSH
4374: LD_EXP 34
4378: PPUSH
4379: CALL_OW 381
// un = CreateHuman ;
4383: LD_ADDR_VAR 0 3
4387: PUSH
4388: CALL_OW 44
4392: ST_TO_ADDR
// attackTeam = attackTeam ^ un ;
4393: LD_ADDR_EXP 64
4397: PUSH
4398: LD_EXP 64
4402: PUSH
4403: LD_VAR 0 3
4407: ADD
4408: ST_TO_ADDR
// PlaceUnitArea ( un , AmericanSpawnArea2 , false ) ;
4409: LD_VAR 0 3
4413: PPUSH
4414: LD_INT 17
4416: PPUSH
4417: LD_INT 0
4419: PPUSH
4420: CALL_OW 49
// end ;
4424: GO 4368
4426: POP
4427: POP
// end ; end_of_file
4428: LD_VAR 0 1
4432: RET
// export function Nef_PrepareNature ; var i , un ; begin
4433: LD_INT 0
4435: PPUSH
4436: PPUSH
4437: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
4438: LD_ADDR_VAR 0 2
4442: PUSH
4443: DOUBLE
4444: LD_INT 1
4446: DEC
4447: ST_TO_ADDR
4448: LD_EXP 28
4452: PUSH
4453: LD_INT 1
4455: ARRAY
4456: PUSH
4457: FOR_TO
4458: IFFALSE 4568
// begin uc_side = 0 ;
4460: LD_ADDR_OWVAR 20
4464: PUSH
4465: LD_INT 0
4467: ST_TO_ADDR
// uc_nation = nation_nature ;
4468: LD_ADDR_OWVAR 21
4472: PUSH
4473: LD_INT 0
4475: ST_TO_ADDR
// hc_class = class_apeman ;
4476: LD_ADDR_OWVAR 28
4480: PUSH
4481: LD_INT 12
4483: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4484: LD_ADDR_OWVAR 31
4488: PUSH
4489: LD_EXP 29
4493: PUSH
4494: LD_INT 1
4496: ARRAY
4497: PUSH
4498: LD_EXP 29
4502: PUSH
4503: LD_INT 2
4505: ARRAY
4506: PUSH
4507: LD_EXP 29
4511: PUSH
4512: LD_INT 3
4514: ARRAY
4515: PUSH
4516: LD_EXP 29
4520: PUSH
4521: LD_INT 4
4523: ARRAY
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4531: LD_ADDR_OWVAR 35
4535: PUSH
4536: LD_EXP 30
4540: ST_TO_ADDR
// un = CreateHuman ;
4541: LD_ADDR_VAR 0 3
4545: PUSH
4546: CALL_OW 44
4550: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4551: LD_VAR 0 3
4555: PPUSH
4556: LD_INT 2
4558: PPUSH
4559: LD_INT 0
4561: PPUSH
4562: CALL_OW 49
// end ;
4566: GO 4457
4568: POP
4569: POP
// for i := 1 to animalsAmount [ 2 ] do
4570: LD_ADDR_VAR 0 2
4574: PUSH
4575: DOUBLE
4576: LD_INT 1
4578: DEC
4579: ST_TO_ADDR
4580: LD_EXP 28
4584: PUSH
4585: LD_INT 2
4587: ARRAY
4588: PUSH
4589: FOR_TO
4590: IFFALSE 4700
// begin uc_side = 0 ;
4592: LD_ADDR_OWVAR 20
4596: PUSH
4597: LD_INT 0
4599: ST_TO_ADDR
// uc_nation = nation_nature ;
4600: LD_ADDR_OWVAR 21
4604: PUSH
4605: LD_INT 0
4607: ST_TO_ADDR
// hc_class = class_phororhacos ;
4608: LD_ADDR_OWVAR 28
4612: PUSH
4613: LD_INT 18
4615: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4616: LD_ADDR_OWVAR 31
4620: PUSH
4621: LD_EXP 29
4625: PUSH
4626: LD_INT 1
4628: ARRAY
4629: PUSH
4630: LD_EXP 29
4634: PUSH
4635: LD_INT 2
4637: ARRAY
4638: PUSH
4639: LD_EXP 29
4643: PUSH
4644: LD_INT 3
4646: ARRAY
4647: PUSH
4648: LD_EXP 29
4652: PUSH
4653: LD_INT 4
4655: ARRAY
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: LIST
4661: LIST
4662: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4663: LD_ADDR_OWVAR 35
4667: PUSH
4668: LD_EXP 30
4672: ST_TO_ADDR
// un = CreateHuman ;
4673: LD_ADDR_VAR 0 3
4677: PUSH
4678: CALL_OW 44
4682: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4683: LD_VAR 0 3
4687: PPUSH
4688: LD_INT 2
4690: PPUSH
4691: LD_INT 0
4693: PPUSH
4694: CALL_OW 49
// end ;
4698: GO 4589
4700: POP
4701: POP
// for i := 1 to animalsAmount [ 3 ] do
4702: LD_ADDR_VAR 0 2
4706: PUSH
4707: DOUBLE
4708: LD_INT 1
4710: DEC
4711: ST_TO_ADDR
4712: LD_EXP 28
4716: PUSH
4717: LD_INT 3
4719: ARRAY
4720: PUSH
4721: FOR_TO
4722: IFFALSE 4832
// begin uc_side = 0 ;
4724: LD_ADDR_OWVAR 20
4728: PUSH
4729: LD_INT 0
4731: ST_TO_ADDR
// uc_nation = nation_nature ;
4732: LD_ADDR_OWVAR 21
4736: PUSH
4737: LD_INT 0
4739: ST_TO_ADDR
// hc_class = class_tiger ;
4740: LD_ADDR_OWVAR 28
4744: PUSH
4745: LD_INT 14
4747: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4748: LD_ADDR_OWVAR 31
4752: PUSH
4753: LD_EXP 29
4757: PUSH
4758: LD_INT 1
4760: ARRAY
4761: PUSH
4762: LD_EXP 29
4766: PUSH
4767: LD_INT 2
4769: ARRAY
4770: PUSH
4771: LD_EXP 29
4775: PUSH
4776: LD_INT 3
4778: ARRAY
4779: PUSH
4780: LD_EXP 29
4784: PUSH
4785: LD_INT 4
4787: ARRAY
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4795: LD_ADDR_OWVAR 35
4799: PUSH
4800: LD_EXP 30
4804: ST_TO_ADDR
// un = CreateHuman ;
4805: LD_ADDR_VAR 0 3
4809: PUSH
4810: CALL_OW 44
4814: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4815: LD_VAR 0 3
4819: PPUSH
4820: LD_INT 2
4822: PPUSH
4823: LD_INT 0
4825: PPUSH
4826: CALL_OW 49
// end ;
4830: GO 4721
4832: POP
4833: POP
// for i := 1 to animalsAmount [ 4 ] do
4834: LD_ADDR_VAR 0 2
4838: PUSH
4839: DOUBLE
4840: LD_INT 1
4842: DEC
4843: ST_TO_ADDR
4844: LD_EXP 28
4848: PUSH
4849: LD_INT 4
4851: ARRAY
4852: PUSH
4853: FOR_TO
4854: IFFALSE 4964
// begin uc_side = 0 ;
4856: LD_ADDR_OWVAR 20
4860: PUSH
4861: LD_INT 0
4863: ST_TO_ADDR
// uc_nation = nation_nature ;
4864: LD_ADDR_OWVAR 21
4868: PUSH
4869: LD_INT 0
4871: ST_TO_ADDR
// hc_class = 21 ;
4872: LD_ADDR_OWVAR 28
4876: PUSH
4877: LD_INT 21
4879: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4880: LD_ADDR_OWVAR 31
4884: PUSH
4885: LD_EXP 29
4889: PUSH
4890: LD_INT 1
4892: ARRAY
4893: PUSH
4894: LD_EXP 29
4898: PUSH
4899: LD_INT 2
4901: ARRAY
4902: PUSH
4903: LD_EXP 29
4907: PUSH
4908: LD_INT 3
4910: ARRAY
4911: PUSH
4912: LD_EXP 29
4916: PUSH
4917: LD_INT 4
4919: ARRAY
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4927: LD_ADDR_OWVAR 35
4931: PUSH
4932: LD_EXP 30
4936: ST_TO_ADDR
// un = CreateHuman ;
4937: LD_ADDR_VAR 0 3
4941: PUSH
4942: CALL_OW 44
4946: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4947: LD_VAR 0 3
4951: PPUSH
4952: LD_INT 2
4954: PPUSH
4955: LD_INT 0
4957: PPUSH
4958: CALL_OW 49
// end ;
4962: GO 4853
4964: POP
4965: POP
// for i := 1 to animalsAmount [ 5 ] do
4966: LD_ADDR_VAR 0 2
4970: PUSH
4971: DOUBLE
4972: LD_INT 1
4974: DEC
4975: ST_TO_ADDR
4976: LD_EXP 28
4980: PUSH
4981: LD_INT 5
4983: ARRAY
4984: PUSH
4985: FOR_TO
4986: IFFALSE 5047
// begin uc_side = 0 ;
4988: LD_ADDR_OWVAR 20
4992: PUSH
4993: LD_INT 0
4995: ST_TO_ADDR
// uc_nation = nation_nature ;
4996: LD_ADDR_OWVAR 21
5000: PUSH
5001: LD_INT 0
5003: ST_TO_ADDR
// vc_chassis := 31 ;
5004: LD_ADDR_OWVAR 37
5008: PUSH
5009: LD_INT 31
5011: ST_TO_ADDR
// vc_control := control_rider ;
5012: LD_ADDR_OWVAR 38
5016: PUSH
5017: LD_INT 4
5019: ST_TO_ADDR
// un := CreateVehicle ;
5020: LD_ADDR_VAR 0 3
5024: PUSH
5025: CALL_OW 45
5029: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
5030: LD_VAR 0 3
5034: PPUSH
5035: LD_INT 2
5037: PPUSH
5038: LD_INT 0
5040: PPUSH
5041: CALL_OW 49
// end ;
5045: GO 4985
5047: POP
5048: POP
// end ; end_of_file
5049: LD_VAR 0 1
5053: RET
// every 0 0$1 do
5054: GO 5056
5056: DISABLE
// InitAIManager ( 1 , 2 , UnitFilter ( ovsyenkoBase , [ f_type , unit_human ] ) , OvsyenkoBaseArea , OvsyenkoHealArea , false , false , 0 , 0 , 0 , 0 , 0 ) ;
5057: LD_INT 1
5059: PPUSH
5060: LD_INT 2
5062: PPUSH
5063: LD_EXP 59
5067: PPUSH
5068: LD_INT 21
5070: PUSH
5071: LD_INT 1
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: PPUSH
5078: CALL_OW 72
5082: PPUSH
5083: LD_INT 3
5085: PPUSH
5086: LD_INT 6
5088: PPUSH
5089: LD_INT 0
5091: PPUSH
5092: LD_INT 0
5094: PPUSH
5095: LD_INT 0
5097: PPUSH
5098: LD_INT 0
5100: PPUSH
5101: LD_INT 0
5103: PPUSH
5104: LD_INT 0
5106: PPUSH
5107: LD_INT 0
5109: PPUSH
5110: CALL 5222 0 12
5114: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_weapon , us_bulldozer ] ] ) do var unit ;
5115: LD_INT 22
5117: PUSH
5118: LD_INT 1
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: PUSH
5125: LD_INT 50
5127: PUSH
5128: EMPTY
5129: LIST
5130: PUSH
5131: LD_INT 34
5133: PUSH
5134: LD_INT 14
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: LIST
5145: PPUSH
5146: CALL_OW 69
5150: IFFALSE 5219
5152: GO 5154
5154: DISABLE
5155: LD_INT 0
5157: PPUSH
// begin enable ;
5158: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_weapon , us_bulldozer ] ] ) do
5159: LD_ADDR_VAR 0 1
5163: PUSH
5164: LD_INT 22
5166: PUSH
5167: LD_INT 1
5169: PUSH
5170: EMPTY
5171: LIST
5172: LIST
5173: PUSH
5174: LD_INT 50
5176: PUSH
5177: EMPTY
5178: LIST
5179: PUSH
5180: LD_INT 34
5182: PUSH
5183: LD_INT 14
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: LIST
5194: PPUSH
5195: CALL_OW 69
5199: PUSH
5200: FOR_IN
5201: IFFALSE 5217
// CutTreeInArea ( unit , TreeArea ) ;
5203: LD_VAR 0 1
5207: PPUSH
5208: LD_INT 18
5210: PPUSH
5211: CALL 15058 0 2
5215: GO 5200
5217: POP
5218: POP
// end ;
5219: PPOPN 1
5221: END
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , repairArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack , canRebuild ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , offensiveUnits , offensiveReadyCounter , target1 , target2 , defenceUnits , weapons , chassis , baseBuildings , destroyedBuildings , destroyedBuilding , constructedBuilding , constructedBuildings , depot , factory , lab , bunkers , barracks , controlTowers , attackBuildings , enemyBuildings , damageBuilding , damageUnit , emptyBunkers , enemyUnits ; begin
5222: LD_INT 0
5224: PPUSH
5225: PPUSH
5226: PPUSH
5227: PPUSH
5228: PPUSH
5229: PPUSH
5230: PPUSH
5231: PPUSH
5232: PPUSH
5233: PPUSH
5234: PPUSH
5235: PPUSH
5236: PPUSH
5237: PPUSH
5238: PPUSH
5239: PPUSH
5240: PPUSH
5241: PPUSH
5242: PPUSH
5243: PPUSH
5244: PPUSH
5245: PPUSH
5246: PPUSH
5247: PPUSH
5248: PPUSH
5249: PPUSH
5250: PPUSH
5251: PPUSH
5252: PPUSH
5253: PPUSH
5254: PPUSH
5255: PPUSH
5256: PPUSH
5257: PPUSH
5258: PPUSH
5259: PPUSH
5260: PPUSH
5261: PPUSH
// personel = [ ] ;
5262: LD_ADDR_VAR 0 19
5266: PUSH
5267: EMPTY
5268: ST_TO_ADDR
// vehicles = [ ] ;
5269: LD_ADDR_VAR 0 25
5273: PUSH
5274: EMPTY
5275: ST_TO_ADDR
// destroyedBuildings = [ ] ;
5276: LD_ADDR_VAR 0 35
5280: PUSH
5281: EMPTY
5282: ST_TO_ADDR
// for unit in basePersonel do
5283: LD_ADDR_VAR 0 18
5287: PUSH
5288: LD_VAR 0 3
5292: PUSH
5293: FOR_IN
5294: IFFALSE 5314
// personel = personel ^ unit ;
5296: LD_ADDR_VAR 0 19
5300: PUSH
5301: LD_VAR 0 19
5305: PUSH
5306: LD_VAR 0 18
5310: ADD
5311: ST_TO_ADDR
5312: GO 5293
5314: POP
5315: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ] ] ) do
5316: LD_ADDR_VAR 0 24
5320: PUSH
5321: LD_VAR 0 4
5325: PPUSH
5326: LD_INT 22
5328: PUSH
5329: LD_VAR 0 1
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: PUSH
5338: LD_INT 21
5340: PUSH
5341: LD_INT 2
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: PUSH
5348: LD_INT 50
5350: PUSH
5351: EMPTY
5352: LIST
5353: PUSH
5354: LD_INT 3
5356: PUSH
5357: LD_INT 2
5359: PUSH
5360: LD_INT 34
5362: PUSH
5363: LD_INT 12
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: PUSH
5370: LD_INT 34
5372: PUSH
5373: LD_INT 51
5375: PUSH
5376: EMPTY
5377: LIST
5378: LIST
5379: PUSH
5380: LD_INT 34
5382: PUSH
5383: LD_INT 32
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: PUSH
5390: LD_INT 34
5392: PUSH
5393: LD_INT 31
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PUSH
5400: EMPTY
5401: LIST
5402: LIST
5403: LIST
5404: LIST
5405: LIST
5406: PUSH
5407: EMPTY
5408: LIST
5409: LIST
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: PPUSH
5417: CALL_OW 70
5421: PUSH
5422: FOR_IN
5423: IFFALSE 5443
// vehicles = vehicles ^ vehicle ;
5425: LD_ADDR_VAR 0 25
5429: PUSH
5430: LD_VAR 0 25
5434: PUSH
5435: LD_VAR 0 24
5439: ADD
5440: ST_TO_ADDR
5441: GO 5422
5443: POP
5444: POP
// repeat soldiers = [ ] ;
5445: LD_ADDR_VAR 0 20
5449: PUSH
5450: EMPTY
5451: ST_TO_ADDR
// engineers = [ ] ;
5452: LD_ADDR_VAR 0 21
5456: PUSH
5457: EMPTY
5458: ST_TO_ADDR
// mechanics = [ ] ;
5459: LD_ADDR_VAR 0 22
5463: PUSH
5464: EMPTY
5465: ST_TO_ADDR
// scientists = [ ] ;
5466: LD_ADDR_VAR 0 23
5470: PUSH
5471: EMPTY
5472: ST_TO_ADDR
// baseBuildings = [ ] ;
5473: LD_ADDR_VAR 0 34
5477: PUSH
5478: EMPTY
5479: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5480: LD_ADDR_VAR 0 39
5484: PUSH
5485: LD_VAR 0 4
5489: PPUSH
5490: LD_INT 22
5492: PUSH
5493: LD_VAR 0 1
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: LD_INT 21
5504: PUSH
5505: LD_INT 3
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PUSH
5512: LD_INT 50
5514: PUSH
5515: EMPTY
5516: LIST
5517: PUSH
5518: LD_INT 2
5520: PUSH
5521: LD_INT 30
5523: PUSH
5524: LD_INT 0
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: PUSH
5531: LD_INT 30
5533: PUSH
5534: LD_INT 1
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: LIST
5545: PUSH
5546: EMPTY
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: PPUSH
5552: CALL_OW 70
5556: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
5557: LD_ADDR_VAR 0 40
5561: PUSH
5562: LD_VAR 0 4
5566: PPUSH
5567: LD_INT 22
5569: PUSH
5570: LD_VAR 0 1
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: PUSH
5579: LD_INT 21
5581: PUSH
5582: LD_INT 3
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: PUSH
5589: LD_INT 50
5591: PUSH
5592: EMPTY
5593: LIST
5594: PUSH
5595: LD_INT 2
5597: PUSH
5598: LD_INT 30
5600: PUSH
5601: LD_INT 2
5603: PUSH
5604: EMPTY
5605: LIST
5606: LIST
5607: PUSH
5608: LD_INT 30
5610: PUSH
5611: LD_INT 3
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: PUSH
5618: EMPTY
5619: LIST
5620: LIST
5621: LIST
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: PPUSH
5629: CALL_OW 70
5633: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5634: LD_ADDR_VAR 0 41
5638: PUSH
5639: LD_VAR 0 4
5643: PPUSH
5644: LD_INT 22
5646: PUSH
5647: LD_VAR 0 1
5651: PUSH
5652: EMPTY
5653: LIST
5654: LIST
5655: PUSH
5656: LD_INT 21
5658: PUSH
5659: LD_INT 3
5661: PUSH
5662: EMPTY
5663: LIST
5664: LIST
5665: PUSH
5666: LD_INT 50
5668: PUSH
5669: EMPTY
5670: LIST
5671: PUSH
5672: LD_INT 2
5674: PUSH
5675: LD_INT 30
5677: PUSH
5678: LD_INT 6
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: PUSH
5685: LD_INT 30
5687: PUSH
5688: LD_INT 7
5690: PUSH
5691: EMPTY
5692: LIST
5693: LIST
5694: PUSH
5695: LD_INT 30
5697: PUSH
5698: LD_INT 8
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: PUSH
5711: EMPTY
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: PPUSH
5717: CALL_OW 70
5721: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
5722: LD_ADDR_VAR 0 42
5726: PUSH
5727: LD_VAR 0 4
5731: PPUSH
5732: LD_INT 22
5734: PUSH
5735: LD_VAR 0 1
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: PUSH
5744: LD_INT 21
5746: PUSH
5747: LD_INT 3
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: PUSH
5754: LD_INT 50
5756: PUSH
5757: EMPTY
5758: LIST
5759: PUSH
5760: LD_INT 2
5762: PUSH
5763: LD_INT 30
5765: PUSH
5766: LD_INT 31
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: PUSH
5773: LD_INT 30
5775: PUSH
5776: LD_INT 32
5778: PUSH
5779: EMPTY
5780: LIST
5781: LIST
5782: PUSH
5783: EMPTY
5784: LIST
5785: LIST
5786: LIST
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: PPUSH
5794: CALL_OW 70
5798: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
5799: LD_ADDR_VAR 0 43
5803: PUSH
5804: LD_VAR 0 4
5808: PPUSH
5809: LD_INT 22
5811: PUSH
5812: LD_VAR 0 1
5816: PUSH
5817: EMPTY
5818: LIST
5819: LIST
5820: PUSH
5821: LD_INT 21
5823: PUSH
5824: LD_INT 3
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: PUSH
5831: LD_INT 50
5833: PUSH
5834: EMPTY
5835: LIST
5836: PUSH
5837: LD_INT 2
5839: PUSH
5840: LD_INT 30
5842: PUSH
5843: LD_INT 4
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: PUSH
5850: LD_INT 30
5852: PUSH
5853: LD_INT 5
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: LIST
5864: PUSH
5865: EMPTY
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: PPUSH
5871: CALL_OW 70
5875: ST_TO_ADDR
// controlTowers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_vehicle ] ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5876: LD_ADDR_VAR 0 44
5880: PUSH
5881: LD_VAR 0 4
5885: PPUSH
5886: LD_INT 22
5888: PUSH
5889: LD_VAR 0 1
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: PUSH
5898: LD_INT 50
5900: PUSH
5901: EMPTY
5902: LIST
5903: PUSH
5904: LD_INT 2
5906: PUSH
5907: LD_INT 21
5909: PUSH
5910: LD_INT 3
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: PUSH
5917: LD_INT 21
5919: PUSH
5920: LD_INT 2
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PUSH
5927: EMPTY
5928: LIST
5929: LIST
5930: LIST
5931: PUSH
5932: LD_INT 2
5934: PUSH
5935: LD_INT 30
5937: PUSH
5938: LD_INT 36
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: PUSH
5945: LD_INT 34
5947: PUSH
5948: LD_INT 31
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: PUSH
5955: EMPTY
5956: LIST
5957: LIST
5958: LIST
5959: PUSH
5960: EMPTY
5961: LIST
5962: LIST
5963: LIST
5964: LIST
5965: PPUSH
5966: CALL_OW 70
5970: ST_TO_ADDR
// constructedBuildings = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] ] ) ;
5971: LD_ADDR_VAR 0 38
5975: PUSH
5976: LD_VAR 0 4
5980: PPUSH
5981: LD_INT 22
5983: PUSH
5984: LD_VAR 0 1
5988: PUSH
5989: EMPTY
5990: LIST
5991: LIST
5992: PUSH
5993: LD_INT 21
5995: PUSH
5996: LD_INT 3
5998: PUSH
5999: EMPTY
6000: LIST
6001: LIST
6002: PUSH
6003: LD_INT 3
6005: PUSH
6006: LD_INT 57
6008: PUSH
6009: EMPTY
6010: LIST
6011: PUSH
6012: EMPTY
6013: LIST
6014: LIST
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: LIST
6020: PPUSH
6021: CALL_OW 70
6025: ST_TO_ADDR
// for i := 1 to personel do
6026: LD_ADDR_VAR 0 14
6030: PUSH
6031: DOUBLE
6032: LD_INT 1
6034: DEC
6035: ST_TO_ADDR
6036: LD_VAR 0 19
6040: PUSH
6041: FOR_TO
6042: IFFALSE 6210
// begin if GetLives ( personel [ i ] ) = 1000 then
6044: LD_VAR 0 19
6048: PUSH
6049: LD_VAR 0 14
6053: ARRAY
6054: PPUSH
6055: CALL_OW 256
6059: PUSH
6060: LD_INT 1000
6062: EQUAL
6063: IFFALSE 6085
// SetTag ( personel [ i ] , 1 ) else
6065: LD_VAR 0 19
6069: PUSH
6070: LD_VAR 0 14
6074: ARRAY
6075: PPUSH
6076: LD_INT 1
6078: PPUSH
6079: CALL_OW 109
6083: GO 6165
// if GetLives ( personel [ i ] ) <= 950 and GetLives ( personel [ i ] ) > 250 then
6085: LD_VAR 0 19
6089: PUSH
6090: LD_VAR 0 14
6094: ARRAY
6095: PPUSH
6096: CALL_OW 256
6100: PUSH
6101: LD_INT 950
6103: LESSEQUAL
6104: PUSH
6105: LD_VAR 0 19
6109: PUSH
6110: LD_VAR 0 14
6114: ARRAY
6115: PPUSH
6116: CALL_OW 256
6120: PUSH
6121: LD_INT 250
6123: GREATER
6124: AND
6125: IFFALSE 6165
// begin SetTag ( personel [ i ] , 0 ) ;
6127: LD_VAR 0 19
6131: PUSH
6132: LD_VAR 0 14
6136: ARRAY
6137: PPUSH
6138: LD_INT 0
6140: PPUSH
6141: CALL_OW 109
// ComMoveToArea ( personel [ i ] , healArea ) ;
6145: LD_VAR 0 19
6149: PUSH
6150: LD_VAR 0 14
6154: ARRAY
6155: PPUSH
6156: LD_VAR 0 5
6160: PPUSH
6161: CALL_OW 113
// end ; if GetLives ( personel [ i ] ) < 100 then
6165: LD_VAR 0 19
6169: PUSH
6170: LD_VAR 0 14
6174: ARRAY
6175: PPUSH
6176: CALL_OW 256
6180: PUSH
6181: LD_INT 100
6183: LESS
6184: IFFALSE 6208
// personel = personel diff personel [ i ] ;
6186: LD_ADDR_VAR 0 19
6190: PUSH
6191: LD_VAR 0 19
6195: PUSH
6196: LD_VAR 0 19
6200: PUSH
6201: LD_VAR 0 14
6205: ARRAY
6206: DIFF
6207: ST_TO_ADDR
// end ;
6208: GO 6041
6210: POP
6211: POP
// for i := 1 to vehicles do
6212: LD_ADDR_VAR 0 14
6216: PUSH
6217: DOUBLE
6218: LD_INT 1
6220: DEC
6221: ST_TO_ADDR
6222: LD_VAR 0 25
6226: PUSH
6227: FOR_TO
6228: IFFALSE 6590
// begin if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
6230: LD_VAR 0 25
6234: PUSH
6235: LD_VAR 0 14
6239: ARRAY
6240: PUSH
6241: LD_INT 1
6243: ARRAY
6244: PPUSH
6245: CALL_OW 256
6249: PUSH
6250: LD_INT 1000
6252: EQUAL
6253: IFFALSE 6417
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
6255: LD_VAR 0 25
6259: PUSH
6260: LD_VAR 0 14
6264: ARRAY
6265: PUSH
6266: LD_INT 1
6268: ARRAY
6269: PPUSH
6270: CALL_OW 263
6274: PUSH
6275: LD_INT 1
6277: EQUAL
6278: IFFALSE 6357
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) and IsOK ( vehicles [ i ] [ 2 ] ) then
6280: LD_VAR 0 25
6284: PUSH
6285: LD_VAR 0 14
6289: ARRAY
6290: PUSH
6291: LD_INT 2
6293: ARRAY
6294: PPUSH
6295: CALL_OW 310
6299: NOT
6300: PUSH
6301: LD_VAR 0 25
6305: PUSH
6306: LD_VAR 0 14
6310: ARRAY
6311: PUSH
6312: LD_INT 2
6314: ARRAY
6315: PPUSH
6316: CALL_OW 302
6320: AND
6321: IFFALSE 6357
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
6323: LD_VAR 0 25
6327: PUSH
6328: LD_VAR 0 14
6332: ARRAY
6333: PUSH
6334: LD_INT 2
6336: ARRAY
6337: PPUSH
6338: LD_VAR 0 25
6342: PUSH
6343: LD_VAR 0 14
6347: ARRAY
6348: PUSH
6349: LD_INT 1
6351: ARRAY
6352: PPUSH
6353: CALL_OW 120
// if offensiveUnits < vehiclesToAttackAmount then
6357: LD_VAR 0 27
6361: PUSH
6362: LD_VAR 0 10
6366: LESS
6367: IFFALSE 6393
// SetTag ( vehicles [ i ] [ 1 ] , 2 ) else
6369: LD_VAR 0 25
6373: PUSH
6374: LD_VAR 0 14
6378: ARRAY
6379: PUSH
6380: LD_INT 1
6382: ARRAY
6383: PPUSH
6384: LD_INT 2
6386: PPUSH
6387: CALL_OW 109
6391: GO 6415
// SetTag ( vehicles [ i ] [ 1 ] , 3 ) ;
6393: LD_VAR 0 25
6397: PUSH
6398: LD_VAR 0 14
6402: ARRAY
6403: PUSH
6404: LD_INT 1
6406: ARRAY
6407: PPUSH
6408: LD_INT 3
6410: PPUSH
6411: CALL_OW 109
// end else
6415: GO 6538
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 and GetLives ( vehicles [ i ] [ 1 ] ) > 250 and GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
6417: LD_VAR 0 25
6421: PUSH
6422: LD_VAR 0 14
6426: ARRAY
6427: PUSH
6428: LD_INT 1
6430: ARRAY
6431: PPUSH
6432: CALL_OW 256
6436: PUSH
6437: LD_INT 650
6439: LESSEQUAL
6440: PUSH
6441: LD_VAR 0 25
6445: PUSH
6446: LD_VAR 0 14
6450: ARRAY
6451: PUSH
6452: LD_INT 1
6454: ARRAY
6455: PPUSH
6456: CALL_OW 256
6460: PUSH
6461: LD_INT 250
6463: GREATER
6464: AND
6465: PUSH
6466: LD_VAR 0 25
6470: PUSH
6471: LD_VAR 0 14
6475: ARRAY
6476: PUSH
6477: LD_INT 1
6479: ARRAY
6480: PPUSH
6481: CALL_OW 263
6485: PUSH
6486: LD_INT 1
6488: EQUAL
6489: AND
6490: IFFALSE 6538
// begin SetTag ( vehicles [ i ] [ 1 ] , 0 ) ;
6492: LD_VAR 0 25
6496: PUSH
6497: LD_VAR 0 14
6501: ARRAY
6502: PUSH
6503: LD_INT 1
6505: ARRAY
6506: PPUSH
6507: LD_INT 0
6509: PPUSH
6510: CALL_OW 109
// ComMoveToArea ( vehicles [ i ] [ 1 ] , repairArea ) ;
6514: LD_VAR 0 25
6518: PUSH
6519: LD_VAR 0 14
6523: ARRAY
6524: PUSH
6525: LD_INT 1
6527: ARRAY
6528: PPUSH
6529: LD_VAR 0 6
6533: PPUSH
6534: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
6538: LD_VAR 0 25
6542: PUSH
6543: LD_VAR 0 14
6547: ARRAY
6548: PUSH
6549: LD_INT 1
6551: ARRAY
6552: PPUSH
6553: CALL_OW 256
6557: PUSH
6558: LD_INT 250
6560: LESS
6561: IFFALSE 6588
// begin vehicles = vehicles diff [ vehicles [ i ] ] ;
6563: LD_ADDR_VAR 0 25
6567: PUSH
6568: LD_VAR 0 25
6572: PUSH
6573: LD_VAR 0 25
6577: PUSH
6578: LD_VAR 0 14
6582: ARRAY
6583: PUSH
6584: EMPTY
6585: LIST
6586: DIFF
6587: ST_TO_ADDR
// end ; end ;
6588: GO 6227
6590: POP
6591: POP
// for i := 1 to personel do
6592: LD_ADDR_VAR 0 14
6596: PUSH
6597: DOUBLE
6598: LD_INT 1
6600: DEC
6601: ST_TO_ADDR
6602: LD_VAR 0 19
6606: PUSH
6607: FOR_TO
6608: IFFALSE 6659
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
6610: LD_ADDR_VAR 0 20
6614: PUSH
6615: LD_VAR 0 20
6619: PUSH
6620: LD_VAR 0 19
6624: PUSH
6625: LD_VAR 0 14
6629: ARRAY
6630: PPUSH
6631: LD_INT 25
6633: PUSH
6634: LD_INT 1
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: PUSH
6641: LD_INT 50
6643: PUSH
6644: EMPTY
6645: LIST
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PPUSH
6651: CALL_OW 72
6655: ADD
6656: ST_TO_ADDR
6657: GO 6607
6659: POP
6660: POP
// if soldiers and UnitFilter ( bunkers , [ f_empty ] ) then
6661: LD_VAR 0 20
6665: PUSH
6666: LD_VAR 0 42
6670: PPUSH
6671: LD_INT 58
6673: PUSH
6674: EMPTY
6675: LIST
6676: PPUSH
6677: CALL_OW 72
6681: AND
6682: IFFALSE 6940
// begin for i := 1 to soldiers do
6684: LD_ADDR_VAR 0 14
6688: PUSH
6689: DOUBLE
6690: LD_INT 1
6692: DEC
6693: ST_TO_ADDR
6694: LD_VAR 0 20
6698: PUSH
6699: FOR_TO
6700: IFFALSE 6936
// if GetTag ( soldiers [ i ] ) = 1 then
6702: LD_VAR 0 20
6706: PUSH
6707: LD_VAR 0 14
6711: ARRAY
6712: PPUSH
6713: CALL_OW 110
6717: PUSH
6718: LD_INT 1
6720: EQUAL
6721: IFFALSE 6934
// begin if GetTaskList ( soldiers [ i ] ) then
6723: LD_VAR 0 20
6727: PUSH
6728: LD_VAR 0 14
6732: ARRAY
6733: PPUSH
6734: CALL_OW 437
6738: IFFALSE 6827
// if GetTaskList ( soldiers [ i ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( soldiers [ i ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
6740: LD_VAR 0 20
6744: PUSH
6745: LD_VAR 0 14
6749: ARRAY
6750: PPUSH
6751: CALL_OW 437
6755: PUSH
6756: LD_INT 1
6758: ARRAY
6759: PUSH
6760: LD_INT 1
6762: ARRAY
6763: PUSH
6764: LD_STRING e
6766: EQUAL
6767: PUSH
6768: LD_VAR 0 20
6772: PUSH
6773: LD_VAR 0 14
6777: ARRAY
6778: PPUSH
6779: CALL_OW 437
6783: PUSH
6784: LD_INT 1
6786: ARRAY
6787: PUSH
6788: LD_INT 4
6790: ARRAY
6791: PPUSH
6792: CALL_OW 266
6796: PUSH
6797: LD_INT 4
6799: PUSH
6800: LD_INT 5
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: IN
6807: AND
6808: IFFALSE 6827
// SetTaskList ( soldiers [ i ] , [ ] ) ;
6810: LD_VAR 0 20
6814: PUSH
6815: LD_VAR 0 14
6819: ARRAY
6820: PPUSH
6821: EMPTY
6822: PPUSH
6823: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
6827: LD_ADDR_VAR 0 49
6831: PUSH
6832: LD_VAR 0 42
6836: PPUSH
6837: LD_INT 3
6839: PUSH
6840: LD_INT 59
6842: PUSH
6843: EMPTY
6844: LIST
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PPUSH
6850: CALL_OW 72
6854: PUSH
6855: FOR_IN
6856: IFFALSE 6932
// if not HasTask ( soldiers [ i ] ) and not GetBType ( IsInUnit ( soldiers [ i ] ) ) in [ b_breastwork , b_bunker ] then
6858: LD_VAR 0 20
6862: PUSH
6863: LD_VAR 0 14
6867: ARRAY
6868: PPUSH
6869: CALL_OW 314
6873: NOT
6874: PUSH
6875: LD_VAR 0 20
6879: PUSH
6880: LD_VAR 0 14
6884: ARRAY
6885: PPUSH
6886: CALL_OW 310
6890: PPUSH
6891: CALL_OW 266
6895: PUSH
6896: LD_INT 31
6898: PUSH
6899: LD_INT 32
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: IN
6906: NOT
6907: AND
6908: IFFALSE 6930
// ComEnterUnit ( soldiers [ i ] , emptyBunkers ) ;
6910: LD_VAR 0 20
6914: PUSH
6915: LD_VAR 0 14
6919: ARRAY
6920: PPUSH
6921: LD_VAR 0 49
6925: PPUSH
6926: CALL_OW 120
6930: GO 6855
6932: POP
6933: POP
// end ;
6934: GO 6699
6936: POP
6937: POP
// end else
6938: GO 7112
// if soldiers and barracks then
6940: LD_VAR 0 20
6944: PUSH
6945: LD_VAR 0 43
6949: AND
6950: IFFALSE 7072
// begin for i := 1 to soldiers do
6952: LD_ADDR_VAR 0 14
6956: PUSH
6957: DOUBLE
6958: LD_INT 1
6960: DEC
6961: ST_TO_ADDR
6962: LD_VAR 0 20
6966: PUSH
6967: FOR_TO
6968: IFFALSE 7068
// if GetTag ( soldiers [ i ] ) = 1 and UnitFilter ( soldiers [ i ] , [ f_outside ] ) and not HasTask ( soldiers [ i ] ) then
6970: LD_VAR 0 20
6974: PUSH
6975: LD_VAR 0 14
6979: ARRAY
6980: PPUSH
6981: CALL_OW 110
6985: PUSH
6986: LD_INT 1
6988: EQUAL
6989: PUSH
6990: LD_VAR 0 20
6994: PUSH
6995: LD_VAR 0 14
6999: ARRAY
7000: PPUSH
7001: LD_INT 56
7003: PUSH
7004: EMPTY
7005: LIST
7006: PPUSH
7007: CALL_OW 72
7011: AND
7012: PUSH
7013: LD_VAR 0 20
7017: PUSH
7018: LD_VAR 0 14
7022: ARRAY
7023: PPUSH
7024: CALL_OW 314
7028: NOT
7029: AND
7030: IFFALSE 7066
// ComEnterUnit ( soldiers [ i ] , barracks [ rand ( 1 , barracks ) ] ) ;
7032: LD_VAR 0 20
7036: PUSH
7037: LD_VAR 0 14
7041: ARRAY
7042: PPUSH
7043: LD_VAR 0 43
7047: PUSH
7048: LD_INT 1
7050: PPUSH
7051: LD_VAR 0 43
7055: PPUSH
7056: CALL_OW 12
7060: ARRAY
7061: PPUSH
7062: CALL_OW 120
7066: GO 6967
7068: POP
7069: POP
// end else
7070: GO 7112
// for i := 1 to soldiers do
7072: LD_ADDR_VAR 0 14
7076: PUSH
7077: DOUBLE
7078: LD_INT 1
7080: DEC
7081: ST_TO_ADDR
7082: LD_VAR 0 20
7086: PUSH
7087: FOR_TO
7088: IFFALSE 7110
// SetTag ( soldiers [ i ] , 3 ) ;
7090: LD_VAR 0 20
7094: PUSH
7095: LD_VAR 0 14
7099: ARRAY
7100: PPUSH
7101: LD_INT 3
7103: PPUSH
7104: CALL_OW 109
7108: GO 7087
7110: POP
7111: POP
// for i := 1 to personel do
7112: LD_ADDR_VAR 0 14
7116: PUSH
7117: DOUBLE
7118: LD_INT 1
7120: DEC
7121: ST_TO_ADDR
7122: LD_VAR 0 19
7126: PUSH
7127: FOR_TO
7128: IFFALSE 7169
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
7130: LD_ADDR_VAR 0 21
7134: PUSH
7135: LD_VAR 0 21
7139: PUSH
7140: LD_VAR 0 19
7144: PUSH
7145: LD_VAR 0 14
7149: ARRAY
7150: PPUSH
7151: LD_INT 25
7153: PUSH
7154: LD_INT 2
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PPUSH
7161: CALL_OW 72
7165: ADD
7166: ST_TO_ADDR
7167: GO 7127
7169: POP
7170: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
7171: LD_VAR 0 21
7175: PUSH
7176: LD_VAR 0 4
7180: PPUSH
7181: LD_INT 22
7183: PUSH
7184: LD_VAR 0 1
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 21
7195: PUSH
7196: LD_INT 3
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PUSH
7203: LD_INT 3
7205: PUSH
7206: LD_INT 24
7208: PUSH
7209: LD_INT 1000
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: LIST
7224: PPUSH
7225: CALL_OW 70
7229: AND
7230: IFFALSE 7458
// begin for i := 1 to engineers do
7232: LD_ADDR_VAR 0 14
7236: PUSH
7237: DOUBLE
7238: LD_INT 1
7240: DEC
7241: ST_TO_ADDR
7242: LD_VAR 0 21
7246: PUSH
7247: FOR_TO
7248: IFFALSE 7454
// if GetTag ( engineers [ i ] ) = 1 then
7250: LD_VAR 0 21
7254: PUSH
7255: LD_VAR 0 14
7259: ARRAY
7260: PPUSH
7261: CALL_OW 110
7265: PUSH
7266: LD_INT 1
7268: EQUAL
7269: IFFALSE 7452
// begin if GetTaskList ( engineers [ i ] ) then
7271: LD_VAR 0 21
7275: PUSH
7276: LD_VAR 0 14
7280: ARRAY
7281: PPUSH
7282: CALL_OW 437
7286: IFFALSE 7334
// if GetTaskList ( engineers [ i ] ) [ 1 ] [ 1 ] = e then
7288: LD_VAR 0 21
7292: PUSH
7293: LD_VAR 0 14
7297: ARRAY
7298: PPUSH
7299: CALL_OW 437
7303: PUSH
7304: LD_INT 1
7306: ARRAY
7307: PUSH
7308: LD_INT 1
7310: ARRAY
7311: PUSH
7312: LD_STRING e
7314: EQUAL
7315: IFFALSE 7334
// SetTaskList ( engineers [ i ] , [ ] ) ;
7317: LD_VAR 0 21
7321: PUSH
7322: LD_VAR 0 14
7326: ARRAY
7327: PPUSH
7328: EMPTY
7329: PPUSH
7330: CALL_OW 446
// if IsInUnit ( engineers [ i ] ) then
7334: LD_VAR 0 21
7338: PUSH
7339: LD_VAR 0 14
7343: ARRAY
7344: PPUSH
7345: CALL_OW 310
7349: IFFALSE 7366
// ComExitBuilding ( engineers [ i ] ) ;
7351: LD_VAR 0 21
7355: PUSH
7356: LD_VAR 0 14
7360: ARRAY
7361: PPUSH
7362: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7366: LD_ADDR_VAR 0 47
7370: PUSH
7371: LD_VAR 0 4
7375: PPUSH
7376: LD_INT 22
7378: PUSH
7379: LD_VAR 0 1
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: PUSH
7388: LD_INT 21
7390: PUSH
7391: LD_INT 3
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: PUSH
7398: LD_INT 3
7400: PUSH
7401: LD_INT 24
7403: PUSH
7404: LD_INT 1000
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: LIST
7419: PPUSH
7420: CALL_OW 70
7424: PUSH
7425: FOR_IN
7426: IFFALSE 7450
// AddComRepairBuilding ( engineers [ i ] , damageBuilding ) ;
7428: LD_VAR 0 21
7432: PUSH
7433: LD_VAR 0 14
7437: ARRAY
7438: PPUSH
7439: LD_VAR 0 47
7443: PPUSH
7444: CALL_OW 190
7448: GO 7425
7450: POP
7451: POP
// end ;
7452: GO 7247
7454: POP
7455: POP
// end else
7456: GO 7765
// if engineers and destroyedBuildings then
7458: LD_VAR 0 21
7462: PUSH
7463: LD_VAR 0 35
7467: AND
7468: IFFALSE 7644
// begin for i := 1 to engineers do
7470: LD_ADDR_VAR 0 14
7474: PUSH
7475: DOUBLE
7476: LD_INT 1
7478: DEC
7479: ST_TO_ADDR
7480: LD_VAR 0 21
7484: PUSH
7485: FOR_TO
7486: IFFALSE 7640
// if GetTag ( engineers [ i ] ) = 1 then
7488: LD_VAR 0 21
7492: PUSH
7493: LD_VAR 0 14
7497: ARRAY
7498: PPUSH
7499: CALL_OW 110
7503: PUSH
7504: LD_INT 1
7506: EQUAL
7507: IFFALSE 7638
// begin if IsInUnit ( engineers [ i ] ) then
7509: LD_VAR 0 21
7513: PUSH
7514: LD_VAR 0 14
7518: ARRAY
7519: PPUSH
7520: CALL_OW 310
7524: IFFALSE 7541
// ComExitBuilding ( engineers [ i ] ) ;
7526: LD_VAR 0 21
7530: PUSH
7531: LD_VAR 0 14
7535: ARRAY
7536: PPUSH
7537: CALL_OW 122
// for j := 1 to destroyedBuildings / 4 do
7541: LD_ADDR_VAR 0 15
7545: PUSH
7546: DOUBLE
7547: LD_INT 1
7549: DEC
7550: ST_TO_ADDR
7551: LD_VAR 0 35
7555: PUSH
7556: LD_INT 4
7558: DIVREAL
7559: PUSH
7560: FOR_TO
7561: IFFALSE 7636
// AddComBuild ( engineers [ i ] , destroyedBuildings [ j ] , destroyedBuildings [ j + 1 ] , destroyedBuildings [ j + 2 ] , destroyedBuildings [ j + 3 ] ) ;
7563: LD_VAR 0 21
7567: PUSH
7568: LD_VAR 0 14
7572: ARRAY
7573: PPUSH
7574: LD_VAR 0 35
7578: PUSH
7579: LD_VAR 0 15
7583: ARRAY
7584: PPUSH
7585: LD_VAR 0 35
7589: PUSH
7590: LD_VAR 0 15
7594: PUSH
7595: LD_INT 1
7597: PLUS
7598: ARRAY
7599: PPUSH
7600: LD_VAR 0 35
7604: PUSH
7605: LD_VAR 0 15
7609: PUSH
7610: LD_INT 2
7612: PLUS
7613: ARRAY
7614: PPUSH
7615: LD_VAR 0 35
7619: PUSH
7620: LD_VAR 0 15
7624: PUSH
7625: LD_INT 3
7627: PLUS
7628: ARRAY
7629: PPUSH
7630: CALL_OW 205
7634: GO 7560
7636: POP
7637: POP
// end ;
7638: GO 7485
7640: POP
7641: POP
// end else
7642: GO 7765
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot and not destroyedBuildings then
7644: LD_VAR 0 21
7648: PUSH
7649: LD_VAR 0 21
7653: PPUSH
7654: LD_INT 56
7656: PUSH
7657: EMPTY
7658: LIST
7659: PPUSH
7660: CALL_OW 72
7664: AND
7665: PUSH
7666: LD_VAR 0 39
7670: AND
7671: PUSH
7672: LD_VAR 0 35
7676: NOT
7677: AND
7678: IFFALSE 7765
// for i := 1 to engineers do
7680: LD_ADDR_VAR 0 14
7684: PUSH
7685: DOUBLE
7686: LD_INT 1
7688: DEC
7689: ST_TO_ADDR
7690: LD_VAR 0 21
7694: PUSH
7695: FOR_TO
7696: IFFALSE 7763
// begin if GetTag ( engineers [ i ] ) = 1 and not HasTask ( engineers [ i ] ) then
7698: LD_VAR 0 21
7702: PUSH
7703: LD_VAR 0 14
7707: ARRAY
7708: PPUSH
7709: CALL_OW 110
7713: PUSH
7714: LD_INT 1
7716: EQUAL
7717: PUSH
7718: LD_VAR 0 21
7722: PUSH
7723: LD_VAR 0 14
7727: ARRAY
7728: PPUSH
7729: CALL_OW 314
7733: NOT
7734: AND
7735: IFFALSE 7761
// ComEnterUnit ( engineers [ i ] , depot [ 1 ] ) ;
7737: LD_VAR 0 21
7741: PUSH
7742: LD_VAR 0 14
7746: ARRAY
7747: PPUSH
7748: LD_VAR 0 39
7752: PUSH
7753: LD_INT 1
7755: ARRAY
7756: PPUSH
7757: CALL_OW 120
// end ;
7761: GO 7695
7763: POP
7764: POP
// for i := 1 to personel do
7765: LD_ADDR_VAR 0 14
7769: PUSH
7770: DOUBLE
7771: LD_INT 1
7773: DEC
7774: ST_TO_ADDR
7775: LD_VAR 0 19
7779: PUSH
7780: FOR_TO
7781: IFFALSE 7822
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
7783: LD_ADDR_VAR 0 22
7787: PUSH
7788: LD_VAR 0 22
7792: PUSH
7793: LD_VAR 0 19
7797: PUSH
7798: LD_VAR 0 14
7802: ARRAY
7803: PPUSH
7804: LD_INT 25
7806: PUSH
7807: LD_INT 3
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PPUSH
7814: CALL_OW 72
7818: ADD
7819: ST_TO_ADDR
7820: GO 7780
7822: POP
7823: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
7824: LD_VAR 0 22
7828: PUSH
7829: LD_VAR 0 4
7833: PPUSH
7834: LD_INT 22
7836: PUSH
7837: LD_VAR 0 1
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: PUSH
7846: LD_INT 21
7848: PUSH
7849: LD_INT 2
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: PUSH
7856: LD_INT 3
7858: PUSH
7859: LD_INT 24
7861: PUSH
7862: LD_INT 1000
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: LIST
7877: PPUSH
7878: CALL_OW 70
7882: AND
7883: IFFALSE 8463
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7885: LD_ADDR_VAR 0 48
7889: PUSH
7890: LD_VAR 0 4
7894: PPUSH
7895: LD_INT 22
7897: PUSH
7898: LD_VAR 0 1
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PUSH
7907: LD_INT 21
7909: PUSH
7910: LD_INT 2
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PUSH
7917: LD_INT 3
7919: PUSH
7920: LD_INT 24
7922: PUSH
7923: LD_INT 1000
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: LIST
7938: PPUSH
7939: CALL_OW 70
7943: PUSH
7944: FOR_IN
7945: IFFALSE 8459
// begin if GetDistUnitArea ( damageUnit , repairArea ) <= 5 then
7947: LD_VAR 0 48
7951: PPUSH
7952: LD_VAR 0 6
7956: PPUSH
7957: CALL_OW 299
7961: PUSH
7962: LD_INT 5
7964: LESSEQUAL
7965: IFFALSE 8054
// for i := 1 to vehicles do
7967: LD_ADDR_VAR 0 14
7971: PUSH
7972: DOUBLE
7973: LD_INT 1
7975: DEC
7976: ST_TO_ADDR
7977: LD_VAR 0 25
7981: PUSH
7982: FOR_TO
7983: IFFALSE 8052
// if vehicles [ i ] [ 1 ] = damageUnit then
7985: LD_VAR 0 25
7989: PUSH
7990: LD_VAR 0 14
7994: ARRAY
7995: PUSH
7996: LD_INT 1
7998: ARRAY
7999: PUSH
8000: LD_VAR 0 48
8004: EQUAL
8005: IFFALSE 8050
// begin ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
8007: LD_VAR 0 25
8011: PUSH
8012: LD_VAR 0 14
8016: ARRAY
8017: PUSH
8018: LD_INT 2
8020: ARRAY
8021: PPUSH
8022: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
8026: LD_VAR 0 25
8030: PUSH
8031: LD_VAR 0 14
8035: ARRAY
8036: PUSH
8037: LD_INT 2
8039: ARRAY
8040: PPUSH
8041: LD_VAR 0 48
8045: PPUSH
8046: CALL_OW 189
// end ;
8050: GO 7982
8052: POP
8053: POP
// for i := 1 to mechanics do
8054: LD_ADDR_VAR 0 14
8058: PUSH
8059: DOUBLE
8060: LD_INT 1
8062: DEC
8063: ST_TO_ADDR
8064: LD_VAR 0 22
8068: PUSH
8069: FOR_TO
8070: IFFALSE 8238
// if GetTag ( mechanics [ i ] ) = 1 and IsInUnit ( mechanics [ i ] ) in [ b_workshop , b_factory ] then
8072: LD_VAR 0 22
8076: PUSH
8077: LD_VAR 0 14
8081: ARRAY
8082: PPUSH
8083: CALL_OW 110
8087: PUSH
8088: LD_INT 1
8090: EQUAL
8091: PUSH
8092: LD_VAR 0 22
8096: PUSH
8097: LD_VAR 0 14
8101: ARRAY
8102: PPUSH
8103: CALL_OW 310
8107: PUSH
8108: LD_INT 2
8110: PUSH
8111: LD_INT 3
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: IN
8118: AND
8119: IFFALSE 8236
// begin if GetTaskList ( mechanics [ i ] ) then
8121: LD_VAR 0 22
8125: PUSH
8126: LD_VAR 0 14
8130: ARRAY
8131: PPUSH
8132: CALL_OW 437
8136: IFFALSE 8184
// if GetTaskList ( mechanics [ i ] ) [ 1 ] [ 1 ] = e then
8138: LD_VAR 0 22
8142: PUSH
8143: LD_VAR 0 14
8147: ARRAY
8148: PPUSH
8149: CALL_OW 437
8153: PUSH
8154: LD_INT 1
8156: ARRAY
8157: PUSH
8158: LD_INT 1
8160: ARRAY
8161: PUSH
8162: LD_STRING e
8164: EQUAL
8165: IFFALSE 8184
// SetTaskList ( mechanics [ i ] , [ ] ) ;
8167: LD_VAR 0 22
8171: PUSH
8172: LD_VAR 0 14
8176: ARRAY
8177: PPUSH
8178: EMPTY
8179: PPUSH
8180: CALL_OW 446
// if IsInUnit ( mechanics [ i ] ) then
8184: LD_VAR 0 22
8188: PUSH
8189: LD_VAR 0 14
8193: ARRAY
8194: PPUSH
8195: CALL_OW 310
8199: IFFALSE 8216
// ComExitBuilding ( mechanics [ i ] ) ;
8201: LD_VAR 0 22
8205: PUSH
8206: LD_VAR 0 14
8210: ARRAY
8211: PPUSH
8212: CALL_OW 122
// AddComRepairVehicle ( mechanics [ i ] , damageUnit ) ;
8216: LD_VAR 0 22
8220: PUSH
8221: LD_VAR 0 14
8225: ARRAY
8226: PPUSH
8227: LD_VAR 0 48
8231: PPUSH
8232: CALL_OW 189
// end ;
8236: GO 8069
8238: POP
8239: POP
// if GetLives ( damageUnit ) < 250 and IsInArea ( damageUnit , baseArea ) then
8240: LD_VAR 0 48
8244: PPUSH
8245: CALL_OW 256
8249: PUSH
8250: LD_INT 250
8252: LESS
8253: PUSH
8254: LD_VAR 0 48
8258: PPUSH
8259: LD_VAR 0 4
8263: PPUSH
8264: CALL_OW 308
8268: AND
8269: IFFALSE 8457
// for i := 1 to personel do
8271: LD_ADDR_VAR 0 14
8275: PUSH
8276: DOUBLE
8277: LD_INT 1
8279: DEC
8280: ST_TO_ADDR
8281: LD_VAR 0 19
8285: PUSH
8286: FOR_TO
8287: IFFALSE 8455
// if GetTag ( mechanics [ i ] ) = 1 and IsInUnit ( mechanics [ i ] ) in [ b_workshop , b_factory ] then
8289: LD_VAR 0 22
8293: PUSH
8294: LD_VAR 0 14
8298: ARRAY
8299: PPUSH
8300: CALL_OW 110
8304: PUSH
8305: LD_INT 1
8307: EQUAL
8308: PUSH
8309: LD_VAR 0 22
8313: PUSH
8314: LD_VAR 0 14
8318: ARRAY
8319: PPUSH
8320: CALL_OW 310
8324: PUSH
8325: LD_INT 2
8327: PUSH
8328: LD_INT 3
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: IN
8335: AND
8336: IFFALSE 8453
// begin if GetTaskList ( mechanics [ i ] ) then
8338: LD_VAR 0 22
8342: PUSH
8343: LD_VAR 0 14
8347: ARRAY
8348: PPUSH
8349: CALL_OW 437
8353: IFFALSE 8401
// if GetTaskList ( mechanics [ i ] ) [ 1 ] [ 1 ] = e then
8355: LD_VAR 0 22
8359: PUSH
8360: LD_VAR 0 14
8364: ARRAY
8365: PPUSH
8366: CALL_OW 437
8370: PUSH
8371: LD_INT 1
8373: ARRAY
8374: PUSH
8375: LD_INT 1
8377: ARRAY
8378: PUSH
8379: LD_STRING e
8381: EQUAL
8382: IFFALSE 8401
// SetTaskList ( mechanics [ i ] , [ ] ) ;
8384: LD_VAR 0 22
8388: PUSH
8389: LD_VAR 0 14
8393: ARRAY
8394: PPUSH
8395: EMPTY
8396: PPUSH
8397: CALL_OW 446
// if IsInUnit ( mechanics [ i ] ) then
8401: LD_VAR 0 22
8405: PUSH
8406: LD_VAR 0 14
8410: ARRAY
8411: PPUSH
8412: CALL_OW 310
8416: IFFALSE 8433
// ComExitBuilding ( mechanics [ i ] ) ;
8418: LD_VAR 0 22
8422: PUSH
8423: LD_VAR 0 14
8427: ARRAY
8428: PPUSH
8429: CALL_OW 122
// AddComRepairVehicle ( mechanics [ i ] , damageUnit ) ;
8433: LD_VAR 0 22
8437: PUSH
8438: LD_VAR 0 14
8442: ARRAY
8443: PPUSH
8444: LD_VAR 0 48
8448: PPUSH
8449: CALL_OW 189
// end ;
8453: GO 8286
8455: POP
8456: POP
// end ;
8457: GO 7944
8459: POP
8460: POP
// end else
8461: GO 8760
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and UnitFilter ( controlTowers , [ f_empty ] ) then
8463: LD_VAR 0 22
8467: PUSH
8468: LD_VAR 0 22
8472: PPUSH
8473: LD_INT 56
8475: PUSH
8476: EMPTY
8477: LIST
8478: PPUSH
8479: CALL_OW 72
8483: AND
8484: PUSH
8485: LD_VAR 0 44
8489: PPUSH
8490: LD_INT 58
8492: PUSH
8493: EMPTY
8494: LIST
8495: PPUSH
8496: CALL_OW 72
8500: AND
8501: IFFALSE 8618
// begin for i := 1 to mechanics do
8503: LD_ADDR_VAR 0 14
8507: PUSH
8508: DOUBLE
8509: LD_INT 1
8511: DEC
8512: ST_TO_ADDR
8513: LD_VAR 0 22
8517: PUSH
8518: FOR_TO
8519: IFFALSE 8614
// if GetTag ( mechanics [ i ] ) = 1 and not HasTask ( mechanics [ i ] ) and not IsInUnit ( mechanics [ i ] ) then
8521: LD_VAR 0 22
8525: PUSH
8526: LD_VAR 0 14
8530: ARRAY
8531: PPUSH
8532: CALL_OW 110
8536: PUSH
8537: LD_INT 1
8539: EQUAL
8540: PUSH
8541: LD_VAR 0 22
8545: PUSH
8546: LD_VAR 0 14
8550: ARRAY
8551: PPUSH
8552: CALL_OW 314
8556: NOT
8557: AND
8558: PUSH
8559: LD_VAR 0 22
8563: PUSH
8564: LD_VAR 0 14
8568: ARRAY
8569: PPUSH
8570: CALL_OW 310
8574: NOT
8575: AND
8576: IFFALSE 8612
// ComEnterUnit ( mechanics [ i ] , controlTowers [ rand ( 1 , controlTowers ) ] ) ;
8578: LD_VAR 0 22
8582: PUSH
8583: LD_VAR 0 14
8587: ARRAY
8588: PPUSH
8589: LD_VAR 0 44
8593: PUSH
8594: LD_INT 1
8596: PPUSH
8597: LD_VAR 0 44
8601: PPUSH
8602: CALL_OW 12
8606: ARRAY
8607: PPUSH
8608: CALL_OW 120
8612: GO 8518
8614: POP
8615: POP
// end else
8616: GO 8760
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
8618: LD_VAR 0 22
8622: PUSH
8623: LD_VAR 0 22
8627: PPUSH
8628: LD_INT 56
8630: PUSH
8631: EMPTY
8632: LIST
8633: PPUSH
8634: CALL_OW 72
8638: AND
8639: PUSH
8640: LD_VAR 0 40
8644: AND
8645: IFFALSE 8760
// for i := 1 to mechanics do
8647: LD_ADDR_VAR 0 14
8651: PUSH
8652: DOUBLE
8653: LD_INT 1
8655: DEC
8656: ST_TO_ADDR
8657: LD_VAR 0 22
8661: PUSH
8662: FOR_TO
8663: IFFALSE 8758
// if GetTag ( mechanics [ i ] ) = 1 and not HasTask ( mechanics [ i ] ) and not IsInUnit ( mechanics [ i ] ) then
8665: LD_VAR 0 22
8669: PUSH
8670: LD_VAR 0 14
8674: ARRAY
8675: PPUSH
8676: CALL_OW 110
8680: PUSH
8681: LD_INT 1
8683: EQUAL
8684: PUSH
8685: LD_VAR 0 22
8689: PUSH
8690: LD_VAR 0 14
8694: ARRAY
8695: PPUSH
8696: CALL_OW 314
8700: NOT
8701: AND
8702: PUSH
8703: LD_VAR 0 22
8707: PUSH
8708: LD_VAR 0 14
8712: ARRAY
8713: PPUSH
8714: CALL_OW 310
8718: NOT
8719: AND
8720: IFFALSE 8756
// ComEnterUnit ( mechanics [ i ] , factory [ rand ( 1 , factory ) ] ) ;
8722: LD_VAR 0 22
8726: PUSH
8727: LD_VAR 0 14
8731: ARRAY
8732: PPUSH
8733: LD_VAR 0 40
8737: PUSH
8738: LD_INT 1
8740: PPUSH
8741: LD_VAR 0 40
8745: PPUSH
8746: CALL_OW 12
8750: ARRAY
8751: PPUSH
8752: CALL_OW 120
8756: GO 8662
8758: POP
8759: POP
// for i := 1 to personel do
8760: LD_ADDR_VAR 0 14
8764: PUSH
8765: DOUBLE
8766: LD_INT 1
8768: DEC
8769: ST_TO_ADDR
8770: LD_VAR 0 19
8774: PUSH
8775: FOR_TO
8776: IFFALSE 8817
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
8778: LD_ADDR_VAR 0 23
8782: PUSH
8783: LD_VAR 0 23
8787: PUSH
8788: LD_VAR 0 19
8792: PUSH
8793: LD_VAR 0 14
8797: ARRAY
8798: PPUSH
8799: LD_INT 25
8801: PUSH
8802: LD_INT 4
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PPUSH
8809: CALL_OW 72
8813: ADD
8814: ST_TO_ADDR
8815: GO 8775
8817: POP
8818: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
8819: LD_VAR 0 23
8823: PUSH
8824: LD_VAR 0 4
8828: PPUSH
8829: LD_INT 22
8831: PUSH
8832: LD_VAR 0 1
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: PUSH
8841: LD_INT 21
8843: PUSH
8844: LD_INT 1
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: PUSH
8851: LD_INT 3
8853: PUSH
8854: LD_INT 24
8856: PUSH
8857: LD_INT 1000
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: LIST
8872: PPUSH
8873: CALL_OW 70
8877: AND
8878: IFFALSE 9315
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
8880: LD_ADDR_VAR 0 48
8884: PUSH
8885: LD_VAR 0 4
8889: PPUSH
8890: LD_INT 22
8892: PUSH
8893: LD_VAR 0 1
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: PUSH
8902: LD_INT 21
8904: PUSH
8905: LD_INT 1
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PUSH
8912: LD_INT 3
8914: PUSH
8915: LD_INT 24
8917: PUSH
8918: LD_INT 1000
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: LIST
8933: PPUSH
8934: CALL_OW 70
8938: PUSH
8939: FOR_IN
8940: IFFALSE 9311
// begin if GetDistUnitArea ( damageUnit , healArea ) <= 5 then
8942: LD_VAR 0 48
8946: PPUSH
8947: LD_VAR 0 5
8951: PPUSH
8952: CALL_OW 299
8956: PUSH
8957: LD_INT 5
8959: LESSEQUAL
8960: IFFALSE 9120
// for i := 1 to scientists do
8962: LD_ADDR_VAR 0 14
8966: PUSH
8967: DOUBLE
8968: LD_INT 1
8970: DEC
8971: ST_TO_ADDR
8972: LD_VAR 0 23
8976: PUSH
8977: FOR_TO
8978: IFFALSE 9118
// if GetTag ( scientists [ i ] ) = 1 then
8980: LD_VAR 0 23
8984: PUSH
8985: LD_VAR 0 14
8989: ARRAY
8990: PPUSH
8991: CALL_OW 110
8995: PUSH
8996: LD_INT 1
8998: EQUAL
8999: IFFALSE 9116
// begin if GetTaskList ( scientists [ i ] ) then
9001: LD_VAR 0 23
9005: PUSH
9006: LD_VAR 0 14
9010: ARRAY
9011: PPUSH
9012: CALL_OW 437
9016: IFFALSE 9064
// if GetTaskList ( scientists [ i ] ) [ 1 ] [ 1 ] = e then
9018: LD_VAR 0 23
9022: PUSH
9023: LD_VAR 0 14
9027: ARRAY
9028: PPUSH
9029: CALL_OW 437
9033: PUSH
9034: LD_INT 1
9036: ARRAY
9037: PUSH
9038: LD_INT 1
9040: ARRAY
9041: PUSH
9042: LD_STRING e
9044: EQUAL
9045: IFFALSE 9064
// SetTaskList ( scientists [ i ] , [ ] ) ;
9047: LD_VAR 0 23
9051: PUSH
9052: LD_VAR 0 14
9056: ARRAY
9057: PPUSH
9058: EMPTY
9059: PPUSH
9060: CALL_OW 446
// if IsInUnit ( scientists [ i ] ) then
9064: LD_VAR 0 23
9068: PUSH
9069: LD_VAR 0 14
9073: ARRAY
9074: PPUSH
9075: CALL_OW 310
9079: IFFALSE 9096
// ComExitBuilding ( scientists [ i ] ) ;
9081: LD_VAR 0 23
9085: PUSH
9086: LD_VAR 0 14
9090: ARRAY
9091: PPUSH
9092: CALL_OW 122
// AddComHeal ( scientists [ i ] , damageUnit ) ;
9096: LD_VAR 0 23
9100: PUSH
9101: LD_VAR 0 14
9105: ARRAY
9106: PPUSH
9107: LD_VAR 0 48
9111: PPUSH
9112: CALL_OW 188
// end ;
9116: GO 8977
9118: POP
9119: POP
// if GetLives ( damageUnit ) < 250 and IsInArea ( damageUnit , baseArea ) then
9120: LD_VAR 0 48
9124: PPUSH
9125: CALL_OW 256
9129: PUSH
9130: LD_INT 250
9132: LESS
9133: PUSH
9134: LD_VAR 0 48
9138: PPUSH
9139: LD_VAR 0 4
9143: PPUSH
9144: CALL_OW 308
9148: AND
9149: IFFALSE 9309
// for i := 1 to scientists do
9151: LD_ADDR_VAR 0 14
9155: PUSH
9156: DOUBLE
9157: LD_INT 1
9159: DEC
9160: ST_TO_ADDR
9161: LD_VAR 0 23
9165: PUSH
9166: FOR_TO
9167: IFFALSE 9307
// if GetTag ( scientists [ i ] ) = 1 then
9169: LD_VAR 0 23
9173: PUSH
9174: LD_VAR 0 14
9178: ARRAY
9179: PPUSH
9180: CALL_OW 110
9184: PUSH
9185: LD_INT 1
9187: EQUAL
9188: IFFALSE 9305
// begin if GetTaskList ( scientists [ i ] ) then
9190: LD_VAR 0 23
9194: PUSH
9195: LD_VAR 0 14
9199: ARRAY
9200: PPUSH
9201: CALL_OW 437
9205: IFFALSE 9253
// if GetTaskList ( scientists [ i ] ) [ 1 ] [ 1 ] = e then
9207: LD_VAR 0 23
9211: PUSH
9212: LD_VAR 0 14
9216: ARRAY
9217: PPUSH
9218: CALL_OW 437
9222: PUSH
9223: LD_INT 1
9225: ARRAY
9226: PUSH
9227: LD_INT 1
9229: ARRAY
9230: PUSH
9231: LD_STRING e
9233: EQUAL
9234: IFFALSE 9253
// SetTaskList ( scientists [ i ] , [ ] ) ;
9236: LD_VAR 0 23
9240: PUSH
9241: LD_VAR 0 14
9245: ARRAY
9246: PPUSH
9247: EMPTY
9248: PPUSH
9249: CALL_OW 446
// if IsInUnit ( scientists [ i ] ) then
9253: LD_VAR 0 23
9257: PUSH
9258: LD_VAR 0 14
9262: ARRAY
9263: PPUSH
9264: CALL_OW 310
9268: IFFALSE 9285
// ComExitBuilding ( scientists [ i ] ) ;
9270: LD_VAR 0 23
9274: PUSH
9275: LD_VAR 0 14
9279: ARRAY
9280: PPUSH
9281: CALL_OW 122
// AddComHeal ( scientists [ i ] , damageUnit ) ;
9285: LD_VAR 0 23
9289: PUSH
9290: LD_VAR 0 14
9294: ARRAY
9295: PPUSH
9296: LD_VAR 0 48
9300: PPUSH
9301: CALL_OW 188
// end ;
9305: GO 9166
9307: POP
9308: POP
// end ;
9309: GO 8939
9311: POP
9312: POP
// end else
9313: GO 9457
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
9315: LD_VAR 0 23
9319: PUSH
9320: LD_VAR 0 23
9324: PPUSH
9325: LD_INT 56
9327: PUSH
9328: EMPTY
9329: LIST
9330: PPUSH
9331: CALL_OW 72
9335: AND
9336: PUSH
9337: LD_VAR 0 41
9341: AND
9342: IFFALSE 9457
// for i := 1 to scientists do
9344: LD_ADDR_VAR 0 14
9348: PUSH
9349: DOUBLE
9350: LD_INT 1
9352: DEC
9353: ST_TO_ADDR
9354: LD_VAR 0 23
9358: PUSH
9359: FOR_TO
9360: IFFALSE 9455
// if GetTag ( scientists [ i ] ) = 1 and not HasTask ( scientists [ i ] ) and not IsInUnit ( scientists [ i ] ) then
9362: LD_VAR 0 23
9366: PUSH
9367: LD_VAR 0 14
9371: ARRAY
9372: PPUSH
9373: CALL_OW 110
9377: PUSH
9378: LD_INT 1
9380: EQUAL
9381: PUSH
9382: LD_VAR 0 23
9386: PUSH
9387: LD_VAR 0 14
9391: ARRAY
9392: PPUSH
9393: CALL_OW 314
9397: NOT
9398: AND
9399: PUSH
9400: LD_VAR 0 23
9404: PUSH
9405: LD_VAR 0 14
9409: ARRAY
9410: PPUSH
9411: CALL_OW 310
9415: NOT
9416: AND
9417: IFFALSE 9453
// ComEnterUnit ( scientists [ i ] , lab [ rand ( 1 , lab ) ] ) ;
9419: LD_VAR 0 23
9423: PUSH
9424: LD_VAR 0 14
9428: ARRAY
9429: PPUSH
9430: LD_VAR 0 41
9434: PUSH
9435: LD_INT 1
9437: PPUSH
9438: LD_VAR 0 41
9442: PPUSH
9443: CALL_OW 12
9447: ARRAY
9448: PPUSH
9449: CALL_OW 120
9453: GO 9359
9455: POP
9456: POP
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , us_bulldozer ] ] ) then
9457: LD_INT 22
9459: PUSH
9460: LD_VAR 0 1
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: LD_INT 34
9471: PUSH
9472: LD_INT 14
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: PPUSH
9483: CALL_OW 69
9487: NOT
9488: IFFALSE 9515
// AddComConstruct ( factory [ 1 ] , us_heavy_tracked , engine_combustion , control_remote , us_bulldozer ) ;
9490: LD_VAR 0 40
9494: PUSH
9495: LD_INT 1
9497: ARRAY
9498: PPUSH
9499: LD_INT 4
9501: PPUSH
9502: LD_INT 1
9504: PPUSH
9505: LD_INT 2
9507: PPUSH
9508: LD_INT 14
9510: PPUSH
9511: CALL_OW 185
// if vehicles < vehiclesAmount and factory then
9515: LD_VAR 0 25
9519: PUSH
9520: LD_VAR 0 8
9524: LESS
9525: PUSH
9526: LD_VAR 0 40
9530: AND
9531: IFFALSE 9779
// begin tmp = vehiclesAmount - vehicles ;
9533: LD_ADDR_VAR 0 16
9537: PUSH
9538: LD_VAR 0 8
9542: PUSH
9543: LD_VAR 0 25
9547: MINUS
9548: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
9549: LD_ADDR_VAR 0 32
9553: PUSH
9554: LD_VAR 0 1
9558: PPUSH
9559: LD_VAR 0 2
9563: PPUSH
9564: CALL 14386 0 2
9568: ST_TO_ADDR
// for i := 1 to tmp do
9569: LD_ADDR_VAR 0 14
9573: PUSH
9574: DOUBLE
9575: LD_INT 1
9577: DEC
9578: ST_TO_ADDR
9579: LD_VAR 0 16
9583: PUSH
9584: FOR_TO
9585: IFFALSE 9775
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
9587: LD_ADDR_VAR 0 16
9591: PUSH
9592: LD_VAR 0 32
9596: PUSH
9597: LD_INT 1
9599: PPUSH
9600: LD_VAR 0 32
9604: PPUSH
9605: CALL_OW 12
9609: ARRAY
9610: ST_TO_ADDR
// if tmp in [ 6 , 34 , 14 , 71 , 47 ] then
9611: LD_VAR 0 16
9615: PUSH
9616: LD_INT 6
9618: PUSH
9619: LD_INT 34
9621: PUSH
9622: LD_INT 14
9624: PUSH
9625: LD_INT 71
9627: PUSH
9628: LD_INT 47
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: IN
9638: IFFALSE 9676
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
9640: LD_ADDR_VAR 0 33
9644: PUSH
9645: LD_INT 4
9647: PUSH
9648: EMPTY
9649: LIST
9650: PUSH
9651: LD_INT 14
9653: PUSH
9654: EMPTY
9655: LIST
9656: PUSH
9657: LD_INT 24
9659: PUSH
9660: EMPTY
9661: LIST
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: LIST
9667: PUSH
9668: LD_VAR 0 2
9672: ARRAY
9673: ST_TO_ADDR
9674: GO 9730
// chassis = [ [ us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
9676: LD_ADDR_VAR 0 33
9680: PUSH
9681: LD_INT 3
9683: PUSH
9684: LD_INT 4
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: LD_INT 13
9693: PUSH
9694: LD_INT 14
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: PUSH
9701: LD_INT 21
9703: PUSH
9704: LD_INT 23
9706: PUSH
9707: LD_INT 24
9709: PUSH
9710: LD_INT 22
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: LIST
9723: PUSH
9724: LD_VAR 0 2
9728: ARRAY
9729: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_remote , tmp ) ;
9730: LD_VAR 0 40
9734: PUSH
9735: LD_INT 1
9737: ARRAY
9738: PPUSH
9739: LD_VAR 0 33
9743: PUSH
9744: LD_INT 1
9746: PPUSH
9747: LD_VAR 0 33
9751: PPUSH
9752: CALL_OW 12
9756: ARRAY
9757: PPUSH
9758: LD_INT 1
9760: PPUSH
9761: LD_INT 2
9763: PPUSH
9764: LD_VAR 0 16
9768: PPUSH
9769: CALL_OW 185
// end ;
9773: GO 9584
9775: POP
9776: POP
// end else
9777: GO 9792
// ComCancel ( factory [ 1 ] ) ;
9779: LD_VAR 0 40
9783: PUSH
9784: LD_INT 1
9786: ARRAY
9787: PPUSH
9788: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ] ] ) do
9792: LD_ADDR_VAR 0 24
9796: PUSH
9797: LD_VAR 0 4
9801: PPUSH
9802: LD_INT 22
9804: PUSH
9805: LD_VAR 0 1
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: LD_INT 21
9816: PUSH
9817: LD_INT 2
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: PUSH
9824: LD_INT 50
9826: PUSH
9827: EMPTY
9828: LIST
9829: PUSH
9830: LD_INT 3
9832: PUSH
9833: LD_INT 2
9835: PUSH
9836: LD_INT 34
9838: PUSH
9839: LD_INT 12
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PUSH
9846: LD_INT 34
9848: PUSH
9849: LD_INT 51
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: PUSH
9856: LD_INT 34
9858: PUSH
9859: LD_INT 32
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: PUSH
9866: LD_INT 34
9868: PUSH
9869: LD_INT 31
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: PUSH
9887: EMPTY
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: PPUSH
9893: CALL_OW 70
9897: PUSH
9898: FOR_IN
9899: IFFALSE 10054
// begin vehicleInList = false ;
9901: LD_ADDR_VAR 0 26
9905: PUSH
9906: LD_INT 0
9908: ST_TO_ADDR
// for i := 1 to vehicles do
9909: LD_ADDR_VAR 0 14
9913: PUSH
9914: DOUBLE
9915: LD_INT 1
9917: DEC
9918: ST_TO_ADDR
9919: LD_VAR 0 25
9923: PUSH
9924: FOR_TO
9925: IFFALSE 9955
// if vehicle in vehicles [ i ] then
9927: LD_VAR 0 24
9931: PUSH
9932: LD_VAR 0 25
9936: PUSH
9937: LD_VAR 0 14
9941: ARRAY
9942: IN
9943: IFFALSE 9953
// vehicleInList = true ;
9945: LD_ADDR_VAR 0 26
9949: PUSH
9950: LD_INT 1
9952: ST_TO_ADDR
9953: GO 9924
9955: POP
9956: POP
// if not vehicleInList then
9957: LD_VAR 0 26
9961: NOT
9962: IFFALSE 10052
// begin if vehicles < vehiclesToAttackAmount then
9964: LD_VAR 0 25
9968: PUSH
9969: LD_VAR 0 10
9973: LESS
9974: IFFALSE 10015
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] ] ] else
9976: LD_ADDR_VAR 0 25
9980: PUSH
9981: LD_VAR 0 25
9985: PUSH
9986: LD_VAR 0 24
9990: PUSH
9991: LD_VAR 0 24
9995: PPUSH
9996: CALL_OW 313
10000: PUSH
10001: LD_INT 1
10003: ARRAY
10004: PUSH
10005: EMPTY
10006: LIST
10007: LIST
10008: PUSH
10009: EMPTY
10010: LIST
10011: ADD
10012: ST_TO_ADDR
10013: GO 10052
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] ] ] ;
10015: LD_ADDR_VAR 0 25
10019: PUSH
10020: LD_VAR 0 25
10024: PUSH
10025: LD_VAR 0 24
10029: PUSH
10030: LD_VAR 0 24
10034: PPUSH
10035: CALL_OW 313
10039: PUSH
10040: LD_INT 1
10042: ARRAY
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: EMPTY
10049: LIST
10050: ADD
10051: ST_TO_ADDR
// end ; end ;
10052: GO 9898
10054: POP
10055: POP
// for enemyUnits in FilterAllUnits ( [ f_enemy , side ] ) do
10056: LD_ADDR_VAR 0 50
10060: PUSH
10061: LD_INT 81
10063: PUSH
10064: LD_VAR 0 1
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: PPUSH
10073: CALL_OW 69
10077: PUSH
10078: FOR_IN
10079: IFFALSE 10597
// begin offensiveUnits = [ ] ;
10081: LD_ADDR_VAR 0 27
10085: PUSH
10086: EMPTY
10087: ST_TO_ADDR
// offensiveReadyCounter = 0 ;
10088: LD_ADDR_VAR 0 28
10092: PUSH
10093: LD_INT 0
10095: ST_TO_ADDR
// for i := 1 to vehicles do
10096: LD_ADDR_VAR 0 14
10100: PUSH
10101: DOUBLE
10102: LD_INT 1
10104: DEC
10105: ST_TO_ADDR
10106: LD_VAR 0 25
10110: PUSH
10111: FOR_TO
10112: IFFALSE 10320
// if GetTag ( vehicles [ i ] [ 1 ] ) = 2 then
10114: LD_VAR 0 25
10118: PUSH
10119: LD_VAR 0 14
10123: ARRAY
10124: PUSH
10125: LD_INT 1
10127: ARRAY
10128: PPUSH
10129: CALL_OW 110
10133: PUSH
10134: LD_INT 2
10136: EQUAL
10137: IFFALSE 10318
// begin if GetLives ( vehicles [ i ] [ 1 ] ) > 650 then
10139: LD_VAR 0 25
10143: PUSH
10144: LD_VAR 0 14
10148: ARRAY
10149: PUSH
10150: LD_INT 1
10152: ARRAY
10153: PPUSH
10154: CALL_OW 256
10158: PUSH
10159: LD_INT 650
10161: GREATER
10162: IFFALSE 10178
// offensiveReadyCounter = offensiveReadyCounter + 1 ;
10164: LD_ADDR_VAR 0 28
10168: PUSH
10169: LD_VAR 0 28
10173: PUSH
10174: LD_INT 1
10176: PLUS
10177: ST_TO_ADDR
// if IsInArea ( vehicles [ i ] [ 1 ] , baseArea ) then
10178: LD_VAR 0 25
10182: PUSH
10183: LD_VAR 0 14
10187: ARRAY
10188: PUSH
10189: LD_INT 1
10191: ARRAY
10192: PPUSH
10193: LD_VAR 0 4
10197: PPUSH
10198: CALL_OW 308
10202: IFFALSE 10230
// offensiveUnits = offensiveUnits ^ vehicles [ i ] [ 1 ] ;
10204: LD_ADDR_VAR 0 27
10208: PUSH
10209: LD_VAR 0 27
10213: PUSH
10214: LD_VAR 0 25
10218: PUSH
10219: LD_VAR 0 14
10223: ARRAY
10224: PUSH
10225: LD_INT 1
10227: ARRAY
10228: ADD
10229: ST_TO_ADDR
// for j = 1 to personel do
10230: LD_ADDR_VAR 0 15
10234: PUSH
10235: DOUBLE
10236: LD_INT 1
10238: DEC
10239: ST_TO_ADDR
10240: LD_VAR 0 19
10244: PUSH
10245: FOR_TO
10246: IFFALSE 10316
// if personel [ j ] = vehicles [ i ] [ 2 ] then
10248: LD_VAR 0 19
10252: PUSH
10253: LD_VAR 0 15
10257: ARRAY
10258: PUSH
10259: LD_VAR 0 25
10263: PUSH
10264: LD_VAR 0 14
10268: ARRAY
10269: PUSH
10270: LD_INT 2
10272: ARRAY
10273: EQUAL
10274: IFFALSE 10314
// personel = ReplaceIn ( personel , [ j , personel [ j ] ] , 3 ) ;
10276: LD_ADDR_VAR 0 19
10280: PUSH
10281: LD_VAR 0 19
10285: PPUSH
10286: LD_VAR 0 15
10290: PUSH
10291: LD_VAR 0 19
10295: PUSH
10296: LD_VAR 0 15
10300: ARRAY
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: PPUSH
10306: LD_INT 3
10308: PPUSH
10309: CALL 46284 0 3
10313: ST_TO_ADDR
10314: GO 10245
10316: POP
10317: POP
// end ;
10318: GO 10111
10320: POP
10321: POP
// if vehiclesToAttackAmount <= offensiveReadyCounter then
10322: LD_VAR 0 10
10326: PUSH
10327: LD_VAR 0 28
10331: LESSEQUAL
10332: IFFALSE 10595
// begin for i := 1 to offensiveUnits do
10334: LD_ADDR_VAR 0 14
10338: PUSH
10339: DOUBLE
10340: LD_INT 1
10342: DEC
10343: ST_TO_ADDR
10344: LD_VAR 0 27
10348: PUSH
10349: FOR_TO
10350: IFFALSE 10593
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , offensiveUnits [ i ] ) ;
10352: LD_ADDR_VAR 0 29
10356: PUSH
10357: LD_INT 81
10359: PUSH
10360: LD_INT 1
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PPUSH
10367: CALL_OW 69
10371: PPUSH
10372: LD_VAR 0 27
10376: PUSH
10377: LD_VAR 0 14
10381: ARRAY
10382: PPUSH
10383: CALL_OW 74
10387: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , offensiveUnits [ i ] ) ;
10388: LD_ADDR_VAR 0 30
10392: PUSH
10393: LD_INT 81
10395: PUSH
10396: LD_INT 1
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: PUSH
10403: LD_INT 2
10405: PUSH
10406: LD_INT 59
10408: PUSH
10409: EMPTY
10410: LIST
10411: PUSH
10412: LD_INT 21
10414: PUSH
10415: LD_INT 1
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: LD_INT 21
10424: PUSH
10425: LD_INT 2
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PUSH
10442: EMPTY
10443: LIST
10444: PPUSH
10445: CALL_OW 69
10449: PPUSH
10450: LD_VAR 0 27
10454: PUSH
10455: LD_VAR 0 14
10459: ARRAY
10460: PPUSH
10461: CALL_OW 74
10465: ST_TO_ADDR
// if GetDistUnits ( offensiveUnits [ i ] , target1 ) + 9 < GetDistUnits ( offensiveUnits [ i ] , target2 ) then
10466: LD_VAR 0 27
10470: PUSH
10471: LD_VAR 0 14
10475: ARRAY
10476: PPUSH
10477: LD_VAR 0 29
10481: PPUSH
10482: CALL_OW 296
10486: PUSH
10487: LD_INT 9
10489: PLUS
10490: PUSH
10491: LD_VAR 0 27
10495: PUSH
10496: LD_VAR 0 14
10500: ARRAY
10501: PPUSH
10502: LD_VAR 0 30
10506: PPUSH
10507: CALL_OW 296
10511: LESS
10512: IFFALSE 10536
// ComAttackUnit ( offensiveUnits [ i ] , target1 ) else
10514: LD_VAR 0 27
10518: PUSH
10519: LD_VAR 0 14
10523: ARRAY
10524: PPUSH
10525: LD_VAR 0 29
10529: PPUSH
10530: CALL_OW 115
10534: GO 10556
// ComAttackUnit ( offensiveUnits [ i ] , target2 ) ;
10536: LD_VAR 0 27
10540: PUSH
10541: LD_VAR 0 14
10545: ARRAY
10546: PPUSH
10547: LD_VAR 0 30
10551: PPUSH
10552: CALL_OW 115
// AddComAgressiveMove ( offensiveUnits [ i ] , GetX ( enemyUnits ) , GetY ( enemyUnits ) ) ;
10556: LD_VAR 0 27
10560: PUSH
10561: LD_VAR 0 14
10565: ARRAY
10566: PPUSH
10567: LD_VAR 0 50
10571: PPUSH
10572: CALL_OW 250
10576: PPUSH
10577: LD_VAR 0 50
10581: PPUSH
10582: CALL_OW 251
10586: PPUSH
10587: CALL_OW 174
// end ;
10591: GO 10349
10593: POP
10594: POP
// end ; end ;
10595: GO 10078
10597: POP
10598: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
10599: LD_ADDR_VAR 0 50
10603: PUSH
10604: LD_VAR 0 7
10608: PPUSH
10609: LD_INT 81
10611: PUSH
10612: LD_VAR 0 1
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PPUSH
10621: CALL_OW 70
10625: PUSH
10626: FOR_IN
10627: IFFALSE 10855
// begin defenceUnits = [ ] ;
10629: LD_ADDR_VAR 0 31
10633: PUSH
10634: EMPTY
10635: ST_TO_ADDR
// for i := 1 to personel do
10636: LD_ADDR_VAR 0 14
10640: PUSH
10641: DOUBLE
10642: LD_INT 1
10644: DEC
10645: ST_TO_ADDR
10646: LD_VAR 0 19
10650: PUSH
10651: FOR_TO
10652: IFFALSE 10699
// if GetTag ( personel [ i ] ) = 3 then
10654: LD_VAR 0 19
10658: PUSH
10659: LD_VAR 0 14
10663: ARRAY
10664: PPUSH
10665: CALL_OW 110
10669: PUSH
10670: LD_INT 3
10672: EQUAL
10673: IFFALSE 10697
// defenceUnits = defenceUnits ^ personel [ i ] ;
10675: LD_ADDR_VAR 0 31
10679: PUSH
10680: LD_VAR 0 31
10684: PUSH
10685: LD_VAR 0 19
10689: PUSH
10690: LD_VAR 0 14
10694: ARRAY
10695: ADD
10696: ST_TO_ADDR
10697: GO 10651
10699: POP
10700: POP
// for i := 1 to vehicles do
10701: LD_ADDR_VAR 0 14
10705: PUSH
10706: DOUBLE
10707: LD_INT 1
10709: DEC
10710: ST_TO_ADDR
10711: LD_VAR 0 25
10715: PUSH
10716: FOR_TO
10717: IFFALSE 10772
// if GetTag ( vehicles [ i ] [ 1 ] ) = 3 then
10719: LD_VAR 0 25
10723: PUSH
10724: LD_VAR 0 14
10728: ARRAY
10729: PUSH
10730: LD_INT 1
10732: ARRAY
10733: PPUSH
10734: CALL_OW 110
10738: PUSH
10739: LD_INT 3
10741: EQUAL
10742: IFFALSE 10770
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
10744: LD_ADDR_VAR 0 31
10748: PUSH
10749: LD_VAR 0 31
10753: PUSH
10754: LD_VAR 0 25
10758: PUSH
10759: LD_VAR 0 14
10763: ARRAY
10764: PUSH
10765: LD_INT 1
10767: ARRAY
10768: ADD
10769: ST_TO_ADDR
10770: GO 10716
10772: POP
10773: POP
// ComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
10774: LD_VAR 0 31
10778: PPUSH
10779: LD_INT 3
10781: PUSH
10782: LD_INT 60
10784: PUSH
10785: EMPTY
10786: LIST
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PPUSH
10792: CALL_OW 72
10796: PPUSH
10797: LD_VAR 0 50
10801: PPUSH
10802: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , GetX ( enemyUnits ) , GetY ( enemyUnits ) ) ;
10806: LD_VAR 0 31
10810: PPUSH
10811: LD_INT 3
10813: PUSH
10814: LD_INT 60
10816: PUSH
10817: EMPTY
10818: LIST
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: PPUSH
10824: CALL_OW 72
10828: PPUSH
10829: LD_VAR 0 50
10833: PPUSH
10834: CALL_OW 250
10838: PPUSH
10839: LD_VAR 0 50
10843: PPUSH
10844: CALL_OW 251
10848: PPUSH
10849: CALL_OW 174
// end ;
10853: GO 10626
10855: POP
10856: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
10857: LD_ADDR_VAR 0 45
10861: PUSH
10862: LD_INT 22
10864: PUSH
10865: LD_VAR 0 1
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: PUSH
10874: LD_INT 2
10876: PUSH
10877: LD_INT 30
10879: PUSH
10880: LD_INT 31
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PUSH
10887: LD_INT 30
10889: PUSH
10890: LD_INT 32
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: PUSH
10897: LD_INT 30
10899: PUSH
10900: LD_INT 33
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: PUSH
10907: LD_INT 30
10909: PUSH
10910: LD_INT 4
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 30
10919: PUSH
10920: LD_INT 5
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: PPUSH
10939: CALL_OW 69
10943: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
10944: LD_ADDR_VAR 0 46
10948: PUSH
10949: LD_INT 81
10951: PUSH
10952: LD_VAR 0 1
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: PUSH
10961: LD_INT 21
10963: PUSH
10964: LD_INT 3
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 58
10973: PUSH
10974: EMPTY
10975: LIST
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: LIST
10981: PPUSH
10982: CALL_OW 69
10986: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
10987: LD_VAR 0 45
10991: PUSH
10992: LD_VAR 0 46
10996: AND
10997: IFFALSE 11067
// for i in attackBuildings do
10999: LD_ADDR_VAR 0 14
11003: PUSH
11004: LD_VAR 0 45
11008: PUSH
11009: FOR_IN
11010: IFFALSE 11065
// for j in enemyBuildings do
11012: LD_ADDR_VAR 0 15
11016: PUSH
11017: LD_VAR 0 46
11021: PUSH
11022: FOR_IN
11023: IFFALSE 11061
// if GetDistUnits ( i , j ) < 12 then
11025: LD_VAR 0 14
11029: PPUSH
11030: LD_VAR 0 15
11034: PPUSH
11035: CALL_OW 296
11039: PUSH
11040: LD_INT 12
11042: LESS
11043: IFFALSE 11059
// ComAttackUnit ( i , j ) ;
11045: LD_VAR 0 14
11049: PPUSH
11050: LD_VAR 0 15
11054: PPUSH
11055: CALL_OW 115
11059: GO 11022
11061: POP
11062: POP
11063: GO 11009
11065: POP
11066: POP
// if canRebuild then
11067: LD_VAR 0 12
11071: IFFALSE 11740
// begin tmp = false ;
11073: LD_ADDR_VAR 0 16
11077: PUSH
11078: LD_INT 0
11080: ST_TO_ADDR
// unit = false ;
11081: LD_ADDR_VAR 0 18
11085: PUSH
11086: LD_INT 0
11088: ST_TO_ADDR
// for destroyedBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 250 ] ] ] ) do
11089: LD_ADDR_VAR 0 36
11093: PUSH
11094: LD_VAR 0 4
11098: PPUSH
11099: LD_INT 22
11101: PUSH
11102: LD_VAR 0 1
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: PUSH
11111: LD_INT 21
11113: PUSH
11114: LD_INT 3
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PUSH
11121: LD_INT 3
11123: PUSH
11124: LD_INT 24
11126: PUSH
11127: LD_INT 250
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: LIST
11142: PPUSH
11143: CALL_OW 70
11147: PUSH
11148: FOR_IN
11149: IFFALSE 11251
// begin unit = destroyedBuilding ;
11151: LD_ADDR_VAR 0 18
11155: PUSH
11156: LD_VAR 0 36
11160: ST_TO_ADDR
// for i := 1 to destroyedBuildings / 4 do
11161: LD_ADDR_VAR 0 14
11165: PUSH
11166: DOUBLE
11167: LD_INT 1
11169: DEC
11170: ST_TO_ADDR
11171: LD_VAR 0 35
11175: PUSH
11176: LD_INT 4
11178: DIVREAL
11179: PUSH
11180: FOR_TO
11181: IFFALSE 11247
// if destroyedBuildings [ i + 1 ] = GetX ( destroyedBuilding ) and destroyedBuildings [ i + 2 ] = GetY ( destroyedBuilding ) then
11183: LD_VAR 0 35
11187: PUSH
11188: LD_VAR 0 14
11192: PUSH
11193: LD_INT 1
11195: PLUS
11196: ARRAY
11197: PUSH
11198: LD_VAR 0 36
11202: PPUSH
11203: CALL_OW 250
11207: EQUAL
11208: PUSH
11209: LD_VAR 0 35
11213: PUSH
11214: LD_VAR 0 14
11218: PUSH
11219: LD_INT 2
11221: PLUS
11222: ARRAY
11223: PUSH
11224: LD_VAR 0 36
11228: PPUSH
11229: CALL_OW 251
11233: EQUAL
11234: AND
11235: IFFALSE 11245
// tmp = true ;
11237: LD_ADDR_VAR 0 16
11241: PUSH
11242: LD_INT 1
11244: ST_TO_ADDR
11245: GO 11180
11247: POP
11248: POP
// end ;
11249: GO 11148
11251: POP
11252: POP
// if not tmp and unit then
11253: LD_VAR 0 16
11257: NOT
11258: PUSH
11259: LD_VAR 0 18
11263: AND
11264: IFFALSE 11524
// begin if GetBType ( unit ) = 1 then
11266: LD_VAR 0 18
11270: PPUSH
11271: CALL_OW 266
11275: PUSH
11276: LD_INT 1
11278: EQUAL
11279: IFFALSE 11333
// destroyedBuildings = destroyedBuildings ^ [ 0 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11281: LD_ADDR_VAR 0 35
11285: PUSH
11286: LD_VAR 0 35
11290: PUSH
11291: LD_INT 0
11293: PUSH
11294: LD_VAR 0 18
11298: PPUSH
11299: CALL_OW 250
11303: PUSH
11304: LD_VAR 0 18
11308: PPUSH
11309: CALL_OW 251
11313: PUSH
11314: LD_VAR 0 18
11318: PPUSH
11319: CALL_OW 254
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: ADD
11330: ST_TO_ADDR
11331: GO 11524
// if GetBType ( unit ) = 3 then
11333: LD_VAR 0 18
11337: PPUSH
11338: CALL_OW 266
11342: PUSH
11343: LD_INT 3
11345: EQUAL
11346: IFFALSE 11400
// destroyedBuildings = destroyedBuildings ^ [ 2 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11348: LD_ADDR_VAR 0 35
11352: PUSH
11353: LD_VAR 0 35
11357: PUSH
11358: LD_INT 2
11360: PUSH
11361: LD_VAR 0 18
11365: PPUSH
11366: CALL_OW 250
11370: PUSH
11371: LD_VAR 0 18
11375: PPUSH
11376: CALL_OW 251
11380: PUSH
11381: LD_VAR 0 18
11385: PPUSH
11386: CALL_OW 254
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: ADD
11397: ST_TO_ADDR
11398: GO 11524
// if GetBType ( unit ) = 5 then
11400: LD_VAR 0 18
11404: PPUSH
11405: CALL_OW 266
11409: PUSH
11410: LD_INT 5
11412: EQUAL
11413: IFFALSE 11467
// destroyedBuildings = destroyedBuildings ^ [ 4 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11415: LD_ADDR_VAR 0 35
11419: PUSH
11420: LD_VAR 0 35
11424: PUSH
11425: LD_INT 4
11427: PUSH
11428: LD_VAR 0 18
11432: PPUSH
11433: CALL_OW 250
11437: PUSH
11438: LD_VAR 0 18
11442: PPUSH
11443: CALL_OW 251
11447: PUSH
11448: LD_VAR 0 18
11452: PPUSH
11453: CALL_OW 254
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: ADD
11464: ST_TO_ADDR
11465: GO 11524
// destroyedBuildings = destroyedBuildings ^ [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ;
11467: LD_ADDR_VAR 0 35
11471: PUSH
11472: LD_VAR 0 35
11476: PUSH
11477: LD_VAR 0 18
11481: PPUSH
11482: CALL_OW 266
11486: PUSH
11487: LD_VAR 0 18
11491: PPUSH
11492: CALL_OW 250
11496: PUSH
11497: LD_VAR 0 18
11501: PPUSH
11502: CALL_OW 251
11506: PUSH
11507: LD_VAR 0 18
11511: PPUSH
11512: CALL_OW 254
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: ADD
11523: ST_TO_ADDR
// end ; for constructedBuilding in constructedBuildings do
11524: LD_ADDR_VAR 0 37
11528: PUSH
11529: LD_VAR 0 38
11533: PUSH
11534: FOR_IN
11535: IFFALSE 11738
// for i := 1 to destroyedBuildings / 4 do
11537: LD_ADDR_VAR 0 14
11541: PUSH
11542: DOUBLE
11543: LD_INT 1
11545: DEC
11546: ST_TO_ADDR
11547: LD_VAR 0 35
11551: PUSH
11552: LD_INT 4
11554: DIVREAL
11555: PUSH
11556: FOR_TO
11557: IFFALSE 11734
// if destroyedBuildings [ i + 1 ] = GetX ( constructedBuilding ) and destroyedBuildings [ i + 2 ] = GetY ( constructedBuilding ) and IsOK ( constructedBuilding ) then
11559: LD_VAR 0 35
11563: PUSH
11564: LD_VAR 0 14
11568: PUSH
11569: LD_INT 1
11571: PLUS
11572: ARRAY
11573: PUSH
11574: LD_VAR 0 37
11578: PPUSH
11579: CALL_OW 250
11583: EQUAL
11584: PUSH
11585: LD_VAR 0 35
11589: PUSH
11590: LD_VAR 0 14
11594: PUSH
11595: LD_INT 2
11597: PLUS
11598: ARRAY
11599: PUSH
11600: LD_VAR 0 37
11604: PPUSH
11605: CALL_OW 251
11609: EQUAL
11610: AND
11611: PUSH
11612: LD_VAR 0 37
11616: PPUSH
11617: CALL_OW 302
11621: AND
11622: IFFALSE 11732
// begin destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11624: LD_ADDR_VAR 0 35
11628: PUSH
11629: LD_VAR 0 35
11633: PPUSH
11634: LD_INT 1
11636: PPUSH
11637: CALL_OW 3
11641: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11642: LD_ADDR_VAR 0 35
11646: PUSH
11647: LD_VAR 0 35
11651: PPUSH
11652: LD_INT 1
11654: PPUSH
11655: CALL_OW 3
11659: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11660: LD_ADDR_VAR 0 35
11664: PUSH
11665: LD_VAR 0 35
11669: PPUSH
11670: LD_INT 1
11672: PPUSH
11673: CALL_OW 3
11677: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11678: LD_ADDR_VAR 0 35
11682: PUSH
11683: LD_VAR 0 35
11687: PPUSH
11688: LD_INT 1
11690: PPUSH
11691: CALL_OW 3
11695: ST_TO_ADDR
// if GetType ( constructedBuilding ) in [ b_bunker , b_turret ] then
11696: LD_VAR 0 37
11700: PPUSH
11701: CALL_OW 247
11705: PUSH
11706: LD_INT 32
11708: PUSH
11709: LD_INT 33
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: IN
11716: IFFALSE 11732
// AddComPlaceWeapon ( constructedBuilding , weapons ) ;
11718: LD_VAR 0 37
11722: PPUSH
11723: LD_VAR 0 32
11727: PPUSH
11728: CALL_OW 208
// end ;
11732: GO 11556
11734: POP
11735: POP
11736: GO 11534
11738: POP
11739: POP
// end ; wait ( 0 0$01 ) ;
11740: LD_INT 35
11742: PPUSH
11743: CALL_OW 67
// until not personel ;
11747: LD_VAR 0 19
11751: NOT
11752: IFFALSE 5445
// end ; end_of_file
11754: LD_VAR 0 13
11758: RET
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
11759: LD_INT 0
11761: PPUSH
11762: PPUSH
// if debugMode then
11763: LD_EXP 33
11767: IFFALSE 11784
// unit := NewCharacter ( ident ) ;
11769: LD_ADDR_VAR 0 5
11773: PUSH
11774: LD_VAR 0 1
11778: PPUSH
11779: CALL_OW 25
11783: ST_TO_ADDR
// if exist_mode and not debugMode then
11784: LD_VAR 0 2
11788: PUSH
11789: LD_EXP 33
11793: NOT
11794: AND
11795: IFFALSE 11820
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
11797: LD_ADDR_VAR 0 5
11801: PUSH
11802: LD_EXP 32
11806: PUSH
11807: LD_VAR 0 1
11811: STR
11812: PPUSH
11813: CALL_OW 34
11817: ST_TO_ADDR
11818: GO 11842
// if not debugMode then
11820: LD_EXP 33
11824: NOT
11825: IFFALSE 11842
// unit := NewCharacter ( ident ) ;
11827: LD_ADDR_VAR 0 5
11831: PUSH
11832: LD_VAR 0 1
11836: PPUSH
11837: CALL_OW 25
11841: ST_TO_ADDR
// if class then
11842: LD_VAR 0 3
11846: IFFALSE 11862
// SetClass ( unit , class ) ;
11848: LD_VAR 0 5
11852: PPUSH
11853: LD_VAR 0 3
11857: PPUSH
11858: CALL_OW 336
// result := unit ;
11862: LD_ADDR_VAR 0 4
11866: PUSH
11867: LD_VAR 0 5
11871: ST_TO_ADDR
// end ;
11872: LD_VAR 0 4
11876: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
11877: LD_INT 0
11879: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
11880: LD_VAR 0 1
11884: PPUSH
11885: CALL_OW 255
11889: PUSH
11890: LD_VAR 0 3
11894: EQUAL
11895: PUSH
11896: LD_VAR 0 1
11900: PPUSH
11901: CALL_OW 302
11905: AND
11906: IFFALSE 11928
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
11908: LD_VAR 0 1
11912: PPUSH
11913: LD_EXP 31
11917: PUSH
11918: LD_VAR 0 2
11922: STR
11923: PPUSH
11924: CALL_OW 38
// end ;
11928: LD_VAR 0 4
11932: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
11933: LD_INT 0
11935: PPUSH
11936: PPUSH
11937: PPUSH
// resultCharactersToSave = [ ] ;
11938: LD_ADDR_VAR 0 6
11942: PUSH
11943: EMPTY
11944: ST_TO_ADDR
// for unit in characters do
11945: LD_ADDR_VAR 0 5
11949: PUSH
11950: LD_VAR 0 1
11954: PUSH
11955: FOR_IN
11956: IFFALSE 12004
// if GetSide ( unit ) = side and IsOK ( unit ) then
11958: LD_VAR 0 5
11962: PPUSH
11963: CALL_OW 255
11967: PUSH
11968: LD_VAR 0 3
11972: EQUAL
11973: PUSH
11974: LD_VAR 0 5
11978: PPUSH
11979: CALL_OW 302
11983: AND
11984: IFFALSE 12002
// resultCharactersToSave = resultCharactersToSave ^ unit ;
11986: LD_ADDR_VAR 0 6
11990: PUSH
11991: LD_VAR 0 6
11995: PUSH
11996: LD_VAR 0 5
12000: ADD
12001: ST_TO_ADDR
12002: GO 11955
12004: POP
12005: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
12006: LD_VAR 0 6
12010: PPUSH
12011: LD_EXP 31
12015: PUSH
12016: LD_VAR 0 2
12020: STR
12021: PPUSH
12022: CALL_OW 38
// end ;
12026: LD_VAR 0 4
12030: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
12031: LD_INT 0
12033: PPUSH
12034: PPUSH
// for unit in units do
12035: LD_ADDR_VAR 0 5
12039: PUSH
12040: LD_VAR 0 1
12044: PUSH
12045: FOR_IN
12046: IFFALSE 12069
// PlaceUnitArea ( unit , area , spawnMode ) ;
12048: LD_VAR 0 5
12052: PPUSH
12053: LD_VAR 0 2
12057: PPUSH
12058: LD_VAR 0 3
12062: PPUSH
12063: CALL_OW 49
12067: GO 12045
12069: POP
12070: POP
// end ;
12071: LD_VAR 0 4
12075: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
12076: LD_INT 0
12078: PPUSH
12079: PPUSH
12080: PPUSH
12081: PPUSH
// units = characters ;
12082: LD_ADDR_VAR 0 9
12086: PUSH
12087: LD_VAR 0 1
12091: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod , Kirilenkova ] ;
12092: LD_ADDR_VAR 0 9
12096: PUSH
12097: LD_VAR 0 9
12101: PUSH
12102: LD_EXP 39
12106: PUSH
12107: LD_EXP 40
12111: PUSH
12112: LD_EXP 41
12116: PUSH
12117: LD_EXP 42
12121: PUSH
12122: LD_EXP 43
12126: PUSH
12127: LD_EXP 44
12131: PUSH
12132: LD_EXP 45
12136: PUSH
12137: LD_EXP 46
12141: PUSH
12142: LD_EXP 51
12146: PUSH
12147: LD_EXP 48
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: DIFF
12164: ST_TO_ADDR
// if not units and not canTalkHero then
12165: LD_VAR 0 9
12169: NOT
12170: PUSH
12171: LD_VAR 0 5
12175: NOT
12176: AND
12177: IFFALSE 12181
// exit ;
12179: GO 12354
// if not units then
12181: LD_VAR 0 9
12185: NOT
12186: IFFALSE 12207
// units = characters diff [ Burlak ] ;
12188: LD_ADDR_VAR 0 9
12192: PUSH
12193: LD_VAR 0 1
12197: PUSH
12198: LD_EXP 39
12202: PUSH
12203: EMPTY
12204: LIST
12205: DIFF
12206: ST_TO_ADDR
// if not units and canTalkHero then
12207: LD_VAR 0 9
12211: NOT
12212: PUSH
12213: LD_VAR 0 5
12217: AND
12218: IFFALSE 12222
// exit ;
12220: GO 12354
// speaker := units [ rand ( 1 , units ) ] ;
12222: LD_ADDR_VAR 0 8
12226: PUSH
12227: LD_VAR 0 9
12231: PUSH
12232: LD_INT 1
12234: PPUSH
12235: LD_VAR 0 9
12239: PPUSH
12240: CALL_OW 12
12244: ARRAY
12245: ST_TO_ADDR
// if radio then
12246: LD_VAR 0 4
12250: IFFALSE 12299
// begin if GetSex ( speaker ) = sex_male then
12252: LD_VAR 0 8
12256: PPUSH
12257: CALL_OW 258
12261: PUSH
12262: LD_INT 1
12264: EQUAL
12265: IFFALSE 12283
// SayRadio ( speaker , dialogMID ) else
12267: LD_VAR 0 8
12271: PPUSH
12272: LD_VAR 0 2
12276: PPUSH
12277: CALL_OW 94
12281: GO 12297
// SayRadio ( speaker , dialogFID ) ;
12283: LD_VAR 0 8
12287: PPUSH
12288: LD_VAR 0 3
12292: PPUSH
12293: CALL_OW 94
// end else
12297: GO 12344
// begin if GetSex ( speaker ) = sex_male then
12299: LD_VAR 0 8
12303: PPUSH
12304: CALL_OW 258
12308: PUSH
12309: LD_INT 1
12311: EQUAL
12312: IFFALSE 12330
// Say ( speaker , dialogMID ) else
12314: LD_VAR 0 8
12318: PPUSH
12319: LD_VAR 0 2
12323: PPUSH
12324: CALL_OW 88
12328: GO 12344
// Say ( speaker , dialogFID ) ;
12330: LD_VAR 0 8
12334: PPUSH
12335: LD_VAR 0 3
12339: PPUSH
12340: CALL_OW 88
// end ; result := speaker ;
12344: LD_ADDR_VAR 0 6
12348: PUSH
12349: LD_VAR 0 8
12353: ST_TO_ADDR
// end ;
12354: LD_VAR 0 6
12358: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
12359: LD_INT 0
12361: PPUSH
12362: PPUSH
// dir := GetDir ( bunker ) - 3 ;
12363: LD_ADDR_VAR 0 4
12367: PUSH
12368: LD_VAR 0 2
12372: PPUSH
12373: CALL_OW 254
12377: PUSH
12378: LD_INT 3
12380: MINUS
12381: ST_TO_ADDR
// if dir < 0 then
12382: LD_VAR 0 4
12386: PUSH
12387: LD_INT 0
12389: LESS
12390: IFFALSE 12406
// dir := 6 + dir ;
12392: LD_ADDR_VAR 0 4
12396: PUSH
12397: LD_INT 6
12399: PUSH
12400: LD_VAR 0 4
12404: PLUS
12405: ST_TO_ADDR
// SetDir ( un , dir ) ;
12406: LD_VAR 0 1
12410: PPUSH
12411: LD_VAR 0 4
12415: PPUSH
12416: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
12420: LD_VAR 0 1
12424: PPUSH
12425: LD_VAR 0 2
12429: PPUSH
12430: CALL_OW 52
// result = un ;
12434: LD_ADDR_VAR 0 3
12438: PUSH
12439: LD_VAR 0 1
12443: ST_TO_ADDR
// end ;
12444: LD_VAR 0 3
12448: RET
// export function AddComCaptureBuilding ( engs , building ) ; var eng ; begin
12449: LD_INT 0
12451: PPUSH
12452: PPUSH
// for eng in engs do
12453: LD_ADDR_VAR 0 4
12457: PUSH
12458: LD_VAR 0 1
12462: PUSH
12463: FOR_IN
12464: IFFALSE 12581
// if GetClass ( eng ) = class_engineer and IsOK ( eng ) and building and not GetSide ( building ) = GetSide ( eng ) then
12466: LD_VAR 0 4
12470: PPUSH
12471: CALL_OW 257
12475: PUSH
12476: LD_INT 2
12478: EQUAL
12479: PUSH
12480: LD_VAR 0 4
12484: PPUSH
12485: CALL_OW 302
12489: AND
12490: PUSH
12491: LD_VAR 0 2
12495: AND
12496: PUSH
12497: LD_VAR 0 2
12501: PPUSH
12502: CALL_OW 255
12506: PUSH
12507: LD_VAR 0 4
12511: PPUSH
12512: CALL_OW 255
12516: EQUAL
12517: NOT
12518: AND
12519: IFFALSE 12579
// AddTaskList ( eng , [ [ e , GetX ( building ) , GetY ( building ) , building , 0 , 0 , 0 ] ] ) end ;
12521: LD_VAR 0 4
12525: PPUSH
12526: LD_STRING e
12528: PUSH
12529: LD_VAR 0 2
12533: PPUSH
12534: CALL_OW 250
12538: PUSH
12539: LD_VAR 0 2
12543: PPUSH
12544: CALL_OW 251
12548: PUSH
12549: LD_VAR 0 2
12553: PUSH
12554: LD_INT 0
12556: PUSH
12557: LD_INT 0
12559: PUSH
12560: LD_INT 0
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: PUSH
12572: EMPTY
12573: LIST
12574: PPUSH
12575: CALL_OW 447
12579: GO 12463
12581: POP
12582: POP
12583: LD_VAR 0 3
12587: RET
// export function Delete2D ( tab , firstIndex , secondIndex ) ; var i , list , tabPom ; begin
12588: LD_INT 0
12590: PPUSH
12591: PPUSH
12592: PPUSH
12593: PPUSH
// tabPom := Delete ( tab [ firstIndex ] , secondIndex ) ;
12594: LD_ADDR_VAR 0 7
12598: PUSH
12599: LD_VAR 0 1
12603: PUSH
12604: LD_VAR 0 2
12608: ARRAY
12609: PPUSH
12610: LD_VAR 0 3
12614: PPUSH
12615: CALL_OW 3
12619: ST_TO_ADDR
// tab := Replace ( tab , firstIndex , tabPom ) ;
12620: LD_ADDR_VAR 0 1
12624: PUSH
12625: LD_VAR 0 1
12629: PPUSH
12630: LD_VAR 0 2
12634: PPUSH
12635: LD_VAR 0 7
12639: PPUSH
12640: CALL_OW 1
12644: ST_TO_ADDR
// result := tab ;
12645: LD_ADDR_VAR 0 4
12649: PUSH
12650: LD_VAR 0 1
12654: ST_TO_ADDR
// end ;
12655: LD_VAR 0 4
12659: RET
// export function Nef_PrepareBase ( base_dep , area , name , skill , sources , nation , personel ) ; var i , j , d , b , f , x , un , base , side , buildings , tmp ; begin
12660: LD_INT 0
12662: PPUSH
12663: PPUSH
12664: PPUSH
12665: PPUSH
12666: PPUSH
12667: PPUSH
12668: PPUSH
12669: PPUSH
12670: PPUSH
12671: PPUSH
12672: PPUSH
12673: PPUSH
// result := [ ] ;
12674: LD_ADDR_VAR 0 8
12678: PUSH
12679: EMPTY
12680: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12681: LD_VAR 0 1
12685: PPUSH
12686: CALL_OW 266
12690: PUSH
12691: LD_INT 0
12693: PUSH
12694: LD_INT 1
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: IN
12701: NOT
12702: IFFALSE 12706
// exit ;
12704: GO 14381
// if name then
12706: LD_VAR 0 3
12710: IFFALSE 12726
// SetBName ( base_dep , name ) ;
12712: LD_VAR 0 1
12716: PPUSH
12717: LD_VAR 0 3
12721: PPUSH
12722: CALL_OW 500
// base := GetBase ( base_dep ) ;
12726: LD_ADDR_VAR 0 16
12730: PUSH
12731: LD_VAR 0 1
12735: PPUSH
12736: CALL_OW 274
12740: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12741: LD_ADDR_VAR 0 17
12745: PUSH
12746: LD_VAR 0 1
12750: PPUSH
12751: CALL_OW 255
12755: ST_TO_ADDR
// if sources then
12756: LD_VAR 0 5
12760: IFFALSE 12807
// for i = 1 to 3 do
12762: LD_ADDR_VAR 0 9
12766: PUSH
12767: DOUBLE
12768: LD_INT 1
12770: DEC
12771: ST_TO_ADDR
12772: LD_INT 3
12774: PUSH
12775: FOR_TO
12776: IFFALSE 12805
// AddResourceType ( base , i , sources [ i ] ) ;
12778: LD_VAR 0 16
12782: PPUSH
12783: LD_VAR 0 9
12787: PPUSH
12788: LD_VAR 0 5
12792: PUSH
12793: LD_VAR 0 9
12797: ARRAY
12798: PPUSH
12799: CALL_OW 276
12803: GO 12775
12805: POP
12806: POP
// buildings := GetBaseBuildings ( base , area ) ;
12807: LD_ADDR_VAR 0 18
12811: PUSH
12812: LD_VAR 0 16
12816: PPUSH
12817: LD_VAR 0 2
12821: PPUSH
12822: CALL 49026 0 2
12826: ST_TO_ADDR
// InitHc ;
12827: CALL_OW 19
// InitUc ;
12831: CALL_OW 18
// uc_side := side ;
12835: LD_ADDR_OWVAR 20
12839: PUSH
12840: LD_VAR 0 17
12844: ST_TO_ADDR
// uc_nation := nation ;
12845: LD_ADDR_OWVAR 21
12849: PUSH
12850: LD_VAR 0 6
12854: ST_TO_ADDR
// if buildings then
12855: LD_VAR 0 18
12859: IFFALSE 14240
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12861: LD_ADDR_VAR 0 19
12865: PUSH
12866: LD_VAR 0 18
12870: PPUSH
12871: LD_INT 2
12873: PUSH
12874: LD_INT 30
12876: PUSH
12877: LD_INT 29
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: PUSH
12884: LD_INT 30
12886: PUSH
12887: LD_INT 30
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: LIST
12898: PPUSH
12899: CALL_OW 72
12903: ST_TO_ADDR
// if tmp then
12904: LD_VAR 0 19
12908: IFFALSE 12956
// for i in tmp do
12910: LD_ADDR_VAR 0 9
12914: PUSH
12915: LD_VAR 0 19
12919: PUSH
12920: FOR_IN
12921: IFFALSE 12954
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12923: LD_VAR 0 9
12927: PPUSH
12928: CALL_OW 250
12932: PPUSH
12933: LD_VAR 0 9
12937: PPUSH
12938: CALL_OW 251
12942: PPUSH
12943: LD_VAR 0 17
12947: PPUSH
12948: CALL_OW 441
12952: GO 12920
12954: POP
12955: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12956: LD_VAR 0 18
12960: PPUSH
12961: LD_INT 2
12963: PUSH
12964: LD_INT 30
12966: PUSH
12967: LD_INT 31
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: PUSH
12974: LD_INT 30
12976: PUSH
12977: LD_INT 32
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: PUSH
12984: LD_INT 30
12986: PUSH
12987: LD_INT 33
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: PPUSH
13000: CALL_OW 72
13004: IFFALSE 13103
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13006: LD_ADDR_VAR 0 9
13010: PUSH
13011: LD_VAR 0 18
13015: PPUSH
13016: LD_INT 2
13018: PUSH
13019: LD_INT 30
13021: PUSH
13022: LD_INT 31
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: PUSH
13029: LD_INT 30
13031: PUSH
13032: LD_INT 32
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: PUSH
13039: LD_INT 30
13041: PUSH
13042: LD_INT 33
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: PPUSH
13055: CALL_OW 72
13059: PUSH
13060: FOR_IN
13061: IFFALSE 13101
// begin if not GetBWeapon ( i ) then
13063: LD_VAR 0 9
13067: PPUSH
13068: CALL_OW 269
13072: NOT
13073: IFFALSE 13099
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13075: LD_VAR 0 9
13079: PPUSH
13080: LD_VAR 0 9
13084: PPUSH
13085: LD_VAR 0 2
13089: PPUSH
13090: CALL 51254 0 2
13094: PPUSH
13095: CALL_OW 431
// end ;
13099: GO 13060
13101: POP
13102: POP
// end ; for i = 1 to personel do
13103: LD_ADDR_VAR 0 9
13107: PUSH
13108: DOUBLE
13109: LD_INT 1
13111: DEC
13112: ST_TO_ADDR
13113: LD_VAR 0 7
13117: PUSH
13118: FOR_TO
13119: IFFALSE 14220
// begin if i > 4 then
13121: LD_VAR 0 9
13125: PUSH
13126: LD_INT 4
13128: GREATER
13129: IFFALSE 13133
// break ;
13131: GO 14220
// case i of 1 :
13133: LD_VAR 0 9
13137: PUSH
13138: LD_INT 1
13140: DOUBLE
13141: EQUAL
13142: IFTRUE 13146
13144: GO 13237
13146: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13147: LD_ADDR_VAR 0 13
13151: PUSH
13152: LD_VAR 0 18
13156: PPUSH
13157: LD_INT 22
13159: PUSH
13160: LD_VAR 0 17
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: LD_INT 58
13171: PUSH
13172: EMPTY
13173: LIST
13174: PUSH
13175: LD_INT 2
13177: PUSH
13178: LD_INT 30
13180: PUSH
13181: LD_INT 31
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 30
13190: PUSH
13191: LD_INT 32
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 30
13200: PUSH
13201: LD_INT 4
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PUSH
13208: LD_INT 30
13210: PUSH
13211: LD_INT 5
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: LIST
13229: PPUSH
13230: CALL_OW 72
13234: ST_TO_ADDR
13235: GO 13470
13237: LD_INT 2
13239: DOUBLE
13240: EQUAL
13241: IFTRUE 13245
13243: GO 13307
13245: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13246: LD_ADDR_VAR 0 13
13250: PUSH
13251: LD_VAR 0 18
13255: PPUSH
13256: LD_INT 22
13258: PUSH
13259: LD_VAR 0 17
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 2
13270: PUSH
13271: LD_INT 30
13273: PUSH
13274: LD_INT 0
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: PUSH
13281: LD_INT 30
13283: PUSH
13284: LD_INT 1
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: LIST
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: PPUSH
13300: CALL_OW 72
13304: ST_TO_ADDR
13305: GO 13470
13307: LD_INT 3
13309: DOUBLE
13310: EQUAL
13311: IFTRUE 13315
13313: GO 13388
13315: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_control_tower ] , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13316: LD_ADDR_VAR 0 13
13320: PUSH
13321: LD_VAR 0 18
13325: PPUSH
13326: LD_INT 22
13328: PUSH
13329: LD_VAR 0 17
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PUSH
13338: LD_INT 2
13340: PUSH
13341: LD_INT 30
13343: PUSH
13344: LD_INT 36
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: PUSH
13351: LD_INT 30
13353: PUSH
13354: LD_INT 2
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PUSH
13361: LD_INT 30
13363: PUSH
13364: LD_INT 3
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: PPUSH
13381: CALL_OW 72
13385: ST_TO_ADDR
13386: GO 13470
13388: LD_INT 4
13390: DOUBLE
13391: EQUAL
13392: IFTRUE 13396
13394: GO 13469
13396: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13397: LD_ADDR_VAR 0 13
13401: PUSH
13402: LD_VAR 0 18
13406: PPUSH
13407: LD_INT 22
13409: PUSH
13410: LD_VAR 0 17
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PUSH
13419: LD_INT 2
13421: PUSH
13422: LD_INT 30
13424: PUSH
13425: LD_INT 6
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: LD_INT 30
13434: PUSH
13435: LD_INT 7
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PUSH
13442: LD_INT 30
13444: PUSH
13445: LD_INT 8
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PPUSH
13462: CALL_OW 72
13466: ST_TO_ADDR
13467: GO 13470
13469: POP
// if i = 1 then
13470: LD_VAR 0 9
13474: PUSH
13475: LD_INT 1
13477: EQUAL
13478: IFFALSE 13596
// begin tmp := [ ] ;
13480: LD_ADDR_VAR 0 19
13484: PUSH
13485: EMPTY
13486: ST_TO_ADDR
// for j in f do
13487: LD_ADDR_VAR 0 10
13491: PUSH
13492: LD_VAR 0 13
13496: PUSH
13497: FOR_IN
13498: IFFALSE 13578
// if GetBType ( j ) in [ b_breastwork , b_bunker ] then
13500: LD_VAR 0 10
13504: PPUSH
13505: CALL_OW 266
13509: PUSH
13510: LD_INT 31
13512: PUSH
13513: LD_INT 32
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: IN
13520: IFFALSE 13547
// tmp := Insert ( tmp , 1 , j ) else
13522: LD_ADDR_VAR 0 19
13526: PUSH
13527: LD_VAR 0 19
13531: PPUSH
13532: LD_INT 1
13534: PPUSH
13535: LD_VAR 0 10
13539: PPUSH
13540: CALL_OW 2
13544: ST_TO_ADDR
13545: GO 13576
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13547: LD_ADDR_VAR 0 19
13551: PUSH
13552: LD_VAR 0 19
13556: PPUSH
13557: LD_VAR 0 19
13561: PUSH
13562: LD_INT 1
13564: PLUS
13565: PPUSH
13566: LD_VAR 0 10
13570: PPUSH
13571: CALL_OW 2
13575: ST_TO_ADDR
13576: GO 13497
13578: POP
13579: POP
// if tmp then
13580: LD_VAR 0 19
13584: IFFALSE 13596
// f := tmp ;
13586: LD_ADDR_VAR 0 13
13590: PUSH
13591: LD_VAR 0 19
13595: ST_TO_ADDR
// end ; x := personel [ i ] ;
13596: LD_ADDR_VAR 0 14
13600: PUSH
13601: LD_VAR 0 7
13605: PUSH
13606: LD_VAR 0 9
13610: ARRAY
13611: ST_TO_ADDR
// if x = - 1 then
13612: LD_VAR 0 14
13616: PUSH
13617: LD_INT 1
13619: NEG
13620: EQUAL
13621: IFFALSE 13815
// begin for j in f do
13623: LD_ADDR_VAR 0 10
13627: PUSH
13628: LD_VAR 0 13
13632: PUSH
13633: FOR_IN
13634: IFFALSE 13811
// repeat InitHc ;
13636: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13640: LD_VAR 0 10
13644: PPUSH
13645: CALL_OW 266
13649: PUSH
13650: LD_INT 5
13652: EQUAL
13653: IFFALSE 13708
// begin if UnitsInside ( j ) < 3 then
13655: LD_VAR 0 10
13659: PPUSH
13660: CALL_OW 313
13664: PUSH
13665: LD_INT 3
13667: LESS
13668: IFFALSE 13689
// PrepareHuman ( false , i , skill ) else
13670: LD_INT 0
13672: PPUSH
13673: LD_VAR 0 9
13677: PPUSH
13678: LD_VAR 0 4
13682: PPUSH
13683: CALL_OW 380
13687: GO 13706
// PrepareHuman ( false , i , skill ) ;
13689: LD_INT 0
13691: PPUSH
13692: LD_VAR 0 9
13696: PPUSH
13697: LD_VAR 0 4
13701: PPUSH
13702: CALL_OW 380
// end else
13706: GO 13725
// PrepareHuman ( false , i , skill ) ;
13708: LD_INT 0
13710: PPUSH
13711: LD_VAR 0 9
13715: PPUSH
13716: LD_VAR 0 4
13720: PPUSH
13721: CALL_OW 380
// un := CreateHuman ;
13725: LD_ADDR_VAR 0 15
13729: PUSH
13730: CALL_OW 44
13734: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13735: LD_ADDR_VAR 0 8
13739: PUSH
13740: LD_VAR 0 8
13744: PPUSH
13745: LD_INT 1
13747: PPUSH
13748: LD_VAR 0 15
13752: PPUSH
13753: CALL_OW 2
13757: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13758: LD_VAR 0 15
13762: PPUSH
13763: LD_VAR 0 10
13767: PPUSH
13768: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13772: LD_VAR 0 10
13776: PPUSH
13777: CALL_OW 313
13781: PUSH
13782: LD_INT 6
13784: EQUAL
13785: PUSH
13786: LD_VAR 0 10
13790: PPUSH
13791: CALL_OW 266
13795: PUSH
13796: LD_INT 32
13798: PUSH
13799: LD_INT 31
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: IN
13806: OR
13807: IFFALSE 13636
13809: GO 13633
13811: POP
13812: POP
// end else
13813: GO 14218
// for j = 1 to x do
13815: LD_ADDR_VAR 0 10
13819: PUSH
13820: DOUBLE
13821: LD_INT 1
13823: DEC
13824: ST_TO_ADDR
13825: LD_VAR 0 14
13829: PUSH
13830: FOR_TO
13831: IFFALSE 14216
// begin InitHc ;
13833: CALL_OW 19
// if not f then
13837: LD_VAR 0 13
13841: NOT
13842: IFFALSE 13931
// begin PrepareHuman ( false , i , skill ) ;
13844: LD_INT 0
13846: PPUSH
13847: LD_VAR 0 9
13851: PPUSH
13852: LD_VAR 0 4
13856: PPUSH
13857: CALL_OW 380
// un := CreateHuman ;
13861: LD_ADDR_VAR 0 15
13865: PUSH
13866: CALL_OW 44
13870: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13871: LD_ADDR_VAR 0 8
13875: PUSH
13876: LD_VAR 0 8
13880: PPUSH
13881: LD_INT 1
13883: PPUSH
13884: LD_VAR 0 15
13888: PPUSH
13889: CALL_OW 2
13893: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13894: LD_VAR 0 15
13898: PPUSH
13899: LD_VAR 0 1
13903: PPUSH
13904: CALL_OW 250
13908: PPUSH
13909: LD_VAR 0 1
13913: PPUSH
13914: CALL_OW 251
13918: PPUSH
13919: LD_INT 10
13921: PPUSH
13922: LD_INT 0
13924: PPUSH
13925: CALL_OW 50
// continue ;
13929: GO 13830
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 3 and GetBType ( f [ 1 ] ) = b_control_tower ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13931: LD_VAR 0 13
13935: PUSH
13936: LD_INT 1
13938: ARRAY
13939: PPUSH
13940: CALL_OW 313
13944: PUSH
13945: LD_VAR 0 13
13949: PUSH
13950: LD_INT 1
13952: ARRAY
13953: PPUSH
13954: CALL_OW 266
13958: PUSH
13959: LD_INT 32
13961: PUSH
13962: LD_INT 31
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: IN
13969: AND
13970: PUSH
13971: LD_VAR 0 13
13975: PUSH
13976: LD_INT 1
13978: ARRAY
13979: PPUSH
13980: CALL_OW 313
13984: PUSH
13985: LD_INT 3
13987: EQUAL
13988: PUSH
13989: LD_VAR 0 13
13993: PUSH
13994: LD_INT 1
13996: ARRAY
13997: PPUSH
13998: CALL_OW 266
14002: PUSH
14003: LD_INT 36
14005: EQUAL
14006: AND
14007: OR
14008: PUSH
14009: LD_VAR 0 13
14013: PUSH
14014: LD_INT 1
14016: ARRAY
14017: PPUSH
14018: CALL_OW 313
14022: PUSH
14023: LD_INT 6
14025: EQUAL
14026: OR
14027: IFFALSE 14047
// f := Delete ( f , 1 ) ;
14029: LD_ADDR_VAR 0 13
14033: PUSH
14034: LD_VAR 0 13
14038: PPUSH
14039: LD_INT 1
14041: PPUSH
14042: CALL_OW 3
14046: ST_TO_ADDR
// if not f then
14047: LD_VAR 0 13
14051: NOT
14052: IFFALSE 14070
// begin x := x + 2 ;
14054: LD_ADDR_VAR 0 14
14058: PUSH
14059: LD_VAR 0 14
14063: PUSH
14064: LD_INT 2
14066: PLUS
14067: ST_TO_ADDR
// continue ;
14068: GO 13830
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14070: LD_VAR 0 13
14074: PUSH
14075: LD_INT 1
14077: ARRAY
14078: PPUSH
14079: CALL_OW 266
14083: PUSH
14084: LD_INT 5
14086: EQUAL
14087: IFFALSE 14146
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14089: LD_VAR 0 13
14093: PUSH
14094: LD_INT 1
14096: ARRAY
14097: PPUSH
14098: CALL_OW 313
14102: PUSH
14103: LD_INT 3
14105: LESS
14106: IFFALSE 14127
// PrepareHuman ( false , i , skill ) else
14108: LD_INT 0
14110: PPUSH
14111: LD_VAR 0 9
14115: PPUSH
14116: LD_VAR 0 4
14120: PPUSH
14121: CALL_OW 380
14125: GO 14144
// PrepareHuman ( false , i , skill ) ;
14127: LD_INT 0
14129: PPUSH
14130: LD_VAR 0 9
14134: PPUSH
14135: LD_VAR 0 4
14139: PPUSH
14140: CALL_OW 380
// end else
14144: GO 14163
// PrepareHuman ( false , i , skill ) ;
14146: LD_INT 0
14148: PPUSH
14149: LD_VAR 0 9
14153: PPUSH
14154: LD_VAR 0 4
14158: PPUSH
14159: CALL_OW 380
// un := CreateHuman ;
14163: LD_ADDR_VAR 0 15
14167: PUSH
14168: CALL_OW 44
14172: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14173: LD_ADDR_VAR 0 8
14177: PUSH
14178: LD_VAR 0 8
14182: PPUSH
14183: LD_INT 1
14185: PPUSH
14186: LD_VAR 0 15
14190: PPUSH
14191: CALL_OW 2
14195: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14196: LD_VAR 0 15
14200: PPUSH
14201: LD_VAR 0 13
14205: PUSH
14206: LD_INT 1
14208: ARRAY
14209: PPUSH
14210: CALL_OW 52
// end ;
14214: GO 13830
14216: POP
14217: POP
// end ;
14218: GO 13118
14220: POP
14221: POP
// result := result ^ buildings ;
14222: LD_ADDR_VAR 0 8
14226: PUSH
14227: LD_VAR 0 8
14231: PUSH
14232: LD_VAR 0 18
14236: ADD
14237: ST_TO_ADDR
// end else
14238: GO 14381
// begin for i = 1 to personel do
14240: LD_ADDR_VAR 0 9
14244: PUSH
14245: DOUBLE
14246: LD_INT 1
14248: DEC
14249: ST_TO_ADDR
14250: LD_VAR 0 7
14254: PUSH
14255: FOR_TO
14256: IFFALSE 14379
// begin if i > 4 then
14258: LD_VAR 0 9
14262: PUSH
14263: LD_INT 4
14265: GREATER
14266: IFFALSE 14270
// break ;
14268: GO 14379
// x := personel [ i ] ;
14270: LD_ADDR_VAR 0 14
14274: PUSH
14275: LD_VAR 0 7
14279: PUSH
14280: LD_VAR 0 9
14284: ARRAY
14285: ST_TO_ADDR
// if x = - 1 then
14286: LD_VAR 0 14
14290: PUSH
14291: LD_INT 1
14293: NEG
14294: EQUAL
14295: IFFALSE 14299
// continue ;
14297: GO 14255
// PrepareHuman ( false , i , skill ) ;
14299: LD_INT 0
14301: PPUSH
14302: LD_VAR 0 9
14306: PPUSH
14307: LD_VAR 0 4
14311: PPUSH
14312: CALL_OW 380
// un := CreateHuman ;
14316: LD_ADDR_VAR 0 15
14320: PUSH
14321: CALL_OW 44
14325: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14326: LD_VAR 0 15
14330: PPUSH
14331: LD_VAR 0 1
14335: PPUSH
14336: CALL_OW 250
14340: PPUSH
14341: LD_VAR 0 1
14345: PPUSH
14346: CALL_OW 251
14350: PPUSH
14351: LD_INT 10
14353: PPUSH
14354: LD_INT 0
14356: PPUSH
14357: CALL_OW 50
// result := result ^ un ;
14361: LD_ADDR_VAR 0 8
14365: PUSH
14366: LD_VAR 0 8
14370: PUSH
14371: LD_VAR 0 15
14375: ADD
14376: ST_TO_ADDR
// end ;
14377: GO 14255
14379: POP
14380: POP
// end ; end ;
14381: LD_VAR 0 8
14385: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
14386: LD_INT 0
14388: PPUSH
14389: PPUSH
14390: PPUSH
14391: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
14392: LD_ADDR_VAR 0 6
14396: PUSH
14397: LD_INT 34
14399: PUSH
14400: LD_INT 71
14402: PUSH
14403: LD_INT 70
14405: PUSH
14406: LD_INT 69
14408: PUSH
14409: LD_INT 39
14411: PUSH
14412: LD_INT 31
14414: PUSH
14415: LD_INT 14
14417: PUSH
14418: LD_INT 10
14420: PUSH
14421: LD_INT 40
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: ST_TO_ADDR
// resultWeapons = [ ] ;
14435: LD_ADDR_VAR 0 5
14439: PUSH
14440: EMPTY
14441: ST_TO_ADDR
// for i := 1 to weaponTechs do
14442: LD_ADDR_VAR 0 4
14446: PUSH
14447: DOUBLE
14448: LD_INT 1
14450: DEC
14451: ST_TO_ADDR
14452: LD_VAR 0 6
14456: PUSH
14457: FOR_TO
14458: IFFALSE 14645
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
14460: LD_VAR 0 6
14464: PUSH
14465: LD_VAR 0 4
14469: ARRAY
14470: PPUSH
14471: LD_VAR 0 2
14475: PPUSH
14476: CALL_OW 482
14480: PUSH
14481: LD_VAR 0 6
14485: PUSH
14486: LD_VAR 0 4
14490: ARRAY
14491: PPUSH
14492: LD_VAR 0 1
14496: PPUSH
14497: CALL_OW 321
14501: PUSH
14502: LD_INT 2
14504: EQUAL
14505: AND
14506: IFFALSE 14643
// case nation of nation_american :
14508: LD_VAR 0 2
14512: PUSH
14513: LD_INT 1
14515: DOUBLE
14516: EQUAL
14517: IFTRUE 14521
14519: GO 14556
14521: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
14522: LD_ADDR_VAR 0 5
14526: PUSH
14527: LD_VAR 0 5
14531: PUSH
14532: LD_VAR 0 6
14536: PUSH
14537: LD_VAR 0 4
14541: ARRAY
14542: PPUSH
14543: LD_VAR 0 2
14547: PPUSH
14548: CALL 14662 0 2
14552: ADD
14553: ST_TO_ADDR
14554: GO 14643
14556: LD_INT 2
14558: DOUBLE
14559: EQUAL
14560: IFTRUE 14564
14562: GO 14599
14564: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
14565: LD_ADDR_VAR 0 5
14569: PUSH
14570: LD_VAR 0 5
14574: PUSH
14575: LD_VAR 0 6
14579: PUSH
14580: LD_VAR 0 4
14584: ARRAY
14585: PPUSH
14586: LD_VAR 0 2
14590: PPUSH
14591: CALL 14662 0 2
14595: ADD
14596: ST_TO_ADDR
14597: GO 14643
14599: LD_INT 3
14601: DOUBLE
14602: EQUAL
14603: IFTRUE 14607
14605: GO 14642
14607: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
14608: LD_ADDR_VAR 0 5
14612: PUSH
14613: LD_VAR 0 5
14617: PUSH
14618: LD_VAR 0 6
14622: PUSH
14623: LD_VAR 0 4
14627: ARRAY
14628: PPUSH
14629: LD_VAR 0 2
14633: PPUSH
14634: CALL 14662 0 2
14638: ADD
14639: ST_TO_ADDR
14640: GO 14643
14642: POP
// end ;
14643: GO 14457
14645: POP
14646: POP
// result = resultWeapons ;
14647: LD_ADDR_VAR 0 3
14651: PUSH
14652: LD_VAR 0 5
14656: ST_TO_ADDR
// end ;
14657: LD_VAR 0 3
14661: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
14662: LD_INT 0
14664: PPUSH
// case tech of tech_AdvMet :
14665: LD_VAR 0 1
14669: PUSH
14670: LD_INT 34
14672: DOUBLE
14673: EQUAL
14674: IFTRUE 14678
14676: GO 14706
14678: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
14679: LD_ADDR_VAR 0 3
14683: PUSH
14684: LD_INT 6
14686: PUSH
14687: LD_STRING 
14689: PUSH
14690: LD_INT 46
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: LIST
14697: PUSH
14698: LD_VAR 0 2
14702: ARRAY
14703: ST_TO_ADDR
14704: GO 14995
14706: LD_INT 71
14708: DOUBLE
14709: EQUAL
14710: IFTRUE 14714
14712: GO 14742
14714: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
14715: LD_ADDR_VAR 0 3
14719: PUSH
14720: LD_STRING 
14722: PUSH
14723: LD_STRING 
14725: PUSH
14726: LD_INT 47
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: LIST
14733: PUSH
14734: LD_VAR 0 2
14738: ARRAY
14739: ST_TO_ADDR
14740: GO 14995
14742: LD_INT 70
14744: DOUBLE
14745: EQUAL
14746: IFTRUE 14750
14748: GO 14778
14750: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
14751: LD_ADDR_VAR 0 3
14755: PUSH
14756: LD_STRING 
14758: PUSH
14759: LD_INT 26
14761: PUSH
14762: LD_STRING 
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: LIST
14769: PUSH
14770: LD_VAR 0 2
14774: ARRAY
14775: ST_TO_ADDR
14776: GO 14995
14778: LD_INT 69
14780: DOUBLE
14781: EQUAL
14782: IFTRUE 14786
14784: GO 14814
14786: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
14787: LD_ADDR_VAR 0 3
14791: PUSH
14792: LD_INT 4
14794: PUSH
14795: LD_INT 25
14797: PUSH
14798: LD_INT 43
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: LIST
14805: PUSH
14806: LD_VAR 0 2
14810: ARRAY
14811: ST_TO_ADDR
14812: GO 14995
14814: LD_INT 39
14816: DOUBLE
14817: EQUAL
14818: IFTRUE 14822
14820: GO 14850
14822: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
14823: LD_ADDR_VAR 0 3
14827: PUSH
14828: LD_INT 5
14830: PUSH
14831: LD_INT 27
14833: PUSH
14834: LD_INT 44
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: LIST
14841: PUSH
14842: LD_VAR 0 2
14846: ARRAY
14847: ST_TO_ADDR
14848: GO 14995
14850: LD_INT 31
14852: DOUBLE
14853: EQUAL
14854: IFTRUE 14858
14856: GO 14886
14858: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
14859: LD_ADDR_VAR 0 3
14863: PUSH
14864: LD_STRING 
14866: PUSH
14867: LD_STRING 
14869: PUSH
14870: LD_INT 49
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: LIST
14877: PUSH
14878: LD_VAR 0 2
14882: ARRAY
14883: ST_TO_ADDR
14884: GO 14995
14886: LD_INT 14
14888: DOUBLE
14889: EQUAL
14890: IFTRUE 14894
14892: GO 14922
14894: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
14895: LD_ADDR_VAR 0 3
14899: PUSH
14900: LD_INT 10
14902: PUSH
14903: LD_STRING 
14905: PUSH
14906: LD_STRING 
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: LIST
14913: PUSH
14914: LD_VAR 0 2
14918: ARRAY
14919: ST_TO_ADDR
14920: GO 14995
14922: LD_INT 10
14924: DOUBLE
14925: EQUAL
14926: IFTRUE 14930
14928: GO 14958
14930: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
14931: LD_ADDR_VAR 0 3
14935: PUSH
14936: LD_INT 9
14938: PUSH
14939: LD_STRING 
14941: PUSH
14942: LD_STRING 
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: LIST
14949: PUSH
14950: LD_VAR 0 2
14954: ARRAY
14955: ST_TO_ADDR
14956: GO 14995
14958: LD_INT 40
14960: DOUBLE
14961: EQUAL
14962: IFTRUE 14966
14964: GO 14994
14966: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
14967: LD_ADDR_VAR 0 3
14971: PUSH
14972: LD_INT 7
14974: PUSH
14975: LD_INT 28
14977: PUSH
14978: LD_INT 45
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: LIST
14985: PUSH
14986: LD_VAR 0 2
14990: ARRAY
14991: ST_TO_ADDR
14992: GO 14995
14994: POP
// end ;
14995: LD_VAR 0 3
14999: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
15000: LD_INT 0
15002: PPUSH
15003: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
15004: LD_ADDR_VAR 0 2
15008: PUSH
15009: LD_VAR 0 1
15013: PPUSH
15014: LD_INT 1
15016: PPUSH
15017: CALL_OW 289
15021: PUSH
15022: LD_VAR 0 1
15026: PPUSH
15027: LD_INT 2
15029: PPUSH
15030: CALL_OW 289
15034: PUSH
15035: LD_VAR 0 1
15039: PPUSH
15040: LD_INT 3
15042: PPUSH
15043: CALL_OW 289
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: LIST
15052: ST_TO_ADDR
// end ;
15053: LD_VAR 0 2
15057: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
15058: LD_INT 0
15060: PPUSH
15061: PPUSH
// area = ListEnvironmentArea ( area ) ;
15062: LD_ADDR_VAR 0 2
15066: PUSH
15067: LD_VAR 0 2
15071: PPUSH
15072: CALL_OW 353
15076: ST_TO_ADDR
// if bulldozer > 0 then
15077: LD_VAR 0 1
15081: PUSH
15082: LD_INT 0
15084: GREATER
15085: IFFALSE 15196
// for i = area downto 1 do
15087: LD_ADDR_VAR 0 4
15091: PUSH
15092: DOUBLE
15093: LD_VAR 0 2
15097: INC
15098: ST_TO_ADDR
15099: LD_INT 1
15101: PUSH
15102: FOR_DOWNTO
15103: IFFALSE 15194
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
15105: LD_VAR 0 2
15109: PUSH
15110: LD_VAR 0 4
15114: ARRAY
15115: PUSH
15116: LD_INT 1
15118: ARRAY
15119: PPUSH
15120: LD_VAR 0 2
15124: PUSH
15125: LD_VAR 0 4
15129: ARRAY
15130: PUSH
15131: LD_INT 2
15133: ARRAY
15134: PPUSH
15135: CALL_OW 351
15139: IFFALSE 15192
// if not HasTask ( bulldozer ) then
15141: LD_VAR 0 1
15145: PPUSH
15146: CALL_OW 314
15150: NOT
15151: IFFALSE 15192
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
15153: LD_VAR 0 1
15157: PPUSH
15158: LD_VAR 0 2
15162: PUSH
15163: LD_VAR 0 4
15167: ARRAY
15168: PUSH
15169: LD_INT 1
15171: ARRAY
15172: PPUSH
15173: LD_VAR 0 2
15177: PUSH
15178: LD_VAR 0 4
15182: ARRAY
15183: PUSH
15184: LD_INT 2
15186: ARRAY
15187: PPUSH
15188: CALL_OW 171
15192: GO 15102
15194: POP
15195: POP
// end ;
15196: LD_VAR 0 3
15200: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
15201: LD_INT 0
15203: PPUSH
15204: PPUSH
15205: PPUSH
// uc_side := GetSide ( b ) ;
15206: LD_ADDR_OWVAR 20
15210: PUSH
15211: LD_VAR 0 2
15215: PPUSH
15216: CALL_OW 255
15220: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
15221: LD_ADDR_OWVAR 21
15225: PUSH
15226: LD_VAR 0 2
15230: PPUSH
15231: CALL_OW 248
15235: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
15236: LD_INT 0
15238: PPUSH
15239: LD_INT 1
15241: PPUSH
15242: LD_VAR 0 1
15246: PPUSH
15247: CALL_OW 380
// un = CreateHuman ;
15251: LD_ADDR_VAR 0 4
15255: PUSH
15256: CALL_OW 44
15260: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
15261: LD_ADDR_VAR 0 5
15265: PUSH
15266: LD_VAR 0 2
15270: PPUSH
15271: CALL_OW 254
15275: PUSH
15276: LD_INT 3
15278: MINUS
15279: ST_TO_ADDR
// if dir < 0 then
15280: LD_VAR 0 5
15284: PUSH
15285: LD_INT 0
15287: LESS
15288: IFFALSE 15304
// dir := 6 + dir ;
15290: LD_ADDR_VAR 0 5
15294: PUSH
15295: LD_INT 6
15297: PUSH
15298: LD_VAR 0 5
15302: PLUS
15303: ST_TO_ADDR
// SetDir ( un , dir ) ;
15304: LD_VAR 0 4
15308: PPUSH
15309: LD_VAR 0 5
15313: PPUSH
15314: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
15318: LD_VAR 0 4
15322: PPUSH
15323: LD_VAR 0 2
15327: PPUSH
15328: CALL_OW 52
// result = un ;
15332: LD_ADDR_VAR 0 3
15336: PUSH
15337: LD_VAR 0 4
15341: ST_TO_ADDR
// end ;
15342: LD_VAR 0 3
15346: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others , max , test1 , test2 ; begin
15347: LD_INT 0
15349: PPUSH
15350: PPUSH
15351: PPUSH
15352: PPUSH
15353: PPUSH
15354: PPUSH
15355: PPUSH
15356: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Burlak , Vsevolod ] ;
15357: LD_ADDR_VAR 0 3
15361: PUSH
15362: LD_INT 22
15364: PUSH
15365: LD_INT 3
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PUSH
15372: LD_INT 21
15374: PUSH
15375: LD_INT 1
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PUSH
15382: LD_INT 23
15384: PUSH
15385: LD_INT 3
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: LIST
15396: PPUSH
15397: CALL_OW 69
15401: PUSH
15402: LD_EXP 39
15406: PUSH
15407: LD_EXP 51
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: DIFF
15416: ST_TO_ADDR
// charsToChoose = charsToChoose diff vsevolodTeam ;
15417: LD_ADDR_VAR 0 3
15421: PUSH
15422: LD_VAR 0 3
15426: PUSH
15427: LD_EXP 52
15431: DIFF
15432: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam diff Vsevolod ;
15433: LD_ADDR_EXP 52
15437: PUSH
15438: LD_EXP 52
15442: PUSH
15443: LD_EXP 51
15447: DIFF
15448: ST_TO_ADDR
// max = charsToChoose div 2 + charsToChoose mod 2 ;
15449: LD_ADDR_VAR 0 6
15453: PUSH
15454: LD_VAR 0 3
15458: PUSH
15459: LD_INT 2
15461: DIV
15462: PUSH
15463: LD_VAR 0 3
15467: PUSH
15468: LD_INT 2
15470: MOD
15471: PLUS
15472: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 0 , 3 , [ Burlak , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_not_hired ] ^ vsevolodTeam ^ [ sel_not_changeable , Vsevolod ] , [ class_soldier , class_mechanic , class_engineer , class_scientistic ] ) ;
15473: LD_ADDR_VAR 0 4
15477: PUSH
15478: LD_STRING text
15480: PPUSH
15481: LD_INT 0
15483: PPUSH
15484: LD_INT 3
15486: PPUSH
15487: LD_EXP 39
15491: PUSH
15492: LD_INT -3
15494: PUSH
15495: LD_INT -5
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: LIST
15502: PUSH
15503: LD_VAR 0 3
15507: ADD
15508: PUSH
15509: LD_INT -2
15511: PUSH
15512: EMPTY
15513: LIST
15514: ADD
15515: PUSH
15516: LD_EXP 52
15520: ADD
15521: PUSH
15522: LD_INT -4
15524: PUSH
15525: LD_EXP 51
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: ADD
15534: PPUSH
15535: LD_INT 1
15537: PUSH
15538: LD_INT 3
15540: PUSH
15541: LD_INT 2
15543: PUSH
15544: LD_INT 4
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: PPUSH
15553: CALL_OW 42
15557: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) , 6 ) ;
15558: LD_INT 22
15560: PUSH
15561: LD_INT 3
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PUSH
15568: LD_INT 21
15570: PUSH
15571: LD_INT 1
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PUSH
15578: LD_INT 23
15580: PUSH
15581: LD_INT 3
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: LIST
15592: PPUSH
15593: CALL_OW 69
15597: PPUSH
15598: LD_INT 6
15600: PPUSH
15601: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
15605: LD_VAR 0 4
15609: PPUSH
15610: LD_INT 3
15612: PPUSH
15613: CALL_OW 235
// SetSide ( Burlak , 3 ) ;
15617: LD_EXP 39
15621: PPUSH
15622: LD_INT 3
15624: PPUSH
15625: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
15629: LD_ADDR_VAR 0 2
15633: PUSH
15634: LD_INT 22
15636: PUSH
15637: LD_INT 6
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: PUSH
15644: LD_INT 21
15646: PUSH
15647: LD_INT 1
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PPUSH
15658: CALL_OW 69
15662: PUSH
15663: FOR_IN
15664: IFFALSE 15697
// if IsInUnit ( i ) then
15666: LD_VAR 0 2
15670: PPUSH
15671: CALL_OW 310
15675: IFFALSE 15695
// begin ComExitVehicle ( i ) ;
15677: LD_VAR 0 2
15681: PPUSH
15682: CALL_OW 121
// ComExitBuilding ( i ) ;
15686: LD_VAR 0 2
15690: PPUSH
15691: CALL_OW 122
// end ;
15695: GO 15663
15697: POP
15698: POP
// if not Vsevolod in selectedPeople then
15699: LD_EXP 51
15703: PUSH
15704: LD_VAR 0 4
15708: IN
15709: NOT
15710: IFFALSE 15727
// ExtSaveCharacter ( Vsevolod , Vsevolod , 6 ) ;
15712: LD_EXP 51
15716: PPUSH
15717: LD_STRING Vsevolod
15719: PPUSH
15720: LD_INT 6
15722: PPUSH
15723: CALL 11877 0 3
// if not Karamazov in selectedPeople then
15727: LD_EXP 40
15731: PUSH
15732: LD_VAR 0 4
15736: IN
15737: NOT
15738: IFFALSE 15755
// ExtSaveCharacter ( Karamazov , VSKaramazov , 6 ) ;
15740: LD_EXP 40
15744: PPUSH
15745: LD_STRING VSKaramazov
15747: PPUSH
15748: LD_INT 6
15750: PPUSH
15751: CALL 11877 0 3
// if not Petrovova in selectedPeople then
15755: LD_EXP 41
15759: PUSH
15760: LD_VAR 0 4
15764: IN
15765: NOT
15766: IFFALSE 15783
// ExtSaveCharacter ( Petrovova , VSPetrovova , 6 ) ;
15768: LD_EXP 41
15772: PPUSH
15773: LD_STRING VSPetrovova
15775: PPUSH
15776: LD_INT 6
15778: PPUSH
15779: CALL 11877 0 3
// if not Gleb in selectedPeople then
15783: LD_EXP 42
15787: PUSH
15788: LD_VAR 0 4
15792: IN
15793: NOT
15794: IFFALSE 15811
// ExtSaveCharacter ( Gleb , VSGleb , 6 ) ;
15796: LD_EXP 42
15800: PPUSH
15801: LD_STRING VSGleb
15803: PPUSH
15804: LD_INT 6
15806: PPUSH
15807: CALL 11877 0 3
// if not Petrosyan in selectedPeople then
15811: LD_EXP 43
15815: PUSH
15816: LD_VAR 0 4
15820: IN
15821: NOT
15822: IFFALSE 15839
// ExtSaveCharacter ( Petrosyan , VSPetrosyan , 6 ) ;
15824: LD_EXP 43
15828: PPUSH
15829: LD_STRING VSPetrosyan
15831: PPUSH
15832: LD_INT 6
15834: PPUSH
15835: CALL 11877 0 3
// if not Titov in selectedPeople then
15839: LD_EXP 44
15843: PUSH
15844: LD_VAR 0 4
15848: IN
15849: NOT
15850: IFFALSE 15867
// ExtSaveCharacter ( Titov , VSTitov , 6 ) ;
15852: LD_EXP 44
15856: PPUSH
15857: LD_STRING VSTitov
15859: PPUSH
15860: LD_INT 6
15862: PPUSH
15863: CALL 11877 0 3
// if not Dolgov in selectedPeople then
15867: LD_EXP 45
15871: PUSH
15872: LD_VAR 0 4
15876: IN
15877: NOT
15878: IFFALSE 15895
// ExtSaveCharacter ( Dolgov , VSDolgov , 6 ) ;
15880: LD_EXP 45
15884: PPUSH
15885: LD_STRING VSDolgov
15887: PPUSH
15888: LD_INT 6
15890: PPUSH
15891: CALL 11877 0 3
// if not Lipshchin in selectedPeople then
15895: LD_EXP 46
15899: PUSH
15900: LD_VAR 0 4
15904: IN
15905: NOT
15906: IFFALSE 15923
// ExtSaveCharacter ( Lipshchin , VSLipshchin , 6 ) ;
15908: LD_EXP 46
15912: PPUSH
15913: LD_STRING VSLipshchin
15915: PPUSH
15916: LD_INT 6
15918: PPUSH
15919: CALL 11877 0 3
// others = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod ] ;
15923: LD_ADDR_VAR 0 5
15927: PUSH
15928: LD_INT 22
15930: PUSH
15931: LD_INT 6
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: LD_INT 21
15940: PUSH
15941: LD_INT 1
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: PUSH
15948: LD_INT 23
15950: PUSH
15951: LD_INT 3
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: LIST
15962: PPUSH
15963: CALL_OW 69
15967: PUSH
15968: LD_EXP 40
15972: PUSH
15973: LD_EXP 41
15977: PUSH
15978: LD_EXP 42
15982: PUSH
15983: LD_EXP 43
15987: PUSH
15988: LD_EXP 44
15992: PUSH
15993: LD_EXP 45
15997: PUSH
15998: LD_EXP 46
16002: PUSH
16003: LD_EXP 51
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: DIFF
16018: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_vsevolod , 6 ) ;
16019: LD_VAR 0 5
16023: PPUSH
16024: LD_STRING other_survivors_with_vsevolod
16026: PPUSH
16027: LD_INT 6
16029: PPUSH
16030: CALL 11933 0 3
// end ; end_of_file
16034: LD_VAR 0 1
16038: RET
// export function MissionIntro ; var i , ruEng , unit ; begin
16039: LD_INT 0
16041: PPUSH
16042: PPUSH
16043: PPUSH
16044: PPUSH
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) ;
16045: LD_EXP 39
16049: PPUSH
16050: CALL_OW 310
16054: PPUSH
16055: CALL_OW 87
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
16059: LD_ADDR_VAR 0 4
16063: PUSH
16064: LD_INT 22
16066: PUSH
16067: LD_INT 3
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: PUSH
16074: LD_INT 21
16076: PUSH
16077: LD_INT 2
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: PPUSH
16088: CALL_OW 69
16092: PUSH
16093: FOR_IN
16094: IFFALSE 16158
// begin if ( i mod 2 ) = 0 then
16096: LD_VAR 0 2
16100: PUSH
16101: LD_INT 2
16103: MOD
16104: PUSH
16105: LD_INT 0
16107: EQUAL
16108: IFFALSE 16127
// ComMoveXY ( unit , 156 , 205 ) else
16110: LD_VAR 0 4
16114: PPUSH
16115: LD_INT 156
16117: PPUSH
16118: LD_INT 205
16120: PPUSH
16121: CALL_OW 111
16125: GO 16142
// ComMoveXY ( unit , 160 , 215 ) ;
16127: LD_VAR 0 4
16131: PPUSH
16132: LD_INT 160
16134: PPUSH
16135: LD_INT 215
16137: PPUSH
16138: CALL_OW 111
// i = i + 1 ;
16142: LD_ADDR_VAR 0 2
16146: PUSH
16147: LD_VAR 0 2
16151: PUSH
16152: LD_INT 1
16154: PLUS
16155: ST_TO_ADDR
// end ;
16156: GO 16093
16158: POP
16159: POP
// if IsOK ( Karamazov ) then
16160: LD_EXP 40
16164: PPUSH
16165: CALL_OW 302
16169: IFFALSE 16183
// ruEng = Karamazov else
16171: LD_ADDR_VAR 0 3
16175: PUSH
16176: LD_EXP 40
16180: ST_TO_ADDR
16181: GO 16266
// if IsOK ( Lipshchin ) then
16183: LD_EXP 46
16187: PPUSH
16188: CALL_OW 302
16192: IFFALSE 16206
// ruEng = Lipshchin else
16194: LD_ADDR_VAR 0 3
16198: PUSH
16199: LD_EXP 46
16203: ST_TO_ADDR
16204: GO 16266
// ruEng = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_class , class_engineer ] ] ) [ 1 ] ;
16206: LD_ADDR_VAR 0 3
16210: PUSH
16211: LD_INT 22
16213: PUSH
16214: LD_INT 3
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PUSH
16221: LD_INT 21
16223: PUSH
16224: LD_INT 1
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PUSH
16231: LD_INT 23
16233: PUSH
16234: LD_INT 3
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: PUSH
16241: LD_INT 25
16243: PUSH
16244: LD_INT 2
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: PPUSH
16257: CALL_OW 69
16261: PUSH
16262: LD_INT 1
16264: ARRAY
16265: ST_TO_ADDR
// wait ( 0 0$3 ) ;
16266: LD_INT 105
16268: PPUSH
16269: CALL_OW 67
// CenterOnXY ( 160 , 213 ) ;
16273: LD_INT 160
16275: PPUSH
16276: LD_INT 213
16278: PPUSH
16279: CALL_OW 84
// wait ( 0 0$3 ) ;
16283: LD_INT 105
16285: PPUSH
16286: CALL_OW 67
// CenterOnXY ( 149 , 211 ) ;
16290: LD_INT 149
16292: PPUSH
16293: LD_INT 211
16295: PPUSH
16296: CALL_OW 84
// repeat ComMoveXY ( IsInUnit ( ruEng ) , 149 , 212 ) ;
16300: LD_VAR 0 3
16304: PPUSH
16305: CALL_OW 310
16309: PPUSH
16310: LD_INT 149
16312: PPUSH
16313: LD_INT 212
16315: PPUSH
16316: CALL_OW 111
// wait ( 0 0$1 ) ;
16320: LD_INT 35
16322: PPUSH
16323: CALL_OW 67
// until GetDistUnitXY ( IsInUnit ( ruEng ) , 149 , 212 ) <= 2 ;
16327: LD_VAR 0 3
16331: PPUSH
16332: CALL_OW 310
16336: PPUSH
16337: LD_INT 149
16339: PPUSH
16340: LD_INT 212
16342: PPUSH
16343: CALL_OW 297
16347: PUSH
16348: LD_INT 2
16350: LESSEQUAL
16351: IFFALSE 16300
// ComExitVehicle ( ruEng ) ;
16353: LD_VAR 0 3
16357: PPUSH
16358: CALL_OW 121
// wait ( 0 0$1 ) ;
16362: LD_INT 35
16364: PPUSH
16365: CALL_OW 67
// AddComCaptureBuilding ( ruEng , rudepot ) ;
16369: LD_VAR 0 3
16373: PPUSH
16374: LD_INT 74
16376: PPUSH
16377: CALL 12449 0 2
// repeat wait ( 0 0$1 ) ;
16381: LD_INT 35
16383: PPUSH
16384: CALL_OW 67
// until GetSide ( rudepot ) = 3 ;
16388: LD_INT 74
16390: PPUSH
16391: CALL_OW 255
16395: PUSH
16396: LD_INT 3
16398: EQUAL
16399: IFFALSE 16381
// ComEnterUnit ( ruEng , rudepot ) ;
16401: LD_VAR 0 3
16405: PPUSH
16406: LD_INT 74
16408: PPUSH
16409: CALL_OW 120
// wait ( 0 0$2 ) ;
16413: LD_INT 70
16415: PPUSH
16416: CALL_OW 67
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
16420: LD_INT 22
16422: PUSH
16423: LD_INT 6
16425: PUSH
16426: EMPTY
16427: LIST
16428: LIST
16429: PPUSH
16430: CALL_OW 69
16434: PPUSH
16435: LD_INT 3
16437: PPUSH
16438: CALL_OW 235
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
16442: LD_ADDR_VAR 0 4
16446: PUSH
16447: LD_INT 22
16449: PUSH
16450: LD_INT 3
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: PUSH
16457: LD_INT 21
16459: PUSH
16460: LD_INT 1
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PPUSH
16471: CALL_OW 69
16475: PUSH
16476: FOR_IN
16477: IFFALSE 16510
// if GetType ( IsInUnit ( unit ) ) = unit_vehicle then
16479: LD_VAR 0 4
16483: PPUSH
16484: CALL_OW 310
16488: PPUSH
16489: CALL_OW 247
16493: PUSH
16494: LD_INT 2
16496: EQUAL
16497: IFFALSE 16508
// ComExitVehicle ( unit ) ;
16499: LD_VAR 0 4
16503: PPUSH
16504: CALL_OW 121
16508: GO 16476
16510: POP
16511: POP
// if ruEng = Karamazov then
16512: LD_VAR 0 3
16516: PUSH
16517: LD_EXP 40
16521: EQUAL
16522: IFFALSE 16538
// Say ( Karamazov , DStart-Kar-1 ) else
16524: LD_EXP 40
16528: PPUSH
16529: LD_STRING DStart-Kar-1
16531: PPUSH
16532: CALL_OW 88
16536: GO 16562
// if ruEng = Lipshchin then
16538: LD_VAR 0 3
16542: PUSH
16543: LD_EXP 46
16547: EQUAL
16548: IFFALSE 16562
// Say ( Lipshchin , DStart-Lip-1 ) ;
16550: LD_EXP 46
16554: PPUSH
16555: LD_STRING DStart-Lip-1
16557: PPUSH
16558: CALL_OW 88
// ComExitBuilding ( ruEng ) ;
16562: LD_VAR 0 3
16566: PPUSH
16567: CALL_OW 122
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 250 ] ] ] ) do
16571: LD_ADDR_VAR 0 4
16575: PUSH
16576: LD_INT 22
16578: PUSH
16579: LD_INT 3
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: PUSH
16586: LD_INT 21
16588: PUSH
16589: LD_INT 3
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: LD_INT 3
16598: PUSH
16599: LD_INT 24
16601: PUSH
16602: LD_INT 250
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: LIST
16617: PPUSH
16618: CALL_OW 69
16622: PUSH
16623: FOR_IN
16624: IFFALSE 16677
// AddComRepairBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , unit ) ;
16626: LD_INT 22
16628: PUSH
16629: LD_INT 3
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PUSH
16636: LD_INT 21
16638: PUSH
16639: LD_INT 1
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PUSH
16646: LD_INT 25
16648: PUSH
16649: LD_INT 2
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: LIST
16660: PPUSH
16661: CALL_OW 69
16665: PPUSH
16666: LD_VAR 0 4
16670: PPUSH
16671: CALL_OW 190
16675: GO 16623
16677: POP
16678: POP
// Say ( Burlak , DStart-Bur-1 ) ;
16679: LD_EXP 39
16683: PPUSH
16684: LD_STRING DStart-Bur-1
16686: PPUSH
16687: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-1 ) ;
16691: LD_EXP 47
16695: PPUSH
16696: LD_STRING DStart-Pla-1
16698: PPUSH
16699: CALL_OW 94
// Say ( Burlak , DStart-Bur-2 ) ;
16703: LD_EXP 39
16707: PPUSH
16708: LD_STRING DStart-Bur-2
16710: PPUSH
16711: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-2 ) ;
16715: LD_EXP 47
16719: PPUSH
16720: LD_STRING DStart-Pla-2
16722: PPUSH
16723: CALL_OW 94
// if IsOK ( Petrovova ) then
16727: LD_EXP 41
16731: PPUSH
16732: CALL_OW 302
16736: IFFALSE 16750
// Say ( Petrovova , DStart-Ptr-2 ) ;
16738: LD_EXP 41
16742: PPUSH
16743: LD_STRING DStart-Ptr-2
16745: PPUSH
16746: CALL_OW 88
// InGameOff ;
16750: CALL_OW 9
// ChangeMissionObjectives ( MStart ) ;
16754: LD_STRING MStart
16756: PPUSH
16757: CALL_OW 337
// SaveForQuickRestart ;
16761: CALL_OW 22
// wait ( 0 0$10 ) ;
16765: LD_INT 350
16767: PPUSH
16768: CALL_OW 67
// if IsOK ( Petrosyan ) then
16772: LD_EXP 43
16776: PPUSH
16777: CALL_OW 302
16781: IFFALSE 16797
// Say ( Petrosyan , DMatPrediction-Pty-1 ) else
16783: LD_EXP 43
16787: PPUSH
16788: LD_STRING DMatPrediction-Pty-1
16790: PPUSH
16791: CALL_OW 88
16795: GO 16820
// if IsOK ( Dolgov ) then
16797: LD_EXP 45
16801: PPUSH
16802: CALL_OW 302
16806: IFFALSE 16820
// Say ( Dolgov , DMatPrediction-Dol-1 ) ;
16808: LD_EXP 45
16812: PPUSH
16813: LD_STRING DMatPrediction-Dol-1
16815: PPUSH
16816: CALL_OW 88
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16820: LD_EXP 43
16824: PPUSH
16825: CALL_OW 302
16829: PUSH
16830: LD_EXP 45
16834: PPUSH
16835: CALL_OW 302
16839: OR
16840: IFFALSE 16854
// Say ( Burlak , DMatPrediction-Bur-1 ) ;
16842: LD_EXP 39
16846: PPUSH
16847: LD_STRING DMatPrediction-Bur-1
16849: PPUSH
16850: CALL_OW 88
// if IsOK ( Petrosyan ) then
16854: LD_EXP 43
16858: PPUSH
16859: CALL_OW 302
16863: IFFALSE 16879
// Say ( Petrosyan , DMatPrediction-Pty-2 ) else
16865: LD_EXP 43
16869: PPUSH
16870: LD_STRING DMatPrediction-Pty-2
16872: PPUSH
16873: CALL_OW 88
16877: GO 16902
// if IsOK ( Dolgov ) then
16879: LD_EXP 45
16883: PPUSH
16884: CALL_OW 302
16888: IFFALSE 16902
// Say ( Dolgov , DMatPrediction-Dol-2 ) ;
16890: LD_EXP 45
16894: PPUSH
16895: LD_STRING DMatPrediction-Dol-2
16897: PPUSH
16898: CALL_OW 88
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16902: LD_EXP 43
16906: PPUSH
16907: CALL_OW 302
16911: PUSH
16912: LD_EXP 45
16916: PPUSH
16917: CALL_OW 302
16921: OR
16922: IFFALSE 16936
// Say ( Burlak , DMatPrediction-Bur-2 ) ;
16924: LD_EXP 39
16928: PPUSH
16929: LD_STRING DMatPrediction-Bur-2
16931: PPUSH
16932: CALL_OW 88
// if IsOK ( Petrosyan ) then
16936: LD_EXP 43
16940: PPUSH
16941: CALL_OW 302
16945: IFFALSE 16961
// Say ( Petrosyan , DMatPrediction-Pty-3 ) else
16947: LD_EXP 43
16951: PPUSH
16952: LD_STRING DMatPrediction-Pty-3
16954: PPUSH
16955: CALL_OW 88
16959: GO 16984
// if IsOK ( Dolgov ) then
16961: LD_EXP 45
16965: PPUSH
16966: CALL_OW 302
16970: IFFALSE 16984
// Say ( Dolgov , DMatPrediction-Dol-3 ) ;
16972: LD_EXP 45
16976: PPUSH
16977: LD_STRING DMatPrediction-Dol-3
16979: PPUSH
16980: CALL_OW 88
// ChangeMissionObjectives ( MPred ) ;
16984: LD_STRING MPred
16986: PPUSH
16987: CALL_OW 337
// end ;
16991: LD_VAR 0 1
16995: RET
// every 0 0$1 trigger not UnitFilter ( ovsyenkoBase , [ f_type , unit_human ] ) do
16996: LD_EXP 59
17000: PPUSH
17001: LD_INT 21
17003: PUSH
17004: LD_INT 1
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: PPUSH
17011: CALL_OW 72
17015: NOT
17016: IFFALSE 17238
17018: GO 17020
17020: DISABLE
// begin DialogueOn ;
17021: CALL_OW 6
// Say ( Burlak , DOvsyenkoTaken-Bur-1 ) ;
17025: LD_EXP 39
17029: PPUSH
17030: LD_STRING DOvsyenkoTaken-Bur-1
17032: PPUSH
17033: CALL_OW 88
// SayRadio ( Platonov , DOvsyenkoTaken-Pla-1 ) ;
17037: LD_EXP 47
17041: PPUSH
17042: LD_STRING DOvsyenkoTaken-Pla-1
17044: PPUSH
17045: CALL_OW 94
// if IsOK ( Karamazov ) then
17049: LD_EXP 40
17053: PPUSH
17054: CALL_OW 302
17058: IFFALSE 17072
// Say ( Karamazov , DOvsyenkoTaken-Kar-1 ) ;
17060: LD_EXP 40
17064: PPUSH
17065: LD_STRING DOvsyenkoTaken-Kar-1
17067: PPUSH
17068: CALL_OW 88
// if IsOK ( Titov ) then
17072: LD_EXP 44
17076: PPUSH
17077: CALL_OW 302
17081: IFFALSE 17095
// Say ( Titov , DOvsyenkoTaken-Tit-1 ) ;
17083: LD_EXP 44
17087: PPUSH
17088: LD_STRING DOvsyenkoTaken-Tit-1
17090: PPUSH
17091: CALL_OW 88
// if IsOK ( Lipshchin ) and ( IsOK ( Karamazov ) or IsOK ( Titov ) ) then
17095: LD_EXP 46
17099: PPUSH
17100: CALL_OW 302
17104: PUSH
17105: LD_EXP 40
17109: PPUSH
17110: CALL_OW 302
17114: PUSH
17115: LD_EXP 44
17119: PPUSH
17120: CALL_OW 302
17124: OR
17125: AND
17126: IFFALSE 17163
// begin Say ( Lipshchin , DOvsyenkoTaken-Lip-1 ) ;
17128: LD_EXP 46
17132: PPUSH
17133: LD_STRING DOvsyenkoTaken-Lip-1
17135: PPUSH
17136: CALL_OW 88
// if IsOK ( Gleb ) then
17140: LD_EXP 42
17144: PPUSH
17145: CALL_OW 302
17149: IFFALSE 17163
// Say ( Gleb , DOvsyenkoTaken-Glb-1 ) ;
17151: LD_EXP 42
17155: PPUSH
17156: LD_STRING DOvsyenkoTaken-Glb-1
17158: PPUSH
17159: CALL_OW 88
// end ; DialogueOff ;
17163: CALL_OW 7
// ChangeMissionObjectives ( MOutCapture ) ;
17167: LD_STRING MOutCapture
17169: PPUSH
17170: CALL_OW 337
// ChangeMissionObjectives ( MAddMine ) ;
17174: LD_STRING MAddMine
17176: PPUSH
17177: CALL_OW 337
// claimOvsyenkoBase = true ;
17181: LD_ADDR_EXP 15
17185: PUSH
17186: LD_INT 1
17188: ST_TO_ADDR
// wait ( 1 1$10 ) ;
17189: LD_INT 2450
17191: PPUSH
17192: CALL_OW 67
// InitAIManager ( 1 , 1 , headAmBase , HeadAmericanBaseArea , HeadAmericanHealArea , false , HeadAmericanBaseArea , 6 , 2 , 4 , true , true ) ;
17196: LD_INT 1
17198: PPUSH
17199: LD_INT 1
17201: PPUSH
17202: LD_EXP 61
17206: PPUSH
17207: LD_INT 5
17209: PPUSH
17210: LD_INT 9
17212: PPUSH
17213: LD_INT 0
17215: PPUSH
17216: LD_INT 5
17218: PPUSH
17219: LD_INT 6
17221: PPUSH
17222: LD_INT 2
17224: PPUSH
17225: LD_INT 4
17227: PPUSH
17228: LD_INT 1
17230: PPUSH
17231: LD_INT 1
17233: PPUSH
17234: CALL 5222 0 12
// end ;
17238: END
// export function Dial_SibTechs ; begin
17239: LD_INT 0
17241: PPUSH
// dial_SibTechsBlocker = true ;
17242: LD_ADDR_EXP 9
17246: PUSH
17247: LD_INT 1
17249: ST_TO_ADDR
// DialogueOn ;
17250: CALL_OW 6
// if IsOK ( Petrosyan ) then
17254: LD_EXP 43
17258: PPUSH
17259: CALL_OW 302
17263: IFFALSE 17279
// Say ( Petrosyan , DSibResearch-Pty-1 ) else
17265: LD_EXP 43
17269: PPUSH
17270: LD_STRING DSibResearch-Pty-1
17272: PPUSH
17273: CALL_OW 88
17277: GO 17302
// if IsOK ( Dolgov ) then
17279: LD_EXP 45
17283: PPUSH
17284: CALL_OW 302
17288: IFFALSE 17302
// Say ( Dolgov , DSibResearch-Dol-1 ) ;
17290: LD_EXP 45
17294: PPUSH
17295: LD_STRING DSibResearch-Dol-1
17297: PPUSH
17298: CALL_OW 88
// Say ( Burlak , DSibResearch-Bur-1 ) ;
17302: LD_EXP 39
17306: PPUSH
17307: LD_STRING DSibResearch-Bur-1
17309: PPUSH
17310: CALL_OW 88
// SayRadio ( Platonov , DSibResearch-Pla-1 ) ;
17314: LD_EXP 47
17318: PPUSH
17319: LD_STRING DSibResearch-Pla-1
17321: PPUSH
17322: CALL_OW 94
// DialogueOff ;
17326: CALL_OW 7
// ChangeMissionObjectives ( MResearch ) ;
17330: LD_STRING MResearch
17332: PPUSH
17333: CALL_OW 337
// SetRestrict ( b_ext_siberium , 3 , true ) ;
17337: LD_INT 21
17339: PPUSH
17340: LD_INT 3
17342: PPUSH
17343: LD_INT 1
17345: PPUSH
17346: CALL_OW 324
// SetRestrict ( b_siberite_power , 3 , true ) ;
17350: LD_INT 28
17352: PPUSH
17353: LD_INT 3
17355: PPUSH
17356: LD_INT 1
17358: PPUSH
17359: CALL_OW 324
// SetRestrict ( b_lab_siberium , 3 , true ) ;
17363: LD_INT 11
17365: PPUSH
17366: LD_INT 3
17368: PPUSH
17369: LD_INT 1
17371: PPUSH
17372: CALL_OW 324
// SetRestrict ( b_lab_spacetime , 3 , true ) ;
17376: LD_INT 14
17378: PPUSH
17379: LD_INT 3
17381: PPUSH
17382: LD_INT 1
17384: PPUSH
17385: CALL_OW 324
// end ;
17389: LD_VAR 0 1
17393: RET
// export function Dial_ResearchMatPredictions ; begin
17394: LD_INT 0
17396: PPUSH
// techMatPredStatus = state_researched ;
17397: LD_ADDR_EXP 6
17401: PUSH
17402: LD_INT 2
17404: ST_TO_ADDR
// ChangeMissionObjectives ( MOutPred ) ;
17405: LD_STRING MOutPred
17407: PPUSH
17408: CALL_OW 337
// DialogueOn ;
17412: CALL_OW 6
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
17416: LD_EXP 43
17420: PPUSH
17421: CALL_OW 302
17425: PUSH
17426: LD_EXP 45
17430: PPUSH
17431: CALL_OW 302
17435: OR
17436: IFFALSE 17558
// begin if IsOK ( Petrosyan ) then
17438: LD_EXP 43
17442: PPUSH
17443: CALL_OW 302
17447: IFFALSE 17463
// Say ( Petrosyan , DNoMaterial-Pty-1 ) else
17449: LD_EXP 43
17453: PPUSH
17454: LD_STRING DNoMaterial-Pty-1
17456: PPUSH
17457: CALL_OW 88
17461: GO 17486
// if IsOK ( Dolgov ) then
17463: LD_EXP 45
17467: PPUSH
17468: CALL_OW 302
17472: IFFALSE 17486
// Say ( Dolgov , DNoMaterial-Dol-1 ) ;
17474: LD_EXP 45
17478: PPUSH
17479: LD_STRING DNoMaterial-Dol-1
17481: PPUSH
17482: CALL_OW 88
// Say ( Burlak , DNoMaterial-Bur-1 ) ;
17486: LD_EXP 39
17490: PPUSH
17491: LD_STRING DNoMaterial-Bur-1
17493: PPUSH
17494: CALL_OW 88
// if IsOK ( Petrosyan ) then
17498: LD_EXP 43
17502: PPUSH
17503: CALL_OW 302
17507: IFFALSE 17523
// Say ( Petrosyan , DNoMaterial-Pty-2 ) else
17509: LD_EXP 43
17513: PPUSH
17514: LD_STRING DNoMaterial-Pty-2
17516: PPUSH
17517: CALL_OW 88
17521: GO 17546
// if IsOK ( Dolgov ) then
17523: LD_EXP 45
17527: PPUSH
17528: CALL_OW 302
17532: IFFALSE 17546
// Say ( Dolgov , DNoMaterial-Dol-2 ) ;
17534: LD_EXP 45
17538: PPUSH
17539: LD_STRING DNoMaterial-Dol-2
17541: PPUSH
17542: CALL_OW 88
// Say ( Burlak , DNoMaterial-Bur-2 ) ;
17546: LD_EXP 39
17550: PPUSH
17551: LD_STRING DNoMaterial-Bur-2
17553: PPUSH
17554: CALL_OW 88
// end ; DialogueOff ;
17558: CALL_OW 7
// end ;
17562: LD_VAR 0 1
17566: RET
// every 0 0$1 trigger not dial_SibTechsBlocker and ( GetResourceVisibility ( 116 , 123 , 3 ) or GetResourceVisibility ( 72 , 86 , 3 ) ) do
17567: LD_EXP 9
17571: NOT
17572: PUSH
17573: LD_INT 116
17575: PPUSH
17576: LD_INT 123
17578: PPUSH
17579: LD_INT 3
17581: PPUSH
17582: CALL_OW 440
17586: PUSH
17587: LD_INT 72
17589: PPUSH
17590: LD_INT 86
17592: PPUSH
17593: LD_INT 3
17595: PPUSH
17596: CALL_OW 440
17600: OR
17601: AND
17602: IFFALSE 17611
17604: GO 17606
17606: DISABLE
// Dial_SibTechs ;
17607: CALL 17239 0 0
17611: END
// every 5 5$0 trigger claimOvsyenkoBase do
17612: LD_EXP 15
17616: IFFALSE 17640
17618: GO 17620
17620: DISABLE
// begin PrepareVsevolod ;
17621: CALL 2644 0 0
// ComAgressiveMove ( vsevolodTeam , 61 , 45 ) ;
17625: LD_EXP 52
17629: PPUSH
17630: LD_INT 61
17632: PPUSH
17633: LD_INT 45
17635: PPUSH
17636: CALL_OW 114
// end ;
17640: END
// every 0 0$1 trigger immortalVsevolodTeam do var unit ;
17641: LD_EXP 18
17645: IFFALSE 17683
17647: GO 17649
17649: DISABLE
17650: LD_INT 0
17652: PPUSH
// begin enable ;
17653: ENABLE
// for unit in vsevolodTeam do
17654: LD_ADDR_VAR 0 1
17658: PUSH
17659: LD_EXP 52
17663: PUSH
17664: FOR_IN
17665: IFFALSE 17681
// SetLives ( unit , 1000 ) ;
17667: LD_VAR 0 1
17671: PPUSH
17672: LD_INT 1000
17674: PPUSH
17675: CALL_OW 234
17679: GO 17664
17681: POP
17682: POP
// end ;
17683: PPOPN 1
17685: END
// every 0 0$1 trigger GetLives ( ter_bun1 ) <= 650 or GetLives ( ter_arm1 ) <= 650 do var belkovSavedIn02 , tmp , speaker ;
17686: LD_INT 170
17688: PPUSH
17689: CALL_OW 256
17693: PUSH
17694: LD_INT 650
17696: LESSEQUAL
17697: PUSH
17698: LD_INT 174
17700: PPUSH
17701: CALL_OW 256
17705: PUSH
17706: LD_INT 650
17708: LESSEQUAL
17709: OR
17710: IFFALSE 18871
17712: GO 17714
17714: DISABLE
17715: LD_INT 0
17717: PPUSH
17718: PPUSH
17719: PPUSH
// begin ComMoveXY ( UnitFilter ( terminalBase , [ f_type , unit_human ] ) , 35 , 58 ) ;
17720: LD_EXP 60
17724: PPUSH
17725: LD_INT 21
17727: PUSH
17728: LD_INT 1
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PPUSH
17735: CALL_OW 72
17739: PPUSH
17740: LD_INT 35
17742: PPUSH
17743: LD_INT 58
17745: PPUSH
17746: CALL_OW 111
// SetSide ( UnitFilter ( terminalBase , [ f_type , unit_building ] ) , 6 ) ;
17750: LD_EXP 60
17754: PPUSH
17755: LD_INT 21
17757: PUSH
17758: LD_INT 3
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PPUSH
17765: CALL_OW 72
17769: PPUSH
17770: LD_INT 6
17772: PPUSH
17773: CALL_OW 235
// immortalVsevolodTeam = false ;
17777: LD_ADDR_EXP 18
17781: PUSH
17782: LD_INT 0
17784: ST_TO_ADDR
// ComEnterUnit ( [ Vsevolod , vsevolodTeam [ 3 ] ] , ter_arm1 ) ;
17785: LD_EXP 51
17789: PUSH
17790: LD_EXP 52
17794: PUSH
17795: LD_INT 3
17797: ARRAY
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PPUSH
17803: LD_INT 174
17805: PPUSH
17806: CALL_OW 120
// ComEnterUnit ( vsevolodTeam [ 4 ] , ter_bun1 ) ;
17810: LD_EXP 52
17814: PUSH
17815: LD_INT 4
17817: ARRAY
17818: PPUSH
17819: LD_INT 170
17821: PPUSH
17822: CALL_OW 120
// SetLives ( Petr , 500 ) ;
17826: LD_EXP 53
17830: PPUSH
17831: LD_INT 500
17833: PPUSH
17834: CALL_OW 234
// ComEnterUnit ( vsevolodTeam [ 2 ] , terminal ) ;
17838: LD_EXP 52
17842: PUSH
17843: LD_INT 2
17845: ARRAY
17846: PPUSH
17847: LD_INT 168
17849: PPUSH
17850: CALL_OW 120
// wait ( 0 0$5 ) ;
17854: LD_INT 175
17856: PPUSH
17857: CALL_OW 67
// DialogueOn ;
17861: CALL_OW 6
// if IsOK ( Dolgov ) then
17865: LD_EXP 45
17869: PPUSH
17870: CALL_OW 302
17874: IFFALSE 17888
// Say ( Dolgov , DVsevolod-Dol-1 ) ;
17876: LD_EXP 45
17880: PPUSH
17881: LD_STRING DVsevolod-Dol-1
17883: PPUSH
17884: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-1 ) ;
17888: LD_EXP 51
17892: PPUSH
17893: LD_STRING DVsevolod-Vse-1
17895: PPUSH
17896: CALL_OW 94
// if IsOK ( Gleb ) then
17900: LD_EXP 42
17904: PPUSH
17905: CALL_OW 302
17909: IFFALSE 17947
// begin Say ( Burlak , DVsevolod-Bur-1 ) ;
17911: LD_EXP 39
17915: PPUSH
17916: LD_STRING DVsevolod-Bur-1
17918: PPUSH
17919: CALL_OW 88
// Say ( Gleb , DVsevolod-Glb-1 ) ;
17923: LD_EXP 42
17927: PPUSH
17928: LD_STRING DVsevolod-Glb-1
17930: PPUSH
17931: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-2 ) ;
17935: LD_EXP 51
17939: PPUSH
17940: LD_STRING DVsevolod-Vse-2
17942: PPUSH
17943: CALL_OW 94
// end ; Say ( Burlak , DVsevolod-Bur-2 ) ;
17947: LD_EXP 39
17951: PPUSH
17952: LD_STRING DVsevolod-Bur-2
17954: PPUSH
17955: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-3 ) ;
17959: LD_EXP 51
17963: PPUSH
17964: LD_STRING DVsevolod-Vse-3
17966: PPUSH
17967: CALL_OW 94
// Say ( Burlak , DVsevolod-Bur-3 ) ;
17971: LD_EXP 39
17975: PPUSH
17976: LD_STRING DVsevolod-Bur-3
17978: PPUSH
17979: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-4 ) ;
17983: LD_EXP 51
17987: PPUSH
17988: LD_STRING DVsevolod-Vse-4
17990: PPUSH
17991: CALL_OW 94
// Say ( Burlak , DVsevolod-Bur-4 ) ;
17995: LD_EXP 39
17999: PPUSH
18000: LD_STRING DVsevolod-Bur-4
18002: PPUSH
18003: CALL_OW 88
// if IsOK ( Gleb ) then
18007: LD_EXP 42
18011: PPUSH
18012: CALL_OW 302
18016: IFFALSE 18044
// begin Say ( Gleb , DVsevolod-Glb-4 ) ;
18018: LD_EXP 42
18022: PPUSH
18023: LD_STRING DVsevolod-Glb-4
18025: PPUSH
18026: CALL_OW 88
// Say ( Burlak , DVsevolod-Bur-5 ) ;
18030: LD_EXP 39
18034: PPUSH
18035: LD_STRING DVsevolod-Bur-5
18037: PPUSH
18038: CALL_OW 88
// end else
18042: GO 18118
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-RSol1-5 ,  , false , true ) ;
18044: LD_INT 22
18046: PUSH
18047: LD_INT 3
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: LD_INT 21
18056: PUSH
18057: LD_INT 1
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: LD_INT 50
18066: PUSH
18067: EMPTY
18068: LIST
18069: PUSH
18070: LD_INT 26
18072: PUSH
18073: LD_INT 1
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: LD_INT 23
18082: PUSH
18083: LD_INT 3
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: PPUSH
18097: CALL_OW 69
18101: PPUSH
18102: LD_STRING DVsevolod-RSol1-5
18104: PPUSH
18105: LD_STRING 
18107: PPUSH
18108: LD_INT 0
18110: PPUSH
18111: LD_INT 1
18113: PPUSH
18114: CALL 12076 0 5
// Say ( Burlak , DVsevolod-Bur-6 ) ;
18118: LD_EXP 39
18122: PPUSH
18123: LD_STRING DVsevolod-Bur-6
18125: PPUSH
18126: CALL_OW 88
// CenterOnXY ( 59 , 40 ) ;
18130: LD_INT 59
18132: PPUSH
18133: LD_INT 40
18135: PPUSH
18136: CALL_OW 84
// RevealFogArea ( 3 , TerminalBaseArea ) ;
18140: LD_INT 3
18142: PPUSH
18143: LD_INT 4
18145: PPUSH
18146: CALL_OW 332
// if IsOK ( Dolgov ) then
18150: LD_EXP 45
18154: PPUSH
18155: CALL_OW 302
18159: IFFALSE 18175
// Say ( Dolgov , DVsevolod-Dol-6 ) else
18161: LD_EXP 45
18165: PPUSH
18166: LD_STRING DVsevolod-Dol-6
18168: PPUSH
18169: CALL_OW 88
18173: GO 18249
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-Dol-6 ,  , false , true ) ;
18175: LD_INT 22
18177: PUSH
18178: LD_INT 3
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: LD_INT 21
18187: PUSH
18188: LD_INT 1
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 50
18197: PUSH
18198: EMPTY
18199: LIST
18200: PUSH
18201: LD_INT 26
18203: PUSH
18204: LD_INT 1
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 23
18213: PUSH
18214: LD_INT 3
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: PPUSH
18228: CALL_OW 69
18232: PPUSH
18233: LD_STRING DVsevolod-Dol-6
18235: PPUSH
18236: LD_STRING 
18238: PPUSH
18239: LD_INT 0
18241: PPUSH
18242: LD_INT 1
18244: PPUSH
18245: CALL 12076 0 5
// Say ( Burlak , DVsevolod-Bur-7 ) ;
18249: LD_EXP 39
18253: PPUSH
18254: LD_STRING DVsevolod-Bur-7
18256: PPUSH
18257: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-7 ) ;
18261: LD_EXP 51
18265: PPUSH
18266: LD_STRING DVsevolod-Vse-7
18268: PPUSH
18269: CALL_OW 94
// DialogueOff ;
18273: CALL_OW 7
// ChangeMissionObjectives ( MVsevolod ) ;
18277: LD_STRING MVsevolod
18279: PPUSH
18280: CALL_OW 337
// enableVsevolodCounter = true ;
18284: LD_ADDR_EXP 22
18288: PUSH
18289: LD_INT 1
18291: ST_TO_ADDR
// canGoNorth = true ;
18292: LD_ADDR_EXP 21
18296: PUSH
18297: LD_INT 1
18299: ST_TO_ADDR
// PrepareSoldiersInBunkers ;
18300: CALL 3953 0 0
// wait ( 0 0$7 ) ;
18304: LD_INT 245
18306: PPUSH
18307: CALL_OW 67
// belkovSavedIn02 = TestCharacters ( 02_Belkov ) ;
18311: LD_ADDR_VAR 0 1
18315: PUSH
18316: LD_STRING 02_Belkov
18318: PPUSH
18319: CALL_OW 28
18323: ST_TO_ADDR
// DialogueOn ;
18324: CALL_OW 6
// if belkovSavedIn02 then
18328: LD_VAR 0 1
18332: IFFALSE 18533
// begin if IsOK ( Gleb ) then
18334: LD_EXP 42
18338: PPUSH
18339: CALL_OW 302
18343: IFFALSE 18357
// Say ( Gleb , DHelp1-Glb-1 ) ;
18345: LD_EXP 42
18349: PPUSH
18350: LD_STRING DHelp1-Glb-1
18352: PPUSH
18353: CALL_OW 88
// if IsOK ( Dolgov ) then
18357: LD_EXP 45
18361: PPUSH
18362: CALL_OW 302
18366: IFFALSE 18380
// Say ( Dolgov , DHelp1-Dol-1 ) ;
18368: LD_EXP 45
18372: PPUSH
18373: LD_STRING DHelp1-Dol-1
18375: PPUSH
18376: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Gleb , Dolgov , Titov ] ;
18380: LD_ADDR_VAR 0 2
18384: PUSH
18385: LD_INT 22
18387: PUSH
18388: LD_INT 3
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 21
18397: PUSH
18398: LD_INT 1
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: LD_INT 50
18407: PUSH
18408: EMPTY
18409: LIST
18410: PUSH
18411: LD_INT 26
18413: PUSH
18414: LD_INT 1
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 23
18423: PUSH
18424: LD_INT 3
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: PPUSH
18438: CALL_OW 69
18442: PUSH
18443: LD_EXP 42
18447: PUSH
18448: LD_EXP 45
18452: PUSH
18453: LD_EXP 44
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: LIST
18462: DIFF
18463: ST_TO_ADDR
// DialogRandom ( tmp , DHelp1-RSol1-1 ,  , false , true ) ;
18464: LD_VAR 0 2
18468: PPUSH
18469: LD_STRING DHelp1-RSol1-1
18471: PPUSH
18472: LD_STRING 
18474: PPUSH
18475: LD_INT 0
18477: PPUSH
18478: LD_INT 1
18480: PPUSH
18481: CALL 12076 0 5
// if IsOK ( Titov ) then
18485: LD_EXP 44
18489: PPUSH
18490: CALL_OW 302
18494: IFFALSE 18508
// Say ( Titov , DHelp1-Tit-1 ) ;
18496: LD_EXP 44
18500: PPUSH
18501: LD_STRING DHelp1-Tit-1
18503: PPUSH
18504: CALL_OW 88
// if IsOK ( Gleb ) then
18508: LD_EXP 42
18512: PPUSH
18513: CALL_OW 302
18517: IFFALSE 18531
// Say ( Gleb , DHelp1-Glb-2 ) ;
18519: LD_EXP 42
18523: PPUSH
18524: LD_STRING DHelp1-Glb-2
18526: PPUSH
18527: CALL_OW 88
// end else
18531: GO 18744
// begin if IsOK ( Titov ) then
18533: LD_EXP 44
18537: PPUSH
18538: CALL_OW 302
18542: IFFALSE 18556
// Say ( Titov , DHelp2-Tit-1 ) ;
18544: LD_EXP 44
18548: PPUSH
18549: LD_STRING DHelp2-Tit-1
18551: PPUSH
18552: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Gleb , Titov ] ;
18556: LD_ADDR_VAR 0 2
18560: PUSH
18561: LD_INT 22
18563: PUSH
18564: LD_INT 3
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: LD_INT 21
18573: PUSH
18574: LD_INT 1
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PUSH
18581: LD_INT 50
18583: PUSH
18584: EMPTY
18585: LIST
18586: PUSH
18587: LD_INT 26
18589: PUSH
18590: LD_INT 1
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 23
18599: PUSH
18600: LD_INT 3
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: PPUSH
18614: CALL_OW 69
18618: PUSH
18619: LD_EXP 42
18623: PUSH
18624: LD_EXP 44
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: DIFF
18633: ST_TO_ADDR
// speaker = DialogRandom ( tmp , DHelp2-RSol1-1 ,  , false , true ) ;
18634: LD_ADDR_VAR 0 3
18638: PUSH
18639: LD_VAR 0 2
18643: PPUSH
18644: LD_STRING DHelp2-RSol1-1
18646: PPUSH
18647: LD_STRING 
18649: PPUSH
18650: LD_INT 0
18652: PPUSH
18653: LD_INT 1
18655: PPUSH
18656: CALL 12076 0 5
18660: ST_TO_ADDR
// if IsOK ( Gleb ) then
18661: LD_EXP 42
18665: PPUSH
18666: CALL_OW 302
18670: IFFALSE 18684
// Say ( Gleb , DHelp2-Glb-1 ) ;
18672: LD_EXP 42
18676: PPUSH
18677: LD_STRING DHelp2-Glb-1
18679: PPUSH
18680: CALL_OW 88
// tmp = tmp diff speaker ;
18684: LD_ADDR_VAR 0 2
18688: PUSH
18689: LD_VAR 0 2
18693: PUSH
18694: LD_VAR 0 3
18698: DIFF
18699: ST_TO_ADDR
// DialogRandom ( tmp , DHelp2-RSol2-1 ,  , false , true ) ;
18700: LD_VAR 0 2
18704: PPUSH
18705: LD_STRING DHelp2-RSol2-1
18707: PPUSH
18708: LD_STRING 
18710: PPUSH
18711: LD_INT 0
18713: PPUSH
18714: LD_INT 1
18716: PPUSH
18717: CALL 12076 0 5
// if IsOK ( Titov ) then
18721: LD_EXP 44
18725: PPUSH
18726: CALL_OW 302
18730: IFFALSE 18744
// Say ( Titov , DHelp2-Tit-2 ) ;
18732: LD_EXP 44
18736: PPUSH
18737: LD_STRING DHelp2-Tit-2
18739: PPUSH
18740: CALL_OW 88
// end ; Say ( Burlak , DHelp3-Bur-1 ) ;
18744: LD_EXP 39
18748: PPUSH
18749: LD_STRING DHelp3-Bur-1
18751: PPUSH
18752: CALL_OW 88
// if IsOK ( Lipshchin ) then
18756: LD_EXP 46
18760: PPUSH
18761: CALL_OW 302
18765: IFFALSE 18781
// Say ( Lipshchin , DHelp3-Lip-1 ) else
18767: LD_EXP 46
18771: PPUSH
18772: LD_STRING DHelp3-Lip-1
18774: PPUSH
18775: CALL_OW 88
18779: GO 18855
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-Dol-6 ,  , false , true ) ;
18781: LD_INT 22
18783: PUSH
18784: LD_INT 3
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 21
18793: PUSH
18794: LD_INT 1
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: LD_INT 50
18803: PUSH
18804: EMPTY
18805: LIST
18806: PUSH
18807: LD_INT 26
18809: PUSH
18810: LD_INT 1
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 23
18819: PUSH
18820: LD_INT 3
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: PPUSH
18834: CALL_OW 69
18838: PPUSH
18839: LD_STRING DVsevolod-Dol-6
18841: PPUSH
18842: LD_STRING 
18844: PPUSH
18845: LD_INT 0
18847: PPUSH
18848: LD_INT 1
18850: PPUSH
18851: CALL 12076 0 5
// Say ( Burlak , DHelp3-Bur-2 ) ;
18855: LD_EXP 39
18859: PPUSH
18860: LD_STRING DHelp3-Bur-2
18862: PPUSH
18863: CALL_OW 88
// DialogueOff ;
18867: CALL_OW 7
// end ;
18871: PPOPN 3
18873: END
// every 0 0$1 trigger claimOvsyenkoBase and not FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] , [ f_type , unit_vehicle ] ] ] ) and FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
18874: LD_EXP 15
18878: PUSH
18879: LD_INT 3
18881: PPUSH
18882: LD_INT 22
18884: PUSH
18885: LD_INT 3
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PUSH
18892: LD_INT 2
18894: PUSH
18895: LD_INT 21
18897: PUSH
18898: LD_INT 1
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 59
18907: PUSH
18908: EMPTY
18909: LIST
18910: PUSH
18911: LD_INT 21
18913: PUSH
18914: LD_INT 2
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PPUSH
18931: CALL_OW 70
18935: NOT
18936: AND
18937: PUSH
18938: LD_INT 3
18940: PPUSH
18941: LD_INT 22
18943: PUSH
18944: LD_INT 1
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 2
18953: PUSH
18954: LD_INT 21
18956: PUSH
18957: LD_INT 1
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 21
18966: PUSH
18967: LD_INT 2
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: LIST
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PPUSH
18983: CALL_OW 70
18987: AND
18988: IFFALSE 19155
18990: GO 18992
18992: DISABLE
// begin lostAgainBase = true ;
18993: LD_ADDR_EXP 17
18997: PUSH
18998: LD_INT 1
19000: ST_TO_ADDR
// SetSide ( FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , 1 ) ;
19001: LD_INT 3
19003: PPUSH
19004: LD_INT 22
19006: PUSH
19007: LD_INT 3
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 21
19016: PUSH
19017: LD_INT 3
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PPUSH
19028: CALL_OW 70
19032: PPUSH
19033: LD_INT 1
19035: PPUSH
19036: CALL_OW 235
// if IsOK ( Gleb ) then
19040: LD_EXP 42
19044: PPUSH
19045: CALL_OW 302
19049: IFFALSE 19075
// begin Say ( Gleb , DOvsyenkoCaptured-Glb-1 ) ;
19051: LD_EXP 42
19055: PPUSH
19056: LD_STRING DOvsyenkoCaptured-Glb-1
19058: PPUSH
19059: CALL_OW 88
// Say ( Burlak , DOvsyenkoCaptured-Bur-1 ) ;
19063: LD_EXP 39
19067: PPUSH
19068: LD_STRING DOvsyenkoCaptured-Bur-1
19070: PPUSH
19071: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Gleb , DOvsyenkoCaptured-RSol1-1 ,  , false , true ) ;
19075: LD_INT 22
19077: PUSH
19078: LD_INT 3
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 21
19087: PUSH
19088: LD_INT 1
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 50
19097: PUSH
19098: EMPTY
19099: LIST
19100: PUSH
19101: LD_INT 26
19103: PUSH
19104: LD_INT 1
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 23
19113: PUSH
19114: LD_INT 3
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: PPUSH
19128: CALL_OW 69
19132: PUSH
19133: LD_EXP 42
19137: DIFF
19138: PPUSH
19139: LD_STRING DOvsyenkoCaptured-RSol1-1
19141: PPUSH
19142: LD_STRING 
19144: PPUSH
19145: LD_INT 0
19147: PPUSH
19148: LD_INT 1
19150: PPUSH
19151: CALL 12076 0 5
// end ;
19155: END
// every 0 0$1 trigger FilterUnitsInArea ( TrapArea , [ [ f_side , 3 ] , [ f_ok ] ] ) do
19156: LD_INT 12
19158: PPUSH
19159: LD_INT 22
19161: PUSH
19162: LD_INT 3
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 50
19171: PUSH
19172: EMPTY
19173: LIST
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PPUSH
19179: CALL_OW 70
19183: IFFALSE 19192
19185: GO 19187
19187: DISABLE
// PrepareTrap ;
19188: CALL 3774 0 0
19192: END
// every 0 0$1 trigger not dial_TrapDialogBlocker do var tmp , speaker , unit ;
19193: LD_EXP 11
19197: NOT
19198: IFFALSE 19416
19200: GO 19202
19202: DISABLE
19203: LD_INT 0
19205: PPUSH
19206: PPUSH
19207: PPUSH
// begin enable ;
19208: ENABLE
// for unit in trapTeam do
19209: LD_ADDR_VAR 0 3
19213: PUSH
19214: LD_EXP 62
19218: PUSH
19219: FOR_IN
19220: IFFALSE 19414
// if See ( 3 , unit ) then
19222: LD_INT 3
19224: PPUSH
19225: LD_VAR 0 3
19229: PPUSH
19230: CALL_OW 292
19234: IFFALSE 19412
// begin dial_TrapDialogBlocker = true ;
19236: LD_ADDR_EXP 11
19240: PUSH
19241: LD_INT 1
19243: ST_TO_ADDR
// DialogueOn ;
19244: CALL_OW 6
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Gleb ;
19248: LD_ADDR_VAR 0 1
19252: PUSH
19253: LD_INT 22
19255: PUSH
19256: LD_INT 3
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: LD_INT 21
19265: PUSH
19266: LD_INT 1
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 50
19275: PUSH
19276: EMPTY
19277: LIST
19278: PUSH
19279: LD_INT 26
19281: PUSH
19282: LD_INT 1
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 23
19291: PUSH
19292: LD_INT 3
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: PPUSH
19306: CALL_OW 69
19310: PUSH
19311: LD_EXP 42
19315: DIFF
19316: ST_TO_ADDR
// speaker = DialogRandom ( tmp , DPartyAttacked-RSol1-1 ,  , false , true ) ;
19317: LD_ADDR_VAR 0 2
19321: PUSH
19322: LD_VAR 0 1
19326: PPUSH
19327: LD_STRING DPartyAttacked-RSol1-1
19329: PPUSH
19330: LD_STRING 
19332: PPUSH
19333: LD_INT 0
19335: PPUSH
19336: LD_INT 1
19338: PPUSH
19339: CALL 12076 0 5
19343: ST_TO_ADDR
// tmp = tmp diff speaker ;
19344: LD_ADDR_VAR 0 1
19348: PUSH
19349: LD_VAR 0 1
19353: PUSH
19354: LD_VAR 0 2
19358: DIFF
19359: ST_TO_ADDR
// if IsOK ( Gleb ) then
19360: LD_EXP 42
19364: PPUSH
19365: CALL_OW 302
19369: IFFALSE 19383
// Say ( Gleb , DPartyAttacked-Glb-1 ) ;
19371: LD_EXP 42
19375: PPUSH
19376: LD_STRING DPartyAttacked-Glb-1
19378: PPUSH
19379: CALL_OW 88
// DialogRandom ( tmp , DPartyAttacked-RSol1-2 ,  , false , true ) ;
19383: LD_VAR 0 1
19387: PPUSH
19388: LD_STRING DPartyAttacked-RSol1-2
19390: PPUSH
19391: LD_STRING 
19393: PPUSH
19394: LD_INT 0
19396: PPUSH
19397: LD_INT 1
19399: PPUSH
19400: CALL 12076 0 5
// DialogueOff ;
19404: CALL_OW 7
// exit ;
19408: POP
19409: POP
19410: GO 19416
// end ;
19412: GO 19219
19414: POP
19415: POP
// end ;
19416: PPOPN 3
19418: END
// every 0 0$1 trigger not savedVsevolod and IsOK ( Vsevolod ) and FilterUnitsInArea ( TerminalBaseArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ [ f_type , unit_human ] , [ f_nation , nation_russian ] ] , [ f_type , unit_vehicle ] ] ] ) do var nearUnit , unit , maleRandomUnits ;
19419: LD_EXP 19
19423: NOT
19424: PUSH
19425: LD_EXP 51
19429: PPUSH
19430: CALL_OW 302
19434: AND
19435: PUSH
19436: LD_INT 4
19438: PPUSH
19439: LD_INT 22
19441: PUSH
19442: LD_INT 3
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PUSH
19449: LD_INT 50
19451: PUSH
19452: EMPTY
19453: LIST
19454: PUSH
19455: LD_INT 2
19457: PUSH
19458: LD_INT 21
19460: PUSH
19461: LD_INT 1
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 23
19470: PUSH
19471: LD_INT 3
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 21
19484: PUSH
19485: LD_INT 2
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: LIST
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: LIST
19501: PPUSH
19502: CALL_OW 70
19506: AND
19507: IFFALSE 20149
19509: GO 19511
19511: DISABLE
19512: LD_INT 0
19514: PPUSH
19515: PPUSH
19516: PPUSH
// begin savedVsevolod = true ;
19517: LD_ADDR_EXP 19
19521: PUSH
19522: LD_INT 1
19524: ST_TO_ADDR
// ChangeMissionObjectives ( MVsevolodOut ) ;
19525: LD_STRING MVsevolodOut
19527: PPUSH
19528: CALL_OW 337
// unit = FilterUnitsInArea ( TerminalBaseArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ [ f_type , unit_human ] , [ f_nation , nation_russian ] ] , [ f_type , unit_vehicle ] ] ] ) ;
19532: LD_ADDR_VAR 0 2
19536: PUSH
19537: LD_INT 4
19539: PPUSH
19540: LD_INT 22
19542: PUSH
19543: LD_INT 3
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: LD_INT 50
19552: PUSH
19553: EMPTY
19554: LIST
19555: PUSH
19556: LD_INT 2
19558: PUSH
19559: LD_INT 21
19561: PUSH
19562: LD_INT 1
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 23
19571: PUSH
19572: LD_INT 3
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 21
19585: PUSH
19586: LD_INT 2
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: LIST
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: LIST
19602: PPUSH
19603: CALL_OW 70
19607: ST_TO_ADDR
// unit = unit [ 1 ] ;
19608: LD_ADDR_VAR 0 2
19612: PUSH
19613: LD_VAR 0 2
19617: PUSH
19618: LD_INT 1
19620: ARRAY
19621: ST_TO_ADDR
// if GetType ( unit ) = unit_vehicle then
19622: LD_VAR 0 2
19626: PPUSH
19627: CALL_OW 247
19631: PUSH
19632: LD_INT 2
19634: EQUAL
19635: IFFALSE 19656
// unit = UnitsInside ( unit ) [ 1 ] ;
19637: LD_ADDR_VAR 0 2
19641: PUSH
19642: LD_VAR 0 2
19646: PPUSH
19647: CALL_OW 313
19651: PUSH
19652: LD_INT 1
19654: ARRAY
19655: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
19656: LD_INT 22
19658: PUSH
19659: LD_INT 6
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PPUSH
19666: CALL_OW 69
19670: PPUSH
19671: LD_INT 3
19673: PPUSH
19674: CALL_OW 235
// if not unit = Burlak then
19678: LD_VAR 0 2
19682: PUSH
19683: LD_EXP 39
19687: EQUAL
19688: NOT
19689: IFFALSE 19866
// begin vsevolodWaitGorky = true ;
19691: LD_ADDR_EXP 20
19695: PUSH
19696: LD_INT 1
19698: ST_TO_ADDR
// DialogueOn ;
19699: CALL_OW 6
// Say ( Vsevolod , DOtherMeetVsev-Vse-1 ) ;
19703: LD_EXP 51
19707: PPUSH
19708: LD_STRING DOtherMeetVsev-Vse-1
19710: PPUSH
19711: CALL_OW 88
// if GetSex ( unit ) = sex_female then
19715: LD_VAR 0 2
19719: PPUSH
19720: CALL_OW 258
19724: PUSH
19725: LD_INT 2
19727: EQUAL
19728: IFFALSE 19848
// begin maleRandomUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff vsevolodTeam ;
19730: LD_ADDR_VAR 0 3
19734: PUSH
19735: LD_INT 22
19737: PUSH
19738: LD_INT 3
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: LD_INT 21
19747: PUSH
19748: LD_INT 1
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 50
19757: PUSH
19758: EMPTY
19759: LIST
19760: PUSH
19761: LD_INT 26
19763: PUSH
19764: LD_INT 1
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 23
19773: PUSH
19774: LD_INT 3
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: PPUSH
19788: CALL_OW 69
19792: PUSH
19793: LD_EXP 52
19797: DIFF
19798: ST_TO_ADDR
// maleRandomUnits = maleRandomUnits diff Gleb ;
19799: LD_ADDR_VAR 0 3
19803: PUSH
19804: LD_VAR 0 3
19808: PUSH
19809: LD_EXP 42
19813: DIFF
19814: ST_TO_ADDR
// if maleRandomUnits then
19815: LD_VAR 0 3
19819: IFFALSE 19846
// DialogRandom ( maleRandomUnits [ 1 ] , DOtherMeetVsev-RSol1-1 ,  , false , true ) ;
19821: LD_VAR 0 3
19825: PUSH
19826: LD_INT 1
19828: ARRAY
19829: PPUSH
19830: LD_STRING DOtherMeetVsev-RSol1-1
19832: PPUSH
19833: LD_STRING 
19835: PPUSH
19836: LD_INT 0
19838: PPUSH
19839: LD_INT 1
19841: PPUSH
19842: CALL 12076 0 5
// end else
19846: GO 19860
// Say ( unit , DOtherMeetVsev-RSol1-1 ) ;
19848: LD_VAR 0 2
19852: PPUSH
19853: LD_STRING DOtherMeetVsev-RSol1-1
19855: PPUSH
19856: CALL_OW 88
// DialogueOff ;
19860: CALL_OW 7
// end else
19864: GO 20149
// begin DialogueOn ;
19866: CALL_OW 6
// Say ( Vsevolod , DMeetVsev-Vse-1 ) ;
19870: LD_EXP 51
19874: PPUSH
19875: LD_STRING DMeetVsev-Vse-1
19877: PPUSH
19878: CALL_OW 88
// Say ( Burlak , DMeetVsev-Bur-1 ) ;
19882: LD_EXP 39
19886: PPUSH
19887: LD_STRING DMeetVsev-Bur-1
19889: PPUSH
19890: CALL_OW 88
// if lostAgainBase then
19894: LD_EXP 17
19898: IFFALSE 19938
// begin Say ( Vsevolod , DMeetVsev2-Vse-1 ) ;
19900: LD_EXP 51
19904: PPUSH
19905: LD_STRING DMeetVsev2-Vse-1
19907: PPUSH
19908: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-1 ) ;
19912: LD_EXP 39
19916: PPUSH
19917: LD_STRING DMeetVsev2-Bur-1
19919: PPUSH
19920: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-2 ) ;
19924: LD_EXP 51
19928: PPUSH
19929: LD_STRING DMeetVsev2-Vse-2
19931: PPUSH
19932: CALL_OW 88
// end else
19936: GO 19974
// begin Say ( Vsevolod , DMeetVsev2-Vse-2a ) ;
19938: LD_EXP 51
19942: PPUSH
19943: LD_STRING DMeetVsev2-Vse-2a
19945: PPUSH
19946: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-2 ) ;
19950: LD_EXP 39
19954: PPUSH
19955: LD_STRING DMeetVsev2-Bur-2
19957: PPUSH
19958: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-3 ) ;
19962: LD_EXP 51
19966: PPUSH
19967: LD_STRING DMeetVsev2-Vse-3
19969: PPUSH
19970: CALL_OW 88
// end ; Say ( Burlak , DMeetVsev3-Bur-1 ) ;
19974: LD_EXP 39
19978: PPUSH
19979: LD_STRING DMeetVsev3-Bur-1
19981: PPUSH
19982: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-1 ) ;
19986: LD_EXP 51
19990: PPUSH
19991: LD_STRING DMeetVsev3-Vse-1
19993: PPUSH
19994: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-2 ) ;
19998: LD_EXP 39
20002: PPUSH
20003: LD_STRING DMeetVsev3-Bur-2
20005: PPUSH
20006: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-2 ) ;
20010: LD_EXP 51
20014: PPUSH
20015: LD_STRING DMeetVsev3-Vse-2
20017: PPUSH
20018: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-3 ) ;
20022: LD_EXP 39
20026: PPUSH
20027: LD_STRING DMeetVsev3-Bur-3
20029: PPUSH
20030: CALL_OW 88
// if stevensStatus = 0 then
20034: LD_EXP 4
20038: PUSH
20039: LD_INT 0
20041: EQUAL
20042: IFFALSE 20056
// Say ( Burlak , DMeetVsev4-Bur-1 ) ;
20044: LD_EXP 39
20048: PPUSH
20049: LD_STRING DMeetVsev4-Bur-1
20051: PPUSH
20052: CALL_OW 88
// Say ( Burlak , DMeetVsev5-Bur-1 ) ;
20056: LD_EXP 39
20060: PPUSH
20061: LD_STRING DMeetVsev5-Bur-1
20063: PPUSH
20064: CALL_OW 88
// Say ( Vsevolod , DMeetVsev5-Vse-1 ) ;
20068: LD_EXP 51
20072: PPUSH
20073: LD_STRING DMeetVsev5-Vse-1
20075: PPUSH
20076: CALL_OW 88
// Say ( Burlak , DMeetVsev6-Bur-1 ) ;
20080: LD_EXP 39
20084: PPUSH
20085: LD_STRING DMeetVsev6-Bur-1
20087: PPUSH
20088: CALL_OW 88
// Say ( Vsevolod , DMeetVsev6-Vse-1 ) ;
20092: LD_EXP 51
20096: PPUSH
20097: LD_STRING DMeetVsev6-Vse-1
20099: PPUSH
20100: CALL_OW 88
// DialogueOff ;
20104: CALL_OW 7
// wait ( 0 0$20 ) ;
20108: LD_INT 700
20110: PPUSH
20111: CALL_OW 67
// PrepareConvoy ;
20115: CALL 3997 0 0
// ComMoveXY ( convoyTeam , 57 , 40 ) ;
20119: LD_EXP 63
20123: PPUSH
20124: LD_INT 57
20126: PPUSH
20127: LD_INT 40
20129: PPUSH
20130: CALL_OW 111
// AddComMoveXY ( convoyTeam , 37 , 59 ) ;
20134: LD_EXP 63
20138: PPUSH
20139: LD_INT 37
20141: PPUSH
20142: LD_INT 59
20144: PPUSH
20145: CALL_OW 171
// end ; end ;
20149: PPOPN 3
20151: END
// every 0 0$1 trigger vsevolodWaitGorky and GetDistUnits ( Vsevolod , Burlak ) <= 7 do
20152: LD_EXP 20
20156: PUSH
20157: LD_EXP 51
20161: PPUSH
20162: LD_EXP 39
20166: PPUSH
20167: CALL_OW 296
20171: PUSH
20172: LD_INT 7
20174: LESSEQUAL
20175: AND
20176: IFFALSE 20472
20178: GO 20180
20180: DISABLE
// begin vsevolodWaitGorky = false ;
20181: LD_ADDR_EXP 20
20185: PUSH
20186: LD_INT 0
20188: ST_TO_ADDR
// DialogueOn ;
20189: CALL_OW 6
// Say ( Vsevolod , DMeetVsev-Vse-1 ) ;
20193: LD_EXP 51
20197: PPUSH
20198: LD_STRING DMeetVsev-Vse-1
20200: PPUSH
20201: CALL_OW 88
// Say ( Burlak , DMeetVsev-Bur-1 ) ;
20205: LD_EXP 39
20209: PPUSH
20210: LD_STRING DMeetVsev-Bur-1
20212: PPUSH
20213: CALL_OW 88
// if lostAgainBase then
20217: LD_EXP 17
20221: IFFALSE 20261
// begin Say ( Vsevolod , DMeetVsev2-Vse-1 ) ;
20223: LD_EXP 51
20227: PPUSH
20228: LD_STRING DMeetVsev2-Vse-1
20230: PPUSH
20231: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-1 ) ;
20235: LD_EXP 39
20239: PPUSH
20240: LD_STRING DMeetVsev2-Bur-1
20242: PPUSH
20243: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-2 ) ;
20247: LD_EXP 51
20251: PPUSH
20252: LD_STRING DMeetVsev2-Vse-2
20254: PPUSH
20255: CALL_OW 88
// end else
20259: GO 20297
// begin Say ( Vsevolod , DMeetVsev2-Vse-2a ) ;
20261: LD_EXP 51
20265: PPUSH
20266: LD_STRING DMeetVsev2-Vse-2a
20268: PPUSH
20269: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-2 ) ;
20273: LD_EXP 39
20277: PPUSH
20278: LD_STRING DMeetVsev2-Bur-2
20280: PPUSH
20281: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-3 ) ;
20285: LD_EXP 51
20289: PPUSH
20290: LD_STRING DMeetVsev2-Vse-3
20292: PPUSH
20293: CALL_OW 88
// end ; Say ( Burlak , DMeetVsev3-Bur-1 ) ;
20297: LD_EXP 39
20301: PPUSH
20302: LD_STRING DMeetVsev3-Bur-1
20304: PPUSH
20305: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-1 ) ;
20309: LD_EXP 51
20313: PPUSH
20314: LD_STRING DMeetVsev3-Vse-1
20316: PPUSH
20317: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-2 ) ;
20321: LD_EXP 39
20325: PPUSH
20326: LD_STRING DMeetVsev3-Bur-2
20328: PPUSH
20329: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-2 ) ;
20333: LD_EXP 51
20337: PPUSH
20338: LD_STRING DMeetVsev3-Vse-2
20340: PPUSH
20341: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-3 ) ;
20345: LD_EXP 39
20349: PPUSH
20350: LD_STRING DMeetVsev3-Bur-3
20352: PPUSH
20353: CALL_OW 88
// if stevensStatus = 0 then
20357: LD_EXP 4
20361: PUSH
20362: LD_INT 0
20364: EQUAL
20365: IFFALSE 20379
// Say ( Burlak , DMeetVsev4-Bur-1 ) ;
20367: LD_EXP 39
20371: PPUSH
20372: LD_STRING DMeetVsev4-Bur-1
20374: PPUSH
20375: CALL_OW 88
// Say ( Burlak , DMeetVsev5-Bur-1 ) ;
20379: LD_EXP 39
20383: PPUSH
20384: LD_STRING DMeetVsev5-Bur-1
20386: PPUSH
20387: CALL_OW 88
// Say ( Vsevolod , DMeetVsev5-Vse-1 ) ;
20391: LD_EXP 51
20395: PPUSH
20396: LD_STRING DMeetVsev5-Vse-1
20398: PPUSH
20399: CALL_OW 88
// Say ( Vsevolod , DMeetVsev6-Vse-1 ) ;
20403: LD_EXP 51
20407: PPUSH
20408: LD_STRING DMeetVsev6-Vse-1
20410: PPUSH
20411: CALL_OW 88
// Say ( Burlak , DMeetVsev6-Bur-1 ) ;
20415: LD_EXP 39
20419: PPUSH
20420: LD_STRING DMeetVsev6-Bur-1
20422: PPUSH
20423: CALL_OW 88
// DialogueOff ;
20427: CALL_OW 7
// wait ( 0 0$20 ) ;
20431: LD_INT 700
20433: PPUSH
20434: CALL_OW 67
// PrepareConvoy ;
20438: CALL 3997 0 0
// ComMoveXY ( convoyTeam , 57 , 40 ) ;
20442: LD_EXP 63
20446: PPUSH
20447: LD_INT 57
20449: PPUSH
20450: LD_INT 40
20452: PPUSH
20453: CALL_OW 111
// AddComMoveXY ( convoyTeam , 37 , 59 ) ;
20457: LD_EXP 63
20461: PPUSH
20462: LD_INT 37
20464: PPUSH
20465: LD_INT 59
20467: PPUSH
20468: CALL_OW 171
// end ;
20472: END
// every 0 0$1 trigger not dial_ConvoyDialogBlocker do var tmp , speaker , unit ;
20473: LD_EXP 12
20477: NOT
20478: IFFALSE 20608
20480: GO 20482
20482: DISABLE
20483: LD_INT 0
20485: PPUSH
20486: PPUSH
20487: PPUSH
// begin enable ;
20488: ENABLE
// for unit in convoyTeam do
20489: LD_ADDR_VAR 0 3
20493: PUSH
20494: LD_EXP 63
20498: PUSH
20499: FOR_IN
20500: IFFALSE 20606
// if See ( 3 , unit ) and not IsInArea ( unit , InsideBaseArea ) then
20502: LD_INT 3
20504: PPUSH
20505: LD_VAR 0 3
20509: PPUSH
20510: CALL_OW 292
20514: PUSH
20515: LD_VAR 0 3
20519: PPUSH
20520: LD_INT 19
20522: PPUSH
20523: CALL_OW 308
20527: NOT
20528: AND
20529: IFFALSE 20604
// begin dial_ConvoyDialogBlocker = true ;
20531: LD_ADDR_EXP 12
20535: PUSH
20536: LD_INT 1
20538: ST_TO_ADDR
// DialogueOn ;
20539: CALL_OW 6
// speaker = UnitFilter ( convoyTeam , [ f_type , unit_human ] ) [ 1 ] ;
20543: LD_ADDR_VAR 0 2
20547: PUSH
20548: LD_EXP 63
20552: PPUSH
20553: LD_INT 21
20555: PUSH
20556: LD_INT 1
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PPUSH
20563: CALL_OW 72
20567: PUSH
20568: LD_INT 1
20570: ARRAY
20571: ST_TO_ADDR
// Say ( speaker , DTruck-Sol1-1 ) ;
20572: LD_VAR 0 2
20576: PPUSH
20577: LD_STRING DTruck-Sol1-1
20579: PPUSH
20580: CALL_OW 88
// Say ( Burlak , DTruck-Bur-1 ) ;
20584: LD_EXP 39
20588: PPUSH
20589: LD_STRING DTruck-Bur-1
20591: PPUSH
20592: CALL_OW 88
// DialogueOff ;
20596: CALL_OW 7
// exit ;
20600: POP
20601: POP
20602: GO 20608
// end ;
20604: GO 20499
20606: POP
20607: POP
// end ;
20608: PPOPN 3
20610: END
// every 0 0$1 trigger timeToAttack >= vsevolodSaveTime do
20611: LD_EXP 26
20615: PUSH
20616: LD_EXP 38
20620: GREATEREQUAL
20621: IFFALSE 20660
20623: GO 20625
20625: DISABLE
// begin PrepareAttack ;
20626: CALL 4178 0 0
// ComAgressiveMove ( attackTeam , 60 , 41 ) ;
20630: LD_EXP 64
20634: PPUSH
20635: LD_INT 60
20637: PPUSH
20638: LD_INT 41
20640: PPUSH
20641: CALL_OW 114
// AddComAgressiveMove ( attackTeam , 107 , 125 ) ;
20645: LD_EXP 64
20649: PPUSH
20650: LD_INT 107
20652: PPUSH
20653: LD_INT 125
20655: PPUSH
20656: CALL_OW 174
// end ;
20660: END
// every 1 trigger not savedVsevolod and GetLives ( Vsevolod ) <= 500 do
20661: LD_EXP 19
20665: NOT
20666: PUSH
20667: LD_EXP 51
20671: PPUSH
20672: CALL_OW 256
20676: PUSH
20677: LD_INT 500
20679: LESSEQUAL
20680: AND
20681: IFFALSE 20706
20683: GO 20685
20685: DISABLE
// begin DialogueOn ;
20686: CALL_OW 6
// SayRadio ( Vsevolod , DDieVsev2-Vse-1 ) ;
20690: LD_EXP 51
20694: PPUSH
20695: LD_STRING DDieVsev2-Vse-1
20697: PPUSH
20698: CALL_OW 94
// DialogueOff ;
20702: CALL_OW 7
// end ;
20706: END
// export function Dial_ResearchTauField ; var speaker , sci , randomTalkDialog ; begin
20707: LD_INT 0
20709: PPUSH
20710: PPUSH
20711: PPUSH
20712: PPUSH
// DialogueOn ;
20713: CALL_OW 6
// if IsOK ( Petrosyan ) then
20717: LD_EXP 43
20721: PPUSH
20722: CALL_OW 302
20726: IFFALSE 20742
// Say ( Petrosyan , DStasis-Pty-1 ) else
20728: LD_EXP 43
20732: PPUSH
20733: LD_STRING DStasis-Pty-1
20735: PPUSH
20736: CALL_OW 88
20740: GO 20964
// if IsOK ( Dolgov ) then
20742: LD_EXP 45
20746: PPUSH
20747: CALL_OW 302
20751: IFFALSE 20767
// Say ( Dolgov , DStasis-Dol-1 ) else
20753: LD_EXP 45
20757: PPUSH
20758: LD_STRING DStasis-Dol-1
20760: PPUSH
20761: CALL_OW 88
20765: GO 20964
// begin sci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] , [ f_nation , nation_russian ] ] ) diff Burlak ;
20767: LD_ADDR_VAR 0 3
20771: PUSH
20772: LD_INT 22
20774: PUSH
20775: LD_INT 3
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 21
20784: PUSH
20785: LD_INT 1
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: LD_INT 50
20794: PUSH
20795: EMPTY
20796: LIST
20797: PUSH
20798: LD_INT 26
20800: PUSH
20801: LD_INT 1
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 25
20810: PUSH
20811: LD_INT 4
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 23
20820: PUSH
20821: LD_INT 3
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: PPUSH
20836: CALL_OW 69
20840: PUSH
20841: LD_EXP 39
20845: DIFF
20846: ST_TO_ADDR
// if not sci then
20847: LD_VAR 0 3
20851: NOT
20852: IFFALSE 20923
// sci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Burlak ;
20854: LD_ADDR_VAR 0 3
20858: PUSH
20859: LD_INT 22
20861: PUSH
20862: LD_INT 3
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 21
20871: PUSH
20872: LD_INT 1
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 50
20881: PUSH
20882: EMPTY
20883: LIST
20884: PUSH
20885: LD_INT 26
20887: PUSH
20888: LD_INT 1
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 23
20897: PUSH
20898: LD_INT 3
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: PPUSH
20912: CALL_OW 69
20916: PUSH
20917: LD_EXP 39
20921: DIFF
20922: ST_TO_ADDR
// if sci then
20923: LD_VAR 0 3
20927: IFFALSE 20964
// begin speaker = DialogRandom ( sci , DStasis-RSol1-1 ,  , false , true ) ;
20929: LD_ADDR_VAR 0 2
20933: PUSH
20934: LD_VAR 0 3
20938: PPUSH
20939: LD_STRING DStasis-RSol1-1
20941: PPUSH
20942: LD_STRING 
20944: PPUSH
20945: LD_INT 0
20947: PPUSH
20948: LD_INT 1
20950: PPUSH
20951: CALL 12076 0 5
20955: ST_TO_ADDR
// randomTalkDialog = true ;
20956: LD_ADDR_VAR 0 4
20960: PUSH
20961: LD_INT 1
20963: ST_TO_ADDR
// end ; end ; if IsOK ( Petrosyan ) or IsOK ( Dolgov ) or randomTalkDialog then
20964: LD_EXP 43
20968: PPUSH
20969: CALL_OW 302
20973: PUSH
20974: LD_EXP 45
20978: PPUSH
20979: CALL_OW 302
20983: OR
20984: PUSH
20985: LD_VAR 0 4
20989: OR
20990: IFFALSE 21087
// begin Say ( Burlak , DStasis-Bur-1 ) ;
20992: LD_EXP 39
20996: PPUSH
20997: LD_STRING DStasis-Bur-1
20999: PPUSH
21000: CALL_OW 88
// if IsOK ( Petrosyan ) then
21004: LD_EXP 43
21008: PPUSH
21009: CALL_OW 302
21013: IFFALSE 21029
// Say ( Petrosyan , DStasis-Pty-2 ) else
21015: LD_EXP 43
21019: PPUSH
21020: LD_STRING DStasis-Pty-2
21022: PPUSH
21023: CALL_OW 88
21027: GO 21075
// if IsOK ( Dolgov ) then
21029: LD_EXP 45
21033: PPUSH
21034: CALL_OW 302
21038: IFFALSE 21054
// Say ( Dolgov , DStasis-Dol-2 ) else
21040: LD_EXP 45
21044: PPUSH
21045: LD_STRING DStasis-Dol-2
21047: PPUSH
21048: CALL_OW 88
21052: GO 21075
// DialogRandom ( speaker , DStasis-RSol1-2 ,  , false , true ) ;
21054: LD_VAR 0 2
21058: PPUSH
21059: LD_STRING DStasis-RSol1-2
21061: PPUSH
21062: LD_STRING 
21064: PPUSH
21065: LD_INT 0
21067: PPUSH
21068: LD_INT 1
21070: PPUSH
21071: CALL 12076 0 5
// Say ( Burlak , DStasis-Bur-2 ) ;
21075: LD_EXP 39
21079: PPUSH
21080: LD_STRING DStasis-Bur-2
21082: PPUSH
21083: CALL_OW 88
// end ; DialogueOff ;
21087: CALL_OW 7
// if GetTech ( tech_SibEng , 3 ) = state_researched then
21091: LD_INT 22
21093: PPUSH
21094: LD_INT 3
21096: PPUSH
21097: CALL_OW 321
21101: PUSH
21102: LD_INT 2
21104: EQUAL
21105: IFFALSE 21114
// ChangeMissionObjectives ( MOutResearch ) ;
21107: LD_STRING MOutResearch
21109: PPUSH
21110: CALL_OW 337
// end ;
21114: LD_VAR 0 1
21118: RET
// every 0 0$01 trigger GetTech ( tech_SibEng , 3 ) = state_researched and GetTech ( tech_TauField , 3 ) = state_researched and not dial_EndMissionDialogBlocker do var depots , depot , sibCounter ;
21119: LD_INT 22
21121: PPUSH
21122: LD_INT 3
21124: PPUSH
21125: CALL_OW 321
21129: PUSH
21130: LD_INT 2
21132: EQUAL
21133: PUSH
21134: LD_INT 30
21136: PPUSH
21137: LD_INT 3
21139: PPUSH
21140: CALL_OW 321
21144: PUSH
21145: LD_INT 2
21147: EQUAL
21148: AND
21149: PUSH
21150: LD_EXP 14
21154: NOT
21155: AND
21156: IFFALSE 21499
21158: GO 21160
21160: DISABLE
21161: LD_INT 0
21163: PPUSH
21164: PPUSH
21165: PPUSH
// begin wait ( 0 0$15 ) ;
21166: LD_INT 525
21168: PPUSH
21169: CALL_OW 67
// depots = FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21173: LD_ADDR_VAR 0 1
21177: PUSH
21178: LD_INT 22
21180: PUSH
21181: LD_INT 3
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: PUSH
21188: LD_INT 50
21190: PUSH
21191: EMPTY
21192: LIST
21193: PUSH
21194: LD_INT 21
21196: PUSH
21197: LD_INT 3
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PUSH
21204: LD_INT 2
21206: PUSH
21207: LD_INT 30
21209: PUSH
21210: LD_INT 0
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 30
21219: PUSH
21220: LD_INT 1
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: LIST
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: PPUSH
21238: CALL_OW 69
21242: ST_TO_ADDR
// sibCounter = 0 ;
21243: LD_ADDR_VAR 0 3
21247: PUSH
21248: LD_INT 0
21250: ST_TO_ADDR
// for depot in depots do
21251: LD_ADDR_VAR 0 2
21255: PUSH
21256: LD_VAR 0 1
21260: PUSH
21261: FOR_IN
21262: IFFALSE 21295
// sibCounter = sibCounter + GetResourceType ( GetBase ( depot ) , mat_siberit ) ;
21264: LD_ADDR_VAR 0 3
21268: PUSH
21269: LD_VAR 0 3
21273: PUSH
21274: LD_VAR 0 2
21278: PPUSH
21279: CALL_OW 274
21283: PPUSH
21284: LD_INT 3
21286: PPUSH
21287: CALL_OW 275
21291: PLUS
21292: ST_TO_ADDR
21293: GO 21261
21295: POP
21296: POP
// if sibCounter >= 100 then
21297: LD_VAR 0 3
21301: PUSH
21302: LD_INT 100
21304: GREATEREQUAL
21305: IFFALSE 21491
// begin ChangeMissionObjectives ( MOutMine ) ;
21307: LD_STRING MOutMine
21309: PPUSH
21310: CALL_OW 337
// dial_EndMissionDialogBlocker = true ;
21314: LD_ADDR_EXP 14
21318: PUSH
21319: LD_INT 1
21321: ST_TO_ADDR
// DialogueOn ;
21322: CALL_OW 6
// SayRadio ( Platonov , DNextMiss1-Pla-1 ) ;
21326: LD_EXP 47
21330: PPUSH
21331: LD_STRING DNextMiss1-Pla-1
21333: PPUSH
21334: CALL_OW 94
// if not savedVsevolod then
21338: LD_EXP 19
21342: NOT
21343: IFFALSE 21389
// begin SayRadio ( Platonov , DNextMiss2-Pla-1 ) ;
21345: LD_EXP 47
21349: PPUSH
21350: LD_STRING DNextMiss2-Pla-1
21352: PPUSH
21353: CALL_OW 94
// Say ( Burlak , DNextMiss4-Bur-1 ) ;
21357: LD_EXP 39
21361: PPUSH
21362: LD_STRING DNextMiss4-Bur-1
21364: PPUSH
21365: CALL_OW 88
// SayRadio ( Vsevolod , DDieVsev1-Vse-1 ) ;
21369: LD_EXP 51
21373: PPUSH
21374: LD_STRING DDieVsev1-Vse-1
21376: PPUSH
21377: CALL_OW 94
// ForceFinishGame ;
21381: CALL 22172 0 0
// exit ;
21385: GO 21499
// end else
21387: GO 21425
// begin SayRadio ( Platonov , DNextMiss3-Pla-1 ) ;
21389: LD_EXP 47
21393: PPUSH
21394: LD_STRING DNextMiss3-Pla-1
21396: PPUSH
21397: CALL_OW 94
// SayRadio ( Platonov , DNextMiss4-Pla-1 ) ;
21401: LD_EXP 47
21405: PPUSH
21406: LD_STRING DNextMiss4-Pla-1
21408: PPUSH
21409: CALL_OW 94
// Say ( Burlak , DNextMiss4-Bur-1 ) ;
21413: LD_EXP 39
21417: PPUSH
21418: LD_STRING DNextMiss4-Bur-1
21420: PPUSH
21421: CALL_OW 88
// end ; DialogueOff ;
21425: CALL_OW 7
// SelectCharacters ;
21429: CALL 15347 0 0
// canSpawnReinforces = true ;
21433: LD_ADDR_EXP 23
21437: PUSH
21438: LD_INT 1
21440: ST_TO_ADDR
// canRemoveUnits = true ;
21441: LD_ADDR_EXP 25
21445: PUSH
21446: LD_INT 1
21448: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_friend , true ) ;
21449: LD_INT 1
21451: PPUSH
21452: LD_INT 6
21454: PPUSH
21455: LD_INT 1
21457: PPUSH
21458: LD_INT 1
21460: PPUSH
21461: CALL_OW 80
// SetAreaMapShow ( ExitMapArea , 1 ) ;
21465: LD_INT 14
21467: PPUSH
21468: LD_INT 1
21470: PPUSH
21471: CALL_OW 424
// ChangeMissionObjectives ( MOutResearch ) ;
21475: LD_STRING MOutResearch
21477: PPUSH
21478: CALL_OW 337
// ChangeMissionObjectives ( MCars ) ;
21482: LD_STRING MCars
21484: PPUSH
21485: CALL_OW 337
// exit ;
21489: GO 21499
// end ; wait ( 0 0$10 ) ;
21491: LD_INT 350
21493: PPUSH
21494: CALL_OW 67
// enable ;
21498: ENABLE
// end ;
21499: PPOPN 3
21501: END
// every 0 0$1 trigger canRemoveUnits do var un ;
21502: LD_EXP 25
21506: IFFALSE 21616
21508: GO 21510
21510: DISABLE
21511: LD_INT 0
21513: PPUSH
// begin enable ;
21514: ENABLE
// SetLives ( Vsevolod , 1000 ) ;
21515: LD_EXP 51
21519: PPUSH
21520: LD_INT 1000
21522: PPUSH
21523: CALL_OW 234
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , ExitMapArea ) ;
21527: LD_INT 22
21529: PUSH
21530: LD_INT 6
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 21
21539: PUSH
21540: LD_INT 1
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PPUSH
21551: CALL_OW 69
21555: PPUSH
21556: LD_INT 14
21558: PPUSH
21559: CALL_OW 113
// for un in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
21563: LD_ADDR_VAR 0 1
21567: PUSH
21568: LD_INT 14
21570: PPUSH
21571: LD_INT 22
21573: PUSH
21574: LD_INT 6
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 21
21583: PUSH
21584: LD_INT 1
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: PPUSH
21595: CALL_OW 70
21599: PUSH
21600: FOR_IN
21601: IFFALSE 21614
// RemoveUnit ( un ) ;
21603: LD_VAR 0 1
21607: PPUSH
21608: CALL_OW 64
21612: GO 21600
21614: POP
21615: POP
// end ;
21616: PPOPN 1
21618: END
// every 1 trigger not canGoNorth and FilterUnitsInArea ( NorthBlockerArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do var unit ;
21619: LD_EXP 21
21623: NOT
21624: PUSH
21625: LD_INT 15
21627: PPUSH
21628: LD_INT 22
21630: PUSH
21631: LD_INT 3
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: PUSH
21638: LD_INT 50
21640: PUSH
21641: EMPTY
21642: LIST
21643: PUSH
21644: LD_INT 2
21646: PUSH
21647: LD_INT 21
21649: PUSH
21650: LD_INT 1
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: LD_INT 21
21659: PUSH
21660: LD_INT 2
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: LIST
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: LIST
21676: PPUSH
21677: CALL_OW 70
21681: AND
21682: IFFALSE 21814
21684: GO 21686
21686: DISABLE
21687: LD_INT 0
21689: PPUSH
// begin enable ;
21690: ENABLE
// for unit in FilterUnitsInArea ( NorthBlockerArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
21691: LD_ADDR_VAR 0 1
21695: PUSH
21696: LD_INT 15
21698: PPUSH
21699: LD_INT 22
21701: PUSH
21702: LD_INT 3
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 50
21711: PUSH
21712: EMPTY
21713: LIST
21714: PUSH
21715: LD_INT 2
21717: PUSH
21718: LD_INT 21
21720: PUSH
21721: LD_INT 1
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 21
21730: PUSH
21731: LD_INT 2
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: LIST
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: LIST
21747: PPUSH
21748: CALL_OW 70
21752: PUSH
21753: FOR_IN
21754: IFFALSE 21770
// ComMoveToArea ( unit , NorthBlockerReturnArea ) ;
21756: LD_VAR 0 1
21760: PPUSH
21761: LD_INT 16
21763: PPUSH
21764: CALL_OW 113
21768: GO 21753
21770: POP
21771: POP
// if not dial_NorthBlocker then
21772: LD_EXP 13
21776: NOT
21777: IFFALSE 21814
// begin dial_NorthBlocker = true ;
21779: LD_ADDR_EXP 13
21783: PUSH
21784: LD_INT 1
21786: ST_TO_ADDR
// Say ( Burlak , DMoveNorth-Bur-1 ) ;
21787: LD_EXP 39
21791: PPUSH
21792: LD_STRING DMoveNorth-Bur-1
21794: PPUSH
21795: CALL_OW 88
// wait ( 0 0$5 ) ;
21799: LD_INT 175
21801: PPUSH
21802: CALL_OW 67
// dial_NorthBlocker = false ;
21806: LD_ADDR_EXP 13
21810: PUSH
21811: LD_INT 0
21813: ST_TO_ADDR
// end ; end ;
21814: PPOPN 1
21816: END
// every 2 2$30 trigger canSpawnReinforces do
21817: LD_EXP 23
21821: IFFALSE 21877
21823: GO 21825
21825: DISABLE
// begin SpawnPlatonovReinforces ;
21826: CALL 2877 0 0
// CenterOnXY ( 134 , 233 ) ;
21830: LD_INT 134
21832: PPUSH
21833: LD_INT 233
21835: PPUSH
21836: CALL_OW 84
// if Kirilenkova and IsPlaced ( Kirilenkova ) then
21840: LD_EXP 48
21844: PUSH
21845: LD_EXP 48
21849: PPUSH
21850: CALL_OW 305
21854: AND
21855: IFFALSE 21869
// Say ( Kirilenkova , DMeetKirilenkova-Kir-1 ) ;
21857: LD_EXP 48
21861: PPUSH
21862: LD_STRING DMeetKirilenkova-Kir-1
21864: PPUSH
21865: CALL_OW 88
// canEndMission = true ;
21869: LD_ADDR_EXP 24
21873: PUSH
21874: LD_INT 1
21876: ST_TO_ADDR
// end ; end_of_file
21877: END
// export function Lose_Burlak ; begin
21878: LD_INT 0
21880: PPUSH
// YouLost ( Burlak ) ;
21881: LD_STRING Burlak
21883: PPUSH
21884: CALL_OW 104
// end ;
21888: LD_VAR 0 1
21892: RET
// export function Lose_Gleb ; begin
21893: LD_INT 0
21895: PPUSH
// SayRadio ( Platonov , DKillGleb-Pla-1 ) ;
21896: LD_EXP 47
21900: PPUSH
21901: LD_STRING DKillGleb-Pla-1
21903: PPUSH
21904: CALL_OW 94
// YouLost ( Gleb ) ;
21908: LD_STRING Gleb
21910: PPUSH
21911: CALL_OW 104
// end ;
21915: LD_VAR 0 1
21919: RET
// every 0 0$1 trigger not canEndMission and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_engineer ] , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
21920: LD_EXP 24
21924: NOT
21925: PUSH
21926: LD_INT 22
21928: PUSH
21929: LD_INT 3
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 2
21938: PUSH
21939: LD_INT 25
21941: PUSH
21942: LD_INT 2
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 30
21951: PUSH
21952: LD_INT 1
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 30
21961: PUSH
21962: LD_INT 0
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 30
21971: PUSH
21972: LD_INT 6
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 30
21981: PUSH
21982: LD_INT 7
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 30
21991: PUSH
21992: LD_INT 8
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: PPUSH
22012: CALL_OW 69
22016: NOT
22017: AND
22018: IFFALSE 22030
22020: GO 22022
22022: DISABLE
// YouLost ( NoDepotNoEngineerNoLab ) ;
22023: LD_STRING NoDepotNoEngineerNoLab
22025: PPUSH
22026: CALL_OW 104
22030: END
// export function Lose_NoDepotNoEngineerNoLab ; begin
22031: LD_INT 0
22033: PPUSH
// YouLost ( NoDepotNoEngineerNoLab ) ;
22034: LD_STRING NoDepotNoEngineerNoLab
22036: PPUSH
22037: CALL_OW 104
// end ; end_of_file
22041: LD_VAR 0 1
22045: RET
// every 0 0$5 trigger canEndMission and not FilterUnitsExceptArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_and , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ] ) do var units , qr ;
22046: LD_EXP 24
22050: PUSH
22051: LD_INT 14
22053: PPUSH
22054: LD_INT 22
22056: PUSH
22057: LD_INT 3
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 50
22066: PUSH
22067: EMPTY
22068: LIST
22069: PUSH
22070: LD_INT 2
22072: PUSH
22073: LD_INT 21
22075: PUSH
22076: LD_INT 1
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 1
22085: PUSH
22086: LD_INT 21
22088: PUSH
22089: LD_INT 2
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 59
22098: PUSH
22099: EMPTY
22100: LIST
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: LIST
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: LIST
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: LIST
22116: PPUSH
22117: CALL_OW 71
22121: NOT
22122: AND
22123: IFFALSE 22169
22125: GO 22127
22127: DISABLE
22128: LD_INT 0
22130: PPUSH
22131: PPUSH
// begin case Query ( QEndGame ) of 1 :
22132: LD_STRING QEndGame
22134: PPUSH
22135: CALL_OW 97
22139: PUSH
22140: LD_INT 1
22142: DOUBLE
22143: EQUAL
22144: IFTRUE 22148
22146: GO 22167
22148: POP
// begin SetRewards ;
22149: CALL 22196 0 0
// SavePlayerCharacters ;
22153: CALL 22360 0 0
// SaveGlobalVariables ;
22157: CALL 22749 0 0
// YouWin ;
22161: CALL_OW 103
// end ; end ;
22165: GO 22168
22167: POP
// enable ;
22168: ENABLE
// end ;
22169: PPOPN 2
22171: END
// export function ForceFinishGame ; begin
22172: LD_INT 0
22174: PPUSH
// SetRewards ;
22175: CALL 22196 0 0
// SavePlayerCharacters ;
22179: CALL 22360 0 0
// SaveGlobalVariables ;
22183: CALL 22749 0 0
// YouWin ;
22187: CALL_OW 103
// end ;
22191: LD_VAR 0 1
22195: RET
// function SetRewards ; begin
22196: LD_INT 0
22198: PPUSH
// if savedVsevolod then
22199: LD_EXP 19
22203: IFFALSE 22217
// AddMedal ( Vsevolod , 1 ) else
22205: LD_STRING Vsevolod
22207: PPUSH
22208: LD_INT 1
22210: PPUSH
22211: CALL_OW 101
22215: GO 22228
// AddMedal ( Vsevolod , - 1 ) ;
22217: LD_STRING Vsevolod
22219: PPUSH
22220: LD_INT 1
22222: NEG
22223: PPUSH
22224: CALL_OW 101
// if not lostAgainBase then
22228: LD_EXP 17
22232: NOT
22233: IFFALSE 22247
// AddMedal ( Ovsyenko , 1 ) else
22235: LD_STRING Ovsyenko
22237: PPUSH
22238: LD_INT 1
22240: PPUSH
22241: CALL_OW 101
22245: GO 22258
// AddMedal ( Ovsyenko , - 1 ) ;
22247: LD_STRING Ovsyenko
22249: PPUSH
22250: LD_INT 1
22252: NEG
22253: PPUSH
22254: CALL_OW 101
// if GetTech ( tech_MatPred , 3 ) = state_researched then
22258: LD_INT 9
22260: PPUSH
22261: LD_INT 3
22263: PPUSH
22264: CALL_OW 321
22268: PUSH
22269: LD_INT 2
22271: EQUAL
22272: IFFALSE 22286
// AddMedal ( Prediction , 1 ) else
22274: LD_STRING Prediction
22276: PPUSH
22277: LD_INT 1
22279: PPUSH
22280: CALL_OW 101
22284: GO 22297
// AddMedal ( Prediction , - 1 ) ;
22286: LD_STRING Prediction
22288: PPUSH
22289: LD_INT 1
22291: NEG
22292: PPUSH
22293: CALL_OW 101
// GiveMedals ( Main ) ;
22297: LD_STRING Main
22299: PPUSH
22300: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ) ;
22304: LD_INT 22
22306: PUSH
22307: LD_INT 3
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 21
22316: PUSH
22317: LD_INT 1
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PUSH
22324: LD_INT 23
22326: PUSH
22327: LD_INT 3
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: LD_INT 50
22336: PUSH
22337: EMPTY
22338: LIST
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: PPUSH
22346: CALL_OW 69
22350: PPUSH
22351: CALL_OW 43
// end ;
22355: LD_VAR 0 1
22359: RET
// function SavePlayerCharacters ; var randomsToSave ; begin
22360: LD_INT 0
22362: PPUSH
22363: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
22364: LD_EXP 39
22368: PPUSH
22369: LD_STRING Burlak
22371: PPUSH
22372: LD_INT 3
22374: PPUSH
22375: CALL 11877 0 3
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
22379: LD_EXP 40
22383: PPUSH
22384: LD_STRING Karamazov
22386: PPUSH
22387: LD_INT 3
22389: PPUSH
22390: CALL 11877 0 3
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
22394: LD_EXP 41
22398: PPUSH
22399: LD_STRING Petrovova
22401: PPUSH
22402: LD_INT 3
22404: PPUSH
22405: CALL 11877 0 3
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
22409: LD_EXP 42
22413: PPUSH
22414: LD_STRING Gleb
22416: PPUSH
22417: LD_INT 3
22419: PPUSH
22420: CALL 11877 0 3
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
22424: LD_EXP 43
22428: PPUSH
22429: LD_STRING Petrosyan
22431: PPUSH
22432: LD_INT 3
22434: PPUSH
22435: CALL 11877 0 3
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
22439: LD_EXP 45
22443: PPUSH
22444: LD_STRING Dolgov
22446: PPUSH
22447: LD_INT 3
22449: PPUSH
22450: CALL 11877 0 3
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
22454: LD_EXP 46
22458: PPUSH
22459: LD_STRING Lipshchin
22461: PPUSH
22462: LD_INT 3
22464: PPUSH
22465: CALL 11877 0 3
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
22469: LD_EXP 44
22473: PPUSH
22474: LD_STRING Titov
22476: PPUSH
22477: LD_INT 3
22479: PPUSH
22480: CALL 11877 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
22484: LD_EXP 48
22488: PPUSH
22489: LD_STRING Kirilenkova
22491: PPUSH
22492: LD_INT 3
22494: PPUSH
22495: CALL 11877 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
22499: LD_EXP 49
22503: PPUSH
22504: LD_STRING Belkov
22506: PPUSH
22507: LD_INT 3
22509: PPUSH
22510: CALL 11877 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
22514: LD_EXP 50
22518: PPUSH
22519: LD_STRING Belkov2
22521: PPUSH
22522: LD_INT 3
22524: PPUSH
22525: CALL 11877 0 3
// ExtSaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
22529: LD_INT 22
22531: PUSH
22532: LD_INT 3
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 21
22541: PUSH
22542: LD_INT 1
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 2
22551: PUSH
22552: LD_INT 25
22554: PUSH
22555: LD_INT 12
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 25
22564: PUSH
22565: LD_INT 16
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 25
22574: PUSH
22575: LD_INT 15
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: LIST
22592: PPUSH
22593: CALL_OW 69
22597: PPUSH
22598: LD_STRING other_apemans
22600: PPUSH
22601: LD_INT 3
22603: PPUSH
22604: CALL 11933 0 3
// randomsToSave = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 ] ;
22608: LD_ADDR_VAR 0 2
22612: PUSH
22613: LD_INT 22
22615: PUSH
22616: LD_INT 3
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 21
22625: PUSH
22626: LD_INT 1
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 23
22635: PUSH
22636: LD_INT 3
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 50
22645: PUSH
22646: EMPTY
22647: LIST
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: PPUSH
22655: CALL_OW 69
22659: PUSH
22660: LD_EXP 39
22664: PUSH
22665: LD_EXP 40
22669: PUSH
22670: LD_EXP 41
22674: PUSH
22675: LD_EXP 42
22679: PUSH
22680: LD_EXP 43
22684: PUSH
22685: LD_EXP 44
22689: PUSH
22690: LD_EXP 45
22694: PUSH
22695: LD_EXP 46
22699: PUSH
22700: LD_EXP 48
22704: PUSH
22705: LD_EXP 49
22709: PUSH
22710: LD_EXP 50
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: DIFF
22728: ST_TO_ADDR
// ExtSaveCharacters ( randomsToSave , other_survivors , 3 ) ;
22729: LD_VAR 0 2
22733: PPUSH
22734: LD_STRING other_survivors
22736: PPUSH
22737: LD_INT 3
22739: PPUSH
22740: CALL 11933 0 3
// end ;
22744: LD_VAR 0 1
22748: RET
// function SaveGlobalVariables ; var i , driver , driverShortName ; begin
22749: LD_INT 0
22751: PPUSH
22752: PPUSH
22753: PPUSH
22754: PPUSH
// resourcesFrom06 = [ ] ;
22755: LD_ADDR_EXP 8
22759: PUSH
22760: EMPTY
22761: ST_TO_ADDR
// SaveVariable ( techMatPredStatus , 06_TechMatPredStatus_1 ) ;
22762: LD_EXP 6
22766: PPUSH
22767: LD_STRING 06_TechMatPredStatus_1
22769: PPUSH
22770: CALL_OW 39
// for i in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_occupied ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , 89 ] ] ] ) do
22774: LD_ADDR_VAR 0 2
22778: PUSH
22779: LD_INT 14
22781: PPUSH
22782: LD_INT 22
22784: PUSH
22785: LD_INT 3
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 59
22794: PUSH
22795: EMPTY
22796: LIST
22797: PUSH
22798: LD_INT 2
22800: PUSH
22801: LD_INT 34
22803: PUSH
22804: LD_INT 51
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 34
22813: PUSH
22814: LD_INT 32
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 34
22823: PUSH
22824: LD_INT 12
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 34
22833: PUSH
22834: LD_INT 89
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: LIST
22852: PPUSH
22853: CALL_OW 70
22857: PUSH
22858: FOR_IN
22859: IFFALSE 22887
// resourcesFrom06 = resourcesFrom06 ^ [ GetMultiCargo ( i ) ] ;
22861: LD_ADDR_EXP 8
22865: PUSH
22866: LD_EXP 8
22870: PUSH
22871: LD_VAR 0 2
22875: PPUSH
22876: CALL 15000 0 1
22880: PUSH
22881: EMPTY
22882: LIST
22883: ADD
22884: ST_TO_ADDR
22885: GO 22858
22887: POP
22888: POP
// SaveVariable ( resourcesFrom06 , 06_ResourcesInCargo_3 ) ;
22889: LD_EXP 8
22893: PPUSH
22894: LD_STRING 06_ResourcesInCargo_3
22896: PPUSH
22897: CALL_OW 39
// for i in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ) do
22901: LD_ADDR_VAR 0 2
22905: PUSH
22906: LD_INT 14
22908: PPUSH
22909: LD_INT 22
22911: PUSH
22912: LD_INT 3
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PUSH
22919: LD_INT 21
22921: PUSH
22922: LD_INT 2
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: PUSH
22929: LD_INT 59
22931: PUSH
22932: EMPTY
22933: LIST
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: LIST
22939: PPUSH
22940: CALL_OW 70
22944: PUSH
22945: FOR_IN
22946: IFFALSE 23350
// begin driver = UnitsInside ( i ) [ 1 ] ;
22948: LD_ADDR_VAR 0 3
22952: PUSH
22953: LD_VAR 0 2
22957: PPUSH
22958: CALL_OW 313
22962: PUSH
22963: LD_INT 1
22965: ARRAY
22966: ST_TO_ADDR
// if driver = Burlak then
22967: LD_VAR 0 3
22971: PUSH
22972: LD_EXP 39
22976: EQUAL
22977: IFFALSE 22987
// driverShortName = Bur ;
22979: LD_ADDR_VAR 0 4
22983: PUSH
22984: LD_STRING Bur
22986: ST_TO_ADDR
// if driver = Karamazov then
22987: LD_VAR 0 3
22991: PUSH
22992: LD_EXP 40
22996: EQUAL
22997: IFFALSE 23007
// driverShortName = Kar ;
22999: LD_ADDR_VAR 0 4
23003: PUSH
23004: LD_STRING Kar
23006: ST_TO_ADDR
// if driver = Petrovova then
23007: LD_VAR 0 3
23011: PUSH
23012: LD_EXP 41
23016: EQUAL
23017: IFFALSE 23027
// driverShortName = Ptr ;
23019: LD_ADDR_VAR 0 4
23023: PUSH
23024: LD_STRING Ptr
23026: ST_TO_ADDR
// if driver = Gleb then
23027: LD_VAR 0 3
23031: PUSH
23032: LD_EXP 42
23036: EQUAL
23037: IFFALSE 23047
// driverShortName = Glb ;
23039: LD_ADDR_VAR 0 4
23043: PUSH
23044: LD_STRING Glb
23046: ST_TO_ADDR
// if driver = Petrosyan then
23047: LD_VAR 0 3
23051: PUSH
23052: LD_EXP 43
23056: EQUAL
23057: IFFALSE 23067
// driverShortName = Pet ;
23059: LD_ADDR_VAR 0 4
23063: PUSH
23064: LD_STRING Pet
23066: ST_TO_ADDR
// if driver = Dolgov then
23067: LD_VAR 0 3
23071: PUSH
23072: LD_EXP 45
23076: EQUAL
23077: IFFALSE 23087
// driverShortName = Dol ;
23079: LD_ADDR_VAR 0 4
23083: PUSH
23084: LD_STRING Dol
23086: ST_TO_ADDR
// if driver = Lipshchin then
23087: LD_VAR 0 3
23091: PUSH
23092: LD_EXP 46
23096: EQUAL
23097: IFFALSE 23107
// driverShortName = Lip ;
23099: LD_ADDR_VAR 0 4
23103: PUSH
23104: LD_STRING Lip
23106: ST_TO_ADDR
// if driver = Titov then
23107: LD_VAR 0 3
23111: PUSH
23112: LD_EXP 44
23116: EQUAL
23117: IFFALSE 23127
// driverShortName = Tit ;
23119: LD_ADDR_VAR 0 4
23123: PUSH
23124: LD_STRING Tit
23126: ST_TO_ADDR
// if driver = Kirilenkova then
23127: LD_VAR 0 3
23131: PUSH
23132: LD_EXP 48
23136: EQUAL
23137: IFFALSE 23147
// driverShortName = Kir ;
23139: LD_ADDR_VAR 0 4
23143: PUSH
23144: LD_STRING Kir
23146: ST_TO_ADDR
// if driver = Belkov then
23147: LD_VAR 0 3
23151: PUSH
23152: LD_EXP 49
23156: EQUAL
23157: IFFALSE 23167
// driverShortName = Bel ;
23159: LD_ADDR_VAR 0 4
23163: PUSH
23164: LD_STRING Bel
23166: ST_TO_ADDR
// if driver = Belkov2 then
23167: LD_VAR 0 3
23171: PUSH
23172: LD_EXP 50
23176: EQUAL
23177: IFFALSE 23187
// driverShortName = Bel2 ;
23179: LD_ADDR_VAR 0 4
23183: PUSH
23184: LD_STRING Bel2
23186: ST_TO_ADDR
// if not driver in [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 ] then
23187: LD_VAR 0 3
23191: PUSH
23192: LD_EXP 39
23196: PUSH
23197: LD_EXP 40
23201: PUSH
23202: LD_EXP 41
23206: PUSH
23207: LD_EXP 42
23211: PUSH
23212: LD_EXP 43
23216: PUSH
23217: LD_EXP 44
23221: PUSH
23222: LD_EXP 45
23226: PUSH
23227: LD_EXP 46
23231: PUSH
23232: LD_EXP 48
23236: PUSH
23237: LD_EXP 49
23241: PUSH
23242: LD_EXP 50
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: IN
23260: NOT
23261: IFFALSE 23271
// driverShortName = rand ;
23263: LD_ADDR_VAR 0 4
23267: PUSH
23268: LD_STRING rand
23270: ST_TO_ADDR
// vehsFrom06 = vehsFrom06 ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , driverShortName ] ] ;
23271: LD_ADDR_EXP 7
23275: PUSH
23276: LD_EXP 7
23280: PUSH
23281: LD_VAR 0 2
23285: PPUSH
23286: CALL_OW 248
23290: PUSH
23291: LD_VAR 0 2
23295: PPUSH
23296: CALL_OW 265
23300: PUSH
23301: LD_VAR 0 2
23305: PPUSH
23306: CALL_OW 262
23310: PUSH
23311: LD_VAR 0 2
23315: PPUSH
23316: CALL_OW 263
23320: PUSH
23321: LD_VAR 0 2
23325: PPUSH
23326: CALL_OW 264
23330: PUSH
23331: LD_VAR 0 4
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: PUSH
23344: EMPTY
23345: LIST
23346: ADD
23347: ST_TO_ADDR
// end ;
23348: GO 22945
23350: POP
23351: POP
// SaveVariable ( vehsFrom06 , 06_Vehicles_2 ) ;
23352: LD_EXP 7
23356: PPUSH
23357: LD_STRING 06_Vehicles_2
23359: PPUSH
23360: CALL_OW 39
// SaveVariable ( savedVsevolod , 06_VsevolodStatus_4 ) ;
23364: LD_EXP 19
23368: PPUSH
23369: LD_STRING 06_VsevolodStatus_4
23371: PPUSH
23372: CALL_OW 39
// end ; end_of_file
23376: LD_VAR 0 1
23380: RET
// on UnitDestroyed ( unit ) do begin if unit in ovsyenkoBase then
23381: LD_VAR 0 1
23385: PUSH
23386: LD_EXP 59
23390: IN
23391: IFFALSE 23409
// ovsyenkoBase = ovsyenkoBase diff unit ;
23393: LD_ADDR_EXP 59
23397: PUSH
23398: LD_EXP 59
23402: PUSH
23403: LD_VAR 0 1
23407: DIFF
23408: ST_TO_ADDR
// if unit = Burlak then
23409: LD_VAR 0 1
23413: PUSH
23414: LD_EXP 39
23418: EQUAL
23419: IFFALSE 23425
// Lose_Burlak ;
23421: CALL 21878 0 0
// if unit = Vsevolod and GetSide ( Vsevolod ) = 3 then
23425: LD_VAR 0 1
23429: PUSH
23430: LD_EXP 51
23434: EQUAL
23435: PUSH
23436: LD_EXP 51
23440: PPUSH
23441: CALL_OW 255
23445: PUSH
23446: LD_INT 3
23448: EQUAL
23449: AND
23450: IFFALSE 23460
// savedVsevolod = false ;
23452: LD_ADDR_EXP 19
23456: PUSH
23457: LD_INT 0
23459: ST_TO_ADDR
// if unit = ovsyenko and GetSide ( ovsyenko ) = 3 then
23460: LD_VAR 0 1
23464: PUSH
23465: LD_INT 86
23467: EQUAL
23468: PUSH
23469: LD_INT 86
23471: PPUSH
23472: CALL_OW 255
23476: PUSH
23477: LD_INT 3
23479: EQUAL
23480: AND
23481: IFFALSE 23491
// lostAgainBase = true ;
23483: LD_ADDR_EXP 17
23487: PUSH
23488: LD_INT 1
23490: ST_TO_ADDR
// end ;
23491: PPOPN 1
23493: END
// on UnitDestroyed_Extra ( unit , killer_side , killer_unit ) do begin if unit = Gleb and killer_side = 3 then
23494: LD_VAR 0 1
23498: PUSH
23499: LD_EXP 42
23503: EQUAL
23504: PUSH
23505: LD_VAR 0 2
23509: PUSH
23510: LD_INT 3
23512: EQUAL
23513: AND
23514: IFFALSE 23520
// Lose_Gleb ;
23516: CALL 21893 0 0
// if unit = Vsevolod then
23520: LD_VAR 0 1
23524: PUSH
23525: LD_EXP 51
23529: EQUAL
23530: IFFALSE 23540
// savedVsevolod = false ;
23532: LD_ADDR_EXP 19
23536: PUSH
23537: LD_INT 0
23539: ST_TO_ADDR
// end ;
23540: PPOPN 3
23542: END
// on BuildingComplete ( building ) do begin end ;
23543: PPOPN 1
23545: END
// on BuildingCaptured ( building , side , human ) do begin if GetSide ( human ) = 3 and GetBType ( building ) = b_siberite_mine and not dial_SibTechsBlocker then
23546: LD_VAR 0 3
23550: PPUSH
23551: CALL_OW 255
23555: PUSH
23556: LD_INT 3
23558: EQUAL
23559: PUSH
23560: LD_VAR 0 1
23564: PPUSH
23565: CALL_OW 266
23569: PUSH
23570: LD_INT 30
23572: EQUAL
23573: AND
23574: PUSH
23575: LD_EXP 9
23579: NOT
23580: AND
23581: IFFALSE 23587
// Dial_SibTechs ;
23583: CALL 17239 0 0
// if GetSide ( human ) = 3 and GetBType ( building ) in [ b_depot , b_warehouse ] and GetResourceType ( GetBase ( building ) , mat_siberit ) > 0 and not dial_SibTechsBlocker then
23587: LD_VAR 0 3
23591: PPUSH
23592: CALL_OW 255
23596: PUSH
23597: LD_INT 3
23599: EQUAL
23600: PUSH
23601: LD_VAR 0 1
23605: PPUSH
23606: CALL_OW 266
23610: PUSH
23611: LD_INT 0
23613: PUSH
23614: LD_INT 1
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: IN
23621: AND
23622: PUSH
23623: LD_VAR 0 1
23627: PPUSH
23628: CALL_OW 274
23632: PPUSH
23633: LD_INT 3
23635: PPUSH
23636: CALL_OW 275
23640: PUSH
23641: LD_INT 0
23643: GREATER
23644: AND
23645: PUSH
23646: LD_EXP 9
23650: NOT
23651: AND
23652: IFFALSE 23658
// Dial_SibTechs ;
23654: CALL 17239 0 0
// end ;
23658: PPOPN 3
23660: END
// on Contact ( side1 , side2 ) do begin end ;
23661: PPOPN 2
23663: END
// on VehicleConstructed ( vehicle , building ) do var side , controlTowers , tmp ;
23664: LD_INT 0
23666: PPUSH
23667: PPUSH
23668: PPUSH
// begin if GetSide ( vehicle ) = 1 then
23669: LD_VAR 0 1
23673: PPUSH
23674: CALL_OW 255
23678: PUSH
23679: LD_INT 1
23681: EQUAL
23682: IFFALSE 23849
// begin controlTowers = FilterUnitsInArea ( HeadAmericanBaseArea , [ [ f_side , 1 ] , [ f_ok ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_vehicle ] ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23684: LD_ADDR_VAR 0 4
23688: PUSH
23689: LD_INT 5
23691: PPUSH
23692: LD_INT 22
23694: PUSH
23695: LD_INT 1
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PUSH
23702: LD_INT 50
23704: PUSH
23705: EMPTY
23706: LIST
23707: PUSH
23708: LD_INT 2
23710: PUSH
23711: LD_INT 21
23713: PUSH
23714: LD_INT 3
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 21
23723: PUSH
23724: LD_INT 2
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 2
23738: PUSH
23739: LD_INT 30
23741: PUSH
23742: LD_INT 36
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PUSH
23749: LD_INT 34
23751: PUSH
23752: LD_INT 31
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: LIST
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: PPUSH
23770: CALL_OW 70
23774: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote and controlTowers then
23775: LD_VAR 0 1
23779: PPUSH
23780: CALL_OW 263
23784: PUSH
23785: LD_INT 2
23787: EQUAL
23788: PUSH
23789: LD_VAR 0 4
23793: AND
23794: IFFALSE 23849
// begin tmp = UnitsInside ( controlTowers [ 1 ] ) ;
23796: LD_ADDR_VAR 0 5
23800: PUSH
23801: LD_VAR 0 4
23805: PUSH
23806: LD_INT 1
23808: ARRAY
23809: PPUSH
23810: CALL_OW 313
23814: ST_TO_ADDR
// if tmp then
23815: LD_VAR 0 5
23819: IFFALSE 23849
// LinkVehicleToHuman ( vehicle , tmp [ rand ( 1 , tmp ) ] ) ;
23821: LD_VAR 0 1
23825: PPUSH
23826: LD_VAR 0 5
23830: PUSH
23831: LD_INT 1
23833: PPUSH
23834: LD_VAR 0 5
23838: PPUSH
23839: CALL_OW 12
23843: ARRAY
23844: PPUSH
23845: CALL_OW 53
// end ; end ; end ;
23849: PPOPN 5
23851: END
// on ResearchComplete ( research , building ) do begin if research = tech_TauField then
23852: LD_VAR 0 1
23856: PUSH
23857: LD_INT 30
23859: EQUAL
23860: IFFALSE 23866
// Dial_ResearchTauField ;
23862: CALL 20707 0 0
// if research = tech_SibEng and GetTech ( tech_TauField , 3 ) = state_researched then
23866: LD_VAR 0 1
23870: PUSH
23871: LD_INT 22
23873: EQUAL
23874: PUSH
23875: LD_INT 30
23877: PPUSH
23878: LD_INT 3
23880: PPUSH
23881: CALL_OW 321
23885: PUSH
23886: LD_INT 2
23888: EQUAL
23889: AND
23890: IFFALSE 23899
// ChangeMissionObjectives ( MOutResearch ) ;
23892: LD_STRING MOutResearch
23894: PPUSH
23895: CALL_OW 337
// if research = tech_MatPred then
23899: LD_VAR 0 1
23903: PUSH
23904: LD_INT 9
23906: EQUAL
23907: IFFALSE 23913
// Dial_ResearchMatPredictions ;
23909: CALL 17394 0 0
// end ; end_of_file
23913: PPOPN 2
23915: END
// every 0 0$1 trigger enableVsevolodCounter do
23916: LD_EXP 22
23920: IFFALSE 23940
23922: GO 23924
23924: DISABLE
// begin enable ;
23925: ENABLE
// timeToAttack = timeToAttack + 0 0$01 ;
23926: LD_ADDR_EXP 26
23930: PUSH
23931: LD_EXP 26
23935: PUSH
23936: LD_INT 35
23938: PLUS
23939: ST_TO_ADDR
// end ; end_of_file
23940: END
// every 0 0$01 do var timer ;
23941: GO 23943
23943: DISABLE
23944: LD_INT 0
23946: PPUSH
// begin timer := 5 5$30 ;
23947: LD_ADDR_VAR 0 1
23951: PUSH
23952: LD_INT 11550
23954: ST_TO_ADDR
// repeat wait ( timer ) ;
23955: LD_VAR 0 1
23959: PPUSH
23960: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
23964: LD_INT 3
23966: PPUSH
23967: LD_INT 5
23969: PPUSH
23970: CALL_OW 12
23974: PPUSH
23975: LD_INT 20
23977: PPUSH
23978: LD_INT 1
23980: PPUSH
23981: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
23985: LD_ADDR_EXP 27
23989: PUSH
23990: LD_EXP 27
23994: PUSH
23995: LD_INT 1
23997: PLUS
23998: ST_TO_ADDR
// until cratesSpawned = 3 ;
23999: LD_EXP 27
24003: PUSH
24004: LD_INT 3
24006: EQUAL
24007: IFFALSE 23955
// end ; end_of_file
24009: PPOPN 1
24011: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
24012: LD_INT 0
24014: PPUSH
// ar_miner := 81 ;
24015: LD_ADDR_EXP 72
24019: PUSH
24020: LD_INT 81
24022: ST_TO_ADDR
// ar_crane := 88 ;
24023: LD_ADDR_EXP 71
24027: PUSH
24028: LD_INT 88
24030: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24031: LD_ADDR_EXP 66
24035: PUSH
24036: LD_INT 89
24038: ST_TO_ADDR
// us_hack := 99 ;
24039: LD_ADDR_EXP 67
24043: PUSH
24044: LD_INT 99
24046: ST_TO_ADDR
// us_artillery := 97 ;
24047: LD_ADDR_EXP 68
24051: PUSH
24052: LD_INT 97
24054: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24055: LD_ADDR_EXP 69
24059: PUSH
24060: LD_INT 91
24062: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
24063: LD_ADDR_EXP 70
24067: PUSH
24068: LD_INT 92
24070: ST_TO_ADDR
// ru_radar := 98 ;
24071: LD_ADDR_EXP 65
24075: PUSH
24076: LD_INT 98
24078: ST_TO_ADDR
// tech_Artillery := 80 ;
24079: LD_ADDR_EXP 73
24083: PUSH
24084: LD_INT 80
24086: ST_TO_ADDR
// tech_RadMat := 81 ;
24087: LD_ADDR_EXP 74
24091: PUSH
24092: LD_INT 81
24094: ST_TO_ADDR
// tech_BasicTools := 82 ;
24095: LD_ADDR_EXP 75
24099: PUSH
24100: LD_INT 82
24102: ST_TO_ADDR
// tech_Cargo := 83 ;
24103: LD_ADDR_EXP 76
24107: PUSH
24108: LD_INT 83
24110: ST_TO_ADDR
// tech_Track := 84 ;
24111: LD_ADDR_EXP 77
24115: PUSH
24116: LD_INT 84
24118: ST_TO_ADDR
// tech_Crane := 85 ;
24119: LD_ADDR_EXP 78
24123: PUSH
24124: LD_INT 85
24126: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24127: LD_ADDR_EXP 79
24131: PUSH
24132: LD_INT 86
24134: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24135: LD_ADDR_EXP 80
24139: PUSH
24140: LD_INT 87
24142: ST_TO_ADDR
// end ;
24143: LD_VAR 0 1
24147: RET
// every 1 do
24148: GO 24150
24150: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
24151: CALL 24012 0 0
24155: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
24156: LD_VAR 0 2
24160: PUSH
24161: LD_INT 100
24163: EQUAL
24164: IFFALSE 25113
// begin if not StreamModeActive then
24166: LD_EXP 81
24170: NOT
24171: IFFALSE 24181
// StreamModeActive := true ;
24173: LD_ADDR_EXP 81
24177: PUSH
24178: LD_INT 1
24180: ST_TO_ADDR
// if p3 = 0 then
24181: LD_VAR 0 3
24185: PUSH
24186: LD_INT 0
24188: EQUAL
24189: IFFALSE 24195
// InitStreamMode ;
24191: CALL 25271 0 0
// if p3 = 1 then
24195: LD_VAR 0 3
24199: PUSH
24200: LD_INT 1
24202: EQUAL
24203: IFFALSE 24213
// sRocket := true ;
24205: LD_ADDR_EXP 86
24209: PUSH
24210: LD_INT 1
24212: ST_TO_ADDR
// if p3 = 2 then
24213: LD_VAR 0 3
24217: PUSH
24218: LD_INT 2
24220: EQUAL
24221: IFFALSE 24231
// sSpeed := true ;
24223: LD_ADDR_EXP 85
24227: PUSH
24228: LD_INT 1
24230: ST_TO_ADDR
// if p3 = 3 then
24231: LD_VAR 0 3
24235: PUSH
24236: LD_INT 3
24238: EQUAL
24239: IFFALSE 24249
// sEngine := true ;
24241: LD_ADDR_EXP 87
24245: PUSH
24246: LD_INT 1
24248: ST_TO_ADDR
// if p3 = 4 then
24249: LD_VAR 0 3
24253: PUSH
24254: LD_INT 4
24256: EQUAL
24257: IFFALSE 24267
// sSpec := true ;
24259: LD_ADDR_EXP 84
24263: PUSH
24264: LD_INT 1
24266: ST_TO_ADDR
// if p3 = 5 then
24267: LD_VAR 0 3
24271: PUSH
24272: LD_INT 5
24274: EQUAL
24275: IFFALSE 24285
// sLevel := true ;
24277: LD_ADDR_EXP 88
24281: PUSH
24282: LD_INT 1
24284: ST_TO_ADDR
// if p3 = 6 then
24285: LD_VAR 0 3
24289: PUSH
24290: LD_INT 6
24292: EQUAL
24293: IFFALSE 24303
// sArmoury := true ;
24295: LD_ADDR_EXP 89
24299: PUSH
24300: LD_INT 1
24302: ST_TO_ADDR
// if p3 = 7 then
24303: LD_VAR 0 3
24307: PUSH
24308: LD_INT 7
24310: EQUAL
24311: IFFALSE 24321
// sRadar := true ;
24313: LD_ADDR_EXP 90
24317: PUSH
24318: LD_INT 1
24320: ST_TO_ADDR
// if p3 = 8 then
24321: LD_VAR 0 3
24325: PUSH
24326: LD_INT 8
24328: EQUAL
24329: IFFALSE 24339
// sBunker := true ;
24331: LD_ADDR_EXP 91
24335: PUSH
24336: LD_INT 1
24338: ST_TO_ADDR
// if p3 = 9 then
24339: LD_VAR 0 3
24343: PUSH
24344: LD_INT 9
24346: EQUAL
24347: IFFALSE 24357
// sHack := true ;
24349: LD_ADDR_EXP 92
24353: PUSH
24354: LD_INT 1
24356: ST_TO_ADDR
// if p3 = 10 then
24357: LD_VAR 0 3
24361: PUSH
24362: LD_INT 10
24364: EQUAL
24365: IFFALSE 24375
// sFire := true ;
24367: LD_ADDR_EXP 93
24371: PUSH
24372: LD_INT 1
24374: ST_TO_ADDR
// if p3 = 11 then
24375: LD_VAR 0 3
24379: PUSH
24380: LD_INT 11
24382: EQUAL
24383: IFFALSE 24393
// sRefresh := true ;
24385: LD_ADDR_EXP 94
24389: PUSH
24390: LD_INT 1
24392: ST_TO_ADDR
// if p3 = 12 then
24393: LD_VAR 0 3
24397: PUSH
24398: LD_INT 12
24400: EQUAL
24401: IFFALSE 24411
// sExp := true ;
24403: LD_ADDR_EXP 95
24407: PUSH
24408: LD_INT 1
24410: ST_TO_ADDR
// if p3 = 13 then
24411: LD_VAR 0 3
24415: PUSH
24416: LD_INT 13
24418: EQUAL
24419: IFFALSE 24429
// sDepot := true ;
24421: LD_ADDR_EXP 96
24425: PUSH
24426: LD_INT 1
24428: ST_TO_ADDR
// if p3 = 14 then
24429: LD_VAR 0 3
24433: PUSH
24434: LD_INT 14
24436: EQUAL
24437: IFFALSE 24447
// sFlag := true ;
24439: LD_ADDR_EXP 97
24443: PUSH
24444: LD_INT 1
24446: ST_TO_ADDR
// if p3 = 15 then
24447: LD_VAR 0 3
24451: PUSH
24452: LD_INT 15
24454: EQUAL
24455: IFFALSE 24465
// sKamikadze := true ;
24457: LD_ADDR_EXP 105
24461: PUSH
24462: LD_INT 1
24464: ST_TO_ADDR
// if p3 = 16 then
24465: LD_VAR 0 3
24469: PUSH
24470: LD_INT 16
24472: EQUAL
24473: IFFALSE 24483
// sTroll := true ;
24475: LD_ADDR_EXP 106
24479: PUSH
24480: LD_INT 1
24482: ST_TO_ADDR
// if p3 = 17 then
24483: LD_VAR 0 3
24487: PUSH
24488: LD_INT 17
24490: EQUAL
24491: IFFALSE 24501
// sSlow := true ;
24493: LD_ADDR_EXP 107
24497: PUSH
24498: LD_INT 1
24500: ST_TO_ADDR
// if p3 = 18 then
24501: LD_VAR 0 3
24505: PUSH
24506: LD_INT 18
24508: EQUAL
24509: IFFALSE 24519
// sLack := true ;
24511: LD_ADDR_EXP 108
24515: PUSH
24516: LD_INT 1
24518: ST_TO_ADDR
// if p3 = 19 then
24519: LD_VAR 0 3
24523: PUSH
24524: LD_INT 19
24526: EQUAL
24527: IFFALSE 24537
// sTank := true ;
24529: LD_ADDR_EXP 110
24533: PUSH
24534: LD_INT 1
24536: ST_TO_ADDR
// if p3 = 20 then
24537: LD_VAR 0 3
24541: PUSH
24542: LD_INT 20
24544: EQUAL
24545: IFFALSE 24555
// sRemote := true ;
24547: LD_ADDR_EXP 111
24551: PUSH
24552: LD_INT 1
24554: ST_TO_ADDR
// if p3 = 21 then
24555: LD_VAR 0 3
24559: PUSH
24560: LD_INT 21
24562: EQUAL
24563: IFFALSE 24573
// sPowell := true ;
24565: LD_ADDR_EXP 112
24569: PUSH
24570: LD_INT 1
24572: ST_TO_ADDR
// if p3 = 22 then
24573: LD_VAR 0 3
24577: PUSH
24578: LD_INT 22
24580: EQUAL
24581: IFFALSE 24591
// sTeleport := true ;
24583: LD_ADDR_EXP 115
24587: PUSH
24588: LD_INT 1
24590: ST_TO_ADDR
// if p3 = 23 then
24591: LD_VAR 0 3
24595: PUSH
24596: LD_INT 23
24598: EQUAL
24599: IFFALSE 24609
// sOilTower := true ;
24601: LD_ADDR_EXP 117
24605: PUSH
24606: LD_INT 1
24608: ST_TO_ADDR
// if p3 = 24 then
24609: LD_VAR 0 3
24613: PUSH
24614: LD_INT 24
24616: EQUAL
24617: IFFALSE 24627
// sShovel := true ;
24619: LD_ADDR_EXP 118
24623: PUSH
24624: LD_INT 1
24626: ST_TO_ADDR
// if p3 = 25 then
24627: LD_VAR 0 3
24631: PUSH
24632: LD_INT 25
24634: EQUAL
24635: IFFALSE 24645
// sSheik := true ;
24637: LD_ADDR_EXP 119
24641: PUSH
24642: LD_INT 1
24644: ST_TO_ADDR
// if p3 = 26 then
24645: LD_VAR 0 3
24649: PUSH
24650: LD_INT 26
24652: EQUAL
24653: IFFALSE 24663
// sEarthquake := true ;
24655: LD_ADDR_EXP 121
24659: PUSH
24660: LD_INT 1
24662: ST_TO_ADDR
// if p3 = 27 then
24663: LD_VAR 0 3
24667: PUSH
24668: LD_INT 27
24670: EQUAL
24671: IFFALSE 24681
// sAI := true ;
24673: LD_ADDR_EXP 122
24677: PUSH
24678: LD_INT 1
24680: ST_TO_ADDR
// if p3 = 28 then
24681: LD_VAR 0 3
24685: PUSH
24686: LD_INT 28
24688: EQUAL
24689: IFFALSE 24699
// sCargo := true ;
24691: LD_ADDR_EXP 125
24695: PUSH
24696: LD_INT 1
24698: ST_TO_ADDR
// if p3 = 29 then
24699: LD_VAR 0 3
24703: PUSH
24704: LD_INT 29
24706: EQUAL
24707: IFFALSE 24717
// sDLaser := true ;
24709: LD_ADDR_EXP 126
24713: PUSH
24714: LD_INT 1
24716: ST_TO_ADDR
// if p3 = 30 then
24717: LD_VAR 0 3
24721: PUSH
24722: LD_INT 30
24724: EQUAL
24725: IFFALSE 24735
// sExchange := true ;
24727: LD_ADDR_EXP 127
24731: PUSH
24732: LD_INT 1
24734: ST_TO_ADDR
// if p3 = 31 then
24735: LD_VAR 0 3
24739: PUSH
24740: LD_INT 31
24742: EQUAL
24743: IFFALSE 24753
// sFac := true ;
24745: LD_ADDR_EXP 128
24749: PUSH
24750: LD_INT 1
24752: ST_TO_ADDR
// if p3 = 32 then
24753: LD_VAR 0 3
24757: PUSH
24758: LD_INT 32
24760: EQUAL
24761: IFFALSE 24771
// sPower := true ;
24763: LD_ADDR_EXP 129
24767: PUSH
24768: LD_INT 1
24770: ST_TO_ADDR
// if p3 = 33 then
24771: LD_VAR 0 3
24775: PUSH
24776: LD_INT 33
24778: EQUAL
24779: IFFALSE 24789
// sRandom := true ;
24781: LD_ADDR_EXP 130
24785: PUSH
24786: LD_INT 1
24788: ST_TO_ADDR
// if p3 = 34 then
24789: LD_VAR 0 3
24793: PUSH
24794: LD_INT 34
24796: EQUAL
24797: IFFALSE 24807
// sShield := true ;
24799: LD_ADDR_EXP 131
24803: PUSH
24804: LD_INT 1
24806: ST_TO_ADDR
// if p3 = 35 then
24807: LD_VAR 0 3
24811: PUSH
24812: LD_INT 35
24814: EQUAL
24815: IFFALSE 24825
// sTime := true ;
24817: LD_ADDR_EXP 132
24821: PUSH
24822: LD_INT 1
24824: ST_TO_ADDR
// if p3 = 36 then
24825: LD_VAR 0 3
24829: PUSH
24830: LD_INT 36
24832: EQUAL
24833: IFFALSE 24843
// sTools := true ;
24835: LD_ADDR_EXP 133
24839: PUSH
24840: LD_INT 1
24842: ST_TO_ADDR
// if p3 = 101 then
24843: LD_VAR 0 3
24847: PUSH
24848: LD_INT 101
24850: EQUAL
24851: IFFALSE 24861
// sSold := true ;
24853: LD_ADDR_EXP 98
24857: PUSH
24858: LD_INT 1
24860: ST_TO_ADDR
// if p3 = 102 then
24861: LD_VAR 0 3
24865: PUSH
24866: LD_INT 102
24868: EQUAL
24869: IFFALSE 24879
// sDiff := true ;
24871: LD_ADDR_EXP 99
24875: PUSH
24876: LD_INT 1
24878: ST_TO_ADDR
// if p3 = 103 then
24879: LD_VAR 0 3
24883: PUSH
24884: LD_INT 103
24886: EQUAL
24887: IFFALSE 24897
// sFog := true ;
24889: LD_ADDR_EXP 102
24893: PUSH
24894: LD_INT 1
24896: ST_TO_ADDR
// if p3 = 104 then
24897: LD_VAR 0 3
24901: PUSH
24902: LD_INT 104
24904: EQUAL
24905: IFFALSE 24915
// sReset := true ;
24907: LD_ADDR_EXP 103
24911: PUSH
24912: LD_INT 1
24914: ST_TO_ADDR
// if p3 = 105 then
24915: LD_VAR 0 3
24919: PUSH
24920: LD_INT 105
24922: EQUAL
24923: IFFALSE 24933
// sSun := true ;
24925: LD_ADDR_EXP 104
24929: PUSH
24930: LD_INT 1
24932: ST_TO_ADDR
// if p3 = 106 then
24933: LD_VAR 0 3
24937: PUSH
24938: LD_INT 106
24940: EQUAL
24941: IFFALSE 24951
// sTiger := true ;
24943: LD_ADDR_EXP 100
24947: PUSH
24948: LD_INT 1
24950: ST_TO_ADDR
// if p3 = 107 then
24951: LD_VAR 0 3
24955: PUSH
24956: LD_INT 107
24958: EQUAL
24959: IFFALSE 24969
// sBomb := true ;
24961: LD_ADDR_EXP 101
24965: PUSH
24966: LD_INT 1
24968: ST_TO_ADDR
// if p3 = 108 then
24969: LD_VAR 0 3
24973: PUSH
24974: LD_INT 108
24976: EQUAL
24977: IFFALSE 24987
// sWound := true ;
24979: LD_ADDR_EXP 109
24983: PUSH
24984: LD_INT 1
24986: ST_TO_ADDR
// if p3 = 109 then
24987: LD_VAR 0 3
24991: PUSH
24992: LD_INT 109
24994: EQUAL
24995: IFFALSE 25005
// sBetray := true ;
24997: LD_ADDR_EXP 113
25001: PUSH
25002: LD_INT 1
25004: ST_TO_ADDR
// if p3 = 110 then
25005: LD_VAR 0 3
25009: PUSH
25010: LD_INT 110
25012: EQUAL
25013: IFFALSE 25023
// sContamin := true ;
25015: LD_ADDR_EXP 114
25019: PUSH
25020: LD_INT 1
25022: ST_TO_ADDR
// if p3 = 111 then
25023: LD_VAR 0 3
25027: PUSH
25028: LD_INT 111
25030: EQUAL
25031: IFFALSE 25041
// sOil := true ;
25033: LD_ADDR_EXP 116
25037: PUSH
25038: LD_INT 1
25040: ST_TO_ADDR
// if p3 = 112 then
25041: LD_VAR 0 3
25045: PUSH
25046: LD_INT 112
25048: EQUAL
25049: IFFALSE 25059
// sStu := true ;
25051: LD_ADDR_EXP 120
25055: PUSH
25056: LD_INT 1
25058: ST_TO_ADDR
// if p3 = 113 then
25059: LD_VAR 0 3
25063: PUSH
25064: LD_INT 113
25066: EQUAL
25067: IFFALSE 25077
// sBazooka := true ;
25069: LD_ADDR_EXP 123
25073: PUSH
25074: LD_INT 1
25076: ST_TO_ADDR
// if p3 = 114 then
25077: LD_VAR 0 3
25081: PUSH
25082: LD_INT 114
25084: EQUAL
25085: IFFALSE 25095
// sMortar := true ;
25087: LD_ADDR_EXP 124
25091: PUSH
25092: LD_INT 1
25094: ST_TO_ADDR
// if p3 = 115 then
25095: LD_VAR 0 3
25099: PUSH
25100: LD_INT 115
25102: EQUAL
25103: IFFALSE 25113
// sRanger := true ;
25105: LD_ADDR_EXP 134
25109: PUSH
25110: LD_INT 1
25112: ST_TO_ADDR
// end ; if p2 = 101 then
25113: LD_VAR 0 2
25117: PUSH
25118: LD_INT 101
25120: EQUAL
25121: IFFALSE 25249
// begin case p3 of 1 :
25123: LD_VAR 0 3
25127: PUSH
25128: LD_INT 1
25130: DOUBLE
25131: EQUAL
25132: IFTRUE 25136
25134: GO 25143
25136: POP
// hHackUnlimitedResources ; 2 :
25137: CALL 36284 0 0
25141: GO 25249
25143: LD_INT 2
25145: DOUBLE
25146: EQUAL
25147: IFTRUE 25151
25149: GO 25158
25151: POP
// hHackSetLevel10 ; 3 :
25152: CALL 36417 0 0
25156: GO 25249
25158: LD_INT 3
25160: DOUBLE
25161: EQUAL
25162: IFTRUE 25166
25164: GO 25173
25166: POP
// hHackSetLevel10YourUnits ; 4 :
25167: CALL 36502 0 0
25171: GO 25249
25173: LD_INT 4
25175: DOUBLE
25176: EQUAL
25177: IFTRUE 25181
25179: GO 25188
25181: POP
// hHackInvincible ; 5 :
25182: CALL 36950 0 0
25186: GO 25249
25188: LD_INT 5
25190: DOUBLE
25191: EQUAL
25192: IFTRUE 25196
25194: GO 25203
25196: POP
// hHackInvisible ; 6 :
25197: CALL 37061 0 0
25201: GO 25249
25203: LD_INT 6
25205: DOUBLE
25206: EQUAL
25207: IFTRUE 25211
25209: GO 25218
25211: POP
// hHackChangeYourSide ; 7 :
25212: CALL 37118 0 0
25216: GO 25249
25218: LD_INT 7
25220: DOUBLE
25221: EQUAL
25222: IFTRUE 25226
25224: GO 25233
25226: POP
// hHackChangeUnitSide ; 8 :
25227: CALL 37160 0 0
25231: GO 25249
25233: LD_INT 8
25235: DOUBLE
25236: EQUAL
25237: IFTRUE 25241
25239: GO 25248
25241: POP
// hHackFog ; end ;
25242: CALL 37261 0 0
25246: GO 25249
25248: POP
// end ; end ;
25249: PPOPN 6
25251: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
25252: GO 25254
25254: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
25255: LD_STRING initStreamRollete();
25257: PPUSH
25258: CALL_OW 559
// InitStreamMode ;
25262: CALL 25271 0 0
// DefineStreamItems ( ) ;
25266: CALL 25711 0 0
// end ;
25270: END
// function InitStreamMode ; begin
25271: LD_INT 0
25273: PPUSH
// streamModeActive := false ;
25274: LD_ADDR_EXP 81
25278: PUSH
25279: LD_INT 0
25281: ST_TO_ADDR
// normalCounter := 36 ;
25282: LD_ADDR_EXP 82
25286: PUSH
25287: LD_INT 36
25289: ST_TO_ADDR
// hardcoreCounter := 16 ;
25290: LD_ADDR_EXP 83
25294: PUSH
25295: LD_INT 16
25297: ST_TO_ADDR
// sRocket := false ;
25298: LD_ADDR_EXP 86
25302: PUSH
25303: LD_INT 0
25305: ST_TO_ADDR
// sSpeed := false ;
25306: LD_ADDR_EXP 85
25310: PUSH
25311: LD_INT 0
25313: ST_TO_ADDR
// sEngine := false ;
25314: LD_ADDR_EXP 87
25318: PUSH
25319: LD_INT 0
25321: ST_TO_ADDR
// sSpec := false ;
25322: LD_ADDR_EXP 84
25326: PUSH
25327: LD_INT 0
25329: ST_TO_ADDR
// sLevel := false ;
25330: LD_ADDR_EXP 88
25334: PUSH
25335: LD_INT 0
25337: ST_TO_ADDR
// sArmoury := false ;
25338: LD_ADDR_EXP 89
25342: PUSH
25343: LD_INT 0
25345: ST_TO_ADDR
// sRadar := false ;
25346: LD_ADDR_EXP 90
25350: PUSH
25351: LD_INT 0
25353: ST_TO_ADDR
// sBunker := false ;
25354: LD_ADDR_EXP 91
25358: PUSH
25359: LD_INT 0
25361: ST_TO_ADDR
// sHack := false ;
25362: LD_ADDR_EXP 92
25366: PUSH
25367: LD_INT 0
25369: ST_TO_ADDR
// sFire := false ;
25370: LD_ADDR_EXP 93
25374: PUSH
25375: LD_INT 0
25377: ST_TO_ADDR
// sRefresh := false ;
25378: LD_ADDR_EXP 94
25382: PUSH
25383: LD_INT 0
25385: ST_TO_ADDR
// sExp := false ;
25386: LD_ADDR_EXP 95
25390: PUSH
25391: LD_INT 0
25393: ST_TO_ADDR
// sDepot := false ;
25394: LD_ADDR_EXP 96
25398: PUSH
25399: LD_INT 0
25401: ST_TO_ADDR
// sFlag := false ;
25402: LD_ADDR_EXP 97
25406: PUSH
25407: LD_INT 0
25409: ST_TO_ADDR
// sKamikadze := false ;
25410: LD_ADDR_EXP 105
25414: PUSH
25415: LD_INT 0
25417: ST_TO_ADDR
// sTroll := false ;
25418: LD_ADDR_EXP 106
25422: PUSH
25423: LD_INT 0
25425: ST_TO_ADDR
// sSlow := false ;
25426: LD_ADDR_EXP 107
25430: PUSH
25431: LD_INT 0
25433: ST_TO_ADDR
// sLack := false ;
25434: LD_ADDR_EXP 108
25438: PUSH
25439: LD_INT 0
25441: ST_TO_ADDR
// sTank := false ;
25442: LD_ADDR_EXP 110
25446: PUSH
25447: LD_INT 0
25449: ST_TO_ADDR
// sRemote := false ;
25450: LD_ADDR_EXP 111
25454: PUSH
25455: LD_INT 0
25457: ST_TO_ADDR
// sPowell := false ;
25458: LD_ADDR_EXP 112
25462: PUSH
25463: LD_INT 0
25465: ST_TO_ADDR
// sTeleport := false ;
25466: LD_ADDR_EXP 115
25470: PUSH
25471: LD_INT 0
25473: ST_TO_ADDR
// sOilTower := false ;
25474: LD_ADDR_EXP 117
25478: PUSH
25479: LD_INT 0
25481: ST_TO_ADDR
// sShovel := false ;
25482: LD_ADDR_EXP 118
25486: PUSH
25487: LD_INT 0
25489: ST_TO_ADDR
// sSheik := false ;
25490: LD_ADDR_EXP 119
25494: PUSH
25495: LD_INT 0
25497: ST_TO_ADDR
// sEarthquake := false ;
25498: LD_ADDR_EXP 121
25502: PUSH
25503: LD_INT 0
25505: ST_TO_ADDR
// sAI := false ;
25506: LD_ADDR_EXP 122
25510: PUSH
25511: LD_INT 0
25513: ST_TO_ADDR
// sCargo := false ;
25514: LD_ADDR_EXP 125
25518: PUSH
25519: LD_INT 0
25521: ST_TO_ADDR
// sDLaser := false ;
25522: LD_ADDR_EXP 126
25526: PUSH
25527: LD_INT 0
25529: ST_TO_ADDR
// sExchange := false ;
25530: LD_ADDR_EXP 127
25534: PUSH
25535: LD_INT 0
25537: ST_TO_ADDR
// sFac := false ;
25538: LD_ADDR_EXP 128
25542: PUSH
25543: LD_INT 0
25545: ST_TO_ADDR
// sPower := false ;
25546: LD_ADDR_EXP 129
25550: PUSH
25551: LD_INT 0
25553: ST_TO_ADDR
// sRandom := false ;
25554: LD_ADDR_EXP 130
25558: PUSH
25559: LD_INT 0
25561: ST_TO_ADDR
// sShield := false ;
25562: LD_ADDR_EXP 131
25566: PUSH
25567: LD_INT 0
25569: ST_TO_ADDR
// sTime := false ;
25570: LD_ADDR_EXP 132
25574: PUSH
25575: LD_INT 0
25577: ST_TO_ADDR
// sTools := false ;
25578: LD_ADDR_EXP 133
25582: PUSH
25583: LD_INT 0
25585: ST_TO_ADDR
// sSold := false ;
25586: LD_ADDR_EXP 98
25590: PUSH
25591: LD_INT 0
25593: ST_TO_ADDR
// sDiff := false ;
25594: LD_ADDR_EXP 99
25598: PUSH
25599: LD_INT 0
25601: ST_TO_ADDR
// sFog := false ;
25602: LD_ADDR_EXP 102
25606: PUSH
25607: LD_INT 0
25609: ST_TO_ADDR
// sReset := false ;
25610: LD_ADDR_EXP 103
25614: PUSH
25615: LD_INT 0
25617: ST_TO_ADDR
// sSun := false ;
25618: LD_ADDR_EXP 104
25622: PUSH
25623: LD_INT 0
25625: ST_TO_ADDR
// sTiger := false ;
25626: LD_ADDR_EXP 100
25630: PUSH
25631: LD_INT 0
25633: ST_TO_ADDR
// sBomb := false ;
25634: LD_ADDR_EXP 101
25638: PUSH
25639: LD_INT 0
25641: ST_TO_ADDR
// sWound := false ;
25642: LD_ADDR_EXP 109
25646: PUSH
25647: LD_INT 0
25649: ST_TO_ADDR
// sBetray := false ;
25650: LD_ADDR_EXP 113
25654: PUSH
25655: LD_INT 0
25657: ST_TO_ADDR
// sContamin := false ;
25658: LD_ADDR_EXP 114
25662: PUSH
25663: LD_INT 0
25665: ST_TO_ADDR
// sOil := false ;
25666: LD_ADDR_EXP 116
25670: PUSH
25671: LD_INT 0
25673: ST_TO_ADDR
// sStu := false ;
25674: LD_ADDR_EXP 120
25678: PUSH
25679: LD_INT 0
25681: ST_TO_ADDR
// sBazooka := false ;
25682: LD_ADDR_EXP 123
25686: PUSH
25687: LD_INT 0
25689: ST_TO_ADDR
// sMortar := false ;
25690: LD_ADDR_EXP 124
25694: PUSH
25695: LD_INT 0
25697: ST_TO_ADDR
// sRanger := false ;
25698: LD_ADDR_EXP 134
25702: PUSH
25703: LD_INT 0
25705: ST_TO_ADDR
// end ;
25706: LD_VAR 0 1
25710: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
25711: LD_INT 0
25713: PPUSH
25714: PPUSH
25715: PPUSH
25716: PPUSH
25717: PPUSH
// result := [ ] ;
25718: LD_ADDR_VAR 0 1
25722: PUSH
25723: EMPTY
25724: ST_TO_ADDR
// if campaign_id = 1 then
25725: LD_OWVAR 69
25729: PUSH
25730: LD_INT 1
25732: EQUAL
25733: IFFALSE 28671
// begin case mission_number of 1 :
25735: LD_OWVAR 70
25739: PUSH
25740: LD_INT 1
25742: DOUBLE
25743: EQUAL
25744: IFTRUE 25748
25746: GO 25812
25748: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
25749: LD_ADDR_VAR 0 1
25753: PUSH
25754: LD_INT 2
25756: PUSH
25757: LD_INT 4
25759: PUSH
25760: LD_INT 11
25762: PUSH
25763: LD_INT 12
25765: PUSH
25766: LD_INT 15
25768: PUSH
25769: LD_INT 16
25771: PUSH
25772: LD_INT 22
25774: PUSH
25775: LD_INT 23
25777: PUSH
25778: LD_INT 26
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 101
25794: PUSH
25795: LD_INT 102
25797: PUSH
25798: LD_INT 106
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: LIST
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: ST_TO_ADDR
25810: GO 28669
25812: LD_INT 2
25814: DOUBLE
25815: EQUAL
25816: IFTRUE 25820
25818: GO 25892
25820: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
25821: LD_ADDR_VAR 0 1
25825: PUSH
25826: LD_INT 2
25828: PUSH
25829: LD_INT 4
25831: PUSH
25832: LD_INT 11
25834: PUSH
25835: LD_INT 12
25837: PUSH
25838: LD_INT 15
25840: PUSH
25841: LD_INT 16
25843: PUSH
25844: LD_INT 22
25846: PUSH
25847: LD_INT 23
25849: PUSH
25850: LD_INT 26
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: PUSH
25864: LD_INT 101
25866: PUSH
25867: LD_INT 102
25869: PUSH
25870: LD_INT 105
25872: PUSH
25873: LD_INT 106
25875: PUSH
25876: LD_INT 108
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: ST_TO_ADDR
25890: GO 28669
25892: LD_INT 3
25894: DOUBLE
25895: EQUAL
25896: IFTRUE 25900
25898: GO 25976
25900: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
25901: LD_ADDR_VAR 0 1
25905: PUSH
25906: LD_INT 2
25908: PUSH
25909: LD_INT 4
25911: PUSH
25912: LD_INT 5
25914: PUSH
25915: LD_INT 11
25917: PUSH
25918: LD_INT 12
25920: PUSH
25921: LD_INT 15
25923: PUSH
25924: LD_INT 16
25926: PUSH
25927: LD_INT 22
25929: PUSH
25930: LD_INT 26
25932: PUSH
25933: LD_INT 36
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 101
25950: PUSH
25951: LD_INT 102
25953: PUSH
25954: LD_INT 105
25956: PUSH
25957: LD_INT 106
25959: PUSH
25960: LD_INT 108
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: ST_TO_ADDR
25974: GO 28669
25976: LD_INT 4
25978: DOUBLE
25979: EQUAL
25980: IFTRUE 25984
25982: GO 26068
25984: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
25985: LD_ADDR_VAR 0 1
25989: PUSH
25990: LD_INT 2
25992: PUSH
25993: LD_INT 4
25995: PUSH
25996: LD_INT 5
25998: PUSH
25999: LD_INT 8
26001: PUSH
26002: LD_INT 11
26004: PUSH
26005: LD_INT 12
26007: PUSH
26008: LD_INT 15
26010: PUSH
26011: LD_INT 16
26013: PUSH
26014: LD_INT 22
26016: PUSH
26017: LD_INT 23
26019: PUSH
26020: LD_INT 26
26022: PUSH
26023: LD_INT 36
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 101
26042: PUSH
26043: LD_INT 102
26045: PUSH
26046: LD_INT 105
26048: PUSH
26049: LD_INT 106
26051: PUSH
26052: LD_INT 108
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: ST_TO_ADDR
26066: GO 28669
26068: LD_INT 5
26070: DOUBLE
26071: EQUAL
26072: IFTRUE 26076
26074: GO 26176
26076: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
26077: LD_ADDR_VAR 0 1
26081: PUSH
26082: LD_INT 2
26084: PUSH
26085: LD_INT 4
26087: PUSH
26088: LD_INT 5
26090: PUSH
26091: LD_INT 6
26093: PUSH
26094: LD_INT 8
26096: PUSH
26097: LD_INT 11
26099: PUSH
26100: LD_INT 12
26102: PUSH
26103: LD_INT 15
26105: PUSH
26106: LD_INT 16
26108: PUSH
26109: LD_INT 22
26111: PUSH
26112: LD_INT 23
26114: PUSH
26115: LD_INT 25
26117: PUSH
26118: LD_INT 26
26120: PUSH
26121: LD_INT 36
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 101
26142: PUSH
26143: LD_INT 102
26145: PUSH
26146: LD_INT 105
26148: PUSH
26149: LD_INT 106
26151: PUSH
26152: LD_INT 108
26154: PUSH
26155: LD_INT 109
26157: PUSH
26158: LD_INT 112
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: ST_TO_ADDR
26174: GO 28669
26176: LD_INT 6
26178: DOUBLE
26179: EQUAL
26180: IFTRUE 26184
26182: GO 26304
26184: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
26185: LD_ADDR_VAR 0 1
26189: PUSH
26190: LD_INT 2
26192: PUSH
26193: LD_INT 4
26195: PUSH
26196: LD_INT 5
26198: PUSH
26199: LD_INT 6
26201: PUSH
26202: LD_INT 8
26204: PUSH
26205: LD_INT 11
26207: PUSH
26208: LD_INT 12
26210: PUSH
26211: LD_INT 15
26213: PUSH
26214: LD_INT 16
26216: PUSH
26217: LD_INT 20
26219: PUSH
26220: LD_INT 21
26222: PUSH
26223: LD_INT 22
26225: PUSH
26226: LD_INT 23
26228: PUSH
26229: LD_INT 25
26231: PUSH
26232: LD_INT 26
26234: PUSH
26235: LD_INT 30
26237: PUSH
26238: LD_INT 31
26240: PUSH
26241: LD_INT 32
26243: PUSH
26244: LD_INT 36
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 101
26270: PUSH
26271: LD_INT 102
26273: PUSH
26274: LD_INT 105
26276: PUSH
26277: LD_INT 106
26279: PUSH
26280: LD_INT 108
26282: PUSH
26283: LD_INT 109
26285: PUSH
26286: LD_INT 112
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: ST_TO_ADDR
26302: GO 28669
26304: LD_INT 7
26306: DOUBLE
26307: EQUAL
26308: IFTRUE 26312
26310: GO 26412
26312: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
26313: LD_ADDR_VAR 0 1
26317: PUSH
26318: LD_INT 2
26320: PUSH
26321: LD_INT 4
26323: PUSH
26324: LD_INT 5
26326: PUSH
26327: LD_INT 7
26329: PUSH
26330: LD_INT 11
26332: PUSH
26333: LD_INT 12
26335: PUSH
26336: LD_INT 15
26338: PUSH
26339: LD_INT 16
26341: PUSH
26342: LD_INT 20
26344: PUSH
26345: LD_INT 21
26347: PUSH
26348: LD_INT 22
26350: PUSH
26351: LD_INT 23
26353: PUSH
26354: LD_INT 25
26356: PUSH
26357: LD_INT 26
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 101
26378: PUSH
26379: LD_INT 102
26381: PUSH
26382: LD_INT 103
26384: PUSH
26385: LD_INT 105
26387: PUSH
26388: LD_INT 106
26390: PUSH
26391: LD_INT 108
26393: PUSH
26394: LD_INT 112
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: ST_TO_ADDR
26410: GO 28669
26412: LD_INT 8
26414: DOUBLE
26415: EQUAL
26416: IFTRUE 26420
26418: GO 26548
26420: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
26421: LD_ADDR_VAR 0 1
26425: PUSH
26426: LD_INT 2
26428: PUSH
26429: LD_INT 4
26431: PUSH
26432: LD_INT 5
26434: PUSH
26435: LD_INT 6
26437: PUSH
26438: LD_INT 7
26440: PUSH
26441: LD_INT 8
26443: PUSH
26444: LD_INT 11
26446: PUSH
26447: LD_INT 12
26449: PUSH
26450: LD_INT 15
26452: PUSH
26453: LD_INT 16
26455: PUSH
26456: LD_INT 20
26458: PUSH
26459: LD_INT 21
26461: PUSH
26462: LD_INT 22
26464: PUSH
26465: LD_INT 23
26467: PUSH
26468: LD_INT 25
26470: PUSH
26471: LD_INT 26
26473: PUSH
26474: LD_INT 30
26476: PUSH
26477: LD_INT 31
26479: PUSH
26480: LD_INT 32
26482: PUSH
26483: LD_INT 36
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 101
26510: PUSH
26511: LD_INT 102
26513: PUSH
26514: LD_INT 103
26516: PUSH
26517: LD_INT 105
26519: PUSH
26520: LD_INT 106
26522: PUSH
26523: LD_INT 108
26525: PUSH
26526: LD_INT 109
26528: PUSH
26529: LD_INT 112
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: ST_TO_ADDR
26546: GO 28669
26548: LD_INT 9
26550: DOUBLE
26551: EQUAL
26552: IFTRUE 26556
26554: GO 26692
26556: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
26557: LD_ADDR_VAR 0 1
26561: PUSH
26562: LD_INT 2
26564: PUSH
26565: LD_INT 4
26567: PUSH
26568: LD_INT 5
26570: PUSH
26571: LD_INT 6
26573: PUSH
26574: LD_INT 7
26576: PUSH
26577: LD_INT 8
26579: PUSH
26580: LD_INT 11
26582: PUSH
26583: LD_INT 12
26585: PUSH
26586: LD_INT 15
26588: PUSH
26589: LD_INT 16
26591: PUSH
26592: LD_INT 20
26594: PUSH
26595: LD_INT 21
26597: PUSH
26598: LD_INT 22
26600: PUSH
26601: LD_INT 23
26603: PUSH
26604: LD_INT 25
26606: PUSH
26607: LD_INT 26
26609: PUSH
26610: LD_INT 28
26612: PUSH
26613: LD_INT 30
26615: PUSH
26616: LD_INT 31
26618: PUSH
26619: LD_INT 32
26621: PUSH
26622: LD_INT 36
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 101
26650: PUSH
26651: LD_INT 102
26653: PUSH
26654: LD_INT 103
26656: PUSH
26657: LD_INT 105
26659: PUSH
26660: LD_INT 106
26662: PUSH
26663: LD_INT 108
26665: PUSH
26666: LD_INT 109
26668: PUSH
26669: LD_INT 112
26671: PUSH
26672: LD_INT 114
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: ST_TO_ADDR
26690: GO 28669
26692: LD_INT 10
26694: DOUBLE
26695: EQUAL
26696: IFTRUE 26700
26698: GO 26884
26700: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
26701: LD_ADDR_VAR 0 1
26705: PUSH
26706: LD_INT 2
26708: PUSH
26709: LD_INT 4
26711: PUSH
26712: LD_INT 5
26714: PUSH
26715: LD_INT 6
26717: PUSH
26718: LD_INT 7
26720: PUSH
26721: LD_INT 8
26723: PUSH
26724: LD_INT 9
26726: PUSH
26727: LD_INT 10
26729: PUSH
26730: LD_INT 11
26732: PUSH
26733: LD_INT 12
26735: PUSH
26736: LD_INT 13
26738: PUSH
26739: LD_INT 14
26741: PUSH
26742: LD_INT 15
26744: PUSH
26745: LD_INT 16
26747: PUSH
26748: LD_INT 17
26750: PUSH
26751: LD_INT 18
26753: PUSH
26754: LD_INT 19
26756: PUSH
26757: LD_INT 20
26759: PUSH
26760: LD_INT 21
26762: PUSH
26763: LD_INT 22
26765: PUSH
26766: LD_INT 23
26768: PUSH
26769: LD_INT 24
26771: PUSH
26772: LD_INT 25
26774: PUSH
26775: LD_INT 26
26777: PUSH
26778: LD_INT 28
26780: PUSH
26781: LD_INT 30
26783: PUSH
26784: LD_INT 31
26786: PUSH
26787: LD_INT 32
26789: PUSH
26790: LD_INT 36
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 101
26826: PUSH
26827: LD_INT 102
26829: PUSH
26830: LD_INT 103
26832: PUSH
26833: LD_INT 104
26835: PUSH
26836: LD_INT 105
26838: PUSH
26839: LD_INT 106
26841: PUSH
26842: LD_INT 107
26844: PUSH
26845: LD_INT 108
26847: PUSH
26848: LD_INT 109
26850: PUSH
26851: LD_INT 110
26853: PUSH
26854: LD_INT 111
26856: PUSH
26857: LD_INT 112
26859: PUSH
26860: LD_INT 114
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: ST_TO_ADDR
26882: GO 28669
26884: LD_INT 11
26886: DOUBLE
26887: EQUAL
26888: IFTRUE 26892
26890: GO 27084
26892: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
26893: LD_ADDR_VAR 0 1
26897: PUSH
26898: LD_INT 2
26900: PUSH
26901: LD_INT 3
26903: PUSH
26904: LD_INT 4
26906: PUSH
26907: LD_INT 5
26909: PUSH
26910: LD_INT 6
26912: PUSH
26913: LD_INT 7
26915: PUSH
26916: LD_INT 8
26918: PUSH
26919: LD_INT 9
26921: PUSH
26922: LD_INT 10
26924: PUSH
26925: LD_INT 11
26927: PUSH
26928: LD_INT 12
26930: PUSH
26931: LD_INT 13
26933: PUSH
26934: LD_INT 14
26936: PUSH
26937: LD_INT 15
26939: PUSH
26940: LD_INT 16
26942: PUSH
26943: LD_INT 17
26945: PUSH
26946: LD_INT 18
26948: PUSH
26949: LD_INT 19
26951: PUSH
26952: LD_INT 20
26954: PUSH
26955: LD_INT 21
26957: PUSH
26958: LD_INT 22
26960: PUSH
26961: LD_INT 23
26963: PUSH
26964: LD_INT 24
26966: PUSH
26967: LD_INT 25
26969: PUSH
26970: LD_INT 26
26972: PUSH
26973: LD_INT 28
26975: PUSH
26976: LD_INT 30
26978: PUSH
26979: LD_INT 31
26981: PUSH
26982: LD_INT 32
26984: PUSH
26985: LD_INT 34
26987: PUSH
26988: LD_INT 36
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 101
27026: PUSH
27027: LD_INT 102
27029: PUSH
27030: LD_INT 103
27032: PUSH
27033: LD_INT 104
27035: PUSH
27036: LD_INT 105
27038: PUSH
27039: LD_INT 106
27041: PUSH
27042: LD_INT 107
27044: PUSH
27045: LD_INT 108
27047: PUSH
27048: LD_INT 109
27050: PUSH
27051: LD_INT 110
27053: PUSH
27054: LD_INT 111
27056: PUSH
27057: LD_INT 112
27059: PUSH
27060: LD_INT 114
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: ST_TO_ADDR
27082: GO 28669
27084: LD_INT 12
27086: DOUBLE
27087: EQUAL
27088: IFTRUE 27092
27090: GO 27300
27092: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
27093: LD_ADDR_VAR 0 1
27097: PUSH
27098: LD_INT 1
27100: PUSH
27101: LD_INT 2
27103: PUSH
27104: LD_INT 3
27106: PUSH
27107: LD_INT 4
27109: PUSH
27110: LD_INT 5
27112: PUSH
27113: LD_INT 6
27115: PUSH
27116: LD_INT 7
27118: PUSH
27119: LD_INT 8
27121: PUSH
27122: LD_INT 9
27124: PUSH
27125: LD_INT 10
27127: PUSH
27128: LD_INT 11
27130: PUSH
27131: LD_INT 12
27133: PUSH
27134: LD_INT 13
27136: PUSH
27137: LD_INT 14
27139: PUSH
27140: LD_INT 15
27142: PUSH
27143: LD_INT 16
27145: PUSH
27146: LD_INT 17
27148: PUSH
27149: LD_INT 18
27151: PUSH
27152: LD_INT 19
27154: PUSH
27155: LD_INT 20
27157: PUSH
27158: LD_INT 21
27160: PUSH
27161: LD_INT 22
27163: PUSH
27164: LD_INT 23
27166: PUSH
27167: LD_INT 24
27169: PUSH
27170: LD_INT 25
27172: PUSH
27173: LD_INT 26
27175: PUSH
27176: LD_INT 27
27178: PUSH
27179: LD_INT 28
27181: PUSH
27182: LD_INT 30
27184: PUSH
27185: LD_INT 31
27187: PUSH
27188: LD_INT 32
27190: PUSH
27191: LD_INT 33
27193: PUSH
27194: LD_INT 34
27196: PUSH
27197: LD_INT 36
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 101
27238: PUSH
27239: LD_INT 102
27241: PUSH
27242: LD_INT 103
27244: PUSH
27245: LD_INT 104
27247: PUSH
27248: LD_INT 105
27250: PUSH
27251: LD_INT 106
27253: PUSH
27254: LD_INT 107
27256: PUSH
27257: LD_INT 108
27259: PUSH
27260: LD_INT 109
27262: PUSH
27263: LD_INT 110
27265: PUSH
27266: LD_INT 111
27268: PUSH
27269: LD_INT 112
27271: PUSH
27272: LD_INT 113
27274: PUSH
27275: LD_INT 114
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: ST_TO_ADDR
27298: GO 28669
27300: LD_INT 13
27302: DOUBLE
27303: EQUAL
27304: IFTRUE 27308
27306: GO 27504
27308: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
27309: LD_ADDR_VAR 0 1
27313: PUSH
27314: LD_INT 1
27316: PUSH
27317: LD_INT 2
27319: PUSH
27320: LD_INT 3
27322: PUSH
27323: LD_INT 4
27325: PUSH
27326: LD_INT 5
27328: PUSH
27329: LD_INT 8
27331: PUSH
27332: LD_INT 9
27334: PUSH
27335: LD_INT 10
27337: PUSH
27338: LD_INT 11
27340: PUSH
27341: LD_INT 12
27343: PUSH
27344: LD_INT 14
27346: PUSH
27347: LD_INT 15
27349: PUSH
27350: LD_INT 16
27352: PUSH
27353: LD_INT 17
27355: PUSH
27356: LD_INT 18
27358: PUSH
27359: LD_INT 19
27361: PUSH
27362: LD_INT 20
27364: PUSH
27365: LD_INT 21
27367: PUSH
27368: LD_INT 22
27370: PUSH
27371: LD_INT 23
27373: PUSH
27374: LD_INT 24
27376: PUSH
27377: LD_INT 25
27379: PUSH
27380: LD_INT 26
27382: PUSH
27383: LD_INT 27
27385: PUSH
27386: LD_INT 28
27388: PUSH
27389: LD_INT 30
27391: PUSH
27392: LD_INT 31
27394: PUSH
27395: LD_INT 32
27397: PUSH
27398: LD_INT 33
27400: PUSH
27401: LD_INT 34
27403: PUSH
27404: LD_INT 36
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 101
27442: PUSH
27443: LD_INT 102
27445: PUSH
27446: LD_INT 103
27448: PUSH
27449: LD_INT 104
27451: PUSH
27452: LD_INT 105
27454: PUSH
27455: LD_INT 106
27457: PUSH
27458: LD_INT 107
27460: PUSH
27461: LD_INT 108
27463: PUSH
27464: LD_INT 109
27466: PUSH
27467: LD_INT 110
27469: PUSH
27470: LD_INT 111
27472: PUSH
27473: LD_INT 112
27475: PUSH
27476: LD_INT 113
27478: PUSH
27479: LD_INT 114
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: ST_TO_ADDR
27502: GO 28669
27504: LD_INT 14
27506: DOUBLE
27507: EQUAL
27508: IFTRUE 27512
27510: GO 27724
27512: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
27513: LD_ADDR_VAR 0 1
27517: PUSH
27518: LD_INT 1
27520: PUSH
27521: LD_INT 2
27523: PUSH
27524: LD_INT 3
27526: PUSH
27527: LD_INT 4
27529: PUSH
27530: LD_INT 5
27532: PUSH
27533: LD_INT 6
27535: PUSH
27536: LD_INT 7
27538: PUSH
27539: LD_INT 8
27541: PUSH
27542: LD_INT 9
27544: PUSH
27545: LD_INT 10
27547: PUSH
27548: LD_INT 11
27550: PUSH
27551: LD_INT 12
27553: PUSH
27554: LD_INT 13
27556: PUSH
27557: LD_INT 14
27559: PUSH
27560: LD_INT 15
27562: PUSH
27563: LD_INT 16
27565: PUSH
27566: LD_INT 17
27568: PUSH
27569: LD_INT 18
27571: PUSH
27572: LD_INT 19
27574: PUSH
27575: LD_INT 20
27577: PUSH
27578: LD_INT 21
27580: PUSH
27581: LD_INT 22
27583: PUSH
27584: LD_INT 23
27586: PUSH
27587: LD_INT 24
27589: PUSH
27590: LD_INT 25
27592: PUSH
27593: LD_INT 26
27595: PUSH
27596: LD_INT 27
27598: PUSH
27599: LD_INT 28
27601: PUSH
27602: LD_INT 29
27604: PUSH
27605: LD_INT 30
27607: PUSH
27608: LD_INT 31
27610: PUSH
27611: LD_INT 32
27613: PUSH
27614: LD_INT 33
27616: PUSH
27617: LD_INT 34
27619: PUSH
27620: LD_INT 36
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 101
27662: PUSH
27663: LD_INT 102
27665: PUSH
27666: LD_INT 103
27668: PUSH
27669: LD_INT 104
27671: PUSH
27672: LD_INT 105
27674: PUSH
27675: LD_INT 106
27677: PUSH
27678: LD_INT 107
27680: PUSH
27681: LD_INT 108
27683: PUSH
27684: LD_INT 109
27686: PUSH
27687: LD_INT 110
27689: PUSH
27690: LD_INT 111
27692: PUSH
27693: LD_INT 112
27695: PUSH
27696: LD_INT 113
27698: PUSH
27699: LD_INT 114
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: ST_TO_ADDR
27722: GO 28669
27724: LD_INT 15
27726: DOUBLE
27727: EQUAL
27728: IFTRUE 27732
27730: GO 27944
27732: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
27733: LD_ADDR_VAR 0 1
27737: PUSH
27738: LD_INT 1
27740: PUSH
27741: LD_INT 2
27743: PUSH
27744: LD_INT 3
27746: PUSH
27747: LD_INT 4
27749: PUSH
27750: LD_INT 5
27752: PUSH
27753: LD_INT 6
27755: PUSH
27756: LD_INT 7
27758: PUSH
27759: LD_INT 8
27761: PUSH
27762: LD_INT 9
27764: PUSH
27765: LD_INT 10
27767: PUSH
27768: LD_INT 11
27770: PUSH
27771: LD_INT 12
27773: PUSH
27774: LD_INT 13
27776: PUSH
27777: LD_INT 14
27779: PUSH
27780: LD_INT 15
27782: PUSH
27783: LD_INT 16
27785: PUSH
27786: LD_INT 17
27788: PUSH
27789: LD_INT 18
27791: PUSH
27792: LD_INT 19
27794: PUSH
27795: LD_INT 20
27797: PUSH
27798: LD_INT 21
27800: PUSH
27801: LD_INT 22
27803: PUSH
27804: LD_INT 23
27806: PUSH
27807: LD_INT 24
27809: PUSH
27810: LD_INT 25
27812: PUSH
27813: LD_INT 26
27815: PUSH
27816: LD_INT 27
27818: PUSH
27819: LD_INT 28
27821: PUSH
27822: LD_INT 29
27824: PUSH
27825: LD_INT 30
27827: PUSH
27828: LD_INT 31
27830: PUSH
27831: LD_INT 32
27833: PUSH
27834: LD_INT 33
27836: PUSH
27837: LD_INT 34
27839: PUSH
27840: LD_INT 36
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 101
27882: PUSH
27883: LD_INT 102
27885: PUSH
27886: LD_INT 103
27888: PUSH
27889: LD_INT 104
27891: PUSH
27892: LD_INT 105
27894: PUSH
27895: LD_INT 106
27897: PUSH
27898: LD_INT 107
27900: PUSH
27901: LD_INT 108
27903: PUSH
27904: LD_INT 109
27906: PUSH
27907: LD_INT 110
27909: PUSH
27910: LD_INT 111
27912: PUSH
27913: LD_INT 112
27915: PUSH
27916: LD_INT 113
27918: PUSH
27919: LD_INT 114
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: ST_TO_ADDR
27942: GO 28669
27944: LD_INT 16
27946: DOUBLE
27947: EQUAL
27948: IFTRUE 27952
27950: GO 28076
27952: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
27953: LD_ADDR_VAR 0 1
27957: PUSH
27958: LD_INT 2
27960: PUSH
27961: LD_INT 4
27963: PUSH
27964: LD_INT 5
27966: PUSH
27967: LD_INT 7
27969: PUSH
27970: LD_INT 11
27972: PUSH
27973: LD_INT 12
27975: PUSH
27976: LD_INT 15
27978: PUSH
27979: LD_INT 16
27981: PUSH
27982: LD_INT 20
27984: PUSH
27985: LD_INT 21
27987: PUSH
27988: LD_INT 22
27990: PUSH
27991: LD_INT 23
27993: PUSH
27994: LD_INT 25
27996: PUSH
27997: LD_INT 26
27999: PUSH
28000: LD_INT 30
28002: PUSH
28003: LD_INT 31
28005: PUSH
28006: LD_INT 32
28008: PUSH
28009: LD_INT 33
28011: PUSH
28012: LD_INT 34
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 101
28038: PUSH
28039: LD_INT 102
28041: PUSH
28042: LD_INT 103
28044: PUSH
28045: LD_INT 106
28047: PUSH
28048: LD_INT 108
28050: PUSH
28051: LD_INT 112
28053: PUSH
28054: LD_INT 113
28056: PUSH
28057: LD_INT 114
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: ST_TO_ADDR
28074: GO 28669
28076: LD_INT 17
28078: DOUBLE
28079: EQUAL
28080: IFTRUE 28084
28082: GO 28296
28084: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
28085: LD_ADDR_VAR 0 1
28089: PUSH
28090: LD_INT 1
28092: PUSH
28093: LD_INT 2
28095: PUSH
28096: LD_INT 3
28098: PUSH
28099: LD_INT 4
28101: PUSH
28102: LD_INT 5
28104: PUSH
28105: LD_INT 6
28107: PUSH
28108: LD_INT 7
28110: PUSH
28111: LD_INT 8
28113: PUSH
28114: LD_INT 9
28116: PUSH
28117: LD_INT 10
28119: PUSH
28120: LD_INT 11
28122: PUSH
28123: LD_INT 12
28125: PUSH
28126: LD_INT 13
28128: PUSH
28129: LD_INT 14
28131: PUSH
28132: LD_INT 15
28134: PUSH
28135: LD_INT 16
28137: PUSH
28138: LD_INT 17
28140: PUSH
28141: LD_INT 18
28143: PUSH
28144: LD_INT 19
28146: PUSH
28147: LD_INT 20
28149: PUSH
28150: LD_INT 21
28152: PUSH
28153: LD_INT 22
28155: PUSH
28156: LD_INT 23
28158: PUSH
28159: LD_INT 24
28161: PUSH
28162: LD_INT 25
28164: PUSH
28165: LD_INT 26
28167: PUSH
28168: LD_INT 27
28170: PUSH
28171: LD_INT 28
28173: PUSH
28174: LD_INT 29
28176: PUSH
28177: LD_INT 30
28179: PUSH
28180: LD_INT 31
28182: PUSH
28183: LD_INT 32
28185: PUSH
28186: LD_INT 33
28188: PUSH
28189: LD_INT 34
28191: PUSH
28192: LD_INT 36
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 101
28234: PUSH
28235: LD_INT 102
28237: PUSH
28238: LD_INT 103
28240: PUSH
28241: LD_INT 104
28243: PUSH
28244: LD_INT 105
28246: PUSH
28247: LD_INT 106
28249: PUSH
28250: LD_INT 107
28252: PUSH
28253: LD_INT 108
28255: PUSH
28256: LD_INT 109
28258: PUSH
28259: LD_INT 110
28261: PUSH
28262: LD_INT 111
28264: PUSH
28265: LD_INT 112
28267: PUSH
28268: LD_INT 113
28270: PUSH
28271: LD_INT 114
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: ST_TO_ADDR
28294: GO 28669
28296: LD_INT 18
28298: DOUBLE
28299: EQUAL
28300: IFTRUE 28304
28302: GO 28440
28304: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
28305: LD_ADDR_VAR 0 1
28309: PUSH
28310: LD_INT 2
28312: PUSH
28313: LD_INT 4
28315: PUSH
28316: LD_INT 5
28318: PUSH
28319: LD_INT 7
28321: PUSH
28322: LD_INT 11
28324: PUSH
28325: LD_INT 12
28327: PUSH
28328: LD_INT 15
28330: PUSH
28331: LD_INT 16
28333: PUSH
28334: LD_INT 20
28336: PUSH
28337: LD_INT 21
28339: PUSH
28340: LD_INT 22
28342: PUSH
28343: LD_INT 23
28345: PUSH
28346: LD_INT 25
28348: PUSH
28349: LD_INT 26
28351: PUSH
28352: LD_INT 30
28354: PUSH
28355: LD_INT 31
28357: PUSH
28358: LD_INT 32
28360: PUSH
28361: LD_INT 33
28363: PUSH
28364: LD_INT 34
28366: PUSH
28367: LD_INT 35
28369: PUSH
28370: LD_INT 36
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 101
28398: PUSH
28399: LD_INT 102
28401: PUSH
28402: LD_INT 103
28404: PUSH
28405: LD_INT 106
28407: PUSH
28408: LD_INT 108
28410: PUSH
28411: LD_INT 112
28413: PUSH
28414: LD_INT 113
28416: PUSH
28417: LD_INT 114
28419: PUSH
28420: LD_INT 115
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: LIST
28431: LIST
28432: LIST
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: ST_TO_ADDR
28438: GO 28669
28440: LD_INT 19
28442: DOUBLE
28443: EQUAL
28444: IFTRUE 28448
28446: GO 28668
28448: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
28449: LD_ADDR_VAR 0 1
28453: PUSH
28454: LD_INT 1
28456: PUSH
28457: LD_INT 2
28459: PUSH
28460: LD_INT 3
28462: PUSH
28463: LD_INT 4
28465: PUSH
28466: LD_INT 5
28468: PUSH
28469: LD_INT 6
28471: PUSH
28472: LD_INT 7
28474: PUSH
28475: LD_INT 8
28477: PUSH
28478: LD_INT 9
28480: PUSH
28481: LD_INT 10
28483: PUSH
28484: LD_INT 11
28486: PUSH
28487: LD_INT 12
28489: PUSH
28490: LD_INT 13
28492: PUSH
28493: LD_INT 14
28495: PUSH
28496: LD_INT 15
28498: PUSH
28499: LD_INT 16
28501: PUSH
28502: LD_INT 17
28504: PUSH
28505: LD_INT 18
28507: PUSH
28508: LD_INT 19
28510: PUSH
28511: LD_INT 20
28513: PUSH
28514: LD_INT 21
28516: PUSH
28517: LD_INT 22
28519: PUSH
28520: LD_INT 23
28522: PUSH
28523: LD_INT 24
28525: PUSH
28526: LD_INT 25
28528: PUSH
28529: LD_INT 26
28531: PUSH
28532: LD_INT 27
28534: PUSH
28535: LD_INT 28
28537: PUSH
28538: LD_INT 29
28540: PUSH
28541: LD_INT 30
28543: PUSH
28544: LD_INT 31
28546: PUSH
28547: LD_INT 32
28549: PUSH
28550: LD_INT 33
28552: PUSH
28553: LD_INT 34
28555: PUSH
28556: LD_INT 35
28558: PUSH
28559: LD_INT 36
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 101
28602: PUSH
28603: LD_INT 102
28605: PUSH
28606: LD_INT 103
28608: PUSH
28609: LD_INT 104
28611: PUSH
28612: LD_INT 105
28614: PUSH
28615: LD_INT 106
28617: PUSH
28618: LD_INT 107
28620: PUSH
28621: LD_INT 108
28623: PUSH
28624: LD_INT 109
28626: PUSH
28627: LD_INT 110
28629: PUSH
28630: LD_INT 111
28632: PUSH
28633: LD_INT 112
28635: PUSH
28636: LD_INT 113
28638: PUSH
28639: LD_INT 114
28641: PUSH
28642: LD_INT 115
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: ST_TO_ADDR
28666: GO 28669
28668: POP
// end else
28669: GO 28888
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
28671: LD_ADDR_VAR 0 1
28675: PUSH
28676: LD_INT 1
28678: PUSH
28679: LD_INT 2
28681: PUSH
28682: LD_INT 3
28684: PUSH
28685: LD_INT 4
28687: PUSH
28688: LD_INT 5
28690: PUSH
28691: LD_INT 6
28693: PUSH
28694: LD_INT 7
28696: PUSH
28697: LD_INT 8
28699: PUSH
28700: LD_INT 9
28702: PUSH
28703: LD_INT 10
28705: PUSH
28706: LD_INT 11
28708: PUSH
28709: LD_INT 12
28711: PUSH
28712: LD_INT 13
28714: PUSH
28715: LD_INT 14
28717: PUSH
28718: LD_INT 15
28720: PUSH
28721: LD_INT 16
28723: PUSH
28724: LD_INT 17
28726: PUSH
28727: LD_INT 18
28729: PUSH
28730: LD_INT 19
28732: PUSH
28733: LD_INT 20
28735: PUSH
28736: LD_INT 21
28738: PUSH
28739: LD_INT 22
28741: PUSH
28742: LD_INT 23
28744: PUSH
28745: LD_INT 24
28747: PUSH
28748: LD_INT 25
28750: PUSH
28751: LD_INT 26
28753: PUSH
28754: LD_INT 27
28756: PUSH
28757: LD_INT 28
28759: PUSH
28760: LD_INT 29
28762: PUSH
28763: LD_INT 30
28765: PUSH
28766: LD_INT 31
28768: PUSH
28769: LD_INT 32
28771: PUSH
28772: LD_INT 33
28774: PUSH
28775: LD_INT 34
28777: PUSH
28778: LD_INT 35
28780: PUSH
28781: LD_INT 36
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 101
28824: PUSH
28825: LD_INT 102
28827: PUSH
28828: LD_INT 103
28830: PUSH
28831: LD_INT 104
28833: PUSH
28834: LD_INT 105
28836: PUSH
28837: LD_INT 106
28839: PUSH
28840: LD_INT 107
28842: PUSH
28843: LD_INT 108
28845: PUSH
28846: LD_INT 109
28848: PUSH
28849: LD_INT 110
28851: PUSH
28852: LD_INT 111
28854: PUSH
28855: LD_INT 112
28857: PUSH
28858: LD_INT 113
28860: PUSH
28861: LD_INT 114
28863: PUSH
28864: LD_INT 115
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: ST_TO_ADDR
// if result then
28888: LD_VAR 0 1
28892: IFFALSE 29181
// begin normal :=  ;
28894: LD_ADDR_VAR 0 3
28898: PUSH
28899: LD_STRING 
28901: ST_TO_ADDR
// hardcore :=  ;
28902: LD_ADDR_VAR 0 4
28906: PUSH
28907: LD_STRING 
28909: ST_TO_ADDR
// for i = 1 to normalCounter do
28910: LD_ADDR_VAR 0 5
28914: PUSH
28915: DOUBLE
28916: LD_INT 1
28918: DEC
28919: ST_TO_ADDR
28920: LD_EXP 82
28924: PUSH
28925: FOR_TO
28926: IFFALSE 29027
// begin tmp := 0 ;
28928: LD_ADDR_VAR 0 2
28932: PUSH
28933: LD_STRING 0
28935: ST_TO_ADDR
// if result [ 1 ] then
28936: LD_VAR 0 1
28940: PUSH
28941: LD_INT 1
28943: ARRAY
28944: IFFALSE 29009
// if result [ 1 ] [ 1 ] = i then
28946: LD_VAR 0 1
28950: PUSH
28951: LD_INT 1
28953: ARRAY
28954: PUSH
28955: LD_INT 1
28957: ARRAY
28958: PUSH
28959: LD_VAR 0 5
28963: EQUAL
28964: IFFALSE 29009
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
28966: LD_ADDR_VAR 0 1
28970: PUSH
28971: LD_VAR 0 1
28975: PPUSH
28976: LD_INT 1
28978: PPUSH
28979: LD_VAR 0 1
28983: PUSH
28984: LD_INT 1
28986: ARRAY
28987: PPUSH
28988: LD_INT 1
28990: PPUSH
28991: CALL_OW 3
28995: PPUSH
28996: CALL_OW 1
29000: ST_TO_ADDR
// tmp := 1 ;
29001: LD_ADDR_VAR 0 2
29005: PUSH
29006: LD_STRING 1
29008: ST_TO_ADDR
// end ; normal := normal & tmp ;
29009: LD_ADDR_VAR 0 3
29013: PUSH
29014: LD_VAR 0 3
29018: PUSH
29019: LD_VAR 0 2
29023: STR
29024: ST_TO_ADDR
// end ;
29025: GO 28925
29027: POP
29028: POP
// for i = 1 to hardcoreCounter do
29029: LD_ADDR_VAR 0 5
29033: PUSH
29034: DOUBLE
29035: LD_INT 1
29037: DEC
29038: ST_TO_ADDR
29039: LD_EXP 83
29043: PUSH
29044: FOR_TO
29045: IFFALSE 29150
// begin tmp := 0 ;
29047: LD_ADDR_VAR 0 2
29051: PUSH
29052: LD_STRING 0
29054: ST_TO_ADDR
// if result [ 2 ] then
29055: LD_VAR 0 1
29059: PUSH
29060: LD_INT 2
29062: ARRAY
29063: IFFALSE 29132
// if result [ 2 ] [ 1 ] = 100 + i then
29065: LD_VAR 0 1
29069: PUSH
29070: LD_INT 2
29072: ARRAY
29073: PUSH
29074: LD_INT 1
29076: ARRAY
29077: PUSH
29078: LD_INT 100
29080: PUSH
29081: LD_VAR 0 5
29085: PLUS
29086: EQUAL
29087: IFFALSE 29132
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
29089: LD_ADDR_VAR 0 1
29093: PUSH
29094: LD_VAR 0 1
29098: PPUSH
29099: LD_INT 2
29101: PPUSH
29102: LD_VAR 0 1
29106: PUSH
29107: LD_INT 2
29109: ARRAY
29110: PPUSH
29111: LD_INT 1
29113: PPUSH
29114: CALL_OW 3
29118: PPUSH
29119: CALL_OW 1
29123: ST_TO_ADDR
// tmp := 1 ;
29124: LD_ADDR_VAR 0 2
29128: PUSH
29129: LD_STRING 1
29131: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
29132: LD_ADDR_VAR 0 4
29136: PUSH
29137: LD_VAR 0 4
29141: PUSH
29142: LD_VAR 0 2
29146: STR
29147: ST_TO_ADDR
// end ;
29148: GO 29044
29150: POP
29151: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
29152: LD_STRING getStreamItemsFromMission("
29154: PUSH
29155: LD_VAR 0 3
29159: STR
29160: PUSH
29161: LD_STRING ","
29163: STR
29164: PUSH
29165: LD_VAR 0 4
29169: STR
29170: PUSH
29171: LD_STRING ")
29173: STR
29174: PPUSH
29175: CALL_OW 559
// end else
29179: GO 29188
// ToLua ( getStreamItemsFromMission("","") ) ;
29181: LD_STRING getStreamItemsFromMission("","")
29183: PPUSH
29184: CALL_OW 559
// end ;
29188: LD_VAR 0 1
29192: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
29193: LD_EXP 81
29197: PUSH
29198: LD_EXP 86
29202: AND
29203: IFFALSE 29327
29205: GO 29207
29207: DISABLE
29208: LD_INT 0
29210: PPUSH
29211: PPUSH
// begin enable ;
29212: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
29213: LD_ADDR_VAR 0 2
29217: PUSH
29218: LD_INT 22
29220: PUSH
29221: LD_OWVAR 2
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 2
29232: PUSH
29233: LD_INT 34
29235: PUSH
29236: LD_INT 7
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 34
29245: PUSH
29246: LD_INT 45
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 34
29255: PUSH
29256: LD_INT 28
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 34
29265: PUSH
29266: LD_INT 47
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PPUSH
29284: CALL_OW 69
29288: ST_TO_ADDR
// if not tmp then
29289: LD_VAR 0 2
29293: NOT
29294: IFFALSE 29298
// exit ;
29296: GO 29327
// for i in tmp do
29298: LD_ADDR_VAR 0 1
29302: PUSH
29303: LD_VAR 0 2
29307: PUSH
29308: FOR_IN
29309: IFFALSE 29325
// begin SetLives ( i , 0 ) ;
29311: LD_VAR 0 1
29315: PPUSH
29316: LD_INT 0
29318: PPUSH
29319: CALL_OW 234
// end ;
29323: GO 29308
29325: POP
29326: POP
// end ;
29327: PPOPN 2
29329: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
29330: LD_EXP 81
29334: PUSH
29335: LD_EXP 87
29339: AND
29340: IFFALSE 29424
29342: GO 29344
29344: DISABLE
29345: LD_INT 0
29347: PPUSH
29348: PPUSH
// begin enable ;
29349: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
29350: LD_ADDR_VAR 0 2
29354: PUSH
29355: LD_INT 22
29357: PUSH
29358: LD_OWVAR 2
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: LD_INT 32
29369: PUSH
29370: LD_INT 3
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PPUSH
29381: CALL_OW 69
29385: ST_TO_ADDR
// if not tmp then
29386: LD_VAR 0 2
29390: NOT
29391: IFFALSE 29395
// exit ;
29393: GO 29424
// for i in tmp do
29395: LD_ADDR_VAR 0 1
29399: PUSH
29400: LD_VAR 0 2
29404: PUSH
29405: FOR_IN
29406: IFFALSE 29422
// begin SetLives ( i , 0 ) ;
29408: LD_VAR 0 1
29412: PPUSH
29413: LD_INT 0
29415: PPUSH
29416: CALL_OW 234
// end ;
29420: GO 29405
29422: POP
29423: POP
// end ;
29424: PPOPN 2
29426: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
29427: LD_EXP 81
29431: PUSH
29432: LD_EXP 84
29436: AND
29437: IFFALSE 29530
29439: GO 29441
29441: DISABLE
29442: LD_INT 0
29444: PPUSH
// begin enable ;
29445: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
29446: LD_ADDR_VAR 0 1
29450: PUSH
29451: LD_INT 22
29453: PUSH
29454: LD_OWVAR 2
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 2
29465: PUSH
29466: LD_INT 25
29468: PUSH
29469: LD_INT 5
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 25
29478: PUSH
29479: LD_INT 9
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 25
29488: PUSH
29489: LD_INT 8
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PPUSH
29506: CALL_OW 69
29510: PUSH
29511: FOR_IN
29512: IFFALSE 29528
// begin SetClass ( i , 1 ) ;
29514: LD_VAR 0 1
29518: PPUSH
29519: LD_INT 1
29521: PPUSH
29522: CALL_OW 336
// end ;
29526: GO 29511
29528: POP
29529: POP
// end ;
29530: PPOPN 1
29532: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
29533: LD_EXP 81
29537: PUSH
29538: LD_EXP 85
29542: AND
29543: PUSH
29544: LD_OWVAR 65
29548: PUSH
29549: LD_INT 7
29551: LESS
29552: AND
29553: IFFALSE 29567
29555: GO 29557
29557: DISABLE
// begin enable ;
29558: ENABLE
// game_speed := 7 ;
29559: LD_ADDR_OWVAR 65
29563: PUSH
29564: LD_INT 7
29566: ST_TO_ADDR
// end ;
29567: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
29568: LD_EXP 81
29572: PUSH
29573: LD_EXP 88
29577: AND
29578: IFFALSE 29780
29580: GO 29582
29582: DISABLE
29583: LD_INT 0
29585: PPUSH
29586: PPUSH
29587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29588: LD_ADDR_VAR 0 3
29592: PUSH
29593: LD_INT 81
29595: PUSH
29596: LD_OWVAR 2
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: LD_INT 21
29607: PUSH
29608: LD_INT 1
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PPUSH
29619: CALL_OW 69
29623: ST_TO_ADDR
// if not tmp then
29624: LD_VAR 0 3
29628: NOT
29629: IFFALSE 29633
// exit ;
29631: GO 29780
// if tmp > 5 then
29633: LD_VAR 0 3
29637: PUSH
29638: LD_INT 5
29640: GREATER
29641: IFFALSE 29653
// k := 5 else
29643: LD_ADDR_VAR 0 2
29647: PUSH
29648: LD_INT 5
29650: ST_TO_ADDR
29651: GO 29663
// k := tmp ;
29653: LD_ADDR_VAR 0 2
29657: PUSH
29658: LD_VAR 0 3
29662: ST_TO_ADDR
// for i := 1 to k do
29663: LD_ADDR_VAR 0 1
29667: PUSH
29668: DOUBLE
29669: LD_INT 1
29671: DEC
29672: ST_TO_ADDR
29673: LD_VAR 0 2
29677: PUSH
29678: FOR_TO
29679: IFFALSE 29778
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
29681: LD_VAR 0 3
29685: PUSH
29686: LD_VAR 0 1
29690: ARRAY
29691: PPUSH
29692: LD_VAR 0 1
29696: PUSH
29697: LD_INT 4
29699: MOD
29700: PUSH
29701: LD_INT 1
29703: PLUS
29704: PPUSH
29705: CALL_OW 259
29709: PUSH
29710: LD_INT 10
29712: LESS
29713: IFFALSE 29776
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
29715: LD_VAR 0 3
29719: PUSH
29720: LD_VAR 0 1
29724: ARRAY
29725: PPUSH
29726: LD_VAR 0 1
29730: PUSH
29731: LD_INT 4
29733: MOD
29734: PUSH
29735: LD_INT 1
29737: PLUS
29738: PPUSH
29739: LD_VAR 0 3
29743: PUSH
29744: LD_VAR 0 1
29748: ARRAY
29749: PPUSH
29750: LD_VAR 0 1
29754: PUSH
29755: LD_INT 4
29757: MOD
29758: PUSH
29759: LD_INT 1
29761: PLUS
29762: PPUSH
29763: CALL_OW 259
29767: PUSH
29768: LD_INT 1
29770: PLUS
29771: PPUSH
29772: CALL_OW 237
29776: GO 29678
29778: POP
29779: POP
// end ;
29780: PPOPN 3
29782: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
29783: LD_EXP 81
29787: PUSH
29788: LD_EXP 89
29792: AND
29793: IFFALSE 29813
29795: GO 29797
29797: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
29798: LD_INT 4
29800: PPUSH
29801: LD_OWVAR 2
29805: PPUSH
29806: LD_INT 0
29808: PPUSH
29809: CALL_OW 324
29813: END
// every 0 0$1 trigger StreamModeActive and sShovel do
29814: LD_EXP 81
29818: PUSH
29819: LD_EXP 118
29823: AND
29824: IFFALSE 29844
29826: GO 29828
29828: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
29829: LD_INT 19
29831: PPUSH
29832: LD_OWVAR 2
29836: PPUSH
29837: LD_INT 0
29839: PPUSH
29840: CALL_OW 324
29844: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
29845: LD_EXP 81
29849: PUSH
29850: LD_EXP 90
29854: AND
29855: IFFALSE 29957
29857: GO 29859
29859: DISABLE
29860: LD_INT 0
29862: PPUSH
29863: PPUSH
// begin enable ;
29864: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
29865: LD_ADDR_VAR 0 2
29869: PUSH
29870: LD_INT 22
29872: PUSH
29873: LD_OWVAR 2
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 2
29884: PUSH
29885: LD_INT 34
29887: PUSH
29888: LD_INT 11
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 34
29897: PUSH
29898: LD_INT 30
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: LIST
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PPUSH
29914: CALL_OW 69
29918: ST_TO_ADDR
// if not tmp then
29919: LD_VAR 0 2
29923: NOT
29924: IFFALSE 29928
// exit ;
29926: GO 29957
// for i in tmp do
29928: LD_ADDR_VAR 0 1
29932: PUSH
29933: LD_VAR 0 2
29937: PUSH
29938: FOR_IN
29939: IFFALSE 29955
// begin SetLives ( i , 0 ) ;
29941: LD_VAR 0 1
29945: PPUSH
29946: LD_INT 0
29948: PPUSH
29949: CALL_OW 234
// end ;
29953: GO 29938
29955: POP
29956: POP
// end ;
29957: PPOPN 2
29959: END
// every 0 0$1 trigger StreamModeActive and sBunker do
29960: LD_EXP 81
29964: PUSH
29965: LD_EXP 91
29969: AND
29970: IFFALSE 29990
29972: GO 29974
29974: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
29975: LD_INT 32
29977: PPUSH
29978: LD_OWVAR 2
29982: PPUSH
29983: LD_INT 0
29985: PPUSH
29986: CALL_OW 324
29990: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
29991: LD_EXP 81
29995: PUSH
29996: LD_EXP 92
30000: AND
30001: IFFALSE 30182
30003: GO 30005
30005: DISABLE
30006: LD_INT 0
30008: PPUSH
30009: PPUSH
30010: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
30011: LD_ADDR_VAR 0 2
30015: PUSH
30016: LD_INT 22
30018: PUSH
30019: LD_OWVAR 2
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 33
30030: PUSH
30031: LD_INT 3
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PPUSH
30042: CALL_OW 69
30046: ST_TO_ADDR
// if not tmp then
30047: LD_VAR 0 2
30051: NOT
30052: IFFALSE 30056
// exit ;
30054: GO 30182
// side := 0 ;
30056: LD_ADDR_VAR 0 3
30060: PUSH
30061: LD_INT 0
30063: ST_TO_ADDR
// for i := 1 to 8 do
30064: LD_ADDR_VAR 0 1
30068: PUSH
30069: DOUBLE
30070: LD_INT 1
30072: DEC
30073: ST_TO_ADDR
30074: LD_INT 8
30076: PUSH
30077: FOR_TO
30078: IFFALSE 30126
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
30080: LD_OWVAR 2
30084: PUSH
30085: LD_VAR 0 1
30089: NONEQUAL
30090: PUSH
30091: LD_OWVAR 2
30095: PPUSH
30096: LD_VAR 0 1
30100: PPUSH
30101: CALL_OW 81
30105: PUSH
30106: LD_INT 2
30108: EQUAL
30109: AND
30110: IFFALSE 30124
// begin side := i ;
30112: LD_ADDR_VAR 0 3
30116: PUSH
30117: LD_VAR 0 1
30121: ST_TO_ADDR
// break ;
30122: GO 30126
// end ;
30124: GO 30077
30126: POP
30127: POP
// if not side then
30128: LD_VAR 0 3
30132: NOT
30133: IFFALSE 30137
// exit ;
30135: GO 30182
// for i := 1 to tmp do
30137: LD_ADDR_VAR 0 1
30141: PUSH
30142: DOUBLE
30143: LD_INT 1
30145: DEC
30146: ST_TO_ADDR
30147: LD_VAR 0 2
30151: PUSH
30152: FOR_TO
30153: IFFALSE 30180
// if Prob ( 60 ) then
30155: LD_INT 60
30157: PPUSH
30158: CALL_OW 13
30162: IFFALSE 30178
// SetSide ( i , side ) ;
30164: LD_VAR 0 1
30168: PPUSH
30169: LD_VAR 0 3
30173: PPUSH
30174: CALL_OW 235
30178: GO 30152
30180: POP
30181: POP
// end ;
30182: PPOPN 3
30184: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
30185: LD_EXP 81
30189: PUSH
30190: LD_EXP 94
30194: AND
30195: IFFALSE 30314
30197: GO 30199
30199: DISABLE
30200: LD_INT 0
30202: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
30203: LD_ADDR_VAR 0 1
30207: PUSH
30208: LD_INT 22
30210: PUSH
30211: LD_OWVAR 2
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 21
30222: PUSH
30223: LD_INT 1
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 3
30232: PUSH
30233: LD_INT 23
30235: PUSH
30236: LD_INT 0
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: LIST
30251: PPUSH
30252: CALL_OW 69
30256: PUSH
30257: FOR_IN
30258: IFFALSE 30312
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
30260: LD_VAR 0 1
30264: PPUSH
30265: CALL_OW 257
30269: PUSH
30270: LD_INT 1
30272: PUSH
30273: LD_INT 2
30275: PUSH
30276: LD_INT 3
30278: PUSH
30279: LD_INT 4
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: IN
30288: IFFALSE 30310
// SetClass ( un , rand ( 1 , 4 ) ) ;
30290: LD_VAR 0 1
30294: PPUSH
30295: LD_INT 1
30297: PPUSH
30298: LD_INT 4
30300: PPUSH
30301: CALL_OW 12
30305: PPUSH
30306: CALL_OW 336
30310: GO 30257
30312: POP
30313: POP
// end ;
30314: PPOPN 1
30316: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
30317: LD_EXP 81
30321: PUSH
30322: LD_EXP 93
30326: AND
30327: IFFALSE 30406
30329: GO 30331
30331: DISABLE
30332: LD_INT 0
30334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
30335: LD_ADDR_VAR 0 1
30339: PUSH
30340: LD_INT 22
30342: PUSH
30343: LD_OWVAR 2
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 21
30354: PUSH
30355: LD_INT 3
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PPUSH
30366: CALL_OW 69
30370: ST_TO_ADDR
// if not tmp then
30371: LD_VAR 0 1
30375: NOT
30376: IFFALSE 30380
// exit ;
30378: GO 30406
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
30380: LD_VAR 0 1
30384: PUSH
30385: LD_INT 1
30387: PPUSH
30388: LD_VAR 0 1
30392: PPUSH
30393: CALL_OW 12
30397: ARRAY
30398: PPUSH
30399: LD_INT 100
30401: PPUSH
30402: CALL_OW 234
// end ;
30406: PPOPN 1
30408: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
30409: LD_EXP 81
30413: PUSH
30414: LD_EXP 95
30418: AND
30419: IFFALSE 30517
30421: GO 30423
30423: DISABLE
30424: LD_INT 0
30426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30427: LD_ADDR_VAR 0 1
30431: PUSH
30432: LD_INT 22
30434: PUSH
30435: LD_OWVAR 2
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 21
30446: PUSH
30447: LD_INT 1
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PPUSH
30458: CALL_OW 69
30462: ST_TO_ADDR
// if not tmp then
30463: LD_VAR 0 1
30467: NOT
30468: IFFALSE 30472
// exit ;
30470: GO 30517
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
30472: LD_VAR 0 1
30476: PUSH
30477: LD_INT 1
30479: PPUSH
30480: LD_VAR 0 1
30484: PPUSH
30485: CALL_OW 12
30489: ARRAY
30490: PPUSH
30491: LD_INT 1
30493: PPUSH
30494: LD_INT 4
30496: PPUSH
30497: CALL_OW 12
30501: PPUSH
30502: LD_INT 3000
30504: PPUSH
30505: LD_INT 9000
30507: PPUSH
30508: CALL_OW 12
30512: PPUSH
30513: CALL_OW 492
// end ;
30517: PPOPN 1
30519: END
// every 0 0$1 trigger StreamModeActive and sDepot do
30520: LD_EXP 81
30524: PUSH
30525: LD_EXP 96
30529: AND
30530: IFFALSE 30550
30532: GO 30534
30534: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
30535: LD_INT 1
30537: PPUSH
30538: LD_OWVAR 2
30542: PPUSH
30543: LD_INT 0
30545: PPUSH
30546: CALL_OW 324
30550: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
30551: LD_EXP 81
30555: PUSH
30556: LD_EXP 97
30560: AND
30561: IFFALSE 30644
30563: GO 30565
30565: DISABLE
30566: LD_INT 0
30568: PPUSH
30569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
30570: LD_ADDR_VAR 0 2
30574: PUSH
30575: LD_INT 22
30577: PUSH
30578: LD_OWVAR 2
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 21
30589: PUSH
30590: LD_INT 3
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PPUSH
30601: CALL_OW 69
30605: ST_TO_ADDR
// if not tmp then
30606: LD_VAR 0 2
30610: NOT
30611: IFFALSE 30615
// exit ;
30613: GO 30644
// for i in tmp do
30615: LD_ADDR_VAR 0 1
30619: PUSH
30620: LD_VAR 0 2
30624: PUSH
30625: FOR_IN
30626: IFFALSE 30642
// SetBLevel ( i , 10 ) ;
30628: LD_VAR 0 1
30632: PPUSH
30633: LD_INT 10
30635: PPUSH
30636: CALL_OW 241
30640: GO 30625
30642: POP
30643: POP
// end ;
30644: PPOPN 2
30646: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
30647: LD_EXP 81
30651: PUSH
30652: LD_EXP 98
30656: AND
30657: IFFALSE 30768
30659: GO 30661
30661: DISABLE
30662: LD_INT 0
30664: PPUSH
30665: PPUSH
30666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30667: LD_ADDR_VAR 0 3
30671: PUSH
30672: LD_INT 22
30674: PUSH
30675: LD_OWVAR 2
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 25
30686: PUSH
30687: LD_INT 1
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PPUSH
30698: CALL_OW 69
30702: ST_TO_ADDR
// if not tmp then
30703: LD_VAR 0 3
30707: NOT
30708: IFFALSE 30712
// exit ;
30710: GO 30768
// un := tmp [ rand ( 1 , tmp ) ] ;
30712: LD_ADDR_VAR 0 2
30716: PUSH
30717: LD_VAR 0 3
30721: PUSH
30722: LD_INT 1
30724: PPUSH
30725: LD_VAR 0 3
30729: PPUSH
30730: CALL_OW 12
30734: ARRAY
30735: ST_TO_ADDR
// if Crawls ( un ) then
30736: LD_VAR 0 2
30740: PPUSH
30741: CALL_OW 318
30745: IFFALSE 30756
// ComWalk ( un ) ;
30747: LD_VAR 0 2
30751: PPUSH
30752: CALL_OW 138
// SetClass ( un , class_sniper ) ;
30756: LD_VAR 0 2
30760: PPUSH
30761: LD_INT 5
30763: PPUSH
30764: CALL_OW 336
// end ;
30768: PPOPN 3
30770: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
30771: LD_EXP 81
30775: PUSH
30776: LD_EXP 99
30780: AND
30781: PUSH
30782: LD_OWVAR 67
30786: PUSH
30787: LD_INT 3
30789: LESS
30790: AND
30791: IFFALSE 30810
30793: GO 30795
30795: DISABLE
// Difficulty := Difficulty + 1 ;
30796: LD_ADDR_OWVAR 67
30800: PUSH
30801: LD_OWVAR 67
30805: PUSH
30806: LD_INT 1
30808: PLUS
30809: ST_TO_ADDR
30810: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
30811: LD_EXP 81
30815: PUSH
30816: LD_EXP 100
30820: AND
30821: IFFALSE 30924
30823: GO 30825
30825: DISABLE
30826: LD_INT 0
30828: PPUSH
// begin for i := 1 to 5 do
30829: LD_ADDR_VAR 0 1
30833: PUSH
30834: DOUBLE
30835: LD_INT 1
30837: DEC
30838: ST_TO_ADDR
30839: LD_INT 5
30841: PUSH
30842: FOR_TO
30843: IFFALSE 30922
// begin uc_nation := nation_nature ;
30845: LD_ADDR_OWVAR 21
30849: PUSH
30850: LD_INT 0
30852: ST_TO_ADDR
// uc_side := 0 ;
30853: LD_ADDR_OWVAR 20
30857: PUSH
30858: LD_INT 0
30860: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
30861: LD_ADDR_OWVAR 29
30865: PUSH
30866: LD_INT 12
30868: PUSH
30869: LD_INT 12
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: ST_TO_ADDR
// hc_agressivity := 20 ;
30876: LD_ADDR_OWVAR 35
30880: PUSH
30881: LD_INT 20
30883: ST_TO_ADDR
// hc_class := class_tiger ;
30884: LD_ADDR_OWVAR 28
30888: PUSH
30889: LD_INT 14
30891: ST_TO_ADDR
// hc_gallery :=  ;
30892: LD_ADDR_OWVAR 33
30896: PUSH
30897: LD_STRING 
30899: ST_TO_ADDR
// hc_name :=  ;
30900: LD_ADDR_OWVAR 26
30904: PUSH
30905: LD_STRING 
30907: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
30908: CALL_OW 44
30912: PPUSH
30913: LD_INT 0
30915: PPUSH
30916: CALL_OW 51
// end ;
30920: GO 30842
30922: POP
30923: POP
// end ;
30924: PPOPN 1
30926: END
// every 0 0$1 trigger StreamModeActive and sBomb do
30927: LD_EXP 81
30931: PUSH
30932: LD_EXP 101
30936: AND
30937: IFFALSE 30946
30939: GO 30941
30941: DISABLE
// StreamSibBomb ;
30942: CALL 30947 0 0
30946: END
// export function StreamSibBomb ; var i , x , y ; begin
30947: LD_INT 0
30949: PPUSH
30950: PPUSH
30951: PPUSH
30952: PPUSH
// result := false ;
30953: LD_ADDR_VAR 0 1
30957: PUSH
30958: LD_INT 0
30960: ST_TO_ADDR
// for i := 1 to 16 do
30961: LD_ADDR_VAR 0 2
30965: PUSH
30966: DOUBLE
30967: LD_INT 1
30969: DEC
30970: ST_TO_ADDR
30971: LD_INT 16
30973: PUSH
30974: FOR_TO
30975: IFFALSE 31174
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
30977: LD_ADDR_VAR 0 3
30981: PUSH
30982: LD_INT 10
30984: PUSH
30985: LD_INT 20
30987: PUSH
30988: LD_INT 30
30990: PUSH
30991: LD_INT 40
30993: PUSH
30994: LD_INT 50
30996: PUSH
30997: LD_INT 60
30999: PUSH
31000: LD_INT 70
31002: PUSH
31003: LD_INT 80
31005: PUSH
31006: LD_INT 90
31008: PUSH
31009: LD_INT 100
31011: PUSH
31012: LD_INT 110
31014: PUSH
31015: LD_INT 120
31017: PUSH
31018: LD_INT 130
31020: PUSH
31021: LD_INT 140
31023: PUSH
31024: LD_INT 150
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 1
31046: PPUSH
31047: LD_INT 15
31049: PPUSH
31050: CALL_OW 12
31054: ARRAY
31055: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31056: LD_ADDR_VAR 0 4
31060: PUSH
31061: LD_INT 10
31063: PUSH
31064: LD_INT 20
31066: PUSH
31067: LD_INT 30
31069: PUSH
31070: LD_INT 40
31072: PUSH
31073: LD_INT 50
31075: PUSH
31076: LD_INT 60
31078: PUSH
31079: LD_INT 70
31081: PUSH
31082: LD_INT 80
31084: PUSH
31085: LD_INT 90
31087: PUSH
31088: LD_INT 100
31090: PUSH
31091: LD_INT 110
31093: PUSH
31094: LD_INT 120
31096: PUSH
31097: LD_INT 130
31099: PUSH
31100: LD_INT 140
31102: PUSH
31103: LD_INT 150
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 1
31125: PPUSH
31126: LD_INT 15
31128: PPUSH
31129: CALL_OW 12
31133: ARRAY
31134: ST_TO_ADDR
// if ValidHex ( x , y ) then
31135: LD_VAR 0 3
31139: PPUSH
31140: LD_VAR 0 4
31144: PPUSH
31145: CALL_OW 488
31149: IFFALSE 31172
// begin result := [ x , y ] ;
31151: LD_ADDR_VAR 0 1
31155: PUSH
31156: LD_VAR 0 3
31160: PUSH
31161: LD_VAR 0 4
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: ST_TO_ADDR
// break ;
31170: GO 31174
// end ; end ;
31172: GO 30974
31174: POP
31175: POP
// if result then
31176: LD_VAR 0 1
31180: IFFALSE 31240
// begin ToLua ( playSibBomb() ) ;
31182: LD_STRING playSibBomb()
31184: PPUSH
31185: CALL_OW 559
// wait ( 0 0$14 ) ;
31189: LD_INT 490
31191: PPUSH
31192: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
31196: LD_VAR 0 1
31200: PUSH
31201: LD_INT 1
31203: ARRAY
31204: PPUSH
31205: LD_VAR 0 1
31209: PUSH
31210: LD_INT 2
31212: ARRAY
31213: PPUSH
31214: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
31218: LD_VAR 0 1
31222: PUSH
31223: LD_INT 1
31225: ARRAY
31226: PPUSH
31227: LD_VAR 0 1
31231: PUSH
31232: LD_INT 2
31234: ARRAY
31235: PPUSH
31236: CALL_OW 429
// end ; end ;
31240: LD_VAR 0 1
31244: RET
// every 0 0$1 trigger StreamModeActive and sReset do
31245: LD_EXP 81
31249: PUSH
31250: LD_EXP 103
31254: AND
31255: IFFALSE 31267
31257: GO 31259
31259: DISABLE
// YouLost (  ) ;
31260: LD_STRING 
31262: PPUSH
31263: CALL_OW 104
31267: END
// every 0 0$1 trigger StreamModeActive and sFog do
31268: LD_EXP 81
31272: PUSH
31273: LD_EXP 102
31277: AND
31278: IFFALSE 31292
31280: GO 31282
31282: DISABLE
// FogOff ( your_side ) ;
31283: LD_OWVAR 2
31287: PPUSH
31288: CALL_OW 344
31292: END
// every 0 0$1 trigger StreamModeActive and sSun do
31293: LD_EXP 81
31297: PUSH
31298: LD_EXP 104
31302: AND
31303: IFFALSE 31331
31305: GO 31307
31307: DISABLE
// begin solar_recharge_percent := 0 ;
31308: LD_ADDR_OWVAR 79
31312: PUSH
31313: LD_INT 0
31315: ST_TO_ADDR
// wait ( 5 5$00 ) ;
31316: LD_INT 10500
31318: PPUSH
31319: CALL_OW 67
// solar_recharge_percent := 100 ;
31323: LD_ADDR_OWVAR 79
31327: PUSH
31328: LD_INT 100
31330: ST_TO_ADDR
// end ;
31331: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
31332: LD_EXP 81
31336: PUSH
31337: LD_EXP 105
31341: AND
31342: IFFALSE 31581
31344: GO 31346
31346: DISABLE
31347: LD_INT 0
31349: PPUSH
31350: PPUSH
31351: PPUSH
// begin tmp := [ ] ;
31352: LD_ADDR_VAR 0 3
31356: PUSH
31357: EMPTY
31358: ST_TO_ADDR
// for i := 1 to 6 do
31359: LD_ADDR_VAR 0 1
31363: PUSH
31364: DOUBLE
31365: LD_INT 1
31367: DEC
31368: ST_TO_ADDR
31369: LD_INT 6
31371: PUSH
31372: FOR_TO
31373: IFFALSE 31478
// begin uc_nation := nation_nature ;
31375: LD_ADDR_OWVAR 21
31379: PUSH
31380: LD_INT 0
31382: ST_TO_ADDR
// uc_side := 0 ;
31383: LD_ADDR_OWVAR 20
31387: PUSH
31388: LD_INT 0
31390: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
31391: LD_ADDR_OWVAR 29
31395: PUSH
31396: LD_INT 12
31398: PUSH
31399: LD_INT 12
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: ST_TO_ADDR
// hc_agressivity := 20 ;
31406: LD_ADDR_OWVAR 35
31410: PUSH
31411: LD_INT 20
31413: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
31414: LD_ADDR_OWVAR 28
31418: PUSH
31419: LD_INT 17
31421: ST_TO_ADDR
// hc_gallery :=  ;
31422: LD_ADDR_OWVAR 33
31426: PUSH
31427: LD_STRING 
31429: ST_TO_ADDR
// hc_name :=  ;
31430: LD_ADDR_OWVAR 26
31434: PUSH
31435: LD_STRING 
31437: ST_TO_ADDR
// un := CreateHuman ;
31438: LD_ADDR_VAR 0 2
31442: PUSH
31443: CALL_OW 44
31447: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
31448: LD_VAR 0 2
31452: PPUSH
31453: LD_INT 1
31455: PPUSH
31456: CALL_OW 51
// tmp := tmp ^ un ;
31460: LD_ADDR_VAR 0 3
31464: PUSH
31465: LD_VAR 0 3
31469: PUSH
31470: LD_VAR 0 2
31474: ADD
31475: ST_TO_ADDR
// end ;
31476: GO 31372
31478: POP
31479: POP
// repeat wait ( 0 0$1 ) ;
31480: LD_INT 35
31482: PPUSH
31483: CALL_OW 67
// for un in tmp do
31487: LD_ADDR_VAR 0 2
31491: PUSH
31492: LD_VAR 0 3
31496: PUSH
31497: FOR_IN
31498: IFFALSE 31572
// begin if IsDead ( un ) then
31500: LD_VAR 0 2
31504: PPUSH
31505: CALL_OW 301
31509: IFFALSE 31529
// begin tmp := tmp diff un ;
31511: LD_ADDR_VAR 0 3
31515: PUSH
31516: LD_VAR 0 3
31520: PUSH
31521: LD_VAR 0 2
31525: DIFF
31526: ST_TO_ADDR
// continue ;
31527: GO 31497
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
31529: LD_VAR 0 2
31533: PPUSH
31534: LD_INT 3
31536: PUSH
31537: LD_INT 22
31539: PUSH
31540: LD_INT 0
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PPUSH
31551: CALL_OW 69
31555: PPUSH
31556: LD_VAR 0 2
31560: PPUSH
31561: CALL_OW 74
31565: PPUSH
31566: CALL_OW 115
// end ;
31570: GO 31497
31572: POP
31573: POP
// until not tmp ;
31574: LD_VAR 0 3
31578: NOT
31579: IFFALSE 31480
// end ;
31581: PPOPN 3
31583: END
// every 0 0$1 trigger StreamModeActive and sTroll do
31584: LD_EXP 81
31588: PUSH
31589: LD_EXP 106
31593: AND
31594: IFFALSE 31648
31596: GO 31598
31598: DISABLE
// begin ToLua ( displayTroll(); ) ;
31599: LD_STRING displayTroll();
31601: PPUSH
31602: CALL_OW 559
// wait ( 3 3$00 ) ;
31606: LD_INT 6300
31608: PPUSH
31609: CALL_OW 67
// ToLua ( hideTroll(); ) ;
31613: LD_STRING hideTroll();
31615: PPUSH
31616: CALL_OW 559
// wait ( 1 1$00 ) ;
31620: LD_INT 2100
31622: PPUSH
31623: CALL_OW 67
// ToLua ( displayTroll(); ) ;
31627: LD_STRING displayTroll();
31629: PPUSH
31630: CALL_OW 559
// wait ( 1 1$00 ) ;
31634: LD_INT 2100
31636: PPUSH
31637: CALL_OW 67
// ToLua ( hideTroll(); ) ;
31641: LD_STRING hideTroll();
31643: PPUSH
31644: CALL_OW 559
// end ;
31648: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
31649: LD_EXP 81
31653: PUSH
31654: LD_EXP 107
31658: AND
31659: IFFALSE 31722
31661: GO 31663
31663: DISABLE
31664: LD_INT 0
31666: PPUSH
// begin p := 0 ;
31667: LD_ADDR_VAR 0 1
31671: PUSH
31672: LD_INT 0
31674: ST_TO_ADDR
// repeat game_speed := 1 ;
31675: LD_ADDR_OWVAR 65
31679: PUSH
31680: LD_INT 1
31682: ST_TO_ADDR
// wait ( 0 0$1 ) ;
31683: LD_INT 35
31685: PPUSH
31686: CALL_OW 67
// p := p + 1 ;
31690: LD_ADDR_VAR 0 1
31694: PUSH
31695: LD_VAR 0 1
31699: PUSH
31700: LD_INT 1
31702: PLUS
31703: ST_TO_ADDR
// until p >= 60 ;
31704: LD_VAR 0 1
31708: PUSH
31709: LD_INT 60
31711: GREATEREQUAL
31712: IFFALSE 31675
// game_speed := 4 ;
31714: LD_ADDR_OWVAR 65
31718: PUSH
31719: LD_INT 4
31721: ST_TO_ADDR
// end ;
31722: PPOPN 1
31724: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
31725: LD_EXP 81
31729: PUSH
31730: LD_EXP 108
31734: AND
31735: IFFALSE 31881
31737: GO 31739
31739: DISABLE
31740: LD_INT 0
31742: PPUSH
31743: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31744: LD_ADDR_VAR 0 1
31748: PUSH
31749: LD_INT 22
31751: PUSH
31752: LD_OWVAR 2
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 2
31763: PUSH
31764: LD_INT 30
31766: PUSH
31767: LD_INT 0
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 30
31776: PUSH
31777: LD_INT 1
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: LIST
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PPUSH
31793: CALL_OW 69
31797: ST_TO_ADDR
// if not depot then
31798: LD_VAR 0 1
31802: NOT
31803: IFFALSE 31807
// exit ;
31805: GO 31881
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
31807: LD_ADDR_VAR 0 2
31811: PUSH
31812: LD_VAR 0 1
31816: PUSH
31817: LD_INT 1
31819: PPUSH
31820: LD_VAR 0 1
31824: PPUSH
31825: CALL_OW 12
31829: ARRAY
31830: PPUSH
31831: CALL_OW 274
31835: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
31836: LD_VAR 0 2
31840: PPUSH
31841: LD_INT 1
31843: PPUSH
31844: LD_INT 0
31846: PPUSH
31847: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
31851: LD_VAR 0 2
31855: PPUSH
31856: LD_INT 2
31858: PPUSH
31859: LD_INT 0
31861: PPUSH
31862: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
31866: LD_VAR 0 2
31870: PPUSH
31871: LD_INT 3
31873: PPUSH
31874: LD_INT 0
31876: PPUSH
31877: CALL_OW 277
// end ;
31881: PPOPN 2
31883: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
31884: LD_EXP 81
31888: PUSH
31889: LD_EXP 109
31893: AND
31894: IFFALSE 31991
31896: GO 31898
31898: DISABLE
31899: LD_INT 0
31901: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31902: LD_ADDR_VAR 0 1
31906: PUSH
31907: LD_INT 22
31909: PUSH
31910: LD_OWVAR 2
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 21
31921: PUSH
31922: LD_INT 1
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 3
31931: PUSH
31932: LD_INT 23
31934: PUSH
31935: LD_INT 0
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: LIST
31950: PPUSH
31951: CALL_OW 69
31955: ST_TO_ADDR
// if not tmp then
31956: LD_VAR 0 1
31960: NOT
31961: IFFALSE 31965
// exit ;
31963: GO 31991
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
31965: LD_VAR 0 1
31969: PUSH
31970: LD_INT 1
31972: PPUSH
31973: LD_VAR 0 1
31977: PPUSH
31978: CALL_OW 12
31982: ARRAY
31983: PPUSH
31984: LD_INT 200
31986: PPUSH
31987: CALL_OW 234
// end ;
31991: PPOPN 1
31993: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
31994: LD_EXP 81
31998: PUSH
31999: LD_EXP 110
32003: AND
32004: IFFALSE 32083
32006: GO 32008
32008: DISABLE
32009: LD_INT 0
32011: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
32012: LD_ADDR_VAR 0 1
32016: PUSH
32017: LD_INT 22
32019: PUSH
32020: LD_OWVAR 2
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 21
32031: PUSH
32032: LD_INT 2
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PPUSH
32043: CALL_OW 69
32047: ST_TO_ADDR
// if not tmp then
32048: LD_VAR 0 1
32052: NOT
32053: IFFALSE 32057
// exit ;
32055: GO 32083
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
32057: LD_VAR 0 1
32061: PUSH
32062: LD_INT 1
32064: PPUSH
32065: LD_VAR 0 1
32069: PPUSH
32070: CALL_OW 12
32074: ARRAY
32075: PPUSH
32076: LD_INT 60
32078: PPUSH
32079: CALL_OW 234
// end ;
32083: PPOPN 1
32085: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
32086: LD_EXP 81
32090: PUSH
32091: LD_EXP 111
32095: AND
32096: IFFALSE 32195
32098: GO 32100
32100: DISABLE
32101: LD_INT 0
32103: PPUSH
32104: PPUSH
// begin enable ;
32105: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
32106: LD_ADDR_VAR 0 1
32110: PUSH
32111: LD_INT 22
32113: PUSH
32114: LD_OWVAR 2
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 61
32125: PUSH
32126: EMPTY
32127: LIST
32128: PUSH
32129: LD_INT 33
32131: PUSH
32132: LD_INT 2
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: LIST
32143: PPUSH
32144: CALL_OW 69
32148: ST_TO_ADDR
// if not tmp then
32149: LD_VAR 0 1
32153: NOT
32154: IFFALSE 32158
// exit ;
32156: GO 32195
// for i in tmp do
32158: LD_ADDR_VAR 0 2
32162: PUSH
32163: LD_VAR 0 1
32167: PUSH
32168: FOR_IN
32169: IFFALSE 32193
// if IsControledBy ( i ) then
32171: LD_VAR 0 2
32175: PPUSH
32176: CALL_OW 312
32180: IFFALSE 32191
// ComUnlink ( i ) ;
32182: LD_VAR 0 2
32186: PPUSH
32187: CALL_OW 136
32191: GO 32168
32193: POP
32194: POP
// end ;
32195: PPOPN 2
32197: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
32198: LD_EXP 81
32202: PUSH
32203: LD_EXP 112
32207: AND
32208: IFFALSE 32348
32210: GO 32212
32212: DISABLE
32213: LD_INT 0
32215: PPUSH
32216: PPUSH
// begin ToLua ( displayPowell(); ) ;
32217: LD_STRING displayPowell();
32219: PPUSH
32220: CALL_OW 559
// uc_side := 0 ;
32224: LD_ADDR_OWVAR 20
32228: PUSH
32229: LD_INT 0
32231: ST_TO_ADDR
// uc_nation := 2 ;
32232: LD_ADDR_OWVAR 21
32236: PUSH
32237: LD_INT 2
32239: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
32240: LD_ADDR_OWVAR 37
32244: PUSH
32245: LD_INT 14
32247: ST_TO_ADDR
// vc_engine := engine_siberite ;
32248: LD_ADDR_OWVAR 39
32252: PUSH
32253: LD_INT 3
32255: ST_TO_ADDR
// vc_control := control_apeman ;
32256: LD_ADDR_OWVAR 38
32260: PUSH
32261: LD_INT 5
32263: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
32264: LD_ADDR_OWVAR 40
32268: PUSH
32269: LD_INT 29
32271: ST_TO_ADDR
// un := CreateVehicle ;
32272: LD_ADDR_VAR 0 2
32276: PUSH
32277: CALL_OW 45
32281: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32282: LD_VAR 0 2
32286: PPUSH
32287: LD_INT 1
32289: PPUSH
32290: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
32294: LD_INT 35
32296: PPUSH
32297: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
32301: LD_VAR 0 2
32305: PPUSH
32306: LD_INT 22
32308: PUSH
32309: LD_OWVAR 2
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PPUSH
32318: CALL_OW 69
32322: PPUSH
32323: LD_VAR 0 2
32327: PPUSH
32328: CALL_OW 74
32332: PPUSH
32333: CALL_OW 115
// until IsDead ( un ) ;
32337: LD_VAR 0 2
32341: PPUSH
32342: CALL_OW 301
32346: IFFALSE 32294
// end ;
32348: PPOPN 2
32350: END
// every 0 0$1 trigger StreamModeActive and sStu do
32351: LD_EXP 81
32355: PUSH
32356: LD_EXP 120
32360: AND
32361: IFFALSE 32377
32363: GO 32365
32365: DISABLE
// begin ToLua ( displayStucuk(); ) ;
32366: LD_STRING displayStucuk();
32368: PPUSH
32369: CALL_OW 559
// ResetFog ;
32373: CALL_OW 335
// end ;
32377: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
32378: LD_EXP 81
32382: PUSH
32383: LD_EXP 113
32387: AND
32388: IFFALSE 32529
32390: GO 32392
32392: DISABLE
32393: LD_INT 0
32395: PPUSH
32396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
32397: LD_ADDR_VAR 0 2
32401: PUSH
32402: LD_INT 22
32404: PUSH
32405: LD_OWVAR 2
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 21
32416: PUSH
32417: LD_INT 1
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PPUSH
32428: CALL_OW 69
32432: ST_TO_ADDR
// if not tmp then
32433: LD_VAR 0 2
32437: NOT
32438: IFFALSE 32442
// exit ;
32440: GO 32529
// un := tmp [ rand ( 1 , tmp ) ] ;
32442: LD_ADDR_VAR 0 1
32446: PUSH
32447: LD_VAR 0 2
32451: PUSH
32452: LD_INT 1
32454: PPUSH
32455: LD_VAR 0 2
32459: PPUSH
32460: CALL_OW 12
32464: ARRAY
32465: ST_TO_ADDR
// SetSide ( un , 0 ) ;
32466: LD_VAR 0 1
32470: PPUSH
32471: LD_INT 0
32473: PPUSH
32474: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
32478: LD_VAR 0 1
32482: PPUSH
32483: LD_OWVAR 3
32487: PUSH
32488: LD_VAR 0 1
32492: DIFF
32493: PPUSH
32494: LD_VAR 0 1
32498: PPUSH
32499: CALL_OW 74
32503: PPUSH
32504: CALL_OW 115
// wait ( 0 0$20 ) ;
32508: LD_INT 700
32510: PPUSH
32511: CALL_OW 67
// SetSide ( un , your_side ) ;
32515: LD_VAR 0 1
32519: PPUSH
32520: LD_OWVAR 2
32524: PPUSH
32525: CALL_OW 235
// end ;
32529: PPOPN 2
32531: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
32532: LD_EXP 81
32536: PUSH
32537: LD_EXP 114
32541: AND
32542: IFFALSE 32648
32544: GO 32546
32546: DISABLE
32547: LD_INT 0
32549: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32550: LD_ADDR_VAR 0 1
32554: PUSH
32555: LD_INT 22
32557: PUSH
32558: LD_OWVAR 2
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 2
32569: PUSH
32570: LD_INT 30
32572: PUSH
32573: LD_INT 0
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 30
32582: PUSH
32583: LD_INT 1
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: LIST
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PPUSH
32599: CALL_OW 69
32603: ST_TO_ADDR
// if not depot then
32604: LD_VAR 0 1
32608: NOT
32609: IFFALSE 32613
// exit ;
32611: GO 32648
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
32613: LD_VAR 0 1
32617: PUSH
32618: LD_INT 1
32620: ARRAY
32621: PPUSH
32622: CALL_OW 250
32626: PPUSH
32627: LD_VAR 0 1
32631: PUSH
32632: LD_INT 1
32634: ARRAY
32635: PPUSH
32636: CALL_OW 251
32640: PPUSH
32641: LD_INT 70
32643: PPUSH
32644: CALL_OW 495
// end ;
32648: PPOPN 1
32650: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
32651: LD_EXP 81
32655: PUSH
32656: LD_EXP 115
32660: AND
32661: IFFALSE 32872
32663: GO 32665
32665: DISABLE
32666: LD_INT 0
32668: PPUSH
32669: PPUSH
32670: PPUSH
32671: PPUSH
32672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
32673: LD_ADDR_VAR 0 5
32677: PUSH
32678: LD_INT 22
32680: PUSH
32681: LD_OWVAR 2
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 21
32692: PUSH
32693: LD_INT 1
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PPUSH
32704: CALL_OW 69
32708: ST_TO_ADDR
// if not tmp then
32709: LD_VAR 0 5
32713: NOT
32714: IFFALSE 32718
// exit ;
32716: GO 32872
// for i in tmp do
32718: LD_ADDR_VAR 0 1
32722: PUSH
32723: LD_VAR 0 5
32727: PUSH
32728: FOR_IN
32729: IFFALSE 32870
// begin d := rand ( 0 , 5 ) ;
32731: LD_ADDR_VAR 0 4
32735: PUSH
32736: LD_INT 0
32738: PPUSH
32739: LD_INT 5
32741: PPUSH
32742: CALL_OW 12
32746: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
32747: LD_ADDR_VAR 0 2
32751: PUSH
32752: LD_VAR 0 1
32756: PPUSH
32757: CALL_OW 250
32761: PPUSH
32762: LD_VAR 0 4
32766: PPUSH
32767: LD_INT 3
32769: PPUSH
32770: LD_INT 12
32772: PPUSH
32773: CALL_OW 12
32777: PPUSH
32778: CALL_OW 272
32782: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
32783: LD_ADDR_VAR 0 3
32787: PUSH
32788: LD_VAR 0 1
32792: PPUSH
32793: CALL_OW 251
32797: PPUSH
32798: LD_VAR 0 4
32802: PPUSH
32803: LD_INT 3
32805: PPUSH
32806: LD_INT 12
32808: PPUSH
32809: CALL_OW 12
32813: PPUSH
32814: CALL_OW 273
32818: ST_TO_ADDR
// if ValidHex ( x , y ) then
32819: LD_VAR 0 2
32823: PPUSH
32824: LD_VAR 0 3
32828: PPUSH
32829: CALL_OW 488
32833: IFFALSE 32868
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
32835: LD_VAR 0 1
32839: PPUSH
32840: LD_VAR 0 2
32844: PPUSH
32845: LD_VAR 0 3
32849: PPUSH
32850: LD_INT 3
32852: PPUSH
32853: LD_INT 6
32855: PPUSH
32856: CALL_OW 12
32860: PPUSH
32861: LD_INT 1
32863: PPUSH
32864: CALL_OW 483
// end ;
32868: GO 32728
32870: POP
32871: POP
// end ;
32872: PPOPN 5
32874: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
32875: LD_EXP 81
32879: PUSH
32880: LD_EXP 116
32884: AND
32885: IFFALSE 32979
32887: GO 32889
32889: DISABLE
32890: LD_INT 0
32892: PPUSH
32893: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
32894: LD_ADDR_VAR 0 2
32898: PUSH
32899: LD_INT 22
32901: PUSH
32902: LD_OWVAR 2
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 32
32913: PUSH
32914: LD_INT 1
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 21
32923: PUSH
32924: LD_INT 2
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: LIST
32935: PPUSH
32936: CALL_OW 69
32940: ST_TO_ADDR
// if not tmp then
32941: LD_VAR 0 2
32945: NOT
32946: IFFALSE 32950
// exit ;
32948: GO 32979
// for i in tmp do
32950: LD_ADDR_VAR 0 1
32954: PUSH
32955: LD_VAR 0 2
32959: PUSH
32960: FOR_IN
32961: IFFALSE 32977
// SetFuel ( i , 0 ) ;
32963: LD_VAR 0 1
32967: PPUSH
32968: LD_INT 0
32970: PPUSH
32971: CALL_OW 240
32975: GO 32960
32977: POP
32978: POP
// end ;
32979: PPOPN 2
32981: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
32982: LD_EXP 81
32986: PUSH
32987: LD_EXP 117
32991: AND
32992: IFFALSE 33058
32994: GO 32996
32996: DISABLE
32997: LD_INT 0
32999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33000: LD_ADDR_VAR 0 1
33004: PUSH
33005: LD_INT 22
33007: PUSH
33008: LD_OWVAR 2
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 30
33019: PUSH
33020: LD_INT 29
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PPUSH
33031: CALL_OW 69
33035: ST_TO_ADDR
// if not tmp then
33036: LD_VAR 0 1
33040: NOT
33041: IFFALSE 33045
// exit ;
33043: GO 33058
// DestroyUnit ( tmp [ 1 ] ) ;
33045: LD_VAR 0 1
33049: PUSH
33050: LD_INT 1
33052: ARRAY
33053: PPUSH
33054: CALL_OW 65
// end ;
33058: PPOPN 1
33060: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
33061: LD_EXP 81
33065: PUSH
33066: LD_EXP 119
33070: AND
33071: IFFALSE 33200
33073: GO 33075
33075: DISABLE
33076: LD_INT 0
33078: PPUSH
// begin uc_side := 0 ;
33079: LD_ADDR_OWVAR 20
33083: PUSH
33084: LD_INT 0
33086: ST_TO_ADDR
// uc_nation := nation_arabian ;
33087: LD_ADDR_OWVAR 21
33091: PUSH
33092: LD_INT 2
33094: ST_TO_ADDR
// hc_gallery :=  ;
33095: LD_ADDR_OWVAR 33
33099: PUSH
33100: LD_STRING 
33102: ST_TO_ADDR
// hc_name :=  ;
33103: LD_ADDR_OWVAR 26
33107: PUSH
33108: LD_STRING 
33110: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
33111: LD_INT 1
33113: PPUSH
33114: LD_INT 11
33116: PPUSH
33117: LD_INT 10
33119: PPUSH
33120: CALL_OW 380
// un := CreateHuman ;
33124: LD_ADDR_VAR 0 1
33128: PUSH
33129: CALL_OW 44
33133: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33134: LD_VAR 0 1
33138: PPUSH
33139: LD_INT 1
33141: PPUSH
33142: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
33146: LD_INT 35
33148: PPUSH
33149: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
33153: LD_VAR 0 1
33157: PPUSH
33158: LD_INT 22
33160: PUSH
33161: LD_OWVAR 2
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PPUSH
33170: CALL_OW 69
33174: PPUSH
33175: LD_VAR 0 1
33179: PPUSH
33180: CALL_OW 74
33184: PPUSH
33185: CALL_OW 115
// until IsDead ( un ) ;
33189: LD_VAR 0 1
33193: PPUSH
33194: CALL_OW 301
33198: IFFALSE 33146
// end ;
33200: PPOPN 1
33202: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
33203: LD_EXP 81
33207: PUSH
33208: LD_EXP 121
33212: AND
33213: IFFALSE 33225
33215: GO 33217
33217: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
33218: LD_STRING earthquake(getX(game), 0, 32)
33220: PPUSH
33221: CALL_OW 559
33225: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
33226: LD_EXP 81
33230: PUSH
33231: LD_EXP 122
33235: AND
33236: IFFALSE 33327
33238: GO 33240
33240: DISABLE
33241: LD_INT 0
33243: PPUSH
// begin enable ;
33244: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
33245: LD_ADDR_VAR 0 1
33249: PUSH
33250: LD_INT 22
33252: PUSH
33253: LD_OWVAR 2
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 21
33264: PUSH
33265: LD_INT 2
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 33
33274: PUSH
33275: LD_INT 3
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: LIST
33286: PPUSH
33287: CALL_OW 69
33291: ST_TO_ADDR
// if not tmp then
33292: LD_VAR 0 1
33296: NOT
33297: IFFALSE 33301
// exit ;
33299: GO 33327
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
33301: LD_VAR 0 1
33305: PUSH
33306: LD_INT 1
33308: PPUSH
33309: LD_VAR 0 1
33313: PPUSH
33314: CALL_OW 12
33318: ARRAY
33319: PPUSH
33320: LD_INT 1
33322: PPUSH
33323: CALL_OW 234
// end ;
33327: PPOPN 1
33329: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
33330: LD_EXP 81
33334: PUSH
33335: LD_EXP 123
33339: AND
33340: IFFALSE 33481
33342: GO 33344
33344: DISABLE
33345: LD_INT 0
33347: PPUSH
33348: PPUSH
33349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33350: LD_ADDR_VAR 0 3
33354: PUSH
33355: LD_INT 22
33357: PUSH
33358: LD_OWVAR 2
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 25
33369: PUSH
33370: LD_INT 1
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PPUSH
33381: CALL_OW 69
33385: ST_TO_ADDR
// if not tmp then
33386: LD_VAR 0 3
33390: NOT
33391: IFFALSE 33395
// exit ;
33393: GO 33481
// un := tmp [ rand ( 1 , tmp ) ] ;
33395: LD_ADDR_VAR 0 2
33399: PUSH
33400: LD_VAR 0 3
33404: PUSH
33405: LD_INT 1
33407: PPUSH
33408: LD_VAR 0 3
33412: PPUSH
33413: CALL_OW 12
33417: ARRAY
33418: ST_TO_ADDR
// if Crawls ( un ) then
33419: LD_VAR 0 2
33423: PPUSH
33424: CALL_OW 318
33428: IFFALSE 33439
// ComWalk ( un ) ;
33430: LD_VAR 0 2
33434: PPUSH
33435: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
33439: LD_VAR 0 2
33443: PPUSH
33444: LD_INT 9
33446: PPUSH
33447: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
33451: LD_INT 28
33453: PPUSH
33454: LD_OWVAR 2
33458: PPUSH
33459: LD_INT 2
33461: PPUSH
33462: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
33466: LD_INT 29
33468: PPUSH
33469: LD_OWVAR 2
33473: PPUSH
33474: LD_INT 2
33476: PPUSH
33477: CALL_OW 322
// end ;
33481: PPOPN 3
33483: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
33484: LD_EXP 81
33488: PUSH
33489: LD_EXP 124
33493: AND
33494: IFFALSE 33605
33496: GO 33498
33498: DISABLE
33499: LD_INT 0
33501: PPUSH
33502: PPUSH
33503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33504: LD_ADDR_VAR 0 3
33508: PUSH
33509: LD_INT 22
33511: PUSH
33512: LD_OWVAR 2
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 25
33523: PUSH
33524: LD_INT 1
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PPUSH
33535: CALL_OW 69
33539: ST_TO_ADDR
// if not tmp then
33540: LD_VAR 0 3
33544: NOT
33545: IFFALSE 33549
// exit ;
33547: GO 33605
// un := tmp [ rand ( 1 , tmp ) ] ;
33549: LD_ADDR_VAR 0 2
33553: PUSH
33554: LD_VAR 0 3
33558: PUSH
33559: LD_INT 1
33561: PPUSH
33562: LD_VAR 0 3
33566: PPUSH
33567: CALL_OW 12
33571: ARRAY
33572: ST_TO_ADDR
// if Crawls ( un ) then
33573: LD_VAR 0 2
33577: PPUSH
33578: CALL_OW 318
33582: IFFALSE 33593
// ComWalk ( un ) ;
33584: LD_VAR 0 2
33588: PPUSH
33589: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33593: LD_VAR 0 2
33597: PPUSH
33598: LD_INT 8
33600: PPUSH
33601: CALL_OW 336
// end ;
33605: PPOPN 3
33607: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
33608: LD_EXP 81
33612: PUSH
33613: LD_EXP 125
33617: AND
33618: IFFALSE 33762
33620: GO 33622
33622: DISABLE
33623: LD_INT 0
33625: PPUSH
33626: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
33627: LD_ADDR_VAR 0 2
33631: PUSH
33632: LD_INT 22
33634: PUSH
33635: LD_OWVAR 2
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 21
33646: PUSH
33647: LD_INT 2
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 2
33656: PUSH
33657: LD_INT 34
33659: PUSH
33660: LD_INT 12
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 34
33669: PUSH
33670: LD_INT 51
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 34
33679: PUSH
33680: LD_INT 32
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: LIST
33697: PPUSH
33698: CALL_OW 69
33702: ST_TO_ADDR
// if not tmp then
33703: LD_VAR 0 2
33707: NOT
33708: IFFALSE 33712
// exit ;
33710: GO 33762
// for i in tmp do
33712: LD_ADDR_VAR 0 1
33716: PUSH
33717: LD_VAR 0 2
33721: PUSH
33722: FOR_IN
33723: IFFALSE 33760
// if GetCargo ( i , mat_artifact ) = 0 then
33725: LD_VAR 0 1
33729: PPUSH
33730: LD_INT 4
33732: PPUSH
33733: CALL_OW 289
33737: PUSH
33738: LD_INT 0
33740: EQUAL
33741: IFFALSE 33758
// SetCargo ( i , mat_siberit , 100 ) ;
33743: LD_VAR 0 1
33747: PPUSH
33748: LD_INT 3
33750: PPUSH
33751: LD_INT 100
33753: PPUSH
33754: CALL_OW 290
33758: GO 33722
33760: POP
33761: POP
// end ;
33762: PPOPN 2
33764: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
33765: LD_EXP 81
33769: PUSH
33770: LD_EXP 126
33774: AND
33775: IFFALSE 33958
33777: GO 33779
33779: DISABLE
33780: LD_INT 0
33782: PPUSH
33783: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33784: LD_ADDR_VAR 0 2
33788: PUSH
33789: LD_INT 22
33791: PUSH
33792: LD_OWVAR 2
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PPUSH
33801: CALL_OW 69
33805: ST_TO_ADDR
// if not tmp then
33806: LD_VAR 0 2
33810: NOT
33811: IFFALSE 33815
// exit ;
33813: GO 33958
// for i := 1 to 2 do
33815: LD_ADDR_VAR 0 1
33819: PUSH
33820: DOUBLE
33821: LD_INT 1
33823: DEC
33824: ST_TO_ADDR
33825: LD_INT 2
33827: PUSH
33828: FOR_TO
33829: IFFALSE 33956
// begin uc_side := your_side ;
33831: LD_ADDR_OWVAR 20
33835: PUSH
33836: LD_OWVAR 2
33840: ST_TO_ADDR
// uc_nation := nation_american ;
33841: LD_ADDR_OWVAR 21
33845: PUSH
33846: LD_INT 1
33848: ST_TO_ADDR
// vc_chassis := us_morphling ;
33849: LD_ADDR_OWVAR 37
33853: PUSH
33854: LD_INT 5
33856: ST_TO_ADDR
// vc_engine := engine_siberite ;
33857: LD_ADDR_OWVAR 39
33861: PUSH
33862: LD_INT 3
33864: ST_TO_ADDR
// vc_control := control_computer ;
33865: LD_ADDR_OWVAR 38
33869: PUSH
33870: LD_INT 3
33872: ST_TO_ADDR
// vc_weapon := us_double_laser ;
33873: LD_ADDR_OWVAR 40
33877: PUSH
33878: LD_INT 10
33880: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
33881: LD_VAR 0 2
33885: PUSH
33886: LD_INT 1
33888: ARRAY
33889: PPUSH
33890: CALL_OW 310
33894: NOT
33895: IFFALSE 33942
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
33897: CALL_OW 45
33901: PPUSH
33902: LD_VAR 0 2
33906: PUSH
33907: LD_INT 1
33909: ARRAY
33910: PPUSH
33911: CALL_OW 250
33915: PPUSH
33916: LD_VAR 0 2
33920: PUSH
33921: LD_INT 1
33923: ARRAY
33924: PPUSH
33925: CALL_OW 251
33929: PPUSH
33930: LD_INT 12
33932: PPUSH
33933: LD_INT 1
33935: PPUSH
33936: CALL_OW 50
33940: GO 33954
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
33942: CALL_OW 45
33946: PPUSH
33947: LD_INT 1
33949: PPUSH
33950: CALL_OW 51
// end ;
33954: GO 33828
33956: POP
33957: POP
// end ;
33958: PPOPN 2
33960: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
33961: LD_EXP 81
33965: PUSH
33966: LD_EXP 127
33970: AND
33971: IFFALSE 34193
33973: GO 33975
33975: DISABLE
33976: LD_INT 0
33978: PPUSH
33979: PPUSH
33980: PPUSH
33981: PPUSH
33982: PPUSH
33983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33984: LD_ADDR_VAR 0 6
33988: PUSH
33989: LD_INT 22
33991: PUSH
33992: LD_OWVAR 2
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 21
34003: PUSH
34004: LD_INT 1
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 3
34013: PUSH
34014: LD_INT 23
34016: PUSH
34017: LD_INT 0
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: LIST
34032: PPUSH
34033: CALL_OW 69
34037: ST_TO_ADDR
// if not tmp then
34038: LD_VAR 0 6
34042: NOT
34043: IFFALSE 34047
// exit ;
34045: GO 34193
// s1 := rand ( 1 , 4 ) ;
34047: LD_ADDR_VAR 0 2
34051: PUSH
34052: LD_INT 1
34054: PPUSH
34055: LD_INT 4
34057: PPUSH
34058: CALL_OW 12
34062: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
34063: LD_ADDR_VAR 0 4
34067: PUSH
34068: LD_VAR 0 6
34072: PUSH
34073: LD_INT 1
34075: ARRAY
34076: PPUSH
34077: LD_VAR 0 2
34081: PPUSH
34082: CALL_OW 259
34086: ST_TO_ADDR
// if s1 = 1 then
34087: LD_VAR 0 2
34091: PUSH
34092: LD_INT 1
34094: EQUAL
34095: IFFALSE 34115
// s2 := rand ( 2 , 4 ) else
34097: LD_ADDR_VAR 0 3
34101: PUSH
34102: LD_INT 2
34104: PPUSH
34105: LD_INT 4
34107: PPUSH
34108: CALL_OW 12
34112: ST_TO_ADDR
34113: GO 34123
// s2 := 1 ;
34115: LD_ADDR_VAR 0 3
34119: PUSH
34120: LD_INT 1
34122: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
34123: LD_ADDR_VAR 0 5
34127: PUSH
34128: LD_VAR 0 6
34132: PUSH
34133: LD_INT 1
34135: ARRAY
34136: PPUSH
34137: LD_VAR 0 3
34141: PPUSH
34142: CALL_OW 259
34146: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
34147: LD_VAR 0 6
34151: PUSH
34152: LD_INT 1
34154: ARRAY
34155: PPUSH
34156: LD_VAR 0 2
34160: PPUSH
34161: LD_VAR 0 5
34165: PPUSH
34166: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
34170: LD_VAR 0 6
34174: PUSH
34175: LD_INT 1
34177: ARRAY
34178: PPUSH
34179: LD_VAR 0 3
34183: PPUSH
34184: LD_VAR 0 4
34188: PPUSH
34189: CALL_OW 237
// end ;
34193: PPOPN 6
34195: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
34196: LD_EXP 81
34200: PUSH
34201: LD_EXP 128
34205: AND
34206: IFFALSE 34285
34208: GO 34210
34210: DISABLE
34211: LD_INT 0
34213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
34214: LD_ADDR_VAR 0 1
34218: PUSH
34219: LD_INT 22
34221: PUSH
34222: LD_OWVAR 2
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 30
34233: PUSH
34234: LD_INT 3
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PPUSH
34245: CALL_OW 69
34249: ST_TO_ADDR
// if not tmp then
34250: LD_VAR 0 1
34254: NOT
34255: IFFALSE 34259
// exit ;
34257: GO 34285
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
34259: LD_VAR 0 1
34263: PUSH
34264: LD_INT 1
34266: PPUSH
34267: LD_VAR 0 1
34271: PPUSH
34272: CALL_OW 12
34276: ARRAY
34277: PPUSH
34278: LD_INT 1
34280: PPUSH
34281: CALL_OW 234
// end ;
34285: PPOPN 1
34287: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
34288: LD_EXP 81
34292: PUSH
34293: LD_EXP 129
34297: AND
34298: IFFALSE 34410
34300: GO 34302
34302: DISABLE
34303: LD_INT 0
34305: PPUSH
34306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
34307: LD_ADDR_VAR 0 2
34311: PUSH
34312: LD_INT 22
34314: PUSH
34315: LD_OWVAR 2
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 2
34326: PUSH
34327: LD_INT 30
34329: PUSH
34330: LD_INT 27
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 30
34339: PUSH
34340: LD_INT 26
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 30
34349: PUSH
34350: LD_INT 28
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PPUSH
34367: CALL_OW 69
34371: ST_TO_ADDR
// if not tmp then
34372: LD_VAR 0 2
34376: NOT
34377: IFFALSE 34381
// exit ;
34379: GO 34410
// for i in tmp do
34381: LD_ADDR_VAR 0 1
34385: PUSH
34386: LD_VAR 0 2
34390: PUSH
34391: FOR_IN
34392: IFFALSE 34408
// SetLives ( i , 1 ) ;
34394: LD_VAR 0 1
34398: PPUSH
34399: LD_INT 1
34401: PPUSH
34402: CALL_OW 234
34406: GO 34391
34408: POP
34409: POP
// end ;
34410: PPOPN 2
34412: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
34413: LD_EXP 81
34417: PUSH
34418: LD_EXP 130
34422: AND
34423: IFFALSE 34697
34425: GO 34427
34427: DISABLE
34428: LD_INT 0
34430: PPUSH
34431: PPUSH
34432: PPUSH
// begin i := rand ( 1 , 7 ) ;
34433: LD_ADDR_VAR 0 1
34437: PUSH
34438: LD_INT 1
34440: PPUSH
34441: LD_INT 7
34443: PPUSH
34444: CALL_OW 12
34448: ST_TO_ADDR
// case i of 1 :
34449: LD_VAR 0 1
34453: PUSH
34454: LD_INT 1
34456: DOUBLE
34457: EQUAL
34458: IFTRUE 34462
34460: GO 34472
34462: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
34463: LD_STRING earthquake(getX(game), 0, 32)
34465: PPUSH
34466: CALL_OW 559
34470: GO 34697
34472: LD_INT 2
34474: DOUBLE
34475: EQUAL
34476: IFTRUE 34480
34478: GO 34494
34480: POP
// begin ToLua ( displayStucuk(); ) ;
34481: LD_STRING displayStucuk();
34483: PPUSH
34484: CALL_OW 559
// ResetFog ;
34488: CALL_OW 335
// end ; 3 :
34492: GO 34697
34494: LD_INT 3
34496: DOUBLE
34497: EQUAL
34498: IFTRUE 34502
34500: GO 34606
34502: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34503: LD_ADDR_VAR 0 2
34507: PUSH
34508: LD_INT 22
34510: PUSH
34511: LD_OWVAR 2
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 25
34522: PUSH
34523: LD_INT 1
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PPUSH
34534: CALL_OW 69
34538: ST_TO_ADDR
// if not tmp then
34539: LD_VAR 0 2
34543: NOT
34544: IFFALSE 34548
// exit ;
34546: GO 34697
// un := tmp [ rand ( 1 , tmp ) ] ;
34548: LD_ADDR_VAR 0 3
34552: PUSH
34553: LD_VAR 0 2
34557: PUSH
34558: LD_INT 1
34560: PPUSH
34561: LD_VAR 0 2
34565: PPUSH
34566: CALL_OW 12
34570: ARRAY
34571: ST_TO_ADDR
// if Crawls ( un ) then
34572: LD_VAR 0 3
34576: PPUSH
34577: CALL_OW 318
34581: IFFALSE 34592
// ComWalk ( un ) ;
34583: LD_VAR 0 3
34587: PPUSH
34588: CALL_OW 138
// SetClass ( un , class_mortar ) ;
34592: LD_VAR 0 3
34596: PPUSH
34597: LD_INT 8
34599: PPUSH
34600: CALL_OW 336
// end ; 4 :
34604: GO 34697
34606: LD_INT 4
34608: DOUBLE
34609: EQUAL
34610: IFTRUE 34614
34612: GO 34675
34614: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
34615: LD_ADDR_VAR 0 2
34619: PUSH
34620: LD_INT 22
34622: PUSH
34623: LD_OWVAR 2
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 30
34634: PUSH
34635: LD_INT 29
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PPUSH
34646: CALL_OW 69
34650: ST_TO_ADDR
// if not tmp then
34651: LD_VAR 0 2
34655: NOT
34656: IFFALSE 34660
// exit ;
34658: GO 34697
// DestroyUnit ( tmp [ 1 ] ) ;
34660: LD_VAR 0 2
34664: PUSH
34665: LD_INT 1
34667: ARRAY
34668: PPUSH
34669: CALL_OW 65
// end ; 5 .. 7 :
34673: GO 34697
34675: LD_INT 5
34677: DOUBLE
34678: GREATEREQUAL
34679: IFFALSE 34687
34681: LD_INT 7
34683: DOUBLE
34684: LESSEQUAL
34685: IFTRUE 34689
34687: GO 34696
34689: POP
// StreamSibBomb ; end ;
34690: CALL 30947 0 0
34694: GO 34697
34696: POP
// end ;
34697: PPOPN 3
34699: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
34700: LD_EXP 81
34704: PUSH
34705: LD_EXP 131
34709: AND
34710: IFFALSE 34866
34712: GO 34714
34714: DISABLE
34715: LD_INT 0
34717: PPUSH
34718: PPUSH
34719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
34720: LD_ADDR_VAR 0 2
34724: PUSH
34725: LD_INT 81
34727: PUSH
34728: LD_OWVAR 2
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 2
34739: PUSH
34740: LD_INT 21
34742: PUSH
34743: LD_INT 1
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 21
34752: PUSH
34753: LD_INT 2
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: LIST
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PPUSH
34769: CALL_OW 69
34773: ST_TO_ADDR
// if not tmp then
34774: LD_VAR 0 2
34778: NOT
34779: IFFALSE 34783
// exit ;
34781: GO 34866
// p := 0 ;
34783: LD_ADDR_VAR 0 3
34787: PUSH
34788: LD_INT 0
34790: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
34791: LD_INT 35
34793: PPUSH
34794: CALL_OW 67
// p := p + 1 ;
34798: LD_ADDR_VAR 0 3
34802: PUSH
34803: LD_VAR 0 3
34807: PUSH
34808: LD_INT 1
34810: PLUS
34811: ST_TO_ADDR
// for i in tmp do
34812: LD_ADDR_VAR 0 1
34816: PUSH
34817: LD_VAR 0 2
34821: PUSH
34822: FOR_IN
34823: IFFALSE 34854
// if GetLives ( i ) < 1000 then
34825: LD_VAR 0 1
34829: PPUSH
34830: CALL_OW 256
34834: PUSH
34835: LD_INT 1000
34837: LESS
34838: IFFALSE 34852
// SetLives ( i , 1000 ) ;
34840: LD_VAR 0 1
34844: PPUSH
34845: LD_INT 1000
34847: PPUSH
34848: CALL_OW 234
34852: GO 34822
34854: POP
34855: POP
// until p > 20 ;
34856: LD_VAR 0 3
34860: PUSH
34861: LD_INT 20
34863: GREATER
34864: IFFALSE 34791
// end ;
34866: PPOPN 3
34868: END
// every 0 0$1 trigger StreamModeActive and sTime do
34869: LD_EXP 81
34873: PUSH
34874: LD_EXP 132
34878: AND
34879: IFFALSE 34914
34881: GO 34883
34883: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
34884: LD_INT 28
34886: PPUSH
34887: LD_OWVAR 2
34891: PPUSH
34892: LD_INT 2
34894: PPUSH
34895: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
34899: LD_INT 30
34901: PPUSH
34902: LD_OWVAR 2
34906: PPUSH
34907: LD_INT 2
34909: PPUSH
34910: CALL_OW 322
// end ;
34914: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
34915: LD_EXP 81
34919: PUSH
34920: LD_EXP 133
34924: AND
34925: IFFALSE 35046
34927: GO 34929
34929: DISABLE
34930: LD_INT 0
34932: PPUSH
34933: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34934: LD_ADDR_VAR 0 2
34938: PUSH
34939: LD_INT 22
34941: PUSH
34942: LD_OWVAR 2
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 21
34953: PUSH
34954: LD_INT 1
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 3
34963: PUSH
34964: LD_INT 23
34966: PUSH
34967: LD_INT 0
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: LIST
34982: PPUSH
34983: CALL_OW 69
34987: ST_TO_ADDR
// if not tmp then
34988: LD_VAR 0 2
34992: NOT
34993: IFFALSE 34997
// exit ;
34995: GO 35046
// for i in tmp do
34997: LD_ADDR_VAR 0 1
35001: PUSH
35002: LD_VAR 0 2
35006: PUSH
35007: FOR_IN
35008: IFFALSE 35044
// begin if Crawls ( i ) then
35010: LD_VAR 0 1
35014: PPUSH
35015: CALL_OW 318
35019: IFFALSE 35030
// ComWalk ( i ) ;
35021: LD_VAR 0 1
35025: PPUSH
35026: CALL_OW 138
// SetClass ( i , 2 ) ;
35030: LD_VAR 0 1
35034: PPUSH
35035: LD_INT 2
35037: PPUSH
35038: CALL_OW 336
// end ;
35042: GO 35007
35044: POP
35045: POP
// end ;
35046: PPOPN 2
35048: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
35049: LD_EXP 81
35053: PUSH
35054: LD_EXP 134
35058: AND
35059: IFFALSE 35340
35061: GO 35063
35063: DISABLE
35064: LD_INT 0
35066: PPUSH
35067: PPUSH
35068: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
35069: LD_OWVAR 2
35073: PPUSH
35074: LD_INT 9
35076: PPUSH
35077: LD_INT 1
35079: PPUSH
35080: LD_INT 1
35082: PPUSH
35083: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
35087: LD_INT 9
35089: PPUSH
35090: LD_OWVAR 2
35094: PPUSH
35095: CALL_OW 343
// uc_side := 9 ;
35099: LD_ADDR_OWVAR 20
35103: PUSH
35104: LD_INT 9
35106: ST_TO_ADDR
// uc_nation := 2 ;
35107: LD_ADDR_OWVAR 21
35111: PUSH
35112: LD_INT 2
35114: ST_TO_ADDR
// hc_name := Dark Warrior ;
35115: LD_ADDR_OWVAR 26
35119: PUSH
35120: LD_STRING Dark Warrior
35122: ST_TO_ADDR
// hc_gallery :=  ;
35123: LD_ADDR_OWVAR 33
35127: PUSH
35128: LD_STRING 
35130: ST_TO_ADDR
// hc_noskilllimit := true ;
35131: LD_ADDR_OWVAR 76
35135: PUSH
35136: LD_INT 1
35138: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
35139: LD_ADDR_OWVAR 31
35143: PUSH
35144: LD_INT 30
35146: PUSH
35147: LD_INT 30
35149: PUSH
35150: LD_INT 30
35152: PUSH
35153: LD_INT 30
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: ST_TO_ADDR
// un := CreateHuman ;
35162: LD_ADDR_VAR 0 3
35166: PUSH
35167: CALL_OW 44
35171: ST_TO_ADDR
// hc_noskilllimit := false ;
35172: LD_ADDR_OWVAR 76
35176: PUSH
35177: LD_INT 0
35179: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
35180: LD_VAR 0 3
35184: PPUSH
35185: LD_INT 1
35187: PPUSH
35188: CALL_OW 51
// p := 0 ;
35192: LD_ADDR_VAR 0 2
35196: PUSH
35197: LD_INT 0
35199: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35200: LD_INT 35
35202: PPUSH
35203: CALL_OW 67
// p := p + 1 ;
35207: LD_ADDR_VAR 0 2
35211: PUSH
35212: LD_VAR 0 2
35216: PUSH
35217: LD_INT 1
35219: PLUS
35220: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
35221: LD_VAR 0 3
35225: PPUSH
35226: CALL_OW 256
35230: PUSH
35231: LD_INT 1000
35233: LESS
35234: IFFALSE 35248
// SetLives ( un , 1000 ) ;
35236: LD_VAR 0 3
35240: PPUSH
35241: LD_INT 1000
35243: PPUSH
35244: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
35248: LD_VAR 0 3
35252: PPUSH
35253: LD_INT 81
35255: PUSH
35256: LD_OWVAR 2
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 91
35267: PUSH
35268: LD_VAR 0 3
35272: PUSH
35273: LD_INT 30
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: LIST
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PPUSH
35285: CALL_OW 69
35289: PPUSH
35290: LD_VAR 0 3
35294: PPUSH
35295: CALL_OW 74
35299: PPUSH
35300: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
35304: LD_VAR 0 2
35308: PUSH
35309: LD_INT 60
35311: GREATER
35312: PUSH
35313: LD_VAR 0 3
35317: PPUSH
35318: CALL_OW 301
35322: OR
35323: IFFALSE 35200
// if un then
35325: LD_VAR 0 3
35329: IFFALSE 35340
// RemoveUnit ( un ) ;
35331: LD_VAR 0 3
35335: PPUSH
35336: CALL_OW 64
// end ;
35340: PPOPN 3
35342: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
35343: LD_INT 0
35345: PPUSH
// case cmd of 301 :
35346: LD_VAR 0 1
35350: PUSH
35351: LD_INT 301
35353: DOUBLE
35354: EQUAL
35355: IFTRUE 35359
35357: GO 35391
35359: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
35360: LD_VAR 0 6
35364: PPUSH
35365: LD_VAR 0 7
35369: PPUSH
35370: LD_VAR 0 8
35374: PPUSH
35375: LD_VAR 0 4
35379: PPUSH
35380: LD_VAR 0 5
35384: PPUSH
35385: CALL 36592 0 5
35389: GO 35512
35391: LD_INT 302
35393: DOUBLE
35394: EQUAL
35395: IFTRUE 35399
35397: GO 35436
35399: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
35400: LD_VAR 0 6
35404: PPUSH
35405: LD_VAR 0 7
35409: PPUSH
35410: LD_VAR 0 8
35414: PPUSH
35415: LD_VAR 0 9
35419: PPUSH
35420: LD_VAR 0 4
35424: PPUSH
35425: LD_VAR 0 5
35429: PPUSH
35430: CALL 36683 0 6
35434: GO 35512
35436: LD_INT 303
35438: DOUBLE
35439: EQUAL
35440: IFTRUE 35444
35442: GO 35481
35444: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
35445: LD_VAR 0 6
35449: PPUSH
35450: LD_VAR 0 7
35454: PPUSH
35455: LD_VAR 0 8
35459: PPUSH
35460: LD_VAR 0 9
35464: PPUSH
35465: LD_VAR 0 4
35469: PPUSH
35470: LD_VAR 0 5
35474: PPUSH
35475: CALL 35517 0 6
35479: GO 35512
35481: LD_INT 304
35483: DOUBLE
35484: EQUAL
35485: IFTRUE 35489
35487: GO 35511
35489: POP
// hHackTeleport ( unit , x , y ) ; end ;
35490: LD_VAR 0 2
35494: PPUSH
35495: LD_VAR 0 4
35499: PPUSH
35500: LD_VAR 0 5
35504: PPUSH
35505: CALL 37276 0 3
35509: GO 35512
35511: POP
// end ;
35512: LD_VAR 0 12
35516: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
35517: LD_INT 0
35519: PPUSH
35520: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
35521: LD_VAR 0 1
35525: PUSH
35526: LD_INT 1
35528: LESS
35529: PUSH
35530: LD_VAR 0 1
35534: PUSH
35535: LD_INT 3
35537: GREATER
35538: OR
35539: PUSH
35540: LD_VAR 0 5
35544: PPUSH
35545: LD_VAR 0 6
35549: PPUSH
35550: CALL_OW 428
35554: OR
35555: IFFALSE 35559
// exit ;
35557: GO 36279
// uc_side := your_side ;
35559: LD_ADDR_OWVAR 20
35563: PUSH
35564: LD_OWVAR 2
35568: ST_TO_ADDR
// uc_nation := nation ;
35569: LD_ADDR_OWVAR 21
35573: PUSH
35574: LD_VAR 0 1
35578: ST_TO_ADDR
// bc_level = 1 ;
35579: LD_ADDR_OWVAR 43
35583: PUSH
35584: LD_INT 1
35586: ST_TO_ADDR
// case btype of 1 :
35587: LD_VAR 0 2
35591: PUSH
35592: LD_INT 1
35594: DOUBLE
35595: EQUAL
35596: IFTRUE 35600
35598: GO 35611
35600: POP
// bc_type := b_depot ; 2 :
35601: LD_ADDR_OWVAR 42
35605: PUSH
35606: LD_INT 0
35608: ST_TO_ADDR
35609: GO 36223
35611: LD_INT 2
35613: DOUBLE
35614: EQUAL
35615: IFTRUE 35619
35617: GO 35630
35619: POP
// bc_type := b_warehouse ; 3 :
35620: LD_ADDR_OWVAR 42
35624: PUSH
35625: LD_INT 1
35627: ST_TO_ADDR
35628: GO 36223
35630: LD_INT 3
35632: DOUBLE
35633: EQUAL
35634: IFTRUE 35638
35636: GO 35649
35638: POP
// bc_type := b_lab ; 4 .. 9 :
35639: LD_ADDR_OWVAR 42
35643: PUSH
35644: LD_INT 6
35646: ST_TO_ADDR
35647: GO 36223
35649: LD_INT 4
35651: DOUBLE
35652: GREATEREQUAL
35653: IFFALSE 35661
35655: LD_INT 9
35657: DOUBLE
35658: LESSEQUAL
35659: IFTRUE 35663
35661: GO 35715
35663: POP
// begin bc_type := b_lab_half ;
35664: LD_ADDR_OWVAR 42
35668: PUSH
35669: LD_INT 7
35671: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
35672: LD_ADDR_OWVAR 44
35676: PUSH
35677: LD_INT 10
35679: PUSH
35680: LD_INT 11
35682: PUSH
35683: LD_INT 12
35685: PUSH
35686: LD_INT 15
35688: PUSH
35689: LD_INT 14
35691: PUSH
35692: LD_INT 13
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: PUSH
35703: LD_VAR 0 2
35707: PUSH
35708: LD_INT 3
35710: MINUS
35711: ARRAY
35712: ST_TO_ADDR
// end ; 10 .. 13 :
35713: GO 36223
35715: LD_INT 10
35717: DOUBLE
35718: GREATEREQUAL
35719: IFFALSE 35727
35721: LD_INT 13
35723: DOUBLE
35724: LESSEQUAL
35725: IFTRUE 35729
35727: GO 35806
35729: POP
// begin bc_type := b_lab_full ;
35730: LD_ADDR_OWVAR 42
35734: PUSH
35735: LD_INT 8
35737: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
35738: LD_ADDR_OWVAR 44
35742: PUSH
35743: LD_INT 10
35745: PUSH
35746: LD_INT 12
35748: PUSH
35749: LD_INT 14
35751: PUSH
35752: LD_INT 13
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: PUSH
35761: LD_VAR 0 2
35765: PUSH
35766: LD_INT 9
35768: MINUS
35769: ARRAY
35770: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
35771: LD_ADDR_OWVAR 45
35775: PUSH
35776: LD_INT 11
35778: PUSH
35779: LD_INT 15
35781: PUSH
35782: LD_INT 12
35784: PUSH
35785: LD_INT 15
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: PUSH
35794: LD_VAR 0 2
35798: PUSH
35799: LD_INT 9
35801: MINUS
35802: ARRAY
35803: ST_TO_ADDR
// end ; 14 :
35804: GO 36223
35806: LD_INT 14
35808: DOUBLE
35809: EQUAL
35810: IFTRUE 35814
35812: GO 35825
35814: POP
// bc_type := b_workshop ; 15 :
35815: LD_ADDR_OWVAR 42
35819: PUSH
35820: LD_INT 2
35822: ST_TO_ADDR
35823: GO 36223
35825: LD_INT 15
35827: DOUBLE
35828: EQUAL
35829: IFTRUE 35833
35831: GO 35844
35833: POP
// bc_type := b_factory ; 16 :
35834: LD_ADDR_OWVAR 42
35838: PUSH
35839: LD_INT 3
35841: ST_TO_ADDR
35842: GO 36223
35844: LD_INT 16
35846: DOUBLE
35847: EQUAL
35848: IFTRUE 35852
35850: GO 35863
35852: POP
// bc_type := b_ext_gun ; 17 :
35853: LD_ADDR_OWVAR 42
35857: PUSH
35858: LD_INT 17
35860: ST_TO_ADDR
35861: GO 36223
35863: LD_INT 17
35865: DOUBLE
35866: EQUAL
35867: IFTRUE 35871
35869: GO 35899
35871: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
35872: LD_ADDR_OWVAR 42
35876: PUSH
35877: LD_INT 19
35879: PUSH
35880: LD_INT 23
35882: PUSH
35883: LD_INT 19
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: LIST
35890: PUSH
35891: LD_VAR 0 1
35895: ARRAY
35896: ST_TO_ADDR
35897: GO 36223
35899: LD_INT 18
35901: DOUBLE
35902: EQUAL
35903: IFTRUE 35907
35905: GO 35918
35907: POP
// bc_type := b_ext_radar ; 19 :
35908: LD_ADDR_OWVAR 42
35912: PUSH
35913: LD_INT 20
35915: ST_TO_ADDR
35916: GO 36223
35918: LD_INT 19
35920: DOUBLE
35921: EQUAL
35922: IFTRUE 35926
35924: GO 35937
35926: POP
// bc_type := b_ext_radio ; 20 :
35927: LD_ADDR_OWVAR 42
35931: PUSH
35932: LD_INT 22
35934: ST_TO_ADDR
35935: GO 36223
35937: LD_INT 20
35939: DOUBLE
35940: EQUAL
35941: IFTRUE 35945
35943: GO 35956
35945: POP
// bc_type := b_ext_siberium ; 21 :
35946: LD_ADDR_OWVAR 42
35950: PUSH
35951: LD_INT 21
35953: ST_TO_ADDR
35954: GO 36223
35956: LD_INT 21
35958: DOUBLE
35959: EQUAL
35960: IFTRUE 35964
35962: GO 35975
35964: POP
// bc_type := b_ext_computer ; 22 :
35965: LD_ADDR_OWVAR 42
35969: PUSH
35970: LD_INT 24
35972: ST_TO_ADDR
35973: GO 36223
35975: LD_INT 22
35977: DOUBLE
35978: EQUAL
35979: IFTRUE 35983
35981: GO 35994
35983: POP
// bc_type := b_ext_track ; 23 :
35984: LD_ADDR_OWVAR 42
35988: PUSH
35989: LD_INT 16
35991: ST_TO_ADDR
35992: GO 36223
35994: LD_INT 23
35996: DOUBLE
35997: EQUAL
35998: IFTRUE 36002
36000: GO 36013
36002: POP
// bc_type := b_ext_laser ; 24 :
36003: LD_ADDR_OWVAR 42
36007: PUSH
36008: LD_INT 25
36010: ST_TO_ADDR
36011: GO 36223
36013: LD_INT 24
36015: DOUBLE
36016: EQUAL
36017: IFTRUE 36021
36019: GO 36032
36021: POP
// bc_type := b_control_tower ; 25 :
36022: LD_ADDR_OWVAR 42
36026: PUSH
36027: LD_INT 36
36029: ST_TO_ADDR
36030: GO 36223
36032: LD_INT 25
36034: DOUBLE
36035: EQUAL
36036: IFTRUE 36040
36038: GO 36051
36040: POP
// bc_type := b_breastwork ; 26 :
36041: LD_ADDR_OWVAR 42
36045: PUSH
36046: LD_INT 31
36048: ST_TO_ADDR
36049: GO 36223
36051: LD_INT 26
36053: DOUBLE
36054: EQUAL
36055: IFTRUE 36059
36057: GO 36070
36059: POP
// bc_type := b_bunker ; 27 :
36060: LD_ADDR_OWVAR 42
36064: PUSH
36065: LD_INT 32
36067: ST_TO_ADDR
36068: GO 36223
36070: LD_INT 27
36072: DOUBLE
36073: EQUAL
36074: IFTRUE 36078
36076: GO 36089
36078: POP
// bc_type := b_turret ; 28 :
36079: LD_ADDR_OWVAR 42
36083: PUSH
36084: LD_INT 33
36086: ST_TO_ADDR
36087: GO 36223
36089: LD_INT 28
36091: DOUBLE
36092: EQUAL
36093: IFTRUE 36097
36095: GO 36108
36097: POP
// bc_type := b_armoury ; 29 :
36098: LD_ADDR_OWVAR 42
36102: PUSH
36103: LD_INT 4
36105: ST_TO_ADDR
36106: GO 36223
36108: LD_INT 29
36110: DOUBLE
36111: EQUAL
36112: IFTRUE 36116
36114: GO 36127
36116: POP
// bc_type := b_barracks ; 30 :
36117: LD_ADDR_OWVAR 42
36121: PUSH
36122: LD_INT 5
36124: ST_TO_ADDR
36125: GO 36223
36127: LD_INT 30
36129: DOUBLE
36130: EQUAL
36131: IFTRUE 36135
36133: GO 36146
36135: POP
// bc_type := b_solar_power ; 31 :
36136: LD_ADDR_OWVAR 42
36140: PUSH
36141: LD_INT 27
36143: ST_TO_ADDR
36144: GO 36223
36146: LD_INT 31
36148: DOUBLE
36149: EQUAL
36150: IFTRUE 36154
36152: GO 36165
36154: POP
// bc_type := b_oil_power ; 32 :
36155: LD_ADDR_OWVAR 42
36159: PUSH
36160: LD_INT 26
36162: ST_TO_ADDR
36163: GO 36223
36165: LD_INT 32
36167: DOUBLE
36168: EQUAL
36169: IFTRUE 36173
36171: GO 36184
36173: POP
// bc_type := b_siberite_power ; 33 :
36174: LD_ADDR_OWVAR 42
36178: PUSH
36179: LD_INT 28
36181: ST_TO_ADDR
36182: GO 36223
36184: LD_INT 33
36186: DOUBLE
36187: EQUAL
36188: IFTRUE 36192
36190: GO 36203
36192: POP
// bc_type := b_oil_mine ; 34 :
36193: LD_ADDR_OWVAR 42
36197: PUSH
36198: LD_INT 29
36200: ST_TO_ADDR
36201: GO 36223
36203: LD_INT 34
36205: DOUBLE
36206: EQUAL
36207: IFTRUE 36211
36209: GO 36222
36211: POP
// bc_type := b_siberite_mine ; end ;
36212: LD_ADDR_OWVAR 42
36216: PUSH
36217: LD_INT 30
36219: ST_TO_ADDR
36220: GO 36223
36222: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
36223: LD_ADDR_VAR 0 8
36227: PUSH
36228: LD_VAR 0 5
36232: PPUSH
36233: LD_VAR 0 6
36237: PPUSH
36238: LD_VAR 0 3
36242: PPUSH
36243: CALL_OW 47
36247: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
36248: LD_OWVAR 42
36252: PUSH
36253: LD_INT 32
36255: PUSH
36256: LD_INT 33
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: IN
36263: IFFALSE 36279
// PlaceWeaponTurret ( b , weapon ) ;
36265: LD_VAR 0 8
36269: PPUSH
36270: LD_VAR 0 4
36274: PPUSH
36275: CALL_OW 431
// end ;
36279: LD_VAR 0 7
36283: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
36284: LD_INT 0
36286: PPUSH
36287: PPUSH
36288: PPUSH
36289: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36290: LD_ADDR_VAR 0 4
36294: PUSH
36295: LD_INT 22
36297: PUSH
36298: LD_OWVAR 2
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: LD_INT 2
36309: PUSH
36310: LD_INT 30
36312: PUSH
36313: LD_INT 0
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 30
36322: PUSH
36323: LD_INT 1
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: LIST
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PPUSH
36339: CALL_OW 69
36343: ST_TO_ADDR
// if not tmp then
36344: LD_VAR 0 4
36348: NOT
36349: IFFALSE 36353
// exit ;
36351: GO 36412
// for i in tmp do
36353: LD_ADDR_VAR 0 2
36357: PUSH
36358: LD_VAR 0 4
36362: PUSH
36363: FOR_IN
36364: IFFALSE 36410
// for j = 1 to 3 do
36366: LD_ADDR_VAR 0 3
36370: PUSH
36371: DOUBLE
36372: LD_INT 1
36374: DEC
36375: ST_TO_ADDR
36376: LD_INT 3
36378: PUSH
36379: FOR_TO
36380: IFFALSE 36406
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
36382: LD_VAR 0 2
36386: PPUSH
36387: CALL_OW 274
36391: PPUSH
36392: LD_VAR 0 3
36396: PPUSH
36397: LD_INT 99999
36399: PPUSH
36400: CALL_OW 277
36404: GO 36379
36406: POP
36407: POP
36408: GO 36363
36410: POP
36411: POP
// end ;
36412: LD_VAR 0 1
36416: RET
// export function hHackSetLevel10 ; var i , j ; begin
36417: LD_INT 0
36419: PPUSH
36420: PPUSH
36421: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
36422: LD_ADDR_VAR 0 2
36426: PUSH
36427: LD_INT 21
36429: PUSH
36430: LD_INT 1
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PPUSH
36437: CALL_OW 69
36441: PUSH
36442: FOR_IN
36443: IFFALSE 36495
// if IsSelected ( i ) then
36445: LD_VAR 0 2
36449: PPUSH
36450: CALL_OW 306
36454: IFFALSE 36493
// begin for j := 1 to 4 do
36456: LD_ADDR_VAR 0 3
36460: PUSH
36461: DOUBLE
36462: LD_INT 1
36464: DEC
36465: ST_TO_ADDR
36466: LD_INT 4
36468: PUSH
36469: FOR_TO
36470: IFFALSE 36491
// SetSkill ( i , j , 10 ) ;
36472: LD_VAR 0 2
36476: PPUSH
36477: LD_VAR 0 3
36481: PPUSH
36482: LD_INT 10
36484: PPUSH
36485: CALL_OW 237
36489: GO 36469
36491: POP
36492: POP
// end ;
36493: GO 36442
36495: POP
36496: POP
// end ;
36497: LD_VAR 0 1
36501: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
36502: LD_INT 0
36504: PPUSH
36505: PPUSH
36506: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
36507: LD_ADDR_VAR 0 2
36511: PUSH
36512: LD_INT 22
36514: PUSH
36515: LD_OWVAR 2
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_INT 21
36526: PUSH
36527: LD_INT 1
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PPUSH
36538: CALL_OW 69
36542: PUSH
36543: FOR_IN
36544: IFFALSE 36585
// begin for j := 1 to 4 do
36546: LD_ADDR_VAR 0 3
36550: PUSH
36551: DOUBLE
36552: LD_INT 1
36554: DEC
36555: ST_TO_ADDR
36556: LD_INT 4
36558: PUSH
36559: FOR_TO
36560: IFFALSE 36581
// SetSkill ( i , j , 10 ) ;
36562: LD_VAR 0 2
36566: PPUSH
36567: LD_VAR 0 3
36571: PPUSH
36572: LD_INT 10
36574: PPUSH
36575: CALL_OW 237
36579: GO 36559
36581: POP
36582: POP
// end ;
36583: GO 36543
36585: POP
36586: POP
// end ;
36587: LD_VAR 0 1
36591: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
36592: LD_INT 0
36594: PPUSH
// uc_side := your_side ;
36595: LD_ADDR_OWVAR 20
36599: PUSH
36600: LD_OWVAR 2
36604: ST_TO_ADDR
// uc_nation := nation ;
36605: LD_ADDR_OWVAR 21
36609: PUSH
36610: LD_VAR 0 1
36614: ST_TO_ADDR
// InitHc ;
36615: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
36619: LD_INT 0
36621: PPUSH
36622: LD_VAR 0 2
36626: PPUSH
36627: LD_VAR 0 3
36631: PPUSH
36632: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
36636: LD_VAR 0 4
36640: PPUSH
36641: LD_VAR 0 5
36645: PPUSH
36646: CALL_OW 428
36650: PUSH
36651: LD_INT 0
36653: EQUAL
36654: IFFALSE 36678
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
36656: CALL_OW 44
36660: PPUSH
36661: LD_VAR 0 4
36665: PPUSH
36666: LD_VAR 0 5
36670: PPUSH
36671: LD_INT 1
36673: PPUSH
36674: CALL_OW 48
// end ;
36678: LD_VAR 0 6
36682: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
36683: LD_INT 0
36685: PPUSH
36686: PPUSH
// uc_side := your_side ;
36687: LD_ADDR_OWVAR 20
36691: PUSH
36692: LD_OWVAR 2
36696: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
36697: LD_VAR 0 1
36701: PUSH
36702: LD_INT 1
36704: PUSH
36705: LD_INT 2
36707: PUSH
36708: LD_INT 3
36710: PUSH
36711: LD_INT 4
36713: PUSH
36714: LD_INT 5
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: IN
36724: IFFALSE 36736
// uc_nation := nation_american else
36726: LD_ADDR_OWVAR 21
36730: PUSH
36731: LD_INT 1
36733: ST_TO_ADDR
36734: GO 36779
// if chassis in [ 11 , 12 , 13 , 14 ] then
36736: LD_VAR 0 1
36740: PUSH
36741: LD_INT 11
36743: PUSH
36744: LD_INT 12
36746: PUSH
36747: LD_INT 13
36749: PUSH
36750: LD_INT 14
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: IN
36759: IFFALSE 36771
// uc_nation := nation_arabian else
36761: LD_ADDR_OWVAR 21
36765: PUSH
36766: LD_INT 2
36768: ST_TO_ADDR
36769: GO 36779
// uc_nation := nation_russian ;
36771: LD_ADDR_OWVAR 21
36775: PUSH
36776: LD_INT 3
36778: ST_TO_ADDR
// vc_chassis := chassis ;
36779: LD_ADDR_OWVAR 37
36783: PUSH
36784: LD_VAR 0 1
36788: ST_TO_ADDR
// vc_engine := engine ;
36789: LD_ADDR_OWVAR 39
36793: PUSH
36794: LD_VAR 0 2
36798: ST_TO_ADDR
// vc_control := control ;
36799: LD_ADDR_OWVAR 38
36803: PUSH
36804: LD_VAR 0 3
36808: ST_TO_ADDR
// vc_weapon := weapon ;
36809: LD_ADDR_OWVAR 40
36813: PUSH
36814: LD_VAR 0 4
36818: ST_TO_ADDR
// un := CreateVehicle ;
36819: LD_ADDR_VAR 0 8
36823: PUSH
36824: CALL_OW 45
36828: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
36829: LD_VAR 0 8
36833: PPUSH
36834: LD_INT 0
36836: PPUSH
36837: LD_INT 5
36839: PPUSH
36840: CALL_OW 12
36844: PPUSH
36845: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
36849: LD_VAR 0 8
36853: PPUSH
36854: LD_VAR 0 5
36858: PPUSH
36859: LD_VAR 0 6
36863: PPUSH
36864: LD_INT 1
36866: PPUSH
36867: CALL_OW 48
// end ;
36871: LD_VAR 0 7
36875: RET
// export hInvincible ; every 1 do
36876: GO 36878
36878: DISABLE
// hInvincible := [ ] ;
36879: LD_ADDR_EXP 135
36883: PUSH
36884: EMPTY
36885: ST_TO_ADDR
36886: END
// every 10 do var i ;
36887: GO 36889
36889: DISABLE
36890: LD_INT 0
36892: PPUSH
// begin enable ;
36893: ENABLE
// if not hInvincible then
36894: LD_EXP 135
36898: NOT
36899: IFFALSE 36903
// exit ;
36901: GO 36947
// for i in hInvincible do
36903: LD_ADDR_VAR 0 1
36907: PUSH
36908: LD_EXP 135
36912: PUSH
36913: FOR_IN
36914: IFFALSE 36945
// if GetLives ( i ) < 1000 then
36916: LD_VAR 0 1
36920: PPUSH
36921: CALL_OW 256
36925: PUSH
36926: LD_INT 1000
36928: LESS
36929: IFFALSE 36943
// SetLives ( i , 1000 ) ;
36931: LD_VAR 0 1
36935: PPUSH
36936: LD_INT 1000
36938: PPUSH
36939: CALL_OW 234
36943: GO 36913
36945: POP
36946: POP
// end ;
36947: PPOPN 1
36949: END
// export function hHackInvincible ; var i ; begin
36950: LD_INT 0
36952: PPUSH
36953: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
36954: LD_ADDR_VAR 0 2
36958: PUSH
36959: LD_INT 2
36961: PUSH
36962: LD_INT 21
36964: PUSH
36965: LD_INT 1
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 21
36974: PUSH
36975: LD_INT 2
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: LIST
36986: PPUSH
36987: CALL_OW 69
36991: PUSH
36992: FOR_IN
36993: IFFALSE 37054
// if IsSelected ( i ) then
36995: LD_VAR 0 2
36999: PPUSH
37000: CALL_OW 306
37004: IFFALSE 37052
// begin if i in hInvincible then
37006: LD_VAR 0 2
37010: PUSH
37011: LD_EXP 135
37015: IN
37016: IFFALSE 37036
// hInvincible := hInvincible diff i else
37018: LD_ADDR_EXP 135
37022: PUSH
37023: LD_EXP 135
37027: PUSH
37028: LD_VAR 0 2
37032: DIFF
37033: ST_TO_ADDR
37034: GO 37052
// hInvincible := hInvincible union i ;
37036: LD_ADDR_EXP 135
37040: PUSH
37041: LD_EXP 135
37045: PUSH
37046: LD_VAR 0 2
37050: UNION
37051: ST_TO_ADDR
// end ;
37052: GO 36992
37054: POP
37055: POP
// end ;
37056: LD_VAR 0 1
37060: RET
// export function hHackInvisible ; var i , j ; begin
37061: LD_INT 0
37063: PPUSH
37064: PPUSH
37065: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
37066: LD_ADDR_VAR 0 2
37070: PUSH
37071: LD_INT 21
37073: PUSH
37074: LD_INT 1
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PPUSH
37081: CALL_OW 69
37085: PUSH
37086: FOR_IN
37087: IFFALSE 37111
// if IsSelected ( i ) then
37089: LD_VAR 0 2
37093: PPUSH
37094: CALL_OW 306
37098: IFFALSE 37109
// ComForceInvisible ( i ) ;
37100: LD_VAR 0 2
37104: PPUSH
37105: CALL_OW 496
37109: GO 37086
37111: POP
37112: POP
// end ;
37113: LD_VAR 0 1
37117: RET
// export function hHackChangeYourSide ; begin
37118: LD_INT 0
37120: PPUSH
// if your_side = 8 then
37121: LD_OWVAR 2
37125: PUSH
37126: LD_INT 8
37128: EQUAL
37129: IFFALSE 37141
// your_side := 0 else
37131: LD_ADDR_OWVAR 2
37135: PUSH
37136: LD_INT 0
37138: ST_TO_ADDR
37139: GO 37155
// your_side := your_side + 1 ;
37141: LD_ADDR_OWVAR 2
37145: PUSH
37146: LD_OWVAR 2
37150: PUSH
37151: LD_INT 1
37153: PLUS
37154: ST_TO_ADDR
// end ;
37155: LD_VAR 0 1
37159: RET
// export function hHackChangeUnitSide ; var i , j ; begin
37160: LD_INT 0
37162: PPUSH
37163: PPUSH
37164: PPUSH
// for i in all_units do
37165: LD_ADDR_VAR 0 2
37169: PUSH
37170: LD_OWVAR 3
37174: PUSH
37175: FOR_IN
37176: IFFALSE 37254
// if IsSelected ( i ) then
37178: LD_VAR 0 2
37182: PPUSH
37183: CALL_OW 306
37187: IFFALSE 37252
// begin j := GetSide ( i ) ;
37189: LD_ADDR_VAR 0 3
37193: PUSH
37194: LD_VAR 0 2
37198: PPUSH
37199: CALL_OW 255
37203: ST_TO_ADDR
// if j = 8 then
37204: LD_VAR 0 3
37208: PUSH
37209: LD_INT 8
37211: EQUAL
37212: IFFALSE 37224
// j := 0 else
37214: LD_ADDR_VAR 0 3
37218: PUSH
37219: LD_INT 0
37221: ST_TO_ADDR
37222: GO 37238
// j := j + 1 ;
37224: LD_ADDR_VAR 0 3
37228: PUSH
37229: LD_VAR 0 3
37233: PUSH
37234: LD_INT 1
37236: PLUS
37237: ST_TO_ADDR
// SetSide ( i , j ) ;
37238: LD_VAR 0 2
37242: PPUSH
37243: LD_VAR 0 3
37247: PPUSH
37248: CALL_OW 235
// end ;
37252: GO 37175
37254: POP
37255: POP
// end ;
37256: LD_VAR 0 1
37260: RET
// export function hHackFog ; begin
37261: LD_INT 0
37263: PPUSH
// FogOff ( true ) ;
37264: LD_INT 1
37266: PPUSH
37267: CALL_OW 344
// end ;
37271: LD_VAR 0 1
37275: RET
// export function hHackTeleport ( unit , x , y ) ; begin
37276: LD_INT 0
37278: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
37279: LD_VAR 0 1
37283: PPUSH
37284: LD_VAR 0 2
37288: PPUSH
37289: LD_VAR 0 3
37293: PPUSH
37294: LD_INT 1
37296: PPUSH
37297: LD_INT 1
37299: PPUSH
37300: CALL_OW 483
// CenterOnXY ( x , y ) ;
37304: LD_VAR 0 2
37308: PPUSH
37309: LD_VAR 0 3
37313: PPUSH
37314: CALL_OW 84
// end ; end_of_file
37318: LD_VAR 0 4
37322: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
37323: LD_INT 0
37325: PPUSH
37326: PPUSH
37327: PPUSH
37328: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
37329: LD_VAR 0 1
37333: PPUSH
37334: CALL_OW 264
37338: PUSH
37339: LD_EXP 69
37343: EQUAL
37344: IFFALSE 37416
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37346: LD_INT 68
37348: PPUSH
37349: LD_VAR 0 1
37353: PPUSH
37354: CALL_OW 255
37358: PPUSH
37359: CALL_OW 321
37363: PUSH
37364: LD_INT 2
37366: EQUAL
37367: IFFALSE 37379
// eff := 70 else
37369: LD_ADDR_VAR 0 4
37373: PUSH
37374: LD_INT 70
37376: ST_TO_ADDR
37377: GO 37387
// eff := 30 ;
37379: LD_ADDR_VAR 0 4
37383: PUSH
37384: LD_INT 30
37386: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37387: LD_VAR 0 1
37391: PPUSH
37392: CALL_OW 250
37396: PPUSH
37397: LD_VAR 0 1
37401: PPUSH
37402: CALL_OW 251
37406: PPUSH
37407: LD_VAR 0 4
37411: PPUSH
37412: CALL_OW 495
// end ; end ;
37416: LD_VAR 0 2
37420: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
37421: LD_INT 0
37423: PPUSH
// end ;
37424: LD_VAR 0 4
37428: RET
// export function SOS_Command ( cmd ) ; begin
37429: LD_INT 0
37431: PPUSH
// end ;
37432: LD_VAR 0 2
37436: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
37437: LD_INT 0
37439: PPUSH
// if cmd = 121 then
37440: LD_VAR 0 1
37444: PUSH
37445: LD_INT 121
37447: EQUAL
37448: IFFALSE 37450
// end ;
37450: LD_VAR 0 6
37454: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37455: LD_INT 0
37457: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37458: LD_VAR 0 1
37462: PUSH
37463: LD_INT 250
37465: EQUAL
37466: PUSH
37467: LD_VAR 0 2
37471: PPUSH
37472: CALL_OW 264
37476: PUSH
37477: LD_EXP 72
37481: EQUAL
37482: AND
37483: IFFALSE 37504
// MinerPlaceMine ( unit , x , y ) ;
37485: LD_VAR 0 2
37489: PPUSH
37490: LD_VAR 0 4
37494: PPUSH
37495: LD_VAR 0 5
37499: PPUSH
37500: CALL 39853 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37504: LD_VAR 0 1
37508: PUSH
37509: LD_INT 251
37511: EQUAL
37512: PUSH
37513: LD_VAR 0 2
37517: PPUSH
37518: CALL_OW 264
37522: PUSH
37523: LD_EXP 72
37527: EQUAL
37528: AND
37529: IFFALSE 37550
// MinerDetonateMine ( unit , x , y ) ;
37531: LD_VAR 0 2
37535: PPUSH
37536: LD_VAR 0 4
37540: PPUSH
37541: LD_VAR 0 5
37545: PPUSH
37546: CALL 40130 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37550: LD_VAR 0 1
37554: PUSH
37555: LD_INT 252
37557: EQUAL
37558: PUSH
37559: LD_VAR 0 2
37563: PPUSH
37564: CALL_OW 264
37568: PUSH
37569: LD_EXP 72
37573: EQUAL
37574: AND
37575: IFFALSE 37596
// MinerCreateMinefield ( unit , x , y ) ;
37577: LD_VAR 0 2
37581: PPUSH
37582: LD_VAR 0 4
37586: PPUSH
37587: LD_VAR 0 5
37591: PPUSH
37592: CALL 40547 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37596: LD_VAR 0 1
37600: PUSH
37601: LD_INT 253
37603: EQUAL
37604: PUSH
37605: LD_VAR 0 2
37609: PPUSH
37610: CALL_OW 257
37614: PUSH
37615: LD_INT 5
37617: EQUAL
37618: AND
37619: IFFALSE 37640
// ComBinocular ( unit , x , y ) ;
37621: LD_VAR 0 2
37625: PPUSH
37626: LD_VAR 0 4
37630: PPUSH
37631: LD_VAR 0 5
37635: PPUSH
37636: CALL 40918 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37640: LD_VAR 0 1
37644: PUSH
37645: LD_INT 254
37647: EQUAL
37648: PUSH
37649: LD_VAR 0 2
37653: PPUSH
37654: CALL_OW 264
37658: PUSH
37659: LD_EXP 67
37663: EQUAL
37664: AND
37665: PUSH
37666: LD_VAR 0 3
37670: PPUSH
37671: CALL_OW 263
37675: PUSH
37676: LD_INT 3
37678: EQUAL
37679: AND
37680: IFFALSE 37696
// HackDestroyVehicle ( unit , selectedUnit ) ;
37682: LD_VAR 0 2
37686: PPUSH
37687: LD_VAR 0 3
37691: PPUSH
37692: CALL 39213 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37696: LD_VAR 0 1
37700: PUSH
37701: LD_INT 255
37703: EQUAL
37704: PUSH
37705: LD_VAR 0 2
37709: PPUSH
37710: CALL_OW 264
37714: PUSH
37715: LD_INT 14
37717: PUSH
37718: LD_INT 53
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: IN
37725: AND
37726: PUSH
37727: LD_VAR 0 4
37731: PPUSH
37732: LD_VAR 0 5
37736: PPUSH
37737: CALL_OW 488
37741: AND
37742: IFFALSE 37766
// CutTreeXYR ( unit , x , y , 12 ) ;
37744: LD_VAR 0 2
37748: PPUSH
37749: LD_VAR 0 4
37753: PPUSH
37754: LD_VAR 0 5
37758: PPUSH
37759: LD_INT 12
37761: PPUSH
37762: CALL 37779 0 4
// end ;
37766: LD_VAR 0 6
37770: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
37771: LD_INT 0
37773: PPUSH
// end ;
37774: LD_VAR 0 4
37778: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37779: LD_INT 0
37781: PPUSH
37782: PPUSH
37783: PPUSH
37784: PPUSH
37785: PPUSH
37786: PPUSH
37787: PPUSH
37788: PPUSH
37789: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
37790: LD_VAR 0 1
37794: NOT
37795: PUSH
37796: LD_VAR 0 2
37800: PPUSH
37801: LD_VAR 0 3
37805: PPUSH
37806: CALL_OW 488
37810: NOT
37811: OR
37812: PUSH
37813: LD_VAR 0 4
37817: NOT
37818: OR
37819: IFFALSE 37823
// exit ;
37821: GO 38163
// list := [ ] ;
37823: LD_ADDR_VAR 0 13
37827: PUSH
37828: EMPTY
37829: ST_TO_ADDR
// if x - r < 0 then
37830: LD_VAR 0 2
37834: PUSH
37835: LD_VAR 0 4
37839: MINUS
37840: PUSH
37841: LD_INT 0
37843: LESS
37844: IFFALSE 37856
// min_x := 0 else
37846: LD_ADDR_VAR 0 7
37850: PUSH
37851: LD_INT 0
37853: ST_TO_ADDR
37854: GO 37872
// min_x := x - r ;
37856: LD_ADDR_VAR 0 7
37860: PUSH
37861: LD_VAR 0 2
37865: PUSH
37866: LD_VAR 0 4
37870: MINUS
37871: ST_TO_ADDR
// if y - r < 0 then
37872: LD_VAR 0 3
37876: PUSH
37877: LD_VAR 0 4
37881: MINUS
37882: PUSH
37883: LD_INT 0
37885: LESS
37886: IFFALSE 37898
// min_y := 0 else
37888: LD_ADDR_VAR 0 8
37892: PUSH
37893: LD_INT 0
37895: ST_TO_ADDR
37896: GO 37914
// min_y := y - r ;
37898: LD_ADDR_VAR 0 8
37902: PUSH
37903: LD_VAR 0 3
37907: PUSH
37908: LD_VAR 0 4
37912: MINUS
37913: ST_TO_ADDR
// max_x := x + r ;
37914: LD_ADDR_VAR 0 9
37918: PUSH
37919: LD_VAR 0 2
37923: PUSH
37924: LD_VAR 0 4
37928: PLUS
37929: ST_TO_ADDR
// max_y := y + r ;
37930: LD_ADDR_VAR 0 10
37934: PUSH
37935: LD_VAR 0 3
37939: PUSH
37940: LD_VAR 0 4
37944: PLUS
37945: ST_TO_ADDR
// for _x = min_x to max_x do
37946: LD_ADDR_VAR 0 11
37950: PUSH
37951: DOUBLE
37952: LD_VAR 0 7
37956: DEC
37957: ST_TO_ADDR
37958: LD_VAR 0 9
37962: PUSH
37963: FOR_TO
37964: IFFALSE 38081
// for _y = min_y to max_y do
37966: LD_ADDR_VAR 0 12
37970: PUSH
37971: DOUBLE
37972: LD_VAR 0 8
37976: DEC
37977: ST_TO_ADDR
37978: LD_VAR 0 10
37982: PUSH
37983: FOR_TO
37984: IFFALSE 38077
// begin if not ValidHex ( _x , _y ) then
37986: LD_VAR 0 11
37990: PPUSH
37991: LD_VAR 0 12
37995: PPUSH
37996: CALL_OW 488
38000: NOT
38001: IFFALSE 38005
// continue ;
38003: GO 37983
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38005: LD_VAR 0 11
38009: PPUSH
38010: LD_VAR 0 12
38014: PPUSH
38015: CALL_OW 351
38019: PUSH
38020: LD_VAR 0 11
38024: PPUSH
38025: LD_VAR 0 12
38029: PPUSH
38030: CALL_OW 554
38034: AND
38035: IFFALSE 38075
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38037: LD_ADDR_VAR 0 13
38041: PUSH
38042: LD_VAR 0 13
38046: PPUSH
38047: LD_VAR 0 13
38051: PUSH
38052: LD_INT 1
38054: PLUS
38055: PPUSH
38056: LD_VAR 0 11
38060: PUSH
38061: LD_VAR 0 12
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PPUSH
38070: CALL_OW 2
38074: ST_TO_ADDR
// end ;
38075: GO 37983
38077: POP
38078: POP
38079: GO 37963
38081: POP
38082: POP
// if not list then
38083: LD_VAR 0 13
38087: NOT
38088: IFFALSE 38092
// exit ;
38090: GO 38163
// for i in list do
38092: LD_ADDR_VAR 0 6
38096: PUSH
38097: LD_VAR 0 13
38101: PUSH
38102: FOR_IN
38103: IFFALSE 38161
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
38105: LD_VAR 0 1
38109: PPUSH
38110: LD_STRING M
38112: PUSH
38113: LD_VAR 0 6
38117: PUSH
38118: LD_INT 1
38120: ARRAY
38121: PUSH
38122: LD_VAR 0 6
38126: PUSH
38127: LD_INT 2
38129: ARRAY
38130: PUSH
38131: LD_INT 0
38133: PUSH
38134: LD_INT 0
38136: PUSH
38137: LD_INT 0
38139: PUSH
38140: LD_INT 0
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: PUSH
38152: EMPTY
38153: LIST
38154: PPUSH
38155: CALL_OW 447
38159: GO 38102
38161: POP
38162: POP
// end ;
38163: LD_VAR 0 5
38167: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38168: LD_EXP 138
38172: NOT
38173: IFFALSE 38223
38175: GO 38177
38177: DISABLE
// begin initHack := true ;
38178: LD_ADDR_EXP 138
38182: PUSH
38183: LD_INT 1
38185: ST_TO_ADDR
// hackTanks := [ ] ;
38186: LD_ADDR_EXP 139
38190: PUSH
38191: EMPTY
38192: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38193: LD_ADDR_EXP 140
38197: PUSH
38198: EMPTY
38199: ST_TO_ADDR
// hackLimit := 3 ;
38200: LD_ADDR_EXP 141
38204: PUSH
38205: LD_INT 3
38207: ST_TO_ADDR
// hackDist := 12 ;
38208: LD_ADDR_EXP 142
38212: PUSH
38213: LD_INT 12
38215: ST_TO_ADDR
// hackCounter := [ ] ;
38216: LD_ADDR_EXP 143
38220: PUSH
38221: EMPTY
38222: ST_TO_ADDR
// end ;
38223: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38224: LD_EXP 138
38228: PUSH
38229: LD_INT 34
38231: PUSH
38232: LD_EXP 67
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PPUSH
38241: CALL_OW 69
38245: AND
38246: IFFALSE 38501
38248: GO 38250
38250: DISABLE
38251: LD_INT 0
38253: PPUSH
38254: PPUSH
// begin enable ;
38255: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38256: LD_ADDR_VAR 0 1
38260: PUSH
38261: LD_INT 34
38263: PUSH
38264: LD_EXP 67
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PPUSH
38273: CALL_OW 69
38277: PUSH
38278: FOR_IN
38279: IFFALSE 38499
// begin if not i in hackTanks then
38281: LD_VAR 0 1
38285: PUSH
38286: LD_EXP 139
38290: IN
38291: NOT
38292: IFFALSE 38375
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38294: LD_ADDR_EXP 139
38298: PUSH
38299: LD_EXP 139
38303: PPUSH
38304: LD_EXP 139
38308: PUSH
38309: LD_INT 1
38311: PLUS
38312: PPUSH
38313: LD_VAR 0 1
38317: PPUSH
38318: CALL_OW 1
38322: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38323: LD_ADDR_EXP 140
38327: PUSH
38328: LD_EXP 140
38332: PPUSH
38333: LD_EXP 140
38337: PUSH
38338: LD_INT 1
38340: PLUS
38341: PPUSH
38342: EMPTY
38343: PPUSH
38344: CALL_OW 1
38348: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38349: LD_ADDR_EXP 143
38353: PUSH
38354: LD_EXP 143
38358: PPUSH
38359: LD_EXP 143
38363: PUSH
38364: LD_INT 1
38366: PLUS
38367: PPUSH
38368: EMPTY
38369: PPUSH
38370: CALL_OW 1
38374: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38375: LD_VAR 0 1
38379: PPUSH
38380: CALL_OW 302
38384: NOT
38385: IFFALSE 38398
// begin HackUnlinkAll ( i ) ;
38387: LD_VAR 0 1
38391: PPUSH
38392: CALL 38504 0 1
// continue ;
38396: GO 38278
// end ; HackCheckCapturedStatus ( i ) ;
38398: LD_VAR 0 1
38402: PPUSH
38403: CALL 38947 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38407: LD_ADDR_VAR 0 2
38411: PUSH
38412: LD_INT 81
38414: PUSH
38415: LD_VAR 0 1
38419: PPUSH
38420: CALL_OW 255
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 33
38431: PUSH
38432: LD_INT 3
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 91
38441: PUSH
38442: LD_VAR 0 1
38446: PUSH
38447: LD_EXP 142
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 50
38459: PUSH
38460: EMPTY
38461: LIST
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: PPUSH
38469: CALL_OW 69
38473: ST_TO_ADDR
// if not tmp then
38474: LD_VAR 0 2
38478: NOT
38479: IFFALSE 38483
// continue ;
38481: GO 38278
// HackLink ( i , tmp ) ;
38483: LD_VAR 0 1
38487: PPUSH
38488: LD_VAR 0 2
38492: PPUSH
38493: CALL 38640 0 2
// end ;
38497: GO 38278
38499: POP
38500: POP
// end ;
38501: PPOPN 2
38503: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38504: LD_INT 0
38506: PPUSH
38507: PPUSH
38508: PPUSH
// if not hack in hackTanks then
38509: LD_VAR 0 1
38513: PUSH
38514: LD_EXP 139
38518: IN
38519: NOT
38520: IFFALSE 38524
// exit ;
38522: GO 38635
// index := GetElementIndex ( hackTanks , hack ) ;
38524: LD_ADDR_VAR 0 4
38528: PUSH
38529: LD_EXP 139
38533: PPUSH
38534: LD_VAR 0 1
38538: PPUSH
38539: CALL 46069 0 2
38543: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38544: LD_EXP 140
38548: PUSH
38549: LD_VAR 0 4
38553: ARRAY
38554: IFFALSE 38635
// begin for i in hackTanksCaptured [ index ] do
38556: LD_ADDR_VAR 0 3
38560: PUSH
38561: LD_EXP 140
38565: PUSH
38566: LD_VAR 0 4
38570: ARRAY
38571: PUSH
38572: FOR_IN
38573: IFFALSE 38599
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38575: LD_VAR 0 3
38579: PUSH
38580: LD_INT 1
38582: ARRAY
38583: PPUSH
38584: LD_VAR 0 3
38588: PUSH
38589: LD_INT 2
38591: ARRAY
38592: PPUSH
38593: CALL_OW 235
38597: GO 38572
38599: POP
38600: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38601: LD_ADDR_EXP 140
38605: PUSH
38606: LD_EXP 140
38610: PPUSH
38611: LD_VAR 0 4
38615: PPUSH
38616: EMPTY
38617: PPUSH
38618: CALL_OW 1
38622: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38623: LD_VAR 0 1
38627: PPUSH
38628: LD_INT 0
38630: PPUSH
38631: CALL_OW 505
// end ; end ;
38635: LD_VAR 0 2
38639: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38640: LD_INT 0
38642: PPUSH
38643: PPUSH
38644: PPUSH
// if not hack in hackTanks or not vehicles then
38645: LD_VAR 0 1
38649: PUSH
38650: LD_EXP 139
38654: IN
38655: NOT
38656: PUSH
38657: LD_VAR 0 2
38661: NOT
38662: OR
38663: IFFALSE 38667
// exit ;
38665: GO 38942
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38667: LD_ADDR_VAR 0 2
38671: PUSH
38672: LD_VAR 0 1
38676: PPUSH
38677: LD_VAR 0 2
38681: PPUSH
38682: LD_INT 1
38684: PPUSH
38685: LD_INT 1
38687: PPUSH
38688: CALL 46719 0 4
38692: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38693: LD_ADDR_VAR 0 5
38697: PUSH
38698: LD_EXP 139
38702: PPUSH
38703: LD_VAR 0 1
38707: PPUSH
38708: CALL 46069 0 2
38712: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38713: LD_EXP 140
38717: PUSH
38718: LD_VAR 0 5
38722: ARRAY
38723: PUSH
38724: LD_EXP 141
38728: LESS
38729: IFFALSE 38918
// begin for i := 1 to vehicles do
38731: LD_ADDR_VAR 0 4
38735: PUSH
38736: DOUBLE
38737: LD_INT 1
38739: DEC
38740: ST_TO_ADDR
38741: LD_VAR 0 2
38745: PUSH
38746: FOR_TO
38747: IFFALSE 38916
// begin if hackTanksCaptured [ index ] = hackLimit then
38749: LD_EXP 140
38753: PUSH
38754: LD_VAR 0 5
38758: ARRAY
38759: PUSH
38760: LD_EXP 141
38764: EQUAL
38765: IFFALSE 38769
// break ;
38767: GO 38916
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38769: LD_ADDR_EXP 143
38773: PUSH
38774: LD_EXP 143
38778: PPUSH
38779: LD_VAR 0 5
38783: PPUSH
38784: LD_EXP 143
38788: PUSH
38789: LD_VAR 0 5
38793: ARRAY
38794: PUSH
38795: LD_INT 1
38797: PLUS
38798: PPUSH
38799: CALL_OW 1
38803: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38804: LD_ADDR_EXP 140
38808: PUSH
38809: LD_EXP 140
38813: PPUSH
38814: LD_VAR 0 5
38818: PUSH
38819: LD_EXP 140
38823: PUSH
38824: LD_VAR 0 5
38828: ARRAY
38829: PUSH
38830: LD_INT 1
38832: PLUS
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PPUSH
38838: LD_VAR 0 2
38842: PUSH
38843: LD_VAR 0 4
38847: ARRAY
38848: PUSH
38849: LD_VAR 0 2
38853: PUSH
38854: LD_VAR 0 4
38858: ARRAY
38859: PPUSH
38860: CALL_OW 255
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PPUSH
38869: CALL 46284 0 3
38873: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38874: LD_VAR 0 2
38878: PUSH
38879: LD_VAR 0 4
38883: ARRAY
38884: PPUSH
38885: LD_VAR 0 1
38889: PPUSH
38890: CALL_OW 255
38894: PPUSH
38895: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38899: LD_VAR 0 2
38903: PUSH
38904: LD_VAR 0 4
38908: ARRAY
38909: PPUSH
38910: CALL_OW 141
// end ;
38914: GO 38746
38916: POP
38917: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38918: LD_VAR 0 1
38922: PPUSH
38923: LD_EXP 140
38927: PUSH
38928: LD_VAR 0 5
38932: ARRAY
38933: PUSH
38934: LD_INT 0
38936: PLUS
38937: PPUSH
38938: CALL_OW 505
// end ;
38942: LD_VAR 0 3
38946: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38947: LD_INT 0
38949: PPUSH
38950: PPUSH
38951: PPUSH
38952: PPUSH
// if not hack in hackTanks then
38953: LD_VAR 0 1
38957: PUSH
38958: LD_EXP 139
38962: IN
38963: NOT
38964: IFFALSE 38968
// exit ;
38966: GO 39208
// index := GetElementIndex ( hackTanks , hack ) ;
38968: LD_ADDR_VAR 0 4
38972: PUSH
38973: LD_EXP 139
38977: PPUSH
38978: LD_VAR 0 1
38982: PPUSH
38983: CALL 46069 0 2
38987: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38988: LD_ADDR_VAR 0 3
38992: PUSH
38993: DOUBLE
38994: LD_EXP 140
38998: PUSH
38999: LD_VAR 0 4
39003: ARRAY
39004: INC
39005: ST_TO_ADDR
39006: LD_INT 1
39008: PUSH
39009: FOR_DOWNTO
39010: IFFALSE 39182
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39012: LD_ADDR_VAR 0 5
39016: PUSH
39017: LD_EXP 140
39021: PUSH
39022: LD_VAR 0 4
39026: ARRAY
39027: PUSH
39028: LD_VAR 0 3
39032: ARRAY
39033: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39034: LD_VAR 0 5
39038: PUSH
39039: LD_INT 1
39041: ARRAY
39042: PPUSH
39043: CALL_OW 302
39047: NOT
39048: PUSH
39049: LD_VAR 0 5
39053: PUSH
39054: LD_INT 1
39056: ARRAY
39057: PPUSH
39058: CALL_OW 255
39062: PUSH
39063: LD_VAR 0 1
39067: PPUSH
39068: CALL_OW 255
39072: NONEQUAL
39073: OR
39074: IFFALSE 39180
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39076: LD_VAR 0 5
39080: PUSH
39081: LD_INT 1
39083: ARRAY
39084: PPUSH
39085: CALL_OW 305
39089: PUSH
39090: LD_VAR 0 5
39094: PUSH
39095: LD_INT 1
39097: ARRAY
39098: PPUSH
39099: CALL_OW 255
39103: PUSH
39104: LD_VAR 0 1
39108: PPUSH
39109: CALL_OW 255
39113: EQUAL
39114: AND
39115: IFFALSE 39139
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39117: LD_VAR 0 5
39121: PUSH
39122: LD_INT 1
39124: ARRAY
39125: PPUSH
39126: LD_VAR 0 5
39130: PUSH
39131: LD_INT 2
39133: ARRAY
39134: PPUSH
39135: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39139: LD_ADDR_EXP 140
39143: PUSH
39144: LD_EXP 140
39148: PPUSH
39149: LD_VAR 0 4
39153: PPUSH
39154: LD_EXP 140
39158: PUSH
39159: LD_VAR 0 4
39163: ARRAY
39164: PPUSH
39165: LD_VAR 0 3
39169: PPUSH
39170: CALL_OW 3
39174: PPUSH
39175: CALL_OW 1
39179: ST_TO_ADDR
// end ; end ;
39180: GO 39009
39182: POP
39183: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39184: LD_VAR 0 1
39188: PPUSH
39189: LD_EXP 140
39193: PUSH
39194: LD_VAR 0 4
39198: ARRAY
39199: PUSH
39200: LD_INT 0
39202: PLUS
39203: PPUSH
39204: CALL_OW 505
// end ;
39208: LD_VAR 0 2
39212: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39213: LD_INT 0
39215: PPUSH
39216: PPUSH
39217: PPUSH
39218: PPUSH
// if not hack in hackTanks then
39219: LD_VAR 0 1
39223: PUSH
39224: LD_EXP 139
39228: IN
39229: NOT
39230: IFFALSE 39234
// exit ;
39232: GO 39319
// index := GetElementIndex ( hackTanks , hack ) ;
39234: LD_ADDR_VAR 0 5
39238: PUSH
39239: LD_EXP 139
39243: PPUSH
39244: LD_VAR 0 1
39248: PPUSH
39249: CALL 46069 0 2
39253: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39254: LD_ADDR_VAR 0 4
39258: PUSH
39259: DOUBLE
39260: LD_INT 1
39262: DEC
39263: ST_TO_ADDR
39264: LD_EXP 140
39268: PUSH
39269: LD_VAR 0 5
39273: ARRAY
39274: PUSH
39275: FOR_TO
39276: IFFALSE 39317
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39278: LD_EXP 140
39282: PUSH
39283: LD_VAR 0 5
39287: ARRAY
39288: PUSH
39289: LD_VAR 0 4
39293: ARRAY
39294: PUSH
39295: LD_INT 1
39297: ARRAY
39298: PUSH
39299: LD_VAR 0 2
39303: EQUAL
39304: IFFALSE 39315
// KillUnit ( vehicle ) ;
39306: LD_VAR 0 2
39310: PPUSH
39311: CALL_OW 66
39315: GO 39275
39317: POP
39318: POP
// end ;
39319: LD_VAR 0 3
39323: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39324: LD_EXP 144
39328: NOT
39329: IFFALSE 39364
39331: GO 39333
39333: DISABLE
// begin initMiner := true ;
39334: LD_ADDR_EXP 144
39338: PUSH
39339: LD_INT 1
39341: ST_TO_ADDR
// minersList := [ ] ;
39342: LD_ADDR_EXP 145
39346: PUSH
39347: EMPTY
39348: ST_TO_ADDR
// minerMinesList := [ ] ;
39349: LD_ADDR_EXP 146
39353: PUSH
39354: EMPTY
39355: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39356: LD_ADDR_EXP 147
39360: PUSH
39361: LD_INT 5
39363: ST_TO_ADDR
// end ;
39364: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39365: LD_EXP 144
39369: PUSH
39370: LD_INT 34
39372: PUSH
39373: LD_EXP 72
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PPUSH
39382: CALL_OW 69
39386: AND
39387: IFFALSE 39850
39389: GO 39391
39391: DISABLE
39392: LD_INT 0
39394: PPUSH
39395: PPUSH
39396: PPUSH
39397: PPUSH
// begin enable ;
39398: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39399: LD_ADDR_VAR 0 1
39403: PUSH
39404: LD_INT 34
39406: PUSH
39407: LD_EXP 72
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PPUSH
39416: CALL_OW 69
39420: PUSH
39421: FOR_IN
39422: IFFALSE 39494
// begin if not i in minersList then
39424: LD_VAR 0 1
39428: PUSH
39429: LD_EXP 145
39433: IN
39434: NOT
39435: IFFALSE 39492
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39437: LD_ADDR_EXP 145
39441: PUSH
39442: LD_EXP 145
39446: PPUSH
39447: LD_EXP 145
39451: PUSH
39452: LD_INT 1
39454: PLUS
39455: PPUSH
39456: LD_VAR 0 1
39460: PPUSH
39461: CALL_OW 1
39465: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39466: LD_ADDR_EXP 146
39470: PUSH
39471: LD_EXP 146
39475: PPUSH
39476: LD_EXP 146
39480: PUSH
39481: LD_INT 1
39483: PLUS
39484: PPUSH
39485: EMPTY
39486: PPUSH
39487: CALL_OW 1
39491: ST_TO_ADDR
// end end ;
39492: GO 39421
39494: POP
39495: POP
// for i := minerMinesList downto 1 do
39496: LD_ADDR_VAR 0 1
39500: PUSH
39501: DOUBLE
39502: LD_EXP 146
39506: INC
39507: ST_TO_ADDR
39508: LD_INT 1
39510: PUSH
39511: FOR_DOWNTO
39512: IFFALSE 39848
// begin if IsLive ( minersList [ i ] ) then
39514: LD_EXP 145
39518: PUSH
39519: LD_VAR 0 1
39523: ARRAY
39524: PPUSH
39525: CALL_OW 300
39529: IFFALSE 39557
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39531: LD_EXP 145
39535: PUSH
39536: LD_VAR 0 1
39540: ARRAY
39541: PPUSH
39542: LD_EXP 146
39546: PUSH
39547: LD_VAR 0 1
39551: ARRAY
39552: PPUSH
39553: CALL_OW 505
// if not minerMinesList [ i ] then
39557: LD_EXP 146
39561: PUSH
39562: LD_VAR 0 1
39566: ARRAY
39567: NOT
39568: IFFALSE 39572
// continue ;
39570: GO 39511
// for j := minerMinesList [ i ] downto 1 do
39572: LD_ADDR_VAR 0 2
39576: PUSH
39577: DOUBLE
39578: LD_EXP 146
39582: PUSH
39583: LD_VAR 0 1
39587: ARRAY
39588: INC
39589: ST_TO_ADDR
39590: LD_INT 1
39592: PUSH
39593: FOR_DOWNTO
39594: IFFALSE 39844
// begin side := GetSide ( minersList [ i ] ) ;
39596: LD_ADDR_VAR 0 3
39600: PUSH
39601: LD_EXP 145
39605: PUSH
39606: LD_VAR 0 1
39610: ARRAY
39611: PPUSH
39612: CALL_OW 255
39616: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39617: LD_ADDR_VAR 0 4
39621: PUSH
39622: LD_EXP 146
39626: PUSH
39627: LD_VAR 0 1
39631: ARRAY
39632: PUSH
39633: LD_VAR 0 2
39637: ARRAY
39638: PUSH
39639: LD_INT 1
39641: ARRAY
39642: PPUSH
39643: LD_EXP 146
39647: PUSH
39648: LD_VAR 0 1
39652: ARRAY
39653: PUSH
39654: LD_VAR 0 2
39658: ARRAY
39659: PUSH
39660: LD_INT 2
39662: ARRAY
39663: PPUSH
39664: CALL_OW 428
39668: ST_TO_ADDR
// if not tmp then
39669: LD_VAR 0 4
39673: NOT
39674: IFFALSE 39678
// continue ;
39676: GO 39593
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39678: LD_VAR 0 4
39682: PUSH
39683: LD_INT 81
39685: PUSH
39686: LD_VAR 0 3
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PPUSH
39695: CALL_OW 69
39699: IN
39700: PUSH
39701: LD_EXP 146
39705: PUSH
39706: LD_VAR 0 1
39710: ARRAY
39711: PUSH
39712: LD_VAR 0 2
39716: ARRAY
39717: PUSH
39718: LD_INT 1
39720: ARRAY
39721: PPUSH
39722: LD_EXP 146
39726: PUSH
39727: LD_VAR 0 1
39731: ARRAY
39732: PUSH
39733: LD_VAR 0 2
39737: ARRAY
39738: PUSH
39739: LD_INT 2
39741: ARRAY
39742: PPUSH
39743: CALL_OW 458
39747: AND
39748: IFFALSE 39842
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39750: LD_EXP 146
39754: PUSH
39755: LD_VAR 0 1
39759: ARRAY
39760: PUSH
39761: LD_VAR 0 2
39765: ARRAY
39766: PUSH
39767: LD_INT 1
39769: ARRAY
39770: PPUSH
39771: LD_EXP 146
39775: PUSH
39776: LD_VAR 0 1
39780: ARRAY
39781: PUSH
39782: LD_VAR 0 2
39786: ARRAY
39787: PUSH
39788: LD_INT 2
39790: ARRAY
39791: PPUSH
39792: LD_VAR 0 3
39796: PPUSH
39797: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39801: LD_ADDR_EXP 146
39805: PUSH
39806: LD_EXP 146
39810: PPUSH
39811: LD_VAR 0 1
39815: PPUSH
39816: LD_EXP 146
39820: PUSH
39821: LD_VAR 0 1
39825: ARRAY
39826: PPUSH
39827: LD_VAR 0 2
39831: PPUSH
39832: CALL_OW 3
39836: PPUSH
39837: CALL_OW 1
39841: ST_TO_ADDR
// end ; end ;
39842: GO 39593
39844: POP
39845: POP
// end ;
39846: GO 39511
39848: POP
39849: POP
// end ;
39850: PPOPN 4
39852: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39853: LD_INT 0
39855: PPUSH
39856: PPUSH
// result := false ;
39857: LD_ADDR_VAR 0 4
39861: PUSH
39862: LD_INT 0
39864: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39865: LD_VAR 0 1
39869: PPUSH
39870: CALL_OW 264
39874: PUSH
39875: LD_EXP 72
39879: EQUAL
39880: NOT
39881: IFFALSE 39885
// exit ;
39883: GO 40125
// index := GetElementIndex ( minersList , unit ) ;
39885: LD_ADDR_VAR 0 5
39889: PUSH
39890: LD_EXP 145
39894: PPUSH
39895: LD_VAR 0 1
39899: PPUSH
39900: CALL 46069 0 2
39904: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39905: LD_EXP 146
39909: PUSH
39910: LD_VAR 0 5
39914: ARRAY
39915: PUSH
39916: LD_EXP 147
39920: GREATEREQUAL
39921: IFFALSE 39925
// exit ;
39923: GO 40125
// ComMoveXY ( unit , x , y ) ;
39925: LD_VAR 0 1
39929: PPUSH
39930: LD_VAR 0 2
39934: PPUSH
39935: LD_VAR 0 3
39939: PPUSH
39940: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39944: LD_INT 35
39946: PPUSH
39947: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39951: LD_VAR 0 1
39955: PPUSH
39956: LD_VAR 0 2
39960: PPUSH
39961: LD_VAR 0 3
39965: PPUSH
39966: CALL 76133 0 3
39970: NOT
39971: PUSH
39972: LD_VAR 0 1
39976: PPUSH
39977: CALL_OW 314
39981: AND
39982: IFFALSE 39986
// exit ;
39984: GO 40125
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39986: LD_VAR 0 2
39990: PPUSH
39991: LD_VAR 0 3
39995: PPUSH
39996: CALL_OW 428
40000: PUSH
40001: LD_VAR 0 1
40005: EQUAL
40006: PUSH
40007: LD_VAR 0 1
40011: PPUSH
40012: CALL_OW 314
40016: NOT
40017: AND
40018: IFFALSE 39944
// PlaySoundXY ( x , y , PlantMine ) ;
40020: LD_VAR 0 2
40024: PPUSH
40025: LD_VAR 0 3
40029: PPUSH
40030: LD_STRING PlantMine
40032: PPUSH
40033: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
40037: LD_VAR 0 2
40041: PPUSH
40042: LD_VAR 0 3
40046: PPUSH
40047: LD_VAR 0 1
40051: PPUSH
40052: CALL_OW 255
40056: PPUSH
40057: LD_INT 0
40059: PPUSH
40060: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40064: LD_ADDR_EXP 146
40068: PUSH
40069: LD_EXP 146
40073: PPUSH
40074: LD_VAR 0 5
40078: PUSH
40079: LD_EXP 146
40083: PUSH
40084: LD_VAR 0 5
40088: ARRAY
40089: PUSH
40090: LD_INT 1
40092: PLUS
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PPUSH
40098: LD_VAR 0 2
40102: PUSH
40103: LD_VAR 0 3
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PPUSH
40112: CALL 46284 0 3
40116: ST_TO_ADDR
// result := true ;
40117: LD_ADDR_VAR 0 4
40121: PUSH
40122: LD_INT 1
40124: ST_TO_ADDR
// end ;
40125: LD_VAR 0 4
40129: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40130: LD_INT 0
40132: PPUSH
40133: PPUSH
40134: PPUSH
// if not unit in minersList then
40135: LD_VAR 0 1
40139: PUSH
40140: LD_EXP 145
40144: IN
40145: NOT
40146: IFFALSE 40150
// exit ;
40148: GO 40542
// index := GetElementIndex ( minersList , unit ) ;
40150: LD_ADDR_VAR 0 6
40154: PUSH
40155: LD_EXP 145
40159: PPUSH
40160: LD_VAR 0 1
40164: PPUSH
40165: CALL 46069 0 2
40169: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40170: LD_ADDR_VAR 0 5
40174: PUSH
40175: DOUBLE
40176: LD_EXP 146
40180: PUSH
40181: LD_VAR 0 6
40185: ARRAY
40186: INC
40187: ST_TO_ADDR
40188: LD_INT 1
40190: PUSH
40191: FOR_DOWNTO
40192: IFFALSE 40353
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40194: LD_EXP 146
40198: PUSH
40199: LD_VAR 0 6
40203: ARRAY
40204: PUSH
40205: LD_VAR 0 5
40209: ARRAY
40210: PUSH
40211: LD_INT 1
40213: ARRAY
40214: PUSH
40215: LD_VAR 0 2
40219: EQUAL
40220: PUSH
40221: LD_EXP 146
40225: PUSH
40226: LD_VAR 0 6
40230: ARRAY
40231: PUSH
40232: LD_VAR 0 5
40236: ARRAY
40237: PUSH
40238: LD_INT 2
40240: ARRAY
40241: PUSH
40242: LD_VAR 0 3
40246: EQUAL
40247: AND
40248: IFFALSE 40351
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40250: LD_EXP 146
40254: PUSH
40255: LD_VAR 0 6
40259: ARRAY
40260: PUSH
40261: LD_VAR 0 5
40265: ARRAY
40266: PUSH
40267: LD_INT 1
40269: ARRAY
40270: PPUSH
40271: LD_EXP 146
40275: PUSH
40276: LD_VAR 0 6
40280: ARRAY
40281: PUSH
40282: LD_VAR 0 5
40286: ARRAY
40287: PUSH
40288: LD_INT 2
40290: ARRAY
40291: PPUSH
40292: LD_VAR 0 1
40296: PPUSH
40297: CALL_OW 255
40301: PPUSH
40302: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40306: LD_ADDR_EXP 146
40310: PUSH
40311: LD_EXP 146
40315: PPUSH
40316: LD_VAR 0 6
40320: PPUSH
40321: LD_EXP 146
40325: PUSH
40326: LD_VAR 0 6
40330: ARRAY
40331: PPUSH
40332: LD_VAR 0 5
40336: PPUSH
40337: CALL_OW 3
40341: PPUSH
40342: CALL_OW 1
40346: ST_TO_ADDR
// exit ;
40347: POP
40348: POP
40349: GO 40542
// end ; end ;
40351: GO 40191
40353: POP
40354: POP
// for i := minerMinesList [ index ] downto 1 do
40355: LD_ADDR_VAR 0 5
40359: PUSH
40360: DOUBLE
40361: LD_EXP 146
40365: PUSH
40366: LD_VAR 0 6
40370: ARRAY
40371: INC
40372: ST_TO_ADDR
40373: LD_INT 1
40375: PUSH
40376: FOR_DOWNTO
40377: IFFALSE 40540
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40379: LD_EXP 146
40383: PUSH
40384: LD_VAR 0 6
40388: ARRAY
40389: PUSH
40390: LD_VAR 0 5
40394: ARRAY
40395: PUSH
40396: LD_INT 1
40398: ARRAY
40399: PPUSH
40400: LD_EXP 146
40404: PUSH
40405: LD_VAR 0 6
40409: ARRAY
40410: PUSH
40411: LD_VAR 0 5
40415: ARRAY
40416: PUSH
40417: LD_INT 2
40419: ARRAY
40420: PPUSH
40421: LD_VAR 0 2
40425: PPUSH
40426: LD_VAR 0 3
40430: PPUSH
40431: CALL_OW 298
40435: PUSH
40436: LD_INT 6
40438: LESS
40439: IFFALSE 40538
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40441: LD_EXP 146
40445: PUSH
40446: LD_VAR 0 6
40450: ARRAY
40451: PUSH
40452: LD_VAR 0 5
40456: ARRAY
40457: PUSH
40458: LD_INT 1
40460: ARRAY
40461: PPUSH
40462: LD_EXP 146
40466: PUSH
40467: LD_VAR 0 6
40471: ARRAY
40472: PUSH
40473: LD_VAR 0 5
40477: ARRAY
40478: PUSH
40479: LD_INT 2
40481: ARRAY
40482: PPUSH
40483: LD_VAR 0 1
40487: PPUSH
40488: CALL_OW 255
40492: PPUSH
40493: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40497: LD_ADDR_EXP 146
40501: PUSH
40502: LD_EXP 146
40506: PPUSH
40507: LD_VAR 0 6
40511: PPUSH
40512: LD_EXP 146
40516: PUSH
40517: LD_VAR 0 6
40521: ARRAY
40522: PPUSH
40523: LD_VAR 0 5
40527: PPUSH
40528: CALL_OW 3
40532: PPUSH
40533: CALL_OW 1
40537: ST_TO_ADDR
// end ; end ;
40538: GO 40376
40540: POP
40541: POP
// end ;
40542: LD_VAR 0 4
40546: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40547: LD_INT 0
40549: PPUSH
40550: PPUSH
40551: PPUSH
40552: PPUSH
40553: PPUSH
40554: PPUSH
40555: PPUSH
40556: PPUSH
40557: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40558: LD_VAR 0 1
40562: PPUSH
40563: CALL_OW 264
40567: PUSH
40568: LD_EXP 72
40572: EQUAL
40573: NOT
40574: PUSH
40575: LD_VAR 0 1
40579: PUSH
40580: LD_EXP 145
40584: IN
40585: NOT
40586: OR
40587: IFFALSE 40591
// exit ;
40589: GO 40913
// index := GetElementIndex ( minersList , unit ) ;
40591: LD_ADDR_VAR 0 6
40595: PUSH
40596: LD_EXP 145
40600: PPUSH
40601: LD_VAR 0 1
40605: PPUSH
40606: CALL 46069 0 2
40610: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40611: LD_ADDR_VAR 0 8
40615: PUSH
40616: LD_EXP 147
40620: PUSH
40621: LD_EXP 146
40625: PUSH
40626: LD_VAR 0 6
40630: ARRAY
40631: MINUS
40632: ST_TO_ADDR
// if not minesFreeAmount then
40633: LD_VAR 0 8
40637: NOT
40638: IFFALSE 40642
// exit ;
40640: GO 40913
// tmp := [ ] ;
40642: LD_ADDR_VAR 0 7
40646: PUSH
40647: EMPTY
40648: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40649: LD_ADDR_VAR 0 5
40653: PUSH
40654: DOUBLE
40655: LD_INT 1
40657: DEC
40658: ST_TO_ADDR
40659: LD_VAR 0 8
40663: PUSH
40664: FOR_TO
40665: IFFALSE 40860
// begin _d := rand ( 0 , 5 ) ;
40667: LD_ADDR_VAR 0 11
40671: PUSH
40672: LD_INT 0
40674: PPUSH
40675: LD_INT 5
40677: PPUSH
40678: CALL_OW 12
40682: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40683: LD_ADDR_VAR 0 12
40687: PUSH
40688: LD_INT 2
40690: PPUSH
40691: LD_INT 6
40693: PPUSH
40694: CALL_OW 12
40698: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40699: LD_ADDR_VAR 0 9
40703: PUSH
40704: LD_VAR 0 2
40708: PPUSH
40709: LD_VAR 0 11
40713: PPUSH
40714: LD_VAR 0 12
40718: PPUSH
40719: CALL_OW 272
40723: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40724: LD_ADDR_VAR 0 10
40728: PUSH
40729: LD_VAR 0 3
40733: PPUSH
40734: LD_VAR 0 11
40738: PPUSH
40739: LD_VAR 0 12
40743: PPUSH
40744: CALL_OW 273
40748: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40749: LD_VAR 0 9
40753: PPUSH
40754: LD_VAR 0 10
40758: PPUSH
40759: CALL_OW 488
40763: PUSH
40764: LD_VAR 0 9
40768: PUSH
40769: LD_VAR 0 10
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_VAR 0 7
40782: IN
40783: NOT
40784: AND
40785: PUSH
40786: LD_VAR 0 9
40790: PPUSH
40791: LD_VAR 0 10
40795: PPUSH
40796: CALL_OW 458
40800: NOT
40801: AND
40802: IFFALSE 40844
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40804: LD_ADDR_VAR 0 7
40808: PUSH
40809: LD_VAR 0 7
40813: PPUSH
40814: LD_VAR 0 7
40818: PUSH
40819: LD_INT 1
40821: PLUS
40822: PPUSH
40823: LD_VAR 0 9
40827: PUSH
40828: LD_VAR 0 10
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PPUSH
40837: CALL_OW 1
40841: ST_TO_ADDR
40842: GO 40858
// i := i - 1 ;
40844: LD_ADDR_VAR 0 5
40848: PUSH
40849: LD_VAR 0 5
40853: PUSH
40854: LD_INT 1
40856: MINUS
40857: ST_TO_ADDR
// end ;
40858: GO 40664
40860: POP
40861: POP
// for i in tmp do
40862: LD_ADDR_VAR 0 5
40866: PUSH
40867: LD_VAR 0 7
40871: PUSH
40872: FOR_IN
40873: IFFALSE 40911
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40875: LD_VAR 0 1
40879: PPUSH
40880: LD_VAR 0 5
40884: PUSH
40885: LD_INT 1
40887: ARRAY
40888: PPUSH
40889: LD_VAR 0 5
40893: PUSH
40894: LD_INT 2
40896: ARRAY
40897: PPUSH
40898: CALL 39853 0 3
40902: NOT
40903: IFFALSE 40909
// exit ;
40905: POP
40906: POP
40907: GO 40913
40909: GO 40872
40911: POP
40912: POP
// end ;
40913: LD_VAR 0 4
40917: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
40918: LD_INT 0
40920: PPUSH
40921: PPUSH
40922: PPUSH
40923: PPUSH
40924: PPUSH
40925: PPUSH
40926: PPUSH
// if not GetClass ( unit ) = class_sniper then
40927: LD_VAR 0 1
40931: PPUSH
40932: CALL_OW 257
40936: PUSH
40937: LD_INT 5
40939: EQUAL
40940: NOT
40941: IFFALSE 40945
// exit ;
40943: GO 41333
// dist := 8 ;
40945: LD_ADDR_VAR 0 5
40949: PUSH
40950: LD_INT 8
40952: ST_TO_ADDR
// viewRange := 12 ;
40953: LD_ADDR_VAR 0 7
40957: PUSH
40958: LD_INT 12
40960: ST_TO_ADDR
// side := GetSide ( unit ) ;
40961: LD_ADDR_VAR 0 6
40965: PUSH
40966: LD_VAR 0 1
40970: PPUSH
40971: CALL_OW 255
40975: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40976: LD_INT 61
40978: PPUSH
40979: LD_VAR 0 6
40983: PPUSH
40984: CALL_OW 321
40988: PUSH
40989: LD_INT 2
40991: EQUAL
40992: IFFALSE 41002
// viewRange := 16 ;
40994: LD_ADDR_VAR 0 7
40998: PUSH
40999: LD_INT 16
41001: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41002: LD_VAR 0 1
41006: PPUSH
41007: LD_VAR 0 2
41011: PPUSH
41012: LD_VAR 0 3
41016: PPUSH
41017: CALL_OW 297
41021: PUSH
41022: LD_VAR 0 5
41026: GREATER
41027: IFFALSE 41106
// begin ComMoveXY ( unit , x , y ) ;
41029: LD_VAR 0 1
41033: PPUSH
41034: LD_VAR 0 2
41038: PPUSH
41039: LD_VAR 0 3
41043: PPUSH
41044: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41048: LD_INT 35
41050: PPUSH
41051: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41055: LD_VAR 0 1
41059: PPUSH
41060: LD_VAR 0 2
41064: PPUSH
41065: LD_VAR 0 3
41069: PPUSH
41070: CALL 76133 0 3
41074: NOT
41075: IFFALSE 41079
// exit ;
41077: GO 41333
// until GetDistUnitXY ( unit , x , y ) < dist ;
41079: LD_VAR 0 1
41083: PPUSH
41084: LD_VAR 0 2
41088: PPUSH
41089: LD_VAR 0 3
41093: PPUSH
41094: CALL_OW 297
41098: PUSH
41099: LD_VAR 0 5
41103: LESS
41104: IFFALSE 41048
// end ; ComTurnXY ( unit , x , y ) ;
41106: LD_VAR 0 1
41110: PPUSH
41111: LD_VAR 0 2
41115: PPUSH
41116: LD_VAR 0 3
41120: PPUSH
41121: CALL_OW 118
// wait ( 5 ) ;
41125: LD_INT 5
41127: PPUSH
41128: CALL_OW 67
// _d := GetDir ( unit ) ;
41132: LD_ADDR_VAR 0 10
41136: PUSH
41137: LD_VAR 0 1
41141: PPUSH
41142: CALL_OW 254
41146: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
41147: LD_ADDR_VAR 0 8
41151: PUSH
41152: LD_VAR 0 1
41156: PPUSH
41157: CALL_OW 250
41161: PPUSH
41162: LD_VAR 0 10
41166: PPUSH
41167: LD_VAR 0 5
41171: PPUSH
41172: CALL_OW 272
41176: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
41177: LD_ADDR_VAR 0 9
41181: PUSH
41182: LD_VAR 0 1
41186: PPUSH
41187: CALL_OW 251
41191: PPUSH
41192: LD_VAR 0 10
41196: PPUSH
41197: LD_VAR 0 5
41201: PPUSH
41202: CALL_OW 273
41206: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41207: LD_VAR 0 8
41211: PPUSH
41212: LD_VAR 0 9
41216: PPUSH
41217: CALL_OW 488
41221: NOT
41222: IFFALSE 41226
// exit ;
41224: GO 41333
// ComAnimCustom ( unit , 1 ) ;
41226: LD_VAR 0 1
41230: PPUSH
41231: LD_INT 1
41233: PPUSH
41234: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41238: LD_VAR 0 8
41242: PPUSH
41243: LD_VAR 0 9
41247: PPUSH
41248: LD_VAR 0 6
41252: PPUSH
41253: LD_VAR 0 7
41257: PPUSH
41258: CALL_OW 330
// repeat wait ( 1 ) ;
41262: LD_INT 1
41264: PPUSH
41265: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
41269: LD_VAR 0 1
41273: PPUSH
41274: CALL_OW 316
41278: PUSH
41279: LD_VAR 0 1
41283: PPUSH
41284: CALL_OW 314
41288: OR
41289: PUSH
41290: LD_VAR 0 1
41294: PPUSH
41295: CALL_OW 302
41299: NOT
41300: OR
41301: PUSH
41302: LD_VAR 0 1
41306: PPUSH
41307: CALL_OW 301
41311: OR
41312: IFFALSE 41262
// RemoveSeeing ( _x , _y , side ) ;
41314: LD_VAR 0 8
41318: PPUSH
41319: LD_VAR 0 9
41323: PPUSH
41324: LD_VAR 0 6
41328: PPUSH
41329: CALL_OW 331
// end ; end_of_file
41333: LD_VAR 0 4
41337: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41338: LD_INT 0
41340: PPUSH
41341: PPUSH
// if exist_mode then
41342: LD_VAR 0 2
41346: IFFALSE 41371
// unit := CreateCharacter ( prefix & ident ) else
41348: LD_ADDR_VAR 0 5
41352: PUSH
41353: LD_VAR 0 3
41357: PUSH
41358: LD_VAR 0 1
41362: STR
41363: PPUSH
41364: CALL_OW 34
41368: ST_TO_ADDR
41369: GO 41386
// unit := NewCharacter ( ident ) ;
41371: LD_ADDR_VAR 0 5
41375: PUSH
41376: LD_VAR 0 1
41380: PPUSH
41381: CALL_OW 25
41385: ST_TO_ADDR
// result := unit ;
41386: LD_ADDR_VAR 0 4
41390: PUSH
41391: LD_VAR 0 5
41395: ST_TO_ADDR
// end ;
41396: LD_VAR 0 4
41400: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41401: LD_INT 0
41403: PPUSH
41404: PPUSH
// if not side or not nation then
41405: LD_VAR 0 1
41409: NOT
41410: PUSH
41411: LD_VAR 0 2
41415: NOT
41416: OR
41417: IFFALSE 41421
// exit ;
41419: GO 42185
// case nation of nation_american :
41421: LD_VAR 0 2
41425: PUSH
41426: LD_INT 1
41428: DOUBLE
41429: EQUAL
41430: IFTRUE 41434
41432: GO 41648
41434: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41435: LD_ADDR_VAR 0 4
41439: PUSH
41440: LD_INT 35
41442: PUSH
41443: LD_INT 45
41445: PUSH
41446: LD_INT 46
41448: PUSH
41449: LD_INT 47
41451: PUSH
41452: LD_INT 82
41454: PUSH
41455: LD_INT 83
41457: PUSH
41458: LD_INT 84
41460: PUSH
41461: LD_INT 85
41463: PUSH
41464: LD_INT 86
41466: PUSH
41467: LD_INT 1
41469: PUSH
41470: LD_INT 2
41472: PUSH
41473: LD_INT 6
41475: PUSH
41476: LD_INT 15
41478: PUSH
41479: LD_INT 16
41481: PUSH
41482: LD_INT 7
41484: PUSH
41485: LD_INT 12
41487: PUSH
41488: LD_INT 13
41490: PUSH
41491: LD_INT 10
41493: PUSH
41494: LD_INT 14
41496: PUSH
41497: LD_INT 20
41499: PUSH
41500: LD_INT 21
41502: PUSH
41503: LD_INT 22
41505: PUSH
41506: LD_INT 25
41508: PUSH
41509: LD_INT 32
41511: PUSH
41512: LD_INT 27
41514: PUSH
41515: LD_INT 36
41517: PUSH
41518: LD_INT 69
41520: PUSH
41521: LD_INT 39
41523: PUSH
41524: LD_INT 34
41526: PUSH
41527: LD_INT 40
41529: PUSH
41530: LD_INT 48
41532: PUSH
41533: LD_INT 49
41535: PUSH
41536: LD_INT 50
41538: PUSH
41539: LD_INT 51
41541: PUSH
41542: LD_INT 52
41544: PUSH
41545: LD_INT 53
41547: PUSH
41548: LD_INT 54
41550: PUSH
41551: LD_INT 55
41553: PUSH
41554: LD_INT 56
41556: PUSH
41557: LD_INT 57
41559: PUSH
41560: LD_INT 58
41562: PUSH
41563: LD_INT 59
41565: PUSH
41566: LD_INT 60
41568: PUSH
41569: LD_INT 61
41571: PUSH
41572: LD_INT 62
41574: PUSH
41575: LD_INT 80
41577: PUSH
41578: LD_INT 82
41580: PUSH
41581: LD_INT 83
41583: PUSH
41584: LD_INT 84
41586: PUSH
41587: LD_INT 85
41589: PUSH
41590: LD_INT 86
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: ST_TO_ADDR
41646: GO 42109
41648: LD_INT 2
41650: DOUBLE
41651: EQUAL
41652: IFTRUE 41656
41654: GO 41878
41656: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
41657: LD_ADDR_VAR 0 4
41661: PUSH
41662: LD_INT 35
41664: PUSH
41665: LD_INT 45
41667: PUSH
41668: LD_INT 46
41670: PUSH
41671: LD_INT 47
41673: PUSH
41674: LD_INT 82
41676: PUSH
41677: LD_INT 83
41679: PUSH
41680: LD_INT 84
41682: PUSH
41683: LD_INT 85
41685: PUSH
41686: LD_INT 87
41688: PUSH
41689: LD_INT 70
41691: PUSH
41692: LD_INT 1
41694: PUSH
41695: LD_INT 11
41697: PUSH
41698: LD_INT 3
41700: PUSH
41701: LD_INT 4
41703: PUSH
41704: LD_INT 5
41706: PUSH
41707: LD_INT 6
41709: PUSH
41710: LD_INT 15
41712: PUSH
41713: LD_INT 18
41715: PUSH
41716: LD_INT 7
41718: PUSH
41719: LD_INT 17
41721: PUSH
41722: LD_INT 8
41724: PUSH
41725: LD_INT 20
41727: PUSH
41728: LD_INT 21
41730: PUSH
41731: LD_INT 22
41733: PUSH
41734: LD_INT 72
41736: PUSH
41737: LD_INT 26
41739: PUSH
41740: LD_INT 69
41742: PUSH
41743: LD_INT 39
41745: PUSH
41746: LD_INT 40
41748: PUSH
41749: LD_INT 41
41751: PUSH
41752: LD_INT 42
41754: PUSH
41755: LD_INT 43
41757: PUSH
41758: LD_INT 48
41760: PUSH
41761: LD_INT 49
41763: PUSH
41764: LD_INT 50
41766: PUSH
41767: LD_INT 51
41769: PUSH
41770: LD_INT 52
41772: PUSH
41773: LD_INT 53
41775: PUSH
41776: LD_INT 54
41778: PUSH
41779: LD_INT 55
41781: PUSH
41782: LD_INT 56
41784: PUSH
41785: LD_INT 60
41787: PUSH
41788: LD_INT 61
41790: PUSH
41791: LD_INT 62
41793: PUSH
41794: LD_INT 66
41796: PUSH
41797: LD_INT 67
41799: PUSH
41800: LD_INT 68
41802: PUSH
41803: LD_INT 81
41805: PUSH
41806: LD_INT 82
41808: PUSH
41809: LD_INT 83
41811: PUSH
41812: LD_INT 84
41814: PUSH
41815: LD_INT 85
41817: PUSH
41818: LD_INT 87
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: ST_TO_ADDR
41876: GO 42109
41878: LD_INT 3
41880: DOUBLE
41881: EQUAL
41882: IFTRUE 41886
41884: GO 42108
41886: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41887: LD_ADDR_VAR 0 4
41891: PUSH
41892: LD_INT 46
41894: PUSH
41895: LD_INT 47
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: LD_INT 2
41903: PUSH
41904: LD_INT 82
41906: PUSH
41907: LD_INT 83
41909: PUSH
41910: LD_INT 84
41912: PUSH
41913: LD_INT 85
41915: PUSH
41916: LD_INT 86
41918: PUSH
41919: LD_INT 11
41921: PUSH
41922: LD_INT 9
41924: PUSH
41925: LD_INT 20
41927: PUSH
41928: LD_INT 19
41930: PUSH
41931: LD_INT 21
41933: PUSH
41934: LD_INT 24
41936: PUSH
41937: LD_INT 22
41939: PUSH
41940: LD_INT 25
41942: PUSH
41943: LD_INT 28
41945: PUSH
41946: LD_INT 29
41948: PUSH
41949: LD_INT 30
41951: PUSH
41952: LD_INT 31
41954: PUSH
41955: LD_INT 37
41957: PUSH
41958: LD_INT 38
41960: PUSH
41961: LD_INT 32
41963: PUSH
41964: LD_INT 27
41966: PUSH
41967: LD_INT 33
41969: PUSH
41970: LD_INT 69
41972: PUSH
41973: LD_INT 39
41975: PUSH
41976: LD_INT 34
41978: PUSH
41979: LD_INT 40
41981: PUSH
41982: LD_INT 71
41984: PUSH
41985: LD_INT 23
41987: PUSH
41988: LD_INT 44
41990: PUSH
41991: LD_INT 48
41993: PUSH
41994: LD_INT 49
41996: PUSH
41997: LD_INT 50
41999: PUSH
42000: LD_INT 51
42002: PUSH
42003: LD_INT 52
42005: PUSH
42006: LD_INT 53
42008: PUSH
42009: LD_INT 54
42011: PUSH
42012: LD_INT 55
42014: PUSH
42015: LD_INT 56
42017: PUSH
42018: LD_INT 57
42020: PUSH
42021: LD_INT 58
42023: PUSH
42024: LD_INT 59
42026: PUSH
42027: LD_INT 63
42029: PUSH
42030: LD_INT 64
42032: PUSH
42033: LD_INT 65
42035: PUSH
42036: LD_INT 82
42038: PUSH
42039: LD_INT 83
42041: PUSH
42042: LD_INT 84
42044: PUSH
42045: LD_INT 85
42047: PUSH
42048: LD_INT 86
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: ST_TO_ADDR
42106: GO 42109
42108: POP
// if state > - 1 and state < 3 then
42109: LD_VAR 0 3
42113: PUSH
42114: LD_INT 1
42116: NEG
42117: GREATER
42118: PUSH
42119: LD_VAR 0 3
42123: PUSH
42124: LD_INT 3
42126: LESS
42127: AND
42128: IFFALSE 42185
// for i in result do
42130: LD_ADDR_VAR 0 5
42134: PUSH
42135: LD_VAR 0 4
42139: PUSH
42140: FOR_IN
42141: IFFALSE 42183
// if GetTech ( i , side ) <> state then
42143: LD_VAR 0 5
42147: PPUSH
42148: LD_VAR 0 1
42152: PPUSH
42153: CALL_OW 321
42157: PUSH
42158: LD_VAR 0 3
42162: NONEQUAL
42163: IFFALSE 42181
// result := result diff i ;
42165: LD_ADDR_VAR 0 4
42169: PUSH
42170: LD_VAR 0 4
42174: PUSH
42175: LD_VAR 0 5
42179: DIFF
42180: ST_TO_ADDR
42181: GO 42140
42183: POP
42184: POP
// end ;
42185: LD_VAR 0 4
42189: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42190: LD_INT 0
42192: PPUSH
42193: PPUSH
42194: PPUSH
// result := true ;
42195: LD_ADDR_VAR 0 3
42199: PUSH
42200: LD_INT 1
42202: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42203: LD_ADDR_VAR 0 5
42207: PUSH
42208: LD_VAR 0 2
42212: PPUSH
42213: CALL_OW 480
42217: ST_TO_ADDR
// if not tmp then
42218: LD_VAR 0 5
42222: NOT
42223: IFFALSE 42227
// exit ;
42225: GO 42276
// for i in tmp do
42227: LD_ADDR_VAR 0 4
42231: PUSH
42232: LD_VAR 0 5
42236: PUSH
42237: FOR_IN
42238: IFFALSE 42274
// if GetTech ( i , side ) <> state_researched then
42240: LD_VAR 0 4
42244: PPUSH
42245: LD_VAR 0 1
42249: PPUSH
42250: CALL_OW 321
42254: PUSH
42255: LD_INT 2
42257: NONEQUAL
42258: IFFALSE 42272
// begin result := false ;
42260: LD_ADDR_VAR 0 3
42264: PUSH
42265: LD_INT 0
42267: ST_TO_ADDR
// exit ;
42268: POP
42269: POP
42270: GO 42276
// end ;
42272: GO 42237
42274: POP
42275: POP
// end ;
42276: LD_VAR 0 3
42280: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42281: LD_INT 0
42283: PPUSH
42284: PPUSH
42285: PPUSH
42286: PPUSH
42287: PPUSH
42288: PPUSH
42289: PPUSH
42290: PPUSH
42291: PPUSH
42292: PPUSH
42293: PPUSH
42294: PPUSH
42295: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42296: LD_VAR 0 1
42300: NOT
42301: PUSH
42302: LD_VAR 0 1
42306: PPUSH
42307: CALL_OW 257
42311: PUSH
42312: LD_INT 9
42314: NONEQUAL
42315: OR
42316: IFFALSE 42320
// exit ;
42318: GO 42893
// side := GetSide ( unit ) ;
42320: LD_ADDR_VAR 0 9
42324: PUSH
42325: LD_VAR 0 1
42329: PPUSH
42330: CALL_OW 255
42334: ST_TO_ADDR
// tech_space := tech_spacanom ;
42335: LD_ADDR_VAR 0 12
42339: PUSH
42340: LD_INT 29
42342: ST_TO_ADDR
// tech_time := tech_taurad ;
42343: LD_ADDR_VAR 0 13
42347: PUSH
42348: LD_INT 28
42350: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42351: LD_ADDR_VAR 0 11
42355: PUSH
42356: LD_VAR 0 1
42360: PPUSH
42361: CALL_OW 310
42365: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42366: LD_VAR 0 11
42370: PPUSH
42371: CALL_OW 247
42375: PUSH
42376: LD_INT 2
42378: EQUAL
42379: IFFALSE 42383
// exit ;
42381: GO 42893
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42383: LD_ADDR_VAR 0 8
42387: PUSH
42388: LD_INT 81
42390: PUSH
42391: LD_VAR 0 9
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 3
42402: PUSH
42403: LD_INT 21
42405: PUSH
42406: LD_INT 3
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PPUSH
42421: CALL_OW 69
42425: ST_TO_ADDR
// if not tmp then
42426: LD_VAR 0 8
42430: NOT
42431: IFFALSE 42435
// exit ;
42433: GO 42893
// if in_unit then
42435: LD_VAR 0 11
42439: IFFALSE 42463
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42441: LD_ADDR_VAR 0 10
42445: PUSH
42446: LD_VAR 0 8
42450: PPUSH
42451: LD_VAR 0 11
42455: PPUSH
42456: CALL_OW 74
42460: ST_TO_ADDR
42461: GO 42483
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42463: LD_ADDR_VAR 0 10
42467: PUSH
42468: LD_VAR 0 8
42472: PPUSH
42473: LD_VAR 0 1
42477: PPUSH
42478: CALL_OW 74
42482: ST_TO_ADDR
// if not enemy then
42483: LD_VAR 0 10
42487: NOT
42488: IFFALSE 42492
// exit ;
42490: GO 42893
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42492: LD_VAR 0 11
42496: PUSH
42497: LD_VAR 0 11
42501: PPUSH
42502: LD_VAR 0 10
42506: PPUSH
42507: CALL_OW 296
42511: PUSH
42512: LD_INT 13
42514: GREATER
42515: AND
42516: PUSH
42517: LD_VAR 0 1
42521: PPUSH
42522: LD_VAR 0 10
42526: PPUSH
42527: CALL_OW 296
42531: PUSH
42532: LD_INT 12
42534: GREATER
42535: OR
42536: IFFALSE 42540
// exit ;
42538: GO 42893
// missile := [ 1 ] ;
42540: LD_ADDR_VAR 0 14
42544: PUSH
42545: LD_INT 1
42547: PUSH
42548: EMPTY
42549: LIST
42550: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42551: LD_VAR 0 9
42555: PPUSH
42556: LD_VAR 0 12
42560: PPUSH
42561: CALL_OW 325
42565: IFFALSE 42594
// missile := Insert ( missile , missile + 1 , 2 ) ;
42567: LD_ADDR_VAR 0 14
42571: PUSH
42572: LD_VAR 0 14
42576: PPUSH
42577: LD_VAR 0 14
42581: PUSH
42582: LD_INT 1
42584: PLUS
42585: PPUSH
42586: LD_INT 2
42588: PPUSH
42589: CALL_OW 2
42593: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42594: LD_VAR 0 9
42598: PPUSH
42599: LD_VAR 0 13
42603: PPUSH
42604: CALL_OW 325
42608: PUSH
42609: LD_VAR 0 10
42613: PPUSH
42614: CALL_OW 255
42618: PPUSH
42619: LD_VAR 0 13
42623: PPUSH
42624: CALL_OW 325
42628: NOT
42629: AND
42630: IFFALSE 42659
// missile := Insert ( missile , missile + 1 , 3 ) ;
42632: LD_ADDR_VAR 0 14
42636: PUSH
42637: LD_VAR 0 14
42641: PPUSH
42642: LD_VAR 0 14
42646: PUSH
42647: LD_INT 1
42649: PLUS
42650: PPUSH
42651: LD_INT 3
42653: PPUSH
42654: CALL_OW 2
42658: ST_TO_ADDR
// if missile < 2 then
42659: LD_VAR 0 14
42663: PUSH
42664: LD_INT 2
42666: LESS
42667: IFFALSE 42671
// exit ;
42669: GO 42893
// x := GetX ( enemy ) ;
42671: LD_ADDR_VAR 0 4
42675: PUSH
42676: LD_VAR 0 10
42680: PPUSH
42681: CALL_OW 250
42685: ST_TO_ADDR
// y := GetY ( enemy ) ;
42686: LD_ADDR_VAR 0 5
42690: PUSH
42691: LD_VAR 0 10
42695: PPUSH
42696: CALL_OW 251
42700: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42701: LD_ADDR_VAR 0 6
42705: PUSH
42706: LD_VAR 0 4
42710: PUSH
42711: LD_INT 1
42713: NEG
42714: PPUSH
42715: LD_INT 1
42717: PPUSH
42718: CALL_OW 12
42722: PLUS
42723: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42724: LD_ADDR_VAR 0 7
42728: PUSH
42729: LD_VAR 0 5
42733: PUSH
42734: LD_INT 1
42736: NEG
42737: PPUSH
42738: LD_INT 1
42740: PPUSH
42741: CALL_OW 12
42745: PLUS
42746: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42747: LD_VAR 0 6
42751: PPUSH
42752: LD_VAR 0 7
42756: PPUSH
42757: CALL_OW 488
42761: NOT
42762: IFFALSE 42784
// begin _x := x ;
42764: LD_ADDR_VAR 0 6
42768: PUSH
42769: LD_VAR 0 4
42773: ST_TO_ADDR
// _y := y ;
42774: LD_ADDR_VAR 0 7
42778: PUSH
42779: LD_VAR 0 5
42783: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42784: LD_ADDR_VAR 0 3
42788: PUSH
42789: LD_INT 1
42791: PPUSH
42792: LD_VAR 0 14
42796: PPUSH
42797: CALL_OW 12
42801: ST_TO_ADDR
// case i of 1 :
42802: LD_VAR 0 3
42806: PUSH
42807: LD_INT 1
42809: DOUBLE
42810: EQUAL
42811: IFTRUE 42815
42813: GO 42832
42815: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42816: LD_VAR 0 1
42820: PPUSH
42821: LD_VAR 0 10
42825: PPUSH
42826: CALL_OW 115
42830: GO 42893
42832: LD_INT 2
42834: DOUBLE
42835: EQUAL
42836: IFTRUE 42840
42838: GO 42862
42840: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42841: LD_VAR 0 1
42845: PPUSH
42846: LD_VAR 0 6
42850: PPUSH
42851: LD_VAR 0 7
42855: PPUSH
42856: CALL_OW 153
42860: GO 42893
42862: LD_INT 3
42864: DOUBLE
42865: EQUAL
42866: IFTRUE 42870
42868: GO 42892
42870: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42871: LD_VAR 0 1
42875: PPUSH
42876: LD_VAR 0 6
42880: PPUSH
42881: LD_VAR 0 7
42885: PPUSH
42886: CALL_OW 154
42890: GO 42893
42892: POP
// end ;
42893: LD_VAR 0 2
42897: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42898: LD_INT 0
42900: PPUSH
42901: PPUSH
42902: PPUSH
42903: PPUSH
42904: PPUSH
42905: PPUSH
// if not unit or not building then
42906: LD_VAR 0 1
42910: NOT
42911: PUSH
42912: LD_VAR 0 2
42916: NOT
42917: OR
42918: IFFALSE 42922
// exit ;
42920: GO 43080
// x := GetX ( building ) ;
42922: LD_ADDR_VAR 0 5
42926: PUSH
42927: LD_VAR 0 2
42931: PPUSH
42932: CALL_OW 250
42936: ST_TO_ADDR
// y := GetY ( building ) ;
42937: LD_ADDR_VAR 0 6
42941: PUSH
42942: LD_VAR 0 2
42946: PPUSH
42947: CALL_OW 251
42951: ST_TO_ADDR
// for i = 0 to 5 do
42952: LD_ADDR_VAR 0 4
42956: PUSH
42957: DOUBLE
42958: LD_INT 0
42960: DEC
42961: ST_TO_ADDR
42962: LD_INT 5
42964: PUSH
42965: FOR_TO
42966: IFFALSE 43078
// begin _x := ShiftX ( x , i , 3 ) ;
42968: LD_ADDR_VAR 0 7
42972: PUSH
42973: LD_VAR 0 5
42977: PPUSH
42978: LD_VAR 0 4
42982: PPUSH
42983: LD_INT 3
42985: PPUSH
42986: CALL_OW 272
42990: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42991: LD_ADDR_VAR 0 8
42995: PUSH
42996: LD_VAR 0 6
43000: PPUSH
43001: LD_VAR 0 4
43005: PPUSH
43006: LD_INT 3
43008: PPUSH
43009: CALL_OW 273
43013: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43014: LD_VAR 0 7
43018: PPUSH
43019: LD_VAR 0 8
43023: PPUSH
43024: CALL_OW 488
43028: NOT
43029: IFFALSE 43033
// continue ;
43031: GO 42965
// if HexInfo ( _x , _y ) = 0 then
43033: LD_VAR 0 7
43037: PPUSH
43038: LD_VAR 0 8
43042: PPUSH
43043: CALL_OW 428
43047: PUSH
43048: LD_INT 0
43050: EQUAL
43051: IFFALSE 43076
// begin ComMoveXY ( unit , _x , _y ) ;
43053: LD_VAR 0 1
43057: PPUSH
43058: LD_VAR 0 7
43062: PPUSH
43063: LD_VAR 0 8
43067: PPUSH
43068: CALL_OW 111
// exit ;
43072: POP
43073: POP
43074: GO 43080
// end ; end ;
43076: GO 42965
43078: POP
43079: POP
// end ;
43080: LD_VAR 0 3
43084: RET
// export function ScanBase ( side , base_area ) ; begin
43085: LD_INT 0
43087: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43088: LD_ADDR_VAR 0 3
43092: PUSH
43093: LD_VAR 0 2
43097: PPUSH
43098: LD_INT 81
43100: PUSH
43101: LD_VAR 0 1
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PPUSH
43110: CALL_OW 70
43114: ST_TO_ADDR
// end ;
43115: LD_VAR 0 3
43119: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43120: LD_INT 0
43122: PPUSH
43123: PPUSH
43124: PPUSH
43125: PPUSH
// result := false ;
43126: LD_ADDR_VAR 0 2
43130: PUSH
43131: LD_INT 0
43133: ST_TO_ADDR
// side := GetSide ( unit ) ;
43134: LD_ADDR_VAR 0 3
43138: PUSH
43139: LD_VAR 0 1
43143: PPUSH
43144: CALL_OW 255
43148: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43149: LD_ADDR_VAR 0 4
43153: PUSH
43154: LD_VAR 0 1
43158: PPUSH
43159: CALL_OW 248
43163: ST_TO_ADDR
// case nat of 1 :
43164: LD_VAR 0 4
43168: PUSH
43169: LD_INT 1
43171: DOUBLE
43172: EQUAL
43173: IFTRUE 43177
43175: GO 43188
43177: POP
// tech := tech_lassight ; 2 :
43178: LD_ADDR_VAR 0 5
43182: PUSH
43183: LD_INT 12
43185: ST_TO_ADDR
43186: GO 43227
43188: LD_INT 2
43190: DOUBLE
43191: EQUAL
43192: IFTRUE 43196
43194: GO 43207
43196: POP
// tech := tech_mortar ; 3 :
43197: LD_ADDR_VAR 0 5
43201: PUSH
43202: LD_INT 41
43204: ST_TO_ADDR
43205: GO 43227
43207: LD_INT 3
43209: DOUBLE
43210: EQUAL
43211: IFTRUE 43215
43213: GO 43226
43215: POP
// tech := tech_bazooka ; end ;
43216: LD_ADDR_VAR 0 5
43220: PUSH
43221: LD_INT 44
43223: ST_TO_ADDR
43224: GO 43227
43226: POP
// if Researched ( side , tech ) then
43227: LD_VAR 0 3
43231: PPUSH
43232: LD_VAR 0 5
43236: PPUSH
43237: CALL_OW 325
43241: IFFALSE 43268
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43243: LD_ADDR_VAR 0 2
43247: PUSH
43248: LD_INT 5
43250: PUSH
43251: LD_INT 8
43253: PUSH
43254: LD_INT 9
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: LIST
43261: PUSH
43262: LD_VAR 0 4
43266: ARRAY
43267: ST_TO_ADDR
// end ;
43268: LD_VAR 0 2
43272: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43273: LD_INT 0
43275: PPUSH
43276: PPUSH
43277: PPUSH
// if not mines then
43278: LD_VAR 0 2
43282: NOT
43283: IFFALSE 43287
// exit ;
43285: GO 43431
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43287: LD_ADDR_VAR 0 5
43291: PUSH
43292: LD_INT 81
43294: PUSH
43295: LD_VAR 0 1
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 3
43306: PUSH
43307: LD_INT 21
43309: PUSH
43310: LD_INT 3
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PPUSH
43325: CALL_OW 69
43329: ST_TO_ADDR
// for i in mines do
43330: LD_ADDR_VAR 0 4
43334: PUSH
43335: LD_VAR 0 2
43339: PUSH
43340: FOR_IN
43341: IFFALSE 43429
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43343: LD_VAR 0 4
43347: PUSH
43348: LD_INT 1
43350: ARRAY
43351: PPUSH
43352: LD_VAR 0 4
43356: PUSH
43357: LD_INT 2
43359: ARRAY
43360: PPUSH
43361: CALL_OW 458
43365: NOT
43366: IFFALSE 43370
// continue ;
43368: GO 43340
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43370: LD_VAR 0 4
43374: PUSH
43375: LD_INT 1
43377: ARRAY
43378: PPUSH
43379: LD_VAR 0 4
43383: PUSH
43384: LD_INT 2
43386: ARRAY
43387: PPUSH
43388: CALL_OW 428
43392: PUSH
43393: LD_VAR 0 5
43397: IN
43398: IFFALSE 43427
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43400: LD_VAR 0 4
43404: PUSH
43405: LD_INT 1
43407: ARRAY
43408: PPUSH
43409: LD_VAR 0 4
43413: PUSH
43414: LD_INT 2
43416: ARRAY
43417: PPUSH
43418: LD_VAR 0 1
43422: PPUSH
43423: CALL_OW 456
// end ;
43427: GO 43340
43429: POP
43430: POP
// end ;
43431: LD_VAR 0 3
43435: RET
// export function Count ( array ) ; var i ; begin
43436: LD_INT 0
43438: PPUSH
43439: PPUSH
// result := 0 ;
43440: LD_ADDR_VAR 0 2
43444: PUSH
43445: LD_INT 0
43447: ST_TO_ADDR
// for i in array do
43448: LD_ADDR_VAR 0 3
43452: PUSH
43453: LD_VAR 0 1
43457: PUSH
43458: FOR_IN
43459: IFFALSE 43483
// if i then
43461: LD_VAR 0 3
43465: IFFALSE 43481
// result := result + 1 ;
43467: LD_ADDR_VAR 0 2
43471: PUSH
43472: LD_VAR 0 2
43476: PUSH
43477: LD_INT 1
43479: PLUS
43480: ST_TO_ADDR
43481: GO 43458
43483: POP
43484: POP
// end ;
43485: LD_VAR 0 2
43489: RET
// export function IsEmpty ( building ) ; begin
43490: LD_INT 0
43492: PPUSH
// if not building then
43493: LD_VAR 0 1
43497: NOT
43498: IFFALSE 43502
// exit ;
43500: GO 43545
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43502: LD_ADDR_VAR 0 2
43506: PUSH
43507: LD_VAR 0 1
43511: PUSH
43512: LD_INT 22
43514: PUSH
43515: LD_VAR 0 1
43519: PPUSH
43520: CALL_OW 255
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 58
43531: PUSH
43532: EMPTY
43533: LIST
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PPUSH
43539: CALL_OW 69
43543: IN
43544: ST_TO_ADDR
// end ;
43545: LD_VAR 0 2
43549: RET
// export function IsNotFull ( building ) ; begin
43550: LD_INT 0
43552: PPUSH
// if not building then
43553: LD_VAR 0 1
43557: NOT
43558: IFFALSE 43562
// exit ;
43560: GO 43581
// result := UnitsInside ( building ) < 6 ;
43562: LD_ADDR_VAR 0 2
43566: PUSH
43567: LD_VAR 0 1
43571: PPUSH
43572: CALL_OW 313
43576: PUSH
43577: LD_INT 6
43579: LESS
43580: ST_TO_ADDR
// end ;
43581: LD_VAR 0 2
43585: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43586: LD_INT 0
43588: PPUSH
43589: PPUSH
43590: PPUSH
43591: PPUSH
// tmp := [ ] ;
43592: LD_ADDR_VAR 0 3
43596: PUSH
43597: EMPTY
43598: ST_TO_ADDR
// list := [ ] ;
43599: LD_ADDR_VAR 0 5
43603: PUSH
43604: EMPTY
43605: ST_TO_ADDR
// for i = 16 to 25 do
43606: LD_ADDR_VAR 0 4
43610: PUSH
43611: DOUBLE
43612: LD_INT 16
43614: DEC
43615: ST_TO_ADDR
43616: LD_INT 25
43618: PUSH
43619: FOR_TO
43620: IFFALSE 43693
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43622: LD_ADDR_VAR 0 3
43626: PUSH
43627: LD_VAR 0 3
43631: PUSH
43632: LD_INT 22
43634: PUSH
43635: LD_VAR 0 1
43639: PPUSH
43640: CALL_OW 255
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 91
43651: PUSH
43652: LD_VAR 0 1
43656: PUSH
43657: LD_INT 6
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 30
43667: PUSH
43668: LD_VAR 0 4
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: LIST
43681: PUSH
43682: EMPTY
43683: LIST
43684: PPUSH
43685: CALL_OW 69
43689: ADD
43690: ST_TO_ADDR
43691: GO 43619
43693: POP
43694: POP
// for i = 1 to tmp do
43695: LD_ADDR_VAR 0 4
43699: PUSH
43700: DOUBLE
43701: LD_INT 1
43703: DEC
43704: ST_TO_ADDR
43705: LD_VAR 0 3
43709: PUSH
43710: FOR_TO
43711: IFFALSE 43799
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43713: LD_ADDR_VAR 0 5
43717: PUSH
43718: LD_VAR 0 5
43722: PUSH
43723: LD_VAR 0 3
43727: PUSH
43728: LD_VAR 0 4
43732: ARRAY
43733: PPUSH
43734: CALL_OW 266
43738: PUSH
43739: LD_VAR 0 3
43743: PUSH
43744: LD_VAR 0 4
43748: ARRAY
43749: PPUSH
43750: CALL_OW 250
43754: PUSH
43755: LD_VAR 0 3
43759: PUSH
43760: LD_VAR 0 4
43764: ARRAY
43765: PPUSH
43766: CALL_OW 251
43770: PUSH
43771: LD_VAR 0 3
43775: PUSH
43776: LD_VAR 0 4
43780: ARRAY
43781: PPUSH
43782: CALL_OW 254
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: PUSH
43793: EMPTY
43794: LIST
43795: ADD
43796: ST_TO_ADDR
43797: GO 43710
43799: POP
43800: POP
// result := list ;
43801: LD_ADDR_VAR 0 2
43805: PUSH
43806: LD_VAR 0 5
43810: ST_TO_ADDR
// end ;
43811: LD_VAR 0 2
43815: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43816: LD_INT 0
43818: PPUSH
43819: PPUSH
43820: PPUSH
43821: PPUSH
43822: PPUSH
43823: PPUSH
43824: PPUSH
// if not factory then
43825: LD_VAR 0 1
43829: NOT
43830: IFFALSE 43834
// exit ;
43832: GO 44427
// if control = control_apeman then
43834: LD_VAR 0 4
43838: PUSH
43839: LD_INT 5
43841: EQUAL
43842: IFFALSE 43951
// begin tmp := UnitsInside ( factory ) ;
43844: LD_ADDR_VAR 0 8
43848: PUSH
43849: LD_VAR 0 1
43853: PPUSH
43854: CALL_OW 313
43858: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43859: LD_VAR 0 8
43863: PPUSH
43864: LD_INT 25
43866: PUSH
43867: LD_INT 12
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PPUSH
43874: CALL_OW 72
43878: NOT
43879: IFFALSE 43889
// control := control_manual ;
43881: LD_ADDR_VAR 0 4
43885: PUSH
43886: LD_INT 1
43888: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43889: LD_ADDR_VAR 0 8
43893: PUSH
43894: LD_VAR 0 1
43898: PPUSH
43899: CALL 43586 0 1
43903: ST_TO_ADDR
// if tmp then
43904: LD_VAR 0 8
43908: IFFALSE 43951
// begin for i in tmp do
43910: LD_ADDR_VAR 0 7
43914: PUSH
43915: LD_VAR 0 8
43919: PUSH
43920: FOR_IN
43921: IFFALSE 43949
// if i [ 1 ] = b_ext_radio then
43923: LD_VAR 0 7
43927: PUSH
43928: LD_INT 1
43930: ARRAY
43931: PUSH
43932: LD_INT 22
43934: EQUAL
43935: IFFALSE 43947
// begin control := control_remote ;
43937: LD_ADDR_VAR 0 4
43941: PUSH
43942: LD_INT 2
43944: ST_TO_ADDR
// break ;
43945: GO 43949
// end ;
43947: GO 43920
43949: POP
43950: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43951: LD_VAR 0 1
43955: PPUSH
43956: LD_VAR 0 2
43960: PPUSH
43961: LD_VAR 0 3
43965: PPUSH
43966: LD_VAR 0 4
43970: PPUSH
43971: LD_VAR 0 5
43975: PPUSH
43976: CALL_OW 448
43980: IFFALSE 44015
// begin result := [ chassis , engine , control , weapon ] ;
43982: LD_ADDR_VAR 0 6
43986: PUSH
43987: LD_VAR 0 2
43991: PUSH
43992: LD_VAR 0 3
43996: PUSH
43997: LD_VAR 0 4
44001: PUSH
44002: LD_VAR 0 5
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: ST_TO_ADDR
// exit ;
44013: GO 44427
// end ; _chassis := AvailableChassisList ( factory ) ;
44015: LD_ADDR_VAR 0 9
44019: PUSH
44020: LD_VAR 0 1
44024: PPUSH
44025: CALL_OW 475
44029: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44030: LD_ADDR_VAR 0 11
44034: PUSH
44035: LD_VAR 0 1
44039: PPUSH
44040: CALL_OW 476
44044: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44045: LD_ADDR_VAR 0 12
44049: PUSH
44050: LD_VAR 0 1
44054: PPUSH
44055: CALL_OW 477
44059: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44060: LD_ADDR_VAR 0 10
44064: PUSH
44065: LD_VAR 0 1
44069: PPUSH
44070: CALL_OW 478
44074: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44075: LD_VAR 0 9
44079: NOT
44080: PUSH
44081: LD_VAR 0 11
44085: NOT
44086: OR
44087: PUSH
44088: LD_VAR 0 12
44092: NOT
44093: OR
44094: PUSH
44095: LD_VAR 0 10
44099: NOT
44100: OR
44101: IFFALSE 44136
// begin result := [ chassis , engine , control , weapon ] ;
44103: LD_ADDR_VAR 0 6
44107: PUSH
44108: LD_VAR 0 2
44112: PUSH
44113: LD_VAR 0 3
44117: PUSH
44118: LD_VAR 0 4
44122: PUSH
44123: LD_VAR 0 5
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: ST_TO_ADDR
// exit ;
44134: GO 44427
// end ; if not chassis in _chassis then
44136: LD_VAR 0 2
44140: PUSH
44141: LD_VAR 0 9
44145: IN
44146: NOT
44147: IFFALSE 44173
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44149: LD_ADDR_VAR 0 2
44153: PUSH
44154: LD_VAR 0 9
44158: PUSH
44159: LD_INT 1
44161: PPUSH
44162: LD_VAR 0 9
44166: PPUSH
44167: CALL_OW 12
44171: ARRAY
44172: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44173: LD_VAR 0 2
44177: PPUSH
44178: LD_VAR 0 3
44182: PPUSH
44183: CALL 44432 0 2
44187: NOT
44188: IFFALSE 44247
// repeat engine := _engine [ 1 ] ;
44190: LD_ADDR_VAR 0 3
44194: PUSH
44195: LD_VAR 0 11
44199: PUSH
44200: LD_INT 1
44202: ARRAY
44203: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44204: LD_ADDR_VAR 0 11
44208: PUSH
44209: LD_VAR 0 11
44213: PPUSH
44214: LD_INT 1
44216: PPUSH
44217: CALL_OW 3
44221: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44222: LD_VAR 0 2
44226: PPUSH
44227: LD_VAR 0 3
44231: PPUSH
44232: CALL 44432 0 2
44236: PUSH
44237: LD_VAR 0 11
44241: PUSH
44242: EMPTY
44243: EQUAL
44244: OR
44245: IFFALSE 44190
// if not control in _control then
44247: LD_VAR 0 4
44251: PUSH
44252: LD_VAR 0 12
44256: IN
44257: NOT
44258: IFFALSE 44284
// control := _control [ rand ( 1 , _control ) ] ;
44260: LD_ADDR_VAR 0 4
44264: PUSH
44265: LD_VAR 0 12
44269: PUSH
44270: LD_INT 1
44272: PPUSH
44273: LD_VAR 0 12
44277: PPUSH
44278: CALL_OW 12
44282: ARRAY
44283: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44284: LD_VAR 0 2
44288: PPUSH
44289: LD_VAR 0 5
44293: PPUSH
44294: CALL 44652 0 2
44298: NOT
44299: IFFALSE 44358
// repeat weapon := _weapon [ 1 ] ;
44301: LD_ADDR_VAR 0 5
44305: PUSH
44306: LD_VAR 0 10
44310: PUSH
44311: LD_INT 1
44313: ARRAY
44314: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44315: LD_ADDR_VAR 0 10
44319: PUSH
44320: LD_VAR 0 10
44324: PPUSH
44325: LD_INT 1
44327: PPUSH
44328: CALL_OW 3
44332: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44333: LD_VAR 0 2
44337: PPUSH
44338: LD_VAR 0 5
44342: PPUSH
44343: CALL 44652 0 2
44347: PUSH
44348: LD_VAR 0 10
44352: PUSH
44353: EMPTY
44354: EQUAL
44355: OR
44356: IFFALSE 44301
// result := [ ] ;
44358: LD_ADDR_VAR 0 6
44362: PUSH
44363: EMPTY
44364: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44365: LD_VAR 0 1
44369: PPUSH
44370: LD_VAR 0 2
44374: PPUSH
44375: LD_VAR 0 3
44379: PPUSH
44380: LD_VAR 0 4
44384: PPUSH
44385: LD_VAR 0 5
44389: PPUSH
44390: CALL_OW 448
44394: IFFALSE 44427
// result := [ chassis , engine , control , weapon ] ;
44396: LD_ADDR_VAR 0 6
44400: PUSH
44401: LD_VAR 0 2
44405: PUSH
44406: LD_VAR 0 3
44410: PUSH
44411: LD_VAR 0 4
44415: PUSH
44416: LD_VAR 0 5
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: ST_TO_ADDR
// end ;
44427: LD_VAR 0 6
44431: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44432: LD_INT 0
44434: PPUSH
// if not chassis or not engine then
44435: LD_VAR 0 1
44439: NOT
44440: PUSH
44441: LD_VAR 0 2
44445: NOT
44446: OR
44447: IFFALSE 44451
// exit ;
44449: GO 44647
// case engine of engine_solar :
44451: LD_VAR 0 2
44455: PUSH
44456: LD_INT 2
44458: DOUBLE
44459: EQUAL
44460: IFTRUE 44464
44462: GO 44502
44464: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44465: LD_ADDR_VAR 0 3
44469: PUSH
44470: LD_INT 11
44472: PUSH
44473: LD_INT 12
44475: PUSH
44476: LD_INT 13
44478: PUSH
44479: LD_INT 14
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: LD_INT 2
44487: PUSH
44488: LD_INT 3
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: ST_TO_ADDR
44500: GO 44631
44502: LD_INT 1
44504: DOUBLE
44505: EQUAL
44506: IFTRUE 44510
44508: GO 44572
44510: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44511: LD_ADDR_VAR 0 3
44515: PUSH
44516: LD_INT 11
44518: PUSH
44519: LD_INT 12
44521: PUSH
44522: LD_INT 13
44524: PUSH
44525: LD_INT 14
44527: PUSH
44528: LD_INT 1
44530: PUSH
44531: LD_INT 2
44533: PUSH
44534: LD_INT 3
44536: PUSH
44537: LD_INT 4
44539: PUSH
44540: LD_INT 5
44542: PUSH
44543: LD_INT 21
44545: PUSH
44546: LD_INT 23
44548: PUSH
44549: LD_INT 22
44551: PUSH
44552: LD_INT 24
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: ST_TO_ADDR
44570: GO 44631
44572: LD_INT 3
44574: DOUBLE
44575: EQUAL
44576: IFTRUE 44580
44578: GO 44630
44580: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44581: LD_ADDR_VAR 0 3
44585: PUSH
44586: LD_INT 13
44588: PUSH
44589: LD_INT 14
44591: PUSH
44592: LD_INT 2
44594: PUSH
44595: LD_INT 3
44597: PUSH
44598: LD_INT 4
44600: PUSH
44601: LD_INT 5
44603: PUSH
44604: LD_INT 21
44606: PUSH
44607: LD_INT 22
44609: PUSH
44610: LD_INT 23
44612: PUSH
44613: LD_INT 24
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: ST_TO_ADDR
44628: GO 44631
44630: POP
// result := ( chassis in result ) ;
44631: LD_ADDR_VAR 0 3
44635: PUSH
44636: LD_VAR 0 1
44640: PUSH
44641: LD_VAR 0 3
44645: IN
44646: ST_TO_ADDR
// end ;
44647: LD_VAR 0 3
44651: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44652: LD_INT 0
44654: PPUSH
// if not chassis or not weapon then
44655: LD_VAR 0 1
44659: NOT
44660: PUSH
44661: LD_VAR 0 2
44665: NOT
44666: OR
44667: IFFALSE 44671
// exit ;
44669: GO 45697
// case weapon of us_machine_gun :
44671: LD_VAR 0 2
44675: PUSH
44676: LD_INT 2
44678: DOUBLE
44679: EQUAL
44680: IFTRUE 44684
44682: GO 44714
44684: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44685: LD_ADDR_VAR 0 3
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: LD_INT 2
44695: PUSH
44696: LD_INT 3
44698: PUSH
44699: LD_INT 4
44701: PUSH
44702: LD_INT 5
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: ST_TO_ADDR
44712: GO 45681
44714: LD_INT 3
44716: DOUBLE
44717: EQUAL
44718: IFTRUE 44722
44720: GO 44752
44722: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44723: LD_ADDR_VAR 0 3
44727: PUSH
44728: LD_INT 1
44730: PUSH
44731: LD_INT 2
44733: PUSH
44734: LD_INT 3
44736: PUSH
44737: LD_INT 4
44739: PUSH
44740: LD_INT 5
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: ST_TO_ADDR
44750: GO 45681
44752: LD_INT 11
44754: DOUBLE
44755: EQUAL
44756: IFTRUE 44760
44758: GO 44790
44760: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44761: LD_ADDR_VAR 0 3
44765: PUSH
44766: LD_INT 1
44768: PUSH
44769: LD_INT 2
44771: PUSH
44772: LD_INT 3
44774: PUSH
44775: LD_INT 4
44777: PUSH
44778: LD_INT 5
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: ST_TO_ADDR
44788: GO 45681
44790: LD_INT 4
44792: DOUBLE
44793: EQUAL
44794: IFTRUE 44798
44796: GO 44824
44798: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44799: LD_ADDR_VAR 0 3
44803: PUSH
44804: LD_INT 2
44806: PUSH
44807: LD_INT 3
44809: PUSH
44810: LD_INT 4
44812: PUSH
44813: LD_INT 5
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: ST_TO_ADDR
44822: GO 45681
44824: LD_INT 5
44826: DOUBLE
44827: EQUAL
44828: IFTRUE 44832
44830: GO 44858
44832: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44833: LD_ADDR_VAR 0 3
44837: PUSH
44838: LD_INT 2
44840: PUSH
44841: LD_INT 3
44843: PUSH
44844: LD_INT 4
44846: PUSH
44847: LD_INT 5
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: ST_TO_ADDR
44856: GO 45681
44858: LD_INT 9
44860: DOUBLE
44861: EQUAL
44862: IFTRUE 44866
44864: GO 44892
44866: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44867: LD_ADDR_VAR 0 3
44871: PUSH
44872: LD_INT 2
44874: PUSH
44875: LD_INT 3
44877: PUSH
44878: LD_INT 4
44880: PUSH
44881: LD_INT 5
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: ST_TO_ADDR
44890: GO 45681
44892: LD_INT 7
44894: DOUBLE
44895: EQUAL
44896: IFTRUE 44900
44898: GO 44926
44900: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44901: LD_ADDR_VAR 0 3
44905: PUSH
44906: LD_INT 2
44908: PUSH
44909: LD_INT 3
44911: PUSH
44912: LD_INT 4
44914: PUSH
44915: LD_INT 5
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: ST_TO_ADDR
44924: GO 45681
44926: LD_INT 12
44928: DOUBLE
44929: EQUAL
44930: IFTRUE 44934
44932: GO 44960
44934: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44935: LD_ADDR_VAR 0 3
44939: PUSH
44940: LD_INT 2
44942: PUSH
44943: LD_INT 3
44945: PUSH
44946: LD_INT 4
44948: PUSH
44949: LD_INT 5
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: ST_TO_ADDR
44958: GO 45681
44960: LD_INT 13
44962: DOUBLE
44963: EQUAL
44964: IFTRUE 44968
44966: GO 44994
44968: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44969: LD_ADDR_VAR 0 3
44973: PUSH
44974: LD_INT 2
44976: PUSH
44977: LD_INT 3
44979: PUSH
44980: LD_INT 4
44982: PUSH
44983: LD_INT 5
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: ST_TO_ADDR
44992: GO 45681
44994: LD_INT 14
44996: DOUBLE
44997: EQUAL
44998: IFTRUE 45002
45000: GO 45020
45002: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45003: LD_ADDR_VAR 0 3
45007: PUSH
45008: LD_INT 4
45010: PUSH
45011: LD_INT 5
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: ST_TO_ADDR
45018: GO 45681
45020: LD_INT 6
45022: DOUBLE
45023: EQUAL
45024: IFTRUE 45028
45026: GO 45046
45028: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45029: LD_ADDR_VAR 0 3
45033: PUSH
45034: LD_INT 4
45036: PUSH
45037: LD_INT 5
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: ST_TO_ADDR
45044: GO 45681
45046: LD_INT 10
45048: DOUBLE
45049: EQUAL
45050: IFTRUE 45054
45052: GO 45072
45054: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45055: LD_ADDR_VAR 0 3
45059: PUSH
45060: LD_INT 4
45062: PUSH
45063: LD_INT 5
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: ST_TO_ADDR
45070: GO 45681
45072: LD_INT 22
45074: DOUBLE
45075: EQUAL
45076: IFTRUE 45080
45078: GO 45106
45080: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45081: LD_ADDR_VAR 0 3
45085: PUSH
45086: LD_INT 11
45088: PUSH
45089: LD_INT 12
45091: PUSH
45092: LD_INT 13
45094: PUSH
45095: LD_INT 14
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: ST_TO_ADDR
45104: GO 45681
45106: LD_INT 23
45108: DOUBLE
45109: EQUAL
45110: IFTRUE 45114
45112: GO 45140
45114: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45115: LD_ADDR_VAR 0 3
45119: PUSH
45120: LD_INT 11
45122: PUSH
45123: LD_INT 12
45125: PUSH
45126: LD_INT 13
45128: PUSH
45129: LD_INT 14
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: ST_TO_ADDR
45138: GO 45681
45140: LD_INT 24
45142: DOUBLE
45143: EQUAL
45144: IFTRUE 45148
45146: GO 45174
45148: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45149: LD_ADDR_VAR 0 3
45153: PUSH
45154: LD_INT 11
45156: PUSH
45157: LD_INT 12
45159: PUSH
45160: LD_INT 13
45162: PUSH
45163: LD_INT 14
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: ST_TO_ADDR
45172: GO 45681
45174: LD_INT 30
45176: DOUBLE
45177: EQUAL
45178: IFTRUE 45182
45180: GO 45208
45182: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45183: LD_ADDR_VAR 0 3
45187: PUSH
45188: LD_INT 11
45190: PUSH
45191: LD_INT 12
45193: PUSH
45194: LD_INT 13
45196: PUSH
45197: LD_INT 14
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: ST_TO_ADDR
45206: GO 45681
45208: LD_INT 25
45210: DOUBLE
45211: EQUAL
45212: IFTRUE 45216
45214: GO 45234
45216: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45217: LD_ADDR_VAR 0 3
45221: PUSH
45222: LD_INT 13
45224: PUSH
45225: LD_INT 14
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: ST_TO_ADDR
45232: GO 45681
45234: LD_INT 27
45236: DOUBLE
45237: EQUAL
45238: IFTRUE 45242
45240: GO 45260
45242: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45243: LD_ADDR_VAR 0 3
45247: PUSH
45248: LD_INT 13
45250: PUSH
45251: LD_INT 14
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: ST_TO_ADDR
45258: GO 45681
45260: LD_INT 28
45262: DOUBLE
45263: EQUAL
45264: IFTRUE 45268
45266: GO 45286
45268: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45269: LD_ADDR_VAR 0 3
45273: PUSH
45274: LD_INT 13
45276: PUSH
45277: LD_INT 14
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: ST_TO_ADDR
45284: GO 45681
45286: LD_INT 29
45288: DOUBLE
45289: EQUAL
45290: IFTRUE 45294
45292: GO 45312
45294: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45295: LD_ADDR_VAR 0 3
45299: PUSH
45300: LD_INT 13
45302: PUSH
45303: LD_INT 14
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: ST_TO_ADDR
45310: GO 45681
45312: LD_INT 31
45314: DOUBLE
45315: EQUAL
45316: IFTRUE 45320
45318: GO 45338
45320: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45321: LD_ADDR_VAR 0 3
45325: PUSH
45326: LD_INT 13
45328: PUSH
45329: LD_INT 14
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: ST_TO_ADDR
45336: GO 45681
45338: LD_INT 26
45340: DOUBLE
45341: EQUAL
45342: IFTRUE 45346
45344: GO 45364
45346: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45347: LD_ADDR_VAR 0 3
45351: PUSH
45352: LD_INT 13
45354: PUSH
45355: LD_INT 14
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: ST_TO_ADDR
45362: GO 45681
45364: LD_INT 42
45366: DOUBLE
45367: EQUAL
45368: IFTRUE 45372
45370: GO 45398
45372: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45373: LD_ADDR_VAR 0 3
45377: PUSH
45378: LD_INT 21
45380: PUSH
45381: LD_INT 22
45383: PUSH
45384: LD_INT 23
45386: PUSH
45387: LD_INT 24
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: ST_TO_ADDR
45396: GO 45681
45398: LD_INT 43
45400: DOUBLE
45401: EQUAL
45402: IFTRUE 45406
45404: GO 45432
45406: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45407: LD_ADDR_VAR 0 3
45411: PUSH
45412: LD_INT 21
45414: PUSH
45415: LD_INT 22
45417: PUSH
45418: LD_INT 23
45420: PUSH
45421: LD_INT 24
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: ST_TO_ADDR
45430: GO 45681
45432: LD_INT 44
45434: DOUBLE
45435: EQUAL
45436: IFTRUE 45440
45438: GO 45466
45440: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45441: LD_ADDR_VAR 0 3
45445: PUSH
45446: LD_INT 21
45448: PUSH
45449: LD_INT 22
45451: PUSH
45452: LD_INT 23
45454: PUSH
45455: LD_INT 24
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: ST_TO_ADDR
45464: GO 45681
45466: LD_INT 45
45468: DOUBLE
45469: EQUAL
45470: IFTRUE 45474
45472: GO 45500
45474: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45475: LD_ADDR_VAR 0 3
45479: PUSH
45480: LD_INT 21
45482: PUSH
45483: LD_INT 22
45485: PUSH
45486: LD_INT 23
45488: PUSH
45489: LD_INT 24
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: ST_TO_ADDR
45498: GO 45681
45500: LD_INT 49
45502: DOUBLE
45503: EQUAL
45504: IFTRUE 45508
45506: GO 45534
45508: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45509: LD_ADDR_VAR 0 3
45513: PUSH
45514: LD_INT 21
45516: PUSH
45517: LD_INT 22
45519: PUSH
45520: LD_INT 23
45522: PUSH
45523: LD_INT 24
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: ST_TO_ADDR
45532: GO 45681
45534: LD_INT 51
45536: DOUBLE
45537: EQUAL
45538: IFTRUE 45542
45540: GO 45568
45542: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45543: LD_ADDR_VAR 0 3
45547: PUSH
45548: LD_INT 21
45550: PUSH
45551: LD_INT 22
45553: PUSH
45554: LD_INT 23
45556: PUSH
45557: LD_INT 24
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: ST_TO_ADDR
45566: GO 45681
45568: LD_INT 52
45570: DOUBLE
45571: EQUAL
45572: IFTRUE 45576
45574: GO 45602
45576: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45577: LD_ADDR_VAR 0 3
45581: PUSH
45582: LD_INT 21
45584: PUSH
45585: LD_INT 22
45587: PUSH
45588: LD_INT 23
45590: PUSH
45591: LD_INT 24
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: ST_TO_ADDR
45600: GO 45681
45602: LD_INT 53
45604: DOUBLE
45605: EQUAL
45606: IFTRUE 45610
45608: GO 45628
45610: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45611: LD_ADDR_VAR 0 3
45615: PUSH
45616: LD_INT 23
45618: PUSH
45619: LD_INT 24
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: ST_TO_ADDR
45626: GO 45681
45628: LD_INT 46
45630: DOUBLE
45631: EQUAL
45632: IFTRUE 45636
45634: GO 45654
45636: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45637: LD_ADDR_VAR 0 3
45641: PUSH
45642: LD_INT 23
45644: PUSH
45645: LD_INT 24
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: ST_TO_ADDR
45652: GO 45681
45654: LD_INT 47
45656: DOUBLE
45657: EQUAL
45658: IFTRUE 45662
45660: GO 45680
45662: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45663: LD_ADDR_VAR 0 3
45667: PUSH
45668: LD_INT 23
45670: PUSH
45671: LD_INT 24
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: ST_TO_ADDR
45678: GO 45681
45680: POP
// result := ( chassis in result ) ;
45681: LD_ADDR_VAR 0 3
45685: PUSH
45686: LD_VAR 0 1
45690: PUSH
45691: LD_VAR 0 3
45695: IN
45696: ST_TO_ADDR
// end ;
45697: LD_VAR 0 3
45701: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45702: LD_INT 0
45704: PPUSH
45705: PPUSH
45706: PPUSH
45707: PPUSH
45708: PPUSH
45709: PPUSH
45710: PPUSH
// result := array ;
45711: LD_ADDR_VAR 0 5
45715: PUSH
45716: LD_VAR 0 1
45720: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45721: LD_VAR 0 1
45725: NOT
45726: PUSH
45727: LD_VAR 0 2
45731: NOT
45732: OR
45733: PUSH
45734: LD_VAR 0 3
45738: NOT
45739: OR
45740: PUSH
45741: LD_VAR 0 2
45745: PUSH
45746: LD_VAR 0 1
45750: GREATER
45751: OR
45752: PUSH
45753: LD_VAR 0 3
45757: PUSH
45758: LD_VAR 0 1
45762: GREATER
45763: OR
45764: IFFALSE 45768
// exit ;
45766: GO 46064
// if direction then
45768: LD_VAR 0 4
45772: IFFALSE 45836
// begin d := 1 ;
45774: LD_ADDR_VAR 0 9
45778: PUSH
45779: LD_INT 1
45781: ST_TO_ADDR
// if i_from > i_to then
45782: LD_VAR 0 2
45786: PUSH
45787: LD_VAR 0 3
45791: GREATER
45792: IFFALSE 45818
// length := ( array - i_from ) + i_to else
45794: LD_ADDR_VAR 0 11
45798: PUSH
45799: LD_VAR 0 1
45803: PUSH
45804: LD_VAR 0 2
45808: MINUS
45809: PUSH
45810: LD_VAR 0 3
45814: PLUS
45815: ST_TO_ADDR
45816: GO 45834
// length := i_to - i_from ;
45818: LD_ADDR_VAR 0 11
45822: PUSH
45823: LD_VAR 0 3
45827: PUSH
45828: LD_VAR 0 2
45832: MINUS
45833: ST_TO_ADDR
// end else
45834: GO 45897
// begin d := - 1 ;
45836: LD_ADDR_VAR 0 9
45840: PUSH
45841: LD_INT 1
45843: NEG
45844: ST_TO_ADDR
// if i_from > i_to then
45845: LD_VAR 0 2
45849: PUSH
45850: LD_VAR 0 3
45854: GREATER
45855: IFFALSE 45875
// length := i_from - i_to else
45857: LD_ADDR_VAR 0 11
45861: PUSH
45862: LD_VAR 0 2
45866: PUSH
45867: LD_VAR 0 3
45871: MINUS
45872: ST_TO_ADDR
45873: GO 45897
// length := ( array - i_to ) + i_from ;
45875: LD_ADDR_VAR 0 11
45879: PUSH
45880: LD_VAR 0 1
45884: PUSH
45885: LD_VAR 0 3
45889: MINUS
45890: PUSH
45891: LD_VAR 0 2
45895: PLUS
45896: ST_TO_ADDR
// end ; if not length then
45897: LD_VAR 0 11
45901: NOT
45902: IFFALSE 45906
// exit ;
45904: GO 46064
// tmp := array ;
45906: LD_ADDR_VAR 0 10
45910: PUSH
45911: LD_VAR 0 1
45915: ST_TO_ADDR
// for i = 1 to length do
45916: LD_ADDR_VAR 0 6
45920: PUSH
45921: DOUBLE
45922: LD_INT 1
45924: DEC
45925: ST_TO_ADDR
45926: LD_VAR 0 11
45930: PUSH
45931: FOR_TO
45932: IFFALSE 46052
// begin for j = 1 to array do
45934: LD_ADDR_VAR 0 7
45938: PUSH
45939: DOUBLE
45940: LD_INT 1
45942: DEC
45943: ST_TO_ADDR
45944: LD_VAR 0 1
45948: PUSH
45949: FOR_TO
45950: IFFALSE 46038
// begin k := j + d ;
45952: LD_ADDR_VAR 0 8
45956: PUSH
45957: LD_VAR 0 7
45961: PUSH
45962: LD_VAR 0 9
45966: PLUS
45967: ST_TO_ADDR
// if k > array then
45968: LD_VAR 0 8
45972: PUSH
45973: LD_VAR 0 1
45977: GREATER
45978: IFFALSE 45988
// k := 1 ;
45980: LD_ADDR_VAR 0 8
45984: PUSH
45985: LD_INT 1
45987: ST_TO_ADDR
// if not k then
45988: LD_VAR 0 8
45992: NOT
45993: IFFALSE 46005
// k := array ;
45995: LD_ADDR_VAR 0 8
45999: PUSH
46000: LD_VAR 0 1
46004: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46005: LD_ADDR_VAR 0 10
46009: PUSH
46010: LD_VAR 0 10
46014: PPUSH
46015: LD_VAR 0 8
46019: PPUSH
46020: LD_VAR 0 1
46024: PUSH
46025: LD_VAR 0 7
46029: ARRAY
46030: PPUSH
46031: CALL_OW 1
46035: ST_TO_ADDR
// end ;
46036: GO 45949
46038: POP
46039: POP
// array := tmp ;
46040: LD_ADDR_VAR 0 1
46044: PUSH
46045: LD_VAR 0 10
46049: ST_TO_ADDR
// end ;
46050: GO 45931
46052: POP
46053: POP
// result := array ;
46054: LD_ADDR_VAR 0 5
46058: PUSH
46059: LD_VAR 0 1
46063: ST_TO_ADDR
// end ;
46064: LD_VAR 0 5
46068: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46069: LD_INT 0
46071: PPUSH
46072: PPUSH
// result := 0 ;
46073: LD_ADDR_VAR 0 3
46077: PUSH
46078: LD_INT 0
46080: ST_TO_ADDR
// if not array or not value in array then
46081: LD_VAR 0 1
46085: NOT
46086: PUSH
46087: LD_VAR 0 2
46091: PUSH
46092: LD_VAR 0 1
46096: IN
46097: NOT
46098: OR
46099: IFFALSE 46103
// exit ;
46101: GO 46157
// for i = 1 to array do
46103: LD_ADDR_VAR 0 4
46107: PUSH
46108: DOUBLE
46109: LD_INT 1
46111: DEC
46112: ST_TO_ADDR
46113: LD_VAR 0 1
46117: PUSH
46118: FOR_TO
46119: IFFALSE 46155
// if value = array [ i ] then
46121: LD_VAR 0 2
46125: PUSH
46126: LD_VAR 0 1
46130: PUSH
46131: LD_VAR 0 4
46135: ARRAY
46136: EQUAL
46137: IFFALSE 46153
// begin result := i ;
46139: LD_ADDR_VAR 0 3
46143: PUSH
46144: LD_VAR 0 4
46148: ST_TO_ADDR
// exit ;
46149: POP
46150: POP
46151: GO 46157
// end ;
46153: GO 46118
46155: POP
46156: POP
// end ;
46157: LD_VAR 0 3
46161: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46162: LD_INT 0
46164: PPUSH
// vc_chassis := chassis ;
46165: LD_ADDR_OWVAR 37
46169: PUSH
46170: LD_VAR 0 1
46174: ST_TO_ADDR
// vc_engine := engine ;
46175: LD_ADDR_OWVAR 39
46179: PUSH
46180: LD_VAR 0 2
46184: ST_TO_ADDR
// vc_control := control ;
46185: LD_ADDR_OWVAR 38
46189: PUSH
46190: LD_VAR 0 3
46194: ST_TO_ADDR
// vc_weapon := weapon ;
46195: LD_ADDR_OWVAR 40
46199: PUSH
46200: LD_VAR 0 4
46204: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46205: LD_ADDR_OWVAR 41
46209: PUSH
46210: LD_VAR 0 5
46214: ST_TO_ADDR
// end ;
46215: LD_VAR 0 6
46219: RET
// export function WantPlant ( unit ) ; var task ; begin
46220: LD_INT 0
46222: PPUSH
46223: PPUSH
// result := false ;
46224: LD_ADDR_VAR 0 2
46228: PUSH
46229: LD_INT 0
46231: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46232: LD_ADDR_VAR 0 3
46236: PUSH
46237: LD_VAR 0 1
46241: PPUSH
46242: CALL_OW 437
46246: ST_TO_ADDR
// if task then
46247: LD_VAR 0 3
46251: IFFALSE 46279
// if task [ 1 ] [ 1 ] = p then
46253: LD_VAR 0 3
46257: PUSH
46258: LD_INT 1
46260: ARRAY
46261: PUSH
46262: LD_INT 1
46264: ARRAY
46265: PUSH
46266: LD_STRING p
46268: EQUAL
46269: IFFALSE 46279
// result := true ;
46271: LD_ADDR_VAR 0 2
46275: PUSH
46276: LD_INT 1
46278: ST_TO_ADDR
// end ;
46279: LD_VAR 0 2
46283: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46284: LD_INT 0
46286: PPUSH
46287: PPUSH
46288: PPUSH
46289: PPUSH
// if pos < 1 then
46290: LD_VAR 0 2
46294: PUSH
46295: LD_INT 1
46297: LESS
46298: IFFALSE 46302
// exit ;
46300: GO 46605
// if pos = 1 then
46302: LD_VAR 0 2
46306: PUSH
46307: LD_INT 1
46309: EQUAL
46310: IFFALSE 46343
// result := Replace ( arr , pos [ 1 ] , value ) else
46312: LD_ADDR_VAR 0 4
46316: PUSH
46317: LD_VAR 0 1
46321: PPUSH
46322: LD_VAR 0 2
46326: PUSH
46327: LD_INT 1
46329: ARRAY
46330: PPUSH
46331: LD_VAR 0 3
46335: PPUSH
46336: CALL_OW 1
46340: ST_TO_ADDR
46341: GO 46605
// begin tmp := arr ;
46343: LD_ADDR_VAR 0 6
46347: PUSH
46348: LD_VAR 0 1
46352: ST_TO_ADDR
// s_arr := [ tmp ] ;
46353: LD_ADDR_VAR 0 7
46357: PUSH
46358: LD_VAR 0 6
46362: PUSH
46363: EMPTY
46364: LIST
46365: ST_TO_ADDR
// for i = 1 to pos - 1 do
46366: LD_ADDR_VAR 0 5
46370: PUSH
46371: DOUBLE
46372: LD_INT 1
46374: DEC
46375: ST_TO_ADDR
46376: LD_VAR 0 2
46380: PUSH
46381: LD_INT 1
46383: MINUS
46384: PUSH
46385: FOR_TO
46386: IFFALSE 46431
// begin tmp := tmp [ pos [ i ] ] ;
46388: LD_ADDR_VAR 0 6
46392: PUSH
46393: LD_VAR 0 6
46397: PUSH
46398: LD_VAR 0 2
46402: PUSH
46403: LD_VAR 0 5
46407: ARRAY
46408: ARRAY
46409: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46410: LD_ADDR_VAR 0 7
46414: PUSH
46415: LD_VAR 0 7
46419: PUSH
46420: LD_VAR 0 6
46424: PUSH
46425: EMPTY
46426: LIST
46427: ADD
46428: ST_TO_ADDR
// end ;
46429: GO 46385
46431: POP
46432: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46433: LD_ADDR_VAR 0 6
46437: PUSH
46438: LD_VAR 0 6
46442: PPUSH
46443: LD_VAR 0 2
46447: PUSH
46448: LD_VAR 0 2
46452: ARRAY
46453: PPUSH
46454: LD_VAR 0 3
46458: PPUSH
46459: CALL_OW 1
46463: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46464: LD_ADDR_VAR 0 7
46468: PUSH
46469: LD_VAR 0 7
46473: PPUSH
46474: LD_VAR 0 7
46478: PPUSH
46479: LD_VAR 0 6
46483: PPUSH
46484: CALL_OW 1
46488: ST_TO_ADDR
// for i = s_arr downto 2 do
46489: LD_ADDR_VAR 0 5
46493: PUSH
46494: DOUBLE
46495: LD_VAR 0 7
46499: INC
46500: ST_TO_ADDR
46501: LD_INT 2
46503: PUSH
46504: FOR_DOWNTO
46505: IFFALSE 46589
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46507: LD_ADDR_VAR 0 6
46511: PUSH
46512: LD_VAR 0 7
46516: PUSH
46517: LD_VAR 0 5
46521: PUSH
46522: LD_INT 1
46524: MINUS
46525: ARRAY
46526: PPUSH
46527: LD_VAR 0 2
46531: PUSH
46532: LD_VAR 0 5
46536: PUSH
46537: LD_INT 1
46539: MINUS
46540: ARRAY
46541: PPUSH
46542: LD_VAR 0 7
46546: PUSH
46547: LD_VAR 0 5
46551: ARRAY
46552: PPUSH
46553: CALL_OW 1
46557: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46558: LD_ADDR_VAR 0 7
46562: PUSH
46563: LD_VAR 0 7
46567: PPUSH
46568: LD_VAR 0 5
46572: PUSH
46573: LD_INT 1
46575: MINUS
46576: PPUSH
46577: LD_VAR 0 6
46581: PPUSH
46582: CALL_OW 1
46586: ST_TO_ADDR
// end ;
46587: GO 46504
46589: POP
46590: POP
// result := s_arr [ 1 ] ;
46591: LD_ADDR_VAR 0 4
46595: PUSH
46596: LD_VAR 0 7
46600: PUSH
46601: LD_INT 1
46603: ARRAY
46604: ST_TO_ADDR
// end ; end ;
46605: LD_VAR 0 4
46609: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46610: LD_INT 0
46612: PPUSH
46613: PPUSH
// if not list then
46614: LD_VAR 0 1
46618: NOT
46619: IFFALSE 46623
// exit ;
46621: GO 46714
// i := list [ pos1 ] ;
46623: LD_ADDR_VAR 0 5
46627: PUSH
46628: LD_VAR 0 1
46632: PUSH
46633: LD_VAR 0 2
46637: ARRAY
46638: ST_TO_ADDR
// if not i then
46639: LD_VAR 0 5
46643: NOT
46644: IFFALSE 46648
// exit ;
46646: GO 46714
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46648: LD_ADDR_VAR 0 1
46652: PUSH
46653: LD_VAR 0 1
46657: PPUSH
46658: LD_VAR 0 2
46662: PPUSH
46663: LD_VAR 0 1
46667: PUSH
46668: LD_VAR 0 3
46672: ARRAY
46673: PPUSH
46674: CALL_OW 1
46678: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46679: LD_ADDR_VAR 0 1
46683: PUSH
46684: LD_VAR 0 1
46688: PPUSH
46689: LD_VAR 0 3
46693: PPUSH
46694: LD_VAR 0 5
46698: PPUSH
46699: CALL_OW 1
46703: ST_TO_ADDR
// result := list ;
46704: LD_ADDR_VAR 0 4
46708: PUSH
46709: LD_VAR 0 1
46713: ST_TO_ADDR
// end ;
46714: LD_VAR 0 4
46718: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46719: LD_INT 0
46721: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46722: LD_ADDR_VAR 0 5
46726: PUSH
46727: LD_VAR 0 1
46731: PPUSH
46732: CALL_OW 250
46736: PPUSH
46737: LD_VAR 0 1
46741: PPUSH
46742: CALL_OW 251
46746: PPUSH
46747: LD_VAR 0 2
46751: PPUSH
46752: LD_VAR 0 3
46756: PPUSH
46757: LD_VAR 0 4
46761: PPUSH
46762: CALL 46772 0 5
46766: ST_TO_ADDR
// end ;
46767: LD_VAR 0 5
46771: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46772: LD_INT 0
46774: PPUSH
46775: PPUSH
46776: PPUSH
46777: PPUSH
// if not list then
46778: LD_VAR 0 3
46782: NOT
46783: IFFALSE 46787
// exit ;
46785: GO 47175
// result := [ ] ;
46787: LD_ADDR_VAR 0 6
46791: PUSH
46792: EMPTY
46793: ST_TO_ADDR
// for i in list do
46794: LD_ADDR_VAR 0 7
46798: PUSH
46799: LD_VAR 0 3
46803: PUSH
46804: FOR_IN
46805: IFFALSE 47007
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46807: LD_ADDR_VAR 0 9
46811: PUSH
46812: LD_VAR 0 7
46816: PPUSH
46817: LD_VAR 0 1
46821: PPUSH
46822: LD_VAR 0 2
46826: PPUSH
46827: CALL_OW 297
46831: ST_TO_ADDR
// if not result then
46832: LD_VAR 0 6
46836: NOT
46837: IFFALSE 46863
// result := [ [ i , tmp ] ] else
46839: LD_ADDR_VAR 0 6
46843: PUSH
46844: LD_VAR 0 7
46848: PUSH
46849: LD_VAR 0 9
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: EMPTY
46859: LIST
46860: ST_TO_ADDR
46861: GO 47005
// begin if result [ result ] [ 2 ] < tmp then
46863: LD_VAR 0 6
46867: PUSH
46868: LD_VAR 0 6
46872: ARRAY
46873: PUSH
46874: LD_INT 2
46876: ARRAY
46877: PUSH
46878: LD_VAR 0 9
46882: LESS
46883: IFFALSE 46925
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46885: LD_ADDR_VAR 0 6
46889: PUSH
46890: LD_VAR 0 6
46894: PPUSH
46895: LD_VAR 0 6
46899: PUSH
46900: LD_INT 1
46902: PLUS
46903: PPUSH
46904: LD_VAR 0 7
46908: PUSH
46909: LD_VAR 0 9
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PPUSH
46918: CALL_OW 2
46922: ST_TO_ADDR
46923: GO 47005
// for j = 1 to result do
46925: LD_ADDR_VAR 0 8
46929: PUSH
46930: DOUBLE
46931: LD_INT 1
46933: DEC
46934: ST_TO_ADDR
46935: LD_VAR 0 6
46939: PUSH
46940: FOR_TO
46941: IFFALSE 47003
// begin if tmp < result [ j ] [ 2 ] then
46943: LD_VAR 0 9
46947: PUSH
46948: LD_VAR 0 6
46952: PUSH
46953: LD_VAR 0 8
46957: ARRAY
46958: PUSH
46959: LD_INT 2
46961: ARRAY
46962: LESS
46963: IFFALSE 47001
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46965: LD_ADDR_VAR 0 6
46969: PUSH
46970: LD_VAR 0 6
46974: PPUSH
46975: LD_VAR 0 8
46979: PPUSH
46980: LD_VAR 0 7
46984: PUSH
46985: LD_VAR 0 9
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PPUSH
46994: CALL_OW 2
46998: ST_TO_ADDR
// break ;
46999: GO 47003
// end ; end ;
47001: GO 46940
47003: POP
47004: POP
// end ; end ;
47005: GO 46804
47007: POP
47008: POP
// if result and not asc then
47009: LD_VAR 0 6
47013: PUSH
47014: LD_VAR 0 4
47018: NOT
47019: AND
47020: IFFALSE 47095
// begin tmp := result ;
47022: LD_ADDR_VAR 0 9
47026: PUSH
47027: LD_VAR 0 6
47031: ST_TO_ADDR
// for i = tmp downto 1 do
47032: LD_ADDR_VAR 0 7
47036: PUSH
47037: DOUBLE
47038: LD_VAR 0 9
47042: INC
47043: ST_TO_ADDR
47044: LD_INT 1
47046: PUSH
47047: FOR_DOWNTO
47048: IFFALSE 47093
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47050: LD_ADDR_VAR 0 6
47054: PUSH
47055: LD_VAR 0 6
47059: PPUSH
47060: LD_VAR 0 9
47064: PUSH
47065: LD_VAR 0 7
47069: MINUS
47070: PUSH
47071: LD_INT 1
47073: PLUS
47074: PPUSH
47075: LD_VAR 0 9
47079: PUSH
47080: LD_VAR 0 7
47084: ARRAY
47085: PPUSH
47086: CALL_OW 1
47090: ST_TO_ADDR
47091: GO 47047
47093: POP
47094: POP
// end ; tmp := [ ] ;
47095: LD_ADDR_VAR 0 9
47099: PUSH
47100: EMPTY
47101: ST_TO_ADDR
// if mode then
47102: LD_VAR 0 5
47106: IFFALSE 47175
// begin for i = 1 to result do
47108: LD_ADDR_VAR 0 7
47112: PUSH
47113: DOUBLE
47114: LD_INT 1
47116: DEC
47117: ST_TO_ADDR
47118: LD_VAR 0 6
47122: PUSH
47123: FOR_TO
47124: IFFALSE 47163
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47126: LD_ADDR_VAR 0 9
47130: PUSH
47131: LD_VAR 0 9
47135: PPUSH
47136: LD_VAR 0 7
47140: PPUSH
47141: LD_VAR 0 6
47145: PUSH
47146: LD_VAR 0 7
47150: ARRAY
47151: PUSH
47152: LD_INT 1
47154: ARRAY
47155: PPUSH
47156: CALL_OW 1
47160: ST_TO_ADDR
47161: GO 47123
47163: POP
47164: POP
// result := tmp ;
47165: LD_ADDR_VAR 0 6
47169: PUSH
47170: LD_VAR 0 9
47174: ST_TO_ADDR
// end ; end ;
47175: LD_VAR 0 6
47179: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47180: LD_INT 0
47182: PPUSH
47183: PPUSH
47184: PPUSH
47185: PPUSH
47186: PPUSH
47187: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47188: LD_ADDR_VAR 0 5
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: EMPTY
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: ST_TO_ADDR
// if not x or not y then
47210: LD_VAR 0 2
47214: NOT
47215: PUSH
47216: LD_VAR 0 3
47220: NOT
47221: OR
47222: IFFALSE 47226
// exit ;
47224: GO 48872
// if not range then
47226: LD_VAR 0 4
47230: NOT
47231: IFFALSE 47241
// range := 10 ;
47233: LD_ADDR_VAR 0 4
47237: PUSH
47238: LD_INT 10
47240: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47241: LD_ADDR_VAR 0 8
47245: PUSH
47246: LD_INT 81
47248: PUSH
47249: LD_VAR 0 1
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 92
47260: PUSH
47261: LD_VAR 0 2
47265: PUSH
47266: LD_VAR 0 3
47270: PUSH
47271: LD_VAR 0 4
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 3
47284: PUSH
47285: LD_INT 21
47287: PUSH
47288: LD_INT 3
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: LIST
47303: PPUSH
47304: CALL_OW 69
47308: ST_TO_ADDR
// if not tmp then
47309: LD_VAR 0 8
47313: NOT
47314: IFFALSE 47318
// exit ;
47316: GO 48872
// for i in tmp do
47318: LD_ADDR_VAR 0 6
47322: PUSH
47323: LD_VAR 0 8
47327: PUSH
47328: FOR_IN
47329: IFFALSE 48847
// begin points := [ 0 , 0 , 0 ] ;
47331: LD_ADDR_VAR 0 9
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: LD_INT 0
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: LIST
47349: ST_TO_ADDR
// bpoints := 1 ;
47350: LD_ADDR_VAR 0 10
47354: PUSH
47355: LD_INT 1
47357: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47358: LD_VAR 0 6
47362: PPUSH
47363: CALL_OW 247
47367: PUSH
47368: LD_INT 1
47370: DOUBLE
47371: EQUAL
47372: IFTRUE 47376
47374: GO 47954
47376: POP
// begin if GetClass ( i ) = 1 then
47377: LD_VAR 0 6
47381: PPUSH
47382: CALL_OW 257
47386: PUSH
47387: LD_INT 1
47389: EQUAL
47390: IFFALSE 47411
// points := [ 10 , 5 , 3 ] ;
47392: LD_ADDR_VAR 0 9
47396: PUSH
47397: LD_INT 10
47399: PUSH
47400: LD_INT 5
47402: PUSH
47403: LD_INT 3
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: LIST
47410: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47411: LD_VAR 0 6
47415: PPUSH
47416: CALL_OW 257
47420: PUSH
47421: LD_INT 2
47423: PUSH
47424: LD_INT 3
47426: PUSH
47427: LD_INT 4
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: LIST
47434: IN
47435: IFFALSE 47456
// points := [ 3 , 2 , 1 ] ;
47437: LD_ADDR_VAR 0 9
47441: PUSH
47442: LD_INT 3
47444: PUSH
47445: LD_INT 2
47447: PUSH
47448: LD_INT 1
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: LIST
47455: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47456: LD_VAR 0 6
47460: PPUSH
47461: CALL_OW 257
47465: PUSH
47466: LD_INT 5
47468: EQUAL
47469: IFFALSE 47490
// points := [ 130 , 5 , 2 ] ;
47471: LD_ADDR_VAR 0 9
47475: PUSH
47476: LD_INT 130
47478: PUSH
47479: LD_INT 5
47481: PUSH
47482: LD_INT 2
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: LIST
47489: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47490: LD_VAR 0 6
47494: PPUSH
47495: CALL_OW 257
47499: PUSH
47500: LD_INT 8
47502: EQUAL
47503: IFFALSE 47524
// points := [ 35 , 35 , 30 ] ;
47505: LD_ADDR_VAR 0 9
47509: PUSH
47510: LD_INT 35
47512: PUSH
47513: LD_INT 35
47515: PUSH
47516: LD_INT 30
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: LIST
47523: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47524: LD_VAR 0 6
47528: PPUSH
47529: CALL_OW 257
47533: PUSH
47534: LD_INT 9
47536: EQUAL
47537: IFFALSE 47558
// points := [ 20 , 55 , 40 ] ;
47539: LD_ADDR_VAR 0 9
47543: PUSH
47544: LD_INT 20
47546: PUSH
47547: LD_INT 55
47549: PUSH
47550: LD_INT 40
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: LIST
47557: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47558: LD_VAR 0 6
47562: PPUSH
47563: CALL_OW 257
47567: PUSH
47568: LD_INT 12
47570: PUSH
47571: LD_INT 16
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: IN
47578: IFFALSE 47599
// points := [ 5 , 3 , 2 ] ;
47580: LD_ADDR_VAR 0 9
47584: PUSH
47585: LD_INT 5
47587: PUSH
47588: LD_INT 3
47590: PUSH
47591: LD_INT 2
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: LIST
47598: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47599: LD_VAR 0 6
47603: PPUSH
47604: CALL_OW 257
47608: PUSH
47609: LD_INT 17
47611: EQUAL
47612: IFFALSE 47633
// points := [ 100 , 50 , 75 ] ;
47614: LD_ADDR_VAR 0 9
47618: PUSH
47619: LD_INT 100
47621: PUSH
47622: LD_INT 50
47624: PUSH
47625: LD_INT 75
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: LIST
47632: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47633: LD_VAR 0 6
47637: PPUSH
47638: CALL_OW 257
47642: PUSH
47643: LD_INT 15
47645: EQUAL
47646: IFFALSE 47667
// points := [ 10 , 5 , 3 ] ;
47648: LD_ADDR_VAR 0 9
47652: PUSH
47653: LD_INT 10
47655: PUSH
47656: LD_INT 5
47658: PUSH
47659: LD_INT 3
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: LIST
47666: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47667: LD_VAR 0 6
47671: PPUSH
47672: CALL_OW 257
47676: PUSH
47677: LD_INT 14
47679: EQUAL
47680: IFFALSE 47701
// points := [ 10 , 0 , 0 ] ;
47682: LD_ADDR_VAR 0 9
47686: PUSH
47687: LD_INT 10
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: LIST
47700: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47701: LD_VAR 0 6
47705: PPUSH
47706: CALL_OW 257
47710: PUSH
47711: LD_INT 11
47713: EQUAL
47714: IFFALSE 47735
// points := [ 30 , 10 , 5 ] ;
47716: LD_ADDR_VAR 0 9
47720: PUSH
47721: LD_INT 30
47723: PUSH
47724: LD_INT 10
47726: PUSH
47727: LD_INT 5
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: LIST
47734: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47735: LD_VAR 0 1
47739: PPUSH
47740: LD_INT 5
47742: PPUSH
47743: CALL_OW 321
47747: PUSH
47748: LD_INT 2
47750: EQUAL
47751: IFFALSE 47768
// bpoints := bpoints * 1.8 ;
47753: LD_ADDR_VAR 0 10
47757: PUSH
47758: LD_VAR 0 10
47762: PUSH
47763: LD_REAL  1.80000000000000E+0000
47766: MUL
47767: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47768: LD_VAR 0 6
47772: PPUSH
47773: CALL_OW 257
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: LD_INT 2
47783: PUSH
47784: LD_INT 3
47786: PUSH
47787: LD_INT 4
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: IN
47796: PUSH
47797: LD_VAR 0 1
47801: PPUSH
47802: LD_INT 51
47804: PPUSH
47805: CALL_OW 321
47809: PUSH
47810: LD_INT 2
47812: EQUAL
47813: AND
47814: IFFALSE 47831
// bpoints := bpoints * 1.2 ;
47816: LD_ADDR_VAR 0 10
47820: PUSH
47821: LD_VAR 0 10
47825: PUSH
47826: LD_REAL  1.20000000000000E+0000
47829: MUL
47830: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47831: LD_VAR 0 6
47835: PPUSH
47836: CALL_OW 257
47840: PUSH
47841: LD_INT 5
47843: PUSH
47844: LD_INT 7
47846: PUSH
47847: LD_INT 9
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: LIST
47854: IN
47855: PUSH
47856: LD_VAR 0 1
47860: PPUSH
47861: LD_INT 52
47863: PPUSH
47864: CALL_OW 321
47868: PUSH
47869: LD_INT 2
47871: EQUAL
47872: AND
47873: IFFALSE 47890
// bpoints := bpoints * 1.5 ;
47875: LD_ADDR_VAR 0 10
47879: PUSH
47880: LD_VAR 0 10
47884: PUSH
47885: LD_REAL  1.50000000000000E+0000
47888: MUL
47889: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47890: LD_VAR 0 1
47894: PPUSH
47895: LD_INT 66
47897: PPUSH
47898: CALL_OW 321
47902: PUSH
47903: LD_INT 2
47905: EQUAL
47906: IFFALSE 47923
// bpoints := bpoints * 1.1 ;
47908: LD_ADDR_VAR 0 10
47912: PUSH
47913: LD_VAR 0 10
47917: PUSH
47918: LD_REAL  1.10000000000000E+0000
47921: MUL
47922: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47923: LD_ADDR_VAR 0 10
47927: PUSH
47928: LD_VAR 0 10
47932: PUSH
47933: LD_VAR 0 6
47937: PPUSH
47938: LD_INT 1
47940: PPUSH
47941: CALL_OW 259
47945: PUSH
47946: LD_REAL  1.15000000000000E+0000
47949: MUL
47950: MUL
47951: ST_TO_ADDR
// end ; unit_vehicle :
47952: GO 48776
47954: LD_INT 2
47956: DOUBLE
47957: EQUAL
47958: IFTRUE 47962
47960: GO 48764
47962: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47963: LD_VAR 0 6
47967: PPUSH
47968: CALL_OW 264
47972: PUSH
47973: LD_INT 2
47975: PUSH
47976: LD_INT 42
47978: PUSH
47979: LD_INT 24
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: LIST
47986: IN
47987: IFFALSE 48008
// points := [ 25 , 5 , 3 ] ;
47989: LD_ADDR_VAR 0 9
47993: PUSH
47994: LD_INT 25
47996: PUSH
47997: LD_INT 5
47999: PUSH
48000: LD_INT 3
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: LIST
48007: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48008: LD_VAR 0 6
48012: PPUSH
48013: CALL_OW 264
48017: PUSH
48018: LD_INT 4
48020: PUSH
48021: LD_INT 43
48023: PUSH
48024: LD_INT 25
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: LIST
48031: IN
48032: IFFALSE 48053
// points := [ 40 , 15 , 5 ] ;
48034: LD_ADDR_VAR 0 9
48038: PUSH
48039: LD_INT 40
48041: PUSH
48042: LD_INT 15
48044: PUSH
48045: LD_INT 5
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: LIST
48052: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48053: LD_VAR 0 6
48057: PPUSH
48058: CALL_OW 264
48062: PUSH
48063: LD_INT 3
48065: PUSH
48066: LD_INT 23
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: IN
48073: IFFALSE 48094
// points := [ 7 , 25 , 8 ] ;
48075: LD_ADDR_VAR 0 9
48079: PUSH
48080: LD_INT 7
48082: PUSH
48083: LD_INT 25
48085: PUSH
48086: LD_INT 8
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: LIST
48093: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48094: LD_VAR 0 6
48098: PPUSH
48099: CALL_OW 264
48103: PUSH
48104: LD_INT 5
48106: PUSH
48107: LD_INT 27
48109: PUSH
48110: LD_INT 44
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: LIST
48117: IN
48118: IFFALSE 48139
// points := [ 14 , 50 , 16 ] ;
48120: LD_ADDR_VAR 0 9
48124: PUSH
48125: LD_INT 14
48127: PUSH
48128: LD_INT 50
48130: PUSH
48131: LD_INT 16
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: LIST
48138: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48139: LD_VAR 0 6
48143: PPUSH
48144: CALL_OW 264
48148: PUSH
48149: LD_INT 6
48151: PUSH
48152: LD_INT 46
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: IN
48159: IFFALSE 48180
// points := [ 32 , 120 , 70 ] ;
48161: LD_ADDR_VAR 0 9
48165: PUSH
48166: LD_INT 32
48168: PUSH
48169: LD_INT 120
48171: PUSH
48172: LD_INT 70
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: LIST
48179: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
48180: LD_VAR 0 6
48184: PPUSH
48185: CALL_OW 264
48189: PUSH
48190: LD_INT 7
48192: PUSH
48193: LD_INT 28
48195: PUSH
48196: LD_INT 45
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: LIST
48203: IN
48204: IFFALSE 48225
// points := [ 35 , 20 , 45 ] ;
48206: LD_ADDR_VAR 0 9
48210: PUSH
48211: LD_INT 35
48213: PUSH
48214: LD_INT 20
48216: PUSH
48217: LD_INT 45
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: LIST
48224: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48225: LD_VAR 0 6
48229: PPUSH
48230: CALL_OW 264
48234: PUSH
48235: LD_INT 47
48237: PUSH
48238: EMPTY
48239: LIST
48240: IN
48241: IFFALSE 48262
// points := [ 67 , 45 , 75 ] ;
48243: LD_ADDR_VAR 0 9
48247: PUSH
48248: LD_INT 67
48250: PUSH
48251: LD_INT 45
48253: PUSH
48254: LD_INT 75
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: LIST
48261: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48262: LD_VAR 0 6
48266: PPUSH
48267: CALL_OW 264
48271: PUSH
48272: LD_INT 26
48274: PUSH
48275: EMPTY
48276: LIST
48277: IN
48278: IFFALSE 48299
// points := [ 120 , 30 , 80 ] ;
48280: LD_ADDR_VAR 0 9
48284: PUSH
48285: LD_INT 120
48287: PUSH
48288: LD_INT 30
48290: PUSH
48291: LD_INT 80
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: LIST
48298: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48299: LD_VAR 0 6
48303: PPUSH
48304: CALL_OW 264
48308: PUSH
48309: LD_INT 22
48311: PUSH
48312: EMPTY
48313: LIST
48314: IN
48315: IFFALSE 48336
// points := [ 40 , 1 , 1 ] ;
48317: LD_ADDR_VAR 0 9
48321: PUSH
48322: LD_INT 40
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: LIST
48335: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48336: LD_VAR 0 6
48340: PPUSH
48341: CALL_OW 264
48345: PUSH
48346: LD_INT 29
48348: PUSH
48349: EMPTY
48350: LIST
48351: IN
48352: IFFALSE 48373
// points := [ 70 , 200 , 400 ] ;
48354: LD_ADDR_VAR 0 9
48358: PUSH
48359: LD_INT 70
48361: PUSH
48362: LD_INT 200
48364: PUSH
48365: LD_INT 400
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: LIST
48372: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48373: LD_VAR 0 6
48377: PPUSH
48378: CALL_OW 264
48382: PUSH
48383: LD_INT 14
48385: PUSH
48386: LD_INT 53
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: IN
48393: IFFALSE 48414
// points := [ 40 , 10 , 20 ] ;
48395: LD_ADDR_VAR 0 9
48399: PUSH
48400: LD_INT 40
48402: PUSH
48403: LD_INT 10
48405: PUSH
48406: LD_INT 20
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: LIST
48413: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48414: LD_VAR 0 6
48418: PPUSH
48419: CALL_OW 264
48423: PUSH
48424: LD_INT 9
48426: PUSH
48427: EMPTY
48428: LIST
48429: IN
48430: IFFALSE 48451
// points := [ 5 , 70 , 20 ] ;
48432: LD_ADDR_VAR 0 9
48436: PUSH
48437: LD_INT 5
48439: PUSH
48440: LD_INT 70
48442: PUSH
48443: LD_INT 20
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: LIST
48450: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48451: LD_VAR 0 6
48455: PPUSH
48456: CALL_OW 264
48460: PUSH
48461: LD_INT 10
48463: PUSH
48464: EMPTY
48465: LIST
48466: IN
48467: IFFALSE 48488
// points := [ 35 , 110 , 70 ] ;
48469: LD_ADDR_VAR 0 9
48473: PUSH
48474: LD_INT 35
48476: PUSH
48477: LD_INT 110
48479: PUSH
48480: LD_INT 70
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: LIST
48487: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48488: LD_VAR 0 6
48492: PPUSH
48493: CALL_OW 265
48497: PUSH
48498: LD_INT 25
48500: EQUAL
48501: IFFALSE 48522
// points := [ 80 , 65 , 100 ] ;
48503: LD_ADDR_VAR 0 9
48507: PUSH
48508: LD_INT 80
48510: PUSH
48511: LD_INT 65
48513: PUSH
48514: LD_INT 100
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: LIST
48521: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48522: LD_VAR 0 6
48526: PPUSH
48527: CALL_OW 263
48531: PUSH
48532: LD_INT 1
48534: EQUAL
48535: IFFALSE 48570
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48537: LD_ADDR_VAR 0 10
48541: PUSH
48542: LD_VAR 0 10
48546: PUSH
48547: LD_VAR 0 6
48551: PPUSH
48552: CALL_OW 311
48556: PPUSH
48557: LD_INT 3
48559: PPUSH
48560: CALL_OW 259
48564: PUSH
48565: LD_INT 4
48567: MUL
48568: MUL
48569: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48570: LD_VAR 0 6
48574: PPUSH
48575: CALL_OW 263
48579: PUSH
48580: LD_INT 2
48582: EQUAL
48583: IFFALSE 48634
// begin j := IsControledBy ( i ) ;
48585: LD_ADDR_VAR 0 7
48589: PUSH
48590: LD_VAR 0 6
48594: PPUSH
48595: CALL_OW 312
48599: ST_TO_ADDR
// if j then
48600: LD_VAR 0 7
48604: IFFALSE 48634
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48606: LD_ADDR_VAR 0 10
48610: PUSH
48611: LD_VAR 0 10
48615: PUSH
48616: LD_VAR 0 7
48620: PPUSH
48621: LD_INT 3
48623: PPUSH
48624: CALL_OW 259
48628: PUSH
48629: LD_INT 3
48631: MUL
48632: MUL
48633: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48634: LD_VAR 0 6
48638: PPUSH
48639: CALL_OW 264
48643: PUSH
48644: LD_INT 5
48646: PUSH
48647: LD_INT 6
48649: PUSH
48650: LD_INT 46
48652: PUSH
48653: LD_INT 44
48655: PUSH
48656: LD_INT 47
48658: PUSH
48659: LD_INT 45
48661: PUSH
48662: LD_INT 28
48664: PUSH
48665: LD_INT 7
48667: PUSH
48668: LD_INT 27
48670: PUSH
48671: LD_INT 29
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: IN
48686: PUSH
48687: LD_VAR 0 1
48691: PPUSH
48692: LD_INT 52
48694: PPUSH
48695: CALL_OW 321
48699: PUSH
48700: LD_INT 2
48702: EQUAL
48703: AND
48704: IFFALSE 48721
// bpoints := bpoints * 1.2 ;
48706: LD_ADDR_VAR 0 10
48710: PUSH
48711: LD_VAR 0 10
48715: PUSH
48716: LD_REAL  1.20000000000000E+0000
48719: MUL
48720: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48721: LD_VAR 0 6
48725: PPUSH
48726: CALL_OW 264
48730: PUSH
48731: LD_INT 6
48733: PUSH
48734: LD_INT 46
48736: PUSH
48737: LD_INT 47
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: LIST
48744: IN
48745: IFFALSE 48762
// bpoints := bpoints * 1.2 ;
48747: LD_ADDR_VAR 0 10
48751: PUSH
48752: LD_VAR 0 10
48756: PUSH
48757: LD_REAL  1.20000000000000E+0000
48760: MUL
48761: ST_TO_ADDR
// end ; unit_building :
48762: GO 48776
48764: LD_INT 3
48766: DOUBLE
48767: EQUAL
48768: IFTRUE 48772
48770: GO 48775
48772: POP
// ; end ;
48773: GO 48776
48775: POP
// for j = 1 to 3 do
48776: LD_ADDR_VAR 0 7
48780: PUSH
48781: DOUBLE
48782: LD_INT 1
48784: DEC
48785: ST_TO_ADDR
48786: LD_INT 3
48788: PUSH
48789: FOR_TO
48790: IFFALSE 48843
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48792: LD_ADDR_VAR 0 5
48796: PUSH
48797: LD_VAR 0 5
48801: PPUSH
48802: LD_VAR 0 7
48806: PPUSH
48807: LD_VAR 0 5
48811: PUSH
48812: LD_VAR 0 7
48816: ARRAY
48817: PUSH
48818: LD_VAR 0 9
48822: PUSH
48823: LD_VAR 0 7
48827: ARRAY
48828: PUSH
48829: LD_VAR 0 10
48833: MUL
48834: PLUS
48835: PPUSH
48836: CALL_OW 1
48840: ST_TO_ADDR
48841: GO 48789
48843: POP
48844: POP
// end ;
48845: GO 47328
48847: POP
48848: POP
// result := Replace ( result , 4 , tmp ) ;
48849: LD_ADDR_VAR 0 5
48853: PUSH
48854: LD_VAR 0 5
48858: PPUSH
48859: LD_INT 4
48861: PPUSH
48862: LD_VAR 0 8
48866: PPUSH
48867: CALL_OW 1
48871: ST_TO_ADDR
// end ;
48872: LD_VAR 0 5
48876: RET
// export function DangerAtRange ( unit , range ) ; begin
48877: LD_INT 0
48879: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48880: LD_ADDR_VAR 0 3
48884: PUSH
48885: LD_VAR 0 1
48889: PPUSH
48890: CALL_OW 255
48894: PPUSH
48895: LD_VAR 0 1
48899: PPUSH
48900: CALL_OW 250
48904: PPUSH
48905: LD_VAR 0 1
48909: PPUSH
48910: CALL_OW 251
48914: PPUSH
48915: LD_VAR 0 2
48919: PPUSH
48920: CALL 47180 0 4
48924: ST_TO_ADDR
// end ;
48925: LD_VAR 0 3
48929: RET
// export function DangerInArea ( side , area ) ; begin
48930: LD_INT 0
48932: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48933: LD_ADDR_VAR 0 3
48937: PUSH
48938: LD_VAR 0 2
48942: PPUSH
48943: LD_INT 81
48945: PUSH
48946: LD_VAR 0 1
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PPUSH
48955: CALL_OW 70
48959: ST_TO_ADDR
// end ;
48960: LD_VAR 0 3
48964: RET
// export function IsExtension ( b ) ; begin
48965: LD_INT 0
48967: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48968: LD_ADDR_VAR 0 2
48972: PUSH
48973: LD_VAR 0 1
48977: PUSH
48978: LD_INT 23
48980: PUSH
48981: LD_INT 20
48983: PUSH
48984: LD_INT 22
48986: PUSH
48987: LD_INT 17
48989: PUSH
48990: LD_INT 24
48992: PUSH
48993: LD_INT 21
48995: PUSH
48996: LD_INT 19
48998: PUSH
48999: LD_INT 16
49001: PUSH
49002: LD_INT 25
49004: PUSH
49005: LD_INT 18
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: IN
49020: ST_TO_ADDR
// end ;
49021: LD_VAR 0 2
49025: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
49026: LD_INT 0
49028: PPUSH
49029: PPUSH
49030: PPUSH
// result := [ ] ;
49031: LD_ADDR_VAR 0 3
49035: PUSH
49036: EMPTY
49037: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49038: LD_ADDR_VAR 0 4
49042: PUSH
49043: LD_VAR 0 2
49047: PPUSH
49048: LD_INT 21
49050: PUSH
49051: LD_INT 3
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PPUSH
49058: CALL_OW 70
49062: ST_TO_ADDR
// if not tmp then
49063: LD_VAR 0 4
49067: NOT
49068: IFFALSE 49072
// exit ;
49070: GO 49130
// for i in tmp do
49072: LD_ADDR_VAR 0 5
49076: PUSH
49077: LD_VAR 0 4
49081: PUSH
49082: FOR_IN
49083: IFFALSE 49118
// if GetBase ( i ) <> base then
49085: LD_VAR 0 5
49089: PPUSH
49090: CALL_OW 274
49094: PUSH
49095: LD_VAR 0 1
49099: NONEQUAL
49100: IFFALSE 49116
// ComLinkToBase ( base , i ) ;
49102: LD_VAR 0 1
49106: PPUSH
49107: LD_VAR 0 5
49111: PPUSH
49112: CALL_OW 169
49116: GO 49082
49118: POP
49119: POP
// result := tmp ;
49120: LD_ADDR_VAR 0 3
49124: PUSH
49125: LD_VAR 0 4
49129: ST_TO_ADDR
// end ;
49130: LD_VAR 0 3
49134: RET
// export function ComComplete ( unit , b ) ; var i ; begin
49135: LD_INT 0
49137: PPUSH
49138: PPUSH
// if BuildingStatus ( b ) = bs_build then
49139: LD_VAR 0 2
49143: PPUSH
49144: CALL_OW 461
49148: PUSH
49149: LD_INT 1
49151: EQUAL
49152: IFFALSE 49212
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49154: LD_VAR 0 1
49158: PPUSH
49159: LD_STRING h
49161: PUSH
49162: LD_VAR 0 2
49166: PPUSH
49167: CALL_OW 250
49171: PUSH
49172: LD_VAR 0 2
49176: PPUSH
49177: CALL_OW 251
49181: PUSH
49182: LD_VAR 0 2
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: PUSH
49205: EMPTY
49206: LIST
49207: PPUSH
49208: CALL_OW 446
// end ;
49212: LD_VAR 0 3
49216: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49217: LD_INT 0
49219: PPUSH
49220: PPUSH
49221: PPUSH
49222: PPUSH
49223: PPUSH
49224: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
49225: LD_VAR 0 1
49229: NOT
49230: PUSH
49231: LD_VAR 0 1
49235: PPUSH
49236: CALL_OW 263
49240: PUSH
49241: LD_INT 2
49243: EQUAL
49244: NOT
49245: OR
49246: IFFALSE 49250
// exit ;
49248: GO 49566
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49250: LD_ADDR_VAR 0 6
49254: PUSH
49255: LD_INT 22
49257: PUSH
49258: LD_VAR 0 1
49262: PPUSH
49263: CALL_OW 255
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: LD_INT 30
49277: PUSH
49278: LD_INT 36
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 34
49287: PUSH
49288: LD_INT 31
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: LIST
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PPUSH
49304: CALL_OW 69
49308: ST_TO_ADDR
// if not tmp then
49309: LD_VAR 0 6
49313: NOT
49314: IFFALSE 49318
// exit ;
49316: GO 49566
// result := [ ] ;
49318: LD_ADDR_VAR 0 2
49322: PUSH
49323: EMPTY
49324: ST_TO_ADDR
// for i in tmp do
49325: LD_ADDR_VAR 0 3
49329: PUSH
49330: LD_VAR 0 6
49334: PUSH
49335: FOR_IN
49336: IFFALSE 49407
// begin t := UnitsInside ( i ) ;
49338: LD_ADDR_VAR 0 4
49342: PUSH
49343: LD_VAR 0 3
49347: PPUSH
49348: CALL_OW 313
49352: ST_TO_ADDR
// if t then
49353: LD_VAR 0 4
49357: IFFALSE 49405
// for j in t do
49359: LD_ADDR_VAR 0 7
49363: PUSH
49364: LD_VAR 0 4
49368: PUSH
49369: FOR_IN
49370: IFFALSE 49403
// result := Insert ( result , result + 1 , j ) ;
49372: LD_ADDR_VAR 0 2
49376: PUSH
49377: LD_VAR 0 2
49381: PPUSH
49382: LD_VAR 0 2
49386: PUSH
49387: LD_INT 1
49389: PLUS
49390: PPUSH
49391: LD_VAR 0 7
49395: PPUSH
49396: CALL_OW 2
49400: ST_TO_ADDR
49401: GO 49369
49403: POP
49404: POP
// end ;
49405: GO 49335
49407: POP
49408: POP
// if not result then
49409: LD_VAR 0 2
49413: NOT
49414: IFFALSE 49418
// exit ;
49416: GO 49566
// mech := result [ 1 ] ;
49418: LD_ADDR_VAR 0 5
49422: PUSH
49423: LD_VAR 0 2
49427: PUSH
49428: LD_INT 1
49430: ARRAY
49431: ST_TO_ADDR
// if result > 1 then
49432: LD_VAR 0 2
49436: PUSH
49437: LD_INT 1
49439: GREATER
49440: IFFALSE 49552
// for i = 2 to result do
49442: LD_ADDR_VAR 0 3
49446: PUSH
49447: DOUBLE
49448: LD_INT 2
49450: DEC
49451: ST_TO_ADDR
49452: LD_VAR 0 2
49456: PUSH
49457: FOR_TO
49458: IFFALSE 49550
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49460: LD_ADDR_VAR 0 4
49464: PUSH
49465: LD_VAR 0 2
49469: PUSH
49470: LD_VAR 0 3
49474: ARRAY
49475: PPUSH
49476: LD_INT 3
49478: PPUSH
49479: CALL_OW 259
49483: PUSH
49484: LD_VAR 0 2
49488: PUSH
49489: LD_VAR 0 3
49493: ARRAY
49494: PPUSH
49495: CALL_OW 432
49499: MINUS
49500: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49501: LD_VAR 0 4
49505: PUSH
49506: LD_VAR 0 5
49510: PPUSH
49511: LD_INT 3
49513: PPUSH
49514: CALL_OW 259
49518: PUSH
49519: LD_VAR 0 5
49523: PPUSH
49524: CALL_OW 432
49528: MINUS
49529: GREATEREQUAL
49530: IFFALSE 49548
// mech := result [ i ] ;
49532: LD_ADDR_VAR 0 5
49536: PUSH
49537: LD_VAR 0 2
49541: PUSH
49542: LD_VAR 0 3
49546: ARRAY
49547: ST_TO_ADDR
// end ;
49548: GO 49457
49550: POP
49551: POP
// ComLinkTo ( vehicle , mech ) ;
49552: LD_VAR 0 1
49556: PPUSH
49557: LD_VAR 0 5
49561: PPUSH
49562: CALL_OW 135
// end ;
49566: LD_VAR 0 2
49570: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49571: LD_INT 0
49573: PPUSH
49574: PPUSH
49575: PPUSH
49576: PPUSH
49577: PPUSH
49578: PPUSH
49579: PPUSH
49580: PPUSH
49581: PPUSH
49582: PPUSH
49583: PPUSH
49584: PPUSH
49585: PPUSH
// result := [ ] ;
49586: LD_ADDR_VAR 0 7
49590: PUSH
49591: EMPTY
49592: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49593: LD_VAR 0 1
49597: PPUSH
49598: CALL_OW 266
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: LD_INT 1
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: IN
49613: NOT
49614: IFFALSE 49618
// exit ;
49616: GO 51249
// if name then
49618: LD_VAR 0 3
49622: IFFALSE 49638
// SetBName ( base_dep , name ) ;
49624: LD_VAR 0 1
49628: PPUSH
49629: LD_VAR 0 3
49633: PPUSH
49634: CALL_OW 500
// base := GetBase ( base_dep ) ;
49638: LD_ADDR_VAR 0 15
49642: PUSH
49643: LD_VAR 0 1
49647: PPUSH
49648: CALL_OW 274
49652: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49653: LD_ADDR_VAR 0 16
49657: PUSH
49658: LD_VAR 0 1
49662: PPUSH
49663: CALL_OW 255
49667: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49668: LD_ADDR_VAR 0 17
49672: PUSH
49673: LD_VAR 0 1
49677: PPUSH
49678: CALL_OW 248
49682: ST_TO_ADDR
// if sources then
49683: LD_VAR 0 5
49687: IFFALSE 49734
// for i = 1 to 3 do
49689: LD_ADDR_VAR 0 8
49693: PUSH
49694: DOUBLE
49695: LD_INT 1
49697: DEC
49698: ST_TO_ADDR
49699: LD_INT 3
49701: PUSH
49702: FOR_TO
49703: IFFALSE 49732
// AddResourceType ( base , i , sources [ i ] ) ;
49705: LD_VAR 0 15
49709: PPUSH
49710: LD_VAR 0 8
49714: PPUSH
49715: LD_VAR 0 5
49719: PUSH
49720: LD_VAR 0 8
49724: ARRAY
49725: PPUSH
49726: CALL_OW 276
49730: GO 49702
49732: POP
49733: POP
// buildings := GetBaseBuildings ( base , area ) ;
49734: LD_ADDR_VAR 0 18
49738: PUSH
49739: LD_VAR 0 15
49743: PPUSH
49744: LD_VAR 0 2
49748: PPUSH
49749: CALL 49026 0 2
49753: ST_TO_ADDR
// InitHc ;
49754: CALL_OW 19
// InitUc ;
49758: CALL_OW 18
// uc_side := side ;
49762: LD_ADDR_OWVAR 20
49766: PUSH
49767: LD_VAR 0 16
49771: ST_TO_ADDR
// uc_nation := nation ;
49772: LD_ADDR_OWVAR 21
49776: PUSH
49777: LD_VAR 0 17
49781: ST_TO_ADDR
// if buildings then
49782: LD_VAR 0 18
49786: IFFALSE 51108
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49788: LD_ADDR_VAR 0 19
49792: PUSH
49793: LD_VAR 0 18
49797: PPUSH
49798: LD_INT 2
49800: PUSH
49801: LD_INT 30
49803: PUSH
49804: LD_INT 29
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 30
49813: PUSH
49814: LD_INT 30
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: LIST
49825: PPUSH
49826: CALL_OW 72
49830: ST_TO_ADDR
// if tmp then
49831: LD_VAR 0 19
49835: IFFALSE 49883
// for i in tmp do
49837: LD_ADDR_VAR 0 8
49841: PUSH
49842: LD_VAR 0 19
49846: PUSH
49847: FOR_IN
49848: IFFALSE 49881
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49850: LD_VAR 0 8
49854: PPUSH
49855: CALL_OW 250
49859: PPUSH
49860: LD_VAR 0 8
49864: PPUSH
49865: CALL_OW 251
49869: PPUSH
49870: LD_VAR 0 16
49874: PPUSH
49875: CALL_OW 441
49879: GO 49847
49881: POP
49882: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49883: LD_VAR 0 18
49887: PPUSH
49888: LD_INT 2
49890: PUSH
49891: LD_INT 30
49893: PUSH
49894: LD_INT 32
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 30
49903: PUSH
49904: LD_INT 33
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: LIST
49915: PPUSH
49916: CALL_OW 72
49920: IFFALSE 50008
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49922: LD_ADDR_VAR 0 8
49926: PUSH
49927: LD_VAR 0 18
49931: PPUSH
49932: LD_INT 2
49934: PUSH
49935: LD_INT 30
49937: PUSH
49938: LD_INT 32
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 30
49947: PUSH
49948: LD_INT 33
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: LIST
49959: PPUSH
49960: CALL_OW 72
49964: PUSH
49965: FOR_IN
49966: IFFALSE 50006
// begin if not GetBWeapon ( i ) then
49968: LD_VAR 0 8
49972: PPUSH
49973: CALL_OW 269
49977: NOT
49978: IFFALSE 50004
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49980: LD_VAR 0 8
49984: PPUSH
49985: LD_VAR 0 8
49989: PPUSH
49990: LD_VAR 0 2
49994: PPUSH
49995: CALL 51254 0 2
49999: PPUSH
50000: CALL_OW 431
// end ;
50004: GO 49965
50006: POP
50007: POP
// end ; for i = 1 to personel do
50008: LD_ADDR_VAR 0 8
50012: PUSH
50013: DOUBLE
50014: LD_INT 1
50016: DEC
50017: ST_TO_ADDR
50018: LD_VAR 0 6
50022: PUSH
50023: FOR_TO
50024: IFFALSE 51088
// begin if i > 4 then
50026: LD_VAR 0 8
50030: PUSH
50031: LD_INT 4
50033: GREATER
50034: IFFALSE 50038
// break ;
50036: GO 51088
// case i of 1 :
50038: LD_VAR 0 8
50042: PUSH
50043: LD_INT 1
50045: DOUBLE
50046: EQUAL
50047: IFTRUE 50051
50049: GO 50131
50051: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50052: LD_ADDR_VAR 0 12
50056: PUSH
50057: LD_VAR 0 18
50061: PPUSH
50062: LD_INT 22
50064: PUSH
50065: LD_VAR 0 16
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 58
50076: PUSH
50077: EMPTY
50078: LIST
50079: PUSH
50080: LD_INT 2
50082: PUSH
50083: LD_INT 30
50085: PUSH
50086: LD_INT 32
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 30
50095: PUSH
50096: LD_INT 4
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 30
50105: PUSH
50106: LD_INT 5
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: LIST
50123: PPUSH
50124: CALL_OW 72
50128: ST_TO_ADDR
50129: GO 50353
50131: LD_INT 2
50133: DOUBLE
50134: EQUAL
50135: IFTRUE 50139
50137: GO 50201
50139: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50140: LD_ADDR_VAR 0 12
50144: PUSH
50145: LD_VAR 0 18
50149: PPUSH
50150: LD_INT 22
50152: PUSH
50153: LD_VAR 0 16
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 2
50164: PUSH
50165: LD_INT 30
50167: PUSH
50168: LD_INT 0
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 30
50177: PUSH
50178: LD_INT 1
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: LIST
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PPUSH
50194: CALL_OW 72
50198: ST_TO_ADDR
50199: GO 50353
50201: LD_INT 3
50203: DOUBLE
50204: EQUAL
50205: IFTRUE 50209
50207: GO 50271
50209: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50210: LD_ADDR_VAR 0 12
50214: PUSH
50215: LD_VAR 0 18
50219: PPUSH
50220: LD_INT 22
50222: PUSH
50223: LD_VAR 0 16
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 2
50234: PUSH
50235: LD_INT 30
50237: PUSH
50238: LD_INT 2
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 30
50247: PUSH
50248: LD_INT 3
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: LIST
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PPUSH
50264: CALL_OW 72
50268: ST_TO_ADDR
50269: GO 50353
50271: LD_INT 4
50273: DOUBLE
50274: EQUAL
50275: IFTRUE 50279
50277: GO 50352
50279: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50280: LD_ADDR_VAR 0 12
50284: PUSH
50285: LD_VAR 0 18
50289: PPUSH
50290: LD_INT 22
50292: PUSH
50293: LD_VAR 0 16
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 2
50304: PUSH
50305: LD_INT 30
50307: PUSH
50308: LD_INT 6
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 30
50317: PUSH
50318: LD_INT 7
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 30
50327: PUSH
50328: LD_INT 8
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PPUSH
50345: CALL_OW 72
50349: ST_TO_ADDR
50350: GO 50353
50352: POP
// if i = 1 then
50353: LD_VAR 0 8
50357: PUSH
50358: LD_INT 1
50360: EQUAL
50361: IFFALSE 50472
// begin tmp := [ ] ;
50363: LD_ADDR_VAR 0 19
50367: PUSH
50368: EMPTY
50369: ST_TO_ADDR
// for j in f do
50370: LD_ADDR_VAR 0 9
50374: PUSH
50375: LD_VAR 0 12
50379: PUSH
50380: FOR_IN
50381: IFFALSE 50454
// if GetBType ( j ) = b_bunker then
50383: LD_VAR 0 9
50387: PPUSH
50388: CALL_OW 266
50392: PUSH
50393: LD_INT 32
50395: EQUAL
50396: IFFALSE 50423
// tmp := Insert ( tmp , 1 , j ) else
50398: LD_ADDR_VAR 0 19
50402: PUSH
50403: LD_VAR 0 19
50407: PPUSH
50408: LD_INT 1
50410: PPUSH
50411: LD_VAR 0 9
50415: PPUSH
50416: CALL_OW 2
50420: ST_TO_ADDR
50421: GO 50452
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50423: LD_ADDR_VAR 0 19
50427: PUSH
50428: LD_VAR 0 19
50432: PPUSH
50433: LD_VAR 0 19
50437: PUSH
50438: LD_INT 1
50440: PLUS
50441: PPUSH
50442: LD_VAR 0 9
50446: PPUSH
50447: CALL_OW 2
50451: ST_TO_ADDR
50452: GO 50380
50454: POP
50455: POP
// if tmp then
50456: LD_VAR 0 19
50460: IFFALSE 50472
// f := tmp ;
50462: LD_ADDR_VAR 0 12
50466: PUSH
50467: LD_VAR 0 19
50471: ST_TO_ADDR
// end ; x := personel [ i ] ;
50472: LD_ADDR_VAR 0 13
50476: PUSH
50477: LD_VAR 0 6
50481: PUSH
50482: LD_VAR 0 8
50486: ARRAY
50487: ST_TO_ADDR
// if x = - 1 then
50488: LD_VAR 0 13
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: EQUAL
50497: IFFALSE 50706
// begin for j in f do
50499: LD_ADDR_VAR 0 9
50503: PUSH
50504: LD_VAR 0 12
50508: PUSH
50509: FOR_IN
50510: IFFALSE 50702
// repeat InitHc ;
50512: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50516: LD_VAR 0 9
50520: PPUSH
50521: CALL_OW 266
50525: PUSH
50526: LD_INT 5
50528: EQUAL
50529: IFFALSE 50599
// begin if UnitsInside ( j ) < 3 then
50531: LD_VAR 0 9
50535: PPUSH
50536: CALL_OW 313
50540: PUSH
50541: LD_INT 3
50543: LESS
50544: IFFALSE 50580
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50546: LD_INT 0
50548: PPUSH
50549: LD_INT 5
50551: PUSH
50552: LD_INT 8
50554: PUSH
50555: LD_INT 9
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: LIST
50562: PUSH
50563: LD_VAR 0 17
50567: ARRAY
50568: PPUSH
50569: LD_VAR 0 4
50573: PPUSH
50574: CALL_OW 380
50578: GO 50597
// PrepareHuman ( false , i , skill ) ;
50580: LD_INT 0
50582: PPUSH
50583: LD_VAR 0 8
50587: PPUSH
50588: LD_VAR 0 4
50592: PPUSH
50593: CALL_OW 380
// end else
50597: GO 50616
// PrepareHuman ( false , i , skill ) ;
50599: LD_INT 0
50601: PPUSH
50602: LD_VAR 0 8
50606: PPUSH
50607: LD_VAR 0 4
50611: PPUSH
50612: CALL_OW 380
// un := CreateHuman ;
50616: LD_ADDR_VAR 0 14
50620: PUSH
50621: CALL_OW 44
50625: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50626: LD_ADDR_VAR 0 7
50630: PUSH
50631: LD_VAR 0 7
50635: PPUSH
50636: LD_INT 1
50638: PPUSH
50639: LD_VAR 0 14
50643: PPUSH
50644: CALL_OW 2
50648: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50649: LD_VAR 0 14
50653: PPUSH
50654: LD_VAR 0 9
50658: PPUSH
50659: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50663: LD_VAR 0 9
50667: PPUSH
50668: CALL_OW 313
50672: PUSH
50673: LD_INT 6
50675: EQUAL
50676: PUSH
50677: LD_VAR 0 9
50681: PPUSH
50682: CALL_OW 266
50686: PUSH
50687: LD_INT 32
50689: PUSH
50690: LD_INT 31
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: IN
50697: OR
50698: IFFALSE 50512
50700: GO 50509
50702: POP
50703: POP
// end else
50704: GO 51086
// for j = 1 to x do
50706: LD_ADDR_VAR 0 9
50710: PUSH
50711: DOUBLE
50712: LD_INT 1
50714: DEC
50715: ST_TO_ADDR
50716: LD_VAR 0 13
50720: PUSH
50721: FOR_TO
50722: IFFALSE 51084
// begin InitHc ;
50724: CALL_OW 19
// if not f then
50728: LD_VAR 0 12
50732: NOT
50733: IFFALSE 50822
// begin PrepareHuman ( false , i , skill ) ;
50735: LD_INT 0
50737: PPUSH
50738: LD_VAR 0 8
50742: PPUSH
50743: LD_VAR 0 4
50747: PPUSH
50748: CALL_OW 380
// un := CreateHuman ;
50752: LD_ADDR_VAR 0 14
50756: PUSH
50757: CALL_OW 44
50761: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50762: LD_ADDR_VAR 0 7
50766: PUSH
50767: LD_VAR 0 7
50771: PPUSH
50772: LD_INT 1
50774: PPUSH
50775: LD_VAR 0 14
50779: PPUSH
50780: CALL_OW 2
50784: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50785: LD_VAR 0 14
50789: PPUSH
50790: LD_VAR 0 1
50794: PPUSH
50795: CALL_OW 250
50799: PPUSH
50800: LD_VAR 0 1
50804: PPUSH
50805: CALL_OW 251
50809: PPUSH
50810: LD_INT 10
50812: PPUSH
50813: LD_INT 0
50815: PPUSH
50816: CALL_OW 50
// continue ;
50820: GO 50721
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50822: LD_VAR 0 12
50826: PUSH
50827: LD_INT 1
50829: ARRAY
50830: PPUSH
50831: CALL_OW 313
50835: PUSH
50836: LD_VAR 0 12
50840: PUSH
50841: LD_INT 1
50843: ARRAY
50844: PPUSH
50845: CALL_OW 266
50849: PUSH
50850: LD_INT 32
50852: PUSH
50853: LD_INT 31
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: IN
50860: AND
50861: PUSH
50862: LD_VAR 0 12
50866: PUSH
50867: LD_INT 1
50869: ARRAY
50870: PPUSH
50871: CALL_OW 313
50875: PUSH
50876: LD_INT 6
50878: EQUAL
50879: OR
50880: IFFALSE 50900
// f := Delete ( f , 1 ) ;
50882: LD_ADDR_VAR 0 12
50886: PUSH
50887: LD_VAR 0 12
50891: PPUSH
50892: LD_INT 1
50894: PPUSH
50895: CALL_OW 3
50899: ST_TO_ADDR
// if not f then
50900: LD_VAR 0 12
50904: NOT
50905: IFFALSE 50923
// begin x := x + 2 ;
50907: LD_ADDR_VAR 0 13
50911: PUSH
50912: LD_VAR 0 13
50916: PUSH
50917: LD_INT 2
50919: PLUS
50920: ST_TO_ADDR
// continue ;
50921: GO 50721
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50923: LD_VAR 0 12
50927: PUSH
50928: LD_INT 1
50930: ARRAY
50931: PPUSH
50932: CALL_OW 266
50936: PUSH
50937: LD_INT 5
50939: EQUAL
50940: IFFALSE 51014
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50942: LD_VAR 0 12
50946: PUSH
50947: LD_INT 1
50949: ARRAY
50950: PPUSH
50951: CALL_OW 313
50955: PUSH
50956: LD_INT 3
50958: LESS
50959: IFFALSE 50995
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50961: LD_INT 0
50963: PPUSH
50964: LD_INT 5
50966: PUSH
50967: LD_INT 8
50969: PUSH
50970: LD_INT 9
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: LIST
50977: PUSH
50978: LD_VAR 0 17
50982: ARRAY
50983: PPUSH
50984: LD_VAR 0 4
50988: PPUSH
50989: CALL_OW 380
50993: GO 51012
// PrepareHuman ( false , i , skill ) ;
50995: LD_INT 0
50997: PPUSH
50998: LD_VAR 0 8
51002: PPUSH
51003: LD_VAR 0 4
51007: PPUSH
51008: CALL_OW 380
// end else
51012: GO 51031
// PrepareHuman ( false , i , skill ) ;
51014: LD_INT 0
51016: PPUSH
51017: LD_VAR 0 8
51021: PPUSH
51022: LD_VAR 0 4
51026: PPUSH
51027: CALL_OW 380
// un := CreateHuman ;
51031: LD_ADDR_VAR 0 14
51035: PUSH
51036: CALL_OW 44
51040: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51041: LD_ADDR_VAR 0 7
51045: PUSH
51046: LD_VAR 0 7
51050: PPUSH
51051: LD_INT 1
51053: PPUSH
51054: LD_VAR 0 14
51058: PPUSH
51059: CALL_OW 2
51063: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51064: LD_VAR 0 14
51068: PPUSH
51069: LD_VAR 0 12
51073: PUSH
51074: LD_INT 1
51076: ARRAY
51077: PPUSH
51078: CALL_OW 52
// end ;
51082: GO 50721
51084: POP
51085: POP
// end ;
51086: GO 50023
51088: POP
51089: POP
// result := result ^ buildings ;
51090: LD_ADDR_VAR 0 7
51094: PUSH
51095: LD_VAR 0 7
51099: PUSH
51100: LD_VAR 0 18
51104: ADD
51105: ST_TO_ADDR
// end else
51106: GO 51249
// begin for i = 1 to personel do
51108: LD_ADDR_VAR 0 8
51112: PUSH
51113: DOUBLE
51114: LD_INT 1
51116: DEC
51117: ST_TO_ADDR
51118: LD_VAR 0 6
51122: PUSH
51123: FOR_TO
51124: IFFALSE 51247
// begin if i > 4 then
51126: LD_VAR 0 8
51130: PUSH
51131: LD_INT 4
51133: GREATER
51134: IFFALSE 51138
// break ;
51136: GO 51247
// x := personel [ i ] ;
51138: LD_ADDR_VAR 0 13
51142: PUSH
51143: LD_VAR 0 6
51147: PUSH
51148: LD_VAR 0 8
51152: ARRAY
51153: ST_TO_ADDR
// if x = - 1 then
51154: LD_VAR 0 13
51158: PUSH
51159: LD_INT 1
51161: NEG
51162: EQUAL
51163: IFFALSE 51167
// continue ;
51165: GO 51123
// PrepareHuman ( false , i , skill ) ;
51167: LD_INT 0
51169: PPUSH
51170: LD_VAR 0 8
51174: PPUSH
51175: LD_VAR 0 4
51179: PPUSH
51180: CALL_OW 380
// un := CreateHuman ;
51184: LD_ADDR_VAR 0 14
51188: PUSH
51189: CALL_OW 44
51193: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51194: LD_VAR 0 14
51198: PPUSH
51199: LD_VAR 0 1
51203: PPUSH
51204: CALL_OW 250
51208: PPUSH
51209: LD_VAR 0 1
51213: PPUSH
51214: CALL_OW 251
51218: PPUSH
51219: LD_INT 10
51221: PPUSH
51222: LD_INT 0
51224: PPUSH
51225: CALL_OW 50
// result := result ^ un ;
51229: LD_ADDR_VAR 0 7
51233: PUSH
51234: LD_VAR 0 7
51238: PUSH
51239: LD_VAR 0 14
51243: ADD
51244: ST_TO_ADDR
// end ;
51245: GO 51123
51247: POP
51248: POP
// end ; end ;
51249: LD_VAR 0 7
51253: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51254: LD_INT 0
51256: PPUSH
51257: PPUSH
51258: PPUSH
51259: PPUSH
51260: PPUSH
51261: PPUSH
51262: PPUSH
51263: PPUSH
51264: PPUSH
51265: PPUSH
51266: PPUSH
51267: PPUSH
51268: PPUSH
51269: PPUSH
51270: PPUSH
51271: PPUSH
// result := false ;
51272: LD_ADDR_VAR 0 3
51276: PUSH
51277: LD_INT 0
51279: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51280: LD_VAR 0 1
51284: NOT
51285: PUSH
51286: LD_VAR 0 1
51290: PPUSH
51291: CALL_OW 266
51295: PUSH
51296: LD_INT 32
51298: PUSH
51299: LD_INT 33
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: IN
51306: NOT
51307: OR
51308: IFFALSE 51312
// exit ;
51310: GO 52448
// nat := GetNation ( tower ) ;
51312: LD_ADDR_VAR 0 12
51316: PUSH
51317: LD_VAR 0 1
51321: PPUSH
51322: CALL_OW 248
51326: ST_TO_ADDR
// side := GetSide ( tower ) ;
51327: LD_ADDR_VAR 0 16
51331: PUSH
51332: LD_VAR 0 1
51336: PPUSH
51337: CALL_OW 255
51341: ST_TO_ADDR
// x := GetX ( tower ) ;
51342: LD_ADDR_VAR 0 10
51346: PUSH
51347: LD_VAR 0 1
51351: PPUSH
51352: CALL_OW 250
51356: ST_TO_ADDR
// y := GetY ( tower ) ;
51357: LD_ADDR_VAR 0 11
51361: PUSH
51362: LD_VAR 0 1
51366: PPUSH
51367: CALL_OW 251
51371: ST_TO_ADDR
// if not x or not y then
51372: LD_VAR 0 10
51376: NOT
51377: PUSH
51378: LD_VAR 0 11
51382: NOT
51383: OR
51384: IFFALSE 51388
// exit ;
51386: GO 52448
// weapon := 0 ;
51388: LD_ADDR_VAR 0 18
51392: PUSH
51393: LD_INT 0
51395: ST_TO_ADDR
// fac_list := [ ] ;
51396: LD_ADDR_VAR 0 17
51400: PUSH
51401: EMPTY
51402: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
51403: LD_ADDR_VAR 0 6
51407: PUSH
51408: LD_VAR 0 1
51412: PPUSH
51413: CALL_OW 274
51417: PPUSH
51418: LD_VAR 0 2
51422: PPUSH
51423: CALL 49026 0 2
51427: PPUSH
51428: LD_INT 30
51430: PUSH
51431: LD_INT 3
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PPUSH
51438: CALL_OW 72
51442: ST_TO_ADDR
// if not factories then
51443: LD_VAR 0 6
51447: NOT
51448: IFFALSE 51452
// exit ;
51450: GO 52448
// for i in factories do
51452: LD_ADDR_VAR 0 8
51456: PUSH
51457: LD_VAR 0 6
51461: PUSH
51462: FOR_IN
51463: IFFALSE 51488
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51465: LD_ADDR_VAR 0 17
51469: PUSH
51470: LD_VAR 0 17
51474: PUSH
51475: LD_VAR 0 8
51479: PPUSH
51480: CALL_OW 478
51484: UNION
51485: ST_TO_ADDR
51486: GO 51462
51488: POP
51489: POP
// if not fac_list then
51490: LD_VAR 0 17
51494: NOT
51495: IFFALSE 51499
// exit ;
51497: GO 52448
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51499: LD_ADDR_VAR 0 5
51503: PUSH
51504: LD_INT 4
51506: PUSH
51507: LD_INT 5
51509: PUSH
51510: LD_INT 9
51512: PUSH
51513: LD_INT 10
51515: PUSH
51516: LD_INT 6
51518: PUSH
51519: LD_INT 7
51521: PUSH
51522: LD_INT 11
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 27
51536: PUSH
51537: LD_INT 28
51539: PUSH
51540: LD_INT 26
51542: PUSH
51543: LD_INT 30
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 43
51554: PUSH
51555: LD_INT 44
51557: PUSH
51558: LD_INT 46
51560: PUSH
51561: LD_INT 45
51563: PUSH
51564: LD_INT 47
51566: PUSH
51567: LD_INT 49
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: LIST
51582: PUSH
51583: LD_VAR 0 12
51587: ARRAY
51588: ST_TO_ADDR
// for i in list do
51589: LD_ADDR_VAR 0 8
51593: PUSH
51594: LD_VAR 0 5
51598: PUSH
51599: FOR_IN
51600: IFFALSE 51633
// if not i in fac_list then
51602: LD_VAR 0 8
51606: PUSH
51607: LD_VAR 0 17
51611: IN
51612: NOT
51613: IFFALSE 51631
// list := list diff i ;
51615: LD_ADDR_VAR 0 5
51619: PUSH
51620: LD_VAR 0 5
51624: PUSH
51625: LD_VAR 0 8
51629: DIFF
51630: ST_TO_ADDR
51631: GO 51599
51633: POP
51634: POP
// if not list then
51635: LD_VAR 0 5
51639: NOT
51640: IFFALSE 51644
// exit ;
51642: GO 52448
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51644: LD_VAR 0 12
51648: PUSH
51649: LD_INT 3
51651: EQUAL
51652: PUSH
51653: LD_INT 49
51655: PUSH
51656: LD_VAR 0 5
51660: IN
51661: AND
51662: PUSH
51663: LD_INT 31
51665: PPUSH
51666: LD_VAR 0 16
51670: PPUSH
51671: CALL_OW 321
51675: PUSH
51676: LD_INT 2
51678: EQUAL
51679: AND
51680: IFFALSE 51740
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51682: LD_INT 22
51684: PUSH
51685: LD_VAR 0 16
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 35
51696: PUSH
51697: LD_INT 49
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 91
51706: PUSH
51707: LD_VAR 0 1
51711: PUSH
51712: LD_INT 10
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: LIST
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: LIST
51724: PPUSH
51725: CALL_OW 69
51729: NOT
51730: IFFALSE 51740
// weapon := ru_time_lapser ;
51732: LD_ADDR_VAR 0 18
51736: PUSH
51737: LD_INT 49
51739: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51740: LD_VAR 0 12
51744: PUSH
51745: LD_INT 1
51747: PUSH
51748: LD_INT 2
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: IN
51755: PUSH
51756: LD_INT 11
51758: PUSH
51759: LD_VAR 0 5
51763: IN
51764: PUSH
51765: LD_INT 30
51767: PUSH
51768: LD_VAR 0 5
51772: IN
51773: OR
51774: AND
51775: PUSH
51776: LD_INT 6
51778: PPUSH
51779: LD_VAR 0 16
51783: PPUSH
51784: CALL_OW 321
51788: PUSH
51789: LD_INT 2
51791: EQUAL
51792: AND
51793: IFFALSE 51958
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51795: LD_INT 22
51797: PUSH
51798: LD_VAR 0 16
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 2
51809: PUSH
51810: LD_INT 35
51812: PUSH
51813: LD_INT 11
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 35
51822: PUSH
51823: LD_INT 30
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 91
51837: PUSH
51838: LD_VAR 0 1
51842: PUSH
51843: LD_INT 18
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: LIST
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: LIST
51855: PPUSH
51856: CALL_OW 69
51860: NOT
51861: PUSH
51862: LD_INT 22
51864: PUSH
51865: LD_VAR 0 16
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 2
51876: PUSH
51877: LD_INT 30
51879: PUSH
51880: LD_INT 32
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 30
51889: PUSH
51890: LD_INT 33
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 91
51904: PUSH
51905: LD_VAR 0 1
51909: PUSH
51910: LD_INT 12
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: LIST
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: LIST
51922: PUSH
51923: EMPTY
51924: LIST
51925: PPUSH
51926: CALL_OW 69
51930: PUSH
51931: LD_INT 2
51933: GREATER
51934: AND
51935: IFFALSE 51958
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51937: LD_ADDR_VAR 0 18
51941: PUSH
51942: LD_INT 11
51944: PUSH
51945: LD_INT 30
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_VAR 0 12
51956: ARRAY
51957: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51958: LD_VAR 0 18
51962: NOT
51963: PUSH
51964: LD_INT 40
51966: PPUSH
51967: LD_VAR 0 16
51971: PPUSH
51972: CALL_OW 321
51976: PUSH
51977: LD_INT 2
51979: EQUAL
51980: AND
51981: PUSH
51982: LD_INT 7
51984: PUSH
51985: LD_VAR 0 5
51989: IN
51990: PUSH
51991: LD_INT 28
51993: PUSH
51994: LD_VAR 0 5
51998: IN
51999: OR
52000: PUSH
52001: LD_INT 45
52003: PUSH
52004: LD_VAR 0 5
52008: IN
52009: OR
52010: AND
52011: IFFALSE 52265
// begin hex := GetHexInfo ( x , y ) ;
52013: LD_ADDR_VAR 0 4
52017: PUSH
52018: LD_VAR 0 10
52022: PPUSH
52023: LD_VAR 0 11
52027: PPUSH
52028: CALL_OW 546
52032: ST_TO_ADDR
// if hex [ 1 ] then
52033: LD_VAR 0 4
52037: PUSH
52038: LD_INT 1
52040: ARRAY
52041: IFFALSE 52045
// exit ;
52043: GO 52448
// height := hex [ 2 ] ;
52045: LD_ADDR_VAR 0 15
52049: PUSH
52050: LD_VAR 0 4
52054: PUSH
52055: LD_INT 2
52057: ARRAY
52058: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52059: LD_ADDR_VAR 0 14
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: LD_INT 2
52069: PUSH
52070: LD_INT 3
52072: PUSH
52073: LD_INT 5
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: ST_TO_ADDR
// for i in tmp do
52082: LD_ADDR_VAR 0 8
52086: PUSH
52087: LD_VAR 0 14
52091: PUSH
52092: FOR_IN
52093: IFFALSE 52263
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52095: LD_ADDR_VAR 0 9
52099: PUSH
52100: LD_VAR 0 10
52104: PPUSH
52105: LD_VAR 0 8
52109: PPUSH
52110: LD_INT 5
52112: PPUSH
52113: CALL_OW 272
52117: PUSH
52118: LD_VAR 0 11
52122: PPUSH
52123: LD_VAR 0 8
52127: PPUSH
52128: LD_INT 5
52130: PPUSH
52131: CALL_OW 273
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52140: LD_VAR 0 9
52144: PUSH
52145: LD_INT 1
52147: ARRAY
52148: PPUSH
52149: LD_VAR 0 9
52153: PUSH
52154: LD_INT 2
52156: ARRAY
52157: PPUSH
52158: CALL_OW 488
52162: IFFALSE 52261
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52164: LD_ADDR_VAR 0 4
52168: PUSH
52169: LD_VAR 0 9
52173: PUSH
52174: LD_INT 1
52176: ARRAY
52177: PPUSH
52178: LD_VAR 0 9
52182: PUSH
52183: LD_INT 2
52185: ARRAY
52186: PPUSH
52187: CALL_OW 546
52191: ST_TO_ADDR
// if hex [ 1 ] then
52192: LD_VAR 0 4
52196: PUSH
52197: LD_INT 1
52199: ARRAY
52200: IFFALSE 52204
// continue ;
52202: GO 52092
// h := hex [ 2 ] ;
52204: LD_ADDR_VAR 0 13
52208: PUSH
52209: LD_VAR 0 4
52213: PUSH
52214: LD_INT 2
52216: ARRAY
52217: ST_TO_ADDR
// if h + 7 < height then
52218: LD_VAR 0 13
52222: PUSH
52223: LD_INT 7
52225: PLUS
52226: PUSH
52227: LD_VAR 0 15
52231: LESS
52232: IFFALSE 52261
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52234: LD_ADDR_VAR 0 18
52238: PUSH
52239: LD_INT 7
52241: PUSH
52242: LD_INT 28
52244: PUSH
52245: LD_INT 45
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: LIST
52252: PUSH
52253: LD_VAR 0 12
52257: ARRAY
52258: ST_TO_ADDR
// break ;
52259: GO 52263
// end ; end ; end ;
52261: GO 52092
52263: POP
52264: POP
// end ; if not weapon then
52265: LD_VAR 0 18
52269: NOT
52270: IFFALSE 52330
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52272: LD_ADDR_VAR 0 5
52276: PUSH
52277: LD_VAR 0 5
52281: PUSH
52282: LD_INT 11
52284: PUSH
52285: LD_INT 30
52287: PUSH
52288: LD_INT 49
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: LIST
52295: DIFF
52296: ST_TO_ADDR
// if not list then
52297: LD_VAR 0 5
52301: NOT
52302: IFFALSE 52306
// exit ;
52304: GO 52448
// weapon := list [ rand ( 1 , list ) ] ;
52306: LD_ADDR_VAR 0 18
52310: PUSH
52311: LD_VAR 0 5
52315: PUSH
52316: LD_INT 1
52318: PPUSH
52319: LD_VAR 0 5
52323: PPUSH
52324: CALL_OW 12
52328: ARRAY
52329: ST_TO_ADDR
// end ; if weapon then
52330: LD_VAR 0 18
52334: IFFALSE 52448
// begin tmp := CostOfWeapon ( weapon ) ;
52336: LD_ADDR_VAR 0 14
52340: PUSH
52341: LD_VAR 0 18
52345: PPUSH
52346: CALL_OW 451
52350: ST_TO_ADDR
// j := GetBase ( tower ) ;
52351: LD_ADDR_VAR 0 9
52355: PUSH
52356: LD_VAR 0 1
52360: PPUSH
52361: CALL_OW 274
52365: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52366: LD_VAR 0 9
52370: PPUSH
52371: LD_INT 1
52373: PPUSH
52374: CALL_OW 275
52378: PUSH
52379: LD_VAR 0 14
52383: PUSH
52384: LD_INT 1
52386: ARRAY
52387: GREATEREQUAL
52388: PUSH
52389: LD_VAR 0 9
52393: PPUSH
52394: LD_INT 2
52396: PPUSH
52397: CALL_OW 275
52401: PUSH
52402: LD_VAR 0 14
52406: PUSH
52407: LD_INT 2
52409: ARRAY
52410: GREATEREQUAL
52411: AND
52412: PUSH
52413: LD_VAR 0 9
52417: PPUSH
52418: LD_INT 3
52420: PPUSH
52421: CALL_OW 275
52425: PUSH
52426: LD_VAR 0 14
52430: PUSH
52431: LD_INT 3
52433: ARRAY
52434: GREATEREQUAL
52435: AND
52436: IFFALSE 52448
// result := weapon ;
52438: LD_ADDR_VAR 0 3
52442: PUSH
52443: LD_VAR 0 18
52447: ST_TO_ADDR
// end ; end ;
52448: LD_VAR 0 3
52452: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52453: LD_INT 0
52455: PPUSH
52456: PPUSH
// result := true ;
52457: LD_ADDR_VAR 0 3
52461: PUSH
52462: LD_INT 1
52464: ST_TO_ADDR
// if array1 = array2 then
52465: LD_VAR 0 1
52469: PUSH
52470: LD_VAR 0 2
52474: EQUAL
52475: IFFALSE 52535
// begin for i = 1 to array1 do
52477: LD_ADDR_VAR 0 4
52481: PUSH
52482: DOUBLE
52483: LD_INT 1
52485: DEC
52486: ST_TO_ADDR
52487: LD_VAR 0 1
52491: PUSH
52492: FOR_TO
52493: IFFALSE 52531
// if array1 [ i ] <> array2 [ i ] then
52495: LD_VAR 0 1
52499: PUSH
52500: LD_VAR 0 4
52504: ARRAY
52505: PUSH
52506: LD_VAR 0 2
52510: PUSH
52511: LD_VAR 0 4
52515: ARRAY
52516: NONEQUAL
52517: IFFALSE 52529
// begin result := false ;
52519: LD_ADDR_VAR 0 3
52523: PUSH
52524: LD_INT 0
52526: ST_TO_ADDR
// break ;
52527: GO 52531
// end ;
52529: GO 52492
52531: POP
52532: POP
// end else
52533: GO 52543
// result := false ;
52535: LD_ADDR_VAR 0 3
52539: PUSH
52540: LD_INT 0
52542: ST_TO_ADDR
// end ;
52543: LD_VAR 0 3
52547: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52548: LD_INT 0
52550: PPUSH
52551: PPUSH
52552: PPUSH
// pom := GetBase ( fac ) ;
52553: LD_ADDR_VAR 0 5
52557: PUSH
52558: LD_VAR 0 1
52562: PPUSH
52563: CALL_OW 274
52567: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52568: LD_ADDR_VAR 0 4
52572: PUSH
52573: LD_VAR 0 2
52577: PUSH
52578: LD_INT 1
52580: ARRAY
52581: PPUSH
52582: LD_VAR 0 2
52586: PUSH
52587: LD_INT 2
52589: ARRAY
52590: PPUSH
52591: LD_VAR 0 2
52595: PUSH
52596: LD_INT 3
52598: ARRAY
52599: PPUSH
52600: LD_VAR 0 2
52604: PUSH
52605: LD_INT 4
52607: ARRAY
52608: PPUSH
52609: CALL_OW 449
52613: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52614: LD_ADDR_VAR 0 3
52618: PUSH
52619: LD_VAR 0 5
52623: PPUSH
52624: LD_INT 1
52626: PPUSH
52627: CALL_OW 275
52631: PUSH
52632: LD_VAR 0 4
52636: PUSH
52637: LD_INT 1
52639: ARRAY
52640: GREATEREQUAL
52641: PUSH
52642: LD_VAR 0 5
52646: PPUSH
52647: LD_INT 2
52649: PPUSH
52650: CALL_OW 275
52654: PUSH
52655: LD_VAR 0 4
52659: PUSH
52660: LD_INT 2
52662: ARRAY
52663: GREATEREQUAL
52664: AND
52665: PUSH
52666: LD_VAR 0 5
52670: PPUSH
52671: LD_INT 3
52673: PPUSH
52674: CALL_OW 275
52678: PUSH
52679: LD_VAR 0 4
52683: PUSH
52684: LD_INT 3
52686: ARRAY
52687: GREATEREQUAL
52688: AND
52689: ST_TO_ADDR
// end ;
52690: LD_VAR 0 3
52694: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52695: LD_INT 0
52697: PPUSH
52698: PPUSH
52699: PPUSH
52700: PPUSH
// pom := GetBase ( building ) ;
52701: LD_ADDR_VAR 0 3
52705: PUSH
52706: LD_VAR 0 1
52710: PPUSH
52711: CALL_OW 274
52715: ST_TO_ADDR
// if not pom then
52716: LD_VAR 0 3
52720: NOT
52721: IFFALSE 52725
// exit ;
52723: GO 52895
// btype := GetBType ( building ) ;
52725: LD_ADDR_VAR 0 5
52729: PUSH
52730: LD_VAR 0 1
52734: PPUSH
52735: CALL_OW 266
52739: ST_TO_ADDR
// if btype = b_armoury then
52740: LD_VAR 0 5
52744: PUSH
52745: LD_INT 4
52747: EQUAL
52748: IFFALSE 52758
// btype := b_barracks ;
52750: LD_ADDR_VAR 0 5
52754: PUSH
52755: LD_INT 5
52757: ST_TO_ADDR
// if btype = b_depot then
52758: LD_VAR 0 5
52762: PUSH
52763: LD_INT 0
52765: EQUAL
52766: IFFALSE 52776
// btype := b_warehouse ;
52768: LD_ADDR_VAR 0 5
52772: PUSH
52773: LD_INT 1
52775: ST_TO_ADDR
// if btype = b_workshop then
52776: LD_VAR 0 5
52780: PUSH
52781: LD_INT 2
52783: EQUAL
52784: IFFALSE 52794
// btype := b_factory ;
52786: LD_ADDR_VAR 0 5
52790: PUSH
52791: LD_INT 3
52793: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52794: LD_ADDR_VAR 0 4
52798: PUSH
52799: LD_VAR 0 5
52803: PPUSH
52804: LD_VAR 0 1
52808: PPUSH
52809: CALL_OW 248
52813: PPUSH
52814: CALL_OW 450
52818: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52819: LD_ADDR_VAR 0 2
52823: PUSH
52824: LD_VAR 0 3
52828: PPUSH
52829: LD_INT 1
52831: PPUSH
52832: CALL_OW 275
52836: PUSH
52837: LD_VAR 0 4
52841: PUSH
52842: LD_INT 1
52844: ARRAY
52845: GREATEREQUAL
52846: PUSH
52847: LD_VAR 0 3
52851: PPUSH
52852: LD_INT 2
52854: PPUSH
52855: CALL_OW 275
52859: PUSH
52860: LD_VAR 0 4
52864: PUSH
52865: LD_INT 2
52867: ARRAY
52868: GREATEREQUAL
52869: AND
52870: PUSH
52871: LD_VAR 0 3
52875: PPUSH
52876: LD_INT 3
52878: PPUSH
52879: CALL_OW 275
52883: PUSH
52884: LD_VAR 0 4
52888: PUSH
52889: LD_INT 3
52891: ARRAY
52892: GREATEREQUAL
52893: AND
52894: ST_TO_ADDR
// end ;
52895: LD_VAR 0 2
52899: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52900: LD_INT 0
52902: PPUSH
52903: PPUSH
52904: PPUSH
// pom := GetBase ( building ) ;
52905: LD_ADDR_VAR 0 4
52909: PUSH
52910: LD_VAR 0 1
52914: PPUSH
52915: CALL_OW 274
52919: ST_TO_ADDR
// if not pom then
52920: LD_VAR 0 4
52924: NOT
52925: IFFALSE 52929
// exit ;
52927: GO 53030
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52929: LD_ADDR_VAR 0 5
52933: PUSH
52934: LD_VAR 0 2
52938: PPUSH
52939: LD_VAR 0 1
52943: PPUSH
52944: CALL_OW 248
52948: PPUSH
52949: CALL_OW 450
52953: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52954: LD_ADDR_VAR 0 3
52958: PUSH
52959: LD_VAR 0 4
52963: PPUSH
52964: LD_INT 1
52966: PPUSH
52967: CALL_OW 275
52971: PUSH
52972: LD_VAR 0 5
52976: PUSH
52977: LD_INT 1
52979: ARRAY
52980: GREATEREQUAL
52981: PUSH
52982: LD_VAR 0 4
52986: PPUSH
52987: LD_INT 2
52989: PPUSH
52990: CALL_OW 275
52994: PUSH
52995: LD_VAR 0 5
52999: PUSH
53000: LD_INT 2
53002: ARRAY
53003: GREATEREQUAL
53004: AND
53005: PUSH
53006: LD_VAR 0 4
53010: PPUSH
53011: LD_INT 3
53013: PPUSH
53014: CALL_OW 275
53018: PUSH
53019: LD_VAR 0 5
53023: PUSH
53024: LD_INT 3
53026: ARRAY
53027: GREATEREQUAL
53028: AND
53029: ST_TO_ADDR
// end ;
53030: LD_VAR 0 3
53034: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
53035: LD_INT 0
53037: PPUSH
53038: PPUSH
53039: PPUSH
53040: PPUSH
53041: PPUSH
53042: PPUSH
53043: PPUSH
53044: PPUSH
53045: PPUSH
53046: PPUSH
// result := false ;
53047: LD_ADDR_VAR 0 6
53051: PUSH
53052: LD_INT 0
53054: ST_TO_ADDR
// if not base or not btype or not x or not y then
53055: LD_VAR 0 1
53059: NOT
53060: PUSH
53061: LD_VAR 0 2
53065: NOT
53066: OR
53067: PUSH
53068: LD_VAR 0 3
53072: NOT
53073: OR
53074: PUSH
53075: LD_VAR 0 4
53079: NOT
53080: OR
53081: IFFALSE 53085
// exit ;
53083: GO 53694
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
53085: LD_ADDR_VAR 0 12
53089: PUSH
53090: LD_VAR 0 2
53094: PPUSH
53095: LD_VAR 0 3
53099: PPUSH
53100: LD_VAR 0 4
53104: PPUSH
53105: LD_VAR 0 5
53109: PPUSH
53110: LD_VAR 0 1
53114: PUSH
53115: LD_INT 1
53117: ARRAY
53118: PPUSH
53119: CALL_OW 248
53123: PPUSH
53124: LD_INT 0
53126: PPUSH
53127: CALL 54531 0 6
53131: ST_TO_ADDR
// if not hexes then
53132: LD_VAR 0 12
53136: NOT
53137: IFFALSE 53141
// exit ;
53139: GO 53694
// for i = 1 to hexes do
53141: LD_ADDR_VAR 0 7
53145: PUSH
53146: DOUBLE
53147: LD_INT 1
53149: DEC
53150: ST_TO_ADDR
53151: LD_VAR 0 12
53155: PUSH
53156: FOR_TO
53157: IFFALSE 53692
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53159: LD_ADDR_VAR 0 11
53163: PUSH
53164: LD_VAR 0 12
53168: PUSH
53169: LD_VAR 0 7
53173: ARRAY
53174: PUSH
53175: LD_INT 1
53177: ARRAY
53178: PPUSH
53179: LD_VAR 0 12
53183: PUSH
53184: LD_VAR 0 7
53188: ARRAY
53189: PUSH
53190: LD_INT 2
53192: ARRAY
53193: PPUSH
53194: CALL_OW 428
53198: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53199: LD_VAR 0 12
53203: PUSH
53204: LD_VAR 0 7
53208: ARRAY
53209: PUSH
53210: LD_INT 1
53212: ARRAY
53213: PPUSH
53214: LD_VAR 0 12
53218: PUSH
53219: LD_VAR 0 7
53223: ARRAY
53224: PUSH
53225: LD_INT 2
53227: ARRAY
53228: PPUSH
53229: CALL_OW 351
53233: PUSH
53234: LD_VAR 0 12
53238: PUSH
53239: LD_VAR 0 7
53243: ARRAY
53244: PUSH
53245: LD_INT 1
53247: ARRAY
53248: PPUSH
53249: LD_VAR 0 12
53253: PUSH
53254: LD_VAR 0 7
53258: ARRAY
53259: PUSH
53260: LD_INT 2
53262: ARRAY
53263: PPUSH
53264: CALL_OW 488
53268: NOT
53269: OR
53270: PUSH
53271: LD_VAR 0 11
53275: PPUSH
53276: CALL_OW 247
53280: PUSH
53281: LD_INT 3
53283: EQUAL
53284: OR
53285: IFFALSE 53291
// exit ;
53287: POP
53288: POP
53289: GO 53694
// if not tmp or not tmp in base then
53291: LD_VAR 0 11
53295: NOT
53296: PUSH
53297: LD_VAR 0 11
53301: PUSH
53302: LD_VAR 0 1
53306: IN
53307: NOT
53308: OR
53309: IFFALSE 53313
// continue ;
53311: GO 53156
// result := true ;
53313: LD_ADDR_VAR 0 6
53317: PUSH
53318: LD_INT 1
53320: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53321: LD_ADDR_VAR 0 15
53325: PUSH
53326: LD_VAR 0 1
53330: PPUSH
53331: LD_INT 22
53333: PUSH
53334: LD_VAR 0 11
53338: PPUSH
53339: CALL_OW 255
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 2
53350: PUSH
53351: LD_INT 30
53353: PUSH
53354: LD_INT 0
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 30
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: LIST
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PPUSH
53380: CALL_OW 72
53384: ST_TO_ADDR
// if dep then
53385: LD_VAR 0 15
53389: IFFALSE 53525
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53391: LD_ADDR_VAR 0 14
53395: PUSH
53396: LD_VAR 0 15
53400: PUSH
53401: LD_INT 1
53403: ARRAY
53404: PPUSH
53405: CALL_OW 250
53409: PPUSH
53410: LD_VAR 0 15
53414: PUSH
53415: LD_INT 1
53417: ARRAY
53418: PPUSH
53419: CALL_OW 254
53423: PPUSH
53424: LD_INT 5
53426: PPUSH
53427: CALL_OW 272
53431: PUSH
53432: LD_VAR 0 15
53436: PUSH
53437: LD_INT 1
53439: ARRAY
53440: PPUSH
53441: CALL_OW 251
53445: PPUSH
53446: LD_VAR 0 15
53450: PUSH
53451: LD_INT 1
53453: ARRAY
53454: PPUSH
53455: CALL_OW 254
53459: PPUSH
53460: LD_INT 5
53462: PPUSH
53463: CALL_OW 273
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53472: LD_VAR 0 14
53476: PUSH
53477: LD_INT 1
53479: ARRAY
53480: PPUSH
53481: LD_VAR 0 14
53485: PUSH
53486: LD_INT 2
53488: ARRAY
53489: PPUSH
53490: CALL_OW 488
53494: IFFALSE 53525
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53496: LD_VAR 0 11
53500: PPUSH
53501: LD_VAR 0 14
53505: PUSH
53506: LD_INT 1
53508: ARRAY
53509: PPUSH
53510: LD_VAR 0 14
53514: PUSH
53515: LD_INT 2
53517: ARRAY
53518: PPUSH
53519: CALL_OW 111
// continue ;
53523: GO 53156
// end ; end ; r := GetDir ( tmp ) ;
53525: LD_ADDR_VAR 0 13
53529: PUSH
53530: LD_VAR 0 11
53534: PPUSH
53535: CALL_OW 254
53539: ST_TO_ADDR
// if r = 5 then
53540: LD_VAR 0 13
53544: PUSH
53545: LD_INT 5
53547: EQUAL
53548: IFFALSE 53558
// r := 0 ;
53550: LD_ADDR_VAR 0 13
53554: PUSH
53555: LD_INT 0
53557: ST_TO_ADDR
// for j = r to 5 do
53558: LD_ADDR_VAR 0 8
53562: PUSH
53563: DOUBLE
53564: LD_VAR 0 13
53568: DEC
53569: ST_TO_ADDR
53570: LD_INT 5
53572: PUSH
53573: FOR_TO
53574: IFFALSE 53688
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53576: LD_ADDR_VAR 0 9
53580: PUSH
53581: LD_VAR 0 11
53585: PPUSH
53586: CALL_OW 250
53590: PPUSH
53591: LD_VAR 0 8
53595: PPUSH
53596: LD_INT 2
53598: PPUSH
53599: CALL_OW 272
53603: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53604: LD_ADDR_VAR 0 10
53608: PUSH
53609: LD_VAR 0 11
53613: PPUSH
53614: CALL_OW 251
53618: PPUSH
53619: LD_VAR 0 8
53623: PPUSH
53624: LD_INT 2
53626: PPUSH
53627: CALL_OW 273
53631: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53632: LD_VAR 0 9
53636: PPUSH
53637: LD_VAR 0 10
53641: PPUSH
53642: CALL_OW 488
53646: PUSH
53647: LD_VAR 0 9
53651: PPUSH
53652: LD_VAR 0 10
53656: PPUSH
53657: CALL_OW 428
53661: NOT
53662: AND
53663: IFFALSE 53686
// begin ComMoveXY ( tmp , _x , _y ) ;
53665: LD_VAR 0 11
53669: PPUSH
53670: LD_VAR 0 9
53674: PPUSH
53675: LD_VAR 0 10
53679: PPUSH
53680: CALL_OW 111
// break ;
53684: GO 53688
// end ; end ;
53686: GO 53573
53688: POP
53689: POP
// end ;
53690: GO 53156
53692: POP
53693: POP
// end ;
53694: LD_VAR 0 6
53698: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
53699: LD_INT 0
53701: PPUSH
53702: PPUSH
53703: PPUSH
53704: PPUSH
53705: PPUSH
53706: PPUSH
53707: PPUSH
53708: PPUSH
53709: PPUSH
53710: PPUSH
// result := false ;
53711: LD_ADDR_VAR 0 6
53715: PUSH
53716: LD_INT 0
53718: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53719: LD_VAR 0 1
53723: NOT
53724: PUSH
53725: LD_VAR 0 1
53729: PPUSH
53730: CALL_OW 266
53734: PUSH
53735: LD_INT 0
53737: PUSH
53738: LD_INT 1
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: IN
53745: NOT
53746: OR
53747: PUSH
53748: LD_VAR 0 2
53752: NOT
53753: OR
53754: PUSH
53755: LD_VAR 0 5
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: LD_INT 1
53765: PUSH
53766: LD_INT 2
53768: PUSH
53769: LD_INT 3
53771: PUSH
53772: LD_INT 4
53774: PUSH
53775: LD_INT 5
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: IN
53786: NOT
53787: OR
53788: PUSH
53789: LD_VAR 0 3
53793: PPUSH
53794: LD_VAR 0 4
53798: PPUSH
53799: CALL_OW 488
53803: NOT
53804: OR
53805: IFFALSE 53809
// exit ;
53807: GO 54526
// pom := GetBase ( depot ) ;
53809: LD_ADDR_VAR 0 10
53813: PUSH
53814: LD_VAR 0 1
53818: PPUSH
53819: CALL_OW 274
53823: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53824: LD_ADDR_VAR 0 11
53828: PUSH
53829: LD_VAR 0 2
53833: PPUSH
53834: LD_VAR 0 1
53838: PPUSH
53839: CALL_OW 248
53843: PPUSH
53844: CALL_OW 450
53848: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53849: LD_VAR 0 10
53853: PPUSH
53854: LD_INT 1
53856: PPUSH
53857: CALL_OW 275
53861: PUSH
53862: LD_VAR 0 11
53866: PUSH
53867: LD_INT 1
53869: ARRAY
53870: GREATEREQUAL
53871: PUSH
53872: LD_VAR 0 10
53876: PPUSH
53877: LD_INT 2
53879: PPUSH
53880: CALL_OW 275
53884: PUSH
53885: LD_VAR 0 11
53889: PUSH
53890: LD_INT 2
53892: ARRAY
53893: GREATEREQUAL
53894: AND
53895: PUSH
53896: LD_VAR 0 10
53900: PPUSH
53901: LD_INT 3
53903: PPUSH
53904: CALL_OW 275
53908: PUSH
53909: LD_VAR 0 11
53913: PUSH
53914: LD_INT 3
53916: ARRAY
53917: GREATEREQUAL
53918: AND
53919: NOT
53920: IFFALSE 53924
// exit ;
53922: GO 54526
// if GetBType ( depot ) = b_depot then
53924: LD_VAR 0 1
53928: PPUSH
53929: CALL_OW 266
53933: PUSH
53934: LD_INT 0
53936: EQUAL
53937: IFFALSE 53949
// dist := 28 else
53939: LD_ADDR_VAR 0 14
53943: PUSH
53944: LD_INT 28
53946: ST_TO_ADDR
53947: GO 53957
// dist := 36 ;
53949: LD_ADDR_VAR 0 14
53953: PUSH
53954: LD_INT 36
53956: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53957: LD_VAR 0 1
53961: PPUSH
53962: LD_VAR 0 3
53966: PPUSH
53967: LD_VAR 0 4
53971: PPUSH
53972: CALL_OW 297
53976: PUSH
53977: LD_VAR 0 14
53981: GREATER
53982: IFFALSE 53986
// exit ;
53984: GO 54526
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53986: LD_ADDR_VAR 0 12
53990: PUSH
53991: LD_VAR 0 2
53995: PPUSH
53996: LD_VAR 0 3
54000: PPUSH
54001: LD_VAR 0 4
54005: PPUSH
54006: LD_VAR 0 5
54010: PPUSH
54011: LD_VAR 0 1
54015: PPUSH
54016: CALL_OW 248
54020: PPUSH
54021: LD_INT 0
54023: PPUSH
54024: CALL 54531 0 6
54028: ST_TO_ADDR
// if not hexes then
54029: LD_VAR 0 12
54033: NOT
54034: IFFALSE 54038
// exit ;
54036: GO 54526
// hex := GetHexInfo ( x , y ) ;
54038: LD_ADDR_VAR 0 15
54042: PUSH
54043: LD_VAR 0 3
54047: PPUSH
54048: LD_VAR 0 4
54052: PPUSH
54053: CALL_OW 546
54057: ST_TO_ADDR
// if hex [ 1 ] then
54058: LD_VAR 0 15
54062: PUSH
54063: LD_INT 1
54065: ARRAY
54066: IFFALSE 54070
// exit ;
54068: GO 54526
// height := hex [ 2 ] ;
54070: LD_ADDR_VAR 0 13
54074: PUSH
54075: LD_VAR 0 15
54079: PUSH
54080: LD_INT 2
54082: ARRAY
54083: ST_TO_ADDR
// for i = 1 to hexes do
54084: LD_ADDR_VAR 0 7
54088: PUSH
54089: DOUBLE
54090: LD_INT 1
54092: DEC
54093: ST_TO_ADDR
54094: LD_VAR 0 12
54098: PUSH
54099: FOR_TO
54100: IFFALSE 54430
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54102: LD_VAR 0 12
54106: PUSH
54107: LD_VAR 0 7
54111: ARRAY
54112: PUSH
54113: LD_INT 1
54115: ARRAY
54116: PPUSH
54117: LD_VAR 0 12
54121: PUSH
54122: LD_VAR 0 7
54126: ARRAY
54127: PUSH
54128: LD_INT 2
54130: ARRAY
54131: PPUSH
54132: CALL_OW 488
54136: NOT
54137: PUSH
54138: LD_VAR 0 12
54142: PUSH
54143: LD_VAR 0 7
54147: ARRAY
54148: PUSH
54149: LD_INT 1
54151: ARRAY
54152: PPUSH
54153: LD_VAR 0 12
54157: PUSH
54158: LD_VAR 0 7
54162: ARRAY
54163: PUSH
54164: LD_INT 2
54166: ARRAY
54167: PPUSH
54168: CALL_OW 428
54172: PUSH
54173: LD_INT 0
54175: GREATER
54176: OR
54177: PUSH
54178: LD_VAR 0 12
54182: PUSH
54183: LD_VAR 0 7
54187: ARRAY
54188: PUSH
54189: LD_INT 1
54191: ARRAY
54192: PPUSH
54193: LD_VAR 0 12
54197: PUSH
54198: LD_VAR 0 7
54202: ARRAY
54203: PUSH
54204: LD_INT 2
54206: ARRAY
54207: PPUSH
54208: CALL_OW 351
54212: OR
54213: IFFALSE 54219
// exit ;
54215: POP
54216: POP
54217: GO 54526
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54219: LD_ADDR_VAR 0 8
54223: PUSH
54224: LD_VAR 0 12
54228: PUSH
54229: LD_VAR 0 7
54233: ARRAY
54234: PUSH
54235: LD_INT 1
54237: ARRAY
54238: PPUSH
54239: LD_VAR 0 12
54243: PUSH
54244: LD_VAR 0 7
54248: ARRAY
54249: PUSH
54250: LD_INT 2
54252: ARRAY
54253: PPUSH
54254: CALL_OW 546
54258: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54259: LD_VAR 0 8
54263: PUSH
54264: LD_INT 1
54266: ARRAY
54267: PUSH
54268: LD_VAR 0 8
54272: PUSH
54273: LD_INT 2
54275: ARRAY
54276: PUSH
54277: LD_VAR 0 13
54281: PUSH
54282: LD_INT 2
54284: PLUS
54285: GREATER
54286: OR
54287: PUSH
54288: LD_VAR 0 8
54292: PUSH
54293: LD_INT 2
54295: ARRAY
54296: PUSH
54297: LD_VAR 0 13
54301: PUSH
54302: LD_INT 2
54304: MINUS
54305: LESS
54306: OR
54307: PUSH
54308: LD_VAR 0 8
54312: PUSH
54313: LD_INT 3
54315: ARRAY
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: LD_INT 8
54322: PUSH
54323: LD_INT 9
54325: PUSH
54326: LD_INT 10
54328: PUSH
54329: LD_INT 11
54331: PUSH
54332: LD_INT 12
54334: PUSH
54335: LD_INT 13
54337: PUSH
54338: LD_INT 16
54340: PUSH
54341: LD_INT 17
54343: PUSH
54344: LD_INT 18
54346: PUSH
54347: LD_INT 19
54349: PUSH
54350: LD_INT 20
54352: PUSH
54353: LD_INT 21
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: IN
54371: NOT
54372: OR
54373: PUSH
54374: LD_VAR 0 8
54378: PUSH
54379: LD_INT 5
54381: ARRAY
54382: NOT
54383: OR
54384: PUSH
54385: LD_VAR 0 8
54389: PUSH
54390: LD_INT 6
54392: ARRAY
54393: PUSH
54394: LD_INT 1
54396: PUSH
54397: LD_INT 2
54399: PUSH
54400: LD_INT 7
54402: PUSH
54403: LD_INT 9
54405: PUSH
54406: LD_INT 10
54408: PUSH
54409: LD_INT 11
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: IN
54420: NOT
54421: OR
54422: IFFALSE 54428
// exit ;
54424: POP
54425: POP
54426: GO 54526
// end ;
54428: GO 54099
54430: POP
54431: POP
// side := GetSide ( depot ) ;
54432: LD_ADDR_VAR 0 9
54436: PUSH
54437: LD_VAR 0 1
54441: PPUSH
54442: CALL_OW 255
54446: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54447: LD_VAR 0 9
54451: PPUSH
54452: LD_VAR 0 3
54456: PPUSH
54457: LD_VAR 0 4
54461: PPUSH
54462: LD_INT 20
54464: PPUSH
54465: CALL 47180 0 4
54469: PUSH
54470: LD_INT 4
54472: ARRAY
54473: IFFALSE 54477
// exit ;
54475: GO 54526
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54477: LD_VAR 0 2
54481: PUSH
54482: LD_INT 29
54484: PUSH
54485: LD_INT 30
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: IN
54492: PUSH
54493: LD_VAR 0 3
54497: PPUSH
54498: LD_VAR 0 4
54502: PPUSH
54503: LD_VAR 0 9
54507: PPUSH
54508: CALL_OW 440
54512: NOT
54513: AND
54514: IFFALSE 54518
// exit ;
54516: GO 54526
// result := true ;
54518: LD_ADDR_VAR 0 6
54522: PUSH
54523: LD_INT 1
54525: ST_TO_ADDR
// end ;
54526: LD_VAR 0 6
54530: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54531: LD_INT 0
54533: PPUSH
54534: PPUSH
54535: PPUSH
54536: PPUSH
54537: PPUSH
54538: PPUSH
54539: PPUSH
54540: PPUSH
54541: PPUSH
54542: PPUSH
54543: PPUSH
54544: PPUSH
54545: PPUSH
54546: PPUSH
54547: PPUSH
54548: PPUSH
54549: PPUSH
54550: PPUSH
54551: PPUSH
54552: PPUSH
54553: PPUSH
54554: PPUSH
54555: PPUSH
54556: PPUSH
54557: PPUSH
54558: PPUSH
54559: PPUSH
54560: PPUSH
54561: PPUSH
54562: PPUSH
54563: PPUSH
54564: PPUSH
54565: PPUSH
54566: PPUSH
54567: PPUSH
54568: PPUSH
54569: PPUSH
54570: PPUSH
54571: PPUSH
54572: PPUSH
54573: PPUSH
54574: PPUSH
54575: PPUSH
54576: PPUSH
54577: PPUSH
54578: PPUSH
54579: PPUSH
54580: PPUSH
54581: PPUSH
54582: PPUSH
54583: PPUSH
54584: PPUSH
54585: PPUSH
54586: PPUSH
54587: PPUSH
54588: PPUSH
54589: PPUSH
54590: PPUSH
// result = [ ] ;
54591: LD_ADDR_VAR 0 7
54595: PUSH
54596: EMPTY
54597: ST_TO_ADDR
// temp_list = [ ] ;
54598: LD_ADDR_VAR 0 9
54602: PUSH
54603: EMPTY
54604: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54605: LD_VAR 0 4
54609: PUSH
54610: LD_INT 0
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: LD_INT 2
54618: PUSH
54619: LD_INT 3
54621: PUSH
54622: LD_INT 4
54624: PUSH
54625: LD_INT 5
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: IN
54636: NOT
54637: PUSH
54638: LD_VAR 0 1
54642: PUSH
54643: LD_INT 0
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: IN
54653: PUSH
54654: LD_VAR 0 5
54658: PUSH
54659: LD_INT 1
54661: PUSH
54662: LD_INT 2
54664: PUSH
54665: LD_INT 3
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: LIST
54672: IN
54673: NOT
54674: AND
54675: OR
54676: IFFALSE 54680
// exit ;
54678: GO 73071
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54680: LD_VAR 0 1
54684: PUSH
54685: LD_INT 6
54687: PUSH
54688: LD_INT 7
54690: PUSH
54691: LD_INT 8
54693: PUSH
54694: LD_INT 13
54696: PUSH
54697: LD_INT 12
54699: PUSH
54700: LD_INT 15
54702: PUSH
54703: LD_INT 11
54705: PUSH
54706: LD_INT 14
54708: PUSH
54709: LD_INT 10
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: IN
54723: IFFALSE 54733
// btype = b_lab ;
54725: LD_ADDR_VAR 0 1
54729: PUSH
54730: LD_INT 6
54732: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54733: LD_VAR 0 6
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: LD_INT 2
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: LIST
54751: IN
54752: NOT
54753: PUSH
54754: LD_VAR 0 1
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: LD_INT 1
54764: PUSH
54765: LD_INT 2
54767: PUSH
54768: LD_INT 3
54770: PUSH
54771: LD_INT 6
54773: PUSH
54774: LD_INT 36
54776: PUSH
54777: LD_INT 4
54779: PUSH
54780: LD_INT 5
54782: PUSH
54783: LD_INT 31
54785: PUSH
54786: LD_INT 32
54788: PUSH
54789: LD_INT 33
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: IN
54805: NOT
54806: PUSH
54807: LD_VAR 0 6
54811: PUSH
54812: LD_INT 1
54814: EQUAL
54815: AND
54816: OR
54817: PUSH
54818: LD_VAR 0 1
54822: PUSH
54823: LD_INT 2
54825: PUSH
54826: LD_INT 3
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: IN
54833: NOT
54834: PUSH
54835: LD_VAR 0 6
54839: PUSH
54840: LD_INT 2
54842: EQUAL
54843: AND
54844: OR
54845: IFFALSE 54855
// mode = 0 ;
54847: LD_ADDR_VAR 0 6
54851: PUSH
54852: LD_INT 0
54854: ST_TO_ADDR
// case mode of 0 :
54855: LD_VAR 0 6
54859: PUSH
54860: LD_INT 0
54862: DOUBLE
54863: EQUAL
54864: IFTRUE 54868
54866: GO 66321
54868: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54869: LD_ADDR_VAR 0 11
54873: PUSH
54874: LD_INT 0
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: LD_INT 1
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 1
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 1
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 1
54927: NEG
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 1
54938: NEG
54939: PUSH
54940: LD_INT 1
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 1
54950: NEG
54951: PUSH
54952: LD_INT 2
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: LD_INT 2
54965: NEG
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 1
54973: PUSH
54974: LD_INT 1
54976: NEG
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 1
54984: PUSH
54985: LD_INT 2
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: LD_INT 2
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: NEG
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: LD_INT 3
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: LD_INT 3
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: LD_INT 2
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55062: LD_ADDR_VAR 0 12
55066: PUSH
55067: LD_INT 0
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: LD_INT 1
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 1
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 1
55100: PUSH
55101: LD_INT 1
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: LD_INT 1
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: LD_INT 0
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: NEG
55132: PUSH
55133: LD_INT 1
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 1
55143: PUSH
55144: LD_INT 1
55146: NEG
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 2
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 2
55164: PUSH
55165: LD_INT 1
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: NEG
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 2
55185: NEG
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 2
55196: NEG
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 2
55208: NEG
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 3
55219: NEG
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 3
55230: NEG
55231: PUSH
55232: LD_INT 1
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55258: LD_ADDR_VAR 0 13
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 1
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: NEG
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: LD_INT 1
55331: NEG
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 1
55339: NEG
55340: PUSH
55341: LD_INT 2
55343: NEG
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 2
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 2
55361: PUSH
55362: LD_INT 2
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 1
55371: PUSH
55372: LD_INT 2
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 2
55381: NEG
55382: PUSH
55383: LD_INT 1
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 2
55393: NEG
55394: PUSH
55395: LD_INT 2
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 2
55405: NEG
55406: PUSH
55407: LD_INT 3
55409: NEG
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 3
55417: NEG
55418: PUSH
55419: LD_INT 2
55421: NEG
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 3
55429: NEG
55430: PUSH
55431: LD_INT 3
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55457: LD_ADDR_VAR 0 14
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 0
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 1
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: LD_INT 1
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 1
55515: NEG
55516: PUSH
55517: LD_INT 0
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 1
55526: NEG
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 1
55538: NEG
55539: PUSH
55540: LD_INT 2
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 0
55550: PUSH
55551: LD_INT 2
55553: NEG
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 1
55561: PUSH
55562: LD_INT 1
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: LD_INT 2
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: LD_INT 2
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: LD_INT 3
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: LD_INT 3
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 1
55626: PUSH
55627: LD_INT 2
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55653: LD_ADDR_VAR 0 15
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: LD_INT 1
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: LD_INT 1
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: LD_INT 1
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: NEG
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 1
55734: PUSH
55735: LD_INT 1
55737: NEG
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 2
55745: PUSH
55746: LD_INT 0
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 2
55755: PUSH
55756: LD_INT 1
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 1
55765: NEG
55766: PUSH
55767: LD_INT 1
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 2
55776: NEG
55777: PUSH
55778: LD_INT 0
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 2
55787: NEG
55788: PUSH
55789: LD_INT 1
55791: NEG
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 2
55799: PUSH
55800: LD_INT 1
55802: NEG
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 3
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 3
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55846: LD_ADDR_VAR 0 16
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: LD_INT 1
55866: NEG
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: PUSH
55885: LD_INT 1
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: LD_INT 1
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 1
55904: NEG
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 1
55915: NEG
55916: PUSH
55917: LD_INT 1
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: LD_INT 2
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 2
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 2
55949: PUSH
55950: LD_INT 2
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: LD_INT 2
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 2
55969: NEG
55970: PUSH
55971: LD_INT 1
55973: NEG
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 2
55981: NEG
55982: PUSH
55983: LD_INT 2
55985: NEG
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 3
55993: PUSH
55994: LD_INT 2
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 3
56003: PUSH
56004: LD_INT 3
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 2
56013: PUSH
56014: LD_INT 3
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56039: LD_ADDR_VAR 0 17
56043: PUSH
56044: LD_INT 0
56046: PUSH
56047: LD_INT 0
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 0
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 0
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: NEG
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 1
56108: NEG
56109: PUSH
56110: LD_INT 1
56112: NEG
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 1
56120: NEG
56121: PUSH
56122: LD_INT 2
56124: NEG
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: LD_INT 2
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: LD_INT 1
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 2
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 2
56164: PUSH
56165: LD_INT 1
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 2
56174: PUSH
56175: LD_INT 2
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 1
56184: PUSH
56185: LD_INT 2
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: LD_INT 2
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: NEG
56205: PUSH
56206: LD_INT 1
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 2
56215: NEG
56216: PUSH
56217: LD_INT 0
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 2
56226: NEG
56227: PUSH
56228: LD_INT 1
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 2
56238: NEG
56239: PUSH
56240: LD_INT 2
56242: NEG
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56269: LD_ADDR_VAR 0 18
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: LD_INT 0
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: LD_INT 1
56289: NEG
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 1
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: LD_INT 1
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: LD_INT 1
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 1
56338: NEG
56339: PUSH
56340: LD_INT 1
56342: NEG
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 1
56350: NEG
56351: PUSH
56352: LD_INT 2
56354: NEG
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: LD_INT 2
56365: NEG
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 1
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 2
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 2
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 2
56404: PUSH
56405: LD_INT 2
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 1
56414: PUSH
56415: LD_INT 2
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 0
56424: PUSH
56425: LD_INT 2
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 1
56434: NEG
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 2
56445: NEG
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 2
56456: NEG
56457: PUSH
56458: LD_INT 1
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 2
56468: NEG
56469: PUSH
56470: LD_INT 2
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56499: LD_ADDR_VAR 0 19
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: LD_INT 1
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 1
56568: NEG
56569: PUSH
56570: LD_INT 1
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: NEG
56581: PUSH
56582: LD_INT 2
56584: NEG
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: LD_INT 2
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: LD_INT 1
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 2
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 2
56624: PUSH
56625: LD_INT 1
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 2
56634: PUSH
56635: LD_INT 2
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: LD_INT 2
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: LD_INT 2
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: LD_INT 1
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 2
56675: NEG
56676: PUSH
56677: LD_INT 0
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 2
56686: NEG
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 2
56698: NEG
56699: PUSH
56700: LD_INT 2
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56729: LD_ADDR_VAR 0 20
56733: PUSH
56734: LD_INT 0
56736: PUSH
56737: LD_INT 0
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: LD_INT 1
56749: NEG
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 1
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 1
56767: PUSH
56768: LD_INT 1
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: LD_INT 1
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: NEG
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: NEG
56799: PUSH
56800: LD_INT 1
56802: NEG
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 1
56810: NEG
56811: PUSH
56812: LD_INT 2
56814: NEG
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: LD_INT 2
56825: NEG
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: LD_INT 1
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 2
56844: PUSH
56845: LD_INT 0
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 2
56854: PUSH
56855: LD_INT 1
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 2
56864: PUSH
56865: LD_INT 2
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 1
56874: PUSH
56875: LD_INT 2
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: LD_INT 2
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: NEG
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 2
56905: NEG
56906: PUSH
56907: LD_INT 0
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 2
56916: NEG
56917: PUSH
56918: LD_INT 1
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 2
56928: NEG
56929: PUSH
56930: LD_INT 2
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56959: LD_ADDR_VAR 0 21
56963: PUSH
56964: LD_INT 0
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: LD_INT 1
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 1
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 1
57017: NEG
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: LD_INT 1
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 1
57040: NEG
57041: PUSH
57042: LD_INT 2
57044: NEG
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: LD_INT 2
57055: NEG
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 2
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 2
57084: PUSH
57085: LD_INT 1
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 2
57094: PUSH
57095: LD_INT 2
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 1
57104: PUSH
57105: LD_INT 2
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: LD_INT 2
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: NEG
57125: PUSH
57126: LD_INT 1
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 2
57135: NEG
57136: PUSH
57137: LD_INT 0
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 2
57146: NEG
57147: PUSH
57148: LD_INT 1
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 2
57158: NEG
57159: PUSH
57160: LD_INT 2
57162: NEG
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57189: LD_ADDR_VAR 0 22
57193: PUSH
57194: LD_INT 0
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: LD_INT 1
57209: NEG
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 1
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 1
57227: PUSH
57228: LD_INT 1
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 0
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 1
57247: NEG
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 1
57258: NEG
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 1
57270: NEG
57271: PUSH
57272: LD_INT 2
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 0
57282: PUSH
57283: LD_INT 2
57285: NEG
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 1
57293: PUSH
57294: LD_INT 1
57296: NEG
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 2
57304: PUSH
57305: LD_INT 0
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 2
57314: PUSH
57315: LD_INT 1
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 2
57324: PUSH
57325: LD_INT 2
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 1
57334: PUSH
57335: LD_INT 2
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: LD_INT 2
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: NEG
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 2
57365: NEG
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 2
57376: NEG
57377: PUSH
57378: LD_INT 1
57380: NEG
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 2
57388: NEG
57389: PUSH
57390: LD_INT 2
57392: NEG
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57419: LD_ADDR_VAR 0 23
57423: PUSH
57424: LD_INT 0
57426: PUSH
57427: LD_INT 0
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 0
57436: PUSH
57437: LD_INT 1
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 1
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 1
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 1
57477: NEG
57478: PUSH
57479: LD_INT 0
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 1
57488: NEG
57489: PUSH
57490: LD_INT 1
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: LD_INT 2
57504: NEG
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: LD_INT 2
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 1
57523: PUSH
57524: LD_INT 1
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 2
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 2
57544: PUSH
57545: LD_INT 1
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 2
57554: PUSH
57555: LD_INT 2
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 1
57564: PUSH
57565: LD_INT 2
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: LD_INT 2
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: NEG
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 2
57595: NEG
57596: PUSH
57597: LD_INT 0
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 2
57606: NEG
57607: PUSH
57608: LD_INT 1
57610: NEG
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 2
57618: NEG
57619: PUSH
57620: LD_INT 2
57622: NEG
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 2
57630: NEG
57631: PUSH
57632: LD_INT 3
57634: NEG
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 1
57642: NEG
57643: PUSH
57644: LD_INT 3
57646: NEG
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 1
57654: PUSH
57655: LD_INT 2
57657: NEG
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 2
57665: PUSH
57666: LD_INT 1
57668: NEG
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57699: LD_ADDR_VAR 0 24
57703: PUSH
57704: LD_INT 0
57706: PUSH
57707: LD_INT 0
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 0
57716: PUSH
57717: LD_INT 1
57719: NEG
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 1
57727: PUSH
57728: LD_INT 0
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 1
57737: PUSH
57738: LD_INT 1
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: LD_INT 1
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 1
57757: NEG
57758: PUSH
57759: LD_INT 0
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 1
57768: NEG
57769: PUSH
57770: LD_INT 1
57772: NEG
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 1
57780: NEG
57781: PUSH
57782: LD_INT 2
57784: NEG
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 0
57792: PUSH
57793: LD_INT 2
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 1
57803: PUSH
57804: LD_INT 1
57806: NEG
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 2
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 2
57824: PUSH
57825: LD_INT 1
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 2
57834: PUSH
57835: LD_INT 2
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 1
57844: PUSH
57845: LD_INT 2
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 0
57854: PUSH
57855: LD_INT 2
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 1
57864: NEG
57865: PUSH
57866: LD_INT 1
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 2
57875: NEG
57876: PUSH
57877: LD_INT 0
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 2
57886: NEG
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 2
57898: NEG
57899: PUSH
57900: LD_INT 2
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 1
57910: PUSH
57911: LD_INT 2
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 2
57921: PUSH
57922: LD_INT 1
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 3
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 3
57942: PUSH
57943: LD_INT 2
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57975: LD_ADDR_VAR 0 25
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: LD_INT 0
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 0
57992: PUSH
57993: LD_INT 1
57995: NEG
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 1
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 1
58013: PUSH
58014: LD_INT 1
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 0
58023: PUSH
58024: LD_INT 1
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 1
58033: NEG
58034: PUSH
58035: LD_INT 0
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 1
58044: NEG
58045: PUSH
58046: LD_INT 1
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 1
58056: NEG
58057: PUSH
58058: LD_INT 2
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 0
58068: PUSH
58069: LD_INT 2
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 1
58079: PUSH
58080: LD_INT 1
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 2
58090: PUSH
58091: LD_INT 0
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 2
58100: PUSH
58101: LD_INT 1
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 2
58110: PUSH
58111: LD_INT 2
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 1
58120: PUSH
58121: LD_INT 2
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: LD_INT 2
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 1
58140: NEG
58141: PUSH
58142: LD_INT 1
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 2
58151: NEG
58152: PUSH
58153: LD_INT 0
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 2
58162: NEG
58163: PUSH
58164: LD_INT 1
58166: NEG
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 2
58174: NEG
58175: PUSH
58176: LD_INT 2
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 3
58186: PUSH
58187: LD_INT 1
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 3
58196: PUSH
58197: LD_INT 2
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 2
58206: PUSH
58207: LD_INT 3
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: LD_INT 3
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58249: LD_ADDR_VAR 0 26
58253: PUSH
58254: LD_INT 0
58256: PUSH
58257: LD_INT 0
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 0
58266: PUSH
58267: LD_INT 1
58269: NEG
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 1
58277: PUSH
58278: LD_INT 0
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 1
58287: PUSH
58288: LD_INT 1
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 0
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 1
58307: NEG
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 1
58318: NEG
58319: PUSH
58320: LD_INT 1
58322: NEG
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 1
58330: NEG
58331: PUSH
58332: LD_INT 2
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 0
58342: PUSH
58343: LD_INT 2
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: LD_INT 1
58356: NEG
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 2
58364: PUSH
58365: LD_INT 0
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 2
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 2
58384: PUSH
58385: LD_INT 2
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 1
58394: PUSH
58395: LD_INT 2
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: LD_INT 2
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 1
58414: NEG
58415: PUSH
58416: LD_INT 1
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 2
58425: NEG
58426: PUSH
58427: LD_INT 0
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 2
58436: NEG
58437: PUSH
58438: LD_INT 1
58440: NEG
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 2
58448: NEG
58449: PUSH
58450: LD_INT 2
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 2
58460: PUSH
58461: LD_INT 3
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 1
58470: PUSH
58471: LD_INT 3
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 1
58480: NEG
58481: PUSH
58482: LD_INT 2
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 2
58491: NEG
58492: PUSH
58493: LD_INT 1
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58525: LD_ADDR_VAR 0 27
58529: PUSH
58530: LD_INT 0
58532: PUSH
58533: LD_INT 0
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 0
58542: PUSH
58543: LD_INT 1
58545: NEG
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 1
58553: PUSH
58554: LD_INT 0
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 1
58563: PUSH
58564: LD_INT 1
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 0
58573: PUSH
58574: LD_INT 1
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 1
58583: NEG
58584: PUSH
58585: LD_INT 0
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 1
58594: NEG
58595: PUSH
58596: LD_INT 1
58598: NEG
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 1
58606: NEG
58607: PUSH
58608: LD_INT 2
58610: NEG
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 0
58618: PUSH
58619: LD_INT 2
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 1
58629: PUSH
58630: LD_INT 1
58632: NEG
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 2
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 2
58650: PUSH
58651: LD_INT 1
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 2
58660: PUSH
58661: LD_INT 2
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 1
58670: PUSH
58671: LD_INT 2
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 0
58680: PUSH
58681: LD_INT 2
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 1
58690: NEG
58691: PUSH
58692: LD_INT 1
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 2
58701: NEG
58702: PUSH
58703: LD_INT 0
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 2
58712: NEG
58713: PUSH
58714: LD_INT 1
58716: NEG
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 2
58724: NEG
58725: PUSH
58726: LD_INT 2
58728: NEG
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: LD_INT 2
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 2
58747: NEG
58748: PUSH
58749: LD_INT 1
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 3
58758: NEG
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 3
58770: NEG
58771: PUSH
58772: LD_INT 2
58774: NEG
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58805: LD_ADDR_VAR 0 28
58809: PUSH
58810: LD_INT 0
58812: PUSH
58813: LD_INT 0
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: LD_INT 1
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 1
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 1
58843: PUSH
58844: LD_INT 1
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 0
58853: PUSH
58854: LD_INT 1
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 1
58863: NEG
58864: PUSH
58865: LD_INT 0
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 1
58874: NEG
58875: PUSH
58876: LD_INT 1
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 1
58886: NEG
58887: PUSH
58888: LD_INT 2
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: LD_INT 2
58901: NEG
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 1
58909: PUSH
58910: LD_INT 1
58912: NEG
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 2
58920: PUSH
58921: LD_INT 0
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 2
58930: PUSH
58931: LD_INT 1
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 2
58940: PUSH
58941: LD_INT 2
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 1
58950: PUSH
58951: LD_INT 2
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: LD_INT 2
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 1
58970: NEG
58971: PUSH
58972: LD_INT 1
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 2
58981: NEG
58982: PUSH
58983: LD_INT 0
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 2
58992: NEG
58993: PUSH
58994: LD_INT 1
58996: NEG
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 2
59004: NEG
59005: PUSH
59006: LD_INT 2
59008: NEG
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 2
59016: NEG
59017: PUSH
59018: LD_INT 3
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 1
59028: NEG
59029: PUSH
59030: LD_INT 3
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 3
59040: NEG
59041: PUSH
59042: LD_INT 1
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 3
59052: NEG
59053: PUSH
59054: LD_INT 2
59056: NEG
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59087: LD_ADDR_VAR 0 29
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: LD_INT 1
59107: NEG
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 1
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 1
59125: PUSH
59126: LD_INT 1
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 0
59135: PUSH
59136: LD_INT 1
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 1
59145: NEG
59146: PUSH
59147: LD_INT 0
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 1
59156: NEG
59157: PUSH
59158: LD_INT 1
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 1
59168: NEG
59169: PUSH
59170: LD_INT 2
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 0
59180: PUSH
59181: LD_INT 2
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 1
59191: PUSH
59192: LD_INT 1
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 2
59202: PUSH
59203: LD_INT 0
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 2
59212: PUSH
59213: LD_INT 1
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: LD_INT 2
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 0
59232: PUSH
59233: LD_INT 2
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 1
59242: NEG
59243: PUSH
59244: LD_INT 1
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 2
59253: NEG
59254: PUSH
59255: LD_INT 1
59257: NEG
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 2
59265: NEG
59266: PUSH
59267: LD_INT 2
59269: NEG
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 2
59277: NEG
59278: PUSH
59279: LD_INT 3
59281: NEG
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 2
59289: PUSH
59290: LD_INT 1
59292: NEG
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 3
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 1
59310: PUSH
59311: LD_INT 3
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 1
59320: NEG
59321: PUSH
59322: LD_INT 2
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 3
59331: NEG
59332: PUSH
59333: LD_INT 2
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59366: LD_ADDR_VAR 0 30
59370: PUSH
59371: LD_INT 0
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: LD_INT 1
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 1
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 1
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 1
59424: NEG
59425: PUSH
59426: LD_INT 0
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: LD_INT 1
59439: NEG
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: LD_INT 2
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: LD_INT 2
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 1
59470: PUSH
59471: LD_INT 1
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 2
59481: PUSH
59482: LD_INT 0
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 2
59491: PUSH
59492: LD_INT 1
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 2
59501: PUSH
59502: LD_INT 2
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: LD_INT 2
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 1
59521: NEG
59522: PUSH
59523: LD_INT 1
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 2
59532: NEG
59533: PUSH
59534: LD_INT 0
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 2
59543: NEG
59544: PUSH
59545: LD_INT 1
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 1
59555: NEG
59556: PUSH
59557: LD_INT 3
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: LD_INT 2
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 3
59578: PUSH
59579: LD_INT 2
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 2
59588: PUSH
59589: LD_INT 3
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 2
59598: NEG
59599: PUSH
59600: LD_INT 1
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 3
59609: NEG
59610: PUSH
59611: LD_INT 1
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59644: LD_ADDR_VAR 0 31
59648: PUSH
59649: LD_INT 0
59651: PUSH
59652: LD_INT 0
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 0
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 1
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 1
59682: PUSH
59683: LD_INT 1
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: LD_INT 1
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 1
59702: NEG
59703: PUSH
59704: LD_INT 0
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: LD_INT 1
59717: NEG
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 1
59725: NEG
59726: PUSH
59727: LD_INT 2
59729: NEG
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 1
59737: PUSH
59738: LD_INT 1
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 2
59748: PUSH
59749: LD_INT 0
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 2
59758: PUSH
59759: LD_INT 1
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 2
59768: PUSH
59769: LD_INT 2
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 1
59778: PUSH
59779: LD_INT 2
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 0
59788: PUSH
59789: LD_INT 2
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 1
59798: NEG
59799: PUSH
59800: LD_INT 1
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 2
59809: NEG
59810: PUSH
59811: LD_INT 1
59813: NEG
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 2
59821: NEG
59822: PUSH
59823: LD_INT 2
59825: NEG
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 2
59833: NEG
59834: PUSH
59835: LD_INT 3
59837: NEG
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 2
59845: PUSH
59846: LD_INT 1
59848: NEG
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 3
59856: PUSH
59857: LD_INT 1
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 1
59866: PUSH
59867: LD_INT 3
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 1
59876: NEG
59877: PUSH
59878: LD_INT 2
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 3
59887: NEG
59888: PUSH
59889: LD_INT 2
59891: NEG
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59922: LD_ADDR_VAR 0 32
59926: PUSH
59927: LD_INT 0
59929: PUSH
59930: LD_INT 0
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 0
59939: PUSH
59940: LD_INT 1
59942: NEG
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 1
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 1
59960: PUSH
59961: LD_INT 1
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 0
59970: PUSH
59971: LD_INT 1
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 1
59980: NEG
59981: PUSH
59982: LD_INT 0
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 1
59991: NEG
59992: PUSH
59993: LD_INT 1
59995: NEG
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 1
60003: NEG
60004: PUSH
60005: LD_INT 2
60007: NEG
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 0
60015: PUSH
60016: LD_INT 2
60018: NEG
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: LD_INT 1
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 2
60037: PUSH
60038: LD_INT 1
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 2
60047: PUSH
60048: LD_INT 2
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 1
60057: PUSH
60058: LD_INT 2
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 0
60067: PUSH
60068: LD_INT 2
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 1
60077: NEG
60078: PUSH
60079: LD_INT 1
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 2
60088: NEG
60089: PUSH
60090: LD_INT 0
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 2
60099: NEG
60100: PUSH
60101: LD_INT 1
60103: NEG
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 1
60111: NEG
60112: PUSH
60113: LD_INT 3
60115: NEG
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 1
60123: PUSH
60124: LD_INT 2
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 3
60134: PUSH
60135: LD_INT 2
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 2
60144: PUSH
60145: LD_INT 3
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 2
60154: NEG
60155: PUSH
60156: LD_INT 1
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 3
60165: NEG
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60200: LD_ADDR_VAR 0 33
60204: PUSH
60205: LD_INT 0
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 0
60217: PUSH
60218: LD_INT 1
60220: NEG
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 1
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 1
60238: PUSH
60239: LD_INT 1
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 0
60248: PUSH
60249: LD_INT 1
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 1
60258: NEG
60259: PUSH
60260: LD_INT 0
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 1
60269: NEG
60270: PUSH
60271: LD_INT 1
60273: NEG
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 1
60281: NEG
60282: PUSH
60283: LD_INT 2
60285: NEG
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 1
60293: PUSH
60294: LD_INT 1
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 2
60304: PUSH
60305: LD_INT 0
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 2
60314: PUSH
60315: LD_INT 1
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 1
60324: PUSH
60325: LD_INT 2
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 0
60334: PUSH
60335: LD_INT 2
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 1
60344: NEG
60345: PUSH
60346: LD_INT 1
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 2
60355: NEG
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 2
60366: NEG
60367: PUSH
60368: LD_INT 1
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 2
60378: NEG
60379: PUSH
60380: LD_INT 2
60382: NEG
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 2
60390: NEG
60391: PUSH
60392: LD_INT 3
60394: NEG
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 2
60402: PUSH
60403: LD_INT 1
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 3
60413: PUSH
60414: LD_INT 1
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 1
60423: PUSH
60424: LD_INT 3
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 1
60433: NEG
60434: PUSH
60435: LD_INT 2
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 3
60444: NEG
60445: PUSH
60446: LD_INT 2
60448: NEG
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60479: LD_ADDR_VAR 0 34
60483: PUSH
60484: LD_INT 0
60486: PUSH
60487: LD_INT 0
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 0
60496: PUSH
60497: LD_INT 1
60499: NEG
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 1
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 1
60517: PUSH
60518: LD_INT 1
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 0
60527: PUSH
60528: LD_INT 1
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 1
60537: NEG
60538: PUSH
60539: LD_INT 0
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 1
60548: NEG
60549: PUSH
60550: LD_INT 1
60552: NEG
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: NEG
60561: PUSH
60562: LD_INT 2
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: LD_INT 2
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 1
60583: PUSH
60584: LD_INT 1
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 2
60594: PUSH
60595: LD_INT 1
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 2
60604: PUSH
60605: LD_INT 2
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 1
60614: PUSH
60615: LD_INT 2
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 1
60624: NEG
60625: PUSH
60626: LD_INT 1
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 2
60635: NEG
60636: PUSH
60637: LD_INT 0
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 2
60646: NEG
60647: PUSH
60648: LD_INT 1
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 2
60658: NEG
60659: PUSH
60660: LD_INT 2
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 1
60670: NEG
60671: PUSH
60672: LD_INT 3
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 1
60682: PUSH
60683: LD_INT 2
60685: NEG
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 3
60693: PUSH
60694: LD_INT 2
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 2
60703: PUSH
60704: LD_INT 3
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 2
60713: NEG
60714: PUSH
60715: LD_INT 1
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 3
60724: NEG
60725: PUSH
60726: LD_INT 1
60728: NEG
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60759: LD_ADDR_VAR 0 35
60763: PUSH
60764: LD_INT 0
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 1
60787: PUSH
60788: LD_INT 0
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: LD_INT 1
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: LD_INT 1
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 1
60817: NEG
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 1
60828: NEG
60829: PUSH
60830: LD_INT 1
60832: NEG
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 2
60840: PUSH
60841: LD_INT 1
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 2
60850: NEG
60851: PUSH
60852: LD_INT 1
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60871: LD_ADDR_VAR 0 36
60875: PUSH
60876: LD_INT 0
60878: PUSH
60879: LD_INT 0
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 0
60888: PUSH
60889: LD_INT 1
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 1
60899: PUSH
60900: LD_INT 0
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 1
60909: PUSH
60910: LD_INT 1
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 0
60919: PUSH
60920: LD_INT 1
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: NEG
60930: PUSH
60931: LD_INT 0
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 1
60940: NEG
60941: PUSH
60942: LD_INT 1
60944: NEG
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 1
60952: NEG
60953: PUSH
60954: LD_INT 2
60956: NEG
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 1
60964: PUSH
60965: LD_INT 2
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60983: LD_ADDR_VAR 0 37
60987: PUSH
60988: LD_INT 0
60990: PUSH
60991: LD_INT 0
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 0
61000: PUSH
61001: LD_INT 1
61003: NEG
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 1
61011: PUSH
61012: LD_INT 0
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 1
61021: PUSH
61022: LD_INT 1
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 0
61031: PUSH
61032: LD_INT 1
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 1
61041: NEG
61042: PUSH
61043: LD_INT 0
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 1
61052: NEG
61053: PUSH
61054: LD_INT 1
61056: NEG
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 1
61064: PUSH
61065: LD_INT 1
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: LD_INT 1
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61095: LD_ADDR_VAR 0 38
61099: PUSH
61100: LD_INT 0
61102: PUSH
61103: LD_INT 0
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 0
61112: PUSH
61113: LD_INT 1
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 1
61123: PUSH
61124: LD_INT 0
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 1
61133: PUSH
61134: LD_INT 1
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 0
61143: PUSH
61144: LD_INT 1
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 1
61153: NEG
61154: PUSH
61155: LD_INT 0
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 1
61164: NEG
61165: PUSH
61166: LD_INT 1
61168: NEG
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 2
61176: PUSH
61177: LD_INT 1
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 2
61186: NEG
61187: PUSH
61188: LD_INT 1
61190: NEG
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61207: LD_ADDR_VAR 0 39
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: LD_INT 0
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 0
61224: PUSH
61225: LD_INT 1
61227: NEG
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 1
61235: PUSH
61236: LD_INT 0
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 1
61245: PUSH
61246: LD_INT 1
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 0
61255: PUSH
61256: LD_INT 1
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 1
61265: NEG
61266: PUSH
61267: LD_INT 0
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 1
61276: NEG
61277: PUSH
61278: LD_INT 1
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 1
61288: NEG
61289: PUSH
61290: LD_INT 2
61292: NEG
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 1
61300: PUSH
61301: LD_INT 2
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61319: LD_ADDR_VAR 0 40
61323: PUSH
61324: LD_INT 0
61326: PUSH
61327: LD_INT 0
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: LD_INT 1
61339: NEG
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 1
61347: PUSH
61348: LD_INT 0
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 1
61357: PUSH
61358: LD_INT 1
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 0
61367: PUSH
61368: LD_INT 1
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 1
61377: NEG
61378: PUSH
61379: LD_INT 0
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: NEG
61389: PUSH
61390: LD_INT 1
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 1
61400: PUSH
61401: LD_INT 1
61403: NEG
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 1
61411: NEG
61412: PUSH
61413: LD_INT 1
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61431: LD_ADDR_VAR 0 41
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: LD_INT 1
61451: NEG
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 1
61459: PUSH
61460: LD_INT 0
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 1
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 0
61479: PUSH
61480: LD_INT 1
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 1
61489: NEG
61490: PUSH
61491: LD_INT 0
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 1
61500: NEG
61501: PUSH
61502: LD_INT 1
61504: NEG
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 1
61512: NEG
61513: PUSH
61514: LD_INT 2
61516: NEG
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 1
61524: PUSH
61525: LD_INT 1
61527: NEG
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 2
61535: PUSH
61536: LD_INT 0
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 2
61545: PUSH
61546: LD_INT 1
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 2
61555: PUSH
61556: LD_INT 2
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 1
61565: PUSH
61566: LD_INT 2
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 1
61575: NEG
61576: PUSH
61577: LD_INT 1
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 2
61586: NEG
61587: PUSH
61588: LD_INT 0
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 2
61597: NEG
61598: PUSH
61599: LD_INT 1
61601: NEG
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 2
61609: NEG
61610: PUSH
61611: LD_INT 2
61613: NEG
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 2
61621: NEG
61622: PUSH
61623: LD_INT 3
61625: NEG
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 2
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 3
61644: PUSH
61645: LD_INT 0
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 3
61654: PUSH
61655: LD_INT 1
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 3
61664: PUSH
61665: LD_INT 2
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 3
61674: PUSH
61675: LD_INT 3
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 2
61684: PUSH
61685: LD_INT 3
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 2
61694: NEG
61695: PUSH
61696: LD_INT 1
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 3
61705: NEG
61706: PUSH
61707: LD_INT 0
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 3
61716: NEG
61717: PUSH
61718: LD_INT 1
61720: NEG
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 3
61728: NEG
61729: PUSH
61730: LD_INT 2
61732: NEG
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 3
61740: NEG
61741: PUSH
61742: LD_INT 3
61744: NEG
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61781: LD_ADDR_VAR 0 42
61785: PUSH
61786: LD_INT 0
61788: PUSH
61789: LD_INT 0
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 0
61798: PUSH
61799: LD_INT 1
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 1
61809: PUSH
61810: LD_INT 0
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 1
61819: PUSH
61820: LD_INT 1
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 0
61829: PUSH
61830: LD_INT 1
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 1
61839: NEG
61840: PUSH
61841: LD_INT 0
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 1
61850: NEG
61851: PUSH
61852: LD_INT 1
61854: NEG
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 1
61862: NEG
61863: PUSH
61864: LD_INT 2
61866: NEG
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 0
61874: PUSH
61875: LD_INT 2
61877: NEG
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 1
61885: PUSH
61886: LD_INT 1
61888: NEG
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 2
61896: PUSH
61897: LD_INT 1
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 2
61906: PUSH
61907: LD_INT 2
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 1
61916: PUSH
61917: LD_INT 2
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 0
61926: PUSH
61927: LD_INT 2
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 1
61936: NEG
61937: PUSH
61938: LD_INT 1
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 2
61947: NEG
61948: PUSH
61949: LD_INT 1
61951: NEG
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 2
61959: NEG
61960: PUSH
61961: LD_INT 2
61963: NEG
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 2
61971: NEG
61972: PUSH
61973: LD_INT 3
61975: NEG
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 1
61983: NEG
61984: PUSH
61985: LD_INT 3
61987: NEG
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: LD_INT 3
61998: NEG
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 1
62006: PUSH
62007: LD_INT 2
62009: NEG
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 3
62017: PUSH
62018: LD_INT 2
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 3
62027: PUSH
62028: LD_INT 3
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 2
62037: PUSH
62038: LD_INT 3
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 1
62047: PUSH
62048: LD_INT 3
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 0
62057: PUSH
62058: LD_INT 3
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 1
62067: NEG
62068: PUSH
62069: LD_INT 2
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 3
62078: NEG
62079: PUSH
62080: LD_INT 2
62082: NEG
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 3
62090: NEG
62091: PUSH
62092: LD_INT 3
62094: NEG
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62131: LD_ADDR_VAR 0 43
62135: PUSH
62136: LD_INT 0
62138: PUSH
62139: LD_INT 0
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 0
62148: PUSH
62149: LD_INT 1
62151: NEG
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 1
62159: PUSH
62160: LD_INT 0
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 1
62169: PUSH
62170: LD_INT 1
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 0
62179: PUSH
62180: LD_INT 1
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 1
62189: NEG
62190: PUSH
62191: LD_INT 0
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 1
62200: NEG
62201: PUSH
62202: LD_INT 1
62204: NEG
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 1
62212: NEG
62213: PUSH
62214: LD_INT 2
62216: NEG
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 0
62224: PUSH
62225: LD_INT 2
62227: NEG
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 1
62235: PUSH
62236: LD_INT 1
62238: NEG
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 2
62246: PUSH
62247: LD_INT 0
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 2
62256: PUSH
62257: LD_INT 1
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 1
62266: PUSH
62267: LD_INT 2
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 0
62276: PUSH
62277: LD_INT 2
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 1
62286: NEG
62287: PUSH
62288: LD_INT 1
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 2
62297: NEG
62298: PUSH
62299: LD_INT 0
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 2
62308: NEG
62309: PUSH
62310: LD_INT 1
62312: NEG
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 1
62320: NEG
62321: PUSH
62322: LD_INT 3
62324: NEG
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: LD_INT 3
62335: NEG
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 1
62343: PUSH
62344: LD_INT 2
62346: NEG
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 2
62354: PUSH
62355: LD_INT 1
62357: NEG
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 3
62365: PUSH
62366: LD_INT 0
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 3
62375: PUSH
62376: LD_INT 1
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 1
62385: PUSH
62386: LD_INT 3
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 0
62395: PUSH
62396: LD_INT 3
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 1
62405: NEG
62406: PUSH
62407: LD_INT 2
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 2
62416: NEG
62417: PUSH
62418: LD_INT 1
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 3
62427: NEG
62428: PUSH
62429: LD_INT 0
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 3
62438: NEG
62439: PUSH
62440: LD_INT 1
62442: NEG
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62479: LD_ADDR_VAR 0 44
62483: PUSH
62484: LD_INT 0
62486: PUSH
62487: LD_INT 0
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 0
62496: PUSH
62497: LD_INT 1
62499: NEG
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 1
62507: PUSH
62508: LD_INT 0
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 1
62517: PUSH
62518: LD_INT 1
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 0
62527: PUSH
62528: LD_INT 1
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 1
62537: NEG
62538: PUSH
62539: LD_INT 0
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 1
62548: NEG
62549: PUSH
62550: LD_INT 1
62552: NEG
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 1
62560: NEG
62561: PUSH
62562: LD_INT 2
62564: NEG
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 1
62572: PUSH
62573: LD_INT 1
62575: NEG
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 2
62583: PUSH
62584: LD_INT 0
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 2
62593: PUSH
62594: LD_INT 1
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 2
62603: PUSH
62604: LD_INT 2
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 1
62613: PUSH
62614: LD_INT 2
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 1
62623: NEG
62624: PUSH
62625: LD_INT 1
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 2
62634: NEG
62635: PUSH
62636: LD_INT 0
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 2
62645: NEG
62646: PUSH
62647: LD_INT 1
62649: NEG
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 2
62657: NEG
62658: PUSH
62659: LD_INT 2
62661: NEG
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 2
62669: NEG
62670: PUSH
62671: LD_INT 3
62673: NEG
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 2
62681: PUSH
62682: LD_INT 1
62684: NEG
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 3
62692: PUSH
62693: LD_INT 0
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 3
62702: PUSH
62703: LD_INT 1
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 3
62712: PUSH
62713: LD_INT 2
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 3
62722: PUSH
62723: LD_INT 3
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 2
62732: PUSH
62733: LD_INT 3
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 2
62742: NEG
62743: PUSH
62744: LD_INT 1
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 3
62753: NEG
62754: PUSH
62755: LD_INT 0
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 3
62764: NEG
62765: PUSH
62766: LD_INT 1
62768: NEG
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 3
62776: NEG
62777: PUSH
62778: LD_INT 2
62780: NEG
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 3
62788: NEG
62789: PUSH
62790: LD_INT 3
62792: NEG
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62829: LD_ADDR_VAR 0 45
62833: PUSH
62834: LD_INT 0
62836: PUSH
62837: LD_INT 0
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 0
62846: PUSH
62847: LD_INT 1
62849: NEG
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 1
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 1
62867: PUSH
62868: LD_INT 1
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 0
62877: PUSH
62878: LD_INT 1
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 1
62887: NEG
62888: PUSH
62889: LD_INT 0
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 1
62898: NEG
62899: PUSH
62900: LD_INT 1
62902: NEG
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 1
62910: NEG
62911: PUSH
62912: LD_INT 2
62914: NEG
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 0
62922: PUSH
62923: LD_INT 2
62925: NEG
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 1
62933: PUSH
62934: LD_INT 1
62936: NEG
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 2
62944: PUSH
62945: LD_INT 1
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 2
62954: PUSH
62955: LD_INT 2
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 1
62964: PUSH
62965: LD_INT 2
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 0
62974: PUSH
62975: LD_INT 2
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 1
62984: NEG
62985: PUSH
62986: LD_INT 1
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 2
62995: NEG
62996: PUSH
62997: LD_INT 1
62999: NEG
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 2
63007: NEG
63008: PUSH
63009: LD_INT 2
63011: NEG
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 2
63019: NEG
63020: PUSH
63021: LD_INT 3
63023: NEG
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 1
63031: NEG
63032: PUSH
63033: LD_INT 3
63035: NEG
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 0
63043: PUSH
63044: LD_INT 3
63046: NEG
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 1
63054: PUSH
63055: LD_INT 2
63057: NEG
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 3
63065: PUSH
63066: LD_INT 2
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 3
63075: PUSH
63076: LD_INT 3
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 2
63085: PUSH
63086: LD_INT 3
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 1
63095: PUSH
63096: LD_INT 3
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 0
63105: PUSH
63106: LD_INT 3
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 1
63115: NEG
63116: PUSH
63117: LD_INT 2
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 3
63126: NEG
63127: PUSH
63128: LD_INT 2
63130: NEG
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 3
63138: NEG
63139: PUSH
63140: LD_INT 3
63142: NEG
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63179: LD_ADDR_VAR 0 46
63183: PUSH
63184: LD_INT 0
63186: PUSH
63187: LD_INT 0
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 0
63196: PUSH
63197: LD_INT 1
63199: NEG
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 1
63207: PUSH
63208: LD_INT 0
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 1
63217: PUSH
63218: LD_INT 1
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 0
63227: PUSH
63228: LD_INT 1
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 1
63237: NEG
63238: PUSH
63239: LD_INT 0
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 1
63248: NEG
63249: PUSH
63250: LD_INT 1
63252: NEG
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 1
63260: NEG
63261: PUSH
63262: LD_INT 2
63264: NEG
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 0
63272: PUSH
63273: LD_INT 2
63275: NEG
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 1
63283: PUSH
63284: LD_INT 1
63286: NEG
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 2
63294: PUSH
63295: LD_INT 0
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 2
63304: PUSH
63305: LD_INT 1
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 1
63314: PUSH
63315: LD_INT 2
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 0
63324: PUSH
63325: LD_INT 2
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: LD_INT 1
63334: NEG
63335: PUSH
63336: LD_INT 1
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 2
63345: NEG
63346: PUSH
63347: LD_INT 0
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 2
63356: NEG
63357: PUSH
63358: LD_INT 1
63360: NEG
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 1
63368: NEG
63369: PUSH
63370: LD_INT 3
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 0
63380: PUSH
63381: LD_INT 3
63383: NEG
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 1
63391: PUSH
63392: LD_INT 2
63394: NEG
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 2
63402: PUSH
63403: LD_INT 1
63405: NEG
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 3
63413: PUSH
63414: LD_INT 0
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 3
63423: PUSH
63424: LD_INT 1
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 1
63433: PUSH
63434: LD_INT 3
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 0
63443: PUSH
63444: LD_INT 3
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 1
63453: NEG
63454: PUSH
63455: LD_INT 2
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 2
63464: NEG
63465: PUSH
63466: LD_INT 1
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 3
63475: NEG
63476: PUSH
63477: LD_INT 0
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 3
63486: NEG
63487: PUSH
63488: LD_INT 1
63490: NEG
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63527: LD_ADDR_VAR 0 47
63531: PUSH
63532: LD_INT 0
63534: PUSH
63535: LD_INT 0
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 0
63544: PUSH
63545: LD_INT 1
63547: NEG
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 1
63555: PUSH
63556: LD_INT 0
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 1
63565: PUSH
63566: LD_INT 1
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 0
63575: PUSH
63576: LD_INT 1
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 1
63585: NEG
63586: PUSH
63587: LD_INT 0
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 1
63596: NEG
63597: PUSH
63598: LD_INT 1
63600: NEG
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 1
63608: NEG
63609: PUSH
63610: LD_INT 2
63612: NEG
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 0
63620: PUSH
63621: LD_INT 2
63623: NEG
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 1
63631: PUSH
63632: LD_INT 1
63634: NEG
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 2
63642: NEG
63643: PUSH
63644: LD_INT 1
63646: NEG
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 2
63654: NEG
63655: PUSH
63656: LD_INT 2
63658: NEG
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63678: LD_ADDR_VAR 0 48
63682: PUSH
63683: LD_INT 0
63685: PUSH
63686: LD_INT 0
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 0
63695: PUSH
63696: LD_INT 1
63698: NEG
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 1
63706: PUSH
63707: LD_INT 0
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 1
63716: PUSH
63717: LD_INT 1
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 0
63726: PUSH
63727: LD_INT 1
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 1
63736: NEG
63737: PUSH
63738: LD_INT 0
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 1
63747: NEG
63748: PUSH
63749: LD_INT 1
63751: NEG
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 1
63759: NEG
63760: PUSH
63761: LD_INT 2
63763: NEG
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 0
63771: PUSH
63772: LD_INT 2
63774: NEG
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 1
63782: PUSH
63783: LD_INT 1
63785: NEG
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 2
63793: PUSH
63794: LD_INT 0
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 2
63803: PUSH
63804: LD_INT 1
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63825: LD_ADDR_VAR 0 49
63829: PUSH
63830: LD_INT 0
63832: PUSH
63833: LD_INT 0
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 0
63842: PUSH
63843: LD_INT 1
63845: NEG
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 1
63853: PUSH
63854: LD_INT 0
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 1
63863: PUSH
63864: LD_INT 1
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 0
63873: PUSH
63874: LD_INT 1
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 1
63883: NEG
63884: PUSH
63885: LD_INT 0
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 1
63894: NEG
63895: PUSH
63896: LD_INT 1
63898: NEG
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 1
63906: PUSH
63907: LD_INT 1
63909: NEG
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 2
63917: PUSH
63918: LD_INT 0
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 2
63927: PUSH
63928: LD_INT 1
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 2
63937: PUSH
63938: LD_INT 2
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 1
63947: PUSH
63948: LD_INT 2
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63969: LD_ADDR_VAR 0 50
63973: PUSH
63974: LD_INT 0
63976: PUSH
63977: LD_INT 0
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 0
63986: PUSH
63987: LD_INT 1
63989: NEG
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 1
63997: PUSH
63998: LD_INT 0
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 1
64007: PUSH
64008: LD_INT 1
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 0
64017: PUSH
64018: LD_INT 1
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 1
64027: NEG
64028: PUSH
64029: LD_INT 0
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 1
64038: NEG
64039: PUSH
64040: LD_INT 1
64042: NEG
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 2
64050: PUSH
64051: LD_INT 1
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 2
64060: PUSH
64061: LD_INT 2
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 1
64070: PUSH
64071: LD_INT 2
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 0
64080: PUSH
64081: LD_INT 2
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 1
64090: NEG
64091: PUSH
64092: LD_INT 1
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64113: LD_ADDR_VAR 0 51
64117: PUSH
64118: LD_INT 0
64120: PUSH
64121: LD_INT 0
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 0
64130: PUSH
64131: LD_INT 1
64133: NEG
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 1
64141: PUSH
64142: LD_INT 0
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 1
64151: PUSH
64152: LD_INT 1
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 0
64161: PUSH
64162: LD_INT 1
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 1
64171: NEG
64172: PUSH
64173: LD_INT 0
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 1
64182: NEG
64183: PUSH
64184: LD_INT 1
64186: NEG
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 1
64194: PUSH
64195: LD_INT 2
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 0
64204: PUSH
64205: LD_INT 2
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 1
64214: NEG
64215: PUSH
64216: LD_INT 1
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 2
64225: NEG
64226: PUSH
64227: LD_INT 0
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: LD_INT 2
64236: NEG
64237: PUSH
64238: LD_INT 1
64240: NEG
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64260: LD_ADDR_VAR 0 52
64264: PUSH
64265: LD_INT 0
64267: PUSH
64268: LD_INT 0
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 0
64277: PUSH
64278: LD_INT 1
64280: NEG
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 1
64288: PUSH
64289: LD_INT 0
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: LD_INT 1
64298: PUSH
64299: LD_INT 1
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_INT 0
64308: PUSH
64309: LD_INT 1
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 1
64318: NEG
64319: PUSH
64320: LD_INT 0
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 1
64329: NEG
64330: PUSH
64331: LD_INT 1
64333: NEG
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 1
64341: NEG
64342: PUSH
64343: LD_INT 2
64345: NEG
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 1
64353: NEG
64354: PUSH
64355: LD_INT 1
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 2
64364: NEG
64365: PUSH
64366: LD_INT 0
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 2
64375: NEG
64376: PUSH
64377: LD_INT 1
64379: NEG
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 2
64387: NEG
64388: PUSH
64389: LD_INT 2
64391: NEG
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64411: LD_ADDR_VAR 0 53
64415: PUSH
64416: LD_INT 0
64418: PUSH
64419: LD_INT 0
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 0
64428: PUSH
64429: LD_INT 1
64431: NEG
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 1
64439: PUSH
64440: LD_INT 0
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 1
64449: PUSH
64450: LD_INT 1
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 0
64459: PUSH
64460: LD_INT 1
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 1
64469: NEG
64470: PUSH
64471: LD_INT 0
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 1
64480: NEG
64481: PUSH
64482: LD_INT 1
64484: NEG
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: LD_INT 1
64492: NEG
64493: PUSH
64494: LD_INT 2
64496: NEG
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 0
64504: PUSH
64505: LD_INT 2
64507: NEG
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 1
64515: PUSH
64516: LD_INT 1
64518: NEG
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 2
64526: PUSH
64527: LD_INT 0
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 2
64536: PUSH
64537: LD_INT 1
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 2
64546: PUSH
64547: LD_INT 2
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 1
64556: PUSH
64557: LD_INT 2
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: LD_INT 0
64566: PUSH
64567: LD_INT 2
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 1
64576: NEG
64577: PUSH
64578: LD_INT 1
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 2
64587: NEG
64588: PUSH
64589: LD_INT 0
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 2
64598: NEG
64599: PUSH
64600: LD_INT 1
64602: NEG
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 2
64610: NEG
64611: PUSH
64612: LD_INT 2
64614: NEG
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64641: LD_ADDR_VAR 0 54
64645: PUSH
64646: LD_INT 0
64648: PUSH
64649: LD_INT 0
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 0
64658: PUSH
64659: LD_INT 1
64661: NEG
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 1
64669: PUSH
64670: LD_INT 0
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 1
64679: PUSH
64680: LD_INT 1
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 0
64689: PUSH
64690: LD_INT 1
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 1
64699: NEG
64700: PUSH
64701: LD_INT 0
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 1
64710: NEG
64711: PUSH
64712: LD_INT 1
64714: NEG
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 1
64722: NEG
64723: PUSH
64724: LD_INT 2
64726: NEG
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 0
64734: PUSH
64735: LD_INT 2
64737: NEG
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 1
64745: PUSH
64746: LD_INT 1
64748: NEG
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 2
64756: PUSH
64757: LD_INT 0
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 2
64766: PUSH
64767: LD_INT 1
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 2
64776: PUSH
64777: LD_INT 2
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 1
64786: PUSH
64787: LD_INT 2
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 0
64796: PUSH
64797: LD_INT 2
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 1
64806: NEG
64807: PUSH
64808: LD_INT 1
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 2
64817: NEG
64818: PUSH
64819: LD_INT 0
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 2
64828: NEG
64829: PUSH
64830: LD_INT 1
64832: NEG
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 2
64840: NEG
64841: PUSH
64842: LD_INT 2
64844: NEG
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: LIST
64865: LIST
64866: LIST
64867: LIST
64868: LIST
64869: LIST
64870: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64871: LD_ADDR_VAR 0 55
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: LD_INT 0
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 0
64888: PUSH
64889: LD_INT 1
64891: NEG
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 1
64899: PUSH
64900: LD_INT 0
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 1
64909: PUSH
64910: LD_INT 1
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 0
64919: PUSH
64920: LD_INT 1
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 1
64929: NEG
64930: PUSH
64931: LD_INT 0
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 1
64940: NEG
64941: PUSH
64942: LD_INT 1
64944: NEG
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 1
64952: NEG
64953: PUSH
64954: LD_INT 2
64956: NEG
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 0
64964: PUSH
64965: LD_INT 2
64967: NEG
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 1
64975: PUSH
64976: LD_INT 1
64978: NEG
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 2
64986: PUSH
64987: LD_INT 0
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 2
64996: PUSH
64997: LD_INT 1
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 2
65006: PUSH
65007: LD_INT 2
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 1
65016: PUSH
65017: LD_INT 2
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 0
65026: PUSH
65027: LD_INT 2
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 1
65036: NEG
65037: PUSH
65038: LD_INT 1
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 2
65047: NEG
65048: PUSH
65049: LD_INT 0
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 2
65058: NEG
65059: PUSH
65060: LD_INT 1
65062: NEG
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 2
65070: NEG
65071: PUSH
65072: LD_INT 2
65074: NEG
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65101: LD_ADDR_VAR 0 56
65105: PUSH
65106: LD_INT 0
65108: PUSH
65109: LD_INT 0
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 0
65118: PUSH
65119: LD_INT 1
65121: NEG
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 1
65129: PUSH
65130: LD_INT 0
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 1
65139: PUSH
65140: LD_INT 1
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 0
65149: PUSH
65150: LD_INT 1
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 1
65159: NEG
65160: PUSH
65161: LD_INT 0
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 1
65170: NEG
65171: PUSH
65172: LD_INT 1
65174: NEG
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 1
65182: NEG
65183: PUSH
65184: LD_INT 2
65186: NEG
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 0
65194: PUSH
65195: LD_INT 2
65197: NEG
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 1
65205: PUSH
65206: LD_INT 1
65208: NEG
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 2
65216: PUSH
65217: LD_INT 0
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 2
65226: PUSH
65227: LD_INT 1
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 2
65236: PUSH
65237: LD_INT 2
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: LD_INT 1
65246: PUSH
65247: LD_INT 2
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 0
65256: PUSH
65257: LD_INT 2
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: LD_INT 1
65266: NEG
65267: PUSH
65268: LD_INT 1
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 2
65277: NEG
65278: PUSH
65279: LD_INT 0
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 2
65288: NEG
65289: PUSH
65290: LD_INT 1
65292: NEG
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 2
65300: NEG
65301: PUSH
65302: LD_INT 2
65304: NEG
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65331: LD_ADDR_VAR 0 57
65335: PUSH
65336: LD_INT 0
65338: PUSH
65339: LD_INT 0
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 0
65348: PUSH
65349: LD_INT 1
65351: NEG
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 1
65359: PUSH
65360: LD_INT 0
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 1
65369: PUSH
65370: LD_INT 1
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 0
65379: PUSH
65380: LD_INT 1
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 1
65389: NEG
65390: PUSH
65391: LD_INT 0
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 1
65400: NEG
65401: PUSH
65402: LD_INT 1
65404: NEG
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 1
65412: NEG
65413: PUSH
65414: LD_INT 2
65416: NEG
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 0
65424: PUSH
65425: LD_INT 2
65427: NEG
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 1
65435: PUSH
65436: LD_INT 1
65438: NEG
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 2
65446: PUSH
65447: LD_INT 0
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 2
65456: PUSH
65457: LD_INT 1
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 2
65466: PUSH
65467: LD_INT 2
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 1
65476: PUSH
65477: LD_INT 2
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 0
65486: PUSH
65487: LD_INT 2
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 1
65496: NEG
65497: PUSH
65498: LD_INT 1
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 2
65507: NEG
65508: PUSH
65509: LD_INT 0
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 2
65518: NEG
65519: PUSH
65520: LD_INT 1
65522: NEG
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 2
65530: NEG
65531: PUSH
65532: LD_INT 2
65534: NEG
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65561: LD_ADDR_VAR 0 58
65565: PUSH
65566: LD_INT 0
65568: PUSH
65569: LD_INT 0
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 0
65578: PUSH
65579: LD_INT 1
65581: NEG
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 1
65589: PUSH
65590: LD_INT 0
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 1
65599: PUSH
65600: LD_INT 1
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 0
65609: PUSH
65610: LD_INT 1
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 1
65619: NEG
65620: PUSH
65621: LD_INT 0
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 1
65630: NEG
65631: PUSH
65632: LD_INT 1
65634: NEG
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 1
65642: NEG
65643: PUSH
65644: LD_INT 2
65646: NEG
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 0
65654: PUSH
65655: LD_INT 2
65657: NEG
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 1
65665: PUSH
65666: LD_INT 1
65668: NEG
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 2
65676: PUSH
65677: LD_INT 0
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 2
65686: PUSH
65687: LD_INT 1
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 2
65696: PUSH
65697: LD_INT 2
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 1
65706: PUSH
65707: LD_INT 2
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 0
65716: PUSH
65717: LD_INT 2
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 1
65726: NEG
65727: PUSH
65728: LD_INT 1
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 2
65737: NEG
65738: PUSH
65739: LD_INT 0
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 2
65748: NEG
65749: PUSH
65750: LD_INT 1
65752: NEG
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 2
65760: NEG
65761: PUSH
65762: LD_INT 2
65764: NEG
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65791: LD_ADDR_VAR 0 59
65795: PUSH
65796: LD_INT 0
65798: PUSH
65799: LD_INT 0
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: LD_INT 0
65808: PUSH
65809: LD_INT 1
65811: NEG
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 1
65819: PUSH
65820: LD_INT 0
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 1
65829: PUSH
65830: LD_INT 1
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 0
65839: PUSH
65840: LD_INT 1
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 1
65849: NEG
65850: PUSH
65851: LD_INT 0
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PUSH
65858: LD_INT 1
65860: NEG
65861: PUSH
65862: LD_INT 1
65864: NEG
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65879: LD_ADDR_VAR 0 60
65883: PUSH
65884: LD_INT 0
65886: PUSH
65887: LD_INT 0
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 0
65896: PUSH
65897: LD_INT 1
65899: NEG
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: PUSH
65905: LD_INT 1
65907: PUSH
65908: LD_INT 0
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 1
65917: PUSH
65918: LD_INT 1
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 0
65927: PUSH
65928: LD_INT 1
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_INT 1
65937: NEG
65938: PUSH
65939: LD_INT 0
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: LD_INT 1
65948: NEG
65949: PUSH
65950: LD_INT 1
65952: NEG
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65967: LD_ADDR_VAR 0 61
65971: PUSH
65972: LD_INT 0
65974: PUSH
65975: LD_INT 0
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 0
65984: PUSH
65985: LD_INT 1
65987: NEG
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 1
65995: PUSH
65996: LD_INT 0
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 1
66005: PUSH
66006: LD_INT 1
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 0
66015: PUSH
66016: LD_INT 1
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 1
66025: NEG
66026: PUSH
66027: LD_INT 0
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 1
66036: NEG
66037: PUSH
66038: LD_INT 1
66040: NEG
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66055: LD_ADDR_VAR 0 62
66059: PUSH
66060: LD_INT 0
66062: PUSH
66063: LD_INT 0
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 0
66072: PUSH
66073: LD_INT 1
66075: NEG
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 1
66083: PUSH
66084: LD_INT 0
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 1
66093: PUSH
66094: LD_INT 1
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: LD_INT 0
66103: PUSH
66104: LD_INT 1
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 1
66113: NEG
66114: PUSH
66115: LD_INT 0
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 1
66124: NEG
66125: PUSH
66126: LD_INT 1
66128: NEG
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66143: LD_ADDR_VAR 0 63
66147: PUSH
66148: LD_INT 0
66150: PUSH
66151: LD_INT 0
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 0
66160: PUSH
66161: LD_INT 1
66163: NEG
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 1
66171: PUSH
66172: LD_INT 0
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 1
66181: PUSH
66182: LD_INT 1
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 0
66191: PUSH
66192: LD_INT 1
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 1
66201: NEG
66202: PUSH
66203: LD_INT 0
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 1
66212: NEG
66213: PUSH
66214: LD_INT 1
66216: NEG
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66231: LD_ADDR_VAR 0 64
66235: PUSH
66236: LD_INT 0
66238: PUSH
66239: LD_INT 0
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 0
66248: PUSH
66249: LD_INT 1
66251: NEG
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 1
66259: PUSH
66260: LD_INT 0
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 1
66269: PUSH
66270: LD_INT 1
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 0
66279: PUSH
66280: LD_INT 1
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PUSH
66287: LD_INT 1
66289: NEG
66290: PUSH
66291: LD_INT 0
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: LD_INT 1
66300: NEG
66301: PUSH
66302: LD_INT 1
66304: NEG
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: ST_TO_ADDR
// end ; 1 :
66319: GO 72216
66321: LD_INT 1
66323: DOUBLE
66324: EQUAL
66325: IFTRUE 66329
66327: GO 68952
66329: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66330: LD_ADDR_VAR 0 11
66334: PUSH
66335: LD_INT 1
66337: NEG
66338: PUSH
66339: LD_INT 3
66341: NEG
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 0
66349: PUSH
66350: LD_INT 3
66352: NEG
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 1
66360: PUSH
66361: LD_INT 2
66363: NEG
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: LIST
66373: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66374: LD_ADDR_VAR 0 12
66378: PUSH
66379: LD_INT 2
66381: PUSH
66382: LD_INT 1
66384: NEG
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: LD_INT 3
66392: PUSH
66393: LD_INT 0
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PUSH
66400: LD_INT 3
66402: PUSH
66403: LD_INT 1
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: LIST
66414: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66415: LD_ADDR_VAR 0 13
66419: PUSH
66420: LD_INT 3
66422: PUSH
66423: LD_INT 2
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: LD_INT 3
66432: PUSH
66433: LD_INT 3
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 2
66442: PUSH
66443: LD_INT 3
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: LIST
66454: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66455: LD_ADDR_VAR 0 14
66459: PUSH
66460: LD_INT 1
66462: PUSH
66463: LD_INT 3
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 0
66472: PUSH
66473: LD_INT 3
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 1
66482: NEG
66483: PUSH
66484: LD_INT 2
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: LIST
66495: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66496: LD_ADDR_VAR 0 15
66500: PUSH
66501: LD_INT 2
66503: NEG
66504: PUSH
66505: LD_INT 1
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 3
66514: NEG
66515: PUSH
66516: LD_INT 0
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 3
66525: NEG
66526: PUSH
66527: LD_INT 1
66529: NEG
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: LIST
66539: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66540: LD_ADDR_VAR 0 16
66544: PUSH
66545: LD_INT 2
66547: NEG
66548: PUSH
66549: LD_INT 3
66551: NEG
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 3
66559: NEG
66560: PUSH
66561: LD_INT 2
66563: NEG
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 3
66571: NEG
66572: PUSH
66573: LD_INT 3
66575: NEG
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: LIST
66585: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66586: LD_ADDR_VAR 0 17
66590: PUSH
66591: LD_INT 1
66593: NEG
66594: PUSH
66595: LD_INT 3
66597: NEG
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 0
66605: PUSH
66606: LD_INT 3
66608: NEG
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 1
66616: PUSH
66617: LD_INT 2
66619: NEG
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: LIST
66629: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66630: LD_ADDR_VAR 0 18
66634: PUSH
66635: LD_INT 2
66637: PUSH
66638: LD_INT 1
66640: NEG
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 3
66648: PUSH
66649: LD_INT 0
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 3
66658: PUSH
66659: LD_INT 1
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: LIST
66670: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66671: LD_ADDR_VAR 0 19
66675: PUSH
66676: LD_INT 3
66678: PUSH
66679: LD_INT 2
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: LD_INT 3
66688: PUSH
66689: LD_INT 3
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: LD_INT 2
66698: PUSH
66699: LD_INT 3
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: LIST
66710: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66711: LD_ADDR_VAR 0 20
66715: PUSH
66716: LD_INT 1
66718: PUSH
66719: LD_INT 3
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: PUSH
66726: LD_INT 0
66728: PUSH
66729: LD_INT 3
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 1
66738: NEG
66739: PUSH
66740: LD_INT 2
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: LIST
66751: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66752: LD_ADDR_VAR 0 21
66756: PUSH
66757: LD_INT 2
66759: NEG
66760: PUSH
66761: LD_INT 1
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 3
66770: NEG
66771: PUSH
66772: LD_INT 0
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 3
66781: NEG
66782: PUSH
66783: LD_INT 1
66785: NEG
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: LIST
66795: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66796: LD_ADDR_VAR 0 22
66800: PUSH
66801: LD_INT 2
66803: NEG
66804: PUSH
66805: LD_INT 3
66807: NEG
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 3
66815: NEG
66816: PUSH
66817: LD_INT 2
66819: NEG
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: LD_INT 3
66827: NEG
66828: PUSH
66829: LD_INT 3
66831: NEG
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: LIST
66841: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66842: LD_ADDR_VAR 0 23
66846: PUSH
66847: LD_INT 0
66849: PUSH
66850: LD_INT 3
66852: NEG
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: LD_INT 1
66860: NEG
66861: PUSH
66862: LD_INT 4
66864: NEG
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: LD_INT 1
66872: PUSH
66873: LD_INT 3
66875: NEG
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: LIST
66885: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66886: LD_ADDR_VAR 0 24
66890: PUSH
66891: LD_INT 3
66893: PUSH
66894: LD_INT 0
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: LD_INT 3
66903: PUSH
66904: LD_INT 1
66906: NEG
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 4
66914: PUSH
66915: LD_INT 1
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: LIST
66926: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66927: LD_ADDR_VAR 0 25
66931: PUSH
66932: LD_INT 3
66934: PUSH
66935: LD_INT 3
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 4
66944: PUSH
66945: LD_INT 3
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 3
66954: PUSH
66955: LD_INT 4
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: LIST
66966: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66967: LD_ADDR_VAR 0 26
66971: PUSH
66972: LD_INT 0
66974: PUSH
66975: LD_INT 3
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 1
66984: PUSH
66985: LD_INT 4
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 1
66994: NEG
66995: PUSH
66996: LD_INT 3
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: LIST
67007: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67008: LD_ADDR_VAR 0 27
67012: PUSH
67013: LD_INT 3
67015: NEG
67016: PUSH
67017: LD_INT 0
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: PUSH
67024: LD_INT 3
67026: NEG
67027: PUSH
67028: LD_INT 1
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 4
67037: NEG
67038: PUSH
67039: LD_INT 1
67041: NEG
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: LIST
67051: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67052: LD_ADDR_VAR 0 28
67056: PUSH
67057: LD_INT 3
67059: NEG
67060: PUSH
67061: LD_INT 3
67063: NEG
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_INT 3
67071: NEG
67072: PUSH
67073: LD_INT 4
67075: NEG
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 4
67083: NEG
67084: PUSH
67085: LD_INT 3
67087: NEG
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: LIST
67097: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67098: LD_ADDR_VAR 0 29
67102: PUSH
67103: LD_INT 1
67105: NEG
67106: PUSH
67107: LD_INT 3
67109: NEG
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 0
67117: PUSH
67118: LD_INT 3
67120: NEG
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: LD_INT 1
67128: PUSH
67129: LD_INT 2
67131: NEG
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 1
67139: NEG
67140: PUSH
67141: LD_INT 4
67143: NEG
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: PUSH
67149: LD_INT 0
67151: PUSH
67152: LD_INT 4
67154: NEG
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: LD_INT 1
67162: PUSH
67163: LD_INT 3
67165: NEG
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 1
67173: NEG
67174: PUSH
67175: LD_INT 5
67177: NEG
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 0
67185: PUSH
67186: LD_INT 5
67188: NEG
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 1
67196: PUSH
67197: LD_INT 4
67199: NEG
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: LD_INT 1
67207: NEG
67208: PUSH
67209: LD_INT 6
67211: NEG
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: LD_INT 0
67219: PUSH
67220: LD_INT 6
67222: NEG
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 1
67230: PUSH
67231: LD_INT 5
67233: NEG
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67253: LD_ADDR_VAR 0 30
67257: PUSH
67258: LD_INT 2
67260: PUSH
67261: LD_INT 1
67263: NEG
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: LD_INT 3
67271: PUSH
67272: LD_INT 0
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 3
67281: PUSH
67282: LD_INT 1
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 3
67291: PUSH
67292: LD_INT 1
67294: NEG
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: PUSH
67300: LD_INT 4
67302: PUSH
67303: LD_INT 0
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 4
67312: PUSH
67313: LD_INT 1
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 4
67322: PUSH
67323: LD_INT 1
67325: NEG
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 5
67333: PUSH
67334: LD_INT 0
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: LD_INT 5
67343: PUSH
67344: LD_INT 1
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 5
67353: PUSH
67354: LD_INT 1
67356: NEG
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 6
67364: PUSH
67365: LD_INT 0
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 6
67374: PUSH
67375: LD_INT 1
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67396: LD_ADDR_VAR 0 31
67400: PUSH
67401: LD_INT 3
67403: PUSH
67404: LD_INT 2
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 3
67413: PUSH
67414: LD_INT 3
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 2
67423: PUSH
67424: LD_INT 3
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 4
67433: PUSH
67434: LD_INT 3
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 4
67443: PUSH
67444: LD_INT 4
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 3
67453: PUSH
67454: LD_INT 4
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 5
67463: PUSH
67464: LD_INT 4
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: LD_INT 5
67473: PUSH
67474: LD_INT 5
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 4
67483: PUSH
67484: LD_INT 5
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 6
67493: PUSH
67494: LD_INT 5
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 6
67503: PUSH
67504: LD_INT 6
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 5
67513: PUSH
67514: LD_INT 6
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: LIST
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67535: LD_ADDR_VAR 0 32
67539: PUSH
67540: LD_INT 1
67542: PUSH
67543: LD_INT 3
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 0
67552: PUSH
67553: LD_INT 3
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 1
67562: NEG
67563: PUSH
67564: LD_INT 2
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 1
67573: PUSH
67574: LD_INT 4
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 0
67583: PUSH
67584: LD_INT 4
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 1
67593: NEG
67594: PUSH
67595: LD_INT 3
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 1
67604: PUSH
67605: LD_INT 5
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: LD_INT 0
67614: PUSH
67615: LD_INT 5
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 1
67624: NEG
67625: PUSH
67626: LD_INT 4
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 1
67635: PUSH
67636: LD_INT 6
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 0
67645: PUSH
67646: LD_INT 6
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 1
67655: NEG
67656: PUSH
67657: LD_INT 5
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67678: LD_ADDR_VAR 0 33
67682: PUSH
67683: LD_INT 2
67685: NEG
67686: PUSH
67687: LD_INT 1
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: LD_INT 3
67696: NEG
67697: PUSH
67698: LD_INT 0
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: LD_INT 3
67707: NEG
67708: PUSH
67709: LD_INT 1
67711: NEG
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: PUSH
67717: LD_INT 3
67719: NEG
67720: PUSH
67721: LD_INT 1
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: LD_INT 4
67730: NEG
67731: PUSH
67732: LD_INT 0
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 4
67741: NEG
67742: PUSH
67743: LD_INT 1
67745: NEG
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 4
67753: NEG
67754: PUSH
67755: LD_INT 1
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: PUSH
67762: LD_INT 5
67764: NEG
67765: PUSH
67766: LD_INT 0
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 5
67775: NEG
67776: PUSH
67777: LD_INT 1
67779: NEG
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 5
67787: NEG
67788: PUSH
67789: LD_INT 1
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PUSH
67796: LD_INT 6
67798: NEG
67799: PUSH
67800: LD_INT 0
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 6
67809: NEG
67810: PUSH
67811: LD_INT 1
67813: NEG
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67833: LD_ADDR_VAR 0 34
67837: PUSH
67838: LD_INT 2
67840: NEG
67841: PUSH
67842: LD_INT 3
67844: NEG
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 3
67852: NEG
67853: PUSH
67854: LD_INT 2
67856: NEG
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 3
67864: NEG
67865: PUSH
67866: LD_INT 3
67868: NEG
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 3
67876: NEG
67877: PUSH
67878: LD_INT 4
67880: NEG
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 4
67888: NEG
67889: PUSH
67890: LD_INT 3
67892: NEG
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 4
67900: NEG
67901: PUSH
67902: LD_INT 4
67904: NEG
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 4
67912: NEG
67913: PUSH
67914: LD_INT 5
67916: NEG
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 5
67924: NEG
67925: PUSH
67926: LD_INT 4
67928: NEG
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: PUSH
67934: LD_INT 5
67936: NEG
67937: PUSH
67938: LD_INT 5
67940: NEG
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 5
67948: NEG
67949: PUSH
67950: LD_INT 6
67952: NEG
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PUSH
67958: LD_INT 6
67960: NEG
67961: PUSH
67962: LD_INT 5
67964: NEG
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 6
67972: NEG
67973: PUSH
67974: LD_INT 6
67976: NEG
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67996: LD_ADDR_VAR 0 41
68000: PUSH
68001: LD_INT 0
68003: PUSH
68004: LD_INT 2
68006: NEG
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 1
68014: NEG
68015: PUSH
68016: LD_INT 3
68018: NEG
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 1
68026: PUSH
68027: LD_INT 2
68029: NEG
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: LIST
68039: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68040: LD_ADDR_VAR 0 42
68044: PUSH
68045: LD_INT 2
68047: PUSH
68048: LD_INT 0
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: PUSH
68055: LD_INT 2
68057: PUSH
68058: LD_INT 1
68060: NEG
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: LD_INT 3
68068: PUSH
68069: LD_INT 1
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: LIST
68080: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68081: LD_ADDR_VAR 0 43
68085: PUSH
68086: LD_INT 2
68088: PUSH
68089: LD_INT 2
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 3
68098: PUSH
68099: LD_INT 2
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 2
68108: PUSH
68109: LD_INT 3
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: LIST
68120: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68121: LD_ADDR_VAR 0 44
68125: PUSH
68126: LD_INT 0
68128: PUSH
68129: LD_INT 2
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_INT 1
68138: PUSH
68139: LD_INT 3
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PUSH
68146: LD_INT 1
68148: NEG
68149: PUSH
68150: LD_INT 2
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: LIST
68161: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68162: LD_ADDR_VAR 0 45
68166: PUSH
68167: LD_INT 2
68169: NEG
68170: PUSH
68171: LD_INT 0
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: LD_INT 2
68180: NEG
68181: PUSH
68182: LD_INT 1
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: LD_INT 3
68191: NEG
68192: PUSH
68193: LD_INT 1
68195: NEG
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: LIST
68205: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68206: LD_ADDR_VAR 0 46
68210: PUSH
68211: LD_INT 2
68213: NEG
68214: PUSH
68215: LD_INT 2
68217: NEG
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_INT 2
68225: NEG
68226: PUSH
68227: LD_INT 3
68229: NEG
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: LD_INT 3
68237: NEG
68238: PUSH
68239: LD_INT 2
68241: NEG
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: LIST
68251: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68252: LD_ADDR_VAR 0 47
68256: PUSH
68257: LD_INT 2
68259: NEG
68260: PUSH
68261: LD_INT 3
68263: NEG
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_INT 1
68271: NEG
68272: PUSH
68273: LD_INT 3
68275: NEG
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68285: LD_ADDR_VAR 0 48
68289: PUSH
68290: LD_INT 1
68292: PUSH
68293: LD_INT 2
68295: NEG
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 2
68303: PUSH
68304: LD_INT 1
68306: NEG
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68316: LD_ADDR_VAR 0 49
68320: PUSH
68321: LD_INT 3
68323: PUSH
68324: LD_INT 1
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 3
68333: PUSH
68334: LD_INT 2
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68345: LD_ADDR_VAR 0 50
68349: PUSH
68350: LD_INT 2
68352: PUSH
68353: LD_INT 3
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: PUSH
68360: LD_INT 1
68362: PUSH
68363: LD_INT 3
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68374: LD_ADDR_VAR 0 51
68378: PUSH
68379: LD_INT 1
68381: NEG
68382: PUSH
68383: LD_INT 2
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: LD_INT 2
68392: NEG
68393: PUSH
68394: LD_INT 1
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68405: LD_ADDR_VAR 0 52
68409: PUSH
68410: LD_INT 3
68412: NEG
68413: PUSH
68414: LD_INT 1
68416: NEG
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 3
68424: NEG
68425: PUSH
68426: LD_INT 2
68428: NEG
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68438: LD_ADDR_VAR 0 53
68442: PUSH
68443: LD_INT 1
68445: NEG
68446: PUSH
68447: LD_INT 3
68449: NEG
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 0
68457: PUSH
68458: LD_INT 3
68460: NEG
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PUSH
68466: LD_INT 1
68468: PUSH
68469: LD_INT 2
68471: NEG
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: LIST
68481: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68482: LD_ADDR_VAR 0 54
68486: PUSH
68487: LD_INT 2
68489: PUSH
68490: LD_INT 1
68492: NEG
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: PUSH
68498: LD_INT 3
68500: PUSH
68501: LD_INT 0
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: PUSH
68508: LD_INT 3
68510: PUSH
68511: LD_INT 1
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: LIST
68522: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68523: LD_ADDR_VAR 0 55
68527: PUSH
68528: LD_INT 3
68530: PUSH
68531: LD_INT 2
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 3
68540: PUSH
68541: LD_INT 3
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 2
68550: PUSH
68551: LD_INT 3
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: LIST
68562: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68563: LD_ADDR_VAR 0 56
68567: PUSH
68568: LD_INT 1
68570: PUSH
68571: LD_INT 3
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: PUSH
68578: LD_INT 0
68580: PUSH
68581: LD_INT 3
68583: PUSH
68584: EMPTY
68585: LIST
68586: LIST
68587: PUSH
68588: LD_INT 1
68590: NEG
68591: PUSH
68592: LD_INT 2
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: LIST
68603: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68604: LD_ADDR_VAR 0 57
68608: PUSH
68609: LD_INT 2
68611: NEG
68612: PUSH
68613: LD_INT 1
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 3
68622: NEG
68623: PUSH
68624: LD_INT 0
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 3
68633: NEG
68634: PUSH
68635: LD_INT 1
68637: NEG
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: LIST
68647: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68648: LD_ADDR_VAR 0 58
68652: PUSH
68653: LD_INT 2
68655: NEG
68656: PUSH
68657: LD_INT 3
68659: NEG
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 3
68667: NEG
68668: PUSH
68669: LD_INT 2
68671: NEG
68672: PUSH
68673: EMPTY
68674: LIST
68675: LIST
68676: PUSH
68677: LD_INT 3
68679: NEG
68680: PUSH
68681: LD_INT 3
68683: NEG
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: LIST
68693: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68694: LD_ADDR_VAR 0 59
68698: PUSH
68699: LD_INT 1
68701: NEG
68702: PUSH
68703: LD_INT 2
68705: NEG
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: PUSH
68711: LD_INT 0
68713: PUSH
68714: LD_INT 2
68716: NEG
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 1
68724: PUSH
68725: LD_INT 1
68727: NEG
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: LIST
68737: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68738: LD_ADDR_VAR 0 60
68742: PUSH
68743: LD_INT 1
68745: PUSH
68746: LD_INT 1
68748: NEG
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 2
68756: PUSH
68757: LD_INT 0
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: LD_INT 2
68766: PUSH
68767: LD_INT 1
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: LIST
68778: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68779: LD_ADDR_VAR 0 61
68783: PUSH
68784: LD_INT 2
68786: PUSH
68787: LD_INT 1
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 2
68796: PUSH
68797: LD_INT 2
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 1
68806: PUSH
68807: LD_INT 2
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: LIST
68818: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68819: LD_ADDR_VAR 0 62
68823: PUSH
68824: LD_INT 1
68826: PUSH
68827: LD_INT 2
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: LD_INT 0
68836: PUSH
68837: LD_INT 2
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 1
68846: NEG
68847: PUSH
68848: LD_INT 1
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: LIST
68859: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68860: LD_ADDR_VAR 0 63
68864: PUSH
68865: LD_INT 1
68867: NEG
68868: PUSH
68869: LD_INT 1
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: LD_INT 2
68878: NEG
68879: PUSH
68880: LD_INT 0
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: LD_INT 2
68889: NEG
68890: PUSH
68891: LD_INT 1
68893: NEG
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: LIST
68903: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68904: LD_ADDR_VAR 0 64
68908: PUSH
68909: LD_INT 1
68911: NEG
68912: PUSH
68913: LD_INT 2
68915: NEG
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: LD_INT 2
68923: NEG
68924: PUSH
68925: LD_INT 1
68927: NEG
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 2
68935: NEG
68936: PUSH
68937: LD_INT 2
68939: NEG
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: LIST
68949: ST_TO_ADDR
// end ; 2 :
68950: GO 72216
68952: LD_INT 2
68954: DOUBLE
68955: EQUAL
68956: IFTRUE 68960
68958: GO 72215
68960: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68961: LD_ADDR_VAR 0 29
68965: PUSH
68966: LD_INT 4
68968: PUSH
68969: LD_INT 0
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: LD_INT 4
68978: PUSH
68979: LD_INT 1
68981: NEG
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: LD_INT 5
68989: PUSH
68990: LD_INT 0
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 5
68999: PUSH
69000: LD_INT 1
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 4
69009: PUSH
69010: LD_INT 1
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 3
69019: PUSH
69020: LD_INT 0
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 3
69029: PUSH
69030: LD_INT 1
69032: NEG
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 3
69040: PUSH
69041: LD_INT 2
69043: NEG
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: LD_INT 5
69051: PUSH
69052: LD_INT 2
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: PUSH
69059: LD_INT 3
69061: PUSH
69062: LD_INT 3
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 3
69071: PUSH
69072: LD_INT 2
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PUSH
69079: LD_INT 4
69081: PUSH
69082: LD_INT 3
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 4
69091: PUSH
69092: LD_INT 4
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: PUSH
69099: LD_INT 3
69101: PUSH
69102: LD_INT 4
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: PUSH
69109: LD_INT 2
69111: PUSH
69112: LD_INT 3
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: PUSH
69119: LD_INT 2
69121: PUSH
69122: LD_INT 2
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: PUSH
69129: LD_INT 4
69131: PUSH
69132: LD_INT 2
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PUSH
69139: LD_INT 2
69141: PUSH
69142: LD_INT 4
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PUSH
69149: LD_INT 0
69151: PUSH
69152: LD_INT 4
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 0
69161: PUSH
69162: LD_INT 3
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: LD_INT 1
69171: PUSH
69172: LD_INT 4
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PUSH
69179: LD_INT 1
69181: PUSH
69182: LD_INT 5
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: PUSH
69189: LD_INT 0
69191: PUSH
69192: LD_INT 5
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 1
69201: NEG
69202: PUSH
69203: LD_INT 4
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: PUSH
69210: LD_INT 1
69212: NEG
69213: PUSH
69214: LD_INT 3
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: PUSH
69221: LD_INT 2
69223: PUSH
69224: LD_INT 5
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: PUSH
69231: LD_INT 2
69233: NEG
69234: PUSH
69235: LD_INT 3
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 3
69244: NEG
69245: PUSH
69246: LD_INT 0
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: LD_INT 3
69255: NEG
69256: PUSH
69257: LD_INT 1
69259: NEG
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: LD_INT 2
69267: NEG
69268: PUSH
69269: LD_INT 0
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 2
69278: NEG
69279: PUSH
69280: LD_INT 1
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 3
69289: NEG
69290: PUSH
69291: LD_INT 1
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 4
69300: NEG
69301: PUSH
69302: LD_INT 0
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 4
69311: NEG
69312: PUSH
69313: LD_INT 1
69315: NEG
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: PUSH
69321: LD_INT 4
69323: NEG
69324: PUSH
69325: LD_INT 2
69327: NEG
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: PUSH
69333: LD_INT 2
69335: NEG
69336: PUSH
69337: LD_INT 2
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: LD_INT 4
69346: NEG
69347: PUSH
69348: LD_INT 4
69350: NEG
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 4
69358: NEG
69359: PUSH
69360: LD_INT 5
69362: NEG
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: LD_INT 3
69370: NEG
69371: PUSH
69372: LD_INT 4
69374: NEG
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 3
69382: NEG
69383: PUSH
69384: LD_INT 3
69386: NEG
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: PUSH
69392: LD_INT 4
69394: NEG
69395: PUSH
69396: LD_INT 3
69398: NEG
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 5
69406: NEG
69407: PUSH
69408: LD_INT 4
69410: NEG
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 5
69418: NEG
69419: PUSH
69420: LD_INT 5
69422: NEG
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 3
69430: NEG
69431: PUSH
69432: LD_INT 5
69434: NEG
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: LD_INT 5
69442: NEG
69443: PUSH
69444: LD_INT 3
69446: NEG
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: LIST
69459: LIST
69460: LIST
69461: LIST
69462: LIST
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69499: LD_ADDR_VAR 0 30
69503: PUSH
69504: LD_INT 4
69506: PUSH
69507: LD_INT 4
69509: PUSH
69510: EMPTY
69511: LIST
69512: LIST
69513: PUSH
69514: LD_INT 4
69516: PUSH
69517: LD_INT 3
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: PUSH
69524: LD_INT 5
69526: PUSH
69527: LD_INT 4
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: PUSH
69534: LD_INT 5
69536: PUSH
69537: LD_INT 5
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PUSH
69544: LD_INT 4
69546: PUSH
69547: LD_INT 5
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 3
69556: PUSH
69557: LD_INT 4
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PUSH
69564: LD_INT 3
69566: PUSH
69567: LD_INT 3
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: LD_INT 5
69576: PUSH
69577: LD_INT 3
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 3
69586: PUSH
69587: LD_INT 5
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 0
69596: PUSH
69597: LD_INT 3
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: PUSH
69604: LD_INT 0
69606: PUSH
69607: LD_INT 2
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: PUSH
69614: LD_INT 1
69616: PUSH
69617: LD_INT 3
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: PUSH
69624: LD_INT 1
69626: PUSH
69627: LD_INT 4
69629: PUSH
69630: EMPTY
69631: LIST
69632: LIST
69633: PUSH
69634: LD_INT 0
69636: PUSH
69637: LD_INT 4
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: PUSH
69644: LD_INT 1
69646: NEG
69647: PUSH
69648: LD_INT 3
69650: PUSH
69651: EMPTY
69652: LIST
69653: LIST
69654: PUSH
69655: LD_INT 1
69657: NEG
69658: PUSH
69659: LD_INT 2
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: PUSH
69666: LD_INT 2
69668: PUSH
69669: LD_INT 4
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: PUSH
69676: LD_INT 2
69678: NEG
69679: PUSH
69680: LD_INT 2
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 4
69689: NEG
69690: PUSH
69691: LD_INT 0
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PUSH
69698: LD_INT 4
69700: NEG
69701: PUSH
69702: LD_INT 1
69704: NEG
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 3
69712: NEG
69713: PUSH
69714: LD_INT 0
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: PUSH
69721: LD_INT 3
69723: NEG
69724: PUSH
69725: LD_INT 1
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: PUSH
69732: LD_INT 4
69734: NEG
69735: PUSH
69736: LD_INT 1
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: PUSH
69743: LD_INT 5
69745: NEG
69746: PUSH
69747: LD_INT 0
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: LD_INT 5
69756: NEG
69757: PUSH
69758: LD_INT 1
69760: NEG
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 5
69768: NEG
69769: PUSH
69770: LD_INT 2
69772: NEG
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: PUSH
69778: LD_INT 3
69780: NEG
69781: PUSH
69782: LD_INT 2
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 3
69791: NEG
69792: PUSH
69793: LD_INT 3
69795: NEG
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 3
69803: NEG
69804: PUSH
69805: LD_INT 4
69807: NEG
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 2
69815: NEG
69816: PUSH
69817: LD_INT 3
69819: NEG
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: PUSH
69825: LD_INT 2
69827: NEG
69828: PUSH
69829: LD_INT 2
69831: NEG
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: PUSH
69837: LD_INT 3
69839: NEG
69840: PUSH
69841: LD_INT 2
69843: NEG
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: PUSH
69849: LD_INT 4
69851: NEG
69852: PUSH
69853: LD_INT 3
69855: NEG
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PUSH
69861: LD_INT 4
69863: NEG
69864: PUSH
69865: LD_INT 4
69867: NEG
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 2
69875: NEG
69876: PUSH
69877: LD_INT 4
69879: NEG
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 4
69887: NEG
69888: PUSH
69889: LD_INT 2
69891: NEG
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: LD_INT 0
69899: PUSH
69900: LD_INT 4
69902: NEG
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: PUSH
69908: LD_INT 0
69910: PUSH
69911: LD_INT 5
69913: NEG
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: PUSH
69919: LD_INT 1
69921: PUSH
69922: LD_INT 4
69924: NEG
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 1
69932: PUSH
69933: LD_INT 3
69935: NEG
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 0
69943: PUSH
69944: LD_INT 3
69946: NEG
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PUSH
69952: LD_INT 1
69954: NEG
69955: PUSH
69956: LD_INT 4
69958: NEG
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: PUSH
69964: LD_INT 1
69966: NEG
69967: PUSH
69968: LD_INT 5
69970: NEG
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: PUSH
69976: LD_INT 2
69978: PUSH
69979: LD_INT 3
69981: NEG
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: PUSH
69987: LD_INT 2
69989: NEG
69990: PUSH
69991: LD_INT 5
69993: NEG
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: LIST
70003: LIST
70004: LIST
70005: LIST
70006: LIST
70007: LIST
70008: LIST
70009: LIST
70010: LIST
70011: LIST
70012: LIST
70013: LIST
70014: LIST
70015: LIST
70016: LIST
70017: LIST
70018: LIST
70019: LIST
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: LIST
70025: LIST
70026: LIST
70027: LIST
70028: LIST
70029: LIST
70030: LIST
70031: LIST
70032: LIST
70033: LIST
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70046: LD_ADDR_VAR 0 31
70050: PUSH
70051: LD_INT 0
70053: PUSH
70054: LD_INT 4
70056: PUSH
70057: EMPTY
70058: LIST
70059: LIST
70060: PUSH
70061: LD_INT 0
70063: PUSH
70064: LD_INT 3
70066: PUSH
70067: EMPTY
70068: LIST
70069: LIST
70070: PUSH
70071: LD_INT 1
70073: PUSH
70074: LD_INT 4
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: PUSH
70081: LD_INT 1
70083: PUSH
70084: LD_INT 5
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: PUSH
70091: LD_INT 0
70093: PUSH
70094: LD_INT 5
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: PUSH
70101: LD_INT 1
70103: NEG
70104: PUSH
70105: LD_INT 4
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: PUSH
70112: LD_INT 1
70114: NEG
70115: PUSH
70116: LD_INT 3
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: PUSH
70123: LD_INT 2
70125: PUSH
70126: LD_INT 5
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: PUSH
70133: LD_INT 2
70135: NEG
70136: PUSH
70137: LD_INT 3
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PUSH
70144: LD_INT 3
70146: NEG
70147: PUSH
70148: LD_INT 0
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: PUSH
70155: LD_INT 3
70157: NEG
70158: PUSH
70159: LD_INT 1
70161: NEG
70162: PUSH
70163: EMPTY
70164: LIST
70165: LIST
70166: PUSH
70167: LD_INT 2
70169: NEG
70170: PUSH
70171: LD_INT 0
70173: PUSH
70174: EMPTY
70175: LIST
70176: LIST
70177: PUSH
70178: LD_INT 2
70180: NEG
70181: PUSH
70182: LD_INT 1
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: LD_INT 3
70191: NEG
70192: PUSH
70193: LD_INT 1
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: LD_INT 4
70202: NEG
70203: PUSH
70204: LD_INT 0
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 4
70213: NEG
70214: PUSH
70215: LD_INT 1
70217: NEG
70218: PUSH
70219: EMPTY
70220: LIST
70221: LIST
70222: PUSH
70223: LD_INT 4
70225: NEG
70226: PUSH
70227: LD_INT 2
70229: NEG
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PUSH
70235: LD_INT 2
70237: NEG
70238: PUSH
70239: LD_INT 2
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: LD_INT 4
70248: NEG
70249: PUSH
70250: LD_INT 4
70252: NEG
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: LD_INT 4
70260: NEG
70261: PUSH
70262: LD_INT 5
70264: NEG
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: LD_INT 3
70272: NEG
70273: PUSH
70274: LD_INT 4
70276: NEG
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: PUSH
70282: LD_INT 3
70284: NEG
70285: PUSH
70286: LD_INT 3
70288: NEG
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: PUSH
70294: LD_INT 4
70296: NEG
70297: PUSH
70298: LD_INT 3
70300: NEG
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 5
70308: NEG
70309: PUSH
70310: LD_INT 4
70312: NEG
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PUSH
70318: LD_INT 5
70320: NEG
70321: PUSH
70322: LD_INT 5
70324: NEG
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 3
70332: NEG
70333: PUSH
70334: LD_INT 5
70336: NEG
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 5
70344: NEG
70345: PUSH
70346: LD_INT 3
70348: NEG
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: LD_INT 0
70356: PUSH
70357: LD_INT 3
70359: NEG
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: PUSH
70365: LD_INT 0
70367: PUSH
70368: LD_INT 4
70370: NEG
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: PUSH
70376: LD_INT 1
70378: PUSH
70379: LD_INT 3
70381: NEG
70382: PUSH
70383: EMPTY
70384: LIST
70385: LIST
70386: PUSH
70387: LD_INT 1
70389: PUSH
70390: LD_INT 2
70392: NEG
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: LD_INT 0
70400: PUSH
70401: LD_INT 2
70403: NEG
70404: PUSH
70405: EMPTY
70406: LIST
70407: LIST
70408: PUSH
70409: LD_INT 1
70411: NEG
70412: PUSH
70413: LD_INT 3
70415: NEG
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 1
70423: NEG
70424: PUSH
70425: LD_INT 4
70427: NEG
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PUSH
70433: LD_INT 2
70435: PUSH
70436: LD_INT 2
70438: NEG
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: PUSH
70444: LD_INT 2
70446: NEG
70447: PUSH
70448: LD_INT 4
70450: NEG
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: PUSH
70456: LD_INT 4
70458: PUSH
70459: LD_INT 0
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: PUSH
70466: LD_INT 4
70468: PUSH
70469: LD_INT 1
70471: NEG
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PUSH
70477: LD_INT 5
70479: PUSH
70480: LD_INT 0
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 5
70489: PUSH
70490: LD_INT 1
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: LD_INT 4
70499: PUSH
70500: LD_INT 1
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: PUSH
70507: LD_INT 3
70509: PUSH
70510: LD_INT 0
70512: PUSH
70513: EMPTY
70514: LIST
70515: LIST
70516: PUSH
70517: LD_INT 3
70519: PUSH
70520: LD_INT 1
70522: NEG
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_INT 3
70530: PUSH
70531: LD_INT 2
70533: NEG
70534: PUSH
70535: EMPTY
70536: LIST
70537: LIST
70538: PUSH
70539: LD_INT 5
70541: PUSH
70542: LD_INT 2
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: LIST
70553: LIST
70554: LIST
70555: LIST
70556: LIST
70557: LIST
70558: LIST
70559: LIST
70560: LIST
70561: LIST
70562: LIST
70563: LIST
70564: LIST
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: LIST
70570: LIST
70571: LIST
70572: LIST
70573: LIST
70574: LIST
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: LIST
70581: LIST
70582: LIST
70583: LIST
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70596: LD_ADDR_VAR 0 32
70600: PUSH
70601: LD_INT 4
70603: NEG
70604: PUSH
70605: LD_INT 0
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: PUSH
70612: LD_INT 4
70614: NEG
70615: PUSH
70616: LD_INT 1
70618: NEG
70619: PUSH
70620: EMPTY
70621: LIST
70622: LIST
70623: PUSH
70624: LD_INT 3
70626: NEG
70627: PUSH
70628: LD_INT 0
70630: PUSH
70631: EMPTY
70632: LIST
70633: LIST
70634: PUSH
70635: LD_INT 3
70637: NEG
70638: PUSH
70639: LD_INT 1
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: PUSH
70646: LD_INT 4
70648: NEG
70649: PUSH
70650: LD_INT 1
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: PUSH
70657: LD_INT 5
70659: NEG
70660: PUSH
70661: LD_INT 0
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: PUSH
70668: LD_INT 5
70670: NEG
70671: PUSH
70672: LD_INT 1
70674: NEG
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: PUSH
70680: LD_INT 5
70682: NEG
70683: PUSH
70684: LD_INT 2
70686: NEG
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: LD_INT 3
70694: NEG
70695: PUSH
70696: LD_INT 2
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: LD_INT 3
70705: NEG
70706: PUSH
70707: LD_INT 3
70709: NEG
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: PUSH
70715: LD_INT 3
70717: NEG
70718: PUSH
70719: LD_INT 4
70721: NEG
70722: PUSH
70723: EMPTY
70724: LIST
70725: LIST
70726: PUSH
70727: LD_INT 2
70729: NEG
70730: PUSH
70731: LD_INT 3
70733: NEG
70734: PUSH
70735: EMPTY
70736: LIST
70737: LIST
70738: PUSH
70739: LD_INT 2
70741: NEG
70742: PUSH
70743: LD_INT 2
70745: NEG
70746: PUSH
70747: EMPTY
70748: LIST
70749: LIST
70750: PUSH
70751: LD_INT 3
70753: NEG
70754: PUSH
70755: LD_INT 2
70757: NEG
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: PUSH
70763: LD_INT 4
70765: NEG
70766: PUSH
70767: LD_INT 3
70769: NEG
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: LD_INT 4
70777: NEG
70778: PUSH
70779: LD_INT 4
70781: NEG
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: PUSH
70787: LD_INT 2
70789: NEG
70790: PUSH
70791: LD_INT 4
70793: NEG
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 4
70801: NEG
70802: PUSH
70803: LD_INT 2
70805: NEG
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: LD_INT 0
70813: PUSH
70814: LD_INT 4
70816: NEG
70817: PUSH
70818: EMPTY
70819: LIST
70820: LIST
70821: PUSH
70822: LD_INT 0
70824: PUSH
70825: LD_INT 5
70827: NEG
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: PUSH
70833: LD_INT 1
70835: PUSH
70836: LD_INT 4
70838: NEG
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PUSH
70844: LD_INT 1
70846: PUSH
70847: LD_INT 3
70849: NEG
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: PUSH
70855: LD_INT 0
70857: PUSH
70858: LD_INT 3
70860: NEG
70861: PUSH
70862: EMPTY
70863: LIST
70864: LIST
70865: PUSH
70866: LD_INT 1
70868: NEG
70869: PUSH
70870: LD_INT 4
70872: NEG
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: PUSH
70878: LD_INT 1
70880: NEG
70881: PUSH
70882: LD_INT 5
70884: NEG
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: PUSH
70890: LD_INT 2
70892: PUSH
70893: LD_INT 3
70895: NEG
70896: PUSH
70897: EMPTY
70898: LIST
70899: LIST
70900: PUSH
70901: LD_INT 2
70903: NEG
70904: PUSH
70905: LD_INT 5
70907: NEG
70908: PUSH
70909: EMPTY
70910: LIST
70911: LIST
70912: PUSH
70913: LD_INT 3
70915: PUSH
70916: LD_INT 0
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: PUSH
70923: LD_INT 3
70925: PUSH
70926: LD_INT 1
70928: NEG
70929: PUSH
70930: EMPTY
70931: LIST
70932: LIST
70933: PUSH
70934: LD_INT 4
70936: PUSH
70937: LD_INT 0
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: PUSH
70944: LD_INT 4
70946: PUSH
70947: LD_INT 1
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PUSH
70954: LD_INT 3
70956: PUSH
70957: LD_INT 1
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: PUSH
70964: LD_INT 2
70966: PUSH
70967: LD_INT 0
70969: PUSH
70970: EMPTY
70971: LIST
70972: LIST
70973: PUSH
70974: LD_INT 2
70976: PUSH
70977: LD_INT 1
70979: NEG
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: PUSH
70985: LD_INT 2
70987: PUSH
70988: LD_INT 2
70990: NEG
70991: PUSH
70992: EMPTY
70993: LIST
70994: LIST
70995: PUSH
70996: LD_INT 4
70998: PUSH
70999: LD_INT 2
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PUSH
71006: LD_INT 4
71008: PUSH
71009: LD_INT 4
71011: PUSH
71012: EMPTY
71013: LIST
71014: LIST
71015: PUSH
71016: LD_INT 4
71018: PUSH
71019: LD_INT 3
71021: PUSH
71022: EMPTY
71023: LIST
71024: LIST
71025: PUSH
71026: LD_INT 5
71028: PUSH
71029: LD_INT 4
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: PUSH
71036: LD_INT 5
71038: PUSH
71039: LD_INT 5
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: LD_INT 4
71048: PUSH
71049: LD_INT 5
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: PUSH
71056: LD_INT 3
71058: PUSH
71059: LD_INT 4
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: PUSH
71066: LD_INT 3
71068: PUSH
71069: LD_INT 3
71071: PUSH
71072: EMPTY
71073: LIST
71074: LIST
71075: PUSH
71076: LD_INT 5
71078: PUSH
71079: LD_INT 3
71081: PUSH
71082: EMPTY
71083: LIST
71084: LIST
71085: PUSH
71086: LD_INT 3
71088: PUSH
71089: LD_INT 5
71091: PUSH
71092: EMPTY
71093: LIST
71094: LIST
71095: PUSH
71096: EMPTY
71097: LIST
71098: LIST
71099: LIST
71100: LIST
71101: LIST
71102: LIST
71103: LIST
71104: LIST
71105: LIST
71106: LIST
71107: LIST
71108: LIST
71109: LIST
71110: LIST
71111: LIST
71112: LIST
71113: LIST
71114: LIST
71115: LIST
71116: LIST
71117: LIST
71118: LIST
71119: LIST
71120: LIST
71121: LIST
71122: LIST
71123: LIST
71124: LIST
71125: LIST
71126: LIST
71127: LIST
71128: LIST
71129: LIST
71130: LIST
71131: LIST
71132: LIST
71133: LIST
71134: LIST
71135: LIST
71136: LIST
71137: LIST
71138: LIST
71139: LIST
71140: LIST
71141: LIST
71142: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71143: LD_ADDR_VAR 0 33
71147: PUSH
71148: LD_INT 4
71150: NEG
71151: PUSH
71152: LD_INT 4
71154: NEG
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: PUSH
71160: LD_INT 4
71162: NEG
71163: PUSH
71164: LD_INT 5
71166: NEG
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: PUSH
71172: LD_INT 3
71174: NEG
71175: PUSH
71176: LD_INT 4
71178: NEG
71179: PUSH
71180: EMPTY
71181: LIST
71182: LIST
71183: PUSH
71184: LD_INT 3
71186: NEG
71187: PUSH
71188: LD_INT 3
71190: NEG
71191: PUSH
71192: EMPTY
71193: LIST
71194: LIST
71195: PUSH
71196: LD_INT 4
71198: NEG
71199: PUSH
71200: LD_INT 3
71202: NEG
71203: PUSH
71204: EMPTY
71205: LIST
71206: LIST
71207: PUSH
71208: LD_INT 5
71210: NEG
71211: PUSH
71212: LD_INT 4
71214: NEG
71215: PUSH
71216: EMPTY
71217: LIST
71218: LIST
71219: PUSH
71220: LD_INT 5
71222: NEG
71223: PUSH
71224: LD_INT 5
71226: NEG
71227: PUSH
71228: EMPTY
71229: LIST
71230: LIST
71231: PUSH
71232: LD_INT 3
71234: NEG
71235: PUSH
71236: LD_INT 5
71238: NEG
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: PUSH
71244: LD_INT 5
71246: NEG
71247: PUSH
71248: LD_INT 3
71250: NEG
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: LD_INT 0
71258: PUSH
71259: LD_INT 3
71261: NEG
71262: PUSH
71263: EMPTY
71264: LIST
71265: LIST
71266: PUSH
71267: LD_INT 0
71269: PUSH
71270: LD_INT 4
71272: NEG
71273: PUSH
71274: EMPTY
71275: LIST
71276: LIST
71277: PUSH
71278: LD_INT 1
71280: PUSH
71281: LD_INT 3
71283: NEG
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: PUSH
71289: LD_INT 1
71291: PUSH
71292: LD_INT 2
71294: NEG
71295: PUSH
71296: EMPTY
71297: LIST
71298: LIST
71299: PUSH
71300: LD_INT 0
71302: PUSH
71303: LD_INT 2
71305: NEG
71306: PUSH
71307: EMPTY
71308: LIST
71309: LIST
71310: PUSH
71311: LD_INT 1
71313: NEG
71314: PUSH
71315: LD_INT 3
71317: NEG
71318: PUSH
71319: EMPTY
71320: LIST
71321: LIST
71322: PUSH
71323: LD_INT 1
71325: NEG
71326: PUSH
71327: LD_INT 4
71329: NEG
71330: PUSH
71331: EMPTY
71332: LIST
71333: LIST
71334: PUSH
71335: LD_INT 2
71337: PUSH
71338: LD_INT 2
71340: NEG
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: PUSH
71346: LD_INT 2
71348: NEG
71349: PUSH
71350: LD_INT 4
71352: NEG
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: PUSH
71358: LD_INT 4
71360: PUSH
71361: LD_INT 0
71363: PUSH
71364: EMPTY
71365: LIST
71366: LIST
71367: PUSH
71368: LD_INT 4
71370: PUSH
71371: LD_INT 1
71373: NEG
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: PUSH
71379: LD_INT 5
71381: PUSH
71382: LD_INT 0
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: LD_INT 5
71391: PUSH
71392: LD_INT 1
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PUSH
71399: LD_INT 4
71401: PUSH
71402: LD_INT 1
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PUSH
71409: LD_INT 3
71411: PUSH
71412: LD_INT 0
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: PUSH
71419: LD_INT 3
71421: PUSH
71422: LD_INT 1
71424: NEG
71425: PUSH
71426: EMPTY
71427: LIST
71428: LIST
71429: PUSH
71430: LD_INT 3
71432: PUSH
71433: LD_INT 2
71435: NEG
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: PUSH
71441: LD_INT 5
71443: PUSH
71444: LD_INT 2
71446: PUSH
71447: EMPTY
71448: LIST
71449: LIST
71450: PUSH
71451: LD_INT 3
71453: PUSH
71454: LD_INT 3
71456: PUSH
71457: EMPTY
71458: LIST
71459: LIST
71460: PUSH
71461: LD_INT 3
71463: PUSH
71464: LD_INT 2
71466: PUSH
71467: EMPTY
71468: LIST
71469: LIST
71470: PUSH
71471: LD_INT 4
71473: PUSH
71474: LD_INT 3
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PUSH
71481: LD_INT 4
71483: PUSH
71484: LD_INT 4
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: PUSH
71491: LD_INT 3
71493: PUSH
71494: LD_INT 4
71496: PUSH
71497: EMPTY
71498: LIST
71499: LIST
71500: PUSH
71501: LD_INT 2
71503: PUSH
71504: LD_INT 3
71506: PUSH
71507: EMPTY
71508: LIST
71509: LIST
71510: PUSH
71511: LD_INT 2
71513: PUSH
71514: LD_INT 2
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: PUSH
71521: LD_INT 4
71523: PUSH
71524: LD_INT 2
71526: PUSH
71527: EMPTY
71528: LIST
71529: LIST
71530: PUSH
71531: LD_INT 2
71533: PUSH
71534: LD_INT 4
71536: PUSH
71537: EMPTY
71538: LIST
71539: LIST
71540: PUSH
71541: LD_INT 0
71543: PUSH
71544: LD_INT 4
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: PUSH
71551: LD_INT 0
71553: PUSH
71554: LD_INT 3
71556: PUSH
71557: EMPTY
71558: LIST
71559: LIST
71560: PUSH
71561: LD_INT 1
71563: PUSH
71564: LD_INT 4
71566: PUSH
71567: EMPTY
71568: LIST
71569: LIST
71570: PUSH
71571: LD_INT 1
71573: PUSH
71574: LD_INT 5
71576: PUSH
71577: EMPTY
71578: LIST
71579: LIST
71580: PUSH
71581: LD_INT 0
71583: PUSH
71584: LD_INT 5
71586: PUSH
71587: EMPTY
71588: LIST
71589: LIST
71590: PUSH
71591: LD_INT 1
71593: NEG
71594: PUSH
71595: LD_INT 4
71597: PUSH
71598: EMPTY
71599: LIST
71600: LIST
71601: PUSH
71602: LD_INT 1
71604: NEG
71605: PUSH
71606: LD_INT 3
71608: PUSH
71609: EMPTY
71610: LIST
71611: LIST
71612: PUSH
71613: LD_INT 2
71615: PUSH
71616: LD_INT 5
71618: PUSH
71619: EMPTY
71620: LIST
71621: LIST
71622: PUSH
71623: LD_INT 2
71625: NEG
71626: PUSH
71627: LD_INT 3
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: PUSH
71634: EMPTY
71635: LIST
71636: LIST
71637: LIST
71638: LIST
71639: LIST
71640: LIST
71641: LIST
71642: LIST
71643: LIST
71644: LIST
71645: LIST
71646: LIST
71647: LIST
71648: LIST
71649: LIST
71650: LIST
71651: LIST
71652: LIST
71653: LIST
71654: LIST
71655: LIST
71656: LIST
71657: LIST
71658: LIST
71659: LIST
71660: LIST
71661: LIST
71662: LIST
71663: LIST
71664: LIST
71665: LIST
71666: LIST
71667: LIST
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: LIST
71673: LIST
71674: LIST
71675: LIST
71676: LIST
71677: LIST
71678: LIST
71679: LIST
71680: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71681: LD_ADDR_VAR 0 34
71685: PUSH
71686: LD_INT 0
71688: PUSH
71689: LD_INT 4
71691: NEG
71692: PUSH
71693: EMPTY
71694: LIST
71695: LIST
71696: PUSH
71697: LD_INT 0
71699: PUSH
71700: LD_INT 5
71702: NEG
71703: PUSH
71704: EMPTY
71705: LIST
71706: LIST
71707: PUSH
71708: LD_INT 1
71710: PUSH
71711: LD_INT 4
71713: NEG
71714: PUSH
71715: EMPTY
71716: LIST
71717: LIST
71718: PUSH
71719: LD_INT 1
71721: PUSH
71722: LD_INT 3
71724: NEG
71725: PUSH
71726: EMPTY
71727: LIST
71728: LIST
71729: PUSH
71730: LD_INT 0
71732: PUSH
71733: LD_INT 3
71735: NEG
71736: PUSH
71737: EMPTY
71738: LIST
71739: LIST
71740: PUSH
71741: LD_INT 1
71743: NEG
71744: PUSH
71745: LD_INT 4
71747: NEG
71748: PUSH
71749: EMPTY
71750: LIST
71751: LIST
71752: PUSH
71753: LD_INT 1
71755: NEG
71756: PUSH
71757: LD_INT 5
71759: NEG
71760: PUSH
71761: EMPTY
71762: LIST
71763: LIST
71764: PUSH
71765: LD_INT 2
71767: PUSH
71768: LD_INT 3
71770: NEG
71771: PUSH
71772: EMPTY
71773: LIST
71774: LIST
71775: PUSH
71776: LD_INT 2
71778: NEG
71779: PUSH
71780: LD_INT 5
71782: NEG
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: PUSH
71788: LD_INT 3
71790: PUSH
71791: LD_INT 0
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: PUSH
71798: LD_INT 3
71800: PUSH
71801: LD_INT 1
71803: NEG
71804: PUSH
71805: EMPTY
71806: LIST
71807: LIST
71808: PUSH
71809: LD_INT 4
71811: PUSH
71812: LD_INT 0
71814: PUSH
71815: EMPTY
71816: LIST
71817: LIST
71818: PUSH
71819: LD_INT 4
71821: PUSH
71822: LD_INT 1
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PUSH
71829: LD_INT 3
71831: PUSH
71832: LD_INT 1
71834: PUSH
71835: EMPTY
71836: LIST
71837: LIST
71838: PUSH
71839: LD_INT 2
71841: PUSH
71842: LD_INT 0
71844: PUSH
71845: EMPTY
71846: LIST
71847: LIST
71848: PUSH
71849: LD_INT 2
71851: PUSH
71852: LD_INT 1
71854: NEG
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: PUSH
71860: LD_INT 2
71862: PUSH
71863: LD_INT 2
71865: NEG
71866: PUSH
71867: EMPTY
71868: LIST
71869: LIST
71870: PUSH
71871: LD_INT 4
71873: PUSH
71874: LD_INT 2
71876: PUSH
71877: EMPTY
71878: LIST
71879: LIST
71880: PUSH
71881: LD_INT 4
71883: PUSH
71884: LD_INT 4
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: PUSH
71891: LD_INT 4
71893: PUSH
71894: LD_INT 3
71896: PUSH
71897: EMPTY
71898: LIST
71899: LIST
71900: PUSH
71901: LD_INT 5
71903: PUSH
71904: LD_INT 4
71906: PUSH
71907: EMPTY
71908: LIST
71909: LIST
71910: PUSH
71911: LD_INT 5
71913: PUSH
71914: LD_INT 5
71916: PUSH
71917: EMPTY
71918: LIST
71919: LIST
71920: PUSH
71921: LD_INT 4
71923: PUSH
71924: LD_INT 5
71926: PUSH
71927: EMPTY
71928: LIST
71929: LIST
71930: PUSH
71931: LD_INT 3
71933: PUSH
71934: LD_INT 4
71936: PUSH
71937: EMPTY
71938: LIST
71939: LIST
71940: PUSH
71941: LD_INT 3
71943: PUSH
71944: LD_INT 3
71946: PUSH
71947: EMPTY
71948: LIST
71949: LIST
71950: PUSH
71951: LD_INT 5
71953: PUSH
71954: LD_INT 3
71956: PUSH
71957: EMPTY
71958: LIST
71959: LIST
71960: PUSH
71961: LD_INT 3
71963: PUSH
71964: LD_INT 5
71966: PUSH
71967: EMPTY
71968: LIST
71969: LIST
71970: PUSH
71971: LD_INT 0
71973: PUSH
71974: LD_INT 3
71976: PUSH
71977: EMPTY
71978: LIST
71979: LIST
71980: PUSH
71981: LD_INT 0
71983: PUSH
71984: LD_INT 2
71986: PUSH
71987: EMPTY
71988: LIST
71989: LIST
71990: PUSH
71991: LD_INT 1
71993: PUSH
71994: LD_INT 3
71996: PUSH
71997: EMPTY
71998: LIST
71999: LIST
72000: PUSH
72001: LD_INT 1
72003: PUSH
72004: LD_INT 4
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: PUSH
72011: LD_INT 0
72013: PUSH
72014: LD_INT 4
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: PUSH
72021: LD_INT 1
72023: NEG
72024: PUSH
72025: LD_INT 3
72027: PUSH
72028: EMPTY
72029: LIST
72030: LIST
72031: PUSH
72032: LD_INT 1
72034: NEG
72035: PUSH
72036: LD_INT 2
72038: PUSH
72039: EMPTY
72040: LIST
72041: LIST
72042: PUSH
72043: LD_INT 2
72045: PUSH
72046: LD_INT 4
72048: PUSH
72049: EMPTY
72050: LIST
72051: LIST
72052: PUSH
72053: LD_INT 2
72055: NEG
72056: PUSH
72057: LD_INT 2
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: PUSH
72064: LD_INT 4
72066: NEG
72067: PUSH
72068: LD_INT 0
72070: PUSH
72071: EMPTY
72072: LIST
72073: LIST
72074: PUSH
72075: LD_INT 4
72077: NEG
72078: PUSH
72079: LD_INT 1
72081: NEG
72082: PUSH
72083: EMPTY
72084: LIST
72085: LIST
72086: PUSH
72087: LD_INT 3
72089: NEG
72090: PUSH
72091: LD_INT 0
72093: PUSH
72094: EMPTY
72095: LIST
72096: LIST
72097: PUSH
72098: LD_INT 3
72100: NEG
72101: PUSH
72102: LD_INT 1
72104: PUSH
72105: EMPTY
72106: LIST
72107: LIST
72108: PUSH
72109: LD_INT 4
72111: NEG
72112: PUSH
72113: LD_INT 1
72115: PUSH
72116: EMPTY
72117: LIST
72118: LIST
72119: PUSH
72120: LD_INT 5
72122: NEG
72123: PUSH
72124: LD_INT 0
72126: PUSH
72127: EMPTY
72128: LIST
72129: LIST
72130: PUSH
72131: LD_INT 5
72133: NEG
72134: PUSH
72135: LD_INT 1
72137: NEG
72138: PUSH
72139: EMPTY
72140: LIST
72141: LIST
72142: PUSH
72143: LD_INT 5
72145: NEG
72146: PUSH
72147: LD_INT 2
72149: NEG
72150: PUSH
72151: EMPTY
72152: LIST
72153: LIST
72154: PUSH
72155: LD_INT 3
72157: NEG
72158: PUSH
72159: LD_INT 2
72161: PUSH
72162: EMPTY
72163: LIST
72164: LIST
72165: PUSH
72166: EMPTY
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: LIST
72176: LIST
72177: LIST
72178: LIST
72179: LIST
72180: LIST
72181: LIST
72182: LIST
72183: LIST
72184: LIST
72185: LIST
72186: LIST
72187: LIST
72188: LIST
72189: LIST
72190: LIST
72191: LIST
72192: LIST
72193: LIST
72194: LIST
72195: LIST
72196: LIST
72197: LIST
72198: LIST
72199: LIST
72200: LIST
72201: LIST
72202: LIST
72203: LIST
72204: LIST
72205: LIST
72206: LIST
72207: LIST
72208: LIST
72209: LIST
72210: LIST
72211: LIST
72212: ST_TO_ADDR
// end ; end ;
72213: GO 72216
72215: POP
// case btype of b_depot , b_warehouse :
72216: LD_VAR 0 1
72220: PUSH
72221: LD_INT 0
72223: DOUBLE
72224: EQUAL
72225: IFTRUE 72235
72227: LD_INT 1
72229: DOUBLE
72230: EQUAL
72231: IFTRUE 72235
72233: GO 72436
72235: POP
// case nation of nation_american :
72236: LD_VAR 0 5
72240: PUSH
72241: LD_INT 1
72243: DOUBLE
72244: EQUAL
72245: IFTRUE 72249
72247: GO 72305
72249: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72250: LD_ADDR_VAR 0 9
72254: PUSH
72255: LD_VAR 0 11
72259: PUSH
72260: LD_VAR 0 12
72264: PUSH
72265: LD_VAR 0 13
72269: PUSH
72270: LD_VAR 0 14
72274: PUSH
72275: LD_VAR 0 15
72279: PUSH
72280: LD_VAR 0 16
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: LIST
72289: LIST
72290: LIST
72291: LIST
72292: PUSH
72293: LD_VAR 0 4
72297: PUSH
72298: LD_INT 1
72300: PLUS
72301: ARRAY
72302: ST_TO_ADDR
72303: GO 72434
72305: LD_INT 2
72307: DOUBLE
72308: EQUAL
72309: IFTRUE 72313
72311: GO 72369
72313: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72314: LD_ADDR_VAR 0 9
72318: PUSH
72319: LD_VAR 0 17
72323: PUSH
72324: LD_VAR 0 18
72328: PUSH
72329: LD_VAR 0 19
72333: PUSH
72334: LD_VAR 0 20
72338: PUSH
72339: LD_VAR 0 21
72343: PUSH
72344: LD_VAR 0 22
72348: PUSH
72349: EMPTY
72350: LIST
72351: LIST
72352: LIST
72353: LIST
72354: LIST
72355: LIST
72356: PUSH
72357: LD_VAR 0 4
72361: PUSH
72362: LD_INT 1
72364: PLUS
72365: ARRAY
72366: ST_TO_ADDR
72367: GO 72434
72369: LD_INT 3
72371: DOUBLE
72372: EQUAL
72373: IFTRUE 72377
72375: GO 72433
72377: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72378: LD_ADDR_VAR 0 9
72382: PUSH
72383: LD_VAR 0 23
72387: PUSH
72388: LD_VAR 0 24
72392: PUSH
72393: LD_VAR 0 25
72397: PUSH
72398: LD_VAR 0 26
72402: PUSH
72403: LD_VAR 0 27
72407: PUSH
72408: LD_VAR 0 28
72412: PUSH
72413: EMPTY
72414: LIST
72415: LIST
72416: LIST
72417: LIST
72418: LIST
72419: LIST
72420: PUSH
72421: LD_VAR 0 4
72425: PUSH
72426: LD_INT 1
72428: PLUS
72429: ARRAY
72430: ST_TO_ADDR
72431: GO 72434
72433: POP
72434: GO 72989
72436: LD_INT 2
72438: DOUBLE
72439: EQUAL
72440: IFTRUE 72450
72442: LD_INT 3
72444: DOUBLE
72445: EQUAL
72446: IFTRUE 72450
72448: GO 72506
72450: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72451: LD_ADDR_VAR 0 9
72455: PUSH
72456: LD_VAR 0 29
72460: PUSH
72461: LD_VAR 0 30
72465: PUSH
72466: LD_VAR 0 31
72470: PUSH
72471: LD_VAR 0 32
72475: PUSH
72476: LD_VAR 0 33
72480: PUSH
72481: LD_VAR 0 34
72485: PUSH
72486: EMPTY
72487: LIST
72488: LIST
72489: LIST
72490: LIST
72491: LIST
72492: LIST
72493: PUSH
72494: LD_VAR 0 4
72498: PUSH
72499: LD_INT 1
72501: PLUS
72502: ARRAY
72503: ST_TO_ADDR
72504: GO 72989
72506: LD_INT 16
72508: DOUBLE
72509: EQUAL
72510: IFTRUE 72568
72512: LD_INT 17
72514: DOUBLE
72515: EQUAL
72516: IFTRUE 72568
72518: LD_INT 18
72520: DOUBLE
72521: EQUAL
72522: IFTRUE 72568
72524: LD_INT 19
72526: DOUBLE
72527: EQUAL
72528: IFTRUE 72568
72530: LD_INT 22
72532: DOUBLE
72533: EQUAL
72534: IFTRUE 72568
72536: LD_INT 20
72538: DOUBLE
72539: EQUAL
72540: IFTRUE 72568
72542: LD_INT 21
72544: DOUBLE
72545: EQUAL
72546: IFTRUE 72568
72548: LD_INT 23
72550: DOUBLE
72551: EQUAL
72552: IFTRUE 72568
72554: LD_INT 24
72556: DOUBLE
72557: EQUAL
72558: IFTRUE 72568
72560: LD_INT 25
72562: DOUBLE
72563: EQUAL
72564: IFTRUE 72568
72566: GO 72624
72568: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72569: LD_ADDR_VAR 0 9
72573: PUSH
72574: LD_VAR 0 35
72578: PUSH
72579: LD_VAR 0 36
72583: PUSH
72584: LD_VAR 0 37
72588: PUSH
72589: LD_VAR 0 38
72593: PUSH
72594: LD_VAR 0 39
72598: PUSH
72599: LD_VAR 0 40
72603: PUSH
72604: EMPTY
72605: LIST
72606: LIST
72607: LIST
72608: LIST
72609: LIST
72610: LIST
72611: PUSH
72612: LD_VAR 0 4
72616: PUSH
72617: LD_INT 1
72619: PLUS
72620: ARRAY
72621: ST_TO_ADDR
72622: GO 72989
72624: LD_INT 6
72626: DOUBLE
72627: EQUAL
72628: IFTRUE 72680
72630: LD_INT 7
72632: DOUBLE
72633: EQUAL
72634: IFTRUE 72680
72636: LD_INT 8
72638: DOUBLE
72639: EQUAL
72640: IFTRUE 72680
72642: LD_INT 13
72644: DOUBLE
72645: EQUAL
72646: IFTRUE 72680
72648: LD_INT 12
72650: DOUBLE
72651: EQUAL
72652: IFTRUE 72680
72654: LD_INT 15
72656: DOUBLE
72657: EQUAL
72658: IFTRUE 72680
72660: LD_INT 11
72662: DOUBLE
72663: EQUAL
72664: IFTRUE 72680
72666: LD_INT 14
72668: DOUBLE
72669: EQUAL
72670: IFTRUE 72680
72672: LD_INT 10
72674: DOUBLE
72675: EQUAL
72676: IFTRUE 72680
72678: GO 72736
72680: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72681: LD_ADDR_VAR 0 9
72685: PUSH
72686: LD_VAR 0 41
72690: PUSH
72691: LD_VAR 0 42
72695: PUSH
72696: LD_VAR 0 43
72700: PUSH
72701: LD_VAR 0 44
72705: PUSH
72706: LD_VAR 0 45
72710: PUSH
72711: LD_VAR 0 46
72715: PUSH
72716: EMPTY
72717: LIST
72718: LIST
72719: LIST
72720: LIST
72721: LIST
72722: LIST
72723: PUSH
72724: LD_VAR 0 4
72728: PUSH
72729: LD_INT 1
72731: PLUS
72732: ARRAY
72733: ST_TO_ADDR
72734: GO 72989
72736: LD_INT 36
72738: DOUBLE
72739: EQUAL
72740: IFTRUE 72744
72742: GO 72800
72744: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72745: LD_ADDR_VAR 0 9
72749: PUSH
72750: LD_VAR 0 47
72754: PUSH
72755: LD_VAR 0 48
72759: PUSH
72760: LD_VAR 0 49
72764: PUSH
72765: LD_VAR 0 50
72769: PUSH
72770: LD_VAR 0 51
72774: PUSH
72775: LD_VAR 0 52
72779: PUSH
72780: EMPTY
72781: LIST
72782: LIST
72783: LIST
72784: LIST
72785: LIST
72786: LIST
72787: PUSH
72788: LD_VAR 0 4
72792: PUSH
72793: LD_INT 1
72795: PLUS
72796: ARRAY
72797: ST_TO_ADDR
72798: GO 72989
72800: LD_INT 4
72802: DOUBLE
72803: EQUAL
72804: IFTRUE 72826
72806: LD_INT 5
72808: DOUBLE
72809: EQUAL
72810: IFTRUE 72826
72812: LD_INT 34
72814: DOUBLE
72815: EQUAL
72816: IFTRUE 72826
72818: LD_INT 37
72820: DOUBLE
72821: EQUAL
72822: IFTRUE 72826
72824: GO 72882
72826: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72827: LD_ADDR_VAR 0 9
72831: PUSH
72832: LD_VAR 0 53
72836: PUSH
72837: LD_VAR 0 54
72841: PUSH
72842: LD_VAR 0 55
72846: PUSH
72847: LD_VAR 0 56
72851: PUSH
72852: LD_VAR 0 57
72856: PUSH
72857: LD_VAR 0 58
72861: PUSH
72862: EMPTY
72863: LIST
72864: LIST
72865: LIST
72866: LIST
72867: LIST
72868: LIST
72869: PUSH
72870: LD_VAR 0 4
72874: PUSH
72875: LD_INT 1
72877: PLUS
72878: ARRAY
72879: ST_TO_ADDR
72880: GO 72989
72882: LD_INT 31
72884: DOUBLE
72885: EQUAL
72886: IFTRUE 72932
72888: LD_INT 32
72890: DOUBLE
72891: EQUAL
72892: IFTRUE 72932
72894: LD_INT 33
72896: DOUBLE
72897: EQUAL
72898: IFTRUE 72932
72900: LD_INT 27
72902: DOUBLE
72903: EQUAL
72904: IFTRUE 72932
72906: LD_INT 26
72908: DOUBLE
72909: EQUAL
72910: IFTRUE 72932
72912: LD_INT 28
72914: DOUBLE
72915: EQUAL
72916: IFTRUE 72932
72918: LD_INT 29
72920: DOUBLE
72921: EQUAL
72922: IFTRUE 72932
72924: LD_INT 30
72926: DOUBLE
72927: EQUAL
72928: IFTRUE 72932
72930: GO 72988
72932: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72933: LD_ADDR_VAR 0 9
72937: PUSH
72938: LD_VAR 0 59
72942: PUSH
72943: LD_VAR 0 60
72947: PUSH
72948: LD_VAR 0 61
72952: PUSH
72953: LD_VAR 0 62
72957: PUSH
72958: LD_VAR 0 63
72962: PUSH
72963: LD_VAR 0 64
72967: PUSH
72968: EMPTY
72969: LIST
72970: LIST
72971: LIST
72972: LIST
72973: LIST
72974: LIST
72975: PUSH
72976: LD_VAR 0 4
72980: PUSH
72981: LD_INT 1
72983: PLUS
72984: ARRAY
72985: ST_TO_ADDR
72986: GO 72989
72988: POP
// temp_list2 = [ ] ;
72989: LD_ADDR_VAR 0 10
72993: PUSH
72994: EMPTY
72995: ST_TO_ADDR
// for i in temp_list do
72996: LD_ADDR_VAR 0 8
73000: PUSH
73001: LD_VAR 0 9
73005: PUSH
73006: FOR_IN
73007: IFFALSE 73059
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73009: LD_ADDR_VAR 0 10
73013: PUSH
73014: LD_VAR 0 10
73018: PUSH
73019: LD_VAR 0 8
73023: PUSH
73024: LD_INT 1
73026: ARRAY
73027: PUSH
73028: LD_VAR 0 2
73032: PLUS
73033: PUSH
73034: LD_VAR 0 8
73038: PUSH
73039: LD_INT 2
73041: ARRAY
73042: PUSH
73043: LD_VAR 0 3
73047: PLUS
73048: PUSH
73049: EMPTY
73050: LIST
73051: LIST
73052: PUSH
73053: EMPTY
73054: LIST
73055: ADD
73056: ST_TO_ADDR
73057: GO 73006
73059: POP
73060: POP
// result = temp_list2 ;
73061: LD_ADDR_VAR 0 7
73065: PUSH
73066: LD_VAR 0 10
73070: ST_TO_ADDR
// end ;
73071: LD_VAR 0 7
73075: RET
// export function EnemyInRange ( unit , dist ) ; begin
73076: LD_INT 0
73078: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73079: LD_ADDR_VAR 0 3
73083: PUSH
73084: LD_VAR 0 1
73088: PPUSH
73089: CALL_OW 255
73093: PPUSH
73094: LD_VAR 0 1
73098: PPUSH
73099: CALL_OW 250
73103: PPUSH
73104: LD_VAR 0 1
73108: PPUSH
73109: CALL_OW 251
73113: PPUSH
73114: LD_VAR 0 2
73118: PPUSH
73119: CALL 47180 0 4
73123: PUSH
73124: LD_INT 4
73126: ARRAY
73127: ST_TO_ADDR
// end ;
73128: LD_VAR 0 3
73132: RET
// export function PlayerSeeMe ( unit ) ; begin
73133: LD_INT 0
73135: PPUSH
// result := See ( your_side , unit ) ;
73136: LD_ADDR_VAR 0 2
73140: PUSH
73141: LD_OWVAR 2
73145: PPUSH
73146: LD_VAR 0 1
73150: PPUSH
73151: CALL_OW 292
73155: ST_TO_ADDR
// end ;
73156: LD_VAR 0 2
73160: RET
// export function ReverseDir ( unit ) ; begin
73161: LD_INT 0
73163: PPUSH
// if not unit then
73164: LD_VAR 0 1
73168: NOT
73169: IFFALSE 73173
// exit ;
73171: GO 73196
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73173: LD_ADDR_VAR 0 2
73177: PUSH
73178: LD_VAR 0 1
73182: PPUSH
73183: CALL_OW 254
73187: PUSH
73188: LD_INT 3
73190: PLUS
73191: PUSH
73192: LD_INT 6
73194: MOD
73195: ST_TO_ADDR
// end ;
73196: LD_VAR 0 2
73200: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
73201: LD_INT 0
73203: PPUSH
73204: PPUSH
73205: PPUSH
73206: PPUSH
73207: PPUSH
// if not hexes then
73208: LD_VAR 0 2
73212: NOT
73213: IFFALSE 73217
// exit ;
73215: GO 73365
// dist := 9999 ;
73217: LD_ADDR_VAR 0 5
73221: PUSH
73222: LD_INT 9999
73224: ST_TO_ADDR
// for i = 1 to hexes do
73225: LD_ADDR_VAR 0 4
73229: PUSH
73230: DOUBLE
73231: LD_INT 1
73233: DEC
73234: ST_TO_ADDR
73235: LD_VAR 0 2
73239: PUSH
73240: FOR_TO
73241: IFFALSE 73353
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
73243: LD_VAR 0 1
73247: PPUSH
73248: LD_VAR 0 2
73252: PUSH
73253: LD_VAR 0 4
73257: ARRAY
73258: PUSH
73259: LD_INT 1
73261: ARRAY
73262: PPUSH
73263: LD_VAR 0 2
73267: PUSH
73268: LD_VAR 0 4
73272: ARRAY
73273: PUSH
73274: LD_INT 2
73276: ARRAY
73277: PPUSH
73278: CALL_OW 297
73282: PUSH
73283: LD_VAR 0 5
73287: LESS
73288: IFFALSE 73351
// begin hex := hexes [ i ] ;
73290: LD_ADDR_VAR 0 7
73294: PUSH
73295: LD_VAR 0 2
73299: PUSH
73300: LD_VAR 0 4
73304: ARRAY
73305: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73306: LD_ADDR_VAR 0 5
73310: PUSH
73311: LD_VAR 0 1
73315: PPUSH
73316: LD_VAR 0 2
73320: PUSH
73321: LD_VAR 0 4
73325: ARRAY
73326: PUSH
73327: LD_INT 1
73329: ARRAY
73330: PPUSH
73331: LD_VAR 0 2
73335: PUSH
73336: LD_VAR 0 4
73340: ARRAY
73341: PUSH
73342: LD_INT 2
73344: ARRAY
73345: PPUSH
73346: CALL_OW 297
73350: ST_TO_ADDR
// end ; end ;
73351: GO 73240
73353: POP
73354: POP
// result := hex ;
73355: LD_ADDR_VAR 0 3
73359: PUSH
73360: LD_VAR 0 7
73364: ST_TO_ADDR
// end ;
73365: LD_VAR 0 3
73369: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73370: LD_INT 0
73372: PPUSH
73373: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73374: LD_VAR 0 1
73378: NOT
73379: PUSH
73380: LD_VAR 0 1
73384: PUSH
73385: LD_INT 21
73387: PUSH
73388: LD_INT 2
73390: PUSH
73391: EMPTY
73392: LIST
73393: LIST
73394: PUSH
73395: LD_INT 23
73397: PUSH
73398: LD_INT 2
73400: PUSH
73401: EMPTY
73402: LIST
73403: LIST
73404: PUSH
73405: EMPTY
73406: LIST
73407: LIST
73408: PPUSH
73409: CALL_OW 69
73413: IN
73414: NOT
73415: OR
73416: IFFALSE 73420
// exit ;
73418: GO 73467
// for i = 1 to 3 do
73420: LD_ADDR_VAR 0 3
73424: PUSH
73425: DOUBLE
73426: LD_INT 1
73428: DEC
73429: ST_TO_ADDR
73430: LD_INT 3
73432: PUSH
73433: FOR_TO
73434: IFFALSE 73465
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73436: LD_VAR 0 1
73440: PPUSH
73441: CALL_OW 250
73445: PPUSH
73446: LD_VAR 0 1
73450: PPUSH
73451: CALL_OW 251
73455: PPUSH
73456: LD_INT 1
73458: PPUSH
73459: CALL_OW 453
73463: GO 73433
73465: POP
73466: POP
// end ;
73467: LD_VAR 0 2
73471: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73472: LD_INT 0
73474: PPUSH
73475: PPUSH
73476: PPUSH
73477: PPUSH
73478: PPUSH
73479: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
73480: LD_VAR 0 1
73484: NOT
73485: PUSH
73486: LD_VAR 0 2
73490: NOT
73491: OR
73492: PUSH
73493: LD_VAR 0 1
73497: PPUSH
73498: CALL_OW 314
73502: OR
73503: IFFALSE 73507
// exit ;
73505: GO 73948
// x := GetX ( enemy_unit ) ;
73507: LD_ADDR_VAR 0 7
73511: PUSH
73512: LD_VAR 0 2
73516: PPUSH
73517: CALL_OW 250
73521: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73522: LD_ADDR_VAR 0 8
73526: PUSH
73527: LD_VAR 0 2
73531: PPUSH
73532: CALL_OW 251
73536: ST_TO_ADDR
// if not x or not y then
73537: LD_VAR 0 7
73541: NOT
73542: PUSH
73543: LD_VAR 0 8
73547: NOT
73548: OR
73549: IFFALSE 73553
// exit ;
73551: GO 73948
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73553: LD_ADDR_VAR 0 6
73557: PUSH
73558: LD_VAR 0 7
73562: PPUSH
73563: LD_INT 0
73565: PPUSH
73566: LD_INT 4
73568: PPUSH
73569: CALL_OW 272
73573: PUSH
73574: LD_VAR 0 8
73578: PPUSH
73579: LD_INT 0
73581: PPUSH
73582: LD_INT 4
73584: PPUSH
73585: CALL_OW 273
73589: PUSH
73590: EMPTY
73591: LIST
73592: LIST
73593: PUSH
73594: LD_VAR 0 7
73598: PPUSH
73599: LD_INT 1
73601: PPUSH
73602: LD_INT 4
73604: PPUSH
73605: CALL_OW 272
73609: PUSH
73610: LD_VAR 0 8
73614: PPUSH
73615: LD_INT 1
73617: PPUSH
73618: LD_INT 4
73620: PPUSH
73621: CALL_OW 273
73625: PUSH
73626: EMPTY
73627: LIST
73628: LIST
73629: PUSH
73630: LD_VAR 0 7
73634: PPUSH
73635: LD_INT 2
73637: PPUSH
73638: LD_INT 4
73640: PPUSH
73641: CALL_OW 272
73645: PUSH
73646: LD_VAR 0 8
73650: PPUSH
73651: LD_INT 2
73653: PPUSH
73654: LD_INT 4
73656: PPUSH
73657: CALL_OW 273
73661: PUSH
73662: EMPTY
73663: LIST
73664: LIST
73665: PUSH
73666: LD_VAR 0 7
73670: PPUSH
73671: LD_INT 3
73673: PPUSH
73674: LD_INT 4
73676: PPUSH
73677: CALL_OW 272
73681: PUSH
73682: LD_VAR 0 8
73686: PPUSH
73687: LD_INT 3
73689: PPUSH
73690: LD_INT 4
73692: PPUSH
73693: CALL_OW 273
73697: PUSH
73698: EMPTY
73699: LIST
73700: LIST
73701: PUSH
73702: LD_VAR 0 7
73706: PPUSH
73707: LD_INT 4
73709: PPUSH
73710: LD_INT 4
73712: PPUSH
73713: CALL_OW 272
73717: PUSH
73718: LD_VAR 0 8
73722: PPUSH
73723: LD_INT 4
73725: PPUSH
73726: LD_INT 4
73728: PPUSH
73729: CALL_OW 273
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: PUSH
73738: LD_VAR 0 7
73742: PPUSH
73743: LD_INT 5
73745: PPUSH
73746: LD_INT 4
73748: PPUSH
73749: CALL_OW 272
73753: PUSH
73754: LD_VAR 0 8
73758: PPUSH
73759: LD_INT 5
73761: PPUSH
73762: LD_INT 4
73764: PPUSH
73765: CALL_OW 273
73769: PUSH
73770: EMPTY
73771: LIST
73772: LIST
73773: PUSH
73774: EMPTY
73775: LIST
73776: LIST
73777: LIST
73778: LIST
73779: LIST
73780: LIST
73781: ST_TO_ADDR
// for i = tmp downto 1 do
73782: LD_ADDR_VAR 0 4
73786: PUSH
73787: DOUBLE
73788: LD_VAR 0 6
73792: INC
73793: ST_TO_ADDR
73794: LD_INT 1
73796: PUSH
73797: FOR_DOWNTO
73798: IFFALSE 73899
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73800: LD_VAR 0 6
73804: PUSH
73805: LD_VAR 0 4
73809: ARRAY
73810: PUSH
73811: LD_INT 1
73813: ARRAY
73814: PPUSH
73815: LD_VAR 0 6
73819: PUSH
73820: LD_VAR 0 4
73824: ARRAY
73825: PUSH
73826: LD_INT 2
73828: ARRAY
73829: PPUSH
73830: CALL_OW 488
73834: NOT
73835: PUSH
73836: LD_VAR 0 6
73840: PUSH
73841: LD_VAR 0 4
73845: ARRAY
73846: PUSH
73847: LD_INT 1
73849: ARRAY
73850: PPUSH
73851: LD_VAR 0 6
73855: PUSH
73856: LD_VAR 0 4
73860: ARRAY
73861: PUSH
73862: LD_INT 2
73864: ARRAY
73865: PPUSH
73866: CALL_OW 428
73870: PUSH
73871: LD_INT 0
73873: NONEQUAL
73874: OR
73875: IFFALSE 73897
// tmp := Delete ( tmp , i ) ;
73877: LD_ADDR_VAR 0 6
73881: PUSH
73882: LD_VAR 0 6
73886: PPUSH
73887: LD_VAR 0 4
73891: PPUSH
73892: CALL_OW 3
73896: ST_TO_ADDR
73897: GO 73797
73899: POP
73900: POP
// j := GetClosestHex ( unit , tmp ) ;
73901: LD_ADDR_VAR 0 5
73905: PUSH
73906: LD_VAR 0 1
73910: PPUSH
73911: LD_VAR 0 6
73915: PPUSH
73916: CALL 73201 0 2
73920: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73921: LD_VAR 0 1
73925: PPUSH
73926: LD_VAR 0 5
73930: PUSH
73931: LD_INT 1
73933: ARRAY
73934: PPUSH
73935: LD_VAR 0 5
73939: PUSH
73940: LD_INT 2
73942: ARRAY
73943: PPUSH
73944: CALL_OW 111
// end ;
73948: LD_VAR 0 3
73952: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73953: LD_INT 0
73955: PPUSH
73956: PPUSH
73957: PPUSH
// uc_side = 0 ;
73958: LD_ADDR_OWVAR 20
73962: PUSH
73963: LD_INT 0
73965: ST_TO_ADDR
// uc_nation = 0 ;
73966: LD_ADDR_OWVAR 21
73970: PUSH
73971: LD_INT 0
73973: ST_TO_ADDR
// InitHc_All ( ) ;
73974: CALL_OW 584
// InitVc ;
73978: CALL_OW 20
// if mastodonts then
73982: LD_VAR 0 6
73986: IFFALSE 74053
// for i = 1 to mastodonts do
73988: LD_ADDR_VAR 0 11
73992: PUSH
73993: DOUBLE
73994: LD_INT 1
73996: DEC
73997: ST_TO_ADDR
73998: LD_VAR 0 6
74002: PUSH
74003: FOR_TO
74004: IFFALSE 74051
// begin vc_chassis := 31 ;
74006: LD_ADDR_OWVAR 37
74010: PUSH
74011: LD_INT 31
74013: ST_TO_ADDR
// vc_control := control_rider ;
74014: LD_ADDR_OWVAR 38
74018: PUSH
74019: LD_INT 4
74021: ST_TO_ADDR
// animal := CreateVehicle ;
74022: LD_ADDR_VAR 0 12
74026: PUSH
74027: CALL_OW 45
74031: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74032: LD_VAR 0 12
74036: PPUSH
74037: LD_VAR 0 8
74041: PPUSH
74042: LD_INT 0
74044: PPUSH
74045: CALL 76241 0 3
// end ;
74049: GO 74003
74051: POP
74052: POP
// if horses then
74053: LD_VAR 0 5
74057: IFFALSE 74124
// for i = 1 to horses do
74059: LD_ADDR_VAR 0 11
74063: PUSH
74064: DOUBLE
74065: LD_INT 1
74067: DEC
74068: ST_TO_ADDR
74069: LD_VAR 0 5
74073: PUSH
74074: FOR_TO
74075: IFFALSE 74122
// begin hc_class := 21 ;
74077: LD_ADDR_OWVAR 28
74081: PUSH
74082: LD_INT 21
74084: ST_TO_ADDR
// hc_gallery :=  ;
74085: LD_ADDR_OWVAR 33
74089: PUSH
74090: LD_STRING 
74092: ST_TO_ADDR
// animal := CreateHuman ;
74093: LD_ADDR_VAR 0 12
74097: PUSH
74098: CALL_OW 44
74102: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74103: LD_VAR 0 12
74107: PPUSH
74108: LD_VAR 0 8
74112: PPUSH
74113: LD_INT 0
74115: PPUSH
74116: CALL 76241 0 3
// end ;
74120: GO 74074
74122: POP
74123: POP
// if birds then
74124: LD_VAR 0 1
74128: IFFALSE 74195
// for i = 1 to birds do
74130: LD_ADDR_VAR 0 11
74134: PUSH
74135: DOUBLE
74136: LD_INT 1
74138: DEC
74139: ST_TO_ADDR
74140: LD_VAR 0 1
74144: PUSH
74145: FOR_TO
74146: IFFALSE 74193
// begin hc_class = 18 ;
74148: LD_ADDR_OWVAR 28
74152: PUSH
74153: LD_INT 18
74155: ST_TO_ADDR
// hc_gallery =  ;
74156: LD_ADDR_OWVAR 33
74160: PUSH
74161: LD_STRING 
74163: ST_TO_ADDR
// animal := CreateHuman ;
74164: LD_ADDR_VAR 0 12
74168: PUSH
74169: CALL_OW 44
74173: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74174: LD_VAR 0 12
74178: PPUSH
74179: LD_VAR 0 8
74183: PPUSH
74184: LD_INT 0
74186: PPUSH
74187: CALL 76241 0 3
// end ;
74191: GO 74145
74193: POP
74194: POP
// if tigers then
74195: LD_VAR 0 2
74199: IFFALSE 74283
// for i = 1 to tigers do
74201: LD_ADDR_VAR 0 11
74205: PUSH
74206: DOUBLE
74207: LD_INT 1
74209: DEC
74210: ST_TO_ADDR
74211: LD_VAR 0 2
74215: PUSH
74216: FOR_TO
74217: IFFALSE 74281
// begin hc_class = class_tiger ;
74219: LD_ADDR_OWVAR 28
74223: PUSH
74224: LD_INT 14
74226: ST_TO_ADDR
// hc_gallery =  ;
74227: LD_ADDR_OWVAR 33
74231: PUSH
74232: LD_STRING 
74234: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74235: LD_ADDR_OWVAR 35
74239: PUSH
74240: LD_INT 7
74242: NEG
74243: PPUSH
74244: LD_INT 7
74246: PPUSH
74247: CALL_OW 12
74251: ST_TO_ADDR
// animal := CreateHuman ;
74252: LD_ADDR_VAR 0 12
74256: PUSH
74257: CALL_OW 44
74261: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74262: LD_VAR 0 12
74266: PPUSH
74267: LD_VAR 0 8
74271: PPUSH
74272: LD_INT 0
74274: PPUSH
74275: CALL 76241 0 3
// end ;
74279: GO 74216
74281: POP
74282: POP
// if apemans then
74283: LD_VAR 0 3
74287: IFFALSE 74410
// for i = 1 to apemans do
74289: LD_ADDR_VAR 0 11
74293: PUSH
74294: DOUBLE
74295: LD_INT 1
74297: DEC
74298: ST_TO_ADDR
74299: LD_VAR 0 3
74303: PUSH
74304: FOR_TO
74305: IFFALSE 74408
// begin hc_class = class_apeman ;
74307: LD_ADDR_OWVAR 28
74311: PUSH
74312: LD_INT 12
74314: ST_TO_ADDR
// hc_gallery =  ;
74315: LD_ADDR_OWVAR 33
74319: PUSH
74320: LD_STRING 
74322: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
74323: LD_ADDR_OWVAR 35
74327: PUSH
74328: LD_INT 5
74330: NEG
74331: PPUSH
74332: LD_INT 5
74334: PPUSH
74335: CALL_OW 12
74339: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74340: LD_ADDR_OWVAR 31
74344: PUSH
74345: LD_INT 1
74347: PPUSH
74348: LD_INT 3
74350: PPUSH
74351: CALL_OW 12
74355: PUSH
74356: LD_INT 1
74358: PPUSH
74359: LD_INT 3
74361: PPUSH
74362: CALL_OW 12
74366: PUSH
74367: LD_INT 0
74369: PUSH
74370: LD_INT 0
74372: PUSH
74373: EMPTY
74374: LIST
74375: LIST
74376: LIST
74377: LIST
74378: ST_TO_ADDR
// animal := CreateHuman ;
74379: LD_ADDR_VAR 0 12
74383: PUSH
74384: CALL_OW 44
74388: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74389: LD_VAR 0 12
74393: PPUSH
74394: LD_VAR 0 8
74398: PPUSH
74399: LD_INT 0
74401: PPUSH
74402: CALL 76241 0 3
// end ;
74406: GO 74304
74408: POP
74409: POP
// if enchidnas then
74410: LD_VAR 0 4
74414: IFFALSE 74481
// for i = 1 to enchidnas do
74416: LD_ADDR_VAR 0 11
74420: PUSH
74421: DOUBLE
74422: LD_INT 1
74424: DEC
74425: ST_TO_ADDR
74426: LD_VAR 0 4
74430: PUSH
74431: FOR_TO
74432: IFFALSE 74479
// begin hc_class = 13 ;
74434: LD_ADDR_OWVAR 28
74438: PUSH
74439: LD_INT 13
74441: ST_TO_ADDR
// hc_gallery =  ;
74442: LD_ADDR_OWVAR 33
74446: PUSH
74447: LD_STRING 
74449: ST_TO_ADDR
// animal := CreateHuman ;
74450: LD_ADDR_VAR 0 12
74454: PUSH
74455: CALL_OW 44
74459: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74460: LD_VAR 0 12
74464: PPUSH
74465: LD_VAR 0 8
74469: PPUSH
74470: LD_INT 0
74472: PPUSH
74473: CALL 76241 0 3
// end ;
74477: GO 74431
74479: POP
74480: POP
// if fishes then
74481: LD_VAR 0 7
74485: IFFALSE 74552
// for i = 1 to fishes do
74487: LD_ADDR_VAR 0 11
74491: PUSH
74492: DOUBLE
74493: LD_INT 1
74495: DEC
74496: ST_TO_ADDR
74497: LD_VAR 0 7
74501: PUSH
74502: FOR_TO
74503: IFFALSE 74550
// begin hc_class = 20 ;
74505: LD_ADDR_OWVAR 28
74509: PUSH
74510: LD_INT 20
74512: ST_TO_ADDR
// hc_gallery =  ;
74513: LD_ADDR_OWVAR 33
74517: PUSH
74518: LD_STRING 
74520: ST_TO_ADDR
// animal := CreateHuman ;
74521: LD_ADDR_VAR 0 12
74525: PUSH
74526: CALL_OW 44
74530: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74531: LD_VAR 0 12
74535: PPUSH
74536: LD_VAR 0 9
74540: PPUSH
74541: LD_INT 0
74543: PPUSH
74544: CALL 76241 0 3
// end ;
74548: GO 74502
74550: POP
74551: POP
// end ;
74552: LD_VAR 0 10
74556: RET
// export function WantHeal ( sci , unit ) ; begin
74557: LD_INT 0
74559: PPUSH
// if GetTaskList ( sci ) > 0 then
74560: LD_VAR 0 1
74564: PPUSH
74565: CALL_OW 437
74569: PUSH
74570: LD_INT 0
74572: GREATER
74573: IFFALSE 74643
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74575: LD_VAR 0 1
74579: PPUSH
74580: CALL_OW 437
74584: PUSH
74585: LD_INT 1
74587: ARRAY
74588: PUSH
74589: LD_INT 1
74591: ARRAY
74592: PUSH
74593: LD_STRING l
74595: EQUAL
74596: PUSH
74597: LD_VAR 0 1
74601: PPUSH
74602: CALL_OW 437
74606: PUSH
74607: LD_INT 1
74609: ARRAY
74610: PUSH
74611: LD_INT 4
74613: ARRAY
74614: PUSH
74615: LD_VAR 0 2
74619: EQUAL
74620: AND
74621: IFFALSE 74633
// result := true else
74623: LD_ADDR_VAR 0 3
74627: PUSH
74628: LD_INT 1
74630: ST_TO_ADDR
74631: GO 74641
// result := false ;
74633: LD_ADDR_VAR 0 3
74637: PUSH
74638: LD_INT 0
74640: ST_TO_ADDR
// end else
74641: GO 74651
// result := false ;
74643: LD_ADDR_VAR 0 3
74647: PUSH
74648: LD_INT 0
74650: ST_TO_ADDR
// end ;
74651: LD_VAR 0 3
74655: RET
// export function HealTarget ( sci ) ; begin
74656: LD_INT 0
74658: PPUSH
// if not sci then
74659: LD_VAR 0 1
74663: NOT
74664: IFFALSE 74668
// exit ;
74666: GO 74733
// result := 0 ;
74668: LD_ADDR_VAR 0 2
74672: PUSH
74673: LD_INT 0
74675: ST_TO_ADDR
// if GetTaskList ( sci ) then
74676: LD_VAR 0 1
74680: PPUSH
74681: CALL_OW 437
74685: IFFALSE 74733
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74687: LD_VAR 0 1
74691: PPUSH
74692: CALL_OW 437
74696: PUSH
74697: LD_INT 1
74699: ARRAY
74700: PUSH
74701: LD_INT 1
74703: ARRAY
74704: PUSH
74705: LD_STRING l
74707: EQUAL
74708: IFFALSE 74733
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74710: LD_ADDR_VAR 0 2
74714: PUSH
74715: LD_VAR 0 1
74719: PPUSH
74720: CALL_OW 437
74724: PUSH
74725: LD_INT 1
74727: ARRAY
74728: PUSH
74729: LD_INT 4
74731: ARRAY
74732: ST_TO_ADDR
// end ;
74733: LD_VAR 0 2
74737: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74738: LD_INT 0
74740: PPUSH
74741: PPUSH
74742: PPUSH
74743: PPUSH
// if not base_units then
74744: LD_VAR 0 1
74748: NOT
74749: IFFALSE 74753
// exit ;
74751: GO 74840
// result := false ;
74753: LD_ADDR_VAR 0 2
74757: PUSH
74758: LD_INT 0
74760: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74761: LD_ADDR_VAR 0 5
74765: PUSH
74766: LD_VAR 0 1
74770: PPUSH
74771: LD_INT 21
74773: PUSH
74774: LD_INT 3
74776: PUSH
74777: EMPTY
74778: LIST
74779: LIST
74780: PPUSH
74781: CALL_OW 72
74785: ST_TO_ADDR
// if not tmp then
74786: LD_VAR 0 5
74790: NOT
74791: IFFALSE 74795
// exit ;
74793: GO 74840
// for i in tmp do
74795: LD_ADDR_VAR 0 3
74799: PUSH
74800: LD_VAR 0 5
74804: PUSH
74805: FOR_IN
74806: IFFALSE 74838
// begin result := EnemyInRange ( i , 22 ) ;
74808: LD_ADDR_VAR 0 2
74812: PUSH
74813: LD_VAR 0 3
74817: PPUSH
74818: LD_INT 22
74820: PPUSH
74821: CALL 73076 0 2
74825: ST_TO_ADDR
// if result then
74826: LD_VAR 0 2
74830: IFFALSE 74836
// exit ;
74832: POP
74833: POP
74834: GO 74840
// end ;
74836: GO 74805
74838: POP
74839: POP
// end ;
74840: LD_VAR 0 2
74844: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
74845: LD_INT 0
74847: PPUSH
74848: PPUSH
// if not units then
74849: LD_VAR 0 1
74853: NOT
74854: IFFALSE 74858
// exit ;
74856: GO 74928
// result := [ ] ;
74858: LD_ADDR_VAR 0 3
74862: PUSH
74863: EMPTY
74864: ST_TO_ADDR
// for i in units do
74865: LD_ADDR_VAR 0 4
74869: PUSH
74870: LD_VAR 0 1
74874: PUSH
74875: FOR_IN
74876: IFFALSE 74926
// if GetTag ( i ) = tag then
74878: LD_VAR 0 4
74882: PPUSH
74883: CALL_OW 110
74887: PUSH
74888: LD_VAR 0 2
74892: EQUAL
74893: IFFALSE 74924
// result := Insert ( result , result + 1 , i ) ;
74895: LD_ADDR_VAR 0 3
74899: PUSH
74900: LD_VAR 0 3
74904: PPUSH
74905: LD_VAR 0 3
74909: PUSH
74910: LD_INT 1
74912: PLUS
74913: PPUSH
74914: LD_VAR 0 4
74918: PPUSH
74919: CALL_OW 2
74923: ST_TO_ADDR
74924: GO 74875
74926: POP
74927: POP
// end ;
74928: LD_VAR 0 3
74932: RET
// export function IsDriver ( un ) ; begin
74933: LD_INT 0
74935: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74936: LD_ADDR_VAR 0 2
74940: PUSH
74941: LD_VAR 0 1
74945: PUSH
74946: LD_INT 55
74948: PUSH
74949: EMPTY
74950: LIST
74951: PPUSH
74952: CALL_OW 69
74956: IN
74957: ST_TO_ADDR
// end ;
74958: LD_VAR 0 2
74962: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74963: LD_INT 0
74965: PPUSH
74966: PPUSH
// list := [ ] ;
74967: LD_ADDR_VAR 0 5
74971: PUSH
74972: EMPTY
74973: ST_TO_ADDR
// case d of 0 :
74974: LD_VAR 0 3
74978: PUSH
74979: LD_INT 0
74981: DOUBLE
74982: EQUAL
74983: IFTRUE 74987
74985: GO 75120
74987: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74988: LD_ADDR_VAR 0 5
74992: PUSH
74993: LD_VAR 0 1
74997: PUSH
74998: LD_INT 4
75000: MINUS
75001: PUSH
75002: LD_VAR 0 2
75006: PUSH
75007: LD_INT 4
75009: MINUS
75010: PUSH
75011: LD_INT 2
75013: PUSH
75014: EMPTY
75015: LIST
75016: LIST
75017: LIST
75018: PUSH
75019: LD_VAR 0 1
75023: PUSH
75024: LD_INT 3
75026: MINUS
75027: PUSH
75028: LD_VAR 0 2
75032: PUSH
75033: LD_INT 1
75035: PUSH
75036: EMPTY
75037: LIST
75038: LIST
75039: LIST
75040: PUSH
75041: LD_VAR 0 1
75045: PUSH
75046: LD_INT 4
75048: PLUS
75049: PUSH
75050: LD_VAR 0 2
75054: PUSH
75055: LD_INT 4
75057: PUSH
75058: EMPTY
75059: LIST
75060: LIST
75061: LIST
75062: PUSH
75063: LD_VAR 0 1
75067: PUSH
75068: LD_INT 3
75070: PLUS
75071: PUSH
75072: LD_VAR 0 2
75076: PUSH
75077: LD_INT 3
75079: PLUS
75080: PUSH
75081: LD_INT 5
75083: PUSH
75084: EMPTY
75085: LIST
75086: LIST
75087: LIST
75088: PUSH
75089: LD_VAR 0 1
75093: PUSH
75094: LD_VAR 0 2
75098: PUSH
75099: LD_INT 4
75101: PLUS
75102: PUSH
75103: LD_INT 0
75105: PUSH
75106: EMPTY
75107: LIST
75108: LIST
75109: LIST
75110: PUSH
75111: EMPTY
75112: LIST
75113: LIST
75114: LIST
75115: LIST
75116: LIST
75117: ST_TO_ADDR
// end ; 1 :
75118: GO 75818
75120: LD_INT 1
75122: DOUBLE
75123: EQUAL
75124: IFTRUE 75128
75126: GO 75261
75128: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75129: LD_ADDR_VAR 0 5
75133: PUSH
75134: LD_VAR 0 1
75138: PUSH
75139: LD_VAR 0 2
75143: PUSH
75144: LD_INT 4
75146: MINUS
75147: PUSH
75148: LD_INT 3
75150: PUSH
75151: EMPTY
75152: LIST
75153: LIST
75154: LIST
75155: PUSH
75156: LD_VAR 0 1
75160: PUSH
75161: LD_INT 3
75163: MINUS
75164: PUSH
75165: LD_VAR 0 2
75169: PUSH
75170: LD_INT 3
75172: MINUS
75173: PUSH
75174: LD_INT 2
75176: PUSH
75177: EMPTY
75178: LIST
75179: LIST
75180: LIST
75181: PUSH
75182: LD_VAR 0 1
75186: PUSH
75187: LD_INT 4
75189: MINUS
75190: PUSH
75191: LD_VAR 0 2
75195: PUSH
75196: LD_INT 1
75198: PUSH
75199: EMPTY
75200: LIST
75201: LIST
75202: LIST
75203: PUSH
75204: LD_VAR 0 1
75208: PUSH
75209: LD_VAR 0 2
75213: PUSH
75214: LD_INT 3
75216: PLUS
75217: PUSH
75218: LD_INT 0
75220: PUSH
75221: EMPTY
75222: LIST
75223: LIST
75224: LIST
75225: PUSH
75226: LD_VAR 0 1
75230: PUSH
75231: LD_INT 4
75233: PLUS
75234: PUSH
75235: LD_VAR 0 2
75239: PUSH
75240: LD_INT 4
75242: PLUS
75243: PUSH
75244: LD_INT 5
75246: PUSH
75247: EMPTY
75248: LIST
75249: LIST
75250: LIST
75251: PUSH
75252: EMPTY
75253: LIST
75254: LIST
75255: LIST
75256: LIST
75257: LIST
75258: ST_TO_ADDR
// end ; 2 :
75259: GO 75818
75261: LD_INT 2
75263: DOUBLE
75264: EQUAL
75265: IFTRUE 75269
75267: GO 75398
75269: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75270: LD_ADDR_VAR 0 5
75274: PUSH
75275: LD_VAR 0 1
75279: PUSH
75280: LD_VAR 0 2
75284: PUSH
75285: LD_INT 3
75287: MINUS
75288: PUSH
75289: LD_INT 3
75291: PUSH
75292: EMPTY
75293: LIST
75294: LIST
75295: LIST
75296: PUSH
75297: LD_VAR 0 1
75301: PUSH
75302: LD_INT 4
75304: PLUS
75305: PUSH
75306: LD_VAR 0 2
75310: PUSH
75311: LD_INT 4
75313: PUSH
75314: EMPTY
75315: LIST
75316: LIST
75317: LIST
75318: PUSH
75319: LD_VAR 0 1
75323: PUSH
75324: LD_VAR 0 2
75328: PUSH
75329: LD_INT 4
75331: PLUS
75332: PUSH
75333: LD_INT 0
75335: PUSH
75336: EMPTY
75337: LIST
75338: LIST
75339: LIST
75340: PUSH
75341: LD_VAR 0 1
75345: PUSH
75346: LD_INT 3
75348: MINUS
75349: PUSH
75350: LD_VAR 0 2
75354: PUSH
75355: LD_INT 1
75357: PUSH
75358: EMPTY
75359: LIST
75360: LIST
75361: LIST
75362: PUSH
75363: LD_VAR 0 1
75367: PUSH
75368: LD_INT 4
75370: MINUS
75371: PUSH
75372: LD_VAR 0 2
75376: PUSH
75377: LD_INT 4
75379: MINUS
75380: PUSH
75381: LD_INT 2
75383: PUSH
75384: EMPTY
75385: LIST
75386: LIST
75387: LIST
75388: PUSH
75389: EMPTY
75390: LIST
75391: LIST
75392: LIST
75393: LIST
75394: LIST
75395: ST_TO_ADDR
// end ; 3 :
75396: GO 75818
75398: LD_INT 3
75400: DOUBLE
75401: EQUAL
75402: IFTRUE 75406
75404: GO 75539
75406: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75407: LD_ADDR_VAR 0 5
75411: PUSH
75412: LD_VAR 0 1
75416: PUSH
75417: LD_INT 3
75419: PLUS
75420: PUSH
75421: LD_VAR 0 2
75425: PUSH
75426: LD_INT 4
75428: PUSH
75429: EMPTY
75430: LIST
75431: LIST
75432: LIST
75433: PUSH
75434: LD_VAR 0 1
75438: PUSH
75439: LD_INT 4
75441: PLUS
75442: PUSH
75443: LD_VAR 0 2
75447: PUSH
75448: LD_INT 4
75450: PLUS
75451: PUSH
75452: LD_INT 5
75454: PUSH
75455: EMPTY
75456: LIST
75457: LIST
75458: LIST
75459: PUSH
75460: LD_VAR 0 1
75464: PUSH
75465: LD_INT 4
75467: MINUS
75468: PUSH
75469: LD_VAR 0 2
75473: PUSH
75474: LD_INT 1
75476: PUSH
75477: EMPTY
75478: LIST
75479: LIST
75480: LIST
75481: PUSH
75482: LD_VAR 0 1
75486: PUSH
75487: LD_VAR 0 2
75491: PUSH
75492: LD_INT 4
75494: MINUS
75495: PUSH
75496: LD_INT 3
75498: PUSH
75499: EMPTY
75500: LIST
75501: LIST
75502: LIST
75503: PUSH
75504: LD_VAR 0 1
75508: PUSH
75509: LD_INT 3
75511: MINUS
75512: PUSH
75513: LD_VAR 0 2
75517: PUSH
75518: LD_INT 3
75520: MINUS
75521: PUSH
75522: LD_INT 2
75524: PUSH
75525: EMPTY
75526: LIST
75527: LIST
75528: LIST
75529: PUSH
75530: EMPTY
75531: LIST
75532: LIST
75533: LIST
75534: LIST
75535: LIST
75536: ST_TO_ADDR
// end ; 4 :
75537: GO 75818
75539: LD_INT 4
75541: DOUBLE
75542: EQUAL
75543: IFTRUE 75547
75545: GO 75680
75547: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75548: LD_ADDR_VAR 0 5
75552: PUSH
75553: LD_VAR 0 1
75557: PUSH
75558: LD_VAR 0 2
75562: PUSH
75563: LD_INT 4
75565: PLUS
75566: PUSH
75567: LD_INT 0
75569: PUSH
75570: EMPTY
75571: LIST
75572: LIST
75573: LIST
75574: PUSH
75575: LD_VAR 0 1
75579: PUSH
75580: LD_INT 3
75582: PLUS
75583: PUSH
75584: LD_VAR 0 2
75588: PUSH
75589: LD_INT 3
75591: PLUS
75592: PUSH
75593: LD_INT 5
75595: PUSH
75596: EMPTY
75597: LIST
75598: LIST
75599: LIST
75600: PUSH
75601: LD_VAR 0 1
75605: PUSH
75606: LD_INT 4
75608: PLUS
75609: PUSH
75610: LD_VAR 0 2
75614: PUSH
75615: LD_INT 4
75617: PUSH
75618: EMPTY
75619: LIST
75620: LIST
75621: LIST
75622: PUSH
75623: LD_VAR 0 1
75627: PUSH
75628: LD_VAR 0 2
75632: PUSH
75633: LD_INT 3
75635: MINUS
75636: PUSH
75637: LD_INT 3
75639: PUSH
75640: EMPTY
75641: LIST
75642: LIST
75643: LIST
75644: PUSH
75645: LD_VAR 0 1
75649: PUSH
75650: LD_INT 4
75652: MINUS
75653: PUSH
75654: LD_VAR 0 2
75658: PUSH
75659: LD_INT 4
75661: MINUS
75662: PUSH
75663: LD_INT 2
75665: PUSH
75666: EMPTY
75667: LIST
75668: LIST
75669: LIST
75670: PUSH
75671: EMPTY
75672: LIST
75673: LIST
75674: LIST
75675: LIST
75676: LIST
75677: ST_TO_ADDR
// end ; 5 :
75678: GO 75818
75680: LD_INT 5
75682: DOUBLE
75683: EQUAL
75684: IFTRUE 75688
75686: GO 75817
75688: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75689: LD_ADDR_VAR 0 5
75693: PUSH
75694: LD_VAR 0 1
75698: PUSH
75699: LD_INT 4
75701: MINUS
75702: PUSH
75703: LD_VAR 0 2
75707: PUSH
75708: LD_INT 1
75710: PUSH
75711: EMPTY
75712: LIST
75713: LIST
75714: LIST
75715: PUSH
75716: LD_VAR 0 1
75720: PUSH
75721: LD_VAR 0 2
75725: PUSH
75726: LD_INT 4
75728: MINUS
75729: PUSH
75730: LD_INT 3
75732: PUSH
75733: EMPTY
75734: LIST
75735: LIST
75736: LIST
75737: PUSH
75738: LD_VAR 0 1
75742: PUSH
75743: LD_INT 4
75745: PLUS
75746: PUSH
75747: LD_VAR 0 2
75751: PUSH
75752: LD_INT 4
75754: PLUS
75755: PUSH
75756: LD_INT 5
75758: PUSH
75759: EMPTY
75760: LIST
75761: LIST
75762: LIST
75763: PUSH
75764: LD_VAR 0 1
75768: PUSH
75769: LD_INT 3
75771: PLUS
75772: PUSH
75773: LD_VAR 0 2
75777: PUSH
75778: LD_INT 4
75780: PUSH
75781: EMPTY
75782: LIST
75783: LIST
75784: LIST
75785: PUSH
75786: LD_VAR 0 1
75790: PUSH
75791: LD_VAR 0 2
75795: PUSH
75796: LD_INT 3
75798: PLUS
75799: PUSH
75800: LD_INT 0
75802: PUSH
75803: EMPTY
75804: LIST
75805: LIST
75806: LIST
75807: PUSH
75808: EMPTY
75809: LIST
75810: LIST
75811: LIST
75812: LIST
75813: LIST
75814: ST_TO_ADDR
// end ; end ;
75815: GO 75818
75817: POP
// result := list ;
75818: LD_ADDR_VAR 0 4
75822: PUSH
75823: LD_VAR 0 5
75827: ST_TO_ADDR
// end ;
75828: LD_VAR 0 4
75832: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75833: LD_INT 0
75835: PPUSH
75836: PPUSH
75837: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75838: LD_VAR 0 1
75842: NOT
75843: PUSH
75844: LD_VAR 0 2
75848: PUSH
75849: LD_INT 1
75851: PUSH
75852: LD_INT 2
75854: PUSH
75855: LD_INT 3
75857: PUSH
75858: LD_INT 4
75860: PUSH
75861: EMPTY
75862: LIST
75863: LIST
75864: LIST
75865: LIST
75866: IN
75867: NOT
75868: OR
75869: IFFALSE 75873
// exit ;
75871: GO 75965
// tmp := [ ] ;
75873: LD_ADDR_VAR 0 5
75877: PUSH
75878: EMPTY
75879: ST_TO_ADDR
// for i in units do
75880: LD_ADDR_VAR 0 4
75884: PUSH
75885: LD_VAR 0 1
75889: PUSH
75890: FOR_IN
75891: IFFALSE 75934
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
75893: LD_ADDR_VAR 0 5
75897: PUSH
75898: LD_VAR 0 5
75902: PPUSH
75903: LD_VAR 0 5
75907: PUSH
75908: LD_INT 1
75910: PLUS
75911: PPUSH
75912: LD_VAR 0 4
75916: PPUSH
75917: LD_VAR 0 2
75921: PPUSH
75922: CALL_OW 259
75926: PPUSH
75927: CALL_OW 2
75931: ST_TO_ADDR
75932: GO 75890
75934: POP
75935: POP
// if not tmp then
75936: LD_VAR 0 5
75940: NOT
75941: IFFALSE 75945
// exit ;
75943: GO 75965
// result := SortListByListDesc ( units , tmp ) ;
75945: LD_ADDR_VAR 0 3
75949: PUSH
75950: LD_VAR 0 1
75954: PPUSH
75955: LD_VAR 0 5
75959: PPUSH
75960: CALL_OW 77
75964: ST_TO_ADDR
// end ;
75965: LD_VAR 0 3
75969: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75970: LD_INT 0
75972: PPUSH
75973: PPUSH
75974: PPUSH
// result := false ;
75975: LD_ADDR_VAR 0 3
75979: PUSH
75980: LD_INT 0
75982: ST_TO_ADDR
// x := GetX ( building ) ;
75983: LD_ADDR_VAR 0 4
75987: PUSH
75988: LD_VAR 0 2
75992: PPUSH
75993: CALL_OW 250
75997: ST_TO_ADDR
// y := GetY ( building ) ;
75998: LD_ADDR_VAR 0 5
76002: PUSH
76003: LD_VAR 0 2
76007: PPUSH
76008: CALL_OW 251
76012: ST_TO_ADDR
// if not building or not x or not y then
76013: LD_VAR 0 2
76017: NOT
76018: PUSH
76019: LD_VAR 0 4
76023: NOT
76024: OR
76025: PUSH
76026: LD_VAR 0 5
76030: NOT
76031: OR
76032: IFFALSE 76036
// exit ;
76034: GO 76128
// if GetTaskList ( unit ) then
76036: LD_VAR 0 1
76040: PPUSH
76041: CALL_OW 437
76045: IFFALSE 76128
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76047: LD_STRING e
76049: PUSH
76050: LD_VAR 0 1
76054: PPUSH
76055: CALL_OW 437
76059: PUSH
76060: LD_INT 1
76062: ARRAY
76063: PUSH
76064: LD_INT 1
76066: ARRAY
76067: EQUAL
76068: PUSH
76069: LD_VAR 0 4
76073: PUSH
76074: LD_VAR 0 1
76078: PPUSH
76079: CALL_OW 437
76083: PUSH
76084: LD_INT 1
76086: ARRAY
76087: PUSH
76088: LD_INT 2
76090: ARRAY
76091: EQUAL
76092: AND
76093: PUSH
76094: LD_VAR 0 5
76098: PUSH
76099: LD_VAR 0 1
76103: PPUSH
76104: CALL_OW 437
76108: PUSH
76109: LD_INT 1
76111: ARRAY
76112: PUSH
76113: LD_INT 3
76115: ARRAY
76116: EQUAL
76117: AND
76118: IFFALSE 76128
// result := true end ;
76120: LD_ADDR_VAR 0 3
76124: PUSH
76125: LD_INT 1
76127: ST_TO_ADDR
// end ;
76128: LD_VAR 0 3
76132: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76133: LD_INT 0
76135: PPUSH
// result := false ;
76136: LD_ADDR_VAR 0 4
76140: PUSH
76141: LD_INT 0
76143: ST_TO_ADDR
// if GetTaskList ( unit ) then
76144: LD_VAR 0 1
76148: PPUSH
76149: CALL_OW 437
76153: IFFALSE 76236
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76155: LD_STRING M
76157: PUSH
76158: LD_VAR 0 1
76162: PPUSH
76163: CALL_OW 437
76167: PUSH
76168: LD_INT 1
76170: ARRAY
76171: PUSH
76172: LD_INT 1
76174: ARRAY
76175: EQUAL
76176: PUSH
76177: LD_VAR 0 2
76181: PUSH
76182: LD_VAR 0 1
76186: PPUSH
76187: CALL_OW 437
76191: PUSH
76192: LD_INT 1
76194: ARRAY
76195: PUSH
76196: LD_INT 2
76198: ARRAY
76199: EQUAL
76200: AND
76201: PUSH
76202: LD_VAR 0 3
76206: PUSH
76207: LD_VAR 0 1
76211: PPUSH
76212: CALL_OW 437
76216: PUSH
76217: LD_INT 1
76219: ARRAY
76220: PUSH
76221: LD_INT 3
76223: ARRAY
76224: EQUAL
76225: AND
76226: IFFALSE 76236
// result := true ;
76228: LD_ADDR_VAR 0 4
76232: PUSH
76233: LD_INT 1
76235: ST_TO_ADDR
// end ; end ;
76236: LD_VAR 0 4
76240: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76241: LD_INT 0
76243: PPUSH
76244: PPUSH
76245: PPUSH
76246: PPUSH
// if not unit or not area then
76247: LD_VAR 0 1
76251: NOT
76252: PUSH
76253: LD_VAR 0 2
76257: NOT
76258: OR
76259: IFFALSE 76263
// exit ;
76261: GO 76427
// tmp := AreaToList ( area , i ) ;
76263: LD_ADDR_VAR 0 6
76267: PUSH
76268: LD_VAR 0 2
76272: PPUSH
76273: LD_VAR 0 5
76277: PPUSH
76278: CALL_OW 517
76282: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76283: LD_ADDR_VAR 0 5
76287: PUSH
76288: DOUBLE
76289: LD_INT 1
76291: DEC
76292: ST_TO_ADDR
76293: LD_VAR 0 6
76297: PUSH
76298: LD_INT 1
76300: ARRAY
76301: PUSH
76302: FOR_TO
76303: IFFALSE 76425
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76305: LD_ADDR_VAR 0 7
76309: PUSH
76310: LD_VAR 0 6
76314: PUSH
76315: LD_INT 1
76317: ARRAY
76318: PUSH
76319: LD_VAR 0 5
76323: ARRAY
76324: PUSH
76325: LD_VAR 0 6
76329: PUSH
76330: LD_INT 2
76332: ARRAY
76333: PUSH
76334: LD_VAR 0 5
76338: ARRAY
76339: PUSH
76340: EMPTY
76341: LIST
76342: LIST
76343: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
76344: LD_VAR 0 7
76348: PUSH
76349: LD_INT 1
76351: ARRAY
76352: PPUSH
76353: LD_VAR 0 7
76357: PUSH
76358: LD_INT 2
76360: ARRAY
76361: PPUSH
76362: CALL_OW 428
76366: PUSH
76367: LD_INT 0
76369: EQUAL
76370: IFFALSE 76423
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76372: LD_VAR 0 1
76376: PPUSH
76377: LD_VAR 0 7
76381: PUSH
76382: LD_INT 1
76384: ARRAY
76385: PPUSH
76386: LD_VAR 0 7
76390: PUSH
76391: LD_INT 2
76393: ARRAY
76394: PPUSH
76395: LD_VAR 0 3
76399: PPUSH
76400: CALL_OW 48
// result := IsPlaced ( unit ) ;
76404: LD_ADDR_VAR 0 4
76408: PUSH
76409: LD_VAR 0 1
76413: PPUSH
76414: CALL_OW 305
76418: ST_TO_ADDR
// exit ;
76419: POP
76420: POP
76421: GO 76427
// end ; end ;
76423: GO 76302
76425: POP
76426: POP
// end ;
76427: LD_VAR 0 4
76431: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76432: LD_INT 0
76434: PPUSH
76435: PPUSH
76436: PPUSH
// if not side or side > 8 then
76437: LD_VAR 0 1
76441: NOT
76442: PUSH
76443: LD_VAR 0 1
76447: PUSH
76448: LD_INT 8
76450: GREATER
76451: OR
76452: IFFALSE 76456
// exit ;
76454: GO 76643
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76456: LD_ADDR_VAR 0 4
76460: PUSH
76461: LD_INT 22
76463: PUSH
76464: LD_VAR 0 1
76468: PUSH
76469: EMPTY
76470: LIST
76471: LIST
76472: PUSH
76473: LD_INT 21
76475: PUSH
76476: LD_INT 3
76478: PUSH
76479: EMPTY
76480: LIST
76481: LIST
76482: PUSH
76483: EMPTY
76484: LIST
76485: LIST
76486: PPUSH
76487: CALL_OW 69
76491: ST_TO_ADDR
// if not tmp then
76492: LD_VAR 0 4
76496: NOT
76497: IFFALSE 76501
// exit ;
76499: GO 76643
// enable_addtolog := true ;
76501: LD_ADDR_OWVAR 81
76505: PUSH
76506: LD_INT 1
76508: ST_TO_ADDR
// AddToLog ( [ ) ;
76509: LD_STRING [
76511: PPUSH
76512: CALL_OW 561
// for i in tmp do
76516: LD_ADDR_VAR 0 3
76520: PUSH
76521: LD_VAR 0 4
76525: PUSH
76526: FOR_IN
76527: IFFALSE 76634
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76529: LD_STRING [
76531: PUSH
76532: LD_VAR 0 3
76536: PPUSH
76537: CALL_OW 266
76541: STR
76542: PUSH
76543: LD_STRING , 
76545: STR
76546: PUSH
76547: LD_VAR 0 3
76551: PPUSH
76552: CALL_OW 250
76556: STR
76557: PUSH
76558: LD_STRING , 
76560: STR
76561: PUSH
76562: LD_VAR 0 3
76566: PPUSH
76567: CALL_OW 251
76571: STR
76572: PUSH
76573: LD_STRING , 
76575: STR
76576: PUSH
76577: LD_VAR 0 3
76581: PPUSH
76582: CALL_OW 254
76586: STR
76587: PUSH
76588: LD_STRING , 
76590: STR
76591: PUSH
76592: LD_VAR 0 3
76596: PPUSH
76597: LD_INT 1
76599: PPUSH
76600: CALL_OW 268
76604: STR
76605: PUSH
76606: LD_STRING , 
76608: STR
76609: PUSH
76610: LD_VAR 0 3
76614: PPUSH
76615: LD_INT 2
76617: PPUSH
76618: CALL_OW 268
76622: STR
76623: PUSH
76624: LD_STRING ],
76626: STR
76627: PPUSH
76628: CALL_OW 561
// end ;
76632: GO 76526
76634: POP
76635: POP
// AddToLog ( ]; ) ;
76636: LD_STRING ];
76638: PPUSH
76639: CALL_OW 561
// end ;
76643: LD_VAR 0 2
76647: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76648: LD_INT 0
76650: PPUSH
76651: PPUSH
76652: PPUSH
76653: PPUSH
76654: PPUSH
// if not area or not rate or not max then
76655: LD_VAR 0 1
76659: NOT
76660: PUSH
76661: LD_VAR 0 2
76665: NOT
76666: OR
76667: PUSH
76668: LD_VAR 0 4
76672: NOT
76673: OR
76674: IFFALSE 76678
// exit ;
76676: GO 76870
// while 1 do
76678: LD_INT 1
76680: IFFALSE 76870
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76682: LD_ADDR_VAR 0 9
76686: PUSH
76687: LD_VAR 0 1
76691: PPUSH
76692: LD_INT 1
76694: PPUSH
76695: CALL_OW 287
76699: PUSH
76700: LD_INT 10
76702: MUL
76703: ST_TO_ADDR
// r := rate / 10 ;
76704: LD_ADDR_VAR 0 7
76708: PUSH
76709: LD_VAR 0 2
76713: PUSH
76714: LD_INT 10
76716: DIVREAL
76717: ST_TO_ADDR
// time := 1 1$00 ;
76718: LD_ADDR_VAR 0 8
76722: PUSH
76723: LD_INT 2100
76725: ST_TO_ADDR
// if amount < min then
76726: LD_VAR 0 9
76730: PUSH
76731: LD_VAR 0 3
76735: LESS
76736: IFFALSE 76754
// r := r * 2 else
76738: LD_ADDR_VAR 0 7
76742: PUSH
76743: LD_VAR 0 7
76747: PUSH
76748: LD_INT 2
76750: MUL
76751: ST_TO_ADDR
76752: GO 76780
// if amount > max then
76754: LD_VAR 0 9
76758: PUSH
76759: LD_VAR 0 4
76763: GREATER
76764: IFFALSE 76780
// r := r / 2 ;
76766: LD_ADDR_VAR 0 7
76770: PUSH
76771: LD_VAR 0 7
76775: PUSH
76776: LD_INT 2
76778: DIVREAL
76779: ST_TO_ADDR
// time := time / r ;
76780: LD_ADDR_VAR 0 8
76784: PUSH
76785: LD_VAR 0 8
76789: PUSH
76790: LD_VAR 0 7
76794: DIVREAL
76795: ST_TO_ADDR
// if time < 0 then
76796: LD_VAR 0 8
76800: PUSH
76801: LD_INT 0
76803: LESS
76804: IFFALSE 76821
// time := time * - 1 ;
76806: LD_ADDR_VAR 0 8
76810: PUSH
76811: LD_VAR 0 8
76815: PUSH
76816: LD_INT 1
76818: NEG
76819: MUL
76820: ST_TO_ADDR
// wait ( time ) ;
76821: LD_VAR 0 8
76825: PPUSH
76826: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
76830: LD_INT 35
76832: PPUSH
76833: LD_INT 875
76835: PPUSH
76836: CALL_OW 12
76840: PPUSH
76841: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76845: LD_INT 1
76847: PPUSH
76848: LD_INT 5
76850: PPUSH
76851: CALL_OW 12
76855: PPUSH
76856: LD_VAR 0 1
76860: PPUSH
76861: LD_INT 1
76863: PPUSH
76864: CALL_OW 55
// end ;
76868: GO 76678
// end ;
76870: LD_VAR 0 5
76874: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76875: LD_INT 0
76877: PPUSH
76878: PPUSH
76879: PPUSH
76880: PPUSH
76881: PPUSH
76882: PPUSH
76883: PPUSH
76884: PPUSH
// if not turrets or not factories then
76885: LD_VAR 0 1
76889: NOT
76890: PUSH
76891: LD_VAR 0 2
76895: NOT
76896: OR
76897: IFFALSE 76901
// exit ;
76899: GO 77208
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76901: LD_ADDR_VAR 0 10
76905: PUSH
76906: LD_INT 5
76908: PUSH
76909: LD_INT 6
76911: PUSH
76912: EMPTY
76913: LIST
76914: LIST
76915: PUSH
76916: LD_INT 2
76918: PUSH
76919: LD_INT 4
76921: PUSH
76922: EMPTY
76923: LIST
76924: LIST
76925: PUSH
76926: LD_INT 3
76928: PUSH
76929: LD_INT 5
76931: PUSH
76932: EMPTY
76933: LIST
76934: LIST
76935: PUSH
76936: EMPTY
76937: LIST
76938: LIST
76939: LIST
76940: PUSH
76941: LD_INT 24
76943: PUSH
76944: LD_INT 25
76946: PUSH
76947: EMPTY
76948: LIST
76949: LIST
76950: PUSH
76951: LD_INT 23
76953: PUSH
76954: LD_INT 27
76956: PUSH
76957: EMPTY
76958: LIST
76959: LIST
76960: PUSH
76961: EMPTY
76962: LIST
76963: LIST
76964: PUSH
76965: LD_INT 42
76967: PUSH
76968: LD_INT 43
76970: PUSH
76971: EMPTY
76972: LIST
76973: LIST
76974: PUSH
76975: LD_INT 44
76977: PUSH
76978: LD_INT 46
76980: PUSH
76981: EMPTY
76982: LIST
76983: LIST
76984: PUSH
76985: LD_INT 45
76987: PUSH
76988: LD_INT 47
76990: PUSH
76991: EMPTY
76992: LIST
76993: LIST
76994: PUSH
76995: EMPTY
76996: LIST
76997: LIST
76998: LIST
76999: PUSH
77000: EMPTY
77001: LIST
77002: LIST
77003: LIST
77004: ST_TO_ADDR
// result := [ ] ;
77005: LD_ADDR_VAR 0 3
77009: PUSH
77010: EMPTY
77011: ST_TO_ADDR
// for i in turrets do
77012: LD_ADDR_VAR 0 4
77016: PUSH
77017: LD_VAR 0 1
77021: PUSH
77022: FOR_IN
77023: IFFALSE 77206
// begin nat := GetNation ( i ) ;
77025: LD_ADDR_VAR 0 7
77029: PUSH
77030: LD_VAR 0 4
77034: PPUSH
77035: CALL_OW 248
77039: ST_TO_ADDR
// weapon := 0 ;
77040: LD_ADDR_VAR 0 8
77044: PUSH
77045: LD_INT 0
77047: ST_TO_ADDR
// if not nat then
77048: LD_VAR 0 7
77052: NOT
77053: IFFALSE 77057
// continue ;
77055: GO 77022
// for j in list [ nat ] do
77057: LD_ADDR_VAR 0 5
77061: PUSH
77062: LD_VAR 0 10
77066: PUSH
77067: LD_VAR 0 7
77071: ARRAY
77072: PUSH
77073: FOR_IN
77074: IFFALSE 77115
// if GetBWeapon ( i ) = j [ 1 ] then
77076: LD_VAR 0 4
77080: PPUSH
77081: CALL_OW 269
77085: PUSH
77086: LD_VAR 0 5
77090: PUSH
77091: LD_INT 1
77093: ARRAY
77094: EQUAL
77095: IFFALSE 77113
// begin weapon := j [ 2 ] ;
77097: LD_ADDR_VAR 0 8
77101: PUSH
77102: LD_VAR 0 5
77106: PUSH
77107: LD_INT 2
77109: ARRAY
77110: ST_TO_ADDR
// break ;
77111: GO 77115
// end ;
77113: GO 77073
77115: POP
77116: POP
// if not weapon then
77117: LD_VAR 0 8
77121: NOT
77122: IFFALSE 77126
// continue ;
77124: GO 77022
// for k in factories do
77126: LD_ADDR_VAR 0 6
77130: PUSH
77131: LD_VAR 0 2
77135: PUSH
77136: FOR_IN
77137: IFFALSE 77202
// begin weapons := AvailableWeaponList ( k ) ;
77139: LD_ADDR_VAR 0 9
77143: PUSH
77144: LD_VAR 0 6
77148: PPUSH
77149: CALL_OW 478
77153: ST_TO_ADDR
// if not weapons then
77154: LD_VAR 0 9
77158: NOT
77159: IFFALSE 77163
// continue ;
77161: GO 77136
// if weapon in weapons then
77163: LD_VAR 0 8
77167: PUSH
77168: LD_VAR 0 9
77172: IN
77173: IFFALSE 77200
// begin result := [ i , weapon ] ;
77175: LD_ADDR_VAR 0 3
77179: PUSH
77180: LD_VAR 0 4
77184: PUSH
77185: LD_VAR 0 8
77189: PUSH
77190: EMPTY
77191: LIST
77192: LIST
77193: ST_TO_ADDR
// exit ;
77194: POP
77195: POP
77196: POP
77197: POP
77198: GO 77208
// end ; end ;
77200: GO 77136
77202: POP
77203: POP
// end ;
77204: GO 77022
77206: POP
77207: POP
// end ;
77208: LD_VAR 0 3
77212: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77213: LD_INT 0
77215: PPUSH
// if not side or side > 8 then
77216: LD_VAR 0 3
77220: NOT
77221: PUSH
77222: LD_VAR 0 3
77226: PUSH
77227: LD_INT 8
77229: GREATER
77230: OR
77231: IFFALSE 77235
// exit ;
77233: GO 77294
// if not range then
77235: LD_VAR 0 4
77239: NOT
77240: IFFALSE 77251
// range := - 12 ;
77242: LD_ADDR_VAR 0 4
77246: PUSH
77247: LD_INT 12
77249: NEG
77250: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77251: LD_VAR 0 1
77255: PPUSH
77256: LD_VAR 0 2
77260: PPUSH
77261: LD_VAR 0 3
77265: PPUSH
77266: LD_VAR 0 4
77270: PPUSH
77271: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77275: LD_VAR 0 1
77279: PPUSH
77280: LD_VAR 0 2
77284: PPUSH
77285: LD_VAR 0 3
77289: PPUSH
77290: CALL_OW 331
// end ;
77294: LD_VAR 0 5
77298: RET
// export function Video ( mode ) ; begin
77299: LD_INT 0
77301: PPUSH
// ingame_video = mode ;
77302: LD_ADDR_OWVAR 52
77306: PUSH
77307: LD_VAR 0 1
77311: ST_TO_ADDR
// interface_hidden = mode ;
77312: LD_ADDR_OWVAR 54
77316: PUSH
77317: LD_VAR 0 1
77321: ST_TO_ADDR
// end ;
77322: LD_VAR 0 2
77326: RET
// export function Join ( array , element ) ; begin
77327: LD_INT 0
77329: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77330: LD_ADDR_VAR 0 3
77334: PUSH
77335: LD_VAR 0 1
77339: PPUSH
77340: LD_VAR 0 1
77344: PUSH
77345: LD_INT 1
77347: PLUS
77348: PPUSH
77349: LD_VAR 0 2
77353: PPUSH
77354: CALL_OW 1
77358: ST_TO_ADDR
// end ;
77359: LD_VAR 0 3
77363: RET
// export function JoinUnion ( array , element ) ; begin
77364: LD_INT 0
77366: PPUSH
// result := array union element ;
77367: LD_ADDR_VAR 0 3
77371: PUSH
77372: LD_VAR 0 1
77376: PUSH
77377: LD_VAR 0 2
77381: UNION
77382: ST_TO_ADDR
// end ;
77383: LD_VAR 0 3
77387: RET
// export function GetBehemoths ( side ) ; begin
77388: LD_INT 0
77390: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
77391: LD_ADDR_VAR 0 2
77395: PUSH
77396: LD_INT 22
77398: PUSH
77399: LD_VAR 0 1
77403: PUSH
77404: EMPTY
77405: LIST
77406: LIST
77407: PUSH
77408: LD_INT 31
77410: PUSH
77411: LD_INT 25
77413: PUSH
77414: EMPTY
77415: LIST
77416: LIST
77417: PUSH
77418: EMPTY
77419: LIST
77420: LIST
77421: PPUSH
77422: CALL_OW 69
77426: ST_TO_ADDR
// end ;
77427: LD_VAR 0 2
77431: RET
// export function Shuffle ( array ) ; var i , index ; begin
77432: LD_INT 0
77434: PPUSH
77435: PPUSH
77436: PPUSH
// result := [ ] ;
77437: LD_ADDR_VAR 0 2
77441: PUSH
77442: EMPTY
77443: ST_TO_ADDR
// if not array then
77444: LD_VAR 0 1
77448: NOT
77449: IFFALSE 77453
// exit ;
77451: GO 77552
// Randomize ;
77453: CALL_OW 10
// for i = array downto 1 do
77457: LD_ADDR_VAR 0 3
77461: PUSH
77462: DOUBLE
77463: LD_VAR 0 1
77467: INC
77468: ST_TO_ADDR
77469: LD_INT 1
77471: PUSH
77472: FOR_DOWNTO
77473: IFFALSE 77550
// begin index := rand ( 1 , array ) ;
77475: LD_ADDR_VAR 0 4
77479: PUSH
77480: LD_INT 1
77482: PPUSH
77483: LD_VAR 0 1
77487: PPUSH
77488: CALL_OW 12
77492: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77493: LD_ADDR_VAR 0 2
77497: PUSH
77498: LD_VAR 0 2
77502: PPUSH
77503: LD_VAR 0 2
77507: PUSH
77508: LD_INT 1
77510: PLUS
77511: PPUSH
77512: LD_VAR 0 1
77516: PUSH
77517: LD_VAR 0 4
77521: ARRAY
77522: PPUSH
77523: CALL_OW 2
77527: ST_TO_ADDR
// array := Delete ( array , index ) ;
77528: LD_ADDR_VAR 0 1
77532: PUSH
77533: LD_VAR 0 1
77537: PPUSH
77538: LD_VAR 0 4
77542: PPUSH
77543: CALL_OW 3
77547: ST_TO_ADDR
// end ;
77548: GO 77472
77550: POP
77551: POP
// end ;
77552: LD_VAR 0 2
77556: RET
// export function GetBaseMaterials ( base ) ; begin
77557: LD_INT 0
77559: PPUSH
// result := [ 0 , 0 , 0 ] ;
77560: LD_ADDR_VAR 0 2
77564: PUSH
77565: LD_INT 0
77567: PUSH
77568: LD_INT 0
77570: PUSH
77571: LD_INT 0
77573: PUSH
77574: EMPTY
77575: LIST
77576: LIST
77577: LIST
77578: ST_TO_ADDR
// if not base then
77579: LD_VAR 0 1
77583: NOT
77584: IFFALSE 77588
// exit ;
77586: GO 77637
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77588: LD_ADDR_VAR 0 2
77592: PUSH
77593: LD_VAR 0 1
77597: PPUSH
77598: LD_INT 1
77600: PPUSH
77601: CALL_OW 275
77605: PUSH
77606: LD_VAR 0 1
77610: PPUSH
77611: LD_INT 2
77613: PPUSH
77614: CALL_OW 275
77618: PUSH
77619: LD_VAR 0 1
77623: PPUSH
77624: LD_INT 3
77626: PPUSH
77627: CALL_OW 275
77631: PUSH
77632: EMPTY
77633: LIST
77634: LIST
77635: LIST
77636: ST_TO_ADDR
// end ;
77637: LD_VAR 0 2
77641: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77642: LD_INT 0
77644: PPUSH
77645: PPUSH
// result := array ;
77646: LD_ADDR_VAR 0 3
77650: PUSH
77651: LD_VAR 0 1
77655: ST_TO_ADDR
// if size > 0 then
77656: LD_VAR 0 2
77660: PUSH
77661: LD_INT 0
77663: GREATER
77664: IFFALSE 77710
// for i := array downto size do
77666: LD_ADDR_VAR 0 4
77670: PUSH
77671: DOUBLE
77672: LD_VAR 0 1
77676: INC
77677: ST_TO_ADDR
77678: LD_VAR 0 2
77682: PUSH
77683: FOR_DOWNTO
77684: IFFALSE 77708
// result := Delete ( result , result ) ;
77686: LD_ADDR_VAR 0 3
77690: PUSH
77691: LD_VAR 0 3
77695: PPUSH
77696: LD_VAR 0 3
77700: PPUSH
77701: CALL_OW 3
77705: ST_TO_ADDR
77706: GO 77683
77708: POP
77709: POP
// end ;
77710: LD_VAR 0 3
77714: RET
// export function ComExit ( unit ) ; var tmp ; begin
77715: LD_INT 0
77717: PPUSH
77718: PPUSH
// if not IsInUnit ( unit ) then
77719: LD_VAR 0 1
77723: PPUSH
77724: CALL_OW 310
77728: NOT
77729: IFFALSE 77733
// exit ;
77731: GO 77793
// tmp := IsInUnit ( unit ) ;
77733: LD_ADDR_VAR 0 3
77737: PUSH
77738: LD_VAR 0 1
77742: PPUSH
77743: CALL_OW 310
77747: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77748: LD_VAR 0 3
77752: PPUSH
77753: CALL_OW 247
77757: PUSH
77758: LD_INT 2
77760: EQUAL
77761: IFFALSE 77774
// ComExitVehicle ( unit ) else
77763: LD_VAR 0 1
77767: PPUSH
77768: CALL_OW 121
77772: GO 77783
// ComExitBuilding ( unit ) ;
77774: LD_VAR 0 1
77778: PPUSH
77779: CALL_OW 122
// result := tmp ;
77783: LD_ADDR_VAR 0 2
77787: PUSH
77788: LD_VAR 0 3
77792: ST_TO_ADDR
// end ;
77793: LD_VAR 0 2
77797: RET
// export function ResetHc ; begin
77798: LD_INT 0
77800: PPUSH
// InitHc ;
77801: CALL_OW 19
// hc_importance := 0 ;
77805: LD_ADDR_OWVAR 32
77809: PUSH
77810: LD_INT 0
77812: ST_TO_ADDR
// end ;
77813: LD_VAR 0 1
77817: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77818: LD_INT 0
77820: PPUSH
77821: PPUSH
77822: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77823: LD_ADDR_VAR 0 6
77827: PUSH
77828: LD_VAR 0 1
77832: PUSH
77833: LD_VAR 0 3
77837: PLUS
77838: PUSH
77839: LD_INT 2
77841: DIV
77842: ST_TO_ADDR
// if _x < 0 then
77843: LD_VAR 0 6
77847: PUSH
77848: LD_INT 0
77850: LESS
77851: IFFALSE 77868
// _x := _x * - 1 ;
77853: LD_ADDR_VAR 0 6
77857: PUSH
77858: LD_VAR 0 6
77862: PUSH
77863: LD_INT 1
77865: NEG
77866: MUL
77867: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77868: LD_ADDR_VAR 0 7
77872: PUSH
77873: LD_VAR 0 2
77877: PUSH
77878: LD_VAR 0 4
77882: PLUS
77883: PUSH
77884: LD_INT 2
77886: DIV
77887: ST_TO_ADDR
// if _y < 0 then
77888: LD_VAR 0 7
77892: PUSH
77893: LD_INT 0
77895: LESS
77896: IFFALSE 77913
// _y := _y * - 1 ;
77898: LD_ADDR_VAR 0 7
77902: PUSH
77903: LD_VAR 0 7
77907: PUSH
77908: LD_INT 1
77910: NEG
77911: MUL
77912: ST_TO_ADDR
// result := [ _x , _y ] ;
77913: LD_ADDR_VAR 0 5
77917: PUSH
77918: LD_VAR 0 6
77922: PUSH
77923: LD_VAR 0 7
77927: PUSH
77928: EMPTY
77929: LIST
77930: LIST
77931: ST_TO_ADDR
// end ;
77932: LD_VAR 0 5
77936: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77937: LD_INT 0
77939: PPUSH
77940: PPUSH
77941: PPUSH
77942: PPUSH
// task := GetTaskList ( unit ) ;
77943: LD_ADDR_VAR 0 7
77947: PUSH
77948: LD_VAR 0 1
77952: PPUSH
77953: CALL_OW 437
77957: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77958: LD_VAR 0 7
77962: NOT
77963: PUSH
77964: LD_VAR 0 1
77968: PPUSH
77969: LD_VAR 0 2
77973: PPUSH
77974: CALL_OW 308
77978: NOT
77979: AND
77980: IFFALSE 77984
// exit ;
77982: GO 78102
// if IsInArea ( unit , area ) then
77984: LD_VAR 0 1
77988: PPUSH
77989: LD_VAR 0 2
77993: PPUSH
77994: CALL_OW 308
77998: IFFALSE 78016
// begin ComMoveToArea ( unit , goAway ) ;
78000: LD_VAR 0 1
78004: PPUSH
78005: LD_VAR 0 3
78009: PPUSH
78010: CALL_OW 113
// exit ;
78014: GO 78102
// end ; if task [ 1 ] [ 1 ] <> M then
78016: LD_VAR 0 7
78020: PUSH
78021: LD_INT 1
78023: ARRAY
78024: PUSH
78025: LD_INT 1
78027: ARRAY
78028: PUSH
78029: LD_STRING M
78031: NONEQUAL
78032: IFFALSE 78036
// exit ;
78034: GO 78102
// x := task [ 1 ] [ 2 ] ;
78036: LD_ADDR_VAR 0 5
78040: PUSH
78041: LD_VAR 0 7
78045: PUSH
78046: LD_INT 1
78048: ARRAY
78049: PUSH
78050: LD_INT 2
78052: ARRAY
78053: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78054: LD_ADDR_VAR 0 6
78058: PUSH
78059: LD_VAR 0 7
78063: PUSH
78064: LD_INT 1
78066: ARRAY
78067: PUSH
78068: LD_INT 3
78070: ARRAY
78071: ST_TO_ADDR
// if InArea ( x , y , area ) then
78072: LD_VAR 0 5
78076: PPUSH
78077: LD_VAR 0 6
78081: PPUSH
78082: LD_VAR 0 2
78086: PPUSH
78087: CALL_OW 309
78091: IFFALSE 78102
// ComStop ( unit ) ;
78093: LD_VAR 0 1
78097: PPUSH
78098: CALL_OW 141
// end ;
78102: LD_VAR 0 4
78106: RET
// export function Abs ( value ) ; begin
78107: LD_INT 0
78109: PPUSH
// result := value ;
78110: LD_ADDR_VAR 0 2
78114: PUSH
78115: LD_VAR 0 1
78119: ST_TO_ADDR
// if value < 0 then
78120: LD_VAR 0 1
78124: PUSH
78125: LD_INT 0
78127: LESS
78128: IFFALSE 78145
// result := value * - 1 ;
78130: LD_ADDR_VAR 0 2
78134: PUSH
78135: LD_VAR 0 1
78139: PUSH
78140: LD_INT 1
78142: NEG
78143: MUL
78144: ST_TO_ADDR
// end ;
78145: LD_VAR 0 2
78149: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78150: LD_INT 0
78152: PPUSH
78153: PPUSH
78154: PPUSH
78155: PPUSH
78156: PPUSH
78157: PPUSH
78158: PPUSH
78159: PPUSH
// if not unit or not building then
78160: LD_VAR 0 1
78164: NOT
78165: PUSH
78166: LD_VAR 0 2
78170: NOT
78171: OR
78172: IFFALSE 78176
// exit ;
78174: GO 78402
// x := GetX ( building ) ;
78176: LD_ADDR_VAR 0 4
78180: PUSH
78181: LD_VAR 0 2
78185: PPUSH
78186: CALL_OW 250
78190: ST_TO_ADDR
// y := GetY ( building ) ;
78191: LD_ADDR_VAR 0 6
78195: PUSH
78196: LD_VAR 0 2
78200: PPUSH
78201: CALL_OW 251
78205: ST_TO_ADDR
// d := GetDir ( building ) ;
78206: LD_ADDR_VAR 0 8
78210: PUSH
78211: LD_VAR 0 2
78215: PPUSH
78216: CALL_OW 254
78220: ST_TO_ADDR
// r := 4 ;
78221: LD_ADDR_VAR 0 9
78225: PUSH
78226: LD_INT 4
78228: ST_TO_ADDR
// for i := 1 to 5 do
78229: LD_ADDR_VAR 0 10
78233: PUSH
78234: DOUBLE
78235: LD_INT 1
78237: DEC
78238: ST_TO_ADDR
78239: LD_INT 5
78241: PUSH
78242: FOR_TO
78243: IFFALSE 78400
// begin _x := ShiftX ( x , d , r + i ) ;
78245: LD_ADDR_VAR 0 5
78249: PUSH
78250: LD_VAR 0 4
78254: PPUSH
78255: LD_VAR 0 8
78259: PPUSH
78260: LD_VAR 0 9
78264: PUSH
78265: LD_VAR 0 10
78269: PLUS
78270: PPUSH
78271: CALL_OW 272
78275: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78276: LD_ADDR_VAR 0 7
78280: PUSH
78281: LD_VAR 0 6
78285: PPUSH
78286: LD_VAR 0 8
78290: PPUSH
78291: LD_VAR 0 9
78295: PUSH
78296: LD_VAR 0 10
78300: PLUS
78301: PPUSH
78302: CALL_OW 273
78306: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78307: LD_VAR 0 5
78311: PPUSH
78312: LD_VAR 0 7
78316: PPUSH
78317: CALL_OW 488
78321: PUSH
78322: LD_VAR 0 5
78326: PPUSH
78327: LD_VAR 0 7
78331: PPUSH
78332: CALL_OW 428
78336: PPUSH
78337: CALL_OW 247
78341: PUSH
78342: LD_INT 3
78344: PUSH
78345: LD_INT 2
78347: PUSH
78348: EMPTY
78349: LIST
78350: LIST
78351: IN
78352: NOT
78353: AND
78354: IFFALSE 78398
// begin ComMoveXY ( unit , _x , _y ) ;
78356: LD_VAR 0 1
78360: PPUSH
78361: LD_VAR 0 5
78365: PPUSH
78366: LD_VAR 0 7
78370: PPUSH
78371: CALL_OW 111
// result := [ _x , _y ] ;
78375: LD_ADDR_VAR 0 3
78379: PUSH
78380: LD_VAR 0 5
78384: PUSH
78385: LD_VAR 0 7
78389: PUSH
78390: EMPTY
78391: LIST
78392: LIST
78393: ST_TO_ADDR
// exit ;
78394: POP
78395: POP
78396: GO 78402
// end ; end ;
78398: GO 78242
78400: POP
78401: POP
// end ;
78402: LD_VAR 0 3
78406: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78407: LD_INT 0
78409: PPUSH
78410: PPUSH
78411: PPUSH
// result := 0 ;
78412: LD_ADDR_VAR 0 3
78416: PUSH
78417: LD_INT 0
78419: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78420: LD_VAR 0 1
78424: PUSH
78425: LD_INT 0
78427: LESS
78428: PUSH
78429: LD_VAR 0 1
78433: PUSH
78434: LD_INT 8
78436: GREATER
78437: OR
78438: PUSH
78439: LD_VAR 0 2
78443: PUSH
78444: LD_INT 0
78446: LESS
78447: OR
78448: PUSH
78449: LD_VAR 0 2
78453: PUSH
78454: LD_INT 8
78456: GREATER
78457: OR
78458: IFFALSE 78462
// exit ;
78460: GO 78537
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78462: LD_ADDR_VAR 0 4
78466: PUSH
78467: LD_INT 22
78469: PUSH
78470: LD_VAR 0 2
78474: PUSH
78475: EMPTY
78476: LIST
78477: LIST
78478: PPUSH
78479: CALL_OW 69
78483: PUSH
78484: FOR_IN
78485: IFFALSE 78535
// begin un := UnitShoot ( i ) ;
78487: LD_ADDR_VAR 0 5
78491: PUSH
78492: LD_VAR 0 4
78496: PPUSH
78497: CALL_OW 504
78501: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78502: LD_VAR 0 5
78506: PPUSH
78507: CALL_OW 255
78511: PUSH
78512: LD_VAR 0 1
78516: EQUAL
78517: IFFALSE 78533
// begin result := un ;
78519: LD_ADDR_VAR 0 3
78523: PUSH
78524: LD_VAR 0 5
78528: ST_TO_ADDR
// exit ;
78529: POP
78530: POP
78531: GO 78537
// end ; end ;
78533: GO 78484
78535: POP
78536: POP
// end ;
78537: LD_VAR 0 3
78541: RET
